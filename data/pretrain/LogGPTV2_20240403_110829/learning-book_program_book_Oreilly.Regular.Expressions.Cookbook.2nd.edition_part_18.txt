}catch (ArgumentException ex){
// Syntax error in the regular expression
3.3 Create RegularExpesion bjects  119
---
## Page 136
VB.NET
If you know the regex to be correct:
Dim Regexobj As New Regex("regex pottern°)
(aqeuea Suus e guaq anduxasn) 1asn pua au1 Kq papiaoad st xaau at J1
Try
Din RegexObj As New Regex(UserInput)
Catch ex As ArgunentException
End Try
'Syntax error in the regular expression
Java
If you know the regex to be correct:
Pattern regex = Pattern.compile(“regex pottern");
:(aqeiuea Bus e Suaq 4nduxasn) asn pua oq 6q papiaoad st xaau au J
try {
Pattern regex = Pattern.compile(userInput);
} catch (PatternSyntaxException ex){
// Syntax error in the regular expression
To be able to use the regex on a string, create a Matcher:
To use the regex on another string, you can create a new Matcher, as just shown, or
reuse an existing one:
regexMatcher. reset(anotherSubjectString);
JavaScript
Literal regular expression in your code:
var myregexp = /regex pottern/;
Regular expression retrieved from user input, as a string stored in the variable
userinput:
(ndutxasn)dxgdag mau = dxaaxAu xeA
XRegExp
If you want to use XRegExp's extended regular expression syntax in JavaScript, you
need to create an XRegExp object from a string:
(_uxa12od xa6ax_)dxg8agx = dxa8axAu xeA
120 | Chapter3: Programming with RegularExpressions
---
## Page 137
Perl
$myregex = qz/regex pottern/
Regular expression retrieved from user input, as a string stored in the variable
Suserinput:
$nmyregex = qr/$userinput/
Python
reobj = re.compile("regex pattern")
Regular expression retrieved from user input, as a string stored in the variable
userinput:
reobj = re.compile(userinput)
Ruby
Literal regular expression in your code:
myregexp = /regex pottern/;
Regular expression retrieved from user input, as a string stored in the variable
userinput:
myregexp = Regexp.new(userinput);
Discussion
Before the regular expression engine can match a regular expression to a string, the
regular expression has to be compiled. This compilation happens while your applica-
tion is running. The regular expression constructor or compile function parses the
string that holds your regular expression and converts it into a tree structure or state
machine. The function that does the actual patterm matching will traverse this tree or
state machine as it scans the string, Programming languages that suppor ieral regular
expressions do the compilation when execution reaches the regular expression
operator.
.NET
In C# and VB.NET, the NET class System Text RegularExpressions.Regex holds one
compiled regular expression. The simplest constructor takes just one parameter: a
string that holds your regular expression.
If there’s a symtax error in the regular expression, the Regex() constructor will throw
an ArgumentException. The exception message will indicate exactly which error was
encountered. It is important to catch this exception if the regular expression is provided
by the user of your application. Display the exception message and ask the user to
correct the regular expression. If your regular expression is a hardcoded string literal,
3.3 Create Regular Expression 0bjects | 121
---
## Page 138
you can omit catching the exception if you use a code coverage tool to make sure the
line is executed without throwing an exception. There are no possible changes to state
or mode that could cause the same literal regex to compile in one situation and fail to
compilein another. Note thatif there is a syntax errorin yourliteral regex,the exception
will occur when your application is run, not when your application is compiled.
You should construct a Regex object if you will be using the regular expression inside
-u 1oafqo xaau aq Suonnsuo uogeodde nos 1nou8noun kipaseadau 1o doof e
volves no extra overhead. The static members of the Regex class that take the regex as
a string parameter construct a Regex object internally anyway, so you might just as well
do it in your own code and keep a reference to the object
If you plan to use the regex only once or a few times, you can use the static members
of the Regex class instead, to save a line of code. The static Regex members do not throw
away the internally constructed regular expression object immediately; instead, they
keep a cache of the 15 most recently used regular expressions. You can change the cache
dn Suoo kq auop st dnoo auoeo a1 uadod azsaupexaa au Suas q azis
your regular expression string in the cache. But don’t go overboard with the cache. If
you need lots of regex objects frequently, keep a cache of your own that you can look
up more efficiently than with a string search.
Java
In Java, the Pattern class holds one compiled regular expression. You can create objects
of this class with the Pattern,compile() class factory, which requires just one param-
eter: a string with your regular expression.
If there’s a syntax error in the regular expression, the Pattern.compile() factory will
throw a PatternSyntaxException. The exception message will indicate exactly which
error was encountered. It is important to catch this exception if the regular expression
is provided by the user of your application. Display the exception message and ask the
user to correct the regular expression. If your regular expression is a hardcoded string
literal, you can omit catching the exception if you use a code coverage tool to make
to state or mode that could cause the same literal regex to compile in one situation and
sure the line is executed without throwing an exception. There are no possible changes
fail to compile in another. Note that if there is a syntax error in your literal regex, the
exception will occur when your application is run, not when your application is
compiled.
Unless you plan to use a regex only once, you should create a Pattern object instead of
using the static members of the String class. Though it takes a few lines of extra code,
that code willrun more efficiently. The static calls recompile your regex each and every
time. In fact, Java provides static calls for only a few very basic regex tasks.
A Pattern object only stores a compiled regular expression; it does not do any actual
work. The actual regex matching is done by the Matcher class. To create a Matcher, call
122 | Chapter 3: Programming with RegularExpressions
---
## Page 139
the matcher() method on your compiled regular expression. Pass the subject string as
the only argument to matcher().
You can call matcher() as many times as you like to use the same regular expression on
multiple strings. You can work with multiple matchers using the same regex at the same
time, as long as you keep everything in a single thread. The Pattern and Matcher
classes are not thread-safe. If you want to use the same regex in multiple threads, call
Pattern,compile() in each thread.
Ifyou'redoneapplyingaregextoone string and wantto applythesameregex to another
string, you can reuse the Matcher object by calling reset(). Pass the next subject string
as the only argument. This is more efficient than creating a new Matcher object.
reset () returns the same Matcher you called it on, allowing you to easily reset and use
a matcher in one line of codefor example, regexMatcher reset(nextString) find().
JavaScript
The notation for literal regular expressions shown in Recipe 3.2 already creates a new
regular expression object. To use the same object repeatedly, simply assign it to a
variable.
If you have a regular expression stored in a string variable (e.g., because you asked the
engau au aduos o 1ossnnsuos ()dxg8ag aq1 asn °(uoissaadxa 1enaue u ad1 o1 1asn
expression. Notice that the regular expression inside the string is not delimited by
forward slashes. Those slashes are part of JavaScript’s notation for literal RegExp objects,
rather than part of the regular expression itself.
Since assigning a literal regex to a variable is trivial, most of the
JavaScript solutions in this chapter omit this line of code and use
same rgex me thn ne, you shoul asgn the regex to a varile
ad use that arile istad f pasting hamelitera egex mlile
times into your code. This increases performance and makes your code
easier to maintain.
XRegExp
‘xeus uorssaudxa reqnsau s,duogeae[ o1 siuauaouequa s,dxg8αx asn o1 1uem nos j1
you have to use the XRegExp<) constructor to compile the regular expression. For best
performance when using the same regular expression repeatedly, you should assign it
to a variable. Pass that variable to methods of the XRegExp class when using the regular
expression.
In situations where it isn’t practical to keep a variable around to hold the XRegExp object,
you can use the XRegExp. cache() method to compile the regular expression. This meth-
od will compile each regular expression only once. Each time you callit with the same
parameters, it will return the same XRegExp instance.
3.3 Create Regular Expression 0bjects | 123
---
## Page 140
PHP
qeea t u uossadx aenlau paduoo t aos o Kem e apaud ou saop dHd
Whenever you want to do something with a regular expression, you have to pass it as
a string to one of the preg functions.
The preg functions keep a cache of up to 4,096 compiled regular expressions. Although
the hash-based cache lookup is not as fast as referencing a variable, the performance
hit is not as dramatic as having to recompile the same regular expression over and over.
When the cache is full,the regex that was compiled the longest ago is removed.
Perl
You can use the °quote regex" operator to compile a regular expression and assign it
to a variable. It uses the same syntax as the match operator described in Recipe 3.1,
except that it starts with the letters qr instead of the letter m.
Perl is generally quite eficient at reusing previously compiled regular expressions.
Therefore, we don’t use qr// in the code samples in this chapter. Only Recipe 3.5
demonstrates its use.
qr/ is useful when you're interpolating variables in the regular expression or when
you've retrieved the whole regular expression as a string (e.g., from user input). With
Mau aq iagaa on padloau si xataa a uaa gonuoo ueo no ^/upsxaaxs/zb
‘a iaaa xaaaa au adtoau pnom /uprsxasaxs/u -8upasxaars jo stuasos
whereas m/$regexstring/o never recompiles it. Recipe 3.4 explains /0.
Python
The compile() function in Python’s re module takes a string with your regular expres-
sion, and returns an object with your compiled regular expression.
You should call compile() explicitly if you plan to use the same regular expression
repeatedly. All the functions in the re module first call compile(), and then call the
function you wanted on the compiled regular expression object.
The compile() function keeps a reference to the last 100 regular expressions that it
compiled. This reduces the recompilation of any of the last 100 used regular expressions
to a dictionary lookup. When the cache is full, it is cleared out entirely.
If performance is not an issue, the cache works well enough that you can use the func
tions in the re module directly. But when performance matters, calling compile() is a
good idea.
Ruby
The notation for literal regular expressions shown in Recipe 3.2 already creates a
new regular expression object. To use the same object repeatedly, simply assign it to a
variable.
124 | Chapter3: Programming with RegularExpressions
---
## Page 141
If you have a regular expression stored in a string variable (e.g., because you asked the
user to type in a regular expression), use the Regexp.new() factory or its synonym
Regexp . compile() to compile the regular expression. Notice that the regular expression
inside the sring is not delimited by forward slashes. Those slashes are part of Ruby's
notation for literal Regexp objects and are not part of the regular expression itself.
Since assigning a literal regex to a variable is trivial, most of the Ruby
solutions in this chapter omit this line of code and use the literal regular
than once, youshould assign the regex to a variable and use the variable
instead of pasting the same literal regex multiple times into your code.
This increases performance and makes your code easier to maintain.
Compiling aRegular Expression Down to CIL
C#
Regex regex0bj = new Regex(*regex pottern", Regex0ptions.Compiled);
VB.NET
Dim Regex0bj As New Regex("regex pottern°, RegexOptions .Compiled)
Discussion
When you construct a Regex object in NET without passing any options, the regular
expression is compiled in the way we described in *Discussion" on page 121. If you
pass RegexOptions,Compiled as a second parameter to the Regex() constructor, the
Regex class does something rather different: it compiles your regular expression down
to CIL, also known as MSIL. CIL stands for Common Intermediate Language, a low-
level programming language that is closer to assembly than to C# or Visual Basic.
All .NET compilers produce CIL. The first time your application runs, the .NET
Framework compiles the CIL further down to machine code suitable for the user’s
computer.
The benefit of compiling a regular expression with Regex0ptions, Compiled is that it can
run up to 10 times faster than a regular expression compiled without this option
The drawback is that this compilation can be up to two orders of magnitude slower
than simply parsing the regex sring into a tree. The CIL code also becomes a permanent
part of your application until it is terminated. CIL code is not garbage collected.
Use Regex0ptions Compiled only if a regular expression is either so complex or needs
to process so much text that the user experiences a noticeable wait during operations
using the regular expression. The compilation and assembly overhead is not worth it
for regexes that do their job in a split second.
3.3 Create Regular Expression Objects | 125
---
## Page 142
See Also
Recipe 3. 1 explains how to insert regular expressions as literal strings into source code.
Some programming languages require this extra step before you can create regular
Recipe 3.2 explains how to import the regular expression library into your source code.
expression objects.
Recipe 3.4 explains how to set regular expression options, which is done as part of
literal regular expressions in some programming languages.
3.4SetRegularExpressionOptions
Problem
You want to compile a regular expression with all of the available matching modes:
free-spacing, case insensitive, dot matches line breaks, and "^ and $ match at line
breaks."
Solution
C#
“utatod xabax,)xaday mau = [aoxasa1 xa8ag
RegexOptions .IgnorePatternkhitespace | RegexOptions . IgnoreCase |
Regex0ptions Singleline | Regex0ptions.Multiline);
VB.NET
Dim Regexobj As New Regex("regex pottern”,
Regex0ptions Singleline 0r Regex0ptions.Multiline)
Java
Pattern regex = Pattern.compile("regex pottern",
Pattern.COMMENTS | Pattern.CASE_INSENSITIVE | Pattern-UNICODE_CASE |
Pattern,DOTALL I Pattern,MULTILINE);
JavaScript
Literal regular expression in your code:
var myregexp = /regex pottern/im;
Regular expression retrieved from user input, as a string:
(ut。 “ndutxasn)dxgdag mau = dxa8axAu xeA
126 | Chapter 3: Programming with RegularExpressions
---
## Page 143
XRegExp
(_uspx, ^_uxa1od xabax_)dxg8agx = dxa8axAu xeA
PHP
,uspx/uxapod xabax/, = Suxsxa8ax
Perl
m/regex pottern/xism;
Python
reobj = re.compile("regex pattern",
re.VERBOSE | re.IGNORECASE |
re.DOTALL | re.MULTILINE)
Ruby
Literal regular expression in your code:
myregexp = /regex pottern/xim;
Regular expression retrieved from user input, as a string:
myregexp = Regexp,new(userinput,
Regexp::EXTENDED or Regexp::IGNORECASE or
Regexp: :MULTILINE);
Discussion
Many of the regular expressions in this book, and those that you find elsewhere, are
written to be used with certain regex matching modes. There are four basic modes that
nearly all moderm regex flavors support. Unfortunately, some flavors use inconsistent
and confusing names for the options that implement the modes. Using the wrong
modes usually breaks the regular expression.
All the solutions in this recipe use flags or options provided by the programming lan-
guage or regular expression class to set the modes. Another way to set modes is to use
mode modifiers within the regular expression. Mode modifiers within the regex always
override options or flags set outside the regular expression.
NET
The Regex() constructor takes an optional second parameter with regular expressions
options. You can find the available options in the Regex0ptions enumeration.
Free-spacing: RegexOptions IgnorePatternlhi tespace
Case insensitive: RegexOptions IgnoreCase
Dot matches line breaks: RegexOptions Singleline
Z1 suoo ssxenags s
---
## Page 144