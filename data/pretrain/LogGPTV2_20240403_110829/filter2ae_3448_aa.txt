**作者：Hcamael@知道创宇404实验室  
时间：2021年6月1日**
前段时间Exim突然出现了好多CVE[1]，随后没多久Github上也出现了对`CVE-2020-28018`进行利用最后达到RCE的EXP和利用思路[2]。随后我也对该漏洞进行复现分析。
### 概述
经过一段时间的环境搭建，漏洞复现研究后，发现该漏洞的效果是很不错的，基本能在未认证的情况下稳定利用。但限制也很多：
  1. 要求服务端开启PIPELINING
  2. 要求服务端开启TLS，而且还是使用openssl库
  3. EXP不能通杀
第一点还好，大部分都是默认开启的。但是第二点比较困难，因为我测试的两个系统debian/ubuntu，默认都是使用GnuTLS而不是OpenSSL。所以搭建环境的时候需要重新编译deb包。
第三点，测试debian和ubuntu的exp相差还是比较大的，不过后续研究发现是版本问题，如果不嫌麻烦，可以研究研究通杀的方法。Github公开的那个EXP不太行，我测试的两个版本都没戏，离能用的exp还相差比较多，当成探测的PoC还差不多。
### 环境搭建
先给一份`Dockerfile`:
    FROM ubuntu:18.04
    RUN sed -i "s/archive.ubuntu.com/mirrors.ustc.edu.cn/g" /etc/apt/sources.list
    RUN sed -i "s/security.ubuntu.com/mirrors.ustc.edu.cn/g" /etc/apt/sources.list
    RUN apt update
    RUN mkdir /root/exim4
    COPY *.deb /root/exim4/
    COPY *.ddeb /root/exim4/
    RUN dpkg -i /root/exim4/*.deb || apt --fix-broken install -y
    RUN dpkg -i /root/exim4/*.deb && dpkg -i /root/exim4/*.ddeb
    RUN sed -i "s/127.0.0.1 ; ::1/0.0.0.0/g" /etc/exim4/update-exim4.conf.conf
    RUN sed -i "1i\MAIN_TLS_ENABLE = yes" /etc/exim4/exim4.conf.template
    COPY exim.crt /etc/exim4/exim.crt
    COPY exim.key /etc/exim4/exim.key
    COPY exim_start /exim_start
    RUN update-exim4.conf && chmod +x /exim_start
    CMD ["/exim_start"]
其中`crt`和`key`的生成脚本如下：
    #!/bin/sh -e
    if [ -n "$EX4DEBUG" ]; then
      echo "now debugging $0 $@"
      set -x
    fi
    DIR=/etc/exim4
    CERT=$DIR/exim.crt
    KEY=$DIR/exim.key
    # This exim binary was built with GnuTLS which does not support dhparams
    # from a file. See /usr/share/doc/exim4-base/README.Debian.gz
    #DH=$DIR/exim.dhparam
    if ! which openssl > /dev/null ;then
        echo "$0: openssl is not installed, exiting" 1>&2
        exit 1
    fi
    # valid for three years
    DAYS=1095
    if [ "$1" != "--force" ] && [ -f $CERT ] && [ -f $KEY ]; then
      echo "[*] $CERT and $KEY exists!"
      echo "    Use \"$0 --force\" to force generation!"
      exit 0
    fi
    if [ "$1" = "--force" ]; then
      shift
    fi     
    #SSLEAY=/tmp/exim.ssleay.$$.cnf
    SSLEAY="$(tempfile -m600 -pexi)"
    cat > $SSLEAY s;
      len = corked->ptr;
      corked = NULL;
      }
    ...
    }
`static gstring * corked = NULL;`变量存在UAF漏洞。
该函数是一个在建立了TLS链接后，进行socket输出的函数。
当参数more的值为True的时候，表示后续还有输出，把当前的输出存起来，等到more为False的时候，再进行输出。之前的值存储在`corked`这个`staic`变量里面。只有当进行TLS输出的时候，才会把`corked`变量赋值为NULL，进行释放。
审计一波代码，把目光放在`smtp_printf`函数，基本都是靠该函数调用的`tls_write`函数。
Exim处理用户输入的主函数是`smtp_in.c`文件的`smtp_setup_msg`函数。
    int
    smtp_setup_msg(void)
    {
    ......
    # MAIL FROM
        if (rc == OK || rc == DISCARD)
          {
          BOOL more = pipeline_response();
          if (!user_msg)
            smtp_printf("%s%s%s", more, US"250 OK",