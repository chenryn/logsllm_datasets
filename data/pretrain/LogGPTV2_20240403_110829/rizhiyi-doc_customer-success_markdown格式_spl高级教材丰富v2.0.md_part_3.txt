语法：\,...
描述：当参数series=exact时，timeformat参数才会生效。新生成的列名会按照timeformat指定的格式进行命名。例如，timeformat="yyyy-MM-dd"，则新生成的两列字段名为2020-01-01、2020-01-02。
\：
语法：\
描述：分组字段，在分组内进行移动平均值的计算
描述:
movingavg提供在一个指定大小的移动窗口下计算某个数值字段的移动平均值
#### 场景
计算数据近期的移动平均线，获知数据当前所处位置，并预测未来的走势。
#### 示例
绘制当期日志量趋势和近5日、近15日、近60日的移动平均线趋势如下。（为方便举例，以30分钟为分桶粒度）
\*\|bucket timestamp span=30m as ts
\|stats count() as cnt by ts
\|movingavg cnt,5 as MA5
\|movingavg cnt,15 as MA15
\|movingavg cnt,60 as MA60
![电脑屏幕的截图
描述已自动生成](media/image23.png){width="5.244027777777778in"
height="2.3752384076990376in"}
最终实现效果如图：
![地图的截图
描述已自动生成](media/image24.png){width="5.322050524934383in"
height="2.441731189851269in"}
# 生成数据类命令
**makeresults 无中生有**
#### 作用
构造指定的结果。只能被用于第一个命令且不能有搜索的query部分。
#### 语法
\| makeresults \[count=\\]
可选参数：count
#### 场景
有时您脑海中会浮现一个关于spl的奇思妙想，但苦于找不到合适的日志样例去进行测试。这是可能就会用到makeresults命令，无中生有，去构造一行或多行数据进行测试。
#### 示例
示例1 生成5条数据形成表格
\| makeresults count=5
\| eval a=1
![image-20200226150057609](media/image25.png){width="5.763888888888889in"
height="2.525in"}
从上面的示例不难看出，count参数可以指定构造几条数据，但在添加新列的时候，数据也都是相同的。
那么如何构造多行不同的数据呢，我们优先想到的是append追加，但是实现起来spl语句冗长，十分繁琐。此时我们可以利用多值字段的形式，去构造多行不同数据，如下示例所示。
示例2 利用多值字段生成不同的五条数据形成表格
\| makeresults
\| eval exp=\"a,b,c,d,e\"
\| eval exp = split(exp,\",\")
\| mvexpand exp
![image-20200226151119146](media/image26.png){width="5.763888888888889in"
height="2.426388888888889in"}
**gentimes 生成时间戳**
#### 命令研发背景
3.1版本添加。在POC的时候，用户经常是一次性给一批数据，然后要对这批数据做分时间桶的计算。当这个计算又需要map来解决分组过多问题的时候，就有必要配合gentimes指令来生成这段老旧的时间桶了。
#### 作用
可以生成指定范围的时间戳数据，用于指定开始时间
#### 语法
\| gentimes \[start=\\] \[gentimes-params\]\*
必要参数：start \
> 可选格式：\[\"2020-01-01\"\|\"2020-01-01:18:00:00\"\|\"-1d/d\"\|\"now-1d\"\|\"1571557017000\"\]
>
> 可选参数：
>
> end \ 用于指定结束时间
>
> increment \ 用于指定步长，默认为1d
>
> humantime \ 是否生成两个新字段为
>
> starthuman和endhuman，用户将start和end转换为YYYY-MM-dd:hh:mm:ss格式
>
> timezone \ 用于指定时区，默认为+08:00
#### 场景
和makeresults类似，都是通过指令制造一段虚拟的数据。最适合的场景是制造一段搜索范围作为下拉框输入项，如示例2所示。和bucket的区别是gentimes不会跳过空数据。
#### 示例
示例1 生成一段本月的以周为周期的数据
\| gentimes start=\"now/M\" increment=\"7d\" humantime=true
![image-20200228155430603](media/image27.png){width="5.763888888888889in"
height="1.60625in"}
示例2 在仪表盘中按上下午选择搜索两天内的数据添加输入项如下：
![image-20200228155903926](media/image28.png){width="5.763888888888889in"
height="6.038194444444445in"}可生成2天内00:00\~11:59:59,12:00:00\~23:59:59共六段时间范围
![image-20200228160015297](media/image29.png){width="5.763888888888889in"
height="3.8354166666666667in"}将该输入项运用到趋势图中进行对应时间的搜索
![image-20200228160157517](media/image30.png){width="5.763888888888889in"
height="6.175694444444445in"}
# 多值字段类命令
**mvexpand 拆分多值字段**
#### 作用
拆分多值字段
#### 语法
mvexpand field \[limit=\\]
必要参数：field 须为多值字段
可选参数：limit 针对数组里面元素过多进行limit限制的情况
#### 场景
将一个含有多值字段的事件，遍历展开变成多条事件。
![](media/image31.png){width="5.763888888888889in"
height="1.7909722222222222in"}
#### 示例
示例1 利用mvexpand将多值字段拆分成多行，并进行limit限制
\| makeresults
\| eval exp=\"a,b,c,d,e\"
\| eval exp = split(exp,\",\")
![page1image59376448](media/image32.png){width="5.763888888888889in"
height="2.3833333333333333in"}
现在exp就是一个多值字段了，然后我们需要用mvexpand将其拆分，再进行limit限制。
![page1image59376240](media/image33.png){width="5.763888888888889in"
height="1.9993055555555554in"}
示例2 利用mvexpand将含有多值字段的日志拆分成多条日志的形式
\| makeresults
\| eval exp=\"a,b,c,d,e\"
\| eval exp = split(exp,\",\")
\| mvexpand exp limit=3
![page2image59376864](media/image34.png){width="5.763888888888889in"
height="2.6in"}
这里以多tag为例，将这条多tag的日志，拆分成多条日志。
![page2image59377280](media/image35.png){width="5.763888888888889in"
height="2.7736111111111112in"}
### mvcombine 合并多值字段
#### 命令研发背景
多值归并，将只有单个字段值不同的多行日志合并为一行日志，对应字段归并成为一个多值字段。
mvcombine指令由于需要将相同的行进行合并，所以需要在内存中暂存结果，所以对性能有限制。目前默认限制只对5万条结果进行mvcombine，可以根据自己服务器的性能进行调整spl配置项mvcombine.max_events。
#### 作用
mvcombine的行为是将除指定字段外，其他字段值均相等的行合并为一行，指定字段将合并为一个数组值。
#### 语法
mvcombine \[sep=\\] field
可选参数：\
即用于统计的函数，多行合并时的指定字段值作为字符串合并时的分隔符，默认为空格。
#### 场景
多值归并，将指定的字段进行合并。如果某个字段的值有多个都是相同的，表格展示的时候是多行，我们就可以通过mvcombine将这个字段的值进行合并。
#### 示例
ip:\*
\| table ip, appname
\| limit 5
\| mvcombine appname
![](media/image36.png){width="5.763888888888889in"
height="1.0104166666666667in"}
![](media/image37.png){width="5.763888888888889in"
height="1.2291666666666667in"}
# csv导入导出类命令
### save 保存搜索结果
#### 作用
保存搜索结果
#### 语法
\| save \
> 必要参数：\
> 最好指定挂接共享文件系统的目录，/data/rizhiyi/spldata/或者其子目录。
#### 场景
可将搜索的结果保存为文件，目前仅支持csv格式
#### 示例
示例1 统计appname为linux的所有采集文件路径，并将结果保存为csv
![image-20200228144011444](media/image38.png){width="5.763888888888889in"
height="1.5493055555555555in"}
![image-20200228144121165](media/image39.png){width="5.763888888888889in"
height="1.8375in"}
### inputlookup 输入映射
#### 作用
支该命令支持将外部CSV文件的数据作为后续指令的输入；
#### 语法
\|inputlookup \[start=\\] \[max=\\] \
\'文件路径\':文件名必须是相对路径，并存在\'/data/rizhiyi/spldata/lookup\'目录下;
#### 场景
针对日志易的仪表盘，拥有可以添加输入的快捷操作如下图：
![](media/image40.png){width="5.763888888888889in"
height="0.7826388888888889in"}
![](media/image41.png){width="5.832590769903762in"
height="3.968853893263342in"}
此时我们可以利用inputlookup命令自动导入要加的字段，首先把主机列表以csv文件保存，示例主机列表文件见附件，通过命令读取如下截图：
![](media/image42.png){width="5.763888888888889in"
height="2.1243055555555554in"}
在添加输入项可以先读曲然后利用fields（过滤字段）把主机IP过滤出来
\|inputlookup test_host.csv \|fields ip
如下结果，可以便捷的选择主机IP：
![](media/image43.png){width="5.763888888888889in"
height="2.3506944444444446in"}
### outputlookup 导出成csv
#### 命令研发背景
使用统一的新字典功能。支持和inputlookup的联动，完成SIEM场景下的定时更新维护内网IP列表等功能。
#### 作用
使用outputlookup命令可以生成csv文件，默认下载路径为：/data/rizhiyi/spldata/lookup
#### 语法
outputlookup \[createempty=false\] \[overrideifempty=false\]
\[maxresult=100\] \
  -----------------------------------------------------------------------------------------------------
  **参数**                          **说明**
  --------------------------------- -------------------------------------------------------------------
  \(必填)                文件名
  \[createempty=false\](可选)       表示如果结果为空是否要创建一个空文件，默认值false
  \[overrideifempty=false\](可选)   表示如果结果为空,是否要用空文件覆盖已经存在的重名文件，默认值true
  \[maxresult=100\](可选)           表示导出结果的最大数量，默认值500000
  -----------------------------------------------------------------------------------------------------
#### 场景
将数据导出csv文件，便于inputlookup或者lookup2使用
#### 示例
appname:\*
\| stats count() as cnt by source
\| outputlookup source.csv
说明：
appname:\*
\| stats count() as cnt by source
先统计出今天每个日志文件采集了多少条日志
\| outputlookup source.csv
接着管道符后使用outputlook命令将前面统计结果输出到csv文件里面，未使用可选参数，所以均为默认值，既：
-   如果结果为空不要创建一个空文件
-   如果结果为空,要用空文件覆盖已经存在的重名文件
-   导出结果的最大数量为500000
![image.png](media/image44.png){width="5.763888888888889in"
height="2.178472222222222in"}
![image.png](media/image45.png){width="5.763888888888889in"
height="1.1972222222222222in"}