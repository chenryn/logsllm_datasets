nashset.add(2) ;
nashset.add(1);
 data []bool
操作的总数目在[1,10000] 范围内。
The number of operations will be in the range of [1, 10000].
 return MyHashset{ 
不要使用内建的哈希集合库。
所有的值都在[1, 1000000] 的范围内。
data: make([]bool，1000001)
M
// returns false (already removed)
// returns true
// returns false (not found)
// returns true 
---
## Page 676
Example:
To be specific, your design should include these functions: 
 Design a HashMap without using any built-in hash table libraries.
706. Design HashMap
题目
●get(key) : Returns the value to which the specified key is mapped, or -1 if this map contains
● put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in
func (this *MyHashset) Contains(key int) bool {
func (this *MyHashset) Remove(key int) {
} (zu! Kay)pp (2asyseh3
// returns 2 
// linked list becomes 1->2->3
---
## Page 681
func (this *MyLinkedList) AddAtIndex(index int, val int) {
aq aou lm apou aua ‘unbual aua uua haneaue s! xapu! I 'is1l pautl to pua
inserted. */
/** Add a node of value val before the index-th node in the linked list. If
func (this *MyLinkedList) AddAtTail(val int) {
/** Append a node of value val to the last element of the linked list. */
   (x ) 
the insertion, the new node will be the first node of the linked list. */ 
/** Add a node of value val before the first element of the linked list. After
func (this *MyLinkedList) Get(index int) int {
invalid, return -l. */ 
/** Get the value of the index-th node in the linked list. If the index is
if index == 0 {
cur := this 
cur.Next = tmp 
tmp := &MyLinkedList{val: val, Next: nil}
for cur.Next != nil {
cur := this 
} else{ 
if this.Val == -999 {
return -1
for i := O; cur != nil; i++ {
cur := this 
return MyLinkedList{val: -999, Next: nil}
 cur = cur.Next 
tmp := &MyLinkedList{val: this.val, Next: this.Next}
 this.val = val 
this.Next = tmp
this.val = val 
cur = cur.Next
if i == index 
} else { 
if cur.val == -999 {
 return -1 
return cur.val
Y
---
## Page 682
Optimize it such that it minimizes the call to system's Math.random().
random integer from [O, N) which is NOT in B. 
Given a blacklist B containing unique integers from [0, N), write a function to return a uniform 
题目
710. Random Pick with Blacklist
func (this *MyLinkedList) DeleteAtIndex(index int) {
/** Delete the index-th node in the linked list, if the index is valid. */
if cur != nil && cur.Next != nil {
for i := O; cur != nil; i++ {
cur := this 
if cur != nil && cur.val != -999 {
obj := Constructor();
for i := O; cur != nil; i++ {
obj.DeleteAtIndex(index) ;
obj.AddAtIndex(index,val);
obj.AddAtTail(val);
obj.AddAtHead(val);
param_l := obj.Get(index)
 cur.Next = cur.Next.Next 
if i == index-1 { 
tmp := &MyLinkedList{val: val, Next: cur.Next}
cur = cur.Next
if i == index-1 { 
cur = cur.Next
cur.Next = tmp 
return 
this.AddAtHead(val)
break
break
---
## Page 683
list, even if there aren't any.
arguments, N and the blacklist B. pick has no arguments. Arguments are always wrapped with a 
The input is two lists: the subroutines called and their arguments. Solution's constructor has two
Explanation of Input Syntax:
 Example 4:
Example 3: 
 Example 2:
Example 1: 
Note:
Output: [null,1,3,1]
Output: [null,0,0,2]
Output: [null,1,1,1]
Output: [null,0,0,0]
 3. [0, N) does NOT include N. See interval notation.
[[4,[2]],],, ]
[[2,],],],[ 
2. 0 <= B.length <min(100000, N)
["solution","pick","pick","pick"]
[[3,[1]],[],[],[] 
["Solution","pick","pick","pick"]
[[1,[],],], 
["solution","pick","pick","pick"]
1． 1 <= N <= 1000000000
Input:
Input:
Input:
Input:
---
## Page 684
的位置。这样末尾开始的几个数要么是黑名单里面的数，要么就是映射的数字。
突了，我们就把它映射到另外一个不在黑名单里面的数中。如上图，我们可以将3，5重新映射到7，6
这一题有点类似 hash 冲突的意思。如果随机访问一个数，这个数正好在黑名单之内，那么就hash 冲
假设 N=10, blacklist=[3,5,8, 9] 
我们输出的数字是随机的，所以不需要存下所有的白名单的数字。
这道题的N的范围特别大，最大是10 亿。如果利用桶计数，开不出来这么大的数组。考虑到题目要求
解题思路
任意一个数字。
给一个数字 N，再给一个黑名单 B，要求在[O,N)区间内随机输出一个数字，这个是不在黑名单 B 中的
题目大意
8
9
5
4
3
2
0
---
## Page 685
代码
出那个 index即可。
map 中是否存在映射关系，如果存在就输出 map 中映射之后的值，如果没有就代表没有冲突，直接输
名单不存在的数，找到了就把[0,M] 区间内冲突的数字映射到这里来。最后 pick 的时候，只需要查看 
区间的头部或者尾部开始映射，我选择的是末尾开始映射。从(M,N)这个区间的末尾开始往前找，找黑
就代表 hash 冲突了。冲突就把这个数字映射到(M,N)这个区间范围内。为了提高效率，可以选择这个
hash 表总长度应该为 M = N-len(backlist)，然后在 M 的长度中扫描是否有在黑名单中的数，如果有
func Constructor710(N int, blacklist []int) Solution {
type Solution struct {
import "math/rand"
package leetcode
blackMap := map[int]int{} 
 BlackMap map[int]int
return Solution{BlackMap: blackMap, M: M}
M := N - len(blacklist) 
for i := O; i < len(blacklist); i++ {
if value < M {
 blackMap[blacklist[i]] = 1 
blackMap[value] = N - 1 
for {
-
 if -， ok := blackMap[N-1]; ok {
} else 
zi1
break
int 
---
## Page 686
解题思路
给出一个数组，
题目大意
Note:
Example 1: 
the subarray is less than k.
Count and print the number of (contiguous) subarrays where the product of all the elements in 
Your are given an array of positive integers nums.
题目
713. Subarray Product Less Than K
●0<=k<10^6.
●0<nums[i] <1000.
●0< nums.length <= 50000.
less than k.
Note that [10, 5, 2] is not included as the product of 100 is not strictly
[2]，[6]，[10，5]，[5，2]，[2，6]，[5，2，6].
Explanation: The 8 subarrays that have product less than 100 are: [10], [5]
output:8
Input: nums = [10,5, 2,6],k = 100
func (this *solution) Pick() int {
*/
￥
return idx 
idx := rand.Intn(this.M)
param_l := obj.Pick();
 obj := Constructor(N，blacklist); 
Your Solution object will be instantiated and called as such:
 return this.BlackMap[idx] 
要求在输出符合条件的窗口数，条件是，窗口中所有数字乘积小于K。
---
## Page 687
 Example 1: 
 Return the maximum profit you can make.
stock share before you buy again.)
each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the 
You may complete as many transactions as you like, but you need to pay the transaction fee for
stock on day i; and a non-negative integer fee representing a transaction fee.
题目
Transaction Fee
714. Best Time to Buy and Sell Stock with
代码
k，左边窗口等于右窗口，这个时候需要左窗口和右窗口同时右移。
窗口。有一种情况还需要单独处理一下，即类似[100] 这种情况。这种情况窗口内乘积等于k，不小于