SPNIDEN signals, respectively. However, it only requires non-
secure EL1 to access the conﬁguration registers of the ETM.
Similar to the aforementioned restriction on the access to the
PMU registers, the hardware-based protection enforced by the
TTA bit of the CPTR register is also applied to only the system
register interface [5].
In conclusion, the non-invasive debugging feature allows the
application with a low privilege to learn information about the
high-privilege execution.
Implication 1: An application in the low-privilege
mode is able to learn information about the high-
privilege execution via PMU and ETM.
B. Invasive Debugging
The invasive debugging allows an external debugger to halt
the target processor and access the resources on the processor
2In ARMv7, NIDEN is required to make PMU monitor the events in non-
secure state.
Signal 
Debug Request
Embedded 
Cross Trigger
Send
Debug Request
External 
Debugger
(HOST)
Instruction Transferring and Debug Communication
Debug Target 
Processor
(TARGET)
Signal 
Restart Request
Embedded 
Cross Trigger
Send
Restart Request
Figure 3: Invasive Debugging Model.
via the debugging architecture. Figure 3 shows a typical inva-
sive debugging model. In the scenario of invasive debugging,
we have an external debugger (HOST) and the debug target
processor (TARGET). To start the debugging, the HOST sends
a debug request
to the TARGET via the ECT. Once the
request is handled, the communication between the HOST and
TARGET is achieved via the instruction transferring and data
communication channel (detailed in Section III-B2) provided
by the debugging architecture. Finally, the restart request is
used to end the debugging session. In this model, since the
HOST is always considered as an external debugging device or
a tool connected via the JTAG port, we normally consider it re-
quires physical access to debug the TARGET. However, ARM
introduces an inter-processor debugging model that allows an
on-chip processor to debug another processor on the same
chip without any physical access or JTAG connection since
ARMv7. Furthermore, the legacy debug authentication signals,
which only consider the privilege mode of the TARGET but
ignore the privilege mode of the HOST, are used to conduct the
privilege control of the inter-processor debugging model. In
this section, we discuss the security implications of the inter-
processor debugging under the legacy debug authentication
mechanism.
1) Entering and Existing Debug State: To achieve the
invasive debugging in the TARGET, we need to make the
TARGET run in the debug state. The processor running in the
debug state is controlled via the external debug interface, and it
stops executing instructions from the location indicated by the
program counter. There are two typical approaches to make a
processor enter the debug state: executing an HLT instruction
on the processor or sending an external debug request via the
ECT.
The HLT instruction is widely used as a software breakpoint,
and executing an HLT instruction directly causes the processor
to halt and enter the debug state. A more general approach to
enter the debug state is to send an external debug request via
the ECT. Each processor in a multiple-processor system is
embedded with a separated CTI (i.e., interface to ECT), and
the memory-mapped interface makes the CTI on a processor
available to other processors. Thus, the HOST can leverage the
CTI of the TARGET to send the external debug request and
make the TARGET enter the debug state. Similarly, a restart
request can be used to exit the debug state.
However,
the external debug request does not
take the
privilege of the HOST into consideration; this design allows
a low-privilege processor to make a high-privilege processor
(cid:23)(cid:17)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
enter the debug state. For example, a HOST running in non-
secure state can make a TARGET running in secure state enter
the debug state with the SPIDEN enabled. Similarly, a HOST
in non-secure EL1 can halt a TARGET in EL2 with the DBGEN
enabled.
Implication 2: A low-privilege processor can make an
arbitrary processor (even a high-privilege processor)
enter the debug state via ECT.
2) Debug Instruction Transfer/Communication: Although
the normal execution of a TARGET is suspended after entering
the debug state, the External Debug Instruction Transfer Regis-
ter (EDITR) enables the TARGET to execute instructions in the
debug state. Each processor owns a separated EDITR register,
and writing an instruction (except for special instructions like
branch instructions) to this register when the processor is in
the debug state makes the processor execute it.
Meantime, the Debug Communication Channel (DCC) en-
ables data transferring between a HOST in the normal state and
a TARGET in the debug state. In ARMv8 architecture, three
registers exist in the DCC. The 32-bit DBGDTRTX register is
used to transfer data from the TARGET to the HOST, while
the 32-bit DBGDTRRX register is used to receive data from the
HOST. Moreover, the 64-bit DBGDTR register is available to
transfer data in both directions with a single register.
We note that the execution of the instruction in the EDITR
register only depends on the privilege of the TARGET and
ignores the privilege of the HOST, which actually allows a
low-privilege processor to access the high-privilege resource
via the inter-processor debugging. Assume that the TARGET
is running in the secure state and the HOST is running in the
non-secure state, the HOST is able to ask the TARGET to read
the secure memory via the EDITR register and further acquire
the result via the DBGDTRTX register.
Implication 3: In the inter-processor debugging, the
instruction execution and resource access in the
TARGET does not take the privilege of the HOST into
account.
3) Privilege Escalation: The Implication 2 and Implication
3 indicate that a low-privilege HOST can access the high-
privilege resource via a high-privilege TARGET. However, if
the TARGET remains in a low-privilege mode, the access to
the high-privilege resource is still restricted. ARM offers an
easy way to escalate privilege in the debug state. The dcps1,
dcps2, and dcps3 instructions, which are only available
in debug state, can directly promote the exception level of
a processor to EL1, EL2, and EL3, respectively.
The execution of the dcps instructions has no privilege
restriction, i.e., they can be executed at any exception level
regardless of the secure or non-secure state. This design
enables a processor running in the debug state to achieve an
arbitrary privilege without any restriction.
Implication 4: The privilege escalation instructions
enable a processor running in the debug state to gain
a high privilege without any restriction.
Execution in A Single Processor
(cid:610)
(cid:3)Sensitive Computation
(cid:609)
Trigger Sensitive 
Computation
(cid:611)
Disable
Trace
(cid:612)
Result 
Analysis
Privilege
High
(cid:608)
Enable
Trace
Low
Execution
Figure 4: Violating the Isolation via Non-Invasive Debugging.
C. Summary
Both the non-invasive and invasive debug involve the design
that allows an external debugger to access the high-privilege
resource while certain debug authentication signals are en-
abled, and the privilege mode of the debugger is ignored. In the
traditional debugging model that the HOST is off-chip, this is
reasonable since the privilege mode of the off-chip platform is
not relevant to that of the on-chip platform where the TARGET
locates. However, since ARM allows an on-chip processor
to act as an external debugger, simply reusing the rules of
the debug authentication signals in the traditional debugging
model makes the on-chip platform vulnerable.
Non-invasive Debugging: Figure 4 shows an idea of violating
the privilege isolation via the non-invasive debugging. The
execution of a single processor is divided into different priv-
ilege modes, and isolations are enforced to protect the sen-
sitive computation in the high-privilege modes from the low-
privilege applications. However, a low-privilege application is
able to violate this isolation with some simple steps according
to Implication 1. Step  in Figure 4 enables the ETM trace
from the low-privilege application to prepare for the violation.
Next, we trigger the sensitive computation to switch the
processor to a high-privilege mode in step . Since the ETM
is enabled in step ,
the sensitive
computation in step  is recorded. Once the computation is
ﬁnished, the processor returns to a low-privilege mode and the
low-privilege application disables the trace in step . Finally,
the information about the sensitive computation is revealed via
analyzing the trace output in step .
Invasive Debugging: In regard to the invasive debugging, the
Implications 2-4 are unneglectable in the inter-processor de-
bugging model since the HOST and TARGET work in the same
platform and share the same resource (e.g., memory, disk,
peripheral, and etc.). As described in Figure 5(a), the system
consists of the high-privilege resource, the low-privilege re-
source, and a dual-core cluster. By default, the two processors
in the cluster can only access the low-privilege resource. To
achieve the access to the high-privilege resource, the processor
A acts as an external debugger and sends a debug request to
the processor B. In Figure 5(b), the processor B enters the
debug state due to the request as described in Implication
2. However, neither of the processors is able to access the
high-privilege resource since both of them are still running
the information about
(cid:23)(cid:17)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
A Multi-processor SoC System
A Multi-processor SoC System
A Multi-processor SoC System
A Multi-processor SoC System
High-Privilege Resource
High-Privilege Resource
High-Privilege Resource
High-Privilege Resource





Processor A
(Normal State)
(Low Privilege)
Processor B
(Normal State)
(Low Privilege)
Processor A
(Normal State)
(Low Privilege)
Debug
Request
Processor B
(Debug State)
(Low Privilege)
Privilege
Escalation
Request
Processor A
(Normal State)
(Low Privilege)
Processor B
(Debug State)
(High Privilege)
Processor A
(Normal State)
(Low Privilege)
Debug
Result
Processor B
(Debug State)
(High Privilege)
Low-Privilege Resource
Low-Privilege Resource
Low-Privilege Resource
Low-Privilege Resource
(a)
(b)
(c)
(d)
Figure 5: Privilege Escalation in A Multi-processor SoC System via Invasive Debugging.
in the low-privilege mode. Next, as shown in Figure 5(c),
the processor A makes the processor B execute a privilege
escalation instruction. The processor B then enters the high-
privilege mode and gains access to the high-privilege resource
according to Implication 4. At this moment, accessing the
high-privilege resource from the processor A is still forbidden.
Finally, since the processor A is capable of acquiring data from
the processor B and the processor B can directly access the
high-privilege resource, as indicated by Implication 3, the low-
privilege processor A actually gains an indirect access to the
high-privilege resource as shown in Figure 5(d).
Unlike the traditional debugging model, the non-invasive
debugging in Figure 4 and invasive debugging in Figure 5
require no physical access or JTAG connection.
IV. DEBUG AUTHENTICATION SIGNALS IN REAL-WORLD
DEVICES
The aforementioned isolation violation and privilege esca-
lation occur only when certain debug authentication signals
are enabled. Thus, the status of these signals is critical to
the security of the real-world devices, which leads us to
perform an investigation on the default status of the debug
authentication signals in real-world devices. Moreover, we are
also interested in the management mechanism of the debug
authentication signals deployed on the real-world devices since
the mechanism may be used to change the status of the
signals at runtime. Furthermore, as this status and management
mechanism highly depend on the SoC manufacturers and the
OEMs, we select various devices powered by different SoCs
and OEMs as the investigation target. To be comprehensive,
we also survey the devices applied in different product do-
mains including development boards, Internet of Things (IoT)
devices, commercial cloud platforms, and mobile devices. We
discuss our choices on the target devices in Section IV-A, and
present the results of the investigation in Section IV-B and
Section IV-C.
A. Target Devices
1) Development Boards:
The ARM-based development boards are broadly used to
build security-related analysis systems [15], [25], [28], [68],
[77]. However, the security of the development board itself
is not well-studied. Therefore, we select
the widely used
development board [15], [68], [77], i.MX53 Quick Start Board
(QSB) [52], as our analysis object. As a comparison, the
ofﬁcial Juno Board [10] released by ARM is also studied in
this paper.
2) IoT Devices:
The low power consumption makes the ARM architecture
to be a natural choice for the Internet of Things (IoT) devices.
Many traditional hardware vendors start to provide the ARM-
based smart home solutions [3], [46], [59], and experienced
developers even build their own low-cost solutions based on
cheap SoCs [26]. As a typical example, the Raspberry PI
3 [58], over 9, 000, 000 units of which have been sold till
March 2018 [57], is selected as our target.
3) Commercial Cloud Platforms:
The Cloud Computing area is dominated by the x86 archi-
tecture, however, the beneﬁt of the high-throughput computing
in ARM architecture starts to gain the attention of big cloud
providers including Microsoft [70]. Although most of the
ARM-based cloud servers are still in test, we use the publicly
available ones including miniNodes [47], Packet [55], and
Scaleway [63] to conduct our analysis.
4) Mobile Devices:
Currently, most mobile devices in the market are powered
by ARM architecture, and the mobile device vendors build
their devices based on the SoCs provided by various SoC
manufacturers. For example, Huawei and Samsung design
Kirin [27] and Exynos [60] SoCs for their own mobile devices,
respectively. Meantime, Qualcomm [56] and MediaTek [45]
provide SoCs for various mobile device vendors [48], [49],
[72]. Considering both the market share of the mobile ven-
dors [67] and the variety of the SoCs, we select Google Nexus
6, Samsung Galaxy Note 2, Huawei Mate 7, Motorola E4 Plus,
and Xiaomi Redmi 6 as our analysis targets.
B. Status of the Authentication Signals
The Debug Authentication Status Register (DBGAUTHS-
TATUS) is a read-only register that is accessible in EL1,
and the bits[0:7] of this register reﬂect
the status of the
(cid:23)(cid:17)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
Table I: Debug Authentication Signals on Real Devices.
Category
Company
Platform / Device
Development
Boards
ARM
NXP
Juno r1 Board
i.MX53 QSB
Company
ARM
NXP
IoT Devices
Raspberry PI
Raspberry PI 3 B+
Broadcom
miniNodes
64-bit ARM miniNode
Commercial Cloud
Platforms
Mobile
Devices
Packet
Scaleway
Google
Samsung
Huawei
Motorola
Xiaomi
Type 2A Server
ARM C1 Server
Huawei
Cavium
Marvell
Nexus 6
Qualcomm
Snapdragon 805