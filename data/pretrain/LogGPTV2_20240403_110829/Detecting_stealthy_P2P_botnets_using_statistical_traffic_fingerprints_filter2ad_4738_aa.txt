title:Detecting stealthy P2P botnets using statistical traffic fingerprints
author:Junjie Zhang and
Roberto Perdisci and
Wenke Lee and
Unum Sarfraz and
Xiapu Luo
Detecting Stealthy P2P Botnets Using
Statistical Trafﬁc Fingerprints
†
†
Georgia Institute of Technology,
‡
, Roberto Perdisci
∗
Junjie Zhang
and Xiapu Luo
{jjzhang,wenke}@cc.gatech.edu, PI:EMAIL
University of Georgia,
Hong Kong Polytechnic University
, Wenke Lee
†
†
, Unum Sarfraz
∗
‡
PI:EMAIL,PI:EMAIL
Abstract—Peer-to-peer (P2P) botnets have recently been
adopted by botmasters for their resiliency to take-down efforts.
Besides being harder to take down, modern botnets tend to be
stealthier in the way they perform malicious activities, making
current detection approaches, including [6], ineffective. In this
paper, we propose a novel botnet detection system that is able
to identify stealthy P2P botnets, even when malicious activities
may not be observable. First, our system identiﬁes all hosts that
are likely engaged in P2P communications. Then, we derive
statistical ﬁngerprints to proﬁle different types of P2P trafﬁc,
and we leverage these ﬁngerprints to distinguish between P2P
botnet trafﬁc and other legitimate P2P trafﬁc. Unlike previous
work, our system is able to detect stealthy P2P botnets even
when the underlying compromised hosts are running legitimate
P2P applications (e.g., Skype) and the P2P bot software at the
same time. Our experimental evaluation based on real-world
data shows that the proposed system can achieve high detection
accuracy with a low false positive rate.
Keywords-Botnet, P2P, Intrusion Detection, Security.
I. INTRODUCTION
A botnet is a collection of compromised hosts (a.k.a. bots)
that are remotely controlled by an attacker (the botmaster)
via a command and control (C&C) channel. Botnets serve
as the infrastructures for a variety of cyber-crimes, such
as sending spam,
launching distributed denial-of-service
(DDoS) attacks, performing identity theft, click fraud, etc.
The C&C channel is an essential component of a botnet.
Botmasters rely on the C&C channel to issue commands to
their bots and receive information from the compromised
machines. Different botnets may structure their C&C chan-
nel in different ways. In a centralized architecture, all the
bots in a botnet contact one (or a few) C&C server(s) owned
by the botmaster. Centralized C&C channels based on the
IRC or http protocol have been used by many botnets due
to their simplicity and availability of open-source, reusable
C&C server code. However, centralized C&C servers rep-
resent a single point of failure. Therefore, attackers have
recently started to build botnets with a more resilient C&C
architecture, using a peer-to-peer (P2P) structure [13, 14, 18]
or hybrid P2P/centralized C&C structures [17]. Bots be-
longing to a P2P botnet (i.e., a botnet that uses P2P-based
C&C communications) form an overlay network in which
any of the nodes (i.e., any of the bots) can be used by
the botmaster to distribute commands to the other peers or
collect information from them. While more complex, and
perhaps more costly to manage compared to centralized
botnets, P2P botnets offer higher resiliency, since even if
a signiﬁcant portion of a P2P botnet is taken down (e.g.,
by law enforcement or network operators) the remaining
bots may still be able to communicate with each other and
with the botmaster. Notable examples of P2P botnets are
represented by Nugache [10], Storm [13], Waledac [17],
and even Confiker, which has been shown to embed P2P
capabilities [14]. Storm and Waledac are of particular
interest because they use P2P C&C structures as the primary
way to organize their bots, and have demonstrated resilience
to take-down attempts1.
To date, a few approaches for P2P botnet detection have
been proposed [6, 15, 19]. BotMiner [6] ﬁnds groups of
hosts within a monitored network that share similar com-
munication patterns with outside machines and at the same
time perform similar malicious activities, such as scanning,
spamming, launching remote exploits, etc. If such groups of
hosts exist, they are considered to be part of a botnet and an
alarm is raised. The intuition is that bots belonging to the
same botnet will share similar C&C communication patterns,
and will respond to the botmaster’s commands with similar
malicious activities. Unfortunately, modern botnets are using
more and more stealthy ways to perform malicious activities.
For example, some botnets may send spam through large
popular webmail services such as Gmail or Hotmail [22].
Such activities are very hard to detect
through network
ﬂow analysis, due to encryption and overlap with legitimate
webmail usage patterns, thus making BotMiner ineffective.
BotGrep [15] is based on analysis of network ﬂows col-
lected over multiple large networks (e.g., ISP networks), and
attempts to detect P2P botnets by analyzing the communi-
cation graph formed by overlay networks. Starting from a
global view of Internet trafﬁc, BotGrep ﬁrst identiﬁes groups
of hosts that form a P2P network. To further differentiate
P2P botnets from the legitimate P2P networks (e.g., P2P ﬁle
sharing networks), BotGrep requires additional information
to bootstrap its detection algorithm. For example, BotGrep
may use a list of nodes in a communication (sub-)graph that
are related to honeypot hosts, or may leverage the detection
results from intrusion detection systems. However, acquiring
both a sufﬁciently global view of Internet communications
and enough a priori information to bootstrap the detection
algorithm may be very challenging and makes the detection
results (which in [22] were mainly based on simulations)
1After extensive effort, both Storm and Waledac have been recently
taken down by network operators.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE121the fact
heavily dependent on other systems, thus limiting the real-
world applicability of BotGrep. Recently, Yen et al. [19]
have proposed an algorithm that aims to distinguish between
hosts that run legitimate P2P ﬁle sharing applications and
P2P bots. However, the proposed algorithm [19] does not
take into account
that some popular legitimate
P2P applications may not exhibit network patterns typical
of P2P ﬁle sharing applications. For example, Skype, a
very popular P2P-based instant messenger, does not usually
behave in a way similar to ﬁle sharing applications. For
example,
large ﬁle transfers through Skype are usually
rare, compared to its use as instant messenger or voice-
over-IP (VoIP) client. Therefore, Skype’s P2P trafﬁc may
cause a signiﬁcant number of false positives. Moreover, the
algorithm in [19] is not able to detect bot-compromised hosts
that exhibit mixed legitimate and botnet-related P2P trafﬁc
(e.g., due to users running a ﬁle sharing P2P application on
machines compromised with P2P bots).
In this paper, we present a novel botnet detection system
that is able to identify stealthy P2P botnets. Our system
aims to detect all P2P botnets, even in the case in which
their malicious activities may not be observable. The ap-
proach we propose focuses on identifying P2P bots within
a monitored network by detecting the C&C communica-
tion patterns that characterize P2P botnets, regardless of
how they perform malicious activities in response to the
botmaster’s commands. To accomplish this task, we ﬁrst
identify all hosts within a monitored network that appear
to be engaging in P2P communications. Then, we derive
statistical ﬁngerprints of the P2P communications generated
by these hosts, and leverage the obtained ﬁngerprints to
distinguish between hosts that are part of legitimate P2P
networks (e.g., ﬁle-sharing networks) and P2P bots. Unlike
previous work, our system is able to identify stealthy P2P
bots within a monitored network even when the P2P botnet
trafﬁc is overlapped with trafﬁc generated by legitimate P2P
applications (e.g., Skype) running on the same compromised
host.
Our work makes the following contributions:
1) A new ﬂow-clustering-based analysis approach to iden-
tify hosts that are most likely running P2P applications,
and estimate the active time of the detected P2P nodes.
2) An efﬁcient algorithm for P2P trafﬁc ﬁngerprinting,
which we use to build a statistical proﬁle of different
P2P applications.
3) A P2P botnet detection system that can effectively
and accurately detect P2P bots, even in the case in
which they perform malicious activities in a stealthy,
non-observable way. In addition, our system is able to
identify bot-compromised machines, even in the case in
which the P2P botnet trafﬁc is overlapped with trafﬁc
generated by legitimate P2P applications (e.g., Skype)
running on the same compromised machine.
4) An implementation of our detection system, and an
extensive experimental evaluation. Our experimental re-
sults show that we can detect P2P bots with a detection
rate of 100% and 0.2% false positive rate.
II. RELATED WORK
As P2P botnets become robust infrastructures for various
malicious activities,
they have attracted a lot of effort
from researchers [8, 9, 13, 14, 18]; the most notable and
studied P2P botnets are Nugache [18], Storm [8, 13],
Waledac [17] and Confiker [14]. A few approaches
have been proposed that can be used for P2P botnet de-
tection [6, 15, 19], which have been discussed in Section I.
BotHunter [5] was proposed to detect a bot, centralized
or P2P, in its infection phase if infection behaviors are
consistent with the infection model used by BotHunter.
However, bots now use a wide variety of approaches for
infection (e.g., drive-by downloads), which may not be
consistent with BotHunter’s infection model.
Our work focuses on the detection of P2P botnets us-
ing network information. Compared with the existing ap-
proaches, the design goals of our approach are different in
that: 1) our approach does not need to assume that malicious
activities are observable, unlike [6]; 2) our approach does
not require any botnet-speciﬁc information to make the
detection, unlike [15]; and 3) our approach needs to detect
the compromised hosts that run both P2P bot and other
legitimate P2P applications at the same time, unlike [19].
To achieve these design goals, our system includes multiple
components. The ﬁrst one is a ﬂow-clustering-based analysis
approach to identify hosts that are mostly likely running P2P
applications. In contrast to existing approaches of identifying
hosts running P2P applications [3, 12, 16, 20, 21], our
approach differs from them in the following ways: 1) un-
like [16], our approach does not need any content signature
because encryption will immediately make content signature
useless; 2) our approach does not rely on any transport
layer heuristics (e.g., ﬁxed source port) used by [20, 21],
which can be easily violated by P2P applications; 3) we
do not need training data set to build a machine learning
based model as used in [3], because it is very challenging
to get trafﬁc of P2P botnets before they are detected; 4)
in contrast to [12], our approach can detect and proﬁle
various P2P applications rather than identifying a speciﬁc
P2P application (e.g., Bittorrent); and 5) our analysis
approach can estimate the active time of a P2P application,
which is critical for botnet detection.
III. DETECTION SYSTEM
Problem Formulation: Our goal is to monitor the net-
work trafﬁc at the edge of a network (e.g., an enterprise
network), and identify whether any of the machines within
the network perimeter has become part of a P2P botnet. In
particular, we consider the scenario in which bots perform
malicious activities in a stealthy way, for example spam-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 
122c
ﬁ
f
a
r
T
k
r
o
w
t
e
N
DNS 
Packets
Phase I: Identify P2P hosts
Phase II: Identify P2P Bots
NetFlow
Filter
Aggregate ﬂows 
for each hosts
Identify 
P2P hosts
Identify Persistent 
P2P hosts
Identify 
Bots
Bots
Figure 1: System Overview
bots that send spam through stolen or malicious web-mail
accounts (e.g., Gmail or Hotmail accounts) [22], whose
malicious activities are very hard to detect from trafﬁc anal-
ysis. In general, we assume that the bots’ malicious activities
may not be easily observable, and therefore we only focus
on their C&C communication patterns. We assume that at
least two or more machines within the monitored network
are part of the same P2P botnet, and leverage the similarity
in communication patterns across multiple bots for detection
purposes.
System Overview: P2P-based botnets rely on a P2P
protocol to establish a C&C channel and communicate with
the botmaster. As such, we intuitively assume that P2P bots
exhibit some network trafﬁc patterns that are common to
other P2P client applications (either legitimate or malicious).
Therefore, we divide our systems into two phases. As the
ﬁrst phase, we aim at detecting all hosts within the monitored
network that appear to be engaging in P2P communications,
as shown in Figure 1. We analyze raw trafﬁc collected at the
edge of the monitored network (e.g., an enterprise network),
and apply a pre-ﬁltering step (discussed in Section III-A) to
reduce the data volume and only consider network ﬂows
that are potentially related to P2P communications. Then,
we analyze the remaining trafﬁc and extract a number of
statistical features (described in Section III-B), which we
use to isolate ﬂows related to P2P communications from
unrelated ﬂows, and identify candidate P2P clients.
In the second phase, our botnet detection system (de-
tailed in Section III-D) analyzes the trafﬁc generated by
the candidate P2P clients and classiﬁes them into either
legitimate P2P clients or P2P bots. The architecture of our
botnet detection system is based on a number of observa-
tions. First, bots are malicious programs used to perform
proﬁtable malicious activities. They represent valuable assets
for the botmaster, who will intuitively try to maximize their
utilization. As a consequence, bot programs usually make
themselves persistent on the compromised system and run
for as long as the system is powered on. This is particularly
true for P2P bots, because in order to have a functional
overlay network (the botnet), a sufﬁcient number of peers
needs to be always online. In other words, the active time
of a bot should be comparable with the active time of the
underlying compromised system. If this was not the case,
the botnet overlay network would risk to degenerate into a
number of disconnected subnetworks, due to the short life
time of each single node.
On the other hand, the active time of legitimate P2P
applications is determined by users. For example, some
users tend to use their ﬁle-sharing P2P clients only to
download a limited number of ﬁles, before shutting down
the P2P application [4]. In this case, the active time of the
legitimate P2P application may be much shorter compared
to the active time of the underlying system. Based on this
observation, our botnet detection system ﬁrst estimates the
active time of a P2P client and eliminates those hosts that are
running P2P applications with short active time, compared
to the underlying system. It is worth noting that some users
may run certain legitimate P2P applications for as long
as their machine is on. For example, Skype is a popular
P2P application for instant messaging and voice-over-IP
(VoIP) that is often setup to start after system boot, and
that keeps running until the system is turned off. Therefore,
such Skype clients (or other “persistent” P2P clients) will
not be ﬁltered out at this stage.
In order to discriminate between legitimate persistent
P2P clients and P2P bots, we make use of the following
observations: 1) bots that belong to the same botnet use the
same P2P protocol and network, and 2) the set of peers
contacted by two different bots have a much larger overlap,
compared to peers contacted by two P2P clients connected to
the same legitimate P2P network. While the ﬁrst observation
is obvious, the second observation deserves explanation.
Assume that two hosts in the monitored network, say ℎ𝐴
and ℎ𝐵, are running the same legitimate P2P ﬁle-sharing
application (e.g., Emule). The users of these two P2P clients
will most likely have uncorrelated usage patterns. Namely,
it is reasonable to assume that in the general case the two
users will search for and download different content (e.g.,
different media ﬁles or documents) from the P2P network.
This translates into a divergence between the set of IP
addresses contacted by hosts ℎ𝐴 and ℎ𝐵 (remember that at
this stage we are only considering the P2P trafﬁc generated
by the hosts). The reason is that the two P2P clients will
tend to exchange P2P control messages (e.g., ping/pong and
search requests) with different sets of peers which “own”
the content requested by their users, or peers that are along
the path towards the content. On the contrary, assume that
hosts ℎ𝐴 and ℎ𝐵 are compromised with P2P bots. One of the
characteristics of the bots is that they need to periodically
search for commands published by the botmaster [8]. This
typically translates into a convergence between the set of
IPs contacted by ℎ𝐴 and ℎ𝐵 (we will discuss potential
exceptions to this behavior in Section V).
To summarize, in order to detect P2P bots we follow the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 
123P2P Apps
Bittorrent
Emule
Limewire
Skype
Ares
Version
6.4
0.49c
5.4.8
4.2
2.1.5
Protocol
Bittorrent
Kademlia
Gnutella&Bittorrent
Skype