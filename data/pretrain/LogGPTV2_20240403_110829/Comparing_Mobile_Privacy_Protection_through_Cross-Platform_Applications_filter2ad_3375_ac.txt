### Sizes and Alignments

Without knowing the starting point of a method, IDA may mistakenly treat a code fragment as a data entry. To address this, our analysis tool extracts metadata from the application binary to guide IDA's disassembling process. This metadata includes class names, instance method lists, class method lists, instance variable lists, property lists, and the protocols that classes conform to. For each method, the method name, method signature string, and the start address of the method body are collected to assist in the disassembly.

### Resolving API Calls

After disassembling all methods in IDA, the next step is to resolve all the API calls in the assembly instructions. A key step in this process is handling the `objc_msgSend` function. In an Objective-C executable, all runtime accesses to a method or attribute of an Objective-C object use the `objc_msgSend` function, which sends messages to instances of classes in memory. To statically determine the corresponding API call for each observed `objc_msgSend`, we adopt backward slicing and forward constant propagation techniques, as proposed by [16], in our iOS static analysis tool. The workflow of our iOS static analysis tool is illustrated in Figure 4.

**Figure 4.** The workflow of our iOS static analysis tool.

### Outputting SS-API Types

The final step of our static analysis tool is to output the set of SS-API types used in an iOS application. Access to most SS-API types can be directly recognized through corresponding API classes and methods. For example, user contacts are operated through `ABPerson` and `ABAddressBook` related APIs. However, some SS-API types, such as `CALL PHONE` and `SEND SMS`, require further analysis of the parameter values. 

For instance, the API call `[[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@"tel:123-456-7890"]]]` will launch the phone dialer only if the string parameter starts with the "tel:" prefix. The `SEND SMS` SS-API type has two forms of realizing the SMS functionality: the SMS sending view can be triggered by `openURL` with an "sms:" prefix, or an application can call APIs like `MFMessageComposeViewController.setMessageComposeDelegate` to send SMS messages. We carefully handle each case for every resolved API call and corresponding parameter values to detect such SS-API invocations.

### Comparison Analysis Results

We applied our static analysis tools to 1,300 pairs of selected cross-platform applications (downloaded in June 2012). The basic statistics of these applications are given in Table V. The direct outputs of our analysis tools are lists of SS-API types accessed by these applications. By obtaining such lists, we can compare the SS-API usage for each pair of cross-platform applications.

**Table V. Statistics of Downloaded Cross-Platform Applications**

| Parameters | Android Apps | iOS Apps |
|------------|--------------|----------|
| Number of apps | 1,300 | 1,300 |
| App size range (.apk & .ipa) | 11KB - 47MB | 106KB - 366MB |
| Total size of apps | 7.42 GB | 14.5 GB |
| App executable file size range (.dex & Objective-C binary) | 3KB - 6.2MB | 25KB - 39.5MB |
| Total size of executable files | 5.03 GB | 1.10 GB |

### Comparisons on Both-Supported SS-API Types

Our first comparison focuses on the 20 SS-API types that are supported on both Android and iOS. We are interested in how differently these SS-API types are used on the two platforms for cross-platform applications. Our results show that the total amount of SS-API types used by 1,300 Android applications is 4,582, indicating that each Android application uses 3.5 SS-API types on average. In comparison, the corresponding 1,300 iOS applications access a total of 7,739 SS-API types, averaging 5.9 types per iOS application. 948 (73%) of the applications on iOS access additional SS-API types compared to their Android versions.

Among the 20 different SS-API types, some are accessed almost equally by applications on both platforms. For example, the `INTERNET` SS-API is required by 1,247 Android applications and 1,253 iOS applications. However, some other SS-API types are used more frequently by iOS applications. The top 10 SS-API types that are accessed more often on iOS compared to Android are listed in Table VI.

**Table VI. SS-API Types with Greatest Disparity Accessed by Applications on Android and iOS**

| SS-API Type | Number of Android Apps | Number of iOS Apps | Only on iOS | Only on Android | On Both Platforms | Lib/App Ratio | Exclusive Lib/App Ratio |
|-------------|------------------------|--------------------|-------------|-----------------|-------------------|---------------|-------------------------|
| READ DEVICE ID | 510 | 925 | 469 | 54 | 6 | 60% / 64% | 36% / 40% |
| CAMERA | 172 | 601 | 435 | 142 | 89 | 38% / 73% | 27% / 62% |
| VIBRATE | 374 | 522 | 290 | 19 | 13 | 62% / 46% | 54% / 38% |
| ACCESS NETWORK INFO | 885 | 1065 | 269 | 18 | 42 | 15% / 96% | 4% / 86% |
| READ CONTACTS | 151 | 388 | 256 | 15 | 2 | 52% / 75% | 25% / 48% |
| SEND SMS | 29 | 264 | 248 | 13 | 78 | 49% / 68% | 32% / 51% |
| WRITE CONTACTS | 86 | 297 | 219 | 8 | 511 | 51% / 80% | 20% / 49% |
| ACCESS LOCATION | 553 | 728 | 217 | 42 | 22 | 48% / 67% | 33% / 53% |
| RECORD AUDIO | 37 | 177 | 155 | 15 | 22 | 35% / 99% | 1% / 65% |
| READ CALENDAR | 35 | 174 | 141 | 2 | 33 | 35% / 67% | 33% / 65% |

To understand these results in detail, we examined typical applications in each SS-API type. For example, famous applications like Twitter and XECurrency do not access `READ DEVICE ID` APIs on Android, but their iOS versions do. Another example is the free game "Words With Friends." Compared to its Android version, the iOS version additionally accesses several SS-API types, including:

- **BATTERY STATS**: Observed in `UIDevice.setBatteryMonitoringEnabled`.
- **CALL PHONE**: Observed in `UIApplication.openURL` with "tel:" parameters.
- **CAMERA**: Observed in `UIImagePickerController.setSourceType` with `UIImagePickerControllerSourceTypeCamera`.
- **FLASHLIGHT**: Observed in `AVCaptureDevice.setTorchMode`.

Interestingly, we also checked the popular game Angry Birds, which, although not part of the 1,300 sampling set, shows that its iOS version reads user contacts data, as observed in API calls like `ABAddressBookGetPersonWithRecordID` and `ABAddressBookCopyArrayOfAllPeople`.

### SS-API Usage of Third-Party Libraries

To analyze the SS-API usage of third-party libraries, we first identified all third-party libraries within each application. We processed the entire application set to calculate the number of different package names (on Android) or class names (on iOS). Packages or classes appearing in more than 10 applications (and at least belonging to two different companies) were automatically collected. We then manually checked this list to identify third-party libraries, which include advertisement, analytic, and development libraries. Some packages or classes were combined because they belong to the same third-party library.

We identified 79 third-party libraries on Android and 72 on iOS that are commonly used. The 8 most commonly used advertising and analytic libraries on Android and iOS are listed in Tables VII and VIII, respectively.

**Table VII. Most Common Advertising/Analytic Libraries on Android**

| Library Name | SS-API Types | App Ratio |
|--------------|--------------|-----------|
| com/google/ads | ANI, INT | 21.7% |
| com/flurry/android | LOC, INT | 19.1% |
| com/google/android/apps/analytics | ANI | 12.5% |
| com/tapjoy | INT, RDI | 7.9% |
| com/millennialmedia/android | ANI, INT, RDI | 7.3% |
| com/admob/android/ads | LOC, INT | 4.4% |
| com/adwhirl | LOC, INT | 3.8% |
| com/mobclix/android/sdk | LOC, ANI, INT, RDI | 3.2% |

**Table VIII. Most Common Advertising/Analytic Libraries on iOS**

| Library Name | SS-API Types | App Ratio |
|--------------|--------------|-----------|
| Flurry | LOC, INT, RDI | 19.9% |
| GoogleAds | ANI, INT, RDI, SMS, VIB, WAK | 15.9% |
| Google Analytics | INT | 9.8% |
| Millennial Media | LOC, ANI, CAM, INT, CON, RDI, VIB | 9.3% |
| TapJoy | ANI, INT, RDI | 9.1% |
| AdMob | LOC, INT, CON, RDI | 7.2% |
| AdWhirl | LOC, ANI, INT, RDI | 6.9% |
| Mobclix | LOC, ANI, BAT, CAM, FLA, INT, CAL, CON, RDI, SMS, VIB | 3.7% |

By tracking the code regions of these libraries, our static analysis tools can determine the origin of the SS-API calls in each application. We can then identify the types of SS-APIs used in each third-party library on both platforms, as shown in Tables VII and VIII.

To quantify the influence of third-party libraries on the SS-API usage difference between the two versions of cross-platform applications, we identified applications that access the corresponding SS-API type only on their iOS version, but not on the Android version. For each of these applications, we tracked the origins in the code that access the corresponding SS-APIs—either from the third-party libraries used in the application or from the application’s own code. The results are shown in the last two columns of Table VI. The two ratios in the "Lib/App Ratio" column represent the percentage of applications where: (a) the third-party libraries used in the application access the corresponding SS-API type; (b) the application’s own code accesses the corresponding SS-API type. The sum of these two ratios is more than 100% because, in some applications, SS-APIs of the same type are used both in the application’s own code and in the third-party libraries. The last column in Table VI shows the percentage of applications where the corresponding SS-API type is used exclusively by the third-party libraries or the application’s own code.

From the results shown in Table VI, we can see that third-party libraries have a significant impact on the difference in SS-API usage for cross-platform applications. For example, 54% of applications that use additional `VIBRATE` APIs on iOS do so purely because of the third-party libraries used in these applications. From Table VIII, we can find the exact sources—libraries like GoogleAds, Millennial Media, and Mobclix all use `VIBRATE` APIs. Thus, any application that includes these libraries will, in turn, use this SS-API type. Similar links can be drawn from Table VI and Table VIII for other SS-API types such as `READ DEVICE ID` and `READ CONTACTS`.

Comparing the data in Tables VII and VIII, the results show that the most commonly used third-party libraries, especially advertisement and analytic libraries on iOS, access many more SS-APIs compared to the libraries on Android.