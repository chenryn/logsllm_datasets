    .text:08089931                 add     dword ptr [esp], 30h
    .text:08089935                 call    sub_8052CB0
    .text:0808993A                 add     esp, 4
    .text:0808993D                 retn
    .text:0808993E ; ---------------------------------------------------------------------------    .text:0808993E
    .text:0808993E loc_808993E:                            ; CODE XREF: .text:0808992F
    .text:0808993E                 mov     large ds:0, eax
    .text:08089944                 jmp     short loc_8089931
    .text:08089946 ; ---------------------------------------------------------------------------    .text:08089946
    .text:08089946 loc_8089946:                            ; CODE XREF: .text:08089920
    .text:08089946                 call    runtime_morestack ; "函数底部, 调用runtime_morestack
    .text:0808994B                 jmp     short loc_8089910 ; 跳回函数“顶部”
上面的代码段是一个随机未定义的函数，这是我从已经编译剥离的示例应用程序中提取。基本上通过向后遍历每个未定义的函数，我们将在类似0x0808994B
执行call
runtime_morestack后的地方停留。从这里我们将跳到下一个指令，并确保它是我们当前的跳转，如果条件为真，我们可以假设这是一个函数的开始。在这个例子（或几乎每个我运行的测试案例）都表明这是真的。跳转到0x08089910是函数的开始，所以现在我们有MakeFunction函数需要的两个参数：
    traverse_functions.py
    def is_simple_wrapper(addr):
        if GetMnem(addr) == 'xor' and GetOpnd(addr, 0) == 'edx' and  GetOpnd(addr, 1) == 'edx':
            addr = FindCode(addr, SEARCH_DOWN)
            if GetMnem(addr) == 'jmp' and GetOpnd(addr, 0) == 'runtime_morestack':
                return True
        return False
    def create_runtime_ms():
        debug('Attempting to find runtime_morestack function for hooking on...')
        text_seg = ida_segment.get_segm_by_name('.text')
        # 这个代码字符串出现在ELF32 and ELF64 AFAIK
        runtime_ms_end = ida_search.find_text(text_seg.startEA, 0, 0, "word ptr ds:1003h, 0", SEARCH_DOWN)
        runtime_ms = ida_funcs.get_func(runtime_ms_end)
        if idc.MakeNameEx(runtime_ms.startEA, "runtime_morestack", SN_PUBLIC):
            debug('Successfully found runtime_morestack')
        else:
            debug('Failed to rename function @ 0x%x to runtime_morestack' % runtime_ms.startEA)
        return runtime_ms
    def traverse_xrefs(func):
        func_created = 0
        if func is None:
            return func_created
        # 初始化
        func_xref = ida_xref.get_first_cref_to(func.startEA)
        # 尝试去遍历交叉引用
        while func_xref != 0xffffffffffffffff:
            # 检查这里是否已经有一个函数
            if ida_funcs.get_func(func_xref) is None:
                # 确保指令位像一个跳转
                func_end = FindCode(func_xref, SEARCH_DOWN)
                if GetMnem(func_end) == "jmp":
                    # 确保我们正在跳回“上面”
                    func_start = GetOperandValue(func_end, 0)
                    if func_start  0 and dumb_int_test < sys.maxsize:
                                return True
                        except ValueError:
                            return False
    def create_string(addr, string_len):
        debug('Found string load @ 0x%x with length of %d' % (addr, string_len))
        #如果我们发现错误的区域，这可能是过分积极的...
        if GetStringType(addr) is not None and GetString(addr) is not None and len(GetString(addr)) != string_len:
            debug('It appears that there is already a string present @ 0x%x' % addr)
            MakeUnknown(addr, string_len, DOUNK_SIMPLE)
        if GetString(addr) is None and MakeStr(addr, addr + string_len):
            return True
        else:
            #如果某些东西已经被部分分析（不正确），我们需要MakeUnknown它
            MakeUnknown(addr, string_len, DOUNK_SIMPLE)
            if MakeStr(addr, addr + string_len):
                return True
            debug('Unable to make a string @ 0x%x with length of %d' % (addr, string_len))
        return False
上面的代码可能被优化，但在我所需的示例中它能正常工作。剩下的就是创建另一个函数，它通过所有定义的代码段来寻找字符串加载。然后我们可以使用指向字符串的指针和字符串长度来定义一个新的字符串MakeStr。在我最终使用的代码中，您需要确保IDA
Pro没有错误地创建字符串，因为它有时会错误地尝试。当表中的字符串包含空字符时这种情况有时会发生。然而，在使用上面的代码后，我们发现了；
这是一个更好的代码片段。在我们把所有这些函数放在一起后，我们就有了IDA Pro
的golang_loader_assist.py模块。需要提醒的是，我只在几个版本的IDA Pro
OSX测试这个脚本，大部分测试版本是6.95。还有很多可以优化地方，或者重写一些较少的代码。有了这一切，我想开源此代码，让其他人可以来使用，并希望有所收获。还要注意的是，这个脚本可能会很慢让你很痛苦，这取决于idb文件大小，在OSX
El Capitan（10.11.6）2.2 GHz Intel Core i7上使用IDA Pro
6.95，字符串分析方面可能需要一段时间。我经常发现，单独运行不同的方法可以防止IDA锁定。希望这篇文章和代码对某些人有帮助，祝您愉快！