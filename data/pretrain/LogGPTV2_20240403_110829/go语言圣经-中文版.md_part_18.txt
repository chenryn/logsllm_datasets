"fmt"
"io"
"os"
"unicode"
"unicode/utf8"
)
func main() {
counts := make(map[rune]int) // counts of Unicode characters
var utflen [utf8.UTFMax + 1]int // count of lengths of UTF-8 encodings
invalid := 0 // count of invalid UTF-8 characters
in := bufio.NewReader(os.Stdin)
for {
r, n, err := in.ReadRune() // returns rune, nbytes, error
if err == io.EOF {
break
}
if err != nil {
fmt.Fprintf(os.Stderr, "charcount: %v\n", err)
os.Exit(1)
}
if r == unicode.ReplacementChar && n == 1 {
invalid++
continue
}
counts[r]++
utflen[n]++
}
fmt.Printf("rune\tcount\n")
for c, n := range counts {
fmt.Printf("%q\t%d\n", c, n)
}
fmt.Print("\nlen\tcount\n")
for i, n := range utflen {
if i > 0 {
fmt.Printf("%d\t%d\n", i, n)
}
}
if invalid > 0 {
fmt.Printf("\n%d invalid UTF-8 characters\n", invalid)
}
}
Map 139
gopl
ReadRune方法执行UTF-8解码并返回三个值：解码的rune字符的值，字符UTF-8编码后的长
度，和一个错误值。我们可预期的错误值只有对应文件结尾的io.EOF。如果输入的是无效的
UTF-8编码的字符，返回的将是unicode.ReplacementChar表示无效字符，并且编码长度是
1。
charcount程序同时打印不同UTF-8编码长度的字符数目。对此，map并不是一个合适的数据
结构；因为UTF-8编码的长度总是从1到utf8.UTFMax（最大是4个字节），使用数组将更有
效。
作为一个实验，我们用charcount程序对英文版原稿的字符进行了统计。虽然大部分是英语，
但是也有一些非ASCII字符。下面是排名前10的非ASCII字符：
下面是不同UTF-8编码长度的字符的数目：
len count
1 765391
2 60
3 70
4 0
Map的value类型也可以是一个聚合类型，比如是一个map或slice。在下面的代码中，图graph
的key类型是一个字符串，value类型map[string]bool代表一个字符串集合。从概念上讲，
graph将一个字符串类型的key映射到一组相关的字符串集合，它们指向新的graph的key。
gopl.io/ch4/graph
var graph = make(map[string]map[string]bool)
func addEdge(from, to string) {
edges := graph[from]
if edges == nil {
edges = make(map[string]bool)
graph[from] = edges
}
edges[to] = true
}
func hasEdge(from, to string) bool {
return graph[from][to]
}
其中addEdge函数惰性初始化map是一个惯用方式，也就是说在每个值首次作为key时才初始
化。addEdge函数显示了如何让map的零值也能正常工作；即使from到to的边不存在，
graph[from][to]依然可以返回一个有意义的结果。
Map 140
gopl
练习 4.8： 修改charcount程序，使用unicode.IsLetter等相关的函数，统计字母、数字等
Unicode中不同的字符类别。
练习 4.9： 编写一个程序wordfreq程序，报告输入文本中每个单词出现的频率。在第一次调用
Scan前先调用input.Split(bufio.ScanWords)函数，这样可以按单词而不是按行输入。
Map 141
gopl
4.4. 结构体
结构体是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。每个值称为结
构体的成员。用结构体的经典案例处理公司的员工信息，每个员工信息包含一个唯一的员工
编号、员工的名字、家庭住址、出生日期、工作岗位、薪资、上级领导等等。所有的这些信
息都需要绑定到一个实体中，可以作为一个整体单元被复制，作为函数的参数或返回值，或
者是被存储到数组中，等等。
下面两个语句声明了一个叫Employee的命名的结构体类型，并且声明了一个Employee类型的
变量dilbert：
type Employee struct {
ID int
Name string
Address string
DoB time.Time
Position string
Salary int
ManagerID int
}
var dilbert Employee
dilbert结构体变量的成员可以通过点操作符访问，比如dilbert.Name和dilbert.DoB。因为
dilbert是一个变量，它所有的成员也同样是变量，我们可以直接对每个成员赋值：
dilbert.Salary -= 5000 // demoted, for writing too few lines of code
或者是对成员取地址，然后通过指针访问：
position := &dilbert.Position
*position = "Senior " + *position // promoted, for outsourcing to Elbonia
点操作符也可以和指向结构体的指针一起工作：
var employeeOfTheMonth *Employee = &dilbert
employeeOfTheMonth.Position += " (proactive team player)"
相当于下面语句
(*employeeOfTheMonth).Position += " (proactive team player)"
结构体 142
gopl
下面的EmployeeByID函数将根据给定的员工ID返回对应的员工信息结构体的指针。我们可以
使用点操作符来访问它里面的成员：
func EmployeeByID(id int) *Employee { /* ... */ }
fmt.Println(EmployeeByID(dilbert.ManagerID).Position) // "Pointy-haired boss"
id := dilbert.ID
EmployeeByID(id).Salary = 0 // fired for... no real reason
后面的语句通过EmployeeByID返回的结构体指针更新了Employee结构体的成员。如果将
EmployeeByID函数的返回值从 指针类型改为Employee值类型，那么更新语句将
*Employee
不能编译通过，因为在赋值语句的左边并不确定是一个变量（译注：调用函数返回的是值，
并不是一个可取地址的变量）。
通常一行对应一个结构体成员，成员的名字在前类型在后，不过如果相邻的成员类型如果相
同的话可以被合并到一行，就像下面的Name和Address成员那样：
type Employee struct {
ID int
Name, Address string
DoB time.Time
Position string
Salary int
ManagerID int
}
结构体成员的输入顺序也有重要的意义。我们也可以将Position成员合并（因为也是字符串类
型），或者是交换Name和Address出现的先后顺序，那样的话就是定义了不同的结构体类
型。通常，我们只是将相关的成员写到一起。
如果结构体成员名字是以大写字母开头的，那么该成员就是导出的；这是Go语言导出规则决
定的。一个结构体可能同时包含导出和未导出的成员。
结构体类型往往是冗长的，因为它的每个成员可能都会占一行。虽然我们每次都可以重写整
个结构体成员，但是重复会令人厌烦。因此，完整的结构体写法通常只在类型声明语句的地
方出现，就像Employee类型声明语句那样。
一个命名为S的结构体类型将不能再包含S类型的成员：因为一个聚合的值不能包含它自身。
（该限制同样适应于数组。）但是S类型的结构体可以包含 指针类型的成员，这可以让我
*S
们创建递归的数据结构，比如链表和树结构等。在下面的代码中，我们使用一个二叉树来实
现一个插入排序：
gopl.io/ch4/treesort
结构体 143
gopl
type tree struct {
value int
left, right *tree
}
// Sort sorts values in place.
func Sort(values []int) {
var root *tree
for _, v := range values {
root = add(root, v)
}
appendValues(values[:0], root)
}
// appendValues appends the elements of t to values in order
// and returns the resulting slice.
func appendValues(values []int, t *tree) []int {
if t != nil {
values = appendValues(values, t.left)
values = append(values, t.value)
values = appendValues(values, t.right)
}
return values
}
func add(t *tree, value int) *tree {
if t == nil {
// Equivalent to return &tree{value: value}.
t = new(tree)
t.value = value
return t
}
if value < t.value {
t.left = add(t.left, value)
} else {
t.right = add(t.right, value)
}
return t
}
结构体类型的零值是每个成员都是零值。通常会将零值作为最合理的默认值。例如，对于
bytes.Buffer类型，结构体初始值就是一个随时可用的空缓存，还有在第9章将会讲到的
sync.Mutex的零值也是有效的未锁定状态。有时候这种零值可用的特性是自然获得的，但是
也有些类型需要一些额外的工作。
如果结构体没有任何成员的话就是空结构体，写作struct{}。它的大小为0，也不包含任何信
息，但是有时候依然是有价值的。有些Go语言程序员用map来模拟set数据结构时，用它来代
替map中布尔类型的value，只是强调key的重要性，但是因为节约的空间有限，而且语法比较
复杂，所以我们通常会避免这样的用法。
结构体 144
gopl
seen := make(map[string]struct{}) // set of strings
// ...
if _, ok := seen[s]; !ok {
seen[s] = struct{}{}
// ...first time seeing s...
}
4.4.1. 结构体字面值
结构体值也可以用结构体字面值表示，结构体字面值可以指定每个成员的值。
type Point struct{ X, Y int }
p := Point{1, 2}
这里有两种形式的结构体字面值语法，上面的是第一种写法，要求以结构体成员定义的顺序
为每个结构体成员指定一个字面值。它要求写代码和读代码的人要记住结构体的每个成员的
类型和顺序，不过结构体成员有细微的调整就可能导致上述代码不能编译。因此，上述的语
法一般只在定义结构体的包内部使用，或者是在较小的结构体中使用，这些结构体的成员排
列比较规则，比如image.Point{x, y}或color.RGBA{red, green, blue, alpha}。
其实更常用的是第二种写法，以成员名字和相应的值来初始化，可以包含部分或全部的成
员，如1.4节的Lissajous程序的写法：
anim := gif.GIF{LoopCount: nframes}
在这种形式的结构体字面值写法中，如果成员被忽略的话将默认用零值。因为，提供了成员
的名字，所有成员出现的顺序并不重要。
两种不同形式的写法不能混合使用。而且，你不能企图在外部包中用第一种顺序赋值的技巧
来偷偷地初始化结构体中未导出的成员。
package p
type T struct{ a, b int } // a and b are not exported
package q
import "p"
var _ = p.T{a: 1, b: 2} // compile error: can't reference a, b
var _ = p.T{1, 2} // compile error: can't reference a, b
虽然上面最后一行代码的编译错误信息中并没有显式提到未导出的成员，但是这样企图隐式
使用未导出成员的行为也是不允许的。
结构体可以作为函数的参数和返回值。例如，这个Scale函数将Point类型的值缩放后返回：
结构体 145
gopl
func Scale(p Point, factor int) Point {
return Point{p.X * factor, p.Y * factor}
}
fmt.Println(Scale(Point{1, 2}, 5)) // "{5 10}"
如果考虑效率的话，较大的结构体通常会用指针的方式传入和返回，