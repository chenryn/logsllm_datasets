Code reviewers must look for any place where a negative length could be supplied to 
this function because doing so would desynchronize data from length. 
Naturally, when reviewing object-oriented code (such as C++ or Java applications), 
related variables are often sorted into classes. You have already looked at simple 
inconsistencies in objects related to uninitialized variables; however, a broader range 
of concerns stem from an object being left in an inconsistent state. The process for 
finding these vulnerabilities is similar to the OpenSSH example: Identify the manner 
in which variables relate to each other, and attempt to determine whether a code path 
exists in which these variables can be updated in an unexpected way. Implicit 
member functions are a major component of object-oriented languages, and code 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
329 
auditors will likely find more potential for subtle vulnerabilities caused by incorrect 
assumptions about the behavior of implicit member functions, such as overloaded 
operators. 
Auditing Tip 
Determine what each variable in the definition means and how each variable relates 
to the others. After you understand the relationships, check the member functions or 
interface functions to determine whether inconsistencies could occur in identified 
variable relationships. To do this, identify code paths in which one variable is updated 
and the other one isn't. 
Variable Initialization 
Occasionally, programmers make the mistake of reading a value from a variable 
before it has been initialized. This happens primarily in two circumstances: 
The programmer intended for the variable to be initialized at the beginning of 
the function but forgot to specify an initializer during the declaration. 
A code path exists where the variable is accidentally used without ever being 
initialized. 
A variable initialization error results in uninitialized (and, therefore, undefined) data 
from a location in memory where the variable resides (typically, the program stack or 
heap) being interpreted and given meaning. In many cases, attackers can influence 
these memory areas and take advantage of the error to gain control of the process 
containing the offending code. In any event, unexpected data presents the 
opportunity to take unexpected code paths, which often has undesirable results. 
Listing 7-6 is a simple example. 
Listing 7-6. Uninitialized Variable Usage 
int login(char *login_string) 
{ 
    char *user, *style, *ptr; 
    ptr = strchr(login_string, ':'); 
    if(ptr){ 
        *ptr = '\0'; 
        user = strdup(login_string); 
        style = strdup(ptr+1); 
        *ptr = ':'; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
330 
    } else 
        user = strdup(login_string); 
    ... 
    if(style){ 
        ... 
    } 
} 
Listing 7-6 accepts a login string containing a username and an optional login style 
identified by a colon in the login string. The code later takes an alternative code path 
based on the supplied login style. The problem is that if no style is supplied, the style 
variable never gets initialized, and accesses to it read random data from the program 
stack. With careful manipulation, attackers could influence the values that 
uninitialized variables take. Attacking this vulnerability is possible, although quite 
complex; attackers need to work out the order in which functions are called and their 
relative stack depththat is, if function X calls function Y followed by function Z, the 
local variables from function Y are left on the stack in roughly the same place where 
the function Z allocates space for its local variables. 
Most vulnerabilities of this nature occur when a function takes an abnormal code path. 
Functions that allocate a number of objects commonly have an epilogue that cleans 
up objects to avoid memory leaks when an error occurs. Consider the code in Listing 
7-7. 
Listing 7-7. Uninitialized Memory Buffer 
int process_data(int sockfd) 
{ 
    char *buf; 
    struct descriptor *desc; 
    ... 
    if(read_data(sockfd)  sizeof(buffer)) 
Assuming length is a 32-bit unsigned value, you can see that an integer wrap 
circumvents this check when length contains a value between 0xFFFFFFE0 and 
0xFFFFFFFF. Calculations involving multiple variables often have problem domains 
that aren't a continuous set of values, as shown in the following expression: 
if(length1 + length2 > sizeof(buffer)) 
In this example, the length check can be evaded as long as the sum of length1 and 
length2 overflow the zero boundary. It does not matter which variable takes a large 
value (or if both do), as long as both add up to a value larger than 0xFFFFFFFF. When 
assessing problems like these, you should record the location of the problem case, 
and then revisit it when you have some idea of the constraints placed on each 
variable. 
Finally, in step 3, you need to determine whether the code path can be reached when 
variables contain values within the problem domain. You can perform this step in a 
fairly straightforward manner: 
Identify the data type of the variable involved Identifying the data type allows 
you to define an initial set of values the variable can take. If a problem domain 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
334 
is 0xFFFFFFE0 through 0xFFFFFFFF, but the variable is a 16-bit unsigned 
integer, you can automatically discount the check because the variable can 
never take the values of the domain in question. (Note the use of unsigned: A 
signed 16-bit variable can take values in the problem domain if certain type 
conversions occur during the check.) 
Determine the points at which the variable is assigned a value The next step is 
to identify where and how the variable is given a value. Pay attention to what 
default values the parameter can take, and note any special configurations 
that might make the application vulnerable. You also need to trace the values 
of other variables that are assigned to the suspect variable. If none of the 
assigned values can overlap with the problem domain, the operation can be 
marked as safe. 
Determine the constraints on the variable from assignment until the 
vulnerable operation Now that you know an initial set of values and possible 
assignments, you must determine any restrictions placed on the variable in 
the vulnerable code path. Often the variable goes through a number of 
validation checks, which reduce the set of values the variable can take. You 
need to trace the variable through its use and determine what values are 
included in this reduced setknown as the validated domain. Any overlap 
between the problem domain and the validated domain represents 
vulnerability. 
Determine supporting code path constraints In addition to the variable used in 
the vulnerable operation, other variables can play an important role in 
triggering the bug. You should record these additional variables and what 
values can lead to vulnerable code paths. 
Now that you understand how to identify arithmetic boundary conditions, try applying 
the process to the vulnerable code path in Listings 7-9 and 7-10. 
Listing 7-9. Arithmetic Vulnerability Example 
#define BLOB_MAX    1024 
unsigned char *read_blob(unsigned char *blob, size_t pktlen) 
{ 
   int bloblen; 
   unsigned char *buffer; 
   bloblen = ntohl(blob); 
   if(bloblen + sizeof(long) > pktlen || bloblen > BLOB_MAX) 
       return NULL; 
   buffer = alloc(bloblen); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
335 
   if(!buffer) 
       return NULL; 
   memcpy(buffer, blob+4, bloblen); 
   return buffer; 
} 
For the purposes of this discussion, assume that the alloc() function in Listing 7-9 is 
vulnerable to an integer overflow condition, and you want to identify an exploitable 
path to this function. To do this, you must first determine how to evade the length 
comparison performed by the bolded code line. On the left side of the comparison, 
bloblen needs to take on a value that, after the addition of 4, is less than pktlen. Even 
though bloblen is signed, it's converted to an unsigned integer for the left side of this 
comparison. This leaves you with a small problem domain: 0xFFFFFFFC through 
0xFFFFFFFF (-4 through -1). On the right side of the comparison, bloblen is treated as 
signed, so the problem domain is unchanged. To determine whether this function is 
vulnerable, you need to see how it's called, which is shown in Listing 7-10. 
Note 
The discussion of Listing 7-9 assumes a call to alloc() is vulnerable to an integer 
wrapping condition. In a real application, you would review alloc() and determine if 
this is the case, but it is a reasonable assumption. Custom allocation wrappers are 
often prone to a variety of arithmetic issues, as covered in "Auditing Memory 
Management(? [????.])," later in this chapter. 
Listing 7-10. Arithmetic Vulnerability Example in the Parent Function 
int process_packet(unsigned char *pkt, size_t pktlen) 
{ 
   unsigned int length = 0; 
   int type = 0; 
   unsigned char *data; 
   type = pkt[0]; 
   switch(type){ 
       case TYPE_KEY: 
           length = ntohl(&pkt[1]); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
336 
           if(length != RSA_KEY_SIZE) 
               return -1; 
           data = read_blob(&pkt[1], pktlen); 
           ... 
           break; 
       case TYPE_USER: 
           data = read_blob(&pkt[1], pktlen); 
           ... 
       default: 
           return -1; 
} 
There are two calls to read_blob() in Listing 7-10. When type is TYPE_KEY, the length 
variable is checked against RSA_KEY_SIZE, and returns with an error if it doesn't match. 
This means the validated domain is only one valueRSA_KEY_SIZEand is unlikely to 
overlap the problem domain. Therefore, the call to read_blob() is safe in this location. 
When type is TYPE_USER, however, no such restrictions exist. Therefore, the validated 
domain is 0x00000000 through 0xFFFFFFFF, so there's an overlap! All values in the 
problem domain are within the validated domain, so you can say with confidence that 
this comparison can be evaded. These are the only constraints you have: 
type == TYPE_USER 
length (from the read_blob function) + sizeof(long) is less than pktlen (so you 
probably want pktlen to be larger than 4) 
Type Confusion 
The union-derived data type is used to store multiple data elements at the same 
location in memory. The intended purpose for this type of storage is that each of the 
data elements are mutually exclusive, and only one of them can be in use at a time. 
Union data types are most commonly used when structures or objects are required to 
represent multiple data types depending on an external condition, such as 
representing different opaque objects read off the network. Occasionally, application 
developers confuse what the data in a union represents. This can have disastrous 
consequences on an application, particularly when integer data types are confused 
with pointer data types, or complex structures of one type are confused with another. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
337 
Although this mistake seems unlikely, it has shown up in at least one widely deployed 
application. Most vulnerabilities of this nature stem from misinterpreting a variable 
used to define what kind of data the structure contains. Listing 7-11 shows a brief 
example. 
Listing 7-11. Type Confusion 
struct object { 
    int type; 
    union { 
        int num; 
        char *str; 
        void *opaque; 
    } u; 
} 
struct object *object_read(int sockfd) 
{ 
    int ret; 
    struct object *obj; 
    if(!(obj = 
        (struct object *)calloc(1, sizeof(struct object)))) 
        die("calloc: %m"); 
    obj->type = get_type(sockfd); 