这个目标就是伪目标。
test:
.PHONY: test
PKGS := $(shell go list ./ ... I grep -v /vendor)
go test $(PKGS)
go test $(PKGS)
gometalinter .
go test $(PKGS)
--vendor
运维开发 － Makefiles for Golang129
---
## Page 135
$(GOMETALINTER) 这个 rule。
件在 $GOPATH/bin 目录下不存在，会进行重建。否则提示 up-to-date，同时 make 会跳过
alinter 没有安装的情况下运行 make会报错，我们会这么做：
130  Makefiles for Golang － 运维开发 
看下第一次运行 make 的结果:
依赖顺序是 test ->lint -> $(GOMETALINTER)
在 lint 这个 rule 在执行前，先进行 gometalinter 的安装。如果 gometalinter 的二进制文
OK，让我们再进一步：
上面的 rule 描述了 gometalinter 的安装过程。
 gometalinter 是一个外部工具，我们还没有在 Makefile 中描述如何获取到它，在 gomet-
lint Dependency management for external tools 
$(GOMETALINTER) :
GOMETALINTER := $(BIN_DIR)/gometalinter
lint: $(GOMETALINTER)
BIN_DIR := $(GOPATH)/bin 
lint: $(GOMETALINTER)
$(GOMETALINTER) :
GOMETALINTER := $(BIN_DIR)/gometalinter
test:lint
PKGS
BIN_DIR := $(GOPATH)/bin 
PHONY: 1int 
PHONY: test
 gometalinter ./... --vendor 
PHONY: 1int 
gometalinter --install &> /dev/null
go get -u github.com/alecthomas/gometalinter
go test $(PKGS)
:= $(shell go list ./... I grep -v /vendor)
---
## Page 136
让它们并行很简单，执行 make 命令时带-j参数，就像这样：
看下运行结果：
内容不少，
 Building in parallel
这次 gometalinter 已经安装过，所以不需要再次安装。
再次运行：
可以看到，执行过程跟我们计划是一致的。
release: windows linux darwin
v1.0.0-darwin-amd64
darwin:
.PHONY:
v1.0.0-1inux-amd64
linux:
v1.0.0-windows-amd64
windows:
.PHONY: windows 
BINARY := mytool
PHONY:release
ok
$make
PHONY:
ok
go get -u github.com/alecthomas/gometalinter 
$make
 -(ANIa)$/aseaau 0- PrInq o3 t9pe=HDaO9 xnUtI=S009
_ GOOS=windows GOARCH=amd64 go build -o release/$(BINARY)-
mkdir -p release 
但到这我们应该都能看懂了。定义了 3 个 rule 来 build 不同平台的二进制文件，想
darwin
linux
 github.com/sahilm/yamldiff
 github.com/sahilm/yamldiff 
...·
--vendor
--vendor
0.120s 
0.351s
运维开发 － Makefiles for Golang 131 
---
## Page 137
132  Makefiles for Golang － 运维开发 
之前的版本号我们都是预先设置好的，如果我们想接受外部的版本号，应该怎么做：
Injecting values at build time 
$@ 是指 target 的名称，如果是多个 target，$@ 就是正在执行 recipe 的 target 名称。
我们利用 automatic variables 可以减少一些重复的编写。
Reducing duplication 
release: windows linux darwin 
.PHONY: release 
release/$(BINARY)-$(VERSION) -$@-amd64
$(PLATFORMS) : 
PLATFORMS := windows linux darwin
VERSION ?= v1.0.0
BINARY := mytool 
release: windows linux darwin
v1.0.0-$@-amd64 
$(PLATFORMS):
PLATFORMS := windows linux darwin
BINARY := mytool
darwin-amd64
GOOS=darwin GOARCH=amd64 go build -o release/mytool-v1.0.0-
windows-amd64
GOOS=windows GOARCH=amd64 go build -o release/mytool-v1.0.0-
linux-amd64 
mkdir-prelease
mkdir
$ make release -j3
PHONY: $(PLATFORMS)
PHONY: release
PHONY: $(PLATFORMS)
mkdir 
 GOOS=$@ GOARCH=amd64 go build -o release/$(BINARY)- 
mkdir -p release 
-p release
---
## Page 138
本文链接： https://opsdev.cn/post/makefiles.html
捂脸~(*/*)
希望看完文章的人能有个好的开始。作为一个 gopher，至少我们得看懂别人写的 Makefile，
Final
完整的Makefile请扫描文末二维码查看。
现在版本会有个默认值，但我们也可以用命令参数的形式替换这个值，就像这样：
darwin-amd64
windows-amd64
GOOS=windows GOARCH=amd64 go build -o release/mytool-v2.0.0-
linux-amd64
mkdir-prelease
mkdir
mkdir
$makeVERSION=v2.0.0release-j3
-p release
-p
release
运维开发 － Makefiles for Golang133 
一扫查看文章详情
---
## Page 139
配置文件
常会遗忘 
代码风格
我们都做了些什么？
v0.1进行了二次开发。
IWONDERAGENT改造历程
插件、自定义脚本合并
134Wonder agent 改造历程－运维开发
·使用了更直观的toml
·代码整合到 Wonder主项目，项目初期每个模块都是独立的项目，随着模块的增多，经
·支持热加载
·解决包依赖，使用 glide 管理包依赖，在任何主机都可以编译成功
·将一些常用、重复的功能提取出来做为公共库
Wonder 是 360 内部一套 allin one 的监控解决方案，基于开源监控架构 Open-falcon
统一的命令控制
深度整合docker
Qalarm日志收集
自定义日志监控
优化内容序列化
解决包依赖
提取公共库
项目合并
自动更新，平滑重启
reload
GRPC
toml
relay
https
配置文件
代码风格
TODO
日志
RPC
agent
基础数据采集
API
自定义脚本
Transfer高可用
简单的验证
更多的数据
通用化
pprof
日志系统
CPUIDLE数据优化
自动更新
Metric支持独立的上传周期
agent自我监控
网卡速率优化
Docker
Nginx
平均响应时间
upstream平均响应时间
请求数
磁盘
CPU
499
---
## Page 140
基础数据收集
Debug
·Metric 支持设置独立的采集周期
时确保拿到的数据属于当前进程。
考虑到安全性并没有用常规的 http 方式，而是采用本地下发命令给 socket，同
官方 pprof 采集性能数据，
性能分析
OS.0_CREATE|Os.0_APPEND|oSs.0_RDWR, 0660)
提供完善的日志，包括分级、多文件、rotate、buffer 等功能。
日志系统
func LogsInit(){
import(
package g 
fatalFile, err := os.OpenFile("logs/fatal.log",
glog.SetLogger(glog.AdapterFile,
初始化日志
syscall.Dup2(int(fatalFile.Fd()), int(os.Stderr.Fd()))
}else{
if Config().Debug {
glog.SetLogFuncCallDepth(3)
glog. EnableFuncCallDepth(true)
"github.com/sumaig/glog"
"syscall"
log.Println("Open fatal file failed.")
 glog.SetLevel(glog.LevelInfo)
 glog.SetLevel(glog.LevelDebug)
完整代码请扫描文末二维码查看。
,"maxdays" :7}")
运维开发 － Wonder agent 改造历程135
---
## Page 141
RPC
136Wonder agent 改造历程－运维开发
·使用 MessagePack 对象序列化方案替代官方的 json，提升数据传输性能。
·安全第一，传输过程使用证书进行加密；
上增加了使用 ethtool 工具获取网卡速率的方案，提高准确率
但并不是所有主机都有这个文件，这样会导致监控数据一直为〇。我们在此基础
官方是从相关网卡设备的 speed 文件中读取，e.g. /sys/class/net/eth0/speed
·优化网卡速率
同时控制报警。同时使绘图曲线不那么尖锐。
直接会导致频繁报警。所以我们对采集的数据进行平均值计算，在能体现问题的
一些业务对CPU关注度比较高，业务场景也导致 CPU 的监控数值变化很频繁,
●优化 CPU数据采集
据都来自 /proc/pid/stat，算法参考的 ps 命令。
agent自身的资源损耗也是我们需要关注的，可以发现、解决一些问题。主要数
·Agent 监控:CPU、磁盘、内存
题，例如CPU.官方0.2也已经支持。
早期都是统一的周期进行上报，但有的 metric 需要更短的上报周期来及时发现问
12-0710:00