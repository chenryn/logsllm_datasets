### Improved Text

#### Authentication Phase
In this phase, the user \( U_i \) and the server \( S \) validate each other and compute a session key. The steps are as follows:

1. **Login Request:**
   - \( U_i \) sends the login request \(\{EID_i, D_i, M_i, T_i\}\) to \( S \).
   - Upon receiving the request, \( S \) reads its current timestamp \( T_{s1} \) and rejects the request if \((T_{s1} - T_i) > T\), where \( T \) is the allowed maximum transmission delay.

2. **Data Retrieval:**
   - \( S \) retrieves \(\{ID_i, Tr\}\) from \( EID_i \) using \( Dx+p(EID_i) \).
   - If \(\{ID_i, Tr\}\) exists in the registration group record (RGR), \( S \) computes:
     \[
     C^*_i = h(ID_i)x+Tr \mod n, \quad W^*_i = C^*_i \cdot D_i \mod n, \quad M^*_i = h(ID_i||C^*_i||D_i||W^*_i||T_i)
     \]
   - \( S \) checks if \( M^*_i = M_i \) and \( W^*_i = W_i \). If both conditions are satisfied, \( U_i \) is considered legitimate.

3. **Session Key Calculation:**
   - \( S \) picks the current timestamp \( T_s \) and calculates:
     \[
     EID^*_i = Ex+p(ID_i||Tr||T_s) \quad \text{and} \quad L_s = EC^*_i(ID_i||EID^*_i||T_s)
     \]
   - \( S \) updates the RGR by replacing \( x \cdot p \oplus (ID_i||Tr) \) with \( x \cdot p \oplus (ID_i||Tr||T_s) \).

4. **Response to User:**
   - \( S \) sends \(\{L_s\}\) to \( U_i \).

5. **Smart Card Verification:**
   - The smart card decrypts \( L_s \) to get \(\{ID'_i, EID'_i, W'_i, T'_s\}\).
   - The smart card verifies the validity of \( ID'_i \) and \( T'_s \).
   - If \( ID'_i = W_i \) and \( EID'_i \neq EID_i \), the session is rejected. Otherwise, the smart card updates \( EID_i \) with \( EID'_i \).

6. **Session Key Agreement:**
   - Both \( U_i \) and \( S \) agree on the same session key \( sk = h(W_i || EID^*_i) \).

#### Password Change Phase
The user \( U_i \) can update their password \( PW_i \) to a new one \( PW_{new} \) as follows:

1. **Input and Calculation:**
   - \( U_i \) inserts the smart card into a card reader and inputs \( ID_i \), \( PW_i \), and \( PW_{new} \).
   - The smart card calculates:
     \[
     C_i = \frac{B_i}{h(ID_i)PW_i} \mod n, \quad F^*_i = C_i \oplus PW_i \oplus ID_i
     \]
   - The smart card verifies if \( F^*_i = F_i \). If not, the update request is rejected.

2. **New Values Calculation:**
   - The smart card calculates:
     \[
     B_{new} = \frac{B_i}{h(ID_i)PW_i} \cdot PW_{new} \mod n, \quad F_{new} = B_{new} \oplus PW_{new} \oplus ID_i
     \]

3. **Update:**
   - The smart card updates \( B_i \) and \( F_i \) with \( B_{new} \) and \( F_{new} \).

### Cryptanalysis of Kumari-Khan’s Scheme

#### Type IV Attack on Two-Factor Security
If an adversary \( A \) obtains \( U_i \)'s smart card and extracts the stored data \(\{B_i\}\), and intercepts the authentication messages \(\{D_i, M_i, T_i\}\), \( A \) can obtain \( U_i \)'s password \( PW_i \) as follows:

1. **Guessing:**
   - Guess the value of \( ID_i \) and \( PW_i \) from dictionary spaces \( D_{id} \) and \( D_{pw} \).

2. **Computation:**
   - Compute:
     \[
     C^*_i = \frac{B_i}{h(ID^*_i)} \mod n, \quad W^*_i = C^*_i \cdot D_i \mod n, \quad M^*_i = h(ID^*_i || C^*_i || D_i || W^*_i || T_i)
     \]

3. **Verification:**
   - Check if \( M^*_i \) matches the intercepted \( M_i \).

4. **Repetition:**
   - Repeat the above steps until the correct values of \( ID^*_i \) and \( PW^*_i \) are found.

The time complexity of this attack is \( O(|D_{id}| \times |D_{pw}| \times (T_E + T_I + 2T_H)) \), where \( T_E \) is the running time for modular exponentiation, \( T_I \) is the running time for modular inverse operation, and \( T_H \) is the running time for hash operation.

#### Type II Attack on Two-Factor Security
If \( A \) obtains \( U_i \)'s smart card and extracts the stored sensitive parameters \(\{B_i, F_i\}\), \( A \) can obtain \( U_i \)'s password \( PW_i \) as follows:

1. **Guessing:**
   - Guess the value of \( ID_i \) and \( PW_i \) from dictionary spaces \( D_{id} \) and \( D_{pw} \).

2. **Computation:**
   - Compute:
     \[
     C^*_i = \frac{B_i}{h(ID^*_i)PW^*_i} \mod n, \quad F^*_i = C^*_i \oplus PW^*_i \oplus ID^*_i
     \]

3. **Verification:**
   - Check if \( F^*_i \) matches the extracted \( F_i \).

4. **Repetition:**
   - Repeat the above steps until the correct values of \( ID^*_i \) and \( PW^*_i \) are found.

The time complexity of this attack is similar to the Type IV attack.

#### No Forward Secrecy
Kumari-Khan's scheme claims to provide forward secrecy even if the server's private keys \( x \) and \( p \) are disclosed. However, this is not the case:

1. **Interception:**
   - Intercept the message \(\{EID_i, D_i, M_i, T_i, L_s\}\) exchanged between \( U_i \) and \( S \).

2. **Decryption:**
   - Decrypt \( EID_i \) using \( S \)'s private keys \( x \) and \( p \) to get \( ID_i \) and \( Tr \).

3. **Computation:**
   - Compute:
     \[
     C_i = h(ID_i)x+Tr \mod n, \quad W_i = C_i \cdot D_i \mod n
     \]
   - Decrypt \( L_s \) using \( C_i \) to get \( EID^*_i \).

4. **Session Key:**
   - Compute the session key \( sk_j = h(W_i || EID^*_i) \).

This attack shows that forward secrecy cannot be achieved in Kumari-Khan's scheme.

#### De-synchronization Attack
Kumari-Khan's scheme uses a synchronization mechanism to provide user un-traceability, but it introduces a usability problem. An adversary \( A \) can disrupt the synchronization by modifying a single protocol transcript:

1. **Modification:**
   - After \( S \) replaces \( x \cdot p \oplus (ID_i||Tr) \) with \( x \cdot p \oplus (ID_i||Tr||T_s) \) in the RGR, \( A \) intercepts and alters the message \(\{L_s\}\) to \(\{X\}\), where \( X \) is a random value.

2. **Rejection:**
   - In the authentication phase, \( U_i \) will find at least one of her checks failing, leading to the rejection of \( S \)'s response.
   - \( U_i \) will not update \( EID_i \) with \( EID^*_i \), causing a breach in the consistency of the user-identification data between \( U_i \) and \( S \).

#### Revisiting Odelu et al.’s Scheme

Odelu et al.'s scheme, proposed in 2015, aims to improve upon Islam's scheme by addressing security flaws. However, it is still vulnerable to Type II attacks and introduces a new vulnerability—Type VII smart-card-loss attack.

#### Initialization Phase
1. **Server Setup:**
   - The server \( S \) chooses a large prime \( p \), a secret key \( k_s \in Z^*_p \), and its public key \( P_s = g^{k_s} \mod p \), where \( g \in Z^*_p \) is a generator of the cyclic group \( Z^*_p \).

2. **User Enrollment:**
   - \( U_i \) chooses her identity \( ID_i \) and sends it to \( S \).
   - \( S \) checks if \( h(ID_i || k_s) \) is in its database. If not, \( S \) computes \( C_i = h(ID_i || k_s || SID_i) \) and stores \(\{C_i, P_s, g, p, h(·)\}\) into the smart card \( SC_i \) with identifier \( SID_i \). \( S \) keeps \([h(ID_i || k_s), SID_i]\) in the database for \( U_i \).

3. **Smart Card Data:**
   - \( S \) sends the smart card \( SC_i \) with data \(\{C_i, P_s, g, p, h(·)\}\) to \( U_i \).
   - \( U_i \) keys her selected password \( pw_i \) into \( SC_i \). \( SC_i \) calculates:
     \[
     B_i = C_i \oplus h(pw_i || ID_i) = h(ID_i || k_s || SID_i) \oplus h(pw_i || ID_i), \quad A_i = h(C_i || pw_i || ID_i)
     \]
   - \( SC_i \) replaces \( C_i \) with \( B_i \) and keeps \( A_i \) in its memory. Thus, \( SC_i \) includes \(\{A_i, B_i, P_s, g, p, h(·)\}\).

#### Login Phase
When \( U_i \) wants to log in to \( S \):

1. **User Input:**
   - \( U_i \) inserts her smart card into a card reader and keys \( ID_i \) and \( pw_i \).
   - \( SC_i \) calculates:
     \[
     C_i = B_i \oplus h(pw_i || ID_i), \quad A_i = h(C_i || pw_i || ID_i)
     \]
   - \( SC_i \) checks if \( A_i \) matches the stored \( A_i \). If not, \( SC_i \) rejects the login attempt.

2. **Random Number Generation:**
   - \( SC_i \) chooses \( \alpha, n_1 \in_R Z^*_p \) and computes:
     \[
     K_1 = P^{h((cid:11) || C_i)} \mod p, \quad TID_i = (ID_i || n_1) \oplus h(K_1), \quad V_i = g^{h((cid:11) || C_i)} \mod p
     \]

3. **Message to Server:**
   - \( U_i \) sends \(\{TID_i, V_i\}\) to \( S \).

#### Authentication Phase
Upon receiving the login request from \( U_i \):

1. **Decryption:**
   - \( S \) calculates the decryption key \( K_2 = V_i^{k_s} \mod p \) and decrypts \( TID_i \) using \( K_2 \) to get \((ID_i || n_1)\).
   - \( S \) checks the validity of \( ID_i \) by finding if \( h(ID_i || k_s) \) is in its database. If not, \( S \) rejects \( U_i \)'s login request.

2. **Session Key Calculation:**
   - \( S \) selects \( \beta \in_R Z^*_p \) and computes:
     \[
     C_i = h(ID_i || k_s || SID_i), \quad sk_s = V_i^{h(k_s || (cid:12))} \mod p, \quad V_s = g^{h(k_s || (cid:12))} \mod p, \quad M_s = h(V_i || C_i || V_s || sk_s || n_1)
     \]
   - \( S \) sends \(\{V_s, M_s\}\) to \( U_i \).

3. **Verification:**
   - \( U_i \) calculates:
     \[
     sk_i = V_s^{h((cid:11) || C_i)} \mod p, \quad M_i = h(sk_i || V_s || C_i || n_1)
     \]
   - \( U_i \) checks if \( M_s \) matches \( h(V_i || C_i || V_s || sk_s || n_1) \). If yes, \( U_i \) is assured that \( S \) is authentic and agrees the session key \( sk_s \).

4. **Final Verification:**
   - \( U_i \) sends \(\{M_i\}\) to \( S \).
   - \( S \) checks if \( M_i \) matches \( h(sk_s || V_s || C_i || n_1) \). If yes, \( S \) is assured that \( U_i \) is authentic and agrees the session key \( sk_s \).

### Cryptanalysis of Odeulu et al.’s Scheme

The two assumptions about the adversary's capabilities (i.e., C-1 and C-2) listed in Table 1 are also explicitly made in Odeulu et al.'s paper. The scheme is vulnerable to Type II attacks and introduces a new vulnerability—Type VII smart-card-loss attack.