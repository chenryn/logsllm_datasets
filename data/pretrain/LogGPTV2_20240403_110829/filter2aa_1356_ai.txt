份验证绕过攻击的情况下一样，如下面的屏幕截图所示：
我们还可以在输入结尾处附加双连字符（ -），来使SQL查询的其余部分仅解释为对应用程
序的注释。
让我们看看另一个应用程序，这一次，利用drozer，我们以前使用的工具，来利用SQLite注
入漏洞。
这个应用程序是一个待办事项，用户可以保存他们的笔记;该笔记存储在名为 todotable.db的
数据库中，并在应用程序中通过内容供应器访问。遵循以下步骤：
第六章玩转SQLite
72
1. 让我们继续，并启动drozer，查看这个应用程序的数据库，如下面的命令所示。软件包
名称为 com.attify.vulnsqliteapp。
adbforwardtcp:31415tcp:31415
drozerconsoleconnect
2. 一旦我们进入了Drozer的控制台，我们就可以运行 finduri扫描器模块来查看所有内容
URI和可访问的URI，如下所示：
dz>runscanner.provider.finduris-acom.attify.vulnsqliteapp
Scanningcom.attify.vulnsqliteapp...
UnabletoQuery
content://com.attify.vulnsqliteapp.contentprovider/
AbletoQuery
content://com.attify.vulnsqliteapp.contentprovider/todos
AbletoQuery
content://com.attify.vulnsqliteapp.contentprovider/todos/
UnabletoQuery
content://com.attify.vulnsqliteapp.contentprovider
AccessiblecontentURIs:
content://com.attify.vulnsqliteapp.contentprovider/todos
content://com.attify.vulnsqliteapp.contentprovider/todos/
3. 接下来，我们将使用Drozer中的注入扫描程序模块检查应用程序中基于注入的漏洞，如
下所示：
dz>runscanner.provider.injection-acom.attify.vulnsqliteapp
Scanningcom.attify.vulnsqliteapp...
NotVulnerable:
content://com.attify.vulnsqliteapp.contentprovider/
content://com.attify.vulnsqliteapp.contentprovider
InjectioninProjection:
Novulnerabilitiesfound.
InjectioninSelection:
content://com.attify.vulnsqliteapp.contentprovider/todos
content://com.attify.vulnsqliteapp.contentprovider/todos/
4. 所以，现在我们可以使用可选参数来查询这些内容供应器，例如 1=1，它将在所有情
况下返回 TRUE，如下面的截图所示：
5. 此外，我们可以使用Drozer模块 app.provider.insert，并通过指定参数和要更新的数
据类型，将我们自己的数据插入SQLite数据库。让我们假设我们要在数据库中添加另一
个 to-do条目。因此，我们需要四个字
第六章玩转SQLite
73
段： id， category， summary和 description，数据类型分别
为 integer， string， string和 string。
6. 因此，完整的语法将变成：
runapp.provider.insert
content://com.attify.vulnsqliteapp.contentprovider/todos/-
-integer_id2--stringcategoryurgent--stringsummary
"FinancialSummary"--stringdescription"SubmitAnnual
Report"
成功执行后，它将显示完成消息，如以下屏幕截图所示：
总结
在本章中，我们深入了解了SQLite数据库，甚至在应用程序中发现了漏洞，并利用Drozer
来利用它们。SQLite数据库应该是渗透测试人员关注的主要问题之一，因为它们包含了应用
程序的大量信息。在接下来的章节中，我们将了解一些不太知名的Android利用技术。
第六章玩转SQLite
74
第七章不太知名的Android漏洞
作者：AdityaGupta
译者：飞龙
协议：CCBY-NC-SA4.0
在本章中，我们将了解一些不太知名的Android攻击向量，这在Android渗透测试中可能很
有用。我们还将涵盖一些主题，如Android广告库中的漏洞和 WebView实现中的漏洞。作为
渗透测试者，本章将帮助你以更有效的方式审计Android应用程序，并发现一些不常见的缺
陷。
7.1AndroidWebView漏洞
WebView是一种Android视图，用于在应用程序中显示Web内容。它使用WebKit渲染引
擎，以便使用 file//和 data//协议显示网页和其他内容，可以用于从文件系统加载文件和
数据内容。 WebView也用于各种Android应用程序，例如提供注册和登录功能的应用程序。
它通过在应用程序的布局中构建其移动网站，来显示应用程序中的Web内容。我们将在下一
章中进一步讨论WebKit及其渲染引擎。对于本章，我们将只关心使用WebKit的那些应用程
序。
在应用中使用WebView
在应用程序中使用 WebView非常简单和直接。假设我们希望我们的整个活动都是一
个 WebView组件，从 http://examplewebsite.com加载内容。
下面是在Android应用程序中实现 WebView的代码示例：
WebViewwebview=newWebView(this);
setContentView(webview);
webview.loadUrl("http://vulnerable-website.com");
另一个重要的事情是，大多数开发人员最终为了增强应用程序的功能，在 WebView实现中使
用以下命令启用JavaScript（默认设置为 False）：
setJavascriptEnabled(true);
前面的命令确保JavaScript可以在应用程序中执行，并利用注册界面。
识别漏洞
第七章不太知名的Android漏洞
75
想象一下这种情况，应用程序在不安全的网络中使用，允许攻击者执行中间人攻击（更多中
间人攻击的内容请参见OWASP网
站 https//www.owasp.org/index.php/Man-in-the-middle_attack）。如果攻击者可以访问网络，
则他们可以修改请求和对设备的响应。这表示他们能够修改响应数据，并且如果从网站加载
JavaScript内容，则可以完全控制JavaScript内容。
事实上，通过使用它，攻击者甚至可以使用JavaScript来调用手机上的某些方法，例如向另
一个号码发送短信，拨打电话，甚至使用诸如Drozer之类的工具获取远程shell。
让我们举个简单的例子，来说明 WebView漏洞的可能性。在这里，我们将使用JoshuaDrake
的GitHub仓库（ https://github.com/jduck/VulnWebView/）中的，由他创建的概念证明。这
个POC在应用程序中使用 WebView，来简单加载一个URL并且加载一个位
于 http://droidsec.org/addjsif.html的网页（如果这个链接打不开，你可以访
问 http//attify.com/lpfa/addjsif.html）。
以下是Eclipse中代码示例的屏幕截图，其中使用名称Android创建JavaScript界面：
我们还可以从源代码中创建 apk文件，只需右键单击项目，然后选
择 ExportasanAndroidApplication（导出为Android应用程序）。一旦我们运行应用程序
并监听Burp代理中的流量，我们将看到应用程序中指定的URL的请求，如以下屏幕截图所
示：
第七章不太知名的Android漏洞
76
现在，当响应来自服务器时，我们可以修改响应数据并使用它来利用此漏洞，如以下屏幕所
示
让我们假设攻击者需要利用这个漏洞应用程序，来使用受害者的设备向一个号码发送短信。
以下屏幕截图显示了修改后的响应的样子：
一旦我们点击 Forward（转发）按钮，邮件将从受害者的设备发送到攻击者指定的号码。
上述内容简单地调用 SMSManager()，以便将包含文本 pwned的SMS发送到的预定义号码。
第七章不太知名的Android漏洞
77
这是一个利用存在漏洞的 WebView应用程序的简单示例。事实上，你可以尝试调用不同的方
法或使用Drozer从设备获取远程shell。你还可以访
问 https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-executio
阅读通过Drozer利用 WebView的更多信息。
7.2感染合法APK
由于Google的不严格政策，将应用上传到Play商店时，许多开发人员上传了恶意应用和软
件，目的是从使用者的装置窃取私人资料。GooglePlay中存在的大多数恶意软件只是合法
应用程序的受感染版本。恶意软件作者只需要一个真正的应用程序，反编译它，插入自己的
恶意组件，然后重新编译它，以便分发到应用商店和感染用户。这可能听起来很复杂，但实
际上，这是一个非常简单的事情。
让我们尝试分析恶意软件作者如何修改合法应用程序，来创建它的受感染版本。执行此操作
的最简单的方法之一是编写一个简单的恶意应用程序，并将其所有恶意活动放在服务中。此
外，我们在 AndroidManifest.xml文件中添加广播接收器，以便指定的事件（例如接收SMS）
能够触发我们的服务。
因此，以下是创建受感染版本的合法应用程序的简单步骤：
1. 使用 apktool解压缩应用程序，如下所示：
apktoold[appname].apk
2. 反编译恶意应用程序来生成Java类的smali文件。在这里，我们需要将所有的恶意活动
放在服务中。此外，如果你有smali语言的经验，你可以直接从smali本身创建服务。
假设恶意服务的名称是 malware.smali。
3. 接下来，我们需要将 malware.smali文件复制到smali文件夹，它位于我们反编译的合法
应用程序的文件夹中。我们把 malware.smali中的软件包名称的所有引用更改为合法应
用程序的软件包名称，并在 AndroidManifest.xml中注册服务。
在这里，我们需要在 AndroidManifest.xml文件中添加另一行，如下所示：
4. 此外，我们需要注册一个广播接收器来触发服务。在这种情况下，我们选择短信作为触
发器，如下面的代码所示：
第七章不太知名的Android漏洞
78
5. 使用 apktool重新编译应用，像这样：
apktoolbappname/
一旦应用程序使用 apktool重新编译，新的apk将为被感染的合法版本。向手机发送邮件可
能会自动触发此恶意软件。如果恶意软件服务需要的权限比合法应用程序更多，我们还需要
手动在 AndroidManifest.xml文件中添加缺少的权限。
7.3广告库中的漏洞
GooglePlay上提供的大部分免费Android应用都会使用广告来赚取收益。然而，通常广告库
本身存在漏洞，使得整个应用程序容易受到某种严重的威胁。
为了识别特定应用程序中存在的广告库，我们可以使用 dex2jar/apktool简单地反编译该应用
程序，并分析创建的文件夹。你还可以在 http://www.appbrain.com/stats/libraries/ad中找
到一些最受欢迎的Android广告库和使用它们的应用程序。广告库可能具有许多漏洞，例如
上一节中讨论的 WebView漏洞，不安全的文件权限或任何其他漏洞，这可能会导致攻击者破
坏整个应用程序，获得反向shell或甚至创建后门。
7.4Android中的跨应用脚本
跨应用程序脚本漏洞是一种Android应用程序漏洞，攻击者可以绕过同源策略并在应用程序
位置中访问存储在Android文件系统上的敏感文件。这意味着攻击者能够访问位
于 /data/data/[应用程序包名称]位置中的所有内容。漏洞的根本原因是，应用程序允许内容使
用受信任区域的访问权限，在不受信任区域中执行。
如果漏洞应用程序是Web浏览器，攻击会变得更加严重，其中攻击者能够静默窃取浏览器存
储的所有Cookie和其他信息，并将其发送给攻击者。
甚至一些著名的应用程序，如Skype，Dropbox，海豚浏览器等，早期版本中都存在跨应用程
序脚本漏洞。
让我们来看看海豚浏览器HD中的漏洞，例如，由RoeeHay和YairAmit发现的漏洞。此示