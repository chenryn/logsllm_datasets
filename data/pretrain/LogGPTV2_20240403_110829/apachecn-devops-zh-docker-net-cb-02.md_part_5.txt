```
ExecStart=/usr/bin/dockerd --bip=192.168.127.1/24
```
更改此设置时，请确保您配置的是 IP 地址(`192.168.127.1/24`)而不是您想要定义的子网(`192.168.127.0/24`)。Docker 的早期版本要求在分配新的网桥 IP 之前重新启动主机或手动删除现有的网桥。在较新的版本中，您只需重新加载`systemd`配置，并为要分配的新网桥 IP 重新启动服务:
```
user@docker1:~$ sudo systemctl daemon-reload
user@docker1:~$ sudo systemctl restart docker
user@docker1:~$
user@docker1:~$ ip addr show docker0
5: docker0:  mtu 1500 qdisc noqueue state DOWN group default
    link/ether 02:42:a6:d1:b3:37 brd ff:ff:ff:ff:ff:ff
    inet 192.168.127.1/24 scope global docker0
       valid_lft forever preferred_lft forever
user@docker1:~$
```
除了更改`docker0`桥的 IP 地址，您还可以定义 Docker 可以分配给容器的 IP 地址。这是通过使用`--fixed-cidr`配置标志来完成的。例如，假设以下配置:
```
ExecStart=/usr/bin/dockerd --bip=192.168.127.1/24
--fixed-cidr=192.168.127.128/25
```
在这个场景中，`docker0`桥接口本身位于`192.168.127.0/24`子网，但是我们告诉 Docker 只分配子网外的容器 IP 地址`192.168.127.128/25`。如果我们添加这个配置并再次重新加载`systemd`并重新启动服务，我们可以看到 Docker 将为第一个容器分配一个`192.168.127.128`的 IP 地址:
```
user@docker1:~$ docker run --name web1 -it \
jonlangemak/web_server_1 /bin/bash
root@ff8872212cb4:/# ip addr show eth0
6: eth0@if7:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:c0:a8:7f:80 brd ff:ff:ff:ff:ff:ff
    inet 192.168.127.128/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:c0ff:fea8:7f80/64 scope link
       valid_lft forever preferred_lft forever
root@ff8872212cb4:/#
```
由于容器使用定义的`docker0`网桥 IP 地址作为默认网关，因此固定 CIDR 范围必须是在`docker0`网桥上定义的较小子网。
### 已发布端口的 Docker 接口绑定
在一些场景中，您可能有一台 Docker 主机，它有多个网络接口，这些接口位于不同的网段中。例如，假设您有两台主机，两台主机都有两个网络接口:
![Docker interface binding for published ports](img/B05453_02_12.jpg)
考虑这样一种情况，我们使用以下语法在主机`docker1`上启动一个提供 web 服务的容器:
```
docker run -d --name web1 -P jonlangemak/web_server_1
```
正如您所看到的，我们已经传递了`-P`标志，告诉 Docker 将映像中出现的任何暴露端口发布到随机端口上的 Docker 主机。如果我们检查端口映射，我们注意到虽然有动态端口分配，但没有主机 IP 地址分配:
```
user@docker1:~$ docker run -d --name web1 -P jonlangemak/web_server_1
d96b4dd005edb2218257a7701b674f51f4318b92baf4be686400d77912c75e58
user@docker1:~$ docker port web1
80/tcp -> 0.0.0.0:32768
user@docker1:~$
```
Docker 没有指定特定的 IP 地址，而是用`0.0.0.0`指定所有接口。这意味着容器中的服务可以在 Docker 主机的任何 IP 接口上的端口`32768`上访问。我们可以通过`docker2`主持人的测试来证明这一点:
```
user@docker2:~$ curl http://10.10.10.101:32768
    Web Server #1 - Running on port 80
user@docker2:~$ curl http://192.168.10.101:32768
    Web Server #1 - Running on port 80
user@docker2:~$
```
如果我们希望限制 Docker 默认发布端口的接口，我们可以将`--ip`选项传递给 Docker 服务。为了继续这个例子，我的选项现在可以如下所示:
```
ExecStart=/usr/bin/dockerd --bip=192.168.127.1/24
--fixed-cidr=192.168.127.128/25 --ip=192.168.10.101
```
将这些选项传递给 Docker 服务，并重新运行我们的容器，将导致端口仅映射到定义的 IP 地址:
```
user@docker1:~$ docker port web1
80/tcp -> 192.168.10.101:32768
user@docker1:~$
```
如果我们第二次从`docker2`主机运行我们的测试，我们应该看到服务只在`192.168.10.101`接口上公开，而不在`10.10.10.101`接口上公开:
```
user@docker2:~$ curl http://10.10.10.101:32768
curl: (7) Failed to connect to 10.10.10.101 port 32768: Connection refused
user@docker2:~$
user@docker2:~$ curl http://192.168.10.101:32768
    Web Server #1 - Running on port 80
user@docker2:~$
```
请记住，此设置仅适用于已发布的端口。这不会影响容器可能用于出站连接的接口。这是由主机的路由表决定的。
### 容器接口 MTU
在某些情况下，可能需要更改容器网络接口的 MTU。这可以通过将`--mtu`选项传递给 Docker 服务来完成。例如，我们可能希望将容器接口的 MTU 降低到`1450`以考虑某种类型的封装。为此，您可以传递以下标志:
```
ExecStart=/usr/bin/dockerd  --mtu=1450
```
添加此选项后，您可能会检查`docker0`桥 MTU，发现它没有变化，如下代码所示:
```
user@docker1:~$ ip addr show docker0
5: docker0:  mtu 1500 qdisc noqueue state DOWN group default
    link/ether 02:42:a6:d1:b3:37 brd ff:ff:ff:ff:ff:ff
    inet 192.168.127.1/24 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:a6ff:fed1:b337/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$ 
```
这其实是意料之中的行为。默认情况下，Linux 网桥会自动使用与其相关联的任何从接口的最低 MTU。当我们告诉 Docker 使用`1450`的 MTU 时，我们实际上是告诉它用`1450`的 MTU 启动任何容器。由于此时没有容器在运行，所以桥的 MTU 没有变化。让我们启动一个容器来验证这一点:
```
user@docker1:~$ docker run --name web1 -d jonlangemak/web_server_1
18f4c038eadba924a23bd0d2841ac52d90b5df6dd2d07e0433eb5315124ce427
user@docker1:~$
user@docker1:~$ docker exec web1 ip addr show
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
10: eth0@if11:  mtu 1450 qdisc noqueue state UP
    link/ether 02:42:c0:a8:7f:02 brd ff:ff:ff:ff:ff:ff
    inet 192.168.127.2/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:c0ff:fea8:7f02/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
我们可以看到容器有正确的`1450`MTU。检查 Docker 主机，我们应该会看到网桥的 MTU 现在也降低了:
```
user@docker1:~$ ip addr show docker0
5: docker0:  mtu 1450 qdisc noqueue state UP group default
    link/ether 02:42:a6:d1:b3:37 brd ff:ff:ff:ff:ff:ff
    inet 192.168.127.1/24 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:a6ff:fed1:b337/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
如我们所料，用较低的 MTU 启动容器会自动影响桥 MTU。
### 容器默认网关
默认情况下，Docker 会将任何容器的默认网关设置为`docker0`桥的 IP 地址。这很有意义，因为容器需要通过`docker0`桥到达外部网络。但是，可以覆盖此设置，让 Docker 将默认网关设置为`docker0`网桥网络上的另一个 IP 地址。
例如，我们可以通过向 Docker 服务传递这些配置选项来将默认网关更改为`192.168.127.50`。
```
ExecStart=/usr/bin/dockerd --bip=192.168.127.1/24 --fixed-cidr=192.168.127.128/25 --default-gateway=192.168.127.50
```
如果我们添加这些设置，重新启动服务，并生成一个容器，我们可以看到新的容器有一个默认网关`192.168.127.50`，配置如下:
```
user@docker1:~$ docker run --name web1 -it \
jonlangemak/web_server_1 /bin/bash
root@b36baa4d0950:/# ip addr show eth0
12: eth0@if13:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:c0:a8:7f:80 brd ff:ff:ff:ff:ff:ff
    inet 192.168.127.128/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:c0ff:fea8:7f80/64 scope link
       valid_lft forever preferred_lft forever
root@b36baa4d0950:/#
root@b36baa4d0950:/# ip route show
default via 192.168.127.50 dev eth0
192.168.127.0/24 dev eth0  proto kernel  scope link  src 192.168.127.128
root@b36baa4d0950:/# 
```
请记住此时，该容器在其当前子网之外没有连接，因为该网关当前不存在。为了使容器能够连接到其本地子网之外的地方`192.168.127.50`，需要从容器到达并连接到外部网络。
### 注
还有其他在服务级别配置的选项，如`--iptables`、`--icc`。我们将在后面的章节中讨论它们的相关用例。