    fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main
    /x86_64/APKINDEX.tar.gz
    fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community
    /x86_64/APKINDEX.tar.gz
    (1/4) Installing ca-certificates (20191127-r1)
    (2/4) Installing nghttp2-libs (1.40.0-r0)
    (3/4) Installing libcurl (7.67.0-r0)
    (4/4) Installing curl (7.67.0-r0)
    Executing busybox-1.31.1-r9.trigger
    Executing ca-certificates-20191127-r1.trigger
    OK: 7 MiB in 18 packages
    ```
7.  Use the `curl` command to validate connectivity works at the host level, by calling port `8080` on the host machine:
    ```
    / # curl -v http://localhost:8080
    ```
    您应该会收到来自 NGINX 的`200 OK`响应，表明在主机级别成功连接:
    ![Figure 6.28: Accessing the webserver1 container from the exposed ports on the host ](img/B15021_06_28.jpg)
    图 6.28:从主机上公开的端口访问 webserver1 容器
8.  Likewise, use the `curl` command to access the IP address of the container in the Docker `bridge` network directly over port `80`:
    ```
    / # curl -v 192.168.1.2:80
    ```
    同样，您应该会收到另一个`200 OK`响应，表示连接成功:
    ![Figure 6.29: Accessing the NGINX web server from the IP  address of the container instance ](img/B15021_06_29.jpg)
图 6.29:从容器实例的 IP 地址访问 NGINX 网络服务器
在本练习中，我们能够使用不同的 Docker 网络驱动程序来说明容器之间的连接。这个场景适用于现实世界的生产基础设施，因为当部署一个容器化的解决方案时，工程师将努力部署一个尽可能不可变的基础设施。借助在 Docker 中部署完全模拟主机级网络的容器的能力，可以设计出在主机操作系统上只需极少配置的基础架构。这使得部署和扩展 Docker 所部署的主机变得非常容易。诸如`curl`和其他监控工具的包可以部署到在 Docker 主机上运行的容器中，而不是安装在主机本身上。这保证了部署和维护的便利性，并提高了部署更多主机以满足不断增长的需求的速度。
## 活动 6.02:在之上建立网络
**解决方案**:
1.  使用`docker network create`命令，通过传递自定义的`subnet`、`gateway`和`overlay`网络驱动程序:
    ```
    $ docker network create panoramic-net --subnet=10.2.0.0/16 --gateway=10.2.0.1 --driver overlay
    ```
    ，在 Docker 集群的`Machine1`上创建一个名为`panoramic-net`的 Docker`overlay`网络
2.  Use the `docker service create` command on `Machine1` to create a service named `trekking-app` in the `panoramic-net` network:
    ```
    $ docker service create -t --name trekking-app --replicas=1 --network panoramic-net alpine:latest
    ```
    这将在`panoramic-net` `overlay`网络中启动一项名为`trekking-app`的服务。
3.  使用`Machine1`上的`docker service create`命令在`panoramic-net`网络中创建名为`database-app`的服务。设置默认凭证并指定 Docker 映像的`postgres:12`版本:
    ```
    $ docker service create -t --name database-app --replicas=1 --network panoramic-net -e "POSTGRES_USER=panoramic" -e "POSTGRES_PASSWORD=trekking" postgres:12
    ```
4.  Use `docker exec` to access an `sh` shell inside the `trekking-app` service container:
    ```
    $ docker exec -it trekking-app.1.qhpwxol00geedkfa9p6qswmyv /bin/sh
    ```
    这将把你放到`trekking-app`容器实例中的一个根外壳中。
5.  Use the `ping` command to validate network connectivity to the `database-app` service:
    ```
    / # ping database-app
    ```
    ICMP 回复应表明连接成功:
    ```
    PING database-app (10.2.0.5): 56 data bytes
    64 bytes from 10.2.0.5: seq=0 ttl=64 time=0.261 ms
    64 bytes from 10.2.0.5: seq=1 ttl=64 time=0.352 ms
    64 bytes from 10.2.0.5: seq=2 ttl=64 time=0.198 ms
    ```
在本练习中，我们利用了一个跨 Docker 集群的定制 Docker `overlay`网络来说明使用 Docker DNS 的两个 Docker 集群服务之间的连接。在现实世界的多层应用中，许多微服务可以部署在大型 Docker 集群中，这些集群使用`overlay`网络网格直接相互对话。了解`overlay`网络如何与 Docker DNS 协同工作，对于实现高效的可扩展性至关重要，因为您的容器化基础架构在持续增长。
# 7。Docker 仓库
## 活动 7.01:在 PostgreSQL 数据库中存储容器事件(状态)数据
**解决方案**:
1.  运行以下命令删除主机中的所有对象:
    ```
    $ docker container rm -fv $(docker container ls -aq)
    $docker image rm $(docker image ls -q)
    ```
2.  获取卷名，然后使用以下命令删除所有卷:
    ```
    $docker volume ls
    $docker volume rm 
    ```
3.  获取网络名称，然后使用以下命令删除所有网络:
    ```
    $docker network ls
    $docker network rm 
    ```
4.  打开两个终端，一个专用于看到`docker events --format '{{json .}}'`生效。另一个应该打开以执行前面提到的高级步骤。
5.  In the first terminal, run the following command:
    ```
    docker events --format '{{json .}}'.
    ```
    您应该得到如下输出:
    ![Figure 7.11: Output of the docker events command ](img/B15021_07_11.jpg)
    图 7.11:docker 事件命令的输出
6.  Run the following command to start the `ubuntu` container in the second terminal:
    ```
    $docker run -d ubuntu:14.04
    ```
    您应该得到如下输出:
    ![Figure 7.12: Output of the docker run command ](img/B15021_07_12.jpg)
    图 7.12:Docker 运行命令的输出
7.  在第二个终端中使用以下命令创建名为`vol1`的卷:
    ```
    $docker volume create vol1
    ```
8.  在第二个终端中使用以下命令创建名为`net1`的网络:
    ```
    $docker network create net1
    ```
9.  使用以下命令移除容器:
    ```
    $docker container rm -fv 
    ```
10.  使用以下命令删除卷和网络:
    ```
    $docker volume rm vol1
    $docker network rm net1
    ```
11.  在`docker events`终端点击 *Ctrl* + *C* 终止。
12.  Check the following two examples to understand the JSON output:
    **例 1** :
    ```
    {"status":"create","id":"43903b966123a7c491b50116b40827daa03
    da5d350f8fef2a690fc4024547ce2","from":"ubuntu:14.04","Type":
    "container","Action":"create","Actor":{"ID":"43903b966123a7c
    491b50116b40827daa03da5d350f8fef2a690fc4024547ce2","Attributes":
    {"image":"ubuntu:14.04","name":"upbeat_johnson"}},"scope":"local",
    "time":1592516703,"timeNano":1592516703507582404}
    ```
    **例 2** :
    ```
    {"Type":"network","Action":"connect","Actor":{"ID":"52855e1561
    8e37b7ecc0bb26bc42847af07cae65ddd3b68a029e40006364a9bd",
    "Attributes":{"container":"43903b966123a7c491b50116b40827daa03d
    a5d350f8fef2a690fc4024547ce2","name":"bridge","type":"bridge"}},
    "scope":"local","time":1592516703,"timeNano":1592516703911851347}
    ```
    你会发现不同的对象有不同的属性和结构。
13.  运行带有卷的 PostgreSQL 容器。命名容器`db1` :
    ```
    $docker container run --name db1 -v db:/var/lib/postgresql/data -e POSTGRES_PASSWORD=password -d postgres
    ```
14.  运行`exec`命令，以便用要执行的命令替换 bash。外壳将变为`posgres=#`表示您在容器内:
    ```
    $ docker container exec -it db1 psql -U postgres
    ```
15.  创建一个包含两列的表格:`serial`类型的`ID`和`json`类型的`info`:
    ```
    CREATE TABLE events (ID serial NOT NULL PRIMARY KEY, info json NOT NULL);
    ```
16.  将第一个例子输出的第一行`JSON`插入表格:
    ```
    INSERT INTO events (info) VALUES ('{"status":"create","id":"43903b966123a7c491b50116b40827daa03da 5d350f8fef2a690fc4024547ce2","from":"ubuntu:14.04","Type":"container","Action":"create","Actor":{"ID":"43903b966123a7c49 1b50116b40827daa03da5d350f8fef2a690fc4024547ce2","Attributes":{"image":"ubuntu:14.04","name":"upbeat_johnson"}},"scope":"local","time":1592516703,"timeNano":1592516703507582404}');
    ```
17.  Verify that the row is saved in the database by typing the following SQL statement:
    ```
    select * from events;
    ```
    您应该得到如下输出:
    ![Figure 7.13: Verifying that the row is saved in the database ](img/B15021_07_13.jpg)
    图 7.13:验证该行是否保存在数据库中
18.  Insert Docker events into the `events` table using the SQL `insert` command.
    注意
    请参考位于[https://packt.live/2ZKfGgB](https://packt.live/2ZKfGgB)的`events.txt`文件，使用`insert`命令插入 Docker 事件。
    您应该得到如下输出:
    ![Figure 7.14: Inserting multiple rows in the database  ](img/B15021_07_14.jpg)
    图 7.14:在数据库中插入多行
    从这个输出中，很明显有 11 个事件被成功地插入到 PostgreSQL 数据库中。
19.  Run the following three queries one by one.
    **查询 1** :
    ```
    SELECT * FROM events WHERE info ->> 'status' = 'pull';
    ```
    输出如下所示:
    ![Figure 7.15: Output of Query 1 ](img/B15021_07_08.jpg)
图 7.15:查询 1 的输出
**查询 2** :
```
SELECT * FROM events WHERE info ->> 'status' = 'destroy';
```
输出如下所示:
![Figure 7.16: Output of Query 2 ](img/B15021_07_16.jpg)
图 7.16:查询 2 的输出
**查询 3** :
```
SELECT info ->> 'id' as id FROM events WHERE info ->> 'status'=     'destroy';
```
输出如下所示:
![Figure 7.17: Output of Query 3 ](img/B15021_07_17.jpg)
图 7.17:查询 3 的输出
在本练习中，您学习了如何记录和监视容器，如何使用 SQL 语句查询容器的事件，以及如何获取事件的 JSON 输出并保存在 PostgreSQL 数据库中。您还学习了 JSON 输出结构，并学习了如何查询它。
## 活动 7.02:与主机共享 NGINX 日志文件
**解决方案**:
1.  Verify that you do not have the `/var/mylogs` folder on your host by running the following command:
    ```
    $cd /var/mylogs
    ```
    您应该得到如下输出:
    ```
    Bash: cd: /var/mylogs: No such file or directory
    ```
2.  Run a container based on the NGINX image. Specify the path of the shared volumes on the host and inside the container in the `run` command. Inside the container, NGINX uses the `/var/log/nginx` path for the log files. Specify the path on the host as `/var/mylogs`:
    ```
    $docker container run -d -v /var/mylogs:/var/log/nginx nginx
    ```
    如果本地没有映像，Docker 引擎将自动提取映像:
    ![Figure 7.18: Output of the docker run command  ](img/B15021_07_18.jpg)
    图 7.18:Docker 运行命令的输出
3.  Go to the path of `/var/mylogs`. List all the files in that directory:
    ```
    $cd /var/mylogs
    $ls
    ```
    你应该在那里找到两个文件:
    ```
    access.log         error.log
    ```
4.  (Optional) If no errors were generated, the two files will be empty. You check the contents by using the `cat` Linux command or by using the `tail` Linux command. As we used the `cat` command before, let's use the `tail` command for this example:
    ```
    $tail -f *.log
    ```
    您应该得到如下输出:
    ```
    ==>  access.log    error.log   <==
    ```
    由于该 NGINX 服务器未产生任何错误或未被访问，文件当前为空。但是，如果 NGINX 在任何时刻崩溃，产生的错误将保存在`error.log`中。
在本练习中，您学习了如何将容器的日志文件共享给主机。您使用的是 NGINX 服务器，所以如果它崩溃了，您可以从它的日志文件中追踪发生了什么。
# 8。服务发现
## 活动 8.01:利用詹金斯和索纳库
**解决方案**:
1.  Install SonarQube and run it as a container using the following command: