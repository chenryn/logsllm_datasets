{
  if (param_1 != (void **)0x0) {
    FUN_0040ea49(param_1,7);
    FUN_0040ea49(param_1 + 7,7);
    FUN_0040ea49(param_1 + 0xe,0xc);
    FUN_0040ea49(param_1 + 0x1a,0xc);
    FUN_0040ea49(param_1 + 0x26,2);
    FID_conflict__free(param_1[0x28]);
    FID_conflict__free(param_1[0x29]);
    FID_conflict__free(param_1[0x2a]);
    FUN_0040ea49(param_1 + 0x2d,7);
    FUN_0040ea49(param_1 + 0x34,7);
    FUN_0040ea49(param_1 + 0x3b,0xc);
    FUN_0040ea49(param_1 + 0x47,0xc);
    FUN_0040ea49(param_1 + 0x53,2);
    FID_conflict__free(param_1[0x55]);
    FID_conflict__free(param_1[0x56]);
    FID_conflict__free(param_1[0x57]);
    FID_conflict__free(param_1[0x58]);
  }
  return;
}
short * __cdecl FUN_0040eb65(short *param_1,short *param_2)
{
  short sVar1;
  short sVar2;
  short *psVar3;
  if (*param_1 != 0) {
    do {
      if (*param_2 != 0) {
        sVar1 = *param_1;
        psVar3 = param_2;
        sVar2 = *param_2;
        do {
          if (sVar2 == sVar1) {
            return param_1;
          }
          psVar3 = psVar3 + 1;
          sVar2 = *psVar3;
          sVar1 = *param_1;
        } while (sVar2 != 0);
      }
      param_1 = param_1 + 1;
    } while (*param_1 != 0);
  }
  return (short *)0x0;
}
// WARNING: Function: __alloca_probe_16 replaced with injection: alloca_probe
void __cdecl
FUN_0040ebb3(undefined4 *param_1,DWORD param_2,LPCSTR param_3,int param_4,LPWORD param_5,
            uint param_6,int param_7)
{
  uint uVar1;
  int cchSrc;
  int *piVar2;
  int *lpSrcStr;
  int local_20;
  int local_1c;
  char local_14;
  int local_10;
  uint local_c;
  uint local_8;
  local_8 = DAT_0041e004 ^ (uint)&stack0xfffffffc;
  FUN_00405ed6(&local_20,param_1);
  if (param_6 == 0) {
    param_6 = *(uint *)(local_1c + 8);
  }
  local_10 = FUN_0040e0f3(param_6,(uint)(param_7 != 0) * 8 + 1,param_3,param_4,(LPWSTR)0x0,0);
  if (local_10 == 0) goto LAB_0040ec92;
  local_c = local_10 * 2;
  uVar1 = -(uint)(local_c < local_c + 8) & local_c + 8;
  if (uVar1 == 0) {
    lpSrcStr = (int *)0x0;
  }
  else {
    if (uVar1 < 0x401) {
      piVar2 = (int *)&stack0xffffffd4;
      lpSrcStr = (int *)&stack0xffffffd4;
      if ((undefined *)register0x00000010 != (undefined *)0x2c) {
LAB_0040ec4c:
        lpSrcStr = piVar2 + 2;
      }
    }
    else {
      lpSrcStr = (int *)__malloc_base(uVar1);
      if (lpSrcStr != (int *)0x0) {
        *lpSrcStr = 0xdddd;
        piVar2 = lpSrcStr;
        goto LAB_0040ec4c;
      }
    }
  }
  if (lpSrcStr != (int *)0x0) {
    FUN_00402e50(lpSrcStr,0,local_c);
    cchSrc = FUN_0040e0f3(param_6,1,param_3,param_4,(LPWSTR)lpSrcStr,local_10);
    if (cchSrc != 0) {
      GetStringTypeW(param_2,(LPCWSTR)lpSrcStr,cchSrc,param_5);
    }
  }
  FUN_0040ecb8((int)lpSrcStr);
LAB_0040ec92:
  if (local_14 != 0) {
    *(uint *)(local_20 + 0x350) = *(uint *)(local_20 + 0x350) & 0xfffffffd;
  }
  FUN_00401f78();
  return;
}
void __cdecl FUN_0040ecb8(int param_1)
{
  if ((param_1 != 0) && (*(int *)(param_1 + -8) == 0xdddd)) {
    FID_conflict__free((int *)(param_1 + -8));
  }
  return;
}
// Library Function - Single Match
// Name: ___acrt_add_locale_ref
// Library: Visual Studio 2015 Release
void __cdecl ___acrt_add_locale_ref(int param_1)
{
  int *piVar1;
  int **ppiVar2;
  int iVar3;
  LOCK();
  *(int *)(param_1 + 0xc) = *(int *)(param_1 + 0xc) + 1;
  piVar1 = *(int **)(param_1 + 0x7c);
  if (piVar1 != (int *)0x0) {
    LOCK();
    *piVar1 = *piVar1 + 1;
  }
  piVar1 = *(int **)(param_1 + 0x84);
  if (piVar1 != (int *)0x0) {
    LOCK();
    *piVar1 = *piVar1 + 1;
  }
  piVar1 = *(int **)(param_1 + 0x80);
  if (piVar1 != (int *)0x0) {
    LOCK();
    *piVar1 = *piVar1 + 1;
  }
  piVar1 = *(int **)(param_1 + 0x8c);
  if (piVar1 != (int *)0x0) {
    LOCK();
    *piVar1 = *piVar1 + 1;
  }
  ppiVar2 = (int **)(param_1 + 0x28);
  iVar3 = 6;
  do {
    if ((ppiVar2[-2] != (int *)&DAT_0041e200) && (piVar1 = *ppiVar2, piVar1 != (int *)0x0)) {
      LOCK();
      *piVar1 = *piVar1 + 1;
    }
    if ((ppiVar2[-3] != (int *)0x0) && (piVar1 = ppiVar2[-1], piVar1 != (int *)0x0)) {
      LOCK();
      *piVar1 = *piVar1 + 1;
    }
    ppiVar2 = ppiVar2 + 4;
    iVar3 = iVar3 + -1;
  } while (iVar3 != 0);
  ___acrt_locale_add_lc_time_reference(*(undefined ***)(param_1 + 0x9c));
  return;
}
// Library Function - Single Match
// Name: ___acrt_free_locale
// Library: Visual Studio 2015 Release
void __cdecl ___acrt_free_locale(void *param_1)
{
  int *_Memory;
  void **ppvVar1;
  int **ppiVar2;
  int local_8;
  if ((((*(undefined ***)((int)param_1 + 0x88) != (undefined **)0x0) &&
       (*(undefined ***)((int)param_1 + 0x88) != &PTR_DAT_0041e728)) &&
      (*(int **)((int)param_1 + 0x7c) != (int *)0x0)) && (**(int **)((int)param_1 + 0x7c) == 0)) {
    _Memory = *(int **)((int)param_1 + 0x84);
    if ((_Memory != (int *)0x0) && (*_Memory == 0)) {
      FID_conflict__free(_Memory);
      ___acrt_locale_free_monetary(*(int *)((int)param_1 + 0x88));
    }
    _Memory = *(int **)((int)param_1 + 0x80);
    if ((_Memory != (int *)0x0) && (*_Memory == 0)) {
      FID_conflict__free(_Memory);
      ___acrt_locale_free_numeric(*(void ***)((int)param_1 + 0x88));
    }
    FID_conflict__free(*(void **)((int)param_1 + 0x7c));
    FID_conflict__free(*(void **)((int)param_1 + 0x88));
  }
  if ((*(int **)((int)param_1 + 0x8c) != (int *)0x0) && (**(int **)((int)param_1 + 0x8c) == 0)) {
    FID_conflict__free((void *)(*(int *)((int)param_1 + 0x90) + -0xfe));
    FID_conflict__free((void *)(*(int *)((int)param_1 + 0x94) + -0x80));
    FID_conflict__free((void *)(*(int *)((int)param_1 + 0x98) + -0x80));
    FID_conflict__free(*(void **)((int)param_1 + 0x8c));
  }
  ___acrt_locale_free_lc_time_if_unreferenced(*(undefined ***)((int)param_1 + 0x9c));
  ppvVar1 = (void **)((int)param_1 + 0xa0);
  local_8 = 6;
  ppiVar2 = (int **)((int)param_1 + 0x28);
  do {
    if (((ppiVar2[-2] != (int *)&DAT_0041e200) && (_Memory = *ppiVar2, _Memory != (int *)0x0)) &&
       (*_Memory == 0)) {
      FID_conflict__free(_Memory);
      FID_conflict__free(*ppvVar1);
    }
    if (((ppiVar2[-3] != (int *)0x0) && (_Memory = ppiVar2[-1], _Memory != (int *)0x0)) &&
       (*_Memory == 0)) {
      FID_conflict__free(_Memory);
    }
    ppvVar1 = ppvVar1 + 1;
    ppiVar2 = ppiVar2 + 4;
    local_8 = local_8 + -1;
  } while (local_8 != 0);
  FID_conflict__free(param_1);
  return;
}
// Library Function - Single Match
// Name: ___acrt_locale_add_lc_time_reference
// Library: Visual Studio 2015 Release
undefined * __cdecl ___acrt_locale_add_lc_time_reference(undefined **param_1)
{
  undefined *puVar1;
  if ((param_1 != (undefined **)0x0) && (param_1 != &PTR_DAT_004184d8)) {
    LOCK();
    param_1 = param_1 + 0x2c;
    puVar1 = *param_1;
    *param_1 = *param_1 + 1;
    return puVar1 + 1;
  }
  return (undefined *)0x7fffffff;
}
// Library Function - Single Match
// Name: ___acrt_locale_free_lc_time_if_unreferenced
// Library: Visual Studio 2015 Release
void __cdecl ___acrt_locale_free_lc_time_if_unreferenced(undefined **param_1)
{
  if (((param_1 != (undefined **)0x0) && (param_1 != &PTR_DAT_004184d8)) &&
     (param_1[0x2c] == (undefined *)0x0)) {
    ___acrt_locale_free_time(param_1);
    FID_conflict__free(param_1);
  }
  return;
}
// Library Function - Single Match
// Name: ___acrt_locale_release_lc_time_reference
// Library: Visual Studio 2015 Release
undefined * __cdecl ___acrt_locale_release_lc_time_reference(undefined **param_1)
{
  undefined *puVar1;
  if ((param_1 != (undefined **)0x0) && (param_1 != &PTR_DAT_004184d8)) {
    LOCK();
    param_1 = param_1 + 0x2c;
    puVar1 = *param_1;
    *param_1 = *param_1 + -1;
    return puVar1 + -1;
  }
  return (undefined *)0x7fffffff;
}
// Library Function - Single Match
// Name: ___acrt_release_locale_ref
// Library: Visual Studio 2015 Release
void __cdecl ___acrt_release_locale_ref(int param_1)
{
  int *piVar1;
  int **ppiVar2;
  int iVar3;
  if (param_1 != 0) {
    LOCK();
    *(int *)(param_1 + 0xc) = *(int *)(param_1 + 0xc) + -1;
    piVar1 = *(int **)(param_1 + 0x7c);
    if (piVar1 != (int *)0x0) {
      LOCK();
      *piVar1 = *piVar1 + -1;
    }
    piVar1 = *(int **)(param_1 + 0x84);
    if (piVar1 != (int *)0x0) {
      LOCK();
      *piVar1 = *piVar1 + -1;
    }
    piVar1 = *(int **)(param_1 + 0x80);
    if (piVar1 != (int *)0x0) {
      LOCK();
      *piVar1 = *piVar1 + -1;
    }
    piVar1 = *(int **)(param_1 + 0x8c);
    if (piVar1 != (int *)0x0) {
      LOCK();
      *piVar1 = *piVar1 + -1;
    }
    ppiVar2 = (int **)(param_1 + 0x28);
    iVar3 = 6;
    do {
      if ((ppiVar2[-2] != (int *)&DAT_0041e200) && (piVar1 = *ppiVar2, piVar1 != (int *)0x0)) {
        LOCK();
        *piVar1 = *piVar1 + -1;
      }
      if ((ppiVar2[-3] != (int *)0x0) && (piVar1 = ppiVar2[-1], piVar1 != (int *)0x0)) {
        LOCK();
        *piVar1 = *piVar1 + -1;
      }
      ppiVar2 = ppiVar2 + 4;
      iVar3 = iVar3 + -1;
    } while (iVar3 != 0);
    ___acrt_locale_release_lc_time_reference(*(undefined ***)(param_1 + 0x9c));
  }
  return;
}
// WARNING: Function: __SEH_prolog4 replaced with injection: SEH_prolog4
// WARNING: Function: __SEH_epilog4 replaced with injection: EH_epilog3
undefined ** FUN_0040efa3(void)
{
  code *pcVar1;
  uint uVar2;
  undefined **ppuVar3;
  uVar2 = FUN_0040b5c7();
  if (((*(uint *)(uVar2 + 0x350) & DAT_0041e780) == 0) ||
     (ppuVar3 = *(undefined ***)(undefined **)(uVar2 + 0x4c), ppuVar3 == (undefined **)0x0)) {
    ___acrt_lock(4);
    ppuVar3 = __updatetlocinfoEx_nolock((undefined **)(uVar2 + 0x4c),DAT_0041f298);
    FUN_0040f003();
    if (ppuVar3 == (undefined **)0x0) {
      FUN_00409f3e();
      pcVar1 = (code *)swi(3);
      ppuVar3 = (undefined **)(*pcVar1)();
      return ppuVar3;
    }
  }
  return ppuVar3;
}
void FUN_0040f003(void)
{
  ___acrt_unlock(4);
  return;
}
// Library Function - Single Match
// Name: __updatetlocinfoEx_nolock
// Library: Visual Studio 2015 Release
undefined ** __cdecl __updatetlocinfoEx_nolock(undefined **param_1,undefined **param_2)
{
  undefined **ppuVar1;
  if ((param_2 == (undefined **)0x0) || (param_1 == (undefined **)0x0)) {
    param_2 = (undefined **)0x0;
  }
  else {
    ppuVar1 = (undefined **)*param_1;
    if (ppuVar1 != param_2) {
      *(undefined ***)param_1 = param_2;
      ___acrt_add_locale_ref((int)param_2);
      if (((ppuVar1 != (undefined **)0x0) &&
          (___acrt_release_locale_ref((int)ppuVar1), ppuVar1[3] == (undefined *)0x0)) &&
         (ppuVar1 != &PTR_DAT_0041e140)) {
        ___acrt_free_locale(ppuVar1);
      }
    }
  }
  return param_2;
}
// Library Function - Single Match
// Name: __recalloc_base
// Library: Visual Studio 2015 Release