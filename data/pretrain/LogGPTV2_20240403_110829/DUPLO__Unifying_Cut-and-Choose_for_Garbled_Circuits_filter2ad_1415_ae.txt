∙ 𝐶′ = 𝐶, or
∙ 𝐶 = 𝐶0 ⋙ 𝐶1 and 𝐶′ is a sub-circuit of 𝐶0 or 𝐶1, or
∙ 𝐶 = 𝐅𝐢𝐫𝐬𝐭(𝐶0) and 𝐶′ is a sub-circuit of 𝐶0.
Example 1. To illustrate our circuit notation, consider the
function 𝑓((𝑥, 𝑦), 𝑧) = (𝑥∧ 𝑦, 𝑦 → 𝑧), where 𝑦 → 𝑧 ≡ ¬𝑦∨ 𝑧 is
the logical implication operation. First we deﬁne an operation
153
𝑥
𝑦
𝑧
A
D
U
↑ D
↑
𝐀𝐧𝐝
(𝑥 ∧ 𝑦)
∙ 𝙶𝙴𝚟𝚊𝚕( ̃𝐶, ̃𝑥) = 𝑦: The garbled circuit evaluation algo-
rithm takes a garbled circuit ̃𝐶 and a garbled input ̃𝑥 as
input, and it produces a boolean vector 𝑦 as output.
D ↑
↑
(𝑦 → 𝑧)
𝐈𝐦𝐩
Deﬁnition 6 (Correctness and security). For a garbling
scheme (𝙶𝚊𝚛𝚋𝚕𝚎, 𝙶𝙴𝚟𝚊𝚕), we say that
Fig. 5. The circuit that computes the function 𝑓((𝑥, 𝑦), 𝑧) = (𝑥 ∧ 𝑦, 𝑦 → 𝑧).
𝐒𝐞𝐜𝐨𝐧𝐝 on circuits such that 𝐒𝐞𝐜𝐨𝐧𝐝(𝐶) is a circuit that takes
as input a wire bundle (𝑢, 𝑣) and produces as output a bundle
(𝑢, 𝑤), where 𝑣 is the input of 𝐶 and 𝑤 is the output of 𝐶:
𝐒𝐞𝐜𝐨𝐧𝐝(𝐶) = 𝐒𝐰𝐚𝐩 ⋙ 𝐅𝐢𝐫𝐬𝐭(𝐶) ⋙ 𝐒𝐰𝐚𝐩
Since 𝑥 ↑ 𝑥 = ¬𝑥,
the circuit 𝐍𝐨𝐭 = 𝐃𝐮𝐩 ⋙ 𝐍𝐀𝐧𝐝
computes the negation of an input bit, and the circuit 𝐀𝐧𝐝 =
𝐍𝐀𝐧𝐝 ⋙ 𝐍𝐨𝐭 = 𝐍𝐀𝐧𝐝 ⋙ 𝐃𝐮𝐩 ⋙ 𝐍𝐀𝐧𝐝 computes the
function (𝑥, 𝑦) ↦ (𝑥∧𝑦). Since 𝑦 → 𝑧 = (¬𝑦)∨𝑧 = 𝑦↑(¬𝑧), the
circuit 𝐈𝐦𝐩 = 𝐒𝐞𝐜𝐨𝐧𝐝(𝐍𝐨𝐭) ⋙ 𝐍𝐀𝐧𝐝 computes the function
(𝑦, 𝑧) ↦ (𝑦 → 𝑧). Putting them together, we obtain a circuit
𝐶 = 𝐅𝐢𝐫𝐬𝐭(𝐒𝐞𝐜𝐨𝐧𝐝(𝐃𝐮𝐩) ⋙ 𝐀𝐬𝐬𝐨𝐜) ⋙ 𝐔𝐧𝐚𝐬𝐬𝐨𝐜
⋙ 𝐅𝐢𝐫𝐬𝐭(𝐀𝐧𝐝) ⋙ 𝐒𝐞𝐜𝐨𝐧𝐝(𝐈𝐦𝐩)
for the function 𝑓((𝑥, 𝑦), 𝑧) = (𝑥 ∧ 𝑦, 𝑦 → 𝑧), illustrated graph-
ically in Fig. 5. Notice how the ﬁrst part of the computation
consisting of the 𝐃𝐮𝐩, 𝐀𝐬𝐬𝐨𝐜 and 𝐔𝐧𝐚𝐬𝐬𝐨𝐜 gates is used to
route the input wires to the appropriate subcircuit.
Remark 1. With our circuit notation, a circuit with 𝑞 gates and
𝑝 wires can be represented using a string of size 𝑂(𝑞𝑑 log 𝑞),
where 𝑑 is the depth of the circuit. We can convert
the
traditional DAG-like circuit notation to our inductive circuit
representation by organizing gates into layers according to
their depth. For a layer with 𝑞𝑖 gates, the computation of
these gates can be described using 𝑞𝑖 log 𝑞𝑖 many 𝐅𝐢𝐫𝐬𝐭 and
𝐒𝐞𝐜𝐨𝐧𝐝 operations together with 𝑞𝑖 basic circuits. To rearrange
wires after a layer of 𝑞𝑖 gates, we can add 𝑂(𝑞𝑖 log 𝑞𝑖) many
𝐒𝐰𝐚𝐩, 𝐀𝐬𝐬𝐨𝐜, and 𝐔𝐧𝐚𝐬𝐬𝐨𝐜 gates. The entire circuit can be
concatenated from layers using ⋙ operations. So the size of
such representation is 𝑂(𝑞𝑑 log 𝑞).
∙
∙
is correct
if 𝙶𝙴𝚟𝚊𝚕(𝙶𝚊𝚛𝚋𝚕𝚎(𝐶, 𝑥)) = 𝐶(𝑥) for all
it
circuits 𝐶 and boolean vectors 𝑥;
it is (selectively) secure if there exists a PPT simulator
𝚂𝚒𝚖𝚞𝚕𝚊𝚝𝚎(⋅, ⋅) such that for any circuit 𝐶 and input 𝑥, the
distributions 𝚂𝚒𝚖𝚞𝚕𝚊𝚝𝚎(𝐶, 𝐶(𝑥)) and 𝙶𝚊𝚛𝚋𝚕𝚎(𝐶, 𝑥) are
computationally indistinguishable.
Strictly speaking, a simulator should not gain access to a
circuit, and instead, it should take the topology of a circuit
as input. To simplify discussion, we use the actual circuit
as its topology representation rather than introducing new
notations. This can be justiﬁed by the facts that 1) there is only
one primitive gate in our circuit notation, namely the NAND
gate, and 2) our simulator (deﬁned later) does not exploit the
function computed by the NAND gate.
i) Symbolic garbled circuit: We consider garbling
schemes where the output of all algorithms 𝙶𝚊𝚛𝚋𝚕𝚎, 𝙶𝙴𝚟𝚊𝚕,
and 𝚂𝚒𝚖𝚞𝚕𝚊𝚝𝚎 are expressions in our symbolic language
𝐄𝐱𝐩. This will allow us to analyze both the correctness
and security properties of the scheme in a purely symbolic
manner, without resorting to the power (and complications)
of the full computational model of cryptography. The circuit
garbling construction described here is essentially the one with
the point-and-permute technique as described in [36]. In this
section we present 𝙶𝚊𝚛𝚋𝚕𝚎 and 𝙶𝙴𝚟𝚊𝚕, and we will deﬁne
𝚂𝚒𝚖𝚞𝚕𝚊𝚝𝚎 and prove security in the next section.
Let 𝜖 denote a special symbolic expression whose compu-
tational evaluation is the empty string. We slightly change the
notation of atomic key symbols by using both subscripts and
superscripts to index them: an atomic key is a symbol 𝖪𝑗
𝑖
where 𝑖 ∈ {1, 2, …} and 𝑗 ∈ {0, 1}. With this notation, the
set of atomic keys is now 𝐊 = {𝖪0
, …}. To hide
1
the input of a circuit, the garbling algorithm encodes values
carried on wires using labels of shape ⦇𝔹, ⦇𝕂, 𝕂⦈⦈, one for
each wire. We call a bundle of labels a label expression.
Formally, we ﬁrst deﬁne a function 𝙻𝚊𝚋𝚎𝚕 that on input a
, 𝖪0
2
, 𝖪1
1
, 𝖪1
2
IV. SYMBOLIC GARBLING
bundle shape 𝑠, outputs a collection of wire labels:
Let us ﬁrst recall the deﬁnition of circuit garbling schemes
in the computational setting [9], [24].
Deﬁnition 5 (Syntax). A garbling scheme is deﬁned by a pair
of PPT algorithms (𝙶𝚊𝚛𝚋𝚕𝚎, 𝙶𝙴𝚟𝚊𝚕)3 where
∙ 𝙶𝚊𝚛𝚋𝚕𝚎(𝐶, 𝑥) = ( ̃𝐶, ̃𝑥): The circuit garbling algorithm
takes a circuit 𝐶 and a boolean vector 𝑥 as input, and it
produces a garbled circuit ̃𝐶 and a garbled input ̃𝑥.
3Usually
a
scheme
consists
algorithms
garbling
(𝙶𝙲𝚒𝚛𝚌𝚞𝚒𝚝, 𝙶𝙸𝚗𝚙𝚞𝚝, 𝙶𝙴𝚟𝚊𝚕) such that 𝙶𝙲𝚒𝚛𝚌𝚞𝚒𝚝(𝐶) = ( ̃𝐶, 𝐿) produces
̃𝐶 and labels 𝐿 for the input wires, and 𝙶𝙸𝚗𝚙𝚞𝚝(𝐿, 𝑥) = ̃𝑥
a garbled circuit
produces garbled input ̃𝑥 using the labels. Such a syntax is useful to deﬁne
adaptive security. However, we choose a simpliﬁed syntax of two algorithms
that is suﬃcient to deﬁne selective security and convenient for our analysis.
three
of
𝙻𝚊𝚋𝚎𝚕(◦) = (𝖡ℎ, (𝖪0
, 𝖪1
ℎ)) where
ℎ
ℎ ← new
𝙻𝚊𝚋𝚎𝚕((𝑠, 𝑡)) = (𝙻𝚊𝚋𝚎𝚕(𝑠), 𝙻𝚊𝚋𝚎𝚕(𝑡))
The instruction ℎ ← new picks a fresh index ℎ (e.g., using a
counter), used to deﬁne a new symbolic label (𝖡ℎ, (𝖪0
ℎ)).
A garbled input has two parts: an encoded input expression
that is a bundle of shape (𝔹, 𝕂), and an output mask expression
that is a bundle of bits. The function 𝙶𝙴𝚗𝚌 encodes a boolean
vector using bits and keys in a label expression:
, 𝖪1
ℎ
𝙶𝙴𝚗𝚌((𝖡, (𝖪0, 𝖪1)), 0) = (𝖡, 𝖪0)
𝙶𝙴𝚗𝚌((𝖡, (𝖪0, 𝖪1)), 1) = (¬𝖡, 𝖪1)
𝙶𝙴𝚗𝚌((𝐿0, 𝐿1), (𝑥0, 𝑥1)) = (𝙶𝙴𝚗𝚌(𝐿0, 𝑥0), 𝙶𝙴𝚗𝚌(𝐿1, 𝑥1))
154
The output masks are used to decode an encoded expression.
It is formed by the bits in a label expression:
𝙶𝙼𝚊𝚜𝚔((𝖡, (𝖪0, 𝖪1))) = 𝖡
𝙶𝙼𝚊𝚜𝚔((𝐿0, 𝐿1)) = (𝙶𝙼𝚊𝚜𝚔(𝐿0), 𝙶𝙼𝚊𝚜𝚔(𝐿1))
The core of the garbling algorithm is a recursive function
𝙶𝚋, which takes as input a circuit and a label expression for the
input wires, and outputs a symbolic expression of the garbled
circuit and a label expression for the output wires.
𝙶𝚋 :: Circuit(𝑠, 𝑡) × 𝐄𝐱𝐩 → 𝐄𝐱𝐩 × 𝐄𝐱𝐩
𝙶𝚋(𝐒𝐰𝐚𝐩, (𝑢, 𝑣)) = 𝜖, (𝑣, 𝑢)
𝙶𝚋(𝐀𝐬𝐬𝐨𝐜, (𝑢, (𝑣, 𝑤))) = 𝜖, ((𝑢, 𝑣), 𝑤)
𝙶𝚋(𝐔𝐧𝐚𝐬𝐬𝐨𝐜, ((𝑢, 𝑣), 𝑤)) = 𝜖, (𝑢, (𝑣, 𝑤))
𝙶𝚋(𝐶0 ⋙ 𝐶1, 𝑢) = ( ̃𝐶0, ̃𝐶1), 𝑣 where
̃𝐶0, 𝑤 = 𝙶𝚋(𝐶0, 𝑢)
̃𝐶1, 𝑣 = 𝙶𝚋(𝐶1, 𝑤)
𝙶𝚋(𝐅𝐢𝐫𝐬𝐭(𝐶), (𝑢, 𝑤)) = ̃𝐶, (𝑣, 𝑤) where
̃𝐶, 𝑣 = 𝙶𝚋(𝐶, 𝑢)
𝙶𝚋(𝐃𝐮𝐩, (𝑏, (𝑘0, 𝑘1))) = 𝜖, 𝑤 where
𝑤 = ((𝑏, 𝖦0(𝑘0), 𝖦0(𝑘1)), (𝑏, 𝖦1(𝑘0), 𝖦1(𝑘1)))
𝙶𝚋(𝐍𝐀𝐧𝐝, ((𝑏𝑖, (𝑘0
, 𝑘1
𝑖 )), (𝑏𝑗, (𝑘0
𝑗
, 𝑘1
𝑗)))) = ̃𝐶, 𝑤 where
𝑖
ℎ ← new
̃𝐶 = 𝜋[𝑏𝑖](𝜋[𝑏𝑗](⦃⦃(¬𝖡ℎ, 𝖪1
ℎ)⦄𝑘0
𝜋[𝑏𝑗](⦃⦃(¬𝖡ℎ, 𝖪1
ℎ)⦄𝑘0
𝑗
⦄𝑘0
⦄𝑘1
𝑖
𝑖
𝑗
ℎ)⦄𝑘1
,⦃⦃(¬𝖡ℎ, 𝖪1
⦄𝑘0
⦄𝑘1
,⦃⦃(𝖡ℎ, 𝖪0
ℎ)⦄𝑘1
𝑗
𝑖
),
))
𝑗
𝑖
𝑤 = (𝖡ℎ, (𝖪0
ℎ
, 𝖪1