implement such checks, moving enforcement to a dedi-
cated module can eliminate redundant code and reduce
driver complexity (§3.3, “Attacks on USB drivers”).
A related strategy in Cinch modifies apparent device
behavior, either forcing adherence to a strict subset of the
USB spec in order to match driver expectations, or else
relaxing the USB spec by recognizing and fixing device
“quirks”—behavior that is noncompliant but known to be
benign—so that drivers need not do so.1 This is closely
related to traffic normalization [103], in which a firewall
converts traffic to a canonical representation to aid analy-
sis and ensure that decisions are consistent with end-host
protocol implementations.
Cinch’s compliance Policy. This Policy enforces device
compliance with USB specifications. To build it, we man-
ually processed the USB 2 and 3 specifications [57, 58],
along with the specifications of five device classes (mass
storage, HID, printer, power, and debug) [59]. The result
is a module that monitors device states and transitions,
and enforces invariants on individual messages and entire
transactions. As a simple example, the compliance Policy
checks that device-supplied identification strings are well
formed—that is, that they comprise a valid UTF-16 string
of acceptable length—and rewrites noncompliant strings.
More complex state and transition checking is effected by
keeping persistent information about each device for the
duration of its connection.
Cinch’s compliance Policy is conservative in handling
noncompliance: if it cannot easily fix a device’s behav-
ior (for example, by rewriting identification strings as
described above), it assumes the device is malicious and
disables it.
Cinch’s assertion Policy. This Policy implements the
aforementioned relaxations and restrictions, by modifying
how Cinch’s compliance Policy regulates specific devices.
As examples, a user might specify that a particular de-
vice’s requests should be rewritten to work around buggy
firmware. Or Cinch can require that devices handled by
a certain driver must expose an interface that matches
a specified template, obviating bug-prone compatibility
checks in the driver’s code (§3.3).
1In practice, many non-malicious devices fail to comply with the specifi-
cation: the word “quirk” appears about once every 300 lines throughout
the 300 kLoC Linux USB stack (!), and nearly all the devices we tested
deviated from prescribed behavior in at least a small way.
6
402  25th USENIX Security Symposium 
USENIX Association
5.3 Containing devices
This category includes querying a user for information
about a newly connected device, restricting a device to
a subset of its functionality, and isolating devices in pri-
vate protection domains. Such defenses, which are useful
against attacks on driver and user software and can foil
masquerading attacks (§3.3), are forms of hotplug control.
They decide—say, by asking the user—whether a newly
connected device should be allowed to communicate with
the blue machine, and if so, what functionality should be
allowed. For example, Cinch might ask the user, “I see
you just connected a keyboard. Is this right?”
In practice, such decisions can be much more complex.
Recall from Section 2 that devices can define multiple
functions, each of which is a logically separate peripheral.
A careful user wishing to tether his or her laptop to a
friend’s phone could be informed of available function-
ality upon device connection, and choose to disallow the
phone’s storage function as a precaution against viruses.
Alternatively, the user might choose to connect the
phone’s file storage function to a separate protection
domain—a sandbox—with limited capabilities and a nar-
row interface to the blue machine. In this case, the sand-
box could scan files for viruses, and could expose a high-
level interface (e.g., an HTTP or NFS server) to the blue
machine. This approach leverages existing software de-
signed for interacting with untrusted machines (in this
case, a web or file browser), and can bypass many layers
of software in the blue machine; on the other hand, it
changes the interface to the device.
Cinch’s containment Policy. We implement a “surgical”
hotplug Policy: individual device functions can be al-
lowed or disallowed, and the blue machine never interacts
with disallowed devices. Cinch’s Gateway can also sand-
box whole devices or individual functions by redirecting
selected USB traffic to separate protection domains that
expose functionality to the blue machine through narrow
interfaces, as described above.
5.4 Encryption and authentication
To handle devices that eavesdrop on the bus or masquer-
ade as other devices, Cinch adapts well-known responses—
authentication and encryption—to USB. For example, a
user can disallow all keyboards except those having a cer-
tificate signed by a particular manufacturer. This prevents
a malicious device without such a certificate from acting
as a keyboard.
In more detail, a device authenticates to the Gateway
by leveraging a trust relationship. As examples, manu-
factures sign certificates and install them on devices, and
users are required to use devices whose certificates are
signed by a trusted manufacturer; or users follow a pairing
procedure as in Bluetooth [67] or GoodUSB [146], obvi-
ating a trusted manufacturer but adding a setup step. After
completing a key exchange, the device and host share an
encryption key. The user can then prevent masquerading
and eavesdropping by installing a policy that disallows
unauthenticated, untrusted, or unencrypted devices.
This arrangement raises several potential concerns: de-
velopment overhead to build new devices, computational
overhead for cryptography, and deployment on legacy
devices. Below, we describe a proof-of-concept design
that addresses these concerns. At a high level, the con-
cerns are addressed by, respectively, abundant support for
rapid development of embedded cryptographic applica-
tions [34, 36, 66], the speed of modern embedded pro-
cessors, and a physical adapter that adds cryptographic
functionality to legacy devices.
Proof-of-concept USB crypto support. To support au-
thentication and encryption, we designed a cryptographic
overlay protocol. This mechanism allows compatible de-
vices to communicate with the Gateway via a TLS session
that encapsulates all of their USB transfers.
To evaluate the crypto overlay, we built a crypto
adapter, a physical device that sits between unmodified
legacy devices and a host system running Cinch. The
crypto adapter acts as a USB host for the legacy device,
encapsulating and decapsulating the device’s USB traffic
inside a TLS session. To communicate this TLS-encrypted
traffic to the host system, the crypto adapter also acts as
a USB device attached to the host system, as we detail
below. We refer to the crypto adapter’s USB connection
to the legacy device as the “inner” connection, and its
connection to the host as the “outer” connection.
Two issues arise in designing the crypto overlay and
adapter. First, a TLS session requires a full duplex stream
transport, while USB’s communication primitives are
based on host-initiated polling (§2). This means that the
outer USB connection cannot directly encapsulate a TLS
session. Second, the Gateway does not implement a USB
stack, meaning that, on its own, it cannot communicate
with the crypto adapter via the outer USB connection.
To solve the first issue, Cinch uses an existing USB
class that exposes a full-duplex Ethernet interface [59];
this Ethernet-over-USB traffic is carried by the outer USB
connection. Then Cinch uses TCP over this Ethernet con-
nection as the stream abstraction for TLS, yielding an
indirect encapsulation of TLS in the outer USB connec-
tion.2 To solve the second issue, we observe that, with
the foregoing encapsulation, the Gateway need not handle
the outer USB connection. Instead, the red machine treats
the outer USB connection as an Ethernet device (thereby
terminating the outer USB connection), and it forwards
all packets it receives from that device to the Gateway via
2An alternate approach with less overhead than TCP-over-IP-over-
Ethernet-over-USB is to create a custom USB class providing a full-
duplex stream abstraction with less generality than Ethernet.
USENIX Association  
25th USENIX Security Symposium  403
7
the Tunnel. Meanwhile, these packets are just the TCP
stream carrying the TLS session, and thus the Gateway
can talk TLS to the crypto adapter without a USB stack.
Note that this arrangement differs from the way that
Cinch handles other USB devices. For unencrypted de-
vices, the Gateway receives USB transfers captured by the
red machine; it inspects these transfers and then forwards
them to the blue machine’s HCI. But here, the Gateway re-
ceives packets (which the red machine decapsulated) that
contain a TLS session. The Gateway decrypts to recover
USB transfers, which it inspects and forwards.
Cinch’s crypto Policy. Given devices implementing the
crypto overlay, Cinch can enforce policies that rule out
eavesdropping and masquerading by requiring authenti-
cated and encrypted devices, as described at the outset of
this section.
5.5 Logging and auditing
Logging is part of many defensive strategies: auditing
logs can reveal anomalous behavior that might indicate a
new attack. Moreover, logs can be used to develop new
signature-based defenses (§5.1).
Cinch’s logging Policy. Cinch’s Gateway can be con-
figured to log some or all traffic to and from the blue
machine. Cinch can also replay logged data; we used
this functionality to help develop attack signatures for
our security evaluation (§7.3). Furthermore, Cinch can be
configured to log to a remote server. This feature could
allow real-time analysis of data from many different blue
machines, for example in a corporate environment.
5.6 Extensions
Cinch enables usage scenarios beyond the ones described
above. One example is data exfiltration prevention, which
is often employed at the network level to address the
threat of data theft [104, 115, 117, 133, 134], but is gen-
erally considered a more difficult problem in the con-
text of USB [140]. By combining real-time remote audit-
ing (§5.5) with signature detection (§5.1), Cinch allows
administrators to apply exfiltration prevention policies to
USB devices.
Implementation
6
We describe the components and the communication paths
in our implementation of Cinch (§6.1). We also discuss
the Policies implemented in Cinch, utilities that we use
to create and test new exploits, and our method for de-
riving payload signatures (§6.2). Finally, we describe the
proof-of-concept crypto adapter (§5.4) that we use to
transparently provide encryption and authentication for
existing USB devices (§6.3).
6.1 Components and communication paths
The hypervisor (§4.1) is Linux with KVM, meaning that
virtual machines run in QEMU processes that are accel-
erated with virtualization hardware [68, 123]. In partic-
ular, Cinch requires hardware support for I/O virtualiza-
tion [70, 71]. We tested with Intel hardware, but KVM
also supports equivalent functionality from AMD.
The red machine runs Linux. It is configured to load
only the HCI and core drivers (§2); higher-level USB
drivers are not needed to capture USB transfers from
devices. (An exception is the case of the crypto overlay,
which requires a USB network driver; §5.4). The blue
machine is another VM and, as stated in Section 4.2, can
be any OS supported by QEMU. The Gateway runs as a
user-level process on the Linux-KVM hypervisor.
The Tunnel between the red machine and the Gateway
appears to both entities as a network device. The appeal of
this approach is that the Tunnel connects to the untrusted
part of the system (Figure 2, §4), and meanwhile IP stacks
have been hardened over decades. Furthermore, this lets
us leverage existing software for remotely accessing USB
devices over a network [60, 73, 106]. Our implementation
uses usbredir [73], which (on the red machine), captures
USB transfers, listens on a network socket, and uses a
custom protocol to encapsulate USB transfers inside a
TCP stream.
As a usbredir client, the Gateway receives usbredir
packets, filters or modifies them, and then, playing the
role of a usbredir server, delivers them to the QEMU pro-
cess running the blue machine. A module in QEMU is
the corresponding client; it decapsulates the USB trans-
fers (using usbredir) and injects them into a virtual host
controller created by QEMU and exposed to the blue
machine. From the virtual host controller, the USB trans-
fers travel into the blue machine’s HCI, with no software
modifications on the blue machine.
Our implementation of Cinch supports USB versions
through USB 3.
6.2 Gateway details
The Gateway is implemented in Rust [46]; it comprises
about 8 kSLoC. Its major modules are parsers for usbredir
packets and USB transfers, and a library that provides
abstractions for creating new Policies. This library is in-
spired by the Click modular router [109] and provides
domain-specific abstractions for USB (as examples, de-
multiplexing usbredir packets into USB transfers and fil-
tering those transfers). As in Click, the user organizes
modules into chains where one module’s output is the
next module’s input. Several such chains can be config-
ured to operate in parallel. Users configure module chains
with files in JSON format.
404  25th USENIX Security Symposium 
USENIX Association
8
OS
Windows 8.1
Linux 4.2.0
exploit identifier
01:01:00:C:4
01:01:00:C:5
03:00:00:C:16
03:00:00:C:17
09:00:00:C:9
CVE-2016-2184
CVE-2016-2185
CVE-2016-2186
CVE-2016-2187
CVE-2016-2188
CVE-2016-2384
CVE-2016-2782
CVE-2016-3136
CVE-2016-3137
CVE-2016-3138
CVE-2016-3139
CVE-2016-3140
CVE-2016-3951
exploit description
Audio device with non-existent streaming interface
Audio device with invalid streaming interface
HID device with invalid report usage page
HID device with invalid report usage page
Hub with invalid number of ports
prevention mechanism
Signature Policy⋆
Signature Policy⋆
Compliance Policy
Compliance Policy
Compliance Policy
Sound device with non-existent endpoint
RF remote control device with invalid interface or endpoint
Multimedia control device with invalid endpoint
Digitizer tablet device with invalid endpoint
I/O Warrior device with invalid endpoint
Audio device with invalid USB descriptor