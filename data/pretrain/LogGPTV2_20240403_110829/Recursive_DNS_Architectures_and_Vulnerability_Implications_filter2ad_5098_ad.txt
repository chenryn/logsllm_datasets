(and to provide some efﬁciencies in delegations), NSEC3 was
proposed. [31].
Recently DNSCurve [13] was proposed as an alternative
to DNSSEC. Relying on 255-bit elliptic-curve cryptography,
DNSCurve provides stronger integrity than DNSSEC’s 1024-
bit RSA forgery detection. And unlike DNSSEC, DNSCurve
does not publish the contents of secured zones, and therefore
does not require enumeration of the zone.
Both of these proposals provide cryptographic strength, but
only DNSSEC is fully implemented by the world’s DNS ven-
dors and is part of the installed based of recursive and author-
itative servers. But neither is in wide use. Both will require
adoption by the DNS operator community, ISPs, and other net-
works before becoming widespread.
Numerous short-term solutions have proliferated in this
vacuum. DNSSEC Lookaside Validation (DLV) [5] was pro-
posed as a partial implementation of DNSSEC, allowing the
designation of single entry points from which the DNS tree
can be search for signed delegation.
Other proposals have sought to secure the existing DNS
protocol by ﬁnding additional sources of entropy. DNS-
0x20 [15] uses variations in case formatting of qnames to
track transactions. Similarly, “Domain Name System (DNS)
Cookies” [1] uses additional option (an OPT RR) for tracking
sessions. These types of proposals are generally distinguished
by whether or not they require updates to the recursive and
authority server population, or just the recursives.
Randomized UDP source ports are another light weight
scheme that only recursives have to implement. First pro-
posed by DJ Bernstein, the practice became wide spread af-
ter the announcement of the Kaminsky-class DNS poisoning
attack. This approach, while conceptually light weight, can
have signiﬁcant resource costs on busy servers. Servers that
implement source port randomization have to potentially per-
form select(2) over large pools of open ﬁle descriptors—a
resource intensive operation [17]. As a result, source port ran-
domization may not be appropriate for some environments.
The work closest to our current study is A. Hubert’s DNS-
EXT study of forger resilience [2]. This comprehensive IETF
document describes the DNS poisoning problem and provided
preliminary mathematical modeling for determining the prob-
ability of poisoning. There were several aspects of poisoning
considered in our model, which where excluded from the IETF
draft. We plan to contribute our model and Appendix A to this
effort.
6 Conclusion and Future Work
To aid DNS implementors in judging implementation-
security tradeoffs between various interim solutions, we have
developed mathematical models to compare interim protection
techniques. We provided a complete DNS poisoning model
and compared it to previous models. We discussed architec-
tural tradeoffs in managing queries and why certain architec-
tural choices could cause nuanced security concerns. To illus-
trate these tradeoffs, we described weaknesses in actual im-
plementations and their implications.
Future directions of this work will consider performance,
complexity, and veriﬁability tradeoffs, while adhering to strict
security guidelines, in the implementation of DNS servers. We
will further consider the development costs associated with
various security techniques. Finally, we will further examine
how various protection deployments help or hinder the adop-
tion of more complete cryptographic solutions.
Acknowledgments
This material is based upon work supported in part by the
National Science Foundation under Grant No. 0627477 and
Grant No. 0831300, and the Department of Homeland Secu-
rity under Contract No. FA8750-08-2-0141. Any opinions,
ﬁndings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect the views of the National Science Foundation and the
Department of Homeland Security.
References
[1] Donald E. Eastlake 3rd.
Domain name system
(dns) cookies. http://tools.ietf.org/html/
draft-eastlake-dnsext-cookies-03, 2008.
[2] A. Hubert and R. van Mook.
for
forged an-
making DNS more
swers.
http://tools.ietf.org/html/
draft-ietf-dnsext-forgery-resilience,
2008.
Measures
resilient
against
[3] A. Szmit, M. Tomaszewski, and M. Szmit. Domain name
servers’s pseudo-random number generators and DNS
cache poisoning attack. Polish Journal of Environmental
Studies, 15(4C), 2006.
[4] Alexa. Alexa the web information company. http:
//www.alexa.com/, 2007.
[6] R. Arends. Protocol modiﬁcations for the dns secu-
rity extensions, rfc 4035. http://www.ietf.org/
rfc/rfc4035.txt, 2005.
[7] R. Arends, R. Austein, M. Larson, D. Massey, and
S. Rose.
Dns security introduction and require-
ments. http://www.ietf.org/rfc/rfc4033.
txt, March 2005.
[8] R. Arends, R. Austein, M. Larson, D. Massey, and
S. Rose. Resource records for the dns security exten-
sions. http://www.ietf.org/rfc/rfc4034.
txt, March 2005.
[9] D. Barr. Common dns operational and conﬁguration
errors. http://www.ietf.org/rfc/rfc1912.
txt, 1996.
[10] G. Barwood. Resolver side mitigations draft: dnsext-
http://www.ietf.org,
fr-resolver-mitigations.
September 2008.
[11] D.
Bernstein.
dnscache.
http://cr.yp.to/djbdns/dnscache.html, visited in Aug.
2008.
[12] D. J. Bernstein. Dns forgery. http://cr.yp.to/
djbdns/forgery.html, 2008.
[13] D. J. Bernstein.
Introduction to dnscurve. http://
dnscurve.org/, 2008.
[14] Computer Academic Underground. Cau-ex-2008-0003,
http://www.caughq.
bailiwicked domain.rb.
org/exploits/CAU-EX-2008-0003.txt,
2008.
[15] David Dagon, Manos Antonakakis, Paul Vixie, Tatuya
Jinmei, and Wenke Lee. Increased dns forgery resistance
through 0x20-bit encoding. In Proceedings of the 15th
ACM Conference on Computer and Communications Se-
curity (CCS 2008), October 2008.
[16] David Dagon, Niels Provos, Christopher P. Lee, and
Wenke Lee. Corrupted dns resolution paths: The rise of
a malicious resolution authority. In Proceedings of Net-
work and Distributed Security Symposium (NDSS ’08),
2008.
[17] David Dagon and Paul Vixie.
Setting dns’s hair
http://www.usenix.org/events/
on ﬁre.
sec08/tech/, 2008.
[18] R.
Elz
and
http://www.faqs.org/rfcs/rfc2181.html, July 1997.
R.
Bush.
[5] M. Andrews. The dnssec lookaside validation (dlv) dns
resource record, rfc 4431. http://www.ietf.org/
rfc/rfc4431.txt, 2006.
[19] Olafur Gudmundsson and Andrew Sullivan. DNS ex-
tensions (dnsext). http://www.ietf.org/html.
charters/dnsext-charter.html, 2008.
[20] IANA.
http://www.iana.org/assignments/port-numbers,
gust 2008.
Port
numbers.
Au-
[35] P. Flajolet and R. Sedgewick. Analytic Combinatorics.
Cambridge University Press, 2008.
[21] infobyte.
Isr-evilgrade
v1.0.0.
//www.infobyte.com.ar/down/
isr-evilgrade-Readme.txt, 2008.
http:
[36] R. Stanley. Enumerative Combinatorics. Cambridge
University Press, 1997.
[37] J. Stewart. DNS cache poisoning - the next generation.
http://www.lurhq.com/dnscache.pdf, 2003.
[38] Joe Stewart.
the next
generation.
http://www.secureworks.com/
research/articles/cachepoisoning, 2002.
Dns cache poisoning -
[39] Team Cymru.
IP to ASN mapping.
//www.team-cymru.org/Services/
ip-to-asn.html, 2008.
http:
[40] United States CERT. Various DNS service implemen-
tations generate multiple simultaneous queries for the
same resource record. VU 457875, November 2002.
[41] US-CERT. Multiple dns implementations vulnerable
to cache poisoning. http://www.kb.cert.org/
vuls/id/800113, 2008.
[42] US Department of Justice. Eugene e. kashpureff pleaded
http://www.usdoj.gov/criminal/
guilty.
cybercrime/kashpurepr.htm, 1998.
[43] Paul Vixie. DNS complexity, April 2007.
[44] M. Wendl. Collision probability between sets of random
variables. Statistics and Probability Letters, 64(3), 2003.
[45] Duanne Wessels.
randomness
https://www.dns-oarc.net/oarc/
Web-based dns
test.
services/dnsentropy, 2008.
[22] Internet
Systems
Consortium.
9
http://www.isc.org/index.pl?/sw/bind/arm95/, 2008.
administrator
reference
Bind
manual.
[23] Dan Kaminsky. Doxpara research. http://www.
doxpara.com, 2008.
[24] Dan Kaminsky.
Its the end of the cache as we know
http://www.doxpara.com/DMK_BO2K8.
it.
ppt, 2008.
[25] Amit Klein. BIND 8 DNS cache poisoning. http:
//www.trusteer.com/docs/bind8dns.html,
2007.
[26] Amit Klein. BIND 9 DNS cache poisoning. http:
//www.trusteer.com/docs/bind9dns.html,
2007.
[27] Amit Klein. OpenBSD DNS cache poisoning and multi-
ple OS predictable IP ID vulnerability. http://www.
trusteer.com/docs/dnsopenbsd.html, 2007.
[28] Amit Klein.
Windows DNS cache
poison-
http://www.trusteer.com/docs/
ing.
microsoftdns.html, 2007.
[29] Amit Klein.
PowerDNS recursor DNS cache poi-
http://www.trusteer.com/docs/
soning.
powerdnsrecursor.html, 2008.
[30] L. Dorrendorf, Z. Gutterman, B. Pinkas. Cryptanalysis
of the windows random number generator. In Proc. ACM
CCS, 2007.
[31] B. Laurie, G. Sisson, R. Arends, and D. Blacka. Dns
security (dnssec) hashed authenticated denial of exis-
tence. http://www.ietf.org/rfc/rfc5155.
txt, 2008.
[32] P. Mockapetris. Domain names - concepts and fa-
cilities. http://www.ietf.org/rfc/rfc1034.
txt, 1987.
[33] P. Mockapetris.
Domain names - implementation
and speciﬁcation. http://www.ietf.org/rfc/
rfc1035.txt, 1987.
[34] T. Nakata. Collision probability for an occupancy prob-
lem. Statistics & Probability Letters, 2008.
A Poison Probability Computation Script –
Ruby
The following is an implementation of the comprehensive
DNS poisoning model described in Section 3.
module CachePoisoning
class Recursive
def initialize(ports=4096, recursives=1, ids=2**16, auths=2.5,
rtt=0.1, pending=1, ox20=false)
@recursives = recursives # number of recursives
@ports = ports
@ids = ids
@auths = auths
@rtt = rtt
# P: number of used ports
# I: number of TXIDs
# N: number of authoritative name servers
# W: round trip time between the recursive
#
server and the authoritative
@pending = pending # D: number of simultaneous queries with
@ox20 = ox20
# the same QNAME birthday protection
# effectively sets D=1
# O: is 0x20 used (tOgGle CAse LaBEls)
end
def probability(attacker, time)
ex = time / @rtt
o = (@ox20) ? 2**12 : 1
i = @ids; p = @ports; n = @auths * @recursives; d = @pending
m = i*p*n*o
f = attacker.rate * @rtt
pf = (1 - (1.0/m))**(d*f)
pcs = 1 - (( pf )**ex)
end
end
class Attacker
attr_reader :rate
def initialize(rate=20E3)
@rate = rate # rate in packets per second
end
end
class DataGenerator
def initialize(recursives=[], attackers=[], timemin=0,
timemax=24*60*60, timedelta=600)
@recursives = recursives # array of recursive objects
@attackers = attackers
@timemin = timemin
@timemax = timemax
@timedelta = timedelta
# array of attacker objects
# start time
# end time
# jump
end
def generate
time = @timemin
data = []
while time <= @timemax
timedata = [time]
@recursives.each do |r|
@attackers.each do |a|
timedata << r.probability(a,time)
end
end
data << timedata
time += @timedelta
end
data
end
def prettyprint(data)
data.each do |row|
puts row.join(" ")
end
end
end
end
if __FILE__ == $0
bind = CachePoisoning::Recursive.new(16384,1,2**16,1,0.1,1000)
onegbps = CachePoisoning::Attacker.new(20E3)
dg = CachePoisoning::DataGenerator.new([bind], [onegbps],
1, 100, 1)
data = dg.generate
dg.prettyprint data
end