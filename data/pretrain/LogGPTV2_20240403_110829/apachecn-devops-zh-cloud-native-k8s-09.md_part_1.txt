# 九、Kubernetes 的可观测性
本章深入探讨了在生产中运行 Kubernetes 时强烈建议实现的功能。首先，我们讨论分布式系统(如 Kubernetes)的可观测性。然后，我们看一下内置的 Kubernetes 可观察性栈及其实现的功能。最后，我们学习如何从生态系统中用额外的可观察性、监控、日志记录和度量基础设施来补充内置的可观察性工具。本章中学习的技能将帮助您将可观察性工具部署到 Kubernetes 集群中，并使您能够了解集群(以及运行在其上的应用)的运行情况。
在本章中，我们将涵盖以下主题:
*   理解库伯内特的可观测性
*   使用默认的可观察性工具——度量、日志和仪表板
*   实现生态系统的最佳状态
首先，我们将学习 Kubernetes 为可观察性提供的现成工具和流程。
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机以及一个工作正常的 Kubernetes 集群。参见 [*第一章*](01.html#_idTextAnchor016)*与 Kubernetes*通讯，了解几种快速启动和运行 Kubernetes 的方法，以及如何安装 Kubernetes 工具的说明。
本章中使用的代码可以在本书的 GitHub 存储库中找到:
[https://github . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 9](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter9)
# 了解 Kubernetes 的可观测性
没有一个生产系统是完整的没有办法监控它。在软件中，我们将可观察性定义为在任何时间点理解我们的系统如何运行的能力(最好的情况是，为什么)。可观察性在安全性、性能和操作能力方面带来显著优势。通过了解您的系统在虚拟机、容器和应用级别的响应情况，您可以调整它，使其高效运行，对事件做出快速反应，并更轻松地排除错误。
例如，让我们假设您的应用运行速度非常慢。为了找到瓶颈，您可以查看应用代码本身、Pod 的资源规格、部署中的 Pod 数量、Pod 级别或节点级别的内存和 CPU 使用情况，以及外部因素，例如运行在集群之外的 MySQL 数据库。
通过添加可观察性工具，您将能够诊断这些变量中的许多变量，并找出哪些问题可能会导致您的应用变慢。
Kubernetes 作为一个生产就绪的容器编排系统，为我们提供了一些监控应用的默认工具。为了本章的目的，我们将把可观察性分成四个概念:度量、日志、跟踪和警报。让我们看看他们每个人:
*   **指标**这里表示查看系统当前状态的数字表示的能力，特别关注 CPU、内存、网络、磁盘空间等等。这些数字使我们能够判断当前状态与系统最大容量之间的差距，并确保系统对用户可用。
*   **日志**是指从应用和系统中收集文本日志的做法。日志可能是 Kubernetes 控制平面日志和应用 Pods 本身的日志的组合。日志可以帮助我们诊断 Kubernetes 系统的可用性，但是它们也可以帮助分析应用错误。
*   **痕迹**指采集分布的痕迹。跟踪是一种可观察的模式，它提供了一系列请求的端到端可见性，这些请求可以是 HTTP 请求或其他请求。在使用微服务的分布式云原生环境中，这个主题尤其重要。如果您有许多微服务，并且它们相互调用，当一个端到端请求中涉及许多服务时,可能很难找到瓶颈或问题。跟踪允许您查看按服务到服务呼叫的每个分支细分的请求。
*   **提醒**对应于在某些事件发生时设置自动触摸点的做法。警报可以在*指标*和*日志*上设置，并通过多种媒介传递，从短信到电子邮件，再到第三方应用，等等。
在这四个方面的可观测性之间，我们应该能够了解我们集群的健康状况。但是，可以为指标、日志甚至警报配置许多不同的可能数据点。因此，知道寻找什么是重要的。下一节将讨论 Kubernetes 集群和应用健康最重要的可观察领域。
## 了解什么对 Kubernetes 集群和应用运行状况至关重要
在 Kubernetes 或针对 Kubernetes 的第三方可观察性解决方案能够提供的大量可能的指标和日志中，我们可以缩小最有可能导致您的集群出现重大问题的指标和日志的范围。无论最终使用哪种可观察性解决方案，您都应该将这些部分放在最前面和最中间。首先，让我们看看 CPU 使用和集群健康之间的联系。
### 节点中央处理器使用率
Kubernetes 集群中各节点的 CPU 使用状态是一个非常重要的指标，可以用来关注整个可观测性解决方案。在前几章中，我们已经讨论了 Pods 如何定义资源请求和 CPU 使用限制。但是，当限制设置高于群集的最大 CPU 容量时，节点仍有可能超额预订其 CPU 使用。此外，运行我们的控制平面的主节点也会遇到 CPU 容量问题。
CPU 最大化的工作节点可能会表现不佳，或者限制 Pods 上运行的工作负载。如果对 Pod 没有设置限制，或者如果节点的 Pod 总资源限制大于其最大容量，即使其总资源请求较低，也很容易发生这种情况。具有封顶的 CPU 的主节点可能会损害调度器、kube-apiserver 或任何其他控制平面组件的性能。
一般来说，工作节点和主节点之间的 CPU 使用情况应该在您的可观察性解决方案中可见。最好通过指标组合(例如 Grafana 之类的图表解决方案，您将在本章稍后了解)和集群中节点的高 CPU 使用率警报来实现这一点。
与中央处理器类似，内存使用也是一个非常重要的跟踪指标。
### 节点内存使用
与 CPU 使用率一样，内存使用率是在集群中观察的一个极其重要的指标。使用 Pod 资源限制可以超额预订内存使用，并且许多与 CPU 使用相同的问题可以适用于群集中的主节点和工作节点。
同样，警报和指标的结合对于了解集群内存使用情况非常重要。我们将在本章后面学习一些工具。
对于下一个主要的可观察性部分，我们将不再关注度量标准，而是关注日志。
### 控制平面测井
### Kubernetes 控制平面的组件在运行时输出日志，这些日志可用于深入查看集群操作。这些日志对于故障排除也有很大帮助，正如我们将在 [*第 10 章*](10.html#_idTextAnchor230)*故障排除 Kubernetes*中看到的。Kubernetes API 服务器、控制器管理器、调度器、kube 代理和 kubelet 的日志对于某些故障排除或可观察性原因都非常有用。
### 应用日志
应用日志也可以合并到 Kubernetes 的可观察性栈中——能够查看应用日志以及其他指标对操作员非常有帮助。
### 应用性能指标
与应用日志一样，应用性能指标和监控与您的应用在 Kubernetes 上的性能高度相关。应用级别的内存使用和 CPU 分析可能是可观察性栈中有价值的部分。
一般来说，Kubernetes 为应用监控和日志记录提供了数据基础结构，但是没有提供更高级别的功能，例如图表和搜索。考虑到这一点，让我们回顾一下 Kubernetes 默认情况下为解决这些问题而提供的工具。
# 使用默认的可观察性工具
Kubernetes 提供了可观察性工具，即使没有添加任何第三方解决方案。这些本地的 Kubernetes 工具构成了许多更健壮的解决方案的基础，因此讨论它们很重要。由于可观察性包括度量、日志、跟踪和警报，我们将依次讨论每一个，首先关注 Kubernetes-native 解决方案。首先，让我们讨论度量标准。
## 立方上的度量
只要运行`kubectl describe pod`，就可以获得很多关于你的应用的信息。我们可以看到关于我们的 Pod 规范的信息，它处于什么状态，以及阻止其功能的关键问题。
让我们假设我们的应用遇到了一些问题。具体来说，Pod 没有启动。为了调查，我们运行`kubectl describe pod`。关于 [*第一章*](01.html#_idTextAnchor016)*中提到的 kubectl 别名提醒，与 Kubernetes* 交流，`kubectl describe pod`同`kubectl describe pods`。以下是`describe pod`命令的输出示例–除了`Events`信息之外，我们已经剥离了所有内容:
![Figure 9.1 – Describe Pod Events output](img/B14790_09_001_new.jpg)
图 9.1–描述 Pod 事件输出
如您所见，这个 Pod 没有被安排，因为我们的节点都没有内存了！这是一件值得进一步调查的好事。
让我们继续前进。通过运行`kubectl describe nodes`，我们可以了解很多关于我们的 Kubernetes Nodes。这些信息中的一些可能与我们系统的性能非常相关。这是另一个输出示例，这次来自`kubectl describe nodes`命令。不要把整个输出放在这里，这可能会很长，让我们关注两个重要的部分-`Conditions`和`Allocated resources`。首先，让我们回顾一下`Conditions`一节:
![Figure 9.2 – Describe Node Conditions output](img/B14790_09_002_new.jpg)
图 9.2–描述节点条件输出
如您所见，我们已经包含了`kubectl describe nodes`命令输出的`Conditions`块。这是一个寻找问题的好地方。正如我们在这里看到的，我们的节点实际上遇到了问题。我们的`MemoryPressure`条件是真的，`Kubelet`内存不足。难怪我们的 PODS 不会安排！
接下来，查看`Allocated resources`块:
```
Allocated resources:
 (Total limits may be over 100 percent, i.e., overcommitted.)
 CPU Requests	CPU Limits    Memory Requests  Memory Limits
 ------------	----------    ---------------  -------------
 8520m (40%)	4500m (24%)   16328Mi (104%)   16328Mi (104%)
```
现在我们看到了一些指标！看起来我们的 Pod 请求了太多内存，导致了我们的节点和 Pod 问题。从这个输出可以看出，默认情况下，Kubernetes 已经在收集关于我们的节点的度量数据。没有这些数据，调度器将无法正常工作，因为用节点容量维护 Pod 资源请求是它最重要的功能之一。
但是，默认情况下，这些指标不会呈现给用户。事实上，它们正被每个节点的`Kubelet`收集，并交付给调度器以完成其工作。谢天谢地，我们可以通过将度量服务器部署到我们的集群来轻松获得这些度量。
度量服务器是一个官方支持的 Kubernetes 应用，它收集度量信息并将其显示在应用编程接口端点上以供使用。度量服务器实际上是使水平 Pod 自动缩放器工作所必需的，但是默认情况下并不总是包括它，这取决于 Kubernetes 分布。
部署度量服务器非常快。截至本书撰写之时，最新版本可通过以下方式安装:
```
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.7/components.yaml
```
重要说明
关于如何使用度量服务器的完整文档可以在[https://github.com/kubernetes-sigs/metrics-server](https://github.com/kubernetes-sigs/metrics-server)找到。
一旦度量服务器运行，我们就可以使用全新的 Kubernetes 命令。`kubectl top`命令可以与 Pods 或 Nodes 一起使用，查看关于正在使用的内存和 CPU 容量的详细信息。
让我们看一些用法示例。运行`kubectl top nodes`查看节点级指标。以下是命令的输出:
![Figure 9.3 – Node Metrics output](img/B14790_09_003_new.jpg)
图 9.3–节点指标输出
如您所见，我们能够看到绝对和相对的 CPU 和内存使用情况。
重要说明
CPU 内核以`millcpu`或`millicores`计量。1000`millicores`相当于一个虚拟 CPU。内存以字节为单位。
接下来，让我们看看`kubectl top pods`命令下的。用`–namespace kube-system`标志运行它，查看`kube-system`命名空间中的 Pods。
为此，我们运行以下命令:
```
Kubectl top pods -n kube-system 
```
我们得到如下输出:
```
NAMESPACE     NAME                CPU(cores)   MEMORY(bytes)   
default       my-hungry-pod       8m           50Mi            