类似于同步刷盘，Redis写性能处决于磁盘的性能
开启 AOF appendfsync=everysec
小
异步写，影响小
开启 AOF appendfsync=no
小
异步写，影响小
性能建议：
1.如果是热点场景，建议大家关闭rdb和aof
2.
在 SATA 和 SAS 普通盘上，appendfsync=always 和 appendfsync=everysec 性能差异基本在50倍以上
3.
在aof开启而且刷盘方式appendfsync=always 时，磁盘对Redis 的写入性能影响非常大，通常我们只在SSD时才尝试开启
4.如果主机IO非常繁忙，appendfsync-everysec在极限情况下可能导致Redis主线程堵塞
春风阁讲堂出品
249
---
## Page 250
15.9.Redis绑定CPU
很多时候，我们在部署服务时，为了提高服务性能，降低应用程序在多个CPU核心之间的上下文切换带来的性能损耗，通常采用的方案是进
程绑定CPU的方式提高性能
Redis6.0以前，绑定CPU也会带来风险，如果我们把Redis进程只绑定了一个CPU逻辑核心上，那么当Redis在进行数据持久化时，fork出
的子进程会继承父进程的CPU使用偏好。
而此时的子进程会消耗大量的CPU资源进行数据持久化（把实例数据全部扫描出来需要耗费CPU），这就会导致子进程会与主进程发生CPU
争抢，进而影响到主进程服务客户端请求，访问延迟变大
Redis在6.0版本已经推出了这个功能，我们可以通过以下配置，对主线程、后台线程、后台RDB进程、AOFrewrite进程，绑定固定的CPU
逻辑核心
性能建议（这里一般不建议大家操作，也没有太大必要，除非你对操作系统和Redis都非常熟悉）
1.RedisServer和IO线程绑定到CPU核心0.2,4,6：
server_cpulist 0-7:2
2.后台子线程绑定到CPU核心1.3：
bio_cpulist 1,3
3.后台AOFrewrite进程绑定到CPU核心8,9,10,11：
aof_rewrite_cpulist 8-11
4.后台RDB进程绑定到CPU核心1,10,11：
bgsave_cpulist 1,10-1
在Numa架构下，Redis绑定的CPU要在同一个物理CPU下，而且必须和网卡绑定在同一个物理CPU下
春风阁讲堂出品
2.50
---
## Page 251
15.10.Redis内存碎片
Redis的数据都存储在内存中，当我们的应用程序频繁修改Redis中的数据时，就有可能会导致Redis产生内存碎片
内存碎片会降低Redis的内存使用率，我们可以通过执行INFO命令，得到这个实例的内存碎片率
[xiangsl@crml67 redis]sredis-cli info Memory
#Memory
used_memory:872272
used_memory_rss:2859008
used_memory_human:851.83K
mem_fragmentation_ratio:3.53
used_memory_rss_human:2.73M
mem_fragmentation_bytes:2048704
如果mem_fragmentation_ratio>2，说明内存碎片率已经超过了100%，这时我们就需要采取一些措施来降低内存碎片了
性能建议：
如果是Redis4.0以下版本，只能通过重启实例来解决
如果是Redis4.0+版本，正好提供了自动碎片整理的功能，可以通过配置开启碎片自动整理
activedefrag yes
#开启自动内存碎片整理
active-defrag-ignore-bytes 100mb
#内存使用100MB以下，不进行碎片整理
active-defrag-threshold-lower 50
#内存碎片率超过50%，开始碎片整理
active-defrag-threshold-upper 100
#内存碎片率超过100%，尽最大努力碎片整理
active-defrag-cycle-min 1
#内存碎片整理占用CPU资源最小百分比
active-defrag-cycle-max 25
#内存碎片整理占用CPU资源最大百分比
active-defrag-max-scan-fields1000#碎片整理期间，对于List/Set/Hash/ZSet类型元素一次Scan的数量
春风阁讲堂出品
2.51
---
## Page 252
16.Redis性能基准测试
16.1.常用基准测试演示
1.默认基准测试：
redis-benchmark
2.指定主机、端口、请求数量、客户端连接
redis-benchmark -h 192.168.128.167 -p 6379 -n 100000 -c 20
3.
指定测试类型
redis-benchmark -t set -n 1000000 -r 100000000
4.指定输出格式
redis-benchmark -t ping,set,get -n 100000 --csv
5.脚本测试
redis-benchmark -r 10000 -n 10000 eval 'return redis.call("ping")′ 0
6.设定随机key大小
redis-benchmark -r 10000 -n 10000 lpush mylist _rand_int_
春风阁讲堂出品
252
---
## Page 253
16.2.redis-benchmark命令
命令参数
说明
命令参数
说明
h 
指定主机，默认：127.0.0.1
q
安静模式，仅仅显示结果
-p 
指定端口：默认：6379
-precision
s 
指定 socket 文件
=CSV
以csv格式输出
a 
指定密码
-1
循环测试
-user 
指定用户名
-t 
总共请求数量
--he1p
帮助命令
d
数据大小，默认：3 byte
version
版本显示
dbnum (db>
数据库序列，默认：0
threads 
开启多线程模式
cluster
开启集群模式
k 
1：长连接，0：短连接
随机key的数量大小
P 
采用pipeline请求
春风阁讲堂出品
253
---
## Page 254
16.3.key大小对比演示
16.3.1.命令演示
1.采用3字节演示：redis-benchmark-t set,get-n 1000000-q
[xiangsl@crm167~]$ redis-benchmark-t set,get -n 1000000 -q
SET: 52485.18 requests per second, p50=0.551 msec
GET:44414.84 requests per second，p50=0.535msec
2.采用 1K 字节演示：redis-benchmark -t set,get-d 1024-n 1000000 -q
[xiangsl@crm167~]$ redis-benchmark-t set,get-d 1024 -n1000000
SET:51253.14 requests per second,p50=0.687 msec
GET: 44304.64 requests per second, p50=0.551 msec
3.采用10K字节演示：redis-benchmark-t set,get-d10240-n 1000000-q
[xiangsl@crm167~]$ redis-benchmark -t set,get -d 10240 -n 1000000
SET: 26126.03 requests per second,p50=1.559 msec
GET:35972.52 requests per second,p50=0.687 msec
4.采用 20K 字节演示：redis-benchmark -t set,get -d 40960-n 1000000 -q
[xiangsl@crm167~]$ redis-benchmark-t set,get-d 40960-n1000000-q
SET:10255.88 requests per second，p50=4.295 msec
GET:20156.41 requests per second,p50=0.959 msec
一般而言，Reids的值大小在1K以下，性能最佳，如果超出10K，就要特别小心
春风阁讲堂出品
254
---
## Page 255
16.3.2.
图表结果
Redis值大小与性能测试
值大小（k）
读tps
写tps
0000
0000
40000
30000
20000
10000
0.03
1
8
10
春风阁讲堂出品
2.55
---
## Page 256
16.4.appendfsync演示
appendfsync everysec 方: redis-benchmark -t set,get -d 10240 -n 1000000 -q
[xiangsl@crm167 conf]$ redis-benchmark-t set,get -d 1024 -n 1000000
b-
SET:34480.38 requests per second,p50=0.887 msec
GET:44990.33 requests per second，p50=0.551msec
2.
appendfsync no 方式: redis-benchmark -t set,get -d 10240 -n 1000000 -q
[xiangsl@crm167conf]$redis-benchmark-tset,get-d1024-n1000000
b-
SET:40758.10requests per second，p50=0.943msec
GET:47355.21requestsper second，p50=0.527msec
3.appendfsync always 方f: redis-benchmark -t set,get -d 10240 -n 1000000 -q
SET:338.38 requests per second,p50=74.879 msec
GET:46926.32requests per second,p50=0.535msec
春风阁讲堂出品
256
---
## Page 257
17.Redis场景应用举例
17.1.Jedis连接Redis源码
客户端连接Redis的工具非常多，这里我们先介绍一下怎么用Java客户端工具Jedis连接Redis
具体代码参考源码实现
1、Jedis连接Redis 单机
代码参考：com.longge.redis.al7.Al_1_simple.java
2、Jedis连接Sentinel集群
代码参考：com.longge.redis.al7.Al_2_Sentinel.java
3、Jedie连接Cluster集群
代码参考：com.longge.redis.al7.Al_3_Clusterjava
春风阁讲堂出品
257
---
## Page 258
17.2.热点场景下数据加速
我们一提到redis，自然而然就想到缓存，缓存作为Redis最主要的功能，尤其是作为互联网应用上的热点场景，使用的非常多
具体代码参考com.longge.redis.al7.A2_Cache.java
应用程序
热点场景
数据加载
1、
若缓存命中则从缓存加载
Redis
2、
若缓存未中则从数据库加载
3、将数据写入Redis
数据库
春风阁讲堂出品
2.58
---
## Page 259
17.3.下单秒杀场景应用
下单秒杀场景主要考虑以下几个问题
1.性能上的高并发，所以不适合用传统数据库（全程与数据库无交互）
2.商品不能超卖，也就是说设置秒杀100个，那么在多用户抢购时，不能出现结果>100（利用Redis操作原子性，如lpop,decr等）
3.秒杀开始前、开始后，需要做拦截（我们采用Redis全局变量进行控制）
4.一般有一个用户不能秒杀两个（需要分布式锁才能解决）
5.代码参考：com.longge.redis.al7.A3_Seckill.java
1.判断是否开始
否
返回
1.采用Redis全局变量判断，比如：
2.判断是否购买
switch=1表示开始，其它未开始
2.
采用lpop的原子性，防止超卖
3.下单，采用lpop，如果有则表示
是
返回
成功
否
3.下单
失败
返回
成功
异步处理后续流程，如生成订单..
春风阁讲堂出品
2.59
---
## Page 260
17.4.共享会话场景应用
共享会话的意义：单台服务器保存的会话信息有限，不能水平扩容：在单点故障时，可能会导致会话信息丢失，造成重登陆
模拟代码参考：com.longge.redis.al7.A4_Session.java
4层代理
双主互备（vip）
LVS
LVS
轮询调度RR
7层代理
Nginx1
Nginx1
ip_hash分发
Redis
Tomcat集群
集群
Tomcat
Tomcat
Tomcat
1
2
3
1、
优先从本地Tomcat取Session
2、
如果没有取到，则从Redis获取Session
3、
本地Session需要同步或者定时延长至Redis
4、
Redis中的Session需要定时过期
春风阁讲堂出品
260
---
## Page 261
17.5.排行榜场景用应用
当今互联网应用，有各种各样的排行榜，如电商网站的月度销量排行榜、社交APP的礼物排行榜、小程序的投票排行榜等等。Redis提供的zset
数据类型能够实现这些复杂的排行榜，这里我们以直播间送红心为例
1.我们以直播间ID作为Redis 中zset的Key
2.我们以粉丝的ID作为zset中的成员
3.成员每送一颗红心，我们认为就是成员的分数+1
4.代码参考：com.longge.redis.al7.A5_Zset.java
春风阁讲堂出品
261
---
## Page 262
17.6.计数器场景应用
什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1：在分布式环境下并发量高时，
如果每次都请求都采用数据库的悲观锁，性能将极其低下：
Redis提供的incr命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景
我们这们以视频播放次数为例：
1.定义全局Redis的变量num
2.页面每点击一次，我们将num进行incr操作
3.整个过程利用的是Redis的操作原子性，逻辑上无锁，并发量非常高
5.代码参考：com.longge.redis.al7.A6_Counter.java
春风阁讲堂出品
262
---
## Page 263
17.7.最新消息场景应用
最新消息的应用，比如像评论的最新发布，某贴子的最新回复等
Redis列表结构，天生就是一个最新消息的模型，LTRIM命令可用来限制列表的数量，这样列表可以查出最新N个，无需像传统数据库那样进行
额外排序排序
我们以回帖为例
1.定义全局Redis的变量list，用来表示某段文章的回帖
2.将list长度设置为固定值，表示最近N条的回帖
3.无论多少用户回复多少回帖，我们都能快速取到最新N条
4.整个过程利用的是Redis的操作原子性，list的天生排序，并发量非常高
5.代码参考：com.longge.redis.al7.A7_List.java
春风阁讲堂出品
263
---
## Page 264
17.8.请求限流场景应用
限流的核心功能就是X秒之内最多有Y个请求，通常我们简化为每秒内请求<=N，也就是我们所说的TPS<=N
限流的算法非常多，觉见的有计数器算法/固定窗口、滑动窗口、漏桶算法、令牌桶算法
1.计数器算法
计数器算法“简单粗暴”。该算法会维护一个counter，规定在单位时间内counter的大小不能超过最大值，每隔固定时间就将counter的值置零。
如果这个counter大于设定的闽值了，那么系统就开始拒绝请求以保护系统的负载
2.滑动窗口算法
计数器算法其实就是滑动窗口算法，只是它没有对时间窗口做划分，所以只有一个时间单元格
3.漏桶算法
在漏桶算法中，我们会维护一个固定容量的桶，这个桶会按照指定的速度漏水。如果这个桶空了，那么就停止漏水：请求到达系统就类似于将
水加入桶中，这个放入的速度可以是匀速的也可以是瞬间，但漏水的速度是恒定的
4.令牌桶算法
token，如果没有token可拿就拒绝服务
我们采用代码分别实现上面四种算法，注意我们实现的全部是分布式限流，单机限流的工具类很多
以上代码实现分别参考：
com.longge.redis.a17.A8_Limitl.java
com.longge.redis.a17.A8_Limit2.java
com.longge.redis.a17.A8_Limit3.java
com.longge.redis.a17.A8_Limit4.java
春风阁讲堂出品
264
---
## Page 265
17.9.分布式锁场景应用
技术难点：
1、获取锁和释放锁的性能要好
2、锁必须是原子性的，否则可能导致多个请求都获取到锁
3、预防死锁的发生
分布式方案案例：
1、Redis分布式锁方案一：SETNX+EXPIRE（项目中一般不用，仅供学习）
2、Redis分布式锁方案二：SETNX+value值是（系统时间+过期时间）（根据业务而定，可选用）
3、Redis分布式锁方案三：SET的扩展命令（SETEXPXNX）（根据业务而定，可选用）
4、Redis分布式锁方案四：使用Lua脚本（包含SETNX+EXPIRE两条指令）（根据业务而定，可选用）
5、Redis分布式锁方案五：SETEXPXNX+校验唯一随机值，再释放锁（项目中可使用）
6、Redis分布式锁方案六：采用Redisson框架实现，Redisson框架实现的锁非常丰富，底层也是采用Redis实现，框架内实现了可重入锁、读写
锁、信号量锁、闭锁、红锁，等，这里呢，我们不作继续深入，有兴趣的同学可以自行官网学习：htps://github.com/redisson/redisson
这里大家注意一下，在我们的方案五中，仍然存在锁到期，但是业务未完成，这个问题，在我们的Redisson框架中得到解决，它的核心原理其
实很简单，采用了定时延长过期来解决
春风阁讲堂出品
265
---