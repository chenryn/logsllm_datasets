User: 请列举常见的负载均衡算法和使用场景，并结合具体的业务场景提供应用案例。
Assistant: 常见负载均衡算法：

1. 轮询算法（Round Robin）：将请求依次分配给服务器，每个服务器循环处理请求。适用于请求处理时间相对均等的场景。

2. 权重算法（Weighted）：根据服务器的处理能力分配不同的权重，处理能力越高的服务器分配的请求越多。适用于服务器性能不同的场景。

3. 最小连接算法（Least Connections）：将请求发送到连接数最少的服务器上。适用于每个请求处理时间不同的场景。

4. IP散列算法（IP Hash）：根据请求发起方的IP地址散列后得到一个值，将请求分配给相应的服务器处理。适用于需要长连接的场景。

应用案例：

假设某电商网站有多个服务器，为了提升性能和稳定性，采用了负载均衡技术。具体业务场景如下：

1. 轮询算法：当用户发起普通商品购买请求时，使用轮询算法将请求依次分配给多个服务器处理，因为每个请求处理时间基本相等。

2. 权重算法：当用户发起秒杀商品购买请求时，使用权重算法将请求分配给性能更高的服务器处理，因为秒杀请求相对于普通请求对服务器的性能消耗更大。

3. 最小连接算法：当用户发起快递查询请求时，根据当前连接数最少的服务器，将请求发送到负载较轻的服务器上，以保证查询速度更快。

4. IP散列算法：当用户登录电商网站时，需要长连接进行身份认证。使用IP散列算法将同一IP地址的请求发送到同一台服务器上，以保证用户登录之后的后续请求都可以在同一台服务器上处理，降低了跨服务器通讯的开销。