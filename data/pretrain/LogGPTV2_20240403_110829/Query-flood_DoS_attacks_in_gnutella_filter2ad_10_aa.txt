title:Query-flood DoS attacks in gnutella
author:Neil Daswani and
Hector Garcia-Molina
Query-Flood DoS Attacks in Gnutella ∗
Neil Daswani and Hector Garcia-Molina
Computer Science Department
Stanford University
Stanford, CA 94305-9045
{daswani,hector}@db.stanford.edu
ABSTRACT
We describe a simple but eﬀective traﬃc model that can
be used to understand the eﬀects of denial-of-service
(DoS) attacks based on query ﬂoods in Gnutella net-
works. We run simulations based on the model to ana-
lyze how diﬀerent choices of network topology and ap-
plication level load balancing policies can minimize the
eﬀect of these types of DoS attacks. In addition, we also
study how damage caused by query ﬂoods is distributed
throughout the network, and how application-level poli-
cies can localize the damage.
Categories and Subject Descriptors
C.2.0 [Computers-Communication Networks]: Gen-
eral—Security and protection; H.3.4 [Information Stor-
age and Retrieval]: Systems and Software—Distributed
systems, Information networks; I.6.3 [Simulation and
Modeling]: Applications
General Terms
Security, Algorithms, Measurement, Experimentation
Keywords
peer-to-peer, security, denial-of-service
1.
INTRODUCTION
In this paper we study application-layer, ﬂooding-based
denial-of-service (DoS) attacks in peer-to-peer (P2P) sys-
tems, and propose simple techniques to cope with such
∗This work was partially supported by NSF Grant CCR-
0208683.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’02, November 18–22, 2002, Washington, DC, USA.
Copyright 2002 ACM 1-58113-612-9/02/0011 ...$5.00.
attacks. Since there has been signiﬁcant recent inter-
est in DoS attacks, it is important to place our work in
context.
First, we are addressing application-layer DoS attacks,
as opposed to network-layer attacks. Most techniques
that have been developed to date to deal with denial-
of-service focus on network-layer attacks [3, 16, 33, 34,
22, 32, 7, 29, 8, 1, 19, 9, 18, 2, 38, 20]. Yet, public
systems are also very vulnerable to application-layer at-
tacks, even if they are immune to network-layer attacks.
In a ﬂooding-based application-layer attack, large num-
bers of application requests or messages (e.g., deliver
email, open account, ﬁnd page), or malicious applica-
tion messages, can deny service to clients. These at-
tacks can be more damaging, relative to the eﬀort that
the malicious party needs to expend, than network-layer
attacks since each small message can cause a server to
waste signiﬁcant resources. Fortunately, since requests
require the server to expend a signiﬁcant amount of CPU
and/or disk I/O resources, the server can aﬀord to spend
some time deciding which requests to honor.
In con-
trast, routers processing network packets cannot aﬀord
to spend as much time making such decisions, else the
overhead will be too high.
Indeed, in this paper we
propose some “policies” that may be too expensive for
network-layer attacks, relatively speaking.
Second, the application we are considering is P2P
systems, as opposed to other applications such as web
search or e-commerce. For concreteness, it is important
to focus on one particular type of system, and we chose
Gnutella P2P systems (with supernodes) [30], because
they are very vulnerable to attack and very popular. In
Gnutella (as well as in Morpheus [17] and KaZAA [10]),
a client submits a query (e.g., looking for a ﬁle) to a
supernode (server). That node performs a local search,
and also broadcasts the query to its neighboring nodes,
asking them to also process the query. Thus, queries
from a malicious client or server can exponentially mul-
tiply throughout the system, consuming resources that
other clients cannot use.
If we can manage DoS at-
tacks in Gnutella, then we will surely be able to man-
age DoS attacks in other P2P systems that are less vul-
nerable than Gnutella, such as CAN [24], Chord [35],
Tapestry [39], etc. And clearly, Gnutella systems are of
181interest because they are the most prevalent P2P sys-
tems today, with over 25 million client downloads, and
300,000 concurrent users during peak periods.
Third, in this paper we advocate application-layer “load
balancing” techniques that attempt to give clients a “fair
share” of available resources, thus making it harder for
malicious clients to deny service. Most DoS work to
date does not fall in this category: current techniques
tend to be either reactive, where in-progress attacks are
detected, and services are denied to oﬀending clients,
or proactive, where security mechanisms prevent clients
from gaining access to resources [11].
Instead, we do
not require servers to distinguish attack queries from
bonaﬁde ones, and indeed, malicious clients will be able
to receive some service. However, the load balancing
policies try to make sure that oﬀending clients do not
receive an inordinate amount of service. Of course, in a
Gnutella P2P system the challenge is to maintain a fair
load distribution in spite of the multiplicative eﬀect of
query broadcast.
Clearly, load balancing policies do not eliminate the
need for proactive and reactive techniques. We believe
that all three types will be needed for protection against
DoS attacks. In this paper, we simply focus on the load
balancing techniques because they are also important
and we feel they have not been studied adequately in
this context. Because we are studying load balancing
techniques, in our evaluations we focus on ﬂooding-type
DoS attacks, as opposed to attacks that are better dealt
with by other techniques. (For example, if a single ma-
licious query can crash a node, then we clearly need to
ensure, using a proactive approach, that such a query is
never executed.)
We also note that the load balancing techniques we ad-
vocate are not new. These types of techniques have been
used for many years in network management, processor
scheduling, and many other applications. Here we are
simply applying these techniques to a P2P environment,
and extending them to handle requests originating via
ﬂooding from a malicious node possibly multiple hops
away.
However, one area where we have had to go beyond
the current state of the art is in the evaluation of DoS
load balancing techniques. In particular, we needed and
developed techniques for modeling and quantifying the
“usefulness” of load balancing DoS techniques. With our
model and metrics we can compute how much “damage”
a malicious node may cause, which network topologies
may be more vulnerable to attacks (allowing greater
damage), which nodes within a network are the most
vulnerable, and which load balancing techniques may
be most eﬀective. We believe that such an evaluation is
essential in order to get a handle on ﬂooding-based DoS
attacks.
Our main contributions in this paper are as follows:
• We deﬁne a simple but eﬀective traﬃc model for
query ﬂow in Gnutella networks, and outline policies
that nodes may use to manage query ﬂow. We de-
ﬁne expected behaviors for “good” and “malicious”
nodes, and metrics that we use to evaulate the im-
pact that malicious nodes have by ﬂooding the net-
work. (Sections 2, 3, and 4)
• We evaluate how network topology aﬀects the abil-
ity of a malicious node to ﬂood the network. In our
evaluations, we study the vulnerability of complete,
cycle, wheel, line, star, grid, and power-law topolo-
gies under various ﬂow management policies. (Sec-
tions 5.1, 5.2, and 5.3)
• We evaulate how diﬀerent combinations of ﬂow man-
agement policies can be used to manage the distribu-
tion of damage across the nodes in a network. (Sec-
tion 5.4)
2. GNUTELLA TRAFFIC MODEL
In this section we brieﬂy describe a natural traﬃc
model for a Gnutella P2P system that focuses on query
ﬂow and query load at nodes in the network. The model
that we present is an intentionally coarse-grained and
relatively simple model whose goal is to capture the im-
portant features of query traﬃc. We do not expect
the model to predict actual query loads (as might be
observed in a real network), but we do expect it to tell
us about relative query loads at nodes of the network by
using diﬀerent application-layer policies.
The system is modeled as a graph with a set of supern-
odes V , and a connection topology, i.e., a set of point-to-
point, bidirectional communication links, E. Our model
divides time into a number of discrete time intervals,
and explicitly models each supernode in the network.
Supernodes typically have more processing power and
disk I/O bandwidth than regular nodes. Supernodes are
responsible for propagating queries throughout the net-
work. Regular nodes connect to supernodes, and send
their queries to supernodes to have them serviced. Reg-
ular nodes are not explicitly modeled.
Each supernode conducts three actions during each
unit of time. At a given time t, each supernode 1) ac-
cepts and processes queries from adjacent supernodes,
2) accepts and processes queries it receives from regular
nodes connected to it, and 3) forwards some combina-
tion of queries received from regular nodes and adjacent
supernodes to adjacent supernodes. The time intervals
are denoted by non-negative integers t = 0, 1, 2, ..., K.
Our model can be used to approximate the continuous
behavior of a P2P system as the physical time between
intervals decreases.
Since our model mainly focuses on actions at the su-
pernodes, the term node will be used to refer to a supern-
ode in the remainder of the paper, unless we explicitly
state otherwise. In addition, we will often refer to the
regular nodes that are connected to a particular supern-
ode j as j’s local peers, and other supernodes that j is
connected to as its remote peers. A local query is a query
generated by a local peer, and a remote query is a query
sent by a remote peer.
In this paper, we only model queries, and we do not
model other messages (ping & pong, query-hit, and push),
since query processing dominates the workload of a node.
182Let Oj,k(t) be the multi-set of queries that node j
sends to node k at time t. If (j, k) /∈ E, j does not have
a connection to k and Oj,k(t) = 0, ∀t. Also, Oj,j(t) =
0, ∀t. We use multi-sets (bags) instead of sets because
there may be duplicate queries (e.g., queries with the
same search criteria).
Let Gj(t) be the multi-set of queries that node j re-
ceives from local peers at time t. When queries are
generated by local peers, they are assigned a time to
live (TTL) that speciﬁes the maximum number of nodes
(regular or super) that the query may traverse in the
network. Each node checks the TTL for each query, and
does not forward any queries for which TTL=0. Nodes
decrement the TTL for a query before forwarding it to
other nodes. We assume that all peers in the network
generate queries with the same TTL, τ .
Nodes have a limited processing capacity. As a result,
a node j may not be able to process all of the queries it
receives. At time t, j may have to choose some subset
of the queries in the set (cid:83)iV Oi,j(t − 1) ∪ Gj(t − 1) for
processing.
Let Ii,j(t) be the multi-set of queries that node j
actually processes from node i at time t.
(Ii,j(t) ⊆
Oi,j(t − 1).) If (i, j) /∈ E, i does not have a connection
to j and Ii,j(t) = 0, ∀t. Also, Ii,i(t) = 0, ∀t. Similarly,
let Pj(t) be the multi-set of local queries that j actually
processes. (Pj(t) ⊆ Gj(t − 1).)
To illustrate, consider a system with two nodes, V =
{1, 2} with topology E = {(1, 2)}. Assume that G1(0) =
{q1, q2, q3}. That is, node 1 receives 3 queries at time
t = 0 from its local peers. At time t = 1, node 1 pro-
cesses only two of the queries, so that P1(1) = {q1, q2}.
Assume that node 1 sends the two queries to node 2, so
that O1,2(1) = {q1, q2}. At time t = 2, node 2 receives
O1,2(1), but it does not have to process all the queries.
Depending on node 2’s policy, it may decide to take say
only the ﬁrst query, so that I1,2(2) = {q1}.
A node j examines the incoming queries contained in
Oi,j(t − 1), ∀i, as well as in Gj(t − 1).
In our poli-
cies, we will consider the case in which node j may not
have enough processing capacity (or does not care to)
to examine all these queries (in which case it simply ac-
cepts them on a ﬁrst-come-ﬁrst-serve basis), as well as
the case in which it has enough processing capacity to
at least examine all these queries and then choose some
subset of them for processing.
The time required to process a query may involve
searching for a keyword in an inverted index, hash ta-
ble, or some other main memory data structure. How-
ever, keyword search for content has its limitations, and
over time more sophisticated search mechanisms will be
employed. We have already started to see metadata
search deployed in the LimeWire Gnutella client [13]
and on FastTrack-based networks. As the search mecha-
nisms become more complex, query processing will dom-
inate the time required to service incoming queries. In
turn, the time to examine all incoming queries will be-
come negligible compared to the time required to process
queries that are chosen to be serviced. Hence, while we
examine both cases, we believe it will become impor-
tant to make a good decision about which subset of the
incoming queries to process.
During each time step, a node selects at most cj queries
for actual processing. A node never selects queries that
it has seen before for processing. (This may occur due
to cycles in the topology of length less than τ .) Thus,
cj represents the processing capacity of node j.
Our capacity constraint can be stated as follows: (cid:80)∀i
|Ii,j(t)| + |Pj(t)| ≤ cj.
Once a maximum of cj queries have been accepted and
processed, node j then broadcasts all of these queries to
its adjacent nodes such that they too can determine if
they have answers to the queries.
3. POLICIES
Given this framework, we are interested in under-
standing how nodes may manage DoS query traﬃc in
a Gnutella network. There are a number of choices that
each node has with regards to deciding what queries to
accept and process.
If nodes make bad decisions, they may end up only
accepting many “useless” queries that are generated by
malicious nodes, wasting their processing capacity on
these queries, and then forwarding these queries to ad-
jacent nodes that will do the same. If a node makes good
decisions, then it can minimize the eﬀect of a ﬂooding-
based DoS attack. We assume that it is hard to dis-
tinguish a high load of legitimate queries from attack
queries. As such, nodes must exercise some discretion
in how to “fairly” allocate their processing capacity to
servicing queries so as not to spend too much eﬀort on
queries that may be bogus.
In this section, we introduce some policies that nodes
may use as options to manage query load. Once we have
introduced these policies (and deﬁned some metrics), we
will present simulation results that determine which of
these policies do best in minimizing the impact of mali-
cious query ﬂoods in small networks.
3.1 Reservation Ratio (ρ)
Nodes must provide some level of fairness between ser-
vicing local and remote queries.
If supernodes only ser-
vice local queries, then local peers will not beneﬁt from
query results that could be obtained from other supern-
odes in the network. If supernodes service only remote
queries, then local peers will be neglected.
To allow a supernode to decide how to split its pro-
cessing capacity we deﬁne ρ to be the ﬁxed fraction of
query bandwidth that a supernode reserves to service
local queries (0 ≤ ρ ≤ 1). A supernode j uses ρ to
determine how many queries to accept from local peers