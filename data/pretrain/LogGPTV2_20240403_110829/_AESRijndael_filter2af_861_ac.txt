         mix:  5f 72 64 15 57 f5 bc 92 f7 be 3b 29 1d b9 f9 1a
       round:  d6 aa 74 fd d2 af 72 fa da a6 78 f1 d6 ab 76 fe
       state:  89 d8 10 e8 85 5a ce 68 2d 18 43 d8 cb 12 8f e4
     Round 2:
       input:  89 d8 10 e8 85 5a ce 68 2d 18 43 d8 cb 12 8f e4
         sub:  a7 61 ca 9b 97 be 8b 45 d8 ad 1a 61 1f c9 73 69
       shift:  a7 be 1a 69 97 ad 73 9b d8 c9 ca 45 1f 61 8b 61
         mix:  ff 87 96 84 31 d8 6a 51 64 51 51 fa 77 3a d0 09
       round:  b6 92 cf 0b 64 3d bd f1 be 9b c5 00 68 30 b3 fe
       state:  49 15 59 8f 55 e5 d7 a0 da ca 94 fa 1f 0a 63 f7
     Round 3:
       input:  49 15 59 8f 55 e5 d7 a0 da ca 94 fa 1f 0a 63 f7
         sub:  3b 59 cb 73 fc d9 0e e0 57 74 22 2d c0 67 fb 68
       shift:  3b d9 22 68 fc 74 fb 73 57 67 cb e0 c0 59 0e 2d
         mix:  4c 9c 1e 66 f7 71 f0 76 2c 3f 86 8e 53 4d f2 56
       round:  b6 ff 74 4e d2 c2 c9 bf 6c 59 0c bf 04 69 bf 41
       state:  fa 63 6a 28 25 b3 39 c9 40 66 8a 31 57 24 4d 17
     Round 4:
       input:  fa 63 6a 28 25 b3 39 c9 40 66 8a 31 57 24 4d 17
         sub:  2d fb 02 34 3f 6d 12 dd 09 33 7e c7 5b 36 e3 f0
       shift:  2d 6d 7e f0 3f 33 e3 34 09 36 02 dd 5b fb 12 c7
         mix:  63 85 b7 9f fc 53 8d f9 97 be 47 8e 75 47 d6 91
       round:  47 f7 f7 bc 95 35 3e 03 f9 6c 32 bc fd 05 8d fd
       state:  24 72 40 23 69 66 b3 fa 6e d2 75 32 88 42 5b 6c
     Round 5:
       input:  24 72 40 23 69 66 b3 fa 6e d2 75 32 88 42 5b 6c
         sub:  36 40 09 26 f9 33 6d 2d 9f b5 9d 23 c4 2c 39 50
       shift:  36 33 9d 50 f9 b5 39 26 9f 2c 09 2d c4 40 6d 23
         mix:  f4 bc d4 54 32 e5 54 d0 75 f1 d6 c5 1d d0 3b 3c
       round:  3c aa a3 e8 a9 9f 9d eb 50 f3 af 57 ad f6 22 aa
       state:  c8 16 77 bc 9b 7a c9 3b 25 02 79 92 b0 26 19 96
     Round 6:
       input:  c8 16 77 bc 9b 7a c9 3b 25 02 79 92 b0 26 19 96
         sub:  e8 47 f5 65 14 da dd e2 3f 77 b6 4f e7 f7 d4 90
       shift:  e8 da b6 90 14 77 d4 65 3f f7 f5 e2 e7 47 dd 4f
         mix:  98 16 ee 74 00 f8 7f 55 6b 2c 04 9c 8e 5a d0 36
       round:  5e 39 0f 7d f7 a6 92 96 a7 55 3d c1 0a a3 1f 6b
       state:  c6 2f e1 09 f7 5e ed c3 cc 79 39 5d 84 f9 cf 5d
     Round 7:
       input:  c6 2f e1 09 f7 5e ed c3 cc 79 39 5d 84 f9 cf 5d
         sub:  b4 15 f8 01 68 58 55 2e 4b b6 12 4c 5f 99 8a 4c
       shift:  b4 58 12 4c 68 b6 8a 01 4b 99 f8 2e 5f 15 55 4c
         mix:  c5 7e 1c 15 9a 9b d2 86 f0 5f 4b e0 98 c6 34 39
       round:  14 f9 70 1a e3 5f e2 8c 44 0a df 4d 4e a9 c0 26
       state:  d1 87 6c 0f 79 c4 30 0a b4 55 94 ad d6 6f f4 1f
     Round 8:
       input:  d1 87 6c 0f 79 c4 30 0a b4 55 94 ad d6 6f f4 1f
         sub:  3e 17 50 76 b6 1c 04 67 8d fc 22 95 f6 a8 bf c0
       shift:  3e 1c 22 c0 b6 fc bf 76 8d a8 50 67 f6 17 04 95
         mix:  ba a0 3d e7 a1 f9 b5 6e d5 51 2c ba 5f 41 4d 23
       round:  47 43 87 35 a4 1c 65 b9 e0 16 ba f4 ae bf 7a d2
       state:  fd e3 ba d2 05 e5 d0 d7 35 47 96 4e f1 fe 37 f1
     Round 9:
       input:  fd e3 ba d2 05 e5 d0 d7 35 47 96 4e f1 fe 37 f1
         sub:  54 11 f4 b5 6b d9 70 0e 96 a0 90 2f a1 bb 9a a1
       shift:  54 d9 90 a1 6b a0 9a b5 96 bb f4 0e a1 11 70 2f
         mix:  e9 f7 4e ec 02 30 20 f6 1b f2 cc f2 35 3c 21 c7
       round:  54 99 32 d1 f0 85 57 68 10 93 ed 9c be 2c 97 4e
       state:  bd 6e 7c 3d f2 b5 77 9e 0b 61 21 6e 8b 10 b6 89
     Round 10:
       input:  bd 6e 7c 3d f2 b5 77 9e 0b 61 21 6e 8b 10 b6 89
         sub:  7a 9f 10 27 89 d5 f5 0b 2b ef fd 9f 3d ca 4e a7
       shift:  7a d5 fd a7 89 ef 4e 27 2b ca 10 0b 3d 9f f5 9f
       round:  13 11 1d 7f e3 94 4a 17 f3 07 a7 8b 4d 2b 30 c5
       state:  69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a
    Output:
      cypher:  69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a
**解密轮函数**
对Rijndael算法来说解密过程就是加密过程的逆向过程，其解密轮函数实现如下：
    int aes_decrypt(AES_CYPHER_T mode, uint8_t *data, int len, uint8_t *key)
    {
        uint8_t w[4 * 4 * 15] = {0}; /* round key */
        uint8_t s[4 * 4] = {0}; /* state */
        int nr, i, j;
        /* key expansion */
        aes_key_expansion(mode, key, w);
        /* start data cypher loop over input buffer */
        for (i = 0; i = 0; nr--) {
                /* do AddRoundKey */
                aes_add_round_key(mode, s, w, nr);
                if (nr > 0) {
                    if (nr < g_aes_rounds[mode]) {
                        /* do MixColumns */
                        inv_mix_columns(mode, s);
                    }
                    /* do ShiftRows */
                    inv_shift_rows(mode, s);
                    /* do SubBytes */
                    inv_sub_bytes(mode, s);
                }
            }
            /* save state (cypher) to user buffer */
            for (j = 0; j < 4 * g_aes_nb[mode]; j++)
                data[i + j] = s[j];
        }
        return 0;
    }
**解密过程实例**
    Decrypting block ...
     Round 10:
       input:  69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a
       round:  13 11 1d 7f e3 94 4a 17 f3 07 a7 8b 4d 2b 30 c5
       shift:  7a d5 fd a7 89 ef 4e 27 2b ca 10 0b 3d 9f f5 9f
         sub:  7a 9f 10 27 89 d5 f5 0b 2b ef fd 9f 3d ca 4e a7
       state:  bd 6e 7c 3d f2 b5 77 9e 0b 61 21 6e 8b 10 b6 89
     Round 9:
       input:  bd 6e 7c 3d f2 b5 77 9e 0b 61 21 6e 8b 10 b6 89
       round:  54 99 32 d1 f0 85 57 68 10 93 ed 9c be 2c 97 4e
         mix:  e9 f7 4e ec 02 30 20 f6 1b f2 cc f2 35 3c 21 c7
       shift:  54 d9 90 a1 6b a0 9a b5 96 bb f4 0e a1 11 70 2f
         sub:  54 11 f4 b5 6b d9 70 0e 96 a0 90 2f a1 bb 9a a1
       state:  fd e3 ba d2 05 e5 d0 d7 35 47 96 4e f1 fe 37 f1
     Round 8:
       input:  fd e3 ba d2 05 e5 d0 d7 35 47 96 4e f1 fe 37 f1
       round:  47 43 87 35 a4 1c 65 b9 e0 16 ba f4 ae bf 7a d2
         mix:  ba a0 3d e7 a1 f9 b5 6e d5 51 2c ba 5f 41 4d 23
       shift:  3e 1c 22 c0 b6 fc bf 76 8d a8 50 67 f6 17 04 95
         sub:  3e 17 50 76 b6 1c 04 67 8d fc 22 95 f6 a8 bf c0
       state:  d1 87 6c 0f 79 c4 30 0a b4 55 94 ad d6 6f f4 1f
     Round 7:
       input:  d1 87 6c 0f 79 c4 30 0a b4 55 94 ad d6 6f f4 1f