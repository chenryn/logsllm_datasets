### 第一章 文件安全与权限

#### 1.4.3 权限表示法

文件权限可以通过八进制数字来表示。例如，权限 `644` 的含义如下：

- 文件属主（Owner）：读（4）+ 写（2） = 6
- 同组用户（Group）：读（4）
- 其他用户（Others）：读（4）

因此，权限表示为 `644`。

为了更清晰地计算八进制权限值，可以参考表 1-4：

| 权限位 | 文件属主 | 同组用户 | 其他用户 |
|--------|----------|----------|----------|
| r      | 4        | 4        | 4        |
| w      | 2        | 2        | 2        |
| x      | 1        | 1        | 1        |

使用表 1-4，可以更容易地计算出相应的权限值，只需将每个用户的相应权限位下的数字相加即可。

例如，文件 `my_file` 的权限为 `rw-r--r--`，对应的八进制表示为：

- 文件属主：读（4）+ 写（2） = 6
- 同组用户：读（4）
- 其他用户：读（4）

因此，权限表示为 `644`。

#### 1.4.4 chmod 命令的其他例子

以下是一些 `chmod` 命令绝对模式的例子：

| 命令           | 结果         | 含义                                           |
|----------------|--------------|------------------------------------------------|
| `chmod 666`    | `rw- rw- rw-` | 赋予所有用户读和写的权限                       |
| `chmod 644`    | `rw- r-- r--` | 赋予文件属主读和写的权限，其他用户读权限       |
| `chmod 744`    | `rwx r-- r--` | 赋予文件属主读、写和执行的权限，其他用户读权限 |
| `chmod 664`    | `rw- rw- r--` | 赋予文件属主和同组用户读和写的权限，其他用户读权限 |
| `chmod 700`    | `rwx --- ---` | 赋予文件属主读、写和执行的权限                 |
| `chmod 444`    | `r-- r-- r--` | 赋予所有用户读权限                             |

例如，假设有一个名为 `yoa` 的文件，具有如下权限：

- 如果希望使自己对该文件可读、写和执行，`admin` 组用户对该文件只读，可以键入：
  ```sh
  chmod 744 yoa
  ```

- 如果希望自己对该文件可读、写和执行，对其他所有用户只读，可以键入：
  ```sh
  chmod 744 yoa
  ```

- 如果希望一次设置目录下所有文件的权限，可以使用：
  ```sh
  chmod 644 *
  ```
  这将使文件属主和同组用户都具有读和写的权限，其他用户只具有读权限。

- 使用 `-R` 选项可以递归地设置子目录下的文件权限：
  ```sh
  chmod -R 664 /usr/local/home/dave/*
  ```
  这样就可以一次将 `/usr/local/home/dave` 目录下的所有文件连同各个子目录下的文件的权限全部设置为文件属主和同组用户可读和写，其他用户只读。使用 `-R` 选项时要谨慎，只有在需要改变目录树下全部文件权限时才使用。

#### 1.4.5 符号模式与绝对模式

上面的例子中既有绝对模式的，也有符号模式的。如果使用 `chmod` 命令的符号模式，可以设置或取消个别权限位，而在绝对模式中则不然。我个人倾向于使用符号模式，因为它比绝对模式方便快捷。

#### 1.5 目录权限

目录的权限位与文件有所不同。目录的读权限位意味着可以列出其中的内容；写权限位意味着可以在该目录中创建或删除文件；执行权限位则意味着可以搜索和访问该目录。

| 权限位 | 意义                           |
|--------|--------------------------------|
| r      | 可以列出该目录中的文件         |
| w      | 可以在该目录中创建或删除文件   |
| x      | 可以搜索或进入该目录           |

例如，目录权限 `drwxr-xr-x (755)` 的含义是：

- 文件属主：读、写、执行
- 同组用户：读、执行
- 其他用户：读、执行

如果把同组用户或其他用户针对某一目录的权限设置为 `---x`，那么他们将无法列出该目录中的文件。如果该目录中有一个执行位置位的脚本或程序，只要用户知道它的路径和文件名，仍然可以执行它。用户不能够进入该目录并不妨碍他的执行。

目录的权限将会覆盖该目录中文件的权限。例如，如果目录 `docs` 具有如下的权限：

```sh
drwxr-x---
```

而其中的文件 `pay` 的权限为：

```sh
-rw-rw-r--
```

那么 `admin` 组的用户将无法编辑该文件，因为它所属的目录不具有这样的权限。

该文件对任何用户都可读，但由于它所在的目录并未给 `admin` 组的用户赋予执行权限，所以该组的用户都将无法访问该目录，他们将会得到“访问受限”的错误消息。

#### 1.6 SUID 和 GUID

SUID 和 GUID 是一种特殊的权限位，近年来成为一个棘手的问题。很多系统供应商不允许实现这一位，或者即使它被置位，也完全忽略它的存在，因为它会带来安全性风险。

- **SUID**：如果某个用户对属于自己的 shell 脚本设置了这种权限，那么其他用户在执行这一脚本时也会具有其属主的相应权限。例如，如果根用户的某一个脚本设置了 SUID，那么其他普通用户在执行它的期间也同样具有根用户的权限。
- **GUID**：执行相应脚本的用户将具有该文件所属用户组中用户的权限。

##### 1.6.1 为什么要使用 SUID/GUID

为什么要使用这种类型的脚本？这里有一个很好的例子。我管理着几个大型的数据库系统，而对它们进行备份需要有系统管理权限。我写了几个脚本，并设置了它们的 GUID，这样我指定的一些用户只要执行这些脚本就能够完成相应的工作，而无须以数据库管理员的身份登录，以免不小心破坏了数据库服务器。通过执行这些脚本，他们可以完成数据库备份及其他管理任务，但是在这些脚本运行结束之后，他们就又回复到他们作为普通用户的权限。

有相当一些 UNIX 命令也设置了 SUID 和 GUID。如果想找出这些命令，可以进入 `/bin` 或 `/sbin` 目录，执行下面的命令：

```sh
$ ls -l | grep '^...s'
```
查找 SUID 文件；

```sh
$ ls -l | grep '^...s..s'
```
查找 SUID 和 GUID 文件。

##### 1.6.2 设置 SUID/GUID 的例子

- 设置 SUID：在相应的权限位之前的那一位设置为 4；
- 设置 GUID：在相应的权限位之前的那一位设置为 2；
- 设置 SUID 和 GUID：在相应的权限位之前的那一位设置为 4+2。

一旦设置了这一位，一个 `s` 将出现在 `x` 的位置上。记住：在设置 SUID 或 GUID 的同时，相应的执行权限位必须要被设置。

例如，如果希望对文件 `login` 设置 SUID，它当前所具有的权限为 `rwxrw-r-- (741)`，需要在使用 `chmod` 命令时在该权限数字的前面加上一个 4，即 `chmod 4741`，这将使该文件的权限变为 `rwsrw-r--`。

```sh
$ chmod 4741 login
```

以下是几个设置 SUID 和 GUID 的例子：

| 命令           | 结果         | 含义                                             |
|----------------|--------------|--------------------------------------------------|
| `chmod 4755`   | `rwsr-xr-x`  | 文件被设置了 SUID，文件属主具有读、写和执行的权限，所有其他用户具有读和执行的权限 |
| `chmod 6711`   | `rws--s--x`  | 文件被设置了 SUID 和 GUID，文件属主具有读、写和执行的权限，所有其他用户具有执行的权限 |
| `chmod 4764`   | `rwsrw-r--`  | 文件被设置了 SUID，文件属主具有读、写和执行的权限，同组用户具有读和执行的权限，其他用户具有读权限 |

还可以使用符号方式来设置 SUID/GUID。如果某个文件具有这样的权限：`rwxr-xr-x`，那么可以这样设置其 SUID：

```sh
$ chmod u+s filename
```

于是该文件的权限将变为：`rwsr-xr-x`。

在查找设置了 SUID 的文件时，可能会看到具有这样权限的文件：`rwSr-xr-x`，其中 `S` 为大写。它表示相应的执行权限位并未被设置，这是一种没有什么用处的 SUID 设置，可以忽略它的存在。

注意，`chmod` 命令不进行必要的完整性检查，可以给某一个没用的文件赋予任何权限，但 `chmod` 命令并不会对所设置的权限组合做什么检查。因此，不要看到一个文件具有执行权限，就认为它一定是一个程序或脚本。

#### 1.7 chown 和 chgrp

当你创建一个文件时，你就是该文件的属主。一旦你拥有某个文件，就可以改变它的所有权，把它交给另外一个 `/etc/passwd` 文件中存在的合法用户。可以使用用户名或用户 ID 号来完成这一操作。在改变一个文件的所有权时，相应的 SUID 也将被清除，这是出于安全性的考虑。只有文件的属主和系统管理员可以改变文件的所有权。一旦将文件的所有权交给另外一个用户，就无法再重新收回它的所有权。如果真的需要这样做，那么就只有求助于系统管理员了。

`chown` 命令的一般形式为：

```sh
chown [-R] [-h] owner file
```

- `-R` 选项意味着对所有子目录下的文件也都进行同样的操作。
- `-h` 选项意味着在改变符号链接文件的属主时不影响该链接所指向的目标文件。

##### 1.7.1 chown 举例

例如，文件 `project` 的所有权现在由用户 `louise` 交给了用户 `pauline`。

```sh
$ chown pauline project
```

##### 1.7.2 chgrp 举例

`chgrp` 命令和 `chown` 命令的格式差不多，下面给出一个例子。

用户 `pauline` 现在把该文件所属的组由 `admin` 变为 `sybadm`（系统中的另外一个用户组）。

```sh
$ chgrp sybadm project
```

##### 1.7.3 找出你所属于的用户组

如果你希望知道自己属于哪些用户组，可以用如下的命令：

```sh
$ groups
```

或者可以使用 `id` 命令：

```sh
$ id
```

##### 1.7.4 找出其他用户所属于的组

为了找出其他用户所属于的组，可以用如下的命令：

```sh
$ groups matty
```

上面的命令告诉我们用户 `matty` 属于 `sybadm`、`appsgen` 和 `post` 用户组。

#### 1.8 umask

当最初登录到系统中时，`umask` 命令确定了你创建文件的缺省模式。这一命令实际上和 `chmod` 命令正好相反。你的系统管理员必须为你设置一个合理的 `umask` 值，以确保你创建的文件具有所希望的缺省权限，防止其他非同组用户对你的文件具有写权限。

在已经登录之后，可以按照个人的偏好使用 `umask` 命令来改变文件创建的缺省权限。相应的改变直到退出该 shell 或使用另外的 `umask` 命令之前一直有效。

一般来说，`umask` 命令是在 `/etc/profile` 文件中设置的，每个用户在登录时都会引用这个文件，所以如果希望改变所有用户的 `umask`，可以在该文件中加入相应的条目。如果希望永久性地设置自己的 `umask` 值，那么就把它放在自己 `$HOME` 目录下的 `.profile` 或 `.bash_profile` 文件中。

##### 1.8.1 如何计算 umask 值

`umask` 命令允许你设定文件创建时的缺省模式，对应每一类用户（文件属主、同组用户、其他用户）存在一个相应的 `umask` 值中的数字。对于文件来说，这一数字的最大值分别是 6。系统不允许你在创建一个文本文件时就赋予它执行权限，必须在创建后用 `chmod` 命令增加这一权限。目录则允许设置执行权限，这样针对目录来说，`umask` 中各个数字最大可以到 7。

该命令的一般形式为：

```sh
umask nnn
```

其中 `nnn` 为 `umask` 值 `000-777`。

让我们来看一些例子。

计算出你的 `umask` 值：

可以有几种计算 `umask` 值的方法，通过设置 `umask` 值，可以为新创建的文件和目录设置缺省权限。表 1-8 列出了与权限位相对应的 `umask` 值。

| umask | 文件 | 目录 |
|-------|------|------|
| 0     | 6    | 7    |
| 1     | 6    | 6    |
| 2     | 4    | 5    |
| 3     | 4    | 4    |
| 4     | 2    | 3    |
| 5     | 2    | 2    |
| 6     | 0    | 1    |
| 7     | 0    | 0    |

例如，`umask` 值 `002` 所对应的文件和目录创建缺省权限分别为 `664` 和 `775`。

还有另外一种计算 `umask` 值的方法。我们只要记住 `umask` 是从权限中“拿走”相应的位即可。

例如，对于 `umask` 值 `002`，相应的文件和目录缺省创建权限是什么呢？

- 文件：`666 - 002 = 664`
- 目录：`777 - 002 = 775`

希望以上内容对你有所帮助！