13:close
4:open
10:read
9:open
14:close
2:read
1:open
(c) SCDG
Figure 1: An Example for DDG and SCDG
10 and 14 have data dependence on statement 1 because they
use the ﬁle descriptor deﬁned at 1. In Figure 2.2 (c), sys-
tem call execution “7:lseek” has data dependence on “5:read”
because of the dependence path 7 → 6 → 5; system call ex-
ecution “12:write” has data dependence on “10:read” due to
the dependence path 12 → 11 → 10; System call execu-
tion “4:open” has control dependence on “2:read” because
statement 4 has control dependence on 3 and 3 has data
dependence on 2 .
Next, we deﬁne subgraph isomorphism which will be used
to compare similarity of SCDGs.
Deﬁnition 5. (Graph Isomorphism) A bijective function
f : N → N ′ is a graph isomorphism from a graph G =
(N, E, α, β) to a graph G′ = (N ′, E ′, α′, β ′) if
• ∀n ∈ N, α(n) = α(f (n)),
• ∀e = (n1, n2) ∈ E, ∃e′ = (f (n1), f (n2)) ∈ E ′ such that
β(e) = β(e′),
• ∀e′ = (n′
1, n′
that β(e′) = β(e)
2) ∈ E ′, ∃e = (f −1(n′
1), f −1(n′
2)) ∈ E such
Deﬁnition 6. (Subgraph Isomorphism) A bijective func-
tion f : N → N ′ is a subgraph isomorphism from a graph
G = (N, E, α, β) to a graph G′ = (N ′, E ′, α′, β ′) if there ex-
ists a subgraph S ⊂ G′ such that f is a graph isomorphism
from G to S.
Plaintiff
Binary
Input
Suspect
Binary
Dynamic Analysis 
System
System Call, Call
Stack, Dependences
Noise Filtering
Extracting Plaintiff
SCDG Birthmarks
Dynamic Analysis 
System
System Call, Call
Stack, Dependences
Noise Filtering
Extracting Suspect
SCDG Birthmarks
Figure 2: System Overview
Compare 
SCDG Birthmarks 
Detection
Results
Deﬁnition 7. (γ-Isomorphism) A graph G is γ-isomorphic
to G′ if there exists a subgraph S ⊆ G such that S is sub-
graph isomorphic to G′, and |S| ≥ γ|G|, γ ∈ (0, 1].
Deﬁnition 8. (SCDGB: System Call Dependence Graph
Birthmark) Let p be a program or program component. Let
I be an input to p, and SCDGp be system call dependence
graph of the program run with input I. SCDG birthmark
SCDGBp is the subgraph of the graph SCDGp that satisﬁes
the following conditions:
• program or component q is a copy of p and SCDGq be
system call dependence graph of the program run of q with
input I ⇒ SCDGBp is subgraph isomorphic to SCDGq .
• program or component q is diﬀerent from p and SCDGq
be system call dependence graph of the program run of q
with input I ⇒ SCDGBp is not subgraph isomorphic to
SCDGq.
According to our deﬁnition of SCDG birthmark, program
q is regarded as plagiarized from program p if the SCDG
birthmark of p is subgraph isomorphic to SCDG of q. Al-
though as shown in our experiment SCDG birthmark is ro-
bust to state-of-the-art obfuscation techniques, for robust-
ness to unobserved and unexpected attacks, we relax sub-
graph isomorphism to γ-isomorphism in our detection. q is
regarded as plagiarized from that of p, if the SCDG birth-
mark of p is γ-isomorphic to SCDG of q. We set γ = 0.9
in experiments because we believe that overhauling 10% of
a SCDG birthmark is almost equivalent to changing the be-
havior of a program.
3. SYSTEM DESIGN
3.1 System Overview
Figure 2 shows the overview of our system. It consists of
four stages: dynamic analysis, noise ﬁltering, SCDG birth-
mark extraction, and birthmark comparison. Let us sum-
marize each of the steps before dealing with details in later
subsections.
Dynamic Analysis. In the ﬁrst step, automated dynamic
analysis is performed on both plaintiﬀ and suspect programs
to record their system call traces. For both programs, we
feed in the same input. Besides system calls, the call stack
for each system call and the dependence relation among sys-
tem calls are calculated and recorded.
Noise Filtering. System calls are low level implementation
of interactions between a program and an OS. It is possible
that two diﬀerent system call traces represent the same be-
havior, e.g., because of the existence of many system calls
that are dependent on runtime environment. Therefore, we
ﬁlter out noises from system call traces before extracting
birthmarks.
SCDG Birthmarks Extraction. We aim to detect com-
ponent theft. Therefore, in this step, we ﬁrst identify the
system calls invoked by the component of interest in a plain-
tiﬀ program and then extract SCDGs for the component.
Then, we divide SCDGs of the component into subgraphs,
and reﬁne the subgraphs by removing common nodes that
are also found in SCDGs of several unrelated programs. Fi-
nally, the remaining subgraphs are considered as birthmarks
of the plaintiﬀ component.
Although it is possible to choose the SCDG of the whole
suspect program for comparison, the graph’s size would be
too large to eﬃciently test subgraph isomorphism. As such,
we also divide the SCDG of a suspect program into sub-
graphs.
Birthmark Comparison. Once both plaintiﬀ and suspect
birthmarks are extracted, we examine the birthmarks for
a r-isomorphism using relaxed VF subgraph isomorphism
algorithm [14]. To increase the eﬃciency, three forms of
pruning are performed to reduce the search space.
3.2 Dynamic analysis
In this subsection, we ﬁrst brieﬂy introduce our dynamic
analysis system. Then, we describe the design details of the
dynamic instrumentation. Finally, deferred reference count-
ing is introduced and discussed to improve performance.
Our dynamic analysis system consists of Valgrind [23] and
Hawk, as shown in Figure 3. Valgrind is a generic frame-
work to instrument machine code at runtime, and Hawk
is a plugin tool we designed and developed for Valgrind.
Valgrind and Hawk work together to generate system call
traces and their dependences. Speciﬁcally, Valgrind takes
a binary client program, which is a plaintiﬀ or a suspect
program in our case, and an input to the client program
for dynamic analysis. Then, it decompiles the client’s ma-
chine code, one small code block at a time, in a just-in-
time, execution-driven fashion.
It disassembles the code
block into an architecture-neutral intermediate representa-
tion (IR) block.
In Hawk, every memory byte and regis-
ter of the client program is shadowed by a dependence set,
which is a set of system calls it depended on. Hawk instru-
ments the IR block given by Valgrind with analysis code.
The analysis code is used to update the shadow values of
the client program’s memory locations and registers. Then,
the instrumented IR block is converted back into machine
code by Valgrind and executed. The resulting translation
is stored in a code cache and thus it can be reused with-
out calling the instrumenter again. Valgrind also provides
system call hooks for Hawk to instrument system calls of
client programs. When a system call of a client program
is invoked, Hawk create a new node for the system call as
well as the dependence edges between the new node and the
other ones.
Program, Input
 Valgrind
      IR Block
 Hawk
Instrumented IR Block
System Call, Dependences, Call Stack, Output
Figure 3: Dynamic Analysis System
0x4000B02: addl %edx,4(%eax)
—— IMark(0x4000B02, 3) ——
*1:
2:
*3:
4:
*5:
6:
*7:
8:
*9:
10:
*11:
12:
t9 = GET:I32(0)
sh(t9) = sh(%eax)
t8 = Add32(t9,0x4:I32)
sh(t8) = sh(t9)
t2 = Ldle:I32(t8)
sh(t2) = sh(memory(t8))
t1 = GET:I32(8)
sh(t1) = sh(%edx)
t0 = Add32(t2,t1)
sh(t0) = sh(t2) ∪ sh(t1)
STle(t8) = t0
sh(memory(t8)) = sh(t0)
# get %eax
# add address
#load
# get %edx
# addl
# store
Next, we presents the details of IR instrumentation. The
Valgrind IR majorly consists of ﬁve types: load memory IR,
store memory IR, get register IR, put register IR, and ex-
pression IR. The ﬁrst four types of IR are used to read or
write values from memory and registers to the temporary
variables of an IR block. In Hawk, the instrumentation to
the ﬁrst four types of IR is just transferring of shadow val-
ues between a temporary variable and a register/memory
location. All actual operations are performed by expression
IR. An expression IR is abstracted as td = op(t1, t2, ..., tn)
(n<=4 in practice), where t1, t2, ..., tn denote the set of tem-
porary variables used by the IR and td denotes the tempo-
rary variable deﬁned. The instrumentation of the expression
IR is deﬁned by sh(td) = ∪(sh(t1), sh(t2), ..., sh(tn). Figure
4 shows an example of an IR block and its instrumentation.
Besides IR instrumentation, Hawk also instruments the
system calls of a client program to create new system call
nodes and dependence edges. When a system call occurs, a
handler function of Hawk is called. The system call infor-
mation (number, index, parameter and result) and its call
stack is recorded within the function.
In addition, a new
system call node is created, and dependence edges between
the new system call node and previous nodes are established
by the shadow values of the system call’s input parameters.
For example, the read system call in X86 Linux uses register
ebx as the input parameter, which stores a ﬁle descriptor id.
Dependence edges are created between this read system call
node and the nodes in the shadow values of ebx. Finally, the
new system call node is assigned to the shadow variables of
the system call’s output parameters. For example, the eax
register is the return variable of the open system call, stor-
ing the descriptor id of an opened ﬁle . The newly created
open system call node is assigned to the shadow value of the
eax register.
For large programs, Hawk may generate a great number
of intermediate dependence sets. Thus, a garbage collec-
tor for dependence sets is needed. There are several ways
to implement a garbage collector, such as reference count-
ing, mark-sweep and copy collection. Here we use reference
counting instead of mark-sweep or copy collection because
the number of dependence sets during execution are huge
and tracing would be prohibitively slow. Also, there are no
cycles to cause problems. However, a disadvantage of ref-
erence counting is that frequent update of reference count
may hurt performance. This is a severe problem in our case,
because every instrumentation of an IR may need to update
reference count. To solve this problem, we exploit deferred
reference counting [6]. Deferred reference counting was orig-
inally used to reduce the cost of maintaining reference counts
by avoiding adjustments when the reference is stored in the
stack.
In our case, we avoid updating references on tem-
poral variables due to the short lifetime of the temporal
0x4000B05: movl 0x2E0(%ebx),%eax
—— IMark(0x4000B05, 6) ——
*13:
*14:
15:
*16:
17:
*18:
19:
*20:
21:
PUT(60) = 0x4000B05:I32
t11 = GET:I32(12)
sh(t11) = sh(%ebx)
t10 = Add32(t11,0x2E0:I32) # add
sh(t10) = sh(t11)
t12 = Ldle:I32(t10)
sh(t12) = sh(memory(t10))
PUT(0) = t12
sh(%eax) = sh(t12)
# put %eip
# get %ebx
# load
# put %eax
Figure 4: IR instrumentation Example. Statements
with mark * are original IRs. Instrumentation IRs
are pseudo code for brevity.
variables. During the execution, dependence sets cannot be
reclaimed as soon as their reference counts become zero. Be-
cause there might still be references to them from temporal
variables, such sets are added to a zero count table (ZCT)
instead. The dependence sets in the ZCT are scanned at the
end of code blocks, and any sets with zero reference count
are reclaimed.
Currently, Hawk does not trace control dependence for
eﬃciency concerns. Our experiments in section 4 show that
data dependence alone is powerful enough for software theft
detection.
3.3 Noise Filtering
As a low level abstraction of the interaction between a
program and the OS, system call sequences contain noise.
Due to the noise system calls, the same behavior could be
represented by two diﬀerent system call sequences. We ﬁlter
out the noises from system call traces in the following ways.
First, some types of system calls are ignored because they
apparently do not represent the behavior characteristic of a
program. For example, the system call gettimeofday returns
the elapsed time since Epoch in seconds and microseconds.
Many programs periodically call gettimeofday with no sig-
niﬁcant impact on their behaviors; therefore, we remove get-
timeofday if no other system calls depend on them. Another
example is related to memory management system calls. A
libc malloc function is normally implemented by system call
brk and/or mmap. The mmap system call is used when
extremely large segments are allocated, while the brk sys-
tem call changes the size of the heap to be larger or smaller
as needed. Normally, C function malloc ﬁrst grabs a large
chunk of memory and then splits it as needed to get smaller
chunks. As such, not every malloc in C involves a system call
and two identical programs may have very diﬀerent memory