title:Sys: A Static/Symbolic Tool for Finding Good Bugs in Good (Browser)
Code
author:Fraser Brown and
Deian Stefan and
Dawson R. Engler
Sys: a Static/Symbolic Tool for Finding Good Bugs 
in Good (Browser) Code
Fraser Brown, Stanford University; Deian Stefan, UC San Diego; 
Dawson Engler, Stanford University
https://www.usenix.org/conference/usenixsecurity20/presentation/brown
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Sys: a Static/Symbolic Tool for Finding Good Bugs in Good (Browser) Code
Fraser Brown
Stanford University
Deian Stefan
UC San Diego
Dawson Engler
Stanford University
Abstract
We describe and evaluate an extensible bug-ﬁnding tool, Sys,
designed to automatically ﬁnd security bugs in huge code-
bases, even when easy-to-ﬁnd bugs have been already picked
clean by years of aggressive automatic checking. Sys uses a
two-step approach to ﬁnd such tricky errors. First, it breaks
down large—tens of millions of lines—systems into small
pieces using user-extensible static checkers to quickly ﬁnd and
mark potential errorsites. Second, it uses user-extensible sym-
bolic execution to deeply examine these potential errorsites
for actual bugs. Both the checkers and the system itself are
small (6KLOC total). Sys is ﬂexible, because users must be
able to exploit domain- or system-speciﬁc knowledge in order
to detect errors and suppress false positives in real codebases.
Sys ﬁnds many security bugs (51 bugs, 43 conﬁrmed) in well-
checked code—the Chrome and Firefox web browsers—and
code that some symbolic tools struggle with—the FreeBSD
operating system. Sys’s most interesting results include: an
exploitable, cash bountied CVE in Chrome that was ﬁxed in
seven hours (and whose patch was backported in two days); a
trio of bountied bugs with a CVE in Firefox; and a bountied
bug in Chrome’s audio support.
1 Introduction
This paper focuses on automatically ﬁnding security bugs,
even in code where almost everything easy-to-ﬁnd has been re-
moved by continuous checking with every tool implementers
could get their hands on. We check three systems in this
category (§5): Google’s Chrome browser, Mozilla’s Firefox
browser, and the SQLite database. Chrome fuzzers run 24/7
on over 25,000 machines [21] and are combined with dynamic
tools that look for low-level memory errors, while Firefox runs
at least six fuzzers just for its JavaScript engine [88]. Both
browsers run modern static bug ﬁnding tools and both pay
cash bounties for security vulnerabilities [51, 103]. Most ex-
tremely, the SQLite database, included in both Chrome and
Firefox and thus checked with all of their methods, also in-
cludes three independent test suites with 100% branch cover-
age which are run on many different architectures and conﬁg-
urations (32- and 64-bit, little and big endian, etc.) [22, 116].
Our new bug-ﬁnding system, Sys, was born out of our fail-
ure to ﬁnd security bugs in Chrome and Firefox. One of our
previous static tools—which looks for simple buggy patterns
in source code, along the lines of [39, 60, 85, 121]—found
only three security bugs in browsers [40]. As far as we could
tell, most of the security bugs it was capable of ﬁnding were
long gone. Our group’s symbolic execution tool, KLEE [45]—
which conceptually executes programs over all possible in-
puts, a powerful but expensive technique—simply couldn’t
scale to huge browser codebases off-the-shelf, and adapting
such a complex tool was daunting. To address the drawbacks
of both approaches, we combine them: static analysis, cheap
and imprecise, achieves high recall in identifying possible
errorsites, and symbolic analysis, expensive and thorough,
achieves high precision in reasoning about those errorsites.
Sys ﬁrst uses a static analysis pass to identify potential
errorsites. This pass is not precise, and typically errs on the
side of false positives over false negatives; Sys uses symbolic
execution (symex) to “clean up” these results, as we discuss
below. Users can write their own static extensions to identify
potentially buggy snippets of code, or they can use Sys’s
existing passes to point symex in the right direction.
Next, Sys uses symbolic execution to reason deeply about
each potential errorsite that static analysis (static) iden-
tiﬁes. Symbolic execution generally provides high preci-
sion [47, 124]. For example, it can determine that a certain
value must equal seven on one path and one hundred on the
other. Fine-grained value reasoning means that symex can
ﬁnd bugs that static can’t, but also makes symex routinely
intractable, even for small programs: it reasons about all pos-
sible values, whereas simple static analysis reasons primarily
about dataﬂows.
Sys sidesteps the symex bottleneck by only symbolically
executing small snippets of code that the static analysis pass
ﬂags as potentially buggy. Intuitively, this works because
many bugs only require a small amount of context to under-
stand (e.g., ﬁnding an inﬁnite loop may just require looking
at the loop’s body and header). This strategy is an adaption of
underconstrained (UC) symbolic execution [63, 115], which
improves the scalability of symex by executing individual
functions instead of whole programs. Sys takes this a step fur-
ther by only executing the snippets of code that static analysis
identiﬁes. Users can write their own symbolic analyses, or
they can use Sys’s existing analyses out-of-the-box.
USENIX Association
29th USENIX Security Symposium    199
Category
Sec-high
Sec-medium/moderate
Sec-low
Sec-other
Bounty
CVE
Security audits
Patched functions
Patched bugs
Already patched
Mystery patch
Reported bugs
Conﬁrmed bugs
False positives
Number
1 (13 total bugs)
4
4
3
3 (17 total bugs)
4 (18 total bugs)
2
27
16
3
5
51
43
18
Reference
[1]
[2–5]
[6–9]
[10, 11]
[1–3]
[1, 3, 4, 7]
[1, 12]
[1–3, 7, 11, 13, 14]
[1–3, 7, 11, 13, 14]
-
-
-
-
-
Figure 1: This table summarizes the bugs Sys found. We do not
double-count bugs or false positives that appear in both browsers.
Browser vendors classify security bugs as [53, 105]: sec-high, e.g.,
bugs attackers can use to corrupt the browser’s memory and hijack
its control ﬂow to, for instance, steal bank account information;
sec-medium, e.g., bugs attackers can use to leak browser memory
like login cookies; sec-low, bugs whose scope is limited, but would
otherwise be considered higher severity. The bounty row indicates
bugs that received cash rewards from the browsers in which they
appeared, and the CVE row lists bugs that have been listed in a global
vulnerability database. The security audits row lists bug reports that
have prompted developers to “audit” their code for more instances
of the bug we reported. Finally, the mystery patch row indicates
patches that are unaccounted for: they patch bugs that Sys found, but
because of backports, we can’t tell when they were patched.
Finally, we designed Sys to be ﬂexible, because real-world
checking is a game of iterative hypothesis testing: in our ex-
perience, it takes many tries to express a property (e.g., use of
uninitialized memory) correctly, and many more to suppress
false positives—and both tasks often take advantage of ad
hoc, program-speciﬁc information. We wanted Sys to com-
bine the ﬂexibility of a standard static checking framework
(e.g., the Clang Static Analyzer [87, 151]) with the power of
a symbolic execution engine.
The challenge of building a ﬂexible symbolic checking
tool is that symex is inherently complicated—it has to reason
about each individual bit in the program under test—but ﬂex-
ibility requires that using and changing the system be easy.
To address this challenge, we created an embedded domain-
speciﬁc language (DSL) to abstract some of the complications
of symbolic reasoning (§3). Users write symbolic checkers in
the DSL. The entire Sys symbolic execution engine is written
in the same DSL, which mechanically guarantees that users
have the power to write arbitrary checkers, extend the system,
or replace any part of it.
To the best of our knowledge, Sys is the ﬁrst system to do
symex on large, complex, automatically tested systems like
browsers. The main contributions of this work are:
1. An implementation of the system and ﬁve checkers
that ﬁnd good security bugs. We used Sys to build ﬁve
checkers for uninitialized memory, out-of-bounds access, and
use-after-free (UAF) bugs. Sys found 51 bugs (Figure 1) in
the Chrome browser, the Firefox browser, and the FreeBSD
operating system, many in complicated C++ code. Sys dis-
covered a group of 13 high-severity, exploitable SQLite bugs
in the Chrome browser (CVE-2019-5827), which the SQLite
author patched within seven hours; the patch was backported
to Chrome within two days [1]. Sys also discovered a trio of
bugs with a CVE in Firefox (CVE-2019-9805) [3], two more
browser CVEs [4, 7], a user-after-free bug in Firefox [14], and
a bountied bug in Chrome’s audio support [2]. Finally, Sys is
different enough from other checking tools that it can be used
to check the checkers themselves (and vice versa): one of our
bug reports [12] helped Firefox developers ﬁx a conﬁguration
problem in the Coverity commercial checking tool. Sys is
available at https://sys.programming.systems.
2. An approach for scaling symbolic reasoning to huge
codebases. Fundamentally, full symbolic execution cannot
scale to the browser. Sys’s combination of static analysis and
symbolic execution allows it to check entire browsers and
get meaningful results in human time. The slowest checker
covers all of Chrome in six hours on one (large) machine, and
ﬁnds many real bugs.
3. The design of a simple, extensible, DSL-based sym-
bolic checking system that makes it possible to experi-
ment with new checking techniques. As a rough measure of
complexity, Sys is only 6,042 lines of code (§3). It is easy to
write new checkers (our static extensions are nColumn+2;
/* static extension stores allocation size of  */
3401 a = sqlite3_malloc( (sizeof(u32)+10)*nStat );
3402 if( a==0 ){
3403
*pRC = SQLITE_NOMEM;
return;
3404
3405 }
···
3414 if( sqlite3_step(pStmt)==SQLITE_ROW ) { ...
3415 } else{
/* symbolic checker flags this  as an error,
the size passed in can be larger than  */
memset(a, 0, sizeof(u32)*(nStat) );
3419
3420 }
Figure 2: High-severity bug Sys found in SQLite: nColumn is a user-deﬁned
number of FTS3 columns, and attackers can craft a database with enough
columns to overﬂow the allocation on line 3401 to a small value. Then, the
big memset on line 3419 will be out-of-bounds [1].
a test case or an automatic dynamic tool is daunting, since
SQLite is a large,2 complex codebase even before being in-
cluded in Chrome—and the path (the sequence of instructions)
leading to the bug is complex, too. To reach it, you would have
to start Chrome’s WebSQL and make a database of the correct
kind—among other things, you would need to create a virtual
table instead of a regular table or view [1, 134]—which would
require correctly exercising huge paths. Even then, the tool or
test would have to stumble on the correct number of columns
to trigger the bug. Randomly orchestrating these events is
next to impossible. On the other hand, pure symbolic tools,
which work in theory, are unable to handle massive codebases.
Our group’s previous tool, KLEE [45], does whole program
symbolic execution on 10-30KLOC of C, not millions of lines
of C++. UC-KLEE, our group’s adaption to KLEE that scales
by symbolically executing functions in isolation, would still
need to be modiﬁed to check Chrome. Examining each of the
≈15 million Chrome functions would take about ﬁve CPU-
years even if execution time were bounded to 10 seconds per
function3 (§6).
2.2 How Sys ﬁnds the bug
Sys makes it easy for users to identify potential bugs, and then
lets them use symbolic reasoning (and their own application-
speciﬁc knowledge) to check them. We walk through Sys’s
three steps below: (1) statically scanning the source and mark-
ing potential errors, (2) jumping to each marked location to
check it symbolically, and (3) reasoning about state that Sys
misses because it skips code.
Static Clients write small static extensions—similar to
checkers that identify patterns in source code—to quickly
scan all checked code and mark potential errorsites (Figure 4).
Sys runs static extensions similarly to prior tools: it constructs
2Version 3.28.0 is 153,572 LOC according to cloc-1.8.
3UC-KLEE typically operates with a bound 30–60× longer than that, ﬁve
to ten minutes.
1
2
3
4
5
6
7
8