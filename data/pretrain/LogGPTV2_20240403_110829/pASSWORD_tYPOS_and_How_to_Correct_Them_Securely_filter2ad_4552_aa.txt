title:pASSWORD tYPOS and How to Correct Them Securely
author:Rahul Chatterjee and
Anish Athayle and
Devdatta Akhawe and
Ari Juels and
Thomas Ristenpart
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
pASSWORD tYPOS and
How to Correct Them Securely
Rahul Chatterjee∗, Anish Athalye†‡, Devdatta Akhawe‡, Ari Juels∗, Thomas Ristenpart∗
‡ Dropbox
∗ Cornell Tech,
† MIT,
treatment of
Abstract—We provide the ﬁrst
typo-tolerant
password authentication for arbitrary user-selected passwords.
Such a system, rather than simply rejecting a login attempt with
an incorrect password, tries to correct common typographical
errors on behalf of the user. Limited forms of typo-tolerance
have been used in some industry settings, but to date there has
been no analysis of the utility and security of such schemes.
We quantify the kinds and rates of typos made by users via
studies conducted on Amazon Mechanical Turk and via instru-
mentation of the production login infrastructure at Dropbox.
The instrumentation at Dropbox did not record user passwords
or otherwise change authentication policy, but recorded only the
frequency of observed typos. Our experiments reveal that almost
10% of login attempts fail due to a handful of simple, easily
correctable typos, such as capitalization errors. We show that
correcting just a few of these typos would reduce login delays
for a signiﬁcant fraction of users as well as enable an additional
3% of users to achieve successful login.
We introduce a framework for reasoning about typo-tolerance,
and investigate the seemingly inherent tension here between
security and usability of passwords. We use our framework to
show that there exist typo-tolerant authentication schemes that
can get corrections for “free”: we prove they are as secure as
schemes that always reject mistyped passwords. Building off this
theory, we detail a variety of practical strategies for securely
implementing typo-tolerance.
I. INTRODUCTION
Despite repeated calls for their demise (cf. [11]), human-
chosen passwords remain the primary form of user authen-
tication on the Internet. A long line of investigation has
shown that passwords are easily predicted by attackers (cf. [9],
[21], [42]), that strength meters offer limited improvements
to security [41], that password expiration does not increase
security [45], and that users have a hard time remembering
complex passwords [12], [37], [38], [41].
A handful of works have pointed out that complex, user-
chosen passwords are not only more difﬁcult to remember, but
also more difﬁcult to type [26], [27], [38]. But these studies
are quite limited, investigating neither the prevalence nor form
of typos across a wide user base. Additional anecdotes arise
in industry, where a few web services seem to intentionally
allow a small set of typos [2], [3], [6], [32]. Facebook currently
accepts a password whether or not the user capitalizes the
ﬁrst letter of their password (assuming it starts with a letter),
and whether or not
they have the caps lock on. But no
information about why they do this has been published, and,
more importantly, whether this degrades security is unclear.
We provide the ﬁrst detailed treatment of password typos.
We start by measuring empirically the rates and nature of
typos made by users. We perform preliminary experiments
with Amazon Mechanical Turk (MTurk) in which we task
human workers with transcribing passwords drawn from the
RockYou password leak.1 This does not perfectly model pass-
word entry (among other reasons, because the passwords were
not the workers’ own), but allows us to collect over 100,000
submissions in short order across thousands of workers. Our
experiment provides important, basic insights into common
typographical errors. We ﬁnd that a large number are proximity
errors (hitting a key near the intended one). Several other
common ones are what we call “easily-correctable” typos:
they can all be corrected by simple functions applied to the
submitted, incorrect password. Examples of the latter include
accidentally hitting the caps lock, implementing incorrect ﬁrst-
letter capitalization, adding a character to the front or end
of a password, and missing the shift key when entering a
symbol at the end of a password. These easily-correctable
typos account for 20% of the typos observed in our MTurk
study, an observation that serves as a key basis for our work.
Armed with correction functions for easily-correctable ty-
pos, we instrument Dropbox’s production, Internet-scale login
infrastructure. This permits measurement of typo prevalence at
scale without changing the way Dropbox currently performs
user authentication and with no increased risk of exposure of
passwords (i.e., we never store passwords or any information
that could help in guessing them). While we cannot reveal the
absolute number of requests seen during measurements for
reasons of conﬁdentiality, we note that Dropbox has hundreds
of millions of customers and all user accounts were instru-
mented. We ﬁrst perform a 24-hour measurement to identify
login attempts involving the easily-correctable, common typos
surfaced in the MTurk study. We ﬁnd that over 9% of failed
login attempts result from just one of three easily-correctable
typos (caps lock, ﬁrst letter case, and adding a character to
the end). We perform a subsequent 24-hour experiment to
analyze the impact of correcting just these top three typos.
This experiment reveals that 3% of all users failed to login,
but could have done so given correction of one of
these
three easily-correctable typos. Many other users could have
avoided multiple login attempts, signiﬁcantly decreasing the
time required to login. In summary, our measurements suggest
that easily-correctable password typos represent a signiﬁcant
burden on users and businesses.
1We submitted our experiment design to our IRB, but received an exemption
for lack of collecting any PII.
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Rahul Chatterjee. Under license to IEEE.
DOI 10.1109/SP.2016.53
DOI 10.1109/SP.2016.53
799
799
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
All of this suggests typo-tolerance could bring substantial
usability beneﬁts. What remains is to determine if such typo-
tolerance necessarily degrades security. The intuition would
be that it does, because guesses might cover multiple possible
passwords. We show, however, that this intuition is ﬂawed.
We provide a formal framework that enables principled
investigation. We deﬁne typo-tolerant password checkers, and
among these a special class that we call relaxed checkers.
Relaxed checkers are systems that start with an existing exact
system (e.g., comparing salted bcrypt hashes or using an en-
crypted password onion [18]). The system is “relaxed” through
a modiﬁcation that additionally searches a small space of
corrections to the submitted password. This search allows easy
deployment of typo-tolerance, while ensuring that security in
the face of server compromise is as in the exact checking case
(since stored values remain unchanged). Thus we focus on
analyzing online guessing attacks that seek to maximize their
probability of success by exploiting the extra typo checks.
We prove a free corrections theorem. It states that there
exists an optimal, fully secure typo-tolerant checker for any
desired set of corrections. Consequently: (1) The optimal
remote attack up to some query budget q is no more successful
than the optimal attack against an exact checker and (2)
No other checking scheme can improve the utility of typo
corrections while maintaining no loss in security. The key
insight
is that one can build a typo-tolerant checker that
forgoes corrections in the rare cases when doing so will allow
checking for multiple high-probability passwords.
Unfortunately, the optimal checker underlying the free cor-
rections theorem must be based on exact knowledge of the
password distribution—an assumption unlikely to be realizable
in practice. We therefore explore the security of a number
of practical typo-tolerant checkers, such as always correcting
the top three typos, checking corrections only when they
do not appear on a blacklist of common passwords, and a
version of the optimal checker that uses the RockYou password
leak [39] to estimate the password distribution. We then
perform a number of simulations to show that these typo-
tolerant checkers improve usability while remote guessing
attacks improve negligibly, even in the worst case of attackers
that somehow know the precise password distribution. For real
attackers that estimate the distribution, our simulations suggest
no improvement in online guessing attacks.
The contributions of this paper are the following:
• We are the ﬁrst to investigate the rate and nature of pass-
word typos made by users via measurement studies using
Mechanical Turk and the production login infrastructure
at Dropbox. Our work surfaces a small set of easily-
correctable typos, such as capitalization errors, that alone
prevent 3% of users from logging in during the period
of study. Correcting these few typos could therefore non-
negligibly boost user access to the Dropbox service.
• We introduce a formal framework for typo-tolerant pass-
word checkers and prove a free corrections theorem that
establishes the existence, in theory, of an optimal typo-
tolerant password checker that has no loss in security over
exact checking.
• We introduce a number of practical typo-tolerant pass-
word checkers that are compatible with existing password
storage systems. Simulations show that these checkers
can achieve no degradation in security yet still signiﬁ-
cantly improve login success rates.
Our focus is on web password ecosystems, but nothing about
our techniques is unique to this setting. Our typo-tolerant
checkers could easily be integrated in other settings such as
logging into a desktop or laptop computer, though measure-
ments are probably warranted to understand what are the best
typo corrections for these other settings. We leave this to future
work.
Immediate impact of our work.
In the course of this
research, our results prompted Dropbox to deploy a caps lock
indicator on their website’s password login interface. This
indicator is like the one already available in Apple OS X,
but appears in all browsers. Preliminary results suggest that
it reduces caps lock errors by about 75%, and thus provides
signiﬁcant beneﬁt. Unfortunately, it does not eliminate caps-
lock errors nor assist with other sorts of common typos. So
while our results in this paper have already had a practical
impact, we hope that they will also fuel further advances in
the mitigation of password typos.
II. BACKGROUND AND RELATED WORK
Password checking and threats. Traditional password-based
authentication systems work as follows. A user chooses a
username and a password at registration time. For subsequent
logins, the user submits their username and password. Using
some stored representation of the password (e.g., a salted
hash), a password checking scheme determines whether the
submitted password matches the registered one. Login is
allowed only if the equality check passes. A more formal
treatment appears later in Section V.
In terms of security, two main threats arise in the context
of password checking systems. The ﬁrst is online guessing
attacks in which the attacker can submit guesses to the
checking system via the standard interface. The attacker might
target a particular login (a vertical attack), or try popular
passwords against multiple accounts (a horizontal attack). Here
the system can employ various countermeasures to mitigate
online attacks, such as slowing down how quickly responses
are returned, locking accounts after a certain number of queries
per unit time, and using anomaly detection mechanisms to
ﬂag requests as unauthentic based on contextual information.
The second main threat is leakage to attackers of password
hash databases due to compromise of authentication systems
or accidental data disclosure. These attackers can mount ofﬂine
brute-force attacks in an attempt to crack the passwords. Our
focus will be on online brute-force attacks as, looking ahead,
our checkers will be compatible with existing password storage
800800
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
schemes and thus no alter security with respect to ofﬂine
attacks. We discuss more in Section V.
Typos in user-selected passwords. A number of prior mea-
surement studies reveal the tendency of users to choose weak
passwords [12], [21], [31] with highly skewed, heavy-headed
distributions (i.e., a relatively small number of passwords are
chosen by a large number of people). The most-stated reason
is that ease-of-memorability guides users to simple, common
passwords. While memorability is clearly a critical aspect of
usability, users may also be reluctant to choose more complex
passwords because entering them is difﬁcult, error-prone, and
slow. The problem may be exacerbated by various input device
form factors, e.g., mobile phone touch keyboards.
Few works have measured the difﬁculty of correctly entering
user-chosen passwords. Keith et al. [27] measured the usability
of user-selected passphrases in comparison to passwords for a
cohort of 56 undergraduate students. They showed that 2.2%
of entries of user-chosen passwords had a typo (deﬁned by
thresholding via Levenshtein distance), and the rate of typos
roughly doubles for more complex passwords (at least length
7, one upper-case, one lower-case, one non-letter). A follow-up
study by the same authors also revealed a typo rate of roughly
2% with another small corpus of students [26]. Their studies,
being of small scale, may not generalize to other settings, and
the authors do not analyze the types of errors subjects made.
Mazurek et al. [29] hypothesize that users may pick weaker
passwords because they are simpler to type and that more
complex passwords are harder to type. Via large-scale mea-
surements of a university authentication system, they show that
login errors are correlated with stronger passwords. However,
they do not analyze the nature of errors, i.e., whether they
were in fact typos, typing in the entirely wrong password, or
some other problem.
Server-side hashing changes. In theory a secure sketch [17]
could be used to correct some typos in the server side. How-
ever, the proven bounds for existing constructions are too weak
to provide meaningful protection for our setting (in which
entropy is quite low). More details are given in Appendix A.
Mehler and Skiena [30] propose to allow controlled collisions
in password hashing so that, with high probability, passwords
with a transposition or substitution error hash to the same
value. Both such approaches to typo-tolerant techniques are
not backwards-compatible with existing password storage and
also will degrade ofﬂine attack security.
Typos in passphrase systems. Shay et al. [37] perform
a study of system-generated passwords that are chosen
uniformly for a user, chosen uniformly to be pronounce-
able, or chosen uniformly among CorrectHorseBatteryStaple-
type passphrases [33] of various word lengths. They mea-
sure typos and investigate the correlation between pass-
word/passphrase length and typing errors, and investigate
simple typo-tolerance strategies such as ignoring case com-
pletely and, for passphrases, combining words from a dictio-
nary whose strings have large pairwise Damerau-Levenshtein
in turn, enables correction by
distance [15], [28], which,
comparison with the dictionary. This latter suggestion is orig-
inally due to Bard [7]. Later, Jakobsson and Akavipat [24]
suggest similar dictionary-checking-based error correction in
what they call fastwords. In contrast to the above works, we
focus on arbitrary user-chosen passwords, so these previous
measurements and mechanisms unfortunately do not apply to
our setting.
Typo-tolerant checking in industry. There have been sev-
eral examples of major websites accepting slightly incorrect
versions of user-chosen passwords. Facebook as early as 2011
accepted the correct password, the password with all letters’
cases ﬂipped, or the password with the ﬁrst letter’s case ﬂipped
(if it is indeed a letter) [2], [32]. These two modiﬁcations
correspond to errors resulting from leaving the caps lock on (or
off) or the tendency of (particularly) mobile phone keyboards
to automatically capitalize the ﬁrst entered character. Early
password authentication mechanisms at Amazon allegedly
ignored case and any characters beyond the eighth position due
to a bug [1]. Users of Vanguard (an investment management
company) reported that the answers to security questions could
have typographical errors and still be accepted [3].
These companies faced signiﬁcant backlash in the media
and from some security professionals [1]–[3]. The assumption
underlying the criticism seems to be that accepting any variant
of a password will necessarily speed up online guessing
attacks.
Open questions. To summarize, before our work there was
no information available about the kinds of typos that burden
users typing user-selected passwords and whether typo-tolerant
password checking systems are achievable without degrading
security. We seek to answer these questions here.
III. UNDERSTANDING TYPOS EMPIRICALLY
We start with experiments using Amazon Mechanical Turk
(MTurk)
[14] to measure the kinds of typos that people
make when typing passwords. The goal of this preliminary
measurement study is to discover the most frequent typos
across a population for typical user-chosen passwords. We
will follow on up these MTurk experiments with real user data
using instrumentation of the Dropbox operational environment
(discussed in Section IV).
Experiment design. MTurk allows custom-designed human-
intelligence tasks (HITs) to be submitted to workers over the
web. We created a password-typing HIT that asks a worker
to type k passwords within a given time limit. Inside a HIT,
every password needs to be typed within a conventional HTML
password-type input box, i.e., each typed character shows up
as a dot. Copy-paste functionality is disabled in the input
boxes using the html “onpaste=false oncopy=false”
option. This check can be circumvented by changing the
browser settings, but we recorded all key presses inside an
input box and used this to help ﬁlter out copy-paste attempts.
We did not ﬁnd any circumvention in the collected data.
801801
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
Our MTurk experiment design mainly aims at gathering data
efﬁciently to identify common typos and trends. We note that
the typos found in transcribing passwords in MTurk may not
be truly representative of the typos users make when typing
their own passwords. Performing a longitudinal study using
MTurk where users retype their chosen password multiple
times would be interesting, but it would be logistically com-
plicated and would greatly slow the data collection rates while
still not providing real ecological validity [19]. The reasons for
experimenting in MTurk is that prospecting for common typos
in a real operational environment, such as Dropbox’s, would
seem to require storing information about plaintext passwords
in between logins, which could represent a signiﬁcant security
problem. Thus we adopt the two-phase investigative approach.
First prospecting for common typos via MTurk and, given a
list of such typos, presenting a measurement of real-world
Dropbox user typos later in the paper.
In our MTurk experiments we ask workers to type the
passwords which are sourced from the RockYou password
leak [39]. This data set is the largest plaintext password leak
to date, with passwords from over 32 million users. It has been
used widely for password-related studies and the distribution