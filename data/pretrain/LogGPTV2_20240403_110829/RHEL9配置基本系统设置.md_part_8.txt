    请注意，在附加报告时会提示您输入相关问题单的号码。
:::
::: itemizedlist
**其他资源**
-   [什么是 sosreport ，以及如何在 Red Hat Enterprise Linux
    中创建？](https://access.redhat.com/solutions/3592){.link}
:::
:::
:::
[]{#introduction-to-systemd_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#introduction-to-systemd_configuring-basic-system-settings}第 12 章 systemd 简介 {.title}
:::
[**systemd**]{.strong} 是 Linux 操作系统的系统和服务管理器。它被设计为与
SysV
初始化脚本向后兼容，并提供一些功能，如在引导时并行启动系统服务、按需激活守护进程或基于依赖项的服务控制逻辑。从
Red Hat Enterprise Linux 7 开始，[**systemd**]{.strong} 替换了 Upstart
作为默认 init 系统。
[**systemd**]{.strong} 引入了 [*systemd
单元*]{.emphasis}的概念。这些单元由位于下表中列出的目录之一的单元配置文件来表示：
::: table
[]{#introduction-to-systemd_configuring-basic-system-settings.html#tabl-introduction-to-systemd}
**表 12.1. systemd 单元文件位置**
::: table-contents
  目录                                   描述
  -------------------------------------- ----------------------------------------------------------------------------------------------------------------------------------
  `/usr/lib/systemd/system/`{.literal}   安装的 RPM 软件包的 systemd 单元文件。
  `/run/systemd/system/`{.literal}       在运行时创建 systemd 单元文件。该目录优先于安装了的服务单元文件的目录。
  `/etc/systemd/system/`{.literal}       systemd 单元文件由 `systemctl enable`{.literal} 命令创建，并添加用于扩展服务的单元文件。这个目录优先于带有运行时单元文件的目录。
:::
:::
单元封装了以下相关信息：
::: itemizedlist
-   系统服务
-   侦听套接字
-   与 init 系统相关的其他对象
:::
[**systemd**]{.strong} 的默认配置是在编译过程中定义的，它可在
`/etc/systemd/system.conf`{.literal} 的 systemd
配置文件中找到。如果您想与那些默认值分离，并全局覆盖所选的 systemd
单元默认值，请使用这个文件。
例如：要覆盖超时限制的默认值（设置为 90 秒）,请使用
`DefaultTimeoutStartSec`{.literal} 参数输入所需的值，以秒为单位。
``` literallayout
DefaultTimeoutStartSec=pass:_required value_
```
::: section
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#ref_systemd-unit-types_introduction-to-systemd}systemd 单元类型 {.title}
:::
有关可用 systemd 单元类型的完整列表，请查看下表：
::: table
[]{#introduction-to-systemd_configuring-basic-system-settings.html#tabl-systemd-unit-types}
**表 12.2. 可用的 systemd 单元类型**
::: table-contents
  单位类型         文件扩展                 描述
  ---------------- ------------------------ ----------------------------------
  服务单元         `.service`{.literal}     系统服务。
  目标单元         `.target`{.literal}      一组 systemd 单元。
  Automount 单元   `.automount`{.literal}   文件系统自动挂载点。
  设备单元         `.device`{.literal}      内核可识别的设备文件。
  挂载单位         `.mount`{.literal}       文件系统挂载点。
  路径单元         `.path`{.literal}        文件系统中的一个文件或者目录。
  Scope 单元       `.scope`{.literal}       外部创建的进程。
  Slice 单元       `.slice`{.literal}       一组管理系统进程的分层组织单元。
  套接字单元       `.socket`{.literal}      进程间的通信套接字。
  Swap 单元        `.swap`{.literal}        一个交换设备或者一个交换文件。
  计时器单元       `.timer`{.literal}       systemd 计时器。
:::
:::
:::
::: section
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#con_systemd-main-features_introduction-to-systemd}systemd 主要特性 {.title}
:::
systemd 系统和服务管理器提供以下主要功能：
::: itemizedlist
-   [**基于套接字的激活**]{.strong} -
    在系统引导时，[**systemd**]{.strong}
    为支持此类激活的所有系统服务创建侦听套接字，并在服务启动后立即将套接字传递给这些服务。这不仅允许
    [**systemd**]{.strong}
    并行启动服务，还可以在它不可用时重启这个服务，而不会丢失发送到该服务的任何消息：对应的套接字可以访问，所有消息都已排队。
    [**systemd**]{.strong} 使用 [*套接字单元*]{.emphasis}
    进行基于套接字的激活。
-   [**基于总线的激活**]{.strong} - 将 D-Bus
    用于进程间通信的系统服务可以在客户端应用程序尝试与它们通信时按需启动。[**systemd**]{.strong}
    将 [*D-Bus 服务文件*]{.emphasis} 用于基于总线的激活。
-   [**基于设备的激活**]{.strong} \--
    对于支持基于设备激活的系统服务，当一个特定硬件被插入时，或设备变为不可用时，可以根据需要重启服务。[**systemd**]{.strong}
    使用[*设备单元*]{.emphasis}实现基于设备的激活。
-   [**基于路径的激活**]{.strong} ---
    当特定文件或目录的状态发生变化时，支持基于路径的激活的系统服务可按需启动它的状态。[**systemd**]{.strong}
    使用[*路径单元*]{.emphasis}实现基于路径的激活。
-   [**挂载和自动挂载点管理**]{.strong} - [**systemd**]{.strong}
    监控并管理挂载和自动挂载点。[**systemd**]{.strong} 使用
    [*挂载单元*]{.emphasis} 作为挂载点，[*automount 单元*]{.emphasis}
    用于自动挂载点。
-   [**积极并行化**]{.strong} -
    由于使用基于套接字的激活，[**systemd**]{.strong}
    可以在所有侦听的套接字都就绪时并行启动系统服务。和支持按需激活的系统服务相结合，并行激活可大大减少引导系统所需的时间。
-   [**事务单元激活逻辑**]{.strong} -
    在激活或停用单元之前，[**systemd**]{.strong}
    计算其依赖项，创建临时事务，并验证这个事务是否一致。如果一个事务出现不一致的情况，[**systemd**]{.strong}
    会自动尝试更正它并从其中删除非必要作业，然后再报告错误。
-   [**与 SysV init 的后向兼容性**]{.strong} - [**systemd**]{.strong}
    支持 SysV init 脚本，如 [*[Linux Standard Base Core
    规格]{.citetitle}*]{.emphasis} 中所述，这简化了 systemd
    服务单元的升级路径。
:::
:::
::: section
::: titlepage
# []{#introduction-to-systemd_configuring-basic-system-settings.html#con_compatibility-changes_introduction-to-systemd}兼容性更改 {.title}
:::
systemd 系统和服务管理器的主要设计思想是与 SysV init 和 Upstart
兼容。以下是与使用 SysV init 的 Red Hat Enterprise Linux 6
系统相关的最显著兼容性更改：
::: itemizedlist
-   [**systemd**]{.strong}
    只对运行级别（runlevel）提供有限支持。它还提供了很多目标单元，可以直接映射到这些运行级别，并且出于兼容性的原因，它也随早期的
    `运行级别`{.literal} 命令发布。但是，并非所有 systemd
    目标都可直接映射到运行级别，因此此命令可能会返回 `N`{.literal}
    以指示未知运行级别。建议您尽可能避免使用 `runlevel`{.literal}
    命令。\
    有关 systemd 目标及其与运行级别比较的更多信息，请参阅[使用 systemd
    目标](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/working-with-systemd-targets_configuring-basic-system-settings){.link}。
-   `systemctl`{.literal} 程序不支持自定义命令。除了 `start`{.literal},
    `stop`{.literal} 和 `status`{.literal} 等标准命令外，SysV init
    脚本的作者还可以对任意数量的任意命令实施支持，以提供附加功能。例如，`iptables`{.literal}
    的 init 脚本可以使用 `panic`{.literal} 命令来执行，该命令可立即启用
    panic
    模式并重新配置系统以开始丢弃所有传入和传出数据包。[**systemd**]{.strong}
    不支持它，`systemctl`{.literal} 只接受记录的命令。
-   `systemctl`{.literal} 实用程序与没有由 [**systemd**]{.strong}
    启动的服务通信。当 [**systemd**]{.strong}
    启动系统服务时，它会保存其主进程的 ID
    以跟踪它。然后，`systemctl`{.literal} 程序使用这个 PID
    来查询和管理该服务。因此，如果用户直接在命令行启动某个特定的守护进程，
    `systemctl`{.literal} 就无法决定其当前状态或停止它。
-   [**systemd**]{.strong}
    只会停止运行的服务。之前，当启动关闭序列时，Red Hat Enterprise Linux
    6 以及之前的发行本都使用位于 `/etc/rc0.d/`{.literal}
    目录中的符号链接停止所有可用的系统服务，而不考虑它们的状态。使用
    [**systemd**]{.strong} 时，只有运行的服务才会在关闭时停止。
-   系统服务无法从标准输入流读取。当 [**systemd**]{.strong}
    启动一个服务时，它会将其标准输入连接到
    `/dev/null`{.literal}，以防止与用户的任何交互。
-   系统服务不会从调用用户及其会话继承任何上下文（如 `HOME`{.literal} 和
    `PATH`{.literal} 环境变量）。每个服务都在干净的执行上下文中运行。
-   加载 SysV init 脚本时，[**systemd**]{.strong} 会读取在 Linux
    Standard Base(LSB)标头中编码的依赖关系信息，并在运行时对其进行解释。
-   服务单元中的所有操作都会被默认超时时间 5
    分钟，以防止出现故障的服务释放系统。这个值在从 initscripts
    生成的且无法更改的服务中是被硬编码的。但是，可以使用单个配置文件为每个服务指定一个较长的超时值，请参阅[更改超时限制](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#proc_changing-the-timeout-limit_assembly_working-with-systemd-unit-files){.link}。
:::
:::
:::
[]{#managing-system-services-with-systemctl_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#managing-system-services-with-systemctl_configuring-basic-system-settings}第 13 章 使用 systemctl 管理系统服务 {.title}
:::
`systemctl`{.literal} 实用程序帮助管理系统服务。您可以使用
`systemctl`{.literal}
实用程序执行与不同服务相关的不同任务，如启动、停止、重启、启用和禁用服务、列出服务以及显示系统服务状态。
这部分论述了如何使用 `systemctl`{.literal} 工具管理系统服务。
::: section
::: titlepage
# []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#service-unit-management-with-systemctl_managing-system-services-with-systemctl}使用 systemctl 管理服务单元 {.title}
:::
[**服务单元**]{.strong}可以帮助控制系统中的服务和守护进程的状态。
服务单元以 `.service`{.literal} 文件扩展结尾，如
`nfs-server.service`{.literal}。但是，在命令中使用服务文件名时，您可以省略文件扩展名。`systemctl`{.literal}
实用程序假设该参数是一个服务单元。例如，要停止
`nfs-server.service`{.literal}，请输入以下命令：
``` literallayout
# systemctl stop nfs-server
```
此外，一些服务单元也会有[**别名名称**]{.strong}。别名可以短于实际的单位，您可以使用它们而不是使用实际单元名称。
要查找可用于特定单元的所有别名，请使用：
``` literallayout
# systemctl show nfs-server.service -p Names
```
::: itemizedlist
**其他资源**
-   [服务工具与 systemctl
    的比较](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#comparison-of-a-service-utility-with-systemctl_managing-system-services-with-systemctl){.link}
-   [列出系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#listing-system-services_managing-system-services-with-systemctl){.link}
-   [显示系统服务状态](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#displaying-system-service-status_managing-system-services-with-systemctl){.link}
-   [启动系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#starting-a-system-service_managing-system-services-with-systemctl){.link}
-   [重启系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#restarting-a-system-service_managing-system-services-with-systemctl){.link}
-   [启用系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#enabling-a-system-service_managing-system-services-with-systemctl){.link}
-   [禁用系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#disabling-a-system-service_managing-system-services-with-systemctl){.link}
-   [停止系统服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/managing-system-services-with-systemctl_configuring-basic-system-settings#stopping-a-system-service_managing-system-services-with-systemctl){.link}
:::
:::
::: section
::: titlepage
# []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#comparison-of-a-service-utility-with-systemctl_managing-system-services-with-systemctl}服务工具与 systemctl 的比较 {.title}
:::
本节显示服务实用程序和使用 `systemctl`{.literal} 命令的比较。
::: table
[]{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#tabl-comparison-of-a-service-utility-with-systemctl}
**表 13.1. service 工具程序和 systemctl 的比较**
::: table-contents
+----------------------+----------------------+----------------------+
| service              | systemctl            | 描述                 |
+:=====================+:=====================+:=====================+
| `service  start`{.literal} | ystemctl start .service`{.literal} |                      |
+----------------------+----------------------+----------------------+
| `service  stop`{.literal} | systemctl stop .service`{.literal} |                      |
+----------------------+----------------------+----------------------+
| `service  restart`{.literal} | temctl restart .service`{.literal} |                      |
+----------------------+----------------------+----------------------+
| `service  co   | `systemc             | 仅在运行时重启服务。 |
| ndrestart`{.literal} | tl try-restart .service`{.literal} |                      |
+----------------------+----------------------+----------------------+
| `service  reload`{.literal} | stemctl reload .service`{.literal} |                      |
+----------------------+----------------------+----------------------+
| `service  status`{.literal} | stemctl status .service`{.literal} |                      |
|                      |                      |                      |
|                      | `syste               |                      |
|                      | mctl is-active .service`{.literal} |                      |
+----------------------+----------------------+----------------------+
| `service --s         | `systemctl li        | 显示所有服务的状态。 |
| tatus-all`{.literal} | st-units --type serv |                      |
|                      | ice --all`{.literal} |                      |
+----------------------+----------------------+----------------------+
:::
:::
:::
::: section
::: titlepage
# []{#managing-system-services-with-systemctl_configuring-basic-system-settings.html#listing-system-services_managing-system-services-with-systemctl}列出系统服务 {.title}
:::
您可以列出所有当前载入的服务单元以及所有可用服务单元的状态。
::: itemizedlist
**流程**
-   要列出所有当前载入的服务单元，请输入：
    ``` literallayout
    $ systemctl list-units --type service
    UNIT                     LOAD   ACTIVE SUB     DESCRIPTION
    abrt-ccpp.service        loaded active exited  Install ABRT coredump hook
    abrt-oops.service        loaded active running ABRT kernel log watcher
    abrtd.service            loaded active running ABRT Automated Bug Reporting Tool
    ----
    systemd-vconsole-setup.service loaded active exited  Setup Virtual Console
    tog-pegasus.service            loaded active running OpenPegasus CIM Server
    LOAD   = Reflects whether the unit definition was properly loaded.
    ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
    SUB    = The low-level unit activation state, values depend on unit type.
    46 loaded units listed. Pass --all to see loaded but inactive units, too.
    To show all installed unit files use 'systemctl list-unit-files'
    ```
    默认情况下，`systemctl list-units`{.literal}
    命令只显示活跃的单位。对于每个服务单元文件，命令会显示：
    ::: itemizedlist
    -   `UNIT`{.literal} ：其全名
    -   `LOAD`{.literal} ：是否载入了单元文件的信息
    -   `ACTIVE`{.literal}\\ `SUB`{.literal}
        ：其高级别和低级单元文件激活状态
    -   `DESCRIPTION`{.literal}: 一个较短的描述信息
    :::
-   要列出[**所有载入的单元，而不考虑其状态**]{.strong}，使用
    `--all`{.literal} 或 `-a`{.literal} 命令行选项输入以下命令：
    ``` literallayout
    $ systemctl list-units --type service --all
    ```
-   要列出所有可用服务单元的状态（[**启用/禁用**]{.strong}），请输入：
    ``` literallayout