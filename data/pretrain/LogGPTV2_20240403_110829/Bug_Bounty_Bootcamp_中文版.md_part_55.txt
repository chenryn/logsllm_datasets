use cases of proxy services are to bypass organization firewalls that
block certain websites, browse the internet anonymously, or encrypt
internet messages.
另一方面，代理服务指的是充当两台机器之间中介的服务。他们坐在请求的客户端和服务器之间，以促进或控制它们的通信。代理服务的常见用例是绕过组织防火墙，阻止特定网站的访问，匿名浏览互联网或加密互联网消息。
[ ]{#c13.xhtml#Page_217 .pagebreak title="217"}
![[Figure 13-1]{#c13.xhtml#figure13-1} : Adding a webhook to Slack ¶
图13-1：将Webhook添加到Slack。](image_fi/501546c13/f13001.png){.keyline}
Notice these potentially vulnerable features on the target site and
record them for future reference in a list like this:
请注意目标站点上可能存在的易受攻击的特点，并将它们记录在类似于此的列表中，以备将来参考：
**Potential SSRF Endpoints**
潜在的 SSRF 终端点
1.  Add a new webhook:
```{=html}
```
    POST /webhook
    Host: public.example.com
    (POST request body)
    url=https://www.attacker.com
1.  File upload via URL:
```{=html}
```
    POST /upload_profile_from_url
    Host: public.example.com
    (POST request body)
    user_id=1234&url=https://www.attacker.com/profile.jpeg
1.  Proxy service:
```{=html}
```
    https://public.example.com/proxy?url=https://google.com
### [ ]{#c13.xhtml#Page_218 .pagebreak title="218"} Step 2: Provide Potentially Vulnerable Endpoints with Internal URLs {#c13.xhtml#h2-123456c13-0002}
Once you've identified the potentially vulnerable endpoints, provide
internal addresses as the URL inputs to these endpoints. Depending on
the network configuration, you might need to try several addresses
before you find the ones in use by the network. Here are some common
ones reserved for the private network: *localhost* , 127.0.0.1, 0.0.0.0,
192.168.0.1, and 10.0.0.1.
一旦您确定可能存在漏洞的终端点，将内部地址作为URL输入提供给这些终端点。根据网络配置，您可能需要尝试多个地址，才能找到网络正在使用的地址。以下是一些为私有网络保留的常见地址：localhost,
127.0.0.1, 0.0.0.0, 192.168.0.1和10.0.0.1。
You can find more reserved IP addresses used to identify machines on the
private network at
[https://en.wikipedia.org/wiki/Reserved_IP_addresses](https://en.wikipedia.org/wiki/Reserved_IP_addresses){.LinkURL}
.
您可以在https://zh.wikipedia.org/wiki/保留IP地址找到更多用于识别私有网络上的机器的保留IP地址。
To illustrate, this request tests the webhook functionality:
例如，此请求测试Webhook功能：
    POST /webhook
    Host: public.example.com
    (POST request body)
    url=https://192.168.0.1
This request tests the file upload functionality:
这个请求测试文件上传功能。
    POST /upload_profile_from_url
    Host: public.example.com
    (POST request body)
    user_id=1234&url=https://192.168.0.1
And this request tests the proxy service:
这个请求测试代理服务：
    https://public.example.com/proxy?url=https://192.168.0.1
### Step 3: Check the Results {#c13.xhtml#h2-123456c13-0003}
In the case of regular SSRF, see if the server returns a response that
reveals any information about the internal service. For example, does
the response contain service banners or the content of internal pages? A
*service banner* is the name and version of the software running on the
machine. Check for this by sending a request like this:
在正常 SSRF
的情况下，请查看服务器是否返回了显示内部服务信息的响应。例如，响应是否包含服务横幅或内部页面的内容？服务横幅是运行在计算机上的软件名称和版本。通过发送像这样的请求检查它：
    POST /upload_profile_from_url
    Host: public.example.com
    (POST request body)
    user_id=1234&url=127.0.0.1:22
Port 22 is the default port for the Secure Shell Protocol (SSH). This
request tells the application that the URL of our profile picture is
located at 127.0.0.1:22, or port 22 of the current machine. This way, we
can trick the server into visiting its own port 22 and returning
information about itself.
22端口是安全外壳协议（SSH）的默认端口。该请求告诉应用程序，我们的个人资料图片的URL位于127.0.0.1:22或当前机器的22端口。这样，我们就可以欺骗服务器访问其自己的22端口，并返回有关自己的信息。
Then look for text like this in the response:
然后在响应中寻找类似这样的文本：
    Error: cannot upload image: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.4
[ ]{#c13.xhtml#Page_219 .pagebreak title="219"} If you find a message
like this, you can be sure that an SSRF vulnerability exists on this
endpoint, since you were able to gather information about the localhost.
如果您发现类似此消息，那么可以肯定该终端存在 SSRF
漏洞，因为您已能够收集有关本地主机的信息。
The easiest way of detecting blind SSRFs is through out-of-band
techniques: you make the target send requests to an external server that
you control, and then monitor your server logs for requests from the
target. One way to do this is to use an online hosting service, such as
GoDaddy or Hostinger, that provides server access logs. You can link
your hosted site to a custom domain and submit that domain in the SSRF
testing payload.
检测盲SSRF的最简单方法是使用带外技术：您让目标发送请求到您控制的外部服务器，然后监视您服务器日志中的目标请求。一种方法是使用在线托管服务，如GoDaddy或Hostinger，提供服务器访问日志。您可以将托管网站链接到自定义域，并将该域提交给SSRF测试有效载荷。
You can also turn your own machine into a listener by using Netcat, a
utility installed by default on most Linux machines. If you don't
already have Netcat, you can install it by using the command
`      apt-get install netcat     ` . Then use `      nc -lp 8080     `
to start a listener on port 8080. After this, you can point your SSRF
payloads to your IP address on port 8080 and monitor for any incoming
traffic. Another easier way of doing this is to use the Collaborator
feature in Burp Suite Pro, which automatically generates unique domain
names, sends them as payloads to the target, and monitors for any
interaction associated with the target.
您也可以使用默认安装在大多数Linux机器上的实用程序Netcat将自己的机器变成侦听器。如果您尚未安装Netcat，则可以使用命令apt-get
install netcat进行安装。然后使用nc -lp
8080在端口8080上启动侦听器。之后，您可以将SSRF有效负载指向您的IP地址在端口8080，并监视任何传入的流量。另一种更简单的方法是使用Burp
Suite
Pro中的Collaborator功能，它会自动生成唯一的域名，将它们作为有效负载发送到目标，并监视与目标相关的任何交互。
However, being able to generate an outbound request from the target
server alone is not an exploitable issue. Since you cannot use blind
SSRFs to read internal files or access internal services, you need to
confirm their exploitability by trying to explore the internal network
with the SSRF. Make requests to various target ports and see if server
behavior differs between commonly open and closed ports. For example,
ports 22, 80, and 443 are commonly open ports, while port 11 is not.
This will help you determine if an attacker can use the SSRF to access
the internal network. You can look especially for differences in
response time and HTTP response codes.
然而，仅从目标服务器生成一个出站请求并不是一个可利用的问题。由于您无法使用盲目的SSRF读取内部文件或访问内部服务，您需要通过尝试使用SSRF来探索内部网络来确认其可利用性。向各种目标端口发出请求，看看服务器行为在通常开放和关闭的端口之间是否有所不同。例如，端口22、80和443是常见的开放端口，而端口11则不是。这将帮助确定攻击者是否可以使用SSRF访问内部网络。您可以特别寻找响应时间和HTTP响应代码的差异。
For example, servers use the HTTP status code 200 to indicate that a
request has succeeded. Often, if a server is able to connect to the
specified port, it will return a 200 status code. Say the following
request results in an HTTP status code of 200:
例如，服务器使用HTTP状态码200来表示请求已成功。通常情况下，如果服务器能够连接到指定的端口，它将返回200状态码。假设以下请求的HTTP状态代码为200：
    POST /webhook
    Host: public.example.com
    (POST request body)
    url=https://127.0.0.1:80
The following request instead results in an HTTP status code of 500, the
status code for Internal Server Error. Servers return 500 status codes
when they run into an error while processing the request, so a 500
status code often indicates a closed or protected port:
以下请求导致HTTP状态代码为500，这是"内部服务器错误"的状态代码。当服务器在处理请求时遇到错误时，会返回500状态代码，因此500状态代码通常表示端口关闭或受保护。
    POST /webhook
    Host: public.example.com
    (POST request body)
    url=https://127.0.0.1:11
[ ]{#c13.xhtml#Page_220 .pagebreak title="220"} You can confirm that the
server is indeed making requests to these ports and responding
differently based on port status.
你可以确认服务器确实在这些端口上进行请求，并根据端口状态有不同的响应。
Also look for the time difference between responses. You can see in
[Figure 13-2](#c13.xhtml#figure13-2){#c13.xhtml#figureanchor13-2} that
the Burp repeater shows how long it took for the server to respond in
the bottom right corner. Here, it took 181 milliseconds for Google to
return its home page. You can use tools like SSRFmap (
[https://github.com/swisskyrepo/SSRFmap/](https://github.com/swisskyrepo/SSRFmap/){.LinkURL}
) to automate this process.
还要查找响应之间的时间差异。如图13-2所示，Burp
Repeater在右下角显示服务器响应所需的时间。在这里，Google返回首页需要181毫秒。您可以使用SSRFmap（https://github.com/swisskyrepo/SSRFmap/）等工具来自动化此过程。
![[Figure 13-2]{#c13.xhtml#figure13-2} : Burp repeater shows you how
long it took for the server to respond to a request. ¶
图13-2：Burp重复器显示了服务器响应请求所需的时间。](image_fi/501546c13/f13002.png){.keyline}
If a port is closed, the server usually responds faster because it drops
the forwarded traffic immediately, whereas internal firewalls often
cause a delay in the response. Attackers can use time delays as a metric
to figure out a target's internal network structure. If you can identify
a significant time difference between requests to different ports, you
have found an exploitable SSRF.
如果一个端口关闭了，服务器通常会更快地响应，因为它会立即丢弃转发的流量，而内部防火墙经常会导致响应延迟。攻击者可以使用时间延迟作为计量标准来确定目标内部网络结构。如果您可以在对不同端口的请求之间识别出重要的时间差异，则已经找到了可利用的SSRF。
## Bypassing SSRF Protection {#c13.xhtml#h1-123456c13-0004}
What if you submit an SSRF payload, but the server returns this
response?
如果你提交了一个 SSRF 攻击负载，但服务器返回了这个响应，会怎样？
    Error. Requests to this address are not allowed. Please try again.
This SSRF was blocked by a protection mechanism, possibly a URL
allowlist or blocklist. But all is not lost! The site may have
protection mechanisms implemented, but this doesn't mean that the
protection is complete. Here are a few more things you can try to bypass
a site's protection.
该 SSRF 被一个保护机制阻止了，可能是一个 URL
允许或禁止列表。但还没有结束！该网站可能已经实施了保护机制，但这并不意味着保护是完全的。下面是一些您可以尝试绕过网站保护的方法。
### Bypass Allowlists {#c13.xhtml#h2-123456c13-0004}
Allowlists are generally the hardest to bypass, because they are, by
default, stricter than blocklists. But getting around them is still
possible if you can [ ]{#c13.xhtml#Page_221 .pagebreak title="221"} find
an open redirect vulnerability within the allowlisted domains. (Visit [
Chapter 7 ]{.xref itemid="xref_target_Chapter 7"} for more information
about these vulnerabilities.) If you find one, you can request an
allowlisted URL that redirects to an internal URL. For example, even if
the site allows only profile pictures uploaded from one of its
subdomains, you can induce an SSRF through an open redirect.
允许清单通常是最难避开的，因为它们默认比阻止清单更严格。但是，如果能在允许列出的域中找到打开重定向漏洞，仍然可能会绕过它们。（有关这些漏洞的更多信息，请访问第7章。）如果您找到一个漏洞，您可以请求允许列出的URL，该URL重定向到内部URL。例如，即使该站点仅允许从其子域上传个人资料图片，您仍可通过打开重定向实现服务器端请求伪造（SSRF）。
In the following request, we utilize an open redirect on
*pics.example.com* to redirect the request to 127.0.0.1, the IP address
for the localhost. This way, even though the `      url     ` parameter
passes the allowlist, it still redirects to a restricted internal
address: