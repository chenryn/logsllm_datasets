## 重新发现PostgreSQL之美 - 系列视频    
### 作者    
digoal    
### 日期    
2021-05-26     
### 标签    
PostgreSQL , PG 之美 , PostgreSQL 之美   
----    
## 背景    
#### 1、重新发现PostgreSQL之美 - 1 预测类应用    
使用PG的统计学聚合函数, 结合统计学的线形回归知识, 可以用来实现股价、用户行为、天气等数据的预测.    
PG不仅支持简单的一元回归, 还能通过madlib, plR等实现多元、多重回归模型.    
视频回放:  https://www.bilibili.com/video/BV1mA411g7XJ/    
#### 2、重新发现PostgreSQL之美 - 2 exclude 排他!    
exclude排他约束是PG的独特约束, 属于动态约束, 通过GiST索引实现, 采用对等操作符进行检查.    
例如会议室预定系统:    
避免会议室时间相交的异常问题、    
避免行政区块存储多边形相交的问题、    
排除品类系统中一个物品被误入多个品类的问题.    
视频回放:  https://www.bilibili.com/video/BV1ho4y11731/    
#### 3、重新发现PostgreSQL之美 - 3 range 200x!    
解决全球化部署、多中心业务根据来源IP智能路由到就近机房的智能DNS性能问题, 200倍提升不是梦.    
PG 支持了Range类型, 一个字段可以存储传统数据库2个字段才能存储的数据, 同时比2个字段的between and用法性能提升200倍.    
原因是PG采用了range gist索引, 比btree的大范围链表扫描采用了更有效的访问路径, 二维收敛, 访问block急剧减少, 性能爆炸式提升.    
视频回放:  https://www.bilibili.com/video/BV13q4y1j7Ta/    
#### 4、重新发现PostgreSQL之美 - 4 随机漫步踏浪而来  
在一些论坛、短视频业务中, 编辑精选和地域或大范围精选的内容会采用随机推荐的方式推送给客户.  
随机查询就有了高并发、低延迟的需求, 然而通用的order by random()随机方法性能太烂, 无法满足需求.  
PG 提供了tablesample method(para)方法, 能够以几千倍的性能满足高并发需求.  
视频回放:  https://www.bilibili.com/video/BV1cy4y137WU/  
#### 5、重新发现PostgreSQL之美 - 5 在不确定的世界寻找答案  
经典物理的世界, 似乎一切都是可预测的, 而量子理论告诉我们, 世界充满不确定性:    
股票哪个会涨?   
房价会不会跌?   
美元还会继续贬值吗?   
哪些是我的意向客户?    
你有多大的概率会下单?    
然而现在的经典数据库只能给我们确定的答案, ```=, >, =, , @@, ||, &, !, ......  ``` , 怎么办?   
PG 向量检索+近似库datasketch, 在不确定世界寻找答案!    
视频回放:  https://www.bilibili.com/video/BV12Q4y1R771/  
#### 6、重新发现PostgreSQL之美 - 6 index链表跳跳糖
CTE 递归语法是PG 8.4引入的功能, 至今已经10多年, 非常文档.  
CTE 递归可以解决很多问题: 时序场景取所有传感器最新的value, 图式数据的搜索(一度人脉,N度人脉,最近的路径关系), 树状数据的累加分析, 知识图谱, 去稀疏数据的唯一值等.  
使用CTE递归比通用的方法通常有数百倍的性能提升.  
视频回放: https://www.bilibili.com/video/BV18K4y1R7fb/
#### 7、重新发现PostgreSQL之美 - 7 垂帘听政 异步消息
场景:
- 重要数据在写入、更新、删除时 实时告警或转存
- 流式数据 (公务车电子围栏、刑侦数据探针、股票数据规则探针、服务器运行情况) 实时预警或事件触发
- 危险操作 (DDL) 异步监控
规则 + 异步消息的优势:
1、通过规则过滤掉不需要写入的正常数据, 由于业务正常数据通常占比在99%以上, 从而大幅减轻写入量.
2、传统的利用定时器查询所有数据去发现问题, 还需要在时间、VAL、SID等层面去建立索引, 消耗大量存储, 同时索引增加写入RT, 性能下降. 规则+异步完全规避这个问题.
3、可以实时发现并预警或触发其他动作
视频回放:  https://www.bilibili.com/video/BV1Nq4y1j79T/
#### 8、重新发现PostgreSQL之美 - 8 轨迹业务IO杀手克星index include(覆盖索引) 
场景痛点:
- 轨迹类业务, 一个轨迹由多个点组成, 每个点的ROW写入散落到不同的PAGE, 查询一条轨迹可能要回表访问上百千个PAGE, 号称IO杀手.
业务:
- 共享单车、巡逻车、公务用车、网约车、金融行业股票数据、物联网行业传感器数据等.
PG index include (覆盖索引)功能:
- 重组存储结构, 按指定维度聚集.
- 叶子结点存储include column value, 无需回表(轨迹数据都是append only的, VM bit全部都是clean page, 因此无需回表).
视频回放: https://www.bilibili.com/video/BV1tV41177rY/    
#### 9、重新发现PostgreSQL之美 - 9 面向多值列的倒排索引 GIN|RUM
场景:    
通用业务, 分词查询诉求.    
挑战:    
传统数据库没有分词、实时全文检索索引功能, 需要将数据同步到搜索引擎, 这种解决方案的弊端:     
- 研发成本增加、    
- 软硬件成本增加、    
- 系统问题增多(同步延迟问题、同步异常问题、同步一致性问题)、    
- 开发灵活性下降(无法同时过滤分词条件与表的其他条件, 需要业务层交换数据)    
- 同时过滤分词条件与表的其他条件后, 无法有效的按RANK排序分词相似性    
PG 解决方案:    
- 1、倒排索引GIN:     
    - 支持多值类型的按元素检索: tsvector, array, json, xml, hstore, 任意字段组合搜索       
    - 一对多的数据模型      
- 2、增强倒排索引RUM, RANK 加速方案:     
    - RUM索引在posting list里面, 每个行号后面附加addon内容(文本向量的对应位置信息), 同时支持自定义addon信息.     
    - addon的内容优势: 不需要回表搜索tuple内容. 降低IO, 提高性能.    
视频回放: https://www.bilibili.com/video/BV1CA411g7oK/       
#### 10、重新发现PostgreSQL之美 - 10 内卷 & 大禹治水
场景:   
内卷现象, 供不应求(高峰期打车、电商秒杀), 热点数据更新    
社会现象: 资源有限而需求无限的情况(春运时期的火车票、学生报补习班、企业里面的资源地盘争夺等)   
挑战:   
当系统中出现热点row时, 意味着大量的并发请求更新同一行数据, 因为数据库最小粒度的锁为行锁, 所以这些并发请求只能串行执行,    
一个会话在更新的时候其他所有会话都处于等待状态, 可能导致连接打爆, 其他会话连不进来引起雪崩.     
如果被秒杀的商品库存只有10个, 那么实际上只有10个请求能达成交易, 其他等待中的会话都属于无用功. 浪费大量的连接和等待时间.    
PG 解决方案:   
大禹治水(疏导、消灭无用等待):   
- SKIP LOCKED,   
- advisory lock    
视频回放: https://www.bilibili.com/video/BV1cg411G7rx/  
#### 11、重新发现PostgreSQL之美 - 11 时空轨迹系统 新冠&刑侦&预测  
1、时空轨迹的业务场景:   
疫情防控:   
- 根据病毒携带者的轨迹快速找到密切接触者. 轨迹距离计算   
    - 1度、2度、N度接触者    
公安刑侦:   
- 同行人分析: 轨迹相似度   
- 密切接触分析: 轨迹距离   
预测:   
- 根据轨迹数据建模, 预测群体事件、时空数据热点分布等, 用于智慧城市管理、智慧交通等.   
- 与商业结合, 时空轨迹+用户画像.   
2、业务挑战:    
数据量大, 数据与业务割裂, 计算纯靠coding实现, 开发效率低下, 运行效率良莠不齐.    
3、对时序数据库系统的诉求:  
写入吞吐要求高, 延迟低, 查询要求响应快, 压缩比要求高(节省存储成本), 算法的扩展能力要求强.   
4、PG解决方案:   
- 轨迹类型:   
    - geometry  
- 轨迹分析函数:    
    - 最近距离计算   
    - 相似度计算  
    - 相遇时间计算  
    - 相遇可能性判断  
    - 轨迹有效性判断  
- 压缩能力  
- sharding 能力(citus, timescaledb, ymatrix, POLARDB 等)   
```  
ST_IsValidTrajectory — Returns true if the geometry is a valid trajectory.  
ST_ClosestPointOfApproach — Returns the measure at which points interpolated along two trajectories are closest.  
ST_DistanceCPA — Returns the distance between the closest point of approach of two trajectories.  
ST_CPAWithin — Returns true if the closest point of approach of two trajectories is within the specified distance.  
```  
节点内并行 (PG parallel scan, since PG 9.6)     
多节点并行 (fdw async append, since PG 14)     
5、阿里云 PG Ganos 支持更加丰富的轨迹计算:   
- 轨迹压缩  
- 空间关系判断  
- 空间处理  
- 空间统计  
- 时空关系判断  
- 时空处理  
- 时空统计  
- 距离测量  
- 相似度分析  
视频回放: https://www.bilibili.com/video/BV1eV411x7KW/  
#### 12、重新发现PostgreSQL之美 - 12 SaaS & 多租户 捣蛋鬼,你揍开  
场景: