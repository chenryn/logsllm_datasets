transmits them to relevant parties.
Parties : E, J, L, and C.
1 L issues a request to J: SR = (V KRI||evidence).
2 J validates L’s request. If “accept” ← Jdecide(SR), J
generates IO = (V KRI||evidence) and gives to L.
3 L gives IO to C; C validates the IO. If
“accept” ← Cdecide(IO), C sends to J and L,
(V KAI||σAI||πAI), given to C by I in Protocol 1.
“true” ← Verify(V KRI, σAI, πAI), and if
“true” ← ZKPVerify(V KRI||V KAI||πAI||zkpVerf ), and does
the following:
4.1 Pick KJ LC ← {0, 1}λ, send to L and C. Pick
KEJ LC ← {0, 1}λ, send to E, L, C. J also picks r2, r3 ← Zq,
д, h ∈ G, and generates Pedersen commitments:
Com1 = (дK J LC hr2), Com2 = (дKEJ LC hr3).
4.2 J creates P1 = (V KRI||evidence). P1 is encrypted with
KJ LC and hence is accessible only to J, L and C. P1 is
transmitted to L and C for verification and signatures.
4.3 J verifies the received signatures of L and C on P1, and
embeds the signatures of J, L, C on P1: σJ P1,σLP1, and σCP1
in P2, to preserve identity of L and C.
4.4 P2 contains V KAI, start/end dates ι = [ts , te], among
other information, is encrypted with KEJ LC, and sent to L
and C for verification and signatures σLP2, σCP2.
σJ P2, σLP2, σCP2 are then appended to the SO as P3.
4.5 Generates SO ← OrderGen(V KAI||V KRI||evidence),
which has format as described below:
SO = (cid:22)metadata||σmetadata||CP1||CP2||CP3(cid:20), where
CP1 = EJ LC(P1)
CP2 = EEJ LC(P2)
CP3 = EEJ LC(σJ P2||σLP2||σCP2)
At the end of the current batch bNum, let CbNum represent the set
of all ciphertexts in bNum. C calculates hashes for all Cx ∈ CbNum
and uses them as leaves to create a Merkle hash tree MbNum (Lines
7,8). C sends MbNum and the root hash (RbNum) of the Merkle tree to
I (Line 9). I verifies that RbNum calculation is correct for the current
batch. I signs the verified RbNum and sends σRbNum
to C (Line 10.2).
I can then delete all the data stored locally since it is available for
future retrieval from C. C stores σRbNum
and discards the Merkle
tree for the batch (Line 11). This construction helps reduce the
space overhead significantly. This process is repeated for all future
batches. If I found RbNum to be wrongly calculated, then I does not
sign RbNum and C is contacted to reconstruct the Merkle tree and
try again (Line 10.1).
2254
5.2 Surveillance
The communication model under SAMPL can be divided into four
phases, which we depict in Figure 1, and we give a high level idea
of the phases in what follows.
Phase 1: Figure 1: Steps 1-7, are described in Protocol 3, and
represents the first phase of SAMPL. It describes collection of in-
formation by J to validate the need for an SO, create, and post it
to BC. This allows members of U to verify public data in SO for
accountability of L and C, and allows L to conduct surveillance on
data for I.
Phase 2: Figure 1: Steps 8-11, are described in Algorithm 4 and
Algorithm 5, and represent the second phase of SAMPL. In Algo-
rithm 4, L creates the SR corresponding to the SO created in Phase
1, and in Algorithm 5 we enforce accountability for L by having E
verify the SR before sending it to C.
Figure 1: Workflow in SAMPL (Dashed lines represent Key Exchange
and solid lines represent regular communication).
Phase 3: Figure 1: Steps 12-15, are described in Algorithm 6
and Algorithm 7, and represent the third phase of SAMPL. In Al-
gorithm 6, C creates the SRR corresponding to the SR received in
Phase 2, and in Algorithm 7 we enforce accountability for C by
having E verify the SRR before sending it to L.
Phase 4: Figure 1: Step 16, is described in Protocol 8 and repre-
sents the fourth phase of SAMPL. In Protocol 8, L decrypts the user
information and conducts the surveillance specified in the SO.
Protocol 3: Protocol 3 presents the interaction between J, L, C,
and E, which culminates in J issuing a surveillance order SO, and
setting up surveillance-related keys. In Line 1, L approaches J with
evidence of suspicious behavior on the part of I which forms the
surveillance request (SR). Here evidence represents the documented
evidence supporting the SR. J has its own internal decision pro-
cedure, Jdecide using which it decides whether to accept or turn
down the request (Line 2). If J decides to reject the request, L will
have to return with an updated request SR = (V KRI||evidence(cid:19)), if
it wants to persist with the request.
If the request SR is accepted, J generates an intermediate order
IO, and gives it to L who forwards it to C. If C decides to comply
(according to Cdecide), it retrieves V KAI corresponding to V KRI,
sends V KAI to L, along with πAI, and σAI obtained in Protocol 1. L
forwards this info to J (Line 3). If C decided to not comply with IO
Session 9E: Web Censorship and Auditing
CCS ’19, November 11–15, 2019, London, United Kingdom
(e.g., request violates statutory company policy), C would address
the reasons to L prompting potential intervention from J, which is a
judicial matter and out of scope of SAMPL. On receiving info from
Algorithm 4: L creating and posting SR on BC, and sending
to E for verification.
Input
Output:Surveillance request SR created and sent to E.
:SO created on BC.
1 begin
2
3
4
L creates a surveillance request:
SR = (SO||ι = [ts , te]||V KAI||C).
L generates and posts H(SR) to BC.
L sends SR to E, who handles it as described in
Algorithm 5.
5 end
C, J independently verifies the ZKP associated with V KAI and the
signature on it (Line 4). If the verification fails, J notifies C and L,
and exits. If the verification passes, J generates two symmetric keys:
KJ LC meant to be shared between J, L, and C, and KEJ LC meant
to be shared between E, J, L, and C. J then issues a surveillance
order SO which is formatted as in Figure 2. The metadata may
include case number, date of unsealing, and Pedersen commitments
Com1 and Com2 to KJ LC and KEJ LC, respectively (Line 4.1), and
any other information that can be made public about the case.
The commitments are needed to hold J accountable. Part 1 (P1)
contains data meant to be shared between J, L, and C only, and
includes V KRI and the evidence. P1 is encrypted with KJ LC (Line
4.2), and the hash of the encrypted P1 is signed independently
by J (σJ P1), L (σLP1), and C (σJ P1) (Line 4.3). These signatures
are included inside Part 2 (P2) along with V KAI, start/end dates
of surveillance (ts , te) respectively2. P2 is encrypted with KEJ LC,
before it is sent for verification and signing to J, L, and C which
yield σJ P2, σLP2 and σCP2, respectively on successful verification.
Before C signs hash of encrypted P2, it verifies that V KAI contained
in P2 corresponds to V KRI contained in P1 that it had signed, i.e.,
σCP1.
These signatures are then verified by J, encrypted with KEJ LC
and added to SO as part of Part 3 (P3). The signatures are included
in the encrypted text to preserve the identity of L and C from public
until the SO is opened to public. Signatures on CP1 and CP2 are
verified by E to hold J, L, and C accountable. The different kinds of
SOs are discussed in Section 6.
Algorithm 4: This shows the surveillance request, SR created by
L after J posts SO to the blockchain, BC. L creates an SR by creating
a tuple with the start/end dates for the requested surveillance time
interval, ι = [ts , te] (Line 2). L includes the AI of the intended
surveillance target, V KAI. A reference to the original SO and the
identity of C (whom the SR is intended for), is also included in the
SR tuple. L then posts the hash of the SR on the BC and forwards
SR to E for verification (Line 3,4).
2An SO could possibly have multiple, non-contiguous dates/times of surveillance.
This will not affect the system design.
Figure 2: Structure of SO generated by J .
In SAMPL, the Enforcer uses the start/end times listed in the SO,
and the pseudonymous identities of the email senders listed in the
SO to check over-requesting by L and over-sharing by C.3
Algorithm 5: E verifying SR received from L.
: SR received from L.
Input
Output:Accept or reject SR.
/* Verify SR does not violate SO published on
1 E retrieves KEJ LC sent by J in Protocol 3, does
BC by J .
P2 ← DEJ LC(CP2), posted on BC, and accepts SR as valid
if:
*/
2 begin
3
4
The V KAI of P2 and SR match.
The time interval, ι = [ts , te] contained in SR is within
the timeline specified in P2.
5 end
6 If E accepts SR, a confirmation is posted on BC. Since all BC
transactions are signed, we denote the corresponding
transaction signature as σ E
; and SR is forwarded to C.
SR
7 If E rejects SR, it notifies agency L and judge J, and SR is not
sent to C. It also stores evidence of the reason for rejection,
which will be provided to J, L upon request.
Algorithm 5: Here E receives the SR from L and processes the
SR. The verification includes checking that the time interval ι from
SR is a sub-interval of the timeline contained in P2 of SO. After E
verifies SR, it signs the hash, H(SR), and posts the signature σ E
on
SR
BC. Then SR is forwarded to the C listed as intended receiver in
SR. If SR fails to verify with E, no message is posted on the BC, and
SR is not forwarded to C. If fine-grained accountability is desired,
the failure message can be posted to BC, identifying the reason and
scope of the failure. We discuss this further in Section 9.2.
3This can be extended to the Enforcer checking pseudonyms of recipients too, filtering
by subject of e-mails, etc., which gives finer auditing granularity. This will not affect
the base system design, but will require more computations and verifications on the
part of I , C, and E. We discuss such generalizations in Section 9.1.
2255
Session 9E: Web Censorship and Auditing
CCS ’19, November 11–15, 2019, London, United Kingdom
Algorithm 6: C creating SRR, posting H(SRR) on BC, and
sending SRR to E for verification.
Input
Output: SRR created and forwarded to E.
/* When C receives a validated SR from E, it
: SR received from E.
does the following:
*/
1 begin
2
6
7
8
9
10
11
12
/* SO verification
C decrypts CP3 of SO contained in SR, verifies
signatures σJ P2, σLP2. C then decrypts P2 of SO,
verifies σJ P1, σLP1. It then checks if (ι,V KAI) contained
in SR corresponds to what it had signed in σCP2.
*/
/* C create an SRR in response to the SR as
follows
*/
3 end
4 begin
5
posted on BC.
C retrieves and verifies signature σ E
SR
Let CbNum represent the set of all ciphertexts in bNum.
for each Cx ∈ CbNum; x ∈ [1..bSize] for V KAI do
if Cx was created during time-period ι = [ts , te] from
SR then
(j ∈ [1..m]) to SRR:
Add Cx ||siblingHashes(Cx)||bNum||σRbNum
to
SRR, Add the signed ZKP for V KPIj
used to
verify σRbNum
(σAI||πAI||σPIj ||πPIj ||д||zkpVerf ), where
zkpVerf is some metadata given to C by I for
ZKP verification (details in Appendix A,
Protocol 11).
end
end
C adds the identity of L to SRR. The final SRR is given
below.
SRR = (cid:22)SR||L||Cx ||siblingHashes(Cx)||
bNum||σRbNum||σAI||πAI||σPIj ||
πPIj ||д||zkpVerf (cid:20)
C generates and posts H(SRR) on BC.
13
14 end
/* C sends SRR to E.
15 C sends SRR to E, who processes it as described in
Algorithm 7.
*/
Figure 3: (a) Illustration of communication between C and E.
(b) Illustration of relevant Merkle trees in SRR.
Algorithm 6 and Algorithm 7 cover interaction between E and C,
as depicted in Figure 3, where C responds to an approved SR with an
SRR containing requested user data. C selects user data that matches
criteria outlined in SR (depicted by shaded items in Figure 3(b))
and adds the data to SRR before sending it to E for verification. E
verifies the SRR and either forwards it to L if approved or contacts
C if verification failed.
Algorithm 6: When C receives a verified SR from E, C verifies
that ι and V KAI listed in SR are the ones actually signed by C in P2
of SO (Line 2). C then creates an SRR in response to SR. C checks
each message stored corresponding to V KAI listed in the SR. If some
message Mx in batch bNum matches the surveillance time ι in SR,
then the encrypted message (Cx ), the sibling hashes for H(Cx) inthe
Merkle tree for bNum, and σbNum are added to the SRR by C (Line
9). C also includes the ZKP for the V KPIj
used to sign σbNum (Line
9). Once C has finished processing all messages for the V KAI listed
in SR, C adds identity of L to SRR and then posts a signed hash of
SRR to BC (Line 13). SRR is then forwarded to E (Line 15).
For ease of exposition, we have presented SRR creation for one
batch (bNum). If there exist multiple batches, bNumi; i ∈ [1..T/bSize],
where T is the total number of I’s messages stored on C, Line 7-11
of Algorithm 6 are repeated for all the batches. In Line 12, the SRR
includes corresponding C, sibling hashes, batch number, root of the
Merkle hash tree, concatenated in order.
used in σRbNum
Algorithm 7: E receives the SRR from C, and parses its contents.
) on the corresponding SR (Line 1). For
E verifies the signature (σ E
SR
each Cx that appears in SRR, E checks that the message is dated
within the time period ι = [ts , te] from SR (Line 3). Then the root
hash for Cx , RbNum is computed using the sibling hashes for Cx
provided in SRR, and the signature σRbNum
is verified (Line 4). The
ZKP for V KPIj
is also verified by E (Line 5). If there
are multiple batches, they are verified in succession at this time; as in
Algorithm 6, we omit this part in the algorithm and this description
for ease of exposition. After E verifies SRR, it signs H(SRR), and a
message containing the signature of E is posted on BC, and SRR is
forwarded to L listed as intended receiver in SRR (Line 7). If SRR
failed to verify with E, no message is posted in the BC and SRR is
not forwarded to L. If fine-grained auditing is required, a failure
message can be written to the BC.