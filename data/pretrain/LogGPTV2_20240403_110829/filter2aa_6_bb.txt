20.4 日期和时间格式
本节介绍时间字符串的格式。可以有很多种方式，比如，指出当前的日期，包括时间、省略时区或指定时区等。在对日期时间格式的支持中，ECMAScript 5符合ISO 8601扩展格式标准。JavaScript引擎实现ECMAScript规范比较彻底，但仍然会有一些问题，所以使用时要小心。
最长的日期时间格式是：
每个部分代表日期时间数据的多个十进制数字。例如，YYYY表示格式始于一个四位数年。接下来的几个小节将解释每个部分的意思。以下为格式相关的一些方法。
Date.parse()可以解析日期格式。
new Date()可以解析日期格式。
Date.prototype.toISOString()创建一个最完整的时间格式。
20.4.1 日期格式（无时间）
下面的日期格式可供选择：
它们包括以下几个部分：
YYYY是指年（公历）
MM是指月，01～12
DD是指天，01～31
例如：
20.4.2 时间格式（无日期）
下面是时间格式。正如你所看到的，时区信息Z是可选的。
它们包括以下几个部分。
T是格式中时间部分的前缀（字面T，不是数字）。
HH指小时，从00到23，可以使用24作为HH（这是指次日的00小时）的值，但随后的所有剩余部分必须为0。
mm表示分钟，从00到59。
ss表示秒，从00到59。
SSS表示毫秒，从000到999。
Z指时区，有以下两种：
“Z”为UTC
“+”或“ - ”后面跟时间“hh:mm”
一些JavaScript引擎允许你只指定一个时间（其他的需要指定一个日期）：
20.4.3 日期时间格式
日期格式和时间的格式，也可以结合起来使用。在日期时间格式，可以使用一个日期或日期和时间（或者，在某些引擎里，只是时间）。例如：
20.5 时间值：从1970-01-01开始的毫秒数
日期API调用的时间称为ECMAScript规范的时间值。它使用毫秒作为数字编码，时间从1970年1月1日00:00:00 UTC开始。每个日期的对象在内部属性[[PrimitiveValue]]（与布尔、数字、字符串包装构造器用来存储它们原始值的实例的属性相同）中存储其状态的时间值。
警告：
 闰秒的时间值被忽略。
下面的方法处理时间值。
new Date(timeValue)使用时间值来创建一个日期。
Date.parse(dateTimeString)解析一个字符串的日期时间，并返回一个时间值。
Date.now()将当前时间作为时间值返回。
Date.UTC(year, month, date?, hours?, minutes?, seconds?, milliseconds?)返回相对于UTC的时间值。
Date.prototype.getTime()返回存储在接收机中的时间值。
Date.prototype.setTime(timeValue)通过时间值指定更改日期。
Date.prototype.valueOf()返回存储在接收机中的时间值。这个方法可以决定日期如何转换为基本的单位，在下一小节将解释。
JavaScript整数的范围（53位加上一个符号）足够大，可以表示大约1970年之前285616年和1970之后大约285616年的时间跨度。
这里是转换日期时间值的几个例子：
Date构造函数可以将时间值转换为日期：
将日期转换为数字
通过Date.prototype.valueOf()，日期对象可以转换为数字，返回对应的时间值。通过它可以比较日期大小：
你也可以进行计算，但要注意，闰秒将被忽略：
警告：
 用加号（+）将日期和另外一个日期或一个数字的字符串相加，返回是时字符串。这是因为默认会将日期转换为字符串（参阅9.5“加号”运算符（+））。
第21章 Math
Math对象为众多数学函数提供了命名空间。本章就带大家一同了解一下Math对象。
21.1 Math属性
下面是Math的一些属性：
Math.E
欧拉常数（e）
Math.LN2
2的自然对数
Math.LN10
10的自然对数
Math.LOG2E
以2为底的e的对数
Math.LOG10E
以10为底的e的对数
Math.PI
圆周率(3.14159 ...), 
Math.SQRT1_2
1/2的平方根
Math.SQRT2
2的平方根
21.2 数值函数
下面是Math的一些数字方法：
Math.abs(x)
返回x的绝对值。
Math.ceil(x)
返回大于等于x的最小整数。
想进一步了解浮点数转换成整数，请查看11.7“转换成整数”。
Math.exp(x)
返回e（Math.E）的x次幂。它是Math.log()的逆运算。
Math.floor(x)
返回小于等于x的最大整数：
想进一步了解浮点数转换成整数，请查看11.7“转换成整数”。
Math.log(x)
返回x的自然对数。它是Math.exp()的逆运算。
Math.pow(x, y)
返回x的y次幂：
Math.round(x)
返回最接近x的整数（如果这个数字恰好等于靠近它的两个数字的平均数，那么就选择较大的那一个）：
想进一步了解浮点数转换成整数，详见11.7“转换成整数”。
Math.sqrt(x)
返回根号x：
21.3 三角函数
三角函数接受并返回角度弧度。下面的函数会告诉你如何实现转换，你或许需要。
从角度到弧度的：
例如：
从弧度到角度：
例如：
下面是一些三角函数。
Math.acos(x)：返回x的反余弦值。
Math.asin(x)：返回x的反正弦值。
Math.atan(x)：返回x的反正切值。
Math.atan2(y, x)：返回y/x商的反正切值。
Math.cos(x)：返回x的余弦值。
Math.sin(x)：返回x的正弦值。
Math.tan(x)：返回x的正切值。
21.4 其他函数
下面是其余的一些Math函数：
min(x1?, x2?, ...)表示返回参数中最小的数字。
通过apply()可以应用于数组（详细参见15.7.1“func.apply(thisValue, argArray)”）。
max(x1?, x2?, ...)表示返回参数中最大的数字。
通过apply()可以应用于数组（详细参见15.7.1“func.apply(thisValue, argArray)”）。
Math.random()表示返回一个伪随机数r，0≤r<1。下面的方法使用Math.random()函数计算随机整数：
第22章 JSON
JSON（JavaScript Object Notation）是纯文本格式的数据存储。它被广泛应用于Web服务的传输媒介、配置文件等。ECMAScript 5有一个API将JSON格式转换成JavaScript值（parsing），反之亦然（stringifying）。
22.1 背景
接下来将介绍什么是JSON以及它是如何产生的。
22.1.1 数据格式
JSON将数据存储为纯文本格式。它的语法是JavaScript表达式语法的一个子集。例如：
JSON使用JavaScript表达式的如下结构：
（1）复合
JSON数据的对象和数组。
（2）原子
字符串、数值、布尔值和null。
它需要遵循下面两个原则：
字符串必须使用双引号，字符串字面量如'mystr'是无效的。
属性键也必须使用双引号。
22.1.2 历史
道格拉斯 · 克罗克福德（Douglas Crockford）2001年发现了JSON。他为它起了名字并且提出了规范发布在http://json.org上：
我发现了JSON。我没有声称我发明了JSON是因为它本来就是存在的。而我所做的是发现了它，为它命名并且阐述它的用处。我没有声称我是第一个发现它的人；因为我知道其他人至少一年前就发现了它。早在1996年的时候我就发现网景使用JavaScript数组字面量进行数据通信，这显然至少是5年前的事情了。
起初，Crockford想将JSON命名为JavaScript Markup Language，但是缩写JSML已经被JSpeech Markup Language（http://www.w3.org/TR/jsml/）占用了。
JSON规范已经被翻译成诸多人类语言，并且现在很多编程语言库支持解析生成JSON。
22.1.3 语法
道格拉斯 · 克罗克福德制作了一个名片，正面是JSON的logo（见图22.1），背面是JSON完整的语法（见图22.2）。很显然JSON是如此简单。
图22.1 名片正面是JSON的logo（来源：Eric Miraglia （http://www.flickr.com/photos/equanimity/3762360637/））
图22.2 名片的背面是JSON完整的语法（来源：Eric Miraglia ［http://www.flickr.com/photos/equanimity/3763158824/］）
JSON的语法可以转录如下：
对象
  {}
  { 成员 }
成员
  键值对
  键值对，成员
键值对
  字符串：值
数组
  [ ]
  [元素]成员
元素
  值
  值，元素
值
  字符串
  数值
  对象
  数组
  true
  false
  null