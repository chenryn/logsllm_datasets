[**restart**]{.strong}，以及自定义的操作。以下来自 `postfix`{.literal}
init 脚本的摘录显示了在服务启动时要执行的代码块。
``` literallayout
conf_check() {
    [ -x /usr/sbin/postfix ] || exit 5
    [ -d /etc/postfix ] || exit 6
    [ -d /var/spool/postfix ] || exit 5
}
make_aliasesdb() {
	if [ "$(/usr/sbin/postconf -h alias_database)" == "hash:/etc/aliases" ]
	then
		# /etc/aliases.db might be used by other MTA, make sure nothing
		# has touched it since our last newaliases call
		[ /etc/aliases -nt /etc/aliases.db ] ||
			[ "$ALIASESDB_STAMP" -nt /etc/aliases.db ] ||
			[ "$ALIASESDB_STAMP" -ot /etc/aliases.db ] || return
		/usr/bin/newaliases
		touch -r /etc/aliases.db "$ALIASESDB_STAMP"
	else
		/usr/bin/newaliases
	fi
}
start() {
	[ "$EUID" != "0" ] && exit 4
	# Check that networking is up.
	[ ${NETWORKING} = "no" ] && exit 1
	conf_check
	# Start daemons.
	echo -n $"Starting postfix: "
	make_aliasesdb >/dev/null 2>&1
	[ -x $CHROOT_UPDATE ] && $CHROOT_UPDATE
	/usr/sbin/postfix start 2>/dev/null 1>&2 && success || failure $"$prog start"
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch $lockfile
        echo
	return $RETVAL
}
```
init 脚本的可扩展性允许指定从 `start()`{.literal}
功能块中调用的两个自定义功能 `conf_check()`{.literal} 和
`make_aliasesdb()`{.literal}。然后,上面的代码中提到几个外部文件和目录：主服务可执行文件
`/usr/sbin/postfix`{.literal}、`/etc/postfix/`{.literal} 和
`/var/spool/postfix/`{.literal} 配置目录，以及
`/usr/sbin/postconf/`{.literal} 目录。
[**systemd**]{.strong} 只支持预定义的操作，但启用执行带有
`ExecStart`{.literal}, `ExecStartPre`{.literal},
`ExecStartPost`{.literal}, `ExecStop`{.literal}, 和
`ExecReload`{.literal} 选项的自定义可执行文件。在 service start 中执行
`/usr/sbin/postfix`{.literal}
以及支持脚本。转换复杂的初始化脚本需要了解脚本中的每个语句的用途。一些语句特定于操作系统版本，因此您不需要转换它们。另一方面，新环境中可能需要进行一些调整，无论是单元文件以及服务可执行文件和支持文件。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_modifying-existing-unit-files_assembly_working-with-systemd-unit-files}修改现有单元文件 {.title}
:::
在系统中安装的服务会附带保存在 `/usr/lib/systemd/system/`{.literal}
目录中的默认单元文件。系统管理员不应该直接修改这些文件，因此任何自定义都必须仅限于
`/etc/systemd/system/`{.literal} 目录中的配置文件。
::: orderedlist
**流程**
1.  根据所需更改的程度，选择以下方法之一：
    ::: itemizedlist
    -   在 `/etc/systemd/system/unit.d/`{.literal}
        中创建一个附加配置文件的目录。我们推荐在大多数用例中使用这个方法。它启用了额外的功能来扩展默认配置，同时仍然引用原始的单元文件。因此会自动应用在软件包升级中引入的默认单元更改。如需更多信息，请参阅[扩展默认单元配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#proc_extending-the-default-unit-configuration_assembly_working-with-systemd-unit-files){.link}。
    -   在 `/etc/systemd/system/`{.literal} 中创建原始单元文件
        `/usr/lib/systemd/system/`{.literal}
        的副本并在此进行修改。这个副本会覆盖原始文件，因此不会应用软件包更新带来的更改。这个方法对无论软件包更新都应保留的重要单元更改都很有用。有关详细信息，请参阅[覆盖默认单元配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#proc_overriding-the-default-unit-configuration_assembly_working-with-systemd-unit-files){.link}。
    :::
2.  要返回这个单元的默认配置，请删除 `/etc/systemd/system/`{.literal}
    中的自定义创建配置文件。
3.  要在不重启系统的情况下对单元文件应用更改，请执行：
    ``` literallayout
    systemctl daemon-reload
    ```
    `daemon-reload`{.literal}
    选项会重新载入所有单元文件并重新创建依赖项树，这是立即将任何更改应用到单元文件所必需的。另外，您可以使用以下命令得到同样的结果，该命令必须以
    `root`{.literal} 用户执行：
    ``` literallayout
    init q
    ```
4.  如果修改后的单元文件属于正在运行的服务，则必须重启该服务以接受新设置：
    ``` literallayout
    systemctl restart name.service
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
要修改由 SysV initscript 处理的服务（如依赖项或超时）的属性，请不要修改
initscript 本身。反之，为服务创建一个 `systemd`{.literal}
置入配置文件，如下所述：[扩展默认单元配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#proc_extending-the-default-unit-configuration_assembly_working-with-systemd-unit-files){.link}
和
[覆盖默认单元配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#proc_overriding-the-default-unit-configuration_assembly_working-with-systemd-unit-files){.link}。
然后，像普通 `systemd`{.literal} 服务一样管理该服务。
例如：要扩展 `network`{.literal} 服务的配置，不要修改
`/etc/rc.d/init.d/network`{.literal} initscript 文件。反之，创建新目录
`/etc/systemd/system/network.service.d/`{.literal} 和一个
`systemd`{.literal} drop-in 文件
`/etc/systemd/system/network.service.d/my_config.conf`{.literal}。然后将修改的值放到
drop-in 文件中。注： `systemd`{.literal} 知道 `network`{.literal} 服务为
`network.service`{.literal}，这就是为什么创建的目录必须名为
`network.service.d`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_extending-the-default-unit-configuration_assembly_working-with-systemd-unit-files}扩展默认单元配置 {.title}
:::
这部分论述了如何使用附加配置选项扩展默认单元文件。
::: orderedlist
**流程**
1.  要使用额外的配置选项扩展默认单元文件，首先在
    `/etc/systemd/system/`{.literal}
    中创建配置目录。如果扩展服务单元，以 `root`{.literal}
    用户身份执行以下命令：
    ``` literallayout
    mkdir /etc/systemd/system/name.service.d/
    ```
    使用您要扩展的服务的名称替换
    [*name*]{.emphasis}。以上语法适用于所有单元类型。
2.  在上一步中创建的目录中创建配置文件。请注意，文件名必须以
    [**.conf**]{.strong} 后缀结尾。类型：
    ``` literallayout
    touch /etc/systemd/system/name.service.d/config_name.conf
    ```
    使用配置文件的名称替换
    [*config_name*]{.emphasis}。此文件遵循普通单元文件结构，因此所有指令都必须在适当的部分中指定，请参见[单元文件结构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#con_unit-file-structure_assembly_working-with-systemd-unit-files){.link}。
    例如，要添加自定义依赖项，请使用以下内容创建配置文件：
    ``` literallayout
    [Unit]
    Requires=new_dependency
    After=new_dependency
    ```
    这里的 [*new_dependency*]{.emphasis}
    代表这个单元被标记为依赖项。另一个例子是主进程退出后重新启动服务的配置文件，延迟
    30 秒：
    ``` literallayout
    [Service]
    Restart=always
    RestartSec=30
    ```
    建议您只创建专注于一个任务的小配置文件。这些文件可轻松地移动或者链接到其他服务的配置目录。
3.  要应用对单位所做的更改，以 `root`{.literal} 用户身份执行：
    ``` literallayout
    systemctl daemon-reload
    systemctl restart name.service
    ```
:::
::: example
[]{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#exam-systemd-Extending_Unit_Config}
**例 16.1. 扩展 httpd.service 配置**
::: example-contents
要修改 httpd.service 单元，以便在启动 Apache 服务时自动执行自定义 shell
脚本，请执行以下步骤。
::: orderedlist
1.  创建目录和自定义配置文件：
    ``` literallayout
    # mkdir /etc/systemd/system/httpd.service.d/
    ```
    ``` literallayout
    # touch /etc/systemd/system/httpd.service.d/custom_script.conf
    ```
2.  如果想要用 Apache 自动启动的脚本位于
    `/usr/local/bin/custom.sh`{.literal}，在
    `custom_script.conf`{.literal} 文件中插入以下文本：
    ``` literallayout
    [Service]
    ExecStartPost=/usr/local/bin/custom.sh
    ```
3.  要应用单元更改，请执行：
    ``` literallayout
    # systemctl daemon-reload
    ```
    ``` literallayout
    # systemctl restart httpd.service
    ```
:::
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`/etc/systemd/system/`{.literal} 配置文件中的配置文件优先于
`/usr/lib/systemd/system/`{.literal}
中的单元文件。因此，如果配置文件包含只可以指定一次的选项，如
`Description`{.literal} 或
`ExecStart`{.literal}，则此选项的默认值会被覆盖。请注意，在
`systemd-delta`{.literal} 命令的输出中（在 [Monitoring overrides
units](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_working-with-systemd-unit-files_configuring-basic-system-settings#proc_monitoring-overriden-units_assembly_working-with-systemd-unit-files){.link}
中所述）中，比如这个单元总是被标记为
\[EXTENDED\]，即使总和和一些选项也会被覆盖。
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_overriding-the-default-unit-configuration_assembly_working-with-systemd-unit-files}覆盖默认单元配置 {.title}
:::
这部分论述了如何覆盖默认单元配置。
::: orderedlist
**流程**
1.  要在更新提供该单元文件的软件包后保留更改，首先要将该文件复制到
    `/etc/systemd/system/`{.literal} 目录。要做到这一点，以
    `root`{.literal} 用户身份执行以下命令：
    ``` literallayout
    cp /usr/lib/systemd/system/name.service /etc/systemd/system/name.service
    ```
    其中 [*name*]{.emphasis}
    代表您希望修改的服务单元的名称。以上语法适用于所有单元类型。
2.  使用文本编辑器打开复制的文件，并进行必要的修改。要应用单元更改，以
    `root`{.literal} 用户身份执行：
    ``` literallayout
    systemctl daemon-reload
    systemctl restart name.service
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_changing-the-timeout-limit_assembly_working-with-systemd-unit-files}更改超时限制 {.title}
:::
您可以为每个服务指定一个超时值，以防止出现故障的服务中断。否则，一般服务的超时时间会被默认设置为
90 秒，SysV 兼容的服务会被设置为 300 秒。
例如：要为 `httpd`{.literal} 服务扩展超时限制：
::: orderedlist
**流程**
1.  将 `httpd`{.literal} 单元文件复制到 `/etc/systemd/system/`{.literal}
    目录中：
    ``` literallayout
    cp /usr/lib/systemd/system/httpd.service /etc/systemd/system/httpd.service
    ```
2.  打开文件 `/etc/systemd/system/httpd.service`{.literal}，并在
    `[Service]`{.literal} 部分指定 `TimeoutStartUSec`{.literal} 值:
    ``` literallayout
    …​
    [Service]
    …​
    PrivateTmp=true
    TimeoutStartSec=10
    [Install]
    WantedBy=multi-user.target
    …​
    ```
3.  重新载入 `systemd`{.literal} 守护进程：
    ``` literallayout
    systemctl daemon-reload
    ```
4.  [**Optional.**]{.strong}验证新的超时值：
    ``` literallayout
    systemctl show httpd -p TimeoutStartUSec
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    要全局更改超时限制，在`/etc/systemd/system.conf`{.literal} 中输入
    `DefaultTimeoutStartSec`{.literal}。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_monitoring-overriden-units_assembly_working-with-systemd-unit-files}监控覆盖的单元 {.title}
:::
这部分论述了如何显示覆盖或修改的单元文件概述。
::: itemizedlist
**流程**
-   要显示覆盖或修改的单元文件概述，请使用以下命令：
    ``` literallayout
    systemd-delta
    ```
    例如，以上命令的输出结果如下：
    ``` literallayout
    [EQUIVALENT] /etc/systemd/system/default.target → /usr/lib/systemd/system/default.target
    [OVERRIDDEN] /etc/systemd/system/autofs.service → /usr/lib/systemd/system/autofs.service
    --- /usr/lib/systemd/system/autofs.service      2014-10-16 21:30:39.000000000 -0400
    + /etc/systemd/system/autofs.service  2014-11-21 10:00:58.513568275 -0500
    @@ -8,7 +8,8 @@
     EnvironmentFile=-/etc/sysconfig/autofs
     ExecStart=/usr/sbin/automount $OPTIONS --pid-file /run/autofs.pid
     ExecReload=/usr/bin/kill -HUP $MAINPID
    -TimeoutSec=180
    +TimeoutSec=240
    +Restart=Always
     [Install]
     WantedBy=multi-user.target
    [MASKED]     /etc/systemd/system/cups.service → /usr/lib/systemd/system/cups.service
    [EXTENDED]   /usr/lib/systemd/system/sssd.service → /etc/systemd/system/sssd.service.d/journal.conf
    4 overridden configuration files found.
    ```
:::
:::