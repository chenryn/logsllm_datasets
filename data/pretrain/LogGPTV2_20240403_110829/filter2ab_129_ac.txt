}
// Hi Liam you are 3 years old.
// Hi Jenny you are 14 years old.
```
### Return value {.row-span-2}
```c
int myFunction(int x) {
  return 5 + x;
}
int main() {
  printf("Result: %d", myFunction(3));
  return 0;
}
// output 8 (5 + 3)
```
two parameters
```c
int myFunction(int x, int y) {
  return x + y;
}
int main() {
  printf("Result: %d", myFunction(5, 3));
  // store the result in a variable
  int result = myFunction(5, 3);
  printf("Result = %d", result);
  return 0;
}
// result: 8 (5 + 3)
// result = 8 (5 + 3)
```
### Recursive example
```c
int sum(int k);
int main() {
  int result = sum(10);
  printf("%d", result);
  return 0;
}
int sum(int k) {
  if (k > 0) {
    return k + sum(k -1);
  } else {
    return 0;
  }
}
```
### Mathematical functions
```c
#include 
void main(void) {
  printf("%f", sqrt(16)); // square root
  printf("%f", ceil(1.4)); // round up (round)
  printf("%f", floor(1.4)); // round up (round)
  printf("%f", pow(4, 3)); // x(4) to the power of y(3)
}
```
----
- `abs(x)` absolute value
- `acos(x)` arc cosine value
- `asin(x)` arc sine
- `atan(x)` arc tangent
- `cbrt(x)` cube root
- `cos(x)` cosine
- the value of `exp(x)` Ex
- `sin(x)` the sine of x
- tangent of `tan(x)` angle
C Structures
---
### Create structure
```c
struct MyStructure { // structure declaration
  int myNum; // member (int variable)
  char myLetter; // member (char variable)
}; // end the structure with a semicolon
```
Create a struct variable called `s1`
```c{7}
struct myStructure {
  int myNum;
  char myLetter;
};
int main() {
  struct myStructure s1;
  return 0;
}
```
### Strings in the structure
```c{9}
struct myStructure {
  int myNum;
  char myLetter;
  char myString[30]; // String
};
int main() {
  struct myStructure s1;
  strcpy(s1. myString, "Some text");
  // print value
  printf("my string: %s", s1.myString);
  return 0;
}
```
Assigning values ​​to strings using the `strcpy` function
### Accessing structure members {.row-span-2}
```c{11,12,16}
// create a structure called myStructure
struct myStructure {
  int myNum;
  char myLetter;
};
int main() {
  // Create a structure variable called myStructure called s1
  struct myStructure s1;
  // Assign values ​​to the members of s1
  s1.myNum = 13;
  s1.myLetter = 'B';
  // Create a structure variable of myStructure called s2
  // and assign it a value
  struct myStructure s2 = {13, 'B'};
  // print value
  printf("My number: %d\n", s1.myNum);
  printf("My letter: %c\n", s1.myLetter);
  return 0;
}
```
Create different structure variables
```c
struct myStructure s1;
struct myStructure s2;
// Assign values ​​to different structure variables
s1.myNum = 13;
s1.myLetter = 'B';
s2.myNum = 20;
s2.myLetter = 'C';
```
### Copy structure
```c{6}
struct myStructure s1 = {
  13, 'B', "Some text"
};
struct myStructure s2;
s2 = s1;
```
In the example, the value of `s1` is copied to `s2`
### Modify value
```c{6,7}
// Create a struct variable and assign it a value
struct myStructure s1 = {
  13, 'B'
};
// modify the value
s1.myNum = 30;
s1.myLetter = 'C';
// print value
printf("%d %c %s",
    s1.myNum,
    s1.myLetter);
```
file processing
---
### File processing function
function | description Description
----| ----
`fopen()` | `open` a new or existing file
`fprintf()` | write data to `file`
`fscanf()` | `read` data from a file
`fputc()` | write a character to `file`
`fgetc()` | `read` a character from a file
`fclose()` | `close` the file
`fseek()` | set the file pointer to `the given position`
`fputw()` | Write an integer `to` a file
`fgetw()` | `read` an integer from a file
`ftell()` | returns the current `position`
`rewind()` | set the file pointer to the beginning of the file
There are many functions in the C library to `open`/`read`/`write`/`search` and `close` files
### Open mode parameter
Mode Mode | Description Description
----| ----
`r` | Open a text file in `read` mode, allowing the file to be read
`w` | Open a text file in `write` mode, allowing writing to the file
`a` | Open a text file in `append` modeIf the file does not exist, a new one will be created
`r+` | Open a text file in `read-write` mode, allowing reading and writing of the file
`w+` | Open a text file in `read-write` mode, allowing reading and writing of the file
`a+` | Open a text file in `read-write` mode, allowing reading and writing of the file
`rb` | Open a binary file in `read` mode
`wb` | Open binary file in `write` mode
`ab` | Open a binary file in `append` mode
`rb+` | open binary file in `read-write` mode
`wb+` | Open binary file in `read-write` mode
`ab+` | open binary file in `read-write` mode
### Open the file: fopen()
```c{6}
#include 
void main() {
  FILE *fp;
  char ch;
  fp = fopen("file_handle.c", "r");
  while (1) {
    ch = fgetc(fp);
    if (ch == EOF)
      break;
    printf("%c", ch);
  }
  fclose(fp);
}
```
After performing all operations on the file, the file must be closed with `fclose()`
### Write to file: fprintf()
```c{7}
#include 
void main() {
  FILE *fp;
  fp = fopen("file.txt", "w"); // open the file
  // write data to file
  fprintf(fp, "Hello file for fprintf..\n");
  fclose(fp); // close the file
}
```
### Read the file: fscanf()
```c{6}
#include 
void main() {
  FILE *fp;
  char buff[255]; // Create a char array to store file data
  fp = fopen("file.txt", "r");
  while(fscanf(fp, "%s", buff) != EOF) {
    printf("%s ", buff);
  }
  fclose(fp);
}
```
### Write to file: fputc()
```c{6}
#include 
void main() {
  FILE *fp;
  fp = fopen("file1.txt", "w"); // open the file
  fputc('a',fp); // write a single character to the file
  fclose(fp); // close the file
}
```
### Read the file: fgetc()
```c{8}
#include 
#include 
void main() {
  FILE *fp;
  char c;
  clrscr();
  fp = fopen("myfile.txt", "r");
  while( (c = fgetc(fp) ) != EOF) {
    printf("%c", c);
  }
  fclose(fp);
  getch();
}
```
### Write to file: fputs()
```c {8}
#include
#include
void main() {
  FILE *fp;
  clrscr();
  fp = fopen("myfile2.txt","w");
  fputs("hello c programming",fp);
  fclose(fp);
  getch();
}
```
### Read files: fgets()
```c {10}
#include
#include
void main() {
  FILE *fp;
  char text[300];
  clrscr();
  fp = fopen("myfile2.txt", "r");
  printf("%s", fgets(text, 200, fp));
  fclose(fp);
  getch();
}
```
### fseek()
```c{8}
#include 
void main(void) {
  FILE *fp;
  fp = fopen("myfile.txt","w+");
  fputs("This is Book", fp);
  // Set file pointer to the given position
  fseek(fp, 7, SEEK_SET);
  fputs("Kenny Wong", fp);
  fclose(fp);
}
```
set the file pointer to the given position
### rewind()
```c{11}
#include 
#include 
void main() {
  FILE *fp;
  char c;
  clrscr();
  fp = fopen("file.txt", "r");
  while( (c = fgetc(fp) ) != EOF) {
    printf("%c", c);
  }
  rewind(fp); // move the file pointer to the beginning of the file
  while( (c = fgetc(fp) ) != EOF) {
    printf("%c", c);
  }
  fclose(fp);
  getch();
}
// output
// Hello World! Hello World!
```
### ftell()
```c{11}
#include 
#include 
void main () {
   FILE *fp;
   int length;
   clrscr();
   fp = fopen("file.txt", "r");
   fseek(fp, 0, SEEK_END);
   length = ftell(fp); // return current position
   fclose(fp);
   printf("File size: %d bytes", length);
   getch();
}
// output
// file size: 18 bytes
```