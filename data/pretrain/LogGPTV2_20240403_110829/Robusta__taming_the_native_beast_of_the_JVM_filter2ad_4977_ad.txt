### Table 2: Runtime Overheads of Robusta for a Set of JNI Programs

#### Zlib
The Zlib library is used for compression. The Java side passes a buffer of data to Zlib, which performs the compression and returns the result back to the Java side. This process is repeated with different buffer sizes, leading to varying numbers of context switches. We tested the zip program with buffer sizes of 1KB, 2KB, 4KB, 8KB, and 16KB.

#### libec
Experiments were set up to generate pairs of public and private keys of varying sizes from random seeds. Key sizes tested were 112, 160, 224, 256, 384, 521, and 571 bits.

#### StrictMath
Experiments were set up to repeatedly invoke library functions in the fdlibm math library.

#### libharu
Experiments were set up to generate a 100-page PDF document from sample text.

#### libjpeg
Experiments were set up to convert a 5MB BMP image into JPEG format.

### Experimental Results

Table 2 presents the experimental results for the benchmark programs. The "Robusta Increase" column shows the runtime overhead of Robusta over OpenJDK. This value was calculated as follows:

1. The program was compiled using the GNU toolchain and run in vanilla OpenJDK. Let \( x_1 \) denote the total runtime.
2. The same program was then compiled using the NaCl toolchain to produce NaCl-compliant binaries and run in Robusta. Let \( y_1 \) be the total runtime in Robusta.
3. The runtime overhead of Robusta over OpenJDK is given by \(\frac{y_1 - x_1}{x_1}\).

Table 2 also includes measurements for context switch intensity, defined as the number of context switches per millisecond. The table shows a strong correlation between runtime overhead and context-switch intensity. For example, in the zip benchmark, as the context switch intensity decreases from 18.50 (with a buffer size of 1KB) to 0.95 (with a buffer size of 16KB), the performance overhead decreases from 9.64% to 1.40%. A similar trend is observed in the libec benchmark.

#### Extreme Cases
- **StrictMath**: This benchmark makes around 270 context switches per millisecond, resulting in significant performance overhead. The high context switch intensity is due to each native method call staying in the sandbox for a very short time.
- **libjpeg**: This benchmark has a very low number of context switches per millisecond, resulting in minimal overhead in Robusta.

### Performance Improvements
Some benchmarks show performance improvements, likely due to NaCl. NaCl has reported performance improvements for some SPEC2000 benchmark programs, attributed to positive interactions between alignment and processor microarchitectures.

### General Observations
Robusta is most effective for applications with low context-switching intensity. For applications where context-switch intensity can be controlled (e.g., zip), increasing the amount of time the application stays in the sandbox before switching out can improve performance.

### Comparison with SafeJNI
Robusta's runtime overhead compares favorably to SafeJNI, which reports a 63% performance overhead for the zip benchmark with a 16KB buffer size. SafeJNI performs array bounds checking for every access to the buffer passed from Java to native code, while Robusta does not require this thanks to SFI. Robusta's runtime overhead also compares favorably to reimplementation of native libraries in Java code. SafeJNI reported that the runtime overhead of a pure Java implementation of the Zlib library (jzlib-1.0.5) is 74%.

### Related Work
There is a rich tradition of computer-security research aimed at isolating untrusted code from trusted environments. Operating systems have long used hardware-based protection to isolate processes. Nooks [29] isolates device drivers from kernel code, and Xax [3] isolates web applications from browsers. Robusta follows a software-based approach [33, 28, 4, 5, 18, 34, 26], demonstrating that SFI can efficiently isolate native libraries in a type-safe language like Java, even when they communicate through a tight interface like JNI.

In terms of mediating system calls, Robusta is related to previous efforts such as systrace [24] and others [8, 11, 7]. Robusta delegates the job to Java’s security manager, a general strategy for handling system calls in native code within language virtual machines.

Klinkoﬀ et al. [13] designed a sandboxing mechanism to protect managed code and the .NET runtime from unmanaged code. Their system puts unmanaged code into a separate process, suffering from high performance overhead due to inter-process communication. In contrast, Robusta is more efficient thanks to SFI and operates purely in user space.

An alternative approach involves compiling native code from a type-safe low-level language like Cyclone [12]. This can avoid some of the runtime overhead in Robusta but requires rewriting legacy code, which is labor-intensive and does not address safe interoperation between Java and native code.

### Future Work
We plan to explore the feasibility of sandboxing native libraries in Java's system classes using Robusta. There are 800,000 lines of C/C++ code in Sun’s JDK 1.6. We expect Robusta should be able to sandbox most of JDK's system libraries, as demonstrated for zip and libec. However, some native libraries may need direct access to the JVM state or may cross the boundary too frequently, making them unsuitable for sandboxing.

We are developing a napplet mechanism for Robusta, allowing the distribution of both a Java applet and its required native libraries in a single package. Robusta’s sandbox will prevent any abusive native code in the napplet from harming the host system.

We also plan to explore techniques for stronger security policies within Robusta, such as incorporating Control-Flow Integrity (CFI) to prevent exploits based on illegal control transfers.

### Conclusions
Native code has always been a security challenge in Java. While powerful, it poses serious security threats. Robusta protects the JVM from native code with modest runtime overhead and is particularly suitable for applications without intense context switching. It provides a migration path for moving native code outside the JDK and enabling mobile Java programs with native libraries.

### Acknowledgments
We thank Mark Seaborn for explaining his scheme of a new address space layout for supporting dynamic linking/loading in NaCl. We also thank the anonymous referees of CCS ’10 for their detailed comments. This research is supported in part by NSF grants CCF-0915157 and CCF-0915030, and a research grant from Google.

### References
[1] M. Abadi, M. Budiu, Ulfar Erlingsson, and J. Ligatti. Control-flow integrity. In 12th ACM conference on Computer and communications security (CCS), pages 340–353, 2005.
...
[34] B. Yee, D. Sehr, G. Dardyk, B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native client: A sandbox for portable, untrusted x86 native code. In IEEE Symposium on Security and Privacy (S&P), pages 79–93, May 2009.