title:Scalable Fault-Tolerant Aggregation in Large Process Groups
author:Indranil Gupta and
Robbert van Renesse and
Kenneth P. Birman
Scalable Fault-Tolerant Aggregation in Large Process Groups 
Indranil Gupta, Robbert van Renesse, Kenneth P. Birman 
Dept. of Computer Science 
Cornel1 University 
Ithaca NY USA  14853 
{gupta,rvr,ken}@cs.cornell.edu 
Abstract 
This paper discusses fault-tolemnt, scalable solutions to 
the problem  of  accurately and scalably calculating  global 
aggregate functions  in  large process groups  communicat- 
ing over unreliable networks. These groups could represent 
sensors  or processes  comniunicating  over a  network  that 
is either fixed (eg., the Internet) or dynamic (eg., niultihop 
ad-hoc). Group members are prone to failures.  The ability 
to evaluate global aggregate properties (eg., the average of 
sensor temperature  readings) is important for higher-level 
coordination activities in such large groups.  We first define 
the  setting  and problem,  laying  down nietrics  to evaluate 
direrent algorithms for the same.  We discuss why the usual 
approaches  to solve  this problem are unviable and unscal- 
able over an unreliable network prone to message delivery 
failures and  crash jiiilures.  We then propose a  technique 
to impose an abstract hierarchy on such  large groups, de- 
scribittg how this hierarchy can be made to mirror the net- 
work  topology.  We discuss several alternatives to use this 
technique to solve the global aggregate function evaluation 
problem.  FinulIy, we present a protocol based on gossiping 
that uses this hierarchical technique. We present mathemat- 
ical analysis and performance results to validate the robust- 
ness, efJiciency and accuracy of the Hierarchical Gossiping 
algorithm. 
1. Introduction 
Smart sensors networks, multihop ad-hoc networks and 
process  groups  over  the  Internet  are  examples  of  large 
groups of  processes  that  inherently  need  to communicate 
and coordinate to perform  higher level tasks.  A few thou- 
sand sensors might be installed on the wing of an airplane, 
each detecting the  air pressure, temperature, etc.  within  a 
few centimeters’ radius of its location. A few hundred thou- 
sand smart dust computers might be randomly dropped on 
an inhospitable terrain, each making critical measurements 
in  its own vicinity.  These sensors or smart computers will 
communicate with each other over networks which provide 
a multihop routing mechanism between any two nodes. The 
networks can be either fixed (eg., on the airplane wing) or 
formed on  the  fly, i.e., ad-hoc (eg.,  in  an  inhospitable ter- 
rain). 
Higher-level  coordination activities  in  such groups  are 
driven  by  protocols  that  aggregate  the  individual  group 
members’ measurements, or votes, into properties. For ex- 
ample, the network of airplane wing sensors might calculate 
the average temperature of all sensors on the wing, trigger- 
ing a coolant release  at certain  sensors if this average tem- 
perature is above some threshold. For self-managing appli- 
cations using such large groups as the ones described above, 
it is much more important to be able to disseminate answers 
of  queries such  as  “what is  the average temperature mea- 
sured by all sensors near the leading edge of the right wing 
?”  than queries such as “what is the temperature measured 
by sensor # 5634 ‘?”  [6]. 
In this paper, we tackle  the problem of calculating such 
global  aggregate functions  over  the  votes  of  individual 
group members.  Formally,  our aim  is develop a one-shot 
protocol by which each member of a group evaluates an ac- 
curate estimate of  a global aggregate function f ( q ,  ..UN) 
where  u1, ..UN are the  individual  votes of  the group mem- 
bers.  In  the  airplane wing  example discussed above, the 
ut’s would  be the  individual  temperature measurements at 
wing sensors i, and f would be the average.  We focus only 
on coniposable  global  functions, i.e., 1) if  W,  and W, are 
two disjoint sets of  votes,  then  the function  f satisfies the 
property  f(W1, W2) = g ( f ( W l ) ,  f (W2)) for some known 
function g; and 2) the byte-size of the function f ’ s  output is 
not much larger than the byte-size of an individual vote. The 
second assumption is required to keep all network messages 
small  and bounded  by  a constant size.  Average,  minimum 
and maximum are all examples of composable functions. 
We  assume  that  group members  use  an  asynchronous 
communication  medium  that  is  unreliable  in  delivering 
messages.  Although  it  might  be  possible  to  construct  a 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
433 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:46 UTC from IEEE Xplore.  Restrictions apply. 
synchronous, fixed and reliable  network in some scenarios 
such  as  for sensors on  an  airplane  wing,  such  a  network 
model  would  not be realistic  for settings such as multihop 
ad-hoc networks, eg., sensors in an inhospitable terrain.  In 
this model, we also assume that each group member has a 
globally  unique  identity  number  or address  (which  might 
be imprinted at manufacture-time, or assigned at run time). 
When the process groups we are talking of lie over the Inter- 
net, the routing mechanism could simply be TCPAP, while 
it would need to be one of the specialized protocols such as 
TORA, AODV etc. over a multihop ad-hoc network, where 
the sensors th,emselves would act as routers.  As in real-life 
networks, group members are also prone to arbitrary crash 
and recovery. 
One might ask  the  question:  “Why  is  the  above prob- 
lem of calculating a  global  aggregate function so difficult 
over  such  a  communication  network  ?  One  could  have 
each member send  its  individual  vote to each  other group 
member and in  turn, calculate the aggregate function from 
the  values  it  receives.”  While this  fully  distributed  solu- 
tion works well for small groups, it does not scale to groups 
of beyond a few hundred members.  Centralized solutions, 
where the  aggregate is  calculated  at  a  well-known  leader 
member, suffer from several problems,  most notable being 
the leader’s failure.  We discuss disadvantages of these tra- 
ditional approaches in detail later in the paper. 
This problem of accurately calculating aggregate global 
functions, like many other problems in distributed systems, 
can  be  reduced  to  the  Consensus problem, which  is  typi- 
cally unsolvable over an unreliable network [7]. It is there- 
fore impossible to have a correct protocol, that  is, one that 
always calculates the exact aggregate function  value at all 
members, even if the member votes are time invariant. 
As  a  result,  different  protocol  solutions  to  the  above 
problem have to be evaluated and compared based on sev- 
eral metrics.  The metrics we consider in this paper are the 
most basic: 
1. protocol message complexity, 
2. protocol time complexity, and 
3. Completeness of the final result of the protocol. 
Complefeness is the percentage  of member votes included 
in a final global aggregate evaluation delivered at a random 
group member. If member votes do not differ vastly in value 
from each other, Completeness represents  the  accuracy  of 
the  protocol-measured  aggregate  to  the  actual  aggregate. 
We will assume in this paper that there is a constant bound 
on  the  message size (which  is  larger than  the  byte-size  of 
individual  votes and any composable function evaluation), 
and that there  is a limit  on  the network bandwidth utiliza- 
tion at each member.  Then, the optimum achievable limits 
for the above three metrics, by any protocol on a group of 
N members, are O ( N ) ,  O(1), and 1.0 respectively. 
In  this  paper,  we  first  discuss  the  disadvantages of  us- 
ing the fully distributed and centralized solutions for global 
aggregate  function  calculation  in  large  groups.  We  then 
propose  a  technique,  called  the  Grid Box Hierarchy, that 
can  be  used  to  construct  hierarchical  algorithms  for  this 
problem.  We  discuss  several  alternatives for  hierarchical 
global  aggregate  function  calculating  protocols  using  this 
technique.  Finally,  we  propose a  novel  solution based  on 
gossiping that uses this hierarchical technique and performs 
quite  well  under  heavy  unreliability,  and  is  only  slightly 
sub-optimal  in  message  and  time  complexity  with  group 
size N (O(Nlog2N) and O(log2N) respectively’).  This 
protocol shows resilience  to message failures and member 
crashes, with a gracefully  degrading completeness  as these 
failures increase.  The protocol’s completeness  scales quite 
well with group size N .  
The rest of the paper is organized as follows.  Section 2 
describes the model and problem statement concisely.  Sec- 
tion  3  discusses  previous  and  related  work  on  this  prob- 
lem.  In  Sections 4-5,  we briefly  argue  why  the  fully  dis- 
tributed  and  centralized  approaches  do not  work  well  for 
large groups. In Section 6, we discuss the abstract Grid Box 
Hierarch) and several alternatives for hierarchical solutions 
to calculating  a  global aggregate function  using  this  tech- 
nique. We then present the Hierarchical Gossiping protocol 
with  a  mathematical  analysis.  Section  7 presents  perfor- 
mance results of running the Hierarchical Gossiping proto- 
col over a simulated lossy unreliable network. We conclude 
in Section 8. 
2. Model and Problem Statement 
A.s mentioned in Section  I ,  we deal with the abstract no- 
tion  of  large groups of  members (processes,  sensors  etc.) 
communicating  with  each  other  over  an  unreliable  asyn- 
chronous network such  as  the  Internet  or a  multihop  ad- 
hoc  network.  We  assume the  presence  of  an  underlying 
routing mechanism in this network that enables any mem- 
ber lo send messages to any other member.  Members have 
globally  unique  identifiers:  Members may  arbitrarily  suf- 
fer crash failures and then recover. Since we are concerned 
about scalability, we assume that all messages sent over the 
network are constant size bounded, and that each member 
has a maximum network bandwidth constraint. 
Each member also maintains a view, a list of other group 
members it  knows about.  We  assume henceforth  that  all 
members know about each  other,  although  this  can  be  re- 
laxed in our final hierarchical gossiping solution. Our algo- 
rithms do not require any failure detection. 
The goal  of  the  global  aggregation  protocol  is  to  have 
each group meniber calculate a global estimate of a (com- 
posable)  global  aggregate  function  (as described  in  Sec- 
tion  1).  We also impose a constraint that no member vote 
‘1Jnless  specified otherwise, all logarithms in this paper are to base e 
434 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:46 UTC from IEEE Xplore.  Restrictions apply. 
is  counted twice  in  any  global  aggregate calculation.  For 
example,  when  the  global  function  is  the  average  of  all 
sensor temperature readings, this no double counting  con- 
straint would  exclude all protocols that  might possibly  in- 
clude some sensor’s reading  twice in  calculating the  aver- 
age. 
Our discussion considers only one run of the aggregation 
protocol, but this can be extended to one which periodically 
calculate the global  aggregate.  The protocol  is assumed to 
be initiated  simultaneously at all  members, but  our results 
apply in  cases such  as a multicast  being  used  for protocol 
initiation. 
The metrics for evaluating  different algorithms for this 
problem  are  message  complexity,  time  complexity,  and 
completeness of the result at a random group member.  With 
the no double counring constraint, completeness is thus the 
percentage of group member votes taken into account in the 
final global function  value calculated at a random member. 
3. Previous and Related Work 
The growth of the Internet and the advent of application 
scenarios for large-scale ad-hoc and sensor networks [6, I  I ]  
have fueled research  for scalable solutions to several prob- 
lems that arise in such scenarios [3,4, 6, 15, 161. 
Theoretical  results  on  the  global  aggregation problem 
date  back  to  Pease  et  al  [13].  The  authors  were  con- 
cerned  about  Byzantine member  failures  and  did  not  ad- 
dress message unreliability concerns. Our approach to pro- 
viding probabilistic guarantees also bears a resemblance to 
randomized  consensus  algorithms such  as  [2].  However, 
the class of protocols in  [2,  131 are inappropriate for large 
groups as they use several “rounds”, with up to O ( N 2 )  mes- 
sage exchanges per round. 
The technique of gossiping (or epidemic algorithms) has 
recently attained popularity  in  the  research  community as 
a technique for solving several large-scale distributed  com- 
puting problems. Gossip protocols for reliable multicast [3], 
failure detection [ 161, resource management [ 151, etc., scale 
very  well  with  group size, while being  robust to random 
message losses and process crashes. 
Several strategies such  as directed dzfluusion [6], Amor- 
phous Computing Hierarchy  [4] etc.  have been  proposed 
for ad-hoc sensor networks coordinating to achieve higher 
level tasks.  However, we believe ours is the first paper to 
discuss scalable solutions to the global aggregation problem 
via  the  gossiping technique.  [9] describes adaptive proto- 
cols for energy efficient information dissemination in sensor 
networks, but we are not concerned with minimizing energy 
consumption at nodes in this paper. 
Research in the area of calculating global  snapshots fo- 
cuses on evaluating global predicates for process groups [8], 
mostly towards distributed  computation termination detec- 
tion and deadlock detection problems. Such algorithms ig- 