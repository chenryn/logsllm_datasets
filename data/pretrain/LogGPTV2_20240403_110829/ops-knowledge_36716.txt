User: I've been hearing the buzz about virtualenv lately, and I'm interested. But all I've heard is a smattering of praise, and don't have a clear understanding of what it is or how to use it.
I'm looking for (ideally) a follow-along tutorial that can take me from Windows or Linux with no Python on it, and explain every step of (in no particular order):

what I should do to be able to start using virtualenv
specific reasons why using virtualenv is a good idea
situations where I can/can't use virtualenv
situations where I should/shouldn't use virtualenv

And step through (comprehensively) a couple sample situations of the should+can variety.
So what are some good tutorials to cover this stuff? Or if you have the time and interest, perhaps you can answer a few of those questions here. Either in your answer, or as a link to tutorials that answer it, these are the things I'd like to know.
Assistant: Virtualenv is a tool to create isolated Python environments.
Let's say you're working in 2 different projects, A and B.
Project A is a web project and the team is using the following packages:

Python 2.8.x
Django 1.6.x

The project B is also a web project but your team is using:

Python 2.7.x
Django 1.4.x

The machine that you're working doesn't have any version of django, what should you do? Install django 1.4? django 1.6? If you install django 1.4 globally would be easy to point to django 1.6 to work in project A?
Virtualenv is your solution! You can create 2 different virtualenv's, one for project A and another for project B. Now, when you need to work in project A, just activate the virtualenv for project A, and vice-versa. 
A better tip when using virtualenv is to install virtualenvwrapper to manage all the virtualenv's that you have, easily. It's a wrapper for creating, working, removing virtualenv's.