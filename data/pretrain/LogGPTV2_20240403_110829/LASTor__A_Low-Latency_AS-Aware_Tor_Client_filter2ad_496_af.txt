can enable clients to verify integrity of the data they download
using an approach similar to that used to guarantee integrity
of the default Tor client—by posting a cryptographic hash of
the dataset on the Tor website.
VII. DISCUSSION
In this section, we discuss the extensions to Tor necessary
to further reduce latencies and the impact on load balancing
if LASTor is widely adopted.
487
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
s
t
n
e
m
e
r
u
s
a
e
m
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
-2.5 -2 -1.5 -1 -0.5  0  0.5  1  1.5  2  2.5
Relative difference in latency
Fig. 15. Variation across time of latencies on paths spanning similar
end-to-end geographical distances.
A. Accounting for dynamic load
Though we showed that WSP can signiﬁcantly reduce
latencies for communication on Tor, there remains a signiﬁcant
overhead compared to communication over the default Internet
path. Therefore, to reduce latencies further, other than reducing
propagation delays with the use of the WSP path selection
algorithm, it is necessary to minimize queueing delays by
taking into account the load at each relay at the time of path
selection. Here, we present some preliminary results from our
efforts to do so.
First, we observe that access link bandwidths of Tor relays
are spread over a wide range, as shown in Figure 14(a).
Therefore, we investigate the potential for reducing queueing
delays by restricting the choice of relays among those with
high bandwidth. To study this, we measure path latencies on
the Tor network when visiting the top 200 websites from 50
PlanetLab nodes in two cases. We measure latencies ﬁrst when
choosing relays at random from those which have bandwidth
greater than 100 KBps, and then repeat the same choosing
from all Tor relays. To keep propagation delay similar in
both settings, for every path that we pick from relays with
bandwidth greater than 100 KBps, we pick a corresponding
path with the entry, middle, and exit nodes in the same
locations, but with no restriction on relay bandwidth. For either
path selection strategy, we measure latencies between every
(client, destination) pair on ﬁve different paths. The lines “All
Relays” and “BW ≥ 100 KBps” in Fig. 14(b) show that the
distribution of median latency (across the 5 chosen paths) is
identical whether we account for relay bandwidth or not. In
this case, we use the “Estimated” bandwidth estimate for each
relay—the value used by the default Tor client to perform path
selection—but we found the results to be similar when using
other estimates of relay access link bandwidth provided by the
Tor directory.
Next, we studied the variation in latencies over time on
a given path. We selected 20 (client, destination) pairs at
random, and for each of them, we considered two different
disjoint paths with the same end-to-end geographical distance;
either path traversed three Tor relays. For each (client, destina-
tion) pair, we measured latencies once every half hour on either
path selected for it and noted the relative difference between
latencies measured on the ﬁrst and second path; we randomly
order the two paths chosen for every (client, destination) pair
and ﬁx that ordering across all measurement rounds. Fig. 15
shows the variation of this difference in measured latencies
across the period of a day. We see that, though the pair of
paths selected for every (client, destination) pair span identical
geographical distances, the path that provides better latencies
signiﬁcantly varies over time.
Therefore, these results seem to indicate that we can reduce
queueing delays only by modifying relays—either by having
them track and report
load at ﬁner granularities of time
or by introducing a new queue management algorithm at
relays—which is outside the scope of our goal of enabling
immediate latency improvements for Tor clients. Given the
current implementation of Tor relays, biasing relay selection
based on their bandwidth may help improve throughput, but
this will not improve latencies for interactive transfers.
B. Load balancing
When choosing a path,
the default Tor client currently
selects relays with a probability proportional to their access
link bandwidth. As a result, the fraction of all of Tor’s trafﬁc
that traverses any particular relay is roughly proportional to
that relay’s access link bandwidth, thus balancing the load
across relays.
In contrast, load across Tor relays could be signiﬁcantly
skewed if LASTor were widely used. If most users choose
to use LASTor with a value close to 0 for α, paths chosen
by each client will be biased towards traversing relays that
result in lower end-to-end distances to the destinations with
which the client communicates. On the other hand, even if
all users use LASTor with a value of 1 for α, the consequent
selection of relays at random will result in an equal distribution
of load across relays, which is undesirable given the signiﬁcant
skew in access link bandwidths across relays (seen earlier in
Fig. 14(a)).
Though addressing this issue requires further investigation
outside the scope of this work, we present two recommen-
dations that we speculate would enable widespread use of
LASTor without harming the balance of load across Tor relays.
First, we recommend that Tor users who use the network for
bulk transfers, such as BitTorrent, should continue to use the
default Tor client. Since bulk transfers account for a majority
of the trafﬁc on Tor [1], the use of the default Tor client for
such trafﬁc will ensure a distribution of load across relays
that is reasonably close to the distribution of their access link
bandwidths. The loss of anonymity due to protocol-speciﬁc
path selection requires further investigation. Second, LASTor’s
path selection algorithm itself will need to be modiﬁed to take
the access link bandwidths of relays into account. However, to
do so, we will need to discover the distribution of the value of
α used by Tor users who use the LASTor client. Discovering
this distribution should be possible by means of an anonymous
survey across users. LASTor’s path selection algorithm can
then be tweaked to not simply have a preference for paths
with a lower end-to-end distance but to also account for the
access link bandwidths of relays and the distribution of α
across users.
488
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
VIII. RELATED WORK
We build upon three lines of prior work—1) improving
performance in Tor, 2) improving anonymity with Tor, and 3)
AS path inference. We discuss related efforts in these areas.
Improving performance in Tor. To improve performance
on Tor, Sherr et al. [6], [39] proposed a path selection algo-
rithm based on the concept of link-based relay selection. In this
approach, a client computes a cost for each path by aggregating
values for the chosen metric (e.g., latency, bandwidth) across
segments on the path, and then picks a path with probability
based on this cost. With the aid of simulations, they showed
that
their approach offers better performance on each of
the objective functions mentioned above. In order to obtain
these performance beneﬁts, they discuss relays disseminating
information among themselves using, for example, a network
coordinate system. However, modifying relays to build such
a distributed system for performing measurements and then
disseminating this information is not a trivial task. Therefore,
we focus on latency beneﬁts possible without any modiﬁcation
to relays. Furthermore, to evaluate the anonymity of their
approach, Sherr et al. count the number of traversed ASes
on the path and consider the traversal of a lower number of
ASes to provide better anonymity. Instead, we explicitly detect
common ASes on the entry and exit segments of a path and
avoid such paths.
Panchenko et al. [7] propose two algorithms to improve
the performance on Tor. First, to reduce latency, they measure
the latency between every pair of relays and choose a path
with a probability related to the end-to-end latency on that
path. Second, to help throughput-oriented applications, they
perform passive measurements to infer the available bandwidth
on each relay and pick a path based on the expected end-to-
end throughput. However, again, modiﬁcations to all Tor relays
are necessary to implement these approaches. Also, since most
connections on Tor correspond to interactive trafﬁc [1], we
focus only on reducing latency and show how to do so with
only client-side modiﬁcations.
The authors of [40] studied the inﬂuence of geographical
diversity on the performance of Tor and found a tradeoff
between improved performance and anonymity. They found
that though low diversity of relays may lower the latencies in
setting up circuits, greater geographical diversity of nodes is
an important factor to provide strong anonymity guarantees.
We similarly illustrate the loss in anonymity when preferring
low latency paths, but make path selection tunable to enable
latency beneﬁts to be overridden for better anonymity, when
desired.
Snader and Borisov [5] showed how a client can trade off
between performance and anonymity when selecting paths.
However, Snader and Borisov focused on improving through-
put on Tor (their evaluation revolved around the download of
a 1 MB ﬁle), while we focus on latency. We showed that the
selection of lower latency paths warrants the need for several
techniques not necessary when optimizing throughput, such as
the careful selection of entry guards and accounting for desti-
nations that are geographically distributed. DefenestraTor [8]
improves latencies in Tor by modifying trafﬁc management in
Tor relays to reduce congestion-related queueing delays. We
pursue a complementary approach that reduces propagation
delays without any modiﬁcations necessary to Tor relays.
AS-awareness in path selection. In 2004, Feamster and
Dingledine [9] studied the Tor network to investigate the
problem of an AS eavesdropping both ends of a circuit.
First, they showed that there are Tor relays with different
IP addresses that are in the same AS, and that Tor clients
should avoid selecting two relays from the same AS. Second,
they discovered that the probability of an AS observing both
ends of a circuit varies between 10% and 30% across (client,
destination) pairs. To reduce this probability, they proposed
the passive monitoring of BGP feeds to determine AS paths.
However, they did not elaborate on how clients should fetch
and maintain up-to-date information from BGP routing tables.
Instead, motivated by their observation, we make AS-aware
path selection practical by reducing both time and space
complexity.
Later,
in 2009, Edman and Syverson [10] showed that
although the number of Tor relays increased signiﬁcantly since
Feamster and Dingledine’s analysis, the probability of an AS
being able to observe both ends of a connection did not
decrease much. To protect against occurrences of snooping
ASes, the authors suggest that all Tor server authorities agree
upon a snapshot of ASes based on Routing Information Bases
(RIB). Client can then use AS topology snapshots to select a
path in which AS-level routes from the client to the entry node
and from the exit node to the destination span a disjoint set of
ASes. As we showed in our evaluation, our approach of using
AS sets signiﬁcantly reduces the rate of missing snooping
ASes compared to that proposed by Edman and Syverson.
AS path inference. Several systems and algorithms have
been developed for inference of AS paths between arbitrary IP
addresses on the Internet. Approaches for this can be broadly
classiﬁed into two classes. One set of approaches [12], [32],
[33] enable computationally efﬁcient estimation of AS paths
but use a large corpus of path measurements as input. Such
approaches are ideal for hosting services that can be queried
for AS path inferences, but this is not an option in the case of
Tor since the queries for AS paths can leak client anonymity.
The second set of approaches [11], [13] for AS path inference
require much lesser data as input, e.g., only the Internet’s PoP-
level or AS-level topology, but are computationally prohibitive
in processing queries. The use of such techniques to select
paths that avoid snooping ASes will render the selection of
low latency paths moot. Given these shortcomings of prior
approaches for AS path inference, we develop a new technique
that both has low runtimes and requires compact inputs.
Other related work. Several measurement studies [41],
[42], [1] of the Tor network have been performed to determine
the location diversity of Tor users and the popularity of
different kinds of trafﬁc such as HTTP, BitTorrent, and E-mail.
These studies have shown that though HTTP transfers account
for a small fraction of the trafﬁc on Tor, they constitute a large
489
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
majority of connections. Hence, for most Tor users, latency is
more important than throughput. To the best of our knowledge,
we are the ﬁrst to show how to improve latencies on Tor in a
practical manner with only client-side modiﬁcations.
Hopper et al. [21] studied the loss in a client’s anonymity by
knowing the latency on the circuit in use by the client. While
complementary to our effort, this study needs to be revisited
in the light of our tunable AS-aware WSP path selection
algorithm. We speculate that the knowledge that a client is
using WSP to choose paths probably leaks more information
about the client when path latency is known.
IX. CONCLUSIONS AND FUTURE WORK
Though Tor is the most widely used anonymity network to-
day for low latency anonymous communication, poor latencies
on it and the fear of trafﬁc correlation attacks by underlying
ASes are the biggest problems with Tor’s usability today. Prior
proposals have either focused on improving the performance
on Tor in terms of throughput, which does not help interactive
communication, or they mandate signiﬁcant modiﬁcations to
Tor relays, which places the onus on developers and thus are
yet to be deployed.
In this paper, we developed a new Tor client, called LASTor,
to demonstrate that both signiﬁcant latency gains and pro-
tection against snooping ASes can be obtained on Tor today
without requiring any modiﬁcations to Tor relays. Based on
measurements along paths between 10K (client, destination)
pairs, we showed that LASTor can deliver a 25% reduction
in median path latency. To deliver these latency beneﬁts, we
showed that it is important to carefully select entry guards and
account for replicated destinations. We also developed a space-
and time-efﬁcient technique for enabling LASTor to reliably
detect the possible presence of snooping ASes on any path.
Moreover, we have made path selection in LASTor tunable so
that a user can easily choose an appropriate trade-off between
latency and anonymity.
We plan to make LASTor available for public use. We
are also investigating the use of
latency estimation ap-
proaches [13], [12] that do not require measurements from
relays to further improve latencies on Tor without necessitating
modiﬁcations to relays.
REFERENCES
[1] D. Mccoy, K. Bauer, D. Grunwald, T. Kohno, and D. Sicker, “Shining
light in dark places: Understanding the Tor network,” in PETS, 2008.
[2] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The second-
generation onion router,” in USENIX Security Symposium, 2004.
[3] G. Danezis, R. Dingledine, and N. Mathewson, “Mixminion: Design of
a type III anonymous remailer protocol,” in IEEE S&P, 2003.
[4] U. Moeller, L. Cottrell, P. Palfrader, and L. Sassaman, “IETF
draft: Mixmaster protocol version 2,” http://www.ietf.org/internet-drafts/
draft-sassaman-mixmaster-03.txt, 2005.
[5] R. Snader and N. Borisov, “A tune-up for Tor: Improving security and
performance in the Tor network,” in NDSS, 2008.
[6] M. Sherr, M. Blaze, and B. T. Loo, “Scalable link-based relay selection
for anonymous routing,” in PETS, 2009.
[7] A. Panchenko and J. Renner, “Path selection metrics for performance-
improved onion routing,” in SAINT, 2009.
[8] M. AlSabah, K. Bauer, I. Goldberg, D. Grunwald, D. McCoy, S. Savage,
and G. M. Voelker, “DefenestraTor: Throwing out windows in Tor,” in
PETS, 2011.
[9] N. Feamster and R. Dingledine, “Location diversity in anonymity
networks,” in WPES, 2004.
[10] M. Edman and P. F. Syverson, “AS-awareness in Tor path selection,” in
CCS, 2009.
[11] Z. M. Mao, L. Qiu, J. Wang, and Y. Zhang, “On AS-level path
inference,” in SIGMETRICS, 2005.
[12] H. V. Madhyastha, T. Isdal, M. Piatek, C. Dixon, T. Anderson, A. Kr-
ishnamurthy, and A. Venkataramani, “iPlane: An information plane for
distributed services,” in OSDI, 2006.
[13] H. V. Madhyastha, E. Katz-Bassett, T. Anderson, A. Krishnamurthy,
and A. Venkataramani, “iPlane Nano: Path prediction for peer-to-peer
applications,” in NSDI, 2009.
[14] “The Tor Project, Inc.” http://www.torproject.org.
[15] M. G. Reed, P. F. Syverson, and D. M. Goldschlag, “Anonymous
connections and onion routing,” IEEE JSAC, 1998.
[16] M. Wright, M. Adler, B. N. Levine, and C. Shields, “Defending
anonymous communications against passive logging attacks,” in IEEE
S&P, 2003.
[17] “Quantcast,” http://www.quantcast.com/top-sites-1.
[18] “PlanetLab,” http://www.planet-lab.org.
[19] “MaxMind - GeoLite City,” http://www.maxmind.com/app/geolitecity.
[20] M. Edman and B. Yener, “On anonymity in an electronic society:
A survey of anonymous communication systems,” ACM Computing
Surveys, 2009.
[21] N. Hopper, E. Y. Vasserman, and E. Chan-TIN, “How much anonymity
does network latency leak?” TISSEC, 2010.
[22] N. Mathewson and R. Dingledine, “Practical trafﬁc analysis: Extending
and resisting statistical disclosure,” in PETS, 2004.
[23] S. J. Murdoch and P. Zieliski, “Sampled trafﬁc analysis by internet-
exchange-level adversaries,” in PETS, 2007.
[24] “Tor path speciﬁcation,” https://gitweb.torproject.org/torspec.git?a=
blob plain;hb=HEAD;f=path-spec.txt, 2011.
[25] A. Broido and kc claffy, “Analysis of RouteViews BGP data: Policy
atoms,” in Network Resource Data Management Workshop, 2001.
[26] “Tor metrics portal: Users,” https://metrics.torproject.org/users.html.
[27] D. Meyer, “RouteViews,” http://www.routeviews.org.
[28] “RIPE Routing Information Service,” http://www.ripe.net/ris/.
[29] R. Krishnan, H. V. Madhyastha, S. Srinivasan, S. Jain, A. Krishnamurthy,
T. Anderson, and J. Gao, “Moving beyond end-to-end path information
to optimize CDN performance,” in IMC, 2009.
[30] P. Mittal, A. Khurshid, J. Juen, M. Caesar, and N. Borisov, “Stealthy traf-
ﬁc analysis of low-latency anonymous communication using throughput
ﬁngerprinting,” in CCS, 2011.
[31] C. Gini, “Measurement of inequality of incomes,” The Economic Jour-
nal, 1921.
[32] D. Lee, K. Jang, C. Lee, G. Iannaccone, and S. Moon, “Scalable
and systematic Internet-wide path and delay estimation from existing
measurements,” Computer Networks, 2011.
[33] J. Qiu and L. Gao, “AS path inference by exploiting known AS paths,”
in GLOBECOM, 2006.
[34] “Archipelago measurement
infrastructure,”
http://www.caida.org/
projects/ark/.
[35] L. Gao, “On inferring autonomous system relationships in the Internet,”
IEEE/ACM ToN, 2001.
[36] “iPlane: Datasets,” http://iplane.cs.washington.edu/data/data.html.
[37] “The Tor directory protocol,” https://gitweb.torproject.org/torspec.git?a=
blob plain;hb=HEAD;f=dir-spec.txt, 2011.
[38] “iPlane: Measurements and query interface,” http://iplane.cs.washington.
edu/iplane interface.pdf.
[39] M. Sherr, B. Thau, and L. M. Blaze, “Towards application-aware
anonymous routing,” in HotSec, 2007.
[40] A. Panchenko, L. Pimenidis, and J. Renner, “Performance analysis of
anonymous communication channels provided by Tor,” International
Conference on Availability, Reliability and Security, 2008.
[41] S. Le-Blond, P. Manils, C. Abdelberi, M. A. Kˆaafar, C. Castelluccia,
A. Legout, and W. Dabbous, “One bad apple spoils the bunch: Exploiting
P2P applications to trace and proﬁle tor users,” CoRR, 2011.
[42] K. Loesing, S. J. Murdoch, and R. Dingledine, “A case study on
measuring statistical data in the Tor anonymity network,” in Workshop
on Ethics in Computer Security Research (WECSR), 2010.
490
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply.