your refl ection point using relative URLs, you can specify a base URL to a server
that you control. When the browser loads the scripts specifi ed in the remainder of
the HTML page, they are loaded from the server you specifi ed, yet they are still
executed in the context of the page that has invoked them. For example:
...
cc1122..iinndddd 446600 88//1199//22001111 1122::1122::2299 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 461
Chapter 12 n Attacking Users: Cross-Site Scripting 461
According to specifi cations,  tags should appear within the 
section of the HTML page. However, some browsers, including Firefox, accept
 tags appearing anywhere in the page, considerably widening the scope
of this attack.
Space Following the Tag Name
Several characters can replace the space between the tag name and the fi rst
attribute name:
Note that even where an attack does not require any tag attributes, you should
always try adding some superfl uous content after the tag name, because this
bypasses some simple fi lters:
Attribute Names
Within the attribute name, you can use the same NULL byte trick described
earlier. This bypasses many simple fi lters that try to block event handlers by
blocking attribute names starting with on:
Attribute Delimiters
In the original example, attribute values were not delimited, requiring some
whitespace after the attribute value to indicate that it has ended before another
attribute can be introduced. Attributes can optionally be delimited with double
or single quotes or, on IE, with backticks:
Switching around the attributes in the preceding example provides a further
way to bypass some fi lters that check for attribute names starting with on. If
the fi lter is unaware that backticks work as attribute delimiters, it treats the
following example as containing a single attribute, whose name is not that of
an event handler:
cc1122..iinndddd 446611 88//1199//22001111 1122::1122::2299 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 462
462 Chapter 12 n Attacking Users: Cross-Site Scripting
By combining quote-delimited attributes with unexpected characters
following the tag name, attacks can be devised that do not use any whitespace,
thereby bypassing some simple fi lters:
TRY IT!
http://mdsec.net/search/69/
http://mdsec.net/search/72/
http://mdsec.net/search/75/
Attribute Values
Within attribute values themselves, you can use the NULL byte trick, and you
also can HTML-encode characters within the value:
Because the browser HTML-decodes the attribute value before processing
it further, you can use HTML encoding to obfuscate your use of script code,
thereby evading many fi lters. For example, the following attack bypasses many
fi lters seeking to block use of the JavaScript pseudo-protocol handler:
When using HTML encoding, it is worth noting that browse rs tolerate vari-
ous deviations from the specifi cations, in ways that even fi lters that are aware
of HTML encoding issues may overlook. You can use both decimal and hexa-
decimal format, add superfl uous leading zeros, and omit the trailing semicolon.
The following examples all work on at least one browser:
Tag Brackets
In some situations, by exploiting quirky application or browser behavior, it is
possible to use invalid tag brackets and still cause the browser to process the
tag in the way the attack requires.
cc1122..iinndddd 446622 88//1199//22001111 1122::1122::2299 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 463
Chapter 12 n Attacking Users: Cross-Site Scripting 463
Some applications perform a superfl uous URL decode of input after their
input fi lters have been applied, so the following input appearing in a request:
%253cimg%20onerror=alert(1)%20src=a%253e
is URL-decoded by the application server and passed to the application as:
%3cimg onerror=alert(1) src=a%3e
which does not contain any tag brackets and therefore is not blocked by the
input fi lter. However, the application then performs a second URL decode, so
the input becomes:
which is echoed to the user, causing the attack to execute.
As described in Chapter 2, something similar can happen when an application
framework “translates” unusual Unicode characters into their nearest ASCII
equivalents based on the similarity of their glyphs or phonetics. For example,
the following input uses Unicode double-angle quotation marks (%u00AB and
%u00BB) instead of tag brackets:
«img onerror=alert(1) src=a»
The application’s input fi lters may allow this input because it does not
contain any problematic HTML. However, if the application framework trans-
lates the quotation marks into tag characters at the point where the input is
inserted into a response, the attack succeeds. Numerous applications have
been found vulnerable to this kind of attack, which developers may be for-
given for overlooking.
Some input fi lters identify HTML tags by simply matching opening and clos-
ing angle brackets, extracting the contents, and comparing this to a blacklist
of tag names. In this situation, you may be able to bypass the fi lter by using
superfl uous brackets, which the browser tolerates:
alert(1);//
In some cases, unexpected behavior in browsers’ HTML parsers can be lever-
aged to deliver an attack that bypasses an application’s input fi lters. For example,
the following HTML, which uses ECMAScript for XML (E4X) syntax, does not
contain a valid opening script tag but nevertheless executes the enclosed script
on current versions of Firefox:
cc1122..iinndddd 446633 88//1199//22001111 1122::1122::3300 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 464
464 Chapter 12 n Attacking Users: Cross-Site Scripting
TIP In several of the fi lter bypasses described, the attack results in HTML
that is malformed but is nevertheless tolerated by the client browser. Because
numerous quite legitimate websites contain HTML that does not strictly com-
ply to the standards, browsers accept HTML that is deviant in all kinds of ways.
They effectively fi x the errors behind the scenes before the page is rendered.
Often, when you are trying to fi ne-tune an attack in an unusual situation, it
can be helpful to view the virtual HTML that the browser constructs out of the
server’s actual response. In Firefox, you can use the WebDeveloper tool, which
contains a View Generated Source function that performs precisely this task.
Character Sets
In some situations, you can employ a powerful means of bypassing many types
of fi lters by causing the application to accept a nonstandard encoding of your
attack payload. The following examples show some representations of the string
 in alternative character sets:
UTF-7
+ADw-script+AD4-alert(document.cookie)+ADw-/script+AD4-
US-ASCII
BC 73 63 72 69 70 74 BE 61 6C 65 72 74 28 64 6F ; ¼script¾alert(do
63 75 6D 65 6E 74 2E 63 6F 6F 6B 69 65 29 BC 2F ; cument.cookie)¼/
73 63 72 69 70 74 BE ; script¾
UTF-16
FF FE 3C 00 73 00 63 00 72 00 69 00 70 00 74 00 ; ÿþ.a.l.e.r.t.(.d.
6F 00 63 00 75 00 6D 00 65 00 6E 00 74 00 2E 00 ; o.c.u.m.e.n.t...
63 00 6F 00 6F 00 6B 00 69 00 65 00 29 00 3C 00 ; c.o.o.k.i.e.)..
These encoded strings will bypass many common anti-XSS fi lters. The challenge
of delivering a successful attack is to make the browser interpret the response
using the character set required. If you control either the HTTP Content-Type
header or its corresponding HTML metatag, you may be able to use a nonstan-
dard character set to bypass the application’s fi lters and cause the browser to
interpret your payload in the way you require. In some applications, a charset
parameter is actually submitted in certain requests, enabling you to directly
set the character set used in the application’s response.
If the application by default uses a multibyte character set, such as Shift-JIS,
this may enable you to bypass certain input fi lters by submitting characters that
have special signifi cance in the character set being used. For example, suppose
two pieces of user input are returned in the application’s response:
 ... [input2]
cc1122..iinndddd 446644 88//1199//22001111 1122::1122::3300 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 465
Chapter 12 n Attacking Users: Cross-Site Scripting 465
For input1, the application blocks input containing quotation marks to prevent
an attacker from terminating the quoted attribute. For input2, the application
blocks input containing angle brackets to prevent an attacker from using any
HTML tags. This appears to be robust, but an attacker may be able to deliver
an exploit using the following two inputs:
input1: [%f0]
input2: “onload=alert(1);
In the Shift-JIS character set, various raw byte values, including 0xf0, are used
to signal a 2-byte character that is composed of that byte and the following byte.
Hence, when the browser processes input1, the quotation mark following the
0xf0 byte is interpreted as part of a 2-byte character and therefore does not delimit
the attribute value. The HTML parser continues until it reaches the quotation
mark supplied in input2, which terminates the attribute, allowing the attacker’s
supplied event handler to be interpreted as an additional tag attribute:
 ... “onload=alert(1);
When exploits of this kind were identifi ed in the widely used multibyte
character set UTF-8, browser vendors responded with a fi x that prevented the
attack from succeeding. However, currently the same attack still works on some
browsers against several other lesser-used multibyte character sets, including
Shift-JIS, EUC-JP, and BIG5.
Bypassing Filters: Script Code
In some situations, you will fi nd a way to manipulate refl ected input to introduce
a script context into the application’s response. However, various other obstacles
may prevent you from executing the code you need to deliver an actual attack.
The kind of fi lters you may encounter here typically seek to block the use of
certain JavaScript keywords and other expressions. They may also block useful
characters such as quotes, brackets, and dots.
As with the obfuscation of attacks using HTML, you can use numerous
techniques to modify your desired script code to bypass common input fi lters.
Using JavaScript Escaping
JavaScript allows various kinds of character escaping, which you can use to
avoid including required expressions in their literal form.
Unicode escapes can be used to represent characters within JavaScript key-
words, allowing you to bypass many kinds of fi lters:
If you can make use of the eval command, possibly by using the preceding
technique to escape some of its characters, you can execute other commands
by passing them to the eval command in string form. This allows you to
cc1122..iinndddd 446655 88//1199//22001111 1122::1122::3300 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 466
466 Chapter 12 n Attacking Users: Cross-Site Scripting
use various string manipulation techniques to hide the command you are
executing.
Within JavaScript strings, you can use Unicode escapes, hexadecimal escapes,
and octal escapes:
Furthermore, superfl uous escape characters within strings are ignored:
Dynamically Constructing Strings
You can use other techniques to dynamically construct strings to use in your attacks:
The fi nal example, which works on Firefox, allows you to decode a Base64-
encoded command before passing it to eval.
Alternatives to eval
If direct calls to the eval command are not possible, you have other ways to
execute commands in string form:
Alternatives to Dots
If the dot character is being blocked, you can use other methods to perform
dereferences:
Combining Multiple Techniques
The techniques described so far can often be used in combination to apply sev-
eral layers of obfuscation to your attack. Furthermore, in cases where JavaScript
is being used within an HTML tag attribute (via an event handler, scripting
pseudo-protocol, or dynamically evaluated style), you can combine these tech-
niques with HTML encoding. The browser HTML-decodes the tag attribute
value before the JavaScript it contains is interpreted. In the following example,
the “e” character in “alert” has been escaped using Unicode escaping, and the
backslash used in the Unicode escape has been HTML-encoded:
cc1122..iinndddd 446666 88//1199//22001111 1122::1122::3300 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 467
Chapter 12 n Attacking Users: Cross-Site Scripting 467
Of course, any of the other characters within the onerror attribute value could
also be HTML-encoded to further hide the attack:
This technique enables you to bypass many fi lters on JavaScript code, because
you can avoid using any JavaScript keywords or other syntax such as quotes,
periods, and brackets.
Using VBScript
Although common examples of XSS exploits typically focus on JavaScript, on
Internet Explorer you also can use the VBScript language. It has different syntax
and other properties that you may be able to leverage to bypass many input
fi lters that were designed with only JavaScript in mind.
You can introduce VBScript code in various ways:
In all cases, you can use vbscript instead of vbs to specify the language. In
the last example, note the use of MsgBox+1 to avoid the use of whitespace, thereby
avoiding the need for quotes around the attribute value. This works because
+1 effectively adds the number 1 to nothing, so the expression evaluates to 1,
which is passed to the MsgBox function.
It is noteworthy that in VBScript, some functions can be called without brack-
ets, as shown in the preceding examples. This may allow you to bypass some
fi lters that assume that script code must employ brackets to access any functions.
Furthermore, unlike JavaScript, the VBScript language is not case-sensitive,
so you can use upper and lowercase characters in all keywords and function
names. This behavior is most useful when the application function you are
attacking modifi es the case of your input, such as by converting it to uppercase.
Although this may have been done for reasons of functionality rather than secu-
rity, it may frustrate XSS exploits using JavaScript code, which fails to execute
when converted to uppercase. In contrast, exploits using VBScript still work:
Combining VBScript and JavaScript
To add further layers of complexity to your attack, and circumvent some fi lters,
you can call into VBScript from JavaScript, and vice versa:
cc1122..iinndddd 446677 88//1199//22001111 1122::1122::3300 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 468
468 Chapter 12 n Attacking Users: Cross-Site Scripting
You can even nest these calls and ping-pong between the languages as required:
As mentioned, VBScript is case-insensitive, allowing you to execute code in
contexts where your input is converted to uppercase. If you really want to call
JavaScript functions in these situations, you can use string manipulation func-
tions within VBScript to construct a command with the required case and then
execute this using JavaScript:
Using Encoded Scripts