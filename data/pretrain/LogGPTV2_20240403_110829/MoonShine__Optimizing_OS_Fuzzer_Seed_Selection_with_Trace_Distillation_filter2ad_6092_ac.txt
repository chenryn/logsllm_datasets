### 5.2 Can MoonShine Discover New Vulnerabilities? (RQ1)

**Table 1: Discovered Linux Kernel Vulnerabilities Using MoonShine**

| Subsystem | Module | Operation | Impact | Version Introduced | Distill. Method |
|-----------|--------|-----------|--------|--------------------|-----------------|
| BPF       | bpf/devmap.c | dev_map_alloc() | Illegal allocation size | 4.6 | (I+E) & (E) |
| BTRFS     | fs/btrfs/file.c | btrfs_fallocate() | Assert Failure | 4.14 | (I+E) |
| JFS       | fs/jfs/xattr.c | __jfs_setxattr() | Memory Corruption | 4.0 | (I+E) |
| Network   | net/ipv4/inet_connection_sock.c | inet_child_forget() | Use after Free | 4.4 | (I+E) |
| VFS       | fs/fs-writeback.c | move_expired_inodes() | Use After Free | 4.10 | (I+E) |
| Network   | net/core/stream.c | sk_kill_stream_queues() | Memory Corruption | 4.15-rc8 | (I+E) |
| Network   | net/core/dst.c | dst_release() | NULL Pointer Deref | 4.4 | (I+E) |
| Network   | net/nfc/nfc.h | nfc_device_iter_exit() | NULL Pointer Deref | 4.17-rc4 | (I+E) |
| Network   | net/socket.c | socket_setattr() | NULL Pointer Deref | 4.4 | (I+E) |
| Network   | net/netfilter/nf_conntrack_core.c | init_conntrack() | Memory Leak | 4.10 | (I+E) |
| Reiserfs  | fs/reiserfs/inode.c, fs/reiserfs/ioctl.c, fs/direct-io.c | Multiple | Deadlock | 2.6, 4.4, 4.6 | (I+E) & (E) |
| TTY       | tty/serial/8250/8250_port.c | serial8250_console_putchar() | Kernel Hangs Indefinitely | 4.14-rc4 | (I+E) |
| VFS       | fs/iomap.c | iomap_dio_rw() | Data Corruption | 3.10 | (I+E) & (E) |
| VFS       | lib/iov_iter.c | iov_iter_pipe() | Data Corruption | 3.10 | (I+E) & (E) |
| VFS       | fs/pipe.c | pipe_set_size() | Integer Overflow | 4.9 | (I+E) & (E) |
| VFS       | inotify_fsnotify.c | inotify_handle_event() | Memory Corruption | 3.14 | (I+E) |

**Vulnerability Discovery Results:**
- **Total New Vulnerabilities:** 17
- **Vulnerabilities Found by Moonshine(I+E):** 10
- **Average Age of Vulnerabilities (Moonshine(I+E)):** Over 9 months
- **Oldest Vulnerabilities (fs/iomap.c and iomap_dio_rw):** Over 4 years old
- **Concurrency Bugs (Moonshine(I+E)):** All 10 vulnerabilities were concurrency bugs triggered by Syzkaller scheduling calls on different threads.
- **Core Subsystems Affected:** VFS and net/core

**Comparison with Default Syzkaller:**
- **Default Syzkaller Vulnerabilities Found:** 0
- **Vulnerabilities Found by MoonShine:** 17

**Result 1:**
- **Conclusion:** MoonShine found 17 new vulnerabilities that default Syzkaller could not. Among these, 10 vulnerabilities were only discovered using implicit dependency distillation.

### 5.3 Can MoonShine Improve Code Coverage? (RQ2)

**Coverage Comparison:**
- **Edge Coverage:**
  - **Moonshine(I+E):** 53,270 unique basic blocks
  - **MoonShine(E):** 51,920 unique basic blocks
  - **Default Syzkaller:** 47,320 unique basic blocks

**Breakdown by System Call:**
- **Figure 5:** Shows the coverage achieved by Moonshine(I+E) and default Syzkaller by system call. The height of each bar represents the union of all unique basic blocks hit by that system call across all fuzzer programs over 24 hours of fuzzing.
- **Outperforming Calls:** Moonshine(I+E) outperformed default Syzkaller on standard system calls such as read, write, fsync, and mmap.

**Correlation Between Coverage and Bugs:**
- **File and Networking Subsystems:** 10 out of 17 bugs were concurrency-related and found in file and networking subsystems.
- **High Coverage Calls:** fsync and sockpair produced the most new coverage under distilled seeds, suggesting that Syzkaller's hardcoded rules are insufficient for common calls.

**Result 2:**
- **Conclusion:** MoonShine achieves 13% higher edge coverage than default Syzkaller.

### 5.4 How Effectively Can MoonShine Distill Traces? (RQ3)

**Dependency Tracking:**
- **Seed Program Coverage:** Measured the coverage achieved by seed programs during trace generation.
- **Distilled Trace Coverage:**
  - **Moonshine(I+E):** 86.8% of original trace coverage
  - **MoonShine(E):** 78.6% of original trace coverage
  - **RANDOM:** At most 23% of original trace coverage

**Impact of Unrecovered Coverage:**
- **Syzkaller with Mutation and Seed Generation:**
  - **Moonshine(I+E):** 95% of original traces
  - **MoonShine(E):** 91.6% of original traces
  - **RANDOM:** Minimal improvement over default Syzkaller

**Result 3:**
- **Conclusion:** MoonShine distills 3220 traces consisting of 2.9 million calls into seeds totaling 16,442 calls, preserving 86% of trace coverage.

### 5.5 How Efficient is MoonShine? (RQ4)

**Efficiency Evaluation:**
- **Trace Generation:**
  - **Execution Time:** 250% slowdown due to kcov coverage capture and deduplication.
  - **Average Trace Size Reduction:** From 33MB to 102KB.

- **Distillation:**
  - **Execution Time:** Proportional to the size of the source.
  - **Time to Distill 3220 Traces:** 18 minutes.
  - **Dependency Graph and Implicit Dependency Tracking:** 30 seconds.

**Result 4:**
- **Conclusion:** MoonShine efficiently distills large numbers of traces, reducing the average trace size and maintaining high coverage.