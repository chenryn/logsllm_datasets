## Zabbix系统优化与日志监控

### 14.3 数据库及其他调优
在Zabbix 2.2中，进行系统调优已经变得相对简单。通过使用Linux中的`ps -ef`命令或其他类似命令，可以查看Zabbix各个进程的活动情况及其性能数据。例如：
```sh
./zabbix_server: history syncer #4 [synced 0 items in 0.000044 sec, idle]
```
这条命令展示了负责历史数据同步的进程的状态。

如果Zabbix响应缓慢，建议将`history`表进行分区，并关闭`housekeeper`功能。这是因为`history`表的数据量非常大，开启`housekeeper`会在执行过程中占用大量资源。具体操作时，应根据实际情况调整时间间隔（如每天、每周或每月），并关闭`housekeeper`以解决80%的数据库问题。

若数据库数据写入速度较慢，可以通过增加`zabbix_server.conf`配置文件中的`StartDBSyncers`参数值来提高性能。该参数控制从Zabbix写入数据库的进程数量。

### 15.1 日志监控准备工作
为了实现日志监控，需要在`zabbix_agentd.conf`文件中设置`ServerActive`为Zabbix Server的IP地址。此外，还需确保主机名与Zabbix Server中的配置一致。日志监控通常是主动模式（Active）的，因此必须正确配置`Host name`和`ServerActive`。

### 15.2 添加Item
在添加日志监控项时，需配置以下参数：
- **Name**：监控项名称。
- **Key**：日志文件路径及关键字，如`log[/tmp/app.log,ERROR]`。
- **Type of information**：信息类型，通常选择`Log`。
- **Update interval (in sec)**：更新间隔，例如5秒。
- **History storage period (in days)**：历史存储周期，例如90天。
- **Log time format**：日志时间格式，例如`yyyy-MM-dd HH:mm:ss`。

### 15.3 测试
完成配置后，可以在Zabbix Agent所在的服务器上进行测试。观察`zabbix_agentd.log`文件，确认日志监控项是否正常工作。例如：
```sh
data:[
"clock":1396279844,
"lastlogsize":52856,
"value":"2014-03-31 23:30:41 ERROR",
"key":"log[\/tmp\/app.log,ERROR]",
"host":"Zabbix server",
"ns":321740000
]
```

### 15.4 配置报警
在Host或Template上找到Items，点击Wizard图标，在弹出菜单中选择“Create trigger”。配置触发器时，可以选择关键字匹配方式，如`iregexp`表示忽略大小写的正则表达式匹配。例如，当出现“ERROR”关键字时，触发器状态变为PROBLEM。

### 15.5 轮转的日志文件
对于轮转的日志文件，可以使用`logrt`监控项。例如，配置`logrt[/tmp/app.log.*,ERROR]`来监控所有名为`/tmp/app.log.*`的日志文件中的“ERROR”关键字。

### 15.6 获取关键字
有时只需要提取特定的关键字而不是完整的错误信息。可以通过正则表达式来实现，例如：
```sh
log[/tmp/app.log,ERROR(.*),,,1]
```
这将匹配“ERROR”后的所有内容直至行末，并提取第一组匹配结果。

### 16.1 Zabbix数据库表结构概述
Zabbix数据库设计具有一定的特点，每种资源都有对应的表。例如，`hosts`表存储主机信息，`items`表存储监控项信息。表名通常是复数形式，且每张表都包含一个唯一的ID字段，如`hosts`表中的`hostid`。

了解Zabbix数据库结构有助于提升效率。例如，通过SQL查询可以轻松获取某个机房的网卡出口流量之和，而无需复杂的前端操作。

### 注意事项
- 大批量更新可能会导致Oracle tx锁，建议直接使用SQL语句进行更新。
- 数据库操作需谨慎，以免造成Zabbix崩溃。
- Zabbix前端URL中包含多个参数，如`hostid`、`itemid`等，可用于快速跳转到对应界面。

通过以上步骤和注意事项，可以有效地优化Zabbix系统并实现高效的日志监控。