        uint32_t SFTRSTF : 1;
        uint32_t IWDGRSTF : 1;
        uint32_t WWDGRSTF : 1;
        uint32_t LPWRRSTF : 1;
    }CSR_Bit;
    typedef struct{
        __IO CR_Bit CR;
        __IO CFGR_Bit CFGR;
        __IO CIR_Bit CIR;
        __IO APB2RSTR_Bit APB2RSTR;
        __IO APB1RSTR_Bit APB1RSTR;
        __IO AHBENR_Bit AHBENR;
        __IO APB2ENR_Bit APB2ENR;
        __IO APB1ENR_Bit APB1ENR;
        __IO BDCR_Bit BDCR;
        __IO CSR_Bit CSR;
    }RCC_Type;
大概300多行结构体定义完毕后，我们就可以开始写时钟的初始化代码了，实际上，只要明白了逻辑，这部分代码并不难写。
首先我们需要明确的第一件事：谁才是最先启动的时钟？显然外部晶振是不能担此重任的，你总不能外部晶振不启动你就不干活了对吧？所以启动的必然是HSI和LSI，只有他们干活了我们才能继续工作，通过RCC寄存器，我们首先进行HSI使能，然后要写个while循环，一直等待直到HSI准备就绪才能开始下一步，代码如下
        //使能HSI
        RCC->CR.HSION = 1;
        //等待HSI就绪
        while(!RCC->CR.HSIRDY);
接着就是启动外部晶振了，和上面的操作类似，我们这里同样while循环写死。
        //使能HSE
        RCC->CR.HSEON = 1;
        //等待HSE就绪
        while(!RCC->CR.HSERDY);
接下来就是对各个设备进行简单的分频、倍频设置，我们根据自己的实际情况进行调整即可，我写了详细的注释，代码如下：
        //调整低速APB预分频(APB1)为2分频
        //调整高速APB预分频(APB2)为不分频
        //调整AHB预分频为不分频
        //调整ADC预分频为2分频
        RCC->CFGR.PPRE1  = 4;
        RCC->CFGR.PPRE2  = 0;
        RCC->CFGR.HPRE   = 0;
        RCC->CFGR.ADCPRE = 0;
        //调整PLL输入时钟源为HSE
        RCC->CFGR.PLLSRC = 1;
        //调整PLL倍频系数为9
        RCC->CFGR.PLLMUL = 7;
        //使能PLL时钟
        RCC->CR.PLLON = 1;
        //等待PLL时钟就绪
        while(!RCC->CR.PLLRDY);
        //调整SYSCLK为PLL
        RCC->CFGR.SW = 2;
        //等待SYSCLK为PLL
        while(RCC->CFGR.SWS!=2);
到此，我们就简单了实现了我们自己的时钟初始化，对应如下stm32cube自动生成的函数，替换即可。
    RCC_DeInit();    //初始化RCC
    RCC_HSEConfig(RCC_HSE_ON);    //设置HSE
    HSEStartUpStatus = RCC_WaitForHSEStartUp();    //等待HSE就绪
    RCC_HCLKConfig();    //设置AHB时钟
    RCC_PCLK2Config();    //设置高速AHB时钟
    RCC_PCLK1Config();    //设置低速AHB时钟
    RCC_PLLConfig();        //设置PLL
    RCC_PLLCmd(ENABLE);        //启用pll
    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)      //等待PLL工作
    RCC_SYSCLKConfig();        //设置系统时钟
    while(RCC_GetSYSCLKSource() != 0x08)            //判断是否系统时钟源是否为PLL
    RCC_APB2PeriphClockCmd()/RCC_APB1PeriphClockCmd（）                //启动外设时钟
## 有些复杂的中断
在题目中使用usart传输flag，但usart作为一种通信手段，它最终还是依赖于中断机制，所以我们必须得先研究明白stm32的中断机制，才能更好的学习usart的使用。对于stm32来说，由于它依赖于ARM的内核，所以它的中断机制与ARM内核息息相关，以M3内核为例：
  * m3支持256个中断，而stm32在基础上进行了删减，使用了84个中断；
  * m3支持256级的中断优先级，可以做到每一个中断都有一个优先级，而stm32只保留了16级
我们在上一篇文章中，利用stm32cube自动将其中的一个GPIO引脚“进化”为了中断exti1，大概分成了三步
  * 初始化exti
  * 初始化NVIC
  * 编写中断服务函数
第一步中的exti是外部中断的意思，在stm32的84个中断中，有64个属于外部中断，严格来说，stm32每一个GPIO引脚都可以“进化”为外部中断，但是它规定中断以组为单位，比如PA1、PB1、PC1、PD1、PE1、PF1、PG1为一个组，图中的exti1就表示这是第一组中断组，每一个组同一时间只能有一个代表出场，一旦选择了PA1，那么剩下的组员就不能再“进化”了。
所谓“进化”，实际上就是将相应的端口映射到相应的外部事件，端口出现变化就会触发对应的外部事件，进而到外部事件的中断服务程序。可以参考下图中exit的连接方式，每一组的引脚连接到一个选择器上，然后交由对应的EXTI处理
第二步是初始化NVIC，NVIC是嵌套向量中断控制器的意思，他是所有中断的归属，不管是上面的exti还是usart、usb等等最终都是NVIC，然后由NVIC传递给cpu处理，最后通过flash中断向量表确定对应中断对应的函数地址，跳转到对应的中断处理函数。NVIC提供了
43个中断通道（通道以提前分配好，比如exti1就是第7个通道，查阅手册即可），个中断通道都具备自己的中断优先级控制字节PRI_n，每4个通道的8位中断优先级控制字构成一个32位的优先级寄存器，通过设置寄存器即可改变对应的中断优先级，当有两个以上的中断到来时，NVIC会根据中断的优先级进行抉择。
但实际上，stm32虽然每个通道提供了8位中断优先级，但由于它本身只支持16种优先级，所以只有高4位是有效的，而高4位也颇有讲究，分为了抢占式优先级和响应优先级，高位为抢占式优先级，低位为响应式优先级（可以任意位数，比如1和3、2和2、4和0），他们的关系有点复杂：
  * 具有高抢占式优先级的中断可以在具有低抢占式优先级的中断处理过程中被响应，也就是实现了中断嵌套。
  * 同样的抢占优先级的中断如果同时到来，就根据响应优先级判断，实现了中断的判优
自动生成的代码如下：
    NVIC_InitTypeDefNVIC_InitStructure;
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);           //选择中断分组2
    NVIC_InitStructure.NVIC_IRQChannel= EXTI1_IRQChannel;     //选择exti1
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority= 0; //抢占式中断优先级设置为0
    NVIC_InitStructure.NVIC_IRQChannelSubPriority= 0;        //响应式中断优先级设置为0
    NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;            //使能中断
第三步是编写中断服务函数，这一步就没啥好说的了，写就完事了，唯一要注意的是，由于中断通道中EXTI0 –
EXTI4这5个外部中断在不同的通道中，所以有着自己的单独的中断响应函数，EXTI5-9共用一个通道，也就只有一个中断响应函数，EXTI10-15也是共用一个中断响应函数。
     1 void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
     2 {
     3   uint32_t tmp = 0x00;
     4   /* Check the parameters */
     5   assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));                //assert_param是对参数进行有效性检查
     6   assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
     7   
     8   tmp = ((uint32_t)0x0F) EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    10   AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    11 }
上述自动生成的代码是将PD11,PD12映射到外部事件上，9、10行是关键，通过与或操作，将寄存器的值改为对应的值，进而实现目的，如果你已经按上一篇文章中所说的将GPIO及中断的寄存器全部写作结构体的话，只需要查看手册将相应的结构体赋值即可。
上述中断都是exti的内容，除了exti，还有usart等一堆的中断，这些中断不需要和外部事件映射即可使用，也就是改写了第一步，首先打开对应中断的，再交由NVIC，最终跳转至对应的处理函数。
usart原理或许有些复杂，但单纯去写一个带有usart的代码却非常容易，这里我们就不再使用寄存器做操作了，我们直接采用中断的库函数来进行操作。我们在stm32cube中开启usart功能，生成的代码中会添加usart库，里面提供了数据发送、数据接收等功能，这些不是我们本节的重点，主要先来看看中断部分
    HAL_UART_TxHalfCpltCallback();    //一半数据发送完成后的回调函数。
    HAL_UART_TxCpltCallback();    //全部数据发送完成后的回调函数
    HAL_UART_RxHalfCpltCallback();    //一半数据接收完成后的回调函数。
    HAL_UART_RxCpltCallback();    //全部数据接收完成后的回调函数
    HAL_UART_ErrorCallback();        //传输过程中出现错误时的回调函数。
我们只需要编写这些回调函数即可实现对应的功能，其他的诸如usb、dma等等也是类似，用起来相当方便。
## 小结
到此我们已经实现了题目中大部分内容，最后就是usart的数据传输了，下一篇文章中我们将重点讨论usart的原理与使用，并以usart为出发点，再来看看其他stm32有趣的地方