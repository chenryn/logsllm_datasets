ror conditions to a set of well-deﬁned registers. MCA
USENIX Association
29th USENIX Security Symposium    1447
PayloadCommandDomain16342403932310oﬀers a programmable interface which enables system
software to conﬁgure and handle trigger events based on
the generated alerts. Since serious error conditions may
not allow system software to conduct any recovery (e.g.,
through controlled shutdown), MCA supports additional
recovery options through external devices. However,
since this mode of operation requires additional, non-
standard setup we focus on system-level recovery using
MCA in this paper. In the case of Linux and Windows
the OS incorporates a driver that interfaces with the
MCA registers and error handlers. Error conditions can
then be logged, reported, and handled through a partic-
ular class of software interrupts, called Machine-Check
Exceptions (MCEs). Throughout our experiments we
leveraged MCEs to aid in identifying and reverse engi-
neering vulnerable code patterns. It is noteworthy to
mention that V0LTpwn injects non-recoverable error con-
ditions which cannot be corrected from system software,
and hence, bypasses MCA.
2.4 Intel Software Guard Extensions
Intel’s Software Guard Extensions (SGX) [27] allow de-
velopers to design hardware-protected areas, known as
enclaves, that contain sensitive code. Access to enclaves
is only allowed through speciﬁc entry points, known as
ecalls. Unauthorized access to SGX memory, known
as Enclave Page Cache, is disallowed by the processor.
Bus snooping attacks, which consist in physically moni-
toring the memory bus to extract memory values, are
mitigated through the use of memory encryption and
memory integrity techniques. SGX oﬀers local and re-
mote attestation services.
SGX does not address side-channel attacks by design,
leaving to the developer the burden of developing side-
channel resilient code. Consequently, there have been a
number of works on side-channel and micro-architectural
attacks [9,21,22,37,59,64], and side-channel defenses [4,7,
11,23,47,52,54]. Critically, SGX does not protect against
undervolting attacks either, thus allowing V0LTpwn.
To the best of our knowledge, no previous work man-
aged to violate the integrity of computation in an SGX
enclave without resorting to software vulnerabilities.
3 The V0LTpwn Attack
In this Section we present the main principles of our
V0LTpwn attack, which injects faults in SGX enclaves
by undervolting the processor.
3.1 Adversary Model and Assumptions
Our adversary model and assumptions are consistent
with the SGX threat model. We assume:
Root access The attacker has control over a user pro-
cess with root privileges. This also enables an ad-
versary to query the target system, e.g., to learn
the exact model number of the processor.
DVFS The attacker has access to software-controlled
dynamic frequency scaling; all recent Intel x86 pro-
cessors support it using EIST [26] (see Section 2.1).
Moreover, we require the ﬁrmware to allow access
to MSR 0x150, which was the case for all machines
we tested.
Target binary The attacker has a copy of the intended
victim program binary for oﬄine testing. This is a
common scenario in attacks against a well-known
program or algorithm (e.g., crypto).
Unlike traditional fault-injection attacks, V0LTpwn
requires no physical access to the target machine. Fi-
nally, V0LTpwn does not rely on any software vulnera-
bilities, and hence we do not need to make any speciﬁc
assumption about the security of the code running on
the platform (all code can be protected by defenses such
as control-ﬂow [3] and data-ﬂow integrity [10], or even
formally veriﬁed).
The goal of the attacker in this setting is to tamper with
the integrity of the code executing inside an SGX enclave.
While loading attacker-controlled code by corrupting
SGX’s setup process might be viable, we note that the
impact of malicious enclaves is actually limited since
enclaves are completely isolated from each other. Hence,
inﬂuencing execution of benign enclaves might often be
more valuable for an adversary.
3.2 Challenges
To implement V0LTpwn, we face the following challenges:
Symmetric Architecture Commodity multi-core pro-
cessors from Intel maintain a single voltage domain
that is shared between all physical cores of the sys-
tem, unlike ARM cores which can be regulated
independently. As a result, undervolting the core
where the victim code executes also undervolts the
core running the exploit, leading to potential faults
in the exploit code as well. We tackle this challenge
in V0LTpwn by partitioning cores and minimizing
noise throughout the system (see Section 4.1).
Processor Diversity Intel’s x86 processors are avail-
able for diﬀerent markets ranging from laptops up
to high performance server systems. Although the
microarchitecture is the same, these processor mod-
els are operated with diﬀerent voltage levels. We
address this challenge in V0LTpwn by conducting
a dedicated, oﬄine analysis phase, for which we
developed a reproducible lab setup that allows us
1448    29th USENIX Security Symposium
USENIX Association
Phase 1: Oﬄine Analysis The attacker aims to de-
termine a voltage level low enough to generate glitches
without completely disrupting the operation of the CPU
(exploitable voltage window). In order to determine an
exploitable voltage window, the attacker progressively
reduces voltage levels until faults occur, but the system
does not freeze yet. During this test, the machine is
likely to freeze or crash multiple times, which might be
detected, if the test is performed on the target machine
directly. Since the exploitable voltage window is very
similar between processors of the same model, the at-
tacker can acquire another processor of the same model
and perform these initial tests on it.
Moreover, the attacker should minimize the duration
of undervolting to prevent crashes on the target machine.
Hence, the attacker analyzes the target binary, in order
to identify parts of the code most vulnerable to faults. To
this end, the attacker can scan the binary for instances
of known vulnerable patterns, which we describe in Sec-
tion 4.3. Next, the attacker observes the execution of
the target program on the attacker’s identical processor,
in order to estimate at which point of the execution the
binary will run the fault-prone code and for how long.
In Phase 2,
Phase 2: Online Core Fault Analysis
the attacker sets up the target system for undervolting
and then probes each available core, one at a time, to
determine the speciﬁc fault patterns of that core. As
an example, the attacker can check how frequently the
core under test experiences faults under various test
conditions. This test must be done on the actual target
machine, since every physical core produces diﬀerent
glitches while undervolted.
Phase 3: Attack In the previous phases, the attacker
has learned which code can be faulted and which system
conditions are required to induce the fault. The attacker
is now able to use this knowledge to set up the system,
start the target enclave, and undervolt the processor
while the enclave is running the desired code to provoke
glitches in the data, thus violating the integrity of the
execution.
Target System Setup The target platform needs to
be conﬁgured in a fault-prone conﬁguration, using the
safe undervolting levels learned in Phase 1. Besides con-
trolling the voltage, the attacker needs to limit all sources
of noise, since the attack requires carefully balancing
the voltage level slightly above the critical threshold to
push it into fault-inducing territory at the right moment
in time. Since unexpected events during this critical
period can easily result in crashes or freezes, we organize
processes such that the victim enclave is running alone
on a core and disable various automatic management
Figure 2: Overview of the V0LTpwn attack.
to apply attack parameters inferred from a diﬀer-
ent (but similar) physical machine to the victim
machine (see Section 4.2).
Error Correction Unlike ARM processors, Intel pro-
cessors integrate the Machine Check Architecture
(MCA), which is able to correct errors which oc-
cur due to undervolting [41], as explained in Sec-
tion 2.3. Our attack bypasses MCA by generating
non-recoverable faults (see Section 4.3).
Undocumented Interfaces The hardware interfaces
to adjust the voltage (Section 2.2) are undocu-
mented. To use them, we had to rely on third-party
reverse-engineered partial documentation and piece
it together to develop a real-world setup running on
our systems.
3.3 Attack Workﬂow
As mentioned before, the goal of the attacker is to ex-
ploit hardware glitches in an undervolted processor to
inﬂuence the execution of an SGX enclave in a controlled
way. For this, the attacker needs information about the
victim’s binary as well as the response to undervolting
of the target processor model. Both of them can be
collected oﬄine, without interacting with the target sys-
tem (Phase 1 in Figure 2). Afterwards, the attacker
needs to collect information about the physical cores in
the target system, to detect which core is more prone
to faults (Phase 2 in Figure 2). With the information
from Phases 1 and 2, the attacker can choose the most
appropriate core in the system and mount the attack
(Phase 3). We will explain these phases in the following.
USENIX Association
29th USENIX Security Symposium    1449
Phase 3(Attack)Phase 2(OnlineAnalysis)Phase 1(OfﬂineAnalysis)Faulty CoreSelectionVictimProgramTimedUndervoltingFaultInjectionCoreFaultAnalysisSystem SetupNoise ReductionStressorCore PartitioningVictimProgramAnalysisVoltageAnalysisfeatures of the hardware (as we describe in Section 4.1).
This way, the victim enclave runs alone, with minimal
interference, on a core of the attacker’s choice, e.g., the
most fault-prone.
Moreover, the attacker can further tweak the conﬁgu-
ration of the processor to improve the performance of
the attack. One option is to vary the temperature of the
core, e.g., by running stressing code until the desired
temperature is reached. Additionally, the attacker can
run especially crafted code (stressor) on the logical part-
ner of the core where the victim is executing, in order
to maximize resource contention.
4 Implementation
This section presents our systematic approach to identify
vulnerable conditions on Intel processors. First, we
outline the testing procedure we developed to test for
software-inducible faults on recent x86 platforms. Then
we present how we identiﬁed vulnerable code patterns
that yield reproducible bit ﬂips on both Kaby Lake and
Coﬀee Lake processors we tested in our lab.
4.1 Attack Setup
To ensure reproducible results and prevent interference
from the run-time environment (i.e., noise) we ﬁrst es-
tablish a setup in which disturbances from hardware
and software are reduced to a minimum (or ideally, com-
pletely disabled). In the following, we explain the indi-
vidual steps to achieve that.
Controlling Voltage and Frequency On Intel pro-
cessors, the voltage and frequency are determined by
the selected P-state of the cores. As the attacker, we
can control them via the EIST or HWP interfaces (see
Section 2.1). As a ﬁrst step, we disable the operat-
ing system drivers which communicate with them. For
Linux this means disabling the modules acpi_cpufreq
and intel_pstate.
Second, we disable automatic hardware-based selec-
tion of P-states. In EIST, we have to set bit 0 of MSR
0x1AA to 1, which enables us to set the P-state directly
using MSR 0x199. A P-state can alternatively be en-
forced using HWP instead of EIST (e.g., if the ﬁrmware
enables it). This can then be achieved by setting the
minimal, maximal, and desired P-state in MSR 0x774
to the same value. Once a P-state is set, all cores of the
system are running at the same voltage level and clock
frequency. Small diﬀerences are measurable because
the on-die power regulation conducts small adjustments
based on sensor feedback and workload [2]. Having ﬁxed
a P-state, we are now able to control the voltage levels
by sending commands via MSR 0x150 (OC Mailbox).
Figure 3: Core partitioning for V0LTpwn, in order to
minimize noise and maximize resource contention on the
target program.
Core Partitioning and Noise Reduction To en-
sure that the targeted core only runs the target appli-
cation — with minimal interference — we partition all
logical cores into two groups, attack and victim (Fig-
ure 3). This can be performed using the control group
feature on Linux via the cset user-space management
utility. We assign one core to the attack group, while
putting all the remaining physical cores in the victim
group. We then migrate all running processes to the
attack group to minimize noise on the cores of the victim
group. This will not always result in perfect idle situa-
tions, since migration can fail, e.g., for kernel threads.
This means individual cores of the victim group may still
contain more than one thread.
Reducing Hardware Interference Intel processors
have mechanisms deployed to ensure that thermal lim-
its and power constraints are obeyed. In general, these
mechanisms play an active role in high-performance sit-
uations by reducing the P-state. To prevent interference
at higher P-states, we disable them in our setup. Specif-
ically, we disable the Thermal Control Circuit, Thermal
Interrupt Control, PP0 and PP1 power limits as well as
the package counterparts in the respective MSRs [26].
4.2 Undervolting x86 Processors
In the undervolting process the attacker searches for
fault-prone voltage levels. Due to the shared voltage
domain on x86-based platforms, we cannot target individ-
ual cores which makes containing faults within one core
challenging (as opposed to, e.g., ARM-based platforms
where ﬁne-grained DVFS allows undervolting physical
cores within their own voltage domain [44,55]). Hence,
our implementation makes use of a software-based ap-
proach which relies on two principles: core isolation and
selective probing. Core isolation is established through
our system setup as explained in the previous section. Se-
lective probing means that only one test core is executing
1450    29th USENIX Security Symposium
USENIX Association
Attacker CoreVictim CoreLogical CoreTargetProgramLogical CoreStressorLogical CoreLogical Core(Idle)SystemProcessesAttack Script// undervolting starts here
loop {
result = algorithm ( input );
if ( reference != result ){
buffer [] input ;
reference = algorithm ( input );
1
2
3
4
5
6
7
8
9
10
11
Listing 1: Pseudo-code of our automated testing proce-
dure.
print_difference ( reference , result );