from ASRank [11] on July 23rd, 2020), edge ASes (those
without customers or peers), and the other ASes (those that
are not among top 100 or edge ASes). The results we present
use uniform adoption among these three categories of ASes,
as in most previous works, although we also tested results for
non-uniform adoption; results were quite similar.
We focus on two types of hijacks: (i) subpreﬁx hijacks,
where a preﬁx, say 1.2/16, is announced by its legitimate
origin, and an attacking AS announces itself as the origin of
a subpreﬁx of 1.2/16, say 1.2.3/24; attacker and victim pairs
are randomly chosen from the edge ASes, and (ii) non-routed
1In 0% adoption, only the tested AS adopts the policy; in 100% adoption,
all but the tested AS adopts the policy. This treatment allows us to present
the trend for adopting and non-adoption ASes separately.
10
to the adopting ASes and higher collateral beneﬁts to the non-
adopting ASes. For all the above, we obtain the results for the
three categories of ASes, i.e., top 100 ASes, edge ASes and
others. In the interests of space, we only present the results for
the edge ASes, which account for over 75% of the ASes, and
used by most hosts; the results for the other two categories
show similar trends and are found in Appendix B.
Overall hijack rate. Fig. 6 plots the average hijack rate
over all the edge ASes (including both adopting and non-
adopting ASes) versus adoption rate. The results show that on
average, the hijack rate for all variants of ROV++ decreases
with the adoption rate, achieving Goal 2 for subpreﬁx hijacks.
We further observe that all three ROV++ variants (v1-v3)
have similar hijack rates, all signiﬁcantly lower than that of
ROV for low to medium adoption rate. As expected, ROV++
v2a is more aggressive in mitigating hijacks (at the cost of
signiﬁcantly higher disconnection rate, as we show below). We
next show the detailed results for adopting and non-adopting
ASes, respectively.
Results for adopting ASes. Fig. 7 presents the results
for the adopting ASes. We see from Fig. 7(a) that the hijack
rate of ROV is much higher than that of the ROV++ variants,
particularly under low adoption rate: with 10% adoption, the
hijack rate for edge ASes of ROV is still above 94%, vs. less
than 10% for ROV++ variants. As expected, ROV++ v2a has
the lowest hijack rate, followed by ROV++ v1 and v2 (which
have very similar hijack rate). ROV++ v3 has slightly higher
hijack rate than the other ROV++ variants.
Counter-intuitively, the hijack rates for ROV++ adopting
nodes gradually increase until reaching a peak at about 40%
adoption, and only then gradually decrease. This surprising
“bump” is due to hidden hijacks, as explained in §IV.
Notice that hidden-hijacks behave in a similar manner also
for ROV. This cannot be seen directly from the blue line in
Fig. 7(a), representing hijack rate for ROV, since that line
includes also many visible hijacks. However, we also measured
separately the number of hidden hijacks in ROV, and the result
is also shown in Fig. 7(a). In fact, the result was so close to
that of ROV++v3 (not visually distinguishable) that we use the
line for ROV++ v3 to represent also the hidden hijack rates
for ROV.
The successful connection rate of all ROV and ROV++
policies (see Fig. 7(b)) increases with the adoption rate. As
expected, ROV++ v3 has the highest successful connection
rates, due to its preventive announcement mechanism. How-
ever, the improvement is not that signiﬁcant, and we doubt it
would justify the use of v3, which is more complex and has
somewhat higher hijack rates. Close behind are the successful
connection rates of ROV, ROV++ v1, and ROV++ v2, all of
which are so close that we present them by a single line (of
v1, but one really cannot tell them apart anyway). ROV++ v2a
deﬁnitely has signiﬁcantly inferior successful connection rates,
and therefore, does not appear to be a good choice to protect
against subpreﬁx hijacks.
Fig. 7(c) shows the disconnection rates, which are simply
the complement of the hijack rates plus the successful con-
nection rates. Considering that the goal is to have low hijack
rates and high successful connection rates, it seems that the
disconnection rate alone should not be a measure to compare
Figure 5.
control and data planes.
Subpreﬁx hijack rates in
Figure 6.
hijack rate.
Subpreﬁx hijack: overall
preﬁx hijacks, where we consider two cases, one assuming that
an attacker announces a non-routed preﬁx, say 1.2.3/24, that is
protected by a ROA with origin AS 0, and the other assuming
that the attacker announces a superpreﬁx, say 1.2.0/22 (i.e.,
superpreﬁx hijack of non-routed preﬁx, see §III). No other AS
announces the preﬁx/superpreﬁx.
For subpreﬁx hijacks, the performance metrics include (i)
hijack rate, i.e., the percentage of ASes whose trafﬁc to the
subpreﬁx is hijacked by the attacker, (ii) successful connection
rate, i.e., the percentage of ASes whose trafﬁc to the subpreﬁx
is routed successfully to the victim, and (iii) disconnect rate,
i.e., the percentage of ASes whose trafﬁc to the subpreﬁx is
dropped, and routed to neither the victim nor the attacker.
For non-routed preﬁx hijacks, the performance metrics is only
the hijack rate, since no victim is supposed to receive such
preﬁxes; the disconnect rate is simply the complementary of
the hijack rate.
B. Data Plane vs. Control Plane Results
Before presenting the results, we ﬁrst highlight the impor-
tance of quantifying the various performance metrics based
on the data plane (i.e., the actual paths for the data packets),
instead of the control plane (i.e., the absence or presence
of a subpreﬁx/preﬁx in the routing table). Fig. 5 shows an
example. It plots the hijack rate when 0 to 100% of the ASes
adopt ROV under subpreﬁx hijacks. For adopting ASes, the
control-plane hijack rate is always zero, since all these ASes
drop the hijacked subpreﬁx; the actual data-plane hijack rate,
however, begins at essentially 100% and then decreases with
adoption rate; this is due to data-plane hijacks, as described in
§II-A. Also for non-adopting ASes, data-plane hijack rates are
signiﬁcantly higher (worse) than the control plane hijack rate.
The above example demonstrates that results in the control
plane can lead to signiﬁcant underestimation of hijacks. Hence,
all the results in the rest of this section are obtained from
the data plane, which provide accurate characterization of the
actual performance of ROV and various ROV++ policies.
C. Subpreﬁx Hijacks
For subpreﬁx hijacks, we ﬁrst present the overall hijack
rate for all ASes, with different percentages adopting (and the
rest non-adopting). We then present the results for adopting
and non-adopting ASes separately. For adopting ASes, the
results quantify the security beneﬁts from adopting the policy,
while for non-adopting ASes, the results quantify the collateral
beneﬁts such ASes obtained from the adopting ASes. The
results for both cases are important—a policy is more likely to
see wider adoption when it provides higher security beneﬁts
11
(a) Hijack rate
(b) Successful connection rate
(c) Disconnect rate
Figure 7.
result for the ﬁrst policy; the others are visually indistinguishable and hence not plotted for clarity).
Subpreﬁx hijacks: Data plane results for adopting edge ASes with 95% conﬁdence intervals (a curve marked with multiple policies presents the
(a) Hijack rate
(b) Successful connection rate
(c) Disconnect rate (y-axis up to 60%)
Figure 8. Subpreﬁx hijacks: Data plane results for non-adopting edge ASes with 95% conﬁdence intervals (a curve marked with multiple policies presents the
result for the ﬁrst policy; the others are visually indistinguishable and hence not plotted for clarity).
the mechanisms. Not surprisingly, ROV++ v2a has the highest
disconnection rates, and ROV has almost no disconnections
(since it has many hijacks). The results of ROV++ v1 and v2
are very close (indeed visually indistinguishable), while v3 has
slightly lower disconnection rates.
Results for non-adopting ASes. Fig. 8 presents the results
for non-adopting ASes. For all ROV and ROV++ policies,
the hijack rate decreases with increased adoption, showing
collateral beneﬁts, i.e., the non-adopting ASes beneﬁt from the
adopting ASes; however, the advantage is not very signiﬁcant,
deﬁnitely much less than for adopting ASes. The different
ROV++ variants have quite close hijack rates, except v2a,
which has signiﬁcantly lower (better) hijack rates, but that
comes at the cost of very signiﬁcantly reduced successful con-
nection rates. Excluding ROV++ v2a, it is clear that ROV++
v3 is the best for non-adopting ASes, having both the highest
successful connection rates and the lowest hijack rates, but not
by much, esp. when compared to ROV++ v1 and v2 (it has a
bit more advantage over ROV).
We see from Figures 7(b) and 8(b) that ROV++ v2 has
similar successful connection rates as v1, for both adopting
and non-adopting ASes, indicating that although the blackhole
announcements in ROV++ v2 can potentially compete with
legitimate preﬁx announcements, causing failed delivery of
trafﬁc to the legitimate destination, this rarely happens based
on our extensive evaluation. ROV++ v2a, on the other hand,
leads to much lower successful connection rate than v1 due to
its aggressive propagation of blackhole announcements.
Figure 9.
Preﬁx hijack on non-
routed preﬁx: Data plane hijack rate
for non-adopting edge ASes. The re-
sults for ROV and ROV++ v1 over-
lap; the results of ROV++ v2 and v3
overlap, and are the same for the Lite
versions. The hijack rate for ROV
and ROV++ (all variants) adopting
ASes is zero (ﬁgure omitted).
Figure 10.
Superpreﬁx attack on
non-routed preﬁx: Data plane hijack
rate for non-adopting edge ASes. Re-
sults are for the case where attacker
announces both the non-routed preﬁx
and its superpreﬁx, and are the same
for the Lite versions. ROV++ adopt-
ing ASes have no hijacks; for ROV,
all trafﬁc is hijacked for adopting and
non-adopting ASes (ﬁgures omitted).
D. Hijack of Non-routed Preﬁxes
We now present the results for hijacking of non-routed
preﬁxes. Our evaluation is in two cases: (i) the classical
preﬁx-hijack attack on a non-routed preﬁx, where the attacker
announces the non-routed preﬁx, and (ii) the novel superpreﬁx
attack on a non-routed preﬁx, introduced in §III-D, where the
attacker announces a superpreﬁx of the non-routed preﬁx. The
results were essentially the same whether the attacker also
announces the non-routed preﬁx itself of not.
Preﬁx-hijack attack on a non-routed preﬁx. In this type
of hijack, the hijack rate is zero for all adopting ASes—for
12
both ROV and all ROV++ variants. This is because adopting
ASes drop the non-routed preﬁx, and hence have no route to
the (non-routed) preﬁx—i.e., the attack fails—adopting ASes
are always disconnected (as desired to foil abuse of non-routed
preﬁxes).
Hence, we focus on non-adopting ASes; Fig. 9 plots
the hijack rate for the non-adopting edge ASes. For ROV,
the results show roughly linear decrease in hijack rate with
increased adoption; ROV++ v1 has identical results as ROV,
since in this case, there is no need to blackhole packets as
the adopting AS would not have any route to the (non-routed)
preﬁx. ROV++ v2 has noticeably lower hijack rates than v1,
due to the blackhole announcement mechanism, and v3 has
identical results as v2, since there are no valid routes to the
preﬁx to begin with—preventive announcements are irrelevant.
As expected, ROV++ v2a has the best (lowest) hijack rates,
due to its aggressive propagation of blackhole announcements.
We also conﬁrmed that the Lite version of ROV++ v2 and
v2a, presented in §VI, has visually indistinguishable results
as their non-lite version; we mention this explicitly (and in
the legend of the ﬁgure), since this result is signiﬁcant to our
recommendations later on.
Summarizing the results for adopting and non-adopting
ASes,
the overall hijack rate for all variants of ROV++
decreases with the adoption rate (ﬁgure omitted), achieving
Goal 2 for non-routed preﬁx hijacks.
introduced in §III-D,
Superpreﬁx attack on a non-routed preﬁx. In this type
the attacker announces a
of hijack,
superpreﬁx of the non-routed preﬁx, and the superpreﬁx is not
covered by a ROA. As explained in §III-D, ROV fails to block
this attack, since almost all ASes would have the superpreﬁx
path and there is no blackholing of packets.
The result is completely the opposite for ROV++ adopting
ASes, since they all blackhole trafﬁc to (and from) non-routed
preﬁxes, or, more precisely, preﬁxes covered by a ROA with
origin AS zero (indicating being non-routed). Note that trafﬁc
to any subpreﬁxes with valid ROA is not blackholed. Hence,
there are absolutely no hijacks from ROV++ adopting ASes.
It remains to consider the results for non-adopting ASes,
with different adoption rates of ROV++ (as explained, ROV
adoption is completely useless). Fig. 10 shows the results for
a variant of the attack, where the attacker also announces the
non-routed preﬁx. The non-routed preﬁx announcement causes
ROV++ ASes, except v1, to send blackhole announcements,
which reduce hijack rates, most effectively for v2a. However,
the attacker is better off sending only the superpreﬁx, in which
case the results for all ROV++ variants become as shown for
v1. In both cases (i.e., whether the attacker sends or not sends
the non-routed preﬁx), the Lite versions will have exactly the
same results, since there are no “holes” as in subpreﬁx hijacks
(see §VI).
E. Summary of Main Results
To summarize, ROV++ improves dramatically upon ROV,
for both subpreﬁx and non-routed preﬁx hijacks, especially
with low adoption. We observe tradeoff among the various
ROV++ variants. For subpreﬁx hijacks of routed preﬁxes,
ROV++ v1 achieves similar performance as ROV++ v2/v3,
while is simpler and easier to implement and deploy; ROV++
Figure 11. Subpreﬁx hijacks: hijack rate of ROV++ v1 Lite and ROV++ v1:
differences between Lite and “regular” are very small. We only show results
for hijack rates, since for successful connection and disconnection rates, there
is no visible difference between the Lite and “regular” versions.
v2a has much lower hijack rate than the other variants at
the cost of signiﬁcantly lower successful connection rate. For
hijacks involving non-routed preﬁxes, the blackhole announce-
ment mechanism introduced in v2 leads to signiﬁcantly lower
hijack rate for non-adopting ASes, esp. for v2a.
The above observations focus on the performance of the
ROV++ variants. In §VII, we further discuss other issues
(e.g., susceptibility to abuse, ease of deployment, incentive of
deployment) and provide recommendations on which ROV++
variant(s) to choose for subpreﬁx hijacking and non-routed
preﬁx hijacking, respectively.
VI.