### Analysis of BGP Hijack Mitigation Using ROV and ROV++ Variants

#### A. Categorization of Autonomous Systems (ASes)
We categorize ASes into three groups: 
1. Top 100 ASes (based on ASRank data from July 23, 2020),
2. Edge ASes (those without customers or peers), and
3. Other ASes (neither top 100 nor edge ASes).

Our results are based on uniform adoption among these categories, as in most previous studies. We also tested non-uniform adoption, and the results were quite similar.

#### B. Types of BGP Hijacks
We focus on two types of hijacks:
1. **Subprefix Hijacks**: An attacker announces a subprefix of a legitimate prefix. For example, if the legitimate prefix is `1.2/16`, the attacker might announce `1.2.3/24` as its own.
2. **Non-routed Prefix Hijacks**: This involves two cases:
   - The attacker announces a non-routed prefix, e.g., `1.2.3/24`, which is protected by a Route Origin Authorization (ROA) with origin AS 0.
   - The attacker announces a superprefix, e.g., `1.2.0/22`, which is not covered by a ROA.

#### C. Performance Metrics
For subprefix hijacks, we measure:
- **Hijack Rate**: Percentage of ASes whose traffic to the subprefix is hijacked.
- **Successful Connection Rate**: Percentage of ASes whose traffic to the subprefix is successfully routed to the victim.
- **Disconnect Rate**: Percentage of ASes whose traffic to the subprefix is dropped and not routed to either the victim or the attacker.

For non-routed prefix hijacks, the primary metric is the hijack rate, as no victim should receive such prefixes. The disconnect rate is the complement of the hijack rate.

#### D. Data Plane vs. Control Plane Results
It is crucial to measure performance metrics based on the data plane (actual paths for data packets) rather than the control plane (routing table entries). Figure 5 illustrates this, showing that the control-plane hijack rate can significantly underestimate the actual data-plane hijack rate. Therefore, all our results are based on the data plane.

#### E. Subprefix Hijacks
**Overall Hijack Rate**: Figure 6 shows the average hijack rate over all edge ASes (both adopting and non-adopting) versus the adoption rate. The hijack rate decreases with increased adoption for all ROV++ variants, achieving Goal 2 for subprefix hijacks.

**Results for Adopting ASes**: Figure 7(a) shows that the hijack rate for ROV is much higher than for ROV++ variants, especially under low adoption rates. ROV++ v2a has the lowest hijack rate, followed by ROV++ v1 and v2. ROV++ v3 has a slightly higher hijack rate.

Interestingly, the hijack rate for ROV++ adopting nodes increases until about 40% adoption, then decreases. This "bump" is due to hidden hijacks, as explained in §IV.

**Successful Connection Rate**: Figure 7(b) shows that the successful connection rate increases with adoption rate. ROV++ v3 has the highest successful connection rate, but the improvement is not significant enough to justify its complexity and higher hijack rates. ROV, ROV++ v1, and v2 have very similar successful connection rates.

**Disconnect Rate**: Figure 7(c) shows the disconnection rates, which are the complement of the hijack and successful connection rates. ROV++ v2a has the highest disconnection rates, while ROV has almost no disconnections (due to many hijacks).

**Results for Non-Adopting ASes**: Figure 8 shows that the hijack rate decreases with increased adoption, providing collateral benefits to non-adopting ASes. However, the benefit is less significant compared to adopting ASes. ROV++ v3 is the best for non-adopting ASes, having the highest successful connection rates and the lowest hijack rates.

#### F. Hijack of Non-routed Prefixes
**Prefix-Hijack Attack**: For non-routed prefix hijacks, the hijack rate is zero for all adopting ASes (both ROV and ROV++ variants). Figure 9 shows the hijack rate for non-adopting edge ASes, with ROV++ v2 and v3 having lower hijack rates due to blackhole announcements.

**Superprefix Attack**: In this type of attack, the attacker announces a superprefix of a non-routed prefix. ROV fails to block this attack, but ROV++ adopting ASes blackhole traffic to non-routed prefixes, resulting in no hijacks. Figure 10 shows the results for non-adopting ASes, with ROV++ v2a being the most effective in reducing hijack rates.

#### G. Summary of Main Results
ROV++ significantly improves upon ROV for both subprefix and non-routed prefix hijacks, especially with low adoption. ROV++ v1 achieves similar performance to v2/v3 for subprefix hijacks and is simpler to implement. ROV++ v2a has the lowest hijack rate but at the cost of significantly lower successful connection rates. For non-routed prefix hijacks, the blackhole announcement mechanism in v2 leads to significantly lower hijack rates for non-adopting ASes.

In §VII, we discuss other issues such as susceptibility to abuse, ease of deployment, and incentives for deployment, and provide recommendations on which ROV++ variant(s) to choose for different types of hijacks.