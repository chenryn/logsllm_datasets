#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    rs = con.exec "SELECT * FROM Cars LIMIT 5"  
    rs.each do |row|  
      puts "%s %s %s" % [ row['id'], row['name'], row['price'] ]  
    end  
rescue PG::Error => e  
    puts e.message   
ensure  
    rs.clear if rs  
    con.close if con  
end  
```  
The program prints the data of the first five rows of the Cars table.  
```  
rs = con.exec "SELECT * FROM Cars LIMIT 5"  
```  
This SQL query returns five rows of data.  
```  
rs.each do |row|  
    puts "%s %s %s" % [ row['id'], row['name'], row['price'] ]  
end  
```  
With the each method, we go through the result set and print the fieds of a row.  
```  
$ ./multiple_rows.rb   
1 Audi 52642  
2 Mercedes 57127  
3 Skoda 9000  
4 Volvo 29000  
5 Bentley 350000  
```  
This is the output of the multiple_rows.rb program.  
### Prepared statements  
Prepared statements guard against SQL injections and increase performance. When using prepared statements, we use placeholders instead of directly writing the values into the statements.  
prepared_statement.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
if ARGV.length != 1 then  
    puts "Usage: prepared_statement.rb rowId"  
    exit  
end  
rowId = ARGV[0]  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    con.prepare 'stm1', "SELECT * FROM Cars WHERE Id=$1"  
    rs = con.exec_prepared 'stm1', [rowId]  
    puts rs.values   
rescue PG::Error => e  
    puts e.message   
ensure  
    rs.clear if rs  
    con.close if con  
end  
```  
The program takes a row Id as its argument. It fetches the data of the specified row and prints it. Since the program takes a value from a user, which cannot be trusted, it is necessary to use a prepared statement.  
```  
rowId = ARGV[0]  
```  
The command line argument is stored in the rowId variable.  
```  
con.prepare 'stm1', "SELECT * FROM Cars WHERE Id=$1"  
```  
The prepare method prepares an SQL statement with the given name to be executed later. Our SQL statement returns one row of the Cars table. The $1 is a placeholder, which is later filled with an actual value.  
```  
rs = con.exec_prepared 'stm1', [rowId]  
```  
The exec_prepared method executes a prepared named statement specified by the statement name. The second parameter is an array of bind parameters for the SQL query.  
```  
puts rs.values   
```  
The values method prints the field values of the row.  
```  
$ ./prepared_statement.rb 4  
4  
Volvo  
29000  
```  
This is the output of the example.  
The following example shows another way to create prepared statements.  
prepared_statement2.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    stm = "SELECT $1::int AS a, $2::int AS b, $3::int AS c"  
    rs = con.exec_params(stm, [1, 2, 3])  
    puts rs.values   
rescue PG::Error => e  
    puts e.message   
ensure  
    rs.clear if rs  
    con.close if con  
end  
```  
The example uses exec_params to create and execute a prepared statement.  
```  
stm = "SELECT $1::int AS a, $2::int AS b, $3::int AS c"  
```  
In the statement, we append data types of the expected parameters to the placeholders.  
```  
rs = con.exec_params(stm, [1, 2, 3])  
```  
The exec_params method sends an SQL query request to the database using placeholders for parameters.  
```  
$ ./prepared_statement2.rb   
1  
2  
3  
```  
This is the output of the example.  
### Metadata  
Metadata is information about the data in the database. The following belongs to metadata: information about the tables and columns in which we store data, the number of rows affected by an SQL statement, or the number of rows and columns returned in a result set.  
### Column headers  
In the first example, we print column headers.  
column_headers.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    rs = con.exec 'SELECT * FROM Cars WHERE Id=0'  
    puts 'There are %d columns ' % rs.nfields  
    puts 'The column names are:'  
    puts rs.fields  
rescue PG::Error => e  
    puts e.message   
ensure  
    rs.clear if rs  
    con.close if con  
end  
```  
The example prints the number of available columns and their names to the console.  
```  
rs = con.exec 'SELECT * FROM Cars WHERE Id=0'  
```  
In the SQL statement, we select all columns of a row.  
```  
puts "There are %d columns " % rs.nfields  
```  
The nfields method returns the number of columns in the row of the query result.  
```  
puts rs.fields  
```  
The fields method returns an array of strings representing the names of the fields in the result.  
```  
$ ./column_headers.rb   
There are 3 columns   
The column names are:  
id  
name  
price  
```  
This is the output of the example.  
### Listing tables  
The PostgreSQL's information schema consists of a set of views that contain information about the objects defined in the current database. The tables view contains all tables and views defined in the current database.  
list_tables.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    rs = con.exec "SELECT table_name FROM information_schema.tables   
        WHERE table_schema = 'public'"  
    rs.each do |row|  
        puts row['table_name']  
    end  
rescue PG::Error => e  
    puts e.message   
ensure  
    rs.clear if rs  
    con.close if con  
end  
```  
The example prints all the tables in the testdb database.  
```  
rs = con.exec "SELECT table_name FROM information_schema.tables   
    WHERE table_schema = 'public'"  
```  
This SQL statement selects all tables from the current database.  
```  
rs.each do |row|  
    puts row['table_name']  
end  
```  
The tables are printed to the console.  
```  
$ ./list_tables.rb   
authors  
books  
cars  
```  
The list_tables.rb program prints available tables in the testdb database.  
### Transactions  
A transaction is an atomic unit of database operations against the data in one or more databases. SQL statements in a transaction can be either all committed to the database or all rolled back. SQL statements are put into transactions for data safety and integrity.  
PostgreSQL operates in the autocommit mode. Every SQL statement is executed within a transaction: each individual statement has an implicit BEGIN and (if successful) COMMIT wrapped around it.  
An explicit transaction is started with the BEGIN command and ended with the COMMIT or ROLLBACK command.  
transaction.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    con.transaction do |con|  
        con.exec "UPDATE Cars SET Price=23700 WHERE Id=8"  
        con.exec "INSERT INTO Car VALUES(9,'Mazda',27770)"  
    end  
rescue PG::Error => e  
    puts e.message   
ensure  
    con.close if con  
end  
```  
In the example, we update the price of a car and insert a new car. The two operations are included in a single transaction. This means that either both operations are executed or none.  
```  
con.transaction do |con|  
    con.exec "UPDATE Cars SET Price=23700 WHERE Id=8"  
    con.exec "INSERT INTO Car VALUES(9,'Mazda',27770)"  
end  
```  
The transaction method runs the code inside the block in a single transaction. It executes a BEGIN at the start of the block, and a COMMIT at the end of the block, or ROLLBACK if any exception occurs.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")