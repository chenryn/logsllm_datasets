performing the transverse reads TRL L=d0+d1+d2+d3 and
TRR R=d3+d4+1+1+1. The total number of ‘1’s T OT=L +R-
d3, where d3 is accessed using the standard read method.
After the shift, because the data is invariant, the total number
of ‘1’s should decrease by one. In particular, L(cid:2)=d0+d1+d2,
R(cid:2)=d2+d3+d4+1+1, and T OT (cid:2)=L(cid:2)+R(cid:2)-d2. The classical read
is performed ﬁrst in order to, wherever possible, hide the
latency of the transverse read veriﬁcation.
If an under-shift occurs, the tape will actually remain in
position 1 such that L(cid:2)=L, R(cid:2)=R, and T OT (cid:2)=T OT. Because
T OT (cid:2) remains unchanged, we know that no shift actually
occurred, which can be corrected by right shifting again. Alter-
natively, if an over-shift occurs, the tape will move to position
3 [Figure 6(c)]. In this case L(cid:2)=d0+d1, R(cid:2)=d1+d2+d3+d4+1,
and T OT (cid:2)=L(cid:2)+R(cid:2)-d1 and the total number of ‘1’s decreases
1In Figure 6, there actually would need to be an additional padding domain
on each side to protect against over-shifting the data out of the racetrack. This
was omitted in the ﬁgure for simplicity and clarity of the idea.
(cid:3)(cid:5)(cid:1)(cid:4)(cid:6)(cid:6)(cid:5)(cid:6)
(cid:2)(cid:6)(cid:6)(cid:5)(cid:6)
Figure 7: Derived error correction to protect against alignment faults.
(cid:2)4
by two rather than one, and a left shift should correct the
misalignment.
T OT is actually
i=0 di plus the ‘1’s in the auxiliary bits.
In fact, using TRs, it is possible after any shift operation to
determine the number of ones in the padding domains, and in
doing so, ascertain the current position of the racetrack. During
the initialization, we know, a priori, the current position of
the racetrack. As a consequence, the number of ones in the
padding bits is known. By subtracting this value from T OT,
this determines the total number of ‘1’s in the data bits, or
i=0 di for the example in Figure 6. This number of ‘1’s can
be referred to as the “Hamming weight to zero” (H0) of the
data bits. If the H0 value of the racetrack is maintained, after
any shift, T OT is determined and T OT − H0 is computed,
which is equal to position i accessing di. In other words, this
is the position of the racetrack.
(cid:2)4
Thus, by storing the H0 as a signature of the data stored
in the nanowire, it is possible, using two transverse and one
standard read, to know the precise position of the racetrack.
Additionally, by accessing and checking H0 prior to shifting,
it is possible to detect and correct any persistent faults that
have occurred in the signature since the last access.
Unfortunately,
this signature requires a signiﬁcant area
overhead and is impractical to store directly in the nanowire.
This is because all the bits of the signature must be accessed
in parallel rather than sequentially as is required by accessing
the nanowire. Moreover,
in a domain-wall memory, many
racetracks will be grouped together in the sub-array, making
the signature storage requirement grow proportionally. Thus,
in the next section we describe a technique called derived error
correction coding that allows the use of the transverse error
correction coding in a performance, energy, and space efﬁcient
fashion.
V. DERIVED ERROR CORRECTION CODING
Derived error correction coding builds on the concepts of
transverse error correction coding to apply correction to mis-
alignment in an entire DWM sub-array. The concept of DECC
is to perform efﬁcient correction on a derived representation of
the data, that will be subject to the problem we try to resolve,
instead of operating directly on the data itself. The primary
beneﬁt of using DECC is the capacity to correct faults distinct
380
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:28 UTC from IEEE Xplore.  Restrictions apply. 
from the data. In the case of DWM, this derived information
is the signature and encoding of the padding bits described in
the previous section for TECC.
Figure 7 shows the ﬂow of our DECC algorithm for DWM.
Initially, data are in a known state. From these data, we can
generate a reference signature. This is essentially a count of
the number of ‘1’s in the the data bits as described in the
TECC process by decoupling the ‘1’s from the data and the
auxiliary bits (see Section IV). We call this the derived data.
We then change the state by shifting. If the state changes as
expected, it is possible to recover the signature unchanged.
However, as soon as a position fault occurs, the unintended
change in the state will appear as if the signature has been
modiﬁed. Conceptually, faults can be detected by comparing
the signature before and after the shift, and the difference can
be used to initiate a new shift to correct the state fault.
In fact, what is necessary is a veriﬁcation of the newly
reported (post-shift) signature. Thus, rather than comparing
both the signatures before and after the shift, which requires
storing the pre-shift signature, we can validate the post-shift
signature. As the signature can be constructed at anytime, we
propose to store only a set of parity bits for the signature
as shown in the ﬁgure. These parity bits are combined with
the post-shift signature constructed on demand. In most cases,
these parity bits will validate the correctness of the post-shift
signature. However, if there is a shift fault, the veriﬁcation will
report an error. Using an ECC approach, the location of the
error can be determined and used to show how the signature
can be corrected. This will provide the method to then correct
the misalignment. This DECC approach has the advantage of
minimizing the overhead for error correction by avoiding the
need to store each nanowire’s signature directly. In the next
section we describe the details of the parity bit storage and
error correction to guarantee protection of three single-domain
misalignments.
A. DECC for DWM Sub-arrays
Recalling from Section IV, the data signature required to
validate alignment is H0, which is essentially a count of the
number of ‘1’s stored in the data domains. This can be stored
using log2(n) bits per racetrack. Recall also, that this data
must be available in parallel, making it undesirable to store
directly in the racetrack. However, as DWM sub-arrays group
racetracks into a block (see Section II), for each sub-array,
this concatinated signature can be protected with far fewer
parity bits. We propose to store these bits in STT-MRAM. We
assume these bits are fault free as they are immune to shifting
faults2.
We examine this concept for DWM used to construct an on-
chip cache as is proposed in several designs [8–10]. During
the signature (H0) for each racetrack is
the initialization,
2If there is concern about STT-MRAM faults such as transient faults or
read disturbance, these can be protected by orthongonal ECC [31]. This does
not collide with the error correction of the signature because the ECC we
are referring to ensures the parity bits to protect the signature are accessed in
fault free fashion.
Data length (n)
Hamming weight 
to zero
Cache 
line
size
ECC+
parity
bits
Figure 8: DECC for DWM cache
Log(n)
generated as shown in Figure 8. A protection code is applied,
by determining and storing parity bits to protect these elements
as described in Figure 7. To describe how the signature bits
are protected, as shown in Figure 9(a) we treat the signature
bits as a matrix, where each row is the H0 (ones count)
of the data bits for a corresponding nanowire encoded in
Gray code. Using the Gray code ensures that if the shift
alignment is off by only one, the signature is only different
by one bit. Each of the log2(n) columns (column ECC) of the
matrix is protected with SECDED ECC (ECC1). In addition
each row of H0 for each nanowire is protected with a single
parity bit (row parity). This guarantees correction of up to
three single domain misalignments or correction of one multi-
domain misalignment in the sub-array. Note these ECC+parity
bits remain unchanged until a write to the sub-array occurs.
When a write occurs, new ECC+parity bits are computed and
stored in the auxiliary STT-MRAM.
We demonstrate protection from three single domain mis-
alignments through an example where the length of the cache
line LCL=512, n=8, signature length is log2(n) = 3, and
each column ECC is 512/523 as log2(LCL)+2 = 11. If one
or more misalignment errors by a single domain occur such
that the column ECC can independently detect and point to
the error, these errors will agree with the parity bits (ensuring
there is only one error per column). The H0 signature can be
repaired and will indicate which direction to shift the affected
nanowire(s) for realignment. This case is shown in Figure 9(b)
with two errors each in an independent column.
The case where we have two errors in a particular column
is potentially more interesting. The SECDED ECC will only
detect the presence of two errors. The parity bits indicate the
location of the error. This works even in the case of three errors
when the third error is in another column. This case is shown
in Figure 9(c) where SECDED determines the location of the
error in the right column which eliminates that parity from
pointing to a error in the left column. The remaining purple
parity errors determine the errors in the left column. Note that
due to our restriction of single domain misalignment and Gray
coding, no more than one incorrect bit can appear in a row of
the matrix.
Finally, the case where three errors fall into the same column
can also be handled. SECDED ECC will indicate a single
error in the wrong location. However, because there are three
parity bits indicating errors, these will point to the actual
error locations. This is shown in Figure 9(d). A multi-domain
misalignment can be detected when two column ECC’s correct
381
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:28 UTC from IEEE Xplore.  Restrictions apply. 
errors in different columns of the same row. While there are
cases when this approach can correct more than three single
domain shift errors, or combined single and multi-domain shift
errors, these cannot be guaranteed. Thus, in the next section we
discuss our methodology for calculating the error probabilities
for different cases of racetrack misalignment.
B. Error Probability Modeling for DECC
To begin our probability modeling it is useful to deﬁne
several terms and variables. First, we assume we are shifting R
racetracks simultaneously with n data domains per racetrack.
We deﬁne the probability of shifting faults in one racetrack
after performing a single shift of distance d and becoming
misaligned by k positions as pd,k, which are constants de-
termined through device modeling and are given in Table I
for k≤2 and 1≤d≤7. Further, mk is deﬁned as the number
of racetracks (out of the R racetracks) which are off by k
positions. Finally, we refer to the number of racetracks that
are at least k positions misaligned as m+
k and the number
of racetracks that are at least one position and ≤ k positions
misaligned as m−
k .
Given these parameters, we can then deﬁne the probability
of having mk racetracks off by k positions for a speciﬁc shift
distance d using the binomial distribution:
P (mk) = C mk
mk ∗ (1 − pd,k)
(R−mk)
R ∗ (pd,k)
(cid:5)
(cid:4)
where
C mk
R =
R
mk
=
R!
mk!(R − mk)!
(6)
(7)
Eq. 6 can be expanded to include the probabilities of
having a combination of shift errors with different numbers
of positional faults:
P (m1, m2...mN ) = (
N(cid:6)
j=1
) ∗ C m+
R ∗ (
1
C mj
m+
j
N(cid:6)
j=1
∗ (1 − pd,1 − pd,2 − ... − pd,N )
pd,j
mj )
(R−m+
1 )
(8)
Fortunately, as mentioned in Section II-B, the shifting error
probability for three (pd,3) or more positions is essentially
negligible. Thus, when limiting to one and two positional
errors (m+
P (m1, m2) = C m1
3 = 0), Eq. 8 simpliﬁes to:
∗ C m1+m2
∗ pd,1
∗ (1 − pd,1 − pd,2)
m1+m2
R
m1 ∗ pd,2
m2
(R−m1−m2)
(9)
Using Eq. 9, we can then determine the probability for
transitions from our original, fault free state to various fault
states depending on over- and under-shift faults in the block,
shown in Figure 10. States S1-S3 are fault states where
correction is assured. In each of these states DECC can
guarantee to correct at least three positions worth of faults.
S1 covers cases where up three k = 1 misalignments occur.
S2 covers the case where one k = 2 and as many as one k = 1
misalignments occur. S3 covers the case where only one k ≥ 3
misalignment occurs. Beyond three total position faults, while
382
the correction of the set of R tapes is not guaranteed, there
are cases where the DECC logic will be able to successfully
correct the faults. For example, in the case m1 = 4, m+
2 = 0
(part of S4), if two columns of H0 have two errors, DECC
will never be able to correct the error, but if there is only one
column with at most two errors, DECC will always be able
to correct the error.
The total probability of error is determined by adding the
probability of error when in S4 and S5 times the conditional
probability of being in S4 and S5. However, the probability
of being in state S5 is tens of orders of magnitude lower
than the probability of state S4, and thus S4 dominates
the error probability calculations. Therefore, we can simply
calculate the probability of error for DECC in the DWM
context exhaustively by P (S4)∗P (error|S4). This calculation
is used in Section VI-A to calculate the Mean Time to Failure
(MTTF), shown in Figure 13. Since the probability of being
in state S4 is the primary factor to the overall failure rate, it
is essential to reduce this probability as much as possible. In
the next two sections, we will discuss two methods of doing
this: reducing the ECC block size and limiting the size of the
shift pulse.
C. ECC Block Size
If four single domain misalignments occur in a sub-array,
only certain permutations of these errors can be corrected. If
the errors occur in unique columns, then the errors can be
corrected as described in Figure 9(b). If two errors occur in
one column and individual errors occur two other columns this
can also be corrected in a similar fashion to Figure 9(c). If two
errors occur in each of two columns, because the row parity
bits are shared, it is impossible to determine precisely which
bits in the signature are incorrect creating an uncorrectable
error. To improve the effective protection we address this by
partitioning the signatures and using independent column ECC
for each block. This is similar to the concept of using 64/72
ECC for a memory row rather than 512/523 ECC. Each 64-bit
quantity has an independent ECC calculation with their own
parity bits. This will decrease the probability of errors in the
same block but does not increase the correction guarantee.
Figure 11 shows the additional ECC parity bits required
when dividing the signature into different block sizes. The
abscissa represents the number of bits protected by each
column ECC. In the evaluation section we present results for
for 64/72 ECC (overhead shown in green) as it is a standard
approach and it protects well for the fault parameters from
the literature. However, if the reliability of the devices can be
improved we show how larger block sizes scale (moving to the
left) or how smaller block sizes scale if higher fault rates are
likely. Note, for block size smaller than eight, directly storing
the signature is a smaller overhead than using DECC.
D. Sizing the Shift Pulse