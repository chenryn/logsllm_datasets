APPENDIX F
ADDITIONAL SECURITY ANALYSIS
(c) Velocity difference
(d) Acceleration difference
Fig. 13: Phys. Cond. Impacts on Control with RT-TEE and Baseline w/o TEE
In real-world missions, the UAV often faces different phys-
ical environments, such as different wind conditions. In this
set of experiments, we vary the wind conditions in simulation
from no wind to gentle wind (with a horizontal wind compo-
nent of 5 m/s or a vertical wind component of 1 m/s), and
to strong wind (with a horizontal wind component of 10 m/s
or a vertical wind component of 2 m/s) to observe how our
system responds. Fig. 13a shows the control state deviations
under different wind conditions on the velocity of the copter.
From this set of experiments, we can observe that systems
with RT-TEE and baseline without TEE share the same control
characteristics in different wind conditions. Speciﬁcally, both
fail to track the reference state when the wind is stronger
than 10m/s,
limitation of the physical
construction of the machinery, such as max throttle. When
the wind is weaker, both systems have maintained control
well. Under the strong wind, Fig. 13c and Fig. 13d show
systems with RT-TEE look less capable of stabilizing attitude
than original systems as it deviates a bit more in the ﬁrst
half. Despite greater deviation in acceleration and velocity,
the drone remains capable of following its mission trajectory,
as shown in Fig. 13b.
this is an inherent
Sandboxed Driver Isolation: A compromised sandboxed
driver can attack the system by attempting to read or write
memory in the secure environment; however, all reads and
writes are instrumented to conﬁne the memory addresses it
can visit. An attacker may also write arbitrary content into the
I/O registers; this is prevented using the I/O reference monitor.
The driver may also attempt to branch outside the sandbox.
However, there are no indirect calls in the code the attacker
can exploit due to target unrolling. Moreover, the backward
edge is protected by the shadow stack.
Protection against Malicious DMA Access: A compromised
driver may also attempt to program the peripheral use DMA
to tamper with secure environment memory. This can be
mitigated either with the I/O reference monitor or hardware
(such as system memory management unit (SMMU)).
Process Isolation: RT-TEE relies on the OS in each world to
isolate and manage task scheduling individually. However, if
needed, the world scheduler can be used to directly schedule
tasks in both worlds, treating each task as an individual world
at the cost of increased TCB.
Side-Channel and Covert Channel: From the perspective
of side-channel and covert channel, the bandwidth on various
shared resources (such as cache) is likely similar to or lower
than existing TEEs. This is because the untrusted OS can no
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
16367
012345678910WindSpeed(m/s)05101520Deviation(%)Delta V in X-axis of Baseline without TEE (m/s) Delta V in Y-axis of Baseline without TEE (m/s) Delta V in X-axis with RT-TEE (m/s) Delta V in Y-axis with RT-TEE (m/s)−50050Pos.x-axis(m)−75−50−250Pos.y-axis(m)Observed State of Baseline without TEEObserved State with RT-TEE050000100000150000Control loop024Velocity (m/s)0250005000075000100000125000150000Control loop246Acceleration (m/s2)020000400006000080000Control loop−4−20Roll command (103)020000400006000080000Control loop−800−600−400−2000Pitch command010000200003000040000Control loop−0.02−0.010.000.010.02Steering010000200003000040000Control loop64.965.1ThrottleInfrastructure) functions, and USER functions,
to perform
world-level scheduling, secure tasks scheduling and RT-TEE
initialization. SA APIs are developer customizable, SI APIs
are responsible for assisting SA implementation. USER APIs
is exposed to users to use RT-TEE.
During the system boot up phase, it is generally assumed
that normal world is started with secure boot process and
it is trustworthy until there are external communications. At
this time, world rt param init and task rt param init should
be invoked to initialize the real-time parameters of the two
worlds, and the secure tasks. Alternatively, this can be hard-
coded in the ﬁrmware and starts automatically with the secure
world. Then user task load will be invoked to load user tasks,
and world scheduler start is invoked to start world scheduler.
At the world scheduling level, world budget update, and
world prio recalc are the two SA functions responsible for
world budgets updating and resuming the next running world.
Developers can implement these two APIs to provide differ-
ent resource reservation algorithms (servers) and scheduling
algorithms. return to nw and return to sw are two SI APIs
invoked by the world scheduler who decides which world to
run next. task release will insert periodic released (ready to
run) tasks into run queue.
At the secure tasks scheduling level, task budget update,
and task prio recalc are two SA functions responding for se-
cure tasks budgets updating and next running tasks picking up.
Developer can implement these two APIs to provide different
tasks-level resource reservation algorithms (servers) and tasks
scheduling algorithms. task invoke, and task resume are two
SIs assisting the implementation of task budget update and
task prio recalc.
APPENDIX H
ADDITIONAL DETAILS ON I/O SUBSYSTEM
Sample Template for I2C Bus: Table V shows the template
driver for reading pressure from MS5611 barometer. Every
command comprises nine bytes. The ﬁrst byte encodes the
command i.e., write(0x0), read(0x1), wait(0x2), and trap-
ping(0x3). The next four bytes encode the value of the MMIO
register to be written or the virtual address of memory to
store the read result or the worst execution time for the
TABLE V: Part of MS5611 Barometer Driver Template (Get Pressure)
Type
0x0
0x0
0x0
0x0
0x0
0x2
0x0
0x0
0x0
0x0
0x2
0x1
0x1
0x1
0x0
0x0
Val/WCET
0x000000fa
0x000f003e
0x00000077
0x00000001
0x00008280
0x00000032
0x00000044
0x00000077
0x00000003
0x00008481
0x00000032
0x1015a118
0x1015a118
0x1015a118
0x00000010
0x00000302
Reg. Address
0x14404014
0x14404018
0x1440400c
0x14404008
0x14404000
0x14404000
0x14404010
...
0x1440400c
0x14404008
0x14404000
0x14404000
0x14404010
0x14404010
0x14404010
0x14404000
0x14404004
Semantic
set clock speed of I2C controller
set delay of sampling/launch data
set barometer device bus address
set data length to be sent
start write transfer, set interrupt
wait for interrupt, WCET is 50us
write cmd to FIFO to get pressure
set barometer device bus address
set data length to be sent to 3
start read transfer, set interrupt
wait for interrupt, WCET is 50us
read 1 byte pres. data from FIFO
read 1 byte pres. data from FIFO
read 1 byte pres. data from FIFO
clear buffer
set transfer DONE in state register
Fig. 15: Scheduler API Execution Flow
longer freely control secure function invocation due to the
new scheduling infrastructure. However, real-time scheduling
remains predictable [80].
ADDITIONAL DETAILS ON SCHEDULING SUBSYSTEM
APPENDIX G
the world scheduler will
World Scheduler: The real-time properties, including period,
budget, and priority of each world are conﬁgured through in-
voking the RT-TEE API world rt param init at initialization,
subsequent updates can only be done via secure world, since
non-secure world is no longer trustworthy once the system
starts execution. Each world has four states,
i.e. running,
runnable, out of budget, and idle. Running state is set when
a world is running. Runnable state is set when a world has
budget but isn’t running. Out of budget means a world runs
out of budget and idle means a world owns budget but has
nothing to run. When scheduler runs, it ﬁrst burns the budget
for the running world. World scheduler replenishes budgets
and updates deadlines at the start of each period. The states
of each world will become runnable after replenishing budgets.
According to the priorities,
then
choose a world to resume.
Secure OS Scheduler: Since there is no existing scheduling
infrastructure in the secure OS of OP-TEE, we have to
implement a minimal scheduling infrastructure that supports
time accounting, context switches as well as APIs to support
different scheduling heuristics. In addition to the infrastructure,
we also implemented a RM scheduler for our prototype.
Multicore Support: RT-TEE supports multi-core deployment
and makes use of mutex to protect
the shared resources.
Under current OP-TEE implementation, whenever the mutex
blocks, the process will be suspended and control ﬂow will be
redirected back to normal world. This is a security problem,
we took two steps to mitigate this issue. First, we minimize the
amount of shared resources. Second, for the very few status
related variables, we make use of spinlock instead.
RT-TEE Scheduling API: RT-TEE is designed to offer an
open framework to implement different types of real-time
scheduling on a real-world CPS platform. The APIs ﬂow
is shown in Fig 15. RT-TEE provided three kinds of API
calls, SA (Scheduling Algorithm) functions, SI (Scheduling
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
17368
SecureNon-Secureuser_task_loadworld_rt_param_inittask_rt_param_initworld_schedule_starttask_releasetask_budget_updatetask_prio_recalctask_invoketask_resumeworld_budget_updateworld_prio_recalcEL3EL1schedulertasks schedulerworld schedulerException HandlerEL0EL1registers have to be assigned to the secure environment.
The exact interface for power/clock management is hardware
implementation-speciﬁc. On RPI3 SoC, the Clock Manager
(CM) registers (0x7E101000-0x7E101FFF) are responsible for
clock control of the peripherals. Power Management (PM)
registers (0x7E100000-0x7E000FFF) are used to reset pe-
ripherals [81]. On LPC55S69 SoC,
the System Controller
(SYSCON) (0x40000000-0x40000FFF) is used to select and
control clock and reset peripherals. Analog Control Register
(ANACTRL) (0x40003000-0x40003103) is used to control the
frequency of oscillators. Power Management Controller (PMC)
(0x40020000-0x400200CB) is used to control the power of
oscillators. It is possible to use SAU to secure these addresses.
The prevention of malicious manipulation on processor reset
can be commonly achieved by conﬁguring the TrustZone-
aware processor to prevent system reset from normal world.
On ARM Cortex-A53, Reset Management Registers (RMR)
which signal SoC reset controller are only accessible from
EL3, effectively preventing reset requests from normal world.
On ARM Cortex-M33, the SYSRESETREQS bit of AIRCR
(Application Interrupt and Reset Control Register) can be used
to disable normal world from making a system reset request.
APPENDIX J
ADDITIONAL RELATED WORK
RT-TEE is different
from the existing hypervisor ap-
proach [82], [69], [68] regarding the primitive we used to
accomplish time isolation. Furthermore, the protection gran-
ularity is also different in that hypervisor provides OS-level
isolation but RT-TEE provides task-level ﬁne-grained isolation.
We are also different from existing TEE solutions[21], [25],
[26], [24], [22], [23] in that we focus on system availability
in addition to integrity and conﬁdentiality.
Our work also has related work on how change of task
timing can destabilize a system. The impact of schedule jitter
was investigated in [31]. [32] examines how execution time
of different SLAM algorithms impact the physical control.
Frequency scaling was used to trigger processor faults in
TrustZone in [83]. However, we are the ﬁrst to examine the
impact on timing of processor frequency scaling on cyber-
physical systems.
Fig. 16: I2C Bus Driver Template
corresponding I/O operation. The last four bytes are the
memory address of the I2C controller MMIO register.
Execution of Bus Transactions: The execution ﬂow of the
debloated I2C driver is shown in Fig. 16. One I2C transaction
contains four phases. The Start Conﬁg phase conﬁgures the
I2C controller. The Write Transfer phase writes a command for
sensor into I2C controller FIFO. The read Transfer phase reads
data from the I2C bus controller FIFO into memory. The End
Conﬁg phase clears the FIFO buffer and sets done state in the
control register. Table. V shows the generated driver template
for getting pressure operation in MS5611 Barometer. The
implementation of the SPI driver is similar to I2C except that
the SPI in Navio2 disabled the native CS (Control Register) in
the SPI controller. Instead, it leverages GPIO to select devices.
According to the device id, the corresponding GPIO pins are
set to high. The two native chip select bits in the control status
are set to 11 (reserved). After the completion of the transfer,
GPIO pins are reset to disable the chip selection.
Peripheral Driver Sandboxing: CFI in RT-TEE sandboxing
includes forward edge and backward edge CFI. To enforce
forward edge CFI, we avoid function calls using function
pointer in the split driver by unrolling all indirect function
calls into switch statements including all potential targets in
each case. To enforce backward edge CFI, we leverage shadow
stack. RT-TEE provides two RTL-level (Register Transfer
Language) GCC passes to modify the epilogue and prologue
of each function. In the epilogue of the callee function, the
return address is saved on the statically allocated shadow
stack outside the sandbox. Upon returning to the caller in the
epilogue, the previous saved address is used.
RT-TEE puts sandboxed split peripheral drivers in reserved
address space of secure OS. Read/write instructions on phys-
ical memory are instrumented with the bfxil instruction
with a reserved general-purpose register to enforce a mask.
To sandbox read and write instructions used to access MMIO
device address, we instrument each MMIO access read and
write instruction with spatial reference monitor trampoline, in
which we check the validity of the access destination address
and the values to be written with the I/O policy. RT-TEE uses
another GCC pass to add the data access sandboxing.
APPENDIX I
DETAILS ON SECURE CLOCK AND POWER
To prevent the non-secure OS from conﬁguring power and
clock maliciously, power and clock management conﬁguration
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
18369
CPUI2C Bus Controllertimeread trans. operationsread/write trans. operationsI2CControllerConﬁgclock speeddata launch pointStart ConﬁgWriteTransferStart WriteCMDinto FIFOslave addr.data len.write trans.start trans.Write TransferReadTransferStartReadData from FIFOslave addr.data len.read trans.start trans.Read TransferTrans.Finish Conﬁgclear FIFOdone stateEnd Conﬁg