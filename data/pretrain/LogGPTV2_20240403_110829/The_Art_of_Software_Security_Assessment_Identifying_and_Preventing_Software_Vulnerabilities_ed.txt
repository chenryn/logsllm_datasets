valid destination IP address. 
Spoofing from an External Trusted Source 
Firewalls make spoofing-related decisions based on which interface the packet comes 
from. If a spoofed packet and a genuine packet come in over the same network 
interface, the firewall can't tell them apart. 
Usually, this is a problem when the firewall is set up to trust specific hosts on the 
Internet. Because all packets from the Internet come in over the same interface, the 
firewall can't tell where they came from originally. If an attacker spoofs a packet with 
the source IP of the trusted host, the firewall assumes it came from that host. The 
attacker doesn't see the response to the packet because it's routed to the trusted host, 
but this may or may not matter. 
Figure 15-11 shows a vulnerable situation. The firewall has a rule set that allows the 
trusted server at the colocation environment to talk to the file server. An attacker 
could send packets that get delivered through the firewall to the file server by 
spoofing them from the trusted server. 
Figure 15-11. Spoofing from an external trusted source 
[View full size image] 
Spoofing from an Internal Trusted Source 
If spoofing protection is broken, an attacker might be able to spoof packets from a 
protected network. For example, in Figure 15-12, the file server is not accessible from 
the Internet, but the DNS server on the DMZ can talk to it. An attacker could try 
spoofing a packet from the DNS server to the file server. This packet comes in over 
the Internet interface instead of the DMZ interface, which should cause the firewall to 
discard it. 
Figure 15-12. Spoofing from an internal trusted source 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
926 
However, if the firewall believes the packet came from the DNS server, the attacker 
can take advantage of any rules that trust the DNS server or its network. With this 
kind of attack, the attacker wouldn't see the responses or be able to set up TCP 
connections, so the ideal packets to send are UDP packets that perform some 
nefarious action, perhaps involving a DNS server, a Simple Network Management 
Protocol (SNMP) server, or the Remote Procedure Call (RPC) service. 
Spoofing for a Response 
You can use spoofing to try to get hosts to respond to addresses you couldn't reach 
otherwise. This technique is similar to the previous one; however, the goal is to have 
the response to the spoofed packet perform a nefarious action. This technique can be 
particularly interesting if a special source IP address is used. 
For example, say an attacker spoofs a UDP request from the IP address 
255.255.255.255 to an accessible service in a DMZ. If the UDP service responds, that 
response is broadcast to every host in the DMZ network. IP addresses 224.0.0.1 and 
127.0.0.1 can be used to get a response to go to the local machine, as shown in Figure 
15-13. 
Figure 15-13. Spoofing to elicit a response 
[View full size image] 
Spoofing for a State Entry 
You can also use spoofing to try to get special entries added to the firewall state table 
for later abuse, as shown in Figure 15-14. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
927 
Figure 15-14. Spoofing for state table manipulation 
[View full size image] 
Say the firewall's stateful inspection is loose, and it uses a lone ACK TCP segment to 
create a state table entry for an ongoing TCP connection. This can be done to allow for 
nondisruptive firewall reboots. What if an attacker spoofs a single TCP packet from 
the DNS server to the file server on the intranet, and the packet contains this string: 
PORT 1,1,1,1,10,10\r\n 
A stateful firewall with improper spoofing protection would see this packet as the DNS 
server performing an FTP session to the file server. If the rule set allows this 
communication, the firewall would parse the packet's data and determine that an FTP 
data connection is about to happen. The firewall would open a temporary hole for the 
file server to connect back to the DNS server. The attacker could then spoof a 
different packet going to a port that the firewall's rule set normally blocks. 
Spoofing Up Close 
Spoofing attacks become far more potent when an attacker is sitting on the same 
network as one of the firewall interfaces. For example, what if you hacked the DNS 
server in the DMZ in Figure 15-15? From this vantage point, you can perform a 
number of attacks that allow you to extend this compromise. 
Figure 15-15. Spoofing within the same segment 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
928 
First and foremost, you can now attack other hosts in the DMZ directly, without going 
through a firewall. This attack is obviously useful, and it doesn't require any spoofing. 
Spoofing from a Network Peer to Exploit the Rule Base 
You've seen how firewalls make spoofing-related decisions based on which interface 
the packet comes from. Because you're now on the same network segment as other 
protected machines, you can spoof packets from any of them with impunity. The 
firewall sees packets coming in from the correct interface and believes they are 
genuine. 
The first way you can use this technique is to try to take advantage of any rules 
trusting any hosts in the DMZ. Because you can effectively impersonate those hosts 
by using networking tricks of the trade, you should be able to access any resources 
the hosts can. 
For example, say a Web server in the DMZ talks to a database server in the internal 
network. If you can't compromise the Web server, you can still use the DNS server to 
spoof packets from the Web server that reach the database server. You can use 
various tricks to intercept the responses coming back as well. 
Spoofing from a Network Peer to Create State 
The other advantage you gain from being able to spoof packets from hosts on the 
network is the ability to manipulate the firewall's state table. You can create state 
table entries that open external network access to other hosts on the network 
segment. This method doesn't give you access to anything you don't already have 
from the DNS server, but it could be useful in a real-world attack for running an 
exploit from a particular host or opening a command shell through a firewall. 
For example, if you want to let a machine on the Internet talk to a Web server on the 
DMZ, you could create a fake DNS or FTP connection for the firewall's benefit. The 
connection would appear to originate from the Web server, and the destination would 
be your attack machine on the Internet. If the firewall's rule base allows the spoofed 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
929 
connection, the firewall creates state table entries you can use. Typically, your attack 
machine can "respond" to the spoofed traffic in some way as the firewall, and your 
response is actually legitimate network traffic. 
Spoofing Destinations to Create State 
You can send packets directly to the firewall interface via the local network's data link 
layer, and these packets can contain any destination IP address you want. If the 
firewall is your default router, most of the packets you send will go through the 
firewall anyway. If not, you can make it happen with a little creative use of the routing 
table. 
Routing through the firewall allows for a class of attacks that share a similar form. The 
goal is to spoof packets that match the rule base and cause entries to be added to the 
firewall's state tables. The actual attack comes later, and it uses those state table 
entries to make it through the firewall. 
One effective way to accomplish this attack is to spoof packets from the target 
machine to you. If they get past the spoofing filter and the rule set, the state table 
entries that are created are likely to be useful. For example, what if you control the 
DNS server and want to talk to UDP port 5678 on the file server, but the firewall is 
blocking you? To circumvent the block, you need to get a state table entry in the 
firewall that allows you to reach that port. What you do is spoof a packet from source 
port 5678 on the file server to destination port 53 on the DNS server. The firewall has 
an opportunity to reject this packet if spoofing protection is functioning. Assuming 
your packet gets past the spoofing check, the rule base simply sees a DNS request 
from the file server to the DNS server, which is allowed. The firewall creates a state 
table entry indicating a UDP "connection" from file server:5678 to DNS server:53. 
Usually, this entry means the firewall expects and will allow a response, which should 
come from the DNS server on source port 53 and go to the file server on destination 
port 5678. 
This state table entry enables you to attack the file server directly from the DNS 
server. You send the UDP attack packet from source port 53 to the vulnerable service 
on the file server at port 5678. Obviously, port 5678 isn't likely to be exploitable in the 
real world, but you have a basic mechanism for opening any UDP port. In practice, it's 
usually even easier, as UDP state tracking, at least in Firewall-1, is forgiving about a 
response packet's destination port. 
For TCP, you can spoof TCP segments purporting to be part of an FTP connection; 
these segments contain PORT and PASV strings. The firewall parses these strings and 
opens temporary holes for TCP connections. This method is a more limited form of the 
attack because of restrictions on data connection ports and directionality, but 
attackers can usually work around these restrictions. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
930 
Special Addresses 
You can perform variations of the previous destination-spoofing attack by using 
special IP addresses in certain cases. For example, if you spoof a packet from the 
source IP 224.0.0.1 to yourself, you create a state table entry that enables you send 
packets to the multicast address. These packets, after they're accepted by the firewall, 
are actually passed to the firewall host's IP stack. This attack pattern can be used to 
attack services running on the firewall host. 
Spooky Action at a Distance 
In the analysis of spoofing packets from the compromised DMZ host, you saw that 
having control of the destination IP address could be quite useful when staging a 
spoofing attack. In that example, your location on the physical network allowed you 
to send packets directly to the firewall interface by using the data link layer. You could 
choose arbitrary destination IP addresses because you were hand-delivering the 
packet directly to the firewall's network card at a lower level. 
Normally, choosing arbitrary destination IP addresses isn't possible when you're 
attacking a firewall over the Internet because those addresses are used for routing. If 
you want the packet to reach a particular firewall, it must have a destination IP 
address that gets it routed through the firewall. For a firewall on the Internet, the 
destination address is typically a small set of public addresses, none of which allows 
you to do much when spoofing. 
To launch destination IP attacks, what you need is the ability to route arbitrary 
packets through the firewall. Two possibilities are available to you: IP source routing 
and encapsulation via tunneling protocols. 
Source Routing 
Source routing was designed to do exactly what you need. You can specify the routing 
path by using a loose source route so that your packet ends up at the firewall with any 
destination IP address you like. Unfortunately, source-routing attacks rarely work in 
practice because usually they are blocked. Every security device that sees a 
source-routed IP packet typically drops it, and routers are often configured to drop 
them as well. 
Encapsulation 
If you can encapsulate packets in a tunneling protocol and have them decapsulated 
by the firewall or a machine on the same network as the firewall, you're in an 
advantageous position, akin to being on the same physical network. 
Firewall-1 used to support decapsulation of a simple tunneling protocol, IP protocol 94. 
This decapsulation was always on, and it happened before any processing of the rules 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
931 
or state table. Thomas Lopatic, Dug Song, and John McDonald were able to leverage 
this decapsulation, in concert with spoofing attacks and common rule base settings, 
to perform many of the aforementioned attacks against Firewall-1. 
This area could definitely use more research. There's no shortage of tunneling 
protocols that are likely to be implemented on firewalls: IPsec, various VPN protocols, 
tunneling protocols related to IPv6, tunneling protocols for mobile users, and so forth. 
8.2.7 Summary 
This chapter has given you some exposure to the kinds of security issues that can 
affect firewall systems. You've seen how attacks against firewalls typically involve 
tricking the firewall into violating its rule-base or facilitating an attacker in 
impersonating another system. These types of attacks are particularly significant 
when you consider that firewalls are devices charged with protecting the borders of 
almost every network. 
From an auditing perspective, firewalls provide a unique and very worthwhile project. 
Reviewing firewall software can be particularly interesting, as it requires a creative 
use of networking protocols, and there's a heavy focus on design and logic review. It's 
also an area that's currently lacking in extensive investigation, so it's a good place for 
a vulnerability researcher to cover new ground. 
8.3 Chapter 16.  Network Application Protocols 
Chapter 16. Network Application Protocols 
"When the going gets weird the weird turn pro." 
Hunter S. Thompson 
8.3.1 Introduction 
Chapter 14(? [????.]), "Network Protocols," examined auditing low-level functionality 
in IP stacks in modern operating systems and other devices that perform some level 
of network functionality, security, or analysis. Applications that communicate over 
the Internet typically implement higher-level protocols and use those previously 
examined TCP/IP components only as a transport mechanism. Code implementing 
these higher-level protocols is exposed to attack from untrusted sources. A large 
percentage of the codebase is dedicated to parsing data from remote machines, and 
that data is usually expected to conform to a set of protocol specifications. Auditing 
application-layer protocols involves understanding the rules that govern how a piece 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
932 
of software communicates with its counterparts on the network, and then applying 
relevant concepts introduced in Part II(? [????.]), "Software Vulnerabilities," of this 
book. A number of well-known and widely used protocols provide functionality you 
use daily, such as Hypertext Transfer Protocol (HTTP) for Web browsing, Simple Mail 
Transfer Protocol (SMTP) for sending and receiving e-mail, and File Transfer Protocol 
(FTP) for transferring files. These protocols are just a few of the ever-growing list 
used by millions of clients and servers worldwide. This chapter focuses on a few 
application protocols that are widely used across the Internet, and you see how to 
relate a protocol's design with classes of vulnerabilities that are likely to occur as a 
result of these design choices. 
8.3.2 Auditing Application Protocols 
Before you jump into selected protocols, this section explains some general 
procedures that are useful when auditing a client or server product. The steps offer 
brief guidelines for auditing a protocol you're unfamiliar with. If you're already 
familiar with the protocol, you might be able to skip some early steps. 
Note 
At the time of this writing, there has been a big trend in examining software that deals 
with file formats processed by client (and, less often, server) software. The steps 
outlined in this section could also be applied to examining programs dealing with file 
formats, as both processes use similar procedures. 
Collect Documentation 
So how do you audit software that's parsing data in a format you know nothing about? 
You read the protocol specification, of course! If the protocol is widely used, often 
there's an RFC or other formal specification detailing its inner workings and what an 
implementation should adhere to (often available at www.ietf.org/rfc.html). Although 
specifications can be tedious to read, they're useful to have on hand to help you 
understand protocol details. Books or Web sites that describe protocols in a more 
approachable format are usually available, too, so start with an Internet search. Even 
if you're familiar with a protocol, having these resources available will help refresh 
your memory, and you might discover recent new features or find some features 
perform differently than you expected. For proprietary protocols, official 
documentation might not be available. However, searching the Internet is worth the 
time, as invariably other people with similar goals have invested time in documenting 
or reverse-engineering portions of these protocols. 
When reading code that implements a protocol, there are two arguments for 
acquiring additional documentation: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
933 
Why not use all the tools you have available at your disposal? There's nothing 
to lose by reading the specifications, and often they help you quickly 
understand what certain portions of code are attempting to accomplish. 
Reading the documentation can give you a good idea of where things are likely 
to go wrong and give you a detailed understanding of how the protocol works, 
which might help you see what could go wrong from a design perspective 
(discussed in depth in Chapter 2(? [????.]), "Design Review"). 
Identify Elements of Unknown Protocols 
Sometimes you encounter a proprietary protocol with no documentation, which 
means you have to reverse-engineer it. This skill can take some time to master, so 
don't be discouraged if you find it cumbersome and difficult the first few times. There 
are two ways to identify how a protocol works: You can observe the traffic or 
reverse-engineer the applications that handle the traffic. Both methods have their 
strengths and weaknesses. Reverse-engineering applications give you a more 
thorough understanding, but doing so might be impractical in some situations. The 
following sections present some ideas to help get you on the right track. 
Using Packet Sniffers 
Packet-sniffing utilities are invaluable tools for identifying fields in unknown protocols. 
One of the first steps to understanding a protocol is to watch what data is exchanged 
between two hosts participating in a communication. Many free sniffing tools are 
available, such as tcpdump (available from www.tcpdump.org/) and Wireshark 
(previously Ethereal, available from www.wireshark.org/). Of course, the protocol 
must be unencrypted for these tools to be useful. However, even encrypted protocols 
usually begin with some sort of initial negotiation, giving you insight into how the 
protocol works and whether the cryptographic channel is established securely. 
One of the most obvious characteristics you'll notice is whether the protocol is binary 
or text based. With a text-based protocol, you can usually get the hang of how it 
works because the messages aren't obscured. Binary protocols are more challenging 
to comprehend by examining packet dumps. Here are some tips for understanding 
the fields. When reading this section and trying to analyze a protocol, keep in mind 
the types of fields that usually appear in protocols: connection IDs, length fields, 
version fields, opcode or result fields, and so on. Most undocumented protocols aren't 
much different from the multitude of open protocols, and you're likely to find 
similarities in how proprietary and open protocols work. This chapter focuses on 
simple one-layer protocols for the sake of clarity. You can apply the same principles to 
complex multilayer protocols, but analyzing them takes more work and more 
practice. 
Initiate the Connection Several Times 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
934 
Start at the beginning with connection initiation. Usually, it's easier to start there and 
branch out. Establishing new connections between the same test hosts multiple times 
and noting what values change can be useful. Pay special attention to the top of the 
message, where there's presumably a header of some sort. Note the offsets of data 
that changes. It's your job to pinpoint why those values changed. Asking yourself 
some simple questions, such as the following, might help identify the cause of those 
changes: 
Did a single field change by a lot or a little? 
Was the change of values in a field drastic? Could it be random, such as a 
connection ID? 
Did the size of the packet change? Did a field change in relation to the size of 
the packet? Could it be a size field? 
Answer these questions and keep detailed notes for each field that changes. Then try 
to come up with additional questions that might help you determine the purpose of 
certain fields. Pay attention to how many bytes change in a particular area. For 
example, if it's two bytes, it's probably a word field; four bytes of change could mean 
an integer field; and so forth. 
Because many protocols are composed of messages that have a similar header 
format and a varying body, you should write down all the findings you have made and 
see where else they might apply in the protocol. This method can also help you 
identify unknown fields. For example, say you have figured out a header format such 
as the following: 
struct header { 
    unsigned short id;        /* seems random */ 
    unsigned short unknown1; 
    unsigned long length;     /* packet len including header */ 
} 
You might have deduced that unknown1 is always the value 0x01 during initiation, but 
in later message exchanges, it changes to 0x03, 0x04, and so forth. You might then 
infer that unknown1 is a message type or opcode. 