 4, this technique requires only
log2 257(
log2 16+
 13 bits and 4d packets. This sec-
ond technique is thus clearly better. In Section 6 we use a
slightly different chunking strategy based on the Chinese
Remainder Theorem [2].

4.2. Random Full Path Encoding
The astute reader has probably noticed a serious ﬂaw
in the above schemes; we require FullPath0 j
 0. This
implies that there is some way for a router to know that it
is the “ﬁrst” participating router on a particular path. In
the current Internet architecture there is no reliable way
for a router to have this information. We must therefore
extend our scheme to mitigate this problem.
In our revised scheme a router ﬁrst ﬂips a weighted coin.
If it came up tails the router would assume it was not the
ﬁrst router and simply follow the FullPath algorithm pre-
sented above, adding its IP address (or IP address chunk)
data. On the other hand, if the coin came up heads, the
router would assume it was the ﬁrst router and randomly
choose a x j to use for the path. We will refer to this state
as “marking mode.”
At the destination, we would receive a number of differ-
ent polynomials, all representing sufﬁxes of the full path.
In our example network, packets from A1 could contain
R4R2R1, R2R1, or R1. From now on, we’ll refer to each
of these path sufﬁxes as “virtual paths”, because alge-
braically they are indistinguishable from full paths. Dis-
criminating these virtual paths would be a real nightmare
if we were not able to leverage the power of our alge-
braic approach.
It turns out that recovering these paths
is the well studied problem of reconstructing mixed al-
gebraic functions [3]. We can therefore simply appeal to
the current best algorithm for solving this problem.
In
the future, as better algorithms are available they could be
implemented at the destination without changing anything
on the routers.
The algorithm we will use in our analysis is due to Gu-
ruswami and Sudan [13]. If we have N total packets, it
allows us to recover all virtual paths of length d for which
want to recover all virtual paths of length 17 or less, we
would need to ensure that we receive 400 packets from
each virtual path. Generally, we would need to expect
packets from a router at distance d with a probability of
we have at least , N d 1 packets. For example, if
we assume that we analyze 10 000 packets at a time and
no less than, N d 1- N. Since the probability of get-
ting a packet from a router D hops away is p 1 p
 1,
mode, we come up with the inequality p 1 p
 1 .
, N d 1- N. We would like to recover paths of length
where p is the probability that a router is in marking
d so this becomes p 1 p d 1.
, N d 1- N. Unfor-
tunately, this inequality has only negative and imaginary
solutions for any of the values of N and d that interest us.
To remedy this problem, we change our marking strat-
egy slightly. Whenever a router receives a packet, it still
ﬂips a weighted coin. But now, instead of simply going
into marking mode for one packet when the coin comes up
heads, the router will stay in marking mode for the next t
packets it receives. The router should do this coin ﬂip for
each pair of interfaces and not as a global state. Our goal
now is not to recover all virtual paths in one run, but in-
stead to recover only a few paths per run. To accomplish
this we should choose t
is a factor de-
signed to allow small overlaps in routers on the same path
both being in marking mode. Our tests have shown that e
0/ Nd
can be small compared to/ Nd.
of 10 000 packets each through a paths of length 48,
timum choice for p in this scenario is around 10 5. Even
ceive more than 100 000 packets in order to reconstruct
which we feel is a reasonable upper bound on expected
path lengths. The results of these tests show that the op-
with an “optimum” probability, we ﬁnd that we must re-
To analyze this scheme we simulated thousands of runs
even more moderate length 35 virtual paths.
e where e
j Anxn 1
 FakePath j- xn
An even bigger problem than the number of packets
needed to reconstruct these paths is that attackers can
cause more false paths than true paths to be received at
the victim. This is due to the fact the our choice of a small
p creates large number of packets in which no router on
the packet’s path is in marking mode. The attacker can
thus insert any path information he wishes into such pack-
ets. Because the attacker can generally ﬁnd out the path to
his victim (using traceroute, for example) he can compute
 A0 mod p.
FullPath0 j
This choice will cause the victim to receive FullPath j
FakePath j. When trying to reconstruct paths, the vic-
tim will have no indication as to which paths are real and
which paths are faked. Two solutions to this problem are
to increase p or to store a hop count in the packet that
each participating router would increment. Increasing the
probability makes it even harder to receive long paths, so
we do not think that is a viable option. Adding a hop
count would prevent an attacker from forging virtual paths
that are closer than its actual distance from the victim but
would require ! log2 d1# more bits in the packet. While
either of these solutions may be appropriate in some situa-
tions, we feel that the scheme presented in the next section
is a better alternative.

j
4.3. Random Partial Path Encoding
Our ﬁnal scheme is a further generalization of the ran-
dom full path encoding method. We add another parame-
ter,2 , that represents the maximum length of an encoded
D
D

Polynomial Degree Bits for Accumulator Bits for Randomness
Bits per packet
19
15
12
11
10
9
! 32- c#
2 1
 1
3
5
7
11
13
15
! 32- c#
16
11
8
6
5
4
log2
! 32- c#
2+ 1
2
3
3
4
4
4
Table 1. Parameterizations of Random Partial Path Encoding (all assume23
 1)
2+ 1
coding of edges between routers.
, while23
 1 would represent en-
is set by the marking router and decre-
mented by each participating router who adds in their IP
information. When the value reaches 0, no more routers
add in their information. For example, in the full path
The purpose for this change is to decrease the maximum
)
in order to reduce the number of packets needed out of
a given set or packets to recover a route. Of course we
path. The value of2
encoding scheme24
d used in the reconstruction bound (/ N2
for 056275
do not get anything for free; this adds ! log2
2) 1$# bits
to the packets. On the other hand, we now have p 1
, N
p x 1.
 18- N which does have so-
! 32- c#
Of course, if2
lutions that are interesting to us. Table 1 shows some of
these interesting combinations.
is less than the true path length, then re-
construction ﬁnds arbitrary subsequences of the path (not
just sufﬁxes as in Full Path encoding). The reconstructor
still has some work to do to combine these subsequences
properly. Thus reconstruction in this scheme has an alge-
braic step followed by a combinatorial step.
In section 6, we will be looking at the parameterization
where2
 1 and d
 5. This encodes edges between ad-
jacent participating routers at a cost of 15 bits per packet.
In the next section, we will discuss where to ﬁt the 15 bits
of information in an IP packet.
5. Encoding Path Data
We now need a way to store our traceback data in IP
packets. We will try to maximize the number of bits avail-
able to us while preserving (for the most part) backwards
compatibility.
5.1. IP options
An IP option seems like the most reasonable alternative
for storing our path information. Unfortunately, most cur-
rent routers are unable to handle packets with options in
hardware [4]. Even if future routers had this ability, there
are a number of problems associated with this approach as
presented by Savage, et al [19]. For all of these reasons
we have concluded that storing data in an IP option is not
feasible.
5.2. Additional Packets
Instead of trying to add our path data to the existing IP
packets, we could instead send the data out of band using
a new protocol that would encapsulate our data. While
this may have limited uses for special cases (such as deal-
ing with IP fragments), a general solution based on insert-
ing additional packets requires a means of authenticating
these packets. This is because, presumably, the number of
inserted packets is many orders of magnitude less than the
number of packets inserted by the attacker. Thus, because
we assume that an attacker can insert any packet into the
network, the victim can be deluged with fake traceback
packets, preventing any information to be gained from the
legitimate packets.
5.3. The IP Header
Our last source of bits is the IP header. There are sev-
eral ﬁelds in the header that may be exploited for bits, with
varying tradeoffs. As shown in Figure 2, we have found
25 bits that might possibly be used, although we think that
a subset of these bits would better meet our goal of pre-
serving backwards compatibility.
5.3.1. The TOS Field
The type of service ﬁeld is an 8 bit ﬁeld in the IP header
that is currently used to allow hosts a way to give hints
to routers as to what kind of route is important for par-
ticular packets (maximized throughput or minimized de-
lay, for example) [1]. This ﬁeld has been little used in
the past, and, in some limited experiments, we have found
that setting this ﬁeld arbitrarily makes no measurable dif-
ference in packet delivery. There is a proposed Internet
standard [15] that would change the TOS ﬁeld to a “dif-
ferentiated services ﬁeld.” Even the proposed DS ﬁeld has
two unused bits, however, there are already other proposed
uses for these bits (e.g. [18]).


¥
¥

Version(cid:13) H. Length(cid:13) Type of Service (8-bit)(cid:13)
Total Length(cid:13)
Fragment ID (16-bit)(cid:13)
(1-bit)(cid:13)
Flags(cid:13)
Fragment Offset(cid:13)
Time to Live(cid:13)
Protocol(cid:13)
Header Checksum(cid:13)
Source IP Address(cid:13)
Destination IP Address(cid:13)
Figure 2. The IP Header. Darkened areas represent underutilized bits.
5.3.2. The ID Field
The ID ﬁeld is a 16 bit ﬁeld used by IP to permit recon-
struction of fragments. Naive tampering with this ﬁeld
breaks fragment reassembly. Since less than 0 25% of all
Internet trafﬁc is fragments [22], we think that overload-
ing this ﬁeld is appropriate. A more in-depth discussion of
the issues related to its overloading can be found in Sav-
age’s work [19].
5.3.3. The Unused Fragment Flag
There is an unused bit in the fragment ﬂags ﬁeld that cur-
rent Internet standards require to be zero. We have found
that setting this bit to one has no effect on current im-
plementations, with the exception that when receiving the
packet, some systems will think it is a fragment. The
packet is still successfully delivered however, because it
looks to those systems as though it is fragment 1 of 1.
Our Selection
As shown in Figure 3, we chose to use 15 bits out of the
ID ﬁeld. Since we needed more than 9 bits, we had to use
at least part of the ID ﬁeld and using only part of the ID
ﬁeld and part of another ﬁeld would not have provided us
with any beneﬁts.
5.4. IPv6
Since IPv6 does not have nearly as many backwards
compatibility issues as IPv4,
the logical place to put
traceback information is a hop-by-hop option in the IPv6
header [9]. However, schemes such as those presented
here are still valuable because they use a ﬁxed number of
bits per packet thereby avoiding the generation of frag-
ments.
6. Analysis
A major advantage of our approach is the amount of
ﬂexibility available in choosing a scheme. There is a rich
space of algebraic alternatives to Savage’s design. We
have chosen a particular parameterization to implement
for the purpose of analysis, but we note that our choice is
certainly not the only practical alternative and under dif-
ferent assumptions and design criteria would not be the
ideal choice.
We will use 15 bits out of the ID ﬁeld of the IP header to
store our data. As mentioned above, this choice breaks IP
fragmentation, but due to the prevalence of MTU path dis-
covery and the decline of fragmentation in general we feel
this is an acceptable tradeoff. A proposed work-around to
allow fragmentation by using additional packets has also
been proposed [19].
Each router must precompute three 11 bit chunks based
As shown in Figure 3, 11 bits are used as an accumula-
tor, 3 bits are used as random data, and one bit is used for
signaling. This means that all arithmetic in the accumu-
next router that it should add its values into the accumu-
lator. That router will also reset the signaling bit. This
lator will be done in GF 2039 (2039 is the largest prime
5 211). The signaling bit will allow a router to tell the
corresponds to random partial path encoding with2;
 1.
on its 32 bit IP address, Z. Let z1
 Z mod 2027, z2
Z mod 2029, and z3
 Z mod 2039. Since 2027, 2029,
and 2039 are all prime and 2027 2029 2039. 232, we
With a probability of 1- 25, a router will set the 3 ran-
z2xi
i 
dom bits (let’s call this value xi), set the accumulator to
z3x2
z1 mod 2039, and set the signal bit. The rest
of the time it will check to see if the signal bit is set. If so,
it will incorporate its values (y1, y2, and y3) using Horner’s
rule and clear the signal bit, thus completing the calcu-
lation of z3x5
y1 mod 2039.
i
This procedure is presented in pseudocode in Figure 4.
will be able to reconstruct the value of Z by invoking the
Chinese Remainder Theorem [2].
z2x4
i