A2: startActivity(B2)
Attacks
in Section 5
phishing I
phishing II
launcher: startActivity(A1)
spooﬁng
M1:taskAfﬁnity=A1; NEW_TASK intent ﬂag set
launcher: startActivity(A1)
denial-of-use;
ransomware;
spyware
phishing III
M1:taskAfﬁnity=B2; B2:allowTaskReparenting=”true”
NEW_TASK intent ﬂag set or M2:launchMode=”singleTask”
M2:taskAfﬁnity=A1
startActivities([M1, M2])
or use TaskStackBuilder
M1: startActivity(M2)
-
Table 3: Detailed information of the HSTs (red edges with HST indexes in Figure 4). E.g., condition “M1:taskAfﬁnity=B2”
indicates that the taskAfﬁnity attribute of activity M1 is set to that of B2; Event “launcher:startActivity(A1)” means that activity
A1 is started by the launcher.
by the Android system, the attacker can actively create a
plethora of HSTs that harm other apps. In Figure 4(a),
we only show several typical HST cases, yet there are
much more HST instances of these types in the complete
state transition graph.
The HST cases and their conditions/events summa-
rized in Table 3 may now look mysterious. We will de-
mystify these conditions and events in the rest of this sec-
tion.
4.5 Exploiting Conditions
In Table 3, HSTs #2, #4, #6 are similar with respect
to their state transition conditions, i.e. all three HSTs
occur by virtue of customized activity launch mode
(by setting launchMode attribute or NEW_TASK in-
tent ﬂag). HSTs #3, #5 are similar as they both use
allowTaskReparenting attribute to enable activity
re-parenting.
4.5.1 Activity Attributes
One can deﬁne the attributes [2] of an activity in the
 element in manifest ﬁle. The attributes
not explicitly deﬁned are set to default values.
Task Afﬁnity: Task afﬁnity declares what
task an
activity prefers to join. It is a hard-coded string deﬁned
as
,
where affinity is the task afﬁnity string that can be
deﬁned arbitrarily. By explicitly declaring a task afﬁnity,
an activity is able to actively “choose” a preferable task
to join within its life cycle. If not explicitely speciﬁed
in the manifest, the task afﬁnity of an activity is the app
package name, such that all activities in an app prefer
to reside in the same task by default. The afﬁnity of a
task is determined by the task afﬁnity of the task’s root
activity (the activity on the bottom of back stack).
Task afﬁnity is a crucial condition used in most of
the HSTs in Table 3. There are two occasions in
which an activity can “choose” its preferred host task:
(1) when an activity attempts to be started as a new
task (i.e., “singleTask” launch mode or NEW_TASK
intent ﬂag as in HST#2, #4, #6), and (2) if the
allowTaskReparenting activity attribute is set to
true, and another task with the same task afﬁnity is
brought to the foreground (as in HST#3, #5). We explain
950  24th USENIX Security Symposium 
USENIX Association
6
the above two cases in detail in the following paragraphs.
Launch Mode: Activity launch mode deﬁnes how an
activity should be started by the system. Based on the
launch mode, the system determines: (1) if a new ac-
tivity instance needs to be created, and (2) if yes, what
task should the new instance be associated with. The
launch mode can be either statically declared by spec-
ifying  in the
manifest ﬁle or dynamically deﬁned using intent ﬂags
discussed in Section 4.5.2.
By default, launchMode="standard".
In this
mode, the AMS would create a new activity instance and
put it on top of the back stack on which it is started. It’s
possible to create multiple instances of the same activ-
ity and those instances may or may not belong to the
same task. With launchMode="singleTask", the
decision-making of activity start-up is more complex.
An investigation into Android source code reveals three
major steps the AMS takes towards starting an activity.
First, if the activity instance already exists, Android re-
sumes the existing instance instead of creating a new one.
It means that there is at most one activity instance in the
system under this mode. Second, if creating a new ac-
tivity instance is necessary, the AMS selects a task to
host the newly created instance by ﬁnding a “matching”
one in all existing tasks. An activity “matches” a task
if they have the same task afﬁnity. After ﬁnding such a
“matching” task, the AMS puts the new instance into the
“matching” task. This explains why in HST #2 and #6,
the newly-started and foreground activities (B2 and M2)
are put on other “matching” tasks (with the same task
afﬁnity) instead of the tasks who start them. Third, with-
out ﬁnding a “matching” task, the AMS creates a new
task and makes the new activity instance the root activity
of the newly created task.
Task Re-parenting: By default, once an activity starts
and gets associated with a task, such association per-
sists for the activity’s entire life cycle. However, setting
allowTaskReparenting to true breaks this restric-
tion, allowing an existing activity (residing on an “alien”
task) to be re-parented to a newly created “native” task,
i.e., a task having the same task afﬁnity as the activity.
For example, in HST#3 resembles the spooﬁng at-
tack example discussed in Section 4.1. M2 is sup-
posed to stay on Mallory’s task at all time. However,
M2 has its allowTaskReparenting set to true, and
taskAffinity set to Alice’s package name, such
that when Alice’s task is started (A1 as the root activ-
ity) by the launcher, M2 is re-parented to Alice’s new
task and the user sees M2 on screen instead of A1.
In this process, A1 is never brought to the screen at
all. Likewise, HST #5 occurs due to similar reason,
except that this time the benign activity B2 (with its
allowTaskReparenting set to true) is re-parented
to the malware task.
The above activity attributes offer attackers with great
ﬂexibility. The attackers can put their malicious activ-
ities to a preferred hosting tasks under certain events,
e.g., singleTask launch mode during an activity start-
up and allowTaskReparenting during a new task
creation. Furthermore, an activity is free to choose any
app as their preferred task owner (including the privi-
leged system apps) by specifying the target app’s pack-
age name as their task afﬁnity. These conditions lead to
a bulk of HSTs in the simulation, and these HSTs can
be employed to launch powerful task hijacking attacks
as we will see in Section 5.
4.5.2
Intent Flags
Before sending an intent to start an activity, one could
set
intent ﬂags to control how the activity should
be started and maintained in the system by calling
intent.setFlags(flags). intent is the intent
object to be sent, and flags is an int value (each bit
indicates a conﬁguration ﬂag to the AMS).
if set,
Noticeably, the FLAG_ACTIVITY_NEW_TASK in-
tent ﬂag,
lets an activity be started as if its
launchMode="singleTask", i.e. the system goes
through the same procedures as explained in launch
mode to ﬁnd a “matching” task or create a new task for
the new activity instance. This is the dynamic way of set-
ting activity’s launch mode. Launcher app always uses
this ﬂag to start an app in a new task as in HST#4.
4.6 Exploiting Events
4.6.1 Callback Function
Android framework provides a variety of callback func-
tions for activities to customize their behaviors under
particular events, e.g., activity life cycle events (start,
pause, resume or stop), key pressing events, system
events, etc.
onBackPressed() is a callback function deﬁned
in Activity class, and is invoked upon user pressing
the “back” button. The default implementation in frame-
work code simply stops and destroys the current activity,
and it then resumes the next activity on top of the current
back stack, as we have seen in Section 3.3. However, an
attacker can override this callback function for its mali-
cious activity and arbitrarily deﬁne a new behavior upon
“back” button pressing, or simply disable the “back” but-
ton by providing an empty function. As a result, once the
malicious activity is brought to the foreground, pressing
the “back” button triggers the code of attacker’s control.
USENIX Association  
24th USENIX Security Symposium  951
7
(a)
(b)
(c)
(d)
(e)
(f)
Figure 5: The process of “back hijacking” phishing attack to a well-known bank app. (a) shows the main activity of the bank
app. A new user taps on the tutorial video link in the bank app; In (b), a system dialog prompts the user to choose a video player
available in the system; In (c), the video player activity is started, and the user later clicks “back” button, intending to “goes back”
to the original main activity; In (d) and (e), the back button directs the user to the phishing UIs, which spoof the user and steal bank
account credentials. The phishing activity then quits after user clicks “Sign On”; In (f), the original main activity is resumed, with
a log-in failure toast message displayed by the quitting malware.
4.6.2 Framework API
Android framework provides APIs to create new
tasks with established back stacks.
For example,
TaskStackBuilder is a utility class that allows an
app developer to construct a back stack with speciﬁed
activities, and to start the back stack as a brand new task
in the system at a later time (e.g. using a PendingIntent).
Similarly, startActivities() in Activity class
achieves the same thing except that it builds and starts the
tasks in one API function call. These framework APIs
are helpful for attackers to build and launch new tasks
containing designated back stacks without explicitly dis-
playing all activities in the back stacks on screen.
5 Task Hijacking Attack Examples
In this section, we demonstrate more attack examples uti-
lizing exploitable HSTs in Table 3. These attacks can
breach the integrity, availability and conﬁdentiality of
victim apps’ UIs respectively. We have tested these at-
tacks on Android 3.x, 4.x and 5.0.x.
5.1 Breaching UI Integrity
The UI integrity here means the “origin/source integrity”
of the victim app’s activities, instead of the “data in-
tegrity”. That is, instead of modifying the original ac-
tivities of the victim app, attackers deceive the user by
spooﬁng UIs, which can prevent the original UIs from
being displayed on screen.
5.1.1 Spooﬁng Attack
As we have already seen in Section 4.1 and
4.5,
by manipulating allowTaskReparenting and
taskAffinity, an attacker can successfully hijack
a new task with a spooﬁng activity. This attack affects
all apps on device including the most privileged system
apps (e.g., Settings).
The attacker can even target
multiple apps on user device at the same time, as long as
the background malware tasks (targeting different task
afﬁnity) are started in advance.
Stealthiness: In order to make the spooﬁng attack more
stealthy, the attacker could take advantage of other task
transition conditions and events to achieve this. For
example,
the attacker can make its background mal-
ware tasks absent from the recent task list by setting
the activity attribute excludeFromRecents to true.
As another example, the user may accidentally resume
the app’s original activity (the root activity of victim
app’s task) by clicking the “back” button from the on-
screen spooﬁng activity. To prevent users from observ-
ing this abnormal app behavior, the attacker can override
onBackPressed() of the spooﬁng activity, bringing
the home screen back to the foreground, such that it gives
the user an illusion that it is in coherence with the sys-
tem’s default ”back” behavior.
5.1.2 Phishing Attack - “Back Hijacking”
The back button is popular with users because it allows
users to navigate back through the history of activities.
However, attackers may abuse the back button to mislead
the user into a phishing activity.
We devise three phishing attack methods that target the
same banking app, and demonstrate two of them in this
paper. Figure 5 shows the screen shots of the phishing
attack process. The phishing UIs show up when the user
returns from a third-party app activity, and the user un-
wittingly believes that he/she has returned to the original
bank activity.
Figure 6 shows the state transition diagrams of two
attack methods. The two attack methods differ in that,
952  24th USENIX Security Symposium 
USENIX Association
8
S1 
mal-player 
Foreground 
B 
A 
Bank App 
S2 
Foreground 
mal-player 
B 
A 
Bank App 
(a) 
Player 
S1 
Foreground 
B 
A 
mal-B 
mal-A 
S3 
Foreground 
mal-B 
mal-A 
B 
A 
Bank App 
Malware 
S2 
Foreground 
Player 
mal-B 
mal-A 
B 
A 
Bank App 
Malware 
Bank App 
Malware 
Figure 6: Tasks state transition diagrams of “back hijacking”
attacks. Figure (a) and (b) shows method I and II respectively.
(b) 
user chooses a malicious video player in the ﬁrst attack,
while in the second attack, even though the user chooses
a benign player, the bank task can still be hijacked when
the user launches the video player.
Method I: Figure 6(a) shows the state transition diagram
of the ﬁrst attack method. We skip the unrelated task(s)
(e.g. launcher) in the system and only show tasks of in-
terest. In s1, the bank app task contains activities A and
B, in which B is the login activity. The HST occurs in
s1 → s2, triggered by the event that the user clicks the
tutorial video from the login UI, sending out a implicit
intent to look for an exported activity in the system capa-
ble of playing the tutorial video. Unfortunately, the user
selects the malicious video player activity “mal-player”
from the system pop-up and this results in the hijacked
state s2. After user ﬁnishes watching the video, s2 → s3
is triggered by user pressing the “back” button. How-
ever, the “back”-pressing event is modiﬁed by overrid-
ing onBackPressed() in the “mal-player” activity.
As a result, instead of resuming activity B, a new mali-
cious task is created (by using TaskStackBuilder)
and brought to the front. As can be seen, the HST takes
place under default conditions as in HST#1 (in Table 3).
The user session is hence hijacked to the malware
task, which contains “mal-A” and the foreground “mal-
B” phishing activities. Note that in this attack, the mal-
ware need to camouﬂage as a useful app (e.g. a video
player in this case) that users are likely to use.
Method II: As shown in Figure 6(b), the same phishing
attack can succeed even when the user selects a benign
video player. In s1, a malware task with two phishing ac-
tivities lurks in the background. Similarly, HST occurs in
s1 → s2, when the user launches a benign video player.
However, as shown in the resulting state s2, instead of
joining the banking task, the new video player activity is
pushed in the malware task’s back stack, such that press-
ing the “back” button after the video play resumes the
phishing activity “mal-B”.
This HST is similar to HST#2 (in Table 3) in that the
benign video player attempts to be started as a new task,
either because of the NEW_TASK ﬂag set in the intent by
the bank activity, or the “singleTask” launch mode set by
the video player. Furthermore, the existing malware task
has its taskAffinity maliciously set to the benign
video player.
Stealthiness: We employ similar methods in the previ-
ous spooﬁng attack to ensure the stealthiness of the back-
ground malware tasks in both phishing attack methods.
Moreover, we disable the animation of task switching,
producing an illusion to the user that the screen transi-
tion is within the same task/app.
5.2 Breaching UI Availability
Task hijacking can also be leveraged to restrict the avail-
ability of an app’s UI components, or in other words, to
prohibit user access to part or all functionality of an vic-
tim app.
5.2.1 Preventing Apps from Being Uninstalled
In this example, the attacker is able to completely prevent
apps from being uninstalled.
Ways to Uninstall An App: There are generally three
ways for a user to uninstall an app from the device: (1)
uninstall from the system Settings app; (2) dragging the
app icon to the “trash bin” on home screen; or (3) unin-
stall with the help of a third-party app, e.g. an anti-virus
app. In these scenarios, the Settings, Launcher, and the
third-party apps will respectively generate an request to
uninstall the app. Such a request eventually reaches the
system package installer, which has the exclusive privi-
lege to install/uninstall apps. Upon receiving the request,