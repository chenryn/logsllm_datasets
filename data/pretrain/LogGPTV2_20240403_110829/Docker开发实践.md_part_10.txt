### 4.2 数据卷

#### 4.2.1 查看数据卷

首先，我们通过 `docker ps` 命令查看正在运行的容器。

```sh
$ docker ps
CONTAINER ID   IMAGE                 COMMAND         CREATED          STATUS          PORTS                    NAMES
935934e00e9d   training/webapp:latest "python app.py" 5 seconds ago    Up 3 seconds    0.0.0.0:49153->5000/tcp  suspicious_hoover
```

可以看到，这里定义了 `/webapp` 数据卷。我们可以通过 `docker inspect` 命令查看容器的数据卷，并定位到数据卷相关的字段内容。

```sh
$ docker inspect suspicious_hoover
...
"Volumes": {
  "/webapp": "/var/lib/docker/vfs/dir/6fd914759fac2a0bff479e94a5961ec8b3a8505fc7f95e4921d24ff9f9d3ab74"
},
"VolumesRW": {
  "/webapp": true
}
...
```

当然，也可以直接通过格式化参数 `--format` 来查看指定数据卷部分的数据。

```sh
$ docker inspect --format '{{.Volumes}}' suspicious_hoover
map[/webapp:/var/lib/docker/vfs/dir/6fd914759fac2a0bff479e94a5961ec8b3a8505fc7f95e4921d24ff9f9d3ab74]
```

可以看出，默认情况下，如果只是声明数据卷而没有映射到宿主主机上的具体目录，Docker 会在 `/var/lib/docker/vfs/dir/` 下分配一个具有唯一名字的目录给该数据卷。我们可以通过在宿主主机上使用 `ls` 参数验证该目录是否存在：

```sh
$ sudo ls -l /var/lib/docker/vfs/dir/
总用量 4
drwxr-xr-x 2 root root 4096 12月 17 14:11 6fd914759fac2a0bff479e94a5961ec8b3a8505fc7f95e4921d24ff9f9d3ab74
```

可以看到，在宿主主机上已经为该数据卷建立了一个独一无二的目录。

#### 4.2.2 挂载主机目录作为数据卷

除了上述的仅仅声明一个数据卷外，我们还可以指定宿主主机上的某个目录作为数据卷。例如，我想把当前目录挂载为容器的 `/webapp` 数据卷，具体操作为：

```sh
$ docker run -d -P --name webapp -v .:/webapp training/webapp python app.py
```

输出提示为数据卷的路径必须是绝对路径。所以 `"."` 这个相对路径会挂载失败。正确的做法是：

```sh
$ docker run -d -P --name webapp -v `pwd`:/webapp training/webapp python app.py
```

然后，我们可以通过 `docker ps` 和 `docker inspect` 命令查看容器的状态和数据卷信息。

```sh
$ docker ps
CONTAINER ID   IMAGE                 COMMAND         CREATED          STATUS          PORTS                    NAMES
295d19d19fbb   training/webapp:latest "python app.py" 2 seconds ago    Up 2 seconds    0.0.0.0:49164->5000/tcp  webapp

$ docker inspect webapp
...
"Volumes": {
  "/webapp": "/home/micall/docker"
},
"VolumesRW": {
  "/webapp": true
}
...
```

可以看到，在 `Volumes` 字段中，容器内的 `/webapp` 目录映射到了宿主主机上的 `/home/micall/docker` 目录。通过挂载本地目录到容器的数据卷，宿主主机对目录内的改变会同步反映到容器中，反过来也一样。我们可以利用这种方法把本地的一些数据复制到挂载目录下，提供给容器处理。容器也可以将处理结果写到该目录下，方便本地用户查看。需要注意的是，如果容器内部已经存在 `/webapp` 目录，那么挂载宿主目录之后，它的内容将会被覆盖。

需要注意的是，`Dockerfile` 并不支持挂载本地目录到数据卷，这主要是因为不同操作系统的目录格式不尽相同。为了保证 `Dockerfile` 的移植性，所以不支持挂载本地目录到数据卷。

在上述 `inspect` 输出信息中，有一个字段是 `VolumesRW`，配置的是数据卷的读写权限，默认情况下是读写，我们可以改变它的读写权限。具体做法是在创建数据卷的后面跟上权限控制，例如要将 `webapp` 数据卷由默认的 `rw` 可读可写变成 `ro` 只读。具体操作为：

```sh
$ docker run -d -P --name webapp -v `pwd`:/webapp:ro training/webapp python app.py
$ docker inspect webapp
...
"Volumes": {
  "/webapp": "/home/micall/docker"
},
"VolumesRW": {
  "/webapp": false
}
...
```

可以看到，`VolumesRW` 中 `/webapp` 的值为 `false`。

#### 4.2.3 挂载主机文件作为数据卷

除了可以将主机目录挂载为数据卷外，还可以将单个主机的文件挂载为容器的数据卷。例如，在本地的当前目录下建立一个 `test.txt` 文件，里面输入一行 `hello world`，然后将该文件挂载为数据卷。具体操作如下：

```sh
$ touch test.txt
$ gedit test.txt
$ docker run --rm -it -v ~/docker/test.txt:/test.txt ubuntu:latest /bin/bash
root@6e3ece82bfbc:/# ls
bin  dev  home  lib64  mnt  proc  run  srv  test.txt  usr
boot  etc  lib  media  opt  root  sbin  sys  tmp  var
root@6e3ece82bfbc:/# cat test.txt
hello world
root@08554d5bc816:/# vi test.txt
root@08554d5bc816:/# cat test.txt
hello world
hello docker
root@08554d5bc816:/# exit
exit
micall@micall-ThinkPad:~/docker$ cat test.txt
hello world
hello docker
```

在上述操作中，我们先在本地文件系统中创建了一个 `test.txt`，并在里面添加了一行 `hello world`，然后运行 `ubuntu` 容器，并将刚刚新建的 `test.txt` 文件挂载到容器内的 `/test.txt`。`ls` 命令的输出表明该文件映射成功了，使用 `cat` 命令查看该文件的内容，输出即为 `hello world`。然后在容器中通过 `vi` 编辑器编辑该文件，加入 `hello docker` 这行字符串。退出容器，到本地文件系统打开该文件，发现容器对它的改变也会同步到本地。

#### 4.2.4 数据卷容器

数据卷容器是指一个专门用于挂载数据卷的容器，以供其他容器引用和使用。它主要用在多个容器需要从一处获得数据时。在实际操作时，需要将数据容器命名，有了确定的容器名之后，对它有依赖关系的其他容器就可以通过 `--volumes-from` 引用它的数据卷。

首先，建立一个数据卷容器，名为 `dbdata`，并为该容器新建数据卷 `/dbdata`。具体操作为：

```sh
$ docker run -d -v /dbdata --name dbdata training/postgres
a8d875ccbfbbf9188b450fc9aee68f34581d6f6cd39306a196991da73feaf394
$ docker ps
CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                    NAMES
a8d875ccbfbb   training/postgres:latest "su postgres -c '/usr" 3 seconds ago    Up 2 seconds    5432/tcp                 dbdata
```

接着创建一个容器 `db1`，它引用 `dbdata` 的数据卷，具体操作为：

```sh
$ docker run -d --volumes-from=dbdata --name db1 training/postgres
24ea52056abb9f2b2f02f22c421f2e901072a28de437e9442e01bdcf85906614
```

为了验证 `db1` 引用的是 `dbdata` 的数据卷，可以通过 `docker inspect` 命令来分别查看 `db1` 和 `dbdata` 容器，具体操作为：

```sh
$ docker inspect dbdata
...
"Volumes": {
  "/dbdata": "/var/lib/docker/vfs/dir/886e6809b26d7dd765f1f59e93ff5be93d8c30a91e9e5ab14a244e638bd946e1"
},
"VolumesRW": {
  "/dbdata": true
}
...

$ docker inspect db1
...
"Volumes": {
  "/dbdata": "/var/lib/docker/vfs/dir/886e6809b26d7dd765f1f59e93ff5be93d8c30a91e9e5ab14a244e638bd946e1"
},
"VolumesRW": {
  "/dbdata": true
}
...
```

可以看到，二者的数据卷是一样的。也就是说，`db1` 容器和 `dbdata` 容器使用的是同一个数据卷 `/dbdata`。需要说明的是，数据卷一旦声明，它的生命周期和声明它的那个容器就无关了。当声明它的容器停止了，数据卷也依然存在，除非所有引用它的容器都被删除了并且显式地删除了该数据卷。此外，一个容器引用一个数据卷容器时，并不要求数据卷容器是运行的。

我们可以让多个容器引用数据卷容器。例如，新建一个容器 `db2`，它也引用 `dbdata` 容器的数据卷，相关操作为：

```sh
$ docker run -d --name db2 --volumes-from=dbdata training/postgres
```

此外，数据卷容器还可以级联引用。例如，新建一个容器 `db3`，它引用 `db1` 容器的数据卷，具体操作为：

```sh
$ docker run -d --name db3 --volumes-from=db1 training/postgres
```

同样，可以用 `docker inspect` 查看其数据卷，结果是一样的。和 `dbdata`、`db1`、`db2` 一样，它们共用一个数据卷。

无论是声明数据卷的容器还是后续引用该数据卷的容器，容器的停止和删除都不会导致数据卷本身删除。如果需要删除数据卷，那么需要删除所有依赖它的容器，并且在删除最后一个依赖容器时加入 `-v` 标志。这里，假如 `dbdata`、`db1` 和 `db2` 都已经删除了，那么删除 `db3` 的时候加上 `-v` 参数，就可以删除数据卷，具体为：

```sh
$ docker rm -v db3
```

此时你会发现在 `/var/lib/docker/vfs/dir/` 目录下就没有该数据卷对应的目录了。

#### 4.2.5 数据的备份与恢复

利用数据卷容器，还可以进行数据的备份和恢复等。

##### 1. 备份

利用数据卷容器，我们可以备份一个数据卷容器的数据。

首先，建立了一个数据卷容器，相关操作为：

```sh
$ docker run -d -v /dbdata --name dbdata training/postgres
```

这里通过 `-v` 创建了数据卷 `/dbdata`，并将容器命名为 `dbdata`。假如容器在运行过程中把产生的数据都保存到了 `/dbdata` 目录下。现在，我们想把它的数据备份到本地，相关操作为：

```sh
$ sudo docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata
```

这里我们通过 `ubuntu` 镜像新建了一个容器，它引用了 `dbdata` 容器的数据卷，并创建了一个数据卷映射，将本地文件系统的当前工作目录映射到容器的 `/backup` 目录。通过 `tar` 命令将 `/dbdata` 目录打包到 `/backup` 数据卷中，而该数据卷又因映射到了本地，所以 `dbdata` 容器的数据卷内的数据就保存到了本地的当前目录，文件名为 `backup.tar`。

##### 2. 恢复数据

恢复数据和备份数据一样简单。我们的目的是将本地的备份压缩包解压并加载进某个容器内，让其基于该备份的数据继续运行。

首先，我们先声明一个需要恢复的数据容器，操作为：

```sh
$ sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash
```

该命令通过 `ubuntu` 镜像创建名为 `dbdata2` 的容器，该容器还创建了数据卷 `/dbdata`。

然后，我们利用另一个引用它的容器来关联到本地目录，并将本地的数据解压进数据卷中去，具体做法为：

```sh
$ sudo docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf /backup/backup.tar
```

该命令使用 `busybox` 镜像创建一个容器，该容器引用 `dbdata2` 的数据卷，并且也创建了另一个数据卷 `/backup`，`/backup` 被映射到本地文件系统中的当前目录。本地的当前目录存有 `backup.tar` 压缩包，然后通过 `tar` 解压到 `/dbdata` 数据卷下，这样就把备份好的数据重新恢复到容器内部。

### 4.3 容器连接

在 4.1 节中，我们使用了 `-P` 或者 `-p` 来暴露容器端口，以供外界使用该容器。在这一节中，我们要说明另一种容器对外提供服务的方法——容器连接。容器连接包含源容器和目标容器：源容器是提供服务的一方，对外提供指定服务；目标容器连接到源容器后，就可以使用其所提供的服务。容器连接依赖于容器名，所以当需要使用容器连接时，首先需要命名容器，然后使用 `--link` 参数进行连接。

#### 4.3.1 容器命名

容器连接依赖于容器的名字。虽然容器启动后，Docker 会自动为容器赋予一个名字，但是这个随机分配的名字并没有实质的意义。自己给容器命名有如下两个好处：

- 一个有意义的名字能够表明该容器的用途，这样方便记忆。例如，你可以将一个 Web 应用容器命名为 `web`，而 Docker 自动分配名字的话，或许它就是 `david`。很明显，我们更喜欢前者。
- 命名后的容器在容器连接中能够清晰地表征容器之间的逻辑依赖关系。例如，一个源容器里面包含的是数据库应用，我们将其命名为 `dbdata` 容器，然后目标容器是一个 Web 应用容器，这样连接的时候，我们就知道 Web 应用需要用到数据库服务。

介绍完容器连接中容器命名的重要性之后，现在通过 `--name` 参数来命名容器，具体操作为：

```sh
$ docker run -d -P --name web training/webapp python app.py
```

这里我们使用 `training/webapp` 镜像创建了一个名为 `web` 的容器，容器运行 `python` 命令。通过 `docker ps` 命令查看容器状况，如下：

```sh
$ docker ps
CONTAINER ID   IMAGE                 COMMAND         CREATED          STATUS          PORTS                    NAMES
d15c6e42de4b   training/webapp:latest "python app.py" 4 seconds ago    Up 2 seconds    0.0.0.0:49166->5000/tcp  web
```

可以看到，我们的 `webapp` 容器已经运行起来了。

#### 4.3.2 容器连接

连接的格式为 `--link name:alias`，其中 `name` 是源容器的名称，`alias` 是这个连接的别名。