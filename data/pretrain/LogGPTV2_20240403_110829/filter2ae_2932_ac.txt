        pkt['Payload'].v['CreateFlags'] = 0x16
        pkt['Payload'].v['AccessMask'] = 0x02000000 # Maximum Allowed
        pkt['Payload'].v['ShareAccess'] = 7
        pkt['Payload'].v['CreateOptions'] = 0
        pkt['Payload'].v['Impersonation'] = impersonation
        pkt['Payload'].v['Disposition'] = disposition
        pkt['Payload'].v['Payload'] = filename + "\x00"
        ret = self.smb_send(pkt.to_s)
        return ret if not do_recv
        ack = self.smb_recv_parse(CONST::SMB_COM_NT_CREATE_ANDX)
        # Save off the FileID
        if (ack['Payload'].v['FileID'] > 0)
          self.last_file_id = ack['Payload'].v['FileID']
        end
        return ack
      end
SMB_COM_NT_CREATE_ANDX是SMB支持的一个Command协议类型，关于SMB协议，请参阅另一篇文章
这个数据包到达Linux Samba服务器后，会触发named pipe解析流程
\samba-3.5.0\source3\rpc_server\src_pipe.c
    /**
     * Is a named pipe known?
     * @param[in] cli_filename    The pipe name requested by the client
     * @result            Do we want to serve this?
     */
    bool is_known_pipename(const char *cli_filename, struct ndr_syntax_id *syntax)
    {
        const char *pipename = cli_filename;
        int i;
        NTSTATUS status; 
        // 传进来的payload是\PIPE\path\xx.so这种路径，需要把PIPE头部去掉
        if (strnequal(pipename, "\\PIPE\\", 6)) {
        pipename += 5;
        }
        if (*pipename == '\\') {
        pipename += 1;
        }
        if (lp_disable_spoolss() && strequal(pipename, "spoolss")) {
            DEBUG(10, ("refusing spoolss access\n"));
            return false;
        }
        for (i=0; i.so to handle the call if it doesn't know how to handle the call internally. For instance, LSA calls are handled by librpc_lsass.so.. These shared libraries should be located in the /lib/rpc. smbd then attempts to call the init_module function within the shared library
**Relevant Link:**
    http://paper.seebug.org/307/#0-tsina-1-33359-397232819ff9a47a7b7e80a40613cfe1
    http://blogs.360.cn/blog/samba%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9Ecve-2017-7494%E5%88%86%E6%9E%90/
    http://www.freebuf.com/vuls/135624.html
    https://www.samba.org/samba/docs/man/Samba-Developers-Guide/modules.html
    https://www.samba.org/samba/docs/man/Samba-Developers-Guide/rpc-plugin.html
    https://www.samba.org/samba/docs/man/Samba-Developers-Guide/
**3\. 漏洞利用前提**
该漏洞的稳定性和适用性不高，原因是有很多前提限制
    1. 需要能登录对方SMB服务器
        1) 如果对方是share模式，则直接匿名登录
        2) 如果对方是user模式，则需要知道帐号密码
    2. 需要该登录的帐号具有Samba共享目录的写入权限，应为用于执行执行的so文件需要上传到SMB共享目录中
    3. 需要暴力猜解写入目录的绝对路径，该漏洞利用的是SMB的SMB_COM_NT_CREATE_ANDX指令，该指令要求我们传入so在目标机器上的据对物理路径
**Relevant Link:**
    http://www.sohu.com/a/143887827_332887
**4\. 临时缓解 && 修复手段**
**0x1: 通过修改配置文件临时关闭相关功能**
    smb.conf
    [global]
    nt pipesupport = no
    重启samba服务
    service smb restart
    #Or
    /etc/init.d/smb restart
**0x2: samba-4.6.3-4.5.9-4.4.13-CVE-2017-7494.patch**
    diff --git a/source3/rpc_server/srv_pipe.c b/source3/rpc_server/srv_pipe.c
    index 0633b5f..c3f0cd8 100644
    --- a/source3/rpc_server/srv_pipe.c
    +++ b/source3/rpc_server/srv_pipe.c
    @@ -475,6 +475,11 @@ bool is_known_pipename(const char *pipename, struct ndr_syntax_id *syntax)
     {
         NTSTATUS status;
    +    if (strchr(pipename, '/')) {
    +        DEBUG(1, ("Refusing open on pipe %s\n", pipename));
    +        return false;
    +    }
    +
         if (lp_disable_spoolss() && strequal(pipename, "spoolss")) {
             DEBUG(10, ("refusing spoolss access\n"));
             return false;
samba禁止传入据对路径的so路径，因为正常来说，samba只接收/lib/rpc/xxx.so这种路径
Relevant Link:
    http://www.sohu.com/a/143887827_332887
    https://download.samba.org/pub/samba/patches/security/samba-4.6.3-4.5.9-4.4.13-CVE-2017-7494.patch
    https://www.samba.org/samba/history/security.html
[i][i][i][/i][/i][/i][i][i][i]  
[/i][/i][/i][/i][/i][/i][/i][/i][/i][/i][/i]