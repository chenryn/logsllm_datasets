set a1
智能维进
setsi
自动换行
set vrap
设置软宽度
set sv=4
.....................
.....................
*Turn on WiLd menu
set wi1dmenu
星示标尺
设置命令行的高度
set cmdheight=1
显示行数
*set nu
*Do not redrav, when running macros.. lazyredraw
set 1z
设置退格
set backspace=eol,start,indent
set whichwrap+=,h,1
*Bbackspace and cursor keys wrap to
Set magicon（设置魔术）
set magic
·关闭遇到错误时的声音提示
·关阅错误信息响铃
·关闭使用可视响铃代警呼叫
---
## Page 319
第16章Shel脚本开发环境的配置和优化实践30
set novisualbell
·显示匹配的括号（[（和}]）
*How many tenths of a second to blink
set mat=2
·搜索时高亮显示搜案到的内容
set hlsearch
搜案时不区分大小写
还可以使用简写（”：setic”和“：setnoic”）
.....................
>编码设置
.....................
设置编码
设置文件编码
set fileencodings=utf-8
设置终墙编码
set termencoding=utf-8
=>其他设置byo1dboy2010
开启新行时使用智能自动缩进
set smartindent
set cin
set showmatch
·隐藏工具栏
set guioptions-=T
隐蓝菜单栏
set guioptions-m
置空储误铃声的终确代码
set vb t_vb=
·基示状态栏（默认值为1，表示无法星示状态栏）
·粘贴不换行问题的解决方法
set pastetoggle=
·设置背景色
---
## Page 320
跟老男孩学Linux运维：Shell编程实战
set background=dark
设里高亮相关
highlight Search ctermbg=blackctermfg=white guifg=white guibg=black
说明：读者只需简单了解这些参数即可，实际使用时只需把老男孩给的配置文件放
到用户的家目录下，然后退出重新登录即可使用vim。
在Shell脚本的开头自动增加解释器及作者等版权信息
func SetTitle()
if expand（*：e*）==*sh
call setline(1,*#:/bin/bash*)
call setline(2,*#Author:oldboy*)
cal1 set1ine(3,*#B1og:http://o1dboy.blog.51cto.com*)
call setline(4,*#Timei*.strftime(*&F r*))
call setline(6,*#version:V1.0*)
callsetline(7,*Description:This isa test script.*)
endif
endfunc
去掉注释后的配置（推荐使用此配置）如下：
[root@oldboy-]cat.vimrc-nozhushi
set nocompatible
set history=100
filetype on
filetype plugin on
filetype indent on
set autoread
set mouse=a
syntax enable
set cursorline
hi cursorline guibg=#ooffo0
hi CursorColunn guibg=#ooff00
set nofen
set fd1=0
qenpuedxe 108
set tabstop-4
=doeos
set smarttab
set ai
set81
---
## Page 321
第16章Shell脚本开发环填的配置和优化实践33
set wrap
set sw=4
set wildnenu
set ruler
set cndheight=1
set1z
set backspace=eol,start,indent
set whichwrap+=,h,1
set magic
set noerrorbells
set showmatch
setnat=2
set ignorecase
set hlsearch
set
encoding=utf-8
set fileencodings=utf-8
set termencodingutf-8
set snartindent
set cin
set showmatch
set guioptions-=T
set guioptions-=m
set vb t_vb
set laststatus=2
set pastetoggle=
set background-dark
highlight Search ctermbg=black ctermfg=white guifg=white guibg=black
func SetTitle()
if expand(*8:e*)==*sh
call setline(1,*#1/bin/bash*)
call setline(2.*#Author:oldboy*)
cal1 set1ine(3,*#Blog:http:/oldboy.blog.51cto.com*)
call setline（4.*#Time:*.strftime（*F r*）)
（（.）x.）s
cal1 setline(6,*aVersion:V1.0*)
call setline(7,*#Description:This is a test script.*)
endfunc
endir
说明：如果不方便敲出来，可以在网上搜索一下.vimrc的配置，然后对着本文修
改即可，或者加入本书前言部分提到的QQ群获取。
vim路径等配置知识的整理见表16-1。
---
## Page 322
304跟老男孩学Linux运维：Shell编程实战
表16-1vim路径等配置知识
相关配置文件
功能捐述
viminfo
用户使用vim的操作历史
.vimrc
当前用户vim的配置文件
/etc/vimrc
系统全局vim的配置文件
/ust/share/vim/vim74/colors/
配色模板文件存放路径
16.3让配置文件.vimrc生效
将vim的配置文件.vimrc上传到Linux系统的“_”目录下，然后退出 SSH客户端
重新登录，即可应用.vimrc里对应的设置。示例如下：
[root@o1dboy scripts]#11-/.vimrc
-rw-r--r--1rootroot25959月
提示：同样适用于普通用户。
重新登录后，当使用vim时就会自动加载.vimrc设定的配置。
16.4使用vim编辑器进行编码测试
16.4.1代码自动缩进功能
图16-1显示了使用代码自动缩进功能的效果，这
个自动缩进的功能非常好用，当输人循环及条件结构语
句等代码时，系统会自动将输人语句的关键字及命令代
码缩进到合理的位置，可以看到，vim的配置是以两个
空格为缩进宽度（.vimrc里设置的）的。
Y
图16-1代码自动缩进功能说明
16.4.2代码颜色高亮显示功能说明
代码颜色高亮显示也是一个非常好的功能，可以通过它区分字符、变量、循环等很
多不同的 Shell脚本元素。例如当编写的代码出现错误
时，对应的代码高亮颜色就会和正确时的不同，开发者
st/bsn/b
可以根据代码的高亮颜色对Shell脚本进行调试，提升
编码的效率，减少编码的错误，图16-2是故意把seq
5中的后反引号去掉后的截图，可以看到整个for循环
图16-2代码颜色高亮显示功能
---
## Page 323
第16章Shel脚本开发环境的配置和优化实践305
体的关键字（do和done）颜色立刻变得不一致（正常是黄色，现在变成红色）了，从面
可以判断出脚本对应不同颜色的代码周边有错误。
16.5vim配置文件的自动增加版权功能
当执行“vimoldboy.sh”编辑脚本时，只要
ntiar:olto
是以sh为扩展名的，就会自动增加版权信息功
能，如图16-3所示。
escriptieea test serip.
图16-3在脚本开头自动增加版权的功能
16.6vim配置文件的代码折叠功能
vim非常强大，只不过对有些功能需要进行额外配置，下面就演示一下在代码量较大
时比较有用的高级功能一代码折叠（依赖vimrc配置，当然也可以以命令模式执行）。
在命令模式下，可以把光标定位到当前的第2行，然后执行zf3j命令，便可将第2
行及其下的3行缩进，其他缩进也是如此，如图16-4所示。
1216：i[k
图16-4代码折叠后的效果
若把光标放到对应折叠后的行上，按空格键即可展开上述折叠的行，如图16-5所示。
ehind/(print F)slave.1og））
f[“Ya-]
het comt1
16行：if [eot ne 0]:the
图16-5展开折叠代码的效果
16.7vim编辑器批量缩进及缩进调整技巧
有时我们从外部复制部分Shell代码到当前脚本后发现缩进是乱的，如图16-6
所示。
---
## Page 324
306跟老男孩学Linux运维：Shel编程实战
chc
/proc/sys/et/ip
else
Lsifr//
图16-6缩进是乱的图形展示
此时可以将vim编辑器调整为命令模式（按Esc键），然后移动键盘上下键将光标定
位到要调整的行开头，如图16-7所示。
else
/bitu
图16-7定位光标图示
接下来输人“v”（可视化缩写），然后用键盘移动光标选定要调整的多行，如图16-8
所示。
1.00113
erver./bie/true
出
图16-8调整缩进命令展示
最后按“-”键即可将代码调整为规整的格式，效果如图16-9所示。
stop
le/arp
图16-9最后调整后的结果
---
## Page 325
最后再根据代码需要进行编辑。
16.8其他vim配置文件功能说明
vim还可以实现显示当前行、显示光标的坐标位置等功能，除此之外，还有搜索、
割裂窗口等更多功能，这些就留给读者自己去尝试吧，图16-10为vim显示当前行及光
标的坐标位置图。
!/bin/
图16-10vim显示当前行及光标的坐标位置图
16.9vim编辑器常用操作技巧
老男孩将vi/vim编辑器常用的操作技巧整理成表16-2中的内容，供读者参考。
表16-2vi/vim编辑器常用操作技巧
命
零
说明
普通模式：移动光标的操作
G或（Shift+g)
将光标移动到文件的最后一行
8g
将光标移动到文件的第一行，等价于1gg或1G
0
数字0，表示将光标从所在位置移动到当前行的开头
s
从光标所在位置将光标移动到当前行的结尾
n
n为数字，为回车键，表示将光标从当前位置向下移动n行
ngg
n为数字，表示移动到文件的第n行，如11g表示移动到第11行，可配合”set
nu”查看，同nG
H
光标移动到当前窗口最上方的那一行
M
光标移动到当前窗口中间的那一行
L
光标移动到当前窗口最下方的那一行
h 或 (·)
光标向左移动一个字符
j或（↓）
光标向下移动一个字符
k或（↑）
光标向上移动一个字符
1或（→)
光标向右移动一个字符
---
## Page 326
308跟老男孩学 Linux运维：Shell 编程实战
（续）
命
令
说明
普通模式：搜索与替换操作
/oldboy
从光标位置开始。向下寻找名为oldboy的字符串
?oldboy
从光标位置开始，向上寻找名为oldboy的字符申
从光标位置开始，向下重复前一个搜索的动作
N
从光标位置开始，向上重复前一个搜索的动作
g/A/v/B/g
把符合A的内容全部替换为B，斜线为分隔符，可以用@、等替代
:%s/A/B/g
把符合A的内容全部替换为B，斜线为分隔符，可以用@、等替代
:n1,n2s/A/B/gc
m1、n2为数字，表示在第n1行和n2行间寻找A，且用B替换