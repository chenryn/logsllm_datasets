7,500
4
14
57
267
1,134
2
6
25
377
711
2,110
7,721
6
24
103
465
2,039
8
7
27
374
707
2,089
7,508
3
9
36
165
-
Speed up
1
1
1
1
1
1
1
1
1
1
1
1
2
1.67
1.80
1.80
1.81
1.81
1.78
1.83
1.79
1.87
1.75
1.58
4
1.67
1.67
1.79
1.79
1.82
1.84
2.75
3.07
3.39
3.05
2.85
8
1.43
1.43
1.82
1.82
1.83
1.83
3.67
4.78
5.36
4.94
-
Efﬁciency
2
4
0.83
0.90
0.90
0.91
0.91
0.89
0.92
0.90
0.94
0.88
0.79
0.84
0.84
0.90
0.90
0.91
0.92
0.69
0.77
0.85
0.76
0.71
8
0.72
0.72
0.91
0.91
0.92
0.92
0.46
0.60
0.67
0.62
-
1
1
1
1
1
1
1
1
1
1
1
1
Table 2. Performance of Parallel Randomization on a Sun Enterprise and SGI Origin 2000
natural to extend the presented approach for parallel ran-
domization from subsets of columns to subsets of blocks,
even without the need to partition according to Lemma 4.1,
since the Kronecker representations for different blocks do
not interfere.
Consequently, an implementation of the abstract functional
interface that is used by the proposed parallel randomization
solver is conceptually straightforward. Once given, our par-
allel randomization template allows to derive a parallel ran-
domization for hierarchical Kronecker representations with-
out further effort.
Matrix diagrams [12, 11] are a data structure that combines
a Kronecker representation of R with the DAG representa-
tion of S into a single data structure. A recent extension by
A. Miner to canonical matrix diagrams makes this an inter-
esting theoretical structure like binary decision diagrams.
More importantly, the original main improvement of ma-
trix diagrams was to provide fast matrix access by columns
to allow for faster Gauss-Seidel type iterations than pro-
posed in [6] with structured representations. This support
for matrix access by columns suggests that an implemen-
tation of an abstract functional interface with an iterator as
described in Sect. 5 is conceptually straightforward. Conse-
quently and as for hierarchical Kronecker representations,
for a given AFI implementation by matrix diagrams, the
parallel randomization solver can be compiled by help of
the C++ template, we developed for the approach presented
here.
8. Conclusions
We presented a parallel randomization method for a mod-
ular Kronecker representation and its implementation with
Posix threads for a shared memory multiprocessor architec-
ture. The Kronecker representation is modiﬁed to allow for
parallel computations to proceed without write conﬂicts and
with an efﬁcient matrix-vector multiplication scheme.
A dependability model of a workstation cluster, which is
known from the literature, is analyzed to illustrate appli-
cability of the approach. The performance of the multi-
threaded randomization is measured for state spaces up to
26 million states on two platforms, a Sun Enterprise with 2
processors and a SGI Origin 2000 with 16 processors.
The new algorithm is implemented in a way that accommo-
dates the state-level abstract functional interface of M¨obius
and the textual interfaces of the APNN toolbox, such that
its integration into the numerical analysis package and the
CSL modelchecker of the APNN toolbox is going to be
ﬁnished in due time. The clear separation of the parallel
solver and the functional interface of the Kronecker repre-
sentation makes extensions to parallel iterative techniques
for stationary analysis straightforward to establish. Further-
more, the multithreaded solver template is able to perform
with any implementation of the abstract functional inter-
face that provides iterators for subsets of columns. Hence
the randomization solver can perform with other represen-
tations of CTMCs as well, e.g., the classic sparse matrix
representation, the disk-based approach of [14] or the on-
the-ﬂy approach of [15].
Acknowledgements The possibility to perform experi-
ments on the SGI Origin 2000 at the Chair of Systems Anal-
ysis, Prof. H.P. Schwefel, Universit¨at Dortmund, is kindly
acknowledged as well as the work of 4 reviewers whose
comments helped to improve the paper.
References
[1] C. Baier, B. Haverkort, H. Hermanns, and J.P. Ka-
toen. On the logical characterisation of performabil-
ity results. In Automata Languages and Programming
(ICALP’2000), LNCS 1853, Springer, 2000.
[2] D.P. Bertsekas and J. N. Tsitsiklis. Parallel and dis-
tributed computing - numerical methods. Prentice
Hall, 1989.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:39 UTC from IEEE Xplore.  Restrictions apply. 
[3] P. Buchholz. Markovian process algebra: Composi-
tion and equivalence.
In U. Herzog and M. Rettel-
bach, editors, Proc. of the 2nd Work. on Process Alge-
bras and Performance Modelling. Arbeitsberichte des
IMMD, University of Erlangen, no. 27, 1994.
[4] P. Buchholz. Hierarchical Markovian models: Sym-
metries and aggregation. Performance Evaluation,
22:93–110, 1995.
[5] P. Buchholz. Structured analysis approaches for large
Applied Numerical Mathematics,
Markov chains.
31(4):375–404, 1999.
[6] P. Buchholz, G. Ciardo, S. Donatelli, and P. Kem-
per. Complexity of memory-efﬁcient Kronecker op-
erations with applications to the solution of Markov
models. INFORMS J. on Computing, 12(3), 2000.
[7] P. Buchholz, M. Fischer, and P Kemper. Distributed
steady state analysis using Kronecker algebra. In [27].
[8] P. Buchholz, J.P. Katoen, P. Kemper, and C. Tepper.
Model-checking large structured Markov chains. sub-
mitted for publication, 2001.
[9] P. Buchholz, P. Kemper, and C. Tepper. New fea-
tures in the APNN toolbox.
In P. Kemper, editor,
Tools of Aachen 2001, int. Multiconference on Mea-
surement, Modelling and Evaluation of Computer-
Communication Systems, Tech. report No. 760/2001.
Universit¨at Dortmund, FB Informatik, 2001.
[10] G. Chiola, C. Dutheillet, G. Franceschinis, and
S. Haddad. Stochastic well-formed coloured nets for
symmetric modelling applications. IEEE Transactions
on Computers, 42(11):1343–1360, Nov 1993.
[11] G. Ciardo and A. Miner. A data structure for the ef-
ﬁcient Kronecker solution of GSPNs. In P. Buchholz
and M. Silva, editors, Proc. 8th int. Workshop Petri
Nets and Performance Models, IEEE CS Press, 1999.
[12] G. Ciardo and A. Miner. Efﬁcient reachability set
generation and storage using decision diagrams.
In
S. Donatelli and J. Kleijn, editors, Proc. 20th int. Conf.
Application and Theory of Petri Nets. LNCS 1639,
Springer, 1999.
[13] G. Clark, T. Courtney, D. Daly, D. Deavours, S. De-
risavi, J. M. Doyle, W. H. Sanders, and P. Webster.
The M¨obius modeling tool. In Proc. 9th Int. Workshop
on Petri Nets and Performance Models (PNPM’01),
IEEE CS Press, 2001.
[14] D. D. Deavours and W. H. Sanders. An efﬁcient disk-
based tool for solving very large Markov models. In
Proc. 9th Int. Conf. Modelling Techniques and Tools
for Computer Performance Evaluation (TOOLS ’97),
LNCS 1245, Springer, 1997.
[15] D. D. Deavours and W. H. Sanders.
‘On-the-ﬂy’
solution techniques for stochastic Petri nets and ex-
tensions.
IEEE Trans. on Software Engineering,
24(10):889–902, 1998.
[16] S. Derivasi, P. Kemper, and W.H. Sanders.
The
M¨obius state-level abstract functional interface.
In
Proc. 12th Int. Conf. Modelling Tools and Techniques
for Computer and Communication System Perfor-
mance Evaluation (Performance TOOLS’02), LNCS
2324. Springer, 2001.
[17] S. Donatelli. Superposed generalized stochastic Petri
nets: deﬁnition and efﬁcient solution. In Proc. 15th
int. Conf. Application and Theory of Petri nets, LNCS
815, Springer, 1994.
[18] P. Fernandes, B. Plateau, and W.J. Stewart. Efﬁ-
cient descriptor-vector multiplication in stochastic au-
tomata networks. JACM, 45(3):381–414, 1998.
[19] M. Fischer and P. Kemper. Distributed numerical
Markov chain analysis.
In Y. Cotronis and J. Don-
garra, editors, Proc. 8th Euro PVM/MPI 2001, LNCS
2131, Springer, 2001.
[20] B.L. Fox and P.W. Glynn. Computing poisson proba-
bilities. Comm. ACM, 31:440–445, 1988.
[21] B. Haverkort, H. Hermanns, and J.P. Katoen. The use
of model checking techniques for quantitative depend-
ability evaluation. In IEEE Symp. on Reliable and Dis-
tributed Systems, IEEE CS Press, 2000.
[22] H. Hermanns, J. Meyer-Kayser, and M. Siegle. Multi
terminal binary decision diagrams to represent and
analyse continuous time Markov chains. In [27].
[23] A. Jensen. Markoff chains as an aid in the study of
markoff processes. Skand. Akuarietidskrift, 36:87–91,
1953.
[24] J. P. Katoen, M. Kwiatkowska, G. Norman, and
D. Parker. Faster and symbolic CTMC model check-
ing.
In Proc. PAPM-PROBMIV’01, LNCS 2165,
Springer, 2001.
[25] W. Knottenbelt and P. G. Harrison. Distributed disk-
based solution techniques for large Markov models. In
[27].
[26] V. Migallon, J. Penades, and D.B. Szyld. Experi-
mental study of parallel iterative solutions of Markov
chains with block partitions. In [27].
[27] B. Plateau, W. J. Stewart, and M. Silva, editors.
Proc. 3rd Int. Workshop on the Numerical Solution of
Markov Chains. Prensas Universitarias de Zaragoza,
1999.
[28] W. H. Sanders and J. F. Meyer. Reduced base model
construction methods for stochastic activity networks.
IEEE Journal on Selected Areas in Communications,
9(1):25–36, January 1991.
[29] Roger B. Sidje and William J. Stewart. A survey of
methods for computing large sparse matrix exponen-
tials arising in Markov chains. Computational Statis-
tics and Data Analysis, 29:345–368, 1999.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:39 UTC from IEEE Xplore.  Restrictions apply.