---
## Page 424
习题解答
子查询规则
在本章的后续内容中看到子查询时，请把这些规则牢记于心。
解答
SQL的子查询规则
SQL的子查询规则
SELECT
子查询可能出现在查询中
子查询都是单一
语
的四个地方：
句。
SELECL子句、选出
子查询总是位于
COLUMNLISI作为
PARENTHESES里。
其中一列、FROM子句
与HAVING子句中。
子查询没有属于自己的
SEMICOLON。就像一般
子查询能与INSERI
DELETE. UPDATE
查询一样，要等到整个查询结
束，出现EN，它后面才会有
当然还有SELECT一起
SEMICOLON
使用。
没有问题
没有蠢问题
问：
返回一个？还是可以返回多个？有什幺正式规定吗？
也就是一个列里的一行。而后，外层查询才能利用这个值
与列中的其他值进行比较。
例外情况。大部分时候，子查询只需要返回单一值。
问：如果你的子查询真的返回多个值，但使用
值”，范例不是返回了装满结果的表了吗？
的WHERE子句却不可以接受多个值，会发生什么事？
比较运算符，例如=，就只能接受一个值来与列中的其他
值进行比较。
392
第9章
---
## Page 425
子查询
是啊，这些规则是很闪亮动人，不过我真正想要知递的是血
何让查询结票中的名称短一点，我不想看到mc.ast_name这类
名称。你有透合的规则吗？
事实上，有两件事可以协助你清理这些杂
乱的名称。
你可以为SELECT选择的列创建别名，查询所产生的
结果表立马就会变得干净许多。
以下是我们刚创建的子查询，但加上了简化版的列别
名。
my_contactsfirst_name列
*my_contacts6的（ast_name列别
在壹询结果里的别名
名则是“（astname”
是“Sirstname”
SELECT mc.first_name AS firstname, mc.last_name AS lastname,
my_contacts的phone列
x7mc.phone AS phone, jc.title AS jobtitle
在查询结果里的别名将
是“phone”…….·依此类
FROM job_current AS jc NATURAL JOIN my_contacts
推。你知道其他列的变
WHERE jobtitle IN (SELECT titleFROM job_listings);
化方式了！
请记住，AS是
可送的关键字，
这里就是查询给我
创建别名时也可
们的结果。
以省略AS。
请注意，使用列别名后
既然只是临时性的别名，就表示不会
壹询结果显得更容易理
影响原始表或列的名称。
解了。
firstname
lastname
phone
jobtitle
Joe
Lonnigan
（555)555-3214
Cook
Wendy
Hillerman
(555)555-8976
Waiter
Sean
Miller
(555) 555-4443
WebDesigner
Jared
Callaway
(555) 555-5674
WebDeveloper
Juan
Garza
(555)555-0098
WebDeveloper
当前位置
393
---
## Page 426
构造你的子查询
子查询的构造流程
子查询的棘手部分并非结构，而是找出需要作为子查询的查询，甚至是是否
需要子查询。
分析查询就像分析一个问题，从问题中找出自已知道的事物（例如表名与列
名），然后分解问题。
我们来尝试分析一个想要询问数据库的问题以及如何从分析中构建查询。首
先，问问自己：
在我所有的联给人里，谁赚
的钱最多？
分解问题。
重新描述这个问题，换成表与列的名称。
“谁”表示需要my_contacts里的first_name与last
name列。“钱最多”表示需要job_currenet表的MAx值。
在我所有的联络人里，谁赚的钱最多？
My_contacts 表的sitst_
Job_catrenet 表的
name 与last_name列
MAX(salaty)
找出能够回答部分问题的查询。
既然我们创建的是非关联子查询（noncorrelatedsubquery），我们可
以挑出部分问题并建立回答该部分的查询。
MAX（salary）似平是个不错的选择。
SELECT MAx(salary)FROMjobcurrent;
还记得关键字MAX吗：这个
函数返回括号中指定列的最
大值。
394
第9章
---
## Page 427
子查询
继续分解查询。
查询的第一个部分也很简单，只需要选出姓（last_name）与名
(first_name):
SELEcTmc.first_name,mc.last_name
FROM my_contacts AS mc;
送出姓与名
最后，找出串起两个查询的方式。
我们不仅需要my_contacts里记载的人名，还需要知道他们
的薪水，才能比较出最高的薪资（MAX（salary））。我们需
要一个自然内联接来找出每个人的薪资信息：
SELECTmC.first
name,mc.last
name,jc.salary
使用NATURAL3OJN.找出每
FROMmy_contactsASmc
个人的薪资。
NATURALJOINjob_currentASjc;
接下来加上WHERE子句以连接两段查询。
我们创建了一个回答这个问题的大型查询：“谁赚的钱最多？”
这就是我们刚才做的事
找出每个人的薪资。
SELEcT mc.first_name,mc.last_name,
jc.salary
FROMmy_contacts ASmc NATURALJOINjob_currentAS jc
WHEREjc.SalarY=
(SELECTMAx(jc.salary)FROMjob_currentjc);
这里是问题的第一部分，现在成为子查询，用
于找出最高薪资值。来自子壹询的值将与外层
哦，原来是Mike？我应该率点悲到
壹询进行比较，最后取得结果。
的。他不曾领过支票。
mc.first_name
mc.last_name
jc.salary
Mike
Scala
187000
当前位置
395
---
## Page 428
设计查询的方式不只一种
看起来，不用子查沟也能完成工作。
没错，子查询不是唯一的方式。
同样目标也能利用自然内联接和LIMIT
命令达成。就像SQL的大部分功能一样，
总是有许多方式能实现相同目标。
动动
设计另一个查询，一样能找出Greg所有的联络人里最会赚
钱的人。
我不关心是否有很多种实现相同
目标的方式，我只想知道最棒的
方式。至少需要给我一个选择某
种方式的理由。
好问题。
你可以先看一下第400页上的“SQL真
情指数”。
396
第9章
---
## Page 429
子查询
作为欲选取列的子查询
子查询能用作SELECT语句中选取的列之一。请见下例。
SELECTmC.first
name,mc.last
name,
(SELECT state
FROMzip_code
我们设定了列别
名“state”。
WHEREmc.zip_code=zip_code)AS state
FROMmy_contactsmc;
分解上述查询要先从子查询着手。子查询只是单纯地
从zip_code表中比对出邮政编码（zipcode）与相应的州
名而已。
简单地说，这段查询的用途是：
如果子查询放在
查找my_contacts表的每一行，取出每一行的姓、名、州
名等信息（关于州名的部分，我们利用子查询比对my
SELECT语句中，
contacts与zip_code表记录的邮政编码，再从zip_
用于表示某个欲选
code表中取出州名信息）。
取的列，则一次只
子查询应该只能返回一个值，所以每次子查询返回一个值，
能从一列返回一个
而整个查询也跟着返回一行。以下即为查询结果：
值。
mc.first_name
mc.last_name
state
Joe
Lonnigan
TX
Wendy
Hillerman
CA
Sean
Miller
NY
Jared
Callaway
NJ
Juan
Garza
CA
当前位置
397
---
## Page 430
子查询搭配自然联接
范例：子查询搭配自然联接
Greg的朋友Andy最近在吹嘘他的待遇有多么好。虽然Andy没有讲出具
体数字，但Greg觉得他的数据库里应该有这项信息。他利用Andy的电
子邮件地址做了一次快速的NATURALJOIN查询。
SELECT jc.salary
FROM my_contacts mc NATURAL JOIN job_current jc
这个壹询将返回Andy的弱资，
WHERE email = 'andy@weatherorama. com* ;
是个单一值。
Greg发现这个查询只返回单一值。与其直接运行查询，再把查
询结果放到另一个查询里，他决定把它变成子查询。
这个部分是内层
所以Greg写了一个查询，作用包括：
查询。
取得Andy的薪资
这个部分要用到比较
与其他人的薪资进行比较
运算符“>”
返回某些人的姓名
哪些人的薪资比Andy的高。c比Andg的资雯
这是个很长的查询，
但能找出某些我不需要知
高。
道的事情，并在后台与数
据厚的其他内容比较。
以下则是外层查询
：
SELECT mc.first_name,
FROM
my_contacts AS mc NATURAL JOIN job_current AS jc
WHERE
jc.salary >
ANDY'S SALARY QUERY WILL GO HERE
398
第9章
---
## Page 431
子查询
非关联子查询
查询的目的是取
拼图一块一块成型，构成整个查询。数
得姓名与薪资。
据库软件先处理一次内层查询，然后使
用内层查询返回的值找出外层查询的结
SELECT mc.first_name
果。
FROM
RDBMS全第二个处理这个部
分。
my_contacts AS mc NATuRAL JoIN job_current AS jc
WHERE
只呈现资高于Andy的人。
jc.salary>
(SELBCT jC.Salary
这两个壹询会分别被
FROM my_contacts mc NATURAL JOIN job_current jc
RDBMS处理。
下表是部分查询结果。我们并未使用ORDER
BY，所以查询结果并未按任何顺序排列。
能取得Andy的薪资的子壹询
以供外层查询比较。
mc.first_name
mc.last_name
jc.salary
这部分会首先处理。
Gus
Logan
46500
Bruce
Hill
78000
Teresa
Semel
48000
Randy
Wright
49000
Julie
Moore
120000
如果子查询可以独立运
目前我们看到的所有子查询都是非关联子查询
行且不会引用外层查询
(noncorrelated subquery）。软件先处理内层查询，查询结果再用
于外层查询的WHERE子句。但是内层查询完全不需依赖外层查
的任何结果，即称为非
询的值，它本身就是一个可以完全独立运行的查询。
关联子查询。
个
外层查询较晚处理。
它的奎询结果取决于
（如果你在谈话中提到“非
内层查询的值。
OUTER query
关联子查询”，没有接触过
SQL的人会觉得你很神）
iNNERquery
内层查询可以单独运
行，连接会先处理这
个部分。
.当前位置
399
---
## Page 432
查询的最佳方式
SQL真情指数
本周主题：
在众多选择中挑出最好的查询方式
HeadFirstSQL：欢迎本周的来宾，SQL。谢谢
案突然就找到了。重点在于问对方式。
你今天抽空来做独家访谈，我知道最近你面对不
HeadFirstSQL：所以说，重点其实是响应的速
少难题。
度。速度就是我们选择询问方式的关键吗？
SQL：难题？只是你这么形容的吧？我会说一切
SQL：当然！一切都取决于你们问我的问题。我
很麻烦、很让人头痛、很难量化同时文不断地反
只是等在这边准备回答大家的问题，只要问题精
复。
确。
HeadFirstSQL：嗯，是啊。其实这也是本周访
HeadFirstSQL：速度？速度就是秘密？
谈的重点。你一直收到关于SQL太灵活的抱怨，
SQL：听好，我已经给你提示了。数据库会
当我们问你问题时，你给了我们太多可用的询问
增长。大家都希望自己的查询的响应方式越简
方式。
单越好。例如，如果有人问我“Whodunnit”，
SQL：我承认自已很灵活，而且大家可以用不同
就会让我思考半天才能转换成
方式问我问题，最后都能得出相同答案。
“这件事是谁做的”。让我尽可能不用思考，给
HeadFirstSQL：有人认为这是优柔寡断。
我简单的问题，答案自然就会很快出现。
SQL：我不想为自已辩解，我文不是坏人。
HeadFirstSQL：原来如此。不过该怎么判断问
HeadFirstSQL：当然不是，我们都知道你不是
题是否简单呢？
坏人，只不过有点...不够严谨。
SQL：这个嘛，交叉联接是件非常浪费时间的
SQL：哼！不严谨！我受够了。（起身准备走
事，关联子查询也会拖慢速度。
人）
HeadFirstSQL：还有吗？
HeadFirstSQL：别走、别走！我们只是想要
SQL：.....
一些答案。有时候你会让我们用不同方式询问相
HeadFirstSQL：拜托，请你多说一点。
同问题。
SQL：经验很重要。有时候最好创建测试数据库
SQL：是啊，有什么不可以吗？
来尝试各种查询方式，比较查询运行的时间。对
HeadFirstSQL：没有，没什么不可以的，我
了，联接比子查询更有效率。
们只是想知道应该问什么。在你会提供相同答案
HeadFirstSQL：谢谢你，SQL。没想到这就是
的前提下，询问的方式真的很重要吗？
天大的秘密..
SQL：当然重要啦！还用问吗？有时候你们的问
SQL：对啦，谢谢你浪费我的时间。
题会让我思考很久才找到答案；有时候，砰！答
400
第9章
---
## Page 433
子查询
子查询工坊
阅读下列情境。遵循指示设计两个查询，然后把它们结合成一个子查询。
.Greg希望从job_current表中计算出WebDeveloper的平均薪资。然后他想比较每
位网站设计员的实际薪资与平均薪资。薪资少于平均水平的人或许更有兴趣换新工作，
他们是Greg想要锁定的潜在客户。
请设计一个查询，从job_current表中取得网站设计员的平均薪资。
2Greg需要知道job_current表中每位网站设计员的姓、名与薪资。
请设计一个查询，取得每位网站设计员的姓、名及记录在job_current表中的薪资。
3.Greg使用平均薪资（有一点数学计算）作为子查询，列出每位网站设计员及其薪资与
平均薪资间的差距。
结合上面的两个查询。使用子查询作为欲选择的列之一
当前位置
401
---
## Page 434
子查询工坊解答
子查询工坊解答
阅读下列情境。遵循指示设计两个查询，然后把它们结合成一个子查询，
Greg希望从job_current表中计算出WebDeveloper的平均薪资。然后他想比较每
位网站设计员的实际薪资与平均薪资。薪资少于平均水平的人或许更有兴趣换新工作，
他们是Greg想要锁定的潜在客户。
请设计一个查询，从job_current表中取得网站设计员的平均薪资。
2Greg需要知道job_current表中每位网站设计员的姓、名与薪资。
请设计一个查询，取得每位网站设计员的姓、名及记录在job_current表中的薪资。
SELECT mc.fitst_name,mc.last_name, jc.salary
FROM my_contacts mc NATURAL JOJN jo6_curvent jc
WHERE jc.title =‘We6 Developet:
5.Greg使用平均薪资（有一点数学计算）作为子查询，列出每位网站设计员及其薪资与
平均薪资间的差距。
结合上面的两个查询。使用子查询作为欲选择的列之一。
SELECT mc fitst_name, mc last_mame, jc.salary,
FROM my_contacts mc NATURAL 3OJN jo6_cxrtent jc
WHERE jc.title =‘We6 Developet';
402
第9章
---
## Page 435
子查询
有多个值的非关联子查询：IN、NOTIN
回头看看第387页上Greg尝试的第一个查询，协助他找出符合其职缺
列表（job_listings）需求的职务。这个查询接受整个title集
（由子查询里的SELECT返回）并评估job_current表中的每一行，
寻找潜在的匹配记录。
SELECT mc.first_name, mc.last_name, mc.phone, jc.title
FROM job_current AS jc NATURAL JOIN my_contacts AS mc
WHERE jc.title
(IN)(SELECT title FROM job_listings);
R
N根据子查询返回的整个结果集来评
估ic.title每一行的值。
使用NOTIN可协助Greg找出不符合职缺列表的职务。同样接受由子查询里
的SELECT返回的完整title集，并根据这个数据集评估job_current
表中的每一行，返回不匹配job_current的记录。现在Greg可以专心
为这些职务类型寻找更多职缺。
SELECT mc.first_name, mc.last_name, mc.phone, jc.title
FROM job_current jc NATURAL JOIN my_contacts mc
WHERE jc.title NOT IN) (SELECT title FROM job_listings);
NOTJN返园任何jo6_cuttent里未
存储在职缺列表中的职务。
这种查询称为非关联子查询，IN或NOTIN在其中根据子查
非关联子查询使用
询的结果检查外层查询，比较两者是否相符。
IN或NOTIN来
检查子查询返回的
中动动赔
值是否为集合的成员
之一。
直接输入要比较的值不就行了，何必
使用子查询？
当前位置
403