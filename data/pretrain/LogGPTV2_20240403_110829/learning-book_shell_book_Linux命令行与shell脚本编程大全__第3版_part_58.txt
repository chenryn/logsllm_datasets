346
第16章控制脚本
[1] +Done
nice -n -10 ./teat4.ah > test4.out
nice命令阻止普通系统用户来提高命令的优先级。注意，指定的作业的确运行了，但是试
图使用nice命令提高其优先级的操作却失败了。
nice命令的-n选项并不是必须的，只需要在破折号后面跟上优先级就行了。
nice -10./test4.sh > test4.out &
[1.] 4993
puoqu*prdd*prd o- c66s d- ed ≤
4993  4721 10/bin/bash ./test4.sh
GO IN GIdd GId
$
16.5.2renice命令
有时你想改变系统上已运行命令的优先级。这正是renice命令可以做到的。它允许你指定
运行进程的PID来改变它的优先级。
S./test11.sh &
[1]5055
puo'ru*prdd*prd o- ssos d- gd 
QIddGId
NI CMD
50554721
 0/bin/bash ./test11.sh
$ renice -n 10 -p 5055
5055: old priority 0, nev priority 10
$ p8 -p 5055 -o pid,ppid,ni,cnd
5055 4721  10/bin/bash ./test11.eh
PID PPID NI CMD
renice命令会自动更新当前运行进程的调度优先级。和nice命令一样，renice命令也有一
些限制：
只能对属于你的进程执行renice；
口只能通过renice降低进程的优先级；
口root用户可以通过renice来任意调整进程的优先级。
如果想完全控制运行进程，必须以root账户身份登录或使用sudo命令。
16.6定时运行作业
当你开始使用脚本时，可能会想要在某个预设时间运行脚本，这通常是在你不在场的时候。
Linux系统提供了多个在预选时间运行脚本的方法：at命令和cron表。每个方法都使用不同的技
术来安排脚本的运行时间和频率。接下来会依次介绍这些方法。
---
## Page 362
16.6定时运行作业
347
16.6.1用at命令来计划执行作业
at命令允许指定Linux系统何时运行脚本。at命令会将作业提交到队列中，指定shell何时运
行该作业。at的守护进程atd会以后台模式运行，检查作业队列来运行作业。大多数Linmux发行
版会在启动时运行此守护进程。
16
atd守护进程会检查系统上的一个特殊目录（通常位于/varspool/at）来获取用at命令提交的
作业。默认情况下，atd守护进程会每60秒检查一下这个目录。有作业时，atc守护进程会检查
作业设置运行的时间。如果时间跟当前时间匹配，atc守护进程就会运行此作业。
后面几节会介绍如何用at命令提交要运行的作业以及如何管理这些作业。
1.at命令的格式
at命令的基本格式非常简单：
at [-ff/lenane] t.me
默认情况下，at命令会将sTDIN的输入放到队列中。你可以用-r参数来指定用于读取命令（脚
本文件）的文件名。
time参数指定了Linux系统何时运行该作业。如果你指定的时间已经错过，at命令会在第二
天的那个时间运行指定的作业。
在如何指定时间这个问题上，你可以非常灵活。at命令能识别多种不同的时间格式。
口标准的小时和分钟格式，比如10:15。
 AM/PM指示符, 比如10:15 PM
口特定可命名时间，比如inow、noon、midnight或者teatime（4 PM）。
除了指定运行作业的时间，也可以通过不同的日期格式指定特定的日期。
标准日期格式，比如MMDDYY、MM/DD/YY或DD.MM.YY。
口文本日期，比如Jul4或Dec25，加不加年份均可。
口你也可以指定时间增量。
·当前时间+25 min
■明天10:15 PM
■10:15+7天
在你使用at命令时，该作业会被提交到作业队列（job queue）。作业队列会保存通过at命令
提交的待处理的作业。针对不同优先级，存在26种不同的作业队列。作业队列通常用小写字母a-Z
和大写字母A-Z来指代。
说明在几年前，也可以使用batch命令在指定时闻执行某个脚本。batch命令很特别，你可以
安排脚本在系统处于低负载时运行。但现在batch命令只不过是一个脚本而已
（/usr/bin/batch），它会调用at命令并将作业提交到b队列中。
作业队列的字母排序越高，作业运行的优先级就越低（更高的nice值）。默认情况下，at的
---
## Page 363
第16章控制脚本
作业会被提交到。作业队列。如果想以更高优先级运行作业，可以用-q参数指定不同的队列字母。
2.获取作业的输出
当作业在Linux系统上运行时，显示器并不会关联到该作业。取而代之的是，Linux系统会将
提交该作业的用户的电子邮件地址作为STDOUT和STDERR。任何发到STDOUT或STDERR的输出都
会通过邮件系统发送给该用户。
这里有个在CentOS发行版中使用at命令安排作业执行的例子。
S cat test13.ah
1/bin/bash
 Test using at command
echo *rhia script ran at $(date +lB&d, 4T) *
echo
sleep 5
S at -f test13.sh nov
job 7 at 2015-07-14 12:38
at命令会显示分配给作业的作业号以及为作业安排的运行时间。-f选项指明使用哪个脚本
文件，now指示at命令立刻执行该脚本。
使用e-mail作为at命令的输出极其不便。at命令利用sencmai1应用程序来发送邮件。如
果你的系统中没有安装sendmail，那就无法获得任何输出！因此在使用at命令时，最好在脚本
中对STDOUT和STDERR进行重定向（参见第15章），如下例所示。
$ cat teat13b.sh
 Test uaing at command
#1/bin/bash
echo *rhia script ran at $(date +lBsd, 47) * > test13b,out
echo >> test13b,out
echo *rhia 1s the scrlpt*α end..,* >> test13b.ost
αleep 5
+
 at -H -f test13b.ah noM
job 8 at 2015-07-14 12:48
S cat teat13b.out
Thi.s scxipt ran at July14, 12:48:18
Thia la the script's end...
如果不想在at命令中使用邮件或重定向，最好加上-M选项来屏蔽作业产生的输出信息。
3.列出等待的作业
atq命令可以查看系统中有哪些作业在等待。
---
## Page 364
16.6定时运行作业
349
S at -M -f test13b.sh teatine
ob 17 at 2015-0714 16:00
ob 18 at 2015-0715 13:03
at =K -f testl3b.sh tomorrow
16
S at -B -f test13b.sh 13:30
ob 19 at 2015-0714 13:30
S at -K -f testi3b.ah now
Job 20 at 2015-07-14 13:03
$ at4
0Z
2015-07-14 13:03 = Chriatine
18
2015-07-15 13:03 a Chziatine
1.7
2015-0714 16:00 a Chr1atine
9
2015-0714 13:30 a Chziatine
作业列表中显示了作业号、系统运行该作业的日期和时间及其所在的作业队列。
4.删除作业
一旦知道了哪些作业在作业队列中等待，就能用atrm命令来删除等待中的作业。
S atq
18
2015-07-15 13:03 a Chriatise
17
2015-07-14 16:00 a Chriatine
1.9
2015-0714 13:30 a Chriatine
S atrm 18
S atq
1.7
2015-0714 16:00 a Chriatine
19
20150714 13 :30 a Chr 1at1ne
$
只要指定想要删除的作业号就行了。只能删除你提交的作业，不能删除其他人的。
16.6.2安排需要定期执行的脚本
用at命令在预设时间安排脚本执行非常好用.但如果你需要脚本在每天的同一时间运行或是
每周一次、每月一次呢？用不着再使用at不断提交作业了，你可以利用Linux系统的另一个功能。
Linux系统使用cron程序来安排要定期执行的作业。cron程序会在后台运行并检查一个特殊的
表（被称作cron时间表），以获知已安排执行的作业。
1.cron时间表
cron时间表采用一种特别的格式来指定作业何时运行。其格式如下：
min hour dayofnonth month dayofweek cosmand
cron时间表允许你用特定值、取值范围（比如1-5）或者是通配符（星号）来指定条目。例
如，如果想在每天的10:15运行一个命令，可以用cron时间表条目：
---
## Page 365
350
第16章控制脚本
1.5 10 + + +commanc
在dayofimonth、month以及dayofweek字段中使用了通配符，表明cron会在每个月每天的10:15
执行该命令。要指定在每周一4:15PM运行的命令，可以用下面的条目：
15 15 + * 1 command
可以用三字符的文本值（mon、tue、wed、thu、fi、sat、sun）或数值（o为周日，6为周六）
来指定dayofweek表项。
这里还有另外一个例子：在每个月的第一天中午12点执行命令。可以用下面的格式：
00 12 1 * * command
dayofmonth表项指定月份中的日期值（1~31）。
说明聪明的读者可能会问如何设置一个在每个月的最后一天执行的命令，因为你无法设置
dayofmonth的值杂涵盖所有的月份。这个问题围扰若Linux和Unix程序员，也激发了不少解
决办法。常用的方法是加一条使用date命令的if-then语句来检查明天的日期是不是0l：
00 12 + + * 1f [date +id -d tomorrow* = 01 1 ; then  command
它会在每天中年12点未检查是不是当月的最后一天，如果是，cron将会运行该命令。
命令列表必须指定要运行的命令或脚本的全路径名。你可以像在普通的命令行中那样，添加
任何想要的命令行参数和重定向符号。
15 10 * * * /home/rich/test4,sh > test4out
cron程序会用提交作业的用户账户运行该脚本。因此，你必须有访问该命令和命令中指定的
输出文件的权限。
2.构建cron时间表
每个系统用户（包括root用户）都可以用自己的cron时间表来运行安排好的任务。Linux提供
了crontab命令来处理cron时间表。要列出已有的cron时间表，可以用-1选项。
$crontab -1
no crontab for rich
默认情况下，用户的cron时间表文件并不存在。要为cron时间表添加条目，可以用-e选项。
在添加条目时，crontab命令会启用一个文本编辑器（参见第10章），使用已有的cron时间表作
为文件内容（或者是一个空文件，如果时间表不存在的话）。
3.浏览cron目录
如果你创建的脚本对精确的执行时间要求不高，用预配置的cron脚本目录会更方便。有4个
基本目录：hourly、daily、monthly和weekly。
$ 18 /ete/cron.*1y
/etc/cron. daily:
gdno
makevhatis.cronprelink
tnpwatch
---
## Page 366
16.6定时运行作业
351
logrotatemlocate, cron
readahead.cron
/etc/cron houxly :
Danacron
/etc/cron,monthly :
16
readaheadmonthly cron
/etc/cron weekly :
因此，如果脚本需要每天运行一次，只要将脚本复制到daily目录，cron就会每天执行它。
4.anacron程序
cron程序的唯一间题是它假定Linux系统是7×24小时运行的。除非将Linux当成服务器环境来
运行，否则此假设未必成立。
如果某个作业在cron时间表中安排运行的时间已到，但这时候Linux系统处于关机状态，那么
这个作业就不会被运行。当系统开机时，cron程序不会再去运行那些错过的作业。要解决这个间
题，许多Linux发行版还包含了anacron程序。
如果anacron知道某个作业错过了执行时间，它会尽快运行该作业。这意味着如果Linux系统
关机了几天，当它再次开机时，原定在关机期间运行的作业会自动运行。
这个功能常用于进行常规日志维护的脚本。如果系统在脚本应该运行的时间刚好关机，
日志文件就不会被整理，可能会变很大。通过anacron，至少可以保证系统每次启动时整理日
志文件。
anacron程序只会处理位于cron目录的程序，比如/etc/cron.monthly。它用时间藏来决定作业
是否在正确的计划间隔内运行了。每个cron目录都有个时间截文件，该文件位于/var/spool/
anacron.
S sudo cat /var/spool/anacron/cron,monthly
20150 626
anacron程序使用自己的时间表（通常位于/ctc/anacrontab）来检查作业目录。
S sudo cat /ete/anacrontab
 /etc/anacrontab: configuration file for anacron
# See anacron (8) and anacrontab(5) for detalls.
SHELL=/b1n/ah
PATH= /sbin : /bin : /uax /αbin : /usx /bL.n
# the maximal random delay added to the base delay of the joba
NAILTO=root
 the joba vi11 be started @uring the fo1lowing hours only
RANDOX_DELAY=45
period in daya delay in ninutes
Job-identifier
cron, da11y
nice run-part.a /etc/cron, dally
connand
5
---
## Page 367
352
第16章控制脚本
25
cron, veek1y
nl.ce run-part.a /etc/cron,veekly
Fnonthly 45
cron,nonth1y
nice run-part.a /etc/cron.month1y
anacron时间表的基本格式和cron时间表略有不同：
period deIay identifier command
period条目定义了作业多久运行一次，以天为单位。anacron程序用此条目来检查作业的时间
截文件。delay条目会指定系统启动后anacron程序需要等待多少分钟再开始运行错过的脚本。
command条目包含了run-parts程序和一个cron脚本目录名。run-parts程序负责运行目录中传给它的
任何脚本。
注意，anacron不会运行位于/etc/cron.hourly的脚本。这是因为anacron程序不会处理执行时间
需求小于一天的脚本。
identifier条目是一种特别的非空字符串，如cron-weekly。它用于唯一标识日志消息和错误
邮件中的作业。
16.6.3使用新shell启动脚本
如果每次运行脚本的时候都能够启动一个新的bash shell（即便只是某个用户启动了一个bash
shell），将会非常的方便。有时候，你希望为shell会话设置某些shell功能，或者只是为了确保已经
设置了某个文件。
回想一下当用户登人bash shell时需要运行的启动文件（参见第6章）。另外别忘了，不是所有
的发行版中都包含这些启动文件。基本上，依照下列顺序所找到的第一个文件会被运行，其余的
文件会被忽略：
 SHOME/.bash_profile
 SHOME/.bash_login
 SHOME/.profile
因此，应该将需要在登录时运行的脚本放在上面第一个文件中。
每次启动一个新shell时，bash shell都会运行.bashre文件。可以这样来验证：在主目录下
的.bashrc文件中加人一条简单的echo语句，然后启动一个新shell。
$ cat .bashrc
.bashrc
 Source global definitions
usu 1[  oxqeea/ose/ 1- 11T