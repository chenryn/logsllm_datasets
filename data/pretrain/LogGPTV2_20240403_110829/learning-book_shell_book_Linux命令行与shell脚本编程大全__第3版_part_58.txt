### 第16章 控制脚本

#### 16.5.2 renice 命令
有时你可能希望改变系统上已运行进程的优先级。`renice`命令可以实现这一功能，允许你通过指定进程ID（PID）来调整其优先级。

示例：
```bash
$ ./test11.sh &
[1] 5055
$ renice -n 10 -p 5055
5055: old priority 0, new priority 10
$ ps -p 5055 -o pid,ppid,ni,cmd
  PID  PPID  NI CMD
5055 4721  10 /bin/bash ./test11.sh
```

`renice`命令会自动更新当前运行进程的调度优先级。与`nice`命令一样，`renice`也存在一些限制：
- 只能对属于你的进程执行`renice`；
- 只能通过`renice`降低进程的优先级；
- `root`用户可以通过`renice`任意调整进程的优先级。

若要完全控制运行中的进程，必须以`root`账户身份登录或使用`sudo`命令。

#### 16.6 定时运行作业
当你开始使用脚本时，可能会希望在某个预设时间运行脚本，这通常是在你不在场的时候。Linux系统提供了多种方法来安排脚本的运行时间和频率，包括`at`命令和`cron`表。接下来将依次介绍这些方法。

---

### 16.6.1 使用`at`命令计划执行作业
`at`命令允许你指定Linux系统何时运行脚本。该命令会将作业提交到队列中，并由`atd`守护进程以后台模式检查并运行这些作业。大多数Linux发行版会在启动时运行此守护进程。

`atd`守护进程会定期检查系统上的一个特殊目录（通常位于`/var/spool/at`），以获取用`at`命令提交的作业。默认情况下，`atd`守护进程每60秒检查一次这个目录。如果有作业，`atd`守护进程会检查作业设置的运行时间，如果时间匹配，则运行该作业。

#### 1. `at`命令的格式
`at`命令的基本格式如下：
```bash
at [-f filename] time
```
- 默认情况下，`at`命令会将标准输入（STDIN）的内容放入队列。你可以使用`-f`参数指定读取命令的文件名。
- `time`参数指定了Linux系统何时运行该作业。如果指定的时间已经过去，`at`命令会在第二天的同一时间运行作业。

时间格式非常灵活，支持以下几种：
- 标准的小时和分钟格式，如`10:15`。
- AM/PM指示符，如`10:15 PM`。
- 特定命名时间，如`now`、`noon`、`midnight`或`teatime`（下午4点）。

除了指定时间外，还可以指定日期：
- 标准日期格式，如`MMDDYY`、`MM/DD/YY`或`DD.MM.YY`。
- 文本日期，如`Jul4`或`Dec25`，可加年份也可不加。
- 时间增量，如`+25 min`、`tomorrow 10:15 PM`、`10:15 +7 days`。

作业会被提交到作业队列，不同优先级对应不同的队列。默认情况下，`at`作业被提交到`a`队列。如果想以更高优先级运行作业，可以使用`-q`参数指定不同的队列字母。

#### 2. 获取作业的输出
当作业在Linux系统上运行时，显示器不会关联到该作业。相反，Linux系统会将作业的标准输出（STDOUT）和标准错误（STDERR）发送到用户的电子邮件地址。任何发到STDOUT或STDERR的输出都会通过邮件系统发送给用户。

例如，在CentOS发行版中使用`at`命令安排作业执行：
```bash
$ cat test13.sh
#!/bin/bash
# Test using at command
echo "This script ran at $(date +%B%d, %T)"
echo
sleep 5

$ at -f test13.sh now
job 7 at 2015-07-14 12:38
```

`at`命令会显示分配给作业的作业号以及为作业安排的运行时间。`-f`选项指明使用哪个脚本文件，`now`指示`at`命令立即执行该脚本。

使用电子邮件作为`at`命令的输出可能不方便。因此，最好在脚本中重定向STDOUT和STDERR。例如：
```bash
$ cat test13b.sh
#!/bin/bash
# Test using at command
echo "This script ran at $(date +%B%d, %T)" > test13b.out
echo >> test13b.out
echo "This is the script's end..." >> test13b.out
sleep 5

$ at -f test13b.sh now
job 8 at 2015-07-14 12:48

$ cat test13b.out
This script ran at July14, 12:48:18
This is the script's end...
```

如果不想在`at`命令中使用邮件或重定向，可以加上`-M`选项来屏蔽作业产生的输出信息。

#### 3. 列出等待的作业
`atq`命令可以查看系统中等待的作业列表：
```bash
$ atq
17 2015-07-14 16:00 a Christine
18 2015-07-15 13:03 a Christine
19 2015-07-14 13:30 a Christine
```

作业列表显示了作业号、系统运行该作业的日期和时间及其所在的作业队列。

#### 4. 删除作业
一旦知道哪些作业在作业队列中等待，可以使用`atrm`命令删除等待中的作业：
```bash
$ atq
18 2015-07-15 13:03 a Christine
17 2015-07-14 16:00 a Christine
19 2015-07-14 13:30 a Christine

$ atrm 18
$ atq
17 2015-07-14 16:00 a Christine
19 2015-07-14 13:30 a Christine
```

只需指定想要删除的作业号即可。只能删除自己提交的作业，不能删除其他人的作业。

---

### 16.6.2 安排需要定期执行的脚本
使用`at`命令在预设时间安排脚本执行非常方便，但如果你需要脚本每天在同一时间运行，或者每周一次、每月一次呢？这时可以利用Linux系统的另一个功能——`cron`程序。

`cron`程序会在后台运行并检查一个特殊的表（称为`cron`时间表），以获知已安排执行的作业。

#### 1. `cron`时间表
`cron`时间表采用一种特别的格式来指定作业何时运行。其格式如下：
```bash
min hour dayofmonth month dayofweek command
```

- 允许使用特定值、取值范围（如`1-5`）或通配符（星号）来指定条目。
- 例如，要在每天的10:15运行一个命令，可以使用以下条目：
  ```bash
  15 10 * * * command
  ```

- 要指定在每周一4:15 PM运行的命令，可以使用以下条目：
  ```bash
  15 16 * * 1 command
  ```

- 可以用三字符的文本值（如`mon`、`tue`、`wed`、`thu`、`fri`、`sat`、`sun`）或数值（0为周日，6为周六）来指定`dayofweek`字段。

- 例如，在每个月的第一天中午12点执行命令，可以使用以下格式：
  ```bash
  00 12 1 * * command
  ```

- 如果需要设置一个在每个月的最后一天执行的命令，可以使用`date`命令进行检查：
  ```bash
  00 12 * * * if [ "$(date +\%d -d tomorrow)" = "01" ]; then command; fi
  ```

命令列表必须指定要运行的命令或脚本的全路径名。可以像在普通命令行中那样添加任何命令行参数和重定向符号。

#### 2. 构建`cron`时间表
每个系统用户（包括`root`用户）都可以用自己的`cron`时间表来运行安排好的任务。Linux提供了`crontab`命令来处理`cron`时间表。

- 列出现有的`cron`时间表：
  ```bash
  $ crontab -l
  no crontab for rich
  ```

- 添加条目：
  ```bash
  $ crontab -e
  ```

  在添加条目时，`crontab`命令会启用一个文本编辑器，使用现有的`cron`时间表作为文件内容（如果时间表不存在则为空文件）。

#### 3. 浏览`cron`目录
如果你创建的脚本对精确的执行时间要求不高，可以使用预配置的`cron`脚本目录。有四个基本目录：`hourly`、`daily`、`monthly`和`weekly`。

- 查看目录内容：
  ```bash
  $ ls /etc/cron.*
  /etc/cron.daily:
  logrotate
  mlocate.cron
  readahead.cron

  /etc/cron.hourly:
  danacron

  /etc/cron.monthly:
  readahead-monthly.cron

  /etc/cron.weekly:
  prelink
  tmpwatch
  ```

- 将脚本复制到相应的目录，`cron`就会按周期执行它。

#### 4. `anacron`程序
`cron`程序假设Linux系统是7×24小时运行的。如果某个作业在`cron`时间表中安排运行的时间已到，但此时Linux系统处于关机状态，那么这个作业就不会被运行。`anacron`程序可以解决这个问题。

- `anacron`会尽快运行错过执行时间的作业。这意味着如果Linux系统关机了几天，当它再次开机时，原定在关机期间运行的作业会自动运行。

- 这个功能常用于进行常规日志维护的脚本。通过`anacron`，至少可以保证系统每次启动时整理日志文件。

- `anacron`只会处理位于`cron`目录的程序，如`/etc/cron.monthly`。它使用时间戳来决定作业是否在正确的计划间隔内运行。每个`cron`目录都有一个时间戳文件，该文件位于`/var/spool/anacron`。

- 查看时间戳文件：
  ```bash
  $ sudo cat /var/spool/anacron/cron.monthly
  20150626
  ```

- `anacron`使用自己的时间表（通常位于`/etc/anacrontab`）来检查作业目录。
  ```bash
  $ sudo cat /etc/anacrontab
  # /etc/anacrontab: configuration file for anacron
  SHELL=/bin/sh
  PATH=/sbin:/bin:/usr/sbin:/usr/bin
  MAILTO=root
  RANDOM_DELAY=45
  START_HOURS_RANGE=3-22

  # period in days delay in minutes job-identifier command
  1 5 cron.daily   nice run-parts /etc/cron.daily
  7 25 cron.weekly nice run-parts /etc/cron.weekly
  @monthly 45 cron.monthly nice run-parts /etc/cron.monthly
  ```

- `anacron`时间表的基本格式：
  ```bash
  period delay identifier command
  ```

  - `period`定义了作业多久运行一次，以天为单位。
  - `delay`指定了系统启动后`anacron`程序需要等待多少分钟再开始运行错过的脚本。
  - `command`包含了`run-parts`程序和一个`cron`脚本目录名。

- 注意，`anacron`不会运行位于`/etc/cron.hourly`的脚本，因为它不会处理执行时间需求小于一天的脚本。

- `identifier`条目是一种特别的非空字符串，如`cron-weekly`。它用于唯一标识日志消息和错误邮件中的作业。

---

### 16.6.3 使用新shell启动脚本
如果每次运行脚本时都能启动一个新的`bash` shell，将会非常方便。有时候，你希望为shell会话设置某些shell功能，或者只是为了确保已经设置了某个文件。

回想一下，当用户登录`bash` shell时需要运行的启动文件（参见第6章）。基本上，依照下列顺序所找到的第一个文件会被运行，其余的文件会被忽略：
- `~/.bash_profile`
- `~/.bash_login`
- `~/.profile`

因此，应该将需要在登录时运行的脚本放在上面第一个文件中。

每次启动一个新shell时，`bash` shell都会运行`.bashrc`文件。可以这样验证：在主目录下的`.bashrc`文件中加入一条简单的`echo`语句，然后启动一个新shell。
```bash
$ cat .bashrc
# .bashrc
# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
echo "This is my custom .bashrc"
```