### Implementation and Metadata Storage

In our implementation, both the gateway and clients store metadata associated with each file in a local MySQL database. For example, the hash of a Bitcoin block 'X' can be obtained by invoking `https://blockexplorer.com/q/getblockhash/X`.

### Performance Evaluation

#### Key Generation and Overhead
- **Key Generation at Gateway (Figure 4(a))**: We evaluate the overhead incurred by the oblivious key generation module on the gateway. The gateway handles key generation requests back-to-back, and we gradually increase the number of requests until the throughput is saturated. Our results show that our scheme incurs approximately 125 ms latency per client key generation request on the gateway, achieving a maximum throughput of 1185 operations per second. This significantly improves upon DupLESS, which has a maximum throughput of 449 operations per second. The improvement is primarily due to the faster computation of BLS signatures compared to RSA signatures.
- **Overhead on Clients (Figure 4(b))**: While BLS signatures are more expensive to verify on clients compared to the RSA variant used in DupLESS, the additional overhead is minimal. For instance, for 16 MB files, our proposal incurs an additional latency of only 213 ms on the clients, which is dominated by the hashing of the file.

#### Proofs of Ownership (PoW)
- **FID Computation (Figure 4(c))**: We evaluate the overhead of computing FID required to instantiate the PoW scheme. The PoW scheme reduces the cost of verifying PoW by encoding the original file in a bounded size buffer (64 MB). Our results show that the computation of FID is tolerable, requiring 1.07 seconds for a 16 MB file.

#### CARDIAC Construction and Proof Generation
- **CARDIAC Construction (Figure 4(d))**: We assess the overhead of constructing accumulators and generating proofs in CARDIAC with respect to the number of clients subscribed to the same file. For example, constructing an accumulator for 1000 users requires 2.34 ms. Once the Merkle tree is constructed, proof generation is significantly faster, as the gateway only needs to traverse the tree and record sibling paths for all members of the accumulator.
- **Proof Generation Overhead (Figure 4(e))**: We evaluate the overhead incurred by the proof generation in CARDIAC with respect to the number of files selected for attestation at the end of each epoch. When fewer than 100 files are selected, the latency is around 150 ms. Beyond this threshold, the latency increases, reaching almost 1 second for 4000 files.
- **Proof Verification by Clients (Figure 4(f))**: The verification process, which requires \(\lfloor \log |CFID| \rfloor\) hashes, incurs minimal overhead on the clients. For example, verifying membership and cardinality in CARDIAC for 1000 clients takes only 27 Âµs.

### ClearBox Performance

#### PUT and GET Operations
- **PUT Performance (Figure 5(a))**: We evaluate the latency experienced by users during the PUT operation with respect to the file size. ClearBox achieves comparable performance to DupLESS over S3. For 16 MB files, ClearBox incurs a latency of 6.33 seconds, while DupLESS incurs 4.71 seconds. The additional overhead in ClearBox is mainly due to the computation of FID by the users.
- **GET Performance (Figure 5(b))**: The latency experienced by users during the GET operation is comparable between ClearBox and DupLESS. In ClearBox, clients first contact the gateway to acquire a timed GET URL, but the overall latency is dominated by the download speed. For example, downloading a 32 MB file in ClearBox incurs a latency of 10 seconds, compared to 3 seconds in a plain cloud storage system.

#### Latency vs. Throughput
- **Latency and Throughput (Figure 5(c))**: We evaluate the latency incurred on the gateway with respect to the achieved throughput. Assuming 50% of the requests are PUT and 50% are GET, and 50% of the upload requests are for files already stored, ClearBox achieves a maximum throughput of approximately 2138 operations per second with Amazon S3. With Dropbox, the performance deteriorates, with the maximum throughput decreasing to 289 operations per second.

### Related Work

Data deduplication in cloud storage systems has been extensively studied. Harnik et al. [28] describe threats posed by client-side data deduplication, which can be mitigated using Proofs of Ownership (PoW) schemes [23, 27]. Halevi et al. [27] propose a PoW construct based on Merkle trees, while Xu et al. [44] build upon this to support client-side deduplication. Di Pietro and Sorniotti [23] and Blasco et al. [16] further reduce server-side overhead. Convergent encryption, introduced by Douceur et al. [25], is not semantically secure but offers confidentiality for unpredictable content. Bellare et al. [31] proposed DupLESS, a server-aided encryption scheme for data deduplication. Stanek et al. [42] and Soriente et al. [41] propose solutions for semantic security and distributed access control, respectively.

### Conclusion

ClearBox enables a cloud provider to transparently attest to its clients the deduplication patterns of their stored data. It enforces fine-grained access control, supports data confidentiality, and resists malicious users. Our evaluation shows that ClearBox scales well with the number of users and files. ClearBox is the first complete system allowing users to verify storage savings, motivating a fairer cloud pricing model that encourages the storage of popular data and discourages the upload of personal and unique content.

### Acknowledgements

The authors thank Nikos Triandopoulos and the anonymous reviewers for their valuable feedback. This work was partly supported by the EU H2020 TREDISEC project, funded by the European Commission under grant agreement no. 644412.

### References

[1] Amazon S3 Pricing. http://aws.amazon.com/s3/pricing/
[2] Bitcoin real-time stats and tools. http://blockexplorer.com/q
[3] Google Cloud Storage. https://cloud.google.com/storage/
[4] The MySQL Query Cache. http://dev.mysql.com/doc/refman/5.1/en/query-cache.html
[5] PBC Library. http://crypto.stanford.edu/pbc/, 2007
[6] Cloud Market Will More Than Triple by 2014, Reaching $150 Billion.