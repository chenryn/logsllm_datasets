# Analysis and Query Optimization

## Introduction
In this document, we use an auction document from the XMark project as an example. This document contains 250,000 nodes and is generated with a factor of 0.05 (as specified on the XMark project page).

When a query is evaluated against this document, certain nodes are accessed by XPath expressions in the query. We classify these nodes into three categories:

1. **No Access**: These nodes are not accessed by the rewritten query, even though they are accessed by the original query.
2. **Access Without Runtime Access Check**: These nodes are exempt from runtime access control checks but must still be read.
3. **Access With Runtime Access Check**: These nodes require both access and runtime access checks. The rewritten query accesses these nodes, and this access requires a runtime check.

## Example Policy
The following policy is used for illustration:
- **Role: ROLE10**
  - +R,/
  - -R,/spec/body/div1/constraintnote/definitions
  - -R,/spec/header/latestloc/xtermref
  - -R,/spec/body/div1/definitions/exception
  - -R,//copyright
  - -R,/spec/header/prevlocs
  - -R,/spec/header/revisiondesc
  - -R,/spec/body/div1/vcnote/definitions/reference
  - -R,/spec/header/authlist/author
  - -R,/spec/back/div1/ulist/item/vcnote/glist/gitem/def/table/tbody/tr/td/wfcnote
  - -R,//inform-div1/wfcnote

### Figure 6: Random Policy Example
The bar chart (Figure 5) shows, for each role, the number of nodes in the three categories, averaged over Queries #1 through #20. We observe that the cost of query evaluation for roles M, MM, IM, and V is significantly reduced because the third portion (nodes requiring runtime access checks) is very small. For example, in the case of the Maintainer (M), no runtime access checks are required as the maintainer has access to all nodes. Conversely, for roles IM and V, a large number of nodes are skipped, reducing the need for examination during query evaluation.

## Scalability of Static Analysis
To test scalability, we measure the running time of our analysis using real-world DTDs and random policies with large sets of rules. The analysis is divided into two phases:

1. **Initialization Phase**: Compute a schema automaton \( M_G \) and an access control automaton \( M_\Gamma \) for each role in the policy.
2. **Analysis Phase**: Statically analyze XPath expressions in each query to determine if they are always-denied or always-granted. When there are many queries, we cache \( M_G \) and \( M_\Gamma \) computed in the initialization phase and reuse them in the analysis phase.

### Settings
We use three large DTDs:
- **xmlspec-v21.dtd** from W3C XML Working Group, with 157 element types.
- **HL7.dtd** from Health Level Seven, with 621 element types (the largest publicly available DTD).
- **docbookx.dtd** by OASIS DocBook technical committee, with 393 element types.

We generate access control policies with different sizes (1 to 500 rules per role) and randomly create 10 access control policies for each DTD. Each policy uses element names or attribute names defined in the DTD. As an example, Figure 6 shows an access control policy generated from the xmlspec-v21.dtd.

For each DTD, we statically analyze a query with 12 XPath expressions, derived from Query #10 of XMark, where each XPath expression includes one `//` and several `/`.

### Results
Our test environment was a 2.4 GHz Pentium 4 machine with 512 MB of memory and J2RE 1.4.0 IBM build for Linux. The JIT-compiler was fully warmed up before each run.

#### Initialization Phase
Figure 7(a) shows the running time of the initialization phase. The running time does not include the time required to compute schema automata \( M_G \), which is 63.7 ms, 57.5 ms, and 249.3 ms for xmlspec-v21.dtd, HL7.dtd, and docbookx.dtd, respectively. The sizes of states of \( M_G \) are 214, 623, and 501 for xmlspec-v21.dtd, HL7.dtd, and docbookx.dtd, respectively. The size of the access control automaton \( M_\Gamma \) is about 1,200 in the worst case.

#### Analysis Phase
Figure 7(b) shows the running time for the analysis phase, where each point indicates the average time required to analyze each XPath expression in the query.

In both phases, performance is better for HL7.dtd than for xmlspec-v21.dtd or docbookx.dtd due to the simpler structure of HL7.dtd. The initialization phase takes more than 10 seconds for large policies, and the running time increases non-linearly. In the analysis phase, the running time increases almost linearly with the number of rules. In practice, the initialization phase is performed once per policy, while the analysis phase is performed once per XPath expression in queries. Therefore, our static analysis scales well with respect to the size of schemas and access control policies.

## Conclusions and Future Work
In this paper, we have attempted to ease the burden of checking access control policies for XML documents by distributing the burden between static analysis and runtime checks. Our key idea is to use automata for representing and comparing queries, access control policies, and schemas. We have built a prototype, demonstrated its effectiveness, and experimented with its performance. Our experiments show that static analysis frequently makes runtime checks unnecessary and provides significant optimizations, and our prototype scales well with large schemas, access control policies, and queries.

However, our static analysis has some limitations:
- **Value-based Access Control**: Value-based access control requires XPath expressions with predicates. We approximate such policies and expressions by creating underestimation and overestimation automata, which can make some queries indeterminate. However, when the same value is specified in both the access control policy and the query expression, we can capture predicates by incorporating them into the underlying alphabet.
- **Backward Axes of XPath**: Our static analysis does not cover all XPath axes, particularly backward axes. While tree automata can capture all axes, they are more complex and harder to implement. However, some backward axes can be handled by rewriting them as forward ones.
- **Advanced Features of XQuery**: We have simplified XQuery, but XPath allows arbitrary nesting of FLWR expressions and even recursive queries. We cannot handle recursive queries and rely on runtime checking. Nested FLWR expressions can be handled by extracting XPath expressions.

Our next step is to incorporate static analysis into an XML database system and find a good balance between runtime checking and static analysis.

## Additional Authors
- Satoshi Hada (IBM Tokyo Research Lab, 1623-14, Shimotsuruma, Yamato-shi, Kanagawa-ken 242-8502, Japan, email: PI:EMAIL)

## References
[References listed here]

## Appendix A: Implementation Techniques
We present a few techniques for improving the performance of our implementation:
- **Automata Library**: Provides boolean operations (∩, ∪, \) as well as determinization and minimization operations. The performance of our static analysis largely depends on the minimization operation. We use an efficient algorithm by Hopcroft [17] and avoid minimization when possible by removing redundant states.
- **Determinization**: We heavily use the determinization operation. During the computation of \( M_\Gamma \) and \( M_\Gamma \), we always determinize intermediate automata to efficiently test ⊆ by applying \.
- **Order of Computation**: In computing automata, we first use \( M_r \), which is typically compact, and then use \( M_G \), which can be very large and complex. This approach helps in managing the complexity of the intersections and differences.

These techniques help in making our static analysis more efficient and scalable.