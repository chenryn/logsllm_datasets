USENIX Security Symposium (USENIX Security’14), pages
401–416, 2014.
[25] Daniele Cono D’Elia, Emilio Coppa, Simone Nicchi, Fede-
rico Palmaro, and Lorenzo Cavallaro. SoK: Using Dynamic
Binary Instrumentation for Security (And How You May Get
Caught Red Handed). In Proceedings of the 2019 ACM Asia
Conference on Computer and Communications Security (Asi-
aCCS’19), 2019.
[26] Visual Studio Docs. Debug using the Just-In-Time Debugger
in Visual Studio. http://tiny.cc/bm6rsz, September 2018.
Malcode Context
https://www.sans.org/reading-room/
[27] Ken Dunham and Egan Hadsell.
of API Abuse.
whitepapers/malicious/paper/33649, April 2011.
[28] Nicolas Falliere and Eric Chien. Zeus: King of the Bots. Sy-
mantec Security Response, 2009.
[29] Fareed Fauzi. Common Windows API in Analyzing and Re-
versing Windows Malware. https://fareedfauzi.github.
io/notes/windows_api_in_reversing_malware/, Au-
gust 2019.
[30] FBI. GameOver Zeus Botnet Disrupted Collaborative Effort
Among International Partners. http://tiny.cc/6u8rsz, last
reviewed, 10/1/2020.
[31] Xinyang Ge, Weidong Cui, and Trent Jaeger. GRIFFIN: Guar-
ding Control Flows Using Intel Processor Trace. In Procee-
dings of the 22nd International Conference on Architectural
Support for Programming Languages and Operating Systems
(ASPLOS’17), 2017.
[32] Jeffrey Gennari. Static Identiﬁcation of Program Behavior
using Sequences of API Calls. http://tiny.cc/rm6rsz,
CMU Software Engineering Institute Blogs, April 2016.
[33] Patrice Godefroid. Micro Execution.
In Proceedings of
the 36th International Conference on Software Engineering
(ICSE’14), 2014.
3466    30th USENIX Security Symposium
USENIX Association
[34] Enes Gökta¸s, Elias Athanasopoulos, Michalis Polychronakis,
Herbert Bos, and Georgios Portokalidis. Size Does Matter:
Why Using Gadget-Chain Length to Prevent Code-Reuse At-
tacks is Hard. In 23rd USENIX Security Symposium (USENIX
Security’14), pages 417–432, 2014.
[35] Fanglu Guo, Peter Ferrie, and Tzi-Cker Chiueh. A Study of
the Packer Problem and Its Solutions. In Proceedings of the
11th International Symposium on Recent Advances in Intrusion
Detection (RAID’08), 2008.
[36] Hex-Rays. Debugging Windows Applications with IDA
WinDbg Plugin. https://www.hex-rays.com/products/
ida/support/tutorials/debugging_windbg.pdf, 2011.
[37] Ashkan Hosseini. Ten Process Injection Techniques: A Techni-
cal Survey of Common and Trending Process Injection Techni-
ques. http://tiny.cc/wm6rsz, July 2017.
[38] Xin Hu, Sandeep Bhatkar, Kent Grifﬁn, and Kang G. Shin.
MutantX-S: Scalable Malware Clustering Based on Static Fe-
atures. In Proceedings of the 2013 USENIX Conference on
Annual Technical Conference (USENIX ATC’13), 2013.
[39] AV-TEST Institute. Malware Statistics 2020: A look at Mal-
ware Trends by the Numbers. https://www.av-test.org/
en/statistics/malware/, October 2020.
[40] Sebastien Josse. Secure and Advanced Unpacking using Com-
puter Emulation. Journal in Computer Virology, 3(3), 2007.
[41] Yuhei Kawakoya, Makoto Iwamura, and Jun Miyoshi. Taint-
assisted IAT Reconstruction against Position Obfuscation.
Journal of Information Processing, 26:813–824, 2018.
[42] Yuhei Kawakoya, Makoto Iwamura, Eitaro Shioji, and Takeo
Hariu. API Chaser: Anti-analysis Resistant Malware Ana-
lyzer. In Proceedings of the 16th International Symposium
on Research in Attacks, Intrusions, and Defenses (RAID’13),
2013.
[43] Yuhei Kawakoya, Eitaro Shioji, Yuto Otsuki, Makoto Iwamura,
and Takeshi Yada. Stealth Loader: Trace-Free Program Loa-
ding for API Obfuscation. In Proceedings of the 20th Inter-
national Symposium on Research in Attacks, Intrusions, and
Defenses (RAID’17), 2017.
[44] David Korczynski. RePEconstruct: Reconstructing Bina-
ries with Self-modifying Code and Import Address Table De-
struction. In Proceedings of the 11th International Conference
on Malicious and Unwanted Software (MALWARE’16), 2016.
McAfee Labs Threats Report.
[45] McAfee Labs.
https://www.mcafee.com/enterprise/en-us/assets/
reports/rp-quarterly-threats-aug-2019.pdf, August
2019.
[46] Jinku Li, Xiaomeng Tong, Fengwei Zhang, and Jianfeng Ma.
Fine-CFI: Fine-Grained Control-Flow Integrity for Operating
System Kernels. IEEE Transactions on Information Forensics
and Security, 13(6), 2018.
[47] Yutao Liu, Peitao Shi, Xinran Wang, Haibo Chen, Binyu Zang,
and Haibing Guan. Transparent and Efﬁcient CFI Enforcement
with Intel Processor Trace. In Proceedings of the 2017 IEEE
International Symposium on High Performance Computer Ar-
chitecture (HPCA’17), 2017.
[48] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur
Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi,
and Kim Hazelwood. Pin: Building customized program analy-
sis tools with dynamic instrumentation. In Proceedings of the
2005 ACM SIGPLAN conference on Programming language
design and implementation (PLDI’05), 2005.
[49] Alessandro Mantovani, Simone Aonzo, Xabier Ugarte-Pedrero,
Alessio Merlo, and Davide Balzarotti. Prevalence and Impact
of Low-Entropy Packing Schemes in the Malware Ecosystem.
In Proceedings of the 27th Network and Distributed System
Security Symposium (NDSS’20), 2020.
[50] Sebastiano Mariani, Lorenzo Fontana, Fabio Gritti, and Stefano
D’Alessio. PinDemonium: A DBI-Based Generic Unpacker
for Windows Executable. Black Hat USA, 2016.
[51] Lorenzo Martignoni, Mihai Christodorescu, and Somesh Jha.
OmniUnpack: Fast, Generic, and Safe Unpacking of Malware.
In Proceedings of the 23nd Annual Computer Security Appli-
cations Conference (ACSAC’07), 2007.
[52] Jiang Ming, Dongpeng Xu, Yufei Jiang, and Dinghao Wu. Bin-
Sim: Trace-based Semantic Binary Difﬁng via System Call
Sliced Segment Equivalence Checking. In Proceedings of the
26th USENIX Conference on Security Symposium (USENIX
Security’17), 2017.
[53] NO-MERCY.
Top Maliciously Used APIs.
https://rstforums.com/forum/topic/
95273-top-maliciously-used-apis/, 2015.
[54] Obsidium Software. Obsidium: Software Protection System.
https://www.obsidium.de/, [online].
[55] Philip OKane, Sakir Sezer, and Kieran McLaughlin. Obfusca-
tion: The Hidden Malware. IEEE Security and Privacy, 9(5),
2011.
[56] Oreans Technologies.
tion against reverse engineering.
codevirtualizer.php, [online].
Code Virtualizer: Total obfusca-
http://oreans.com/
[57] Oreans Technologies. Themida: Advanced Windows Software
https://www.oreans.com/themida.
Protection System.
php, [online].
[58] Raghav Pande
and Amit Malik.
Kit
Exploit
FireEye Threat
EMET.
Research—Angler
https://www.fireeye.com/blog/threat-research/
2016/06/angler_exploit_kite.html, June 2016.
Evading
[59] Vasilis Pappas, Michalis Polychronakis, and Angelos D Ke-
romytis. Transparent ROP Exploit Mitigation Using Indirect
Branch Tracing. In Presented as part of the 22nd USENIX
Security Symposium (USENIX Security’13), pages 447–462,
2013.
[60] Mario Polino, Andrea Continella, Sebastiano Mariani, Stefano
D’Alessio, Lorenzo Fontata, Fabio Gritti, and Stefano Zanero.
Measuring and Defeating Anti-Instrumentation-Equipped Mal-
In Proceedings of the 14th Conference on Detect-
ware.
ion of Intrusions and Malware and Vulnerability Assessment
(DIMVA’17), 2017.
[61] Aravind Prakash and Heng Yin. Defeating ROP Through
Denial of Stack Pivot. In Proceedings of the 31st Annual Com-
puter Security Applications Conference (ACSAC’15), 2015.
USENIX Association
30th USENIX Security Symposium    3467
[62] Jason Raber and Brian Krumheuer. QuietRIATT: Rebuilding
the Import Address Table Using Hooked DLL Calls. Black
Hat DC, 2009.
[63] Kevin A. Roundy and Barton P. Miller. Binary-code Obfus-
cations in Prevalent Packer Tools. ACM Computing Surveys,
46(1), 2013.
[64] Mark E Russinovich, David A Solomon, and Alex Ionescu.
Windows Internals (6th Edition). Microsoft Press, 2012.
[65] Ashkan Sami, Babak Yadegari, Hossein Rahimi, Naser Pei-
ravian, Sattar Hashemi, and Ali Hamze. Malware Detection
Based on Mining API Calls. In Proceedings of the 2010 ACM
Symposium on Applied Computing (SAC’10), 2010.
[66] Felix Schuster, Thomas Tendyck, Jannik Pewny, Andreas
Maaß, Martin Steegmanns, Moritz Contag, and Thorsten Holz.
Evaluating the Effectiveness of Current Anti-ROP Defenses. In
Proceedings of the 17th International Symposium on Research
in Attacks, Intrusions, and Defenses (RAID’14), 2014.
[67] SecondWrite. SecondWrite’s Malware Deepview. https:
//www.secondwrite.com/, [online].
[68] Monirul Sharif, Andrea Lanzi, Jonathon Gifﬁn, and Wenke
Lee. Automatic Reverse Engineering of Malware Emulators.
In Proceedings of the 30th IEEE Symposium on Security and
Privacy (S&P’09), 2009.
[69] Monirul Sharif, Vinod Yegneswaran, Hassen Saidi, Phillip Por-
ras, and Wenke Lee. Eureka: A Framework for Enabling Sta-
tic Malware Analysis. In Proceedings of the 13th European
Symposium on Research in Computer Security (ESORICS’08),
2008.
[70] Masaki Suenaga. A Museum of API Obfuscation on Win32.
Symantec Security Response, 2009.
[71] Email Tara. Most Wanted Malware: Banking Trojans Come
to the Fore Again. https://www.infosecurity-magazine.
com/news/banking-trojans-come-to-the-fore/,
September 2017.
[72] The Enigma Protector. Enigma Protector: A professional
system for executable ﬁles licensing and protection. http:
//enigmaprotector.com/, [online].
[73] Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pa-
blo G Bringas. SoK: Deep Packer Inspection: A Longitudinal
Study of the Complexity of Run-Time Packers. In Proceedings
of the 36th IEEE Symposium on Security & Privacy (S&P’15),
2015.
[74] Xabier Ugarte-Pedrero, Mariano Graziano, and Davide Balza-
rotti. A Close Look at a Daily Dataset of Malware Samples.
ACM Transactions on Privacy and Security, 22(1), January
2019.
[75] Victor Van der Veen, Dennis Andriesse, Enes Gökta¸s, Ben Gras,
Lionel Sambuc, Asia Slowinska, Herbert Bos, and Cristiano
Giuffrida. Practical Context-Sensitive CFI. In Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS’15), 2015.
[76] VirusTotal. Free online virus, malware, and URL scanner.
https://www.virustotal.com, [online].
[77] VMProtect Software. VMProtect software protection. http:
//vmpsoft.com, [online].
[78] VMRay. VMRay Analyzer: A Smarter, Stealthier Mal-
https://www.vmray.com/products/
ware Sandbox.
malware-sandbox-vmray-analyzer/, [online].
[79] Zhi Wang and Xuxian Jiang. HyperSafe: A Lightweight Ap-
proach to Provide Lifetime Hypervisor Control-Flow Integrity.
In Proceedings of the 2010 IEEE Symposium on Security and
Privacy (S&P’10), 2010.
[80] Richard Wartell, Vishwath Mohan, Kevin W Hamlen, and Zhi-
qiang Lin. Securing Untrusted Code via Compiler-agnostic
Binary Rewriting. In Proceedings of the 28th Annual Computer
Security Applications Conference (ACSAC’12), 2012.
[81] Te-En Wei, Zhi-Wei Chen, Chin-Wei Tien, Jain-Shing Wu,
Hahn-Ming Lee, and Albert B Jeng. RePEF — A System
for Restoring Packed Executable File for Malware Analysis.
In 2011 International Conference on Machine Learning and
Cybernetics, 2011.
[82] Carsten Willems, Ralf Hund, Andreas Fobian, Dennis Felsch,
Thorsten Holz, and Amit Vasudevan. Down to the Bare Metal:
Using Processor Features for Binary Analysis. In Proceedings
of the 28th Annual Computer Security Applications Conference
(ACSAC’12), 2012.
[83] Yubin Xia, Yutao Liu, Haibo Chen, and Binyu Zang. CFIMon:
Detecting Violation of Control Flow Integrity using Perfor-
mance Counters. In IEEE/IFIP International Conference on
Dependable Systems and Networks (DSN’12), 2012.
[84] Dongpeng Xu, Jiang Ming, Yu Fu, and Dinghao Wu. VMHunt:
A Veriﬁable Approach to Partial-Virtualized Binary Code Sim-
pliﬁcation. In Proceedings of the 25th ACM Conference on
Computer and Communications Security (CCS’18), 2018.
[85] Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and
Saumya Debray. A Generic Approach to Automatic Deobfus-
cation of Executable Code. In Proceedings of the 36th IEEE
Symposium on Security & Privacy (S&P’15), 2015.
[86] Wei Yan, Zheng Zhang, and Nirwan Ansari. Revealing Packed
Malware. IEEE Security and Privacy, 6(5), September 2008.
[87] Liwei Yuan, Weichao Xing, Haibo Chen, and Binyu Zang. Se-
curity Breaches as PMU Deviation: Detecting and Identifying
Security Attacks Using Performance Counters. In Proceedings
of the 2nd Asia-Paciﬁc Workshop on Systems, 2011.
[88] Pinghai Yuan, Qingkai Zeng, and Xuhua Ding. Hardware-
Assisted Fine-Grained Code-Reuse Attack Detection. In Pro-
ceedings of the 18th International Symposium on Research in
Attacks, Intrusions, and Defenses (RAID’15), 2015.
[89] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Sze-
keres, Stephen McCamant, Dawn Song, and Wei Zou. Practical
Control Flow Integrity & Randomization for Binary Executa-
bles. In Proceedings of the 2013 IEEE Symposium on Security
and Privacy (S&P’13), 2013.
3468    30th USENIX Security Symposium
USENIX Association