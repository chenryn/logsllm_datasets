CFC of all split constructs. The absolute con- As an example, let us take the process shown
trol-flow complexity is calculated as follows, in Figure 3 and calculate its CFC. The process
where P is a business process. is composed of 21 activities, 29 transitions,
three XOR-splits (Check Loan Type, Check
CFC (P)= Home Loan, Check Car Loan), one OR-split
abs
( ∑ CFC i)+ (Archive Application), and one AND-split
XOR−split
i∈(XOR-splits of P) (Check Education Loan).
( ∑ CFC j)+ It was decided that before placing the
OR−split
j∈(OR-splits of P) process in a production environment, a process
( ∑ CFC k)+ complexity analysis was required to evaluate the
AND−split
risk involved with the reengineering effort. The
k∈(AND-splits of P)
results of the control-flow complexity analysis
The relative control-flow complexity for carried out are shown in Table 1.
process P is calculated as follows, where |P| From these values, the control-flow com-
is the number of activities of process P (see plexity can be calculated easily. It is sufficient
Box 1). to mathematically add the CFC of each split.
The greater the value of the CFC (P) and Thus, the resulting absolute CFC value is 16
abs
CFC (P), the greater the overall architectural (i.e., 3+3+2+23-1+1). The relative CFC is
rel
complexity of a process. CFC analysis seeks to 16/5=3,2.
Box 1.
CFC (P)
CFC (P)= abs
rel |{XOR-splits of p}∪{OR-splits of p}∪{AND-splits of p}|
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
International Journal of Web Services Research, 5(2), 49-76, April-June 2008 61
Figure 11. The loan application process
Table 2. CFC metrics for the process from
Figure 3
the activity complexity metric. This is because
Split CFC the CFC metric only analyzes a process from
CFC (Check Loan Type) 3 the control-flow point of view. As a result, it
XOR-split
may happen that two processes with a different
CFC (Check Home Loan) 3
XOR-split
number of activities have the same control-flow
CFC (Check Car Loan) 2
XOR-split structure and, therefore, the same CFC. The use
CFC (Archive Application) 23-1
OR-split of the activity complexity metric allows deriv-
CFC (Check Education Loan) 1 ing additional information about the complexity
AND-split
CFC (Loan Application) =16 of a process.
abs
One important question that needs to be
CFC (Loan Application) =3,2
rel
investigated and answered is what are both the
meaning of a given metric (e.g., what is the
significance of the CFC of 16 and 3,2 obtained
in our example) and the precise number to use
Since the results of the CFC analysis gave
as a CFC limit in a process development. This
a value considered to be low, it was determined
answer will be given from empirical results
that the process has a low complexity, and
only when organizations have successfully
therefore, its implementation presented a low
implemented complexity limits as part of their
risk for the bank. Therefore, the process was
process development projects. For example,
deployed and implemented in a production
when using McCabe complexity metrics, the
environment. As further research is conducted
original limit of 10 indicates a simple program
in this area, it will become clear that in many
without much risk; a complexity metric between
cases, it is necessary to limit CFC of process
11 and 20 designates a more complex program
applications.
with moderate risk, and a metric between 21
It should be noticed that in order to cor-
and 50 denotes a complex program with high
rectly analyze the complexity of a business
risk. Finally, a complexity metric greater than
process, the CFC metric should not be used in
50 denotes an untestable program with a very
isolation. A useful and simple metric that can
high risk. We expect that limits for CFC will
be used in conjunction with the CFC metric is
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
62 International Journal of Web Services Research, 5(2), 49-76, April-June 2008
be obtained and set in the same way, using and that even if two programs solve the same
empirical and practical results from research problem, they can have different complexi-
and from real-world implementation. ties. Weyuker’s fifth property states that the
complexity of two programs joined together is
control-Flow coMPlExIty greater than the complexity of either program
considered separately. The sixth property
And wEyukEr’s
states that a program of a given complexity
ProPErtIEs
when joined to two other programs does not
In the area of software measurement, the
necessarily mean the resulting program will
methods and theory developed have had a
be of equal complexity, even if the two added
reduced industrial acceptance. According to
programs are of equal complexity. Weyuker’s
some research, one reason is that there is a lack
seventh property states that a permuted version
of serious validation of proposed metrics and,
of a program can have a different complexity,
thus, a lack of confidence in the measurements.
so the order of statements matters. The eighth
To overcome this difficulty, we will study
property states that if a program is a straight
nine desirable properties (necessary but not
renaming of another program, its complexity
sufficient) suggested by Weyuker (1988) that
should be the same as the original program.
should be satisfied by any good “complexity
The final property states the complexity of two
measure.”
programs joined together may be greater than
Weyuker properties have been applied to
the sum of their individual complexities. The
software engineering and have been seriously
properties are summarized in Table 3.
discussed in the literature (Fenton, 1994; Kitch-
enham, Pfleeger, & Fenton, 1996; Morasca,
concatenation operations on Pro-
Briand, Weyuker, & Zelkowitz, 1997; Zuse,
cesses
1997) Although these properties also have
Weyuker introduces the concatenation operation
been criticized (Cherniavsky & Smith, 1991),
(P1;P2) of program blocks. Weyuker defines the
currently they are still subject to debate and
concatenation operation in the following way:
refinement. Nevertheless, Weyuker properties
a program can be uniquely decomposed into a
are a widely known formal analytical approach
set of disjointed blocks of ordered statements
and were therefore chosen for our analysis since
having the property whenever the first statement
they do provide a basis for some validation of
in the block is executed; the other statements
complexity metrics. As shown by Weyuker,
are executed in the given order.
with such properties, it is possible to filter out
In our approach and since we are dealing
measurements with undesirable properties.
with processes, four concatenation operations
The majority of these properties are formu-
exist. Processes can be concatenated either
lated in a clear way. This is an advantage because
sequentially using an AND, an OR, or an XOR.
we are able to discuss them. We will concentrate
These last three concatenation operations use
and study each property individually.
splits and joins. Every AND/OR/XOR split has
also a corresponding AND/OR/XOR join, and
summary of weyuker’s Properties
the different splits do not overlap each other. We
Weyuker’s first property states that a metric
have decided to only allow the construction of
cannot measure all software programs as being
well-structured processes (van der Aalst, 1998)
equally complex. The second property states
that are based on a set of predefined building
that there is only a finite number of programs
blocks. This protects users from designing
of the same complexity. The third property
invalid processes. Van der Aalst (1998) has
states that each program may be complex.
shown that processes that are not well-structured
The fourth property states that the complexity
contain design errors, such as nontermination,
of a program depends on its implementation
deadlocks, and splitting of instances. We use
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
International Journal of Web Services Research, 5(2), 49-76, April-June 2008 63
Table 3. Weyuker’s properties
Property Description
1 A metric cannot measure all software programs as being equally complex.
2 There is only a finite number of programs of the same complexity.
3 Each program may be complex.
4 If two programs solve the same problem, they can have different complexities.
The complexity of two programs joined together is greater than the complexity of either
5
program considered separately.
A program of a given complexity when joined to two other programs does not necessarily
6 mean the resulting program will be of equal complexity, even if the two added programs are
of equal complexity.
7 A permuted version of a program can have a different complexity.
8 If a program is a renaming of another program, its complexity should be the same.
The complexity of two programs joined together may be greater than the sum of their indi-
9
vidual complexities.
Weyuker’s properties to evaluate the CFC 2. When process P is concatenated with pro-
metric, assuming that the processes are well- cess Q using an AND-split and an AND-
structured for simplicity reasons. The CFC join, we depict the resulting process as P•Q.
metric can be applied to well-structured and This type of concatenation is illustrated in
unstructured processes. Figure 13.
In the list of following properties, P, Q, and 3. When process P is concatenated with pro-
R represent processes, and the complexity of P cess Q using an OR-split and an OR-join,
computed by our complexity measure CFC(P) we depict the resulting process as PoQ.
is represented by |P|. This type of concatenation has the same
illustration as the one in Figure 13, except
1. When process P is concatenated sequen- that the AND-split and the AND-join shown
tially with process Q, we depict the resulting are replaced with an OR-split and an OR-
process as P-Q. This type of concatenation join, respectively.
is illustrated in Figure 12.
Figure 12. Sequential concatenation
P-Q
P Q
Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global
is prohibited.
64 International Journal of Web Services Research, 5(2), 49-76, April-June 2008
Figure 13. AND concatenation least two processes. The property stresses that
a measure in which all processes are equally
P•Q
complex is not really a measure.
P With our measure, we can always come up
with two processes with two different control-
flow complexity values. We can always design
a process P that has the same number of split
AND-split AND-join
types but with a higher fan-out from those in
process Q. As another example, let us take