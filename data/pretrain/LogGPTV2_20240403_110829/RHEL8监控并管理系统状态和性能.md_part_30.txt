::: section
::: titlepage
## []{#tuning-cpu-frequency-to-optimize-energy-consumption_monitoring-and-managing-system-status-and-performance.html#setting-up-cpufreq-governor_tuning-cpu-frequency-to-optimize-energy-consumption}设置 CPUfreq 调控器 {.title}
:::
所有 CPUfreq 驱动程序都作为 `kernel-tools`{.literal}
软件包的一部分内置，并自动选择。要设置 CPUfreq，您需要选择一个调控器。
::: itemizedlist
**先决条件**
-   要使用 `cpupower`{.literal}，请安装 `kernel-tools`{.literal}
    软件包：
    ``` screen
    # {PackageManagerCommand} install kernel-tools
    ```
:::
::: orderedlist
**流程**
1.  查看哪些调控器可用于特定 CPU：
    ``` screen
    # cpupower frequency-info --governors
    analyzing CPU 0:
      available cpufreq governors: performance powersave
    ```
2.  在所有 CPU 上启用其中一个调控器：
    ``` screen
    # cpupower frequency-set --governor performance
    ```
    根据您的要求，将 `性能`{.literal} 调控器替换为 `cpufreq`{.literal}
    调控器名称。
    要只启用特定内核的调控器，请使用 `-c`{.literal}
    带有一个范围或以逗号分隔的 CPU 编号列表。例如，要为 CPU 1-3 和 5
    启用 `用户空间`{.literal} 调控器，请使用：
    ``` screen
    # cpupower -c 1-3,5 frequency-set --governor cpufreq_userspace
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果没有安装 `kernel-tools`{.literal} 软件包，可以在
`/sys/devices/system/cpu/cpuid/cpufreq/ 目录中查看 CPUfreq`{.literal}
设置。可以通过写入这些可调项来更改设置和值。例如，要将 cpu0
的最小时钟速度设置为 360 MHz，请使用：
``` screen
# echo 360000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
```
:::
::: itemizedlist
**验证**
-   验证调控器是否已启用：
    ``` screen
    # cpupower frequency-info
    analyzing CPU 0:
      driver: intel_pstate
      CPUs which run at the same hardware frequency: 0
      CPUs which need to have their frequency coordinated by software: 0
      maximum transition latency:  Cannot determine or is not supported.
      hardware limits: 400 MHz - 4.20 GHz
      available cpufreq governors: performance powersave
      current policy: frequency should be within 400 MHz and 4.20 GHz.
            The governor "performance" may decide which speed to use within this range.
      current CPU frequency: Unable to call hardware
      current CPU frequency: 3.88 GHz (asserted by call to kernel)
      boost state support:
        Supported: yes
        Active: yes
    ```
    当前策略显示最近启用的 `cpufreq 调控`{.literal} 器。本例中为
    `性能`{.literal}。
:::
::: itemizedlist
**其它资源**
-   `cpupower-frequency-info(1)`{.literal} 和
    `cpupower-frequency-set(1)`{.literal} man page
:::
:::
:::
:::
[]{#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#getting-started-with-perf_monitoring-and-managing-system-status-and-performance}第 18 章 perf 入门 {.title}
:::
作为系统管理员，您可以使用 `perf`{.literal}
工具来创建和管理系统的性能数据。
::: section
::: titlepage
# []{#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#introduction-to-perf_getting-started-with-perf}perf 简介 {.title}
:::
`perf`{.literal} 用户空间工具与基于内核的 [*Linux
子系统性能计数器*]{.emphasis} (PCL)接口。`Perf`{.literal}
是一个强大的工具，它使用性能监控单元(PMU)来测量、记录和监控各种硬件和软件事件。`perf`{.literal}
还支持追踪点、kprobes 和 uprobes。
:::
::: section
::: titlepage
# []{#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf}安装 perf {.title}
:::
这个过程安装 `perf`{.literal} 用户空间工具。
::: itemizedlist
**流程**
-   安装 `perf`{.literal} 工具：
    ``` screen
    # {PackageManagerCommand} install perf
    ```
:::
:::
::: section
::: titlepage
# []{#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#common-perf-commands_getting-started-with-perf}常见的 perf 命令 {.title}
:::
本节概述了常用 `perf`{.literal} 命令。
::: variablelist
**通常使用 perf 命令**
[`perf stat`{.literal}]{.term}
:   此命令提供常见性能事件的整体统计信息，包括执行的指令和消耗的时钟周期。选项允许选择默认测量事件以外的事件。
[`perf 记录`{.literal}]{.term}
:   此命令将性能数据记录到文件 `perf.data`{.literal} 中，后可通过
    `perf 报告`{.literal} 命令进行分析。
[`perf 报告`{.literal}]{.term}
:   此命令读取并显示 perf `记录`{.literal} 创建的 `perf.data`{.literal}
    文件中的性能数据。
[`perf 列表`{.literal}]{.term}
:   此命令会列出特定计算机上可用的事件。这些事件将根据系统的性能监控硬件和软件配置而有所不同。
[`perf 顶部`{.literal}]{.term}
:   此命令执行类似于 `top`{.literal}
    实用程序的功能。它实时生成并显示性能计数器配置文件。
[`perf trace`{.literal}]{.term}
:   此命令执行类似于 `strace`{.literal}
    工具的功能。它监控指定线程或进程使用的系统调用，以及该应用收到的所有信号。
[`perf 帮助`{.literal}]{.term}
:   此命令显示 `perf`{.literal} 命令的完整列表。
:::
::: itemizedlist
**其它资源**
-   将 `--help`{.literal} 选项添加到 子命令以打开 man page。
:::
:::
:::
[]{#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance.html#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance}第 19 章 使用 perf top 实时分析 CPU 使用情况 {.title}
:::
您可以使用 `perf top`{.literal} 命令实时测量不同功能的 CPU 使用情况。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: section
::: titlepage
# []{#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance.html#the-purpose-of-perf-top_profiling-cpu-usage-in-real-time-with-top}perf top 的目的 {.title}
:::
`perf top`{.literal} 命令用于实时系统分析，其功能与 `top`{.literal}
实用程序类似。但是，`top`{.literal} 实用程序通常显示给定进程或线程使用的
CPU 时间，perf `top`{.literal} 会显示每个特定功能使用的 CPU
时间。在默认状态下，`perf top`{.literal}
将告知您用户空间和内核空间的所有 CPU 所使用的功能。要使用
`perf top`{.literal}，您需要 root 访问权限。
:::
::: section
::: titlepage
# []{#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance.html#profiling-cpu-usage-with-perf-top_profiling-cpu-usage-in-real-time-with-top}使用 perf top 分析 CPU 使用率 {.title}
:::
此流程实时激活 `每f 个 top`{.literal} 和配置集 CPU 使用情况。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
-   具有 root 访问权限
:::
::: itemizedlist
**流程**
-   启动 `perf 顶级`{.literal} 监控接口：
    ``` screen
    # perf top
    ```
    监控接口类似如下：
    ``` screen
    --------------------------------------------------------------------
    PerfTop:   20806 irqs/sec  kernel:57.3%  exact: 100.0% lost: 0/0 drop: 0/0 [4000Hz cycles],  (all, 8 CPUs)
    ---------------------------------------------------------------------
    Overhead  Shared Object       Symbol
       2.20%  [kernel]            [k] do_syscall_64
       2.17%  [kernel]            [k] module_get_kallsym
       1.49%  [kernel]            [k] copy_user_enhanced_fast_string
       1.37%  libpthread-2.29.so  [.] pthread_mutex_lock 1.31% [unknown] [.] 0000000000000000 1.07% [kernel] [k] psi_task_change 1.04% [kernel] [k] switch_mm_irqs_off 0.94% [kernel] [k] fget
       0.74%  [kernel]            [k] entry_SYSCALL_64
       0.69%  [kernel]            [k] syscall_return_via_sysret
       0.69%  libxul.so           [.] 0x000000000113f9b0
       0.67%  [kernel]            [k] kallsyms_expand_symbol.constprop.0
       0.65%  firefox             [.] moz_xmalloc
       0.65%  libpthread-2.29.so  [.] __pthread_mutex_unlock_usercnt
       0.60%  firefox             [.] free
       0.60%  libxul.so           [.] 0x000000000241d1cd
       0.60%  [kernel]            [k] do_sys_poll
       0.58%  [kernel]            [k] menu_select
       0.56%  [kernel]            [k] _raw_spin_lock_irqsave
       0.55%  perf                [.] 0x00000000002ae0f3
    ```
    在本例中，内核功能 `do_syscall_64`{.literal} 使用最多 CPU 时间。
:::
::: itemizedlist
**其它资源**
-   `perf-top(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance.html#interpretation-of-perf-top-output_profiling-cpu-usage-in-real-time-with-top}perf 最高输出的解读 {.title}
:::
`perf 顶级`{.literal} 监控界面在几个列中显示数据：
::: variablelist
[\"Overhead\"列 ]{.term}
:   显示给定功能正在使用的 CPU 百分比。
[\"共享对象\"列 ]{.term}
:   显示使用 函数的程序或库的名称。
[\"Symbol\"列 ]{.term}
:   显示函数名称或符号。内核空间中执行的功能由 `[k]`{.literal}
    标识，用户空间中执行的功能则由 `[.]`{.literal} 识别。
:::
:::
::: section
::: titlepage