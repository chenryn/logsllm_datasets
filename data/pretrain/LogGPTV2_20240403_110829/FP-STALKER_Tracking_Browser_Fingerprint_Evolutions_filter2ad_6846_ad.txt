languages HTTP  0.85 then
return fk
candidates ← ∅
for fk ∈ F do
changes ← DIFF(fu, fk)
if |changes| = 1 then
end if
end for
if |candidates| = 1 then
return fk
else
return N U LL
end if
end if
Fig. 6: Overview of our evaluation process that allows testing
the algorithms using different simulated collection frequencies.
Algorithm 4 Eckersley ﬁngerprint matching algorithm [8]
ALLOW ED = {cookies, resolution, timezone, local}
function FINGERPRINTMATCHING(F, fu)
end function
MATCHRATIO refers to the Python standard library function
difflib.SequenceMatcher().ratio() for estimating the
similarity of strings.
B. Comparison with Panopticlick’s linking algorithm
in the context of
We compare FP-STALKER to the algorithm proposed
by Eckersley [8]
the PANOPTICLICK
project. To the best of our knowledge, there are no other
algorithms to compare to. Although Eckersley’s algorithm
has been characterized as “naive” by its author, we use
it as a baseline to compare our approach. The PANOP-
TICLICK algorithm is summarized in Algorithm 4. It uses
the following 8 attributes: User agent, accept, cookies
enabled, screen resolution, timezone, plugins,
fonts and local storage. Given an unknown ﬁngerprint
fu, PANOPTICLICK tries to match it to a previous ﬁngerprint of
the same browser instance if a sufﬁciently similar one exists—
736
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV: Number of ﬁngerprints per generated test set after
simulating different collect frequencies
Collect frequency (days)
1
2
3
4
5
6
7
8
10
15
20
Number of ﬁngerprints
171, 735
86, 225
57, 695
43, 441
34, 916
29, 195
25, 155
22, 065
17, 814
12, 100
9, 259
Fig. 8: Average tracking duration against simulated collect
frequency for the three algorithms
fk, then FP-STALKER assigns the id fk.id to fu, otherwise
it assigns a new id. In both cases, fu is added to F . The
chronological order of the ﬁngerprints implies that at time
t, a browser ﬁngerprint can only be linked with a former
ﬁngerprint collected at a time t(cid:2) < t. This approach ensures
a more realistic scenario, similar to online ﬁngerprint tracking
approaches, than if we allowed ﬁngerprints from the past to
be linked with ﬁngerprints collected in the future.
D. Tracking duration
Figure 8 plots the average tracking duration against the
collect frequency for the three algorithms. On average, browser
instances from the test set were present for 109 days, which
corresponds to the maximum value our linking algorithm could
potentially achieve. We see that the hybrid variant of FP-
STALKER is able to keep track of browser instances for a
longer period of time than the two other algorithms. In the
case where a browser gets ﬁngerprinted every three days,
FP-STALKER can track it for 51, 8 days, on average. More
generally, the hybrid variant of FP-STALKER has an average
tracking duration of about 9 days more than the rule-based
variant and 15 days more than the Panopticlick algorithm.
Figure 9 presents the average maximum tracking duration
against the collect frequency for the three algorithms. We
see that the hybrid algorithm still outperforms the two other
algorithms because the
it constructs longer tracking chains
with less mistakes. On average, the maximum average tracking
duration for FP-STALKER’s hybrid version is in the order of
74 days, meaning that at most users were generally tracked for
this duration.
Fig. 7: Example of the process to generate a simulated test
set. The dataset contains ﬁngerprints collected from browser’s
A and B, which we sample at a collect f requency of 2
days to obtain a dataset that allows us to test the impact of
collect f requency on ﬁngerprint tracking.
i.e., no more than one attribute changed. Otherwise, if it found
no similar ﬁngerprints, or too many similar ﬁngerprints that
belong to different browser instances, it assigns a new id.
Moreover, although at most one change is allowed, this change
can only occur among the following attributes: cookies,
resolution, timezone and local storage.
C. Dataset generation using ﬁngerprint collect frequency
To evaluate the effectiveness of FP-STALKER we start
test set of 59, 159 ﬁngerprints collected from
from our
1, 395 browser instances (60% of our input dataset, see Sec-
tion IV-C2b). However, we do not directly use this set. Instead,
by sampling the test set, we generate new datasets using a
conﬁgurable collect frequency. Because our input dataset is
ﬁne-grained, it allows us to simulate the impact ﬁngerprinting
frequency has on tracking. The intuition being that if a browser
is ﬁngerprinted less often, it becomes harder to track.
To generate a dataset for a given collect frequency, we start
from the test set of 59, 159 ﬁngerprints, and, for each browser
instance, we look at the collection date of its ﬁrst ﬁngerprint.
Then, we iterate in time with a step of collect f requency
days and recover the browser instance’s ﬁngerprint at time
t + collect f requency. It may be the same ﬁngerprint as the
previous collect or a new one. We do this until we reach the
last ﬁngerprint collected for that browser id. This allows us
to record a sequence of ﬁngerprints that correspond to the
sequence a ﬁngerprinter would obtain if the browser instance
was ﬁngerprinted at a frequency of collect f requency days.
The interest of sampling is that it is more realistic than using
all of the ﬁngerprints from our database since they are very
ﬁne-grained. Indeed, the extension is capable of catching even
short-lived changes in the ﬁngerprint (e.g., connecting an exter-
nal monitor), which is not always possible in the wild. Finally,
it allows us to investigate how ﬁngerprint collection frequency
impacts browser tracking. Figure 7 provides an example of the
process to generate a dataset with a collect f requency of two
days. Table IV presents, for each simulated collect frequency,
the number of ﬁngerprints in the generated test sets.
The browser ﬁngerprints in a generated test set are ordered
chronologically. At the beginning of our experiment, the set
of known ﬁngerprints (F ) is empty. At each iteration, FP-
STALKER tries to link an unknown ﬁngerprint fu with one
of the ﬁngerprints in F . If it can be linked to a ﬁngerprint
737
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 9: Average maximum tracking duration against simulated
collect frequency for the three algorithms. This shows averages
of the longest tracking durations that were constructed.
Fig. 11: Average ownership of tracking chains against simu-
lated collect frequency for the three algorithms. A value of 1
means the tracking chain is constructed perfectly.
Fig. 10: Average number of assigned ids per browser instance
against simulated collect frequency for the three algorithms
(lower is better).
Figure 10 shows the number of ids they assigned, on aver-
age, for each browser instance. We see that PANOPTICLICK’s
algorithm often assigns new browser ids, which is caused by
its conservative nature. Indeed, as soon as there is more than
one change, or multiple candidates for linking, Panopticlick’s
algorithm assigns a new id to the unknown browser instance.
However, we can observe that both FP-STALKER’s hybrid and
rule-based variants perform similarly.
Finally, Figure 11 presents the average ownership of track-
ing chains against the collect frequency for the three algo-
rithms. We see that, despite its conservative nature, PANOP-
TICLICK’s ownership is 0.94, which means that, on average,
6% of a tracking chain is constituted of ﬁngerprints that do
not belong to the browser instance that owns the chain—i.e.,
it is contaminated with other ﬁngerprints. The hybrid variant
of FP-STALKER has an average ownership of 0.985, against
0.977 for the rule-based.
When it comes to linking browser ﬁngerprints, FP-
STALKER’s hybrid variant is better, or as good as, the rule-
based variant. The next paragraphs focus on a few more results
we obtain with the hybrid algorithm. Figure 12 presents the
cumulative distribution of the average and maximum tracking
duration when collect f requency equals 7 days for the hybrid
variant. We observe that, on average, 15, 5% of the browser
instances are tracked more than 100 days. When it comes to the
the longest tracking chains, we observe that more than 26% of
the browser instances have been tracked at least once for more
Fig. 12: CDF of average and maximum tracking duration for a
collect frequency of 7 days (FP-STALKER hybrid variant only).
than 100 days during the experiment. These numbers show
how tracking may depend on the browser and its conﬁguration.
Indeed, while some browsers are never tracked for a long
period of time, others may be tracked for multiple months. This
is also due to the duration of presence of browser instances in
our experiments. Few browser instances were present for the
whole experiment, most for a few weeks, and at best we can
track a browser instance only as long as it was present. The
graph also shows the results of the perfect linking algorithm,
which can also be interpreted as the distribution of duration of
presence of browser instances in our test set.
The boxplot in Figure 13 depicts the number of ids gener-
ated by the hybrid algorithm for a collect frequency of 7 days.
It shows that half of the browser instances have been assigned
2 identiﬁers, which means they have one mistake, and more
than 90 % have less than 9 identiﬁers.
Finally, we also look at the distribution of the chains to
see how often ﬁngerprints from different browser instances are
mixed together. For the FP-STALKER hybrid variant, more than