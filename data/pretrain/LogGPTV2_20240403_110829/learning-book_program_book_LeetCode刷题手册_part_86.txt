·于是针对每一项的二项式常数，都可以由前一项乘以一个分数得到下一项。
C =1
=
 1 + 1
1
C²=C
2 +1
2
C3
3 +1
3
tk+1
C
k
·利用二分搜索，不断的二分t，直到逼近找到f（t，k）≥N时候最小的t。时间复杂度o（K
---
## Page 851
1ogN），空间复杂度o（1）。
代码
package leetcode
//解法一二分搜索
func superEggDrop(K int, N int) int {
1ow, high := 1, N
for low >1
if counterF(K, N, mid) >= N {
high = mid
}else{
1ow = mid + 1
return 1ow
//计算二项式和，特殊的第一项c（t，0）=1
func counterF(k, n,mid int) int {
res, sum := 1, 0
for i := 1; i  0; i--{
dp[i] = (1 + dp[i] + dp[i-1]])
return step
888.FairCandySwap
---
## Page 852
题目
Alice and Bob have candy bars of different sizes: A[i] is the size of the i-th bar of candy that
Alice has, and B[j] is the size of the j -th bar of candy that Bob has.
Since they are friends, they would like to exchange one candy bar each so that after the
exchange, they both have the same total amount of candy. (The total amount of condy a person
has is the sum of the sizes of candly bors they hove.)
Return an integer array ans where ans [o] is the size of the candy bar that Alice must exchange,
and ans [1] is the size of the candy bar that Bob must exchange.
If there are multiple answers, you may return any one of them. t is guaranteed an answer exists.
Example 1:
Input: A = [1,1], B = [2,2]
output: [1,2]
Example 2:
Input: A = [1,2], B = [2,3]
Output: [1,2]
Example 3:
Input: A = [2], B = [1,3]
output: [2,3]
Example 4:
Input: A = [1,2,5] , B = [2,4]
output: [5,4]
Note:
●1  b {
return a
3
return b
891.SumofSubsequenceWidths
题目
 jo sauanbasqns Adwa-uou lle apisuo  saau jo ee ue uani
For any sequence S, let the width of S be the dlifference between the maximum and minimum
element of S.
Return the sum of the widths of all subsequences of A.
As the answer may be very large, return the answer modulo 10^9 + 7.
Example 1:
Input: [2,1, 3]
Output: 6
Explanation:
Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3] .
The corresponding widths are 0, 0, 0, 1, 1, 2, 2.
The sum of these widths is 6.
Note:
●1  0 {
m := min(grid[i][j], grid[i-1][j])
area -= m
umop//
if i  0 {
m := min(grid[i][j], grid[i][j-1])
area == m
//right
if j b {
return b
return a
895.MaximumFrequencyStack
题目
Implement FreqStack, a class which simulates the operation of a stack-like data structure.
FreqStack has two functions:
---
## Page 858
push(int x), which pushes an integer x onto the stack.
pop(), which removes and returns the most frequent element in the stack.
If there is a tie for most frequent element, the element closest to the top of the stack is removed
and returned.
Example 1:
Input:
["FreqStack","push","push","push","push","push","push","pop","pop","pop","pop"
],
[[] , [5] , [7] , [5], [7],[4] , [5] , [] , [], [] , []
Output: [nu11,nu11,nu11,nu11,nu11,nu11,nu11,5,7,5, 4]
Explanation:
After making six .push operations, the stack is [5,7,5,7,4,5] from bottom to
top.Then:
pop() -> returns 5, as 5 is the most frequent.
The stack becomes [5,7,5,7,4].
pop) -> returns 7, as 5 and 7 is the most frequent, but 7 is closest to the
top.
The stack becomes [5,7,5,4] .
pop() -> returns 5.
The stack becomes [5,7,4].
pop() -> returns 4.
The stack becomes [5,7]
Note:
● Calls to FreqStack.push(int x) will be such that 0  this.maxfreq {
this.maxfreq = f
this.group[f]= append(this.group[f],x)
}
func (this *FreqStack) PopO int {
tmp := this-group[this.maxfreq]
×:= tmp[1en(tmp)-1]
this . group[this .maxfreq]= this group[this.maxfreq]
[: 1en(this. group[this.maxfreq])-1]
this.freq[x]--
if len(this.group[this.maxfreq]) == 0 {
this.maxfreq--
return x
---
## Page 860
* Your FreqStack object will be instantiated and called as such:
*obj:= ConstructorO;
*obj.Push(x);
* param_2 := obj.PopO ;
*/
896.MonotonicArray
题目
seap aooo o seai ooo ala s il gi so s e u
o s  e   => [  =>  e ro j isi aooo si  ee 
decreasing if for all i = A[j] .
Return true if and only if the given array A is monotonic.
Example 1:
Input: [1,2,2,3]
output: true
Example 2:
Input: [6, 5, 4,4]
Output: true
Example 3:
Input: [1,3,2]
output: false
Example 4:
Input: [1,2,4,5]
Output: true
Example 5:
Input: [1,1,1]
output: true
Note:
---
## Page 861
1. 1 =A[U]，那么数组A是单调递减的。当给定的数组A是单调数
组时返回 true，否则返回false。
解题思路
·判断给定的数组是不是单调（单调递增或者单调递减）的。
·简单题，按照题意循环判断即可。
代码
package leetcode
func isMonotonic(A []int) bool {
if len(A)  A[1]{
return dec(A[1:])
return inc(A[1:]) 11 dec(A[1:])