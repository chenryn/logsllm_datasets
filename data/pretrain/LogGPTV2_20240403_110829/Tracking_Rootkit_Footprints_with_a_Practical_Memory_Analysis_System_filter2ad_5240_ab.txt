f ) is the ﬁeld pointer which points to a ﬁeld inside the
structure ∗p. We use p + f to denote &(p → f ), and
p+ f is in fact the result of offsetting p by a ﬁxed number
of bytes determined by ﬁeld f . The other constructs p →
f (= ∗(p + f )) and a. f (= (&a) → f = ∗(&a + f )) are
merely syntactic sugar, as shown in Figure 2.
To support ﬁeld-sensitivity in our pointer analysis, we
ﬁrst add edges to the PEG to represent the ﬁeld relations.
For every ﬁeld descriptor, we create a ﬁeld label fi. Then
for each base pointer p, if its ﬁeld pointer p + fi exists
in the program, we add an edge labeled fi from p to p +
fi and an inverse edge fi in the opposite direction. As
shown in Figure 2.
Zheng and Rugina [27] suggest adding V ::= fiV fi to
the grammar GV for ﬁeld-sensitivity. With this addition,
the grammar becomes:
M ::= (DV D)?
V
::= M | (M?A)∗V (AM?)∗ | fiV fi
4
!"!"!"#"#"#""$"%"&"'()"$*#""%"&"(+,#"&"'%(-#)")"$*.""%"&"(+,."&"'%(-.)")"! (""%"&"/$")"! (-#""%"&"/%(+,#)")"! (-.""%"&"/%(+,.)")"$00123"(&/$"/$"%/$)-#"$"%/$)-."$*#"$*."."."."!"!"!"!"!"!"3.2.1 Candidate Types of Generic Pointers
A generic pointer is a pointer whose type deﬁnition does
not reveal the actual type of the data it refers to. In MAS,
we consider two kinds of generic pointers: void∗ and
pointers in linked list constructs. We consider linked list
constructs because the declared type of its pointer ﬁelds
does not reﬂect the larger data structure it links together
in the list.
For an expression p of type void∗, its candidate types
are the set of types of its value aliases. For instance,
given FOO ∗ q; void ∗ p; p = q, we get p’s candidate
type as FOO∗. To derive the candidate types for a pointer
ﬁeld fi of type void∗, we need to consider all its instances.
Thus, fi’s candidate types are the set of types of all the
value aliases of the pointer ﬁeld’s instances in the form
of X → fi.
We need to solve two problems to compute candidate
types for pointer ﬁelds in linked list constructs. First,
we are concerned with the larger data structures that are
linked together in a list. When a linked list pointer ﬁeld’s
value alias is in the form of &(a− > fi), we say its nested
candidate type is &(A− > fi) where a’s type is A∗. This
nested candidate type allows us to identify the larger data
structure A when the linked list pointer points to its ﬁeld
fi. For simplicity, we still use candidate types when we
discuss linked list constructs.
Second, the head node and the entry nodes in a linked
list tend to have different data structures. If we do not
differentiate them, the candidate types of a linked list
pointer ﬁeld will have both types, which causes unnec-
essary type ambiguity. To solve this problem, we lever-
age the semantics of APIs for linked list constructs. For
instance, InsertTailList is a function in Windows [16] for
inserting an entry at the tail of a doubly linked list. It
takes two parameters, ListHead and Entry. To differenti-
ate the list head and entry, we compute the value alias
sets of ListHead/InsertTailList and Entry/InsertTailList,
where a/ f unc represents the parameter a of a function
f unc. Then we match value aliases from each set based
on the call stack. For each valid pair of &(a → fi) and
&(b → f j), we derive that a list head at &(A → fi) has a
nested candidate type of &(B → f j) where a’s type is A∗
and b’s type is B∗. This approach requires prior knowl-
edge of all linked list constructs and their APIs. Given
the limited number of such constructs, it is not a hurdle
for adapting MAS to large programs like the Windows
kernel and drivers.
To control the number of candidate types, we apply
three reﬁnement techniques to the basic algorithm. First,
for every linked list pointer p, MAS excludes all value
aliases q of p if q’s type is different from p. This is be-
cause we did not observe any link list pointers being con-
verted to other types, and such value aliases are almost
5
struct A {
struct C ac;
struct D ad;
};
struct B {
struct C bc;
struct E be;
};
Figure 4: Example of a common nested type.
always false positives introduced by imprecise analysis.
Second, for each pointer path from p to its value alias q,
we check if it involves a type cast to void∗. If so, we will
ignore the path. We do this for two reasons: the type be-
fore the cast has already revealed the candidate type, and
we avoid the noisy aliases following the type cast. Third,
when there are multiple candidate types, we look for the
largest common nested types among all candidate types.
If such a common nested type exists, we use it as the sin-
gle candidate type. In the example shown in Figure 4,
the largest common nested type of struct A and struct B
is struct C.
3.2.2 Candidate Types of Pool Tags
In recent Windows operating systems, pool tags [18] are
used to track memory allocations of one or more par-
ticular data types by a kernel component. A pool tag
is a four-character literal passed to the pool manager at
a memory allocation or deallocation. One such API is
ExAllocatePoolWithTag. For many pool tags, a memory
block with a particular pool tag is always allocated for
a unique data type. For instance, “Irp ” is always for
the data type IRP. In MAS, we use static analysis to au-
tomatically unearth the associations between a pool tag
and data types and use them in our memory traversal.
We call the types associated with a pool tag the candidate
types for the pool tag. Note that such associations are not
limited to Windows. In the Linux kernel, the slab allo-
cator is used to provide specialized per-type allocations.
In this paper, our design and implementation are focused
on supporting Windows kernel pool management. But
the techniques can be easily ported to support Linux ker-
nel memory management.
sets
for
constructs.
an
Taking
example, we ﬁrst
Our approach for computing pool tag’s type infor-
mation is similar to the approach used for linked
list
ExAllocatePoolWithTag
value
the
as
compute
and
alias
return/ExAllocatePoolWithTag
Tag/ExAllocatePoolWithTag, where the former
rep-
resents the return value of ExAllocatePoolWithTag and
the latter is the pool tag parameter. Since pool tags are
usually speciﬁed directly at function calls for memory
allocations, we do a simple traversal by following as-
signments on the program expression graph to compute
the “value alias” set of Tag/ExAllocatePoolWithTag.
Then we match the value aliases in each set based on the
call stack. For instance, given the following code, our
analysis will infer that the pool tag ’DooF’ is associated
with the type FOO.
FOO ∗ f = (FOO∗) ExAllocatePoolWithTag( NonPagedPool,
sizeo f ( FOO ), (cid:48)DooF(cid:48));
4 Memory Traversal
In this section, we describe how MAS locates dynamic
data objects in a given memory snapshot and identiﬁes
their types. The inputs to this step include the mem-
ory snapshot, the type related information derived from
static analysis, and the symbol information [15] for each
loaded module in the memory snapshot (if it is available).
The basic memory traversal in MAS is similar to pre-
vious work [2, 3, 19]. It ﬁrst locates the static objects
in each loaded module based on the symbol informa-
tion, then performs a breadth-ﬁrst traversal by follow-
ing pointers in the static objects and all newly identiﬁed
data objects until no new object is added. MAS follows
generic pointers for which our static analysis was able to
derive a unique type. In the absence of a robust method
for resolving multiple type candidates during memory
traversal, MAS ignores all ambiguous pointers.
In order to increase coverage, MAS uses the associa-
tions between a pool tag and data types that may appear
in memory blocks labeled with this tag. We directly iden-
tify data objects (i.e., without following a pointer) when
a pool tag is only associated with a single data type.
Invalid pointers are common in kernel memory for
many reasons. There may be a lag between the time
a pool block is allocated and the time it is initialized.
Also, a dangling pointer may point to a pool block that
was freed and allocated again for different use. There
exist even data objects that are partially initialized due to
performance optimizations (or programming errors).
Our solution to invalid pointers have two main com-
ponents: constraint checking and error correction. We
only add a new data object during memory traversal or
during type assignment based on pool tags if it satisﬁes
the following constraints.
• Size Constraint: a data object must lie completely
within a memory block. (We collect the information
of all allocated memory blocks before the memory
traversal.)
• Pointer Constraint: a data object’s pointer ﬁelds
must either be null or point to the kernel address
range.
6
• Enum Constraint: a data object’s enum ﬁelds must
take a valid enum value which is stored in the PDB
ﬁles.
• Pool Tag Constraint: the type of a data object must
be in the set of data types associated with the pool
block in which the data object is located.
KOP [3] only checks size and pointer constraints,
which is not effective for smaller sized objects since they
tend to have fewer pointer ﬁelds and ﬁt into most mem-
ory blocks. The checking of pool tag constraints allows
MAS to mitigate this problem.
A ﬁnal constraint states that two incompatible objects
cannot occupy overlapping addresses. We say two over-
lapped objects are type compatible if their overlapped
parts have equivalent types (i.e., with the same mem-
ory layout after being expanded into primitive types and
pointers). For example, one object may be a sub struc-
ture of the other object. We check this constraint before
accepting an object. A violation of this constraint is a
clear indication that an error has been made or is about
to be made. Either the new object or the existing object
that collides with it must be wrong.
We select one of the two objects based on several con-
ﬁdence criteria. Objects that we found without following
pointers, such as global variables or objects identiﬁed
through pool tags, are not subject to invalid pointer er-
rors. We always select such objects over other objects.
If both objects were found by following pointers, we
select the larger object, since we typically check more
constraints for larger objects. If the decision is to reject
the existing object, we also remove all objects that were
added by following its pointers recursively and cannot be
reached from other objects.
5
Integrity Checking
The last step in identifying a kernel rootkit’s memory
footprint is to perform integrity checking. The inputs to
integrity checking include the memory snapshot, the list
of data objects identiﬁed from memory traversal, the pdb
and image ﬁle of each loaded module when it is avail-
able. Note that the set of image ﬁles serves as the white
list of trusted code.
A rootkit tampers with kernel memory for two main
purposes: run its own code and hide its own activity. To
do so, a rootkit either hijacks kernel execution by mod-
ifying code or function pointers or directly manipulates
kernel data. MAS checks three kinds of integrity as fol-
lows.
• Code Integrity:
trusted code in memory should
match with the image ﬁle on disk.
• Function Pointer Integrity: function pointers should
point to the trusted code.
• Visibility Integrity: data objects found by MAS
should be visible to system tools (e.g., those avail-
able in a debugger for listing processes and mod-
ules).
The visibility integrity checking allows MAS to report
hidden objects such as hidden processes and hidden mod-
ules. For instance, to ﬁnd hidden processes, MAS uses a
debugger command (e.g., !process) to get the list of pro-
cesses in a memory snapshot, then compares it with the
process objects found by memory traversal. If a process
object is not in the list returned by the debugger com-
mand, it is marked as a hidden process. To check func-
tion pointer integrity, MAS inspects not only well known
hooking points such as the system call table but also each
function pointer in the data objects identiﬁed from the
memory traversal. Function pointers that point to a mem-
ory region outside of the trusted code are reported as sus-
picious function pointers. Violations of code integrity are
reported as suspicious code hooks.
MAS can be used in two scenarios: detect if a real-
world system is infected by rootkits or analyze the be-
havior of a malware sample in a controlled environment.
If the white list of trusted code is complete, any integrity
violation can be automatically attributed to rootkit in-
fection.
It is trivial to construct such a complete list
based on a copy of a clean system in a controlled envi-
ronment. However, when checking real-world systems,
such a complete list may be available in some cases (e.g.,
machines inside an enterprise or virtual machines in a
cloud) but not always. When the list of trusted code is
incomplete, we will need an expert to inspect integrity
violations reported by MAS before deciding if a system
is infected. We will report our experiences of detecting
rootkits from real-world crash dumps in Section 9.
6
Implementation
We implemented MAS with 12,000 lines of C++ code for
the static analysis and 24,000 lines of code for memory
traversal and integrity checking.
For static analysis, we developed a PREfast [14] plu-
gin to extract information from the AST trees generated
by the Microsoft C/C++ compiler. We implemented the
pointer analysis as a stand alone DLL that, upon request,
computes the value alias set for a given program expres-
sion based on the information extracted by the PREfast
plugin. Since our pointer analysis is demand-driven and
can run in parallel, we implemented our type candidate
lookup to take advantage of that. We run a separate par-
allel job for each generic pointer. After all parallel jobs
are done, we merge the inferred type relations together.
We implemented the parallel type candidate lookup on a
cluster running Windows HPC Server 2008 R2 [17].
For analyzing memory snapshots, the key logic was
In ad-
implemented as an extension of WinDbg [13].
dition, we implemented a DLL based on the Debug In-
terface Access SDK [12] to programmatically access the
symbol information stored in PDB ﬁles [15].
During memory traversal, we frequently access two
kinds of data, allocated memory blocks and data objects
identiﬁed, where a memory block may contain multiple
data objects and no two data objects overlap in memory.
We use a multi-level data structure in MAS in order to
obtain fast store and retrieve operations for the two kinds
of type data. At the bottom level, we use a page-table
like data structure to achieve fast lookup for an arbitrary
address. Here a hash table simply based on the starting
addresses of allocated memory blocks cannot meet our
need because a given memory address may fall into the
middle of a memory block. Given a memory address,
if there exists a memory block that covers it, the lookup
in the bottom-level structure returns a pointer to a data
structure that stores all the information for the memory
block. In this data structure, we use a sorted list to store
all the data objects identiﬁed in the memory block. We
choose a sorted list because the number of data objects
on a single memory block is small.
To speed up type check, we maintain a cache of
matched subtypes and their offsets for each aggregate
type and check the cache ﬁrst before doing the type con-
sistency check in a brute force way. We choose to use
a cache because, for an aggregate type, type consistency
checks usually occur repeatedly for a small number of its
nested types.
7 Evaluation
This section evaluates the accuracy, robustness and per-
formance of MAS. We perform the evaluation on three
sets of memory snapshots: (a) 154,768 memory snap-
shots derived from our large scale kernel malware anal-
ysis; (b) a set of 837 real-world crash dumps from end
user machines running Windows 7; (c) a set of 11 real-
world crash dumps from end user machines running Win-
dows Vista SP1. The last set of Windows Vista SP1 crash
dumps allowed us to compare MAS directly to KOP [3].
For our analysis on real-world crash dumps, the white
list of trusted code contains all the binaries available on
Microsoft’s symbol server. For our analysis of malware
samples, the white list of trusted code contains all the bi-
naries from a clean VM image. Our experiments were
conducted on a machine running Intel Xeon Quad-Core
2.93 GHz with 12 GB RAM unless speciﬁed otherwise.
7
Id
1
2
3
4
5
6
7
8
9
10
11
Size (MB) Modules Fct. ptrs. MAS Fct. ptrs. KOP FP. KOP FN. KOP
245
149
305
270
247
127
315
250
204
255