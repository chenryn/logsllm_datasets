detection of process injection attempts, and more.
Dynamic YARA
As mentioned in Chapter 5, Bypassing the Static Engine, YARA is an easy-to-use, 
straightforward, yet effective tool to hunt for malicious patterns in files. It can not only be 
used on files but also to hunt for malicious strings, functions, and opcodes at the memory 
level. The yarascan volatility plugin makes practical use of "dynamic" YARA to scan 
for potentially malicious strings and code at the memory level, or in practical terms, on a 
dumped memory snapshot.
We believe that all antivirus vendors should implement this strategy (if they have not 
already) as part of their detection engines.
Why this capability is helpful
The dynamic YARA strategy gives your antivirus detection engine the ability to hunt 
and detect strings, assembly instructions, functions, and more at the runtime memory 
level using pre-written or customized YARA rules. This capability can be very helpful in 
detecting malicious patterns in processes, loaded drivers, DLLs, and more.
However, the most important thing about this capability is that it allows the engine to 
detect malware after it has deobfuscated, unpacked, and decrypted at the memory level.
Improving antivirus detection     193
Hunting for malicious strings – proof of concept
To better understand this concept, we built a simple C/C++ Proof of Concept (PoC) 
program that demonstrates this potential capability, running on the Windows operating 
system, without the actual use of YARA, just using a simple string comparison. 
We believe that similar code, in a more robust form than what we created, can be 
implemented alongside YARA in antivirus detection engines. The following is the PoC 
code that demonstrates the building blocks of this concept (https://github.com/
MalFuzzer/Code_for_Fun/blob/master/MalHunt/string_hunt%20
with%20CreateToolhelp32Snapshot.cpp).
First, we import some important libraries using the #include directive. These libraries 
include functions that are needed to get our proof of concept up and running:
#include 
#include 
#include 
#include 
Here are brief explanations of each library used:
• Windows.h – C/C++ header file that contains declarations for all of the Windows 
API functions
• iostream – Standard input/output stream library
• vector – Array that stores object references
• Tlhelp32.h – C/C++ header file that contains functions such as 
CreateToolhelp32Snapshot, Process32First, Process32Next,  
and more
These includes and functions will provide us with the capabilities of using different 
Windows API functions, providing input and output, defining object reference arrays,  
and getting a current snapshot of all running processes.
Let's start from the beginning, with the main() function:
int main()
{
    const char yara[] = "malware"; // It's not an actual YARA 
rule, it's only a variable name
    std::vector pids = EnumProcs();
194     Best Practices and Recommendations
    for (size_t i = 0; i  EnumProcs()
{
    std::vector pids;
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_
SNAPPROCESS, 0);
    if (snapshot != INVALID_HANDLE_VALUE)
    {
        PROCESSENTRY32 pe32 = { sizeof(PROCESSENTRY32) };
        if (Process32First(snapshot, &pe32))
        {
            do
Improving antivirus detection     195
            {
                pids.push_back(pe32.th32ProcessID);
            } while (Process32Next(snapshot, &pe32));
        }
        CloseHandle(snapshot);
    }
    return pids;
}
As seen in the preceding code block, the function is defined as a DWORD vector array to 
hold all of the returned PID numbers of the processes in an array.
Then, the CreateToolhelp32Snapshot Windows API function takes a "snapshot" 
of all the current running processes in the operating system and, for each process, other 
significant accompanying data such as modules, heaps, and more.
Next, the Process32First function retrieves the first encountered process in the 
system, followed by the Process32Next function. Both of these functions retrieve the 
PID number of the system processes from the initial snapshot. After retrieving all running 
Windows processes, it is time to retrieve significant data from their memory.
Now, let's dive into the GetAddressOfData() function in order to understand how it 
reads the memory content of each enumerated process:
char* GetAddressOfData(DWORD pid, const char *data, size_t len)
{
    HANDLE process = OpenProcess(PROCESS_VM_READ | PROCESS_
QUERY_INFORMATION, FALSE, pid);
    if(process)
    {
        SYSTEM_INFO si;
        GetSystemInfo(&si);
        MEMORY_BASIC_INFORMATION info;
        std::vector chunk;
        char* p = 0;
        while(p < si.lpMaximumApplicationAddress)
        {
            if(VirtualQueryEx(process, p, &info, sizeof(info)) 
== sizeof(info))
196     Best Practices and Recommendations
            {
                p = (char*)info.BaseAddress;
                chunk.resize(info.RegionSize);
                SIZE_T bytesRead;
                if(ReadProcessMemory(process, p, &chunk[0], 
info.RegionSize, &bytesRead))
                {
                    for(size_t i = 0; i < (bytesRead - len); 
++i)
                    {
                        if(memcmp(data, &chunk[i], len) == 0)
                        {
                            return (char*)p + i;
                        }
                    }
                }
                p += info.RegionSize;
            }
        }
    }
    return 0;
}
The GetAddressOfData() function has three parameters: the pid parameter that 
contains the enumerated PID number, the data parameter that is passed as the yara 
parameter from the main() function within the for loop, and the len parameter, which 
is used to calculate the number of bytes to read. 
Now let's explore the important functions in this code, which are most relevant 
specifically to this PoC.
First, the OpenProcess() Windows API function is used to receive a handle to the 
current scanned process by its PID.
Improving antivirus detection     197
Next, the VirtualQueryEx() Windows API function retrieves the virtual memory 
address space ranges to scan for the current scanned process. For each queried memory 
address range, we read the content of the memory using the ReadProcessMemory() 
Windows API function to then compare using the memcmp() function and check 
whether our malicious string or pattern exists in the memory address range of the 
currently scanned process.
This process repeats until it finishes scanning all processes retrieved in the initial snapshot.
We believe that this strategy can add a lot of value to antivirus detection engines because 
YARA signatures are so easy to use and maintain, both by the antivirus vendor and by the 
infosec community.
The PoC we have included here just demonstrates the tip of the iceberg. There is much 
work still to be done in our field through the efforts of professional security researchers 
and software developers contributing their expertise for the benefit of the community.
The detection of process injection
As discussed in Chapter 4, Bypassing the Dynamic Engine, malware often uses process 
injection techniques to hide its presence in an attempt to evade antivirus software. The 
most important point at which to detect process injection is when the malware starts to 
load in the system and before the injected code is executed.
Here is a list of possible detection mechanisms that can be used to detect process 
injection-based attacks.
Static-based detection
Having discussed YARA as a great added-value tool to detect malicious software statically 
and dynamically at the memory level, let's now see how we can detect process injection by 
Windows API calls and even relevant opcodes.
We will base our example and detailed explanation on ransomware dubbed Cryak that 
actually facilitates the process injection technique of process hollowing to further infect 
victim machines.
198     Best Practices and Recommendations
First and foremost, we can seek common Windows API function calls that are commonly 
used to conduct process injection, Windows API functions such as OpenProcess, 
VirtualAlloc, WriteProcessMemory, and more. In this case, the Cryak 
ransomware facilitates the process injection technique of process hollowing using the 
following Windows API functions:
• CreateProcessA with the parameter of dwCreationFlags, which equals 4 
(CREATE_SUSPENDED):
Figure 8.6 – Process hollowing – Create Process within a suspended state
• ReadProcessMemory to check whether the destined injected memory region 
is already injected and NtUnmapViewOfSection to hollow a section in the 
suspended created process:
Improving antivirus detection     199
Figure 8.7 – Process hollowing – the use of NtUnmapOfSection
• VirtualAllocEx to allocate a new region of memory:
Figure 8.8 – Process hollowing – the use of VirtualAllocEx
200     Best Practices and Recommendations
• WriteProcessMemory to inject the malicious code into the allocated memory in 
the suspended process:
Figure 8.9 – Process hollowing – the use of WriteProcessMemory
• SetThreadContext and ResumeThread to resume execution of the thread in 
the created process, thus making the injected code execute in the created process:
Figure 8.10 – Process hollowing – the use of SetThreadContext and ResumeThread
At this stage of execution, the injected malicious content is executed in the newly spawned 
process, as previously explained in the book.
Improving antivirus detection     201
To detect this and other process injection techniques using YARA signatures, we can use 
the names of used Windows API calls with some assembly opcodes.
Following is an example of the YARA signature that we have created in order to detect the 
Cryak ransomware sample:
private rule PE_Delphi
{
    meta:
        description = "Delphi Compiled File Format"
    strings:
        $mz_header = "MZP"
    condition:
        $mz_header at 0
}
rule Cryak_Strings
{
    meta:
        description = "Cryak Ransomware"
        hash = "eae72d803bf67df22526f50fc7ab84d838efb2865c27ae 
f1a61592b1c520d144"
        classification = "Ransomware"
        wrote_by = "Uriel Kosayev – The Art of Antivirus 
Bypass"
        date = "14.01.2021"
    strings:
        $a1 = "Successfully encrypted" nocase
        $a2 = "Encryption in process" nocase
        $a3 = "Encrypt 1.3.1.1.vis (compatible with 1.3.1.0  
decryptor)"
        //$ransom_note = ""
    condition:
       filesize < 600KB and PE_Delphi and 1 of ($a*)
202     Best Practices and Recommendations
}
rule Cryak_Code_Injection
{
    meta:
        description = "Cryak Ransomware Process Injection"
        hash = "eae72d803bf67df22526f50fc7ab84d838efb2865c27ae 
f1a61592b1c520d144"
        classification = "Ransomware"
        wrote_by = "Uriel Kosayev"
        date = "14.01.2021"
    strings:
        $inject1 = {6A 00 6A 00 6A 04 6A 00 6A 00 6A 00 8B 45  
F8 E8 C9 9B FA FF 50 6A 00 E8 ED B8 FA FF 85 C0 0F 84 A9 02 00  
00}   // CreateProcess in a Suspended State (Flag 4)
        $inject2 = {50 8B 45 C4 50 E8 29 FD FF FF 85 C0 75 1D} 
   // NtUnmapViewOfSection
        $winapi1 = "OpenProcess"
        $winapi2 = "VirtualAlloc"
        $winapi3 = "WriteProcessMemory"
        $hollow1 = "NtUnmapViewOfSection"
        $hollow2 = "ZwUnmapViewOfSection"
    condition:
    Cryak_Strings and 1 of ($hollow*) and all of ($winapi*) and  
all of ($inject*)
}
Let's now explain the different parts of this signature, which includes one private rule and 
two other regular rules.
Improving antivirus detection     203
The private rule PE_Delphi is a simple rule to detect Delphi-compiled executables  
based on the "MZP" ASCII strings (or 0x4D5A50 in hex) as can be seen in the  
following screenshot:
Figure 8.11 – An executable file compiled with Delphi with the "MZP" header
Next, the YARA rule of Cryak_Strings, as the name suggests, will look for hardcoded 
strings in the ransomware sample. You will also notice that we have used the condition 
of filesize < 600KB to instruct YARA to scan only files that are less than 600 KB 
and also, to scan files that have only the "MZP" ASCII strings in the offset of 0 (which is 
achieved by using the private rule of PE_Delphi).
Finally, we have the Cryak_Code_Injection rule that first scans for the strings based 
on the first rule of Cryak_Strings, then YARA scans for the relevant Windows API 
function used in order to conduct process injection, and also some opcodes that are 
extracted from the ransomware sample using IDA Pro.
To extract opcodes or any other hex values from IDA, you first need to highlight the 
relevant extracted code as in the following screenshot:
Figure 8.12 – Subroutine code to be extracted in an opcode/hex representation
204     Best Practices and Recommendations
Then, press the Shift + E keys to extract the opcodes/hex values:
Figure 8.13 – The extracted opcode/hex representation of the subroutine
And finally, you can take the opcodes and implement them as part of the YARA signature 
using the following syntax:
$variable_name = {Hex values}
You can integrate the hex code in regular or spaced format.
Let's now go and understand the concept of flow-based detection.
Improving antivirus detection     205
Flow-based detection
As discussed in previous chapters, process injection involves executing four general steps:
1. Receive a handle to the targeted process
2. Allocate memory in the targeted process memory space
3. Inject (write) the malicious payload into the allocated memory space
4. Execute the injected malicious payload in the targeted process
By understanding the preceding applied flow, antivirus detection engines can dynamically 
and heuristically intercept suspicious function calls (not only based on Windows API 
functions), identifying parameters used in each function, and checking their order or flow 
of execution.
For example, if a malicious injector process initiates a process injection technique 
such as process hollowing, an antivirus engine can detect it based on the flow of used 
Windows API functions (refer to our process injection poster in Chapter 4, Bypassing the 
Dynamic Engine), the use of specific parameters such as the creation flag of "CREATE_
SUSPENDED" in the CreateProcess function, then the use of an unmapping 
mechanism such as ZwUnmapViewOfSection or NtUnmapViewOfSection, the 
allocation of memory using VirtualAllocEx, WriteProcessMemory, and finally, 
the use of the ResumeThread function.
Log-based detection
The detection of process injection can be also be done based on log or system events such 
as Windows event logs. By implementing capabilities such as Sysmon (System Monitor) 
in the Windows operating system, antivirus engines can achieve more detections of 
process injection attempts.
For those not already familiar with Sysmon, it is a Windows system service and device 
driver that extends the log collection capability far beyond Windows' default event 
logging. It is widely used for detection purposes by Security Operations Center (SOC) 
systems and by incident responders. Sysmon provides event logging capabilities for 
events such as process creation, the execution of PowerShell commands, executed process 
injection, and more. Each event has a unique event ID that can also be collected by 
various security agents and SIEM collectors.
Specifically, with process injection, many event IDs can be used and cross-referenced to 
achieve the detection of process injection.