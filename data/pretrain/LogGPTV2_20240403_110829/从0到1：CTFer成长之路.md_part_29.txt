---
## Page 178
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
值，通常表现为唯一的字符串，服务端系统通过Cookie（Session）实现对用户身份的判断，见图3
4-4,
携带用户A的Cookie
携带用户B的Cookie
客户端A
识别为用户A
识别为用户B
客户端B
认证服务器
图3-44
打开浏览器的控制台，通过JavaScript可以查看当前页面拥有的Cookie，见图3-4-5.或者在网络请
求部分也可以查看当前页面Cookie，见图3-4-6
图3-4-5
图3-4-6
Cookie数据以键值对的形式展现，修改数值后，对应Cookie键的内容便同时被修改。若Cookie中用
于验证身份的键值对在传输过程中未经过有效保护，则可能被攻击者算改，进而服务端将攻击者识别
为正常用户。假设用于验证身份的Cookie键值对为“auth_priv=guest”，当攻击者将其修改为“
_priv=admin”时，服务端会将攻击者的身份识别为admin用户，而不是正常的guest，此时便
在Cookie验证身份环节产生了一个Cookie仿冒的逻辑漏洞。
对于Session机制而言，由于Session存储于服务端，攻击者利用的角度会发生些许变化。与Cookie
校验不同的是，当使用Session校验时，用户打开网页后便会被分配一个SessionID，通常为由字母
和数字组成的字符串。用户登录后，对应的SessionID会记录对应的权限。其验证流程见图3-4-7。
Session验证的关键点在于“通过SessionID识别用户身份”，在该关键点上对应存在一个Session会
话固定攻击，其攻击流程见图3-4-8。
首次打开页面
分配一个唯一的SessionID
登录用户A账号
将用户A的识别信息记录至
Session ID
客户端
使用前文的Session ID打开
页面
报据Session ID识别为用户
图3-4-7
打开卖
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek37632cd021737693cfc7149
---
## Page 179
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
用S量录，获得B的身份
欢出者
发送S给受害者
使用S进行登录操作
V
爱害者
8--
简单而言，其攻击流程如下：攻击者打开页面，获得一个SessionID，我们将其称为S；攻击者发送
一个链接给受害者，使得受害者使用S进行登录操作，如http://session.demo.com/login.php？
=xxxx；受害者B执行登录后，S对应的SessionID将包含用户B的身份识别信息，攻击者网
样可以通过S获得受害者B的账号权限。
2.与数据相关的逻辑漏洞
现实中，对于业务功能交织的购物系统，正常的业务功能会涉及多种场景，如商品余额、金钱花费
商品归属判定、订单修改、代金券的使用等。以其中的购买功能为例，购买过程中会涉及商户商品余
额变化、买方金额的消费、服务端的交易历史记录等数据，由于涉及的数据种类较多，因此在实际开
发过程中，对于部分数据的类型校验便存在考虑不周的可能，如花费金额的正负判定、数额是否可更
改等问题。这些问题往往都不是由代码层面的漏洞直接导致，而是由于业务处理逻辑的部分判断缺失
导致的。
与数据相关的逻辑漏洞通常将关注点放在业务数据篡改、重放等方面。
业务数据纂改包含了前文提到的诸多问题，与开发人员对正常业务所做的合法规定密切相关，如限购
行为中，对于最大购买量的突破也是作为业务数据篡改来看待。除此之外，在购买场景下常见的几个
业务数据复改可包括：金额数据算改，商品数量算改，限购最大数修改，优惠券ID可算改。不同场景
下，可算改的数据存在差异，需要针对实际情况具体分析，因此上面4类数据也只是针对购买场景而
言
攻击者通过慕改业务数据可以修改原定计划执行的任务，如消费金额的纂改，若某支付链接为http://
demo.meizj.com/pay.php? money=1000&purchaser=jack&productid=1001&seller=
john
，其中，各参数含义如下：money代表本次购买所花费的金额，purchaser代表购买者的用户名，
代表购买的商品信息，seller代表售卖者用户名。
productid
若后台的购买功能是通过这个URL来实现的，那么业务逻辑可以描述为“purchaser花费了money向
seller购买了productid商品”。当交易正常完成时，purchaser的余额会扣除money对应的份额，
但是当服务端扣费仅依据URL中的money参数时，攻击者可以轻易篡改money参数来改变自己的实
际消费金额。例如，墓改后的URL为http://demo.meizj.com/pay.php？money=1&purchaser
=jack&productid=1001&seller=john，此时，攻击者仅通过1元使完成了购买流程。这本质上是
因为后端对于数据的类型、格式没有进行有效校验，导致了意外情况的产生。
所以，在笔者看来，数据相关的逻辑漏洞基本均为对数据的校验存在错漏所导致。
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek37632od021737693cfc7149
---
## Page 180
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
3.4.2CTF中的逻辑漏洞
相较于Web安全的其他漏洞，逻辑漏洞通常需要多个业务功能漏洞的组合利用，因此往往存在业务体
系复杂的环境中，部署成本颜大，在CTF比赛中出现的频率较低
2018年，X-NUCA中有一道名为“blog”的Web题目，实现了一个小型的OAuth2.0认证系统，选
手需要找出其中的漏洞，以登录管理员账号，并在登录后的后台页面获得flag。
OAuth2.0是一个行业的标准授权协议，目的是为第三方应用额发具有时效性的Token，使得第三方
应用可以通过Token获取相关资源。常见的场景为需要登录某网站时，用户未拥有该网站账号，但该
网站接入了QQ、微信等快捷登录接口，用户在进行快捷登录时使用的便是OAuth2.0。
OAuth2.0的认证流程见图3-4-9，具体为：客户端页面向用户请求授权许可一客户端页面获得用户
授权许可→客户端页面向授权服务器（如微信）请求发放Token一授权服务器确认授权有效，发放
Token
至客户端页面一客户端页面携带Token请求资源服务器一资源服务器验证Token有效后，返回资
源
这个题目中存在以下功能：普通用户的注册登录功能：OAuth网站的用户注册登录功能：将普通用户
与OAuth网站账号绑定：发送一个链接至管理员，管理员自动访问，链接必须为题目网址开头：任意
地址跳转漏河。
在进行普通用户与OAuth的账号绑定时，先返回一个Token，随后页面携带Token进行跳转，完成
账号与普通用户的绑定。携带Token进行账号绑定的链接形式为：http://oauth.demo.com/
OAuth
main/oauth/？state=******。访问链接后，将自动完成OAuth账号与普通账号的绑定。
thorizatioe
6--
此时攻击点出现了，关键在于普通用户访问携带了Token的链接便能完成普通账号与OAuth账号的绑
定；同理，管理员访问该链接同样可以完成账号的绑定。此处可以利用任意地址跳转漏洞，在远程服
务器上部署一个地址跳转的页面，跳转地址便是携带Token进行绑定的链接。当管理员访问提交的链
接时，先披重定向至远程服务器，继续被重定向至绑定页面，从而完成OAuth账号与管理员账号的绑
定。至此，使用OAuth账号快捷登录，便可登录管理员账号。
3.4.3逻辑漏洞小结
相较于前面提到的各种Web漏洞，逻辑漏洞没有一种固定的格式来呈现。要进行逻辑漏洞的挖掘，需
https://weread.qq.com/web/reader/77d32500721a485577d8eeek37632cd021737693cfc7149
---
## Page 181
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
要参赛者对业务流程做到心中有数。现实环境下的逻辑漏洞挖担还需要考虑多种认证方式及不同的业
务线，这里不再讨论，读者可以在日常工作生活中发现其中的乐趣。
https://weread.qq.com/web/reader/77d32500721a485577d8eeek37632cd021737693cfc7149
---
## Page 182
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
小结
一般来说，Web题目在整个CTF比赛中所有方向中入门最简单。本书将Web题目涉及的主要漏洞分为
“入门”“进阶”“拓展”三个层次，各为一章，让读者逐步深入。但因为Web漏洞的分类十分复杂
繁多，同时技术更新相较于其他类型题目也更快，希望读者在阅读本书的同时补充相关知识，这样才
能举一反三，让自身能力有更好的提升。
对于本书的相关内容，读者可以在N1BOOK（https://book.nu1l.com/）平台上找到相应的配套例
题进行练习，从而更好地理解本书内容。
下一章
https://weread.qq.com/web/reader/77d32500721a485577d8eeek1ff325f02181ff1de7742fo
---
## Page 183
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
第4章APK
CTF中的移动端题目普遍偏少，Android类的题目主要偏向杂项（Misc）和逆向（Reverse）。前者
通常根据Android系统特性隐藏相关数据，考察参赛者对系统特性的熟悉程度：后者主要考察参赛者
的Java、C/C++逆向能力，出题人常常会加入混淆（ollvm等）、加固、反调试等技术，以增加应用
的逆向难度。这类题目往往需要参赛者具备一定的逆向和开发能力，熟悉常用调试逆向工具，知道常
见反调试及加壳脱壳方法。
本章将介绍Android开发的基本知识，介绍移动端CTF解题所需的必备技能，以及常用工具的使用技
巧和反调试原理、脱壳原理等实战技能，最后通过案例让读者能更快、更好地入门CTF移动端题目。
下一章
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek8e232ec02198e296a067180
---
## Page 184
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
4.1Android开发基础
4.1.1Android四大组件
Android应用程序包括以下4个核心组件
①Activity：面向用户的应用组件或者用户操作的可视化界面，基于Activity基类，底层由
ActivityMa
统一管理，也负责处理应用内或应用间发送的lntent消息。
②BroadcastReceiver：接受并过滤广播消息的组件，应用想显示的接收广播消息，需在Manifest
清单文件中注册一个receiver，用lntentfilter过滤特定类型的广播消息，见图4-1-1。应用内也可以
通过registerReceiver在运行时动态注册。
图4-1-1
③Service：通常用于处理后台耗时逻辑。用户不直接与Service对应的应用进程交互。与其他
Andro
应用组件一样，Service也可以通过iPC机制接收和发送lntent
使用Service必须在Manifest清单文件中注册，见图4-1-2.Service可以通过lntent进行启动、停止和
绑定。
④ContentProvider：应用程序间数据共享的组件。如ContactsProvider（联系人提供者）对联系
人信息统一管理，可以被其他应用（申请权限之后）访问，应用还可以创建自己的Content
Provide
，并且把自身数据暴露给其他应用。
图4-1-2
4.1.2APK文件结构
APK（AndroidapplicationPackage，Android应用程序包）文件通常包含以下文件和目录。
1.meta-inf目录
meta-inf目录包括如下文件。
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek4e73277021a4e732ced3b55
---
## Page 185
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
manifest.mf：清单文件。
certrsa：应用签名文件
certsf：资源列表及对应的SHA-1签名。
2.lib目录
lib目录包括平台相关的库文件，可能包括以下文件。
armeabi：所有ARM处理器相关文件。
armeabi-v7a：ARMv7及以上处理器相关文件
arm64-v8a：所有ARMv8处理器下的arm64相关文件。
x86：所有x86处理器相关文件。
x86_64：所有x86_64处理器相关文件
mips:MIPS处理器相关文件。
3.res
res文件是没有编译至resources.arsc中的其他资源文件。
4.assets
assets文件是指能通过AssetManager访问到的资源文件。
5.AndroidManifest.xml
AndroidManifest.xml是Android组件清单文件，包含应用名字、版本、权限等信息，以二进制XMl
文件格式存储在APK文件中，能通过apktool、AXMLPrinter2等工具转换成XML明文格式文件
6.classes.dex
classes.dex是Android运行时可执行文件。
7.resources.arsc
resources.arsc包含编译好的部分资源文件。
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek4e73277021a4e732ced3b55
---
## Page 186
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
4.1.3DEX文件格式
DEX是DalvikVMexecutes的简称，即AndroidDalvik可执行程序。DEX文件中包含该可执行程序的
所有Java层代码。DEX经过压缩和优化，不仅能减小程序大小，还能加快类及方法的查找效率。DEX
文件结构见图4-1-3。
DEX