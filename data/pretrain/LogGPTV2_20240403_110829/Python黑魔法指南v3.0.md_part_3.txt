看似没有毛病，但实则已经犯了一个很基础的问题，运行结果如下：
$ python demo.py
Traceback (most recent call last):
File "demo.py", line 6, in 
add()
File "demo.py", line 4, in add
a += 1
UnboundLocalError: local variable 'a' referenced before assignment
回顾一下，什么是局部变量？在非全局下定义声明的变量都是局部变量。
当程序运行到 a += 1 时，Python 解释器就认为在函数内部要给 a 这个变量赋值，当然就把 a
当做局部变量了，但是做为局部变量的 a 还没有被还没被定义。
因此报错是正常的。
理解了上面的例子，给你留个思考题。为什么下面的代码不会报错呢？
$ cat demo.py
a = 1
def output():
print(a)
output()
$ python demo.py
1
1.30 break /continue 和 上下文管理器哪个优先级高？
众所周知，在循环体中（无论是 for 还是 while），continue 会用来跳入下一个循环，而 break 则
用来跳出某个循环体。
同时我们又知道：在上下文管理器中，被包裹的程序主体代码结束会运行上下文管理器中的一段代
码（通常是资源的释放）。
但如果把上下文管理器放在一个循环体中，而在这个上下文管理器中执行了 break ，是否会直接跳
出循环呢？
换句话说，上下文管理器与 break/continue 这两个规则哪一个优先级会更高一些？
这个问题其实不难，只要做一下试验都能轻易地得出答案，难就难在很多对这个答案都是半猜半
疑，无法肯定的回答。
试验代码如下：
import time
import contextlib
@contextlib.contextmanager
def runtime(value):
time.sleep(1)
print("start: a = " + str(value))
yield
print("end: a = " + str(value))
a = 0
while True:
a+=1
with runtime(a):
if a % 2 == 0:
break
从输出的结果来看，当 a = 2 时执行了 break ，此时的并不会直接跳出循环，依然要运行上下文管
理器里清理释放资源的代码（示例中，我使用 print 来替代）。
start: a = 1
end: a = 1
start: a = 2
end: a = 2
另外还有几个与此类似的问题，我这里也直接给出答案，不再细说了
1. continue 与 break 一样，如果先遇到上下文管理器会先进行资源的释放
2. 上面只举例了 while 循环体，而 for 循环也是同样的。
1.31 如何像 awk一样分割字符串？
若你使用过 Shell 中的 awk 工具，会发现用它来分割字符串是非常方便的。特别是多个连续空格会
被当做一个处理。
[root@localhost ~]# cat demo.txt
hello world
[root@localhost ~]#
[root@localhost ~]# awk '{print$1,$2}' demo.txt
hello world
可是转换到 Python 上面来呢？结果可能是这样的。
>>> msg='hello world'
>>> msg.split(' ')
['hello', '', '', '', 'world']
与我预想的结果不符，多个空格会被分割多次。
那有什么办法可以达到 awk 一样的效果呢？
有两种方法。
第一种方法
不加参数，这种只适用于将多个空格当成一个空格处理，如果不是以空格为分隔符的场景，这种就
不适用了。
>>> msg='hello world'
>>> msg.split()
['hello', 'world']
第二种方法
使用 filter 来辅助，这种适用于所有的分隔符，下面以 - 为分隔符来举例。
>>> msg='hello----world'
>>> msg.split('-')
['hello', '', '', '', 'world']
>>>
>>> filter(None, msg.split('-'))
['hello', 'world']
是不是很神奇，filter 印象中第一个参数接收的是 函数，这里直接传 None 居然有奇效。
查看了注释，原来是这个函数会适配 None 的情况，当第一个参数是None的时候，返回第二个参数
（可迭代对象）中非空的值，非常方便。
换用函数的写法，可以这样
>>> msg='hello----world'
>>> msg.split('-')
['hello', '', '', '', 'world']
>>>
>>> filter(lambda item: True if item else False, msg.split('-'))
['hello', 'world']
1.32 如何让大数变得更易于阅读？
当一个数非常大时，可能过百万，也可能上亿，太多位的数字 ，会给我们阅读带来很大的障碍。
比如下面这个数，你能一下子说出它是多少万呢，还是多少亿呢？
281028344
是不是没法很快的辩识出来？
这时候，你可以使用 _ 来辅助标识，写成这样子就清晰多了
281_028_344
关键这种写法，在代码中并不会报错噢（Python2 不支持）
>>> number=281_028_344
>>> number
281028344
第二章：魔法命令行
2.1 懒人必备技能：使用 “_”
对于 _ ，大家对于他的印象都是用于 占位符，省得为一个不需要用到的变量，绞尽脑汁的想变量
名。
今天要介绍的是他的第二种用法，就是在交互式模式下的应用。
示例如下：
>>> 3 + 4
7
>>> _
7
>>> name=': Python'
>>> name
': Python'
>>> _
': Python'
它可以返回上一次的运行结果。
但是，如果是print函数打印出来的就不行了。
>>> 3 + 4
7
>>> _
7
>>> print(": Python")
ming
>>> _
7
我自己写了个例子，验证了下，用 __repr__ 输出的内容可以被获取到的。
首先，在我们的目录下，写一个文件 demo.py。内容如下
## demo.py
class mytest():
def __str__(self):
return "hello"
def __repr__(self):
return "world"
然后在这个目录下进入交互式环境。
>>> import demo
>>> mt=demo.mytest()
>>> mt
world
>>> print(mt)
hello
>>> _
world
知道这两个魔法方法的人，一看就明白了，这里不再解释啦。
2.2 最快查看包搜索路径的方式
当你使用 import 导入一个包或模块时，Python 会去一些目录下查找，而这些目录是有优先级顺序
的，正常人会使用 sys.path 查看。
>>> import sys
>>> from pprint import pprint
>>> pprint(sys.path)
['',
'/usr/local/Python3.7/lib/python37.zip',
'/usr/local/Python3.7/lib/python3.7',
'/usr/local/Python3.7/lib/python3.7/lib-dynload',
'/home/wangbm/.local/lib/python3.7/site-packages',
'/usr/local/Python3.7/lib/python3.7/site-packages']
>>>
那有没有更快的方式呢？
我这有一种连 console 模式都不用进入的方法呢？
你可能会想到这种，但这本质上与上面并无区别
[wangbm@localhost ~]$ python -c "print('\n'.join(__import__('sys').path))"
/usr/lib/python2.7/site-packages/pip-18.1-py2.7.egg
/usr/lib/python2.7/site-packages/redis-3.0.1-py2.7.egg
/usr/lib64/python27.zip
/usr/lib64/python2.7
/usr/lib64/python2.7/plat-linux2
/usr/lib64/python2.7/lib-tk
/usr/lib64/python2.7/lib-old
/usr/lib64/python2.7/lib-dynload
/home/wangbm/.local/lib/python2.7/site-packages
/usr/lib64/python2.7/site-packages
/usr/lib64/python2.7/site-packages/gtk-2.0
/usr/lib/python2.7/site-packages
这里我要介绍的是比上面两种都方便的多的方法，一行命令即可解决
[wangbm@localhost ~]$ python3 -m site
sys.path = [
'/home/wangbm',
'/usr/local/Python3.7/lib/python37.zip',
'/usr/local/Python3.7/lib/python3.7',
'/usr/local/Python3.7/lib/python3.7/lib-dynload',
'/home/wangbm/.local/lib/python3.7/site-packages',
'/usr/local/Python3.7/lib/python3.7/site-packages',
]
USER_BASE: '/home/wangbm/.local' (exists)
USER_SITE: '/home/wangbm/.local/lib/python3.7/site-packages' (exists)
ENABLE_USER_SITE: True
从输出你可以发现，这个列的路径会比 sys.path 更全，它包含了用户环境的目录。
2.3 使用 json.tool 来格式化 JSON
假设现在你需要查看你机器上的json文件，而这个文件没有经过任何的美化，阅读起来是非常困难
的。
$ cat demo.json
{"_id":"5f12d319624e57e27d1291fe","index":0,"guid":"4e482708-c6aa-4ef9-a45e-d5ce2c72
c68d","isActive":false,"balance":"$2,954.93","picture":"http://placehold.it/32x32","
age":36,"eyeColor":"green","name":"MasseySaunders","gender":"male","company":"TALAE"
,"email":"PI:EMAIL","phone":"+1(853)508-3237","address":"246IndianaP
lace,Glenbrook,Iowa,3896","about":"Velitmagnanostrudexcepteurduisextemporirurefugiat
aliquasunt.Excepteurvelitquiseuinexinoccaecatoccaecatveliteuet.Commodonisialiquipiru
reminimconsequatminimconsecteturipsumsitex.\r\n","registered":"2017-02-06T06:42:20-0
8:00","latitude":-10.269827,"longitude":-103.12419,"tags":["laborum","excepteur","ve
niam","reprehenderit","voluptate","laborum","in"],"friends":[{"id":0,"name":"Dorothe
aShields"},{"id":1,"name":"AnnaRosales"},{"id":2,"name":"GravesBryant"}],"greeting":
"Hello,MasseySaunders!Youhave8unreadmessages.","favoriteFruit":"apple"}
这时候你就可以使用 python 的命令行来直接美化。
$ python -m json.tool demo.json
{
"_id": "5f12d319624e57e27d1291fe",
"about": "Velitmagnanostrudexcepteurduisextemporirurefugiataliquasunt.Excepteurv
elitquiseuinexinoccaecatoccaecatveliteuet.Commodonisialiquipirureminimconsequatminim
consecteturipsumsitex.\r\n",
"address": "246IndianaPlace,Glenbrook,Iowa,3896",
"age": 36,
"balance": "$2,954.93",
"company": "TALAE",
"email": "PI:EMAIL",
"eyeColor": "green",
"favoriteFruit": "apple",
"friends": [
{
"id": 0,
"name": "DorotheaShields"
},
{
"id": 1,
"name": "AnnaRosales"
},
{
"id": 2,
"name": "GravesBryant"
}
],
"gender": "male",
"greeting": "Hello,MasseySaunders!Youhave8unreadmessages.",
"guid": "4e482708-c6aa-4ef9-a45e-d5ce2c72c68d",
"index": 0,
"isActive": false,
"latitude": -10.269827,
"longitude": -103.12419,
"name": "MasseySaunders",
"phone": "+1(853)508-3237",
"picture": "http://placehold.it/32x32",
"registered": "2017-02-06T06:42:20-08:00",
"tags": [
"laborum",
"excepteur",
"veniam",
"reprehenderit",
"voluptate",
"laborum",
"in"
]
}
2.4 命令行式执行 Python 代码
有时候你只是想验证一小段 Python 代码是否可用时，通常有两种方法
1. 输入 python 回车，进入 console 模式，然后敲入代码进行验证
2. 将你的代码写入 demo.py 脚本中，然后使用 python demo.py 验证
其实还有一种更简单的方法，比如我要计算一个字符串的md5
$ python -c "import hashlib;print(hashlib.md5('hello').hexdigest())"
5d41402abc4b2a76b9719d911017c592
只要加 -c 参数，就可以输入你的 Python 代码了。
2.5 用调试模式执行脚本
当你使用 pdb 进行脚本的调试时，你可能会先在目标代码处输入 import pdb;pdb.set_trace() 来
设置断点。
除此之外，还有一种方法，就是使用 -m pdb
$ python -m pdb demo.py
> /Users/MING/demo.py(1)()
-> import sys
(Pdb)
2.6 如何快速搭建 HTTP 服务器
搭建FTP，或者是搭建网络文件系统，这些方法都能够实现Linux的目录共享。但是FTP和网络文件
系统的功能都过于强大，因此它们都有一些不够方便的地方。比如你想快速共享Linux系统的某个
目录给整个项目团队，还想在一分钟内做到，怎么办？很简单，使用Python中的
SimpleHTTPServer。
SimpleHTTPServer是Python 2自带的一个模块，是Python的Web服务器。它在Python 3已经合并到
http.server模块中。具体例子如下，如不指定端口，则默认是8000端口。
## python2
python -m SimpleHTTPServer 8888
## python3
python3 -m http.server 8888
SimpleHTTPServer有一个特性，如果待共享的目录下有index.html，那么index.html文件会被视为默
认主页；如果不存在index.html文件，那么就会显示整个目录列表。
2.7 快速构建 HTML 帮助文档
当你不知道一个内置模块如何使用时，会怎么做呢？
百度？Google？
其实完全没必要，这里教你一个离线学习 Python 模块的方法。
是的，你没有听错。
就算没有外网网络也能学习 Python 模块.
你只要在命令行下输入 python -m pydoc -p xxx 命令即可开启一个 HTTP 服务，xxx 为端口，你
可以自己指定。
$ python -m pydoc -p 5200
pydoc server ready at http://localhost:5200/
帮助文档的效果如下
2.8 最正确且优雅的装包方法
当你使用 pip 来安装第三方的模块时，通常会使用这样的命令
$ pip install requests
此时如果你的环境中有 Python2 也有 Python 3，那你使用这条命令安装的包是安装 Python2 呢？
还是安装到 Python 3 呢？
就算你的环境上没有安装 Python2，那也有可能存在着多个版本的 Python 吧？比如安装了
Python3.8，也安装了 Python3.9，那你安装包时就会很困惑，我到底把包安装在了哪里？
但若你使用这样的命令去安装，就没有了这样的烦恼了
##  python2 
$ python -m pip install requests
##  python3 
$ python3 -m pip install requests
##  python3.8 
$ python3.8 -m pip install requests