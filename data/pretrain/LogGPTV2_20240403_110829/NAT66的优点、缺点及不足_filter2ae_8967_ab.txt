    table ip nat {
      chain prerouting {
        type nat hook prerouting priority 0; policy accept;
      }
      chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        ip saddr 10.0.0.0/8 oif "eth0" snat to MY_EXTERNAL_IPV4
      }
    } 
    # IPv6 NAT table
    table ip6 nat {
      chain prerouting {
        type nat hook prerouting priority 0; policy accept;
      }
      chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        # Creates a SNAT (source NAT) rule that changes the source 
        # address of the outbound IPs with the external IP of eth0
        ip6 saddr fd00::1:0:0/96 oif "eth0" snat to MY_EXTERNAL_IPV6
      }
    }
这里需要着重注意的是`table ip6 nat`表以及`table inet filter`中的`chain
forward`，它们可以配置包过滤器，执行NAT66方案以及将数据包从`tun*`接口转发到外部网络中。
使用`nft -f
`命令应用新的规则集后，我们可以静静等待这些配置生效。剩下的就是通过某个客户端ping已知的一个IPv6地址，确保转发功能以及NAT功能都可以正常工作。我们可以使用Google提供的DNS服务器地址：
    $ ping 2001:4860:4860::8888
    PING 2001:4860:4860::8888(2001:4860:4860::8888) 56 data bytes
    64 bytes from 2001:4860:4860::8888: icmp_seq=1 ttl=54 time=48.7 ms
    64 bytes from 2001:4860:4860::8888: icmp_seq=2 ttl=54 time=47.5 ms
    $ ping 8.8.8.8
    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
    64 bytes from 8.8.8.8: icmp_seq=1 ttl=55 time=49.1 ms
    64 bytes from 8.8.8.8: icmp_seq=2 ttl=55 time=50.8 ms
非常好，NAT66可以正常工作，客户端能够访问外部IPv6互联网，并且RTT值与IPv4网络不相上下。现在需要检查客户端是否能够解析AAAA记录。由于我在`/etc/resolv.conf`中使用的是Google的DNS服务器，因此检验起来也非常方便：
    $ ping facebook.com
    PING facebook.com (157.240.1.35) 56(84) bytes of data.
    ^C
    $ ping -6 facebook.com
    PING facebook.com(edge-star-mini6-shv-01-lht6.facebook.com (2a03:2880:f129:83:face:b00c:0:25de)) 56 data bytes
    ^C
这里有个问题，为什么默认情况下ping命令会先尝试Facebook的IPv4地址，而不会尝试IPv6地址呢？
## 五、解决另一个问题
Linux系统通常会使用Glibc的`getaddrinfo()`函数来解析DNS地址，事实证明该函数有优先级偏好，可以正确处理源-目的地址的优先级关系。
刚开始时，我怀疑默认情况下`getaddrinfo()`在面对本地地址（包括ULA地址）时，会使用与全球IPv6地址不一样的处理方式。因此，我检查了IPv6
DNS解析器的配置文件，即`gai.conf`：
    label ::1/128       0  # Local IPv6 address
    label ::/0          1  # Every IPv6
    label 2002::/16     2 # 6to4 IPv6
    label ::/96         3 # Deprecated IPv4-compatible IPv6 address prefix
    label ::ffff:0:0/96 4  # Every IPv4 address
    label fec0::/10     5 # Deprecated 
    label fc00::/7      6 # ULA
    label 2001:0::/32   7 # Teredo addresses
`getaddrinfo()`所使用的默认label表如上所示。
与我猜想的一致，ULA地址的标签（6）与全球单播地址的标签（1）不一样。根据RFC 3484的约定，默认情况下标签的顺序会影响源-地址对的选择，因此每次系统都会优先使用IPv4地址。
为了我们选择的方案最后能够正常工作，我不得已又做了些处理（NAT66中光有ULA并不足够），我需要修改`gai.conf`，如下所示：
    label ::1/128       0  # Local IPv6 address
    label ::/0          1  # Every IPv6
    label 2002::/16     2 # 6to4 IPv6
    label ::/96         3 # Deprecated IPv4-compatible IPv6 address
    label ::ffff:0:0/96 4  # Every IPv4 address
    label fec0::/10     5 # Deprecated 
    label 2001:0::/32   7 # Teredo addresses
在原有的配置文件中删除`fc00::/7`的label后，ULA地址现在已经与GUA地址属于同一类地址，因此系统默认情况下就会使用经过NAT转化的IPv6地址发起连接。
    $ ping google.com
    PING google.com(par10s29-in-x0e.1e100.net (2a00:1450:4007:80f::200e)) 56 data bytes
##
## 六、总结
从上文可知，我们的确可以配置NAT66并让它正常工作，但这个过程中还需要绕过不少坑。由于运营商拒绝给客户提供`/64`地址，因此我不得不放弃端到端的连接特性，稍微处理了一下ULA地址，但这违背了这些地址的设计初衷。
这么做是否值得？也许吧。接入VPN后，现在IPv6上的ping值与IPv4上的难分伯仲，并且其他一切都能正常工作，但这一切都建立在非常复杂的网络配置基础之上。如果每个人都能大致理解IPv6与IPv4的不同点，也明白给客户分配一个地址并不足以简单解决具体问题，那么这一切可能就会简单得多。
现在我们之所以使用NAT，主要是历史遗留问题，当时的地址空间非常狭小，我们不得不破坏互联网的完整性才能拯救整个互联网。为了修复这个难题，我们不得已犯了个错，现在我们有机会能够弥补这一切。从现在起，我们应以认真负责的态度来面对这个过渡期，避免再次陷入泥沼，犯下同一个错。