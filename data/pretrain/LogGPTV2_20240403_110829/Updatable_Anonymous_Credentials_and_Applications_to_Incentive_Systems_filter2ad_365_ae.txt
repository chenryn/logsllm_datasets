6.3.2 Framing resistance
To deal with double-spending users, the provider wants to be able to convincingly accuse users
of double-spending. Framing resistance guarantees that honest users cannot be falsely accused of
double-spending by a malicious provider. This is a positive for honest users (as they can repudiate
double-spending claims) and for the provider (a double-spending proof holds more weight in court if
the provider cannot possibly frame innocent users).
We deﬁne framing resistance with an experiment, in which the adversary A plays the role of a
malicious provider, who publishes some pk and interacts with honest users (which by deﬁnition do
not double-spend). Ultimately, A tries to compute a value dslink that is accepted by VrfyDs as proof
of double-spending for some honest user. The chances of him succeeding must be negligible.
Deﬁnition 12 (Framing resistance). We deﬁne experiment Expfram-res in Fig. 5. We say that
incentive system Πinsy is framing resistant if for all ppt A, there exists a negligible function negl s.t.
18
Expsound(Πinsy,A, λ):
ispp ← Setup(G(1λ))
pk ← IssuerKeyGen()
Run AIssue(·),Credit(·),Deduct(·),DBsync(·)(ispp, pk)
If vspent − vinvalid > vearned and A has queried DBsync(s) for all
spending record handles s output by the Deduct oracle
output 1
If DB contains some (upk, dslink) associated with some dsid
such that VrfyDs(ispp, dslink, upk) 6= 1 or upk /∈ U,
output 1
Else output 0
Figure 6: Soundness experiment
Pr[Expfram-res(Π,A, λ) = 1] ≤ negl(λ) for all λ.
(cid:5)
6.3.3 Soundness
For soundness, we ideally want to ensure that malicious users cannot spend more points than the
honest provider has issued. Of course, in the presence of oﬄine double-spending, this statement
cannot be true: users can certainly spend their tokens twice in oﬄine stores. Hence we need to be
more precise. We keep count of three kinds of points (as can be seen in the oracle deﬁnitions on
page 16): vearned counts how many points the provider has issued. vspent counts how many points
users have spent (in the sense of successful Deduct runs). vinvalid counts how many points were
spent in transactions that have been marked invalid in the provider’s database DB. Soundness will
guarantee that vspent − vinvalid ≤ vearned, i.e. users cannot spend more then they have earned if you
deduct transactions the provider discovers to be invalid. This means that while users may be able to
double-spend, they cannot do so undetected.
Furthermore, soundness guarantees that double-spending transactions can be traced to users, i.e.
whenever DB contains some upk, dslink annotated to some double-spent token node dsid, then upk
is one of the registered users and dslink is valid proof of double-spending.
The experiment has an adversary A play the role of an arbitrary number of malicious users, while
the experiment simulates an honest provider. A can interact with the honest provider for the usual
user operations. Additionally, A can control the order in which his transaction data is added to the
central database DB. A wins if either vspent − vinvalid > vearned (even though all transactions have
been synchronized to DB, i.e. all oﬄine double-spending detection should have already happened)
or if the database holds some invalid tracing data upk, dslink.
Deﬁnition 13 (Soundness). We deﬁne the experiment Expsound in F ig. 6. We say that incentive sys-
tem Πinsy is sound if for all ppt A, there exists a negligible function negl with Pr[Expsound(Π,A, λ) =
(cid:5)
1] ≤ negl(λ) for all λ.
7 Construction of an Incentive System from UACS
For our construction of an incentive system, we use a UACS Πuacs (Deﬁnition 4), a public-key
encryption scheme Πenc (Deﬁnition 2), and an additively malleable commitment scheme Πcmt
(Deﬁnition 3). At its core, the users’ tokens will be credentials encoding their points. They are
19
updated whenever the user earns or spends points. Most of the other mechanisms in place deal with
double-spending prevention, as we’ll explain below.
Key generation The system is set up using Setup(pp), which outputs ispp = (pp, cpp, pkcmt)
consisting of public parameters pp (e.g., the elliptic curve group), credential public parameters
cpp ← Setupuacs(pp), and a commitment key pkcmt ← KeyGencmt(pp). pp ﬁxes an attribute space A
for the credential system and a message space Menc for the encryption scheme. We assume A = Zp
for some super-poly p and set the point maximum to vmax = p − 1.
The key pair (pk, sk) ← IssuerKeyGen(ispp) for a provider is simply a credential key pair (pk, sk) ←
IssuerKeyGenuacs(cpp, 1n) for n = 4 (i.e. all our attribute vectors will have length 4). They will use
sk to issue and update credentials.
Users generate a key pair (upk, usk) ← KeyGen(ispp), which is simply an encryption key pair, i.e.
usk ← KeyGenenc(pp) and upk = ComputePKenc(pp, usk). As a rough idea, the user’s key will be used
to (1) identify the user, and (2) encrypt tracing data. If double-spending occurs, our mechanisms
will ensure that usk is revealed, allowing the provider to access the tracing data.
Obtaining a token A token token = (dsid, dsrnd, v, cred) consists of its identiﬁer dsid, some
randomness dsrnd used for double-spending protection, its current value v, and a credential cred
with attributes (usk, dsid, dsrnd, v).
The provider wants the dsid for each token to be uniformly random, so that users cannot
maliciously provoke dsid collisions (which, at ﬁrst glance, would not actually beneﬁt the user.
However, dsid collisions between otherwise unrelated tokens would hinder tracing). Furthermore,
the provider should not be able to learn dsid, because he would otherwise be able to recognize the
user when he spends the token and reveals dsid. For this reason, the ﬁrst step of the token-obtaining
protocol Issue(ispp, pk, upk, sk) ↔ Join(ispp, pk, upk, usk) → (token, dsid) has the user and provider
compute a commitment to dsid such that dsid is guaranteed to be uniformly random in Zp if
either the user or the provider is honest, and only the user knows dsid. To ensure this, both
parties contribute a random share for dsid. The user privately picks a random share dsidusr ← Zp,
and the provider does the same for his share dsidprvdr ← Zp. Then the user commits to his
share (Cusr, open) ← Commitcmt(pp, pkcmt, dsidusr) and sends the commitment Cusr to the provider.
The provider replies with his share dsidprvdr ← Zp (in plain). Using additive malleability of the
commitment scheme, both parties can compute the commitment Cdsid = Addcmt(pp, pkcmt, Cusr,
dsidprvdr) to dsid := dsidusr + dsidprvdr.
Intuitively, if the provider is honest, then dsidprvdr is
uniformly random, and hence dsid is random. If the user is honest, dsidusr is uniformly random and
hidden within the commitment, so the provider will not be able to choose dsidprvdr adaptively, hence
overall, dsid in that case should also be uniformly random (and hidden from the provider).
Now the provider issues a credential to the user. For this, the user’s hidden parameter is
α = (usk, dsid, dsrnd, open), where the user privately chooses dsrnd ← Zp. The update function is
ψ(⊥, α) =
where ψchk is true if and only if
((usk, dsid, dsrnd, 0) if ψchk
⊥ otherwise
• The user secret to be written into the credential is consistent with the user’s public key
(upk = ComputePKenc(pp, usk)), and
• dsid is committed (Vrfycmt(pp, pkcmt, Cdsid, dsid, open) = 1).
The two parties run Issueuacs(cpp, pk, ψ, sk) ↔ Receiveuacs(cpp, pk, ψ, α) → cred, where the user
receives his credential cred. The user outputs his token token = (dsid, dsrnd, v = 0, cred).
20
Earning points The protocol Credit(ispp, pk, k, sk) ↔ Earn(ispp, pk, k, usk, token), where the user
receives a new token token∗ with value v + k is very simple: the provider and the user simply run a
credential update that adds k to v, i.e. with update function ψ((usk, dsid, dsrnd, v),·) = (usk, dsid,
dsrnd, v + k). The user stores the new token token∗ = (dsid, dsrnd, v + k, cred∗), where cred∗ is the
result of the credential update.
∗.
For the remainder token, the user and the provider jointly compute a commitment Cdsid
Spending points Spending k ≤ v points of a token token = (dsid, dsrnd, v, cred) is the most
complicated operation, as most of the double-spending protection happens here. Before the protocol,
the user reveals dsid, which (with overwhelming probability) uniquely identiﬁes token. Then, the
parties run Spend(ispp, pk, k, dsid, usk, token) ↔ Deduct(ispp, pk, k, dsid, sk), which works as follows:
∗ on a
guaranteed random dsid∗ as in the “Obtaining a token” protocol. From this, the user obtains Cdsid
∗,
dsid∗, open∗ and the provider obtains Cdsid
To enable the provider to reveal the user’s identity in case of double-spending, the provider sends
a random challenge γ ← Zp to the user and the user replies with c = usk · γ + dsrnd (using dsrnd of
the token he’s spending). Intuitively, if this is the ﬁrst time this token is spent, dsrnd is uniformly
random and the provider has never seen the value, hence to the provider, c is just some uniformly
random value. The idea is that if the user tries to spend the same token a second time, he will be
forced to reveal c0 = usk · γ0 + dsrnd for some (likely diﬀerent) challenge γ0, from which the provider
would be able to compute usk = (c − c0)/(γ − γ0), clearly identifying the user.
In case the user double-spends, the provider needs to be able to ﬁnd the dsid∗ of the remainder
token that is going to be issued. To enable this, the user encrypts dsid∗ under his own public key:
ctrace ← Encryptenc(pp, upk, dsid∗) and sends ctrace to the provider. The idea is that if usk is ever
revealed because the user double-spends, then the provider can use it to decrypt ctrace and uncover
the remainder token’s identiﬁer dsid∗.
Finally, user and provider run a credential update on the user’s current token to become the
remainder token. This includes a check whether or not the data sent by the user is formed correctly.
The user’s hidden parameter is α = (dsid∗, dsrnd∗, open∗), where dsid∗, and open∗ are as above and
the user secretly chooses dsrnd∗ ← Zp. The update function is
ψ((usk, dsid, dsrnd, v), α) =
where ψchk is true if and only if
((usk, dsid∗, dsrnd∗, v − k) if ψchk
⊥ otherwise
• dsid in the credential is the same as the user has revealed to the provider,
• the user has suﬃcient points, i.e. v ≥ k,
• the commitment to dsid∗ is well-formed, i.e. 1 = Vrfycmt(pp, pkcmt, Cdsid
• c is well-formed to reveal usk upon double-spending, i.e. c = usk · γ + dsrnd, and
• ctrace can be decrypted with usk, i.e. dsid∗ = Decryptenc(pp, usk, ctrace).
From the credential update, the user receives a credential cred∗. If cred∗ 6=⊥, Spend outputs
token∗ = (dsid∗, dsrnd∗, v − k, cred∗) and its dsid∗. The provider receives a bit b from the update,
intuitively indicating whether or not the user had suﬃcient points and that the data he sent
will enable correct tracing of the user and this transaction. Deduct outputs b and, if b = 1, the
double-spending tag dstag = (c, γ, ctrace).
∗, dsid∗, open∗),
21
Handling oﬄine double-spending Tracing double-spending users and their dsids works as
follows:
For two tags dstag = (c, γ, ctrace = usk · γ + dsrnd) and dstag0 = (c0, γ0, ctrace0 = usk · γ0 + dsrnd),
we can compute Link(ispp, dstag, dstag0) = (upk, dslink) as dslink = usk = (c − c0)/(γ − γ0), and
upk = ComputePK(pp, dslink).
dslink, dstag) := Decryptenc(pp, dslink, ctrace) = dsid∗.
Finally, clearly we can establish a user’s guilt by revealing the secret key usk = dslink to his public
key upk. To verify a user’s key, VrfyDs(ispp, dslink, upk) checks that ComputePK(pp, dslink) = upk.
Then, dslink can be used to trace that user’s transactions by decrypting ctrace as Trace(ispp,
Correctness A more compact representation of this construction can be found in Appendix D. It
is easy to check correctness given that dsids are by deﬁnition uniformly random in Zp if both user
and provider behave honestly.
7.1 Security
We state the following theorems:
Theorem 14. If Πuacs has simulation anonymity (Deﬁnition 5), Πenc is key-ind. CPA secure
(Deﬁnition 19), Πcmt is computational hiding, then Πinsy (Construction 23) guarantees anonymity
(Deﬁnition 11).
Proof sketch. The adversary A is asked to distinguish if it talks to user u0 or u1 in the challenge
(Πinsy,A, λ)
phase. Both users are determined by A. We will ﬁrst handle the easy case of Expano-X
for X = Earn: everything that the adversary A sees perfectly hides the user’s secret usk and
dsid. For the case X = Spend and user ub,
let i be the spend operation in the challenge
phase and i − 1 the previous spend operation in the setup phase. During spend i − 1, the ad-
versary A gets Encryptenc(pp, upkb, dsid i) and can compute Commitcmt(pp, pkcmt, dsid i) from the
commitment to dsidusr that he receives. In spend i, A gets (1) Encryptenc(pp, upkb, dsid i+1), (2)
Commitcmt(pp, pkcmt, dsid i+1), and (3) dsid i. For (2), observe that Commitcmt(pp, pkcmt, dsid i+1)
has no inﬂuence on A’s advantage since it is independent of b.
If we look at (1), we observe
that the encryption is generated under upkb. Therefore, in addition to CPA security, we need
that the keys of the users are indistinguishable. Considering (3), observe that the commitment to
dsid i (in spend i − 1) is computationally hiding. Furthermore, to link Encryptenc(pp, upkb, dsid i) or
Commitcmt(pp, pkcmt, dsid i) from spend i − 1 to dsid i revealed in spend i, A has to break (key-ind.)
CPA security of Πenc or comp. hiding of Πcmt.
The full proof can be found in Appendix F.2.
b
Theorem 15. If Πuacs is sound (Deﬁnition 6), Πcmt is perfectly binding (Deﬁnition 20), and
ComputePKenc(pp,·) is injective, then the incentive system Πinsy (Construction 23) is sound (Deﬁni-
tion 13).
Proof sketch. The proof is a reduction to soundness of the underlying updatable credential system.
Let A be an attacker against incentive system soundness. We construct B. B simulates A’s view
perfectly by replacing Issueuacs and Updateuacs calls with calls to the corresponding UACS oracles.
Let error be the event that (1) B has output the same challenge δ in two diﬀerent Deduct runs, or (2)
0 in two runs of Deduct or Issue such that the commitments
there were two commitments Cdsid, Cdsid
can be opened to two diﬀerent messages. (1) happens with negligible probability (δ ← Zp), so does
prvdr ← Zp and the commitment scheme Πcmt is perfectly binding. It then