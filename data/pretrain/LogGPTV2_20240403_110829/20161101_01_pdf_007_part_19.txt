 repeatable read及以上级别长事务带来的问题举例
 会话A :
 digoal=# begin isolation level repeatable read;
 BEGIN
 digoal=# select 1;
 ?column?
 ----------
 1
 (1 row)
 假设这是个长事务.
PostgreSQL advisory锁介绍
 会话B :
 digoal=# delete from iso_test;
 DELETE 10000
 digoal=# vacuum verbose iso_test ;
 INFO: vacuuming "postgres.iso_test"
 INFO: "iso_test": found 0 removable, 10000 nonremovable row versions in 55 out of 55 pages
 DETAIL: 10000 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: vacuuming "pg_toast.pg_toast_93022"
 INFO: index "pg_toast_93022_index" now contains 0 row versions in 1 pages
PostgreSQL advisory锁介绍
 DETAIL: 0 index row versions were removed.
 0 index pages have been deleted, 0 are currently reusable.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: "pg_toast_93022": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 VACUUM
 会话A结束后, 这部分数据才可以被回收掉
 End;
 digoal=# vacuum verbose iso_test ;
 INFO: vacuuming "postgres.iso_test"
 INFO: "iso_test": removed 10000 row versions in 55 pages
 INFO: "iso_test": found 10000 removable, 0 nonremovable row versions in 55 out of 55 pages
PostgreSQL advisory锁介绍
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: "iso_test": truncated 55 to 0 pages
 DETAIL: CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: vacuuming "pg_toast.pg_toast_93022"
 INFO: index "pg_toast_93022_index" now contains 0 row versions in 1 pages
 DETAIL: 0 index row versions were removed.
 0 index pages have been deleted, 0 are currently reusable.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: "pg_toast_93022": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 VACUUM
PostgreSQL advisory锁介绍
 advisory会话锁解决的问题
 http://blog.163.com/digoal@126/blog/static/163877040201172492217830/
 http://blog.163.com/digoal@126/blog/static/1638770402013518111043463/
 advisory lock的应用场景举例(应用控制的锁)：
 比如数据库里面存储了文件和ID的对应关系，应用程序需要长时间得获得一个锁，然后对文件进行修改，再释放锁。
 测试数据:
 digoal=> create table tbl_file_info (id int primary key,file_path text);
 NOTICE: CREATE TABLE / PRIMARY KEY will create implicit index "tbl_file_info_pkey" for table "tbl_file_info"
 CREATE TABLE
 digoal=> insert into tbl_file_info values (1,'/home/postgres/advisory_lock_1.txt');
 INSERT 0 1
 digoal=> insert into tbl_file_info values (2,'/home/postgres/advisory_lock_2.txt');
 INSERT 0 1
 digoal=> insert into tbl_file_info values (3,'/home/postgres/advisory_lock_3.txt');
 INSERT 0 1
PostgreSQL advisory锁介绍
 SESSION A:
 digoal=> select pg_advisory_lock(id),file_path from tbl_file_info where id=1;
 pg_advisory_lock | file_path
 ------------------+------------------------------------
 | /home/postgres/advisory_lock_1.txt
 (1 row)
 应用程序对/home/postgres/advisory_lock_1.txt文件进行编辑之后，再释放这个advisory锁。
 SESSION B:
 当SESSIONA在编辑/home/postgres/advisory_lock_1.txt这个文件的时候，无法获得这个锁，所以可以确保不会同时编辑这个文件。
PostgreSQL 死锁介绍
 SESSION A:
 Lock tuple 1;
 SESSION B:
 Lock tuple 2;
 SESSION A:
 Lock tuple 2 waiting;
 SESSION B:
 Lock tuple 1 waiting;
 A,B相互等待.
 死锁检测算法介绍
 src/backend/storage/lmgr/README
 死锁检测的时间间隔配置, deadlock_timeout 默认为1秒.
 锁等待超过这个配置后, 触发死锁检测算法.
 因为死锁检测比较耗资源, 所以这个时间视情况而定.
 PostgreSQL和Oracle死锁检测的区别例子.
 http://blog.163.com/digoal@126/blog/static/16387704020113811711716/
 规避死锁需要从业务逻辑的角度去规避, 避免发生这种交错持锁和交错等待的情况.
目录
授课环境
SQL优化基础
如何让数据库输出好的执行计划
压力测试工具的使用和建模
性能分析工具的使用
综合优化案例
如何让数据库输出好的执行计划
 成本因子校准(前面已讲述)
 执行计划节点开关(数据访问, 数据关联开关)
 子查询表关联提升开关
 强制表关联顺序开关
 GEQO(表关联-遗传算法)
PostgreSQL 数据访问方法开关
 某些开关并不是强制执行的, 例如只有全表扫描这种方法可选的时候, 即使关闭全表扫描也会走全表扫描, 但是这种情况下cost值会不准确.
 enable_seqscan -- 全表扫描开关
 enable_indexscan -- 索引扫描开关
 enable_indexonlyscan -- indexonly索引扫描开关(仅扫描索引和VM, 以及vm以外的heap page)
 enable_bitmapscan -- 位图扫描开关 (先扫描索引, 然后按ctid排序扫描heap)
 enable_nestloop -- 嵌套循环连接
 enable_hashjoin -- hash连接
 enable_mergejoin -- 合并连接
 enable_material -- 物化开关, 例如嵌套循环的内部表是否采用物化方式减少扫描成本. (例子见嵌套循环的例子)
 enable_hashagg -- hash聚合
 enable_sort -- 排序(例子见合并连接的例子)
 enable_tidscan -- tid扫描开关
PostgreSQL 数据访问方法开关
例子1 :
digoal=# create table tbl(id int, info text, crt_time timestamp);
CREATE TABLE
digoal=# insert into tbl select generate_series(1,10000),md5(random()::text),clock_timestamp();
INSERT 0 10000
digoal=# create index idx_tbl_id on tbl(id);
CREATE INDEX
digoal=# analyze tbl;
ANALYZE
digoal=# explain select * from tbl where id=1;
QUERY PLAN
-----------------------------------------------------------------------
Index Scan using idx_tbl_id on tbl (cost=0.29..8.30 rows=1 width=45)
Index Cond: (id = 1)
(2 rows)
PostgreSQL 数据访问方法开关
digoal=# set enable_indexscan=off;
SET
digoal=# explain select * from tbl where id=1;
QUERY PLAN
-------------------------------------------------------------------------
Bitmap Heap Scan on tbl (cost=4.29..8.31 rows=1 width=45)
Recheck Cond: (id = 1)
-> Bitmap Index Scan on idx_tbl_id (cost=0.00..4.29 rows=1 width=0)
Index Cond: (id = 1)
(4 rows)
digoal=# set enable_bitmapscan=off;
SET
digoal=# explain select * from tbl where id=1;
QUERY PLAN
------------------------------------------------------
Seq Scan on tbl (cost=0.00..149.00 rows=1 width=45)
Filter: (id = 1)
(2 rows)
PostgreSQL 数据访问方法开关
digoal=# set enable_seqscan=off;
SET
digoal=# explain select * from tbl where id=1;
QUERY PLAN
-------------------------------------------------------------------------------------------
Index Scan using idx_tbl_id on tbl (cost=10000000000.28..10000000008.30 rows=1 width=45)
Index Cond: (id = 1)
(2 rows)
全表扫描开关关闭后, 没有其他可选访问方法, 选择全表扫描.
成本计算如下 :
src/backend/optimizer/path/costsize.c
Cost disable_cost = 1.0e10;
cost_seqscan
...
if (!enable_seqscan)
startup_cost += disable_cost;
...
PostgreSQL 数据访问方法开关
例子2 :
digoal=# create table tbl1(id int primary key, info text, crt_time timestamp);
CREATE TABLE
digoal=# insert into tbl1 select generate_series(1,20000),md5(random()::text),clock_timestamp();
INSERT 0 20000
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
-----------------------------------------------------------------------------------
Merge Join (cost=0.57..420.07 rows=5000 width=90)
Merge Cond: (tbl.id = tbl1.id)
-> Index Scan using idx_tbl_id on tbl (cost=0.29..213.28 rows=10000 width=45)
-> Index Scan using tbl1_pkey on tbl1 (cost=0.29..238.30 rows=10001 width=45)
Index Cond: (id > 9999)
(5 rows)
PostgreSQL 数据访问方法开关
digoal=# set enable_indexscan=off;
SET
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
------------------------------------------------------------------------------------
Hash Join (cost=362.80..734.82 rows=5000 width=90)
Hash Cond: (tbl1.id = tbl.id)
-> Bitmap Heap Scan on tbl1 (cost=113.80..285.81 rows=10001 width=45)
Recheck Cond: (id > 9999)
-> Bitmap Index Scan on tbl1_pkey (cost=0.00..111.29 rows=10001 width=0)
Index Cond: (id > 9999)
-> Hash (cost=124.00..124.00 rows=10000 width=45)
-> Seq Scan on tbl (cost=0.00..124.00 rows=10000 width=45)
(8 rows)
关闭索引扫描后, 选择了hash连接
PostgreSQL 数据访问方法开关
digoal=# set enable_hashjoin=off;
SET
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
------------------------------------------------------------------------------------------
Merge Join (cost=1738.65..1863.65 rows=5000 width=90)
Merge Cond: (tbl.id = tbl1.id)
-> Sort (cost=788.39..813.39 rows=10000 width=45)
Sort Key: tbl.id
-> Seq Scan on tbl (cost=0.00..124.00 rows=10000 width=45)
-> Sort (cost=950.27..975.27 rows=10001 width=45)
Sort Key: tbl1.id
-> Bitmap Heap Scan on tbl1 (cost=113.80..285.81 rows=10001 width=45)