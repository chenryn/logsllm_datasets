### Automatic Authorization Feature and OAuth Implementation

Let's examine the automatic authorization feature, which is not addressed in the OAuth standard specification. During our testing of OAuth implementations, we observed that Request R2 would immediately transition to State S5 if the user had previously authorized the application. This unexpected response causes OAuthTester to issue an error notification. After analyzing the log information, we identified this feature and manually encoded it into the model.

For instance, Facebook recently introduced a new parameter, `signed_request`, to confirm a user's identity. However, many applications incorrectly implement this parameter, leading to inconsistencies in its properties across different applications. OAuthTester helps identify this parameter as a key parameter defined by the Identity Provider (IdP). With the IdP's documentation, we can correctly initialize its security-related properties. OAuthTester can then alert us if this parameter's properties change, as if it were defined by the specification.

Although this refinement requires manual intervention, such effort is only needed once per IdP under test and can be reused across all its real-world implementations.

### Implementation

We have implemented OAuthTester in Python with 5668 lines of code. On average, it takes 20.3 minutes to complete the testing of an OAuth-based application using a machine with a 1.4GHz dual-core CPU and 4GB of memory running Ubuntu 12.04. In this section, we first discuss the automation level of OAuthTester and then present various heuristics to speed up the testing process and enhance detection accuracy.

#### 5.1 Efficiency Consideration

Given that every button click or HTTP request involves a high-latency round-trip with the IdP/App, reducing the number of test cases is crucial for completing the testing within a reasonable time. We employ the following heuristics to discover as many potential security flaws as possible within a limited time:

1. **Shared Features**: For features shared among applications, we test them only once (e.g., for one application). For example, once we confirm that the authorization code (in Step R5 of Fig. 3) is used only once, there is no need to infer the property of this parameter for other applications of the same IdP.
2. **Known Loopholes**: We first check the applications for previously known loopholes to quickly identify all potential vulnerabilities.
3. **Waypoint Construction**: We focus on constructing out-of-order requests to detect security issues.

#### 5.2 Detection Accuracy

OAuthTester should not report any false positives because we verify whether the system moves to the expected state after each state transition and re-validate security properties for any abnormal behavior. We confirmed this hypothesis by randomly selecting 40 out of 405 applications for manual validation, and no false positives were found.

However, false negatives are possible due to the following reasons:
1. **Path Coverage**: We can only guarantee coverage of all paths defined by the state machine, not the real implementation. If the model is too coarse-grained, some vulnerabilities may be missed.
2. **Post-Authentication Focus**: We focus on the Single Sign-On (SSO) process without considering subsequent operations after authentication.
3. **Parameter Obfuscation**: OAuthTester looks for the original formats of key parameters or their values (e.g., `access_token=xxx`) and cannot detect leaks if the key parameter has been obfuscated.

### Empirical Results

Using OAuthTester, we systematically examined 500 top-ranked websites in the US and China, of which 405 implemented OAuth services provided by four major IdPs: Facebook, Sina, Renren, and Tencent Weibo. OAuthTester enabled us to discover various forms of widespread misuse of the critical `STATE` parameter in OAuth and two classes of previously unknown logic flaws on the IdP side. We also provided new exploits for a well-known vulnerability, i.e., the failure to adopt TLS protection. Besides discovering these previously unknown vulnerabilities, the automated OAuthTester successfully detected numerous existing security flaws, some of which were identified manually by earlier research.

#### 6.1 Discovered Vulnerability 1: Misuse of the `STATE` Parameter

##### 6.1.1 Observed Results

According to RFC6749, the `STATE` parameter should be generated and handled as a nonce and bound to a session to defend against CSRF attacks. Unfortunately, 61.23% of the applications under study do not use the `STATE` parameter. Even worse, 55.31% of the applications that support the `STATE` parameter are still vulnerable to CSRF attacks due to misuse or mishandling. OAuthTester discovered the following misuse cases via fuzzing:

- **Lack of `STATE` Validation**: The `STATE` parameter is not validated.
- **Lenient `STATE` Validation**: Applications can verify the `STATE` parameter correctly but also accept requests with a missing `STATE` parameter.
- **`STATE` Does Not Bind to User**: The application assumes all `STATE` parameters generated by itself are valid and fails to check if the parameter is bound to the user’s session.
- **`STATE` Replay**: The `STATE` parameter can be reused multiple times. There are three cases:
  - **Multiple Use Until Next Login**: The `STATE` parameter remains valid until the user logs in again.
  - **Same `STATE` for One Browser**: The same value is used for the same user as long as they use the same browser.
  - **Constant `STATE` Parameter**: The parameter remains unchanged across different sessions and users.

##### 6.1.2 Security Implications

The misuse of the `STATE` parameter allows an attacker to launch a CSRF attack, leading to at least two problems:
1. **Login CSRF**: An attacker can log the victim into an application as the attacker, allowing them to monitor the victim’s activities.
2. **Account Hijacking**: An attacker can log into the application as the victim, as shown in previous works. Unlike previous studies, which believed these attacks were only possible when the `STATE` parameter was missing, OAuthTester showed that even if the `STATE` parameter is used, it could be misused in various ways, leading to different attacks.

##### 6.1.3 Plausible Root Causes

Surprised by the large percentage of applications that cannot handle the `STATE` parameter correctly, we analyzed the underlying reasons by examining the OAuth SDKs and programming guides provided by the four IdPs and Google. We found that none of the official SDKs include routines for managing the `STATE` parameter. Instead, most IdPs merely state that the `STATE` parameter should be a nonce without providing a code snippet or routine for checking its correct implementation. This leaves application developers to implement the `STATE` parameter themselves, which is more complicated than expected. Some IdPs, like Renren, even manage this parameter incorrectly by redirecting the `STATE` parameter to a non-TLS endpoint.

##### 6.1.4 Recommended Mitigations

To address this, we propose generating and verifying the `STATE` parameter in the SDK so that typical application developers can implement it correctly with minimal effort. As a proof of concept, we extended Google’s OAuth Python SDK with 12 lines of code to add functions for generating and verifying the `STATE` parameter. To process the `STATE` parameter in the SDK, developers must explicitly invoke these functions. Although integrating the `STATE` parameter into the SDK seems straightforward, this solution has limitations:
- **Session Management**: The `STATE` parameter is closely tied to session management, which can vary. It is challenging for the SDK to consider the different operations among numerous session management tools.
- **Parameter Usage**: 61.23% of the applications under study do not send the `STATE` parameter to the IdP, rendering the server-side SDK code useless.

To overcome these limitations, we suggest:
- **Support Popular Session Management Tools**: The SDK should support popular session management tools (e.g., KVSession of Python Flask) and provide a template for specifying the chosen tool.
- **Make `STATE` Parameter Mandatory**: IdPs should make the `STATE` parameter mandatory by checking its presence in specific requests and warning developers if it is missing.

Google provides a toy application demonstrating the correct usage of the `STATE` parameter, but the sample codes are scattered and may be overlooked. Furthermore, the toy application does not follow best practices for deleting the one-time `STATE` parameter after verification, making it vulnerable to the `STATE` Replay attack.

In summary, it is not straightforward to correctly reuse or adapt the sample code of a toy application to a real-world one. Therefore, we provide a step-by-step guideline for developers to add the following code snippets to their applications:

1. **Generate a Random `STATE` Value** (Step 2 of Fig. 1):
   ```python
   state = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(32))
   ```

2. **Bind the `STATE` Parameter to the Session**:
   ```python
   session['state'] = state
   ```

3. **Compare the `STATE` Parameter When Receiving the Response** (Step 5 of Fig. 1):
   ```python
   if request.args.get('state', '') != session['state']:
       return error
   ```

4. **Delete the One-Time `STATE` Parameter**:
   ```python
   del session['state']
   ```

#### 6.2 Discovered Vulnerability 2: Amplification Attack via Dual-Role IdPs

##### 6.2.1 Observed Results

A Dual-Role IdP is an IdP that offers OAuth-based authentication. These IdPs can amplify certain attacks, such as the CSRF attack, by leveraging their dual role. For example, Sina, a dual-role IdP, uses Facebook to provide OAuth services for users outside China but does not validate the `STATE` parameter in its Facebook implementation. This can lead to amplified CSRF attacks.