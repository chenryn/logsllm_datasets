title:Using likely program invariants to detect hardware errors
author:Swarup Kumar Sahoo and
Man-Lap Li and
Pradeep Ramachandran and
Sarita V. Adve and
Vikram S. Adve and
Yuanyuan Zhou
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Using Likely Program Invariants to Detect Hardware Errors *
Swamp Kumar Sahoo, Man-Lap Li, Pradeep Ramachandran,
Sarita V.Adve, Vikram S. Adve, Yuanyuan Zhou
Department of Computer Science
University of Illinois at Urbana-Champaign
PI:EMAIL
Abstract
In the nearfuture, hardware is expected to become increas(cid:173)
ingly vulnerable to faults due to continuously decreasing
feature size. Software-level symptoms have previously been
used to detect permanent hardwarefaults. However, they can
not detect a smallfraction offaults, which may lead to Silent
Data Corruptions(SDCs). In this paper, we present a system
that uses invariants to improve the coverage and latency of
existing detection techniques for permanent faults. The ba(cid:173)
sic idea is to use training inputs to create likely invariants
based on value ranges of selected program variables and
then use them to identifyfaults at runtime. Likely invariants,
however, can have false positives which makes them chal(cid:173)
lenging to use for permanent faults. We use our on-line di(cid:173)
agnosis framework for detecting false positives at runtime
and limit the number offalse positives to keep the associ(cid:173)
ated overhead minimal. Experimental results using micro(cid:173)
architecture level fault injections in full-system simulation
show 28.6% reduction in the number of undetected faults
and 74.2% reduction in the number of SDCs over existing
techniques, with reasonable overheadfor checking code.
Introduction
1.
As CMOS feature sizes continue to decrease, hardware re(cid:173)
liability is emerging as a major bottleneck to reap the ben(cid:173)
efits of increasing transistor density in microprocessor de(cid:173)
sign. Chips in the field are expected to see increasing failure
rates due to permanent, intermittent, and transient faults, in(cid:173)
cluding wear-out, design defects, soft errors, and others [2].
The traditional approach in microprocessor design of pre(cid:173)
senting an illusion of a failure-free hardware device to soft(cid:173)
ware will become prohibitively expensive for commodity
systems. Traditional solutions such as dual modular redun(cid:173)
dancy for tolerating hardware errors incur very high over(cid:173)
heads in performance, area and power. Recent hardware so-
* This work is supported in part by the Gigascale Systems Research Center
(funded under FCRP, an SRC program), the National Science Foundation
under Grants NSF CCF 05-41383, CNS 07-20743, and NGS 04-06351, an
OpenSPARC Center of Excellence at the University of Illinois at Urbana(cid:173)
Champaign supported by Sun Microsystems, and an equipment donation
fromAMD.
lutions such as variations on redundant multithreading im(cid:173)
prove on this, but still incur significant overheads [27].
Recently, researchers have investigated using software(cid:173)
visible symptoms to detect hardware errors [5, 9, 19, 24, 25,
26, 30, 32]. While much of that work focuses on transient
or intermittent faults that last a few cycles (e.g., 4 cycles
or less), we have explored using these symptoms to detect
permanent faults in hardware [9].
Using software-level symptoms to detect permanent faults
in hardware has several benefits over traditional hardware(cid:173)
level solutions. First, using software-level symptoms deals
with only those errors that actually affect software correct(cid:173)
ness. The rest of the faults are safely ignored, potentially
reducing the incurred overhead due to detection and recov(cid:173)
ery. Second, the reliability targets for the system under con(cid:173)
sideration dictates the overheads that the system allows to
achieve those targets. Using software-level symptoms for
detection facilitates exploring these trade-offs in reliability
and overhead seamlessly as they are highly customizable.
We proposed a system design called SWAT, a firmware(cid:173)
level low-overhead reliability solution that could potentially
handle multiple sources of hardware failures [9] using soft(cid:173)
ware symptoms such as fatal hardware traps, software hangs,
abnormal application execution, and high OS activity. Im(cid:173)
plementing these detectors in a thin firmware layer would
present significantly lower hardware cost than using tradi(cid:173)
tional circuit-level hardware detectors. These detectors help
identify over 95% of hardware faults in many structures. Ad(cid:173)
ditionally, 86% of these detections can be recovered using
hardware checkpointing schemes, while all these detected
faults are software recoverable [9].
Nevertheless, using these simple symptoms as detectors
results in an SDC rate of 0.8% for permanent hardware faults
in the current SWAT system, which may not be acceptable
for most systems. This motivates the use of more sophisti(cid:173)
cated detectors to further reduce this SDC rate and increase
detection coverage. In addition, using more sophisticated de(cid:173)
tectors has the potential of reducing the detection latency of
the detected faults, making more faults amenable to hard(cid:173)
ware recovery. Recovery through hardware checkpointing
techniques, which can treat detection latencies upto lOOK
1-4244-2398-9/08/$20.00 ©2008 IEEE
70
DSN 2008: Sahoo et al.
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
cycles [28], are more attractive than those that use software
checkpointing techniques for recovery as it facilitates seam(cid:173)
less recovery of both the application and the as in the event
of a fault with much lesser overhead.
In this work, we extend the set of symptom-level detec(cid:173)
tors in SWAT to include program-level invariants that are
derived from program properties observed during program
execution. We use "likely program invariants" which have
been shown to be a powerful approach in detecting software
bugs [4, 6]. We derive likely program invariants by monitor(cid:173)
ing the execution of a program for different inputs and iden(cid:173)
tifying program properties that hold on all such executions. 1
A major drawback with using likely invariants for error de(cid:173)
tection is that they may lead tofalse positives: some of the in(cid:173)
ferred program invariants may be violated for an input as the
program behavior on that input is different compared with
the training inputs used to extract invariants. Hence, likely
program invariants have been proposed and used primarily
for analysis purposes such as program evolution [4], pro(cid:173)
gram understanding [7], and detecting and diagnosing soft(cid:173)
ware bugs [4, 6, 12, 33, 13]. The only exceptions have been
for detecting transient hardware faults, where a false positive
can be identified quickly and cheaply [22, 24, 3].
In this paper, we propose and evaluate a hardware(cid:173)
assisted methodology to use likely invariants for detect(cid:173)
ing permanent (or intermittent) hardware errors safely. The
SWAT system has a hardware-assisted diagnosis framework
and we adapt it to detect false positives at runtime. We also
limit the number of false positives in a novel way to keep the
associated overhead due to false positive detection low. Us(cid:173)
ing the principles discussed above, we designed the iSWAT
framework for invariant detection and enforcement, and we
implemented it as an extension of the SWAT system [9].
The contributions of this work are:
• We demonstrate a new hardware-supported strategy for
using unsound program invariants for detecting perma(cid:173)
nent hardware errors. We believe this is the first work to
use unsound invariants for such errors.
• We show that likely invariants can be extracted efficiently
in software for realistic programs, unlike previous work
which used only toy benchmark programs [22]. Further(cid:173)
more, because of our tolerance for false positives, we
only need 12 inputs for extracting our invariants while
others have used hundreds of inputs [4, 22].
• We provide a realistic and comprehensive evaluation
with full-system simulation by injecting faults into dif(cid:173)
ferent micro-architectural structures. Such faults present
more realistic fault scenarios than the previously studied
application-level fault injections.
1With simple compiler support, this "training" phase can be performed
transparently during debugging runs for any program, and could even be
extended into production runs with more sophisticated tools [11].
• The most important outcome from our experiments is that
our technique reduces SDCs by 74.2%: fewer than 0.2%
of all fault injections are now SDCs.
In more detail, our experimental results show that the
number of undetected faults in iSWAT decreases by nearly
28.6% compared with the base SWAT System. The number
of SDCs reduces from 31 to 8 (i.e., 74.2% reduction). The
number of detections that are hardware recoverable (with
latency less than lOOK instructions) improves slightly by
2%. The mean overhead due to invariant checking code is
low - 14% on an UltraSparcIIIi machine and only 5% on
an AMD Athlon machine. Moreover, this work is just a first
step using one simple style of invariants. These results show
that using likely invariants is a promising way to improve
overall reliability, at a low cost.
The rest of this paper is organized as follows. Section 2
provides a brief overview of likely invariants. In Section 3,
we describe the iSWAT System in detail, explaining how
we exploit the diagnosis module to detect false positives
caused by the invariants. Section 4 discusses the evaluation
methodology, the results of which are discussed and ana(cid:173)
lyzed in Section 5. Related work is discussed in Section 6.
Section 7 draws conclusions and implications from our ex(cid:173)
perience with the iSWAT framework and discusses future
work.
Invariant-Based Error Detection
2.
In this section, we provide some background on likely pro(cid:173)
gram invariants and then discuss the particular type of likely
invariants we use to detect permanent faults.
2.1 Likely Program Invariants
A program invariant at a particular program point P is a
property that is guaranteed to hold at P on all executions
of the program. Static analysis is the most common method
to extract such sound invariants. A combination of offline in(cid:173)
variant extraction pass and static analysis, or theorem prov(cid:173)
ing techniques, has also been suggested to extract sound in(cid:173)
variants [20]. However, current techniques are not scalable
enough to generate sound invariants for real programs [20].
Also, they can not identify algorithm-specific properties that
are not explicit in the code (e.g. some inputs are always pos(cid:173)
itive).
Likely Program Invariants are properties involving pro(cid:173)
gram values that hold on many executions on all observed
inputs and are expected to hold on other inputs. However,
they are unsound invariants which may not hold on some in(cid:173)
puts. Extracting likely program invariants is easier than ex(cid:173)
tracting sound invariants as we do not need expensive static
analysis methods to prove program properties and can iden(cid:173)
tify algorithm specific properties. The extraction can be done
either online or offline. In online version, invariants are ex(cid:173)
tracted and used during program execution in the production
runs. Online extraction can present unacceptable overheads
1-4244-2398-9/08/$20.00 ©2008 IEEE
71
DSN 2008: Sahoo et al.
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
to program execution, and may in fact be infeasible without
hardware support. The offline version, on the other hand, ex(cid:173)
tracts invariants in a separate pass during program testing or
debugging, and these generated invariants can be used later
during the production runs. During the testing phases of soft(cid:173)
ware development, the extra overhead of invariants extrac(cid:173)
tion can be tolerated. This makes offline invariant extraction.
a powerful method, allowing the use of more complex in(cid:173)
variant mining techniques than would be feasible with on(cid:173)
line methods. With compiler support, this "training" phase
can be done transparently at development time.
We can broadly classify likely program invariants into
three categories. Value-based invariants specify properties
involving only program values, and can be used for a va(cid:173)
riety of tasks including software bug detection, program un(cid:173)
derstanding and program refactoring etc [4, 11, 7, 12, 6].
Control-flow-based invariants specify properties of the con(cid:173)
trol flow of the program, and have been used previously to
detect control-flow errors due to transient faults [30, 29, 5].
PC-based invariants specify program properties involving
program counter values, and have been proposed for detect(cid:173)
ing memory errors in programs during debugging [33].
2.2 Range-Based Invariants
One of our main goals in exploring the use of invariants to
detect permanent faults is to improve the coverage of detec(cid:173)
tion and reduce the number of SDCs. Since SDCs are typ(cid:173)
ically caused by erroneous values written to output, we ex(cid:173)
plore the use of value-based invariants to detect permanent
faults. The other two class of invariants can detect control(cid:173)
flow or memory errors, which generally result in anomalous
software behavior that can be detected by the other detectors
in SWAT. For example, erroneous control-flow typically re(cid:173)
sults in a crash which can be caught by the FatalTrap symp(cid:173)
tom in SWAT [9]. In contrast, we expect value-based invari(cid:173)
ants to capture deviations of values that do not result in any
significant change of program behavior to cause an applica(cid:173)
tion or as crash, but may still result in incorrect output.
As a first step towards using likely program invariants
for permanent hardware faults, we use a particular form of
value-based invariants known as range-based invariants. A
range-based invariant on a program variable x will be of
the form [MIN, MAX], where MIN and MAX are constants
inferred from offline training such that MIN :S x :S M AX
is true for all the training runs.
These range-based invariants are suitable for error detec(cid:173)
tion for various reasons. These types of invariants can be eas(cid:173)
ily and efficiently generated by monitoring program values.
They are also composable - the invariants can be generated
for each training input separately and can then be combined
together to generate invariants for the complete training set.
These invariants are also much easier to enforce within the
checking code compared to other forms of invariants as they
are simple and involve a single data value. In the ongoing
future work, we are exploring a broader class of invariants.
3. The iSWAT Detection Framework
We implement the above described range-based invariants
as an extension to the existing SWAT System [9] to build
the iSWAT system that uses likely program invariants as an
additional software-level symptom to detect hardware faults.
3.1 Overview of SWAT System
The SWAT system uses low-overhead software-level symp(cid:173)
the presence of an underlying hardware
toms to detect
faults, and exploits a firmware-assisted diagnosis and re(cid:173)
covery module to recover the system from multiple sources
of faults [9]. While this paper targets permanent hardware
faults, our methods, similar to SWAT, also extend readily to
detect transient faults.
SWAT assumes a multi-core architecture under a single
fault model where a fault-free core is always available. The
system also assumes support for a checkpoint/rollback/re(cid:173)
play mechanism and a firmware layer that lies between the
processor and the as to monitor and control such mecha(cid:173)
nisms.
Detection: SWAT uses four low-cost symptom-based detec(cid:173)
tion mechanisms that require little new hardware or software
support. These mechanisms look for anomalous software ex(cid:173)
ecution as symptoms of possible hardware faults. We briefly
describe them below; the details can be found in [9].
1. FatalTrap: Fatal hardware traps are those traps (caused
by either the application or the OS) that do not occur
during fault-free execution. In Solaris, some of the fatal
traps are RED (Recover Error and Debug) State trap,
Data Access Exception trap etc.
2. Abort-App: These indicate instances of a segmentation
fault or illegal operation, when the as terminates the
application with a signal. In such cases, the as informs
the detection framework that the application performed
an illegal operation, leading to a detectable symptom.
3. Hangs: Application and as hangs are other common
symptoms of hardware faults [19]. SWAT uses a low
hardware-overhead heuristic hang detector, based on (of(cid:173)
fline) application profiling to detect hangs with high fi(cid:173)
delity.
4. High OS activity: In normal executions, on a typical invo(cid:173)
cation of the as, control returns to the application after
a few tens of as instructions, except cases such as timer
interrupt or I/O system calls. As a symptom of abnormal
behavior, SWAT looks for instances of abnormally high
contiguous as instructions to indicate the presence of an