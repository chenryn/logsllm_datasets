title:CSProp: Ciphertext and Signature Propagation Low-Overhead Public-Key
Cryptosystem for IoT Environments
author:Fatemah Alharbi and
Arwa Alrawais and
Abdulrahman Bin Rabiah and
Silas Richelson and
Nael B. Abu-Ghazaleh
CSProp: Ciphertext and Signature Propagation 
Low-Overhead Public-Key Cryptosystem for 
IoT Environments
Fatemah Alharbi, Taibah University, Yanbu; Arwa Alrawais, Prince Sattam 
Bin Abdulaziz University; Abdulrahman Bin Rabiah, University of California, 
Riverside, and King Saud University; Silas Richelson and Nael Abu-Ghazaleh, 
University of California, Riverside
https://www.usenix.org/conference/usenixsecurity21/presentation/alharbi
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.CSProp: Ciphertext and Signature Propagation
Low-Overhead Public-Key Cryptosystem for IoT Environments
Fatemah Alharbi
Taibah University, Yanbu
Arwa Alrawais
Prince Sattam Bin Abdulaziz University
Abdulrahman Bin Rabiah
University of California, Riverside
King Saud University
Silas Richelson
University of California, Riverside
Nael Abu-Ghazaleh
University of California, Riverside
Abstract
Cryptographic operations can be prohibitively expensive
for IoT and other resource-constrained devices. We introduce
a new cryptographic primitive which we call Ciphertext and
Signature Propagation (CSProp) in order to deliver security to
the weak end-devices. CSProp is a cryptographic propagation
algorithm whereby an untrusted machine sitting upstream of
a lightweight device can modify an authenticated message so
it can be efﬁciently veriﬁed. Unlike proxy-based solutions,
this upstream machine is stateless and untrusted (making it
possible for any device to serve that role), and the propagated
signature is mathematically guaranteed to be valid only if
the original signature is also valid. CSProp relies on RSA
security and can be used to optimize any operations using
the public key such as signature validation and encryption,
which our experiments show are the most common public
key operations in IoT settings. We test CSProp by using
it to extend DNSSEC to edge devices (validation), and to
optimize the performance of TLS (validation and encryption)
on a range of resource constrained devices. CSProp reduces
DNSSEC validation latency by 78x and energy consumption
by 47x on the Raspberry Pi Zero. It reduces TLS handshake
latency and energy by an average of 8x each. On an Arduino-
based IoT board, CSProp signiﬁcantly outperforms traditional
RSA public key operations (e.g., 57x and 36x reductions in
latency and energy consumption, respectively, for encryption).
1 Introduction and Roadmap
Critical infrastructure on the Internet relies on the distribution
of roles and responsibilities over several nodes. The inter-
action between nodes often occurs over secure channels to
provide the required level and type of security (i.e., conﬁ-
dentiality, integrity, availability − the CIA triad). Operating
securely in constrained environments is one of the primary
challenges facing the wide-scale deployment of Internet of
Things (IoT) and other embedded systems on the edge of the
Internet. The problem is that the cryptographic algorithms
used to secure interactions between well-provisioned desktop
and server environments are computationally prohibitive for
resource-poor, battery operated devices. By the year 2025, it
is estimated that the number of IoT devices will be over 75
billion [41]; thus, it is essential to develop security solutions
for them.
We focus on a security problem which arises when
resource-constrained devices are added to a secure network of
more capable machines. If the security protocols/primitives
used by the network are too computationally intensive for
the small device, then either (1) performance will suffer if
we attempt to use the primitives as is; (2) security will suffer,
for example, if we relegate participation to a resource rich
gateway or proxy; or (3) security for the network must be
overhauled so the new device can participate. In standardized
large-scale networks, (3) is likely not an option due to the
large development time, and the lack of backward compatibil-
ity, and so (2) will be chosen to avoid the performance and
functionality cost.
In this paper, we contribute a new cryptographic primi-
tive we call Ciphertext and Signature Propagation (CSProp).
When used for signature propagation, CSProp allows a capa-
ble machine (Patty in Figure 1a), even one that is stateless and
untrusted (e.g., a certiﬁcate is not required to authenticate it)
sitting upstream of a lightweight device to bear the majority
of the cost of veriﬁcation. Speciﬁcally, Patty modiﬁes and
forwards (propagate) an authenticated message so it can be
efﬁciently veriﬁed by a lesser machine. Importantly, it is cryp-
tographically guaranteed that the propagated signature veriﬁes
correctly only if the original signature does. The trivial solu-
tion where Patty simply forwards Bob’s (data, signature) pair
directly to Alice puts unacceptable strain on Alice’s resources.
Another trivial solution where Patty simply veriﬁes Bob’s
signature herself and forwards only the data to Alice is unde-
sirable from a security point of view as it requires Alice to be
trusted, and also opens the door for an attacker who targets
the link between Alice and Patty. Likewise, when used for
ciphertext propagation, CSProp allows Patty (see Figure 1b)
to perform the majority of the computational overhead caused
by public key encryption. More precisely, Alice partially en-
USENIX Association
30th USENIX Security Symposium    609
(a) Signature Propagation
(b) Ciphertext Propagation
Figure 1: Figure 1: High Level Overview of CSProp
crypts the message and forwards a lightweight ciphertext to
Patty. Patty completes the encryption operation performing
the more expensive portion of the operation. The construc-
tion of CSProp (see Section 3) guarantees the security of the
original message assuming only that the standard public key
encryption (e.g., RSA) is secure.
CSProp differs from a small number of prior proposals that
use a proxy [28, 52] to reduce the cost of encryption in two
important ways: (1) We do not require the proxy to be trusted
since the security is obtained by construction; and (2) CSProp
is backwards compatible with RSA, making it straightforward
to deploy. Speciﬁcally, the construction provides security
guarantees that there is no way for Patty to produce a valid
lightweight propagated signature, except by propagating an
original valid signature from Bob. Thus, CSProp securely
implements a lightweight channel between Alice and Bob,
without requiring any modiﬁcations to the protocol at Bob
(i.e., providing backward compatibility at the server). CSProp
requires no state, making it possible to change the role of
Patty, even at the granularity of each cryptographic operation.
We provide related background and preliminaries in Section 2
and present a formal deﬁnition of the new primitive, as well
as an instantiation based on RSA in Section 3.
CSProp can optimize public-key operations which include
signature veriﬁcation and encryption, but not operations that
use the private key such as signing and decryption. Public-key
operations are typically executed at the client’s end specially
when using Internet protocols such as the Domain Name Sys-
tem SECurity extension (DNSSEC) and the Transport Layer
Security (TLS) protocols, and when generating data that is
being forwarded to an upstream server. We conduct a mea-
surement study of the trafﬁc generated by an IoT camera,
discovering that TLS signature veriﬁcation and encryption
operations account for the majority of the Public Key crypto-
graphic operations.
We apply CSProp to improve the performance of two secu-
rity protocols on IoT devices in Section 4: DNSSEC [39], a
secure extension of the Domain Naming System protocol, and
the Transport Layer Security (TLS) [83] protocol which is the
Table 1: Glossary
Acronym
sk
pklow
vklow
e
d
C
h
σ(cid:48)
H
C
φ
DS
RRset
KSK
RRsetA
RRsetDNSKEY RRset of DNSKEY records type
Deﬁnition
Secret key
Low public key
Low veriﬁcation key
Public exponent
Private exponent
Ciphertext
Message digest
Partial veriﬁed digital signature
Hash function
Challenger
Totient function
Delegation signer record
A set of DNS records of same type RRSIG
Zone’s key signing key
RRset of A record(s) type
Acronym Deﬁnition
Public key
pk
Veriﬁcation key
vk
N
Public modulus
elow
Low public exponent
Plaintext message
M
C(cid:48)
Partial decrypted ciphertext
σ
Digital signature
Pre-master key
K
A
Adversary
P
Computational problem
Address record
A
DNSKEY DNS Key record
ZSK
RRsetDS
M
DNSSEC signature
Zone’s zone signing key
RRset of DS record(s) type
A padded version of M
backbone of secure communication on the Internet. DNSSEC
requires a sequence of signature validations (public-key op-
erations) to validate a DNS response through the sequence
of DNS servers that are used to obtain it. TLS also requires
signature validation as part of connection establishment to
authenticate the ends of the connection, but also uses encryp-
tion to establish a session key, both of which are operations
that use the public key. In an IoT setting, often such oper-
ations are ofﬂoaded to a third server (e.g., a DNS resolver
or a default gateway), thus shielding the end devices from
overhead of encryption and veriﬁcation. However, the last
hop is left unprotected: for example, a recent attack [9] has
shown that DNS cache poisoning can be performed between
the end device and the resolver to directly poison the OS-wide
DNS cache of the victim’s system. CSProp can be used to
secure the end devices by having the resolver propagate the
signatures forward for efﬁcient veriﬁcation.
In Section 5, we evaluate the impact of CSProp using ex-
periments on three generations of Raspberry PIs. We achieve
substantial savings in consumed energy and latency. More
precisely, on Raspberry Pi Zero, the propagated signature ver-
iﬁcation in DNSSEC (vs. traditional DNSSEC validation)
reduces latency by a factor of 78x and energy consumption by
47x. For TLS handshake, the advantage to latency and energy
by an average of 8x and 8x, respectively (considering the full
TLS handshake, which has substantial message delays that
are unaffected by CSProp). We also compare CSProp with
Elliptic Curve Cryptography (ECC) cipher suite and found
that CSProp beats up ECC by 2.7 times. We also study the
impact of CSProp on a resource-constrained Arduino based
device, where we achieve substantial savings (e.g., 57x and
36x reduction in latency and energy for encryption).
In summary, the paper makes the following contributions:
1. We introduce Ciphertext and Signature Propagation
(CSProp), a new cryptographic primitive that allows Pub-
lic Key Cryptography (PKC) operations at a much lower
overhead than traditional implementations.
2. We present a formal deﬁnition of the new primitive, as
well as an instantiation based on RSA, and prove its
security under this construction.
610    30th USENIX Security Symposium
USENIX Association
Statelessand UntrustedPropagator(Patty)End Device(Alice)Origin Server(Bob)Propagated Signatureσ', vk, vklowOriginal CiphertextC', pk, pklowOriginal Signatureσ, vkPropagated CiphertextC, pkStatelessand UntrustedPropagator(Patty)End Device(Alice)Origin Server(Bob)LightweightStatelessand UntrustedPropagator(Patty)End Device(Alice)Origin Server(Bob)Propagated Signatureσ', vk, vklowOriginal CiphertextC', pk, pklowOriginal Signatureσ, vkPropagated CiphertextC, pkStatelessand UntrustedPropagator(Patty)End Device(Alice)Origin Server(Bob)Lightweight3. We apply CSProp to DNSSEC and TLS and evaluate
their performance using experiments on three genera-
tions of RaspberryPIs. Our experiments show substan-
tial performance and energy gains from using CSProp
(e.g., reducing the latency and energy consumption of
DNSSEC by 78x and 47x respectively, and of TLS by 8x
for both latency and energy). On a resource-constrained
IoT board, the Arduino MKR WIFi 1010, CSProp out-
performs RSA public-key operations in latency, power
consumption, and memory usage.
We discuss related work in Section 6. We summarize our
conclusions and discuss future work in Section 7.
2 Background and Preliminaries
In this section, we present some cryptographic preliminaries
to provide the necessary background for describing CSProp.
Speciﬁcally, we introduce the RSA problem and explain low
public exponent RSA. Next, we discuss some special case
attacks on RSA with low public exponents. We refer interested
readers to [26] for an excellent survey of the subject.
2.1 The RSA Problem
Cryptographic primitives in this work have security based on
the RSA problem, which is deﬁned as:
Given integers (N,e) where N = p· q is the product of two
secret primes, ﬁnd d such that e· d = 1 (mod φ(N)), where
φ(N) = (p− 1)(q− 1) is Euler’s totient function.
If e · d = 1 (mod φ(N)) then xe·d = x (mod N) and so the
modular exponentiation functions x (cid:55)→ xe (mod N) and x (cid:55)→ xd
(mod N) are inverses of one another. In cryptography, the
stronger assumption is often made that given (N,e) and a
random x (mod N), it is hard to compute xd (mod N). In
cryptographic terminology, this ammounts to saying that x (cid:55)→
xe (mod N) is a trapdoor permutation. Moving forward, when
we speak about the RSA problem, this is the variant to which
we are referring.
2.2 Low Public Exponent RSA
The computation time of RSA encryption and digital signature
veriﬁcation are dominated by the time required to compute
the eth power of the message and signature. To reduce compu-
tation time, e can be chosen to be a small number. The RSA
problem when e is set to a public ﬁxed small value (as op-
posed to e being chosen randomly in normal RSA) is known
as the low public exponent variant of RSA1.
CSProp’s use of the small exponent bears some similari-
ties to the use of small public keys in RSA, but with some
important differences due to the fact that CSProp uses a small
factor rather than a small full key. Readers might wonder why
1Choosing a low private exponent d is insecure and can completely break
the cryptosystem [56, 98]
not use a full public key that is low (e.g., e = 3) for the RSA
cryptosystem, which is an idea that has been considered to ac-
celerate RSA operations in the past. Our rationale is two-fold:
(1) Security: RSA with low public exponent has been demon-
strated to be vulnerable to some types of attacks that could
break RSA encryption and veriﬁcation [27, 36, 54], although
they can be prevented by avoiding implementation pitfalls
that enable them. In contrast, CSProp is immune against these
attacks since we use only a small factor, not the full exponent;
and (2) Compatibility: in light of the known attacks on low
public exponents, RFC recommendations [38] and vendor
practice favor using larger public exponents, which presents a
substantial barrier to using low public exponents throughout
the system. Despite realization of the potential of using RSA
with small public exponents [62] (assuming a secure padding
scheme such as RSAES-OAEP [19] and RSASSA-PSS [21]
is used), vendors and organizations continue to choose to
enforce larger exponents [38]. In contrast, CSProp supports