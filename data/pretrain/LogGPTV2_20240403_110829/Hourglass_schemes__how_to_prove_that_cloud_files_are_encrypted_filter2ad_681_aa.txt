title:Hourglass schemes: how to prove that cloud files are encrypted
author:Marten van Dijk and
Ari Juels and
Alina Oprea and
Ronald L. Rivest and
Emil Stefanov and
Nikos Triandopoulos
Hourglass Schemes:
How to Prove that Cloud Files Are Encrypted
Marten van Dijk
RSA Laboratories
Cambridge MA
PI:EMAIL
Ari Juels
RSA Laboratories
Cambridge MA
PI:EMAIL
Ronald L. Rivest
MIT
Cambridge MA
PI:EMAIL
Emil Stefanov
UC Berkeley
Berkeley CA
PI:EMAIL
Alina Oprea
RSA Laboratories
Cambridge MA
PI:EMAIL
Nikos Triandopoulos
RSA Laboratories
Cambridge MA
PI:EMAIL
ABSTRACT
We consider the following challenge: How can a cloud storage
provider prove to a tenant that it’s encrypting ﬁles at rest,
when the provider itself holds the corresponding encryption
keys? Such proofs demonstrate sound encryption policies
and ﬁle conﬁdentiality. (Cheating, cost-cutting, or miscon-
ﬁgured providers may bypass the computation/management
burdens of encryption and store plaintext only.)
To address this problem, we propose hourglass schemes,
protocols that prove correct encryption of ﬁles at rest by im-
posing a resource requirement (e.g., time, storage or compu-
tation) on the process of translating ﬁles from one encoding
domain (i.e., plaintext) to a diﬀerent, target domain (i.e.,
ciphertext). Our more practical hourglass schemes exploit
common cloud infrastructure characteristics, such as limited
ﬁle-system parallelism and the use of rotational hard drives
for at-rest ﬁles. For ﬁles of modest size, we describe an hour-
glass scheme that exploits trapdoor one-way permutations
to prove correct ﬁle encryption whatever the underlying stor-
age medium.
We also experimentally validate the practicality of our
proposed schemes, the fastest of which incurs minimal over-
head beyond the cost of encryption. As we show, hourglass
schemes can be used to verify properties other than correct
encryption, e.g., embedding of “provenance tags” in ﬁles for
tracing the source of leaked ﬁles. Of course, even if a provider
is correctly storing a ﬁle as ciphertext, it could also store a
plaintext copy to service tenant requests more eﬃciently.
Hourglass schemes cannot guarantee ciphertext-only stor-
age, a problem inherent when the cloud manages keys. By
means of experiments in Amazon EC2, however, we demon-
strate that hourglass schemes provide strong incentives for
economically rational cloud providers against storage of ex-
tra plaintext ﬁle copies.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
Categories and Subject Descriptors
C.2.4 [Communication Networks]: Distributed Systems—
Client/server ; E.3 [Data Encryption]; H.3.2 [Information
Storage and Retrieval]: Information Storage—File orga-
nization
General Terms
Algorithms, Security, Theory, Veriﬁcation
Keywords
cloud storage security, cloud auditing, challenge-response
protocol, economic security model
1.
INTRODUCTION
Uncontrolled data leakage is an enormous problem today.
It costs the industry billions of dollars of damage each year
and attracts signiﬁcant media attention with high-proﬁle in-
cidents such as [2, 20]. This problem is further ampliﬁed as
cloud storage becomes increasingly popular. Cloud data is
often subject to a larger number of attack vectors and the
responsibility of securely managing this data is split across
multiple parties.
Today’s cloud providers implement complex distributed
storage and caching systems, but usually oﬀer this service
as a simple API for their tenants. A negative side-eﬀect is
that these cloud storage APIs do not provide tenants with
the necessary degree of transparency for them to verify that
data is properly secured, e.g., via encryption. They simply
have to trust that the cloud provider is “doing the right
thing.” Unfortunately, history has demonstrated that parties
often overlook even basic security measures without strong
up-front motivation [1]. It is only after a serious incident oc-
curs, that security measures are implemented, but even then
it is not possible for users to verify that they were imple-
mented correctly because such security measures typically
lack visibility.
To strongly protect against unauthorized access or disclo-
sure, one option is for clients to always encrypt their data
before uploading it to the cloud and decrypt it on-the-ﬂy
when needed, using their own keys that are kept secret from
the cloud. While this option may work for some scenarios,
it is too restrictive in many other cases as it undermines
much of the beneﬁt of outsourcing to the cloud. Clouds are
265often used for more than just plain storage: To provide more
essential services, it’s very common for clouds to require ac-
cess to the unencrypted data (e.g., for processing the data
or simply furnishing it as plaintext to authorized users).
This then necessitates that data encryption is enforced by
the cloud provider itself. Knowing the encryption/decryption
keys enables the provider to oﬀer services of better func-
tionality and also minimizes the security burden on tenants
that lack security sophistication. But as cloud providers now
assume responsibility for data conﬁdentiality they must al-
ways keep data at rest encrypted, and protect the encryption
keys. However, such data-management cloud services are of-
ten proprietary software developed by the providers them-
selves, thus lacking the necessary transparency for tenants to
verify that their private data is handled securely. This ren-
ders the above cloud-centric approach preferable in terms
of usability, but at the same time less desirable in terms of
trustworthiness as it only provides the promise but no guar-
antees for data protection. There is no assurance that cloud
data will not leak.
In such settings of cloud-managed encrypted data, it seems
that very little can be done to provide transparency to ten-
ants about the correct handling by the cloud providers of
their own sensitive data.
In this paper, we demonstrate that this is actually not
the case. In fact, it is possible to design a storage pro-
tocol that imposes a strong economical incentive onto the
cloud provider to store data securely encrypted at rest. With
our protocol, tenants can remotely verify that data in the
cloud is encrypted at rest. We ensure that a negligent cloud
provider that wishes to store the data unencrypted has a
much higher operating cost: Essentially, this provider will
need to double its storage capacity and the underlying in-
frastructure that provides access to that storage in order to
pass the veriﬁcation protocol.
In particular, we present a general framework for econom-
ically motivating a cloud provider to transform and store
data F outsourced by a tenant into a particular encoding G
of tenant’s choice. To achieve this we introduce a new prim-
itive that we call an hourglass scheme that essentially seals
the data immediately after the data has been encoded in the
format requested by the tenant. This sealing is performed by
applying a special transformation that we call an hourglass
function over the encoded format G to get an encapsulation
of it in a new format H that is ﬁnally stored by the provider.
Our framework includes a challenge-response protocol that
a tenant can use to verify that the cloud provider is storing
the data with this desired particular encoding G and hour-
glass function applied to it (i.e., format H). This function is
speciﬁcally designed to ensure that the cloud provider can-
not apply a subsequent encoding of their choice to reverse
the initial one (i.e., format G). The hourglass function is
also designed to impose signiﬁcant resource constraints—
and hence an economical disincentive—on a cloud provider
that tries to apply the encoding and hourglass functions on
demand (on the raw data F ) when the client initiates the
challenge-response veriﬁcation protocol.
Speciﬁcally, we are able to show that under the assump-
tion that cloud providers are economically rational, our hour-
glass schemes provide strong disincentives for direct leakage
of “raw” data through a double storage dilemma. Given that
an hourglass scheme is in use to verify correct encryption of
data at rest at all times, retention of encrypted data only is
the rational strategy for economically motivated providers.
Indeed, an economically rational provider who wishes to also
store unencrypted data needs to essentially double its stor-
age cost. We actually experimentally demonstrate that in
many settings of interest, it is less expensive for a provider
to comply fully with an hourglass scheme and store only
encrypted data than to cheat and store an additional, un-
ecrypted copy of the data.
Contributions. Overall, our work has several contributions,
both theoretical and practical:
• We are among the ﬁrst to explore economic security
models for cloud services that provide incentives to
cloud providers to implement security measures cor-
rectly.
• We introduce hourglass schemes as a new solution con-
cept for ensuring that cloud-managed data is securely
protected via encryption and formalize a general frame-
work for the design of a class of such schemes.
• We propose several concrete hourglass schemes that
impose a strong economic incentive on cloud storage
providers to store data properly encrypted at rest.
• We extend our constructions to incentivize the cloud
provider to embed watermarks in data ﬁles so that the
origin of a data leak can be traced back.
• We implement our constructions and experimentally
quantify the monetary cost induced on a misbehaving
or negligent cloud provider.
Paper organization. We introduce hourglass schemes and
present our new framework in Section 2. Our main protocol
is presented in Section 3 and is general enough to support
multiple kinds of hourglass and encoding functions, lend-
ing itself to a generic method for the design of hourglass
schemes. In Section 4, we describe three speciﬁc hourglass
functions that we call the butterﬂy, permutation and RSA
constructions, where the ﬁrst two are time-based imposing
resource constraints on a misbehaving cloud provider that
are related to storage access time whereas the third im-
poses constraints related to computation, and we present
their security properties. In Section 5, we explore the eﬀec-
tiveness of our hourglass schemes against an economically
motivated cloud provider and validate our economic argu-
ments experimentally by implementing our two time-based
hourglass schemes in Amazon’s EC2 service. Finally, we re-
view related work in Section 6 and conclude in Section 7.
Additional technical materials on our formal security model
and protocols for proving correct encoding appear in the
Appendix. This extended abstract omits proofs of security
which appear in the full version of our paper.
2. GENERAL FRAMEWORK
The overall goal of our paper is to strongly motivate cloud
providers to properly protect client data to minimize the
damage when an accidental data leakage occurs. We achieve
this through a general framework that involves the design
of protocols that ensure that client data is stored at rest in
an encoding of client’s choice. Example encodings supported
by our framework include encryption of data with keys man-
aged by the cloud provider, and encoding with an embedded
266watermark that enables tracking back the origin of a data
leak. Both of these provide protection against data leakage.
To elaborate: encryption of data at rest preserves conﬁden-
tiality in case of accidental data leakage; watermarked en-
coding reveals the source of data leakage (more speciﬁcally,
the identity of the cloud provider), further incentivizing the
cloud provider to strongly protect data and implement se-
curity measures correctly.
Our framework introduces a new solution concept for en-
suring that cloud data resides in a given correct and desired
format. It enables the client to specify an encoding of its
choice and then remotely verify using an eﬃcient challenge-
response protocol that its data is stored at rest in the cloud
in the desired format. Since the cloud provider in our setting
has access to raw data, it can also store (parts of) unencoded
data. While we can not completely prevent this situation,
our framework provides strong economic incentives for the
cloud provider to store data only in the encoded format: A
misbehaving cloud provider storing raw data would have to
double its storage cost in order to reply correctly to client
challenges.
To illustrate the challenges of building a framework with
these requirements, consider the problem of verifying that
a certain ﬁle F is stored in an encrypted format G by the
cloud provider—the main use case in this paper. The client
might challenge the cloud provider for some randomly se-
lected blocks of the encrypted ﬁle G (or even the full en-
crypted ﬁle G). Demonstrating knowledge of G by itself
does not prove that G is stored by the cloud provider. In-
deed, the cloud provider could store the plaintext ﬁle F ,
and compute the encryption G on-the-ﬂy when challenged
by the client! For most symmetric-key encryption schemes
(e.g., block-chaining modes of a block cipher), encryption is
a fast operation, and thus on-the-ﬂy computation is feasible.
2.1 Solution overview
To overcome these challenges, we propose that an addi-
tional transformation, called an hourglass function, is ap-
plied to the encrypted ﬁle G to get an hourglass format
H that encapsulates G, and that the client challenges the
provider on this new ﬁle format H.
An hourglass is an ancient timetelling device. It consists
of two glass bulbs connected by a narrow neck and partially
ﬁlled with sand. In order for sand accumulated in one half
to move to the other, it must pass through the neck—a rate-
limited process that can measure the passage of time. Sim-
ilarly, an hourglass function imposes a resource constraint
(e.g., time) on the translation of a message from one encod-
ing domain to another, target domain.
In particular, such a scheme might ensure a certain lower
bound τ on the time required to translate a ciphertext ﬁle
G into its encapsulation ﬁle H. The client can then chal-
lenge the cloud provider at a random time to produce ran-
dom chunks of the encapsulated ﬁle H, and require that the
cloud provider do so in time < τ . By successfully comply-
ing, the cloud provider proves that it has actually stored the
hourglass ﬁle H that encapsulates G (from which G can be
eﬃciently extracted), and is not encrypting it on-the-ﬂy.
Moreover, the hourglass function must be carefully crafted
to ensure that it is not possible to store partial information
(e.g., 20% of the ﬁle size) to enable eﬃciently recovering
random chunks of the output. In other words, the hourglass
function should be applied to the encrypted ﬁle G as a whole,
and it should be equally diﬃcult or costly to evaluate on por-
tions of the encrypted ﬁle as it is to evaluate on the whole
ﬁle. Existing modes of encryption such as block chaining
fail to meet this criteria. Another important requirement is
that recovery of the ciphertext G (and, in turn, recovery of
plaintext F ) from the encapsulation H should be a reason-
ably eﬃcient operation, in case raw data is needed by the
cloud for processing.
Our general framework combines in a challenge-response
protocol two basic components, a properly parameterized re-
source bound with a complementary hourglass function that
exploits this bound:
• A resource bound: An hourglass scheme assumes a
bound on some resource at the cloud side—storage,
computation, or networking. For example, hard drives
experience delays due to seek time (time to access a
data block) and bandwidth (rate at which they can