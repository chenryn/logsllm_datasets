System.out.println("m3 is an instance of " + m3.getClass());
m3.put("BY", "Belarus");
System.out.println("BY: " + m3.get("BY"));
```
这里，我把使用 `Map.ofEntries()` 创建出来的不可变映射作为 `HashMap` 的一个构造参数，以此创建了该映射的一个 可变副本   mutable copy ，之后我就可以修改它 —— 比如使用 `put()` 方法。
让我们来看看上述过程如何用 Groovy 来实现：
```
def m1 = [
    "AF": "Afghanistan",
    "AX": "Åland Islands",
    "AL": "Albania",
    "DZ": "Algeria",
    "AS": "American Samoa",
    "AD": "Andorra",
    "AO": "Angola",
    "AI": "Anguilla",
    "AQ": "Antarctica",
    "AG": "Antigua and Barbuda",
    "AR": "Argentina",
    "AM": "Armenia",
    "AW": "Aruba",
    "AU": "Australia",
    "AT": "Austria",
    "AZ": "Azerbaijan",
    "BS": "Bahamas",
    "BH": "Bahrain",
    "BD": "Bangladesh",
    "BB": "Barbados"]
println "m1 = $m1"
println "m1 is an instance of ${m1.getClass()}"
m1["BY"] = "Belarus"
println "m1 = $m1"
```
只看一眼，你就会发现 Groovy 使用了 `def` 关键字而不是 `var` —— 尽管在 最近模型   late-model    的 Groovy（version 3+）中，使用     var    关键字也是可行的。 
你还会发现，你是通过在括号里添加了一个键值对列表来创建一个映射的。不仅如此，这样创建的列表对象还非常有用，这里有几个原因。其一，它是可变的；其二，它是一个 `LinkedHashMap` 的实例，内部维持了数据的插入顺序。所以，当你运行 Java 版本的代码并打印出变量 `m3`，你会看到：
```
m3 = {BB=Barbados, BD=Bangladesh, AD=Andorra, AF=Afghanistan, AG=Antigua and Barbuda, BH=Bahrain, AI=Anguilla, AL=Albania, AM=Armenia, AO=Angola, AQ=Antarctica, BS=Bahamas, AR=Argentina, AS=American Samoa, AT=Austria, AU=Australia, DZ=Algeria, AW=Aruba, AX=Åland Islands, AZ=Azerbaijan}
```
而当你运行 Groovy 版本的代码，你会看到：
```
m1 = [AF:Afghanistan, AX:Åland Islands, AL:Albania, DZ:Algeria, AS:American Samoa, AD:Andorra, AO:Angola, AI:Anguilla, AQ:Antarctica, AG:Antigua and Barbuda, AR:Argentina, AM:Armenia, AW:Aruba, AU:Australia, AT:Austria, AZ:Azerbaijan, BS:Bahamas, BH:Bahrain, BD:Bangladesh, BB:Barbados]
```
再一次，你将看到 Groovy 是如何简化事情的。这样的语法非常直观，有点像 Python 里的字典，并且，即使你有一个超过 10 个键值对的初始列表，你也不需要去记住各种必要的别扭方式。注意我们使用的表达式：
```
m1[“BY”] = “Belarus”
```
而在 Java 中，你需要这样做：
```
m1.put(“BY”, “Belarus”)
```
还有，这个映射默认是可变的，这么做的利弊很难评判，还是得取决于你的需求是什么。我个人觉得，Java 在这种情况下的 “默认不可变” 机制，最让我困扰的地方是，它没有一个类似于 `Map.mutableOfMutableEntries()` 的方法。这迫使一些刚学会如何声明和初始化一个映射的程序员，不得不转念去思考该如何把他们手中不可变的映射，转换为可变的。同时我也想问，创建一个不可变的对象然后再舍弃它，这样真的好吗？
另一个值得考虑的事情是，Groovy 使用方括号代替 Java 中的 `put()` 和 `get()` 方法来进行关键字查找。因此你可以这样写：
```
m1[“ZZ”] = m1[“BY”]
```
而不需要这样写：
```
m1.put(“ZZ”,m1.get(“BY”))
```
有时候，就像使用某个类的实例变量一样来使用映射中的关键字和值是一个好办法。设想你现在有一堆想要设置的属性，在 Groovy 中，它们看起来就像下面这样：
```
def properties = [
      verbose: true,
      debug: false,
      logging: false]
```
然后，你可以改变其中的某个属性，就像下面这样：
```
properties.verbose = false
```
之所以这样能工作，是因为，只要关键字符合特定的规则，你就可以省略引号，然后直接用点操作符来代替方括号。尽管这个功能非常有用，也非常好用，它也同时也意味着，如果你要把一个变量作为一个映射的关键字来使用，你就必须把这个变量包裹在圆括号里，就像下面这样：
```
def myMap = [(k1): v1, (k2): v2]
```
是时候告诉勤奋的读者 Groovy 是一门为编写脚本而量身定制的语言了。映射通常是脚本中的关键元素，它为脚本提供了 查找表   lookup table ，并且通常起到了作为内存数据库的作用。我在这里使用的例子是 ISO 3166 规定的两个字母的国家代码和国家名称。对在世界上各个国家的互联网使用者来说，这些代码是很熟悉的。此外，假设我们要编写一个从日志文件中查找互联网主机名，并借此来了解用户的地理位置分布的脚本工具，那么这些代码会是十分有用的部分。
### Groovy 相关资源
[Apache Groovy 网站](https://groovy-lang.org/) 上有非常多的文档。另一个很棒的 Groovy 资源是 [Mr. Haki](https://blog.mrhaki.com/)。[Baeldung 网站](https://www.baeldung.com/) 提供了大量 Java 和 Groovy 的有用教程。学习 Groovy 还有一个很棒的原因，那就是可以接着学习 [Grails](https://grails.org/)，后者是一个优秀的、高效率的全栈 Web 框架。它基于许多优秀组件构建而成，比如有 Hibernate、Spring Boot 和 Micronaut 等。
---
via: 
作者：[Chris Hermansen](https://opensource.com/users/clhermansen) 选题：[lujun9972](https://github.com/lujun9972) 译者：[lkxed](https://github.com/lkxed) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出