replace A←C, H, K by the set of rules {A←Ci ∧ C ∧
(H = Hi), Bi | 1 ≤ i ≤ n}.
end if
We now use transformations speciﬁed in deﬁnition 6 to
create rules at policy analysis time (i.e. compile time) that
reduce the backtracking overhead incurred at policy appli-
cation time (i.e. runtime). Notice that in algorithm 1, we
only consider rules without do(-,-,(-),-) heads and repeat-
edly apply program transformations that provably preserve
correct answer set semantics. Thus the algorithm is correct
by a simple application of theorem 2. Now we show how
this algorithm can reduce the runtime cost for policies for
example 2. Notice rules other than the last rule with a do(-
,-,(-),-) head in example 2, are Horn clauses and therefore
algorithm 1 apply to them.
Example 3. The following rules are obtained by applying
algorithm 1 to rules given in example 2.
Applying unfolding to rules (3) and (5) derive rule (17).
Similarly, unfolding rules (4) and (5) results in rule (18).
Similarly, unfolding rules (17) and (7) results in rule (19).
Unfolding rule (19) and (12) results in rule (20). Directly
executing rule (20) does not require a backtracking algorithm
to be executed at runtime, although it require evaluating the
same basic predicates.
Notice that applying the stated sequence of unfolding trans-
formations leave rules (17) through (20) as the new ABAC
policy. Similarly, by unfolding other rules, we end up with a
policy where all deﬁned predicate other than do(-,-,-,(-),-),
have basic predicates in their body. Such a representation
can be considered a canonical representation for ABAC poli-
cies. The ﬁnal step of unfolding them against valid instances
of base predicates to this canonical form will reduce all rules
to valid instances of predicates. This is shown in section 5.3.
5.2 Materializing ABAC Policies
As a secondary optimization of runtime costs, we propose
to materialize ABAC policies. Because ABAC policies are
locally stratiﬁed , our (soon to be described) materialization
structure is recursively built using the stratiﬁcation order.
We use an approach similar to that used in [JSSS01] to build
a materialization structure, but appropriately altering it to
suit ABAC policies. Towards this end, we ﬁrst (re)-deﬁne
the materialization structure diﬀerently (from [JSSS01]) and
accordingly its corresponding notion of correctness with re-
spect to ABAC policies.
Definition 7
(materialization structure). A ma-
terialization structure MS(P) for an ABAC policy P is a set
of pairs (A, I), where A is a ground atom and I is a set of
(indices of ) rules of the form H←C, B. MS(P) is said to
correctly model P iﬀ the following conditions hold.
1. Φω ↑ (P)(H(2c)) = T iﬀ there is at least one pair
(H(2c), I) ∈ MS(P) for some index set I satisfying ˆcl ∈
I for each rule cl of the form H←C, B where C is the
constraint part and B is the non-constraint part of the
rule body.
2. Suppose Φω ↑ (P)(B(2c, 2c(cid:3))) = T for a rule cl as stated
in (1) where 2c are all the instantiations for variables
of H and 2c(cid:3) are all the extra constants required to fully
instantiate other variables of B. (Notice that the body
can have more variables than the head of a rule) If
C(2c, 2c(cid:3)) is valid then there is an index I such that ˆcl ∈ I
and (H(2c), I) ∈ MS.
According to deﬁnition 7 a materialization structure cor-
rectly models a policy P iﬀ every instance of an atom A that
is true in the Kripke-Kleene closure contains a pair (A, I)
where I is a set of (index of) rules that directly support
the truth of A. Given a materialization structure MS(P)
of a policy P the model Φω ↑ (P) of P is then the pro-
jection over the ﬁrst element of the pairs that are evalu-
ated to be true by Φω ↑ (P). The materialization structure
and the Kripke-Kleene model at stratum i are denoted by
MSi(P) and Φi ↑ (P) respectively. Algorithm 2 uses the
step-wise construction of the Kripke-Kleene model to pro-
duce the materialization structure of an ABAC policy. In
order to present the algorithm, we need the following tech-
nical deﬁnition about adding entries into a materialization
structures.
Definition 8
(⊕). Let MS(P) be a materialization struc-
ture, A a ground instance of a non-constraint literal and S
a set of rules.
MS(P) ⊕ (A, ˆcl) =
MS(P) \ {(A, I)} ∪ {(A,{ ˆcl} ∪ I)}
if (A,I)∈ MS(P) for some rule
indexsetI.
MS(P) ∪ {(A,{ ˆcl})}
otherwise
Now we use deﬁniton 8 in algorithm 2.
dercando(X, Y, Z,{{∅}}) ← memID(y), memStatus({y}, X)
dercando({y, z,{y}}, X, +,{∅}) ← isAN ame(y), isAN ame(z),
dercando(U,{{dlS, br, brT OC} | X}, +,{{{∅}}}) ← memId(y), memStatus({y}, X), y ∈ X
do(U,{{dlS, br, brT OC} | X}, +,{{{{∅}}}}) ← memId(y), memStatus({y}, X), y ∈ X
memM other(y, z), memStatus({y, z}, X)
(17)
(18)
(19)
(20)
Algorithm 2 materialization algorithm
INPUT: An ABAC policy P
OUTPUT: A materialization structure MS(P) for P
Base step: (materializing strata 0)
MS0 = {(H(2c),{ ˆcl}) : where H(2c) is a valid instance of
the base predicate in the rule cl with index ˆcl}.
Inductive Step: (materializing strata n+1)
MSn+1 = MSn ⊕ {(H(2c), ˆcl) where cl = H←C, B is a rule
cl with Φn+1 ↑ (P)(H(2c) = T satisfying (b(2c, 2c(cid:3)), I) ∈
MSn for some index set I for each b ∈ B and C(2c, 2c(cid:3)) is
valid}. Here 2c(cid:3) is the vector of extra constants that may
be required to fully instantiate the body of cl.
Theorem 3 show that the materialization structure MS(P)
created using algorithm 2 for an ABAC policy P is correct
according to deﬁnition 7.
Theorem 3
(correctness of algorithm 2). Let P
be an ABAC policy, and MSi(P) be its materialization struc-
j≤i MSj(P)
ture created by algorithm 2 at stage i. Then,
correctly models ΦI ↑ (P).
(cid:6)
Proof: See the appendix.
Now we show the materialization structure for library pol-
icy given in example 2.
Example 4
(materializing policies in example 2).
As stated, the materialization structure created for the policy
in example 2 is empty, because there are no base facts. Now
suppose we enrich the policy with the three additional base
facts isAName(alice), isAName(bob), isMother(alice,
bob), memStatus({alice, bob{alice}},{login}). The
ﬁrst two recognize names and the last predicate says that
credential set {alice,
bob,{alice}} entitles the holder to the privileges set {login}
in the digital library service. Consequently due to rule (4),
cando({alice,bob,{alice}},{login}) is materialized by
algorithm 2, using (say) the rule number 4 as the index.
Following this indexing convention, we can use rule (5), to
get that cando({alice,bob,{alice}}, {login},+,{∅}) is materi-
alized with the rule set (4). Repeating this process, we get
the following as a part of the materialization structure.
5.2.1 Comparing Materialization Structures for two
an three Valued Models
Materialization structures have been developed for logic
programming based access control policies in the past, for
example in [JSSS01]. However, such work materialized re-
lations deﬁned by logic programs - and not constraint logic
programs. Consequently, corresponding materialization struc-
tures diﬀer in two ways. The ﬁrst is that three valued se-
mantics were not considered in most logic programming sys-
tems, as there were no ﬂoundering queries. Therefore com-
plications arising out of the undeﬁned (⊥) truth value was
not considered in the past. Consequently, deﬁnitions and
theorems were stated and proved using classical satisfaction
relations of ﬁx-point theory. [JSSS01] is a case in point. Sec-
ondly, in our semantics, the ω closure of the three-valued
consequence operator Φ does not constitute a ﬁxed-point.
This accounts for the remarkable diﬀerence in the details of
proofs of corresponding facts. Consequently, our material-
ization structure construction does not compute ﬁx-points
for recursively deﬁned predicates. But that leaves us with
the disadvantage of a materialization algorithm that may
take ω steps to complete. The next section shows that pro-
gram transformation provides a manageable workaround for
this problem.
5.3 Semantics, Program Transformations and
Algorithms 1 and 2 have the property that if Φn ↑ (H(2c)) =
T , then H(2c) becomes a rule in the transformed program,
and (H(2c), I) ∈ MS(P) for some rule index set I. That is,
the three-valued immediate consequence operator, program
transformation and the materialization produces exactly the
same valid instances of reserved predicates. The basis for
this observation is the fact that algorithms 1 and 2 are based
on the step-wise construction of the three-valued Kripke-
Kleene model of a Horn ABAC policy. Next we formally
state and prove this fact.
Materializations
Theorem 4. For any Horn ABAC policy P, instantiated
predicate A(2c) and integer n, Φn ↑ (P)(A(2c)) = T iﬀ the nth
program transformation has A(2c) as a rule iﬀ (A(2c), I) ∈ MSn
for some rule index set I.
Proof: See the appendix.
As stated, our ongoing research addresses extending the-
orem 4 to non-Horn clauses. Now we compute the three
equivalent computations for the policy in example 4.
Example 5. The table given in example 4 show each pred-
icate that is being materialized at each stage. Now we show
the stages of computation for the bottom-up Kripke-Kleene
mode, the policy transformations and the materialization.
Stage 0: isAName(alice),isAName(bob),
memMother(alice,bob), memStatus({alice,bob},
{login}) are valid instance. Thus, they become in-
stances of valid rules, thereby Φ0(P) assigning truth
value T to them. Because they are valid instances,
algorithm 2 materializes them at stage 0. Coinciden-
tally, algorithm 1 already has these predicate instance
as valid rules.
Stage 1: Rule (4) can be instantiated to give cando
({alice, bob{alice}},{login}, +,{∅}) ←
Stage (=n) Materialized instances ( members of MSn)
0
(isName(alice),{0.1}),(isName(bob),{0.2}),(isMother(alice,bob){0.3}),
(memStatus({alice,bob{alice}},{login},{0.4}))
(cando({alice,bob,{alice}},{login},+,{∅}),{4})
(dercando({alice,bob,{alice}},{login},+,{{∅}}),{5})
(dercando({alice,bob,{alice}},{login,{dlS,br,brTOC}},+,{{{∅}}}),{7})
(do({alice,bob,{alice}},{login,{dlS,br,brTOC}},+,{{{{∅}}}}),{12})
1
2
3
4
isAN ame(alice), isAN ame(bob), memM other(alice,
bob), memStatus({alice, bob{alice}},{login}). Notice
that the antecedents of this rule instance are all true
under Φ0(P). Therefore, the head of the rule cando({al-
ice, bob{alice}},{login}, +,{∅}) evaluates to be true un-
der the three valued (Kleene) truth table. Thus, Φ0(P)
(cando({alice, bob{alice}},{login}, +,{∅})) = T .
As stated in example 4, algorithm 2 materializes cando
({alice, bob,{alice}},{login}, +,{∅}) is materialized
due to the reason that Φn(P) evaluates it to be true.
Coincidentally, applying unfolding to cando({alice, bob
{alice}},{login}, +,{∅})←isAN ame(alice), isAN am
e(bob), memM other(alice, bob), memStatus({alice,
bob{alice}},{login}) with respect to isAN ame(alice),
isAN ame(bob), memM other(alice, bob) and
memStatus({alice, bob{alice}},{login}) results in
cando({alice, bob{alice}},{login}, +,{∅}) being evalu-
ated to be true.
As shown in example 5, the three-valued bottom-up model
construction, materialization and unfolding all give the same
facts. Thus, if we know the rank of the predicate instance we
would like to evaluate say n, all we need to do is to unfold the
policy n times. If the instance of interest (usually a reserved
predicate such as do) is not there, then it must be false, as
theorem 4 guarantees so. We can also make this procedure
more eﬃcient by only unfolding relevant rules. Our ongoing
work in this aspect also addresses the issues of rule insertion,
deleting and permission revocation [WJPPH03].
6. CONCLUSIONS
Requesting remote services in an identity-less open sys-
tem requires that sets of attributes be presented in order to
gain accesses to resources.
In order to do so, we propose
a stratiﬁed logic programming based framework to specify
ABAC policies where collections of attribute and service op-
tions are modeled as sets in a computable hereditarily ﬁnite
set theory. Our policies are ﬂounder free, consistent and
complete.
In order to enhance runtime performance, we
transform ABAC polices so that rewritten policies have the
same runtimes as executing materialized rules. Our ongo-
ing work explore other computable set theories and eﬃcient
implementations.
7. REFERENCES