title:Strong Authentication without Temper-Resistant Hardware and Application
to Federated Identities
author:Zhenfeng Zhang and
Yuchen Wang and
Kang Yang
Strong Authentication without Tamper-Resistant
Hardware and Application to Federated Identities
1TCA Lab of State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences
Zhenfeng Zhang1,2,3, Yuchen Wang1,2and Kang Yang4
2University of Chinese Academy of Sciences
3The Joint Academy of Blockchain Innovation
4State Key Laboratory of Cryptology
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—Shared credential is currently the most widespread
form of end user authentication with its convenience, but it
is also criticized for being vulnerable to credential database
theft and phishing attacks. While several alternative mechanisms
are proposed to offer strong authentication with cryptographic
challenge-response protocols, they are cumbersome to use due to
the need of tamper-resistant hardware modules at user end.
In this paper, we propose the ﬁrst strong authentication
mechanism without the reliance on tamper-resistant hardware at
user end. A user authenticates with a password-based credential
via generating designated-veriﬁable authentication tokens. Our
scheme is resistant to ofﬂine dictionary attacks in spite that the
attacker can steal the password-protected credentials, and thus
can be implemented on general-purpose devices.
More speciﬁcally, we ﬁrst introduce and formalize the notion
of Password-Based Credential (PBC), which models the resistance
of ofﬂine attacks and the unforageability of authentication tokens
even if attackers can see authentication tokens and capture
password-wrapped credentials of honest users. We then present
a highly-efﬁcient construction of PBC using a “randomize-then-
prove” approach, and prove its security. The construction does
not
involve bilinear-pairings, and can be implemented with
common cryptographic libraries for many platforms. We also
present a technique to transform the PBC scheme to be publicly-
veriﬁable, and present an application of PBC in federated
identity systems to provide holder-of-key assertion mechanisms.
Compared with current certiﬁcate-based approaches, it is more
convenient and user-friendly, and can be used with the federation
systems that employ privacy-preserving measures (e.g., Sign-in
with Apple).
We also implement the PBC scheme and evaluate its perfor-
mance for different applications over various network environ-
ment. When PBC is used as a strong authentication mechanism
for end users, it saves 26%-36% of time than the approach based
on ECDSA with a tamper-resistant hardware module. As for its
application in federation, it could even save more time when the
user proves its possession of key to a Relying Party.
I.
INTRODUCTION
Passwords, or shared credentials, have dominated the realm
of authentication for several decades, but they have also been
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24462
www.ndss-symposium.org
regarded as the weakest points of modern computer systems.
Traditional shared credential authentication mechanisms re-
quire the credentials of users to be stored in centralized reposi-
tories at servers, and to be explicitly transferred, which creates
notable targets for attackers. They can either be stolen in
batches from breached centralized repositories, or be captured
while being transferred (i.e., through phishing attacks).
To eliminate the security risks raised by shared credentials,
the techniques of strong authentication [38] have been widely
adopted by the industry and standardization communities
as alternative approaches. In particular, strong authentication
schemes are the cryptographic challenge-response identiﬁca-
tion protocols that one entity (i.e., the claimant) “proves” its
identity to another entity (i.e., the veriﬁer) by demonstrating
the knowledge of a secret known to be associated with that
entity. During authentication, the secret is neither revealed to
the veriﬁer nor transferred over the channel. Such mechanisms
can be built with symmetric-key or public-key cryptographic
primitives. For mechanisms based on symmetric-key crypto,
the two entities share a symmetric-key, and the claimant
corroborates its identity by demonstrating the knowledge of
the shared key by encrypting a challenge, or by generating
a MAC (message authentication code) value for the chal-
lenge. For mechanisms based on public-key crypto, a claimant
demonstrates knowledge of its private key in a way of digitally
signing a challenge, or decrypting a challenge encrypted under
its public key. As concrete examples,
the FIDO Alliance
adopts strong authentication with public-key techniques in
the Universal Authentication Framework (UAF) [45], and the
Web Authentication speciﬁcation of W3C [60] also deﬁnes an
API enabling the use of public key-based credentials by web
applications for the purpose of strong authentication.
However, conventional strong authentication mechanisms
involve the problem of secure storage of secrets, i.e., secret-
keys in symmetric-key cases and private-keys in public-key
cases. A common approach is encrypting the secret with a
password. This protection is vulnerable to off-line attacks when
the attacker can steal the password-protected credential [cre]pw
and capture the authentication token σ from honest users (e.g.,
through phishing). It can guess a password pw(cid:48) and determine
its correctness with off-line manners:
• If σ can be veriﬁed with the knowledge of cre (in the case
of symmetric crypto), off-line attacks cannot be avoided
since one can guess a pw(cid:48) and decrypt [cre]pw to obtain
m
σ
[cre]pw
cre(cid:48) ← Dec(pw(cid:48), [cre]pw ), check MAC(cre(cid:48), m) = σ
Fig. 1: Off-line attack for strong authentication with symmetric
crypto, where cre is a symmetric key and user authenticates
through MAC values (i.e., σ ← MAC(cre, m)).
m
(σ, cert)
[cre]pw
cre(cid:48) ← Dec(pw(cid:48), [cre]pw ), pk ← cert,
check VerifyKey(pk , cre(cid:48)) = 1
Fig. 2: Off-line attack for strong authentication with asymmet-
ric crypto, where cre is a private key and the user authenticates
with digital signatures (i.e., σ ← Sign(cre, m)), and cert is a
certiﬁcate w.r.t., the user’s public key pk and private key cre.
cre(cid:48), and then determine the correctness of guess by using
cre(cid:48) to check the validity of σ (See Fig. 1).
• If σ can be veriﬁed publicly (in the case of asymmetric
crypto), then off-line attacks are also feasible. One can
determine the correctness of pw(cid:48), via extracting the public
key pk from cert which is contained in the authentication
tokens, and then checking whether (pk , cre(cid:48)) is a valid
public-private key pair (See Fig. 2).
In practice, these secrets are commonly stored with tamper-
resistant hardware modules at user end. Both the FIDO UAF
protocol [10], [29], [44] and W3C’s speciﬁcation [60] highly
recommend using tamper-resistant hardware modules (e.g.,
SIM card and Trusted Platform Module (TPM)) for user end
implementation (i.e., FIDO authenticator) to protect the private
keys and perform cryptographic operations.
The employment of tamper-resistant hardware module de-
creases the usability of strong authentication schemes as end
user authentication mechanisms, which is also seen as one
of the major drawbacks of currently deployed strong authen-
tication mechanisms [17], [47], [43]. The module (i.e., the
device it residents) becomes another thing to be remembered
to carry, and the secret keys stored by such a module would
be permanently lost once the module is broken or lost.
For federated identity systems, assertions convey authen-
tication and attribute information of users from Identity
2
Providers (IdPs) to separately-administered Relying Parties
(RPs). They can be presented directly to the RP, or be
forwarded through the user. Upon receiving an assertion, the
RP uses the information contained to identify the user and to
make authorization decisions about its accesses to resources
controlled by the RP. A bearer assertion can be presented by
any party as proof of the bearer’s identity, and may lead to
impersonation attacks if it is captured by attackers.
To enhance the security guarantees provided by assertions,
the notion of holder-of-key assertion is introduced for many
federation approaches (e.g., SAML2 [39] and OAuth2.0 [36]).
It prevents assertions from being abused by malicious RPs,
and guarantees that the user cannot repudiate for an assertion
sent by him. This technique has been adopted for commercial
products such as Microsoft’s XBOX [37] and IBM’s Web-
Sphere [6], and also utilized by the digital identity guidelines
published by NIST [31] as a requirement for the highest level
of federation assurance. Particularly, a holder-of-key assertion
contains a reference to the key held by the user (e.g., public
key). To verify such an assertion, the RP requires the user
to cryptographically prove possession of the key (e.g., private
key) that corresponds to the key reference presented in the
assertion.
Currently,
the holder-of-key assertion mechanisms are
mainly implemented via certiﬁcates [39], [48], where the user
must send its X.509 certiﬁcate and prove possession of the
key referred in the certiﬁcate. However, such mechanisms are
inconvenient for end users due to the requirement of certiﬁ-
cate, and also require tamper-resistant hardware to protect the
private keys. Moreover, for federated identity systems which
employ RP-speciﬁc pseudonyms to protect the privacy of users
(e.g., Sign-in with Apple [8]), RPs can collude and link the
same user through the key used in holder-of-key assertions,
which breaks the un-linkability brought by pseudonyms. With
current technologies, an IdP cannot both preserve the privacy
of users and support holder-of-key assertions simultaneously.
A. Our Contributions
The main contribution of this paper is the ﬁrst strong
authentication scheme which does not require tamper-resistant
hardware modules to protect secrets at user end. We further-
more present its application with federated identity systems
to solve the issues of user’s privacy and reliance on tamper-
resistant hardware in the current holder-of-key assertion mech-
anisms. Our scheme wraps (a.k.a., protects) credentials of users
by passwords, and can be implemented on different devices
(e.g., mobile phones and desktop computers) to support cross-
terminal authentication, but is resistant to phishing attacks and
ofﬂine dictionary attacks even in the case that the attacker
can both obtain the password-wrapped credentials and see the
authentication tokens that the user sends to the server.
Our contributions can be summarized as follows:
• We formalize the syntax of a new primitive called Password-
Based Credential (PBC). Informally, the PBC scheme re-
quires a user with identiﬁer uid to register to a server and
obtain a credential cre which is wrapped (i.e., encrypted)
with a password pw. The password-wrapped credential
[cre]pw can be stored in a general-purpose device or a
cloud server. For authentication, the user uses its password
pw and the password-wrapped credential [cre]pw to create
an authentication token σ on a challenge message m. The
server authenticates the user with its secret key by checking
whether σ is valid on m w.r.t., uid.
We establish the necessary security requirement of Exis-
tential UnForgeability under Chosen Message and chosen
Veriﬁcation queries Attacks (EUF-CMVA) for PBC. Our
security model covers a wide-range of practical
threats,
where the attacker can corrupt users adaptively, obtain
the password-wrapped credentials of honest users, and see
authentication tokens generated by honest users.
• We propose a highly efﬁcient construction of PBC, denoted
by ΠPBC, and prove its security under the cryptographic q-
SDH and q-DDHI assumptions in the random oracle model.
ΠPBC is resistant to off-line attacks in the aforementioned
security model since authentication tokens generated by
honest users can only be veriﬁed by a designated server. This
construction does not rely on bilinear-pairings, and thus can
be implemented easily by common cryptographic libraries
on many platforms.
• We propose a technique to transform the designated-
veriﬁability of ΠPBC to public-veriﬁability. With this tech-
nique, we present an application of PBC in federated identity
systems to implement the holder-of-key assertion mecha-
nism, which can be integrated into standardized federation
protocols such as SAML2 and OpenID Connect. It enables
a user to provide a key reference to the IdP, and prove
possession of the corresponding key to the RP using a PBC
authenticator. Our approach furthermore provides an option
that enables the holder-of-key assertions to be veriﬁed while
hiding the user’s identity, which can be used in federation
systems that have applied privacy-preserving measures such
as Sign-in with Apple.
• We evaluate the performances of our schemes over Local
Area Network (LAN) and Wide Area Network (WAN) under
different latencies, and compare them with the approaches
using ECDSA with tamper-resistant hardware modules. For
strong authentication, PBC (denoted by AUTH-PBC) saves
26%-36% time than the ECDSA-based strong authentica-
tion. For its application as holder-of-key assertion mecha-
nism, PBC speeds the process by 41%-55% compared with
the approaches based on ECDSA.
B. Technical Overview
Here, we present the challenges we met and the techniques
leveraged to tackle them.
Avoid ofﬂine attacks. The major challenge of using passwords
to protect credentials is avoiding ofﬂine dictionary attacks. The
credential should not have any structure character, otherwise
off-line attacks are feasible as one can guess a pw(cid:48), decrypt
[cre]pw with pw(cid:48), and check the character structure of cre.
The authentication token σ should not be veriﬁed with cre or
publicly-veriﬁable. Our solution tackle this challenge via two
techniques:
• The credentials of our schemes are indistinguishable from
random group elements, and thus do not have any structure
character for off-line attacks. Furthermore, we apply the
password-based encryption proposed by [14] to wrap the
credentials with passwords, where the decryptions from any
passwords obtain group elements with the same structure
characters. With this approach, the attacker can only obtain
group elements which are indistinguishable from the real
credential when guessing the password.
• The authentication tokens are generated with a “randomize-
then-prove” paradigm, and can only be veriﬁed by a des-
ignated veriﬁer who has the corresponding secret key. The
authentication token can neither be veriﬁed with cre nor by
the attacker who does not know the secret key. In particular,