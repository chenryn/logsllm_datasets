### 8. 系统挂载管理模块

#### (1) 功能
`MountModule` 实现远程主机Linux系统的挂载和卸载分区管理。

#### (2) 命令行模式
```bash
# func "SN2013-08-022" call mount list
# func "SN2013-08-022" call mount mount /dev/sda3 /data
# func "SN2013-08-022" call mount umount "/data"
```

#### (3) API模式
```python
import func.overlord.client as func

client = func.Client("SN2013-08-022")
print(client.mount.list())
print(client.mount.umount("/data"))
print(client.mount.mount("/dev/sda3", "/data"))
```

### 9. 系统进程管理模块

#### (1) 功能
`ProcessModule` 实现远程Linux主机的进程管理。

#### (2) 命令行模式
```bash
# func "SN2013-08-022" call process info "aux"
# func "SN2013-08-022" call process pkill nginx -9
# func "SN2013-08-022" call process kill nginx SIGHUP
```

#### (3) API模式
```python
import func.overlord.client as func

client = func.Client("SN2013-08-022")
print(client.process.info("aux"))
print(client.process.pkill("nginx", "-9"))
print(client.process.kill("nginx", "SIGHUP"))
```

### 10. 系统服务管理模块

#### (1) 功能
`ServiceModule` 实现远程Linux主机的服务管理。

#### (2) 命令行模式
```bash
# func "SN2013-08-022" call service start nginx
```

#### (3) API模式
```python
import func.overlord.client as func

client = func.Client("SN2013-08-022")
print(client.service.start("nginx"))
```

### 11. 系统内核参数管理模块

#### (1) 功能
`SysctlModule` 实现远程Linux主机的系统内核参数管理。

#### (2) 命令行模式
```bash
# func "SN2013-08-022" call sysctl list
# func "SN2013-08-022" call sysctl get net.nf_conntrack_max
# func "SN2013-08-022" call sysctl set net.nf_conntrack_max 15449
```

#### (3) API模式
```python
import func.overlord.client as func

client = func.Client("SN2013-08-022")
print(client.sysctl.list())
print(client.sysctl.get('net.ipv4.icmp_echo_ignore_broadcasts'))
print(client.sysctl.set('net.ipv4.tcp_syncookies', 1))
```

### `func` 命令功能参数示例

1. 查看所有主机的 `uptime`，开启5个线程异步运行，超时时间为3秒：
   ```bash
   # func -t 3 "*" call --forks="5" --async command run "/usr/bin/uptime"
   ```

2. 格式化输出结果，默认格式为Python的元组，分别添加 `--json` 或 `--xml` 来输出JSON及XML格式：
   ```bash
   # func -t 3 "*" call --forks="5" --json --async command run "/usr/bin/uptime"
   ```

### 11.3 自定义Func模块

`Func` 自带的模块已经非常丰富，但在日常系统运维中，尤其是面对大规模服务器集群或不同类别的业务平台时，可能需要自定义模块来满足特定需求。本节介绍如何通过 `func-create-module` 工具创建自定义模块。

#### (1) 自定义模块步骤
1. **生成模块**：使用 `func-create-module` 命令创建模块初始模板。
2. **编写逻辑**：填充业务功能逻辑。
3. **分发模块**：将编写完成的模块分发到所有被控主机。
4. **执行模块**：调用方法与 `Func` 自带模块无差异。

#### (2) 生成模块
切换到 `Func` 安装包的 `minion` 模块存储目录（例如 `/usr/lib/python2.6/site-packages/func/minion/modules`），并运行 `func-create-module` 命令以创建模块初始模板。

#### (3) 编写逻辑
在生成的模块基础上进行修改。例如，实现一个根据指定条数返回最新系统日志信息的功能。

#### (4) 分发模块
编写分发模块的功能，使用 `Func` 的 `copyfile` 模块来实现。源码如下：
```python
#!/usr/bin/python
import sys
import func.overlord.client as fc
import xmlrpclib

module = sys.argv[1]
pythonmodulepath = "/usr/lib/python2.6/site-packages/func/minion/modules/"
client = fc.Client("*")
fb = open(pythonmodulepath + module, "r").read()
data = xmlrpclib.Binary(fb)

# 分发模块
print(client.copyfile.copyfile(pythonmodulepath + module, data))

# 重启Func服务
print(client.command.run("/etc/init.d/funcd restart"))
```

#### (5) 执行模块
最后，执行模块并检查返回结果。

### 11.4 非Python API接口支持

`Func` 通过非Python API实现远程调用，支持YAML和JSON格式，方便第三方工具调用。使用 `func-transmit` 命令进行调用。

#### 示例
定义一个 `command` 模块的远程执行，分别采用YAML和JSON格式进行定义：

**YAML格式**
```yaml
clients: "*"
async: False
nforks: 1
module: command
method: run
parameters: "/bin/echo Hello World"
```

**JSON格式**
```json
{
    "clients": "*",
    "async": "False",
    "nforks": 1,
    "module": "command",
    "method": "run",
    "parameters": "/bin/echo Hello World"
}
```

### 11.5 Func的Facts支持

`Facts` 组件类似于SaltStack的 `grains` 和Ansible的 `Facts`，用于获取远程主机的系统信息。可以通过API扩展用户自己的属性。

#### 使用示例
- **and表达式** (`--filter`)
  ```bash
  --filter "kernel>=2.6,os=CentOS"
  ```

- **or表达式** (`--filteror`)
  ```bash
  --filteror "kernel>=2.6,runlevel=5"
  ```

### 参考资料
- [Func官方文档](https://fedorahosted.org/func/)

### 第12章 Python大数据应用详解

随着云时代的到来，大数据越来越受关注。本章详细介绍如何使用Python语言实现大数据应用，包括原生Python和框架方式。

#### 12.1 环境说明
- 操作系统：CentOS release 6.4
- Python版本：2.6.6
- Hadoop版本：hadoop-1.2.1
- JDK版本：jdk1.6.0_45
- mrjob版本：mrjob-0.4.2

#### 12.2 Hadoop部署
为了方便读者理解，本文通过虚拟化环境部署了Hadoop平台来进行演示。配置Master主机可以无密码登录所有Slave主机。