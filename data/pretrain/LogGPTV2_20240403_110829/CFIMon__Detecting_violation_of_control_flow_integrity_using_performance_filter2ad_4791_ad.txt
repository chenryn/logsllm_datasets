### Enhancements for Monitoring Units in Attack Detection

To improve the effectiveness of monitoring units for attack detection, the following enhancements are proposed:

1. **Event Filtering for BTS:**
   - **Current Limitation:** No commercially available processor supports Event Filtering for Branch Trace Store (BTS). Although Intel Core i7 supports Event Filtering for Last Branch Records (LBR), its register stack is insufficient for comprehensive security diagnosis.
   - **Proposed Enhancement:** Implementing more flexible event filtering in hardware would reduce the performance overhead and complexity of CFIMon in various usage scenarios. For instance, selective sampling of only call or return instructions in BTS could significantly lower the overhead when detecting return-oriented programming (ROP) attacks.

2. **Co-existing Multiple Counters for Security:**
   - **Current Limitation:** Commodity processors have poor support for simultaneous monitoring of multiple events. For example, monitoring four events simultaneously on Intel processors reduces precision and increases performance overhead.
   - **Proposed Enhancement:** Investigate hardware support to increase the concurrency level of performance monitoring without sacrificing performance and precision. This would enable CFIMon to coexist with performance tuning, enhancing overall system efficiency.

3. **Precise Linear Address Information of Memory Stores:**
   - **Current Limitation:** While Intel Core i7 supports precise linear address information for memory operations with a latency threshold, it cannot detect non-control-data attacks due to random tagging of instructions and a minimum latency threshold of 4 cycles.
   - **Proposed Enhancement:** Develop a precise event that can record specific memory stores with linear address information. This would enable the detection of non-control-data attacks by checking data flow integrity or write integrity testing.

### Related Work

#### Performance Counters
- **Existing Uses:** Performance counters have been widely used for performance profiling and online optimization. Previous research has focused on providing low-overhead, non-intrusive, and accurate performance monitoring.
- **Novel Use:** This paper demonstrates the use of performance counters for non-intrusive detection of security attacks in unmodified, deployed applications. Unlike previous ad-hoc approaches, CFIMon provides a uniformed method to detect and analyze different attacks related to control flow integrity.

#### Control Flow Attacks and Countermeasures
- **Code-reuse Attacks:** Recent code-reuse attacks, such as Return-to-libc, Return-oriented Programming (ROP), and Jump-oriented Programming (JOP), exploit existing binary sequences to bypass traditional defenses.
- **Defending Against Code-reuse Attacks:** Various methods, including shadow stacks, binary rewriting, and dynamic integrity measurement, have been proposed. However, these approaches are often ad-hoc and require significant modifications to source code or binaries.

#### Other Security Techniques
- **Security Through Diversity:** Running multiple diverse copies of software and comparing results can defend against a variety of attacks but often incurs high resource consumption.
- **Security Through Randomization:** Randomizing execution environments, such as instruction sets and address spaces, can effectively defend against code-injection attacks, but may cause performance degradation.
- **Control and Data Flow Integrity:** Enforcing control and data flow integrity dynamically can defend against attacks, but it requires binary rewriting and incurs non-trivial performance overhead.
- **Taint Tracking:** Taint tracking marks and tracks data from untrusted sources, but software-based implementations often result in significant performance overhead.

### Conclusion and Future Work

- **CFIMon Overview:** CFIMon leverages the branch trace store mechanism in performance counters to detect a wide range of security attacks, including classic code-injection and emerging code-reuse attacks. Our evaluation shows that CFIMon can effectively detect these attacks with modest performance overhead.
- **Future Directions:**
  - **Extended Applications:** Extend CFIMon to detect other types of bugs, such as race conditions, ordering violations, and deadlocks, by coupling with minor architectural support to filter out false positives.
  - **High-level Semantic Attacks:** Integrate program semantics to detect high-level semantic attacks.
  - **Compiler Support:** Investigate how compilers can be used to make applications friendlier to CFIMon, further reducing complexity and increasing precision.

### Acknowledgments
We thank the anonymous reviewers for their insightful comments. This work was funded by the China National Natural Science Foundation, the Science and Technology Commission of Shanghai Municipality, Fundamental Research Funds for the Central Universities in China, and the Shanghai Leading Academic Discipline Project.

### References
[References listed as provided, with no changes needed.]