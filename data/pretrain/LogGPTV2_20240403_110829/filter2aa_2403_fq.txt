    bp 
seg030:01C0 8B EC  
   mov 
    bp, sp 
seg030:01C2 9A 3D 21 00+ 
   call 
    _rand 
seg030:01C7 66 0F BF C0 
   movsx   eax, ax 
seg030:01CB 66 0F BF 56+ 
   movsx   edx, [bp+arg_0] 
seg030:01D0 66 0F AF C2 
   imul    eax, edx 
seg030:01D4 66 BB 00 80+ 
   mov      ebx, 8000h 
seg030:01DA 66 99  
   cdq 
seg030:01DC 66 F7 FB  
   idiv    ebx 
seg030:01DF 5D         
   pop     bp 
seg030:01E0 CB     
   retf 
seg030:01E0                 get_rand endp 
可见，程序会把随机文本字符串发送到加密狗上，然后把加密狗的返回值与正确的哈希值进行比对。 
加密狗检测主函数的调用方法如下： 
seg033:087B 9A 45 01 96+ 
  call     check_dongle 
seg033:0880 0B C0         
  or       ax, ax 
seg033:0882 74 62            jz       short OK 
seg033:0884 83 3E 60 42+ 
  cmp      word_620E0, 0 
seg033:0889 75 5B            jnz      short OK 
seg033:088B FF 06 60 42 
  inc  
word_620E0 
seg033:088F 1E           
  push 
ds 
seg033:0890 68 22 44   
  push 
offset aTrupcRequiresA ; "This Software Requires a Software Lock\n" 
seg033:0893 1E         
  push     ds 
seg033:0894 68 60 E9   
  push     offset byte_6C7E0 ; dest 
seg033:0897 9A 79 65 00+ 
  call     _strcpy 
seg033:089C 83 C4 08    
  add      sp, 8 
seg033:089F 1E         
  push     ds 
seg033:08A0 68 42 44   
  push     offset aPleaseContactA ; "Please Contact ..." 
seg033:08A3 1E         
  push     ds 
seg033:08A4 68 60 E9     
  push     offset byte_6C7E0 ; dest 
seg033:08A7 9A CD 64 00+ 
  call     _strcat 
由此可知，破解加密狗的方法十分简单；我们只要把 check_dongle()函数的返回值强制设置为 0 即可。
例如，不妨在代码的开头处加上下列指令： 
mov ax,0  
retf 
细心的读者可能会想起 C 语言的 strcpy()函数仅仅需要 2 个参数而已，但是这个指令却传递了 4 个值。 
seg033:088F 1E         
push     ds 
seg033:0890 68 22 44  
push    offset aTrupcRequiresA ; "This Softwar  
     Requires a Software Lock\n" 
seg033:0893 1E         
push     ds 
seg033:0894 68 60 E9  
push     offset byte_6C7E0 ; dest 
seg033:0897 9A 79 65 00+ 
call    _strcpy 
seg033:089C 83 C4 08    
add     sp, 8 
这是 MS-DOS 特有的寻址方式。如需了解详情，请参见第 94 章。 
如您所见，在使用 strcpy()和其他函数时，操作系统都是把指针分解为一对 16 位值、然后再进行传递的。 
在程序启动时，DS 寄存器的值被设置为当前程序数据段的地址。程序里的字符串信息都存储在数据段里。 
在 send_pro()函数里，字符串的每个字节都被加载到 seg030:00EF。与此同时，LES 指令从外部传递的
参数里加载 ES:BX 对。地址 seg030:00F5 处的 MOV 指令，在内存中 ES:BX 对所描述的地址上读取字节。 
而 seg030:00F2 的指令只对 16 位值进行递增处理，却没有处理的值。这意味着传递给函数的字符串位
于两个数据段的地址之外。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7799 章
章    “
“Q
QRR99”
”：
：魔
魔方
方态
态加
加密
密模
模型
型  
非专业的加密系统偶尔会让人感到匪夷所思。 
本章将与您共同逆向分析一款已经找不到源代码的数据加密软件。 
首先利用 IDA 的导出功能，导出这款程序的指令清单： 
.text:00541000 set_bit         
proc near   
; CODE XREF: rotate1+42 
.text:00541000  
; rotate2+42 ... 
.text:00541000 
.text:00541000 arg_0            
= dword ptr  4 
.text:00541000 arg_4            
= dword ptr  8 
.text:00541000 arg_8            
= dword ptr  0Ch 
.text:00541000 arg_C            
= byte ptr  10h 
.text:00541000 
.text:00541000  
mov     al, [esp+arg_C] 
.text:00541004  
mov     ecx, [esp+arg_8] 
.text:00541008  
push     esi 
.text:00541009  
mov      esi, [esp+4+arg_0] 
.text:0054100D  
test     al, al 
.text:0054100F  
mov      eax, [esp+4+arg_4] 
.text:00541013  
mov      dl, 1 
.text:00541015  
jz       short loc_54102B 
.text:00541017  
shl      dl, cl 
.text:00541019  
mov      cl, cube64[eax+esi*8] 
.text:00541020  
or       cl, dl 
.text:00541022  
mov      cube64[eax+esi*8], cl 
.text:00541029  
pop      esi 
.text:0054102A  
retn 
.text:0054102B 
.text:0054102B loc_54102B:     
; CODE XREF: set_bit+15 
.text:0054102B  
shl     dl, cl 
.text:0054102D  
mov      cl, cube64[eax+esi*8] 
.text:00541034  
not      dl 
.text:00541036  
and      cl, dl 
.text:00541038  
mov      cube64[eax+esi*8], cl 
.text:0054103F  
pop      esi 
.text:00541040  
retn 
.text:00541040 set_bit         
endp 
.text:00541040 
.text:00541041  
align 10h 
.text:00541050 
.text:00541050 ; =============== S U B R O U T I N E ============= 
.text:00541050 
.text:00541050 
.text:00541050 get_bit        
proc near   
; CODE XREF: rotate1+16 
.text:00541050  
; rotate2+16 ... 
.text:00541050 
.text:00541050 arg_0            
= dword ptr  4 
.text:00541050 arg_4            
= dword ptr  8 
.text:00541050 arg_8            
= byte ptr  0Ch 
.text:00541050 
.text:00541050  
mov     eax, [esp+arg_4] 
.text:00541054  
mov      ecx, [esp+arg_0] 
.text:00541058  
mov      al, cube64[eax+ecx*8] 
.text:0054105F  
mov      cl, [esp+arg_8] 
.text:00541063  
shr      al, cl 
.text:00541065  
and      al, 1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
754 
逆向工程权威指南（下册） 
.text:00541067  
retn 
.text:00541067 get_bit         
endp 
.text:00541067 
.text:00541068  
align 10h 
.text:00541070 
.text:00541070 ; =========== S U B R O U T I N E ============ 
.text:00541070 
.text:00541070 
.text:00541070 rotate1     
proc near  
; CODE XREF: rotate_all_with_password+8E 
.text:00541070 
.text:00541070 internal_array_64= byte ptr -40h 
.text:00541070 arg_0            
= dword ptr  4 
.text:00541070 
.text:00541070  
sub     esp, 40h 
.text:00541073  
push     ebx 
.text:00541074  
push     ebp 
.text:00541075  
mov      ebp, [esp+48h+arg_0] 
.text:00541079  
push     esi 
.text:0054107A  
push     edi 
.text:0054107B  
xor      edi, edi  
; EDI is loop1 counter 
.text:0054107D  
lea     ebx, [esp+50h+internal_array_64] 
.text:00541081 
.text:00541081 first_loop1_begin: 
; CODE XREF: rotate1+2E 
.text:00541081  
xor      esi, esi    
; ESI is loop2 counter 
.text:00541083 
.text:00541083 first_loop2_begin: 
; CODE XREF: rotate1+25 
.text:00541083  
push     ebp         
; arg_0 
.text:00541084  
push     esi 
.text:00541085  
push     edi 
.text:00541086  
call     get_bit 
.text:0054108B  
add      esp, 0Ch 
.text:0054108E  
mov      [ebx+esi], al  
; store to internal array 
.text:00541091  
inc     esi 
.text:00541092  
cmp      esi, 8 
.text:00541095  
jl       short first_loop2_begin 
.text:00541097  
inc      edi 
.text:00541098  
add      ebx, 8 
.text:0054109B  
cmp      edi, 8 
.text:0054109E  
jl 
   short first_loop1_begin 
.text:005410A0  
lea     ebx, [esp+50h+internal_array_64] 
.text:005410A4  
mov     edi, 7    
; EDI is loop1 counter, initial state is 7 
.text:005410A9 
.text:005410A9 second_loop1_begin: 
; CODE XREF: rotate1+57 
.text:005410A9  
xor    esi, esi  
; ESI is loop2 counter 
.text:005410AB 
.text:005410AB second_loop2_begin: 
; CODE XREF: rotate1+4E 
.text:005410AB  
mov     al, [ebx+esi]  
; value from internal array 
.text:005410AE  
push     eax 
.text:005410AF  
push    ebp        
; arg_0 
.text:005410B0  
push     edi 
.text:005410B1  
push     esi 
.text:005410B2  
call     set_bit 
.text:005410B7  
add      esp, 10h 
.text:005410BA  
inc      esi       
; increment loop2 counter 
.text:005410BB  
cmp      esi, 8 
.text:005410BE  
jl      short second_loop2_begin 
.text:005410C0  
dec      edi       
; decrement loop2 counter 
.text:005410C1  
add     ebx, 8 
.text:005410C4  
cmp     edi, 0FFFFFFFFh 