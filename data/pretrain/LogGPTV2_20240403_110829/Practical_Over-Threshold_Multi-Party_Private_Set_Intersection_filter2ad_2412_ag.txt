Yehuda Lindell and Ben Riva. Blazing fast 2PC in the oﬄine/online setting with security for
malicious adversaries. In Indrajit Ray, Ninghui Li, and Christopher Kruegel:, editors, ACM
CCS 15, pages 579–590, Denver, CO, USA, October 12–16, 2015. ACM Press.
Ronghua Li and Chuankun Wu. An Unconditionally Secure Protocol for Multi-Party Set Inter-
section, pages 226–236. Springer Berlin Heidelberg, Berlin, Heidelberg, 2007.
Catherine A. Meadows. A more eﬃcient cryptographic matchmaking protocol for use in the
absence of a continuously available third party. In IEEE Symposium on Security and Privacy,
pages 134–137, 1986.
Atsuko Miyaji and Shohei Nishida. A scalable multiparty private set intersection. In Network
and System Security, pages 376–385. Springer, 2015.
Payman Mohassel and Ben Riva. Garbled circuits checking garbled circuits: More eﬃcient and
secure two-party computation. In Canetti and Garay [CG13], pages 36–53.
Moni Naor and Benny Pinkas. Eﬃcient oblivious transfer protocols.
In Proceedings of the
Twelfth Annual ACM-SIAM Symposium on Discrete Algorithms, SODA ’01, pages 448–457,
Philadelphia, PA, USA, 2001. Society for Industrial and Applied Mathematics.
Kurt Opsahl. The disconcerting details: How Facebook teams up with data brokers to show
you targeted ads. https://www.eﬀ.org/deeplinks/2013/04/disconcerting-details-how-facebook-
teams-data-brokers-show-you-targeted-ads, 2013. [Online; accessed 23-May-2016].
[PCR08]
Arpita Patra, Ashish Choudhary, and C. Pandu Rangan. Unconditionally secure multiparty
set intersection re-visited. IACR Cryptology ePrint Archive, 2008:462, 2008.
[PR01]
[PSS16]
[PSSZ15]
[PSZ14]
[PSZ16]
[RA17]
Rasmus Pagh and Flemming Friche Rodler. Cuckoo hashing.
Algorithms, pages 121–133. Springer, 2001.
In European Symposium on
Arpita Patra, Pratik Sarkar, and Ajith Suresh. Fast actively secure ot extension for short secrets.
Cryptology ePrint Archive, Report 2016/940, 2016. http://eprint.iacr.org/2016/940.
Benny Pinkas, Thomas Schneider, Gil Segev, and Michael Zohner. Phasing: Private set inter-
section using permutation-based hashing. In Jaeyeon Jung and Thorsten Holz, editors, 24th
USENIX Security Symposium, USENIX Security 15, pages 515–530, 2015.
Benny Pinkas, Thomas Schneider, and Michael Zohner. Faster private set intersection based
on OT extension. In Kevin Fu and Jaeyeon Jung, editors, 23rd USENIX Security Symposium,
USENIX Security 14, pages 797–812. USENIX Association, 2014.
Benny Pinkas, Thomas Schneider, and Michael Zohner. Scalable private set intersection based
on ot extension. Cryptology ePrint Archive, Report 2016/930, 2016. http://eprint.iacr.
org/2016/930.
Amanda Cristina Davi Resende and Diego F. Aranha. Unbalanced approximate private set
intersection. Cryptology ePrint Archive, Report 2017/677, 2017. http://eprint.iacr.org/
2017/677.
[Rin]
Peter Rindal. libOTe: an eﬃcient, portable, and easy to use Oblivious Transfer Library. https:
//github.com/osu-crypto/libOTe.
22
[RR16]
[RR17a]
[RR17b]
[Sha80]
Peter Rindal and Mike Rosulek. Faster malicious 2-party secure computation with online/oﬄine
dual execution. In USENIX Security 2016. USENIX Association, 2016.
Peter Rindal and Mike Rosulek.
Improved private set intersection against malicious adver-
saries. In Jean-S´ebastien Coron and Jesper Buus Nielsen, editors, Advances in Cryptology -
EUROCRYPT 2017 - 36th Annual International Conference on the Theory and Applications of
Cryptographic Techniques, Paris, France, April 30 - May 4, 2017, Proceedings, Part I, volume
10210 of Lecture Notes in Computer Science, pages 235–259, 2017.
Peter Rindal and Mike Rosulek. Malicious-secure private set intersection via dual execution.
Cryptology ePrint Archive, Report 2017/769, 2017. http://eprint.iacr.org/2017/769.
Adi Shamir. On the power of commutativity in cryptography. In Automata, Languages and
Programming, pages 582–595, 1980.
[Sho03]
Victor Shoup. NTL: A library for doing number theory. http://www.shoup.net/ntl, 2003.
[SS08]
Yingpeng Sang and Hong Shen. Privacy preserving set intersection based on bilinear groups.
In Proceedings of the Thirty-ﬁrst Australasian Conference on Computer Science - Volume 74,
ACSC ’08, pages 47–54, Darlinghurst, Australia, Australia, 2008. Australian Computer Society,
Inc.
[WRK17a] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. Authenticated garbling and eﬃcient ma-
liciously secure two-party computation. Cryptology ePrint Archive, Report 2017/030, 2017.
http://eprint.iacr.org/2017/030.
[WRK17b] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. Global-scale secure multiparty computa-
tion. Cryptology ePrint Archive, Report 2017/189, 2017. http://eprint.iacr.org/2017/189.
[Yao86]
[Yun15]
Andrew Chi-Chih Yao. How to generate and exchange secrets (extended abstract). In 27th
FOCS, pages 162–167, Toronto, Ontario, Canada, October 27–29, 1986. IEEE Computer Society
Press.
Moti Yung. From mental poker to core business: Why and how to deploy secure computation
protocols?
https://www.sigsac.org/ccs/CCS2015/pro_keynote.html, 2015. ACM CCS
2015 Keynote Talk.
A The Augmented Semi Honest Model
The unconditional zero-sharing protocol is secure in the augmented semi-honest model. Informally, in this
model the parties controlled by the adversary are allowed to change their inputs at the beginning of the
computation. (The main “power” given to the simulator in proofs in this model, is that after reading the
inputs of the parties from their input tapes it can change them before sending inputs to the trusted party.)
The reason for the usage of this model, is the star-like communication infrastructure that is used by the
protocols, where all parties independently interact with a single party (the “dealer”). A star structure is a
very appealing communication pattern, since it does not require most parties to interact with each other or
to coordinate a time in which they are all online. However, it is clear (as was demonstrated by a lower bound
of [HLP11]) that a coalition of the dealer with some corrupt parties can “save” the state of the protocol after
the interaction between all honest parties and the dealer, and then continue running the protocol from that
state using diﬀerent options for the inputs of the corrupt parties. Note, however, that in the PSI setting the
only useful input for the corrupt coalition is where the input of all its members is equal to the input that the
dealer used in its interactions with the honest parties. Therefore even though they can choose other inputs
and run the protocol with those inputs, they know in advance that the corresponding output will be the
empty set.
This additional “power” that is given to the adversary is essential in our protocol since (in order to keep a
simple communication infrastructure) not all parties interact with each other. Therefore two corrupt parties
23
which only interact with each other may assume the power to “use” any input they would like during their
execution.
We emphasize, though, that the in our protocol the corrupt parties can only set their input once, and
that the only “useful” input strategy that they can use when computing the multi-party PSI functionality,
is to use the same input set for all corrupt parties, since any value which is not in the intersection of the
inputs of the corrupt parties will surely not be in the ﬁnal PSI output.
A detailed discussion of the “power” of the augmented semi-honest model can be found in [HL10] Sec.
2.2.3. We present here the formal deﬁnition of this model (Def. 7.4.24 of [Gol09]). We note that this
model was implicitly used by multiple other works related to OT, such as the private equality test protocol
in [GOW12] or the multi-party PSI protocol in [FNP04].
Deﬁnition 3. (the augmented semi-honest model): Let Π be a two-party protocol. An augmented semi-honest
behavior (with respect to Π) is a (feasible) strategy that satisﬁes the following conditions:
• Entering the execution (this is the only part of the deﬁnition which diﬀers than the standard deﬁnition
of semi-honest behavior): Depending on its initial input, denoted u, the party may abort before taking
any step in the execution of Π. Otherwise it enters the execution with any input u(cid:48) ∈ {0, 1}|u| of its
choice. From this point on, u(cid:48) is ﬁxed.
• Proper selection of a random-tape: The party selects the random tape to be used in Π uniformly among
all strings of the length speciﬁed by Π. That is, the selection of the random-tape is exactly as speciﬁed
by Π.
• Proper message transmission or abort: In each step of Π, depending on its view of the execution so
far, the party may either abort or send a message as instructed by Π. We stress that the message is
computed as Π instructs based on input u(cid:48), the selected random-tape and all the messages received so
far.
• Output: At the end of the interaction, the party produces an output depending on its entire view of the
interaction. We stress that the view consists of the initial input u, the selected random tape, and all
the messages received so far.
B Hashing Schemes and Parameter Analysis
In this section we describe a new variant of Cuckoo hashing that avoids a stash. We analyze its parameters.
There are three parameters[KMW08] that aﬀect the Cuckoo hashing failure probability: the number of
bins ζn, the number of hash functions h, and the stash size s. Let Prn,ζ,h(S ≥ s) denote the probability that
when hashing n items into ζn bins (for 1 < ζ < 2) using h hash functions, the stash size exceeds s. [PSZ16]
proved that asymptotically, Prn,ζ,h(S ≥ s) = O(n(1−h)(s+1)) when h ≥ 2ζ ln( e
ζ−1 ).
Our new variant works as follows to insert an item x. There are (ζ1 + ζ2)n bins.
• First, use traditional Cuckoo hashing with h1 hash functions to insert x into one of the ﬁrst ζ1n bins.
• If the ﬁrst phase fails, then use Cuckoo hashing with h2 = 2 hash functions to insert the ﬁnal evicted
item into the last ζ2n bins.
The overall procedure fails if the second phase fails to ﬁnd a suitable location for the ﬁnal item. Note that
the probability that s items will require a second phase of hashing is exactly Prn,ζ1,h1(S ≥ s). Hence, the
24
60
50
40
30
20
y
−
2
y
t
i
l
i
b
a
b
o
r
P
r
o
r
r
E
7 8
ζ1 = 1.12
ζ1 = 1.13
ζ1 = 1.14
ζ1 = 1.15
ζ1 = 1.17
12
20
Number of Elements n = 2x
16
24
Figure 12: Required number of bins nζ1 in ﬁrst step of bucket allocation of our hashing scheme. The solid
lines shows the actual measurements, the dashed lines were extrapolated using linear regression.
failure probability of the overall procedure is:
(cid:0) Pr
(cid:0)O(n(1−h1)(s+1))O(s−1)(cid:1)
(S1 ≥ s)
s,ζ2,h2=2
n,ζ1,h1
Pr
(S2 ≥ 0)(cid:1)
(2)
(S ≥ 0) =
Pr
n,ζ1,ζ2
=
=
s=1
n(cid:88)
n(cid:88)
n(cid:88)
∞(cid:88)
s=1
s=1
n(1−h1)(s+1)
s
n(1−h1)(s+1)
)
)
O(
O(
≤
s=1
s
≤ O(n1−h1 log2(
nh1
nh1 − n
))
Equation 2 allows us empirically estimate a concrete failure probability given a set of parameters
{n, h1, h2, ζ1, ζ2}. We ﬁrst ﬁx the number of hash functions h1 = 3, and determine necessary the scale
of bins ζ1, ζ2 such that no stash is required (i.e. s = 0) except with probability < 2−λ.
To obtain concrete numbers of ζ1 when ζ2 ﬁxed, we run 230 repetition of our Cuckoo hashing scheme,
where we mapped n ∈ {27, 28, 29, 210, 211} items to nζ1 bins using h1 hash functions and then mapping all
failed items to nζ2 bins using h2 hash functions. We recorded the scale ζ1 in Figure 12 with the solid line.
To achieve the failure probability for larger n, we use linear regression by a variable n(cid:48) = n−2 log2( n3
n3−n )
to extrapolate the ζ1. We substitute n(cid:48) back to n and show the relationship between n and the predicted
ζ1 by the dash line in Figure 12. Table 2 shows the extrapolated scale ζ1 for the Cuckoo hashing failure
probability {230, 240}. We observe that for n = 220, our hashing scheme needs 1.3n bins with no stash size.
Simple hashing bounds. Moreover, we also need to guarantee that the maximum bin size β1, β2 is
small when using Simple hashing to map n items to nζ1 bins and nζ2 bins with no overﬂow. [PSZ16] shows
that the probability of “n balls are mapped at random to m bins, and the most occupied bin has at least k
balls” is
(3)
We evaluate Eq. 3 with the set sizes n ∈ {212, 216, 220, 224}, and depict the maximum bin size {βi | i ∈ {1, 2}}
for the Simple hashing failure probability {230, 240} in Table 2.
Pr(∃bin with ≥ k balls) ≤ m(
en
mk
)k
25