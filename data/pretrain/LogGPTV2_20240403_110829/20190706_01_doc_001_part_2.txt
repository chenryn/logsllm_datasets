### Inverse FTS (FQS) and RUM Index

**RUM Index Support:**
- The RUM index supports storing branches of the query tree in additional information, which can be beneficial for complex queries.

**Finding Queries for the First Message in Postgres Mailing Lists:**

1. **Table Definition:**
   ```sql
   \d pg_query
   Table "public.pg_query"
   Column | Type | Modifiers
   --------+---------+-----------
   q | tsquery |
   count | integer |
   Indexes:
   "pg_query_rum_idx" rum (q)
   ```

2. **Query to Find Matching Queries:**
   ```sql
   select q from pg_query pgq, pglist where q @@ pglist.fts and pglist.id = 1;
   ```
   - **Results:**
     ```
     q
     --------------------------
     'one' & 'one'
     'postgresql' & 'freebsd'
     (2 rows)
     ```

3. **Creating and Using the RUM Index:**
   ```sql
   create index pg_query_rum_idx on pg_query using rum(q);
   select q from pg_query pgq, pglist where q @@ pglist.fts and pglist.id = 1;
   ```
   - **Query Plan:**
     ```
     Nested Loop (actual time=0.719..0.721 rows=2 loops=1)
     -> Index Scan using pglist_id_idx on pglist (actual time=0.013..0.013 rows=1 loops=1)
        Index Cond: (id = 1)
     -> Bitmap Heap Scan on pg_query pgq (actual time=0.702..0.704 rows=2 loops=1)
        Recheck Cond: (q @@ pglist.fts)
        Heap Blocks: exact=2
        -> Bitmap Index Scan on pg_query_rum_idx (actual time=0.699..0.699 rows=2 loops=1)
           Index Cond: (q @@ pglist.fts)
     Planning time: 0.212 ms
     Execution time: 0.759 ms
     (10 rows)
     ```

### Monstrous Postings

**Query to Find Top Queries:**
```sql
select id, t.subject, count(*) as cnt into pglist_q 
from pg_query, (select id, fts, subject from pglist) t 
where t.fts @@ q
group by id, subject 
order by cnt desc 
limit 1000;

select * from pglist_q order by cnt desc limit 5;
```
- **Results:**
  ```
  id | subject | cnt
  --------+-----------------------------------------------+------
  248443 | Packages patch | 4472
  282668 | Re: release.sgml, minor pg_autovacuum changes | 4184
  282512 | Re: release.sgml, minor pg_autovacuum changes | 4151
  282481 | release.sgml, minor pg_autovacuum changes | 4104
  243465 | Re: [HACKERS] Re: Release notes | 3989
  (5 rows)
  ```

### RUM vs GIN

**Performance Comparison:**
- **Setup:**
  - 6 million classifications
  - Real FTS queries
  - Concurrency: 24
  - Duration: 1 hour

- **Results:**
  - **GIN:**
    - 258,087 queries per hour
  - **RUM:**
    - 1,885,698 queries per hour
    - 7x speedup compared to GIN

**Insert Performance:**
- **Time (minutes):**
  - GiST: 10
  - GIN: 10
  - GIN_no_fast: 21
  - RUM: 34

- **WAL (GB):**
  - GiST: 3.5
  - GIN: 7.5
  - GIN_no_fast: 24
  - RUM: 29

**Index Creation:**
- **WAL Traffic:**
  - GENERIC WAL (PostgreSQL 9.6) generates significant WAL traffic.
  - RUM writes WAL after creating the index.

- **Comparison:**
  ```
  +-----------------------------------------------------------+
  |table | gin | rum (fts |rum(fts,ts)|rum(fts,ts+order|
  +-----------------------------------------------------------+
  Create time| | 147 s | 201 | 209 | 215 |
  +-----------------------------------------------------------+
  Size( mb) |2167/1302| 534 | 980 | 1531 | 1921 |
  +-----------------------------------------------------------+
  WAL (Gb) | | 0.9 | 0.68 | 1.1 | 1.5 |
  +-----------------------------------------------------------+
  ```

### RUM for JSONB

**Example:**
- **Table Data:**
  ```sql
  ctid | value
  -------+------------------------
  (0,1) | '{"array": [1, 2, 3]}'
  (0,2) | '{"array": [2, 3]}'
  ```

- **GIN Index:**
  - No information about array elements positions.
  - Example:
    ```sql
    array.#.1: (0,1)
    array.#.2: (0,1); (0,2)
    array.#.3: (0,1); (0,2)
    ```

- **RUM Index:**
  - With information about array elements positions.
  - Example:
    ```sql
    array.#.1: (0,1) | 0
    array.#.2: (0,1) | 1; (0,2) | 0
    array.#.3: (0,1) | 2; (0,2) | 1
    ```

**Performance Comparison:**
- **GIN Query:**
  ```sql
  EXPLAIN (ANALYZE, BUFFERS) SELECT count(*) FROM js WHERE js @@ 'tags.#16.term = "design"'::jsquery;
  ```
  - **Results:**
    ```
    Aggregate (cost=4732.10..4732.11 rows=1 width=8) (actual time=101.047..101.047 rows=1 loops=1)
    Buffers: shared hit=55546
    -> Bitmap Heap Scan on js (cost=33.71..4728.97 rows=1253 width=0) (actual time=35.495..101.025 rows=10 loops=1)
       Recheck Cond: (js @@ '"tags".#16."term" = "design"'::jsquery)
       Rows Removed by Index Recheck: 64490
       Heap Blocks: exact=55525
       Buffers: shared hit=55546
       -> Bitmap Index Scan on js_gin_idx (cost=0.00..33.40 rows=1253 width=0) (actual time=12.498..12.498 rows=64500 loops=1)
          Index Cond: (js @@ '"tags".#16."term" = "design"'::jsquery)
          Buffers: shared hit=21
    Planning time: 0.104 ms
    101.447 ms
    Execution time:
    ```

- **RUM Query:**
  ```sql
  EXPLAIN (ANALYZE, BUFFERS) SELECT count(*) FROM js WHERE js @@ 'tags.#16.term = "design"'::jsquery;
  ```
  - **Results:**
    ```
    Aggregate (cost=4732.10..4732.11 rows=1 width=8) (actual time=5.818..5.818 rows=1 loops=1)
    Buffers: shared hit=71
    -> Bitmap Heap Scan on js (cost=33.71..4728.97 rows=1253 width=0) (actual time=5.804..5.813 rows=10 loops=1)
       Recheck Cond: (js @@ '"tags".#16."term" = "design"'::jsquery)
       Heap Blocks: exact=10
       Buffers: shared hit=71
       -> Bitmap Index Scan on js_rum_idx (cost=0.00..33.40 rows=1253 width=0) (actual time=5.799..5.799 rows=10 loops=1)
          Index Cond: (js @@ '"tags".#16."term" = "design"'::jsquery)
          Buffers: shared hit=61
    Planning time: 0.057 ms 17 times faster!!!
    5.860 ms
    Execution time:
    ```

- **Size Comparison:**
  - **Table:** 1369 MB
  - **GIN Index:** 411 MB, 80.2 seconds
  - **RUM Index:** 516 MB, 86.6 seconds
  - RUM for JSONB is only 25% larger than GIN for JSONB.

### RUM Todo

- **Allow Multiple Additional Info:**
  - Lexemes positions + timestamp
- **Add Support for Arrays:**
  - Improve ranking function to support TF/IDF
- **Improve Insert Time:**
  - Pending list?
- **Improve GENERIC WAL:**
  - Support shift
- **Availability:**
  - PostgreSQL 9.6+: https://github.com/postgrespro/rum

### Better FTS Configurability

**The Problem:**
- Searching a multilingual collection requires processing by several language-specific dictionaries.
- Currently, the logic of processing is hidden from the user, making it difficult to configure.

**Example:**
```sql
ALTER TEXT SEARCH CONFIGURATION multi_conf
ALTER MAPPING FOR asciiword, asciihword, hword_asciipart, word, hword, hword_part
WITH unaccent, german_ispell, english_ispell, simple;
```

**Logic of Tokens Processing:**
- **Example: German-English Collection:**
  ```sql
  ALTER TEXT SEARCH CONFIGURATION multi_conf
  ALTER MAPPING FOR asciiword, asciihword, hword_asciipart, word, hword, hword_part
  WITH unaccent THEN (german_ispell AND english_ispell) OR simple;
  ```

### Some FTS Problems

**Working with Dictionaries:**
- Installing dictionaries can be complicated.
- Dictionaries are loaded into memory for every session, leading to slow first queries and high memory usage.

**Example:**
```sh
time for i in {1..10}; do echo $i; psql postgres -c "select ts_lexize('english_hunspell', 'evening')" > /dev/null; done
```
- **Results:**
  ```
  real 0m3.809s
  user 0m0.015s
  sys 0m0.029s
  Each session «eats» 20MB of RAM!
  ```

### Dictionaries in Shared Memory

**Solution:**
- Artur Zakirov and Thomas Vondra have developed a solution to share dictionaries in memory.
- **GitHub Repository:**
  - https://github.com/postgrespro/shared_ispell

**Example:**
```sql
CREATE EXTENSION shared_ispell;
CREATE TEXT SEARCH DICTIONARY english_shared (
  TEMPLATE = shared_ispell,
  DictFile = en_us,
  AffFile = en_us,
  StopWords = english
);
CREATE TEXT SEARCH DICTIONARY russian_shared (
  TEMPLATE = shared_ispell,
  DictFile = ru_ru,
  AffFile = ru_ru,
  StopWords = russian
);
```

**Performance Improvement:**
```sh
time for i in {1..10}; do echo $i; psql postgres -c "select ts_lexize('russian_shared', 'туши')" > /dev/null; done
```
- **Results:**
  ```
  real 0m0.170s
  user 0m0.015s
  sys 0m0.029s
  ```

### Dictionaries as Extensions

**Solution:**
- Artur Zakirov has developed extensions for Hunspell dictionaries.
- **GitHub Repository:**
  - https://github.com/postgrespro/hunspell_dicts

**Example:**
```sql
CREATE EXTENSION hunspell_ru_ru; -- creates russian_hunspell dictionary
CREATE EXTENSION hunspell_en_us; -- creates english_hunspell dictionary
CREATE EXTENSION hunspell_nn_no; -- creates norwegian_hunspell dictionary

SELECT ts_lexize('english_hunspell', 'evening');
-- Results: {evening,even} (Time: 57.612 ms)

SELECT ts_lexize('russian_hunspell', 'туши');
-- Results: {туша,тушь,тушить,туш} (Time: 382.221 ms)

SELECT ts_lexize('norwegian_hunspell','fotballklubber');
-- Results: {fotball,klubb,fot,ball,klubb} (Time: 323.046 ms)
```

### Tsvector Editing Functions

**Stas Kelvich (Postgres Professional)**
- **setweight(tsvector, 'char', text[]):**
  - Adds a label to lexemes from the text[] array.
  ```sql
  select setweight(to_tsvector('english', '20-th anniversary of PostgreSQL'), 'A', '{postgresql,20}');
  -- Results: '20':1A 'anniversari':3 'postgresql':5A 'th':2
  ```

- **ts_delete(tsvector, text[]):**
  - Deletes lexemes from the tsvector.
  ```sql
  select ts_delete(to_tsvector('english', '20-th anniversary of PostgreSQL'), '{20,postgresql}'::text[]);
  -- Results: 'anniversari':3 'th':2
  ```

- **unnest(tsvector):**
  - Unnests the tsvector.
  ```sql
  select * from unnest(setweight(to_tsvector('english', '20-th anniversary of PostgreSQL'), 'A', '{postgresql,20}'));
  -- Results:
  -- lexeme | positions | weights
  -- -------------+-----------+---------
  -- 20 | {1} | {A}
  -- anniversari | {3} | {D}
  -- postgresql | {5} | {A}
  -- th | {2} | {D}
  ```

- **tsvector_to_array(tsvector):**
  - Converts tsvector to a text[] array.
  ```sql
  select tsvector_to_array(to_tsvector('english', '20-th anniversary of PostgreSQL'));
  -- Results: {20,anniversari,postgresql,th}
  ```

- **ts_filter(tsvector, text[]):**
  - Fetches lexemes with specific labels.
  ```sql
  select ts_filter($$'20':2A 'anniversari':4C 'postgresql':1A,6A 'th':3$$::tsvector, '{C}');
  -- Results: 'anniversari':4C

  select ts_filter($$'20':2A 'anniversari':4C 'postgresql':1A,6A 'th':3$$::tsvector, '{C,A}');
  -- Results: '20':2A 'anniversari':4C 'postgresql':1A,6A
  ```

Thank you!