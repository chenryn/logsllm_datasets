title:Network monitoring using traffic dispersion graphs (tdgs)
author:Marios Iliofotou and
Prashanth Pappu and
Michalis Faloutsos and
Michael Mitzenmacher and
Sumeet Singh and
George Varghese
Network Monitoring using Trafﬁc Dispersion
Graphs (TDGs)
Marios Iliofotou
UC Riverside
PI:EMAIL
Prashanth Pappu
Rinera Networks
PI:EMAIL
Michalis Faloutsos
PI:EMAIL
UC Riverside
Michael Mitzenmacher
PI:EMAIL
Harvard University
Sumeet Singh
Cisco Systems, Inc.
PI:EMAIL
George Varghese
UC San Diego
PI:EMAIL
ABSTRACT
Monitoring network traﬃc and detecting unwanted applica-
tions has become a challenging problem, since many applica-
tions obfuscate their traﬃc using unregistered port numbers
or payload encryption. Apart from some notable exceptions,
most traﬃc monitoring tools use two types of approaches:
(a) keeping traﬃc statistics such as packet sizes and inter-
arrivals, ﬂow counts, byte volumes, etc., or (b) analyzing
packet content. In this paper, we propose the use of Traﬃc
Dispersion Graphs (TDGs) as a way to monitor, analyze,
and visualize network traﬃc. TDGs model the social behav-
ior of hosts (“who talks to whom”), where the edges can be
deﬁned to represent diﬀerent interactions (e.g. the exchange
of a certain number or type of packets). With the introduc-
tion of TDGs, we are able to harness a wealth of tools and
graph modeling techniques from a diverse set of disciplines.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network monitoring; C.2.5
[Local and Wide-Area Networks]: Internet
General Terms
Measurement, Experimentation, Security
Keywords
Behavioral Approach, Hosts’ Connection Graphs, Network
Monitoring, Network Traﬃc Visualization
1.
INTRODUCTION
The fundamental problem that motivates this paper is the
need for better methods and tools to monitor networks. The
network could be a large ISP such as Sprint, or an enterprise
network such as the Walmart network. In such environments
we want to be able to detect abnormal phenomena such as:
(a) new applications that “abuse” legacy ports, (b) malicious
activity such as worm spreads and port scanning. These
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’07, October 24-26, 2007, San Diego, California, USA.
Copyright 2007 ACM 978-1-59593-908-1/07/0010 ...$5.00.
forces suggest the need for a more fundamental behavioral
approach to characterize traﬃc in the face of obfuscation.
Current monitoring and application classiﬁcation methods
can be grouped by their level of observation: (a) packet
level, such as signature-based application detection [5] and
methods using the well known port numbers, (b) ﬂow level
statistical techniques [7], [9], [12], and (c) host level, such as
host-proﬁling approaches [6]. In both the case of malcode
and P2P, the standard approaches using content signatures
seem destined to fail in the face of encryption (e.g., for P2P
traﬃc) and polymorphism (e.g., for worms).
In this work, we propose a diﬀerent way of looking at
network traﬃc that focuses on network-wide interactions of
hosts (as seen at a router). We use the term Traﬃc Dis-
persion Graph or TDG to refer to this graph, which intu-
itively shows which hosts interact. We argue that there is a
wealth of information embedded in a TDG. For example, a
popular website will have a large in-degree, while P2P hosts
will be tightly connected. Despite what may appear at ﬁrst,
the deﬁnition of TDGs is non-trivial, as it hinges on how we
deﬁne an edge. An edge can represent the exchange of at
least one packet, but it can also be the exchange of one or
more TCP SYN packet, or more than, say, ﬁve packets of
any type. In other words, a TDG can represent a particular
type of interaction, which gives them signiﬁcant descriptive
power, as we discuss later in detail.
We note here that TDGs can be seen as the natural next
step in the progression of packet, ﬂow, and host level aggre-
gation. This is because a ﬂow aggregates a set of packets, a
host aggregates a set of ﬂows originating and terminating at
the host (e.g., BLINC operates at this level [6]), and a graph
aggregates a group of hosts. In other words, we can analyze
the “social interaction” of network hosts as a whole, which
leads to a graph where each node is an IP address, and each
directed edge represents an interaction between two nodes.
Studying the aggregation properties of TDGs and how they
can help in providing compact traﬃc representation is in-
cluded in our future directions.
Our main goal is to propose TDGs as a diﬀerent way of
modeling traﬃc behavior, and show that they: (a) have char-
acteristic structure and provide visualizations that can dis-
tinguish the nature of some applications, (b) describe traﬃc
along a new “dimension”, the network-wide social behavior,
which complements traﬃc characterization at the packet,
ﬂow and host levels, and (c) represent a new “type”of graphs,
by showing that even though they have similar characteris-
tics they are not yet another power-law graph.
2. RELATED WORK
The proﬁling of “social” behavior of hosts was studied in
BLINC [6] for the purpose of traﬃc classiﬁcation. BLINC,
however, focuses only at the host level. In BLINC, the no-
tion of a “graphlet” models a single host’s ﬂow patterns. By
contrast, our work on TDGs uses network-wide graphs. In
some sense, a TDG is an aggregation of the graphlets of
all hosts in a network for a particular key. To simplify the
aggregation, TDGs use edges only between source and des-
tination IP addresses unlike “graphlets” [6] which also have
edges to nodes that represent port numbers.
Apart from some notable exceptions, TDGs have not been
used for network analysis and monitoring. The ﬁrst work
using TDG-like graphs for intrusion detection appeared in
1999 [2], but there has not been recent follow up. Re-
cently, work by Ellis uses graph-based techniques to detect
worm outbreaks within enterprise network environments [4].
These eﬀorts only focus on worm detection, by trying to cap-
ture the tree-like structure of self-propagating code.
In addition, companies like Mazu and Arbor Networks
utilize graph-based techniques. Tan et al.
[11] in collabo-
ration with Mazu show how similarity between hosts, based
on their connection patterns, can be used to group network
users into related roles. In contrast to grouping hosts and
calculating user similarity, the present work mainly focuses
on characterizing the structure found in connection graphs
of hosts based on a key (e.g., a common TCP or UDP port
number).
Graph based techniques are also used by Aiello et al. [1] in
the ﬁeld of Communities of Interest (CoI). Similar to [11],
CoI research focuses on extracting communities and mod-
eling “normal behavior” of hosts. Deviation from normal
behavior can then be used to trigger an alarm. Moreover,
the authors in [1] and [11] do not use the graph metrics we
employ in this work and mainly focus on enterprise network
environments.
Finally, TDGs as deﬁned here are signiﬁcantly diﬀerent
than trust propagation networks [13]. The problem there is
to identify intruders in social networks, which represent trust
relationships (and not an exchange of packets), as discussed
in SybilGuard [13].
3. TRAFFIC DISPERSION GRAPHS
Deﬁnition: A traﬃc dispersion graph is a graphical repre-
sentation of the various interactions (“who talks to whom”)
of a group of nodes.
In IP networks, a node of the TDG
corresponds to an entity with a distinct IP address and
the graph captures the exchange of packets between vari-
ous sender and destination nodes. Moreover, a TDG, by
deﬁnition, is a graph that evolves both in time and space as
various nodes interact with each other. Hence, the edges in
a TDG have an implicit temporal relation showing the order
in which the corresponding node-interactions were observed
in the network. This also means that a given static TDG
has an associated time interval over which it evolved.
Edge Filtering: One of the fundamental questions in us-
ing TDGs is the deﬁnition of an edge. This basic question
can be answered in many diﬀerent ways depending on the
goal of the study. We start with the observation that the
edges in a TDG are directed because there is a clear deﬁni-
tion of sender and receiver in every data packet. In general,
the directed edges in a TDG can be used to identify the
initiator of the interaction between a pair of nodes. As we
will later see, directed edges in a TDG are very useful in
identifying various node behaviors and also in establishing
their causal relationship. However, we could choose to con-
sider undirected edges, which will enable us to use the more
extensively studied graph metrics for undirected graphs, as
discussed in later sections.
Besides direction, it is important to deﬁne what kind or
level of interaction between a pair of nodes should be trans-
lated into an edge in the TDG. We call this process Edge
Filtering. One simple edge ﬁlter is to add an edge (u, v) be-
tween nodes u and v when the ﬁrst packet is sent from u to
v in the interval of observation. Once an edge is added, the
ﬁlter ignores any further packets sent from u to v. We call
this edge ﬁlter as the Edge on First Packet (EFP), and is
mainly used for translating UDP ﬂows between nodes into
TDG edges.
Unlike UDP ﬂows, TCP ﬂows have an explicit deﬁnition
of initiation of interaction between two nodes. For TCP
ﬂows, we can choose to add a directed edge (u, v) between
two nodes u and v when the ﬁrst SYN packet is sent from
u to v. We call this ﬁlter as the Edge on First SYN Packet
(EFSP) ﬁlter. While the EFSP ﬁlter is applicable only to
TCP ﬂows, it can accurately determine the initiator of the
interactions between a pair of nodes.
In addition to this basic edge ﬁltering, we can enrich the
deﬁnition of what constitutes an edge by imposing “stricter”
rules that capture diﬀerent aspects of the interaction. For
example, we can have ﬁlters for “allowing” an edge between
a pair of nodes based on: (a) the number of packets/bytes
exchanged, (b) the type and sequence of packets (e.g., TCP
three-way handshake), (c) the transport protocol used (TCP,
UDP, ICMP etc.), (d) the application based on port number
or port number range (e.g., Port Number 80, or Port Range
6881-6889), and ﬁnally (e) looking at properties of the con-
tent, such as payload size or by using deep packet inspection.
TDG Formation: In this paper we focus on port-based
TDGs using the (d) ﬁlter type (as deﬁned above). Through-
out the paper and unless stated otherwise, when the legacy
application for a port uses TCP, we use the EFSP edge ﬁl-
ter on the corresponding destination port (e.g., TCP Port
25 for SMTP). When we examine UDP interactions, we use
the EFP edge ﬁlter on the destination port of interest (e.g.,
UDP Port 53 for DNS). For ease of presentation, we will re-
fer to each port-based TDG using the name of the dominant
or well-known application under that port. For example, the
HTTP TDGs is formed by using as edges all the TCP SYN
packets that have as destination port the number 80.
Since we use edge ﬁltering by port number, the TDGs
capture aspects of any application that uses these ports. We
are fully aware that many non-standard applications, such
as P2P traﬃc, use standard ports such as Port 80 [6]. How-
ever, port-based ﬁltering is consistent with our use of TDGs
as a monitoring tool. For example, if at some point traﬃc
at TCP Port 80 appears signiﬁcantly diﬀerent, it could be:
(a) a new benign or malicious application tunneling its traf-
ﬁc under that port, or (b) a change in the behavior of the
traditional application.
Network Traﬃc Traces: To study and analyze TDGs, we
use a variety of publicly available, real-traﬃc traces listed in
Table 1. These traces are non-sampled, IP anoymized, and
include up to layer-4 headers with no payload. We veriﬁed
our ﬁndings with many other traces provided by the same
online sources (see Online Sources in Table 1), but the re-
sults are not shown here due to space limitations. All traces
(a) HTTP (30 sec)
(b) DNS (5 sec)
(c) WinMX P2P (15 sec)
Figure 1: TDG visualizations, using the GraphViz tool, for various communities of hosts from backbone packet traces.
Name
WIDE
ABIL
OC48
Date/Time
Online Source