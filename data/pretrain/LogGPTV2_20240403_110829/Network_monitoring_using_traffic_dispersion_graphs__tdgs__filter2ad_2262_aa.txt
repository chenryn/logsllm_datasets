# Network Monitoring using Traffic Dispersion Graphs (TDGs)

**Authors:**
- Marios Iliofotou, UC Riverside
- Prashanth Pappu, Rinera Networks
- Michalis Faloutsos, UC Riverside
- Michael Mitzenmacher, Harvard University
- Sumeet Singh, Cisco Systems, Inc.
- George Varghese, UC San Diego

**Abstract:**
Monitoring network traffic and detecting unwanted applications have become increasingly challenging due to the use of unregistered port numbers and payload encryption. Most traffic monitoring tools rely on either statistical analysis of traffic or packet content inspection. In this paper, we introduce Traffic Dispersion Graphs (TDGs) as a new method for monitoring, analyzing, and visualizing network traffic. TDGs model the social behavior of hosts, with edges representing different types of interactions (e.g., exchange of specific packets). By leveraging graph modeling techniques from various disciplines, TDGs offer a powerful tool for understanding network-wide host interactions.

**Categories and Subject Descriptors:**
- C.2.3 [Network Operations]: Network monitoring
- C.2.5 [Local and Wide-Area Networks]: Internet

**General Terms:**
- Measurement, Experimentation, Security

**Keywords:**
- Behavioral Approach, Hosts' Connection Graphs, Network Monitoring, Network Traffic Visualization

## 1. Introduction
The need for better methods and tools to monitor networks, whether in large ISPs like Sprint or enterprise networks like Walmart, is a fundamental problem. We aim to detect abnormal phenomena such as:
- New applications that "abuse" legacy ports
- Malicious activities like worm spreads and port scanning

Current monitoring and application classification methods can be categorized by their level of observation:
- **Packet Level:** Signature-based detection and well-known port numbers
- **Flow Level:** Statistical techniques
- **Host Level:** Host-profiling approaches

These methods often fail in the face of encryption and polymorphism. We propose a behavioral approach using Traffic Dispersion Graphs (TDGs) to characterize traffic. TDGs focus on network-wide interactions of hosts, providing a wealth of information embedded in the graph structure. For example, a popular website will have a high in-degree, while P2P hosts will be tightly connected.

TDGs can be seen as the next step in the progression of packet, flow, and host-level aggregation. They aggregate a group of hosts, allowing us to analyze the "social interaction" of network hosts as a whole. Each node in a TDG represents an IP address, and each directed edge represents an interaction between two nodes.

Our main goals are to:
- Propose TDGs as a new way to model traffic behavior
- Show that TDGs have characteristic structures and provide visualizations that distinguish the nature of some applications
- Complement existing traffic characterization methods by adding a new dimension: network-wide social behavior
- Demonstrate that TDGs represent a new type of graph, distinct from power-law graphs

## 2. Related Work
The profiling of "social" behavior of hosts has been studied in BLINC [6] for traffic classification. However, BLINC focuses only at the host level, using the notion of a "graphlet" to model a single host's flow patterns. Our work on TDGs uses network-wide graphs, aggregating the graphlets of all hosts in a network for a particular key.

TDGs have not been widely used for network analysis and monitoring. The first work using TDG-like graphs for intrusion detection appeared in 1999 [2], but there has been little follow-up. Recent work by Ellis [4] uses graph-based techniques to detect worm outbreaks, focusing on capturing the tree-like structure of self-propagating code.

Companies like Mazu and Arbor Networks also utilize graph-based techniques. Tan et al. [11] show how similarity between hosts based on connection patterns can be used to group network users into related roles. In contrast, our work focuses on characterizing the structure found in connection graphs of hosts based on a key, such as a common TCP or UDP port number.

Graph-based techniques are also used in Communities of Interest (CoI) research [1], which focuses on extracting communities and modeling "normal behavior" of hosts. Deviation from normal behavior can trigger alarms. However, these studies do not use the graph metrics employed in our work and primarily focus on enterprise network environments.

Finally, TDGs as defined here are significantly different from trust propagation networks [13], which identify intruders in social networks representing trust relationships rather than packet exchanges.

## 3. Traffic Dispersion Graphs
### Definition
A Traffic Dispersion Graph (TDG) is a graphical representation of the interactions ("who talks to whom") of a group of nodes. In IP networks, each node corresponds to an entity with a distinct IP address, and the graph captures the exchange of packets between sender and destination nodes. A TDG evolves over time and space as nodes interact, with edges having an implicit temporal relation showing the order of observed interactions.

### Edge Filtering
A fundamental question in using TDGs is the definition of an edge. This can vary depending on the study's goal. Edges in a TDG are typically directed, identifying the initiator of the interaction. However, undirected edges can be used to leverage more extensively studied graph metrics.

Edge filtering defines what kind or level of interaction should be translated into an edge. Simple filters include:
- **Edge on First Packet (EFP):** Add an edge (u, v) when the first packet is sent from u to v.
- **Edge on First SYN Packet (EFSP):** Add a directed edge (u, v) when the first SYN packet is sent from u to v for TCP flows.

More complex filters can be based on:
- Number of packets/bytes exchanged
- Type and sequence of packets (e.g., TCP three-way handshake)
- Transport protocol used (TCP, UDP, ICMP, etc.)
- Application based on port number or range
- Properties of the content, such as payload size or deep packet inspection

### TDG Formation
In this paper, we focus on port-based TDGs. For TCP, we use the EFSP filter on the corresponding destination port (e.g., TCP Port 25 for SMTP). For UDP, we use the EFP filter on the destination port of interest (e.g., UDP Port 53 for DNS). We refer to each port-based TDG using the name of the dominant application under that port (e.g., HTTP TDGs for TCP Port 80).

Port-based filtering allows TDGs to capture aspects of any application using these ports. While non-standard applications may use standard ports, this approach is consistent with using TDGs as a monitoring tool. If traffic at a port appears significantly different, it could indicate a new benign or malicious application or a change in the traditional application's behavior.

### Network Traffic Traces
To study and analyze TDGs, we use a variety of publicly available, real-traffic traces listed in Table 1. These traces are non-sampled, IP anonymized, and include up to layer-4 headers with no payload. We verified our findings with additional traces from the same online sources, though results are not shown due to space limitations.

**Figure 1: TDG Visualizations**
- (a) HTTP (30 sec)
- (b) DNS (5 sec)
- (c) WinMX P2P (15 sec)

**Table 1: Network Traffic Traces**
- **Name:** WIDE, ABIL, OC48
- **Date/Time:** [Insert Date/Time]
- **Online Source:** [Insert Online Source]

This paper introduces TDGs as a powerful tool for network monitoring, offering a new dimension for understanding and visualizing network traffic.