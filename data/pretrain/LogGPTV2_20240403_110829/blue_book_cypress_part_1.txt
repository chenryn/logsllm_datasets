---
title: Cypress
date: 20220418
author: Lyz
---
[Cypress](https://www.cypress.io/) is a next generation front end testing tool
built for the modern web.
Cypress enables you to write all types of tests:
* End-to-end tests
* Integration tests
* Unit tests
Cypress can test anything that runs in a browser.
# Features
* *Time Travel*: Cypress takes snapshots as your tests run. Hover over commands
    in the Command Log to see exactly what happened at each step.
* *Debuggability*: Stop guessing why your tests are failing. Debug directly from
    familiar tools like Developer Tools. Our readable errors and stack traces
    make debugging lightning fast.
* *Automatic Waiting*: Never add waits or sleeps to your tests. Cypress
    automatically waits for commands and assertions before moving on. No more
    async hell.
* *Spies, Stubs, and Clocks*: Verify and control the behavior of functions,
    server responses, or timers. The same functionality you love from unit
    testing is right at your fingertips.
* *Network Traffic Control*: Easily control, stub, and test edge cases without
    involving your server. You can stub network traffic however you like.
* *Consistent Results*: Our architecture doesnâ€™t use Selenium or WebDriver. Say
    hello to fast, consistent and reliable tests that are flake-free.
* *Screenshots and Videos*: View screenshots taken automatically on failure, or
    videos of your entire test suite when run from the CLI.
* *Cross browser Testing*: Run tests within Firefox and Chrome-family browsers
    (including Edge and Electron) locally and optimally in a Continuous
    Integration pipeline.
Check the [key
differences](https://docs.cypress.io/guides/overview/key-differences#Flake-resistant)
page to see more benefits of using the tool.
# [Installation](https://docs.cypress.io/guides/getting-started/installing-cypress)
```bash
npm install cypress --save-dev
```
# [Usage](https://docs.cypress.io/guides/getting-started/writing-your-first-test#What-you-ll-learn)
You first need to open cypress with `npx cypress open`.
To get an overview of cypress' workflow follow the [Writing your first test
tutorial](https://docs.cypress.io/guides/getting-started/writing-your-first-test#Write-your-first-test)
Tests live in the `cypress` directory, if you create a new file in the
`cypress/integration` directory it will automatically show up in the UI. Cypress
monitors your spec files for any changes and automatically displays any
changes.
Writing tests is meant to be simple, for example:
```javascript
describe('My First Test', () => {
  it('Does not do much!', () => {
    expect(true).to.equal(true)
  })
})
```
## [Test structure](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Writing-tests)
The test interface, borrowed from
[Mocha](https://docs.cypress.io/guides/references/bundled-tools#Mocha), provides
`describe()`, `context()`, `it()` and `specify()`. `context()` is identical to `describe()` and `specify()` is identical to `it()`.
```javascript
describe('Unit test our math functions', () => {
  context('math', () => {
    it('can add numbers', () => {
      expect(add(1, 2)).to.eq(3)
    })
    it('can subtract numbers', () => {
      expect(subtract(5, 12)).to.eq(-7)
    })
    specify('can divide numbers', () => {
      expect(divide(27, 9)).to.eq(3)
    })
    specify('can multiply numbers', () => {
      expect(multiply(5, 4)).to.eq(20)
    })
  })
})
```
### Hooks
Hooks are helpful to set conditions that you want to run before a set of tests
or before each test. They're also helpful to clean up conditions after a set of
tests or after each test.
```javascript
before(() => {
  // root-level hook
  // runs once before all tests
})
beforeEach(() => {
  // root-level hook
  // runs before every test block
})
afterEach(() => {
  // runs after each test block
})
after(() => {
  // runs once all tests are done
})
describe('Hooks', () => {
  before(() => {
    // runs once before all tests in the block
  })
  beforeEach(() => {
    // runs before each test in the block
  })
  afterEach(() => {
    // runs after each test in the block
  })
  after(() => {
    // runs once after all tests in the block
  })
})
```
!!! warning "Before writing `after()` or `afterEach()` hooks, read [the
anti-pattern of cleaning up state with `after()` or `afterEach()`](https://docs.cypress.io/guides/references/best-practices#Using-after-or-afterEach-hooks)"
### Skipping tests
You can skip tests in the next ways:
```javascript
describe('TodoMVC', () => {
  it('is not written yet')
  it.skip('adds 2 todos', function () {
    cy.visit('/')
    cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}')
    cy.get('.todo-list li').should('have.length', 100)
  })
  xit('another test', () => {
    expect(false).to.true
  })
})
```
## [Querying elements](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Querying-Elements)
Cypress automatically retries the query until either the element is found or
a set timeout is reached. This makes Cypress robust and immune to dozens of
common problems that occur in other testing tools.
### Query by HTML properties
You need to find the elements to act upon, usually you do it with the `cy.get()`
function. For example:
```javascript
cy.get('.my-selector')
```
Cypress leverages jQuery's powerful selector engine and exposes many of its DOM
traversal methods to you so you can work with complex HTML structures. For
example:
```javascript
cy.get('#main-content').find('.article').children('img[src^="/static"]').first()
```
If you follow the [Write testable code
guide](frontend_development.md#write-testable-code), you'll select elements by
the `data-cy` element.
```javascript
cy.get('[data-cy=submit]')
```
You'll probably write that a lot, that's why it's useful to define the next
commands in `/cypress/support/commands.ts`.
```javascript
Cypress.Commands.add('getById', (selector, ...args) => {
  return cy.get(`[data-cy=${selector}]`, ...args)
})
Cypress.Commands.add('getByIdLike', (selector, ...args) => {
  return cy.get(`[data-cy*=${selector}]`, ...args)
})
Cypress.Commands.add('findById', {prevSubject: true}, (subject, selector, ...args) => {
  return subject.find(`[data-cy=${selector}]`, ...args)
})
```
So you can now do
```javascript
cy.getById('submit')
```
### Query by content
Another way to locate things -- a more human way -- is to look them up by their
content, by what the user would see on the page. For this, there's the handy
`cy.contains()` command, for example:
```javascript
// Find an element in the document containing the text 'New Post'
cy.contains('New Post')
// Find an element within '.main' containing the text 'New Post'
cy.get('.main').contains('New Post')
```
This is helpful when writing tests from the perspective of a user interacting
with your app. They only know that they want to click the button labeled
"Submit". They have no idea that it has a type attribute of submit, or a CSS
class of `my-submit-button`.
### Changing the timeout
The querying methods accept the `timeout` argument to change the default
timeout.
```javascript
// Give this element 10 seconds to appear
cy.get('.my-slow-selector', { timeout: 10000 })
```
### Select by position in list
Inside our list, we can select elements based on their position in the list,
using `.first()`, `.last()` or `.eq()` selector.
```javascript
cy
  .get('li')
  .first(); // select "red"
cy
  .get('li')
  .last(); // select "violet"
cy
  .get('li')
  .eq(2); // select "yellow"
```
You can also use `.next()` and `.prev()` to navigate through the elements.
### Select elements by filtering
Once you select multiple elements, you can filter within these based on another selector.
```javascript
cy
  .get('li')
  .filter('.primary') // select all elements with the class .primary
```
To do the exact opposite, you can use `.not()` command.
cy
  .get('li')
  .not('.primary') // select all elements without the class .primary
### Finding elements
You can specify your selector by first selecting an element you want to search
within, and then look down the DOM structure to find a specific element you are
looking for.
```javascript
cy
  .get('.list')
  .find('.violet') // finds an element with class .violet inside .list element
```
Instead of looking down the DOM structure and finding an element within another
element, we can look up. In this example, we first select our list item, and
then try to find an element with a `.list` class.
```javascript
cy
  .get('.violet')
  .parent('.list') // finds an element with class .list that is above our .violet element
```
## Interacting with elements
Cypress allows you to click on and type into elements on the page by using
`.click()` and `.type()` commands with a `cy.get()` or `cy.contains()` command. This is a great example of chaining in action.
```javascript
cy.get('textarea.post-body').type('This is an excellent post.')
```
We're chaining the `.type()` onto the `cy.get()`, telling it to type into the
subject yielded from the `cy.get()` command, which will be a DOM element.
Here are even more action commands Cypress provides to interact with your app:
* `.blur()`: Make a focused DOM element blur.
* `.focus()`: Focus on a DOM element.
* `.clear()`: Clear the value of an input or `textarea`.
* `.check()`: Check checkbox(es) or radio(s).
* `.uncheck()`: Uncheck checkbox(es).
* `.select()`: Select an `` within a ``.
* `.dblclick()`: Double-click a DOM element.
* `.rightclick()`: Right-click a DOM element.
These commands ensure some guarantees about what the state of the elements
should be prior to performing their actions.
For example, when writing a `.click()` command, Cypress ensures that the element
is able to be interacted with (like a real user would). It will automatically
wait until the element reaches an "actionable" state by:
* Not being hidden
* Not being covered
* Not being disabled
* Not animating
This also helps prevent flake when interacting with your application in tests.
If you want to jump into the command flow and use a custom function use
`.then()`. When the previous command resolves, it will call your callback
function with the yielded subject as the first argument.
If you wish to continue chaining commands after your `.then()`, you'll need to
specify the subject you want to yield to those commands, which you can achieve
with a return value other than `null` or `undefined`. Cypress will yield that to the
next command for you.
```javascript
cy
  // Find the el with id 'some-link'
  .get('#some-link')
  .then(($myElement) => {
    // ...massage the subject with some arbitrary code
    // grab its href property
    const href = $myElement.prop('href')
    // strip out the 'hash' character and everything after it
    return href.replace(/(#.*)/, '')
  })
  .then((href) => {
    // href is now the new subject
    // which we can work with now
  })
```
### [Setting aliases](https://docs.cypress.io/guides/core-concepts/variables-and-aliases#Aliases)
Cypress has some added functionality for quickly referring back to past subjects
called Aliases.
It looks something like this:
```javascript
cy.get('.my-selector')
  .as('myElement') // sets the alias
  .click()
/* many more actions */
cy.get('@myElement') // re-queries the DOM as before (only if necessary)
  .click()
```
This lets us reuse our DOM queries for faster tests when the element is still in
the DOM, and it automatically handles re-querying the DOM for us when it is not
immediately found in the DOM. This is particularly helpful when dealing with
front end frameworks that do a lot of re-rendering.
It can be used to share context between tests, for example with fixtures:
```javascript
beforeEach(() => {
  // alias the users fixtures
  cy.fixture('users.json').as('users')
})
it('utilize users in some way', function () {
  // access the users property
  const user = this.users[0]
  // make sure the header contains the first
  // user's name
  cy.get('header').should('contain', user.name)
})
```
## [Asserting about elements](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions)
Assertions let you do things like ensuring an element is visible or has
a particular attribute, CSS class, or state. Assertions are commands that enable
you to describe the desired state of your application. Cypress will
automatically wait until your elements reach this state, or fail the test if the