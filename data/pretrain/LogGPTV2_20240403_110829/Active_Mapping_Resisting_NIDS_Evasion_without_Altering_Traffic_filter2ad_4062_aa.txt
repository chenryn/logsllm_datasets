title:Active Mapping: Resisting NIDS Evasion without Altering Traffic
author:Umesh Shankar and
Vern Paxson
Active Mapping: Resisting NIDS Evasion Without Altering Trafﬁc
Umesh Shankar
PI:EMAIL
University of California at Berkeley
Vern Paxson
PI:EMAIL,ee.lbl.gov
ICSI Center for Internet Research and Lawrence Berkeley National Laboratory
Abstract
A critical problem faced by a Network Intrusion De-
tection System (NIDS) is that of ambiguity. The NIDS
cannot always determine what trafﬁc reaches a given
host nor how that host will interpret the trafﬁc, and at-
tackers may exploit this ambiguity to avoid detection or
cause misleading alarms. We present a lightweight so-
lution, Active Mapping, which eliminates TCP/IP-based
ambiguity in a NIDS’ analysis with minimal runtime
cost. Active Mapping efﬁciently builds proﬁles of the
network topology and the TCP/IP policies of hosts on
the network; a NIDS may then use the host proﬁles to
disambiguate the interpretation of the network trafﬁc on
a per-host basis. Active Mapping avoids the semantic
and performance problems of trafﬁc normalization, in
which trafﬁc streams are modiﬁed to remove ambigui-
ties. We have developed a prototype implementation of
Active Mapping and modiﬁed a NIDS to use the Active
Mapping-generated proﬁle database in our tests. We
found wide variation across operating systems’ TCP/IP
stack policies in real-world tests (about 6,700 hosts), un-
derscoring the need for this sort of disambiguation.
1 Introduction
A Network Intrusion Detection System (NIDS) pas-
sively monitors network trafﬁc on a link, looking for sus-
picious activity as deﬁned by its protocol analyzers (see
Figure 1).
In order to correctly analyze a stream of trafﬁc, the
NIDS must ﬁrst determine which packets reach the tar-
get host it is monitoring and then, for those that do, in-
Research supported in part by an NDSEG fellowship and an
equipment donation from Intel.
ISP1
Site
Firewall
:
:
:
:
ISP2
Alert
NIDS
Figure 1. A diagram of a typical site’s network
with a NIDS
terpret them exactly as the target host does. The problem
is therefore equivalent to NIDS being able to perform a
complete and precise simulation of the network and the
host machines; in this paper we restrict our discussion to
the NIDS’ ability to simulate the network and transport
layers. The dominant obstacle to achieving this goal is
ambiguity: the wide variety of network topologies and
TCP/IP-stack policies makes it impossible for the NIDS
to know the correct interpretation of trafﬁc without ad-
ditional context.
The result is a divergence between how a host inter-
prets a sequence of packets and how the NIDS believes
the sequence has been interpreted. The NIDS can be
tricked by an attacker into believing that no attack oc-
curred or may be confused by a multitude of possible
interpretations, some of which are attacks and some of
which are not. The evasions are not just theoretically
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
possible: Ptacek and Newsham [PN98] describe a num-
ber of speciﬁc methods for exploiting this sort of am-
biguity at the TCP/IP layer. Furthermore, toolkits have
been developed which automate their use [So02, Mc98].
Thus, it is of considerable practical concern that we ﬁnd
a way to resolve TCP/IP-based ambiguities.
In this paper we explore a novel approach to elimi-
nating TCP/IP ambiguity, called Active Mapping. The
key idea is to acquire sufﬁcient knowledge about the in-
tranet being monitored that, using it, the NIDS can tell
which of those packets will arrive at their purported re-
cipient, and, if so, how they will be interpreted. Active
Mapping does this by building up a proﬁle database of
the key properties of the hosts being monitored and the
topology that connects them. Proﬁles are constructed by
sending specially crafted packets to each host and inter-
preting the responses to determine path properties and
TCP/IP policies (see Section 3 and the Appendix for de-
tails).
of
Some measure
Using Active Mapping proﬁles makes a NIDS
context-sensitive.
context-
sensitivity—awareness of the hosts the monitor is
trying to protect—is necessary; writing more detailed
analyzers is of no use when we don’t know how to
disambiguate the trafﬁc we are analyzing. No amount of
careful coding in the NIDS can remove context-related
ambiguity.
Thus, something like our approach—
gathering host- and network-speciﬁc information and
using it in the NIDS—is inevitable if we are to make
inroads against the problem of ambiguity in a passive
monitor. The information-gathering may be done in
other ways, e.g., passively, but the principle remains the
same.
Previous work proposes to eliminate ambiguity in
NIDS analysis by using a trafﬁc normalizer [HKP01].
The normalizer, which sits in the forwarding path before
the NIDS, rewrites incoming trafﬁc into well-formed
streams that presumably admit only one interpretation
on all reasonable TCP/IP implementations. Thus the
NIDS, with a single policy set, can unambiguously ana-
lyze the trafﬁc for intrusion attempts on any of the hosts
of the protected network.
Though it succeeds in reducing ambiguity, a normal-
izer, like any active (trafﬁc-altering) element, has a num-
ber of drawbacks. One is performance: the normalizer
must be able to reconstruct every TCP stream in real-
time. Another is robustness: since the normalizer is
in the forwarding path of every packet, it must be ex-
tremely reliable even in the face of resource exhaustion;
it also must be resistant to stateholding and CPU attacks
on itself. Normalization also potentially changes the
semantics of a stream. As detailed in [HKP01], these
changes can break some mechanisms, like traceroute
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
2
and Path MTU discovery.
By contrast, a NIDS armed with a proﬁle database
can resolve ambiguities in a trafﬁc stream it observes
without having to intercept or modify the stream, which
has major operational and semantic advantages. We
stress that making contextual information available to
the NIDS is the only way to do correct disambiguation
of a stream without modifying it, so employing some-
thing like Active Mapping is essential.
Next, let us consider an example evasion. Figure 2
details an evasion based on uncertainty about the num-
ber of hops between the NIDS and a target host. If an
attacker manipulates the TTL ﬁeld of packets to con-
fuse the NIDS, it can not know which of many possible
packet sequences was actually received and accepted by
the host. On the other hand, if the NIDS has information
about the network path to the host, then it can elimi-
nate the ambiguity. It is just this information that Active
Mapping gathers and supplies to the NIDS. With it, the
NIDS can ignore packets that will not reach the host, en-
abling correct analysis. It may be tempting to try to si-
multaneously analyze all possible interpretations of the
packet stream; however, the space of possible network
topologies and TCP/IP policies is so large as to make
the problem intractable (see Figure 2 and the Appendix
for examples).
We have implemented a prototype of Active Mapping
and run it on a network of about 6,700 hosts. Our tests
showed that the increased precision in analysis does not
come with any signiﬁcant performance cost at runtime
for the NIDS. The increased memory cost was minimal
as well. We present results to this effect in Section 5.
The organization of this paper is as follows. In Sec-
tion 2, we discuss a model of operation of the map-
per.
In Section 3, we discuss the abilities and limita-
tions of Active Mapping, examining selected tests in de-
tail. The mapper’s implementation is described in Sec-
tion 4; the results of mapping real-world networks and
NIDS integration tests are presented in Section 5 along
with a discussion of performance and ﬁndings. We give
an overview of related work in Section 6, including the
potentially symbiotic relationship between Active Map-
ping and normalization, and conclude with a summary
of our ﬁndings in Section 7. In the Appendix, we make
an effort to cover the complete spectrum of TCP/IP map-
pings.
2 Design
2.1 Assumptions
In order to perform mapping efﬁciently, we make cer-
tain assumptions about the nature of the network being
Figure 2. Evading a NIDS by manipulating the TTL ﬁeld [HKP01]. The NIDS is 15 hops from the
sender, but the receiver is 20 hops from the sender. Packets with an initial TTL greater than 15
but less than 20 will be seen by the NIDS but will be dropped before reaching the receiver. Since
the retransmitted segments are inconsistent, the NIDS does not know the correct interpretation.
monitored:
2.2 Design Goals
(cid:15) Network topology is relatively stable. We discuss
how often mapping may be performed (based on
the prototype mapper’s performance) in Sections
5.3 and 5.6.
(cid:15) The attacker is outside the network; if there is col-
lusion with a user on the inside, there is little any
system can do. Malicious insiders working alone
are assumed to be unable to change or drop partic-
ular packets. This latter assumption is more likely
to be true for switched networks.
(cid:15) There is a ﬁrewall
that can be used for sim-
ple packet-level ﬁltering, especially address-based
ingress and egress ﬁltering to prevent spooﬁng.
Also, we assume the NIDS’ tap is inside the ﬁre-
wall.
(cid:15) Hosts’ TCP/IP stacks behave consistently within
ordinary parameters: that is, if they exhibit unusual
behavior, it will be at boundary cases. We do not,
for example, run every TCP mapping test at every
possible sequence number.
We have been guided by a number of design princi-
ples in constructing our system:
(cid:15) Comparable runtime performance. The use of
Active Mapping proﬁles should not appreciably
slow down the NIDS nor signiﬁcantly increase its
memory requirements.
(cid:15) Mapping should be lightweight. The bandwidth
consumed by mapping packets should be small
enough not to disrupt ordinary trafﬁc on the net-
work nor disrupt the operation of the host being
mapped. The process of mapping should also be
completed in a modest amount of wall-clock time.
(cid:15) Avoid harming the hosts. While no intention-
ally malicious packets are sent, bugs in a host’s
TCP/IP implementation might be triggered by the
(unusual) mapping packets. Each test should be
checked against known vulnerabilities before being
deployed.
2.3 Architecture
Our overall strategy is as follows: independent of the
NIDS, an Active Mapping machine scans each host on
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
3
Firewall
Mapper
probe
packets
Internet
Traffic
...
Host
...
Host Profile
Table
NIDS
Dotted lines indicate 
offline activity
Figure 3. Interaction between the NIDS and the Mapper. The Active Mapping system sends spe-
cially crafted packets to each host to determine the hop count, Path MTU, and TCP/IP stack
policies. The results are combined into a proﬁle. The NIDS uses the proﬁles to correctly
interpret each packet going to one of the hosts.
the internal network, building for each host a proﬁle of
the network path and TCP/IP stack properties. These
proﬁles are stored in a database. At runtime, a NIDS
can use the database to resolve potential ambiguities (see
Figure 3). For example, the NIDS can use the host pro-
ﬁles to decide whether to accept or discard SYN data
in TCP packets, depending on the policy of the host for
which the packet is destined. We note that although our
method allows many ambiguities to be resolved, some-
times the very presence of ambiguity may be indicative
of noteworthy behavior (an attack attempt, for example).
Thus a NIDS may want to retain the ability to notify the
administrator of suspicious behavior, even when the in-
terpretation of that behavior is clear.
Our mapping tool is intended to be run on a machine
whose network point is topologically equivalent to the
link the NIDS is watching (see Figure 3). Typically this
is between the ﬁrewall and any internal routers. It is im-
portant that the mapper be able to send packets on this
link, since the mapping results should reﬂect the path of
actual packets from the point of view of the NIDS. In or-
der to keep the NIDS from interpreting mapping trafﬁc
as attacks on internal hosts, the NIDS should be conﬁg-
ured to ignore trafﬁc to and from the mapping machine.
The mapper begins mapping a host by performing
service discovery and hop count and Path MTU (PMTU)
determination. It initiates TCP connections to a set of
TCP services and sends ICMP echo packets to deter-
mine which services are available. Subsequent testing is
abstracted within the mapper to use those services. For
example, some tests require determining whether some
particular TCP data is accepted by the receiver. To do
so, we can use any service for which we can tell by
its response whether it received the speciﬁc data. To
date, we have developed concrete implementations of
SSH and HTTP beneath this abstraction. Other tests re-
quire simpler abstract interfaces. PMTU determination,
for example, is done with ICMP echo if available, or any
TCP service failing that. The hop count and PMTU of
the path to each host are determined next (Section 3.2).
Once these basic properties have been established, we
conduct a variety of IP and TCP tests (Section 3.2), gen-
erating the host proﬁles. Each test is repeated multiple
times to conﬁrm the result and account for timeouts and
late or duplicated packets. To reduce correlated failures,
we never run more than one instance of a (host, test) pair
at the same time.
3 Active Mapping: Details and Limita-
tions
To thoroughly analyze the applicability of Active
Mapping to resolving possible ambiguities, we follow
the “header-walking” technique used in [HKP01]. We
feel this is a good place to start, since the authors of that
paper used a systematic approach to enumerate possible
ambiguities in TCP/IP streams. We examine each ambi-
guity to see if it can be resolved via Active Mapping, or,
if it is very simple, if it can be handled by stateless ﬁre-
wall rules (see Section 3.1). Thus, we provide a reason-
ably complete picture of the ability of Active Mapping
to eliminate TCP/IP ambiguity.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
4
A summary of the Active Mapping approach to every
normalization in [HKP01] is in the Appendix. To date,
we have implemented a selected subset of these map-
pings, spanning a number of different types of ambigui-
ties. We discuss them in detail in Section 3.2. Many of
the mappings in the full list are straightforward additions
given the types we have already implemented.
Active Mapping has some additional concerns be-
yond those for normalization (mostly regarding timing,
since, e.g., normalized trafﬁc is generally not subject to
IP fragment timeouts). We discuss these and other cases
that are not easily tackled using our approach in Sec-
tion 3.3. A discussion of some practical concerns such
as NATs and DHCP follows in Section 3.5.
3.1 Firewall Filters
Certain simple cases should be handled by stateless
packet ﬁltering at the ﬁrewall:
(cid:15) Verifying IP header checksums
(cid:15) Ingress and egress ﬁltering, i.e., accepting external
and internal source addresses only on those respec-
tive interfaces
(cid:15) Blocking packets to broadcast addresses or to re-
served private address spaces
or the host happens to use a different initial value. Our
search strategy is therefore to test the range G   4 to
G, then if that fails to yield a result, perform a binary
search.
PMTU. Knowing the Path MTU—the Maximum
Transmission Unit over the path to the host—is impor-
tant because packets greater than this size with the DF
(Don’t Fragment) bit set are discarded. To determine it,
we send packets of various sizes to known services on
the hosts with the DF bit set and watch for responses.1
As with hop count determination, we optimize for the
common case. Since many internal networks run on Eth-
ernet, which has an MTU size of 1500 bytes, we test this
ﬁrst, then do a binary search on [0, 1500], since the map-
per’s MTU will generally be limited by its local Ethernet
interface to 1500.
TCP RST Acceptance. RFC 793 [Po81c] speciﬁes
that a TCP RST packet is to be accepted if and only
if it is within the receiver’s window. A non-compliant
TCP could create problems for a NIDS, which would
not know if the connection had been terminated or not.
The algorithm we use is as follows.
Repeat the following steps with the offset  set equal
to 0 (in sequence), 1 (in the window), and W +small con-
stant (outside the window):
(cid:15) Rejecting packets whose IP header length ﬁeld is
(cid:15) Send a TCP SYN packet at sequence number S.
too small or too large
In short, the ﬁrewall should reject packets that could