User: Please write a simple web crawler in Java language to crawl the title and links of a certain website.
Assistant: Since the way of crawling a website may be related to the structure and content of the website, a simple web crawler framework is provided below for reference or modification. ```java import java.io.IOException; import org.jsoup.Jsoup; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.select.Elements; public class WebCrawler { private final String baseUrl; // The base URL of the crawled website private final int depth; // The depth of crawling, that is, the most tracked link layers private final String keyword; // Keywords, used to filter irrelevant links private final int maxRecords; // maximum number of records crawled private int counter; // number of records already crawled public WebCrawler(String baseUrl, int depth, String keyword, int maxRecords) { this.baseUrl = baseUrl; this.depth = depth; this.keyword = keyword; this.maxRecords = maxRecords; this.counter = 0; } public void crawl() { crawlUrl(baseUrl, 0); } private void crawlUrl(String url, int currentDepth) { if (counter > = maxRecords) { return; } try { System.out.println("Crawling " + url); Document doc = Jsoup.connect(url).get(); // Get the HTML document of the current web page // Extract the current web page's Title and link, and print to console String title = doc.title(); System.out.println("Title: " + title); Elements links = doc.select("a[href]"); for (Element link : links) { String href = link.attr("href"); if (href.startsWith(baseUrl) && href.contains(keyword)) { String text = link.text(); System.out.println(" " + text + ": " + href); counter++; } } // If the crawling depth has not reached the maximum value, continue to follow the link if (currentDepth < depth) { Elements moreLinks = doc.select("a[href ^=" + baseUrl + "]"); for (Element link : moreLinks) { String href = link.attr("href"); crawlUrl(href, currentDepth + 1); } } } catch (IOException e) { System .err.println("Failed to crawl " + url); } } } ``` Usage: ```java WebCrawler crawler = new WebCrawler("https://www.example.com/", 2, "example ", 10); crawler.crawl(); ``` The above code will crawl links starting with `https://www.example.com/`, up to two layers of links, and only keep keywords containing` example`, and crawl up to 10 records, print the title of each record and link to the console. You can modify these parameters as needed. For more information about the Jsoup library, please refer to the official website (https://jsoup.org/).