its theoretical optimal memory consumption in real applications
where the size of keys is arbitrary, as many of the buckets might be
wasted. To solve this limitation, a variant of Cuckoo Filter, named
Vacuum Filter [36], is proposed. In Vacuum Filter, the alternate
bucket position hj(k) is calculated by:
hj (k) = hi (k) ⊕ (h (f p (k)) mod L) , {i, j} = {1, 2} ,
(5)
where L is the size of a mini-chunk (a group of consecutive buckets)
within the whole hashing table and L equals to a power of two. The
value L is selected from four optional values based on the last two
bits of f p (k), where each optional value represents the minimal
size of the mini-chunk that can successfully allocate 1/4, 1/2, 3/4
Figure 15: Cuckoo Filter
(cid:17)
j
b
j
(cid:16)
and 1 fraction of the whole inserted keys with the expected load
factor, e.g., 0.95. In this way, the alternate position searching can
be performed within the local mini-chunk of size L instead of the
entire table of size m. Hence, m can be any positive integer and the
Vacuum Filter can always achieve the optimal memory for any key
size given the expected false positive rate ε.
A.1.2 Othello. Othello [37] is an efficient zero-error data structure
to solve the Multiset Query Problem based on minimal perfect
hashing. Othello maintains two hashing tables, with each bucket
of the hashing tables containing L bits, where L =(cid:6)log2 n(cid:7) and n is
a ∈ Va (0 ≤ i < ma) and v
the number of distinct sets.
Suppose the lengths of the two hashing tables Ta and Tb are ma
and mb, and the corresponding uniform hash functions are ha (x)
and hb (x).
Othello is constructed by finding an acyclic undirected graph
G = (Va, Vb, E), where E is the edge set, Va, Vb are the vertex sets
b ∈ Vb (0 ≤ j < mb)
with each node vi
representing the ith and jth bucket of Ta and Tb.
Initially, E = ∅. For any key-value pair (k, v) with k ∈ U and
v ∈ {0, 1}, v can be stored in graph G by inserting a new edge
in E, where i = ha (k) and j = hb (k) (as shown by the red
vi
a, v
or the green edges in Fig 4). The query function f : U → V for the
key-value mapping is defined as: Query(k) = ta[i] ⊕ tb[j], where
ta[i] and tb[j] represent the entry in the ith and jth bucket of Ta
and Tb respectively.
If the graph G remains acyclic after inserting all keys in U , then
it can be proved that there exists a solution to fill the buckets in
Ta and Tb with either “1” or “0”, such that for any k ∈ U and its
corresponding value v ∈ {0, 1}, f (k) = v. However, when a circle
is found while building the graph G, the graph should be rebuilt by
using different hash functions ha (x) and hb (x). In practice, if the all
key-value pairs are known in advance, Othello finds the two valid
hash functions ha (x) and hb (x) that do not create any circle in the
graph first by random searching, and then uses depth-first-search
(DFS) order of the resulting acyclic to insert all keys.
Construct(P, N): Let P and N are the two sets used to construct
an Othello. Suppose list (e1, e2, ..., em) be the edge set E sorted in
its DFS order. Then for any edge e in the sorted list, we find the
corresponding key k which is represented by e, i.e., the indexes i, j
of the two vertices are ha (k) and hb (k) respectively. Let v be the
mapping value of k, namely, v = 1 if k ∈ P (as shown by the green
edge in Fig 4), and v = 0 if k ∈ N (as shown by the red edge in Fig
4). Then v can be inserted to the table by the following steps. If both
ta[i] and tb[j] are empty, we set ta[i] = 0 and tb[j] = v. Otherwise,
one bucket of ta[i] and tb[j] must be empty since G is acylic and e
is visited according to the DFS order of E. In this case, we set the
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1132empty bucket to be the “xor” result of the value in the other bucket
and v.
It can be proved that if ma ≥ 1.33n and mb ≥ n, where n is the
number of all keys, then memory is sufficient enough to find the
appropriate hash functions, which avoid cycles for the entire key
set, with a small researching probability in Othello’s construction
function Construct() [37]. In addition, with this memory settings,
Othello can also support value flipping (change the value of a key
k from “0” to “1” or from “1” to “0”) Flip(k), deletion Delete(k) and
insertion Insert(k, v) functions using O(1) time.
Although Othello is memory and query efficient to store arbi-
trary key-value mapping: it costs 2.33 bits per key for binary value
mapping and only two hashing operations for each query; it is
far more from being optimal to solve the CR verification problem,
where the sizes of the revoked certificate set and the unrevoked
certificate set are highly imbalanced. For example, in Table 1, we
show Othello requires moderately smaller memory than the naive
CRL approach when only 1% certificate are revoked. In the follow-
ing sections, we will show a more concise data structure for the
CR verification problem by optimizing Othello with a probabilistic
filter.
A.2 Updating Functions of Cuckoo Filter and
Othello
Every updating in tracker-plane DASS is a combination of updating
operations in its maintained Vacuum (Cuckoo) Filter and Othello
hashing table. We illustrate and discuss how Vacuum Filter and
Othello could be updated in this section.
A.2.1 Updating of vacuum (cuckoo) filter. Cuckoo Filters are known
to outperforms Bloom Filters mainly in that they can efficiently
support the deletion of keys from the filter. The updating functions
(Delete(k) and Insert(k)) of Cuckoo Filters are summarized in Sec-
tion A.1.1. Algorithm and implementation details can be found from
Fan, et al.’s [12] and Wang, et al.’s [36] work.
A.2.2 Updating of othello hash table. In this section, we present the
inserting, value flipping and deleting methods of othello hashing.
Insert(k, v): Let G = (Va, Vb, E) be the maintained graph in
Othello and ta, tb are the hash table arrays. Inserting a key-value
pair (k, v) into Othello is equivalent to adding an edge e in G, where
e = (Va(ha(k)), Vb(hb(k))), and ha and hb are the selected hash
functions that map the key k to the graph vertices. If the resulting
graph G = (Va, Vb, E + {e}) creates a cycle, showing the table is too
full to insert the key, then the Othello hash table should be rebuilt
by selecting a new pair of hash functions ha and hb. Otherwise, the
insertion is successful and we need to assign a color (as shown in
Fig. 4) for this edge. If the color flag (“0” or “1”) of edge e exactly
equals ta[ha(k)] ⊕ tb[hb(k)], then nothing needs to be changed.
Otherwise, we need the modify the color flag of edge e by tweaking
the values of vertices stored in ta and tb, namely conduct the value
flipping (flip the stored value of a key k) operation.
Flip(k): Let T be the tree that contains the edge e whose color
should be modified. Assume T is separated into two sub-trees T1
and T2 by e. One method to change the value flag of e is to flip all
values stored in the vertices of T1 or T2 (whichever is smaller). Yu,
et at.’s study [37] shows by setting the total size of Othello hash
Method Hash (P) Hash (N) LD (P) LD (N)
TinyCR
Othello
CRLite
2-4
2
≥ 1
4
2
≥ 2
4
2
≥ 2
2-4
2
≥ 1
Table 3: Number of hash or memory read operations for
querying the classifier.
table as 2.33m, where m is the number of keys, the value flipping
operation costs O(1) complexity, i.e., O(1) number of table entries
should be flipped for each insertion and value flipping operation.
Delete(k): Deletion of a stored key k from the othello table
can be accomplished by removing the corresponding edge e =
(Va(ha(k)), Vb(hb(k))) from G. After deletion, the actual hashing
tables Ta and Tb are not changed. Thus, the Delete(k) function is
only a logical deletion process: it will not change the inference
behavior of othello; it only remove redundant edges to provide
space for new keys in the future.
A.3 Query Performance of DASS
In this section, we analyze the query performance of DASS as a
conventional set query data structure. Table 3 shows the number of
hashes and memory lookup operations required by DASS, Othello
and CRLite for a query. In the table, we notice Othello always re-
quires only two hash and memory lookup operations. Thus, Othello
is most efficient for query at the cost of higher memory consump-
tion. Compared with Othello, DASS requires totally 3-4 times of
hash and memory lookup for querying a revoked certificate and
1-4 times of hash and memory lookup for querying an legitimate
certificate. However, for CRLite, the upper bounds of hash and
memory operations depends on the depth of the filter cascades.
In addition, we test the query throughput (measured by millions
of operations per second, MOPS) using the CenSys dataset on the
Raspberry Pi 3 testbed and present the result in Fig. 16. From Fig. 16,
the query throughput for TinyCR can be as high as a few millions
per second for both revoked and legitimate certificate lookups. In
addition, TinyCR is more efficient to detect a revoked certificate
than CRLite when using similar memory cost, while CRLite is more
efficient for checking a legitimate certificate, as most legitimate
certificates can be verified using only the first filter layer.
A.4 DASS for Multi-Set Query Problem
A.4.1 Design. In a global IoT or mobile network, devices could be
separated into disjoint sub-groups based on their identities or cer-
tificates, and devices among different groups could have different
trust levels or privileges. For example, in a smart-city IoT network,
devices deployed and maintained by the government usually have
the highest level of trust by other device clients. For another ex-
ample, devices with a higher VIP level usually can access more
resources or privileges than other clients. In such scenarios, devices
are classified by their identities and other devices or third-party
should be able to query the group that the device belongs to. Similar
as the CR verification problem, those problems can also be solved by
just querying the group of the device’s certificate while validating
the certificate; whereas when the number of groups is larger than
2, the problem becomes a multi-set query problem.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1133(a) r = 100, P
(b) r = 100, N
Figure 16: Query throughput on Raspberry Pi 3. (a) Query revoked certificates with constant r = 100. (b) Query legitimate
certificates with constant r = 100. (c) Query revoked certificates from a key set of size n = 226. (d) Query legitimate certificates
from a key set of size n = 226.
(c) n = 226, P
(d) n = 226, N
Figure 17: Decision tree of DASS for multi-set query.
DASS could also be extended to the multi-set query problem.
Specifically, we can construct a binary decision tree, called DT-
DASS (as shown in Fig 17), and use a DASS at each tree node to
split the keys into two sub-groups. The decision tree stops growing
when the leaf node is a pure node, namely, all keys represented by
the leaf node are from one specific set Sk. For n groups, DT-DASS
can separated the groups with a decision tree of height(cid:6)log2 n(cid:7).
This decision tree based data structure can be optimized by
utilizing the good property of DASS when handling imbalanced
classes. A straightforward method is the greedy strategy (as shown
in Fig 17): we first sort the groups by their sizes, then greedily
choose the split point at each node such that the ratio of the left
and right child node sizes is maximized, while guaranteeing we do
not introduce an additional tree layer to fully separate all groups.
To show how this algorithm benefits from the imbalanced set
distribution, we can compare DT-DASS with Othello, which classify
the keys by encoding the group IDs as the stored values for the
keys. In Othello, we can consider the encoded value representing
the group ID for each key requires at least(cid:6)log2 n(cid:7) bits. Thus, the
(cid:6)log2 n(cid:7) long bits can also forms a binary decision tree of height
(cid:6)log2 n(cid:7), where nodes in each layer together can be considered as an
fore, the total memory cost of Othello is(cid:6)2.33|S| log2 n(cid:7), where |S|
one-bit Othello. However, in such Othello search tree, the memory
cost of the nodes in every layer (i.e., the one-bit Othello size) is
constant and independent with the distribution of the keys. There-
is the total key size. In contrast, the total number of groups in each
layer of DT-DASS is equal or smaller than n, because some nodes
could become pure leaf nodes in the intermediate layers and would
not be considered again in layers below, when n is not an exact
power of 2. Meanwhile, at each split node, the DASS memory size is
Figure 18: Mean & standard deviation of amortized memory
cost for multi-set query.
only determined by the minor sub-group and the ratio between the
two sub-groups. Therefore, based on the prior analysis, the total
memory cost at each layer is smaller than Othello’s layer cost if the
sub-groups at the nodes are imbalanced.
In many real applications, the sizes of groups (such as different
VIP levels of devices) are significantly different. For example, a
common distribution of the group sizes is the "pyramidal shape",
i.e., the group sizes scale inversely with the levels of the hierarchy.
Meanwhile, n could be any arbitrary integer instead of a pow of
2. Therefore, DT-DASS costs much less memory than Othello for
multi-set query when handling imbalanced groups. As a trade-off,
the query cost of DT-DASS grows logarithmically with the number
of sets n (i.e., Θ(log n)) in worst case.
A.4.2 Evaluation. We compare the memory performance of DASS
with Othello, which can also be used to solve Multiset Query prob-
lem.
For Othello, we still use the recommended memory setting (2.33
bits per slot) by the original paper [37]. Meanwhile, for L classes,
each key requires(cid:6)log2 L(cid:7) slots to store the value (class label). Hence,
in total, Othello requires constantly 2.33(cid:6)log2 L(cid:7) bits for each key.
In the experiments, we determine the size of each set by uni-
formly selecting a random number between 1 to 10,000,000. We
conducted 7 groups of experiments using 3 to 9 sets respectively. In
each group the experiments are repeated 1000 times. In Fig. 18, we
show the average amortized memory cost of each key when using
TinyCR or Othello for 3 to 9 sets respectively. We find TinyCR costs
46% to 61% less memory than Othello for multi-set queries.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1134