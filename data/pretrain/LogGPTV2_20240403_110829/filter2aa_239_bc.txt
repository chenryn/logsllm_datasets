        current = current.Next;
        }
      }
    }
  注意： yield语句创建一个枚举器的状态机，详细介绍请参见第7章。
现在可以对于任意类型使用LinkedList类了。在下面的代码段中，实例化了一个新
LinkedList对象，添加了两个整数类型和一个字符串类型。整数类型要转换为一个对象，
所以执行装箱操作，如前面所述。通过foreach语句执行拆箱操作。在foreach语句中，链表
中的元素被强制转换为整数，所以对于链表中的第3个元素，会发生一个运行时异常，因
为把它强制转换为int时会失败（代码文件LinkedLisObjects/Program.cs）。
    var list1 = new LinkedList();
    list1.AddLast(2);
    list1.AddLast(4);
    list1.AddLast("6");
    foreach (int i in list1)
    {
      WriteLine(i);
    }
下面创建链表的泛型版本。泛型类的定义与一般类类似，只是要使用泛型类型声明。
之后，泛型类型就可以在类中用作一个字段成员，或者方法的参数类型。LinkedListNode
类用一个泛型类型T声明。属性Value的类型是T，而不是object。构造函数也变为可以接
受T类型的对象。也可以返回和设置泛型类型，所以属性Next和Prev的类型是
LinkedListNode（代码文件LinkedListSample/LinkedListNode.cs）。
    public class LinkedListNode
    {
      public LinkedListNode(T value)
      {
        Value = value;
      }
      public T Value { get; private set; }
      public LinkedListNode Next { get; internal set; }
      public LinkedListNode Prev { get; internal set; }
    }
下面的代码把LinkedList类也改为泛型类。LinkedList包含LinkedListNode元
素。LinkedList中的类型T定义了类型T的属性First和Last。AddLast（）方法现在接受类型
T的参数，并实例化LinkedListNode类型的对象。
除了IEnumerable接口，还有一个泛型版本IEnumerable。IEnumerable派生自
IEnumerable，添加了返回IEnumerator的GetEnumerator（）方法，LinkedList实现
泛型接口IEnumerable（代码文件LinkedListSample/LinkedList.cs）。
  注意： 枚举与接口IEnumerable和IEnumerator详见第7章。
    public class LinkedList: IEnumerable
    {
      public LinkedListNode First { get; private set; }
      public LinkedListNode Last { get; private set; }
      public LinkedListNode AddLast(T node)
      {
        var newNode = new LinkedListNode(node);
        if (First == null)
        {
        First = newNode;
        Last = First;
        }
        else
        {
        LinkedListNode previous = Last;
        Last.Next = newNode;
        Last = newNode;
        Last.Prev = previous;
        }
        return newNode;
      }
      public IEnumerator GetEnumerator()
      {
        LinkedListNode current = First;
        while (current ! = null)
        {
        yield return current.Value;
        current = current.Next;
        }
      }
      IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
使用泛型LinkedList，可以用int类型实例化它，且无需装箱操作。如果不使用
AddLast（）方法传递int，就会出现一个编译器错误。使用泛型IEnumerable, foreach语
句也是类型安全的，如果foreach语句中的变量不是int，就会出现一个编译器错误（代码
文件LinkedListSample/Program.cs）。
    var list2 = new LinkedList();
    list2.AddLast(1);
    list2.AddLast(3);
    list2.AddLast(5);
    foreach (int i in list2)
    {
      WriteLine(i);
    }
同样，可以对于字符串类型使用泛型LinkedList，将字符串传递给AddLast（）方
法。
    var list3 = new LinkedList();
    list3.AddLast("2");
    list3.AddLast("four");
    list3.AddLast("foo");
    foreach (string s in list3)
    {
      WriteLine(s);
    }
  注意： 每个处理对象类型的类都可以有泛型实现方式。另外，如果类使用了
层次结构，泛型就非常有助于消除类型强制转换操作。
6.3 泛型类的功能
在创建泛型类时，还需要一些其他C#关键字。例如，不能把null赋予泛型类型。此
时，如下一节所述，可以使用default关键字。如果泛型类型不需要Object类的功能，但需
要调用泛型类上的某些特定方法，就可以定义约束。
本节讨论如下主题：
● 默认值
● 约束
● 继承
● 静态成员
首先介绍一个使用泛型文档管理器的示例。文档管理器用于从队列中读写文档。先创
建一个新的控制台项目DocumentManager，并添加DocumentManager类。
AddDocument（）方法将一个文档添加到队列中。如果队列不为空，IsDocumentAvailable
只读属性就返回true（代码文件DocumentManager/DocumentManager.cs）。
  注意： 在.NET Core中，这个示例需要引用NuGet包System. Collections。
    using System;
    using System.Collections.Generic;
    namespace Wrox.ProCSharp.Generics
    {
      public class DocumentManager
      {
        private readonly Queue documentQueue = new Queue();
        public void AddDocument(T doc)
        {
          lock (this)
          {
          documentQueue.Enqueue(doc);
          }
        }
        public bool IsDocumentAvailable => documentQueue.Count > 0;
      }
    }
第21和22章将讨论线程和lock语句。
6.3.1 默认值
现在给DocumentManager类添加一个GetDocument（）方法。在这个方法中，应
把类型T指定为null。但是，不能把null赋予泛型类型。原因是泛型类型也可以实例化为值
类型，而null只能用于引用类型。为了解决这个问题，可以使用default关键字。通过
default关键字，将null赋予引用类型，将0赋予值类型。
    public T GetDocument()
    {
      T doc = default(T);
      lock (this)
      {
        doc = documentQueue.Dequeue();
      }
      return doc;
    }
  注意： default关键字根据上下文可以有多种含义。switch语句使用default定义
默认情况。在泛型中，取决于泛型类型是引用类型还是值类型，泛型default将泛型类型
初始化为null或0。
6.3.2 约束
如果泛型类需要调用泛型类型中的方法，就必须添加约束。
对于DocumentManager，文档的所有标题应在DisplayAllDocuments（）方法中显
示。Document类实现带有Title和Content属性的IDocument接口（代码文件
DocumentManager/Document.cs）：
    public interface IDocument
    {
      string Title { get; set; }
      string Content { get; set; }
    }
    public class Document: IDocument
    {
      public Document()
      {
      }
      public Document(string title, string content)
      {
        Title = title;
        Content = content;
      }
      public string Title { get; set; }
      public string Content { get; set; }
    }
要使用DocumentManager类显示文档，可以将类型T强制转换为IDocument接口，
以显示标题（代码文件DocumentManager/DocumentManager.cs）：
    public void DisplayAllDocuments()
    {
      foreach (T doc in documentQueue)
      {
        WriteLine(((IDocument)doc).Title);
      }
    }
问题是，如果类型T没有实现IDocument接口，这个类型强制转换就会导致一个运行
时异常。最好给DocumentManager类定义一个约束：TDocument类型必须实
现IDocument接口。为了在泛型类型的名称中指定该要求，将T改为TDocument。where子
句指定了实现IDocument接口的要求。
    public class DocumentManager
        where TDocument: IDocument
    {
  注意： 给泛型类型添加约束时，最好包含泛型参数名称的一些信息。现在，
示例代码给泛型参数使用TDocument，来代替T。对于编译器而言，参数名不重要，但
更具可读性。
这样就可以编写foreach语句，从而使类型TDocument包含属性Title。Visual 
Studio
IntelliSense和编译器都会提供这个支持。
    public void DisplayAllDocuments()
    {
      foreach (TDocument doc in documentQueue)
      {
        WriteLine(doc.Title);
      }
    }
在Main（）方法中，用Document类型实例化DocumentManager类，而
Document类型实现了需要的IDocument接口。接着添加和显示新文档，检索其中一个文档
（代码文件DocumentManager/ Program.cs）：
    public static void Main()
    {
      var dm = new DocumentManager();
      dm.AddDocument(new Document("Title A", "Sample A"));
      dm.AddDocument(new Document("Title B", "Sample B"));
      dm.DisplayAllDocuments();
      if (dm.IsDocumentAvailable)
      {
        Document d = dm.GetDocument();
        WriteLine(d.Content);
      }
    }
DocumentManager现在可以处理任何实现了IDocument接口的类。
在示例应用程序中介绍了接口约束。泛型支持几种约束类型，如表6-1所示。
表6-1
约束
说明
where T : struct
对于结构约束，类型T必须是值类型
where T : class
类约束指定类型T必须是引用类型
where T : IFoo
指定类型T必须实现接口IFoo
where T : Foo
指定类型T必须派生自基类Foo
where T : new（）
这是一个构造函数约束，指定类型T必须有一个默认构造函
数
where T1 : T2
这个约束也可以指定，类型T1派生自泛型类型T2
  注意： 只能为默认构造函数定义构造函数约束，不能为其他构造函数定义构
造函数约束。
使用泛型类型还可以合并多个约束。where T : IFoo, new（）约束和MyClass声明
指定，类型T必须实现IFoo接口，且必须有一个默认构造函数。
    public class MyClass
      where T: IFoo, new()
    {
      //...
  注意： 在C#中，where子句的一个重要限制是，不能定义必须由泛型类型实
现的运算符。运算符不能在接口中定义。在where子句中，只能定义基类、接口和默认
构造函数。
6.3.3 继承
前面创建的LinkedList类实现了IEnumerable接口：
    public class LinkedList: IEnumerable
    {
      //...
泛型类型可以实现泛型接口，也可以派生自一个类。泛型类可以派生自泛型基类：
    public class Base
    {
    }
    public class Derived: Base
    {
    }
其要求是必须重复接口的泛型类型，或者必须指定基类的类型，如下例所示：
    public class Base
    {
    }
    public class Derived: Base
    {
    }
于是，派生类可以是泛型类或非泛型类。例如，可以定义一个抽象的泛型基类，它在
派生类中用一个具体的类实现。这允许对特定类型执行特殊的操作：
    public abstract class Calc
    {
      public abstract T Add(T x, T y);
      public abstract T Sub(T x, T y);
    }
    public class IntCalc: Calc
    {
      public override int Add(int x, int y) => x + y;
      public override int Sub(int x, int y) => x - y;
    }
还可以创建一个部分的特殊操作，如从Query中派生StringQuery类，只定义一个泛型
参数，如字符串TResult。要实例化StringQuery，只需要提供TRequest的类型：
    public class Query
    {
    }
    public StringQuery : Query
    {
    }
6.3.4 静态成员
泛型类的静态成员需要特别关注。泛型类的静态成员只能在类的一个实例中共享。下
面看一个例子，其中StaticDemo类包含静态字段x：
    public class StaticDemo
    {
      public static int x;
    }