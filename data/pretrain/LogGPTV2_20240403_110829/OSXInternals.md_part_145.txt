### Disk Images and the Disk Images Framework

The `diskimages-helper` utility is located in the `Resources` directory of the Disk Images framework. When a disk image is mounted, it appears as a virtual disk, with `/dev/disk10` being its block device node. The `pdisk` utility can be used to dump partition information from this virtual disk, just as it would for a physical disk.

```sh
$ pdisk /dev/rdisk10 -dump
Partition map (with 512 byte blocks) on '/dev/rdisk10'
#: type name length base ( size )
1: Apple_partition_map Apple 63 @ 1
2: Apple_HFS disk image 65456 @ 64 ( 32.0M)
3: Apple_Free 16 @ 65520
Device block size=512, Number of Blocks=65536 (32.0M)
```

To unmount and eject the disk, use the `hdiutil detach` command:

```sh
$ hdiutil detach disk10
"disk10" unmounted.
"disk10" ejected.
```

By default, `hdiutil` uses the Universal Disk Image Format (UDIF). The default partition layout includes a partition map with space for 63 map entries, a single data partition of type `Apple_HFS`, and a trailing free partition containing 16 blocks. This layout is known as Single Partition UDIF (SPUD). `hdiutil` also supports other partition layouts, such as the following example:

```sh
$ hdiutil create -size 32m -volname HFSJ_UCD -fs HFSJ -layout "UNIVERSAL CD" /tmp/hfsj_ucd.dmg
...
$ hdiutil attach /tmp/hfsj_ucd.dmg
/dev/disk10 Apple_partition_scheme
/dev/disk10s1 Apple_partition_map
/dev/disk10s2 Apple_Driver43
/dev/disk10s3 Apple_Driver43_CD
/dev/disk10s5 Apple_Driver_ATAPI
/dev/disk10s6 Apple_Driver_ATAPI
/dev/disk10s7 Apple_Patches
/dev/disk10s9 Apple_HFS
```

A partition layout of type `NONE` creates an image without a partition map:

```sh
$ hdiutil create -size 32m -volname HFSJ_NONE -fs HFSJ -layout NONE /tmp/hfsj_none.dmg
...
$ hdiutil attach /tmp/hfsj_none.dmg
...
/dev/disk11
```

In this case, `pdisk` will not dump partition information due to the absence of a partition map. Instead, you can use `hdiutil pmap`:

```sh
$ hdiutil pmap /dev/rdisk11
Partition List
## Dev_______ Type_______________ Name_____________ Start___ Size____ End_____
-1 disk11 Apple_HFS Single Volume 0 65536 65535
Legend
- ... extended entry
+ ... converted entry
Type 128 partition map detected.
Block0.blockSize 0x0200
NativeBlockSize 0x0200
...
```

### RAM Disks

A memory-backed virtual disk device can be created using `hdiutil`:

```sh
$ hdiutil attach -nomount ram://1024
/dev/disk10
```

This command creates a RAM disk with 1024 sectors, each 512 bytes. You can then partition the RAM disk, create file systems, and mount it:

```sh
$ newfs_hfs -v RAMDisk /dev/rdisk10
Initialized /dev/rdisk10 as a 512 KB HFS Plus volume
$ mkdir /tmp/RAMDisk
$ mount_hfs /dev/disk10 /tmp/RAMDisk
$ df /tmp/RAMDisk
File system 512-blocks Used Avail Capacity Mounted on
/dev/disk10 1024 152 872 15% /private/tmp/RAMDisk
```

To unmount and free the associated physical memory, use the following commands:

```sh
$ umount /tmp/RAMDisk
$ hdiutil detach disk10
```

### BSD Vnode Disk Driver

Mac OS X provides another mechanism, the BSD vnode disk driver, which allows files to be treated as disks by attaching them to specific "vn" device nodes. The `/usr/libexec/vndevice` command-line program is used to control this mechanism:

```sh
$ hdiutil create -size 32m -volname HFSJ_VN -fs HFSJ -layout NONE /tmp/hfsj_vn.dmg
...
$ sudo /usr/libexec/vndevice attach /dev/vn0 /tmp/hfsj_vn.dmg
$ mkdir /tmp/mnt
$ sudo mount -t hfs /dev/vn0 /tmp/mnt
$ df -k /tmp/mnt
Filesystem 1K-blocks Used Avail Capacity Mounted on
/dev/vn0 32768 8720 24048 27% /private/tmp/mnt
$ sudo umount /tmp/mnt
$ sudo /usr/libexec/vndevice detach /dev/vn0
```

### Creating a Virtual Disk from Scratch

While `hdiutil` is typically used to create disk images with automatically constructed partition layouts and file systems, it is instructive to create a disk image from scratch. This involves creating a zero-filled file and then initializing and partitioning it.

First, create a zero-filled file:

```sh
$ mkfile 64m blankhd.dmg
```

Next, attach the disk image without mounting any volumes:

```sh
$ hdiutil attach -nomount /tmp/blankhd.dmg
/dev/disk10
```

Since this disk has no partitions or partition scheme, `pdisk` will not display any partition information. Initialize the partition map using `pdisk`:

```sh
$ pdisk /dev/rdisk10 -initialize
$ pdisk /dev/rdisk10 -dump
Partition map (with 512 byte blocks) on '/dev/rdisk10'
#: type name length base ( size )
1: Apple_partition_map Apple 63 @ 1
2: Apple_Free Extra 131008 @ 64 ( 64.0M)
Device block size=512, Number of Blocks=131072 (64.0M)
...
```

You can then create multiple partitions using a shell script. For example, the following script creates 31 partitions, each 1MB in size:

```sh
#!/bin/zsh
# usage: createpartitions.zsh <device>
DISK=$1
base=64
for pnum ({1..31})
do
    pdisk $DISK -createPartition Partition_$pnum Apple_HFS $base 2048
    base=$((base + 2048))
done
```

Run the script with the raw device node as an argument:

```sh
$ ./createpartitions.zsh /dev/rdisk10
2
3
...
31
32
$ pdisk /dev/rdisk10 -dump
Partition map (with 512 byte blocks) on '/dev/rdisk10'
#: type name length base ( size )
1: Apple_partition_map Apple 63 @ 1
2: Apple_HFS Partition_1 2048 @ 64 ( 1.0M)
3: Apple_HFS Partition_2 2048 @ 2112 ( 1.0M)
4: Apple_HFS Partition_3 2048 @ 4160 ( 1.0M)
...
32: Apple_HFS Partition_31 2048 @ 61504 ( 1.0M)
33: Apple_Free Extra 67520 @ 63552 ( 33.0M)
...
```

Create file systems on each of the `Apple_HFS` data partitions using another shell script:

```sh
#!/bin/zsh
# usage: newfs_hfs.zsh <device>
DISK=$1
for slicenum ({2..32}) # first data partition is on the second slice
do
    fsnum=$((slicenum - 1))
    newfs_hfs -v HFS$fsnum "$DISK"s$slicenum
done
```

Run the script with the raw device node as an argument:

```sh
$ ./newfs_hfs.zsh /dev/rdisk10
Initialized /dev/rdisk10s2 as a 1024 KB HFS Plus volume
Initialized /dev/rdisk10s3 as a 1024 KB HFS Plus volume
...
Initialized /dev/rdisk10s31 as a 1024 KB HFS Plus volume
Initialized /dev/rdisk10s32 as a 1024 KB HFS Plus volume
$ hdiutil detach disk10
$ open /tmp/blankhd.dmg
...
```

At this point, all 31 volumes should be mounted under `/Volumes`. Detaching the disk will unmount all of them.

### GUID-Based Partitions

To create GUID-based partitions, use the `gpt` command. Assuming you have a blank disk image attached with `/dev/rdisk10` as its raw device node:

```sh
$ gpt show /dev/rdisk10
start size index contents
0 131072
$ gpt create /dev/rdisk10
$ gpt show /dev/rdisk10
start size index contents
0 1 PMBR
1 1 Pri GPT header
2 32 Pri GPT table
34 131005
131039 32 Sec GPT table
131071 1 Sec GPT header
$ gpt add -s 1024 -t hfs /dev/rdisk10
$ gpt show /dev/rdisk10
start size index contents
0 1 PMBR
1 1 Pri GPT header
2 32 Pri GPT table
34 1024 1 GPT part - 48465300-0000-11AA-AA11-00306543ECAC
1058 129981
131039 32 Sec GPT table
131071 1 Sec GPT header
$ gpt add -i 8 -s 1024 -t ufs /dev/rdisk10
$ gpt show /dev/rdisk10
...
34 1024 1 GPT part - 48465300-0000-11AA-AA11-00306543ECAC
1058 1024 8 GPT part - 55465300-0000-11AA-AA11-00306543ECAC
...
```

### Files and File Descriptors

At the system call level, Mac OS X represents open files in a process using integral file descriptors. Each file descriptor is an index into the process's file descriptor table in the kernel. When a user program uses a file descriptor in a system call, the kernel uses the file descriptor to find the corresponding file data structure, which contains information such as a function-pointer table for I/O operations.

Figure 1111 shows the primary file-related kernel data structures in Mac OS X. Each process structure (`struct proc`) contains a pointer (`p_fd`) to a `filedesc` structure, which holds information about the process's open files. Specifically, it contains pointers to two arrays: an array of `fileproc` structures (`fd_ofiles`) and an array of open file flags (`fd_ofileflags`).

Each entry in the `fd_ofiles` array is a `fileproc` structure. The `fg_ops` and `fg_data` fields of this structure point to data structures whose contents depend on the file descriptor's type. Table 111 lists the types of file descriptors in Mac OS X.

### The VFS Layer

Mac OS X provides a virtual file system interface (VFS layer), which sits between the file-system-independent and file-system-dependent code in the kernel. This abstraction allows multiple file systems to coexist in a clean and maintainable manner. A `vnode` is an in-kernel representation of a file, while a `vfs` represents a file system.

The VFS layer is derived from FreeBSD's VFS, with some differences, particularly in the integration with virtual memory. The unified buffer cache (UBC) on Mac OS X is integrated with Mach's virtual memory layer.

Figure 1112 provides a simplified visualization of the vnode/VFS layer. The `vfs` acts as an abstract base class, with specific file system instances like HFS Plus and UFS derived from it. The `vfsops` structure acts as a function-pointer table for these functions, including `vfs_mount`, `vfs_unmount`, `vfs_root`, and others.

Similarly, a `vnode` is an abstract base class from which files on various file systems are conceptually derived. A `vnode` contains all the information that the file-system-independent layer of the kernel needs. It also has a set of functions representing vnode operations, shared by vnodes of the same file system type.

A `mount` structure represents an instance of a mounted file system, containing a pointer to the `vfs` operations table and a pointer (`mnt_data`) to instance-specific private data. For example, in the case of HFS Plus, `mnt_data` points to an `hfsmount` structure. Similarly, a `vnode` contains a private data pointer (`v_data`) that points to file-system-specific per-file data.