    var rebate uint16 = uint16(1)
    fmt.Println(gas + rebate) // 0
    var gas1 uint16 = uint16(65535)
    var rebate2 uint16 = uint16(2)
    fmt.Println(gas1 + rebate2) // 1
  * **除数为零**
代码基本算数运算过程中，当出现除数为零的错误时，通常会导致程序崩溃和拒绝服务漏洞。
在`CreateTypeAsset`函数的第64行，通过传入参数`appraisedValue`来计算接收资产类型值，实际上，当传入参数`appraisedValue`等于17时，将发生除零风险问题。
  * **忽略返回值**
一些函数具有返回值且返回值用于判断函数执行的行为，如判断函数是否执行成功，因此需要对函数的返回值进行相应的判断，以 `strconv.Atoi`
函数为例，其原型为： `func Atoi(s string) (int, error)`如果函数执行成功，则返回第一个参数 int；如果发生错误，则返回
error，如果没有对函数返回值进行检测，那么当读取发生错误时，则可能因为忽略异常和错误情况导致允许攻击者引入意料之外的行为。
  * **空指针引用**
指针在使用前需要进行健壮性检查，从而避免对空指针进行解引用操作。试图通过空指针对数据进行访问，会导致运行时错误。当程序试图解引用一个期望非空但是实际为空的指针时，会发生空指针解引用错误。对空指针的解引用会导致未定义的行为。在很多平台上，解引用空指针可能会导致程序异常终止或拒绝服务。如：在
Linux 系统中访问空指针会产生 Segmentation fault 的错误。
    func (s *AssetPrivateDetails) verifyAgreement(ctx contractapi.TransactionContextInterface, assetID string, owner string, buyerMSP string) *Asset { 
        ....
        err = ctx.GetStub().PutPrivateData(assetCollection, transferAgreeKey,   []byte(clientID))
        if err != nil {
            fmt.Printf("failed to put asset bid: %v\n", err)
            return nil
        }
    }
    // Verify transfer details and transfer owner
    asset := s.verifyAgreement(
        ctx, assetTransferInput.ID, asset.Owner, assetTransferInput.BuyerMSP)
    var detailsID int = len(asset.ID)
  * **越界访问**
越界访问是代码语言中常见的缺陷，它并不一定会造成编译错误，在编译阶段很难发现这类问题，导致的后果也不确定。当出现越界时，由于无法得知被访问空间存储的内容，所以会产生不确定的行为，可能是程序崩溃、运算结果非预期。
#### 系统机制问题
  * **全局变量唯一性**
全局变量不会保存在数据库中，而是存储于单个节点，如果此类节点发生故障或重启时，可能会导致该全局变量值不再与其他节点保持一致，影响节点交易。因此，从数据库读取、写入或从合约返回的数据不应依赖于全局状态变量。
  * **不确定性因素**
合约变量的生成如果依赖于不确定因素(如：本节点时间戳)或者某个未在账本中持久化的变量，那么可能会因为各节点该变量的读写集不一样，导致交易验证不通过。
  * **访问外部资源**
合约访问外部资源时，如第三方库，这些第三方库代码本身可能存在一些安全隐患。引入第三方库代码可能会暴露合约未预期的安全隐患，影响链码业务逻辑。
#### 业务逻辑安全
  * **输入参数检查不到位**
在编写智能合约时，开发者需要对每个函数参数进行合法性，预期性检查，即需要保证每个参数符合合约的实际应用场景，对输入参数检查不到位往往会导致非预期的结果。如近期爆出的`Filecoin测试网`代码中的严重漏洞，原因是
`transfer` 函数中对转账双方 `from, to` 地址检查不到位，导致了FIL无限增发。
    ### Before
    func (vm *VM) transfer(from, to address.Address, amt types.BigInt) aerrors.ActorError {
        if from == to {
            return nil
        }
        ...
    }
    ### After
    func (vm *VM) transfer(from, to address.Address, amt types.BigInt) aerrors.ActorError {
        if from == to {
            return nil
        }
        fromID, err := vm.cstate.LookupID(from)
        if err != nil {
            return aerrors.Fatalf("transfer failed when resolving sender address: %s", err)
        }
        toID, err := vm.cstate.LookupID(to)
        if err != nil {
            return aerrors.Fatalf("transfer failed when resolving receiver address: %s", err)
        }
        if fromID == toID {
            return nil
        }
        ...
    }
  * **函数权限失配**
Fabrci智能合约go代码实现中是根据首字母的大小写来确定可以访问的权限。如果方法名首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用。因此，对于一些敏感操作的内部函数，应尽量保证方法名采用首字母小写开头，防止被外部恶意调用。
  * **异常处理问题**
通常每个函数调用结束后会返回相应的返回参数，错误码，如果未认真检查错误码值而直接使用其返回参数，可能导致越界访问，空指针引用等安全隐患。
  * **外部合约调用引入安全隐患**
在某些业务场景中，智能合约代码可能引入其他智能合约，这些未经安全检查的合约代码可能存在一些未预期的安全隐患，进而影响链码业务本身的逻辑。
#### 总结
联盟链的发展目前还处于项目落地初期阶段，对于联盟链平台上的智能合约开发，项目方应该强化对智能合约开发者的安全培训，简化智能合约的设计，做到功能与安全的平衡，严格执行智能合约代码安全审计(自评/项目组review/三方审计)
在联盟链应用落地上，需要逐步推进，从简单到复杂，在项目开始阶段，需要设置适当的权限以防发生黑天鹅事件。
#### REF
[1] Hyperledger Fabric 链码
[2] fabric-samples
[3] Fabric2.0，使用test-network
[4] 使用V8和Go实现的安全TypeScript运行时
[5] Hyperledger fabric
* * *