ing from strong agreement to strong disagreement. We
used a 5-point scale (strongly disagree, disagree, neu-
tral, agree, strongly agree). Participants answered two
of these questions on the index cards after each individ-
ual task, then completed a 16-question questionnaire for
each plug-in.
The questions from the questionnaire were a priori
grouped into four sets that considered different aspects
of the interaction: perceived security, comfort level with
giving control of passwords to a program, perceived ease
of use, and perceived necessity and acceptance. Each set
contained four similar questions (see Table 4); the ques-
tions were randomly organized on the questionnaire so
participants were not aware of the groupings. Partici-
pants circled their answer for each question among the
ﬁve choices. Half of the questions were inverted to avoid
bias.
4 Collected Results
Neither PwdHash nor P-Multiplier fared well in terms of
usability. Both the quantitative and observational data
point to major problems, as explained below.
Our ﬁrst measure of usability was whether participants
were able to successfully complete the given tasks with
each password manager. Our goal was not to provide a
measure of how much better one password manager is
compared to the other but to investigate the usability of
USENIX Association
Security ’06: 15th USENIX Security Symposium
7
Table 4: Sample questions for each question set (for PwdHash,
the questionnaire for P-Multiplier was identical other than the
name of the software).
Perceived Security
My passwords are secure when using PwdHash.
I do not trust PwdHash to protect my passwords from cyber
criminals.
Comfort Level with Giving Control of Passwords to a
Program
I am uncomfortable with not knowing my actual passwords
for a web site.
Passwords are safer when users do not know their actual
passwords.
Perceived Ease of Use
PwdHash is difﬁcult to use.
I could easily log on to web sites and manage my passwords
with PwdHash.
Perceived Necessity and Acceptance
I need to use PwdHash on my computer to protect my pass-
words.
My passwords are safe even without PwdHash.
each. Looking at Tables 54 and 6, it appears that Pwd-
Hash outperformed P-Multiplier but still had a relatively
high chance of potential security exposures, as many of
PwdHash’s successful outcomes were only realized after
multiple attempts. These latter successful outcomes – la-
belled “dangerous successes” – can only be cautiously
viewed as successes (see Section 5.4). The web sites
used for the tasks were speciﬁcally chosen because they
have a very high tolerance for incorrect login attempts.
Participants frequently attempted to log in three to ten
(or more) times before they were successful or gave up.
With sites that limit the number of attempts, most users
would have been locked out.
For the Migrate Pwd, Update Pwd, and Second Login
tasks, a number of participants felt that they had success-
fully completed the task when in reality they had not.
This was more common with P-Multiplier. This was
mainly due to participants incorrectly believing they had
successfully migrated their password from unprotected
to protected and subsequently believing that they were
logging on with a protected password when they were
still using an unprotected password.
The Likert-scale responses from the questionnaires
were converted to numeric values (1 = most negative, 3 =
neutral, 5 = most positive). The responses were grouped
according to their predeﬁned sets to ﬁnd the mean re-
sponses for each set. Means were calculated and dif-
ferences between P-Multiplier and PwdHash were as-
sessed by running t-tests.
In a strict statistical sense,
Likert-scale data should not be converted to numerical
data. Since it is ordinal data, the differences between
“strongly agree”, “agree”, and “neutral” are not neces-
sarily the same. However, in practice this type of sta-
Figure 3: Mean questionnaire responses for each question
group on scale of 1 to 5 (1 most -ve, 3 neutral, 5 most +ve)
tistical analysis is the most common and accepted way
of reporting Likert-scale data as the difference in results
between parametric and non-parametric analysis are usu-
ally minimal.
We used t-tests to analyze the response distributions
and determine the statistical signiﬁcance of any differ-
ences. The t-tests can only be used to compare Pwd-
Hash and P-Multiplier against each other since we do
not have an optimal system against which to compare
the two. Examining the questionnaire data, the means
for each group of questions reveal that neither systems
fared very well; most values remained below neutral on
the scale (see Figure 3). However, the t-test5 showed that
PwdHash was reported to be easier to use (t(24) = 2.24,
p < .05) and perceived as more secure (t(24) = 2.70, p
< .05) than P-Multiplier. The t-tests further revealed that
the systems were similarly bad at making users feel com-
fortable with giving control to a password manager (t(24)
= -0.362, p = .721) and that there was no difference be-
tween the two programs in how users felt regarding the
perceived necessity of such systems (t(24) = -0.207, p =
.838).
Examining their responses to the two questions from
the index cards, we ﬁnd that tasks completed with Pwd-
Hash were perceived as easier than those completed with
P-Multiplier. Although participants reported higher sat-
isfaction with PwdHash than P-Multiplier, in most cases
the mean perceived difﬁculty and perceived satisfaction
was below 4 for each. This means that participants ini-
tially reported positive reactions to the plug-ins. How-
ever these reported opinions need to be taken in context
with user performance. In some cases, participants re-
ported that the task was easy and that they were satisﬁed
with the software even when they were unsuccessful at
completing the task. In some of these instances partici-
pants were unaware that they had failed to complete the
task. For example, they believed that they had generated
a new secure password for a site when they had not even
activated the plug-in – a potentially dangerous situation
(see Section 5.4). In other cases, they said “well, this
should have been easy, so I gave it a high rating”. Ob-
viously, relying solely on reported satisfaction and difﬁ-
8
Security ’06: 15th USENIX Security Symposium
USENIX Association
Table 5: Task Completion Results for PwdHash
Success
Log In
Migrate Pwd
Remote Login
Update Pwd
Second Login
48% (12)
42% (11)
(7)
27%
19%
(5)
52% (13)
Potentially causing security exposures
Dangerous
Success
44% (11)
35%
(9)
42% (11)
65% (17)
28%
(7)
Failure
8% (2)
11% (3)
31% (8)
8% (2)
4% (1)
Failures
False
Completion
0%
(0)
(3)
11%
(0)
0%
(2)
8%
0%
(0)
Failed due
to Previous
N/A N/A
N/A N/A
N/A N/A
N/A N/A
16%
(4)
Table 6: Task Completion Results for P-Multiplier
Potentially causing security exposures
Success
Dangerous
Success
Failure
Log In
48% (12)
16%
(4)
(2)
Migrate Pwd
(7)
Remote Login N/A N/A N/A N/A N/A N/A
44% (11)
Update Pwd
Second Login
16%
(4)
16%
16%
44% (11)
32%
(9)
8%
28%
(4)
(4)
4%
4%
(1)
(1)
Failures
False
Failed due
to Previous
Completion
N/A N/A
(0)
0%
(5)
20%
N/A N/A
N/A N/A N/A
N/A
N/A N/A
(9)
28%
0%
(0)
64% (16)
culty is misleading.
At the end of the session, participants were asked
which of the two systems they preferred.
Partici-
pants were nearly evenly distributed in terms of prefer-
ence: 14 participants selected PwdHash and 11 chose
P-Multiplier. The total number of responses is 25 be-
cause one participant only completed tasks with one sys-
tem and could not compare the two.
5 Analysis and Interpretation of Results
Only one task in our study had a success rate of over
50%. This should concern the security community be-
cause when users cannot use a system correctly, they be-
come vulnerable to attacks (see Section 5.4). It is im-
portant to examine the causes of failure in order to learn
how to address these usability problems. The best source
of information in this case is the observational data that
recorded what happened as participants tried to use the
systems.
Section 5.1 reports on usability problems common to
both systems tested. Section 5.2 compares our ﬁnd-
ings with those of PwdHash’s authors and section 5.3
reports on usability problems discovered speciﬁcally in
P-Multiplier. Finally, section 5.4 discusses the particu-
lar security vulnerabilities exposed due to these usability
problems.
5.1 Problems Common to Both Systems
Multiple issues arose because users’ mental models did
not match the reality of the system. They clearly were
trying to make sense of what they saw and experienced
during the interaction, but their understanding was in-
complete or incorrect. Speciﬁcally, they had difﬁculty
understanding when and how to activate each system,
understanding how long it remains active once it is ac-
tivated, determining to what ﬁelds the activation ap-
plied, and determining whether they had correctly ac-
complished a task.
Users were unsure about whether the systems were
correctly activated. They often commented on “well, I
think it did something” or “I guess that’s what needed
to be done”. They perceived little feedback and were
looking for some cue that they had been successful. One
participant somehow decided that the “lock” icon on the
browser that indicates whether the site is secure was the
indicator of whether the password was protected. In each
task, they looked at the icon to make sure it was closed
then happily entered their password without activating
the plug-in, fully believing that their password was pro-
tected. Another participant who could not ﬁgure out how
to activate the plug-in reasoned “this password must be
really secure – I can’t even get in”.
Another misconception was that they could activate
the password manager once and it remained active
throughout their computer session. They double clicked
or pressed @@ with the very ﬁrst password they en-
tered and then assumed that all further passwords from
this point onwards were protected without further ac-
tion. This raises serious concerns because it gives users
a false sense of security. They believed they were pro-
tected while in fact their weak passwords continued to
be used for their accounts. They were able to log in
to their accounts because they never actually converted
their passwords to “protected” passwords even though
they believed that they had.
In some cases this might
USENIX Association
Security ’06: 15th USENIX Security Symposium
9
possibly lead to even weaker password choices than nor-
mal because users believe they are being protected.
A second activation problem arose with each password
managers’ “alternative” trigger mechanism: pressing the
F2 key for PwdHash and Alt+P for P-Multiplier. Both
of these required that the users’ cursor was already in
the password ﬁeld before triggering the program. Users
would forget to click on the password ﬁeld, then incor-
rectly assume that the program had been activated when
they pressed F2 or Alt+P.
Several users erroneously believed that unique, ran-
dom passwords were generated for them each time they
activated the password manager; even for the same web
site. For example, they believed that each time they
logged on to Hotmail and used the password manager,
a new, unique password was being generated. Of course
this would not work since a web site expects the same
password each time in order to authenticate the user. But
this view was even held by participants who would be
considered advanced or expert computer users such as
Computer Science graduate students.
Not all usability problems encountered were a direct
result of the password manager interfaces. Some prob-
lems were due to bad web site design. The sites used
in the study were popular sites frequented by expert and
novice users alike so the observed problems are likely to
occur in real life as well. Participants had difﬁculty ﬁnd-
ing the login areas, had difﬁculty ﬁnding where to change
their passwords, had difﬁculty changing their passwords,
and had difﬁculty determining if they were correctly
logged in to a site. These are valid usability issues that
provide context and insight into the circumstances and
environments where people will be using password man-
agers. They must be taken into account even though they
are not a direct result of the password manager interface.
Another problem noticed by several participants was the
inconsistency in designating the username ﬁeld: it was
called “username”, “account name”, or “email” on dif-
ferent web sites. The instruction sheet referred to it as
“username”; this was sufﬁcient to raise several questions.
Several participants gave up on tasks out of frustra-
tion, especially with P-Multiplier. Most said that in real
life, they would have requested that their password be
reset or would have created a new web account by this
point. None mentioned that they would have looked for
further documentation. Some assumed that something
was wrong with the account and asked the observer to
correct it, while others apologized for their “stupidity”
and blamed themselves for the problem.
Another frustration shared by many participants was
that they did not know their “actual” passwords. A sec-
ond subset never even realized that this was in fact what
was happening, revealing further mental model issues.
Of those who understood this concept, they felt that the
program should “trust” them with their own passwords:
“why won’t it tell me my password?” and “I wish it
would show me my password when it ﬁrst generates it,
I won’t lose it or share it!”. Presumably, the tendency
would be for users to write down their passwords for