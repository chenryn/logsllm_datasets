# Trustworthy Distributed Computing on Social Networks

**Authors:**
- Abedelaziz Mohaisen, Member, IEEE
- Huy Tran
- Abhishek Chandra, Member, IEEE
- Yongdae Kim, Member, IEEE

**Publication:**
- *IEEE Transactions on Services Computing, Vol. 7, No. 3, July-September 2014, pp. 333-335*

## Abstract
In this paper, we explore a new computing paradigm called SocialCloud, where computing nodes are governed by social ties derived from a trust-based social graph. We compare this paradigm with existing paradigms such as grid computing and conventional cloud computing. Our analysis reveals that the incentives for adopting SocialCloud are intuitive and natural, and it provides robust security and trust guarantees. We propose metrics to measure the utility and advantages of SocialCloud and use real-world social graphs and traces to evaluate its potential for ordinary users. We also study several design options and trade-offs, including scheduling algorithms, centralization, and straggler handling, and their impact on the paradigm's utility. Interestingly, while graphs known for high trust properties may not be suitable for traditional distributed trusted computing algorithms due to weak algorithmic properties, they are good candidates for SocialCloud due to their self-load-balancing features.

**Keywords:**
- Distributed computing
- Trust
- Social computing

## 1. Introduction
Cloud computing is a paradigm that overcomes the limitations of conventional computing systems by enabling new technological and economic aspects, such as elasticity and pay-as-you-go models, which free users from long-term commitments to service providers. Despite its benefits, cloud computing faces several challenges, including the need for architectures to support various applications, programming models for large-scale data-centric computing, and strong security and data privacy guarantees. Security and privacy threats in cloud systems are significant, and there are concerns about cloud providers using user data for their own benefit due to a lack of regulations and enforcement policies.

In this paper, we introduce a new computing paradigm called SocialCloud, which combines the merits of conventional cloud computing and extends features of other distributed computing paradigms, particularly grid computing. In SocialCloud, users collectively form a pool of resources to perform computational tasks for their social acquaintances. This paradigm leverages the trust inherent in social networks to ensure the good behavior of "workers" in the system. The key component of SocialCloud is the social bootstrapping graph, which enables the recruitment of workers for performing computational tasks.

Recent research has shown increasing interest in using social networks to enable trust in distributed systems. Social networks possess both algorithmic properties (e.g., connectivity) and trust, which can be used to reason about the behavior of benign users and limit the misbehavior of malicious users. These properties are essential for designing efficient and usable social network-based systems. SocialCloud harnesses the aggregate computational power of users willing to share their idle time and computing cycles, making it an attractive alternative to conventional cloud computing.

## 1.1. Contributions
The contributions of this paper are twofold:
1. **Investigation of SocialCloud Potential:** We explore the potential of the SocialCloud paradigm by introducing a design that bootstraps from social graphs to construct distributed computing services. We highlight the advantages of this paradigm over existing ones, such as grid computing.
2. **Verification of Paradigm Potential:** We validate the potential of our paradigm using simulations and real-world social graphs with varying social characteristics. Both the graphs and the simulator are made publicly available for further research and improvement.

## 1.2. Organization
- **Section 2:** Argues for the case of the SocialCloud paradigm.
- **Section 3:** Reviews the preliminaries, including social graphs, economics, and attacker models.
- **Section 4:** Introduces the main design and discusses design options.
- **Section 5:** Describes the simulator used for performance verification.
- **Section 6:** Presents the main results, detailed analyses, and discussions of the design options.
- **Section 7:** Summarizes related work, including the use of social networks for building trustworthy computing services.
- **Section 8:** Concludes the paper and suggests future work directions.

## 2. The Case for SocialCloud
SocialCloud leverages unstructured social graphs to build distributed computing systems. This approach offers several anticipated benefits:

1. **Exploitation of Data Locality:** By assuming that data is stored at multiple locations and shared among users in the social network, SocialCloud can exploit data locality. For example, in a co-authorship social graph, data for computations is likely to be distributed across the machines of research collaborators, co-authors, or previous co-authors. Similarly, in online social networks, friends often have similar interests and may replicate content across different machines, making it useful for our computing paradigm.

2. **Trustworthiness:** SocialCloud benefits from the trust inherent in social networks, which has been a focus of recent research. Examples include using social networks for cryptographic signing services, Sybil defenses, and routing in delay-tolerant networks. SocialCloud exploits this trust to ensure the reliability of computations, making it easier to reason about the behavior of nodes in the system.

3. **Ease of Worker Recruitment:** In SocialCloud, it is easier to recruit workers (nodes willing to perform computing tasks for others) due to the trust and social relationships. This is advantageous compared to the challenge of recruiting trustworthy workers in conventional grid computing.

4. **Altruistic Model:** SocialCloud operates on an altruistic model where nodes participate without expecting direct compensation. This model can be enhanced by incorporating trust values assigned to other users, further rationalizing participation.

### 2.1. Grid vs. Cloud Computing
While SocialCloud shares some similarities with grid computing, such as outsourcing computations and utilizing high aggregate computational resources, it differs in several ways. Unlike grid computing, SocialCloud has a predefined relationship between the task outsourcer and the computing worker, typically limited to 1-hop neighbors. This enhances the trustworthiness of computations. SocialCloud combines the application-oriented paradigm of grid computing with the service-oriented paradigm of cloud computing, but operates on an altruistic economic model supported by social relationships.

## 3. Assumptions and Settings
This section reviews the necessary preliminaries for understanding the rest of the paper, including social networks, their popularity, and their potential as bootstrapping tools for systems, services, and protocols.

### 3.1. Social Graphs - High-Level Description
We model the social network as an undirected and unweighted graph \( G = (V, E) \), where \( V = \{v_1, \ldots, v_n\} \) represents the set of nodes (users or computing machines), and \( E = \{e_{ij}\} \) (where \( 1 \leq i \leq n \) and \( 1 \leq j \leq n \)) represents the set of edges connecting these nodes. The size of \( G \) is denoted by \( |V| = n \) and the number of edges by \( |E| = m \). In the context of this paper, the terms "social network," "network," and "graph" are used interchangeably to refer to both the physical computing network and the underlying bootstrapping social graph.

### 3.2. Economics of SocialCloud
Our design assumes an altruistic model, where users donate their computing resources to other users in the social network when not in use. In return, these users expect others to perform computations on their behalf when needed. This model can be enhanced by incorporating trust values, allowing users to bind their participation to the trust they assign to others. In this work, we limit outsourced computations to 1-hop neighbors to confirm and utilize this model.

### 3.3. Use Model and Applications
SocialCloud is envisioned for compute-intensive applications that have been developed using different design principles but lack trust features. Examples include volunteer-based systems like Condor, MOON, Nebula, and SETI@Home. Specific applications that fit our use model include blog analysis, web crawling, social apps (collaborative filtering, image processing, etc.), and scientific computing.