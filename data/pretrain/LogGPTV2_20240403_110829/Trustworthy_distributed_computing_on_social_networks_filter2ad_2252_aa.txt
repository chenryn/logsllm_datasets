title:Trustworthy distributed computing on social networks
author:Abedelaziz Mohaisen and
Huy Tran and
Abhishek Chandra and
Yongdae Kim
IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 7, NO. 3,
JULY-SEPTEMBER 2014
333
Trustworthy Distributed Computing
on Social Networks
Aziz Mohaisen, Member, IEEE, Huy Tran, Abhishek Chandra, Member, IEEE, and
Yongdae Kim, Member, IEEE
Abstract—In this paper we investigate a new computing paradigm, called SocialCloud, in which computing nodes are governed
by social ties driven from a bootstrapping trust-possessing social graph. We investigate how this paradigm differs from existing computing
paradigms, such as grid computing and the conventional cloud computing paradigms. We show that incentives to adopt this paradigm
are intuitive and natural, and security and trust guarantees provided by it are solid. We propose metrics for measuring the utility and
advantage of this computing paradigm, and using real-world social graphs and structures of social traces; we investigate the potential of
this paradigm for ordinary users. We study several design options and trade-offs, such as scheduling algorithms, centralization, and straggler
handling, and show how they affect the utility of the paradigm. Interestingly, we conclude that whereas graphs known in the literature
for high trust properties do not serve distributed trusted computing algorithms, such as Sybil defensesVfor their weak algorithmic properties,
such graphs are good candidates for our paradigm for their self-load-balancing features.
Index Terms—Distributed computing, trust, social computing
Ç
1 INTRODUCTION
CLOUD computing is a new paradigm that overcomes
restrictions of conventional computing systems by
enabling new technological and economical aspects, such
as elasticity and pay-as-you-goVwhich free users from
long-term commitments and obligation towards service
providers. Cloud computing is beneficial for both consumers
and cloud service providers. Despite many benefits this
paradigm provides, it poses several challenges that hinder
its usability [2]. Examples of these challenges include the
need for architectures to support various potential appli-
cations, programming models to address large scale data-
centric computing [3], new applications that benefit from
the architectural and programming models in the cloud, and
the need for strong security and data privacy protection
guarantees [4]. Indeed, both outsider and insider threats to
security and privacy of data in cloud systems are unlimited
[5]. Also, incentives do exist for cloud providers to make
use of users’ data residing in cloud for their own benefits,
for the lack of regulations and enforcing policies [6].
In this paper, we oversee a new computing paradigm,
called SocialCloud. The described paradigm enjoys parts of
the merits provided by the conventional cloud and extends
features of other distributed computing paradigmsVnamely
the grid computing. Imagine the scenario of a computing
. A. Mohaisen is with Verisign Labs, Reston, VA 20190, USA. E-mail:
amohaisen@verisign.com.
. H. Tran and Y. Kim are with Korea Advanced Institute of Science
and Technology, Daejeon, South Korea.
. A. Chandra is with the University of Minnesota, Minneapolis,
MN 55455, USA.
Manuscript received 30 June 2013; revised 3 Oct. 2013; accepted 16 Nov.
2013. Date of publication 11 Dec. 2013; date of current version 17 Sept. 2014.
For information on obtaining reprints of this article, please send e-mail to:
PI:EMAIL, and reference the Digital Object Identifier below.
Digital Object Identifier no. 10.1109/TSC.2013.56
paradigm where users who collectively construct a pool of
resources perform computational tasks on behalf of their
social acquaintance. Our paradigm and model are similar
in many aspects to the conventional grid-computing
paradigm. It exhibits such similarities in that users can
outsource their computational tasks to peers, complemen-
tarily to using friends for storage, which is extensively
studied in literature [7], [8]. Our paradigm is, however,
very unique in many aspects as well. Most importantly, our
paradigm exploits the trust exhibited in social networks as
a guarantee for the good behavior of other ‘‘workers’’ in the
system. Accordingly, the most important component in our
paradigm is the social bootstrapping graph, a graph that
enables recruiting workers used for performing computa-
tion tasks in SocialCloud.
In the recent years, social networks and their appli-
cations in enabling trust
in distributed systems have
seen an increasing attention in the research community
[9], [10], [11], [12], [13]. Problems that are unsolvable in the
cyberspace are becoming solvable using social networks,
for that they possess both algorithmic propertiesVsuch
as connectivityVand trust. These properties are used to
reason about the behavior of benign users in the social
network, and to limit
the misbehavior introduced by
malicious users. Also, these properties are the main feature
used in the design of social network based systems and to
support their efficiency and usability. Most important to
the context of SocialCloud is the aggregate computational
power provided by users who are willing to share their idle
time and available compute cycles [14]. In SocialCloud,
owners of these computing resources are willing to share
their computing resources for their friends, and for a
different economical model than in the conventional cloud
computing paradigmVfully altruistic one. This behavior
makes our work share commonalities with an existing stream
of work on creating computing services through volunteers
1939-1374 Ó 2013 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
334
IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 7, NO. 3,
JULY-SEPTEMBER 2014
[15], [16], although by enabling trust driven from social
networks. Our results hence highlight technical aspects
of this direction and pose challenges for designs options
when using social networks for recruiting such workers
and enabling trust. Assumptions in SocialCloud are not far-
fetched, and the initial results of SocialCloud have attracted
media attention [17], [18], [19], [20] justifying its potential
use and acceptance.
1.1 Contribution
The contribution of this paper is twofold:
.
.
First, we investigate the potential of the social cloud
computing paradigm by introducing a design that
bootstraps from social graphs to construct distrib-
uting computing services. We advocate the merits of
this paradigm over existing ones such as the grid
computing paradigm.
Second, we verify the potential of our paradigm
using simulation set-up and real-world social graphs
with varying social characteristics that reflect different,
and possibly contradicting,
trust models. Both
graphs and the simulator are made public [21] to
the community to make use of them, and improve
by additional features.
1.2 Organization
The organization of this paper is as follows. In Section 2 we
argue for the case of our paradigm. In Section 3 we review
the preliminaries of this work. In Section 4, we introduce
the main design, including an intensive discussion on the
design options. In Section 5, we describe our simulator
used for verifying the performance aspects of our design.
In Section 6 we introduce the main results and detailed
analyses and discussion of the design options, their benefits,
and limitations. In Section 7, we summarize some of the
related work, including work on using social networks for
building trustworthy computing services. In Section 8,
we conclude and suggest some of the future work and
directions that would be interesting to explore.
2 THE CASE FOR SOCIALCLOUD
In this paper, we look at the potential of using unstructured
social graphs for building distributed computing systems.
These systems are proposed with several anticipated
benefits in mind. First, such systems would exploit locality
of data based on the applications they are intended for,
under the assumption that the data would be stored at
multiple locations and shared among users represented in
the social networkVc.f. Section 3.3 and [15] for concrete
examples of such applications. This is in fact not a far-
fetched assumption. For example, consider a co-authorship
social graph, like the one used in our experiments, where the
SocialCloud is proposed for deployment. In that scenario, data
on which computations are to be performed is likely to be at
multiple locations; on machines of research collaborators,
co-authors, or previous co-authors. Even for some online
social networks, the assumption and achieved benefits are
not far-fetched as well, considering that friends would have
similar interests, and likely to have contents replicated across
different machines, which could be potentially of interest to
use in our computing paradigm. Examples of such settings
include photos taken at parties, videosVfor image proces-
sing applications, among others.
The second advantage of this paradigm is its trust-
worthiness. In the recent literature, there has been a lot of
interest in the distributed computing community for exploit-
ing social networks to perform trustworthy computations.
Examples of these literature works include exploiting social
networks for cryptographic signing services [22], Sybil
defenses (i.e., addressing attacks in which a single node
creates multiple identities and tries to act as if it is multiple
nodes to tamper with the normal operation of a distributed
system) [11], [23], and routing in many settings including
the delay tolerant networks [24], [25]. In all of these cases,
along with the algorithmic property in these social networks,
the built designs exploit the trust in social networks. The trust
in these networks rationalizes the assumption of collaboration
in these built system, and the tendency of nodes in the
network to act according to the intended protocol with the
theorized guarantees. Same as in all of these applications,
SocialCloud tries to exploit the trust aspect of the social
network, and thus it is easy to reason about the behavior
of nodes in this paradigm (c.f. Section 3.2).
Related to trust exhibited in the social fabric utilized in
our paradigm, the third advantage is that it is also easy to
reason about the recruitment of workers. In this context,
workers are nodes that are willing to perform computing
tasks for other nodes (tasks outsourcers). This feature, when
associated with the aforementioned trust, is quite advanta-
geous when compared to the challenge of performing
trustworthy computing on dedicated workers in the conven-
tional grid-computing paradigm, where it is hard to recruit
such workers. Finally, our design oversees an altruistic
model of SocialCloud, where nodes participate in the system
and do not expect in return. Further details on this model
are in Section 3.2.
2.1 Grid vs Cloud Computing
While the SocialCloud uses a similar paradigm to that of
the grid computing paradigmVin the sense that both try
to outsource computations and use high aggregate com-
putational resources, the SocialCloud is slightly different.
Here we use the comparison features of grid and cloud
computing paradigms listed in [4]. In particular, in the
SocialCloud, there is a pre-defined relationship between the
task outsourcer and the computing worker, which does
not exist in the grid-computing paradigm. We limit the
computations to 1-hop neighbors, which further improve
trustworthiness of computations in our model, and proves
to be effective as shown in Section 6.5.3. We invasion that
our system combines the application oriented paradigm from
the grid computing paradigm, and the service computing
paradigm from the cloud computing, although at an altruistic
economical model supported by the social relationships
among computations outsourcers and works. Architecture-
wise, SocialCloud uses similar structure like grid-computing,
by not having a unified infrastructure [4]. We invasion also
the programming and application models of SocialCloud
to be closer to grid computing, in which process-based
computing is enabled, rather than cloud computing in which
MOHAISEN ET AL.: TRUSTWORTHY DISTRIBUTED COMPUTING ON SOCIAL NETWORKS
335
the unified infrastructure requires dedicated programming
models. Security and trustworthiness provided by Social-
Cloud is unique, and exhibits similar characteristics to trusted
cloud computing paradigms than the trust used in traditional
grid computing.
3 ASSUMPTIONS AND SETTINGS
In this section, we review the preliminaries required for
understanding the rest of this paper. In particular, we
elaborate on the social networks, their popularity, and their
potential for being used as bootstrapping tools for systems,
services, and protocols. We describe the social network
formulation at a high level, the economical aspect of our
system, and finally, the attacker model.
3.1 Social GraphsVHigh Level Description
In this paper we view the social network as an undirected
and unweighted graph G ¼ ðV; EÞ, where V ¼ fv1; . . . ; vng
is the set of vertexes, representing the set of nodes in
the social graph, and correspond to users (or computing
machines), and E ¼ feijg (where 1  i  n and 1  j  n) is
the set of edges connecting those verticesVwhich implies
that nodes associated with the social ties are willing to
perform computations for each other. jV j ¼ n denotes the
size of G and jEj ¼ m denotes the number of edges in G.
In the rest of the paper, social network, network, and graph
are used interchangeably to refer to both the physical
computing network and the underlying bootstrapping
social graph, and the meaning depends on the context.
Also, we refer to computing entities associated with users
in the social network as nodes.
3.2 Economics of SocialCloud
In our design we assume an altruistic model, which
simplifies the behavior of users and arguments on the
attacker model. In this altruistic model, users in the social
network donate their computing resourcesVwhile not using
themVto other users in the social network to use them for
specific computational tasks. In return, the same users who
donated their resources for others would anticipate others
as well to perform their computations on behalf of them
when needed.
One can further improve this model. Social networks are
rich of trust characteristics that capture additional features,
and can be used to rationalize this model in several ways.
For example, trust in social networks, a well studied vein of
research in this context [26], can be used to adjust this
model so as users would bind their participation in
computations to trust values that they assign to other
users. In this work, to make use of and confirm this model,
we limit outsourced computations at 1-hop.
3.3 Use Model and Applications
For our paradigm, we envision compute intensive applica-
tions for which other systems have been developed in the
past using different design principles, but lacking trust
features. These systems include ones with resources
provided by volunteers, as well as grid-like systems, like
in Condor [27], MOON [28], Nebula [16], and SETI@Home
[29]. Specific examples of applications built on top of these
systems, that would as well fit to our use model, include
blog analysis [15], web crawling and social apps (collaborative
filtering, image processing, etc) [30], scientific computing [31],