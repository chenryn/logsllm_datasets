USENIX Association
29th USENIX Security Symposium    685
represented by v2 [4]. CoreCSP allows us to readily formalize
the intuition of a consistent policy, i.e., a policy that enforces
the same restrictions across all browsers.
Deﬁnition 1 (Consistent Policy). The policy of the Web page
w is consistent for the set of browsers B if and only if, for all
b1,b2 ∈ B, we have(cid:74)w(cid:75)b1 (cid:118)(cid:74)w(cid:75)b2 and(cid:74)w(cid:75)b2 (cid:118)(cid:74)w(cid:75)b1.
Example 1. Consider a Web site which only relies on XFO
for framing control, specifying the policy:
ALLOW-FROM https://www.example.com
This policy is inconsistent, because it restricts framing in
Edge, but leaves Chrome users completely unprotected.3 To
improve protection, the Web site might then additionally spec-
ify a CSP of the following form:
frame-ancestors https://www.example.com
The revised framing control policy is consistent for Edge and
Chrome since CSP takes precedence over XFO. Hence, the
users of these two browsers are equally protected.
Though consistency is undoubtedly a desirable property
of policies, there might be practical reasons why real-world
framing control policies are inconsistent. In particular, the
limited expressiveness of XFO complicates the deployment of
useful policies, which instead are trivial to specify using CSP,
e.g., enabling framing from multiple origins or arbitrary sub-
domains of a trusted domain. Operators can work around this
limitation by shipping different ALLOW-FROM directives to
different pages through Referer snifﬁng, yet this requires the
implementation of additional logic. We thus see pragmatic
reasons why XFO and CSP headers might contain mismatches
leading to inconsistencies, but (luckily) we also notice that
not all the inconsistencies are equally dangerous. We provide
an example below.
Example 2. Assume that https://www.example.com only
relies on CSP for framing control, specifying the policy:
frame-ancestors https://*.example.com
This policy is inconsistent, because it restricts framing in
Chrome, but does not protect the users of legacy browsers
without CSP support. To improve protection, the Web site
might then additionally specify an XFO policy of the form:
SAMEORIGIN
The revised policy is still inconsistent, yet it provides tighter
security than the original one and is straightforward to deploy,
so it might be more appealing for Web developers. Note that
since the XFO policy is less permissive than the CSP policy,
this might lead to compatibility issues in legacy browsers, e.g.,
if framing is required from https://mail.example.com,
yet users of such browsers are protected against click-jacking.
3For details on the exact support for XFO and CSP in major browsers,
see Section 4.2.
By elaborating on the previous example, we identify a new
class of policies that has a useful property: legacy browsers
are all in agreement on how the policy should be enforced,
all modern browsers also share the same policy interpreta-
tion, but legacy browsers might be more conservative than
modern browsers. This ensures that users of legacy browsers
are protected and that no inconsistency arises among users
of modern browsers, yet users of legacy browsers might be
affected by compatibility issues. Formally, this is formulated
by the following deﬁnition.
Deﬁnition 2 (Security-Oriented Policy). The policy of the
Web page w is security-oriented for the set of browsers B if
and only if it is possible to partition B in two sets Bl,Bm such
that all these properties hold true:
• Bl only includes legacy browsers and Bm only includes
modern browsers;
• the policy of w is consistent for both Bl and Bm;
• for all b1 ∈ Bl and b2 ∈ Bm we have(cid:74)w(cid:75)b1 (cid:118)(cid:74)w(cid:75)b2.
The last class of policies we consider still arises from the
expressiveness gap between XFO and CSP yet makes the
opposite choice of security-oriented policies: while it is still
true that legacy browsers all give the same semantics to the
policy, as well as modern browsers, the policy interpretation
given by legacy browsers might be more liberal than one
of the modern browsers. This ensures that users of legacy
browsers can access the Web application without compati-
bility issues and that no inconsistency arises among users
of modern browsers. Nevertheless, users of legacy browsers
might be left unprotected.
Deﬁnition 3 (Compatibility-Oriented Policy). The policy
of the Web page w is compatibility-oriented for the set of
browsers B if and only if it is possible to partition B in two
sets Bl,Bm such that all these properties hold true:
• Bl only includes legacy browsers and Bm only includes
modern browsers;
• the policy of w is consistent for both Bl and Bm;
• for all b1 ∈ Bl and b2 ∈ Bm we have(cid:74)w(cid:75)b2 (cid:118)(cid:74)w(cid:75)b1.
Example 3. The original policy of Example 2 is inconsistent,
yet compatibility-oriented. It is an insecure policy, but it might
be a plausible choice for Web developers who are particularly
concerned about compatibility with legacy browsers not sup-
porting CSP, where no restriction is actually enforced. Instead,
the original policy of Example 1 is not even compatibility-
oriented, since two modern browsers like Chrome and Edge
give different interpretations to the policy, due to Chrome’s
lack of support for ALLOW-FROM.
686    29th USENIX Security Symposium
USENIX Association
To summarize, we argue that consistency is the most desir-
able property for framing control policies since it implies the
same policy interpretation in all browsers. Security-oriented
policies can offer a proper level of protection on legacy
browsers but might introduce compatibility issues with them.
Compatibility-oriented policies might sacriﬁce protection on
legacy browsers, but are backward compatible with them and
thus potentially appealing to Web developers. Observe that a
policy is consistent if and only if it is both security-oriented
and compatibility-oriented.
Inconsistent policies which are neither security-oriented
nor compatibility-oriented are generally hard to justify as
correct because they fall in one of the following cases:
• two legacy browsers interpret the policy differently;
• two modern browsers interpret the policy differently;
• none of the above is true, yet legacy browsers and mod-
ern browsers give two incomparable interpretations of
the same policy.
We refer to such policies as unduly inconsistent.
4 Policy Analyzer
We designed and implemented FRAMECHECK, an automated
analyzer of framing control policies based on our theory.
Given a URL to analyze, FRAMECHECK produces a security
report on its state of click-jacking protection. We explain the
details of the analyzer in the rest of this section.
4.1 FRAMECHECK Description
Our tool is parametric with respect to a set of browsers B.
Each browser b ∈ B is characterized by two ingredients:
1. its user-agent string UAb, deﬁning how the browser
presents itself to Web applications;
list of HTTP headers into a directive value of CoreCSP.
2. the semantics(cid:74)·(cid:75)b, expressed as a function translating a
developers’ tools. At the same time, the semantics(cid:74)·(cid:75)b can
The user-agent string UAb can be easily found by inspect-
ing the HTTP requests sent by the browser, e.g., using the
be identiﬁed either by manual source code inspection (in the
case of open-source browsers) or by reverse-engineering.
Type
Browser Name
Chrome
Desktop
Chrome for Android Mobile
Desktop
Edge
Firefox
Desktop
Desktop
Internet Explorer
Mobile
Opera Mini
Desktop
Safari
Safari for iOS
Mobile
Mobile
Samsung Internet
UC Browser
Mobile
Version Market
∼ 23%
∼ 35%
∼ 2%
∼ 4%
∼ 2%
∼ 1%
∼ 2%
∼ 10%
∼ 3%
∼ 3%
76
76
18
69
11
44.1
12.3
12.3
10.1
12.12
Table 2: Browsers considered in the present study
set of browsers under study is shown in Table 2: only two
browsers do not support framing control via CSP, i.e., Internet
Explorer and Opera Mini, which we deem as legacy. Note
that, according to Can I Use, Opera Mini does not support
any mechanism for framing control. However, we installed
the latest available version from the Google Play Store, and,
according to our tests, Opera Mini, in fact, supports XFO.
Given a Web page w to analyse, FRAMECHECK ﬁrst ac-
cesses w once for each b ∈ B, sending the corresponding
user-agent string UAb. Since w may redirect requests from
different browsers to different landing pages, e.g., to provide
a mobile-friendly variant of the page, this process eventually
identiﬁes a set of pairs of the form (Bi,wi), where Bi ⊆ B and
wi is the landing page of w for each b j ∈ Bi. For each iden-
b j ∈ Bi and produces a security report on policy consistency
based on the deﬁnitions in Section 3.
tiﬁed pair (Bi,wi), FRAMECHECK computes(cid:74)wi(cid:75)b j for each
4.2 Test Cases
In total, we developed more than 40 test cases to reconstruct
the semantics of the underspeciﬁed XFO header in our set
of browsers. We designed the test cases through a careful
analysis of the XFO speciﬁcation [9] and a preliminary in-
spection of a large set of framing control policies collected
in the wild by a simple crawler. Hence, the test cases are not
esoteric examples of problems that might possibly arise in
theory, but rather represent classes of potentially ambiguous
policies that we observed in practice. We report below on the
most interesting ﬁndings.
Our implementation supports the 10 most popular browsers
according to data from Can I Use.4 For each browser, we
downloaded the latest available version with at least 1%
of market share5 and we reverse-engineered its semantics
through an exhaustive set of test cases (see Section 4.2). The
4https://caniuse.com
5Note that Chrome derivates like Brave also show their UA as Chrome,
leading to a slight over-approximation of Chrome usage.
4.2.1 Support for ALLOW-FROM
Though it is widely known that Chrome does not support
ALLOW-FROM, it turns out that only 3 out of 10 browsers
actually support this XFO directive: Edge, Firefox6 and Inter-
net Explorer. This means that every Web page which adopts
6During our project, Firefox dropped support for ALLOW-FROM in
version 70. We discuss the impact of this recent change in Section 5.4.
USENIX Association
29th USENIX Security Symposium    687
the ALLOW-FROM directive, but does not deploy a corre-
sponding CSP, implements inconsistent protection against
click-jacking and leaves (at least) 7 browsers unprotected.
We also tested what happens when the ALLOW-FROM
directive is not followed by a valid serialized origin (e.g.,
https://example.com), as mandated by the XFO speciﬁca-
tion. In all the cases we tested, the browser implementations
were conservative and denied framing, thus behaving as in
the case of the DENY directive. There is one exception to
this rule, though: Edge also supports the use of ALLOW-
FROM with a hostname like example.com (without scheme).
The corresponding interpretation is the following: if the pol-
icy is applied to an HTTP page, framing is allowed from
example.com over both HTTP and HTTPS; if instead, the
policy is applied to an HTTPS page, framing is only allowed
from https://example.com. This interpretation is sensible
from a security perspective because it mimics the behavior
of source expressions in the CSP speciﬁcation. However, it
is worth noting that this introduces room for inconsistencies
with other browsers, where framing is denied if the provided
value is not a proper origin.
4.2.2 Support for Multiple Headers
When the same Web page sends multiple XFO headers, most
of the tested browsers simultaneously enforce all of them:
this is the case for 7 out of 10 browsers. Unfortunately, we
observed that Edge, Internet Explorer and Opera Mini only en-
force the ﬁrst header and discard the other ones, which might
lead to inconsistencies. For example, consider the following
two headers:
X-Frame-Options: SAMEORIGIN
X-Frame-Options: DENY
This policy prevents framing in most browsers, since two di-
rectives are simultaneously enforced, and one of them denies
framing. However, this policy allows same-origin framing in
Edge, Internet Explorer and Opera Mini. Observe that this
policy would not have been inconsistent if the two headers
had been swapped.
4.2.3 Parsing of Header Values
The HTTP protocol speciﬁcation in RFC 7230 mandates that
it must be possible to replace multiple headers with the same
name with a single header that includes a comma-separated
list of the header values [8]. Therefore, the standard implies
that browsers must be able to handle headers of the following
form correctly:
X-Frame-Options: SAMEORIGIN, DENY
This policy prevents framing in most browsers since it is in-
terpreted as two headers, one of which denies framing (see
above). However, we discovered unexpected behaviors in 3
browsers: Edge, Internet Explorer and Opera Mini. In particu-
lar, we observed that these browsers do not split the header
value on commas and rather parse the list as a single value,
which is interpreted as a non-existing directive, i.e., not en-
forcing any framing restriction. This also happens when the
same directive is repeated multiple times, such as in the case
of DENY, DENY. This behavior has a particularly subtle impli-
cation on the interpretation of policies like:
X-Frame-Options: ALLOW-FROM , 
Firefox parses this policy as two separate headers, one allow-
ing framing from the ﬁrst origin and the other one containing
an incorrect value, which does not enforce any framing re-
striction: as a result, framing is only allowed from the ﬁrst
origin. Internet Explorer, instead, blocks every form of fram-
ing, since ALLOW-FROM is not set to a serialized origin.
Remarkably, none of these two interpretations matches what
the Web developer likely had in mind, i.e., whitelisting two
different origins.
4.2.4 Double Framing Protection
Finally, we observed that most browsers implement XFO in a
way that is robust against double framing attacks. This shows
that current implementation practices had improved since the
original XFO speciﬁcation when all browsers used to perform
origin checks for framing based on the top-level browsing
context alone [9]. However, there are still 3 browsers that are
susceptible to double framing attacks: Edge, Internet Explorer,
and UC Browser.
In the rest of the paper, we do not consider inconsistencies
arising from double framing, because otherwise even trivial
XFO policies like SAMEORIGIN would be considered inconsis-
tent and bias our study. This also implies that we do not need
to take the full browsing context into account when deﬁning
the semantics of framing control policies in our framework,
which is useful to keep the presentation simple.
4.2.5 Summary
The summary of our analysis is shown in Table 3. Based on