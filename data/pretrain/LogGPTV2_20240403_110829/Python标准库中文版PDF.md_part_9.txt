(可选, 2.0 及以后版本) gc 模块提供了到内建循环垃圾收集器的接口.
Python 使用引用记数来跟踪什么时候销毁一个对象; 一个对象的最后一个引用
一旦消失, 这个对象就会被销毁.
从 2.0 版开始, Python 还提供了一个循环垃圾收集器, 它每隔一段时间执行.
这个收集器查找指向自身的数据结构, 并尝试破坏循环. 如 Example 1-87 所
示.
你可以使用 gc.collect 函数来强制完整收集. 这个函数将返回收集器销毁的
对象的数量.
1.17.0.1. Example 1-87. 使用 gc 模块收集循环引用垃圾
File: gc-example-1.py
import gc
# create a simple object that links to itself
class Node:
def _ _init_ _(self, name):
self.name = name
self.parent = None
self.children = []
def addchild(self, node):
node.parent = self
self.children.append(node)
def _ _repr_ _(self):
return "" % (repr(self.name), id(self))
# set up a self-referencing structure
root = Node("monty")
root.addchild(Node("eric"))
root.addchild(Node("john"))
root.addchild(Node("michael"))
# remove our only reference
del root
print gc.collect(), "unreachable objects"
print gc.collect(), "unreachable objects"
12 unreachable objects
0 unreachable objects
如果你确定你的程序不会创建自引用的数据结构, 你可以使用 gc.disable 函
数禁用垃圾收集, 调用这个函数以后, Python 的工作方式将与 1.5.2 或更早
的版本相同.
2. 更多标准模块
"Now, imagine that your friend kept complaining that she didn't want to
visit you since she found it too hard to climb up the drain pipe, and you
kept telling her to use the friggin' stairs like everyone else..."
- eff-bot, June 1998
2.1. 概览
本章叙述了许多在 Python 程序中广泛使用的模块. 当然, 在大型的 Python
程序中不使用这些模块也是可以的, 但如果使用会节省你不少时间.
2.1.1. 文件与流
fileinput 模块可以让你更简单地向不同的文件写入内容. 该模块提供了一个
简单的封装类, 一个简单的 for-in 语句就可以循环得到一个或多个文本文件
的内容.
StringIO 模块 (以及 cStringIO 模块, 作为一个的变种) 实现了一个工作在
内存的文件对象. 你可以在很多地方用 StringIO 对象替换普通的文件对象.
2.1.2. 类型封装
UserDict , UserList , 以及 UserString 是对应内建类型的顶层简单封装. 和
内建类型不同的是, 这些封装是可以被继承的. 这在你需要一个和内建类型行
为相似但由额外新方法的类的时候很有用.
2.1.3. 随机数字
random 模块提供了一些不同的随机数字生成器. whrandom 模块与此相似, 但
允许你创建多个生成器对象.
[!Feather 注: whrandom 在版本 2.1 时声明不支持. 请使用 random 替代.]
2.1.4. 加密算法
md5 和 sha 模块用于计算密写的信息标记( cryptographically strong
message signatures , 所谓的 "message digests", 信息摘要).
crypt 模块实现了 DES 样式的单向加密. 该模块只在 Unix 系统下可用.
rotor 模块提供了简单的双向加密. 版本 2.4 以后的朋友可以不用忙活了.
[!Feather 注: 它在版本 2.3 时申明不支持, 因为它的加密运算不安全.]
2.2. fileinput 模块
fileinput 模块允许你循环一个或多个文本文件的内容, 如 Example 2-1 所
示.
2.2.0.1. Example 2-1. 使用 fileinput 模块循环一个文本文件
File: fileinput-example-1.py
import fileinput
import sys
for line in fileinput.input("samples/sample.txt"):
sys.stdout.write("-> ")
sys.stdout.write(line)
-> We will perhaps eventually be writing only small
-> modules which are identified by name as they are
-> used to build larger ones, so that devices like
-> indentation, rather than delimiters, might become
-> feasible for expressing local structure in the
-> source language.
-> -- Donald E. Knuth, December 1974
你也可以使用 fileinput 模块获得当前行的元信息 (meta information). 其
中包括 isfirstline , filename , lineno , 如 Example 2-2 所示.
2.2.0.2. Example 2-2. 使用 fileinput 模块处理多个文本文件
File: fileinput-example-2.py
import fileinput
import glob
import string, sys
for line in fileinput.input(glob.glob("samples/*.txt")):
if fileinput.isfirstline(): # first in a file?
sys.stderr.write("-- reading %s --\n" % fileinput.filename())
sys.stdout.write(str(fileinput.lineno()) + " " +
string.upper(line))
-- reading samples\sample.txt --
1 WE WILL PERHAPS EVENTUALLY BE WRITING ONLY SMALL
2 MODULES WHICH ARE IDENTIFIED BY NAME AS THEY ARE
3 USED TO BUILD LARGER ONES, SO THAT DEVICES LIKE
4 INDENTATION, RATHER THAN DELIMITERS, MIGHT BECOME
5 FEASIBLE FOR EXPRESSING LOCAL STRUCTURE IN THE
6 SOURCE LANGUAGE.
7 -- DONALD E. KNUTH, DECEMBER 1974
文本文件的替换操作很简单. 只需要把 inplace 关键字参数设置为 1 , 传递
给 input 函数, 该模块会帮你做好一切. Example 2-3 展示了这些.
2.2.0.3. Example 2-3. 使用 fileinput 模块将 CRLF 改为 LF
File: fileinput-example-3.py
import fileinput, sys
for line in fileinput.input(inplace=1):
# convert Windows/DOS text files to Unix files
if line[-2:] == "\r\n":
line = line[:-2] + "\n"
sys.stdout.write(line)
2.3. shutil 模块
shutil 实用模块包含了一些用于复制文件和文件夹的函数. Example 2-4 中使
用的 copy 函数使用和 Unix 下 cp 命令基本相同的方式复制一个文件.
2.3.0.1. Example 2-4. 使用 shutil 复制文件
File: shutil-example-1.py
import shutil
import os
for file in os.listdir("."):
if os.path.splitext(file)[1] == ".py":
print file
shutil.copy(file, os.path.join("backup", file))
aifc-example-1.py
anydbm-example-1.py
array-example-1.py
...
copytree 函数用于复制整个目录树 (与 cp -r 相同), 而 rmtree 函数用于删
除整个目录树 (与 rm -r ). 如 Example 2-5 所示.
2.3.0.2. Example 2-5. 使用 shutil 模块复制/删除目录树
File: shutil-example-2.py
import shutil
import os
SOURCE = "samples"
BACKUP = "samples-bak"
# create a backup directory
shutil.copytree(SOURCE, BACKUP)
print os.listdir(BACKUP)
# remove it
shutil.rmtree(BACKUP)
print os.listdir(BACKUP)
['sample.wav', 'sample.jpg', 'sample.au', 'sample.msg', 'sample.tgz',
...
Traceback (most recent call last):
File "shutil-example-2.py", line 17, in ?
print os.listdir(BACKUP)
os.error: No such file or directory
2.4. tempfile 模块
Example 2-6 中展示的 tempfile 模块允许你快速地创建名称唯一的临时文件
供使用.
2.4.0.1. Example 2-6. 使用 tempfile 模块创建临时文件
File: tempfile-example-1.py
import tempfile
import os
tempfile = tempfile.mktemp()
print "tempfile", "=>", tempfile
file = open(tempfile, "w+b")
file.write("*" * 1000)
file.seek(0)
print len(file.read()), "bytes"
file.close()
try:
# must remove file when done
os.remove(tempfile)
except OSError:
pass
tempfile => C:\TEMP\~160-1
1000 bytes
TemporaryFile 函数会自动挑选合适的文件名, 并打开文件, 如 Example 2-7
所示. 而且它会确保该文件在关闭的时候会被删除. (在 Unix 下, 你可以删除
一个已打开的文件, 这时文件关闭时它会被自动删除. 在其他平台上, 这通过
一个特殊的封装类实现.)
2.4.0.2. Example 2-7. 使用 tempfile 模块打开临时文件
File: tempfile-example-2.py
import tempfile
file = tempfile.TemporaryFile()
for i in range(100):
file.write("*" * 100)
file.close() # removes the file!
2.5. StringIO 模块
Example 2-8 展示了 StringIO 模块的使用. 它实现了一个工作在内存的文件
对象 (内存文件). 在大多需要标准文件对象的地方都可以使用它来替换.
2.5.0.1. Example 2-8. 使用 StringIO 模块从内存文件读入内容
File: stringio-example-1.py
import StringIO
MESSAGE = "That man is depriving a village somewhere of a computer
scientist."
file = StringIO.StringIO(MESSAGE)
print file.read()
That man is depriving a village somewhere of a computer scientist.
StringIO 类实现了内建文件对象的所有方法, 此外还有 getvalue 方法用来返
回它内部的字符串值. Example 2-9 展示了这个方法.
2.5.0.2. Example 2-9. 使用 StringIO 模块向内存文件写入内容
File: stringio-example-2.py
import StringIO
file = StringIO.StringIO()
file.write("This man is no ordinary man. ")
file.write("This is Mr. F. G. Superman.")
print file.getvalue()
This man is no ordinary man. This is Mr. F. G. Superman.
StringIO 可以用于重新定向 Python 解释器的输出, 如 Example 2-10 所示.
2.5.0.3. Example 2-10. 使用 StringIO 模块捕获输出
File: stringio-example-3.py
import StringIO
import string, sys
stdout = sys.stdout
sys.stdout = file = StringIO.StringIO()
print """
According to Gbaya folktales, trickery and guile
are the best ways to defeat the python, king of
snakes, which was hatched from a dragon at the
world's start. -- National Geographic, May 1997
"""
sys.stdout = stdout
print string.upper(file.getvalue())
ACCORDING TO GBAYA FOLKTALES, TRICKERY AND GUILE
ARE THE BEST WAYS TO DEFEAT THE PYTHON, KING OF
SNAKES, WHICH WAS HATCHED FROM A DRAGON AT THE
WORLD'S START. -- NATIONAL GEOGRAPHIC, MAY 1997
2.6. cStringIO 模块
cStringIO 是一个可选的模块, 是 StringIO 的更快速实现. 它的工作方式和
StringIO 基本相同, 但是它不可以被继承. Example 2-11 展示了 cStringIO
的用法, 另参考前一节.
2.6.0.1. Example 2-11. 使用 cStringIO 模块
File: cstringio-example-1.py
import cStringIO
MESSAGE = "That man is depriving a village somewhere of a computer
scientist."
file = cStringIO.StringIO(MESSAGE)
print file.read()
That man is depriving a village somewhere of a computer scientist.
为了让你的代码尽可能快, 但同时保证兼容低版本的 Python ,你可以使用一个
小技巧在 cStringIO 不可用时启用 StringIO 模块, 如 Example 2-12 所示.
2.6.0.2. Example 2-12. 后退至 StringIO
File: cstringio-example-2.py
try:
import cStringIO
StringIO = cStringIO
except ImportError:
import StringIO
print StringIO
2.7. mmap 模块
(2.0 新增) mmap 模块提供了操作系统内存映射函数的接口, 如 Example 2-13
所示. 映射区域的行为和字符串对象类似, 但数据是直接从文件读取的.
2.7.0.1. Example 2-13. 使用 mmap 模块
File: mmap-example-1.py
import mmap
import os
filename = "samples/sample.txt"
file = open(filename, "r+")
size = os.path.getsize(filename)
data = mmap.mmap(file.fileno(), size)
# basics
print data
print len(data), size
# use slicing to read from the file
# 使用切片操作读取文件
print repr(data[:10]), repr(data[:10])
# or use the standard file interface
# 或使用标准的文件接口
print repr(data.read(10)), repr(data.read(10))
302 302
'We will pe' 'We will pe'
'We will pe' 'rhaps even'
在 Windows 下, 这个文件必须以既可读又可写的模式打开( `r+` , `w+` , 或
`a+` ), 否则 mmap 调用会失败.
[!Feather 注: 经本人测试, a+ 模式是完全可以的, 原文只有 r+ 和 w+]
Example 2-14 展示了内存映射区域的使用, 在很多地方它都可以替换普通字符
串使用, 包括正则表达式和其他字符串操作.
2.7.0.2. Example 2-14. 对映射区域使用字符串方法和正则表达式
File: mmap-example-2.py
import mmap
import os, string, re
def mapfile(filename):
file = open(filename, "r+")
size = os.path.getsize(filename)
return mmap.mmap(file.fileno(), size)
data = mapfile("samples/sample.txt")
# search
index = data.find("small")
print index, repr(data[index-5:index+15])
# regular expressions work too!
m = re.search("small", data)
print m.start(), m.group()
43 'only small\015\012modules '
43 small
2.8. UserDict 模块
UserDict 模块包含了一个可继承的字典类 (事实上是对内建字典类型的
Python 封装).
Example 2-15 展示了一个增强的字典类, 允许对字典使用 "加/+" 操作并提供
了接受关键字参数的构造函数.
2.8.0.1. Example 2-15. 使用 UserDict 模块
File: userdict-example-1.py
import UserDict
class FancyDict(UserDict.UserDict):
def _ _init_ _(self, data = {}, **kw):
UserDict.UserDict._ _init_ _(self)
self.update(data)
self.update(kw)
def _ _add_ _(self, other):
dict = FancyDict(self.data)
dict.update(b)
return dict
a = FancyDict(a = 1)
b = FancyDict(b = 2)
print a + b
{'b': 2, 'a': 1}
2.9. UserList 模块
UserList 模块包含了一个可继承的列表类 (事实上是对内建列表类型的
Python 封装).
在 Example 2-16 中, AutoList 实例类似一个普通的列表对象, 但它允许你通
过赋值为列表添加项目.
2.9.0.1. Example 2-16. 使用 UserList 模块
File: userlist-example-1.py
import UserList
class AutoList(UserList.UserList):
def _ _setitem_ _(self, i, item):
if i == len(self.data):
self.data.append(item)
else:
self.data[i] = item
list = AutoList()
for i in range(10):
list[i] = i
print list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
2.10. UserString 模块
(2.0 新增) UserString 模块包含两个类, UserString 和 MutableString . 前
者是对标准字符串类型的封装, 后者是一个变种, 允许你修改特定位置的字符
(联想下列表就知道了).
注意 MutableString 并不是效率很好, 许多操作是通过切片和字符串连接实现
的. 如果性能很对你的脚本来说重要的话, 你最好使用字符串片断的列表或者
array 模块. Example 2-17 展示了 UserString 模块.
2.10.0.1. Example 2-17. 使用 UserString 模块
File: userstring-example-1.py
import UserString
class MyString(UserString.MutableString):
def append(self, s):
self.data = self.data + s
def insert(self, index, s):
self.data = self.data[index:] + s + self.data[index:]
def remove(self, s):
self.data = self.data.replace(s, "")
file = open("samples/book.txt")
text = file.read()