tacker IPs can easily dominate the new table but cannot evict
legitimate reachable IPs from the tried table. This suggests
that if we increase the legitimate IPs in tried table or priori-
tize IPs from tried table for peer selection, the chance for
selecting the attacker’s peers will be signiﬁcantly lowered.
Taking this observation as the guiding light, we ﬁnd three
new tweaks, i.e., always select IPs from tried table, tried
table reduction, and feeler interval reduction. First, in Step ➄
in Figure 1, when selecting an IP address for an outgoing con-
nection, Bitcoin nodes should always select from the tried
table (if tried table has sufﬁcient IPs) (T4), instead of ran-
domly selecting from either new or tried tables. This re-
quires the attacker to spend signiﬁcantly more time waiting
for IP promotion and removes the risk of selecting attacker
IPs from new table. Second, because reachable legitimate
nodes cannot be removed from tried table, we should re-
duce the tried table size (T5) so that the number of empty
slots occupied by the adversary is minimized. Particularly, the
tried table (consists of 16 thousand slots currently) should
be well-aligned with the number of reachable Bitcoin nodes
in the system (about 8 thousand nodes). Note that we do
not suggest reducing the new table’s size as in the original
Erebus paper because the attacker can easily replace the ma-
jority of the unreachable IPs in new table anyway. Third, the
promotion rate can be increased (i.e., by reducing the feeler
connection interval) (T6) so that there are more legitimate
reachable IPs in the tried table. However, this tweak may
be beneﬁcial for the attacker if there are too many empty slots
because attacker IPs will also be inserted quicker.
1256    30th USENIX Security Symposium
USENIX Association
Table 1: Bitcoin protocol tweaks. T1–T3 are previously proposed while T4–T6 are newly derived from the IP life cycle.
Name
Description
Objective
Caveat
Status
ASN-based
grouping (T1)
IP addresses in the two tables are
grouped based on their AS number,
instead of preﬁx (/16 for IPv4 or /32
for IPv6).
To reduce attacker IPs in the tables, as they usu-
ally belong to fewer ASes than they do to preﬁx
groups.
Effectiveness may be insigniﬁ-
cant [21, 57].
Proposed in [57] and in-
cluded in Bitcoin as a non-
default, under-testing option
since version 0.20.0.
Anchor
connection (T2)
Upon rebooting, some last-known
outgoing peers, called anchors, are
re-connected.
To mitigate a common strategy of eclipse at-
tacks [27, 57] that removes all existing connec-
tions of the victim via rebooting it.
Attacker IPs can also be se-
lected as anchors.
Proposed in [27] and being
developed [52].
More outgoing
connections
(T3)
Always select
IPs from tried
table (T4)
Tried table
size reduction
(T5)
Feeler interval
reduction (T6)
The number of outgoing connec-
tions is increased.
To lower the chance of selecting all attacker IPs
as outgoing peers, forcing the attacker to occupy
the database with a higher ratio.
The P2P network will need to
propagate more trafﬁc.
Suggested by [27, 57]. Since
Bitcoin 0.19.0, two outgoing
connections are added.
When selecting an IP address for
outgoing connections, the tried ta-
ble should always be selected.
To force the adversary to spend more time wait-
ing for IP promotion and to remove the risk of
selecting attacker IPs from the new table.
IPs from new table will still
be selected when there are not
many IPs in tried table.
Derived from step ➄ of the
IP life cycle.
The tried table should have a
smaller size so that its space is well-
aligned with the number of nodes in
the system.
To reduce tried slots occupied by the
adversary-chosen IPs when the attack happens
because there is less space and it is impossible
to remove reachable legitimate IPs.
The size should be adjusted ac-
cordingly to the state of the
network.
Derived from step ➂ of the
IP life cycle.
The interval of the feeler connec-
tions is shortened.
To increase legitimate reachable IPs in the
tried table via IP promotion.
If there are many empty slots
in the tried table, attacker
IPs are also inserted quicker.
Derived from step steps ➂,
➃ of the IP life cycle.
3.2 Evaluation of Simple Protocol Tweaks
We now evaluate the discussed simple protocol tweaks.
Evaluation framework. We use the open-source Bitcoin em-
ulator [6], which was used to evaluate the original Erebus
attack [57], to emulate a Bitcoin node’s peer selection. We
also update the emulator to reﬂect the latest Bitcoin version
0.21.0 [13] with a few recent changes; e.g., two out of ten
outgoing connections are used for only block data propaga-
tion. For realistic operations, we feed the emulated node with
the real Bitcoin address advertisements (i.e., addr messages)
containing the real IPs that our live Bitcoin node collected in
380 days (from November 18, 2018, to December 4, 2019).
Upon making an outgoing connection to a peer, the emu-
lated node queries the Bitnodes dataset [59] to check if the
peer is reachable (i.e., it accepts incoming connections) at
that moment in the simulation time. We run our experiments
on a Dell PowerEdge R630 server with 40 cores of Intel(R)
Xeon(R) E5-2640 v4 @ 2.40GHz and 128 GB of memory.
Emulating a Bitcoin node running for 380 days on one CPU
takes about 20–30 minutes on average.
Attack scenarios. We consider the 100 largest ASes in the
current Internet ranked by their customer cone size [9] as
the adversaries, similar to the evaluation of the Erebus at-
tacks [57]. To learn the attacker IPs (i.e., that have the at-
tacker on the victim-to-IP paths), we measure 47.2 million
data-plane paths from 59 globally-distributed nodes to all
800 thousand available IPv4 preﬁxes in the Internet. Those
include 21 nodes hosted at different regions of ﬁve popular
cloud providers (i.e., Amazon, OVH, DigitalOcean, Hetzner,
and Alibaba)2, 26 PlanetLab nodes [46]3, and 12 PEERING
2The majority of Bitcoin nodes are also running on clouds [59].
3We have collected all our results before PlanetLab ofﬁcially closes down
in May 2020.
servers [50]4; refer to Appendix A for more details of our
data-plane route measurement. Considering our measurement
nodes as the victim Bitcoin nodes, we have 5,900 different
attack scenarios.
In each scenario, we execute the Erebus attack against our
emulated node, which runs attack-free for 30 days before the
attack commences. Then, we wait up to 380 days (i.e., our
maximal realistic emulation duration) to measure the required
attack execution time for controlling all outgoing connections
of the victim, i.e., the attack is successful. When we want to
directly estimate the attack success probability with respect to
the actual IP churn rate (i.e., how often Bitcoin nodes change
their IP addresses), we model the online time of the victims
from the actual distribution (see the measured IP churn rate
of Bitcoin nodes in the wild in Appendix B) and compute the
success/failure of each attack attempt.
Tweak implementations. Here, we evaluate six tweaks T1–
T6 in Table 1. To implement T1, we use the Routeviews
Preﬁx-to-AS mapping [12] to map IPs into AS numbers (see
Appendix C for a more sophisticated mapping being imple-
mented by Bitcoin Core). For T2, we follow the conﬁgura-
tion of Bitcoin Core [52] to preserve two block-relay-only
connections across rebooting. To test T3, we add six more
block-relay-only connections (i.e., sixteen outgoing connec-
tions in total) so that the number of outgoing connections
is doubled than before the Erebus attack. When testing T4,
our simulated nodes select outgoing peers from both tables,
then switch to selecting exclusively from the tried table
when 25% of the tried slots are ﬁlled. For T5 and T6, we
reduce the tried table size and the feeler interval by four
times, respectively. We also evaluate the effectiveness of the
4We used all 12 PEERING servers that have the full routing tables, see
https://peering.ee.columbia.edu/peers/ for the list of servers.
USENIX Association
30th USENIX Security Symposium    1257
1
0.8
0.6
0.4
0.2
n
o
i
t
c
n
u
f
n
o
i
t
u
b
i
r
t
s
i
d
e
v
i
t
a
l
u
m
u
C
0
0
50
1
0.8
0.6
0.4
0.2
0
e
t
a
r
s
s
e
c
c
u
s
k
c
a
t
t
A
Baseline
T1
T2
T3
T4
T5
T6
250
300
350
similar network adversaries in Tor P2P networks.
This section ﬁrst explains the rationale for integrating the
routing knowledge into the Bitcoin peer selection for Erebus
mitigation (§4.1). Then, we outline the high-level design of a
RAP defense in the current Bitcoin (§4.2).
B T1 T2 T3 T4 T5 T6
bus Attacks?
4.1 Why is RAP Believed to Prevent the Ere-
100
Attack execution time (days)
150
200
(a) CDF of required attack time.
(b) Attack success rate.
Figure 3: Cumulative distribution of the required attack exe-
cution time and the attack success rate when a Bitcoin client
implements the protocol tweaks T1–T6.
baseline client without any tweak, called Baseline or B. We
use conservative parameters for T2–T6 in our evaluations.
More discussions in the community might be needed before
the actual development of these tweaks.
Results. We present the defense effectiveness of the tweaks in
Figure 3 with the CDF plots of the required attack duration in
all attack scenarios and the rate of successful attack instances.
Figure 3a shows that individual tweaks of Bitcoin protocols
do not demonstrate signiﬁcant improvements as they reduce
the number of attack instances that require less than 350 days
by only less than ﬁve percentage points. The results shown
in Figure 3b conﬁrm that tweaks T1–T5 reduce the attack
success rates insigniﬁcantly, around only 2–16 percentage
points from 54.7%. Exceptionally, T6 makes Bitcoin clients
perform even worse than the baseline version, perhaps be-
cause there are too many empty tried slots for attacker IPs
to occupy when the attacks commence.
To sum up, simple tweaks for the Bitcoin protocol are
indeed beneﬁcial for mitigating the Erebus attacks; yet, their
effectiveness is only marginal, if not negative. The most
robust tweak T2 (i.e., anchor connections) is still insufﬁcient
to mitigate the Erebus attacks with the success rate of 38.6%,
which urges us to look for more complex and potentially more
effective solutions.
4 Routing-Aware Peering: A Rescue to Save
Bitcoin from the Erebus Attacks?
Understanding the shortcomings of the quick, simple solu-
tions, we turn our attention to a long-term solution. We aim to
remove the network Sybil capability of the Erebus adversaries,
which makes the attack possible in the ﬁrst place. A potential
countermeasure, called routing-aware peering (RAP), lets a
Bitcoin node use the knowledge of end-to-end routes of all
its peer connections and tries to prevent them from going
through a suspicious AS, effectively disabling the attackers’
network-Sybil capability. The idea of RAP has already been
mentioned multiple times as a promising solution to the Ere-
bus attack [4, 57] since it is proven effective in preventing
The rationale behind RAP as a mitigation to the Erebus attacks
is to empower each Bitcoin node with the symmetric defense
capability. In the same way that an Erebus adversary exploits
the end-to-end routing knowledge to place itself in a man-in-
the-middle position, a target Bitcoin node can also utilize the
same knowledge to detect when an attack occurs. If a victim
node is also equipped with end-to-end routing knowledge and
aware of which ASes are (and will be) located on the existing
(and the future) peer connections, it can detect an Erebus
attack campaign even before all the peer connections are made
through a malicious AS. For example, as shown in Figure 2,
a victim node can learn that all of its peer connections cross
the evil AS666 and then try to ﬁnd some new peers whose
victim-to-peer routes do not include the malicious AS.
In fact, the idea of RAP defenses has been already shown
to be highly effective in a different context, particularly for
securing Tor [1, 45, 53] against AS-based trafﬁc analysis at-
tacks [19, 39, 54]. In these Tor attacks, a malicious AS aims
to be on the man-in-the-middle position of many (if not all)
of the Tor paths from/to the victim Tor clients and the covert
public servers (e.g., Tor-client-to-entry-relay paths, exit-relay-
to-server paths). The required defense capability against these
Tor attacks is similar to what we aim to achieve via RAP in Bit-
coin; that is, an end client learns the intermediate ASes of their
Tor paths, detects these malicious-AS attacks, and chooses
other Tor relays that ensure attacker-free inter-domain routes.
Based on the highly promising track records of RAP-based
defenses against malicious-AS attacks in Tor P2P networks,
it is easily believed that RAP would also effectively mitigate
the Erebus attack in Bitcoin.
4.2 Design Overview of RAP in Bitcoin
As we design a practical RAP defense logic in Bitcoin, we
consider a general defense scenario where a Bitcoin node
does not know the Erebus adversary AS a priori. That is, a
Bitcoin node operates a RAP defense to prevent any interme-
diate ASes from overseeing all its peer connections without
knowing exactly which AS is a malicious AS.5 Note that this
is a conservative defense scenario as it is strictly easier to op-
erate a RAP defense when the malicious Erebus AS is known
to the victim node.
5Collaborative Erebus attacks, where two or more ASes collaborate to
hijack the victim’s peer connections, are out of the scope of this work, as is
the case in the original Erebus paper [57].
1258    30th USENIX Security Symposium
USENIX Association
…
#
!
"
Peer Selection Logic
1
Randomly select  from IP address tables 
new
tried
Routing-Aware Peering (RAP)
k existing 
outgoing 
connections
IP address 
tables
!"#
Route Inference
$
…
%
route(!"#),    route($), …, route(%)
existing
outgoing
conn.
Found an AS on 
yes
more than τ routes?
GoTo 1
no
Bitcoin client