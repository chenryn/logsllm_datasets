# Title: Better Than Advertised: Improved Collision-Resistance Guarantees for MD-Based Hash Functions

## Authors:
- Mihir Bellare
- Joseph Jaeger
- Julia Len

### Affiliations:
- University of California San Diego, La Jolla, California

### Contact Information:
- Mihir Bellare: [Email]
- Joseph Jaeger: [Email]
- Julia Len: [Email]

---

## Abstract

The MD transform, which underlies the MD and SHA families of hash functions, iterates a compression function \( h \) to produce a hash function \( H \). The question we address is: what property \( X \) of \( h \) guarantees collision resistance (CR) of \( H \)? The classical answer is that \( X \) itself must be CR. We show that weaker conditions, particularly forms of what we call constrained-CR, are sufficient. This reduces the demands on compression functions, enhancing security, and also explains why historical collision-finding attacks on compression functions have not immediately broken the corresponding hash functions. Our results are obtained through a definitional framework called RS security and a parameterized treatment of the MD transform, which also serve to unify prior work and variants of the transform.

---

## 1. Introduction

The so-called MD transform [15, 24] iterates a compression function \( h \) to produce a hash function \( H \). The question we address is: what property \( X \) of \( h \) guarantees collision resistance (CR) of \( H \)? The classical answer is that \( X \) itself must be CR [15, 24]. We show that weaker conditions \( X \), specifically forms of what we call constrained-CR, are sufficient.

The benefit is that if we require less from compression functions (as we can now do), they are less likely to disappoint. In other words, our result lowers the bar for compression function designers and raises it for attackers. It also explains a historical cryptanalytic phenomenon: collision-finding attacks on compression functions [16, 30] have not immediately led to breaks in the corresponding hash functions. Our explanation is that these attacks did not break constrained collision resistance. In this light, our work formalizes existing cryptanalytic intuition.

We obtain our results through a broader treatment that unifies prior work and different variants of the transform, and formalizes folklore. This involves:
1. A definitional framework called RS security, which allows us to formulate both classical and new security goals in a unified way.
2. A modular treatment of MD that parameterizes it via a splitting function and a compression function.

The MD transform was used in the MD series of hash functions (MD4 [27] and MD5 [26]) and now underlies the most widely used hash functions in practice, namely the SHA series (SHA-1, SHA-256, SHA-512) [25]. An improved understanding of its security, as we provide, is thus of both historical and current interest.

### 1.1 MD Framework

We formulate MD in a general, parameterized way as a transform taking:
1. A compression function \( h : \{0, 1\}^k \times (\{0, 1\}^\mu \times \{0, 1\}^\sigma) \to \{0, 1\}^\sigma \),
2. A splitting function \( \text{Split} : D \to (\{0, 1\}^\mu)^* \),
3. A set \( S \subseteq \{0, 1\}^\sigma \) of starting points (also called initial vectors).

The transform returns a hash function \( H = \text{MD}[h, \text{Split}, S] : D \to \{0, 1\}^\sigma \). The compression function takes a key \( k \) and an input \( x = (m, c) \) consisting of a message block \( m \) and chaining variable \( c \), and returns output \( c' = h_k((m, c)) \). The domain \( D \) is intended to be large, usually the set of all strings of length up to some maximum. The key \( (k, s) \) for \( H \) consists of a random key \( k \) for \( h \) and a random starting point \( s \) from \( S \). The splitting function breaks the input \( M \) to \( H(k, s) \) into a sequence \( m = m[1] \ldots m[n] \) of \( \mu \)-bit blocks. To compute \( H(k, s)(M) \), set \( c[1] \leftarrow s \), iterate the compression function via:

For \( i = 1, \ldots, n \):
\[ c[i + 1] \leftarrow h_k((m[i], c[i])) \]

and return \( c[n + 1] \) as the value of \( H(k, s)(M) \).

### 1.2 Characterizing CR Preservation

We start by revisiting the classical question of showing that \( H \) is CR assuming \( h \) is CR (\( X = \text{CR} \)). Several works have noted that suffix-freeness of Split is sufficient for this purpose [1, 5, 17, 18]. For completeness, we provide a formal claim (suffix-freeness of Split plus CR of \( h \) implies CR of \( H \), Theorem 5.3) along with the proof. We then complement this with a novel result: we show that the sufficient condition of suffix-freeness on Split is also necessary. We do this by showing that given any Split that is not suffix-free, we can construct a compression function \( h \) and set \( S \) such that (1) \( h \) is CR but (2) \( H = \text{MD}[h, \text{Split}, S] \) is not CR. This fully characterizes MD for the case where the assumption \( X \) made on \( h \) is CR.

### 1.3 Unifying Variants

Papers, textbooks, and standards present variants of the MD transform that differ in details. We capture them as special cases, corresponding to different choices of splitting function Split and set \( S \) of starting points. Together with our above-mentioned characterization, this unifies prior work.

To elaborate, a basic version of MD, from Merkle [23], MOV [22], and KL [20], corresponds to the splitting function that pads the message \( M \) to a multiple of the block length \( \mu \) and appends a block encoding the length of \( M \). Stinson’s [31] version corresponds to the last block encoding the amount of padding rather than the message length. Damgård’s version [15] starts each block of the padded message with a 1 bit except the first, which it starts with a 0 bit, and also appends a block encoding the amount of padding. The SHA functions [25] use yet another variant where the (padded) message may spill into the last block so that the latter does not encode just the message length (cf. Fig. 3). In papers and textbooks, the starting point \( s \) is usually \( 0^\sigma \) [15, 20, 22, 23, 31], but in the SHA series, \( s \) differs across hash functions. All these MD variants can be captured in our framework as making particular choices of suffix-free splitting functions Split and (singleton) spaces \( S \).

### 1.4 CR is Not Necessary

We would like to show CR of \( H = \text{MD}[h, \text{Split}, S] \) under an assumption \( X \) on the compression function \( h \) that is weaker than CR. We first ask, is this even possible? Or, is CR of \( h \) necessary for CR of \( H \)? We show in Section 6 that CR of \( h \) is not necessary. Given a suffix-free Split, we build a compression function \( h \) and set \( S \) such that (1) \( h \) is not CR, yet (2) \( H = \text{MD}[h, \text{Split}, S] \) is CR. This opens the door to proving CR of \( H \) under relaxed assumptions on \( h \).

### 1.5 RS Security

But what would these assumptions be? Towards finding and formulating them, we step back to give a framework to define security goals for \( h \). Security is parameterized by a relation \( R \) and a set \( S \). The game gives the adversary \( A \) a random key \( k \) for \( h \) and a random point \( s \) in \( S \). It returns an object denoted out, and wins if \( R \), given \( k \), \( s \), and out, returns true. Its RS-advantage is the probability that it wins. Classical \( X = \text{CR} \) is captured by viewing out as a pair of strings that \( R \) checks are a collision under \( h_k \), with \( s \) not being involved, formally \( S = \{\epsilon\} \). A form of pre-image resistance that we will use is captured by having \( R \) check that out gives a pre-image of \( s \in S = \{0, 1\}^\sigma \) under \( h_k \). We can also capture constrained forms of collision resistance (ccr), so called because extra requirements are made on the collision, thereby constraining it. In particular, we define \( R_{\text{ccr}}^S \) security. Here winning requires that out contains, not only a collision \((m_1, c_1), (m_2, c_2)\) for \( h_k \), but also, for both \( j = 1, 2 \), if \( c_j \neq s \), a further pre-image of it under \( h_k \). Providing the auxiliary information in addition to a collision makes the adversary’s job harder, so \( X = R_{\text{ccr}}^S \) security is a weaker assumption on \( h \) than CR. We can define other relaxations of CR as well.

### 1.6 CR from CCR

Theorem 6.4 relaxes the CR assumption, made on the compression function \( h \) in Theorem 5.3, to \( R_{\text{ccr}}^S \) security. That is, we show that if Split is suffix free and \( h \) is \( R_{\text{ccr}}^S \) secure, then hash function \( H = \text{MD}[h, \text{Split}, S] \) is CR secure. The first consequence of this is that the bar is lowered for the compression function designer (their design only needs to provide \( R_{\text{ccr}}^S \) security, which is easier than providing CR) and raised for the cryptanalyst (their attack needs to violate \( R_{\text{ccr}}^S \) security, which is harder than violating CR). We now discuss another consequence, namely to (possibly) better understand some cryptanalytic history.

Already in 1996, Dobbertin had found collisions for the compression function md5 of MD5 [16]. This did not, however, yield collisions on MD5 itself. This, to us, was an indication that MD was “better than advertised:” it was (possibly) able to promote a non-CR compression function to a CR hash function. Our work is an attempt to capture this intuition formally. Now, it is true that in this particular case the hope was not realized, meaning MD5 failed to be CR, as shown by direct attack [33, 34]. What that tells us is that the compression function md5 is even weaker than we thought: not only is it not CR, it is not even \( R_{\text{ccr}}^S \). In fact, starting from known MD5 collisions, our reduction will construct collisions, and accompanying auxiliary information, to violate \( R_{\text{ccr}}^S \) security of md5. The story repeats with SHA-1, where collisions found for the compression function sha-1 [30] did not immediately yield collisions for SHA-1, but the latter have now been found [29]. Again, it means sha-1 is not even \( R_{\text{ccr}}^S \). This, in our view, improves our understanding of compression function security.

### 1.7 Speeding Up MD

Suppose the message \( M = 0^{2\mu - 1} \) to be hashed is a bit short of twice the block length \( \mu \). A typical suffix-free encoding (for example, that of SHA-256) will pad \( M \) and append an encoding of the length \( |M| \), resulting in a 3-block string \( m \), over which the compression function is iterated. The compression function is thus called 3 times. One might hope for better, just 2 calls. More generally, the savings from dropping one compression function call are significant since messages in practice are often short. This leads us to ask why not use a minimal splitting scheme, like just \( 10^* \) padding the message, which in our example results in \( m = 0^{2\mu - 1}1 \) being 2 blocks long, so that MD will use only two calls to the compression function. But this splitting function is not suffix-free, and did we not show that the suffix-freeness assumption on Split is necessary for CR of \( H \)? Yes, but that was when the assumption on \( h \) is CR. Hence, it is also true when the assumption is \( R_{\text{ccr}}^S \), since that is implied by CR, but in Section 7 we show that mere injectivity of Split (in particular \( 10^* \) padding of the message) does guarantee CR of \( H = \text{MD}[h, \text{Split}, S] \) under alternative assumptions on \( h \), specifically that it is both ccr and pre-image resistant. The assumption seems quite plausible compared to CR, so the performance gain and simplicity of the splitting could make this version of MD attractive.

Our result generalizes, formalizes, and strengthens folklore understanding suggested by the following quote from [3]: “It was already known that the plain Merkle-Damgård iteration (without length strengthening) preserves collision resistance provided it is hard to find a pre-image for the initial vector... the latter is implied by everywhere pre-image resistance...” Specifically, our notion of pre-image resistance is weaker than everywhere pre-image resistance: we assume only CCR, rather than CR, of the compression function, we allow starting points (initial vectors) chosen from a distribution, our result applies with any injective Split rather than just plain Merkle-Damgård (a particular choice of Split), and we give formal definitions, result statements, and proofs.

### 1.8 Reduction Complexity

As indicated above, many prior works have claimed or proved that CR of \( h \) implies CR of \( H \), either for particular choices of Split or assuming the latter is suffix-free. It is interesting that, with the exception of a work on formal verification [5], not only papers [1, 5, 15, 17, 18, 24], but also textbooks [20, 22, 31], fail to explicitly specify the reduction underlying the proof. This takes attention away from, and makes it difficult to address, the important question of the (computational) complexity (efficiency) of the reduction. Whether in showing CR or CCR of \( h \) implies CR of \( H \), we are interested in the precise complexity of the reduction. We accordingly give explicit, pseudocode reductions. In the main sections, we give the reductions that emanate naturally from the proof. Then, in Section 9, we revisit the question of complexity to give alternative reductions that are more memory-efficient [4].

### 1.9 Discussion and Related Work

MD-based hash functions are also used for HMAC [8]. If we contemplate changes in splitting functions, we want to ensure HMAC security is preserved. However, current analyses of HMAC security [6, 19] show that suffix-free, and even injective, splitting functions suffice.

Our focus is on MD as a way to achieve collision resistance. Other works have looked at it for other ends. Use of MD with prefix-free (as opposed to suffix-free) encodings has been shown in [7, 9] to preserve PRF security. Its ability to provide indifferentiability from a random oracle is studied in [18]. More broadly, MD is one of many possible domain extension methods, and some works [2, 10] consider methods that preserve multiple properties.

---

## 2. Notation and Conventions

If \( m \) is a vector, then \( |m| \) denotes its length, \( m[i] \) denotes its \( i \)-th coordinate, and \( m[i..j] \) denotes the vector consisting of coordinates \( i \) through \( j \) of \( m \). For example, if \( m = (010, 11, 10, 111) \), then \( |m| = 4 \), \( m[2] = 11 \), and \( m[2..3] = (11, 10) \).

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.