title:Securing passwords against dictionary attacks
author:Benny Pinkas and
Tomas Sander
Securing Passwords Against Dictionary Attacks∗
†
Benny Pinkas
HP Labs
PI:EMAIL
Tomas Sander
HP Labs
PI:EMAIL
ABSTRACT
The use of passwords is a major point of vulnerability in
computer security, as passwords are often easy to guess
by automated programs running dictionary attacks. Pass-
words remain the most widely used authentication method
despite their well-known security weaknesses. User authen-
tication is clearly a practical problem. From the perspective
of a service provider this problem needs to be solved within
real-world constraints such as the available hardware and
software infrastructures. From a user’s perspective user-
friendliness is a key requirement.
In this paper we suggest a novel authentication scheme
that preserves the advantages of conventional password au-
thentication, while simultaneously raising the costs of online
dictionary attacks by orders of magnitude. The proposed
scheme is easy to implement and overcomes some of the dif-
ﬁculties of previously suggested methods of improving the
security of user authentication schemes.
Our key idea is to eﬃciently combine traditional pass-
word authentication with a challenge that is very easy to
answer by human users, but is (almost) infeasible for auto-
mated programs attempting to run dictionary attacks. This
is done without aﬀecting the usability of the system. The
proposed scheme also provides better protection against de-
nial of service attacks against user accounts.
Categories and Subject Descriptors
K.6.5 [Computing Milieux]: Management of computing
and information systems—Security and Protection
General Terms
Security
∗
STAR Lab, Intertrust Technologies.
†
Part of this work was done while the author was with DI-
MACS, Rutgers University.
Most of this work was done while the authors were with
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’02, November 18–22, 2002, Washington, DC, USA.
Copyright 2002 ACM 1-58113-612-9/02/0011 ...$5.00.
1.
INTRODUCTION
Passwords are the most common method of authenticating
users, and will most likely continue to be widely used for the
foreseeable future, due to their convenience and practicality
for service providers and end-users. Although more secure
authentication schemes have been suggested in the past, e.g.,
using smartcards or public key cryptography, none of them
has been in widespread use in the consumer market. It is a
well known problem in computer security that human cho-
sen passwords are inherently insecure since a large fraction
of the users chooses passwords that come from a small do-
main (see, e.g., the empirical studies in [19, 15]). A small
password domain enables adversaries to attempt to login to
accounts by trying all possible passwords, until they ﬁnd the
correct one. This attack is known as a “dictionary attack”.
Successful dictionary attacks have, e.g., been recently re-
ported against eBay user accounts, where attackers broke
into accounts of sellers with good reputations in order to
conduct fraudulent auctions [8].
When trying to improve the security of password based
authentication, one wants to prevent attackers from eaves-
dropping on passwords in transit, and from mounting oﬄine
dictionary attacks, namely attacks that enable the attacker
to check all possible passwords without requiring any feed-
back from the server. Eavesdropping attacks can be pre-
vented by encrypting the communication between the user
and the server, for example using SSL (see also [12, 5, 16,
11]). Oﬄine dictionary attacks are prevented by limiting
access to the password ﬁle (and can be made even harder by
adding well-known measures such as the use of salt).
In our discussion here we assume that the security mea-
sures described above are already implemented and there-
fore the attacker can only mount online dictionary attacks.
Namely, attacks where the only way for the attacker to ver-
ify whether a password is correct is by interacting with the
login server. This might be a reasonable assumption for an
Internet based scenario, where SSL is used to encrypt pass-
words and the server uses reasonable security measures to
secure its password ﬁle. In Section 1.1 we show that it is
hard to provide security even against this limited type of
attack. We then describe new protocols designed against
online dictionary attacks.
1.1 Common countermeasures against online
dictionary attacks
There are two common countermeasures that are taken
against online dictionary attacks:
Delayed response: Given a login-name/password pair
161the server provides a slightly delayed yes/no answer (say not
faster than one answer per second). This should prevent
an attacker from checking suﬃciently many passwords in a
reasonable time.
Account locking: Accounts are locked a few unsuccess-
ful login attempts (for example, an account is locked for an
hour after ﬁve unsuccessful attempts.) Like the previous
measure, this measure is designed to prevent attackers from
checking suﬃciently many passwords in a reasonable time.
These countermeasures can be quite useful in a single com-
puter environment, where users login to a local machine us-
ing, say, a keyboard that is physically attached to it. We
describe below how both these measures are insuﬃcient in
a network environment. Furthermore, we show that im-
plementing the account locking measure is very costly and
introduces additional risks.
1.2 Weaknesses of the countermeasures
1.2.1 Global password attacks
Consider a system that has many user accounts, and which
enables logins over a network that is accessible to hackers.
(Again, we do not assume that the attackers can sniﬀ net-
work traﬃc, we only assume that they can connect to the
network and try to login to the server, pretending to be a
legitimate user.)
Consider an attacker that is interested in breaking into
any account in the system, rather than targeting a speciﬁc
account. The attacker can try many login attempts in par-
allel and circumvent the timing measure using the fact that
user logins are typically handled by servers that can handle
many login sessions in parallel. For example, the attacker
can send a login attempt every 10 milliseconds, obtaining a
throughput of 100 login attempts per second, regardless of
how long the server delays the answers to the login attempts.
The account locking feature can also be circumvented by
such a “global” attacker, if it tries to login using diﬀerent
username/password pairs, and operates without trying the
same user name twice. Since every user name is used only
once, the “account with many failed login attempts” alarm
is never triggered.1
1.2.2 Risks of the account locking measure
The account locking security measure introduces addi-
tional risks, which can actually make a strong case against
using it in practice. (Indeed, as was suggested in a recent
news article [8], eBay does not implement this measure for
these reasons).
1This attack is further simpliﬁed by the fact that in many
practical scenarios an attacker can easily get hold of a large
database of valid user names. A list of usernames is often
known in interactive web communities, such as auction sites.
In many large corporations user names equal the email han-
dle and can just be grabbed from corporate web sites or
employee lists. For large Internet services (e.g., MyYahoo)
almost any reasonable user name has already been taken,
so that valid user names are trivial to guess for an attacker.
The latter statement applies to any Internet service with a
huge user base, e.g. to identity services such as Microsoft
Passport. Furthermore, a valid bank account number is of-
ten also easy to generate, as only part of it is random. (Parts
of the account number are used to identify the branch, and
one digit is used for a checksum.) Thus it is relatively easy
to generate valid user names for Internet banking services
that use account numbers as user names.
Denial of service attacks. The “account locking” feature
enables denial of service attacks against users. These attacks
are mounted by trying to login several times to a user’s ac-
count with invalid passwords, thus causing this account to
be blocked. Yahoo!, for example, report that users who com-
pete in auctions use these methods to block the accounts of
other users who compete in the same auctions. This at-
tack should be especially worrisome to mission critical ap-
plications, for example to enterprises whose employees and
customers use the web to login to their accounts.
One could even imagine a distributed denial of service at-
tack against servers that implement the “account locking”
feature. Similar to other distributed denial of service attacks
(DDoS), the attacker could plant hidden agents around the
web. All the agents could start operating at a speciﬁc time,
trying to login into accounts in a speciﬁc server using ran-
dom passwords (or using a dictionary attack). This attack
could block virtually a large proportion of the accounts of
the attacked server.
Customer service costs. Another major drawback of the
“account locking” feature is that it causes user accounts to
be locked, either by mistake (e.g. by users that do not type
their passwords correctly) or as a result of dictionary at-
tacks. The service provider must therefore operate customer
service centers to handle calls from users whose accounts are
locked. (Even if the service provider installs mechanisms for
automated unlocking of accounts, e.g. using private ques-
tions whose answers are known to the legitimate users, it is
still needed to operate a customer service center for those
users who fail to use these automated mechanisms.) The
cost of running these centers is high, and is estimated to
cost more than $25 per customer call.
Imagine that each
user locks his account once every ﬁve years, then the service
cost, per user, per year, is at least $5. (An online auction
industry observer commented [8], that in her opinion eBay
had not implemented account locking features due to the
costs of operating customer support centers.)
1.3 Pricing via processing
The “pricing via processing” paradigm was introduced by
Dwork and Naor in the context of ﬁltering junk email [9].
This paradigm requires that any attempt to use a resource
requires the party that makes the attempt to send a proof
that it invested some non-trivial computation time in con-
structing its request. The required computational time is
negligible per usage attempt, but becomes a real barrier if
one makes a large number of attempts. As a speciﬁc ex-
ample in the context of preventing dictionary attacks, the
server could require that a login attempt is accompanied by
a value x that satisﬁes the requirement, say, that the last
20 bits of H(x,username,password,time-of-day) are all 0,
where H is a hash function such as SHA. If we assume that
SHA behaves as a random function, then the attacker would
need to check on the average 219 values for x before it ﬁnds
a value that satisﬁes the test. that The computation of x
adds a relatively negligible overhead to a single login at-
tempt, but can signiﬁcantly slow down the operation of a
dictionary attack.
One drawback of this solution is that the user’s client must
be able to run a program that performs the computation.
This either requires the use of a special client, or the down-
load of mobile code (e.g. a Java or JavaScript program). In
162the latter case we could not hope to have a universal cover-
age of all users since not all browsers or environments (e.g.
corporate ﬁrewalls) support mobile code. Another drawback
of this solution is that a legitimate user could be running a
slow machine, whereas the attacker could be using a very
powerful machine. Since the challenge should not be too
demanding for the user, a dictionary attack might only be
relatively hard for the attacker.
Our approach. Our solution follows the “pricing via pro-
cessing” paradigm. We observe that a legitimate login at-
tempt is done by a human user, whereas a dictionary attack
is done by an automated program. We therefore require
that any login attempt be accompanied by the product of a
“computation” that is very easy for humans, but is hard for
machines.
We identify in Section 5 several of the practical require-
ments for authentication protocols in e-commerce applica-
tions and argue that our protocol scores very well with re-
spect to these requirements. In particular the protocol has
almost no impact on usability and requires almost no change
in user behavior. The authentication method is portable, i.e.
it can be used from a number of diﬀerent machines. It does
not require the use of additional hardware, or download-
ing software. It is easy to implement for service providers
and can be easily integrated with existing authentication
technology. The protocol allows service providers to deal
with denial of service attacks more eﬀectively by remov-
ing the need to lock accounts after a few unsuccessful login
attempts.
It thus overcomes most of the practical short-
comings of previous suggestions to strengthen user authen-
tication (which we review in Section 5). The added security
of our scheme relies on the security of tests that distinguish
between human users and machines. Some recent results
(that we will describe in more detail in Section 2) suggest
that these tests might indeed be suﬃciently strong, although
this assumption certainly requires further careful testing.
These properties and the low costs of implementing our
protocol (especially for service providers) suggest that it has
a realistic chance of being deployed in electronic commerce
(and other) applications.
The paper is organized as follows. In Section 2 we describe
(known) tests that allow to distinguish between human users
and machines and some of their properties.
In Section 3
we describe our new authentication protocols. In Section 4
we analyze their security. In Section 5 we describe related
work and review authentication protocols with respect to
real world requirements.
2. TOOLS – REVERSE TURING TESTS
Our protocols may use one of the several tests that at-
tempt to distinguish between a human user and a computer
program. These tests should be easy for human users to
pass, yet be hard for automated programs. They were ﬁrst
suggested by Naor [20], and were denoted as reverse Tur-
ing tests (RTTs). Alternative names for these tests are
CAPTCHAs [6], and mandatory human participation pro-
tocols [22].
A reverse Turing test should satisfy the following require-
ments:
• Automated generation: It should be easy to generate
many instances of the test in an automated way.
• Easy for humans: A generated test should be easy for
human users to solve.
• Hard for machines: An automated adversary is a pro-
gram that cannot interact with a human user after
receiving its input. We require that any automated
adversary cannot answer the test correctly with prob-
ability that is signiﬁcantly better than guessing. The
input of the adversary can be of two types: (1) It can
include a complete description of the algorithm that
generates the RTTs.
In this case the adversary can
generate by itself many instances of the RTT together
with their solutions. (2) A weaker notion of security