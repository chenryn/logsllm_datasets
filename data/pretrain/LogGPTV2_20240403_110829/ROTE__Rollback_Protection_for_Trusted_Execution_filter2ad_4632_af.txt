### References

1. [Intel Software Guard Extensions (SGX) Documentation](https://software.intel.com/en-us/node/696636).

2. R. Strackx et al., “Idea: State-Continuous Transfer of State in Protected-Module Architectures,” in ESSoS, 2015.

3. M. Brandenburger et al., “Rollback and Forking Detection for Trusted Execution Environments Using Lightweight Collective Memory,” 2017, [arXiv:1701.00981](http://arxiv.org/abs/1701.00981).

4. B. Schneier et al., “Secure Audit Logs to Support Computer Forensics,” ACM TISSEC, 1999.

5. D. Ma et al., “A New Approach to Secure Logging,” ACM TOS, 2008.

6. S. A. Crosby et al., “Efficient Data Structures for Tamper-Evident Logging,” in USENIX Security, 2009.

7. A. Sinha et al., “Continuous Tamper-Proof Logging Using TPM 2.0,” in TRUST, 2014.

8. A. Haeberlen et al., “PeerReview: Practical Accountability for Distributed Systems,” ACM OSR, 2007.

9. B.-G. Chun et al., “Attested Append-Only Memory: Making Adversaries Stick to Their Word,” in ACM OSR, 2007.

10. D. Levin et al., “TrInc: Small Trusted Hardware for Large Distributed Systems,” in NSDI, 2009.

11. M. Correia et al., “How to Tolerate Half Less One Byzantine Nodes in Practical Distributed Systems,” in DISC, 2004.

12. J. Liu et al., “Scalable Byzantine Consensus via Hardware-Assisted Secret Sharing,” arXiv preprint arXiv:1612.04997, 2016.

13. R. Kapitza et al., “CheapBFT: Resource-Efficient Byzantine Fault Tolerance,” in EuroSys, 2012.

14. F. J. Meyer et al., “Consensus with Dual Failure Modes,” IEEE TPDS, 1991.

15. J. A. Garay et al., “A Continuum of Failure Models for Distributed Computing,” in PDAA, 1992.

16. H.-S. Siu et al., “A Note on Consensus on Dual Failure Modes,” IEEE TPDS, 1996.

17. F. Tramer et al., “Sealed-Glass Proofs: Using Transparent Enclaves to Prove and Sell Knowledge,” 2016, [ePrint:2016/635](http://eprint.iacr.org/2016/635).

18. F. Zhang et al., “Town Crier: An Authenticated Data Feed for Smart Contracts,” in CCS, 2016.

19. N. Weichbrodt et al., “AsyncShock: Exploiting Synchronization Bugs in Intel SGX Enclaves,” in ESORICS, 2016.

20. D. Gupta et al., “Using Intel Software Guard Extensions for Efficient Two-Party Secure Function Evaluation,” in WAHC, 2016.

21. S. Brenner et al., “SecureKeeper: Confidential ZooKeeper Using Intel SGX,” in Middleware, 2016.

22. R. Pass et al., “Formal Abstractions for Attested Execution Secure Processors,” in Cryptology ePrint Archive, 2016.

23. R. Sinha et al., “Moat: Verifying Confidentiality of Enclave Programs,” in CCS, 2015.

24. F. McKeen et al., “Innovative Instructions and Software Model for Isolated Execution,” in HASP@ ISCA, 2013.

25. [Intel Software Guard Extensions, Reference Number: 332680-002](https://software.intel.com/sites/default/files/332680-002.pdf), 2015.

26. S. Johnson et al., “Intel SGX: EPID Provisioning and Attestation Services,” 2016, [Intel Blog](https://software.intel.com/en-us/blogs/2016/03/09/intel-sgx-epid-provisioning-and-attestation-services).

27. B. Alexander, “Introduction to Intel SGX Sealing,” 2016, [Intel Blog](https://software.intel.com/en-us/blogs/2016/05/04/introduction-to-intel-sgx-sealing).

28. Intel, “Developer Zone Forums,” 2016, [Intel Developer Forums](https://software.intel.com/en-us/forums/intel-software-guard-extensions-intel-sgx/topic/607330).

29. Intel, “Intel 100 Series and Intel C230 Series Chipset Family Platform Controller Hub (PCH),” 2016, [Intel Datasheet](http://www.intel.com/content/www/us/en/chipsets/100-series-chipset-datasheet-vol-1.html).

30. Intel, “Intel 9 Series Chipset Family Platform Controller Hub (PCH),” 2015, [Intel Datasheet](http://www.intel.com/content/www/us/en/chipsets/9-series-chipset-pch-datasheet.html).

### A. SGX Background

#### Enclave Creation
An enclave is created by the system software. During creation, the system software specifies the enclave code. The processor creates a data structure called the SGX Enclave Control Structure (SECS), which is stored in a protected memory area. Since enclaves are created by the system software running on the OS, their code cannot contain sensitive data. The start of the enclave is recorded by the processor, reflecting the content of the enclave code and the loading procedure. This recording, known as the measurement, can be used for later attestation. Once an enclave is no longer needed, the OS can terminate it, erasing its memory structure from the protected memory.

#### Runtime Isolation
The SGX security architecture ensures that enclaves are isolated from all other software, including the OS, other enclaves, and peripherals. This isolation means that the control-flow integrity of the enclave is preserved, and other software cannot observe its state. Isolation is achieved through protection mechanisms enforced by the processor. The code and data of an enclave are stored in a protected memory area called the Enclave Page Cache (EPC), which resides in Processor Reserved Memory (PRM). PRM is a subset of DRAM that cannot be accessed by the OS, applications, or direct memory accesses. Non-enclave software can only access memory regions outside the PRM range, while enclave code can access both non-PRM memory and the EPC pages owned by the enclave.

The untrusted OS can evict EPC pages into untrusted DRAM and load them back at a later stage. While the evicted EPC pages are stored in untrusted memory, SGX ensures their confidentiality, integrity, and freshness via cryptographic protections. The Memory Encryption Engine (MEE), part of the processor uncore, encrypts and authenticates the enclave data that is evicted to non-protected memory, using counters and a Merkle-tree structure. The root of the tree is stored on the processor die. Additionally, the MEE protects the Enclave Page Cache against physical attacks and is connected to the Memory Controller.

#### Attestation
Attestation is the process of verifying that certain enclave code has been properly initialized. In local attestation, a prover enclave can request a statement containing measurements of its initialization sequence, enclave code, and the issuer key. Another enclave on the same platform can verify this statement using a shared key created by the processor. In remote attestation, the verifier may reside on another platform. A system service called the Quoting Enclave signs the local attestation statement for remote verification. The verifier checks the attestation signature with the help of an online attestation service run by Intel. Each verifier must obtain a key from Intel to authenticate to the attestation service. The signing key used by the Quoting Enclave is based on a group signature scheme called Enhanced Privacy ID (EPID), which supports fully anonymous and linkable attestation using pseudonyms. The pseudonyms remain invariant across reboot cycles for the same verifier. Once an enclave is attested, the verifier can establish a secure channel to it using an authenticated key exchange mechanism.

#### Sealing
Enclaves can save confidential data across executions. Sealing is the process of encrypting and authenticating enclave data for persistent storage. All local persistent storage (e.g., disk) is controlled by the untrusted OS. For each enclave, the SGX architecture provides a sealing key that is private to the executing platform and the enclave. The sealing key is derived from a Fuse Key (unique to the platform, not known to Intel) and an Identity Key, which can be either the Enclave Identity or Signing Identity. The Enclave Identity is a cryptographic hash of the enclave measurement and uniquely identifies the enclave. If data is sealed with Enclave Identity, it is only available to this particular enclave version. The Signing Identity is provided by an authority that signs the enclave prior to its distribution. Data sealed with Signing Identity can be shared among all enclave versions signed with the same Signing Identity.

### B. SGX Counter Analysis

Intel recently added support for monotonic counters as an optional SGX feature for rollback attack protection. However, the security and performance properties of this mechanism are not well documented, and they are not available on all platforms. In this appendix, we outline the executed experiments and evaluate the SGX counter and trusted time service.

#### SGX Counter Service
An enclave can query the availability of counters from the Platform Service Enclave (PSE). If supported, the enclave can create up to 256 counters. The default owner policy allows only enclaves with the same signing key to access the counter. Counter creation returns an identifier that combines the Counter ID and a nonce to distinguish counters created by different entities. The enclave must store the counter identifier to access it later, as there is no API call to list existing counters. After successful counter creation, the enclave can increment, read, and delete the counter.

According to the SGX API documentation, counter operations involve writing to non-volatile memory. Repeated write operations can cause the memory to wear out, and thus the counter increment operations may be rate-limited. Based on Intel developer forums, the counter service is provided by the Management Engine on the Platform Control Hub (PCH).

#### Experiments
We tested SGX counters on five different platforms: Dell Inspiron 13-7359, Dell Latitude E5470, Lenovo P50, Intel NUC, and Dell Optiplex 7040. The counter service was not available on the Intel NUC. On Dell laptops, a counter increment operation took approximately 250 ms, while on the Lenovo laptop and Dell Optiplex, increment operations took approximately 140 ms and 80 ms, respectively. Strackx et al. reported 100 ms for counter updates. Counter read operations took 60-140 ms, depending on the platform. As expected, the counter values remained unchanged across enclave restarts and platform reboots.

We tested the wear-out characteristics of the counters and found that on both Dell laptops, after approximately 1.05 million writes, the tested counter became unusable, and other counters on the same platform could not be created, incremented, or read (all SGX counter operations returned SGX ERROR BUSY). Additionally, reinstalling the SGX Platform Software (PSW) or removing the BIOS battery deleted all counters. To our surprise, after reinstalling the PSW, the first usage of the counter service triggered the platform software to connect to a server whose domain is registered to Intel. If an Internet connection is not available, the counters are unavailable.

#### Performance Limitations
An enclave developer could use SGX counters as a rollback protection mechanism. When an enclave needs to persistently store an updated state, it can increment a counter, include the counter value and identifier in the sealed data, and verify the integrity of the stored data based on the counter value at the time of unsealing. However, such an approach may wear out the non-volatile memory. Assuming a system that updates one of the enclaves on the same platform once every 250 ms, counters would become unusable in a few days. Even with a modest update rate of one increment per minute, the counters are exhausted in two years. Services that need to process tens or hundreds of transactions per second are not feasible.

#### Weaker Security Model
According to Intel developer forums, the counter service is provided by the Management Engine on the PCH (known as the "south bridge" in older architectures). However, the actual location of the non-volatile memory used to store the counters is not publicly stated. Based on Intel specifications, the PCH typically does not host non-volatile memory but is connected over an SPI bus to a flash memory also used by the BIOS. Since the Management Engine is an active component, communication between the processor and the Management Engine can be replay-protected. However, the SPI flash is a passive component, and any counter stored there is likely vulnerable to bus tapping and flash mirroring attacks, as demonstrated in the case of mobile devices (inspired by the FBI iPhone unlocking debate). Although the precise storage location of SGX counters remains unknown, it is clear that if the integrity of enclave data relies on the SGX counter feature, additional hardware components besides the processor must be considered trusted. This is a significant shift from the enclave execution protection model, where the security perimeter is the processor package.

#### Other Concerns
The current design of SGX counter APIs makes safe programming difficult. To demonstrate this, consider a subtle rollback attack. Assume an enclave that, at the beginning of its execution, checks for the existence of sealed state. If none is provided by the OS, it creates a new state and counter and stores the state sealed together with the counter value and identifier. The enclave increments the counter after every state update. Later, the OS no longer provides a sealed state to the restarted enclave. The enclave assumes this is its first execution and creates a new (second) counter and new state. Recall that the SGX APIs do not allow checking the existence of previous counters. The enclave updates its state again. Finally, the OS replays a previous sealed state associated with the first counter. A careful developer can detect such attacks by creating and deleting 256 counters (an operation that takes two minutes) to check if a previous counter, and thus sealed state, exists. A crash before counter deletion would render that particular enclave permanently unusable.

We have no good explanation for why a connection to an Intel server is needed after the PSW reinstall. Similarly, we do not know why the SGX counters become unavailable after BIOS battery removal or PSW reinstall.

The above attack and availability issues could be fixed with better design of SGX APIs and system services, but the performance limitations and weaker security model are hard to avoid in future versions of the SGX architecture.

#### SGX Trusted Time
Another recently introduced and optional SGX feature is the trusted time service. As with SGX counters, the time service is provided by the Management Engine. The trusted time service allows an enclave developer to query a timestamp relative to a reference point. The function returns a nonce in addition to the timestamp, and according to Intel documentation, the timestamp can be trusted as long as the nonce does not change.

We tested the time service and noticed that the provided nonce remained the same across platform reboots. Reinstalling the PSW resulted in a different nonce, but the provided time was still correct. The reference point is the standard Unix time. As a rollback protection mechanism, the trusted time service is of limited use. Including a timestamp in each sealed data version allows an enclave to distinguish which of two seals is more recent. However, the enclave cannot know if the sealed data provided by the OS is fresh and latest.