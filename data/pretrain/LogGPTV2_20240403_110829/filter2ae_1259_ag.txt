        return (a + b) % 16;
    }
    int modminus(int a, int b) {
        return (16 + a - b) % 16;
    }
    int modmult(int a, int b) {
        return (a*b) % 16;
    }
    int modxor(int a, int b) {
        return (a^b) % 16;
    }
    int onechange(int index, int k) {
        int p1, p2;
        int g1, g2;
        g1 = hex2int(table[31][index]) / 4;
        g2 = hex2int(table[31][index]) % 4;
        if (g1 == 0) {
            p1 = modplus(k, hex2int(table[index][hex2int(table[30][index])]));
        }
        else if (g1 == 1) {
            p1 = modminus(k, hex2int(table[index][hex2int(table[30][index])]));
        }
        else if (g1 == 2) {
            p1 = modmult(k, hex2int(table[index][hex2int(table[30][index])]));
        }
        else if (g1 == 3) {
            p1 = modxor(k, hex2int(table[index][hex2int(table[30][index])]));
        }
        if (g2 == 0) {
            p2 = modplus(k, hex2int(table[index][hex2int(table[30][index]) + 15]));
        }
        else if (g2 == 1) {
            p2 = modminus(k, hex2int(table[index][hex2int(table[30][index]) + 15]));
        }
        else if (g2 == 2) {
            p2 = modmult(k, hex2int(table[index][hex2int(table[30][index]) + 15]));
        }
        else if (g2 == 3) {
            p2 = modxor(k, hex2int(table[index][hex2int(table[30][index]) + 15]));
        }
        if (p1 == hex2int(table[index][31]) || p2 == hex2int(table[index][31])) {
            return 1;
        }
        else {
            return 0;
        }
    }
    int main() {
        char input[64]="Sangfor{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}";
        int li = strlen(input);
        for (int i = 0; i .r
    SinCipher.gen_round_key