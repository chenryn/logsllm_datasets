### References

1. **Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT), 2003.**

2. **T. Ristenpart and S. Yilek, "The power of proofs-of-possession: Securing multiparty signatures against rogue-key attacks," in International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT), 2007.**

3. **D. Boneh, M. Drijvers, and G. Neven, "Compact multi-signatures for smaller blockchains," IACR Cryptology ePrint Archive, vol. 2018, p. 483, 2018.**

4. **M. Fischlin, "Communication-efficient non-interactive proofs of knowledge with online extractors," in Annual International Cryptology Conference (CRYPTO), 2005.**

5. **T. Ristenpart and S. Yilek, "The power of proofs-of-possession: Securing multiparty signatures against rogue-key attacks," in Annual International Conference on the Theory and Applications of Cryptographic Techniques, 2007.**

6. **T. Høiland-Jørgensen, B. Ahlgren, P. Hurtig, and A. Brunstrom, "Measuring latency variation in the internet," in International Conference on Emerging Networking Experiments and Technologies, 2016.**

7. **M. Fadhil, G. Owen, and M. Adda, "Bitcoin network measurements for simulation validation and parameterisation," in International Network Conference (INC), 2016.**

8. **S. Ben Mariem, P. Casas, and B. Donnet, "Vivisecting blockchain P2P networks: Unveiling the Bitcoin IP network," in ACM CoNEXT Student Workshop, 2018.**

9. **Mastercard, "UK - Domestic Interchange Fees," https://tinyurl.com/ybzkcxak, 2017.**

10. **S. Campion, "Transit-oriented displacement?: The San Jose Flea Market and the opportunity costs of smart growth," 2011.**

11. **A. Pelham, E. Sills, and G. S. Eisman, *Promoting Health and Wellness in Underserved Communities: Multidisciplinary Perspectives through Service Learning*. Service Learning for Civic Engagement Series. ERIC, 2010.**

12. **J. A. List, "The economics of open air markets," National Bureau of Economic Research, Tech. Rep., 2009.**

13. **T. T. Project, "Tor metrics," https://metrics.torproject.org/onionperf-latencies.html, 2019.**

14. **T. Rufﬁng, P. Moreno-Sanchez, and A. Kate, "CoinShuffle: Practical decentralized coin mixing for Bitcoin," in European Symposium on Research in Computer Security (ESORICS), 2014.**

15. **J. Bonneau, A. Narayanan, A. Miller, J. Clark, J. A. Kroll, and E. W. Felten, "Mixcoin: Anonymity for Bitcoin with accountable mixes," in Financial Cryptography and Data Security (FC), 2014.**

16. **D. Hopwood, S. Bowe, T. Hornby, and N. Wilcox, "Zcash protocol specification," Technical report, 2016–1.10. Zerocoin Electric Coin Company, Tech. Rep., 2016.**

17. **S. Steffen, B. Bichsel, M. Gersbach, N. Melchior, P. Tsankov, and M. Vechev, "zkay: Specifying and enforcing data privacy in smart contracts," in ACM Conference on Computer and Communications Security (CCS), 2019.**

18. **R. Khalil and A. Gervais, "Revive: Rebalancing off-blockchain payment networks," in ACM Conference on Computer and Communications Security (CCS), 2017.**

19. **R. A. E. Khalil and A. Gervais, "System and method for scaling blockchain networks with secure off-chain payment hubs," May 9, 2019, US Patent App. 16/183,709.**

20. **D. L. Salamon, G. Simonsson, J. Freeman, and B. J. Fox, "Orchid: Enabling decentralized network formation and probabilistic micropayments," 2018.**

21. **R. Pass et al., "Micropayments for decentralized currencies," in ACM Conference on Computer and Communications Security (CCS), 2015.**

22. **J. Kwon, "Tendermint: Consensus without mining," 2014.**

23. **A. Kiayias, A. Russell, B. David, and R. Oliynykov, "Ouroboros: A provably secure proof-of-stake blockchain protocol," in Annual International Cryptology Conference (CRYPTO), 2017.**

24. **P. Vasin, "Blackcoin’s proof-of-stake protocol v2," 2014.**

25. **W. Li, S. Andreina, J.-M. Bohli, and G. Karame, "Securing proof-of-stake blockchain protocols," in Data Privacy Management, Cryptocurrencies and Blockchain Technology, 2017.**

26. **Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, "Algorand: Scaling byzantine agreements for cryptocurrencies," in ACM Symposium on Operating Systems Principles (SOSP), 2017.**

27. **L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena, "A secure sharding protocol for open blockchains," in ACM Conference on Computer and Communications Security (CCS), 2016.**

28. **P. Li, G. Wang, X. Chen, and W. Xu, "GoSig: Scalable Byzantine consensus on adversarial wide area network for blockchains," arXiv preprint arXiv:1802.01315, 2018.**

29. **E. Research, "Ethereum 2.0 spec–Casper and sharding," https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md, 2018.**

30. **E. Conner, "Transaction throughput under Shasper," https://ethresear.ch/t/transaction-throughput-under-shasper/3467, 2018.**

31. **V. Buterin, "Slasher: A punitive proof-of-stake algorithm," 2014.**

32. **V. Buterin and V. Griffith, "Casper the friendly finality gadget," arXiv preprint arXiv:1710.09437, 2017.**

33. **M. Bellare, J. A. Garay, and T. Rabin, "Fast batch verification for modular exponentiation and digital signatures," in International Conference on the Theory and Application of Cryptographic Techniques (EUROCRYPT), 1998.**

### Appendix

#### A. Background on Permissionless Consensus

In this appendix, we review additional examples of recent permissionless consensus systems. We focus on schemes that do not introduce significant additional security assumptions and refer the reader to [7] for a more thorough survey.

**Proof of Stake (PoS)** is proposed as an alternative to computational puzzles in Proof of Work (PoW), where nodes commit (i.e., stake) funds to participate in the consensus process [55]–[58]. These solutions are based on an economic-driven model, where nodes are rewarded for honest behavior and penalized for deviating from the consensus. While they provide some latency improvements, they do not match the 3-second average of centralized payment processors.

For example, **Ouroboros** [56] reports a throughput of approximately 300 transactions per second and a block frequency 10-16 times smaller than that of Bitcoin. Thus, a merchant will still have to wait for several minutes before a transaction can be considered finalized. Another example, **Algorand** [59], has a throughput 125 times higher than that of Bitcoin, with a latency of at least 22 seconds, assuming a network with no malicious users.

**Sharding**. While PoS techniques involve the entire network in the consensus process, sharding techniques promise significant performance improvements by splitting the network into smaller groups. For instance, **Elastico** [60] achieves four times larger throughput per epoch for network sizes similar to that of Bitcoin. However, it provides no improvement in confirmation latency (approximately 800 seconds). Similarly, **GoSig** [61] can sustain approximately 4,000 transactions per second with a 1-minute confirmation time. **RapidChain** [20] has a throughput of 7,300 transactions per second with a 70-second confirmation latency.

**Omniledger** [19] is the only proposal that reports performance (both throughput and latency) compatible with retail payments. However, this comes at a security cost. Their low-latency transactions (i.e., Trust-but-Verify) use shards comprised of only a few (or even one) "validators." In the retail setting, this enables malicious validators to launch multi-spending attacks by approving several conflicting payments towards various honest merchants. While the attack and the malicious validator(s) will be uncovered by the core validators within about 1 minute, this time period is sufficient for an adversary to attack multiple merchants, resulting in substantial losses.

**Shasper for Ethereum** is expected to handle 13,000 transactions per second, with optimistic estimates reporting a minimum block frequency of approximately 8 seconds [62]–[65]. However, even with such a small block interval, the latency remains too high for retail purchases, as merchants will need to wait for several blocks for transactions to reach finality.

#### B. Deployment Alternatives for Snappy

In this appendix, we discuss alternative deployment options for Snappy.

**Centralized Snappy**. While decentralization is one of the main benefits of Snappy, there may be cases where having a single central party is acceptable. In this case, the merchants can appoint a single party to approve or reject payments. This simplifies our protocols as each payment requires only one approval query instead of several. However, if the central party is untrusted, it still has to deposit a collateral for the merchants to claim in case it equivocates. Relying on a single party adds a centralized layer on top of a fully decentralized blockchain and likely results in increased service fees.

**Non-statekeeping Merchants**. In the previous section, we discussed a fully centralized version of Snappy that allows the system to scale further and simplifies statekeeping. While this setup has several advantages, the liveness and quality of service rely on the single party, which can unilaterally decide on changing the service fees and processes. An alternative solution that retains most of the centralization benefits while remaining decentralized (but not fully) is allowing non-statekeeping merchants. Merchants can join the system and decide if they want to deposit a collateral and perform statekeeping tasks or simply receive payments.

This allows merchants who choose not to keep state to still make use of the Snappy deployment and enables the system to scale to millions of merchants. To incentivize statekeeping, a small service fee could be paid by non-statekeeping merchants to those who have allocated a statekeeping collateral. It is preferable if the statekeepers' set remains open to all interested merchants (rather than being capped or fixed) and the service fees are determined dynamically based on supply and demand. Several merchants may be represented by a single statekeeping node. For example, instead of having small shops match the collateral of large chain stores, their association could maintain one node that performs the statekeeping for all of them and routes their to-be-approved payments to the rest of the statekeepers.

This setup has the advantage of using existing trust relationships (e.g., small merchants trust their association) when they exist, while still allowing a trustless setup for actors who prefer it.

**One Pending Transaction**. Much of the complexity of Snappy's protocols comes from ensuring that the pending transactions of a customer should never exceed the value of the collateral. One possible way to reduce this complexity is by constraining the number of allowed pending transactions to one. Such a setup allows customers to conduct at most one transaction per block and greatly simplifies the settlement process, as there are no pending transactions to be provided by the merchant. We believe that such a setup is realistic and may be preferable in cases where customers are unlikely to perform several transactions within a short period of time. However, this is an additional assumption that may reduce the utility of the system in some cases. For example, a customer who realizes they forgot to buy an item after checking out will have to wait until the pending transaction is confirmed.

**Signature Verification Batching**. While the computational cost of verifying an aggregated signature (i.e., two pairings) is negligible for a personal computer, this is not true for the Ethereum Virtual Machine, where a pairing operation is considerably more expensive than a group operation. Our original scheme tackles this cost by having the arbiter verify signatures only in case of disputes. As an additional cost-reduction optimization, the arbiter can use techniques such as those in [66] to batch and check several signatures simultaneously.

Assume there are \( \ell \) aggregated signatures \((\sigma_1, \ldots, \sigma_\ell)\) to be verified for the messages \((m_1, \ldots, m_\ell)\). The arbiter samples \( \ell \) random field elements \((\gamma_1, \ldots, \gamma_\ell)\) from \( \mathbb{Z}_p \). The verifier considers all the signatures to be valid if:

\[
\prod_{i=1}^\ell e(H(m_i)^{\gamma_i}, h) = \prod_{i=1}^\ell e(\sigma_i^{\gamma_i}, h)
\]

This roughly halves the verification costs. In systems where the number of transactions is considerably more than the number of statekeepers, we can further reduce the costs per transaction. Assume there are \( \ell \) aggregated signatures \((\sigma_1, \ldots, \sigma_\ell)\) to be verified for the messages \((m_1, \ldots, m_\ell)\) where \( \ell \gg n \). The verifier samples \( \ell \) random field elements \((\gamma_1, \ldots, \gamma_\ell)\) from \( \mathbb{Z}_p \). The verifier considers all the signatures to be valid if:

\[
\left( \prod_{i=1}^\ell e(H(m_i)^{\gamma_i}, h) \right) = \left( \prod_{i=1}^\ell e(\sigma_i^{\gamma_i}, h) \right)
\]

The cost of verifying a batch of \( \ell \) signatures signed by \( n \) merchants is then \( n + 1 \) pairing operations and \( 2\ell \) group exponentiations in \( G \).

**Dynamic Statekeepers’ Consortia**. So far, we have considered only cases where customers joined and withdrew from the system. Similarly, one can imagine that statekeepers could decide to leave or new statekeepers may want to join an existing deployment. Such functionality can be easily facilitated by modifying the registration and de-registration algorithms available for customers. However, while churning customers do not pose a threat to the system's security, changes in the set of statekeepers may result in attacks.

Such an attack could enable a malicious customer to have two approved transactions with the same index value. As shown in Figure 6, initially, the system features 5 statekeepers (\( s_1, \ldots, s_5 \)) and a merchant who wants to have a transaction \( \tau \) approved, reaches out to \( s_1, s_2, \) and \( s_3 \). Subsequently, two new statekeepers \( s_6 \) and \( s_7 \) join the system. The malicious customer now issues another transaction \( \tau' \), such that \( \tau_i = \tau'_i \). The merchant receiving \( \tau' \) now queries a majority of the statekeepers (i.e., \( s_4, s_5, s_6, \) and \( s_7 \)) and gets the transaction approved. At the final stage of the attack, the customer issues another transaction that invalidates \( \tau \) and \( \tau' \) (e.g., a double-spend), while the malicious merchant quickly claims \( \tau_v \) from the customer's collateral. Because of the way the arbiter processes claims (Line 12 in Algorithm 3), the honest merchant is now unable to claim \( \tau_v \) from the customer's collateral. Moreover, none of the statekeepers equivocated, and thus no funds can be recouped from their collateral.

Snappy can safely support a dynamically changing set of statekeepers if appropriate protection mechanisms are deployed. For example, such attacks can be prevented:
1. By giving early notice to the merchants about changes in the set (e.g., multistage registration).
2. By waiting (a few minutes) until all past transactions are finalized in the blockchain before/after every change.