title:Fault Tolerance Connectors for Unreliable Web Services
author:Nicolas Salatg&apos;e and
Jean-Charles Fabre
Fault Tolerance Connectors for Unreliable Web Services 
LAAS-CNRS, 7 avenue du Colonel Roche, 31077 Toulouse Cedex 04 – France 
Nicolas Salatge and Jean-Charles Fabre 
{nsalatge,fabre}@laas.fr 
having 
specific 
Application 
dependability 
requirements  can  usefully  take  advantage  of  highly 
reliable Web Services  when available. However,  such 
services  might  be  difficult  to  find  on  the  Net  and  in 
addition  be  unreachable 
in  some  circumstances. 
Reliable  WS  can  be  obviously  developed  on  purpose 
but this is not  the philosophy of SOA. In most of the 
cases,  applications  are  built  from  existing  unreliable 
Web Services. The problem is then similar to building 
reliable applications out of unreliable Commercial Off-
The-Shelf  (COTS)  components.  The  issue  is  thus  to 
find external means to equip basic Web Services with 
additional  fault  tolerance  mechanisms.  Separation  of 
concerns is an attractive concept to address this issue. 
However,  separation  of  concern  does  not  mean  total 
independence,  in  particular  regarding  state  handling 
issues  that  are  still  user-defined  as  other  works  like 
Arjuna, Eternal and FT CORBA, for instance. 
implementing  fault 
Our idea is  to  interact with  individual  WS  through 
connectors 
tolerance  features. 
These connectors provide first customized and efficient 
error  detection  mechanisms,  including  user-defined 
assertions,  to  transform  a  WS  into  a  sort  of  self-
checking  software  component  [2].  Secondly,  we 
propose some partially built-in replication mechanisms 
to perform error recovery. The recovery strategies can 
range from simple switch to a spare WS replica to error 
masking  strategies.  Connectors  are  reliable  software 
components  executed  on 
redundant  architecture 
providing several services (runtime executive support, 
connector management, health monitoring, etc.). 
This paper focuses on the fault tolerance features of 
the connectors and the use of redundant services on the 
Net  to  help  making  “reliable  SOA  out  of  unreliable 
Web  Services”.  Section  2  defines  the  notion  of 
connector  and  describes  the  support  infrastructure  to 
develop, execute and manage user-defined connectors. 
Section 3 focuses on the equivalence of service to take 
advantage  of  the  available  resource  redundancy  over 
the 
replication 
mechanisms  and  strategies  provided  are  discussed  in 
Section 4. Section 5 summarizes  the first  experiments 
Internet.  The  various  built-in 
Abstract 
to 
Web  Services  are  commonly  used  to  implement 
service  oriented  architectures/applications.  Service-
oriented  applications  are 
large-scale  distributed 
applications,  typically  highly  dynamic,  by  definition 
loosely  coupled  and  often  unstable  due 
the 
unreliability  of  Web  Services,  which  can  be  moved, 
deleted, and are subject to various sources of failures. 
In this paper, we propose customizable fault-tolerance 
connectors  to  add  fault-tolerance  to  unreliable  Web 
Services, thus filling the gap between clients and Web 
Service providers. Connectors are designed by clients, 
providers  or  dependability  experts  using  the  original 
WSDL  description  of  the  service.  These  connectors 
insert  detection  actions  (e.g.  runtime  assertions)  and 
recovery  mechanisms  (based  on  various  replications 
strategies).  The  connectors  can  use 
identical  or 
equivalent  available  service  replicas.  The  benefits  of 
this approach are demonstrated experimentally. 
1.  Introduction 
Web  Services  are  commonly  used  to  develop 
Service  Oriented  Architectures/Applications  (SOA), 
i.e. large scale distributed application over the Internet. 
Such  applications  primarily  concern  e-commerce,  but 
also e-government, and even more critical applications 
in the near future. The concept of Web Service (WS) is 
a  significant  evolution  of  conventional  solutions  like 
service  definition  using  IDLs,  service  discovery  and 
dynamic  invocation  interfaces,  as  in  CORBA  for 
instance. The focus is to establish contractual relations 
between  client  and  Web  Service  providers  (a  WSDL 
document), such contracts formally describing services 
possibly  discovered  dynamically  over  the  Internet. 
Clearly,  SOA-based  applications  are  highly  dynamic, 
by  definition  loosely  coupled,  subjects  to  frequent 
changes.  Web  Services  used  in  an  application  can  be 
moved,  deleted,  and  subject  to  various  sources  of 
failures, or simply unreachable due  to communication 
faults [1]. This is a natural situation on the Web.  
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007carried out. Related work is addressed in Section 6 and 
section 7 briefly concludes the paper. 
2.  Basic concepts and architectural issues 
2.1.  The notion of “Connector” 
The notion of connector is a  classic  concept of ADLs 
(Architecture  Description  Language)  able  to  make 
explicit  and  to  customize  the  interactions  between 
components  [3].  Similar  notions  have  been  already 
used in other context (DCE, CORBA, EJB), but not yet 
to address fault tolerance issues in SOA. The notion of 
user-defined  Specific  Fault  Tolerance  Connector 
(SFTC) is  a software component  able to  capture Web 
Service  interactions  and  partially  performing  built-in 
fault tolerance actions. 
Figure 1. Role of Connectors 
The  various  mechanisms  provided  by  a  connector 
are devoted to (see Figure 1):  
•  User-defined  runtime assertions  applying checks 
to input/output requests together with built-in error 
detection  and  signaling  mechanisms  by  means  of 
SOAP exceptions returned to the client.  
•  Parameterized built-in recovery actions based on 
various  replication  models  that  can  be  selected  by 
the user, this selection depending very much on the 
target Web Service,  in particular on state handling 
issues and features of the target WS.  
•  Monitoring  and  error  diagnosis  of  the  targeted 
Web  Services,  collecting  errors  information  on 
target  access points, and  leading  to extended error 
reports on Web Services. 
This 
The  connector  must  be  a 
reliable  software 
component.  To  this  aim,  a  specific  language  called 
DeWeL  (DEpendable  WEb  service  Language)  was 
developed.  Its  major  objective  is  to  prevent  software 
faults  using  strong  static  (compile-time)  and  (ii) 
dynamic  (runtime)  verification  of  a  finite  set  of 
language constructs to declare recovery strategies and 
write  runtime  assertions.  As  for  critical  software,  the 
language  applies  coding  restrictions  advocated  in 
standards  (like  DO178B,  CENELEC):  no  dynamic 
allocation,  no  pointers,  no  files,  no  indexed  access  to 
arrays, no standard loops (while, for), no functions, no 
method overriding, no recursive construct, no external 
access to other users data space or system resources. 
traditional 
approach  prevents 
software 
development faults to be introduced, such as those that 
have  been  classified  by  several  industrial  companies 
(e.g.  IBM,  HP,  etc.),  in  ODC  (Orthogonal  Defect 
Classification)  [4]  for  instance.  In  [5],  we  describe  in 
more  details  the  restriction  imposed  by  the  DeWeL 
language 
the 
development process. 
together  with  a 
full  account  of 
Finally,  connectors  can  be  developed  by  an  SOA 
designer acting as a client, a Web Service provider or 
any 
third  party,  namely  a  dependability  expert. 
Combining  connectors  with  the  original  Web  Service 
leads to customized reliable versions of the target WS, 
a  WSDL  contract  being  attached  to  any  connector  at 
the end of the development process. 
2.2.  Notion of execution models 
The  execution  model  describes  behavior  of  a 
connector  at  the  runtime.  For  each  WS  operation,  a 
connector template has several pre-defined sections:  
1)  Pre-processing  and  Post-processing  corresponding 
to assertions developed in DeWel,  
2)  a RecoveryStrategy parameterized with the location 
of  WS  replicas  (e.g.  the  6  Amazon  WS  locations 
over the World) 
3)  pre-defined 
CommunicationException 
and 
ServiceException. 
Figure 2. The linear execution model 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007several 
execution  models, 
The behavior of a connector at runtime correspond 
to 
them 
corresponding  to  a  user-selected  recovery  strategy. 
Execution  models  determine  the  scheduling  of  the 
different actions defined in the template. 
each  of 
is  used, 
When  no 
recovery  mechanism 
the 
execution  model  is  linear.  Figure  2  illustrates  this 
mode  of  operation:  when  the  pre-processing  does  not 
complete  correctly,  it  means 
that  a  user-defined 
runtime  assertion  has  raised  an  exception  that  is 
directly returned to the client. Otherwise, the request is 
forwarded  to  the  WS  provider  where  it  is  processed. 
When the WS provider returns the response as a SOAP 
message, 
If  a 
communication  or  service  exception  is  raised,  the 
corresponding  user-defined  exception  handling 
is 
performed before forwarding a SOAP exception to the 
client. Otherwise, the response is returned to the client.  
This  simple  example  is  illustrative  of  the  various 
recovery 
the  post-processing 
is  executed. 
built-in 
providing 
execution  models 
mechanisms and described in section 4.  
2.3.  Architectural support 
The  management  and  the  execution  of  connectors 
rely  on  a  specific  platform  that  is  a  third-party 
infrastructure  between  clients  and  WS  providers.  The 
storage,  look-up,  delivery,  loading,  monitoring  and 
execution  of  Specific  Fault  Tolerance  Connectors  are 
supported  by  IWSD  (Infrastructure  for  Web  Services 
Dependability).  This 
fault 
tolerance 
connectors 
transparently. 
framework  provides 
services 
support 
run 
to 
Figure 3. The IWSD platform 
The IWSD platform presented in Figure 3 includes 
a  major  component,  the  Dependability  Server  that  is 
responsible  for  loading  connectors  (request  analysis, 
authentication,  verification  of  permissions,  etc.)  and 
running  them.  This  core  component  is  a  sort  of 