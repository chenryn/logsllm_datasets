8.2 Modeling normal software behavior
Let us consider the sudo program in GNU/Linux oper-
ating system. It is a mechanism to enable a permitted
user to execute a command as the superuser or another
user, as speciﬁed in the sudoers conﬁguration ﬁle. Upon
execution, the sudo program runs with superuser privi-
leges and the command supplied as argument is executed
as superuser or another user depending on the conﬁgura-
tion.
Suppose that there is a misconﬁguration in the sudoers
ﬁle that lets any user execute any command as user joe.
In order to do so the scanner must understand the conﬁg-
uration ﬁle sudoers and the interaction rules modeling
the behavior of program sudo must be added. In general,
we expect that we need to model the normal software be-
havior of a small number of programs. Although it’s easy
enough to model new programs using Datalog clauses, a
substantial advantage of our approach has been that the
set of modeling clauses grows much more slowly than
the number of advisories.
9 Related Work
There is a long line of work on network vulnerability
analysis [27, 25, 23, 24, 1, 17]. These works did not ad-
dress how to automatically integrate vulnerability speci-
ﬁcations from the bug-reporting community into the rea-
soning model, crucial for applying the analysis in prac-
tice. A major difference between MulVAL and these pre-
vious works is that MulVAL adopts Datalog as the mod-
eling language, which makes integrating existing bug data-
bases straightforward. Datalog also makes it easy to fac-
tor out various information needed in the reasoning pro-
cess, which enabling us to leverage off-the-shelf tools
and yield a deployable end-to-end system.
Ritchey and Amman proposed using model checking for
network vulnerability analysis [23]. Sheyner, et. al ex-
tensively studied attack-graph generation based on model-
checking techniques [24]. MulVAL adopts a logic-
programming approach and uses Datalog in the modeling
and analysis of network systems. The difference between
Datalog and model-checking is that derivation in Datalog
is a process of accumulating true facts. Since the number
of facts is polynomial in the size of the network, the pro-
cess will terminate efﬁciently. Model checking, on the
other hand, checks temporal properties of every possible
state-change sequence. The number of all possible states
is exponential in the size of the network, thus in the worst
case model checking could be exponential. However, in
network vulnerability analysis it is normally not neces-
sary to track every possible state change sequence. For
network attacks, one can assume the monotonicity prop-
erty — gaining privileges does not hurt an attacker’s abil-
ity to launch more attacks. Thus when a fact is derived
124
14th USENIX Security Symposium
USENIX Association
stating that an attacker can gain a certain privilege, the
fact can remain true for the rest of the analysis process.
Also, if at a certain stage an attacker has multiple choices
for his next step, the order in which he carries out the
next attack steps is irrelevant for vulnerability analysis
under the monotonicity assumption. While it is possible
that a model checker can be tuned to utilize the mono-
tonicity property and prune attack paths that do not need
to be examined, model checking is intended to check rich
temporal properties of a state-transition system. Network
security analysis requires only a small fraction of model-
checking’s reasoning power. And it has not been demon-
strated that the approach scales well for large networks.
Amman et. al proposed a graph-based search algorithms
to conduct network vulnerability analysis [1]. This ap-
proach also assumes the monotonicity property of attacks
and has polynomial time complexity. The central idea
is to use an exploit dependency graph to represent the
pre- and postconditions for exploits. Then a graph search
algorithm can “string” individual exploits and ﬁnd at-
tack paths involves multiple vulnerabilities. This algo-
rithm is adopted in Topological Vulnerability Analysis
(TVA) [13], a framework that combines an exploit know-
ledge base with a remote network vulnerability scanner
to analyze exploit sequences leading to attack goals. How-
ever, it seems building the exploit model involves manual
construction, limiting the tool’s use in practice. In Mul-
VAL, the exploit model is automatically extracted from
the off-the-shelf vulnerability database and no human in-
tervention is needed. Compared with a graph data struc-
ture, Datalog provides a declarative speciﬁcation for the
reasoning logic, making it easier to review and augment
the reasoning engine when necessary.
Datalog has also been used in other security systems.
The Binder [7] security language is an extension of Dat-
alog used to express security statements in a distributed
system. In D1LP, the monotonic version of Delegation
Logic [15], Datalog is extended with delegation constructs
to represent policies, credentials, and requests in distributed
authorization. We feel Datalog is an adequate language
for many security purposes due to its declarative seman-
tics and efﬁcient reasoning.
Modeling vulnerabilities and their interactions can be dated
back to the Kuang and COPS security analyzers for Unix [2,
8]. Recent works in this area include the one by Ramakr-
ishnan and Sekar [21], and the one by Fithen et al [9].
These works consider vulnerabilities on a single host and
use a much ﬁner grained model of the operating system
than ours. The goal is to analyze intricate interactions
of components on a single host that would render the
system vulnerable to certain attacks. The result of this
analysis could serve as attack methodologies to be added
as interaction rules in MulVAL. Speciﬁcally, it is possi-
ble that one can write an interaction rule that expresses
the attack pre and postconditions without mentioning the
details of how the low-level system components interact.
These rules can then be used to reason about the vulnera-
bility at the network level. Thus the work on single-host
vulnerability analysis is complementary to ours.
MulVAL leverages existing work to gather information
needed for its analysis. OVAL [26] provides an excel-
lent baseline method for gathering per-host conﬁgura-
tion information. Also, research in the past ten years has
yielded numerous tools that can manage network con-
ﬁgurations automatically [11, 12, 3, 4]. Although these
works do not directly involve vulnerability analysis, they
provide a good abstraction for the network model, which
is used in MulVAL and simpliﬁes its reasoning process.
Intrusion detection systems have been widely deployed
in networks and extensively studied in the literature [5,
16, 14]. Unlike IDS, MulVAL aims at detecting poten-
tial attack paths before an attack happens. The goal of
the work is not to replace IDS, but rather to complement
it. Having an a priori analysis on the conﬁguration of
a network is important from the defense-through-depth
point of view. Undoubtedly, the more problems discov-
ered before an attack happens, the better the security of
the network.
10 Conclusion
We have demonstrated how to model a network system
in Datalog so that network vulnerability analysis can be
performed automatically and efﬁciently. Datalog enables
us to effectively incorporate bug databases into our anal-
ysis and leverage existing vulnerability and conﬁguration
scanning tools. With all the information represented in
Datalog, a simple Prolog program can perform “what-if”
analysis for hypothetical software bugs efﬁciently. We
have implemented an end-to-end system and tested it on
real and synthesized networks. MulVAL runs efﬁciently
for networks with thousands of hosts, and it has discov-
ered interesting security problems in a real network.
Notes
1Common Vulnerabilities and Exposures (CVE) is a list of
standardized names for vulnerabilities and other information
security exposures. http://cve.mitre.org
USENIX Association
14th USENIX Security Symposium
125
2http://oval.mitre.org/oval/
3Different Priv constructors distinguish between setuid and
non-setuid permissions. For lack of space in this paper, we have
not described the details of our privilege model, which com-
bines concrete users accounts and special symbols that repre-
sent groups of accounts.
4In this benchmark we did not model hundreds of user ma-
chines. We recommend that these should be modeled as we did
“internet,” as one machine. In this case, unlike “internet, ” the
host would have non-malicious users, but would be assumed
to have many vulnerabilities. In our future work we plan to
experiment with such models; at present we recommend our
framework for networks of managed, not unmanaged, hosts.
5 Normally one needs root privileges to install the scanner;
PlanetLab gives its users fake “root” privileges in a chroot en-
vironment; for production use of MulVAL, root privileges are
advisable.
References
[1] Paul Ammann, Duminda Wijesekera, and Saket
Kaushik. Scalable, graph-based network vulnera-
bility analysis. In Proceedings of 9th ACM Confer-
ence on Computer and Communications Security,
Washington, DC, November 2002.
[2] R. Baldwin. Rule based analysis of computer se-
curity. Technical Report TR-401, MIT LCS Lab,
1988.
[3] Yair Bartal, Alain J. Mayer, Kobbi Nissim, and
Avishai Wool. Firmato: A novel ﬁrewall manage-
ment toolkit. In IEEE Symposium on Security and
Privacy, pages 17–31, 1999.
[4] James Burns, Aileen Cheng, Proveen Gurung,
David Martin, Jr., S. Raj Rajagopalan, Prasad Rao,
and Alathurai V. Surendran. Automatic manage-
ment of network security policy.
In DARPA In-
formation Survivability Conference and Exposition
(DISCEX II’01), volume 2, Anaheim, California,
June 2001.
[5] Frdric Cuppens and Alexandre Mige. Alert correla-
tion in a cooperative intrusion detection framework.
In Proceedings of the 2002 IEEE Symposium on Se-
curity and Privacy, page 202. IEEE Computer So-
ciety, 2002.
[6] Evgeny Dantsin, Thomas Eiter, Georg Gottlob,
and Andrei Voronkov. Complexity and expressive
power of logic programming. ACM Comput. Surv.,
33(3):374–425, 2001.
[7] John DeTreville. Binder, a logic-based security
language. In Proceedings of the 2002 IEEE Sym-
posium on Security and Privacy, page 105. IEEE
Computer Society, 2002.
[8] Daniel Farmer and Eugene H. Spafford. The cops
security checker system. Technical Report CSD-
TR-993, Purdue University, September 1991.
[9] William L. Fithen, Shawn V. Hernan, Paul F.
O’Rourke, and David A. Shinberg. Formal model-
ing of vulnerabilities. Bell Labs technical journal,
8(4):173–186, 2004.
[10] Allen Van Gelder, Kenneth Ross, and John S.
Schlipf. Unfounded sets and well-founded seman-
tics for general logic programs. In PODS ’88: Pro-
ceedings of the seventh ACM SIGACT-SIGMOD-
SIGART symposium on Principles of database sys-
tems, pages 221–230, New York, NY, USA, 1988.
ACM Press.
[11] Joshua D. Guttman. Filtering postures: Local en-
forcement for global policies. In Proc. IEEE Symp.
on Security and Privacy, pages 120–129, Oakland,
CA, 1997.
[12] Susan Hinrichs. Policy-based management: Bridg-
ing the gap.
In 15th Annual Computer Security
Applications Conference, Phoenix, Arizona, Dec
1999.
[13] Sushil Jajodia, Steven Noel, and Brian O’Berry.
Topological analysis of network attack vulnerabity.
In V. Kumar, J. Srivastava, and A. Lazarevic, edi-
tors, Managing Cyber Threats: Issues, Approaches
and Challanges, chapter 5. Kluwer Academic Pub-
lisher, 2003.
[14] Samuel T. King, Z. Morley Mao, Dominic G. Luc-
chetti, and Peter M. Chen. Enriching intrusion
alerts through multi-host causality. In The 12th An-
nual Network and Distributed System Security Sym-
posium (NDSS 05), Feb. 2005.
[15] Ninghui Li, Benjamin N. Grosof, and Joan Feigen-
baum. Delegation Logic: A logic-based approach
to distributed authorization. ACM Transaction on
Information and System Security (TISSEC), Febru-
ary 2003. To appear.
[16] Peng Ning, Yun Cui, and Douglas S. Reeves. Con-
structing attack scenarios through correlation of in-
trusion alerts.
In CCS ’02: Proceedings of the
9th ACM conference on Computer and communica-
tions security, pages 245–254. ACM Press, 2002.
126
14th USENIX Security Symposium
USENIX Association
[27] Dan Zerkle and Karl Levitt. NetKuang–A multi-
host conﬁguration vulnerability checker. In Proc. of
the 6th USENIX Security Symposium, pages 195–
201, San Jose, California, 1996.
[17] Steven Noel, Sushil Jajodia, Brian O’Berry, and
Michael Jacobs. Efﬁcient minimum-cost network
hardening via exploit dependency graphs. In 19th
Annual Computer Security Applications Confer-
ence (ACSAC), December 2003.
[18] National Institute of Standards and Technology.
ICAT metabase. http://icat.nist.gov/icat.cfm, Octo-
ber 2004. web page fetched on October 28, 2004.
[19] Giridhar Pemmasani, Hai-Feng Guo, Yifei Dong,
C.R. Ramakrishnan, and I.V. Ramakrishnan. On-
line justiﬁcation for tabled logic programs. In The
7th International Symposium on Functional and
Logic Programming, April 2004.
[20] Larry Peterson, Tom Anderson, David Culler, and
Timothy Roscoe. A blueprint for introducing dis-
ruptive technology into the internet.
In Proceed-
ings of the 1st Workshop on Hot Topics in Networks
(HotNets-I), October 2002.
[21] C. R. Ramakrishnan and R. Sekar. Model-based
analysis of conﬁguration vulnerabilities. Journal of
Computer Security, 10(1-2):189–209, 2002.
[22] Prasad Rao, Konstantinos F. Sagonas, Terrance
Swift, David S. Warren, and Juliana Freire. XSB:
A system for efﬁciently computing well-founded
semantics.
In Proceedings of the 4th Interna-
tional Conference on Logic Programming and Non-
Monotonic Reasoning (LPNMR’97), pages 2–17,
Dagstuhl, Germany, July 1997. Springer Verlag.
[23] Ronald W. Ritchey and Paul Ammann. Using
model checking to analyze network vulnerabilities.
In 2000 IEEE Symposium on Security and Privacy,
pages 156–165, 2000.
[24] Oleg Sheyner, Joshua Haines, Somesh Jha, Richard
Lippmann, and Jeannette M. Wing. Automated
generation and analysis of attack graphs.
In Pro-
ceedings of the 2002 IEEE Symposium on Security
and Privacy, pages 254–265, 2002.
[25] Steven J. Templeton and Karl Levitt.
A re-
quires/provides model for computer attacks.
In
Proceedings of the 2000 workshop on New security
paradigms, pages 31–38. ACM Press, 2000.
[26] Matthew Wojcik, Tiffany Bergeron, Todd Wittbold,
and Robert Roberge. Introduction to OVAL: A new
language to determine the presence of software vul-
nerabilities. http://oval.mitre.org/documents/docs-
03/intro/intro.html, November 2003. Web page
fetched on October 28, 2004.
USENIX Association
14th USENIX Security Symposium
127
A A Sample Attack Trace
In this section, we present a trace for the example pol-
icy violation discussed in section 5.2. We wrote a meta-
interpreter to generate the attack tree and visualize it in
plain text or html format. In the future we hope to use
XSB’s online justiﬁer [19] to dump an attack graph and
visualize it.
The trace for one of the policy violation is shown below.
Each internal node is attributed with the rule used to de-
rive the node.
|-- policyViolation(attacker,read,projectPlan)
|-- dataBind(projectPlan,workStation,/home)
|-- accessFile(attacker,workStation,read,’/home’)
Rule: execCode implies file access
|-- execCode(attacker,workStation,root)
Rule: Trojan horse installation
|-- malicious(attacker)
|-- accessFile(attacker,workStation,write,’/sharedBinary’)
Rule: NFS semantics
|-- nfsMounted(workStation,’/sharedBinary’,fileServer,’/export’,read)
|-- accessFile(attacker,fileServer,write,’/export’)
Rule: execCode implies file access
|-- execCode(attacker,fileServer,root)
Rule: remote exploit of a server program
|-- malicious(attacker)
|-- vulExists(fileServer,CAN-2003-0252,mountd,remoteExploit,privEscalation)
|-- networkServiceInfo(fileServer,mountd,rpc,100005,root)
|-- netAccess(attacker,fileServer,rpc,100005)
Rule: multi-hop access
|-- execCode(attacker,webServer,apache)
Rule: remote exploit of a server program
|-- malicious(attacker)
|-- vulExists(webServer,CAN-2002-0392,httpd,remoteExploit,privEscalation)
|-- networkServiceInfo(webServer,httpd,tcp,80,apache)
|-- netAccess(attacker,webServer,tcp,80)
Rule: direct network access
|-- located(attacker,internet)
|-- hacl(internet,webServer,tcp,80)
|-- hacl(webServer,fileServer,rpc,100005)
|-- localFileProtection(fileServer,root,write,/export)
|-- localFileProtection(workStation,root,read,/home)
|-- not allow(attacker,read,projectPlan)
Figure 4: A sample attack tree
128
14th USENIX Security Symposium
USENIX Association