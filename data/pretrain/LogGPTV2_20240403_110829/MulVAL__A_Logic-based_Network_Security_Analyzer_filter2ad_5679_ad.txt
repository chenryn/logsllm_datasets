### 8.2 Modeling Normal Software Behavior

Consider the `sudo` program in the GNU/Linux operating system. This utility allows a permitted user to execute commands with the privileges of the superuser or another specified user, as defined in the `sudoers` configuration file. When executed, the `sudo` program runs with superuser privileges, and the command provided as an argument is executed as the superuser or another user, depending on the configuration.

Suppose there is a misconfiguration in the `sudoers` file that allows any user to execute any command as the user `joe`. To detect such a misconfiguration, the scanner must understand the `sudoers` configuration file, and the interaction rules modeling the behavior of the `sudo` program must be added. Generally, we expect to model the normal software behavior of a small number of programs. Although it is relatively easy to model new programs using Datalog clauses, a significant advantage of our approach is that the set of modeling clauses grows much more slowly than the number of advisories.

### 9 Related Work

There is a long history of work on network vulnerability analysis [27, 25, 23, 24, 1, 17]. These works did not address how to automatically integrate vulnerability specifications from the bug-reporting community into the reasoning model, which is crucial for practical application. A key difference between MulVAL and these previous works is that MulVAL uses Datalog as the modeling language, making it straightforward to integrate existing bug databases. Datalog also facilitates factoring out various information needed in the reasoning process, enabling the use of off-the-shelf tools and resulting in a deployable end-to-end system.

Ritchey and Amman proposed using model checking for network vulnerability analysis [23], while Sheyner et al. extensively studied attack-graph generation based on model-checking techniques [24]. MulVAL, on the other hand, adopts a logic-programming approach and uses Datalog for modeling and analyzing network systems. The primary difference between Datalog and model checking is that derivation in Datalog involves accumulating true facts, which are polynomial in the size of the network, ensuring efficient termination. Model checking, however, checks temporal properties of every possible state-change sequence, which can be exponential in the size of the network. For network vulnerability analysis, it is usually unnecessary to track every possible state change. Under the monotonicity assumption—where gaining privileges does not hinder an attacker's ability to launch more attacks—a fact derived stating that an attacker can gain a certain privilege remains true for the rest of the analysis. Additionally, if an attacker has multiple choices for their next step, the order in which they carry out these steps is irrelevant under the monotonicity assumption. While model checkers can be tuned to utilize the monotonicity property and prune unnecessary attack paths, they are designed to check rich temporal properties of state-transition systems, and network security analysis requires only a fraction of this reasoning power. It has not been demonstrated that model checking scales well for large networks.

Amman et al. proposed a graph-based search algorithm for network vulnerability analysis [1]. This approach also assumes the monotonicity property of attacks and has polynomial time complexity. The central idea is to use an exploit dependency graph to represent the pre- and postconditions for exploits. A graph search algorithm can then "string" individual exploits and find attack paths involving multiple vulnerabilities. This algorithm is used in Topological Vulnerability Analysis (TVA) [13], a framework that combines an exploit knowledge base with a remote network vulnerability scanner to analyze exploit sequences leading to attack goals. However, building the exploit model often involves manual construction, limiting its practical use. In MulVAL, the exploit model is automatically extracted from an off-the-shelf vulnerability database, eliminating the need for human intervention. Compared to a graph data structure, Datalog provides a declarative specification for the reasoning logic, making it easier to review and augment the reasoning engine when necessary.

Datalog has also been used in other security systems. The Binder [7] security language is an extension of Datalog used to express security statements in distributed systems. In D1LP, the monotonic version of Delegation Logic [15], Datalog is extended with delegation constructs to represent policies, credentials, and requests in distributed authorization. We believe Datalog is an adequate language for many security purposes due to its declarative semantics and efficient reasoning.

Modeling vulnerabilities and their interactions dates back to the Kuang and COPS security analyzers for Unix [2, 8]. Recent works in this area include those by Ramakrishnan and Sekar [21] and Fithen et al. [9]. These works consider vulnerabilities on a single host and use a finer-grained model of the operating system than ours. The goal is to analyze intricate interactions of components on a single host that could render the system vulnerable to certain attacks. The results of this analysis can serve as attack methodologies to be added as interaction rules in MulVAL. Specifically, it is possible to write an interaction rule that expresses the attack pre- and postconditions without detailing the low-level system component interactions. These rules can then be used to reason about the vulnerability at the network level, making single-host vulnerability analysis complementary to our work.

MulVAL leverages existing work to gather the information needed for its analysis. OVAL [26] provides an excellent baseline method for gathering per-host configuration information. Additionally, research over the past ten years has yielded numerous tools for managing network configurations automatically [11, 12, 3, 4]. Although these works do not directly involve vulnerability analysis, they provide a good abstraction for the network model, simplifying the reasoning process in MulVAL.

Intrusion detection systems (IDS) have been widely deployed in networks and extensively studied in the literature [5, 16, 14]. Unlike IDS, MulVAL aims to detect potential attack paths before an attack occurs. The goal is not to replace IDS but to complement it. Conducting a priori analysis of a network's configuration is important from a defense-in-depth perspective. The more problems discovered before an attack, the better the security of the network.

### 10 Conclusion

We have demonstrated how to model a network system in Datalog to perform automatic and efficient network vulnerability analysis. Datalog enables us to effectively incorporate bug databases into our analysis and leverage existing vulnerability and configuration scanning tools. With all the information represented in Datalog, a simple Prolog program can efficiently perform "what-if" analysis for hypothetical software bugs. We have implemented an end-to-end system and tested it on real and synthesized networks. MulVAL runs efficiently for networks with thousands of hosts and has discovered interesting security problems in real networks.

### Notes
1. Common Vulnerabilities and Exposures (CVE) is a list of standardized names for vulnerabilities and other information security exposures. http://cve.mitre.org
2. http://oval.mitre.org/oval/
3. Different Priv constructors distinguish between setuid and non-setuid permissions. Due to space constraints, we have not described the details of our privilege model, which combines concrete user accounts and special symbols representing groups of accounts.
4. In this benchmark, we did not model hundreds of user machines. We recommend modeling them as we did for "internet," as one machine. In this case, unlike "internet," the host would have non-malicious users but would be assumed to have many vulnerabilities. In future work, we plan to experiment with such models; currently, we recommend our framework for networks of managed, not unmanaged, hosts.
5. Normally, root privileges are required to install the scanner. PlanetLab gives its users fake "root" privileges in a chroot environment; for production use of MulVAL, root privileges are advisable.

### References
[References listed here as in the original text]

### Appendix A: A Sample Attack Trace

In this section, we present a trace for the example policy violation discussed in Section 5.2. We wrote a meta-interpreter to generate the attack tree and visualize it in plain text or HTML format. In the future, we hope to use XSB’s online justifier [19] to dump an attack graph and visualize it.

The trace for one of the policy violations is shown below. Each internal node is attributed with the rule used to derive the node.

```
|-- policyViolation(attacker, read, projectPlan)
|-- dataBind(projectPlan, workstation, /home)
|-- accessFile(attacker, workstation, read, /home)
   Rule: execCode implies file access
|-- execCode(attacker, workstation, root)
   Rule: Trojan horse installation
|-- malicious(attacker)
|-- accessFile(attacker, workstation, write, /sharedBinary)
   Rule: NFS semantics
|-- nfsMounted(workstation, /sharedBinary, fileServer, /export, read)
|-- accessFile(attacker, fileServer, write, /export)
   Rule: execCode implies file access
|-- execCode(attacker, fileServer, root)
   Rule: remote exploit of a server program
|-- malicious(attacker)
|-- vulExists(fileServer, CAN-2003-0252, mountd, remoteExploit, privEscalation)
|-- networkServiceInfo(fileServer, mountd, rpc, 100005, root)
|-- netAccess(attacker, fileServer, rpc, 100005)
   Rule: multi-hop access
|-- execCode(attacker, webServer, apache)
   Rule: remote exploit of a server program
|-- malicious(attacker)
|-- vulExists(webServer, CAN-2002-0392, httpd, remoteExploit, privEscalation)
|-- networkServiceInfo(webServer, httpd, tcp, 80, apache)
|-- netAccess(attacker, webServer, tcp, 80)
   Rule: direct network access
|-- located(attacker, internet)
|-- hacl(internet, webServer, tcp, 80)
|-- hacl(webServer, fileServer, rpc, 100005)
|-- localFileProtection(fileServer, root, write, /export)
|-- localFileProtection(workstation, root, read, /home)
|-- not allow(attacker, read, projectPlan)
```

**Figure 4: A sample attack tree**

---

This optimized version maintains the original content while improving clarity, coherence, and professionalism.