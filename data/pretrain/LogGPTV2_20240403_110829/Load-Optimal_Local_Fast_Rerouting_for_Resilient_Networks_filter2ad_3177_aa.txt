title:Load-Optimal Local Fast Rerouting for Resilient Networks
author:Yvonne Anne Pignolet and
Stefan Schmid and
Gilles Tr&apos;edan
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Load-Optimal Local Fast Rerouting
for Resilient Networks
1
Yvonne-Anne Pignolet
1 ABB Corporate Research, Switzerland
2
Stefan Schmid
3
Gilles Tredan
2 Aalborg University, Denmark 3 CNRS-LAAS, France
Abstract—Reliable and highly available computer networks
must implement resilient fast rerouting mechanisms: upon a
link or node failure, an alternative route is determined quickly,
without involving the network control plane. Designing such fast
failover mechanisms capable of dealing with multiple concurrent
failures however is challenging, as failover rules need to be
installed proactively, i.e., ahead of time, without knowledge of
the actual failures happening at runtime. Indeed, only little is
known today about the design of resilient routing algorithms.
This paper presents a deterministic local failover mechanism
which we prove to result in a minimum network load for a wide
range of communication patterns, solving an open problem. Our
mechanism relies on the key insight that resilient routing es-
sentially constitutes a distributed algorithm without coordination.
Accordingly, we build upon the theory of combinatorial designs
and develop a novel deterministic failover mechanism based on
symmetric block design theory which tolerates a maximal number
of Ω(n) link failures in an n-node network and in the worst-
case, while always ensuring routing connectivity. In particular,
we show that at least Ω(φ2) link failures are needed to generate a
maximum link load of at least φ, which matches an existing bound
on the number of link failures needed for an optimal failover
scheme. We complement our formal analysis with simulations,
showing that our approach outperforms prior schemes not only
in the worst-case.
I. INTRODUCTION
Computer networks, including enterprise, datacenter, and
carrier networks, have become a critical infrastructure of
our information society. Accordingly, there are increasingly
stringent requirements on such networks, especially regarding
dependability (availability and fault-tolerance).
A. The Context: The Need for Fast Failover
The ability to quickly recover from failures is a key
requirement for dependable computer networks. Especially
link failures are common and frequent today [19], and link
failures do happen concurrently [1], [6], [8]. Even without
physically disconnecting the underlying topology, these link
failures can cause routing failures disrupting communications
between some hosts.
B. The Problem: Slow Coordination
The reconvergence times in traditional routing systems after
failures are known to be high. In a nutshell, in these traditional
routing systems, whenever a link or node fails, routing tables
are recomputed by executing the (distributed) routing protocol
again. These recomputations result in relatively long outages
after failures, sometimes in the order of seconds, leading to
high packet loss rates [30].
While recent advances in routers have reduced reconvergence
times to under a second for carefully conﬁgured networks using
link state IGPs, this is still too high for critical Internet services
which are sensitive to periods of trafﬁc loss that are orders of
magnitude shorter than this.
The problem is particularly cumbersome in the Wide-Area
Network (WAN) which needs to be operated near capacity for
efﬁciency [14], [15]. In case of an uninformed or slow failover,
a single link failure can have a severe impact, in terms of
buffer overﬂows and packet drops. Indeed, a more predictable
and fast failover was also one of the key reasons for Google’s
move to SDN [28].
C. The Solution: No Coordination
Modern computer networks hence include pre-computed
backup routes and rules for fast failover, allowing for very fast
failure detection and re-routing. These local inband re-routing
mechanisms are often meant as a ﬁrst line of defense, and the
resulting fast but simple rerouting is just a temporary solution,
before the control plane rigorously optimizes the ﬂow allocation
for the new network topology. A most well-known example is
Fast Reroute in MPLS where, upon a link failure, packets are
sent along a precomputed alternate path without waiting for
the global recomputation of routes. These mechanisms avoid
the complexities involved in distributed coordination among
switches or routers, but are completely local approaches: the
reaction of a router only depends on the status of its incident
links, and a router does not inform other routers about failures.
In this case, the disruption time can be limited to the small
time taken to detect the adjacent failure and invoke the backup
routes.
D. The Challenge: Multiple Failures
The challenge of designing resilient local fast rerouting
mechanisms is that these mechanisms need to rely on local
knowledge only: In contrast to dynamic routing tables which
may change in response to link failures (e.g., using link
reversals [11]), failover routing tables are usually statically
preconﬁgured. However, rerouting trafﬁc along efﬁcient paths
based on local decisions only is challenging in the presence
of multiple failures.
Things become even more difﬁcult if packet tagging (i.e.,
keeping information about observed failures along the packet
trajectory in the packet header itself) is unavailable or undesired:
while including information in the packet header can be used
to keep track of observed failures along the path of the speciﬁc
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.43
345
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
packet, tagging comes with overheads (in terms of header space,
additional rules, and time) and can also cause problems in the
presence of middleboxes [21].
Indeed, in this paper we are interested in most simple routing
algorithms, which do not require any dynamic state in the
packet header nor at the routers themselves. In particular,
we consider the well-established oblivious (i.e., non-adaptive)
routing model [23].
The fundamental question is then [6]: how resilient can
static forwarding tables be? That is, how many link failures
can failover routing tolerate before connectivity is interrupted
(i.e., packets are trapped in a forwarding loop, or hit a dead
end) without invoking the control plane or using tagging? At
ﬁrst sight, it seems difﬁcult to implement a high degree of
fault-tolerance in a setting where routers are restricted to pre-
conﬁgured failover rules, have a local view, and cannot resort
to packet tagging. Moreover, it has recently been shown that
there is an inherent tradeoff between the robustness and the
resulting worst-case network load [3].
E. Our Contributions
This paper presents the design of a very resilient fast
failover scheme, tolerating multiple link and node failures,
while keeping the network load low (asymptotically matching
an existing lower bound [3]). Our re-routing algorithms are
oblivious, and do not require packet tagging.
We formally prove that our failover scheme provides an
optimal resilience while minimizing link loads for many
important trafﬁc models, including the frequently studied
permutation routing model [23], [29] or all-to-one routing [3],
[5].
Our approach is based on the insight that resilient local
failover mechanisms can essentially be seen as distributed
algorithms without coordination: a subﬁeld of distributed
computing where devices solve a problem in parallel without
exchanging information among them. In particular, we establish
a connection to combinatorial design theory [26] and present
a novel failover mechanism building upon symmetric block
designs.
We focus on oblivious routing, where all packets of the same
TCP ﬂow will be forwarded the same way (namely based on
source and destination only). However, we conjecture that our
techniques are relevant or even optimal in many other scenarios
as well (in particular for adaptive routing).
F. Background & Preliminaries
Our approach is very general, and relevant for any resilient
routing mechanism based on a static failover technology. In
particular, it applies to Software-Deﬁned Networks (SDNs)
and their standard protocol, OpenFlow. In a nutshell, an SDN
outsources and consolidates the control over a set of network
switches to a logically centralized controller. As this controller
is decoupled from the data plane, interactions with the controller
introduce non-trivial latencies and overheads. Accordingly,
OpenFlow offers a local fast failover mechanism which could
potentially provide high-throughput forwarding in the face of
multiple simultaneous failures without communication with
the controller: an OpenFlow switch can be pre-conﬁgured with
a set of failover rules for each ﬂow. Different ﬂows can be
deﬁned e.g., based on layer-2, layer-3 and layer-4 header ﬁelds.
The failover rules become active based on the status of the links
incident to the given switch, without contacting the controller.
If a local fast failover scheme is implemented at the hardware
level, it can react near-instantaneously to link failures. Our
mechanism can be implemented in OpenFlow based on failover
group tables designed speciﬁcally to detect and overcome port
failures. A group has a list of action buckets and each bucket
has a watch port as a special parameter. The switch monitors
liveness of the indicated port. If it is down, this bucket will
not be used and the group quickly selects the next bucket (i.e.,
the backup tunnel) in the list with a watch port that is up.
The failover mechanism presented in this paper is based
on combinatorial design theory [26]. In a nutshell, combina-
torial mathematics deal with the existence, construction and
properties of systems of ﬁnite sets whose arrangements satisfy
generalized concepts of balance and/or symmetry. Traditionally,
combinatorial designs are built around Balanced Incomplete
Block Designs (BIBDs), Hadamard matrices and Hadamard
designs, symmetric BIBDs, Latin squares, resolvable BIBDs,
difference sets, and pairwise balanced designs (PBDs). Other
combinatorial designs are related to or have been developed
from the study of these fundamental ones. We refer the reader
to [26] for more background.
G. Organization
The remainder of this paper is organized as follows. Sec-
tion II introduces our problem statement and formal model. In
Section III we characterize resilient oblivious routing schemes,
and in Section IV, present our approach together with a formal
analysis. Section V evaluates the performance of our failover
schemes by simulation, followed by a discussion of related
work in Section VI. The paper is concluded in Section VII.
II. PROBLEM STATEMENT & MODEL
We assume an SDN-network G = (V, E) with n OpenFlow
switches (or simply nodes) V = {v1, . . . , vn} connected by
bidirectional links E. Each node v stores two kinds of ﬂow
rules:
1) The original ﬂow rules, describing the “regular” for-
warding behavior for packets of a given ﬂow1 arriving
at v.
2) The (conditional) failover ﬂow rules, describing how
packets of a given ﬂow arriving at v should be forwarded
in case of incident link or node failures. Both the original
and the failover ﬂow rules have been pre-installed by the
controller and are static.
We focus on oblivious routing schemes in this paper: in
oblivious routing, the route of a packet does not depend on
1Note that multiple ﬂows may have the same source and destination
node. However they may belong to different connections, e.g., different TCP
connections.
346
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:05 UTC from IEEE Xplore.  Restrictions apply. 
other packets, and in particular, is independent of the load in
the network.
We consider an initial network where all nodes are directly
connected. The communication pattern C of the ﬂows routed
on the network is represented by a list of source and destination
pairs of nodes. For simplicity we will call
item
in C ﬂow i, with source si and destination di. For ease of
presentation, we will assume that there are at most n ﬂows in
the ﬁrst part of the paper and later show how to extend the
approach for more ﬂows.
the ith
Deﬁnition 1 (Load Overhead). Let G = (V, E) be a graph,
and e ∈ E an edge. The load overhead φ(e) is the number of
additional ﬂows fi crossing edge e due to rerouting. Henceforth,
let φ = maxe∈E φ(e) denote the maximum overhead load
(often called simply load in the remainder of the paper).
We study failover schemes that pursue two goals:
1) Correctness: The route taken by each ﬂow is a valid path;
there are no forwarding loops. In this paper, we will aim
to ensure correct paths even under a large number of
failures (a resilience property).
2) Balanced overhead: The resulting ﬂow allocations are
“load-balanced”, i.e., minimize the overhead load of
the maximally loaded link in G after the failover:
min maxe∈E φ(e).
Note that ﬂows that follow their path without rerouting
do not contribute to the overhead load. To analyse the load
overhead of a failover scheme in a network with F failed links
(we express node failures in terms of the node’s incident links
which fail with it2), we need some more deﬁnitions. In general,
to study the limits of the failover scheme, we focus on worst-
case overhead load: we assume the link failures are determined
by an adversary knowing the resilient routing protocol.
Deﬁnition 2. Let F be a set of failed links, F ⊂ E. Given a
communication pattern C, a worst case scenario constitutes a
set of failed links F that generate the worst overhead load φ,
chosen by an omniscient adversary knowing the failover scheme.
Fo(φ) is deﬁned as the set of optimal attacks (in terms of
minimal required number of failures) leading to an overhead
load φ. That is, ∀φ ≤ n,∀F ∈ Fo(φ), there is at least one
(non-failed) link e such that the overhead load φ(e) under a
link failure set F is φ and there are no link failure sets smaller
than |F| generating the same overhead load.
Besides considering n arbitrary ﬂows, we also consider two
well-studied more speciﬁc communication patterns: all-to-one
communication and permutation routing.
III. CHARACTERIZING OBLIVIOUS
RESILIENT ROUTING SCHEMES
Our proposed failover scheme can be best described in the
form of a matrix (similar to the one used by Borokhovich
2Obviously, a node which failed can no longer be reached. While our
approach is more general, it is only interesting under node failures if the
remaining connectivity is still high.
and Schmid [3] for all-to-one routing). The matrix indicates,
for each of the n ﬂows (one per row), the backup forwarding
sequence. That is, any failover scheme S can be represented
in a generic matrix form M = [mi,j] (See upcoming example
in Figure 1).
⎡
⎢⎢⎢⎢⎢⎢⎣
M =
⎤
⎥⎥⎥⎥⎥⎥⎦ .
m1,1 m1,2
...
...
mi,1 mi,2
...
...
mn,1 mn,2
. . . m1,n
...
. . .
. . . mi,n
...
. . .
. . . mn,n
Any failover scheme instance S will always forward a
message directly to the destination, if the corresponding link
is available. Otherwise, if a message of the ith
ﬂow from
source si cannot reach its destination di directly via (si, di),
it will resort to the sequence of alternatives represented as
the row i in the matrix mi,· (the “backup nodes” for the ith
ﬂow), as described in Algorithm 1. Node si will ﬁrst try to
forward to node mi,1, if this link is not available to node mi,2,
and so on. More generally, if a message with source si is
currently at node mi,j it will be forwarded directly to the
destination di, if the link (mi,j, d) is available. Otherwise, the
failover scheme will try to send it to mi,j+1, mi,j+2, etc. In
other words, if the link (mi,j, mi,j+1) is not available, then the
link (mi,j, mi,j+2) is tried next, and so on. If (mi,j, mi,j+2)
is available, the message will be forwarded to node mi,j+2.
If this node cannot reach di, that is (mi,j+2, d) failed, the
link (mi,j+2, mi,j+3) will be tried, etc.
Algorithm 1 Rerouting given a Failover Matrix M
Upon receiving a packet of ﬂow i at node v:
1: if destination not reached yet, di (cid:6)= v then
2:
3:
4:
5:
6:
7:
8:
if (v, di) available then
forward packet to di