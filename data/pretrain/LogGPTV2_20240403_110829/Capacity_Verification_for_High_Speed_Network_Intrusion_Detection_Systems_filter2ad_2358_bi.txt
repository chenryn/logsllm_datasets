0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
2
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
attacker’s actions have been successful. IDS-C in particular in one instance
indicated us that the HTTP request for the password ﬁle was successful, and in
another instance indicated that something that looked like a password ﬁle was
being sent out of the protected network. These two elements show that extended
diagnostic while not generally available is indeed possible and that this extended
diagnostic eases the analyst’s work.
Of course, this extended diagnostic still does not meet our expectations. In
particular, it does require an analyst to manually correlate the three or four
alerts related to the attack, as the intrusion-detection probe merely provides the
alerts side by side without eliciting any relationship between them. In addition,
each alert keeps the evaluation of its own severity, whereas the most relevant
information would be an aggregated and appropriately weighted severity of all
related alerts.
4.6 Results of the Signature Evaluation Tests
The results presented here are related to three vulnerabilities out of the 60 that
the test bed currently checks. They are representative of all observed behaviours.
1.1: scan () @roots >> add.exe
1.2: scan () @roots >> add.exe?
1.3: scan () @roots >> add.exe?foo
1.4: scan () @roots >> add.exe?C:\inetpub\iissamples\default\samples.asp
Fig. 1. Signature evaluation for the add.exe vulnerability
192
H. Debar and B. Morin
Figure 1 shows an extract of the Whisker database ﬁle for the evaluation of
the add.exe vulnerability. For this vulnerability, four requests are sent, although
the ﬁrst two could be considered equivalent because the HTTP standard does
not diﬀerentiate between the absence of arguments to a CGI script and the
empty argument. Therefore, the ﬁrst two requests result in starting the add.exe
script with an empty QUERY STRING. The third request passes an argument
to the CGI script in an attempt to simulate normal usage and the fourth one
constitutes the eﬀective attack.
For each of the requests the test bed receives the same ADD.EXE alert.
This suggests that the pattern detecting the malicious activity for all of the
intrusion detection systems is similar to (in perl-like regular expression syntax)
‘‘/add\.exe’’. In each case, the attacker receives diﬀerent information. In each
case, the diagnostic provided by the intrusion-detection systems is the same. As
such, we consider this diagnostic incomplete. A normal request to the script is
ﬂagged as anomalous by the intrusion-detection system with exactly the same
severity as a scan or an intrusive attempt. Our conclusion is that for every alert
generated, valuable analyst time must be spent on assessing the activity whereas
the intrusion-detection system could automate the process.
Figure 2 shows an extract of the Whisker database ﬁle for the evaluation of
the Cart32 vulnerability. Again, the ﬁrst two requests are related to scanning and
the third one to normal activity (although normal activity is more complex than
that). The two last lines are direct malicious attempts exploiting two diﬀerent
Cart32 vulnerabilities.
2.1: scan () @roots >> c32web.exe
2.2: scan () @roots >> c32web.exe?
2.3: scan () @roots >> c32web.exe?foo
2.4: scan () @roots >> c32web.exe?TabName=Cart32%2B
&Action=Save+Cart32%2B+Tab &SaveTab=Cart32%2B &Client=foobar
&ClientPassword=e%21U%23 %25%28%5D%5D%26%25*%2B-a &Admin= &AdminPassword=
&TabToSave=Cart32%2B &PlusTabToSave =Run+External+Program &UseCMDLine=Yes
&CMDLine=cmd.exe+%2Fc+dir+%3E+c%3A%5Cfile.txt
2.5: scan () @roots >> cart32.exe/cart32clientlist
Fig. 2. Signature evaluation for the Cart32 vulnerability
The tested intrusion-detection systems generate an alert only on the last
request (line 2.5). Neither the scanning activity of the 2 ﬁrst requests nor the
attack attempt from the fourth generate any noise, although any analyst will
consider that the one before last (line 2.4) looks extremely suspicious. This case
illustrates that the signature for the Cart32 vulnerability is too restrictive, be-
cause additional vulnerabilities discovered more recently and aﬀecting the same
base software are not covered by the signature.
Evaluation of the Diagnostic Capabilities
193
This does not contradict our analysis of the Add.exe vulnerability test (too
simple signatures giving too many alerts). Our analysis proceeds from the same
logic, namely that in both cases the diagnostic provided is extremely imprecise
and requires manual analysis to verify the exact circumstances of the attack
and assess the extend of the damage. Assessing the alert with the appropriate
adjacent and related activity would allow broader signatures (hence less misses)
with varying severity levels (hence facilitating the analyst’s work). This analysis
is expanded in Sect. 5.3.
Figure 3 shows an extract of the Whisker database ﬁle for the evaluation of
the shtml.exe vulnerability. The real attack is on line 2.4, line 2.5 representing
a variation of ours to check whether the signature implemented in the tested
intrusion-detection systems includes the slash between the components or not.
3.1: scan () / >> vti bin/shtml.exe
3.2: scan () / >> vti bin/shtml.exe?
3.3: scan () / >> vti bin/shtml.exe?toto
3.4: scan () / >> vti bin/shtml.exe/prn
3.5: scan () / >> vti bin/shtml.exe?prn
Fig. 3. Signature evaluation for the shtml vulnerability
One of the tested commercial intrusion-detection systems crashed hard on
the four requests not speciﬁcally targeting the vulnerability while correctly di-
agnosing the malicious attempt (e.g all requests except 3.4). This illustrates the
diﬃculty of testing network-based intrusion-detection systems. Our suspicion is
that vendors test products using a database of network frames representative of
instances of the execution of a given vulnerability, without rebuilding the vulner-
able environment and testing with live attacks. Therefore, attack variants that
could be introduced accidentally because the operating system handles network
traﬃc a bit diﬀerently, or intentional variants such as ours, are not tested and
end up introducing faults in the software.
5 Proposed Model for an Intrusion-Detection System
Our test results clearly show that there is still a lot of work to be carried out
within the intrusion-detection community to improve the systems that are being
deployed today. We believe that the most serious issue highlighted by our tests
is the diagnostic issue, namely the lack of details in the information transmitted
to the analyst whereas useful information could be automatically extracted from
the data source. From this, we take a look at the current model for intrusion-
detection systems proposed by the intrusion-detection working group (IDWG)
of the IETF and propose several improvements that would result in better diag-
nostic.
194
H. Debar and B. Morin
5.1 The IDWG Model of an Intrusion-Detection System
The model of an intrusion-detection system proposed by the IDWG in its re-
quirements document [15] has several components. We refer the interested reader
to the Internet Draft (or the upcoming RFC) for the complete description. We
really are interested here in the analysis (boxes) and data (italics) components
as shown in Fig. 4(a).
DATA SOURCE
DATA SOURCE
SENSOR
EVENT
PROBE
ANALYZER
ALERT
MANAGER
SENSOR
EVENT
EXTRACTOR
FEATURE
PROBE
ANALYZER
ALERT
MANAGER
(a) IDWG IDS  system model
(b) Proposed IDS  system model
Fig. 4. The IDWG IDS model
Concerning the data components, the data source provides raw information
tapped by the sensor. The sensor parses and formats information available in
the data source and into events that are sent to the analyzer. The analyzer
processes the events to realize the actual detection process and provide alerts
indicating that malicious activity has been discovered. The alerts are sent to
the manager for management and further processing. Note that the model
provides for multiple ﬂows of information, for example for multiple sensors to
send events to one analyzer. Also, a component could play both the role of an
analyzer for dialogs with upstream components and the role of a manager
for downstream components.
Let’s take the example of one of the tested network-based intrusion-detection
systems. The data source is the network packets that are sent on the wire. The
sensor taps the network and formats the information retrieved, for example
applying the anti-evasion techniques presented in [10] and possibly further de-
composing the information to retrieve protocol states. The analyzer then takes
this information and decides according to its attack signatures to generate an
alert. Note that this example collapses the sensor and analyser components
together into an opaque box performing data acquisition, formatting and anal-
ysis altogether.
Evaluation of the Diagnostic Capabilities
195
5.2 Our Proposal for an Enhanced Model
Figure 4(b) presents our extension to the IDWG model. It is indeed a very
simple extension, consisting of the insertion of a feature extraction mechanism
(extractor taking events and providing features to the analyzer. While this
seems like a minor change, we do believe it is important particularly in light
of the test results shown in Sect. 4.5 and 4.6. The intrusion-detection systems
tested to not provide a complete analysis and limit themselves to the feature
extraction stage. Each feature is extracted from the data source and sent to the
management console independently of the others, regardless of the fact that the
features may be linked and thus loosing the link information in transit.
In addition, the quest for performance seems to push intrusion-detection
vendors into not performing the complete feature extraction stage. Matching
multiple patterns has a cost; exiting early from the search loop allows vendors
to claim higher processing rates and gigabit capacity, which is often needed by
customers. However, customers often do not realize that trading performance
for accuracy will deter them from actually using the intrusion-detection system.
This quest for performance also impacts the sensor, limiting the reconstruction
of network data to IP and TCP fragmentation rather than analysing the actual
TCP session from establishment to teardown.
Let’s take the example of an HTTP request for the password ﬁle using the phf
vulnerability, against a vulnerable server. The request sent on the wire could look
like GET /cgi-bin/phf?/etc/passwd HTTP/1.0. From this request, all tested
intrusion-detection systems provide us with two alerts, phf and password,
representative of the two salient features of the url. However, the two alerts are
juxtaposed, not linked, even though they are extracted from the payload of the
same packet.
IDS-C and IDS-D in addition to these two provide http-success and/or
password-external, indicating that they are monitoring not only the incom-
ing request but also the response from the server, and that they extract addi-
tional features from the response. This shows that monitoring sessions rather
than packets is feasible and informative.
All the alerts are shown on the user interface without indication that they
come from the same TCP session, or even from the same IP packet. The analyst
must manually notice that IP, port and url information is identical and that
timing is identical or very close, and infer that they are related. Similarly for the
response, port and IP information is reversed but the analyst can relate the
inverted address and port information easily. The intrusion-detection probes can
make this correlation between alerts with conﬁdence, because they also deﬁni-
tively know if the features were in the same packet, or in the same TCP session
due to matching sequence numbers. We see no valid reason for the probes not to
carry out this simple task, and give us a single alert fully assessing the damage
created by each malicious activity.
196
H. Debar and B. Morin
5.3 Damage Assessment and Alert Qualiﬁcation
This notion of assessment also improves the notion of severity of an alert. Ven-
dors determine the current severity level of the alerts generated by their products
by taking into account the intrinsic damage caused by a successful exploit of a
vulnerability, and sometimes the diﬃculty of exploiting it. If the vulnerability
gives the attacker an administrative access, then the alert is severe, regardless
of the parameters of the event (does the attacker perform an attack or a scan ?)
and of its success or failure. We wish that the diagnostic would propose at least
one of the following qualiﬁers:
Scan. The attacker tries to determine the existence of a vulnerability. The main
characteristic of a scan-qualiﬁed alert is that no actual compromise can
result from the attacker’s actions even though he gains information about
the environment.
Exploit. The attacker tries to exploit the vulnerability, possibly with well-
known attack scripts, well-known targets or publicly available information.
An exploit-qualiﬁed alert indicates a clearly identiﬁed attack that can result
in actual compromise if the target is vulnerable.
Variant. The attacker tries to exploit the vulnerability by using the application
outside of its speciﬁcations, but the target or exploit could not be deﬁnitely
recognized. A variant-qualiﬁed alert indicates that there is a possibility for
compromise or leakage of information.
In addition, the success of the malicious activity and its relevance to the
monitored information system should be included in the alert. In some of our
operations, we are simply not interested in unsuccessful malicious activity, be-
cause there is simply too much. We just want to know when they succeed, and
then be able to react immediately and accurately. This would enable an evalu-
ation of the severity of each alert based not only on the intrinsic characteristics
of the vulnerability exploited but also on the actual exploit circumstances.
Also, attacks scripts are sometimes recognisable. This information should be
provided as well. Finally, the age of the vulnerability is extremely relevant to
assess its severity, as shown by this study of the Computer Emergency Response
Team (CERT/CC) incidents database[1].
Note that these notions have been included in the message format of the
IDWG working group [3] for some time, but have not yet found their way into