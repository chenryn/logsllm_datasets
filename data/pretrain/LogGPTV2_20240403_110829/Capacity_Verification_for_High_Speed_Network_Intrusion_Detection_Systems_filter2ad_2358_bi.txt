### 4.6 Results of the Signature Evaluation Tests

The results presented here are based on three out of the 60 vulnerabilities currently checked by our test bed. These cases are representative of the overall observed behaviors.

#### 4.6.1 Add.exe Vulnerability

**Requests:**
1. `scan () @roots >> add.exe`
2. `scan () @roots >> add.exe?`
3. `scan () @roots >> add.exe?foo`
4. `scan () @roots >> add.exe?C:\inetpub\iissamples\default\samples.asp`

**Analysis:**
- **Figure 1** shows an extract from the Whisker database file for evaluating the `add.exe` vulnerability.
- The first two requests are essentially equivalent, as the HTTP standard does not differentiate between no arguments and an empty argument. Both result in starting the `add.exe` script with an empty `QUERY_STRING`.
- The third request passes an argument to the CGI script, simulating normal usage.
- The fourth request constitutes the actual attack.

**Intrusion Detection System (IDS) Response:**
- For each request, the test bed receives the same `ADD.EXE` alert, suggesting that the detection pattern is similar to `/add\.exe/` in Perl-like regular expressions.
- The IDS provides the same diagnostic for all requests, which we consider incomplete. A normal request is flagged with the same severity as a scan or an intrusive attempt, requiring valuable analyst time to assess the activity.

#### 4.6.2 Cart32 Vulnerability

**Requests:**
1. `scan () @roots >> c32web.exe`
2. `scan () @roots >> c32web.exe?`
3. `scan () @roots >> c32web.exe?foo`
4. `scan () @roots >> c32web.exe?TabName=Cart32%2B&Action=Save+Cart32%2B+Tab&SaveTab=Cart32%2B&Client=foobar&ClientPassword=e%21U%23%25%28%5D%5D%26%25*%2B-a&Admin=&AdminPassword=&TabToSave=Cart32%2B&PlusTabToSave=Run+External+Program&UseCMDLine=Yes&CMDLine=cmd.exe+%2Fc+dir+%3E+c%3A%5Cfile.txt`
5. `scan () @roots >> cart32.exe/cart32clientlist`

**Analysis:**
- **Figure 2** shows an extract from the Whisker database file for evaluating the `Cart32` vulnerability.
- The first two requests are related to scanning.
- The third request simulates normal activity.
- The fourth and fifth requests are direct malicious attempts exploiting different `Cart32` vulnerabilities.

**Intrusion Detection System (IDS) Response:**
- The tested IDSs generate an alert only on the last request (line 2.5).
- The scanning activity and the attack attempt from the fourth request do not generate alerts, even though the fourth request looks extremely suspicious.
- This indicates that the signature for the `Cart32` vulnerability is too restrictive, failing to cover additional vulnerabilities discovered more recently.

#### 4.6.3 SHTML.exe Vulnerability

**Requests:**
1. `scan () / >> vti bin/shtml.exe`
2. `scan () / >> vti bin/shtml.exe?`
3. `scan () / >> vti bin/shtml.exe?toto`
4. `scan () / >> vti bin/shtml.exe/prn`
5. `scan () / >> vti bin/shtml.exe?prn`

**Analysis:**
- **Figure 3** shows an extract from the Whisker database file for evaluating the `shtml.exe` vulnerability.
- The real attack is on line 3.4, and line 3.5 is a variation to check if the signature includes the slash between components.

**Intrusion Detection System (IDS) Response:**
- One of the tested commercial IDSs crashed on the four requests not specifically targeting the vulnerability but correctly diagnosed the malicious attempt (all requests except 3.4).
- This highlights the difficulty of testing network-based IDSs, suggesting that vendors may test products using a limited set of network frames without fully reconstructing the vulnerable environment.

### 5 Proposed Model for an Intrusion-Detection System

Our test results clearly indicate that there is significant room for improvement in the diagnostic capabilities of current intrusion-detection systems. The most critical issue is the lack of detailed information provided to analysts, which could be automatically extracted from the data source. We propose several enhancements to the current model proposed by the IETF's Intrusion-Detection Working Group (IDWG).

#### 5.1 The IDWG Model of an Intrusion-Detection System

The IDWG model consists of several components, including:
- **Data Source:** Provides raw information.
- **Sensor:** Parses and formats the data into events.
- **Analyzer:** Processes events to detect malicious activity and generate alerts.
- **Manager:** Manages and processes the alerts.

**Example:**
- In a network-based IDS, the data source is the network packets.
- The sensor taps the network, applies anti-evasion techniques, and formats the data.
- The analyzer uses attack signatures to generate alerts.

#### 5.2 Our Proposal for an Enhanced Model

**Enhanced Model:**
- **Feature Extractor:** Inserts a feature extraction mechanism between the sensor and the analyzer.
- **Improved Analysis:** Ensures that features are linked and analyzed together, providing a more comprehensive diagnostic.
- **Performance vs. Accuracy:** Balances performance with accurate feature extraction, avoiding early exits from the search loop.

**Example:**
- For an HTTP request like `GET /cgi-bin/phf?/etc/passwd HTTP/1.0`, the IDS should provide a single, comprehensive alert rather than juxtaposed alerts.
- Monitoring sessions rather than individual packets can provide more informative diagnostics.

#### 5.3 Damage Assessment and Alert Qualification

**Alert Qualifiers:**
- **Scan:** Indicates the attacker is trying to determine the existence of a vulnerability.
- **Exploit:** Indicates a clear attempt to exploit a vulnerability.
- **Variant:** Indicates an attempt to use the application outside its specifications.

**Additional Information:**
- **Success and Relevance:** Include the success of the malicious activity and its relevance to the monitored system.
- **Recognizable Attack Scripts:** Provide information on recognizable attack scripts.
- **Vulnerability Age:** Consider the age of the vulnerability in assessing its severity.

These enhancements aim to improve the diagnostic capabilities of IDSs, making them more effective and user-friendly for analysts.