title:Beyond bloom filters: from approximate membership checks to approximate
state machines
author:Flavio Bonomi and
Michael Mitzenmacher and
Rina Panigrahy and
Sushil Singh and
George Varghese
Beyond Bloom Filters: From Approximate Membership
Checks to Approximate State Machines
Flavio Bonomi
Cisco Systems, Inc.
ﬂPI:EMAIL
Michael Mitzenmacher∗
Harvard University
Rina Panigrahy†
Stanford University
PI:EMAIL
PI:EMAIL
Sushil Singh
Cisco Systems, Inc.
PI:EMAIL
George Varghese
Cisco Systems, Inc./UCSD
PI:EMAIL
ABSTRACT
Many networking applications require fast state lookups in
a concurrent state machine, which tracks the state of a large
number of ﬂows simultaneously. We consider the question of
how to compactly represent such concurrent state machines.
To achieve compactness, we consider data structures for Ap-
proximate Concurrent State Machines (ACSMs) that can
return false positives, false negatives, or a “don’t know” re-
sponse. We describe three techniques based on Bloom ﬁlters
and hashing, and evaluate them using both theoretical anal-
ysis and simulation. Our analysis leads us to an extremely
eﬃcient hashing-based scheme with several parameters that
can be chosen to trade oﬀ space, computation, and the im-
pact of errors. Our hashing approach also yields a simple
alternative structure with the same functionality as a count-
ing Bloom ﬁlter that uses much less space.
We show how ACSMs can be used for video congestion
control. Using an ACSM, a router can implement sophis-
ticated Active Queue Management (AQM) techniques for
video traﬃc (without the need for standards changes to
mark packets or change video formats), with a factor of
four reduction in memory compared to full-state schemes
and with very little error. We also show that ACSMs show
promise for real-time detection of P2P traﬃc.
Categories and Subject Descriptors: C.2.6 Internet-
working : Routers
General Terms: Algorithms, Measurement, Design.
Keywords: Bloom ﬁlters, state machines, network ﬂows.
∗
Supported in part by NSF grant CCR-0121154 and a re-
search grant from Cisco.
†
Part of this work was done while working at Cisco Systems.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’06, September 11–15, 2006, Pisa, Italy.
Copyright 2006 ACM 1-59593-308-5/06/0009 ...$5.00.
1.
INTRODUCTION
In this paper, we introduce the idea of an Approximate
Concurrent State Machine (ACSM), which aims to track
the simultaneous state of a large number of agents within a
state machine. Concurrent state machines arise naturally in
many networking applications, especially in routers, where
one wishes to track the behavior of many simultaneous ﬂows.
Our motivation for considering approximate versions of
concurrent state machines arises in two ways. First, we
observe that in the last few years, routers and networking
devices have increasingly begun to keep state about TCP
connections. One powerful motivation for this was the ad-
vent of packaged ﬁrewalls and Intrusion Detection devices
that keep state for each TCP connection in order to detect
security violations. This was followed by application level
load balancers, and then application level QoS devices that
attempt to look at application headers in order to provide
more discriminating QoS to applications. While the security
and application level QoS applications are well entrenched
in the market, there have been more recent proposals to do
video congestion control [9] and for identifying Peer-to-Peer
(P2P) traﬃc [10], both of which can also be loosely placed
in the Application QoS category.
While Application Level QoS can theoretically be pro-
vided by marking packets appropriately, such marking re-
quires standards changes. Further, much more sophisticated
QoS state machines can be implemented by keeping state for
each application ﬂow. Thus, in practice, many networking
devices keep state for each TCP connection and the trend
shows no sign of abating. If the state kept for each connec-
tion is small (say less than 20 bits) compared to the TCP
5-tuple (roughly 100 bits), then it is natural to speculate
whether one can reduce the overall state required by elimi-
nating or reducing the space required for the ﬂow identiﬁer.
Reducing state is crucial to high-speed routers because
it allows state machines to be implemented on-chip with-
out resorting to slow oﬀ-chip memories. For example, for
a router keeping track of 1 million connections (a number
found in many studies such as [23]), using 100 bits per con-
nection requires 100 Mbits of memory, which is impractical
using on-chip memory (or any form of SRAM). However, if
the state were dialed down by a factor of 5 to 20 Mbits, this
becomes at least technologically feasible.
Reducing memory by removing or reducing the identiﬁer
size has an obvious analogy with Bloom ﬁlters [2]. Thus, our
second motivation for considering ACSMs arises from the re-
markable success of Bloom ﬁlters in networking. From 1970,
when Burton Bloom ﬁrst described a compact probabilistic
data structure that he used to represent words in a dictio-
nary [2], until 1995, there was little interest in using Bloom
ﬁlters for networking. However, judging from the number of
papers that make direct or indirect use them [4], interest in
such applications has surged in the last 10 years.
A Bloom ﬁlter is essentially a compact representation of
a set. Standard exact representations of sets such as hash
tables and binary trees require at least L bits per element to
be stored, where L is the size of element, and often require
additional space for pointers. By contrast, a Bloom ﬁlter
is an inexact representation of a set that allows for “false
positives” when queried (in other words, it can sometimes
say that an element is in the set when it is not). In return,
it allows very compact storage: roughly 10 bits per element
for a 1% false positive probability, independent of the size
of the elements in the set or the size of the set itself.
Given that memory appears plentiful today, it may seem
surprising that Bloom ﬁlters have become so popular. How-
ever, Bloom ﬁlters allow economical solutions to various
kinds of scarcity, including:
• Bandwidth: There are several situations where net-
work bandwidth is still expensive. For example, dis-
tributed caching is useful when bandwidth is limited,
but in that case sending lists of all the cached items in
messages can also be expensive. The Summary Cache
paper [8] uses Bloom ﬁlters to compactly represent
URLs stored at a cache in inter-cache messages.
• High Speed Memory: While ordinarily DRAM mem-
ory is cheap, fast SRAM memory and especially on-
chip SRAM continues to be comparatively scarce. For
example, using on-chip Bloom ﬁlters can greatly speedup
a na¨ıve string matching scheme, requiring access to
slower oﬀ-chip memory only rarely [7].
• Memory for Very Large Sets: There are some sets
whose sizes are astronomical, so that they cannot be
stored even when considering the cheap price of DRAM
today. For example, Snoeren et al attempt to solve the
problem of packet traceback after an attack by stor-
ing a complete log of all packets received in the last
hour at every router. The only way to make this even
barely technologically feasible is to represent the logs
by a Bloom ﬁlter [21].
While Bloom ﬁlters provide a technique for set member-
ship lookups, the vast majority of lookups in networking
applications, whether in routers or endnodes, are actually
state lookups. While route lookups and TCP state lookups
cannot tolerate the loss of ﬁdelity caused by false positives,
we have already argued that there are several emerging uses,
many in the loose area of Application Level QoS, that can
beneﬁt from state reduction and can tolerate the loss in ﬁ-
delity. Further, guided by the analogy with Bloom ﬁlters,
it is plausible that there will be other applications (besides
the ones suggested in this paper) that will be found by other
researchers.
Thus we seek a compact structure like a Bloom ﬁlter, but
for the setting of state lookups. In this setting, Bloom ﬁlters
themselves have many limitations (besides false positives),
including:
• No associated value: A Bloom ﬁlter determines
whether an element is in a set; it does not return state
associated with an element. Chazelle et al. have gen-
eralized Bloom ﬁlters to functions that can return a
(small) set of values [5], but this techniques does not
allow state changes (see Section 2).
• Deletion is expensive: A Bloom ﬁlter allows easy
insertion but not deletion. Deletions in a Bloom ﬁl-
ter are handled using a counting Bloom ﬁlter, which
keeps a counter instead of a single bit at each hash
location [8, 15]. Counters are incremented on an in-
sertion and decremented on a deletion. Unfortunately,
using counters increases the size of the ﬁlter by a non-
trivial factor; if too few bits are used in the counters
overﬂows and false negatives can arise.
• No notion of time: A key property of network state
machines (e.g., the TCP state machine) is that they
allow the state to be timed-out. This is often essen-
tial as the only way to deal with failure in networks
and distributed systems is to infer failure by the lack
of message arrival within a speciﬁed timeout period.
Bloom ﬁlters have no notion of time or timeouts, and
a na¨ıve association of every ﬁlter element or cell with
a timer would greatly increase the space required.
In this paper, we present new techniques to design Ap-
proximate Concurrent State Machines that address each of
the limitations described above. We start by considering
very simple techniques based on Bloom ﬁlters, as we believe
this would be the natural starting point for people consid-
ering this problem. Perhaps surprisingly, our comparison of
several techniques suggest that in most cases, an approach
based on ﬁngerprints and d-left hashing [3, 24] performs best
and oﬀers the most ﬂexibility. Our techniques still have
false positives, with a small probability; under some cir-
cumstances, they may also yield false negatives, or return
the wrong state. We further introduce another type of error
condition, corresponding to a “don’t know” response, which
is generally less damaging than other types of errors. Thus
our ACSMs are suitable only for applications that can tol-
erate a small probability of error. Despite this weakness,
we suggest that ACSMs can enable more stateful (but still
lightweight) processing at routers.
One key feature of our structures is that we turn a dis-
advantage of this setting into an advantage. Handling dele-
tions is often expensive, because of the need for counters to
do deletion properly. But in state-lookup situations, there is
generally a natural time-out, where the corresponding ﬂow
should be deleted. We can utilize the time-out mechanism
for ﬂows that time out to also delete ﬂows that terminate
successfully at a later time, removing the need for counters,
and saving space. We also utilize the fact that many net-
working applications can tolerate some lack of precision in
the timer value, especially if the timer is used to reclaim
inactive state. Providing precise timers (e.g., for retrans-
mission) will require extensions to our data structure.
To demonstrate the power of ACSMs, we study a speciﬁc,
novel example application: discriminate dropping for video
congestion control. Using ACSMs, a router can eﬃciently
keep track of the current frame status of MPEG video pack-
ets, allowing for more discriminating drop policies during
times of congestion. We describe experiments to show the
eﬀectiveness of such control compared to the na¨ıve dropping
schemes that are the only recourse of existing routers, and
show that the implementation costs are low. We also brieﬂy
describe an experiment to suggest the promise of ACSMs
for real-time detection of P2P traﬃc [10]. More generally,
we introduce ACSMs as a useful tool for other applications
that can tolerate a small probability of error in return for a
compact representation.
While the two example applications we study can roughly
be described as techniques to provide Application Level QoS
(where some errors can be tolerated), an important appli-
cation we do not study in this paper is for analysis of net-
work traﬃc. Network monitors are often used to answer
questions about network traﬃc; using compact ACSMs may
allow faster response to complicated queries using state ma-
chines with only a small loss in accuracy. Further, even
when doing queries using disk logs of network traﬃc (e.g.,
NetFlow records), ACSMs may help in 2-pass algorithms
that ﬁrst sift out candidate ﬂow records in the ﬁrst pass (in-
cluding false positives) using ACSMs that ﬁt in memory, and
then weed out the small number of false positives in a second
pass. We believe that ACSMs can play an important role in
measurement infrastructure in software and hardware.
We also note that a variation of our ﬁngerprint/hashing
scheme provides an alternative approach for creating a count-
ing Bloom ﬁlter [8, 15] that uses much less space (a factor of
2 or more) than the standard construction. Counting Bloom
ﬁlters have many potential uses, but tend to be expensive
with regard to space; our alternative may therefore also be
useful for many applications.
To summarize, our contributions are:
• The introduction of the ACSM problem.
• The introduction (and comparison) of several solutions
to the ACSM problem starting with a simple solution
that utilizes Bloom ﬁlters, followed by a solution that
extends Bloom-ﬁlter like techniques, and ending with a
solution that uses a combination of hashing and ﬁnger-
print compression, and is very diﬀerent in spirit from
the techniques underlying Bloom ﬁlters.
• A novel construction for counting Bloom ﬁlters.
• Techniques for taking advantage of time-outs for space
savings.
• Experimental evaluation of ACSMs for multiple prob-
lems, including an application for congestion control
on MPEG streams.
• The potential use of ACSMs for speeding up measure-
ment algorithms working on large data sets.
2. RELATED WORK
We are aware of previous papers that extend Bloom ﬁlter
techniques to realize particular state machines; for example,
there are papers that consider structures for approximately
storing multisets, keeping an approximate counter for each
element. In terms of general state machines, the most rele-
vant previous work is the Bloomier ﬁlter [5]. While a Bloom
ﬁlter is designed to represent a set, a Bloomier ﬁlter is de-
signed to represent a function on a set. Speciﬁcally, we have
a set of items S, and associated with each item x ∈ S is a
value v(x) that we assume is in the range [1, V ]. For each
item x /∈ S, we take v(x) = null.
(Here null should be
distinct from the number 0, which we may use for other
purposes.)
A Bloomier ﬁlter always returns v(x) for x ∈ S; when
x /∈ S, null should be returned with high probability. Just
as a Bloom ﬁlter can have false positives, a Bloomier ﬁlter
can return a non-null value for an element not in the set.
Previous work on Bloomier ﬁlters has focused on the setting
where the set S is static. When both S and the correspond-
ing function values are static, there are linear space solu-
tions that seem viable, although they have not been tested
in practice. There are lower bounds that show that when S
is static and function values are dynamic, non-linear space
is required [17].
Another closely related work is [13], which takes a ﬁrst
step towards state machines by allowing classes (which can
be thought of as the state of an element). While [13] also
describes ideas for eﬃcient deletion, the paper does not com-
bine deletion and classes as would be required to support
state machines. Further, the technique works by coding
across individual Bloom ﬁlters; in order to reduce false neg-
atives, the resulting codes tend to increase the number of
parallel lookups required (some of the codes described in [13]
require 1000-fold parallelism) which may be hard to achieve
in practice. The idea of returning a Don’t Know condition
also appears in this paper.
Other alternative constructions with improved function-