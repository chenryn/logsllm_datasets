int main(void)
{
char ch;
int i;
float fl;
fl = i = ch = 'C';                  /* 第9行 */
288
printf("ch = %c, i = %d, fl = %2.2f\n", ch, i, fl); /* 第10行 */
ch = ch + 1;                     /* 第11行 */
i = fl + 2 * ch;                   /* 第12行 */
fl = 2.0 * ch + i;                  /* 第13行 */
printf("ch = %c, i = %d, fl = %2.2f\n", ch, i, fl); /* 第14行 */
ch = 1107;                      /* 第15行 */
printf("Now ch = %c\n", ch);             /* 第16行 */
ch = 80.89;                     /* 第17行 */
printf("Now ch = %c\n", ch);             /* 第18行 */
return 0;
}
运行convert.c后输出如下：
ch = C, i = 67, fl = 67.00
ch = D, i = 203, fl = 339.00
Now ch = S
Now ch = P
在我们的系统中，char是8位，int是32位。程序的分析如下。
第9行和第10行：字符'C'被作为1字节的ASCII值储存在ch中。整数变量i
接受由'C'转换的整数，即按4字节储存67。最后，fl接受由67转换的浮点数
67.00。
289
第11行和第14行：字符变量'C'被转换成整数67，然后加1。计算结果是4
字节整数68，被截断成1字节储存在ch中。根据%c转换说明打印时，68被解
释成'D'的ASCII码。
第12行和第14行：ch的值被转换成4字节的整数（68），然后2乘以ch。
为了和fl相加，乘积整数（136）被转换成浮点数。计算结果（203.00f）被
转换成int类型，并储存在i中。
第13行和第14行：ch的值（'D'，或68）被转换成浮点数，然后2乘以
ch。为了做加法，i的值（203）被转换为浮点类型。计算结果（339.00）被
储存在fl中。
第15行和第16行：演示了类型降级的示例。把ch设置为一个超出其类型
范围的值，忽略额外的位后，最终ch的值是字符S的ASCII码。或者，更确切
地说，ch的值是1107 % 265，即83。
第17行和第18行：演示了另一个类型降级的示例。把ch设置为一个浮点
数，发生截断后，ch的值是字符P的ASCII码。
5.5.1 强制类型转换运算符
通常，应该避免自动类型转换，尤其是类型降级。但是如果能小心使
用，类型转换也很方便。我们前面讨论的类型转换都是自动完成的。然而，
有时需要进行精确的类型转换，或者在程序中表明类型转换的意图。这种情
况下要用到强制类型转换（cast），即在某个量的前面放置用圆括号括起来
的类型名，该类型名即是希望转换成的目标类型。圆括号和它括起来的类型
名构成了强制类型转换运算符（cast operator），其通用形式是：
(type)
用实际需要的类型（如，long）替换type即可。
考虑下面两行代码，其中mice是int类型的变量。第2行包含两次int强制
类型转换。
290
mice = 1.6 + 1.7;
mice = (int)1.6 + (int)1.7;
第1 行使用自动类型转换。首先，1.6和1.7相加得3.3。然后，为了匹配
int 类型的变量，3.3被类型转换截断为整数3。第2行，1.6和1.7在相加之前都
被转换成整数（1），所以把1+1的和赋给变量mice。本质上，两种类型转换
都好不到哪里去，要考虑程序的具体情况再做取舍。
一般而言，不应该混合使用类型（因此有些语言直接不允许这样做），
但是偶尔这样做也是有用的。C语言的原则是避免给程序员设置障碍，但是
程序员必须承担使用的风险和责任。
总结 C的一些运算符
下面是我们学过的一些运算符。
赋值运算符：
= 将其右侧的值赋给左侧的变量
算术运算符：
+    将其左侧的值与右侧的值相加
-    将其左侧的值减去右侧的值
-    作为一元运算符，改变其右侧值的符号
*    将其左侧的值乘以右侧的值
/    将其左侧的值除以右侧的值，如果两数都是整数，计算结果
将被截断
%    当其左侧的值除以右侧的值时，取其余数（只能应用于整
数）
291
++    对其右侧的值加1（前缀模式），或对其左侧的值加1（后缀
模式）
--    对其右侧的值减1（前缀模式），或对其左侧的值减1（后缀模
式）
其他运算符：
sizeof    获得其右侧运算对象的大小（以字节为单位），运算对象
可以是一个被圆括号括起来的类型说明符，如sizeof(float)，或者是一个具体
的变量名、数组名等，如sizeof foo
(类型名)   强制类型转换运算符将其右侧的值转换成圆括号中指定
的类型，如(float)9把整数9转换成浮点数9.0
292
5.6 带参数的函数
现在，相信读者已经熟悉了带参数的函数。要掌握函数，还要学习如何
编写自己的函数（在此之前，读者可能要复习一下程序清单2.3中的butler()
函数，该函数不带任何参数）。程序清单5.15中有一个pound()函数，打印指
定数量的#号（该符号也叫作编号符号或井号）。该程序还演示了类型转换
的应用。
程序清单5.15 pound.c程序
/* pound.c -- 定义一个带一个参数的函数 */
#include 
void pound(int n);// ANSI函数原型声明
int main(void)
{
int times = 5;
char ch = '!';   // ASCII码是33
float f = 6.0f;
pound(times);   // int类型的参数
pound(ch);     // 和pound((int)ch);相同
pound(f);      // 和pound((int)f);相同
return 0;
}
293
void pound(int n)   // ANSI风格函数头
{             // 表明该函数接受一个int类型的参数
while (n-- > 0)
printf("#");
printf("\n");
}
运行该程序后，输出如下：
#####
#################################
######
首先，看程序的函数头：
void pound(int n)
如果函数不接受任何参数，函数头的圆括号中应该写上关键字 
void。
由于该函数接受一个 int 类型的参数，所以圆括号中包含一个int类型变量n的
声明。参数名应遵循C语言的命名规则。
声明参数就创建了被称为形式参数（formal 
argument或formal
parameter，简称形参）的变量。该例中，形式参数是 int 类型的变量 n。像
pound(10)这样的函数调用会把 10 赋给 n。在该程序中，调用pound(times)就
是把 times 的值（5）赋给 n。我们称函数调用传递的值为实际参数（actual
argument或actual 
parameter），简称实参。所以，函数调用pound(10)把实际
参数10传递给函数，然后该函数把10赋给形式参数（变量n）。也就是说，
main()中的变量times的值被拷贝给pound()中的新变量n。
294
注意 实参和形参
在英文中，argument和parameter经常可以互换使用，但是C99标准规定
了：对于actual argument或actual parameter使用术语argument（译为实参）；
对于formal argument或formal parameter使用术语parameter（译为形参）。为
遵循这一规定，我们可以说形参是变量，实参是函数调用提供的值，实参被
赋给相应的形参。因此，在程序清单5.15中，times是pound()的实参，n是
pound()的形参。类似地，在函数调用pound(times + 4)中，表达式times + 4的
值是该函数的实参。
变量名是函数私有的，即在函数中定义的函数名不会和别处的相同名称
发生冲突。如果在pound()中用times代替n，那么这个times与main()中的times
不同。也就是说，程序中出现了两个同名的变量，但是程序可以区分它们。
现在，我们来学习函数调用。第1 
个函数调用是pound(times)，times的
值5被赋给n。因此， printf()函数打印了5个井号和1个换行符。第2个函数调
用是pound(ch)。这里，ch是char类型，被初始化为!字符，在ASCII中ch的数
值是33。但是pound()函数的参数类型是int，与char不匹配。程序开头的函数
原型在这里发挥了作用。原型（prototype）即是函数的声明，描述了函数的
返回值和参数。pound()函数的原型说明了两点：
该函数没有返回值（函数名前面有void关键字）；
该函数有一个int类型的参数。
该例中，函数原型告诉编译器pound()需要一个int类型的参数。相应
地，当编译器执行到pound(ch)表达式时，会把参数ch自动转换成int类型。在
我们的系统中，该参数从1字节的33变成4字节的33，所以现在33的类型满足
函数的要求。与此类似，最后一次调用是pound(f)，使得float类型的变量被
转换成合适的类型。
在ANSI C之前，C使用的是函数声明，而不是函数原型。函数声明只指
明了函数名和返回类型，没有指明参数类型。为了向下兼容，C现在仍然允
295
许这样的形式：
void pound(); /* ANSI C乊前的函数声明 */
如果用这条函数声明代替pound.c程序中的函数原型会怎样？第 1 次函
数调用，pound(times)没问题，因为times是int类型。第2次函数调用，
pound(ch)也没问题，因为即使缺少函数原型，C也会把char和short类型自动
升级为int类型。第3次函数调用，pound(f)会失败，因为缺少函数原型，float
会被自动升级为 double，这没什么用。虽然程序仍然能运行，但是输出的内
容不正确。在函数调用中显式使用强制类型转换，可以修复这个问题：
pound ((int)f); // 把f强制类型转换为正确的类型
注意，如果f的值太大，超过了int类型表示的范围，这样做也不行。
296
5.7 示例程序
程序清单5.16演示了本章介绍的几个概念，这个程序对某些人很有用。
程序看起来很长，但是所有的计算都在程序的后面几行中。我们尽量使用大
量的注释，让程序看上去清晰明了。请通读该程序，稍后我们会分析几处要
点。
程序清单5.16 running.c程序
// running.c -- A useful program for runners
#include 
const int S_PER_M = 60;        // 1分钟的秒数
const int S_PER_H = 3600;      // 1小时的分钟数
const double M_PER_K = 0.62137;   // 1公里的英里数
int main(void)
{
double distk, distm;  // 跑过的距离（分别以公里和英里为单位）
double rate;       // 平均速度（以英里/小时为单位）
int min, sec;      // 跑步用时（以分钟和秒为单位）
int time;        // 跑步用时（以秒为单位）
double mtime;      // 跑1英里需要的时间，以秒为单位
int mmin, msec;     // 跑1英里需要的时间，以分钟和秒为单位
printf("This program converts your time for a metric race\n");
297
printf("to a time for running a mile and to your average\n");
printf("speed in miles per hour.\n");
printf("Please enter, in kilometers, the distance run.\n");
scanf("%lf", &distk);      // %lf表示读取一个double类型的值
printf("Next enter the time in minutes and seconds.\n");
printf("Begin by entering the minutes.\n");
scanf("%d", &min);
printf("Now enter the seconds.\n");
scanf("%d", &sec);
time = S_PER_M * min + sec;   // 把时间转换成秒
distm = M_PER_K * distk;    // 把公里转换成英里
rate = distm / time * S_PER_H; // 英里/秒×秒/小时 = 英里/小时
mtime = (double) time / distm; // 时间/距离 = 跑1英里所用的时间
mmin = (int) mtime / S_PER_M;  // 求出分钟数
msec = (int) mtime % S_PER_M;  // 求出剩余的秒数
printf("You ran %1.2f km (%1.2f miles) in %d min, %d 
sec.\n",
distk, distm, min, sec);
printf("That pace corresponds to running a mile in %d 
min, ",
298
mmin);
printf("%d sec.\nYour average speed was %1.2f mph.\n", msec,
rate);
return 0;
}
程序清单5.16使用了min_sec程序（程序清单5.9）中的方法把时间转换
成分钟和秒，除此之外还使用了类型转换。为什么要进行类型转换？因为程
序在秒转换成分钟的部分需要整型参数，但是在公里转换成英里的部分需要
浮点运算。我们使用强制类型转换运算符进行了显式转换。
实际上，我们曾经利用自动类型转换编写这个程序，即使用int类型的
mtime来强制时间计算转换成整数形式。但是，在测试的11个系统中，这个
版本的程序在1个系统上无法运行，这是由于编译器（版本比较老）没有遵
循C规则。而使用强制类型转换就没有问题。对读者而言，强制类型转换强
调了转换类型的意图，对编译器而言也是如此。
下面是程序清单5.16的输出示例：
This program converts your time for a metric race
to a time for running a mile and to your average
speed in miles per hour.
Please enter, in kilometers, the distance run.
10.0
Next enter the time in minutes and seconds.
Begin by entering the minutes.
299
36
Now enter the seconds.
23
You ran 10.00 km (6.21 miles) in 36 min, 23 sec.
That pace corresponds to running a mile in 5 min, 51 sec.
Your average speed was 10.25 mph.
300
5.8 关键概念
C 通过运算符提供多种操作。每个运算符的特性包括运算对象的数量、
优先级和结合律。当两个运算符共享一个运算对象时，优先级和结合律决定
了先进行哪项运算。每个 C表达式都有一个值。如果不了解运算符的优先级
和结合律，写出的表达式可能不合法或者表达式的值与预期不符。这会影响
你成为一名优秀的程序员。
虽然C允许编写混合数值类型的表达式，但是算术运算要求运算对象都
是相同的类型。因此，C会进行自动类型转换。尽管如此，不要养成依赖自
动类型转换的习惯，应该显式选择合适的类型或使用强制类型转换。这样，