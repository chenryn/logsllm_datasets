that serves as the lowest common ancestor between these
node1 and node2. We will only perform symbolic analysis
for the code in the body of this lowest common ancestor,
which is either a PHP ﬁle or a function.
1 function getFileName ( $file ){
2
3 }
4
5 function handle_uploader ( $file , $savePath ){
6
7
8
$path_array = wp_upload_dir () ;
$pathAndName = $path_array [ ’ path ’] ."/"
if (! move_uploaded_file ( $_FILES [ $file ][ ’ tmp_name ’],
return $_FILES [ $file ][ ’ name ’];
. $savePath ;
$pathAndName )) {
return false ;
}
return true ;
9
10
11
12 }
13
14 if (! handle_uploader (" upload_file " , getFileName ("
upload_file "))) {
echo " File (cid:2) Uploaded (cid:2) failure !";
15
16 }
Listing 1: An example PHP ﬁle named “example1.php”
An
PHP
in
in
calls
which
next
its
two
example
presented
getFileName()
“example1.php”
namely
1.
parameter.
functions
ﬁle
Listing
handle_uploader(),
“example1.php”
in-
is
invokes
vokes
getFileName($file)
Therefore,
“example1.php”
including
handle_uploader($file,
getFileName($file)
$savePath), where
$_FILES
and handle_uploader()
move_uploaded_file().
UChecker will construct an extended call graph for
example1.php as
illustrated in Figure 3. The node
“example1.php”
for
the “$_FILES” node and the “move_uploaded_file()”
node. Therefore, UChecker will perform symbolic analysis
for the body of example1.php (i.e., starting from line 14 in
List 1). Other scripts, if they do not contain such lowest
common ancestors, will not be analyzed.
the lowest common ancestor
accesses
and
calls
is
B. AST-Based Symbolic Execution
For the PHP ﬁle or the function identiﬁed by the locality
analysis, UChecker performs symbolic execution by stati-
cally interpreting its AST(s), ultimately generating graph-
based data structures, namely a heap graph and envi-
ronments. The heap graph compactly proﬁles dependency
583
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply. 
example1.php
getFileName()
handle_uploader()
$_FILES
wp_upload_dir()
move_uploaded_ﬁle()
Fig. 3: The extended call graph generated from Listing 1
among all possible objects produced by all execution paths;
each environment maps variables to their corresponding
objects in each path and meanwhile keeps track of path
constraints. By traversing the heap graph, UChecker can
symbolically model the reachability constraint for each path
and the name of the uploaded ﬁle.
1) Heap Graph and Environments
We
ﬁrst
deﬁne
a
heap
graph
as
{C ,S,FU NC ,OP,L,T,OC ,OS,OFU NC ,OOP ,Ed g e}:
G =
operations such as “+”, “-”, and “.”).
• C is a set of concrete values.
• S is a set of symbolic values.
• FU NC is a set of all PHP built-in functions.
• OP is a set of all operations (e.g., unary and binary
• L is a set of labels.
• T is a set of types such as boolean, integer, and etc; T
also includes an unknown type ⊥ (i.e., ⊥ ∈T ) and an
array type (i.e., ar r ay ∈ T ).
• OC ⊂ C×T×L is a set of objects (i.e., nodes) for concrete
values, where each object in OC is assigned with a type
and a unique label.
• OS ⊂ S×T×L is a set of objects (i.e., nodes) for symbolic
values, where each object in OC is assigned with a type
and a unique label.
• OFU NC ⊂ Func×T ×L is a set of objects (i.e., nodes) for
built-in functions, where each node is assigned with a
type and a unique label. The type indicate the type of
the result returned by the function.
• OOP ⊂ Op × T × L is a set of objects (i.e., nodes) for
operations, where each node is assigned with a type
and a unique label. The type indicate the type of the
result returned by the operation.
• Ed g e ⊂ {(l1,l2)|(x, t1,l1) ∈ OFU NC ∪ OOP and (y, t2,l2) ∈
OC ∪ OS ∪ OFU NC ∪ OOP }. Edges are directed and each
one connects a node for a built-in function or an
operation with another node with an arbitrary type. If
the source node of an edge is an object of an operand,
its destination node is an operator; if the source node
of an edge is for a built-in function, its destination
node is a parameter input for this function.
We next deﬁne the environment for each path Env =
{V ar, M ap,cur }, which characterizes i) the mapping be-
tween a variable name and its object and ii) the reachability
constraint for this path.
• V ar is a set of variable names.
• M ap ⊂ V ar × L. It establishes a mapping between a
variable name and an object.
• cur ∈ {l|(x, t,l) ∈ OC ∪ OS ∪ OFU NC ∪ OOP }∪ {null}. cur
represents the reachability constraint. It either points
to nothing (e.g., cur = null) or an object. When
cur (cid:6)= null, the reachability constraint has to be true
to enable the execution of this path.
It is worth noting that a program may have multiple
paths and each path has its own environment. We therefore
deﬁne E = {Env1,...,Env i ,...,Env n} for n execution paths
of a program.
In order to illustrate the heap graph and environments,
we use an example presented in Listing 2. This program has
two variables including $a and $b. $a is initialized with a
concrete, integer value. $b contains value from an external
input, thereby being given a symbolic value. This program
has two paths which are governed by the if condition and
result in different values for $a.
1
2
3
4
5
6
7
8
9
 10) {
$a = $b - 22;
}
else
?>
$a = 88;
Listing 2: Sample code with two paths
Figure 4 presents the heap graph and path environments
that UChecker generates for the example in Listing 2. For
this speciﬁc example, the heap graph G is:
• C = {55,10,22,88}
• S = {s}
• FU NC = Ø
• OP = {+,−,>,NOT}
• L = {1,2,3,4,5,6,7,8,9}
• T = {boolean,int}
• OC = {(55,int,1),(10,int,4),(22,int,6),(88,int,9)}
• OS = {(s,int,2)}
• OFU NC = Ø
• OOP = {(+,int,3),(>,boolean,5),(−,int,7),(NOT,boolean,8)}
• Ed g e = {(7,6),(7,2),(3,2),(3,1),(5,3),(5,4),(8,5)}.
To be more speciﬁc, we label each object using a
distinct integer (i.e., L = {1,2,3,4,5,6,7,8,9}). This program
has two paths. The completion of two paths will result
two environments E = {Env1,Env2}. For Env1, V ar = {a,b},
M ap = {(a,7).(b,2)}, cur = 5; for Env2, V ar = {a,b}, M ap =
{(a,9).(b,2)}, cur = 8. For example, (a,7) ∈ M ap of Env1
means that the value of a for the ﬁrst path is the result
of the object with label 7 (i.e., (−,int,7)). The reachability
constraint for the ﬁrst path is cur = 5, pointing to the object
of (>,boolean,5), which has to be satisﬁed to enable the
execution of this path.
As manifested in this example, our design of the heap
graph and environments introduces two advantages. First,
the tree-like structure of the heap graph enables the s-
expression-based representation of an object value using
concrete and/or symbolic values. For example, by traversing
the heap graph in Figure 4, the reachability constraint of
path 1 (i.e., the node of (>,boolean,5)) can be expressed us-
ing symbolic or constant values in the form of s-expressions,
584
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply. 
Env1 for Path1
cur
$a
$b
Heap Graph G
(NOT, boolean, 8)
(>, boolean, 5)
(-, int, 7)
(+, int, 3)
(10, int, 4)
(22, int, 6)
(s, int, 2)
(55, int, 1)
(88, int, 9)
Env2 for Path2
cur
$a
$b
Fig. 4: The heap graph and environments for the sample code
in Listing 2
which is speciﬁcally (> (+ s 55) 10). This facilitates the
usage of SMT solvers, such as Z3 [8] and Yices [13], whose
rules are expressed in s-expressions. Second, environments
keep track of object labels for variables. Therefore, many
objects can be shared by different environments, thereby
reducing the memory consumption.
2) Operations for Heap Graph and Environments
We next deﬁne a set of operations for G, Env, and E .
F i nd(G,l) returns an object given its label. If there is no
object whose label is l, it will return null.
Cr eate_Concr ete_Ob j (x, t) is to create an object of a
concrete value, denoted as (x, t,l), given a concrete value of
x and its type t; it returns l. This function will assure that
the assigned label is unique across all objects in G.
Cr eate_OP_Ob j (x, t)
Cr eate_FU NC _Ob j (x, t),
Cr eate_Symbol_Ob j (x, t),
to
are
and
are used
Cr eate_Concr ete_Ob j (x, t). However,
to create objects for a symbol value, a built-in function,
or an operator, respectively. All these functions return the
label of the created object, which is unique across all
objects in G.
similar
they
Add_FU NC _Ob j (G,l),
Add_Concr ete_Ob j (G,l) is to add an object of a concrete
value whose label is l, denoted as o = (x, t,l), into heap
graph G. Speciﬁcally, we will have C = C ∪ {x}, T = T ∪ {t},
L = L∪ {l}, and OC = OC ∪ {o}.
Add_Symbol_Ob j (G,l),
and
Add_OP_Ob j ect(G,l) are also deﬁned. They are similar to
Add_Concr ete_Ob j (G,l) but they operate on S and OS,
FU NC and OFU NC , and OP and OOP , respectively.
Add_Ed g e(G,e) will add an edge into Ed g e of G. Speciﬁ-
cally, Ed g e = Ed g e ∪ {e}.
Get_M ap(Env, v) where v is a variable name. Get(Env, v)
will return the label l of the object associated with v in
M ap of Env (i.e., (v,l) ∈ M ap). If v is not contained in
M ap, Get(Env, v) will return null.
Add_V ar (Env, v) where v is a variable name. This function
will add the variable name v into the V ar of Env (i.e.,
V ar = V ar ∪ v).
Add_M ap(Env,(v,l)) where v is a variable name and l is
the label of an object. This function adds an association
585
e ::=
| c
| x
| op e
| e1 op e2
| x[e]
| function(x1,..., xn ){S}
| f (e1,...,e n )
S ::=
| S1;S2
| x := e
| if e then S1 else S2
| return e
(EXPRESSION)
(Constant)
(Variable)
(Unary Operation)