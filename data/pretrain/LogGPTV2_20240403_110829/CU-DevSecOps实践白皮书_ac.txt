融合，也会导致攻击面的扩大。例如，CD（持续交付）阶段的一个
关键安全问题是 CD 管道本身的安全漏洞。CD 管道的大部分技术组
件在具有多个开放式 API 的环境中运行，由于其开放性，这些组件
CU-DevSecOps 实践白皮书 
14 
容易受到各种恶意攻击。因此理论上，CD 管道扩大了额外的攻击
面。另外，很多组织中，大多数项目团队成员都可以访问 CD 管道配
置，但由于缺乏安全知识和意识，这些成员也对基础设施和应用程
序构成了威胁。 
三、DevSecOps 实践 
为克服 DevSecOps 落地过程中所面临的的挑战，推进其落地实践。
本部分主要从安全文化建设、安全防护左移、安全工具链构建和安
全运营实践这几个方面展开，对上述几个部分应该进行的安全活动
和需要采取的安全措施及方法进行了重点分析，并进一步给出了安
全运营实践中各项能力的建设方法，如图 3-1 所示。 
图 3-1 DevSecOps 实践 
3.1 安全文化建设 
在 DevSecOps 的基本理念中，安全需要贯穿整个业务生命周期的
CU-DevSecOps 实践白皮书 
15 
每一个环节，打造 DevSecOps 安全文化需要从思维方式、流程和技
术等方面做出整体变化，建立 DevSecOps 安全文化实践要求如下： 
（1）培训和意识 
打造 DevSecOps 安全文化的第一步是建立跨团队的安全意识，安
全意识的形成依赖于定期进行的安全意识培训和团队所有成员对相
关安全标准和 DevSecOps 工作流程的学习。 
通过提高团队成员的安全意识，使团队成员能够在业务需求分析、
规划设计、代码开发、测试、部署、运维等不同阶段认识到自动化
安全检查在 CI/CD 过程中的相关性、重要性和作用。 
（2）嵌入安全流程 
将安全嵌入到开发运维流程的体系中，并严格执行与管理符合安
全标准的流程，促成开发、运维和安全团队之间的密切合作，面对
业务的频繁调整和上线带来的各种安全问题，尽量在各个阶段同步
解决，而不是在业务上线部署后再仓促解决。同时，需要将持续安
全评估和安全管理工作流程自动化，以提升安全检测与验证效率。 
（3）激励协作 
在公司层面采取激励措施，让开发运维团队成员将安全视为共同
承担的责任，并逐步推动安全和开发运维团队之间的协作文化。 
3.2 安全防护左移 
在软件生命周期中，越靠后修复问题的成本越高，越靠前修复问
题的成本越低。安全左移是将安全投资更多地放到开发阶段，包括
CU-DevSecOps 实践白皮书 
16 
安全需求分析、安全设计、安全编码、供应链（软件库、开源软件
等）安全、镜像安全等。 
在云原生环境中，业务需要频繁调整、上线，安全左移的思路不
仅让 DevSecOps 团队能够及早发现安全风险，还能降低安全投入、
提高整体的安全水平，以确保及时解决安全威胁。 
3.3 安全工具链构建 
DevSecOps 理念是将安全能力内建到研发运营工具中，形成
DevSecOps 研发运营安全工具链，业务应用研发运营安全生命周期主
要划分为 10 个阶段，具体包括计划、创建、验证、预发布、发布、
预防、检测、响应、预测和优化，如图 3-2 所示。 
图 3-2 DevSecOps 软件安全开发生命周期 
CU-DevSecOps 实践白皮书 
17 
3.3.1 计划阶段 
在计划阶段需要根据业务安全策略、数据安全要求、合规需求、
应用系统的特性等进行快速的分类分级，并根据系统分类分级情况
分别定义不同的安全策略，进而选取合适的安全活动。在计划阶段
通常涉及的安全活动主要包含安全培训、威胁建模、安全开发衡量
指标制定等。 
（1）安全培训 
DevSecOps 流程方面需要让项目组成员清楚了解各个阶段需要承
担的责任与义务，并进一步对 DevSecOps 体系整体过程进行学习。 
DevSecOps 工具使用方面需要对项目组成员进行培训，如：对开
发人员、安全人员进行 SAST、SCA、IAST、DAST 等工具的使用培训，
对运维管理人员进行安全基线工具、资产安全管理等工具的使用培
训。 
（2）威胁建模 
为满足 DevOps 快速敏捷要求，采用轻量级威胁建模方式，主要
实践步骤有以下几点：首先，通过动态调查问卷快速收集有关业务
系统、部署环境和合规性要求等方面的重要且详细的信息，根据收
集到的信息自动识别风险、威胁和潜在弱点。其次，根据预定义的
安全和合规性策略对整体风险进行分类管理。最后，输出安全设计
方案，并对安全问题进行跟踪。 
（3）衡量指标 
CU-DevSecOps 实践白皮书 
18 
根据业务应用系统的不同安全级别来制定对应的安全开发衡量指
标，用于评估实施效果。 
3.3.2 创建阶段 
创建阶段（即编码阶段）是对业务安全问题修复成本最低的时期，
在这方面的安全能力建设主要包括制定安全编码规范及流程、安全
组件库、安全 SDK 及风险检测插件等，通过这些能力的建设和运用，
能最大程度的保证在编码阶段消除安全风险。例如：通过制定安全
的开发流程，将创建中的每一步提交和测试纳入管理范围，保证风
险的可控性；制定安全编码规范并通过 IDE 安全插件进行源代码的
自动化安全检测，有效避免在编码阶段引入安全风险；通过使用组
件防火墙，阻止违规组件的下载，并记录阻断信息，防止不安全的
组件下载和使用等。 
3.3.3 验证阶段 
验证阶段（即测试阶段）安全能力主要包括自动化的应用安全测
试（AST）和软件成分分析（SCA），其中应用安全测试主要分为动
态应用安全测试（DAST）、静态应用安全测试（SAST）、交互式应
用安全测试（IAST）。将 AST 和 SCA 工具集成到 CI/CD 流程中，能
够更早的对软件进行安全测试，以及时发现安全问题。 
DAST 是一种黑盒测试方法，该方法在应用测试或运行时，模拟黑
客构造特定的恶意请求，从而分析确认应用是否存在安全漏洞，是
CU-DevSecOps 实践白皮书 
19 
应用安全测试阶段最常用的一种测试方法。  
SAST 是一种白盒测试方法，可以在创建阶段及验证阶段部署使用，
该方法能够通过分析应用程序的源代码、中间表示文件或二进制文
件等来检测潜在的安全漏洞。利用 SAST 工具进行检测不需要运行测
试的应用程序，而且理论上可以覆盖所有可能的程序路径，检测出
来的漏洞多而全，但由于未对运行应用程序进行检测，因此 SAST 工
具检测出的风险会存在一定程度的误报。 
IAST 是 Gartner 在 2012 年提出的一种应用安全测试方法，该方
法寻求结合 DAST 和 SAST 的优势，其实现原理通常为通过插桩的方
式在应用环境安装 Agent，从而在软件代码特定位置插入探针，通过
执行测试用例触发请求，跟踪获取请求、代码数据流、控制流等，
然后依据测试用例的执行情况和反馈结果进行综合的判断，分析是
否存在漏洞。相比于 DAST 和 SAST，IAST 既能识别漏洞所在代码位
置，又能记录触发漏洞的请求。和 DAST 类似的是 IAST 工具仅仅能
检测已执行的程序路径，因此其检测覆盖率方面的劣势有待提升，
可以通过和现有自动测试生成工具（如模糊测试工具）相结合的方
式来进一步提高覆盖率。 
SCA 是针对第三方开源软件（OSS）以及商业软件涉及的各种源码、
模块、框架和库进行分析、清点和识别，通过分析、清点和识别开
源软件的组件及其构成和依赖关系，能够识别出已知的安全漏洞或
者潜在的许可证授权问题，从而在发现安全风险的基础上，指导用
户把这些风险排查在应用系统投产之前。 
CU-DevSecOps 实践白皮书 
20 
3.3.4 预发布阶段 
预发布阶段是应用系统正式发布阶段前的阶段，应用系统在测试
环境中通过所有测试用例测试后，需要完成正式发布前最后的测试。
该阶段应用系统的所有功能和配置（例如数据库、中间件、系统配
置环境等）都与线上环境高度相似。 
在 DevSecOps 工具链中预发布阶段主要包含的安全活动有混沌工
程（识别并修复故障问题）、模糊测试（监视程序异常）、集成测
试（将所有组件、模块进行组装测试）和行为基线建立（建立形成
软件的安全行为基线），除了以上安全活动外，还可以开展基线合
规检测、容器镜像检测和渗透测试等。 