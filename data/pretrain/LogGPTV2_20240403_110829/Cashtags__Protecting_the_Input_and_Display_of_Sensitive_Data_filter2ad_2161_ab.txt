Screen-level masking:  One coarse-grained approach is 
to  mask the  full  application  window  or  screen regions 
when  encountering  sensitive  information  [61,  62].
While  this  approach  prevents  information  leakage,  it 
also  prevents  the  user  from  computing  using  the 
sensitive information. For example, when encountering 
USENIX Association  
24th USENIX Security Symposium  963
approach 
requires 
a
significant 
to  sensitive 
an  online  purchase  screen,  the  entire  screen  could  be 
blurred  due 
information,  making it 
unusable.
Tag-based  approach:    A tag-based approach requires 
the  user  to  predefine  the  data  elements  as sensitive. 
These data elements are then tracked as they propagate 
through the system [16]. If a tracked data element is to 
be displayed on the screen, the rendering is intercepted,
and  the  tracked  data  element  is  replaced  with  its 
corresponding alias. 
This 
system 
modification to support this granularity of data tracking, 
making  it  less  deployable.  In  addition,  the  system 
resources  and  required  accounting  to  track  the  data 
result in significant processing overhead incurred by the 
system.
Keyword-based  approach:    Another  approach  is  to 
utilize  keywords  and  perform  pattern  matching  on  on-
screen text elements. Like the tag-based approach, this 
option  works  at  the  individual  data  element  or  word 
granularity. It also has the requirement that the sensitive 
data element be specified to the system prior to the point 
of  screen 
rendering  and  subsequent  visual  data 
exposure.
The primary  difference,  however,  is  the method  in 
which  the  sensitive  data  is identified.  Rather  than 
tracking  sensitive  data  as  it  propagates  through  the 
system, this method parses data fields prior to the screen 
display. If a predefined sensitive element is matched, it 
is  replaced  with  its  alias  before  being rendered  to  the 
screen.  We  chose  this  approach  because  it  achieves 
word  granularity  protection  without 
tag-based 
overhead and deployment issues.
3.2 Where to intercept sensitive data
To  decide  where  to  intercept sensitive  data,  we  first 
need  to  understand  how  sensitive  data  traverses  from 
apps  to  the  screen  through  various  display  data  paths.  
Fig. 3.1 shows the display data paths under the Android 
application development  platform.    Although different, 
the  display  data  paths of  iOS  and  Windows generally 
have one-to-one mappings of the components.
Window manager:  A typical app displays information 
by invoking some user-level display or graphics library 
routines.  Various routines eventually invoke routines in 
the  underlying  window  management  system  (e.g., 
Surface  Flinger  for  Android) before  information  is
processed by the OS and displayed on the screen.
Arguably, the window management system might seem 
to  be a single  point at  which  all  sensitive  data can  be 
captured. 
time  sensitive 
  Unfortunately,  by 
the 
the 
Fig.  3.1. Display data paths for the Android platform.
information  arrives there,  some  sensitive  information 
may  have been  translated  into  bitmaps.    While  OCR 
techniques can be used to extract sensitive text, they are 
still too heavyweight to be used in the display data path, 
which  is  critical  for  user  interactions.
Replacing 
sensitive  bitmaps  with non-sensitive  ones  would  pose
other obstacles we would like to avoid. 
Applications:  Another extreme is to intercept it at the 
app level, where the sensitive information is introduced.  
Potentially,  we  can  modify  a  few  popular,  general-
purpose apps (e.g.,  browsers) and  capture  most  of  the
sensitive information.  However, such solutions may tie
users  to  specific  tools.  In  addition,  statistics  show  that 
specific  app  usage  accounts for  86%  of  user  time, 
trending  away  from  general-purpose  browsers  [56].  
Thus, we would need to initially modify more apps and
track their updates to achieve a good coverage.  
Library  routines:    Thus,  an  intermediary  ground  is  to 
intercept  sensitive  data  within  a  few  key display  and 
graphics library routines.
3.3 User interface
Early design:  In our early user-interface design, users-
defined English-like  aliases  in  a  repository  to  indicate 
sensitive data items that they wish not to be shown (e.g., 
use  John to  represent  Joe).    To  discern  these  aliases 
when processing, we used an alternative input channel 
to mark them.  This initial design proved problematic.  
Our initial prototype was a software keyboard app with 
elevated  privilege  to  offer  input  across  applications.  
This  implementation  would  be  easier  to  port  across
platforms,  deploy,  install,  and  update. 
  However, 
changing keyboards in the midst of a stream of input is 
964  24th USENIX Security Symposium 
USENIX Association
legacy swipe-based 
to appear  as  normal 
cumbersome  in  practice.    This  method  also  interacted 
poorly  with 
inputs,  emoticon 
support, auto correction, and custom dictionaries.
Further, we would need to replace the default keyboard 
with ours, and provide ways to switch  modes between 
normal  and sensitive  entries (e.g.,  a  screen  tapping 
sequence).    By  doing  so,  we  could retain  legacy 
functionalities  such  as  auto correction.    On  the  other 
hand,  the  development  effort  of  this  approach  would
have been much higher,  and  novice  users  might have 
trouble replacing the default keyboard.  
Direct  input  of  cashtags:    While  there  are  other  input 
interface  options,  the  need  to  switch input  modes to 
allow aliases 
text  seemed
superfluous (e.g., using “visa” to represent the 16-digit 
credit card number).    
Thus, we explored the use of cashtags, where aliases are 
prepended with  a $ sign, 
to  represent  sensitive 
information.    By  doing  so,  a  user  can  directly  enter 
cashtags, and the mode change is encoded in the cashtag 
alias (e.g., use $fname to represent John and $gmail
to  represent  PI:EMAIL).    This  method  can 
leverage 
the  existing  custom  dictionary  for  auto 
completion, which  makes  it  easier  for  the  user  to 
remember and input the cashtags.  This method can also 
utilize 
development 
techniques, opening  up  the  range  of  supported  device 
platforms and  decreasing  development  and  installation 
efforts.
Direct 
  Another 
supported  alternative  input  mechanism  (with  some 
information  leak)  is  for  a  user  to  enter  the  initial 
characters of a sensitive data item.  As soon as the auto 
completion  detects that,  Jo is  likely  to  mean Joe,  for 
example, it will be automatically masked with $john.  
The user then can choose $john and proceed.
Additional  Cashtags 
is 
supported,  so  we  can  use  $signature to  represent 
$fname  $lname  $gmail,  which  in  turn  maps to 
John  Smith,  jsmith@gmail.com.    We  disallow  circular 
cashtags mappings (e.g., use $john to represent $joe, 
and $joe to represent $john).
3.4 Accessing sensitive information
One design issue addresses converting cashtags back to 
the sensitive data for access by apps.  Normally, when 
an app wants to access the sensitive information and to 
send  it  back  to  the  hosting server, we must make  sure
that the conversion is performed prior to access, so that 
the  app  would  never cache,  store,  or  transmit  the 
cashtags.    The  concern  is  that  cashtags  may  break  an 
input  of  sensitive 
application-level 
information: 
standard 
semantics: 
  Recursion 
spacing 
represented  using  different 
app  due  to  the  violation  of  the  type  or  formatting 
constraints.  
We also must make sure that the cashtags are actually 
entered by the user, not just pre-populated by the app.  
Otherwise,  a  malicious  app  can  extract  sensitive 
information just by displaying cashtags.  
There  are  certain  exceptions  where it  is  desirable  to 
operate  directly  on  cashtags  instead  of  the  sensitive 
information.    For  example,  the  auto-completion  task 
will auto complete cashtags ($fn to $fname), not the 
sensitive  information  it  represents.    By  doing  so,  the 
handling  of  text  span  issues  is  simplified  because 
cashtags usually differ in text lengths when compared to 
the sensitive information they represent.  
3.5 Variants of data formats
Sensitive data may be represented in multiple formats.  
For example, names can be represented as combinations 
of first, last, and middle initials (e.g., John Smith; John 
Q.  Smith).    Accounts  and  social  security  numbers  can 
be 
and/or 
hyphenation  schemes  (e.g.,  123456789;  123-45-6789).  
Fortunately, we can leverage existing regular expression 
libraries  (java.util.regex.*)  to  perform  such 
matching.
Another issue involves the type restriction of the input 
field.    For  example,  a  number  field  (e.g.,  SSN) may 
prevent  the  use  of  cashtags ($ssn).    To  circumvent 
these restrictions,  we  allow  users  to  define  special 
aliases (e.g., 000-00-0000) to represent certain types of 
sensitive information (e.g., social security numbers).  
3.6 Deployment and development models
To  avoid  modifying 
individual  applications,  we
considered two options to provide system-level changes:  
(1)  custom  system  firmware  images  (ROMs)  and (2) 
code-injection frameworks (e.g., Android Xposed)
By utilizing a custom system firmware image, complete 
(This 
control  of  the  operating  system  is  provided. 
approach assumes that the full source is available.)
In 
addition, ROM-based solutions can offer a more unified 
testing  environment.    However,  the  changes  would  be 
restricted to device-specific builds. Only hardware for 
which  the  source  is  built  would  have  access  to  the 
modified  system.    This  also  limits  user  preference  by 
restricting  use  only  for  a specific system  image.    It 
would  additionally  require  regular  maintenance,  and  it 
would break vendor over-the-air update functionality.  
Instead,  we  used a  code-injection  framework,  which 
incorporates  our 
overrides
framework into execution prior to the starting of apps.
routines
library 
and
USENIX Association  
24th USENIX Security Symposium  965
installation  and  use  of 
Code  injection offers streamlined  development, as 
standard application development tools can be used.  In 
addition, these modules can be distributed and deployed 
as  applications.  Because code  injection  only  relies  on 
the  underlying  system  using  the  same  set  of  libraries, 
the resulting system is more portable and less coupled to 
versions and configurations of system firmware.
The 
the  code-injection 
framework  requires  root  access  to  the  device.  This  is, 
however, not a firm requirement and exists only for this 
prototype; Vendors and OEMs can incorporate Cashtags 
into  system  firmware  providing  the  same  functionality 
without  exposing  root.  This  deployment  model  is 
advisable  to  further  enhance  security  for  a  production 
system.
3.7 Cashtags app and repository
Cashtags aliases and sensitive data items are maintained 
in  a repository.    The  Cashtags  app  coordinates  the
interactions  between various  apps  and  the  repository.  
The app also provides password-protected access to add, 
edit,  remove,  import,  and export  sensitive  terms  and 
corresponding cashtags.
Cashtags 
blacklisting, 
excluding  specific  applications  from  being  code-
injected  (or  activated)  with  cashtag-replacement  code. 
For  example,  the  cashtag  repository  itself  must  be 
excluded  due  to  circular  dependencies.      To  illustrate, 
suppose  a  cashtag  entry  maps  $fname to  Joe.    If 
Cashtags is enabled, the screen will show that $fname
is mapped to $fname; when saved, Joe will be mapped 
to  Joe.  Apps with  a low  risk  to  reveal  sensitive 
information  can  be  excluded  for  performance  issues 
(e.g., games, application launchers, home screens).
per-application 
provides 
Our  code-injection 
4. Implementation
We prototyped  Cashtags  on  the  open-source  Android 
platform. 
framework  allows 
Cashtags  to  operate  on  any  Android  device  with  the 
same  display  and  graphics  libraries  and  root  access.  
This  section  will  first  detail  the  Android  display  data 
paths,  explain 
the  code-injection  framework,  and 
discuss  how  various  display  data  paths  are  intercepted 
and how cashtags are stored.
4.1 Android display elements
Fig 3.1 has shown a top-level view of the various ways
Android apps and browsers display information on the 
screen.    This  section  provides  further  background on
Android  terminologies.    Corresponding  terminologies 
for  text  widgets  on  Apple and  Windows devices are 
listed in Table 4.
Android
TextView
Apple
Windows
UITextView TextBlock
GLES20
Canvas
TextView
GLKView
Direct3D
UITextView TextBlock
WebView UIWebView WebView
WebView UIWebView WebView
Text 
Labels
OpenGL 
Text
Editable 
Text
Webapp 
Text
Browser/
WebView
Table 4: Widget terminologies on Android, Apple, and 
Windows platforms.
The Android display is composed of views, layouts, and 
widgets.  View is the base class for all on-screen user 
interface components. 
Widgets:    The  term  widget  is  used  to  describe  any 
graphic  on-screen  element.    Different  widgets  can  be 
used to display static text labels (e.g., TextView), user 
(e.g.,  EditText),  controls 
input  boxes 
(e.g., 
Buttons), and other media (e.g., ImageView). 
Views are organized into ViewGroups, the base class 
for  all  screen  layouts.  Layouts are  arrangements  of 
views  within  vertical  or  horizontal  aligned  containers 
(e.g., LinearLayout),  or  arranged  relative  to  other 
views. Nesting of ViewGroups and Layouts allows 
complex custom composites to be defined.
Collectively, this  tree  of  layouts  and  widgets  forms  a
view  hierarchy.  When  the  screen  is  drawn,  the  view 
hierarchy 
interface 