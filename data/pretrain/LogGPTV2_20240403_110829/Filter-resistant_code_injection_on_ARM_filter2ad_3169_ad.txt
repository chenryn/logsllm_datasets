ing ] (the loop operator allows for nested
loops).
continue the loop if the memory pointed
to by the memory pointer is not 0, if it is
0, execution continues after the ].
the
C equivalent
p++;
p--;
(*p)++;
(*p)--;
write(1, p, 1);
read(0, p, 1);
while (*p) {
if (!*p) break; }
Exiting Thumb mode.
If the program that is being exploited is running in Thumb mode
when the vulnerability is triggered, the attacker can either choose
to continue with shellcode that uses Thumb instructions, or he can
switch to ARM mode. The SWI instruction is not alphanumeric
in Thumb mode, making self-modifying code impossible with only
Thumb instructions. The alternative is to switch to ARM mode,
where system calls can be performed.
BX
ADD
In Thumb mode, pc points to the address of the current instruc-
tion, plus 4. Since Thumb instructions are 2 bytes long, we must
add a dummy instruction after the BX instruction. Also note that a
dummy instruction before BX might be necessary in order to correct
the Thumb alignment to ARM alignment.
5. TURING COMPLETENESS
pc
r7 , #50
In this section we argue that with our alphanumeric ARM shell-
code we are able to perform all useful computations. We are going
to show that the shellcode is Turing complete. Our argument runs
as follows: we take a known Turing-complete programming lan-
guage and build an interpreter for this language in alphanumeric
shellcode.
The language of choice is BrainF*ck (BF) [26], which has been
proven to be Turing complete [24]. BF is a very simple language
that mimics the behavior of a Turing machine. It assumes that it has
access to unlimited memory, and that the memory is initialized to
zero at program start. It also has a pointer into this memory, which
we call the memory pointer. The language supports 8 different op-
erations, each symbolized by a single character. Table 5 describes
the meaning of each character that is part of the BF alphabet and
gives the equivalent meaning in C (assuming that p is the memory
pointer of type char*).
We implemented a mapping of BF to alphanumeric shellcode as
an interpreter written in alphanumeric ARM shellcode. The inter-
preter takes as input any BF program and simulates the behavior of
this program. The details of the interpreter are discussed below.
Several issues had to be addressed in our implementation.
• Because we wanted the BF program that must be executed
to be part of the interpreter shellcode, we remapped all BF
operations to alphanumeric characters: > ... ] are mapped to
the characters J ... C respectively.
• We extended the BF language (since this is a superset of
BF, it is still Turing complete), with a character to do pro-
gram termination. We use the character “B” for this purpose.
While this is not necessary to show Turing completeness,
having a termination character simpliﬁes our implementa-
tion.
• As with BF we assume that we have unlimited memory, our
implementation provides for an initial memory area of 1024
bytes but this can be increased as needed.
• The memory required by our interpreter to run the BF pro-
gram is initialized to 0 at startup of the interpreter.
5.1 Initialization
To support the BF language, we use three areas of memory: one
which contains the code of the BF programming (we will refer to
this as the BF-code area) that we are executing, a second which
serves as the memory of the program (the BF-memory area), and
a third which we use as a stack to support nested loops (the loop-
memory area). Memory for these areas is assumed to be part of the
shellcode and each area is assumed to be 1024 bytes large.
We store pointers to each of these memory areas in registers r10,
r9 and r11 respectively. These pointers are calculated by sub-
tracting from the pc register. Once these registers are initialized,
18the contents of BF-memory is initialized to 0. Since it’s part of our
shellcode, the BF-memory contains only alphanumeric characters
by default. The memory is cleared by looping (using a conditional
branch) over the value of r9 and setting each memory location to
0 until it reaches the end of the buffer. The memory size can be
increased by adding more bytes to the BF-memory region in the
shellcode, and by making minor modiﬁcations to the initialization
of the registers r9 to r11.
5.2 Parsing
Parsing the BF program is done by taking the current character
and executing the expected behavior. To simplify the transition of
the control ﬂow from the code that is interpreting each BF code
character to the actual implementation of the function, we use a
jump table. The implementation of every BF operation is assumed
to start 256 bytes from the other. By subtracting ‘A’ from the char-
acter we are interpreting and then subtracting that number multi-
plied by 256 from the program counter, we generate the address
that contains the start of the implementation of that operation. To
be able to end the program correctly we need the program termi-
nation character that was added to the BF language earlier (“B”).
Because the implementation of a BF operation must be exactly 256
bytes, the actual implementation code is padded with dummy in-
structions.
5.3 BF Operations
The ﬁrst four BF operations: “>”,“ instruction. Each possible
branch instruction is ﬁxed up in this way: at the end of a BF opera-
tion when we must jump to the end of the function, for the branches
used to implement the loop instructions, . . .
As discussed in Section 4.7, the arguments to system calls also
need to be overwritten. This is also done by our self-modifying
code.
All this self-modiﬁcation is done right after the shellcode has
started executing. Once we have overwritten all necessary memory
locations, a cache ﬂush is performed, which ensures that the new
instructions will be read correctly when the processor reaches them.
6. RELATED WORK
Building regular shellcode for ARM exists for both Linux [19]
and Windows [20]. To facilitate NULL-byte avoidance, self-modi-
ﬁcation is also discussed in [19]. However, because only the argu-
ments to SWI are modiﬁed, no cache ﬂush is needed in this case,
simplifying the shellcode considerably.
Alphanumeric shellcode exists for Intel architectures [33]. Due
to the variable length instructions used on this architecture, it is
easier to achieve alphanumeric shellcode because many more in-
structions can be used compared to ARM architectures (jumps, for
instance, are no problem), and the code is also not cached. Eller
[16] discusses an encoder that will encode instructions as ASCII
characters, that when executed on an Intel processor will decode
the original instructions and execute them.
In Shacham [36] and Buchanan [11], the authors describe how
to use the instructions provided by libc on both Intel and RISC
architectures to perform return-into-libc attacks that are also Turing
complete. By returning to a memory location which performs the
desired instruction and subsequently executes a return, attackers
can string together a number of return-into-libc attacks which can
execute arbitrary code. The addresses returned to in that approach,
however, may not be alphanumeric, which can result in problems
when confronted with ﬁlters that prevent the use of any type of
value.
7. CONCLUSION
In this paper we discussed how an attacker can use purely al-
phanumeric characters to insert shellcode into the memory space
of an application running on a RISC processor. Given the fact that
all instructions on a 32-bit RISC architecture are 4 bytes large, this
turns out to be a non-trivial task: only 0.34% of the 32 bit words
consist of 4 alphanumeric characters. However, we show that even
with these severe constraints, it is possible to build an interpreter
for a Turing complete language, showing that this alphanumeric
shellcode is Turing complete. While the fact that the alphanumeric
shellcode is Turing complete means that any program written in
another Turing complete language can be represented in alphanu-
meric shellcode, an attacker may opt to simplify the task of writing
alphanumeric shellcode in ARM by building a stager in alphanu-
meric shellcode that decodes the real payload, which can then be
written non-alphanumerically.
In [47], we present real-world alphanumeric ARM shellcode that
executes a pre-existing executable, demonstrating the practical ap-
plicability of the shellcode.
Using alphanumeric shellcode, an attacker can bypass ﬁlters that
ﬁlter out non-alphanumeric characters, while still being able to in-
ject code that can perform arbitrary operations. It may also help an
attacker in evading intrusion detection systems that try to detect the
existence of shellcode in input coming from the network.
8. REFERENCES
[1] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti.
Control-ﬂow integrity. In 12th ACM Conference on
Computer and Communications Security, Nov. 2005.
[2] Aleph1. Smashing the stack for fun and proﬁt. Phrack, 49,
1996.
[3] A. Anisimov. Defeating Microsoft Windows XP SP2 heap
protection and DEP bypass.
19[4] Anonymous. Once upon a free(). Phrack, 57, 2001.
[5] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S. Palmer,
D. Stefanovi´c, and D. D. Zovi. Randomized instruction set
emulation to disrupt binary code injection attacks. In 10th
ACM Conference on Computer and Communications
Security, Oct. 2003.
[6] J. Bello Rivas. Overwriting the .dtors section, 2000.
[7] S. Bhatkar, D. C. Duvarney, and R. Sekar. Address
obfuscation: An efﬁcient approach to combat a broad range
of memory error exploits. In 12th USENIX Security
Symposium, Aug. 2003.
[8] S. Bhatkar and R. Sekar. Data space randomization. In 5th
Conference on Detection of Intrusions and Malware &
Vulnerability Assessment, volume 5137 of Lecture Notes in
Computer Science, July 2008.
[9] S. Bhatkar, R. Sekar, and D. C. Duvarney. Efﬁcient
techniques for comprehensive protection from memory error
exploits. In 14th USENIX Security Symposium, Aug. 2005.
[10] Blexim. Basic integer overﬂows. Phrack, 60, Dec. 2002.
[11] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When
good instructions go bad: Generalizing return-oriented
programming to RISC. In 15th ACM Conference on
Computer and Communications Security, Oct. 2008.
[12] Bulba and Kil3r. Bypassing StackGuard and Stackshield.
Phrack, 56, 2000.
[13] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. PointGuard:
protecting pointers from buffer overﬂow vulnerabilities. In
12th USENIX Security Symposium, Aug. 2003.
[14] C. Cowan, C. Pu, D. Maier, H. Hinton, J. Walpole, P. Bakke,
S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard:
Automatic adaptive detection and prevention of
buffer-overﬂow attacks. In 7th USENIX Security Symposium,
Jan. 1998.
[15] I. Dobrovitski. Exploit for CVS double free() for Linux
pserver, Feb. 2003.
[16] R. Eller. Bypassing msb data ﬁlters for buffer overﬂow
exploits on intel platforms, Aug. 2000.
[17] Ú. Erlingsson. Low-level software security: Attacks and
defenses. Technical Report MSR-TR-2007-153, Microsoft
Research, Nov. 2007.
[18] H. Etoh and K. Yoda. Protecting from stack-smashing
attacks. Technical report, IBM Research, June 2000.
[19] funkysh. Into my ARMs: Developing StrongARM/Linux
shellcode. Phrack, 58, Dec. 2001.
[20] T. Hurman. Exploring Windows CE shellcode, June 2005.
[21] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible
bounds checking for arrays and pointers in C programs. In
3rd International Workshop on Automatic Debugging, 1997.
[22] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering
code-injection attacks with instruction-set randomization. In
10th ACM Conference on Computer and Communications
Security, Oct. 2003.
[23] V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure
execution via program shepherding. In 11th USENIX
Security Symposium, Aug. 2002.
[24] S. Köhler, C. Schindelhauer, and M. Ziegler. On
approximating real-world halting problems. In 15th
International Symposium on Fundamentals of Computation
Theory, volume 3623 of Lecture Notes in Computer Science,
Sept. 2005.
[25] H. D. Moore. Cracking the iPhone.
[26] U. Müller. Brainf*ck, June 1993.
[27] T. Ormandy. LibTIFF next rle decoder remote heap buffer
overﬂow vulnerability, Aug 2006.
[28] T. Ormandy. LibTIFF TiffFetchShortPair remote buffer
overﬂow vulnerability, Aug 2006.
[29] A. Ortega. Android web browser gif ﬁle heap-based buffer
overﬂow vulnerability, Mar. 2008.
[30] N. Provos. Improving host security with system call policies.
In 12th USENIX Security Symposium, Aug. 2003.
[31] P. Ratanaworabhan, B. Livshits, and B. Zorn. Nozzle: A
defense against heap-spraying code injection attacks.
Technical Report MSR-TR-2008-176, Microsoft Research,
Nov. 2008.
[32] G. Richarte. Four different tricks to bypass stackshield and
stackguard protection, June 2002.
[33] rix. Writing IA32 alphanumeric shellcodes. Phrack, 57, Aug.
2001.
[34] O. Ruwase and M. S. Lam. A practical dynamic buffer
overﬂow detector. In 11th Annual Network and Distributed
System Security Symposium, Feb. 2004.
[35] Scut. Exploiting format string vulnerabilities, 2001.
[36] H. Shacham. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86). In 14th
ACM conference on Computer and Communications
Security, Oct. 2007.
[37] H. Shacham, M. Page, B. Pfaff, E. J. Goh, N. Modadugu, and
D. Boneh. On the effectiveness of address-space
randomization. In 11th ACM conference on Computer and
Communications Security, Oct. 2004.
[38] skape and Skywing. Bypassing windows hardware-enforced
data execution prevention. Uninformed, 2, Sept. 2005.
[39] A. Sloss, D. Symes, and C. Wright. ARM System Developer’s
Guide. Elsevier, 2004.
[40] Solar Designer. Getting around non-executable stack (and
ﬁx), Aug. 1997.
[41] A. Sotirov. Reverse engineering and the ANI vulnerability,
Apr. 2007.
[42] A. Sotirov and M. Dowd. Bypassing browser memory
protections: Setting back browser security by 10 years. In
BlackHat 2008, Aug. 2008.
[43] N. Sovarel, D. Evans, and N. Paul. Where’s the FEEB? the
effectiveness of instruction set randomization. In 14th
USENIX Security Symposium, Aug. 2005.
[44] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens,
S. Lachmund, and T. Walter. Breaking the memory secrecy
assumption. In European Workshop on System Security, Mar.
2009.
[45] R. Wojtczuk. Defeating Solar Designer non-executable stack
patch, Feb. 1998.
[46] Y. Younan, W. Joosen, and F. Piessens. Code injection in C
and C++: A survey of vulnerabilities and countermeasures.
Technical Report CW386, Dept. Computerwetenschappen,
KULeuven, July 2004.
[47] Y. Younan and P. Philippaerts. Alphanumeric RISC ARM
shellcode. Phrack, 66, June 2009.
[48] Y. Younan, P. Philippaerts, L. Cavallaro, R. Sekar,
F. Piessens, and W. Joosen. PAriCheck: An efﬁcient pointer
arithmetic checker for C programs. Technical Report
CW554, Dept. Computerwetenschappen, KULeuven, June
2009.
20