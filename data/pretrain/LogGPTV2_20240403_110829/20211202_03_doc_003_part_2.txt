┊ ┊ ┊ r₃ '::circle, --.
Querying Geometric Objects ✎
A vast library of geometric operations (excerpt):
Operation ┆ Operation
+, - translate ┆ area(･) area
* scale/rotate ┆ height(･) height of box
@-@ length/circumference ┆ width(･) width of box
@@ center ┆ bound_box(･,･) bounding box
 distance between ┆ diameter(･) diameter of circle
&& overlaps? ┆ center(･) center
 contains? ┆ pclose(･) close an open path
(p)[0], (p)[1] to access x/y coordinate of point p.
6
Use Case: Shape Scanner
➊ Horizontal scan ➋ Scan result
⎧ ⦙⦙ ⭭ ⦙ ↓
⎪ ⦙⦙ ⦙ ↓ ↓
⎪ ⦙⦙ ⦙ ↓ ↓
y ⎨ ⦙⦙ ⭭ ↓ ↓
⎪ ⦙⭭ shape ↓ ↓
⎪ ⭭ ↓ ↓
⎩ ⭫⭫ ⭫ ⭫ ↑↑↑↑↑↑↑↑↑↑↑
x
Given an unknown shape (a polygon geometric object):
1. Perform horizontal “scan” to trace minimum/maximum
(i.e., bottom/top) y values for each x.
2. Use bottom/top traces to render the shape.
11 ┆ JSON (JavaScript Object Notation)
JSON defines a textual data interchange format. Easy for
humans to write and machines to parse (see http://json.org):
‹object› ::= {} | { ‹members› }
‹members› ::= ‹pair› | ‹pair› , ‹members›
‹pair› ::= ‹string› : ‹value›
‹array› ::= [] | [ ‹elements› ]
‹elements› ::= ‹value› | ‹value› , ‹elements›
‹value› ::= ‹string› | ‹number› | true | false | null
| ‹array› | ‹object›
SQL:2016 defines SQL↔JSON interoperability. JSON
‹value›s may be constructed/traversed and held in table
cells (we still consider 1NF to be intact).
JSON Sample ‹value›s
‹members›
4────────────────5─────────────────6
{ "title":"The Last Jedi", "episode":8 }
! 7────8────9
‹object› ‹pair›
Table T (see Chapter 01):
⎧ [ { "a":1, "b":"x", "c":true, "d":10 },
⎪ { "a":2, "b":"y", "c":true, "d":40 },
‹elements› ⎨ { "a":3, "b":"x", "c":false, "d":30 },
⎪ { "a":4, "b":"y", "c":false, "d":20 },
⎩ { "a":5, "b":"x", "c":true, "d":null } ]
! !
‹number› ‹array› (of ‹object›s)
JSON in PostgreSQL: Type jsonb3
Literal string syntax embeds JSON ‹value›s in SQL queries.
Casting to type jsonb validates and encodes JSON syntax:
VALUES (1, '{ "b":1, "a":2 }' ::jsonb),
(2, '{ "a":1, "b":2, "a":3 }' ),
(3, '[ 0, false,null ]' );
column1 column2
1 {"a": 2, "b": 1}
2 {"a": 3, "b": 2}
3 [0, false, null]
3 Alternative type json preserves member order, duplicate fields, and whitespace.
⚠ Reparses JSON values on each access, no index support.
Navigating JSON ‹value›s
Access field ‹f› / element at index ‹i› in array ‹value›
via -> or ->>:4
‹value›->‹f› ⎱ yields a jsonb value, permits further
‹value›->‹i› ⎰ navigation steps via ->, ->>
‹value›->>‹f› ⎱ yields a text value (cast to atomic type
‹value›->>‹i› ⎰ for further computation)
Path navigation: chain multiple navigation steps via #>
or #>>: ‹value› #> '{‹f ᵒʳ i›,...,‹f ᵒʳ i›}'.
4 Extracting non-existing fields yields NULL. JSON arrays are 0-based.
Bridging between JSON and SQL
Turn the fields and/or nested values inside JSON object
‹o› ≡ { ‹f₁›:‹v₁›,...,‹fₙ›:‹vₙ› } or array
‹a› ≡ [‹v₁›,...,‹vₙ›] into tables which we can query:5
SELECT * ┊ SELECT *
FROM jsonb_each(‹o›) ┊ FROM jsonb_array_elements(‹a›)
┌──────┬───────┐ ┊ ┌───────┐
│ key │ value │ ┊ │ value │
├╌╌╌╌╌╌┼───────┤ ┊ ├───────┤
│ ‹f₁› │ ‹v₁› │ ┊ │ ‹v₁› │
│ ⋮ │ ⋮ │ ┊ │ ⋮ │
│ ‹fₙ› │ ‹vₙ› │ ┊ │ ‹vₙ› │
└──────┴───────┘ ┊ └───────┘
5 Re jsonb_each(･): jsonb_to_record(･) or jsonb_populate_record(τ,･) help to create typed records.
Constructing JSON ‹value›s ✎
row_to_json(･)::jsonb
Convert a single SQL row into a JSON ‹object›. Column
names turn into field names:
SELECT row_to_json(t)::jsonb -- yields objects of the form
FROM T AS t; -- {"a":･,"b":･,"c":･,"d":･}
array_to_json(array_agg(･))::jsonb
Aggregate JSON ‹object›s into a JSON ‹array›:
-- a unity for now
-- 4──────────5──────────6
SELECT array_to_json(array_agg(row_to_json(t)))::jsonb
FROM T AS t;
12 ┆ XML (Extensible Markup Language)
XML defines textual format to describe ordered n-ary trees:
 movie
Dec 18, 2017
The Last Jedi
 release title
"Dec 18" @epsiode "The Last Jedi"
⋮
"8"
XML support in SQL predates JSON support. Both are
similar in nature. XML not discussed further here.6
6 See the course Database-Supported XML Processors.
13 ┆ Sequences
Sequences represent counters of type bigint (−2⁶³--.2⁶³-1).
Typically used to implement row identity/name generators:
CREATE SEQUENCE ‹seq› -- sequence name
[ INCREMENT ‹inc› ] -- advance by ‹inc› (default: 1≡↑)
[ MINVALUE ‹min› ] -- range of valid counter values
[ MAXVALUE ‹max› ] -- (defaults: [1..2⁶³-1])
[ START ‹start› ] -- start (default: ↑‹min›, ↓‹max›)
[ [NO] CYCLE ] -- wrap around or error(≡ default)?
Declaring a column of type serial creates a sequence:
CREATE TABLE ‹T› (..., ‹c› serial, ...) -- implies NOT NULL
⇩
CREATE SEQUENCE ‹T›_‹c›_seq;
Advancing and Inspecting Sequence State ✎
Counter state can be (automatically) advanced and
inspected:
CREATE SEQUENCE ‹seq› START 41 MAXVALUE 100 CYCLE;
⋮
SELECT nextval('‹seq›'); -- ⇒ 41
SELECT nextval('‹seq›'); -- ⇒ 42
SELECT currval('‹seq›'); -- ⇒ 42
SELECT setval ('‹seq›',100); -- ⇒ 100 (+ side effect)
SELECT nextval('‹seq›'); -- ⇒ 1 (wrap-around)
!
sequence/table names are not 1ˢᵗ class in SQL
⚠
Columns of type serial automatically populate with (and
advance) their current counter value when set to DEFAULT.