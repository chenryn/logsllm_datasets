## PostgreSQL 硬通胀产品(茅台、藏品等) 打假、防伪、溯源 区块链应用 结构设计和demo     
### 作者    
digoal    
### 日期    
2020-09-04    
### 标签    
PostgreSQL , 区块链    
----    
## 背景    
每一瓶茅台有一个唯一ID, 每次变更状态(例如出库、入库、销售等)会扫描这个ID并存储记录它的变更信息, 未来可以追溯一瓶茅台的整个生命周期, 过去任意时刻的状态.    
同时可以统计任意时刻, 每个仓库、商店的存货.     
可以查询每个仓库、商店的流水.    
以交易品(例如茅台)为KEY, 设计一个方便存储它的最终状态的结构, 便于上区块链.    
## 设计1    
建表    
```    
create table tbl (    
  id int8 primary key,  -- 主键    
  repo int,  -- 仓库ID    
  src int, -- 来源ID    
  maotai_id text, -- 酒二维码     
  ops int, -- 操作(入库非0, 出库0)     
  ts timestamp -- 操作时间    
);    
create sequence seq;    
```    
索引    
```    
create index idx_tbl_1 on tbl (ts);    
create index idx_tbl_2 on tbl (repo,ts);    
create index idx_tbl_3 on tbl (maotai_id,ts);    
```    
1、进出库操作     
模拟1000个仓库, 100万瓶酒的进出库操作     
```    
vi test.sql    
\set repo random(1,999)    
\set maotai_id random(1,1000000)    
\set ops random(0,10)    
insert into tbl(id,repo,src,maotai_id,ops,ts) values (nextval('seq'), :repo, :repo+1, md5(:maotai_id::text), :ops, clock_timestamp()+((random()*1000)::int::text||' hour')::interval);     
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 52 -j 52 -T 600    
transaction type: ./test.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 52    
number of threads: 52    
duration: 600 s    
number of transactions actually processed: 121164819    
latency average = 0.257 ms    
latency stddev = 0.660 ms    
tps = 201941.041061 (including connections establishing)    
tps = 201942.903863 (excluding connections establishing)    
statement latencies in milliseconds:    
         0.000  \set repo random(1,999)    
         0.000  \set maotai_id random(1,1000000)    
         0.000  \set ops random(0,10)    
         0.257  insert into tbl(id,repo,src,maotai_id,ops,ts) values (nextval('seq'), :repo, :repo+1, md5(:maotai_id::text), :ops, clock_timest    
```    
2、初始化盘点统计    
```    
create table tbl_stat (    
  stat_date date, -- 统计日期    
  repo int, -- 仓库ID    
  cnt_j int, -- 进数量    
  cnt_c int, -- 出数量    
  cnt_s int, -- 剩数量    
  maotai_id_j text[],  -- 进酒唯一标示    
  maotai_id_c text[],  -- 出酒唯一标示    
  maotai_id_s text[],  -- 剩酒唯一标示    
  primary key (stat_date,repo)    
);     
```    
```    
create or replace function arr_add(text[] , text[]) returns text[] as $$    
select array(select * from unnest($1||$2) where unnest is not null group by 1);    
$$ language sql strict immutable parallel safe;    
create or replace function arr_min(text[] , text[]) returns text[] as $$    
select array(select * from unnest($1) where unnest is not null except select * from unnest($2) where unnest is not null group by 1);    
$$ language sql strict immutable parallel safe;    
```    
初始盘点    
```    
do language plpgsql $$    
declare    
  v1 date;  -- 日期    
  v2 int;   -- 仓库ID    
  v_repo int := -99999;  -- 计算态中间仓库ID    
  v_maotai_id_s text[];  -- 计算态中间 剩酒唯一标示    
begin    
for v1,v2 in select date(ts), repo from tbl group by repo,date(ts) order by repo, date(ts)     
loop     