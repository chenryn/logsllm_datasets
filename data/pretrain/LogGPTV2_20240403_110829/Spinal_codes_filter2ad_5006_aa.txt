title:Spinal codes
author:Jonathan Perry and
Peter Iannucci and
Kermin Fleming and
Hari Balakrishnan and
Devavrat Shah
Jonathan Perry, Peter A. Iannucci, Kermin E. Fleming, Hari Balakrishnan, and Devavrat Shah
Massachusetts Institute of Technology, Cambridge, Mass., USA
Spinal Codes
ABSTRACT
Spinal codes are a new class of rateless codes that enable wireless
networks to cope with time-varying channel conditions in a natural
way, without requiring any explicit bit rate selection. The key idea
in the code is the sequential application of a pseudo-random hash
function to the message bits to produce a sequence of coded symbols
for transmission. This encoding ensures that two input messages that
differ in even one bit lead to very different coded sequences after
the point at which they differ, providing good resilience to noise
and bit errors. To decode spinal codes, this paper develops an ap-
proximate maximum-likelihood decoder, called the bubble decoder,
which runs in time polynomial in the message size and achieves the
Shannon capacity over both additive white Gaussian noise (AWGN)
and binary symmetric channel (BSC) models. Experimental results
obtained from a software implementation of a linear-time decoder
show that spinal codes achieve higher throughput than ﬁxed-rate
LDPC codes [11], rateless Raptor codes [33], and the layered rate-
less coding approach [8] of Strider [12], across a range of channel
conditions and message sizes. An early hardware prototype that can
decode at 10 Mbits/s in FPGA demonstrates that spinal codes are a
practical construction.
CATEGORIES AND SUBJECT DESCRIPTORS
C.2.1 [Network Architecture and Design]: Wireless communica-
tion
GENERAL TERMS
Algorithms, Design, Performance
KEYWORDS
Wireless, rateless, channel code, capacity, practical decoder
1.
INTRODUCTION
Signal attenuation, noise, multipath fading, and interference all
make it difﬁcult to achieve high throughput over wireless networks.
Achieving high throughput is challenging even when the channel
is characterized by a single invariant parameter such as the noise
variance or the bit-error rate, but in practice, mobility and interfer-
ence cause conditions to vary over multiple time-scales. Currently
deployed solutions to this problem in wireless LANs and cellular
networks are reactive; they measure the channel to dynamically
select a “bit rate”—i.e., a modulation scheme, channel code, and
code rate—from a set of pre-deﬁned choices.
An alternate approach is to use a rateless code between the sender
and receiver [8, 12, 27]. With a rateless code, the sender encodes
the message bits so that every achievable higher rate is a preﬁx of
achievable lower rates. The sender keeps transmitting coded data
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’12, August 13–17, 2012, Helsinki, Finland.
Copyright 2012 ACM 978-1-4503-1419-0/12/08 ...$15.00.
until the receiver informs the sender that it has correctly decoded
all the data (or the sender gives up). An ideal rateless code can be
decoded correctly with modest computational complexity as soon as
the effective rate drops below the capacity of the channel; the preﬁx
property of such a code eliminates the need for the heuristics used
in explicit bit rate selection.
This paper presents the encoding, decoding, and performance
of spinal codes, a new class of rateless codes. Spinal codes can
encode message bits directly to constellation symbols (which is
somewhat unusual), or they can produce a sequence of coded bits to
be transmitted using any pre-existing symbol set. The ﬁrst approach
is preferable because the spinal decoder can extract information
from the raw received symbols without a demapping step, permitting
the use of the same dense constellation at all signal-to-noise ratios
(SNR). Even without control over the physical layer, spinal codes
may be useful over an existing physical layer modulation to improve
throughput and error resilience.
Spinal codes apply a hash function sequentially to successive por-
tions of the original message bits to produce a pseudo-random map-
ping from message bits to coded bits, and then use a constellation
mapping function to produce a sequence of symbols for transmis-
sion. Thanks to the sequential application of the hash function, two
input messages differing in even a single bit result in independent,
seemingly random symbols after the point at which they differ: any
difference between messages is magniﬁed in the encoded symbols.
This property makes the code robust to noise and errors; it achieves
reasonable rates even at SNR as low as −5 dB.
No previous code uses a hash function because good hash func-
tions, by design, do not possess a simple, invertible structure.
Therefore, unlike previous codes such as low-density parity check
(LDPC) [11], LT [21], or Reed-Solomon [42] codes whose decoders
exploit graphical or algebraic properties, spinal decoding requires a
different strategy.
So how does one decode spinal codes? Our solution draws its
strength from the sequential structure of the encoding. The idea
is to search over a tree, breadth ﬁrst, with edges weighted by the
difference between the actual received symbols and the result of
replaying the encoder for different potential message bit sequences.
The shortest path is an exact maximum-likelihood (ML) decoding,
but the size of the tree is exponential in the message length. We
introduce a polynomial-time method, called the bubble decoder,
which prunes the tree to produce an approximate ML estimate of the
message. Theoretically, the bubble decoder achieves capacity. To
the best of our knowledge, spinal codes are the ﬁrst rateless codes
with an efﬁcient encoder and decoder that achieve capacity over both
AWGN and BSC (bit-ﬂip) models.
Our experiments conducted using a linear-time spinal decoder
compare spinal codes to Raptor [33, 26] over a dense QAM-256
constellation, Strider [12], and LDPC codes [11]. We present four
principal experimental results. First, the rate improvements of spinal
codes over Raptor and Strider (both rateless codes) for AWGN
channels are signiﬁcant:
SNR
Raptor/QAM-256
High (> 20 dB)
Medium (10− 20 dB)
Low (< 10 dB)
21%
12%
20%
Strider
40%
25%
32%
Second, spinal codes outperform the best envelope of the 802.11n
family of LDPC codes, because of a “hedging” effect that we identify.
Rateless codes over modest code block lengths are able to take
advantage of channel variations that are inevitable even when the
SNR is ﬁxed, unlike ﬁxed-rate codes.
Third, on a Rayleigh fading channel model, spinal codes outper-
form Strider by between 19% and 28% at an SNR of 10 dB and by
between 28% and 33% at an SNR of 20 dB. We augmented Strider
with a puncturing strategy, which improved Strider’s performance.
We also found that spinal codes perform reasonably well even when
the decoder does not have detailed or accurate fading information,
unlike Strider.
Fourth, for small packets, typical of Internet telephony or gaming
applications, spinal codes outperform Raptor by between 14%−
20%, and Strider by between 2.5× and 10×.
To demonstrate that spinal codes are indeed practical to imple-
ment, we have built a hardware prototype that achieves over-the-air
rates comparable to equivalent software simulations for SNR be-
tween 2 dB and 15 dB. The FPGA decoder runs at 10 Mbits/s. Using
the appropriate tools, we estimate that a silicon implementation of
the design would operate at about 50 Mbits/s.
We believe these experimental results show that spinal codes are
a promising and practical advance for wireless networks. Moreover,
from a conceptual standpoint, spinal codes present a framework for
making Shannon’s random coding ideas, which form the basis of
many fundamental capacity proofs, practical.
2. RELATED WORK
Current wireless networks, including 802.11 and various wide-
area cellular wireless standards, provide a large number of phys-
ical layer (PHY) conﬁgurations, including various codes, various
parameters for these codes, several choices of symbol sets (i.e., con-
stellations) over which to modulate bits, and a way to map groups
of bits to symbols (e.g., Gray code). These networks implement
explicit, reactive bit rate adaptation policies to dynamically select
and conﬁgure the discrete choices and parameters provided by the
PHY [15, 18, 41, 30, 43, 7].
In recent years, there has been strong interest in rateless codes
over both erasure (packet loss) and wireless (AWGN and BSC) chan-
nel models. By “rateless”, we mean a code where the sequence of
coded bits (or symbols) when the code achieves a higher rate is a
preﬁx of the sequence when the code achieves a lower rate [8]. This
preﬁx property allows a decoder to process coded data incrementally
until successful decoding is possible. Shannon’s random codebook
approach used in the proofs of capacity is inherently rateless, achiev-
ing capacity for channels characterized by a single noise or error
parameter [32, 34]. Unfortunately, it is computationally intractable.
The desire for computationally efﬁcient, capacity-achieving rate-
less codes led to Shokrollahi’s work on Raptor codes [33, 9], which
are built on Luby’s LT codes [21]. They achieve capacity for the
Binary Erasure Channel where packets are lost with some proba-
bility. On AWGN and BSC models (which model wireless better),
not much is known about how close Raptor codes come to capacity.
There have, however, been several attempts made to extend Raptor
codes to the AWGN channel [26, 35, 4]; we compare spinal codes
with an extension of the method of Palanki and Yedidia [26].
Erez et al. recently proposed a “layered approach” to design rate-
less codes for the AWGN channel [8]. This approach combines ex-
isting ﬁxed-rate base codes to produce symbols in a rateless manner.
By carefully selecting linear combinations of symbols generated by
the base codes, they show that the resulting rateless code can achieve
capacity as the number of layers increases, provided the ﬁxed-rate
base code achieves capacity at some ﬁxed SNR. Strider [12] uses
this layered approach, with a base turbo-code [6].
In contrast, spinal codes are not layered codes; they do not rely on
existing ﬁxed-rate base codes. Unlike Strider, which takes an exist-
ing ﬁxed-rate code and symbol set system and makes modiﬁcations
to the lowest PHY procedures to achieve linear combinations of
symbols, the construction of spinal codes provides a single (arguably
simpler) mechanism to overcome channel impediments. Spinal
codes also naturally extend to the BSC case, whereas the layered
approach does not. We compare spinal codes with Strider in §8.
Unlike most existing practical codes, spinal codes are nonlin-
ear; i.e., the coded symbols (bits) are not linear combinations of
input message bits. Using hash functions, it produces good coded
sequences without requiring complicated operations such as mul-
tiplying message bits by a random matrix or using complex graph
structures. Raptor and LT codes use a pseudo-random number gener-
ator (through choice of the graph structure) to choose which bits to
XOR together, whereas spinal codes use a pseudo-random number
generator directly to produce symbols.
The M-algorithm [1, 17, 28] is a method to efﬁciently decode over
a tree for random convolutional codes [40]. Our bubble decoder may
be viewed as a generalization of the classical sequential decoding
algorithm as well as the M-algorithm, as explained in §4.3.
We also note a superﬁcial similarity between the direct coding to
symbols used in spinal codes and Trellis Coded Modulation (TCM)
[38, 37]. TCM was crafted speciﬁcally to achieve high minimum
distance between codewords under a sparse constellation for con-
volutional codes, whereas spinal codes aim to attain higher mean
distance, obviating the need for sparse constellations. TCM is not
rateless, does not achieve capacity for AWGN, is not workable (in
any obvious way) for BSC, and is speciﬁc to convolutional codes.
Among ﬁxed-rate codes for communication applications, convo-
lutional codes [40], LDPC [11] and turbo-codes [6] are the most
widely used. Because LDPC and turbo-codes perform well, much
simulation work has been done on puncturing these codes and com-
bining them with incremental redundancy in an attempt to emulate
rateless operation [23, 20, 13, 31]. We compare spinal codes to
LDPC codes decoded using a strong belief propagation decoder.
3. ENCODING SPINAL CODES
This section describes the encoder for spinal codes. We describe
it in the context of a system that has full control of the physical layer,
so the encoder produces a sequence of symbols for transmission and
the decoder operates on the received symbol sequence to produce
an estimate of the original message bits. By slightly modifying the
encoder and decoder, it is straightforward to apply the code to a
system that has an existing mapping from (coded) bits to symbols.
The encoding procedure takes the input message bits, M =
m1m2 . . .mn, and produces a sequence of symbols on the I-Q plane.
At the receiver, the PHY receives a stream of symbols on the I-Q
plane. The decoder processes this stream sequentially, continuing
until the message is successfully decoded, or until the sender (or
receiver) gives up, causing the sender to proceed to the next message.
In practice, a single link-layer frame might comprise multiple coded
messages, as explained in §6.
When used in rateless mode, spinal code encoder can produce
as many symbols as necessary from a given sequence of message
bits, and the sequence of coded bits or symbols generated at a higher
code rate is a preﬁx of that generated at all lower code rates.
3.1 Spine Construction
At the core of the spinal code is a hash function, h, and a pseudo-
random number generator, RNG, known to both the transmitter and
receiver. h takes two inputs: (1) a ν-bit state and (2) k message bits.
Figure 1: Encoding process. Start with a hash function, h. Com-
pute spine values si = h(si−1, ¯mi). Seed RNG with si. For pass ‘,
map c bits from RNG to symbol xi,‘.
It returns a new ν-bit state. That is,
h : {0,1}ν ×{0,1}k → {0,1}ν .
The initial value, s0, of the ν-bit state is known to both the encoder
and decoder, and may be considered (for now) to be the string 0ν
without loss of generality.
As shown in Figure 1, the idea is to build a spine of ν-bit states
by sequentially hashing together groups of k bits from the input
message. We denote bits mki+1 . . .mk(i+1) as ¯mi, so the sequence of
states is simply
si = h(si−1, ¯mi), s0 = 0ν .
Each of these n/k states, or spine values (n being the number of
bits in the input message), is used to seed a random number genera-
tor, RNG. Each RNG generates a sequence of pseudo-random c-bit
numbers, which are converted into output symbols using a constella-
tion mapping function (§3.3). RNG is a deterministic function from
a ν-bit seed and an index to a c-bit number:
RNG : {0,1}ν × N → {0,1}c.
The sequence of states computed by repeatedly applying h is
superﬁcially similar to a traditional convolutional encoding, but
there are three key differences. First, the hash function has a richer
pseudo-random (and generally nonlinear) structure and operates
on a signiﬁcantly larger ν-bit state, where ν is on the order of 32.
(Hash collisions are a potential concern; §8.5 shows that they can be
made extremely rare.) Traditional convolutional codes update their
state according to a linear (exclusive-or) function. The larger state