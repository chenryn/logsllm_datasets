图6. POST请求模板字符串
macOS版的模块使用了一个硬编码的User-Agent字符串：`User-Agent: Mozilla/5.0 (Macintosh; Intel Mac
OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139
Safari/537.36`。
收到系统回复后，木马会检查服务器返回的HTTP响应代码。HTTP
300代码表明服务器没有为`updater`分配任务，应用会立即结束运行。如果HTTP相应代码为200，则`updater`会提取响应包中的数据，base64解码然后使用硬编码的RC4密钥`W29ab[@ad](https://github.com/ad
"@ad")%Df324V$Yd`解密数据。木马会计算解码后数据的MD5值，将该值与数据内部存储的值进行对比，以验证传输文件的完整性。随后，木马提取载荷并将其保存到一个固定位置：`/var/zdiffsec`，为所有用户都设置可执行权限，然后以硬编码的命令行参数`bf6a0c760cc642`启动载荷。显然，木马使用这种命令行参数来避免沙盒或者逆向分析技术检测到载荷的恶意行为。Lazarus组织在2016年攻击银行时也曾使用这种技术手段，到2018年，我们在调查与其有关的所有攻击活动中基本上还是都能看到这种技巧。
## 三、下载的载荷
根据卡巴斯基安全网络的分析数据，攻击者使用了前文描述的`updater`程序来下载恶意载荷。我们在同一个主机上发现了新创建的一个恶意文件，基本信息如下：
    MD5: 0a15a33844c9df11f12a4889ae7b7e4b
    文件大小: 104,898,560字节
    文件类型: MS Windows平台的PE32+可执行文件（带GUI界面），x86-64架构
    已知文件名: C:Recoverymsn.exe
    链接时间: 2018-04-19 13:30:19
请注意这个可执行文件的大小。我们认为该文件中填充了大量垃圾数据，避免在互联网上快速下载或传输。
在研究这个恶意软件为什么会出系统中时，我们发现在启动这款恶意软件之前，系统上有一个进程会负责生成多个文件，这表明系统上有一个木马释放器（dropper）正在运行。这款恶意软件的主要功能是在系统上植入链接到多个文件的Fallchill后门。恶意软件在启动时会检查传入的一些命令行参数，恶意软件会从注册表的`HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Svchost\netsvcs`路径中选择一个服务名称来伪装自己，这个注册表表项中包含几十个标准系统服务名称。
恶意软件会随机选择一个服务名，以该名称作为释放出文件的文件名并注册对应的Windows服务。为便于分析，下文我们将这个服务名称为`[service]`。恶意软件内部引用多个文件，具体如下：
    以参数形式传入的文件: 包含一个16字节密钥
    msncf.dat: 经过加密的配置数据
    msndll.tmp: 经过加密的Fallchill加载器
    msndll.dat: 经过加密的Fallchill后门（加载器的载荷）
    [service]svc.dll: Fallchill后门加载器
    [service].dat: msndll.dat的副本
上述几个文件会生成最终的Fallchill后门，详细的过程如下所示：
1、 检查命令行参数是否指向16字节大小的一个文件；
2、读取命令行传入的文件。该文件内容包含一个加密密钥，我们称之为主密钥；
3、打开`msncf.dat`文件（配置文件）。如果文件大小等于192字节，则读取文件的内容；
4、打开`msndll.tmp`文件，使用主密钥进行解密；
5、创建`[service]svc.dll`文件，使用伪随机数填充文件内容。恶意软件使用10,240字节伪随机数据填充该文件，并且迭代循环`(rand()%10
+ 10240)`次。这也是为什么生成的文件大小至少为104,851,000字节；
6、将16字节的主密钥拷贝到`[service]svc.dll`文件的末尾；
7、使用主密钥加密`[service].dat`文件名，并将其拼接到`[service]svc.dll`的末尾；
8、将解密后的`msndll.tmp`覆盖到`[service].dat`文件的开头处；
9、移动`msndll.dat`文件为`[service].dat`；
10、删除`msndll.tmp`、`msncf.dat`以及`msndll.log`临时文件；
11、为`[service]svc.dll`以及`[service.dat]`文件打上时间戳；
12、将`[service]svc.dll`注册为Windows服务；
13、将`msncf.dat`文件中的数据复制一份保存到注册表的`HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\TaskConfigs\Description`键值中。
图7. 感染流程示意图
###  Fallchill后门加载器
我们已确认攻击者使用如上步骤在目标主机上创建了如下恶意软件，具体信息分别如下：
1、Fallchill后门加载器：
    MD5: e1ed584a672cab33af29114576ad6cce
    文件大小: 104,878,356字节
    文件类型: PE32+可执行文件（DLL）（控制台模式），x86-64架构，MS Windows平台
    已知文件名: C:Windowssystem32uploadmgrsvc.dll
    链接时间: 2018-01-18 01:56:32
2、经过加密的Fallchill后门：
    MD5: d8484469587756ce0d10a09027044808
    文件大小: 143,872字节
    文件类型: 加密数据
    已知文件名: C:Windowssystem32uploadmgr.dat
在启动时，`uploadmgrsvc.dll`会读取自身可执行文件末尾处的276个字节数据，其中前16个字节作为加密密钥来使用，剩余的260个字节包含后门所使用的加密文件路径。
图8. 加载器文件末尾的数据结构
解密末尾的260个字节后，恶意软件会提取出包含真正后门数据的文件名或文件路径，该文件包含的数据经过加密处理。
图9. 加载器模块末尾解密后的文件名
恶意软件读取这个文件，使用同样的加解密方法解密文件内容。这也是加载器如何在内存中加载并执行后门代码的具体方式。内存中经过解密的最终载荷的元信息如下所示：
    MD5: d7089e6bc8bd137a7241a7ad297f975d
    文件大小: 143,872字节
    文件类型: PE32+可执行文件（DLL）（GUI模式），x86-64架构，MS Windows平台
    链接时间: 2018-03-16 07:15:31
我们将Fallchill后门的加载过程总结如下：
图10. Fallchill后门加载过程
前面提到过，最终载荷属于Lazarus
APT组织曾经使用过的Fallchill恶意软件家族。在启动时，恶意软件会在运行时解析API函数地址，从安装过程中创建的注册表路径（`HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\TaskConfigs\Description`）中读取C2服务器地址。
如果该路径中不包含任何配置信息，则恶意软件会使用默认的C2服务器地址：
    196.38.48[.]121
    185.142.236[.]226
这是一个全功能版本的后门，包含足够多的函数来完全控制被感染的主机。木马的部分网络协议命令如下所示：
命令ID | 描述  
---|---  
0x8000 | 将当前时间及配置数据写入注册表  
0x8001 | 发送配置数据  
0x8002 | 替换特定注册表键值中的配置数据  
0x8003 | 执行Windows命令，将结果存储在临时文件中并上传至C2服务器  
0x8006 | 显示当前的工作目录  
0x8007 | 修改当前的工作目录  
0x8008 | 收集进程信息  
0x8009 | 结束进程  
0x8010 | 启动新进程  
0x8011 | 以当前用户的安全上下文创建进程  
0x8012 | 连接特定的主机/端口  
0x8013 | 获取磁盘信息  
0x8014 | 罗列目录  
0x8015 | 搜索文件  
0x8019 | 将数据写入特定文件中  
0x8020 | 读取特定文件的内容并上传到C2服务器  
0x8021 | 将多个文件压缩成一个临时文件（文件名以ZD开头）并上传到C2服务器  
0x8023 | 擦除特定文件  
0x8025 | 复制另一个文件的时间信息（时间戳）  
0x8026 | 关闭恶意软件服务并自销毁  
0x8043 | 将“Not Service” unicode字符串发送给C2服务器（可能是用来测试通信）  
这些功能对Lazarus的许多后门来说非常正常，在过去几年内针对银行以及金融行业的攻击事件中我们已经看到过类似的功能。