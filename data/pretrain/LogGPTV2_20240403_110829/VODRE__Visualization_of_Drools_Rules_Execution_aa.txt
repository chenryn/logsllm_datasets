# VODRE: Visualisation of Drools Rules Execution

**Authors:** Maxim Lapaev, Maxim Kolchin  
**Affiliation:** Saint Petersburg National Research University of Information Technologies, Mechanics and Optics, Saint-Petersburg, Russia  
**Contact:** kolchinmax@niuitmo.ru

## Abstract
Knowledge-based Systems (KBS) and Expert Systems (ES) are complex and dynamic, making them expensive to build and challenging to validate and debug. Identifying gaps and errors in the knowledge base is difficult for both knowledge engineers and domain experts. Unit testing alone is insufficient for comprehensive validation, often necessitating a thorough manual review of the decision process. This paper examines the main approaches to validation and verification and introduces a component that aids in debugging the knowledge base by visualizing the execution of rules leading to a specific result. The component is designed for KBS built on the Drools Platform and is demonstrated in a knowledge-based engineering system for structural optical design.

## 1. Introduction
Traditional engineering methods, relying on reference books, pencils, and manual calculations, are no longer sufficient for today's fast-paced industries. Modern systems require efficient, on-the-fly solutions. Expert systems (ES) have become indispensable in various fields, including finance, cartography, military, industry, medicine, and science, simplifying processes and improving reliability. However, ES development remains challenging due to the need for reliable and quick solutions, as well as the lack of effective testing and debugging tools.

While conventional testing frameworks like JUnit are widely used for code-based testing, they do not adequately address the unique needs of KBS. These systems typically consist of a user interface, knowledge base, rule base, and decision system. Regular test frameworks are only suitable for the code base, leaving the knowledge base untested. Therefore, there is a need for specialized tools and techniques for validating and verifying KBS.

## 2. Problem Statement
This paper focuses on the validation and visualization of a knowledge-based engineering system for structural optical design. We use the Drools platform, developed by Red Hat, as the rule engine. The goal is to create an effective way to visualize the reasoning process, making it accessible for non-developers and potentially integrating it into the explanation subsystem.

Current debugging techniques often do not support thorough manual reviews, which are crucial for validating the reasoning and decision-making processes. Domain experts, who may not be familiar with the system or specialized software, need clear and concise visualizations to analyze the workflow and solution derivation. Thus, we aim to develop a flexible and powerful visualization tool that can be easily understood and used for validation and debugging.

## 3. Related Work

### A. Validation and Verification Overview
The topic of ES validation and verification has been extensively studied. Early research focused on unit testing, but these methods often overlooked the deep analysis of workflows and rule implementations. Vanthiene, Mues, and Aerts [8] emphasized the importance of validation from the modeling stage, while Preece [9] provided a critical assessment of current practices and recommended various validation and verification methods.

### B. Main Approaches to Validation and Verification
Several approaches have been proposed for KBS validation and verification. The KADS (Knowledge Analysis and Documentation System) approach, introduced by Wielinga, Schreiber, and Breuker [12], treats KBS development as a modeling process. CommonKADS, an extension of KADS, emphasizes the construction of different aspect models of human knowledge.

Prat, Akoka, and Comyn-Wattiau [13] proposed an MDA (Model-Driven Architecture) approach based on the CommonKADS knowledge model. Cairo and Guardati [14] introduced KAMET II, which focuses on dynamic modeling and knowledge generation. Freiling et al. [15] suggested a step-by-step approach, emphasizing the importance of choosing the right tools and providing measurable milestones.

### C. Visualization Techniques
Baumeister [5] introduced DDTree (derivation/dialog tree), a tool for ES validation and reasoning visualization. DDTrees present final and intermediate solutions in an intuitive manner. Tavana [10] proposed Petri Nets (PNs) for dynamic system representation and rule derivation, overcoming the limitations of static trees.

## 4. The OSYST System Implementation and Improvement

### A. Subject Area Overview
The OSYST system is a knowledge-based optical design system. It addresses the classification and analysis of optical elements, divided into four groups: basic (B), corrective (C), high-aperture (T), and wide-angular (Y). The structural synthesis of these elements is the first stage of automated optical system design. The process is complex and often lacks a deterministic solution algorithm, making expert knowledge and experience crucial.

### B. Rule Engine Choice
Drools, an advanced production rule system, was chosen as the rule engine. It supports the JSR-94 standard and offers a business rule engine and enterprise framework. Drools' features, such as forward and backward chaining, make it suitable for our system. Additionally, its Guvnor toolkit provides essential tools for knowledge-based engineering.

### C. System Architecture
The OSYST system consists of four main components: a knowledge base implemented on the Drools platform, a server component developed using the Play! Framework, a client component with a browser user interface, and a MySQL database for user accounts and saved work. The logging for visualization occurs on the server side, and the data is analyzed and visualized on the client side.

### D. Validation and Verification
Various testing methods were employed, including unit testing, integration testing, system testing, and database testing. Manual alpha-testing was conducted to ensure application consistency. A new component for rule execution visualization was developed to simplify manual testing. This component collects logs of facts and rules, which are then parsed and visualized on the client side.

### E. Visualization Mechanism and Diagram Elements
The visualization process requires data on facts, triggered rules, and the order of rule invocation. A logging mechanism was developed to connect the rule engine and the server. The RuleRunner class handles a stateless session with the knowledge base, and logs are collected and sent to the client for parsing and visualization.

The visualization diagram includes elements such as parallelograms for rules, rectangles for facts, and arrows for operations on facts. These elements are aligned along a timeline, allowing for a clear and intuitive representation of the reasoning process.

## 5. Conclusion
This paper presents a visualization component for debugging and validating the knowledge base in a KBS built on the Drools platform. The component, integrated into the OSYST system, simplifies the manual testing process and provides a clear, intuitive representation of the reasoning and decision-making processes. Future work will focus on further refining the visualization tool and integrating it into the explanation subsystem.

---

This revised version aims to provide a more coherent and professional presentation of the original text, ensuring clarity and readability.