## flashcache usage guide  
### 作者                                                               
digoal                                                               
### 日期                                                               
2014-07-04                                                             
### 标签                                                               
PostgreSQL , Linux , flashcache , ssd , zfs    
----                                                               
## 背景      
前几天写过一篇关于使用flashcache提升PostgreSQL IOPS性能的文章  
http://blog.163.com/digoal@126/blog/static/1638770402014528115551323/  
本文将要介绍一下flashcache的使用注意事项, 更好的使用flashcache.  
1\. 内核的适配, 目前flashcache在2.6.18到2.6.38之间的Linux内核做过测试, 可以使用. 其他内核的话, 不建议使用.  
2\. 缓存模式的选择, flashcache目前支持3种模式  
```  
Writethrough - safest, all writes are cached to ssd but also written to disk  
immediately.  If your ssd has slower write performance than your disk (likely  
for early generation SSDs purchased in 2008-2010), this may limit your system   
write performance.  All disk reads are cached (tunable).    
```  
写操作, 会写SSD(flashcache盘), 同时写磁盘(数据盘).   
读操作, 所有读操作的数据都会读入SSD(flashcache盘), 但可以通过sysctl调整. dev.flashcache..cache_all  
```  
Writearound - again, very safe, writes are not written to ssd but directly to  
disk.  Disk blocks will only be cached after they are read.  All disk reads  
are cached (tunable).  
```  
写操作, 直接写磁盘(数据盘), 不写SSD(flashcache盘).  
读操作, 所有读操作的数据都会读入SSD(flashcache盘), 但可以通过sysctl调整. dev.flashcache..cache_all  
```  
Writeback - fastest but less safe.  Writes only go to the ssd initially, and  
based on various policies are written to disk later.  All disk reads are  
cached (tunable).    
```  
写操作, 写SSD(flashcache盘), 然后异步的写入磁盘(数据盘).  
读操作, 所有读操作的数据都会读入SSD(flashcache盘), 但可以通过sysctl调整. dev.flashcache..cache_all  
对于顺序写入, 一般的SSD和普通15K转速的磁盘性能差别不是特别大. 如果普通盘的性能更好的话, writearound更合算. 一般的场景的话三种模式差不多.  
对于离散写入, SSD性能要比普通磁盘好很多. writeback很适合.  
后面会提到如何优化顺序写入.  
3\. 缓存持久化.  
只有writeback会持久化到ssd(flashcache盘), 因为它是异步写入到磁盘的. 所以必须持久化不能丢.   
而对于writethrough 和 writearound 重启或设备remove后, 数据就丢了, 也不影响数据一致性.  
4\. 已知的BUG  
https://github.com/facebook/flashcache/issues  
5\. cachedev块设备的管理, dmsetup命令, 或者使用flashcache封装好的3个命令.  
5\.1 创建cache dev设备  
```  
flashcache_create, flashcache_load and flashcache_destroy.   
These utilities use dmsetup internally, presenting a simpler interface to create,   
load and destroy flashcache volumes.  
It is expected that the majority of users can use these utilities instead of using dmsetup.  
flashcache_create : Create a new flashcache volume.  
# flashcache_create   
Usage: flashcache_create [-v] [-p back|thru|around] [-b block size] [-m md block size] [-s cache size] [-a associativity] cachedev ssd_devname disk_devname  
Usage : flashcache_create Cache Mode back|thru|around is required argument  
Usage : flashcache_create Default units for -b, -m, -s are sectors, or specify in k/M/G. Default associativity is 512.  
-v : verbose.  
-p : cache mode (writeback/writethrough/writearound).  
-s : cache size. Optional. If this is not specified, the entire ssd device  
     is used as cache. The default units is sectors. But you can specify   
     k/m/g as units as well.  
-b : block size. Optional. Defaults to 4KB. Must be a power of 2.  建议和SSD设备(flashcache设备) 的扇区大小一致.   
     The default units is sectors. But you can specify k as units as well.  
     (A 4KB blocksize is the correct choice for the vast majority of   
     applications. But see the section "Cache Blocksize selection" below).  
-f : force create. by pass checks (eg for ssd sectorsize).  
Examples :  
flashcache_create -p back -s 1g -b 4k cachedev /dev/sdc /dev/sdb  
Creates a 1GB writeback cache volume with a 4KB block size on ssd   
device /dev/sdc to cache the disk volume /dev/sdb. The name of the device   
created is "cachedev".  
flashcache_create -p thru -s 2097152 -b 8 cachedev /dev/sdc /dev/sdb  
Same as above but creates a write through cache with units specified in   
sectors instead. The name of the device created is "cachedev".  
```  
注意指定-s cache size, 否则整个ssd或ssd分区全部使用.  
```  
-b cache dev blocksize 和 -m cache dev metadata blocksize  
```  
cache数据块和metadata 数据块大小的选择原则 :   
```  
Cache Blocksize selection : 推荐和底层SSD设备一致.  
=========================  
Cache blocksize selection is critical for good cache utilization and performance.   
A 4KB cache blocksize for the vast majority of workloads (and filesystems).  
Cache Metadata Blocksize selection : 推荐和底层SSD设备一致.  
==================================  
This section only applies to the writeback cache mode. 只有writeback需要存储metadata块.  
Writethrough and writearound modes store no cache metadata at all.  
In Flashcache version 1, the metadata blocksize was fixed at 1 (512b) sector.  
Flashcache version 2 removes this limitation. In version 2, we can configure   
a larger flashcache metadata blocksize.   
Version 2 maintains backwards compatibility for caches created with Version 1.   
For these cases, a metadata blocksize of 512 will continue to be used.  
flashcache_create -m can be used to optionally configure the metadata blocksize.  
Defaults to 4KB.   
Ideal choices for the metadata blocksize are 4KB (default) or 8KB. There is   
little benefit to choosing a metadata blocksize greater than 8KB. The choice   
of metadata blocksize is subject to the following rules :  
```  
metadata blocksize的选择原则 :   
```  
1) Metadata blocksize must be a power of 2.  
2) Metadata blocksize cannot be smaller than sector size configured on the   
ssd device.     metadata blocksize不能小于SSD(flashcache设备)的扇区大小.  
3) A single metadata block cannot contain metadata for 2 cache sets.   
In other words,   
with the default associativity of 512 (with each cache metadata slot sizing at 16 bytes),   
the entire metadata for a given set fits in 8KB (512*16b).  
For an associativity of 512, we cannot configure a metadata blocksize greater than 8KB.  
```  
选择大metadata blocksize的好处  
```  
Advantages of choosing a larger (than 512b) metadata blocksize :  
- Allows the ssd to be configured to larger sectors. For example, some ssds  
  allow choosing a 4KB sector, often a more performant choice.  允许配置大的SSD扇区.  
- Allows flashache to do better batching of metadata updates, potentially   
  reducing metadata updates, small ssd writes, reducing write amplification  
  and higher ssd lifetimes. 减少SSD些操作, 提高SSD使用寿命.  
Thanks due to Earle Philhower of Virident for this feature !  
```  
5\.2  加载已经存在的write back cache dev设备.  
使用flashcache_load加载已经存在的writeback flashcache设备.  
因为重启需要重新加载, 或者使用chkconfig来管理自动加载.  
writearound和writethrough不需要加载.(前面已经说过了, 这两只缓存不持久化到ssd, 重启即删了).  
```  
flashcache_load : Load an existing writeback cache volume.    
flashcache_load ssd_devname [cachedev_name]  
Example :  
flashcache_load /dev/sd  
Load the existing writeback cache on /dev/sdc, using the virtual cachedev_name from when the device was created.   
If you're upgrading from an older flashcache device format that didn't store the cachedev name internally, or you want to change the cachedev name use, you can specify it as an optional second argument to flashcache_load.  
For writethrough and writearound caches flashcache_load is not needed; flashcache_create   
should be used each time.  
```  
5\.3 删除flashcache dev.  
删除write backup设备的flashcache设备, 比较危险, 所有flashcache中的数据将被删除(未说明是否写脏数据).  
writeback的flashcache设备不推荐这么做. 如果要删除的话, 建议使用dmsetup删除cache dev, 因为dmsetup会自动将脏数据写入磁盘.  
```  
flashcache_destroy : Destroy an existing writeback flashcache. All data will be lost !!!  
flashcache_destroy ssd_devname  
Example :  
flashcache_destroy /dev/sdc  
Destroy the existing cache on /dev/sdc. All data is lost !!!  
For writethrough and writearound caches this is not necessary.  
```  
6\. 移除flashcache cache dev设备(即device mapper设备).  
对于writeback的cache dev, 先把脏数据自动写入磁盘再移除.  
```  
Removing a flashcache volume :  
============================  
Use dmsetup remove to remove a flashcache volume. For writeback   
cache mode,  the default behavior on a remove is to clean all dirty   
cache blocks to disk. The remove will not return until all blocks   
are cleaned. Progress on disk cleaning is reported on the console   
(also see the "fast_remove" flashcache sysctl).  
A reboot of the node will also result in all dirty cache blocks being  
cleaned synchronously   
(again see the note about "fast_remove" in the sysctls section).  
For writethrough and writearound caches, the device removal or reboot  
results in the cache being destroyed.  However, there is no harm is  
doing a 'dmsetup remove' to tidy up before boot, and indeed  
this will be needed if you ever need to unload the flashcache kernel  
module (for example to load an new version into a running system).  
Example:  
dmsetup remove cachedev  
This removes the flashcache volume name cachedev. Cleaning  
all blocks prior to removal.   
```  
快速移除选项如果配置为1的话, 不会同步脏数据到磁盘. 非常危险, 不推荐这么做.  
```  
dev.flashcache..fast_remove = 0  
	Don't sync dirty blocks when removing cache. On a reload  
	both DIRTY and CLEAN blocks persist in the cache. This   
	option can be used to do a quick cache remove.   
	CAUTION: The cache still has uncommitted (to disk) dirty  
	blocks after a fast_remove.  
```  
7\. flashcache cache dev设备统计信息的查看, 通过dmsetup status或dmsetup table来查看.  
```  
Cache Stats :  
===========  
Use 'dmsetup status' for cache statistics.  
'dmsetup table' also dumps a number of cache related statistics.  
Examples :  
dmsetup status cachedev  
dmsetup table cachedev  
```  
或者直接查看设备的状态文件  
```  
Flashcache errors are reported in   
/proc/flashcache//flashcache_errors  
Flashcache stats are also reported in   
/proc/flashcache//flashcache_stats  
for easier parseability.  
```  
例如  
```  
[root@db-172-16-3-150 sda1+sdc3]# dmsetup table cachedev1  
0 207254565 flashcache conf:  
        ssd dev (/dev/sda1), disk dev (/dev/sdc3) cache mode(WRITE_BACK)  
        capacity(10216M), associativity(512), data block size(8K) metadata block size(4096b)  
        disk assoc(256K)  
        skip sequential thresh(0K)  
        total blocks(1307648), cached blocks(0), cache percent(0)  
        dirty blocks(0), dirty percent(0)  
        nr_queued(0)  
Size Hist: 512:2660 1024:851 2048:832 4096:8159776 8192:317   
[root@db-172-16-3-150 sda1+sdc3]# dmsetup status cachedev1  
0 207254565 flashcache stats:   
        reads(2477), writes(6)  
        read hits(0), read hit percent(0)  
        write hits(0) write hit percent(0)  
        dirty write hits(0) dirty write hit percent(0)  
        replacement(0), write replacement(0)  
        write invalidates(0), read invalidates(0)  
        pending enqueues(0), pending inval(0)  
        metadata dirties(0), metadata cleans(0)  
        metadata batch(0) metadata ssd writes(0)  
        cleanings(0) fallow cleanings(0)  
        no room(0) front merge(0) back merge(0)  
        force_clean_block(0)  
        disk reads(2477), disk writes(6) ssd reads(0) ssd writes(0)  
        uncached reads(2477), uncached writes(6), uncached IO requeue(0)  
        disk read errors(0), disk write errors(0) ssd read errors(0) ssd write errors(0)  
        uncached sequential reads(0), uncached sequential writes(0)  
        pid_adds(0), pid_dels(0), pid_drops(0) pid_expiry(0)  
        lru hot blocks(653824), lru warm blocks(653824)  
        lru promotions(0), lru demotions(0)  
```  
或者直接查看设备状态文件  
```  
[root@db-172-16-3-150 sda1+sdc3]# cat /proc/flashcache/sda1+sdc3/flashcache_  
flashcache_errors       flashcache_iosize_hist  flashcache_pidlists     flashcache_stats          
```  
错误统计  
```  
[root@db-172-16-3-150 sda1+sdc3]# cat /proc/flashcache/sda1+sdc3/flashcache_errors   
disk_read_errors=0 disk_write_errors=0 ssd_read_errors=0 ssd_write_errors=0 memory_alloc_errors=0  
````  
进程白名单和黑名单, 通过sysctl设置使用flashcache设备的PID白名单和黑名单列表 .  
```  
[root@db-172-16-3-150 sda1+sdc3]# cat /proc/flashcache/sda1+sdc3/flashcache_pidlists   
Blacklist:   
Whitelist:   
```  
IOSIZE历史  
```  
[root@db-172-16-3-150 sda1+sdc3]# cat /proc/flashcache/sda1+sdc3/flashcache_iosize_hist   
512:2660 1024:851 1536:0 2048:832 2560:0 3072:0 3584:0 4096:8159776 4608:0 5120:0 5632:0 6144:0 6656:0 7168:0 7680:0 8192:317 8704:0 9216:0 9728:0 10240:0 10752:0 11264:0 11776:0 12288:0 12800:0 13312:0 13824:0 14336:0 14848:0 15360:0 15872:0 16384:0   