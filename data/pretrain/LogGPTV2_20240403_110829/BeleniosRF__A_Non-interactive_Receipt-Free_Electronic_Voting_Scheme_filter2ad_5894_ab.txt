the assumption that the voting client is not going to reveal
the randomness it used for sealing the vote. The latter seems
diﬃcult to ensure in practice, unless voters are provided with
secure hardware tokens. In contrast, BeleniosRF only needs
the voting server to be protected against randomness leakage.
BeleniosRF has one disadvantage compared to Helios and
Belenios: if the registrar and the voting server collude, they
can undetectably change a voter’s choice. This is due to the
features that guarantee receipt-freeness, namely that signa-
tures on diﬀerent ciphertexts encrypting the same message
cannot be linked, and that the registrar generates the voters’
signing keys (and thus can vote on their behalf). This can be
prevented by deﬁning a less powerful registrar that simply
grants voting rights to signing keys that are generated by the
voters themselves (cf. Section 4.3). This solution diﬀers from
the Belenios approach, where voters receive their signing
keys from the registrar for the sake of usability. This is just
another manifestation of the usual tension between usability,
privacy and veriﬁability in e-voting systems (and computer
security systems in general), in the sense that increasing one
of them entails a decrease of at least one of the others.
2. RECEIPT-FREENESS
We now formally deﬁne receipt-freeness and start by pro-
viding the syntax of a voting system, inspired by [9, 22].
2.1 Syntax of a Voting System
Election systems typically involve several entities. For the
sake of simplicity we consider each entity to consist of only one
individual but note that all of them could be thresholdized.
1. Election administrator : denoted by E, is responsible for
setting up the election; it publishes the identities id
of eligible voters, the list of candidates and the result
function ρ of the election (typically counting the number
of votes received by every candidate).
2. Registrar : denoted by R, is responsible for distributing
secret credentials to voters and registering the corre-
sponding public credentials.
3. Trustee: denoted by T , is in charge of tallying and
publishing a ﬁnal result.
4. Voters: the eligible voters are denoted by id1, . . . , idτ .
5. Ballot-box (voting server) manager : denoted by B, is
responsible for processing and storing valid ballots in
the ballot box BB, and for publishing PBB, the public
view of BB, also called (public) bulletin board.
The following syntax considers single-pass schemes, that is,
systems where voters only have to post a single message to the
board, i.e. ballot casting is non-interactive. A voting protocol
V = (Setup, Register, Vote, Valid, Append, Publish, VerifyVote,
Tally, Verify) is relative to a family of result functions {ρτ}τ≥1
for τ ∈ N, with ρτ : Vτ → R, where V is the set of admissible
votes and R is the result space.
Setup(1λ), on input a security parameter 1λ, outputs an
election public/secret key pair (pk, sk), where pk could
contain a list of credentials L. We let pk be an implicit
input of the remaining algorithms.
Register(id), on input an identiﬁer id, outputs the secret
part of the credential uskid and its public credential
upkid, which is added to the list L = {upkid}.
Vote(id, upk, usk, v) is run by voter id with credentials upk,
usk to cast her vote v ∈ V. It outputs a ballot b, which
is sent to the voting server (possibly through an au-
thenticated channel).
Valid(BB, b) takes as input the ballot box BB and a ballot b
and checks the validity of the latter. It returns (cid:62) for
valid ballots and ⊥ for invalid ones (e.g. ill-formed, con-
taining duplicated ciphertext from the ballot box. . . ).
Append(BB, b) updates BB with the ballot b. Typically, this
consists in adding b as a new entry to BB, but more
involved actions might be possible (as in our scheme).
Publish(BB) outputs the public view PBB of BB. Often one
simply has Publish(BB) = BB.
VerifyVote(PBB, id, upk, usk, b) is run by voters for checking
that their ballots will be included in the tally. On inputs
the public board PBB, a ballot b, and the voter’s identity
and credentials id, usk, upk, it returns (cid:62) or ⊥.
Tally(BB, sk) on inputs the ballot box BB and the secret
key sk, outputs the tally r and a proof of correct tabu-
lation Π. If the election is declared invalid then r := ⊥.
Verify(PBB, r, Π), on inputs the public bulletin board PBB
and (r, Π), checks whether Π is a valid proof of correct
tallying for r. If so, it returns (cid:62), and ⊥ otherwise.
The exact implementation of these algorithms depends
on the concrete voting protocol. In particular, the notion
of public and private credentials of a voter varies a lot. For
example upkid might be simply the identity of the voter or
may correspond to her signature-veriﬁcation key.
2.2 Strong Receipt-Freeness
Intuitively, privacy ensures that an adversary cannot learn
the vote of an honest voter. Receipt-freeness furthermore
guarantees that a voter cannot prove how she voted, even if
she willingly provides information to, or follows instructions
by, the adversary. This captures the seminal intuition from
Benaloh and Tuinstra [8]. The latter insisted that a reasonably
private electronic voting protocol should emulate traditional
voting in a voting booth: it should allow voters to conceal
their individual votes and, at the same time, prevent them
from revealing their vote. Voters should not be able to give
away the privacy of their vote granted by the voting protocol,
even if they are willing to.
Building upon a deﬁnition of privacy recently introduced [9],
we argue that this requirement can be formalized for single-
pass schemes by simply providing the adversary with an
additional oracle OreceiptLR, which allows him to submit his
own ballots on behalf of a dishonest voter. Apart from im-
mediately implying ballot privacy, this simple formalization
captures several important scenarios:
• A voter who wants to convince a vote buyer of how
she voted may prepare her ballot in an arbitrary way
that allows him to construct a convincing receipt (e.g.,
consider a voter that uses biased random coins to build
her ballot and to prove how she voted [28]).
• A voter that might have been corrupted before the
ballot casting phase may just follow the instructions
given to her by the adversary (as in [37]).
• A voter can record, but also forge, its interaction with
the ballot box (as in [8]).
As in previous formal or intuitive deﬁnitions of receipt-
freeness, we assume the adversary is not monitoring the
interaction between the voter and the voting server. However,
the voter can record this interaction, and later on present this
information (or any transformation thereof) to the adversary.
Formally, we consider two games, Game 0 and Game 1,
deﬁned by the oracles in Figure 1. In both games BB0 and BB1
are ballot boxes that start out empty. Box BB0 corresponds to
the real election (that will be tallied) and BB1 is a fake ballot
box which the adversary’s task is to distinguish from BB0.
In Game β the adversary has indirect access to BBβ, that
is, she can see the public part of that box at any time. The
game Expsrf,βA,V provides an adversary A access to the oracles
deﬁned in Figure 1, which intuitively proceed as follows:
Oinit generates secret and public keys for the election; the
public key is returned to the adversary. If β = 1, it
also returns auxiliary information aux to be used by a
simulator SimProof introduced below.
Oreg, on input an identiﬁer id, initializes id’s credentials
(upk, usk) by running Register(id). It gives upk to the
adversary.
Ocorrupt is used by the attacker to obtain the credentials
(upk, usk) of a registered voter.
OvoteLR, a left-or-right oracle, takes two potential votes
(v0, v1) for an honest user id, produces ballots b0 and
b1 for these votes and places them in the ballot boxes
(one in BB0 and one in BB1), provided that v0, v1 ∈ V.
Ocast allows the adversary to cast a ballot b on behalf of
any party. If the ballot is valid with respect to BBβ, it
is placed in both ballot boxes.
OreceiptLR allows an adversarial voter id to cast a ballot b1
in BB1 and a ballot b0 in BB0. If each ballot b0, b1 is
valid with respect to its respective ballot box, then the
ballots are appended by running Append(BB0, b0) and
Append(BB1, b1). This allows the adversary to encode
special instructions in the ballots that could later serve
as the basis for a vote receipt (e.g. as in [28]).
Oboard models the adversary’s ability to see the publishable
part of the board. It returns Publish(BBβ).
Otally allows the adversary to see the result of the elec-
tion. In both games the result is obtained by tallying
a valid BB0; the proof of correct tabulation is however
simulated in the second world, i.e., for β = 1.
We demand that the adversary ﬁrst calls Oinit, then oracles
Oreg,OcorruptU,OvoteLR,Ocast,OreceiptLR,Oboard in any
order, and any number of times. Finally, A can call Otally;
after it receives its reply, A must return a guess of the bit β.
The guess bit is the result returned by the game.
Inherited from ballot privacy [9], Deﬁnition 1 uses simula-
tors SimSetup and SimProof to model the fact that the proof
should not reveal anything, as it is “zero-knowledge”.
D e f i n i t i o n 1
( s R F ) . Let V = (Setup, Register, Vote,
Valid, Append, VerifyVote, Publish, Tally, Verify) be a voting pro-
tocol for a set ID of voter identities and a result function ρ.
We say that V has strong receipt-freeness if there exist algo-
rithms SimSetup and SimProof such that no eﬃcient adver-
sary can distinguish between games Expsrf,0B,V (λ) and Expsrf,1B,V (λ)
deﬁned by the oracles in Figure 1; that is, for any eﬃcient
algorithm A the following is negligible in λ:
(cid:12)(cid:12) Pr(cid:2)Expsrf,0A,V (λ) = 1(cid:3) − Pr(cid:2)Expsrf,1A,V (λ) = 1(cid:3)(cid:12)(cid:12) .
In protocols with non-interactive ballot casting an adver-
sary does not receive any output from its interaction with
the ballot box (apart from the public view of the protocol
run), the sRF adversary must therefore build a receipt using
local data only, and before casting the ballot. An adversary
might encode arbitrary instructions in bβ, for instance mak-
ing those instructions dependent on the vote vβ; e.g. he could
set the least signiﬁcant bit of bβ equal to vβ ∈ {0, 1}. Intu-
itively, strong receipt-freeness implies that a ballot b0 could
be replaced by a ballot b1, both submitted via the oracle
OreceiptLR, without the adversary noticing. Thus a receipt,
i.e. a proof for a certain vote having been cast, cannot exist
as OreceiptLR captures all what a RF adversary can do.
This deﬁnition does not assume that the voter is capable of
successfully applying some anti-coercion strategy (in contrast
to [42]). We believe this to be important in practice for two
reasons. First, this is of course much easier to use: with our
deﬁnition, the system is receipt-free by construction and there
is no need to instruct voters how they should proceed to lie
about their vote. Second, we need not assume that revoting
is allowed (our deﬁnition accommodates any revoting policy
though, including no revote). This is important since most
countries forbid revoting.
Oinit for β = 0
(pk, sk) ← Setup(1k)
return pk
Oreg(id)
Oinit for β = 1
(pk, sk, aux) ← SimSetup(1k)
return pk
If id was not previously queried,
then run Register(id) and set
U = U ∪ {(id, upkid, uskid)};
return upkid.
OcorruptU(id)
On a registered voter id, output (upkid, uskid)
and set CU = CU ∪ {(id, upkid)}.
Ocast(id, b)
If Valid(BBβ , b) = ⊥ then return ⊥.
Else Append(BB0, b) and Append(BB1, b).
OvoteLR(id, v0, v1)
If v0 /∈ V or v1 /∈ V then return ⊥.
b0 = Vote(id, upkid, uskid, v0)
b1 = Vote(id, upkid, uskid, v1).
Append(BB0, b0); Append(BB1, b1)
OreceiptLR(id, b0, b1)
If id /∈ CU return ⊥.
If Valid(BB0, b0) = ⊥ or Valid(BB1, b1) = ⊥
return ⊥.
Else Append(BB0, b0) and Append(BB1, b1)
Oboard()
Return Publish(BBβ )
Otally() for β = 0
(r, Π) ← Tally(BB0, sk)
return (r, Π)
Otally() for β = 1
(r, Π) ← Tally(BB0, sk)
Π(cid:48) ← SimProof aux(BB1, r)
return (r, Π(cid:48))
Figure 1: Oracles deﬁning experiments Expsrf,βA,V (λ) for β = 0, 1. The games diﬀer in the way the tallying oracle creates auxiliary
data, in the board displayed in response to Oboard queries, and the board against which ballots are validated.
As expected, strong receipt-freeness trivially implies BPRIV
privacy [9], since BPRIV equals sRF except that there is no
oracle OreceiptLR.
Helios. Under the RF deﬁnition provided in [38] the He-
lios protocol would be receipt-free. In contrast, under our
deﬁnition Helios is not receipt-free. Indeed, if the adver-
sary is allowed to cast diﬀerent ballots b0, b1 to the ballot
boxes BB0, BB1, respectively, then distinguishing Game 0
from Game 1 is trivial. This is due to the fact that in Helios
PBB contains the encryption of the votes, so it suﬃces for
an adversary to produce diﬀerent encryptions c, d and check
which one is showing up when calling oracle Oboard.
Interestingly, we believe that a Helios instantiation in which
voting devices are built upon trusted hardware tokens that
conceal the randomness used for encryption (as proposed by
Magkos et al. [41]) satisﬁes sRF, when interpreting trusted
tokens as preventing A from accessing the OreceiptLR oracle—
in which case sRF collapses to ballot privacy. This shows the
ﬂexibility of our deﬁnition. Moreover, we are conﬁdent that
the same result applies to [38].
3. BUILDING BLOCKS
Before describing our voting scheme, we ﬁrst present the
necessary cryptographic building blocks.
3.1 Assumptions and Primitives
We will work in asymmetric bilinear groups and assume
the existence of a bilinear-group generator GrpGen, which on
input 1λ outputs (p, G1, G2, g1, g2, GT , e), where p is a prime
of length λ, G1, G2 and GT are cyclic groups of order p, g1 is
a generator of G1, g2 is a generator of G2, and e is a bilinear
map e : G1 × G2 → GT such that e(g1, g2) generates GT . The
following was discussed in [13, p. 304] and deﬁned in [12].