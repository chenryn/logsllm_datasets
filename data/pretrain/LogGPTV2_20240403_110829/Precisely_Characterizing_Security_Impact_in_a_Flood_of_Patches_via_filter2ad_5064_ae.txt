### Table XI: Security Impacts for Identified Security Bugs and CVE-Assigned Vulnerabilities

| Security Impact | SID-Identified Bugs | CVE-Assigned Vulnerabilities |
|-----------------|---------------------|------------------------------|
| Use-after-free/Double-free | 85 | 65 |
| Permission bypass | 67 | 13 |

**Statistical Analysis:**
The statistical results, as shown in Figure 5, indicate that security bugs and vulnerabilities are highly similar in terms of the number of lines changed in their patches. Both have a smaller number of changed lines compared to general bug patches. This finding is consistent with the results reported by Li et al. [27]. Additionally, patches for vulnerabilities and security bugs tend to change fewer files than those for general bugs. On average, general bug patches modify 3.0 files, while patches for vulnerabilities and security bugs found by SID modify 2.3 files.

**Commit Analysis:**
Among the 1,339 git commits for the identified vulnerabilities, 814 (60.8%) did not mention any specific security impacts such as use-after-free or double-free. This suggests that textual information in patch commits alone is not a reliable indicator of the security impacts of a patch.

### VII. Discussion

#### Generality of SID
SID can be extended to determine the security impacts of patches for other well-maintained open-source programs like Firefox, Chrome, and FreeBSD. The patch model used by SID is generic and can describe security and vulnerable operations in a program-agnostic manner. Extending SID to new programs would primarily require new preprocessing efforts. For example, for out-of-bound access vulnerabilities, different target programs may require collecting functions for memory access and bound checks.

#### Extensibility of SID
SID currently supports common classes of vulnerabilities but can be extended to support additional classes by specifying the relevant security rules. For instance, numerical-error vulnerabilities, such as divide-by-zero, can be supported by defining the security rule that the divisor cannot be zero. The vulnerable operation would be division, and the security operation could be a zero-check for the divisor. Similarly, NULL-pointer dereference can also be modeled, with the security rule being that a dereferenced pointer cannot be NULL. The vulnerable operation is pointer dereferencing, and the security operation is a NULL check. Including these types, SID can cover at least 51% of vulnerabilities, an increase of 13%.

**Current Limitations:**
The current implementation of SID considers only simple patching patterns because the average distance between a security operation and a vulnerable operation is 6.6 lines of code, with the longest distance being 65 lines. This is consistent with SPIDER's [32] finding that 94.4% of safe patches affect less than 20 lines of code. Future work will extend SID to handle more complex patterns, such as patches using multiple security operations to fix a vulnerability.

#### Reducing False Negatives
1. **Under-constrained Symbolic Execution:**
   The current implementation collects constraints only from the security operation to the vulnerable operation, leading to under-constrained paths and false negatives. An improvement would be to collect additional constraints backward from the security operation, potentially reducing false negatives by up to 17%.

2. **Incompleteness of Operation Sets:**
   Incomplete sets of security and vulnerable operations also contribute to false negatives. Collecting more custom functions based on dynamic analysis [63] and wrapper-function analysis [21, 62] can reduce false negatives by up to 31%. For example, modeling lock/unlock operations for use-after-free can cover an additional 25% of use-after-free vulnerabilities. However, this requires significant manual and engineering efforts.

### VIII. Related Work

#### Mining Security-Critical Vulnerabilities from Bugs
Wijayasekara et al. [53] highlighted hidden impact vulnerabilities initially identified as non-security bugs but later recognized as vulnerabilities due to exploits. Previous studies [5, 15, 23, 50, 54, 65] used supervised and unsupervised learning techniques to classify vulnerabilities and general bugs based on patch descriptions. Tyo [50] found that Naive Bayes and Support Vector Machine classifiers performed best. However, these methods struggle with incomplete or inaccurate descriptions and do not determine specific security impacts or pinpoint vulnerable operations. SPIDER [32] identifies security fixes based on the assumption that they do not disrupt intended functionalities, which does not always hold. SID, in contrast, precisely determines security impacts even without commit descriptions and does not rely on SPIDER's assumptions.

#### Testing Exploitability of Bugs
Several studies have focused on testing the exploitability of specific bug classes. Lu et al. [30] showed how to exploit uninitialized-use bugs using symbolic execution and fuzzing in the Linux kernel. Xu et al. [58] presented a memory collision strategy to exploit use-after-free vulnerabilities. You et al. [61] introduced SemFuzz for generating proof-of-concept exploits. Thanassis et al. [4] proposed AEG, a tool for automatically exploiting memory-corruption bugs. Wu et al. [55] developed FUZE for use-after-free vulnerabilities in the Linux kernel. Unlike these studies, SID focuses on determining the security impacts of a bug once it is triggered, rather than its exploitability, and is not limited to a specific vulnerability class.

#### Bug-Severity Assessment
Mell et al. [33] introduced the Common Vulnerability Scoring System (CVSS), widely used for assessing vulnerability severity. However, Munaiah et al. [37] noted biases in CVSS, such as not treating code execution and privilege escalation as critical factors. Most severity-analysis techniques [9, 34, 40, 43] are based on bug reports and struggle with incomplete or missing descriptions.

#### Symbolic Execution
Symbolic execution has been used for decades. Cadar et al. [7] proposed a method for generating inputs to trigger bugs in real code, and KLEE [6] is a widely-used symbolic execution engine. These tools require complete constraints and can only symbolically execute from the entry of a program, limiting their scalability. Under-constrained symbolic execution [17, 41], implemented in UC-KLEE, addresses this by treating symbolic values from unexecuted parts of the code, making it more flexible. SID uses under-constrained symbolic execution to execute from arbitrary points in a function, minimizing false positives by combining constraints from security rules and differential analysis.

### IX. Conclusion
Maintainers of large software projects face the challenge of prioritizing bug patches with limited resources. SID is an automated approach to determining the security impacts of a large number of bug patches. It employs differential, under-constrained symbolic execution to confirm security impacts and classify vulnerabilities. SID has been applied to the Linux kernel, identifying 227 security bugs from 54K valid commit patches, with 21 remaining unpatched in the latest Android kernel (version 4.14). Many identified bugs have been assigned CVE IDs and high CVSS scores, demonstrating SID's precision and effectiveness.

### X. Acknowledgment
The authors thank the anonymous reviewers for their feedback. This research was supported in part by NSF awards CNS-1815621 and CNS-1931208. The opinions expressed are those of the authors and do not necessarily reflect the views of the NSF.

### References
[References remain the same as provided in the original text.]