CD:0
D:0
D
(D:0)
(D:0)
B
C
(CAD:0)
Key
History table entries:
Feasible route
Infeasible route
(iii)
Stable
AA
(BD:1)
(D:0)
(AD:1)
D
(D:0)
(D:0)
B
C
(CD:1)
History
CD:1
D:0
Figure 7: (i) Dispute wheel formation and elimina-
tion: simple local policy enforced at each node ﬁlters
incoming routes with more than 2 hops. (ii) Detec-
tion phase: existence of an expiring, more preferred
route causes the outgoing precedence value to in-
crease. (iii) Stable phase: incoming more preferred
routes have incremented precedence values, causing
the stable, less preferred routes to be selected.
A
(RB:x)
(RC:0)
d
Figure 8: To ensure that the wheel size is measured,
pivot node A updates and propagates the router
counter associated with the more preferred route
RB that is received from a neighboring node along
the wheel rather than that with the stable route RC .
ferred but unstable routes have incremented precedence val-
ues, thus resulting in the pivot node thereafter always select-
ing a stable but less preferable route. On the other hand, if
there is no such incoming route, then expiration of infeasible
routes will cease to cause the advertised route’s precedence
to be incremented.
5.1 Detection Phase
In the detection phase, infeasible routes are stored tem-
porarily, resulting in less preferred but more stable routes
being advertised with incremented precedence values. This
mechanism determines if a possible dispute exists and op-
erates locally, without requiring additional information be-
yond the routes received. These memories need only ex-
ist until it can be conﬁrmed whether disputes resulting in
permanent oscillations are present, ensuring that transient
oscillations do not cause unnecessary suppression of routes.
The maximum period of time required for infeasible routes
to be stored is that needed for the eﬀect of a route change
to propagate around the dispute wheel. This is in general
proportional to the number of nodes Nd involved in the dis-
pute, and can be obtained by multiplying Nd by the Mini-
mum Route Advertisement Interval (MRAI). We obtain an
upper bound to this number by propagating a router counter
that is initiated by pivots and incremented by each traversed
node. Pivots begin sending these counters if routing has not
converged and routes with incremented global precedence
values are advertised.
An important point to note is that the router counter
should not be thought of as being associated with a partic-
ular route, but rather with all routes with the same destina-
tion preﬁx. With reference to Figure 8, this means that pivot
A uses, updates and propagates the router counter carried
with the more preferred route RB, even though it selects the
stable route RC , since (i) the latter could have a precedence
value lower than that of the former, or (ii) the former is an
infeasible route, or (iii) the former has been ﬁltered due to
implemented policies (and not because of loop detection). In
the case where multiple, more preferred routes exist, pivot
A uses the largest counter amongst these routes, since the
goal is not to determine the precise number of nodes in the
wheel, but to provide an upper bound. Rim nodes simply
increment the counter associated with their selected routes.
The router counter is used to determine the period of time
over which the network is deemed to have converged if the
selected route is unchanged. Once this condition is true, the
node enters the stable phase. Finally, we again highlight the
fact that the counter is used primarily as an indication of
the period of time infeasible routes should remain in memory
in order for the network to converge. If convergence occurs
before the total number of nodes in dispute is recorded, then
propagation of the counter stops.
5.2 Stable Phase
In this phase, all infeasible routes would either have ex-
pired and evicted from memory, or have been readvertised
(thereby become feasible again). The reception of a more
preferred route having incremented precedence value causes
pivot nodes to select stable but less preferred routes. Also,
we reset the variable largest router counter encountered dur-
ing the detection phase.
Usage of the precedence metric has the additional beneﬁt
that nodes are aware that they are experiencing policy con-
ﬂicts by observing that their selected and advertised routes
have incremented precedence values. We propose propagat-
ing this knowledge upstream in the form of route numbers,
which are a combination of router, AS and locally generated
sequence number. Route numbers are carried together with
the advertised routes for the purpose of troubleshooting.
5.3 A Simple Example
We next use the previous simple example (Figure 7) to
illustrate the resolution process. Again, since the network
and policies are symmetrical, we focus on a single node B.
We begin with dispute detection;
in (ii), the presence of
infeasible (and expiring) route (CD:0) causes the less pre-
ferred route (D:0) to be advertised with precedence value 1.
In this phase, B also begins to propagate the router counter
(CB), with an initial value of 1 (since it is part of the dis-
pute). When this counter is propagated to A, A selects the
largest counter it received (CB), increments and advertises
that. Also, pivots use the largest counters encountered to
determine the timeout period for infeasible routes.
In this simple example, we note that the router counter
does not get propagated beyond the immediate neighboring
pivot.
In the detection phase, node B advertises (BD:1),
(i)
AR1:1
R2:0
(ii)
C
[CR3:1]
[R3:0]
CR3:1
R1:0
[BR2:1]
D
[R1:0]
A
[R2:0]
B
[AR1:1]
Key
History Table Entries:
Feasible Route
Infeasible Route
C
[CBR2:0]
[R3:0]
CR3:1
FR6:1
R4:0
R1:0
[FR6:1]
F
[R6:0]
[BR2:0]
D
[R1:0]
A
[R4:0]
[ER7:1]
D
AR1:1
R2:0
AR4:1
B
[R2:0]
[AR4:1]
[R7:0]
[AR4:1]
E
Figure 9: Rx denotes a route X terminating at the
destination node D. As before, routes longer than
two hops are ﬁltered.
(i) A simple dispute wheel
is ﬁrst resolved. (ii) Node A is involved in a second
dispute. Depending on the local preference ordering
at B, the ﬁrst dispute may be eliminated.
which does not need to be readvertised in the next iteration
since B receives (CD:1) thereafter. As the counter is propa-
gated together with route advertisements, this implies that
no further updates to it will take place in the stable phase.
5.4 A Complex Example
In Figure 9(i), we assume that the ﬁrst dispute, involving
nodes A, B and C, has been resolved, with the pivot nodes
selecting their stable routes. A second dispute is introduced
in (ii), where the disputes intersect at node A, and Rx de-
notes the route X to destination D. We represent destina-
tion D using separate nodes to better show the two disputes.
The network is shown in the converged state, after the sec-
ond dispute, involving nodes A, E and F, has been resolved.
The takeaways from this example are the following:
One: Depending on the network state, the router counter
sent from A can either traverse the two disputes simultane-
ously, or one after another. In either case, it will increase
to a suﬃciently high value, bounding the maximum period
required to observe all routes involved in the oscillations.
Two: Depending on the local preference ordering of the
nodes, the initial dispute may or may not continue to exist.
In Figure 9(ii), the ordering at node B is such that AR1 is
more preferred than R2, which in turn is more preferred than
AR4, thus the dispute involving A, B and C is eliminated.
As a result, at steady state (after the expiration of AR1)
nodes B and C are able to select their most preferred routes.
5.5 A MED Example
A signiﬁcant problem in BGP today is the occurrence of
oscillations due to MED. MED selection rules are diﬀerent
from local preferences, AS path lengths, etc. because they
result in non-strict preferences. Figure 10 shows an example
from [6]. Here, link weights in brackets denote MED values
assigned to links from external ASes, whereas weights within
B
AS 1
1
A
4
1
2
(0)
(1)
E
D
C
3
2
0
Figure 10: The MED-EVIL example from [6].
Table 2: MED Oscillation in Figure 10
Step
1
2
3
4
5
A
Available
D30, C20
BE30, D30, C20
BE30, D30, C20
D30, C20
D30, C20
B
Advertised
Available
Advertised
AD30
AC20
AC20
AD30
AD30
E30
E30, AD30
E30, AC20
E30, AC20
E30, AD30
BE30
BE30
BAC20
BAC20
BE30
Repeat from step 2.
AS 1 indicate the link’s iBGP cost. Table 2 shows the se-
quence of routes advertised during an oscillation period.
We observe from Table 2 that the primary issue is the
change in the most preferred route, from D30 to C20, with
the reception of BE30. That is, the cause of D30 being
demoted in rank is brought about by BE30. In order for
the dispute detection to be eﬀective, we create a logically
(cid:2)
diﬀerent, expiring route D30
that is still the most preferred
(cid:2)
(in the absence of BE30). BE30 is associated with D30
,
the former is ignored when comparing the latter with other
routes (for instance when determining whether other routes
are more preferred). Subsequently, the selected route AC20
will be advertised with increased precedence. As before, we
note that no additional policies are revealed.
Denoting a stored route by the 3-tuple P :V :{I}, where
{I} refers to the list of incoming routes to be ignored, or the
ignore list, when computing this route’s local precedence,
the sequence of route updates is shown in Table 3. Note
that the ignore list is not sent to neighboring nodes.
5.6 Achievement of Goals
Based on the solution proposed earlier, we next describe
how our goals are met.
1. Handling transient and permanent oscillations:
We say that oscillations are permanent if they are caused
by disputes that do not resolve by themselves. On the other
hand, transient oscillations refer to those that disappear
without usage of our solution, Figure 11 gives an example
of this. Node A ﬁrst learns of the route R1, and propa-
Table 3: MED Oscillation Elimination
A
B
Step
1
2
3
4
D30’:0:{BE30}
Available
D30:0:{}
C20:0:{}
BE30:0:{}
C20:0:{}
D30:0:{}
BE30:0:{}
C20:0:{}
D30:0:{}
BE30:1:{}
C20:0:{}
D30:0:{}
D30’:0:{BE30}
D30’:0:{BE30}
Advertised
AD30:0
AC20:1
AC20:1
AC20:1
Available
E30:0:{}
AD30:0:{}
E30:0:{}
AD30:0:{}
E30:0:{}
AC20:1:{}
E30:0:{}
AC20:1:{}
Advertised
BE30:0
BE30:0
BE30:1
BE30:1
R2
R1
ARx
A
AR1
AR2
B
R1
R2
d
Figure 11: Routes preferable for one node may not
be for upstream nodes. Rx refers to either R1 or R2.
gates AR1 to B. Next, A receives the advertisement for R2,
which is preferable to R1, and subsequently advertises that
to B after withdrawing AR1. However, at B, since AR1 is
more preferred, it remains in memory before timing out and
evicted. The eventual eviction results in B advertising AR2
with precedence value 0.
Transient oscillations can also refer to those that are not
due to the resolution of disputes by our solution. In Fig-
ure 9, the dispute on the right eliminates that on the left.
The expiration of route AR1 at B allows B to advertise R2
without incrementing its precedence value. Thus, our solu-
tion does not unnecessarily penalize nodes.
If instead network topology changes, such as link break-
age, occur, adjacent nodes’ states are reset. The resulting
elimination of disputes (if any) is manifested in the with-
drawal of more preferred routes with larger precedence val-
ues. These routes eventually expire and allow the remaining
pivots to select their most preferred routes. Similarly, state
can be reset whenever policy changes occur. Thus, our so-
lution does not permanently suppress any route.
2. Minimal revealing of policies: If the input routes
of a router are known, the precedence of the advertised route