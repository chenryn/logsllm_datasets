## Page 258
### 6.3 BPF Tools

The following sections provide an overview of the BPF (Berkeley Packet Filter) tools, focusing on `offcputime` and `syscount`.

#### offcputime
- **Functionality**: The `offcputime` tool measures the time a thread spends off the CPU, along with the stack trace.
- **Example Output**:
  - `sk_xait_data`, `tcp_recvmsg`, `Inet_recvmag`, `sock_recvmsg`, `SYSC_recvfron`, `sys_recvfron`, `do_syscal1_64`, `entry_SYscALL_64_after_hmframe`, `recv`, `iperf (14659)`, `1021497`
  - `finish_task_svitch`, `schedule`, `schedule_hrtineout_cange_clock`, `schedule_hxtineout_range`, `po1l_schedule_tineout`, `do_select`, `core_sys_select`, `sys_select`, `do_sysca11_64`, `entzy_SYscALl_64_after_hvfxase`, `_libc_select`, `[unknown]`, `offcputime (14667)`, `5004039`

- **Explanation**:
  - Each stack shows kernel frames, user-level frames, process name, PID, and total time in microseconds.
  - The first stack shows `iperf(1)` blocking in `sk_stream_wait_memory()` for 5 milliseconds.
  - The second stack shows `iperf(1)` waiting for data on a socket via `sk_wait_data(0)` for 1.02 seconds.
  - The last stack shows `offcputime(8)` waiting in a `select(2)` syscall for 5.00 seconds, likely due to a 5-second timeout.

- **Notes**:
  - User-level stack traces are incomplete because they end at `libc`, which does not support the frame pointer.
  - This is more evident in `offcputime(8)` than `profile(8)` as blocking stacks often pass through system libraries like `libc` or `libpthread`.
  - See discussions on broken stack traces and solutions in Chapters 2, 12, 13, and 18, particularly Section 13.2.9.

- **Usage**:
  - `offcputime` can find production issues, such as unexpected time blocked in lock acquisition and responsible stack traces.
  - Context switch events can be very frequent, leading to significant overhead (e.g., >10%) for busy production workloads.
  - It is best to run this tool for short durations to minimize production impact.

- **Off-CPU Time Flame Graphs**:
  - The output can be visualized as an off-CPU time flame graph, similar to CPU flame graphs but with a different focus.
  - Example: `offcputime -fKu 5 > out.offcputime01.txt` followed by converting to SVG.
  - These flame graphs help identify threads sleeping and waiting for work.

- **Options**:
  - `-f`: Prints output in folded format.
  - `-u`: Traces only user threads.
  - `-k`: Traces only kernel threads.
  - `-U`: Shows only user stack traces.
  - `-R`: Shows only kernel stack traces.

- **bpftrace Code**:
  ```bash
  /usr/local/bin/bpftrace
  include <linux/sched.h>
  BEGIN
    printf("Tracing nanosecond time in off-CP0 stacks, Ctrl-C to end.\n")
  kprobe:finish_task_switch
    {
      $prev = (struct task_struct *)arg0;
      if ($pid == 0 || $prev->tgid == $pid) {
        @start[$prev->pid] = nsecs;
      }
      $last = @start[tid];
      if ($last != 0) {
        @kstack[ustack, comm] = sum(nsecs - $last);
        delete(@start[tid]);
      }
    }
  END
  clear(@start)
  ```

#### syscount
- **Functionality**: `syscount` is a BCC and bpftrace tool for counting system calls system-wide, useful for investigating high system CPU time.
- **Example Output**:
  - `syscount -l 1`
  - Top 10 syscalls every second with a timestamp.
  - Most frequent syscall: `futex(2)`, over 150,000 calls per second.

- **Further Exploration**:
  - Use man pages and BPF tools (e.g., `BCC trace(8)` or `bpftrace` one-liners) to inspect syscall arguments.
  - `strace(1)` can be used for quick understanding but may slow down the target application significantly.

- **Options**:
  - `-P`: Counts by process ID.
  - `-i`: Interval for printing.
  - `-d`: Duration of tracing.

- **bpftrace One-Liner**:
  ```bash
  bpftrace -e 'tracepoint:syscalls:sys_enter_* { @[comm, probe] = count(); }'
  ```

- **argdist and trace**:
  - `argdist(8)` and `trace(8)` are BCC tools for custom event examination.
  - Example: Summarizing `read(2)` syscall arguments and return values using `argdist(8)`.

- **bpftrace Example**:
  ```bash
  bpftrace -e 'tracepoint:syscalls:sys_enter_read { @size[args->count] = count(); }'
  ```

These tools provide detailed insights into system behavior and can be crucial for performance analysis and troubleshooting.