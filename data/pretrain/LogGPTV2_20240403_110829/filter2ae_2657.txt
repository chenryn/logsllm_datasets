# 【技术分享】每个人都应该了解的7种主要XSS案例

#### 译文声明
本文为翻译文章，原文来源于安全客。
原文地址：[请在此处插入原始链接]
译文仅供参考，具体内容及含义以原文为准。
译者：DropsAm4zing
预估稿费：160 RMB
投稿方式：发送邮件至linwei#360.cn 或登录网页版在线投稿。

## 0x00 引言
“掌握这7种主要的XSS案例，你就能识别出超过90%的XSS漏洞。”这句话听起来非常有吸引力，促使我深入研究这些知识。当我们阅读有关XSS的文章时，经常会遇到一些经典的PoC（概念验证）代码。虽然它们简洁明了，但对于初学者来说，在实际操作中却难以进一步提升技能。因此，本文将介绍7个实例，旨在帮助读者不仅能够发现XSS漏洞，还能有效利用它们。

练习站点链接：[请在此处插入链接]

在源码开头的HTML注释中包含了触发每个案例的所有参数，这些参数既可以通过GET也可以通过POST请求提交。值得注意的是，所有示例均为基于源的XSS攻击，意味着注入内容会显示在HTTP响应正文的源代码中。尽管反射型和存储型XSS有所不同，但关键在于它们如何在特定上下文中被触发。因此，我们将重点关注反射型XSS。基于DOM的XSS不会暴露于源代码中，故本文不予讨论。

建议使用没有XSS过滤器的浏览器（如Mozilla Firefox）来测试以下示例。

## 0x01 URL 反射
当源代码存在URL反射时，攻击者可以添加自己的XSS向量和载荷。对于PHP页面，可以在页面名称后添加任何内容，例如：
```
http://brutelogic.com.br/xss.php/">
```
这里的`">`用于破坏现有标签的闭合状态，从而创建新的标签（即XSS代码）的闭合条件。
```
" method="POST">
```
不同编程语言导致的差异使得反射可能出现在路径或URL参数中。在PHP中，通常是因为在表单提交过程中使用了全局变量`$_SERVER["PHP_SELF"]`。

## 0x02 简单的HTML注入 (HTMLi)
这是一种直接的方法，输入内容直接反映到页面上，无需绕过或破坏任何闭合标签。例如：
```
http://brutelogic.com.br/xss.php?a=<script>alert('XSS Test');</script>
Hello, <script>alert('XSS Test');</script>!
```

## 0x03 内联HTML注入
与前一个示例类似，但需要破坏前面的闭合标签并重新创建新的闭合。
```
">
```

## 0x04 内联HTML注入：不破坏标签
当输入位于HTML属性中且大于号(>)被过滤时，无法像之前那样破坏闭合标签。此时可以利用事件处理器，如：
```
http://brutelogic.com.br/xss.php?b3=" onmouseover=alert(1)//
```
此方法关闭了value值的引号，并为onmouseover事件插入了js代码，当用户鼠标悬停在输入框上时会弹出警告窗口。

## 0x05 JavaScript块中的HTML注入
有时输入会被传入JavaScript代码块中作为变量值。由于HTML标签优先级高于JavaScript，可以通过闭合原有的JS代码块并插入新的标签来执行恶意JS代码。
```
http://brutelogic.com.br/xss.php?c1=<script>alert('XSS Test');</script>
// HTMLi in Js Block (Single Quotes)
var myVar1 = '<script>alert("XSS Test");</script>';
```

## 0x06 简单的JavaScript注入
如果脚本标签被过滤掉了，上述方法就不再适用。此时可以尝试语法注入，比如：
```
http://brutelogic.com.br/xss.php?c3=''-alert(1)-''
// Simple Js Injection (Single Quotes)
var myVar3 = ''-alert(1)-'';
```

## 0x07 转义后的JavaScript注入
如果引号被转义，则注入无效。这时可以通过添加反斜杠来解决：
```
http://brutelogic.com.br/xss.php?c5='-alert(1)//
// Escaped Js Injection (Single Quotes)
var myVar5 = '\'-alert(1)-//';
```

### 扩展一点？
这里分享一个我在实际应用中遇到并学到的例子。通过URL GET请求触发XSS返回404错误，而直接访问则正常显示界面，表明存在过滤机制。使用xsstrike工具检测到可能存在XSS漏洞，但在浏览器中仅显示空白页，表明是误报。查看源码后发现前端通过正则表达式过滤了特殊字符并重定向到404页面。最终发现原因是后端PHP处理请求时使用了`$_REQUEST`方法，支持POST和GET请求，从而成功实现了XSS攻击。