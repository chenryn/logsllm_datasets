such as uPNP, perform service discovery by broadcast-
ing lookup requests to all hosts on the LAN. Allowing
this without intervention would be a violation of least
privilege. To safely support broadcast service discovery
within SANE, all packets sent to the link-layer broadcast
address are forwarded to the DC, which veriﬁes that they
strictly conform to the protocol spec. The DC then reis-
sues the request to all end hosts on the network, collects
the replies and returns the response to the sender. Putting
the DC on the path allows it to cache services for subse-
quent requests, thus having the additional beneﬁt of lim-
iting the amount of broadcast trafﬁc. Designing SANE to
efﬁciently support broadcast and multicast remains part
of our future work.
Service Publication. Within SANE, services can be
published with the DC in any number of ways:
trans-
lating existing service publication events (as described
above), via a command line tool, offering a web inter-
face, or in the case of IP, hooking into the bind call on
the local host `a la SOCKS [30].
3.5 Fault Tolerance
Replicating the Domain Controller. The DC is logi-
cally centralized, but most likely physically replicated so
as to be scalable and fault tolerant. Switches connect
to multiple DCs through multiple spanning trees, one
rooted at each DC. To do this, switches authenticate and
send their neighbor lists to each DC separately. Topol-
ogy consistency between DCs is not required as each DC
grants routes independently. Hosts randomly choose a
DC to send requests so as to distribute load.
Network level-policy, user declared access policy and
the service directory must maintain consistency among
multiple DCs.
If the DCs all belong to the same
enterprise–and hence trust each other–service advertise-
ments and access control policy can be replicated be-
tween DCs using existing methods for ensuring dis-
tributed consistency. (We will consider the case where
DCs do not trust each other in the next section.)
Recovering from Network Failure. In SANE, it is the
end host’s responsibility to determine network failure.
This is because direct communication from switches to
end hosts violates least privilege and creates new avenues
for DoS. SANE-aware end hosts send periodic probes or
keep-alive messages to detect failures and request fresh
capabilities.
When a link fails, a DC will be ﬂooded with requests
for new capabilities. We performed a feasibility study (in
Section 6), to see if this would be a problem in practice,
and found that even in the worst-case when all ﬂows are
affected, the requests would not overwhelm a single DC.
So that clients can adapt quickly, a DC may issue
multiple (edge-disjoint, where possible) capabilities to
clients. In the event of a link failure, a client simply uses
another capability. This works well if the topology is rich
enough for there to be edge-disjoint paths. Today’s en-
terprise networks are not usually richly interconnected,
in part because additional links and paths make security
more complicated and easier to undermine. However,
this is no longer true with SANE—each additional switch
and link improves resilience. With just two or three al-
ternate routes we can expect a high degree of fault tol-
erance [27]. With multiple paths, an end host can set
aggressive time-outs to detect link failures (unlike in IP
networks, where convergence times can be high).
3.6 Additional Features
This section discusses some additional considerations of
a SANE network, including its support for middleboxes,
mobility, and support for logging.
Middleboxes and Proxies. In today’s networks, prox-
ies are usually placed at choke-points, to make sure traf-
ﬁc will pass through them. With SANE, a proxy can be
placed anywhere; the DC can make sure the proxy is on
the path between a client and a server. This can lead to
powerful application-level security policies that far out-
reach port-level ﬁltering.
At the very least, lightweight proxies can validate that
communicating end-points are adhering to security pol-
icy. Proxies can also enforce service- or user-speciﬁc
policies or perform transformations on a per-packet ba-
sis. These could be speciﬁed by the capability. Proxies
might scan for viruses and apply vulnerability-speciﬁc
ﬁlters, log application-level transactions, ﬁnd informa-
tion leaks, and shape trafﬁc.
Mobility. Client mobility within the LAN is transpar-
ent to servers, because the service is unaware of (and so
independent of) the underlying topology. When a client
USENIX Association
Security ’06: 15th USENIX Security Symposium
143
7
changes its position—e.g., moves to a different wireless
access point—it refreshes its capabilities and passes new
return routes to the servers it is accessing.
If a client
moves locations, it should revoke its current set of out-
standing capabilities. Otherwise, much like today, a new
machine plugged into the same access point could access
trafﬁc sent to the client after it has left.
Server mobility is handled in the same manner as
adapting to link failures.
If a server changes location,
clients will detect that packets are not getting through
and request a new set of capabilities. Once the server has
updated its service in the directory, all (re)issued capa-
bilities will contain the correct path.
Anti-mobility. SANE also trivially anti-mobility. That
is, SANE can prevent hosts and switches from moving
on the network by disallowing access if they do. As the
DC knows the exact location of all senders given request
capabilities, it can be conﬁgured to only service hosts if
they are connected at particular physical locations. This
is useful for regulatory compliance, such as 911 restric-
tions on movement for VoIP-enabled devices. More gen-
erally, it allows a strong “lock-down” of network enti-
ties to enforce strong policies in the highest-security net-
works. For example, it can be used to disallow all net-
work access to rogue PCs.
Centralized Logging. The DC, as the broker for all
communications, is in an ideal position for network-wide
connection logging. This could be very useful for foren-
sics. Request routes protect against source spooﬁng on
connection setup, providing a path back to the connect-
ing port in the network. Further, compulsory authentica-
tion matches each connection request to an actual user.
4 Attack Resistance
SANE eliminates many of the vulnerabilities present in
today’s networks through centralization of control, sim-
ple declarative security policies and low-level enforce-
ment of encrypted source routes. In this section, we enu-
merate the main ways that SANE resists attack.
• Access-control lists: The NSD uses ACLs for di-
rectories, preventing attackers from enumerating all
services in the system—an example of the principle
of least knowledge—which in turn prevents the dis-
covery of particular applications for which compro-
mises are known. The NSD controls access to ser-
vices to enforce protection at the link layer through
DC-generated capabilities—supporting the princi-
ple of least privilege—which stops attackers from
compromising applications, even if they are discov-
ered.
• Encrypted, authenticated source-routes and
link-state updates: These prevent an attacker from
learning the topology or from enumerating hosts
and performing port scans, further examples of
the principle of least knowledge.6 SANE’s source
routes prevent hosts from spooﬁng requests either
to the DC on the control path or to other end hosts
on the data path. We discuss these protections fur-
ther in Section 4.1.
• Authenticated network components: The au-
thentication mechanism prevents unauthenticated
switches from joining a SANE network, thwarting a
variety of topology attacks. Every switch enforces
capabilities providing defence in depth. Authenti-
cated switches cannot lie about their connectivity
to create arbitrary links, nor can they use the same
authenticated public key to join the network using
different physical switches. Finally, well-known
spanning-tree or routing attacks [32, 48] are impos-
sible, given the DC’s central role. We discuss these
issues further in section 4.2.
SANE attempts to degrade gracefully in the face of more
sophisticated attacks. Next, we examine several major
classes of attacks.
4.1 Resource Exhaustion
Flooding. As discussed in section 3.3, ﬂooding attacks
are handled through revocation. However, misbehaving
switches or hosts may also attempt to attack the net-
work’s control path by ﬂooding the DC with requests.
Thus, we rate-limit requests for capabilities to the DC. If
a switch or end host violates the rate limit, the DC tells
its neighbors to disconnect it from the network.
Revocation state exhaustion. SANE switches must
keep a list of revoked capabilities. This list might ﬁll,
for example, if it is maintained in a small CAM. An at-
tacker could hoard capabilities, then cause all of them to
be revoked simultaneously. SANE uses two mechanisms
to protect against this attack: (1) If its revocation list ﬁlls,
a switch simply generates a new key; this invalidates all
existing capabilities that pass through it. It clears its re-
vocation list, and passes the new key to the DC. (2) The
DC tracks the number of revocations issued per sender.
When this number crosses a predeﬁned threshold, the
sender is removed from the service’s ACLs.
If a switch uses a sender’s capability to ﬂood a re-
ceiver, thus eliciting a revocation, the sender can use a
different capability (if it has one) to avoid the misbehav-
ing switch. This occurs naturally because the client treats
revocation—which results in an inability to get packets
144
Security ’06: 15th USENIX Security Symposium
USENIX Association
8
Figure 5: Attacker C can deny service to A by selectively
dropping A’s packets, yet letting the packets of its parent (B)
through. As a result, A cannot communicate with the DC, even
though a alternate path exists through D.
through—as a link failure, and it will try using a differ-
ent capability instead. While well-behaved senders may
have to use or request alternate capabilities, their perfor-
mance degradation is only temporary, provided that there
exists sufﬁcient link redundancy to route around misbe-
having switches. Therefore, using this approach, SANE
networks can quickly converge to a state where attackers
hold no valid capabilities and cannot obtain new ones.
4.2 Tolerating Malicious Switches
By design, SANE switches have minimal functionality—
much of which is likely to be placed in hardware—
making remote compromise unlikely. Furthermore, each
switch requires an authenticated public key, preventing
rogue switches from joining the network. However, other
avenues of attack, such as hardware tampering or supply-
chain attacks, may allow an adversary to introduce a ma-
licious switch. For completeness, therefore, we consider
defenses against malicious switches attempting to sab-
otage network operation, even though the following at-
tacks are feasible only in the most extreme threat envi-
ronments.
Sabotaging MST Discovery. By falsely advertising a
smaller distance to the DC during MST construction,
a switch can cause additional DC trafﬁc to be routed
through it. Nominally, this practice can create a path in-
efﬁciency.
More seriously, a switch can attract trafﬁc, then start
dropping packets. This practice will result in degraded
throughput, unless the drop rate increases to a point at
which the misbehaving switch is declared failed and a
new MST is constructed.
In a more subtle attack, a malicious switch can selec-
tively allow packets from its neighbors, yet drop all other
trafﬁc. An example of this attack is depicted in Figure 5:
Node C only drops packets from node A. Thus, B does
not change its forwarding path to the DC, as C appears to
be functioning normal from its view. As a result, A can-
not communicate with the DC, even though an alternate
path exists through D. Note that this attack, at the MST
discovery phase, precludes our normal solution for rout-
ing around failures—namely, using node-disjoint paths
whenever possible—as node A has never registered with
the DC in the ﬁrst place.
From a high level, we can protect against this selective
attack by hiding the identities of senders from switches
en-route. Admittedly, it is unlikely that we can prevent
all such information leakage through the various side-
channels that naturally exist in a real system, e.g., due
to careful packet inspection and ﬂow analysis. Some
methods to confound such attacks include (1) hiding eas-
ily recognizable sender-IDs from packet headers,7 (2)
padding all response capabilities to the same length to
hide path length, and (3) randomizing periodic messages
to the DC to hide a node’s scheduled timings.
Using these safeguards, if a switch drops almost all
packets, its immediate neighbors will construct a new
MST that excludes it. If it only occasionally drops pack-
ets, the rate of MST discovery is temporarily degraded,
but downstream switches will eventually register with the
DC.
Bad Link-State Advertisements. Malicious switches
can try to attract trafﬁc by falsifying connectivity infor-
mation in link-state updates. A simple safeguard against
such attacks is for the DC to only add non-leaf edges to
its network map when both switches at either end have
advertised the link.
This safeguard does not prevent colluding nodes from
falsely advertising a link between themselves. Unfortu-
nately, such collusion cannot be externally veriﬁed. No-
tice that such collusion can only result in a temporary
denial-of-service attack when capabilities containing a
false link are issued: When end hosts are unable to route
over a false link, they immediately request a fresh capa-
bility. Additionally, the isolation properties of the net-
work are still preserved.
Note that SANE’s requirement for switches to initially
authenticate themselves with the DC prevents Sybil at-
tacks, normally associated with open identity-free net-
works [21].
4.3 Tolerating a Malicious DC
Domain controllers are highly trusted entities in a SANE
network. This can create a single point-of-failure from
a security standpoint, since the compromise of any one
DC yields total control to an attacker.
To prevent such a take-over, one can distribute trust
among DCs using threshold cryptography. While the full
details are beyond the scope of this paper, we sketch the
basic approach. We split the DCs’ secret key across a few
servers (say n < 6), such that two of them are needed
to generate a capability. The sender then communicates
with 2-out-of-n DCs to obtain the capability. Thus, an
USENIX Association
Security ’06: 15th USENIX Security Symposium
145
9
attacker gains no additional access by compromising a
single DC.8 To prevent a single malicious DC from re-
voking arbitrary capabilities or, even worse, completely
disconnecting a switch or end host, the revocation mech-
anism (section 3.3) must also be extended to use asym-
metric threshold cryptography [20].
Given such replicated function, access control policy
and service registration must be done independently with
each DC by the end host, using standard approaches for
consistency such as two-phase commit. When a new DC
comes online or when a DC re-establishes communica-
tion after a network partition, it must have some means
of re-syncing with the other DCs. This can be achieved