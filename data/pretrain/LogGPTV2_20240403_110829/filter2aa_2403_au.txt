  ret 
.LC8: 
  .string "%lld\n" 
这两段代码的 f()函数部分相同。在采用 64 位参数之后，程序使用了整个 64 位 X 寄存器。程序通过
两条指令才能把长数据类型的 64 位值存储到寄存器里。本书在 28.3.1 节会详细介绍 64 位数据的有关操作。 
Non-optimizing GCC (Linaro) 4.9 
在没有启用优化选项的情况下，编译器生成的代码稍显冗长： 
f: 
  sub     sp, sp, #16 
  str     w0, [sp,12] 
  str     w1, [sp,8] 
  str     w2, [sp,4] 
  ldr     w1, [sp,12] 
  ldr     w0, [sp,8] 
  mul     w1, w1, w0 
  ldr     w0, [sp,4] 
  add     w0, w1, w0 
  add     sp, sp, 16 
  ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 8 章  参 数 获 取 
91 
函数 f()把传入的参数保存在数据栈里，以防止后期的指令占用 W0～W2 寄存器。这可防止后续指令覆
盖函数参数，起到保护传入参数的作用。这种技术叫作“寄存器保护区/Register Save Area”［参见 ARM13c］。
但是，本例的这种被调用方函数可以不这样保存参数。寄存器保护区与 8.2.1 节介绍的阴影空间十分相似。 
在启用优化选项后，GCC 4.9 会把这部分寄存器存储指令删除。这是因为优化功能判断出后续指令不
会再操作函数参数的相关地址，所以编译器不再另行保存 W0～W2 中存储的数据。 
此外，上述代码使用了 MUL/ADD 指令对，而没有使用 MADD 指令。 
8.4  MIPS 
指令清单 8.10  Optimizing GCC 4.4.5 
.text:00000000 f: 
; $a0=a 
; $a1=b 
; $a2=c 
.text:00000000          
mult  
$a1, $a0 
.text:00000004          
mflo     
$v0 
.text:00000008          
jr       
$ra 
.text:0000000C          
addu     
$v0, $a2, $v0 ; branch delay slot 
; result in $v0 upon  return 
.text:00000010 main: 
.text:00000010 
.text:00000010 var_10  
= -0x10 
.text:00000010 var_4   
=-4 
.text:00000010 
.text:00000010          
lui      
$gp, (__gnu_local_gp >> 16) 
.text:00000014          
addiu    
$sp, -0x20 
.text:00000018          
la       
$gp, (__gnu_local_gp & 0xFFFF) 
.text:0000001C          
sw       
$ra, 0x20+var_4($sp) 
.text:00000020          
sw       
$gp, 0x20+var_10($sp) 
; set c: 
.text:00000024          
li       
$a2, 3 
; set a: 
.text:00000028          
li       
$a0, 1 
.text:0000002C          
jal      
f 
; set b: 
.text:00000030          
li       
$a1, 2      ; branch delay slot 
; result in $v0 now 
.text:00000034          
lw       
$gp, 0x20+var_10($sp) 
.text:00000038          
lui      
$a0, ($LC0 >> 16) 
.text:0000003C          
lw       
$t9, (printf & 0xFFFF)($gp) 
.text:00000040          
la       
$a0, ($LC0 & 0xFFFF) 
.text:00000044          
jalr     
$t9 
; take result of f()   
function and pass it as a second argument to printf(): 
.text:00000048          
move     
$a1, $v0         ; branch delay slot 
.text:0000004C          
lw       
$ra, 0x20+var_4($sp) 
.text:00000050          
move     
$v0, $zero 
.text:00000054          
jr       
$ra 
.text:00000058          
addiu    
$sp, 0x20        ; branch delay slot 
函数所需的前 4 个参数由 4 个 A-字头寄存器传递。 
MIPS 平台有两个特殊的寄存器：HI 和 LO。它们用来存储 MULT 指令的乘法计算结果——64 位的积。
只有 MFLO 和 MFHI 指令能够访问 HI 和 LO 寄存器。其中，MFLO 负责访问积的低 32 位部分。本例中它
把积的低 32 位部分存储到$V0 寄存器。 
因为本例没有访问积的高 32 位，所以那半部分被丢弃了。不过我们的程序就是这样设计的：积是 32
位的整型数据。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
92 
逆向工程权威指南（上册） 
最终 ADDU（Add Unsigned）指令计算第三个参数与积的和。 
在MIPS平台上，ADD和ADDU是两个不同的指令。此二者的区别体现在异常处理的方式上，而符号位
的处理方式反而没有区别。ADD指令可以触发溢出处理机制。溢出有时候是必要的
①
① http://blog.regehr.org/archives/1154。 
，而且被Ada和其他
编程语言支持。ADDU不会引发溢出。因为C/C++不支持这种机制，所以本例使用的是ADDU指令而非ADD
指令。 
此后$V0 寄存器存储这 32 位的运算结果。 
main()函数使用到了 JAL（Jump and Link）指令。JAL 和 JALR 指令有所区别，前者使用的是相对地址——
偏移量，后者则跳转到寄存器存储的绝对地址里。JALR 的 R 代表 Register。由于 f()函数和 main()函数都
位于同一个 object 文件，所以 f()函数的相对地址是已知的，可以被计算出来。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 99 章
章    返
返    回
回    值
值  
在x86 系统里，被调用方函数通常通过EAX寄存器返回运算结果。
①
9.1 void 型函数的返回值 
若返回值属于byte或char类型数据，
返回值将存储于EAX寄存器的低 8 位——AL寄存器存储返回值。如果返回值是浮点float型数据，那么返回
值将存储在FPU的 ST(0)寄存器里。ARM系统的情况相对简单一些，它通常使用R0 寄存器回传返回值。 
主函数 main()的数据类型通常是 void 而不是 int，程序如何处理返回值呢？ 
调用 main()函数的有关代码大体会是这样的： 
push envp 
push argv 
push argc 
call main 
push eax 
call exit 
将其转换为源代码，也就是： 
exit(main(argc,argv,envp)); 
如果声明 main()的数据类型是 void，则 main()函数不会明确返回任何值（没有 return 指令）。不过在
main()函数退出时，EAX 寄存器还会存有数据，EAX 寄存器保存的数据会被传递给 exit()函数、成为后者
的输入参数。通常 EAX 寄存器的值会是被调用方函数残留的确定数据，所以 void 类型函数的返回值、也
就是主函数退出代码往往属于伪随机数（pseudorandom）。 
在我们进行相应的演示之前，请注意 main()函数返回值是 void 型： 
#include  
void main()  
{ 
  printf ("Hello, world!\n"); 
}; 
然后使用 Linux 系统编译。 
3.4.3 节处介绍过 GCC 4.8.1 会使用 puts()替换 printf()，而且 puts()函数会返回它所输出的字符的总数。
我们将充分利用这点，观察 main()函数的返回值。请注意在 main()函数结束时，EAX 寄存器的值不会是零；
也就是说，此时 EAX 寄存器存储的值应当是上一个函数——puts()函数的返回值。 
指令清单 9.1  GCC 4.8.1 
.LC0: 
  .string "Hello, world!" 
main: 
  push    ebp 
  mov     ebp, esp 
  and     esp, -16 
  sub     esp, 16 
  mov     DWORD PTR [esp], OFFSET FLAT:.LC0 
  call    puts 
① 请参见 MSDN: Return Values (C++): http://msdn.microsoft.com/en-us/library/7572ztz4.aspx。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
94 
逆向工程权威指南（上册） 
  leave 
  ret 
我们再通过一段 bash 脚本程序，观察程序的退出状态（返回值）。 
指令清单 9.2  tst.sh 
#!/bin/sh 
./hello_world 
echo $? 
执行上述脚本之后，我们将会看到： 
$ ./tst.sh 
Hello, world! 
14 
这个“14”就是 puts()函数输出的字符的总数。 
9.2 函数返回值不被调用的情况 
printf() 函数的返回值为打印的字符的总数，但是很少有程序会使用这个返回值。实际上，确实有调用
运算函数、却不使用运算结果的程序： 
int f()  
{ 
     // skip first 3 random values 
     rand(); 
     rand(); 
     rand(); 
     // and use 4th 
     return rand(); 
}; 
上述四个 rand()函数都会把运算结果存储到 EAX 寄存器里。但是前三个 rand()函数留在 EAX 寄存器的
运算结果都被抛弃了。 
9.3 返回值为结构体型数据 
我们继续讨论使用 EAX 寄存器存储函数返回值的案例。函数只能够使用 EAX 这 1 个寄存器回传返回
值。因为这种局限，过去的 C 编译器无法编译返回值超过 EAX 容量（一般来说，就是 int 型数据）的函
数。那个时候，如果要让返回多个返回值，那么只能用函数返回一个值、再通过指针传递其余的返回值。
现在的 C 编译器已经没有这种短板了，return 指令甚至可以返回结构体型的数据，只是时下很少有人会这
么做。如果函数的返回值是大型结构的数据，那么应由调用方函数（caller）负责分配空间，给结构体分配
指针，再把指针作为第一个参数传递给被调用方函数。现在的编译器已经能够替程序员自动完成这种复杂
的操作了，其处理方式相当于上述几个步骤，只是编译器隐藏了有关操作。 
我们来看： 
struct s  
{ 
     int a; 
     int b; 
     int c; 
}; 
struct s get_some_values (int a) 
{ 
     struct s rt; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 9 章  返  回  值 
95 
     rt.a=a+1; 
     rt.b=a+2; 
     rt.c=a+3; 
     return rt;  
}; 
使用 MSVC 2010 （启用优化选项/Ox）编译，可得到： 
$T3853 = 8                       
; size = 4 
_a$ = 12                         
; size = 4 
?get_some_values@@YA?AUs@@H@Z PROC           ; get_some_values 
    mov    ecx, DWORD PTR _a$[esp-4] 
    mov    eax, DWORD PTR $T3853[esp-4] 
    lea    edx, DWORD PTR [ecx+1] 
    mov    DWORD PTR [eax], edx 
    lea    edx, DWORD PTR [ecx+2] 
    add    ecx, 3 
    mov    DWORD PTR [eax+4], edx 
    mov    DWORD PTR [eax+8], ecx 
    ret    0 
?get_some_values@@YA?AUs@@H@Z ENDP            ; get_some_values 
在程序内部传递结构体的指针就是$T3853。 
如果使用 C99 扩展语法来写，刚才的程序就是： 
struct s 
{ 
    int a; 
    int b; 
    int c; 
}; 
struct s get_some_values (int a) 
{ 
    return (struct s){.a=a+1, .b=a+2, .c=a+3}; 
}; 
经 GCC 4.8.1 编译上述程序，可得到如下所示的指令。 
指令清单 9.3  GCC 4.8.1 
_get_some_values proc near 
ptr_to_struct 
= dword ptr  4 
a                
= dword ptr  8 
mov      edx, [esp+a] 
mov      eax, [esp+ptr_to_struct] 
lea      ecx, [edx+1] 
mov      [eax], ecx 
lea      ecx, [edx+2] 
add      edx, 3 
mov      [eax+4], ecx 
mov      [eax+8], edx 
retn 
_get_some_values endp 
可见，调用方函数（caller）创建了数据结构、分配了数据空间，被调用的函数仅向结构体填充数据。
其效果等同于返回结构体。这种处理方法并不会影响程序性能。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1100 章
章    指
指        针
针  
指针通常用来帮助函数处理返回值（请参阅第 7 章的范例）。当函数需要返回多个值时，它通常都是通
过指针传递返回值的。 
10.1 全局变量 
#include  
void f1 (int x, int y, int *sum, int *product) 
{ 
         *sum=x+y; 
         *product=x*y; 
}; 
int sum, product; 
void main() 
{ 
         f1(123, 456, &sum, &product); 
         printf ("sum=%d, product=%d\n", sum, product); 
}; 
经 MSVC 2010（启用优化选项/Ox /Ob）编译上述程序，可得到如下所示的指令。 
指令清单 10.1  Optimizing MSVC 2010 (/Ob0) 
COMM     _product:DWORD 
COMM     _sum:DWORD 
$SG2803 DB     'sum=%d, product=%d', 0aH, 00H 
_x$ = 8 
; size = 4 
_y$ = 12 
; size = 4 