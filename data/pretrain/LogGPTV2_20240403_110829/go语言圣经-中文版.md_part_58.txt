case reflect.Slice: // (item ...)
for !endList(lex) {
item := reflect.New(v.Type().Elem()).Elem()
read(lex, item)
v.Set(reflect.Append(v, item))
}
case reflect.Struct: // ((name value) ...)
for !endList(lex) {
lex.consume('(')
if lex.token != scanner.Ident {
panic(fmt.Sprintf("got token %q, want field name", lex.text()))
}
name := lex.text()
lex.next()
read(lex, v.FieldByName(name))
lex.consume(')')
}
case reflect.Map: // ((key value) ...)
示例: 解码S表达式 447
gopl
v.Set(reflect.MakeMap(v.Type()))
for !endList(lex) {
lex.consume('(')
key := reflect.New(v.Type().Key()).Elem()
read(lex, key)
value := reflect.New(v.Type().Elem()).Elem()
read(lex, value)
v.SetMapIndex(key, value)
lex.consume(')')
}
default:
panic(fmt.Sprintf("cannot decode list into %v", v.Type()))
}
}
func endList(lex *lexer) bool {
switch lex.token {
case scanner.EOF:
panic("end of file")
case ')':
return true
}
return false
}
最后，我们将解析器包装为导出的Unmarshal解码函数，隐藏了一些初始化和清理等边缘处
理。内部解析器以panic的方式抛出错误，但是Unmarshal函数通过在defer语句调用recover函
数来捕获内部panic（§5.10），然后返回一个对panic对应的错误信息。
// Unmarshal parses S-expression data and populates the variable
// whose address is in the non-nil pointer out.
func Unmarshal(data []byte, out interface{}) (err error) {
lex := &lexer{scan: scanner.Scanner{Mode: scanner.GoTokens}}
lex.scan.Init(bytes.NewReader(data))
lex.next() // get the first token
defer func() {
// NOTE: this is not an example of ideal error handling.
if x := recover(); x != nil {
err = fmt.Errorf("error at %s: %v", lex.scan.Position, x)
}
}()
read(lex, reflect.ValueOf(out).Elem())
return nil
}
生产实现不应该对任何输入问题都用panic形式报告，而且应该报告一些错误相关的信息，例
如出现错误输入的行号和位置等。尽管如此，我们希望通过这个例子来展示类似
encoding/json等包底层代码的实现思路，以及如何使用反射机制来填充数据结构。
示例: 解码S表达式 448
gopl
练习 12.8： sexpr.Unmarshal函数和json.Unmarshal一样，都要求在解码前输入完整的字节
slice。定义一个和json.Decoder类似的sexpr.Decoder类型，支持从一个io.Reader流解码。修
改sexpr.Unmarshal函数，使用这个新的类型实现。
练习 12.9： 编写一个基于标记的API用于解码S表达式，参考xml.Decoder（7.14）的风格。
你将需要五种类型的标记：Symbol、String、Int、StartList和EndList。
练习 12.10： 扩展sexpr.Unmarshal函数，支持布尔型、浮点数和interface类型的解码，使用
练习 12.3： 的方案。（提示：要解码接口，你需要将name映射到每个支持类型的
reflect.Type。）
示例: 解码S表达式 449
gopl
12.7. 获取结构体字段标识
在4.5节我们使用构体成员标签用于设置对应JSON对应的名字。其中json成员标签让我们可以
选择成员的名字和抑制零值成员的输出。在本节，我们将看到如果通过反射机制类获取成员
标签。
对于一个web服务，大部分HTTP处理函数要做的第一件事情就是展开请求中的参数到本地变
量中。我们定义了一个工具函数，叫params.Unpack，通过使用结构体成员标签机制来让
HTTP处理函数解析请求参数更方便。
首先，我们看看如何使用它。下面的search函数是一个HTTP请求处理函数。它定义了一个匿
名结构体类型的变量，用结构体的每个成员表示HTTP请求的参数。其中结构体成员标签指明
了对于请求参数的名字，为了减少URL的长度这些参数名通常都是神秘的缩略词。Unpack将
请求参数填充到合适的结构体成员中，这样我们可以方便地通过合适的类型类来访问这些参
数。
gopl.io/ch12/search
import "gopl.io/ch12/params"
// search implements the /search URL endpoint.
func search(resp http.ResponseWriter, req *http.Request) {
var data struct {
Labels []string `http:"l"`
MaxResults int `http:"max"`
Exact bool `http:"x"`
}
data.MaxResults = 10 // set default
if err := params.Unpack(req, &data); err != nil {
http.Error(resp, err.Error(), http.StatusBadRequest) // 400
return
}
// ...rest of handler...
fmt.Fprintf(resp, "Search: %+v\n", data)
}
下面的Unpack函数主要完成三件事情。第一，它调用req.ParseForm()来解析HTTP请求。然
后，req.Form将包含所有的请求参数，不管HTTP客户端使用的是GET还是POST请求方法。
下一步，Unpack函数将构建每个结构体成员有效参数名字到成员变量的映射。如果结构体成
员有成员标签的话，有效参数名字可能和实际的成员名字不相同。reflect.Type的Field方法将
返回一个reflect.StructField，里面含有每个成员的名字、类型和可选的成员标签等信息。其中
获取结构体字段标识 450
gopl
成员标签信息对应reflect.StructTag类型的字符串，并且提供了Get方法用于解析和根据特定
key提取的子串，例如这里的http:"..."形式的子串。
gopl.io/ch12/params
// Unpack populates the fields of the struct pointed to by ptr
// from the HTTP request parameters in req.
func Unpack(req *http.Request, ptr interface{}) error {
if err := req.ParseForm(); err != nil {
return err
}
// Build map of fields keyed by effective name.
fields := make(map[string]reflect.Value)
v := reflect.ValueOf(ptr).Elem() // the struct variable
for i := 0; i < v.NumField(); i++ {
fieldInfo := v.Type().Field(i) // a reflect.StructField
tag := fieldInfo.Tag // a reflect.StructTag
name := tag.Get("http")
if name == "" {
name = strings.ToLower(fieldInfo.Name)
}
fields[name] = v.Field(i)
}
// Update struct field for each parameter in the request.
for name, values := range req.Form {
f := fields[name]
if !f.IsValid() {
continue // ignore unrecognized HTTP parameters
}
for _, value := range values {
if f.Kind() == reflect.Slice {
elem := reflect.New(f.Type().Elem()).Elem()
if err := populate(elem, value); err != nil {
return fmt.Errorf("%s: %v", name, err)
}
f.Set(reflect.Append(f, elem))
} else {
if err := populate(f, value); err != nil {
return fmt.Errorf("%s: %v", name, err)
}
}
}
}
return nil
}
获取结构体字段标识 451
gopl
最后，Unpack遍历HTTP请求的name/valu参数键值对，并且根据更新相应的结构体成员。回
想一下，同一个名字的参数可能出现多次。如果发生这种情况，并且对应的结构体成员是一
个slice，那么就将所有的参数添加到slice中。其它情况，对应的成员值将被覆盖，只有最后
一次出现的参数值才是起作用的。
populate函数小心用请求的字符串类型参数值来填充单一的成员v（或者是slice类型成员中的
单一的元素）。目前，它仅支持字符串、有符号整数和布尔型。其中其它的类型将留做练习
任务。
func populate(v reflect.Value, value string) error {
switch v.Kind() {
case reflect.String:
v.SetString(value)
case reflect.Int:
i, err := strconv.ParseInt(value, 10, 64)
if err != nil {
return err
}
v.SetInt(i)
case reflect.Bool:
b, err := strconv.ParseBool(value)
if err != nil {
return err
}
v.SetBool(b)
default:
return fmt.Errorf("unsupported kind %s", v.Type())
}
return nil
}
如果我们上上面的处理程序添加到一个web服务器，则可以产生以下的会话：
获取结构体字段标识 452
gopl
$ go build gopl.io/ch12/search
$ ./search &
$ ./fetch 'http://localhost:12345/search'
Search: {Labels:[] MaxResults:10 Exact:false}
$ ./fetch 'http://localhost:12345/search?l=golang&l=programming'
Search: {Labels:[golang programming] MaxResults:10 Exact:false}
$ ./fetch 'http://localhost:12345/search?l=golang&l=programming&max=100'
Search: {Labels:[golang programming] MaxResults:100 Exact:false}
$ ./fetch 'http://localhost:12345/search?x=true&l=golang&l=programming'
Search: {Labels:[golang programming] MaxResults:10 Exact:true}
$ ./fetch 'http://localhost:12345/search?q=hello&x=123'
x: strconv.ParseBool: parsing "123": invalid syntax
$ ./fetch 'http://localhost:12345/search?q=hello&max=lots'
max: strconv.ParseInt: parsing "lots": invalid syntax
练习 12.11： 编写相应的Pack函数，给定一个结构体值，Pack函数将返回合并了所有结构体
成员和值的URL。
练习 12.12： 扩展成员标签以表示一个请求参数的有效值规则。例如，一个字符串可以是有
效的email地址或一个信用卡号码，还有一个整数可能需要是有效的邮政编码。修改Unpack函
数以检查这些规则。
练习 12.13： 修改S表达式的编码器（§12.4）和解码器（§12.6），采用和encoding/json包
（§4.5）类似的方式使用成员标签中的sexpr:"..."字串。
获取结构体字段标识 453
gopl
12.8. 显示一个类型的方法集
我们的最后一个例子是使用reflect.Type来打印任意值的类型和枚举它的方法：
gopl.io/ch12/methods
// Print prints the method set of the value x.
func Print(x interface{}) {
v := reflect.ValueOf(x)
t := v.Type()
fmt.Printf("type %s\n", t)
for i := 0; i < v.NumMethod(); i++ {
methType := v.Method(i).Type()
fmt.Printf("func (%s) %s%s\n", t, t.Method(i).Name,
strings.TrimPrefix(methType.String(), "func"))
}
}
reflect.Type和reflect.Value都提供了一个Method方法。每次t.Method(i)调用将一个
reflect.Method的实例，对应一个用于描述一个方法的名称和类型的结构体。每次v.Method(i)
方法调用都返回一个reflect.Value以表示对应的值（§6.4），也就是一个方法是帮到它的接收
者的。使用reflect.Value.Call方法（我们之类没有演示），将可以调用一个Func类型的
Value，但是这个例子中只用到了它的类型。
这是属于time.Duration和 两个类型的方法：
*strings.Replacer
methods.Print(time.Hour)
// Output:
// type time.Duration
// func (time.Duration) Hours() float64
// func (time.Duration) Minutes() float64