stored within the files while using the app.
Dynamic Analysis with Needle
On a jailbroken device, you can use the iOS security assessment framework Needle to find vulnerabilities caused by
the application's data storage mechanism.
Reading the Keychain
To use Needle to read the Keychain, execute the following command:
[needle] > use storage/data/keychain_dump
[needle][keychain_dump] > run
Searching for Binary Cookies
iOS applications often store binary cookie files in the application sandbox. Cookies are binary files containing cookie
data for application WebViews. You can use Needle to convert these files to a readable format and inspect the data.
Use the following Needle module, which searches for binary cookie files stored in the application container, lists their
data protection values, and gives the user the options to inspect or download the file:
[needle] > use storage/data/files_binarycookies
[needle][files_binarycookies] > run
Searching for Property List Files
iOS applications often store data in property list (plist) files that are stored in both the application sandbox and the IPA
package. Sometimes these files contain sensitive information, such as usernames and passwords; therefore, the
contents of these files should be inspected during iOS assessments. Use the following Needle module, which
searches for plist files stored in the application container, lists their data protection values, and gives the user the
options to inspect or download the file:
[needle] > use storage/data/files_plist
[needle][files_plist] > run
Searching for Cache Databases
iOS applications can store data in cache databases. These databases contain data such as web requests and
responses. Sometimes the data is sensitive. Use the following Needle module, which searches for cache files stored
in the application container, lists their data protection values, and gives the user the options to inspect or download
the file:
382
Data Storage on iOS
[needle] > use storage/data/files_cachedb
[needle][files_cachedb] > run
Searching for SQLite Databases
iOS applications typically use SQLite databases to store data required by the application. Testers should check the
data protection values of these files and their contents for sensitive data. Use the following Needle module, which
searches for SQLite databases stored in the application container, lists their data protection values, and gives the user
the options to inspect or download the file:
[needle] > use storage/data/files_sql
[needle][files_sql] >
Checking Logs for Sensitive Data (MSTG-STORAGE-3)
There are many legitimate reasons for creating log files on a mobile device, including keeping track of crashes or
errors that are stored locally while the device is offline (so that they can be sent to the app's developer once online),
and storing usage statistics. However, logging sensitive data, such as credit card numbers and session information,
may expose the data to attackers or malicious applications. Log files can be created in several ways. The following list
shows the methods available on iOS:
NSLog Method
printf-like function
NSAssert-like function
Macro
Static Analysis
Use the following keywords to check the app's source code for predefined and custom logging statements:
For predefined and built-in functions:
NSLog
NSAssert
NSCAssert
fprintf
For custom functions:
Logging
Logfile
A generalized approach to this issue is to use a define to enable NSLog statements for development and debugging,
then disable them before shipping the software. You can do this by adding the following code to the appropriate
PREFIX_HEADER (*.pch) file:
#ifdef DEBUG
# define NSLog (...) NSLog(__VA_ARGS__)
#else
# define NSLog (...)
#endif
Dynamic Analysis
In the section "Monitoring System Logs" of the chapter "iOS Basic Security Testing" various methods for checking the
device logs are explained. Navigate to a screen that displays input fields that take sensitive user information.
383
Data Storage on iOS
After starting one of the methods, fill in the input fields. If sensitive data is displayed in the output, the app fails this
test.
Determining Whether Sensitive Data Is Sent to Third Parties (MSTG-
STORAGE-4)
Various third-party services can be embedded in the app. The features these services provide can involve tracking
services to monitor the user's behavior while using the app, selling banner advertisements, or improving the user
experience. The downside to third-party services is that developers don't know the details of the code executed via
third-party libraries. Consequently, no more information than is necessary should be sent to a service, and no
sensitive information should be disclosed.
The downside is that a developer doesnâ€™t know in detail what code is executed via 3rd party libraries and therefore
giving up visibility. Consequently it should be ensured that not more than the information needed is sent to the service
and that no sensitive information is disclosed.
Most third-party services are implemented in two ways:
with a standalone library
with a full SDK
Static Analysis
To determine whether API calls and functions provided by the third-party library are used according to best practices,
review their source code.
All data that's sent to third-party services should be anonymized to prevent exposure of PII (Personal Identifiable
Information) that would allow the third party to identify the user account. No other data (such as IDs that can be
mapped to a user account or session) should be sent to a third party.
Dynamic Analysis
All requests made to external services should be analyzed for embedded sensitive information. By using an
interception proxy, you can investigate the traffic between the app and the third party's endpoints. When the app is in
use, all requests that don't go directly to the server that hosts the main function should be checked for sensitive
information that's sent to a third party. This information could be PII in a request to a tracking or ad service.
Finding Sensitive Data in the Keyboard Cache (MSTG-STORAGE-5)
Several options for simplifying keyboard input are available to users. These options include autocorrection and spell
checking. Most keyboard input is cached by default, in /private/var/mobile/Library/Keyboard/dynamic-text.dat .
The UITextInputTraits protocol is used for keyboard caching. The UITextField, UITextView, and UISearchBar classes
automatically support this protocol and it offers the following properties:
var autocorrectionType: UITextAutocorrectionType determines whether autocorrection is enabled during typing.
When autocorrection is enabled, the text object tracks unknown words and suggests suitable replacements,
replacing the typed text automatically unless the user overrides the replacement. The default value of this
property is UITextAutocorrectionTypeDefault , which for most input methods enables autocorrection.
var secureTextEntry: BOOL determines whether text copying and text caching are disabled and hides the text
being entered for UITextField . The default value of this property is NO .
Static Analysis
384
Data Storage on iOS
Search through the source code for similar implementations, such as
textObject.autocorrectionType = UITextAutocorrectionTypeNo;
textObject.secureTextEntry = YES;
Open xib and storyboard files in the Interface Builder of Xcode and verify the states of Secure Text Entry and
Correction in the Attributes Inspector for the appropriate object.
The application must prevent the caching of sensitive information entered into text fields. You can prevent caching by
disabling it programmatically, using the textObject.autocorrectionType = UITextAutocorrectionTypeNo directive in the
desired UITextFields, UITextViews, and UISearchBars. For data that should be masked, such as PINs and
passwords, set textObject.secureTextEntry to YES .
UITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];
textField.autocorrectionType = UITextAutocorrectionTypeNo;
Dynamic Analysis
If a jailbroken iPhone is available, execute the following steps:
1. Reset your iOS device keyboard cache by navigating to Settings > General > Reset > Reset Keyboard Dictionary.
2. Use the application and identify the functionalities that allow users to enter sensitive data.
3. Dump the keyboard cache file dynamic-text.dat into the following directory (which might be different for iOS
versions before 8.0): /private/var/mobile/Library/Keyboard/
4. Look for sensitive data, such as username, passwords, email addresses, and credit card numbers. If the sensitive
data can be obtained via the keyboard cache file, the app fails this test.
With Needle:
[needle] > use storage/caching/keyboard_autocomplete
[needle] > run
[*] Checking connection with device...
[+] Already connected to: 142.16.24.31
[*] Running strings over keyboard autocomplete databases...
[+] The following content has been found:
DynamicDictionary-5
check
darw
Frida
frid
gawk
iasdasdt11
installdeopbear
Minh
mter
needle
openssl
openss
produce
python
truchq
wallpaper
DynamicDictionary-5
[*] Saving output to file: /home/phanvanloc/.needle/output/keyboard_autocomplete.txt
UITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];
textField.autocorrectionType = UITextAutocorrectionTypeNo;
385
Data Storage on iOS
If you must use a non-jailbroken iPhone:
1. Reset the keyboard cache.
2. Key in all sensitive data.
3. Use the app again and determine whether autocorrect suggests previously entered sensitive information.
Determining Whether Sensitive Data Is Exposed via IPC Mechanisms (MSTG-
STORAGE-6)
Overview
Inter Process Communication (IPC) allows processes to send each other messages and data. For processes that
need to communicate with each other, there are different ways to implement IPC on iOS:
XPC Services: XPC is a structured, asynchronous library that provides basic interprocess communication. It is
managed by launchd . It is the most secure and flexible implementation of IPC on iOS and should be the
preferred method. It runs in the most restricted environment possible: sandboxed with no root privilege escalation
and minimal file system access and network access. Two different APIs are used with XPC Services:
NSXPCConnection API
XPC Services API
Mach Ports: All IPC communication ultimately relies on the Mach Kernel API. Mach Ports allow local
communication (intra-device communication) only. They can be implemented either natively or via Core
Foundation (CFMachPort) and Foundation (NSMachPort) wrappers.
NSFileCoordinator: The class NSFileCoordinator can be used to manage and send data to and from apps via
files that are available on the local file system to various processes. NSFileCoordinator methods run
synchronously, so your code will be blocked until they stop executing. That's convenient because you don't have
to wait for an asynchronous block callback, but it also means that the methods block the running thread.
Static Analysis
The following section summarizes keywords that you should look for to identify IPC implementations within iOS source
code.
XPC Services
Several classes may be used to implement the NSXPCConnection API:
NSXPCConnection
NSXPCInterface
NSXPCListener
NSXPCListenerEndpoint
You can set security attributes for the connection. The attributes should be verified.
Check for the following two files in the Xcode project for the XPC Services API (which is C-based):
xpc.h
connection.h
Mach Ports
Keywords to look for in low-level implementations:
mach_port_t
mach_msg_*
386
Data Storage on iOS
Keywords to look for in high-level implementations (Core Foundation and Foundation wrappers):
CFMachPort
CFMessagePort
NSMachPort
NSMessagePort
NSFileCoordinator
Keywords to look for:
NSFileCoordinator
Dynamic Analysis
Verify IPC mechanisms with static analysis of the iOS source code. No iOS tool is currently available to verify IPC
usage.
Checking for Sensitive Data Disclosed Through the User Interface (MSTG-
STORAGE-7)
Overview
Entering sensitive information when, for example, registering an account or making payments, is an essential part of
using many apps. This data may be financial information such as credit card data or user account passwords. The
data may be exposed if the app doesn't properly mask it while it is being typed.
Masking sensitive data (by showing asterisks or dots instead of clear text) should be enforced.
Static Analysis
A text field that masks its input can be configured in two ways:
Storyboard In the iOS project's storyboard, navigate to the configuration options for the text field that takes sensitive
data. Make sure that the option "Secure Text Entry" is selected. If this option is activated, dots are shown in the text
field in place of the text input.
Source Code If the text field is defined in the source code, make sure that the option isSecureTextEntry is set to
"true". This option obscures the text input by showing dots.
sensitiveTextField.isSecureTextEntry = true
Dynamic Analysis
To determine whether the application leaks any sensitive information to the user interface, run the application and
identify components that either show such information or take it as input.
If the information is masked by, for example, asterisks or dots, the app isn't leaking data to the user interface.
Testing Backups for Sensitive Data (MSTG-STORAGE-8)
Overview
387
Data Storage on iOS
iOS includes auto-backup features that create copies of the data stored on the device. On iOS, backups can be made
through iTunes or the cloud (via the iCloud backup feature). In both cases, the backup includes nearly all data stored
on the device except highly sensitive data such as Apple Pay information and Touch ID settings.
Since iOS backs up installed apps and their data, an obvious concern is whether sensitive user data stored by the app
might accidentally leak through the backup. The answer to this question is "yes" - but only if the app insecurely stores
sensitive data in the first place.
How the Keychain Is Backed Up
When users back up their iOS device, the Keychain data is backed up as well, but the secrets in the Keychain remain
encrypted. The class keys necessary to decrypt the Keychain data aren't included in the backup. Restoring the
Keychain data requires restoring the backup to a device and unlocking the device with the users passcode.
Keychain items for which the kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly attribute is set can be decrypted only
if the backup is restored to the backed up device. Someone trying to extract this Keychain data from the backup
couldn't decrypt it without access to the crypto hardware inside the originating device.
The takeaway: If sensitive data is handled as recommended earlier in this chapter (stored in the Keychain or
encrypted with a key that's locked inside the Keychain), backups aren't a security issue.
Static Analysis
An iTunes backup of a device on which a mobile application has been installed will include all subdirectories (except
for Library/Caches/ ) and files in the app's private directory.
Therefore, avoid storing sensitive data in plaintext within any of the files or folders that are in the app's private
directory or subdirectories.
Although all the files in Documents/ and Library/Application Support/ are always backed up by default, you can
exclude files from the backup by calling NSURL setResourceValue:forKey:error: with the NSURLIsExcludedFromBackupKey
key.
You can use the NSURLIsExcludedFromBackupKey and CFURLIsExcludedFromBackupKey file system properties to
exclude files and directories from backups. An app that needs to exclude many files can do so by creating its own
subdirectory and marking that directory excluded. Apps should create their own directories for exclusion instead of
excluding system-defined directories.
Both file system properties are preferable to the deprecated approach of directly setting an extended attribute. All
apps running on iOS version 5.1 and later should use these properties to exclude data from backups.
The following is sample Objective-C code for excluding a file from a backup on iOS 5.1 and later:
- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString
{
NSURL* URL= [NSURL fileURLWithPath: filePathString];
assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);
NSError *error = nil;
BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]
forKey: NSURLIsExcludedFromBackupKey error: &error];
if(!success){
NSLog(@"Error excluding %@ from backup %@", [URL lastPathComponent], error);
}
return success;
}
The following is sample Swift code for excluding a file from a backup on iOS 5.1 and later:
388
Data Storage on iOS
func addSkipBackupAttributeToItemAtURL(filePath:String) -> Bool
{
let URL:NSURL = NSURL.fileURLWithPath(filePath)
assert(NSFileManager.defaultManager().fileExistsAtPath(filePath), "File \(filePath) doesn't exist")
var success: Bool
do {