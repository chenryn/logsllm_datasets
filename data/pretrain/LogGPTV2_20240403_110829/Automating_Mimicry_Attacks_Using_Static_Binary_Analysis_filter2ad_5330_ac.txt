ment, the content of the destination operand is replaced
by the right-hand side of the statement. In addition, the
program counter is advanced. In the case of an instruction
that does not change the control ﬂow of a program (i.e.,
an instruction that is not a jump or a conditional branch),
the program counter is simply advanced to the next in-
struction. Also, an unconditional jump to a certain label
(instruction) is performed exactly as in normal execution
by transferring control from the current statement to the
statement associated with the corresponding label.
Figure 4 shows the symbolic execution of a sequence of
instructions. In addition to the x86 machine instructions,
a corresponding fragment of C source code is shown. For
each step of the symbolic execution, the relevant parts
of the execution state are presented. Changes between
execution states are shown in bold face. Note that the
compiler (gcc 3.3) converted the multiplication in the
C program into an equivalent series of add machine in-
structions.
4.2 Conditional Branches and Loops
To handle conditional branches, the execution state has
to be extended to include a set of constraints, called the
path constraints. In principle, a path constraint relates a
symbolic expression L to a constant. This can be used, for
example, to specify that the content of a register has to be
equal to 0. More formally, a path constraint is a boolean
expression of the form L ≥ 0 or L = 0, in which L is an
integer polynomial over the symbols υ i. The set of path
constraints forms a linear constraint system.
The symbolic execution of a conditional branch statement
starts in a fashion similar to its normal execution, by eval-
uating the associated Boolean expression. The evalua-
tion is done by replacing the operands with their corre-
sponding symbolic expressions. Then, the inequality (or
equality) is transformed and converted into the standard
form introduced above. Let the resulting path constraint
be called q.
USENIX Association
14th USENIX Security Symposium
167
int i, j;
void f()
{
if (i > 42)
j = 1;
  else
}
j = 0;
 8048364:      cmpl   $0x2a,0x804958c
 804836b:      jle    8048379 
 804836d:      movl   $0x1,0x8049588
 8048377:      jmp    8048383 
 8048379:      movl   $0x0,0x8049588
 8048383:
eax:              v0
edx:              v1
8049588 (j):  v2
804958c (i):  v3
PC:           804836b
Path Condition:
Step 1
then continuation
Execution thread forks
else continuation
eax:              v0
edx:              v1
8049588 (j):  v2
804958c (i):  v3
eax:              v0
edx:              v1
8049588 (j):  1
804958c (i):  v3
eax:              v0
edx:              v1
8049588 (j):  1
804958c (i):  v3
eax:              v0
edx:              v1
8049588 (j):  v2
804958c (i):  v3
eax:              v0
edx:              v1
8049588 (j):  0
804958c (i):  v3
PC:           804836d
PC:           8048377
PC:           8048383
PC:           8048379
PC:           8048383
Path Condition:
(v3 - 42) >  0
Step 2a.
Path Condition:
(v3 - 42) >  0
Step 3a.
Path Condition:
(v3 - 42) >  0
Step 4a.
Path Condition:
(v3 - 42)  0
Step 2b.
Path Condition:
(v3 - 42)  0
Step 3b.
Figure 5: Handling conditional branches during symbolic execution.
To continue symbolic execution, both branches of the
control path need to be explored. The symbolic execution
forks into two “parallel” execution threads: one thread
follows the then alternative, the other one follows the
else alternative. Both execution threads assume the ex-
ecution state which existed immediately before the condi-
tional statement but proceed independently thereafter. Be-
cause the then alternative is only chosen if the conditional
branch is taken, the corresponding path constraint q must
be true. Therefore, we add q to the set of path constraints
of this execution thread. The situation is reversed for the
else alternative. In this case, the branch is not taken and q
must be false. Thus, ¬q is added to the path constraints in
this execution.
After q (or ¬q) is added to a set of path constraints,
the corresponding linear constraint system is immediately
checked for satisﬁability. When the set of path con-
straints has no solution, this implies that, independent of
the choice of values for the initial conﬁguration C, this
path of execution can never occur. This allows us to im-
mediately terminate impossible execution threads.
Each fork of execution at a conditional statement con-
tributes a condition over the variables υ i that must hold
in this particular execution thread. Thus, the set of path
constraints determines which conditions the initial execu-
tion state must satisfy in order for an execution to follow
the particular associated path. Each symbolic execution
begins with an empty set of path constraints. As assump-
tions about the variables are made (in order to choose be-
tween alternative paths through the program as presented
by conditional statements), those assumptions are added
to the set. An example of a fork into two symbolic execu-
tion threads as the result of an if-statement and the cor-
responding path constraints are shown in Figure 5. Note
that the if-statement was translated into two machine in-
structions. Thus, special code is required to extract the
condition on which a branch statement depends.
Because a symbolic execution thread forks into two
threads at each conditional branch statement, loops rep-
resent a problem. In particular, we have to make sure that
execution threads “make progress” to achieve our objec-
tive of eventually reaching the target address t. The prob-
lem is addressed by requiring that a thread passes through
the same loop at most three times. Before an execution
thread enters the same loop for the forth time, its execu-
tion is halted. Then, the effect of an arbitrary number of
iterations of this loop on the execution state is approxi-
mated. This approximation is a standard static analysis
technique [2, 13] that aims at determining value ranges
for the variables that are modiﬁed in the loop body. Since
the problem of ﬁnding exact ranges and relationships be-
tween variables is undecidable in the general case, the ap-
proximation naturally involves a certain loss of precision.
After the effect of the loop on the execution thread was
approximated, the thread can continue with the modiﬁed
state after the loop.
To approximate the effect of the loop body on an execu-
tion state, a ﬁxpoint for this loop is constructed. For our
purposes, a ﬁxpoint is an execution state F that, when
used as the initial state before entering the loop, is equiv-
alent to the ﬁnal execution state when the loop ﬁnishes. In
other words, after the operations of the loop body are ap-
168
14th USENIX Security Symposium
USENIX Association
int j, k;
  void f()
  {
int i = 0;
j = k = 0;
k = 1;    
if (i == 10)
  while (i 
...
8048394:       cmpl   $0x0,0x80495b4
804839b:       je        80483a9
804839d:       movl   $0x80484a4,(%esp,1)
80483a4:       call     80482a8
80483a9:
Path Constraint:
*0x80495b4 > 0
U
Jump Target Constraint:
*0x80495a4 == t
=
Linear Inequality System:
*0x80495b4 > 0
*0x80495a4 == t
Figure 7: Deriving an appropriate conﬁguration.
turn addresses, are of particular interest. Thus, whenever
the symbolic execution engine encounters such an instruc-
tion, it is checked whether it can be exploited.
An indirect jump (or call) can be exploited, if it is pos-
sible for the attacker to control the jump (or call) target.
In this case, it would be easy to overwrite the legitimate
target with the address t of the attacker code. To deter-
mine whether the target can be overwritten, the current
execution state is examined. In particular, the symbolic
expression that represents the target of the control trans-
fer instruction is analyzed. The reason is that if it were
possible to force this symbolic expression to evaluate to t,
then the attacker could achieve her goal.
Let the symbolic expression of the target of the control
transfer instruction be called st. To check whether it is
possible to force the target address of this instruction to
t, the constraint st = t is generated (this constraint sim-
ply expresses the fact that st should evaluate to the target
address t). Now, we have to determine whether this con-
straint can be satisﬁed, given the current path constraints.
To this end, the constraint st = t is added to the path
constraints, and the resulting linear inequality system is
solved.
If the linear inequality system has a solution, then the at-
tacker can ﬁnd a conﬁguration C (i.e., she can prepare the
environment) so that the execution of the application code
using this conﬁguration leads to an indirect jump (or call)
to address t. In fact, the solution to the linear inequal-
ity system directly provides the desired conﬁguration. To
see this, recall that the execution state is a function of the
initial state. As a result, the symbolic expressions are in-
teger polynomials over variables that describe the initial