2 \ 1
p
p
p
=
 is the difference between p2 and p1 
containing only those elements belonging to p2.  This is 
the ∇  that we have previously discussed. 
We assume we have identified another rootkit of p1 and 
call this p3.  We can identify this collection of programs 
as a rootkit of type p2 as follows: 
If 
1
3)
( '
3
p
p
p
p
=
∩
−
  then p3 contains the same 
elements as program p2 and is the same rootkit.   
If the preceding statement is not true but elements of p’ 
are contained in p3, written as 
3
'
p ∈ p
, than we can 
assume that p3 may be a modification of rootkit p2.  If 
there are no elements of p’ in p3, written as 
3
'
p ∉ p
, than 
we may assume that p3 is an entirely new rootkit.  We will 
follow these steps in order to classify the example kernel 
level rootkit that we will be examining.  We are 
examining numerous rootkits as a part of our research, 
however we only present the details of  a few example 
rootkits in this paper. 
3. Existing Methodologies to detect rootkits 
3.1 Methods to Detect Binary Rootkits 
Programs exist to check the integrity of critical system 
files.    There are several host based IDS tools that look at 
changes to the system files.  These programs take a 
snapshot of the trusted file system state and use this 
snapshot as a basis for future scans.  The system 
administrator must tune this system so that only relative 
files are considered in the snapshot.  Two such candidate 
systems are TRIPWIRE and AIDE (Advanced Intrusion 
Detection Environment) [10]. AIDE is a General Public 
License (GPL) program that is available for free on the 
Internet.  This program operates by creating a database of 
specified files.   This database contains attributes such as: 
permissions, inode number, user, group, file size, creation 
time (ctime), modification time (mtime),  access time 
(atime),  growing size and number of links [11].  
However, a program like AIDE does have shortcomings.  
Rami Lehti, in the Aide manual, states  ”Unfortunately, 
Aide cannot provide absolute sureness about changes in 
files.  Like any other system files, Aide’s  binary files 
and/or database can be altered” [11].  There is another 
free program that checks a system for rootkit detection.  
This program is known as chkrootkit [12].     
The chkrootkit program runs a shell script that checks 
specific system binaries to determine if a rootkit has been 
installed on the system.  This program also checks to see 
if the network interfaces on the computer have been set to 
promiscuous mode, which is a common ploy used by 
hackers in order to capture network traffic.  The program 
also checks the system logs.  The shell script is signature 
based, therefore the signature must be known in order to 
detect if a rootkit has been installed on a system.  
Programs such as chkrootkit may not detect a new rootkit, 
as well as modifications to existing rootkits. 
3.2 Methods to Detect Kernel Level Rootkits 
Samhain Labs [9] has developed a small command-line 
utility to detect the presence of a kernel level rootkit.   As 
we have previously explained, the kernel controls any 
application that is running on the computer.  If the 
application wants to access some system resource, such as 
reading to or writing from the disk, then the application 
must request this service from the kernel.  The application 
performs a sys_call passing control to the kernel which 
performs the requested work and provides the output to 
the requesting application.   A kernel level rootkit can 
modify these system calls to perform some type of 
malicious activity.  A sys_call in a system that has a 
kernel level rootkit installed may be redirected away from 
the legitimate sys_call to the rootkit’s replacement 
sys_call.   
It may be possible to detect the presence of a kernel 
level rootkit by comparing the sys_call addresses in the 
current system call table with the original map of kernel 
symbols that is generated when compiling the Linux 
kernel.  A difference between these two tables will 
indicate that something has modified the system call table 
[9].    It must be noted that each new installation of the 
kernel as well as the loading of a kernel module will result 
in a new mapping of kernel symbols.  The following 
figure (figure 2) shows the output of running the 
kern_check program on a system infected with the 
KNARK kernel level rootkit.   
Figure 2-kern_check output of KNARKed system 
The output indicates that the addresses of 8 sys_calls 
currently listed in the system call table currently stored in 
kernel memory (/dev/kmem) do not match the addresses 
for those sys_calls in the original map of the kernel 
symbols.  This map of kernel systems is available on the 
system we examined as /boot/System.map.    If the 
/boot/System.map file is up to date, then the system call 
table has most likely been modified by a kernel level 
rootkit.    A similar file should be available on other Linux 
systems. 
The kern_check program however, does not work with 
later versions of the Linux kernel.  The Linux 2.6 Kernel 
will no longer export the system call table address.  This 
was done to prevent race conditions from occurring with 
the dynamic replacement of system call addresses by 
loadable modules.   Red Hat has back ported this feature 
into later versions of the Linux 2.4 kernel available for 
Red Hat releases so that it does not export the system call 
table address.  This may also be the case for other Linux 
distributions.  As a result, the query_module command 
will no longer be able to retrieve the address of the system 
call table for some newer distributions of Linux utilizing 
the 2.4 kernel as well as in the Linux 2.6 kernel [13].   
In addition, the kern_check program developed by 
Samhain Labs is unable to detect kernel level rootkits that 
redirect the system call table.  We have modified the 
kern_check program, which is released under the GPL 
license, so that it is able to work even if the query_module 
capability is disabled as well as detect kernel level rootkits 
that redirect  the system call table.  We will subsequently 
address the details of these modifications. 
4. An Analysis of the SuckIT kernel level 
rootkit 
4.1 The SuckIT kernel level rootkit.  
The SuckIT rootkit was developed  by sd and devik 
based on the article they wrote in PHRACK vol. 58, 
article 7, titled “Linux–on-the-fly kernel patching without 
LKM”.   This article discusses a methodology for 
modifying the system calls within the Linux kernel 
without the use of LKM support or the /boot/System.map 
file [14].    Unlike kernel level rootkits that modify the 
system call table, this type of rootkit keeps the system call 
table intact.  An examination of the original system call 
table will not indicate that the system has been 
compromised by a kernel level rootkit.    The SuckIT 
kernel level rootkit accomplishes this by modifying the 
System Call Interrupt (system_call() function) that is 
triggered whenever a User Mode process invokes a system 
call [15].   The pointer to the normal system call table is 
changed to the address of the new system call table that is 
created by the SuckIT rootkit.  This new system call table 
contains the addresses of the malicious system calls that 
are modified by the SuckIT rootkit  as well as the original 
addresses of any unmodified system calls.  Our 
methodology retrieves the address of the system call table 
that is stored within the System Call Interrupt and checks 
this table for modifications.  Any modification to this 
table as well as a mismatch between this retrieved address 
and the address of the system call table that is maintained 
within the /boot/System.map file will also indicate that 
redirection of the system call table is occurring within the 
kernel.    
The following features are provided by SuckIT 
according to the README document for the most 
recently available version of the program.  The list of 
features is: 
• 
Hide PID’s, files, tcp/udp/raw sockets 
• 
Sniff TTY’s 
• 
Integrated TTY shell access (xor+sha1) 
invoked through any running service on a 
server 
• 
No requirement to compile program on the 
target system 
• 
Ability to use the same binary on the Linux 2.2 
and 2.4 kernel (libc-free) 
In our examination of the SuckIT source code we did 
not find the last two features to be true in some cases.   
We were testing against Red Hat 8.0 (kernel ver 2.4.18-
14) and the standard Linux 2.14.18 kernel.  There are 
compile problems with later versions of the Red Hat 
Linux 2.4 kernel and the fact that certain system call 
addresses are no longer being exported necessitated 
modifications to the SuckIT source code in order to get 
the program to work on later versions of the 2.4.18-14 
kernel.  We suspect that this will also be the case with the  
Linux 2.6 kernel.  These changes were not necessary for 
the standard Linux 2.14.18 kernel. 
We have conducted an in-depth analysis of the SuckIT 
source code and infection process.  This analysis is 
available in the appendix to this document.  This analysis 
provided us with the specific ∇  (delta) that can be used to 
characterize the SuckIT program.  We discussed the 
concept of ∇  in section II of this paper. 
4.2 Installation of SuckIT on a RH8.0 System 
We have installed the SuckIT rootkit on a Red Hat 8.0 
system in order to investigate current detection methods as 
well as to test the feasibility of our proposed methodology 
to detect  kernel level rootkits involving redirection of the 
system call table.   We have also installed the kdb kernel 
debugger on this system.  The installation of kdb required 
us to install the standard Linux 2.4.18 kernel as opposed 
to the kernel used with RH8.0, which is 2.4.18-14.    In 
order to install kdb, the kernel must be patched and 
recompiled.  The necessary patch files as well as 
instructions to accomplish this are available on the web.  
We then installed the current version of AIDE 
(Advance Intrusion Detection Environment v 0.9) file 
integrity checker program.  We configured AIDE to run 
integrity checks on the /bin, /boot, and /sbin directories. If 
the rootkit (SuckIT) changes any files in these directories 
we would expect AIDE to detect  the changed files.  We 
then ran AIDE on this system to initialize the signature 
database for future checks. 
We installed the most current version of the chkrootkit 
program (v 0.41, released 20 June 2003).  This version of 
chkrootkit  specifically states that its ability to we detect 
the SuckIT rootkit has been improved [20].  Therefore, we 
also expect that the SuckIt rootkit will be detected by 
chkrootkit.   
Before infecting the system with SuckIT we ran AIDE 
and chkrootkit on the clean system.  As expected, we did 
not detect the presence of an exploit with either program. 
  We infected the target system with the SUCKIT 
rootkit.  The initial install of the SuckIT rootkit failed to 
compile against the Linux 2.14.18 kernel.   We made 
changes to this code in order to be able to compile it.  We 
choose not to publish these changes but there is no 
guarantee that a newer version of SuckIT incorporating 
these changes is not already available in the hacker 
community.    The SuckIT rootkit cleanly installs on the 
target Linux 2.14.18 kernel with the modified code.  It is 
now possible to hide PID’s, files, and tcp/udp/raw sockets 
on this system , i.e.  the presence of these items will now 
be hidden from system utilities such as ls, ps, and ifconfig.  
We will now examine the results of running some of the 
various GPL software tools that are available in order to 
detect the presence of a rootkit on the target system.   
4.3   chkrootkit results on target system 
Running the chkrootkit program on a system infected 
with SuckIT system does not detect the presence of the 
SuckIT rootkit even if the default values are selected for 
the hidden directory (/usr/share/locale/sk/.sk12) and the 
file hiding string (sk12).  This program only detects the 
possible presence of a lkm (loadable kernel module) 
rootkit by detecting a mismatch between the ps command 
and a listing of PID’s in the /proc directory.  SuckIT does 
not use loadable kernel modules to compromise the 
kernel.  Running chkrootkit on the infected system will 
only indicate that some form of kernel level rootkit may 
be installed.  There is no indication of a specific type of 
rootkit being installed on the target system.  The following 
figure shows the chkrootkit results on the target system 
infected with SuckIT.    Note that the presence of the 
SuckIT rootkit is not detected (item 2 on list in figure). 
Figure 3 -chkrootkit results on SuckIT infected system 
It is significant to note that the chkrootkit program does 
detect the presence of the SuckIT rootkit only after this 
rootkit is uninstalled from the target system.  Traces of the 
SuckIT rootkit can be detected when the rootkit is no 
longer running on the target system. Our analysis indicates 
that this is due to the redirection capabilities of SuckIT.  
Upon installation, SuckIT creates a new /sbin/init file after 
copying over the original /sbin/init file to a file named 
/sbin/init .   While the SuckIT rootkit 
is installed on the target system, any reference to the 
/sbin/init file will be passed the /sbin/init file, which is the original /sbin/init file.  In 
addition, the /sbin/init file, as well as 
any other files with the  appended to 
their filenames, will remain hidden from the ls directory 
listing command.  
4.4 AIDE results on the target system  
The AIDE program does not detect the presence of the 
SUCKIT rootkit.  The AIDE program does detect that 
attributes to the /sbin/telinit file have changed.  The 
/sbin/telinit file is a link to the /sbin/init file.  The /sbin 
directory is a directory that SuckIT targets in the 
installation of the rootkit, but the AIDE program does not 
indicate that the system is infected with SuckIT or with a 
kernel level rootkit.  Nor does the AIDE program detect 
that the kernel of the target system was modified.  The 
AIDE program does not indicate in any way that a  
redirection of the system call table is occurring on the 
target system or that the kernel has been compromised.  
These are the type of results that we would expect from a 
file integrity check program, i.e., it may be able to tell you 
that some files have changed, but not what has caused 
these changes to occur.    This type of result motivated us 
to invent an approach that would tell one what type of 
rootkit is present as well as what new or modified 
characteristics are present.   We believe that this will 
allow the security community to react faster to new rootkit 
exploits. 
The following figure shows the output of running the 
AIDE program on the target system that has been infected 
with the SuckIT rootkit. 
Figure 4 - AIDE results on SuckIT infected system 
4.5 kern_check results on the target system 
The version of kern_check available from Samhain labs 
does not detect the presence of the SuckIT rootkit on the 
target system.    Samhain labs do state that the kern_check 
program is not capable of detecting the SuckIT rootkit [9].   
4.6 Ability of current GPL programs to detect 
and characterize kernel level rootkit exploits 
The current GPL programs that we examined have a 
limited capability to detect instances of kernel level 
rootkits and none were able to detect that our system was 
infected with the SuckIT rootkit.  In some cases these 
tools were able to tell us that something suspicious had 
happened on the system but they were unable to provide 
us with specific details of what had happened to the 
system.   We will present our methodology for detecting 
rootkits of this type in the next section of this paper.  Our 