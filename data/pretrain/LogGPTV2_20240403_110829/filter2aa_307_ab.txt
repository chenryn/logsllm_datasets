### 2.1 Definition of ∇ (Delta)

The difference between \( p_2 \) and \( p_1 \), denoted as \( \nabla \), is defined as the set of elements that belong to \( p_2 \) but not to \( p_1 \). This concept, which we have previously discussed, can be mathematically expressed as:

\[
\nabla = p_2 - p_1
\]

We assume that we have identified another rootkit in \( p_1 \) and call this \( p_3 \). We can classify \( p_3 \) as a rootkit of type \( p_2 \) using the following criteria:

- If \( p_3 = p_2 \cap (p_2 - p_1) \), then \( p_3 \) contains the same elements as \( p_2 \) and is therefore the same rootkit.
- If the above condition is not met but some elements of \( p' \) (a subset of \( p_2 \)) are contained in \( p_3 \), i.e., \( p' \in p_3 \), then \( p_3 \) may be a modified version of \( p_2 \).
- If no elements of \( p' \) are in \( p_3 \), i.e., \( p' \notin p_3 \), then \( p_3 \) is likely an entirely new rootkit.

We will follow these steps to classify the example kernel-level rootkit we will be examining. Our research involves the examination of numerous rootkits, but we will only present the details of a few example rootkits in this paper.

### 3. Existing Methodologies to Detect Rootkits

#### 3.1 Methods to Detect Binary Rootkits

Several programs exist to check the integrity of critical system files. Host-based Intrusion Detection Systems (IDS) tools, such as TRIPWIRE and AIDE (Advanced Intrusion Detection Environment), monitor changes to system files by taking snapshots of the trusted file system state. The system administrator must configure these systems to consider only relevant files. AIDE, a free General Public License (GPL) program, creates a database of specified files, including attributes such as permissions, inode number, user, group, file size, creation time (ctime), modification time (mtime), access time (atime), growing size, and number of links [11].

However, AIDE has limitations. Rami Lehti, in the AIDE manual, states, "Unfortunately, Aide cannot provide absolute sureness about changes in files. Like any other system files, Aide's binary files and/or database can be altered" [11]. Another free program for rootkit detection is chkrootkit [12], which runs a shell script to check specific system binaries and network interfaces for signs of rootkit installation. Chkrootkit also checks system logs and is signature-based, meaning it requires known signatures to detect rootkits. However, it may not detect new or modified rootkits.

#### 3.2 Methods to Detect Kernel-Level Rootkits

Samhain Labs [9] developed a command-line utility, `kern_check`, to detect kernel-level rootkits. The kernel controls all applications running on the computer. When an application requests a system resource, it performs a system call, passing control to the kernel, which performs the requested work and returns the output. A kernel-level rootkit can modify these system calls to perform malicious activities, redirecting them to the rootkit's replacement system calls.

`kern_check` detects kernel-level rootkits by comparing the current system call table with the original map of kernel symbols generated during Linux kernel compilation. A mismatch indicates potential modification by a rootkit [9]. However, each new kernel installation or module loading results in a new mapping of kernel symbols. Figure 2 shows the `kern_check` output for a system infected with the KNARK kernel-level rootkit.

**Figure 2: `kern_check` Output for a KNARK-Infected System**

The output shows that the addresses of 8 system calls in the current system call table do not match those in the original map of kernel symbols. If the `/boot/System.map` file is up to date, the system call table has likely been modified by a kernel-level rootkit. However, `kern_check` does not work with later versions of the Linux kernel, such as Linux 2.6, which no longer exports the system call table address to prevent race conditions. Red Hat has backported this feature into later versions of the Linux 2.4 kernel, making `kern_check` ineffective for some newer distributions.

We have modified `kern_check` to work even if the `query_module` capability is disabled and to detect kernel-level rootkits that redirect the system call table. These modifications will be detailed subsequently.

### 4. Analysis of the SuckIT Kernel-Level Rootkit

#### 4.1 The SuckIT Kernel-Level Rootkit

SuckIT was developed by sd and devik based on their PHRACK article, "Linux–on-the-fly kernel patching without LKM" [14]. Unlike other kernel-level rootkits that modify the system call table, SuckIT keeps the table intact and instead modifies the System Call Interrupt (`system_call()` function). This function is triggered when a User Mode process invokes a system call. SuckIT changes the pointer to the normal system call table to the address of a new system call table created by the rootkit, containing both malicious and unmodified system calls. Our methodology retrieves the address of the system call table from the System Call Interrupt and checks for modifications.

According to the README document for the most recent version of SuckIT, its features include:
- Hiding PIDs, files, and TCP/UDP/raw sockets
- Sniffing TTYs
- Integrated TTY shell access (xor+sha1) invoked through any running service on a server
- No requirement to compile the program on the target system
- Ability to use the same binary on Linux 2.2 and 2.4 kernels (libc-free)

In our testing against Red Hat 8.0 (kernel version 2.4.18-14) and the standard Linux 2.4.18 kernel, we found that the last two features were not always true. Compilation issues and the lack of exported system call addresses required modifications to the SuckIT source code. These changes were not necessary for the standard Linux 2.4.18 kernel.

Our in-depth analysis of the SuckIT source code and infection process, available in the appendix, provided the specific ∇ (delta) to characterize the SuckIT program, as discussed in Section II.

#### 4.2 Installation of SuckIT on a Red Hat 8.0 System

We installed SuckIT on a Red Hat 8.0 system to test current detection methods and our proposed methodology for detecting kernel-level rootkits involving system call table redirection. We also installed the kdb kernel debugger, requiring the standard Linux 2.4.18 kernel. We then installed AIDE (version 0.9) to run integrity checks on the `/bin`, `/boot`, and `/sbin` directories. AIDE was initialized to create a signature database for future checks.

We also installed the latest version of chkrootkit (v0.41, released June 20, 2003), which claims improved SuckIT detection capabilities [20]. Before infecting the system, we ran AIDE and chkrootkit, which did not detect any exploits. After installing SuckIT, we were able to hide PIDs, files, and TCP/UDP/raw sockets, making them invisible to system utilities like `ls`, `ps`, and `ifconfig`.

#### 4.3 chkrootkit Results on the Target System

Running chkrootkit on the SuckIT-infected system did not detect the rootkit, even with default settings. Chkrootkit only detected a possible kernel-level rootkit by identifying a mismatch between the `ps` command and the PID listing in the `/proc` directory. The following figure shows the chkrootkit results on the SuckIT-infected system.

**Figure 3: chkrootkit Results on SuckIT-Infected System**

Interestingly, chkrootkit detected traces of SuckIT after the rootkit was uninstalled. Our analysis suggests this is due to SuckIT's redirection capabilities. Upon installation, SuckIT creates a new `/sbin/init` file, renaming the original to `/sbin/init.old`. While SuckIT is installed, references to `/sbin/init` are redirected to the original `/sbin/init.old`, and the new `/sbin/init` remains hidden from the `ls` command.

#### 4.4 AIDE Results on the Target System

AIDE did not detect the presence of SuckIT but noted changes to the `/sbin/telinit` file, a link to `/sbin/init`. AIDE did not indicate that the system was infected with SuckIT or a kernel-level rootkit, nor did it detect kernel modifications. These results highlight the need for a more sophisticated approach to detect and characterize rootkits, which we will present in the next section.

**Figure 4: AIDE Results on SuckIT-Infected System**

#### 4.5 kern_check Results on the Target System

The `kern_check` tool from Samhain Labs did not detect the SuckIT rootkit on the target system, consistent with their statement that `kern_check` is not capable of detecting SuckIT [9].

#### 4.6 Ability of Current GPL Programs to Detect and Characterize Kernel-Level Rootkits

The current GPL programs we examined have limited capabilities in detecting kernel-level rootkits and none could detect the SuckIT rootkit. While they sometimes indicated suspicious activity, they failed to provide specific details. In the next section, we will present our methodology for detecting and characterizing rootkits of this type.