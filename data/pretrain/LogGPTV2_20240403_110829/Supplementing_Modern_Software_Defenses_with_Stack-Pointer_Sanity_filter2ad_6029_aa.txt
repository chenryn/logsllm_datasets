title:Supplementing Modern Software Defenses with Stack-Pointer Sanity
author:Anh Quach and
Matthew Cole and
Aravind Prakash
Supplementing Modern Software Defenses with Stack-Pointer
Sanity
Anh Quach, Matthew Cole, Aravind Prakash
Binghamton University
{aquach1,mcole8,aprakash}@binghamton.edu
ABSTRACT
The perpetual cat-and-mouse game between attackers and software
defenders has highlighted the need for strong and robust security.
With performance as a key concern, most modern defenses focus
on control-flow integrity (CFI), a program property that requires
runtime execution of a program to adhere to a statically deter-
mined control-flow graph (CFG). Despite its success in preventing
traditional return-oriented programming (ROP), CFI is known to
be ineffective against modern attacks that adhere to a statically
recovered CFG (e.g., COOP).
This paper introduces stack-pointer integrity (SPI) as a means
to supplement CFI and other modern defense techniques. Due to its
ability to influence indirect control targets, stack pointer is a key
artifact in attacks. We define SPI as a property comprising of two
key sub-properties - Stack Localization and Stack Conservation - and
implement a LLVM-based compiler prototype codenamed SPIglass
that enforces SPI. We demonstrate a low implementation overhead
and incremental deployability, two of the most desirable features for
practical deployment. Our performance experiments show that the
overhead of our defense is low in practice. We opensource SPIglass
for the benefit of the community.
ACM Reference Format:
Anh Quach, Matthew Cole, Aravind Prakash. 2017. Supplementing Modern
Software Defenses with Stack-Pointer Sanity. In Proceedings of ACSAC 2017.
ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3134600.3134641
1 INTRODUCTION
Software attacks that compromise and hijack control-flow continue
to be a real and existential threat. Widely deployed hardware mech-
anisms that prevent data execution (DEP/NX) have given rise to
modern “code-reuse" attacks, i.e., attacks that reuse existing code
to accomplish malice [35]. Return-oriented programming (ROP)
is an example of code-reuse attack wherein an attacker executes
a carefully selected sequence of “gadgets". A gadget is a short se-
quence of instructions terminated by an indirect branch instruction
(e.g., ret). A popular form of defense against modern attacks in-
volves embedding software with security primitives in an effort to
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. Copyrights for components of this work owned by others than the 
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or 
republish, to post on servers or to redistribute to lists, requires prior specific permission 
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12. . . $15.00
https://doi.org/10.1145/3134600.3134641
harden programs and render them attack resilient. Enforcing pro-
gram integrity properties, especially control-flow integrity (CFI [3])
through inlined reference monitors is a well-studied and estab-
lished defense technique. CFI requires the runtime execution of a
program to adhere to a statically determined control-flow graph
(CFG). CFI-based solutions that operate on both source code [3, 39]
and binary [17, 31, 44, 45] have been proposed.
Practical CFI-based defenses are known to suffer from the fol-
lowing limitations: (1) Lack of a precise CFG: indirect branches
in a program make full CFG determination hard, if not impossi-
ble [34, 41]. Without a complete CFG, defenses compute an approx-
imate CFG containing redundant forward and reverse edges [45].
These redundancies result in attack space. (2) Lack of temporal
sensitivity: while the CFG captures what control transitions are
legal, it does not reflect when those transitions are legal. These
limitations are exasperated by practical considerations like sup-
port for incremental deployment, support for dynamically loaded
modules, etc. (3) Data hiding problem: meta-data based solutions
including the shadow stack solutions depend on integrity of the
shadow stack. That is, their success depends on effective hiding of
data in the memory. However, hiding data in user space is hard [27]
and an open research problem. Other approaches for shadow stack
either require special hardware or incur significant performance
overhead.
By abusing the limitations of practical CFI, recent attacks in-
cluding Counterfeit Object-Oriented Programming (COOP [20, 36])
and Printf-Oriented Programming [8] demonstrate that even so-
phisticated defenses can be successfully evaded. While more recent
defensive efforts have focused on improving the performance of
practical CFI, Carlini et al. [8] show that even fully-precise static
CFI solutions can be defeated. In essence, a solution with strong
and robust security is more useful than well-performing solution
lacking in security.
In this paper, we approach defense from a fundamentally differ-
ent, yet complimentary point of view when compared to traditional
control-flow-based defenses. We note that attacks often abuse stack
and violate its intended use. Particularly, attacks violate the in-
tegrity of stack pointer, so we focus our defense around sanity of
stack pointer. A key difference between our approach and CFI is
that we do not seek to monitor the control flow of the program,
whereas we seek to enforce legal use of stack pointer. By doing
so, our solution can not only operate as a standalone solution, but
also cooperate with existing CFI-based defenses, and enhance the
overall security.
We define Stack-Pointer Integrity (SPI) as a program property
that captures the intended movement of stack pointer, and design
a system that enforces this property. Shifting perspective from
116instruction-pointer-centric defense (CFI) to stack-pointer-centric
defense (SPI) presents multiple advantages.
(1) Unlike flow of control, flow of stack pointer is well defined,
and we are therefore not constrained by completeness and
precision of the CFG.
(2) Rules that govern the movement of stack pointer are inde-
pendent of the location of data/code in the memory. As such,
SPI does not depend on address-space layout randomization
(ASLR).
(3) Unlike solutions that focus on integrity of stack content [9],
SPI focuses on integrity of the stack pointer. By doing so, we
lessen the performance penalties incurred in validating the
stack contents.
(4) Finally, SPI and CFI are orthogonal solutions, and can com-
plement each other to provide strong defense.
We develop the SPI policy for programs executing on the x86 ar-
chitecture and implement a prototype system codenamed SPIglass.
SPIglass is an LLVM-based compiler that instruments programs
with SPI checks that are performed during runtime. We also pro-
vide techniques to enable interoperability between protected and
unprotected modules.
Can SPI defeat all code-reuse attacks? Although SPIglass can
thwart several practical code-reuse attacks on its own, it is designed
to supplement practical CFI implementations to provide stronger
security. This is particularly important given that most practical
CFI efforts have been defeated [8].
Our contributions can be summarized as follows:
(1) We define Stack-Pointer Integrity (SPI) as a program property
that complements CFI and comprises of two sub-properties
Stack Localization and Stack Conservation.
(2) We implement SPIglass, a LLVM-based prototype that imple-
ments SPI. SPIglass can defeat modern code-reuse attacks,
including COOP.
(3) We evaluate SPIglass, and show low execution overhead and
reasonable memory overhead.
(4) We opensource our implementation of SPIglass to aid in
future research and development1.
2 TECHNICAL BACKGROUND
During a code-reuse attack, the attacker repeatedly executes the
ULB sequence: Update the processor state, Load the address of next
gadget into instruction pointer, and Branch to it. Depending on
whether or not the stack pointer is used in ULB sequence, code-
reuse attacks can be divided into two categories.
2.1 Attacks that Use Stack Pointer for ULB
Sequence
Due to the availability of multiple instructions (e.g., push, pop)
that update the stack pointer and the ready availability of ret
instruction that loads and branches to the address at the top of stack,
stack pointer is widely used in ULB sequences. These are the most
common ROP attacks wherein the stack pointer assumes the role of
instruction pointer. An example of such an attack can be found in
1The source code is available at https://github.com/bingseclab/spiglass
Figure 1. First, an attacker injects a payload that contains interleaved
code pointers and data. Each pointer points to a gadget, and the
sequence of gadgets together accomplish malicious computation.
Next, the attacker exploits the vulnerability, and obtains control
of the instruction pointer. The attacker utilizes a special gadget
(Gadget 0 in Figure 1) to position the stack pointer to the base of the
injected payload, i.e., RSP2 to RSP3. This step, called stack pivoting,
transitions execution into the ROP domain. The gadget used to
pivot is called a pivot gadget. Finally, the ret instruction in the
pivot gadget triggers the execution of the remaining gadgets in the
payload. In Figure 1, the control flow is represented as a solid arrow
whereas the movement of stack pointer is represented as a dashed
arrow.
Stack pivoting. Stack pivoting positions the stack pointer to the
base of the injected payload. Instructions that alter the stack pointer
are called ‘SP-Update’ instructions [32]. They are divided into ex-
plicit SP-update instructions or instructions that explicitly alter the
stack pointer (e.g., mov rax, rsp; add rsp, 0x10;), and implicit
SP-update instructions that alter the stack pointer as an implicit ef-
fect of another operation (e.g., pop rax; ret;). Explicit SP-update
instructions are further divided into absolute (e.g., mov rax, rsp;)
and relative (e.g., add rsp, 0x10) SP-update instructions.
A stack pivot gadget comprises of an SP-update instruction fol-
lowed by an indirect branch instruction. Depending on the location
of payload, one of two forms of pivoting can occur:
(1) Inter-segment pivoting: the payload is located in a writable
segment other than the stack (usually heap).
(2) Intra-stack pivoting: the payload is located on the stack seg-
ment. Typically, the attacker injects payload into the local
variables/arrays of a function. For example, in Figure 3, the
array in F6 is used to store user input, which contains the pay-
load. Here, pivot gadget displaces the stack pointer within
the stack segment.
Mobility of the stack pointer depends on the specific SP-update
instruction in the gadget. Absolute SP-update instructions offer
the attacker with an ability to initialize the stack pointer with
an arbitrary value, and are therefore most favorable for pivoting.
Relative SP-update instructions move the stack pointer by fixed
offsets, and therefore offer moderate mobility. Implicit SP-update
instructions move the stack pointer by small offsets, offer least
mobility, and are least useful for pivoting.
2.2 Attacks that Do Not Use Stack Pointer for
ULB Sequence
While stack pointer is commonly used in ULB sequence, it can be
abused in other ways. COOP [36] is an exemplar of code-reuse
attack without stack pivoting. It is a C++-based attack that takes
advantage of the dynamic dispatch mechanism in C++, and reuses
entire virtual functions as gadgets. Virtual functions in C++ are
dispatched using VTable—a per-object table that contains all the
polymorphic functions an object can invoke. COOP reuses a special
type of gadget called main-loop gadget that executes a single virtual
function on an array of objects. By injecting carefully ordered
and potentially overlapping array of fake objects that point to
117Figure 1: Movement of stack pointer in attacks that use stack pointer for ULB sequence. Stack grows downwards.
fake VTables in the victim memory, COOP achieves arbitrary code
execution. We refer the readers to [36] for more details.
store and retrieve return address from the stack, and therefore
update the stack pointer.
Save/Restore registers. Depending on the calling convention, cer-
tain registers (rbx, rbp, r12-r15 on Linux x86-64) are saved on the
stack by the callee and restored before returning to the caller. The
push and pop instructions are typically used to save/restore regis-
ters. Registers are saved before allocation of a function frame and
restored after deallocation of the frame.
Frame allocation and deallocation. Local variables are allocated
within the function frame on the stack. Allocation and dealloca-
tion are typically achieved using relative SP-update instructions
by moving the stack pointer by a fixed offset along and against the
direction of stack growth respectively (e.g., sub rsp, 0x10; add
rsp, 0x10).
Dynamic frame allocation and deallocation. Absolute SP-update
instructions are used to restore the stack pointer with a previously
saved value when the size of a stack frame is not known during
compilation, or during irregular flows like longjmp, exceptions, etc.
These are rarely encountered.
3 THREAT MODEL AND ASSUMPTIONS
We accommodate a highly capable attacker with full knowledge of
the loaded modules and the gadgets within—with or without ASLR
enabled. We assume that the attacker is able to generate a payload
comprising of potentially large call-preceded and function-entry
gadgets such that known defenses (e.g., [44, 45]) can be bypassed. In
a call-preceded gadget, the gadget is preceded by a call instruction
and forms a valid backward-edge for return instructions in the CFG.
A function-entry gadget begins at the entry point to a function and
is a valid forward-edge for indirect call instructions [18]. Further,
the attacker is able to inject payload into the vulnerable program,
and has the capability to exploit a vulnerability in a program and
achieve arbitrary code execution. Because the payload may be in-
jected on the stack, modern defenses against stack-pivoting [32]
can be successfully bypassed. We also assume that the attacker
is unable to execute unintended instructions (i.e., instructions ob-
tained by offsetting into legitimate instructions). Finally, all gadgets
- including a potential pivoting gadget - are not only sequence
of intended instructions, but also call-preceded or function-entry
gadgets. Note that multiple efforts that focus on elimination of
Figure 2: Stack realignment in COOP (32 bit). In this exam-
ple, the virtual function that is called in the main-loop gad-
get accepts one argument. ESPBef or e and ESPAf ter represent
values of stack pointer before and after the execution of gad-
gets. Stack grows downwards.
Consider Figure 2, a mismatch in the number of arguments ac-
cepted by the gadgets versus number of arguments supplied at
the invocation site in the main-loop gadget will result in a mis-
alignment of stack pointer before and after the call to gadget (refer
Figure 7 in [36] for details). This is particularly a problem in 32-bit
environment where all the arguments are passed on the stack.
The values of the stack pointer before (ESPBef or e) and after
(ESPAf ter ) invocation of gadgets with 0, 1 and 2 arguments are
shown in Figure 2. In order to prevent stack corruption, the attack
must either restrict the gadgets to only those functions that accept
the same number of arguments that are supplied at the invoca-
tion site, or accommodate compensatory gadgets that realign the
stack pointer after each misalignment—e.g., gadget that accepts
2 arguments followed by gadget that accepts no arguments. The
former choice greatly reduces the number of gadgets available to
accomplish the attack, therefore COOP uses the latter technique to
align the stack pointer.
2.3 Stack Pointer Updates in Benign Execution
Below, we list common operations that alter the stack pointer during
benign execution, and the instructions used to accomplish them.
Control-transition using call-ret. Implicit SP-update instruc-
tions call and ret, and their variants (e.g., retn) automatically
F3F4Exploit in F4()Stack FramesPivot OperationGadget 0:xchg rax, rspretGadget 1:mov rax, rbxretGadget 2:pop rcx, pop rdxadd rax, [rcx]retGadget 3:...F3()F4()RSP0RSP1RSP2...&Gadget 3DataData&Gadget 2&Gadget 1Payload on Heap/StackRSP3RSP4ESPBeforeMain Loop Gadget’s FrameESPAfter Gadget(x)ESPAfter Gadget()ESPAfter Gadget(x,x)118Performance: Verifying the stack pointer values before and after a
function execution by utilizing a shadow stack is a potential solution
to enforce P2. Shadow-stack based solutions are well studied [12]
in the context of CFI. However, the shadow stack must be protected,
and updates to the shadow stack must be monitored in order to
prevent corruption. Hiding a shadow stack in user space is most
performance-friendly, yet hiding data in user space is hard [27]. If
the attacker can locate the shadow stack, she or he may be able to
corrupt it and evade the security mechanism.
Figure 4: Function frames generated by SPIglass for F7() and
F8(), small and large function frames respectively. A dummy
variable is inserted in order to prevent allocation of a local
variable at the n-byte boundary.
We make a memory-to-security trade off and improve security
at the cost of memory. Cost of memory has steadily reduced over
the decades. Memory overhead is more tolerable than runtime per-
formance overhead imposed by a security solution. Because the stack
pointer is indicative of the function frame allocation and deallo-
cation, movement of stack pointer can be greatly controlled by
adjusting the sizes of function stack frames. Specifically, if the size
of each function stack frame were n-byte aligned, then legal stack
pointer values must also be n-byte aligned. Using compiler mod-
ifications, we force the stack frame of each function to be n-byte
aligned by sanitizing the stack pointer after each explicit SP-update
instruction in the module. Further, we reserve n-byte aligned lo-
cations in functions with frames larger than n bytes by inserting
a dummy variable. This ensures that no legal variables are allo-
cated at aligned addresses. We sanitize the dummy variables to
disrupt possible attacks that overflow into the dummy variable.