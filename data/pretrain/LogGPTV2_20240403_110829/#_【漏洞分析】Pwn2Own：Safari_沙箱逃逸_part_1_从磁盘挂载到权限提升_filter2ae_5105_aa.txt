# 【漏洞分析】Pwn2Own：Safari 沙箱逃逸(part 1)从磁盘挂载到权限提升
|
##### 译文声明
本文是翻译文章，文章来源：phoenhex.re
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[ **bllca**](http://bobao.360.cn/member/contribute?uid=102574511)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**前言**
今天我们带来 [CVE-2017-2533](https://support.apple.com/en-us/HT207797) /
[ZDI-17-357](http://www.zerodayinitiative.com/advisories/ZDI-17-357/)，利用 macOS
系统服务中的条件竞争漏洞来提升权限。同时在此次 Pwn2Own 大赛中，我们还会组合多个漏逻辑洞来完成沙箱逃逸。
该漏洞主要存在于 [Disk
Arbitration](https://developer.apple.com/library/content/documentation/DriversKernelHardware/Conceptual/DiskArbitrationProgGuide/Introduction/Introduction.html)（系统挂载通知服务）后台服务中，该服务主要用于管理
macOS 的磁盘挂载操作。比较有趣的是，尽管是处于沙盒模式的 Safari ，也能通过 [IPC
接口](https://developer.apple.com/documentation/diskarbitration)访问该服务。通过利用该漏洞，我们可以挂在某些未受
SIP 策略保护的目录，而幸运的是，在新版的 MacBook （译者未验证具体几年的版本）当中，存在一个 FAT32
分区，该分区主要用于磁盘恢复，而普通用户对该分区具有写权限。因此，我们可以通过该漏洞操作可写分区，最后完成权限提升。
**漏洞分析**
通过之前的 [Safari
渲染引擎](https://phoenhex.re/2017-06-02/arrayspread)漏洞，我们成功达到[命令执行](https://phoenhex.re/2017-05-04/pwn2own17-cachedcall-uaf)的目的。而进一步的，是想办法提升当前用户的权限。通过审计沙箱配置中的 mach-lookup 选项（mach-lookup
指令用于指定沙箱可访问的服务），我们尝试寻找 Safari 可以访问的服务进程，Safari 主要用过 IPC 接口与进程进行通信，该规则位于
/System/Library/Frameworks/WebKit.framework/Versions/A/Resources/com.apple.WebProcess.sb
文件中：
    (allow mach-lookup
           (global-name "com.apple.DiskArbitration.diskarbitrationd")
           (global-name "com.apple.FileCoordination")
           (global-name "com.apple.FontObjectsServer")
           ...
如上面部分规则，Disk Arbitration 立马引起我们的重视，该服务位于 Apple 框架中，主要用于管理块设备（block
devices），对设备提供基础的挂载和卸载操作，diskarbitrationd 服务主要负责分发 IPC
请求。匪夷所思，为啥浏览器渲染引擎需要挂载磁盘？于是我们以此为突破口对相关代码和进程行为进行审计。
    $ ps aux | grep diskarbitrationd | grep -v grep
    root                86   0.0  0.0  2494876   2132   ??  Ss   Wed10AM   0:00.37 /usr/libexec/diskarbitrationd
    $ sudo launchctl procinfo $(pgrep diskarbitrationd) | grep sandboxed
    sandboxed = no
首先，和预期一样，diskarbitrationd 服务运行于 root 上下文中（主要是为了执行 mount
系统调用），并未受沙箱保护。为了进行全面验证，我们使用 Swift 编写了一个验证程序，并使用com.apple.WebProcess.sb
规则将程序运行于沙箱中，确实能正常访问该服务。因此，diskarbitrationd
服务非常适合作为利用的场景，于是我们开始着手对源码进行审计，旧版本源码可以从 [Apple
源码仓库](https://opensource.apple.com/tarballs/DiskArbitration/DiskArbitration-288.1.1.tar.gz)
下载。
当我尝试寻找内存损坏（memory corruption）漏洞时，在 DARequest.c 的代码实现中发现了有趣的东西，第 510
行（这里没有行号23333）：
        /*
         * Determine whether the mount point is accessible by the user.
         */
        if ( DADiskGetDescription( disk, kDADiskDescriptionVolumePathKey ) == NULL )
        {
            if ( DARequestGetUserUID( request ) )
            {
                CFTypeRef mountpoint;
                mountpoint = DARequestGetArgument2( request );
                // [...]
                if ( mountpoint )
                {
                    char * path;
                    path = ___CFURLCopyFileSystemRepresentation( mountpoint );
                    if ( path )
                    {
                        struct stat st;
                        if ( stat( path, &st ) == 0 )
                        {
                            if ( st.st_uid != DARequestGetUserUID( request ) )
                            {
                                // [[ 1 ]]
                                status = kDAReturnNotPermitted;
                            }
                        }
此处代码的实现，主要是用于防止用户将分区挂载到没有权限的目录，例如 /etc、/System
等。阅读此处代码，大致实现流程如下：首先，如果挂载点已经存在，但是不属于某个用户，则返回 kDAReturnNotPermitted
错误代码，相反则正常进行挂载。而在此之后，并没有任何安全机制对操作进行验证，于此同时，由于 diskarbitrationd 服务位于 root
上下文，因而我们可以对没有受 [SIP](https://support.apple.com/en-us/HT204899) 保护的目录进行任意操作。
那么漏洞存在哪里？其实这里存在一个条件竞争问题，即安全检查时间 vs. 挂载时间（time of check vs. time of
use）：如果挂载点在检查之后，磁盘挂载之前创建，则不会进入权限检验流程，而在绕过检测流程后，也就是，我们在挂载流程进入之前，创建一个软链接指向任意目录，最终对目标目录进行挂载。
Apple 团队已经在 macOS Sierra 10.12.5
中发布了最新更新补丁，但是源码暂时还未公布到仓库。后续我们将会更新本文的代码，对此进行比较。
**构建 PoC**
整理一下思路，我们使用伪代码来演示，如何利用该漏洞将任意设备挂载到 /etc 目录下：
    disk = "/dev/some-disk-device"
    in the background:
      while true:
        建立软链接 "/tmp/foo" 指向 "/"
        删除软链接
    while disk not mounted at "/etc":
      向 diskarbitrationd 发送 IPC 请求，将磁盘挂载到 "/tmp/foo/etc"
首先我们会向 diskarbitrationd 发送请求，挂在磁盘到特定目录，如果竞争操作成功，则挂载点被删除，check
函数被绕过。同时，挂载点重新被创建，最后进入挂载流程。但是需要注意的是，我们暂时没有权限对 /etc 目录进行操作，除非使用 sudo 对用户权限进行提升。
对于完成最终的权限提升，我们还需要解决两个问题：
1\. Mac 中是否存在一个没有被挂载，但是本地用户可写的磁盘
2\. 将磁盘挂载到哪个目录，该目录下运行程序是通过 root 上下文进行的
第一个问题比较容易解决，我们可以列出所有可用的磁盘：