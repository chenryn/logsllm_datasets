#### 前言
眼看着网络交互的程序越来越多,我们的afl-fuzz却不能对此进行fuzz,太可惜了!本文尝试对net-snmp进行源码修改,使其通过stdin/stdout完成相应功能,让afl-fuzz重获用武之地(..•˘_˘•..),顺便对fuzz出的crash进行简单分析
#### net-snmp的编译安装
    CXX=afl-clang-fast++ CC=afl-clang-fast ./configure --prefix=/root/0524/mortysnmp
    AFL_USE_ASAN=1 make -j4
    make install
安装完成后,我们可以开启snmpd服务,并监听1024端口
    ./snmpd -f  127.0.0.1:1024
如下命令对snmpd服务接收udp包的情况进行测试
    echo 'hellotest' > /dev/udp/127.0.0.1/1024
#### 动静态分析溯源程序流程
snmpd服务在接收到请求后对snmp协议进行解析处理,通过查阅相关资料,找到相关解析函数,位置如下  
我们可以使用gdb attach到程序中,在_snmp_parse中打下断点,然后发送udp请求,再对程序进行函数回溯,如下  
上图我们可以看到程序进行snmp解析的流程如下
    snmpd.c: main(int argc, char *argv[])
    ↓
    snmpd.c:receive(); 
    ↓
    snmp_api.c:snmp_read2(&readfds); 
    ↓
    snmp_api.c:snmp_sess_read2((void *) slp, fdset);
    ↓
    snmp_api.c:rc = _sess_read(sessp, fdset);
    ↓
    snmp_api.c:rc = _sess_process_packet(sessp, sp, isp, transport, opaque,olength, rxbuf, length);
    ↓
    snmp_api.c:ret = snmp_parse(sessp, sp, pdu, packetptr, length); 
    ↓
    snmp_api.c:rc = _snmp_parse(sessp, pss, pdu, data, length);
#### 请求包内容的验证
确定了程序的流程之后,我们再对请求包的内容进行验证.在_sess_process_packet处打下断点,跟到程序中,对packetptr中的内容进行验证,查看packetptr指针指向的值  
同时进行网络抓包,对比data的值与packetptr的内容  
由上图可以看出,packetptr指向的内容正是我们发送的数据
#### 修改udp通信为stdin/stdout的一种思路
通常的fuzz程序对于网络交互并没有很好的支持,这就需要我们将网络交互转变为stdin/stdout,这篇文章给我们提供了很好的思路().
通过修改程序源码,在端口监听之后,添加发送socket请求的代码,并通过stdin控制socket请求的内容,从而实现网络交互到stdin/stdout的转换.
#### 干就完了
第一步我们要做的就是定位开启监听时的代码位置.首先attach到程序上,我们看到程序运行init_master_agent后开启了监听  
我们在`init_master_agent`代码下方添加发送socket内容的代码
    int mortys = 0;
    int n = 0;
    int reuse = 1;
    struct sockaddr_in srv;
    char buf[256] = {0};
    bzero(&srv, sizeof(srv));
    srv.sin_family = PF_INET;
    srv.sin_addr.s_addr = inet_addr("127.0.0.1");
    srv.sin_port = htons(1024);
    /*创建 UDP 套节字*/
    s = socket(AF_INET, SOCK_DGRAM, 0);
    memset(buf, 0, 256);
    /*读取用户输入到buf中*/
    fgets(buf, 256, stdin);
    /*通过套节字 s 向服务器发送数据*/
    if ((n = sendto(mortys, buf, strlen(buf), 0, (struct sockaddr *) &srv, sizeof(struct sockaddr))) 