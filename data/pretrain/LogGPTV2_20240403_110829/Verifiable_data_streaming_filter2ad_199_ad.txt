Update(PK, DB, SK, i, s(cid:48)): To update the ith element in DB
to s(cid:48), the clients parses SK as the trapdoor sp of the
CAT, its state st, and the pairs (xi,j, ri,j) of the “un-
used” nodes computed via the chameleon hash func-
tion (“unused” means that the trapdoor has not been
applied to these nodes). The ﬁrst move in the proto-
col is by the client who sends the index i to S. The
server returns s[i] and the corresponding proof πs[i]
(which is the authentication path aPathi). The client
C runs Verify(PK, i, s[i], πs[i]) to check the validity of
If Verify returns ⊥, then C aborts. Otherwise,
s[i].
it sets the leaf (cid:96)i = s[i] to s(cid:48) and re-computes the
authentication path with the new leaf (as described in
Construction 1). The output of this algorithm is a new
root ρ(cid:48). Subsequently, the client updates all nodes that
are stored in its state st, but that have been updated
by re-computing the authentication path with the new
leaf (this includes at least the root ρ and thus, the veri-
ﬁcation key PK). Notice that the randomness used for
the chameleon hash functions remain the same. Then,
C sends the new authentication path aPath(cid:48)
i, the up-
dated leaf s(cid:48), and the updated veriﬁcation key PK(cid:48) to
the server. The server ﬁrst veriﬁes the authentication
path. If it is valid, then S updates the stored value s[i]
to s[i](cid:48), the corresponding nodes in the CAT, as well
as its veriﬁcation key PK(cid:48). Otherwise, it aborts.
Regarding security, we prove the following theorem:
Theorem 2. If H is a collision-resistant hash function
and CH = (Gen, Ch, Col) a chameleon hash function that
is one-way and collision-resistant, then Construction 2 is a
secure veriﬁable data streaming protocol w.r.t. Deﬁnition 2.
The proof is giving in the full version [SS12].
8. CONCRETE INSTANTIATION WITH
FASTER VERIFICATION
Our construction can be instantiated with any chameleon
hash function, but we choose the one of Krawczyk and Rabin
(in the following called KR chameleon hash function) [KR00].
960The scheme is secure under the discrete logarithm assump-
tion (in the standard model)1, which is a very appealing
and mild assumption. Furthermore, the algebraic proper-
ties allow us to construct a very eﬃcient path veriﬁcation
algorithm by applying batch veriﬁcation techniques.
(2) If X is incorrect, then the probability that V outputs
1 is at most 2−λb .
The na¨ıve batch veriﬁer re-computes all instances, i.e., it
consists of computing R(insti) for each i = 1, . . . , D, and
checking that each of these D values is 1.
Assumption 1. Let q be a prime and let p = 2q + 1 be a
strong prime. Let G be the unique cyclic subgroup of Z∗
p of
order q and let g be a generator of G. Then, the discrete
logarithm problem holds if for all eﬃcient algorithms A the
probability
(cid:20) y ← G ; α ← A(p, q, g, y) :
(cid:21)
Prob
0 ≤ α ≤ q − 1 ∧ gα ≡ y mod p
= ν(λ)
is negligible (as a function of λ).
8.1 Building Block
The KR chameleon hash function CH = (Gen, Ch, Col) is
deﬁned as follows:
Gen(1λ): The key generation algorithm picks a prime q such
that p = 2q + 1 is also prime. It also chooses a random
q . It returns (csk, cpk) ←
generator g and a value α ∈ Z∗
((α, g), (X, g, p, q)) with X = gα mod p.
Ch(cpk, x): The input of the hash algorithm is a key cpk =
q . It picks a random
(X, g, p, q) and a message x ∈ Z∗
value r ∈ Z∗
q and outputs gxX r mod p.
Col(csk, x, r, x(cid:48)): The collision ﬁnding algorithm returns r(cid:48) ←
α−1(x − x(cid:48)) + r mod q.
8.2 Batch Veriﬁcation of Chameleon
Hash Functions
The most expensive operation in a CAT of depth D is the
veriﬁcation of an authentication path. This computation in-
volves (in the worst case) D computations of the chameleon
hash function (which is the authentication of the last leaf).
For our concrete instantiation this means that the veriﬁca-
tion algorithm veriﬁes D times equations of the form hi =
gxi X ri . This step is rather expensive as it involves many
modular exponentiations. Instead of verifying all equations
straightforwardly, we apply batch veriﬁcation techniques as
introduced by Bellare, Garay, and Rabin [BGR98]. The ba-
sic idea is to verify sequences of modular exponentiations
signiﬁcantly faster than the na¨ıve re-computation method.
In what follows, let λb be the security parameter such that
the probability of accepting a batch that contains an invalid
hash is at most 2−λb . Note, that it is necessary to test that
all elements belong to the group G as discussed comprehen-
sively by Boyd and Pavlovski in [BP00]. The size of λb is a
trade oﬀ between eﬃciency and security. Therefore, it de-
pends heavily on the application. Camenisch, Hohenberger,
and Pedersen suggest λb = 20 bits for a rough check and
λb = 64 bit for higher security [CHP07].
Deﬁnition 8. A batch veriﬁer for a relation R is a proba-
bilistic algorithm V that takes as input (possibly a descrip-
tion of R) a batch instance X = (inst1, . . . , instD) for R, and
a security parameter λ. It satisﬁes:
(1) If X is correct, then V outputs 1.
1To the best of our knowledge, this instantiation is currently
the most eﬃcient one based on the discrete logarithm as-
sumption in the standard model.
8.2.1
Small Exponent Test for
Chameleon Hash Functions
(cid:80)
D yi = g
check if(cid:81)
Bellare, Garay, and Rabin suggest three diﬀerent methods
of computing batch veriﬁcation for modular exponentiations
[BGR98]. Here, we focus only on the small exponent test be-
cause it is the most eﬃcient one for the veriﬁcation of up to
200 elements. In our scenario, 200 elements means that we
can authenticate 2200 elements. The authors consider equa-
tions of the form yi = gxi . The na¨ıve approach would be to
D xi . This, however, is not suﬃcient as
it is easy to produce two pairs (x1, y1) and (x2, y2) that pass
the veriﬁcation but each individual does not. One example
of such a pair is (x1 − β, y1) and (x2 + β, y2) for any β.
According to [FGHP09], the small exponent test works as
follows: Pick D exponents δi of a small number of {0, 1}λb
D xiδi mod q and y ←
i . Output 1 iﬀ gx = y. The probability of accepting
a bad pair is 2−λb and the value λb is a trade oﬀ between
eﬃciency and security.
8.3 Batch Veriﬁcation of KR Chameleon Hash
at random and compute x ← (cid:80)
(cid:81)
D yδi
Function
The algorithm Batch that performs the batch veriﬁca-
tion of D chameleon hash values h1, . . . , hD on messages
x1, . . . , xD using the randomness r1, . . . , rD works as follows:
It ﬁrst checks that all elements are in the group. If not, then
it rejects the query. Otherwise, it picks D random elements
δ1, . . . , δD where δi ∈ {0, 1}λb and checks that
(cid:80)
(cid:80)
g
D xiδi X
D riδi =
hδi
i .
(cid:89)
D
It outputs 1 if the equation holds and otherwise 0.
Theorem 3. The algorithm Batch is a batch veriﬁer for
the KR chameleon hash function.
The following proof follows the proofs of [CHP07, BGR98].
Proof. We ﬁrst show that if all hash values have the
desired form, then our batch veriﬁcation algorithm accepts
with probability 1. Keeping in mind that the validation of
the hash function checks that hi = gxi X ri , then we can
easily show that
(cid:80)
g
D xiδi X
(cid:80)
(cid:89)
(cid:89)
(cid:89)
D
D riδi =
=
hδi
i =
(gxi X ri )δi
D
gxiδi X riδi = g
D xiδi X
(cid:80)
(cid:80)
D riδi .
D
The next step is to show that the other direction is also
true. To do so, we apply the technique for proving small
exponents test as in [BGR98]. Since our batch veriﬁcation
algorithm accepts, it follows that hi ∈ G. This allows us to
write hi = gρi for some ρi ∈ Zq. Moreover, we know that
X = gx for some x ∈ Zq. We then can re-write the above
961equation as(cid:89)
D
hδi
i = gρiδi = g
D δi(mi+αri)
⇒(cid:88)
⇒(cid:88)
D
D
ρiδi =
(cid:80)
(cid:88)
ρiδi −(cid:88)
(cid:89)
D
D
D
δi(xi + αri)
δi(xi + αri) ≡ 0 mod q.
Setting βi = ρi − (xi + αri) this is equivalent to:
δiβi ≡ 0 mod q.
(1)
D(cid:88)
δ1 = −γ1
Now, assume that Batch((h1, x1, r1), . . . , (hD, xD, rD)) out-
puts 1, but there exists an index i = 1 (this holds w.l.o.g.)
such that gx1δ1 X r1δ1 (cid:54)= hδ1
1 . In particular, this means that
β1 (cid:54)= 0. Since q is prime, then β1 is the inverse of γ1 such
that β1γ1 ≡ 1 mod q. Taking this and Equation (1), we
obtain
δiβi mod q.
(2)
i=2
Now, given the elements ((h1, x1, r1), . . . , (hD, xD, rD)) such
that Batch((h1, x1, r1), . . . , (hD, xD, rD)) = 1 and let bad
denote the event that we break the batch veriﬁcation, i.e.,
gx1δ1 X r1δ1 (cid:54)= hδ1
1 . Observe that we do not make any as-
sumptions about the remaining values. Let ∆(cid:48) = δ2, . . . , δD
and let |∆(cid:48)| be the number of possible values for this vec-
tor. It follows from Equation 2 and from the fact that ∆(cid:48) is
ﬁxed that there exists exactly one value δ1 that will make
bad happen. This means, however, that the probability that
bad occurs is Prob[ bad | ∆(cid:48) ] = 2−λb . Choosing the value δ1
at random and summing over all possible choices of ∆(cid:48), we
i=1(Prob [ bad | ∆(cid:48) ] · Prob [ ∆(cid:48)]). Thus,
we can calculate the overall probability as Prob [ bad] ≤
get Prob [ bad] ≤ (cid:80)∆(cid:48)
(cid:80)2λb (D−1)
(2λb · 2−λb(D−1)) = 2−λb .
i=1
8.4 Efﬁciency
tions. First, we have to compute(cid:81)
We analyze the eﬃciency of our batch veriﬁer for the KR
chameleon hash using the following notation. By exp(k1)
we denote the time to compute gb in the group G where
|b| = k1. The eﬃciency is measured in number of multiplica-
i . Instead of comput-
ing this product straightforwardly, we apply the algorithm
FastMult((h1, δ1), . . . , (hD, δD)) obtaining a total number of
λb + Dλb/2 multiplications on the average [BGR98]. In ad-
dition we have to compute 2D multiplications and ﬁnally
2exp(k1) exponentiations. Thus, the total number of multi-
plications is λb + D(2 + λb/2) + 2exp(k1).
8.5 Benchmarking Results
a hδi
We estimate the performance of our scheme by analyzing
the most expensive component of our construction. That
is, we have implemented the KR chameleon hash function
and we use the implementation of SHA1 provided by the
Java security package. These are the two main components
of our construction. The additional overhead determining
the nodes should add only a negligible overhead to the over-
all computational costs (recall that computing a chameleon
hash involves modular exponentiations, which we believe
is the most expensive step). We have implement the KR
chameleon hash in Java 1.6 on a Intel Core i5 using 4GB
1333MHz DDR3 RAM. We have conducted two diﬀerent ex-
periments where we executed each algorithm 500 times with
a CAT of depth 80 (thus it authenticates 280 elements). The
bit length of the primes in the ﬁrst experiment is 1024 bits
and in the second 2048 bits. The following values are the
average computational costs. Adding a leaf to the tree in the
worst case (this happens when the tree is empty) takes on
average 283ms for 1024 bits and 1400ms for 2048 bits. Each
of these executions involves 40 evaluations of the chameleon
hash (including the generation of randomness), 40 SHA1
computations, and the computation of a collision. The tim-
ings to verify a path and to update it are slightly faster,
because both operations do neither include the generation
of random values, nor the computation of a collision. In the
full version of this paper, we will include running times of
the full implementation.
9. FROM ONE-TIME TO MANY-TIME
SIGNATURE SCHEMES USING CATS
The second application of CATs is a new transforma-
tion that turns any one-time signature (OTS) scheme into a
many-time signature (MTS) scheme. A one-time signature
scheme allows a user to sign a single message. This primitive
is well-known and has been introduced by Lamport [Lam79]
and Rabin [Rab79]. One-time signature schemes are inter-
esting from both, a theoretical and a practical point of view.
Theoreticians study the primitive because it is used as a
building block in realizing secure signature schemes based
on one-way functions (in a black-box way). On the other
hand, several extremely eﬃcient instantiations have been
suggested in practice. However, the “one-timeness” of such
schemes regrettably causes a complex key-scheduling process
since the signer has to generate a new key pair whenever it
wishes to sign a new message. Motivated by this drawback
– and also by the hope of obtaining an eﬃcient many-time
signature scheme – several publications investigate eﬃcient