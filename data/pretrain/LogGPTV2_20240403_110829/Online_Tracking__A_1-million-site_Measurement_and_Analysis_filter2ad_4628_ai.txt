we include a list of CDNs from the WebPagetest Project16 . 
16https://github.com/WPO-Foundation/webpagetest 
gstatic.comfonts.googleapis.comajax.googleapis.comgoogle.combootstrapcdn.comytimg.comcloudﬂare.comyoutube.comjquery.comwp.coms3.amazonaws.comgoogleusercontent.combaidu.commaps.googleapis.comqq.combp.blogspot.comakamaihd.netcdninstagram.comtwimg.comjwpcdn.com05101520253035%First-PartiesThe  mixed  content  URL  is  then  classﬁed  according  to  the
ﬁrst rule it satisﬁes in the following list:
1.	 If  the  requested  domain  matches  the  landing  page  do­
main, and the request URL ends with favicon.ico clas­
sify as a “favicon”.
2.	 If  the  requested  domain  matches  the  landing  page  do­
main, classify as the site’s “own content”.
3.	 If  the  requested  domain  is  marked  as “should  block” by
the blocklists, classify as “tracker”.
4.	 If  the  requested  domain  is  in  the  CDN  list,  classify  as
“CDN”.
5.  Otherwise, classify as “non-tracking” third-party content. 
11.  ICE CANDIDATE GENERATION 
It  is  possible  for  a  Javascript  web  application  to  access 
ICE  candidates,  and  thus  access  a  user’s  local  IP  addresses 
and public IP address, without explicit user permission.  Al­
though a web application must request explicit user permis­
sion  to  access  audio  or  video  through  WebRTC,  the  frame­
work allows a web application to construct an RTCDataChan­
nel  without  permission.  By  default,  the  data  channel  will 
launch the ICE protocol and thus enable the web application 
to  access  the  IP  address  information  without  any  explicit 
user permission.  Both users behind a NAT and users behind 
a  VPN/proxy  can  have  additional  identifying  information 
exposed to websites without their knowledge or consent. 
Several  steps  must  be  taken  to  have  the  browser  gener­
ate  ICE  candidates.  First,  a  RTCDataChannel  must  be  cre­
ated  as  discussed  above.  Next,  the  RTCPeerConnection.c­
reateOffer()  must  be  called,  which  generates  a  Promise 
that  will  contain  the  session  description  once  the  oﬀer  has 
been created.  This is passed to RTCPeerConnection.setLo­
calDescription(),  which  triggers  the  gathering  of  candi­
date  addresses.  The  prepared  oﬀer  will  contain  the  sup­
ported conﬁgurations for the session, part of which includes 
the IP addresses gathered by the ICE Agent.17  A web appli­
cation can retrieve these candidate IP addresses by using the 
event  handler  RTCPeerConnection.onicecandidate()  and 
retrieving the candidate IP address from the RTCPeerConnect­
ionIceEvent.candidate or, by parsing the resulting Session 
Description  Protocol  (SDP)18  string  from  RTCPeerConnec­
tion.localDescription  after  the  oﬀer  generation  is  com­
plete.  In  our  study  we  only  found  it  necessary  to  instru­
ment RTCPeerConnection.onicecandidate() to capture all 
current scripts. 
12.  AUDIO FINGERPRINT CONFIGURATION 
Figure  8  in  Section  6.4  summarizes  one  of  two  audio  ﬁn­
gerprinting conﬁgurations found in the wild.  This conﬁgura­
tion  is  used  by  two  scripts,  (client.a.pxi.pub/*/main.min.js
and  http://js.ad-score.com/score.min.js).  These  scripts  use
an  OscillatorNode  to  generate  a  sine  wave.  The  output
signal  is  connected  to  a  DynamicsCompressorNode,  possibly
to increase diﬀerences in processed audio between machines.
The  output  of  this  compressor  is  passed  to  the  buﬀer  of  an
OfflineAudioContext.  The script uses a hash of the sum of
values from the buﬀer as the ﬁngerprint.
17https://w3c.github.io/webrtc-pc/#widl­
RTCPeerConnection-createOﬀer-Promise-
RTCSessionDescription--RTCOﬀerOptions-options
18https://tools.ietf.org/html/rfc3264 
Content-Type 
binary/octet-stream 
image/jpeg 
image/svg+xml 
image/x-icon 
image/png 
image/vnd.microsoft.icon 
text/xml 
audio/wav 
application/json 
application/pdf 
application/x-www-form-urlencoded 
application/unknown 
audio/ogg 
image/gif 
video/webm 
application/xml 
image/bmp 
audio/mpeg 
application/x-javascript 
application/octet-stream 
image/webp 
text/plain 
text/javascript 
text/html 
video/ogg 
image/* 
video/mp4 
image/pjpeg 
image/small 
image/x-png 
Count 
8 
12664 
177 
150 
7697 
41 
1 
1 
8 
1 
8 
5 
4 
2905 
20 
30 
2 
1 
1 
225 
1 
91 
3 
7225 
1 
23 
19 
2 
1 
2 
Table  10:  Counts  of  responses  with  given  Content-Type 
which  cause  mixed  content  errors.  NOTE:  Mixed  content 
blocking  occurs  based  on  the  tag  of  the  initial  request  (e.g. 
image  src  tags  are  considered  passive  content),  not  the 
response Content-Type.  Thus it is likely that the Javascript 
and other active content loads listed above are the result of 
misconﬁgurations and mistakes that will be dropped by the 
browser.  For  example,  requesting  a  Javascript  ﬁle  with  an 
image tag. 
A third script, *.cdn-net.com/cc.js, utilizes AudioContext 
to  generate  a  ﬁngerprint.  First,  the  script  generates  a  tri­
angle wave using an  OscillatorNode.  This signal is  passed 
through an AnalyserNode and a ScriptProcessorNode.  Fi­
nally,  the  signal  is  passed  into  a  through  a  GainNode  with 
gain set to zero to mute any output before being connect to 
the AudioContext’s destination (e.g.  the computer’s speak­
ers).  The  AnalyserNode  provides  access  to  a  Fast  Fourier 
Transform (FFT) of the audio signal, which is captured us­
ing the onaudioprocess event handler added by the Script-
ProcessorNode.  The  resulting  FFT  is  fed  into  a  hash  and 
used as a ﬁngerprint. 
13.  ADDITIONAL METHODOLOGY 
All  measurements  are  run  with  Firefox  version  41.  The 
Ghostery  measurements  use  version  5.4.10  set  to  block  all 
possible  bugs  and  cookies.  The  HTTPS  Everywhere  mea­
surement  uses  version  5.1.0  with  the  default  settings.  The 
Block  TP  Cookies  measurement  sets  the  Firefox  setting  to 
“block all third-party cookies”. 
13.1  Classifying Third-party content 
In order to determine if a request is a ﬁrst-party or third-
party  request,  we  utilize  the  URL’s “public  suﬃx  +  1” (or 
PS+1).  A public suﬃx is “is one under which Internet users 
can  (or  historically  could)  directly  register  names.  [Exam­
ples include] .com, .co.uk and pvt.k12.ma.us.” A PS+1 is the 
public suﬃx with the section of the domain immediately pro­
ceeding  it  (not  including  any  additional  subdomains).  We 
use  Mozilla’s  Public  Suﬃx  List19  in  our  analysis.  We  con­
sider  a  site  to  be  a  potential  third-party  if  the  PS+1  of 
the  site  does  not  match  the  landing  page’s  PS+1  (as  de­
termined by the algorithm in the supplementaary materials 
Section  13.2).  Throughout  the  paper  we  use  the  word “do­
main” to refer to a site’s PS+1. 
13.2  Landing page detection from HTTP data 
Upon visiting a site, the browser may either be redirected 
by  a  response  header  (with  a  3XX  HTTP  response  code  or 
“Refresh” ﬁeld), or by the page content (with javascript or a 
“Refresh” meta tag).  Several redirects may occur before the 
site  arrives  at  its  ﬁnal  landing  page  and  begins  to  load  the 
remainder  of  the  content.  To  capture  all  possible  redirects 
we  use  the  following  recursive  algorithm,  starting  with  the 
initial request to the top-level site.  For each request: 
1.	 If  HTTP  redirect,  following  it  preserving  referrer  details 
from previous request. 
2.	 If  the  previous  referrer  is  the  same  as  the  current  we  as­
sume  content  has  started  to  load  and  return  the  current 
referrer as the landing page. 
3.	 If  the current referrer is diﬀerent from the previous refer­
rer,  and  the  previous  referrer  is  seen  in  future  requests, 
assume  it  is  the  actual  landing  page  and  return  the  pre­
vious referrer. 
4.	 Otherwise,  continue  to  the  next  request,  updating  the 
current and previous referrer. 
This algorithm has two failure states:  (1) a site redirects, 
loads  additional  resources,  then  redirects  again,  or  (2)  the 
site has no additional requests with referrers.  The ﬁrst fail­
ure mode will not be detected, but the second will be.  From 
manual  inspection,  the  ﬁrst  failure  mode  happens  very  in­
frequently.  For  example,  we  ﬁnd  that  only  0.05%  of  sites 
are incorrectly marked as having HTTPS as a result of this 
failure  mode.  For  the  second  failure  mode,  we  ﬁnd  that  we 
can’t  correctly  label  the  landing  pages  of  2973  ﬁrst-party 
sites  (0.32%)  on  the  top  1  million  sites.  For  these  sites  we 
fall back to the requested top-level URL. 
13.3  Detecting Cookie Syncing 
We consider two parties to have cookie synced if a cookie 
ID appears in speciﬁc locations within the referrer, request, 
and  location  URLs  extracted  from  HTTP  request  and  re­
sponse pairs.  We determine cookie IDs using the algorithm 
described  in  Section  4.  To  determine  the  sender  and  re­
ceiver  of  a  synced  ID  we  use  the  following  classiﬁcation,  in 
line with previous work [44, 1]: 
•	 If  the  ID  appears  in  the  request  URL:  the  requested  do­
•	 If  the  ID  appears  in  the  referrer  URL:  the  referring  do­
main is the sender of the ID, and the requested domain is 
the receiver. 
main is the recipient of a synced ID. 
19https://publicsuﬃx.org/ 
•	 If  the  ID  appears  in  the  location  URL:  the  original  re­
quested domain is the sender of the ID, and the redirected 
location domain is the receiver. 
This  methodology  does  not  require  reverse  engineering 
any  domain’s  cookie  sync  API  or  URL  pattern.  An  im­
portant  limitation  of  this  generic  approach  is  the  lack  of 
discrimination between intentional cookie syncing and acci­
dental  ID  sharing.  The  latter  can  occur  if  a  site  includes  a 
user’s ID within its URL query string, causing the ID to be 
shared with all third parties in the referring URL. 
The results of this analysis thus provide an accurate rep­
resentation  of  the  privacy  implications  of  ID  sharing,  as  a 
third  party  has  the  technical  capability  to  use  an  uninten­
tionally  shared  ID  for  any  purpose,  including  tracking  the 
user  or  sharing  data.  However,  the  results  should  be  in­
terpreted  only  as  an  upper  bound  on  cookie  syncing  as  the 
practice is deﬁned in the online advertising industry. 
13.4  Detection of Fingerprinting 
Javascript miniﬁcation and obfuscation hinder static anal­
ysis.  Miniﬁcation is used to reduce the size of a ﬁle for tran­
sit.  Obfuscation stores the script in one or more obfuscated 
strings,  which  are  transformed  and  evaluated  at  run  time 
using  eval function.  We ﬁnd that ﬁngerprinting and track­
ing  scripts  are  frequently  miniﬁed  or  obfuscated,  hence  our 
dynamic  approach.  With  our  detection  methodology,  we 
intercept  and  record  access  to  speciﬁc  Javascript  objects, 
which  is  not  aﬀected  by  miniﬁcation  or  obfuscation  of  the 
source code. 
The  methodology  builds  on  that  used  by  Acar,  et.al.  [1] 
to  detect  canvas  ﬁngerprinting.  Using  the  Javascript  calls 
instrumentation  described  in  Section  3.2,  we  record  access 
to  speciﬁc  APIs  which  have  been  found  to  be  used  to  ﬁn­
gerprint  the  browser.  Each  time  an  instrumented  object  is 
accessed,  we  record  the  full  context  of  the  access:  the  URL 
of  the  calling  script,  the  top-level  url  of  the  site,  the  prop­
erty  and  method  being  accessed,  any  provided  arguments, 