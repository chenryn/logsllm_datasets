### Reading, Modifying, and Writing FPGA Configuration Memory

This module implements the various approaches proposed in Section 4 to emulate the occurrence of transient faults.

**Source:**
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06)
0-7695-2607-1/06 $20.00 © 2006 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 12:11:40 UTC from IEEE Xplore. Restrictions apply.

### Results Analysis Module

Observations from each experiment are compared to a Golden Run (fault-free) trace to classify fault effects into:
- **Failure:** The traces present different outputs.
- **Latent:** The traces have the same outputs, but the system is in a different final state.
- **Silent:** The traces and the final state of the system are identical.

FADES has been entirely developed in Java to ensure portability across platforms. Additionally, it can utilize any board that contains a Virtex FPGA and supports the Xilinx Hardware Interface (XHWIF).

This tool allows users to emulate any of the previously presented transient faults. It implements all the proposed approaches for fault emulation and stores a trace of the execution for later analysis.

The next section presents various experiments conducted to validate the tool and extract meaningful results.

### Experiments and Results

To study the feasibility of our approach and validate our tool, FADES was run side-by-side with VFIT, a VHDL-based Fault Injection Tool [19]. VFIT was successfully used in the Fault Injection into the Time-Triggered Architecture (TTA) project to experimentally evaluate TTA concepts. The following sections detail the experimental setup and the obtained results.

#### 6.1. Experimental Setup

The model of the system under analysis must meet two requirements:
- It must be written in VHDL.
- It must be synthesizable, i.e., implementable on an FPGA.

We chose a relatively simple model and workload to easily follow the execution and fault injection traces, which helps in identifying any implementation errors. The selected model was an IP core that models the Intel 8051 microcontroller [20], and the Bubblesort algorithm, commonly used in HDL-based fault injection experiments, was chosen as the workload. This algorithm took 1303 clock cycles to complete when running on the modeled system.

Several experiments were conducted, each involving 3000 single transient fault injections. The injection instant was uniformly distributed along the workload duration, and the faults were confined to different locations in each experiment (registers, RAM memory, the arithmetic logic unit, the memory control, and the finite state machine module). The duration of the injected faults was divided into three ranges: faults taking less than 1 clock cycle, faults lasting from 1 to 10 clock cycles, and those taking between 11 and 20 clock cycles.

The analysis of these results will help us:
- Estimate the speed-up achieved by our tool in terms of execution time.
- Validate the implementation of the transient faults.

#### 6.2. Emulation Time

Using FPGAs to implement the system model allows for very quick workload execution. However, reconfiguring FPGAs to emulate faults involves transferring a certain amount of information to and from the FPGA. Since we are dealing with transient faults, another reconfiguration is necessary after some time to remove the previously injected fault. This introduces some temporal overhead in the workload execution.

The overhead depends on the number of resources involved and how many times they must be reconfigured to emulate the fault. Therefore, the execution time for each experiment varies depending on the injected fault. Figure 10 shows the average emulation time obtained for the different experiments performed via FADES.

**Figure 10. Mean Emulation Time of Experiments Performed via FADES**

- The emulation of bit-flips took an average of 916 seconds when targeting flip-flops (FFs) and only 536 seconds when targeting memory blocks.
- For pulse faults, if the duration is less than one clock cycle, the experiments took a mean of 755 seconds, while they took around 1520 seconds in other cases (two injections are required for this fault model).
- The worst-case execution time is for the delay fault model, with execution times of 2487 and 2778 seconds for delays in lines related to sequential and combinational logic, respectively. This is due to experimental problems with the JBits package and the prototyping board driver, leading to the download of a full configuration file.
- For indeterminations, the injection into sequential elements takes more time (1065 seconds) than the injection into combinational elements (805 seconds). If the logical level oscillates during the fault duration, multiple reconfigurations are needed, significantly increasing the execution time.

VFIT uses the simulator commands technique, resulting in similar execution times for any type and length of the studied fault models, with an average execution time of 21600 seconds.

**Table 2. Speed-Up Obtained When Performing the Experiments via FADES**

| Fault Model | Target | Mean Emulation Time of 3000 Faults (seconds) | Speed-Up |
|-------------|--------|----------------------------------------------|----------|
| Bit-flip    | FFs    | 916                                          | 23.60    |
|             | Memory | 536                                          | 40.30    |
| Pulse       | <1     | 755/1520                                     | 28.60/14.21 |
| Delay       | Sequential | 2487                                       | 8.68     |
|             | Combinational | 2778                                      | 7.77     |
| Indetermination | Sequential | 1065                                     | 20.28    |
|             | Combinational | 805                                       | 26.83    |

This shows that FADES can effectively accelerate the experiments for validating a VLSI system. However, not only must the results be quickly obtained, but they must also be correct. The next section addresses this topic.

#### 6.3. Results Validation

An initial experiment was performed to identify the registers susceptible to causing a failure when executing the selected workload: 3000 bit-flips were randomly injected among all the registers. The experiment reported that only 14 registers (81 FFs out of 637) were eligible for being targeted by transient faults. The same approach was applied to the injection of bit-flips into the RAM memory of the system.

**Figure 11. Results from the Bit-Flip Emulation**

- A bit-flip in the selected memory positions is likely to cause a failure in the system, while one out of two bit-flips in any of the targeted registers will have the same effect.

**Figure 12. Results from the Delay and Indetermination Emulation into Sequential Logic**

- Injecting delays and indeterminations into sequential logic increases the percentage of failures with the duration of the faults.
- Short indeterminations have similar, though less dangerous, effects than bit-flips, but the percentage of failures greatly increases with the length of the faults.
- Delays are less likely to cause a failure, with a lesser increase in failures with the length of the faults due to the correct logic value stored in the memory cell, even if it is propagated with some delay.

For combinational logic, the system under study was implemented using 5310 LUTs that can be targeted by pulse, delay, or indetermination faults. This large number of injection points led us to divide the experiments according to the targeted location: the Arithmetic Logic Unit (ALU), the Memory Control unit (MEM), and the Finite State Machine unit (FSM).

**Figures 13, 14, and 15. Example Results from the Experiments**

- The percentage of failures when emulating pulses, indeterminations, and delays in the combinational logic slowly increases with the fault duration.
- The FSM is the most sensitive unit in terms of failure rates.
- The number of latent faults greatly increases when injecting pulses into the MEM unit, resulting in the lowest rates of silent faults.

**Table 3. Comparison of the Results Obtained via FADES and VFIT**

| Fault Model | Fault Location | Percentage of Failures (Fault Duration = <1 / 1-10 / 11-20 Clock Cycles) |
|-------------|----------------|-------------------------------------------------------------------------|
| Bit-flip    | Registers      | 43.86 / 80.95                                                           |
|             |                | 43.70 / 81.76                                                           |
| Pulse       | ALU            | 0.06 / 3.13 / 8.86                                                      |
|             |                | 1.36 / 3.53 / 7.43                                                      |
| Delay       | Sequential     | 5.7 / 18.6 / 31.67                                                      |
|             |                | 0 / 0.57 / 2.1                                                          |
| Indetermination | Sequential | 29.53 / 45.9 / 61.4                                                     |
|             |                | 18.87 / 35.90 / 52.47                                                   |
| Pulse       | ALU            | 0.37 / 1.37 / 3.57                                                      |
|             |                | 1.30 / 3.03 / 8.23                                                      |

**Figure 13. Results from Pulse Emulation**