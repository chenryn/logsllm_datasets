# PPPoE中间人拦截以及校园网突破漫谈
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
校园生活快结束了，之前还有点未完成的想法，趁着这两天有兴趣搞搞。
此文面向大众是那种在校园内苦受拨号客户端的毒害，但是又想自己动手折腾下的。
## 一些我知道的办法
目前主要的方法可以可以分为移动端和电脑客户端。
###  移动端
移动端基本是基于 http 的 portal 认证，这个解决方法比较多，但依据剧情情况而定。
比如拨号后克隆 mac 到路由器，还有基于这个方法的衍生方法，比如拨号前交换机，登陆后改路由器并复制 mac 到路由器。还有比如虚拟路由转发。
这些其实都是利用的检测的原理，按道理说，portal 并不像 PPPoE 那样，PPPoE 中间是不允许有路由节点的，因为在 PADI
广播包是本地广播，本地广播路由器不会进行转发，所以并不能找到一个目的 PPPoE Server。
这里扯远了，关于 PPPoE 下面再说。
我们接着看看 portal，这个是基于 HTTP 的，大体上的流程是
  1. 访问一个 http 网站，比如 http://www.qq.com，因为网关会拦截 http 请求然后重定向到一个形如 http://58.53.199.144:8001/?userip=100.64.224.167&wlanacname=&nasip=58.50.189.124&usermac=1c-87-2c-77-77-9c 的网址。
  2. 此时 app 会解析信息，比如 ip，mac。检测的地方就是在这里，比如检测你的手机 ip 是否和 userip 相同，加入你在路由器下，你的 ip 应该是形如 192.168.x.x 的地址，你的路由器的 wan ip 才是 和 userip 相同，还可能会进行比如 mac 判断，还可能检查 arp 表，至于这两样是怎样检测的我按下不表，总而言之，这里通不过检测，app 就判定你的网络环境不对。
  3. 然后 app 会将账号或密码进行加密，然后 post 到认证服务器，认证通过后，你这个 ip 就可以上网了。
先说说为什么克隆 mac 有用，因为认证服务器那边是根据 mac 判定的，相同的 mac 在短时间内会获取到同样的
ip，并且短暂时间的断网也是允许的。其他衍生方法原理类似。
再来说说还有哪些办法，这些办法可能并没有之前的好操作。
比如 hook 判定函数
还有比如改 Response（这个办法是前阵子的思路，还没实践是否可行，既然判断参数取自响应包，那么我们应该能想到这个）
我前阵子用的比较多的其实是直接逆向 app
获取加密流程然后自写协议，但是现在看来可能是最费时费力的一种了，不过有一种好处，一个产品大概率是不会换加密算法的，顶多可能改改密钥，截取加密后的某一段。
这些大致上就是我所知道的几种移动端上面的方法了。
###  电脑端
电脑端方面老陈的文章已经写的很全面了，见 [How To : 从Netkeeper
4.X客户端获取真实账号](https://blog.sunflyer.cn/archives/460)
这里面提到了我们可以下手的三个方面
  4. 客户端本身
比如 hook RasDialW api 和 CE 暴搜。
但是就如文章中所说，加了保护，可能是自行实现 peloader 也说不定，反正就是相当于没走系统的 api，而是自行搞了一份来进行拨号，这样就没办法通过
hook 系统 api 来获取了。另外暴搜内存也有局限。
拿我们湖北的举例子，湖北的客户端是动态加载一个 dll 来进行账号密码加密，但是这个过程很快，这个客户端主要的操作都貌似是在 dll
中完成，这里我说的快是指，他加载 dll 完成加密然后可能 又调用了它的其他 dll 拨号后，只要一个dll完成了它的“使命”，它会立刻卸载，导致我们通过
CE 手动暴搜内存几乎不可能（这里可能我写的有谬误，不过就我分析湖北的客户端来说感觉是这样）
  5. 系统层面
这个就如文章中提到的事件日志相关的东西
  6. 中间人
根据 PPPoE 协议的流程，我们完全可以自己搞一个 server 来进行拦截。
下面我们将详细了解这个，以及能够自己动手实现一个简单的 PPPoE Server。
## PPPoE 协议流程
PPPoE 是一个二层协议，工作在链路层。
PPPoE 主要分为两个阶段，一个是发现阶段，我的理解就是两台机器建立起点对点的联系，第二个是会话阶段，这个阶段主要是配置确认，然后开始验证账号密码。
至于后面的分配 ip 的确定我们按下不表，因为此文主要关注的是拦截。
PPPoE 具体可分为以下阶段
  7. PPPoE发现阶段(Discovery)
  *     * 主机广播发起分组（PADI）
    * 有效发现提供包分组（PADO）
    * 有效发现请求分组（PADR）
    * 有效发现会话确认（PADS）
  8. PPPoE会话阶段(Session)
  *     * LCP协议请求确认配置(LCP-Config-Req)
    * LCP协议确认配置(LCP-Config-Ack)
    * PAP或CHAP验证账号密码
验证通过后开始进行一些后续的分配 ip 以及其他操作。
## PPPoE 发现阶段
###  PADI
PADI 是一个广播包，发往 ff:ff:ff:ff:ff:ff 的广播地址，然后这个广播包会在本地网络进行广播。
它的 CODE 字段值为 0×09，SESSION-ID（会话ID）字段值为 0×0000。
PADI 分组必须至少包含一个 Host-Uniq，Host-Uniq为主机唯一标识，类似于PPP数据报文中的标识域，主要是用来匹配发送和接收端的。因为对于广播式的网络中可能会同时存在很多个PPPoE的数据报文。
因为此时发的是广播包，那么我们只需要本机搭建一个 Server 对 PADI 进行响应，就可以开始我们的中间人作业了。
具体流程就是监听网卡，然后过滤 CODE 字段值为 0×09 的包然后进行响应即可。
因为其中的 Host-Uniq 字段在后续的请求中都需要，我们写一个函数把这个字段值揪出来。
    #寻找客户端发送的Host-Uniq
    def padi_find_hostuniq(self, payload):
        _key = b'\x01\x03'
        payload = bytes(payload)
        if _key in payload:
            _nIdx = payload.index(_key)
            _nLen = struct.unpack("!H", payload[_nIdx + 2:_nIdx + 4])[0]
            _nData = payload[_nIdx + 2:_nIdx + 4 + _nLen]
            return _key + _nData
        return
需要传入的是一个 Packet.payload，payload 是除去链路层的其他数据，在这里面具体就是 PPPoED 下面的数据
###  PADO
当一个接入集中器（Server）接收到一个 PADI 包以后，就需要进行响应，发出 PADO 包了。
PADO 包的 CODE 字段值为 0×07，SESSION-ID 字段值仍为 0×0000。
PADO分组必须包含一个接入集中器名称类型的标签（此处的标签类型字段值为 akkuman），其实就是一个名字，你想填什么都可以。
并且需要包含前面 PADI 包中的 Host-Uniq 字段，这个字段在 PPPoE 的发现阶段都是必要的。
在载荷中可能有多个 tag，他们的格式如下：
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  
| TAG_TYPE | TAG_LENGTH |  
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  
| TAG_VALUE … ~  
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
可以看出，标记的封装格式采用的是大家所熟知的TLV结构，也即是（类型+长度+数据）。标记的类型域为2个字节，各个标记的类型所代表的含义具体可以查看 [RFC
2516](https://datatracker.ietf.org/doc/rfc2516/) 或
[PPPoE帧格式](https://datatracker.ietf.org/doc/rfc2516/)
这里的 0x0103 即代表 Host-Uniq，是主机唯一标识，作用在上文已经提及。
那我们可以根据这个要求写一个发送 PADO 包的函数。
    #发送PADO回执包
    def send_pado_packet(self, pkt):
        # 寻找客户端的Host_Uniq
        _host_Uniq = self.padi_find_hostuniq(pkt.payload)
        _payload = b'\x01\x02\x00\x07akkuman\x01\x01\x00\x00'
        if _host_Uniq:
            _payload += _host_Uniq
        # PADO 回执包的 sessoinid 为 0x0000
        pkt.sessionid =  getattr(pkt, 'sessionid', 0x0000)
        sendpkt = Ether(src=MAC_ADDRESS, dst=pkt.src, type=0x8863) / PPPoED(version=1, type=1, code=0x07, sessionid=pkt.sessionid, len=len(_payload)) / _payload
        scapy.sendp(sendpkt)
其中的 pkt 是接收到的 PADI 数据包。
上面的 _payload 中的 \x01\x02 代表是 AC-Name 字段，\x00\x07 是后面的 akkuman 的长度。\x01\x01 是代表
Service-Name 字段，一般为空，所以我们这里直接填 \x00\x00。下文不再赘述。
其中的源 mac 地址和目标 mac 地址我们需要改改。
然后加上 Host-Uniq 字段，封装成包发出去，注意这里的 type=0x8863 是代表发现阶段，0x8864 是会话阶段。
至于这个是怎么封装起来的，这个是 scapy 库的语法，Ether 代表链路层，剩下的依此大家参照图即可理解，最后的 _payload
代表接上一段原始数据，一般就是 bytes。
###  PADR
因为 PADI 包是广播的，所以客户端有可能收到不同的接入集中器多个的 PADO 响应包，客户端应该基于 AC-Name 和可以提供的服务（这个参见
RFC2516）从中选择一个合适的接入集中器。
然后客户端就发送 PADR 包到自己选择的接入集中器（将目标 mac 改成 PADO 包中的源 mac 即可），其中 CODE 字段为
0×19，SESSION_ID 字段值仍为 0×0000。
###  PADS
当接入集中器收到一个 PADR 包以后，就要准备开始一个 PPP 会话了。
在这个阶段，接入集中器会为接下来的 PPPoE 会话生成一个独一无二的 SESSION_ID，然后组装起来进行发送。其中 CODE 字段值为 0×65 。
根据此我们可以写出一个发送 PADS 包的函数。
    #发送PADS回执包
    def send_pads_packet(self, pkt):
        #寻找客户端的Host_Uniq
        _host_Uniq = self.padi_find_hostuniq(pkt.payload)
        _payload = b'\x01\x01\x00\x00'
        if _host_Uniq:
            _payload += _host_Uniq
        pkt.sessionid =  SESSION_ID
        sendpkt = Ether(src=MAC_ADDRESS, dst=pkt.src, type=0x8863) / PPPoED(version=1, type=1, code=0x65, sessionid=pkt.sessionid, len=len(_payload)) / _payload
        scapy.sendp(sendpkt)
其中的 pkt 为接收到的 PADR 数据包。
此时发现阶段就已经完成了，接下来就是进行 PPPoE 的会话阶段了。
## PPPoE 会话阶段
PPPoE 会话阶段的抓包并没有那么明显的特征，可能你在不同的时间看到的包的顺序都不太一样。
在此阶段的 Type 为 0x8864，代表 PPPoES，即会话阶段。
###  LCP链路配置建立
一个典型的 LCP Request 如下图所示。
Protocol：决定了后面的载荷包含的是什么样的协议报文，类似以太帧的类型字段，是用以区分载荷送给哪个上层协议处理。收下为常见协议号：
  * 0xC021: LCP报文