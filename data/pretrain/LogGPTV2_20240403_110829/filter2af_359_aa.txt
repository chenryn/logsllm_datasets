## 引言
本文是《红队开发基础-基础免杀》系列的第二篇文章，主要介绍了规避常见的恶意API调用模式及使用直接系统调用并规避“系统调用标记”两种手段，达到bypass
edr的效果。
## 使用直接系统调用并规避“系统调用标记”
### 基础知识
系统核心态指的是R0，用户态指的是R3，系统代码在核心态下运行，用户代码在用户态下运行。系统中一共有四个权限级别，R1和R2运行设备驱动，R0到R3权限依次降低，R0和R3的权限分别为最高和最低。
在用户态运行的系统要控制系统时，或者要运行系统代码就必须取得R0权限。用户从R3到R0需要借助ntdll.dll中的函数，这些函数分别以“Nt”和“Zw”开头，这种函数叫做Native
API，下图是调用过程：
这些nt开头的函数一般没有官方文档，很多都是被逆向或者泄露windows源码的方式流出的。
调用这些nt开头的函数，在《红队队开发基础-基础免杀(一)》中曾经通过在内存中找到函数的首地址的方式来实现:
    FARPROC addr = GetProcAddress(LoadLibraryA("ntdll"), "NtCreateFile");
反编译这段代码，就可以获取syscall最简单的形式:
即：
    mov     r10,rcx
    mov     eax,xxh
    syscall
这里存储的是系统调用号，基于 eax 所存储的值的不同，syscall 进入内核调用的内核函数也不同
#### 为什么使用syscall可以绕过edr？
我们可以看下图
用户调用windows api ReadFile，有些edr会hook ReadFile这个windows
api，但实际上最终会调用到NTxxx这种函数。有些函数没有被edr hook就可以绕过。说白了还是通过黑名单机制的一种绕过。找到冷门的wdinwos
api并找到对应的底层内核api。
sycall系统调用号文档：
### 写一个基础syscall
在vscode中开启asm支持：
右键asm文件，属性，修改为宏编译
这里需要注意 .asm文件不能和.cpp文件重名，否则会link报错。
接着根据[msdn的官方文档](https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntcreatefile)定义函数：
    EXTERN_C NTSTATUS SysNtCreateFile(
        PHANDLE FileHandle,
        ACCESS_MASK DesiredAccess,
        POBJECT_ATTRIBUTES ObjectAttributes,
        PIO_STATUS_BLOCK IoStatusBlock,
        PLARGE_INTEGER AllocationSize,
        ULONG FileAttributes,
        ULONG ShareAccess,
        ULONG CreateDisposition,
        ULONG CreateOptions,
        PVOID EaBuffer,
        ULONG EaLength);
之后调用函数即可：
    RtlInitUnicodeString(&fileName, (PCWSTR)L"\\??\\c:\\temp\\test.txt");
        ZeroMemory(&osb, sizeof(IO_STATUS_BLOCK));
        InitializeObjectAttributes(&oa, &fileName, OBJ_CASE_INSENSITIVE, NULL, NULL);
        SysNtCreateFile(
            &fileHandle,
            FILE_GENERIC_WRITE,
            &oa,
            &osb,
            0,
            FILE_ATTRIBUTE_NORMAL,
            FILE_SHARE_WRITE,
            FILE_OVERWRITE_IF,
            FILE_SYNCHRONOUS_IO_NONALERT,
            NULL,
            0);
#### 使用visual studio查看反汇编代码：
工具->选项->启用地址级调试  
在调试过程中，Debug->window->disassembly
可以看到最基础的汇编代码及字节码
### 动态进行syscall
我们很多时候使用syscall不是直接调用，不会在代码里硬编码syscall的系统调用号。因为不同的系统调用号是不同的，所以我们需要进行动态syscall。
  * [Hell’s Gate：地狱之门](https://github.com/am0nsec/HellsGate/)  
这个工具遍历NtDLL的导出表，根据函数名hash，找到函数的地址。接着使用0xb8获取到系统调用号，之后通过syscall来执行一系列函数。  
通过TEB获取到dll的地址可以参考：[获取DLL的基地址](https://blog.csdn.net/weixin_43206704/article/details/87903325)  
解析pe结构，获取导出表  
遍历hash表和导出表，找到syscall的函数，通过标记的方式获得系统调用号:  
为什么匹配这几个字节就能找到syscall调用号呢？我们看这张图：  
发现syscall对应的固定汇编语句为
        4C8BD1 -> mov r10, rcx
      B8XXXXXXXX -> move eax,xx
      0f05 -> syscall
转化成内存数组即：
        if (*((PBYTE)pFunctionAddress + cw) == 0x4c
              && *((PBYTE)pFunctionAddress + 1 + cw) == 0x8b
              && *((PBYTE)pFunctionAddress + 2 + cw) == 0xd1
              && *((PBYTE)pFunctionAddress + 3 + cw) == 0xb8
              && *((PBYTE)pFunctionAddress + 6 + cw) == 0x00
              && *((PBYTE)pFunctionAddress + 7 + cw) == 0x00) {
              BYTE high = *((PBYTE)pFunctionAddress + 5 + cw);
              BYTE low = *((PBYTE)pFunctionAddress + 4 + cw);
              pVxTableEntry->wSystemCall = (high  Nt_Table;
      PBYTE ImageBase;
      PIMAGE_DOS_HEADER Dos = NULL;
      PIMAGE_NT_HEADERS Nt = NULL;
      PIMAGE_FILE_HEADER File = NULL;
      PIMAGE_OPTIONAL_HEADER Optional = NULL;
      PIMAGE_EXPORT_DIRECTORY ExportTable = NULL;
      PPEB Peb = (PPEB)__readgsqword(0x60);
      PLDR_MODULE pLoadModule;
      // NTDLL
      pLoadModule = (PLDR_MODULE)((PBYTE)Peb->LoaderData->InMemoryOrderModuleList.Flink->Flink - 0x10);
      ImageBase = (PBYTE)pLoadModule->BaseAddress;
      Dos = (PIMAGE_DOS_HEADER)ImageBase;
      if (Dos->e_magic != IMAGE_DOS_SIGNATURE)
          return 1;
      Nt = (PIMAGE_NT_HEADERS)((PBYTE)Dos + Dos->e_lfanew);
      File = (PIMAGE_FILE_HEADER)(ImageBase + (Dos->e_lfanew + sizeof(DWORD)));
      Optional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)File + sizeof(IMAGE_FILE_HEADER));
      ExportTable = (PIMAGE_EXPORT_DIRECTORY)(ImageBase + Optional->DataDirectory[0].VirtualAddress);
      PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)(ImageBase + ExportTable->AddressOfFunctions));
      PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)ImageBase + ExportTable->AddressOfNames);
      PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)ImageBase + ExportTable->AddressOfNameOrdinals);
      for (WORD cx = 0; cx NumberOfNames; cx++)
      {
          PCHAR pczFunctionName = (PCHAR)((PBYTE)ImageBase + pdwAddressOfNames[cx]);
          PVOID pFunctionAddress = (PBYTE)ImageBase + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];
          if (strncmp((char*)pczFunctionName, "Zw",2) == 0) {
             printf("Function Name:%s\tFunction Address:%p\n", pczFunctionName, pFunctionAddress);
              Nt_Table[(int)pFunctionAddress] = (string)pczFunctionName;
          }
      }
      int index = 0;
      for (std::map::iterator iter = Nt_Table.begin(); iter != Nt_Table.end(); ++iter) {