time, our dependency tracking system must ﬁnd the
maximum number of highly abnormal behaviors.
Runtime Efﬁciency. The proposed prioritization tech-
nique must not introduce a signiﬁcant amount of addi-
tional runtime overhead to the underlying dependency
tracking system.
Particularly, when analyzing the aforementioned attack
scenario, we hope PRIOTRACKER to directly reach the ftp
branch without touching the majority of run-parts branch in
advance, so that provided a temporal limit is applied to the
analysis, the real attack can still be revealed in time.
1) System Architecture.: To achieve these goals, we
design the architecture of our system, depicted in Figure 2.
PRIOTRACKER consists of three major components, i.e., a
priority-based causality tracker, a reference model builder and
a reference database. Our system is designed to be deployed
in a large-scale and homogeneous enterprise IT environment.
In this environment, OS-level events are collected from every
individual host and are pushed to a stream processing platform,
and are eventually stored into the event database.
We retrieve low-level system events from Linux and Win-
dows machines using kernel audit [26] and ETW kernel event
tracing [27], respectively. Speciﬁcally, we collect three types
of events: 1) ﬁle events, including ﬁle read, write and execute,
2) process events, such as process create and destroy, and
3) network events, including socket create, destroy, read and
write.
Our reference model builder subscribes to the stream in
order to count the occurrences of the same events over all
the hosts. The computed occurrences are then saved into our
key-value store -based reference database so that they can
be efﬁciently queried by causality tracker. Once an incident
happens, the triggering event is presented to our causality
tracker to start a dependency analysis. The causality tracker
will consequently search for related events from database. At
the same time, it also queries reference database in order to
compute the priority score for the events to be investigated. An
event bearing higher priority score will be analyzed ﬁrst. In the
end, the causal dependencies are generated based upon event
relationships, and are presented as result graphs for further
human inspection.
2) Threat Model.: We follow the threat model of pre-
vious work [4]–[9], [28]. Particularly, we deﬁne the trusted
computing base (TCB) for causality analysis to be the kernel
mechanisms, the backend database that stores and manages
audit logs, and the causality tracker. With respect to our TCB,
we assume that audit logs collected from kernel space [26],
[27] are not tampered, since kernel is trusted. Kernel-level
attacks that deliberately compromise security auditing systems
are beyond the scope of this study.
We do consider that external attackers or insiders have full
knowledge of “normal” activities, so that they can intentionally
craft attacks with seemingly normal operations and may poison
our reference database using a burst of repeated malicious
activities.
Fig. 2: Architecture Overview of PRIOTRACKER.
III. TIME-CONSTRAINED ANOMALY
PRIORITIZED CAUSALITY TRACKING
In this section, we present
the design details of time-
constrained anomaly prioritized causality tracking. First, we
give the basic algorithm of PRIOTRACKER. Next, we discuss
the features considered when computing the priority score of a
system event. Then, we introduce the Hill Climber algorithm
used for weight assignment in the priority score.
A. Basic Algorithm
In practice, attack investigation time is not unlimited. Our
PRIOTRACKER considers time as a key factor and aims to
track more abnormal behaviors with higher potential impact
with a certain time limit.
Tracking tasks start from a detection point, which usually
is an intrusion alert detected by the monitoring system. Al-
gorithm 1 illustrates our basic algorithm to perform a time-
constrained causality tracking. In general, we follow the prior
technique [4] to build the dependencies between OS-level
events. However, to enable timely security causality analysis,
we prioritize the dependency tracking of abnormal events, in
contrast to the previous work which blindly selects the next
event for processing.
More concretely, our dependency tracker internally main-
tains a priority queue PQ to hold all the events that wait for
processing. This queue is sorted in descending order based
on the priority scores of enclosed events, so that the event
with highest priority is always placed at the head and will
be processed ﬁrst. Upon receiving a starting event se, our
tracker computes its priority score using function P riority()
and adds it into this queue. Then, PRIOTRACKER iteratively
processes each item until the queue becomes empty or the
given analysis time limit Tlimit is reached. In each iteration,
it fetches an event from the head of queue, adds this event to
the result graph G, and invokes COMPUTEDEPS() to compute
its causal dependencies based on temporal relationships [4].
COMPUTEDEPS() returns a set of events E for further analysis.
Then, we compute the priority score for each element in this
set before inserting them into the priority queue. In the end,
Algorithm 1 outputs the dependency graph G for forensic
analysis. Events that are not tracked within the time limit
4
Stream Processing Platform Causality Tracker Event Database Collecting OS-Level Events Reference Model Builder PrioTracker Incident Dependency Graph Reference Database KV P Q ← ∅
PQ.INSERT(se, P riority(se))
while !PQ.ISEMPTY() and Tanalysis < Tlimit do
Algorithm 1 Dependency Tracking Algorithm
1: procedure PRIOTRACK(se, Tlimit)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: end procedure
e ← PQ.DEQUEUE()
G ← G ∪ e
E ← COMPUTEDEPS(e)
for ∀e(cid:48) ∈ E do
PQ.INSERT(e(cid:48), P riority(e(cid:48)))
end for
end while
return G
are not included in the resulting graph but are stored in the
database for further analysis.
PRIOTRACKER supports across-host tracking by perform-
ing IP channel event matching. For an IP channel event on host
A talking to host B, we search for its match on host B with
the reverse of the IP and port information, which are, within
some tolerance, occurring at the same time.
B. Priority Score
1) Important Factors: We consider three factors to be
important when determining the priority of system events to
be processed.
•
•
•
Rareness of Events. In general, attack behaviors and
malware activities are deviated from massive normal
operations. Particularly, APT incidents often enable
zero-day attacks, which by nature have never been
observed in regular systems. As a result, special at-
tention needs to be paid to rarer events compared to
routine activities.
Fanout. As illustrated in our motivating example,
routine system operations can be performed in a batch,
which consists of multiple sub-operations. Besides,
regular system activities (e.g., creating or accessing
numerous temporary ﬁles) may happen periodically
over time. This in turn generates events with very high
fanout in a dependency graph (up to tens of thou-
sands), which does not contribute to attack forensics.
In addition, analysis of causalities with high fanout
can be very time-consuming and therefore may delay
or even disable timely investigation of other attack
traces. Essentially, there exists a trade-off between
time effectiveness and analysis coverage, where a
balance needs to be struck.
Dataﬂow Termination. To invade an enterprise sys-
tem, attackers have to ﬁrst exert an external inﬂuence
on internal system objects (e.g., malware dropping,
malicious input to vulnerable network services, etc.)
to persist; then, they can further use the compromised
persistent objects (e.g., malicious executables, victim
long-running services) to cause impact on other parts
of the system. Consequently, a ﬁle without being
written in the past is less critical for backtracking
intrusions; a ﬁle the has never been read or executed so
far is less interesting for tracking attack consequences
forward. The former one is introduced by prior work
as the “read-only” pruning heuristic [4] in backtracker.
The latter case, however, cannot be completely ignored
because a currently “write-only” ﬁle may still be
accessed at a future point.
Hence, to generate the priority score for each event, we
need to ﬁrst compute the scores for edge rareness, fanout and
dataﬂow termination, respectively.
2) Rareness Score: First, we deﬁne the rareness score of
an event rs(e) base upon our reference model:
(cid:40)
rs(e) =
if e has not been observed by reference model
1,
ref (e) , otherwise
1
ref (e) is the reference score of event e, which is computed
by reference model according to the historical occurrence of e.
We elaborate the computation of reference score in Section IV.
3) Fanout Score: Second, we formalize the fanout score
of an event f s(e) to be the reciprocal of its fanout: f s(e) =
f anout(e). An event with higher fanout score will be examined
ﬁrst. Note that when we compute fanout, we do not consider
outgoing socket edges whose destinations are external net-
works or speciﬁc internal servers (e.g., DNS), which are not
under our monitoring and thus will not be further tracked in
the ﬁrst place.
1
We prefer edges with low fanout due to the consideration of
both security and efﬁciency. Analyzing causal relations with
huge fanout is often very slow because dependencies grow
exponentially. Thus, putting them ﬁrst may lose the chance to
explore other system dependencies which could also be caused
by attacks. In contrast, analysis of causalities with lower fanout
is comparatively simpler and costs much less time to complete.
Even if, in the worst-case scenario, fast-tracking an event with
low fanout does not reveal any attack traces, it only introduce
a small amount of delay to the examination of other complex
causalities.
We admit, as a potential evasion technique, an attacker may
attempt to leverage system causality with high fanout to hide
their attack footprints, in order to delay our analysis. However,
it is worth noting that, though we deprioritize paths with high
fanout, we do not prune off them as prior work [4] does. If
an attack is indeed buried in branches bearing high fanout,
given enough time and computation resources, our tracker
can eventually reach that point. Besides, an attack cannot be
launched solely using complex dependencies with high fanout,
while the other portion of attack-related causalities can still be
discovered by our approach from numerous normal edges in a
faster fashion. Since the entire attack footprints are logically
connected, any uncovered portion can help human experts ﬁnd
the remaining ones. On the contrary, without prioritization,
processing benign dependencies with huge fanout can exces-
sively consume computing resources. Consequently, none of
attack traces can be reached before analysis deadline, and
therefore the entire attack is missed.
4) Dataﬂow Termination: Terminated dataﬂow is a spe-
cial case, where fanout equals zero. Therefore, we complete
5
our deﬁnition of fanout score by also checking whether an
event has further impacts:
f s(e) =
if e reaches a read-only ﬁle in backtracking
if e reaches a write-only ﬁle in forward tracking
1
σ,
f anout(e) , otherwise
0,
max f (E, (α, β)) =
(cid:88)
e∈E
Hence, if backward dataﬂow is terminated due to read-only
ﬁles, we deprioritize the analyses of associated events via
assigning 0 to the score. However, when forward dataﬂow
ends with “write-only” ﬁles, we do not completely rule out the
possibility that these ﬁles will later be accessed. Therefore, we
instead give them a lower but non-zero score σ. Empirically,
we set σ to be 0.3.
5) Priority Score: The priority score of each event can be
derived from the composition of these factors.
Deﬁnition 1. The Priority Score of a system event,
P riority(e), is the weighted sum of rareness score rs(e) and
fanout score f s(e):
P riority(e) = α × rs(e) + β × f s(e)
(1)
, where α and β are the weights that need to be determined.
An event with higher priority score will be investigated ﬁrst.
C. Weight Assignment
The next step is to give a proper weight
to each pa-
rameter of the priority function. Ideally, when weights are
correctly assigned, we expect our dependency tracker to ﬁnd
the maximum amount of attack traces within a ﬁnite time
bound. Nevertheless, it is very hard, if not impossible, to
measure the relatedness between a single event between two
OS-level objects and an attack, especially before the attack is
completely known. This is by nature due to the diversity and
randomness of cyber crimes committed by human attackers,
and by itself can be a challenging research problem. Therefore,
to date, expert knowledge has to be kept in the loop to evaluate
automatically generated security causality graphs and to draw
a decisive conclusion.
To address this problem, we instead use rareness as a
metric to approximate the connection between a causal re-
lation and unknown attacks. As a result, our goal of weight
assignment is to enable our tracker to uncover as many unusual
events as possible within a certain time limit. Admittedly, an
adversarial could utilize many normal system operations when
launching an attack, and therefore the overall amount of rare
events does not necessarily indicate the presence of attacks.
However, at certain points of a stealthy crime, an attacker has
to perform some harmful and thus abnormal operations, such
as data exﬁltration or system tampering, in order to serve the
purpose. Then, a discovery of more unusual activities may
increase the chance of capturing real attack footprints.
To achieve the discovery of the maximum number of
unusual events, we need to strike a balance among the afore-
mentioned factors. On one hand, at every step of dependency
tracking, we always expect to choose a rare and impactful event
over a common or uninteresting one. On the other hand, we
also hope to quickly explore the entire search space, and ﬁnd
the direction that leads to more rare activities. Essentially, this
is a global optimization problem, which we deﬁne as follows:
Deﬁnition 2. The Weight Assignment is an optimization
problem to maximize the result of an objective function for a
given set of starting events E:
EdgeCountθ(P rioT rack(α,β)(e, Tlimit))
(2)
s.t. 0 ≤ α ≤ 1, α + β = 1
, where α and β are the weight parameters for rareness, fanout
and dataﬂow scores respectively. These scores are further used
to derive the priority score in dependency tracking P rioT rack.