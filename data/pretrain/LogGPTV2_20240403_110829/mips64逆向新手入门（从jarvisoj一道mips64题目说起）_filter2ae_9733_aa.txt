# mips64逆向新手入门（从jarvisoj一道mips64题目说起）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
CTF比赛的逆向已经发展到向arm和mips等嵌入式架构发展了，国内可以看到关于mips逆向的一些基础文章，但是对于mips64却介绍比较少，这里通过jarvisoj一道mips64的题目（来自于某强网杯）来看看mips64的一些坑，以及介绍新手如何入门逆向mips64。
题目链接
[Here](https://dn.jarvisoj.com/challengefiles/mips64.a85474526ff22aa84be8bf2c5a1c0f4f)
file一下程序，是mips64 rel2，静态编译且没有符号的。
    root@kali:/mnt/hgfs/ctfsample/jarvisoj/mips64# file mips64
    mips64: ELF 64-bit MSB executable, MIPS, MIPS64 rel2 version 1 (SYSV), statically linked, BuildID[sha1]=1fd09709a4c48cd14efe9454d332d16c1b096fd0, for GNU/Linux 3.2.0, stripped
拖入IDA64（7.0版本）分析，看到一堆sub函数，但是没有符号信息。
也能看到关键的字符串，但是无法交叉引用查找调用点
## 准备调试环境
###  安装qemu
在linux中安装qemu
    sudo apt-get install qemu qemu-system qemu-user-static
然后尝试执行mips64的程序
    qemu-mips64 ./mips64
可以看到程序运行效果如下
###  编译mips64-linux-gdb
我是从源码编译mips64版的gdb开始，环境是kali2008(如下），默认配置gdb 8.1.1，所以选择同版本的gdb源码进行编译。
    Linux kali 4.17.0-kali1-amd64 #1 SMP Debian 4.17.8-1kali1 (2018-07-24) x86_64 GNU/Linux
1.从gdb官网[http://www.gnu.org/software/gdb/download/下载[gdb-8.1.1.tar.gz](https://ftp.gnu.org/gnu/gdb/gdb-8.1.1.tar.gz](http://www.gnu.org/software/gdb/download/%E4%B8%8B%E8%BD%BD%5Bgdb-8.1.1.tar.gz%5D\(https://ftp.gnu.org/gnu/gdb/gdb-8.1.1.tar.gz))
2.将gdb-8.1.1.tar.gz 拷贝到任何你愿意的Linux目录下, 解压
    tar -zxvf gdb-8.1.1.tar.gz
3.编译mips64-linux-gdb
到目录gdb-8.1.1下，编译命令
    cd gdb-8.1.1
    ./configure --target=mips64-linux --prefix=/usr/local/mips64-gdb -v
    make
    make install
安装成功后，可以在 /usr/local/mips64-gdb/bin 目录中看到这两个文件
mips64-linux-gdb mips64-linux-run
4.运行mips64-linux-gdb
    root@kali:/usr/local/mips64-gdb/bin# /usr/local/mips64-gdb/bin/mips64-linux-gdb
    GNU gdb (GDB) 8.1.1
    Copyright (C) 2018 Free Software Foundation, Inc.
    License GPLv3+: GNU GPL version 3 or later 
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
    and "show warranty" for details.
    This GDB was configured as "--host=x86_64-pc-linux-gnu --target=mips64-linux".
    Type "show configuration" for configuration details.
    For bug reporting instructions, please see:
    .
    Find the GDB manual and other documentation resources online at:
    .
    For help, type "help".
    Type "apropos word" to search for commands related to "word".
    (gdb)
5.一些说明
  * 使用IDA7.0 也可以链接gdbserver，可以设置断点，但是在调试过程中，F8（单步执行）经常跑飞，所以IDA会作为静态分析，就像pwn那样。
  * 网上还有介绍使用 gdb-multiarch 调试的，直接apt-get可以安装，效果应该与源码编译雷同，有兴趣的朋友可以试试。
###  使用 gdb 调试qemu
启动qemu时，使用-g 9999 开启 gdbserver ，9999是调试端口号，gdb中用这个端口号链接gdbserver。
    # qemu-mips64 -g 9999 ./mips64
然后在mips64-linux-gdb中链接gdbserver调试
  * file 指定被调试的文件
  * set architecture 根据目标程序的类型选择，参看之前file的结果，也可以用tab查看可以设置为什么类型。
  * target remote 是链接远程gdbserver，链接后程序停在 0x0000000120003c50 ，这是程序的入口地址，用IDA可以验证
    (gdb) file mips64
    Reading symbols from mips64...(no debugging symbols found)...done.
    (gdb) set architecture mips:isa64r2
    The target architecture is assumed to be mips:isa64r2
    (gdb) target remote localhost:9999
    Remote debugging using localhost:9999
    0x0000000120003c50 in ?? ()
mips64-linux-gdb调试指令和gdb是一样的，常用的有：
    i r #查看所有寄存器
    i fl #查看所有fpu
    c  #继续程序到下一个断点
    ni #单步执行
    x /10i $pc #查看当前指令情况
## mips64基础知识
可以参考附录里面各种mips汇编指令的介绍，这里重点介绍几点与x86逆向调试不同的地方，了解了这些会让逆向事半功倍。
1.函数的输入参数分别在寄存器a0,a1,a2…中，关注这几个寄存器的值，就可以知道某个函数如sub_120022504(a0,a1,a2)的输入参数  
2.mips64的跳转指令时（b开头的指令），会执行跳转后一条语句之后再跳，这叫分支延迟。
如下面的代码片段，bc1f是跳转指令，满足条件跳转至 loc_120003B24 。无论是否满足跳转条件，都会先执行 ld $t9,
-0x7F68($gp) 那条指令，再跳到 loc_120003B24 或者 ld $a0, -0x7F78($gp) 。gdb断点只能下到
0x120003C24 或 0x120003C2C，无法下到0x120003C28。
    .text:0000000120003C20 loc_120003C20:
    .text:0000000120003C20                 c.lt.s  $fcc6, $f1, $f0
    .text:0000000120003C24                 bc1f    $fcc6, loc_120003B24
    .text:0000000120003C28                 ld      $t9, -0x7F68($gp)
    .text:0000000120003C2C                 ld      $a0, -0x7F78($gp)
    .text:0000000120003C30                 ld      $a1, -0x7F58($gp)
3.本程序涉及大量的fpu操作（浮点运算单元），可在gdb中使用`i fl`（info float）指令查看fpu，下文的f0、f12等都是fpu。
4.fpu会有single（单精度）和double（双精度）表示，以上图f0为例，其单精度值（flt)为4，双精度值(dbl)为13.000001922249794。如果汇编指令是
c.lt.s (最后的s表示以单精度的计算），会判断 $f1（flt) < $f0（flt)，即4是否小于0.5，而不是13是否小于122。
    .text:0000000120003BA8                 c.lt.s  $f1, $f0         
    .text:0000000120003BAC                 bc1f    loc_120003BCC    
    .text:0000000120003BB0                 ld      $v0, -0x7F78($gp)  
    .text:0000000120003BB4                 lwc1    $f1, -0x116C($v0)
c.lt.s 意思大概是 compare less than in single ( c.lt.d 则是在double，即双精度范围计算）  
bc1f : jump if compare result is false （f表示false，bc1t 表示 true才跳）
5.程序中多次出现以下片段，多次出现的`-0x7f78`是程序里面一个基地址，将基地址赋值给$v0寄存器，第二句再根据这个基地址（$v0），取一个常量到寄存器或fpu（$f1
= [$v0-0x1164])。
    ld      $v0, -0x7F78($gp)
    lwc1    $f1, -0x1164($v0)
## 逆向过程
qemu使用-strace参数，让程序输出更多的调试信息
可以看到系统使用了write(1,0x200b97d0,40)来输出“Welcome to QWB, Please input your
flag:”这40个字符，联想到x64架构1表示stdout,0x200b97d0表示字符串地址，40表示输出长度
从write(1,0x200b97d0,40)到write(1,0x200b97d0,12)之间，有一个Linux(0,4832599008,1024,0,4832599008,4)，猜测就是一个read函数系统调用了，要逆向就要知道read函数到输出Wrong
Flag！之间发生什么，调用了哪些函数。
## 定位输入点
由于gdbserver调试不能用ctrl+c中断再下断点，所以从IDA将所有可能是函数的地址复制出来
编辑成为gdb断点的格式，并粘贴到gdb中，大约600多个断点
用qemu-mips64 -strace -g 9999
./mips64启动程序，在gdb侧链接gdbserver后不停的按c，直至程序堵塞等待输入，这是看到最后一个触发的断点是：0x0000000120022404，说明输入在这里附近
然后在程序随便输入内容，如1234回车，让程序继续执行。在gdb一路c，直到看到程序输出Wrong Flag!，记录这段时间的断点。
    0x0000000120014740 in ?? ()
    0x0000000120014740 in ?? ()
    0x000000012001f110 in ?? ()
    0x000000012000d6b0 in ?? ()
    0x000000012001f110 in ?? () 
    0x00000001200206e0 in ?? () 
    0x00000001200138a0 in ?? () 
    0x0000000120012978 in ?? ()
    0x0000000120012120 in ?? () 
    0x000000012000ffc8 in ?? () 
    0x00000001200112f0 in ?? () 
    0x0000000120022504 in ?? ()
gdb中按d清理所有断点，重新设置断点为上述函数
    b* 0x0000000120014740
    b* 0x0000000120014740
    b* 0x000000012001f110
    b* 0x000000012000d6b0
    b* 0x000000012001f110
    b* 0x00000001200206e0
    b* 0x00000001200138a0
    b* 0x0000000120012978
    b* 0x0000000120012120
    b* 0x000000012000ffc8