src_rrep_sync_id and target_rrep_sync_id values are used internally by
xDB Replication Server and are not needed for the manual conflict resolution
process.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 357
EDB Postgres Replication Server User’s Guide
 Table xdb_pub_database in the control schema associates the database
identifiers src_db_id and target_db_id with the master node attributes such
as the database name, IP address, and port.
 Column table_id is the identifier of the publication table on which the conflict
occurred. Association of the table_id value with the publication table attributes
such as its name and schema is found in each master node in
_edb_replicator_pub.rrep_tables.
 Column pk_value contains text indicating the primary key value that resulted in
the conflict. The text is formatted as column_name=value. If the primary key is
composed of two or more columns, each column and value pair is separated by
the keyword AND such as column_1=value_1 AND column_2=value_2. This
provides the primary key of the row in the publication table designated by
table_id that resulted in the conflict.
 Column resolution_status indicates the status of the conflict. Possible
values are P (pending) or C (completed – the conflict has been resolved). This
status appears in the Resolution Status column of the Conflict History tab.
 Column win_db_id can be used to record the database identifier of the master
node that contains the “winning” (accepted) transaction. This information appears
in the Winning DB column of the Conflict History tab.
The following shows the Conflict History tab prior to updating the xdb_conflicts
table.
Figure 6-51 - Pending uniqueness conflict
The entry for the pending insert/insert conflict on the deptno primary key value of 50
can be located in xdb_conflicts with the following query for this example:
mmrnode_a=# SELECT * FROM _edb_replicator_pub.xdb_conflicts
mmrnode_a-# WHERE pk_value = 'deptno=50'
mmrnode_a-# AND conflict_type = 'II'
mmrnode_a-# AND resolution_status = 'P';
-[ RECORD 1 ]-------+--------------------------
src_db_id | 1
target_db_id | 22
src_rrep_sync_id | 44713808
target_rrep_sync_id | 44718040
table_id | 31
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 358
EDB Postgres Replication Server User’s Guide
conflict_time | 21-AUG-15 15:34:55.134171
resolution_status | P
resolution_strategy |
resolution_time |
alert_status |
conflict_type | II
win_db_id | 0
win_rrep_sync_id | 0
notes |
pk_value | deptno=50
This entry appears in the Postgres Enterprise Manager Client as shown by the following:
Figure 6-52 - Pending conflict in xdb_conflicts
Change the value in column resolution_status from P (pending) to C (completed) to
indicate this conflict has been resolved. The value in winning_db_id is changed to 22
to indicate master node mmrnode_b contains the winning transaction.
The SQL statement to perform this update for the mmrnode_a to the mmrnode_b
synchronization conflict is the following:
UPDATE _edb_replicator_pub.xdb_conflicts SET
resolution_status = 'C',
win_db_id = 22
WHERE pk_value = 'deptno=50'
AND conflict_type = 'II'
AND resolution_status = 'P';
The following is the updated xdb_conflicts entry:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 359
EDB Postgres Replication Server User’s Guide
Figure 6-53 - Resolved conflict in xdb_conflicts
When viewed in the Conflict History tab, the entry now shows Resolved instead of
Pending in the Resolution Status column, and the Winning DB column shows the
address of master node mmrnode_b.
Figure 6-54 - Resolved uniqueness conflict
6.6.10.5 Correction Using New Transactions
Another method for bringing all the publication tables to a consistent state is by removing
any changes caused by the conflicting transactions and then issuing new, corrected
transactions at one master node, which you allow the multi-master replication system to
synchronize to all other master nodes.
Referring back to the uniqueness conflict on the dept table, instead of correcting the
erroneous row and inserting the row into the master node where it is missing as described
in Section 6.6.10.4, you can delete the conflicting rows from all master nodes, then insert
the correct row in one master node and let the multi-master replication system
synchronize the correct row to all master nodes.
Step 1: Manually delete the inserted row from the publication tables in all master nodes
using the transaction block described in Section 6.6.10.2.
On mmrnode_a, delete the erroneous row with the following transaction block:
BEGIN;
UPDATE _edb_replicator_pub.rrep_properties SET value = current_timestamp
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 360
EDB Postgres Replication Server User’s Guide
WHERE key = 'last_mcr_timestamp';
DELETE FROM edb.dept WHERE deptno = 50;
COMMIT;
This is shown by the following:
mmrnode_a=# BEGIN;
BEGIN
mmrnode_a=# UPDATE _edb_replicator_pub.rrep_properties SET value =
current_timestamp
mmrnode_a-# WHERE key = 'last_mcr_timestamp';
UPDATE 1
mmrnode_a=# DELETE FROM edb.dept WHERE deptno = 50;
DELETE 1
mmrnode_a=# COMMIT;
COMMIT
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
On mmrnode_b, delete the row even though the transaction created the correct result:
mmrnode_b=# BEGIN;
BEGIN
mmrnode_b=# UPDATE _edb_replicator_pub.rrep_properties SET value =
current_timestamp
mmrnode_b-# WHERE key = 'last_mcr_timestamp';
UPDATE 1
mmrnode_b=# DELETE FROM edb.dept WHERE deptno = 50;
DELETE 1
mmrnode_b=# COMMIT;
COMMIT
mmrnode_b=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
On mmrnode_c, no changes are required as the conflicting transaction did not insert a
new row into the table on this node:
mmrnode_c=# SET search_path TO edb;
SET
mmrnode_c=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 361
EDB Postgres Replication Server User’s Guide
Step 2: Rerun the correct transaction on one master node with the multi-master
replication system running. Do not run this within the transaction block described in
Section 6.6.10.2 as the objective is to synchronize it to all master nodes.
For this example, the correct INSERT statement is executed on mmrnode_a:
On mmrnode_a:
mmrnode_a=# INSERT INTO dept VALUES (50, 'MARKETING', 'LOS ANGELES');
INSERT 0 1
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
Step 3: Perform synchronization replication.
The same rows now appear in the publication table on all master nodes.
On mmrnode_a;
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
On mmrnode_b;
mmrnode_b=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
On mmrnode_c;
mmrnode_c=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 362
EDB Postgres Replication Server User’s Guide
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
Step 4: In the control schema of the publication database currently designated as the
controller database, modify the entry in the xdb_conflicts table to indicate the
conflict has been resolved as in Step 2 of Section 6.6.10.4.
Figure 6-55 - Resolved conflict in xdb_conflicts
6.7 Viewing Conflict History
Conflict history shows the following types of events that occurred during synchronization
replication:
 Uniqueness conflicts where two or more master nodes attempted to insert a row
with the same primary key value or unique column value.
 Update/update conflicts where two or more master nodes attempted to update the
same column of the same row
 Update/delete and delete/update conflicts where one master node attempted to
update a row that was deleted by another master node.
See Section 6.6 for more information on conflict resolution.
Note: The conflict history can be viewed from the Publication node under any master
node in the multi-master replication system. The history shows conflicts on all
publication tables of all master nodes that occurred during synchronization, and hence,
the history appears the same regardless of the master node under which it is viewed.
Note: For uniqueness (insert/insert) conflicts the number of entries appearing under the
Conflict History tab differs when the trigger-based method of synchronization replication
is used as compared to the log-based method. If the trigger-based method is used, a single
insert/insert conflict appears as two entries in the conflict history. Each entry differs in
that the source and target database fields for the two conflicting master nodes are
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 363
EDB Postgres Replication Server User’s Guide
interchanged. If the same conflict occurs when the log-based method is used, only one
entry appears in the conflict history.
The following steps describe how to view the conflict history.
Step 1: Select any Publication node under a Database node representing a master node.
Tabs labeled General, Realtime Monitor, Replication History, and Conflict History
appear.
Figure 6-56 - Selecting a publication on which to view conflict history
Step 2: Click the Conflict History tab to show conflict history. Click the Refresh button
to ensure all conflicts are listed.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 364
EDB Postgres Replication Server User’s Guide
Figure 6-57 - Conflict History tab
Step 3: Use the Conflict Display Criteria drop-down list to display only conflicts of the
chosen status.
Figure 6-58 - Selecting conflict history by status
Step 4: Click the View Data link to show the details of a particular conflict.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 365
EDB Postgres Replication Server User’s Guide
Note: The View Data link and Conflict Details window are available only for multi-
master replication systems configured with the trigger-based method of synchronization
replication. There is no View Data link or Conflict Details window for multi-master
replication systems configured with the log-based method of synchronization replication.
Figure 6-59 - Conflict Details window
6.8 Updating the Conflict Resolution Options
A current conflict resolution option on a publication table can be changed. See Section
6.6 for information on conflict resolution.
Step 1: Make sure the publication server whose node is the parent of the publication you
wish to change is running and has been registered in the xDB Replication Console you
are using. See Section 5.2.1 for directions on starting and registering a publication server.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 366
EDB Postgres Replication Server User’s Guide
Step 2: Select the Publication node under the Publication Database node representing the
master definition node.
Figure 6-60 - Selecting a publication in which to update conflict resolution options
Step 3: Open the Conflict Resolution Options dialog box in any of the following ways:
 From the Publication menu, choose Update Publication, then Conflict Resolution
Options.
 Click the secondary mouse button on the Publication node, choose Update
Publication, and then choose Conflict Resolution Options.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 367
EDB Postgres Replication Server User’s Guide
Figure 6-61 - Opening the Conflict Resolution Options dialog box
Step 4: For each table, you can select the primary conflict resolution strategy and a
standby strategy by clicking the primary mouse button over the appropriate box to expose
a drop-down list of choices.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 368
EDB Postgres Replication Server User’s Guide
Figure 6-62 - Updating conflict resolution strategies
Step 5: Click the Update button, and then click OK in response to Conflict Resolution
Options Updated Successfully.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 369
EDB Postgres Replication Server User’s Guide
Figure 6-63 - Successfully updated conflict resolution options
6.9 Enabling/Disabling Table Filters on a Master Node
Table filters must first be defined in a set of available table filters in the publication
before they can be enabled on a master node. See Section 6.2.3 for information on
defining table filters in a multi-master replication system.
Note: See Section 2.2.12.3 for table setup requirements for a log-based replication
system as well as general restrictions on the use of table filters.
The following are the steps for enabling or disabling table filters on an existing master
node.
Step 1: Make sure the publication server whose node is the parent of the master nodes of
the replication system is running and has been registered in the xDB Replication Console
you are using. See Section 5.2.1 for directions on starting and registering a publication
server.
Step 2: Select the Publication Database node corresponding to the master node on which
you wish to enable or disable individual filter rules.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 370
EDB Postgres Replication Server User’s Guide
Figure 6-64 - Selecting a master node on which to enable or disable filter rules
Step 3: Click the secondary mouse button on the Publication Database node and choose
Update Filter Rule.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 371
EDB Postgres Replication Server User’s Guide
Figure 6-65 - Opening the Filter Rules tab on a master node
Note: If you wish to enable or disable filter rules on the current master definition node,
you must first switch the role of the master definition node to another master node in
order to expose the Update Filter Rule option in the master node context menu. See
Section 6.10 for directions on switching the master definition node.
The master node you choose as the new master definition node should contain a superset
of, or at least an equivalent set of data as the current master definition node. The reason
for this is to ensure that the former master definition node contains the complete set of
data satisfying the filtering criteria after you take a snapshot from the new master
definition node to the former master definition node on which you just enabled the table
filters.
Step 4: In the Filter Rules tab check or uncheck the boxes to specify the filter rules to
enable or disable on the master node. At most one filter rule may be enabled on any given
table. Click the Save button.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 372
EDB Postgres Replication Server User’s Guide
Figure 6-66 - Filter Rules tab
Step 5: A confirmation box appears presenting a warning message and a