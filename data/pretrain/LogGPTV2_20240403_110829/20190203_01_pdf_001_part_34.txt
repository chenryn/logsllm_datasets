### Internal Use of `src_rrep_sync_id` and `target_rrep_sync_id`
The `src_rrep_sync_id` and `target_rrep_sync_id` values are used internally by the xDB Replication Server and are not required for the manual conflict resolution process.

---

### Table `xdb_pub_database` in the Control Schema
The `xdb_pub_database` table in the control schema associates the database identifiers `src_db_id` and `target_db_id` with master node attributes such as the database name, IP address, and port.

- **Column `table_id`**: This is the identifier of the publication table where the conflict occurred. The association of the `table_id` value with the publication table attributes (such as its name and schema) can be found in each master node in `_edb_replicator_pub.rrep_tables`.

- **Column `pk_value`**: This column contains text indicating the primary key value that caused the conflict. The text is formatted as `column_name=value`. If the primary key consists of two or more columns, each column and value pair is separated by the keyword `AND`, e.g., `column_1=value_1 AND column_2=value_2`. This provides the primary key of the row in the publication table designated by `table_id` that resulted in the conflict.

- **Column `resolution_status`**: This column indicates the status of the conflict. Possible values are:
  - `P` (pending)
  - `C` (completed â€“ the conflict has been resolved)

  This status appears in the "Resolution Status" column of the Conflict History tab.

- **Column `win_db_id`**: This column can be used to record the database identifier of the master node that contains the "winning" (accepted) transaction. This information appears in the "Winning DB" column of the Conflict History tab.

---

### Example: Conflict History Tab Before Updating `xdb_conflicts` Table
The following shows the Conflict History tab before updating the `xdb_conflicts` table.

**Figure 6-51 - Pending Uniqueness Conflict**

The entry for the pending insert/insert conflict on the `deptno` primary key value of 50 can be located in `xdb_conflicts` with the following query:

```sql
mmrnode_a=# SELECT * FROM _edb_replicator_pub.xdb_conflicts
WHERE pk_value = 'deptno=50'
AND conflict_type = 'II'
AND resolution_status = 'P';
```

**Query Result:**

| src_db_id | target_db_id | src_rrep_sync_id | target_rrep_sync_id | table_id | conflict_time | resolution_status | resolution_strategy | resolution_time | alert_status | conflict_type | win_db_id | win_rrep_sync_id | notes | pk_value |
|-----------|--------------|------------------|---------------------|----------|---------------|-------------------|--------------------|-----------------|--------------|---------------|-----------|------------------|-------|----------|
| 1         | 22           | 44713808         | 44718040            | 31       | 21-AUG-15 15:34:55.134171 | P                 |                    |                 |              | II            | 0         | 0                |       | deptno=50 |

This entry appears in the Postgres Enterprise Manager Client as shown in Figure 6-52.

**Figure 6-52 - Pending Conflict in `xdb_conflicts`**

To resolve the conflict, change the value in the `resolution_status` column from `P` (pending) to `C` (completed). Additionally, set the `win_db_id` to 22 to indicate that the master node `mmrnode_b` contains the winning transaction.

**SQL Update Statement:**

```sql
UPDATE _edb_replicator_pub.xdb_conflicts SET
resolution_status = 'C',
win_db_id = 22
WHERE pk_value = 'deptno=50'
AND conflict_type = 'II'
AND resolution_status = 'P';
```

**Updated `xdb_conflicts` Entry:**

**Figure 6-53 - Resolved Conflict in `xdb_conflicts`**

When viewed in the Conflict History tab, the entry now shows "Resolved" instead of "Pending" in the "Resolution Status" column, and the "Winning DB" column shows the address of the master node `mmrnode_b`.

**Figure 6-54 - Resolved Uniqueness Conflict**

### 6.6.10.5 Correction Using New Transactions
Another method to bring all publication tables to a consistent state is by removing any changes caused by the conflicting transactions and then issuing new, corrected transactions at one master node, which you allow the multi-master replication system to synchronize to all other master nodes.

#### Step 1: Manually Delete the Inserted Row
Manually delete the inserted row from the publication tables in all master nodes using the transaction block described in Section 6.6.10.2.

**On `mmrnode_a`:**

```sql
BEGIN;
UPDATE _edb_replicator_pub.rrep_properties SET value = current_timestamp
WHERE key = 'last_mcr_timestamp';
DELETE FROM edb.dept WHERE deptno = 50;
COMMIT;
```

**Result:**

```sql
mmrnode_a=# SELECT * FROM dept;
deptno | dname        | loc
--------+--------------+----------
10     | ACCOUNTING   | NEW YORK
20     | RESEARCH     | DALLAS
30     | SALES        | CHICAGO
40     | OPERATIONS   | BOSTON
(4 rows)
```

**On `mmrnode_b`:**

```sql
BEGIN;
UPDATE _edb_replicator_pub.rrep_properties SET value = current_timestamp
WHERE key = 'last_mcr_timestamp';
DELETE FROM edb.dept WHERE deptno = 50;
COMMIT;
```

**Result:**

```sql
mmrnode_b=# SELECT * FROM dept;
deptno | dname        | loc
--------+--------------+----------
10     | ACCOUNTING   | NEW YORK
20     | RESEARCH     | DALLAS
30     | SALES        | CHICAGO
40     | OPERATIONS   | BOSTON
(4 rows)
```

**On `mmrnode_c`:**

No changes are required as the conflicting transaction did not insert a new row into the table on this node.

```sql
mmrnode_c=# SET search_path TO edb;
SET
mmrnode_c=# SELECT * FROM dept;
deptno | dname        | loc
--------+--------------+----------
10     | ACCOUNTING   | NEW YORK
20     | RESEARCH     | DALLAS
30     | SALES        | CHICAGO
40     | OPERATIONS   | BOSTON
(4 rows)
```

#### Step 2: Rerun the Correct Transaction
Rerun the correct transaction on one master node with the multi-master replication system running. Do not run this within the transaction block described in Section 6.6.10.2, as the objective is to synchronize it to all master nodes.

**On `mmrnode_a`:**

```sql
INSERT INTO dept VALUES (50, 'MARKETING', 'LOS ANGELES');
```

**Result:**

```sql
mmrnode_a=# SELECT * FROM dept;
deptno | dname        | loc
--------+--------------+-------------
10     | ACCOUNTING   | NEW YORK
20     | RESEARCH     | DALLAS
30     | SALES        | CHICAGO
40     | OPERATIONS   | BOSTON
50     | MARKETING    | LOS ANGELES
(5 rows)
```

#### Step 3: Perform Synchronization Replication
The same rows now appear in the publication table on all master nodes.

**On `mmrnode_a`:**

```sql
SELECT * FROM dept;
```

**Result:**

```sql
deptno | dname        | loc
--------+--------------+-------------
10     | ACCOUNTING   | NEW YORK
20     | RESEARCH     | DALLAS
30     | SALES        | CHICAGO
40     | OPERATIONS   | BOSTON
50     | MARKETING    | LOS ANGELES
(5 rows)
```

**On `mmrnode_b`:**

```sql
SELECT * FROM dept;
```

**Result:**

```sql
deptno | dname        | loc
--------+--------------+-------------
10     | ACCOUNTING   | NEW YORK
20     | RESEARCH     | DALLAS
30     | SALES        | CHICAGO
40     | OPERATIONS   | BOSTON
50     | MARKETING    | LOS ANGELES
(5 rows)
```

**On `mmrnode_c`:**

```sql
SELECT * FROM dept;
```

**Result:**

```sql
deptno | dname        | loc
--------+--------------+-------------
10     | ACCOUNTING   | NEW YORK
20     | RESEARCH     | DALLAS
30     | SALES        | CHICAGO
40     | OPERATIONS   | BOSTON
50     | MARKETING    | LOS ANGELES
(5 rows)
```

#### Step 4: Modify the `xdb_conflicts` Table
In the control schema of the publication database currently designated as the controller database, modify the entry in the `xdb_conflicts` table to indicate the conflict has been resolved, as in Step 2 of Section 6.6.10.4.

**Figure 6-55 - Resolved Conflict in `xdb_conflicts`**

### 6.7 Viewing Conflict History
Conflict history shows the following types of events that occurred during synchronization replication:

- Uniqueness conflicts where two or more master nodes attempted to insert a row with the same primary key value or unique column value.
- Update/update conflicts where two or more master nodes attempted to update the same column of the same row.
- Update/delete and delete/update conflicts where one master node attempted to update a row that was deleted by another master node.

For more information on conflict resolution, see Section 6.6.

**Note:** The conflict history can be viewed from the Publication node under any master node in the multi-master replication system. The history shows conflicts on all publication tables of all master nodes that occurred during synchronization, and hence, the history appears the same regardless of the master node under which it is viewed.

**Note:** For uniqueness (insert/insert) conflicts, the number of entries appearing under the Conflict History tab differs when the trigger-based method of synchronization replication is used compared to the log-based method. If the trigger-based method is used, a single insert/insert conflict appears as two entries in the conflict history. Each entry differs in that the source and target database fields for the two conflicting master nodes are interchanged. If the same conflict occurs when the log-based method is used, only one entry appears in the conflict history.

**Steps to View Conflict History:**

1. Select any Publication node under a Database node representing a master node. Tabs labeled "General," "Realtime Monitor," "Replication History," and "Conflict History" will appear.
   
   **Figure 6-56 - Selecting a publication on which to view conflict history**

2. Click the "Conflict History" tab to show conflict history. Click the "Refresh" button to ensure all conflicts are listed.

   **Figure 6-57 - Conflict History tab**

3. Use the "Conflict Display Criteria" drop-down list to display only conflicts of the chosen status.

   **Figure 6-58 - Selecting conflict history by status**

4. Click the "View Data" link to show the details of a particular conflict.

   **Note:** The "View Data" link and "Conflict Details" window are available only for multi-master replication systems configured with the trigger-based method of synchronization replication. There is no "View Data" link or "Conflict Details" window for multi-master replication systems configured with the log-based method of synchronization replication.

   **Figure 6-59 - Conflict Details window**

### 6.8 Updating the Conflict Resolution Options
A current conflict resolution option on a publication table can be changed. See Section 6.6 for information on conflict resolution.

**Steps to Update Conflict Resolution Options:**

1. Ensure the publication server whose node is the parent of the publication you wish to change is running and has been registered in the xDB Replication Console you are using. See Section 5.2.1 for directions on starting and registering a publication server.

2. Select the Publication node under the Publication Database node representing the master definition node.

   **Figure 6-60 - Selecting a publication in which to update conflict resolution options**

3. Open the "Conflict Resolution Options" dialog box in any of the following ways:
   - From the Publication menu, choose "Update Publication," then "Conflict Resolution Options."
   - Click the secondary mouse button on the Publication node, choose "Update Publication," and then choose "Conflict Resolution Options."

   **Figure 6-61 - Opening the Conflict Resolution Options dialog box**

4. For each table, select the primary conflict resolution strategy and a standby strategy by clicking the primary mouse button over the appropriate box to expose a drop-down list of choices.

   **Figure 6-62 - Updating conflict resolution strategies**

5. Click the "Update" button, and then click "OK" in response to "Conflict Resolution Options Updated Successfully."

   **Figure 6-63 - Successfully updated conflict resolution options**

### 6.9 Enabling/Disabling Table Filters on a Master Node
Table filters must first be defined in a set of available table filters in the publication before they can be enabled on a master node. See Section 6.2.3 for information on defining table filters in a multi-master replication system.

**Note:** See Section 2.2.12.3 for table setup requirements for a log-based replication system as well as general restrictions on the use of table filters.

**Steps to Enable or Disable Table Filters on an Existing Master Node:**

1. Ensure the publication server whose node is the parent of the master nodes of the replication system is running and has been registered in the xDB Replication Console you are using. See Section 5.2.1 for directions on starting and registering a publication server.

2. Select the Publication Database node corresponding to the master node on which you wish to enable or disable individual filter rules.

   **Figure 6-64 - Selecting a master node on which to enable or disable filter rules**

3. Click the secondary mouse button on the Publication Database node and choose "Update Filter Rule."

   **Figure 6-65 - Opening the Filter Rules tab on a master node**

   **Note:** If you wish to enable or disable filter rules on the current master definition node, you must first switch the role of the master definition node to another master node in order to expose the "Update Filter Rule" option in the master node context menu. See Section 6.10 for directions on switching the master definition node.

   The master node you choose as the new master definition node should contain a superset or at least an equivalent set of data as the current master definition node. This ensures that the former master definition node contains the complete set of data satisfying the filtering criteria after you take a snapshot from the new master definition node to the former master definition node on which you just enabled the table filters.

4. In the "Filter Rules" tab, check or uncheck the boxes to specify the filter rules to enable or disable on the master node. At most one filter rule may be enabled on any given table. Click the "Save" button.

   **Figure 6-66 - Filter Rules tab**

5. A confirmation box appears presenting a warning message and a

---

**Copyright Â© 2010 - 2018 EnterpriseDB Corporation. All rights reserved.**  
**EDB Postgres Replication Server Userâ€™s Guide**