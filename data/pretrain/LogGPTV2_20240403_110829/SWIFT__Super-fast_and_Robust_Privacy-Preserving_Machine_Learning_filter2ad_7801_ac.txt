for the fractional part. The (cid:96)-bit integer is then treated as an
element of Z2(cid:96), and operations are performed modulo 2(cid:96). We
set (cid:96) = 64,x = 13, leaving (cid:96)− x− 1 bits for the integer part.
The servers use a one-time key setup, modelled as a func-
tionality Fsetup (Fig. 6), to establish pre-shared random keys
for pseudo-random functions (PRF) between them. A similar
setup is used in [3, 9, 14, 30, 43, 48, 50] for three server case
and in [11, 15] for four server setting. The key-setup can be
instantiated using any standard MPC protocol in the respec-
tive setting. Further, our protocols make use of a collision-
resistant hash function, denoted by H(), and a commitment
scheme, denoted by Com(). The formal details of key setup
are deferred to §A.
Notation 2.1. The ith element of a vector(cid:126)x is denoted as xi.
The dot product of two n length vectors,(cid:126)x and(cid:126)y, is computed
as (cid:126)x (cid:12)(cid:126)y = ∑n
i=1 xiyi. For two matrices X,Y, the operation
X ◦ Y denotes the matrix multiplication. The bit in the ith
position of an (cid:96)-bit value v is denoted by v[i].
Notation 2.2. For a bit b ∈ {0,1}, we use bR to denote the
equivalent value of b over the ring Z2(cid:96). bR will have its least
signiﬁcant bit set to b, while all other bits will be set to zero.
3 Robust 3PC and PPML
In this section, we ﬁrst introduce the sharing semantics for
three servers. Then, we introduce our new Joint Message Pass-
ing (jmp) primitive, which plays a crucial role in obtaining
the strongest security guarantee of GOD, followed by our
protocols in the three server setting.
Secret Sharing Semantics We use the following secret-
sharing semantics.
◦ [·]-sharing: A value v ∈ Z2(cid:96) is [·]-shared among P1,P2, if
Ps for s ∈ {1,2} holds [v]s ∈ Z2(cid:96) such that v = [v]1 + [v]2.
◦ (cid:104)·(cid:105)-sharing: A value v ∈ Z2(cid:96) is (cid:104)·(cid:105)-shared among P , if
– there exists v0, v1, v2 ∈ Z2(cid:96) such that v = v0 + v1 + v2.
– Ps holds (vs, v(s+1)%3) for s ∈ {0,1,2}.
◦ (cid:74)·(cid:75)-sharing: A value v ∈ Z2(cid:96) is(cid:74)·(cid:75)-shared among P , if
– there exists αv ∈ Z2(cid:96) that is [·]-shared among P1,P2.
– there exists βv,γv ∈ Z2(cid:96) such that βv = v + αv and P0
holds ([αv]1 , [αv]2 ,βv +γv) while Ps for s ∈ {1,2} holds
([αv]s ,βv,γv).
to sharing over Z2(cid:96) while boolean sharing, denoted as(cid:74)·(cid:75)B,
Arithmetic and Boolean Sharing Arithmetic sharing refers
refers to sharing over Z21.
Linearity of the Secret Sharing Scheme Given [·]-shares of
v1, v2, and public constants c1,c2, servers can locally compute
[·]-share of c1v1 + c2v2 as c1 [v1] + c2 [v2]. It is trivial to see
that linearity property is satisﬁed by (cid:104)·(cid:105) and(cid:74)·(cid:75) sharings.
Joint Message Passing primitive
3.1
The jmp primitive allows two servers to relay a common mes-
sage to the third server such that either the relay is successful
or an honest server (or a conﬂicting pair) is identiﬁed. The
striking feature of jmp is that it offers a rate-1 communication
i.e., for a message of (cid:96) elements, it only incurs a communica-
tion of (cid:96) elements (in an amortized sense). The task of jmp is
captured in an ideal functionality (Fig. 8) and the protocol for
the same appears in Fig. 1. Next, we give an overview.
Given two servers Pi,Pj possessing a common value v ∈
Z2(cid:96), protocol Πjmp proceeds as follows. First, Pi sends v to Pk
while Pj sends a hash of v to Pk. The communication of hash
is done once and for all from Pj to Pk. In the simplest case,
Pk receives a consistent (value, hash) pair, and the protocol
terminates. In all other cases, a trusted third party (TTP) is
identiﬁed as follows without having to communicate v again.
Importantly, the following part can be run once and for all
instances of Πjmp with Pi,Pj,Pk in same roles, invoked in the
ﬁnal 3PC protocol. Consequently, the cost due to this part
vanishes in an amortized sense, yielding a rate-1 construction.
Protocol Πjmp(Pi,Pj,Pk, v)
receive a bit
Each server Ps for s ∈ {i, j,k} initializes bit bs = 0.
Send Phase: Pi sends v to Pk.
Verify Phase: Pj sends H(v) to Pk.
– Pk broadcasts "(accuse,Pi)", if Pi is silent and TTP = Pj.
Analogously for Pj. If Pk accuses both Pi,Pj, then TTP = Pi.
Otherwise, Pk receives some ˜v and either sets bk = 0 when the
value and the hash are consistent or sets bk = 1. Pk then sends bk
to Pi,Pj and terminates if bk = 0.
– If Pi does not
from Pk, it broadcasts
"(accuse,Pk)" and TTP = Pj. Analogously for Pj. If both Pi,Pj
accuse Pk, then TTP = Pi. Otherwise, Ps for s ∈ {i, j} sets bs = bk.
– Pi,Pj exchange their bits to each other. If Pi does not receive
b j from Pj, it broadcasts "(accuse,Pj)" and TTP = Pk. Analo-
gously for Pj. Otherwise, Pi resets its bit to bi ∨ b j and likewise
Pj resets its bit to b j ∨ bi.
– Ps for s ∈ {i, j,k} broadcasts Hs = H(v∗) if bs = 1, where v∗ =
v for s ∈ {i, j} and v∗ = ˜v otherwise. If Pk does not broadcast,
terminate. If either Pi or Pj does not broadcast, then TTP = Pk.
Otherwise,
• If Hi (cid:54)= H j: TTP = Pk.
• Else if Hi (cid:54)= Hk: TTP = Pj.
• Else if Hi = H j = Hk: TTP = Pi.
Figure 1: 3PC: Joint Message Passing Protocol
Each Ps for s ∈ {i, j,k} maintains a bit bs initialized to
0, as an indicator for inconsistency. When Pk receives an
inconsistent (value, hash) pair, it sets bk = 1 and sends the bit
to both Pi,Pj, who cross-check with each other by exchanging
the bit and turn on their inconsistency bit if the bit received
from either Pk or its fellow sender is turned on. A server
broadcasts a hash of its value when its inconsistency bit is
on;5 Pk’s value is the one it receives from Pi. At this stage,
there are a bunch of possible cases and a detailed analysis
determines an eligible TTP in each case.
5hash can be computed on a combined message across many calls of jmp.
USENIX Association
30th USENIX Security Symposium    2655
When Pk is silent, the protocol is understood to be complete.
This is ﬁne irrespective of the status of Pk– an honest Pk never
skips this broadcast with inconsistency bit on, and a corrupt
Pk implies honest senders. If either Pi or Pj is silent, then
Pk is picked as TTP which is surely honest. A corrupt Pk
could not make one of {Pi,Pj} speak, as the senders (honest
in this case) are in agreement on their inconsistency bit (due
to their mutual exchange of inconsistency bit). When all of
them speak and (i) the senders’ hashes do not match, Pk is
picked as TTP; (ii) one of the senders conﬂicts with Pk, the
other sender is picked as TTP; and lastly (iii) if there is no
conﬂict, Pi is picked as TTP. The ﬁrst two cases are self-
explanatory. In the last case, either Pj or Pk is corrupt. If not,
a corrupt Pi can have honest Pk speak (and hence turn on its
inconsistency bit), by sending a v(cid:48) whose hash is not same as
that of v and so inevitably, the hashes of honest Pj and Pk will
conﬂict, contradicting (iii). As a ﬁnal touch, we ensure that,
in each step, a server raises a public alarm (via broadcast)
accusing a server which is silent when it is not supposed to
be, and the protocol terminates immediately by labelling the
server as TTP who is neither the complainer nor the accused.
Notation 3.1. We say that Pi,Pj jmp-send v to Pk when they
invoke Πjmp(Pi,Pj,Pk, v).
Using jmp in protocols. As mentioned in the introduction,
the jmp protocol needs to be viewed as consisting of two
phases (send, verify), where send phase consists of Pi sending
v to Pk and the rest goes to verify phase. Looking ahead,
most of our protocols use jmp, and consequently, our ﬁnal
construction, either of general MPC or any PPML task, will
have several calls to jmp. To leverage amortization, the send
phase will be executed in all protocols invoking jmp on the
ﬂow, while the verify for a ﬁxed ordered pair of senders will
be executed once and for all in the end. The verify phase
will determine if all the sends were correct. If not, a TTP is
identiﬁed, as explained, and the computation completes with
the help of TTP, just as in the ideal-world.
3PC Protocols
3.2
We now describe the protocols for 3 parties/servers and refer
readers to the full version [36] for the communication analysis
and security proofs of our protocols.
(cid:74)·(cid:75)-shares of a value v ∈ Z2(cid:96). In the preprocessing phase,
Sharing Protocol Protocol Πsh allows a server Pi to generate
P0,Pj for j ∈ {1,2} along with Pi sample a random [αv] j ∈
Z2(cid:96), while P1,P2,Pi sample random γv ∈ Z2(cid:96). This allows Pi to
know both αv and γv in clear. During the online phase, if Pi =
P0, then P0 sends βv = v + αv to P1. P0,P1 then jmp-send βv
to P2 to complete the secret sharing. If Pi = P1, P1 sends βv =
v + αv to P2. Then P1,P2 jmp-send βv + γv to P0. The case
for Pi = P2 proceeds similar to that of P1. The correctness of
the shares held by each server is assured by the guarantees of
Πjmp. We defer formal details of Πsh to the full version [36].
servers Pi,Pj to jointly generate a (cid:74)·(cid:75)-sharing of a value
Joint Sharing Protocol Protocol Πjsh (Fig. 9) allows two
v ∈ Z2(cid:96) that is known to both. Towards this, servers exe-
cute the preprocessing of Πsh to generate [αv] and γv. If
(Pi,Pj) = (P1,P0), then P1,P0 jmp-send βv = v + αv to P2.
The case when (Pi,Pj) = (P2,P0) proceeds similarly. The
case for (Pi,Pj) = (P1,P2) is optimized further as follows:
servers locally set [αv]1 = [αv]2 = 0. P1,P2 together sample
random γv ∈ Z2(cid:96), set βv = v and jmp-send βv + γv to P0. We
Addition Protocol Given (cid:74)·(cid:75)-shares on input wires x, y,
defer the formal details of Πjsh to §B.
locally compute (cid:74)·(cid:75)-shares of the output of addition gate,
z = x + y as(cid:74)z(cid:75) =(cid:74)x(cid:75) +(cid:74)y(cid:75).
Multiplication Protocol Protocol Πmult(P ,(cid:74)x(cid:75),(cid:74)y(cid:75)) (Fig. 2)
enables the servers in P to compute(cid:74)·(cid:75)-sharing of z = xy,
given the(cid:74)·(cid:75)-sharing of x and y. We build on the protocol of
servers can use linearity property of the sharing scheme to
BLAZE [48] and discuss along the way the differences and
resemblances. We begin with a protocol for the semi-honest
setting, which is also the starting point of BLAZE. During
the preprocessing phase, P0,Pj for j ∈ {1,2} sample random
[αz] j ∈ Z2(cid:96), while P1,P2 sample random γz ∈ Z2(cid:96). In addition,
P0 locally computes Γxy = αxαy and generates [·]-sharing of
the same between P1,P2. Since,
βz = z + αz = xy + αz = (βx − αx)(βy − αy) + αz
= βxβy − βxαy − βyαx + Γxy + αz
(1)
servers P1,P2 locally compute [βz] j = ( j − 1)βxβy −
βx [αy] j − βy [αx] j + [Γxy] j + [αz] j during the online phase
and mutually exchange their shares to reconstruct βz. P1 then
sends βz +γz to P0, completing the semi-honest protocol. The
correctness that asserts z = xy or in other words βz − αz = xy
holds due to Eq. 1.
might not be correct, i.e. Γxy (cid:54)= αxαy.
The following issues arise in the above protocol when a
malicious adversary is considered:
1) When P0 is corrupt, the [·]-sharing of Γxy performed by P0
2) When P1 (or P2) is corrupt, [·]-share of βz handed over to
the fellow honest evaluator during the online phase might
not be correct, causing reconstruction of an incorrect βz.
3) When P1 is corrupt, the value βz + γz that is sent to P0
during the online phase may not be correct.
All the three issues are common with BLAZE (copied
verbatim), but we differ from BLAZE in handling them. We
begin with solving the last issue ﬁrst. We simply make P1,P2
jmp-send βz + γz to P0 (after βz is computed). This either
leads to success or a TTP selection. Due to jmp’s rate-1
communication, P1 alone sending the value to P0 remains as
costly as using jmp in amortized sense. Whereas in BLAZE,
the malicious version simply makes P2 to send a hash of
βz + γz to P0 (in addition to P1’s communication of βz + γz to
P0), who aborts if the received values are inconsistent.
For the remaining two issues, similar to BLAZE, we reduce
both to a multiplication (on values unrelated to inputs) in the
2656    30th USENIX Security Symposium
USENIX Association
preprocessing phase. However, our method leads to either
success or TTP selection, with no additional cost.
We start with the second issue. To solve it, where a corrupt
P1 (or P2) sends an incorrect [·]-share of βz, BLAZE makes
use of server P0 to compute a version of βz for veriﬁcation,
based on βx and βy, as follows. Using βx +γx, βy +γy, αx, αy,
αz and Γxy, P0 computes:
Now if χ can be made available to P0, it can send β(cid:63)
z = −(βx + γx)αy − (βy + γy)αx + 2Γxy + αz
β(cid:63)
= (βz − βxβy)− (γxαy + γyαx − Γxy)
= (βz − βxβy)− χ
[by Eq. 1]
[where χ = γxαy + γyαx − Γxy]
z + χ
to P1 and P2 who using the knowledge of βx,βy, can verify
the correctness of βz by computing βz − βxβy and checking
against the value β(cid:63)
z + χ received from P0. However, disclos-
ing χ on clear to P0 will cause a privacy issue when P0 is
corrupt, because one degree of freedom on the pair (γx,γy)
is lost and the same impact percolates down to (βx,βy) and
further to the actual values (vx, vy) on the wires x, y. This is
resolved through a random value ψ ∈ Z2(cid:96), sampled together
z are set to γxαy +γyαx −Γxy +ψ,
by P1 and P2. Now, χ and β(cid:63)
(βz − βxβy + ψ)− χ, respectively and the check by P1,P2 in-
volves computing βz − βxβy + ψ. The rest of the logic in
BLAZE goes on to discuss how to enforce P0– (a) to compute
a correct χ (when honest), and (b) to share correct Γxy (when
corrupt). Tying the ends together, they identify the precise
shared multiplication triple and map its components to χ and
Γxy so that these values are correct by virtue of the correctness
of the product relation. This reduces ensuring the correctness
of these values to doing a single multiplication of two values
in the preprocessing phase.
Protocol Πmult(P ,(cid:74)x(cid:75),(cid:74)y(cid:75))
Preprocessing:
– P0,Pj for j ∈ {1,2} together sample random [αz] j ∈ Z2(cid:96), while
P1,P2 sample random γz ∈ Z2(cid:96).
– Servers in P locally compute (cid:104)·(cid:105)-sharing of d = γx + αx and
e = γy + αy by setting the shares as follows (ref. Table 2):
(d0= [αx]2 , d1= [αx]1 , d2=γx), (e0= [αy]2 , e1= [αy]1 , e2=γy)
– Servers in P execute ΠmulPre(P , d, e) to generate (cid:104)f(cid:105) = (cid:104)de(cid:105).
– P0,P1 locally set [χ]1 = f1, while P0,P2 locally set [χ]2 = f0.
P1,P2 locally compute ψ = f2 − γxγy.
Online:
– P0,Pj, for j ∈ {1,2}, compute [β(cid:63)
γy) [αx] j + [αz] j + [χ] j.
– P0,P1 jmp-send [β(cid:63)
– P1,P2 compute β(cid:63)
z]1 + [β(cid:63)
– P1,P2 jmp-send βz + γz to P0.
z]1 to P2 and P0,P2 jmp-send [β(cid:63)
z = [β(cid:63)
z] j = −(βx +γx) [αy] j − (βy +
z]2 and set βz = β(cid:63)
z]2 to P1.
z + βxβy + ψ.
Figure 2: 3PC: Multiplication Protocol (z = x· y)
We differ from BLAZE in several ways. First, we do not
z + χ, as
simply rely on P0 for the veriﬁcation information β(cid:63)
this may inevitably lead to abort when P0 is corrupt. Instead,
we ﬁnd (a slightly different) β(cid:63)
z that, instead of entirely avail-
able to P0, will be available in [·]-shared form between the two
teams {P0,P1},{P0,P2}, with both servers in {P0,Pi} holding
ith share [β(cid:63)
z]i. With this edit, the ith team can jmp-send the ith
share of β(cid:63)