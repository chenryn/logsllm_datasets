• Inﬁnite loops or deadlocks
SIDE uses a timeout mechanism to detect possible dead
loops or dead locks in calls to isolated device driver func-
tions.
In summary, SIDE offers to device drivers an execution
environment that is in every aspect similar to the standard
kernel, except the privilege level of all the pages assigned
to an isolated device driver is set at the normal user rather
than the supervisor level. In particular, each isolated driver
has its own stacks and heap, which are separate from the
kernel’s stacks and heap. Although conceptually simple,
this design strikes a nice balance among the sometimes
mutually conﬂicting goals: the ability to run legacy un-
modiﬁed drivers, the ability to protect the hosting kernel
Figure 2. Control transfers in the isolated device driver execution model,
where P represents a user-level process running at Ring 3, M is a kernel
module servicing a system call, H is a protection fault handler, T is a
trampoline kernel function, R is a function in a device driver, and K is a
kernel service function. Numbers in parenthesis represent the protection ring
level at which the associated code runs. Numbers in brackets on the edges
correspond to steps in the textual description.
address space, but runs the driver at the same privilege level
as normal user level programs. Figure 1 shows the address
space mapping for the kernel and an isolated device driver,
and their privilege level setting. An isolated device driver can
only access its code, stack and heap areas directly. However,
an isolated driver’s code pages are unmapped for the kernel
so that every call from the kernel to an isolated driver is
intercepted and triggers a protection domain crossing.
Figure 2 shows how control is transferred and protection
levels are switched inside the kernel when a user-level
process makes a system call that eventually invokes a device
driver function, which in turn calls on a kernel service
function. We use this example to illustrate the internal
working of SIDE:
A user-level process P makes a system call and
control eventually goes to a kernel module M.
The kernel module M calls a function R in an
isolated device driver and causes a protection fault, which
allows the VM exception handler in SIDE to set up the
execution environment for the called device driver function.
The exception handler H analyzes the cause of this
exception, and calls a trampoline function T if it
is a
legitimate call from the kernel. T’s job is to set up the proper
execution environment for the called isolated device driver,
including setting the processor privilege level, passing the
input arguments, etc.
T uses an IRET instruction to call the actual function
(R) in the device driver that the kernel invokes.
Assuming the driver function R needs to call a kernel
service function K, this call causes an exception because R
runs at Ring 3 whereas K runs at Ring 0.
In a way similar to Step 3 and 4, control
eventually goes to K.
Once the called kernel function K ﬁn-
ishes, control is returned back to the driver function R in
a way similar to Steps 2, 3 and 4.
4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:49 UTC from IEEE Xplore.  Restrictions apply. 
through the Driver Helper module or via a page fault ((4) in
Figure 3). However, when the Driver Helper module receives
a kernel service function call, it could convert it to a sysenter
instruction ((3) in Figure 3), or emulate this kernel service
function internally without transferring control to the kernel
((5) in Figure 3). This emulation cuts down the number
of protection domain crossings, but requires duplication of
some kernel service functions and virtualization of some
kernel data structures. Examples of such emulation includes
heap memory allocation and free, and maintenance of the
jifﬁes variable in Linux kernel.
The current SIDE prototype is implemented under the
Linux kernel 2.6.28.10 running on the X86 architecture.
When the kernel loads an isolated device driver into its
address space, it creates a driver page table for the isolated
driver and in this page table marks the protection level of
the memory pages that contain the device driver’s code and
data as Ring 3 or the user privileged level, and turns off
the present bit of the entries in the kernel page table that
correspond to the driver’s code pages (but not data pages),
as shown in Figure 1. With this set-up, when the kernel
calls an isolated device driver, a page fault occurs, and the
VM fault handler in SIDE takes control and switches to
the driver page table before passing control to the called
driver function. When the called driver function returns to
the kernel, a similar page fault again occurs, and the VM
fault handler in SIDE again switches back to kernel page
table before passing control back to the kernel. Note that
the kernel is still able to directly access the data pages of
the device driver areas without generating protection faults.
Because an isolated device driver uses its own heap, its
memory allocation and de-allocation calls are transparently
redirected to a heap allocation and de-allocation function
operating on this heap. When the kernel calls an isolated
device driver’s function, the associated kernel trampoline
function (e.g. T in Figure 2) copies this call’s input argu-
ments from the kernel stack to the driver’s stack. Without
knowing the templates of every driver function, SIDE simply
places an unmapped page at the beginning of the driver’s
stack, and copies the current kernel stack frame to the
driver’s stack starting from the second page. The unmapped
ﬁrst page allows SIDE to handle rare cases in which the
actual input arguments of a driver function call lie beyond
the presumed current kernel stack frame. In those cases, an
unmapped protection fault occurs, and SIDE uses a kernel
proxy function to copy the target that causes the fault to the
driver’s stack, together with its neighboring data items. This
simple heuristic approach strikes a nice balance between
implementation complexity and performance overhead.
There are two ways to transfer control from the kernel
to an isolated device driver: a page fault, which costs
around 2350 cycles, and an iret instruction, which costs 300
cycles. Whenever possible, SIDE uses the iret instruction to
implement a kernel call to a driver function or a return of
Figure 3. Multiple control transfer mechanisms for the interactions between
isolated device drivers and the kernel.
from potentially buggy drivers, and the need to minimize
the performance overhead associated with protection. Most
signiﬁcantly, the ability for SIDE to load a device driver
into the kernel’s address space but in a different protection
domain signiﬁcantly reduces the performance cost of kernel-
driver interactions and interrupt delivery.
IV. IMPLEMENTATION
A. Isolated Driver Execution Environment
Figure 3 shows the basic software structure of the isolated
driver execution architecture of SIDE. The kernel address
space is partitioned into two parts: (1) the kernel area, whose
privilege level is set to Ring 0, and (2) the device driver
area, whose privilege level is set to Ring 3. To reduce the
performance overhead of a device driver calling a kernel
service function, a Driver Helper module is deployed in
the device driver area. The Driver Helper is built manually
and is composed of a driver-independent part (like memory
alloc/free, fast gateway to enter kernel for driver) and a
driver-speciﬁc part (like submitting received network packets
in a batch). SIDE includes a kernel module loader that loads
an isolated device driver and its associated Driver Helper at
the same time, and parses the device driver’s import table
to redirect calls to kernel functions to corresponding Driver
Helper functions.
The kernel calls a device driver function either through
the SIDE module using an iret instruction ((1) in Figure 3),
which is less expensive, or directly via a page fault ((2)
in Figure 3), which is more expensive. A called device
driver function returns to the kernel either through the
Driver Helper function using the sysenter instruction ((3) in
Figure 3), which is less expensive, or directly via a page fault
((4) in Figure 3), which is more expensive. When a driver
invokes a kernel service function, the call could also go
5
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:49 UTC from IEEE Xplore.  Restrictions apply. 
function call, the kernel simply invokes the target service
function. In the case of kernel memory access and privileged
instruction execution, the kernel executes the memory access
and privileged instruction on behalf of the device driver,
respectively. In the case that the kernel service function is a
resource allocation function, e.g. kmalloc, SIDE memorizes
the resources allocated so that when an isolated device driver
terminates unexpectedly; SIDE can reclaim all the resources
allocated to the driver. In case an isolated device driver calls
a piece of kernel code that is not speciﬁed in its import table
by intention or by mistake, control is transferred to the kernel
through a page fault instead. Regardless of whether control
is transferred to the kernel through a sysenter instruction
or a page fault, the SIDE module performs the necessary
authorization check, argument/parameter validation, kernel
resource bookkeeping and tracking, etc.
Because the memory pages allocated to an isolated device
driver is marked at user-level privilege, in theory they are
accessible to user-level programs even though they reside in
the kernel address space. To prevent un-authorized tampering
with isolated device driver regions, SIDE limits the code
and data segments of user-level programs below the kernel
address space (e.g. 3-4GB) when they are started, so that
isolated driver regions are un-accessible to normal user-level
processes, but remain accessible to the kernel.
B. Optimizations
The implementation details described so far correspond to
a version of SIDE called SIDE base, which isolates device
drivers in a neat way by setting up a dedicated page table
for the isolated device driver, as in Figure 1. However, the
performance penalty of SIDE base is quite signiﬁcant if
a driver performs the following actions frequently, calling
kernel service functions, executing privilege instructions
or accessing kernel data structures, because they all
in-
volve expensive protection domain crossings. To address
this performance penalty problem, we developed another
version of SIDE called SIDE optimized, which introduces
a set of performance optimizations speciﬁcally for network
device drivers by introducing lightweight context switches
as well as reducing context switch number. However, the
network device drivers themselves still do not need to be
modiﬁed. The set of kernel modiﬁcations introduced in
SIDE optimized forms a virtualization layer that presents
to network device drivers an execution environment that
virtualizes the system resources managed by the kernel so
as to reduce the number of protection domain crossings
between the kernel and an isolated device driver.
Even though an isolated device driver lives in the same
address space as the kernel, SIDE base still needs to ﬂush
the TLB when control is transferred between the driver
and the kernel, because the page table is reloaded during
the control transfer. As a result, these control transfers are
almost as expensive as a process context switch. SIDE base
Figure 4. The kernel stack after an intra-privilege-level (Ring 0 to Ring 0)
exception (a) and an inter-privilege-level (Ring 3 to Ring 0) exception (b).
The arrows indicate the return addresses as seen by the exception handler.
a kernel service function back to a driver. This instruction
was originally designed to return to a user-level process
from a kernel-level exception handler that copes with an
exception encountered during the execution of the user-
level process. Therefore, the kernel stack at the time when
the iret instruction is executed must look like one after
an inter-privilege-level exception, as shown in Figure 4(b),
where the arrow indicates the return address when control
is passed to the exception handler. However, the transition 2
in Figure 2 corresponds to an intra-privilege-level exception,
and the kernel stack at
the time when H takes control
looks like Figure 4(a). Therefore, the trampoline function
T has to convert
the kernel stack from Figure 4(a) to
Figure 4(b) before executing the iret instruction to call the
driver function R.
The X86 architecture assumes that when the kernel returns
control to a user-level program, the kernel stack is no longer
needed, and the hardware will reset the kernel stack pointer
accordingly. For example, after the kernel services a system
call from a user-level process, control is passed back to
the user-level process and the kernel stack used to service
the system call is reset. However, in the case of SIDE,
this assumption is no longer valid. When the kernel calls
an isolated device driver, which runs at Ring 3, the kernel
stack at the time of this call is still needed after the call is
completed. Therefore, whenever the kernel calls an isolated
driver function, in addition to adjusting the kernel stack
to include the driver’s SS and SP, the associated kernel
trampoline function (T in Transitions 3, 6, 9 and 12 in
Figure 2) also needs to keep a copy of the old stack and
sets new sp0 in TSS so that when control returns to the
kernel, the execution can continue with the kernel stack at
the time when the kernel makes the call.
When an isolated device driver calls a kernel service
function, accesses a kernel memory area, or executes a
privileged instruction, a protection fault occurs. Under these
conditions, control is passed between the kernel and the
device driver in the same way as a standard system call, i.e.
via a sysenter instruction. In the case of a kernel service
6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:49 UTC from IEEE Xplore.  Restrictions apply. 
it
intercepts all calls from kernel
to driver by page faults
because driver’s code pages are unmapped in kernel’s page
tables. For open-sourced OS as Linux,
is possible to
identify and intercept all possible sites in the kernel that
call a device driver. In this case, the driver page table is no
longer necessary and the driver’s code pages are mapped as
user-level pages in kernel page table. SIDE optimized takes
this approach to channel all calls from the Linux kernel to
isolated device drivers through SIDE, which then properly
sets up the execution environment before passing control to
the called device driver. This method eliminates not only the
TLB ﬂushing, but also the overhead of page faults caused
by kernel-call-drivers, which could be quite substantial for
modern device drivers.
To reduce the number of kernel memory accesses from
an isolated device driver, it is essential to allocate some
kernel data directly from the driver’s heap to the extent
allowed by security. In the case of a network device driver,
we modiﬁed the Linux kernel to allocate the payload buffer
for an outgoing packet from the network device driver’s
heap rather than from the kernel’s own heap. This has no
effect on the existing protocol stack because the kernel can
access the driver’s heap directly, but allows the driver to
manipulate the network packet payload without triggering
any protection faults. Allocating packet payload buffers from
the network device driver’s heap does not compromise the
kernel’s integrity in any way because the network device
driver is allowed to manipulate packet payload buffers
even when they are allocated from the kernel’s heap. No
additional actions need to be taken for incoming packets
because their payloads were placed in reception buffer that
is originally allocated from the network device driver’s heap.
Another major reason why an isolated device driver
accesses kernel memory is to look up kernel data structures.
Typically the driver ﬁrst calls a kernel service function to
obtain a handle for such a kernel data structure, and then
issues direct kernel memory accesses based on the obtained
handle. These kernel memory accesses are pre-dominantly
read accesses, and each of them will trigger an (expensive)
protection fault in SIDE base. To optimize the associated
performance overhead away, we applied a renaming and
pre-copying technique. When an isolated driver is loaded,
SIDE optimized copies these look-up kernel data structures
such as thread info and jifﬁes, to the driver’s heap/stack.
When the driver asks for handles for these look-up data
structures, SIDE optimized responds with their locations in
the driver’s heap. Consequently, when the driver looks up
these data structures, it actually accesses the copy in its own
memory region rather than the original copy in the kernel
address space. Because a kernel data structure may have
one copy in the kernel address space and another copy in
the driver space, SIDE synchronizes them for pages that are
dirtied since the last synchronization point at the time when
control is passed into or is returned from an isolated device
driver. This optimization is effective because an isolated
device driver mostly reads these kernel data structures and
the kernel also modiﬁes them infrequently.
One way to reduce the number of kernel service function
calls is to eliminate calls to disable and enable interrupts,
i.e. sti and cli. Speciﬁcally, SIDE optimized virtualizes in-
terrupts by replacing these kernel service function calls with
local function calls that modify a virtual interrupt disable
bit in the driver’s space, which indicates the driver’s in-
tention to enable or disable interrupts. With this design,
an isolated device driver can enable or disable interrupts
without trapping into the kernel. When a hardware interrupt
occurs, the generic hardware interrupt handler checks the
interrupt disable bit of the interrupt’s corresponding device
driver to determine whether to hold this interrupt or to call
the driver’s interrupt handler otherwise.
As shown in the transition path 2-3-4 of Figure 2, when
the kernel calls a function in a device driver, a protec-
tion fault occurs and control is transferred. To reduce the
performance cost of kernel-to-driver calls, SIDE optimized
replaces all of these call sites in the kernel with a function
that uses an iret instruction to enter driver code, whose
overhead is lower than that of a protection/page fault. For the
same reason, SIDE optimized replaces the control transfer
from a driver to the kernel, the transition path 11-3-13 in
Figure 2, with a sysenter instruction. In both cases, return
addresses on the driver stack are properly adjusted to match
the processor’s expectation.
When an isolated device driver executes privileged in-
structions, an exception occurs and the kernel emulates these
instructions on behalf of the driver. To reduce the number
of protection domain crossings resulting from privileged
I/O instruction execution, we set the I/O port permissions
in the Task State Segment (TSS) to allow an isolated
Ring-3 device driver to access a speciﬁc set of I/O ports
without triggering protection faults. Accordingly, when an