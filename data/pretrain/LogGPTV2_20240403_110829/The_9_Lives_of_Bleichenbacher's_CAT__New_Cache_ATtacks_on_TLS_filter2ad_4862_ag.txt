length, mbedTLS scans the words that represent the plaintext
from the most signiﬁcant to the least signiﬁcant, looking for a
non-zero word. In a padding oracle attack, this is very likely
to be the ﬁrst word of the plaintext. MbeTLS then scans the
bits of the word to ﬁnd the most signiﬁcant non-zero bit. This
scan, shown in Listing 8, loops over the bits, from the most
signiﬁcant to the least signiﬁcant (Line 7), checking for a non-
zero bit (Line 8). An adversary that can count the number
of iterations executed can learn the leading number of zero
bits, which can be used for a Manger type oracle. As in
Appendix A-A, such attacks are unfesible for unprivileged
adversaries, but can be performed by a root adversary attacking
a code running in trusted execution environment (e.g., Intel
SGX). Finally, we note that the adversary only needs to deter-
mine whether the loop body gets executed for implementing
an Interval oracle (see Section II-E).
D. Mozilla NSS
Mozilla’s Network Security Services (NSS) library is the
cryptographic engine often used in applications developed
by the Mozilla project. NSS implements countermeasures
for padding oracle attacks, however, the TLS code ignores
the possibility of leakage through microarchitectural channels
Consequently, the TLS implementation exposes padding oracle
in each of the three stages of handling PKCS #1 v1.5 padding.
Leaky Data Conversion. Listing 9 shows a leak in the data
conversion stage. The code is the start of the function mp -
to ﬁxlen octets, which converts a large number into a ﬁxed-
length byte array. The function ﬁrst determines the number
of bytes required for storing the number (Line 8). Next, it
zero-pads the output byte array, so that the ﬁnal output is
(cid:21)(cid:22)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
// mp is a number encoded in little endian
// str is an array of length bytes containing
// a big endian encoding of mp
int ix, pos = 0;
unsigned int bytes;
bytes = mp_unsigned_octet_size(mp);
/* place any needed leading zeros */
for (; length > bytes; --length) {
1 mp_to_fixlen_octets(mp, str, length)
2 {
3
4
5
6
7
8
9
10
11
12
13
14
15
16 }
}
.../* code for convering a little-endian large
* number mp into a big-endian fixed-length
* byte array str (omitted for brevity) */
*str++ = 0;
Listing 9. Data Conversion in NSS
goto loser;
goto loser;
buffer[1] != RSA_BlockPublic) {
maxOutputLen, input, inputLen)
/* XXX(rsleevi): Constant time */
if (buffer[0] != RSA_BLOCK_FIRST_OCTET ||
...
rv = RSA_PrivateKeyOp(key, buffer, input);
if (rv != SECSuccess)
1 RSA_DecryptBlock(key, output, outputLen,
2
3 {
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
}
*outputLen = 0;
for (i = 2; i 
internals.selected_key, 0, &data, &plaintext);
if (retkey.key.data = rndkey.data;
session->key.key.size = rndkey.size;
rndkey.data = NULL;
session->key.key.data = plaintext.data;
session->key.key.size = plaintext.size;
} else {
}
return ret;
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21 }
for (i = 0; i>= 8;
length--;
}
if (length) memset(s, sign, length);
}
Listing 12. GnuTLS’s Data Conversion function
TMP_GMP_DECL(em, uint8_t);
uint8_t *terminator;
size_t padding;
size_t message_length;
int ret;
TMP_GMP_ALLOC(em, key_size);
nettle_mpz_get_str_256(key_size, em, m);
/* Check format */
if (em[0] || em[1] != 2){
1 int pkcs1_decrypt(key_size, m, length, message){
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21 }
}
...
memcpy(message, terminator+1, message_length);
*length = message_length;
ret = 1;
cleanup:
TMP_GMP_FREE(em);
return ret;
ret = 0;
goto cleanup;
Listing 14. Pseudocode of GnuTLS’s padding oracle mitigation
other keys in the system (e.g., using the GNUTLS_RND_KEY
RNG in GnuTLS).
Listing 13. GnuTLS’s PKCS #1 v1.5 veriﬁcation
Line 18 conditionally calls memset when there are leading
zeros in the plaintext, exposing a Manger oracle.
Leaky PKCS #1 v1.5 Veriﬁcation. GnuTLS also relies on
leaky Nettle for PKCS #1 v1.5 veriﬁcation (Listing 13). The
branch in Line 10 allows for a Manger type oracle or a TTTT
oracle. The conditional call to memcpy in Line 15 exposes
an FFTT oracle.
Leaky Padding Oracle Mitigations. The GnuTLS padding
oracle mitigation code is also not constant-time, see Listing 14
for a simpliﬁed version. In particular, the branches in Lines 7
and 12 yield a FFTT Bleichenbacher oracle. Another issue in
the code present in Listing 14 is the misleading comment “we
do not need strong random numbers here” (Line 3). We note
that predicting the random session key used for padding oracle
mitigation, renders the mitigation ineffective. The attacker
can use this session key to generate the correct client ﬁnish
message, thereby causing the server to complete the TLS
handshake. This results in a remote Bleichenbacher FFTT
oracle that does not require any side channel leakage. We
believe that the random session key should be generated like
(cid:21)(cid:22)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply.