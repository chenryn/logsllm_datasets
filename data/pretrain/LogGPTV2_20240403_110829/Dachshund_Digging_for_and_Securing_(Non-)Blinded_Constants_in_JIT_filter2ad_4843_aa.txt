title:Dachshund: Digging for and Securing (Non-)Blinded Constants in JIT
Code
author:Giorgi Maisuradze and
Michael Backes and
Christian Rossow
Dachshund: Digging for and Securing Against
(Non-)Blinded Constants in JIT Code
Giorgi Maisuradze
CISPA, Saarland University
Saarland Informatics Campus
giorgi.maisuradze@cispa.saarland
Michael Backes
CISPA, Saarland University
Saarland Informatics Campus
PI:EMAIL
Christian Rossow
CISPA, Saarland University
Saarland Informatics Campus
rossow@cispa.saarland
Abstract—Modern browsers such as Chrome and Edge deploy
constant blinding to remove attacker-controlled constants from
the JIT-compiled code. Without such a defense, attackers can
encode arbitrary shellcode in constants that get compiled to
executable code. In this paper, we review the security and
completeness of current constant blinding implementations. We
develop DACHSHUND, a fuzzing-driven framework to ﬁnd user-
speciﬁed constants in JIT-compiled code. DACHSHUND reveals
several cases in which JIT compilers of modern browsers fail
to blind constants, ranging from constants passed as function
parameters to blinded constants that second-stage code optimizers
revert to a non-protected form. To tackle this problem, we
then propose a JavaScript rewriting mechanism that removes
all constants from JavaScript code. We prototype this cross-
browser methodology as part of a Web proxy and show that
it can successfully remove all constants from JavaScript code.
I.
INTRODUCTION
Web browsers continue to be one of the main targets
for software exploitation, as demonstrated by the rise of
browser-targeting exploit kits [26] and the sheer number of
software vulnerabilities discovered in browsers. It is not just
the popularity and complexity of browsers that make them
an attractive target. Modern browsers also support various
scripting languages such as JavaScript and ActionScript. On
the one hand, scripting environments have become indis-
pensable to dynamically generate highly-interactive content
on the modern Web. On the other, scripting support also
allows adversaries to perform proliﬁc attacks. Most notably,
in Just-in-Time Return-Oriented Programming (JIT-ROP), an
attacker uses the scripting environment to dynamically search
for gadgets in existing code (e.g., of the browser or imported
libraries) [49]. A viable defense against JIT-ROP attacks is
to compile programs in a way that they do not have usable
gadgets, e.g., using gadget-free compilation [41] or Control
Flow Integrity [55], [56], [14], [37], [55].
However, such protections are typically limited to static
code. Consequently, these defenses are ineffective against code
spraying attacks [6], in which an adversary leverages scripting
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23224
environments to dynamically generate gadgets (instead of
searching for them, like in JIT-ROP). For example, an attacker
can embed short gadgets in integer constants of JavaScript
code, which the JIT compiler translates to executable shell-
code. To protect against dynamically-injected attack code, JIT
engine developers and researchers started to rely on constant
blinding. The goal of constant blinding is to generate code
that does not contain user-speciﬁed constants. Technically, the
JIT compilation process does not emit any constant that may
be part of JavaScript statements (such as variable assignments
like a=0x9090). For example, a simple implementation could
remove the constants by XORing two non-predictable values
whose XOR result equals to the constant. This way, an adver-
sary can no longer embed shellcode in predictable constants
in the JIT-generated code. Consequently, constant blinding has
become an important foundation to protect against JIT spraying
attacks and is the basis for many other defenses [52], [29].
Most modern browsers such as Chrome or Microsoft Edge (and
its predecessor Internet Explorer) deploy constant blinding.
In this paper, we analyze the completeness of constant
blinding implementations in JIT engines of modern browsers.
We ﬁnd that a correct and complete constant blinding imple-
mentation is not as trivial as it may sound. In fact, browsers
typically strive for high efﬁciency and have to intertwine
security defenses with multi-layer optimization schemes. Fur-
thermore, there are dozens of ways to embed constants in
JavaScript code, including global and local variable, function
parameters, array indexes, bit operations, return statements and
many more. As we will show, it is easy to miss some cases, and
it becomes a non-trivial challenge to understand the security-
related effects of the various optimization layers in JIT engines.
In this context, we propose DACHSHUND, a fuzzing-driven
framework that tests the completeness of constant blinding im-
plementations in browsers (or other software with JIT engines,
such as PDF readers). The core idea of DACHSHUND is to
feed a JIT compiler with JavaScript code snippets that include
constants and to trigger the JIT compilation phase(s). We
leverage a JavaScript code generator to dynamically generate
a high number of diverse code snippets that contain “magic”
constants. After JIT compilation, we search for these magic
values in the JIT-compiled code in order to test whether the
constants have survived blinding. A prototype implementation
of DACHSHUND for Chrome and Edge revealed many cases in
which the JIT engines of these modern browsers fail to blind
user-speciﬁc constants, undermining the security guarantees of
these implementations.
Athanasakis et al. have already demonstrated that single-
byte or two-byte constants survive the blinding process, as
the constant blinding implementations simply do not blind
small constants for efﬁciency reasons [2]. However, we show
that the problem of incomplete constant blinding implemen-
tations is far more fundamental than JIT compilers skipping
over smaller constants. Even blinding all (including smaller)
constants would not help to remedy this situation. In fact, all of
the surviving constants that we discovered were 32 bits long,
giving an attacker full ﬂexibility to embed four-byte gadgets
(e.g., any system call).
There are multiple ways to overcome these problems. One
approach would be to change the JIT engines of browsers
to remedy the situation. However, as we have demonstrated,
reaching a complete implementation of constant blinding has
proven to be rather difﬁcult and requires modiﬁcation to each
JIT engine separately. Alternatively, we propose to leverage a
Web proxy in order to rewrite the JavaScript code before it is
delivered to the browser. This way, we can protect any browser
behind the proxy without software modiﬁcations. Our core idea
is to rewrite constants such that they do not appear in the JIT-
generated code, regardless of the JIT engine and optimization
layer. To this end, we parse the abstract syntax tree (AST) of
HTML and JavaScript code, locate any JavaScript constants,
and replace them with semantically-equivalent representations
that are either not predictable by an attacker, or ideally are
moved out of the executable code sections. In addition, we
hook critical JavaScript functions (e.g., eval()) to remove
constants from dynamically-generated JavaScript code. While
this approach is clearly less efﬁcient than browser-speciﬁc
implementations, the average overhead of 22% in JavaScript
performance benchmarks is barely noticeable in practice. In
addition, rewriting complex JavaScript libraries like jQuery is
relatively fast and takes a one-time effort of less than 60 ms.
The rewriting outcome can be cached by the client and proxy
to eliminate any rewriting overhead in the future, leading to a
viable defense scheme in practice.
With this paper, we provide the following contributions:
• We design DACHSHUND, a fuzzing-based framework to
search for constants that survive the constant blinding pro-
cess of JIT engines. DACHSHUND combines code fuzzing
techniques with memory carving to discover potentially
dangerous blinding leftovers.
• We provide a thorough overview of security deﬁciencies
of the constant blinding implementations in Chrome and
Edge, demonstrating that constant blinding by the JIT
engines in these browsers is inherently insecure.
• We propose a proxy-based JavaScript rewriting engine
that complements existing constant blinding implemen-
tations by removing constants from the JavaScript code
at an average overhead of 22%.
II. BACKGROUND
We ﬁrst provide an overview of the history of code-reuse
attacks. We start with Return Oriented Programming (ROP),
which clearly demonstrates the general principle behind code-
reuse attacks. Next we show a special variant of ROP, called
JIT-ROP, which discovers gadgets on-the-ﬂy and evades exist-
ing randomization schemes such as ASLR. Besides the attacks,
we also discuss potential defenses.
A. Return Oriented Programming (ROP)
Although ROP was not the ﬁrst code-reuse attack, it got
popular after the wide deployment of Data Execution Preven-
tion (DEP). DEP is a defense technique against a generic stack
overﬂow vulnerability where an adversary writes and executes
her shellcode directly on the stack. DEP tackles this problem
by marking executable pages non-writable.
As a response to DEP, code-reuse attacks reuse existing
code portions of the program instead of injecting new ones.
For example,
in ret-to-lib(c) [38] an adversary mounts an
attack by reusing functions from imported libraries such as
libc. This attack was generalized by Shacham [47] with ROP,
who proposed to use so-called gadgets (i.e., small sequences of
instructions ending with a return instruction) and chain them to
get arbitrary program execution. Return instructions are used
to chain multiple gadgets together by writing their addresses
on the stack. Later, Checkoway et al. [9] showed that one
can also use any control-ﬂow-changing instruction (e.g., jmp,
call) to achieve the same result.
B. ASLR vs. JIT-ROP
Address Space Layout Randomization (ASLR) [50] is a
widely deployed defense technique against code-reuse attacks.
ASLR randomizes the base addresses of the program’s memory
segments, thus preventing the attacker from predicting the ad-
dresses of the gadgets. A remaining weaknesses of this coarse-
grained ASLR scheme is that it only randomizes the base
addresses of memory segments. Researchers thus proposed
ﬁne-grained ASLR schemes that add randomness inside the
segment as well [33], [51], [27], [43]. For more details, we
refer the reader to Larsen’s survey [34].
However, Snow et al. proposed a JIT-ROP to overcome
ASLR [49]. JIT-ROP is a just-in-time code reuse scheme that
follows the assumption that an attacker can repeatedly read
arbitrary memory addresses, e.g., via a memory disclosure
vulnerability in a scripting environment such as JavaScript.
The attacker uses this vulnerability to follow code pointers
and collects as many code pages as possible. Next, the attacker
searches for desired gadgets (such as Load, Store, Jump) and
API function calls (such as LoadLibrary, GetProcAddress) in
these code pages. This allows carrying out a just-in-time search
for suitable ROP gadgets and thus defeats ﬁne-grained code
randomization schemes.
C. JIT Spraying
While JIT-ROP’s idea was to search for existing code, it
is not guaranteed that the required gadgets actually exist. In
fact, Control Flow Integrity schemes may render any gadgets
unusable [55], [56], [14], [37], [55], or programs might have
been generated by compilers creating gadget-free code [41].
In such a setting, JIT spraying can be used to inject attacker-
controlled code. JIT-compiled languages, such as ActionScript
(Flash) or JavaScript, have become popular in everyday pro-
grams such as browsers. Being able to control the input to
the compiler (i.e., JavaScript code), an attacker indirectly
controls the compilation output. JIT spraying, proposed by
Blazakis [6], uses this property to evade DEP or ASLR.
By repeatedly injecting large amounts of code via attacker-
controlled JavaScript objects, the attacker allocates (“sprays”)
2
many executable pages with shellcode. After spraying, the
attacker then jumps to an address and hopes that she hits any
of the sprayed code pages.
An advanced form of JIT spraying, shown by Athanasakis
et al. [2], combines JIT spraying and JIT-ROP. Similar to
JIT spraying, the authors suggest to craft special JavaScript
statements that compile into an attacker-controlled sequence of
instructions. For example, JavaScript variable assignments with
immediate values (e.g., var v=0x90909090) will be com-
piled into a sequence of assembly instructions containing the
instruction that encodes the attacker-supplied immediate (e.g.,
mov eax,0x90909090). Assuming an arbitrary memory read
vulnerability, an adversary does not even have to spray many
code pages, nor search for existing code (like in JIT-ROP).
Instead, she can emit arbitrary gadgets just by controlling
constants in JavaScript code.
D. Constant Blinding
To counter JIT spraying, most browsers have deployed
constant blinding. This defense technique changes the emitted
immediate value by XORing it with a randomly-generated
key. For example, instead of compiling the aforementioned
JavaScript code into mov eax,0x90909090, constant blind-
ing will convert it to the following sequence of instructions:
mov eax, (RAND_KEY⊕ 0x90909090)
xor eax,
RAND_KEY
The constant RAND_KEY is a randomly generated key, and
(RAND_KEY⊕ 0x90909090) is a single integer generated at
compile time. Constant blinding thus protects all immediate
values with constant-speciﬁc keys, and makes the process of
JIT spraying highly non-predictable.
A perfect implementation of constant blinding would blind
all immediate values in JavaScript code with per-constant keys.
In practice (e.g., in MSIE and Chrome), due to performance
reasons, only constants larger than two bytes (> 216) are
blinded. Although such blinding might seem effective against
code spraying, Athanasakis et al. demonstrate that two-byte
gadgets are sufﬁcient to mount an attack if they are followed by
aligned return instructions (i.e., in the epilogue of the function
containing the gadget).
III. ASSUMPTIONS
Having discussed the foundation of existing attacks and
defenses, we now introduce the threat model and our assump-
tions on defense techniques that will be considered throughout
the paper. These assumptions are in accordance with the
environment of other proposed attack techniques [2], [49].
A. Defense Techniques
We ﬁrst list the defense techniques that we assume to be
deployed in the operating system or the target application:
Non Writable Code: We assume that Data Execution Pre-
vention (DEP) is in place, ensuring that the code pages are
not writable and thus defending against direct shellcode
injections.
Code Randomization: We assume that ASLR is enabled in
the host operating system, which randomizes the base
addresses of the executable and other memory segments
every time they are loaded into the memory. Additionally,
we assume that ﬁne-grained ASLR is applied to already
randomized (by ASLR) memory pages, further compli-
cating the process to guess the address of a gadget.
Gadget-Free Code: We assume that static code (i.e., code
that is not JIT-compiled) does not contain usable gadgets.
For example, this would be the case for gadget-free com-
pilation [41]. Note that JIT-ROP attacks are not possible
in such a setting, given the lack of gadgets.
JIT Defenses: We assume any defense techniques against JIT
spraying that is already present in modern browsers, such
as constant blinding (Chrome, Edge) or NOP insertion
(Edge). As the main goal of our technique is to emit
arbitrary gadgets in the executable code, we assume that
sandboxing in the browsers can either be bypassed (e.g.,
via a vulnerability) or is disabled. For the same reason,
we do not consider CFI defenses to be applied to JIT-
compiled code.
B. Threat Model
With these defenses in mind, we now introduce the at-
tacker model. Note that the assumptions listed below are in
accordance with existing attack techniques [2], [49].
Arbitrary Memory Read: We assume that an adversary is
able to read arbitrary readable memory of the program.
This could be done, for example, by repeatedly exploiting
a memory disclosure vulnerability.
Hijacking Control Flow: We assume that the target program
has a control ﬂow vulnerability that
the attacker can
exploit to divert the control ﬂow to an arbitrary memory
location.
JIT Compilation: We assume that the target program incor-
porates a scripting environment. More speciﬁcally, we
require that the program has a JavaScript JIT compiler
that accepts arbitrary (valid) JavaScript code as input and
compiles it to native code. This requirement is met by
all modern Web browsers. In principle, our attack is not
limited to browsers, as JavaScript is also actively used in
other applications (e.g., PDF readers).
IV. DACHSHUND: FINDING CONSTANTS
We now take a closer look at the completeness of the
defense technique implementations in JIT compilers of mod-
ern browsers. More speciﬁcally, we will search for ways,
in which the attacker can emit arbitrary gadgets into the
executable pages of the browser’s memory. To this end, we
present DACHSHUND, a fuzzing-based framework that reveals
attacker-controllable constants in JIT-compiled code. The basic
design of DACHSHUND is shown in Figure 1. The framework
consists of a fuzzing component (Section IV-A) that creates
diverse JavaScript code snippets to feed them to a JIT com-
piler for further processing. After JIT compilation, the JIT
inspector (Section IV-B) then searches for constants induced
by the fuzzer in the executable code pages. The interaction
between these two components is steered by the DACHSHUND
controller (Section IV-C). In the following, we describe this
interplay in more detail.
3
Fig. 1. Overview of the Dachshund architecture and its three components.
A. Fuzzing Component
In the ﬁrst component of DACHSHUND, we aim to trig-
ger attacker-controllable constants in JIT compiled code. We
follow a similar goal to Athanasakis et al. [2] and leverage im-
mediate values in JavaScript statements to emit gadgets in the
JIT-compiled code. In their paper, the authors exploit the fact
that browsers only blind large constants (e.g., Chrome and IE
blind values larger than two bytes). We do not limit ourselves
to two-byte gadgets and instead challenge the completeness of
the constant blinding implementation. That is, we aim to ﬁnd