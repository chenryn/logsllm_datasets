finally block occurs immediately after a try block or immediately after the
last catch handler after a try block. As long as the program enters the try
block associated with a finally block, the finally block will always be run,
even if an exception occurs. If an exception is thrown and caught locally, the
exception handler executes first, followed by the finally block. If the
exception is not caught locally (that is, the runtime has to search through the
list of calling methods to find a handler), the finally block runs first. The
important point is that the finally block always executes.
The solution to the reader.Dispose problem is as follows:
Click here to view code image
TextReader reader = ...;
...
try
{
    string line = reader.ReadLine();
    while (line != null)
    {
        ...
        line = reader.ReadLine();
    }
}
finally
{
    if (reader != null)
    {
        reader.Dispose();
    }
}
Even if an exception occurs while reading the file, the finally block
ensures that the reader.Dispose statement always executes. You’ll see
another way to handle this situation in  Chapter 14, “Using garbage collection
Download from finelybook PI:EMAIL
259
and resource management.”
Summary
In this chapter, you learned how to catch and handle exceptions by using the
try and catch constructs. You saw how to turn on and off integer overflow
checking by using the checked and unchecked keywords. You learned how to
throw an exception if your code detects an exceptional situation, and you saw
how to use a finally block to ensure that critical code always runs, even if an
exception occurs.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 7.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Catch a specific exception
Write a catch handler that catches the
specific exception class. For example:
Click here to view code image
try
{
    ...
}
catch (FormatException fEx)
{
    ...
}
Ensure that integer arithmetic is
always checked for overflow
Use the checked keyword. For
example:
Click here to view code image
int number = Int32.MaxValue;
checked { number++; }
Download from finelybook PI:EMAIL
260
Throw an exception
Use a throw statement. For example:
throw new
FormatException(source);
Catch all exceptions in a single
catch handler
Write a catch handler that catches
Exception. For example:
Click here to view code image
try
{
     ...
}
catch (Exception ex)
{
     ...
}
Ensure that some code will always
run, even if an exception is thrown
Write the code within a finally block.
For example:
Click here to view code image
try
{
   ...
}
finally
{
   // always run
}
Download from finelybook PI:EMAIL
261
PART II
Understanding the C# object model
In Part I, you learned how to declare variables, use operators to create values,
call methods, and write many of the statements you need when you
implement a method. You now know enough to progress to the next stage:
combining methods and data into your own functional data structures. The
chapters in Part II show you how to do this.
In Part II, you’ll learn about classes and structures, the two fundamental
types that you use to model the entities and other items that constitute a
typical C# application. In particular, you’ll see how C# creates objects and
value types based on the definitions of classes and structures, and how the
common language runtime (CLR) manages the life cycle of these items. You
will find out how to create families of classes by using inheritance, and you
will learn how to aggregate items by using arrays.
Download from finelybook PI:EMAIL
262
CHAPTER 7
Creating and managing classes and
objects
After completing this chapter, you will be able to:
Define a class containing a related set of methods and data items.
Control the accessibility of members by using the public and private
keywords.
Create objects by using the new keyword to invoke a constructor.
Write and call your own constructors.
Create methods and data that can be shared by all instances of the same
class by using the static keyword.
Explain how to create anonymous classes.
The Windows Runtime together with the Microsoft .NET Framework
contains thousands of classes. You have used a number of them already,
including Console and Exception. Classes provide a convenient mechanism
for modeling the entities manipulated by applications. An entity can represent
a specific item, such as a customer, or something more abstract, such as a
transaction. Part of the design process for any system focuses on determining
the entities that are important to the processes that the system implements and
then performing an analysis to see what information these entities need to
hold and what operations they should perform. You store the information that
a class holds as fields and use methods to implement the operations that a
class can perform.
Download from finelybook PI:EMAIL
263
Understanding classification
Class is the root word of the term classification. When you design a class,
you systematically arrange information and behavior into a meaningful
entity. This arranging is an act of classification and is something that
everyone does, not just programmers. For example, all cars share common
behaviors (they can be steered, stopped, accelerated, and so on) and common
attributes (they have a steering wheel, an engine, and so on). People use the
word car to mean an object that shares these common behaviors and
attributes. As long as everyone agrees on what a word means, this system
works well, and you can express complex but precise ideas in a concise form.
Without classification, it’s hard to imagine how people could think or
communicate at all.
Given that classification is so deeply ingrained in the way we think and
communicate, it makes sense to try to write programs by classifying the
different concepts inherent in a problem and its solution and then modeling
these classes in a programming language. This is exactly what you can do
with object-oriented programming languages, including Microsoft Visual C#.
The purpose of encapsulation
Encapsulation is an important principle when defining classes. The idea is
that a program that uses a class should not have to account for how that class
actually works internally; the program simply creates an instance of a class
and calls the methods of that class. As long as those methods do what they
are designed to do, the program does not need to know how they are
implemented. For example, when you call the Console.WriteLine method,
you don’t want to be bothered with all the intricate details of how the
Console class physically arranges for data to be written to the screen. A class
might need to maintain all sorts of internal state information to perform its
various methods. This additional state information and activity is hidden from
the program that is using the class. Therefore, encapsulation is sometimes
referred to as information hiding. Encapsulation actually has two purposes:
To combine methods and data within a class; in other words, to support
classification
Download from finelybook PI:EMAIL
264
To control the accessibility of the methods and data; in other words, to
control the use of the class
Defining and using a class
In C#, you use the class keyword to define a new class. The data and methods
of the class occur in the body of the class between a pair of braces. Following
is a C# class called Circle that contains one method (to calculate the circle’s
area) and one piece of data (the circle’s radius):
Click here to view code image
class Circle
{
    int radius;
    double Area()
    {
        return Math.PI * radius * radius;
    }
}
Note The Math class contains methods for performing mathematical
calculations and fields containing mathematical constants. The Math.PI
field contains the value 3.14159265358979, which is an approximation
of the value of pi.
The body of a class contains ordinary methods (such as Area) and fields
(such as radius). Recall from early on in the book that variables in a class are
called fields. Chapter 2, “Working with variables, operators, and
expressions,“ shows how to declare variables, and Chapter 3, “Writing
methods and applying scope,“ demonstrates how to write methods, so there’s
almost no new syntax here.
You can use the Circle class like you have used the other types you have
already met. You create a variable specifying Circle as its type, and then you
initialize the variable with some valid data. Here is an example:
Download from finelybook PI:EMAIL
265
Click here to view code image
Circle c; // Create a Circle variable
c = new Circle(); // Initialize it
A point worth highlighting in this code is the use of the new keyword.
Previously, when you initialized a variable such as an int or a float, you
simply assigned it a value:
Click here to view code image
int i;
i = 42;
You cannot do the same with variables of class types. One reason for this
is that C# just doesn’t provide the syntax for assigning literal class values to
variables. You cannot write a statement such as this:
Click here to view code image
Circle c;
c = 42;
After all, what is the Circle equivalent of 42? Another reason concerns the
way in which memory for variables of class types is allocated and managed
by the runtime—this is discussed further in Chapter 8, “Understanding values
and references.” For now, just accept that the new keyword creates a new
instance of a class, more commonly called an object.
You can, however, directly assign an instance of a class to another
variable of the same type, like this:
Click here to view code image
Circle c;
c = new Circle();
Circle d;
d = c;
However, this is not as straightforward as it might first appear, for reasons
that are described in Chapter 8.
Important Don’t confuse the terms class and object. A class is the
definition of a type. An object is an instance of that type created when
Download from finelybook PI:EMAIL
266
the program runs. Several different objects can be instances of the same
class.
Controlling accessibility
Surprisingly, the Circle class is currently of no practical use. By default,
when you encapsulate your methods and data within a class, the class forms a
boundary to the outside world. Fields (such as radius) and methods (such as
Area) defined in the class can be used by other methods inside the class but
not by the outside world; they are private to the class. So, although you can
create a Circle object in a program, you cannot access its radius field or call
its Area method, which is why the class is not of much use—yet! However,
you can modify the definition of a field or method with the public and private
keywords to control whether it is accessible from the outside:
A method or field is private if it is accessible only from within the
class. To declare that a method or field is private, you write the
keyword private before its declaration. As intimated previously, this is
actually the default, but it is good practice to state explicitly that fields
and methods are private to avoid any confusion.
A method or field is public if it is accessible both within and from
outside the class. To declare that a method or field is public, you write
the keyword public before its declaration.
Here is the Circle class again. This time, Area is declared as a public
method and radius is declared as a private field:
Click here to view code image
class Circle
{
    private int radius;
    public double Area()
    {
        return Math.PI * radius * radius;
    }
}
Download from finelybook PI:EMAIL
267
Note If you are a C++ programmer, be aware that no colon appears after
the public and private keywords. You must repeat the keyword for
every field and method declaration.
Although radius is declared as a private field and is not accessible from
outside the class, radius is accessible within the Circle class. The Area
method is inside the Circle class, so the body of Area has access to radius.
However, the class is still of limited value because there is no way of
initializing the radius field. To fix this, you can use a constructor.
Tip Remember that variables declared in a method are not initialized by
default. However, the fields in a class are automatically initialized to 0,
false, or null, depending on their type. Nonetheless, it is still good
practice to provide an explicit means of initializing fields.
Naming and accessibility
Many organizations have their own house style that they ask developers
to follow when they write code. Part of this style often involves rules
for naming identifiers. Typically, the purpose of these rules is to make
the code easier to maintain. The following recommendations are
reasonably common and relate to the naming conventions for fields and
methods based on the accessibility of class members; however, C# does
not enforce these rules:
Identifiers that are public should start with a capital letter. For
example, Area starts with A (not a) because it’s public. This
system is known as the PascalCase naming scheme (because it
Download from finelybook PI:EMAIL
268
was first used in the Pascal language).
Identifiers that are not public (which include local variables)
should start with a lowercase letter. For example, radius starts
with r (not R) because it’s private. This system is known as the
camelCase naming scheme.
Note Some organizations use the camelCase scheme only for
methods and adopt the convention to name private fields starting
with an underscore character, such as _radius. However, the
examples in this book use camelCase naming for private methods
and fields.
There’s only one exception to this rule: class names should start with
a capital letter, and constructors must match the name of their class
exactly; therefore, a private constructor must start with a capital letter.
Important Don’t declare two public class members whose names differ
only in case. If you do, developers using other languages that are not
case-sensitive (such as Microsoft Visual Basic) might not be able to
integrate your class into their solutions.
Working with constructors
When you use the new keyword to create an object, the runtime needs to
construct that object by using the definition of the class. The runtime must
grab a piece of memory from the operating system, fill it with the fields
defined by the class, and then invoke a constructor to perform any
Download from finelybook PI:EMAIL
269
initialization required.
A constructor is a special method that runs automatically when you create
an instance of a class. It has the same name as the class, and it can take
parameters, but it cannot return a value (not even void). Every class must
have a constructor. If you don’t write one, the compiler automatically
generates a default constructor for you. (However, the compiler-generated
default constructor doesn’t actually do anything.) You can write your own
default constructor quite easily. Just add a public method that does not return
a value and give it the same name as the class. The following example shows
the Circle class with a default constructor that initializes the radius field to 0:
Click here to view code image
class Circle
{
    private int radius;
    public Circle() // default constructor
    {
        radius = 0;
    }
    public double Area()
    {
        return Math.PI * radius * radius;
    }
}
Note In C# parlance, the default constructor is a constructor that does
not take any parameters. Regardless of whether, the compiler generates
the default construtor or you write it yourself, a constructor that does
not take any parameters is still the default constructor. You can also
write nondefault constructors (constructors that do take parameters), as
you will see in the upcoming section “Overloading constructors.”
In this example, the constructor is marked public. If this keyword is
omitted, the constructor will be private (just like any other method and field).
If the constructor is private, it cannot be used outside the class, which
Download from finelybook PI:EMAIL
270
prevents you from being able to create Circle objects from methods that are
not part of the Circle class. You might, therefore, think that private
constructors are not that valuable. They do have their uses, but they are
beyond the scope of the current discussion.
Having added a public constructor, you can now use the Circle class and
exercise its Area method. Notice how you use dot notation to invoke the Area
method on a Circle object:
Click here to view code image
Circle c;
c = new Circle();
double areaOfCircle = c.Area();
Overloading constructors
You’re almost finished, but not quite. You can now declare a Circle variable,
use it to reference a newly created Circle object, and then call its Area
method. However, there is one last problem. The area of all Circle objects
will always be 0 because the default constructor sets the radius to 0 and it
stays at 0; the radius field is private, and there is no easy way of changing its
value after it has been initialized. A constructor is just a special kind of
method, and it—like all methods—can be overloaded. Just as there are
several versions of the Console.WriteLine method, each of which takes
different parameters, so too can you write different versions of a constructor.
So, you can add another constructor to the Circle class with a parameter that
specifies the radius to use, like this:
Click here to view code image
class Circle
{
    private int radius;
    public Circle() // default constructor
    {
        radius = 0;
    }
    public Circle(int initialRadius) // overloaded constructor
    {
        radius = initialRadius;
    }
Download from finelybook PI:EMAIL
271
    public double Area()
    {
        return Math.PI * radius * radius;
    }
}
Note The order of the constructors in a class is immaterial; you can
define constructors in the order with which you feel most comfortable.
You can then use this constructor when you create a new Circle object,
such as in the following:
Click here to view code image
Circle c;
c = new Circle(45);
When you build the application, the compiler works out which constructor
it should call based on the parameters that you specify to the new operator. In
this example, you passed an int, so the compiler generates code that invokes
the constructor that takes an int parameter.
You should be aware of an important feature of the C# language: if you
write your own constructor for a class, the compiler does not generate a
default constructor. Therefore, if you’ve written your own constructor that
accepts one or more parameters and you also want a default constructor,
you’ll have to write the default constructor yourself.
Partial classes
A class can contain a number of methods, fields, and constructors, as
well as other items discussed in later chapters. A highly functional class
can become quite large. With C#, you can split the source code for a
class into separate files so that you can organize the definition of a large
class into smaller pieces that are easier to manage. This feature is used
by Visual Studio 2017 for Universal Windows Platform (UWP) apps,
Download from finelybook PI:EMAIL
272
where the source code that the developer can edit is maintained in a
separate file from the code that is generated by Visual Studio whenever
the layout of a form changes.
When you split a class across multiple files, you define the parts of