### RPC Configuration and Security

#### MIDL Generated Entry-Point Vector
```c
NULL,                           // Use the MIDL generated entry-point vector.
NULL,                           // Use the MIDL generated entry-point vector.
RPC_IF_ALLOW_LOCAL_ONLY,        // Only allow local connections.
RPC_C_LISTEN_MAX_CALLS_DEFAULT, // Use the default number of concurrent calls.
(unsigned)-1,                   // Infinite maximum size for incoming data blocks.
SecurityCallback                // No security callback.
```

This callback function can be implemented in any way you like. For example, you could allow or deny connections based on IP addresses.

#### Security Callbacks and Authenticated Bindings
We are nearing the end of the RPC terminology and background section. Let's delve into the final concepts.

For those new to these terms, here is a quick recap:
- You can create implicit and explicit interfaces using Windows API calls to set up your RPC server.
- Once you register your server, you can set registration flags and (optionally) a callback function to secure your server and filter clients.
- The last piece is an extra Windows API that allows the server and client to authenticate the binding, which provides benefits like ensuring only authenticated users can connect and impersonating the client.

**Why Use Authenticated Bindings?**
- **Authenticated Bindings** combined with the `RPC_IF_ALLOW_SECURE_ONLY` flag ensure that only authenticated users can connect to your RPC server.
- This also enables the server to determine who connected by impersonating the client, provided the client allows it.

**Example:**
- You can use the `SecurityCallback` to deny anonymous clients, but you would need to implement the filtering mechanism based on attributes you control.
- For instance, you wouldn't be able to determine if the client is a valid domain user without access to account information.

**Specifying Authenticated Bindings:**
- **Server Side:**
  ```c
  RPC_STATUS rpcStatus = RpcServerRegisterAuthInfo(
      pszSpn,             // Server principal name
      RPC_C_AUTHN_WINNT,  // Using NTLM as the authentication service provider
      NULL,               // Use default key function, ignored for NTLM SSP
      NULL                // No argument for key function
  );
  ```
- **Client Side:**
  ```c
  RPC_STATUS status = RpcBindingSetAuthInfoEx(
      hExplicitBinding,   // Client's binding handle
      pszHostSPN,         // Server's service principal name (SPN)
      RPC_C_AUTHN_LEVEL_PKT, // Authentication level PKT
      RPC_C_AUTHN_WINNT,  // Using NTLM as the authentication service provider
      NULL,               // Use current thread credentials
      RPC_C_AUTHZ_NAME,   // Authorization based on the provided SPN
      &secQos             // Quality of Service structure
  );
  ```

**Quality of Service (QoS) Structure:**
- On the client side, you can set a QoS structure with your authenticated binding handle. This can be used to determine the impersonation level.

**Important Notes:**
- Setting an authenticated binding on the server side does not enforce authentication on the client side unless the `RPC_IF_ALLOW_SECURE_ONLY` flag is set.
- If no flags are set or only `RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH` is set, unauthenticated clients can still connect.

#### Well-Known vs. Dynamic Endpoints
- **Well-Known Endpoints:** These are predefined and known to both the client and server. For example, using a Named Pipe with a specific name.
- **Dynamic Endpoints:** These are assigned dynamically by the system. The client needs to query the RPC Endpoint Mapper to find the endpoint.

**Implementation:**
- **Well-Known Endpoint:**
  ```c
  RPC_STATUS rpcStatus;
  rpcStatus = RpcServerUseProtseqEp(
      (RPC_WSTR)L"ncacn_np",          // Using Named Pipes
      RPC_C_PROTSEQ_MAX_REQS_DEFAULT, // Ignored for Named Pipes
      (RPC_WSTR)L"\\pipe\\FRPC-NP",   // Example Named Pipe name
      NULL                            // No security descriptor
  );
  rpcStatus = RpcServerRegisterIf2(...);
  rpcStatus = RpcServerRegisterAuthInfo(...);
  rpcStatus = RpcServerListen(
      1,                              // Minimum number of threads
      RPC_C_LISTEN_MAX_CALLS_DEFAULT, // Maximum number of threads
      FALSE                           // Start listening now
  );
  ```

- **Dynamic Endpoint:**
  ```c
  RPC_STATUS rpcStatus;
  RPC_BINDING_VECTOR* pbindingVector = 0;
  rpcStatus = RpcServerUseProtseq(
      (RPC_WSTR)L"ncacn_ip_tcp",      // Using TCP/IP
      RPC_C_PROTSEQ_MAX_REQS_DEFAULT, // Backlog queue length
      NULL                            // No security descriptor
  );
  rpcStatus = RpcServerRegisterIf2(...);
  rpcStatus = RpcServerRegisterAuthInfo(...);
  rpcStatus = RpcServerInqBindings(&pbindingVector);
  rpcStatus = RpcEpRegister(
      Example1_v1_0_s_ifspec,             // Interface defined via IDL
      pbindingVector,                     // Dynamic binding vectors
      0,                                  // Do not register vectors with UUIDs
      (RPC_WSTR)L"MyDyamicEndpointServer" // Annotation, max 64 characters
  );
  rpcStatus = RpcServerListen(
      1,                              // Minimum number of threads
      RPC_C_LISTEN_MAX_CALLS_DEFAULT, // Maximum number of threads
      FALSE                           // Start listening now
  );
  ```

**Communication Flow:**
1. Server registers interfaces.
2. Server creates binding information.
3. Server registers endpoints (optional for well-known endpoints).
4. Server registers authentication information (optional).
5. Server listens for client connections.
6. Client creates a binding handle.
7. Client queries the Endpoint Mapper (for dynamic endpoints).
8. Client authenticates the binding handle (optional).
9. Client makes an RPC call.
10. Client runtime library marshals arguments and sends them to the server.
11. Server runtime library unmarshals arguments and passes them to the server routines.
12. Server returns results, which are marshaled and sent back to the client.

**Access Matrix:**
- Implicit clients can only connect to implicit servers, and explicit clients can only connect to explicit servers. Otherwise, you get an Error 1717 (RPC_S_UNKNOWN_IF).

**Finding RPC Servers:**
- Use tools like `DumpBin` to search for executables that import RPC Windows APIs.
- Example PowerShell snippet:
  ```powershell
  Get-ChildItem -Path "C:\Windows\System32\" -Filter "*.exe" -Recurse -ErrorAction SilentlyContinue | % { $out=$(C:\"Program Files (x86)"\"Microsoft Visual Studio 14.0"\VC\bin\dumpbin.exe /IMPORTS:rpcrt4.dll $_.VersionInfo.FileName); If($out -like "*RpcServerListen*"){ Write-Host "[+] Exe starting RPC Server: $($_.VersionInfo.FileName)"; Write-Output "[+] $($_.VersionInfo.FileName)`n`n $($out|%{"$_`n"})" | Out-File -FilePath EXEs_RpcServerListen.txt -Append } }
  ```

**Attack Surface:**
- Look for potential vulnerabilities and exploits in the RPC communication chain.
- Explore general RPC design concepts for exploitation potential.

For more detailed information, refer to the Microsoft documentation:
- [Specifying Endpoints](https://docs.microsoft.com/en-us/windows/win32/rpc/specifying-endpoints)

Sample implementations and PoCs are available at:
- [GitHub Repository](https://github.com/csandker/InterProcessCommunication-Samples/tree/master/RPC/CPP-RPC-Client-Server)