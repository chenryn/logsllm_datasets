         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+3+rax] 
         mov      BYTE PTR [rdi+3+rax], cl 
         lea      rcx, [rax+4] 
         cmp      rdx, rcx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
382 
逆向工程权威指南（上册） 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+4+rax] 
         mov      BYTE PTR [rdi+4+rax], cl 
         lea      rcx, [rax+5] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+5+rax] 
         mov      BYTE PTR [rdi+5+rax], cl 
         lea      rcx, [rax+6] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+6+rax] 
         mov      BYTE PTR [rdi+6+rax], cl 
         lea      rcx, [rax+7] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+7+rax] 
         mov      BYTE PTR [rdi+7+rax], cl 
         lea      rcx, [rax+8] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+8+rax] 
         mov      BYTE PTR [rdi+8+rax], cl 
         lea      rcx, [rax+9] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+9+rax] 
         mov      BYTE PTR [rdi+9+rax], cl 
         lea      rcx, [rax+10] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+10+rax] 
         mov      BYTE PTR [rdi+10+rax], cl 
         lea      rcx, [rax+11] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+11+rax] 
         mov      BYTE PTR [rdi+11+rax], cl 
         lea      rcx, [rax+12] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+12+rax] 
         mov      BYTE PTR [rdi+12+rax], cl 
         lea      rcx, [rax+13] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    ecx, BYTE PTR [rsi+13+rax] 
         mov      BYTE PTR [rdi+13+rax], cl 
         lea      rcx, [rax+14] 
         cmp      rdx, rcx 
         jbe      .L1 
         movzx    edx, BYTE PTR [rsi+14+rax] 
         mov      BYTE PTR [rdi+14+rax], dl 
.L1: 
         pop      rbx 
         pop      rbp 
.L41: 
         rep ret 
.L13: 
         xor      eax, eax 
.L3: 
         movzx    ecx, BYTE PTR [rsi+rax] 
         mov      BYTE PTR [rdi+rax], cl 
         add      rax, 1 
         cmp      rax, rdx 
         jne  
.L3 
         rep ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 25 章 SIMD 
383 
.L28: 
         mov      eax, 14 
         jmp      .L4 
.L15: 
         mov      eax, 1 
         jmp      .L4 
.L16: 
         mov      eax, 2 
         jmp      .L4 
.L17: 
         mov      eax, 3 
         jmp      .L4 
.L18: 
         mov      eax, 4 
         jmp      .L4 
.L19: 
         mov      eax, 5 
         jmp      .L4 
.L20: 
         mov      eax, 6 
         jmp      .L4 
.L21: 
         mov      eax, 7 
         jmp      .L4 
.L22: 
         mov      eax, 8 
         jmp      .L4 
.L23: 
         mov      eax, 9 
         jmp      .L4 
.L24: 
         mov      eax, 10 
         jmp      .L4 
.L25: 
         mov      eax, 11 
         jmp      .L4 
.L26: 
         mov      eax, 12 
         jmp      .L4 
.L27: 
         mov      eax, 13 
         jmp      .L4 
25.2  SIMD 实现 strlen() 
根据 msdn（http://msdn.microsoft.com/en-us/library/y0dh78ez(VS.80).aspx），在 C/C++源程序中插入特定
的宏即可调用 SIMD 指令。在 MSVC 编译器的库文件之中，intrin.h 文件就使用了这种宏。 
我们可以把字符串进行分组处理，使用SIMD指令实现strlen()函数。这种算法比常规实现算法快 2～2.5
倍。它每次把 16 个字符加载到 1 个XMM寄存器里，然后检测字符串的结束标志—数值为零的结束符。
①
① 这种算法借鉴了网上的资料 http://www.strchr.com/sse2_optimised_strlen。 
size_t strlen_sse2(const char *str) 
{ 
    register size_t len = 0; 
    const char *s=str; 
    bool str_is_aligned=(((unsigned int)str)&0xFFFFFFF0) == (unsigned int)str; 
    if (str_is_aligned==false) 
         return strlen (str); 
    __m128i xmm0 = _mm_setzero_si128(); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
384 
逆向工程权威指南（上册） 
    __m128i xmm1; 
    int mask = 0; 
    for (;;)  
    { 
         xmm1 = _mm_load_si128((__m128i *)s); 
         xmm1 = _mm_cmpeq_epi8(xmm1, xmm0); 
         if ((mask = _mm_movemask_epi8(xmm1)) != 0) 
         { 
             unsigned long pos; 
             _BitScanForward(&pos, mask); 
             len += (size_t)pos; 
             break;  
         } 
         s += sizeof(__m128i); 
         len += sizeof(__m128i); 
    }; 
    return len;  
}  
使用 MSVC 2010（启用/Ox 选项）编译上述程序，可得到如下所示的代码。 
指令清单 25.2  Optimizing MSVC 2010 
_pos$75552 = -4           
; size = 4 
_str$ = 8                 
; size = 4 
?strlen_sse2@@YAIPBD@Z PROC ; strlen_sse2 
     pushebp 
     mov      ebp, esp 
     and      esp, -16  
; fffffff0H 
     mov      eax, DWORD PTR _str$[ebp] 
     sub      esp, 12  
; 0000000cH 
     push     esi 
     mov      esi, eax 
     and      esi, -16  
; fffffff0H 
     xor      edx, edx 
     mov      ecx, eax 
     cmp      esi, eax 
     je       SHORT $LN4@strlen_sse 
     lea      edx, DWORD PTR [eax+1] 
     npad     3 ; align next label 
$LL11@strlen_sse: 
     mov      cl, BYTE PTR [eax] 
     inc      eax 
     test     cl, cl 
     jne      SHORT $LL11@strlen_sse 
     sub      eax, edx 
     pop      esi 
     mov      esp, ebp 
     pop      ebp 
     ret      0 
$LN4@strlen_sse: 
     movdqa   xmm1, XMMWORD PTR [eax] 
     pxor     xmm0, xmm0 
     pcmpeqb  xmm1, xmm0 
     pmovmskb eax, xmm1 
     test     eax, eax 
     jne      SHORT $LN9@strlen_sse 
$LL3@strlen_sse: 
     movdqa   xmm1, XMMWORD PTR [ecx+16] 
     add       ecx, 16  
; 00000010H 
     pcmpeqb  xmm1, xmm0 
     add       edx, 16  
; 00000010H 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 25 章 SIMD 
385 
     pmovmskb eax, xmm1 
     test      eax, eax 
     je       SHORT $LL3@strlen_sse 
$LN9@strlen_sse: 
     bsf      eax, eax 
     mov      ecx, eax 
     mov      DWORD PTR _pos$75552[esp+16], eax 
     lea      eax, DWORD PTR [ecx+edx] 
     pop      esi 
     mov      esp, ebp 
     pop      ebp 
     ret      0 
?strlen_sse2@@YAIPBD@Z ENDP 
; strlen_sse2 
程序首先检查 str 指针是否已经向 16 字节边界对齐。如果这个地址没有对齐，就调用常规的 strlen()函
数计算字符串长度。 
然后通过 MOVDQA 指令把 16 字节数据加载到 XMM1 寄存器。 
部分读者可能会问：为什么不直接使用不要求指针对齐的 MOVDQU 指令？ 
这种说法似乎有道理：如果指针已经向 16 字节边界对齐了，我们可以使用 MOVDQA 指令；否则，就
使用速度慢些的 MOVDQU 指令。 
但是本文意在强调： 
在 Windows NT 系列操作系统，以及其他一些操作系统里，内存的最小分页单位是 4KB（4096 字节）。
虽然每个 win32 程序表面上都有（虚拟）独立的 4GB 内存可以使用，但是实际上部分地址空间受到物理内
存和分页方法的限制。如果程序试图访问不存在的内存块，将会引发错误。这是虚拟内存的工作方式决定
的，详情请参见 http://en.wikipedia.org/wiki/Page_(computer_memory)。 
所以，如果函数一次加载 16 字节数据，可能会跨越虚拟内存的内存块边界。例如说，操作系统可能在
地址为 0x00c0000 的物理内存处给这个程序分配了 8192（0x2000）字节的内存块。那么这个程序的内存就
在 0x008c0000 与 0x008c1fff 之间。 
在这个内存块之后，即位于 0x008c2000 地址以后的物理内存都不可被程序访问。换而言之，操作系统
没有给这个程序分配那块内存。如果程序访问这块不可用的内存地址就将引发错误。 
我们再来研究一下这个程序。程序可能在内存块的末端存储 5 个字符。这种分配方法是合情合理的。 
0x008c1ff8 
’h’ 
0x008c1ff9 
’e’ 
0x008c1ffa 
’l’ 
0x008c1ffb 
’l’ 
0x008c1ffc 
’o’ 
0x008c1ffd 
’\x00’ 
0x008c1ffe 
random noise 
0x008c1fff 
random noise 
当采用常规算法的 strlen()函数在处理这个字符串时，首先把指针指向“hello”的第一个字节，即地址
0x008c1ff8。strlen()函数会逐字节地读取字符串。在遇到 0x008c1ffd 的 0 字节的时候，函数就结束了。 
假如我们编写的 strlen()函数不考虑字符串的地址对齐问题，无论字符串指针地址是否已经向 16 字节
边界对齐，每次都读取 16 字节。那么它就可能要从 0x008c1ff8 一直读取到 0x008c2008，这将引发错误。
当然，我们应当尽力避免这种错误。 
所以仅在字符串地址向 16 字节边界对齐的情况下，才可以使用基于 SIMD 技术的算法。另外，操作系
统在进行内存分页时也是向 16 字节边界对齐的，所以在字符串首地址同样向 16 字节边界对齐时，我们的
函数不会访问未分配的内存空间。 
下面继续介绍我们的函数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
386 
逆向工程权威指南（上册） 
_mm_setzero_si128()：清空 XMM0 寄存器的指令，相当于 pxor xmm0, xmm0。 
_mm_load_si128()：MOVDQA 的宏。它从指定地址里加载 16 字节数据到 XMM1 寄存器。 
_mm_cmpeq_epi8()：PCMPEQB 的宏。它以字节为单位，比较两个 XMM 专用寄存器的值。如果某个字节
相等，该字节返回值为 0xff，否则返回值为 0。举例来说，运行 pcmpeqdb xmm1, xmm0 指令的情况如下表所示。 
运行前 
XMM1 
11223344556677880000000000000000 
运行前 
XMM0 
11ab3444007877881111111111111111 
运行后 
XMM1 
ff0000ff0000ffff0000000000000000 
本例先用“pxor xmm0, xmm0”将 xmm0 寄存器清零，然后把从字符串摘取出的 16 字节与 XMM0 寄
存器的 16 个 0 相比较。 
下一条指令是_mm_movemask_epi8()，即 PMOVVMSKB 指令。这个指令通常与 PCMPEQB 配合使用： 
pmovmskb eax, xmm1 
在 XMM1 的第一个字节的最高位是 1 的情况下，设置 EAX 寄存器的最高位为 1。也就是说，如果 XMM1
寄存器的值是 0xff，那么 EAX 寄存器的最高位还会被赋值为 1。 
它还会在 XMM1 的第二个字节是 0xff 的情况下，设置 EAX 寄存器的次高位为 1。 
总而言之，这个指令此处的作用是“判断 XMM1 的每个字节是否是 0xFF”。如果 XMM1 的第 n 个字
节是 0xFF，则设置 EAX 的第 n 位为 1，否则 EAX 的第 n 位为 0。 
另外，不要忘记我们的算法可能会遇到的实际问题：指针指向的字符串可能包含有效值、结束符和脏
数据。例如： 
15 
14 
13 
12 
11 
10 
9～3 
2 
1～0 
“h” 
“e” 
“l” 
“l” 
“o” 
0 
脏数据 
0 
脏数据 
一次读取 16 字节到 XMM 寄存器，并将它与 XMM0 里的零进行比较，可能会得到这样的计算结果（从
左到右是 LSB 到 MSB 的顺序）： 
XMM1: 0000ff00000000000000ff0000000000 
也就是说它找到了 2 个以上的零。这是情理之中的结果。 
在这种情况下 PMOVMSKB 指令将设置 EAX 为（二进制）：0010000000100000b。 
很明显，我们的函数必须以第一个结束符为准，忽略掉脏数据里的结束符。 
下一条 BSF（Bit Scan Forward）指令将保留操作符二进制值里的第一个 1，将其余位清零，并把结果
存储到第一个操作符里。 
在 EAX=0010000000100000b 的情况下，执行“bsf eax, eax”，那么 EAX 将将保留第 5 位的 1（从 0 开