第一步我们可以泄漏的东西是一个port的地址,具体我们看代码convert voucher to port:
如果iv_port为空,则内核会分配一个新的port,并且放在iv_port的位置.所以在第一步重新分配OSString去fake
ipc_voucher的关键就在于令iv_port这个offset为空,在分配port完成后,通过API把OSString读回来,就可以得到刚分配的一个port的地址.
还有很重要的一点是offset问题,如果分配的OSString的开始位置不能刚好对应ipc_voucher的开始位置,我们伪造的一切数据都会错误.这里因为在iPhone
XS
Max中(A12)一个page的大小是0x4000,而zone的分配是以page为单位的,也就是说第一个ipc_voucher必定是page对齐的,所以我们分配的OSString只需要page对齐即可以保证和ipc_voucher对齐.(这里可能有点难理解,原谅我的表达能力),分配代码如下:
这里的padding我们暂时不用管是什么,后续会用到.因为port为0x0,
所以在port后续会赋值一个port的真实地址,然后通过查找找出port的地址和占据了对应内存的OSString index:
我们之前提到了这个port是没有send right的,后续我们利用中需要用到receive
right去泄漏kernel的slide,所以这里我用了一个trick,在它附近分配大量的带有receive
right的port,最后我们可以用这个地址减去sizeof(ipc_port_t)即可得到一个receive right port的地址.
##### 0x23 Fake a port
因为SMAP的关系,我们需要在内核地址中伪造port,这里我们需要得到一个我们可控的内核地址,也就是上面分配的那么多的OSString的其中一个即可,通过heap
spray大量分配内存可以令这个地址更加容易猜测.
一开始我打算用泄漏的port地址去计算相关的偏移得到这个地址,但是后来我发现iOS中的堆地址随机化比较弱,所以这里我用了一个固定的地址:
然后我们重新分配上面提到的OSString,重新伪造ipc_voucher,令它的port指向我们的可控地址,还记得我们记录下了对应的OSString的idx了吗?通过它我们可以很快定位出需要reallocate的OSString:
这里的第三个参数就是需要伪造的port的地址,我们看到这里有一个magic offset 0x8,在Fake Voucher开始位置再减去magic
offset，也指向在上文我们提到的padding第二个域:
在这里我把fake voucher和fake port的内存区域重叠起来了,在padding+0x8的地方其实是fake
port的开始地址,再往后会返回到hash域，通过这样的布局刚好可以满足fake voucher和fake
port的要求而且不panic.这里重叠起来实属无奈之举,因为我们只有一次重分配的机会,如果重分配两次,第一次分配的OSString 用来fake
voucher,第二次用来fake port,则我们猜测的地址有一半可能是指向fake voucher,现在这样只有一种可能,就是指向fake port.
##### 0x24 leak the idx OSString of fake port
由于后期需要多次重分配fake port内存区域的数据,所以需要找到fake port对应的OSString的index:
通过调用thread_get_mach_voucher=>convert_voucher_to_port,
我们可以得到两个需要的东西.第一是OSString的index,因为convert_voucher_to_port会修改fake
port区域的reference,通过这个不同可以找出index:
第二个得到的是指向我们可控地址的用户态port, 也就是上图中的| fake_port_to_addr_control |,通过它和修改fake
port的数据,我们可以做很多事情.
##### 0x25 任意内存地址读
通过在fake port中伪造一个task port, 然后通过调用pid_for_task(关于这个利用技巧网上已有大量讨论,这里不再解释),
我们可以任意地址读,每一次是32位,但是弊端就在于每一次读取我们都要重新分配OSString,因为我们需要修改fake
port中需要读取的内存地址.因为我们知道对应的OSString index,我们不需要全部OSString重新分配:
这里我不是单单只重分配对应的index,是设置了一个range
0x50,也就是把这个index前后0x50个OSString也重新分配,令我吃惊的是,这个重分配出奇的稳定,原本我会觉得这个exploit会挺不稳定.
在上文我们已经泄漏了一个带有receive right的port 地址,利用这个地址加任意地址读,我们可以最后得到kernel
slide,关于这部分内容以及接下来的网上已有讨论的我不再详述,还是推荐看这篇文章
##### 0x26 fake a map port
现在的我们每一次操作fake port都要重新分配OSString,这对于利用十分不友好,在得到了kernel的slide,我们下一步应该立刻把|
fake_port_to_addr_control |对应的内核地址remap到我们进程的用户态,这样以后每一次修改fake
port的数据就可以直接在用户态修改,不需要通过重分配OSString:
通过remap后,用户态对应地址和内核态对应地址共享一个物理内存区域,这样通过修改用户态的地址即可达到修改内核态对应地址的数据的目的(除非是COW)
##### 0x27 Fake TFP0
由于在convert_port_to_task中会检测port的ip_kobject,也就是task_t的地址是否等于kernel_task,所以我们不能直接把读取出来的kernel_task地址赋值到fake
port的ip_kobject中,而需要它先memcpy到另外一个内核地址,然后再赋值.
这里我分开两步骤,第一用一个真实的内核对象port去初始化fake port的所有数据,因为tfp0和所有内核对象的port都是共享一个receiver |
ipc_space_kernel
|,这里我用了一个IOSurefaceRootUserClient的port去初始化.如果不这样做在用tfp0调用内核API的时候会出错,因为很多属性值还没有初始化,例如ip_messages.
接下来把原生的kernel task地址copy到另外一个内核地址,并且修改tfp0 port中一些与IOSurefaceRootUserClient
port不同的部分:
最后一步,重新分配fake voucher中的port地址,指向我们最新fake
tfp0的地址,然后通过thread_get_mach_voucher返回到用户态,最终得到tfp0:
### 0x3 Cleaning the stuff
因为我们在程序结束的时候，还有一个danging Pointer在thread mach voucher中指向我们的danging
Pointer，而danging
Pointer是指向我们OSString分配的内存，这部分内存在IOSurfaceRootUserClient释放的时候进行释放的，也就是进程结束的时候。除此之外，还有众多我们伪造的port，都是指向OSString分配的内存，所以都要在进程结束前一并回收.
最后，包括我们最终生成的tfp0，也是需要进行释放的，所以如果想要保持tfp0的持久性，最好在post
exploit阶段重新自己构造一个新的tfp0.至此tfp0的利用已经结束,关于后续的post exploit,
根目录读写,签名bypass等等这里不会提及.
### 0x4 总结
我们都知道，在A12中引入了PAC的mitigation，很多人都觉得这是UaF甚至是越狱的终点.事实证明，UaF的洞还是可以在PAC的环境下利用，这需要看具体的情况，因为PAC只是针对间接调用控制pc寄存器这一方面。我们可以看到，在取得tfp0的整个过程中,我们不需要控制pc寄存器,这是因为我们释放的对象ipc_voucher中存在一个port的属性值.UaF漏洞的利用很大程度上依赖这个释放的对象的数据结构以及这些数据结构怎么去使用,因为最终我们要转换成type
confusion.
* * *