00008713ca12883ecbfdecb5587f710fa8170a3759c7f28afd6b43f7b4ba
4100
Fig, 3.51 Restore the entire contents of the first block
If [Intermediary Byte] ~ 0x56 == 0x02,
then [Intermediary Byte] == Ox56 ~ 0x02,
so [Intermediary Byte] == Ox54,
then [Plaintext] == 0x54 ^ 0x3a
so [Plaintext] == 0x6e (hex decoded to 'n*}
This is repeated until the length of the fill string is the length of the entire block, at
which point we can restore the entire contents of the first block, see Fig. 3.51.
According to the decryption rule of CBC mode, the intermediate result is not
affected by the IV in the decryption process. At this point, the second block is
directly spliced into the IV sequence of zero, and then follow the similar procedure,
but when the plaintext is obtained, the value of the corresponding position of the
previous block needs to be dissimilar, so that the decryption of the second block can
be completed. This is repeated, and finally the entire plaintext is recovered.
According to the principle of CBC mode encryption and decryption in Part IL,
when the plaintext, secret, target plaintext, and IV are known, we can construct any
string. Which means we can change
---
## Page 262
3.3 Cryptography and Reverse Knowledge
247
{"f": *markdoWm*, "c" : *AAAAAAAAAAAAAAAAAAAAAA", "t": *htm14*}
into
{"f": *markdoMm -A /flag*, "c" : *AAAAAAAAAAAAAAAAA", *t*: "html4"}
In the process of modification, you need to forge from the last ciphertext block. In
forgery, the decrypted contents of the previous ciphertext block will also change.
Due to the existence of the Padding Oracle, we can obtain the intermediate results of
decryption of the modified ciphertext block, and then move forward in turn to
complete the forgery of any string.
Principle is introduction, but in order to solve a challenge quick enough, you can
use tools provided by https://github.com/pspaul/padding-oracle. With the help of it,
you only need to modify a small piece of code to implement all the features.
The code for this challenge is as follows:
from padding_oracle import PaddingOrac1e
from optimized_alphabets import json_alphabet
import requests
def oracle (cipher_hex) :
headers = { Cookie' : 'vals=() * format (cipher_hex) }
r = requests . get ( 'http : //converter .uni .hctf . fun/convert ′,
headers=headers)
response =r.content
if b' Invalid padding bytea. not in response:
else :
return True
return False
o = PaddingOracle (oracle, max_retries=-1)
c1pher =
4740dc0fb13fe473e540ac958fce3a51710fa8170a3759c7f28afd6b43
f 7b4ba6a01b23da63768
629d16e13c5279ab121cbe08ec83600221*
c1f6e82ee6b98f47f6e40f6c16dc0c202f5b5c5ed99113cc
plain, _= o. decrypt (cipher, optimized_alphabet=json_alphabet () )
print ( 'Plaintext: {) ′. format (plain) )
plain_new = b' {"f" : "markdown -Aflag . txt", "c" : "AAAAAAAAAAAAAAA*, *t :
"html4"}'
print (Modified: () ' format (ciphex_nev) )
ciphez_new = o.craft (cipher, plain, plain_new)
# Modified: 2b238f593152e2elea5ab37eb0826fca642b1dde7a17bf439a83e08
7d28d7ee1097ad35ea6376
8clf6e82ee6b98f47f6e40f6c16dc0c202f5b5c5ed99113cc629d16e13c5279ab
121cbe08ec83600221
---
## Page 263
248
3 Advanced Web Challenges
3.3.1.6 Hash Length Extension
In the Web, cryptography is used in addition to encryption and signature. When the
server generates a redential that needs to be saved in the client, the corect use f
hash function can ensure that the sensitive information forged by the user will not
pass the verification of the server and affect the normal operation of the system.
Many Hash functions adopt merkle-Damgard structure, such as MD5, SHA1,
SHA256, etc. In the case of incorrect use, these Hash algorithms will be affected
by Hash Length Extension (HLE).
First, HLE applies for Hash(secret+message) encryption. Although we do not
know the content of secret, we can still splice the constructed payload after the
message and send it to the server to bypass the verification. To understand this
attack, we need to understand Hash algorithms. Here, take SHA1 as an example.
There are three steps we need to pay attention to when encrypting (see the cryptog-
raphy section for specific algorithms):
(1) Information processing
In SHA1 algorithm, the algorithm will process the input information as a group of
512 bits. In this case, there may be less than 512 bits, so we need to fill the original
information. To populate, a 1 is inserted at the end of the array, followed by zeroes
until the entire message length satisfies Length (Message +padding) % 512 = 448. It
and the 64 bits plus the previous 48 bits make a 512 bit grouping.
is 448 because we need to add the length of the message at the end of the message,
(2) Complementary length
In the MD algorithm, the last group is used to fill in the length, which is why the
SHA1 algorithm can handle messages that are no longer than 2^64 bits long.
(3) Calculating the hash
When calculating the message digest, 512 bits are removed from the message after
the complement is completed and hashed. There are five initial variables A =
0x67452301, B = 0xEFCDAB89, C = 0x98BADCFE, D = 0x10325476, and E
= 0xC3D2E1F0, which are used to participate in the fist round of calculations.
After the first round of calculations, A, B, C, D, and E will be updated to the result of
the hash function affer the curent round of calculations according to certain rules. In
other words, after each round of calculation, the result is used as the initial value for
the next round. The process is repeated until the calculation of all the information is
completed, and the result of the hash calculation is output, i.e., the SHA1 value.
For the hash(secret+message) method, the server sends the result of the Hash
(secret+message+original fil+original length) to the client. Now, we only need to
 a ueo am u pue upped jo ssaood osp aado jaas jo u a ssan
intermediate result of a certain round of calculation of the Hash function without
knowing the secret, i.e., when the Hash (secret+message+original fill+original
Jo Sussaood osp qsuy o suaddeu snf 1 poopad si uogeuado (peoped+ua
---
## Page 264
3.3 Cryptography and Reverse Knowledge
249
any group before the payload. Since the intermediate result in subsequent operations
is not affected by the information in the previous group, it is possible to add any
payload to the end of the original information, while ensuring that the results of the
hash are correct.
Let's take Extends Me in Backdoor CTF 2017 as an example, for which the
corresponding source code is provided in the title (htps:/github. com/jbzteam/CTF/
tree/master/BackdoorCTF2017).
usermame = str (zequest form. get ('username *))
if request . cookies -get ('data′) and request . cookies get ('user*) :
data = str (requeat.cookies.get (*data*)) .decode ('base64') . strip()
user = str (request .cookies.get ('user*1) decode ('base64') . strip ()
if data I = SLHA1 (temp) digest () :
temp = *| ' - join ( [key, usezname, user] 1
temp = SLHA1 (temp) . digest (1 -encode ( 'base64 ') stxip () .replace
(\n',**)
resp = make_response render_tenplate ( 'welcome_new.html ' , name =
username) )
resp . set_cookie (user1, *usez' ,encode ('base64') strip (1)
resp -set_cookie ('data', temp)
return resp
else :
if 'admin' in user: # too lazy to check properly :p
return *Hexe you go: CTF{xxxXxXXXxxxxXxxxxxxxxxxxxxXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX）*
else :
return render_template (*velcome_back.html ' , name = usernane)
In the login function, usermame is passed in by post, and the values of data and
user are passed in the cookie. Where data is the result of SLHA1(key I username I
user). In this signature process, key is an unknown parameter, usermame is control-
lable, and user is controllable. Flag is returmed only if the contents of data are the
same as the result of SLHA1 signature.
Looking at the SLHA1 function, we can find that it is a hash algorithm similar to
the SHA1 algorithm, but with modified padding and init variables so that the SLHA1
algorithm is also threatened by HLE.
def _init__(self, azg='') :
# Hodified initial link variables
self ._h = [0x67452301,
0xEFCDA189,
0x98BADCFE,
0x10365476,
0xC3F2E1F0,
0x6A75 6A7A]
def _produce_digeat (self) :
---
## Page 265
250
soeD qPM pouapV 
nessage = self ._unprocessed
nessage_byte_length = self ._message_byte_length + len (message)
# Modified the fil1 part of the function
nessage += b' \xfd'
message += b′ \,xab' * ( (56 - (message_byte_length + 1) $ 64) $ 64)
message_bit_length = message_byte_length + 8
nessage += struct -pack (b* >Q′, message_bit_length)
h = _process_chunk (message [:64] , *self ._h)
So, the idea is to fill the string admin to the end of the user. We can modify the
program to complete the hash length expansion.
from hash import SLHA1
import requests
import struct
def extend (digest, length, ext) :
# Fi1l the original string
pad = 'd’\xfd’
pad += *\,xab+ * ( (56 - (1ength + 1) $ 64) $ 64)
pad += struct ·pack ('>Q', 1ength * 8)
s1ha = SLHA1 ()
# Assign the original hash result to the linked variable as an
intermedlate result.
slha._h = [struct .unpack [°>I', digest [i*4 :i+4+4] 1 [o] for i in range
# Since ve are starting from an intermediate result, we need to change the
(6) ]
length of the message to the length that will be given after we finish the
fi11, f11, and fi11 length.
slha ._message_byte_length = length + len (pad)
# Add a payload to the message
slha.update (ext)
return (pad + ext, slha.digest ()))
{ , oueuxosn, 1,owruxosn, } = qsod
cookies ={ 'data' : *KpqBaFCA/oL2hd3almvREbzSQ3SzxHX9′,
‘user' : *dxNlcg=='
orig_digest = cookies [′data′] decode (*base64′}
orig_user = cookies ['user′] decode [*base64*)
min_len = len (*|' join ( [?′, post ['username′] , orig_user] >) , post
[′usermame'], orig_user] 
for length in range [min_1en, min_len+64) :
print (* [+) Trying length: () * format (length) )
ext, nev_digest = extend (orig_digest, length, 'admin')
cookies ['data′] = new_digest encode *base64*) strip () .replace
('\n', **)
---
## Page 266
3.3 Cryptography and Reverse Knowledge
251
replace ('\n', *)
cookies ['user′] = (orig_user + ext) .encode ('base64*) strip () 
 = requests -post ('https: / /extend-me -please . herokuapp com/1ogin,
data=post, cookies=cookies)
if cre{, in r.text :
print (r.text)
break
[+] Trying length: 29
 [+] Trying length: 30
# [+] Trying length: 31
# [+]  Trying length: 32
 [+] Trying length: 33
 Here you go : CTF {41w4y3_u53_hm4c_f0r_4u7h]
The length of the burst here is a range because we don't know what the length of
the key is, so the length of what needs to be filled cannot be determined. In case the
algorithm is correct, the server will retum the flag when the length of the key is
correct by traversing through it.
3.3.1.7Pseudorandom Numbers
In cryptography, pseudorandom number is also an important concept. But software
does not generate truly random numbers. Pseudorandom numbers generated by
insecure libraries are not random enough and are also a challenge in the CTF
competition.
paes + tuae, to poseq (eaus s! uogesuas 1aqunu wopues-opnasd
PHP has two functions that generate pseudorandom numbers: mt_rand and rand.
Their corresponding seeding functions are mt_srand and srand. When the seed is the
same, no matter how many times they are generated, they always generate the same
random number. See Fig. 3.52 for the random number output by the following
program.
<?php
$seed = 1234 ;
mt_srand (Sseed) ;
for ($1=0; $i<10; $i++) {
echo mt_rand () ." \n*;
Sseed = 9876 ;
for ($1=0; $i<10; $i++1 {
srand (Sseed) ;
 gtr =* ()puex oqos
?7
---
## Page 267
252
3 Advanced Web Challenges
Fig, 3.52The random
number output by the
411284887
following poogram
1068724585
1335968403
1756294682
940013158
1314500282
1686544716
1656482812
1674985287
10
1848274264
11
351333277
12
1173414163
1332775921
14
1649468099
15
1935164921
16
1011658253
公
1646039988
552667036
19
1102179230
20
195955386
21
If somehow we get the seed used by the server, whether it's a fixed value or a
timestamp, we can predict the pseudorandom numbers that will be generated later.
In the rand function, if srand is not called, the random number generated follows a
ed
state [1] = state [1-3]  state [1 -31]
In addition, on each call to mt_rand, PHP checks to see if a seed has been set. If
already set, generate random number directly, otherwise automatically set a seed.
The range of seeds used for auto-seeding is 0 to 232, and in each process handled by
PHP, as long as auto-seeding is performed, this seed is used until the process is
recycled. Therefore, while keeping the connection alive, we can use php_mt_seed
tool to blast the seeds according to the results of the generated random number list,
so as to achieve the purpose of predicting random numbers.
Although we have only described the pseudo-random numbers in PHP, in fact,
there are also problems with the strength of pseudo-random numbers in other
languages, such as Python, as shown in Fig. 3.53.
---
## Page 268
3.3 Cryptography and Reverse Knowledge
253
foriinr
seed(123
183
28
2
Fig, 3.53 The strength of pseudo-random numbers in python
between 0 and getrandmax[. f you want a random number between 5 and 15 (nctusve),for
example, use rand(s, 15),
Caution This function does not generate cryptographically secure values, and should not be
used for cryptographic purposes If you need a cryptographically secure value, consider using
random_int), random_bytesD, or openssl_random_pseudo_bytesQ instead.
Note: On some platforms (such as Windows), getrandmax[) is only 32767, If you require a
Fig, 3.54 The introduction of relevant functions in relevant official documents
IEandom:[) to generafo random numbors from souroes provided by the oporating system,
Waming:The pseudorandom generators of thls module should not be ued for socuritypuposes
For socurly or cryplographic uses, see tho secret:s module.
See also: M. Matsumoto and T. Nishimura, Morsenne Twister: A 623-dimonsionally
fouidistribufed.unifrrm.nseudorandom.number.oeneratorACM Transactions.on Modelino.ann
Fig, 3.55 The introduction of relevant functions in relevant official documents
When dealing with such problems, you can refer to the introduction of relevant
functions in relevant official documents. If the generated pseudo-random number
can be predicted, there will be a hint that the pseudo-random function is not suitable
for encryption, as shown in Figs. 3.54 and 3.55.
---
## Page 269
254
3 Advanced Web Challenges
3.3.1.8 Cryptography Summary
The attack methods and examples of cryptography introduced above are only a few
combinations of Web and Crypto, but cryptography focuses on more than these,
such as the CFB mode that can be replay attack in the block encryption mode, the
CTR mode that can be affected by bit-reversal attack, and even other stream
encryption algorithms. Although there is no example of combining with The Web,
it can still become the focus of the challenge maker in the future and appear in the
challenges. Therefore, Web competitors also need to know some knowledge of
cryptography, identify whether an encryption algorithm is vulnerable or not.
What’s more, web competitors must know when the data obtained in the challenges
and the string needed to construct should be given to the team’s cryptography
masters, and finally meet the requirements in the challenges.
3.3.2ReverseEngineeringin theWeb
3.3.2.1Python
In CTF competitions, some challenges may have arbitrary file download vulnera-
bilities but restrict the types of files that can be downloaded, such as.py in Python.
Python compiles .py files to .pyc or -pyo files at runtime to speed up the program. By
recovering bytecode information in these files, you can also retrieve the original
program code.
For example, in L Playground2 of LCTF 2018, the key code is shown in
Fig. 3.56. The interface of file download limits that the .py file cannot be directly
downloaded, but the corresponding pyc ile can be downloaded for decompilation to
obtain the source code, as shown in Fig. 3.57.
3.3.2.2PHP
It is very likely that code will be encrypted during CTF Web competitions. To
understand PHP encryption, you need to know that PHP is not executed directly at
runtime. Instead, it is compiled once, and the cpmpiled Opcode is executed. There
are three important functions called zend_compile_file, zend_compile_string and
zend_execute. Common encryption methods include file encryption, code encryp-
tion, virtual machine implementation, etc. Due to different encryption methods,
decryption is also varying. The decryption plug-in modified to compile and to
execute according to different algorithms.
Traditional PHP encryption schemes are based on PHP code, destroying its
readability by obfuscating the code, decrypting the final code through PHP
interpretor, and executing the decrypted code through eval. For this type of problem,
since we know that it ultimately feed the decrypted code to eval, we decrypt the code
---
## Page 270
3.3 Cryptography and Reverse Knowledge
255
def parse_file(path):
filename = os.path.join(sandbox_dir, path)
If “./" In filename or ",,* in filename:
10
return “invalid content in ur]"
1.1
If not filename.startswith(base_dir):
return “url have to start with %s" % base_dir
13
If f1lename.endswith(“py") or *flag"in f1lename:
14
return “invalid content in filename"
15
if os.path.isdir(filename):
17
file_list - os.listdir(filenare)
18
return “,“-join(file_list)