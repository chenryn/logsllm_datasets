### 优化后的文本

#### 代码片段
```assembly
DWORD PTR _a$[esp-4], OFFSET $SG2800 : '3, 4, 5'
$LN3ef:
jmp
gadduT sia C80R
mov
DWORD PTR _a$[esp-4], OFFSET $SG2802 : '8, 9, 21'
$LN2ef:
jmp
DWORD PTR _impprintf
mov
DWORD PTR _a$[esp-4], OFFSET $SG2806 : 'default'
align 16 ; align $LN118f table on 16-byte boundary
DWORD PTR _imp_printf
$LN11ef:
DD $LN5ef ; print '1, 2, 7, 10'
DD $LN4ef ; print '3, 4, 5'
DD $LN2ef ; print '8, 9, 21'
DD $LN3ef ; print '22'
DD $LN1ef ; print 'default'
DB 0 ; a=1
DB 0 ; a=2
DB 1 ; a=3
DB 1 ; a=5
DB 0 ; a=6
DB 1 ; a=7
DB 1 ; a=8
DB 1 ; a=10
DB 0 ; a=12
DB 0 ; a=11
DB 0 ; a=13
DB 0 ; a=14
DB 0 ; a=15
DB 0 ; a=16
DB 0 ; a=17
DB 0 ; a=18
DB 0 ; a=20
DB 1 ; a=19
DB 1 ; a=21
DB 2 ; a=22
_f ENDP
```

#### 解释
这个程序使用了两个表：一个是索引表 `$LN10@f`，另一个是转移表 `$LN11@f`。

1. **第13行的 `movzx` 指令** 在索引表中查询输入值。
2. **索引表的返回值** 分为以下几种情况：
   - 0（输入值为1、2、7、10）
   - 1（输入值为3、4、5）
   - 2（输入值为8、9、21）
   - 3（输入值为22）
   - 4（其他值）

程序将索引表的返回值作为关键字，在第二个转移表中进行查询，以完成相应的跳转（第14行指令的作用）。

需要注意的是，输入值为0的情况没有相应的case从句。如果 `a=0`，则 `deccax` 指令会继续进行计算，而 `$LN10@f` 表的查询是从1开始的。因此，没有必要为0的特例设置单独的表。

---

### Page 165
#### 第13章 switch/case/default
这是一种普遍应用的编译技术。虽然表面上看，这种双表结构似乎不占优势，但它比前文（请参见13.2.1节）采用一个统一的指针结构更为紧凑。索引表采用的是byte型数据，因此双表结构比单表结构更紧凑。

#### 13.3.2 GCC
在编译这种多对一的switch语句时，GCC会生成统一的转移表。其代码风格与前文13.2.1节的风格相同。

#### 13.3.3 ARM64: Optimizing GCC 4.9.1
由于输入值为零的情况没有对应的处理方法，GCC会从输入值为1的特例开始枚举各个分支，以便把转移表压缩得尽可能小。

GCC 4.9.1 for ARM64 的编译技术更为优越。它能把所有的偏移量信息编码为8位字节型数据，并封装在单条指令的opcode里。ARM64程序的每条指令都对应着4个字节的opcode。在这种类型的小型代码中，各分支偏移量的具体数值不会很大。GCC能够充分利用这一现象，构造出单字节指针组成的转移表。

#### 指令清单 13.11 Optimizing GCC 4.9.1 ARM64
```assembly
; input value in W0
f14:
cmp w0, 11
b.ls -L2
sub w0, w0, 1
adrp x0, .LC4
add x0, x0, :lo12:.LC4
b -L9
-L2:
adrp x1, .L4
add x1, x1, :lo12:.L4
ldrb w0, [x1, w0, uxt]
adr x1, .Lrtx4
add x0, x1, x0, sxtb #2
br x0
-Lrtx:
.section .rodata
.byte (.L3 - .Lrtx4) / 4 ; case 1
.byte (.L3 - .Lrtx4) / 4 ; case 2
.byte (.L3 - .Lrtx4) / 4 ; case 4
.byte (.L3 - .Lrtx4) / 4 ; case 5
.byte (.L3 - .Lrtx4) / 4 ; case 6
.byte (.L3 - .Lrtx4) / 4 ; case 7
.byte (.L3 - .Lrtx4) / 4 ; case 8
.byte (.L3 - .Lrtx4) / 4 ; case 9
.byte (.L3 - .Lrtx4) / 4 ; case 10
.byte (.L3 - .Lrtx4) / 4 ; case 11
.byte (.L3 - .Lrtx4) / 4 ; case 12
.byte (.L3 - .Lrtx4) / 4 ; case 13
.byte (.L3 - .Lrtx4) / 4 ; case 14
.byte (.L3 - .Lrtx4) / 4 ; case 15
.byte (.L3 - .Lrtx4) / 4 ; case 16
.byte (.L3 - .Lrtx4) / 4 ; case 17
.byte (.L3 - .Lrtx4) / 4 ; case 18
.byte (.L3 - .Lrtx4) / 4 ; case 19
.byte (.L3 - .Lrtx4) / 4 ; case 20
.byte (.L3 - .Lrtx4) / 4 ; case 21
.byte (.L3 - .Lrtx4) / 4 ; case 22
.text
.L7:
adrp x0, .LC3
add x0, x0, :lo12:.LC3
bl puts
.L6:
adrp x0, .LC2
add x0, x0, :lo12:.LC2
bl puts
.L5:
adrp x0, .LC1
add x0, x0, :lo12:.LC1
bl puts
.L3:
adrp x0, .LC0
add x0, x0, :lo12:.LC0
bl puts
.LC0:
.string "1, 2, 7, 10"
.LC1:
.string "3, 4, 5"
.LC2:
.string "8, 9, 21"
.LC3:
.string "22"
.LC4:
.string "default"
```

#### 指令清单 13.12 jumptable in IDA
```assembly
.rodata:0000000000000064
AREA rodata, DATA, READONLY
.rodata:0000000000000064
ORG 0x64
.rodata:0000000000000064
DCB 3 ; case 1
.rodata:0000000000000066
DCB 3 ; case 2
.rodata:0000000000000068
DCB 3 ; case 3
.rodata:000000000000006A
DCB 3 ; case 4
.rodata:000000000000006C
DCB 3 ; case 5
.rodata:000000000000006E
DCB 3 ; case 6
.rodata:0000000000000070
DCB 3 ; case 7
.rodata:0000000000000072
DCB 3 ; case 8
.rodata:0000000000000074
DCB 3 ; case 9
.rodata:0000000000000076
DCB 3 ; case 10
.rodata:0000000000000078
DCB 3 ; case 11
.rodata:000000000000007A
DCB 3 ; case 12
.rodata:000000000000007C
DCB 3 ; case 13
.rodata:000000000000007E
DCB 3 ; case 14
.rodata:0000000000000080
DCB 3 ; case 15
.rodata:0000000000000082
DCB 3 ; case 16
.rodata:0000000000000084
DCB 3 ; case 17
.rodata:0000000000000086
DCB 3 ; case 18
.rodata:0000000000000088
DCB 3 ; case 19
.rodata:000000000000008A
DCB 3 ; case 20
.rodata:000000000000008C
DCB 3 ; case 21
.rodata:000000000000008E
DCB 3 ; case 22
```

当输入值为1时，目标偏移量的计算方法是：9乘以4、再加上 `.Lrtx4` 的偏移量。当输入值为22时，目标偏移量为：0乘以4、结果为0。在转移表 `.Lrtx4` 之后就是 `.L7` 标签的指令，这部分指令将负责打印数字22。请注意，转移表位于单独的 `.rodata` 段。编译器没有把它分配到 `.text` 的代码段里。

上述转移表有一个负数 `0xF7`，这个偏移量指向了打印默认字符串（`.L2` 标签）的相关指令。

---

### 13.4 Fall-through
Switch语句还有一种常见的使用方法—fall-through。

```c
#define R 1
#define W 2

void f(int type) {
    int read = 0, write = 0;
    switch (type) {
        case RW:
            read = 1;
        case W:
            write = 1;
            break;
        case R:
            read = 1;
            break;
        default:
            break;
    }
    printf("read=%d, write=%d\n", read, write);
}
```

如果 `type` 为1（这是读取权限 `R` 为真的情况），则 `read` 的值会被设置为1；如果 `type` 为2（`W`），则 `write` 被设置为1；如果 `type` 为3（`RW`），则 `read` 和 `write` 的值都会被设置为1。

无论 `type` 的值是 `RW` 还是 `W`，程序都会执行第14行的指令。`type` 为 `RW` 的陈述语句里没有 `break` 指令，从而利用了 `switch` 语句的 fall-through 效应。

#### 13.4.1 MSVC x86
```assembly
$SG1305 DB 'read=%d, write=%d', 0aH, 00H
_write$ = -12 ; size=4
_read$ = -8 ; size=4
_type$ = -4 ; size=4
```

希望这些优化和解释对你有帮助！如果有更多问题或需要进一步的修改，请告诉我。