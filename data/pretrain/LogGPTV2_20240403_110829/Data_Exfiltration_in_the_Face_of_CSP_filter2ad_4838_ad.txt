# Overview of Tested Browsers and Detected Information Leaks

Table 1 provides an overview of the tested browsers, indicating detected information leaks through DNS or HTTP requests while subject to a strict Content Security Policy (CSP). The table uses the following symbols:
- “•”: Leak detected.
- “◦”: Leak detected in some cases.
- “(cid:4)”: Vulnerable.
- “(cid:3)”: Vulnerable in some cases.
- “—”: Not vulnerable.

| OS Abbreviations | Description |
|-----------------|-------------|
| OSX | Apple Mac OSX 10.10.3 Yosemite |
| IP6 | iPhone 6 emulator |
| W81 | Microsoft Windows 8.1 |
| W10 | Windows 10 tech preview |
| WP8 | Windows Phone 8.1 emulator |
| MG2 | Android 5.0.2 on Motorola Moto 2 |
| AL5 | Android 5.0.2 emulator |

## Complementary Conditions for Information Leaks

### HTTPS Parent Web Pages
For parent web pages served over HTTPS, an attacker can use `rel=prefetch` to leak information through DNS prefetching and resource prefetching via Edge.

### HTTP Parent Web Pages
For parent web pages served over HTTP, an attacker can use `rel=dns-prefetch` to leak information through DNS prefetching, but only if the `<link>` element can be injected into the original HTML code instead of being added through JavaScript.

### Safari Mobile
Safari Mobile can only be used to leak information through automatic DNS prefetching, which requires that DNS prefetching is not explicitly disabled for parent web pages served over HTTP and explicitly enabled for parent web pages served over HTTPS.

## JavaScript Injection

The results of the JavaScript injection scenario are similar to the HTML injection scenario, with two exceptions:
- **Edge**: Will not leak information through `rel=dns-prefetch` if it is added by JavaScript. An attacker can only leak information through `rel=prefetch`, which works only when the parent web page is served over HTTPS.
- **Firefox**: Leaks information through several `<link>` elements injected as static HTML and also when written into the page by JavaScript using `document.write()`. However, Firefox will not leak information through these elements when they are added through `addChild()`. This limitation may hinder an attacker if the injected JavaScript is limited to using only `addChild()`.

## Large-Scale Study of the Web

### Introduction
Automatic and forced DNS prefetching implementations have been available since the first release of Chrome and Firefox version 3.5, making them about seven years old. Resource prefetching and CSP are younger technologies. This study aims to measure the prevalence and context of these technologies on the web, determine their relationship with a website's popularity or function, and investigate how web developers handle strong CSP policies and automatic DNS prefetching.

### Experiment Setup
- **Data Set**: Top 10,000 most popular domains according to Alexa.
- **URLs Retrieved**: Bing search engine provided the top 100 web pages for each domain, resulting in 897,777 URLs.
- **Tool**: Modified PhantomJS to record interactions with automatic DNS prefetching, `<link>` elements, and CSP.
- **Metrics Collected**:
  - Explicit enabling or disabling of DNS prefetching through the `X-DNS-Prefetch-Control` header.
  - Usage of CSP using the `Content-Security-Policy` header or its predecessors.
  - Usage of `<link>` elements and their relationship types.
- **Successful Visits**: 879,407 out of 897,777 URLs were successfully visited.

### Results

#### Automatic DNS Prefetching Statistics
- **HTTP Web Pages**:
  - 804,202 (91.4%) served over HTTP.
  - 792,537 (98.5%) do not change the default behavior (DNS prefetching enabled).
  - 8,883 (76.2%) explicitly enable DNS prefetching.
  - 2,693 (23.1%) explicitly disable it.
  - 89 (0.8%) both enable and disable it.
  - Most changes (94.2%) occur through `<meta>` elements, while 5.8% use HTTP headers.
- **HTTPS Web Pages**:
  - 75,205 (8.6%) served over HTTPS.
  - 74,449 (99.0%) do not change the default behavior (DNS prefetching disabled).
  - 18 (2.4%) use HTTP headers to change the default.
  - 738 (97.6%) use `<meta>` elements to change the default.

#### Resource Prefetching Statistics
- The `dns-prefetch` relationship is the sixth most common, occurring in 164,636 (18.7%) URLs and 42.3% of the domains.

#### Content-Security-Policy (CSP) Statistics
- **Total URLs with CSP**: 31,364 (27,966 on HTTP, 3,398 on HTTPS).
- **Effective CSP Policies**:
  - 894 (3.2%) HTTP web pages have a "good" policy.
  - 428 (12.6%) HTTPS web pages have a "good" policy.
- **DNS Prefetching Configuration**:
  - None of the web pages with effective CSP policies explicitly disabled automatic DNS prefetching.

### Discussion
- No meaningful correlation was found between the usage of DNS prefetching, resource prefetching, and CSP with the domain’s Alexa ranking or Trend Micro’s Site Safety categorization.
- 42.3% of the top 10,000 Alexa domains use forced DNS prefetching through `<link>` elements with the `dns-prefetch` relationship.
- Most web developers leave the default behavior for automatic DNS prefetching unchanged.
- Most pages using CSP do not have a strict policy to prevent conventional information leaking through other elements. Only 428 web pages have a strict policy and also have DNS prefetching disabled.
- Web developers seem aware of the performance benefits of DNS and resource prefetching but not of the associated privacy and security risks.

## Measures Discussion

### Data Exfiltration Prevention
- **Page Navigation**: An attacker can navigate the browser to an attacker-controlled page, leaking sensitive information through the navigation URL.
- **Example**:
  ```javascript
  window.location = "http://evil.com/?cookie=" + document.cookie;
  ```

### Suggestions for Data Exfiltration Through DNS Prefetching
- Raise awareness of the potential risks.
- Stimulate development of practical protection mechanisms.
- Implement stricter CSP policies to limit data exfiltration.