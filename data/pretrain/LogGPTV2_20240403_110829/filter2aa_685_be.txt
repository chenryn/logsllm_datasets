Template hygiene
As shown with the preceding declareVar template, templates can define variables
that are accessible after the template is instantiated, but this feature may not always be
desirable. There may be cases when you wish to declare a variable inside a template
without exposing it to the outside scope, a practice referred to as template hygiene.
 Consider the previous template example again:
template declareVar(varName: untyped, value: typed) =
var varName = value
declareVar(foo, 42)
echo(foo)
Calling the declareVar template declares a new variable because the varName variable
is injected into the calling scope. The injection occurs automatically because the name
of the variable is taken from the template’s arguments.
 Normally, variables aren’t injected into templates unless they’re marked explicitly
with the {.inject.} pragma. The following code shows a comparison of the different
cases where variables are injected and where they aren’t:
template hygiene(varName: untyped) =
var varName = 42
var notInjected = 128
var injected {.inject.} = notInjected + 2
hygiene(injectedImplicitly)
doAssert(injectedImplicitly == 42)
doAssert(injected == 130)
Attempting to access the notInjected variable outside the template will result in an
“Error: undeclared identifier: 'notInjected'” message. The other variables are accessi-
ble because they’re injected by the template into the calling scope.
 When writing templates, make sure that you document precisely the variables that
are injected by the template, and be careful that only those variables are exposed.
Keep in mind that, in general, injecting variables is considered bad style. The stan-
dard library only injects variables in rare cases, such as in the mapIt procedure or the
=~ operator defined in the re module.
 For reference, the following definitions are all hygienic by default:
type
var
let
const
Injected implicitly because 
its name is taken from the 
varName parameter
Only accessible in 
this template
Injected because of the {.inject.} 
pragma. Note how the notInjected 
variable can still be used.
Licensed to   
260
CHAPTER 9
Metaprogramming
 In contrast, the following definitions aren’t hygienic by default:
proc
iterator
converter
template
macro
method
The decision to make certain identifiers hygienic and others not was made to capture
the most common use cases without annotations.
 The next section explains macros, a component of Nim related to templates that’s a
lot more flexible and many times more powerful than templates. 
9.3
Macros
A macro in Nim is a special kind of procedure that’s executed at compile time and
that returns a Nim expression or statement. Macros are the ultimate way to read, gen-
erate, analyze, and modify Nim code.
 In the world of computer science, macros exist in many different forms. Templates
are indeed a form of macro, albeit a very simple form that mostly consists of simple
substitutions. Templates are said to be declarative, because in their body they show
what the code that should be produced looks like, instead of describing the steps
needed to produce that code.
 A Nim macro, on the other hand, is said to be procedural because it contains steps
that describe how the code should be produced. When macros are invoked, their
body is executed at compile time, which means a related feature of the Nim program-
ming language, compile-time function execution, is also relevant to the study of macros.
This feature allows procedures to be executed by the compiler during compilation,
and you’ll learn more about it in the next section.
 Macros operate on Nim code, but not in the same way that you operate on code.
You, as a programmer, are used to dealing with the textual representation of code.
You write, read, and modify code as text. But macros don’t work that way. They oper-
ate on a different representation known as an abstract syntax tree (AST). The abstract
syntax tree is a special tree structure that represents code; you’ll learn more about it in
section 9.3.2.
 Figure 9.4 shows the primary difference between templates and macros.
 We’ll go through each of these concepts to teach you the ins and outs of macros.
At the end, you’ll also get to use your new macro skills to write a simple configuration
library.
 First, to understand how macros work, you’ll need to learn about the concept of
compile-time function execution.
Licensed to   
261
Macros
9.3.1
Compile-time function execution
Compile-time function execution (CTFE) is a feature of Nim that allows procedures to be
executed at compile time. This is a powerful feature that’s relatively uncommon
among programming languages.
 CTFE was introduced briefly in chapter 2, where you were shown that the value of a
constant in Nim must be computable at compile time.
proc fillString(): string =
result = ""
echo("Generating string")
for i in 0 .. 4:
result.add($i)
const count = fillString()
When the preceding code is compiled, the message “Generating string” will be shown
among the compilation messages. This is because the fillString procedure is exe-
cuted at compile time.
 Compile-time execution has some limits, including the following:
 There’s no access to the foreign function interface (FFI), which means that
some modules or procedures can’t be used. For example, you can’t generate
random numbers at compile time unless you do so indirectly using staticExec.
Templates
Macros
x != y
not (x == y)
Create equality
comparison between
the x and y
identiﬁers.
Create a call to
the not keyword.
x != y
not (x == y)
infix(x, "==", y)
newCall("not", infix(...))
Templates substitute
values into new
expressions or
statements.
Macros generate
new code
procedurally.
Figure 9.4
Templates are declarative, 
whereas macros are procedural.
Licensed to   
262
CHAPTER 9
Metaprogramming
 Global variables that aren’t annotated with the {.compileTime.} pragma can’t
be accessed at compile time.
Despite these limitations, Nim includes workarounds to permit common operations
like reading files and executing external processes at compile time. These operations
can be performed using the staticRead and staticExec procedures, respectively.
 Because macros are used to generate, analyze, and modify code, they must also be
executed at compile time. This means that the same limits apply to them as well. 
9.3.2
Abstract syntax trees
An AST is a data structure that represents source code.
Many compilers use it internally after the source code is
initially parsed. Some, like the Nim compiler, expose it to
the user.
 The AST is a tree with each node representing a single
construct in the code. Let’s look at an example. Consider
a simple arithmetic expression such as 5 * (5 + 10). The
simplest AST for this might look something like the one
shown in figure 9.5.
 I’ll refer to this AST as the Simple AST for the rest of
this chapter. Let’s look at how the Simple AST can be rep-
resented as a Nim data type. The following listing shows
the definition for a Node type that’s then used to model
the Simple AST shown in figure 9.5.
type
NodeKind = enum
Literal, Operator
Node = ref object
case kind: NodeKind
of Literal:
value: int
of Operator:
left, right: Node
operator: char
proc newLiteralNode(value: int): Node =
result = Node(
kind: Literal,
value: value
)
var root = Node(
kind: Operator,
operator: '*',
Listing 9.1
Modeling the Simple AST shown in figure 9.5
In the Simple AST, there are only two node 
kinds: literals, which include any number, 
and operators, which specify the type of 
arithmetic operation to perform.
When the node is a literal, an int 
can be stored in its value field.
Each operator node may have up to 
two child nodes. This recursive 
definition allows a tree to be formed.
When the node is an operator, a char 
can be stored in its operator field.
A convenience proc to 
create a new literal node
The “root” variable holds a 
reference to the root node 
in the AST.
+
5
10
5
*
Figure 9.5
A simple AST for 
5 * (5 + 10)
Licensed to   
263
Macros
left: newLiteralNode(5),
right: Node(
kind: Operator,
operator: '+',
left: newLiteralNode(5),
right: newLiteralNode(10),
)
)
The root node holds the full representation of
5 * (5 + 10) in the form of an AST. Figure 9.6
shows how the Simple AST diagram maps to
the Node data structure defined in listing 9.1.
 You could write a procedure to convert any
Node instance into its textual representation,
or to display it as a tree using an indentation-
based format as follows.
Operator '*'
Literal 5
Operator '+'
Literal 5
Literal 10
Nim’s AST isn’t as simple as this because it models a language that’s far more complex
than simple arithmetic expressions. However, the arithmetic expression modeled by
the Simple AST is valid Nim code, so we can compare Nim’s AST to it. The dumpTree
macro defined in the macros module takes a block of code as input and outputs the
code block’s AST in the same indentation-based format as shown in listing 9.2.
 To display the AST of 5 * (5 + 10) in Nim, compile the following code:
import macros
dumpTree:
5 * (5 + 10)
Among the messages from the compiler, you should see the following.
StmtList
Infix
Ident !"*"
IntLit 5
Par
Infix
Ident !"+"
IntLit 5
IntLit 10
Listing 9.2
A simplified AST for 5 * (5 + 10) displayed using an indentation-based format
Listing 9.3
The Nim AST for 5 * (5 + 10) displayed using an indentation-based format
left
right
+
5
10
5
left
right
*
root
Literal
Operator
Operator
Literal
Literal
Figure 9.6
An annotated version of 
figure 9.5 showing how it maps onto root 
in listing 9.1
Licensed to   
264
CHAPTER 9
Metaprogramming
You’ll note that the Nim AST differs from the Simple AST of the arithmetic expression
in two important ways:
 It includes many more node kinds, such as StmtList, Infix, and Ident.
 The AST is no longer a binary tree: some nodes contain more than two
children.
The structure is the same, but this AST contains more information about the expres-
sion. For example, it indicates that infix notation was used to invoke the * and + oper-
ators, and that a part of the expression is enclosed in parentheses.
 The AST can represent any valid Nim code, so there are many node kinds. To get a
feel for the different node kinds, try displaying the AST of some common constructs,
such as procedures, for loops, procedure calls, variable declarations, and anything
else you can think of.
 The Nim AST is described in the documentation for the macros module
(http://nim-lang.org/docs/macros.html). The documentation includes the defini-
tion of a NimNode type that’s very similar to the Node type defined in listing 9.1. The
macros module also contains many procedures that can be used for building, modify-
ing, and reading the AST.
 Before moving on, let’s look at some of these node kinds. Table 9.1 describes each
of the node kinds in the Nim AST that you’ve seen so far.
Let’s try to build the Nim AST of 5 * (5 + 10) in a way that’s similar to the definition of
root in listing 9.1, using the procedures defined in the macros module. The following
listing shows the code needed to create this AST.
Table 9.1
Various Nim node kinds and what they mean
Node kind
Description
Children
StmtList
A list of statements.
Arbitrary number of other Nim 
nodes that represent a statement.
Infix
An infix expression, such as 5 * 5.
Infix operator, the infix operator’s 
two arguments.
Ident
An identifier, such as the name of a 
procedure or variable. The node’s 
ident field contains the identifier.
Cannot contain children.
Par
Parentheses
The code inside the parentheses.
IntLit
An integer literal. The node’s 
intVal field contains the integer 
value.
Cannot contain children.
Licensed to   
265
Macros
import macros
static:
var root = newStmtList(
infix(
newIntLitNode(5),
"*",
newPar(
infix(
newIntLitNode(5),
"+",
newIntLitNode(10)
)
)
)
)
echo(root.repr)
Compile listing 9.4, and you’ll see that the output is 5 * (5 + 10). You’ve successfully
constructed your first Nim AST!
9.3.3
Macro definition
So far, you’ve learned what an AST is, including how it can be constructed and the different
ways of displaying it during compilation. But you’re still missing an important piece of
knowledge: how to add the Nim code that the AST represents into the final executable.
 A macro is used for precisely that purpose. In the previous section, you constructed
a simple arithmetic expression that produces a numeric value. Let’s write a macro that
emits this expression’s AST so its result can be calculated.
import macros
macro calculate(): int =
result = newStmtList(
infix(
newIntLitNode(5),
"*",
newPar(
infix(
newIntLitNode(5),
"+",
newIntLitNode(10)
)
)
)
)
echo(calculate())
Listing 9.4
Creating the Nim AST of 5 * (5 + 10)
Listing 9.5
A macro that emits 5 * (5 + 10)
The macros module defines all 
the necessary procedures for 
constructing the AST.
The static keyword runs its body at 
compile time. It’s used because the 
AST procedures are only available at 
compile time.
The repr call converts the root 
node to a textual representation 
of the Nim code.
Imports the macros module, which 
is necessary for AST creation
Defines a new macro 
called “calculate”
Creates a new StmtList node with children. 
The resulting node produces “5 * (5 + 10).”
Creates a new Infix node as a child of the 
StmtList node. The resulting node 
produces “5 * (5 + 10).”
Creates a new IntLit node as a child of the 
Infix node. The resulting node produces “5.”
Specifies
the infix
operator
to call
Creates a new Par node as a child of the Infix 
node. The resulting node produces “(5 + 10).”
Creates a new Infix node as a child of the Par 
node. The resulting node produces “5 + 10.”
Licensed to   
266
CHAPTER 9
Metaprogramming
There are two important things to note about listing 9.5:
 Macros can be invoked in the same way as procedures and templates.
 The AST tree structure constructed in the body of the macro is very similar to
the Nim AST shown in listing 9.3.
The calculate macro currently generates only a single expression, so the StmtList
node can be safely removed from the calculate macro. Once you remove it, the
macro will generate functionally equivalent code with no extraneous AST nodes.
 That was a very simple macro, designed to show you how macros use the AST to
emit Nim code. The equivalent template is much simpler and achieves the same
thing:
template calculate(): int = 5 * (5 + 10)
echo(calculate())
The calculate macro produces a static AST, but the true power of macros is their abil-
ity to produce ASTs dynamically. The next section will show you how to best make use
of this power. 
9.3.4
Arguments in macros