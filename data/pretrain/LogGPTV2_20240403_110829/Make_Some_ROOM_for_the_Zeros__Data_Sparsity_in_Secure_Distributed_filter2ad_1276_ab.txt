input the sparsity occurs. There are many scenarios where the
sparsity metric can be revealed safely without compromising pri-
vacy guarantees: that value might already be public (as with the
GWAS example above), or a reasonable upper bound can be set in
advance. The main challenge is hiding the locations of the non-zero
values in the data, which are revealed in the plaintext algorithms
for the above sparse data structures. Revealing those indices can
leak private information. For example, in the common bag-of-words
representation for text data, words in the input vocabulary corre-
spond to columns of a sparse matrix. Revealing the columns where
a particular row is non-zero would reveal the words contained in
the training document corresponding to that row.
In the remainder of this section, we concretely state our privacy
requirements and threat model, and introduce necessary notation
and preliminaries.
Threat model. We consider a two-party computation setting with
semi-honest parties, and the security of our protocols holds in the
common simulation-based paradigm for secure computation [15].
Our computations are over matrices and vectors over a finite
domain. In all cases we assume that the sparsity metric of the input
set is public. For different protocols this metric will be either the
total number of zeros, or the total number of zero rows or columns.
In settings where we apply our protocols to collections of rows of a
dataset, i.e. batches, the sparsity metric is revealed about the batch.
In the context of our applications, the real-world interpretation of
the sparsity metric is straightforward. For example, in our logistic
regression application, the sparsity metric corresponds to revealing
an upper bound on the number of different words in each batch of
128 documents.
The preprocessing model for MPC. Some secure computation pro-
tocols adopt the online-offline paradigm, which splits the compu-
tation work into an offline stage that can be executed before the
inputs are available, and an online stage that depends on the con-
crete input values. We do not optimize our constructions for the
3
online-offline setting but rather focus on minimizing the total cost
of the protocol.
Related work: Custom MPC Protocols for Sparse Data. Exploiting
sparsity for efficiency has been explored before in some concrete
privacy preserving applications. The work of Nikolaenko et al. [31]
develops a protocol for privacy preserving collaborative filtering,
a typical application on the Netflix dataset described above. By
disclosing a bound on the number of movies rated by a user and
exploiting sorting networks, the proposed solution significantly
improves on the naive approach that considers all user-movie pairs.
GraphSC [30] is a framework for secure computation that sup-
ports graph parallelization models. The design crucially relies on
oblivious sorting, as it enables efficiently running computations
expressed as sparse graphs while hiding communication patterns
across processors. Another application of oblivious sorting to MPC
on sparse graphs is given by Laud [24], albeit in a different threat
model (three parties with honest majority).
Finally, as mentioned in Section 1.1, Schoppmann et al. [35]
propose a protocol for 𝑘-nearest neighbors classification that relies
on sparse matrix multiplication.
All of these works rely on oblivious sorting networks [20] and
task-specific optimizations. Our ROOM primitive (Section 4) ab-
stracts away from the concrete application by providing a generic
interface for secure sparse lookups. In the case of 𝑘-NN [35], we
show that this directly translates to a significant improvement in
the online running time.
3 TOOLS AND NOTATION
Vectors and Matrices. We denote matrices using capital letters
such as M, and vectors by letters u, v, r. Matrices and vectors are
indexed as M𝑖,𝑗 and u𝑖, and by M[𝑖..𝑗] we mean the sub-matrix of
M containing rows in the interval [𝑖..𝑗]. Our matrices and vectors
will take values in a finite domain, which we simply denote as Z2𝜎 ,
to emphasize that 𝜎 bits are needed to encode an element of the
domain.
Secret Sharing. We denote a shared value 𝑥 by [[𝑥]]. As all our
protocols involve two-party computations between parties P1 and
P2, [[𝑥]] can be seen as a pair ([[𝑥]]P1, [[𝑥]]P2) from which each
party has the corresponding entry. Our focus will be on arithmetic
secret sharing, where [[𝑥]]P1 and [[𝑥]]P2 are values in Z2𝜎 , and 𝑥 is
recovered as [[𝑥]]P1 + [[𝑥]]P2. Secret shares are extended to vectors
and matrices by sharing each of their entries, and we denote shared
matrices and vectors as [[M]] and [[u]].
Garbled Circuits. Sometimes in our protocols we state that the
parties engage in a secure computation. By this we mean that they
run a generic protocol for the specified functionality. In all such
cases we rely on a garbled circuit protocol [25, 38]. Some of our
protocols rely on secure evaluations of a pseudorandom function,
which we denote as F𝐾 (𝑥), for key 𝐾 and input 𝑥.
4 BASIC PRIMITIVE: ROOM
We define Read-Only Oblivious Maps (ROOMs) as a 2-party func-
tionality between a server and a client. For fixed finite sets K and
V – which we call the domain of keys and values, respectively – the
server holds a list of key-value pairs d = ((𝑥1, 𝑣𝑥1), . . . , (𝑥𝑛, 𝑣𝑥𝑛)),
Parties: Server, Client.
Inputs:
Server: key-value pairs d ∈ (K × V)𝑛, 𝛽 ∈ V𝑚.
Client: Query q ∈ K𝑚.
Outputs (shared): [[r]] such that r ∈ V𝑚 and ∀𝑗 ∈ [𝑚]:
(cid:26) 𝑣q𝑗
𝛽 𝑗
r𝑗 =
if (q𝑗, 𝑣q𝑗) ∈ d
otherwise.
Figure 2: Functionality of Shared Output ROOM.
with unique keys 𝑥𝑖 ∈ K and values 𝑣𝑥𝑖 ∈ V, and the client holds
a query (𝑞1, . . . , 𝑞𝑚), with 𝑞 𝑗 ∈ K.
The output of a ROOM is an array (𝑟1, . . . , 𝑟𝑚), where for each 𝑞 𝑗,
if 𝑞 𝑗 is a key in d then 𝑟 𝑗 is equal to the corresponding value, namely
𝑟 𝑗 = 𝑣𝑞 𝑗 . Otherwise 𝑟 𝑗 gets a default value 𝛽 𝑗 ∈ V chosen by the
server (and which might be different for each index 𝑗). This mirrors
common implementations of a map data structure: for example, in
Python d.get(k, val) returns the value associated with the key
k in dictionary d if k is found, and a default value val otherwise.
In Java, d.getOrDefault(k, val) does the same thing.
Figure 2 formalizes this functionality. Note that, as the output
is secret-shared among the two parties, the question of whether
the indexes in the client can be chosen adaptively by the client is
not relevant. In some cases, when we want a single party to obtain
the output, we write designated output ROOM. This variant can be
trivially implemented by having one party send their shares to the
other, or – as all our concrete implementations have a generic MPC
phase at the end – omitting the secret-sharing step.
4.1 Existing primitives
Before introducing our instantiations of ROOM, we overview what
differentiates our ROOM functionality from existing primitives.
ROOM is related to Private Set Intersection (PSI) (see [33] and
references therein). However, the ROOM functionality requires
selecting data items based on key comparison and thus not every
PSI protocol will directly imply ROOM. In addition, PSI protocols
leak the size of the intersection to the client, while it is crucial that
a ROOM protocol does not reveal how many indexes in the query
were found in the database. Still, extending recent developments on
labeled PSI [7] and PSI with shared output [9] to the ROOM setting
seems to be a promising approach for future improvements.
ROOM can also be constructed using Oblivious RAM [16]. How-
ever, ROOM does not need support for writes, and thus the resulting
solution will have much overhead that can be avoided.
Private Information Retrieval (PIR), in its symmetric variant [14],
is another primitive relevant to ROOM. The Keyword PIR variant [8]
considers the setting of a database that may not contain items at
all indices, which is required for ROOM. Finally, while batching
techniques that allow the execution of multiple queries have been
developed for PIR [1], they do not directly apply to the keyword
variant and also do not always have good concrete efficiency. Thus,
from a PIR perspective, our ROOM techniques could be interpreted
Let d ∈ (K × V)𝑛, 𝛽 ∈ V𝑚, q ∈ K𝑚, and K be a PRF key.
Inputs:
Server: d, 𝛽, K.
Client: q.
Output (shared): [[r]] ∈ V𝑚
ROOM Protocol:
(1) For 𝑖 ∈ K, Server encrypts c𝑖 ← (𝑣𝑖 ⊕ FK(𝑖)), where
(cid:26) 𝑣𝑎𝑙
⊥
𝑣𝑖 =
if (𝑖, 𝑣𝑎𝑙) ∈ d
otherwise.
Server sends (c𝑖)𝑖∈K to Client.
(2) For each 𝑖 ∈ [𝑚], the parties run a secure two-party
computation where Client inputs 𝑐q𝑖 and q𝑖 and Server
inputs K and 𝛽𝑖. The secure computation decrypts cq𝑖 as
𝑣 = cq𝑖 ⊕ FK(q𝑖), and reveals shares [[r]] to Client and
Server where
(cid:26) 𝑣,
𝛽𝑖,
r𝑖 =
if 𝑣 ≠⊥,
otherwise
Figure 3: Basic-ROOM Protocol.
as improvements on batched symmetric keyword PIR with shared
output.
4.2 Instantiations of ROOM
This section presents three instantiations of the ROOM functional-
ity (Figure 2). As described in Section 4, they can be easily trans-
formed into the designated output variant. The first two construc-
tions are based on generic MPC techniques, while the third in-
stantiation also leverages techniques for oblivious selection using
polynomial interpolation.
A naive approach for constructing a ROOM protocol requires 𝑚𝑛
comparisons since each of the client’s queries may be present in the
server’s database. Our ROOM instantiations reduce this many-to-
many comparison problem to one-to-one comparisons. The asymp-
totic behavior of our proposed instantiations of ROOM is presented
in Table 1. The online cost distinguishes between local computation
and generic MPC computation because the latter has a significantly
higher overhead in practice, and hence this distinction is essential
for the asymptotics to reflect concrete efficiency.
4.2.1 Basic-ROOM. Our Basic-ROOM protocol, presented in Fig-
ure 3, is a baseline construction that does not exploit sparsity in
the database d, and instead expands the whole domain of keys K.
Namely, the server computes and sends an encrypted answer for
each potential query in K. However, as shown in Table 1, the linear
dependency on |K| is limited to the local computation performed
by the parties during initialization, whereas the more costly online
MPC computation only depends on the length of the ROOM query.
Lemma 4.1. The protocol in Figure 3 is a secure instantiation for the
ROOM functionality with the following overhead: The initialization
includes 𝑂(|K|) work for the server, and 𝑂(|K|) communication to
4
Data Structure
MPC Runtime
Initialization
Answer a query of length 𝑚
MPC Runtime
Local Runtime
Local Runtime
𝑂(|K|) (server)
-
Comm.
𝑂(|K|)
-
𝑂(𝑛)
-
-
-
Basic-ROOM
Circuit-ROOM
Poly-ROOM
Table 1: Cost of initializations and execution of our instantiations of ROOM, for a database d ∈ (K × V)𝑛 held by the server,
and a query q of length 𝑚. Initialization is defined as preprocessing independent from the query q. We assume the security
parameter is constant, and we also do not show factors log(K) and log(V). The order of the communication for the online
phase (answer length 𝑚 query) is the same as the MPC Runtime for that phase in all cases.
𝑂((𝑛 + 𝑚) log(𝑛 + 𝑚)) 𝑂(𝑛 log(𝑛)) (server) and 𝑂(𝑚 log(𝑚)) (client)
𝑂(𝑚) (server and client)
𝑂((𝑚 + 𝑛) log2(𝑛)) (client)
𝑂(𝑛 log2(𝑛)) (server)
𝑂(𝑚)
𝑂(𝑚)
send the encrypted database to the client. The online phase has an
𝑂(𝑚) overhead for the MPC protocol.
Security Sketch. The security of the PRF implies that the client
does not learn anything about database items due to the initializa-
tion. The secure computation in the next step guarantees that both
parties learn only shares of the result.
4.2.2 Circuit-ROOM. Our second protocol for ROOM uses secure
computation and leverages the following observation. We can com-
pute the ROOM functionality by doing a join between the server’s
data and the query on their key attribute and then computing a
sharing of the vector of the corresponding data items from the
server’s input. A common algorithm for performing equality joins
in databases is the sort-merge join [40], where elements of each
relation are first sorted individually by the join attribute. Subse-
quently, the two sorted lists are merged (as in merge sort), yielding a
combined list where elements from both tables with equal keys are
adjacent. This combined list only needs to be scanned once in order
to retrieve all elements of the joined table. In the ROOM setting,
note that only the last two steps, merge and iteration, depend on
data from both parties, as sorting can be performed locally. This
makes this algorithm particularly useful for MPC, since merging of
𝑛 elements can be performed using a circuit of size 𝑂(𝑛 log 𝑛) [2],
and the circuit for comparing adjacent pairs is linear. A similar