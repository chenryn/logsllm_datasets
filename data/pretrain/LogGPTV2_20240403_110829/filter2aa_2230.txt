# Advanced Format String Attacks
## Presented by Paul Haas

### Contents
- Background
- Abstract
- Definition
- Context
- Technique
- How-to
- Tools
- Exploits
- Conclusion
- Q&A

### Background
- **Professional Experience**: Lead Web Application Security Engineer at Redspin, Inc., with over four years of experience in conducting hundreds of audits.
- **Disclaimer**: This talk is not associated with my company.
- **Achievements**:
  - Defcon 13 CTF winner (Shellphish 2005)
  - Alumni of UCSB’s Computer Security Group
  - Mario Kart DS: Rob in Tank on Rainbow Road

### Abstract
- **Format String Attack**: A software vulnerability in certain C functions that perform string formatting, leading to the potential to write arbitrary data to arbitrary locations.
- **Current State**: Despite easy solutions, vulnerabilities and ignorance of the issue still exist, making this talk relevant.
- **Audience Assumption**: Basic understanding of format string attacks (e.g., `%x`, `%s`, `%n`).

### Brief History
- **1990**: csh “Interaction Effect” crash: `!o%8f`
- **1999-09-17**: proftpd 1.2.0pre6 “Argument attack/snprintf Vulnerability” (BID 650)
- **2000-06-22**: wu-ftpd 2.6.0 Remote Format String Stack Overwrite Vulnerability (BID 1387)
- **2000-09-09**: “Format String Attacks” whitepaper by Tim Newsham
- **2010-06-30**: KVIrc DCC Directory Traversal and Multiple Format String Vulnerabilities (BID 40746)

### Old Technique
- **Manual Stack Manipulation**: Using a string of `%x` to pop up the stack.
- **Address Overwrite**: Using other techniques to get the overwrite address.
- **Core Dump Analysis**: Searching for shellcode in the core dump after a SEGFAULT.
- **Character Writing**: Using long values in `%x` or `%c`.
- **Final Write**: Using `%n` to write to the address.
- **RTFM**: Frequent reference to the manual.
- **Write Once, Use Once**: Limited reusability.

### Current Technique
- **Stack Information**: `%p` provides detailed information about stack locations.
- **String View**: `%s` allows viewing known stack addresses as strings.
- **Byte Control**: `%NNc` controls the number of bytes written.
- **Single Byte Writes**: `%hhn` allows single-byte writes.
- **Direct Parameter Access**: Shortens the format string, e.g., `%5$n = %p%p%p%p%p%n`.

### New Technique
- **Stack Dumping**: Format String Attacks allow dumping the stack.
- **Interesting Information**: The stack contains data, code pointers, stack addresses, the format string, and its address.
- **Exploit Development**: Knowledge of these values is sufficient to write an exploit.

### Our Vulnerable Code
```c
#include <stdio.h>
int main(int argc, char **argv) {
    printf(argv[1]);
}
```
- **Compilation and Setup**:
  ```sh
  gcc printf.c -w -O0 -ggdb -std=c99 -static -D_FORTIFY_SOURCE=0 -fno-pie -Wno-format -Wno-format-security -fno-stack-protector -z norelro -z execstack -o printf
  sudo sysctl -w kernel.randomize_va_space=0
  ```

### Exploit Steps
1. **Dump Stack Values**: Until the format string is found.
2. **Locate Pointer Address**: Find the pointer address of the format string.
3. **Choose Overwrite Address**: Select an address on the stack to overwrite.
4. **Point and Write**: Point the format string at the overwrite address and write the address of the shellcode.
5. **Adjust Offsets**: Solve the "chicken and egg" problem by adjusting offsets based on the format string length.

### Stack Dump
- **Method 1**: Pass a long string of `%p`s.
  ```sh
  ./printf `perl -E 'say "%p"x200'`
  ```
- **Method 2**: Execute binary in a loop with `%NNN$p`.
  ```sh
  for i in {001..200}; do echo -n "$i = "; ./printf "%$i\$p"; echo; done
  ```
- **Search for Hex Representation**: Look for the hex representation of the string.
  - `$` = 0x24, `%` = 0x25, `p` = 0x70
- **Result**: The stack offset of the format string.

### Format String Address
- **Sequential Execution**: Execute binary in a loop with sequential `%NNN$s`.
  ```sh
  for i in {001..100}; do echo -n "$i = "; ./printf "%$i\$p:%$i\$s"; echo; done | grep -v ^$
  ```
- **Create Format String**: Comprise the format string only with addresses obtained from the stack dump.
  - Single execution/string prevents SEGFAULT.
  - Verifies a constant stack.

### Offset + Address = WIN
- **Example**:
  - **Offset 100 (0xBFFFF100)**: Our format string.
  - **Size Calculation**: `sizeof(pointer) = 4 bytes * 100 pointers = 400`.
  - **Offset 1**: `0xBFFFF100 + 400 = 0xBFFFF290`.

### Overwrite Location
- **Common Exploit Locations**: Require binary examination tools like PLT, DTORS, LIBC.
- **Advanced Attack**: Can extract these from known binary headers (difficult).
- **Return Addresses**: Stored on the stack, and we know the stack address of each value.
- **Overwrite**: These locations to point to shellcode.

### Issues
- **Variable Format String Lengths**: Affect stack addresses, assuming a constant stack.
  - Keep all strings to the same modulus of `sizeof(pointer)`.
- **Alignment**: Format string may not align with stack address.
  - Maintain padding requirements when addressing the string.
- **Offset Verification**: Verify the exploit by reading rather than writing to the overwrite location.

### Result
- **Feasibility**: It is possible to create a format string exploit using only two executions of the vulnerable program with no program exceptions.
- **Mathematical Approach**: No bruteforcing necessary.
- **Shellcode Integration**: Incorporate shellcode as part of the format string.
- **Small Format Strings**: Possible with as little as 68 bytes + shellcode.

### Format String Auto Exploitation
- **Proof of Concept Tool**: Written in Python.
- **Instructions**: For running on Backtrack 4.
- **Features**:
  - Multiple exploit and overwrite options.
  - Missing some useful features:
    - Separate execution of independent steps.
    - Architecture independence (x86 & 64).
    - Read arbitrary locations rather than write.
    - Finer control over the exploit.

### Metasploit Integration
- **Control and Automation**: Control each step of the exploit individually or automate the entire process.
- **Payload Generator**: Uses Metasploit payload library for shellcode.
- **Integration**: Integrates into other modules and injection functionality.
- **Demonstration**: Functionality will be demonstrated during Defcon.

### Demonstrations
- **Testing Code**
- **OverTheWire**
- **Known Exploit**
- **Potential 0-Day**

### Summary
- **Output**: Format string attacks provide all necessary information to go from discovery to compromise.
- **Automation**: The exploitation process can be automated from start to finish.
- **Fix and Exploit**: Format string attacks are easy to fix but also easy to exploit.
- **Vulnerable Programs**: Many vulnerable programs are available for discovery and exploitation.

### Questions?
- **Contact**: For follow-up questions, contact `phaas AT redspin DOT com`.
- **Resources**: The most recent version of this presentation and associated tools can be found on [www.redspin.com](http://www.redspin.com) and [www.defcon.org](http://www.defcon.org).
- **Future Work**: Look for the incorporation of these tools in Metasploit in the near future.
- **Acknowledgments**: Shouts to the Shellphish, G. Vigna "zanardi," and the Goats at Redspin {ap3r, jhaddix, fulg0re, D3, OwNpile, Yimmy & b3tty}.

Thank you!