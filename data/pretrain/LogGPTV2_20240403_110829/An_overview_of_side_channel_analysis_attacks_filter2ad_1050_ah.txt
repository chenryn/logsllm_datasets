### Impossible to Add Dedicated Permissions for Every Exploited Information

**Keyboard Layout Randomization:**
To prevent sensor-based keylogging attacks that exploit the correlation between user input and device movements observed via sensor readings, the keyboard layout of soft keyboards can be randomized [117]. For example, the Android-based CyanogenMod OS allows this feature to be enabled optionally for PIN inputs. However, it remains an open question how this would affect usability with QWERTY keyboards, as it might make keyboard input nearly impossible.

### Limiting Access or Sampling Frequency

It has also been suggested to disable access to sensor readings during sensitive input or to reduce the sampling frequency of sensors. This approach, however, would hinder applications that heavily rely on sensor readings, such as pedometers.

### Preventing Side-Channel Attacks with AuDroid

Side-channel attacks like Soundcomber might be prevented by AuDroid [157], an extension to the SELinux reference monitor integrated into Android to control access to system audio resources. The authors point out that there is no security mechanism in place for the host OS to control access to mobile device speakers, allowing untrusted apps to exploit this communication channel. AuDroid enforces security policies that prevent data in system apps and services from being leaked to (or used by) untrusted parties.

### Noise Injection

Randomly starting the phone vibrator has been suggested by Owusu et al. [117] to prevent sensor-based keyloggers that exploit the accelerometer sensor. However, Shrestha et al. [158] showed that random vibrations do not provide protection. As an alternative, Shrestha et al. proposed a tool named Slogger that introduces noise into sensor readings when the soft keyboard is running. Slogger relies on a tool that needs to be started via the ADB shell to execute with ADB capabilities. It injects events into the files corresponding to the accelerometer and the gyroscope located in `/dev/input/`, which requires ADB privileges. The authors evaluated the effectiveness of Slogger against two sensor-based keyloggers and found that it significantly reduces their accuracy. Das et al. [131] also suggested adding noise to sensor readings to prevent device fingerprinting via hardware imperfections. Xiao et al. [46] proposed a more general approach targeting the injection of noise into the information provided via the `procfs`.

### Preventing Microarchitectural Attacks

The inherent nature of modern computer architectures enables sophisticated attacks due to shared resources and performance optimization techniques. A notable example is the memory hierarchy, which introduces significant performance gains but also enables microarchitectural attacks such as cache attacks. Although specific cryptographic implementations can be protected, e.g., bit-sliced implementations [159], [160], or dedicated hardware instructions for AES, generic countermeasures against cache attacks represent a non-trivial challenge. Further research is crucial, especially since cache attacks pose risks not only to cryptographic algorithms but also to other sensitive information such as keystrokes [23], [113].

### App Guardian

Most of the presented countermeasures aim to prevent specific attacks but cannot address broader categories, such as software-only attacks. App Guardian [16] represents a more general approach to defend against software-only attacks. It is a third-party application that runs in user mode and employs side-channel information to detect RIG attacks, including software-only side-channel attacks. The basic idea is to stop the malicious application while the principal (the app to be protected) is being executed and to resume the potentially malicious application later. Although App Guardian faces challenges, it is a novel idea for coping with such side-channel attacks. Specifically, it aims to handle all passive attacks that require the attacker to execute software on the targeted device.

App Guardian is a promising research project for mitigating side-channel attacks on smartphones at a larger scale. However, it still struggles with the proper identification of applications to be protected. Additionally, App Guardian relies on side-channel information that has been removed in Android 7, necessitating updates to work on recent Android versions. Its effectiveness should be further evaluated against existing side-channel attacks. Extending its framework to cope with side-channel attacks conducted from within the browser, i.e., via JavaScript, could also be beneficial.

### Summary

Local attacks target a few devices or users, requiring a broad range of countermeasures due to their diverse methodologies. For instance, we must deal with attackers measuring power consumption to break cryptographic implementations, fault attacks like clock/power glitching and temperature variations, and smudges left on touchscreens. In contrast, remote attacks require software execution on the targeted device, affecting a much broader scale. More generic countermeasures, such as App Guardian, seem to be the most promising approach for these attacks.

### Issues, Challenges, and Future Research

This section discusses open issues and challenges that need to be addressed in future research. The ultimate goal is to spur further research in the context of side-channel attacks and countermeasures, paving the way for a more secure computing platform for smart and mobile devices.

**Countermeasures:**
Side-channel attacks are published at an unprecedented pace, and appropriate defense mechanisms are often either not available or difficult to deploy. The five key enablers identified in this paper enable devastating side-channel attacks that can be conducted remotely, targeting a large number of devices and users. While countermeasures are being researched, there is a cat-and-mouse game between attackers and system engineers. Even if effective countermeasures were available, the mobile ecosystem of Android hinders large-scale deployment. Multiple device manufacturers and carriers need to apply patches, making it challenging to deploy countermeasures, especially for outdated operating systems.

**Reproducibility and Responsible Disclosure:**
Publishing frameworks used to conduct side-channel attacks could foster research and improve the evaluation of countermeasures. However, responsible disclosure must be upheld, balancing the need for timely publication with the time required to implement countermeasures.

**Different Mobile Operating Systems and Cross-Platform Development:**
Research should not focus exclusively on one OS, such as Android. The applicability of side-channel attacks should be investigated across multiple platforms, as many attacks work on different platforms. This is because different platforms and devices aim to provide similar features and rely on similar security concepts. The trend towards cross-platform development increases the possibility of targeting multiple platforms simultaneously, especially with HTML5 apps and web APIs.

**Wearables:**
Wearables, such as smartwatches, must be considered in future research. Smartwatches have been used to attack user input on POS terminals and hardware QWERTY keyboards [161]–[164]. They can also infer input on smartphones [165], [166] and text written on whiteboards [167]. With the increasing number of connected devices, the threat of side-channel attacks grows, and combining data from multiple devices can increase attack accuracy.

**Internet of Things (IoT):**
The IoT is another rapidly growing area. As all devices in the IoT network are interconnected and accessible via the Internet, attackers may exploit side-channel leaks to target various IoT appliances. An example is Zhang et al. [16], who demonstrated that a side-channel leak on an Android-based Wi-Fi camera could be exploited to infer whether the user is at home. This highlights the threat to smart home appliances and security systems.

**Combination of Multiple Information Leaks:**
To improve the accuracy of existing attacks or create more sophisticated scenarios, multiple side-channel leaks can be combined. For example, cache attacks and sensor-based keyloggers [113] can be used together to enhance keylogging. Cache attacks determine the exact time a key is entered, while sensor-based keyloggers infer the actual key. Website fingerprinting attacks combined with sensor-based keyloggers [26] can steal login credentials for specific websites.

**Code Analysis Tools:**
The easy installation of apps from app markets enables developers to distribute apps, but these apps need to be checked for malicious behavior and side channels. While app stores like Google Play check for malicious behavior, static and dynamic code analysis tools should also be employed to prevent apps prone to side-channel attacks from being distributed. Developing and applying such tools could help fix implementation flaws that lead to side-channel attacks.

### Conclusion

Understanding information leaks and possible exploitation techniques is essential to addressing the immense threat from side-channel attacks on mobile devices. We surveyed existing side-channel attacks and identified commonalities to systematically categorize them. Our classification system aims to provide a thorough understanding of information leaks and spur further research in side-channel attacks, countermeasures, and secure computing platforms.

### Acknowledgment

This research received funding from the European Union’s Horizon 2020 research and innovation program under grant agreement No 644052 (HECTOR), and the European Research Council under the Horizon 2020 research and innovation program (grant agreement No 681402). Veelasha Moonsamy was supported by the Technology Foundation STW (project 13499 - TYPHOON & ASPASIA) from the Dutch government. We thank Florian Mendel for discussions about active side-channel attacks and Cristofaro Mune and Nikita Abdullin for pointing out a missing attack category.