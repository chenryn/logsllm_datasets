impossible to add dedicated permissions for every exploited
information.
Keyboard Layout Randomization. In order to prevent
sensor-based keylogging attacks that exploit the correlation
between user
input and the device movements observed
via sensor readings, the keyboard layout of soft keyboards
could be randomized [117]. For instance, the Android-based
CyanogenMod OS allows to enable such a feature for PIN
inputs optionally. However, it remains an open question how
this would affect usability in case of QWERTY keyboards and,
intuitively, it might make keyboard input nearly impossible.
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
18
Limiting Access or Sampling Frequency. It has also been
suggested to disable access to sensor readings during sensitive
input or to reduce the sampling frequency of sensors. This,
however, would hinder applications that heavily rely on sensor
readings such as pedometers.
Side-channel attacks like Soundcomber might be prevented
by AuDroid [157], which is an extension to the SELinux
reference monitor that has been integrated into Android to
control access to system audio resources. As pointed out by the
authors, there is no security mechanism in place for the host
OS to control access to mobile device speakers, thus allowing
untrusted apps to exploit this communication channel. AuDroid
enforces security policies that prevent data in system apps and
services from being leaked to (or used by) untrusted parties.
Noise Injection. Randomly starting the phone vibrator has
been suggested by Owusu et al. [117] to prevent sensor-based
keyloggers that exploit the accelerometer sensor. However,
Shrestha et al. [158] showed that random vibrations do not
provide protection. As an alternative, Shrestha et al. proposed
a tool named Slogger that introduces noise into sensor readings
as soon as the soft keyboard is running. In order to do so,
Slogger relies on a tool that needs to be started via the ADB
shell (in order to be executed with ADB capabilities). Slogger
injects events into the ﬁles corresponding to the accelerometer
and the gyroscope located in /dev/input/, which is why
ADB privileges are required for this defense mechanism. The
authors even evaluated the effectiveness of Slogger against
two sensor-based keyloggers and found that the accuracy of
sensor-based keyloggers can be reduced signiﬁcantly. Das et
al. [131] also suggested to add noise to sensor readings in order
to prevent device ﬁngerprinting via hardware imperfections of
sensors. A more general approach that targets the injection of
noise into the information provided via the procfs has been
proposed by Xiao et al. [46].
Preventing Microarchitectural Attacks. The inherent na-
ture of modern computer architectures enables sophisticated
attacks due to shared resources and especially due to dedicated
performance optimization techniques. A famous and popular
example is the memory hierarchy that introduces signiﬁcant
performance gains but also enables microarchitectural attacks
such as cache attacks. Although speciﬁc cryptographic im-
plementations can be protected against such attacks, e.g., bit-
sliced implementations [159], [160] or dedicated hardware in-
structions can be used to protect AES implementations, generic
countermeasures against cache attacks represent a non-trivial
challenge. However, we consider it of utmost
importance
to spur further research in the context of countermeasures,
especially since cache attacks do not only pose a risk for cryp-
tographic algorithms, but also for other sensitive information
such as keystrokes [23], [113].
App Guardian. Most of the above presented countermea-
sures aim to prevent very speciﬁc attacks only, but cannot
be applied to prevent attacks within a speciﬁc category of
our classiﬁcation system, e.g., software-only attacks located
in the upper right of our new classiﬁcation system (cf. Fig-
ure 7). At least some of these attacks, however, have been
addressed by App Guardian [16], which represents a more
general approach to defend against software-only attacks. App
Guardian is a third-party application that runs in user mode
and employs side-channel information to detect RIG attacks
(including software-only side-channel attacks). The basic idea
of App Guardian is to stop the malicious application while
the principal (the app to be protected) is being executed and
to resume the (potentially malicious) application later on.
Although App Guardian still faces challenges, it is a novel
idea to cope with such side-channel attacks in general. More
speciﬁcally, it tries to cope with all passive attacks that require
the attacker to execute software on the targeted device.
App Guardian seems to be a promising research project
to cope with side-channel attacks on smartphones at a larger
scale. However, an unsolved issue of App Guardian is the
problem that it still struggles with the proper identiﬁcation
of applications to be protected. Furthermore, App Guardian
relies on side-channel information—to detect ongoing side-
channel attacks—that has been removed in Android 7. Hence,
App Guardian needs to be updated in order to also work on
recent Android versions and its effectiveness should be further
evaluated against existing side-channel attacks. Furthermore,
it might be interesting to extend its current framework to cope
with side-channel attacks conducted from within the browser,
i.e., to mitigate side-channel attacks via JavaScript.
D. Summary
Although local attacks target only a few devices or users, we
also observe that we require a much broader range of coun-
termeasures because also the attack methodologies of local
attacks are much broader. For instance, we have to deal with
attackers that measure the power consumption of the device
in order to break cryptographic implementations, we have
to deal with fault attacks such as clock/power glitching and
temperature variations, and at the same time we have to deal
with attackers that exploit smudges left on the touchscreen.
In contrast, the commonality of all remote attacks is that
they require software execution on the targeted device. Al-
though this means that remote attacks target devices and users
at a much broader scale, more generic countermeasures such
as App Guardian seem to be the most promising approach to
cope with these attacks in the future.
IX. ISSUES, CHALLENGES, AND FUTURE RESEARCH
In this section we discuss open issues and challenges that
need to be addressed in future research. Hence, this section is
not meant to provide solutions to existing problems. Instead,
with the presented classiﬁcation system for modern side-
channel attacks we aim to shed light onto this vivid research
area and, thereby, to point out high-level research directions.
Overall, the ultimate goal is to spur further research in the
context of side-channel attacks and countermeasures and, as a
result, to pave the way for a more secure computing platform
for smart and mobile devices.
Countermeasures. Side-channel attacks are published at
an unprecedented pace and appropriate defense mechanisms
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
19
are often either not (yet) available or cannot be deployed
easily. Especially the ﬁve key enablers identiﬁed in this paper
enable devastating side-channel attacks that can be conducted
remotely and, thus, target an immense number of devices
and users at the same time. Although countermeasures are
being researched, we observe a cat and mouse game between
attackers and system engineers trying to make systems secure
from a side-channel perspective. Besides, even if effective
countermeasures were readily available, the mobile ecosystem
of Android would impede a large-scale deployment of many
of these defense mechanisms. The main problem is that even
in case Google would apply defense mechanisms and patch
these information leaks, multiple device manufacturers as
well as carriers also need to apply these patches to deploy
countermeasures in practice. Hence, chances are that such
countermeasures will never be deployed, especially not in case
of outdated operating systems. We hope to stimulate research
to come up with viable countermeasures in order to prevent
such attacks at a larger scale, i.e., by considering larger areas
within the new categorization system, while also considering
the challenges faced by the mobile ecosystem. For instance,
App Guardian [16] follows the right direction by trying to
cope with attacks at a larger scale, while at the same time it
can be deployed as a third-party application.
Reproducibility and Responsible Disclosure. In order to
foster research in the context of countermeasures, it would
be helpful to publish the corresponding frameworks used to
conduct side-channel attacks. While this might also address
the long-standing problem of reproducibility of experiments
in computer science in general, this would enable a more
efﬁcient evaluation of developed countermeasures. At the same
time, however, responsible disclosure must be upheld, which
sometimes turns out to be a difﬁcult balancing act. On the
one hand, researchers want to publish their ﬁndings as soon
as possible and on the other hand, putting countermeasures to
practice might take some time.
Different Mobile Operating Systems and Cross-Platform
Development. Research should not only focus on one partic-
ular OS exclusively, i.e., especially Android seems to attract
the most attention. Instead, the applicability of side-channel
attacks should be investigated on multiple platforms, as many
(or most) of the existing attacks work on other platforms as
well. This is due to the fact that different platforms and devices
from different vendors aim to provide the same features such
as sensors and software interfaces, and rely on similar security
concepts like permission systems and application sandboxing.
In addition, the increasing trend to develop applications
for multiple platforms (cross-platform development) also in-
creases the possibility to target multiple platforms at the same
time. For example, the increasing popularity of HTML5 apps
and the increasing availability of web APIs to access native
resources from JavaScript signiﬁcantly increases the scale of
side-channel attacks as speciﬁc attacks possibly target multiple
platforms at the same time.
Wearables. Although we put a strong focus on smartphones
in this paper, we stress that wearables in general must be
considered in future research. For example, smartwatches have
already been employed to attack user input on POS terminals
and hardware QWERTY keyboards [161]–[164]. Besides, it
has also been demonstrated that smartwatches can be used
to infer input on smartphones [165], [166] as well as text
written on whiteboards [167]. With the ever increasing number
of smart devices connected to our everyday lives, the threat
of side-channel attacks increases. We are likely to see higher
accuracies when these attacks are performed across multiple
devices, e.g., when combining data from smartwatches and
smartphones. Furthermore, Farshteindiker et al. [168] also
demonstrated how hardware implants (bugs)—possibly used
by intelligence agencies—can be used to exﬁltrate data by
communicating with a smartphone. The communication chan-
nel is based on inaudible sounds emitted from the implant
which are captured by the gyroscope of the smartphone. This
interconnection clearly demonstrates the potential of attacks
when multiple wearable devices are combined.
Internet of Things. Another area of research which is
rapidly growing is the Internet of Things (IoT). As all devices
in the IoT network are inter-connected and accessible via the
Internet, we foresee that attackers will exploit side-channel
leaks to target different kinds of IoT appliances. In fact such an
attack has already been carried out by Zhang et al. [16]. They
investigated an Android-based Wi-Fi camera and observed that
a particular side-channel leak on Android can be exploited
to infer whether or not the user is at home. This example
demonstrates that side-channel leaks do not only pose a threat
to a user’s privacy and security from a system security point
of view, but also pose a threat to smart home appliances
and security systems, such as smart
thermostats, cameras,
and alarm systems. Although this sounds utopian at ﬁrst, the
above example clearly demonstrates that side-channel leaks
(on smartphones) also pose a threat to these IoT appliances
and puts even users’ physical possessions at risk.
Combination of Multiple Information Leaks. In order
to improve the accuracy of existing attacks or to come up
with more sophisticated attack scenarios, multiple side-channel
leaks can also be combined. For instance, the combination
of cache attacks and sensor-based keyloggers as mentioned
in [113] could be used to improve keylogging attacks. First,
cache attacks can be used to determine the exact time when
a key is entered and, second, sensor-based keyloggers can be
used to infer the actual key. Furthermore, website ﬁngerprint-
ing attacks could be combined with sensor-based keyloggers as
mentioned in [26], which would allow to steal login credentials
for speciﬁc websites.
In addition, side-channel attacks can also be used to improve
attacks that exploit software vulnerabilities. For example,
although Screenmilker [47] does not represent a side-channel
attack—because a software vulnerability is exploited—it relies
on side-channel information in order to exploit this vulnera-
bility in the right moment. Lin et al. [47] suggested to rely on
CPU utilization, memory consumption, and network activities
in order to determine whether the targeted app is executed and,
thus, were able to take screenshots in the right moment.
Code Analysis Tools. The appiﬁcation of mobile devices
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
20
enables an easy installation of apps from the app markets.
However, these apps can be implemented by anyone who has
a developer account and, thus, the code needs to be checked
i.e., for presence of malicious
and veriﬁed appropriately,
behavior and side channels. While the app vetting processes
of app stores, e.g., Google Play, already check for presence of
malicious behavior, dedicated technologies, such as static and
dynamic code analysis, should also be employed in order to
prevent apps prone to side-channel attacks and apps exploiting
side-channel information leaks from being distributed via app
markets. This, however, does not seem to be a trivial task since
most side-channel attacks exploit information or resources that
can be accessed without any speciﬁc privileges or permissions.
Static and dynamic code analysis tools could also help to
ﬁx implementation ﬂaws that lead to side-channel attacks.
Some implementation ﬂaws exist for many years without being
noticed as has been demonstrated in [169] for the OpenSSL
implementation of the digital signature algorithm. Fostering
the development and application of tools to ﬁnd and detect
such ﬂaws during the software development process could help
to prevent vulnerable code from being deployed.
A possible starting point for the investigation and extension
of code analysis tools that might allow to scan applications
for possible side-channel attacks would be one of the survey
papers discussed in Section II-C.
X. CONCLUSION
Considering the immense threat arising from side-channel
attacks on mobile devices, a thorough understanding of infor-
mation leaks and possible exploitation techniques is necessary.
Based on this open issue, we surveyed existing side-channel
attacks and identiﬁed commonalities between these attacks in
order to systematically categorize all existing attacks. With the
presented classiﬁcation system we aim to provide a thorough
understanding of information leaks and hope to spur further
research in the context of side-channel attacks as well as
countermeasures and, thereby, to pave the way for secure
computing platforms.
ACKNOWLEDGMENT
The research leading to these results has received fund-
ing from the European Union’s Horizon 2020 research
and innovation programme
under grant agreement No
644052 (HECTOR),
and
European Research
the
Council
under
Union’s
the
Horizon
research
and innovation programme (grant agreement No 681402).
Veelasha Moonsamy has been supported by the Technology
Foundation STW (project 13499 - TYPHOON & ASPASIA)
from the Dutch government. Further, we would like to
thank Florian Mendel for helpful discussions about active
side-channel attacks as well as Cristofaro Mune and Nikita
Abdullin for pointing out a missing attack category.
European
2020
(ERC)
REFERENCES
[1] P. C. Kocher, “Timing Attacks on Implementations of Difﬁe-Hellman,
RSA, DSS, and Other Systems,” in Advances in Cryptology – CRYPTO
1996, ser. LNCS, vol. 1109. Springer, 1996, pp. 104–113.
[2] P. C. Kocher, J. Jaffe, and B. Jun, “Differential Power Analysis,”
in Advances in Cryptology – CRYPTO 1999, ser. LNCS, vol. 1666.
Springer, 1999, pp. 388–397.
[3] J. Quisquater and D. Samyde, “ElectroMagnetic Analysis (EMA):
Measures and Counter-Measures for Smart Cards,” in Smart Card
Programming and Security – E-smart 2001, ser. LNCS, vol. 2140.
Springer, 2001, pp. 200–210.
[4] S. Mangard, E. Oswald, and T. Popp, Power Analysis Attacks -
Revealing the Secrets of Smart Cards. Springer, 2007.
[5] E. Tromer, D. A. Osvik, and A. Shamir, “Efﬁcient Cache Attacks on
AES, and Countermeasures,” J. Cryptology, vol. 23, pp. 37–71, 2010.
[6] Y. Yarom and K. Falkner, “FLUSH+RELOAD: A High Resolution,
Low Noise, L3 Cache Side-Channel Attack,” in USENIX Security
Symposium 2014. USENIX Association, 2014, pp. 719–732.
[7] Q. Ge, Y. Yarom, D. Cock, and G. Heiser, “A Survey of Microar-
chitectural Timing Attacks and Countermeasures on Contemporary
Hardware,” Journal of Cryptographic Engineering, pp. 1–27, 2016.
[8] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard,
“DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks,” in
USENIX Security Symposium 2016. USENIX Association, 2016, pp.
565–581.
[9] L. Cai and H. Chen, “TouchLogger: Inferring Keystrokes on Touch
Screen from Smartphone Motion,” in USENIX Workshop on Hot Topics
in Security – HotSec. USENIX Association, 2011.
[10] A. J. Aviv, B. Sapp, M. Blaze, and J. M. Smith, “Practicality of