User: 请回答以下运维开发问题为什么建议在一个容器中只运行一个进程？在许多博客文章和一般观点中，有一句话是“每个容器一个进程”。
为什么存在这个规则？
为什么不在一个需要让所有进程都工作的容器中运行ntp、nginx、uwsgi和更多进程？
提及此规则的博客文章：
“每个容器单个进程是Docker应用的推荐设计模式。”
“Docker仅用于创建单个进程或单个服务容器。”
“每个容器最好使用一个进程”
“将单个服务作为容器运行”
“每个容器一个进程”
“每个容器一个进程”

Assistant: 让我们暂时忘记高层次的建筑和哲学争论。虽然在某些边缘情况下，单个容器中的多个函数可能是有意义的，但有一些非常实际的原因可以让您考虑将以下“每个容器一个函数”作为经验法则：
如果容器与单个函数隔离，则水平缩放容器要容易得多。需要另一个apache容器吗？在其他地方旋转一个。然而，如果我的apache容器中也包含了我的DB、cron和其他部分，这会使事情变得复杂。
每个容器有一个单独的功能，可以方便地将容器重新用于其他项目或目的。
它还使开发人员从生产环境中取出一个组件来进行本地故障排除，而不是整个应用环境的故障排除，变得更加便携和可预测。
修补/升级（操作系统和应用）可以以更加隔离和可控的方式进行。在容器中混合多个片段不仅可以生成更大的镜像，还可以将这些组件连接在一起。为什么必须关闭应用X和Y才能升级Z？
以上内容同样适用于代码部署和回滚。
从安全和隔离的角度来看，将函数拆分为多个容器可以获得更大的灵活性。您可能希望（或要求）在网络级别上隔离服务——无论是在物理上还是在覆盖网络内——以保持强大的安全态势或遵守PCI等规定。
其他更次要的因素，如处理stdout/stderr和将日志发送到容器日志，使容器尽可能短暂等。
请注意，我说的是函数，而不是过程。那种语言已经过时了。官方docker文件已经不再说“一个过程”，而是建议每个集装箱“一个问题”。