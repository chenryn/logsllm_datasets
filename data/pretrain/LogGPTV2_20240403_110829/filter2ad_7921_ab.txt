    req_uri = '/asdf'
    # AJP协议请求中的三个属性
    javax.servlet.include.request_uri = '/'
    javax.servlet.include.path_info = 'WEB-INF/web.xml'
    javax.servlet.include.servlet_path = '/'
###### 关键点1：`AjpProcessor类` -> `service()` -> `prepareRequest()`
根据上文的Tomcat处理请求流程，请求首先到达Connector，Connector内使用`AjpProcessor`解析Socket，将Socket中的内容封装到Request中。
所以我们首先将断点打到`AjpProcessor`类的`service()`方法：
一步步请求，随后跟入`prepareRequest()`方法。该方法解析请求，将相关属性匹配到该request的属性里。重点看这里：
放到request对象中的三个参数和对应参数值如下：
随后将请求传给`CoyoteAdapter`，对request进行封装，将请求抓发给Container：
随后的Tomcat内部处理流程跳过，直接看Servlet中的处理，调用栈很清晰的展现了Tomcat内部处理的流程：
最后通过`ApplicationFilterChain`类的`internalDoFilter()`方法将流程走到Servlet。
###### 关键点2：`DefaultServlet类` -> `service()` -> `doGet()`
由上文介绍的`Servlet`相关基础知识可知，该请求是非JSP文件请求，匹配不到指定的servlet，所以会映射到默认的servlet(`default
servlet`)处理。tomcat源码有个`DefaultServlet`类（路径：`org/apache/catalina/servlets/DefaultServlet.java`），我们断点也打到这个类，Debug看一下相关请求流程。
> 这里还要科普一下 **Servlet如何处理请求**
> ：一般请求到达servlet后先执行`service()`方法，在方法中根据请求方式决定执行`doGet()`还是`doPost()`方法。
流程进入`service()`方法，随后进入`doGet()`方法：
###### 关键点3：`getRelativePath()`
`doGet()`方法内直接进入`serveResource()`方法，我们直接看`serveResource()`方法：
首先是进入`getRelativePath()`方法，该方法的作用是确认请求的资源路径，进入该方法，可以看到三个很重要的参数（红框）：
这三个参数所对应的值为：
    static final String INCLUDE_REQUEST_URI = "javax.servlet.include.request_uri";
    static final String INCLUDE_PATH_INFO = "javax.servlet.include.path_info";
    static final String INCLUDE_SERVLET_PATH = "javax.servlet.include.servlet_path";
与我们的POC中的三个赋值参数对应，POC中的参数代入`getRelativePath()`方法，`RequestDispatcher.INCLUDE_REQUEST_URI`的值为'/'，不为空。pathInfo和servletPath参数的值拼接成result，`getRelativePath()`方法将result返回，返回内容为：'/WEB-INF/web.xml'。
###### 关键点4：`getResource()` -> `validate()` -> `normalize()`
`serveResource()`方法继续往下，可以看到这行代码：
    // path的值就是getRelativePath()方法的返回值：'/WEB-INF/web.xml'
    WebResource resource = resources.getResource(path);
跟入`getResource()`方法，可以看到调用了`validate()`方法。
`validate()`方法内主要调用了`normalize()`方法对path参数进行校验。
    result = RequestUtil.normalize(path, true);
我们直接看`normalize()`方法内做了那些校验：
返回null，回到`validate()`方法，就会报 **IllegalArgumentException(非法参数)** 的异常并终止本次操作。所以，
**我们的请求路径中不能包含"/../"，也就导致了该漏洞只能读取webapps目录下的文件** 。
经过`validate()`方法校验后，`getResources()`方法随后的一系列操作就通过路径读取到了资源。
###### 关键点5：`ServletOutputStream.write()`
最后通过`getOutputStream()`方法获得`ServletOutputStream`的实例：
利用`ServletOutputStream.write()`向输出流写入返回内容。
随后再经过Tomcat内部流程处理，经过Tomcat的`Container`和`Connector`，最终返回给客户端。
###### **关键点6：POC中的请求url(读取webapps下其他目录的文件)**
前文提到POC中还有个关键参数`req_uri`，这个参数的设置决定了我们可以读取webapps下其他目录的文件。设置其值为一个随意字符串'asdf',一来是无法匹配到webapps下的路径，走tomcat默认的ROOT目录；二来是为了让tomcat将请求流到`DefaultServlet`，从而触发漏洞。当请求读取`WEB-INF/web.xml`文件，则读取的就是`webapps/ROOT/WEB-INF/`目录下的web.xml。
当读取`webapps/manager`目录下的文件，只需修改POC中`req_uri`参数为'manager/asdf'，读取`WEB-INF/web.xml`文件则是读取`webapps/manager/WEB-INF/`目录下的web.xml。
* * *
**总结** ：至此，理解了如上6个关键点，整体漏洞流程也比较清晰了。
**漏洞复现：**
修改POC中的请求url为`/manager/asdf`，发送POC，读取到`webapps/manager/status.xsd`文件的内容（POC有做修改）：
##### (2) 文件包含漏洞 （可致RCE）
理解了上文的文件读取漏洞的分析，接下来的内容很好理解。与上文不同的是，请求经过`AjpProcessor`类的处理，随后将请求转发给了`JspServlet`（该原理上文也有介绍，POC中的请求url是.jsp文件，而`JspServlet`负责处理所有JSP文件的请求）。
首先在`webapps/manager`目录下新建文件test.txt，内容为：
修改POC进行调试。POC中的四个关键参数，也先在此说明：
    # 请求url，这个参数一定要是以“.jsp”结尾
    req_uri = '/manager/ddd.jsp'
    # AJP协议请求中的三个属性
    javax.servlet.include.request_uri = '/'
    javax.servlet.include.path_info = 'test.txt'
    javax.servlet.include.servlet_path = '/'
###### 关键点1：`JspServlet类` -> `service()` -> `serviceJspFile()`
断点打到`JspServlet`类的`service()`方法，先将servlet_path和path_info拼接在一起，赋值给jspUri（故这个参数是可控的）。
随后进入`serviceJspFile()`方法，将/test.txt带入Tomcat加载和处理jsp的流程里。具体处理流程就不描述了，根据网上的一张图做了些修改，大致画了下Tomcat加载和处理jsp的流程图，能很清晰的看懂处理流程：
###### 关键点2：`JspServletWrapper类`：`getServlet()` -> `service()`
最后返回到`JspServletWrapper`类，获取jsp编译后生成的servlet，随后调用service()方法，请求被执行。
* * *
**总结：**
简单理解就是我们传入的"/test.txt"被当成jsp编译执行。带入了Tomcat处理jsp的处理流程，将jsp(`test.txt`)转义成Servlet源代码.java(`test_txt.java`)，将Servlet源代码.java编译成Servlet类.class(`test_txt.class`)，Servlet类执行后，响应结果至客户端。
**该漏洞造成RCE的条件是：在webapps目录下上传文件（可以是任意文件），随后通过该文件包含漏洞，造成RCE。**
**漏洞复现：** 修改poc中的请求url为`manager/ddd.jsp`，test.txt中的代码被执行。
#### 0x04 漏洞修复
以官方发布的9.0.31版本的修复代码为例，主要做了以下修复：
1.[默认在`conf/server.xml`中禁用AJP连接器](https://github.com/apache/tomcat/commit/4c933d80e340b4a841a672060351b2190b326782)；  
2.[强制AJP协议默认监听本地环回地址，而不是0.0.0.0](https://github.com/apache/tomcat/commit/0e8a50f0a5958744bea1fd6768c862e04d3b7e75)；  
3.[若使用AJP协议，设置secretRequired属性为true，强制配置secret来设置AJP协议认证凭证](https://github.com/apache/tomcat/commit/9ac90532e9a7d239f90952edb229b07c80a9a3eb)；
4.[配置属性白名单，若向AJP连接器发送任意未被识别的属性，都会响应403](https://github.com/apache/tomcat/commit/64fa5b99442589ef0bf2a7fcd71ad2bc68b35fad);
#### 0x05 参考文章
  1. [Tomcat内核详解（六）：Connector组件](https://blog.csdn.net/qq_36807862/article/details/81287955)；
  2. [Tomcat整体架构浅析](https://blog.csdn.net/cx520forever/article/details/52743166)；
  3. [解析Tomcat内部结构和请求过程](https://www.cnblogs.com/zhouyuqin/p/5143121.html)；
  4. [Apache Tomcat 远程文件包含漏洞深入分析 by **天融信阿尔法实验室**](https://paper.seebug.org/1142/);
  5. [Tomcat Ajp协议文件包含漏洞分析 by **d00ms**](https://xz.aliyun.com/t/7325);
  6. [CVE-2020-1938:Tomcat AJP文件包含漏洞分析 by **c0ny1**](https://mp.weixin.qq.com/s/Y05EOzMhyztogNtL41MNNw);
  7. [不调试源码重现 Ghostcat 漏洞 (CVE-2020-1938) by **xax007**](https://paper.seebug.org/1147/);
  8. [Busting Ghostcat: An Analysis of the Apache Tomcat Vulnerability (CVE-2020-1938 and CNVD-2020-10487) by **趋势科技**](https://blog.trendmicro.com/trendlabs-security-intelligence/busting-ghostcat-an-analysis-of-the-apache-tomcat-vulnerability-cve-2020-1938-and-cnvd-2020-10487/)；