title:Native actors: how to scale network forensics
author:Matthias Vallentin and
Dominik Charousset and
Thomas C. Schmidt and
Vern Paxson and
Matthias W&quot;ahlisch
Native Actors: How to Scale Network Forensics
Matthias Vallentin
UC Berkeley
PI:EMAIL
Dominik Charousset
HAW Hamburg
PI:EMAIL
Thomas C. Schmidt
HAW Hamburg
PI:EMAIL
Vern Paxson
ICSI / UC Berkeley
PI:EMAIL
Matthias Wählisch
PI:EMAIL
FU Berlin
ABSTRACT
When an organization detects a security breach, it under-
takes a forensic analysis to ﬁgure out what happened. This
investigation involves inspecting a wide range of heteroge-
neous data sources spanning over a long period of time. The
iterative nature of the analysis procedure requires an interac-
tive experience with the data. However, the distributed pro-
cessing paradigms we ﬁnd in practice today fail to provide
this requirement: the batch-oriented nature of MapReduce
cannot deliver sub-second round-trip times, and distributed
in-memory processing cannot store the terabytes of activity
logs needed to inspect during an incident.
We present the design and implementation of Visibility
Across Space and Time (VAST), a distributed database to
support interactive network forensics, and libcppa, its ex-
ceptionally scalable messaging core. The extended actor
framework libcppa enables VAST to distribute lightweight
tasks at negligible overhead.
In our live demo, we show-
case how VAST enables security analysts to grapple with
the huge amounts of data often associated with incident in-
vestigations.
Keywords
Security, Network Forensics, Message-oriented Middleware
1.
INTRODUCTION
Network forensics and incident response require prompt
investigation and reaction to minimize the damage incurred
by a security breach. When security analysts explore an
incident, they typically need to access data from a large
time span to determine scope and breadth of the attack.
The sheer volume of data to investigate during this pro-
cess largely exceeds both storage and processing capacities
of single-machine system architectures.
In addition, ana-
lysts conducting forensics explore data in an extensive, iter-
ative fashion, dynamically generating numerous queries as
they work to pinpoint the salient evidence. Such an inter-
active process ﬁts poorly to distributed approaches such as
Permission to make digital or hard copies of part or all of this work for personal or 
classroom  use  is  granted  without  fee  provided  that  copies  are  not  made  or 
distributed for profit or commercial advantage, and that copies bear this notice and 
the full citation on the first page. Copyrights for third-party components of this work 
must be honored. For all other uses, contact the owner/author(s). Copyright is held 
by the author/owner(s). 
SIGCOMM’14, August 17–22, 2014, Chicago, Illinois, USA. 
ACM 978-1-4503-2836-4/14/08. 
http://dx.doi.org/10.1145/2619239.2631471.
Figure 1: VAST architecture based on actors (cir-
cles). Data enters the system through Ingestors and
clients send queries to retrieve activities. Processing
happens in the VAST core (dashed box) and scales
over a cluster of commodity machines.
MapReduce architected around batch-oriented processing.
Distributed in-memory cluster computing, which can pro-
vide quick response times, requires the entire data set to
ﬁt in memory—likewise infeasible when faced with the tera-
bytes of data that logging at a large site produces every day.
Because no existing architecture suits the needs of this
domain, we set out to design and implement a scalable, in-
teractive platform. We compose our fully distributed system
of lightweight, native actors embodied in the libcppa pro-
gramming environment. The system, visibility across space
and time (VAST), uniﬁes in a single framework retrospec-
tive data analysis and proactive measures to automatically
apply previously developed queries to events that may occur
in the future [1].
Our demo showcases how VAST achieves the required per-
formance and interactivity with real-world data. We give
visitors the opportunity to see and interact with the system
to better understand the nature of forensic network security
analysis.
2. SCALABLE FORENSICS
Scaling network forensics to terabyte volumes while re-
taining an interactive user experience requires a robust soft-
ware infrastructure that proves highly scalable.
2.1 An Actor-based Architecture
Current heterogeneous compute environments can be fully
exploited with a runtime abstraction that (i) harnesses avail-
able parallelism within a single machine, (ii) facilitates clus-
IngestorIngestorIngestorClientClientClientReceiverSearchIndexArchive141ter deployments while providing a type-safe messaging layer
with minimal memory usage, and (iii) can oﬄoad expen-
sive computation to specialized hardware (such as GPUs).
With libcppa,1 we contribute an actor library that satis-
ﬁes these needs. This C++ distribution layer is tailored to
high-performance applications and has demonstrated supe-
rior performance [2]. The environment provides a program-
ming paradigm based on the actor model [3]. In this model,
concurrent entities—actors—execute independently and in
parallel. Using unique, location-independent addresses, ac-
tors communicate asynchronously via message passing, and
do not share state. The libcppa runtime system can dis-
tribute actors dynamically—even on GPUs—to balance work
load. The actor model—originated in 1973—has gained mo-
mentum with the advent of multicore machines and cloud
computing. Today, actor systems can be found in back-end
software of large service providers such as eBay.2 libcppa
is the ﬁrst native, open source framework that scales up to
GPGPU-enhanced clusters and down to the IoT.
2.2 The VAST System
VAST employs libcppa as a central part of its design, and
structures its logic entirely in terms of actors. Figure 1 shows
a high-level overview of the system. Data arrives from a va-
riety of diﬀerent sources. The Ingestor actor parses the
input and transforms the data into VAST’s internal event
model before compressing it into segments and shipping it to
VAST’s core over the network. To allow for ﬂexible deploy-
ment scenarios, the core may run on a single box as well as
on a cluster of commodity machines, enabled by libcppa’s
network-transparent messaging layer. The data segments
arrive at the Receiver actor, which assigns the segment a
unique identiﬁer from a 64-bit ID space and then forwards it
to Archive (a key-value store of compressed data segments)
and Index (a horizontally partitioned array of type-speciﬁc
bitmap indexes [4]). After decompressing the segment, the
indexing process starts multiple worker actors, each of which
process a slice of the contained events. Because libcppa
uses copy-on-write semantics for intra-process messages, the
workers can share the same (immutable) data safely. The
high degree of concurrency enables single-machine ingestion
rates of 100K events/sec and index construction rates of 50-
200K events/sec, varying based on the data type to index
(e.g., booleans vs. containers of values).
Clients request speciﬁc events by formulating boolean ex-
pressions. For example, the query
:addr in 10.0.0.0/8 && conn.proto == "udp"
would match all events containing an IP address from the
subnet 10.0.0.0/8 with transport protocol UDP. Both predi-
cates in this conjunction are strongly typed and the LHS and
RHS must have compatible types. In the example above, the
LHS of the ﬁrst predicate represents a type query that ap-
plies to all events containing one or more values of type ad-
dress. The LHS of the second predicate represents a schema
query and refers to speciﬁc value (or set of values) that re-
solve according to conn.proto, where conn represents the
event type and proto the name of the data value. VAST au-
togenerates schemas during data ingestion. In the future, we
will allow operators to manually deﬁne their own schemas to
1http://libcppa.org
2http://www.ebaytechblog.com/2014/03/11
perform explicit type conversions (e.g., to parse string values
as IP addresses) and augment values with domain-speciﬁc
semantics (e.g., label IP address values as connection origi-
nator and responder).
When a query enters the core, Search performs syntactic
and semantic checks against the schema and then forwards
the parsed query AST to Index, which performs the query
upon the relevant partitions. Each predicate yields a sep-
arate index hit, which Index combines asynchronously as
they arrive. The index hits serve as pointers into the events
located at Archive. A dedicated Query actor started by
Search receives hits, asks Archive for the corresponding
segments, decompresses the received segments into events,
checks for candidate matches (if the indexing cannot pro-
vide guaranteed matches for a given operator), and sends
the matches back to Client.
VAST currently comprises 25K lines code, available open-
source under a BSD-style license.3
In the near-term fu-
ture, we plan to deploy and use VAST operationally at the
Lawrence Berkeley National Laboratory.
3. DEMO
In our demonstration, we showcase how operators inves-
tigate security incidents in real time. Moreover, we allow
attendees to interact with the system and ask their own
queries.
Speciﬁcally, we illustrate typical workﬂows of security an-
alysts. These often begin with a piece of intelligence (e.g.,
a sensitive URI, an IP address of a compromised machine,
an MD5 hash of a ﬁle), which serves as starting point for an
interactive, iterative search. Through reﬁnement of search
criteria, the analyst converges on a relevant set of events
that isolate the activity germane to the incident.
Our VAST instance runs remotely and contains hundred
of millions of events produced by the Bro network moni-
tor [5], covering a time span of several months. We will
show that interactive analysis with distributed actors is fea-
sible for such numbers.
4. REFERENCES
[1] Allman, M., Kreibich, C., Paxson, V., Sommer,
R., and Weaver, N. Principles for developing
comprehensive network visibility. In Proc. of Workshop
on Hot Topics in Security (HotSec) (July 2008).
[2] Charousset, D., Schmidt, T. C., Hiesgen, R., and
W¨ahlisch, M. Native Actors – A Scalable Software
Platform for Distributed, Heterogeneous Environments.
In Proc. 4rd ACM SIGPLAN Conf. on Systems,
Programming, and Applications (SPLASH ’13), WS
AGERE! (Oct. 2013), ACM.
[3] Hewitt, C., Bishop, P., and Steiger, R. A
Universal Modular ACTOR Formalism for Artiﬁcial
Intelligence. In Proceedings of the 3rd IJCAI (San
Francisco, CA, USA, 1973), pp. 235–245.
[4] O’Neil, P. E. Model 204 Architecture and
Performance. In Proceedings of the 2nd International
Workshop on High Performance Transaction Systems
(London, UK, 1987), Springer-Verlag, pp. 40–59.
[5] Paxson, V. Bro: A System for Detecting Network
Intruders in Real-Time. Computer Networks 31, 23–24
(1999), 2435–2463.
3https://www.github.com/mavam/vast
142