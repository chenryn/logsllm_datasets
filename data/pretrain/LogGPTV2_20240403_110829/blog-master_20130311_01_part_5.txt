触发器还有一个和会话参数session_replication_role结合使用的隐含特性, 需要使用ALTER TABLE来修改, 如下 :   
```  
session_replication_role (enum)  
Controls firing of replication-related triggers and rules for the current session. Setting this variable requires superuser privilege and results in discarding any previously cached query plans.   
Possible values are origin (the default), replica and local.   
See ALTER TABLE for more information.  
DISABLE/ENABLE [ REPLICA | ALWAYS ] TRIGGER  
These forms configure the firing of trigger(s) belonging to the table. A disabled trigger is still known to the system, but is not executed when its triggering event occurs. For a deferred trigger, the enable status is checked when the event occurs, not when the trigger function is actually executed.   
One can disable or enable a single trigger specified by name, or all triggers on the table, or only user triggers (this option excludes internally generated constraint triggers such as those that are used to implement foreign key constraints or deferrable uniqueness and exclusion constraints).   
Disabling or enabling internally generated constraint triggers requires superuser privileges; it should be done with caution since of course the integrity of the constraint cannot be guaranteed if the triggers are not executed.   
The trigger firing mechanism is also affected by the configuration variable session_replication_role.   
Simply enabled triggers will fire when the replication role is "origin" (the default) or "local".   
Triggers configured as ENABLE REPLICA will only fire if the session is in "replica" mode, and triggers configured as ENABLE ALWAYS will fire regardless of the current replication mode.  
```  
如果在表上面执行enable replica trigger $tg_name, 那么这个触发器只有当会话参数session_replication_role=replica时, 才会被触发.  
如果会话参数session_replication_role=origin或者local, 这个触发器将不会被触发.  
如果在表上面执行enable always trigger $tg_name, 那么这个触发器不管会话参数session_replication_role的值是什么, 都会被触发.  
其实这个用法还可以通过application_name参数以及触发器中配置判断application_name的控制语句来实现, 当然效率没有上面的方法高 :   
例如 :   
pgsql中的application_name可以这么来修改 :   
3\.1 连接参数中修改  
```  
ocz@db-172-16-3-150-> psql postgresql://:9201/digoal?application_name=digoal  
psql (9.2.1)  
Type "help" for help.  
digoal=# show application_name;  
 application_name   
------------------  
 digoal  
(1 row)  
digoal=# \q  
```  
3\.2 会话中修改 :   
```  
ocz@db-172-16-3-150-> psql  
psql (9.2.1)  
Type "help" for help.  
postgres=# show application_name;  
 application_name   
------------------  
 psql  
(1 row)  
postgres=# set application_name='abc';  
SET  
postgres=# show application_name;  
 application_name   
------------------  
 abc  
(1 row)  
```  
3\.3 使用application_name实现触发器内部控制 :   
```  
digoal=> create table abc(id int, info text);  
CREATE TABLE  
digoal=> create or replace function tg() returns trigger as $$  
declare  
  v_app_name text;  
begin  
  select setting into v_app_name from pg_settings where name='application_name';  
  if v_app_name='digoal' then  
    return null;  
  end if;  
  return NEW;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
digoal=> create trigger tg0 before insert on abc for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> select setting from pg_settings where name='application_name';  
 setting   
---------  
 psql  
(1 row)  
digoal=> insert into abc values(1,'digoal');  
INSERT 0 1  
```  
-- 当application_name='digoal'时不插入数据.  
```  
digoal=> set application_name='digoal';  
SET  
digoal=> insert into abc values(1,'digoal');  
INSERT 0 0  
```  
使用session_replication_role来控制触发器是否被触发.  
```  
digoal=> create table abc(id int, info text);  
CREATE TABLE  
digoal=> create or replace function tg() returns trigger as $$  
declare  
begin  
  raise notice '%', TG_NAME;  
  return NEW;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
digoal=> alter table abc enable replica trigger tg0;  
ALTER TABLE  
```  
-- 当session_replication_role=origin并且trigger tg0 修改为enable replica时, 触发器未被触发.  
```  
digoal=> show session_replication_role;  
 session_replication_role   
--------------------------  
 origin  
(1 row)  
digoal=> insert into abc values (1,'digoal');  
INSERT 0 1  
```  
-- set session_replication_role需要超级用户权限 :   
```  
digoal=> \c digoal postgres  
You are now connected to database "digoal" as user "postgres".  
```  
-- 当session_replication_role=replica并且trigger tg0 修改为enable replica时, 触发器被触发了.  
```  
digoal=# set session_replication_role='replica';  
SET  
digoal=# insert into digoal.abc values (1,'digoal');  
NOTICE:  tg0  
INSERT 0 1  
```  
## 8. 可以在系统表或系统视图上创建触发器吗?  
不可以, 如下 :   
```  
digoal=# create trigger tg before insert on pg_database for each row execute procedure tg();  
ERROR:  42501: permission denied: "pg_database" is a system catalog  
LOCATION:  CreateTrigger, trigger.c:195  
```  
详见  
src/backend/commands/trigger.c  
## 小结  
1\. 注意各种触发器在操作流中的顺序, 返回值的传递, 返回值的意义.  
2\. 注意当1个表上有多个同类触发器时, 需要注意他们之间的参数传递, 触发顺序.  
3\. 还要注意触发器的可视, 下一篇中会着重讲可视特性.  
## 参考  
1\. http://www.postgresql.org/docs/9.2/static/trigger-definition.html  
2\. http://www.postgresql.org/docs/9.2/static/trigger-datachanges.html  
3\. http://www.postgresql.org/docs/9.2/static/spi-visibility.html  
4\. http://www.postgresql.org/docs/9.2/static/trigger-example.html  
5\. http://www.postgresql.org/docs/9.2/static/plpgsql-trigger.html  
6\. http://www.postgresql.org/docs/9.2/static/sql-createtrigger.html  
7\. http://www.postgresql.org/docs/9.2/static/trigger-interface.html  
8\. http://www.postgresql.org/docs/9.2/static/sql-set-constraints.html  
9\. src/backend/commands/trigger.c  
10\. src/include/commands/trigger.h  
11\. src/include/utils/reltrigger.h  
12\. 触发器的应用 :   
http://blog.163.com/digoal@126/blog/static/16387704020128772037884/  
http://blog.163.com/digoal@126/blog/static/16387704020120133019990/  
http://blog.163.com/digoal@126/blog/static/163877040201251931517556/  
http://blog.163.com/digoal@126/blog/static/16387704020130931040444/  
http://blog.163.com/digoal@126/blog/static/163877040201301483549300/  
http://blog.163.com/digoal@126/blog/static/1638770402012325111528424/  
http://blog.163.com/digoal@126/blog/static/163877040201211193542316/  
http://blog.163.com/digoal@126/blog/static/1638770402012731203716/  
http://blog.163.com/digoal@126/blog/static/1638770402012731944439/  
http://blog.163.com/digoal@126/blog/static/16387704020128142829610/  
http://blog.163.com/digoal@126/blog/static/16387704020129851138327/  
http://blog.163.com/digoal@126/blog/static/163877040201119111234570/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")