against internally cloned third-party OSS sources, but also imposes
high storage requirements and does not scale as number of OSS
to be indexed grows. Indexing multiple versions of OSS to enable
version pinpointing further adds to the problem of code duplication.
We address the aforementioned challenges by tapping into the
structurally rich tree-like layout of OSS sources. We will use the
OSS source repo layouts in Figure 1 throughout this section for
illustration purposes. The key observation that we make is that
OSS developers typically follow the best practices of software de-
velopment to improve collaboration and allow faster development.
Hence, OSS sources are well organized in a modular and hierarchi-
cal fashion for easy maintainability. For instance, source files (e.g.,
a C/C++ or Java class file) typically encapsulates related functions.
Directory (dir) nodes at each level of the source tree cluster all re-
lated child files and dirs together. Referring to our example layout in
Figure 1, we can see that src and source dirs in OpenCV and MuPDF,
respectively group all related source files and dirs under them.
Similarly, internal code clones of third-party OSS (e.g., LibPNG and
LibJPEG) are maintained in separate dirs (thirdparty and 3rdparty,
respectively). We utilize this property to perform ratio-based feature
matching against each file or dir node (i.e.,
) along
the OSS source tree hierarchy as opposed to matching against the
entire OSS repo (i.e., |BI N∩OSS |
), which may result in low accuracy
in case of partial OSS reuse (§3.4.1). Specifically, if the ratio-based
|BI N∩N ODE|
|N ODE|
|OSS |
feature matching reports a high score against a node n (e.g., LibPNG)
at a particular level l in the OSS source tree hierarchy, but reports a
low aggregated score when matched against one of n’s parent nodes
p (e.g., OpenCV) at level > l, then we only report a match against
node n (i.e., LibPNG), but not against the parent p (i.e., OpenCV) or
any siblings at the same level. In this example, the matched OSS
path reported by OSSPolice would be OpenCV/LibPNG.
To detect internal clones and filter out spurious matches against
them, we apply multiple additional heuristics that leverage the
modularized layout of OSS sources. During indexing we visit each
dir node n in OSS sources and check for the presence of common
software development files, such as LICENSE or COPYING (OSS licens-
ing terms), CREDITS (acknowledgements), and CHANGELOG (software
change history). These files are typically placed in the top-level
source dir of OSS project repos. C/C++ OSS sources also typically
host build automation scripts (e.g., configure and autogen in top-
level source dirs. As such, cloned third-party OSS sources are likely
to retain these files, which can be used to identify internal OSS
clones. However, since some OSS sources may not be well organized,
we further leverage the large code duplication across OSS sources
resulting from OSS reuse to identify such internal clones. The obser-
vation we make is that due to OSS reuse, dir nodes (n) of commonly
reused OSS sources will have multiple parents p in our database in
contrast to unique OSS source dirs (e.g., MuPDF/source/pdf). This
helps us identify all popular OSS clones in our database. All iden-
tified clones are further annotated so that they can be filtered out
during matching phase in order to minimize false positives (see
matching rules in §3.4.4).
3.4.3 Hierarchical Indexing. We devise a novel hierarchical
indexing scheme that retains the structured hierarchical layout of
OSS sources (depicted in Algorithm 1). Specifically, instead of creat-
ing a direct mapping of features to the target OSS (i.e. the top-level
dir in the OSS source tree), we map features to their immediate
parent nodes (i.e., files and middle-level dirs). Figure 2 shows the
layout of our indexing database constructed from OSS sources in
Figure 1. We use this figure to walk through the steps to index an
OSS. We populate an OSS in our indexing database, by separately
processing each node (feature, file, or dir) in its source tree in a
bottom-up fashion, starting from the leaf nodes that represent fea-
tures (e.g., strings, functions, etc.). In order to retain the structured
layout of OSS sources, we treat identifiers of parent nodes (i.e.,
files and dirs) as features, which are further indexed for efficient
lookup. We refer to them as hierarchical features. At each level l of
OSS source hierarchy, for a given node n, we create two types of
mappings for each feature f under it: inverted mapping of f to n
(immediate parent at level l) and straight mapping of n to f . Given
a feature, the first mapping allows us to quickly find its matching
parents, whereas we use the latter to perform ratio-based similarity
detection. Our hierarchical indexing scheme efficiently captures
uniqueness of features at each level of hierarchy. For example, after
indexing we can know that features in LibPNG are contained in
source dir LibPNG, which in turn is contained in multiple nodes,
such as 3rdparty in OpenCV and thirdparty in MuPDF.
We take advantage of internal OSS clones, to perform code dedu-
plication for efficient use of hardware resources during indexing.
6
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2174UpdateIndexDB(MD5( f eat ),path2Id[f ile])
UpdateVersionDB( f eatures,repoIn f o)
child ← f ile
while child (cid:44) repoRoot do
f ile2Features[f ile] ← ClangParser( f ile)
f ile2Features ← ∅
for f ile ∈ repoRoot do
path2Id ← ∅
dir2Features ← ∅
dir2Children ← ∅
for ( f ile, f eatures) ∈ f ile2Features do
path2Id[f ile] ← Simhash( f eatures)
for f eat ∈ f eatures do
parent ← parento f (child )
dir2Features[parent].add ( f eatures)
dir2Children[parent].add (child )
child ← parent
for (dir , f eatures) ∈ dir2Features do
path2Id[dir] ← Simhash( f eatures)
Algorithm 1 Pseudo code for hierarchical indexing algorithm
1: procedure IndexRepo(repoRoot, repoIn f o)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23: procedure IndexDir(dir ,dir2Children,path2Id)
24:
25:
26:
27:
28:
29:
30: procedure UpdateIndexDB(f ,n)
31:
32:
33:
34:
35:
36:
IndexDir(repoRoot,dir2Children,path2Id )
AddMappingToDB(path2Id[repoRoot],repoIn f o)
children ← dir2Children[dir]
for child ∈ children do
if ¬IsIndexed(child ) then
else
parents′ ← GetParentsFromDB( f )
if sizeo f (parents′) ≥ TNp
if ∀n′ ∈ parents′ : H (n,n′) ≥ D then
continue
then
AddMappingToDB( f ,n)
AddMappingToDB(n, f )
IndexDir(child,dir2Children,path2Id )
UpdateIndexDB(path2Id[child],path2Id[dir])
To do so, we assign content-based identifiers to all the nodes in the
source tree. We use 128-bit md5 hash to generate such identifiers
for features (leaf) nodes and use Simhash [19] algorithm to assign
identifiers of parent (non-leaf) nodes, derived from the identifiers of
all features (leaf nodes) under them. Simhash is a Locality Sensitive
Hashing (LSH) algorithm that takes a high dimensional feature set
and maps them to a fixed size hash. Hamming distance between
hash values reveals cosine similarity between the original feature
set. Since the Hamming distance between different identifiers re-
flects their similarity, before inserting a new mapping from feature
f to parent n, we lookup whether f is already mapped to a similar
parent node n′ with Hamming distance less than a particular thresh-
old D (i.e. H (n,n′)  0 do
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
if ¬MatchingRules(p) then
ns ← p2NormScore[p]
cs ← p2CumScore[p]
if ns ≥ TN ormScor e ∧ cs ≥ TCumScor e then
f eatures.add (p)
versions ← SearchVersionDB(repos, f eatures)
return repos,versions
f eatures ← ∅
for p ∈ parents do
continue
p2Children[p] ← GetChildrenFromDB(p)
p2NormScore[p] ← NormScore(p,children)
p2CumScore[p] ← CumScore(p,children)
Rci denote number of matching features, number of total features
and number of matching parent nodes (references) of the i-th child
node, respectively. We then define log Np
as IDF of the i-th child,
1+Rci
measuring its importance to the parent node. Finally, we weigh
each child using their IDF and define the weighted matching ratio
as NormScore in Equation 1.
When matching against the indexing table, we first query fea-
tures to get files, then query files to get dirs, and so on. After every
round of query, we use NormScore to assign higher weights to
unique parts of a parent node and filter these parent nodes for next
round of query based on NormScore. With this normalization score,
when we search binary of LibPNG, we can achieve a close to 1.0
score, but when we move up from LibPNG to 3rdparty in OpenCV,
the score significantly drops, and we can conclude a matching of
LibPNG. Additionally, we also track total number of matched fea-
tures, denoted as CumScore, to complement NormScore, since the
latter only tracks matched ratio, whereas the former shows matched
count. With the rich information extracted in indexing phase and
the defined metrics, we apply the following matching rules to
filter out false positives:
• Skip dirs that have license, since they are likely to be third-
party OSS Clones.
• Skip source files that matches low ratio of functions or header
files that matches low ratio of features, since they are likely
to be tests, examples or unused code (e.g. partial builds).
8
Figure 3: OSSPolice architecture and workflow
• Skip popular files/dirs by checking whether they are much
more popular than the siblings, where popularity refers to
number of matching parent nodes for each node (Rci ).
Based on the detected OSS, we then compare the features from
the app binary with the unique features across OSS versions to
identify the matched OSS version. However, in practice, we find
that unique features may cross match. For example, version string
“2.0.0” from OkHTTP may match the version “2.0.0” of MoPub,
while the actual matched version of MoPub is “3.0.0”. To address