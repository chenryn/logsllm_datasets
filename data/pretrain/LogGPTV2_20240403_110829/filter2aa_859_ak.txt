xml
BOM 元数据
（Metadata）
供应商，制作商，组件
信息，证书信息，创建
BOM 的工具信息，外部
API 信息，依赖关系信
息（依赖关系图）
SPDX 文档创建信息，
组件信息，文件信息（可
能包含在包信息里），
文件片段信息，证书信
息，SPDX 元素之间的
关系，注释信息（例
如：审查 SPDX 文件的
信息） 
文档创建信息：SPDX 
版本、数据许可、
SPDX 标识符、文档名
称、SPDX 文档命名空
间、创建者
组件信息：包名、包版
本、包文件名、包下载
位置、包主页、结束许
可、声明许可、许可注
释和版权文本
语料库标签：描述预
安装阶段的软件（TAR、
ZIP 文件、可执行文件）
主要标签：提供产品
名称、标签的全球唯
一标识符以及标识标
签创建者的基本信息
补丁标签：标识并描
述应用于产品的补丁
补充标签：增加主要或
补丁标签的附加细节
软件供应链安全技术白皮书
043
CycloneDX
SPDX
SPDX Lite
SWID
组件唯一
标识支持
软件坐标 Coordinates 
(group， name， 
version)
PURL（Package URL）
CPE （Common 
Platform Enumeration）
SWID（ISO/IEC 19770-
2：2015）
Cryptographic hash 
functions (SHA-1， 
SHA-2， SHA-3， 
BLAKE2b， BLAKE3)
PURL（Package URL）
Cryptographic hash 
functions
SPDXID
PURL（Package URL）
Cryptographic hash 
functions
SPDXID
CPE
Cryptographic hash 
functions
SWID
近年来，由开源组件和第三方商业软件引发的供应链安全问题层出不穷，拿最近的
Log4j 和 SolarWinds 入侵事件来举例，因其应用广泛，可利用性强，造成极大影响。SCA
技术不需要运行程序，通过静态的方式分析第三方软件的组成，得到应用程序的组件知识
图谱，能够有效提升软件供应链的透明度，进而关联出存在的已知漏洞清单，帮助用户及
时修复问题。
4.2.2 静态安全分析 (SAST)  
软件供应链从软件生命周期角度可划分为开发、交付、使用三大环节，每个环节都可能
会引入供应链安全风险，上游环节的安全问题会传递到下游环节。开发环节作为软件供应链
的上游环节，从该环节入手，及早发现和修复安全问题非常必要。早在 2005 年，美国总统
信息技术咨询委员会关于信息安全的年度报告中就曾指出：美国重要部门使用的软件产品必
须加强安全检测，尤其是应该进行软件代码层面的安全检测。而在美国国土安全部（DHS）
和美国国家安全局（NSA）的共同资助下，MITRE 公司展开了对软件源代码缺陷的研究工作，
并建立了软件源代码缺陷分类库 CWE（Common Weakness Enumeration），以统一分类和
标识软件源代码缺陷。美国 CERT、SANS、OWASP 等第三方研究机构也在软件源代码安全
检测领域开展了许多工作，包括：CERT 发布了一系列安全编程（C/C++、Java 等）标准，
SANS 和 OWASP 发布了严重代码缺陷 TOP25 和 TOP10，用于指导开发人员进行安全的编码，
尽量避免源代码中的安全缺陷。
静态安全分析正是这样一种针对开发过程中源代码进行安全检测的技术，内置多种缺陷
检测规则，将源代码转换为易于扫描的中间数据格式，使用缺陷检测技术对其进行分析，匹
配缺陷规则，从而发现源代码中存在的缺陷，并提供修复建议，帮助用户及早修复，从而降
低后期缺陷修补的成本，增强软件的安全性。静态安全分析原理如下图所示：
044
软件供应链安全关键技术
其中常见的静态漏洞分析技术有以下几种：
（1）语法分析技术
语法分析指按具体编程语言的语法规则处理词法，分析程序产生的结果并生成语法分析
树的过程。这个过程可以判断程序在结构上是否与预先定义的 BNF 范式相一致，即程序中是
否存在语法错误。程序的 BNF 范式一般由上下文无关文法描述。支持语法分析的主要技术包
括算符优先分析法（自底向上）、递归下降分析法（自顶向下）和 LR 分析法（自左至右、
自底向上）等。语法分析是编译过程中的重要步骤，也是其他分析的基础。
（2）类型分析技术 
类型分析主要指类型检查。类型检查的目的是分析程序中是否存在类型错误。类型错误
通常指违反类型约束的操作，如让两个字符串相乘、数组的越界访问等。类型检查通常是静
态进行的，但也可以动态进行。编译时进行的类型检查是静态检查。对于一种编程语言，如
果它的所有表达式的类型可以通过静态分析确定下来，进而消除类型错误，那么这个语言是
静态类型语言（也是强类型语言）。利用静态类型语言开发出的程序可以在运行程序之前消
除许多错误，因此程序质量的保障相对容易（但表达的灵活性相对弱）。
（3）控制流分析技术 
控制流分析的输出是控制流图，通过控制流图可以得到关于程序结构的一些描述，包括
条件、循环等信息。控制流图是一个有向图，如下图所示，图中的每个节点对应一个基本块，
而边通常对应分支方向。
软件供应链安全技术白皮书
045
（4）数据流分析技术 
数据流分析用于获取有关数据如何在程序的执行路径上流动的信息。在程序的控制流图
上，计算出每个节点前、后的数据流信息，通过数据流分析可以生成数据流图。
046
软件供应链安全关键技术
数据流分析代码示例图如上所示，如参数 w 是存在漏洞的数据，则数据流路径 BB0-
>BB1->BB2->BB3->BB4->BB6 是不安全的。
数据流分析广泛应用于静态分析中，可对变量状态（如未使用变量、死代码等）进行分析。
同时，污染传播分析也是数据流分析技术的一种应用，在漏洞分析中，使用污点分析技术将
所感兴趣的数据（通常来自程序的外部输入）标记为污点数据，然后通过跟踪和污点数据相
关的信息的流向，可以知道它们是否会影响某些关键的程序操作，进而挖掘程序漏洞。
缺陷类别一般分为以下三种：
（1）输入验证类
[26]
输入验证类缺陷指程序没有对输入数据进行有效验证所导致的缺陷。常见的输入验证类
缺陷包括 SQL 注入、XML 外部实体注入、命令注入、XSS（跨站脚本）等。
针对输入验证类缺陷，需要对输入进行验证，验证的内容包括数据是否包含超出预期的
字符、数据范围、数据长度、数据类型等，若包含危险字符，如＜、＞、"、'、%、（、）、&、+、
\、\'、\"、. 等，还需对危险字符进行转义。也可以通过验证行为净化所有不可信的输出，如
针对解释器的查询（SQL、XML 和 LDAP 查询）和操作系统命令，从而有效减少部分安全问题。
（2）资源管理类
资源管理类缺陷指因程序对内存、文件、流、密码等资源的管理或使用不当而导致的缺陷。
常见的资源管理类缺陷包括缓冲区上溢 / 下溢、资源未释放、内存泄漏、硬编码密码等。
对于此类缺陷，需要内存分配时，检查缓存大小，确保不会出现超出分配空间大小的危险。
在内存、文件、流等资源使用完毕后应正确释放资源。
（3）代码质量类
代码质量类缺陷指由于代码编写不当所导致的缺陷，低劣的代码质量会导致不可预测行
为的发生。常见的代码质量类缺陷包括整数问题、空指针解引用、初始化问题、不当的循环
终止等。
对于代码质量类缺陷，需要针对性地进行解决，如使用整数时，要避免操作结果超出整
数的取值范围；使用指针时，要判断其是否为空，养成良好的编程习惯。
[26] 奇安信代码安全实验室 软件供应链安全：源代码缺陷实例剖析 电子工业出版社 2021 年 8 月
软件供应链安全技术白皮书
047
静态安全分析技术不需要运行程序，能够覆盖 100% 的代码库，但检查结果可能存在漏
洞或误报的情况，一般需要不断地优化检测技术和检测规则，以降低误报和漏报。
4.2.3 动态应用安全测试 (DAST)
在实际攻击场景中，通常无法获得源代码，基于白盒的模式来分析软件中存在的漏洞。
黑客大多针对运行中的系统或业务进行黑盒扫描，寻找可能存在的薄弱点进行攻击。动