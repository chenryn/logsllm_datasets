以下是优化后的文本，使其更加清晰、连贯和专业：

### 参考文献

1. KRUEGEL, C. A View on Current Malware Behaviors. In Workshop on Large-Scale Exploits and Emergent Threats (LEET) (2009).
2. BAYER, U., MILANI COMPARETTI, P., HLAUSCHEK, C., KRUEGEL, C., AND KIRDA, E. Scalable, Behavior-Based Malware Clustering. In Network and Distributed System Security Symposium (2009).
3. BRUMLEY, D., HARTWIG, C., LIANG, Z., NEWSOME, J., SONG, D., AND YIN, H. Towards Automatically Identifying Trigger-Based Behavior in Malware Using Symbolic Execution and Binary Analysis. Tech. Rep. CMU-CS-07-105, Carnegie Mellon University, 2007.
4. CRANDALL, J., WASSERMANN, G., DE OLIVEIRA, D., SU, Z., WU, F., AND CHONG, F. Temporal Search: Detecting Hidden Malware Timebombs with Virtual Machines. In Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (2006).
5. DINABURG, A., ROYAL, P., SHARIF, M., AND LEE, W. Ether: Malware Analysis via Hardware Virtualization Extensions. In ACM Conference on Computer and Communications Security (2008).
6. FATTORI, A., PALEARI, R., MARTIGNONI, L., AND MONGA, M. Dynamic and Transparent Analysis of Commodity Production Systems. In International Conference on Automated Software Engineering (ASE) (2010).
7. FERRIE, P. Attacks on Virtual Machines. In Proceedings of the Association of Anti-Virus Asia Researchers Conference (2007).
8. FREDRIKSON, M., JHA, S., CHRISTODORESCU, M., SAILER, R., AND YAN, X. Synthesizing Near-Optimal Malware Specifications from Suspicious Behaviors. In IEEE Symposium on Security and Privacy (2010).
9. FREILING, F., HOLZ, T., AND WICHERSKI, G. Botnet Tracking: Exploring a Root-Cause Methodology to Prevent Distributed Denial-of-Service Attacks. In European Symposium On Research In Computer Security (ESORICS) (2005).
10. JOHN, J., MOSHCHUK, A., GRIBBLE, S., AND KRISHNAMURTHY, A. Studying Spamming Botnets Using Botlab. In Usenix Symposium on Networked Systems Design and Implementation (NSDI) (2009).
11. KANG, M., YIN, H., HANNA, S., MCCAMANT, S., AND SONG, D. Emulating Emulation-Resistant Malware. In Workshop on Virtual Machine Security (VMSec) (2010).
12. KOLBITSCH, C., HOLZ, T., KRUEGEL, C., AND KIRDA, E. Inspector Gadget: Automated Extraction of Proprietary Gadgets from Malware Binaries. In IEEE Symposium on Security and Privacy (2010).
13. KOLBITSCH, C., MILANI COMPARETTI, P., KRUEGEL, C., KIRDA, E., ZHOU, X., AND WANG, X. Effective and Efficient Malware Detection at the End Host. In Usenix Security Symposium (2009).
14. MARTIGNONI, L., PALEARI, R., ROGLIA, G. F., AND BRUSCHI, D. Testing CPU Emulators. In International Symposium on Software Testing and Analysis (ISSTA) (2009).
15. MOSER, A., KRUEGEL, C., AND KIRDA, E. Exploring Multiple Execution Paths for Malware Analysis. In IEEE Symposium on Security and Privacy (2007).
16. PALEARI, R., MARTIGNONI, L., ROGLIA, G. F., AND BRUSCHI, D. A Fistful of Red-Pills: How to Automatically Generate Procedures to Detect CPU Emulators. In usenix-woot (2009).
17. RAFFETSEDER, T., KRUEGEL, C., AND KIRDA, E. Detecting System Emulators. In Proceedings of the Information Security Conference (2007).
18. RUTKOWSKA, J. Red Pill... or how to detect VMM using (almost) one CPU instruction. http://www.invisiblethings.org/papers/redpill.html, 2004.
19. SONG, D., BRUMLEY, D., YIN, H., CABALLERO, J., JAGER, I., KANG, M. G., LIANG, Z., NEWSOME, J., POOSANKAM, P., AND SAXENA, P. BitBlaze: A New Approach to Computer Security via Binary Analysis. In Conference on Information Systems Security (Invited Paper) (2008).
20. SREEDHAR, V. C., GAO, G. R., AND FONG LEE, Y. Identifying Loops Using DJ Graphs, 1995.
21. STONE-GROSS, B., COVA, M., CAVALLARO, L., GILBERT, B., SZYDLOWSKI, M., KEMMERER, R., KRUEGEL, C., AND VIGNA, G. Your Botnet is My Botnet: Analysis of a Botnet Takeover. In ACM Conference on Computer and Communications Security (CCS) (2009).
22. WILHELM, J., AND CHIUEH, T.-C. A Forced Sampled Execution Approach to Kernel Rootkit Identification. In Recent Advances in Intrusion Detection, 2007.

### 训练集分析
我们使用了包含5,000个恶意软件样本的训练集（详见第4节）。具体而言，图表显示了在特定数量n的系统调用（x轴）下，观察到n个系统调用的时间槽（y轴）的数量。例如，在分析样本时，我们记录了大约1,000个时间间隔内有150次成功的系统调用（见图5a）。同样，图5c显示了遇到某个熵值（x轴）的次数（y轴）。表2展示了从训练运行中为HASTEN检测器推导出的阈值。

**表2：监控模式下的阈值（时间槽持续时间为5秒）**

| 阈值类型 | 名称          | 最小/最大值 |
|----------|---------------|-------------|
| 成功调用 | Smin/max,s    | 3 - 600     |
| 失败调用 | Smax,f        | 900         |
| 熵       | Smin/max,e    | -0.17 - 20.0|

### 嵌套停滞循环处理
当HASTEN处于被动模式时，其目标是查找并白名单化导致执行停滞的代码。为此，系统会检查程序的动态控制流图中的循环。如果发现多个嵌套的活动循环，HASTEN将白名单化最内层的一个（如第5.2节所述）。然而，这在实际恶意软件中可能会出现问题，因为最内层的活动循环可能只是整个停滞代码的一部分（我们遇到过真实世界中的恶意软件案例，其中停滞循环本身被外部循环多次执行）。
在这种情况下，系统会在最内层循环结束后立即恢复到监控模式。不幸的是，整个执行仍然没有进展，外部循环将再次执行内部循环。当然，监控阶段会检测到不足的进展，并将系统切换回被动模式。但是，我们的分析会再次找到相同的活动循环。此时，仅白名单化内部循环将是错误的解决方案。这将导致系统不断在监控模式和被动模式之间切换。
为了解决这个问题，系统会跟踪所有先前已被白名单化的循环。当我们发现一个活动循环已被白名单化但没有进展时，系统会扩展白名单以包括下一个外层循环。也就是说，嵌套循环将逐步添加到白名单中，从最内层开始向外扩展。

### 持久行为特征
**表3：持久行为特征**

| 资源      | 动作                           |
|-----------|--------------------------------|
| 文件      | 创建、删除、写入、打开截断       |
| 重命名、设置信息   |
| 注册表    | 创建、删除、保存、恢复           |
| 设置值、设置信息   |
| 进程      | 创建、终止、设置信息             |
| 驱动程序  | 加载、卸载                       |
| GUI       | 打开窗口                         |
| 网络      |                                |

### 监控模式参数
图5a和5b分别显示了我们在训练集中观察到的成功和失败系统调用的数量。

### 详细发现
如第7.2节所述，我们可以使用不同的方法来测量额外的行为。表4显示了HASTEN通过乐观和悲观度量标准检测到的额外行为。

**表4：HASTEN检测到的额外行为**

| 描述                  | 总运行次数 | 样本数 | 百分比 | 新增行为（任何活动） | 新增文件活动 | 新增网络活动 | 新增GUI活动 | 新增进程活动 | 新增注册表活动 | 无新行为 | 异常情况 |
|-----------------------|------------|--------|--------|----------------------|--------------|--------------|--------------|---------------|----------------|-----------|-----------|
| 总计                  | 3,770      | 319    | -      | 2,450                | 1,873        | 906          | 28           | 895           | 795            | 1,320     | 0         |
| 乐观改进              | 825        | 519    | 128    | 367                  | 127          | 224          | 1,642        | 277           | 86             | 80        | 41        |
| 悲观改进              | 500        | 314    | 95     | 249                  | 70           | 165          | 325          | 1,642         | 277            | 86        | 80        |
| 无新增行为            | 1,642      | 277    | 0      | 1,320                | 0            | 65.0%        | 49.7%        | 24.0%         | 0.7%           | 23.7%     | 21.1%     |
| 忽略（可能是随机）活动 | 35.0%      | 0.0%   | 11.0%  | 10.3%                | 6.8%         | 0.5%         | 4.7%         | 8.8%          | 54.0%          | 35.0%     | 0.0%      |

希望这些修改使文档更加清晰、连贯和专业。