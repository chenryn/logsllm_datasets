shell提供了两个极其简单的内部命令，它们不做任何事情，除了以一个0或1退出状态来
终止执行。True命令总是执行成功，而false命令总是执行失败：
[ne@linuxbox-]$ true
[ne@linuxbox-]$ echo $?
0
[ne@linuxbox-]$ false
[nedlinuxbox-]$ echo $?
我们能够使用这些命令，来看一下if语句是怎样工作的。If语句真正做的事情是计算命令
执行成功或失败：
[ne@linuxbox -]$ if true; then echo “It's true."; fi
It's true.
[ne@linuxbox -]$
当if之后的命令执行成功的时候，命令echo“It'strue.”将会执行.否则此命令不执行。如
果if之后跟随一系列命令，则将计算列表中的最后一个命令：
386
---
## Page 388
[nellinuxbox -]$ if false; true; then echo *It's true."; fi
It's true.
[nellinuxbox -]$ if true; false; then echo *It′s true.°; fi
[ne@linuxbox -]$
28.3测试
到目前为止，经常与if一块使用的命令是test。这个test命令执行各种各样的检查与比较。它
有两种等价模式：
test expression
比较流行的格式是
这里的expression是一个表达式，其执行结果是true或者是false。当表达式为真时，这个
test命令返回一个零退出状态，当表达式为假时，test命令退出状态为1。
28.3.1文件表达式
以下表达式被用来计算文件状态：
表达式
如果下列条件为真则返回True
filel -ef file2
file1和file2拥有相同的索引号（通过硬链接两个文件名指
向相同的文件）。
filel -nt file2
filel 新于 file2°
filel -ot file2
file1 早于 file2°
-b file
fle存在并且是一个块（设备）文件。
-c file
file存在并且是一个字符（设备）文件。
-d file
file存在并且是
一个目录。
-e file
file存在。
387
---
## Page 389
 J-
file存在并且是一个普通文件。
g file
file存在并且设置了组ID。
-G file
file存在并且由有效组ID 拥有。
-k file
file存在并且设置了它的“sticky bit”。
-L file
file存在并且是一个符号链接。
-O file
file存在并且由有效用户ID拥有。
p file
file存在并且是一个命名管道。
-r file
file存在并且可读（有效用户有可读权限）。
-s file
file存在且其长度大于零。
-S file
file存在且是一个网络socket°
-t fd
fd是一个定向到终端/从终端定向的文件描述符。这可以
被用来决定是否重定向了标准输入/输出错误。
-l file
file存在并且设置了setuid位。
-w file
file存在并且可写（有效用户拥有可写权限）。
-x file
file存在并且可执行（有效用户有执行/搜索权限）。
表28-1：测试文件表达式
这里我们有一个脚本说明了一些文件表达式：
#!/bin/bash
# test-file: Evaluate the status of a file
FILE=-/ .bashrc
us 1[ 371d$. a- ] 3T
echo "$FILE is a regular file."
fi
us [ 3T$. P-] xT
echo "$PILE is a directory.*
fi
echo "$FILE is readable.*
fi
u =[ 31a$. - ] x7
echo “$FILE is writable.*
388
---
## Page 390
 [3$. x-] 
echo "$FILE is executable/searchable.*
fi
else
echo “$FILE does not exist"
exit 1
fi
exit
这个脚本会计算赋值给常量FILE的文件，并显示计算结果。对于此脚本有两点需要注意。
第一个，在表达式中参数$FILE是怎样被引用的。引号并不是必需的，但这是为了防范空参
数。如果SFILE的参数展开是一个空值，就会导致一个错误（操作符将会被解释为非空的字符
串而不是操作符）。用引号把参数引起来就确保了操作符之后总是跟随着一个字符串，即使字
符串为空。第二个，注意脚本末尾的exit命令。这个exit命令接受一个单独的，可选的参数，
其成为脚本的退出状态。当不传递参数时，退出状态默认为零。以这种方式使用exit命令，则
允许此脚本提示失败如果sFILE展开成一个不存在的文件名。这个exit命令出现在脚本中的
最后一行，是一个当一个脚本“运行到最后”（到达文件末尾），不管怎样，默认情况下它以退
出状态零终止。
类似地，通过带有一个整数参数的return命令，shell函数可以返回一个退出状态。如果我
们打算把上面的脚本转变为一个shell函数，为了在更大的程序中包含此函数，我们用return
语句来代替exit命令，则得到期望的行为：
test_file () {
# test-file: Evaluate the status of a file
FILE=-/ .bashrc
if [ -e *$FILE* ]; then
if [ -f "$FILE* ]; then
echo "$FILE is a regular file.*
fi
if [ -d "$FILE* ]; then
echo “sFILE is a directory.*
fi
if [ -r "$FILE* ]; then
echo "$FILE is readable.*
fi
389
---
## Page 391
if [ -v "$FILE* ]; then
echo "$FILE is vritable.*
if [ =x “$FILE* ]; then
echo *SFILE is executable/searchable.*
fi
else
echo "$PILE does not exist"
return 1
fi
28.3.2字符串表达式
以下表达式用来计算字符串：
表达式
如果下列条件为真则返回True
string
string 不为 null 。
-n string
字符串 string的长度大于零。
-Z string
字符串string的长度为零。
string1 = string2
string1和string2相同。单或双等号都可以.不
string1 == string2
过双等号更受欢迎。
string1 != string2
string1和 string2 不相同。
string1 > string2
sting1 排列在 string2 之后。
stringl 和&2
exit 1
fi
if [*$ANSWER" = "yes* ]; then
echo "The ansver is YES.*
elif [ "$ANSWER" = *no* ]; then
echo "The ansver is NO."
echo "The ansver is MAYBE."
else
echo "The ansver is UNKNOVN.*
fi
在这个脚本中，我们计算常量ANSWER。我们首先确定是否此字符串为空。如果为空，我
们就终止脚本，并把退出状态设为1。注意这个应用于echo命令的重定向操作。其把错误信息
“Thereisno answer.”重定向到标准错误，这是处理错误信息的“正确”方法。如果字符串不
为空，我们就计算字符串的值，看看它是否等于“yes，”“no，”或者“maybe”。为此使用了elif，
它是“elseif”的简写。通过使用elif，我们能够构建更复杂的逻辑测试。
28.3.3整型表达式
下面的表达式用于整数：
表达式
如果为真
integerl -eq integer2
integer1等于integer2°
integerl -ne integer2
integer1 不等于 integer2°
integerl -le integer2
integer1小于或等于integer2°
integerl -lt integer2
integer1小于 integer2 °
integerl -ge integer2
integerl大于或等于integer2°
integerl -gt integer2
integerl 大于 integer2 °
表28-3:测试整数表达式
391
---
## Page 393
这里是一个演示以上表达式用法的脚本：
#!/bin/bash
# test-integer: evaluate the value of an integer.
INT==5
if [ -z *$INT" ]; then
echo "INT is enpty ." >b2
exit 1
fi
if [ $INT -eq 0 ]; then
echo "INT is zero.*
else
if [ $INT -1t 0 ]; then
echo "INT is negative."
else
echo "INT is positive."
fi
if [ $((INT X 2)) -eq 0 J; then
echo "INT is even.*
else
echo "INT is odd.*
fi
fi
这个脚本中有趣的地方是怎样来确定一个整数是偶数还是奇数。通过用模数2对数字执行
求模操作，就是用数字来除以2，并返回余数，从而知道数字是偶数还是奇数。
28.4更现代的测试版本
目前的bash版本包括一个复合命令，作为加强的test命令替代物。它使用以下语法：
[[ expression ]]
这里，类似于test，expression是一个表达式，其计算结果为真或假。这个[[]]命令非
常相似于test命令（它支持所有的表达式），但是增加了一个重要的新的字符申表达式：
392
---
## Page 394
string1 =-
regex
其返回值为真，如果string1匹配扩展的正则表达式regex。这就为执行比如数据验证等任
务提供了许多可能性。在我们前面的整数表达式示例中，如果常量INT包含除了整数之外的任
何数据，脚本就会运行失败。这个脚本需要一种方法来证明此常量包含一个整数。使用[[]]
和=~字符串表达式操作符。我们能够这样来改进脚本：
#!/bin/bash
# test-integer2: evaluate the value of an integer.
INT=5
if [[ "$INT* =- ^=?[0-9]+$ ]]; then
if [ $INT -eq 0 ］; then
echo "INT is zero.*
else
if [ $INT -1t 0 ］; then
echo "INT is negative.*
else
echo "INT is positive."
fi
if [ $((INT x 2)) =eq 0 J; then
echo "INT is even."
else
echo "INT is odd.*
fi
fi
else
echo "INT is not an integer.* >&2