现在，我们对程序的运行已有大概的蓝图，该是审视隐藏在函数内的细节的时候了。我
们将根据使用上的方便依次介绍。
usage是一个简单的函数：在标准输出上打印短的帮助信息，使用嵌入文件（here
document）形式，而非一连串echo语句：
usage ()
Usage1
cat 62
1
warning在标准错误输出上显示其参数，在EXITCODB内加1（警告计数），并返回：
warning()
、I + 3000±Ix8S xdx8 ,=300011X3
echo/"*$8* 1>62
主程序代码最外部的循环是由调用find_package开始，该函数会循环遍历来源目录以
寻找包，并处理我们还未提及的细节：
find_package()
、//S*[6-0] +[°1 ["-]/s, a- pas 1 tS。 oupa,=aseq
 Usage: tind_package package=x-y-z
PAR=
PARFILE=
for sredir in sSRcDIRS
do
.、ped,,xpoxs 5 .*. =,xtpous$。1so4
for subdir. in *Sbase" **
do
# NB: update package setting in build_one() if this 1ist changes
find_file Ssredir/$subdir/$1.tar,gz
find_fi1e Ssrcdir/$subdir/$1,tar,z
*tar xfz*
&& return
'tar xfz*
&& return
s4 return
find_file Ssrcdir/$subdir/$1.tar
*tar xf*
find_file $srodir/$subdir/$1.tgz
find_f11e Sorcdir/$subdir/$1.tar,bz2
'tar xfj*
&& return
find_file Ssredir/$subdir/$1.zip
'tar xfz*
*unzip -q*
&k return
tind_file Ssrcdir/$subdir/$1,jar
&& return
'jar xf*
&& return
www.TopSage.com
---
## Page 231
产生脚本
219
done
done
很明显：内部循环里的find_package是在识别多种存档文件格式，而另一个函数
find_file则是在执行真正的操作时被调用，当它成功时，可立即返回。内部循环的第
二次选代中，subdir为空，且路径名称里也有两个连续的斜杠，不过这没关系，我们
在附录B中有说明。虽然这个程序代码乍看上去与例8-1里的pathfind命令类似，然
而，这里我们需要在每个目录下寻找许多文件，且针对它们做点不一样的处理。
我们在本节一开始提过：.tar，gz的存档文件格式是很普遍的，不过当然还是可能出
现其他压缩与命名结构（scheme）。tar是UNIX主要的命令，尽管其他操作系统里也
有tar的实作，但它们都不包含在标准发布中，InfoZip格式（注3）为许多人协同开发
的产物，目标是支持任何操作系统上所使用的压缩存档文件，面Java的jar（注4）文
件使用的就是InfoZip格式。在find_package里的循环内容可完全处理这些文件。
src.然而，当存档文件不断增大时，这样的组织方式就会变得很笨重。在我们的站点
里，每个包都被给定它自已的来源目录，例如gawk3.1.4版的存档文件，我们就将它
放在/usr/local/gnu/src/gawk/gawk-3.1.4.tar.gz，而该版本的构建目志则存储
于/usr/local/gnu/src/gawk/1ogs/gawk-3.1.4,每个包目录内的wHERE-FROx文
件都记录了包在Internet上的主要存档文件位置，以便我们检查较新的版次。一般来说，
我们会保留包存档文件最新的数版，因为有一天可能在网络无法运行，或远程主要存档
文件站点无法连接时，这时当你需要重建包时，就派得上用场了。因此，find_package
里的循环体会从包名称中将版本编号截断，存储结果到baSe中，井在退回去查阅
$srcdir之前，它会先在$srcdir/Sbase中查找包，
我们发现保留构建日志相当有用，因为在安装一段时日后，当你在探究bug而需要有关
使用哪个编译器与要套用哪些选项等细节时，一定会用得到它。而且，对一些可移植性
较差的包来说，经常会需要在构建程序中，或甚至是针对来源文件做些小调整，以利构
建完成。如果该信息都记录在日志文件里，则在安装那些包的较新版本时便能节省一些
时间了，
find_file函数是用来测试包存档文件的可读性以及存在与否，再将其参数记录在两个
全局变量里，最后返回状态结果。这样大大地简化了find_package程序代码：
元http://www.info-zip.org/,
注4：
jar文件可也含校验和与数字签名，可用以检翻文件是要有误或基改：所以它们出现
在一般的款件分复申是越来须繁了
www.TopSage.com
---
## Page 232
220
find_file ()
om
# Usage:
find_file file progran-and-args
Return 0 (success) if found, ,1 (failure) if not found
if test -r *$1*
then-
PAR=*$2*
用来提取的程序与参数
PARFILE=*$1*
要提取来源的实际文件
else
return 0
return 1
fi
set_userhosts函数允许用户指定确切的路径（可能是与目前目录相对的路径），也可
以是在SBUILDHOME初始化目录中所找到的，来提供userhosts文件，对于已知只能运行
在某种限定环境下的包来说，这么微便于将构建主机群按照编译器、平台或包加以分组。
可以提供任何数目的userhosts文件，所以我们只要简单地将它们的名称累积在
ALTUSERHOSTS里就可以了：
set_userhosts ()
Usage: set_userhosts file(s)
for u in.*se*
do
if test -r*su*
then
/s.1-
then
ALTUSERHOSTS=*$ALTUSSRHOSTS SBUILDHOME/$u
else
error,*File not found: $u*
f1
done
最后一个函数build_one，便是处理远程主机上的包作业。因为函数太长，我们拆为几
个部分讲解：
build_one ()
Usage:
bui1d_one [user8]host [:bui1d-directory1[,envfile]
现在，除了在注释标志中有简短提及外，我们井未精确地指出SHOME/.build/
userhosts初始文件里到底是什么数据，这里我们得切分成4段信息：远程主机上的用
户名称（与初始化主机上的不相同时）、主机名称本身、应该构建的远程主机上已存在
www.TopSage.com
---
## Page 233
产生脚本
221
的目录名称，以及构建时可能的特定额外环境变量的设置，在Shell脚本里，将这些信
息分别存储在独立的文件里会很不方便，所以我们借用远程与secureShell的语法，将
它们整合在一起，井以分隔字特隔开，像这样：
jones8freebsd.exarple.com: /1oca1/bui1d, $HoME/ .bu11d/c99
仅主机名称部分是强制性的。
我们也会需要用到这些部分，所以这里使用echo与sed将参数分割。通过eval传递
参数，并展开名称中的任何环境变量（例如SHOME/.bui1d/c99里的HOME），以避免
在userhosts文件里，将系统特定的登录目录路径直接编码，为方便起见，如集没有指
定，则我们会提供/tmp作为默认的构建目录：
arg=*'eval echo $1' *
展开环境变量
*、//$*:/s,-pas16xe oqpo、,=soqxesn
别除冒号与管号后的
任何东西
user=aecho Suserhost 1 sed -e s′/9.*s/7'
取出用户名称
test “Suser*·*Suserhost" && user=SUSER
如为空，则使用SUSER
-//e [81/,≤ a-pas1qsoqzasns oo,=sog
取出主机信息
、//'1/e,pes16xeo=
环境变量文件名称
test *Senvfile* = *$arg* && envfile=/dev/nul1
bui1ddir=*echo $arg 1 sed -e s′/^-*://' -e *s/,.*//***
构建目录
我们希望能找一个较固定（安定）的临时目录给予bui1ddir使用，但不同的UNIX厂
商之间，临时目录的名称并不一致。虽然几行额外程序便能做些测试，不过我们还是假
定大部分的用户会指定一个合理的构建目录。除了/比mp常会在重开机后被清除内容的
原因，另外还有一些理由让我们认为/tmp不是builddir好的选择：
在许多系统上，/tmp是一个分别的文件系统，它可能太小以至于无法处理庞大的
包构建树状结构。
在部分系统上，/tmP是以不具备执行程序权限的方式加载的：这可能导致
configure的测试与验证检查失败。
在某些SunSolaris的版本下，由于不明的因素，无法让本地编译器编译/tmp下
的程序代码，
envfile工具是相当重要的：它让我们能覆盖掉在configure里已作的默认选择。软件
开发人员当然应尽可能地测试各种编译器，以验证软件的可移植性并调试。通过选择不
同的构建目录与envfile的值，我们可以在同一台主机上，以不同的编译器同时执行多
个构建。envfile文件十分简单，它们只是设置环境变量而已，如下所示：
www.TopSage.com
---
## Page 234
222
第8章
$cat $HoME/.bufld/c99
CC=e99
CXX=CC
程序的下一步：将仅含文件名（bare filename）的部分，例：gawk-3.1.4.tar.gz，存
储到parbase变量中：
parbase=*basename $PARPILE
包名称（例：gawk-3.1.4）则存储到变量package：
sed
o*s/[.15ar$//
-e *6/[.]tar[. ]be2$//
-e *s/[ -1 tar[ . 1gz$//*\
e *s/[.1tar[,]2$//′ \
-e *s/[.]tar$//*\
-e *s/[.]tgz$//\
-e 'e/[.1zip$//***
我们使用显式的sed模式切去字尾，因为在名称中有太多的点号，较简化的模式更可信
鞍，为确保它们也可以与旧式的sed实现一起运行，我们是以分开的替换命令而不是以
单一扩展正则表达式指明它们。如需支持已加人到find_package的新存档文件格式，
则也应在此处更新这些编辑器模式。
下一步便是将存档文件复制到远程主机上的构建目录，除非它已经出现在该系统上，可
能是通过加载文件系统或是映射的方式，这种做法在我们的站点很常见，所以这个检查
操作可节省时间与磁盘空间。
虽然我们通常会免编写成聊天程序，不过在每次与远程系统通信之前先执行echo命
令其实是相同的：它让用户得到必要的反馈信息。远程复制是很耗时的，且很可能会出
现失败或停滞不动：没有这样的反馈信息，用户很难了解到底为什么脚本执行了那么久，
或究竞是哪台主机导致错误的发生。parbaselocal变量则是用来区分出存档文件的临
时版本与先前已存在之版本的差别：
echo $SSH_sSSHPLAGS Suserhost test -f $PARFILE*
then
parbaselocal=SPARPILB
else
parbaeelocal=$perbase
SSCP $PARFIL& $userhost:$bul1ddir
f1
理想上，使用管道解包比较好，因为这么做可以将输人7输出的量减半，另外碰盘空间
需求也会减半。可惜的是，只有jar和tar可以用该方式读取它们的存档文件：unzip
www.TopSage.com
---
## Page 235
产生脚本
是需要实际文件的。实际上，jar可以读取InfoZip文件，这让我们可以用3a置换Om1
unzip，并使用管道。遗憾的是，编写本书的时候，jar仍不够成熟，我们至少就发现
有一个实现会卡在，2ip文件的处理上。
远程复制是连续执行，而非并行处理。后者不是不可能做到，只是会增加主要程序额外
的复杂性，它必须先寻找与分发包，等待包分发完成，接着再构建。当然，这么一来构