title:Exploring Tor's Activity Through Long-Term Passive TLS Traffic Measurement
author:Johanna Amann and
Robin Sommer
Exploring Tor’s Activity Through Long-Term
Passive TLS Traﬃc Measurement
Johanna Amann1(B) and Robin Sommer1,2
1 International Computer Science Institute, Berkeley, USA
{johanna,robin}@icir.org
2 Lawrence Berkeley National Laboratory, Berkeley, USA
Abstract. Tor constitutes one of the pillars of anonymous online com-
munication. It allows its users to communicate while concealing from
observers their location as well as the Internet resources they access.
Since its ﬁrst release in 2002, Tor has enjoyed an increasing level of
popularity with now commonly more than 2,000,000 simultaneous active
clients on the network. However, even though Tor is widely popular,
there is only little understanding of the large-scale behavior of its net-
work clients. In this paper, we present a longitudinal study of the Tor
network based on passive analysis of TLS traﬃc at the Internet uplinks
of four large universities inside and outside of the US. We show how Tor
traﬃc can be identiﬁed by properties of its autogenerated certiﬁcates,
and we use this knowledge to analyze characteristics and development of
Tor’s traﬃc over more than three years.
1 Introduction
Anonymous online communication has become a paramount interest for both
researchers and the Internet community at large. Tor represents the most popular
system to that end, allowing users to communicate with Internet servers while
keeping their identity and location private. While many conceptual aspects of
Tor’s communication have been studied in the past, details about its network-
level properties—such as, especially, the clients’ behavior—remain scarce. Most
of what the community knows about the Tor network comes from public directory
information, which it uses to maintain the network. However, as Tor purposefully
limits this knowledge, there is hardly any information about real-world usage
patterns of Tor clients.
By default, Tor uses the SSL/TLS1 protocol suite to establish encrypted
connections between participating nodes, just as it is commonly used by web
browsers, email clients, etc. In diﬀerence to other services using TLS, Tor does
not partake in the global PKI with its trusted Certiﬁcate Authority system.
Instead, Tor nodes automatically generate X.509 server certiﬁcates, which they
rotate frequently. It turns out, however, that Tor’s current certiﬁcate algorithm
leaves them identiﬁable through pattern matching, enabling passive observers of
the TLS data stream to distinguish Tor connections from other TLS connections.
1 For the remainder of this paper, we will refer to either SSL or TLS as “TLS.”.
c(cid:2) Springer International Publishing Switzerland 2016
T. Karagiannis and X. Dimitropoulos (Eds.): PAM 2016, LNCS 9631, pp. 3–15, 2016.
DOI: 10.1007/978-3-319-30505-9 1
4
J. Amann and R. Sommer
In this paper, we exploit this characteristic to present a measurement study of
the Tor network using passively collected TLS session information. We (i) iden-
tify Tor sessions; (ii) compare the connections against publicly available infor-
mation from Tor directory authorities and; (iii) use metadata from the TLS
protocol layer to infer properties of clients and servers.
Our data set consists of passively collected information of all outgoing TLS
sessions from 4 university networks with, in total, more than 300,000 users,
spanning a period of more than 3 years. Of the 138 billion total sessions in that
set, Tor contributes more than 40 million.
We organize the remainder of this paper as follows: Sect. 2 gives a short
overview of the related work. Section 3 summarizes the Tor protocol and intro-
duces our data set. Section 4 discusses the methodology of our measurement
study. Section 5 takes a look at the properties of outgoing Tor connections in
our data set while Sect. 6 examines characteristics of Tor servers. Section 7 dis-
cusses our results and concludes this paper.
2 Related Work
There are a number of works that measure diﬀerent parts of the Tor infrastruc-
ture. In 2009, McCoy et al. [17] measure the Tor network by joining in as exit and
relay nodes. Their results show that non-interactive protocols consume a dispro-
portionate amount of bandwidth; that substantial Tor communication involves
clear-text protocols (including transmitting user passwords); and that at least
one exit node examined the content of user payloads. In 2010, Chaabane et al. [5]
perform a slightly diﬀerent measurement using the same approach.
Loesing measures the relay as well as the client side of the Tor network using
information from the Tor directory authorities [14,15], showing trends from 2006
to 2009. The studies examine the number, bandwidth and country distribution
of relays and clients, and oﬀer an estimate of the number of requests that the
network transfers. Dhungel et al. [7] measure and examine delays introduced by
guard relays using active probing.
While there is further a wealth of work examining anonymity in the Tor
network [11,13,16], proposing updates to the Tor routing algorithms [20], and
measuring speciﬁc details like underground marketplaces [6] and child pornog-
raphy traﬃcking [12], to the best of our knowledge no prior eﬀort has studied
the encrypted traﬃc between Tor nodes.
3 Background
We begin our discussion by summarizing the background, starting with an
overview of the inner working of Tor with a focus on its communication pro-
tocol. For this we ﬁrst introduce Tor’s diﬀerent node types in Sect. 3.1, followed
by an overview of their communication in Sect. 3.2. Finally, Sect. 3.3 introduces
the data set from the ICSI Notary service that we use throughout this paper.
3.1 Tor Node Types
Exploring Tor’s Activity
5
The Tor network consists of diﬀerent types of nodes. Users run a Tor client
that allows them to access the Tor network. They use a web browser, or other
local software, to access the network via a proxy port that the Tor client opens
on their machine. Clients connect to relays, which forward their information to
other nodes or the Internet at large.
Information about all currently available relays is publically available from
semi-trusted directory authorities, which the Tor client software hardcodes. At
the time of writing, the Tor network oﬀers 9 directory authorities. After retriev-
ing relay information from a directory authority, clients connect to the network
by connecting to typically three guard relays. The Tor network chooses guard
relays through an automated process that favors stable and reliable nodes.2
Clients keep connecting to the same set of guard relays for about 4 to 8 weeks—
a design that protects against attackers controlling nodes only for shorter periods
while aiming to correlate timing information [18].3 Next, exit relays forward con-
nections to the public Internet, with a relay’s administrator deciding if the node
may act in this role.
When a Tor client wants to connect to a host on the Internet, it picks a ran-
dom path through the Tor network, starting at one of its guard relays. Neigh-
boring relays on that path establish connections between each other, forming
circuits that allow clients to reach the destination. The same circuit can be
re-used by a client for several connections to the same target server. The time
limit for a circuit’s reuse depends on the Tor version, and tends to lie between
10 min and 2 h.4 Finally, bridges represent a further class of relays. Their IP
addresses remain private to allow clients from censored countries or networks to
access the Tor network, even if those countries block all Tor relays listed by the
public directory authorities. Bridge IP addresses can, e.g., be obtained via Tor’s
website, which enforces rate limits and uses captchas.
3.2 Tor Node Communication
Tor supports two ways of communication: (i) using the traditional Tor protocol;
and (ii) using pluggable transports. When using the traditional Tor protocol [8],
Tor nodes connect to each other using a TLS connection. Depending on the Tor
protocol version, the way in which a node establishes the TLS connection varies
slightly, but with all modern versions of Tor the server presents an automati-
cally generated X.509 certiﬁcate. The nodes start using the Tor communication
protocol after ﬁnishing the setup of the TLS connection.
The second way of connecting to the Tor network uses pluggable transports,5
which enable tunneling Tor through other protocols. Tor supports several such
2 https://blog.torproject.org/blog/lifecycle-of-a-new-relay.
3 https://www.torproject.org/docs/faq.
4 https://lists.torproject.org/pipermail/tor-dev/2015-March/008548.html.
5 https://gitweb.torproject.org/torspec.git/tree/pt-spec.txt.
6
J. Amann and R. Sommer
transport protocols, including obfs2 and obfs36 (protocol obfuscation layers for
TCP protocols), WebSockets,7 and Meek,8 which uses domain fronting to hide
inside innocuous-looking HTTP requests to CDNs.
For our study, we examine only Tor communication over TLS, not any plug-
gable transports.
3.3 The ICSI SSL Notary
For our study, we use data from the ICSI SSL Notary [1], which passively collects
TLS session and certiﬁcate information from currently seven research and univer-
sity networks, covering activity of approximately 390 thousand users in total. To
date, the Notary has recorded more than 138 billion TLS connections, and more
than 3 million unique certiﬁcates.9 The ﬁrst data providers started contributing
data to the Notary in February 2012. Our data providers run the open-source
Bro Network Monitoring System [4,19] on their gateway links. We provide them
with a custom Bro analysis script that collects details from each outgoing SSL
connection. For more details about the setup, we refer to [1]. For this paper,
we use data from four of our seven data providers, choosing universities with
large user populations that have been contributing consistently. Table 1 shows
aggregate information about these four providers. This subset covers more than
300,000 users on two continents for a period of more than 3 years.
Table 1. Summary of data set properties from contributing sites. N = North America,
X = rest of world. Total reﬂects the number of unique items across the sites. Filt. counts
certiﬁcates after ﬁltering Tor and Grid Computing certiﬁcates.
Certiﬁcates
Connections
Site
Time
Site Users Filtered certs Tor certs Total conns Tor conns Days
90 K 2.6 M
1,284
N1
50 K 1.1 M
N2
1,022
853
170 K 1.4 M
N3
1,003
X1
12 K 233 K
Total 391 K 3.5 M
—
60 G
22 G
42 G
3.1 G
127 G
3.7 M
9.5 M
658 K
258 K
16 M
11 M
29 M
1,1 M
252 K
41 M
4 Methodology
In this section we introduce our measurement methodology, including our app-
roach to identifying Tor certiﬁcates. We also present the features that we consider
for each Tor connection.
6 https://gitweb.torproject.org/pluggable-transports/obfsproxy.git.
7 https://crypto.stanford.edu/ﬂashproxy/.
8 https://trac.torproject.org/projects/tor/wiki/doc/meek.
9 Not counting Tor and Grid Computing certiﬁcates.
Exploring Tor’s Activity
7
For studying Tor sessions, we need to distinguish traﬃc between Tor nodes
from other TLS communication. Examining Tor’s payload, as well as its TLS
source code,10 reveals that the certiﬁcates that Tor servers generate exhibit char-
acteristics tha renders them unique. By default, both the issuer and the subject
of the certiﬁcates use random Common Names consisting of the components
www., a random 8 to 20 letter base-32 encoded domain name, and a .com or
.net ending (e.g., www.4dpbq2neblawq7lbq.net, www.iqo3xm6iukfa4qf.com).
The subject and issuer ﬁelds are generated independently and thus diﬀer from
each other. Neither subject nor the issuer ﬁelds contain further information that
is commonly found in certiﬁcates (and mandated by Certiﬁcate Authorities),
such as location or company names.
Table 2. Features collected by our TLS data collection. Shaded features are used in
this study.
Collected Features
TLS extension value lengths
Client SNI (RFC6066)
Server ticket lifetime (RFC5077)
Timestamp
TLS Version
Server certiﬁcates
No. client certiﬁcates Hash(Client & Server session ID) Connection Duration
Server IP & port
Client available ciphers Hash(Client IP, SNI, Salt)
Selected cipher
Client EC curves
DH parameter size
Sent & Received bytes
Client & Server ALPN (RFC7301) Client EC point formats
Hash(Client IP, Server IP, Salt)
Selected EC curve
TLS Alerts
These properties allow us to identify Tor connections by parsing the X.509
certiﬁcates in our data set and then matching a corresponding regular expression
on their subject and the issuer ﬁelds. Through a set of semi-automated cross-
checks, we veriﬁed that our data set contains no non-Tor TLS sessions with
certiﬁcates matching this heuristic.
One potential pitfall of identifying Tor connections this way stems from TLS
session resumption, which skips most of the TLS handshake, including the cer-
tiﬁcate exchange, for consecutive connections to the same TLS server. However,
the Tor speciﬁcation states that Tor clients and servers must not implement
session resumption (Sect. 2.2 of [8]), hence avoiding that challenge.
Table 2 summarizes the features that our notary data set provides.11 Most
of the collected information concerns the TLS handshake, such as the supported
cipher list a client sends, the server selected cipher or diﬀerent TLS extensions.
In addition to this, the Notary information also contains the IP address and port
of the server. To retain anonymity of users at contributing sites, we hash client
IP addresses with Server IP (and SNI if present), along with a site-speciﬁc secret
salt unknown to us. This enables us to identify unique client/server pairs while
keeping client IPs private.
10 https://doxygen.torproject.org/tortls 8c source.html#l01178.
11 Since we have extended our data collection script over time, information about older
connections does not contain all the listed attributes.
8
J. Amann and R. Sommer
5 Tor Server Connections
As a ﬁrst step in our exploration of the Tor network, we compare the passively col-
lected data from our measuring points with publically available information from
the Tor network. The Tor Project releases a set of statistics containing information
about the relays and bridges in the network on its CollecTor webpage.12
5.1 Tor Consensus Information
For our subsequent analysis, we use CollecTor information about the Tor network
status consensuses. These network status consensuses contain all the relays in
the Tor network as agreed on by the semi-trusted Tor directory authorities (see
Sect. 3.1). Among others, the data contains the IP addresses, ports, and Tor
versions of all public relays, as well as the relay ﬂags (like guard relay, exit relay,
stable, fast). This data is available since the end of 2007 with hourly granularity.
Flags
a: Total
b: Fast
c: Stable
d: Guard Relay
e: Exit Relay
10000
y
a