# Exploring Tor's Activity Through Long-Term Passive TLS Traffic Measurement

**Authors:**
- Johanna Amann<sup>1</sup>
- Robin Sommer<sup>1,2</sup>

**Affiliations:**
- 1 International Computer Science Institute, Berkeley, USA
- 2 Lawrence Berkeley National Laboratory, Berkeley, USA

**Contact:**
- {johanna, robin}@icir.org

## Abstract
Tor is a cornerstone of anonymous online communication, allowing users to conceal their location and the Internet resources they access. Since its initial release in 2002, Tor has seen a steady increase in usage, with over 2,000,000 simultaneous active clients on the network. Despite its popularity, there is limited understanding of the large-scale behavior of Tor's network clients. This paper presents a longitudinal study of the Tor network based on passive analysis of TLS traffic at the Internet uplinks of four large universities, both within and outside the US. We demonstrate how Tor traffic can be identified by properties of its auto-generated certificates and use this knowledge to analyze the characteristics and development of Tor's traffic over more than three years.

## 1 Introduction
Anonymous online communication has become a critical interest for both researchers and the broader Internet community. Tor is the most popular system for this purpose, enabling users to communicate with Internet servers while maintaining their identity and location private. While many conceptual aspects of Tor's communication have been studied, details about its network-level properties, particularly client behavior, remain sparse. Most information about the Tor network comes from public directory information used to maintain the network. However, as Tor intentionally limits this knowledge, there is little information about real-world usage patterns of Tor clients.

By default, Tor uses the SSL/TLS protocol suite to establish encrypted connections between participating nodes, similar to web browsers and email clients. Unlike other services using TLS, Tor does not participate in the global Public Key Infrastructure (PKI) with its trusted Certificate Authority system. Instead, Tor nodes automatically generate X.59 server certificates, which they frequently rotate. However, Tor's current certificate algorithm leaves them identifiable through pattern matching, allowing passive observers of the TLS data stream to distinguish Tor connections from other TLS connections.

In this paper, we leverage this characteristic to present a measurement study of the Tor network using passively collected TLS session information. We (i) identify Tor sessions; (ii) compare the connections against publicly available information from Tor directory authorities; and (iii) use metadata from the TLS protocol layer to infer properties of clients and servers.

Our dataset consists of passively collected information from all outgoing TLS sessions from four university networks, totaling more than 300,000 users, spanning over three years. Of the 138 billion total sessions, Tor contributes more than 40 million.

The remainder of this paper is organized as follows: Section 2 provides an overview of related work. Section 3 summarizes the Tor protocol and introduces our dataset. Section 4 discusses the methodology of our measurement study. Section 5 examines the properties of outgoing Tor connections in our dataset, while Section 6 investigates characteristics of Tor servers. Section 7 discusses our results and concludes the paper.

## 2 Related Work
Several studies have measured different aspects of the Tor infrastructure. In 2009, McCoy et al. [17] measured the Tor network by joining as exit and relay nodes, finding that non-interactive protocols consume a disproportionate amount of bandwidth, substantial Tor communication involves clear-text protocols, and at least one exit node examined user payloads. In 2010, Chaabane et al. [5] conducted a similar measurement using the same approach.

Loesing [14, 15] measured the relay and client sides of the Tor network using information from Tor directory authorities, showing trends from 2006 to 2009. These studies examined the number, bandwidth, and country distribution of relays and clients, and estimated the number of requests transferred by the network. Dhungel et al. [7] measured and examined delays introduced by guard relays using active probing.

While there is extensive work on anonymity in the Tor network [11, 13, 16], updates to Tor routing algorithms [20], and specific details like underground marketplaces [6] and child pornography trafficking [12], to the best of our knowledge, no prior effort has studied the encrypted traffic between Tor nodes.

## 3 Background
We begin by summarizing the background, starting with an overview of Tor's inner workings, focusing on its communication protocol. We first introduce Tor's different node types in Section 3.1, followed by an overview of their communication in Section 3.2. Finally, Section 3.3 introduces the dataset from the ICSI Notary service used throughout this paper.

### 3.1 Tor Node Types
The Tor network consists of different types of nodes. Users run a Tor client to access the Tor network, using a web browser or other local software via a proxy port opened by the Tor client on their machine. Clients connect to relays, which forward their information to other nodes or the Internet.

Information about all currently available relays is publicly available from semi-trusted directory authorities, hardcoded into the Tor client software. At the time of writing, the Tor network has nine directory authorities. After retrieving relay information, clients connect to typically three guard relays chosen through an automated process favoring stable and reliable nodes. Clients keep connecting to the same set of guard relays for about 4 to 8 weeks, protecting against attackers controlling nodes for shorter periods while aiming to correlate timing information [18]. Exit relays forward connections to the public Internet, with the administrator deciding if the node may act in this role.

When a Tor client wants to connect to a host on the Internet, it picks a random path through the Tor network, starting at one of its guard relays. Neighboring relays on that path establish connections, forming circuits that allow clients to reach the destination. The same circuit can be reused by a client for several connections to the same target server, with the reuse time limit varying between 10 minutes and 2 hours depending on the Tor version. Bridges are another class of relays whose IP addresses remain private, allowing clients from censored countries or networks to access the Tor network even if those countries block all Tor relays listed by the public directory authorities. Bridge IP addresses can be obtained via Tor's website, which enforces rate limits and uses captchas.

### 3.2 Tor Node Communication
Tor supports two ways of communication: (i) using the traditional Tor protocol; and (ii) using pluggable transports. When using the traditional Tor protocol [8], Tor nodes connect to each other using a TLS connection. Depending on the Tor protocol version, the way in which a node establishes the TLS connection varies slightly, but all modern versions of Tor present an automatically generated X.509 certificate. The nodes start using the Tor communication protocol after setting up the TLS connection.

The second way of connecting to the Tor network uses pluggable transports, which enable tunneling Tor through other protocols. Tor supports several such transport protocols, including obfs2 and obfs3 (protocol obfuscation layers for TCP protocols), WebSockets, and Meek, which uses domain fronting to hide inside innocuous-looking HTTP requests to CDNs.

For our study, we focus only on Tor communication over TLS, not any pluggable transports.

### 3.3 The ICSI SSL Notary
For our study, we use data from the ICSI SSL Notary [1], which passively collects TLS session and certificate information from seven research and university networks, covering activity of approximately 390,000 users in total. To date, the Notary has recorded more than 138 billion TLS connections and more than 3 million unique certificates. The first data providers started contributing data to the Notary in February 2012. Our data providers run the open-source Bro Network Monitoring System [4, 19] on their gateway links. We provide them with a custom Bro analysis script that collects details from each outgoing SSL connection. For more details about the setup, see [1]. For this paper, we use data from four of our seven data providers, choosing universities with large user populations that have been consistently contributing. Table 1 shows aggregate information about these four providers, covering more than 300,000 users on two continents for a period of more than three years.

| **CertiÔ¨Åcates** | **Connections** | **Site** | **Time** | **Site Users** | **Filtered certs** | **Tor certs** | **Total conns** | **Tor conns** | **Days** |
|-----------------|-----------------|----------|-----------|----------------|--------------------|---------------|-----------------|---------------|----------|
| 90 K            | 2.6 M           | N1       | 1,284     | N              | 50 K               | 1.1 M         | N2              | 1,022         | 853      |
| 170 K           | 1.4 M           | N3       | 1,003     | X1             | 12 K               | 233 K         | Total           | 391 K         | 3.5 M    |
|                 |                 |          |           |                |                    |               | 60 G            | 22 G          | 42 G     |
|                 |                 |          |           |                |                    |               | 3.1 G           | 127 G         | 3.7 M    |
|                 |                 |          |           |                |                    |               | 9.5 M           | 658 K         | 258 K    |
|                 |                 |          |           |                |                    |               | 16 M            | 11 M          | 29 M     |
|                 |                 |          |           |                |                    |               | 1,1 M           | 252 K         | 41 M     |

## 4 Methodology
In this section, we introduce our measurement methodology, including our approach to identifying Tor certificates. We also present the features we consider for each Tor connection.

To study Tor sessions, we need to distinguish traffic between Tor nodes from other TLS communication. Examining Tor's payload and its TLS source code reveals that the certificates generated by Tor servers exhibit unique characteristics. By default, both the issuer and the subject of the certificates use random Common Names consisting of the components `www.`, a random 8 to 20 letter base-32 encoded domain name, and a `.com` or `.net` ending (e.g., `www.4dpbq2neblawq7lbq.net`, `www.iqo3xm6iukfa4qf.com`). The subject and issuer fields are generated independently and thus differ from each other. Neither the subject nor the issuer fields contain additional information commonly found in certificates, such as location or company names.

Table 2 summarizes the features collected by our TLS data collection. Shaded features are used in this study.

| **Collected Features** | **TLS extension value lengths** | **Client SNI (RFC6066)** | **Server ticket lifetime (RFC5077)** | **Timestamp** | **TLS Version** | **Server certiÔ¨Åcates** | **No. client certiÔ¨Åcates** | **Hash(Client & Server session ID)** | **Connection Duration** | **Server IP & port** | **Client available ciphers** | **Hash(Client IP, SNI, Salt)** | **Selected cipher** | **Client EC curves** | **DH parameter size** | **Sent & Received bytes** | **Client & Server ALPN (RFC7301)** | **Client EC point formats** | **Hash(Client IP, Server IP, Salt)** | **Selected EC curve** | **TLS Alerts** |

These properties allow us to identify Tor connections by parsing the X.509 certificates in our dataset and then matching a corresponding regular expression on their subject and issuer fields. Through a set of semi-automated cross-checks, we verified that our dataset contains no non-Tor TLS sessions with certificates matching this heuristic.

One potential pitfall of identifying Tor connections this way stems from TLS session resumption, which skips most of the TLS handshake, including the certificate exchange, for consecutive connections to the same TLS server. However, the Tor specification states that Tor clients and servers must not implement session resumption (Section 2.2 of [8]), thus avoiding this challenge.

## 5 Tor Server Connections
As a first step in our exploration of the Tor network, we compare the passively collected data from our measuring points with publicly available information from the Tor network. The Tor Project releases a set of statistics containing information about the relays and bridges in the network on its CollecTor webpage [12].

### 5.1 Tor Consensus Information
For our subsequent analysis, we use CollecTor information about the Tor network status consensuses. These network status consensuses contain all the relays in the Tor network as agreed upon by the semi-trusted Tor directory authorities (see Section 3.1). Among other data, it includes the IP addresses, ports, and Tor versions of all public relays, as well as the relay flags (such as guard relay, exit relay, stable, fast). This data is available since the end of 2007 with hourly granularity.

**Flags:**
- a: Total
- b: Fast
- c: Stable
- d: Guard Relay
- e: Exit Relay

| **Flags** | **a: Total** | **b: Fast** | **c: Stable** | **d: Guard Relay** | **e: Exit Relay** |
|-----------|--------------|-------------|---------------|--------------------|-------------------|
| 10000     | y            | a           | b             | c                  | d                 |