User: 请回答以下安全问题为什么在散列密码之前将用户名添加到salt？我看到过密码散列的例子，它们是：H（用户名+盐+密码）。添加用户名的目的是什么？有什么目的吗？

Assistant: 不，没有目的。这里是安全剧场。salt的目的是使针对所有哈希密码的并行攻击变得不可行，并破坏彩虹表。在其中添加用户名不会改善这种行为，也不会增加任何其他方面的安全性。它实际上有一点缺点，因为如果您正在更改用户名，您将遇到一些麻烦，并且需要维护一个更复杂和非标准的系统。从纯粹的密码意义上讲，没有任何不利之处。但实际上，更复杂意味着更多的bug。
盐的性质和用户名
你可能会认为用户名本身可能不是公共的，所以将其作为额外的秘密使用也无妨，但事实是，数据库可能已经以明文形式包含了用户名，从而使这一本已可疑的好处失效。人们应该坚持使用预先存在的身份验证技术。但是，让我们看看这些对象中每一个的属性：
盐是：
不是秘密-盐以明文形式存储。
安全-它们是随机生成的，并且是长的。
独特-每个用户的盐都有意不同。
密码是：
秘密——假设他们没有被贴在便签上。
安全-如果不是猎人2。密码应该是好的。
唯一-至少在理想情况下，但并非所有密码都是理想的。
现在将其与用户名进行比较。用户名是：
不是秘密——它们是公开的，或者至少以明文形式存储。
不安全-没有人会考虑选择一个长而复杂的用户名。
不是唯一的-在站点之间共享用户名是安全的。
好盐的特性
那么，盐到底是干什么的呢？一般来说，一种好的盐有三个好处：
它可以防止攻击者同时攻击每个用户的哈希。攻击者再也无法对候选密码进行哈希运算，并对每个条目进行一次性测试。他们被迫重新计算任何给定的密码，以测试每个用户的哈希值。salt提供的这一好处随着不同目标哈希条目数量的增长而线性增长。当然，盐仍然很重要，即使只有一个散列需要保护，正如我在下面解释的那样。
这使得彩虹表变得不可行。彩虹表是一个高度优化的预计算表，它将密码与哈希进行匹配。它们比一个巨大的查找表占用更少的空间，但需要大量的时间来生成（时空权衡）。为了使彩虹表能够工作，给定的密码必须始终解析为相同的哈希。盐打破了这一假设，使彩虹表变得不切实际，因为它们必须为每种可能的盐都有一个新的条目。
它可以防止通过彩虹表进行有针对性的预计算，至少在哈希是真正随机的情况下是这样。攻击者只有在拿到哈希（以及盐）后才能开始攻击。如果salt已经是公共的，但hash不是，那么可以通过为该特定salt生成彩虹表来优化攻击。这就是为什么WPA2是一个如此丑陋的协议的原因之一。salt是ESSID（网络名称），因此有人甚至可以在进行4次握手之前就开始攻击目标的路由器。
那么，当一个值是公共的、不安全的并且可以重复使用时，在哈希之前连接该值可能有什么好处呢？它最终不需要攻击者挖掘更多信息。它不会增加盐的安全性。它不会增加密码的复杂性。没有任何好处。
正确的密码哈希
那么，他们应该做些什么来提高安全性呢？它们可以使用诸如PBKDF2、bcrypt、scrypt或argon2之类的KDF，而不是单个散列。他们可以添加一个pepper，这是一个存储在数据库外部的随机全局值，并添加到密码和salt中，因此有必要窃取pepper来尝试攻击哈希，而不是简单地使用SQLi转储数据库。
编辑：正如一些评论所指出的，有一种人为的场景，将用户名添加到组合中是有益的。这种情况下，实现被严重破坏，salt实际上不是salt，并且用户名是数据库中每个用户唯一唯一或半唯一的值，在这种情况下混合使用用户名总比什么都没有好。但实际上，如果你没有盐，你应该开始使用一个，而不是试图使用用户名。使用真正的安全，当你的用户的安全处于危险线上时，不要半途而废。
*在这种情况下，我将安全剧场定义为实施安全措施的做法，这些措施实际上并没有以任何有意义的方式改善安全，只是为了提供更好的安全假象。