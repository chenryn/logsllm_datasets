All of our experiments were performed on the standard
Android developer phone, the Nexus One, which has a
1GHz ARM core (a Qualcomm QSD 8250), 512MB of
RAM, and 512MB of internal Flash storage. We con-
ducted our experiments with the phone displaying the
home screen and running the normal set of applications
that spawn at start up. We replaced the default “live wall-
paper” with a static image to eliminate its background
CPU load.
All of our benchmarks are measured using the An-
droid Open Source Project’s (AOSP) Android 2.3 (“Gin-
gerbread”) as pulled from the AOSP repository on De-
cember 21st, 2010. Quire is implemented as a series
of patches to this code base. We used an unmodiﬁed
Gingerbread build for “control” measurements and com-
pared that to a build with our Quire features enabled for
“experimental” measurements.
5.2 Microbenchmarks
5.2.1 Signed statements
Our ﬁrst micro benchmark of Quire measures the cost of
creating and verifying statements of varying sizes. To do
this, we had an application generate random byte arrays
3http://developer.android.com/guide/market/billing/billing_best_
practices.html
Figure 5: Statement creation and veriﬁcation time vs
payload size.
of varying sizes from 10 bytes to 8000 bytes and mea-
sured the time to create 1000 signatures of the data, fol-
lowed by 1000 veriﬁcations of the signature. Each set of
measured signatures and veriﬁcations was preceded by a
priming run to remove any ﬁrst-run eﬀects. We then took
an average of the middle 8 out of 10 such runs for each
size. The large number of runs is due to variance intro-
duced by garbage collection within the Authority Man-
ager. Even with this large number of runs, we could not
fully account for this, leading to some jitter in the mea-
sured performance of statement veriﬁcation.
The results in Figure 5 show that statement creation
carries a minimal ﬁxed overhead of 20 microseconds
with an additional cost of 15 microseconds per kilobyte.
Statement veriﬁcation, on the other hand, has a much
higher cost: 556 microseconds ﬁxed and an additional
96 microseconds per kilobyte. This larger cost is primar-
ily due to the context switch and attendant copying over-
head required to ask the Authority Manager to perform
the veriﬁcation. However, with statement veriﬁcation be-
ing a much less frequent occurrence than statement gen-
eration, these performance numbers are well within our
performance targets.
5.2.2
IPC call-chain tracking
Our next micro-benchmark measures the additional cost
of tracking the call chain for an IPC that otherwise per-
forms no computation. We implemented a service with
a pair of methods, of which one uses the Quire IPC ex-
tensions and one does not. These methods both allow us
to pass a byte array of arbitrary size to them. We then
measured the total round trip time needed to make each
of these calls. These results are intended to demonstrate
the slowdown introduced by the Quire IPC extensions in
the worst case of a round trip null operation that takes no
010002000300040005000600070008000payload (bytes)0200400600800100012001400time (µs)Statement VerificationStatement Creationwhich is a slowdown which is well below what would
be noticed by a user.
5.2.3 RPC communication
Statement Depth
1
2
4
8
Time (µs)
770
1045
1912
4576
Table 1: IPC principal to RPC principal resolution time.
The next microbenchmark we performed was deter-
mining the cost of converting from an IPC call-chain into
a serialized form that is meaningful to a remote service.
This includes the IPC overhead in asking the system ser-
vices to perform this conversion.
We found that, even for very long statement chains (of
8 distinct applications), the extra cost of this computation
is a few milliseconds, which is insigniﬁcant compared to
the other costs associated with setting up and maintain-
ing a TLS network connection. From this, we conclude
that Quire RPCs introduce no meaningful overhead be-
yond the costs already present in conducting RPCs over
cryptographically secure connections.
5.3 HTTPS RPC benchmark
To understand the impact of using Quire for calls to re-
mote servers, we performed some simple RPCs using
both Quire and a regular HTTPS connection. We called
a simple echo service that returned a parameter that was
provided to it. This allowed us to easily measure the ef-
fect of payload size on latency. We ran these tests on
a small LAN with a single wireless router and server
plugged into this router, and using the phone’s WiFi an-
tenna for connectivity. Each data point is the mean of 10
runs of 100 trials each, with the highest and lowest times
thrown out prior to taking the mean to remove anomalies.
The results in Figure 8 show that Quire adds an ad-
ditional overhead which averages around 6 ms, with a
maximum of 13.5 ms, and getting smaller as the payload
size increases. This extra latency is small enough that it’s
irrelevant in the face of the latencies experienced across
typical cellular Internet connections. From this we can
conclude that the overhead of Quire for network RPC is
practically insigniﬁcant.
5.4 Analysis
Our micro-benchmarks demonstrate that adding call-
chain tracking can be done without a signiﬁcant perfor-
Figure 6: Roundtrip single step IPC time vs payload size.
Figure 7: Roundtrip IPC time vs call chain length.
action on the receiving end of the IPC method call.
We discarded performance timings for the ﬁrst IPC
call of each run to remove any noise that could have been
caused by previous activity on the system. The results in
Figure 6 were obtained by performing 10 runs of 100 tri-
als each at each size point, with sizes ranging from 0 to
6336 bytes in 64-byte increments.
These results show that the overhead of tracking the
call chain for one hop is around 70 microseconds, which
is a 21% slowdown in the worst case of doing no-op calls.
We also measured the eﬀect of adding more hops into
the call chain. This was done by having a chain of iden-
tical services implementing a service similar to "trace
route". The payload for each method call was a single
integer, representing the number of hops remaining.
The results in Figure 7 show that the overhead of track-
ing the call chain is under 100 microseconds per hop,
which is a 20-25% slowdown in the worst case of calls
which perform no additional work. Even for a call chain
of 10 applications, the overhead is just 1 millisecond,
0100020003000400050006000payload (bytes)02004006008001000time (µs)QuireStock Android0246810call chain length010002000300040005000time (µs)QuireStock AndroidDifferencea user to protect themselves by enforcing blanket restric-
tions on what applications may be installed or what in-
stalled applications may do, but do little to protect the
user from applications that collaborate to leak data or
protect applications from one another.
Saint [29] extends the functionality of the Kirin sys-
tem to allow for runtime inspection of the full system
permission state before launching a given application.
Apex [28] presents another solution for the same prob-
lem where the user is responsible for deﬁning run-time
constraints on top of the existing Android permission
system. Both of these approaches allow users to specify
static policies to shield themselves from malicious ap-
plications, but don’t allow apps to make dynamic policy
decisions.
CRePE [10] presents a solution that attempts to artiﬁ-
cially restrict an application’s permissions based on envi-
ronmental constraints such as location, noise, and time-
of-day. While CRePE considers contextual information
to apply dynamic policy decisions, it does not attempt to
address privilege escalation attacks.
6.1.1 Privilege escalation
XManDroid [6] presents a solution for privilege es-
calation and collusion by restricting communication at
runtime between applications where the communication
could open a path leading to dangerous information ﬂows
based on Chinese Wall-style policies [5] (e.g., forbidding
communication between an application with GPS privi-
leges and an application with Internet access). While this
does protect against some privilege escalation attacks,
and allows for enforcing a more ﬂexible range of poli-
cies, applications may launch denial of service attacks on
other applications (e.g., connecting to an application and
thus preventing it from using its full set of permissions)
and it does not allow the ﬂexibility for an application to
regain privileges which they lost due to communicating
with other applications.
In concurrent work to our own, Felt et al. present a
solution to what they term “permission re-delegation” at-
tacks against deputies on the Android system [15]. With
their “IPC inspection” system, apps that receive IPC re-
quests are poly-instantiated based on the privileges of
their callers, ensuring that the callee has no greater priv-
ileges than the caller. IPC inspection addresses the same
confused deputy attack as Quire’s “security passing” IPC
annotations, however the approaches diﬀer in how inten-
tional deputies are handled. With IPC inspection, the
OS strictly ensures that callees have reduced privileges.
They have no mechanism for a callee to deliberately of-
fer a safe interface to an otherwise dangerous primitive.
Unlike Quire, however, IPC inspection doesn’t require
apps to be recompiled or any other modiﬁcations to be
Figure 8: Network RPC latency in milliseconds.
mance penalty above and beyond that of performing stan-
dard Android IPCs. Additionally, our RPC benchmarks
show that the addition of Quire does not cause a signiﬁ-
cant slowdown relative to standard TLS-encrypted com-
munications as the RPC latency is dominated by the rela-
tively slow speed of an internet connection vs. on-device
communication.
These micro-benchmarks, while useful for demon-
strating the small scale impact of Quire, do not provide
valuable context as to the impact Quire might have on the
Android user experience. However, our prototype adver-
tisement service requires each click on the system to be
annotated and signed and its performance shines a light
on the full system impact of Quire. We tested the im-
pact of Quire on touch event throughput by using the
advertisement system discussed in Section 4 to sign and
verify every click ﬂowing from the OS through a host
app to a simple advertisement app. We observed that the
touch event throughput (which is artiﬁcially capped at
60 events per second by the Android OS) remained un-
changed even when we chose to verify every touch event.
This is obviously not a standard use case (as it simulates
a user spamming 60 clicks per second on an advertise-
ment), however even in this worst case scenario Quire
does not aﬀect the user experience of the device.
6 Related work
6.1 Smart phone platform security
As mobile phone hardware and software increase in com-
plexity the security of the code running on a mobile de-
vices has become a major concern.
The Kirin system [14] and Security-by-Contract [12]
focus on enforcing install time application permissions
within the Android OS and .NET framework respec-
tively. These approaches to mobile phone security allow
010002000300040005000600070008000payload (bytes)0102030405060roundtrip latency (ms)Quireplain httpsadded latencymade to how apps make IPC requests.
6.1.2 Dynamic taint analysis on Android
The TaintDroid [13] and ParanoidAndroid [30] projects
present dynamic taint analysis techniques to preventing
runtime attacks and data leakage. These projects attempt
to tag objects with metadata in order to track information
ﬂow and enable policies based on the path that data has
taken through the system. TaintDroid’s approach to in-
formation ﬂow control is to restrict the transmission of
tainted data to a remote server by monitoring the out-
bound network connections made from the device and
disallowing tainted data to ﬂow along the outbound chan-
nels. The goal of Quire diﬀers from that of taint analysis
in that Quire is focused on providing provenance infor-
mation and preventing the access of sensitive data, rather
than in restricting where data may ﬂow.
The low level approaches used to tag data also diﬀer
between the projects. TaintDroid enforces its taint propa-
gation semantics by instrumenting an application’s DEX
bytecode to tag every variable, pointer, and IPC mes-
sage that ﬂows through the system with a taint value. In
contrast, Quire’s approach requires only the IPC subsys-
tem be modiﬁed with no reliance on instrumented code,
therefore Quire can work with applications that use na-
tive libraries and avoid the overhead imparted by instru-
menting code to propagate taint values.
6.2 Decentralized information ﬂow control
A branch of the information ﬂow control space focuses
on how to provide taint tracking in the presence of mutu-
ally distrusting applications and no centralized authority.
Meyer’s and Liskov’s work on decentralized information
ﬂow control (DIFC) systems [25, 27] was the ﬁrst at-
tempt to solve this problem. Systems like DEFCon [23]
and Asbestos [33] use DIFC mechanisms to dynamically
apply security labels and track the taint of events mov-
ing through a distributed system. These projects and
Quire are similar in that they both rely on process iso-
lation and communication via message passing channels
that label data. However, DEFCon cannot provide its se-
curity guarantees in the presence of deep copying of data
while Quire can survive in an environment where deep
copying is allowed since Quire deﬁnes policy based on
the call chain and ignores the data contained within the
messages forming the call chain. Asbestos avoids the
deep copy problems of DEFCon by tagging data at the
IPC level. While Asbestos and Quire use a similar ap-
proach to data tagging, the tags are used for very dif-
ferent purposes. Asbestos aims to prevent data leaks by
enabling an application to tag its data and disallow a re-
cipient application from leaking information that it re-
ceived over an IPC channel while Quire attempts to pre-
emptively disallow data from being leaked by protecting
the resource itself, rather than allowing the resource to
be accessed then blocking leakage at the taint sink.
6.3 Operating system security
Communication in Quire is closely related to the mech-
anisms used in Taos [38]. Both systems intend to pro-
vide provenance to down stream callees in a communi-
cation chain, however Taos uses expensive digital signa-
tures to secure its communication channels while Quire
uses quoting and inexpensive MACs to accomplish the
same task. This notion of substituting inexpensive cryp-
tographic operations for expensive digital signatures was
also considered as an optimization in practical Byzantine
fault tolerance (PBFT) [7] for situations where network
latency is low and the additional message transmissions
are outweighed by the cost of expensive RSA signatures.
6.4 Trusted platform management
Our use of a central authority for the authentication
of statements within Quire shares some similarities