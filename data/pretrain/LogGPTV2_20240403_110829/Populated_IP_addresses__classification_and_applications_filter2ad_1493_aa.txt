title:Populated IP addresses: classification and applications
author:Chi-Yao Hong and
Fang Yu and
Yinglian Xie
Populated IP Addresses — Classiﬁcation and Applications
∗
PI:EMAIL
Chi-Yao Hong
UIUC
Fang Yu
MSR Silicon Valley
PI:EMAIL
Yinglian Xie
MSR Silicon Valley
PI:EMAIL
ABSTRACT
Populated IP addresses (PIP) — IP addresses that are as-
sociated with a large number of user requests — are im-
portant for online service providers to eﬃciently allocate
resources and to detect attacks. While some PIPs serve
legitimate users, many others are heavily abused by attack-
ers to conduct malicious activities such as scams, phishing,
and malware distribution. Unfortunately, commercial proxy
lists like Quova have a low coverage of PIP addresses and
oﬀer little support for distinguishing good PIPs from abused
ones. In this study, we propose PIPMiner, a fully automated
method to extract and classify PIPs through analyzing ser-
vice logs. Our methods combine machine learning and time
series analysis to distinguish good PIPs from abused ones
with over 99.6% accuracy. When applying the derived PIP
list to several applications, we can identify millions of mali-
cious Windows Live accounts right on the day of their sign-
ups, and detect millions of malicious Hotmail accounts well
before the current detection system captures them.
Categories and Subject Descriptors: C.2.0 [Computer-
Communication Networks]: General – security and protec-
tion
Keywords: Populated IP addresses, proxy, IP blacklist-
ing, spam detection.
1.
INTRODUCTION
Online services such as Web-based email, search, and on-
line social networks are becoming increasingly popular. While
these services have become everyday essentials for billions
of users, they are also heavily abused by attackers for ne-
farious activities such as spamming, phishing, and identity
theft [14, 29].
To limit the damage of these attacks, online service providers
often rely on IP addresses to perform blacklisting and service
throttling [15, 19, 24, 26, 29]. However, IP-based techniques
work eﬀectively on only those IP addresses that are relatively
∗Work was done while interning at MSR Silicon Valley.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
static and related to a few users. For IP addresses that are
associated with a large number of user requests, they must
be treated diﬀerently, as blocking/rate-limiting one such ad-
dress may potentially aﬀect many individual users.
In this paper, we deﬁne IP addresses that are associ-
ated with a large number of user requests as Populated IP
(PIP) addresses.
It is related, but not equivalent to the
traditional concept of proxies, network address translators
(NATs), gateways, or other middleboxes.
On the one hand, not all proxies, NATs, or gateways are
PIP addresses. Some may be very infrequently used and
thus are not of interest to online service providers.
On the other hand, while some PIP addresses may be-
long to proxies or big NATs, many others are not real prox-
ies. Some are dial-up or mobile IPs that have high churn
rates. Others include IP addresses from large services, such
as Facebook that connects to Hotmail to obtain user email
contacts. Additionally, not all PIPs are associated with a
large number of actual users. Although many good PIPs
like enterprise-level proxies are associated with a large num-
ber of actual users, some abused PIPs may be associated
with few real users but a large number of fake user accounts
controlled by attackers. In an extreme case, bad PIPs may
be entirely set up by attackers. For example, we ﬁnd that
>30% of the IP addresses that issue more than 20 sign-up
requests to Windows Live per day are actually controlled by
attackers, with all sign-ups for malicious uses.
Therefore, the knowledge of PIPs and their abused scenar-
ios are critical to service providers and can help them make
informed decisions. For example, a relaxed rate-limiting
threshold should be given to good PIPs, and more strin-
gent rate-limiting policies should be applied to abused or
bad PIPs. In addition, the information of PIPs can be used
in conjunction with other defense mechanisms to detect at-
tacks faster and more conﬁdently.
Classifying PIPs is a challenging task for several reasons.
First, ISPs and network operators consider the size and dis-
tribution of customer populations conﬁdential and rarely
publish their network usage information. Second, some PIP
addresses are dynamic, e.g., those at small coﬀee shops with
user population sizes changing frequently. Third, good PIPs
and bad PIPs can locate next to each other in the IP address
space. For example, attackers can buy or compromise Web
hosting IPs that are right next to the IPs of legitimate ser-
vices. In addition, a good PIP can temporarily be abused.
Due to these challenges, not surprisingly, we ﬁnd that com-
mercial proxy lists oﬀer a low precision in identifying PIPs
329and provide no support for distinguishing good PIPs from
bad ones.
In this paper, we introduce PIPMiner, a fully automated
method to extract and classify PIPs. We leverage machine-
learning techniques to capture the patterns of good and bad
PIPs. In particular, we use support vector machine (SVM),
a state-of-the-art supervised classiﬁcation technique, to train
a robust classiﬁer using a number of salient features ex-
tracted from service logs. These features capture the invari-
ants of PIP properties, ranging from intrinsic population
characteristics to more advanced time series and network
level properties.
PIPMiner uses a small set of PIPs with labels to train
a classiﬁer and applies the classiﬁer to PIPs that do not
have labels. After the classiﬁcation, PIPMiner outputs a
conﬁdence score for each PIP to quantify the abuse like-
lihood, with high scores given to good PIPs,
intermedi-
ate scores given to abused PIPs, and low scores given to
attacker-created PIPs. We implement PIPMiner on top
of DryadLINQ [30], a distributed programming model for
large-scale computing. Using a 240-machine cluster, PIP-
Miner processes a month-long Hotmail user login dataset of
296 GB in only 1.5 hours.
Our primary contribution is the concept of PIPs, which is
diﬀerent from the traditional concept of proxy IP addresses.
The notion of good/bad PIPs is much more relevant in the
security context, as populated IP addresses often become se-
curity loopholes: some service providers just whitelist PIPs
because they cannot distinguish good PIPs from bad ones.
Our second contribution is a method to automatically de-
rive and classify PIPs. We implement PIPMiner and demon-
strate its value through multiple large-scale security appli-
cations. Our key results include:
• PIPMiner is eﬀective.
PIPMiner identiﬁes 1.7
million PIP addresses. Our evaluation demonstrates
that PIPMiner can classify PIP addresses with 99.59%
accuracy and is robust against evasion attacks (§4).
• PIP results can help detect attacks. Our PIP
list helps detect 1.2 million malicious Hotmail accounts
with 98.6% precision, months before the current user
reputation system captures them (§5.2).
• PIP results are applicable across datasets and
can help classify non-PIP traﬃc. When applying
the PIP list derived from the Hotmail log to the Win-
dows Live ID sign-up problem, we detect more than
3 million bad accounts right on the day of their sign-
ups with 97% precision. In particular, over 77% of the
detected bad accounts are registered using non-PIP
addresses (§5.1).
• PIP list is more applicable than proxy list. We
compare our PIP list to the GeoPoint data, a big com-
mercial IP list provided by Quova. Using GeoPoint’s
IP Routing Type (IPRT) ﬁeld, we ﬁnd that 99.9% of
the proxy IPs are not associated with any requests in
our application logs (§2). For the PIP addresses that
are associated with many good requests, Quova’s proxy
list misses a vast majority of them (Appendix B).
Keyword (case insensitive)
Percentage of coverage
PROXY
GATE ∪ GW
NAT
0.0054
0.0049
0.0046
Table 1: The keyword coverage of PIP addresses through
rDNS lookup. The PIP address list is derived by PIPMiner
using the Hotmail user login dataset (§3).
The rest of the paper is organized as follows. We start by
discussing related work and background (§2). We then de-
scribe our overall approach and design details (§3), followed
by a comprehensive performance evaluation of our approach
(§4). We apply the PIP results to two security applications
(§5) before we conclude (§6).
2. RELATED WORK
In this section, we ﬁrst discuss related work in classifying
populated IP addresses (§2.1). Since we use email spam de-
tection as the application of our work, we also brieﬂy review
existing approaches in this ﬁeld (§2.2).
2.1 Populated IP Classiﬁcation
To the best of our knowledge, PIPMiner is the ﬁrst at-
tempt towards automated PIP address classiﬁcation on a
global scale. Existing IP-based detection systems do not
work eﬀectively on PIPs because their characteristics diﬀer
signiﬁcantly from normal IP addresses [28]. Hence, PIPs are
often ignored in previous studies [14, 31]. Meanwhile, our
study suggests that they are heavily exploited by attackers.
PIPMiner focuses on these PIPs and ﬁlls the gap.
Next we review work on global IP addresses, proxies, NATs
and gateways because they could overlap with and are re-
lated to PIP addresses.
Some PIP addresses might be inferred by examining Re-
verse DNS (rDNS) [10] records. An rDNS record maps an IP
address into a domain name, oﬀering a potential way to in-
fer its address properties. For example, the rDNS record
for an IP address 64.12.116.6 corresponds to a domain
name cache-mtc-aa02.proxy.aol.com, which suggests that
the IP address is used as a cache proxy in the AOL net-
work. However, only a fraction of PIP addresses have rDNS
records (62.6% in our experiment), and only 1.49% of them
contain useful keywords for PIP identiﬁcation (Table 1).
Certain services like CoDeen [25] and ToR [9] provide
open access to a set of distributed nodes. These nodes are
PIP candidates because they are accessible by many Inter-
net users. While these IP addresses can be easily collected
from these services, they are merely a small fraction of the
total PIPs. For example, CoDeen has around 300 nodes on
PlanetLab and ToR has fewer than 1000 exit nodes [4]. Our
PIP list (1.7 million IP addresses; §4.1) covers most of these
IPs.
Quova oﬀers the most well-known commercial proxy list [3].
It produces two types of information that may be used to
identify proxy IPs. The ﬁrst is the IP routing type, such
as regional proxy and mobile gateway. The second is the
anonymizer status, which records whether an IP is associ-
ated with a known anonymous proxy. The ﬁrst type includes
more than 300 million proxy IP addresses as of July, 2011,
orders of magnitude more than the second type. However,
we ﬁnd that most of them do not display PIP-like behavior:
330dran et al. proposed novel detection approaches by ana-
lyzing the sending patterns of network traﬃc (e.g., lookup
traﬃc to DNSBL) [22, 23]. The main diﬀerence between
our approach and IP blacklisting is that we not only provide
a list of malicious IP addresses, but also a model to iden-
tify them. The model can help identify new malicious PIPs
over time.
In addition, the results of PIPMiner can be ap-
plied to diﬀerent applications, such as detecting spammers
(§5.2) or identifying malicious sign-ups (§5.1). Therefore, it
is more general than systems that detect spam only (e.g.,
SNARE [12]).
3. SYSTEM DESIGN
Our primary goal is to design an automated method to
identify PIPs and classify them. Towards this goal, we take
a data-driven approach using service logs that are readily
available to all service providers. However, simple history-
based anomaly detection methods often fail to diﬀerentiate
real attacks from normal behavior changes accurately (re-
sults in §4.2). Therefore, we employ a machine learning
based approach that extracts features from training data.
We propose a comprehensive set of features to capture the
invariants of PIP properties, from intrinsic population char-
acteristics to more advanced time series features.
However, real data is often noisy and there is no perfect
training data.
In addition, some PIPs are used by both
legitimate users and attackers, so they display mixed be-
haviors that make our classiﬁcation diﬃcult. To deal with
these issues, we train a non-linear support vector machine
classiﬁer that is highly tolerant of noise in input data. We
represent the classiﬁcation result as a score between −1 and
1 to indicate the likelihood of a PIP address being abused
by attackers.
3.1 System Flow
Figure 2 shows the overall system ﬂow of PIPMiner. The
system reads in logs from one or more online services.
It
ﬁrst selects PIPs and extracts features for each PIP. Then,
PIPMiner labels a subset of data based on application-level
information. For PIPs that have clear labels, PIPMiner uses
them as training data to produce a classiﬁer. Using the
classiﬁer, PIPMiner labels the remaining PIPs and outputs
a score quantifying the likelihood of a PIP being good (a
high value), bad (a low value), or abused (an intermediate
value). The output PIP list with scores will be later used to
combat attacks (§5).
Input Data: The primary online service log used in our
study is a month-long user login trace collected at Hot-
mail in August, 2010. Each entry in the data contains an
anonymized account ID, a source IP address, and a times-
tamp. To help derive application-speciﬁc features, we also
use Hotmail account data, which provides account-level in-
formation such as the registration month of an account.
PIPMiner can potentially be applied to data from other
online services. For example, it can help detect malicious
account creations, malicious postings to online social net-
works, or the abuse usage of free storage services.
It can
also help Web servers ﬁght against denial-of-service attacks
by distinguishing good PIPs from bad ones.
PIP Selection: The ﬁrst step of PIPMiner is to identify
PIP addresses. PIPMiner ﬁrst identiﬁes PIPs by selecting
Figure 1: The number of proxy IP addresses in the Quova’s
GeoPoint dataset (using IP Routing Type ﬁeld for proxy
identiﬁcation) as of July, 2011. The number of IP addresses
with ≥ 10 Windows Live ID sign-up requests in a month is
3 to 4 magnitudes smaller than that of the inactive ones.
over 99% of them are not associated with any user sign-
up request to Windows Live (Figure 1). Our work aims to
complement Quova with an automated PIP detection and
classiﬁcation method.
While there is no existing approach that automatically