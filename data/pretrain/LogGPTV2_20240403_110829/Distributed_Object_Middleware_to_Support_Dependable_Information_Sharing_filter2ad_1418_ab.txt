B
2
B
O
b
e
c
t
s
j
Certificate mgt. &
non−repudiation
m
e
c
h
a
n
s
m
i
j
o
b
e
c
t
i
n
v
o
c
a
t
i
o
n
I
n
t
e
r
−
o
r
g
a
n
s
a
i
t
i
o
n
I
n
t
e
r
−
o
r
g
a
n
s
a
i
t
i
o
n
c
a
l
l
s
Figure 3. B2BObjects augmentation
the object are mediated by the middleware. The intra-
enterprise object invocation mechanism provides an inter-
nal interface to the object that guarantees that state changes
are coordinated with other organisations through the inter-
organisation object invocation mechanism.
Systematic
check-pointing of object state upon installation of a newly-
validated state allows recovery in the event of general fail-
ures and rollback in the event of invalidation. The certiﬁcate
management and non-repudiation services provide: authen-
tication of access to objects; veriﬁcation of signatures to ac-
tions on objects; and logging of evidence of those actions.
In summary, augmentation with B2BObjects provides: con-
nection authentication and management; coordination and
validation of state changes; persistence of both validated ob-
ject state and of the information required to reach validation
decisions; and the logging of non-repudiation evidence.
The careful separation of concerns means that the mid-
dleware can be conﬁgured to different application require-
ments; to suit a variety of interaction styles; and to use dif-
ferent underlying services (for example, to operate in syn-
chronous, deferred synchronous or asynchronous commu-
nication modes).
4. B2BObjects state coordination protocol
This section discusses the state coordination protocol at
the heart of B2BObjects. A discussion of the guarantees
provided by the protocol is followed by the assumptions and
notation that apply to its description. The section concludes
with an informal analysis of protocol vulnerabilities. The
discussion is in terms of a single object but applies just as
well to the use of a composite object to coordinate the states
of multiple objects.
The middleware also uses connection and disconnection
protocols to manage membership of the group of organisa-
tions that have access to an object, and a state update proto-
col to validate update to, as opposed to overwrite of, object
state. The interested reader is referred to [4] for details of
these protocols.
4.1. Protocol guarantees
The protocol regulates overwrites to the state of object
replicas by validating state transitions. A proposed new
state is valid if all parties who share the object have vali-
dated the transition to that state. A proposed state is invalid
if any party has invalidated (vetoed) the transition. The no-
tion of valid state is necessarily self-contained: a state is
valid if it has been unanimously agreed; invalid otherwise.
The guarantees offered by the protocol relate to reach-
ing agreement on a state transition; to the inability to mis-
represent that agreement; and, therefore, to the inability to
misrepresent the validity of object state. The safety guaran-
tee is that invalid state cannot under any circumstances be
imposed on a local object replica and that evidence is gen-
erated to ensure that the actions of honest parties cannot be
misrepresented by dishonest parties. If all parties behave
correctly, liveness is guaranteed despite a bounded number
of temporary failures. The protocol generates evidence to
detect misbehaviour. It is assumed that, if necessary, this
evidence can be used in extra-protocol arbitration to resolve
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:46 UTC from IEEE Xplore.  Restrictions apply. 
disputes. Speciﬁc guarantees are detailed after clarifying
what the protocol does not guarantee.
(cid:15) Amongst the parties who share an object, there is no
protection against the disclosure of a proposed state
change to the object. State must be disclosed to be val-
idated. As illustrated in Figure 1b, trusted agents can
be used to provide conditional state disclosure. An ex-
ample of this type of interaction is given in Section 5.1.
(cid:15) There is no guarantee of termination when parties mis-
behave. The protocol is concerned both with veriﬁ-
cation of the integrity of messages and with the se-
mantic validation of message content (a proposed state
change). This exacerbates the problem of guaranteeing
termination since, for example, we do not deduce any-
thing about the validity of a state change from a failure
to respond to a proposal. The protocol is designed to
generate the evidence necessary for application-level
resolution of the resultant blocking. The provision of
stronger termination guarantees is discussed in Sec-
tion 7.
The speciﬁc guarantees are:
(cid:15) that a state transition proposal is irrefutably bound to
its source and to the decisions of the parties validating
the proposal; and that those decisions cannot be mis-
represented and are irrefutably bound to their source;
(cid:15) that irrefutable evidence of who participated in a pro-
tocol is generated;
(cid:15) that no party can misrepresent the validity of object
state, either by claiming that an invalid (vetoed) state
is valid or that a valid (unanimously agreed) state is
invalid; and
(cid:15) that the protocol is fail-safe: faults or misbehaviour
may result in the abort or blocking of a protocol run
but cannot result in the installation of invalid object
state at a correctly behaving party.
4.2. Assumptions and notation
It is assumed that the communications infrastructure pro-
vides eventual, once-only message delivery. If the under-
lying communications system does not support these se-
mantics then the coordination middleware masks this and
presents the assumed semantics. There is no requirement
for the communications system to order messages. Network
partitions are assumed to heal eventually. Nodes may crash
but it is assumed that they will eventually recover and re-
sume participation in a protocol run. For non-repudiation,
and recovery, protocol messages are held in local persistent
storage at sender and recipient.
To generate non-repudiation evidence, each party has ac-
cess to the following cryptographic primitives [12]: a sig-
nature scheme such that signature igA x by A on data x
is both veriﬁable and unforgeable; a secure (one-way and
collision-resistant) hash function, h; and a secure pseudo-
random sequence generator to generate statistically random
and unpredictable sequences of bits. All parties are assumed
to have the means to verify each other’s signatures. Since
a signature is only valid if it can be asserted that it was not
compromised at the time of use, all signed evidence must
be time-stamped [16].
It is assumed that a trusted time-
stamping service, or services, acceptable to all parties is
available to each party to generate time-stamps. For brevity,
time-stamps are not shown in the protocol description.
The different roles in -party coordination of shared ob-
ject state are distinguished as follows:
 e = fi j i 2 1 : g is the set of participants
k 2  e is a proposer of new state
Rek = fj j j 2 1 :  ad j 6= kg is the set of
recipients of k’s proposal
Gidi is the group identiﬁer of  e as viewed by
i. It is computed when the membership of
 e changes. Inconsistent group identiﬁers
lead to invalidation of a proposal.
The state of an object is uniquely identiﬁed by a tuple:
he; h  ; h Si; where e is a proposal se-
quence number, h  is a hash of a random number, and
h S is a hash of the state to which the tuple refers. All
of these are generated locally by the proposer. The pro-
poser creates a new sequence number by incrementing the
sequence number of the last known coordination request.
Thus, the sequence number of any proposed state is guaran-
teed to be greater than that of any agreed state and of any
coordination request seen by the proposer. The combination
of sequence number and hash of the random number disam-
biguates concurrent proposals and guarantees the unique-
ness of the tuple. The hash of the state binds the tuple to the
state identiﬁed to enable checks on the integrity of the tuple
with respect to that state.
There are three tuples of interest:
 Sidk = he; h k ; h  Ski is the tu-
ple that identiﬁes the new state,  Sk, pro-
posed by k (k is a random number gener-
ated by k)
ASidi is the tuple that identiﬁes the agreed state,
ASi, as viewed by i
CSidi
is the tuple that identiﬁes the current
state, CSi, as viewed by i
To ensure ordered state transitions, the following invariants
should hold during a protocol run:
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:46 UTC from IEEE Xplore.  Restrictions apply. 
1. for Rek: CSidj = ASidj = ASidk (their current
state is the agreed state as viewed by themselves and
by k)
2. for k: CSidk =  Sidk (its current state is the pro-
posed state)
3. for  e:  Sidk:e > ASidi:e (which fol-
lows from generation of e and invariant 1)
4. for  e:  Sidk is unique for all proposals seen
Breaches of these invariants are detected during a protocol
run and lead to invalidation of a proposed state transition.
The following notation is used in addition to the above:
igix is i’s signature on value x
Dk;i is i’s decision on the validity of a state
transition proposed by k. A decision is ac-
cept or reject plus optional diagnostic infor-
mation. Di is used as shorthand for Dk;i if
the proposal to which it relates is unambigu-
ous. (Dk;k is, by deﬁnition, accept.)
k ! Rek :  means k sends message 
to each member of Rek
Rek ! k : j means each member, j, of
Rek sends a message of type  to k
 i is the concatenation of a set of messages,
or parts of messages, of type 
4.3. Protocol description
In essence, the state coordination protocol provides non-
repudiable two-phase commit. However, the messages ex-
changed have a richer semantics than could be derived from
simply signing and counter-signing two-phase commit mes-
sages. The proposer is committed to acceptance of the new
state at initiation of a protocol run. k cannot later unilat-
erally reject the state transition. A state transition is only
rejected if it is vetoed by one or more members of Rek.
The ﬁnal commit message represents more than k’s con-
ﬁrmation of whether to accept or reject the new state. It is
the non-repudiable decision of  e on the validity of the
proposed state transition. The protocol has three steps:
: 
: j
: c
e k ! Rek
ed Rek ! k
ci k ! Rek
where :
 = f;  Sk; igk h g
 = fk; Gidk; ASidk;  Sidkg
j = fej ; igj h ej ; igj h g
ej = fj ; Dj ; Gidj ; CSidj; ASidj ; h  Skg
c = (cid:26) k;  ej ;
 igj h ej ;  igj h  (cid:27)
Message  comprises: a proposal, the proposed new
state and k’s signature on the proposal. A proposal identi-
ﬁes k and  e (to verify a consistent view of the group),
and speciﬁes the proposed state transition from ASk to
 Sk. h k, sent as part of  Sidk, is k’s commitment
to the random authenticator, k, of the group’s decision.
Message j is a receipt from j for the proposal and
a signed decision, Dj, on its validity. Inclusion of Gidj,
CSidj and ASidj permits systematic consistency checks.
The hash h  Sk represents j’s assertion of the integrity