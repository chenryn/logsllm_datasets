Finally, Veriﬁer checks before outputting 0 or 1. The protocol transcript
(when there is no timeline ordering of the four moves) can be simulated
by the Veriﬁer as follows: Compute Move-3, Move-4, Move-2, Move-1, in
that order.
Invisible Designated Conﬁrmer Signatures without Random Oracles
7
3.3 Gentry, et al. [15]’s DCS
The main DCS in [15] on message m is σ0 = (σ∗, φ, c), where
φ = Commit(m, R)
c = Enc(pkC, R)
σ∗ = Sign(skS, (φ, c, pkS))
(1)
Theorem 3. [15] The above DCS is secure provided the signature scheme
Sign is existentially unforgeable against adaptive chosen message attack-
ers, the commitment scheme Commit is secure (computationally binding
and statistically hiding with zero-knowledge proof of knowledge for com-
mitted value secure against cheating veriﬁer), and the public-key encryp-
tion scheme Enc is IND-CCA2 secure.
[15] presented a particularly eﬃcient instantiation where Pedersen’s com-
mitment, the Cramer-Shoup encryption, and an arbitrary secure signature
is used:
φ = gmhR ∈ QRn2
c = (u1, u2, u3, u4) = (gr
1, gr
2, dr
3gR
0 , (d1dα
2 )r) ∈ QR4
n2
where α = Hash(u1, u2, u3), order(h) = n, g0 = n + 1. The conﬁrmer
public key pkC consists of d1 = gx1
1. Its private
key is skC = (x1, x2, y1, y2, z). Note the conﬁrmer can compute the
partial discrete logarithm with base g0, and therefore can decrypt R.
2 , d2 = gy1
2 , d3 = gz
1 gx2
1 gy2
4 Constructing DCS
We modify Gentry, et al. [15]’s DCS, reviewed in Section 3.3, to upgrade it
with invisibility. The modiﬁcation is simple: merely add more parameters
to the input of the public-key encryption.
Invisible DCS: DCSGMR+:
Key Generation: CKGS(1λs) 7→ (skS, pkS) and CKGC(1λs) 7→
(skC, pkC). (skS, pkS) corresponds to an arbitrary signature scheme which
is existentially unforgeable against adaptive chose message attackers with-
out random oracles. For example, the Cramer-Shoup signature [12], Boneh,
et al. [5], Wei, et al. [23].
pkC = (d1 = gx1
1 gx2
skC = (x1, x2, y1, y2, z1, z2),
2 , d2 = gy1
1 gz2
2 , d3 = gz1
1 gy2
2 , n, g1, g2, g, h, g0)
8
Victor K. Wei
where g1, g2, g, h, g0 ∈ QRn2 are fairly generated, order(g1) = order(g2)
= order(g) = np0q0, order(h) = order(g0) = n, n = pq, (2p0 + 1)(2q0 + 1)
with p, q, p0, q0 being primes. For example, g0 = n + 1.
Signing: CSig(m, skS, pkS, pkC) 7→ σ. Select random R ∈ Zn, ¯r ∈
[1, n2/4], output σ = (σ1, σ2, σ3) where
σ1 = gmhR, σ2 = Enc(pkC, R) = (u1, u2, u3, u4),
σ3 = Sign(pkS, (σ1, σ2)), u1 = g¯r
1,
α = ¯H(u1, u2, u3, pkS, pkC, σ1, m)
u2 = g¯r
2, u3 = d¯r
3g ¯R
0 , v = (d1dα
2 )¯r where
(2)
(3)
(4)
(5)
Conﬁrmation and disavowal: (CV erC(skC), CV erV )(m, σ, pkS,
pkC, param): Note σ = (σ1, σ2 = (u1, u2, u3, v), σ3). CverC checks
σ3 is a valid signature by signer on (σ1, σ2), checks v = ux1+y1α
ux2+y2α
,
then computes R equals the partial discrete logarithm of u3u−z1
2
2 with
base g0, checks u3u−z1
0 and gmhR = φ. If all pass, send signal
to conﬁrm. Else, send signal to disavow.
1 u−z2
1 u−z2
2 = gR
1
To conﬁrm, CV erC proves to CV erC of the following in concurrent
zero-knowledge:
ConZKP{(x1, x2, y1, y2, z1, z2, R) : v = ux1+y1α
∧ u3 = uz1
2 ∧ d2 = gy1
1 gy2
2 } (6)
where α is computed according to Eq. (5). We instantiate (6) using a
typical four-move concurrent zero-knowledge protocol in Appendix A.
ux2+y2α
2
2 ∧ d3 = gz1
0 ∧ d1 = gx1
1 gx2
1 uz2
1 gz2
2 gR
1
To disavow: The DCS is automatically disavowed if σ3 is not a sig-
nature by skS on (σ1, σ2). Else conduct the following concurrent zero-
knowledge proof:
1 gy2
1 gx2
2 ∧ d2 = gy1
ConZKP{(x1, x2, y1, y2, z1, z2, R, p0, q0) :
2 ∧ d3 = gz1
1 gz2
2
1 uz2
3 uz1
2 gR
∨ gmhR 6= φ ∨ u−1
d1 = gx1
∧ (2p0 + 1)(2q0 + 1) = n ∧ (u−1
∧ [v 6= ux1+y1α
0 )p0q0 = 1
3 uz1
1 uz2
A detailed instantiation of (7) is given in Appendix A.
This ends the speciﬁcation of Protocol DCSSDH. Below is the security
0 6= 1]
ux2+y2α
2
2 gR
(7)
1
reduction theorem, whose proof is sketched in Appendix B.
Theorem 4. The designated conﬁrmer signature DCSGMR+ is secure
provided the signature scheme Sign is existentially unforgeable against
adaptive chosen message attackers, the DDH (decision Diﬃe-Hellman)
assumption holds in QRn2, and ¯H is a collision-resistant hash function.
Invisible Designated Conﬁrmer Signatures without Random Oracles
9
The theorem implies that DCSGMR+ is secure without random oracles
provided the latter two conditions also hold without random oracles. By
choosing a signature secure without random oracles, DCSGMR+ is secure
without random oracles.
5 Signature transformation attacks
We apply [8]’s signature transformation attacks on [15, 16]’s DCS’s. The
attack consequence is to cryptanalyze the invisibility of the signatures.
However, [15, 16] did not claim this security notion, our attacks in this
Section are ”beyond their model” attacks, meant to establish their DCS’s
indeed do not have the invisibility in our model. Their results remain
secure in their own model.
5.1 Signature transformation attack on Gentry, et al. [15]
The DCS scheme was reviewed in Section 3.3 and Eq. (1). The attacker
needs the following attack hypotheses:
1. Knowing the private key skS0 of a signer S0 6= S.
2. Query access to a conﬁrmation oracle which, upon common inputs
including a message ¯m, a signer public key pkS, and a putative DCS
¯σ0, will conﬁrm or disavow the DCS ¯σ0. Except when the queried tuple
( ¯m, pkS0, ¯σ0), ¯σ0 = (¯σ∗, ¯φ, ¯c), shares the same m, or the same pkS, or
the same σ∗, or the same φ as the attacker’s target tuple. Note queries
with the same ¯c = c are allowed.
Attack consequence and procedure: Given a (message, signer private
key, putative DCS) tuple, denoted (m, pkS, σ0), our attacker computes
the validity of the putative DCS (i.e. distinguishes a valid DCS from a
non-valid simulation DCS) and consequently cracks the security of the
DCS scheme by cracking its transcript simulatability [15]. It does so by
interacting once with the conﬁrmation oracle with the following trans-
formed tuple: ( ¯m, pkS0, ¯σ0), ¯σ0 = (¯σ∗, ¯φ, ¯c), where ¯m = m + 1, pkS0
is from the attack hypotheses, and ¯c = c, ¯φ = φg (which corresponds
to ¯r = r), and ¯σ∗ = Sign(skS0, ( ¯φ, ¯c, pkS0)). The transformed DCS has
the same validity/invalidity as the pre-transformation DCS. Interacting
with the conﬁrmation oracle yields the validity/invalidity of the trans-
formed DCS, and consequently the validity/invalidity of the original pre-
transformation DCS.
10
Victor K. Wei
Attack generalization. Replacing Equation (1) by φ = gH(m,pkS ,pkC ,c)hr
is not a suﬃcient defense as we can achieve the same attack using
¯φ = φgH( ¯m,pkS ,pkC ,c)−H(m,pkS ,pkC ,c)
Other DCS schemes that use public-key encryption as a black-box build-
ing block, such as those in [16, 15] and elsewhere, may also risk signature
transformation attacks. In fact, we demonstrate a signature transforma-
tion attack on [16] subsequently.
Attack mitigation: Follow Section 4 by adding more input parameters
to the hash α such as in Eq. (5). Another mitigation is to encrypt more
parameters, e.g. by changing c in Eq. (5) to c = Enc(pkC, (R, φ, m, pkS,
pkC). This is a more bandwidth-expensive remedy than that in Section
4). The tradeoﬀ is that its reductionist security proof is somewhat easier.
Our results suggest that other schemes that use public-key encryption
as a black-box building block, such as those in [16, 15] and elsewhere,
should also use our easy mitigation technique: Open the black box slightly
and add more parameters to the hash input or to the input of other kinds
of tag generating mechanisms [1].
5.2 Signature transformation attack on Goldwasser, et al. [16]
. Review. We focus on the ﬁrst concrete DCS in [16] which is based on
the Cramer-Shoup signature [12] and the Cramer-Shoup encryption [11].
The Cramer-Shoup signature on message m is σ0 = (e, y0, y),
ye = xhH(x0)
x0 = (y0)e0
h−H(m)
where the signer’s public key is pkS = (n, h, x, e0), n is a product of two
primes, e0 and e0 are distinct primes, h and x are random. The Goldwasser,
et al.’s DCS is σ = (σ1 = e, σ2 = y0, σ3 = Enc(pkC, y) ).
Attack Hypotheses. The attacker needs the following hypotheses:
1. Knowing the private key skS of the signer.
2. Query access to a conﬁrmation oracle which, upon common inputs
including a message ¯m, a signer public key pkS0, and a putative DCS
¯σ, will conﬁrm or disavow the DCS ¯σ. Except when the queried tuple
( ¯m, pkS0, ¯σ), ¯σ = (¯e, ¯y0, ¯σ3), shares the same m, or the same pkS, or
the same σ1, or the same σ2 as the attacker’s target tuple. Queries
with the same σ3 are allowed.
Invisible Designated Conﬁrmer Signatures without Random Oracles
11
3. The signature veriﬁcation protocol does not check e is a prime. It only
checks that it is within a certain range. This is a common practice in
using the Cramer-Shoup encryption, e.g. [12, 16], to keep computa-
tional complexities low.
Attack consequence and procedure. The attacker can compute the va-
lidity/invalidity of a given putative DCS by interacting once with the con-
ﬁrmation oracle with the following transformed putative DCS: ¯σ = (¯e, ¯y0,
σ3) on a new arbitrary message ¯m for a new signer public key ¯pkS = (n, ¯h,
¯x, e0) where ¯x = ye, ¯h = y, ¯x0 = (y0)e0¯h−H( ¯m), ¯e = e+H(¯x0). It is mechan-
ical to verify that the transformed DCS has the same validity/invalidity
as the pre-transformation DCS. Interacting with the conﬁrmation oracle
yields the validity/invalidity of the transformed DCS, and consequently
the validity/invalidity of the original pre-transformation DCS.
Therefore, an adversary A can distinguish a valid signature from an
invalid one by interacting with the conﬁrmation oracle. However, [16] does
not claim the indistinguishability between valid and invalid signatures,
called the invisibility of the signature in [20, 8]. Our attack is beyond
their security model. Their DCS remains secure in their own model.
Mitigation. Nevertheless, we suggest to include more parameters in the
has inputs wherever possible to defend against signature transformation
and potentially other attacks. For example, letting x0 = (y0)e0
h−H(m,pkS ,e,y0)
or having even more parameters included in the hash inputs can con-
tribute to enhanced security.