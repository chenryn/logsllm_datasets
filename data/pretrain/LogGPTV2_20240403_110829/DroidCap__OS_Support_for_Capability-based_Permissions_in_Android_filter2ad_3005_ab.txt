Linux Security Module to revoke Internet access to restrict
data sharing automatically. Weir [45] realizes decentralized
IFC using lazy poly-instantiation and ﬂoating labels of app
components to separate memory and storage of different se-
curity contexts and allows data owners to set secrecy policies
and control the export of their data to the network using (web)
domain declassiﬁcation. Maxoid [70] allows data owner app
to securely delegate operations on ﬁles and ContentProviders
to data processing apps, which operate on a custom view
of the owner’s state through union ﬁle systems/copy-on-write
SQL proxy and taint tracking. It also prevents delegates from
leaking secrets to other apps or the networks by revoking the
necessary rights from the delegate’s app instance. Jia et al. [31]
permit programmers to specify a DIFC policy via (ﬂoating)
labels on apps and app components. The system enforces the
DIFC policy at runtime on inter-component communication
between apps and within apps (assuming components run in
separate processes).
Privilege Separation: Another active area of Android secu-
rity research is focused on compartmentalization of apps. The
predominant use-case is advertisement libraries, which have
repeatedly been shown [25], [12], [21], [62], [61] to cause their
host apps to be over-privileged or even to exploit their host
app’s privileges to invade the user’s privacy. Also WebViews
increase an app’s attack surface by allowing untrusted web
content to access device-local resources [41], [16], [39], [32],
[44]. The general approach to privilege separation is to execute
the library or WebView in a distinct sandbox with different
UID and permissions than the host app. AdDroid [52], Ad-
Split [59], CompARTist [29], and AFrame [71] implement this
approach for ad libs; WIRE [18] privilege-separates WebViews
this way; and Layercake [56] supports WebViews and ad libs.
In contrast, we leverage in DROIDCAP built-in features for
compartmentalizing apps (e.g., process manifest attributes of
components) introduce Binder capabilities for efﬁcient, least-
privilege privilege-separation of those compartments.
Instead of compartmentalizing apps, both Compac [64]
and Flexdroid [57] establish in-app privilege separation by
supplying the permission checkpoints in the system services
with the call stack of the callee, which allow those enforcement
points to distinguish call-sites within apps. Other works [10],
[69], [30] use inlined reference monitors (IRM) to establish
in-app privilege separation. The app’s code is rewritten to add
reference monitoring code [10], [69] or redirect permission-
3
sensitive calls to an external monitor [30] that acts as a ﬁltering
proxy. However, reliability of in-app privilege separation is
questionable [27]. A recent alternative to inlining the reference
monitor is app virtualization [9], [11], which turns the IRM
concept
inside out by executing the monitored app as a
sandboxed child process of the monitor app (e.g., an isolated
process), which we also pick up again in Section VI.
B. Object Capabilities
A capability is an unforgeable, tamper-proof, and system-
maintained reference to a (system-maintained) object together
with the capability holder’s access rights on that object [19].
Historically, this has been used to control access to memory
by wrapping memory pointers in capabilities [23], and in more
modern systems (like [58], [36], [63]) capabilities can also
reference (or name) resources that are represented as objects
(e.g., ﬁles or event handles). In a capability-based system,
processes can only reference objects for which they have a
capability, and processes should only gain capabilities through
authorized interfaces that release capabilities only to processes
authorized to hold them. By design, capabilities can be easily
passed between processes or protection domains, but capability
transfer should be constrained by a reference monitor [23].
A number of systems have adopted capabilities [68], [37],
[58], [28], [43], [33], [63], [66], [20], [65], [49], [67], [34],
[24]. A few concepts from these related works should be high-
lighted here for the subsequent discussion of our DROIDCAP
design. For instance, those systems build on the principle of
protection domains that are deﬁned by the capabilities a pro-
cess holds. The isolation between the domains can be breached
in a controlled way, by allowing domains to call operations
in other domains and passing sealed capabilities [42] to the
operation to entitle it to make securely use of the caller’s
privileges. Many of the systems build on microkernels, whose
design is amenable to capabilities because microkernels build
on the idea of compartmentalization and message passing.
Most systems manage capabilities in kernel protected locations
and operations on capabilities, including creation, are only pos-
sible through system interfaces. A few systems use a directory,
which is a table of mappings between a capability name and
the actual capability, to allow domains to discover and request
capabilities. Directories can enforce security policies about
which domain can request which capability and they can also
ease the task of (selectively) revoking capabilities [55] when
the directory is the only way for sharing capabilities.
Closest to our work is Capsicum [65], [20], which intro-
duces a lightweight capability framework for BSD [65] and
Linux [20]. Capsicum naturally differs from our solution in the
technical realization considering the focus on different systems
but forms a complementary building block for our DROIDCAP
(see Section IV). Capsicum provides new kernel primitives for
putting processes into a capability-mode, allowing developers
to more easily adopt least-privilege operation of their appli-
cations by compartmentalizing monolithic applications into
logical applications. Processes in capability mode are denied
access to global namespaces, have restricted syscalls, and can
only access ﬁle-system objects for which they hold a capability.
File descriptors, which by design have some properties of
capabilities (i.e., unforgeable, delegable tokens of authority
for ﬁle objects) are extended with more ﬁne-grained access
rights. Moreover, processes in capability mode receive a UNIX
domain socket for IPC between host application and sandbox.
C. Motivation for Capabilities on Android
Capabilities have been historically considered as a path
to building secure, fail-safe, and ﬂexible protection mod-
els [38]. This argument has recently been picked up for modern
software development [65] and in particular the beneﬁts of
capabilities for supporting app developers in realizing least-
privilege and compartmentalized apps.
Unfortunately, Android’s default security architecture sup-
ports app compartmentalization only poorly. Efﬁcient app
compartmentalization requires the ability to transfer access
rights between processes via a controlled channel, allowing
those processes to conceptually more easily execute with least-
privileges and to efﬁciently establish (and later delete) new
protection domains [37] that are deﬁned by the delegated
rights. In Android, privileges are bound to the UID as ambient
authority; thus, the creation of new protection domains neces-
sarily entails creating new Linux UIDs and conﬁguring their
privileges at middleware and kernel level (i.e., permissions,
DAC, and SELinux types and policies). UID-based DAC was
designed to protect users from each other and MAC enforces
static, administrator-managed system policies, i.e., neither was
intended to support app compartmentalization efﬁciently. Re-
lated works that use process and ﬁle attributes to enforce
information ﬂow policies support per-process privileges and
privilege delegation along information ﬂows, but have not been
designed for general access control to system services, other
apps, or ﬁle-system objects. We discuss those solutions in more
detail in Section VI. A capability-based system as the foun-
dation would instead satisfy the requirements for efﬁcient app
compartmentalization by developers and for ﬂexibly delegating
access rights between protection domains more ﬁttingly.
When comparing the underlying concepts of prior ca-
pability systems with Android’s system design, one notices
remarkable congruence between those two: First, Android
applies a microkernel-like design in user-space where all apps
and services run in their own processes that are connected via
Binder IPC message passing. Second, apps that would like to
make use of system resources have to call methods provided
by the system apps/services. Those IPC-based RPC implicitly
form a switch of the protection domain from app to a system
domain that is privileged enough to access system resources
on the app’s behalf. In contrast to a capability system, no
access rights are being passed on from app to service on
those RPC. Third, Binder IPC references to remote processes
(see next Section IV) are, just like ﬁle descriptors, already a
form of kernel-managed capability that can also be passed on
via Binder IPC and that gives their holders the authority to
send IPC messages to the referenced remote process, although
any more ﬁne-grained privilege enforcement is deferred to
the called processes (see permission check in Figure 1). To
discover and retrieve Binder references, the Binder user-space
framework has a central service, ContextManager, which is
akin to a directory service in capability systems. Fourth,
Android’s design intends to give app developers the ability to
delegate permissions to other apps, e.g., URI permissions and
Pending Intents, and to compartmentalize apps, i.e., executing
app components in separate processes and creating isolated
4
processes. However, this delegation of permissions is on a
per UID basis and is realized by updating centrally managed
access control lists in the app management (i.e., AMS). App
components in separate processes either still execute under
their host apps’ UID (ambient authority) or, in case of isolated
processes, with no privileges at all and without the option for
ﬁne-grained delegation of privileges.
The bottom line is that Android’s design incorporates many
of the concepts from capability systems, however, does not
form a capability system per se by upholding a UID-centered
ambient authority. This prevents app and system developers
from efﬁciently compartmentalizing their code and adopting
least-privilege. This motivated us to build DROIDCAP, a
retroﬁtting of Android’s basic representation and management
of permissions that shifts Android closer to an object-capability
system. In DROIDCAP permissions are delegable, per-process
Binder capabilities and no ambient authority exists.
IV. DROIDCAP
We start by stating our design objectives. We then de-
scribe the stock Binder framework and afterward explain how
DROIDCAP extends stock Binder to realize capabilities and
how we integrate them into Android to change the very way
in which permissions are being represented and managed. We
conclude this section with case studies for using capabilities.
A. Design Objectives
Since we deploy capability-based permissions, several ob-
jectives need to be fulﬁlled to ensure security and efﬁciency:
O1. Unforgeable, communicable capabilities: Unforgeability
has to hold. Otherwise, processes could easily escalate their
privileges by creating unauthorized capabilities. Capabilities
have to be represented in a form that can be efﬁciently passed
on between processes of the same or different apps.
O2. Revocable capabilities: The system needs to offer the
means to revoke access, either by deleting the capability or
clearing the associated access rights.
O3. Controlled creation and delegation: Capabilities should
only be created by authorized system components and only be
given to processes that are authorized to hold them. Since ca-
pabilities in DROIDCAP represent Android permissions, those
system components can be the application framework services
responsible for managing permissions. Further, processes must
only be able to re-delegate capabilities over a system controlled
channel, which is constrained by a robust reference monitor
that prevents re-delegations that would result
in processes
holding unauthorized access rights.
O4. Efﬁcient creation of protection domains: The system
should support app developers in easily creating new protection
domains, i.e., new processes with custom sets of permissions.
O5. Backward compatibility: Capabilities should integrate
into app’s life cycle, mimicking how Android’s permissions
are requested, granted, delegated, revoked, and enforced at
runtime. Instead of requiring a wholesale adaption of apps to
DROIDCAP, app developers should be provided with a path to
gradually adopting capability-based app compartmentalization.
Fig. 2.
Inter-app communication with Binder IPC.
B. Overview of Binder IPC Framework
Binder forms the primary IPC mechanism for any kind of
IPC in Android. In general, the Binder framework serves two
goals: (i) invoking methods across process boundaries; (ii) se-
curely conveying caller’s identity to the callee, facilitating a
high-level access control based on permissions (see Section II).
The Binder framework consists of three main components
(see Figure 2): The Binder driver, a userspace library (lib-
binder), and APIs of the application framework that build
on top of libbinder. An optional component
is the AIDL
compiler, which generates Stub and Proxy Java classes from
interface deﬁnitions written in the Android Interface Deﬁnition
Language (AIDL) to provide app developers with a high-level
abstraction of the low-level Binder operations. In the following,
we explain the components of direct relevance to DROIDCAP.
1) Binder Driver and Binder Transactions: The Binder
driver mediates all Binder IPC interactions facilitating the
client-server architecture. Processes that use Binder IPC have
to ﬁrst register with the driver. Server processes register looper
threads that block waiting for requests to handle, while clients
register threads that are used to initiate IPC requests. All
communication between threads and the driver are ioctl system
calls that carry transaction data including targeted server and
payload. The driver copies the transaction data from the client’s
thread-local storage (TLS) to the server’s TLS and similarly
transfer any result back. When a process registers itself, the
driver creates a particular data structure for that process, called
binder proc, and stores all information related to the process’
Binder operations inside this data structure. This binder proc
data structure is also called a process’ Binder context.
To mediate IPC transactions, the driver introduces a level
of reference indirection by issuing Binder handles to clients.
Every handle designates a server’s Binder service. The Binder
handle is a 32-bit integer value that is unique per process and
identiﬁes a kernel-level data structure, called Binder reference
(binder ref ), stored in client process’ Binder context. Each
Binder reference maintains a one-to-one mapping to a server’s
data structure, called Binder node (binder node) stored in
server’s Binder context. The Binder node keeps a pointer to an
object stored in server process’ address space, called Binder
object, which wraps the service that is callable via Binder
5
ProxyManagerservice.aidlAIDLcompilerhandle (int)Read methodparametersInvokemethodLooperthreadlibbinder.solibbinder.souserspacekernelIPCthreadTLSTLSWrite method parametersSerializetrans. datainto TLSLocate Binder ref. & nodeStubServicebinder objectInvokemethodRead data from TLSIssue ioctl syscallInvoke stubmethodClient processServer processhandle (int)binder_node: *binder_obj.Select aLooper threadCopy data toLooper’s TLSbinder_proc: binder_nodebinder_refbinder_proc (server)binder_proc (client)  Binder driverIssue ioctl syscallIPC. A process can have precisely one Binder handle (or
binder ref ) for each unique Binder object (or binder node).
Each process can be both a client to many servers and a server
to many Binder services. Therefore, its Binder context has to
hold a tree of Binder references and a tree for Binder nodes.
When a process dies, its Binder context is deleted.
they only exist
By design, Binder allows Binder objects and handles to
be passed on to other processes. The Binder driver detects
transaction data that carries Binder objects as payload and
creates a Binder reference in the recipient’s Binder context
for each transferred Binder object and passes the recipient
the corresponding Binder handle, which can then be used
by the recipient to invoke the referenced Binder object. This
design preserves the unique identity of Binder objects such
that
in servers’ address spaces. The same
behavior takes place when transferring Binder handles, where
the recipient receives a handle for a new Binder reference that
points to the same Binder object as the transferred Binder
handle. This guarantees that each process has its own set of
references. Additionally, transferring Binder handles by means
other than Binder IPC renders the handles meaningless as