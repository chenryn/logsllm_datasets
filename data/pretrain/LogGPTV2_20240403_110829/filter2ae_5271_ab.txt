      2.PA_PAC_REQUEST
      这个是启用PAC支持的扩展。PAC(Privilege Attribute Certificate)并不在原生的kerberos里面，是微软引进的扩展。PAC包含在AS_REQ的响应body(AS_REP)。这里的value对应的是include=true或者include=false(KDC根据include的值来判断返回的票据中是否携带PAC)。
    REQ_BODY 
      1.cname
      PrincipalName 类型。PrincipalName包含type和value。
      KRB_NT_PRINCIPAL = 1 means just the name of the principal 如daizhibin
      KRB_NT_SRV_INST = 2 service and other unique instance (krbtgt) 如krbtgt，cifs
      KRB_NT_ENTERPRISE_PRINCIPAL = 10 如 PI:EMAIL
      在AS_REQ里面cname 是请求的用户,这个用户名存在和不存在，返回的包有差异，可以用于枚举域内用户名。
      2.sname
      PrincipalName 类型，在AS_REQ里面sname是krbtgt，类型是KRB_NT_SRV_INST
      3.realm 域名
      4.from 发送时间
      5.till 到期时间，rubeus和kekeo都是20370913024805Z，这个可以作为特征来检测工具。
      6.nonce
      随机生成的一个数kekeo/mimikatz nonce是12381973，rubeus nonce是1818848256，这个也可以用来作为特征检测工具。
      7.etype
      加密类型
    这个地方要注意的是如果在配置里面选择用hash(不是plaintext)的话，hash的加密类型，要跟etype一样。因为KDC是按照etype类型选择用户对应加密方式的hash，如果是选择明文(plaintext)，那么client 会按照etype里面的加密方式将明文加密成hash
**分析AS-REP的数据包**
`AS-REP`：Client发送`AS_REQ`，请求凭据是用户 hash加密的时间戳。请求凭据放在PA_DATA里面。
**当KDC中的AS认证服务收到后，在AS服务器中有用户hash，使用用户hash进行解密，获得时间戳** ，如果 **解密成功，并且时间戳在五分钟之内**
，那么 **预认证通过** 。接着AS认证服务将会向Client发送响应包，响应包中包括 **krbtgt用户的NTML hash加密后的TGT票据**
以及 **用户NTML Hash加密的Login Session key和其他信息** 。
**ticket中的enc-part是由krbtgt的密码hash加密生成的。如果我们拥有krbtgt的hash，便可以自制ticket，发起黄金票据攻击**
**Login Session Key使用用户NTML Hash加密，作用是用于是用于确保客户端和KDC下一阶段之间通信安全，作为下一阶段的认证密钥**
    在这一阶段，Client与KDC之间的交互在于AS认证服务，主要是为了获得TGT认证票据，以及Login Session Key，经过该阶段后，Client将会使用自身密码的NTML hash解密Login Session Key得到原始的Login Session Key。然后它会在本地缓存TGT票据和原始Login Session Key
## TGS_REQ&TGS_REP
先前提到两个问题，第二个问题
    （2）Client如何获取ST？
        Client与TGS之间认证使用TGS_REQ&TGS_REP模块
Client在拿到`TGT`和`Login Session Key`之后，下一步的认证交互在于 **KDC中的TGS认证服务** ，主要目的是为了获取
**`ST服务票据`** ，因为当Client需要访问某服务器中的某服务时，需要 **"门票"** \-- **ST服务票据**
这一阶段，微软引进了两个扩展`S4U2SELF`和`S4U2PROXY`。
**TGS-REQ数据包分析**
该数据包中的主要内容为：`客户端信息，Authenticator(Login Session Key加密的时间戳)、TGT认证权证(padata下ap-req下的ticket)以及访问的服务名`等。
`padata`部分：
在`padata`中有很重要的一部分叫做`AP-REQ`，这是`TGS-REQ`中必须有的数据， **这部分会携带AS-REP里面获取到的TGT票据** ，
**KDC检验TGT票据，如果票据正确，返回ST票据** 。
`TGS-REQ`请求包中的`authenticator`就是`AS-REP`响应包返回的`Login Session key`加密的时间戳
`req-body`部分：
在`req-body`中
    padding:0
    kdc-options:用于与KDC约定一些选项设置
    realm:域名
    sname:这里是要请求的服务
    till:到期时间
        rebeus和kekeo都是20370913024805Z，可用于作为特征值检验用
    nonce:随机生成数 
        kekeo/mimikatz的nonce为12381973，rubeus的nonce为1818848256,可用于作为特征值检验    用
    etype:加密类型
**分析TGS-REP数据包**
`TGS-REP`：当TGS收到请求后，将会检查自身是否存在客户端所请求的服务，如果服务存在， **通过krbtgt用户的NTML
hash解密TGT并且得到Login Session Key** ，通过 **Login Session Key解密Authenticator** 。
这一系列解密成功的话， **将会验证对方的身份，验证时间戳是否在范围内，并且检查TG中的时间戳是否过期，且原始地址是否和TGT中保存的地址相同**
完成认证后，TGS生成 **ST票据（包括客户端信息和原始Server Session key，整个ST服务票据使用该服务的NTML hash加密**
以及一个 **AS-REP返回的Login-Session-Key加密的Server Session Key** 。这两个将在响应包中发送给Client
PS:在这一步中，不论用户是否有权限访问服务，只要TGT解密无误，都将返回ST服务票据。
**任何一个用户，只要hash正确，就可以请求域内任何一个服务的票据**
## ST票据通过认证访问服务
**使用ST票据通过认证访问服务**
需要强调的是，这里需要使用 **双向验证** ，因为实际情况中，需要客户端和服务器互相验证
（1）服务端验证客户端：防止非法用户操作
（2）客户端验证服务端：防止误入恶意服务
PS: **PAC并不是所有服务都开启的，这需要配置验证KDC PAC
签名。没有验证PAC，可能会导致白银票据攻击。因为开启PAC后，就算攻击者拥有用户hash，能制作ST票据后，无法通过PAC验证，还是无法访问服务** 。
# 后话
Kerberos的攻击有如下：
参考文章：