because Facebook encourages users to register their numbers by
continuously showing a reminder dialog, as shown in Figure 7.
Attack and negative impacts.
By leveraging the SMS spoof-
ing threat, the attacker can hijack the victim’s Facebook account
via SMS without the victim’s awareness. Since there is no runtime
authentication, the victim would not get involved in the attack or
receive any conﬁrmation messages. We develop an Android ap-
plication, which is named as HackFacebook, to launch this attack.
It does not require root access, but only the network permission.
It can be also converted to be the malware that is used to launch
attacks from the non-attacker phones.
We validate the attack feasibility by using HackFacebook to at-
tack the victim phone which has the number, XXX-YYYY-4347,
and the associated Facebook account, ResearchOne. We employ
HackFacebook on one non-victim phone to update status, add a
new friend, and like a page for the victim account, as shown in
Figures 8(a), 8(b), and 8(c), respectively. The snapshot of the
victim account’s activity logs, as shown in Figure 8(d), conﬁrms
that those three attack actions are successful. This attack can be
further employed to disclose the victim’s private information (e.g.,
friends, family members, photo, etc.), because the attacker can add
one fake account to be one of the victim’s friends without the vic-
tim’s consent. The attacker can thus obtain all the information that
the victim shares with his/her friends on Facebook.
5.2 American Red Cross: Unauthorized Do-
nation
American Red Cross (ARC), a non-proﬁt humanitarian organiza-
tion, allows a mobile user to make a donation from his/her monthly
bill via SMS. This service is called Mobile Giving. For example, to
make a $10 donation, a mobile user can send an SMS message with
the text, REDCROSS, to the number, 90999. Afterwards, s(he)
receives an SMS message with a conﬁrmation request, and then
needs to reply it by sending another message with the text, YES3.
The donation will be charged in the user’s monthly bill. Though the
Mobile Giving service offers mobile users a very convenient way
to make donations, its vulnerabilities can be abused to launch the
attack of unauthorized donation.
Vulnerabilities. We discover two security vulnerabilities of the
Mobile Giving service: weak authorization and automatic enroll-
ment. The service’s authorization mechanism, which relies on only
a static response text (i.e., YES), is too weak to defend against ma-
licious attacks. The service can be easily abused, if the attacker is
able to manipulate the victim’s SMS. The second vulnerability is
that most US carriers including AT&T, Verizon and T-Mobile, au-
tomatically enroll their mobile users to the Mobile Giving service.
Some users may not be aware of it, since there is no explicit no-
tiﬁcation of this automatic enrollment. It is dangerous especially
when this service is related to the users’ monetary expense. It also
provides an opportunity for the attacker to cause the victim’s mon-
etary loss by abusing SMS.
Attack and negative impacts.
The attacker can make an unau-
thorized donation from the victim’s mobile bill by launching the
SMS spooﬁng attack against the Mobile Giving service. Due to
the service’s weak authorization, the attack can be done without
the victim’s involvement. To launch this attack, we develop an ap-
plication, DonateARC, based on HackFacebook. Different from
HackFacebook, it requires to send two consecutive SMS messages
to the number, 90999. The text in the ﬁrst message is REDCROSS,
whereas that in the second one is YES. Since the second message
cannot be sent out until the ﬁrst one is successfully delivered, a
time interval is set between these two messages’ deliveries. We set
the interval value to be 5 seconds, because our experiments show
that for OP-I, 95% SMS messages can be successfully delivered to
their recipients within 5 seconds.
To validate the attack feasibility, we employ DonateARC to make
an unauthorized $10 donation to ARC from the victim’s mobile
bill. After performing this attack, the victim’s mobile bill, where
$10 has been donated to ARC, conﬁrms the validation. We want
to note two things. First, the victim is one of our lab members.
Second, the victim can be notiﬁed of the unauthorized donation by
the SMS message of the conﬁrmation request, but s(he) has no way
of stopping the ongoing attack.
5.3 The Home Depot:
Unauthorized Subscription
The Home Depot, an American retailer of home improvement
needs, provides SMS advertising that sends advertisement (e.g., ex-
clusive offers, discounts, etc.) to customers via SMS. To receive
the advertisement, a customer needs to subscribe to SMS advertis-
ing on the website of The Home Depot with his/her phone number
and email address. After doing subscription, the customer would
3The text in reply to the conﬁrmation may vary with different
carriers.
Figure 7: The reminder dialog used by Facebook to encourage users to register their phone numbers for security.
(a) Update status
(b) Add a friend
(c) Like a page
(d) Victim’s activity logs
Figure 8: HackFacebook launches three attack actions against the victim, ResearchOne: update status, add a friend, and like a page.
receive an SMS message with a conﬁrmation request. s(he) is then
required to send another SMS message with the text, Y, in reply to
it. Similar to the attack of unauthorized donation, the subscription
can be abused to be without authorization.
Vulnerability.
The vulnerability of the SMS advertising is the
weak authorization procedure of the subscription. Similar to the
Mobile Giving service, the subscription conﬁrmation relies on a
static response text (i.e., Y). As a result, by leveraging the SMS
spooﬁng, the attacker can let the victim subscribe to the SMS ad-
vertising without the victim’s consent.
Attack and negative impacts.
The attacker can make an unau-
thorized subscription to the victim so that the victim would keep re-
ceiving unwanted SMS advertisements and may feel annoyed. The
way to launch this attack is similar to that of the unauthorized do-
nation attack. Both of them have two steps, requesting donation
or subscription for the victim and sending an SMS message to do
conﬁrmation. The major difference is that the ﬁrst step of this at-
tack needs to be done at the website but not via the delivery of an
SMS message. We validate this attack by subscribing a victim to
the SMS advertising of The Home Depot using the SMS spooﬁng.
Our experiments show that it causes the victim to receive up to 10
SMS messages per month. When this attack is applied to a large
number of mobile users, many complaints could be made from the
victims. The goodwill of The Home Depot may be thus impaired.
We will examine the feasibility of launching large-scale attacks in
the next section.
5.4 Feasibility Study of Large-scale Attacks
We further study the feasibility of launching large-scale attacks
for OP-I. In order to impede traceback, it is better for the attacker
to launch our discovered attacks from the malware at other phones.
So, we examine whether there is any limitation of sending a large
number of forged SMS messages from the malware in that case.
In our experiments, we use the HackFacebook application at one
phone to send as many forged SMS messages as possible to another
phone within a time period. We also test the default messaging
application for the comparison by using it to send SMS messages as
fast as possible. The test time is 30 minutes. Note that we purchase
an unlimited SMS plan for each tested phone to avoid legal issues.
The result shows that in terms of the speed of the SMS message
 3500
 3000
 2500
 2000
 1500
 1000
 500
 0
t
n
e
s
s
e
g
a
s
s
e
M
HackFacbook-before-April-2015
HackFacbook-after-April-2015
Android Default Message App
2459
1002
30
Figure 9: The number of the SMS messages that are success-
fully delivered within 30 minutes.
delivery, HackFacebook can be 33x faster than the default mes-
saging application, as shown in Figure 9. It is observed that the
default messaging application is unable to send more than 30 SMS
messages within 30 minutes. However, the HackFacebook applica-
tion can successfully deliver 2459 and 1002 SMS messages before
April 2015 and after April 2015, respectively. The malware can
thus launch large-scale attacks with the speed at least 33 SMS mes-
sages per minute. We have two other observations. First, there is a
cap of 30 SMS messages per 30-minute by using the Android SMS
API to send SMS messages. But, HackFacebook, which does not
rely on the API, can bypass the cap. Second, it seems that OP-I de-
ploys a network-based SMS control which limits the speed of the
SMS message delivery after April 2015.
Note that it would be interesting to exhaust the IMS server’s re-
sources by launching large-scale attacks against SMS-powered ser-
vices, and then cause SMS DoS. For example, the attacker uses
a large number of the malware applications to keep subscribing
to different SMS-powered services, thereby overloading the IMS
server. However, we did not do it due to legal issues.
5.5 Lessons Learned
Most SMS-powered service providers rely on mobile networks
to authenticate mobile users. They may assume that the users’
phone numbers cannot be spoofed, so only weak security mech-
anisms or none are used for the SMS-powered services. When
the mobile networks suffer from the SMS spooﬁng attacks, most
SMS-powered services are exposed to security threats. Moreover,
there are various mobile networks around the world, so it is difﬁ-
cult for the service providers to ensure their security based on them.
Therefore, the SMS-powered services should have their own au-
thentication mechanisms. Moreover, not only the users of the SMS-
powered services but also other mobile users may be attacked, be-
cause some service providers or carriers may automatically enroll
their users to their SMS-powered services without the users’ aware-
ness. It is unfair for those users who do not subscribe to the SMS-
powered services to bear the security risks.
6. RECOMMENDED SOLUTIONS
We propose recommended ﬁxes to the IMS-based SMS threats.
We seek to address the vulnerabilities at all the involved parties
including the mobile phone, the mobile network, and the SMS-
powered service provider. The proposed ﬁxes consider not only
feasibility, but also standard compatibility, deployment cost and the
feedback from industry (e.g., carriers and SMS-powered service
providers).
Mobile phone. We recommend two remedies to two main vul-
nerabilities, which are insufﬁcient SMS access defense (V3) and
the IPSec crack (V1 and V2), on the phone. First, mobile OS
should prevent all the ways other than using the SMS API from
being leveraged to access SMS. That is, applications should be for-
bidden from using network sockets to send/receive SMS messages.
To achieve it, the mobile OS should restrict the IMS-speciﬁc in-
terface to the IMS-related applications only (e.g., the SMS client).
The advantage of our approach is that both the current SMS permis-
sion control of mobile OS and the existing permission-based mal-
ware detection methods [27, 38] can still be effective without any
modiﬁcations. Certainly, this vulnerability can be resolved when
the SIP session is protected by IPSec, like that of OP-II. However,
enabling the IPSec protection requires upgrades of both the SMS
client and the IMS system, thereby possibly resulting in too much
overhead or deployment cost. The SIP session could still suffer
when the IPSec can be abused on a rooted phone.
Second, the SMS client should have another level of security by
itself in addition to IPSec, because the XFRM module on which the
client relies can be exploited to abuse IPSec by the applications
with root access. The additional security level can be done by hid-
ing the destination address of the SMS service (e.g., dynamic as-
signment of service ports, avoiding the leakage of the IMS server’s
IP address in the routing table, etc.), or adding a security method
(e.g., security challenges, DIGEST, etc.). In the former mechanism,
hiding the destination address can increase the difﬁculty of know-
ing where the forged SMS messages should be sent. The latter se-
curity method can prevent the attacker from forging legal SIP/SMS
messages. Note that both mechanisms require only the upgrade of
the SMS client without modifying the mobile OS, and the former
has been adopted by OP-I.
Mobile network. On the network side, we suggest a remedy to
prevent the SMS spooﬁng. The network should provide a secure
binding between the client’s IP address used to set up the SIP ses-
sion and the originator identiﬁer (i.e., phone number) speciﬁed in
the SIP/SMS message. When a SIP session is initialized and au-
thenticated successfully, the IMS server should bind the originator
phone number speciﬁed in the initial messages to the client’s IP ad-
dress. Then, there are two ways to carry out the secure binding for
the following messages within the session. First, the IMS server
can verify the originator phone number in each SIP message, and
drop it when the number is spoofed. Second, learned from the CS-
based SMS, the originator information of the SIP message needs to
be speciﬁed by the network (i.e., IMS server) instead of the phone.
Therefore, the IMS server would skip the originator information
speciﬁed in each incoming SIP message and ﬁll in the related ﬁelds
with the early binding of the SIP session.
Note that one possible remedy is to add a secret (e.g., DIGEST)
to the SIP message so that the originator identiﬁer can be veriﬁed in
each message. It can prevent the attacker from fabricating legal SIP
messages. However, this security mechanism requires extra efforts
to verify the secret carried in each SMS. Besides, this approach,
which is located at the core function of SMS, is not stipulated by
the standards. To be compatible with the standards and avoid the
possible interoperability issues, carriers do have concerns to carry
out it.
SMS-powered service provider. We propose two remedies to
strengthen the security of the SMS-powered service. First, one
user’s subscription to the SMS-powered service should be con-
ﬁrmed by the user. To some extent, it can prevent the attacker
from successfully launching the SMS spooﬁng attack against the
SMS-powered service. The attacks against the users without the
service subscription would fail, and the users do not need to bear
the security risks of the services to which they do not subscribe.
Second, the SMS-powered service provider should authenticate the
mobile user by itself for each service request. The reason a service
relies on SMS is that SMS is a convenient tool to be used, so the
authentication mechanism has to be simple and does not require
any additional application to be installed. We suggest that one-way
request without conﬁrmation (e.g., the Facebook service) should be
issued with a secret code, and the conﬁrmation request/reply (e.g.,
the services of ARC and The Home Depot) should contain a dy-
namic short code. For example, to like a page (say, LakersNation)
on Facebook via SMS, the text of the SMS request message should
be Like LakersNation, 3847, where 3847 is the sender’s
secret code. To do the conﬁrmation of a donation, the user should
reply the conﬁrmation request which includes a short code instead
of the message with a static text. As a result, even if the SMS
spooﬁng attack is feasible, the SMS-powered services are protected
against it with the secret code or the short code. This approach has
been adopted by Facebook as MobilePIN.
Note that though there have been several proposals for an SMS
security framework [39, 39] and end-to-end SMS encryption [26,
33] to secure SMS communication. However, the lessons we learned
from industry is that they either are too complex to be deployed or
require another application (e.g., Pushbullet or SilenceIM) to be in-
stalled. Relying on them to provide security may destroy the con-
venience of SMS, thereby discouraging people from using SMS.
That might be the reason why Facebook chose to implement its
MobilePIN (i.e., appending a secret code to the SMS request), in-
stead of those aforementioned approaches.
7. DISCUSSION
We next clarify several remaining issues.
How about other carriers’ IMS-based SMS? We further exam-
ine whether the discovered vulnerabilities exist at other two major
US carriers, which are denoted by OP-III and OP-IV for the privacy