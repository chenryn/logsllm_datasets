光标前移一个字符：和右箭头作用一样。
Ctrl-b
光标后移一个字符：和左箭头作用一样。
Alt-f
光标前移一个字。
Alt-b
光标后移一个字。
Ctrl-1
清空屏幕，移动光标到左上角。clear命令完成同样的工作。
表9-1：光标移动命令
9.3
修改文本
表9一2列出了键盘命令，这些命令用来在命令行中编辑字符。
按键
行动
Ctrl-d
删除光标位置的字符。
Ctrl-t
光标位置的字符和光标前面的字符互换位置。
Alt-t
光标位置的字和其前面的字互换位置。
Alt-1
把从光标位置到字尾的字符转换成小写字母。
Alt-u1
把从光标位置到字尾的字符转换成大写字母。
表9-2:文本编辑命令
9.4剪切和粘贴文本
Readline的文档使用术语killing和yanking来指我们平常所说的剪切和粘贴。剪切下来的本
文被存储在一个叫做剪切环（kill-ring）的缓冲区中。
按键
行动
Ctrl-k
剪切从光标位置到行尾的文本。
Ctrl-u
剪切从光标位置到行首的文本。
Alt-d
剪切从光标位置到词尾的文本。
Alt-Backspace
剪切从光标位置到词头的文本。如果光标在一个单词的开
头，剪切前一个单词。
Ctrl-y
把剪切环中的文本粘贴到光标位置。
94
---
## Page 96
表9-3:剪切和粘贴命令
元键
如果你冒险进入到Readline的文档中，你会在bash手册页的READLINE段
落，遇到一个术语“元键”（metakey）。在当今的键盘上，这个元键是指Alt键，但
并不总是这样。
回到昏暗的年代（在PC之前Unix之后），并不是每个人都有他们自己的计算
机。他们可能有一个叫做终端的设备。一个终端是一种通信设备，它以一个文本显
示屏幕和一个键盘作为其特色，它里面有足够的电子器件来显示文本字符和移动光
标。它连接到（通常通过申行电缆）一个更大的计算机或者是一个大型计算机的通
信网络。有许多不同的终端产品商标，它们有着不同的键盘和特征显示集。因为它
们都倾向于至少能理解ASCII，所以软件开发者想要符合最低标准的可移植的应用
程序。Unix系统有一个非常精巧的方法来处理各种终端产品和它们不同的显示特
征。因为Readline程序的开发者们，不能确定一个专用多余的控制键的存在，他们
发明了一个控制键，并把它叫做“元”（"meta"）。然而在现代的键盘上，Alt键作为
元键来服务。如果你仍然在使用终端（在Linux中，你仍然可以得到一个终端），你
也可以按下和释放Esc键来得到如控制Alt键一样的效果。
9.5自动补全
shell能帮助你的另一种方式是通过一种叫做自动补全的机制。当你入一个命令时，按下tab
[ne@linuxbox -]s 1s
Desktop1s-output.txtPicturesTenplates
Videos
....
试着输入下面的命令，但不要按下Enter键：
C6
---
## Page 97
[ne@linuxbox -]$ ls 1
现在按下tab键：
[ne@linuxbox -]$ 1s ls-output.txt
看一下shell是怎样补全这一行的？让我们再试试另一个例子。这回，也不要按下Enter：
[ne@linuxbox -]$ ls D
按下 tab:
[ne@linuxbox -]$ ls D
没有补全，只是嘟哪响。因为“D”不止匹配目录中的一个条目。为了自动补全执行成功，
你给它的“线索”不能模棱两可。如果我们继续输入：
[ne@linuxbox -]$ 1s Do
然后按下tab:
[ne@linuxbox -]s ls Docunents
自动补全成功了。
这个实例展示了路径名自动补全，这是最常用的形式。自动补全也能对变量（如果字的开
头是一个“$"）、用户名字（单词以"~”开始）、命令（如果单词是一行的第一个单词）和主机
名（如果单词的开头是“@"）起作用。主机名自动补全只对包含在文件/etc/hosts中的主机名
有效。
有一系列的控制和元键序列与自动补全相关联：
96
---
## Page 98
按键
行动
Alt-?
显示可能的自动补全列表。在大多数系统中，你也可以完成
这个通过按两次tab键，这会更容易些。
Alt-*
插入所有可能的自动补全。当你想要使用多个可能的匹配
项时，这个很有帮助。
表9-4:自动补全命令
可编程自动补全
目前的bash版本有一个叫做可编程自动补全工具。可编程自动补全允许你（更
可能是，你的发行版提供商）来加入额外的自动补全规则。通常需要加入对特定应
用程序的支持，来完成这个任务。例如，有可能为一个命令的选项列表，或者一个
应用程序支持的特殊文件类型加入自动补全。默认情况下，Ubuntu已经定义了一
个相当大的规则集合。可编程自动补全是由shell函数实现的，shell函数是一种小
巧的shell脚本，我们会在后面的章节中讨论到。如果你感到好奇，试一下：
set / less
查看一下如果你能找到它们的话。默认情况下，并不是所有的发行版都包括它
们。
9.6
6利用历史命令
正如我们在第二章中讨论到的，bash维护着一个已经执行过的命令的历史列表。这个命令列表
被保存在你家目录下，一个叫做.bash_history的文件里。这个history工具是个有用资源，因
为它可以减少你敲键盘的次数，尤其当和命令行编辑联系起来时。
9.7搜索历史命令
在任何时候，我们都可以浏览历史列表的内容，通过：
[ne@linuxbox -]$ history 1 less
6
---
## Page 99
在默认情况下，bash会存储你所输入的最后500个命令。在随后的章节里，我们会知道怎
样调整这个数值。比方说我们想在自己曾经用过的命令中，找出和/usr/bin这一目录相关的。
那么我们就可以这样做：
uq/xsm/ dox31fxossru $[-xoqznutgou]
比方说在我们的搜索结果之中，我们得到一行，包含了有趣的命令，像这样；
x4·4ndno-s[ 1s=output.txt
上面这一行冒号后面的第一个“”会高亮显示
即刻，搜索返回我们需要的结果。我们可以按下Eanter键来执行这个命令，或者我们可以
按下Ctrl-j复制这个命令到我们当前的命令行。来进一步编辑它。好了现在我们复制它，输入
Ctrl-j:
4x44ndno-s 
移动到历史列表结尾，即当前命令行。
Ctrl-r
反向增量搜索。从当前命令行开始，向上增量搜索。
Alt-p
反向搜索，非增量搜索。（输入要查找的字符串，按下Enter
来执行搜索）。
Alt-n
向前搜索，非增量。
Ctrl-o
执行历史列表中的当前项，并移到下一个。如果你想要执行
历史列表中一系列的命令，这很方便。
表9-5:历史命令
99
---
## Page 101
9.8历史命令展开
通过使用“!”字符，shell为历史列表中的命令，提供了一个特殊的展开类型。我们已经知道一
个感叹号，其后再加上一个数字，可以把来自历史列表中的命令插入到命令行中。这里还有一
些其它的展开特性：
序列
行为
!!
重复最后一次执行的命令。可能按下上箭头按键和enter键
史容易些。
!number
重复历史列表中第number行的命令。
Istring
重复最近历史列表中，以这个字符串开头的命令。
!?string
重复最近历史列表中，包含这个字符串的命令。
表9-6：历史展开命令
在历史展开机制中，还有许多可利用的特点，但是这个题目已经太晦涩难懂了，如果我们再
继续讨论的话，我们的头可能要爆炸了。bash手册页的HISTORYEXPANSION部分详尽地
讲述了所有要素。
脚本
除了bash中的命令历史特性，许多Linux发行版包括一个叫做script的程序，
这个程序可以记录整个shell会话，并把shell会话存在一个文件里面。这个命令的
基本语法是：
命令中的file是指用来存储shell会话记录的文件名。如果没有指定文件名，则
点的完整列表
9.9总结归纳
在这一章中，我们已经讨论了一些由shell提供的键盘操作技巧，这些技巧是来帮助打字员减
少工作量的。随着时光流逝，你和命令行打交道越来越多，我猜想你会重新翻阅这一章的内容，
100
---
## Page 102
学会更多的技巧。目前，你就认为它们是可选的，潜在地有帮助的。
9.10拓展阅读
·Wikipedia上有一篇关于计算机终端的好文章：
http://en.wikipedia.org/wiki/Computer_terminal
101
---
## Page 103
10
权限
Unix传统中的操作系统不同于那些MS-DOS传统中的系统，区别在于它们不仅是多任务系统，
而且也是多用户系统。这到底意味着什么？它意味着多个用户可以在同一时间使用同一台计算
用。例如，如果一台计算机连接到一个网络或者因特网，那么远程用户通过ssh（安全shell）
可以登录并操纵这台电脑。事实上，远程用户也能运行图形界面应用程序，并且图形化的输出
结果会出现在远端的显示器上。X窗口系统把这个作为基本设计理念的一部分，并支持这种功
能。
Linux系统的多用户性能，不是最近的“创新”，而是一种深深地嵌入到了Linux操作系统
的设计中的特性。想想Unix系统的诞生环境，这一点就很好理解了。多年前，在个人电脑出
现之前，计算机都是大型、昂贵的、集中化的。例如一个典型的大学计算机系统，是由坐落在
一座建筑中的一台大型中央计算机和许多散布在校园各处的终端机组成，每个终端都连接到这
台大型中央计算机。这台计算机可以同时支持很多用户。
为了使多用户特性付诸实践，那么必须发明一种方法来阻止用户彼此之间受到影响。毕竟
一个用户的行为不能导致计算机崩溃，也不能乱动属于另一个用户的文件。
在这一章中，我们将看看这一系统安全的本质部分，会介绍以下命令：
·d一显示用户身份号
·chmod一更改文件模式
·umask一设置默认的文件权限
·su一以另一个用户的身份来运行shell
·sudo一以另一个用户的身份来执行命令
·chown一更改文件所有者
·chgrp一更改文件组所有权
102
---
## Page 104
·passwd一更改用户密码
10.1拥有者、组成员和其他人
在第四章探究文件系统时，当我们试图查看一个像/etc/shadow那样的文件的时候，我们会遇
到一个问题。
[ne@linuxbox -]$ file /etc/shadov
/etc/shadov: regular file, no read pernission
[ne@linuxbox -]$ less /etc/shadov
/etc/shadou: Permission denied
产生这种错误信息的原因是，作为一个普通用户，我们没有权限来读取这个文件。
在Unix安全模型中，一个用户可能拥有文件和目录。当一个用户拥有一个文件或目录时，
用户对这个文件或目录的访问权限拥有控制权。用户反过来又属于一个由一个或多个用户组成
的用户组，用户组成员由文件和目录的所有者授予对文件和目录的访问权限。除了对一个用户
组授予权限之外，文件所有者可能会给每个人一些权限，在Unix术语中，每个人是指整个世
界。可以用id命令，来找到关于你自己身份的信息：
[nedlinuxbox -]$ id
uid=500(ne) gid=500 (±e)groups=500(ne)
让我们者一下输出结果。当用户创建帐户之后，系统会给用户分配一个号码，叫做用户D
或者uid，然后，为了符合人类的习惯，这个ID映射到一个用户名。系统又会给这个用户分
配一个原始的组ID或者是gid，这个gid可能属于另外的组。上面的例子来自于Fedora系统
比方说Ubuntu的输出结果可能看起来有点儿不同：
[nedlinuxbox -]$ id