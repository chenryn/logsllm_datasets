title:DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic
Views for Dynamic Android Malware Analysis
author:Lok-Kwong Yan and
Heng Yin
DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic Views
for Dynamic Android Malware Analysis
Lok Kwong Yan†‡
Heng Yin†
†Syracuse University
Syracuse, New York, USA
{loyan, heyin}@syr.edu
‡Air Force Research Laboratory
Rome, New York, USA
Abstract
The prevalence of mobile platforms, the large market
share of Android, plus the openness of the Android Mar-
ket makes it a hot target for malware attacks. Once a mal-
ware sample has been identiﬁed, it is critical to quickly
reveal its malicious intent and inner workings.
In this
paper we present DroidScope, an Android analysis plat-
form that continues the tradition of virtualization-based
malware analysis. Unlike current desktop malware anal-
ysis platforms, DroidScope reconstructs both the OS-
level and Java-level semantics simultaneously and seam-
lessly. To facilitate custom analysis, DroidScope ex-
ports three tiered APIs that mirror the three levels of an
Android device: hardware, OS and Dalvik Virtual Ma-
chine. On top of DroidScope, we further developed sev-
eral analysis tools to collect detailed native and Dalvik
instruction traces, proﬁle API-level activity, and track in-
formation leakage through both the Java and native com-
ponents using taint analysis. These tools have proven to
be effective in analyzing real world malware samples and
incur reasonably low performance overheads.
Introduction
1
Android is a popular mobile operating system that is in-
stalled in millions of devices and accounted for more
than 50% of all smartphone sales in the third quarter of
2011 [22]. The popularity of Android and the open na-
ture of its application marketplace makes it a prime tar-
get for attackers. Malware authors can freely upload ma-
licious applications to the Android Market1 waiting for
unsuspecting users to download and install them. Ad-
ditionally, numerous third-party alternative marketplaces
make delivering malicious applications even easier. In-
deed recent research has shown that malicious applica-
tions exist in both the ofﬁcial and unofﬁcial marketplaces
with a rate of 0.02% and 0.2% respectively [41].
1The Android Market has been superceded by the Android Apps
Store in Google Play.
Malware analysis and exploit diagnosis on desktop
systems is well researched.
It is widely accepted that
dynamic analysis is indispensable, because malware is
often heavily obfuscated to thwart static analysis. Fur-
thermore, runtime information is often needed for exploit
diagnosis. In particular, much work has leveraged virtu-
alization techniques, either whole-system software emu-
lation or hardware virtualization, to introspect and ana-
lyze illicit activities within the virtual machine [11, 15,
18, 31, 33, 39, 37].
The advantages of virtualization-based analysis ap-
proaches are two-fold: 1) as the analysis runs under-
neath the entire virtual machine, it is able to analyze even
the most privileged attacks in the kernel; and 2) as the
analysis is performed externally, it becomes very difﬁ-
cult for an attack within the virtual machine to disrupt
the analysis. The downside, however, is the loss of se-
mantic contextual information when the analysis com-
ponent is moved out of the box. To reconstruct the se-
mantic knowledge, virtual machine introspection (VMI)
is needed to intercept certain kernel events and parse ker-
nel data structures [16, 21, 24]. Based on this idea, sev-
eral analysis platforms (such as Anubis [1], Ether [15],
and TEMU [35]) have been implemented.
Despite the fact that Android is based on Linux, it
is not straightforward to take the same desktop analy-
sis approach for Android malware. There are two lev-
els of semantic information that must be rebuilt. In the
lower level, Android is a Linux operating system where
each Android application (or App in short) is encapsu-
lated into a process. Within each App, a virtual machine
(known as the Dalvik Virtual Machine) provides a run-
time environment for the App’s Java components.
In essence, to enable the virtualization-based analysis
approach for Android malware analysis, we need to re-
construct semantic knowledge at two levels: 1) OS-level
semantics that understand the activities of the malware
process and its native components; and 2) Java-level se-
mantics that comprehend the behaviors in the Java com-
1
ponents. Ideally, to capture the interactions between Java
and native components, we need a uniﬁed analysis plat-
form that can simultaneously rebuild these two semantic
views and seamlessly bind these two views with the exe-
cution context.
With this goal in mind, we designed and implemented
a new analysis platform, DroidScope, for Android mal-
ware analysis. DroidScope is built on top of QEMU (a
CPU emulator [3]) and is able to reconstruct the OS-
level and Java-level semantic views completely from the
outside. Enriched with the semantic knowledge, Droid-
Scope further provides a set of APIs to help analysts
implement custom analysis plugins. To demonstrate the
capability of DroidScope, we have implemented several
tools, including native instruction tracer and Dalvik in-
struction tracer to obtain detailed instruction traces, API
tracer to log an App’s interactions with the Android sys-
tem, and taint tracker to analyze information leakage.
We evaluated the performance impacts of these tools
on 12 different benchmarks and found that the instru-
mentation overhead is reasonably low and taint analysis
performance (from 11 to 34 times slowdown) is compa-
rable with other taint analysis systems. We further eval-
uated the capability of these tools using two real world
Android malware samples: DroidKungFu and Droid-
Dream. They both have Java and native components as
well as payloads that try to exploit known vulnerabili-
ties. We were able to analyze their behavior without any
changes to the virtual Android device, and obtain valu-
able insights.
In summary, this paper makes the following contribu-
tions:
• We describe two-level virtual machine introspection to
rebuild the Linux and Dalvik contexts of virtual An-
droid devices. Dalvik introspection also includes a
technique to dynamically disable Dalvik Just-In-Time
compilation.
• We present DroidScope, a new emulation based An-
droid malware analysis engine that can be used to an-
alyze the Java and native components of Android Ap-
plications. DroidScope exposes an event-based anal-
ysis interface with three sets of APIs that correspond
to the three different abstraction levels of an Android
Device, hardware, Linux and Dalvik.
• We developed four analysis tools on DroidScope. The
native instruction tracer and Dalvik instruction tracer
provide detailed accounts of the analysis sample’s exe-
cution, while the API tracer provides a high level view
of how the sample interacts with the rest of the system.
The taint tracker implements dynamic taint analysis
on native instructions but is capable of tracking taint
through Java Objects with the help of the Dalvik view
reconstruction. These tools were used to instrument
Figure 1: Overview of Android System
and analyze two real-world malware samples: Droid-
KungFu and DroidDream.
2 Background and Motivation
In this section, we give an overview of the Android sys-
tem and existing Android malware analysis techniques to
motivate our new analysis platform.
2.1 Android System Overview
Figure 1 illustrates the architecture of the Android sys-
tem from the perspective of a system programmer. At
the lowest level, the Android system uses a customized
Linux kernel to manage various system resources and
hardware devices. System services, native applications
and Apps run as Linux processes. In particular, Zygote
is the parent process for all Android Apps. Each App
is assigned its own unique user ID (uid) at installation
time and group IDs (gids) corresponding to requested
permissions. These uids and gids are used to control
access to system resources (i.e, network and ﬁle system)
like on a normal Linux system.
All Apps can contain both Java and native compo-
nents. Native components are simply shared libraries
that are dynamically loaded at runtime. The Dalvik vir-
tual machine (DVM), a shared library named libdvm.so,
is then used to provide a Java-level abstraction for the
App’s Java components. At the same time, the Java Na-
tive Interface (JNI) is used to facilitate communications
between the native and Java sides.
To create a Java component, an App developer ﬁrst
implements it in Java, compiles it into Java bytecode, and
then converts it into Dalvik bytecode. The result is a
Dalvik executable called a dex ﬁle. The developer can
also compile native code into shared libraries, .so ﬁles,
with JNI support. The dex ﬁle, the shared libraries and
any other resources, including the AndroidManifest.xml
ﬁle that describes the App, are packaged together into an
apk ﬁle for distribution.
For instance, DroidKungFu is a malicious puzzle
2
Linux Kernel Zygote System Services  Dalvik VM Java Component Java Component  Java Libraries Java Libraries Native Component Java Libraries System Libraries System Libraries System Libraries JNI Its Java
game found in alternative marketplaces [25].
component exﬁltrates sensitive information and awaits
commands from the bot master. Its native component is
used as a shell to execute those commands and it also in-
cludes three resource ﬁles that are encrypted exploits tar-
geting known vulnerabilities, adb setuid exhaustion and
udev [12], in certain versions of Android.
For security analysts, once a new Android malware
instance has been identiﬁed, it is critical to quickly re-
veal its malicious functionality and understand its inner-
workings. This often involves both static and dynamic
analysis.
2.2 Android Malware Analysis
Like malware analysis on the desktop environment, An-
droid malware analysis techniques can fall into two cat-
egories: static and dynamic. For static analysis, the sam-
ple’s dex ﬁle can be analyzed by itself or it can be disas-
sembled and further decompiled into Java using tools like
dex2jar and ded [13]. Standard static program analysis
techniques (such as control-ﬂow analysis and data-ﬂow
analysis) can then be performed. As static analysis can
give a complete picture, researchers have demonstrated
this approach to be very effective in many cases [20].
However, static analysis is known to be vulnerable
to code obfuscation techniques, which are common-
place for desktop malware and are expected for An-
droid malware.
In fact, the Android SDK includes a
tool named Proguard [34] for obfuscating Apps. An-
droid malware may also generate or decrypt native com-
ponents or Dalvik bytecode at runtime. Indeed, Droid-
KungFu dynamically decrypts the exploit payloads and
executes them to root the device. Moreover, researchers
have demonstrated that bytecode randomization tech-
niques can be used to completely hide the internal logic
of a Dalvik bytecode program [14]. Static analysis also
falls short for exploit diagnosis, because a vulnerable
runtime execution environment is needed to observe and
analyze an exploit attack and pinpoint the vulnerability.
Complementary to static analysis, dynamic analysis is
immune to code obfuscation and is able to see the mali-
cious behavior on an actual execution path. Its downside
is lack of code coverage, although it can be ameliorated
by exploiting multiple execution paths [6, 9, 31]. The
Android SDK includes a set of tools, such as adb and
logcat, to help developers debug their Apps. With
JDWP (Java Debug Wire Protocol) support, the debug-
ger can even exist outside of the device. However, just
like how desktop malware detects and disables debug-
gers, malicious Android Apps can also detect the pres-
ence of these tools, and then either evade or disable the
analysis. The fundamental reason is that the debugging
components and malware reside in the same execution
environment with the same privileges.
Figure 2: DroidScope Overview
Virtualization based analysis has proven effective
against evasion, because all of the analysis components
are out of the box and are more privileged than the run-
time environment being analyzed, including the mal-
ware. Based on dynamic binary translation and hard-
ware virtualization techniques, several analysis plat-
forms [1, 15, 38] have been built for analyzing desktop
malware. These platforms are able to bridge the seman-
tic gap between the hardware-level view from the virtual
machine monitor and the OS-level view within the vir-
tual machine using virtual machine introspection tech-
niques [16, 21, 24].
However, these tools cannot be immediately used for
Android malware analysis. Android has two levels of
semantic views, OS and Java, that need to be recon-
structed versus the one for desktop malware. To enable
virtualization-based analysis for Android malware, we
need a uniﬁed analysis platform that reconstructs these
two levels of views simultaneously and seamlessly binds
these two views such that interactions between Java com-
ponents and native components can be monitored and an-
alyzed.
3 Architecture
DroidScope’s architecture is depicted in Figure 2. The
entire Android system (including the malware) runs on
top of an emulator, and the analysis is completely per-
formed from the outside. By integrating the changes into
the emulator, the Android system remains unchanged
and different virtual devices can be loaded. To ensure the
best compatibility with virtual Android devices, we ex-
tended the QEMU [3] based Android emulator that ships
with the Android SDK. This is done in three aspects: 1)
we introspect the guest Android system and reconstruct
OS-level and Java-level views simultaneously; 2) as a
key binary analysis technique, we implement dynamic
taint analysis; and 3) we provide an analysis interface to
help analysts build custom analysis tools. Furthermore,
we made similar changes to a different version of QEMU
3
Linux Kernel Zygote System Services  Dalvik VM Java Component Java Component  Java Libraries Java Libraries Native Component Java Libraries System Libraries System Libraries System Libraries JNI OS-level  View Java-level  View DroidScope Instrumentation Interface API  Tracer Native  Insn. Tracer Dalvik  Insn. Tracer Taint Tracker Java Component Java Component  to enable x86 support.
To demonstrate the capabilities of DroidScope, we
have developed several analysis tools on it. The API
tracer monitors the malware’s activities at the API level
to reason about how the malware interacts with the An-
droid runtime environment. This tool monitors how the
malware’s Java components communicate with the An-
droid Java framework, how the native components inter-
act with the Linux system, and how Java components and
native components communicate through the JNI inter-
face.
The native instruction tracer and Dalvik instruction
tracer look into how a malicious App behaves internally
by recording detailed instruction traces. The Dalvik in-
struction tracer records Dalvik bytecode instructions for
the malware’s Java components and the native instruc-
tion tracer records machine-level instructions for the na-
tive components (if they exist).
The taint tracker observes how the malware obtains