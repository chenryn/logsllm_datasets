title:"They're not that hard to mitigate": What Cryptographic Library Developers
Think About Timing Attacks
author:Jan Jancar and
Marcel Fourn&apos;e and
Daniel De Almeida Braga and
Mohamed Sabt and
Peter Schwabe and
Gilles Barthe and
Pierre-Alain Fouque and
Yasemin Acar
2022 IEEE Symposium on Security and Privacy (SP)
“They’re not that hard to mitigate”: What
Cryptographic Library Developers Think About
Timing Attacks
3
1
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Jan Jancar∗, Marcel Fourné†, Daniel De Almeida Braga‡, Mohamed Sabt‡,
Peter Schwabe†§, Gilles Barthe†¶, Pierre-Alain Fouque‡ and Yasemin Acar∥†
∗Masaryk University, Brno, Czech Republic †MPI-SP, Bochum, Germany
‡Rennes University, CNRS, IRISA, Rennes, France §Radboud University, Nijmegen, The Netherlands
¶IMDEA Software Institute, Madrid, Spain ∥The George Washington University, Washington D.C., USA
Abstract—Timing attacks are among the most devastating side-
channel attacks, allowing remote attackers to retrieve secret
material,
including cryptographic keys, with relative ease. In
principle, “these attacks are not that hard to mitigate”: the basic
intuition, captured by the constant-time criterion, is that control-
flow and memory accesses should be independent from secrets.
Furthermore, there is a broad range of tools for automatically
checking adherence to this intuition. Yet, these attacks still
plague popular cryptographic libraries twenty-five years after
their discovery, reflecting a dangerous gap between academic
research and cryptographic engineering. This gap can potentially
undermine the emerging shift towards high-assurance, formally
verified cryptographic libraries. However, the causes for this gap
remain uninvestigated.
To understand the causes of this gap, we conducted a survey
with 44 developers of 27 prominent open-source cryptographic
libraries. The goal of the survey was to analyze if and how
the developers ensure that their code executes in constant time.
Our main findings are that developers are aware of timing
attacks and of their potentially dramatic consequences and yet
often prioritize other issues over the perceived huge investment
of time and resources currently needed to make their code
resistant to timing attacks. Based on the survey, we identify
several shortcomings in existing analysis tools for constant-time,
and issue recommendations that can make writing constant-
time libraries less difficult. Our recommendations can inform
future development of analysis tools, security-aware compilers,
and cryptographic libraries, not only for constant-timeness, but
in the broader context of side-channel attacks, in particular for
micro-architectural side-channel attacks, which are a younger
topic and too recent as focus for this survey.
Index Terms—constant-time,
timing attacks, cryptographic
library, survey, developer survey, expert survey, usable security,
human factors, cryptography
I. INTRODUCTION
Cryptographic protocols, such as TLS (Transport Layer
Security), are the backbone of computer security, and are
used at scale for securing the Internet, the Cloud, and many
other applications. Quite strikingly, the deployment of these
protocols rests on a small number of open-source libraries,
developed by a rather small group of outstanding developers.
These developers have a unique set of skills that are needed
for writing efficient, correct, and secure implementations of
(often sophisticated) cryptographic routines; in particular, they
combine an excellent knowledge of cryptography and of
computer architectures and a deep understanding of low-level
programming. Unfortunately, in spite of developers’ skills and
experience, new and sometimes far-reaching vulnerabilities
and attacks are regularly discovered in major open-source
cryptographic libraries. One class of vulnerabilities are timing
attacks, which let an attacker retrieve secret material, such
as cryptographic keys, “by carefully measuring the amount
of time required to perform private key operations“. Although
timing attacks were first described by Kocher in 1996 [1], they
continue to plague implementations of cryptographic libraries.
There are multiple aspects that make timing attacks special
in comparison to other side-channel attacks such as power-
analysis or EM attacks. First, they can be carried out remotely,
both in the sense of running code in parallel to the victim code
without the need of local access to the target computer, but also
in the sense of only interacting with a server over the network
and measuring network timings [2] or over the Cloud [3]. As
a consequence, unlike many other side-channel attacks, timing
attacks cannot be prevented by restricting physical access to
the target machine. Second, timing attacks do not leave traces
on the victim’s machine beyond possibly suspicious access
logs, and we do not know at all to what extent they are
being carried out in the real world, for example by government
agencies: victims are not able to reliably detect that they are
under attack and the attackers will never tell.
At the same time, and most importantly for this paper, we
know how to systematically protect against timing attacks. The
basic idea of such systematic countermeasures was already
described by Kocher in 1996 [1]: we need to ensure that all
code takes time independent of secret data. It is important here
to not just consider the total time taken by some cryptographic
computation, but make sure that this property holds for each
instruction. This paradigm is known as constant-time1 cryp-
tography and is usually achieved by ensuring that
• there is no data flow from secrets into branch conditions;
1The term constant-time, often referred as CT, is a bit of a misnomer, as
it does not refer to CPU execution time but rather to a structural property of
programs. However, it is well-established in the cryptography community.
© 2022, Jan Jancar. Under license to IEEE.
DOI 10.1109/SP46214.2022.00044
632
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply. 
• addresses used for memory access do not depend on
secret data; and
• no secret-dependent data is used as input to variable-time
arithmetic instructions (such as, e.g., DIV on most Intel
processors or SMULL/UMULL on ARM Cortex-M3).
Constant-timeness is no panacea, and the above rules may not
be sufficient on some micro-architectures or in the presence of
speculative execution, but essentially all timing-attack vulnera-
bilities found so far in cryptographic libraries could have been
avoided by following these rules. For this reason, the notion
of constant-time has grown in importance in standardization
processes and recent cryptographic competitions. For instance,
in the context of the ongoing Post-Quantum Cryptography
Standardization project, the National Institute of Standards and
Technology have stated in their Call for Papers [4]:
“Schemes that can be made resistant
to side-channel
attack at minimal cost are more desirable than those
whose performance is severely hampered by any attempt to
resist side-channel attacks. We further note that optimized
implementations that address side-channel attacks (e.g.,
constant-time implementations) are more meaningful than
those which do not.”
Protection against side-channel attacks, including timing at-
tacks, is also routinely included as a requirement for Common
Criteria certification as well as a part of the newly approved
FIPS 140-3 certification scheme [5].
Programming highly optimized code that is also constant-
time can be very challenging. However, we know how to verify
that programs are constant-time. This was first demonstrated
by Adam Langley’s ctgrind [6], developed in 2010, the first
tool to support analysis of constant-timeness. A decade later,
there are now more than 30 tools for checking that code satis-
fies constant-timeness or is resistant against side-channels [7],
[8]. These tools differ in their goals, achievements, and status.
Yet,
they collectively demonstrate that automated analysis
of constant-time programs is feasible; for instance, a 2019
review [8] lists automatic verification of constant-time real-
world code as one achievement of computer-aided cryptog-
raphy, an emerging field that develops and applies formal,
machine-checkable approaches to the design, analysis, and
implementation of cryptography.
Based on this state of affairs, one would expect that tim-
ing leaks in cryptographic software have been systematically
eliminated, and timing attacks are a thing of the past. Unfor-
tunately, this is far from true, so in this paper we set out to
answer the question:
Why is today’s cryptographic software not free of timing-
attack vulnerabilities?
More specifically,
to understand how real-world crypto-
graphic library developers think about timing attacks and the
constant-time property, as well as constant-time verification
tools, we conducted a mixed-methods online survey with 44
developers of 27 popular cryptographic libraries / primitives2.
Through this survey, we track down the origin of the persis-
tence of timing attacks by addressing multiple sub-questions:
2We refer to both as “libraries” for readability.
RQ1: (a) Are timing attacks part of threat models of li-
braries/primitives? (b) Do libraries and primitives claim re-
sistance against timing attacks?
RQ2: (a) How do libraries/primitives protect against timing
attacks? (b) Are libraries and primitives being verified/tested
for constant-timeness? (c) How often/when is this done?
RQ3: (a) What is the state of awareness of tools that can
verify constant-timeness? (b) What are the experiences with
the tools?
RQ4: Are participants inclined to hypothetically use formal-
analysis-based, dynamic instrumentation, or runtime statistical
test tools, based on tool use requirements and guarantees?
RQ5: What would developers want from constant-time veri-
fication tools?
We find that, while all 44 participants are aware of timing
attacks, not all cryptographic libraries have verified/tested
resistance against
timing attacks. Reasons for this include
varying threat models, a lack of awareness of tooling that
supports testing/verification, lack of availability, as well as a
perceived significant effort in using those tools (see Figure 1).
We expose these reasons, and provide recommendations to
tool developers, cryptographic libraries developers, compiler
writers, and standardization bodies to overcome the main
obstacles towards a more systematic protection against timing
attacks. We also briefly discuss how these recommendations
extend to closely related lines of research, including tools for
protecting against Spectre-style attacks [9].
Fig. 1. Leaky pipeline of developers’ knowledge and use of tools for testing
or verifying constant-timeness.
II. BACKGROUND & RELATED WORK
A. Attacks
In 1996, Kocher introduced the concept of timing attacks as
a means to attack cryptographic implementations “by carefully
measuring the amount of time required to perform private
key operations“ [1]. He described successful timing attacks
against implementations of various building blocks commonly
used in asymmetric cryptography like modular exponentiation
and Montgomery reduction against RSA and DSS. Since this
seminal paper, timing attacks have been further refined and
continued to plague implementations of both asymmetric and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply. 
633
100% Participants (44  )75% Know about tools (33  )25% Don't know about tools (11  )31.8% Haven't tried to use tools (14  )43.1% Tried touse tools (19  )38.6%Use tools (17  )4.5% Don't use tools (2  )symmetric cryptography. Successful timing attacks are way too
numerous to list all, so we focus on a few relevant examples.
In 2002, Tsunoo et al. [10], [11] were the first to present
attacks exploiting cache timing to break symmetric cryptogra-
phy (MISTY1 and DES); they also mentioned a cache-timing
attack against AES. Details of cache-timing attacks against
AES were first presented in independent concurrent work by
Bernstein [12] and by Osvik, Shamir, and Tromer [13]. In
2003, D. Brumley and Boneh showed that
timing attacks
can be mounted remotely by measuring timing variations
in response times of SSL servers over the network [2].
Canvel et al. showed in 2003 how to recover passwords in