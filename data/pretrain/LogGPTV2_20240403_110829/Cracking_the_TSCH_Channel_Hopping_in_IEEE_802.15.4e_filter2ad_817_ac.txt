LCF(Ns , n) × max{ρ1, ρ2, ρ3, ..., ρ
n
n
n
LCF(Ns,n)
Ns
n
}
LC F(Ns ,n)
≥
= max{ρ1, ρ2, ρ3, ..., ρ
≥ ρ1 + ρ2 + ρ3 + ... + ρ
LCF(Ns,n)
Ns
}
Ns
LC F(Ns ,n)
Ns
LC F(Ns ,n)
= Density[Ns]
5Using Ns or a multiple of Ns to generate the channel offset table are functionally
equivalent for the attacker. The only difference is the size of channel offset table.
Figure 4: Testbed consisting of 50 TelosB motes.
tion.
So we have Density[n] ≥ Density[Ns], contradicting the assump-
tion.
With the proof for both cases, we finish the proof by contradic-
■
The time complexity of Algorithm 1 to derive Ns is O(Nu ∗ Nr).
If the attacker uses a constant Nu, the time complexity becomes
O(Nr). Please note that there is no need to rerun Algorithm 1 when
the attacking program obtains new records. The attacking program
can only take the new records as input and process them (executing
line 2 – 9) based on the existing Density array and Position array.
After obtaining Ns (or its multiple), the attacker can identify
the repetition cycle LCM(Ns , Slenдth) by exploring all possible
Slenдth values. If every two transmissions with a time interval of
LCM(Ns , M) slots always use the same channel, LCM(Ns , M) can
be used as the repetition cycle. The attacker then follows the same
methods presented in Section 3.1 to identify the time slots with
scheduled transmissions, and generate the channel offset table.
4 CASE STUDY ON ORCHESTRA
In this section, we present our case study on cracking the chan-
nel hopping sequence of the TSCH implementation [9] in Contiki
operating system [8] developed for Orchestra [11] and 6TiSCH
networks [14]6. Orchestra proposes an autonomous transmission
scheduling method running on top of RPL [37] and TSCH networks.
Each node computes its transmission schedule locally based on its
routing state and MAC address. All nodes running Orchestra change
the channels together following the TSCH channel hopping method
(Eq. 2). Orchestra employs three types of slotframes for three differ-
ent kinds of traffic: application, routing, and time synchronization.
Different types of slotframes are assigned with different lengths.
Orchestra allows Slenдth to be larger than Nchannel .
4.1 Experimental Methodology
We run the experiments on a testbed that consists of 50 TelosB
motes [42] deployed on a single floor of an office building [38].
Figure 4 plots the testbed topology. We configure the network
to have a single access point and 49 network devices operating
on four channels (the default value in Orchestra). The slotframe
lengths for application, routing, and time synchronization are 47,
31, and 61, respectively. The combined slotframe has 88,877 time
slots in total. Each network device generates a packet every 20s. The
6The implementation is provided by Duquennoy et al. and is publicly accessible [10].
IoTDI ’19, April 15–18, 2019, Montreal, QC, Canada
Xia Cheng, Junyang Shi, and Mo Sha
Figure 5: Cracking performance on Orchestra with different snooping periods.
attacking program runs on a Raspberry Pi equipped with a 1.2GHz
64-bit quad-core processor and 1.0 GB memory. We perform three
sets of experiments. We first measure the prediction performance
and cracking time when the attacker snoops different amount of
time before launching the attack. We then examine the impact of
slotframe length on the cracking performance. Finally, we study
the cracking performance when employing a tailored version of the
attacking program to Orchestra. We record all the channel activities
during the experiments and use them as the the ground truth.
4.2 Cracking Performance with Different
Snooping Periods
We configure the attacking program to start cracking after snoop-
ing the channel activities during a certain number of time slots
(snooping period). We vary the length of snooping period from
88,877 slots (1 combined slotframe) to 2,133,048 slots (24 combined
slotframes). The channel usage during the snooping period is used
as the training set and the channel usage of the next 1,599,786
slots (18 combined slotframes) is taken as the validation set. Our
cracking program provides predicted Ns and LCM(Ns , Slenдth),
identifies the future slots with scheduled transmissions, and pre-
dicts the channels used by future transmissions. We compare the
predicted transmission activities and their channels against the
ground truth in the validation set. If the predicted time slots with
transmissions (and corresponding channels) and the ones without
transmissions match the ground truth, they are labeled as True
Positive (TP) and True Negative (TN), respectively. The wrong pre-
dictions are marked as False Positive (FP) and False Negative (FN).
After labeling all predictions, we compute the True Positive Rate
(T PR = T P/(T P +F N)), True Negative Rate (T N R = T N/(T N +F P)),
Accuracy (Accuracy = (T P + T N)/(T P + F N + F P + T N)), and Pre-
cision (Precision = T P/(T P + F P)).
Figure 5 plots TPR, TNR, and Accuracy of the predictions with
different amount of training data (snooping period). As Figure 5
shows, TPR and Accuracy are small (9.65% and 15.55% for TPR,
29.03% and 33.22% for Accuracy) when the eavesdropped number of
slots are 88,877 and 177,754 (first two sets of bars). Without enough
observations, the cracking program provides a wrong Ns, making
the predictions very inaccurate. TPR and Accuracy increase sharply
to 60.91% and 90.65%, respectively, when there are 266,631 slots (3
combined slotframes) in the training set. Although the predicted
Ns provided by the cracking program is still incorrect, it shares
a common factor with the actual value, resulting in some correct
prediction on the future channel usage. TPR and Accuracy then
Figure 6: Cracking time with different length of snooping.
increase slowly when the training set is increasing from 266,631 to
711,016 eavesdropped time slots. TPR and Accuracy reach 85.15%
and 94.18% with 799,893 eavesdropped slots, providing accurate
prediction on the channel usage. This is because the training set
includes enough observations for the attacking program to produce
the correct Ns leading to accurate channel usage prediction. After
that, the increases of TPR and Accuracy become moderate when
the training set is larger than 1,777,540 slots (TPR ranging from
96.09% to 97.20% and Accuracy ranging from 97.03% to 97.31%). We
observe a similar trend on TNR.
Figure 6 shows the time consumed by the attacking program
to crack the channel hopping sequence7. The time consumption
increases linearly from 924s (88,877 slots) to 13430s (2,133,048 slots),
which accords with the O(Nr) time complexity of Algorithm 1.
Observation 1: An attacker can predict the TSCH channel hopping
sequences accurately under realistic traffic.
Observation 2: A sudden increase on prediction accuracy does not
warrant a correct predicted Ns .
Observation 3: The attacker can predict the channel usage accu-
rately when the observations are large enough to derive Ns . After
that, more observations are desired to further improve the prediction
accuracy with small additional value.
4.3 Impact of Slotframe Length
To explore the impact of slotframe length on the cracking difficulty,
we perform five sets of experiments and increase the length of the
combined slotframe roughly 10 times for each set (from 54 slots
to 578,429 slots). Table 2 lists the number of slots in each type of
slotframe as well as the product and LCM of them. In each set of
experiments, we run the experiments three times with different
7The snooping period is not added into the result.
Cracking the Channel Hopping Sequences in TSCH Networks
IoTDI ’19, April 15–18, 2019, Montreal, QC, Canada
(a) TPR and Precision.
(b) Time Consumption.
Figure 7: Cracking performance with different slotframe length.
Table 2: Slotframe Composition.
No.
1
2
3
4
5
Syn Routing App
27
18
20
21
17
23
37
53
397
47
9
10
11
23
31
Product
4374
4200
4301
45103
578429
LCM
54
420
4301
45103
578429
amount of training data, namely eavesdropped with 5,000, 30,000,
and 150,000 time slots. We use the next 45,000 slots for validation.
Figure 7(a) plots TPR and Precision of the predictions with dif-
ferent combined slotframe lengths. As Figure 7(a) shows, TPR and
Precision decrease when the slotframe length becomes larger. For
example, with 5,000 eavesdropped time slots in the training data,
TPR and Precision are high (89.19% for TPR, 100% for Precision)
while the slotframe length is 54 slots. The slotframe length is so
short that such few observations are enough to identify the channel
usage repetition and provide a correct Ns. TPR decreases sharply to
40.16% when the slotframe length is 420 slots. Since the predicted
NS shares a common factor (210) with the correct one, Precision still
can reach 100%. With the slotframe length increasing from 4,301
to 578,429 slots, TPR and Precision decrease significantly (TPR
dropping from 35.75% to 13.12%, Precision dropping from 99.49%
to 89.04%), indicating that the eavesdropped slots are too short to
identify a complete channel usage repetition cycle. Similarly, with
30,000 eavesdropped slots in the training data, both TPR and Preci-
sion are 100% when the slotframe includes 54 or 420 slots. This is
because the eavesdropped activities are enough for Algorithm 1 to
produce the correct Ns and identify all scheduled slots. After the
slotframe length reaches 4,301 slots, TPR and Precision experience
a significant decrease (TPR ranging from 79.48% to 50.28%, Preci-
sion ranging from 83.69% to 61.13%), indicating the eavesdropped
slots are too short to identify a complete repetition cycle. A similar
trend is observed when there are 150,000 eavesdropped slots in the
training data.
Within each group of bars in Figure 7(a), TPR increases with
the training data size. For example, TPR increases from 35.75%
(5,000 eavesdropped slots) to 79.48% (30,000 eavesdropped slots),
and finally becomes 100% (150,000 eavesdropped slots), when the
slotframe length is 4,301 slots. 5,000 eavesdropped slots are too
short for Algorithm 1 to pinpoint a repetition cycle, while 30,000
eavesdropped slots are enough to provide the correct Ns. When
the training set includes 150,000 eavesdropped slots, it is large
enough to identify all slots with scheduled transmissions. Due to
insufficient observations, Precision decreases while TPR increases
for some group of bars. Precision drops from 89.04% (5,000 slots)
to 61.13% (30,000 slots), reaches 38.31% (150,000 slots) when the
slotframe length is 578,429 slots. The observations are insufficient
for the cracking program, so TPR increases at the cost of generating
more FP, making Precision decrease dramatically.
Figure 7(b) presents the time consumed by the attacking program
to crack the channel hopping sequences. In each set of experiments,
the time consumption increases approximately linearly with the
increase of eavesdropped time slots, confirming the time complexity
of Algorithm 1. For instance, the time consumption increases from
0.55s (5,000 slots) to 16.01s (30,000 slots), then to 122.20s (150,000
slots) when the slotframe length is 54 slots.
Observation 4: The combined slotframe length plays an important
role in keeping the channel hopping sequence unpredictable. A larger
slotframe significantly increases the cracking difficulty.
Observation 5: It is beneficial to use a prime number for each
slotframe length, which effectively enlarges the combined slotframe.
Observation 6: TPR may increase at the cost of decreasing Preci-
sion when the snooping period is smaller than the slotframe length.
A low precision caused by insufficient observations may expose the
attacker during jamming.
4.4 Impact of Strong Transmission Pattern
When performing the above experiments, we observe that there ex-
ist some time slots showing strong cyclic patterns of transmissions,
which help the attacking program to identify the repetition cycles.
The transmissions cyclic behavior is introduced by the scheduling
design in Orchestra. For example, a fixed and shared slot in the
routing slotframe is assigned for all network devices to exchange
routing related packets including the DODAG Information Object
(DIO) and Destination Advertisement Object (DAO) messages and
the device i uses the ith slot in the synchronization slotframe to
broadcast beacons and jth slot to receive beacons from its parent
(device j). After observing the patterns, the attacking program can
first extract the channel activities with these patterns from the
IoTDI ’19, April 15–18, 2019, Montreal, QC, Canada
Xia Cheng, Junyang Shi, and Mo Sha
(a) TPR, Precision Comparison.
(b) Time Consumption Comparison.
Figure 8: Cracking performance after removing the strong repetitions.
observations and then perform the cracking. We repeat the experi-
ments when applying this tailored attacking method. Figure 8(a)
compares TPR and Precision between the original attacking pro-
gram (Origin) and the tailored version (Acceleration) when the
length of the training set is 30,000 slots. TPR and Precision are 100%
for both methods when the slotframe length is 54 and 420 slots.
This is because these observations are enough for both methods to
derive the correct Ns. TPR and Precision of Acceleration are much
higher than Origin (100% and 100% for Acceleration, 79.48% and
83.69% for Origin) when the slotframe includes 4,301 slots. TPR and
Precision of Acceleration are also much higher when the slotframe
lengths are 45,103 and 578,429 slots. Figure 8(b) compares the time