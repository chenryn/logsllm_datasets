The vulnerability discussed in this section was found in the oﬀicial desktop app for a popular content
management system (CMS). As the vulnerability has not been fixed yet as of the time of writing, the app’s
name cannot be mentioned. The code sample shown here is also not taken directly from the app’s source
code but has been modified to only demonstrate the concept.
The vulnerability allows an attacker who is able to execute JavaScript code in the context of a website
that uses this CMS to access privileged Node.js functions and thus gain RCE. The attacker could achieve
this by either finding an XSS vector or by having write access to a website that is shared with other users.
For example, the attacker could create a website using the CMS, place the payload as described below onto
their site and then invite another user to edit the site with them. As soon as this other user opens the
website in the desktop app, the attacker gains RCE on their computer.
The problem is caused by the app’s use of the unmaintained Devtron4 tool which was a plugin for
Electron apps that extended the Chromium DevTools with various Electron-specific features like details
on the dependencies and the ability to monitor IPC calls. Devtron needs access to certain Node.js APIs to
work. The app exposes them to the window from a preload script like so:
window.__devtron = { require: require, process: process };
The user’s site is loaded in an  which does not have access to this global variable. However, it
can be accessed through window.parent.__devtron. Thus, the attacker simply needs to inject the following
HTML code into the site to read sensitive data on the user’s system for example. Other possible exploits
were already given in Section 4.1.
3See: https://github.com/jitsi/jitsi-meet-electron/commit/ca1eb702507fdc4400fe21c905a9f85702f92a14
4https://github.com/electron-userland/devtron
6.3. XSS and RCE in Note-taking App
43
This vulnerability was tested using the latest version of the app as available on its website. It was reported
to the developers on July 26, 2020. No fix has been implemented as of the time of writing.
6.3. XSS and RCE in Note-taking App
The vulnerability discussed in this section was found in a note-taking app. As this vulnerability has not
been fixed yet either, the details are also obfuscated and the name is not mentioned.
First, two XSS vectors were found in the note title field. An attacker can control this value by using the
app’s “shared notes” feature which allows multiple users to work on the same note. No special payloads
are necessary, the attacker can simply include any HTML, including  tags, in the title. The code
is executed in two cases: Whenever the app loads the user’s notes and when the user selects multiple notes.
In both cases, the app is essentially assigning the note title directly to element.innerHTML like this:
function showNote(title, body) {
document.getElementById('note-title').innerHTML =
`${title}`;
// […]
}
It is further trivially possible to escalate this XSS vector into RCE as the app has Node integration
enabled, giving the renderer process access to all Node.js APIs. Ways to exploit this were already given
in Section 4.1. The attacker could for example open the calculator on Windows by including the following
snippet in the note title:
The vulnerability was tested using the latest version of the app as available on its website. It was reported
to the developers on June 28, 2020. A follow-up email was sent on July 22, 2020. No response has been
received to either as of the time of writing and the vulnerability remains.
6.4. RCE in Bug Tracking App
This vulnerability was found in an unoﬀicial companion desktop app for a popular bug tracking website.
The app embeds this website and provides additional convenience features like desktop notifications and
advanced filtering. As the vulnerability has not been fixed as of the time of writing, the name of the app
cannot be mentioned and the details are obfuscated.
The attack also works through Electron’s shell.openExternal() as previously discussed. The de-
tails here are a little different, though. The app does not just redirect the creation of new windows to
shell.openExternal() as seen in Section 6.1 for example. Instead, it adds an event listener for the click
event of  elements from the renderer process. As this process doesn’t have access to privileged functions
by default (although the app could have exposed them as discussed), it instead prints a special message to
the console if the link should be opened in the browser:
for (const element of document.getElementsByTagName('a')) {
element.addEventListener('click', function(event) {
6.4. RCE in Bug Tracking App
44
const url = event.target.href;
if (!url.startsWith('https://bug-tracker.tld/')) {
event.preventDefault();
console.log(`CMD-OPEN-IN-BROWSER|${url}`);
}
});
}
The main process then adds a listener for console messages that actually passes the respective URLs to
shell.openExternal():
window.webContents.addListener('console-message', function(event, level, message) {
if (message.startsWith('CMD-OPEN-IN-BROWSER|')) {
const url = message.split('CMD-OPEN-IN-BROWSER|')[1];
require('electron').shell.openExternal(url);
}
});
Thus, an attacker only needs to somehow cause a message of the form OPEN_EXTERNAL_BROWSER:
to be logged to the console, where  is a payload as described in Section 4.2. This is possible if the
user has enabled opening external sites in the app’s internal browser from the settings. Now, the attacker
can simply leave a comment with a link to a site containing such a console.log() call in a public bug
tracker. Upon clicking this link from the app, the exploit will be triggered.
The vulnerability was tested using the latest version of the app from its website. It was reported to the
developers on July 26, 2020. No fix has been implemented as of the time of writing.
7. Takeaways
7.1. Security-Consciousness in Electron Apps
The previous chapter’s automated analysis produced statistics on the security-related practices of a large
number of Electron apps. While these results of course cannot give a complete picture, they do allow gaining
some insights into the security-consciousness of Electron apps in the wild.
The analysis revealed that about two thirds of the analysed apps used an unsupported version of Electron
(i.e. version 6 or below). While the dataset likely contains some apps that have been discontinued and aren’t
updated anymore, only apps that are either on Electron’s oﬀicial app list or have at least 50 stars on GitHub
were included, ensuring that the analysis only considers apps that receive at least some use by end users.
It also showed common use of dangerous functions. About half of the apps used a function to dangerously
insert HTML into the page at least once, almost an eighth of the apps included at least one dangerous
call to one of Node.js’ functions for executing code on the host computer and half of the apps called
shell.openExternal() at least once. While all these functions can be used securely, it is easy to get
wrong and their use is generally discouraged in light of safer alternatives. The manual analysis showed
that there are plenty of cases of insecure uses of these functions that in the best case allow an attacker to
escalate an attack vector they have found and in the worst case enable attacks in the first place.
Some of these problems could have been prevented through the use of a CSP which, when configured
correctly, only allows trusted code to be executed and can in that regard stop XSS attacks. Unfortunately,
less than 8 % of apps even included a CSP anywhere in their code. And of the CSPs that were found, 90 %
were classified as weak or maybe weak by Google’s CSP evaluator.
Further, many attacks could have also been prevented or at least lessened in severity by the use of
secure web preferences. The analysis showed that those aren’t common either, though. It revealed a heavy
reliance on the default values which, as of the time of writing, mostly aren’t optimized for security yet.
75 % of the apps still have Node integration enabled, allowing for trivial escalation from XSS to RCE as
discussed. And barely any apps have enabled context isolation despite the explicit recommendations of the
Electron developers. Without context isolation, disabling Node integration is of little use as it can usually
be bypassed as shown.
Finally, the analysis showed a few apps using Electron as a wrapper around existing websites instead
of shipping a local site with specific Electron optimizations. As explained in Section 3.3, Electron is not
designed as a “browser” and special considerations need to be made in order to allow loading remote sites
safely. This thesis didn’t specifically analyse those apps loading only remote sites for whether they chose
the correct settings. Given the general tendency to stick with the default values however, one has to assume
that many of those apps are configured insecurely and thus risk RCE for their users.
Thus, while the situation is definitely improving with secure defaults starting to be introduced and more
experience with security problems specifically in the context of Electron leading to better design choices
and implementations, a lot of room is still left for improvement. The following two sections will present
some suggestions on how this can be achieved.
7.2. Recommendations to Electron Developers
46
7.2. Recommendations to Electron Developers
Based on what was learned in this thesis, the following recommendations are made to the Electron de-
velopers on how to continue the security improvements and make developing secure Electron applications
easier:
While there is a comprehensive guide on Electron security1 that explains the importance of keeping
Electron apps secure and provides a checklist of aspects to consider, a large part of the Electron
documentation is still not written with security in mind, often containing examples that violate the
security checklist. For example, the beginner tutorial on writing the first app2 explicitly enables Node
integration, overriding the secure default that has been implemented in version 5.0, same as the default
boilerplate3 that each Electron Fiddle starts with. The FAQ entry on sharing data between pages4
and the application architecture guide5 both assume that Node integration is enabled and don’t even
provide any alternatives on how the desired outcome could be achieved without Node integration.
And while the quick start template repository6 doesn’t enable Node integration, it doesn’t follow
other recommended practices like enabling context isolation.
These are just some examples from the oﬀicial Electron documentation, not even taking into account
third-party sites and tutorials. A developer wanting to learn how to use Electron will, in the best case,
be introduced to a world of Node integration always being available, probably not even knowing about
context isolation, only to find the security tutorial and have to relearn and reconsider all that. In the
worst case, they will stop before finding the security tutorial and assume what they have learned to
be the best practices.
To encourage secure practices among developers, they need to be featured prominently in the docu-
mentation right from the start. Deprecated practices like Node integration should only be mentioned
with clear warnings of their problems. Boilerplates and templates need to come with secure settings.
A common use case of Electron apps is opening a URL in the user’s default browser instead of
the app. Often, shell.openExternal() is used for this purpose. Many developers don’t seem to be
aware of the dangers of passing arbitrary inputs to this function, thinking it would just allow opening
arbitrary sites in the browser. To combat this problem, a shell.openInBrowser() function should
be introduced that can be safely used for this purpose. Ideally, the implementation of this function
would include platform-specific handlers to guarantee that it can only be used to open the browser
but as a first step, a simple wrapper around shell.openExternal() that filters on the passed URL
and only allows http:// and https:// URLs would suﬀice.
Electron grants all permissions to all sites by default. While this is definitely useful for apps that rely
on these permissions and the request dialogs that browsers use may not be suitable in the context
of desktop applications, many apps don’t need these permissions, and they just present unnecessary
attack surface. A reasonable compromise here would be denying all permission requests by default
but allowing apps to change this behaviour via the web preferences. The apps that actually need the
permissions could then decide whether to always grant them or whether to implement a permission
request handler just like currently. But apps that don’t need them couldn’t forget to turn them off
anymore.
1https://www.electronjs.org/docs/tutorial/security
2https://www.electronjs.org/docs/tutorial/first-app#electron-development-in-a-nutshell
3https://github.com/electron/fiddle/blob/master/src/content/main.ts
4https://www.electronjs.org/docs/faq#how-to-share-data-between-web-pages
5https://www.electronjs.org/docs/tutorial/application-architecture#using-electron-apis
6https://github.com/electron/electron-quick-start
7.3. Recommendations to App Developers
47
As already requested on the issue tracker of the asar package [30], code signing for .asar files should
be possible.
Even though the dangers are fairly minimal, there is little reason to enable the Chromium DevTools
by default in production builds.
7.3. Recommendations to App Developers
Further, the following recommendations are made to developers of Electron apps:
Regularly update to the latest Electron version. These often fix security vulnerabilities and update
the underlying Chromium and Node.js versions. Without an up-to-date version of Electron, it is
impossible to secure an app.
In the same vein, the other dependencies also need to be regularly updated.
While Electron is slowly migrating to secure defaults, it is important to consciously and proactively set
secure preferences, even when this means having to rewrite parts of the application. Most importantly,
Node integration should be disabled and context isolation should be enabled, which is also what the
Electron developers recommend [38].
The use of automated security scanners like Electronegativity can help catch problems and avoid
releasing insecure apps. Not all issues found by such scanners will be relevant, but they should still
always be taken seriously.
Privileged APIs should only be used carefully. Ideally, they should not be exposed to the renderer
process. If that isn’t possible, they need to be wrapped in order to heavily restrict the inputs the
renderer process can pass to them.
8. Related Work
8.1. Foundational Research
A lot of the research on Node.js is also relevant for Electron. In 2012, Ojamaa and Düüna [81] did an early
exploration of Node.js security, comparing it to the previously known considerations for JavaScript in the
browser. This bears some similarity to the research on Electron. Back then, Node.js was a fairly new frame-
work that brought previously client-side code to a new target, the server, introducing new privileged APIs
in the process. They also explored a number of similar attack vectors, like prototype pollution, malicious
packages and the lack of a sandbox.
In January 2017, Tal [16] published a book on Node.js security, focussing on server applications using
the Express framework. It however also goes into injection attacks and XSS flaws as well as dependency
management. In February 2018, Staicu et. al. [82] did a large-scale study across modules to find injec-
tion vulnerabilities, focussing on the lack of a sandbox in Node.js. They presented Synode, an automatic
mitigation mechanism for these problems.
Samuel et. al. [83] started a continuously maintained roadmap on Node.js security that explains various
threats and attack vectors and lays out how they can be addressed. Security software company Snyk [84]
publishes a yearly report on the state of security in open source packages, including packages on NPM. In
addition, Tal and Picado [85] also posted a checklist of security best practices for Node.js on Snyk’s blog
in February 2019.
8.2. Research on Electron
In July 2017, Carettoni, one of the founders of Doyensec, gave a talk [86] explaining the problems of Node
integration and why context isolation is necessary. They also released a white paper [33] with a checklist
of common security pitfalls in Electron apps. This checklist formed the basis for Electronegativity. The
same month, Austin [87] gave a talk on how they exploited bugs in Markdown parsers to gain XSS in
most popular IDEs built on Electron and how they used Node integration and shell.openExternal() to
escalate these into RCE.
In December 2017, Väli [88] did a study manually gathering statistics on 30 Electron apps and their
libraries, web preferences and remote content. They further did a manual analysis for XSS vulnerabilities
that can be escalated to RCE using Node integration. In August 2018, Kinugawa [41] gave a talk on how a
lack of context isolation can be used to bypass Node integration. Kinugawa had originally discovered that
Node integration can be bypassed this way and context isolation was added as an option to Electron due to
their report. In December 2018, Rapley et. al. [89] studied 15 popular Electron apps for vulnerabilities in
their dependencies by checking for a difference of 150 or more commits between the included version and
the upstream version. They also introduced the Mayall framework for malicious updates in Electron apps
through insecure update mechanisms.
Most of the research on Electron security is not done in a formal academic context or for conferences
but by companies and individuals. The vulnerability reports listed in Appendix A.1 cover a good portion
of the published results. Further, Doyensec have many write-ups and other research on their blog [90].
8.3. Research on Similar Frameworks
49
8.3. Research on Similar Frameworks
There are also some other frameworks for developing desktop applications using web technologies that are
a potential alternative to Electron. First and foremost, NW.js1 started out as node-webkit and is actually
a predecessor to Electron. NW.js is similar to Electron with a few notable differences [91]: For NW.js
apps, the entry point is an HTML page as opposed to a JS file. NW.js requires a special patched version
of Chromium, while Electron uses the oﬀicial release. And NW.js offers a legacy release with support for
Windows XP, whereas Electron only supports Windows 7 and up.
In May 2015, Benoit [92] published a book on NW.js that explains the framework and also goes into some
security considerations. The oﬀicial documentation [93] also contains a section on security but focusses
solely on the differences between Node frames and normal frames.
Further, there is Tauri2 (previously called Proton) which promises faster and smaller applications [94].
It is written in Rust and relies on the systems’ native webview components using the web-view library3
instead of Chromium. They do also explicitly focus on security [95]. Finally, there is NeutralinoJs [96] which
focusses on lightweight applications [97]. NeutralinoJs also uses the systems’ native webview components
and further ships with its own lightweight server alternative to Node.js [98]. No external security research
has been published on either of the two yet as they are still young.
1https://nwjs.io/
2https://tauri.studio/
3https://github.com/Boscop/web-view
9. Conclusion
This thesis has shown that while there is of course overlap between the attack vectors for the web and
Electron, there are often important differences in severity, and Electron brings its own list of security pitfalls
that need to be considered: First and foremost, XSS is particularly dangerous in the context of Electron.
Depending on the settings, it can be directly escalated to RCE or used to interfere with the privileged
part of the application to jumpstart further attacks. To avoid this and other problems, it is crucial to
choose secure settings like disabling Node integration and enabling context isolation. Further, functions
like shell.openExternal() are more dangerous than most developers seem to be aware. And even though