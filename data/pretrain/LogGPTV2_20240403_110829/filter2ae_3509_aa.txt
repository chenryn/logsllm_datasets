**作者：Koalr @ 长亭科技**  
**原文链接：[https://mp.weixin.qq.com/s/jV3B6IsPARRaxetZUht57w
](https://mp.weixin.qq.com/s/jV3B6IsPARRaxetZUht57w
"https://mp.weixin.qq.com/s/jV3B6IsPARRaxetZUht57w ")  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！  
投稿邮箱：PI:EMAIL**
## 前言
Shiro 是 Apache 旗下的一个用于权限管理的开源框架，提供开箱即用的身份验证、授权、密码套件和会话管理等功能。该框架在 2016
年报出了一个著名的漏洞——Shiro-550，即 RememberMe 反序列化漏洞。4年过去了，该漏洞不但没有沉没在漏洞的洪流中，反而凭借其天然过 WAF
的特性从去年开始逐渐升温，恐将在今年的 HW 演练中成为后起之秀。面对这样一个炙手可热的漏洞，这篇文章我们就来讲下，我是如何从 0 到 1
的将该漏洞的自动化检测做到极致的。
## 漏洞成因
网上相关分析已经很多，使用了 Shiro 框架的 Web 应用，登录成功后的用户信息会加密存储在 Cookie 中，后续可以从 Cookie
中读取用户认证信息，从而达到“记住我”的目的，简要流程如下。在 Cookie 读取过程中有用 AES 对 Cookie 值解密的过程，对于 AES
这类对称加密算法，一旦秘钥泄露加密便形同虚设。若秘钥可控同时 Cookie 值是由攻击者构造的恶意 Payload，就可以将流程走通，触发危险的 Java
反序列化。在 Shiro 1.2.4 及之前的版本，Shiro 秘钥是硬编码的一个值 `kPH+bIxk5D2deZiIxcaaaA==`，这便是
Shiro-550 的漏洞成因。但这个漏洞不只存在于 1.2.4
版本，后续版本的读取流程没有什么改动，这就意味着只要秘钥泄露，依然存在高危风险。有趣的是，国内不少程序员习惯性的 copy/paste，一些 Github
示例代码被直接复制到了项目中，这些示例中设置秘钥的代码也可能被一并带到项目中，这就给了安全人员可乘之机，后来出现的 Shiro Top 100 Key
便是基于此原理收集的，这大概也是该漏洞经久不衰的一个侧面因素吧。
## 反序列化利用链提纯
Shiro 作为 Java 反序列化漏洞，想要完成漏洞利用必然少不了利用链的讨论。如果你之前有尝试复现过这个漏洞，大概率用过
`CommonsCollections4`或 `CommonsBeanutils`两条利用链，比如 vulhub 中该漏洞的靶站就使用了后者作为
gadget。作为一个初入 Java 安全的小白，我当时很疑惑 CommonsCollections 系列 gadget
到底有何区别，为何这里只能用上述的两条链，上面的利用链对目标环境的适用程度又是如何？这些问题不搞清楚，漏洞检测就无从谈起。作为知识储备，我花三分钟研究了一下常见的
Java 反序列化利用链，发现 ysoserial 中 Commons 相关利用链都是如下模子出来的:
不同的利用链从不同角度给了我们反序列化的一些思路，熟悉这个规律后，我们完全可以自己组合出一些另外的利用链。不过利用链不求多但求精，少一条无用的利用链就意味着可以减少一次漏洞探测的尝试。于是我将原有的
CommonsCollections1~7 进行了浓缩提纯，变成了如下新的 4 条利用链:
  * CommonsCollectionsK1 (commons-Collections <= 3.2.1 && allowTemplates)
  * CommonsCollectionsK2 (commons-Collections == 4.0 && allowTemplates)
  * CommonsCollectionsK3 (commons-Collections <= 3.2.1)
  * CommonsCollectionsK4 (commons-Collections == 4.0)
从分类上看分为两组，一组是 K1/K2，对应于 `TemplatesImpl`的情况，一组是 K3/K4，对应于
`ChainedTransformer`的情况。这 4 条链不仅可以完整的覆盖原有的 7
条链支持的场景，也可以在一些比较特殊的场景发挥作用，这些特殊的场景就包含接下来要讨论的 Shiro 的情况。
## 无心插柳的反序列化防护
前面做了这么多准备，我们还是没有搞清楚上一节提出的问题，现在是时候正面它了！稍加跟进源码会发现，Shiro 最终反序列化调用的地方不是喜闻乐见的
`ObjectInputStream().readObject`，而是用 `ClassResolvingObjectInputStream`封装了一层，在该
stream 的实现中重写了 `resolveClass`方法
我们发现原本应该调用 `Class.forName(name)`的地方被替换成了几个
`ClassLoader.loadClass(name)`，这两种加载类的方式有以下几点区别:
  * `forName`默认使用的是当前函数内的 ClassLoader， `loadClass`的 ClassLoader 是自行指定的
  * `forName`类加载完成后默认会自动对 Class 执行 initialize 操作， `loadClass`仅加载类不执行初始化
  * `forName`可以加载任意能找到的 Object Array， `loadClass`只能加载原生(初始)类型的 Object Array
在这3点中，对我们漏洞利用影响最大的是最后一条。回看上一节说的那个规律，有一些利用链的终点是
`ChainedTransformer`，这个类中的有一个关键属性是 `Transformer[] iTransformers`，Shiro
的反序列化尝试加载这个 `Transformer`的 Array 时，就会报一个找不到 Class 的错误，从而中断反序列化流程，而这就是
CommonsCollections 的大部分利用链都不可用的关键原因。 阅读代码可以感受到，重载的 `resolveClass`本意是为了能支持从多个
ClassLoader 来加载类，而不是做反序列化防护，毕竟后续的版本也没有出现 ~~WebLogic 式增加黑名单然后被绕过的情况~~
。这一无心插柳的行为，却默默阻挡了无数次不明所以的反序列化攻击，与此同时，`CommonsCollections4`和
`CommonsBeanutils`两个利用链由于采用了
`TemplatesImpl`作为终点，避开了这个限制，才使得这个漏洞在渗透测试中有所应用。ysoserial 中的
`CommonsCollections4`只能用于 CC4.0 版本，我把这个利用链进行了改进使其支持了 CC3 和 CC4 两个版本，形成了上面说的
K1/K2 两条链，这两条链就是我们处理 Shiro
这个环境的秘密武器。经过这些准备，我们已经从手无缚鸡之力的书生变为了身法矫健的少林武僧，可以直击敌方咽喉，一举拿下目标。万事具备，只欠东风。
## 东风何处来