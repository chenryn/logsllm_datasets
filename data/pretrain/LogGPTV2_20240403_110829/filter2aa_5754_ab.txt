.PP
.Vb 2
\&    (unlink $file) || die "snafu";
\&    unlink $file or die "snafu";
.Ve
.PP
这些“英文的”运算子 (and, or, xor,及 not)是刻意设计成较一般序列运算子低的优先顺序，这就是为了解决前述的状况。
.PP
另一个拥有出人意料的优先顺序者为指数。它甚至高于负号，这使得 \f(CW\*(C`\-2**2\*(C'\fR变成负四而非正四。他同时也会“向右靠”(right-associate)，意思是说 \f(CW\*(C`2**3**2\*(C'\fR 代表二的九次方，而不是八的平方。
.PP
Although it has the same precedence as in C, Perl's \f(CW\*(C`?:\*(C'\fR operator
produces an lvalue.  This assigns \f(CW$x\fR to either \f(CW$a\fR or \f(CW$b\fR, depending
on the trueness of \f(CW$maybe:\fR
.PP
.Vb 1
\&    ($maybe ? $a : $b) = $x;
.Ve
.Sh "我如何声明/创建一个数据结构？"
.IX Subsection "How do I declare/create a structure?"
一般来说，我们不 ``声明'' 一个结构。用一个 (通常是匿名的) 散列的引用 (hash reference)即可。参看 perlref 以及 perldsc，里面有更多资料。以下是一个范例：
.PP
.Vb 3
\&    $person = {};                   # new anonymous hash
\&    $person->{AGE}  = 24;           # set field AGE to 24
\&    $person->{NAME} = "Nat";        # set field NAME to "Nat"
.Ve
.PP
如果你要的是更严谨的写法，看看 perltoot 。
.Sh "如何创建一个模块？"
.IX Subsection "How do I create a module?"
一个模组就是一个放在同名档案里的包裹(package)。例如，Hello::There模组会放在Hello/There.pm。perlmod 里有详尽说明。Exporter 也会很有帮助。如果你正在写一个 C 或是混合了 C及 Perl 的模组，那么你就该读 perlxstut 。
.PP
The \f(CW\*(C`h2xs\*(C'\fR program will create stubs for all the important stuff for you:
.PP
.Vb 1
\&  % h2xs -XA -n My::Module
.Ve
.PP
The \f(CW\*(C`\-X\*(C'\fR switch tells \f(CW\*(C`h2xs\*(C'\fR that you are not using \f(CW\*(C`XS\*(C'\fR extension
code.  The \f(CW\*(C`\-A\*(C'\fR switch tells \f(CW\*(C`h2xs\*(C'\fR that you are not using the
AutoLoader, and the \f(CW\*(C`\-n\*(C'\fR switch specifies the name of the module.
See h2xs for more details.
.Sh "如何创建一个类？"
.IX Subsection "How do I create a class?"
perltoot 里面有对于类和对象的介绍， perlobj 和 perlbot 也有。
.Sh "如何知道一个变量是否是污染的？"
.IX Subsection "How can I tell if a variable is tainted?"
可以使用 Scalar::Util 模块中的 \fItainted()\fR 函数 (可从 CPAN 获取，也包含在 Perl 5.8.0 中)。参见 perlsec 中的 \*(L"Laundering and Detecting Tainted Data\*(R" 。
.Sh "什么是闭包？"
.IX Subsection "What's a closure?"
关于闭包的说明，请看 perlref 。
.PP
闭包 (closure)是个精确但又很难解释的计算机科学名词。在 Perl 里面，闭包是以匿名函数的形式来实现，具有持续参照位于该函数范围之外的文字式变数值的能力。这些外部的文字变数会神奇地保留它们在闭包函数最初定义时的值 (深连结)。
.PP
如果一个程式语言容许函数递回另一个函数的话 (像 Perl 就是)，闭包便具有意义。要注意的是，有些语言虽提供匿名函数的功能，但却无法正确处理闭包； Python 这个语言便是一例。如果要想多了解闭包的话，建议你去找本功能性程式设计的教科书来看。Scheme这个语言不仅支援闭包，更鼓励多加使用。
.PP
以下是个典型的产生函数的函数：
.PP
.Vb 3
\&    sub add_function_generator {
\&      return sub { shift + shift };
\&    }
.Ve
.PP
.Vb 2
\&    $add_sub = add_function_generator();
\&    $sum = $add_sub->(4,5);                # $sum is 9 now.
.Ve
.PP
闭包用起来就像是个 函数样板，其中保留了一些可以在稍后再填入的空格。 add_function_generator() 所递回的匿名函数在技术上来讲并不能算是一个闭包，因为它没有用到任何位在这个函数范围之外的文字变数。
.PP
把上面这个例子和下面这个 make_adder()函数对照一下，下面这个函数所递回的匿名函数中使用了一个外部的文字变数。这种指名外部函数的作法需要由 Perl递回一个适当的闭包，因此那个文字变数在匿名函数产生之时的值便永久地被锁进闭 包里。
.PP
.Vb 4
\&    sub make_adder {
\&        my $addpiece = shift;
\&        return sub { shift + $addpiece };
\&    }
.Ve
.PP
.Vb 2
\&    $f1 = make_adder(20);
\&    $f2 = make_adder(555);
.Ve
.PP
这样一来 \f(CW\*(C`&$f1($n)\*(C'\fR 永远会是 20加上你传进去的值 \f(CW$n\fR ，而 \&\f(CW\*(C`&$f2($n)\*(C'\fR 将 永远会是 555加上你传进去的值 $n。\f(CW$addpiece\fR 的值会在闭包中保留下来。
.PP
闭包在比较实际的场合中也常用得到，譬如当你想把一些程式码传入一个函数时：
.PP
.Vb 2
\&    my $line;
\&    timeout( 30, sub { $line =  } );
.Ve
.PP
如果要执行的程式码当初是以字串的形式传入的话，即 \f(CW'$line = '\fR ，那么 timeout() 这个假想的函数在回到该函数被呼叫时所在的范围后便无法再撷取 \f(CW$line\fR 这个文字变数的值了。
.Sh "什么是变量自杀，我应该怎样防止它？"
.IX Subsection "What is variable suicide and how can I prevent it?"
变数自杀指的是 (暂时或是永久)地失去一个变数的值。造成这个现象的原因是做范围界定的 my() 和 local()和闭包或 foreach()回圈变数及函数参数相互影响 所致。过去很容易偶尔丢失变量，现在就困难多了，可以试试这段代码：
.PP
.Vb 6
\&    my $f = "foo";
\&    sub T {
\&      while ($i++  10, that => 20 }   );
.Ve
.Sp
.Vb 2
\&    func( \e&some_func   );
\&    func( sub { $_[0] ** $_[1] }   );
.Ve
.IP "传递文件句柄" 4
.IX Item "Passing Filehandles"
在 Perl5.6 中，你可以用标量变量表示文件句柄，并将它与其他标量同样处理
.Sp
.Vb 2
\&        open my $fh, $filename or die "Cannot open $filename! $!";
\&        func( $fh );
.Ve
.Sp
.Vb 2
\&        sub func {
\&                my $passed_fh = shift;
.Ve
.Sp
.Vb 2
\&                my $line = ;
\&                }
.Ve
.Sp
在 Perl5.6 之前，必须用 \f(CW*FH\fR 或 \f(CW\*(C`\e*FH\*(C'\fR 语法。这叫做 \*(L"typeglobs\*(R"\-\-参见 perldata 中的 \*(L"Typeglobs and Filehandles\*(R" 和 perlsub 中的 \*(L"Pass by Reference\*(R"。
.IP "传递正则表达式" 4
.IX Item "Passing Regexes"
要传递正则表达式，你需要使用足够新的 Perl 发行，足以支持 \f(CW\*(C`qr//\*(C'\fR 构造方式的版本，传递字符串，使用一个捕获异常的 eval，或者其他更聪明的办法。
.Sp
这里有一个如何传递正则表达式字符串的例子，使用 \f(CW\*(C`qr//\*(C'\fR:
.Sp
.Vb 6
\&    sub compare($$) {
\&        my ($val1, $regex) = @_;
\&        my $retval = $val1 =~ /$regex/;
\&        return $retval;
\&    }
\&    $match = compare("old McDonald", qr/d.*D/i);
.Ve
.Sp
注意 \f(CW\*(C`qr//\*(C'\fR 如何允许在后面加上标志。这个模式在编译期被编译，尽管它后来才执行。 \f(CW\*(C`qr//\*(C'\fR
表示法虽然好用，但是直到 5.005 发行中才引入。在那之前，你必须用不直观的办法。例如，如果没有 \f(CW\*(C`qr//\*(C'\fR 的话:
.Sp
.Vb 6
\&    sub compare($$) {
\&        my ($val1, $regex) = @_;
\&        my $retval = eval { $val1 =~ /$regex/ };
\&        die if $@;
\&        return $retval;
\&    }
.Ve
.Sp
.Vb 1
\&    $match = compare("old McDonald", q/($?i)d.*D/);
.Ve
.Sp
确保你没有任何这样的东西：
.Sp
.Vb 1
\&    return eval "\e$val =~ /$regex/";   # WRONG
.Ve
.Sp
否则别人会靠双引号括起来的字串以及 eval 双重解译的本质而偷偷插入 shell指令来作坏事。例如：
.Sp
.Vb 1
\&    $pattern_of_evil = 'danger ${ system("rm -rf * &") } danger';
.Ve
.Sp
.Vb 1
\&    eval "\e$string =~ /$pattern_of_evil/";
.Ve
.Sp
想学非常非常聪明的方法的读者可以参考 O'Reilly 出的 Mastering Regular Expressions这本书，作者是 Jeffrey Friedl。其中第 273页的 Build_MatchMany_Function()特别的有趣。在 perlfaq2中可以找到有关本书 的资料。
.IP "传递方法" 4
.IX Item "Passing Methods"
要传递一个对象方法给一个函数，可以这样做：
.Sp
.Vb 7
\&    call_a_lot(10, $some_obj, "methname")
\&    sub call_a_lot {
\&        my ($count, $widget, $trick) = @_;
\&        for (my $i = 0; $i $trick();
\&        }
\&    }
.Ve
.Sp
或者，使用一个闭包来包含这个对象，它的方法调用及参数：
.Sp
.Vb 6
\&    my $whatnot =  sub { $some_obj->obfuscate(@args) };
\&    func($whatnot);
\&    sub func {
\&        my $code = shift;
\&        &$code();
\&    }
.Ve
.Sp
也可以研究 UNIVERSAL 类别中的 can()方法 (附于标准 Perl 版本中)。
.Sh "How do I create a static variable?"
.IX Subsection "如何创建一个静态变量？"
就像与 Perl相关的其他事情一样，``条条大路通罗马'' (TMTOWTDI)。对其他语言来说叫做 ``静态变数'' (static variable)的东西，在 Perl里面可能是一个函数私有的变数(只有该函数自己看得到，且在不同的呼叫间保持定值)，或是一个档案私有(file-private)变数(只有同一个档案中的函数才看得到)。
.PP
以下就是实作函数私有变数的程式：
.PP
.Vb 5
\&    BEGIN {
\&        my $counter = 42;
\&        sub prev_counter { return --$counter }
\&        sub next_counter { return $counter++ }
\&    }
.Ve
.PP
prev_counter() 和 next_counter() 将会共用一个于编译时初始化的私有变数 $counter。
.PP
要声明一个档案私有(file-private)变数，你仍然得使用 my()，将它放在档案开头处最外围。假设现在是在 Pax.pm 这个档案里：
.PP
.Vb 2
\&    package Pax;