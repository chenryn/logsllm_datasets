100 KBytes
1 MByte
2.09 (.11)
Compound tput
1.79 (.18) Mbps
2.75 (.27)
3.9 (.13)
Cubic tput
1.31 (.16)
1.28 (.11)
We observe that this RemyCC does well at low duty cycles be-
cause it is able to grab spare bandwidth more quickly. At higher
duty cycles (with low mean off time), Cubic and Compound tend
to grab a higher share of the bandwidth. The results, however, are
close enough that we believe a RemyCC designed for competing
with more aggressive protocols may close the gap, while retaining
high performance when competing only with like-minded Remy-
CCs.
11.21.41.61.823264128Throughput (Mbps)Queueing delay (ms)VegasRemyδ=0.1Remyδ=1Remyδ=10CubicCompoundNewRenoXCPCubic/sfqCoDel0.40.50.60.70.80.9150100150200Normalized throughput shareRTT (ms)Cubic-over-sfqCoDelRemyCC (δ = 0.1)RemyCC (δ = 1)RemyCC (δ = 10)132On the cellular link traces, which are variable and were not de-
signed for, Remy’s schemes outperformed the existing congestion-
control algorithms (end-to-end or otherwise) when the maximum
degree of multiplexing was 4 or less, and outperformed the end-to-
end schemes and sfqCoDel when it was 8 or less. However, as the
network conditions grew farther aﬁeld from the supplied prior as-
sumptions, Remy’s performance declined, although the algorithms
were still competitive with traditional TCP congestion control on
the networks we examined.
6. DISCUSSION
Much remains unknown about the capabilities and limits of
computer-generated algorithms, much less decentralized algo-
rithms that cooperate indirectly across a network to achieve a com-
mon goal. Although the RemyCCs appear to work well on networks
whose parameters fall within or near the limits of what they were
prepared for — even beating in-network schemes at their own game
and even when the design range spans an order of magnitude vari-
ation in network parameters — we do not yet understand clearly
why they work, other than the observation that they seem to opti-
mize their intended objective well.
We have attempted to make algorithms ourselves that surpass
the generated RemyCCs, without success. That suggests to us that
Remy may have accomplished something substantive. But digging
through the dozens of rules in a RemyCC and ﬁguring out their
purpose and function is a challenging job in reverse-engineering.
RemyCCs designed for broader classes of networks will likely be
even more complex, compounding the problem.
Our approach increases endpoint complexity in order to reduce
the complexity of overall network behavior. Traditional TCP con-
gestion control speciﬁes simpler behavior for each endpoint, but
the resulting emergent behavior of a multiuser network is not easily
speciﬁed and is often suboptimal and variable, and even unstable.
By contrast, our approach focuses on maximizing a well-
speciﬁed overall objective at the cost of complex endpoint algo-
rithms. We think this tradeoff is advisable: today’s endpoints can
execute complex algorithms almost as easily as simple ones (and
with Remy, the bulk of the intelligence is computed ofﬂine). What
users and system designers ultimately care about, we believe, is the
quality and consistency of overall behavior.
Our synthesis-by-simulation approach also makes it easier to dis-
cuss competing proposals for congestion control. Today, it is not
easy to say why one ﬂavor of TCP or tweak may be preferred over
another. But if two computer-generated algorithms differ, there is a
reason: either they make different assumptions about the expected
networks they will encounter, or they have different goals in mind,
or one is better optimized than the other. This formulation allows
the implementer to choose rationally among competing options.
All that said, we have much to learn before computer-generated
algorithms will have proven themselves trustworthy:
• Other than by exhaustive testing, we don’t know how to pre-
dict the robustness of RemyCCs to unexpected inputs. Do
they break catastrophically in such situations?
• How would a RemyCC designed for a 10,000-fold range of
throughputs and RTTs perform?
• Although we are somewhat robust against a RemyCC’s latch-
ing on to the peculiarities of a simulator implementation (be-
cause RemyCCs are designed within Remy but then evalu-
ated within ns-2), we can’t be certain how well RemyCCs
will perform on real networks without trying them.
Figure 11: Performance of two end-to-end RemyCCs that were
designed with different prior information about the network,
compared with Cubic-over-sfqCoDel as the link speed varies.
Despite running only at the sender, the RemyCCs each out-
perform Cubic-over-sfqCoDel over almost their entire design
ranges. But when a RemyCC’s assumptions aren’t met, perfor-
mance deteriorates.
5.7 How helpful is prior knowledge about the network?
We investigated the performance beneﬁt conferred by having
more-speciﬁc prior information about the network, and what hap-
pens when that prior information is incorrect.
We used Remy to construct two additional RemyCCs, each for
a network with a known minimum RTT of 150 ms. For one Re-
myCC, the link speed was assumed to be 15 Mbps exactly. A sec-
ond RemyCC was designed to span a 10× range of link speeds,
from 4.7 Mbps to 47 Mbps. We also compared against Cubic-over-
sfqCoDel over this range.
The results are shown in Figure 11. On the particular link for
which the “1×” RemyCC was designed, it performs the best, but its
performance trails off quickly around that value. Within the range
of the “10×” RemyCC, it beats Cubic-over-sfqCoDel, but again
deteriorates when the true network violates its design assumptions.
The results show that more-speciﬁc prior knowledge is helpful and
improves performance — when it happens to be correct.
5.8 Summary of results
Using a few CPU-weeks of computation, Remy produced several
computer-generated congestion-control algorithms, which we then
evaluated on a variety of simulated network conditions of varying
similarity to the prior assumptions supplied at design-time.
On networks whose parameters mostly obeyed the prior knowl-
edge supplied at design range — such as the dumbbell network with
the 15 Mbps link — Remy’s end-to-end algorithms outperformed
all of the human-generated congestion-control algorithms, even al-
gorithms that receive help from network infrastructure.
RemyCC (δ = 0.1) achieved > 1.7× gains in median through-
put and > 2.7× reductions in median queueing delay against Cubic
and Compound, generally thought to be excellent general-purpose
congestion-control algorithms.
Against Cubic-over-sfqCoDel,
which has the beneﬁt of code running on network infrastructure,
RemyCC achieved a 40% increase in median throughput and a 7.8×
decrease in median queueing delay.
-6-5-4-3-2-104.741547.4log(normalized throughput) - log(delay)link speed (megabits/sec)Cubic-over-sfqCoDelRemyCC 1x(link speedknown a priori)RemyCC 10x(designed for link speedsin shaded region)133We believe that making congestion control a function of the de-
sired ends, and the assumptions we make about the network, is the
solution to allow the Internet and its subnetworks to evolve without
tiptoeing around TCP’s assumptions about how networks behave.
But many dots need to be connected before the the Internet at large
— as opposed to internal networks — might agree on a model that
could be used to prepare a “one-size-ﬁts-all” RemyCC.
7. CONCLUSION
This paper asks whether the design of distributed congestion-
control algorithms for heterogeneous and dynamic networks can be
done by specifying the assumptions that such algorithms are enti-
tled to have and the policy they ought to achieve, and letting com-
puters work out the details of the per-endpoint mechanisms.
Much future work remains before this question can be answered
for the real-world Internet, but our ﬁndings suggest that this ap-
proach has considerable potential.
We developed and evaluated Remy, a program that designs end-
to-end congestion-control algorithms to human-supplied speciﬁca-
tions. Remy’s outputs handily outperform the best-known tech-
niques, including ones that require intrusive in-network changes, in
scenarios where network parameters varied over one or two orders
of magnitude.
Our results, and many others in the literature, indicate that there
is no existing single congestion-control method that is the best
in all situations. Moreover, the set of “all situations” is rapidly
growing as new subnetworks and link technologies proliferate. A
computer-generated approach that maximizes an explicit function
of the throughput and delay to generate algorithms may be the right
way forward for the networking community. Today’s informal ap-
proach of hampering lower layers or providing vague advice on how
best to accommodate TCP should be replaced by end-to-end algo-
rithms (in TCP and elsewhere) that adapt to whatever the lower
layers are doing. Remy provides a way to achieve this goal.
8. ACKNOWLEDGMENTS
We are grateful to Anirudh Sivaraman for several contributions
to the simulator and for helpful discussions. We thank Leslie Kael-
bling, Christopher Amato, Scott Shenker, and our shepherd, Ranjita
Bhagwan. We thank Frans Kaashoek and Nickolai Zeldovich for
the use of multicore machines at MIT. KW was supported by the
Claude E. Shannon Research Assistantship. We thank the mem-
bers of the MIT Center for Wireless Networks and Mobile Com-
puting (Wireless@MIT), including Amazon.com, Cisco, Google,
Intel, Mediatek, Microsoft, ST Microelectronics, and Telefonica,
for their support. This work was also supported in part by NSF
grant CNS-1040072.
REFERENCES
[1] A. Akella, S. Seshan, R. Karp, S. Shenker, and C. Papadimitriou. Selﬁsh
Behavior and Stability of the Internet: A Game-Theoretic Analysis of TCP. In
SIGCOMM, 2002.
[2] M. Alizadeh, A. Greenberg, D. A. Maltz, J. Padhye, P. Patel, B. Prabhakar,
S. Sengupta, and M. Sridharan. Data Center TCP (DCTCP). In SIGCOMM,
2010.
[3] M. Allman. Initial Congestion Window Speciﬁcation.
http://tools.ietf.org/html/draft-allman-tcpm-bump-initcwnd-00, 2010.
[4] M. Allman. Comments on Bufferbloat. ACM SIGCOMM Computer
Communication Review, 43(1), Jan. 2013.
[5] H. Balakrishnan, H. S. Rahul, and S. Seshan. An Integrated Congestion
Management Architecture for Internet Hosts. In SIGCOMM, 1999.
[6] D. Bansal and H. Balakrishnan. Binomial Congestion Control Algorithms. In
INFOCOM, 2001.
[7] D. Bansal, H. Balakrishnan, S. Floyd, and S. Shenker. Dynamic Behavior of
Slowly-Responsive Congestion Control Algorithms. In SIGCOMM, 2001.
[8] D. S. Bernstein, R. Givan, N. Immerman, and S. Zilberstein. The Complexity of
Decentralized Control of Markov Decision Processes. Mathematics of
Operations Research, 27(4):819–840, Nov. 2002.
[9] L. S. Brakmo, S. W. O’Malley, and L. L. Peterson. TCP Vegas: New
Techniques for Congestion Detection and Avoidance. In SIGCOMM, 1994.
[10] D.-M. Chiu and R. Jain. Analysis of the Increase and Decrease Algorithms for
Congestion Avoidance in Computer Networks. Computer Networks and ISDN
Systems, 17:1–14, 1989.
J. Chu, N. Dukkipati, Y. Cheng, and M. Mathis. Increasing TCP’s Initial
Window. http://tools.ietf.org/html/draft-ietf-tcpm-initcwnd-08, 2013.
[12] D. Clark. The Design Philosophy of the DARPA Internet Protocols. In
[11]
SIGCOMM, 1988.
[13] N. Dukkipati, T. Reﬁce, Y. Cheng, J. Chu, T. Herbert, A. Agarwal, A. Jain, and
N. Sutin. An Argument for Increasing TCP’s Initial Congestion Window. ACM
SIGCOMM Computer Communication Review, 40(3):27–33, 2010.
[14] W. Feng, K. Shin, D. Kandlur, and D. Saha. The BLUE Active Queue
Management Algorithms. IEEE/ACM Trans. on Networking, Aug. 2002.
[15] S. Floyd. TCP and Explicit Congestion Notiﬁcation. CCR, 24(5), Oct. 1994.
[16] S. Floyd, M. Handley, J. Padhye, and J. Widmer. Equation-Based Congestion
Control for Unicast Applications. In SIGCOMM, 2000.
[17] S. Floyd and V. Jacobson. Random Early Detection Gateways for Congestion
Avoidance. IEEE/ACM Trans. on Networking, 1(4), Aug. 1993.
[18] S. Ha, I. Rhee, and L. Xu. CUBIC: A New TCP-Friendly High-Speed TCP
Variant. ACM SIGOPS Operating System Review, 42(5):64–74, July 2008.
J. C. Hoe. Improving the Start-up Behavior of a Congestion Control Scheme for
TCP. In SIGCOMM, 1996.
[19]
[20] D. Hofstadter. Metamagical Themas: Questing for the Essence of Mind and
Pattern. Basic books, 1985.
[21] V. Jacobson. Congestion Avoidance and Control. In SIGCOMM, 1988.
[22] R. Jain. A Delay-based Approach for Congestion Avoidance in Interconnected
Heterogeneous Computer Networks. In SIGCOMM, 1989.
[23] P. Karn, C. Bormann, G. Fairhurst, D. Grossman, R. Ludwig, J. Mahdavi,
G. Montenegro, J. Touch, and L. Wood. Advice for Internet Subnetwork
Designers, 2004. RFC 3819, IETF.
[24] D. Katabi, M. Handley, and C. Rohrs. Congestion Control for High
Bandwidth-Delay Product Networks. In SIGCOMM, 2002.
[25] F. P. Kelly, A. Maulloo, and D. Tan. Rate Control in Communication Networks:
Shadow Prices, Proportional Fairness and Stability. Journal of the Operational
Research Society, 49:237–252, 1998.
[26] E. Kohler, M. Handley, and S. Floyd. Designing DCCP: Congestion control
Without Reliability. In SIGCOMM, 2006.
[27] S. Kunniyur and R. Srikant. Analysis and Design of an Adaptive Virtual Queue
(AVQ) Algorithm for Active Queue Management. In SIGCOMM, 2001.
[28] T. Lan, D. Kao, M. Chiang, and A. Sabharwal. An Axiomatic Theory of
[29] D. Leith and R. Shorten. H-TCP Protocol for High-Speed Long Distance
Fairness. In INFOCOM, 2010.
Networks. In PFLDNet, 2004.
[30] S. Mascolo, C. Casetti, M. Gerla, M. Sanadidi, and R. Wang. TCP Westwood:
Bandwidth Estimation for Enhanced Transport over Wireless Links. In
MobiCom, 2001.
[31] P. E. McKenney. Stochastic Fairness Queueing. In INFOCOM, 1990.
[32] D. Meagher. Geometric Modeling Using Octree Encoding. Computer Graphics
and Image Processing, 19(2):129–147, 1982.
[33] K. Nichols and V. Jacobson. Controlling Queue Delay. ACM Queue, 10(5),
May 2012.
[34] F. A. Oliehoek. Decentralized POMDPs. In In Reinforcement Learning: State
of the Art, Adaptation, Learning, and Optimization, pages 471–503, 2012.
[35] R. Pan, B. Prabhakar, and K. Psounis. CHOKe—A Stateless Active Queue
Management Scheme for Approximating Fair Bandwidth Allocation. In
INFOCOM, 2000.
[36] K. K. Ramakrishnan and R. Jain. A Binary Feedback Scheme for Congestion
Avoidance in Computer Networks. ACM Trans. on Comp. Sys., 8(2):158–181,
May 1990.
[37] R. Srikant. The Mathematics of Internet Congestion Control. Birkhauser, 2004.
[38] C. Tai, J. Zhu, and N. Dukkipati. Making Large Scale Deployment of RCP
Practical for Real Networks. In INFOCOM, 2008.
[39] K. Tan, J. Song, Q. Zhang, and M. Sridharan. A Compound TCP Approach for
[40]
High-speed and Long Distance Networks. In INFOCOM, 2006.
J. Touch. Automating the Initial Window in TCP.
http://tools.ietf.org/html/draft-touch-tcpm-automatic-iw-03, 2012.
[41] Z. Wang and J. Crowcroft. A New Congestion Control Scheme: Slow Start and
Search (Tri-S). In SIGCOMM, 1991.
[42] D. Wei, C. Jin, S. Low, and S. Hegde. FAST TCP: Motivation, Architecture,
Algorithms, Performance. IEEE/ACM Trans. on Networking, 14(6):1246–1259,
2006.
[43] K. Winstein and H. Balakrishnan. End-to-End Transmission Control by
Modeling Uncertainty about the Network State . In HotNets-X, 2011.
[44] Y. Xia, L. Subramanian, I. Stoica, and S. Kalyanaraman. One More Bit is
Enough. IEEE/ACM Trans. on Networking, 16(6):1281–1294, 2008.
[45] L. Xu, K. Harfoush, and I. Rhee. Binary Increase Congestion Control (BIC) for
Fast Long-Distance Networks. In INFOCOM, 2004.
[46] Y. Yi and M. Chiang. Stochastic Network Utility Maximisation. European
Transactions on Telecommunications, 19(4):421–442, 2008.
134