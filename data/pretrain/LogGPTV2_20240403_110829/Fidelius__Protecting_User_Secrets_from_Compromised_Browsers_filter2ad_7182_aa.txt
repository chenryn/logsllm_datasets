title:Fidelius: Protecting User Secrets from Compromised Browsers
author:Saba Eskandarian and
Jonathan Cogan and
Sawyer Birnbaum and
Peh Chang Wei Brandon and
Dillon Franke and
Forest Fraser and
Gaspar Garcia Jr. and
Eric Gong and
Hung T. Nguyen and
Taresh K. Sethi and
Vishal Subbiah and
Michael Backes and
Giancarlo Pellegrino and
Dan Boneh
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Fidelius: Protecting User Secrets
from Compromised Browsers
Saba Eskandarian1, Jonathan Cogan1, Sawyer Birnbaum1, Peh Chang Wei Brandon1,
Dillon Franke1, Forest Fraser1, Gaspar Garcia1, Eric Gong1, Hung T. Nguyen1,
Taresh K. Sethi1, Vishal Subbiah1, Michael Backes2, Giancarlo Pellegrino1,2, and Dan Boneh1
1Stanford University
2CISPA Helmholtz Center for Information Security
Abstract—Users regularly enter sensitive data, such as pass-
words, credit card numbers, or tax information, into the browser
window. While modern browsers provide powerful client-side
privacy measures to protect this data, none of these defenses
prevent a browser compromised by malware from stealing it.
In this work, we present Fidelius, a new architecture that uses
trusted hardware enclaves integrated into the browser to enable
protection of user secrets during web browsing sessions, even if
the entire underlying browser and OS are fully controlled by a
malicious attacker.
Fidelius solves many challenges involved in providing pro-
tection for browsers in a fully malicious environment, offering
support for integrity and privacy for form data, JavaScript
execution, XMLHttpRequests, and protected web storage, while
minimizing the TCB. Moreover, interactions between the enclave
and the browser, the keyboard, and the display all require
new protocols, each with their own security considerations.
Finally, Fidelius takes into account UI considerations to ensure
a consistent and simple interface for both developers and users.
As part of this project, we develop the ﬁrst open source system
that provides a trusted path from input and output peripherals
to a hardware enclave with no reliance on additional hypervisor
security assumptions. These components may be of independent
interest and useful to future projects.
We implement and evaluate Fidelius to measure its per-
formance overhead, ﬁnding that Fidelius imposes acceptable
overhead on page load and user interaction for secured pages
and has no impact on pages and page components that do not
use its enhanced security features.
Index Terms—Browser Security, Trusted I/O, Hardware en-
clave, Malware protection.
I. INTRODUCTION
The web has long been plagued by malware that infects
end-user machines with the explicit goal of stealing sensitive
data that users enter into their browser window. Some recent
examples include TrickBot and Vega Stealer, which are man-
in-the-browser malware designed to steal banking credentials
and credit card numbers. Generally speaking, once malware
infects the user’s machine, it can effectively steal all user data
entered into the browser. Modern browsers have responded
with a variety of defenses aimed at ensuring browser integrity.
This work was supported by NSF, DARPA, a grant from ONR, the Simons
Foundation, a Google faculty fellowship, and the German Federal Ministry
of Education and Research (BMBF) through funding for the CISPA-Stanford
Center for Cybersecurity (FKZ: 13N1S0762).
However, once the machine is compromised, there is little that
the browser can do to protect user data from a key logger.
In this paper we present a practical architecture, called
Fidelius, that helps web sites ensure that user data entered into
the browser cannot be stolen by end-user malware, no matter
how deeply the malware is embedded into the system. When
using Fidelius, users can safely enter data into the browser
without fear of it being stolen by malware, provided that the
hardware enclave we use satisﬁes the security requirements.
Hardware enclaves, such as Intel’s SGX, have recently
been used to provide security for a variety of applications,
even in case of compromise [1]–[15]. An enclave provides
an execution environment that is isolated from the rest of the
system (more on this below). Moreover, the enclave can attest
its code to a remote web site.
One could imagine running an entire browser in an enclave
to isolate it from OS-level malware, but this would be a poor
design – any browser vulnerability would lead to malware
inside the enclave, which would completely compromise the
design.
A. Our Contributions
Fidelius contains three components, discussed in detail in
the following sections: (1) a small trusted functionality running
inside an isolated hardware enclave, (2) a trusted path to I/O
devices like the keyboard and the display, and (3) a small
browser component that interacts with the hardware enclave.
A trusted path from the hardware enclave to I/O devices
is essential for a system like Fidelius. First, this is needed to
prevent an OS-level malware from intercepting the data on
its way to and from the I/O device. More importantly, the
system must prevent out-of-enclave malware from displaying
UI elements that fool the user into entering sensitive data
where the malware can read it. Beyond protecting web input
ﬁelds, the system must protect the entire web form to ensure
that the malware does not, for example, swap the “username”
and “password” labels and cause the user to enter her password
into the username ﬁeld.
We implement a prototype trusted path to the keyboard
using a Raspberry Pi Zero that sits between the user’s machine
and the keyboard and implements a secure channel between
the keyboard and the hardware enclave. We implement a
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:52)(cid:66)(cid:67)(cid:66)(cid:1)(cid:38)(cid:84)(cid:76)(cid:66)(cid:79)(cid:69)(cid:66)(cid:83)(cid:74)(cid:66)(cid:79)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:20)(cid:23)
(cid:19)(cid:23)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
trusted path to the display using a Raspberry Pi 3 that sits
between the graphics card and the display. The Raspberry Pi 3
overlays a trusted image from the hardware enclave on top of
the standard HDMI video sent to the display from the graphics
card. We discuss details in Section IX-A. Our trusted path
system is open source and available for other projects to use.
We note that we can not use SGXIO [16], an SGX trusted I/O
project, because that system uses hypervisors, which may be
compromised in our threat model.
Another complication is
the need to run client-side
JavaScript on sensitive form ﬁelds. For example, a web site
may use client-side JavaScript to ensure that a credit card
checksum is valid, and alert the user if not. Similarly, many
sites use client-side JavaScript to display a password strength
meter. Fidelius should not prevent these scripts from perform-
ing as intended. Several projects have already explored running
a JavaScript
interpreter in a hardware enclave. Examples
include TrustJS [17] and Secureworker [18]. Our work uses
the ability to run JavaScript in an enclave as a building block
to enable privacy for user inputs in web applications. The
challenge is to do so while keeping the trusted enclave – the
TCB – small.
To address all these challenges, this paper makes the fol-
lowing contributions:
• The design of Fidelius, a system for protecting user
secrets entered into a browser in a fully-compromised
environment.
• A simple interface for web developers to enable Fidelius’s
security features.
• The ﬁrst open design and implementation of a trusted
path enabling a hardware enclave to interact with I/O
devices such as a display and a keyboard from a fully
compromised machine.
• A browser component that enables a hardware enclave to
interact with protected DOM elements while keeping the
enclave component small.
• An open-source implementation and evaluation of Fi-
delius for practical use cases.
II. TRUSTED HARDWARE BACKGROUND
A hardware enclave provides developers with the abstrac-
tion of a secure portion of the processor that can veriﬁably
run a trusted code base (TCB) and protect its limited memory
from a malicious or compromised OS [19], [20]. The hardware
handles the process of entering and exiting an enclave and
hiding the activity of the enclave while non-enclave code runs.
Enclave code invariably requires access to OS resources such
as networking and user or ﬁle I/O, so developers specify an in-
terface between the enclave and the OS. In SGX, the platform
we use for our implementation, the functions made available
by this interface are called OCALLs and ECALLs. OCALLs
are made from inside the enclave to the untrusted application,
usually for procedures requiring resources managed by the OS,
such as ﬁle access or output to a display. ECALLs allow code
outside the TCB to call the enclave to execute trusted code.
An enclave proves that it runs an untampered version of
the desired code through a remote attestation mechanism.
Attestation loosely involves an enclave providing a signed hash
of its initial state (including the running code), which a server
compares with the expected value and rejects if there is any
evidence of a corrupted program. In order to persist data to
disk when an enclave closes or crashes, SGX also provides a
data sealing functionality that encrypts and authenticates the
data for later recovery by a new instance of the enclave.
Finally, one of the key features of enclaves is the protection
of memory. An enclave gives developers a small memory
region inaccessible to the OS and only available when exe-
cution enters the enclave. In this memory, the trusted code
can keep secrets from an untrusted OS that otherwise controls
the machine. SGX provides approximately 90MB of protected
memory. Unfortunately, a number of side-channel attacks have
been shown to break the abstraction of fully-protected enclave
memory. We brieﬂy discuss these attacks and accompanying
defenses below and in Section XII.
Security of hardware enclaves. We built Fidelius using the
hardware enclave provided by Intel’s SGX. SGX has recently
come under several side-channel attacks [21], [22], making
the current implementation of SGX insufﬁciently secure for
Fidelius. However, Intel is updating SGX using ﬁrmware and
hardware updates with the goal of preventing these side-
channel attacks. In time, it is likely that SGX can be made
sufﬁciently secure to satisfy the requirements needed for
Fidelius. Even if not, other enclave architectures are available,
such as Sanctum for RISC-V [23] or possibly a separate co-
processor for security operations.
III. THREAT MODEL
We leverage a trusted hardware enclave to protect against
a network attacker who additionally has full control of the
operating system (OS) on the computer running Fidelius. We
assume that our attacker has the power to examine and modify
unprotected memory, communication with peripherals/network
devices, and communication between the trusted and untrusted
components of the system. Moreover, it can maliciously inter-
rupt the execution of an enclave. Note that an OS-level attacker
can always launch an indeﬁnite denial of service attack against
an enclave, but such an attack does not compromise privacy.
We assume that the I/O devices used with the computer
are not compromised and that the dongles we add to key-
boards/displays follow the behavior we describe. We could
assume that there is a trusted initial setup phase where the
devices can exchange keys and other setup parameters with the
enclave. This corresponds to a setting where a user buys a new
computer, sets it up with the necessary peripherals, and then
connects to the internet, at which point the machine immedi-
ately falls victim to malware. Alternatively, this honest setup
assumption could easily be avoided with an attestation/key
exchange step between the peripherals and the enclave. We
discuss both options in Section VI-A.
Overview of Security Goals. We would like to provide the
security guarantee that any user data entered via a trusted
(cid:19)(cid:23)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
input will never be visible to an attacker, and, except in the
case of denial of service, the data received by the server will
correspond to that sent by the user, e.g. it will not be modiﬁed,
shufﬂed, etc. Moreover, the enclave will only send data to
an authenticated server, and a server will only send data to
a legitimate enclave. Finally, we wish for all the low-level
protocols of our system to be protected against tampering,
replay, and other attacks launched by the compromised OS.
The remote server in our setting cooperates to secure the
user by providing correct web application code to be run in
the enclave. We are primarily concerned with the security of
user secrets locally on a compromised device, but this does
include ensuring that secrets are not sent out to an attacker.
Overview of Usability Goals. Although our work is merely
a prototype of Fidelius, we intend for it to be fully functional
and to defend not only against technical attacks on security
but also against user interface tricks aiming to mislead a user
into divulging secrets to a malicious party. This task looms
particularly important
in our mixed setting where trusted
input/output come through the same channels as their untrusted
counterparts. In particular, we must make sure a user knows
whether the input they are typing is protected or not, what data
the remote server expects to receive, and where the private data
will eventually be sent. We leave the task of optimizing the
user experience to future work, but also aim to provide a tool
which can be used “as-is.”
We also want to provide a usable interface for developers
that deviates only minimally from standard web development
practices. As such, we endeavor to add only the minimal
extensions or limitations to current web design techniques to
support our security requirements.
Enumeration of Attacks. After describing the system in detail
in subsequent sections, we discuss why Fidelius satisﬁes our
security goals. Here we brieﬂy list the different classes of
non-trivial attacks against which we plan to defend. Refer to
Section VIII for details on the attacks and how we defend
against them.
- Enclave omission attack: The attacker fakes use of an
enclave.
- Enclave misuse attack: The attacker abuses Enclave
ECALLs for unexpected behavior.
- Page tampering attack: The attacker modiﬁes protected
page elements or JavaScript.
- Redirection attack: The attacker fakes the origin to which
trusted data is sent.
- Storage tampering attack: The attacker reads, modiﬁes,
deletes, or rolls back persistent storage.
- Mode switching attack: The attacker makes unauthorized
entry/exits from private keyboard mode.
- Replay attack: The attacker replays private key presses
or display overlays.
- Input manipulation attack: The attacker forges or manip-
ulates placement of protected input ﬁelds.
- Timing attack: The attacker gains side-channel informa-
tion from the timing of display updates or keyboard
events.
7UXVWHG
3DWKWR,2
'HYLFHV
%URZVHU
:HE(QFODYH
2ULJLQ
&DUG1XPEHU
00<<
&99
26
Fig. 1. Overview of Fidelius. The web enclave, embedded in a
malicious browser and OS, communicates with the user through our
trusted I/O path and securely sends data to a remote origin. We
assume that both the web browser and the OS are compromised.
Security Non-Goals. Fidelius provides the tools necessary
to form the basis of a secure web application, focusing on