::: itemizedlist
-   在构建时，使用 `rpmbuild`{.literal} 命令及 `--recompile`{.literal}
    选项而不是 `--rebuild`{.literal} 选项。
-   使用以下命令安装 SRPM：
    ``` literallayout
    $ rpm -Uvh ~/rpmbuild/SRPMS/bello-0.1-1.el8.src.rpm
    Updating / installing…​
       1:bello-0.1-1.el8               [100%]
    $ rpm -Uvh ~/rpmbuild/SRPMS/pello-0.1.2-1.el8.src.rpm
    Updating / installing…​
    …​1:pello-0.1.2-1.el8              [100%]
    $ rpm -Uvh ~/rpmbuild/SRPMS/cello-1.0-1.el8.src.rpm
    Updating / installing…​
    …​1:cello-1.0-1.el8            [100%]
    ```
:::
:::
创建二进制 RPM
时生成的输出详细，有助于调试。不同示例的输出会有所不同，对应于其 SPEC
文件。
生成的二进制 RPM 位于 `~/rpmbuild/RPMS/YOURARCH`{.literal}
目录中，如果软件包不限定架构，则 `YOURARCH`{.literal} 是您的架构或
`~/rpmbuild/RPMS/noarch/`{.literal} 目录中。
:::
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#building-a-binary-from-the-spec-file_building-binary-rpms}从 SPEC 文件构建二进制 RPM {.title}
:::
以下流程演示了如何从其 SPEC 文件中构建
`bello`{.literal}、`pello`{.literal} 和 `cello`{.literal} 二进制 RPM。
::: itemizedlist
**流程**
-   使用 `bb`{.literal} 选项运行 `rpmbuild`{.literal} 命令：
    ``` literallayout
    $ rpmbuild -bb ~/rpmbuild/SPECS/bello.spec
    $ rpmbuild -bb ~/rpmbuild/SPECS/pello.spec
    $ rpmbuild -bb ~/rpmbuild/SPECS/cello.spec
    ```
:::
:::
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#building-rpms-from-source-rpms_building-binary-rpms}从源 RPM 构建 RPM {.title}
:::
也可以从源 RPM 构建任何类型的 RPM。为此，请使用以下步骤：
::: itemizedlist
**流程**
-   使用以下选项之一运行 `rpmbuild`{.literal} 命令，并指定源软件包：
    ``` literallayout
    # rpmbuild {-ra|-rb|-rp|-rc|-ri|-rl|-rs} [rpmbuild-options] SOURCEPACKAGE
    ```
:::
::: title
**其它资源**
:::
有关从源 RPM 构建 RPM 的详情，请参考 `rpmbuild(8)`{.literal} man page
中的 `BUILDING PACKAGES`{.literal} 部分。
:::
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#checking-rpms-for-sanity_packaging-software}检查 RPM 是否存在完整性 {.title}
:::
创建软件包后，检查软件包的质量。
检查包质量的主要工具是
[rpmlint](https://github.com/rpm-software-management/rpmlint){.link}。
`rpmlint`{.literal} 工具执行以下操作：
::: itemizedlist
-   提高 RPM 的可维护性.
-   通过对 RPM 执行静态分析来启用完整性检查。
-   通过对 RPM 执行静态分析来启用检查错误。
:::
`rpmlint`{.literal} 工具可以检查二进制 RPM、源 RPM(SRPM)和 SPEC
文件，因此对于打包的所有阶段都很有用，如下例所示。
请注意，`rpmlint`{.literal}
具有非常严格的准则，因此有时可以接受跳过其部分错误和警告，如下例所示。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在以下示例中，`rpmlint`{.literal}
在没有任何选项的情况下运行，这将生成一个非verbose
输出。如需详细解释每个错误或警告，您可以运行 `rpmlint -i`{.literal}。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-bello-for-sanity_checking-rpms-for-sanity}检查 bello 以获得健全性 {.title}
:::
本节显示在 Bllo SPEC 文件和 bello 二进制 RPM 示例上检查 RPM
完整性时可能出现的警告和错误。
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#checking-bello-spec-file}检查 Bllo SPEC 文件 {.title}
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867788970480}
**例 3.2. 在 SPEC 文件中为 bello 运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint bello.spec
bello.spec: W: invalid-url Source0: https://www.example.com/bello/releases/bello-0.1.tar.gz HTTP Error 404: Not Found
0 packages and 1 specfiles checked; 0 errors, 1 warnings.
```
:::
:::
对于 `bello.spec`{.literal}，只有一个警告，这表示 `Source0`{.literal}
指令中列出的 URL 无法访问。这是正常的，因为指定的
`example.com`{.literal} URL 不存在。假设我们期望这个 URL
在未来工作，我们可以忽略这个警告。
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867688437056}
**例 3.3. 在 SRPM 中为 bello 运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/SRPMS/bello-0.1-1.el8.src.rpm
bello.src: W: invalid-url URL: https://www.example.com/bello HTTP Error 404: Not Found
bello.src: W: invalid-url Source0: https://www.example.com/bello/releases/bello-0.1.tar.gz HTTP Error 404: Not Found
1 packages and 0 specfiles checked; 0 errors, 2 warnings.
```
:::
:::
对于 `bello`{.literal} SRPM，有一个新的警告，这表示 `URL`{.literal}
指令中指定的 URL 无法访问。假设链接将来正常工作，我们可以忽略此警告。
:::
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#checking-bello-binary-rpm}检查 bello 二进制 RPM {.title}
:::
在检查二进制 RPM 时，`rpmlint`{.literal} 会检查以下项目：
::: itemizedlist
-   Documentation
-   man page
-   一致使用文件系统层次结构标准
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867803821696}
**例 3.4. 在二进制 RPM 中为 bello 运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/RPMS/noarch/bello-0.1-1.el8.noarch.rpm
bello.noarch: W: invalid-url URL: https://www.example.com/bello HTTP Error 404: Not Found
bello.noarch: W: no-documentation
bello.noarch: W: no-manual-page-for-binary bello
1 packages and 0 specfiles checked; 0 errors, 3 warnings.
```
:::
:::
`no-documentation`{.literal} 和 `no-manual-page-for-binary`{.literal}
警告称其 RPM 没有文档或 man page，因为我们不提供任何文档或 man
page。除了以上警告外，RPM 还传递了 `rpmlint`{.literal} 检查。
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-pello-for-sanity_checking-rpms-for-sanity}检查 pello for sanity {.title}
:::
本节显示在 pello SPEC 文件和 pello 二进制 RPM 示例上检查 RPM
完整性时可能出现的警告和错误。
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#checking-pello-spec-file}检查 pello SPEC 文件 {.title}
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867805885616}
**例 3.5. 在 pello 的 SPEC 文件中运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint pello.spec
pello.spec:30: E: hardcoded-library-path in %{buildroot}/usr/lib/%{name}
pello.spec:34: E: hardcoded-library-path in /usr/lib/%{name}/%{name}.pyc
pello.spec:39: E: hardcoded-library-path in %{buildroot}/usr/lib/%{name}/
pello.spec:43: E: hardcoded-library-path in /usr/lib/%{name}/
pello.spec:45: E: hardcoded-library-path in /usr/lib/%{name}/%{name}.py*
pello.spec: W: invalid-url Source0: https://www.example.com/pello/releases/pello-0.1.2.tar.gz HTTP Error 404: Not Found
0 packages and 1 specfiles checked; 5 errors, 1 warnings.
```
:::
:::
`invalid-url Source0`{.literal} 警告指出 `Source0`{.literal}
指令中列出的 URL 不可访问。这是正常的，因为指定的
`example.com`{.literal} URL 不存在。假设这个 URL
以后可以正常工作，您可以忽略这个警告。
`hardcoded-library-path`{.literal} 错误建议使用 `%{_libdir}`{.literal}
宏而不是硬编码库路径。在本示例中，您可以安全地忽略这些错误。但是，对于进入生产的软件包，请务必仔细检查所有错误。
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867788085824}
**例 3.6. 在 SRPM 中为 pello 运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/SRPMS/pello-0.1.2-1.el8.src.rpm
pello.src: W: invalid-url URL: https://www.example.com/pello HTTP Error 404: Not Found
pello.src:30: E: hardcoded-library-path in %{buildroot}/usr/lib/%{name}
pello.src:34: E: hardcoded-library-path in /usr/lib/%{name}/%{name}.pyc
pello.src:39: E: hardcoded-library-path in %{buildroot}/usr/lib/%{name}/
pello.src:43: E: hardcoded-library-path in /usr/lib/%{name}/
pello.src:45: E: hardcoded-library-path in /usr/lib/%{name}/%{name}.py*
pello.src: W: invalid-url Source0: https://www.example.com/pello/releases/pello-0.1.2.tar.gz HTTP Error 404: Not Found
1 packages and 0 specfiles checked; 5 errors, 2 warnings.
```
:::
:::
此处的新 `invalid-url URL`{.literal} 错误与 `URL`{.literal}
指令相关，该指令不可访问。假设该 URL
将在将来有效，您可以安全地忽略此错误。
:::
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#checking-pello-binary-rpm}检查 pello 二进制 RPM {.title}
:::
在检查二进制 RPM 时，`rpmlint`{.literal} 会检查以下项目：
::: itemizedlist
-   Documentation
-   man page
-   一致使用文件系统层次结构标准
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867779539744}
**例 3.7. 在 pello 的二进制 RPM 上运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/RPMS/noarch/pello-0.1.2-1.el8.noarch.rpm
pello.noarch: W: invalid-url URL: https://www.example.com/pello HTTP Error 404: Not Found
pello.noarch: W: only-non-binary-in-usr-lib
pello.noarch: W: no-documentation
pello.noarch: E: non-executable-script /usr/lib/pello/pello.py 0644L /usr/bin/env
pello.noarch: W: no-manual-page-for-binary pello
1 packages and 0 specfiles checked; 1 errors, 4 warnings.
```
:::
:::
`no-documentation`{.literal} 和 `no-manual-page-for-binary`{.literal}
警告称 RPM 没有文档或 man page，因为您不提供任何文档或 man page。
`only-non-binary-in-usr-lib`{.literal} 警告显示您仅在
`/usr/lib/`{.literal}
中提供了非二进制工件。此目录通常为共享对象文件保留，这些文件为二进制文件。因此，`rpmlint`{.literal}
要求 `/usr/lib/`{.literal} 目录中至少有一个或多个文件是二进制的。
这是 `rpmlint`{.literal} 检查是否符合 Filesystem Hierarchy Standard
的示例。通常，使用 RPM
宏来确保文件的正确放置。在本示例中，您可以安全地忽略此警告。
`non-executable-script`{.literal} 错误警告
`/usr/lib/pello/pello.py`{.literal}
文件没有执行权限。`rpmlint`{.literal}
工具预期该文件可以执行，因为该文件包含
shebang。在本示例中，您可以将此文件保留为没有执行权限，并忽略此错误。
除了以上警告和错误外，RPM 还传递了 `rpmlint`{.literal} 检查。
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-cello-for-sanity_checking-rpms-for-sanity}检查单元以获得完整性 {.title}
:::
本节显示在单元 SPEC 文件和 pello 二进制 RPM 示例上检查 RPM
完整性时可能出现的警告和错误。
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#checking-cello-spec-file}检查单元 SPEC 文件 {.title}
:::