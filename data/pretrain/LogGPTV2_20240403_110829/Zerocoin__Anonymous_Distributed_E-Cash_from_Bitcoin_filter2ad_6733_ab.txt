transaction is broadcasted to the network and included in
a block, the bitcoins belong to Bob. However, Bob should
only consider the coins his once at least ﬁve subsequent
blocks reference this block.8 Bob can spend these coins in
a transaction by referencing it as an input and including in
scriptSig a signature on the claiming transaction under sk b
and the public key pk
Anonymity. Anonymity was not one of the design goals
of Bitcoin [3, 15, 17]. Bitcoin provides only pseudonymity
through the use of Bitcoin identities (public keys or their
hashes), of which a Bitcoin user can generate an unlimited
number. Indeed, many Bitcoin clients routinely generate new
identities in an effort to preserve the user’s privacy.
b.
Regardless of Bitcoin design goals, Bitcoin’s user base
seems willing to go through considerable effort to maintain
their anonymity — including risking their money and paying
transaction fees. One illustration of this is the existence of
laundries that (for a fee) will mix together different users’
funds in the hopes that shufﬂing makes them difﬁcult to
trace [2, 6, 7]. Because such systems require the users to trust
the laundry to both (a) not record how the mixing is done
6This reference consists of a transaction hash identiﬁer as well as an
index into the transaction’s output list.
7A 34 character hash that contains the double SHA-256 hash of the key
and some checksum data.
8Individual recipients are free to disregard this advice. However, this
could make them vulnerable to double-spending attacks as described by
Karame et al. [16].
and (b) give the users back the money they put in to the pot,
use of these systems involves a fair amount of risk.
III. DECENTRALIZED E-CASH
Our approach to anonymizing the Bitcoin network uses a
form of cryptographic e-cash. Since our construction does not
require a central coin issuer, we refer to it as a decentralized
e-cash scheme. In this section we deﬁne the algorithms
that make up a decentralized e-cash scheme and describe
the correctness and security properties required of such a
system.
Notation. Let λ represent an adjustable security parameter,
let poly(·) represent some polynomial function, and let ν(·)
represent a negligible function. We use C to indicate the set
of allowable coin values.
Deﬁnition 3.1 (Decentralized E-Cash Scheme): A decen-
tralized e-cash scheme consists of a tuple of possibly
randomized algorithms (Setup, Mint, Spend, Verify).
• Setup(1λ) → params. On input a security parameter,
output a set of global public parameters params and a
description of the set C.
• Mint(params) → (c, skc). On input parameters
params, output a coin c ∈ C, as well as a trapdoor
skc.
• Spend(params, c, skc, R, C) → (π, S). Given
params, a coin c, its trapdoor skc, some transaction
string R ∈ {0, 1}∗, and an arbitrary set of coins C,
output a coin spend transaction consisting of a proof π
and serial number S if c ∈ C ⊆ C. Otherwise output
⊥.
• Verify(params, π, S, R, C) → {0, 1}. Given params,
a proof π, a serial number S, transaction information R,
and a set of coins C, output 1 if C ⊆ C and (π, S, R)
is valid. Otherwise output 0.
We note that the Setup routine may be executed by a
trusted party. Since this setup occurs only once and does not
produce any corresponding secret values, we believe that this
relaxation is acceptable for real-world applications. Some
concrete instantiations may use different assumptions.
Each coin is generated using a randomized minting
algorithm. The serial number S is a unique value released
during the spending of a coin and is designed to prevent
any user from spending the same coin twice. We will
now formalize the correctness and security properties of
a decentralized e-cash scheme. Each call to the Spend
algorithm can include an arbitrary string R, which is intended
to store transaction-speciﬁc information (e.g., the identity of
a transaction recipient).
Correctness. Every decentralized e-cash scheme must satisfy
the following correctness requirement. Let params ←
Setup(1λ) and (c, skc) ← Mint(params). Let C ⊆ C
be any valid set of coins, where |C| ≤ poly(λ), and
400
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
assign (π, S) ← Spend(params, c, skc, R, C). The scheme
is correct if, over all C, R, and random coins used in
the above algorithms, the following equality holds with
probability 1 − ν(λ):
Verify(params, π, S, R, C ∪ {c}) = 1
Security. The security of a decentralized e-cash system is
deﬁned by the following two games: Anonymity and Balance.
We ﬁrst describe the Anonymity experiment, which ensures
that the adversary cannot link a given coin spend transaction
(π, S) to the coin associated with it, even when the attacker
provides many of the coins used in generating the spend
transaction.
Deﬁnition 3.2 (Anonymity): A decentralized
e-cash
scheme Π = (Setup, Mint, Spend, Verify) satisﬁes the
Anonymity requirement if every probabilistic polynomial-
time (p.p.t.) adversary A = (A1,A2) has negligible
advantage in the following experiment.
Anonymity(Π,A, λ)
params ← Setup(1λ)
For i ∈ {0, 1}: (ci, skci) ← Mint(params)
(C, R, z) ← A1(params, c0, c1); b ← {0, 1}
(π, S) ← Spend(params, cb, skcb, R, C ∪ {c0, c1})
Output: b
(cid:3) ← A2(z, π, S)
advantage
We deﬁne A’s
|Pr [ b = b
] − 1/2|.
(cid:3)
in the
above game
as
The Balance property requires more consideration. Intu-
itively, we wish to ensure that an attacker cannot spend more
coins than she mints, even when she has access to coins and
spend transactions produced by honest parties. Note that to
strengthen our deﬁnition, we also capture the property that
an attacker might alter valid coins, e.g., by modifying their
transaction information string R.
Our deﬁnition is reminiscent of the “one-more forgery”
deﬁnition commonly used for blind signatures. We provide
the attacker with a collection of valid coins and an oracle
Ospend that she may use to spend any of them.9 Ultimately
A must produce m coins and m + 1 valid spend transactions
such that no transaction duplicates a serial number or modiﬁes
a transaction produced by the honest oracle.
Deﬁnition 3.3 (Balance): A decentralized e-cash scheme
Π = (Setup, Mint, Spend, Verify) satisﬁes the Balance
property if ∀N ≤ poly(λ) every p.p.t. adversary A has
negligible advantage in the following experiment.
Balance(Π,A, N, λ)
params ← Setup(1λ)
For i = 1 to N: (ci, skci) ← Mint(params)
(cid:3)
Output: (c
1, . . . , c
m,S1, . . . ,Sm,Sm+1)
(cid:3)
← AOspend(·,·,·)(params, c1, . . . , cN )
9We provide this functionality as an oracle to capture the possibility that
the attacker can specify arbitrary input for the value C.
401
The oracle Ospend operates as
follows: on the jth
query Ospend(cj, Cj, Rj),
the oracle outputs ⊥ if
/∈ {c1, . . . , cN}. Otherwise it
returns (πj, Sj) ←
cj
Spend(params, cj, skcj, Rj, Cj) to A and records (Sj, Rj)
in the set T .
We say that A wins (i.e., she produces more spends
than minted coins) if ∀s ∈ {S1, . . . ,Sm,Sm+1} where
s = (π
(cid:3)
• Verify(params, π
• C(cid:3) ⊆ {c1, . . . , cN , c
(cid:3)
• (S
(cid:3) appears in only one tuple from {S1, . . . ,Sm,Sm+1}.
• S
We deﬁne A’s advantage as the probability that A wins
, C(cid:3)
, S
(cid:3)
(cid:3)
1, . . . , c
m
) = 1.
}.
) /∈ T .
, R
, R
(cid:3)
, C(cid:3)
):
, R
(cid:3)
(cid:3)
, S
(cid:3)
(cid:3)
(cid:3)
the above game.
IV. DECENTRALIZED E-CASH FROM STRONG RSA
In this section we describe a concrete instantiation of a
decentralized e-cash scheme. We ﬁrst deﬁne the necessary
cryptographic ingredients.
A. Cryptographic Building Blocks
Zero-knowledge proofs and signatures of knowledge. Our
protocols use zero-knowledge proofs that can be instantiated
using the technique of Schnorr [18], with extensions due to
e.g., [19, 20, 21, 22]. We convert these into non-interactive
proofs by applying the Fiat-Shamir heuristic [23]. In the
latter case, we refer to the resulting non-interactive proofs
as signatures of knowledge as deﬁned in [24].
When referring to these proofs we will use the notation of
Camenisch and Stadler [25]. For instance, NIZKPoK{(x, y) :
h = gx ∧ c = gy} denotes a non-interactive zero-knowledge
proof of knowledge of the elements x and y that satisfy both
h = gx and c = gy. All values not enclosed in ()’s are
assumed to be known to the veriﬁer. Similarly, the extension
ZKSoK[m]{(x, y) : h = gx ∧ c = gy} indicates a signature
of knowledge on message m.
Accumulators. Our construction uses an accumulator based
on the Strong RSA assumption. The accumulator we use
was ﬁrst proposed by Benaloh and de Mare [10] and later
improved by Baric and Pﬁtzmann [11] and Camenisch and
Lysyanskaya [12]. We describe the accumulator using the
following algorithms:
• AccumSetup(λ) → params. On input a security param-
eter, sample primes p, q (with polynomial dependence on
the security parameter), compute N = pq, and sample a
seed value u ∈ QRN , u (cid:12)= 1. Output (N, u) as params.
• Accumulate(params, C) → A. On input params
set of prime numbers C =
(N, u)
{c1, . . . , ci | c ∈ [A, B]},10 compute the accumulator A
as uc1c2···cn mod N.
and a
10See Appendix A for a more precise description.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
• GenWitness(params, v, C) → w. On input params
(N, u), a set of prime numbers C as described above,
and a value v ∈ C, the witness w is the accumu-
lation of all the values in C besides v, i.e., w =
Accumulate(params, C \ {v}).
• AccVerify(params, A, v, ω) → {0, 1}. On input
params (N, u), an element v, and witness ω, compute
(cid:3) ≡ ωv mod N and output 1 if and only if A
(cid:3)
= A,
A
v is prime, and v ∈ [A, B] as deﬁned previously.
For simplicity, the description above uses the full calculation
of A. Camenisch and Lysyanskaya [12] observe that the
accumulator may also be incrementally updated, i.e., given
an existing accumulator An it is possible to add an element
x and produce a new accumulator value An+1 by computing
n mod N. We make extensive use of this
An+1 = Ax
optimization in our practical implementation.
Camenisch and Lysyanskaya [12] show that the accumu-
lator satisﬁes a strong collision-resistance property if the
Strong RSA assumption is hard. Informally, this ensures
that no p.p.t. adversary can produce a pair (v, ω) such that
v /∈ C and yet AccVerify is satisﬁed. Additionally, they
describe an efﬁcient zero-knowledge proof of knowledge that
a committed value is in an accumulator. We convert this into
a non-interactive proof using the Fiat-Shamir transform and
refer to the resulting proof using the following notation:
NIZKPoK{(v, ω) : AccVerify((N, u), A, v, ω) = 1}.
B. Our Construction
We now describe a concrete decentralized e-cash scheme.
Our scheme is secure assuming the hardness of the Strong
RSA and Discrete Logarithm assumptions, and the existence
of a zero-knowledge proof system.
We now describe the algorithms:
• Setup(1λ) → params. On input a security parameter,
run AccumSetup(1λ) to obtain the values (N, u). Next
generate primes p, q such that p = 2wq + 1 for w ≥ 1.
Select random generators g, h such that G = (cid:15)g(cid:16) =
(cid:15)h(cid:16) and G is a subgroup of Z
∗
q. Output params =
(N, u, p, q, g, h).
• Mint(params) → (c, skc). Select S, r ← Z
∗
q and
compute c ← gShr mod p such that {c prime | c ∈
[A, B]}.11 Set skc = (S, r) and output (c, skc).
• Spend(params, c, skc, R, C) → (π, S). If c /∈ C
output ⊥. Compute A ← Accumulate((N, u), C) and
ω ← GenWitness((N, u), c, C). Output (π, S) where π
comprises the following signature of knowledge:12
π = ZKSoK[R]{(c, w, r) :
AccVerify((N, u), A, c, w) = 1 ∧ c = gShr}
• Verify(params, π, S, R, C) → {0, 1}. Given a proof π,
a serial number S, and a set of coins C, ﬁrst compute
11See Appendix A for a more precise description.
12See Appendix B for the construction of the ZKSoK.
A ← Accumulate((N, u), C). Next verify that π is the
aforementioned signature of knowledge on R using the
known public values. If the proof veriﬁes successfully,
output 1, otherwise output 0.
Our protocol assumes a trusted setup process for generating
the parameters. We stress that the accumulator trapdoor
(p, q) is not used subsequent to the Setup procedure and
can therefore be destroyed immediately after the parameters
are generated. Alternatively,
implementers can use the
technique of Sander for generating so-called RSA UFOs
for accumulator parameters without a trapdoor [26].
C. Security Analysis
We now consider the security of our construction.
Theorem 4.1: If the zero-knowledge signature of knowl-
edge is computationally zero-knowledge in the random oracle
model, then Π = (Setup, Mint, Spend, Verify) satisﬁes the
Anonymity property.
We provide a proof sketch for Theorem 4.1 in Appendix A.
Intuitively, the security of our construction stems from the fact
that the coin commitment C is a perfectly-hiding commitment
and the signature proof π is at least computationally zero-
knowledge. These two facts ensure that the adversary has at
most negligible advantage in guessing which coin was spent.
Theorem 4.2: If the signature proof π is sound in the
random oracle model, the Strong RSA problem is hard, and
the Discrete Logarithm problem is hard in G, then Π =
(Setup, Mint, Spend, Verify) satisﬁes the Balance property.