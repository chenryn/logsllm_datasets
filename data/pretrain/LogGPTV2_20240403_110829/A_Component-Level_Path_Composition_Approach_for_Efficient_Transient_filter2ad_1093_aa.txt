title:A Component-Level Path Composition Approach for Efficient Transient
Analysis of Large CTMCs
author:Vinh Vi Lam and
William H. Sanders and
Peter Buchholz
A Component-Level Path Composition Approach for
Ef(cid:2)cient Transient Analysis of Large CTMCs
Peter Buchholzy
(cid:3)Dept. of Electrical and Computer Engineering and
Vinh V. Lam(cid:3)
Coordinated Science Laboratory
University of Illinois at Urbana-Champaign
1308 W. Main St., Urbana, IL, U.S.A.
Email: flam, PI:EMAIL
William H. Sanders(cid:3)
yInformatik IV, Universit¤at Dortmund
D-44221 Dortmund, Germany
Email: PI:EMAIL
Abstract
Path-based techniques make the analysis of very large
Markov models feasible by trading off high computational
complexity for low space complexity. Often, a drawback in
these techniques is that they have to evaluate many paths in
order to compute reasonably tight bounds on the exact solu-
tions of the models. In this paper, we present a path compo-
sition algorithm to speed up path evaluation signi(cid:2)cantly. It
works by quickly composing subpaths that are precomputed
locally at the component level. The algorithm is computa-
tionally ef(cid:2)cient since individual subpaths are precomputed
only once, and the results are reused many times in the com-
putation of all composed paths. To the best of our knowl-
edge, this work is the (cid:2)rst to propose the idea of path com-
position for the analysis of Markov models. A practical im-
plementation of the algorithm makes it feasible to solve even
larger models, since it helps not only in evaluating more paths
faster but also in computing long paths ef(cid:2)ciently by com-
posing them from short ones. In addition to presenting the
algorithm, we demonstrate its application and evaluate its
performance in computing the reliability and availability of a
large distributed information service system in the presence of
fault propagation and in computing the probabilities of buffer
over(cid:3)ow and buffer (cid:3)ushing in a media multicast system with
varying system con(cid:2)gurations.
1. Introduction
Due to ever-increasing size and complexity in system de-
signs, model-based evaluation has become a cost-effective
way to study alternative designs before the actual systems
are built. Model-based evaluation can be used to estimate
the reliability, availability, or performability of the systems,
for instance. Often models are used that can be mapped onto
continuous-time Markov chains (CTMCs) for solution. It is
well-known that as models grow, the sizes of their state spaces
grow at an exponential rate. That growth rate can quickly
overwhelm the storage capacity of modern computing sys-
tems. Thus, new techniques that are effective at managing
storage complexity are needed for analyzing large Markov
models.
When transient results are required, several analysis meth-
ods are available. They can be roughly classi(cid:2)ed as either
state-based or non-state-based and as either approximate or
exact. Modern state-based techniques, such as [4, 1, 5, 7], are
very effective in representing the state spaces and the corre-
sponding transition matrices compactly, but they are limited
by the fact that they must explicitly hold one or more solu-
tion or iteration vectors in memory. Since the sizes of those
vectors are on the order of the state spaces, the techniques are
restricted to solving small models. Consequently, non-state-
based techniques like simulation have been generally used to
solve large models. Simulation, however, belongs to the class
of approximate techniques, since its results are statistical in
nature.
An alternative to the previously mentioned techniques is
the approach of path-based analysis (e.g., [9, 10, 6]), whereby
bounded solutions are computed for large models. Like sim-
ulation, path-based techniques derive results for a model by
evaluating trajectories over which the corresponding system
may proceed over time. In contrast to the approach used in
simulation, however, paths are selected in a systematic way.
That usually allows one to compute upper and lower bounds,
instead of approximations, for the desired measures. Despite
their success, existing path-based techniques (cid:2)nd very lim-
ited application, because they suffer from poor performance.
The performance of all path-based techniques is signi(cid:2)cantly
dependent on two factors: (1) the number of paths they can
compute in a given amount of time and (2) the relevance of
the paths that are computed.
In this paper, we introduce a novel technique for comput-
ing paths that improves performance substantially. The tech-
nique is based on the algorithm in which paths are composed
from subpaths that are precomputed locally for the individual
model components. The path composition algorithm helps to
eliminate much of the redundant computation so that many
more paths can be computed in a given amount of time. Fur-
thermore, we augment the technique with a path-selection al-
gorithm to choose the more relevant paths for analysis. To
the best of our knowledge, this work is the (cid:2)rst to propose the
idea of path composition to improve the performance of path-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
based techniques for the analysis of Markov models. Our
implementation of the algorithm effectively exploits the ex-
istence of common subpaths across all paths, resulting in a
speedup of 6:6 to 8:8 times in our benchmark models.
The presentation of our paper proceeds as follows. In Sec-
tion 2, we brie(cid:3)y review the necessary background material
on the structured path-based approach. Here we focus specif-
ically on the calculation of rewards and the algorithm for ex-
ploration at the path level. Then, in Section 3, we turn our
attention to the subpath level and describe the new algorithm
for exploring, computing, and composing subpaths. Section 4
presents experimental results for the new algorithm and com-
pares them to those in our previous work. Finally, in Sec-
tion 5, we conclude with a summary of our current work.
2. Review of the Structured Path-based
Approach
In this section, we review the notations that are used
throughout this paper, describe what paths are, and show how
paths are explored and how reward is calculated on a path ba-
sis. A more detailed description and derivation can be found
in [6]. This section lays the foundation for the derivation of
the path-composition algorithm in the next section.
2.1. Computation of Path Reward and
Solution Bounds
We consider a class of models whose in(cid:2)nitesimal gener-
ators and solution vectors can be composed from the com-
ponent matrices and vectors using the Kronecker sum and
product operators (see [6] for details). Speci(cid:2)cally, the gen-
erator matrix Q (a submatrix of ^Q) of a model in the class
can be represented by the composition of component matri-
ces (which is typically used in the literature, e.g., see [11]):
^Q =
J
Mi=1
Q(i)
l + Xt2TS
(cid:21)t  J
Oi=1
E(i)
t (cid:0)
D(i)
t ! ,
J
Oi=1
(1)
l
t
t = diag(E(i)
is the generator matrix of local transitions in com-
where Q(i)
ponent i (1 (cid:20) i (cid:20) J), TS is the set of synchronized transi-
tions, (cid:21)t is the rate of synchronized transition t, E(i)
is the
synchronized transition matrix with respect to component i
and transition t, D(i)
t eT ), and e is an ni-dimen-
sional vector of ones.
Let RS i = f0; : : : ; ni (cid:0) 1g be the set of states of com-
l (x; x)j) and
(cid:21)t. Applying uniformization to
the generator matrix of component i yields the transition ma-
trix, P(i)
l =(cid:21)li + I, for a DTMC embedded in a
Poisson process of rate (cid:21)li s that has density (cid:12)((cid:21)li s; k) =
e(cid:0)(cid:21)li s((cid:21)li s)k=k!.
ponent i, and de(cid:2)ne (cid:21)li = maxx2RSi (jQ(i)
i=1 (cid:21)li + Pt2TS
(cid:3) = PJ
l = Q(i)
Further, de(cid:2)ne E(t) = fi j 9 0 (cid:20) x  0,
CP l =n(cid:25) (cid:14) a j (cid:25) 2 CP l(cid:0)1; a 2 T S _
(cid:0)a = li ^(cid:0)(cid:25)(j(cid:25)j) 2 T S _(cid:0)(cid:25)(j(cid:25)j) = lj ^ j (cid:20) i(cid:1)(cid:1)(cid:1)o:
(5)
Using this canonical-path exploration algorithm, we can reuse
the computed results (such as the state distribution vectors)
from paths that have already been explored. The algorithm
uses a depth-(cid:2)rst exploration strategy to minimize the amount
of required storage by eliminating the need to store all inter-
mediate results from the computed canonical paths.
Let card((cid:25)) be the cardinality of the set of paths equiv-
alent to (cid:25). Each path (cid:25) 2 CP represents card((cid:25)) paths in
P whose rewards, probabilities, and state distribution vectors
are all identical. For the computation of card((cid:25)), we de(cid:2)ne
the functions cs((cid:25)) and cl(i)((cid:25)), i = 1; : : : ; J, on paths in
the following way. Let cs(") = cl(i)(") = 0 and
cs((cid:25) (cid:14) a) =( card((cid:25))
cs((cid:25))
if a 2 T S _
(a 62 T S ^ (cid:25)(j(cid:25)j) 2 T S) ,
otherwise
The function cs((cid:25)) computes the cardinality up to the last
synchronized transition in (cid:25), and cl(i)((cid:25)) counts the lo-
cal transitions after the synchronized transition. Both func-
tions together implement a partial order reduction to com-
pute equivalent paths in which the local transitions between
two immediate synchronized transitions can be arbitrarily in-
terchanged. The algorithm uses those functions to compute
card((cid:25)) in the following way:
card((cid:25)) = cs((cid:25)) (cid:1) (cid:18) J
cl(i)((cid:25))(cid:19)!
Pi=1
Qj=1(cid:0)cl(i)((cid:25))!(cid:1)
J
(8)
In this section, we described brie(cid:3)y how a model is solved
through the computation of various attribute values at the path