# Exploit Mitigation Techniques on iOS
### Max Bazaliy
### August 4-7, 2016

## About Me
- **Location:** Kiev, Ukraine
- **Position:** Staff Engineer at Lookout
- **Focus Areas:**
  - XNU, Linux, and LLVM internals
  - Jailbreak techniques
  - Obfuscation and DRM (past work)
- **Affiliations:**
  - Member of Fried Apple team

## Agenda
1. iOS Security Mechanisms
2. Function Hooking
3. iOS 8 & 9 Exploit Mitigations
4. Bypassing Code Signatures
5. Future Attacks

## iOS Security Mechanisms
- **Memory Protections:**
  - No way to change existing page permissions.
  - Pages can never be both writable and executable.
  - No dynamic code generation without JIT.
  - Non-executable stack and heap.
  - ASLR (Address Space Layout Randomization) / KASLR (Kernel ASLR).

- **Code Signing:**
  - Mandatory Access Control Framework (MACF).
  - Code must be signed by a trusted party.
  - Signed page hashes must match the running code.

- **Sandbox:**
  - Ensures that applications run in a restricted environment.

- **Secure Boot Process:**
  - Ensures that only trusted software is loaded during boot.

- **Privilege Separation:**
  - Minimizes the damage potential of compromised processes.

- **Kernel Patch Protection:**
  - Prevents unauthorized modifications to the kernel.

## Memory Protections
- **Allocating New Regions:**
  ```c
  kern_return_t vm_map_enter(...) {
      ...
      #if CONFIG_EMBEDDED
          if (cur_protection & VM_PROT_WRITE) {
              if ((cur_protection & VM_PROT_EXECUTE) && !entry_for_jit) {
                  printf("EMBEDDED: curprot cannot be write+execute. turning off execute\n");
                  cur_protection &= ~VM_PROT_EXECUTE;
              }
          }
      #endif
      ...
  }
  ```

- **Changing Existing Regions:**
  ```c
  kern_return_t vm_map_protect(...) {
      ...
      #if CONFIG_EMBEDDED
          if (new_prot & VM_PROT_WRITE) {
              if ((new_prot & VM_PROT_EXECUTE) && !(curr->used_for_jit)) {
                  printf("EMBEDDED: %s can't have both write and exec at the same time\n", __FUNCTION__);
                  new_prot &= ~VM_PROT_EXECUTE;
              }
          }
      #endif
      ...
  }
  ```

## Code Signing
- **Code Signature Format:**
  - `LC_CODE_SIGNATURE` command points to a `csblob`.
  - Key component: Code Directory.
  - File page hashes are individually hashed into slots.
  - Special slots: `_CodeResources`, Entitlements, etc.
  - CDHash: Master hash of code slot hashes.

- **Code Signature Validation:**
  - On load validation in the kernel:
    - `mac_execve`
    - `exec_activate_image`
    - `exec_mach_imgact`
    - `load_machfile`
    - `parse_machfile`
    - `load_code_signature`
    - `ubc_cs_blob_add`
    - `mac_vnode_check_signature`

  - Page validation in the kernel:
    - `vm_fault_enter`
    - `vm_page_validate_cs`
    - `vm_page_validate_cs_mapped`
    - `cs_validate_page`

- **Verifying Pages:**
  - `vm_fault` is called on a page fault.
  - A page fault occurs when a page is loaded.
  - Validated page means the page has a hash in the Code Directory.
  - Tainted page: calculated hash does not match stored hash.
  - Processes with invalid pages will be killed.

- **When to Verify?**
  ```c
  #define VM_FAULT_NEED_CS_VALIDATION(pmap, page) \
      ((pmap) != kernel_pmap /*1*/ && \
      !(page)->cs_tainted /*2*/ && \
      (page)->object->code_signed /*3*/ && \
      (!(page)->cs_validated || (page)->wpmapped /*4*/))
  ```

## Code Sign Enforcement
- **Apple Mobile File Integrity (AMFI):**
  - Registers hooks in MACF.
  - Hooks: `mpo_proc_check_get_task`, `mpo_vnode_check_signature`, `mpo_vnode_check_exec`, etc.

- **Code Sign Enforcement Process:**
  - Involves `sysent`, `AMFI`, `amfid`, `libmis.dylib`, trust cache, and MACF.
  - Kernel and user land interactions.

## Function Hooking
- **Use Cases:**
  - Adding new security features.
  - Debugging third-party code.
  - Logging and tracing API calls.
  - Reverse engineering and deobfuscation.
  - Interposing for function hooking.

- **Interposing - DYLD_INFO and LINKEDIT:**
  - Rebase Info: Contains rebasing opcodes.
  - Bind Info: For required import symbols.
  - Lazy Bind Info: Symbol binding info for lazy imports.
  - Weak Bind Info: Binding info for weak imports.
  - Export Info: Symbol binding info for exported symbols.
  - Details: [DYLD Documentation](http://newosxbook.com/articles/DYLD.html)

- **Binding Operations:**
  ```c
  case BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB:
      segIndex = immediate;
      address = segOffsets[segIndex] + read_uleb128(&p, end);
      break;
  case BIND_OPCODE_ADD_ADDR_ULEB:
      address += read_uleb128(&p, end);
      break;
  case BIND_OPCODE_DO_BIND:
      *((void **)address) = new_impl;
      address += sizeof(void *);
      break;
  case BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB:
      *((void **)address) = new_impl;
      address += read_uleb128(&p, end) + sizeof(void *);
      break;
  ```

- **dyld_shared_cache:**
  - Contains all frameworks and libraries.
  - Loaded into each process space.
  - Used for performance and security reasons.
  - ASLR slide randomized at boot time.

- **Fixed Offset in Cache:**
  - Example: `send` function in iOS 8 and iOS 9.

- **Trampolines:**
  - How to change memory to RW?
  - How to switch back to RX?
  - How to pass a codesign check?

- **Changing Memory to RW:**
  ```c
  void *data = mmap(addr & (~PAGE_MASK), PAGE_SIZE, PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE|MAP_FIXED, 0, 0);
  ```

- **Changing Memory to RX:**
  ```c
  mprotect(addr & (~PAGE_MASK), PAGE_SIZE, PROT_READ|PROT_EXEC);
  ```

- **Plan for Trampoline:**
  - Copy original page content.
  - Mmap new RW page over.
  - Copy original content back.
  - Write trampoline.
  - Mprotect to RX.
  - Handle codesign.

- **Codesign Bypass:**
  - Page is checked on page fault.
  - Prevent page fault using `mlock`.

- **Full Attack:**
  - Get function pointer, get page base.
  - Copy page contents to temporary buffer.
  - Mmap new RW page over.
  - Copy original content back.
  - Mlock page.
  - Copy trampoline code.
  - Mprotect page to RX.

- **Hooking fcntl:**
  - Skip codesign validation.
  ```c
  fsignatures_t siginfo;
  siginfo.fs_file_start = offsetInFatFile;
  siginfo.fs_blob_start = (void*)(long)(codeSigCmd->dataoff);
  siginfo.fs_blob_size = codeSigCmd->datasize;
  int result = fcntl(fd, F_ADDFILESIGS_RETURN, &siginfo);
  ```

- **Loading Unsigned Code:**
  - Mlock all pages with executable permission during mapping.
  ```c
  if (size > 0) {
      if ((fileOffset + size) > fileLen) {
          ...
      }
      void* loadAddress = xmmap((void*)requestedLoadAddress, size, protection, MAP_FIXED | MAP_PRIVATE, fd, fileOffset);
      ...
  }
  ```

- **cs_bypass:**
  - Hook `fcntl` and return -1.
  - Hook `xmmap` and mlock all regions with execution permission.
  - Dlopen unsigned code.
  - Reference: [GitHub Repository](https://github.com/kpwn/921csbypass)

- **Future Codesign Attacks on dyld:**
  - Hide executable segment.
  - Hook dyld functions.
  - Hook `libmis.dylib` functions.

---

For more information, contact me at @mbazaliy.