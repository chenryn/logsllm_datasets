方式如例6-4所示。
例64：等特用户登录-函数版
wait_for_user---等待用户登录
 语法 : walt_Cor_user user 1 sleeptime 1
wait_for_user () {
unti1 who 1 gzep *$1* > /dev/nu11
do
sleep $(2130)
done
函数被引用（执行）的方式与命令相同：提供函数名称与任何相对应的参数。wait_for
user函数可以以两种方式被引用：
wait_for_user tolstoy
等待用户tolstoy，每30秒检查一次
wait_for_user tolstoy 60
等特用户tolatoy，每60秒检查一次
在函数体中，位置参数（S1、$2、、S+、$*，以及$θ）都是函数（function）的参数。
父脚本的参数则临时地被函数参数所掩盖（shadowed）或隐藏。S0依旧是父脚本的名
称。当函数完成时，原来的命令行参数会恢复。
www.TopSage.com
---
## Page 163
变量、判断、重复动作
151
在Shell函数里，return命令的功能与工作方式都与exit相同：
.com
answer_the_question () {
return 42
+ 1=
需注意的是：在Shell函数体里使用exit，会终止整个Shell脚本！
因为return语句会返回一个退出值给调用者，所以你可以在if与while语句里使用
函数。举例来说，可使用Shell的函数架构取代test所执行的两个字符串的比较：
equa1---比较两个字符串
equa1(){
case *s1*in
*$2*)
return0:：两字符串匹配
esac
return 1
不匹配
1
if equal *Sa* *sb" ...
if 1 equal *Sc**sd*...
return
语法
return[exit=value ]
用途
返回由Shell函数得到的退出值给调用它的脚本。
主要选项
无
行为模式
如果未提供参数，则使用取认退出状态，也就是最后一个执行的命令的退出
状态。如果这就是你要的，那么严谨的Shell函数写法为：
cs uxngax
有些Shell光许在脚本里使用return，但如果用于函数体之外，则视为等同
于exit，这种用法并不建议，因为会出现可移桂性的困扰。
有一个项目在这里需要注意：在case模式列表里使用双引号。这么做会强制该值视为字
面上的字符串，而非Shell模式，不过在S1上使用引号则无伤大雅，但在这里没有必要。
www.TopSage.com
---
## Page 164
152
第6章
函数也有像命令那样会返回整数的退出状态值：零表示成功，非零则为失败。如果要返
回其他的值，函数应该设置一个全局性Shell变量，或是利用父脚本捕提它（使用命令
替换，见7.6节），显示其值。
myfune (}(
x=$(myfunc *$8*)
+ + +
调用ayfunc，并存输出
5.5节里的例5-6显示了一个含有9个步骤的管道，从输入文件中产生一个SGML/XML
标签的排序列表。它仅在命令行所指定的一个文件上运作。我们现在可以使用for循环
处理参数，并利用Shell函数封装管道，以利于处理多个文件。修改后的脚本见例6-5。
例6-5：从多个文件中，产生SGML标签列表
#1 /bin/sh -
HTNL/SGE/XNL文件，并将其以tab分隔列表内容为：
计数值单词标签文件名
由小至大排序单词与标签，
将输出产生至标准输出上。
语法：
taglist xnl-files
process(){
cat *$1*|
tr *() ()[1**\n\n\n\n\n\n\n* 1
egrep>{^<>]+] .≤-xM
'{ printf(*-31s\t$-15s\ts\n°, $3, $2, FILE) 1* 1
sort 1
uniq -e 1
sort -k2 -k3 1
awk *(
print ($2 = = Last) ? ($0 ·<**-*) : $0
}“
Last = $2
3
for f in *se*
do
done
process *$f*
函数（至少在POSIXShel1里）没有提供局部变量（注3）。因此所有的函数都与父脚本
注3：bash，ksh88：ksh93以及znh都提供局邮变量功题，但语法不尽相网。
www.TopSage.com
---
## Page 165
变量、判断、重复动作
153
共享变量：即，你必须小心留意不要修改父脚本里不期望被修改的东西，例如PATH，不
过这也表示其他状态是共享的，例如当前目录与播提信号（信号与捕提将在13.3.2节讨
论）
6.6小结
变量在正式一点的程序里是必备项目。SheI的受量会保存字符事值，面大盘的运算符可
在s（var...}里使用，让你控制变量替换的结果。
Shell提供许多特殊变量（那些具有非文本和数字字符名称的，例如S?与S！），用来访
问特殊信息，例如命令退出状态。Shell也有许多预先定义的特殊变量，例如PS1--
用来设置主要提示字符串。位置参数与S*和S这类的特殊变量，则用来在脚本（或函
数）被引用时，让用户可以访问被使用的参数。env、export以及readonly则用来控
制环境。
S（（...））的算术展开提供完整的算术运算能力，且使用与C相同的运算符与优先级。
程序的退出状态是一个小的整数，可以在程序完成后，供引用者使用，Shell脚本使用
exit命令来微这件事，而Shell函数则使用return命令。Shell脚本可以取得在特殊
变量S？内执行的最后一个命令的退出状态。
退出状态可以搭配if、while与unti1语句来进行流程控制，也可与1、&&，以及11
运算符搭配使用。
test命令及其别名（...]，可测试文件属性和字符申值与数值，在if、while以及
unti1语句里，它也相当有用。
for提供追历整组值的循环机制，这整组的值可以是字符申，文件名或其他等等。while
与until提供比较传统的循环方式，加上break与continue提供额外的循环控制。case
语句提供一个多重比较的功能，类似C与C++里的switch语句。
getopts、shift与$#提供处理命令行的工具。
最后，Shell函数可将相关命令组织到一起，之后再将它视为一个独立单元调用使用。它
们有点像Shel脚本，只不过它将命令存放在内存里，这样会更有效率，且它们还能影
响引用期本的变量与状态（例如当前目录）。
www.TopSage.com
---
## Page 166
TopSage.com
第7章
输入/输出、文件与命令执行
本章将完整介绍Shell语言，首先讨论的是文件：如何以不同的方式处理输入/输出和产
生文件名。接着是命令替换，也就是让你使用一个命令的输出作为命令行的参数，然后，
我们继续将重点放在命令行上，讨论Shell提供的各类引用（quoting）。最后，则是深入
探讨命令执行顺序，并针对内建于Shell里的命令作介绍。
7.1
标准输入、标准输出与标准错误输出
标准输入/输出（StandardI/O）可能是软件工具设计原则里最基本的观念了。它的构想
是：程序应有一个数据来源、数据出口（数据要去哪），以及报告问题的地方。它们分
别叫做标准输入（standardinput）、标准输出（standardoutput）和标准错误输出（standard
error）。程序应该不知道也不在意其输人与输出背后是哪种设备，这些设备可能是磁盘
文件、终端、磁带机、网络连接，或者甚至是另一个执行中的程序！程序可以预期，在
它启动的时候，这些标准位置都已打开，且已经准备好可以使用了。
有很多UNIX程序都遵循这一设计理念，认情况下，它们会读取标准输入、写入标准
输出，并将错误信息传递给标准错误输出。正如我们在第5章所见到的，这样的程序我
运算，再通过管道，将它传递给下一个。
7.2使用read读取行
read命令是将信息传递给Shell程序的重要方式之一
Sx=abc ; printf "x Lo now *%a'. Enter new value: * $x ; read x
× is now *abc*. Bnter new value: PDQ
Secho$x
PDQ
154
www.TopSage.com
---
## Page 167
输入/输出、文件与命令执行
155
read
语法
read [ -r ] variable ..
用途
将信息读入一个或多个Shell变量。
主委造项
-r
原始读取，不作任何处理，不将行结尾处的反斜杠解释为续行字持，
行为模式
自标准输入读取行（数据）后，通过Shell字段切割的功能（使用SIFS）进
行切分。第一个单词赋值给第一个变量，第二个单词则赋值第二个更量，以
此类推。如果单词多于变量，则所有剩下的单词：全赋值给最后一个变量。
read一显遇到文件结尾（end-of-file），会以失败值退出。
如果输入行以反斜杠结尾，别read会去弃反斜杠与换行字将，然后继续读取
下一行数据，如果你有使用-r选项，那么read使会以字面意义读取最后的
反斜积。
当你将read应用在管道里时，详多Shell会在一个分开的进程内执行它。在
这种情况下，任何以read所设至的变量，都不会保留它们在父Shell显的值。
对管道中间内的循环，也是这祥，
read可以一次读取所有的值到多个变量里。这种情况下，在SIFS里的字符会分隔输
人行里的数据，使其成为各自独立的单词。例如：
printf *Enter name, rank, sezial munber: *
read. nane rank aerho
最典型的用法是处理/etc/passwd文件.其标准格式为7个以冒号隔开的字段：用户名
称、加密的密码、数值型用户ID、数值型组ID、全名、根目录与登录Shell。例如：
jones:* :32713:899:Adrian . Jones/0sp211/555-0123 : /home/jone8: /bin/ksh :
你可以使用简单的循环逐行处理/etc/passwd：
while IFS1 read user pass uid gid fullnane homedir She11
do
done < /etc/passwd
处理每个用户的行
www.TopSage.com
---
## Page 168
156
第7章
这个循环并不是说“当IFS等于冒号时，便读取…”，而是通过IFS的设置，让read
使用冒号作为字段分隔字符，面并不影响循环体里使用的IFS值，也就是说，它只改变
read所继承环境内的IFS值，这一点在6.1.1节已作过说明。while循环则在6.4带里
说明。
当遇到输人文件结尾时，read会以非0值退出。这个操作将终止while循环。
乍看之下可能会觉得将/etc/passwd的重定向放置于循环体的结尾有点奇，不过这是
必需的，这样一来，read才会在每次循环的时候看到后续的行。如果循环写成这个样子：
重定向的不正确使用
while IPS=: read user pass uid gid fullnane homedir Shell < /etc/passwd
do
done
处理每个用户的行
就永远不会终止了l每次循环时，Sbell都会再打开/etc/paBswd一次，且read只读
取文件的第一行！
while read
...do...done<file还有一种替代方式，即在管道里把cat和循
环一起使用：
轻容易读取，不过使用cat会损失一点效率：
cat /etc/passwd 1
vhile IFSssread user pass, uid gid fullname homedir Shel1
done
处理每个用户的行
有一个常见的小技巧：任何命令都能用来将输人通过管道传送给read，当read用在
循环中时，这一技巧格外有用。在3.2.7节里，我们曾展示过这个简单的脚本，用来复
制整个目录树：
更改名称，留意使用的是分号定界符
导找所有目录
, 1/at/aaog/ :/Aosto/e0ou/ 1e。 pee
xx//9.pas
以Shel1的银踪模式执行
插人mkdir命令
上面的例子，其实可以容易地完成，而且从Shell程序员的观点来看更加自然，也就是
使用循环：
sutad- p adA- Aosto/euog/ p
寻找所有目录
sed *s; /home/to1stoy/ : /home/1t/ : *1
更改名称，留意使用的是分号定界符
while read newdir
读取新的目录名
do
mkdir Snevdir
建立目录
done
www.TopSage.com
---
## Page 169
输入/输出、文件与命令执行