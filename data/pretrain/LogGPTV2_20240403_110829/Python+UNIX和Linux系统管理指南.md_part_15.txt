XDOS2
'pipepos2'
'pos3']
[,Esod,
Xp053'1
'pipepos3']
www.TopSage.com
ODC
---
## Page 105
在这个示例中，使用splitlines()会获得你更想得到的结果：
会对字符串中的每一个词进行分割：
所期望的结果。通常，在处理多行文本时，需要一次处理一行。但是你或许会发现split
绝大多数时候，使用split会看到期望的结果。然而，如果遇到多行文本，或许会得不到
因为没有传递参数，split()将空格默认为分隔符。
如果想顺序去除诗歌等文本中的空格，split()是一个非常好的工具：
这个示例中有许多逗号出现，字符串仅依据第一个进行分割。
我们根据逗号对字符申进行分割，并且仅对第一次出现的逗号定界符进行分割。虽然在
进来，split()仅对字符串分割由max_split指定的次数。
但是，如果只是想在指定定界符第一次出现字符"n"的位置对字符串进行分割，那该怎
意味着在字符"x"之间没有字符。
得注意的是，针对有两个紧临的"x"字符的位置，在返回列表里有一个空字符串""。
出现"xx"到第二次出现之间。最后一个split()使用了单个字符"x"作为定界字符串。值
行查找。
回结果为['pos1'，
注意，首先为multi_delim_string定义"xxx"作为定界字符串。正如我们所期的，返
['pos1',
In [1]: prosaic_string = "Insert your clever little piece of text here."
In [1]: two_field_string = "8675309,This is a freeform, plain text, string"
In [2]: prosaic_string.split()
..：
“Pos1”从字符串起始位置，到第一个"xx"定界符；“Xpos2"出现在从第一次
'Xpos2',
a multiline
‘pos2'，‘pos3']。接下来定义"xx"作为定界字符串，split()返回
‘Xpos3'］。split()会对出现在每对定界字符串"xx"之间的字符进
,InoK.
'This is a freeform, plain text, string']
'pos2'
'multiline', ‘'piece','of',‘text'}
'clever', 'little', 'piece', 'of', 'text', 'here.']
www.TopSage.com
'pos3']
文本丨91
这
PDG
---
## Page 106
在这种情况下，join()可以帮助完成该工作：
有时，并不想分割字符串或从字符串中提取信息，而是希望将多个字符串连接到一起。
以看到，你可以迭代每一行，并将每一行内容分割为单词：
splitlines()返回一个由字符串中的每一行所组成的列表，并且保存为一组。从这里可
串，调用join()是有效的。join()会采用一连串的多个字符串作为参数。它将多个字符
tab将列表some_list进行连接。join()是字符串方法，因此对于一个类似“,”的字符
“four”组合到一些变量中。我们使用一个逗号，再一个逗号，然后是一个空格和一个
例如指定一个列表some_list，就可以将字符串“one”
In [1]: some_list = ['one', 'two', 'three','four']
START LINE::
In [s]: for line in lines:
Out[4]: ['This','is',‘a multiline','piece of','text']
In [4]: lines
In [3]: lines = multiline_string.splitlines()
Out[5]:'onetwothreefour'
In [4]: '\t'.join(some_list)
In [2]:
::END LINE
::END LINE
::END LINE
: :END LINE
START
::END LINE
第3章
In [5]:
Out[4]:
'piece'
START LINE::
'a'
['This']
'text']
ART
..:
LINE::
'multiline']
LINE::
LINE::
`'.join(some_list)
'one\ttwo\tthree\tfour
','.join(some_list)
’
'.join(some_list)
'of']
print "::END LINE'
print line.split()
www.TopSage.com
“two”
“three”和
DG
---
## Page 107
这是不够的。有时需要指定一个字符模式来实现查找和替换。模式可以帮助实现对文本
词。因此，在需要使用指定的字符序列去替换另一个字符序列时，replace()是一个非
值得注意的是，replace()不关心替换字符串是在一个词的中间或者就是一个完整的单
别是被替换的字符串以及替换字符串。下面是一个简单的replace()方法示例：
最后要介绍的是用于创建和修改文本字符的replace()方法。replace()有两个参数，分
关于列表的更多内容，可以参见《Python in a Nutshell》
也可以使用一个表达式：
解如何将some_list中所有整数元素转换为字符串：
对列表稍加理解就可以很容易地避免这种问题的发生。这里列出了帮助信息，来帮助理
join()抛出的异常追踪是自解释的，但是由于这是一个常见错误，值得引起注意。只需
join()传递的是一系列整数，那会出现什么情况呢？
然而，当需要用一个字符序列去替换另一个字符序列，但需要进行更为精确的控制时，
我们对join()和参数的使用有一些建议。注意，join()需要一个字符串序列。如果你给
串会在序列中每一项前出现。
串压缩成单个字符串，这样列表中的每个字符串将按顺序排列，但是调用join()的字符
常好的工具。
In [1]: replacable_string = "trancendental hibernational nation"
Out[5]: '0,1,2,3,4,5,6,7,8,9'
In [5]: ",".join(str(i) for i in some_list)
Out[4]: '0,1,2,3,4,5,6,7,8,9'
TypeError: sequence item o: expected string, int found
/Users/jmjones/
exceptions.TypeError.
In [3]:",".join(some_list)
Out[2]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
In [2]: some_list
In [1]: some_list = range(10)
www.TopSage.com
，"natty")
Traceback (most recent call last)
======
（也可以在线访问http://safari
。
文本丨93
---
## Page 108
许多种不同的数字-字符映射集。Unicode是一个标准，提供了数字-字符的单一映射，
显示的字符时，计算机正将其作为数字在内部正进行处理。根据语言和平台的不同，有
Python还有另一种你可能想要熟悉的字符串类型：Unicode。当你看到在计算机屏幕上
到目前为止，所有查找字符串的示例全部都使用了内建的字符串类型（str），但是
Unicode字符串
注意：
常有帮助的。接下来我们会介绍正则表达式。
的搜索，从而实现数据的提取。在一些更适于使用模式的情况下，使用正则表达式是非
使用Unicode字符串看起来并不会给我们增加许多麻烦，尤其是仅对来自一种语言的字
你也可以使用内建的unicode（）函数：
创建一个Unicode字符串与创建一个普通的字符串一样简单：
unicode.
阅A.M.Kuchling的非常不错的Unicode教程，网址是：http://www.amk.ca/python/howto/
概念并介绍Python如何对Unicode进行处理。要对Unicode作更深一步的了解，可以参
而无须考虑语言、平台或者是对文本进行处理的程序。在这一章，我们引l人Unicode的
94
希腊和俄文字符：
或者是“\uxxxxxxxx”来表示。例如，下面是一-个Unicode字符串，其中包括了拉丁、
助你处理这种情况。可以使用指定的数值创建一个Unicode字符，你可以使用“\uxxx"
符进行处理的时候。但是当字符串包含多种语言的字符时该如何处理呢？Unicode会帮
Out[2]: u'this is a unicode string'
 In [1]: unicode_string = u'this is a unicode string'
Out[2]: u'abc_\u03a0\u03a3\u03a9_\u0414\u0424\u042f'
In [1]: unicode_string = u'abc_\u03a0\u03a3\u03a9_\u0414\u0424\u042F'
In [3]:print unicode_string
与切分操作以及strip()方法一样，replace()会创建一个新字符串，而不是对字符串进行
行内修改。
第3章
www.TopSage.com
PDG
---
## Page 109
Unicode字符串包含了许多功能，其中包括在in的示例中已经提到的正则表达式的用法。
Unicode数据的常用编码。
这里，我们采用UTF-8格式对包含拉丁、希腊以及俄文字符的字符串进行编码，这是
我们不得不告诉它所使用的编码，这样它就知道如何处理我们使用的字符：
之前的示例中打印字符串，将会返回一个错误，打印内容如下：
Python依据使用的编码产生字符串（str）。对于与Mac标准一致的Python，如果试图从
unicode_string.
ini
In [8]: unicode_string.
Out[7]: [
In. [7]: unicode_string.split()
In [6]: u'foo' in unicode_string
abc_
In [4]: print unicode_string.encode('utf-8')
/Users/jmjones/ in () 
UnicodeEncodeError
In [3]:print unicode_string
icode_string.
icode_string.
ordinal not in range(128)
[u*abc_\u03a0\u03a3\u03a9_\u0414\u0424\u042f']
False
mul
getslice
www.TopSage.com
unicode_string.rpartition
unicode_string.rjust
unicode_string.rindex
unicode_string.lstrip
unicode_string.lower
unicode_string.ljust
unicode_string.join
unicode_string.isupper
unicode_string.istitle
unicode_string.isspace
unicode_string.isnumeric
unicode_string.islower
unicode_string.isdigit
unicode_string.isdecimal
unicode_string.isalpha
unicode_string.isalnum
unicode_string.index
unicode_string.find
unicode_string.expandtabs
-=====-
Traceback (most recent call last)
文本丨95
---
## Page 110
In [4]: for match in re.findall(re_string, some_string):
In [2]: re_string = "{(.*?)}}"
In [1]: import re
正则表达式来自于库，而不是语言自身的语法特征。因此，为了使用正则表达式，必须
如果对Perl比较熟悉，你很可能习惯于通过“=~”来使用正则表达式。Python所包括的
如果还没有掌握，不妨在手边准备一本Friedl的这本著作，这将是非常有帮助的。
以访问http://safari.oreilly.com/0596528124）。本节假定你已经掌握了正则表达式，但是
读由Jeffrey E.F. Friedl编著的《Mastering Regular Expressions》（O'Reily出版，你也可
式，而不是正则表达式的in和out语法。因此，如果对正则表达式不熟悉，我们建议你阅
则表达式库。这一点不会让你失望的。本节讲述的重点是如何在Python中使用正则表达
既然Python是一个连“电池都包括在内”的语言，你或许会希望Python也应包括一个正
非常必要的。
你或许现在不需要Unicode。但是如果你希望能够一直使用Python编程，熟悉Unicode是
式”。
我们做的第一件事情是加载re模块。或许正如你猜想的那样，re代表了“正则表达
MATCH-> regular expressions
MATCH->
例3-13：基本正则表达式的使用
用。参见例3-13。
首先载人正则表达式模块re。下面是一个基本的示例，展示了正则表达式的创建和使
%
MATCH->
”。接下来创建一个字符串re_string，这将是我们在示例中进行查找操作所使用的
unicode_string.endswith
unicode_string.decode
unicode_string.count
unicode_string.center
unicode_string.
example
curly brackets
words
第3章
 print
str
www.TopSage.com
unicode_string-upper
unicode_string.translate
unicode _string.title
unicode_string.strip
unicode_string.startswith
unicode_string.split
unicode_string.rsplit
unicode_string.swapcase
---
## Page 111
正则表达式应用于一个有数百万行文本的文件的每一行，性能问题便会变得明显起来。
会对执行的性能产生影响如果你在某些循环中多次重复某一操作，例如在一个循环中将
在Python中，你可以根据个人喜好选择使用正则表达式的方法。然而，选用不同的方法
MATCH->words
In[
In[2]:re_obj=re.compile("{{（.*²）})")
In[1]:importre
例3-14：简单正则表达式，已编译模式
MATCH->
例3-14演示了双大括号示例，并展示了如何使用一个编译后的正则表达式对象。
相关内容，网络链接地址是：http://docs.python.org/liblre-objects.html。
则表达式对象的内容，可参见《PythonLibraryReference》的RegularExpressionObjects
ModuleContents相关内容，http:lldocs.python.org/lib/node46.html。更多的关于编译后正
关于re模块内容的更多信息，包括可用函数等，参见《PythonLibraryReference》的
findall().
创建。第二，
表达式模式"{（.*?））}"，而是创建了一个编译的正则表达式对象，并且是使用模式来
来创建。在使用编译与非编译的示例中存在两个主要的差别。首先，没有继续引用正则
re.compile（）来创建；它包括一些正则表达式方法，也通过传递模式给re.compile（）
例中所演示的那样。第二种是创建一个它编译的正则表达式对象，然后使用对象中的方
在Python中有两种使用正则表达式的方式。第一种是直接使用re模块中的函数，正如上
example以及regularexpressions，这正是双大括号中的所包含的内容。
索some_string字符串。正如你所看到的，输出结果中包括words、curly brackets，
使用re模块中的findall（）函数对匹配结果进行处理，findall（）将根据模式re_string搜
包括由大括号包括起来的一组单词以及没有被大括号包括起来的单词。最后，我们循环
模式。该模式匹配两个连续的左大括号（{{），然后是任意文本（也可以为空），最后
[4]:for match in re_obj.findall(some_string):
curlybrackets
，没有在re模块上调用findall()，
",match
www.TopSage.com
，而是在编译后的正则表达式对象上调用
文本丨97
ODG
---