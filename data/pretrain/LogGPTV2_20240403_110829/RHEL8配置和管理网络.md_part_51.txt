    ``` literallayout
    # nft add rule nat prerouting iifname ens3 tcp dport { 80, 443 } dnat to 192.0.2.1
    ```
4.  根据您的环境，添加 SNAT 或伪装规则以更改源地址：
    ::: orderedlist
    1.  如果 `ens3`{.literal} 接口使用了动态 IP 地址，请添加伪装规则：
        ``` literallayout
        # nft add rule nat postrouting oifname "ens3" masquerade
        ```
    2.  如果 `ens3`{.literal} 接口使用静态 IP 地址，请添加 SNAT
        规则。例如，如果 `ens3`{.literal} 使用 `198.51.100.1`{.literal}
        IP 地址：
        ``` literallayout
        # nft add rule nat postrouting oifname "ens3" snat to 198.51.100.1
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   [如需更多信息，请参阅不同的 NAT 类型：伪装、源 NAT、目标 NAT
    和重定向](#getting-started-with-nftables_configuring-and-managing-networking.html#the-different-nat-types-masquerading-source-nat-destination-nat-and-redirect_configuring-nat-using-nftables "不同的 NAT 类型： masquerading、source NAT、destination NAT 和 redirect"){.link}
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#proc_configuring-a-redirect-using-nftables_configuring-nat-using-nftables}使用 nftables 配置重定向 {.title}
:::
`redirect`{.literal} 功能是目标网络地址转换(DNAT)的特殊情况，它根据链
hook 将数据包重定向到本地机器。
以下流程描述了如何将发送到本地主机的端口 `22`{.literal}
的传入和转发的流量重定向到端口 `2222`{.literal}。
::: orderedlist
**流程**
1.  创建一个表：
    ``` literallayout
    # nft add table nat
    ```
2.  将 `prerouting`{.literal} 链添加到表中：
    ``` literallayout
    # nft -- add chain nat prerouting { type nat hook prerouting priority -100 \; }
    ```
    请注意，您必须将 `--`{.literal} 选项传递给 `nft`{.literal}
    命令，以避免 shell 将负优先级值解析为 `nft`{.literal} 命令的选项。
3.  为 `prerouting`{.literal} 链添加一条规则，将端口 `22`{.literal}
    中传入的流量重定向到端口 `2222`{.literal} ：
    ``` literallayout
    # nft add rule nat prerouting tcp dport 22 redirect to 2222
    ```
:::
::: itemizedlist
**其它资源**
-   [如需更多信息，请参阅不同的 NAT 类型：伪装、源 NAT、目标 NAT
    和重定向](#getting-started-with-nftables_configuring-and-managing-networking.html#the-different-nat-types-masquerading-source-nat-destination-nat-and-redirect_configuring-nat-using-nftables "不同的 NAT 类型： masquerading、source NAT、destination NAT 和 redirect"){.link}
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#using-sets-in-nftables-commands_getting-started-with-nftables}使用 nftables 命令中的设置 {.title}
:::
`nftables`{.literal}
框架原生支持集合。您可以使用一个集合，例如，规则匹配多个 IP
地址、端口号、接口或其他匹配标准。
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#using-anonymous-sets-in-nftables_using-sets-in-nftables-commands}在 nftables 中使用匿名集合 {.title}
:::
匿名集合包含使用逗号分开的值，比如
`{ 22, 80, 443 }`{.literal}，它们直接在规则中使用。您还可以将匿名集合用于
IP 地址或其他匹配标准。
匿名集合的缺陷是，如果要更改集合，则需要替换规则。对于动态解决方案，使用命名的集合，如在
[nftables
中使用命名集中所述](#getting-started-with-nftables_configuring-and-managing-networking.html#using-named-sets-in-nftables_using-sets-in-nftables-commands "在 nftables 中使用命名集"){.link}。
::: itemizedlist
**先决条件**
-   `example_chain`{.literal} 链和 `example_table`{.literal} 表在
    `inet`{.literal} 系统中存在。
:::
::: orderedlist
**流程**
1.  例如，在 `example_table`{.literal} 的 `example_chain`{.literal}
    中添加一条规则，允许进入的流量进入端口
    `22`{.literal}、`80`{.literal}和 `443`{.literal}：
    ``` literallayout
    # nft add rule inet example_table example_chain tcp dport { 22, 80, 443 } accept
    ```
2.  另外，还可在 `example_table`{.literal} 中显示所有链及其规则：
    ``` literallayout
    # nft list table inet example_table
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
        tcp dport { ssh, http, https } accept
      }
    }
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#using-named-sets-in-nftables_using-sets-in-nftables-commands}在 nftables 中使用命名集 {.title}
:::
`nftables`{.literal} 框架支持 mutable
命名集。命名集是一个列表或一组元素，您可以在表中的多个规则中使用。匿名集合的另外一个好处在于，您可以更新命名的集合而不必替换使用集合的规则。
当您创建一个命名集时，必须指定集合包含的元素类型。您可以设置以下类型：
::: itemizedlist
-   对于包含 IPv4 地址或范围的集合的 `ipv4_addr`{.literal}，如
    `192.0.2.1`{.literal} 或 `192.0.2.0/24`{.literal}。
-   对于包含 IPv6 地址或范围的 `ipv6_addr`{.literal}（如
    `2001:db8:1::1`{.literal} 或 `2001:db8:1::1/64`{.literal}）的集合。
-   对于包含介质访问控制（MAC）地址列表集合的 `ether_addr`{.literal}，如
    `52:54:00:6b:66:42`{.literal}。
-   包含互联网协议类型列表集合的 `inet_proto`{.literal}，如
    `tcp`{.literal}。
-   包含互联网服务列表集合的 `inet_service`{.literal}，如
    `ssh`{.literal}。
-   包含数据包标记列表集合的 `mark`{.literal}。数据包标记可以是任意正 32
    位整数值（`0`{.literal} 到 `2147483647`{.literal}）。
:::
::: itemizedlist
**先决条件**
-   `example_chain`{.literal} chain 和 `example_table`{.literal}
    表存在。
:::
::: orderedlist
**流程**
1.  创建一个空集。以下示例为 IPv4 地址创建了一个集合：
    ::: itemizedlist
    -   要创建可存储多个独立 IPv4 地址的集合：
        ``` literallayout
        # nft add set inet example_table example_set { type ipv4_addr \; }
        ```
    -   要创建可存储 IPv4 地址范围的集合：
        ``` literallayout
        # nft add set inet example_table example_set { type ipv4_addr \; flags interval \; }
        ```
    :::
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    要避免 shell 认为分号作为命令结尾，您必须用反斜杠转义分号。
    :::
2.  另外，还可创建使用该集合的规则。例如，以下命令为
    `example_table`{.literal} 的 `example_chain`{.literal}
    添加了一个规则，该规则将丢弃来自 `example_set`{.literal} 中的 IPv4
    地址的所有数据包。
    ``` literallayout
    # nft add rule inet example_table example_chain ip saddr @example_set drop
    ```
    因为 `example_set`{.literal} 仍为空，所以该规则目前无效。
3.  为 `example_set`{.literal} 添加 IPv4 地址：
    ::: itemizedlist
    -   如果您创建存储单个 IPv4 地址的集合，请输入：
        ``` literallayout
        # nft add element inet example_table example_set { 192.0.2.1, 192.0.2.2 }
        ```
    -   如果您创建存储 IPv4 范围的集合，请输入：
        ``` literallayout
        # nft add element inet example_table example_set { 192.0.2.0-192.0.2.255 }
        ```
        当您指定 IP
        地址范围时，可以使用无类别域间路由（CIDR）标记，如上例中的
        `192.0.2.0/24`{.literal}。
    :::
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#related_information_2}相关信息 {.title}
:::
::: itemizedlist
-   有关集合的详情，请查看 `Sets`{.literal} man page 中的
    `nft(8)`{.literal} 部分。
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#using-verdict-maps-in-nftables-commands_getting-started-with-nftables}在 nftables 命令中使用 verdict 映射 {.title}
:::
verdict 映射（也称为字典）使 `nft`{.literal}
能够根据数据包信息执行操作，方法是将条件与操作匹配。
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#using-anonymous-maps-in-nftables_using-verdict-maps-in-nftables-commands}在 nftables 中使用匿名映射 {.title}
:::
匿名映射是您直接在规则中使用的 `{ match_criteria : action }`{.literal}
声明。这个语句可以包含多个用逗号分开的映射。
匿名映射的缺点是，如果要更改映射，则必须替换规则。对于动态解决方案，请使用命名映射，如在
[nftables
中使用命名映射中所述](#getting-started-with-nftables_configuring-and-managing-networking.html#using-named-maps-in-nftables_using-verdict-maps-in-nftables-commands "在 nftables 中使用命名映射"){.link}。
这个示例描述了如何使用匿名映射将 IPv4 和 IPv6 协议的 TCP 和 UDP
数据包路由到不同的链，以分别计算传入的 TCP 和 UDP 数据包。
::: orderedlist
**流程**
1.  创建 `example_table`{.literal}：
    ``` literallayout
    # nft add table inet example_table
    ```
2.  在 `example_table`{.literal}中创建 `tcp_packets`{.literal} 链：
    ``` literallayout
    # nft add chain inet example_table tcp_packets
    ```
3.  为 `tcp_packets`{.literal} 添加一条计算此链中流量的规则：
    ``` literallayout
    # nft add rule inet example_table tcp_packets counter
    ```
4.  在 `example_table`{.literal} 中创建 `udp_packets`{.literal} 链
    ``` literallayout
    # nft add chain inet example_table udp_packets
    ```
5.  为 `udp_packets`{.literal} 添加一条计算此链中流量的规则：
    ``` literallayout
    # nft add rule inet example_table udp_packets counter
    ```
6.  为传入的流量创建一个链。例如，在 `example_table`{.literal}
    中创建一个名为 `incoming_traffic`{.literal}
    的链，它会过滤传入的流量：
    ``` literallayout
    # nft add chain inet example_table incoming_traffic { type filter hook input priority 0 \; }
    ```
7.  添加带有匿名映射的规则 `incoming_traffic`{.literal} ：
    ``` literallayout
    # nft add rule inet example_table incoming_traffic ip protocol vmap { tcp : jump tcp_packets, udp : jump udp_packets }
    ```
    匿名映射区分数据包，并根据它们的协议将它们发送到不同的计数链。
8.  要列出流量计数器，显示 `example_table`{.literal}：
    ``` literallayout
    # nft list table inet example_table
    table inet example_table {
      chain tcp_packets {
        counter packets 36379 bytes 2103816
      }
      chain udp_packets {
        counter packets 10 bytes 1559
      }
      chain incoming_traffic {
        type filter hook input priority filter; policy accept;
        ip protocol vmap { tcp : jump tcp_packets, udp : jump udp_packets }
      }
    }
    ```
    `tcp_packets`{.literal} 和 `udp_packets`{.literal} chain
    中的计数器会显示接收的数据包和字节数。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#using-named-maps-in-nftables_using-verdict-maps-in-nftables-commands}在 nftables 中使用命名映射 {.title}
:::
`nftables`{.literal}
框架支持命名映射。您可以在表中的多个规则中使用这些映射。匿名映射的另一个优势在于，您可以更新命名映射而不替换使用它的规则。