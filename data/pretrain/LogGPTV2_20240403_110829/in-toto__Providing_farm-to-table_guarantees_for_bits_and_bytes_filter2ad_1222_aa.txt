title:in-toto: Providing farm-to-table guarantees for bits and bytes
author:Santiago Torres-Arias and
Hammad Afzali and
Trishank Karthik Kuppusamy and
Reza Curtmola and
Justin Cappos
in-toto: Providing farm-to-table guarantees 
for bits and bytes
Santiago Torres-Arias, New York University; Hammad Afzali, New Jersey Institute of 
Technology; Trishank Karthik Kuppusamy, Datadog; Reza Curtmola, New Jersey Institute of 
Technology; Justin Cappos, New York University
https://www.usenix.org/conference/usenixsecurity19/presentation/torres-arias
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.in-toto: Providing farm-to-table guarantees for bits and bytes
Santiago Torres-Arias†, Hammad Afzali‡, Trishank Karthik Kuppusamy∗ , Reza Curtmola‡ ,
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
Justin Cappos†
PI:EMAIL
†New York University, Tandon School of Engineering
∗Datadog
‡Department of Computer Science, New Jersey Institute of Technology
Abstract
The software development process is quite complex
and involves a number of independent actors. Developers
check source code into a version control system, the code
is compiled into software at a build farm, and CI/CD systems
run multiple tests to ensure the software’s quality among a
myriad of other operations. Finally, the software is packaged
for distribution into a delivered product, to be consumed by
end users. An attacker that is able to compromise any single
step in the process can maliciously modify the software and
harm any of the software’s users.
Introduction
To address these issues, we designed in-toto, a frame-
work that cryptographically ensures the integrity of the
software supply chain. in-toto grants the end user the
ability to verify the software’s supply chain from the project’s
inception to its deployment. We demonstrate in-toto’s
effectiveness on 30 software supply chain compromises
that affected hundreds of million of users and showcase
in-toto’s usage over cloud-native, hybrid-cloud and cloud-
agnostic applications. in-toto is integrated into products and
open source projects that are used by millions of people daily.
The project website is available at: https://in-toto.io.
1
Modern software is built through a complex series of steps
called a software supply chain. These steps are performed
as the software is written, tested, built, packaged, localized,
obfuscated, optimized, and distributed. In a typical software
supply chain, these steps are “chained” together to transform
(e.g., compilation) or verify the state (e.g., the code quality)
of the project in order to drive it into a delivered product,
i.e., the ﬁnished software that will be installed on a device.
Usually, the software supply chain starts with the inclusion
of code and other assets (icons, documentation, etc.) in a
version control system. The software supply chain ends with
the creation, testing and distribution of a delivered product.
Securing the supply chain is crucial to the overall security
of a software product. An attacker who is able to control
any step in this chain may be able to modify its output for
malicious reasons that can range from introducing backdoors
in the source code to including vulnerable libraries in the
delivered product. Hence, attacks on the software supply
chain are an impactful mechanism for an attacker to affect
many users at once. Moreover, attacks against steps of the
software supply chain are difﬁcult to identify, as they misuse
processes that are normally trusted.
Unfortunately, such attacks are common occurrences,
have high impact, and have experienced a spike in recent
years [60, 129]. Attackers have been able to inﬁltrate
version control systems, including getting commit access
to the Linux kernel [58] and Gentoo Linux [76], stealing
Google’s search engine code [22], and putting a backdoor
in Juniper routers [48, 96]. Popular build systems, such as
Fedora, have been breached when attackers were able to sign
backdoored versions of security packages on two different
occasions [75, 123]. In another prominent example, attackers
inﬁltrated the build environment of the free computer-cleanup
tool CCleaner, and inserted a backdoor into a build that
was downloaded over 2 million times [126]. Furthermore,
attackers have used software updaters to launch attacks, with
Microsoft [108], Adobe [95], Google [50, 74, 140], and Linux
distributions [46, 143] all showing signiﬁcant vulnerabilities.
Perhaps most troubling are several attacks in which nation
states have used software supply chain compromises to target
their own citizens and political enemies [35,55,82,92,93,108,
127,128,138]. There are dozens of other publicly disclosed in-
stances of such attacks [8,33,38,39,41,52,53,65,70,76,79,80,
83,95,107,113,115,118,119,122,130–132,134,139,141,146].
Currently, supply chain security strategies are limited to se-
curing each individual step within it. For example, Git commit
signing controls which developers can modify a reposi-
tory [78], reproducible builds enables multiple parties to
build software from source and verify they received the same
result [25], and there are a myriad of security systems that
protect software delivery [2, 20, 28, 100, 102]. These building
blocks help to secure an individual step in the process.
Although the security of each individual step is critical,
such efforts can be undone if attackers can modify the output
of a step before it is fed to the next one in the chain [22, 47].
These piecemeal measures by themselves can not stop
malicious actors because there is no mechanism to verify
that: 1) the correct steps were followed and 2) that tampering
did not occur in between steps. For example a web server
compromise was enough to allow hackers to redirect user
downloads to a modiﬁed Linux Mint disk image, even
though every single package in the image was signed and
the image checksums on the site did not match. Though
this was a trivial compromise, it allowed attackers to build
a hundred-host botnet in a couple of hours [146] due to the
lack of veriﬁcation on the tampered image.
In this paper we introduce in-toto, Latin for “as a whole,”
the ﬁrst framework that holistically enforces the integrity
of a software supply chain by gathering cryptographically
veriﬁable information about the chain itself. To achieve
this, in-toto requires a project owner to declare and sign a
USENIX Association
28th USENIX Security Symposium    1393
layout of how the supply chain’s steps need to be carried out,
and by whom. When these steps are performed, the involved
parties will record their actions and create a cryptographically
signed statement — called link metadata — for the step they
performed. The link metadata recorded from each step can be
veriﬁed to ensure that all steps were carried out appropriately
and by the correct party in the manner speciﬁed by the layout.
The layout and collection of link metadata tightly connect
the inputs and outputs of the steps in such a chain, which
ensures that tampering can not occur between steps. The lay-
out ﬁle also deﬁnes requirements (e.g., Twistlock [30] must
not indicate that any included libraries have high severity
CVEs) that will be enforced to ensure the quality of the end
product. These additions can take the form of either distinct
commands that must be executed, or limitations on which
ﬁles can be altered during that step (e.g., a step that localizes
the software’s documentation for Mexican Spanish must not
alter the source code). Collectively, these requirements can
minimize the impact of a malicious actor, drastically limiting
the scope and range of actions such an attacker can perform,
even if steps in the chain are compromised.
We have built a series of production-ready implementations
of in-toto that have now been integrated across several
vendors. This includes integration into cloud vendors such
as Datadog and Control Plane, to protect more than 8,000
cloud deployments. Outside of the cloud, in-toto is used
in Debian to verify packages were not tampered with as part
of the reproducible builds project [25]. These deployments
have helped us to reﬁne and validate the ﬂexibility and
effectiveness of in-toto.
Finally, as shown by our security analysis of three in-toto
deployments, in-toto is not a “lose-one, lose-all” solution,
in that its security properties only partially degrade with
a key compromise. Depending on which key the attacker
has accessed, in-toto’s security properties will vary.
Our in-toto deployments could be used to address most
(between 83% - 100%) historical supply chain attacks.
2 Deﬁnitions and Threat Model
This section deﬁnes the terms we use to discuss the software
supply chain and details the speciﬁc threat model in-toto
was designed to defend against.
2.1 Deﬁnitions
The software supply chain refers to the series of steps
performed in order to create and distribute a delivered
product. A step is an operation within this chain that takes in
materials (e.g., source code, icons, documentation, binaries,
etc.) and and creates one or more products (e.g., libraries,
software packages, ﬁle system images, installers, etc.). We
refer to both materials and products generically as artifacts.
It is common to have the products of one step be used
as materials in another step, but this does not mean that a
supply chain is a sequential series of operations in practice.
Depending on the speciﬁcs of a supply chain’s workﬂow,
steps may be executed in sequence, in parallel, or as a
combination of both. Furthermore, steps may be carried out
by any number of hosts, and many hosts can perform the
same step (e.g., to test a step’s reproducibility).
In addition to the materials and products, a step in the
supply chain produces another key piece of information,
byproducts. The step’s byproducts are things like the STDOUT,
STDERR, and return value that indicate whether a step was
successful or had any problems. For example, a step that runs
unit tests may return a non-zero code if one of the unit tests
fails. Validating byproducts is key to ensuring that steps of
the supply chain indicate that the software is ready to use.
As each step executes, information called link metadata
that describes what occured, is generated. This contains
the materials, products, and byproducts for the step. This
information is signed by a key used by the party who
performs the action, which we call a functionary. Regardless
of whether the functionary commits code, builds software,
performs QA, localizes documentation, etc., the same link
metadata structure is followed. Sometimes a functionary’s
participation involves repeated human action, such as a
developer making a signed git commit for their latest code
changes. In other cases, a functionary may participate in
the supply chain in a nearly autonomous manner after setup,
such as a CI/CD system. Further, many functionaries can be
tasked to perform the same step for the sake of redundancy
and a minimum threshold of them may be required to agree
on the result of a step they all carried out.
To tie all of the pieces together, the project owner sets
up the rules for the steps that should be performed in a
software supply chain. In essence, the project owner serves
as the foundation of trust, stating which steps should be
performed by which functionaries, along with specifying
rules for products, byproducts, and materials in a ﬁle called
the layout. The layout enables a client that retrieves the
software to cryptographically validate that all actions were
performed correctly. In order to make this validation possible,
a client is given the delivered product, which contains the
software, layout, and link metadata. The layout also contains
any additional actions besides the standard veriﬁcation
of the artifact rules to be performed by the client. These
actions, called inspections, are used to validate software
by further performing operations on the artifacts inside the
delivered product (e.g., verifying no extraneous ﬁles are
inside a zip ﬁle). This way, through standard veriﬁcation
and inspections, a client can assure that the software went
through the appropriate software supply chain processes.
2.2 Threat Model
The goal of in-toto is to minimize the impact of a party
that attempts to tamper with the software supply chain. More
speciﬁcally, the goal is to retain the maximum amount of
security that is practical, in any of the following scenarios:
Interpose between two existing elements of the supply
chain to change the input of a step. For example, an
attacker may ask a hardware security module to sign
a malicious copy of a package before it is added to the
repository and signed repository metadata is created to
index it [27, 44, 51, 76, 107, 120, 120, 147].
1394    28th USENIX Security Symposium
USENIX Association
Act as a step (e.g., compilation), perhaps by compro-
mising or coercing the party that usually performs that
step [27, 57, 62, 64, 76, 81, 99, 112, 125]. For example,
a hacked compiler could insert malicious code into
binaries it produces [126, 136].
Provide a delivered product for which not all steps have
been performed. Note that this can also be a result of an
honest mistake [37, 49, 56, 68, 73, 97, 142].
Include outdated or vulnerable elements in the supply
chain [59,61,91,94,117]. For example, an attacker could
bundle an outdated compression library that has many
known exploits.
Provide a counterfeit version of the delivered product
to users [8, 35, 66, 70, 71, 95, 118, 134, 135, 146]. This
software product can come from any source and be
signed by any keys. While in-toto will not mandate
how trust is bootstrapped, Section 6 will show how other
protocols such as TUF [28], as well as popular package
managers [2] can be used to bootstrap project owner keys.
Key Compromise. We assume that the public keys of
project owners are known to the veriﬁers and that the attacker
is not able to compromise the corresponding secret key. In ad-
dition, private keys of developers, CI systems and other infras-
tructure public keys are known to a project owner and their cor-
responding secret keys are not known to the attacker. In sec-
tion 5.2, we explore additional threat models that result from
different degrees of attacker access to the supply chain, includ-
ing access to infrastructure and keys (both online and ofﬂine).
2.3 Security Goals
To build a secure software supply chain that can combat
the aforementioned threats, we envision that the following
security goals would need to be achieved:
supply chain layout integrity: All of the steps deﬁned
in a supply chain are performed in the speciﬁed order.
This means that no steps can be added or removed, and
no steps can be reordered.
artifact ﬂow integrity: All of the artifacts created, trans-
formed, and used by steps must not be altered in-between
steps. This means that if step A creates a ﬁle foo.txt
and step B uses it as a material, step B must use the ex-
act ﬁle foo.txt created by step A. It must not use, for
example, an earlier version of the ﬁle created in a prior
run.
step authentication: Steps can only be performed by the
intended parties. No party can perform a step unless it is
given explicit permission to do so. Further, no delivered
products can be released unless all steps have been per-
formed by the right party (e.g., no releases can be made
without a signoff by a release engineer, which would stop
accidental development releases [68]).
implementation transparency: in-toto should not re-
quire existing supply chains to change their practices in
order to secure them. However, in-toto can be used
to represent the existing supply chain conﬁguration and
reason about its security practices.
graceful degradation of security properties: in-toto
should not lose all security properties in the event of
key compromise. That is, even if certain supply chain
steps are compromised, the security of the system is not
completely undermined.
In addition to these security goals, in-toto is also geared
towards practicality and, as such, it should maintain minimal
operational, storage and network overheads.
3 System overview
The current landscape of software supply chain security is
focused on point-solutions that ensure that an individual
step’s actions have not been tampered with. This limitation
usually leads to attackers compromising a weaker step in
the chain (e.g., breaking into a buildfarm [115]), removing
steps from the chain [68] or tampering with artifacts while
in transit (i.e., adding steps to the chain [66]). As such, we
identify two fundamental limitations of current approaches
to secure the software supply chain:
1. Point solutions designed to secure individual supply
chain steps cannot guarantee the security of the entire
chain as a whole.
2. Despite the widespread use of unit testing tools and
analysis tools, like fuzzers and static analyzers, software
rarely (if ever) includes information about what tools
were run or their results. So point solutions, even if used,
provide limited protection because information about
these tools is not appropriately utilized or even shown
to clients who can make decisions about the state of the
product they are about to utilize.
We designed in-toto to address these limitations by
ensuring that all individual measures are applied, and by the
right party in a cryptographically veriﬁable fashion.
In concrete terms, in-toto is a framework to gather and
verify metadata about different stages of the supply chain,
from the ﬁrst step (e.g., checking-in code on a version control
system) to delivered product (e.g., a .deb installable package).
If used within a software supply chain, in-toto ensures that
the aforementioned security goals are achieved.
3.1 in-toto parties and their roles
Similar to other modern security systems [101, 102, 121],
in-toto uses security concepts like delegations and roles
to limit the scope of key compromise and provide a graceful
degradation of its security properties.
In the context of in-toto, a role is a set of duties and
actions that an actor must perform. The use of delegations
and roles not only provides an important security function
(limiting the impact of compromise and providing separation
of privilege), but it also helps the system remain ﬂexible
and usable so that behaviors like key sharing are not needed.
Given that every project uses a very speciﬁc set of tools and
practices, ﬂexibility is a necessary requirement for in-toto.
There are three roles in the framework:
Project Owner: The project owner is the party in charge
of deﬁning the software supply chain layout (i.e., deﬁne
USENIX Association
28th USENIX Security Symposium    1395
inspections will be performed by the veriﬁer on the delivered
product to draw further insight about its correctness. This is
useful for complex supply chains in which the basic semantics
of in-toto cannot describe their speciﬁc requirements. For
example, an inspection step can be used to namespace restrict
certain VCS-speciﬁc operations to speciﬁc functionaries such
as making sure that only a QA team member merges code