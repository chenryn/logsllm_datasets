access to the service, coordination among replicas at diﬀerent sites becomes
a necessity, increasing the latency for request execution. In contrast, if they
choose to provide weak consistency, then operations can execute by contacting
8
HTTPServersInternalServicesExternalServicesExternalData ServicesInterface LayerProcessingLayerDataLayerServiceDatabaseServersAplicationServersa single replica, but the semantics of the service will diﬀer from those of a
centralized server (or a strongly consistent system).
2.2. CONSISTENCY
2.2 Consistency
Consistency properties provide a way for programmers to know what to expect
from services. For instance, a programmer should know if, after making a write,
the eﬀects of that write will be reﬂected in the next operations, or if the eﬀects
of a sequence of writes are observed by the same order they where issued. More
generally, consistency guarantees are a promise made by the service regarding
the observed values by clients given the history of the system (and sometimes
the client). Knowing these properties and having services that provide strong
consistency helps programmers to reason about what they need to do when
writing applications.
Several consistency models exist to describe the consistency of systems,
below we present some of these models informally, and we defer a precise
deﬁnition of the ones we focus on to subsequent chapters.
Linearizability [42] - Ensures that the execution of several operations is
equal to some total order that is equivalent with the real-time ordering of the
operations, i.e, ensures that the eﬀects of an operation are always reﬂected
before replying.
Causal [47] [3] - Ensures that the execution of several operations respects
the happens-before [47] relation between them, whereas non-causally related
operations can appear in any order.
Session Guarantees [64] - These various guarantees were deﬁned infor-
mally by Terry et al. in their original paper [64] that presented the concept
of session guarantees. A session is characterized by a sequence of operations
executed during an interval of time. There are four session guarantees:
1. Read Your Writes - Ensures that a read operation observes the eﬀects of
all writes previously executed in the session.
9
CHAPTER 2. BACKGROUND AND RELATED WORK
2. Monotonic Reads - Ensures that the eﬀects of all writes observed in a
read operation are also reﬂected in all subsequent reads performed in the
same session.
3. Monotonic Writes - Ensures that all writes issued in same session are
ordered in the order in which they were issued.
4. Writes Follow Reads - Ensures that writes are ordered after all writes
whose eﬀects have been previously observed in the session making the
write.
A system that provides the four guarantees eﬀectively provides the causal con-
sistency model [26]. Since these guarantees are important to this work we
explain them in more detail in Section 3.2.1.
Eventual [67] - Ensures that eventually, when there are no new writes,
replicas will have the same state.
Linearizability is a strong consistency model for which low latency is im-
possible to achieve in geo-replicated scenarios [1, 49]. For example, if a write
ﬁnishes in one location the eﬀects of that write must be immediately reﬂected
in other locations. This implies that the write must wait until the operation
ﬁnishes across all locations or at a quorum of replicas.
It is also impossible to implement a distributed data system that provides
strong consistency, availability, and partition tolerance simultaneously. Again,
if we look to Linearizability, where the eﬀects of a write have to be reﬂected in
all locations or at a majority of replicas immediately, the presence of a network
partition makes this impossible to achieve [31], as stated by CAP theorem [24,
39]. It has also been shown that the strongest consistency model that can be
enforced with network partitions is the causal model [13, 51]. Despite this,
there are scenarios where strong consistency is necessary, and several systems
implement strong consistency and try to minimize its cost [17, 29, 52].
The alternative is to use weaker consistency models like the causal model,
the session guarantees, or eventual consistency. Eventual consistency is easy
to implement, since the system only needs to guarantee convergence in the
10
2.3. REPLICATION AND CONSISTENCY ANOMALIES
absence of writes. Causality and some session properties are more complex to
implement, because its necessary to track operation dependencies (e.g., using
vector clocks [56]) and enforce the happens-before relation. However it is
much easier for developers to develop applications on top of a service that
ensures these guarantees, than with eventual consistency, thus several systems
implement causal consistency [16, 18, 23, 45, 49, 57, 72].
2.3 Replication and Consistency Anomalies
Services need to scale out in order to provide good performance to clients, as
described in Section 2.1. They need to be fault-tolerant, be always available,
and provide low latency between the client and the service. To this end, they
use replication, i.e., they replicate the data in several servers. In this section
we present two replications methods widely used in several systems [25, 53,
54, 58, 60] and show how some consistency anomalies can arise. The intention
in this section is not to provide an exhaustive list of consistency anomalies
that can arise and why, but just to give an introduction on how the consistency
anomalies that we focus in this work can emerge.
2.3.1 Single-Master Replication
The ﬁrst replication method that we present is Single-Master replication [60].
In this method, there are several servers and one is selected as master. The
remaining servers are considered slaves replicas (see Figure 2.2). The master
executes write and read requests from the clients and propagates the write
operations to the slaves. If there is a problem with the master, one of the slaves
takes its place. This eliminates having a single point of failure in the system. In
order to balance the load between replicas and to improve the latency between
the clients and the service, several systems allow slave replicas to execute read
requests [11, 58].
Several consistency anomalies can arise when a service uses this replication
method. To show this let us assume a simple scenario where:
1. Servers do not fail.
11
CHAPTER 2. BACKGROUND AND RELATED WORK
Figure 2.2: Single-Master Replication
2. Write requests terminate when the write operation ﬁnished in the master
and before being propagated to slaves (asynchronous replication [2]).
3. Writes are guaranteed to be received by the slaves in the order they were
issued.
4. Slaves handle client’s read requests without synchronizing with other
replicas.
The example in Figure 2.3, shows a possible state of a social feed in the
diﬀerent servers after three posts from the same client. The master has the
three messages and is propagating them, Slave 1 already has the ﬁrst two
messages and the other slaves only have the ﬁrst. In this example the following
violations of consistency models and properties can occur:
Linearizability - If a client issues a read operation to a slave, it will miss at
least one of the messages, and thus the total order that is equivalent with the
real-time ordering of the operations is not guaranteed: in this case, the read
operation should return a state that reﬂects the three messages.
12
MasterSlaveSlaveSlave2.3. REPLICATION AND CONSISTENCY ANOMALIES
Figure 2.3: Single-Master Replication, example with one client
Session Guarantees - Consider that all write operations are made by client
c in the same session.
1. Read Your Writes - If client c issues a read operation to a slave, it may
miss at least one of the messages that were posted by c previously.
2. Monotonic Reads - If client c issues a read operation to the master and
then to one of the slaves, the second read operations may miss at least
one message that was previously observed. This means that successive
reads in the same session may not reﬂect a nondecreasing set of writes.
3. Monotonic Writes - This property is guaranteed because we assumed,
in this example, that writes are guaranteed to be received by the slave
replicas in the order they where issued in the master, which is the order
they were issued by client c in the session.
4. Writes Follow Reads - This property is guaranteed, however we need
another example to explain why, Figure 2.4, illustrates a possible state of
13
MasterSlave1Slave2Slave3M1M1M1M2M1M21.Post (M1)2.Post (M2)SynchronousAsynchronousM33.Post (M3)CHAPTER 2. BACKGROUND AND RELATED WORK
Figure 2.4: Single-Master Replication, example with two client
a social feed in the diﬀerent servers after two posts from client c1 (opera-
tions 1 and 2) and a read that precedes a post from client c2 (operations 3
and 4), respectively, that returned from Slave 1 the two messages posted
by c1 (each client executes in the context of its own session). After the
execution of all operations, the master received the three messages and
is propagating them. Replica Slave 1 has the messages posted by client
c1 while the remaining slaves replicas only received M1. The Writes Fol-
low Reads property is guaranteed because the writes are assumed to be
received by the slaves in the order they where issued in the master, which
guarantees that if a server returns a message m, the reply must return all
other messages issued before m as perceived by the master replica.
Causal - Since the Read Your Writes and Monotonic Reads properties are
not guaranteed, causal consistency cannot be guaranteed, a system that pro-
vides this consistency model must enforce the four session properties.
14
MasterSlave1Slave2Slave3M1M1M1M2M1M21. C1 -Post(M1)2. C1 -Post(M2)SynchronousAsynchronousM34. C2 -Post(M3)3.  C2 -Read2.3. REPLICATION AND CONSISTENCY ANOMALIES
Figure 2.5: Multi-Master Replication
2.3.2 Multi-Master Replication
The second replication method that we present is Multi-Master replication [60].
In this method, each server is a master and can execute writes and reads (see
Figure 2.5). This approach avoids having a single point of failure and can
balance the load produced by write operations issued by clients among the
servers (particularly the cost of replying to clients). However, it can be diﬃcult
to implement in systems that need to serialize the writes because there are
several masters. In Single-Master replication this can be less complicated since
there is only one master and it can be responsible to serialize the writes, and
then propagate them in that order.
Several consistency anomalies can arise when a service uses this replication
method. To show this, let us assume a simple scenario where:
1. Servers do not fail
2. Write requests terminate when the write operation ﬁnished in the replica
that received the request from the client, and before being propagated to
15
MasterMasterMasterCHAPTER 2. BACKGROUND AND RELATED WORK
Figure 2.6: Multi-Master Replication, example with one client
other servers (asynchronous replication).
3. Writes originally received from clients by one replica, are guaranteed to
be received by all the other servers in the same order.
The example in Figure 2.6 shows a possible state of a social feed in the
diﬀerent servers after three posts from the same client in this case. Each post
was made to a diﬀerent server. After the execution of all operations: Master 1
has messages M3 and M1 and already propagated M1 to all servers; Master 2
has messages M2 and M1 and is propagating M2; Master 3 has all messages
and is propagating M3. Note that messages M1 and M2 appear in a diﬀerent
order in Master 1 and Master 2. In this example the following violations of
consistency models and consistency properties might happen:
Linearizability - If a client issues a read operation to a server, it will miss at
least one of the messages, the total order that is equivalent with the real-time
ordering of the operations is not guaranteed: in this case, the read operation
should return the three messages.
16
Master2M2M1Master1Master3M2M1M11.Post (M1)3.Post (M3)SynchronousAsynchronous2.Post (M2)M3M32.3. REPLICATION AND CONSISTENCY ANOMALIES
Session Guarantees - Consider that all write operations are made by client
c in the same session.
1. Read Your Writes - If client c issues a read operation to Master 1 or Master
2, it may miss one of the messages that were posted by c previously.
2. Monotonic Reads - If client c issues a read operation to Master 3 and
then to one of the other masters, the second read operation may miss one
message that was previously returned. This means that successive reads
in the same session do not always reﬂect a nondecreasing set of writes.
3. Monotonic Writes - This property is not guaranteed because in Master 1
message M2 is missing and in Master 3, M2 and M1 are in a order that
is not consistent with the order in which the client wrote those messages
(M1 before M2). This occurs because the posts were made in diﬀerent
servers and some messages were delayed. Note that we assumed that
writes are guaranteed to be received by all the servers in the order they
where issued in the origin master, but this is not enough, because the
order between messages posted across diﬀerent masters may diverge due
to propagation delays.
4. Writes Follow Reads - This property is not guaranteed, however we need
another example to explain why. Figure 2.7 shows a possible state of a
social feed in the diﬀerent servers after two posts from client c1 (opera-
tions 1 and 2) and a read that precedes a post from client c2 (operations 3
and 4 correspond to the read and the post, respectively). In this example,
the read executes at Master 2 and returns the two messages posted by c1.
We assume, in this case, that each client is in a diﬀerent session. After
the execution of all operations: Master 1 contains messages M3 and M1;
Master 2 has the messages posted by client c1 and is propagating M2;
Master 3 has the three messages and is propagating M3. In this case, the
Writes Follow Reads property is not guaranteed because M2 is missing
in Master 1, but M3 was issued after an observation of M2, which by this
property restricts all servers to only expose M3, if they also expose M2.
17
CHAPTER 2. BACKGROUND AND RELATED WORK
Figure 2.7: Multi-Master Replication, example with two clients
Causal - Since all session guarantees are not guaranteed, causal is not guar-
anteed, a system that provides this consistency model must enforce the four
session properties.
2.4 Consistency Studies
In this section, we present the most relevant related work about consistency
measurement studies and their main limitations.
Lu et al. [50] studied the consistency of TAO, Facebook’s graph store. The
study was performed by logging information inside the infrastructure of Face-
book, to build a graph (oﬄine) and detect consistency anomalies. They tar-
get linearizability, per-object sequential consistency and the read-after-write
anomalies. The methodology used in their work limits the number of services
to evaluate, because it needs to log information inside the service. Another
limitation is that it may not permit to study consistency as perceived by end
users, because some consistency anomalies may be introduced after logging
18
Master2M2M1Master1Master3M1M2M11. C1 -Post(M1)4. C2 -Post(M3)SynchronousAsynchronous2. C1 -Post(M2)M33. C2 -ReadM32.4. CONSISTENCY STUDIES
(e.g., a cache introduced at the interface layer).
Previous authors have conducted studies on the consistency of data storage
services. In particular, Wada et al. [68] have focused on testing the properties
of Read Your Writes, Monotonic Reads, and Monotonic Writes on several cloud
storage services, namely Amazon SimpleDB [7], Amazon S3 [9], Google App
Engine Datastore [41], Microsoft Azure Table [14], and Blob Storage. Their
study has focused on how the semantics diﬀer depending on the relative lo-
cation of readers and writers (same or diﬀerent threads, processes, virtual
machines, or geographical regions). To detect consistency anomalies, they per-
form read and write operations to a data element, in the data storage, and
then check for anomalies (e.g., if the client makes a write and in the next read
operation the eﬀect of that write is not observed, they detect a read-your-write
anomaly). Another relevant study in this context was conducted by Bermbach
et al. [19], focusing on the consistency guarantees of Amazon S3 under a heavy
load of concurrent writes. These previous studies focus on understanding the
consistency properties oﬀered by the storage layer, instead of the consistency
provided by the services above this layer. These studies are also using a simple
read/write interface to access a data element, but usually services API have
support to other operations and to other data structures.
At an even lower layer, Xu et al. [69] conducted a measurement study of
response times of virtual machines launched at Amazon EC2. This represents
a layer that is even further apart from the one we intent to study. Furthermore,
that study focuses only on performance and not on consistency.
Other works have proposed analytic models to determine the consistency
properties implemented by distributed key-value stores, based on measure-
ments taken from inside the system. Anderson et al. [10] infer the consistency
properties oﬀered by key-value stores through the construction of graphs that
capture the operations and their return values, to detect violations of the con-
sistency levels deﬁned by Lamport [48]. Zellag et al. [73] follow a similar
approach, building a graph capturing the operations over a system. This graph
is enriched with dependencies among object versions for detecting particular
consistency anomalies. These studies are focused on key-value stores, and not
19
CHAPTER 2. BACKGROUND AND RELATED WORK
in Internet services, which have diﬀerent interfaces and access restrictions.
Prior work deﬁned a continuous degree of consistency. Bailis et al. [15]
model the consistency of weak quorums as a probabilistic bound on staleness,
they explain why partial quorums are usually adopted by services and evaluate
the staleness of data and the latency. Yu and Vahdat [71] argue that some
services can work using weak consistency, but can beneﬁt if the inconsistent
interval is bounded. In their proposal they limit the divergence to the ﬁnal