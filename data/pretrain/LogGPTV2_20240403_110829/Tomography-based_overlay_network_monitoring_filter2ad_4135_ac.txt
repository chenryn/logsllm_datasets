k consist of k rows of G
and b, respectively. Linearly independent sets of rows and
columns in rank-deﬁcient problems are usually computed
using rank-revealing decompositions [14]. For a dense r by
s matrix with rank k, common rank-revealing decomposi-
tions include Gaussian elimination with complete pivoting
(as used in [25]), QR with column pivoting, and the singu-
lar value decomposition (SVD). The former two cost O(rks),
and the SVD costs O(rs2). Our G matrix is very sparse; that
is, there are only a few nonzeros per row. Rank-revealing
decompositions for many sparse problems can be computed
much more quickly than in the dense case. However, the ex-
act cost depends strongly on the structure of the problem,
and eﬃcient computation rank-revealing decompositions of
sparse matrices is an open area of research [17], [21].
We select rows using Algorithm 1, which is a variant of
the QR procedure [14, p.223]. The procedure incrementally
builds a decomposition
¯GT
= QR
(8)
where Q ∈ R
s×k is a matrix with orthonormal columns and
R ∈ R
k×k is upper triangular. We do not store Q explicitly;
instead, we write Q as R−1 ¯GT . The idea is the same as the
classical Gram-Schmidt algorithm: as each row is inspected,
we subtract oﬀ any components in the space spanned by the
previous rows, so that the remainder is orthogonal to all
previous rows. If the remainder is zero, then the row was
linearly dependent upon the previous rows; otherwise, we
extend the factorization.
In practice, we use a variant of Algorithm 1 which uses op-
timized routines from the LAPACK library [4] and inspects
several rows at a time. The time complexity of processing
each vector is dominated by the solution of a triangular sys-
tem to compute ˆR12, which costs O(k2). The total cost of
the algorithm is O(rk2) and the constant in the bound is
procedure SelectPath(G)
1 for every row v in G do
ˆR12 := R−T ¯GvT = QT vT
2
ˆR22 := (cid:11)v(cid:11)2 − (cid:11) ˆR12(cid:11)2
3
if ˆR22 (cid:12)= 0 then
Mark v as a measurement path
4
5
6
7
¯G := (cid:20) ¯G
v(cid:21)
R := (cid:20)R ˆR12
ˆR22(cid:21)
0
end
end
Algorithm 1: Path (row) selection algorithm
modest: on a Pentium 4 running at 1.5 GHz, our code takes
just over ten minutes to process a problem with n = 350
(r = 61075) and k = 2958. The memory cost is roughly
k2/2 single-precision ﬂoating point numbers for storing the
R factor.
When k exceeds 10000 the O(k2) memory requirement be-
comes too onerous. We note that dense factorization meth-
ods may still be feasible if the number of overlay end-hosts
is small or if we relax our original problem statement.
4.2 Path Loss Calculations
The QR decomposition which we use to select measure-
ment paths is also used to compute a solution to the un-
derdetermined system (7). To choose a unique solution
xG to ¯GxG = ¯b, we impose the additional constraint that
xG = ¯GT y. We can then compute
y
:= R−1R−T ¯b
xG := ¯GT y.
This is a standard method for ﬁnding the minimum norm
solution to an underdetermined system (see [14], [11]). The
dominant cost in the computation is the solution of two
triangular linear systems for y, which costs O(k2). Once we
have computed xG, we can compute b := GxG, and from
there infer the loss rates of the remaining paths.
4.3 Topology Measurement Error Tolerance
Our technique is tolerant to network topology measure-
ment errors because our goal is to estimate the end-to-end
path loss rate instead of any interior link loss rate. For
example, poor alias resolution of routers may present one
physical link as several links. At worst, our failure to rec-
ognize the links as the same will result in a few more path
measurements because the rank of G is higher. But we can
still get accurate path loss rate estimation as veriﬁed by
Internet experiments in [7].
4.4 Topology Changes
During normal operation, new links may appear or dis-
appear, routing paths between end hosts may change, and
hosts may enter or exit the overlay network. These changes
may cause rows or columns to be added to or removed from
G, or entries in G may change. We designed a set of eﬃcient
algorithms to add/remove end hosts and to handle routing
changes. We incrementally add/remove paths from G and
¯G, and each path change takes at most O(k2) time (see [7]).
4.5 Robustness and Real-time Response
There are some scenarios such that the overlay monitoring
system can fail to provide real-time loss rate estimation for
some paths. This can happen when a routing change is just
detected, or the measurement node(s) crash, or some node(s)
just join or leave the overlay network. Before we incremen-
tally set up new measurement path(s) and collect results,
for a short period, there are some paths for which we can
not compute loss rates. However, we can still return bounds
on the computed loss rate (see Sec. 5). For example, we can
check whether all the links on the incomputable path are
covered by ¯G, and if so, yield an upper bound (though pos-
sibly a pessimistic one) quickly. Furthermore, such bounds
may be already suﬃcient for some applications.
5. DISCUSSION
In this section, we generalize our framework to infer the
path loss rate bound when we have only restricted measure-
ments.
We note that, in addition to the equations (4), the un-
known xj must satisfy the inequalities xj ≤ 0. While we do
not make use of them in our current work, these inequalities
can be used in conjunction with (4) to bound failure proba-
bilities, both from below and from above. For example, the
loss probability lj is bounded above by the loss probability
of the least lossy path that includes link j. More generally,
we have the following theorem:
Theorem 2. Let v ∈ {0, 1}s represent a network path
with loss probability p, and let w = GT c for some c ∈ R
(i.e. w ∈ R(GT )). Then
r
1. If v ≤ w elementwise, then log(1 − p) ≥ cT b
2. If v ≥ w elementwise, then log(1 − p) ≤ cT b
Proof. In the ﬁrst case, v ≤ w so that v − w ≤ 0 el-
ementwise. Since x ≤ 0 elementwise, (v − w)T x ≥ 0, or
vT x ≥ wT x. We know log(1 − p) = vT x from (3), and
wT x = cT Gx = cT b. By substitution, we have log(1 − p) ≥
cT b. The second case is nearly identical.
In principle, we can compute good upper and lower bounds
on path loss rates by solving two linear programming prob-
lems:
1. Maximize cT
2. Minimize cT
u b subject to GT cu ≥ v,
l b subject to GT cl ≤ v.
l b) ≤ p ≤ 1−exp(cT
Then 1−exp(cT
u b). When v ∈ R(GT ), we
have v = GT cu = GT cl, and the bound is tight. While this
approach seems to oﬀer bounds on path loss probabilities
that are possibly optimal given the measured data, we have
not yet applied the technique in practice.
6. CONCLUSIONS
In this paper, we present a tomography-based overlay net-
work monitoring system. For an overlay of n end hosts,
the space of O(n2) paths can be characterized by a basis of
O(n log n) paths. We selectively monitor these basis paths,
then use the measurements to infer the loss rates of all other
paths. Both simulation and real implementation on the In-
ternet show that our techniques achieve accurate loss rate
estimation.
For more eﬃcient monitored path selection, we plan to in-
vestigate the use of iterative methods [5], [17] such as CGNE
or GMRES both to select rows and to compute loss rate vec-
tors. In our preliminary experiments, the path matrix G has
been well-conditioned, which suggests that iterative meth-
ods may converge quickly. We are also applying the inequal-
ity bounds in Sec. 5 for diagnostics, to detect which links or
path segments fail when end-to-end congestion occurs.
7. REFERENCES
[1] Adams, A., et al. The use of end-to-end multicast
measurements for characterizing internal network
behavior. In IEEE Communications (May, 2000).
[2] Adler, M., et al. Tree layout for internal network
characterizations in multicast networks. In 3rd
International Workshop on Networked Group
Communication (NGC) (2001).
[3] Andersen, D. G., Balakrishnan, H., Kaashoek,
M. F., and Morris, R. Resilient overlay networks. In
Proc. of ACM SOSP (2001).
[4] Anderson, E., et al. LAPACK Users’ Guide,
third ed. Society for Industrial and Applied
Mathematics, Philadelphia, PA, 1999.
[5] Barrett, R., et al. Templates for the Solution of
Linear Systems: Building Blocks for Iterative Methods,
2nd Edition. SIAM, Philadelphia, PA, 1994.
[6] Bu, T., Duffield, N., Presti, F., and Towsley,
D. Network tomography on general topologies. In
ACM SIGMETRICS (2002).
[7] Chen, Y., Bindel, D., Song, H., and Katz, R. H.
Tomography-based overlay network monitoring. Tech.
Rep. UCB//CSD-03-1252, University of California,
Berkeley, 2003.
[8] Chen, Y., Lim, K., Overton, C., and Katz, R. H.
On the stability of network distance estimation. In
ACM SIGMETRICS Performance Evaluation Review
(PER) (Sep. 2002).
[9] Coates, M., Castro, R., and Nowak, R.
Maximum likelihood identiﬁcation of network
topology from edge-based unicast measurements. In
ACM SIGMETRICS (2002).
[10] Coates, M., Hero, A., Nowak, R., and Yu, B.
Internet Tomography. IEEE Signal Processing
Magazine 19, 3 (2002), 47–65.
[11] Demmel, J. Applied Numerical Linear Algebra.
SIAM, 1997.
[12] Faloutsos, M., Faloutsos, P., and Faloutsos, C.
On power-law relationship of the Internet topology. In
ACM SIGCOMM (1999).
[13] Francis, P., et al. IDMaps: A global Internet host
distance estimation service. IEEE/ACM Trans. on
Networking (Oct. 2001).
[14] Golub, G., and Loan, C. V. Matrix Computations.
The Johns Hopkins University Press, 1989.
[15] Govindan, R., and Tangmunarunkit, H.
Heuristics for Internet map discovery. In IEEE
INFOCOM (2000).
[16] Labovitz, C., Ahuja, A., Abose, A., and
Jahanian, F. An experimental study of delayed
Internet routing convergence. In Proc. of ACM
SIGCOMM (2000).
[17] Meyer, C., and Pierce, D. Steps toward an
iterative rank-revealing method. Tech. Rep.
ISSTECH-95-013, Boeing Information and Support
Services, 1995.
[18] Ng, T. S. E., and Zhang, H. Predicting Internet
network distance with coordinates-based approaches.
In Proc.of IEEE INFOCOM (2002).
[19] Ozmutlu, H. C., Gautam, N., and Barton, R.
Managing end-to-end network performance via
optimized monitoring strategies. Journal of Network
and System Management, Special Issue on
Management of Converged Networks 10, 1 (2002).
[20] Padmanabhan, V., Qiu, L., and Wang, H.
Server-based inference of Internet performance. In
IEEE INFOCOM (2003).
[21] Pierce, D., and Lewis, J. Sparse multifrontal rank
revealing QR factorization. SIAM Journal on Matrix
Analysis and Applications 18, 1 (January 1997).
[22] PlanetLab. http://www.planet-lab.org/.
[23] Ratnasamy, S., et al. Topologically-aware overlay
construction and server selection. In Proc. of IEEE
INFOCOM (2002).
[24] Rubenstein, D., Kurose, J. F., and Towsley,
D. F. Detecting shared congestion of ﬂows via
end-to-end measurement. IEEE/ACM Transactions
on Networking 10, 3 (2002).
[25] Shavitt, Y., Sun, X., Wool, A., and Yener, B.
Computing the unmeasured: An algebraic approach to
Internet mapping. In IEEE INFOCOM (2001).
[26] Tangmunarunkit, H., et al. Network topology
generators: Degree-based vs structural. In ACM
SIGCOMM (2002).
[27] Zhang, Y., et al. On the constancy of Internet path
properties. In Proc. of SIGCOMM Internet
Measurement Workshop (2001).
APPENDIX
Proof for Theorem 1
Proof. Given that the power-law distribution topology
has out-degree exponent: the frequency fd of an outdegree d
is proportional to the outdegree to the power of a constant,
i.e., fd = N dc, where N is the proportion constant. Assume
that end hosts have degree 1, then the number of end hosts
is N .
If c < −1, then
M = N
M−1
Xd=1
dc
M−1
xc dx(cid:19)
xc dx(cid:19)
∞
1
≤ N (cid:18)1 +Z
≤ N (cid:18)1 +Z
= N (cid:18)1 − 1
1
1 + c(cid:19)
= N
c
1 + c
(9)
(10)
(11)
(12)
(13)
Therefore, the fraction N
then N
M
≥ 1
2 .
M is at least 1+c
c = 1 + 1
c . If c ≤ −2