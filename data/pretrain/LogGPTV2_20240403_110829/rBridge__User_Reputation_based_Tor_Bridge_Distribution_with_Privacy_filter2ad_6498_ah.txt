, ~A(2)
b =
b. Then, U constructs
′
~τb = Tcur and ~ϕb = 0, picks ~s
b
′
~Cb = g~s
1 gx
2 g
b
R←− Z
~r(1)
, ~r(2)
b
bg ~r(1)
b = ~r(1)
, ~δ(1)
~Ao
the following proof:
~Bb
3 g ~τb
4 g
∗
b = g ~r(1)
p, and computes ~A(1)
b = ~r(2)
b ~eo
~ϕb
5 . To prove possession of ~σo
g ~r(2)
b, ~δ(2)
b ~eo
1
2
2
b
b
b
b
b
b
3
,
∧
∧
~ϕb
5
b, ~so
2 g ~(cid:8)
, ~r(2)
(2)
~δ
b
2
(1)
~r
b
1
π4 = NIPK
′
b, ~r(1)
b, ~s
′
(cid:8), ~Bb, ~τb, ~ϕb, ~eo
(x, ~(cid:8), ~s
, ~δ(2)
~δ(1)
b ) :
′
b
~C(cid:8) = g ~s
1 gx
(cid:8)
~τb = Tcur ∧ ~ϕb = 0∧
′
~Bb
~Cb = g ~s
3 g ~τb
1 gx
4 g
2 g
b
∧
(2)
~r
~A(1)
g
b = g
b
2
(1)
~δ
( ~A(1)
b )~eb = g
g
b
1
(2)
^e( ~A
b ,pk)
^e(g0,h) = ^e( ~A(2)
^e(g2, h)~δ
∥ ~Cb∥π4 to D.
R←− Z
′′
′′
D veriﬁes π4, picks ~e(cid:8), ~s
(cid:8), ~eb, ~s
b
′′
′′
~A(cid:8) = (g0g~s
~e(cid:8)+sk , ~Ab = (g0g~s
~C(cid:8))
~Cb)
(cid:8)
b
(cid:8))∥( ~Ab, ~eb, ~s
′′
′′
1
1
sends ( ~A(cid:8), ~e(cid:8), ~s
b ) to U.
′′
′
′′
′
b , sets ~σ(cid:8) =
(cid:8), ~sb = ~s
U computes ~s(cid:8) = ~s
b + ~s
(cid:8) + ~s
( ~A(cid:8), ~e(cid:8), ~s(cid:8)), ~σb = ( ~Ab, ~eb, ~sb), and updates his credential
′
′
(cid:8), ~σ(cid:8), ~ϕb, ~Cb, ~s
with ~(cid:8), ~C(cid:8), ~s
b, and ~σb.
∗
p, and computes
~eb+sk . Then D
, h)
b ^e(g1, h)~so
and sends ~A(1)
b ^e(g3, h) ~Bb
∥ ~A(2)
b ^e(g2, h)~r
−~eo
(1)
b
(1)
b
b
b
1
1
B.4
Inviting New Users
A user U who requests an invitation ticket needs to prove
that his credit balance is higher than the threshold, i.e., (cid:8) >
(cid:8)θ, and the last time he applied for an invitation ticket is at
least ωθ days ago, i.e., Tcur − ω ≥ ωθ. In addition, U needs
to prove possession of the signatures σ(cid:8) and σω. Hence, U
constructs the following proof:
π5 = NIPK
(cid:8) , δ(2)
(cid:8) , ω,
′
′
ω , ~ω, ~s
ω, ~s
(cid:8)) :
(1)
(cid:8) ^e(g1, h)s(cid:8) ^e(g2, h)x^e(g3, h)(cid:8)∧
′
(cid:8), r(1)
r
1
∧
(1)
(cid:8)
(2)
(cid:8)
(2)
(cid:8)
(cid:8) , r(2)
ω , δ(1)
(cid:8) , δ(1)
ω , δ(2)
∧
−e(cid:8) ^e(g2, y)r
(x, (cid:8), C(cid:8), e(cid:8), s(cid:8), s
′
ω, r(1)
ω , r(2)
Cω, eω, sω, s
′
3 ∧
C(cid:8) = gs
2 g(cid:8)
1 gx
(cid:8)
r
A(1)
(cid:8) = g
g
2
(1)
δ
δ
(A(1)
(cid:8) )e(cid:8) = g
g
(cid:8)
1
2
(2)
^e(A
(cid:8) ,pk)
^e(g0,h) = ^e(A(2)
(cid:8) , h)
^e(g2, h)δ
κ(cid:8) = zs(cid:8)∧
′
3 ∧
Cω = gs
2 gω
1 gx
!
∧
A(1)
ω = gr
gr
2
1
∧
(1)
(A(1)
gδ
ω )e! = gδ
!
2
1
−e! ^e(g2, y)r
(2)
^e(g0,h) = ^e(A(2)
! ,pk)
^e(A
ω , h)
^e(g2, h)δ
κω = zs!∧
(cid:8) > (cid:8)θ∧
Tcur − ω > ωθ∧
~ω = Tcur∧
′
3 ∧
~Cω = g ~s
2 g ~ω
1 gx
!
′
~C(cid:8) = g ~s
2 g(cid:8)
1 gx
(cid:8)
3
(2)
!
(1)
!
(2)
!
(1)
(cid:8)
(1)
!
(1)
! ^e(g1, h)s! ^e(g2, h)x^e(g3, h)ω∧
1
1
(cid:8)
(cid:8)
∥A(1)
∥A(2)
ω ∥A(2)
′′
~A(cid:8) = (g0g~s
(cid:8)
1
and sends kappa(cid:8)∥κω∥A(1)
to D.
ω ∥ ~C(cid:8)∥ ~Cω∥π5
R←−
′′
′′
After verifying π5, κ(cid:8) and κω, D picks ~e(cid:8), ~s
(cid:8), ~eω, ~s
ω
∗
~C(cid:8))
~Aω =
~e(cid:8)+sk ,
computes
p,
Z
(cid:8))∥( ~Aω, ~eω, ~s
′′
′′
′′
(g0g~s
~Cω)
~e! +sk , and sends ( ~A(cid:8), ~e(cid:8), ~s
ω) to
!
1
U. . Then, D ﬂips a biased coin to decide whether to give an
invitation ticket to U; if so, D generates an one-time ticket
tk = {r
∗
p, and sends it
to U.
)}, where r
, HMACscrtD (r
∗ R←− Z
∗
∗
Regardless of receiving an invitation ticket, U com-
′
′′
′
′′
putes ~s(cid:8) = ~s
(cid:8), ~sω = ~s
ω, sets ~σ(cid:8) =
ω + ~s
(cid:8) + ~s
( ~A(cid:8), ~e(cid:8), ~s(cid:8)), ~σω = ( ~Aω, ~eω, ~sω), and updates his creden-
′
′
(cid:8), ~σ(cid:8), ~ϕω, ~Cω, ~s
tial with ~C(cid:8), ~s
ω, and ~σω.