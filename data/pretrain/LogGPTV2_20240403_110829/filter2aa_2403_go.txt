          LDRB      r2,[r0,#0] 
          CMP        r2,#0 
          MOVNE     r3,r0 
          MOVNE     r2,r1 
          MOVEQ     r0,#0 
          BNE       |L0.20| 
          POP       {r4,pc} 
100.2.4  Optimizing Keil（Thumb mode） 
          PUSH     {r4,r5,lr} 
          LDRB     r2,[r1,#0] 
          CMP      r2,#0 
          BEQ      |L0.54| 
          B         |L0.46| 
|L0.10| 
          MOVS     r3,r0 
          MOVS     r2,r1 
          B         |L0.20| 
|L0.16| 
          ADDS     r3,r3,#1 
          ADDS     r2,r2,#1 
|L0.20| 
          LDRB     r4,[r3,#0] 
          CMP      r4,#0 
          BEQ      |L0.38| 
          LDRB     r5,[r2,#0] 
          CMP      r5,#0 
          BEQ      |L0.54| 
          CMP      r4,r5 
          BEQ      |L0.16| 
          B         |L0.44| 
|L0.38| 
          LDRB     r2,[r2,#0] 
          CMP      r2,#0 
          BEQ      |L0.54| 
|L0.44| 
          ADDS     r0,r0,#1 
|L0.46| 
          LDRB     r2,[r0,#0] 
          CMP      r2,#0 
          BNE      |L0.10| 
          MOVS     r0,#0 
|L0.54| 
          POP      {r4,r5,pc} 
100.2.5  Optimizing GCC 4.9.1（ARM64） 
指令清单 100.1  Optimizing GCC 4.9.1（ARM64） 
func: 
          ldrb    w6, [x1] 
          mov     x2, x0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
881 
          cbz     w6, .L2 
          ldrb    w2, [x0] 
          cbz     w2, .L24 
.L17: 
          ldrb    w2, [x0] 
          cbz     w2, .L5 
          cmp     w6, w2 
          mov     x5, x0 
          mov     x2, x1 
          beq     .L18 
          b        .L5 
.L4: 
          ldrb    w4, [x2] 
          cmp     w3, w4 
          cbz     w4, .L8 
          bne     .L8 
.L18: 
          ldrb    w3, [x5,1]! 
          add     x2, x2, 1 
          cbnz    w3, .L4 
.L8: 
          ldrb    w2, [x2] 
          cbz     w2, .L27 
.L5: 
          ldrb    w2, [x0,1]! 
          cbnz    w2, .L17 
.L24: 
          mov     x2, 0 
.L2: 
          mov     x0, x2 
          ret 
.L27: 
          mov     x2, x0 
          mov     x0, x2 
          ret 
100.2.6  Optimizing GCC 4.4.5（MIPS） 
指令清单 100.2  Optimizing GCC 4.4.5（MIPS）（IDA） 
f: 
                    lb        $v1, 0($a1) 
                    or        $at, $zero 
                    bnez     $v1, loc_18 
                    move     $v0, $a0 
locret_10:                                       # CODE XREF: f+50 
                                                   # f+78 
                    jr        $ra 
                    or        $at, $zero 
loc_18:                                           # CODE XREF: f+8 
                    lb        $a0, 0($a0) 
                    or        $at, $zero 
                    beqz     $a0, locret_94 
                    move     $a2, $v0 
loc_28:                                           # CODE XREF: f+8C 
                    lb        $a0, 0($a2) 
                    or        $at, $zero 
                    beqz     $a0, loc_80 
                    or        $at, $zero 
                    bne       $v1, $a0, loc_80 
                    move     $a3, $a1 
                    b         loc_60 
                    addiu    $a2, 1 
loc_48:                                           # CODE XREF: f+68 
                    lb        $t1, 0($a3) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
882 
逆向工程权威指南（下册） 
                    or        $at, $zero 
                    beqz     $t1, locret_10 
                    or        $at, $zero 
                    bne       $t0, $t1, loc_80 
                    addiu    $a2, 1 
loc_60:                                           # CODE XREF: f+40 
                    lb        $t0, 0($a2) 
                    or        $at, $zero 
                    bnez     $t0, loc_48 
                    addiu    $a3, 1 
                    lb        $a0, 0($a3) 
                    or        $at, $zero 
                    beqz     $a0, locret_10 
                    or        $at, $zero 
loc_80:                                           # CODE XREF: f+30 
                                                   # f+38 ... 
                    addiu    $v0, 1 
                    lb        $a0, 0($v0) 
                    or        $at, $zero 
                    bnez     $a0, loc_28 
                    move     $a2, $v0 
locret_94:                                           # CODE XREF: f+20 
                    jr        $ra 
                    move     $v0, $zero 
100.3  练习题 2.6 
100.3.1  Optimizing MSVC 2010 
PUBLIC     _f 
; Function compile flags: /Ogtpy 
_TEXT     SEGMENT 
_k0$ = -12    
       ;size = 4 
_k3$ = -8     
       ;size = 4 
_k2$ = -4     
       ;size = 4 
_v$ = 8       
       ;size = 4 
_k1$ = 12    
       ;size = 4 
_k$ = 12     
       ;size = 4 
_f     PROC 
     sub     esp, 12     ; 0000000cH 
     mov     ecx, DWORD PTR _v$[esp+8] 
     mov     eax, DWORD PTR [ecx] 
     mov     ecx, DWORD PTR [ecx+4] 
     push    ebx 
     push    esi 
     mov     esi, DWORD PTR _k$[esp+16] 
     push    edi 
     mov     edi, DWORD PTR [esi] 
     mov     DWORD PTR _k0$[esp+24], edi 
     mov     edi, DWORD PTR [esi+4] 
     mov     DWORD PTR _k1$[esp+20], edi 
     mov     edi, DWORD PTR [esi+8] 
     mov     esi, DWORD PTR [esi+12] 
     xor     edx, edx 
     mov     DWORD PTR _k2$[esp+24], edi 
     mov     DWORD PTR _k3$[esp+24], esi 
     lea     edi, DWORD PTR [edx+32] 
$LL8@f: 
     mov     esi, ecx 
     shr     esi, 5 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
883 
     add     esi, DWORD PTR _k1$[esp+20] 
     mov     ebx, ecx 
     shl     ebx, 4 
     add     ebx, DWORD PTR _k0$[esp+24] 
     sub     edx, 1640531527   ; 61c88647H 
     xor     esi, ebx 
     lea     ebx, DWORD PTR [edx+ecx] 
     xor     esi, ebx 
     add     eax, esi 
     mov     esi, eax 
     shr     esi, 5 
     add     esi, DWORD PTR _k3$[esp+24] 
     mov     ebx, eax 
     shl     ebx, 4 
     add     ebx, DWORD PTR _k2$[esp+24] 
     xor     esi, ebx 
     lea     ebx, DWORD PTR [edx+eax] 
     xor     esi, ebx 
     add     ecx, esi 
     dec     edi 
     jne     SHORT $LL8@f 
     mov     edx, DWORD PTR _v$[esp+20] 
     pop     edi 
     pop     esi 
     mov     DWORD PTR [edx], eax 
     mov     DWORD PTR [edx+4], ecx 
     pop     ebx 
     add     esp, 12              ; 0000000cH 
     ret     0 
_f     ENDP 
100.3.2  Optimizing Keil（ARM mode） 
          PUSH     {r4-r10,lr} 
          ADD      r5,r1,#8 
          LDM      r5,{r5,r7} 
          LDR      r2,[r0,#4] 
          LDR      r3,[r0,#0] 
          LDR      r4,|L0.116| 
          LDR      r6,[r1,#4] 
          LDR      r8,[r1,#0] 
          MOV      r12,#0 
          MOV      r1,r12 
|L0.40| 
          ADD      r12,r12,r4 
          ADD      r9,r8,r2,LSL #4 
          ADD      r10,r2,r12 
          EOR      r9,r9,r10 
          ADD      r10,r6,r2,LSR #5 
          EOR      r9,r9,r10 
          ADD      r3,r3,r9 
          ADD      r9,r5,r3,LSL #4 
          ADD      r10,r3,r12 
          EOR      r9,r9,r10 
          ADD      r10,r7,r3,LSR #5 
          EOR      r9,r9,r10 
          ADD      r1,r1,#1 
          CMP      r1,#0x20 
          ADD      r2,r2,r9 
          STRCS    r2,[r0,#4] 
          STRCS    r3,[r0,#0] 
          BCC      |L0.40| 
          POP      {r4-r10,pc} 
|L0.116| 
          DCD      0x9e3779b9 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
884 
逆向工程权威指南（下册） 
100.3.3  Optimizing Keil（Thumb mode） 
          PUSH     {r1-r7,lr} 
          LDR      r5,|L0.84| 
          LDR      r3,[r0,#0] 
          LDR      r2,[r0,#4] 
          STR      r5,[sp,#8] 
          MOVS     r6,r1 
          LDM      r6,{r6,r7} 
          LDR      r5,[r1,#8] 
          STR      r6,[sp,#4] 
          LDR      r6,[r1,#0xc] 
          MOVS     r4,#0 
          MOVS     r1,r4 
          MOV      lr,r5 
          MOV      r12,r6 
          STR      r7,[sp,#0] 
|L0.30| 
          LDR      r5,[sp,#8] 
          LSLS     r6,r2,#4 
          ADDS     r4,r4,r5 
          LDR      r5,[sp,#4] 
          LSRS     r7,r2,#5 
          ADDS     r5,r6,r5 
          ADDS     r6,r2,r4 
          EORS     r5,r5,r6 
          LDR      r6,[sp,#0] 
          ADDS     r1,r1,#1 
          ADDS     r6,r7,r6 
          EORS     r5,r5,r6 
          ADDS     r3,r5,r3 
          LSLS     r5,r3,#4 
          ADDS     r6,r3,r4 
          ADD      r5,r5,lr 
          EORS     r5,r5,r6 
          LSRS     r6,r3,#5 
          ADD      r6,r6,r12 
          EORS     r5,r5,r6 
          ADDS     r2,r5,r2 
          CMP      r1,#0x20 
          BCC      |L0.30| 
          STR      r3,[r0,#0] 
          STR      r2,[r0,#4] 
          POP      {r1-r7,pc} 
|L0.84| 
          DCD      0x9e3779b9 
100.3.4  Optimizing GCC 4.9.1（ARM64） 
指令清单 100.3  Optimizing GCC 4.9.1（ARM64） 
f: 
          ldr      w3, [x0] 
          mov      w4, 0 
          ldr      w2, [x0,4] 
          ldr      w10, [x1] 
          ldr      w9, [x1,4] 
          ldr      w8, [x1,8] 
          ldr      w7, [x1,12] 
.L2: 
          mov      w5, 31161 
          add      w6, w10, w2, lsl 4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
885 
          movk     w5, 0x9e37, lsl 16 
          add      w1, w9, w2, lsr 5 
          add      w4, w4, w5 
          eor      w1, w6, w1 
          add      w5, w2, w4 
          mov      w6, 14112 
          eor      w1, w1, w5 
          movk     w6, 0xc6ef, lsl 16 
          add      w3, w3, w1 
          cmp      w4, w6 