----
| Operator  | Description                             |
|-----------|-----------------------------------------|
| `k += l`  | Add a value and assign, then k=9        |
| `k -= l`  | Substrate a value and assign, then k=18 |
| `k /= l`  | Divide a value and assign, then k=9     |
| `k *= l`  | Multiply a value and assign, then k=81  |
| `k |= l`  | Bitwise OR and assign, then k=89        |
Rust Flow Control
--------------
### If Expression
```rust
let case1: i32 = 81;
let case2: i32 = 82;
if case1 = case4 {
  println!("case3 is better than case4");
} else {
  println!("case4 is greater than case3");
}
```
### If...Else...if...Else Expression
```rust
let foo = 12;
let bar = 13;
if foo == bar {
  println!("foo is equal to bar");
} else if foo  {
      println!("Its Monday my dudes");
    },
    2 => {
      println!("It's Tuesday my dudes");
    },
    3 => {
      println!("It's Wednesday my dudes");
    },
    4 => {
      println!("It's Thursday my dudes");
    },
    5 => {
      println!("It's Friday my dudes");
    },
    6 => {
      println!("It's Saturday my dudes");
    },
    7 => {
      println!("It's Sunday my dudes");
    },
    _ => {
      println!("Default!")
    }
  };
}
```    
### Nested...If Expression
```rust
let nested_conditions = 89;
if nested_conditions == 89 {
    let just_a_value = 98;
    if just_a_value >= 97 {
        println!("Greater than 97");
    }
}
```    
### For Loop
```rust
for mut i in 0..15 {
  i-=1;
  println!("The value of i is : {i}");
}
```
### While Loop
```rust
let mut check =  0;
while check  100 {
    break;
  }
  i *= 2;
}
```    
### Continue Statement
```rust
for (v, c) in (0..10+1).enumerate(){
  println!("The {c} number loop");
  if v == 9{
    println!("Here we go continue?");
    continue;
  }
  println!{"The value of v is : {v}"};
}
```
Rust Functions
--------------
### Basic function
```rust
fn print_message(){
  println!("Hello, QuickRef.ME!");
}
fn main(){
  //Invoking a function in Rust.
  print_message();
}
```
### Pass by Value
```rust
fn main()
{
  let x:u32 = 10;
  let y:u32 = 20;
  // => 200
  println!("Calc: {}", cal_rect(x, y));
}
fn cal_rect(x:u32, y:u32) -> u32
{
  x * y
}
```
### Pass by Reference
```rust
fn main(){
  let mut by_ref = 3;      // => 3
  power_of_three(&mut by_ref);
  println!("{by_ref}");  // => 9
}
fn power_of_three(by_ref: &mut i32){
  // de-referencing is important
  *by_ref = *by_ref * *by_ref;
  println!("{by_ref}");  // => 9
}
```
### Returns 
```rust {.wrap}
fn main(){
  let (mut radius, mut pi) = (3.0, 3.14);
  let(area, _perimeter) = calculate (
      &mut radius,
      &mut pi
  );
  println!("The area and the perimeter of the circle are: {area} & {_perimeter}");
}
fn calculate(radius : &mut f64, pi: &mut f64) -> (f64, f64){
  let perimeter = 2.0 * *pi * *radius;
  let area = *pi * *radius * *radius;
  return (area, perimeter);
}
```
### Arrays as Arguments
```rust
fn main(){
  let mut array: [i32 ; 5] = [1,2,3,4,6];
  print_arrays(array);
  println!("The elements: {array:?}");
}
fn print_arrays(mut array:[i32; 5]) {
  array[0] = 89;
  array[1] = 90;
  array[2] = 91;
  array[3] = 92;
  array[4] = 93;
  println!("The elements: {array:?}");
}
```
### Returning Arrays
```rust
fn main(){
  let mut arr:[i32; 5] = [2,4,6,8,10];
  multiply(arr);
  println!("The array is : {:?}", multiply(arr));
}
fn multiply (mut arr: [i32 ; 5]) -> [i32 ; 5]{
  arr[2] = 90;
  for mut i in 0..5 {
      arr[i] = arr[i] * arr[2];
  }
  return arr;
}
```
Misc
--------------
### Type Casting
```rust
let a_int = 90; // int
// int to float
let mut type_cast = (a_int as f64);
```
------
```rust
let orginal: char = 'I';
// char to int => 73
let type_casted: i64 = orginal as i64;
```
To perform type-casting in Rust one must use the `as` keyword.
### Borrowing
```rust
let mut foo = 4;
let mut borrowed_foo = &foo;
println!("{borrowed_foo}");
```
------
```rust
let mut bar = 3;
let mut mutable_borrowed_bar = &mut bar;
println!("{mutable_borrowed_bar}");
```
Here borrowed value borrows the value from value one using `&` operator.
### De-referencing
```rust
let mut borrow = 10;
let deref = &mut borrow;
println!("{}", *deref);
```
De-referencing in rust can be done using the `*` operator
### Variable Scope
```rust
{
  // The scope limited to this braces
  let a_number = 1;
}
println!("{a_number}");
```
This will produce error as the scope of the variable `a_number` ends at the braces
Also see
--------
- [The Rust Document](https://doc.rust-lang.org/book/ch00-00-introduction.html) _(doc.rust-lang.org)_
- [The Rust Reference](https://doc.rust-lang.org/reference/introduction.html) _(doc.rust-lang.org)_
- [Rust Cheatsheet](https://phaiax.github.io/rust-cheatsheet/) _(phaiax.github.io)_