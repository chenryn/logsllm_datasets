### Tailored Diagram and Aggregated Information of a Linear Regression

A tailored diagram and the aggregated information from a linear regression are provided. For regular behavior, we assume that the slope of the regression is close to zero and that the frequency with which the variable is modified shows little variation. For each variable, we report the actions that perform changes to its values and the manner in which these changes occur. We also check whether a variable is rarely or frequently changed and if, after an initial period of changes, those changes cease and the variable remains constant for the rest of the trace. The latter can indicate a deadlocking situation, especially if the actions that made changes to that variable also cease.

### Actions

For each action, we aim to provide feedback on the states that enable this action and the observed state transformations. This feedback helps modelers recognize faulty action specifications. The first issue is to identify actions that are declared in the prefix but never occur in the trace, which may indicate dead model components or suggest that the trace is too short to fully represent the dynamic behavior of the model. For actions that do appear in the trace, we are interested in characterizing the states where they can occur (enabling conditions) and the changes they cause to state variables (state transformation function).

We attempt to fit the transformation that an action \(a\) performs on a numerical variable with current value \(v\) and resulting value \(v'\) as a linear function \(v' = b \cdot v + c\). Linear transformations are common in encodings of automata, particularly in Petri nets. If a linear function does not fit, we consider the function as dependent on the current state \(s\), such that \(v' = v + \delta(v, a, s)\), which works for all deterministic state transformations. In such cases, we report how often the action increases, decreases, or does not change the value of \(v\), as well as the range of values seen for \(\delta(v, a, s)\). A possible reason for a state-dependent function could be a range overflow of an integer-valued variable. We check this by examining the states preceding action \(a\) and identifying the one with the highest value seen for \(v\). Given that value, we determine if it can exceed a common integer range threshold (e.g., \(2^8\) for unsigned short, \(2^{32}\) for unsigned integer) by adding a possible value seen for \(\delta(v, a, s)\). Similarly, we check for underflow for signed and unsigned short and integer variables.

By checking all predecessor and successor states of events that perform a particular action, we can detect if the action exhibits non-deterministic behavior (i.e., the same action yields different successor states for equal predecessor states). As with variables, we check if occurrences of an action are only seen during an initial phase of the trace, which can indicate a deadlock situation.

### Immediate Actions

A discrete event simulator schedules events according to their timestamps. In practice, multiple events can be scheduled for a single point in time, such as discrete time steps, actions with deterministic delays, or actions that model immediate reactions to state changes triggered by other actions. It can be challenging for a modeler to evaluate how a simulator schedules multiple events at a single point in time, as documentation may not be detailed or up-to-date.

In any case, a sequence of events with the same timestamps can be easily recognized in a given trace. We identify these sequences and report the triggering actions, provide a set of immediate successor actions, and the length of such subsequences. For a detailed investigation, the interactive use of Traviando with its event browser and trace visualization with message sequence charts is more suitable than what can be provided in a generated HTML report.

### Invariants

So far, we have considered properties of individual variables or actions. However, models often carry invariants, such as a constant number of customers in a closed queueing network or that certain sets of actions may cause the simulation to return to a state, e.g., a failure and repair of a subsystem. We aim to detect some of these invariants. We consider two types of invariants: (1) action invariants that describe occurrence counts for sequences of actions that form a cyclic subsequence in a trace, and (2) state (variable) invariants, i.e., weighted sums of numerical state variables that remain constant throughout a trace. The presence or absence of an invariant provides useful feedback to a modeler. For example, if a resource goes through different levels of utilization and operational modes, and there are state variables accounting for how many components are in which operational mode, and an action invariant accounting for all actions between two states where the resource is idle, the absence of expected invariants may indicate a need to check involved actions and their state transformations.

Invariants can be obtained by observing and checking them throughout the trace or, for a subclass of models, by identifying an underlying vector addition system that allows us to apply traditional invariant analysis known for Petri nets. Both methods are currently supported for actions; for variables, only the latter is available. From exercising a set of traces from various example models, we have seen that sets of invariants tend to be large. Therefore, we restrict the set of reported invariants to those vectors that are linearly independent.

For a modeler, it is valuable to obtain a list of invariants and an enumeration of all actions (or variables) not covered by any invariant. This information is provided on the same page with textual explanations and the list of invariants, making it straightforward to identify invariants that cover a particular action or variable using the search feature of a web browser.

### Warnings

While the generated content provides guidance on the dynamic behavior of a discrete event model as observed in a simulation run, we also generate a list of warnings. These warnings fall into two categories: (1) anomalies detected for certain actions, variables, and combinations thereof, and (2) difficulties the analysis techniques can face, such as fitting a state transformation function to a linear function based on a single occurrence of an action, or if a trace is too short to observe all actions, leading to many actions being absent and detected as potentially dead code.

Each warning includes a link to a corresponding external and static webpage that documents the underlying rule, rationale, symptoms, diagnosis, and therapy, providing concrete advice on how to fix the problem.

### Example

In this section, we briefly discuss how to detect an error in the specification of an action in a simple queueing model with two customer classes, where the server is subject to failures and repairs. The model is described using MÖBIUS, and we consider a generated trace of 113,654 events. The model is taken from [8], where it is described how the progress measure of the trace points to the error. The new version of Traviando generates a report of 73 webpages for this model, which consists of 6 processes with a total of 11 variables and 12 actions. The purpose of the report is to guide the modeler in identifying and addressing issues. It provides multiple clues to recognize the faulty state transformation, including the results of [8].

Figure 2 shows the sequence of states reached in the trace, indicating that certain events seem to prevent the simulation from returning to previous states, which is unexpected. The figure for the progress measure gives a similar message. Checking the page for all variables reveals the same stepwise function for the progress of variables in the process FullModel as in Figure 3. The name of the process should not be understood as the complete server model; this process corresponds to the top-level Join node in the MÖBIUS model where four variables are shared and seen as variables of this process in Traviando. The webpage reports for each variable the first and last events that make assignments to it and, if its type is numerical, the range of observed values.

For variables corresponding to one customer class, we can easily detect that there are more customers than specified since the range of values is reported as {0, 1, ..., 12} instead of {0, 1}. Following a link for one of these variables, C1WaitsForServer, leads to a detailed page that informs us how the value of that variable increases throughout the trace, which actions perform which state transformation to the variable (as given in Table 1), and a warning that this variable is not an element of any variable invariant computed for this trace. By checking the list of actions that increase the value of this variable, we see that an action C2RestartIfFailed occurs 11 times and increments the variable. This indicates that this action, which is supposed to deal with customers of class 2, is faulty. Although the problem is clear at this point, we can also follow the link to the detailed page of that action and check what else it does. We see that the state transformations performed with other variables are all as expected, except for the one to C1WaitsForServer, which is incorrect.

Alternatively, we can check the results of the invariant analysis: the page on observed action invariants lists four invariants and informs us that action C2RestartIfFailed is the only one not present in any invariant. This again points us to check this particular action. Action invariants computed from a Petri-net type invariant analysis give a similar result. The variable invariants computed with invariant analysis tell us that three variables are not covered by any invariant, namely C1WaitsForServer, C1WaitsForUser, and C1Thinking, which are all state variables modeling the customer class that does not have a constant population of customers. The computed three variable invariants, on the other hand, confirm that the server is either in the state failed or available, a constant number of customers of class 2 distribute over four variables, and the server is either idle or serving a customer of class 1 or class 2, which is all as expected. The list of warnings contains four warnings, one for each of the three variables and one for the action that are all not covered by any invariant, guiding us to the error in the model.

For further details and the full report for the server model, see the Traviando’s example page [2].

### Conclusion

We presented an approach to identify model characteristics from a simulation trace containing information on states as a set of value settings for state variables and events with associated information on timestamps and actions. The approach is implemented as a command-line extension to Traviando and generates a detailed report in HTML format. Among other information, the report lists warnings for unusual behavior, and these warnings come with links to webpages that contain further documentation on the rules associated with a warning. A webpage for a particular rule provides guidance on symptoms, possible causes, and suggests solutions for known pitfalls in simulation modeling. Ongoing work is dedicated to extending the ruleset and increasing the size of the sample set. At this point, the existing software is available on request for research and teaching purposes. We plan to make a future version freely available together with a rule set of modeling rules.

### Acknowledgements

We would like to thank the reviewers and Daniel Varro for their constructive comments and Ruth Lamprecht for her editorial assistance, which all helped to improve this paper.

### References

[1] NS2: <http://www.isi.edu/nsnam/ns/>. The network simulator.

[2] Traviando: <http://www.cs.wm.edu/~kemper/traviando.html>, <http://www.cs.wm.edu/~kemper/traviando/examples.html>.

[3] O. Balci. Quality assessment, verification, and validation of modeling and simulation applications. In Proc. of the 2004 Winter Simulation Conference, pages 122–129. IEEE, 2004.

[4] D. D. Deavours, G. Clark, T. Courtney, D. Daly, S. Derisavi, J. M. Doyle, W. H. Sanders, and P. G. Webster. The MÖBIUS framework and its implementation. IEEE Trans. Software Eng., 28(10):956–969, 2002.

[5] F. Bause et al. A toolbox for functional and quantitative analysis of DEDS. In Computer Performance Evaluation / TOOLS, Springer LNCS 1469, pages 356–359, 1998.

[6] F. Bause et al. The ProC/B toolset for the modelling and analysis of process chains. In T. Field et al, editor, Computer Performance Evaluation / TOOLS, Springer LNCS 2324, pages 51–70, 2002.

[7] D. Hovemeyer and W. Pugh. Finding more null pointer bugs, but not too many. In Proc. 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, 2007.

[8] P. Kemper and C. Tepper. Automated trace analysis of discrete event system models. IEEE Transactions on Software Engineering, in print, 2009.

[9] R. G. Sargent. Verification and validation of simulation models. In Winter Simulation Conference, pages 157–169. ACM, 2008.

[10] A. J. M. M. Weijters and L. Maruster. Workflow mining: Discovering process models from event logs. IEEE Transactions on Knowledge and Data Engineering, 16, 2004.