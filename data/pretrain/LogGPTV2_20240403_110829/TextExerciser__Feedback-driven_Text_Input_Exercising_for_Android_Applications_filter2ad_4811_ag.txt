[42] Y. L. Arnatovich, L. Wang, N. M. Ngo, and C. Soh, “Mobolic:
An automated approach to exercising mobile application guis using
symbiosis of online testing technique and customated input generation,”
SPE, 2018.
“{SUPOR}: Precise and scalable sensitive user input detection for
[43] J. Huang, Z. Li, X. Xiao, Z. Wu, K. Lu, X. Zhang, and G. Jiang,
android apps,” in USENIX Security, 2015.
[44] Y. Nan, M. Yang, Z. Yang, S. Zhou, G. Gu, and X. Wang, “Uipicker:
User-input privacy identiﬁcation in mobile applications,” in USENIX
Security, 2015.
[45] B. Andow, A. Acharya, D. Li, W. Enck, K. Singh, and T. Xie, “Uiref:
analysis of sensitive user inputs in android applications,” in WiSec, 2017.
[46] P. Carter, C. Mulliner, M. Lindorfer, W. Robertson, and E. Kirda, “Cu-
riousdroid: automated user interface interaction for android application
analysis sandboxes,” in FC, 2016.
[47] S. Anand, M. Naik, M. J. Harrold, and H. Yang, “Automated concolic
testing of smartphone apps,” in FSE. ACM, 2012.
[48] M.-T. Trinh, D.-H. Chu, and J. Jaffar, “S3: A symbolic string solver for
vulnerability detection in web applications,” in CCS. ACM, 2014.
[49] A. Doup´e, L. Cavedon, C. Kruegel, and G. Vigna, “Enemy of the state: A
state-aware black-box web vulnerability scanner,” in USENIX Security,
2012.
[50] M. Vieira, N. Antunes, and H. Madeira, “Using web security scanners
to detect vulnerabilities in web services,” in DSN.
IEEE, 2009.
[51] acunetix. (2019) Audit your web security with acunetix vulnerability
scannerk. Https://www.acunetix.com/vulnerability-scanner/.
[52] H. Ye, S. Cheng, L. Zhang, and F. Jiang, “Droidfuzzer: Fuzzing the
android apps with intent-ﬁlter tag,” in MoMM. ACM, 2013.
[53] R. Sasnauskas and J. Regehr, “Intent fuzzer: crafting intents of death,”
in WODA & PERTEA. ACM, 2014.
[54] T. Wu and Y. Yang, “Crafting intents to detect icc vulnerabilities of
android apps,” in CISIS.
IEEE, 2016.
[55] H. Feng and K. G. Shin, “Understanding and defending the binder attack
surface in android,” in ACSAC. ACM, 2016.
[56] C.-J. M. Liang, N. D. Lane, N. Brouwers, L. Zhang, B. F. Karlsson,
H. Liu, Y. Liu, J. Tang, X. Shan, R. Chandra et al., “Caiipa: Automated
large-scale mobile app testing through contextual fuzzing,” in MobiCom.
ACM, 2014.
[6] K. Tam, S. J. Khan, A. Fattori, and L. Cavallaro, “Copperdroid:
Automatic reconstruction of android malware behaviors.” in NDSS,
2015.
[7] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S. Wang, and
B. Zang, “Vetting undesirable behaviors in android apps with permission
use analysis,” in CCS. ACM, 2013.
[8] M. Zheng, M. Sun, and J. C. Lui, “Droidtrace: A ptrace based android
dynamic analysis system with forward execution capability,” in IWCMC.
IEEE, 2014.
[9] M. Sun, T. Wei, and J. Lui, “Taintart: A practical multi-level information-
ﬂow tracking system for android runtime,” in CCS. ACM, 2016.
[10] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: Practical policy enforce-
ment for android applications,” in USENIX Security, 2012.
[11] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth, “Taintdroid: an information-ﬂow tracking
system for realtime privacy monitoring on smartphones,” TOCS, 2014.
[12] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen, J. Jung, S. Nath,
the
R. Wang, and D. Wetherall, “Brahmastra: Driving apps to test
security of third-party components,” in USENIX Security, 2014.
[13] J. Ren, M. Lindorfer, D. J. Dubois, A. Rao, D. Choffnes, and N. Vallina-
Rodriguez, “Bug ﬁxes, improvements,... and privacy leaks,” 2018.
[14] Google.
(2019)
Ui/application
exerciser
monkey.
Https://developer.android.com/studio/test/monkey.
[15] M. Y. Wong and D. Lie, “Intellidroid: A targeted input generator for the
dynamic analysis of android malware.” in NDSS, 2016.
[16] A. Machiry, R. Tahiliani, and M. Naik, “Dynodroid: An input generation
system for android apps,” in FSE. ACM, 2013.
[17] G. Hu, X. Yuan, Y. Tang, and J. Yang, “Efﬁciently, effectively detecting
mobile app bugs with appdoctor,” in EuroSys. ACM, 2014.
[18] V. Rastogi, Y. Chen, and W. Enck, “Appsplayground: automatic security
analysis of smartphone applications,” in CODASPY. ACM, 2013.
[19] Y. L. Arnatovich, M. N. Ngo, T. H. B. Kuan, and C. Soh, “Achieving
high code coverage in android ui testing via automated widget exercis-
ing,” in APSEC.
IEEE, 2016.
[20] P. Liu, X. Zhang, M. Pistoia, Y. Zheng, M. Marques, and L. Zeng,
IEEE,
“Automatic text input generation for mobile testing,” in ICSE.
2017.
[21] T. Su, G. Meng, Y. Chen, K. Wu, W. Yang, Y. Yao, G. Pu, Y. Liu, and
Z. Su, “Guided, stochastic model-based gui testing of android apps,” in
FSE. ACM, 2017.
[22] Y. Li, Z. Yang, Y. Guo, and X. Chen, “Droidbot: a lightweight ui-guided
test input generator for android,” in ICSE-C.
IEEE, 2017.
[23] J. Ren, A. Rao, M. Lindorfer, A. Legout, and D. Choffnes, “Recon:
leaks in mobile network trafﬁc,” in
Revealing and controlling pii
MobiSys. ACM, 2016.
[24] Textexerciser open source address. Https://github.com/yyyyHe/TextExerciser.
[25] K. Mao, M. Harman, and Y. Jia, “Sapienz: Multi-objective automated
testing for android applications,” in ISSTA. ACM, 2016.
[26] T. Azim and I. Neamtiu, “Targeted and depth-ﬁrst exploration for
systematic testing of android apps,” in SIGPLAN Notices. ACM, 2013.
rnn.
cnn
Https://github.com/jiegzhan/multi-class-text-classiﬁcation-cnn-rnn.
(2018) Multi
[27] jiegzhan.
classiﬁcation
class
[28] T. S. N. Group. (2019) The stanford natural language processing group.
text
Https://nlp.stanford.edu.
[29] M.
Research.
(2017)
Z3str3
string
constraint
solver.
Https://sites.google.com/site/z3strsolver/.
[30] Google. (2019) Android ui automator. https://developer.android.com/
training/testing/ui-automator.
[31] N. V. Chawla, K. W. Bowyer, L. O. Hall, and W. P. Kegelmeyer, “Smote:
synthetic minority over-sampling technique,” JAIR, 2002.
[32] rovo89.
(2019)
Xposed
framework.
Https://www.xda-
developers.com/xposed-framework-hub/.
[33] W. Wang, D. Li, W. Yang, Y. Cao, Z. Zhang, Y. Deng, and T. Xie, “An
empirical study of android test generation tools in industrial cases,” in
ASE. ACM, 2018.
[34] A. Continella, Y. Fratantonio, M. Lindorfer, A. Puccetti, A. Zand,
C. Kruegel, and G. Vigna, “Obfuscation-resilient privacy leak detection
for mobile apps through differential analysis.” in NDSS, 2017.
android
[35] saswatanand.
(2016) Binary
instrumentation
apps.
of
Https://github.com/saswatanand/ella.
[36] T. Gu. Ape: Automated testing of android applications with abstraction
reﬁnement. http://gutianxiao.com/ape/#minitracing.
[37] Google.
debug
Https://developer.android.com/studio/command-line/adb.
Android
(2019)
bridge.
1085
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
APPENDIX
A. NON-ENGLISH APPS
In this appendix, we introduce the details in evaluating
non-english apps using TextExerciser. We select
top
5,000 apps from Google Play, ﬁlter all the English ones and
then randomly select 10 apps as shown in Table X. This
selection of apps covers seven different languages ranging
from western language like Spanish to languages of east Asia
like Japanese. All the apps are popular, i.e., with more than
100,000 downloads.
PARAMETER CONFIGURATION OF TE X TEX E R C I S E R’S CNN-RNN
Table IX
CLASSIFIER
#Parameters
#Value
#Parameters
#Value
batch size
dropout keep prob
embedding dim
evaluate every
ﬁlter sizes
hidden unit
128
0.5
300
200
3,4,5
300
12 reg lambda
max pool size
non static
num epochs
num ﬁlters
0.0
4
false
1
32
B. PARAMETER SETTINGS OF TE X TEX E R C I S E R’S
CNN-RNN CLASSIFIER
[27]. After adjusting all
In this appendix, we introduce the parameters adopted
in TextExerciser’s open-source multi-class CNN-RNN
model
the parameters, we ﬁnd
the default parameters shown in Table IX are still
that
the best and therefore we adopted these default values for
TextExerciser.
C. DETAILED RESULTS OF TAINTDROID AND RECON
In this appendix, we break down the privacy leaks detected
by TaintDroid, Recon and the keyword based approach in
Table XI. As mentioned, TaintDroid detects the most number
of device identiﬁers, but is relatively weak in detecting creden-
tials and user inputted locations. As a comparison, both Recon
and the keyword based approach detect privacy categories
other than device identiﬁers. One important take-away here
is that TextExerciser can help all existing tools to detect
more privacy leaks.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
1086
NON-ENGLISH APPS COLLECTED FROM GOOGLE PLAY.
Table X
#Package Name
#Downloads
Language
Version
Captured Hints
Generated Inputs
Reason for Generation Failure
com.projectm.ezbrother.ssm
by.onliner.ab
com.deals.deal
ru.medsolutions
com.moneyforward.android.app
de.mobiletrend.lovidoo
com.sabqelmfradon
kr.co.dany.threelinediary
jp.co.mapple.cotripofﬁcial
jp.co.dwango.nicoch
500,000+
100,000+
100,000+
100,000+
1,000,000+
500,000+
1,000,000+
500,000+
100,000+
100,000+
Korean
Arabic
Arabic
Russian
Japanese
German
Japanese
Korean
Japanese
Japanese
1.8.7
1.4.1
1.38
1.2.3
2.0.4
230
1.1
2.0.24
4.1.4
1.8.4
3
3
2
2
2
1
2
2
3
1
3
3
2
2
2
0
2
2
3
1
N/A
N/A
N/A
N/A
N/A
Translation inaccuracy
N/A
N/A
N/A
N/A
THE CATEGORY OF PRIVATE INFORMATION IN TAINTDROID, RECON AND A KEYWORD-BASED TRAFFIC ANALYSIS IMPLEMENTED BY OURSELVES. WE
LIST ALL THE USED KEYWORDS IN THE LAST COLUMN.
Table XI
Dynamic
AnalysisTools
Exerciser
Device
Identiﬁer
User
Identiﬁer
Contact
Information
Location
Credentials
Total
TaintDroid
ReCon
Keyword
Search
Monkey
Monkey+TE
Stoat
Stoat+TE
Monkey
Monkey+TE
Stoat
Stoat+TE
Monkey
Monkey+TE
Stoat
Stoat+TE
23
56
32
66
1
2
1
2
1
2
1
2
0
0
0
0
1
10
2
19
1
11
2
20
0
0
0
0
0
0
0
0
0
1
0
1
0
1
0
1
1
4
1
5
1
4
1
5
0
0
0
0
3
13
4
18
3
13
5
19
23
57
32
67
6
29
8
44
6
31
9
47
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
1087