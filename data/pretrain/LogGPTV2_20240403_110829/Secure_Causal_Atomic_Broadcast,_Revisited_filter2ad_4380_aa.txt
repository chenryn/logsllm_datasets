title:Secure Causal Atomic Broadcast, Revisited
author:Sisi Duan and
Michael K. Reiter and
Haibin Zhang
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Secure Causal Atomic Broadcast, Revisited
Sisi Duan
Michael K. Reiter
Haibin Zhang
Oak Ridge National Laboratory
University of North Carolina at Chapel Hill
Email: PI:EMAIL
Email: PI:EMAIL
University of Connecticut
Email: PI:EMAIL
Abstract—We revisit the problem of preserving causality in
Byzantine fault-tolerant (BFT) atomic broadcast protocols, a
requirement ﬁrst proposed by Reiter and Birman (TOPLAS
1994). While over the past three decades, this requirement
has been met through the deployment of expensive public-
key threshold cryptosystems, we propose three novel, secure
causal BFT protocols without using public-key cryptography.
We implement and evaluate these protocols, showing that they
signiﬁcantly outperform existing constructions that use threshold
cryptosystems.
I. INTRODUCTION
State machine replication [48, 61] is a fundamental soft-
ware approach to enabling highly available services in prac-
tical distributed systems and cloud computing platforms
(e.g., Google’s Chubby [18] and Spanner
[28], Apache
ZooKeeper [42]). Despite its great success, it is extremely
difﬁcult to enable conﬁdentiality—an essential goal for secure
outsourcing and computation—in such an approach (without
sacriﬁcing functionality). In fact, the conﬁdentiality problem
has become a major obstacle to a wider adoption of cloud
storage and cloud computing where replication plays a central
goal [54].
In this paper, we consider one speciﬁc conﬁdentiality
goal—causality preservation, a notion that dates back to
early ’90s [57] and is particularly relevant to modern cloud
computing. Let us brieﬂy describe the notion below.
In a replicated service, when a client
issues a request,
some faulty replicas may create a new request which will
be executed before the original request of the client. This
will violate the causal order of client requests. For example,
Reiter and Birman [57] considered a trading service that trades
stocks. When a client issues a request to purchase stock shares,
a faulty replica may be able to collude with another corrupt
client to issue a derived request for the same stock. If the
correct replicas deliver the new request before the request of
the correct client, the new request may adjust the demand for
the stock and the service may raise the price to the correct
client. Another example is to consider a service that registers
names (e.g., DNS service) in a “ﬁrst come, ﬁrst served”
manner [19, 24]. A faulty replica may observe an interesting
name being registered, and it may then register the name for
another client, thereby violating the causality of the client
requests.
It
is important
to note that causality preservation with
malicious parties is a conﬁdentiality related notion, and in fact
a rare one that only makes sense for a replicated service, but
not for one provided by a centralized server. Moreover, causal-
ity preservation is indeed desirable in practical distributed
systems: ZooKeeper [42] is one such system that achieves
both total order and causal order in the crash failure model.
Reiter and Birman’s construction [57] combines an atomic
broadcast protocol and a public-key threshold cryptosys-
tem [64]. The clients encrypt their requests with the threshold
cryptosystem. Replicas run the underlying atomic broadcast
protocol to reach an agreed total order on the ciphertexts.
Then each replica uses its corresponding decryption key to
generate its decryption share which is broadcast to the rest of
the replicas. Each replica waits for enough decryption shares to
recover and then deliver the client request. Cachin, Kursawe,
Petzold, and Shoup (CKPS) [21] reﬁned and formalized the
notion of secure causal atomic broadcast and built a provably
secure construction from a labeled chosen-ciphertext-attack
(CCA) secure threshold cryptosystem [64]. Recently, Duan
and Zhang [35] presented a conﬁdential BFT protocol that also
achieves causality preservation using only symmetric cryp-
tography. However, their construction lies outside our model,
because it relies on a speciﬁc architecture (that separates
agreement from execution) and requires a larger number of
nodes.
While these existing constructions use encryption as the key
component, we propose three novel and efﬁcient constructions
without explicitly using encryption. When designing these
protocols, we keep three goals in mind—provable security,
generality, and efﬁciency. All of our protocols are provably
secure in the deﬁnitions that we formalize: we provide not
only general and expressive frameworks based on generic
primitives, but efﬁcient and secure instantiations.
Our contributions. We make the following contributions:
We extend the deﬁnitional framework of CKPS [21] to
include more general scenarios for secure causal BFT
protocols.
We provide a generic framework for a secure causal
protocol. It can be based on any fair BFT protocol [27,
34] and any non-malleable commitment with associated-
data, a new primitive we deﬁne. We offer an efﬁcient
instantiation (CP1) which is secure in the random oracle
model (ROM).
We go on to study the case of benign clients subject to
crash failures. In this case, we also provide a generic
framework that is built on top of a new and generic
distributed cryptographic primitive—asynchronous robust
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.64
61
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
secret sharing. We suggest two concrete instantiations
(CP2 and CP3) that are even more efﬁcient than CP1.
We implemented and evaluated all these protocols. We
show that our protocols signiﬁcantly outperform the exist-
ing constructions based on threshold cryptosystems [21,
23].
While our primary goal is to build efﬁcient secure causal
BFT protocols, our work also provides a ﬁrm foundation for
this primitive. Existing secure causal BFT protocols based
on threshold cryptosystems can only be realized using spe-
ciﬁc number-theoretic assumptions (e.g., the Decisional Difﬁe-
Hellman (DDH) assumption). However, because of our general
frameworks, such protocols can be built from generic prim-
itives such as a one-way function, or be even information-
theoretically secure.
II. RELATED WORK
literature,
Atomic broadcast and Byzantine fault-tolerant protocols.
According to the recent
the concept of atomic
broadcast in the presence of Byzantine failures is more used
to describe consensus-based protocols that do not explicitly
distinguish clients and servers [21, 52], while the notion of
Byzantine fault-tolerant (BFT) protocols is more used to
describe state machine replication with Byzantine replicas
(and Byzantine clients) [1, 4, 26, 27, 29, 33, 44]. Throughout
the paper, we do not distinguish atomic broadcast protocols
from BFT protocols and use them interchangeably.
Our constructions (CP1, CP2, and CP3) are all general and
can be built from any types of BFT protocols. Namely, the un-
derlying BFT protocols may be consensus-based or sequencer-
based, and they may work in synchronous, partially asyn-
chronous, or asynchronous environments. (See [30] for a com-
prehensive survey.) However, our constructions have more vis-
ible performance improvements for the recent sequencer-based
BFT state machine replication protocols using symmetric
cryptography [1, 4, 26, 27, 29, 33, 44], compared to consensus-
based ones that employ threshold cryptography [21].
Causal order in crash fault-tolerant distributed systems.
The notion of causality in distributed systems in the crash
failure model was ﬁrst introduced by Lamport [47] and later
extended by Lamport [49]. The formalization is centered on
the “happened before” or “precedes” relation. Since then,
a number of causal broadcast protocols that tolerate crash
failures [14, 36, 46, 62] were proposed.
Conﬁdentiality in distributed systems. Conﬁdentiality is a
central goal in dependable distributed programs. There are
many types of conﬁdentiality notions though.
A line of work aims at achieving conﬁdentiality in dis-
tributed ﬁle systems or storage systems that only support
store and retrieve operations [2, 12, 25, 38, 43, 45, 60]. This is
achieved by letting clients apply encryption or secret sharing
to the data before the data is uploaded to the system. The
servers neither see the underlying data nor process the data.
Belisarius [53] additionally supports add operations by lever-
aging the additive homomorphic property of the underlying
secret sharing scheme.
However, it is highly challenging to support arbitrary oper-
ations while maintaining conﬁdentiality and availability of the
user data in distributed systems. Despite signiﬁcant progress
in secure outsourcing and computation, it has largely focused
on the case of a single server (e.g., fully homomorphic
encryption [39], ORAM [40]), or generic and inefﬁcient multi-
party computation (e.g. [11]). There are two notable works [35,
65] that achieve reliability and conﬁdentiality simultaneously,
yet requiring a special architecture support. The ﬁrst is a
conﬁdential BFT protocol by Yin, Martin, Venkataramani,
Alvisi, and Dahlin [65]. Their protocol leverages the idea
of separating agreement from execution and uses expensive
threshold signatures. Assuming the same architecture, Duan
and Zhang [35] provided a much more efﬁcient construction
that uses only symmetric encryption. Moreover, both protocols
require a lot more nodes than a conventional BFT protocol.
Duan and Zhang also proved that
their conﬁdential BFT
protocol implies a secure casual BFT protocol. Nevertheless,
the implication applies only to their speciﬁc architecture.
Symmetric
threshold cryptography.
Cachin and Poritz [23] built a system, SINTRA, which consists
of an implementation of a secure causal atomic broadcast
protocol [21]. As reported by the authors [23, pp. 9], their
atomic broadcast protocol using extensive threshold cryptog-
raphy is several orders of magnitude slower than PBFT [26] (in
the LAN setting). The evaluation on a conﬁdential BFT [35]
and a BFT storage system [53] demonstrated a similar result:
the protocols using only symmetric cryptography are several
orders of magnitude faster than the ones using expensive
threshold signatures [65]. Our evaluation is in line with these
prior ﬁndings: our constructions CP1, CP2, and CP3 add little
overhead to the underlying BFT protocol, and they all signif-
icantly outperform the one based on threshold cryptosystems
(CP0) in both the LAN and WAN settings.
cryptography vs.
III. PRELIMINARIES AND SYSTEM MODEL
Notation. If n is an integer then [1..n] denotes the set
$← S denotes the operation
{1,··· , n}. If S is a set then s
of selecting an element s of S uniformly at random. If A
$← A(x, y,··· ) to
is a randomized algorithm then we write z
indicate the operation that runs A on inputs x, y,··· and fresh
and uniformly random coins, and outputs z.
BFT protocols. We consider Byzantine fault-tolerant (BFT)
protocols (i.e. atomic broadcast protocols), where f out of n
replicas can behave arbitrarily and a computationally bounded
adversary can coordinate faulty replicas to compromise the
system. A BFT protocol may be sequencer-based [26, 44]
or consensus-based [21, 52]. A secure BFT protocol should
satisfy the following properties:
Agreement. If any correct replica delivers a message m, then
every correct replica delivers m.
Total order. If a correct replica has delivered m1, m2,··· , ms
2,··· , m
(cid:2)
(cid:2)
(cid:2)
and another correct replica has delivered m
s(cid:2),
1, m
i for 1 ≤ i ≤ min(s, s
(cid:2)).
(cid:2)
then mi = m
62
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
Liveness. If a message m is input to n − f correct replicas,
then all correct replicas will eventually deliver m.
Secure causal BFT protocols. Input causality prevents the
faulty replicas from creating a derived request that is delivered
and executed before the client’s request. It is important to note
that it is equally unacceptable for the derived request to be
identical to the client’s request.
The problem of preserving input causality in BFT atomic
broadcast protocols was ﬁrst introduced by Reiter and Birman
(RB) [57]. The notion was later reﬁned by Cachin, Kursawe,
Petzold, and Shoup (CKPS) [21].
We note that the deﬁnition of CKPS is not general enough
to cover all possible scenarios or constructions. Speciﬁcally,
CKPS explicitly models input causality using threshold en-
cryption (as in RB), but there may exist constructions that
threshold encryption (as we show in this
do not exploit
paper). To put
it sightly differently, while CKPS uses an
(“indistinguishability-style”) secrecy notion for encryption,
causality preservation seems more of a non-malleability no-
tion [32] for a primitive that is not necessarily related to
encryption.1
Therefore, we will extend the CKPS deﬁnitional framework
to capture more general scenarios, and introduce appropriate
security deﬁnitions tailored for different constructions.
Fair BFT protocols For one of our constructions, fairness
plays a vital role. Fairness prevents the BFT service from
unfairly delaying or dropping some clients’ requests but not
others. For instance, Aardvark [27] implements a fair and
efﬁcient sequencer-based BFT protocol. (The idea is that if
the sequencer fails to enforce fairness, a view change will be
triggered.) ByzID [34] is another fair BFT protocol (that uses
small trusted components).
Authenticated and private channels. Throughout the paper,
we assume authenticated channels which can be easily realized
using message authentication codes (MACs). In our secret
sharing based constructions, we additionally require private
channels for the communication carrying secret shares. Au-
thenticated and private channels only add very slight overhead
to authentication-only channels, and the most efﬁcient instan-
tiation is to use authenticated encryption (with associated-
data) [58, 59].
ROM. For some constructions in the paper, we use the
random oracle model (ROM) [8], where scheme algorithms
and adversary algorithms will have access to a random oracle.
IV. BUILDING BLOCKS
In this section, we review labeled threshold cryptosystems
(for CP0), and introduce two new cryptographic primitives—
non-malleable commitment with associated-data (for CP1) and
asynchronous robust secret sharing (for CP2 and CP3).
1For encryption schemes, message secrecy and message non-malleability
are equivalent (if considering chosen ciphertext attacks) [7, 10]. This may not
be the case for other primitives. For instance, the non-malleability notion for
a commitment scheme is orthogonal to its secrecy notion.
A. Labeled Threshold Cryptosystems
We review robust
labeled threshold cryptosystem (i.e.
threshold encryption) [64] where a public key is associated
with the system and a decryption key is shared among all
the servers. Syntactically, a (t, n) threshold encryption scheme
ThreshEnc consists of the following algorithms. A probabilis-
tic key generation algorithm TGen takes as input a security
parameter l, the number n of total servers, and threshold
parameter t, and outputs (pk, vk, sk), where pk is the public
key, vk is the veriﬁcation key, and sk = (sk1,··· , skn) is a list
of private keys. A probabilistic encryption algorithm TEnc
takes as input a public key pk, a message m, and a label lb,
and outputs a ciphertext c. A probabilistic decryption share
generation algorithm ShareDec takes as input a private key
ski, a ciphertext c, and a label lb, and outputs a decryption
share σ. A deterministic share veriﬁcation algorithm Vrf takes
as input the veriﬁcation key vk, a ciphertext c, a label lb, and
a decryption share σ, and outputs b ∈ {0, 1}. A deterministic
combining algorithm Comb takes as input the veriﬁcation key
vk, a ciphertext c, a label lb, a set of t decryption shares, and
outputs a message m, or ⊥ (a distinguished symbol).
We require the threshold encryption scheme to be chosen
ciphertext attack (CCA) secure against an adversary that
controls up to t − 1 servers. We also require consistency of
decryptions, i.e., no adversary that controls up to t− 1 servers
can produce a ciphertext and two t-size sets of valid decryption
shares such that they yield different plaintexts.
There are a few efﬁcient constructions for (labeled) CCA
secure threshold cryptosystems [5, 16, 64].
B. Commitment Schemes
We will use a number of commitment schemes for
different purposes,
including conventional commitments,
non-malleable commitments (NMC), non-malleable commit-
ments with associated-data (NM-CAD), and concurrent non-
malleable commitments.
Conventional commitment scheme. A commitment scheme
is a protocol that allows one to commit to a chosen value. The
value will remain hidden until the moment when the committer
decides to open the commitment. A conventional commitment
requires the regular hiding and binding properties.
commitment with associated-data. A
Non-malleable
scheme
commitment
is a triple Π =
with associated-data, or NM-CAD,
(Cgen, Commit, Open). Cgen takes as input a security param-
eter l and outputs a commitment key ck. Commit takes as
input the commitment key ck, a message m ∈ M (message
space) and a header h ∈ H (header space) and outputs (c, d),
where c is the commitment and d is the decommitment or the
h
ck(m) for Commit(ck, h, m). Open
opening; we write Commit
takes as input ck, h, c, m, and d, and outputs a decision bit;
h