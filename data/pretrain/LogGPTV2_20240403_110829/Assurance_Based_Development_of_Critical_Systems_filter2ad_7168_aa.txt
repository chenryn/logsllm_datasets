title:Assurance Based Development of Critical Systems
author:Patrick J. Graydon and
John C. Knight and
Elisabeth A. Strunk
Assurance Based Development of Critical Systems
Patrick J. Graydon          John C. Knight
Department of Computer Science
University of Virginia
{
graydon | knight
}
@cs.virginia.edu
Elisabeth A. Strunk
Software Systems Engineering Dept.
The Aerospace Corporation
PI:EMAIL
Abstract
Assurance Based Development (ABD) is the syner-
gistic construction of a critical computing system and
an  assurance  case  that  sets  out  the  dependability
claims for the system and argues that the available evi-
dence justifies those claims. Co-developing the system
and  its  assurance  case  helps  software  developers  to
make  technology  choices  that  address  the  specific
dependability goal of each component. This approach
gives developers: (1) confidence that the technologies
selected  will  support  the  system’s  dependability  goal
and (2) flexibility to deploy expensive technology, such
as  formal  verification,  only  on  components  whose
assurance needs demand it. ABD simplifies the detec-
tion—and  thereby  avoidance—of  potential  assurance
difficulties as they arise, rather than after development
is  complete.  In  this  paper,  we  present  ABD  together
with a case study of its use.
1. Introduction 
Assurance  Based  Development
  (ABD) [9]  is  a
novel approach to constructing critical computing sys-
tems. In this paper we discuss how it can help develop-
ers make development decisions that contribute to their
systems’  dependability  arguments.  In  ABD,  depend-
ability,  i.e.,  confidence  that  the  system  will  meet  its
dependability goals when fielded, is evaluated through-
out the development process. The system and its assur-
ance argument are co-developed so that explicit criteria
for the dependability impact of a development choice
are available at the time the choice is made. Combining
development  and  assurance  in  this  way  facilitates
detection and avoidance of potential assurance difficul-
ties 
, rather than after development is com-
plete—when they are much harder to address. Here, we
explain the kind of assurance goals that are generated
at  each  step  and  how  development  decisions  can  be
evaluated against those goals.
as they arise
Knowing that a critical system is going to operate
dependably  in  its  expected  environment  is  essential,
yet current approaches to dependability assurance are
ad hoc. There are many techniques available to devel-
opers of critical systems, but in most cases their bene-
fits have been shown only in isolation and developers
do  not  fully  exploit  the  dependability  benefits  they
bring. For example, developers might use formal meth-
ods for the “critical parts of the system,” but are often
unable  to  evaluate  the  ensuing  effect  on  the  depend-
ability of the system as a whole. There is little incen-
tive  to  use  a  technique  whose  overall  benefit  to  the
delivered system is unknown.
Our goal with ABD is to integrate the development
of the system and its assurance argument, thus enabling
assurance  needs  to  drive  development  decisions.  We
avoid  making  assumptions  about  the  structure  of  the
system’s  functional  documentation  (since  that  varies
widely  from  system  to  system),  but  for  the  system’s
.  The
assurance  argument  we  use  an 
assurance case is an argument that sets out the depend-
ability goal for the system, the evidence needed to sup-
port  it,  and  how  that  evidence  is  used  to  justify  the
claim. Safety cases, a specific form of assurance cases,
are used widely in Europe; in some domains, their use
is mandated by regulation.
assurance  case
While assurance cases are often created for critical
systems, they are not always exploited to guide devel-
opers’ choices. This is: (1) inefficient, because devel-
opment steps might produce superfluous assurance or
need to be revisited after development is complete; and
(2) ineffective, because necessary development activi-
ties were omitted unintentionally. If the assurance case
is produced near the end of development, there is a risk
that the evidence produced during development will be
insufficient.  This,  in  turn,  could  force  developers  to
produce  additional  evidence  or  pressure  them  into
accepting  an  incomplete  argument [4].  Recognizing
these risks, some standards [7] and researchers [4] call
for  developers  to  construct  safety  cases  early  and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
update  them  often. ABD  takes  this  idea  to  its  fullest
extent, integrating safety case and system construction.
ABD combines assurance case and system devel-
opment so that each supports the other. System devel-
opment  is  tailored  to  support  the  assurance  case,
generating evidence for the argument at each step. The
assurance case also supports the development process,
guiding developers to make choices that make the sys-
tem much more likely to be fit for its intended use.
We begin in section 2 by summarizing the assur-
ance  case  concept  and  how  it  fits  into  ABD.  We
describe  the ABD  process  itself  in  section  3,  and  we
illustrate its use in section 4. We discuss related work
in section 5 and present our conclusions in section 6.
2. Assurance cases and ABD
safety
Assurance cases are the state of the art in rigorous
but informal dependability argumentation and, as such,
provide  the  foundation  on  which  the ABD  approach
rests. Safety cases, a special form of assurance cases,
have been built to document the 
 of a variety of
production systems. In general, a safety case is “a doc-
umented body of evidence that provides a convincing
and valid argument that a system is adequately safe for
a  given  application  in  a  given  environment” [1].
Graphic notations have been designed to facilitate writ-
ing assurance cases in a manner that is easy for humans
to understand and that can be manipulated by machine.
The most widely used of these is the Goal Structuring
Notation (GSN) [10].
In  its  simplest  form,  an  assurance  case  contains
three  essential  elements:  (1)  an  assurance  goal  or
claim; (2) evidence that the goal has been satisfied; and
(3) an argument linking the evidence to the goal in a
way that leads one to believe that the evidence justifies
the goal. This basic structure is applied recursively to
produce,  for  real  systems,  a  hierarchic  structure  with
the overall goal for the system at the root. Evidence at
one  level  becomes  a  goal  at  the  next  lower  level,  so
that  the  argument  is  manageable  at  each  level.  Other
elements that can appear in assurance cases are strate-
gies,  assumptions,  justifications,  and  context.  While
the goals, etc., and hence the assurance argument, are
specific  to  a  particular  system,  patterns  for  common
argument fragments have been developed [5].
ABD process
In ABD, the assurance case and the system are co-
developed, with each affecting decisions in the other.
The 
, which determines how this synergis-
tic activity is to be performed, is discussed in section 3.
Because the system and its assurance case are co-
developed,  the  links  between  the  assurance  argument
and the development artifacts that support each part of
assurance links
ABD composite
it must be documented. These 
, together
with the development artifacts and assurance case frag-
ments being linked, form an 
. Figure 1
shows  a  fragment  of  an  example ABD  composite  in
which the assurance case is presented in GSN. In the
figure,  solution  S1  shows  evidence  from  a  develop-
ment  artifact  being  applied  to  support  goal  G3,  and,
indirectly, to support the top-level assurance goal, G1.
In ABD, assurance case goals represent assurance
obligations  that  must  be  addressed,  directly  or  indi-
rectly, by evidence from development artifacts. Goals
are added to the assurance case diagram with an anno-
tation indicating that they have not yet been addressed.
As development progresses, these goals are addressed
either by direct evidence from a development artifact
or  an  argument  fragment  combining  evidence  from
subgoals, each of which must itself be addressed.
The assurance case goals related to a development
artifact set out the properties which the developer must
ensure that the artifact possesses. Goal G2 in Figure 1,
for example, could describe a property that a develop-
ment  artifact  is  to  have.  If  each  artifact  is  created  so
that  it  has  the  required  properties  and  the  assurance
argument is valid, then the system developers can be
confident that the system will meet its assurance goals.
As an example of a fragment of an ABD compos-
ite and assurance links, consider the goal of developing
a software component in a safety-critical system. If the
component  must  meet  an  assurance  goal  of  having  a
,  i.e.,  not  in  the
failure  rate  per  unit  time  below  10
ultra-dependable range, testing might be the basic tech-
nology chosen to meet this goal. Such a goal requires
that the testing process provide several pieces of evi-
-3
C1
System
requirements
G1
Top-level
assurance goal
C2
System
context
C3
Development
artifact related 
to strategy
ST1
Strategy for 
meeting goal
G2
Subgoal developer 
must address later
G3
Subgoal directly 
addressed by evidence 
Legend
G : Goal (property to be shown)
C : Context information
ST : Strategy used to support goal
S : Solution (facts supporting argument)
: Remains to be supported
S1
Evidence
from a 
development
artifact
Figure 1. A fragment of an ABD composite
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:24 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
dence  to  support  the  assurance  case. These  pieces  of
evidence  are:  (1)  that  the  documented  test  plan  has
been conducted as prescribed; (2) that the component’s
failure  rate  has  been  demonstrated  in  a  statistically
valid way to be below the threshold; and (3) that the
test cases were the result of a random process of selec-
tion from the expected operational environment.
3. Assurance Based Development
The ABD process addresses assurance case goals
through development choices, which provide evidence
that is linked into the assurance case. Briefly, a devel-
oper  applying ABD  repeatedly  examines  the  unsatis-
fied goal(s) in the assurance case, selects one, makes a
system development choice
—the selection of an archi-
tecture  or  design,  the  use  of  a  particular  tool  or  lan-
guage, an implementation decision, or the selection of
a verification or validation strategy—that addresses the
goal, and modifies the development artifacts and assur-
ance case accordingly. Because each choice may give
rise to several new, unaddressed, goals, the process is
applied repeatedly until no unaddressed goals remain.
ABD  assumes  the  availability  of  system  require-
ments, including functional requirements and depend-
ability requirements such as availability and safety. In
this paper, we assume that the requirements are correct
and  complete. We  plan  to  consider  the  integration  of
requirements techniques with ABD in future work.
We also assume the availability of a description of
given  architecture
the 
,  i.e.  the  high-level  architecture
within which the computing system will operate. For
example, a new anti-lock braking system is part of a
larger automobile system that relies upon the braking
system meeting certain functional, non-functional, and
dependability  requirements.  To  the  braking  system
developer, the given architecture includes the braking
system itself, the other vehicle systems with which the
brakes  must  interact,  and  the  interfaces  between  the
braking system and the other components. The given
architecture  for  a  desktop  application  would  include
the operating system and the desktop’s peripherals.
In section 3.1 we describe how the developer enu-
merates potential system development choices. In sec-
tion 3.2 we describe how the developer ought to select
from  among  the  available  choices.  Finally,  in  section
3.3  we  describe  how  this  choice  is  recorded  in  the
assurance case as an ABD composite.
3.1. Candidate development choices
It is important that a developer enumerating candi-
date  system  development  choices  cast  a  net  wide
enough to include at least one choice likely to lead to a
system  that  meets  its  functional,  cost,  dependability,
and  other  goals.  Developers  will  consider  familiar
choices  and  may  solicit  suggestions  from  colleagues
and  team  members,  but  these  sources  alone  may  be
insufficient.  Furthermore,  while  considering  more
choices increases the likelihood that at least one will be
suitable, there are costs associated both with enumerat-
ing potential choices (as consulting reference material
takes time) and with assessing each candidate choice.
Developers  need  a  way  to  enumerate  a  short  list  of
choices likely to be acceptable for a given problem.
Patterns  are  a  general  and  commonly  used  tech-
nique that has proven especially important in architec-
ture and design. Experience in ABD could be captured
by  patterns  of  coupled  system  development  choices
and assurance case argument fragments, helping devel-
opers to quickly enumerate a set of candidate choices