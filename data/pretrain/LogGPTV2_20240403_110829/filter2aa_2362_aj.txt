Many applications, especially web applications, use a structured query language
(SQL) database backend to process user requests. For e-commerce sites, this is nec-
50
Software Vulnerability Analysis
16www2.sims.berkeley.edu/research/projects/how-much-info/internet.html
essary to receive customer billing information and retrieve customer requests about
offered products. If proper input validation is not preformed, a malicious attacker
could craft special SQL queries to either retrieve information it should not have
access to, force authentication statements to be true, or to inject SQL commands
(such as adding a user) that it should not be able to run. In some situations, attack-
ers may even be able to read files or run arbitrary code on the system. The single-
quote character is of particular interest because it tells the SQL system to escape
the currently executing command and run a new one. Supposed the following line
of SQL is used to process a username:
statement := "SELECT * FROM users WHERE name = '" + username + "';"
If, for the username, an attacker inputs:
b' or 'c'='c
The effective SQL command would be
SELECT * FROM users WHERE name = 'b' or 'c'='c';
Then this query would return data that could have the effect of bypassing
authentication and allowing an attacker to log in, since c always equals c. If the
attacker were to input
b';DROP TABLE users; SELECT * FROM data WHERE name LIKE '%
the user table would be deleted and information from the data table would be
retrieved.
A newer variation on this technique is called “blind SQL injection.” During a
blind SQL injection, the attacker is looking at a perfectly valid page that continues
to be displayed, whereas in typical SQL injection attack, the attacker is looking for
error messages to help further the attack. In a blind SQL injection, one can test a
page by verifying what a noninjected page looks like, let’s say a set of hockey scores,
then the attacker begins inserting values into the request much like a traditional
SQL injection. A properly crafted application will deny the extra characters and
return a 404 not found or a generic error page. If the attacker still receives the set
of hockey scores, even with the injection, then the application may be vulnerable.
This type of vulnerability is useful for determining database and table names, enu-
merating passwords, and gathering other information that can be used as stepping-
stones to later attacks. See www.spidynamics.com/whitepapers/Blind_SQLInjection
.pdf for more details.
2.4.2.3
XPath, XQuery, and Other Injection Attacks
Metacharacter injection, like the single tick used in SQL injection, is actually a
generic vulnerability class that occurs whenever one language is embedded in
another. SQL, Shell, XML, HTML, LDAP search filters, XPath, XQuery HDL,
2.4
Basic Bug Categories
51
JDOQL, EJBQL, OQL, for example, are some of the areas where injection issues
have been located.
There appears to be no universal fix for this bug class. If programmers properly
escaped user input, most of these attacks would disappear, but if programmers
wrote perfect code, there would be no security bugs. As always, standard defense-
in-depth strategies, such as limiting the application’s privileges, should be em-
ployed. In some cases, like SQL, there may be functions that provide relief. For
example, if SQL prepared statements are used, metacharacter injections are not pos-
sible. In PHP, the mysql_real_escape_string(), is available to help filter potentially
dangerous input characters. Static or runtime analysis tools can also be used to scan
particular language bases for injection weaknesses.
2.4.2.4
Cross-Site Scripting (XSS)
Cross-site scripting is a common method for malicious web users to abuse the rights
of other web users of a particular site. In the typical scenario, two conditions must
be met: First, an attacker must determine a page on the website of interest that
contains a XSS vulnerability. That means the site must accept input and then
attempt to display it without filtering for HTML tags and/or (Java/other) script
code. Second, the attacker must select a victim, desired data, mechanism of coer-
cion, and mechanism of retrieval. The desired data might be the victim’s login
cookie, and the method of coercion might be a spoofed e-mail from the site’s admin.
The collection mechanism might be a bogus website designed to collect such data.
Once this is all ready, the attacker sends the victim the e-mail with the XSS link. If
the victim clicks on the link, the attacker will now have a cookie since the script
code, say JavaScript, will be executed in the victim’s web browser. This code may
send the contents of the victim’s cookies (including session IDs) to the attacker.
Such attacks could be automated to phish the masses on the vulnerable site.
There are two main types of XSS vulnerabilities, reflected and stored. The sce-
nario described above is of the reflected variety. Reflected XSS vulnerabilities
dynamically execute scripting language code included with a request. In the above
case, the code to send the victim’s login cookie would have been included in the
particular link sent to the victim. It is called reflected because the malicious code
is sent by the victim by following the link to the vulnerable server, which then
“reflects” it back to the victim’s browser for execution. This code then runs in the
context of the trusted site. The other type of attack is called a stored XSS vulnera-
bility. In this case, the vulnerable web application is designed in such a way that the
user input is permanently stored on the server and displayed (and executed) by any
viewer to that page. Examples might be web forums or blog comments. This type
is particularly nasty since any visitor to the site can be compromised.
Defeating XSS attacks is similar to defending against other types of code injec-
tion. The input must be sanitized. User input containing HTTP code needs to be
escaped or encoded so that it will not execute.
2.4.3
Brute Force Login
Brute force simply means trying something over and over again until a desired con-
dition occurs. On systems that have no limit on attempted logins, user/password
52
Software Vulnerability Analysis
combinations can be continually tried until a success is found. This is true of more
than just logins. Credential cookies on webpages and URL guessing to view files,
for example, can be used. Enforcing strong passwords, monitoring logs, and limit-
ing access attempts from similar IPs can be an effective way to mitigate such
attacks. Note: If automatic blocking (blacklisting) is present, the system may be vul-
nerable to a denial of system attack. In this scenario, an attacker purposely fails to
log in as the victim many times. When the system locks the victim’s account, the vic-
tim can no longer access his or her own legitimate account.
2.4.4
Race Conditions
Race conditions are vulnerabilities that arise due to unforeseen timing events. A
standard example can be seen from the following code excerpt from an application
running at higher privileges.
if(!access(tempfilename, W_OK)){
fp = fopen(tempfilename,
"a+");
fwrite(user_supplied_info, 1, strlen(user_supplied_info), fp);
fclose(fp);
} else {
error("User does not have write permission to temp file\n";
}
Suppose this application is SETUID root, i.e., running at a higher privilege level
than the user who is using it. In this code, a temporary file is first checked to make
sure the user has permission to write to it. If so, it appends some user-supplied data
to the file. The problem here is the small amount of time that occurs between the
permission check in the access() call and the use of the file in the fopen() call. This
is sometimes called a time-of-check-to-time-of-use bug. During that small window,
the user can create a symbolic link from the temporary file to a file he or she should
not have access to, such as /etc/passwd. If timed just right, this will allow an
attacker to append arbitrary data to this file and thus add a login account with
super user privileges. This example shows that race conditions can be particularly
difficult to exploit, but with a little patience and the fact the attacker can overload
the system by fully utilizing system resources, attacks of this nature are possible.
2.4.5
Denials of Service
A denial of service (DoS) or distributed denial of service (DDoS) is the act of over-
whelming a system, service, or device to the point at which it can no longer service
legitimate requests. An early DoS attack was the SYN flood, in which an attacker
could take advantage of the inherent weakness of the TCP/IP stack by sending the
first portion of the TCP handshake, the SYN packet, but never sending acknowl-
edgments when the remote host responded. This could cause huge resource con-
sumption, socket limit errors, or CPU utilization if many of these requests were sent
at once. Now, these attacks can be lessened by firewall rules and settings inside var-
ious operating systems.
2.4
Basic Bug Categories
53
At the application layer, denial of service attacks are also possible. The most
obvious example would be a network server that doesn’t spawn new connections
for each client attempt and also has a buffer overflow. If the attacker triggers the
overflow in a nonexploitable way, the likely result is application failure (crash) and
thus a DoS.
Also, if an attacker can find a scenario in which the application does a lot of work
while the attacker does only a little, this could result in a DoS. Imagine an applica-
tion that performs some complex cryptographic function or database lookup in
response to an attacker’s simple query. The attacker can generate many of these
simple queries very quickly while the application must perform an intensive action
each time. The result is that the application could become so overwhelmed that it
will not be able to perform well, if at all, for legitimate clients.
2.4.6
Session Hijacking
Session hijacking is the means of stealing a (often previously authenticated) session
from a remote user and gaining access to the system or service at that privilege level.
A common example of a session hijack is when a user has logged into a website
that stores credentials in a cookie, and an attacker is able to retrieve that cookie
and use it to bypass the authentication of the site the victim had recently visited. A
good countermeasure to session hijacking is the use of a time-based authentication
mechanism (a good base is Kerberos) combined with some cryptographic hash or
algorithm and an expiry time for an authenticated session.
2.4.7
Man in the Middle
A man in the middle (MITM) attack is one in which an attacker is able to sit between
a client and a server and read or inject information into the data stream that is
going to either side of the connection. There are prepackaged tools like ettercap
that will enable one to easily execute a MITM attack on a local LAN by using a
technique called ARP poisoning. This technique convinces the victim’s computer
that the attacking system is its default gateway and the gateway believes that the
attacker is the victim host. The attacker is then able to sniff (watch) all of the pass-
ing traffic, and change any of the information in between. Again, strong encryption
can help to mitigate this risk, but it is always a major concern, especially in large or
public networks.
2.4.8
Cryptographic Attacks
Cryptographic attacks are a way for an attacker to bypass an encryption or cryp-
tographic system by attacking weaknesses in the algorithm that employs it. There
are numerous methods for cryptanalysis that are far beyond the scope of this book,
but in recent years cryptographic attacks are becoming more prevalent as more and
more commercial products are relying on cryptography to protect their systems
and software.
54
Software Vulnerability Analysis
2.5
Bug Hunting Techniques
Now that we know the types of vulnerabilities that exist, it is time to talk about
how to find them, which is what this book is all about. Traditionally, a hacker was
simply a technically inclined person who took a deep interest in the technology by
which he or she was surrounded. This led to incidents in which the individual had
the ability to make free long distance phone calls, bypass biometric authentications,
or misuse RFID, which ultimately led the term to carry strong connotations of mis-
adventure or wrong doing.
While some mystery still surrounds the secret lives of hackers, most that are
involved in software vulnerability analysis operate in one of a few high-level man-
ners: reverse engineering, source code auditing, fuzzing, or acquiring/extending bor-
rowed, purchased, or stolen bugs. Since only the first three strongly relate to this
book, we will ignore the vast and varied channels by which bugs or exploits are
sold and resold.
Once a bug has been identified, the process of creating an exploit begins. A next
and equally involved step is the usage or deployment of such exploits, sometimes
called information operations. These topics are also beyond the scope of this book.
2.5.1
Reverse Engineering
Reversing engineering17 (RE or RE’ing) the internal design of a closed system, soft-
ware, or hardware package is a very useful skill that has both legitimate and illegit-
imate uses. Like so many skills, the reverse engineer could be working for one of
many reasons, but as you’d expect we’re concerned with how RE could be used to
find bugs in software. The objective is clear: Turn compiled binary code back into its
high-level representation to understand the product, so that implementation errors
can be sought out. The process for doing this is nontrivial and potentially time con-
suming. Traditionally, it was done by hand: Begin by using a disassembler to retrieve
a mapping from the binary op or byte codes, to the assembly language instructions.
Next, manually determine the purpose of a block of assembly instructions. Iterate
until enough understanding has been gained to achieve the given task. This process
still largely involves manual inspection, but tools such as IDApro18 and Bindiff19
exist to accelerate the task.
The following is a disassembled function, as shown in IDApro:
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
2.5
Bug Hunting Techniques
55
17www.openrce.org/articles or http://en.wikibooks.org/wiki/Reverse_Engineering are good places
to find more information about reverse engineering.
18For further information on IDA, check out www.datarescue.com/idabase/links.htm
19For more information on Bindiff, see www.sabre-security.com
var_14= dword ptr -14h
var_5= byte ptr -5
second_operand= dword ptr 8
first_operand= dword ptr 0Ch
push
ebp
mov
ebp, esp
push
ebx
sub
esp, 24h
; char *
mov
eax, [ebp+first_operand]
mov
[esp+28h+var_28], eax
call
_atoi
mov
ebx, eax
mov
eax, [ebp+second_operand]
mov
[esp+28h+var_28], eax
call
_atoi
mov
[esp+28h+var_1C], ebx
mov
[esp+28h+var_20], eax
mov
[esp+28h+var_24], offset aDAndD ; "%d and %d"
lea
eax, [ebp+var_14]
mov
[esp+28h+var_28], eax
call
_sprintf
lea
eax, [ebp+var_14]
mov
[esp+28h+var_24], eax
mov
[esp+28h+var_28], offset aTooManyArgumen ; "Too many
arguments..."
call
_printf
mov
[esp+28h+var_28], offset aProceedAnyway? ; "Proceed anyway?
[y/n]\r"
call
_puts
call
_getchar
mov
[ebp+var_5], al
cmp
[ebp+var_5], 79h
jz
short loc_8048657
One goal might be to turn this assembly code listing back into its original code.
This is called decompilation. In general, for high-level languages such as C and C++,
the act of decompilation is infeasible at best. Consider that many different versions
of source code can correspond to the same assembly instructions. Also, aggressive
compiler optimizations can make decompilation difficult. The following is the orig-
inal C source code for the function disassembled above:
int error(char * a, char * b)
{
char small_buff[15];
char c;
sprintf(small_buff, "%d and %d", atoi(a), atoi(b) );
56
Software Vulnerability Analysis
printf("Too many arguments were supplied. Only the first two (%s)
would get used.\r\n", small_buff);
printf("Proceed anyway? [y/n]\r\n");
c = getchar();
if( c == 'y' || c == 'Y')
do_addition(a, b);
else
printf("Ok, try again with better arguments.\r\n");
}
However, it is not necessary to revert the application back to its original source
code in order to identify bugs. Good vulnerability analysts know that ‘sprintf’ is a
dangerous function (if the input is not trusted and used improperly), whether they
see it in a source code listing or in a disassembly of a binary. This sample code does
contain an error. In the source code, we see that ‘small_buff’ is only 15 bytes long.
We know that an integer (%d) when printing into a buffer can be as large as 10
bytes. The “ and ” portion of the buffer takes up 5 bytes. So, in total, 10 + 10 + 5
= 25 bytes can be written. Since that is larger than the space allocated, a buffer over-
flow can occur here. While this is a contrived example, it does illustrate an interest-
ing point. If this function normally is used with only small integers passed to it, the
buffer will not typically overflow. It could be used by thousands of users all the time
without turning up the bug. It is only in extreme circumstances in which this vul-
nerability will affect the execution of the program.
Understanding the size of ‘small_buff’ is a little more difficult from the disas-
sembly. ‘24h’ is subtracted from the stack, indicating the amount of space reserved
for local variables—only a portion of that space is the undersized buffer. Therefore,
a manual test of this potential flaw would have to be conducted to prove or dis-
prove this statically discovered bug.
Source code auditing is also used to analyze flaws. While this process might
appear “easier” or more logical than reverse engineering (since the actual program
source is available), such is not always the case. For example, a popular way to