Problem is when one component wraps another one and is trying to provide the
nested content to wrapped component, which additionally is trying to take this
nested content by selectors.
**Case 0**  
http://jsfiddle.net/majo44/nvaqhsse/
The goal is to provide component X-B which encapsulate component X-A, with
possibility to provide nested content to X-A from usage of X-B.
X-A component
    @Component({
        selector: "x-a",
        template: `
                X-A Start
                X-A End`
    })
    class XA{}
X-B component
    @Component({
        selector: "x-b",
        template: `
                X-B Start
                X-B End`,
        directives: [XA]
    })
    class XB{}
Example usage
    @Component({
        selector: 'app',
        template: `
                AClass Element
                BClass Element
        `,
        directives: [XB]
    })
    class App{}
As a output I got:
            X-B Start
                X-A Start
                AClass Element
                BClass Element
                X-A End
            X-B End
In this case everything works fine as I expected.
**Case 1**  
http://jsfiddle.net/majo44/nvaqhsse/1/
Now lets modify x-a component whit adding selectors to ng-content (eg. for
reverse order of children, in real case this can be for placing content in
different places of my page layout).
X-A component:
    @Component({
        selector: "x-a",
        template: `
                X-A Start
                X-A End`
    })
    class XA{}
Now output do not contains any of content provided to x-b component  
As a output I got:
            X-B Start
                X-A Start
                X-A End
            X-B End
**Case 2**  
http://jsfiddle.net/majo44/nvaqhsse/2/
As a workaround I can re-package my content in x-b component (this is not good
because I have to always know exact the x-a ng-content selectors in x-b
component, this is not superb flexible)
X-B component
    @Component({
        selector: "x-b",
        template: `
            X-B Start
            X-B End`,
        directives: [XA]
    })
    class XB{}
Output looks better, but there still is a problem, because ng-content is
taking whole selected element I have now duplicated :
            X-B Start
                X-A Start
                    BClass Element
                    AClass Element
                X-A End
            X-B End
As I think, the best flexible solution for this will be support of _Case 1_
directly. As an alternative solution for _Case 2_ ng-content can provide
additional attribute for "unwrap" the content from "selected" element.
Angular Version: 2.0.0-beta.0  
Browser: Chrome