### Problem Description

The issue arises when one component (X-B) wraps another component (X-A) and attempts to pass nested content to the wrapped component. The nested content is intended to be accessed by X-A using selectors. 

#### Case 0: Basic Nesting
In this case, X-B encapsulates X-A, and the goal is to provide nested content to X-A from the usage of X-B.

**X-A Component:**
```typescript
@Component({
    selector: "x-a",
    template: `
        X-A Start
        <ng-content></ng-content>
        X-A End
    `
})
class XA {}
```

**X-B Component:**
```typescript
@Component({
    selector: "x-b",
    template: `
        X-B Start
        <x-a>
            <ng-content></ng-content>
        </x-a>
        X-B End
    `,
    directives: [XA]
})
class XB {}
```

**App Component:**
```typescript
@Component({
    selector: 'app',
    template: `
        <x-b>
            AClass Element
            BClass Element
        </x-b>
    `,
    directives: [XB]
})
class App {}
```

**Output:**
```
X-B Start
    X-A Start
        AClass Element
        BClass Element
    X-A End
X-B End
```

In this case, everything works as expected.

#### Case 1: Adding Selectors to `ng-content`
Now, let's modify the X-A component by adding selectors to `ng-content` to control the order or placement of the nested content.

**X-A Component:**
```typescript
@Component({
    selector: "x-a",
    template: `
        X-A Start
        <ng-content select="b-class"></ng-content>
        <ng-content select="a-class"></ng-content>
        X-A End
    `
})
class XA {}
```

**App Component:**
```typescript
@Component({
    selector: 'app',
    template: `
        <x-b>
            <a-class>AClass Element</a-class>
            <b-class>BClass Element</b-class>
        </x-b>
    `,
    directives: [XB]
})
class App {}
```

**Output:**
```
X-B Start
    X-A Start
    X-A End
X-B End
```

In this case, the output does not contain any of the content provided to the X-B component.

#### Case 2: Repackaging Content in X-B
As a workaround, we can repackage the content in the X-B component. However, this approach is not ideal because it requires knowledge of the exact `ng-content` selectors used in X-A, reducing flexibility.

**X-B Component:**
```typescript
@Component({
    selector: "x-b",
    template: `
        X-B Start
        <x-a>
            <b-class><ng-content select="b-class"></ng-content></b-class>
            <a-class><ng-content select="a-class"></ng-content></a-class>
        </x-a>
        X-B End
    `,
    directives: [XA]
})
class XB {}
```

**Output:**
```
X-B Start
    X-A Start
        BClass Element
        AClass Element
    X-A End
X-B End
```

This solution works, but it introduces duplication of the `b-class` and `a-class` elements.

### Suggested Solutions

1. **Support for Case 1:**
   - The best flexible solution would be to support the use of selectors in `ng-content` directly within the X-A component. This would allow for more dynamic and flexible content placement without the need for additional repackaging in X-B.

2. **Unwrap Attribute for `ng-content`:**
   - As an alternative, `ng-content` could provide an additional attribute, such as `unwrap`, which would remove the selected element and only include its content. This would help avoid the duplication issue seen in Case 2.

### Angular Version and Browser
- **Angular Version:** 2.0.0-beta.0
- **Browser:** Chrome

By addressing these issues, we can achieve a more flexible and maintainable solution for nested content in Angular components.