return curuid;
13. int myexecve (const char *path, char *const 
argv[], 
14. char *const envp[]) {
15.
16.
17.
18.
19.
int retval;
strata_syscallback_begin(SYS_execve);
if (curuid == 0) 
strata_fatal(“Naughty, naughty”);
retval = syscall(SYS_execve, path, argv, 
envp);
20.
21.
22. }
strata_syscallback_end(SYS_execve);
return retval;
23. void init_syscall() {
24.
25.
26. }
(*TI.watch_syscall)(SYS_execve, myexecve);
(*TI.watch_syscall)(SYS_setuid, mysetuid);
FILE *f;
char *args[2] = {“/bin/sh”,0};
setuid(0);
execv(“/bin/sh”, args);
return 0;
27. int main (int argc, char *argv[]) {
28.
29.
30.
31.
32.
33. }
Listing 2:  Code to prevent exec’s while root.
Two  system  calls—setuid  and  execve—must  be
monitored  to  implement  this  security  policy.  We  must
monitor setuid to keep track of the uid of the running
application. This information is stored in the state vari-
able curuid. In function myexecve(), exec’s are dis-
allowd if the program is running in root mode (i.e., the
uid of the process is 0); otherwise they are allowed.
This example demonstrates a number of advantages
of  our  system  call  interposition  API.  It  is  easy  to  see
that the code required to implement the security policy
using  the  system  call  interposition  API  is  simple  and
straightforward.  We  do  not  rely  on  special  operating
system  services,  compilers,  or libraries. The  user  does
not  have  to  learn  a  new  domain  specific  language  in
order to write security policies. Furthermore, the use of
C  as  the  security  policy  language  does  not  imply  that
untrusted  binaries  must  be  written  in  C.  The  security
policy is compiled to binary code that is processed by
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Strata along with the untrusted binary. The security pol-
icy  code  is  portable  to  most  systems  with  a  native  C
compiler and POSIX compliant system calls. Moreover,
static  source  code  analysis  cannot  effectively  prevent
execs while root due to a number of inhibiting factors—
unavailability of library source code, dynamically gen-
erated  code,  self-modifying  code,  and  the  inability  of
static analyses to precisely predict dynamic state.
The  third  security  policy  presented  implements  a
policy that controls the rate at which an application uses
a  resource.  In  this  example,  we  will  limit  the  rate  at
which  an  application  can  transmit  packets  over  a
socket. This type of policy could be useful for thwarting
denial  of  service  attacks  where  zombie  processes
attempt to flood a server  with packets. Listing 3 gives
the code for the demonstration application.
1. #include 
2. #include 
3. #include 
4. #include 
5. #include 
6. #include 
7. #include 
8. #include 
9. #include 
10. #include 
11. #define RATE 10000
12. #define TOPRATE 10000000
13. #define DISCARD_PORT 9999
14. #define PAYLOAD_SIZE 1024
15. void xmit (const char *host, int nbytes);
16. static int socket_fd = -1;
17. /* Compute the delay necessary to maintain */
18. /* the desired rate */
19. int limiting_delay (double rate, time_t tbeg,
20. time_t tend, int last_len, int len);
21. /* Callback for the so_socket call */
22. int my_so_socket (int a,int b,int c,char *d,int e) 
{
23.
24.
25.
26.
27.
28.
29. }
strata_policy_begin(SYS_so_socket);
/* Make the system call and */
/* record the file descriptor */
socket_fd = syscall(SYS_so_socket,a,b,c,d,e);
strata_policy_end(SYS_so_socket);
return socket_fd;
30. /* Callback for the write system call */
31. int my_send (int s, const void *msg, size_t len,
32. int flags) {
33.
34.
35.
36.
int result;
time_t now;
static int last_len = 0;
static time_t last_time = 0;
37.
38.
39.
40.
41.
42.
strata_policy_begin(SYS_send);
/* Only look at writes to socket_fd */
if (s == socket_fd) {
now = time(NULL);
sleep(limiting_delay(RATE,last_time, now
len,last_len));
Listing 3:  Code to limit the rate of 
transmission over a socket.
43.
44.
45.
46.
47.
48.
49. }
last_len = len;
last_time = now;
} 
result = syscall(SYS_send,s,msg,len,flags);
strata_policy_end(SYS_send);
return result;
50. void init_syscall() {
51.
(*TI.watch_syscall)(SYS_so_socket,my_so_socket);
52.
53. }
(*TI.watch_syscall)(SYS_send,my_send);
54. main(int argc, char *argv[]) {
55.
56.
57.
58.
59.
60. }
if (argc == 3)
xmit(argv[1],atoi(argv[2]));
else
fprintf(stderr,
”Usage: %s host nbytes\n”,argv[0]);
61. /* Transmit nbytes to discard port (9) on host */
62. void xmit (const char *host, int nbytes) {
63.
64.
65.
66.
67.
68.
69.
int sd, bytes_sent;
struct sockaddr_in sin;
struct sockaddr_in pin;
struct hostent *hp;
char *payload[PAYLOAD_SIZE];
time_t begin, elapsed;
double rate;
70.
/* go find out about the desired host machine 
71.
72.
73.
74.
75.
76.
77.
78.
79.
80.
81.
82.
83.
84.
85.
86.
87.
88.
89.
90.
91.
92.
93.
94.
95.
96.
97.
*/
*/
if ((hp = gethostbyname(host)) == 0) {
perror(“gethostbyname”);
exit(1);
}
/* fill in the socket structure with host info 
memset(&pin, 0, sizeof(pin));
pin.sin_family = AF_INET;
pin.sin_addr.s_addr = ((struct in_addr *)
(hp->h_addr))->s_addr;
pin.sin_port = htons(DISCARD_PORT);
/* grab an Internet domain socket */
if ((sd = socket(AF_INET,SOCK_STREAM, 0)) == -
1) {
perror(“socket”);
exit(1);
}
/* connect to PORT on HOST */
if (connect(sd, (struct sockaddr *) &pin,
sizeof(pin)) == -1) {
perror(“connect”);
exit(1);
}
begin = time(0);
bytes_sent = 0;
while(bytes_sent 