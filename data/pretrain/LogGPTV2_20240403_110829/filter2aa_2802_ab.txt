### Floating Point Representation and Special Values

**Floating Point (IEEE 754)**
- **Definition**: The IEEE 754 standard is the most common way for computer systems to represent rational numbers, such as 12.34.
- **Special Values**:
  - **Infinity (INF)**: Represented as `+INF` and `-INF`.
  - **Not-a-Number (NaN)**: Represents an undefined or unrepresentable value.

**Special Values in Mathematical Operations**
- **Undefined Operations**:
  - `1.0 / 0.0 = +INF`
  - `-1.0 / 0.0 = -INF`
  - `0.0 / 0.0 = NaN`
  - `sqrt(-1) = NaN`

**Properties of NaN**
- **Comparison**:
  - Any comparison with NaN evaluates to false:
    ```cpp
    NaN == 0   // false
    NaN > 0    // false
    ```
- **Propagation**:
  - Any mathematical operation involving NaN results in NaN:
    ```cpp
    NaN + 1 = NaN
    NaN - 1 = NaN
    NaN * 2 = NaN
    NaN / 2 = NaN
    ```

### NaN Poisoning

**Definition**
- **NaN Poisoning**: This is a technique where the properties of NaN are exploited to cause unintended effects in software.

**Example Code**
```cpp
float num = NaN;
if (num > 100.0f || num < 0.0f) {
    // This condition will never be true
}
```

**Rarity and Vulnerability**
- **Rarity**: NaN poisoning attacks are rare because it is typically difficult to introduce NaN into an equation.
- **Vulnerability**: When calling Remote Procedure Calls (RPCs), any arguments can be used, including NaN or INF.

### Movement RPC and NaN

**Movement RPC**
- **Timestamp Validation**:
  - The timestamp is validated by `UCharacterMovementComponent::IsClientTimeStampValid`:
    ```cpp
    if (TimeStamp < 0.0f || TimeStamp > MaxTime) {
        return false;
    }
    ```
  - By pure luck, NaN passes through these checks.

**DeltaTime Calculation**
- **Calculation**:
  - `float DeltaTime = ClientTimeStamp - CurrentClientTimeStamp;`
  - If `ClientTimeStamp` is NaN, `DeltaTime` will also be NaN.

**Movement Application**
- **Condition Check**:
  - The movement is applied only if `DeltaTime > 0.f`:
    ```cpp
    if (DeltaTime > 0.f) {
        MoveAutonomous(TimeStamp, DeltaTime);
    }
    ```
  - Since `DeltaTime` is NaN, the movement does not apply.

**Further Effects**
- **Server Data Poisoning**:
  - `ServerData->CurrentClientTimeStamp` becomes NaN.
  - On subsequent RPC calls, any timestamp > 0.0 will pass the validity check.
  - `DeltaTime` will still be NaN, so no movement occurs.
  - `NewTimeDiscrepancy` is poisoned, making it impossible for the server to detect time discrepancies.

### Speed Hacking via Float Poisoning

**Speed Hack**
- **Effect**:
  - By poisoning `NewTimeDiscrepancy`, the server cannot detect invalid time differences.
  - This allows for "speeding up time" on the client side, enabling faster-than-normal movement.

**Fix**
- **Patch**:
  - Fixed in UE4.25.2 with commit `012a7fa095d18d4c4b6c29e9f7bda0904377b667`.

### UNET Session Authentication

**Authentication Process**
- **Protocol**:
  - UNET uses a protocol-level process to authenticate packets over UDP.
  - Packets are validated by values within the packet, not by source IP address.

**Important Values**
- **Host ID**:
  - A 16-bit integer assigned sequentially starting at 1.
  - Not intended to be secret.
- **Session ID**:
  - A 16-bit integer (1 - 0xFFFF inclusive).
  - Randomly generated by the client.
  - Only odd-numbered IDs are valid.
- **Packet ID**:
  - Incremented with each packet sent by the client.
  - Used to detect duplicate or out-of-order packets.

**Packet ID Validation**
- **Validation Rules**:
  - If new packet ID is greater than last packet ID + 512, disconnect the session.
  - If packet ID is more than 512 behind current packet ID, discard.
  - If packet ID has been seen recently, discard.
  - Otherwise, accept and process the packet.

**Implementation Issue**
- **Actual Behavior**:
  - Old packets are accepted instead of being discarded.
  - There is a 50% chance that a packet ID will be accepted.

### Session Hijacking

**Hijacking Possibility**
- **Architectural Weakness**:
  - Considered an architectural weakness of UNET.
  - Mitigation: Encrypting UNET (reference implementation provided by Unity).

### Future Work

- **Further Research**:
  - Explore other transport modes (e.g., websockets).
  - Investigate third-party networking plugins (e.g., Photon, Mirror).
  - Analyze other game engines (e.g., GameMaker Studio, Godot).

### Acknowledgments

- **Thanks to**:
  - Epic Games and Unity Technologies security teams.
  - Igor Grinku for the background art.

**GitHub Repository**: [github.com/qwokka/defcon28](https://github.com/qwokka/defcon28)