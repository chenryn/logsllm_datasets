message-derived label set {βi}1≤i≤n for all layers, where
α1 = OPRFRSA
Upload phase. After the interaction with the agency, the
user sends α1 and the number n of layers of SV to cloud
for duplicate check.
If a match for α1 is not found, it is
considered as the initial upload of SV . Suppose the initial
uploader u has L layers (i.e., n = L). Then u performs the
dedupable encryption as speciﬁed in the secure deduplica-
tion framework over each layer. For each layer mi, u gener-
ates a layer ciphertext Ci, a masked layer key ri along with
a random string si, and a layer key ciphertext Cτi , where
τi is the layer key. Then u sends {Ci, (si, ri), Cτi}1≤i≤L to
cloud. Cloud will compute H(Ci) over each layer ciphertext
Ci for the later use of PoW protocol.
(H(m1)) and βi = OPRFRSA
k1
(H(mi)).
k2
If a match for α1 is found, it is indicated that a SVC ver-
sion with the same base layer is already uploaded by some
user. Thus, the upload request is considered as the subse-
quent upload. Suppose the subsequent uploader u(cid:48) has L(cid:48)
layers (i.e., n = L(cid:48)) and the already stored SVC version in
cloud has Lc layers. The subsequent upload proceeds as fol-
lows. If L(cid:48) ≤ Lc, u(cid:48) runs the PoW protocol over all her layers
to earn the ownership from cloud. Recall that the layer keys
{τi}1≤i≤L(cid:48) are recovered during the PoW process. Then u(cid:48)
encrypts each τi using the private key and stores them in
cloud. If L(cid:48) > Lc , for the Lc preceding layers (duplicates)
{mi}1≤i≤Lc of the SVC video, u(cid:48) needs to run the PoW pro-
tocol over each of them to earn the ownership from cloud,
and produces the ciphertexts {C(cid:48)
τi}1≤i≤Lc of the recovered
layer keys {τi}1≤i≤Lc ; for each additional layer mi, where
Lc  Lc, cloud updates Lc as L(cid:48) when
u(cid:48) passes the PoW protocol enforced over all duplicate lay-
ers. Besides, if the number of layers actually owned by u(cid:48)
is less than the submitted one, cloud would not update Lc
and only marks u(cid:48) as the owner of the duplicate layers over
which she passes the PoW protocol successfully. Therefore,
regardless of the number of layers a user submits during a
subsequent upload process, a user is marked as the owner
of a duplicate layer only when she passes the PoW protocol
over it.
67Retrieval phase. During the retrieval process, the user u
requests the number of layers she wants for a certain SVC
video owned by her to cloud. Then the corresponding layer
ciphertexts along with the layer key ciphertexts are returned
to u. After that, u can use her secret key to recover each
layer key and further recovers each layer.
which can be signiﬁcantly slowed down by enforcing several
proper rate limiting strategies [2].
Note that the proposed construction of secure deduplica-
tion over encrypted SVC videos is built under the secure
deduplication framework. And the PoW scheme is enforced
over each duplicate layer. Only the user who indeed owns
the duplicate layers can earn the ownership.
6. SECURITY ANALYSIS
In this section, we give the security analysis of our sys-
tem design in detail. We will demonstrate that our system
addresses the threats from Malicious outside adversary and
Honest-but-curious inside adversary respectively, as men-
tioned in Section 2.2, and meets the security goals.
Firstly, we consider the security against Malicious outside
adversary. The outside adversary wants to use the hash
H(V ) to gain the ownership of the video that does not be-
long to her from cloud. Note that the adversary with H(V )
can generate the message-derived tag α and label β through
the agency. Recall that our PoW approach requires each
subsequent user to compute the hash of encrypted video.
Thus, the adversary should obtain the correct ciphertext,
which means that she needs the plaintext V and the correct
encryption key τ . Note that τ is protected via F (s, V ||β).
Without V , the adversary cannot derive τ , not to mention
the correct ciphertext. Hence, the PoW will fail and cloud
will not be fooled to mark the outside adversary as a legiti-
mate duplicate owner.
Secondly, we consider the security against Honest-but-
curious inside adversary. As stated, the agency could be
semi-trusted, which faithfully produces the message-derived
tag and label via its private keys, but is interested in H(V ).
Accordingly, our system adopts the blind signature (RSA-
OPRF), so the input H(V ) is oblivious to the agency. On
the other hand, we assume cloud is also curious but does
not collude with the agency. Cloud stores the encrypted
video CV , the tag α for duplicate check, and the masked
key τ ⊕ F (s, V ||β). We note that cloud is not able to obtain
the plaintext V if the video is unpredictable. As mentioned,
τ is well protected if cloud does not know V or β. Without
τ , cloud cannot decrypt CV .
Finally, our system can eﬀectively prevent cloud from
mounting the oﬀ-line brute-force attacks over predictable
videos. As mentioned in Section 4.2, if cloud knows a rela-
tively small message space (or a dictionary) underlying an
encrypted video, it can compute all the message hashes in
this dictionary. We note that leveraging the agency can de-
fend oﬀ-line brute-force attacks. Firstly, our system resorts
to an agency to assist the generation of message-derived tag
α for duplicate check rather than directly exposing the hash
H(V ) to cloud. Without the private key of the agency, cloud
cannot produce the α for each candidate in the dictionary.
In our system, it is required to interact with the agency to
get α for each trial. Secondly, since cloud has the encrypted
video CV and the masked key τ ⊕ F (s, V ||β) (along with
a random string s), it can try to recover the corresponding
key and obtain the video plaintext. Likewise, cloud can-
not produce the message-derived label β without requesting
the agency. For each trial, cloud needs to interact with the
agency to get β and unmask the key via xoring a mask de-
rived from β and V . In a word, for predictable videos, our
system can prevent the oﬀ-line brute-force attacks in a con-
trollable fashion and turn it into online trials against cloud,
7. EXPERIMENTS
7.1 Implementations
We implement our system prototype with roughly 7,000
lines of c++ code and 10,000 lines of java code. We use
Thrift to create network services between entities with cross-
language Remote Process Call (RPC)1. We use the GMP li-
brary 2 and the Openssl library 3 to perform our cryptogra-
phy, i.e, blind signature, symmetric encryption (AES/CBC-
256), and full-domain hash function (SHA-256). We collect
videos from two benchmarks: VIRAT [16] and DASH [13].
We encode those videos into SVC videos (totally around
100GB) with the JSVM software4, and decode them with
the Open SVC decoder [6]. Meanwhile, we integrate the
Open SVC decoder library to a open source video player
MPlayer5 and re-compile it to play the SVC videos. The
implementations of each entity are described as follows:
• User client:
it is developed in c++ and can process
user’s requests and call corresponding services. In the
process of generating the message-derived tag α and
label β, the client communicates with the agency. We
also implement a basic access control mechanism in-
cluding user login and register operations.
• Agency: it is also developed in c++. Once it receives
the blinded input from client, the agency will compute
the signature and response it to the client.
• Application server:
it is implemented with java and
has three functions. Firstly, it handles the user’s re-
quest of duplicate check and replies with the result
of querying on the storage server. Secondly, it veriﬁes
the ownership of videos by processing PoW. Lastly, af-
ter getting the download request, it veriﬁes the access
permission and replies the corresponding SVC videos.
• Storage server:
it stores the encrypted SVC videos
with tags for duplicate check and ciphertext hashes for
PoW, and the user proﬁles with encrypted private keys
and video ownerships. Here, we choose DynamoDB6 as
our storage backend. Note that our application server
is running on Amazon EC2, which can eﬃciently com-
municate with DynamoDB.
SVC encryption. At a high level, each frame of a SVC
video consists of a base layer and several enhancement lay-
ers [19]. To encrypt a SVC video, one straightforward method
1Apache Thrift: http://thrift.apache.org
2The CNU Multiple Precision Arithmetic Library:
https://gmplib.org
3OpenSSL Project: http://www.openssl.org
4Joint Video Team: SVC reference software(jsvm soft-
ware), 2011.
5MPlayer: http://www.mplayerhq.hu/design7/dload.html
6Amazon Web Service: http://aws.amazon.com/
68Figure 3: Diﬀerent qualities for a given SVC video.
is to perform symmetric encryption for each layer per frame.
However, this method is not directly compatible with the un-
derlying SVC structure [20,22]. From the perspective of the
underlying structure, a SVC video bitstream is divided into
network abstract layer units (NALUs). Each layer (both
base layer and enhancement layers) has its own NALUs,
and the NALUs can be identiﬁed to the corresponding lay-
ers from the attached header information [19]. If the whole
layer is encrypted, a user client that requests a video can-
not perform timely decryption until the whole ciphertext of
one layer is downloaded, which in turn aﬀects the timely de-
coding for playback, and degrades the user experience and
service quality.
Instead of performing encryption at the layer level, we
adopt NALU-level encryption inspired from [22], i.e., the
payload of each NALU is encrypted individually and the
related header information is left in cleartext. As a result,
as long as one encrypted NALU is received, the client can
perform decryption and then decoding. The processing of
each layer can be performed in a pipelined fashion at the
user client. For the implementation, the client extracts the
layer’s NALUs in the same layer for each frame, encrypts
them one by one and uploads them to the storage backend.
Storage optimization. The NALUs within the same layer
are grouped as a layer block by the storage server in our
system. When the client wants to download the video, the
storage server needs to fast locate the corresponding layer
block and its NALUs. In the SVC standard [19], the NALUs
are encoded together by adding the start code preﬁx, i.e.,
0x00000001, between each NALU. Regarding our NALU-
based encryption, using the start code to fetch NALUs may
not meet the performance requirements for fast retrieval.
To optimize the storage, we use Key-Length-Value (KLV)
encoding standard7 to package the NALU. As a result, the
storage server can eﬃciently distinguish each NALU. Ex-
plicitly, NALUs are encoded into Key-Length-Value triplets,
where Key identiﬁes the NALU (its frame ID), Length speci-
ﬁes the NALU’s length, and Value is the NALU itself. Upon
the retrieval of the SVC videos, the storage server can read
the NALUs by the help of lengths, and combine them with
the same frame ID.
7.2 Evaluation
7.2.1 Visual Experience
Figure 3 shows the diﬀerent qualities (i.e., resolutions) for
a given SVC video after the decryption and decoding at the
user client. As shown, our security design does not aﬀect
the visual scalability of SVC. The more layers the video has,
the higher quality the video is.
7BT.1563: Data encoding protocol using key-length-value:
http://www.itu.int/rec/R-REC-BT.1563-1-201103-I/en
Figure 4: Ratio of the storage overhead to the SVC
video size, under diﬀerent numbers of layers, where
n is the number of layers of a SVC video.
7.2.2 Performance
We report our system performance on the aspects of stor-
age overhead, computation costs of diﬀerent tasks for initial
upload and time savings via deduplication. All measurement
represents the mean of 10 trials.
Storage overhead. Our design incurs little storage over-
head at cloud to support secure deduplication. As we adopt
the layer-level deduplication, storing a SVC video with n
layers, the storage overhead contains the tag α1 (32 bytes)
for duplicate check, n masked encryption key r with seed
s (64 bytes per one) for the access of subsequent users, n
owner key ciphertexts (32 bytes per one) and n hashes of the
layer ciphertexts (32 bytes per one). Recall that we utilize
only the message-derived tag of the base layer for duplicate
check, since two SVC videos can hardly have duplicate layers
if they do not have the same base layer [21].
In total, the storage overhead for a SVC video with n lay-
ers are equal to 32 + 64n + 32n + 32n = 32 + 128n bytes,
which is roughly in linear to the number of layers and inde-
pendent of the video size. The relation between the storage
overhead and the sizes of SVC videos with diﬀerent number
of layers is displayed in Figure 4. As shown, the storage
overhead is very low, compared with the video sizes under
diﬀerent number of layers. For example, given a SVC video
with 1MB size and 7 layers, the storage overhead is only 928
bytes, just 0.09% of the video size. And for a ﬁxed number of
layers, the ratio quickly diminishes and becomes negligible
as the video size gets larger.
Computation costs. We measure the time consumed by
diﬀerent computation tasks during the initial upload. Re-
call that the computation tasks consist of the following four
components: 1. generation of message-derived tag α1 via
RSA-OPRF; 2. SVC video encryption; 3. generation of the
masked key r ( message-derived label β via RSA-OPRF in-
cluded); 4. key τ encryption. We note that the time of key
encryption is negligible compared to other tasks, so we focus
on the ﬁrst three ones, which are denoted as vEnc, tGen, and
rGen, respectively. Besides, vEnc is regarded as the neces-
sary operation to safeguard the data conﬁdentiality. Thus,
the computation overhead for secure deduplication lies in
the other two components, i.e., tGen and rGen.
Figure 5 depicts the computation costs of the three com-
ponents when diﬀerent numbers of layers of a 95MB SVC
(a) 144P (b) 240P (c) 1080P 02040608010010−610−510−410−3SVC video size (MB)Storage overhead ratio  n=1n=3n=5n=769Figure 5: Time costs of diﬀerent computation tasks
for initially uploading diﬀerent numbers of layers of
a SVC video. There are totally three layers and the
size is 95MB.
Figure 7: Running time comparisons between our
system and Enc + No − Dedup setting, over diﬀerent
numbers of duplicate layers for a given 95MB SVC