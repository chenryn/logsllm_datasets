implementing function call interception. To intercept calls to
a particular function, the function is overwritten with a new
function, in effect intercepting calls to the original function.
To partially override the behavior of the original function,
a reference to the original function is stored, and the desired
behavior is delegated to it if needed. To prevent external ac-
cess to the original intercepted function, a JavaScript closure
is used to store this reference. JavaScript closures create new
variable scopes, preventing code outside the closure from
accessing references stored within the closure.
Virtual machine layering offers a signiﬁcant advantage
over other techniques for guaranteeing that all calls to a given
JavaScript function are intercepted. This is because virtual
machine layering changes the deﬁnition of the function di-
rectly, automatically supporting the interception of function
calls from code generated at runtime.
3 Overcoming Browser-based Defenses
In this section we present several novel browser-based side-
channel techniques that are effective against increasing levels
of browser defenses. More speciﬁcally, we present a series
of attacks that progressively require less JavaScript features,
culminating in CSS Prime+Probe– an attack that does not use
JavaScript at all and can work when JavaScript is completely
disabled. To the best of our knowledge, this is the ﬁrst side-
channel attack implemented solely with HTML and CSS,
without the need of JavaScript.
We evaluate the effectiveness of our techniques via website
ﬁngerprinting attacks in the Chrome browser, which aim to
recover pages currently open on the target’s machine. Be-
yond demonstrating accurate ﬁngerprinting levels against the
Chrome browser, we show that our attacks are highly portable,
and are effective across several different micro-architectures:
Intel x86, AMD Ryzen , Samsung Exynos 2100 (ARM), and
ﬁnally Apple M1.
3.1 Methodology and Experimental Setup
We follow the methodology of Shusterman et al. [69], where
we collect memorygrams, or traces of cache use over the web
site load time. We use these traces to train a deep neural net-
work model, which is then used to identify web sites based on
the corresponding memorygrams. Similarly to [69], we mea-
sure cache activity using both the cache occupancy and sweep
counting methods (described below). Both of these methods
measures the overall level of cache contention, obviating the
need to construct eviction sets. Finally, we adapt both tech-
niques to progressively more restrictive environments. The
speciﬁc assumptions on attackers’ capabilities appear in the
respective sections (Sections 3.2 to 3.4).
The Cache Occupancy Channel.
To measure the web
page’s cache activity, we follow past works [54, 69] and use
the cache occupancy channel. Speciﬁcally, we allocate an
LLC-sized buffer and measure the time to access the entire
buffer. The victim’s access to memory evicts the contents of
our buffer from the cache, introducing delays for our access.
Thus, the time to access our buffer is roughly proportional to
the number of cache lines that the victim uses.
Compared with the Prime+Probe attack, the cache occu-
pancy channel does not provide any spatial information, mean-
ing that the attacker does not learn any information about the
addresses accessed by the victim. Thus, it is less appropri-
ate for detailed cryptanalytic attacks which need to track the
victim at the resolution of a single cache set. However,the
cache occupancy attack is simpler than Prime+Probe and in
particular avoids the need to construct eviction sets. It also
requires less accurate temporal information, on the order of
milliseconds instead of nanoseconds. Thus, cache occupancy
attacks are better suited to restricted environments, such as
those considered in this section.
Sweep Counting. Sweep counting [69] is a variant of the ba-
sic cache occupancy attack, with reduced temporal resolution.
Here, rather then timing the traversal of a cache-sized buffer,
the attacker counts the number of sweeps across the buffer
than ﬁt within a time unit. While providing even less accu-
racy than cache occupancy, sweep counting remains effective
when used with low-resolution timing sources (e.g., hundreds
of milliseconds). Just like the cache occupancy attack, sweep
counting does not provide any spatial resolution.
Closed World Evaluation. Using the channels we describe
above, we collect memorygrams of visits to the Alexa Top 100
websites. We visit each site 100 times, each time collecting
a memorygram that spans 30 seconds. We then evaluate the
accuracy of our techniques in the closed-world model, where
an adversary knows the list of 100 websites and attempts to
guess which one is visited. Here, the base accuracy rate of a
random guess is 1%, with any higher accuracy indicating the
presence of side-channel leakage in the collected traces.
Evaluated Architectures. We demonstrate in the attacks
described in this section on several different architectures
made by multiple hardware vendors. For Intel, we use sev-
eral machines featuring an Intel Core i5-3470 CPU that has a
6 MiB last-level cache and 20 GiB memory. The machines are
running Windows 10 with Chrome version 78, and are con-
nected via Ethernet to a university network. Next, for AMD,
we used six machines equipped with an AMD Ryzen 9 3900X
12-Core Processor, which has a 4x16 MiB last-level cache
and 64 GiB memory. These machines were running Ubuntu
20.04 server with Chrome version 88.0, and were connected
2866    30th USENIX Security Symposium
USENIX Association
via Ethernet to a cloud provider network. For our ARM eval-
uation we used ﬁve Samsung Galaxy S21 5G mobile phones
(SM-G991B), featuring an ARM-based Exynos 2100 CPU
with an 8 MiB last-level cache and 8 GiB memory. These
phones were running Android 11 with Chrome 88 and were
connected via Wi-Fi to a University network. Finally, for our
evaluation on Apple, we used four Apple Mac Mini machines
equipped with an Apple M1 CPU with a 12 MiB last-level
cache for performance cores and 4 MiB for efﬁciency cores.
The machines were equipped with 16 GiB memory and were
running MacOS Big Sur version 11.1 together with Chrome
88.0 for arm64. These machines were connected via Ethernet
to a University network.
Machine Learning Methodology. As a classiﬁer we use a
deep neural network model, with 10-fold cross validation. See
Appendix A for details. Following previous works [12, 55],
we report both the most likely prediction of the classiﬁer
and the top 5 predictions, noting that the base accuracy for
the top 5 results is 5% for the closed-world scenarios, and
34% for the open world. The collected data volume of all the
experiments is 27 GiB consisting of 40 datasets, where each
dataset takes about one week to collect, and each classiﬁer
takes on average 30 minutes to train on a cluster of Nvidia
GTX1080 and GTX2080 GPUs.
3.2 DNS Racing
For our ﬁrst attack, DNS Racing, we assume a hypothetical
JavaScript engine that does not provide any timer, neither
through an explicit interface nor via repurposing JavaScript
features such as multithreading [42, 66].
DNS-based Time Measurement. Ogen et al. [56] observe
that browsers behave very predictably when attempting to
load a resource from a non-existent domain, waiting for ex-
actly one network round-trip before returning an error. Thus, it
is possible to create an external timer by setting the onerror
handler on an image whose URL points to a non-existent
domain. We evaluate this timer with a local DNS server and
with a remote Cloudﬂare DNS server, using both Ethernet and
Wi-Fi connections. The results, depicted in Figure 1, show
that all the timers are fairly stable, with little jitter.
For an Ethernet connection to a local DNS server, the timer
resolution is about 2 ms, which Shusterman et al. [69] report
is high enough for the basic cache occupancy channel. A local
server over Wi-Fi gives a resolution of about 9 ms, and the
Cloudﬂare server provides a resolution of roughly 70 ms, for
both Ethernet and Wi-Fi. While these resolutions are unlikely
to be suitable for the basic cache occupancy attack, Shuster-
man et al. [69] show that sweep counting works well with the
100 ms timer of the Tor Browser.
Exploiting DNS for Cache Attacks. Figure 2a shows how
to use the DNS response as a timer. As illustrated in the ﬁgure,
the attacker ﬁrst sets the src attribute of an image to a non-
existent domain, in causing the operating system to access a
Figure 1: Measured response latencies when loading an image
from a non-existent domain (local server).
remote DNS server for address resolution. The attacker then
starts the cache probe operation, creating a race between the
probe and the asynchronous report of the DNS error. When
the asynchronous error handling function is called after name
resolution fails, the attacker can determine whether the cache
probing operation was faster or slower than the network round-
trip time. Alternatively, when the DNS round-trip time is
large, the attacker can repeat the probe step, counting the
number of probes before the DNS error is reported. We note
that the attack generates a large number of DNS requests.
Such anomalous trafﬁc may be detected by intrusion detection
systems and blocked by the ﬁrewall.
3.3 String and Sock
Another commonality feature of most microarchitectural at-
tacks in browsers, including our DNS racing attack, is the
use of arrays [24, 28, 47]. Consequently, the use of arrays
is often assumed essential for performing cache attacks in
browsers and suggested countermeasures aim for hardening
arrays against side channels, while maintaining their func-
tionality [67]. To refute this assumption, in this section we
investigate a weaker attack model, in which the attacker can-
not use JavaScript arrays and similar data structures.
Exploiting Strings.
Instead of using JavaScript arrays, our
String and Sock attack uses operations on long HTML strings.
Speciﬁcally, we initialize a very long string variable covering
the entire cache. Then, to perform a cache contention mea-
surement, we use the standard JavaScript indexOf() function
to search for a short substring in this long text. We make sure
that the substring we search for does not appear within the
long string, thus ensuring that the search scans all of the long
string. Because the length of the long string is the same as
the size of the LLC, the scan effectively probes the cache
without using any JavaScript array object. To measure the
duration of this probe operation, we take advantage of an
external WebSockets [21] server controlled by the attacker.
Socket-Based Time Measurement. Figure 2b shows how
the String and Sock method operates. The attacker ﬁrst sends
a short packet to a cooperating WebSockets server. Next, the
USENIX Association
30th USENIX Security Symposium    2867
 0 0.02 0.04 0.06 0.08 0.1 0 20 40 60 80 100Probability DensityLatency (ms)Local DNS over EthernetLocal DNS over WiFiCloudflare DNS over EthernetCloudflare DNS over WiFiWeb Page
on Target
Innocent
DNS Server
Web Page
on Target
Malicious
WebSocket Server
Web Page
on Target
Malicious
DNS Server
Resolve Non-Existent
Domain
Probe Cache
NXDOMAIN Err
(a) DNS Racing
Send Short Packet
Search in
String
Send Short Packet
(b) String and Sock
Log Start
Time
Log End
Time
Resolve Domain
Search in
String
Resolve Domain
(c) CSS Prime+Probe
Log Start
Time
Log End
Time
Figure 2: Interaction diagrams for attacks.
attacker performs a string search operation which is known to
fail. As this search scans the entire string before failing, it has
the side effect of probing the entire LLC cache. Finally, the
attacker sends a second short packet to the cooperating Web-
Sockets server. The server calculates the timing difference
between the ﬁrst and second packets, arriving at an estimate
of the time taken to probe the cache.
String and Sock in Chrome. We ﬁnd that Chrome allocates
three bytes for each character. As we would like our string
to occupy the machines entire last level cache, we allocate
different string lengths for each architecture considered in
this paper. In particular, we use 2 MiB strings for our Intel
machines that feature a 6 MiB LLCs, 3 MiB strings for our
AMD machines (4x16 MiB LLCs), 1.5 MiB strings for our
Samsung phones (8 MiB LLC), and 2 MiB strings for our
Apple machines (12 MiB LLCs on performance cores). We
also note that Chrome caches results of recent searches. To
bypass this caching, for each search we generate a small fresh
sequence of emojis and search for it. With the long string
consisting only of ASCII characters, it is guaranteed not to
contain any emojis.
3.4 CSS Prime+Probe
Our ﬁnal attack, CSS Prime+Probe targets an even more
restricted setting, in which the browser does not support
JavaScript or any other scripting language, for example due
to the NoScript extension [51]. CSS Prime+Probe only uses
plain HTML and Cascading Style Sheets (CSS) to perform a
cache occupancy attack, without using JavaScript at all.
CSS Prime+Probe Overview. At a high level, CSS Prime+
Probe builds on the String-and-Sock approach, and like it
relies on string search for cache contention and an attacker-
controlled server for timing, see Figure 2c. Here, the at-
tacker ﬁrst includes in the CSS an element from an attacker-
controlled domain, forcing DNS resolution. The malicious
DNS server logs the time of the incoming DNS request. The
attacker then designs an HTML page that evokes a string
search from CSS, effectively probing the cache. This string
search is followed by a request for a CSS element that requires
DNS resolution from the malicious server. Finally, the time
difference between consecutive DNS requests corresponds
to the time it takes to perform the string search, which as
described above is a proxy for cache contention.
CSS Prime+Probe Implementation. Figure 3 shows a code
snippet implementing CSS Prime+Probe, using CSS Attribute
Selectors to perform the attack. Speciﬁcally, Line 9 deﬁnes
a div with a very long class name (two million characters).
This div contains a large number of other divs, each with its
own ID (Lines 10–12). The page also deﬁnes a style for each
of these internal divs (Lines 3–5). Each of these matches
the IDs of the internal and external div, and uses an attribute
selector that searches for a substring in the external div. If
not found, the style rule sets the background image of the
element some URL at an attacker-controlled domain.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
X 
[...]
X 
Figure 3: Simpliﬁed version of CSS-based Prime+Probe.
When rendering the page, the browser ﬁrst tries to render
the ﬁrst internal div. For that, it performs a long search in the
class name, effectively probing the cache occupancy. Having
not found the substring, it sets the background image of the
div, resulting in sending a request to the attacker’s DNS
server. The browser then proceeds to the next internal div.
As a result of rendering this page, the browser sends to the
attacker a sequence of DNS requests, whose timing depends
on the cache contention.
2868    30th USENIX Security Symposium
USENIX Association
Top-1 Accuracy (%)
AMD Ryzen 9 Apple
M1
89.7
90.5
48.2
90.6
15.7
3900X
69.1
54.9
5.4
53.9
—