new register, which contains a protection key, and en-
ables programmers to tag memory (the tag is stored in
the page table) such that it can only be accessed if the
protection key register contains a speciﬁc key. MPK can
be utilized to implement in-process isolation by tagging
the security critical data and loading the corresponding
key only when executing a benign access, and deleting it
after the access succeeded. Intel’s hardware support for
CFI, CET, provides similar memory isolation the shadow
stack as IMIX for security critical data in general. It in-
troduces a new access permission for the shadow stack,
and special instructions to access it. Unfortunately, CET
is tailored towards CFI and cannot be easily repurposed
for other mitigations.
Software-based Approaches. Software Fault Isola-
tion (SFI) [43, 51, 61] instruments every read, write, and
branch instruction to enable in-process isolation. How-
ever, this approach comes with a signiﬁcant performance
overhead due to the additional instructions.
To summarize, none of the above listed memory protec-
tion features provides mitigation-agnostic security and
performance beneﬁts at the same time.
3 Adversary Model
Throughout our work, we use the following standard
adversary model and assumptions, which are consistent
with prior work in this ﬁeld of research [21, 38, 53, 54].
• Memory corruption. We assume the presence of a
memory-corruption vulnerability, which the adver-
sary can repeatedly exploit to read and write data
according to the memory access permissions.
• Sandboxed code execution. The adversary can ex-
ecute code in an isolated environment. However,
the executed code cannot interfere with the target
application by any means other than by using the
memory corruption vulnerability. In particular, this
means that the sandboxed code cannot execute the
smov instruction with controlled arguments. Arbi-
trary code execution is prevented by hardening the
target application with techniques such as CPI [38],
CFI [1], or code randomization [16]. However,
the attacker can target those defenses as well us-
ing the memory corruption vulnerability. We as-
sume memory-corruption mitigations cannot be by-
passed unless the attacker can corrupt the mitiga-
tion’s metadata.
Figure 1: Overview of IMIX.
• Immutable code. The adversary cannot inject new
code or modify existing code, which would allow
her to execute the smov instruction with controlled
arguments. This is enforced by hardening the target
application with the W⊕X memory policy [44, 48].
4
IMIX
As we mentioned in Section 1, application developers
protect their applications ( 1 in Figure 1) using run-time
defenses 2 . Like for applications, the correct func-
tionality of defenses relies on the integrity of their code
and data. A number of existing run-time defenses, like
CPI and CFI, require to keep their data within the pro-
cess of the vulnerable application to avoid a high per-
formance overhead. Thus, the attacker may leverage
a memory-corruption vulnerability in the application to
bypass those defenses [21]. Traditionally, defense de-
velopers enforce the integrity of the (static) code using
W⊕X or execute-only memory, while the integrity of the
data relies on some form in-process memory isolation.
However, existing memory isolation techniques, namely
instrumentation and data hiding, force the defense de-
velopers to choose between high performance overheads
IMIX 3 provides an efﬁ-
and compromised security.
cient, secure, hardware-enforced in-process memory iso-
lation mechanism. Data belonging to run-time mitiga-
86    27th USENIX Security Symposium
USENIX Association
ApplicationProtected CodeProtected DataIMIXW⊕XRun-Time Defenses12Code Pointer Integrity Safe RegionIMIXProtected CodeW⊕XShadow Stack (CFI)Shadow StackIMIXProtected CodeW⊕XIMIX FrameworkKernel supportNew page permissionsHardware supportsmov instructionCompiler supportLLVM Extension3456tions is allocated in isolated pages, which are marked
with a special access permission. We introduce a new
dedicated instruction, smov 4 , to access this data, while
normal code belonging to the potentially vulnerable ap-
plication is denied access to the isolated pages.
In addition to the smov instruction and the associated
access permissions, IMIX includes a kernel extension 5
and compiler support 6 . The kernel extension enables
protected memory allocation by supporting the special
access permission. IMIX’s compiler integration enables
applications as well as run-time defenses to leverage our
memory isolation through high-level and low-level con-
structs for protected memory allocation and access. This
makes it easy to adopt IMIX without detailed knowledge
of IMIX’s implementation.
In the following, we explain the individual building
blocks of our IMIX framework in detail.
Hardware. For IMIX, we extend two of the CPU’s
main responsibilities, instruction processing and mem-
ory management. We add our smov instruction to the in-
struction set, reusing the logic of regular memory access
instructions, so that the smov instruction has the same
operand types of regular memory-accessing mov instruc-
tions, mov instructions without a memory operand do not
need to be handled. The memory access logic is modiﬁed
so that it will generate a fault if 1) an instruction other
than smov is used to access a page protected by IMIX,
or if 2) an smov instruction is used to access a normal
page. Access by normal instructions to normal memory,
and by smov instructions to protected memory, are per-
mitted. If we allowed smov to access normal memory,
attacks on metadata would be possible, e.g., the attacker
could overwrite a pointer to CPI’s metadata with an ad-
dress pointing to an attacker-controlled buffer in normal
memory. Our design ensures instructions intended to op-
erate on secure data cannot receive insecure input.
Kernel. An operating system kernel controls the user-
space execution environment and hardware devices. The
kernel manages virtual memory using page tables that
map the address of each page to the physical page frame
that contains it. Each page is described by a page table
entry, which also contains some metadata, including the
access permissions for that page. A user-space program
can request a change in its access permissions to a page
through a system call.
We extend the kernel to support an additional access per-
mission, which identiﬁes all pages protected by IMIX.
This enables protected memory allocation not only for
statically compiled binaries, but also for code generated
at run time, which has been an attractive target for recent
attacks [23].
Compiler. A compiler makes platform functionality
available as high-level constructs to developers. Its main
objective is to transform source code to executables for
a particular platform. We extend the compiler on both
ends. First, IMIX provides two high-level primitives:
one for allocating protected memory and one for access-
ing it. These memory-protection primitives can either
be used to build mitigations, or to protect sensitive data
directly.
IMIX provides optimized interfaces for both
use cases. Mitigations like CPI are implemented as an
LLVM optimization pass that works at the intermediate
representation (IR) level. IMIX provides IR primitives
to use for IR modiﬁcation. For application developers,
IMIX provides source code annotations: variables with
our annotation will be allocated in protected memory,
and all accesses will be through the smov instruction.
5
Implementation
Figure 2 provides an overview of the components of
IMIX. Developers can build programs with IMIX, using
our extended Clang compiler 1 , which supports annota-
tions for variables that should be allocated in protected
memory and new IR instructions to access the protected
memory. We also modiﬁed its back end to support smov
instructions. Programs protected by IMIX mark isolated
pages using the system call mprotect with a special
ﬂag 2 . Therefore, we extended the kernel’s existing
page-level memory protection functionality to support
this ﬂag and mark isolated pages appropriately 4 . User-
space programs access normal memory using regular in-
structions, e.g., mov, while accesses to protected mem-
ory must be performed using the instruction smov 3 .
To support IMIX, the CPU must be modiﬁed to support
the smov instruction 5 and must perform the appropri-
ate checks when accessing memory 6 . In the following
we explain each component in detail.
5.1 CPU Extension
As we mentioned in Section 4, every isolated page needs
to be marked with a special ﬂag. The CPU already has
a data structure to store information about every page,
which is called a Page Table Entry (PTE). In addition to
the physical address of every virtual page, a PTE stores
other metadata about the page, including permissions
like writable and executable. Those ﬂags are checked by
the Memory Management Unit (MMU) to prevent unin-
tended accesses. To implement our proof of concept, we
mapped the IMIX protection ﬂag to an ignored bit in the
PTE; speciﬁcally, we chose bit 52, as it is the ﬁrst bit not
reserved, and is normally ignored by the MMU [31].
To enforce hardware protection, the CPU needs to be up-
dated to enforce our access policy: non-smov can only
USENIX Association
27th USENIX Security Symposium    87
Figure 2: Overview of IMIX.
access regular pages, while smov can only access iso-
lated pages.
In other cases, the CPU must generate a
fault ( 7 in Figure 2). The implementation of this logic
requires the modiﬁcation of the x86-64 ISA, which is
challenging without source code access. Thus, we used a
hardware simulator to show the feasibility of our design.
Next, we describe how we extend x86-64 with the help of
Intel’s SAE, and then discuss the necessary modiﬁcation
to real hardware.
Simulated Hardware. We use Wind River Sim-
ics [64], a full system simulator, in order to simulate a
complete computer which supports IMIX. Yet, Simics
alone is too slow to boot the Linux kernel and test our
kernel extension. Therefore we use the complementary
Intel Simulation and Analysis Engine (SAE) add-on by
Chachmon et al. [11]. Below we will refer to the system
composed by Simics and SAE as simply SAE. SAE sup-
ports emulating an x86 system running a full operating
system with its processes, while allowing various archi-
tectural instrumentations, including the CPU, the mem-
ory, and related hardware such as the memory manage-
ment unit (MMU). This is done using extensions, called
ztools, that may be loaded and unloaded at any time dur-
ing emulation. They are implemented as shared libraries
written in C/C++.
To instrument a simulated system, ztools registers call-
backs for speciﬁc hooks either at initialization time or
dynamically. First, we make sure that our ztool is initial-
ized by registering a callback for the initialization hook.
Then, we register a callback that is executed when an
instruction is added to the CPU’s instruction cache. If
either a mov or smov instruction that accesses memory
is found, we register an instruction replacement callback.
Our registered callback handler can replace the instruc-
tion (using a provided C function), or execute the orig-
inal instruction. In this handler, we implement IMIX’s
access logic. First, we check the protection ﬂag of the
memory accessed by the instruction. To identify pro-
tected memory, we look up the related PTE by combining
the virtual address and the base address of the page table
hierarchy linked from the CR3 register. Our ztool then
checks the IMIX page ﬂag we introduced in the PTE.
If a regular instruction attempts to access regular mem-
ory, we execute the original instruction to avoid instruc-
tion cache changes. For smov instructions attempting
to access an isolated page, we ﬁrst remove the instruc-
tion from the instruction cache, and then execute our
ztool implementation of this instruction. In the remain-
ing cases, namely smov attempting to access regular
memory, and regular instructions attempting to access
isolated pages, we raise a fault.
Real Hardware. Adding IMIX support to a real CPU
would require extending the CPU’s instruction decoder
to make it aware of our smov instruction. smov re-
quires the same logic as the regular mov instruction, so
the existing implementation could be reused. Moreover,
we need to modify the MMU to perform the necessary
checks. Analogously to W⊕X, we check the ﬂag in
the page table entry (PTE) belonging to the virtual ad-
dress, and either permit or deny memory access. Modern
MMUs are divided into three major components: logic
for memory protection and segmentation, the translation
lookaside buffer (TLB) which caches virtual to physical
address mappings, and page-walk logic in case of a cache
miss [49]. Our extension only modiﬁes the ﬁrst compo-
nent to implement the access policy based on the current
CPU instruction. Other components do not need to be
modiﬁed, as we are using an otherwise ignored bit in the
88    27th USENIX Security Symposium
USENIX Association
User ProgramOS Kernelsmov i, %rcxmprotect(page,PROT_IMIX)CPUMemoryPage TablesMMUC/C++ SourceClangLLVM Extensionsmov s, %rcxPage permissionsIMIX bitProtected Memorys: 0x39404142Normal Memoryi: 0x18192021mov  s, %rcxsmov checkCoresmov1234567mov  i, %rcxPTEs. In Section 8 we discuss the feasibility of our pro-
posed modiﬁcation.
5.2 Operating System Extension
Access restrictions to the isolated pages are enforced by
the hardware, without any involvement from the kernel.
However, the isolated pages need to be marked as such
in the PTEs, which are located in kernel memory. To
support this, we modiﬁed a recent version of the Linux
kernel. Speciﬁcally, we modiﬁed the default kernel for
the Ubuntu 16.04 LTS distribution which is 4.10 at the
time of writing. Similarly to W⊕X, we use page permis-
sions to represent this information. Processes can request
the kernel to mark a page as an isolated page by using
the existing mprotect system call, which is already
used to manage the existing memory access permis-
sions: PROT_READ, PROT_WRITE, and PROT_EXEC.
For IMIX, we add a dedicated PROT_IMIX boolean
ﬂag. The implementation of mprotect sets permis-
sion bits in the PTE according to the supplied protection
modes. Note that once a page is marked as PROT_IMIX
the only way to remove this ﬂag from a page is by un-
mapping it ﬁrst which will also set the memory to zero.
5.3 Compiler Extension
To provide C/C++ support for IMIX, we modify the
LLVM compiler framework [40]. We chose LLVM over
GCC because the majority of memory-corruption de-
fenses leverage LLVM [16, 57, 66]. We modiﬁed the
most recent version of LLVM (version 5.0) and ported
our changes to LLVM 3.3 which is used by CPI [38].
Our modiﬁcation mainly concerns the intermediate rep-
resentation (IR) to provide access to the smov instruc-
tion to mitigations like CPI [38], and the x86 backend to
emit the instruction. Further, we introduced an attribute
that can be used to protect a single variable by allocat-
ing it in an isolated page, e.g., to protect a cryptographic
secret. Next, we explain each modiﬁcation in detail.
IR Extension. Run-time defenses are usually imple-
mented as LLVM optimization passes that interact with
and modify LLVM’s intermediate representation. In or-
der to allow those defenses to generate smov instruc-
tions, we extended the IR instructions set. The IR pro-
vides two memory accessors, speciﬁcally load and store,
which represent respectively a load instruction from the
memory to a temporary register, and a store instruction
from a temporary register to the memory. Hence, we
created two corresponding IMIX instructions: sload and
sstore, which defense developers can use as a drop-in re-
placement for their regular counterparts.
LLVM IR instructions are implemented as C++ classes
and therefore supports inheritance. We implemented our
IR instructions to as subclasses of their regular counter-
parts in order to reuse the existing translation functional-
ity from LLVM IR to machine code, called lowering in
LLVM parlance.
To allocate memory in the isolated pages, we imple-
mented an LLVM function that can be called from an
optimization pass, which allocates memory at page gran-
ularity using malloc and immediately sets the IMIX
permission using mprotect. A reference to the allo-
cated memory is returned so that IMIX IR instructions
can access the protected memory.