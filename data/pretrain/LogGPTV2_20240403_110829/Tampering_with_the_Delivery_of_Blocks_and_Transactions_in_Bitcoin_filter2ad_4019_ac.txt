Pr
0.63
0.29
0.67
0.55
0.38
0.36
0.55
0.40
0.31
0.29
80
40
Pr
0.40
0.46
0.47
0.92
0.80
0.46
0.86
0.51
0.37
0.45
200
40
Pr
0.97
0.61
0.94
0.88
0.82
0.83
0.96
0.76
0.60
0.63
800
40
Pr
0.90
0.83
0.85
0.96
0.90
0.96
0.98
0.92
0.77
0.83
80
80
Pr
0.35
0.29
0.24
0.34
0.36
0.68
0.22
0.63
0.35
0.20
80
200
Pr
0.29
0.34
0.18
0.18
0.12
0.25
0.16
0.19
0.21
0.20
avg. latency A, V (ms)
0.95 ± 0.3
43.1 ± 0.3
28.6 ± 0.5
91.0 ± 0.0
171.0 ± 3.0
180.0 ± 0.0
246.0 ± 4.9
303.0 ± 4.6
303.0 ± 4.6
400.0 ± 6.3
0.44 ± 0.14
0.57 ± 0.20
0.80 ± 0.14
0.89 ± 0.07
0.37 ± 0.16
0.21 ± 0.06
176.67 ± 128.3
Table 1: Pr with respect to the number of connections of A and V. Each experiment is measured over 100
consecutive blocks and across 10 diﬀerent geographical locations. Each data point of Pr corresponds to the
average of 100 measurements; where appropriate, we report the standard deviation (labelled as ‘±X’). Note
that we exclusively report the number of connections to full Bitcoin nodes.
chronize with the current main blockchain in the network. If
V, however, does not receive the header for block B, V does
not actively request block B from another peer after the 20-
minute timeout, even if V received the block inv message
from additional peers during the 20-minute timeout.
In order to continuously deny the delivery of block infor-
mation from V, A therefore needs to make sure that V does
not receive block headers from the network. This can be
achieved when the following two conditions are met.
First relayer for all blocks: A must be the ﬁrst node to
forward all block inv messages to V. For example,
when A starts to deny the delivery of block B from V,
and wants to deny the delivery of all blocks up to and
including block B + 5, A needs to be the ﬁrst node
relaying all block inv messages between and including
B and B + 5. Note that after a 20-minute timeout,
A is required to resend the corresponding block inv
message before other peers. Other nodes are unlikely
to advertise older blocks, and therefore A can reliably
extend the time a block is denied.
Connection depletion: In the mean time, V must not re-
ceive a new version message from another peer. This
can be ensured if A can keep all remaining open con-
nection slots of V occupied, such that V does not re-
ceive any version message from other peers. Notice
that existing connections do not exchange version mes-
sages and, do not impact this condition.
We exemplify the process of denying the delivery of 2 con-
secutive blocks in Figure 5. Here, we assume that V success-
fully receives B’s header and appends block B to its local
chain. Once block B + 1 is found, A prevents it from being
delivered to V . Here, a 20-minute timeout for A starts for
block B + 1. Once block B + 2 is found, A also prevents
the delivery of this block to V. Here again, a 20-minute
timeout for A starts for block B + 2. When the timeout
for block B + 1 expires, V does not actively request a block,
because it has not learned about any new headers. V would
only receive the headers if V establishes a new connection
to a peer with an up-to-date blockchain, or receives B + 1’s
inv message from another peer after the timeout. A now,
however, can re-advertise block B + 1 and thus re-activate
another 20-minute timeout for block B + 1.
y
t
i
l
i
b
a
b
o
r
P
1.0
0.8
0.6
0.4
0.2
0.0
0
P x
r
Expected success based on Pr=0.83
5
10
15
20
25
30
Number of consecutively denied blocks
Figure 6: P x
r w.r.t. the number x of consecutively
denied blocks. Here, A maintains 80 and V between
11 and 25 connections to full Bitcoin nodes.
Now, assume that when block B + 3 is found, A is not
the ﬁrst node to relay B + 3’s inv message. V consequently
requests getheaders and getdata from the advertising peer.
Because blocks B +1 and B +2, however, are currently being
awaited from A, V only receives block B + 3. In order to
validate block B + 3 in the main blockchain, V requires the
intermediate blocks B + 1 and B + 2. When the timeout
for B + 2 expires, V disconnects from A and requests block
B + 2 immediately from another peer. Still, V is not able to
connect B + 2 and B + 3 to the blockchain, because B + 1
is missing. Finally, when the timeout for B + 1 expires,
V requests block B + 1 from another peer and is able to
synchronize with the main blockchain.
Let P x
r denote the probability that A can successfully
prevent the delivery of x consecutive blocks. Clearly, the
delivery of diﬀerent blocks is an independent process, then
P x
r = (Pr)x, where Pr denotes the average probability of
denying the delivery of a single Bitcoin block. We conﬁrm
this analysis by means of experiments in the following para-
graphs.
698Miner
block B
found
block B+1
found
block B+2
found
block B+3
found
Node A
headers: B
mainchain: B
headers: B+1
mainchain: B+1
headers: B+2
mainchain: B+2
headers: B+3
mainchain: B+3
Action:
does not attack
denies
block B+1 from V
denies
block B+2 from V
fails at denying
block B+3 from V
Node V
headers: B
mainchain: B
headers: B
mainchain: B
headers: B
mainchain: B
headers: B+3
mainchain: B
headers: B+3
mainchain: B+3
Action:
synchronizes correctly
does not learn about
B+1 header or block
does not learn about 
B+2 header or block
learns about block B+1,
header B+3, B+2 and B+1
learns about
block B+1
time
Timeouts of V
for block B+1
Timeouts of V
for block B+2
20-minute timeout for B+1
advertising inv
V does not
request a
block
20-minute timeout for B+1 V requests block B+1
from another peer
advertising inv
20-minute timeout for B+2 V requests block B+2
from another peer
advertising inv
Figure 5: Example process of denying the delivery of multiple blocks. Here, A succeeds to deny the delivery
of 2 consecutive blocks.
Experimental Validation
In what follows, we assess the probability P x
r that an ad-
versary A can prevent the delivery of at least x blocks from
V.
Our experimental setup is designed as follows. The ad-
versary, in addition to trying to be the ﬁrst to advertise
consecutive blocks, makes sure that V does not establish
new connections by ﬁlling all remaining connection slots of
V. In our setup, we attempt to continuously prevent the de-
livery of blocks to 5 diﬀerent nodes (emulating 5 diﬀerent V)
running the default Bitcoin clients9. During our study, the
nodes’ connections to full Bitcoin nodes10 varied over time
(cf. Figure 7). On the other hand, the adversary maintained
at all times a ﬁxed number of 80 connections to full Bitcoin
clients. Here, all of the machines emulating V were located
in Europe, with a latency below 200ms to A.
In our experiments, the adversary performed a total of
2849 block denying attempts on all 5 nodes; A was successful
in denying the delivery of a total of 2364 blocks—resulting
in Pr = 0.83. In Figure 6, we measure P x
r , the probability to
prevent the delivery of at least x blocks, as follows. We count
the number of consecutive blocks, x, that are only requested
(i.e., using a getheaders and getdata) from the adversary.
Here, if we do not receive a getheaders and getdata message
within 30 seconds for a given advertised block or any inter-
mediate re-advertised block, we assume that the victim has
requested that block from elsewhere, compute the resulting
x, and restart the process. Our results (cf. Figure 6) con-
ﬁrm the analysis in Section 4, indeed show that P x
r ≈ (Pr)x
and indicate that the adversary can succeed in preventing
the delivery of consecutive blocks with considerable proba-
bility. For instance, the probability to prevent the delivery
of 5 consecutive blocks is approximately 0.4.
In Figure 7, we evaluate the number of consecutively de-
nied blocks with respect to the number of connections of V.
9These nodes were synchronized to the blockchain for almost
72 hours and had 11 to 25 connections to full Bitcoin nodes.
10Recall that lightweight Bitcoin clients do not forward
blocks or transactions and are therefore not relevant for our
study.
V
f
o
s
n
o
i
t
c
e
n
n
o
c
e
d
o
n
l
l
u
F
26
24
22
20
18
16
14
12
10
Regression line
0
5
10
15
20
25
30
Consecutively denied blocks
Figure 7: Number of consecutively denied blocks
w.r.t. the connections of V. Here, A maintains 80
full Bitcoin node connections.
Our results conﬁrm our previous observation (cf. Table 1)
that the fewer connections V maintains, the more blocks can
be denied. Recall that the more connections a node has (to
full nodes), the earlier the node can receive information from
the network.
5.
IMPLICATIONS
In the previous sections, we thoroughly investigated how
Bitcoin’s request management system can be abused by a
malicious adversary in order to delay information delivery
in the Bitcoin network.
In what follows, we evaluate the
impact of our ﬁndings on the security of the Bitcoin system.
5.1 Increasing Mining Advantage
In [15], Eyal and Sirer show that a mining pool which con-
trols more than 33% of the computing power in the network
can considerably increase its mining advantage (by more
than 10%) by withholding its mined blocks until new blocks
are found in the network. We show in what follows that the
69933% bound of Eyal and Sirer can be even further reduced
by leveraging our ﬁndings.
[P(1-P)+(1-P)](1-α)
α
(1-α)
(1-α)(1- )
1-α
0
α
1
α
2
1-α
1-α
α
1-α
3
α
1-α
4
...
α
1-α
Figure 8: Selﬁsh mining state machine adapted from
Eyal and Sirer [15].
Eyal and Sirer’s Selﬁsh Mining.
In the selﬁsh mining game (adapted from [15]), a selﬁsh
miner does not directly announce its newly mined blocks in