Easy
Easy
Easy
Easy
Easy
Easy
Easy
Hard 
 O(n log 
★Premium
O(n~2)
(u)o
(u)o
(u)o
(u)o
n)
(u)o
(u)o
O(n)
(u)o
(u)o
(u)o
O(n)
(u)o
O(n)
(u)o
(u)o
(u)o
O(n)
(u)o
(u)o
O(n)
(Zvu)o 
(Zvu)o 
0(1)
0(1)
0(1)
 O(n)
0(1)
0(1)
0(1)
0(1)
0(1)
0(1)
0(1)
 O(n)
0(1)
0(1)
(u)o
 O(n)
0(1)
0(1)
0(1)
0(1)
---
## Page 20
000000000000000000000000000000000000000000000
---
## Page 21
func updateMatrix_BFS(matrix [][]int) [][]int {
·BFS 模板。(只是一个例子，不对应任何题)
func findcombinationsum2(nums []int, target, index int, c []int, res *[][]int)
func combinationsum2(candidates []int, target int) [][]int {
for i := index; i index & nums[i]== nums[i-1]{ // 这里是去重的关键逻辑
return
*res = append(*res, b)
copy(b，c)
b := make([]int, len(c))
return [][]int{}
if target >= nums[i] {
C = c[:len(c)-1]
findcombinationsum2(nums, target-nums[i], i+l, C, res)
C = append(c, nums[i]) 
 continue
2019L
第79题，
第212题，第980题。
Help Center|Jobs
|Bug Bounty |
Terms | Privacy Policy
---
## Page 22
17. Letter Combinations of a 
Title
[y] 0 {
return res
for i, row := range res {
for len(queue) > 0 {
if len(matrix) == 0 Il len(matrix[O]) == 0 {
level := 1 
for i,
res := make([][]int, len(matrix))
for j, cell := range row {
size := len(queue)
res[i] = make([]int, len(matrix[0]))
 return res 
level++
for size > O { 
for j，
if cell == -1 { 
size -=
if matrix[i][j] == 0 {
for
i,j:= node[O],
queue =
node :=
res[i][j] = 0
if × = len(matrix) Il y = len(matrix[0]) Il res[x]
X := i + direction[0]
queue = append(queue, []int{i, j}) 
res[i][j] = -1 
res[x][y] = level
y := j + direction[1]
continue
_ := range matrix {
_ := range res[i] {
：queue[1:]
:queue[0]
 node[1]
Solution
[][]int{{-1,0}，{1，0}，{0，1}，{0，-1}} {
Go
Difficulty
Medium
Time
Space
0(1)
收藏
---
## Page 23
980. Unique Paths Ill 
526. Beautiful Arrangement 
401. Binary Watch 
357. Count Numbers with
 216. Combination Sum Ill 
 212. Word Search Il 
structure design 
211. Add and Search Word - Data
126. Word Ladder Il 
93. Restore IP Addresses 
90. Subsets Il 
89. Gray Codes
79. Word Search
78. Subsets 
77. Combinations
 60. Permutation Sequence 
52. N-Queens Il 
 51. N-Queens
 47. Permutations Il 
842. Split Array into Fibonacci
306. Additive Number
46. Permutations 
40. Combination Sum Il 
39. Combination Sum
 37. Sudoku Solver 
22. Generate Parentheses
 Phone Number
Sequence  
784. Letter Case Permutation
Unique Digits
131. Palindrome Partitioning 
G
G
Go
Go
G
5
Go
5
15
G
Go
15
Go
G
5
G
5
G
G
Go
15
G
Go
Medium
Medium 
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium
Medium 
Hard 
Easy
Easy
Hard
Hard
Hard
Hard
Hard 
(u 吕ol u)o
 O(n log n) 
O(n log n) 
O(n log n) 
O(n^2)
O(n~2)
 O(log n)
(u Bol)0
O(n~2)
O(n~2)
O(n~2)
O(n~2)
O(n~2)
O(n~2) 
(u)o 
O(n~2)
O(n~2) 
O(n~2)
(u)o
0(1)
0(1）
O(n)
O(n)
(u)o
(u)o
(u)o
(u)o
(u)o
O(n~2)
O(n~2)
O(n^2)
O(n~2)
O(n^2)
0(1)
0(1)
0(1)
0(1)
0(1)
0(1)
(u)o 
(u)o
O(n)
O(n)
O(n)
0(1)
O(n)
(u)o
0(1)
(u)o
(u)o
O(n)
(u)o
(u)o
O(n)
0(1)
3
---
## Page 24
Binary Search
Binary Indexed Tree
·二分搜索的经典写法。需要注意的三点：
 996. Number of Squareful Arrays 
func binarySearchMatrix(nums []int, target int) int {
1079. Letter Tile Possibilities 
for low  target {
if nums[mid] == target {
mid := low + (high-low)>>1
2. mid 的取值， mid := low + (high-low)>>1 
1．循环退出条件，注意是 low target {
mid := low + ((high - low) >> 1)
if nums[mid] > target {
mid := low + ((high - low) >> 1)
7
4
3
2.1
1．查找第一个与 target 相等的元素，时间复杂度 O(logn)
if （mid == len(nums)-1） ll（nums[mid+1]!= target）{// 找到最后—个与
 else if nums[mid] < target {
 high = mid - 1 
 high = mid - 1 
low = mid + 1 
high = mid - 1
if（mid==O）ll（nums [mid-1］！= target）{// 找到第—个与 target 相等的元素
else {
low = mid + 1
else if nums[mid] < target {
low = mid + 1
查找最后一个小于等于 target 的元素，时间复杂度 O(logn)
查找第一个大于等于 target 的元素，时间复杂度 O(logn)
查找最后一个与 target 相等的元素，时间复杂度 O(logn)
 return mid
return mid 
---
## Page 26
·在基本有序的数组中用二分搜索。经典解法可以解，变种写法也可以写，常见的题型，在山峰数组
target 的元素
func searchLastLessElement(nums []int, target int) int 
//二分查找最后一个小于等于 target 的元素，时间复杂度 o(logn)
素
func searchFirstGreaterElement(nums []int, target int) int {
//二分查找第一个大于等于 target 的元素，时间复杂度o（logn）
第852题