### How to Use the API
Instead of assuming its usage, it is essential to understand how to use the API correctly. API users can cross-check the usage by examining how other caller functions utilize the API. Additionally, reviewing related patches (e.g., through `git log`) can provide insights into common mistakes and best practices.

### Applications of Pairing Analysis
Pairing analysis can be applied in various areas, such as helping API users verify function usage and aiding bug detectors in identifying different types of bugs. For example, by identifying lock/unlock function pairs, one can infer which functions can execute concurrently, thereby detecting potential race conditions. These function pairs can also be used to detect temporal bugs based on different temporal rules.

### 9. Related Work

#### Function Pairs Detection
Several previous works have attempted to identify function pairs in large programs. Mao et al. [28] focused on identifying refcount-related bugs by comparing inconsistent paths. They collected 800 pairs of refcount-related APIs using simple string-matching of function names, such as `*_inc` and `*_dec`. WYSIWIB [22] analyzed data dependencies of pointers to collect 304 pairs of allocation and deallocation functions. Compared to these works, HERO is not limited to a specific type of pair and uses delta-based pairing for greater precision. PF-Miner [23] and PairMiner [24], introduced in §7.2, employ data mining and string matching. To the best of our knowledge, PairMiner represents the state-of-the-art in automatically detecting various types of function pairs. However, since PF-Miner and PairMiner use simple mining techniques, they may suffer from precision issues and cannot support custom functions. Bai et al. [3] employed dynamic tracing to collect 81 function pairs in four Linux device drivers, which is not representative of the entire kernel.

#### Error-Handling Analysis
Many previous works have analyzed error-handling code to detect bugs in software like OpenSSL and OS kernels. Rubio-González et al. [45] and EIO [18] detected error-propagation bugs in file systems. APEx [20], ErrDoc [53], and EPEx [19] reasoned about error-code propagation in open-source SSL implementations, either automatically or via user definitions. Saha et al. [47] proposed an automatic approach to transform the coding style and structure of error-handling code to a goto-based standardized strategy. Tang [50] proposed a tool to detect error code misuses in system programs. EESI [13] is a static analysis tool that infers C program function-error specifications through return-code idiom, identifying inadequate and inverted error checks and incomplete error handling. These works focus on reasoning about the "handling" itself—whether an error code is returned, passed, or handled in callers—rather than the cleanup operations before the handling.

EeCatch [42] differs from previous works by detecting exaggerated (or excessive) error handling, which often causes crashes. EeCatch employs spatial and temporal cross-checking to identify irregular and over-severe error handling. HERO, on the other hand, aims to detect ordering issues in error-handling code, rather than the incorrect severity level of error handling. DiEH can cause not only crashes but also memory corruption. HERO's key technique is precise function pairing, while EeCatch features spatial and temporal cross-checking. Thummalapenta et al. [52] proposed a mining algorithm to explore the structure of error-handling code by mining sequence association rules and rule violations of function calls in normal and error paths. Unlike this work, HERO can precisely identify function pairs based on delta analysis, handling custom functions.

#### Bug Detection in Error Paths
Research has also focused on finding bugs in cleanup operations in error paths. Saha et al. [48] proposed Hector, which identifies missing resource-release functions in systems software. Hector assumes pointer-returning functions are allocation functions and the last pointer-usage function is a deallocation function, identifying missing-release bugs by comparing inconsistencies in different error paths. Mao et al. [28] implemented RID, which identifies refcount-related bugs by analyzing inconsistent paths, often in error paths. Lawall et al. [21] proposed a tool to detect error-handling bugs in the Linux kernel and OpenSSL, related to API usage protocols. GUEB [16] and CRED [58] are static-analysis tools that identify use-after-free bugs. These works focus on specific types of error-handling bugs, such as missing release. To the best of our knowledge, none of these tools can detect incorrect-order and redundant DiEH bugs, which require precise and comprehensive identification of function pairs.

#### Bug Detection with Rules Inference
Some previous works identified bugs through rules inference based on code semantics. APISan [59] detects API misuses by analyzing rich symbolic contexts. Acharya et al. [1] proposed a mining technique to check partial-order rules of API usages and detect related rule violations. Gruska et al. [17] presented a tool to mine API usage rules across different projects. Similar works [5, 12, 26, 54, 57] detect different types of bugs through a mining approach to generate rules and detect violations. Unlike these works, HERO does not rely on unknown-rule mining to detect bugs, thus supporting custom functions; instead, it leverages the unique structures of error-handling code.

### 10. Conclusion
Large programs, such as OS kernels, often have complex error-handling and code-cleanup mechanisms, which are prone to bugs due to being less tested and difficult to implement. Prior research has focused mainly on the "handling" part rather than the cleanup mechanisms. This paper introduces DiEH bugs, a class of error-handling bugs caused by improper cleanup operations, including incorrect-order, redundant, and inadequate cleanups. Through a study, we show that DiEH is prevalent and causes critical security problems such as memory corruption and privilege escalation. We then present HERO, a new detection system. At its core is a precise function pairing technique that leverages the unique error-handling structures in low-level languages. We evaluate HERO on two OS kernels and the OpenSSL library. The results show that HERO can precisely identify a large number of function pairs, including custom ones, and detect 239 critical DiEH bugs, most of which were confirmed by maintainers. HERO is generic, and its precise pairing analysis can benefit other research areas such as race detection and temporal-rule inferences.

### 11. Acknowledgment
We thank our shepherd, Mathias Payer, and the anonymous reviewers for their helpful suggestions and comments. We are grateful to Linux maintainers for providing prompt feedback on patching the Linux kernel. The authors also thank Peng Le for helping implement function pairing. This research was supported in part by the NSF awards CNS-1815621 and CNS-1931208. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF.

### References
[References listed here as in the original text]

### Appendix
| Program | File | Line# | Impact | Category |
|---------|------|-------|--------|----------|
| OpenSSL | crypto/x509/v3_crld.c | 85 | ML | D3 |
| FreeBSD | crypto/cms/cms_sd.c | 326 | ML | D3 |
| FreeBSD | crypto/store/loader_file.c | 406 | DF | D2 |
| FreeBSD | lib/libkiconv/kiconv_sysctl.c | 50 | ML | D3 |
| FreeBSD | lib/libkiconv/kiconv_sysctl.c | 75 | ML | D3 |

This revised version of the text is more structured, coherent, and professional, making it easier to read and understand.