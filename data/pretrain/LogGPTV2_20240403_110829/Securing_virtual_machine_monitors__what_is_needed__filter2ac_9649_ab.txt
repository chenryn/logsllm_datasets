If this log is not carefully protected, an adversary can recover sensitive data (e.g. cryptographic
keys, medical documents) from the log, even if the data has already been removed from the system
[GPCR04, GR05]. Furthermore, these logs could be subpoenaed by a court of law at a later time.
This is a serious concern for many companies, some of whom even go so far as to destroy old logs
of e-mail between employees.
4 VM based Security Projects
During the past several years, researchers have developed a number of security systems that rely on
the properties of virtual machines to provide a higher level of security than would be possible on
a normal physical machine. In this section, we describe some recent advances in virtual machine-
based security systems.
4.1 VM-Based Intrusion Detection Systems
Three capabilities of virtual machines make them particularly attractive for building an intrusion
detection system. The ﬁrst capability is isolation. Software running in a virtual machine cannot
access or modify the software running in the VMM or in a diﬀerent VM. Isolation ensures that
even if an intruder has completely subverted a guest virtual machine, he or she still cannot tamper
with the IDS.
The second capability is inspection. In a virtual machine system, guest VMs run on emulated
hardware and the virtual machine monitor has access to the entire state of each guest VM. Being
able to directly inspect the virtual machine makes it particularly diﬃcult to evade a VM-based IDS
because there is no state in the VM that the IDS cannot see.
The third capability is interposition. The presence of privileged instructions forces the VMM
to trap and emulate these instructions, which incur extra overhead that would not exist in a con-
ventional system. However, these privileged instructions also provide hooks to allow a VM-based
IDS to record or modify privileged instruction parameters and other virtual machine state [RG05,
WCSG05, Whi].
345
Figure 3: Architecture of Livewire
4.1.1 Livewire
Livewire [GR03] takes advantage of virtual machine technology to enforce security policies on
guest virtual machines using the VMM model. As shown in Figure 3, Livewire consists of two
major components: the OS Interface Library, and the Policy Engine.
The OS Interface Library provides an OS-level view of the target virtual machine by interpret-
ing the hardware state on the VMM. This component is important because VMMs manage state
strictly at the hardware level (i.e. the VMM can see disk blocks, but not ﬁles). An IDS, however,
prefers to analyze actions and events using OS-level semantics such as ﬁles, sockets, and processes.
The implementation of the OS Interface Library requires knowledge of the guest OS in order to
properly interpret the VM’s machine state. Diﬀerent guest OSes will need diﬀerent OS Interface
Libraries. For example, the VFS [BC00] super block structure in the Linux 2.4 kernel is diﬀerent
from that of the Linux 2.6 kernel. The OS Interface Library must match the guest OS semantics
in order for the state interpretation to be correct. The diversity of OS kernels makes developing a
common OS Interface Library a formidable challenge. This is one major limitation of the Livewire
intrusion detection system.
The policy engine is the heart of Livewire. This component obtains events from the VMM in-
terface and the OS Interface Library, and decides whether or not the system has been compromised.
If Livewire believes that the system has been compromised, the policy engine is also responsible
for taking appropriate action, such as notifying an administrator or blocking the machine from
accessing the disk or network. Livewire can run multiple policy modules that implement speciﬁc
heuristics in order to detect a wide variety of intrusions.
4.1.2 Siren
Siren [BZP05] is another VM-based intrusion detection system. Siren is designed to detect mali-
cious software operating within a guest virtual machine that attempts to send out information over
the network. Siren operates on the principle that workstation machines rarely need to communicate
346
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:9)(cid:10)(cid:3)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:13)(cid:14)(cid:15)(cid:15)(cid:4)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:1)(cid:6)(cid:7)(cid:13)(cid:16)(cid:17)(cid:5)(cid:3)(cid:10)(cid:18)(cid:9)(cid:19)(cid:3)(cid:13)(cid:20)(cid:16)(cid:21)(cid:10)(cid:9)(cid:10)(cid:22)(cid:23)(cid:24)(cid:25)(cid:16)(cid:19)(cid:22)(cid:13)(cid:26)(cid:17)(cid:27)(cid:16)(cid:17)(cid:3)(cid:20)(cid:16)(cid:28)(cid:3)(cid:12)(cid:16)(cid:10)(cid:3)(cid:29)(cid:16)(cid:10)(cid:5)(cid:2)(cid:9)(cid:25)(cid:13)(cid:30)(cid:9)(cid:19)(cid:31)(cid:16)(cid:17)(cid:3)(cid:13)(cid:30)(cid:24)(cid:17)(cid:16)(cid:5)(cid:24)(cid:10)(cid:11)(cid:2)(cid:12)(cid:12)(cid:13)(cid:3)(cid:8)(cid:11)(cid:13)(cid:14)(cid:14)(cid:15)(cid:13)(cid:16)(cid:17)(cid:9)(cid:18)(cid:9)(cid:19)(cid:7)(cid:20)(cid:21)(cid:2)(cid:3)(cid:16)(cid:7)over the network in the absence of human input, with the exception of traﬃc from a few applica-
tions like automated update programs. Siren takes advantage of both isolation and interposition to
correlate human input from the mouse and keyboard with resulting network traﬃc. If it sees traﬃc
when no human input has occurred for over ﬁve minutes, it ﬂags the traﬃc as potentially malicious
(unless the traﬃc is deemed to be safe according a white list of trusted programs such as Windows
Update).
A simple counter-measure to basic human input correlation would be for malware to wait for
human input before sending out data over the network. In fact, many spyware programs operate as
browser add-ons and only communicate with their home servers while the user is actively browsing
the web. To deal with this type of malware, Siren also injects streams of specially crafted human
input that are designed to mimic normal user activity. Siren determines ahead of time the exact
sequence of network messages it expects to see as a result of the crafted human input. Finally, it
compares the actual network traﬃc to the expected network traﬃc, ﬂagging unexpected requests
that are likely to have come from malware programs.
A major factor in the success of Siren’s input injection technique is how closely it resembles
normal user activity. A very clever malicious program that knows about Siren could use complex
natural language and behavioral analysis techniques to identify real human input, and thus deter-
mine when it is safe to send out network traﬃc. Therefore if such malware is part of the threat
model, it is critical to ensure that the input generation algorithm utilizes equally complex tech-
niques to create input that is indistinguishable from real user activity to another program. This
leads to an “arms race” situation, as commonly occurs with many intrusion detection techniques.
Siren puts no theoretical restriction on whether a malware program will be able to escape detection.
It does, however place a practical requirement on the amount of sophistication required to avoid
detection. Automatically scrutinizing all input to identify operations that must have been executed
by the user is no small task, and signiﬁcantly raises the bar for today’s malware.
To evaluate Siren, the authors created a sequence of web requests and manually injected them
into a guest virtual machine. This was done on a clean Windows XP installation to determine the set
of expected network traﬃc, and then repeated on machines with various types of spyware installed
on them. For the sake of comparison, the authors also tested the spyware programs against a
traditional behavioral analysis tool called Web Tap [BP04] that looks solely at network requests to
pick out spyware. Without injecting human input, Siren was able to detect three of the ten spyware
programs tested. These three programs were also detected by Web Tap. The other seven programs,
however, required injection of human input to identify because they only sent traﬃc while the user
was actively browsing. Immediately after injecting the crafted human input, however, all of the
remaining spyware programs made requests to their home servers. These requests did not show
up in the original network trace from the clean machine and were correctly ﬂagged by Siren as
347
coming from malicious software.
Siren’s approach to intrusion detection takes full advantage of the virtual machine monitor’s
interposition capability. It injects human input into the guest virtual machine in an attempt to trick
malware into sending data out over the network. Siren’s use of deception for intrusion detection
is quite unique, and it could not be done without the help of virtual machine technology. The
isolation between the VMM and the guest VM ensures that a compromised guest will be unable to
recognize that Siren is running and also unable to gain any information about Siren’s conﬁguration
to identify the false human input. The Siren technique also raises an interesting question: will it
be more diﬃcult in the future to generate realistic human input or to write a program that is able to
identify real human input? The authors hope that the latter is the case and that the use of deception
will help to identify previously hard-to-detect malicious software.
4.2 VM-Based Intrusion Prevention Systems
It is not only helpful to detect attacks as they happen, but also to harden systems ahead of time so
that they are more resilient to intrusions. Intrusion prevention systems do just this. With the aid of
virtual machine technology, the systems described in this section enforce policies that help protect
critical resources so that they are safe from potential attackers.
4.2.1 SVFS
SVFS is a secure virtual ﬁle system that is designed to protect sensitive ﬁles, even in the event of a
compromised operating system [ZBP05b]. When a hacker successfully gains control of a machine,
he or she often tries to steal conﬁdential information (e.g. documents, passwords), taint system
logs to avoid detection, and modify critical system ﬁles to create a backdoor and retain persistent
access to the machine. Although traditional ﬁle protection mechanisms attempt to block malicious
ﬁle access, they can usually be bypassed or disabled once a system has been compromised [ZQ,
A N, Bea03, bre]. In contrast, SVFS uses virtual machine technology to moderate access at the
VMM layer, better protecting sensitive ﬁles from malicious access by a compromised OS.
In the SVFS architecture, which can be seen in Figure 4, multiple virtual machines run on a
single physical machine. One of these virtual machines, which is referred to as the Data Virtual
Machine (DVM), mediates ﬁle access requests from all of the other VMs. The user’s standard
applications reside on the other guest virtual machine(s). All access to sensitive ﬁles by these
applications must ﬁrst be approved by the DVM. The DVM moderates legitimate access transpar-
ently, only returning access denied if the virtual machine does not have permission to access a
ﬁle.
The SVFS ﬁle system is composed of two parts: the SVFS server, which runs in the DVM, and
348
Figure 4: Architecture of SVFS
SVFS clients, which run in each guest VM. The SVFS clients operate inside of the kernel of each
guest virtual machine. Each client registers with the SVFS server during boot time and forwards
access requests to the SVFS server by hooking calls at the virtual ﬁle system layer [BC00]. Guest
application can then access sensitive ﬁles using standard system calls, such as open, read and
write. When the system calls get passed down to the kernel, the SVFS client determines if the
ﬁle resides within SVFS and forwards the request to the SVFS server if necessary. Requests from
a SVFS client to the SVFS server are made using virtual remote procedure calls (VRPCs). VRPCs
are much faster than normal RPCs because they do not go through a network stack. When the
client receives the result, it returns the data transparently to the application that made the system
call, giving the illusion that the request was processed locally.
The SVFS server runs inside of the data virtual machine and uses the Ext3 ﬁlesystem [TT02] to
store ﬁles for the guest virtual machines. It is responsible for serving access requests and checking
security policies. Unlike traditional user-based access control systems, the SVFS security policies
specify which guest virtual machines are allowed to access which ﬁles. SVFS policies allow an
administrator to make critical operating system ﬁles read-only. Guest operating systems will still be
able to boot, but hackers who compromise a guest OS will not be able to install a persistent root kit
by modifying system ﬁles. It is still possible to update the OS by running a trusted administrative
guest VM. The idea behind an administrative VM is that it will only be used to modify critical
system ﬁles, and not to perform activities that may lead to a security breach such as reading e-
mail, browsing the web, and downloading software.
Because sensitive ﬁles reside in DVM, guest virtual machines that wish to access them must
use inter-VM communication. Because ﬁle system performance is critical for many applications,
inter-VM communication must be fast. Although TCP connections are an option for inter-VM
349
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:7)(cid:12)(cid:5)(cid:9)(cid:13)(cid:1)(cid:14)(cid:13)(cid:1)(cid:13)(cid:4)(cid:6)(cid:5)(cid:11)(cid:15)(cid:16)(cid:9)(cid:1)(cid:15)(cid:17)(cid:18)(cid:4)(cid:3)(cid:7)(cid:9)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:10)(cid:11)(cid:7)(cid:12)(cid:5)(cid:9)(cid:19)(cid:20)(cid:20)(cid:16)(cid:4)(cid:17)(cid:15)(cid:5)(cid:4)(cid:2)(cid:3)(cid:12)(cid:21)(cid:7)(cid:5)(cid:22)(cid:2)(cid:6)(cid:23)(cid:24)(cid:25)(cid:12)(cid:5)(cid:7)(cid:26)(cid:13)(cid:4)(cid:6)(cid:5)(cid:11)(cid:15)(cid:16)(cid:9)(cid:27)(cid:4)(cid:16)(cid:7)(cid:24)(cid:25)(cid:12)(cid:5)(cid:7)(cid:26)(cid:24)(cid:13)(cid:27)(cid:24)(cid:9)(cid:28)(cid:16)(cid:4)(cid:7)(cid:3)(cid:5)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:3)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:13)(cid:14)(cid:6)(cid:15)(cid:3)(cid:8)(cid:11)(cid:3)(cid:9)(cid:29)(cid:6)(cid:11)(cid:12)(cid:5)(cid:7)(cid:8)(cid:9)(cid:28)(cid:2)(cid:26)(cid:20)(cid:11)(cid:5)(cid:4)(cid:3)(cid:30)(cid:9)(cid:31)(cid:15)(cid:12)(cid:7)(cid:24)(cid:13)(cid:27)(cid:24)(cid:9)(cid:24)(cid:7)(cid:6) (cid:7)(cid:6)!(cid:7)"(cid:11)(cid:7)(cid:12)(cid:5)#(cid:15)(cid:3)(cid:8)(cid:16)(cid:7)(cid:6)$(cid:2)(cid:16)(cid:4)(cid:17)(cid:25)%(cid:3)&(cid:2)(cid:6)(cid:17)(cid:7)(cid:6)(cid:24)(cid:7)(cid:17)(cid:11)(cid:6)(cid:4)(cid:5)(cid:25)(cid:29)(cid:2)(cid:23)(cid:7)(cid:3)(cid:13)(cid:7)(cid:6)(cid:4)&(cid:4)(cid:7)(cid:6)!(cid:7)"(cid:11)(cid:7)(cid:12)(cid:5)(cid:29)(cid:6)(cid:15)(cid:3)(cid:12)(cid:16)(cid:15)(cid:5)(cid:2)(cid:6)% (cid:7)(cid:3)(cid:5)(cid:9)’(cid:2)(cid:30)(cid:30)(cid:7)(cid:6)communication, the additional overhead of going through two network stacks, one to send and
one to receive, makes them very ineﬃcient. To speed up inter-VM communication, SVFS intro-
duces the virtual remote procedure call(VRPC). A VRPC has the same format as a normal remote
procedure call. However, it uses memory sharing to achieve fast data exchange between virtual
machines running on the same hardware, completely bypassing the network stack.
VRPCs take advantage of Xen’s memory re-mapping support to improve data exchange per-
formance. In Xen, a virtual machine can allocate a memory region and report the starting address
and size of this region to another virtual machine. The other machine can then map that memory
region into its own address space and access data in that region directly. VRPC uses this mecha-
nism to establish a shared memory region between the DVM and each guest VM. The two virtual
machines can then exchange data using shared memory. This avoids the overhead of network con-
nections, and eliminates the need to copy memory because each VM can access it directly. In
contrast, a network-based RPC requires at least two memory copies: the sender copying data from
the application to the network stack, and the receiver copying data from network stack back to
the application. In addition, network RPCs require translation of memory to network byte order.
VRPCs do not need to worry about byte ordering because both virtual machines are running on the
same physical host, which further reduces overhead.
In addition to securing individual machines, the secure virtual ﬁle system plays a key role in the
secure grid computing environment SVGrid [ZBP05a]. SVGrid allows untrusted grid computing
tasks to share the base software environment, which includes the operating system and common
programs. File access requests made by the untrusted tasks are mediated by the SVGrid policy
enforcer, which resides in the data virtual machine and enforces ﬁle access policies. If a request
is made to modify a shared ﬁle, then SVGrid will make a private copy of that ﬁle for the guest
virtual machine. This enhances SVGrid’s ﬂexibility when running untrusted programs, while still
ensuring that the programs are unable to disrupt other activities on the shared physical computer.
4.2.2 NetTop
Many organizations have information with varying levels of sensitivity. In the government, sensi-
tivity is denoted using a classiﬁcation system. In order to keep classiﬁed digital information from
falling into the wrong hands, government agencies will have diﬀerent networks for diﬀerent classi-
ﬁcation levels. However, an employee may need to access both classiﬁed information and browse
the internet throughout the day. To deal with this dilemma, a user will typically have a separate
physical computer for each classiﬁcation level.
While having one computer for each level of sensitivity solves the problem, it is very ineﬃcient.
First, it clutters workspaces with computer equipment. These extra computers can also be quite
expensive. Another problem with having multiple isolated networks is that sometimes workers
350
need to transfer data between them. Although it would be bad to allow data to ﬂow from a high-
sensitivity network to a low-sensitivity network, users often need to transfer information, such as
program updates, from the internet to a classiﬁed network.
It would be best if each user had one computer that could handle all classiﬁcations of data
without compromising security. To achieve this goal, the US National Security Administration
developed the NetTop architecture [MS00]. NetTop uses VMware’s virtual machine monitor to