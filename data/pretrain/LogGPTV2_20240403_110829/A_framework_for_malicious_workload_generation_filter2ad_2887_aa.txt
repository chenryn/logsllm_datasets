title:A framework for malicious workload generation
author:Joel Sommers and
Vinod Yegneswaran and
Paul Barford
A Framework for Malicious Workload Generation
Joel Sommers
Vinod Yegneswaran
Paul Barford
University of Wisconsin–Madison
jsommers,vinod,PI:EMAIL
ABSTRACT
Malicious traﬃc from self-propagating worms and denial-
of-service attacks constantly threatens the everyday oper-
ation of Internet systems. Defending networks from these
threats demands appropriate tools to conduct comprehen-
sive vulnerability assessments of networked systems. This
paper describes MACE, a unique environment for recreat-
ing a wide range of malicious packet traﬃc in laboratory
testbeds. MACE deﬁnes a model for ﬂexible composition
of malicious traﬃc that enables both known attacks (such
as the Welchia worm) and new attack variants to be cre-
ated. We implement this model in an extensible library for
attack traﬃc speciﬁcation and generation. To demonstrate
the capability of MACE, we provide an analysis of stress
tests conducted on a popular ﬁrewall and two popular net-
work intrusion detection systems. Our results expose po-
tential weaknesses of these systems and reveal that modern
ﬁrewalls and network intrusion detection systems could be
easily overwhelmed by simple attacks launched from a small
number of hosts.
Categories and Subject Descriptors: C.2.0 [Computer-
Communication Networks]: General—Security and protec-
tion (e.g., ﬁrewalls); C.4 [Performance of Systems]: Perfor-
mance attributes
General Terms: Measurement, Performance, Security
Keywords: Traﬃc Generation, Network Intrusions
1.
INTRODUCTION
Network outages due to self-propagating worms and denial-
of-service attacks have been widely reported over the past
few years. Despite eﬀorts by the research and operational
communities to mitigate these threats, many Internet sys-
tems remain vulnerable. One reason for this insecurity is
that systems and protocols are often not designed with de-
liberate consideration of threat models. An example that
has received recent attention is the TCP initial sequence
number protocol vulnerability that has the potential to in-
ﬂict chaos by disrupting BGP sessions in the backbone of
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’04, October 25–27, 2004, Taormina, Sicily, Italy.
Copyright 2004 ACM 1-58113-821-0/04/0010 ...$5.00.
the Internet [5]. Another reason is that system behavior
under heavy load is often unpredictable. Although scaling
properties of commercial software systems and routing hard-
ware are quite impressive, they are typically not developed
with malicious traﬃc conditions in mind. For example, the
case study by Ogielsky et al. reports on how software bugs
combined with load introduced by the unprecedented spa-
tial diversity of Code-Red worm traﬃc and elevated BGP
activity led to widespread cascading outages [10].
The potency of Internet worms and viruses has contin-
ued to evolve since the Code-Red outbreak. Examples in-
clude high-speed worms such as SQL-Slammer and more
recently multi-modal worms/viruses such as Agobot which
package exploits for many known vulnerabilities. We have
also witnessed the Witty worm which exploits vulnerable
network stacks in ﬁrewalls. Witty targets all destination
ports equally, hence it cannot be neutralized by simple tech-
niques like port blocking at network gateways. These at-
tacks underscore the need for scalable intrusion detection
systems to protect large networks by performing signature
matching at Internet gateways. They also galvanize the need
for better tools for evaluating the resiliency of routers, mid-
dleboxes and intrusion detection systems.
This work has two primary objectives. The ﬁrst is to
create a performance benchmarking tool that enables as-
sessment of quality of service degradation (the eﬀect of mal-
traﬃc on good traﬃc) and resilience of middleboxes and
network intrusion detection systems (NIDS) over a range of
malicious traﬃc volumes. The state of the art for bench-
marking ﬁrewalls and NIDS is still considered nascent, and
there are no universally accepted standards. Current best
practice is to gather and use malware itself. This approach
is limited in its ability to scale traﬃc volume and compose
previously unseen attack traﬃc. A ﬂexible research-oriented
toolkit for producing maltraﬃc is therefore a critical compo-
nent for the development and standardization of benchmarks
for NIDS and ﬁrewalls. Our second objective is to recreate
attack traﬃc scenarios in a laboratory setting for black-box
testing of protocol suites, software, and hardware systems.
This capability will enable us to move toward quantitative
measurement and assessment of claims regarding the degree
to which individual network devices contribute to large-scale
correlated failures.
This paper describes the design and implementation of
a ﬂexible, extensible toolkit called the Malicious trAﬃc
Composition Environment (MACE). MACE provides the
basic building blocks for recreating a large set of known at-
tacks. MACE satisﬁes the following requirements:
1. Generate a large, diverse set of attacks,
822. Generate and control benign background traﬃc,
3. Compose attacks in a high-level language.
The MACE model decomposes attacks into three compo-
nents: exploit, propagation and obfuscation. To our knowl-
edge, MACE is the ﬁrst tool to adopt an extensible approach
to systematic attack synthesis through a modular attack
composition framework. MACE enables resiliency of sys-
tems to resource exploits and traﬃc mix to be evaluated.
MACE is distinguished from eﬀorts like Thor which focus
on obfuscation methods and individual session morphing [6].
Results from such work can be easily folded into MACE.
We discuss the MACE framework in greater detail and
provide example attack traﬃc conﬁgurations in § 3. In § 4
we demonstrate MACE by providing a case study of a pop-
ular ﬁrewall (a Cisco PIX) and two NIDS (Snort and Bro)
under varying traﬃc mixes. Our results reveal that modern
ﬁrewalls and NIDS could be easily overwhelmed by simple
attacks launched from a small number of hosts.
In most
instances, the resilience of the devices to particular attacks
varies with respect to the degree of connection state main-
tained by each device. The case study also illustrates the
capabilities of MACE as a performance benchmarking tool.
2. RELATED WORK
Internet traﬃc generation for measuring application and
network device performance has been well-studied. Harpoon
reproduces network traﬃc in an application-oblivious man-
ner [17]. Numerous application-aware traﬃc generators like
SURGE produce workloads to stress-test web servers [9].
These tools are complementary to MACE and can be used
to generate legitimate (benign) background traﬃc.
Taxonomies of malicious traﬃc inform the design and de-
velopment of the MACE attack types and propagation mod-
els. One such taxonomy of DDoS attack characteristics is
provided in [15]. A similar taxonomy of Internets worms
based upon target discovery, carriers, activations, payloads
and attackers is proposed in [18]. Our study is also related
to the work by Lippman et al. which provides a dataset for
evaluation of NIDS [14].
Our laboratory measurement of the performance of a ﬁre-
wall middlebox is complementary to the work of Allman,
who measured the performance of an operational middlebox
infrastructure in [7].
MACE is intended for black-box evaluation of network
infrastructure resiliency and is not tuned to exploit speciﬁc
implementation features of NIDS or ﬁrewalls. Related ef-
forts [11, 13] have focused on carefully designed attacks on
known or suspected algorithms or implementations.
Two other analogs to our work are Mucus [16] and Nes-
sus [3]. Mucus is a tool for black-box testing of NIDS sys-
tems. As a benchmarking tool for NIDS systems, Mucus’
evaluation criteria are alert correctness and alert quality.
Nessus is a tool for penetration testing of network hosts.
MACE diﬀers considerably from both of these tools in its
objectives. The MACE framework for malicious traﬃc gen-
eration accommodates its use both for penetration testing
or as a NIDS benchmarking tool. Our goals of performance
benchmarking NIDS and middleboxes do not require a com-
plete database or accurate replication of speciﬁc attacks.
While it is unnecessary, for example, to faithfully replicate
all variants of the Beagle worm, it is desirable to have rep-
resentatives from all classes of attacks. Finally, since the
MACE model isolates obfuscation and propagation from ex-
ploit signatures, it can generate attacks that are not present
in current vulnerability databases. Building a library of
known exploits, obfuscations, and propagation models en-
ables attacks composed of any permutation of these sub-
components. The spectrum of attacks is limited by the set
of available subcomponents.
3. MACE FRAMEWORK
We begin by deﬁning the abstract model for MACE. We
then describe implementation details of the MACE toolkit
with examples of attack instances and show how they can
be composed.
3.1 Abstract Model Deﬁnition
The conceptual model for MACE is illustrated in Figure 1.
It provides ﬂexibility in specifying the base characteristics
of malicious traﬃc which we deﬁne as the following:
the attack sequence.
• Exploit Model — set of vulnerabilities that are part of
• Obfuscation Model — morphs in the header or payload
to enable the exploit to elude NIDS. These could either
be at the network layer or at the application layer.
• Propagation Model — order in which victims are cho-
• Background Traﬃc Model — legitimate traﬃc ﬂow in
sen to be attacked.
the network.
Figure 1: The MACE architecture. Test objectives
inform the selection and composition of exploit, ob-
fuscation, and propagation components into a series
of attack vectors. Existing tools such as Harpoon
produce the desired benign background traﬃc.
3.2 Model Realization
The modular MACE library consists of the exploit, obfus-
cation, and propagation components deﬁned by the model,
as well as a number of functions to support interpretation,
execution, and exception handling of attack proﬁles. Our
objective is not to provide a complete attack database, but
rather to support a set of basic building blocks that can be
used to create both known and custom attack vectors.
MACE is currently implemented in the Python program-
ming language. The dynamicism of a language like Python
is important for MACE as it enables sequences of exploits
or obfuscations to be fabricated on-the-ﬂy. Python has li-
braries that support many application layer protocols, such
as HTTP, NNTP, and SMTP, allowing application-speciﬁc
exploits to be easily created. For evolving scalability require-
ments, we plan to migrate key components of the library to
C, extending the capabilities of the Python interpreter much
in the way ns-2 [4] extends Tcl/Tk.
attack vector naliciousmfficatrcompositionnvironmenteattack vector 1welchiablastersyn floodspoofed sourcefragmentationurl rewritingrandomhorizontal sweepcoordinated scanexamplesexploitobfuscationpropagationtestbackground traffic(Harpoon, SURGE, etc.). . . . .traffictestobjectives83The building blocks of MACE include the following:
Payload Construction Elements - Payload elements in MACE
are deﬁned as character arrays. In practice, these are often
payloads from various higher level protocols such as HTTP,
NetBIOS/SMB or DCE RPC. The following example deﬁnes
an HTTP GET request for the ﬁle index.html.
[ httprequest, ( ’method’:’GET’, ’absolute_path’:’/index.html’) ]
Header Construction Elements - Attack traﬃc often requires
the use of raw sockets to construct custom TCP, UDP and IP
headers. The header construction elements in MACE mod-
ify speciﬁc attributes without exposing the entire header to
the user. The following example illustrates the deﬁnition
of a TCP SYN packet. The source and destination IP ad-
dresses and ports are deﬁned by the propagation elements.
Other unspeciﬁed ﬁelds are appropriately ﬁlled with default
or random values.
[ rawtcp, ( ’th_flags’:’TH_SYN’ ) ]
Obfuscation Elements - The obfuscation elements can be
speciﬁed at the network layer or at the application layer.