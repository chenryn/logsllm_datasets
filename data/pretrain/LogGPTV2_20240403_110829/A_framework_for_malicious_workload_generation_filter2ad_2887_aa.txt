# A Framework for Malicious Workload Generation

## Authors
- Joel Sommers
- Vinod Yegneswaran
- Paul Barford
- University of Wisconsin–Madison
- Contact: jsommers, vinod, PI:EMAIL

## Abstract
Self-propagating worms and denial-of-service (DoS) attacks pose a constant threat to the everyday operation of Internet systems. To effectively defend against these threats, it is essential to have tools that can conduct comprehensive vulnerability assessments of networked systems. This paper introduces MACE, a unique environment designed to recreate a wide range of malicious packet traffic in laboratory testbeds. MACE provides a flexible model for composing malicious traffic, enabling the recreation of both known attacks (e.g., the Welchia worm) and new attack variants. We implement this model in an extensible library for specifying and generating attack traffic. To demonstrate MACE's capabilities, we present an analysis of stress tests conducted on a popular firewall and two widely used network intrusion detection systems (NIDS). Our results highlight potential weaknesses in these systems, revealing that even modern firewalls and NIDS can be easily overwhelmed by simple attacks launched from a small number of hosts.

## Categories and Subject Descriptors
- C.2.0 [Computer-Communication Networks]: General—Security and protection (e.g., firewalls)
- C.4 [Performance of Systems]: Performance attributes

## General Terms
- Measurement, Performance, Security

## Keywords
- Traffic Generation, Network Intrusions

## 1. Introduction
Network outages caused by self-propagating worms and DoS attacks have been frequently reported in recent years. Despite efforts by the research and operational communities to mitigate these threats, many Internet systems remain vulnerable. One reason for this insecurity is that systems and protocols are often not designed with deliberate consideration of threat models. For example, the TCP initial sequence number protocol vulnerability has the potential to disrupt BGP sessions in the backbone of the Internet, causing widespread chaos [5]. Additionally, system behavior under heavy load is often unpredictable. Although commercial software systems and routing hardware have impressive scaling properties, they are typically not developed with malicious traffic conditions in mind. The case study by Ogielsky et al. [10] illustrates how software bugs, combined with the unprecedented spatial diversity of Code-Red worm traffic and elevated BGP activity, led to widespread cascading outages.

The potency of Internet worms and viruses has continued to evolve since the Code-Red outbreak. Examples include high-speed worms like SQL-Slammer and multi-modal worms/viruses like Agobot, which package exploits for many known vulnerabilities. The Witty worm, which targets all destination ports equally, cannot be neutralized by simple techniques like port blocking at network gateways. These attacks underscore the need for scalable intrusion detection systems to protect large networks by performing signature matching at Internet gateways. They also highlight the need for better tools to evaluate the resiliency of routers, middleboxes, and NIDS.

This work has two primary objectives:
1. To create a performance benchmarking tool that assesses the quality of service degradation and resilience of middleboxes and NIDS over a range of malicious traffic volumes.
2. To recreate attack traffic scenarios in a laboratory setting for black-box testing of protocol suites, software, and hardware systems.

This paper describes the design and implementation of MACE, a flexible and extensible toolkit for generating malicious traffic. MACE provides the basic building blocks for recreating a large set of known attacks and satisfies the following requirements:
1. Generate a diverse set of attacks.
2. Generate and control benign background traffic.
3. Compose attacks using a high-level language.

MACE decomposes attacks into three components: exploit, propagation, and obfuscation. To our knowledge, MACE is the first tool to adopt an extensible approach to systematic attack synthesis through a modular attack composition framework. MACE enables the evaluation of system resiliency to resource exploits and traffic mix. It is distinguished from efforts like Thor, which focus on obfuscation methods and individual session morphing [6]. Results from such work can be easily integrated into MACE.

In Section 3, we discuss the MACE framework in detail and provide example attack traffic configurations. In Section 4, we demonstrate MACE by providing a case study of a popular firewall (Cisco PIX) and two NIDS (Snort and Bro) under varying traffic mixes. Our results reveal that modern firewalls and NIDS can be easily overwhelmed by simple attacks launched from a small number of hosts. The resilience of the devices to particular attacks varies with the degree of connection state maintained by each device. The case study also illustrates MACE's capabilities as a performance benchmarking tool.

## 2. Related Work
Internet traffic generation for measuring application and network device performance has been well-studied. Tools like Harpoon reproduce network traffic in an application-oblivious manner [17], while application-aware traffic generators like SURGE produce workloads to stress-test web servers [9]. These tools complement MACE and can be used to generate legitimate (benign) background traffic.

Taxonomies of malicious traffic inform the design and development of MACE attack types and propagation models. For example, a taxonomy of DDoS attack characteristics is provided in [15], and a similar taxonomy of Internet worms based on target discovery, carriers, activations, payloads, and attackers is proposed in [18]. Our study is also related to the work by Lippman et al., which provides a dataset for evaluating NIDS [14].

Our laboratory measurement of the performance of a firewall middlebox is complementary to the work of Allman, who measured the performance of an operational middlebox infrastructure [7]. MACE is intended for black-box evaluation of network infrastructure resiliency and is not tuned to exploit specific implementation features of NIDS or firewalls. Related efforts [11, 13] have focused on carefully designed attacks on known or suspected algorithms or implementations.

Other tools similar to MACE include Mucus [16] and Nessus [3]. Mucus is a tool for black-box testing of NIDS systems, focusing on alert correctness and quality. Nessus is a tool for penetration testing of network hosts. MACE differs from these tools in its objectives, as it is designed for both penetration testing and NIDS benchmarking. MACE does not require a complete database or accurate replication of specific attacks but aims to represent all classes of attacks. Since MACE isolates obfuscation and propagation from exploit signatures, it can generate attacks not present in current vulnerability databases. Building a library of known exploits, obfuscations, and propagation models enables the creation of attacks composed of any permutation of these subcomponents.

## 3. MACE Framework
### 3.1 Abstract Model Definition
The conceptual model for MACE, illustrated in Figure 1, provides flexibility in specifying the base characteristics of malicious traffic, defined as follows:
- **Exploit Model**: Set of vulnerabilities that are part of the attack sequence.
- **Obfuscation Model**: Morphs in the header or payload to enable the exploit to elude NIDS. These can be at the network or application layer.
- **Propagation Model**: Order in which victims are chosen to be attacked.
- **Background Traffic Model**: Legitimate traffic flow in the network.

**Figure 1: The MACE Architecture**
- Test objectives inform the selection and composition of exploit, obfuscation, and propagation components into a series of attack vectors.
- Existing tools such as Harpoon produce the desired benign background traffic.

### 3.2 Model Realization
The modular MACE library consists of exploit, obfuscation, and propagation components, as well as functions to support interpretation, execution, and exception handling of attack profiles. Our objective is to provide a set of basic building blocks that can be used to create both known and custom attack vectors.

MACE is currently implemented in Python, a dynamic language that enables sequences of exploits or obfuscations to be fabricated on-the-fly. Python libraries support many application layer protocols, such as HTTP, NNTP, and SMTP, allowing easy creation of application-specific exploits. For evolving scalability requirements, we plan to migrate key components of the library to C, extending the capabilities of the Python interpreter much like ns-2 [4] extends Tcl/Tk.

#### Building Blocks of MACE
- **Payload Construction Elements**: Payload elements in MACE are defined as character arrays. For example, an HTTP GET request for the file `index.html`:
  ```python
  [ 'httprequest', { 'method': 'GET', 'absolute_path': '/index.html' } ]
  ```

- **Header Construction Elements**: Attack traffic often requires the use of raw sockets to construct custom TCP, UDP, and IP headers. The header construction elements in MACE modify specific attributes without exposing the entire header to the user. For example, a TCP SYN packet:
  ```python
  [ 'rawtcp', { 'th_flags': 'TH_SYN' } ]
  ```
  Source and destination IP addresses and ports are defined by the propagation elements. Unspecified fields are filled with default or random values.

- **Obfuscation Elements**: Obfuscation elements can be specified at the network or application layer.