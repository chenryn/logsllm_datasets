threads were independently coded by two re-
below. All
searchers, who then reached consensus on any conﬂicts.
Task Relevance. We ﬁrst checked whether the topic of
the thread was actually relevant to solving the study task. If
it would not help the participant in solving the task, it was
ﬂagged as off-topic and not looked at further.
Usefulness. We rated each on-topic thread as useful or not
useful, based on how related answers were to the question.
Threads with no answers, or no answers that responded
to the original question, were rated as not useful. Threads
with answers that discussed the question and gave helpful
comments, links to other resources, or sample code were rated
as useful.
Code Snippets. We examined all answers in each thread for
ready-to-use code snippets. We rated a code snippet as ready-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:53 UTC from IEEE Xplore.  Restrictions apply. 
Answers in the thread include ...
Useful answers
Useless answers
Discussion of security implications
Working code examples
Only secure code examples
Only insecure code examples
. . . but also discussion of security implications
Secure links
Insecure links
Links to GitHub
Links to other code repositories
Links to other Stack Overﬂow threads
Only secure code examples and secure links
Count
35
6
12
20
7
10
3
23
6
4
1
4
3
(85.4%)
(14.6%)
(29.3%)
(48.8%)
(17.0%)
(24.4%)
(30.0%)
(56.1%)
(14.6%)
(9.8%)
(2.4%)
(9.8%)
(7.3%)
PROPERTIES OF THE 41 ON-TOPIC STACK OVERFLOW THREADS ACCESSED
TABLE V
DURING THE LAB STUDY.
Stack Overﬂow Threads
with code snippets
without code snippets
97.7 mean
12 median
163.9
sd
3.9
2.5
4.4
mean
median
sd
mean
median
sd
mean
median
sd
W = 319.5, p = 0.00217, α = 0.025 (B-H)
with secure code snippets
204.3 mean
145 median
with insecure code snippets
70.2
14
122.4
sd
209.3
W = 73, p = 0.188
135.2 mean
without security implications
17.4
3
37
16 median
207
sd
with security implications
W = 239.5, p = 0.0308, α = 0.05 (B-H)
POPULARITY RATINGS FOR THREADS CONTAINING CODE SNIPPETS.
TABLE VI
insecure solutions are more prevalent. Results of our analysis
show that the APIs we examined are widely used; in line with
our lab study results, the secure networking and ICC APIs
were frequently used in ways that suggest security concerns.
A. Analysis
To analyze real-world apps, we applied standard static code-
analysis techniques: We decompiled Android APK ﬁles, con-
structed control ﬂow graphs (CFGs), and applied backtracking
to gather insights about how often real-world developers use
APIs relevant to our programming tasks. Limitations of this
approach are discussed in Section VIII. Overall, we analyzed
a random sample of 200,000 free Android apps from Google
Play.
Secure Networking Task.
For this task, we analyzed
whether an app implements the HostnameVerifier in-
terface (cf. Table I). Hostname veriﬁcation requires a de-
veloper to implement the verify(String hostname,
SSLSession session) method. We checked if an imple-
mentation actually performs hostname veriﬁcation by process-
301301
ing the hostname parameter or if it simply accepts every
hostname (i. e. return true;).
ICC Task.
For this task, we analyzed an app’s Man-
ifest ﬁle (cf. Table I). We extracted  entries
from the XML DOM, then checked for 
child nodes to determine whether an intent ﬁlter was set.
We also checked whether the android:exported ﬂag,
which indicates whether a service is made publicly avail-
able, was present and if it was set
to true. Lastly, we
extracted android:permission attributes to see if ser-
vices were protected by permissions. We also extracted the
android:protectionLevel attributes to learn whether
signature or system permissions are required to use this
service.
Secure Storage Task.
To determine whether an app stores
data persistently, we looked up relevant API calls in the
call graph. We distinguished between three different targets:
SQLite databases, the ﬁle system, and shared preferences (cf.
Table I).
in a way that keeps data local
To check for SQLite database usage, we looked up the
openOrCreateDatabase API call in the CFG. Developers
can use this API call
to
an app by explicitly setting the MODE_PRIVATE ﬂag or
using the default. Setting the MODE_WORLD_WRITEABLE or
MODE_WORLD_READABLE ﬂag stores the database outside an
app’s local storage and makes it available to other apps. We
used backtracking to check which ﬂags were set.
To analyze ﬁle-system access, we looked up API calls that
return output- or inputstreams to a ﬁle handle. This includes
the openFileOutput method and the mode ﬂags. Addition-
ally, we checked for use of methods that ﬁnd the path of the ex-
ternal storage as well as the WRITE_EXTERNAL_STORAGE
permission.
To check for
shared preferences usage, we looked
up the getSharedPreferences, getPreferences
and getDefaultSharedPreferences API calls in the
CFG. The MODE_PRIVATE, MODE_WORLD_WRITEABLE
and MODE_WORLD_READABLE ﬂags are used to distinguish
between secure and insecure solutions.
Least Permissions Task.
To examine use of dialing com-
pared to calling, we analyzed the Manifest ﬁle for the occur-
rence of the CALL_PHONE permission request and searched
for relevant API calls in the CFG. To initiate a phone call, a
new Intent object must be created using a string parameter to
specify the intended action. We used backtracking to obtain
the respective action value and searched for ACTION_DIAL
and ACTION_CALL values.
Apps that used an ACTION_DIAL intent were rated as
adhering to least privilege since they use the system’s dialer
and do not require an additional permission. Apps that use
an ACTION_CALL intent in combination with requesting the
CALL_PHONE permission were rated as not adhering to least
privilege.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:53 UTC from IEEE Xplore.  Restrictions apply. 
secure
apps
Secure Networking Task
broken hostname veriﬁer
alternative hostname veriﬁcation
ICC Task
service
intent ﬁlter
exported=true
permission
permission, signature
permission, signature or system
-
Secure Storage Task
ﬁlesystem, private
ﬁlesystem, public
database, private
database, public
shared preferences, private
shared preferences, public
Least Permissions Task
dial, permission
dial, no permission
call, permission
call, no permission
= secure;
= insecure
19,520
214
42,193
8,133
3,796
3,827
86
15
120,834
34,183
4,471
154
130,408
17,848
3,907
48,832
5,336
6,157
RESULTS OF STATICALLY ANALYSING A RANDOM SAMPLE OF 200,000
TABLE VII
ANDROID APPS.
B. Results
Table VII summarizes the results of our real-world app
analysis, which are further detailed below.
Secure Networking Task. We identiﬁed 19,734 apps that
implement their own hostname veriﬁer. Of those apps, 19,520
apps (98.9%) implement it in a way that accepts any hostname,
i.e. they effectively turn off hostname veriﬁcation and make
their apps vulnerable to active Man-In-The-Middle attacks.
Only the remaining 214 apps (0.1%) implement alternative
hostname veriﬁcation strategies. Although the limitations of
static code anlaysis prevent us from assessing whether these
implementations meet
the programmers’ expectations, we
score them as secure compared to hostname veriﬁers that
simply accept every hostname.
ICC Task.
42,193 apps implemented their own services.
Of those, 15,857 (37.6%) conﬁgured a non-default access
policy for their services by setting respective properties in the
Manifest ﬁle. 11,929 (75.2%) of those apps use intent ﬁlters or
set the exported=true ﬂag, which weakens security. 3,928
(24.8%) of those apps conﬁgured their services to that an entity
must have a permission in order to launch the service or bind
to it. Only 101 apps required an entity to have a permission
of the same developer or a system permission.
Secure
Storage Task.
implemented
ﬁle-system access. Of
access
ﬁles on external storage or write to the internal storage
155,017
(22.1%)
those,
34,183
apps
with MODE_WORLD_READABLE/WRITEABLE. Howver,
120,834 (77.9%) only access ﬁles on internal storage with
MODE_PRIVATE. Similar numbers can be seen with shared
preferences, where 130,408 (88.0%) apps out of 148,256
use MODE_PRIVATE and 17,848 (12.0%) use a publicly
accessible mode. SQLite databases are not very common
among our dataset, but 4471 out of 4625 (96.7%) also use a
private mode and only 154 (3.3%) a public mode.
Least Permissions Task. Overall we identiﬁed 64,232 apps
that use intents to make phone calls. Of those apps 52,739
(82.1%) use the ACTION_DIAL action for that purpose. Inter-
estingly 3,907 (7.4%) of those apps request the CALL_PHONE
permission although ACTION_DIAL does not require a ded-
icated permission. The remaining 11,493 (17.9%) apps use
the ACTION_CALL action which requires the CALL_PHONE
permission to be requested by the developer. Of those apps,
6,157 (53.6%) do not request the CALL_PHONE permission
and hence might crash if the ACTION_CALL intent is called.
C. Discussion
We found that 187,291 (93.6%) of the randomly chosen
200,000 apps we analyzed in our study used at least one of the
APIs we used in our programming tasks, suggesting that our
laboratory study includes programming tasks that real-world
developers encounter. Interestingly, for the secure storage and
least privilege tasks, most apps implement the more secure
solutions. In contrast, for the secure networking and ICC tasks,
we found more insecure solutions. This mirrors the results of
our lab study (cf. Section V). This analysis provides additional
concrete evidence for the relevance and the results of our lab
study.
VIII. LIMITATIONS
As with most studies of this type, our work has several
limitations.
First, the response rate for our online developer survey was
very low, as might be expected from sending unsolicited emails
to prospective participants. This may introduce some self-
selection bias, but we have no reason to believe a priori that
those who responded differ meaningfully in terms of security
knowledge or resource usage from those who did not.
Our lab study created an artiﬁcial scenario—working within
a tight time limit, with unfamiliar starter code—which may
have impacted participants’ ability to complete tasks cor-
rectly and securely. Similarly, the artiﬁcial nature of study
participation may have reduced participants’ incentives to
consider security. In addition, a majority of our lab participants
were students rather than professional developers, and overall
the lab participants were more formally educated than the
developers in our online survey, which may limit the gen-
eralizability of our results somewhat. The professionals in the
study performed slightly but not signiﬁcantly better than the
non-professionals in functional correctness, but not in security.
All of these issues, however, were present across conditions,
suggesting that comparisons among conditions are valid. We
also hoped that the time limit would partially emulate the
302302
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:53 UTC from IEEE Xplore.  Restrictions apply. 
pressure professional developers feel to bring apps to market
quickly rather than focus on writing the best possible software.
Our analysis of Stack Overﬂow threads is limited to only
those accessed by our lab study participants; threads on other
topics may exhibit different properties. In addition, our manual
coding process was somewhat subjective. Nonetheless, we
believe this analysis provides a useful glimpse into the broader
characteristics of Stack Overﬂow as a resource.
The static code analysis we conducted has several limita-
tions. Although we performed reachability analyses for all API
calls, an inherent limitation of static code analysis is that we
still might have included code paths that are not executed. For
the ICC task, it is possible that some services we marked as
insecure were made publicly available deliberately rather than
by mistake; however, the ofﬁcial Android documentation 7
discourages the use of intent ﬁlters for security reasons. Hence,
while we may have some false positives, our results do
suggest at minimum a violation of best practices. A similar
limitation applies to the storage task: while some uses of
external storage are necessary or deliberate, this also represents
a risky violation of best practices 8 that can lead to unexpected
disclosures of personal information [35].
Additional limitations apply some of the tasks. Implement-
ing a hostname veriﬁer that accepts every hostname is an
inherently insecure solution. Hence, we do not produce false
positives or negatives for this task. However, for the ICC task
we might have produced false positives, i.e. marked services
that have the exported ﬂag set to true or use an intent ﬁlter.
In cases where services should be publicly available both
options should not be rated as insecure. However, the ofﬁcial
Android documentation 9 discourages the use of intent ﬁlters
for security reasons. Hence, although we might have rated
service implementations as insecure that use intent ﬁlter inten-
tionally, our results describe a clear trend towards violating the
documentation’s recommendation. A similar limitation applies
for the storage task: Some apps might have the eligible need
to store data externally. However, the Android documentation
discourages developers to do so 10. Hence, although we might
have rated implementations that use external storage inten-
tionally as insecure, our results describe a clear trend towards
violating the documentation’s recommendation. Requesting a
permission for the least privilege task is an insecure solution
most of the times. Only apps that need to initiate a phone call
themselves without any user interaction need that permission.
However, all other apps could go with the permission saving
solution.
IX. DISCUSSION
In the past, anecdotal evidence has suggested that
the
resources Android developers use when programming directly
affect the security and privacy properties of the apps they
make. In this paper, we present the ﬁrst systematic inves-
tigation of this theory by approaching the problem of how
7Cf. http://developer.android.com/guide/components/intents-ﬁlters.html
8Cf. http://developer.android.com/guide/topics/data/data-storage.html
9Cf. http://developer.android.com/guide/components/intents-ﬁlters.html
10Cf. http://developer.android.com/guide/topics/data/data-storage.html
303303
programming resources affect Android developers’ security-
and privacy-relevant decisions from several different angles.
We conducted a 295-person online survey about the resources
developer use, both in general and speciﬁcally for security-
relevant problems. Based on results from this survey, we then
conducted a 54-person lab study directly exploring the impact
of resource choice on both functional correctness and security.
To provide context for these studies, we manually analyzed
the security characteristics of the Stack Overﬂow posts our
participants accessed and automatically analyzed how the APIs
we tested in the lab are used in 200,000 randomly sampled
apps from the Google Play market.
When combined, results from these varied analyses suggest
several interesting conclusions:
• Real-world Android developers use Stack Overﬂow (and
other Q&A communities) as a major resource for solving
programming problems, including security- and privacy-
relevant problems.
• Other resources, such as ofﬁcial Android API docu-
mentation, do not provide the same degree of quickly
understandable, directly applicable assistance. Our results
suggest that using Stack Overﬂow helps Android devel-
opers to arrive at functional solutions more quickly than
with other resources.
• Participants who were given free choice of resources
tended to visit both the ofﬁcial documentation and Stack
Overﬂow, but their performance in both functional cor-
rectness and security was more similar to participants in
the Stack Overﬂow condition.
• Because Stack Overﬂow contains many insecure answers,
Android developers who rely on this resource are likely
to create less secure code. Access to quick solutions via
a Q&A community may also inhibit developers’ security
thinking or reduce their focus on security.
• Code relevant to the tasks we explored can be found
in 93.6% of the apps we sampled. Many of these apps
exhibit similar security patterns to those observed in our
lab study.
Few participants in our study explicitly mentioned security
or used it as a search term when accessing resources. While
this may be partially a function of our artiﬁcial environment,
when combined with prior research and anecdotal evidence,
this suggests that security remains at best a secondary concern
for many real-world developers [2], [18]. This underscores
the need for both APIs and informational resources that
promote security even when developers are not thinking about
it directly.
is critical
Android developers are unlikely to give up using resources
that help them quickly address their immediate problems.
Therefore,
to develop documentation and re-
sources that combine the usefulness of forums like Stack
Overﬂow with the security awareness of books or ofﬁcial
API documents. One approach might involve rewriting API
documents to be more usable, e.g. by adding secure and
functional code examples. Another might be to develop a
separate programming-answers site in which experts address
popular questions, perhaps initially drawn from other forums,
it
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:53 UTC from IEEE Xplore.  Restrictions apply. 
in a security-sensitive manner. Alternatively, Stack Overﬂow
could add a mechanism for explicitly rating the security
of provided answers and weighting those rated secure more
heavily in search results and thread ordering. Further research
is needed to develop and evaluate solutions to help prevent in-
experienced or overwhelmed mobile developers from making
critical mistakes that put their users at risk.
ACKNOWLEDGEMENTS
The authors would like to thank Sven Bugiel, Andrew Lui,
and Yichen Qian for their support in the lab study, Marten
Oltrogge for his contribution to the static analysis, Joseph
Smith and Jennifer DeSimone for helping us navigate the
IRB requirements for an international study, and all of the
developers and/or students who kindly participated in our
study. This work was supported in part by the German Ministry
for Education and Research (BMBF) through funding for the
Center for IT-Security, Privacy and Accountability (CISPA),
and by the U.S. Department of Commerce, National Institute
for Standards and Technology, under Cooperative Agreement
70NANB15H330.
REFERENCES
[1] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout: Analyzing the
Android Permission Speciﬁcation. In Proc. 19th ACM Conference on
Computer and Communication Security (CCS’12). ACM, 2012.
[2] R. Balebako and L. F. Cranor. Improving App Privacy: Nudging App
Developers to Protect User Privacy. IEEE Security & Privacy, 12(4):55–
58, 2014.
[3] R. Balebako, A. Marsh, J. Lin, and J. Hong. The Privacy and Security
In Workshop on Usable
Behaviors of Smartphone App Developers.
Security (USEC’14), 2014.
[4] A. Baltadzhieva and G. Chrupala. Question Quality in Community
Question Answering Forums: A Survey. SIGKDD Explorations, 17(1):8–
13, 2015.
[5] A. Barua, S. W. Thomas, and A. E. Hassan. What Are Developers
Talking About? An Analysis of Topics and Trends in Stack Overﬂow.
Empirical Software Engineering, 19(3):619–654, 2012.
[6] B. Bazelli, A. Hindle, and E. Stroulia. On the Personality Traits of
StackOverﬂow Users. In Software Maintenance (ICSM), 2013 29th IEEE
International Conference on. IEEE, 2013.
[7] K. P. Burnham. Multimodel Inference: Understanding AIC and BIC
in Model Selection. Sociological Methods & Research, 33(2):261–304,
2004.
[8] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague. OAuth
Demystiﬁed for Mobile Application Developers.
In Proc. 21st ACM
Conference on Computer and Communication Security (CCS’14). ACM,
2014.
[9] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing Inter-
application Communication in Android. In Proc. 9th International Con-
ference on Mobile Systems, Applications, and Services (MobiSys’11).
ACM, 2011.
[10] L. F. Cranor. A Framework for Reasoning About the Human in the
Loop. In Proc. 1st Conference on Usability, Psychology, and Security
(UPSEC’08), 2008.
[11] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An Empirical
Study of Cryptographic Misuse in Android Applications. In Proc. 20th
ACM Conference on Computer and Communication Security (CCS’13).
ACM, 2013.
[12] N. Elenkov. Android Security Internals. No Starch Press, 2015.
[13] W. Enck, P. Gilbert, B. G. Chun, L. P. Cox, J. Jung, P. McDaniel, and
A. N. Sheth. TaintDroid: An Information-ﬂow Tracking System for
Realtime Privacy Monitoring on Smartphones. In Proc. 9th Usenix Sym-
posium on Operating Systems Design and Implementation (OSDI’10).
USENIX Association, 2010.
[14] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A Study of
Android Application Security. In Proc. 20th Usenix Security Symposium
(SEC’11). USENIX Association, 2011.
[15] S. Fahl, S. Dechand, H. Perl, F. Fischer, J. Smrcek, and M. Smith. Hey,
NSA: Stay Away from my Market! Future Prooﬁng App Markets against
Powerful Attackers. In Proc. 21st ACM Conference on Computer and
Communication Security (CCS’14). ACM, 2014.
[16] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and
M. Smith. Why Eve and Mallory Love Android: An Analysis of Android
SSL (in)Security.
In Proc. 19th ACM Conference on Computer and
Communication Security (CCS’12). ACM, Oct. 2012.
[17] S. Fahl, M. Harbach, M. Oltrogge, T. Muders, and M. Smith. Hey, You,
Get Off of My Clipboard. In Financial Cryptography and Data Security,
volume 7859, pages 144–161. Springer, 2013.
[18] S. Fahl, M. Harbach, H. Perl, M. Koetter, and M. Smith. Rethinking
SSL Development in an Appiﬁed World. In Proc. 20th ACM Conference
on Computer and Communication Security (CCS’13). ACM, 2013.
[19] S. Garﬁnkel and H. R. Lipford. Usable security: History, themes, and
challenges. Synthesis Lectures on Information Security, Privacy, and
Trust, 5(2):1–124, 2014.
[20] M. Georgiev, S.
Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov. TThe Most Dangerous Code in the World: Validating SSL
Certiﬁcates in Non-browser Software. In Proc. 19th ACM Conference
on Computer and Communication Security (CCS’12). ACM, 2012.
[21] S. Jain and J. Lindqvist. Should I Protect You? Understanding Devel-
In Workshop on Usable
opers’ Behavior to Privacy-Preserving APIs.
Security (USEC’14), 2014.
[22] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster,
and T. Millstein. Dr. Android and Mr. Hide: Fine-grained Permissions
in Android Applications. In Proc. 2nd ACM CCS Workshop on Security
and Privacy in Mobile Devices (SPSM’12). ACM, 2012.
[23] S. Komatineni and D. MacLean. Pro Android 4. Apress, 2012.
[24] P. G. Leon, L. F. Cranor, A. M. McDonald, and R. McGuire. Token
Attempt: The Misrepresentation of Website Privacy Policies Through
the Misuse of P3P Compact Policy Tokens. In Proc. 9th Annual ACM
Workshop on Privacy in the Electronic Society (WPES ’10). ACM, 2010.
[25] M. Linares-Vásquez, G. Bavota, M. Di Penta, R. Oliveto, and D. Poshy-
vanyk. How Do API Changes Trigger Stack Overﬂow Discussions? A
Study on the Android SDK. In Proc. 22nd International Conference on
Program Comprehension (ICPC ’14). ACM, 2014.
[26] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically Vetting
Android Apps for Component Hijacking Vulnerabilities. In Proc. 19th
ACM Conference on Computer and Communication Security (CCS’12).
ACM, 2012.
[27] D. Movshovitz-Attias, Y. Movshovitz-Attias, P. Steenkiste,
and
C. Faloutsos. Analysis of the Reputation System and User Contributions
on a Question Answering Website: StackOverﬂow.
In Proc. 2013
IEEE/ACM International Conference on Advances in Social Networks
Analysis and Mining (ASONAM’13). IEEE, 2013.
[28] S. Nadi, S. Krüger, M. Mezini, and E. Bodden. “Jumping Through
Hoops": Why do Java Developers Struggle With Cryptography APIs?
In Proc. 37th IEEE International Conference on Software Engineering
(ICSE’15), May 2016.
[29] M. Oltrogge, Y. Acar, S. Dechand, M. Smith, and S. Fahl.
To
Pin or Not to Pin—Helping App Developers Bullet Proof Their TLS
Connections.
In Proc. 24th USENIX Security Symposium (SEC’15).
USENIX Association, 2015.
[30] L. Onwuzurike and E. De Cristofaro. Danger is My Middle Name:
Experimenting with SSL Vulnerabilities in Android Apps.
In Proc.
8th ACM Conference on Security & Privacy in Wireless and Mobile
Networks (WiSec’15). ACM, 2015.
[31] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna.
Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading
in Android Applications. In Proc. 21st Annual Network and Distributed
System Security Symposium (NDSS’14). The Internet Society, 2014.
[32] L. Ponzanelli, A. Mocci, A. Bacchelli, and M. Lanza. Understanding
and Classifying the Quality of Technical Forum Questions. In Proc. 14th
International Conference on Quality Software (QSIC’14). IEEE, 2014.
[33] A. Porter Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android
Permissions Demystiﬁed. In Proc. 18th ACM Conference on Computer
and Communication Security (CCS’11). ACM, 2011.
[34] A. Porter Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission Re-Delegation: Attacks and Defenses. In Proc. 20th Usenix
Security Symposium (SEC’11). USENIX Association, 2011.
[35] S. Son, D. Kim, and V. Shmatikov. What Mobile Ads Know About
Mobile Users. In Proc. 23rd Annual Network and Distributed System
Security Symposium (NDSS’16). The Internet Society, 2016.
304304
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:53 UTC from IEEE Xplore.  Restrictions apply. 
[36] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan. SMV-
Hunter: Large Scale, Automated Detection of SSL/TLS Man-in-the-
Middle Vulnerabilities in Android Apps. In Proc. 21st Annual Network
and Distributed System Security Symposium (NDSS’14). The Internet
Society, 2014.
[37] The
Internet Society.
Internet Re-
http://www.internetsociety.org/globalinternetreport/assets/
Internet Society Global
port 2015.
download/IS_web.pdf, 2015.
[38] C. Treude, O. Barzilay, and M. A. Storey. How Do Programmers Ask
In Proc. 33rd
and Answer Questions on the Web? (NIER Track).
International Conference on Software Engineering (ICSE’11), 2011.
[39] B. Vasilescu, A. Capiluppi, and A. Serebrenik. Gender, Representation
and Online Participation: A Quantitative Study of StackOverﬂow.
In
Proc. 2012 International Conference on Social Informatics (SocialIn-
formatics). IEEE, 2012.
[40] S. Wang, D. Lo, and L. Jiang. An Empirical Study on Developer
Interactions in StackOverﬂow. In Proc. 28th Annual ACM Symposium
on Applied Computing (SAC’13). ACM, 2013.
[41] W. Wang and M. W. Godfrey. Detecting API Usage Obstacles: A
Study of iOS and Android Developer Questions. In Proc. 10th Working
Conference on Mining Software Repositories (MSR’13). IEEE, 2013.
Recommending posts
[42] W. Wang, H. Malik, and M. W. Godfrey.
concerning api issues in developer q&a sites.
In Proc. 12th Working
Conference on Mining Software Repositories (MSR ’15). IEEE, 2015.
[43] X. Wei, L. Gomez, I. Neamtiu, and M. Faloutsos. Permission Evolution
In Proc. 28th Annual Computer Security
in the Android Ecosystem.
Applications Conference (ACSAC’12). ACM, 2012.
[44] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The Impact of Vendor
In Proc. 20th ACM Conference
Customizations on Android Security.
on Computer and Communication Security (CCS’13). ACM, 2013.
[45] Y. Xie and D. Powers. Statistical Methods for Categorical Data Analysis.
Emerald, 2008.
[46] Y. Zhou and X. Jiang. Detecting Passive Content Leaks and Pollution
in Android Applications. In Proc. 20th Annual Network and Distributed
System Security Symposium (NDSS’13). The Internet Society, 2013.
305305
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:53 UTC from IEEE Xplore.  Restrictions apply.