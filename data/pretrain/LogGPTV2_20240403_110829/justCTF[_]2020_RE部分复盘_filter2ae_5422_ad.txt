    patches_1 = [
        (0x1800 , 0x45c748fffff84be8),
        (0x1871 , 0x89e0458b48000000),
        (0x18e5 , 0x1ebfffff7b5e8c7),
        (0x1838 , 0x8948d8458b48c289),
        (0x18a8 , 0x775fff883fffffd)
    ]
    patches_2 = [
        (0x16db , 0xe8c78948000009ab),
        (0x174b , 0x8348008b48d8458b),
        (0x17bd , 0x1ebfffff93de8c7),
        (0x1712 , 0xe8c7894800000000),
        (0x1781 , 0xf975e8c78948f845)
    ]
    # 异常代码0xCC后面的几个值都是父进程判断如何解密子进程的依据，不是真正的代码，父进程修改了rip绕过了他们的执行，所以把他们都nop掉
    rip = [0x17f9, 0x16d4]
    CC = [0x17dc, 0x16b7]
    for i in range(len(rip)):
        ida_bytes.patch_bytes(CC[i], '\x90'*(rip[i] - CC[i]))
    # Patch the encrypted bytes
    def patch(patches):
        for i in patches:
            print(hex(i[0]))
            ida_bytes.patch_qword(i[0], i[1])
    patch(patches_1)
    patch(patches_2)
patch完后发现 crackme.enc 的mian 函数可读了，其main函数要求 读取 secret_key
文件，我们创建一个secret_key文件，随便写入一些值，再次执行`LD_PRELOAD=./ptrace_hook.so ./supervisor`
发现结果出现了更多POKETEXT的数据，我们 patch 一下ida不能识别的其他数据，patch 完后 ida
可以重新分析，发现secret_key的值只能是 `01?`，重写secret_key再次执行`./supervisor`，最后得到patch脚本
    import ida_bytes
    patches_main = [
        (0x1800 , 0x45c748fffff84be8),
        (0x1871 , 0x89e0458b48000000),
        (0x18e5 , 0x1ebfffff7b5e8c7),
        (0x1838 , 0x8948d8458b48c289),
        (0x18a8 , 0x775fff883fffffd)
    ]
    patches_read_file = [
        (0x16db , 0xe8c78948000009ab),
        (0x174b , 0x8348008b48d8458b),
        (0x17bd , 0x1ebfffff93de8c7),
        (0x1712 , 0xe8c7894800000000),
        (0x1781 , 0xf975e8c78948f845)
    ]
    patches_check_key = [
        (0x140b , 0xc700000000f845c7),
        (0x1494 , 0xbaf0458b1c7501f8),
        (0x151f , 0x1eb9004ebffffff),
        (0x144f , 0xbe0fef458800b60f),
        (0x14d7 , 0xf44539c0b60f1004)
    ]
    patches_compare_char = [
        (0x13b9 , 0xb04a5b749d359b75),
        (0x13bd , 0x28c197b658b3b38d),
        (0x13c4 , 0x1ebfc4589ffc1d0),
        (0x13ba , 0x3bc43e2f0001b807),
        (0x13be , 0xffffffb805eb0000)
    ]
    patches_calculate = [
        (0x1373 , 0x17e27f613f63871),
        (0x1376 , 0x1ebfc453a63b257),
        (0x1372 , 0x89d001e4458bc289)
    ]
    # Patch the irrelevant 0xCC bytes
    rip = [0x17f9, 0x16d4, 0x17cb, 0x1404, 0x13b2, 0x13d2, 0x136b, 0x1384, 0x152d]
    CC = [0x17dc, 0x16b7, 0x17c6, 0x13E7, 0x1399, 0x13cd, 0x1352, 0x137f, 0x1528]
    for i in range(len(rip)):
        ida_bytes.patch_bytes(CC[i], '\x90'*(rip[i] - CC[i]))
    # Patch the encrypted bytes
    def patch(patches):
        for i in patches:
            print(hex(i[0]))
            ida_bytes.patch_qword(i[0], i[1])
    patch(patches_main)
    patch(patches_read_file)
    patch(patches_check_key)
    patch(patches_compare_char)
    patch(patches_calculate)
最后得到检查secret_key的函数
    __int64 __fastcall sub_13D7(__int64 a1, unsigned __int64 a2)
    {
      int v2; // eax
      char v4; // [rsp+1Fh] [rbp-11h]
      int j; // [rsp+20h] [rbp-10h]
      unsigned int i; // [rsp+24h] [rbp-Ch]
      int v7; // [rsp+28h] [rbp-8h]
      unsigned int v8; // [rsp+2Ch] [rbp-4h]
      v8 = 1;
      v7 = 0;
      for ( i = 1; i <= 0x7F; ++i )
      {
        for ( j = 0; ; j = sub_1345(j, 2, 2) )
        {
          while ( 1 )
          {
            if ( a2 <= v7 )
            {
              v8 = -1;
              goto LABEL_13;
            }
            v2 = v7++;
            v4 = *(_BYTE *)(v2 + a1);
            if ( (unsigned int)sub_1389(v4, '0') != 1 )
              break;
            j = sub_1345(j, 2, 1);
          }
          if ( (unsigned int)sub_1389(v4, '1') != 1 )
            break;
        }
        if ( (unsigned int)sub_1389(v4, '?') == 1 )
        {
          if ( i != byte_40C0[j] )
            v8 = -1;
        }
        else
        {
          v8 = -1;
        }
    LABEL_13:
        if ( v8 == -1 )
          break;
      }
      if ( a2 != v7 + 1 )
        v8 = -1;
      return v8;
    }
这个函数逻辑清晰，直接逆即可
###  解密脚本
    #!/usr/bin/python3
    data = [0x1B, 0x59, 0x29, 0x4C, 0x3D, 0x6F, 0x22, 0x7F, 0x26, 0x1C,0x2C, 0x2F, 0x07, 0x4E, 0x17, 0x1E, 0x61, 0x0A, 0x53, 0x10,0x34, 0x65, 0x4A, 0x42, 0x58, 0x08, 0x1D, 0x60, 0x33, 0x55,0x37, 0x44, 0x52, 0x39, 0x2E, 0x72, 0x0F, 0x6E, 0x7E, 0x3F,0x32, 0x47, 0x5A, 0x13, 0x19, 0x06, 0x7A, 0x51, 0x18, 0x1A,0x63, 0x48, 0x02, 0x77, 0x3E, 0x54, 0x35, 0x16, 0x04, 0x5E,0x4F, 0x49, 0x30, 0x03, 0x15, 0x71, 0x4D, 0x11, 0x38, 0x12,0x05, 0x45, 0x27, 0x68, 0x3A, 0x75, 0x09, 0x20, 0x01, 0x40,0x69, 0x23, 0x6A, 0x3B, 0x41, 0x5F, 0x7B, 0x57, 0x3C, 0x1F,0x66, 0x56, 0x5C, 0x0C, 0x36, 0x73, 0x2D, 0x67, 0x43, 0x5D,0x4B, 0x28, 0x76, 0x78, 0x7D, 0x31, 0x6D, 0x25, 0x14, 0x74,0x5B, 0x6B, 0x0D, 0x50, 0x70, 0x64, 0x0E, 0x62, 0x2B, 0x0B,0x46, 0x2A, 0x7C, 0x79, 0x6C, 0x24, 0x21]
    index = []
    for i in range(1,0x80):
        index.append(data.index(i))
    print(index)
    def reverse(num):
        key = ""
        while 1:
            if num == 0:
                break
            elif num % 2 == 0:
                num -= 2
                num //= 2
                key += "1"
            elif num % 2 == 1:
                num -= 1
                num //= 2
                key += "0"
        key = key[::-1]
        key += "?"
        return key
    print(reverse(12))
    total_key = ""
    for i in index:
        total_key += reverse(i)
    total_key += '\n'
    f = open('./secret_key','w')
    f.write(total_key)
最后运行`./supervisor`，终于得到这张漂亮的图片