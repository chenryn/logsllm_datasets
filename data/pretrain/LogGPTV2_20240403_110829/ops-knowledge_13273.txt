User: How to write a simple automated test script using Python to test the performance of a web application?
Assistant: 1. Install Python Before starting to write Python automated test scripts, you need to install the Python environment first. 2. Install the necessary Python libraries Use the pip command to install the following libraries: - requests - time - random - statistics - matplotlib These libraries are used to send requests, record test results, generate statistics, and draw charts. 3. Write test scripts Write automated test scripts as needed. The following is a simple example: ```python import requests import time import random import statistics import matplotlib.pyplot as plt # configuration test parameters url = "http://example.com" # URL of the web application to be tested num_requests = 100 # Total number of sending requests min_wait_time = 1 # Minimum waiting time (seconds) max_wait_time = 10 # Maximum waiting time (seconds) # Sending requests and recording response time response_times = [] for i in range(num_requests): wait_time = random.randint (min_wait_time, max_wait_time) time.sleep(wait_time) start_time = time.time() response = requests.get(url) end_time = time.time() response_times.append(end_time - start_time) # Generate statistics and draw charts avg_response_time = statistics.mean(response_times) max_response_time = max(response_times) min_response_time = min(response_times) response_time_std_dev = statistics.stdev(response_times) print("Average response time:", avg_response_time, "seconds") print("Max response time:", max_response_time, "seconds") print("Min response time:", min_response_time, "seconds") print("Response time standard deviation:", response_time_std_dev, "seconds") plt.hist(response_times, bins=10) plt.xlabel ("Response time (seconds)") plt.ylabel("Number of requests") plt.show() ``` This sample code uses the requests library to send HTTP requests and record the response time. Then, use the statistics library to calculate statistics such as average response time, maximum and minimum response times, and standard deviation of response times. Finally, the histogram is plotted using the matplotlib library. 4. Run the test script Run the test script on the command line: `python performance_test.py` The script will output statistics and display a histogram. The performance of the web application can be optimized based on the test results as needed.