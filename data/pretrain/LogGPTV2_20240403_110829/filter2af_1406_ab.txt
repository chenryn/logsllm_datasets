script代码中的错误及潜在问题，并执行你的团队约定好的编码方式。
[JSLint](https://github.com/douglascrockford/JSLint) [PROPRIETARY] – java
script代码质量工具
[plato](https://github.com/es-analysis/plato) [OSS] – java script可视化源代码复杂度
[yardstick](https://github.com/calmh/yardstick) [OSS] – java script代码度量工具
[XO](https://github.com/sindresorhus/xo) [OSS] – 执行严格的代码风格.
## Lua
[luacheck](https://github.com/mpeterv/luacheck) [OSS] – Lua代码静态分析工具
## Makefile
[portlint](https://www.freebsd.org/cgi/man.cgi?query=portlint&sektion=1&manpath=FreeBSD+8.1-RELEASE+and+Ports)
[OSS] – FreeBSD及DragonFlyBSD端口目录验证器
## Packages
[lintian](https://github.com/Debian/lintian)[OSS] – Debian程序包静态分析工具
## Perl
[Perl::Critic](http://search.cpan.org/~thaljef/Perl-Critic-1.126/lib/Perl/Critic.pm) [OSS] – Perl源代码最佳实践
## PHP
[DesignPatternDetector](https://github.com/Halleck45/DesignPatternDetector)
[OSS] – 在PHP代码中检测设计模式
[deptrac](https://github.com/sensiolabs-de/deptrac) [OSS] – 在软件层之间执行依赖规则
[exakat](https://github.com/exakat/exakat) [OSS] – PHP自动化代码审查引擎
[GrumPHP](https://github.com/phpro/grumphp) [OSS] – 检测每次提交的代码
[phan](https://github.com/etsy/phan) [OSS] – 来自etsy的现代化静态分析器
[php7cc](https://github.com/sstalle/php7cc) [OSS] – PHP 7 兼容性检查器
[php7mar](https://github.com/Alexia/php7mar) [OSS] – 帮助开发者快速将代码移植到PHP 7
[phpcpd](https://github.com/sebastianbergmann/phpcpd) [OSS] –
针对PHP代码的复制/粘贴检测工具.
[PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer) [OSS] –
检测违反定义的编码标准
[phpdcd](https://github.com/sebastianbergmann/phpdcd) [OSS] –
针对PHP代码的无作用代码检测工具
[PhpDependencyAnalysis](https://github.com/mamuz/PhpDependencyAnalysis) [OSS]
– 为项目创建一个依赖关系图标
[Php Inspections (EA Extended)](https://github.com/kalessil/phpinspectionsea)
[OSS] – PHP静态代码分析工具
[phpsa](https://github.com/ovr/phpsa) [OSS] – PHP静态分析工具
[PHPMD](https://phpmd.org/) [OSS] – 在你的代码中寻找可能出现的bug
[PhpMetrics](https://github.com/Halleck45/PhpMetrics) [OSS] – 预测代码的复杂性度量
[PHPQA](https://github.com/EdgedesignCZ/phpqa) [OSS] – 一款用于运行QA工具(phploc,
phpcpd, phpcs, pdepend, phpmd, phpmetrics)的工具
[PHP Refactoring Browser](https://github.com/QafooLabs/php-refactoring-browser) [OSS] – 重构助手
[PHP-Token-Reflection](https://github.com/Andrewsville/PHP-Token-Reflection)
[OSS] – 函数库模拟PHP内部反射
[PHP-Parser](https://github.com/nikic/PHP-Parser) [OSS] – PHP写的一款PHP解析器
[RIPS](https://github.com/ripsscanner/rips) [OSS] – 一款用于PHP脚本漏洞的静态源代码分析工具
[Tuli](https://github.com/ircmaxell/Tuli) [OSS] – 静态分析引擎
## Python
[bandit](https://github.com/openstack/bandit) [OSS] – 在Python代码中寻找常见安全问题的工具
[jedi](https://github.com/davidhalter/jedi) [OSS] – Python自动化/静态分析函数库
[mccabe](https://github.com/PyCQA/mccabe) [OSS] – 检测McCabe复杂性
[mypy](https://github.com/python/mypy) [OSS] – Python静态类型分析工具，旨在结合动态类型及静态类型的优点
[py-find-injection](https://github.com/uber/py-find-injection) [OSS] –
从Python代码中寻找SQL注入漏洞
[pycodestyle](https://github.com/PyCQA/pycodestyle) [OSS] – (formerly pep8)
Python风格检查工具
[pydocstyle](https://github.com/PyCQA/pydocstyle) [OSS] – Python
docstring风格检查工具
[pyflakes](https://github.com/pyflakes/pyflakes/) [OSS] – 检测Python源文件中的错误
[pylint](https://github.com/PyCQA/pylint) [OSS] – 寻找程序错误, 有助于执行编码标准以及嗅探代码异味.
此外它还包括pyreverse (UML图表生成器)以及symilar (一个类似的检测工具).
以及[可选的扩展](https://pylint.readthedocs.io/en/latest/reference_guide/extensions.html)
[pyroma](https://bitbucket.org/regebro/pyroma) [OSS] –
评估Python项目，并列出问题帮助提高代码质量
[vulture](https://bitbucket.org/jendrikseipp/vulture) [OSS] –
寻找Python代码中未使用的类,函数，变量
[xenon](https://github.com/rubik/xenon) [OSS] – 使用radon监控代码复杂度
## R
[lintr](https://github.com/jimhester/lintr) [PROPRIETARY] – R静态代码分析工具
## Ruby
[brakeman](https://github.com/presidentbeef/brakeman) [OSS] – Ruby on
Rails应用的一个静态分析安全漏洞扫描工具
[cane](https://github.com/square/cane) [OSS] – 代码质量标准检查
[dawnscanner](https://github.com/thesp0nge/dawnscanner) [OSS] –
ruby写的静态分析安全扫描器，支持Sinatra, Padrino以及Ruby on Rails框架
[flay](https://github.com/seattlerb/flay) [OSS] – Flay 分析代码结构相似之处
[flog](https://github.com/seattlerb/flog) [OSS] –
Flog在一个易于阅读的报告中点出大多数不合规则的代码，评价分数越高，代码就越糟糕
[laser](https://github.com/michaeledgar/laser) [OSS] – Ruby代码的风格小工具集和静态分析工具
[Mondrian](http://trismegiste.github.io/Mondrian/) [OSS] – 静态分析及重构工具
[pelusa](https://github.com/codegram/pelusa) [OSS] – 静态分析Lint-type工具用以改善你的Ruby面向对象代码
[quality](https://github.com/apiology/quality) [OSS] – 使用社区工具在你的代码中运行质量检测
[reek](https://github.com/troessner/reek) [OSS] – Ruby代码异味检测工具
[rubocop](https://github.com/bbatsov/rubocop) [OSS] – Ruby静态代码分析工具,
基于Ruby社区风格指南
[rubycritic](https://github.com/whitesmith/rubycritic) [OSS] – Ruby代码质量报告工具
[ruby-lint](https://github.com/YorickPeterse/ruby-lint) [OSS] – Ruby静态代码分析工具
[SandyMeter](https://github.com/makaroni4/sandi_meter) [OSS] – 用于检测遵循Sandi
Metz规则的Ruby代码的静态分析工具
## Rust
[clippy](https://github.com/Manishearth/rust-clippy) [OSS] –
一个代码小工具集用于捕获常见错误，以及提高Rust代码质量
[electrolysis](https://github.com/Kha/electrolysis) [OSS] – 验证Rust程序的工具
[herbie](https://github.com/mcarton/rust-herbie-lint) [OSS] –
当使用一个不稳定的浮点表达式时增加警告或者错误
[linter-rust](https://github.com/AtomLinter/linter-rust) [OSS] –
Atom扩展，列出你的Rust文件。使用rustc和cargo
[rustfix](https://github.com/killercup/rustfix) [OSS] – 读取和应用由rustc提出的建议
## Shell
[shellcheck](https://github.com/koalaman/shellcheck) [OSS] – ShellCheck,
一个精通分析工具，为bash/sh shell脚本提出警告和建议
## SQL
[sqlint](https://github.com/purcell/sqlint) [OSS] – 简单的SQL工具集
## Swift
[SwiftLint](https://github.com/realm/SwiftLint) [OSS] – 执行Swift编码风格和约定的工具
[Tailor](https://github.com/sleekbyte/tailor) [OSS] –
一个用Swift程序语言写的静态分析工具及源代码工具集