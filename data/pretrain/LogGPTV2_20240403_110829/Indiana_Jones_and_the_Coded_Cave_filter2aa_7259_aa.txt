# Indiana Jones and the Coded Cave
Category: Miscellaneous
## Description
> Indiana Jones is conducting his postdoctoral research at the Technion Institute. 
> 
> Yesterday, on his way back home he bumped into a strange person who had given him a Disk On Key.
> 
> This person said to him - "The treasure is in the cave" - and vanished.
> 
> Your mission, as Dr. Jones assistants, is to help him find the treasure.
> 
> * Use Autonomos_Treasure_Hunder_ICD.docx and ATH_Tele.bin to solve this challenge
> * Use Open Street View maps (not Google maps)
> * The flag structure is cstechnion{Name_Of_The_Cave}, where Name_Of_The_Cave is the translation to English of the Hebrew name as written in Open Street View maps (for translation use google translate)
A `*.docx` and a binary file were attached.
### Specs
The document attached was an "ICD Specification" between an "Autonomous Treasure Hunter" system and a host.  According to the specs, the ATH is an unmanned platform which searches for treasures.
The specs included many redacted specifications, we'll just include what's needed to solve the challenge:
#### 3.2.2.1.2.	Message Structure
The message structure is defined in the following table and paragraphs:
| Field	| Value (Hex)	| Byte Number	| # of bytes |
|-------|---------------|---------------|------------|
| Sync	| 0xDD	        | 0	            |          1 |
|Identifier	| 0x1/0xXX/0xXX/0xXX	| 1	| 1 |
| Data		| 2-9	| 8 |
| Checksum	| See 3.2.3.1.2.3	| 10-11 |	2 |
| Total # Of Bytes	| 	| | 	12|
##### 3.2.2.1.2.1.	Synchronization Word
The beginning of each message starts with a 1 byte synchronization word identified as follows:
 * 0xDD when the message is transmitted from the ATH to the Host.
 * 0xEE when the message is transmitted from the Host to the ATH.
##### 3.2.2.1.2.2.	Identifier
The Identifier field is the sent message identifier. 
##### 3.2.2.1.2.3.	Checksum
Checksum algorithm shall be Fletcher-16. The checksum is calculated 
Both the ATH and Host shall ignore any message with a bad checksum.
The checksum is computed over the entire message, excluding the Checksum field itself
##### 3.2.2.1.2.4.	Endianess
Endianess is Least Significant Byte First as described in the following figure:
#### 3.2.2.3.	Messages Specification
| Short |	Type	| Size (Bytes) |	Comment	Min/Max	Resolution |
| --- | --- | --- | --- |
| U1	| Unsigned Char | 	1	| 	0..255	1 |
| I4	| Signed Long	| 4	| 2's complement |	-2'147'483'648..2'147'483'647 |	1 |
##### 3.2.2.3.1.	ATH_HST_01: COORDINATE_TELE
| Byte	| Name | 	Data Type	 | Value/ Units | 	Scaling |	Description | 
| --- | --- | --- | --- | --- | --- | 
| 0 |	Synchronization word	|U1	|-	|-|	0xDD |
|1|	Message ID|	U1|	-	|-	|0x01|
|2-5	|Longitude |	I4	|Deg	|1e-5|	N.E. (East = “+”) Decimal Degrees = Degrees + minutes/60 + seconds/3600
|6-9|	Latitude|	I4|	Deg	|1e-5|	N.E (North = “+”) Decimal Degrees = Degrees + minutes/60 + seconds/3600
|10-11	|Checksum|	U2|	-	|-|	
## Solution
Let's inspect the attached binary:
```console
root@kali:/media/sf_CTFs/technion/Indiana_Jones_and_the_Coded_Cave# xxd -g 1 ATH_Tele.bin | head
00000000: 05 03 06 06 00 23 8b 08 02 02 09 04 0f f1 dd 01  .....#..........
00000010: 73 58 35 00 e2 07 32 00 fb fd dd 08 4a 93 35 00  sX5...2.....J.5.
00000020: e0 ff 32 00 0c 75 dd 01 74 58 35 00 e2 07 32 00  ..2..u..tX5...2.
00000030: fc 06 dd 01 02 7a 36 00 27 0e 33 00 29 71 07 05  .....z6.'.3.)q..
00000040: 03 00 08 5e 06 dd 09 be af 36 00 d7 1e 33 00 b4  ...^.....6...3..
00000050: 25 dd 01 75 58 35 00 e2 07 32 00 fd 0e dd 0a 26  %..uX5...2.....&
00000060: 06 36 00 59 75 33 00 4c d1 dd 01 78 58 35 00 e2  .6.Yu3.L...xX5..
00000070: 07 32 00 01 26 01 02 09 04 06 51 55 dd 07 38 ef  .2..&.....QU..8.
00000080: 35 00 f5 90 32 00 fa 68 dd 01 b6 3c 36 00 16 69  5...2..h...<6..i
00000090: 33 00 f8 6b dd 01 5c c3 36 00 6a 56 33 00 79 7d  3..k..\.6.jV3.y}
```
We can see that it includes several locations which start with a `0xdd 0x01`, indicating a coordinate of type `COORDINATE_TELE` according to the specs. Other types were redacted in the document, so it's safe to assume that we need to concentrate on the coordinates.
We can parse the attached binary using the following code, which also queries an Open Street View API for coordinate details:
```python
import os
import mmap
import re