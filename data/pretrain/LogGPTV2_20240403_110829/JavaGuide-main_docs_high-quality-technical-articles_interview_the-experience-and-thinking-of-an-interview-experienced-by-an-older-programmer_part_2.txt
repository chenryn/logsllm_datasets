面试前通常会要求做个简要的个人介绍。个人介绍通常作为进入面试的前奏曲和缓冲阶段，缓和下紧张气氛。
我最开始的个人介绍，个性啊业余生活啊工作经历啊志趣啊等等，似乎不知道该说些什么。实际上，个人介绍是一个充分展示自己的主页。主页应当让自己最最核心的优势一目了然（需要挖掘自己的经历并仔细提炼）。我现在的个人介绍一般会包括：个性（比如偏安静）、做事风格（工作认真严谨、注重质量、善于整体思考）、最大优势（owner 意识、执行力、工程把控能力）、工作经历简述（在每个公司的工作负责什么、贡献了什么、收获了什么）。个人介绍简明扼要，无需赘言。
个人介绍，是对自己的一个更为清晰、深入和全面的认识契机。
### 公司了解
很多人可能跟我一样，对公司业务了解甚少，就直接投出去了。这样其实是不合理的。首先，我个人是不赞成海投的，而倾向于定向投。找准方向投，虽然目标更少，但更有效率。这跟租房一样，我一般在豆瓣上租房，虽然目标源少，但逮着一个就是好运。
投一家公司，是因为这家公司符合意向，值得争取，而不是因为这是一家公司。就像找对象，不是为了找一个女人。要确定这家公司是否符合意向，就应当多去了解这家公司：主营业务、未来发展及规划、所在行业及地位、财务状况、业界及网络评价等。
在面试的过程中适当谈到公司的业务及思考，是可加分项。亦可用于“你有什么想问的？”的提问。
### 技术探索
技术能力是一个技术人的基本素养。因此，我觉得，无论未来做什么工作，技术能力过硬，总归是最不可或缺的不可忽视的。
原理和设计思想是软件技术中最为精髓的东西。一般软件技术可以分为两个方面：
- 原理：事物如何工作的基本规律和流程；
- 架构：如何组织大规模逻辑的艺术。
**技术探索，一定要先理解原理。原理不懂，就会浮于表层，不能真正掌握它。技术原理探究要掌握到什么程度？数据结构与算法设计、考量因素、技术机制、优化思路。要在脑中回放，直到一切细节而清晰可见。如果能够清晰有条理地表述出来，就更好了。**
**技术原理探究，一定要看源码。看了源码与没看源码是有区别的。没看源码，虽然说得出来，但终是隔了一层纸；看了源码，才捅破了那层纸，有了自己的理解，也就能说得更加有底气了。当然，也可能是我缺乏演戏的本领。**
我个人不太赞成刷题式面试。虽然刷题确实是进厂的捷径，但也有缺点：
- 它依然是别人的知识体系，而不是自己总结的知识体系；
- 技术探究是为了未来的工作准备，而不是为了应对一时之需，否则即使进去了还是会处于麻痹状态。
经过系统的整理，我逐步形成了适合自己的技术体系结构：[“互联网应用服务端的常用技术思想与机制纲要”](https://www.cnblogs.com/lovesqcc/p/13633409.html) 。在这个基础上，再博采众长，看看面试题进行自测和查漏补缺，是更恰当的方式。我会在这个体系上深耕细作。
### 表述能力
目前，绝大多数企业的主要面试形式是通过口头沟通进行的，少部分企业可能有笔试或机试。口头沟通的形式是有其局限性的。对表述能力的要求比较高，而对专业能力的凸显并不明显。一个人掌握的专业和经验的深度和广度，很难通过几分钟的表述呈现出来。往往深度和广度越大，反而越难表述。而技术人员往往疏于表达。
我平时写得多说得少，说起来不利索。有时没讲清楚背景，就直接展开，兼之啰嗦、跳跃和回旋往复（这种方式可能更适合写小说），让面试官有时摸不着头脑。表述的条理性和清晰性也是很重要的。不妨自己测试一下：Dubbo 的架构设计是怎样的？ Redis 的持久化机制是怎样的？然后自己回答试试看。
表述能力的基本法则：
- 先总后分，先整体后局部；
- 先说基本思路，然后说优化；
- 体现互动。先综述，然后向面试官询问要听哪方面，再分述。避免自己一脑瓜子倾倒出来，让面试官猝不及防；系统设计的场景题，多问一些要求，比如时间要求、空间要求、要支持多大数据量或并发量、是否要考虑某些情况等。
### 常见问题
面试是通过沟通来理解双方的过程。面试中的问题，千变万化，但有一些问题是需要提前准备好的。
比如“灵魂 N 问”：
- 你为什么从 XXX 离职？
- 你的期望薪资是多少？
- 你有一段空档期，能解释下怎么回事么？
- 你的职业规划是怎样的？
高频技术问题：
- 基础：数据结构与算法、网络；
- 微服务：技术体系、组件、基础设施等；
- Dubbo：Dubbo 整体架构、扩展机制、服务暴露、引用、调用、优雅停机等；
- MySQL：索引与事务的实现原理、SQL 优化、分库分表；
- Redis : 数据结构、缓存、分布式锁、持久化机制、复制机制；
- 分布式：分布式事务、一致性问题；
- 消息中间件：原理、对比；
- 架构：架构设计方法、架构经验、设计模式；
- 性能优化：JVM、GC、应用层面的性能优化；
- 并发基础：ConcurrentHashMap, AQS, CAS，线程池等；
- 高并发：IO 多路复用；缓存问题及方案；
- 稳定性：稳定性的思想及经验；
- 生产问题：工具及排查方法。
### 中高端职位
说起来，我这人可能有点不太自信。我是怀着“踏实做一个工程师”的思想投简历的。
对于大龄程序员，企业的期望更高。我的每一份“高级工程师”投递，自动被转换为“技术专家”或“架构师”。无力反驳，倍感压力。面试中高端职位，需要更多准备：
- 你有带团队经历吗？
- 在你 X 年的工作经历中，有多少时间用于架构设计？
- 架构过程是怎样的？你有哪些架构设计思想或方法论？
如果不作准备，就被一下子问懵，乱了阵脚。实际上，我或许还是存着侥幸心理把“技术专家”和“架构师”岗位当做“高工”来面试的，也就无一不遭遇失败了。显然，我把次序弄反了：应当以“技术专家”和“架构师”的规格来面试高级工程师。
好吧，那就迎难而上吧！我不是惧怕挑战的人。
此外，“技术专家”和“架构师”职位应当至少留一天的时间来准备。已经有丰富经验的技术专家和架构师可以忽略。