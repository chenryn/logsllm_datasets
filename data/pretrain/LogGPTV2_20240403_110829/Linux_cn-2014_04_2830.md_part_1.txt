---
author: ''
category: 系统运维
comments_data:
- date: '2014-04-10 16:37:18'
  message: linux没用GUI的设备管理器啊。。。。
  postip: 122.191.51.4
  username: 微博评论
- date: '2014-04-11 00:36:41'
  message: 当然有……
  postip: 110.92.78.162
  username: ''
count:
  commentnum: 2
  favtimes: 8
  likes: 0
  sharetimes: 5
  viewnum: 21020
date: '2014-04-10 15:15:00'
editorchoice: false
excerpt: 系统资源监控  为使系统良好运转,Linux系统管理员经常需要监测cpu,内存,磁盘,网络等系统信息。Linux上已有iotop,top,free,htop,sar等丰富的常规工具来实现监测功能。今天让我们走进Collectl来了解这个集测试/监控/分析系统性能为一体的Linux工具。
  Collectl作为一个轻量级的监控工具,在同类工具中是功能最全的。用户可监测不同的复杂系统矩阵值,并可保留数据以做之后的分析。不同于其他只用来监测特定系统参数的工具,Collectl可以同时监测不同的变量,并以合适的方式记录它们。
  摘自Collectl官网 ...  不同于或聚焦于一小组统计数据、采用
fromurl: ''
id: 2830
islctt: true
largepic: /data/attachment/album/201404/10/151523ivereenrvlay110l.png
permalink: /article-2830-1.html
pic: /data/attachment/album/201404/10/151523ivereenrvlay110l.png.thumb.jpg
related:
- displayorder: 0
  raid: 3154
reviewer: ''
selector: ''
summary: 系统资源监控  为使系统良好运转,Linux系统管理员经常需要监测cpu,内存,磁盘,网络等系统信息。Linux上已有iotop,top,free,htop,sar等丰富的常规工具来实现监测功能。今天让我们走进Collectl来了解这个集测试/监控/分析系统性能为一体的Linux工具。
  Collectl作为一个轻量级的监控工具,在同类工具中是功能最全的。用户可监测不同的复杂系统矩阵值,并可保留数据以做之后的分析。不同于其他只用来监测特定系统参数的工具,Collectl可以同时监测不同的变量,并以合适的方式记录它们。
  摘自Collectl官网 ...  不同于或聚焦于一小组统计数据、采用
tags:
- Collectl
- 系统监控
thumb: false
title: Linux系统监控神器--Collectl
titlepic: false
translator: icybreaker
updated: '2014-04-10 15:15:00'
---
### 系统资源监控
![](/data/attachment/album/201404/10/151523ivereenrvlay110l.png)
为使系统良好运转,Linux系统管理员经常需要监测cpu,内存,磁盘,网络等系统信息。Linux上已有iotop,top,free,htop,sar等丰富的常规工具来实现监测功能。今天让我们走进Collectl来了解这个集测试/监控/分析系统性能为一体的Linux工具。
Collectl作为一个轻量级的监控工具,在同类工具中是功能最全的。用户可监测不同的复杂系统矩阵值,并可保留数据以做之后的分析。不同于其他只用来监测特定系统参数的工具,Collectl可以同时监测不同的变量,并以合适的方式记录它们。
摘自[Collectl官网](http://collectl.sourceforge.net/) ...
> 
> 不同于或聚焦于一小组统计数据、采用唯一输出方式,或采用迭代、作为守护进程运行的大部分监测工具,collectl可以同时全部实现。用户可选择各种子系统中的任一系统来监测包括内存,CPU,磁盘,索引节点,无线带宽,lustre,内存,网络,网络文件系统,进程,二次型,slabs,套接口及TCP等信息。
> 
> 
> 
深入学习前让我们先看以下命令。
```
$ collectl
waiting for 1 second sample...
#
#cpu sys inter  ctxsw KBRead  Reads KBWrit Writes   KBIn  PktIn  KBOut  PktOut 
   0   0   864   1772      0      0      0      0      0      1      0       0 
   5   2  1338   2734      0      0      8      2      0      0      0       1 
   1   0  1222   2647      0      0     92      3      0      2      0       1 
   1   0   763   1722      0      0     80      3      0      1      0       2
```
CPU使用率,磁盘输入输出和网络活动以每秒为单位来加载。对可以理解这些数据的人来说这些信息很容易读懂。这项列表在给定的时间间隔里会持续增加，并可直接形成一项文件跟踪日志。collectl工具提供了各种命令来对这些数据进行记录,查找及做其他处理。
### 安装collectl工具
对Ubuntu/Debian用户来说Collectl是默认资源,所以使用apt命令便可获取。
```
$ sudo apt-get install collectl
```
Fedora/CentOS用户使用yum命令便可获取。
```
$ yum install collectl
```
### 使用
#### 必要的了解 - Collectl子系统
子系统是可检测到的不同系统资源类型。像CPU,内存,带宽等等都可构成一个子系统。只运行collectl命令将以批处理模式输出CPU,磁盘和网络子系统信息,我们在上文已看到相关内容。
从操作说明可以看到,Collectl可以识别以下子系统。
```
总计子系统
b - buddy info (内存片段)
c - CPU
d - Disk
f - NFS V3 Data
i - Inode and File System
j - Interrupts
l - Lustre
m - Memory
n - Networks
s - Sockets
t - TCP
x - Interconnect
y - Slabs (system object caches)
细节子系统
这是一系列的详细信息,大部分情况下都会由相应的总计数据衍生出来。目前“环境变量”和“进程”2类没有相应的总计数据。如果有3个磁盘,选择-sd,将只会看到3个磁盘组合出的单一信息。如果选择-sD,将会分别显示各磁盘信息。
C - CPU
D - Disk
E - Environmental data (fan, power, temp),  via ipmitool
F - NFS Data
J - Interrupts
L - Lustre OST detail OR client Filesystem detail
M - Memory node data, which is also known as numa data
N - Networks
T - 65 TCP counters only available in plot format
X - Interconnect
Y - Slabs (system object caches)
Z - Processes
```
使用“-s”来监测特定的子系统并向其添加子系统的识别项。现在让我们举几个例子。
#### 1. 监测cpu使用率
用“-sc”实现CPU总使用率的监测
```
$ collectl -sc
waiting for 1 second sample...
#
#cpu sys inter  ctxsw 
   3   0  1800   3729 
   3   0  1767   3599
```
使用“-C”观察各个单独的CPU使用情况。结果将会输出多行,分别对应一个CPU。
```
   $ collectl -sC
waiting for 1 second sample...
# SINGLE CPU STATISTICS
#   Cpu  User Nice  Sys Wait IRQ  Soft Steal Idle
      0     3    0    0    0    0    0     0   96
      1     3    0    0    0    0    0     0   96
      2     2    0    0    0    0    0     0   97
      3     1    0    0    0    0    0     0   98
      0     2    0    0    0    0    0     0   97
      1     2    0    2    0    0    0     0   95
      2     1    0    0    0    0    0     0   98
      3     4    0    1    0    0    0     0   95
```
如果需要,可以同时使用C和c来获取单项CPU监测数据和汇总数据。
#### 2. 内存监测
使用m子系统查看内存。
```
$ collectl -sm
waiting for 1 second sample...
#
#Free Buff Cach Inac Slab  Map 
   2G 220M   1G   1G 210M   3G 
   2G 220M   1G   1G 210M   3G 
   2G 220M   1G   1G 210M   3G
```
不难解释。 M用来查看更多内存的详细信息。
```
$ collectl -sM
waiting for 1 second sample...
# MEMORY STATISTICS 
# Node    Total     Used     Free     Slab   Mapped     Anon   Locked    Inact Hit%
     0    7975M    5939M    2036M  215720K  372184K        0    6652K    1434M    0
     0    7975M    5939M    2036M  215720K  372072K        0    6652K    1433M    0
```
这类似于免费报告吗？
#### 3. 查看磁盘使用情况
d和D可以查看磁盘使用的概况和详细情况。
```
$ collectl -sd
waiting for 1 second sample...
#
#KBRead  Reads KBWrit Writes 
      4      1    136     24 
      0      0     80     13
$ collectl -sD
waiting for 1 second sample...
# DISK STATISTICS (/sec)
#           Pct
#Name       KBytes Merged  IOs Size  KBytes Merged  IOs Size  RWSize  QLen  Wait SvcTim Util
sda              0      0    0    0       0      0    0    0       0     0     0      0    0
sda              0      0    0    0       0      0    0    0       0     0     0      0    0
sda              1      0    2    1      17      1    5    3       2     2     6      2    1
sda              0      0    0    0      92     11    5   18      18     1    12     12    5
```
“--verbose”命令可以用来查看附加信息。和D命令不同,它将概况扩展,包含了更多信息。
```
$ collectl -sd --verbose
```
#### 4. 同时报告多系统情况
如果想要同时得到CPU,内存和磁盘报告,那么同时使用子命令组合来实现。
```