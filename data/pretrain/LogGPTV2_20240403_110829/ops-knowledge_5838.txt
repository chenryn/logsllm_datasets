User: 如何使用Docker构建一个基于Ubuntu的Web应用程序容器？
Assistant: 1. 安装Docker

首先，需要在Ubuntu上安装Docker。可以参考Docker官方文档，选择适合自己Ubuntu版本的Docker安装方式。

2. 准备Web应用程序

在本地创建一个文件夹，将Web应用程序代码存放在其中。确保Web应用程序可以在本地运行。

3. 编写Dockerfile

在Web应用程序代码所在的文件夹中创建一个名为Dockerfile的文件，该文件用于指定Docker容器应该如何配置、构建和启动。

Dockerfile中的每一行都代表一个指令。以下是一个基本的Dockerfile示例：

```Dockerfile
FROM ubuntu:latest
MAINTAINER Your Name <your-email@domain.com>

RUN apt-get update
RUN apt-get install -y apache2 php libapache2-mod-php php-mysql

COPY . /var/www/html/

EXPOSE 80

CMD ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]
```

该文件包含了以下指令：

- FROM：使用最新的Ubuntu镜像作为基础镜像
- MAINTAINER：指定Docker镜像的维护者信息
- RUN：更新Ubuntu包管理器，安装必要的软件包
- COPY：将本地文件复制到容器内
- EXPOSE：指定容器监听的端口
- CMD：在容器内运行的命令

在本例中，使用最新版本的Ubuntu镜像作为基础镜像，并安装了Apache、PHP和MySQL等必要软件包。在容器内将Web应用程序的文件夹复制到/var/www/html/目录下，最后启动Apache服务器并监听80端口。

4. 构建Docker镜像

完成Dockerfile的编写后，现在需要使用docker build命令来构建Docker镜像：

```
docker build -t mywebapp .
```

-t参数用于指定镜像的名称，mywebapp是自定义的镜像名称，可以根据自己的需要修改。最后的.代表Dockerfile所在的当前文件夹。

在该命令执行完成后，会生成一个名为mywebapp的Docker镜像。

5. 运行Docker容器

最后，可以使用docker run命令来启动Docker容器：

```
docker run -p 80:80 -d mywebapp
```

-p参数用于将容器内的端口映射到主机上的端口。在本例中，将容器内的80端口映射到主机上的80端口。-d参数用于在后台运行容器。

通过浏览器访问http://localhost，即可看到已经部署在Docker容器中的基于Ubuntu的Web应用程序。