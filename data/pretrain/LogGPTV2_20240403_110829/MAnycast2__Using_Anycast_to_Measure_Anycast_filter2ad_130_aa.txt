title:MAnycast2: Using Anycast to Measure Anycast
author:Raffaele Sommese and
Leandro Marcio Bertholdo and
Gautam Akiwate and
Mattijs Jonker and
Roland van Rijswijk-Deij and
Alberto Dainotti and
kc claffy and
Anna Sperotto
MAnycast2 – Using Anycast to Measure Anycast
Raffaele Sommese
University of Twente
PI:EMAIL
Mattijs Jonker
University of Twente
PI:EMAIL
Leandro Bertholdo
University of Twente
PI:EMAIL
Roland van Rijswijk-Deij
University of Twente
PI:EMAIL
Gautam Akiwate
UC San Diego
PI:EMAIL
Alberto Dainotti
CAIDA/UC San Diego
PI:EMAIL
KC Claffy
CAIDA/UC San Diego
PI:EMAIL
ABSTRACT
Anycast addressing – assigning the same IP address to multiple,
distributed devices – has become a fundamental approach to im-
proving the resilience and performance of Internet services, but
its conventional deployment model makes it impossible to infer
from the address itself that it is anycast. Existing methods to detect
anycast IPv4 prefixes present accuracy challenges stemming from
routing and latency dynamics, and efficiency and scalability chal-
lenges related to measurement load. We review these challenges
and introduce a new technique we call “MAnycast2” that can help
overcome them. Our technique uses a distributed measurement
platform of anycast vantage points as sources to probe potential
anycast destinations. This approach eliminates any sensitivity to
latency dynamics, and greatly improves efficiency and scalability.
We discuss alternatives to overcome remaining challenges relating
to routing dynamics, suggesting a path toward establishing the
capability to complete, in under 3 hours, a full census of which IPv4
prefixes in the ISI hitlist are anycast.
CCS CONCEPTS
• Networks → Naming and addressing; Public Internet.
ACM Reference Format:
Raffaele Sommese, Leandro Bertholdo, Gautam Akiwate, Mattijs Jonker,
Roland van Rijswijk-Deij, Alberto Dainotti, KC Claffy, and Anna Sperotto.
2020. MAnycast2 – Using Anycast to Measure Anycast. In ACM Internet
Measurement Conference (IMC ’20), October 27–29, 2020, Virtual Event, USA.
ACM, New York, NY, USA, 8 pages. https://doi.org/10.1145/3419394.3423646
1 INTRODUCTION
Originally developed to ease service discovery in internetworks [23],
on the Internet anycast is the operational routing practice of origi-
nating a particular block of address space from multiple, distributed,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’20, October 27–29, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8138-3/20/10...$15.00
https://doi.org/10.1145/3419394.3423646
Anna Sperotto
University of Twente
PI:EMAIL
topological locations, leaving to the BGP interdomain routing sys-
tem to route packets according to its route selection scheme [17].
An early anycast success was to enable the mitigation of a limita-
tion of the original DNS specification, which allowed only thirteen
root nameservers. Starting in the early 2000s, root server operators
began to distribute instances of these authoritative name servers
around the world to improve resolution time, resiliency, and ro-
bustness to DDoS attacks. Public recursive DNS resolvers such
as those operated by Cloudflare, Google, Quad9, and OpenDNS
also use anycast. Anycast has also gained widespread adoption by
cloud providers, content delivery networks (CDNs), and hundreds
of other Internet services [4, 7, 9, 14, 15].
As anycast became a common way to improve resiliency of
Internet services, and resiliency of critical communications infras-
tructure became a public policy issue, researchers have pursued
methods for third-party inference of anycast deployment, i.e., iden-
tifying which addresses are anycasted and from where [7–9]. For
example, identifying address prefixes that are anycast would enable
more accurate assessment of resilience properties.
Although IPv6 introduced functionality to use a special format
for anycast addresses [18], the IPv4 approach, which also works in
IPv6, is to assign multiple hosts the same unicast address, leaving
the fact that it is anycast opaque to the routing system and the
end users. This opacity creates a measurement challenge. In this
paper, we propose a new measurement and inference technique
to efficiently detect anycast prefixes, and we analyze its practical
challenges. Our technique—which we call MAnycast2—is inspired
by a study from De Vries et al. [11], which probes targets across
the Internet from a mesh of anycast nodes in order to learn their
anycast catchment, i.e., which anycast node receives response traffic
from a given probed target. Similar to that work, we use anycast
vantage points (VPs) as sources, but in our case the goal is to infer
whether a set of target destination IP addresses are themselves
anycast. More precisely, contrary to the Verfploeter original goal,
our is to learn characteristics of the forward path by inspecting
the reverse one. Unlike previous approaches to infer whether a
given prefix is anycast [9], our approach eliminates any sensitivity
to latency dynamics, and improves efficiency and scalability: in
less than 3 hours, we inferred the anycast state of 6.1 million IPv4
addresses from the ISI IPv4 Address Hitlist [13, 27], mapping a
significant responsive portion of the IPv4 prefix space.
IMC ’20, October 27–29, 2020, Virtual Event, USA
Sommese, Bertholdo, Akiwate, Jonker, Rijswijk-Deij, Dainotti, Claffy and Sperotto
MAnycast2 does not enable identification of anycast catchments,
i.e., which anycast instance receives packets from which source IP
addresses. However, one could pipeline our technique with tradi-
tional, but less efficient latency-based inference methods. Specifi-
cally, one could use our lightweight protocol-agnostic technique
to probe a large set of IP addresses, identifying a much smaller
set of inferred anycast prefixes to which they could then apply a
catchment-inference measurement method. Thus, our technique
can reduce the time required for a comprehensive anycast detec-
tion census of the IPv4 space from weeks to days. However, we
identified open challenges that require consideration to perform
an accurate anycast census using our technique.
2 RELATED WORK AND BACKGROUND
As anycast deployment of DNS services ramped up, some operators
used non-standard conventions to identify which name server in-
stance responded to a particular DNS query. One such convention
re-purposed an older BIND implementation feature, the CHAOS-
class DNS record, to return a unique string per anycast server in-
stance. The IETF later proposed more standard approaches [3, 29],
including a Best Current Practice (BCP) to use unique autonomous
system (AS) numbers for each anycast instance [21].
Starting in 2013, researchers began to develop methods for third-
party detection and enumeration of anycast instances. Xun et al.
[30] inferred the use of anycast for DNS top-level domain (TLD)
servers, enumerating instances using the CHAOS query, as well
as regular DNS queries, and using traceroute to resolve ambigui-
ties in resulting responses. In 2015, Cicalese et al. [8] introduced
iGreedy (§2.1), a method based on the Great-Circle Distance (GCD),
which later they used to perform a census of anycast deployment
on the Internet [9]—we provide additional background on GCD in
Appendix §A and discuss iGreedy further in §2.1. Bian et al. [6]
proposed a passive approach to detect anycast prefixes that did
not rely on any active measurements, but rather used public BGP
data from route collectors. They built a machine-learning classifier
using features extracted from this BGP data, such as the number of
upstream ASes, distances between ASes, and AS path lengths. They
trained the classifier using near-ground-truth data from Cicalese et
al. [9]. They achieved an accuracy of 90% in detecting ∼4K anycast
prefixes. They also discovered a performance impact, specifically
an average increase in RTT, for anycast prefixes affected by remote
peering. Other studies have also explored performance aspects of
anycast deployments [19].
Our approach builds on work by De Vries et al. [11], who de-
ployed active measurements from Cloudflare’s anycast CDN. Using
an established technique that used pings to map the catchment of
anycast nodes [12], their goal was to identify spoofed traffic reach-
ing their network. They observed that for each probed /24 prefix,
ping responses return consistently to the same anycast instance,
regardless of which instance sent the probes. We expand upon this
intuition by using anycast instances as sources, i.e., VPs, to discover
other anycast prefixes across the Internet.
Figure 1: MAnycast2 overview; anycast VPs are red, target
IPs green, arrows are probe and response, respectively. Re-
sponses arrive at a single VP if target IP is unicast (dotted
line), or at multiple VPs if target IP is anycast (continue line)
2.1 iGreedy
In this paper, we use GCD [7, 9] as the reference method for latency-
based anycast detection. GCD relies on RTT measurements to es-
timate, based on triangulation, if a set of responses could be orig-
inated by the same geographical source. iGreedy 1.0, developed
by Cicalese and Rossi, implemented the GCD approach using Plan-
etLab servers and RIPE Atlas probes as unicast VPs. iGreedy was
used in [9] with 50 to 200 PlanetLab servers (now discontinued)
for anycast detection, and 350 to 500 RIPE Atlas probes for the
follow-up enumeration and geolocation. iGreedy, and GCD-based
approaches in general, are time and resource-consuming measure-
ments: a complete census using iGreedy on the ISI IP hitlist [13]
would require measurement of ∼6.1 million IP addresses from ∼200
measurement nodes. To put this requirement into perspective, clas-
sifing 50k IPs (∼1% of the IP hitlist) with this method would cost
∼20M RIPE Atlas credits. RIPE’s limit on the number of IPs a user
can measure concurrently means that it would require two days
using 200 RIPE Atlas probes. Using only 10 probes (suggested by
the iGreedy documentation for a simple anecdotal usage) and per-
forming only detection would lower this cost to 1M credits for 50k
IP addresses, which still amounts to ∼122M credits to probe the
entire set of 6.1 million IP addresses in the hitlist. For reference,
an Atlas probe earns 21600 credits per day [24]. Given the credit
costs and time requirements, it is not possible to sustain a long-
term census of anycast using this methodology on the RIPE Atlas
platform. More importantly, in terms of measuring responsibly,
one probably should not try: the Atlas team confirmed to us that
one-time measurements, like the iGreedy ones, put a significant
strain on the Atlas platform. An alternative would be using other
platforms (e.g. Ark, MLab) or cloud providers. However diversity
in connectivity of VPs also plays a role in validity of results.
Given the important role that anycast plays in resilience of mod-
ern Internet services, we pose the question: how can we responsibly
and efficiently perform a regular census of anycast deployment? We
Source VP of our Anycast PlatformTarget IP (Anycast)ICMP Echo RequestICMP Echo ReplyTarget IP (Unicast)MAnycast2 – Using Anycast to Measure Anycast
IMC ’20, October 27–29, 2020, Virtual Event, USA
propose a new method that offers a promising path toward pursu-
ing this challenge, and identify how to approach the refinements
required to accommodate the complexity of the Internet’s topology.
3 METHODOLOGY
The intuition behind MAnycast2 is that we can use an anycast
service to detect other anycast deployments. In this section we
explain our approach in detail.
3.1 Anycast Inference Technique
Our methodology leverages anycast instances on an existing any-
cast fabric as VPs. We use these VPs in concert to identify if a target
IP address is anycast. Since both source and destination IP addresses
are potentially anycast, we will use the terms VP instance and target
IP instance to distinguish these two sets of nodes, and closest to refer
to the anycast instance closest to an IP address in terms of BGP
routing. Our technique relies on the hypothesis of stable routing
of anycast deployments, which has been analyzed in [28].
As the VPs are anycast, a response to a probe sent from any VP
to a target IP address will be received by the VP instance closest to
the responding target IP. If the target IP is anycast, then the probe
will reach the closest target IP instance of the target’s anycast de-
ployment, and the response to this probe will reach the VP instance
closest to the responding target IP instance. Thus, assuming stable
routing, a target IP is likely unicast if all responses from the target
IP are received at a single VP instance. Conversely, a target IP is
likely anycast if responses are received at multiple VP instances.
Fig. 1 illustrates these two scenarios.
If we compare our approach to the traditional anycast detec-
tion technique discussed in §2.1, we note that we do not rely on
RTT measurements (with their consequent limitations), but instead
leverage how the routing system uses topological proximity to
route traffic to the nearest instance of an anycast service in both
directions (from VP to target, and from target back to VP).
3.2 Anycast Measurement Framework
We use the Tangled [5] framework to implement our anycast mea-
surement infrastructure. Tangled has ten anycast instances (VPs),
receiving transit from a combination of Internet Service Providers
(ISPs), commercial data-centers, academic networks, and Internet
Exchange Points (IXPs) to preserve diversity of connections. Tan-
gled has its own Autonomous System (AS) and IP prefix to support
experiments. In Table 5, we report a summary of Tangled VPs. For
probing we use Verfploeter [12], a global probing system running
on the Tangled testbed that was developed to monitor anycast catch-
ment distributions. Verfploeter probes the target IPs with ICMP
Echo Requests and uses the ICMP Reply from each target IP to map
clients to an anycast instance. For a given list of target IPs, each VP
sequentially probes all the targets. Once one VP finishes probing,
the next VP repeats the sequence of probing.
Our implementation infers whether an IP address is unicast or
anycast with one ping from each of ten VPs, although potentially,
our approach could work with UDP or TCP scanning. Since our
methodology relies on ICMP Echo Replies not being filtered, we use
the ISI IPv4 hitlist [13] to target IP addresses likely to respond to
pings. Using this list, we probe addresses in ∼6.1M IPv4 /24 prefixes.
Classification
# VPs
Unicast
Anycast*
Anycast*
Anycast
Anycast
Anycast
Anycast
Anycast
Total Anycast
1
2
3
4
5
6
7
10
*
Distinct /24s
3451133
10393
719
1378
2467
567
13
3
15540
Distinct ASNs
55209
1058
162
86
83
39