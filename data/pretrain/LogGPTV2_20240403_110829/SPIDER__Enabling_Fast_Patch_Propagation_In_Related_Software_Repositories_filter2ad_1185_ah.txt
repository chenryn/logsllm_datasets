It seems like the text you provided is a mix of characters, numbers, and parts of a research paper. I will attempt to reconstruct and optimize the relevant sections of the paper, focusing on clarity, coherence, and professionalism.

---

**Authorized Use:**
Licensed for use by Tsinghua University. Downloaded on March 19, 2021, at 09:21:07 UTC from IEEE Xplore. Restrictions apply.

---

### **Figure 5: Distribution of Security Patches in Mainline Linux Kernel and Vendor Kernels**

- **Missing Security (Non-CVE) Patches:**
  - Project ID 1: 15.8%
  - Project ID 2: 15.5%
  - Project ID 3: 12.1%
  - Project ID 4: 11.3%
  - Project ID 5: 18.1%
  - Project ID 6: 16.5%
  - Project ID 7: 19.0%
  - Project ID 8: 16.0%
  - Project ID 9: 14.1%

- **Missing sps:**
  - Project ID 1: 13.3%
  - Project ID 2: 7.4%
  - Project ID 3: 6.2%
  - Project ID 4: 7.5%
  - Project ID 5: 6.0%
  - Project ID 6: 5.8%
  - Project ID 7: 3.8%
  - Project ID 8: 2.0%
  - Project ID 9: 3.0%

This figure illustrates the distribution of security (non-CVE) patches and sps in the mainline Linux kernel (Project ID 1) that are missing in other related kernel projects (Project IDs 2-9).

---

### **Listing 4: Security Patch Identified by SPIDER**

```c
if (f.file->f_op != &xfs_file_operations || tmp.file->f_op != &xfs_file_operations) {
    error = -EINVAL;
    goto out_put_tmp_file;
}

ip = XFS_I(file_inode(f.file));
tip = XFS_I(file_inode(tmp.file));
```

This listing shows a security patch identified by SPIDER in the main Linux kernel repository (commit 3e0a3965464505), which does not have a corresponding CVE ID.

---

### **Table III: Results of SPIDER on CVE Patches**

| Source        | Total CVE Patches | Detected by SPIDER | Percentage |
|---------------|-------------------|--------------------|------------|
| Linux         | 611               | 333                | 54.5%      |
| Android       | 164               | 98                 | 59.75%     |
| OpenBSD       | 6                 | 5                  | 83.33%     |
| OpenSSL       | 21                | 7                  | 33.33%     |
| Systemd       | 4                 | 4                  | 100%       |
| VLC           | 3                 | 1                  | 33.33%     |
| **Total**     | **809**           | **448**            | **55.37%** |

This table summarizes the results of SPIDER in detecting CVE patches across different sources.

---

### **Listing 6: Non-CVE Security Patch**

```c
uint32_t start, uint32_t size) {
    if ((start + size) < start || (addr + size) < addr) {
        return false;
    }
    // Check for boundary conditions
    if (start > addr && (start + size) <= (addr + size)) {
        return true;
    }
    if (addr > start && (addr + size) <= (start + size)) {
        return true;
    }
    return false;
}
```

This listing shows a non-CVE security patch (commit d77d97c9a1f) that fixes a reference counting vulnerability in the Python interpreter, as identified by SPIDER.

---

### **E. Missing Patches in Vendor Kernels**

To identify missing patches in vendor kernels, we checked how many of the Linux Kernel mainline commits identified as sps still need to be applied to one or more of the eight vendor kernel repositories (Projects 2-9). We extracted the affected file's source code before the change and compared it to the same file in all listed kernel repositories using the `git diff` technique described in Section VII-B.

- **Figure 5** shows the percentage of missing sps in different vendor kernels.
- **9,427 of the 20,171 Linux kernel identified sps (46.74%)** are still not applied in at least one of the considered vendor kernels.
- **297 of these are CVE patching commits** that still need to be imported by the maintainers of some repositories, supporting findings from previous studies [57], [53], [22], [41] that vulnerability databases are not always effective in speeding up the propagation of security fixes.

**Unfixed Vulnerabilities in Vendor Kernels:**
- We also checked the security patches (without a CVE number) identified by the SeP mode in the Linux Kernel mainline that still need to be applied to one or more of the eight Linux Kernel repositories.
- There are **229 security patches** without a corresponding CVE number that are missing in different kernel repositories, including the ARM Linux kernel main repository (Project ID 2).
- These can be seen as potential unfixed or n-day vulnerabilities. We manually verified them to assess their impact. For a few, the impact is less severe due to variations in kernel configurations. However, we found several missing patches in critical components like netfilter, which applies to all kernel configurations.
- The snippet of a non-CVE security patch missing in the msm kernel (ID 4) is shown in Listing 11, and this patch also contains the triggering input.
- We are in the process of reporting all these patches to the corresponding project maintainers and vendors and submitting the necessary requests for CVEs.

---

### **VIII. Limitations**

SPIDER comes with several limitations:

- **Small Patches:** As shown in Figure 6, the majority (57.1%) of the patches detected as sps are small (0-5 lines). SPIDER cannot verify patches that modify statements within a loop.
- **Syntactic Approach for Patch Applicability Check:** We use a syntactic approach to check for patch applicability in related repositories. A patch may be syntactically applicable but not semantically applicable because the condition fixed by the patch might be impossible to occur in the project [40].
- **Heuristic Approach for Error-Handling Basic Blocks Detection:** We use a heuristic approach to identify error-handling basic blocks, which may not hold for other projects, leading to cases where a basic block matching our heuristics is not a true error-handling basic block. To handle this, we provide the NoEB mode of SPIDER (Appendix I) where we do not ignore changes in error-handling basic blocks.
- **Susceptible to Adversarial Evasion:** SPIDER is susceptible to adversarial evasion, such as using macro calls to make SPIDER consider otherwise safe patches as unsafe.
- **Tool Dependencies:** The current implementation of SPIDER works only on C source code, but the parser should be easily extensible to other languages. The fine-grained diff step is language-agnostic, so extending the tool to other languages would require adding language-specific heuristics and preprocessing.

---

### **IX. Related Work**

- **Vulnerability Finding and Exploitation:** SPIDER can be used to find instances of unpatched code starting from the identified sps, including vulnerabilities. Prior research has focused on finding unpatched code clones [50], [41], [49]. Brumley et al. [28] show how to generate exploits for a vulnerability starting from the corresponding patch.
- **Easing the Patching Process:** Prior research has designed approaches and built tools to ease and speed up the patching process [59], [71], [20]. However, most techniques target specific bug classes [55]. Other studies concentrate on helping developers apply systematic changes [78], [54]. Long et al. [51] use machine learning to model correct code and generate generic defect fixes.
- **Software Evolution:** Mining software repositories is a well-known technique to gain insights into software evolution [39], [38]. Perl et al. [61] built VCCFinder, a tool that leverages code metrics and patch features to identify vulnerability-contributing changes. However, we do not rely on commit messages and instead perform a systematic analysis of the patches.

---

### **X. Conclusion and Future Work**

In this work, we designed, implemented, and evaluated SPIDER, a fast and lightweight tool based on our sp identification approach. Our large-scale evaluation on 341,767 commits from 32 different open-source repositories and 809 CVE patches demonstrates SPIDER's effectiveness, showing that a significant amount of security patches (55.37%) could have been automatically identified. Furthermore, we show how the SeP mode of SPIDER can be used to find unpatched security issues.

**Acknowledgements:**
We thank the anonymous reviewers and our shepherd Alina Oprea for their valuable comments and input to improve our paper. This material is based upon work supported by AFRL, ONR, NAVSEA, and DARPA. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements of the sponsors.

---

**Notes:**
- [List of URLs and references]

**References:**
- [List of references]

---

I hope this optimized version meets your requirements. If you need further adjustments or additional sections, please let me know.