numbers indicating the number of unique attack implementations.
layout are less likely to be viable candidates for constructing
hardware Trojans. IC layouts with few desirable (critical-
net, trigger-space) pairs are much more time-consuming to
attack. Namely, the IC layouts with heatmaps that indicate
a higher percentages of far-apart (critical-net, trigger-space)
pairs, where the trigger spaces are small, are most secure.
From Figure 10, we conclude that at high density, max
transition time has little affect on IC layout security; while
at lower densities, lower max transition time designs are more
secure. Similar trends exist across other layout parameters, as
shown in Figures 13–15 in Appendix A.
From our Route Distance analysis, we conclude future
undirected defenses should modulate layout parameters that
maximimze the distance between security critical wires and
open trigger spaces. In doing so, defenders: 1) maximize
intra-Trojan routing difﬁculty, and 2) restrict attackers from
implanting timing-critical Trojans.
4) Cost of Varying Layout Parameters: The results indi-
cate that increasing core density is effective, but incomplete,
and increasing clock frequency and decreasing max transition
time is marginally effective and incomplete. While tuning
these parameters is low cost to the designer, there is a cost
to the design in terms of complexity and power requirements.
We elucidate by discussing how varying each design parameter
(density, clock frequency, and max transition time) impacts
non-security characteristics of a circuit design.
While increasing core density to 90% makes placing-and-
routing a Trojan more difﬁcult, it also makes placing-and-
routing the rest of the design more challenging. Speciﬁcally, it
can become nearly impossible to meet timing closure for the
entire design if there is not enough space within the core area
to re-size cells and/or add additional buffer cells. Depending
100150200250300Max Transition (ps)102030405060708090Net Blockage (%)Clock (MHz)1002005001000on performance and security requirements, a layout engineer
may choose to relax timing constraints in order to achieve
a higher core density. Alternatively, a layout engineer may
attempt to surround security-critical nets with areas of high
densities, while maintaining a lower overall core density, as
previously suggested [13], [16].
Decreasing the maximum transition time and increasing
the clock speed of an entire circuit design makes it more
difﬁcult
to place-and-route a functional Trojan that meets
timing constraints, but also directly impacts the performance
characteristics of the circuit. Additionally, it is important to
note that max transition time is related to the clock fre-
quency, so varying one without the other changes performance
tolerances. While increasing the performance of the design
might increase security, it comes at the cost of increasing
power consumption. Depending on the power-consumption
requirements of the design, it may be possible for a designer
to over-constrain these parameters for added security.
C. Directed Defense Coverage
As an alternative to probabilistically adding impediments
to the attacker inserting a hardware Trojan, recent works
proposes a directed approach. As detailed in §IV-B, placement-
centric directed defenses [13], [16] attempt to prevent the
attacker from implementing their Trojan by occupying all
open placement sites with tamper-evident ﬁller cells. The
limitation with such defenses is that it is infeasible to ﬁll all
open placement sites with tamper-evident logic [16]. Thus, the
defenses focus their ﬁlling near security-critical logic, leaving
gaps near the periphery of the IC layout. Whether these open
placement sites near the periphery are sufﬁcient to implement
an attack is an open question.
The goal of this evaluation is to determine not only if
is still possible for a foundry-level attacker to insert a
it
hardware Trojan, given placement-centric defenses, but
to
quantify the number of viable implementations available to
the attacker—to act as a surrogate for attacker complexity.
For the evaluation, We use our three IC designs (OR1200
processor SoC, AES accelerator, and DSP accelerator). For
each design, we create two IC layouts: (1) unprotected and
(2) protected. For the protected IC layout, we use the latest
placement-centric defense [13]; using the identiﬁed security-
critical wires (§VII-A) to direct the defense. We lay out all
IC designs using these parameters: target clock frequency of
100 M Hz, max transition time of 100 ps, and a target core
density of 60%.
We then use ICAS to asses the defensive coverage of each of
the six IC layouts. This analysis has two goals: (1) determine
whether the IC is vulnerable to attack and (2) understand the
impact of applying the defense. We answer both questions
in an attack-centric manner using the hardware Trojans in
Table I to asses defensive coverage against. For each attack/IC
layout combination we plot the number of (security-critical-
net, trigger-space) pairs that could be used in implementing
each Trojan. A (security-critical-net,
trigger-space) pair is
considered a viable candidate for implementing a Trojan if:
Fig. 11. Routing Distance heatmaps across three IC designs, with and without
the placement-centric defense described in [13], [16]. Heatmaps should be
interpreted similar to Fig. 10.
1) the trigger space size is at least as large as the minimum
number of placement sites required to implement the
desired hardware Trojan design
2) the security-critical net is less than 100% blocked
3) if the hardware Trojan is “Timing-Critical”, i.e., it must
function at the design’s core operating frequency, then
the distance between the trigger space and open inte-
gration point on the security-critical net must be ≤ 3
standard deviations from average net length; otherwise,
any distance is allowed.2
Figure 11 shows the defensive coverage for each IC design.
Overlaid on each heatmap are rectangles (and numbers) indi-
cating unique possible attack implementations. These results
show that existing placement-centric defenses are effective at
reducing an IC’s fabrication-time attack surface, compared to
no defense—but gaps persist. Given that ﬁlling placement sites
with tamper-evident logic is already maximized, these results
point to systematically adding congestion around security-
critical wires as a means to close all remaining defensive gaps;
i.e., a directed version with similar effect to existing undirected
defenses.
VIII. DISCUSSION
ICAS is the ﬁrst tool to provide insights into the security of
physical IC layouts. It is extensible across many dimensions
including CAD tools, process technologies, security metrics,
and fabrication-time attacks and defenses. To demonstrate
ICAS’ capabilities we implemented three security metrics (net
blockage, trigger space, and routing distance) using it. The
focus of this paper is using these metrics to estimate the
coverage of existing untrusted foundry defenses, which show
2Three standard deviations from the average net length is the threshold
for Trojan-to-integration-point routing without violating timing constraints,
because it accounts for 99.7% of the designs’ wires—outliers tend to be power
wires. For an exact calculation, it is possible to extract parasitics for a target
Trojan’s route to determine if it violates timing constraints.
that IC designs are still vulnerable to attack. We envision uses
for ICAS beyond this, as an integral part of the IC design
process using commercial tools.
1) ICAS-Driven Defensive Layout:
ICAS provides an
added notion of security to the IC layout (place-and-route)
process to enable researchers to explore countermeasures
against fabrication-time attacks. To the best of our knowledge,
the existing targeted defensive IC layout techniques [13], [15],
[16] are entirely placement-centric, i.e., ﬁlling unused space
on the device layer with functional logic cells. While ICAS
is capable of evaluating placement-centric defensive layout
techniques, its security-insights also asses routing-centric de-
fensive layout techniques. For example, layout engineers can
leverage ICAS to create high degrees of routing congestivity
in close proximity to security-critical nets. ICAS’ security
metrics enable IC layout designers to optimize the security
of both the placement and routing of their designs.
2) Constrained Security Metrics:
In its primary state,
ICAS focuses on computing metrics that reason about the
spatial resources required to implant hardware Trojans in
IC layouts. While our metrics are unconstrained and thus
conservative, it is trivial to extend, and constrain, ICAS metrics
to account for other layout resources that may impact an
attacker’s decision process. For example, even with a plethora
of spatial resources available to insert Trojan components,
doing so in certain areas of the chip may impact local power
consumption enough to disrupt normal operating behavior.
Alternatively, inserting a hardware Trojan nearby un-shielded,
fast toggling, interconnects may negatively impact the Tro-
jan’s signal integrity, rendering it benign. We recognize it is
impractical to consider all possible constraints, and hence we
design ICAS to be extensible.
3) Extensibility of Security Metrics: GDSII-Score is the
ICAS tool that computes security metrics from an IC layout.
It loads several ﬁles describing the IC layout to instantiate
a single Python class (called “Layout”) that contains query-
able data structures containing a polygon representation of all
components in the layout. Additionally, GDSII-Score contains
several subroutines that compute spatial relationships between
polygon objects and points within the layout. From these
data structures and the provided subroutines, it is trivial to
integrate additional metrics into GDSII-Score. To facilitate
additional metrics, we open-source GDSII-Score [20], and our
three example metrics that demonstrate how to query the main
“Layout” data structure.
4) Extensibility of CAD Tools: Almost all steps of the
IC design process utilize CAD tools. ICAS integrates into
a commercial IC design process after placement-and-routing
(Figure 1). While ICAS is validated with IC layouts generated
by Cadence tools, integrating ICAS with other vendors’ CAD
tools does not require any additional effort due to the common
process technology (LEF) and GDSII speciﬁcations used by
ICAS.
5) Extensibility of Process Technologies: We test ICAS
using IC layouts built with a 45 nm SOI process technology;
however, ICAS is agnostic of process technology. The LEF
Fig. 12. We assume that, at the very least, layout-level additive Trojans require
adding rogue wires to the layout3. Whether the Trojan design is integrated
(requires connecting to a host circuit) or standalone, or requires additional
transistors, the difﬁculty of inserting it into a victim IC layout can be captured
by our three metrics: 1) Trigger Space (TS), 2) Net Blockage (NB), and 3)
Route Distance (RD).
and layer map ﬁles (§VI) are the only ICAS input ﬁles that
are dependent on the process technology. A LEF ﬁle describes
the geometries and characteristics of each standard cell in
the cell library, and the layer map ﬁle describes the layer
name-to-number mappings, respectively, for a given process
technology. ICAS adapts to different process technologies
provided that all input ﬁles adhere to their speciﬁcations [37],
[40].
6) Limitations: The goal of ICAS is to estimate the sus-
ceptibility of circuit layouts to additive hardware Trojans,
thus there are limitations. First, as implemented, ICAS is not
capable of estimating the susceptibility of a circuit layout
to subtractive or substitution Trojans. We are unaware of
any stealthy and controllable subtractive hardware Trojans,
but should researchers develop such an attack, metrics will
need to be added to ICAS to enable detection. Dopant-level
Trojans are the closest example of substitution Trojans [4],
[5]. Though their non-existent footprints make them difﬁcult to
detect via side channels, post-fabrication imaging techniques
that can identify such Trojans have been proposed [48]. Lastly,
our implemented metrics do not capture the threat of via-
only additive Trojans. A via-only attack shorts two vertically-
adjacent wires for the purpose of leaking information. We
feel the possibility of such pernicious attacks in the future
highlights the importance of ICAS’s extensibility.
7) Justiﬁcation for Metrics: As a ﬁrst step in estimating
risk, we chose to implement three metrics that capture our
decade worth of experience in implementing hardware Trojans:
net blockage, trigger space, and route distance. These metrics
capture the challenges we faced when inserting various types
i.e., Trojan logic
of additive Trojans into circuit
placement, victim/Trojan integration, intra-Trojan routing. To
facilitate mapping our metrics to speciﬁc Trojans we provide
a taxonomy in Figure 12. To summarize the taxonomy: if a
Trojan needs to attach to a victim wire (i.e., an integrated
Trojan), our Net Blockage metric provides coverage; if the
Trojan requires transistors to implement logic, our Trigger
layouts,
3Via-only attacks are outside the scope of our metrics as they are currently
implemented (§VIII-6).
Additive (Layout-Level) TrojansDesign Type?Add Transistors?Parasitic WireRDParasitic CircuitTS, RDShort-CircuitNB, RDFunctionalTS, NB, RDStandaloneYesNoIntegratedYesNoTS= Trigger Space; NB= Net Blockage; RD= Route Distance Add Transistors?Space metric provides coverage; and if the Trojan needs to be
near the victim wire (for capacitive coupling in the case of a
standalone Trojan or to meet timing requirements in the case
of a integrated Trojan), our Route Distance metric provides
coverage. Additionally, as our evaluation with existing Trojans
and real IC layouts shows, our metrics are both Trojan- and
IC-layout- sensitive. Lastly, the metrics are hardware design
agnostic. While we do not suggest
the implemented
metrics are all-encompassing, our results suggest that these
metrics are a viable ﬁrst step towards estimating a circuit’s
susceptibility to additive hardware Trojans.
that
IX. RELATED WORK
Fabrication-time attacks and defenses have been extensively
researched. Attacks have ranged in both size and triggering-
complexity [4]–[6], [28], [29]. Defenses against these attacks
include: side-channel analysis [9], [10], [12], [49],
imag-
ing [50], [51], on-chip sensors [52], [53], and preventive
measures [13]–[16]. The most pertinent attacks and defenses
are highlighted below.
A. Untrusted-foundry Attacks
The ﬁrst foundry-level attack was conceived by Lin et
al. [28]. This hardware Trojan was comprised of approxi-
mately 100 additional logic gates and designed to covertly
leak the keys of an AES cryptographic accelerator using
spread spectrum communication to modulate information over
a power side channel. While the authors only demonstrated this
attack on an FPGA, they are the ﬁrst to mention the possibility
of this type of Trojan circuit being implanted at an untrusted
foundry.
The A2 attack [6] is the most recent fabrication-time attack.
A2’s analog triggering mechanism is stealthy, controllable, and
small. It prevents the Trojan from being exposed during post-