        msg_data->pkg_length = pkg_length - 4;
      }
      msg_data->llid = rxdesc->rxheader & 3;
      msg_data->hdl = hdl;
      ke_msg_send(msg_data);
    }
  1. 首先获取到数据包的描述符`rxdesc`
  2. 申请一个消息id为`0x100`的消息，并将数据包的长度、hdl等信息填入消息数据中
  3. 最后将消息发送出去
该消息的处理函数为
`sub_7F05D20`（`0x07F05D20`），主要就是修改消息的`id`（0x806）和`dest_id`，然后使用`hci_send_2_host`让消息处理函数去进一步处理
    int __fastcall sub_7F05D20(int a1, llc_0x100_struct *msg_data, unsigned int a3)
    {
        msg_hdr = CONTAINING_RECORD(msg_data, ke_msg, param);
        msg_hdr->id = dw_0x806;
        msg_hdr->dest_id = v4;
        hci_send_2_host(msg_data);                  // 0x7F13D97,hci_acl_data_rx_handler
`0x806`的消息处理函数为`hci_acl_data_rx_handler`，该函数处理的数据就是`l2cap`的协议数据了。
#### llc_cntl_rcv
该函数用于处理LL Control PDU，其BLE规范定义如下
主要就是一个字节的opcode和ctrdata，函数主要代码如下
    int __fastcall llc_cntl_rcv(int idx, int rx_hdl)
    {
        rxdesc = (off_7F0478C[4] + 10 * rx_hdl);
        pkg_length = HIBYTE(rxdesc->rxheader);
        // 取出 opcode
        opcode = *co_buf_rx_buffer_get(rxdesc); 
        // 根据opcode找到回调函数进行处理
        tbl_index = 8 * opcode;
        v9 = llc_handler_tbl;
        msg_data = ke_msg_alloc(*(v7 + 4), dest_id, dest_id, *(v7 + 7));
        pkg = co_buf_rx_buffer_get(rxdesc);
        (*(v9 + tbl_index))(pkg, pkg_length, msg_data);
        v8 = msg_data;
        ke_msg_send(v8);
主要就是获取数据包的opcode，然后根据`opcode`找到对应的函数对数据包进行处理
回调函数表的结构如下
### L2CAP协议报文处理
通过上一节的分析，可以知道`llc_data_rcv`在对数据进行简单的处理后，就通过`hci_send_2_host`函数让`hci_acl_data_rx_handler`去处理`L2CAP`协议层的报文。
函数的关键代码
    int __fastcall hci_acl_data_rx_handler(int a1, llc_0x100_struct *msg_data, unsigned int dest_id)
    {
        // 获取数据包地址
        data = co_buf_rx_buffer_get((*(off_7F14008 + 16) + 10 * msg_data->hdl));
         // 取出 l2cap 的length
        data_length = (data[1] rem_len = data_length + 4;
        l2cc_pdu_data = &l2cc_pdu_recv_1->pdu;
        p_rem_len = &l2cc_pdu_recv_1->rem_len;
        p_offset = &l2cc_pdu_recv_1->offset;
        pkg_length_from_hdr = msg_data->pkg_length;
        offset = l2cc_pdu_recv_1->offset;
        v18 = *p_rem_len;
        // 拷贝L2CAP的数据到新分配的l2cc_pdu_recv
        if ( offset + pkg_length_from_hdr > v18 )     
        {
            qmemcpy(&l2cc_pdu_data[offset], data_1, v18 - offset);
            *p_offset = *p_rem_len;
            task_l2cc_env->p_recv_ind->status = 52;
        }
        else
        {
            qmemcpy(&l2cc_pdu_data[offset], data_1, pkg_length_from_hdr);
            *p_offset += pkg_length_from_hdr;
        }
        // 把p_buffer里面的pdu解析到 pdu 里面
        task_l2cc_env->p_recv_ind->status = l2cc_pdu_unpack(
                                                &task_l2cc_env->p_recv_ind->pdu,
                                                &task_l2cc_env->p_recv_ind->offset,
                                                &task_l2cc_env->p_recv_ind->rem_len,
                                                p_buffer,
                                                datac,
                                                BYTE1(dest_id),
                                                2u);
上述代码流程如下
  1. 首先根据 msg_data->hdl拿到L2CAP数据的起始地址，保存到data变量。
  2. 然后解析L2CAP的length字段，即data的头两个字节，结果保存在data_length。
  3. 根据data_length分配消息数据l2cc_pdu_recv，然后会把data的数据拷贝到l2cc_pdu_recv->pdu。
  4. 调用l2cc_pdu_unpack解析L2CAP数据中的`information payload`，并将解析后的结果保存到l2cc_pdu_recv->pdu。
  5. 最后会调用ke_msg_send将l2cc_pdu_recv消息发送出去，让对应消息处理函数进行下面的处理。
L2CAP的报文格式如下：
在逆向过程中对着协议规范可以简化逆向的流程。
`0xa01`的消息处理函数为`sub_7F135F6` 和`l2cc_pdu_recv_ind_handler`，其中`sub_7F135F6`
位于`gattc_default_state` 中，表示这个函数是 `gattc` 这个任务的其中一个处理函数。
根据BLE的协议栈结构，我们可以知道`sub_7F135F6`应该是用于处理 `ATT` 报文。
## 漏洞挖掘思路与示例
理清楚数据流动后，就可以开展漏洞挖掘了，漏洞挖掘手段主要就是源码审计和Fuzz测试。
如果是静态源码审计就是跟踪外部的数据流，分析程序在处理数据时是否存在问题，比如长度没做校验等，关注的问题主要有数据中长度字段、偏移字段的校验，内存拷贝是否存在越界、资源的分配、使用于释放是否配对等。
如果是要做Fuzz测试的话，就需要识别出处理数据的函数，对其进行适配，比如使用Unicorn将其模拟执行起来，然后使用AFL对其进行Fuzzing.或者可以采用一些蓝牙的发包器，自己写Fuzzer或者采用Peach等工具进行黑盒的Fuzzing.
### llm_con_req_ind越界读漏洞
前面我们分析到llm_0x200_id_handler函数主要用于处理 `ADVERTISING CHANNEL
PDU`，函数首先根据数据包的`AdvA`找到需要处理的数据包，然后如果数据包类型是`LL_CONNECT_REQ`就会进入`llm_con_req_ind`进行处理
    switch ( rx_desc->rxheader & 0xF )
          {
            case LL_CONNECT_REQ:
                llm_con_req_ind(rx_desc);
llm_con_req_ind函数里面没有检查数据包的长度，直接将其当作一个llm_pdu_con_req_rx结构体进行访问，比如：
    ar = data->latency;
      if ( ar > 500
        || (v3 * 5 * (ar + 1) + 1) >> 1 > 10 * var
        || !data->chm.map[0] && !data->chm.map[1] && !data->chm.map[2] && !data->chm.map[3] && !(data->chm.map[4] p_recv_ind->status = l2cc_pdu_unpack(
                                              &task_l2cc_env->p_recv_ind->pdu,
                                              &task_l2cc_env->p_recv_ind->offset,
                                              &task_l2cc_env->p_recv_ind->rem_len,
                                              p_buffer,
                                              datac,
                                              BYTE1(dest_id),
                                              2u);
该函数实际调用l2cc_pdu_unpack_func
    uint8_t __fastcall l2cc_pdu_unpack_func(struct l2cc_pdu *p_pdu, uint16_t *p_offset, uint16_t *p_rem_len, const uint8_t *p_buffer, uint16_t pkt_length, uint8_t conidx, uint8_t llid)
    {
      opcode = 0;
      v31 = 0;
      p_pdu->payld_len = (p_buffer[1] payld_len为 l2cap hdr里面的长度
      cid = (p_buffer[3] data.reject.pkt_id;
      for ( i = v30; ; i = ++v30 )
      {
        v22 = *i;
        if ( !v22 || v8 || *p_rem_len > 1));
        v31 = 1;
        qmemcpy(dst, infomation_payload, v28);
        use_size = (use_size + v28);
        v21 = &dst[v28];
        goto LABEL_67;
      }
`use_size` 表示已经解析的数据长度, `p_rem_len` 表示`p_pdu`和`p_buffer`的大小.
当 v22 为 75 时, 会直接从infomation_payload拷贝 0x10 字节的数据到p_pdu里面,
如果此时p_pdu和infomation_payload剩余字节数小于0x10就会导致越界读写。
当 v22 为 97 时，会计算infomation_payload剩余大小v28，然后会对 `dst + 1`，最后把v28字节数据拷贝到dst ，
**一字节溢出** 。
该函数中的其他分支也有类似的问题，不过由于`hci_acl_data_rx_handler`函数在给`l2cc_pdu_recv`分配内存时多分配了0x4C字节，且l2cc_pdu_unpack_func里面的越界大小最大也只有0x10，实际越界写也无法利用。
    l2cc_pdu_recv = ke_msg_alloc(dword_7F14010 - 1, ::dest_id, dest_id, data_length + 0x4C);/
### 处理ATT报文时多处越界读可能导致DOS
sub_7F135F6用于处理ATT报文，该函数会调用attc_l2cc_pdu_recv_handler进行处理
    int attc_l2cc_pdu_recv_handler_func(int code, l2cc_pdu_recv_ind *l2cc_pdu_recv)
    {
      v5 = l2cc_pdu_recv->pdu.data.code;
      for ( i = 0; i pdu.data);
      }
      return result;
    }
函数首先会根据pdu的code从attc_handlers_0_0里面找到对应的处理函数，然后调用处理函数进行处理，attc_handlers函数表如下
    rom_ble:07F1FD64 attc_handlers_0 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
    rom_ble:07F1FD64                 att_handler_item 
这里面的回调函数有一些共性问题，这里以`sub_7F0FC44`为例
    int __fastcall sub_7F0FC44(int code, int data)
    {
      if ( *(data + 1) == 1 )
      {
        v4 = 2;
      }
      else
      {
        v4 = 16;
      }
      idx = 0;
      item_count = v4;
      while ( *(data + 2) > idx )
      {
        msg = ke_msg_alloc(dword_7F0FEBC - 21, v7, (code << 8) + 8, item_count + 4);
        *msg = (*(data + idx + 5) << 8) | *(data + idx + 4);
        *(msg + 2) = item_count;
        idx_1 = (idx + 2);
        qmemcpy((msg + 3), (data + idx_1 + 4), item_count);
        idx = (idx_1 + item_count);
        ke_msg_send(msg);
      }
函数首先根据 `data + 1`处的一个字节来决定 `item_count` 的值 （2 或者 16），然后会从 `data + 2`
开始取出2字节作为循环的边界，不断的从 `data` 拷贝数据，并发送消息，这个过程没有检查数据长度，所以最多可以拷贝 `0xffff * 16` 字节。
## 总结
本文主要介绍了DA14531芯片BLE底层协议栈（LL层和L2CAP）收包处理，并提供挖掘BLE协议栈漏洞的思路，其实和普通漏洞挖掘没有太大区别，关键是定位污点数据，然后就是常规的源码分析和Fuzz测试技术的运用。
## 参考链接
    https://blog.csdn.net/zhoutaopower/article/details/95104632