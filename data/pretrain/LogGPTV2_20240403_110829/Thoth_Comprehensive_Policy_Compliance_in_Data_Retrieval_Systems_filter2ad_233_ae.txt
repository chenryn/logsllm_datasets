veriﬁcation by developers to assign attributes — abstract
labels that represent intended conﬁdentiality — to pro-
cesses and data stores. Grok policies, written in a lan-
guage called Legalese, specify allowed data ﬂows on at-
tributes. Attributes and policies apply at the granular-
ity of ﬁelds (types), not individual users or data items,
so Legalese cannot express the private, friends only and
friends of friends policies from Section 2. (This restric-
tion applies broadly to most static analysis-based policy
enforcement techniques.) Legalese also does not sup-
port content-dependent policies and cannot express the
mandatory access logging, censorship and typed declas-
siﬁcation policies from Section 2. Grok enforces poli-
cies with a fast static analysis on computations written
in languages like Hive, Dremel, and Scope. Grok im-
poses no runtime overhead. Thoth uses kernel-level in-
terception and is language-independent, but has a small
runtime overhead. Grok-assigned attributes may be in-
correct, so Grok may have false negatives. In contrast,
648  25th USENIX Security Symposium 
USENIX Association
Thoth enforces all conduit policies without false nega-
tives.
Cloud policy compliance Maniatis et al. [31] outline
a vision, architecture and challenges for data protection
in the Cloud using secure data capsules. Thoth can be
viewed as a realization of that vision in the context of a
data retrieval system, and contributes the design of a pol-
icy language, enforcement mechanism, and experimen-
tal evaluation. Secure Data Preservers (SDaPs) [27] are
software components that mediate access to data accord-
ing to a user-provided policy. Unlike Thoth, SDaPs are
suitable only for web services that interact with user data
through simple, narrow interfaces, and do not require di-
rect access to users’ raw data. LoNet [26] enforces data-
use policies at the VM-level. Unlike Thoth, declassiﬁca-
tion requires trusted application code and interception is
limited to ﬁle I/O using FUSE, which results in very high
overhead.
Information ﬂow control (IFC) Numerous systems
restrict a program’s data ﬂow to enforce security poli-
cies, either in the programming language (Jif [34]), in
the language runtime (Resin [46], Nemesis [19]), in lan-
guage libraries (Hails [25]), using software fault isola-
tion (duPro [35]), in the OS kernel (e.g., Asbestos [22],
HiStar [47], Flume [28], Silverline [33]), or in a hyper-
visor (Neon [48]). Thoth differs from these systems in
a number of ways. Unlike language-based IFC, Thoth
applications can be written in any language.
Architecturally, Thoth is close to Flume. Both iso-
late processes using a Linux security extension and a
user-space reference monitor, both enforce policies on
conduits and both distinguish between CONFINED and
UNCONFINED processes in similar ways. However, like
all other kernel-level solutions for IFC (Asbestos, HiS-
tar, Silverline), Flume uses abstract labels as taints. In
contrast, Thoth uses declarative policies as taints. This
results in two fundamental differences. First, Flume re-
lies on trusted application components to map system
access policies to abstract labels and for all declassiﬁ-
cation. In contrast, in Thoth, the reference monitor en-
forces all access conditions (speciﬁed in the read and
update rules) and all declassiﬁcation conditions (speci-
ﬁed in the declassify clauses). Application components
are trusted only to install correct policies on ingress and
egress nodes. Second, Thoth policies describe the policy
conﬁguration completely. In Flume, the policy conﬁgu-
ration is implicit in the code of the trusted components
that declassify and endorse data, and map access policies
to labels (although mapping can be automated to some
extent [21]).
PHP/Python functions. Resin tracks ﬂows at object
granularity. Thoth tracks ﬂows at process granularity,
which matches the pipelined structure of data retrieval
systems and reduces overhead signiﬁcantly. Hails [25]
is a Haskell-based web development framework with
statically-enforced IFC. Thoth offers IFC in the kernel,
and is independent of any language, runtime, or frame-
work used for developing applications. COWL [39] con-
ﬁnes JavaScript browser contexts using labels and IFC.
Thoth addresses the complementary problem of control-
ling data ﬂows on the server side. Both Hails and COWL
use DC-labels [38] as policies. DC-labels cannot express
content-dependent policies like our censorship, manda-
tory access logging and ONLY_CND_IDS policies.
Declarative policies Thoth’s policy language is based
on Datalog and linear temporal logic (LTL). Datalog and
LTL are well-studied foundations for policy languages
(see [30, 18, 20] and [15, 16, 23], respectively), known
for their clarity, conciseness, and high-level of abstrac-
tion. The primary innovation in Thoth’s policy language
is its two-layered structure, where the ﬁrst layer speciﬁes
access policies and the second layer speciﬁes declassi-
ﬁcation policies. Some operating systems (Nexus and
Taos [37, 45]), ﬁle systems (PFS and PCFS [41, 24]),
and at least one cyber-physical system (Grey [17]) and
one storage system (Guardat [40]) enforce access poli-
cies expressed in Datalog-like languages. Thoth can
enforce similar policies but, additionally, Thoth tracks
ﬂows and can enforce declassiﬁcation policies that these
systems cannot enforce. Like Guardat, but unlike the
other systems listed above, Thoth’s policy language sup-
ports data-dependent policies. The design of Thoth’s ref-
erence monitor is inspired by Guardat’s monitor. How-
ever, Thoth’s monitor tracks data ﬂows, supports declas-
siﬁcation policies, and intercepts memcached I/O and
network communication, all of which Guardat’s monitor
does not do.
8 Ongoing work
In this section, we brieﬂy describe ongoing work related
to Thoth.
Lightweight isolation Information ﬂow control re-
quires the isolation of computations that handle differ-
ent users’ private data. In general-purpose operating sys-
tems, this means that separate processes must be used to
handle user sessions. Thoth, for instance, requires that
front-end processes be exec’ed for each new session. We
are working on an operating system primitive that pro-
vides isolation among different user sessions within the
same process with low cost.
Resin [46] enforces programmer-provided policies on
PHP and Python web applications. Unlike Thoth’s
declarative policies, Resin’s policies are speciﬁed as
Database-backed retrieval systems Thoth includes
conduit interceptors for ﬁles, named pipes, network con-
nections and a key-value store (memcached). In current
USENIX Association  
25th USENIX Security Symposium  649
work, we are building a system to ensure compliance of
SQL database queries with declarative policies associ-
ated with the database schema. The system can be used
as a conduit interceptor, thus extending Thoth’s protec-
tion to database-backed data retrieval systems.
Policy testing Assigning policies to internal conduits
in Thoth, and making sure that they permit all data ﬂows
compliant with the ingress and egress policies, can be
a tedious task in a large system.
In current work, we
are developing a tool that generates internal conduit poli-
cies semi-automatically using a system’s dataﬂow graph
and the ingress/egress policies as inputs. Moreover, the
tool performs systematic testing to ensure all compliant
dataﬂows are allowed, and helps the policy developer
generate appropriate declassiﬁcation policies as needed.
9 Conclusion
Efﬁcient policy compliance in data retrieval systems is a
challenging problem. Thoth is a kernel-level policy com-
pliance layer to address this problem. The provider has
the option to associate a declarative policy with each data
source and sink. The policy speciﬁes conﬁdentiality and
integrity requirements and may reﬂect the data owner’s
privacy preferences, the provider’s own data-use policy,
and legal requirements. Thoth enforces these policies by
tracking and controlling data ﬂows across tasks through
kernel I/O interception. It prevents data leaks and cor-
ruption due to bugs and misconﬁgurations in application
components (including misconﬁgurations in policies on
internal conduits), as well as actions by unprivileged op-
erators.
Our technical contributions include a declarative pol-
icy language that speciﬁes both access (read/write) poli-
cies and how those access policies may change. The lat-
ter can be used to represent declassiﬁcation policies. Ad-
ditionally, the language supports content-dependent poli-
cies. Thoth uses policy sets as taint, which eliminates the
need to trust application processes with access checks
at the system boundary and with declassiﬁcation. Our
Linux-based prototype shows that Thoth can be deployed
with low overhead in data retrieval systems. Among
other things, this demonstrates the usefulness and viabil-
ity of coarse-grained taint tracking as a basis for policy
enforcement.
Acknowledgment
We would like to thank the anonymous reviewers for
their helpful feedback. This research was supported in
part by the European Research Council (ERC Synergy
imPACT 610150) and the German Research Foundation
(DFG CRC 1223).
References
[1] Adobe data breach more extensive than previ-
http://www.reuters.
oulsy disclosed.
com/article/2013/10/29/us-adobe-
cyberattack-idUSBRE99S1DJ20131029.
[2] Apache Lucene. http://lucene.apache.
org.
[3] Apache Lucene bug report 1300.
https://
issues.apache.org/jira/browse/
LUCENE-1300.
[4] Apache Lucene bug report 2756.
https://
issues.apache.org/jira/browse/
LUCENE-2756.
[5] Apache Lucene bug report 3575.
https://
issues.apache.org/jira/browse/
LUCENE-3575.
[6] Apache Lucene bug report 4511.
https://
issues.apache.org/jira/browse/
LUCENE-4511.
[7] Apache Lucene bug report 49.
https://
issues.apache.org/jira/browse/
LUCENE-49.
[8] Apache Lucene bug report 6503.
https://
issues.apache.org/jira/browse/
LUCENE-6503.
[9] Apache Lucene bug report 6595.
https://
issues.apache.org/jira/browse/
LUCENE-6595.
[10] Apache Lucene bug report 6832.
https://
issues.apache.org/jira/browse/
LUCENE-6832.
[11] DataLossDB:
Open
Security
Foundation.
http://datalossdb.org.
[12] Memcached. http://memcached.org/.
[13] Privacy Rights Clearinghouse.
http://
privacyrights.org.
[14] Target breach worse than thought, states launch
http://www.reuters.com/
joint probe.
article/2014/01/10/us-target-
breach-idUSBREA090L120140110.
[15] Adam Barth, John C. Mitchell, Anupam Datta, and
Sharada Sundaram. Privacy and utility in busi-
ness processes.
In Proceedings of the 20th IEEE
Computer Security Foundations Symposium (CSF),
2007.
[16] David A. Basin, Felix Klaedtke, and Samuel
Müller. Policy monitoring in ﬁrst-order temporal
logic.
In Proceedings of the 22nd International
Conference on Computer-Aided Veriﬁcation (CAV),
2010.
[17] Lujo Bauer, Scott Garriss, and Michael K. Reiter.
Distributed proving in access-control systems.
In
Proceedings of the 26th IEEE Symposium on Secu-
rity and Privacy (S&P), 2005.
650  25th USENIX Security Symposium 
USENIX Association
[18] Moritz Y. Becker, Cédric Fournet, and Andrew D.
Gordon. Design and semantics of a decentralized
authorization language. In Proceedings of the 20th
IEEE Computer Security Foundations Symposium
(CSF), 2007.
[19] Michael Dalton, Christos Kozyrakis, and Nickolai
Zeldovich. Nemesis: Preventing authentication &
access control vulnerabilities in web applications.
In Proceedings of the 18th USENIX Security Sym-
posium, 2009.
[20] John DeTreville. Binder, a logic-based security lan-
guage. In Proceedings of the 23rd IEEE Symposium
on Security and Privacy (S&P), 2002.
[21] Petros Efstathopoulos and Eddie Kohler. Manage-
able ﬁne-grained information ﬂow. In Proceedings
of the 3rd ACM SIGOPS European Conference on
Computer Systems (EuroSys), 2008.
[22] Petros Efstathopoulos, Maxwell Krohn, Steve Van-
DeBogart, Cliff Frey, David Ziegler, Eddie Kohler,
David Mazières, Frans Kaashoek, and Robert Mor-
ris. Labels and event processes in the Asbestos
operating system.
In Proceedings of the 20th
ACM Symposium on Operating Systems Principles
(SOSP), 2005.
[23] Deepak Garg, Limin Jia, and Anupam Datta. Pol-
icy auditing over incomplete logs: theory, imple-
mentation and applications. In Proceedings of the
18th ACM Conference on Computer and Commu-
nications Security (CCS), 2011.
[24] Deepak Garg and Frank Pfenning. A proof-carrying
ﬁle system. In Proceedings of the 31st IEEE Sym-
posium on Security and Privacy (S&P), 2010.
[25] Daniel B. Gifﬁn, Amit Levy, Deian Stefan, David
Terei, David Mazières, John Mitchell, and Alejan-
dro Russo. Hails: Protecting data privacy in un-
trusted web applications. In Proceedings of the 10th
USENIX Symposium on Operating Systems Design
and Implementation (OSDI), 2012.
[26] Havard D. Johansen, Eleanor Birrell, Robbert van
Renesse, Fred B. Schneider, Magnus Stenhaug, and
Dag Johansen. Enforcing privacy policies with
meta-code. In Proceedings of the 6th ACM SIGOPS
Asia-Paciﬁc Workshop on Systems (APSys), 2015.
[27] Jayanthkumar Kannan, Petros Maniatis,
and
Byung-Gon Chun. Secure data preservers for web
services. In Proceedings of the 2nd USENIX Con-
ference on Web Application Development, 2011.
[28] Maxwell Krohn, Alexander Yip, Micah Brodsky,
Natan Cliffer, M. Frans Kaashoek, Eddie Kohler,
Information ﬂow control for
and Robert Morris.
standard OS abstractions.
In Proceedings of 21st
ACM SIGOPS Symposium on Operating Systems
Principles (SOSP), 2007.
[29] Leslie Lamport. The part-time parliament. ACM
Transactions on Computer Systems, 1998.
[30] Ninghui Li and John C. Mitchell. Datalog with con-
straints: A foundation for trust management lan-
guages. In Proceedings of the 5th Symposium on
Practical Aspects of Declarative Languages, 2003.
[31] Petros Maniatis, Devdatta Akhawe, Kevin Fall,
Elaine Shi, Stephen McCamant, and Dawn Song.
Do you know where your data are? secure data cap-
sules for deployable data protection. In Proceed-
ings of the 13th USENIX Conference on Hot Topics
in Operating Systems (HotOS), 2011.
[32] Zohar Manna and Amir Pnueli. Temporal Veriﬁca-
tion of Reactive Systems: Safety. Springer-Verlag,
1995.
[33] Yogesh Mundada, Anirudh Ramachandran, and
Nick Feamster. Silverline: Preventing data leaks
from compromised web applications. In Proceed-
ings of the 29th Annual Computer Security Appli-
cations Conference, 2013.
[34] Andrew C. Myers.
JFlow: Practical mostly-
static information ﬂow control. In The 26th ACM
SIGPLAN-SIGACT Symposium on Principles of
Programming Languages (POPL), 1999.
[35] Ben Niu and Gang Tan. Efﬁcient user-space infor-
mation ﬂow control. In Proceedings of the 8th ACM
SIGSAC Symposium on Information, Computer and
Communications Security, 2013.
[36] Shayak Sen, Saikat Guha, Anupam Datta, Sri-
ram K. Rajamani, Janice Tsai, and Jeannette M.
Wing. Bootstrapping privacy compliance in big
data systems. In Proceedings of the 35th IEEE Sym-
posium on Security and Privacy (S&P), 2014.
[37] Alan Shieh, Dan Williams, Emin Gün Sirer, and
Fred B Schneider. Nexus: a new operating system
for trustworthy computing. In Proceedings of the
20th ACM Symposium on Operating Systems Prin-
ciples (SOSP), 2005.
[38] Deian Stefan, Alejandro Russo, David Mazières,
and John C. Mitchell. Disjunction category labels.
In Proceedings of the 16th Nordic Conference on
Information Security Technology for Applications,
2011.
[39] Deian Stefan, Edward Z. Yang, Petr Marchenko,
Alejandro Russo, Dave Herman, Brad Karp, and
David Mazières.
Protecting users by conﬁning
JavaScript with COWL. In Proceedings of the 11th
USENIX Symposium on Operating Systems Design
and Implementation (OSDI), 2014.
[40] Anjo Vahldiek-Oberwagner, Eslam Elnikety,
Aastha Mehta, Deepak Garg, Peter Druschel,
Rodrigo Rodrigues, Johannes Gehrke, and Ansley
Post. Guardat: Enforcing data policies at the
storage layer.
In Proceedings of the 3rd ACM
SIGOPS European Conference on Computer