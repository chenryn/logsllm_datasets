### 用C#重写HelloWorld示例（库选项和HelloWorld程序）

#### 代码片段
```csharp
string msg_body = Encoding.ASCII.GetString(evt_args.Body);
chan.BasicAck(evt_args.DeliveryTag, false);

// 消息确认
if (msg_body == "quit")
{
    chan.BasicCancel(consumer_tag);
}
```

#### 构建过程
使用`msbuild`构建项目：
```shell
Microsoft (R) Build Engine Version 4.0.30319.1
[Microsoft .NET Framework, Version 4.0.30319.1]
Copyright (C) Microsoft Corporation 2007. All rights reserved.

Done Building Project "\HelloWorldConsumer.csproj" ...
Done Building Project "\HelloWorldConsumer.sln" (default targets).
Build succeeded.
0 Warning(s)
0 Error(s)
Time Elapsed 00:00:00.17

PS > .\bin\Debug\HelloWorldConsumer.exe 192.168.241.1
```

在另一个终端上构建生产者并发送测试消息：
```shell
PS > msbuild
Microsoft (R) Build Engine Version 4.0.30319.1
[Microsoft .NET Framework, Version 4.0.30319.1]
Copyright (C) Microsoft Corporation 2007. All rights reserved.

Done Building Project "\HelloWorldProducer.sln" (default targets).
Build succeeded.
0 Warning(s)
0 Error(s)

PS > .\bin\Debug\HelloWorldProducer.exe 192.168.241.1 "Hello there world!"
```

#### 环境配置
你可能需要将.NET Framework的完整路径添加到系统环境变量`PATH`中。例如，用于该示例的测试系统上的.NET Framework路径为`C:\Windows\Microsoft.NET\Framework\v4.0.30319`。

### 跨平台的消息通信实战

打开终端，用于测试生产者和消费者：
```shell
PS > .\bin\Debug\HelloWorldConsumer.exe 192.168.241.1
Message Body: Hello there world!
```

C#版的生产者和消费者可以正常工作，并且它们可以与原始Python应用互操作。为了尝试跨语言通信的好处，可以使用第2章中的`hello_world_producer.py`向正在运行的C#版消费者发布一条消息。

### 将告警系统迁移到面向事件的.NET平台

在学习了C#版的HelloWorld之后，你可以对本书剩余的例子进行转换。我们没有提到的是如何使用基于事件的方法来消费消息。在Python客户端Pika中，所有的消费者均用回调函数（面向事件的）为每一个订阅进行注册，并在之后当订阅的消息到达时触发。而在C#中，`QueueingBasicConsumer`使用轮询方法。如果你是一位.NET开发人员，并且更偏好面向事件的消费模型，可以使用`EventingBasicConsumer`。

#### 使用EventingBasicConsumer
```csharp
EventingBasicConsumer c_consumer = new EventingBasicConsumer { Model = chan };
c_consumer.Received += critical_notify;
chan.BasicConsume("critical", false, c_consumer);
```

`EventingBasicConsumer`内部使用C#的事件和委托，并在接收到消费者订阅的消息时，触发预定义的回调函数列表。

#### 回调函数示例
```csharp
private static void critical_notify(object sender, BasicDeliverEventArgs eargs)
{
    string[] EMAIL_RECIPS = new string[] { "PI:EMAIL" };
    IBasicProperties msg_props = eargs.BasicProperties;
    string msg_body = Encoding.ASCII.GetString(eargs.Body);

    // 解码消息体
    dynamic message = JsonConvert.DeserializeObject(msg_body);

    // 发送邮件
    send_mail(EMAIL_RECIPS, "CRITICAL ALERT", message);
    Console.WriteLine($"Sent alert via e-mail! Alert Text: {message} Recipients: {string.Join(",", EMAIL_RECIPS)}");

    // 确认消息
    ((IModel)sender).BasicAck(eargs.DeliveryTag, false);
}
```

通过这种方式，你可以实现一个面向事件的消费模型，并在.NET平台上使用RabbitMQ。