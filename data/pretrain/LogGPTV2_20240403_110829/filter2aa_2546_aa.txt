# MetaPhish: Advanced Phishing and Exploitation Techniques

**PDF Infection, Web Spear-Phishing, TOR Abuse & Communications**

[Attack Research](http://www.attackresearch.com)

**Authors:**
- Val Smith (PI:EMAIL)
- David Kerb (PI:EMAIL)
- Colin Ames (PI:EMAIL)

**Page 1 of 26**
**Last Modified: 06/27/2009**

## Table of Contents
1. **Introduction**
   1.1 Abstract
   1.2 Background
2. **Spear-Phishing**
   2.1 Spear-Phishing Concepts
   2.2 Web Kits, File Formats, and Problems with Available Attack Code
3. **Defining the Needs**
   3.1 Work Flow
   3.2 Why a Framework
4. **Targeting**
   4.1 Targeting Basics
   4.2 File Targeting
   4.3 Why PDFs
5. **Web Spear-Phishing**
   5.1 Work Flow
   5.2 Social Engineering and Malicious Java Applets
   5.3 Automation
6. **Obfuscation**
   6.1 Simple Obfuscation Techniques
7. **TOR**
   7.1 Using TOR as a Weapon
   7.2 Controlling the Exit Location
   7.3 Making Any Service go Through TOR
   7.4 Running Nikto and Other Web Scanners Over TOR
   7.5 Using VPN over TOR
   7.6 Metasploit and TOR
   7.7 Making an Anonymous Reverse Shell Server
8. **References**
9. **Acknowledgements**
10. **Appendix**

---

## Chapter 1: Introduction

### 1.1 Abstract
In recent years, attackers have increasingly leveraged the web and client-side attacks to steal information from victims. The focus has shifted from exploiting open ports to targeting browsers and email clients. Penetration testers must adopt these techniques to conduct realistic tests.

This paper presents a phishing framework built on top of Metasploit, designed to automate phishing and enhance penetration testing capabilities. It also covers advanced spear-phishing techniques, second-stage backdoors, and secure communication over TOR.

### 1.2 Background
The authors have extensive experience in security auditing and penetration testing. Traditional penetration testing often involves automated scans for known vulnerabilities, followed by verification using tools like Core Impact, Canvas, and Metasploit, and then generating a report.

While this process is essential, there is a growing consensus that tests should reflect real-world threats rather than static checklists. Attackers are constantly evolving their methods, while testing methodologies remain relatively unchanged. This paper aims to address this gap by focusing on spear-phishing, file format exploits, and anonymity, which are currently the most prevalent attack vectors.

---

## Chapter 2: Spear-Phishing

### 2.1 Spear-Phishing Concepts
Spear-phishing is a targeted form of phishing where the attacker crafts an email or website tailored to a specific victim. The goal is to trick the victim into taking an action that grants the attacker access to their system.

Historically, attackers scanned for open ports and exploited traditional vulnerabilities. However, with the advent of firewalls, intrusion detection systems, and host-based security, these attacks have become less effective. Consequently, attackers have shifted to social engineering and client-side techniques, exploiting users' access to their own machines.

Many modern attacks are "blended," combining web applications, file format exploits, malware, and social engineering. Penetration testers need to incorporate these techniques to provide realistic threat assessments. If such techniques are not used, significant threat vectors may be overlooked.

### 2.2 Web Kits, File Formats, and the Problems with Available Attack Code
Web kits like mpack, tornado, adpack, luckysploit, and zunker are widely used by attackers. These kits include code for enumerating clients, delivering exploits, logging information, and deploying malware.

File format exploits, such as those targeting Excel, PowerPoint, and PDF files, are also common. These tools can be valuable for penetration testers but often contain unstable or malicious code. Qualified analysts must reverse-engineer these tools and re-implement them in a stable, reliable manner for use in controlled environments.

---

## Chapter 3: Defining the Needs

### 3.1 Work Flow
The typical workflow for spear-phishing and file format attacks includes:
1. **Research**: Identify the target, whether it's a specific organization or a broader group.
2. **Legend Construction**: Develop a social engineering story based on the target's expectations and reconnaissance results.
3. **Resource Gathering**: Collect plausible documents, URLs, and other resources from the target.
4. **Infection and Delivery**: Infect files, create malicious websites, and deliver the attack via targeted emails or cross-site scripting.
5. **Infrastructure Setup**: Establish a server-side infrastructure for delivering exploits, managing incoming connections, and automating post-exploitation tasks such as gathering passwords, installing backdoors, and enumerating system information.

### 3.2 Why a Framework
Current client-side tools are often manual and standalone, lacking integration with a broader attack management system. While some tools like Core Impact offer some of these features, they can be expensive and lack deep customization. A modular, controllable, and well-organized framework can greatly enhance reliability, automation, and control in penetration testing.

---

## Chapter 4: Targeting

### 4.1 Targeting Basics
Effective targeting requires a deep understanding of the target's infrastructure, hardware, software, habits, and network layout. Techniques such as IP range analysis and Google hacking for leaked proxy logs can provide valuable information about internal IP addresses, hostnames, client applications, update schedules, and antivirus usage.

### 4.2 File Targeting
File formats have long been used by viruses to bypass security measures and launch attacks. Understanding and exploiting these file formats is crucial for successful spear-phishing campaigns.

---

**Page 2 of 26**

---

This revised version provides a more structured and professional presentation of the content, ensuring clarity and coherence throughout the document.