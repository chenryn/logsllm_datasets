### 3. Description of Experiments

Our system is evaluated using three types of malware families: ransomware (§3.3), SMS Trojans (§3.4), and banking Trojans (§3.5). We obtained the classification of each family from AndroZoo. Our selection is driven by the increasing prevalence of these malware types in recent years [17, 32].

For each type, we:
1. Report the most common and rarest ensembles of sensitive API calls.
2. Present a case study to discuss one of the most popular families.
3. Study two scenarios:
   - Two apps from different families share the same signature.
   - Two apps from different families have similar signatures (i.e., those that differ by only a few API calls).

These scenarios help us provide an intra-family characterization. To report these scenarios, we use the cosine distance between the feature vectors of the apps, as discussed in Section 2.5. These steps collectively validate the applicability of our approach. We will now describe each type of malware family studied. Additionally, we evaluated the time and memory complexity of our system for each type, as summarized in Table 2.

**Table 2: Average Time Taken in Each Step of Our Approach per Family (in seconds)**

| Malware Type | AHG Extraction | Ensemble Extraction |
|--------------|----------------|---------------------|
| Ransomware   | 266.17         | 67.81               |
| SMS Trojan   | 44.31          | 44.92               |
| Banking Trojan | 35.51        | 57.19               |

### 3.3 Ransomware

Android ransomware families are typically categorized into two groups: screen lockers and crypto ransomware [33, 34]. Screen lockers lock the smartphone screen, while crypto ransomware encrypts the victim's valuable files, both with the goal of extorting a ransom. Some families, such as Cokri and DoubleLocker, possess both capabilities. Screen lockers employ three major strategies: activity hijacking, modifying specific parameters, and disabling certain UI buttons. These strategies ensure that the ransomware activity remains on top of other activities. Crypto ransomware uses standard or customized cryptographic systems to encrypt critical files.

Our dataset includes 824 ransomware samples from 7 different Android families, as shown in Table 1. However, the distribution of apps across families is uneven. For example, the svpeng family has 604 specimens, while jisut contains only 4 malicious apps. In total, we extracted 25 ensembles of sensitive API methods from ransomware apps. Experimental results (Fig. 3) show that 11 ensembles are present in more than 70% of ransomware specimens. Conversely, only a few ensembles are rare, appearing in less than 2% of apps (e.g., ensembles 4, 14, and 25 in Table 3). More details are provided in Appendix A.

### 3.4 SMS Trojan

Trojans are a type of malware that disguise themselves as legitimate applications and often violate personal or confidential information stored on the device by performing secret operations. Once installed, a smartphone Trojan can perform a wide range of silent activities, including harvesting user or device-specific information, intercepting text messages, sending premium SMS messages, and connecting the device to a botnet. As Android Trojans commonly masquerade as popular legitimate apps available in official markets, they affect a large number of users.

SMS Trojans monetize users by sending text messages to premium rate numbers [9, 36]. Our dataset contains 1,967 apps from 98 SMS Trojan families. We extracted 168 different ensembles of API methods from these apps. Results show that 3 ensembles of API methods (i.e., `sendTextMessage()`, `delete()`, and `getClassLoader()`) are present in more than 50% of apps in the different families. On the other hand, almost half of the ensembles are specific to very few apps in our dataset. Specifically, 91 ensembles of API methods (54%) are present in less than 2% of apps in the SMS Trojan families. Ensembles with length 2 are more prevalent among SMS Trojans compared to ransomware. Additionally, two long ensembles with 6 sensitive API methods exist in 5 malware specimens. More details are provided in Appendix B.

### 3.5 Banking Trojan

The primary goal of banking Trojans is to steal banking or credential information. They achieve this by intercepting SMS messages [37] or overlaying a fake window on top of financial apps and websites [38]. Some variants may have additional capabilities. Studies show that most banking Trojans target specific geographical locations, with Russia and Australia being frequently targeted [37].

Our dataset includes 259 apps from 12 Banking Trojan families, from which we extracted 50 unique ensembles of sensitive API methods. Two ensembles of API methods, `getClassLoader()` and `getInputStream()`, are shared by more than 50% of apps from different families. This indicates that more than half of the apps in different families intercept data from open connections and load their malicious classes at runtime, similar to SMS Trojans and the recently detected Rotexy family [1]. Conversely, there are 9 API ensembles that are common among less than 5% of apps. Ensembles of length one are more prevalent among banking Trojans than ensembles of other lengths. More details are provided in Appendix C.

### 4. Conclusion and Future Work

In this paper, we proposed a new approach to characterize Android malware families based on ensembles of API methods. Instead of relying on individual API calls, we extract ensembles to make the approach more resilient against transformation attacks. API ensembles also provide analysts with more meaningful insights into the behavior of an app. We used a fast graph-mining algorithm to extract these common and sensitive API ensembles from an aggregated form of method call graphs.

Experimental results from applying our method to three types of Android malware—ransomware, SMS Trojans, and banking Trojans—reveal several interesting findings. First, malicious operations do not necessarily contain several sensitive API methods. In fact, a considerable number of common ensembles (≈ 72% in ransomware, ≈ 21% in SMS Trojans, and ≈ 52% in banking Trojans) contain only one sensitive API method. Second, ensembles of two API methods were the most common in SMS Trojans, unlike ransomware and banking Trojans. Finally, we found several samples with identical ensembles, despite belonging to different families.

Future work could include using more exhaustive static analysis tools, such as Soot, to extract call graphs. Additionally, a query-like system could be developed to mine datasets for threat discovery. Furthermore, ensembles of API calls could be mapped to relevant behaviors by developing and training an expert system.

### Acknowledgments

We thank the anonymous reviewers for their comments. This work has been supported by the Comunidad de Madrid (Spain) under the grant CYNAMON (P2018/TCS-4566), co-financed by European Structural Funds (ESF and FEDER). It has also been partially supported by the EPSRC under grants N028112 and N008448.

### References

[1] Statcounter. 2018. Operating System Market Share Worldwide. http://gs.statcounter.com/os-market-share.

[2] Haoyu Wang, Zhe Liu, Jingyue Liang, Narseo Vallina-Rodriguez, Yao Guo, Li Li, Juan Tapiador, Jingcun Cao, and Guoai Xu. 2018. Beyond Google Play: A Large-Scale Comparative Study of Chinese Android App Markets. In Proceedings of the Internet Measurement Conference 2018. ACM, 293–307.

[3] Vincent Haupert, Dominik Maier, Nicolas Schneider, Julian Kirsch, and Tilo Müller. 2018. Honey, I Shrunk Your App Security: The State of Android App Hardening. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 69–91.

[4] Xiang Pan, Yinzhi Cao, Xuechao Du, Boyuan He, Gan Fang, Rui Shao, and Yan Chen. 2018. FlowCog: Context-Aware Semantics Extraction and Analysis of Information Flow Leaks in Android Apps. In 27th USENIX Security Symposium (USENIX Security 18). 1669–1685.

[5] Xiaohan Zhang, Yuan Zhang, Qianqian Mo, Hao Xia, Zhemin Yang, Min Yang, Xiaofeng Wang, Long Lu, and Haixin Duan. 2018. An Empirical Study of Web Resource Manipulation in Real-World Mobile Applications. In 27th USENIX Security Symposium (USENIX Security 18). 1183–1198.

[6] Omid Mirzaei, Jose M. de Fuentes, Juan Tapiador, and Lorena Gonzalez-Manzano. 2019. AndrODet: An Adaptive Android Obfuscation Detector. Future Generation Computer Systems 90 (2019), 240–261.

[7] Yue Duan, Mu Zhang, Abhishek Vasisht Bhaskar, Heng Yin, Xiaorui Pan, Tongxin Li, Xueqiang Wang, and X Wang. 2018. Things You May Not Know About Android (Un)Packers: A Systematic Study Based on Whole-System Emulation. In 25th Annual Network and Distributed System Security Symposium, NDSS. 18–21.