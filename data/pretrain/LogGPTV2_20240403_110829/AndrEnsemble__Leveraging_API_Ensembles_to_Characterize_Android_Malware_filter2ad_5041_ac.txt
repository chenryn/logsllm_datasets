1,967
259
3,050
7
98
12
117
4.98
9.88
10.20
8.35
3.2 Description of Experiments
Our system is evaluated with three types of malware families: ran-
somware (§3.3), SMS Trojan (§3.4) and Banking Trojan (§3.5) fami-
lies. We have obtained the type of each family from AndroZoo. Our
choice is motivated by the increasing popularity of these types of
malware in recent years [17, 32].
For each type, i) we report the most common and rarest ensem-
bles of sensitive API calls, ii) we present a case study to discuss one
of the most popular families, and iii) we study the following two
scenarios: a) where two apps from different families do share the
same signature, and b) where two apps from different families have
similar signatures (i.e., those that are different in two ensembles
of API calls). These scenarios are used to provide an intra-family
characterization. To report these scenarios, we rely on the cosine
distance between the apps’ feature vectors (as discussed in Sec-
tion 2.5). All these three steps together allow us to confirm the
applicability of our approach. We next describe each of the types
of families studied. Furthermore, we have evaluated the time and
memory complexity of our system for each type as summarized in
Table 2.
Table 2: Average amount of time took in each step of our
approach per family (in sec.).
Malware Type AHG Extraction Ensemble Extraction
Ransomware
SMS Trojan
266.17
44.31
67.81
Banking Trojan
35.51
44.92
57.19
3.3 Ransomware
Android ransomware families are categorized into two general
groups, screen lockers and crypto ransomware [33, 34]. Apps from
the first group lock the smartphone screen, while those in the sec-
ond group encrypt the victim’s valuable files, both with the goal of
extorting users to pay a ransom. Also, there are few families such
as Cokri and DoubleLocker which have both capabilities. On the
one hand, screen lockers follow three major strategies to achieve
their goals, including activity hijacking, modifying specific param-
eters and disabling certain UI buttons. The main purpose of these
strategies is to guarantee that the ransomware activity is always on
top of other activities. On the other hand, crypto ransomware uses
standard or customized crypto-systems to encrypt critical files.
Our dataset contains 824 ransomware samples from 7 different
Android families as shown in Table 1. However, apps are not evenly
distributed across families. For instance, the svpeng family has 604
specimens, whereas jisut contains only 4 malicious apps. In general,
we could extract 25 ensembles of sensitive API methods by applying
our method on ransomware apps. Experimental results (Fig. 3) show
that 11 ensembles are present in more than 70% of ransomware
specimens. Instead, only few ensembles are rare — they are present
in less than 2% of apps (e.g., ensembles 4, 14 and 25 in Table 3).
More details are presented in Appendix A.
3.4 SMS Trojan
From a general point of view, a Trojan is a type of malware that
disguise itself as a legitimate application and commonly violates
personal or confidential information stored on the device by per-
forming secret operations. A smartphone Trojan can be seen as
an application that affects the way a mobile device is being con-
trolled [35]. Once installed on the victim’s device, it performs a
wide range of silent activities, ranging from harvesting user or de-
vice specific information to intercepting incoming and/or outgoing
text messages, sending premium SMS messages and connecting the
device to a botnet to name a few. As Android Trojans commonly
masquerade as popular legitimate apps available in official markets,
they affect a large number of users.
SMS Trojans are malware specimens that usually monetize users
by sending text messages to premium rate numbers [9, 36]. Our
dataset contains 1,967 apps from 98 SMS Trojan families. We have
extracted 168 different ensembles of API methods from these apps.
Results show that 3 ensembles of API methods (i.e.,  and delete() and getClassLoader()) are present in more than
50% of apps in the different families. On the other hand, almost
half of the ensembles are specific to very few apps in our dataset.
In particular, 91 ensembles of API methods (54%) are present in
less than 2% of apps in the SMS Trojan families. Also, ensembles
with length 2 are more prevalent among SMS Trojan families as
compared to ransomware. In addition, two long ensembles with 6
sensitive API methods exist in 5 malware specimens. More details
are provided in Appendix B.
3.5 Banking Trojan
The main goal of banking Trojans is to steal banking or credential
information. They usually do this by either intercepting SMS mes-
sages [37], or by overlaying a fake window on top of other financial
apps and websites [38]. In addition, other variants of Android bank-
ing Trojans may have some additional capabilities. Studies show
that most of banking Trojans target specific geographical locations.
For example, Russia and Australia are usually on top of this list [37].
Our dataset contains 259 apps and 12 Banking Trojan families
from which we have extracted 50 unique ensembles of sensitive
API methods. There are 2 ensembles of API methods, including
getClassLoader() and getInputStream() that are shared by more than
50% of apps from different families. This means that more than
half of apps in different families intercept from open connections,
and they load their malicious classes at runtime like SMS Trojan
applications and similar to the very recently detected variant of
Rotexy family1. On the contrary, there are 9 API ensembles which
are common among less than 5% of apps. Also, ensembles of length
one are more prevalent among banking Trojans than ensembles of
other lengths. More details are presented in Appendix C.
4 CONCLUSION AND FUTURE WORK
In this paper, we proposed a new approach to characterize Android
malware families based on ensembles of API methods that are exer-
cised by the majority of apps. Instead of relying on individual API
calls, we extract ensembles of API calls to make the approach more
resilient against transformation attacks. In addition, API ensembles
provide the analysts with more meaningful insights of the behavior
of an app. We make use of a fast graph-mining algorithm to extract
these common and sensitive API ensembles from an aggregated
form of method call graph.
Experimental results obtained from applying our method to three
types of Android malware, including Ransomware, SMS Trojans,
and banking Trojans reveal several interesting findings. First, mali-
cious operations do not necessarily contain several sensitive API
methods. In fact, a considerable number of common ensembles (≈
72% in ransomware, ≈ 21% in SMS Trojans, and ≈ 52% in banking
Trojans) contain only one sensitive API method. Second, opposite to
ransomware and banking Trojans, ensembles of two API methods
were the most common in SMS Trojans. Finally, we found several
samples with identical ensembles though belonging to different
families.
This work can be extended in various ways as future work. More
exhaustive static analysis tools such as Soot2 can be used to extract
call graphs. Additionally, a query-like based system can be leveraged
to mine a dataset for threat discovery. Also, ensembles of API calls
could be mapped to relevant behavior by developing and training
an expert system.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their comments. This work
has been supported by the Comunidad de Madrid (Spain) under
the grant CYNAMON (P2018/TCS-4566), co-financed by European
Structural Funds (ESF and FEDER). Also, it has been partially sup-
ported by the EPSRC under grants N028112 and N008448.
REFERENCES
[1] Statcounter. 2018. Operating System Market Share Worldwide. http://gs.
statcounter.com/os-market-share.
[2] Haoyu Wang, Zhe Liu, Jingyue Liang, Narseo Vallina-Rodriguez, Yao Guo, Li
Li, Juan Tapiador, Jingcun Cao, and Guoai Xu. 2018. Beyond Google Play: A
1https://securelist.com/the-rotexy-mobile-trojan-banker-and-ransomware/88893/
2https://sable.github.io/soot
Large-Scale Comparative Study of Chinese Android App Markets. In Proceedings
of the Internet Measurement Conference 2018. ACM, 293–307.
[3] Vincent Haupert, Dominik Maier, Nicolas Schneider, Julian Kirsch, and Tilo
Müller. 2018. Honey, I Shrunk Your App Security: The State of Android App
Hardening. In International Conference on Detection of Intrusions and Malware,
and Vulnerability Assessment. Springer, 69–91.
[4] Xiang Pan, Yinzhi Cao, Xuechao Du, Boyuan He, Gan Fang, Rui Shao, and Yan
Chen. 2018. FlowCog: context-aware semantics extraction and analysis of in-
formation flow leaks in android apps. In 27th {USENIX} Security Symposium
({USENIX} Security 18). 1669–1685.
[5] Xiaohan Zhang, Yuan Zhang, Qianqian Mo, Hao Xia, Zhemin Yang, Min Yang,
Xiaofeng Wang, Long Lu, and Haixin Duan. 2018. An empirical study of web
resource manipulation in real-world mobile applications. In 27th {USENIX}
Security Symposium ({USENIX} Security 18). 1183–1198.
[6] Omid Mirzaei, Jose M. de Fuentes, Juan Tapiador, and Lorena Gonzalez-Manzano.
2019. AndrODet: An adaptive Android obfuscation detector. Future Generation
Computer Systems 90 (2019), 240–261.
[7] Yue Duan, Mu Zhang, Abhishek Vasisht Bhaskar, Heng Yin, Xiaorui Pan, Tongxin
Li, Xueqiang Wang, and X Wang. 2018. Things you may not know about android
(un) packers: a systematic study based on whole-system emulation. In 25th Annual
Network and Distributed System Security Symposium, NDSS. 18–21.