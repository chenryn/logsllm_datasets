# 八、使用 Flannel
在本章中，我们将介绍以下食谱:
*   安装和配置 Flannel
*   将 Flannel 与 Docker 集成
*   使用 VXLAN 后端
*   使用主机网关后端
*   指定 Flannel 选项
# 简介
Flannel 是 Docker 的第三方网络解决方案，由该团队在 T2 开发。Flannel 是早期的项目之一，旨在给每个容器一个唯一可路由的 IP 地址。这消除了主机间容器到容器通信使用已发布端口的要求。与我们讨论的其他一些解决方案非常相似，Flannel 使用键值存储来跟踪分配和各种其他配置设置。然而，与 Weave 不同，Flannel 不提供与 Docker 服务的直接集成，也不提供插件。相反，Flannel 依赖于您告诉 Docker 使用 Flannel 网络来供应容器。在本章中，我们将介绍如何安装 Flannel 以及它的各种配置选项。
# 安装和配置 Flannel
在这个食谱中，我们将走一遍 Flannel 的安装。Flannel 需要安装密钥存储和 Flannel 服务。由于这些依赖关系，它们需要被配置为 Docker 主机上的实际服务。为此，我们将利用`systemd`单元文件来定义每个相应的服务。
## 做好准备
在本例中，我们将使用我们在[第 3 章](03.html "Chapter 3. User-Defined Networks")、*用户定义网络*中使用的相同实验室拓扑，其中我们讨论了用户定义的覆盖网络:
![Getting ready](img/B05453_08_01.jpg)
您将需要几台主机，最好其中一些位于不同的子网中。假设本实验中使用的 Docker 主机处于默认配置。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
如上所述，Flannel 依靠键值存储向参与 Flannel 网络的所有节点提供信息。在其他例子中，我们运行了一个基于容器的键值存储，比如 Consul 来提供这个功能。由于 Flannel 是由 CoreOS 打造的，我们将利用他们名为`etcd`的关键价值商店。虽然`etcd`是以容器格式提供的，但由于 Flannel 工作所需的一些先决条件，我们不能轻易使用基于容器的版本。也就是说，我们将为`etcd`和 Flannel 下载二进制文件，并将它们作为服务在我们的主机上运行。
让我们从`etcd`开始吧，因为这是 Flannel 的一个额外收获。你需要做的第一件事是下载代码。在本例中，我们将利用`etcd`版本 3.0.12，并在主机`docker1`上运行键值存储。要下载二进制文件，我们将运行以下命令:
```
user@docker1:~$ curl -LO \
https://github.com/coreos/etcd/releases/download/v3.0.12/\
etcd-v3.0.12-linux-amd64.tar.gz
```
下载后，我们可以使用以下命令从归档文件中提取二进制文件:
```
user@docker1:~$ tar xzvf etcd-v3.0.12-linux-amd64.tar.gz
```
然后，我们可以将所需的二进制文件移动到正确的位置，使它们可执行。在这种情况下，位置是`/usr/bin`，我们想要的二进制文件是`etcd`服务本身及其名为`etcdctl`的命令行工具:
```
user@docker1:~$ cd etcd-v3.0.12-linux-amd64
user@docker1:~/etcd-v2.3.7-linux-amd64$ sudo mv etcd /usr/bin/
user@docker1:~/etcd-v2.3.7-linux-amd64$ sudo mv etcdctl /usr/bin/
```
现在我们已经准备好了所有的部分，我们需要做的最后一件事就是在系统上创建一个服务来负责运行`etcd`。由于我们的版本的 Ubuntu 正在使用`systemd`，我们需要为`etcd`服务创建一个单元文件。要创建服务定义，可以在`/lib/systemd/system/`目录下创建服务单元文件:
```
user@docker1:~$  sudo vi /lib/systemd/system/etcd.service
```
然后，您可以创建一个服务定义来运行`etcd`。`etcd`服务的示例单位文件如下所示:
```
[Unit]
Description=etcd key-value store
Documentation=https://github.com/coreos/etcd
After=network.target
[Service]
Environment=DAEMON_ARGS=
Environment=ETCD_NAME=%H
Environment=ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
Environment=ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
Environment=ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2378
Environment=ETCD_DATA_DIR=/var/lib/etcd/default
Type=notify
ExecStart=/usr/bin/etcd $DAEMON_ARGS
Restart=always
RestartSec=10s
LimitNOFILE=65536
[Install]
WantedBy=multi-user.target
```
### 注
请记住`systemd`可以根据您的需求以多种不同的方式进行配置。前面给出的单元文件演示了一种将`etcd`配置为服务的方法。
一旦单元文件到位，我们可以重新加载`systemd`然后启用并启动服务:
```
user@docker1:~$ sudo systemctl daemon-reload
user@docker1:~$ sudo systemctl enable etcd
user@docker1:~$ sudo systemctl start etcd
```
如果由于某些原因服务没有启动或保持启动，您可以使用`systemctl status etcd`命令检查服务的状态:
```
user@docker1:~$ systemctl status etcd
  etcd.service - etcd key-value store
   Loaded: loaded (/lib/systemd/system/etcd.service; enabled; vendor preset: enabled)
   Active: active (running) since Tue 2016-10-11 13:41:01 CDT; 1h 30min ago
     Docs: https://github.com/coreos/etcd
 Main PID: 17486 (etcd)
    Tasks: 8
   Memory: 8.5M
      CPU: 22.095s
   CGroup: /system.slice/etcd.service
           └─17486 /usr/bin/etcd
Oct 11 13:41:01 docker1 etcd[17486]: setting up the initial cluster version to 3.0
Oct 11 13:41:01 docker1 etcd[17486]: published {Name:docker1 ClientURLs:[http://0.0.0.0:2379]} to cluster cdf818194e3a8c32
Oct 11 13:41:01 docker1 etcd[17486]: ready to serve client requests
Oct 11 13:41:01 docker1 etcd[17486]: serving insecure client requests on 0.0.0.0:2379, this is strongly  iscouraged!
Oct 11 13:41:01 docker1 systemd[1]: Started etcd key-value store.
Oct 11 13:41:01 docker1 etcd[17486]: set the initial cluster version to 3.0
Oct 11 13:41:01 docker1 etcd[17486]: enabled capabilities for version 3.0
Oct 11 15:04:20 docker1 etcd[17486]: start to snapshot (applied: 10001, lastsnap: 0)
Oct 11 15:04:20 docker1 etcd[17486]: saved snapshot at index 10001
Oct 11 15:04:20 docker1 etcd[17486]: compacted raft log at 5001
user@docker1:~$
```
稍后，如果启用 Flannel 的节点无法与`etcd`对话，请检查并确保`etcd`允许访问所有接口(`0.0.0.0`)，如前面粗体输出所示。这在提供的样本单元文件中已定义，但如果未定义，`etcd`将默认只监听本地环回接口(`127.0.0.1`)。这将阻止远程服务器访问该服务。
### 注
由于键值存储配置是为了演示 Flannel 而明确进行的，因此我们不会介绍键值存储的基础知识。这些配置选项足以让您在单个节点上启动并运行，并且不打算在生产环境中使用。在生产环境中使用`etcd`之前，请确保您了解其工作原理。
一旦`etcd`服务启动，我们就可以使用`etcdctl`命令行工具来配置 Flannel 中的一些基本设置:
```
user@docker1:~$ etcdctl mk /coreos.com/network/config \
'{"Network":"10.100.0.0/16"}'
```
我们将在后面的食谱中讨论这些配置选项，但是现在，只要知道我们定义为`Network`参数的子网定义了 Flannel 全局范围。
现在已经配置好了`etcd`，我们可以重点配置 Flannel 本身了。Flannel 作为系统服务的配置与我们刚刚为`etcd`所做的非常相似。主要区别在于，我们将在所有四台实验主机上进行相同的配置，而键值存储仅在一台主机上配置。我们将展示 Flannel 在单个主机`docker4`上的安装，但是您需要在实验室环境中希望成为 Flannel 网络成员的每台主机上重复这些步骤:
首先，我们将下载 Flannel 二进制文件。在本例中，我们将使用版本 0.5.5:
```
user@docker4:~$ cd /tmp/
user@docker4:/tmp$ curl -LO \
https://github.com/coreos/flannel/releases/download/v0.6.2/\
flannel-v0.6.2-linux-amd64.tar.gz
```
然后，我们需要从档案中提取文件，并将`flanneld`二进制文件移动到正确的位置。请注意，没有与 Flannel 交互的命令行工具，就像与`etcd`交互一样:
```
user@docker4:/tmp$ tar xzvf flannel-v0.6.2-linux-amd64.tar.gz
user@docker4:/tmp$ sudo mv flanneld /usr/bin/
```
和`etcd`一样，我们想要定义一个`systemd`单元文件，这样我们就可以在每台主机上运行`flanneld`作为服务。要创建服务定义，可以在`/lib/systemd/system/`目录下创建另一个服务单元文件:
```
user@docker4:/tmp$ sudo vi /lib/systemd/system/flanneld.service
```
然后，您可以创建一个服务定义来运行`etcd`。`etcd`服务的示例单位文件如下所示:
```
[Unit]
Description=Flannel Network Fabric
Documentation=https://github.com/coreos/flannel
Before=docker.service
After=etcd.service
[Service]
Environment='DAEMON_ARGS=--etcd-endpoints=http://10.10.10.101:2379'
Type=notify
ExecStart=/usr/bin/flanneld $DAEMON_ARGS
Restart=always
RestartSec=10s
LimitNOFILE=65536
[Install]
WantedBy=multi-user.target
```
一旦单元文件同步，我们可以重新加载`systemd`，然后启用并启动服务:
```
user@docker4:/tmp$ sudo systemctl daemon-reload
user@docker4:/tmp$ sudo systemctl enable flanneld
user@docker4:/tmp$ sudo systemctl start flanneld
```
如果由于某些原因服务没有启动或保持启动，您可以使用`systemctl status flanneld`命令检查服务的状态:
```
user@docker4:/tmp$ systemctl status flanneld
  flanneld.service - Flannel Network Fabric
   Loaded: loaded (/lib/systemd/system/flanneld.service; enabled; vendor preset: enabled)
   Active: active (running) since Wed 2016-10-12 08:50:54 CDT; 6s ago
     Docs: https://github.com/coreos/flannel
 Main PID: 25161 (flanneld)
    Tasks: 6
   Memory: 3.3M
      CPU: 12ms
   CGroup: /system.slice/flanneld.service
           └─25161 /usr/bin/flanneld --etcd-endpoints=http://10.10.10.101:2379