derived from its ECDH private key and the received ECDH
public key matches the nonce the ISV client generated previously.
After the verification, the ISV software could provision secrets
to IsvE using a channel encrypted by the ECDH key дab.
3.4 Revocation
The revocation scheme follows the same manner as the original
EPID scheme [22]. One difference between the revocation schemes
of OPERA and IAS is that the latter keeps encrypted backup copies of
the EPID member private keys and disallows a previously revoked
SGX platform from getting new EPID keys. Here, there is no need
for OPERA to keep such backup copies, because OPERA relies on IAS
to verify the revocation status of an SGX platform. When the SGX
platform is revoked, it could not host any IssueE nor AttestE,
since the revoked SGX platform will be identified during setup
and/or validation processes where valid IAS verification reports
are needed.
4 ANALYSIS OF SECURITY AND PRIVACY
In this section, we analyze the security and privacy of OPERA. To
bootstrap the analysis, we assume that Intel SGX is not broken and
the confidentiality of the enclaves are guaranteed if the CPU is
up-to-date. Though recently discovered hardware vulnerabilities
have rendered SGX vulnerable to some speculative and out-of-order
execution based side-channel attacks [12, 43], we anticipate these
vulnerabilities will be addressed eventually with future microcode
patches. We also assume the code of IssueE and AttestE are scru-
tinized and verified so that they behave as expected and do not leak
extra information to unauthorized parties.
4.1 Proof of Security
Given our assumption that up-to-date SGX processors protect the
confidentiality of their hosted enclaves, we first need to show the
protocols of OPERA can verify that the CPUs on which IssueEs and
AttestEs run are up-to-date. OPERA relies on the IssueE to ver-
ify the trustworthiness of the SGX platform running the AttestE.
Specifically, during member private key provisioning, the AttestE
will need to provide an IAS quote, with which the IssueE could
verify the identity of the requesting AttestE and trustworthiness
of the SGX platform running the AttestE. Hence, the IssueE will
only provision the member private key to specific AttestEs (speci-
fied by its measurement that is hardcoded in its binary) running
on a up-to-date CPU. Therefore, the ISV only needs to verify the
IssueE is running on an up-to-date SGX platform. Verifying this
Session 10B: TEE IICCS ’19, November 11–15, 2019, London, United Kingdom2322M, N ::=
x, y, z
a, b, c, k, s
f (M1, . . . , Mn)
D ::=
M
h(D1, . . . , Dn)
fail
P, Q ::=
0
out(N , M); P
in(N , x : T); P
P | Q
!P
new a : T ; P
let x : T = D in P else Q
if M then P else Q
variables
names
constructor application
expressions
term
function application
failure
processes
terms
nil
output
input
parallel composition
replication
restriction
expression evaluation
conditional
Figure 7: Syntax of ProVerif [8]
is straightforward since an IAS verification report (indicating the
identity of the IssueE and the status of the SGX platform running
the IssueE) of the group verification certificate is also received
by the ISV. Therefore, it is verifiable by the ISV that secrets in the
IssueE and the AttestE are well-protected within the enclaves.
Next, we prove that the ISV could verify the identity and in-
tegrity of the IsvE using OPERA, and then provision secrets to IsvE
which would not be leaked to the adversary. The proof is conducted
automatically using ProVerif, an automated tool for analyzing
symbolic protocol models. ProVerif uses the π-calculus to model
the protocols and to verify a variety of security properties, such as
secrecy and authentication. ProVerif [8] takes as input protocols
and security properties to be verified, and translates the protocols
into Horn clauses. The security properties are translated into deriv-
ability queries on these clauses. An example query is whether the
attacker could derive a secret given her existing knowledge. If the
verification results indicating the queries are not derivable from the
clauses, then the desired security properties are proven. Otherwise,
a potential attack might be found.
The syntax of the input language of the ProVerif is shown
in Fig. 7. Terms represent data and messages, expressions repre-
sent computations on terms and processes represent programs. In
ProVerif, functions symbols are used to represent constructors
and destructors. Constructors are used for building terms. For ex-
ample, a symmetric encryption scheme can be represented using a
constructor senc, and the ciphertext of a message m under a sym-
metric key k can be represented as the term senc(m, k). On the other
hand, destructors are used for manipulating terms in expressions.
The semantic of a destructor д(M1, . . . , Ml) are represented as a set
of rewrite rules д(M1, . . . , Ml) → M′, where M1, . . . , Ml , M′ are
constructors or variables. For instance, the decryption algorithm of
a symmetric encryption scheme can be represented as a destructor
sdec, defined by a rewrite rule: sdec(senc(m, k), k) → m.
Each protocol role, (e.g., client or server), can be represented as
a process which can send and receive messages (terms) over public
channels. Following the Dolev-Yao model [14], ProVerif assumes
the protocol is run in the presence of an attacker, who can intercept,
synthesize and send any message she has. The keys and nonces
generated within a process is considered fresh and unguessable.
To use ProVerif to prove the security of OPERA, we model each
enclave (e.g., IssueE and AttestE) as a process. The external world
of the enclaves, including the untrusted OS and system programs,
is modeled as a Dolev-Yao attacker who cannot directly access
the secrets within the enclaves, but handles all communications
between enclaves.
However, it is not straightforward to model SGX enclaves. One
challenge is to model the SGX instructions that take the calling
enclave’s measurement as the input. Particularly, the EGETKEY and
EREPORT instructions are used for local attestation. As an enclave’s
measurements are also available to the adversary, the adversary
could call EGETKEY within an enclave developed by herself. How-
ever, the SGX mechanism prevents EGETKEY using a measurement
other than the calling enclave’s to derive keys. This mechanism
must be modeled properly in our proof. Therefore, we assign a
secret, called SGX specification to each type of enclave, which
will be used as input when calling enclave specific functions, e.g.,
EGETKEY, EREPORT. The measurement is also calculated from the se-
cret, and will then be made public. Specifically, we use a constructor
mr(sgxsp) : mrenc (where sgxsp is the type of SGX specification
secret, and mrenc is the type of enclave measurement) to calcu-
late the enclave measurement. To represent EGETKEY (particularly
for deriving report keys) and EREPORT we use two constructors
egetrpkey(sgxsp) : rpkey and ereport(sgxsp, mrenc, bitstring) : bit-
string, where rpkey is the type of report key. egetrpkey(s) derives
the report key of the enclave with its SGX specification secrete s.
ereport(s, r , m) generates a report (with message m) from an en-
clave with SGX specification s to an enclave whose measurement is
r. The corresponding destructors egetreport(bitstring) : bitstring,
egetmrfrom(bitstring) : mrenc and everif(bitstring, rpkey) : bitstr-
ing are defined by:
egetreport(ereport(s, r , m)) → m
egetmrfrom(ereport(s, r , m)) → mr(s)
everif(ereport(sa, mr(sb), m), egetrpkey(sb)) → m
egetreport is used by any entity (e.g., the adversary) that obtains
the report to access the report data since EREPORT protects only the
integrity of the report data, but not the confidentiality. egetmrfrom
is used to figure out the identity, i.e., the measurement of the enclave
who generates the report. everif is used by an enclave to verify that
whether the report is meant to be sent to her.
Now we can begin to model our framework:
• Intel’s quoting enclave is modeled as a process that takes a
report, verifies it via everif. An EPID signature will be generated
if the verification passes.
• IssueE is modeled as a process that receives EPID joining re-
quests from another enclave and provisions private member
keys to that enclave if its measurement matches AttestE’s mea-
surement.
• AttestE is modeled as a process that achieves two tasks: first
is to run the EPID joining protocol with IssueE to obtain a
Session 10B: TEE IICCS ’19, November 11–15, 2019, London, United Kingdom2323private EPID member key, and second is to take a report from
an attesting enclave, verify it and sign it accordingly.
• An example IsvE and an example ISV client are modeled as two
separate processes that derive an ECDH shared key through
a remote attestation using the OPERA quote generated by the
AttestE. The example ISV client then sends a secret encrypted
using the derived shared key to the example IsvE.
These 5 processes are trusted. The measurements of these en-
claves will be made public by sending them to a public channel.
With these 5 processes, we modeled the OPERA provisioning proto-
col, which involves Intel’s quoting enclave, IssueE and AttestE,
and the OPERA attestation protocol, which involves AttestE, IsvE
and the ISV client. The OPERA provisioning protocol is run first to
provision AttestE a member private key. Then IsvE and the ISV
client run a remote attestation with the help of AttestE. After the
remote attestation, a shared key will be derived by both IsvE and
the ISV client. The ISV client then sends to the IsvE a secret that is
encrypted using the shared key.
The security property to be proved here is the secrecy of the
secret the ISV client tries to provision to IsvE. It is represented
as a query whether the adversary could derive the secret given
that the adversary could access any publicly available information
such as enclaves’ measurements, manipulate messages exchanged
between trusted processes, run her own enclaves, etc. ProVerif
evaluated the modeled processes and protocols and concluded that
the adversary could not derive the secret, indicating that the secret
can be securely provisioned to a trusted IsvE. The related code is
listed in Appendix A.
4.2 Privacy Analysis
We consider the privacy of OPERA-SVs, IsvEs, and SGX platforms:
OPERA-SV Privacy. The OPERA enclaves (i.e., IssueEs and
4.2.1
AttestEs) both use IAS to establish their trustworthiness, an OPERA-
SV must register itself to Intel. Hence, during runtime, its own
identity, i.e., the SPID, will be revealed to Intel. Moreover, the mea-
surements of the OPERA enclaves will also be revealed to Intel since
they are included in IAS quotes.
IsvE Privacy. IAS is not involved in the attestation process
4.2.2
of the IsvE. Moreover, OPERA Servers and IssueEs are not involved
in the attestation other than providing the gvCerts. Therefore, as
long as the AttestE code is verified such that it does not collect
ISV’s information, the IsvE’ identity could be hidden from both
Intel and OPERA. However, SGX platforms will learn the identity
of the IsvEs since as the enclave metadata must be known by the
host to launch an enclave. This is the minimal privacy leakage the
ISV has to accept to run enclaves on a third-party SGX platform.
SGX platform Privacy. Note that the gvCert is completely
4.2.3
generated in the OPERA Server. AttestE provides only its own
maintained timestamp, which should be indicating the current time
interval. Hence, in the OPERA quote sent back to the ISV, there is
no extra information specific to the underlying SGX platform. We
further assume that other identity information of SGX platform,
e.g. IP address, can be concealed via network proxies. As such the
SGX platform remains anonymous to the ISV.
5 IMPLEMENTATION AND EVALUATION
5.1 Implementation
Our implemented OPERA prototype consists of three components:
the software running on OPERA Servers, including the IssueE, the
software running on SGX platforms, including the AttestE, and
the OPERA-SV frontend. In our implementation, we adopted Intel
EPID SDK (version 6.0.0) that comes along with Intel SGX SDK
(version 2.5.101.50123), which is released under Apache License
version 2.0. Intel EPID SDK provides implementations of the EPID
join protocol, signing and verification procedures. But Intel does
not open source the implementation of the EPID issuer. Therefore,
we implemented our own EPID issuer for the IssueE.
OPERA Server Software and IssueE. OPERA Server software is
5.1.1
responsible for launching IssueE and handling the communication
between the IssueE and its external world. Since the IssueE is
stateful (including the revocation lists), it might be a target of replay
attacks [27]. Hence, we leveraged the SGX platform trusted service,
particularly, the monotonic counter, to prevent replay attacks. For
IssueE setup, we implemented three ECall functions:
• create_issuer() creates a new issuer context, i.e., creating
an issuing key and its corresponding group public key, and
initializing two revocation lists. An issuer context represents
an EPID group. A replay protected policy is created to track the
status of the revocation lists, by registering a monotonic counter
with SGX trusted platform service. The monotonic counter’s
ID and its current value will be sealed together with the data it
protects, i.e., the issuing private key, the group public key, and
the hash values of the revocation lists. The complete revocation
lists are maintained by the OPERA Server software and verified
by the IssueE when needed.
• load_issuer() loads an existing issuer context sealed by itself
previously. The replay protected policy is verified: First, the
IssueE extracts the monotonic counter’s ID and queries SGX
trusted platform service to get the value of that counter. If the
counter value is the same as the one sealed previously, the sealed
issuer context is trusted and restored. Then, the IssueE checks
the hash values of the revocation lists against those extracted
from the sealed data to preserve the integrity of the lists.
• delete_issuer() is used to delete the issuer context, i.e., re-
voke the EPID group. The corresponding monotonic counter
will also be deleted.
Note that when deriving the seal key, the IssueE will use its enclave