controls
.NET
application
C/C++
application
Windows
PowerShell
Management
applications
WMI infrastructure
COM/DCOM
COM/DCOM
Providers
Managed objects
FIGURE 10-27 WMI architecture.
Developers typically must target management applications to collect data from and manage 
specific objects. An object might represent one component, such as a network adapter device, or a col-
lection of components, such as a computer. (The computer object might contain the network adapter 
object.) Providers need to define and export the representation of the objects that management ap-
plications are interested in. For example, the vendor of a network adapter might want to add adapter-
specific properties to the network adapter WMI support that Windows includes, querying and setting 
the adapter’s state and behavior as the management applications direct. In some cases (for example, 
for device drivers), Microsoft supplies a provider that has its own API to help developers leverage the 
provider’s implementation for their own managed objects with minimal coding effort.
488 
CHAPTER 10 Management, diagnostics, and tracing
The WMI infrastructure, the heart of which is the Common Information Model (CIM) Object 
Manager (CIMOM), is the glue that binds management applications and providers. (CIM is described 
later in this chapter.) The infrastructure also serves as the object-class store and, in many cases, as 
the storage manager for persistent object properties. WMI implements the store, or repository, as an 
on-disk database named the CIMOM Object Repository. As part of its infrastructure, WMI supports 
several APIs through which management applications access object data and providers supply data 
and class definitions.
Windows programs and scripts (such as Windows PowerShell) use the WMI COM API, the primary 
management API, to directly interact with WMI. Other APIs layer on top of the COM API and include an 
Open Database Connectivity (ODBC) adapter for the Microsoft Access database application. A data-
base developer uses the WMI ODBC adapter to embed references to object data in the developer’s da-
tabase. Then the developer can easily generate reports with database queries that contain WMI-based 
data. WMI ActiveX controls support another layered API. Web developers use the ActiveX controls to 
construct web-based interfaces to WMI data. Another management API is the WMI scripting API, for 
use in script-based applications (like Visual Basic Scripting Edition). WMI scripting support exists for all 
Microsoft programming language technologies.
Because WMI COM interfaces are for management applications, they constitute the primary API 
for providers. However, unlike management applications, which are COM clients, providers are COM 
or Distributed COM (DCOM) servers (that is, the providers implement COM objects that WMI interacts 
with). Possible embodiments of a WMI provider include DLLs that load into a WMI’s manager process 
or stand-alone Windows applications or Windows services. Microsoft includes a number of built-in 
providers that present data from well-known sources, such as the Performance API, the registry, the 
Event Manager, Active Directory, SNMP, and modern device drivers. The WMI SDK lets developers 
develop third-party WMI providers.
WMI providers
At the core of WBEM is the DMTF-designed CIM specification. The CIM specifies how management 
systems represent, from a systems management perspective, anything from a computer to an applica-
tion or device on a computer. Provider developers use the CIM to represent the components that make 
up the parts of an application for which the developers want to enable management. Developers use 
the Managed Object Format (MOF) language to implement a CIM representation.
In addition to defining classes that represent objects, a provider must interface WMI to the objects. 
WMI classifies providers according to the interface features the providers supply. Table 10-14 lists WMI 
provider classifications. Note that a provider can implement one or more features; therefore, a provider 
can be, for example, both a class and an event provider. To clarify the feature definitions in Table 10-14, 
let’s look at a provider that implements several of those features. The Event Log provider supports 
several objects, including an Event Log Computer, an Event Log Record, and an Event Log File. The 
Event Log is an Instance provider because it can define multiple instances for several of its classes. One 
class for which the Event Log provider defines multiple instances is the Event Log File class (Win32_
NTEventlogFile); the Event Log provider defines an instance of this class for each of the system’s event 
logs (that is, System Event Log, Application Event Log, and Security Event Log).
CHAPTER 10 Management, diagnostics, and tracing
489
TABLE 10-14 Provider classifications
Classification
Description
Class
Can supply, modify, delete, and enumerate a provider-specific class. It can also support query 
processing. Active Directory is a rare example of a service that is a class provider.
Instance
Can supply, modify, delete, and enumerate instances of system and provider-specific classes. 
An instance represents a managed object. It can also support query processing.
Property
Can supply and modify individual object property values.
Method
Supplies methods for a provider-specific class.
Event
Generates event notifications.
Event consumer
Maps a physical consumer to a logical consumer to support event notification.
The Event Log provider defines the instance data and lets management applications enumerate the 
records. To let management applications use WMI to back up and restore the Event Log files, the Event 
Log provider implements backup and restore methods for Event Log File objects. Doing so makes the 
Event Log provider a Method provider. Finally, a management application can register to receive noti-
fication whenever a new record writes to one of the Event Logs. Thus, the Event Log provider serves as 
an Event provider when it uses WMI event notification to tell WMI that Event Log records have arrived.
The Common Information Model and the Managed Object 
Format Language
The CIM follows in the steps of object-oriented languages such as C++ and C, in which a modeler 
designs representations as classes. Working with classes lets developers use the powerful modeling 
techniques of inheritance and composition. Subclasses can inherit the attributes of a parent class, and 
they can add their own characteristics and override the characteristics they inherit from the parent 
class. A class that inherits properties from another class derives from that class. Classes also compose: a 
developer can build a class that includes other classes. CIM classes consist of properties and methods. 
Properties describe the configuration and state of a WMI-managed resource, and methods are execut-
able functions that perform actions on the WMI-managed resource.
The DMTF provides multiple classes as part of the WBEM standard. These classes are CIM’s basic 
language and represent objects that apply to all areas of management. The classes are part of the 
CIM core model. An example of a core class is CIM_ManagedSystemElement. This class contains a 
few basic properties that identify physical components such as hardware devices and logical compo-
nents such as processes and files. The properties include a caption, description, installation date, and 
status. Thus, the CIM_LogicalElement and CIM_PhysicalElement classes inherit the attributes of the 
CIM_ManagedSystemElement class. These two classes are also part of the CIM core model. The WBEM 
standard calls these classes abstract classes because they exist solely as classes that other classes inherit 
(that is, no object instances of an abstract class exist). You can therefore think of abstract classes as tem-
plates that define properties for use in other classes.
A second category of classes represents objects that are specific to management areas but indepen-
dent of a particular implementation. These classes constitute the common model and are considered 
an extension of the core model. An example of a common-model class is the CIM_FileSystem class, 
490 
CHAPTER 10 Management, diagnostics, and tracing
which inherits the attributes of CIM_LogicalElement. Because virtually every operating system—includ-
ing Windows, Linux, and other varieties of UNIX—rely on file system–based structured storage, the 
CIM_FileSystem class is an appropriate constituent of the common model.
The final class category, the extended model, comprises technology-specific additions to the 
common model. Windows defines a large set of these classes to represent objects specific to the 
Windows environment. Because all operating systems store data in files, the CIM model includes the 
CIM_LogicalFile class. The CIM_DataFile class inherits the CIM_LogicalFile class, and Windows adds the 
Win32_PageFile and Win32_ShortcutFile file classes for those Windows file types.
Windows includes different WMI management applications that allow an administrator to inter-
act with WMI namespaces and classes. The WMI command-line utility (WMIC.exe) and Windows 
PowerShell are able to connect to WMI, execute queries, and invoke WMI class object methods. 
Figure 10-28 shows a PowerShell window extracting information of the Win32_NTEventlogFile class, 
part of the Event Log provider. This class makes extensive use of inheritance and derives from CIM_
DataFile. Event Log files are data files that have additional Event Log–specific attributes such as a log 
file name (LogfileName) and a count of the number of records that the file contains (NumberOfRecords). 
The Win32_NTEventlogFile is based on several levels of inheritance, in which CIM_DataFile derives 
from CIM_LogicalFile, which derives from CIM_LogicalElement, and CIM_LogicalElement derives from 
CIM_ManagedSystemElement.
FIGURE 10-28 Windows PowerShell extracting information from the Win32_NTEventlogFile class.
CHAPTER 10 Management, diagnostics, and tracing
491
As stated earlier, WMI provider developers write their classes in the MOF language. The following 
output shows the definition of the Event Log provider’s Win32_NTEventlogFile, which has been queried 
in Figure 10-28:
[dynamic: ToInstance, provider("MS_NT_EVENTLOG_PROVIDER"): ToInstance, SupportsUpdate, 
Locale(1033): ToInstance, UUID("{8502C57B-5FBB-11D2-AAC1-006008C78BC7}"): ToInstance] 
class Win32_NTEventlogFile : CIM_DataFile 
{ 
   [Fixed: ToSubClass, read: ToSubClass] string LogfileName; 
   [read: ToSubClass, write: ToSubClass] uint32 MaxFileSize; 
   [read: ToSubClass] uint32 NumberOfRecords; 
   [read: ToSubClass, volatile: ToSubClass, ValueMap{"0", "1..365", "4294967295"}: 
    ToSubClass] string OverWritePolicy; 
   [read: ToSubClass, write: ToSubClass, Range("0-365 | 4294967295"): ToSubClass] 
    uint32  OverwriteOutDated; 
   [read: ToSubClass] string Sources[]; 
   [ValueMap{"0", "8", "21", ".."}: ToSubClass, implemented, Privileges{ 
    "SeSecurityPrivilege", "SeBackupPrivilege"}: ToSubClass] 
uint32 ClearEventlog([in] string ArchiveFileName); 
   [ValueMap{"0", "8", "21", "183", ".."}: ToSubClass, implemented, Privileges{ 
    "SeSecurityPrivilege", "SeBackupPrivilege"}: ToSubClass] 
uint32 BackupEventlog([in] string ArchiveFileName); 
};  
One term worth reviewing is dynamic, which is a descriptive designator for the Win32_NTEventlogFile 
class that the MOF file in the preceding output shows. Dynamic means that the WMI infrastructure 
asks the WMI provider for the values of properties associated with an object of that class whenever a 
management application queries the object’s properties. A static class is one in the WMI repository; the 
WMI infrastructure refers to the repository to obtain the values instead of asking a provider for the val-
ues. Because updating the repository is a relatively expensive operation, dynamic providers are more 
efficient for objects that have properties that change frequently.
EXPERIMENT: Viewing the MOF definitions of WMI classes
You can view the MOF definition for any WMI class by using the Windows Management 
Instrumentation Tester tool (WbemTest) that comes with Windows. In this experiment, we 
look at the MOF definition for the Win32_NTEventLogFile class:
1.
Type Wbemtest in the Cortana search box and press Enter. The Windows Management
Instrumentation Tester should open.
2.
Click the Connect button, change the Namespace to root\cimv2, and connect. The tool
should enable all the command buttons, as shown in the following figure:
EXPERIMENT: Viewing the MOF definitions of WMI classes
You can view the MOF definition for any WMI class by using the Windows Management 
Instrumentation Tester tool (WbemTest) that comes with Windows. In this experiment, we 
look at the MOF definition for the Win32_NTEventLogFile class:
1.
Type Wbemtest in the Cortana search box and press Enter. The Windows Management 
Instrumentation Tester should open.
2.
Click the Connect button, change the Namespace to root\cimv2, and connect. The tool 
should enable all the command buttons, as shown in the following figure:
492 
CHAPTER 10 Management, diagnostics, and tracing
3.
Click the Enum Classes button, select the Recursive option button, and then click OK.
4.
Find Win32_NTEventLogFile in the list of classes, and then double-click it to see its class
properties.
5.
Click the Show MOF button to open a window that displays the MOF text.
After constructing classes in MOF, WMI developers can supply the class definitions to WMI in several 
ways. WDM driver developers compile a MOF file into a binary MOF (BMF) file—a more compact 
binary representation than an MOF file—and can choose to dynamically give the BMF files to the WDM 
infrastructure or to statically include it in their binary. Another way is for the provider to compile the 
MOF and use WMI COM APIs to give the definitions to the WMI infrastructure. Finally, a provider can 
use the MOF Compiler (Mofcomp.exe) tool to give the WMI infrastructure a classes-compiled represen-
tation directly.
Note Previous editions of Windows (until Windows 7) provided a graphical tool, called 
WMI CIM Studio, shipped with the WMI Administrative Tool. The tool was able to graphi-
cally show WMI namespaces, classes, properties, and methods. Nowadays, the tool is not 
supported or available for download because it was superseded by the WMI capacities of 
Windows PowerShell. PowerShell is a scripting language that does not run with a GUI. Some 
third-party tools present a similar interface of CIM Studio. One of them is WMI Explorer, 
which is downloadable from https://github.com/vinaypamnani/wmie2/releases.
3.
Click the Enum Classes button, select the Recursive option button, and then click OK.
4.
Find Win32_NTEventLogFile in the list of classes, and then double-click it to see its class 
properties.
5.
Click the Show MOF button to open a window that displays the MOF text.
CHAPTER 10 Management, diagnostics, and tracing
493
The Common Information Model (CIM) repository is stored in the %SystemRoot%\System32\wbem\
Repository path and includes the following:
I 
Index.btr Binary-tree (btree) index file
I 
MappingX.map Transaction control files (X is a number starting from 1)
I 
Objects.data CIM repository where managed resource definitions are stored
The WMI namespace
Classes define objects, which are provided by a WMI provider. Objects are class instances on a sys-
tem. WMI uses a namespace that contains several subnamespaces that WMI arranges hierarchically to 
organize objects. A management application must connect to a namespace before the application can 
access objects within the namespace.
WMI names the namespace root directory ROOT. All WMI installations have four predefined 
namespaces that reside beneath root: CIMV2, Default, Security, and WMI. Some of these namespaces 
have other namespaces within them. For example, CIMV2 includes the Applications and ms_409 
namespaces as subnamespaces. Providers sometimes define their own namespaces; you can see the 
WMI namespace (which the Windows device driver WMI provider defines) beneath ROOT in Windows.
Unlike a file system namespace, which comprises a hierarchy of directories and files, a WMI 
namespace is only one level deep. Instead of using names as a file system does, WMI uses object 
properties that it defines as keys to identify the objects. Management applications specify class names 
with key names to locate specific objects within a namespace. Thus, each instance of a class must be 
uniquely identifiable by its key values. For example, the Event Log provider uses the Win32_NTLogEvent 
class to represent records in an Event Log. This class has two keys: Logfile, a string; and RecordNumber, 
an unsigned integer. A management application that queries WMI for instances of Event Log records 
obtains them from the provider key pairs that identify records. The application refers to a record using 
the syntax that you see in this sample object path name:
\\ANDREA-LAPTOP\root\CIMV2:Win32_NTLogEvent.Logfile="Application", 
RecordNumber="1"
The first component in the name (\\ANDREA-LAPTOP) identifies the computer on which the object 
is located, and the second component (\root\CIMV2) is the namespace in which the object resides. The 
class name follows the colon, and key names and their associated values follow the period. A comma 
separates the key values.
WMI provides interfaces that let applications enumerate all the objects in a particular class or to 
make queries that return instances of a class that match a query criterion.
Class association
Many object types are related to one another in some way. For example, a computer object has a 
processor, software, an operating system, active processes, and so on. WMI lets providers construct an 
association class to represent a logical connection between two different classes. Association classes 
494 
CHAPTER 10 Management, diagnostics, and tracing
associate one class with another, so the classes have only two properties: a class name and the Ref 
modifier. The following output shows an association in which the Event Log provider’s MOF file associ-
ates the Win32_NTLogEvent class with the Win32_ComputerSystem class. Given an object, a manage-
ment application can query associated objects. In this way, a provider defines a hierarchy of objects.
[dynamic: ToInstance, provider("MS_NT_EVENTLOG_PROVIDER"): ToInstance, EnumPrivileges{"SeSe
curityPrivilege"}: ToSubClass, Privileges{"SeSecurityPrivilege"}: ToSubClass, Locale(1033): 
ToInstance, UUID("{8502C57F-5FBB-11D2-AAC1-006008C78BC7}"): ToInstance, Association: 
DisableOverride ToInstance ToSubClass] 
class Win32_NTLogEventComputer 
{ 
    [key, read: ToSubClass] Win32_ComputerSystem ref Computer; 
    [key, read: ToSubClass] Win32_NTLogEvent ref Record; 
};
Figure 10-29 shows a PowerShell window displaying the first Win32_NTLogEventComputer class 
instance located in the CIMV2 namespace. From the aggregated class instance, a user can query the as-
sociated Win32_ComputerSystem object instance WIN-46E4EFTBP6Q, which generated the event with 
record number 1031 in the Application log file.
FIGURE 10-29 The Win32_NTLogEventComputer association class.
CHAPTER 10 Management, diagnostics, and tracing
495
EXPERIMENT: Using WMI scripts to manage systems
A powerful aspect of WMI is its support for scripting languages. Microsoft has generated hun-
dreds of scripts that perform common administrative tasks for managing user accounts, files, the 
registry, processes, and hardware devices. The Microsoft TechNet Scripting Center website serves 
as the central location for Microsoft scripts. Using a script from the scripting center is as easy as 
copying its text from your Internet browser, storing it in a file with a .vbs extension, and running 
it with the command cscript script.vbs, where script is the name you gave the script. 
Cscript is the command-line interface to Windows Script Host (WSH).
Here’s a sample TechNet script that registers to receive events when Win32_Process object 
instances are created, which occur whenever a process starts and prints a line with the name of 
the process that the object represents:
strComputer = "."  
Set objWMIService = GetObject("winmgmts:" _  
    & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2") 
Set colMonitoredProcesses = objWMIService. _
    ExecNotificationQuery("SELECT * FROM __InstanceCreationEvent " _  
& " WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'") 
i = 0  