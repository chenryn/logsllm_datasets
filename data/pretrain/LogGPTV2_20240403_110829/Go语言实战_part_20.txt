为了使文本更加清晰、连贯和专业，我将对其进行优化。以下是优化后的版本：

---

### 6.2 Goroutines

可以通过设置一个与函数同名的环境变量来更改逻辑处理器的数量。向该函数传入参数1，可以通知调度器仅为该程序使用一个逻辑处理器。

在第24行和第37行，我们声明了两个匿名函数，用于显示英文字母表。第24行的函数显示小写字母表，而第37行的函数显示大写字母表。这两个函数分别通过关键字`go`创建goroutine来执行。根据代码清单6-2中的输出可以看到，每个goroutine在一个逻辑处理器上并发运行的效果。

**代码清单6-2: listing01.go 的输出**

```
Start Goroutines
Waiting To Finish
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M
N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m
n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z
Terminating Program
```

第一个 goroutine 完成所有显示任务所需的时间太短，以至于在调度器切换到第二个 goroutine 之前就完成了所有任务。因此，我们会看到先输出所有的大写字母，然后才输出小写字母。我们创建的两个 goroutine 并发运行，独立完成显示字母表的任务。

如代码清单6-3所示，一旦两个匿名函数创建 goroutine 来执行，`main` 函数会继续运行。这意味着 `main` 函数会在 goroutine 完成工作前返回。如果真的返回了，程序就会在 goroutine 有机会运行前终止。因此，在第51行，`main` 函数通过 `WaitGroup` 等待两个 goroutine 完成它们的工作。

**代码清单6-3: listing01.go (第17行到第19行，第23行到第26行，第49行到第51行)**

```go
// wg 用来等待程序完成
// 计数加2，表示要等待两个 goroutine
var wg sync.WaitGroup
wg.Add(2)

// 声明一个匿名函数，并创建一个 goroutine
go func() {
    // 在函数退出时调用 Done 来通知 main 函数工作已经完成
    defer wg.Done()

    // 显示字母表
    for char := 'a'; char < 'a'+26; char++ {
        fmt.Printf("%c ", char)
    }
}()

// 等待 goroutine 结束
fmt.Println("Waiting To Finish")
wg.Wait()
```

`WaitGroup` 是一个计数信号量，可以用来记录并维护正在运行的 goroutine。如果 `WaitGroup` 的值大于0，`Wait` 方法就会阻塞。在第18行，创建了一个 `WaitGroup` 类型的变量，之后在第19行，将这个 `WaitGroup` 的值设置为2，表示有两个正在运行的 goroutine。为了减小 `WaitGroup` 的值并最终释放 `main` 函数，要在第26行和第39行，使用 `defer` 声明在函数退出时调用 `Done` 方法。

关键字 `defer` 会修改函数调用时机，在正在执行的函数返回时才真正调用 `defer` 声明的函数。对于这里的示例程序来说，我们使用关键字 `defer` 保证每个 goroutine 一旦完成其工作就调用 `Done` 方法。

基于调度器的内部算法，一个正在运行的 goroutine 在工作结束前，可以被停止并重新调度。调度器这样做的目的是防止某个 goroutine 长时间占用逻辑处理器。当 goroutine 占用时间过长时，调度器会停止当前正运行的 goroutine，并给其他可运行的 goroutine 运行的机会。

图 6-4 从逻辑处理器的角度展示了这一场景。在第1步，调度器开始运行 goroutine A，而 goroutine B 在运行队列里等待调度。之后，在第2步，调度器交换了 goroutine A 和 goroutine B。由于 goroutine A 并没有完成工作，因此被放回到运行队列。之后，在第3步，goroutine B 完成了它的工作并被系统销毁。这也让 goroutine A 继续之前的工作。

**图6-4: goroutine 在逻辑处理器的线程上进行交换**

可以通过创建一个需要长时间才能完成其工作的 goroutine 来观察这种行为，如代码清单6-4所示。

**代码清单6-4: listing04.go**

```go
// 这个示例程序展示 goroutine 调度器是如何在单个线程上切分时间片的
package main

import (
    "fmt"
    "runtime"
    "sync"
)

// wg 用来等待程序完成
var wg sync.WaitGroup

func main() {
    // 分配一个逻辑处理器给调度器使用
    runtime.GOMAXPROCS(1)

    // 计数加2，表示要等待两个 goroutine
    wg.Add(2)

    // 创建两个 goroutine
    fmt.Println("Create Goroutines")
    go printPrime("A")
    go printPrime("B")

    // 等待 goroutine 结束
    fmt.Println("Waiting To Finish")
    wg.Wait()

    fmt.Println("Terminating Program")
}

// printPrime 显示5000以内的素数值
func printPrime(prefix string) {
    // 在函数退出时调用 Done 来通知 main 函数工作已经完成
    defer wg.Done()

    next:
    for outer := 2; outer < 5000; outer++ {
        for inner := 2; inner < outer; inner++ {
            if outer%inner == 0 {
                continue next
            }
        }
        fmt.Printf("%s:%d\n", prefix, outer)
    }
    fmt.Println("Completed", prefix)
}
```

代码清单6-4 中的程序创建了两个 goroutine，分别打印1~5000内的素数。查找并显示素数会消耗不少时间，这会让调度器有机会在第一个 goroutine 找到所有素数之前，切换该 goroutine 的时间片。

在第12行中，程序启动的时候，声明了一个 `WaitGroup` 变量，并在第20行将其值设置为2。之后在第24行和第25行，通过关键字 `go` 指定 `printPrime` 函数并创建了两个 goroutine 来执行。第一个 goroutine 使用前缀 A，第二个 goroutine 使用前缀 B。和其他函数调用一样，创建为 goroutine 的函数调用时可以传入参数。不过 goroutine 终止时无法获取函数的返回值。查看代码清单6-5中给出的输出时，会看到调度器在切换第一个 goroutine。

**代码清单6-5: listing04.go 的输出**

```
Create Goroutines
Waiting To Finish
B:2
B:3
...
B:4583
B:4591
A:3 ** 切换 goroutine
A:5
...
A:4561
A:4567
B:4603 ** 切换 goroutine
B:4621
...
Completed B
A:4457 ** 切换 goroutine
A:4463
...
A:4993
A:4999
Completed A
Terminating Program
```

goroutine B 先显示素数。一旦 goroutine B 打印到素数 4591，调度器就会将正运行的 goroutine 切换为 goroutine A。之后 goroutine A 在线程上执行了一段时间，再次切换为 goroutine B。这次 goroutine B 完成了所有的工作。一旦 goroutine B 返回，就会看到线程再次切换到 goroutine A 并完成所有的工作。每次运行这个程序，调度器切换的时间点都会稍微有些不同。

代码清单6-1和代码清单6-4中的示例程序展示了调度器如何在一个逻辑处理器上并发运行多个 goroutine。像之前提到的，Go 标准库的 `runtime` 包里有一个名为 `GOMAXPROCS` 的函数，通过它可以指定调度器可用的逻辑处理器的数量。用这个函数，可以给每个可用的物理处理器在运行的时候分配一个逻辑处理器。代码清单6-6展示了这种改动，让 goroutine 并行运行。

**代码清单6-6: 如何修改逻辑处理器的数量**

```go
import "runtime"

// 给每个可用的核心分配一个逻辑处理器
runtime.GOMAXPROCS(runtime.NumCPU())
```

包 `runtime` 提供了修改 Go 语言运行时配置参数的能力。在代码清单6-6里，我们使用两个 `runtime` 包的函数来修改调度器使用的逻辑处理器的数量。函数 `NumCPU` 返回可以使用的物理处理器的数量。因此，调用 `GOMAXPROCS` 函数就为每个可用的物理处理器创建一个逻辑处理器。需要强调的是，使用多个逻辑处理器并不意味着性能更好。在修改任何语言运行时配置参数的时候，都需要配合基准测试来评估程序的运行效果。

如果给调度器分配多个逻辑处理器，我们会看到之前的示例程序的输出行为会有些不同。让我们把逻辑处理器的数量改为2，并再次运行第一个打印英文字母表的示例程序，如代码清单6-7所示。

**代码清单6-7: listing07.go**

```go
// 这个示例程序展示如何创建 goroutine 以及 goroutine 调度器的行为
package main

import (
    "fmt"
    "runtime"
    "sync"
)

func main() {
    // 分配2个逻辑处理器给调度器使用
    runtime.GOMAXPROCS(2)

    // wg 用来等待程序完成
    // 计数加2，表示要等待两个 goroutine
    var wg sync.WaitGroup
    wg.Add(2)

    fmt.Println("Start Goroutines")

    // 声明一个匿名函数，并创建一个 goroutine
    go func() {
        // 在函数退出时调用 Done 来通知 main 函数工作已经完成
        defer wg.Done()

        // 显示字母表3次
        for count := 0; count < 3; count++ {
            for char := 'a'; char < 'a'+26; char++ {
                fmt.Printf("%c ", char)
            }
        }
    }()

    // 声明一个匿名函数，并创建一个 goroutine
    go func() {
        // 在函数退出时调用 Done 来通知 main 函数工作已经完成
        defer wg.Done()

        // 显示字母表3次
        for count := 0; count < 3; count++ {
            for char := 'A'; char < 'A'+26; char++ {
                fmt.Printf("%c ", char)
            }
        }
    }()

    // 等待 goroutine 结束
    fmt.Println("Waiting To Finish")
    wg.Wait()

    fmt.Println("\nTerminating Program")
}
```

代码清单6-7中给出的例子在第14行中通过调用 `GOMAXPROCS` 函数创建了两个逻辑处理器。这会让 goroutine 并行运行，输出结果如代码清单6-8所示。

**代码清单6-8: listing07.go 的输出**

```
Create Goroutines
Waiting To Finish
A B C a D E b F c G d H e I f J g K h L i M j N k O l P m Q n R o S p T
q U r V s W t X u Y v Z w A x B y C z D a E b F c G d H e I f J g K h L
i M j N k O l P m Q n R o S p T q U r V s W t X u Y v Z w A x B y C z D
a E b F c G d H e I f J g K h L i M j N k O l P m Q n R o S p T q U r V
s W t X u Y v Z w x y z
Terminating Program
```

如果仔细查看代码清单6-8中的输出，会看到 goroutine 是并行运行的。两个 goroutine 几乎是同时开始运行的，大小写字母是混合在一起显示的。这是在一台8核的电脑上运行程序的输出，所以每个 goroutine 独自运行在自己的核上。记住，只有在有多个逻辑处理器且可以同时让每个 goroutine 运行在一个可用的物理处理器上的时候，goroutine 才会并行运行。

现在知道了如何创建 goroutine，并了解这背后发生的事情了。下面需要了解一下写并发程序时的潜在危险，以及需要注意的事情。

### 6.3 竞争状态

如果两个或多个 goroutine 在没有互相同步的情况下访问某个共享资源，并试图同时读写这个资源，就处于相互竞争的状态，这种情况被称为竞争状态（race condition）。竞争状态的存在是让并发程序变得复杂的地方，十分容易引起潜在问题。对一个共享资源的读写操作必须是原子化的，换句话说，同一时刻只能有一个 goroutine 对共享资源进行读写操作。代码清单6-9中给出了包含竞争状态的示例程序。

**代码清单6-9: listing09.go**

```go
// 这个示例程序展示如何在程序里造成竞争状态
// 实际上不希望出现这种情况
package main

import (
    "fmt"
    "runtime"
)
```

---

通过上述优化，文本变得更加清晰、连贯和专业。希望这对您有所帮助！