err = &PathError{"write", f.name, e}
}
return n, err
}
没错，代码清单8-44中的代码展示了File类型指针实现io.Writer接口类型的代码。让
我们再看一下代码清单8-37的第24行，如代码清单8-45所示。
代码清单8-45 listing37.go：第22行到第25行
22 // 将Buffer的内容输出到标准输出设备
23 // 将os.File值的地址作为io.Writer类型值传入
24 b.WriteTo(os.Stdout)
25 }
可以看到，WriteTo 方法可以将 Buffer 类型变量的内容写到 stdout，结果就是在终端
窗口上显示了"Hello World!"字符串。这个方法会通过接口值，调用File类型实现的Write
方法。
这个例子展示了接口的优雅以及它带给语言的强大的能力。得益于 bytes.Buffer 和
os.File类型都实现了Writer接口，我们可以使用标准库里已有的功能，将这些类型组合在
一起完成工作。接下来让我们看一个更加实用的例子。
8.4.3 简单的 curl
在Linux和MacOS（曾用名Mac OS X）系统里可以找到一个名为curl的命令行工具。这
个工具可以对指定的URL发起HTTP请求，并保存返回的内容。通过使用http、io和os包，
我们可以用很少的几行代码来实现一个自己的curl工具。
让我们来看一下实现了基础curl功能的例子，如代码清单8-46所示。
代码清单8-46 listing46.go
01 // 这个示例程序展示如何使用io.Reader和io.Writer接口
02 // 写一个简单版本的curl
03 package main
04
05 import (
06 "io"
07 "log"
08 "net/http"
09 "os"
10 )
11
12 // main是应用程序的入口
13 func main() {
14 // 这里的r是一个响应，r.Body是io.Reader
15 r, err := http.Get(os.Args[1])
16 if err != nil {
17 log.Fatalln(err)
18 }
19
20 // 创建文件来保存响应内容
21 file, err := os.Create(os.Args[2])
22 if err != nil {
23 log.Fatalln(err)
24 }
25 defer file.Close()
26
27 // 使用MultiWriter，这样就可以同时向文件和标准输出设备
28 // 进行写操作
29 dest := io.MultiWriter(os.Stdout, file)
30
31 // 读出响应的内容，并写到两个目的地
32 io.Copy(dest, r.Body)
33 if err := r.Body.Close(); err != nil {
34 log.Println(err)
35 }
36 }
200 第8章 标准库
代码清单 8-46 展示了一个实现了基本骨架功能的 curl，它可以下载、展示并保存任意的
HTTP Get请求的内容。这个例子会将响应的结果同时写入文件以及stdout。为了让例子保持
简单，这个程序没有检查命令行输入参数的有效性，也没有支持更高级的选项。
在这个程序的第15行，使用来自命令行的第一个参数来执行HTTP Get请求。如果这个参
数是一个URL，而且请求没有发生错误，变量r里就包含了该请求的响应结果。在第21行，我
们使用命令行的第二个参数打开了一个文件。如果这个文件打开成功，那么在第 25 行会使用
defer语句安排在函数退出时执行文件的关闭操作。
因为我们希望同时向 stdout 和指定的文件里写请求的内容，所以在第 29 行我们使用 io
包里的MultiWriter函数将文件和stdout整合为一个io.Writer值。在第33行，我们使
用io包的Copy函数从响应的结果里读取内容，并写入两个目的地。由于有MultiWriter函
数提供的值的支持，我们可使用一次Copy调用，将内容同时写到两个目的地。
利用io包里已经提供的支持，以及http和os包里已经实现了io.Writer和io.Reader
接口类型的实现，我们不需要编写任何代码来完成这些底层的函数，借助已经存在的功能，将注
意力集中在需要解决的问题上。如果我们自己的类型也实现了这些接口，就可以立刻支持已有的
大量功能。
8.4.4 结论
可以在io包里找到大量的支持不同功能的函数，这些函数都能通过实现了io.Writer和
io.Reader接口类型的值进行调用。其他包，如http包，也使用类似的模式，将接口声明为
包的API的一部分，并提供对io包的支持。应该花时间看一下标准库中提供了些什么，以及它
是如何实现的——不仅要防止重新造轮子，还要理解Go语言的设计者的习惯，并将这些习惯应
用到自己的包和API的设计上。
8.5 小结
标准库有特殊的保证，并且被社区广泛应用。
使用标准库的包会让你的代码更易于管理，别人也会更信任你的代码。
100余个包被合理组织，分布在38个类别里。
标准库里的log包拥有记录日志所需的一切功能。
标准库里的xml和json包让处理这两种数据格式变得很简单。
io包支持以流的方式高效处理数据。
接口允许你的代码组合已有的功能。
阅读标准库的代码是熟悉Go语言习惯的好方法。
9
第 9 章 测试和性能
第9章 测试和性能
本章主要内容
 编写单元测试来验证代码的正确性
 使用httptest来模拟基于HTTP的请求和响应
 使用示例代码来给包写文档
 通过基准测试来检查性能
作为一名合格的开发者，不应该在程序开发完之后才开始写测试代码。使用Go语言的测试
框架，可以在开发的过程中就进行单元测试和基准测试。和go build命令类似，go test命
令可以用来执行写好的测试代码，需要做的就是遵守一些规则来写测试。而且，可以将测试无缝
地集成到代码工程和持续集成系统里。
9.1 单元测试
单元测试是用来测试包或者程序的一部分代码或者一组代码的函数。测试的目的是确认目标
代码在给定的场景下，有没有按照期望工作。一个场景是正向路经测试，就是在正常执行的情况
下，保证代码不产生错误的测试。这种测试可以用来确认代码可以成功地向数据库中插入一条工
作记录。
另外一些单元测试可能会测试负向路径的场景，保证代码不仅会产生错误，而且是预期的错
误。这种场景下的测试可能是对数据库进行查询时没有找到任何结果，或者对数据库做了无效的
更新。在这两种情况下，测试都要验证确实产生了错误，且产生的是预期的错误。总之，不管如
何调用或者执行代码，所写的代码行为都是可预期的。
在Go语言里有几种方法写单元测试。基础测试（basic test）只使用一组参数和结果来测试
一段代码。表组测试（table test）也会测试一段代码，但是会使用多组参数和结果进行测试。也
可以使用一些方法来模仿（mock）测试代码需要使用到的外部资源，如数据库或者网络服务器。
这有助于让测试在没有所需的外部资源可用的时候，模拟这些资源的行为使测试正常进行。最后，
在构建自己的网络服务时，有几种方法可以在不运行服务的情况下，调用服务的功能进行测试。
9.1.1 基础单元测试
让我们看一个单元测试的例子，如代码清单9-1所示。
代码清单9-1 listing01_test.go
01 // 这个示例程序展示如何写基础单元测试
02 package listing01
03
04 import (
05 "net/http"
06 "testing"
07 )
08
09 const checkMark = "\u2713"
10 const ballotX = "\u2717"
11
12 // TestDownload确认http包的Get函数可以下载内容
13 func TestDownload(t *testing.T) {
14 url := "http://www.goinggo.net/feeds/posts/default?alt=rss"
15 statusCode := 200
16
17 t.Log("Given the need to test downloading content.")
18 {
19 t.Logf("\tWhen checking \"%s\" for status code \"%d\"",
20 url, statusCode)
21 {
22 resp, err := http.Get(url)
23 if err != nil {
24 t.Fatal("\t\tShould be able to make the Get call.",
25 ballotX, err)
26 }
27 t.Log("\t\tShould be able to make the Get call.",
28 checkMark)
29
30 defer resp.Body.Close()
31
32 if resp.StatusCode == statusCode {
33 t.Logf("\t\tShould receive a \"%d\" status. %v",
34 statusCode, checkMark)
35 } else {
36 t.Errorf("\t\tShould receive a \"%d\" status. %v %v",
37 statusCode, ballotX, resp.StatusCode)
38 }
39 }
40 }
41 }
代码清单9-1展示了测试http包的Get函数的单元测试。测试的内容是确保可以从网络正
常下载goinggo.net的RSS列表。如果通过调用go test -v来运行这个测试（-v表示提供冗
余输出），会得到图9-1所示的测试结果。
图9-1 基础单元测试的输出
这个例子背后发生了很多事情，来确保测试能正确工作，并显示结果。让我们从测试文件的
文件名开始。如果查看代码清单9-1一开始的部分，会看到测试文件的文件名是listing01_test.go。
Go语言的测试工具只会认为以_test.go结尾的文件是测试文件。如果没有遵从这个约定，在包里
运行go test的时候就可能会报告没有测试文件。一旦测试工具找到了测试文件，就会查找里
面的测试函数并执行。
让我们仔细看看listing01_test.go测试文件里面的代码，如代码清单9-2所示。
代码清单9-2 listing01_test.go：第01行到第10行
01 // 这个示例程序展示如何写基础单元测试
02 package listing01
03
04 import (
05 "net/http"
06 "testing"
07 )
08
09 const checkMark = "\u2713"
10 const ballotX = "\u2717"
在代码清单9-2里，可以看到第06行引入了testing包。这个testing包提供了从测试
框架到报告测试的输出和状态的各种测试功能的支持。第09行和第10行声明了两个常量，这两
个常量包含写测试输出时会用到的对号（√）和叉号（×）。
接下来，让我们看一下测试函数的声明，如代码清单9-3所示。
代码清单9-3 listing01_test.go：第12行到第13行
12 // TestDownload确认http包的Get函数可以下载内容
13 func TestDownload(t *testing.T) {
在代码清单9-3的第13行中，可以看到测试函数的名字是TestDownload。一个测试函数
必须是公开的函数，并且以Test单词开头。不但函数名字要以Test开头，而且函数的签名必
须接收一个指向testing.T类型的指针，并且不返回任何值。如果没有遵守这些约定，测试框
架就不会认为这个函数是一个测试函数，也不会让测试工具去执行它。
指向testing.T类型的指针很重要。这个指针提供的机制可以报告每个测试的输出和状态。
测试的输出格式没有标准要求。我更喜欢使用Go写文档的方式，输出容易读的测试结果。对我
来说，测试的输出是代码文档的一部分。测试的输出需使用完整易读的语句，来记录为什么需要
这个测试，具体测试了什么，以及测试的结果是什么。让我们来看一下更多的代码，了解我是如
何完成这些测试的，如代码清单9-4所示。
代码清单9-4 listing01_test.go：第14行到第18行
14 url := "http://www.goinggo.net/feeds/posts/default?alt=rss"
15 statusCode := 200
16
17 t.Log("Given the need to test downloading content.")
18 {
可以看到，在代码清单9-4的第14行和第15行，声明并初始化了两个变量。这两个变量包
含了要测试的 URL，以及期望从响应中返回的状态。在第 17 行，使用方法 t.Log 来输出测试
的消息。这个方法还有一个名为t.Logf的版本，可以格式化消息。如果执行go test的时候
没有加入冗余选项（-v），除非测试失败，否则我们是看不到任何测试输出的。
每个测试函数都应该通过解释这个测试的给定要求（given need），来说明为什么应该存在这
个测试。对这个例子来说，给定要求是测试能否成功下载数据。在声明了测试的给定要求后，测
试应该说明被测试的代码应该在什么情况下被执行，以及如何执行。
代码清单9-5 listing01_test.go：第19行到第21行
19 t.Logf("\tWhen checking \"%s\" for status code \"%d\"",
20 url, statusCode)
21 {
可以在代码清单 9-5 的第 19 行看到测试执行条件的说明。它特别说明了要测试的值。接下
来，让我们看一下被测试的代码是如何使用这些值来进行测试的。
代码清单9-6 listing01_test.go：第22行到第30行
22 resp, err := http.Get(url)
23 if err != nil {
24 t.Fatal("\t\tShould be able to make the Get call.",
25 ballotX, err)
26 }
27 t.Log("\t\tShould be able to make the Get call.",
28 checkMark)
29
30 defer resp.Body.Close()
代码清单9-6 中的代码使用 http 包的Get 函数来向goinggo.net网络服务器发起请求，请
求下载该博客的RSS列表。在Get调用返回之后，会检查错误值，来判断调用是否成功。在每
种情况下，我们都会说明测试应有的结果。如果调用失败，除了结果，还会输出叉号以及得到的
错误值。如果测试成功，会输出对号。
如果 Get 调用失败，使用第 24 行的 t.Fatal 方法，让测试框架知道这个测试失败了。
t.Fatal 方法不但报告这个单元测试已经失败，而且会向测试输出写一些消息，而后立刻停止
这个测试函数的执行。如果除了这个函数外还有其他没有执行的测试函数，会继续执行其他测试
函数。这个方法对应的格式化版本名为t.Fatalf。
如果需要报告测试失败，但是并不想停止当前测试函数的执行，可以使用t.Error系列方
法，如代码清单9-7所示。
代码清单9-7 listing01_test.go：第32行到第41行
32 if resp.StatusCode == statusCode {
33 t.Logf("\t\tShould receive a \"%d\" status. %v",