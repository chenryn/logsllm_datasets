position pos in this sequence. It uses an auxiliary array visited to mark
already visited blocks whose elements are initialized with false. The
return value is a positive integer denoting the execution length starting
at position pos.
1. When the instruction at pos is invalid, return 0.
2. When the instruction at pos has already been visited, a loop is detected and
0 returned.
3. Find the instruction chain starting at pos and calculate its length L. In
addition, mark all its operations as visited.
4. When the instruction chain ends with invalid bytes, return L.
5. Otherwise, the chain ends in a jump instruction. When the target of the
jump is outside the byte sequence seq or cannot be determined statically,
return L + 1.
6. When the jump targets an operation at position target that is inside the
sequence, call the algorithm recursively with the position set to target and
assign the result to L(cid:2).
7. When the jump is unconditional, return L + L(cid:2).
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
283
8. Otherwise, it is a conditional jump. Call the algorithm recursively for the
continuation of the jump - i.e. set the position to the operation immediately
following the jump instruction and assign the result to L(cid:2)(cid:2). Then determine
the maximum of L(cid:2) and L(cid:2)(cid:2) and assign it to Lmax. Then return L + Lmax.
Deﬁnition:
The maximum execution length (MEL) of a byte sequence is the maxi-
mum of all execution lengths that are calculated by starting from every
possible byte position in the sequence. It is possible that a byte sequence
contains several disjoint abstract execution ﬂows and the MEL denotes
the length of the longest.
4 Detecting Buﬀer Overﬂows
Following the deﬁnitions above, we expect that requests which contain buﬀer
overﬂow exploits have a very high MEL. The sledge is a long chain of valid
instructions that eventually leads to the execution of the exploit code. Even
when the attacker inserts jumps and attempts to disguise the functionality of
this segment, its execution length is high. In contrast to that, the MEL of a
normal request should be comparatively low. This is due to the fact that the
data exchanged between client and server is determined by the communication
protocol and has a certain semantics. Although parts of that data may represent
executable code, the chances that random byte sequences yield a long executable
chain is very small.
The idea is that a static threshold can be established that separates mali-
cious from normal requests by considering requests with a large MEL as mali-
cious while those with a small execution length as regular. Because the sledge
has to be executable in order to fulﬁll its task, a simple test is utilized to ﬁnd
long executable chains. Requests are analyzed immediately after they have been
received by the server. This enables the system to drop potential dangerous
requests before the service process can be aﬀected and executes vulnerable func-
tions. We have chosen to place our sensor at the application layer to circumvent
the problem of encrypted network traﬃc faced by NIDS.
The following observation allows an improvement of the search algorithm
that has to determine the MEL of requests. According to the deﬁnition of the
maximum execution length, all positions in the request’s byte sequence could
potentially serve as a starting point for the longest execution ﬂow. However, if the
MELs of normal requests and exploits diﬀer dramatically, it is not necessary to
search for the real maximum length. It is suﬃcient to choose only some random
sample positions within the byte sequence and calculate the execution length
from these positions. Instructions that have been visited by earlier runs of the
algorithm are obviously ignored. The rationale behind this improvement is the
fact that it is very likely that at least one sample position is somewhere in the
middle of the sledge leading to a tremendously higher MEL than encountered
when checking normal requests.
284
T. Toth and C. Kruegel
5 Implementation
The algorithms to determine a single execution length and to choose reasonable
sample points in the byte sequence of a request have been implemented in C.
Because the recursive procedures are potentially costly, the main focus has been
on an eﬃcient realization. As every request needs to be evaluated, the additional
pressure on the server must be minimized.
An important point is the decoding of byte sequences to determine the cor-
rectness and validity of instructions. As data structure we have chosen a static
trie for storing all supported processor instructions together with the required
operands and their types.
A trie is a hierarchical, tree like data structure that operates like a dictionary.
The elements stored in the trie are the individual characters of ‘words’ (which
are opcodes in our case). Each character (byte) of a word (opcode) is stored in
the trie at a diﬀerent level. The ﬁrst character of a word is stored at the root
node (ﬁrst level) of the trie together with a pointer to a second-level trie node
that stores the continuation of all the words starting with this ﬁrst character.
This mechanism is recursively applied to all trie levels. The number of characters
of a word is equal to the levels needed to store it in a trie. A pointer to a leave
node that might hold additional information marks the end of a word.
We store all supported opcodes of the processor’s instruction set in the trie
to enable rapid decoding of byte sequences. The leaf nodes hold information
about the number of operands for each instruction together with their types
(immediate value, memory location or register). This enables us to calculate the
total length of the instruction at runtime by determining the necessary bytes for
all operands.
It is important to notice that diﬀerent instructions can be of diﬀerent length,
therefore a hash table is not ideally suitable. Currently, only the Pentium in-
struction set [12] has been stored in this trie, but no MMX and SIMD instructions
are supported.
Figure 4 shows a simpliﬁed view of our trie. The opcodes for the instructions
AAA (opcode 0x37), ADC (opcode 0x661140 - add with carry the ax register to
the value of the register indirect address determined by eax and the one byte
operand), ADC (opcode 0x80d1 - add with carry a one byte value to the cl
register) and CMP (opcode 0x80fc - compare the immediate value with the register
ah) have been inserted.
The algorithms used to determine an approximation of the MEL of HTTP
requests have been integrated as a module into an Apache 1.3.23 web server.
During the startup of the server, the trie is ﬁlled and a function to check the re-
quest is registered as a post read request procedure. The Apache conﬁguration
ﬁle has been adapted to make sure that our module is the ﬁrst to be invoked.
Each time a request arrives at the HTTP server, our subroutine calls the URL
decoding routine provided by Apache and then searches for executable instruc-
tions in the resulting byte sequence. It is necessary to decode the request ﬁrst to
make sure that all escaped characters are transformed into their corresponding
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
285
Fig. 4. Storing instruction opcodes in the trie
byte values. The module uses a deﬁnable threshold and stops the test immedi-
ately when a detected execution length exceeds this limit. We do not calculate
the MEL of the request because of performance reasons. Instead we chose to cal-
culate the execution length at equally distributed positions within the request.
6 Evaluation
6.1 Execution Length of HTTP Requests
In order to estimate the maximum execution length of regular HTTP requests, we
calculated the MEL for service requests targeted at our institute’s web server.
Only successful requests that completed without errors have been included in
our test data set and we also manually removed attack requests to avoid that
buﬀer overﬂow exploits distort the data set. An additional ID system has been
deployed to verify that assumption. 117228 server requests which we have been
captured during a period of 7 days have been processed. The resulting MELs
are shown in Figure 5 below.
Only 350 requests had a MEL value of 0 meaning that they did not contain
a valid instruction at all. Most of the packets showed a maximum execution
length of 3 and 4 (33211 and 31791 respectively) with the numbers decreasing
for increasing lengths. The highest maximum instruction length that has been
encountered was 16 which appeared for a total of 14 HTTP queries. As expected
the numbers indicate that the MELs for regular requests are short.
6.2 Exection Length of DNS Requests
We performed a similar experiment as explained above on DNS data. We captured
all the DNS traﬃc (from the inside and from the outside) to our DNS server during
286
T. Toth and C. Kruegel
Fig. 5. Maximum Execution Length of regular HTTP Requests
Fig. 6. Maximum Execution Length of regular DNS Requests
a period of one week. We collected 75464 requests and calculated the MEL on
each of these.
As shown in Figure 6 the maximum execution length distribution has its peak
at 4 with 58557 request. In descending order the MELs of 5 and 3 follow with
6531 and 5500 requests, respectively. The maximum MEL found in our sample
data is 12 which has been present in only 4 requests. Therefore the maximum
of all MELs of the measured DNS requests is even lower then the maximum of
measured HTTP requests.
6.3 Execution Length of Exploits
In order to support our claim that buﬀer overﬂow attacks contain long valid in-
struction chains, a number of available exploits have been analyzed. We have cho-
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
287
sen buﬀer overﬂow exploits against the Internet Information Service (IIS)
(the web server from Microsoft), BIND (a UNIX DNS server) and WU-FTP (a UNIX
FTP server, all from [19]. Although our prototype has been tested with a web
server, attack code against a diﬀerent service daemon has been evaluated to
show the applicability of our approach to other areas as well. The results of this
evaluation are listed in Table 4.
Table 4. Maximum Execution Lengths of Exploits
Exploit
Max. Execution Length (MEL)
IIS 4 hack 307
JIM IIS Server Side Include overflow
wu-ftpd/2.6-id1387
ISC BIND 8.1, BID 1887
591
807
238
216
According to the table above, the maximum execution lengths of requests
that contain buﬀer overﬂow exploits is signiﬁcantly higher than those of normal
queries. This observation supports our assumptions presented in Section 4. For
the actual detection of intrusions, a threshold has to be chosen to separate
malicious from normal traﬃc and to raise an alert when the limit is exceeded.
For our ﬁrst prototype, we simply select a ‘reasonable’ magic number be-
tween the maximum value gathered from the set of normal requests (16) and
the minimum among the evaluated exploits (216). Because an attacker might
attempt to limit the MEL by choosing a shorter sledge, the value should stay
closer to the maximum of the normal requests. We decided to select 30 for the
deployment of the probe. This leaves enough room for regular requests to keep
the false positive rate low and forces an intruders to reduce the executable parts
of his exploit to a length less than this limit to remain undetected. Such a short
sledge nevertheless seriously impacts the attacker’s chances to guess an address
that is ‘close enough’ to the correct one to succeed.
An obvious shortcoming of the proposed approach is that it can’t detect ex-
ploits that utilize methods to avoid executable sledges. Vulnerable services that
include debug routines that output information which might be used to calcu-
late the exact stack address can be exploited by hackers. If the attacker causes
the service to execute the debug output and calculates the exact stack address
(infoleak attack), he can create buﬀer overﬂows that don’t include executable
sledges.
6.4 Performance Results
To evaluate the performance impact of our module on the web server, we used
the WebSTONE [25] benchmark provided by Mindcraft. WebSTONE can simulate
an arbitrary number of clients that request pages of diﬀerent sizes from the web
288
T. Toth and C. Kruegel
server to simulate realistic load. It determines a number of interesting properties
that are listed below.
– Average and maximum connection time of requests
– Average and maximum response time of requests
– Data throughput rate
The connection time is the time interval between the point when the client
opens a TCP connection and the point when the server accepts it. The response
time measures the time between the point when the client has established the
connection and requests data and the point when the ﬁrst result is received. The
data throughput rate is a value for the amount of data that the web server is able
to deliver to all clients.
The connection and response time values are relevant for the time a user
has to wait after sending a request until results are delivered back. These times
also characterize the number of requests a web server is able to handle under a
speciﬁc load. The data throughput rate deﬁnes how fast data can be sent from
the web server to the client. Because clients obviously cannot receive replies
faster than the server is sending them, this number is an indication for how long
a client has to wait until a request completes.
Our experimental setup consists of one machine simulating the clients that
perform HTTP requests (Athlon, 1 Ghz, 256 MB RAM, Linux 2.4) and one host
with the Apache server (Pentium III, 550 MHz, 512 MB RAM, Linux 2.4).
Both machines are connected using a 100 Mb Fast Ethernet. WebSTONE has
been conﬁgured to launch 10 to 100 clients in steps of 10, each running for 2
minutes. We did only a measurement of static pages, so no tests involved dynamic
creation of results.
We measured the connection rate, the average client response time and the
average client throughput for each test run with and without our installed mod-
ule. The results are shown in Figures 7, 8 and 9. The dotted line represent the
statistics gathered when running the unmodiﬁed Apache while the solid line
represent the one with our activated module.
As can be seen above, the connection rate has dropped slightly when our
sensor is activated. The biggest diﬀerence emerged when 50 clients are active
and a value of 494,2 connections per second versus 500,7 connections per second
with the unmodiﬁed Apache has been observed. While this maximum diﬀerence
is 6.5 connections per second (yielding a decrease in the client connection rate
of about 1.4 %), the average value is only 2,4 (about 0.5 %).
There has been no signiﬁcant decrease in the average response time. Both
lines are nearly congruent with regards to the precision of measurements.
The client throughput decreased most with 10 active clients when it dropped
from 75,90 Mbit per second to 73,70 MBit per second. This is an absolute diﬀer-
ence of 2,2 MBit per second. (about 2,9 %). On average, the client throughput
only decreased by 0,8 Mbit per second (about 1,05%).
The trie consumed about 16 MB of memory during the tests. While this
seems to be a large number at ﬁrst glance, one has to take the usual main
memory equipment of web servers into account where a Gigabyte of RAM is not
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
289
Connection Rate Comparison
530
520
510
500
490
480
]
s
/
s
n
o
i
t
c
e
n
n
o
c
[
e
t
a
R
n
o
i
t
c
e
n
n
o
C
470
0
20
40
60
Nr. of clients
80
100
Fig. 7. Client Connection Rate
Response Time Comparison
0.20
]
s