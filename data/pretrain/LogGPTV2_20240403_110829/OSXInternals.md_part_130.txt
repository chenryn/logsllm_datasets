interrupts disabled. The I/O Kit provides IOSimpleLockLockDisableInterrupt as a metafunction
that performs both operations. It also provides the corresponding inverse function,
IOSimpleLockUnlockEnableInterrupt.
 IOLock is a wrapper around Mach mutexes (lck_mtx_t).
 IORecursiveLock is also a wrapper around Mach mutexes, along with a reference counter that
allows one thread to lock it more than once (recursively). Note that if another thread is holding the
recursive mutex, an attempt to lock it would still block.
 IORWLock is a wrapper around Mach read/write locks (lck_rw_t).
Besides these, the I/O Kit supports a more sophisticated construct, the IOWorkLoop, which provides both
implicit and explicit synchronization, among an extensive array of other features. We will discuss the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 147 of 153
IOWorkLoop and the I/O Kit in general in Chapter 10.
9.18.8. Funnels
The xnu kernel provides a synchronization abstraction called funnels to serialize access to the BSD
portion of the kernel. In the simplest terms, an xnu funnel is a giant mutex with the special property that it
gets automatically unlocked when the holding thread sleeps. Funnels were heavily used in the kernel
before Mac OS X 10.4for example, in file systems and system call processing. Mac OS X 10.4 replaced
the use of funnels with finer-grained locking in many but not all instancesthe kernel still provides funnels
for backward compatibility and uses them in some portions that are not performance-critical.
Let us look at the background of funnels and how they are used in Mac OS X.
9.18.8.1. History
Funnels originated in the Digital UNIX operating system as a mechanism to help implement SMP-safe
device drivers. A Digital UNIX funnel allowed device drivers to force execution onto a single processor.
Therefore, a funneled device driver saw a single-processor environment even on an SMP system. There
was no locking of resources or code blocksSMP resource protection was achieved as a side effect of an
entire subsystem always running on a single processor. A device driver could be funneled by setting the
d_funnel member of its device switch table entry data structure to the value DEV_FUNNEL. Using funnels
degraded SMP performance, but then, no locking mechanism is without tradeoffs in preemption latency
and performance. An important caveat in using Digital UNIX funnels was that a funneled driver's
resources had to be self-contained if they were to be protected by the funnel. If the driver shared resources
with the kernel or with another driver, you still had to use another locking mechanism to protect the
integrity of those resources. Moreover, the kernel had only one funnel, which was tied to the primary
processor.
Digital UNIX funnels were a poor man's way of making a driver SMP-safe transitionally, while the
developer worked on making the driver really SMP-safe.
9.18.8.2. Funnels in Mac OS X
We have seen that the xnu kernel is a combination of a few very different components. In particular, Mac
OS X file system and networking support comes largely from the kernel's BSD portion. In the traditional
BSD architecture, the kernel is logically divided into a top half and a bottom half. When a user thread
makes a system call, the top half runs either until it is done or until it is blocked, which can occur when
the kernel is waiting on a resource. The bottom half is invoked to handle hardware interruptsit runs
synchronously with respect to the interrupt source. Since hardware interrupts have higher priority than
threads in the top half, a thread in the top half cannot assume that it will not be preempted by the lower
half. Historically, the top half synchronizes with the bottom half by disabling interrupts. Some newer
BSD-flavored kernels use mutexes to protect data structures that both halves may try to access
concurrently.
Mac OS X's bottom half is not executed in the context of a hardware interrupt, as an interrupt would
simply cause an I/O Kit work-loop thread in the kernel to wake up, which would actually run the bottom
half. This means that disabling interrupts is no longer a viable synchronization approach because the top
and bottom halves in xnu could be running concurrentlyas threads on different processors in a
multiprocessor system. In such situations where access to the BSD portion of xnu must be serialized, Mac
OS Xdepending on the kernel versionuses funnels as a cooperative serialization mechanism.
Phasing Out Funnels
xnu funnels are implemented differently from Digital UNIX funnels. Notably, there can be
multiple funnels and they can run on any processor, not just the primary processor. However,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 148 of 153
a thread holding a funnel on one processor cannot take that funnel on another processor in an
SMP system. Another way of looking at this is that any code that runs under a funnel
becomes implicitly single-threaded.
Nevertheless, the reason for the existence of funnels on Mac OS X is similar to that on
Digital UNIXthat is, to provide a transitional mechanism for making the xnu kernel SMP-
safe. With the evolution of Mac OS X, components of xnu are being rewritten using finer-
grained locking with reasonably bounded latencies, thus phasing out dependencies on
funnels.
An xnu funnel is built on top of a Mach mutex, as shown in Figure 974.
Figure 974. The structure of a Mac OS X funnel
// osfmk/kern/thread.h
struct funnel_lock {
int fnl_type; // funnel type
lck_mtx_t *fnl_mutex; // underlying mutex for the funnel
void *fnl_mtxholder; // thread (last) holding mutex
void *fnl_mtxrelease; // thread (last) releasing mutex
lck_mtx_t *fnl_oldmutex; // mutex before collapsing split funnel
};
typedef struct funnel_lock funnel_t;
Even though a funnel is built on a mutex, there is an important difference in how funnels and mutexes are
used: If a thread holding a mutex is blocked (say, in a memory allocation operation), the mutex will still
be held. However, the scheduler will release a thread's funnel on descheduling and reacquire it when the
thread is rescheduled. Another thread can enter the critical section protected by the funnel in this window.
Therefore, any critical state that was being protected by the funnel is not guaranteed to be preserved while
the thread is blocked. The thread must ensure that such state is protectedperhaps through other locking
mechanisms. Consequently, the programmer must be careful while using potentially blocking operations
in kernel code.
Before Mac OS X 10.4, there were two funnels in xnu: the kernel funnel (kernel_flock) and the network
funnel (network_flock). Mac OS X 10.4 has only the kernel funnel. When Mach initializes the BSD
subsystem at boot time, the first operation performed is allocation of these funnels. The rationale behind
having two funnels was that the networking subsystem and the rest of the BSD kernel (file system,
process management, device management, and so on) are not likely to contend for the same resources.
Hence, one funnel for networking and one for everything else is likely to benefit SMP performance. The
kernel funnel ensures that only one thread runs inside the BSD portion of xnu at a time.
Funnels affect only the BSD portion of the kernel. Other components, such as Mach and the I/O Kit, use
their own locking and synchronization mechanisms.
In Mac OS X 10.4, the file system and the networking subsystem use fine-grained locks, as shown in
these examples.
 The domain structure (struct domain [bsd/sys/domain.h]) now contains a mutex.
 The protocol switch structure (structure protosw [bsd/sys/protosw.h]) provides locking
hooks, namely, pr_lock(), pr_unlock(), and pr_getlock().
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 149 of 153
 The vnode structure (struct vnode [bsd/sys/vnode_internal.h]) contains a mutex.
If a file system is thread- and preemption-safe, this capability (including others, such as whether the file
system is 64-bit-safe) is maintained as part of the configuration information within a mount structure
(struct mount [bsd/sys/mount_internal.h]). When a vnode corresponding to a file on this file
system is created, the v_unsafefs field of the vnode structure inherits this capability as a Boolean value.
Thereafter, the file system layer uses the THREAD_SAFE_FS macro to determine whether a given vnode
belongs to a reentrant file system.
// bsd/vfs/kpi_vfs.c
#define THREAD_SAFE_FS(VP) ((VP)->v_unsafefs ? 0 : 1)
If a file system is not reentrant, the VNOP (vnode operation) and VFS interfaces take the kernel funnel
before calling the file system's operations. Figure 975 shows an overview of the relevant kernel code for a
VNOP call.
Figure 975. Automatic funnel use in a thread-unsafe file system
// bsd/vfs/kpi_vfs.c
errno_t
VNOP_OPEN(vnode_t vp, int mode, vfs_context_t context)
{
int _err;
struct vnop_open_args a;
int thread_safe;
int funnel_state = 0;
...
thread_safe = THREAD_SAFE_FS(vp);
if (!thread_safe) {
// take the funnel
funnel_state = thread_funnel_set(kernel_flock, TRUE);
...
}
// call the file system entry point for open
err = (*vp->v_op[vnop_open_desc.vdesc_offset])(&a);
if (!thread_safe) {
...
// drop the funnel
(void)thread_funnel_set(kernel_flock, funnel_state);
...
}
...
}
To determine whether a given file system is thread- and preemption-safe, the VFS interfaces check the
vfc_threadsafe field of the vfstable structure [bsd/sys/mount_internal.h] within the mount
structure [bsd/sys/mount_internal.h] for that file system.
// bsd/vfs/kpi_vfs.c
int
VFS_START(struct mount *mp, int flags, vfs_context_t context)
{
int thread_safe;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 150 of 153
...
thread_safe = mp->mnt_vtable->vfc_threadsafe;
...
}
A file system can (indirectly) set the vfc_threadsafe field by passing the appropriate flags
(VFS_TBLTHREADSAFE or VFS_TBLFSNODELOCK) to the vfs_fsadd() function [bsd/vfs/kpi_vfs.c],
which adds a new file system to the kernel.
Certain parts of the Mac OS X 10.4 kernel, such as the audit subsystem [bsd/kern/kern_audit.c], the
vnode disk driver [bsd/dev/vn/vn.c], and the console driver [bsd/dev/ppc/cons.c], expressly use
funnels.
A thread can hold only one funnel at a time. If the tHRead_funnel_set() function detects that a thread is
trying to hold multiple funnels concurrently, it will panic the system. The pre-10.4 funnel implementation
provides a function for merging two funnels (tHRead_funnel_merge()), which can merge two funnels
into a single funnel. There is no function to get the two original funnels back from a merged funnel.
In contrast to a merged funnel, the multiple-funnel scheme that is normally used may be called a split-
funnel scheme. It is possible to disable this scheme (in pre-10.4 kernels) and have both funnel locks point
to the same funnel by using the dfnl=1 boot-time argument.
Before Mac OS X 10.4, a network file system was a likely candidate for needing to hold both the kernel
and network funnels concurrently. xnu's NFS implementation made heavy use of thread_funnel_switch
() to switch between the two funnels. This function was called with two funnels, an old one and a new
one, as arguments, where the old funnel must be held by the calling thread.
boolean_t thread_funnel_switch(int oldfnl, int newfnl);
...
thread_funnel_switch(KERNEL_FUNNEL, NETWORK_FUNNEL);
Funnels can also be acquired as part of BSD system call entry. As we saw in Chapter 6, a BSD system call
table entry in xnu has a member indicating the funnel type to acquire when entering the kernel.
// bsd/sys/sysent.h
struct sysent {
...
int8_t sy_funnel; // funnel type
...
} sysent[];
The sysent array is initialized in bsd/kern/init_sysent.c. Since Mac OS X 10.4 has only the kernel
funnel, a system call that takes this funnel on entry will have the sy_funnel field of its sysent entry set
to KERNEL_FUNNEL.
// bsd/kern/init_sysent.c
__private_extern__ struct sysent sysent[] = {
...
{ ..., KERNEL_FUNNEL, (sy_call_t *)exit, ... },
{ ..., KERNEL_FUNNEL, (sy_call_t *)fork, ...},
...
{ ..., KERNEL_FUNNEL, (sy_call_t *)ptrace, ...},
...
};
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 151 of 153
Only certain BSD system calls (most of them in pre-10.4 systems, fewer in 10.4) take funnels by default.
In both Mac OS X 10.4 and earlier versions, Mach system calls, or system calls related to the I/O Kit, do
not take a funnel as they enter the kernel. That said, an I/O Kit driver can take a funnel if it really must.
For example, if a driver is bent on invoking certain file system operations using BSD functions within the
kernel, it must take the kernel funnel on pre-10.4 systems. I/O Kit work-loop threads do make upcalls into
the BSD kernelfor example, to deliver network packets or to complete disk I/O requests. Such a thread in
a pre-10.4 kernel will acquire the appropriate funnel before calling the BSD functions. In many cases, the
underlying driver family handles funnel-related details. For example, in the case of a USB networking
driver, the IONetworkingFamily hides the details of using funnels.
It was said earlier that a thread's funnel is automatically released if the thread sleeps in the kernel. A
funnel state is maintained for each thread in the funnel_state field of the thread structure. When the
scheduler switches to a new thread, it checks the funnel state of the old thread. If it is TH_FN_OWNED (i.e.,
the thread owns the funnel pointed to by the funnel_lock member of the tHRead structure), the thread's
funnel state is set to TH_FN_REFUNNEL, which marks the funnel to be reacquired on dispatch. After this, the
thread's funnel is released. Conversely, if the new thread's funnel_state field is TH_FN_REFUNNEL, the
funnel pointed to by the funnel_lock field will be acquired, and funnel_state will be set to
TH_FN_OWNED.
9.18.9. SPLs
In traditional BSD kernels, a critical section makes a set-priority-level (SPL) call to block interrupt
routines at (and below) a given priority level, for example:
// raise priority level to block network protocol processing
// return the current value
s = splnet();
// do network-related operations
...
// reset priority level to the previous (saved) value
splx(s);
The usual repertoire of SPL functions alone would not be sufficient for synchronization on Mac OS X for
reasons discussed earlier. Although xnu implements these functions, they are all null implementations on
Mac OS X 10.4. On earlier versions, they are still null operations, but they also ensure that the calling
thread is running under a funnel (causing a panic otherwise).
// bsd/kern/spl.c (Mac OS X 10.3)
...
unsigned
splnet(void)
{
if (thread_funnel_get() == THR_FUNNEL_NULL)
panic("%s not under funnel", "splnet()");
return(0);
}
...
// bsd/kern/spl.c (Mac OS X 10.4)
...
unsigned
splnet(void)
{
return(0);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 152 of 153
}
...
9.18.10. Advisory-Mode File Locking
Mac OS X provides several interfaces for advisory-mode locking of files, both in their entirety and as byte
ranges. Figure 976 shows an overview of file locking through the lockf() library function, the flock()
system call, and the fcntl() system call.
Figure 976. Interfaces for advisory-mode file locking
[View full size image]
// to lock, specify operation as either LOCK_SH (shared) or LOCK_EX (exclusive)
// additionally, bitwise OR operation with LOCK_NB to not block when locking
// to unlock, specify operation as LOCK_UN
int flock(int fd, int operation);
// cmd is one of F_GETLK, F_SETLK, or F_SETLKW
// arg is a pointer to a flock structure
int fcntl(int fd, int cmd, int arg);
// function is one of F_ULOCK, F_TEST, F_TLOCK, or F_TEST
// size specifies the number of bytes to lock, starting from the current offset
int lockf(int fd, int function, off_t size);
The term advisory in advisory-mode locking means that all processes accessing a shared file must
cooperate and use the advisory locking mechanism before reading from or writing to the file. If a process
accesses such a file without using advisory locking, inconsistencies may result.
As shown in Figure 976, all three interfaces lead to the same locking mechanism in the kernel. The kernel
provides a file-system-independent locking implementation in the VFS layer. This is referred to as the
local lock implementation. Alternatively, a file system can implement its own advisory locking. Given a
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 153 of 153
vnode, VNOP_ADVLOCK() decides whether to use local locking or to call the file system's advisory locking
operation based on the VLOCKLOCAL flag on the vnode. This flag, in turn, depends on the
MNTK_LOCK_LOCAL flag of the file system. If a file system wants the VFS layer to handle advisory locking,
it can call the vfs_setlocklocal() function [bsd/vfs/vfs_subr.c] in its mount operation to set the
MNTK_LOCK_LOCAL flag.
The local lock implementation uses the lockf structure [bsd/sys/lockf.h] to represent a byte-range
advisory lock. The vnode structure contains a list of advisory locks for the file. The list is sorted on the
starting offset of the lock.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 10. Extending the Kernel Page 1 of 79
Chapter 10. Extending the Kernel
The line between RISC and CISC microprocessors has been growing fuzzier over the years, particularly as
the focus of microprocessor companies has shifted to microarchitecture. It is common to see companies
attempting to optimize superscalar, out-of-order execution. In other words, modern RISC processors have
become more CISC-like and vice versa. An equally interesting evolutionary circle can be observed in kernel
design: "technically monolithic" kernels have evolved to contain enough modularity and flexibility to offer
many of the benefits provided by microkernels.
10.1. A Driver down the Memory Lane
In commercial operating systems, the majority of third-party kernel programming pertains to device drivers.
A driver can be informally defined as a flow of controlsay, a threadthat manages one or more devices. Given
the variety of operating systems and device driver models in existence, the control flow could be in the
kernel or in user space, and the device could be a physical device or a software (pseudo) device. From an
implementation standpoint, a device driver in a typical modern Unix system is a software component that
groups functions corresponding to one or more related devices. It is common for device drivers to be
dynamically loadable modules that can be unloaded when not used, in order to lower resource consumption.
It is also usually possible to compile a device driver into the kernel, if necessary.
10.1.1. Driver Programming Considered Difficult
Historically, it has been considered rather difficult to write device drivers for an operating system. One
reason was that many operating systems did not have well-defined driver architectures. This has improved,
as most modern systems have driver architectures and environments that emphasize modularity and, to