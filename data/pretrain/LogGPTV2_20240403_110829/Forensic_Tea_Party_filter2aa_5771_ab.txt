        {
          TeaParty.TeaParty.UnhookWindowsHookEx(TeaParty.TeaParty.hookId);
          int num2 = (int) MessageBox.Show("You Got the FLAG!");
          TeaParty.TeaParty.GetFlag(TeaParty.TeaParty.buffers.Last().ToLower());
          Application.Exit();
        }
        TeaParty.TeaParty.buffers.RemoveAt(TeaParty.TeaParty.buffers.Count - 1);
        TeaParty.TeaParty.buffers.Insert(0, "");
      }
      return TeaParty.TeaParty.CallNextHookEx(TeaParty.TeaParty.hookId, nCode, wParam, lParam);
    }
    private static IntPtr SetHook(TeaParty.TeaParty.HookProc hookProc)
    {
      IntPtr moduleHandle = TeaParty.TeaParty.GetModuleHandle(Process.GetCurrentProcess().MainModule.ModuleName);
      return TeaParty.TeaParty.SetWindowsHookEx(13, hookProc, moduleHandle, 0U);
    }
    public TeaParty() => this.InitializeComponent();
    public static bool ResourceExists(string resourceName) => ((IEnumerable) Assembly.GetCallingAssembly().GetManifestResourceNames()).Contains(resourceName);
    public static byte[] ReadResource(string resourceName)
    {
      byte[] buffer = (byte[]) null;
      try
      {
        using (Stream manifestResourceStream = Assembly.GetCallingAssembly().GetManifestResourceStream(resourceName))
        {
          buffer = new byte[(int) manifestResourceStream.Length];
          manifestResourceStream.Read(buffer, 0, (int) manifestResourceStream.Length);
        }
      }
      catch (NullReferenceException ex)
      {
        throw ex;
      }
      return buffer;
    }
    private static byte[] GetResource(string resourceName)
    {
      resourceName = Assembly.GetCallingAssembly().GetName().Name + "." + resourceName;
      return TeaParty.TeaParty.ResourceExists(resourceName) ? TeaParty.TeaParty.ReadResource(resourceName) : (byte[]) null;
    }
    private static byte[] decodeResource(byte[] data)
    {
      byte[] numArray = new byte[data.Length];
      for (int index = 0; index  TeaParty.TeaParty.UnhookWindowsHookEx(TeaParty.TeaParty.hookId);
    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (TeaParty.TeaParty));
      this.pictureBox1 = new PictureBox();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      this.SuspendLayout();
      this.pictureBox1.Image = (Image) componentResourceManager.GetObject("pictureBox1.Image");
      this.pictureBox1.Location = new Point(111, 54);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(253, 199);
      this.pictureBox1.TabIndex = 0;
      this.pictureBox1.TabStop = false;
      this.AutoScaleDimensions = new SizeF(12f, 25f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(529, 320);
      this.Controls.Add((Control) this.pictureBox1);
      this.Margin = new Padding(6);
      this.Name = nameof (TeaParty);
      this.Text = "DownTheRabbitHole";
      this.FormClosing += new FormClosingEventHandler(this.Form1_Close);
      this.Load += new EventHandler(this.Form1_Load);
      ((ISupportInitialize) this.pictureBox1).EndInit();
      this.ResumeLayout(false);
    }
    private delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    private struct QUERY_SERVICE_CONFIG
    {
      public uint dwServiceType;
      public uint dwStartType;
      public uint dwErrorControl;
      public string lpBinaryPathName;
      public string lpLoadOrderGroup;
      public uint dwTagId;
      public string lpDependencies;
      public string lpServiceStartName;
      public string lpDisplayName;
    }
  }
}
  ```
The initialization method does two things:
```csharp
private void Form1_Load(object sender, EventArgs e)
{
    TeaParty.TeaParty.InstallDriver(nameof (TeaParty), "C:\\Program Files\\AliceInWonderlandTeaParty\\TeaParty.sys");
    if (TeaParty.TeaParty.CheckDebugging())
    Environment.FailFast("Suspecting Anti-Analysis Environment");
    TeaParty.TeaParty.hookId = TeaParty.TeaParty.SetHook(TeaParty.TeaParty.hookProc);
    for (int index = 0; index = 0 && wParam == (IntPtr) 256)
    {
        int num1 = Marshal.ReadInt32(lParam);
        for (int index = 0; index ()) == TeaParty.TeaParty.GetHash1() || TeaParty.TeaParty.CalculateMd5HexDigest(TeaParty.TeaParty.buffers.Last()) == TeaParty.TeaParty.GetHash2())
        {
            TeaParty.TeaParty.UnhookWindowsHookEx(TeaParty.TeaParty.hookId);
            int num2 = (int) MessageBox.Show("You Got the FLAG!");
            TeaParty.TeaParty.GetFlag(TeaParty.TeaParty.buffers.Last().ToLower());
            Application.Exit();
        }
        TeaParty.TeaParty.buffers.RemoveAt(TeaParty.TeaParty.buffers.Count - 1);
        TeaParty.TeaParty.buffers.Insert(0, "");
    }
    return TeaParty.TeaParty.CallNextHookEx(TeaParty.TeaParty.hookId, nCode, wParam, lParam);
}
```
If this is a `WM_KEYDOWN` (`256`) event, the program appends the key code to all 17 entries of `buffers`. In other words, `buffers.Last()` contains at every point the last `17` characters typed on the keyboard (assuming that at least 17 characters were already typed). At this point, the program takes the last 17 characters typed, calculates an MD5 hash on them and compares the result to the hash received from `GetHash1()` and `GetHash2()`. If one of them matches - we get the flag!
```csharp
private static string GetHash1()
    {
      IntPtr fileA = TeaParty.TeaParty.CreateFileA("\\\\.\\TeaParty", 1073741824U, 2U, IntPtr.Zero, 3U, 0U, IntPtr.Zero);
      IntPtr num = Marshal.AllocHGlobal(32);
      int lpBytesReturned = 0;
      TeaParty.TeaParty.DeviceIoControl(fileA, 2236424U, IntPtr.Zero, 0U, num, 32U, out lpBytesReturned, IntPtr.Zero);
      byte[] numArray = new byte[32];
      Marshal.Copy(num, numArray, 0, 32);
      Marshal.FreeHGlobal(num);
      TeaParty.TeaParty.CloseHandle(fileA);
      return Encoding.ASCII.GetString(numArray);
    }
    private static bool CheckDebugging() => Environment.ProcessorCount < 2 || (TeaParty.TeaParty.IsDebuggerPresent() || Debugger.IsAttached);
    private static string GetHash2()
    {
      if (TeaParty.TeaParty.CheckDebugging())
        Environment.FailFast("Suspecting Anti-Analysis Environment");
      IntPtr fileA = TeaParty.TeaParty.CreateFileA("\\\\.\\TeaParty", 1073741824U, 2U, IntPtr.Zero, 3U, 0U, IntPtr.Zero);
      IntPtr num = Marshal.AllocHGlobal(32);
      int lpBytesReturned = 0;
      TeaParty.TeaParty.DeviceIoControl(fileA, 2236428U, IntPtr.Zero, 0U, num, 32U, out lpBytesReturned, IntPtr.Zero);
      byte[] numArray = new byte[32];
      Marshal.Copy(num, numArray, 0, 32);
      Marshal.FreeHGlobal(num);
      TeaParty.TeaParty.CloseHandle(fileA);
      return Encoding.ASCII.GetString(numArray);