# 学习一年的SSRF总结
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## SSRF-Labs配置
有些初学者喜欢用这个靶场，讲下怎么搭建
我用的是Ubuntu18；docker和docker-compose配置可以参考[vulhub官网](https://vulhub.org/#/docs/)的配置；下面是谷歌搜的
    $ curl -sSL https://get.docker.com/ | sh #脚本安装docker
    $ apt install docker-compose #安装docker compose
Basic关和其他关类似，都有Dockerfile文件，按下图指令参考就好了
    $ cd ~/ssrf-lab/basics #进入basics文件夹
    $ docker build -t ssrf-lab/basic . #构建镜像
    $ docker run -d -p 8999:80 ssrf-lab/basic #创建容器
    $ docker ps #查看ssrf-lab/basic容器编号
    $ docker stop [容器编号] #关闭容器
查看源码，进入容器的命令如下
    $ sudo docker ps  
    $ sudo docker exec -it 编号 /bin/bash
在Advances系列、Ctf系列中没有dockerfile文件，但有docker-compose.yml文件，这时候我们就要在构建镜像的时候就换docker-compose来创建镜像并开启容器了。例如
    $ cd ~/ssrf-lab/advanced1 # 进入advanced1目录下
    $ docker-compose up -d #开启容器
    $ docker-compose down #关闭容器
平常也得按时清理：
    docker rm $(docker ps -a -q)
    docker rmi $(docker images -q)
    #第一个是删除所有容器 第二个是删除所有镜像
## 基础
###  相关函数和类
**File_Get_Contents**
    // ssrf.php
上述测试代码中，file_get_contents()
函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似`ssrf.php?url=../../../../../etc/passwd`的paylaod即可读取服务器本地的任意文件。
readfile()函数与file_get_contents()函数相似。
**Fsockopen()**
`fsockopen($hostname,$port,$errno,$errstr,$timeout)`用于打开一个网络连接或者一个Unix
套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。
fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。
PS:上过C的网络编程应该很清楚
    // ssrf.php
    \n";
    } else {
        $out = "GET / HTTP/1.1\r\n";
        $out .= "Host: $host\r\n";
        $out .= "Connection: Close\r\n\r\n";
        fwrite($fp, $out);
        while (!feof($fp)) {
            echo fgets($fp, 128);
        }
        fclose($fp);
    }
    ?>
构造`ssrf.php?url=www.baidu.com`即可成功触发ssrf并返回百度主页：
**Curl_exec()**
curl_init(url)函数初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close()
函数使用。
    // ssrf.php
构造`ssrf.php?url=www.baidu.com`即可成功触发ssrf并返回百度主页：