Hi,  
Symfony source code is well commented but we can see a lot of different use of
phpDoc. BTW, i think that would be a good idea to define how to write the
phpDoc. (We can discuss here and update the symfony-docs)
I think for exemple, this coding standard is the best actually:
https://github.com/opensky/Symfony2-coding-standard
**I would like to have yours opinions before make a PR and fix all phpDoc.**
I see some cases, i'll list them and can you say me if you're OK on each of
them.
# A) Usage of inheritDoc
     No
    * {@inheritDoc} ---> No
    * {@inheritdoc}
    * 
    * (see http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.inlineinheritdoc.pkg.html)
    */
    public function myInheritedMethod() 
    {
    }
Adding too the `inheritDoc` on method where we use `see`
    <?php
    /**
    * {@inheritdoc}
    *
    * see \MyBundle\myInheritedMethod
    */
    public function myInheritedMethod() 
    {
    }
# B) Aligment
    <?php
    /**
    * ..... description ...
    *
    * align type of params, var names, and the comment
    * ONLY ONE space between params, var names and comments
    * 
    * @param MyObject $a comment of A
    * @param string   $b comment of b
    */
    public function myMethod(MyObject $a, $b) 
    {
    }
# C ) Return tag
    <?php
    /**
    * ..... description ...
    *
    *  skip a line between params and @return tag
    * 
    * @param MyObject $a comment of A
    * @param string   $b comment of b
    *
    * @return boolean
    */
    public function myMethod(MyObject $a, $b) 
    {
        return true;
    }
# D ) Type
    <?php
    /**
    * ..... description ...
    *
    *  lowercase for type which are not object !
    * 
    * @param string $b comment of b
    * @param String $b comment of b <--- NO
    *
    * @return boolean
    * @return Boolean <---- No
    */
    public function myMethod(MyObject $a, $b) 
    {
        return true;
    }
May have you other cases ?
I can make a PR to rectify these cases on each file of symfony, but i would
like to be sure you're OK before doing that :)