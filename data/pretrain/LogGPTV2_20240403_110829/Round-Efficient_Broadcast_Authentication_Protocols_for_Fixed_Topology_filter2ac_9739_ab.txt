We consider several evaluation metrics. The ﬁrst metric
is communication congestion cost. Let c(v) be the total
amount of communications (transmission or reception) in
the entire protocol performed by some node v. Then the
congestion of the protocol is maxv∈V c(v), i.e., the greatest
amount of communications performed by any single node.
We also consider the total communication cost incurred by
the protocol over all nodes in the network. Since we only
wish to consider protocol overhead, we disregard the size
of the message payload (i.e., the number of bits in each
Mi). Communication overhead is measured assuming all
hash values, single-block ciphertexts, message authentication
codes and pseudorandom function ranges are of identical
length (e.g., 128 bits). Since these are the only values
exchanged in the protocols, we measure communication
overhead in terms of the number of cryptographic values
exchanged; this maps linearly to the actual number of bits
(e.g., exchanging 4 hash values involves an exchange of
4 · 128 = 512 bits).
The second metric is the round complexity of the pro-
tocol. In each round, every node is allowed to exchange
information (both ways) from only one other node. The
round complexity of the protocol is deﬁned as the total
number of such rounds of interaction needed to authenticate
a single broadcast message, starting from when the sender
s initiates the protocol in the ﬁrst round up until the latest
round by which time all receiver nodes have authenticated
the message. Since we are concerned only with correct
authentication and not denial of service, we measure only
honest round complexity. That is, for the purposes of this
metric, we do not consider malicious actions speciﬁcally
aimed at increasing the number of rounds (such as refusing
to respond, or connecting to an incorrect communication
partner, etc). Conceptually, it can be easier to think of all
259
nodes performing the protocol in lock-step, with all nodes
switching connection partners simultaneously at each round:
for clarity, this is how we will describe our protocols. In
practice, no synchronization is necessary for these protocols:
nodes can attempt to establish connections as soon as they
are able to do so in the protocol; if their partner is not ready
(e.g., it is busy with an existing connection, or waiting on a
dependency), then this connection attempt can fail or block
until the partner node is ready to connect.
Round complexity is related to actual protocol latency
when the amount of data exchanged per round remains rela-
tively small, such that the cost of transferring the data does
not strongly dominate over the cost of establishing the link.
To take this into account, we also consider the maximum
per-round data transfer, as measured by the amount of data
exchanged in the largest single-round message exchange
in the protocol. To remain practically viable, a round-
complexity optimization should not increase this quantity
by a large factor.
Even though some of the motivation of our topology cases
are drawn from wireless applications, we do not explicitly
consider the effect of wireless medium access contention
on the latency of the protocols. There are two reasons
for this. Firstly, we focus primarily on round complexity,
which is an intrinsic property of a broadcast authentication
protocol which always holds regardless of the characteristics
of the application on which it is deployed. Medium access
contention and wireless interference, on the other hand, are
extrinsic properties that vary depending on the speciﬁc phys-
ical deployment characteristics of the application and do not
hold as generally. Secondly, in terms of speciﬁc effects, we
note that under the linear topology, if we model interference
as occurring within a radius r of each pair of communi-
cating nodes, this only increases the round complexity and
communication congestion by at most an additive factor
of O(r) under our optimizations (see Section V-A2). This
reinforces the observation that medium interference does
not fundamentally change the general results derived in this
paper.
IV. BACKGROUND
We consider two classes of algorithms for broadcast
authentication for arbitrary topologies: the hash tree based
schemes and the hash chain based schemes. We ﬁrst provide
a general description of these algorithms, and then show
optimizations and bounds for the various topology classes
that we consider in the subsequent sections.
A. Hash Tree Broadcast Authentication
To authenticate a message M to all nodes, the sender
could send a different MACKi(M ) to each receiver di. This
has poor communication congestion due to the large number
of MACs involved. Instead, we can compute a hash tree over
these authenticator values: since only the sender knows all
Figure 1.
highlighted (u1, v4).
Hash Tree of PRF values. Authentication path of v3 is
keys needed to compute the leaves of this hash tree, the
adversary cannot derive the root value. Note that the idea of
using a hash tree to batch many MACs for a single message is
completely different from the common idea of using a hash
tree to batch many messages together to save authentication
costs (e.g., Wong and Lam’s scheme [23]).
In prior work, we described the hash tree based broadcast
authentication protocol for tree topologies [2]. The sender
constructs a binary hash tree T over a set of n leaf values
which contain the authentication codes for the message M .
The leaf values are {PRFKi (M )|i = 1, . . . , n} where PRF
denotes a keyed pseudorandom function accepting arbitrary
length inputs (e.g.,Jutla’s construction [25]). The hash tree
T is constructed over this set of leaf values by repeatedly
generating parent vertices to unify adjacent subtrees of the
same height. For two subtrees with root vertices c1, c2,
respectively, a parent vertex p is generated using the rule
p = H(c1(cid:4)c2) where H is a collision-resistant hash func-
tion. This process is repeated until all the vertices are in
a single tree. Figure 1 shows such a hash tree; each arrow
indicates a hash dependency of a parent vertex on its (two)
children.
Given the root vertex r of a hash tree, we can verify the
inclusion of a given leaf value u by recomputing all hash tree
vertices on the path from u to r, or the authentication path
of u. The authentication path of vertex v3 is highlighted
in Figure 1. Each receiver di knows the position of its
respective PRFKi(M ) in the hash tree, and thus knows the
structure of the authentication path from PRFKi(M ) to r.
Security follows from the observation that the root vertex
r and the authentication path together can act as an authen-
ticator for M to di. This is because an adversary cannot
derive an acceptable root vertex value r(cid:2)
for an unknown
leaf vertex value u: a good candidate for r(cid:2)
must work for
many possible values of u; ﬁnding such a value implies the
ability to generate hash collisions for H (a formal proof of
this security property is available [26]).
In the original protocol for tree topologies, the authen-
tication paths are reconstructed in two-passes. The leaves
of the network perform a convergecast towards the sender
allowing internal network nodes to compute internal vertices
in the hash tree; subsequently, the sender initiates a wave of
messages spreading out towards the leaves resulting in the
260
Algorithm 1 Hash Tree Broadcast Authentication
Sender s:
construct hash tree T over leaf values PRFKi(M )
r := root vertex of T .
disseminate (M, r) to all receivers
Each receiver di:
check that M is fresh (e.g., inspect seq. num), otherwise
abort.
release PRFKi(M ) to the network.
collaborate to reconstruct valid authentication path Pi
check Pi. If valid, accept M .
Figure 2. Hash chain
dissemination of all authentication paths. In Sections V-A
and VI-B, we show that we can speed this process up con-
siderably for the speciﬁc topology classes that we consider
in this paper.
B. Hash Chain Broadcast Authentication
Hash chains are used for broadcast authentication in such
protocols as the Guy Fawkes schemes (an example of which
is the Chained Stream Authentication algorithm or CSA) [7]
and in TESLA [9]. The basic structure of these algorithms
are similar and can be sketched as follows.
On initialization, the sender generates a hash chain of
some predetermined length k by randomly selecting a secret
seed value hk and then iterating a pre-image resistant hash
function H to generate a chain of k values such that hi−1 =
H(hi) for i = k − 1, k − 2, . . . , 0. Figure 2 shows a hash
chain. Receivers are loaded with the ﬁnal hash chain value
h0 during initialization.
To authenticate the ith message mi, the sender broad-
casts (mi, MAChi(mi)). Once all receivers have received
MAChi(mi), the sender broadcasts hi. Receivers can check
that H(hi) = hi−1 and also that the MAC is correct given
mi and hi. If so, they accept the message.
The security of the scheme follows from the synchroniza-
tion requirement that hi is released only after all receivers
have stopped accepting candidates for MAChi(mi). The
protocol thus temporally separates MAC generation from
MAC veriﬁcation; at some point in the protocol, it is ensured
that hi becomes useless for MAC generation, and thus hi
can be safely released to facilitate MAC veriﬁcation. The
different variants of hash chain based schemes use different
techniques to ensure this temporal separation; TESLA uses
loose time synchronization which implies additional as-
sumptions and protocol overheads, while CSA/Guy Fawkes
uses explicit acknowledgments which are expensive in terms
261
of communication overhead. In Section V-B we describe
several optimizations to speed up and to reduce the commu-
nication overhead of explicit acknowledgments.
C. Hash Tree vs Hash Chain: Trade-offs
The hash-chain schemes typically have lower congestion
and memory overhead than hash-tree schemes since only
one MAC value needs to be stored as opposed to a whole
authentication path. On the other hand the hash tree scheme
has the advantage of being able to easily recover from
missed reception since the PRF values of the hash tree
scheme can be selectively revealed by the sender without
compromising the security of the protocol; in hash-chain
schemes,
if any receiver did not receive or respond to
all protocol messages, the protocol must be restarted from
scratch. A related advantage of hash-tree schemes is the
ability to perform authenticated multicast to any subset of
the receivers; hash-chain schemes cannot exclude a subset
of receivers since when the hash chain key is released, it
can potentially be used to forge messages to receivers in the
excluded subset.
V. LINEAR TOPOLOGY
We now examine optimizations of the hash tree and hash
chain protocols for the linear network topology. G is a
single path starting at s and ending at dn, in the sequence
(s, d1, d2, . . . , dn). In this topology, since the nth receiver is
n hops away from the sender, any protocol for disseminating
M must take at least n rounds.
There are numerous applications of broadcast authentica-
tion in a linear topology. For example, wireless networks
deployed in a linear environment naturally assume a linear
topology. Examples of such networks include sensor and
wireless networks deployed along corridors, roadways, tun-
nels and pipelines. In such environments, all applications
for broadcast authentication beneﬁt from our optimizations.
Speciﬁc examples of such applications include network-key
updates in Zigbee, notiﬁcations to allow joining/leaving of
devices, and network-wide data query messages.
General sensor networks are often logically arranged in
a tree with the base station at the root [6], [27]. Paths
naturally occur in tree topologies as the subgraph of all the
nodes between the root and any leaf. Hence our algorithms
are useful for securing broadcast communications to all
nodes along any root-leaf path. A speciﬁc example of such
communications include node join/leave notiﬁcations. In the
event of a new node joining a tree topology as a leaf, all its
ancestors up to the root may need to be authentically notiﬁed
of the change in membership of their respective subtrees; the
notiﬁcation would take the form of a broadcast along a linear
topology from the base station to all affected ancestors. A
similar argument applies for nodes leaving the topology and
reorganizations of the tree due to sporadic mobility.
More generally,
the linear topology also occurs as a
routing path between any two endpoints. Broadcast authen-
tication on the routing path can then be used for functions
related to route maintenance and data transport. For example,
endpoints may wish to inform forwarders that they are still
actively using this routing path, or to request a certain trafﬁc
rate on the route. Endpoints may also send out authenticated
packet loss statistics to help forwarders determine if they
are responsible for packet dropping bottlenecks. In scenarios
where a group key is shared between all nodes on the path
(e.g., for the purposes of preventing injection of packets
from nodes outside of the forwarding path), authenticated
broadcast may be used to maintain consistency in sequence
numbers or, in high trafﬁc situations, to update the path key
periodically to prevent key overuse.
A. Hash Tree Based Schemes
In the basic hash tree based scheme [2], the protocol
proceeds in three passes. The ﬁrst pass consists of a broad-
cast message front expanding outwards from the sender;
this disseminates the message M and the hash tree root r
to all nodes. The second pass is a convergecast message
front starting at the leaves of the network topology and
converging towards the sender; this allows internal nodes in
the topology to compute internal hash tree vertices. The third
front is another outgoing message front from the sender and
facilitates the dissemination of the computed internal hash
tree vertices to the rest of the network for the reconstruction
of each node’s respective authentication paths.
A naive implementation of the basic protocol on a linear
topology will result in a round complexity of 3n − 2 as
the ﬁrst pass takes n hops to traverse the network while
the remaining two passes are from the nth receiver back
to the ﬁrst and vice-versa. The maximum amount of data
transferred in a round is (cid:2)log n(cid:3) hash values (the length of
congestion of the basic protocol is (cid:2)log n(cid:3) + 2 hash values
an authentication path in a hash tree). The communication
(+1 due to minor asymmetries in the tree, and +1 for the
root r).
ity to 2n − 1 with no change in communication overheads
We show an optimization that reduces the round complex-
and only a small constant increase in maximum per-round
data transfer, and a further optimization that can achieve
optimal n round complexity by doubling both the congestion
overhead and the maximum per-round data transfer.
1) Optimization for 2n − 1 round complexity: The ﬁrst
optimization is based on the following observation: as soon
as (M, r) is received by a node i, the value of PRFKi (M )
can immediately be released to the (untrusted) network to
facilitate the derivation of authentication paths for other
nodes. In other words, each node can individually start to
reconstruct the hash tree as soon as it has received the
payload message M and does not have to wait for other
nodes to also receive M . This allows us to “piggy-back” the
262
dissemination of (M, r) onto the two passes that reconstruct
the hash tree, thus reducing round complexity to 2n − 1.
The optimization is as follows. For a linear topology of