在探针中限制进程:   
```  
[root@db-172-16-3-39 lib]# stap -e 'probe process("/usr/sbin/rpc.idmapd").library("/usr/local/lib/libevent-1.4.so.2.2.0").function("*") { printf ("%s, %s, %s\n", pp(), execname(), $$vars); } probe timer.s(1) {exit();}'  
process("/usr/local/lib/libevent-1.4.so.2.2.0").function("evsignal_process@/opt/soft_bak/libevent-1.4.14b-stable/signal.c:314"), rpc.idmapd, base=0x2b27590e74f0 sig=? ev=? next_ev=? ncalls=? i=?  
process("/usr/local/lib/libevent-1.4.so.2.2.0").function("timeout_process@/opt/soft_bak/libevent-1.4.14b-stable/event.c:927"), rpc.idmapd, base=?  
process("/usr/local/lib/libevent-1.4.so.2.2.0").function("gettime@/opt/soft_bak/libevent-1.4.14b-stable/event.c:140"), rpc.idmapd, base=0x2b27590e74f0 tp=0x2b27590e7b08  
process("/usr/local/lib/libevent-1.4.so.2.2.0").function("timeout_correct@/opt/soft_bak/libevent-1.4.14b-stable/event.c:892"), rpc.idmapd, tv=? base=?  
process("/usr/local/lib/libevent-1.4.so.2.2.0").function("min_heap_top@/opt/soft_bak/libevent-1.4.14b-stable/min_heap.h:63"), rpc.idmapd, s=?  
process("/usr/local/lib/libevent-1.4.so.2.2.0").function("timeout_next@/opt/soft_bak/libevent-1.4.14b-stable/event.c:856"), rpc.idmapd, tv_p=? base=?  
process("/usr/local/lib/libevent-1.4.so.2.2.0").function("gettime@/opt/soft_bak/libevent-1.4.14b-stable/event.c:140"), rpc.idmapd, base=0x2b27590e74f0 tp=0x2b27590e7ae8  
process("/usr/local/lib/libevent-1.4.so.2.2.0").function("epoll_dispatch@/opt/soft_bak/libevent-1.4.14b-stable/epoll.c:183"), rpc.idmapd, base=0x2b27590e74f0 arg=0x2b27590e6170 tv=0x0 epollop=? events=? evep=? i=? res=? timeout=?  
```  
程序链表探针 :   
```  
The first syntax in the following will probe the functions in the program linkage table of a particular process.   
The second syntax will also add the program linkage tables of libraries required by that process.   
.plt("...") can be specified to match particular plt entries.  
probe process("...").plt { ... }  
probe process("...").plt process("...").library("...").plt { ... }  
```  
举例 :   
```  
[root@db-172-16-3-39 lib]# stap -e 'probe process("/usr/sbin/rpc.idmapd").library("/usr/local/lib/libevent-1.4.so.2.2.0").plt { printf ("%s, %s\n", pp(), execname()); } probe timer.s(1) {exit();}'  
process("/usr/local/lib/libevent-1.4.so.2.2.0").statement(0x5080)?, rpc.idmapd  
process("/usr/local/lib/libevent-1.4.so.2.2.0").statement(0x50a0)?, rpc.idmapd  
process("/usr/local/lib/libevent-1.4.so.2.2.0").statement(0x5350)?, rpc.idmapd  
process("/usr/local/lib/libevent-1.4.so.2.2.0").statement(0x5160)?, rpc.idmapd  
[root@db-172-16-3-39 lib]# objdump -d /usr/local/lib/libevent-1.4.so.2.2.0|grep -E "5080|50a0|5350|5160"  
0000000000005080 :  
    5080:       ff 25 c2 41 21 00       jmpq   *2179522(%rip)        # 219248   
00000000000050a0 :  
    50a0:       ff 25 b2 41 21 00       jmpq   *2179506(%rip)        # 219258   
0000000000005160 :  
    5160:       ff 25 52 41 21 00       jmpq   *2179410(%rip)        # 2192b8   
0000000000005350 :  
    5350:       ff 25 5a 40 21 00       jmpq   *2179162(%rip)        # 2193b0   
```  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201382941342901/  
2\. http://docs.oracle.com/cd/E22055_01/html/821-2505/afamv.html  
3\. http://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html  
4\. http://stackoverflow.com/questions/9688076/process-linkage-table-and-global-offset-table  
5\. man readelf  
6\. man nm  
7\. man objdump  
8\.   
共享对象之间的函数调用  
一个共享对象中的函数调用另一个共享对象中的函数时，其执行情况比在程序内对函数的简单调用更复杂。每个共享对象都包含一个程序链接表 (Program Linkage Table, PLT)，该表包含位于该共享对象外部并从该共享对象引用的每个函数的条目。最初，PLT 中每个外部函数的地址实际上是 ld.so（即动态链接程序）内的地址。第一次调用这样的函数时，控制权将转移到动态链接程序，该动态链接程序会解析对实际外部函数的调用并为后续调用修补 PLT 地址。  
如果在执行三个 PLT 指令之一的过程中发生分析事件，则 PLT PC 会被删除，并将独占时间归属到调用指令。如果在通过 PLT 条目首次调用期间发生分析事件，但是叶 PC 不是 PLT 指令之一，PLT 和 ld.so 中的代码引起的任何 PC 都将归属到人工函数 @plt 中，该函数将累计非独占时间。每个共享对象都存在一个这样的人工函数。如果程序使用 LD_AUDIT 接口，则可能从不修补 PLT 条目，而且来自 @plt 的非叶 PC 可能发生得更频繁。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")