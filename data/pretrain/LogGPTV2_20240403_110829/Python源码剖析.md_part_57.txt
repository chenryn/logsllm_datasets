builtins
importays
8
一深度探索动态语言核心技术
Python模块的动态加载机制
图14-20
"A.tank.a'
图14-21
精确控制对package下某个module中某个符号的引入
from
tank']
_doc
引入package下module中的所有符号
line l,in 
"C:\Python25\Lib\idlelib\A\tank.py'>
line1,
doc
in 
name
b']
---
## Page 389
14.2.6符号的销毁与重载
as关键字可以控制module以什么名字被引入到当前的1ocal名字空间中，如图14-22所
动态加载机制提供了更大的灵活性，实际上我们可以认为这种重命名机制关注的焦点是
进了内存”。而对于动态加载机制，Python还提供了一种符号重命名的机制，这个机制为
解。
键字as，就取得了这样戏剧性的改变，原因究竞是什么呢？，列位看官，且听以后分
来，虽然在sy8.modues中还有A存在，但是访问A已经是不可能了。仅仅加了一个关
而在图1422中，符号“A”已经消失了，取而代之的是我们指定的符号“Tank”，如此一
所示的结果有很大不同，在图1415中，我们看到了符号“A”被引入到了当前名字空间，
过as控制的符号“Tank”，而且Tank实际上被映射到了moduleA.tank，这一点与图14-15
集合中，有兴趣的朋友可以自已验证。令人感兴趣的是，在当前名字空间中果然出现了通
开始接触pyuon我们就知道，当你需要删除一个对象时，de1吧。我们总是直觉地认为这
Pyhon运行时的瓶颈，如此等等。通常，我们以为de1能够很好地完成工作，毕竟，从一
许是想避免名字空间过于庞大，以保证在名字空间中搜索某个符号的动作的效率不会成为
删除。为什么需要将其删除呢？通常原因很多，也许是想释放该module占用的内存，也
需要通过import将其动态加载到内存中，在使用了这个module之后，可能我们需要将其
“Python虚拟机将module以怎样的形式暴露给当前名字空间”。
样一刀下去，天下太平，毕竟“de1”这个名字总不能是白叫的吧。
之前的例子都是将module自身的名字暴露到了当前的local名字空间，Python通过
第一眼看见图14-22，我们就心中有数了，A和A.tank已经被加载到了Python的module
为了使用一个module，无论是Python的standardmodule还是用户自己的module，都
ReyError!
Traceback (most recent call last):
Hello ImportA
.yun]sotmpougs>>dir()
>>
File
sys.modules[A.tank']
ays.modules
图14-22
["mank"]
更换引l入到当前local名字空间中的module名
fromc:\Python25\Lib\idlelib\A\tank.pyc>
line 1,in 
14.2Python中import机制的黑盒探测
Python源码剖析
一深度探索动态语言核心技术
359
---
## Page 390
Python源码剖析
360
态加载，那么Python将对同一个module执行多次动态加载，并且在内存中保存一个module
感知，即是将这个module以某个符号的形式引入到某个名字空间。如果import等于动
个module所提供的功能。到了这里，我们看到，从Python的角度看，import其实并不完
组成一个完整系统的多个py文件可能都会对某个module进行import动作，希望使用这
在，Pyhon系统成功地向我们隐藏了这一切，所以，我们的程序认为：A.tank已经不存
中的A.tank而言，却是不折不扣的真理。我们的程序已经没有办法感知到A.tank的存
这个英国大主教贝克莱所提出的命题，这个经常被唯物主义者嘲弄的命题，对于Pyhon
问到这个module，仿佛天地间再也不存在A.tank这个module一样。“存在即是被感知”
缓存中，巍然不动。然而，尽管它还存在于Pyhon系统中，但是我们的程序再也无法访
的仅仅是“Tank"这个符号，而其背后隐约闪现的moduleA.tank依然在Pyhon的module
图1423展示了我们的挖掘结果。
性是好事，但是当我们希望彻底了解Python的行为时，就必须将这些隐藏的东西挖出来。
全等同于我们所熟知的“动态加载”这个概念，它的真实含义是希望某个module能够被
动作，Python采取了太多的缓存策略，当然，对于Pyhon的使用者来说，隐藏这些复杂
在了。
和“符号关联的对象的销毁”是一个概念吗？我们已经看到Py山on向我们隐藏了太多的
为什么Python要采用这种看上去类似modulepool的缓存机制呢，一个重要的原因是
13860912
Hello Import A
13860912
>>>id(sys.modules[A.tank])
[Tank"
>dir()
>>
>
但是且慢，这样的动作真的能保证module被销毁吗？或者更准确地说，“符号的销毁”
dir()
impoct A.tank as Tank
import sys
el Tank
dir()
builtins
一深度探索动态语言核心技术
builtins_
builtins
图14-23考察对符号的del操作
doc
_doc
name_
"sys']
---
## Page 391
猜测，在reloaa背后，Python只是在原有的robert modue中添加了符号“b”及其对
操作进行重新加载后，我们发现，在sysmodules中的robenmodule的确更新了。但是
module中的reload操作实现的。图1424显示了重载的情形。
的动态特性显然不会技止于此，它提供了一种重新加载的机制，这种机制是通过builtin
能使用新的Amodule中效率更高的某个功能的实现，难道Python就束手无策了？Pyhon
A之后，我们更新了A中某个功能的实现，以提供更好的效率，我们希望我们的应用程序
知到：而如果该module不在pool中，这时Python才执行动态加载的动作。
文件的名字空间中，并将其关联到该module，使该module透过这个符号能够被py文件感
Python将在这个pool中查找，如果该module已经存在于pool中，则引入一个符号到该py
保存了module的唯一映像，当某个py文件通过import声明希望感知到某个module时，
从ia（）操作的结果可以看到，Pyhon虚拟机并没有创建新的module对象。所以我们可以
的多个映像，这显然是愚盘的。
应的值。
在图14-24的[1]处，我们在robertpy中添加了“b=2”这个表达式，调用reload
>>>robert.b
13836432
13836432
难道这意味着一个module如果被加载之后就再也不能被改变？假如在加载了module
13836432
所以Python引|入了全局的module集合
接着，
module
[1]：添加代码b=2到robart.py中
Y
dir(sys.modules[
#[2]
id(robert)
builtins
ceload(robert)
builtins
一个奇怪的现象出现在了图14-24的[2]之后。在[21处，我们从robertpy中将
"robert"
robert
robert
删除5=2
sys
图14-24Python中的module的重新加载机制
from *c:\Python25\Lib\idlelib\robert.py'>
doc
doe
robert'l)
c:\Pythonz5\Lib\idlelib\robert.py'>
14.2
file_
Python中import机制的黑盒探测
Python源码剖析
name
一深度探索动态语言核心技术
b，1
361
---
## Page 392
362
14.3import机制的实现
Python源码剖析
followme，我们马上进入对import机制的源码剖析。
的一种特殊形式；而诸如from、as与import的结合，实际上同样会进行mportx.y.z
机制基本上可以切分成3个不同的功能：
多的黑盒探测，已经迫不及待想要把这个黑盒撬开，看一看里面到底是如何运作的。OK，
的符号是否已经在源文件中被删除了。
调用reload（）操作更新module时，只是将新的符号加入到module中，而不管module中
的属性列表中，更奇怪的是，robert.b的值还是以前的2。这似乎预示着Python虚拟机在
importx.y.z这样的形式作为默认的主mport动作。
的动作，只是最后在当前名字空间中引入符号时各有不同。所以我们对代码的分析将以
inport机制的认识从整体框架的基础上更深一层，到达代码的层次。
在这一节中，我们将深入Python的源码，仔细考察Pyhon是如何实现这3个功能，将对
（a：c）才对，但是，白纸黑字，那个本应该被删除的b还是出现在了robertmodule
“b=2”删除，同时添加了“c=3”，按照我们的推测，这时robertpy中的属性应该是
[bltinmodule.c]
这个猜测到底对不对呢？别急，这个谜底在本章的最后将被揭开。现在，我们看了太
第14章Python模块的动态加载机制
import_操作，也就是builtin_import_函数，我们的征途就从这里开始。
PyObject*kwds)
Python运行时的全局modulepool的维护和搜索；
在本章第1节中我们看到，Python的 import 机制的起点是buiitinmodule中的
从前面的黑盒探测我们已经对import机制有了一个非常清晰的认识，Python的import
从前面的分析我们看到，尽管Python中import的表现形式千变万化，但是归根结底，
完成了这3个功能，实际上我们自已也能实现一个与Pyhon兼容的动态加载机制了。
PyObject *locals= NUuL;
static char *kwlist口
对不同文件格式的module的动态加载机制。
解析与搜索module路径的树状结构：
Pyobject*globala=NUL
深度探索动态语言核心技术
Hlevel"
builtin
[name",
import_(Pyobject*self,PyObject *args,
"globalsm,
locals,
"fromlist",
---
## Page 393
后面的那个“
其后所带字符串用于在解析过程中出错时输出错误信息时使用，可以看到，输出了“
初始化为Py_None，leve1则保持不变。最后的那个“：”指示格式字符到此就结束了
的指示被解析为char*，而剩下的global、1ocal、fromist则将会按照“o”的指示被
PyArg_ParseTupleAndKeywords的调用也不会失败。其中，args中的那个对象会按照“s
可选的。也就是说，如果args中只有一个对象，那么buiitinimport对
个Python的合法对象。
Anakeywords不进行任何的解析和转换，因为在PyTupleobject对象中存放的肯定是
代表解析的目标对象依然是一个Python中的合法对象，通常，这表示PyArg_ParseTuple
解析成char*：i则用来将tuple中的PyIntObject对象解析为int类型的值；而o则
builtin
解其所支持的所有格式字符可以参考Pyhon 自身所携带的文档。这里简要介绍一下
包、拆包的策略，使得可变数量的对象能够很容易地在函数之间传递。
PyTupleobject拆开，重新获得当初的参数。Pyhon在自身的实现中大量运用了这样的打
令时打包而产生的，到了这里，Pyhon虚拟机进行了一个逆动作，即将打包后得到的这个
import_函数运行所需要的所有参数和信息，它是Pyhon虚拟机在执行MPoRT_NAME指
PyStringobject 对象，也可能是C的原生类型，比如 int，char等。
成各种目标对象。目标对象可以是Python 中的对象，比如PyDictobject对象，
int EyArg_ParseTupleAndKeyworcst Pyobject
使用的函数，其原型如下：
至于“”和“：”，则非格式字符，而是指示字符，“”指示其后所带的格式字符是
其中，s代表目标对象是一个char*，通常用来将tuple中的pystringobject对象
在解析参数的过程中，指定解析格式的format中可用的格式字符非常多，想要详细了
我们知道，这里的这个args实际上是一个PyrupleObject对象，包含了buiitin
这个函数的目的是将args和kwds中所包含的所有对象按format中指定的格式解析
这里的
return Pyimport_ImportModuleLevel(name,globals, locals, fromllst)
Pyobject
/从tuple中解析出需要的信意
irt
return NULL;
level)
level
import_用到的格式字符。
PyArg_ParseTupleAndKeywords函数在Python自身的实现中是一个被广泛
_import_”就能很好地定位错误的出现位置了。
fromlist=Noul;
const charformat,charkeywordis
Python源码剖析
kargs.
kowdis,
14.3
import机制的实现
B000i:
Pyobfect
深度探素动态语言核心技术
*kw
import_
363
---
## Page 394
Python源码剖析
364
在进行了import动作之后，还会通过unlock_import解开锁。我们关注的焦点在import
不同的线程对同一个module的import动作，如果没有这个同步，则会产生一些异常现象。
代码清单14-3
动作，
import_module_level(char
[import.c]
PyImport
Pyobject
[import.c]
*locals:
Python虚拟机在进行import之前，会对import这个动作上锁，这样做是为了同步
在完成了对参数的拆包动作之后，Pyhon进入了PyImport_ImportModuletevel：
第14章
return tail;
if(lensure_fromlist(tail)
while
char bUE[MAXPATHLEN+1]
/121:
return result;
unlock_import(0
所以不去深究锁机制，直接进入import_module_level（见代码清单143）。
lock_import(）
Pyoblect *result;
return head;
tail
xau
深度探索动态语言核心技术
ImportModulelevel(ehar
fromlist
load_next(parent,
Python模块的动态加载机制
*parent,
Import_module_level(name,globals,
next:
load_next(tai1,
NULL)
NULL)
Pyobject
Py None
Lmport