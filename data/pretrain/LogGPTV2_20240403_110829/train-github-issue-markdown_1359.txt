 **Migrated issue, originally created by Anonymous**
(original reporter: ged) Continuing my speed optimization frenzy, here is a
(very) experimental patch to optimize the ORM speed by using a custom
ResultProxy which only returns dicts with whatever will be used by the ORM.
Once again, the results are encouraging:  
~26% improvement on large queries  
~11% improvement on very small queries
Remember that I am timing _total_ time, including the time for the actual
DBAPI work.
A few comments about the patch:
  * The approach needs to be able to specify a custom ResultProxy class per query (or at least from within the ORM code path). I think this can also be useful outside the ORM, if the user wants to have its results returned in a specific way (I've had a couple times where I needed that and did it on top of the standard ResultProxy but this was not very efficient, but I didn't think to this solution at the time). Within the patch, I've only made the minimum possible modification so that it would work for my test case (attached). It would of course need to be completed, but I can't do that since I am a bit lost within that part of the code (the different ways to create a connection, and the code path it goes through the dialect etc...). I am hoping for some help here.
  * I know the custom ResultProxy approach is not compatible with the specific result proxies used by the various dialects, but I am sure it is possible to refactor the code to make that work (I haven't thought about it much yet).
  * There are two parts of that patch which are ugly to my eyes: 
    * the way I'm guessing what exactly will serve as a key in the dictionary. I am hoping there could be an official "contract" that for example the first element of the result_map is what is used by the ORM.
    * I have duplicated the functionality of _process_row in fetchall. This is because the overhead of the function call is significant. This is ugly, I know, but worth it IMO for such a critical part.
* * *
Attachments: NamedTuple_opt.patch | orm_uses_col_indexes.patch |
querying_columns_only_opt.patch | fastdict_resultproxy.patch |
kwargs_are_inefficient.patch | stress_orm.py