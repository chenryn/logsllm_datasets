### Introduction

The languages described above are not designed to provide detailed descriptions of low-level Secure Multi-Party Computation (SMC) protocols. To the best of our knowledge, only Launchbury et al. [30] have seriously discussed the structuring and higher-level constructions for these protocol implementations. They use Haskell with a primitive operation `rotateRight` (analogous to our `from Next`), but their approach does not straightforwardly allow the same level of parallelization as ours.

Our Domain-Specific Language (DSL) shares some similarities with dataflow programming [18], where communication patterns follow from data dependencies in the program. Our `from-primitive` is somewhat similar to the concept of a future [1]. However, the relationship with these paradigms is not too close because, for us, the concept of a party is fundamental, and we explicitly state which computations are executed by which parties. Therefore, we believe that the design of a DSL for a domain similar to ours (building complex protocols between mutually distrustful parties) has not been considered before.

### Conclusions

We have presented a DSL for specifying low-level SMC protocols. The ultimate goal of this DSL is to improve the efficiency of various SMC applications, thereby facilitating the adoption of this technique. The DSL achieves this goal by increasing the efficiency of executable protocols, easing their development and maintenance, and simplifying the comparison of different design decisions for protocols.

Several aspects of its design contribute to the success of our DSL:
1. It is separate from the application-level language.
2. It focuses on describing the data dependencies of a protocol, rather than the computation and communication details.
3. Its communication primitives are tailored to the needs of low-level SMC protocols.
4. Its type system is length-polymorphic, yet allows precise control over the lengths of input, output, and intermediate values.
5. Its intermediate representation (IR) is highly parallelization-friendly.
6. The IR consists of arithmetic operations.
7. Optimizations targeting the IR are applied to the entire protocol.
8. These optimizations preserve the security of protocols.
9. The security checker is invoked late in the toolchain.

These aspects build upon and strengthen each other. For example, if there was a single language for primitive protocols and applications, resulting in a monolithic protocol for the entire privacy-preserving application, whole-protocol optimizations would be infeasible. The use of arithmetic circuits, as opposed to Boolean ones, also keeps down the size of the protocol description. The compositional nature of protocols, together with security-preserving optimizations, eases the development of secure protocols, and the security checker instills confidence.

We believe it is worthwhile to use the same or a similar language for developing low-level protocols in SMC frameworks based on Shamir's secret sharing [43] or SPDZ [24]. Similar improvements in efficiency and maintainability would be obtained.

Our DSL brings structure to the implementations of low-level protocols and opens up new optimization possibilities for the application-level language. While the application language already supports SIMD operations, we can now add statement-level parallelism to it. We can also estimate the performance of low-level protocols more precisely, depending on the parameters of the execution environment of the SMC application, so that the application compiler can better choose the applied optimizations.

### Acknowledgements

This work was supported by the European Social Fund through the ICT Doctoral School programme, and by the European Regional Development Fund through the Estonian Center of Excellence in Computer Science, EXCS, and through the Software Technologies and Applications Competence Centre, STACC. It has also received support from the Estonian Research Council through project IUT27-1. We would like to thank Madis Janson, Liisi Kerik, Alisa Pankova, Martin Pettai, and Karl Tarbe for their contributions to the compiler and protocols.

### References

[References are listed here, following the provided format.]

---

This version of the text is more structured, clear, and professional. It ensures that the content is well-organized and easy to follow, with a logical flow and improved readability.