are not meant, nor capable to describe the details of those protocols.
None of the languages described above are helpful in stating
how the low-level SMC protocols are implemented. As far as we
(a) Running time
(b) Speedup of DSL compared to C++
Figure 6: Benchmarking results for ﬂoating-point multiplication
know, only Launchbury et al. [30] seriously discuss the structur-
ing and higher-level constructions for these protocol implementa-
tions. They do not propose a novel language, but use Haskell with a
primitive operation rotateRight (corresponding to our from Next).
Their approach does not straightforwardly allow the parallelization
of protocols to the same extent as ours.
Our DSL has some similarities to dataﬂow programming [18],
where the communication pattern follows from the data dependen-
cies in the program. Our from-primitive is slightly similar to the
concept of a future [1]. Still, the relationship with these paradigms
is not too close, because for us, the concept of a party is also funda-
mental, and we explicitly state which computations are executed by
which parties. Hence we believe that the design of a DSL for a do-
main similar to ours (building complex protocols between mutually
distrustful parties) has not been considered before.
7. CONCLUSIONS
We have presented a DSL for specifying low-level SMC proto-
cols. The ultimate goal of this DSL is to improve the eﬃciency of
diﬀerent kinds of SMC applications, thereby facilitating the adop-
tion of this technique. The DSL achieves this goal by increasing the
eﬃciency of executable protocols, easing their development and
maintenance, and simplifying the comparison of diﬀerent design
decisions for protocols.
At least the following aspects of its design contribute to the suc-
cess of our DSL: (i) it is separate from the application-level lan-
guage; (ii) it concentrates on describing the data dependencies of a
protocol, not the computation and communication details; (iii) its
communication primitives are tailored to the needs of low-level
SMC protocols; (iv) its type system is length-polymorphic, yet
allows precise control over the lengths of input, output, and in-
termediate values; (v) its intermediate representation (IR) is ex-
tremely parallelization-friendly; (vi) the IR consists of arithmetic
operations; (vii) the optimizations targeting the IR are applied to
the whole protocol; (viii) the optimizations preserve the security
of protocols; and (ix) the security checker is invoked late in the
toolchain. These fortunate aspects build upon and strengthen each
other. E.g. if there was a single language for primitive protocols
and applications, resulting in a monolithic protocol for the entire
privacy-preserving application, then the whole-protocol optimiza-
tions would be infeasible. The use of arithmetic circuits, as op-
posed to Boolean ones, also keeps down the size of the protocol
description. The compositional nature of protocols, together with
the security-preserving optimizations, ease the development of se-
cure protocols, and the security checker instills conﬁdence.
We believe that it is worthwhile to use the same or similar lan-
guage for developing the low-level protocols in SMC frameworks
based on Shamir’s secret sharing [43] or SPDZ [24]. Similar im-
provements in eﬃciency and maintainability would be obtained.
Our DSL brings structure to the implementations of low-level
protocols and opens up new optimization possibilities for the ap-
plication level language. While the application language already
supports SIMD operations, we can now add statement-level par-
allelism to it. We can also estimate the performance of low-level
protocols much more precisely, depending on the parameters of the
execution environment of the SMC application, so that the applica-
tion compiler can better choose the applied optimizations.
8. ACKNOWLEDGEMENTS
This work was supported by the European Social Fund through
the ICT Doctoral School programme, and by the European Re-
gional Development Fund through the Estonian Center of Excel-
lence in Computer Science, EXCS, and through the Software Tech-
nologies and Applications Competence Centre, STACC. It has also
received support from Estonian Research Council through project
IUT27-1. We would like to thank Madis Janson, Liisi Kerik, Alisa
Pankova, Martin Pettai and Karl Tarbe for their contributions to the
compiler and protocols.
9. REFERENCES
[1] Henry C. Baker, Jr. and Carl Hewitt. The Incremental Garbage Collection of
Processes. In Proceedings of the 1977 Symposium on Artiﬁcial Intelligence and
Programming Languages, pages 55–59. ACM, 1977.
[2] Assaf Ben-David, Noam Nisan, and Benny Pinkas. FairplayMP: a system for
secure multi-party computation. In CCS ’08: Proceedings of the 15th ACM
conference on Computer and communications security, pages 257–266, New
York, NY, USA, 2008. ACM.
[3] Dan Bogdanov, Marko Jõemets, Sander Siim, and Meril Vaht. A Short Paper on
How the National Tax Oﬃce Evaluated a Tax Fraud Detection System Based on
Secure Multi-party Computation. In Proceedings of 19th International
Conference on Financial Cryptography and Data Security, 2015.
[4] Dan Bogdanov, Liina Kamm, Sven Laur, and Ville Sokk. Rmind: a tool for
cryptographically secure statistical analysis. Cryptology ePrint Archive, Report
2014/512, 2014.
[5] Dan Bogdanov, Peeter Laud, Sven Laur, and Pille Pullonen. From input private
to universally composable secure multi-party computation primitives. In IEEE
27th Computer Security Foundations Symposium, CSF 2014, pages 184–198.
IEEE, July 2014.
[6] Dan Bogdanov, Peeter Laud, and Jaak Randmets. Domain-polymorphic
programming of privacy-preserving applications. In Alejandro Russo and Omer
lllllllllllllllllllllllllllllllllllllllllllllllllllllll100101102103104105100101102103104105106Vector lengthDuration (ms)TypelC++ float32C++ float64DSL float32DSL float64246100101102103104105106Vector lengthSpeedupTypefloat32float64Tripp, editors, Proceedings of the Ninth Workshop on Programming Languages
and Analysis for Security, PLAS@ECOOP 2014, Uppsala, Sweden, July 29,
2014, page 53. ACM, 2014.
[7] Dan Bogdanov, Sven Laur, and Jan Willemson. Sharemind: A framework for
fast privacy-preserving computations. In Sushil Jajodia and Javier López,
editors, ESORICS, volume 5283 of Lecture Notes in Computer Science, pages
192–206. Springer, 2008.
[8] Dan Bogdanov, Margus Niitsoo, Tomas Toft, and Jan Willemson.
High-performance secure multi-party computation for data mining applications.
Int. J. Inf. Sec., 11(6):403–418, 2012.
[9] Peter Bogetoft, Dan Lund Christensen, Ivan Damgård, Martin Geisler,
Thomas P. Jakobsen, Mikkel Krøigaard, Janus Dam Nielsen, Jesper Buus
Nielsen, Kurt Nielsen, Jakob Pagter, Michael I. Schwartzbach, and Tomas Toft.
Secure multiparty computation goes live. In Roger Dingledine and Philippe
Golle, editors, Financial Cryptography and Data Security, 13th International
Conference, FC 2009, Accra Beach, Barbados, February 23-26, 2009. Revised
Selected Papers, volume 5628 of Lecture Notes in Computer Science, pages
325–343. Springer, 2009.
[10] Martin Burkhart, Mario Strasser, Dilip Many, and Xenofontas Dimitropoulos.
SEPIA: Privacy-preserving aggregation of multi-domain network events and
statistics. In USENIX Security Symposium, pages 223–239, Washington, DC,
USA, 2010.
[11] Ran Canetti. Universally composable security: A new paradigm for
cryptographic protocols. In FOCS, pages 136–145, 2001.
[12] Octavian Catrina and Amitabh Saxena. Secure computation with ﬁxed-point
numbers. In Radu Sion, editor, Financial Cryptography and Data Security, 14th
International Conference, FC 2010, Tenerife, Canary Islands, January 25-28,
2010, Revised Selected Papers, volume 6052 of Lecture Notes in Computer
Science, pages 35–50. Springer, 2010.
[13] Luis Damas and Robin Milner. Principal type-schemes for functional programs.
In Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of
programming languages, pages 207–212. ACM, 1982.
[14] Ivan Damgård, Martin Geisler, Mikkel Krøigaard, and Jesper Buus Nielsen.
Asynchronous Multiparty Computation: Theory and Implementation. In
Stanislaw Jarecki and Gene Tsudik, editors, Public Key Cryptography, volume
5443 of Lecture Notes in Computer Science, pages 160–179. Springer, 2009.
[15] Ivan Damgård and Jesper Buus Nielsen. Universally composable eﬃcient
multiparty computation from threshold homomorphic encryption. In Dan
Boneh, editor, CRYPTO, volume 2729 of Lecture Notes in Computer Science,
pages 247–264. Springer, 2003.
[16] Leonardo Mendonça de Moura and Nikolaj Bjørner. Z3: an eﬃcient SMT
solver. In Tools and Algorithms for the Construction and Analysis of Systems,
14th International Conference, TACAS 2008, Held as Part of the Joint European
Conferences on Theory and Practice of Software, ETAPS 2008, Budapest,
Hungary, March 29-April 6, 2008. Proceedings, pages 337–340, 2008.
[17] Fabienne Eigner, Matteo Maﬀei, Ivan Pryvalov, Francesca Pampaloni, and
Aniket Kate. Diﬀerentially private data aggregation with optimal utility. In
Charles N. Payne Jr., Adam Hahn, Kevin R. B. Butler, and Micah Sherr, editors,
Proceedings of the 30th Annual Computer Security Applications Conference,
ACSAC 2014, New Orleans, LA, USA, December 8-12, 2014, pages 316–325.
ACM, 2014.
[18] Jim Falgout. Dataﬂow Programming: Handling Huge Data Loads Without
Adding Complexity. Dr. Dobb’s Journal, 36, 9 2011.
[19] Cédric Fournet, Gurvan Le Guernic, and Tamara Rezk. A security-preserving
compiler for distributed programs: from information-ﬂow policies to
cryptographic mechanisms. In Ehab Al-Shaer, Somesh Jha, and Angelos D.
Keromytis, editors, Proceedings of the 2009 ACM Conference on Computer and
Communications Security, CCS 2009, Chicago, Illinois, USA, November 9-13,
2009, pages 432–441. ACM, 2009.
[20] Wilko Henecka, Stefan Kögl, Ahmad-Reza Sadeghi, Thomas Schneider, and
Immo Wehrenberg. TASTY: tool for automating secure two-party
computations. In Ehab Al-Shaer, Angelos D. Keromytis, and Vitaly Shmatikov,
editors, Proceedings of the 17th ACM Conference on Computer and
Communications Security. CCS’10, pages 451–462. ACM, 2010.
[21] Andreas Holzer, Martin Franz, Stefan Katzenbeisser, and Helmut Veith. Secure
two-party computations in ANSI C. In Ting Yu, George Danezis, and Virgil D.
Gligor, editors, the ACM Conference on Computer and Communications
Security, CCS’12, Raleigh, NC, USA, October 16-18, 2012, pages 772–783.
ACM, 2012.
[22] Liina Kamm, Dan Bogdanov, Sven Laur, and Jaak Vilo. A new way to protect
privacy in large-scale genome-wide association studies. Bioinformatics,
29(7):886–893, 2013.
[23] Liina Kamm and Jan Willemson. Secure ﬂoating point arithmetic and private
satellite collision analysis. International Journal of Information Security, pages
1–18, 2014.
[24] Marcel Keller, Peter Scholl, and Nigel P. Smart. An architecture for practical
actively secure MPC with dishonest majority. In Ahmad-Reza Sadeghi,
Virgil D. Gligor, and Moti Yung, editors, 2013 ACM SIGSAC Conference on
Computer and Communications Security, CCS’13, Berlin, Germany, November
4-8, 2013, pages 549–560. ACM, 2013.
[25] Florian Kerschbaum, Axel Schröpfer, Antonio Zilli, Richard Pibernik, Octavian
Catrina, Sebastiaan de Hoogh, Berry Schoenmakers, Stelvio Cimato, and
Ernesto Damiani. Secure collaborative supply-chain management. IEEE
Computer, 44(9):38–43, 2011.
[26] Benjamin Kreuter, Abhi Shelat, Benjamin Mood, and Kevin R. B. Butler. PCF:
A portable circuit format for scalable two-party secure computation. In
Samuel T. King, editor, Proceedings of the 22th USENIX Security Symposium,
Washington, DC, USA, August 14-16, 2013, pages 321–336. USENIX
Association, 2013.
[27] Benjamin Kreuter, Abhi Shelat, and Chih-Hao Shen. Billion-gate secure
computation with malicious adversaries. In Proceedings of the 21st USENIX
conference on Security symposium, pages 285–300. USENIX Association,
2012.
[28] Toomas Krips and Jan Willemson. Hybrid model of ﬁxed and ﬂoating point
numbers in secure multiparty computations. In Sherman S. M. Chow, Jan
Camenisch, Lucas Chi Kwong Hui, and Siu-Ming Yiu, editors, Information
Security - 17th International Conference, ISC 2014, Hong Kong, China,
October 12-14, 2014. Proceedings, volume 8783 of Lecture Notes in Computer
Science, pages 179–197. Springer, 2014.
[29] Chris Lattner and Vikram S. Adve. LLVM: A compilation framework for
lifelong program analysis & transformation. In 2nd IEEE / ACM International
Symposium on Code Generation and Optimization (CGO 2004), 20-24 March
2004, San Jose, CA, USA, pages 75–88. IEEE Computer Society, 2004.
[30] John Launchbury, Iavor S. Diatchki, Thomas DuBuisson, and Andy
Adams-Moran. Eﬃcient lookup-table protocol in secure multiparty
computation. In Peter Thiemann and Robby Bruce Findler, editors, ACM
SIGPLAN International Conference on Functional Programming, ICFP’12,
Copenhagen, Denmark, September 9-15, 2012, pages 189–200. ACM, 2012.
[31] Jeﬀ Lewis. Cryptol: speciﬁcation, implementation and veriﬁcation of
high-grade cryptographic applications. In Peng Ning, Vijay Atluri, Virgil D.
Gligor, and Heiko Mantel, editors, FMSE, page 41. ACM, 2007.
[32] Miran Lipovaˇca. Learn You a Haskell for Great Good! A Beginner’s Guide. No
Starch Press, 2011.
[33] Chang Liu, Yan Huang, Elaine Shi, Jonathan Katz, and Michael W. Hicks.
Automating eﬃcient ram-model secure computation. In 2014 IEEE Symposium
on Security and Privacy, SP 2014, Berkeley, CA, USA, May 18-21, 2014, pages
623–638. IEEE Computer Society, 2014.
[34] Lior Malka. Vmcrypt: modular software architecture for scalable secure
computation. In Yan Chen, George Danezis, and Vitaly Shmatikov, editors,
Proceedings of the 18th ACM Conference on Computer and Communications
Security, CCS 2011, Chicago, Illinois, USA, October 17-21, 2011, pages
715–724. ACM, 2011.
[35] John C. Mitchell, Rahul Sharma, Deian Stefan, and Joe Zimmerman.
Information-ﬂow control for programming on encrypted data. In Stephen
Chong, editor, 25th IEEE Computer Security Foundations Symposium, CSF
2012, Cambridge, MA, USA, June 25-27, 2012, pages 45–60. IEEE, 2012.
[36] Janus Dam Nielsen and Michael I. Schwartzbach. A domain-speciﬁc
programming language for secure multiparty computation. In Michael W.
Hicks, editor, Proceedings of the 2007 Workshop on Programming Languages
and Analysis for Security. PLAS’07, pages 21–30. ACM, 2007.
[37] Martin Pettai and Peeter Laud. Automatic Proofs of Privacy of Secure
Multi-Party Computation Protocols Against Active Adversaries. In Cedric
Fournet and Michael Hicks, editors, 2015 IEEE 28th Computer Security
Foundations Symposium (CSF 2015), 2015.
[38] Aseem Rastogi, Matthew A. Hammer, and Michael Hicks. Wysteria: A
programming language for generic, mixed-mode multiparty computations. In
2014 IEEE Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA,
May 18-21, 2014, pages 655–670. IEEE Computer Society, 2014.
[39] Axel Schröpfer, Florian Kerschbaum, and Guenter Mueller. L1 - An
Intermediate Language for Mixed-Protocol Secure Computation. In
Proceedings of the 35th Annual IEEE International Computer Software and
Applications Conference. COMPSAC’11, pages 298–307. IEEE Computer
Society, 2011.
[40] Sai Deep Tetali, Mohsen Lesani, Rupak Majumdar, and Todd D. Millstein.
Mrcrypt: static analysis for secure cloud computations. In Antony L. Hosking,
Patrick Th. Eugster, and Cristina V. Lopes, editors, Proceedings of the 2013
ACM SIGPLAN International Conference on Object Oriented Programming
Systems Languages & Applications, OOPSLA 2013, part of SPLASH 2013,
Indianapolis, IN, USA, October 26-31, 2013, pages 271–286. ACM, 2013.
[41] Dimitrios Vytiniotis, Simon Peyton Jones, Tom Schrijvers, and Martin
Sulzmann. OutsideIn(X) Modular type inference with local assumptions.
Journal of Functional Programming, 21(4-5):333–412, 2011.
[42] Andrew C. Yao. How to generate and exchange secrets (extended abstract). In
27th Annual Symposium on Foundations of Computer Science, pages 162–167,
Toronto, Ontario, Canada, October 27–29, 1986. IEEE Computer Society Press.
[43] Yihua Zhang, Aaron Steele, and Marina Blanton. PICCO: a general-purpose
compiler for private distributed computation. In Ahmad-Reza Sadeghi, Virgil D.
Gligor, and Moti Yung, editors, 2013 ACM SIGSAC Conference on Computer
and Communications Security, CCS’13, Berlin, Germany, November 4-8, 2013,
pages 813–826. ACM, 2013.