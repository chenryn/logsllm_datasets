thus indicate a continuous tradeoff between security and
performance among exisiting CFI solution, PITTYPAT,
and data protection. PITTYPAT offers control security
that is close to ideal, i.e. what would result from data
integrity, but with a small percentage of the overhead of
data-integrity protection.
7 Related Work
The original work on CFI [1] defined control-flow in-
tegrity in terms of the results of a static, flow-sensitive
points-to analysis. A significant body of work has adapted
the original definition for complex language features and
developed sophisticated implementations that enforce it.
While CFI is conventionally enforced by validating the
target of a control transfer before the transfer, control-
flow locking [3] validates the target after the transfer to
enable more efficient use of system caches. Compact
Control Flow Integrity and Randomization (CCFIR) [41]
optimizes the performance of validating a transfer target
by randomizing the layout of allowable transfer targets
at each jump. Opaque CFI (O-CFI) [21] ensures that
an attacker who can inspect the rewritten code cannot
learn additional information about the targets of control
jumps that are admitted as valid by the rewritten code.
All of the above approaches enforce security defined by
the results of a flow-sensitive points-to analysis; previous
work has produced attacks [5, 12, 32] that are allowed by
any approach that relies on such information. PITTYPAT
is distinct from all of the above approaches because it
computes and uses the results of a points-to analysis com-
puted for the exact control path executed. As a result, it
successfully detects known attacks, such as COOP [32]
(see §6.3.2).
Previous work has explored the tradeoffs of implement-
ing CFI at distinct points in a program’s lifecycle. CF
restrictor [30] performs CFI analysis and instrumenta-
tion completely at the source level in an instrumenting
compiler, and further work developed CFI integrated into
production compilers [36]. BinCFI [42] implements CFI
without access to the program source, but only access
to a stripped binary. Modular CFI [25] implements CFI
for programs constructed from separate compilation units.
Unlike each of the above approaches, PITTYPAT consists
of a background process that performs an online analysis
of the program path executed.
Recent work on control-flow bending has established
limitations on the security of any framework that enforces
only conventional CFI [5], and proposes that future work
explore CFI frameworks that validate branch targets us-
ing an auxiliary structure, such as a shadow stack. The
conclusions of work on control-flow bending are strongly
consistent with the motivation of PITTYPAT: the key con-
tribution of PITTYPAT is that it enforces path-sensitive
CFI, provably stronger than conventional CFI, and does so
not only by maintaining a shadow stack of points-to infor-
142    26th USENIX Security Symposium
USENIX Association
mation, but by validating the targets of indirect branches
using path-sensitive points-to analysis. Per-input CFI (π-
CFI) [26] only enables control transfers to targets that
are enabled depending on previous operations taken by a
program in a given run; §6 contains a detailed comparison
of π-CFI to PITTYPAT.
Several implementations of CFI use hardware features
that efficiently record control targets chosen by a program.
CFIMon [40] collects the transfer targets chosen by the
program from the processor’s branch tracing store, and
validates the chosen target against the results of a flow-
sensitive points-to analysis. Previous work has also pro-
posed customized architectures with extended instruction
sets that directly implement primitive operations required
in order to enforce CFI [9]. Such approaches are thus
distinct from our approach for the same reason as all ap-
proaches that use the results of a flow-sensitive analysis.
kBouncer [29] interposes when a program attempts to ex-
ecute a system call and inspects the Last Branch Record
(LBR) provided on Intel processors to detect patterns of
transfer targets that indicate an ROP attack. ROPecker [7]
similarly interposes at key security events and inspects the
LBR, but combines information from inspecting the his-
tory of chosen branches with a forward analysis. PathAr-
mor [37] interposes key system calls, collects the last
transfer targets collected in the LBR, and determines if
there is a feasible path through the program’s control-flow
graph that reaches each transfer target. Further work [6]
introduced counterattacks against such defenses that ex-
ploit the fact that each of the defenses only inspects the
LBR to analyze a bounded number of transfer targets
chosen immediately before a system call.
The above approaches are similar to PITTYPAT in that
they inspect the results of hardware features that collect
some subset of the control targets taken by a program at
runtime. However, they are all distinct from PITTYPAT
because PITTYPAT uses hardware features to maintain ac-
curate points-to information by inspecting all branch tar-
gets chosen by a program over its execution. Recent work
has proposed approaches that leverage Intel PT. Most such
approaches use PT to debug programs [16, 35], whereas
PITTYPAT uses PT to protect their control security. Some
approaches [13, 14, 19] use PT to enforce that an appli-
cation satisfies CFI as defined by a static flow-sensitive
analysis; PITTYPAT uses PT to ensure that a program
satisfies a stronger, path-sensitive variation of CFI.
Points-to analysis is a classic problem in static pro-
gram analysis, with different approaches that achieve dis-
tinct tradeoffs in either higher precision [2] or scalabil-
ity [34]. Points-to analyses are characterized on multiple
dimensions, including flow-sensitivity [2, 34] and context-
sensitivity [10, 18, 27, 38, 43]. However, a key property
of all such analyses is that they are performed statically,
and thus compute information either per program point
or per group of stack configurations [15]. PITTYPAT
uses a points-to analysis to compute points-to informa-
tion based on the exact program path executed. As a
result, PITTYPAT does not merge points-to information
over multiple paths that reach a given control location
or stack configuration, which heavily influenced the de-
sign of the novel points-to analysis that it uses. Recent
work [17] has introduced Code-Pointer Integrity (CPI),
which protects the integrity of all addresses that indirectly
affect the value of a function pointer used as the target of
an indirect branch. A key finding of the original work on
CPI is that CPI is relatively expensive to enforce for pro-
grams that contain a large number of code pointers, such
as binaries compiled from programs in object-oriented
languages. As a result, CPI was proposed along with
code-pointer separation (CPS), in which the values of
code pointers are protected, but pointers to cells con-
taining code pointers are left unprotected. Subsequent
work on counterfeit object-oriented programming [32]
demonstrated that CPS is insufficiently strong to block
code-reuse attacks on object-oriented programs.
PITTYPAT, along with all approaches for enforcing
various versions of CFI, differs fundamentally from CPI
in that it does not attempt to protect any segment of
a program’s data at runtime.
Instead, PITTYPAT vali-
dates candidate targets of indirect control transfers based
only on the history of control branches taken. CPI and
PITTYPAT have complementary strengths and should be
applied in complementary security settings. In particular,
CPI often incurs slightly lower overhead, but can only
be applied in scenarios in which the source code of the
entire program to be protected is available to be analyzed
and instrumented. Such conditions are not satisfied in
cases in which a program relies on large, untrusted third-
party or shared libraries. PITTYPAT can potentially incur
larger performance overhead than CPI. However, because
it performs an points-to analysis that can be easily run on
sequences of low-level instructions, it can be applied to
protect program modules that are only available as bina-
ries. It also need not instrument any code of a protected
application. Our current implementation of PITTYPAT
uses an analysis proposed in the work on CPI only to
optimize the points-to analysis performed at runtime to
validate branch targets.
8 Conclusion
We introduced a path-sensitive variation of CFI and an
efficient runtime enforcement system, PITTYPAT. Our
formal analysis and empirical evaluation demonstrate
that, PITTYPAT provides strictly stronger security guaran-
tees than conventional CFI, while incurring an acceptable
amount of runtime overhead.
USENIX Association
26th USENIX Security Symposium    143
References
[1] ABADI, M., BUDIU, M., ERLINGSSON, Ú., AND LIG-
ATTI, J. Control-flow integrity. In CCS (2005).
[2] ANDERSEN, L. O. Program analysis and specialization
for the C programming language. PhD thesis, U. Cophen-
hagen, 1994.
[15] HARDEKOPF, B., AND LIN, C. The ant and the grasshop-
per: fast and accurate pointer analysis for millions of lines
of code. In PLDI (2007).
[16] KASIKCI, B., SCHUBERT, B., PEREIRA, C., POKAM,
G., AND CANDEA, G. Failure sketching: A technique for
automated root cause diagnosis of in-production failures.
In SOSP (2015).
[3] BLETSCH, T., JIANG, X., AND FREEH, V. Mitigating
code-reuse attacks with control-flow locking. In ACSAC
(2011).
[17] KUZNETSOV, V., SZEKERES, L., PAYER, M., CANDEA,
G., SEKAR, R., AND SONG, D. Code-pointer integrity.
In OSDI (2014).
[4] BUROW, N., CARR, S. A., BRUNTHALER, S., PAYER,
M., NASH, J., LARSEN, P., AND FRANZ, M. Control-
flow integrity: Precision, security, and performance. arXiv
preprint arXiv:1602.04056 (2016).
[5] CARLINI, N., BARRESI, A., PAYER, M., WAGNER, D.,
AND GROSS, T. R. Control-flow bending: On the effec-
tiveness of control-flow integrity. In USENIX Security
(2015).
[6] CARLINI, N., AND WAGNER, D. ROP is still dangerous:
Breaking modern defenses. In USENIX Security (2014).
[7] CHENG, Y., ZHOU, Z., YU, M., DING, X., AND DENG,
R. H. Ropecker: A generic and practical approach for
defending against ROP attacks. In NDSS (2014).
[8] COUSOT, P., AND COUSOT, R. Abstract interpretation: a
unified lattice model for static analysis of programs by con-
struction or approximation of fixpoints. In POPL (1977).
[9] DAVI, L., KOEBERL, P., AND SADEGHI, A.-R.
Hardware-assisted fine-grained control-flow integrity: To-
wards efficient protection of embedded systems against
software exploitation. In DAC (2014).
[10] EMAMI, M., GHIYA, R., AND HENDREN, L. J. Context-
sensitive interprocedural points-to analysis in the presence
of function pointers. In PLDI (1994).
[11] EVANS,
I., FINGERET, S., GONZÁLEZ,
J., OT-
GONBAATAR, U., TANG, T., SHROBE, H., SIDIROGLOU-
DOUSKOS, S., RINARD, M., AND OKHRAVI, H. Missing
the point (er): On the effectiveness of code pointer in-
tegrity. In SP (2015).
[12] EVANS, I., LONG, F., OTGONBAATAR, U., SHROBE,
H., RINARD, M., OKHRAVI, H., AND SIDIROGLOU-
DOUSKOS, S. Control jujutsu: On the weaknesses of
fine-grained control flow integrity. In CCS (2015).
[13] GE, X., CUI, W., AND JAEGER, T. Griffin: Guarding
In ASPLOS
control flows using intel processor trace.
(2017).
[18] LATTNER, C., LENHARTH, A., AND ADVE, V. Mak-
ing context-sensitive points-to analysis with heap cloning
practical for the real world. In PLDI (2007).
[19] LIU, Y., SHI, P., WANG, X., CHEN, H., ZANG, B., AND
GUAN, H. Transparent and efficient cfi enforcement with
intel processor trace. In HPCA (2017).
[20] The LLVM compiler infrastructure project. http://llvm.
org/, 2016. Accessed: 2016 May 12.
[21] MOHAN, V., LARSEN, P., BRUNTHALER, S., HAMLEN,
K. W., AND FRANZ, M. Opaque control-flow integrity.
In NDSS (2015).
[22] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M., AND
ZDANCEWIC, S. Softbound: highly compatible and com-
plete spatial memory safety for c. In PLDI (2009).
[23] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M., AND
ZDANCEWIC, S. Cets: compiler enforced temporal safety
for c. In ISMM (2010).
[24] NECULA, G. C., MCPEAK, S., AND WEIMER, W.
Ccured: Type-safe retrofitting of legacy code. In PLDI
(2002).
[25] NIU, B., AND TAN, G. Modular control-flow integrity. In
PLDI (2014).
[26] NIU, B., AND TAN, G. Per-input control-flow integrity.
In CCS (2015).
[27] NYSTROM, E. M., KIM, H.-S., AND WEN-MEI, W. H.
Bottom-up and top-down context-sensitive summary-
based pointer analysis. In International Static Analysis
Symposium (2004).
[28] ONE, A. Smashing the stack for fun and profit. Phrack
magazine 7, 49 (1996).
[29] PAPPAS, V., POLYCHRONAKIS, M., AND KEROMYTIS,
A. D. Transparent ROP exploit mitigation using indirect
branch tracing. In USENIX Security (2013).
[30] PEWNY, J., AND HOLZ, T. Control-flow restrictor:
Compiler-based CFI for iOS. In ACSAC (2013).
[14] GU, Y., ZHAO, Q., ZHANG, Y., AND LIN, Z. Pt-cfi:
Transparent backward-edge control flow violation detec-
tion using intel processor trace. In CODASPY (2017).
[31] REINDERS, J. Processor tracing - Blogs@Intel. https:
//blogs.intel.com/blog/processor-tracing/,
2013. Accessed: 2016 May 12.
144    26th USENIX Security Symposium
USENIX Association
[32] SCHUSTER, F., TENDYCK, T., LIEBCHEN, C., DAVI,
L., SADEGHI, A.-R., AND HOLZ, T. Counterfeit object-
oriented programming: On the difficulty of preventing
code reuse attacks in C++ applications. In SP (2015).
[33] SHACHAM, H. The geometry of innocent flesh on the
bone: Return-into-libc without function calls (on the x86).
In CCS (2007).
[34] STEENSGAARD, B. Points-to analysis in almost linear
time. In POPL (1996).
[35] THALHEIM, J., BHATOTIA, P., AND FETZER, C. Inspec-
tor: Data provenance using intel processor trace (pt). In
ICDCS (2016).
[36] TICE, C., ROEDER, T., COLLINGBOURNE, P., CHECK-
OWAY, S., ERLINGSSON, Ú., LOZANO, L., AND PIKE,
G. Enforcing forward-edge control-flow integrity in gcc
& llvm. In USENIX Sec. (2014).
[37] VAN DER VEEN, V., ANDRIESSE, D., GÖKTA ¸S, E.,
GRAS, B., SAMBUC, L., SLOWINSKA, A., BOS, H.,
AND GIUFFRIDA, C. Practical context-sensitive CFI. In
CCS (2015).
[38] WHALEY, J., AND LAM, M. S. Cloning-based context-
sensitive pointer alias analysis using binary decision dia-
grams. In PLDI (2004).
[39] WILANDER, J., NIKIFORAKIS, N., YOUNAN, Y.,
KAMKAR, M., AND JOOSEN, W. RIPE: Runtime in-
trusion prevention evaluator. In ACSAC (2011).
[40] XIA, Y., LIU, Y., CHEN, H., AND ZANG, B. Cfimon:
Detecting violation of control flow integrity using perfor-
mance counters. In DSN (2012).
[41] ZHANG, C., WEI, T., CHEN, Z., DUAN, L., SZEKERES,
L., MCCAMANT, S., SONG, D., AND ZOU, W. Prac-
tical control flow integrity and randomization for binary
executables. In SP (2013).
[42] ZHANG, M., AND SEKAR, R. Control flow integrity for
COTS binaries. In Usenix Sec. (2013).
[43] ZHU, J., AND CALMAN, S. Symbolic pointer analysis
revisited. In PLDI (2004).
instrs := ops REGS, REGS, REGS | alloc REGS
| ld REGS, REGS | store REGS, REGS
| br REGS, REGS | call REGS | return
(1)
(2)
(3)
Figure 5: A space of instructions, Instrs, in a target lan-
guage. Instrs is defined over registers Regs and data oper-
ations Ops.
Appendix
A Language definition
In this section, we define the syntax (§A.1) and semantics (§A.2)
of programs in PITTYPAT’s target language.
A.1 Syntax
Figure 5 contains the syntax of a space of program instructions,
Instrs. An instruction may compute the value of an operation
in ops over values stored in registers and store the result in a
register, may allocate a fresh memory cell (Eqn. 1), may load a
value stored in the address in one operand register into a target
register, may store a value in an operand register at the address
stored in a target register (Eqn. 2), may test if the value in a
register is non-zero and if so transfer control to an instruction
at the address stored in an operand register, may perform an
indirect call to a target address stored in an operand, or may
return from a call (Eqn. 3). Although all operations are assumed
to be binary, when convenient we will depict operations as using
fewer registers (e.g., a copy instruction copy r0,r1 in §4.2).
A program is a map from instruction addresses to instructions.
That is, for space of instruction addresses IAddrs containing a
designated initial address ι ∈ IAddrs, the language of programs
is Lang = IAddrs → Instrs.
Instrs does not contain instructions similar to those in an
architecture with a complex instruction-set, which may, e.g., per-
form operations directly on memory. The design of PITTYPAT
directly generalizes to analyze programs that use such an instruc-
tion set. In particular, the actual implementation of PITTYPAT
monitors programs compiled for x86.
A.2 Semantics
Each program P ∈ Lang defines a language of sequences of