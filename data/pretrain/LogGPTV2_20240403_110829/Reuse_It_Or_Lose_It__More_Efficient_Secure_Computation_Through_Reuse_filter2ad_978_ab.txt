crypt the circuit and see what the intermediate values are
of the garbled function.
3. PARTIAL GARBLED CIRCUITS
We introduce the concept of partial garbled circuits (PGCs),
which allows the encrypted wire outputs from one SFE com-
putation to be used as inputs to another. This can be ac-
complished by mapping the encrypted output wire values to
valid input wire values in the next computation. In order to
better demonstrate their structure and use, we ﬁrst present
PGCs in a semi-honest setting, before showing how they can
aid us against malicious adversaries.
3.1 PGCs in the Semi-Honest Model
and wt−1
1
0
0 and wt
, and creates wires wt
In the semi-honest model, for each wire value, the gen-
erator can simply send two values to the evaluator, which
transforms the wire label the evaluator owns to work in an-
other garbled circuit. Depending on the point and permute
bit of the wire label received by the evaluator, she can map
the value from a previous garbled circuit computation to a
valid wire label in the next computation.
Speciﬁcally, for a given wire pair, the generator has wires
wt−1
1. Here, t refers
to a particular computation in a series, while 0 and 1 cor-
respond to the values of the point and permute bits of the
t − 1 values. The generator sends the values wt−1
0 and
1 ⊕ wt
wt−1
1 to the evaluator. Depending on the point and
permute bit of the wt−1
value she possesses, the evaluator
selects the correct value and then XORs her wt−1
with the
i ⊕ wt
(wt−1
i , the valid partial
input wire.
3.2 PGCs in the Malicious Model
i ) value, thereby giving her wt
0 ⊕ wt
i
i
In the malicious model we must allow the evaluation of a
circuit with partial inputs and veriﬁcation of the mappings,
while preventing a selective failure attack. The following fea-
tures are necessary to accomplish these goals:
1. Veriﬁable Mapping
The generator G is able to create a secure mapping from
a saved garbled wire value into a new computation that can
be checked by the evaluator E, without E being able to re-
verse the mapping. During the evaluation and check phase,
Figure 3: This ﬁgure shows how we create a single partial
input gate for each input bit for each circuit and then link
the partial input gates to the remainder of the circuit.
E must be able to verify the mapping G sent. G must have
either committed to the mappings before deciding the parti-
tion of evaluation and check circuits, or never learned which
circuits are in the check versus the evaluation sets.
2. Partial Generation and Partial Evaluation
G creates the garbled gates necessary for E to enter the
previously output intermediate encrypted values into the
next garbled circuit. These garbled gates are called partial
input gates. As shown in Figure 3 each garbled circuit is
made up of two pieces: the partial input gates and the re-
mainder of the garbled circuit.
3. Revealing Incorrect Transformations
Our last goal is to let E inform G that incorrect values
have been detected. Without a way to limit leakage, G could
gain information based on whether or not E informs G that
she caught him cheating. This is a selective failure attack
and is not present in our protocol.
4. PARTIALGC PROTOCOL
We start with the CMTB protocol and add cut-and-choose
operations from sS13 before introducing the mechanisms
needed to save and reuse values. We defer to the original
papers for full details of the outsourced oblivious trans-
fer [8] and the generator’s input consistency check [38] sub-
protocols that we use as primitives in our protocol.
Our system operates in the same threat model as CMTB
(see Section 2.1.1): we are secure against a malicious adver-
sary under the assumption of non-collusion. A description of
the CMTB protocol is available in Appendix A.
4.1 Preliminaries
There are three participants in the protocol:
Generator – The generator is the party that generates
the garbled circuit for the 2P-SFE.
Evaluator –The evaluator is the other party in the 2P-
SFE, which is outsourcing computation to a third party, the
cloud.
Cloud – The cloud is the party that executes the garbled
circuit outsourced by the evaluator.
Notation
Ci - The ith circuit.
CKeyi - Circuit key used for the free XOR optimization [25].
The key is randomly generated and then used as the diﬀer-
ence between the 0 and 1 wire labels for a circuit Ci.
CSeedi - This value is created by the generator’s PRNG and
is used to generate a particular circuit Ci.
P Out#i,j - The partial output values are the encrypted wire
values output from an SFE computation. These are encrypted
garbled circuit values that can be reused in another garbled
circuit computation. # is replaced in our protocol descrip-
tion with either a 0, 1, or x, signifying whether it represents a
0, 1, or an unknown value (from the cloud’s point of view). i
denotes the circuit the P Out value came from and j denotes
the wire of the P Outi circuit.
P In#i,j - The partial input values are the re-entered POut
values after they have been obfuscated to remove the circuit
key from the previous computation. These values are input
to the partial input gates. #, i, and j, are the same as above.
GIn#i,j - The garbled circuit input values are the results
of the partial input gates and are input into the remaining
garbled circuit, as shown in Figure 3. #, i, and j, are the
same as above.
Partial Input Gates - These are garbled gates that take in
P In values and output GIn values. Their purpose is to
transform the PIn values into values that are under CKeyi
for the current circuit.
4.2 Protocol
Each computation is self-contained; other than what is
explicitly described as saved in the protocol, each value or
property is only used for a single part of the computation
(i.e. randomness is diﬀerent across computations).
Algorithm 0: PartialComputation
Input : Circuit File, Bit Security, Number of Circuits, Inputs,
Is First Execution
Output: Circuit File Output
Cut_and_Choose(is First Execution)
Eval Garbled Input ← Evaluator_Input(Eval Select Bits,
Possible Eval Input)
Generator_Input_Check(Gen Input)
Partial Garbled Input ← Partial_Input(Partial Outputtime−1)
Garbled Output, Partial Output ←
Circuit_Execution(Garbled Input (Gen, Eval, Partial))
Circuit_Output(Garbled Output)
Partial_Output(Partial Output)
Common Inputs: The program circuit ﬁle, the bit level
security, the circuit level security (number of circuits) S,
and encryption and commitment functions.
Private Inputs: The evaluator’s input evlInput and gen-
erator’s input genInput.
Outputs: The evaluator and generator can both receive gar-
bled circuit outputs.
Phase 1: Cut-and-choose
We modify the cut-and-choose mechanism described in
sS13 as we have an extra party involved in the computation.
In this cut-and-choose, the cloud selects which circuits are
evaluation circuits and which circuits are check circuits,
circuitSelection = rand()
where circuitSelection is a bit vector of size S; N evaluation
circuits and S−N check circuits are selected where N = 2
5 S.
The generator does not learn the circuit selection.
The generator generates garbled versions of his input and
circuit seeds for each circuit. He encrypts these values using
unique 1-time XOR pad keys. For 0 ≤ i < S,
CSeedi = rand()
garbledGenInputi = garble(genInput, rand())
checkKeyi = rand()
evlKeyi = rand()
encSeedIni = CSeedi ⊕ evlKeyi
encGarbledIni = garbledGenInputi ⊕ checkKeyi
InputGarbled Circuit Input 0Garbled Circuit Input NInputPartial input Gate 0Partial input Gate N......Remainderof Garbled CircuitANDORAlgorithm 1: Cut and Choose
Input : is First Execution
if is First Execution then
circuitSelection ← rand() // bit-vector of size S
5 S // Number of evaluation circuits
N ← 2
//Generator creates his garbled input and circuit seeds for each
circuit
for i ← 0 to S do
CSeedi ← rand()
garbledGenInputi ← garble(genInput, rand())
//generator creates or loads keys
if is First Execution then
checkKeyi ← rand()
evlKeyi ← rand()
else
loadKeys();
checkKeyi ← hash(loadedCheckKeyi)
evlKeyi ← hash(loadedEvlKeyi)
// encrypts using unique 1-time XOR pads
encSeedIni ← CSeedi ⊕ evlKeyi
encGarbledIni ← garbledGenInputi ⊕ checkKeyi
if is First Execution then
// generator oﬀers input OR keys for each circuit seed
selectedKeys ←
OT (circuitSelection, {evlKey, checkKey})
else
loadSelectedKeys()
for i ← 0 to S do
genSendT oEval(hash(checkKeyi),
hash(evaluationKeyi))
for i ← 0 to S do
cloudSendT oEval(hash(selectedKeyi), isCheckCircuiti)
// If all values match, the evaluator learns split, else abort.
for i ← 0 to S do
j ← isCheckCircuiti
correct ← (recievedGeni,j == recievedEvli)
if !correct then
abort()
The cloud and generator perform an oblivious transfer where
the generator oﬀers up decryption keys for his input and
decryption keys for the circuit seed for each circuit. The
cloud can select the key to decrypt the generator’s input or
the key to decrypt the circuit seed for a circuit but not both.
For each circuit, if the cloud selects the decryption key for
the circuit seed in the oblivious transfer, then the circuit is
used as a check circuit.
selectedKeys = OT (circuitSelection,{evlKey, checkKey})
If the cloud selects the key for the generator’s input then
a given circuit is used as an evaluation circuit. Otherwise,
the key for the circuit seed was selected and the circuit is
a check circuit. The decryption keys are saved by both the
generator and cloud in the event a computation uses saved
values from this computation.
The generator sends the encrypted garbled inputs and
check circuit information for all circuits to the cloud. The
cloud decrypts the information he can decrypt using its keys.
The evaluator must also learn the circuit split. The generator
sends a hash of each possible encryption key the cloud could
have selected to the evaluator for each circuit as an ordered
pair. For 0 ≤ i < S,
genSend(hash(checkKeyi), hash(evaluationKeyi))
The cloud sends a hash of the value received to the evaluator
for each circuit. The cloud also sends bits to indicate which
circuits were selected as check and evaluation circuits to the
evaluator. For 0 ≤ i < S,
cloudSend(hash(selectedKeyi), isCheckCircuiti)
The evaluator compares each hash the cloud sent to one of
the hashes the generator sent, which is selected by the circuit
selection sent by the cloud. For 0 ≤ i < S,
j = isCheckCircuiti
correct = (receivedGeni,j == receivedEvli)
If all values match, the evaluator uses the isCheckCircuiti
to learn the split between check and evaluator circuits. Oth-
erwise the evaluator safely aborts.
We only perform the cut-and-choose oblivious transfer for
the initial computation. For any subsequent computations,
the generator and evaluator hash the saved decryption keys
and use those hashes as the new encryption and decryption
keys. The circuit split selected by the cloud is saved and
stays the same across computations.
Phase 2: Oblivious Transfer
Algorithm 2: Evaluator Input
Input : Eval Select Bits, Possible Eval Input
Output: Eval Garbled Input
// cloud gets selected input wires // generator oﬀers both
possible input wire values for each input wire; evaluator selects
its input
outSeeds = BaseOOT (bitsEvl, possibleInputs).
// the generator sends unique IKey values for each circuit to the
evaluator
for i ← 0 to S do
genSendT oEval(IKeyi)
// the evaluator sends IKey values for all evaluation circuits to
the cloud
for i ← 0 to S do
if !isCheckCircuit(i) then
EvalSendT oCloud(IKeyi)
// cloud uses this to learn appropriate inputs
for i ← 0 to S do
for j ← 0 to len(evlInputs) do
if !isCheckCircuit(i) then
inputEvlij ← hash(IKeysi, outSeedsj )
return inputEvl
We use the base outsourced oblivious transfer (OOT) of
CMTB. In this transfer the generator inputs both possible
input wire values for each evaluator’s input wire while the
evaluator inputs its own input. After the OOT is performed,
the cloud has the selected input wire values, which represent
the evaluator’s input.
As with CMTB, which uses the results from a single OOT
as seeds to create the evaluator’s input for all circuits, the
cloud in our system also uses seeds from a single base OT
(called “BaseOOT” below) to generate the input for the eval-
uation circuits. The cloud receives the seeds for each input
bit selected by the evaluator.
outSeeds = BaseOOT (evlInputSeeds, evlInput).
The generator creates unique keys, IKey, for each circuit
and sends each key to the evaluator. The evaluator sends the
keys for the evaluation circuits to the cloud. The cloud then
uses these values to attain the evaluator’s input. For 0 ≤ i <
S, for 0 ≤ j < len(evlInputs) where !isCheckCircuit(i),
inputEvlij = hash(IKeyi, outSeedsj)
Phase 3: Generator’s Input Consistency Check
Algorithm 3: Generator Input Check
Input : Generator Input
// The cloud takes a hash of the generator’s input or each
evaluation circuit for i ← 0 to S do
if isCheckCircuit(i) then
ti ← U HF (garbledGenInputi)
//If a single hash is diﬀerent then the cloud knows the generator
tried to cheat.
correct ← ((t0 == t1)&(t0 == t2)& . . . &(t0 == tN−1))
if !correct then
abort()
We use the input consistency check of sS13. In this check, a