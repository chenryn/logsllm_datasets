# 看！显示的编码是否与上面相同呢？赶紧测试看看！
一般而言，每个系统里面的文件内容大概都不相同，例如你的系统中的 /etc/passwd 这个登陆信息档与我的一定不一样，因为我们的使
用者与密码、 Shell 及主文件夹等大概都不相同，所以由 md5sum 这个文件指纹分析程序所自行计算出来的指纹表当然就不相同啰！
好了，那么如何应用这个东西呢？基本上，你必须要在你的 Linux 系统上为你的这些重要的文件进行指纹数据库的创建 （好像在做户口
调查！），将下面这些文件创建数据库：
/etc/passwd
/etc/shadow （假如你不让使用者改密码了）
/etc/group
/usr/bin/passwd
/sbin/rpcbind
/bin/login （这个也很容易被骇！）
/bin/ls
/bin/ps
/bin/top
这几个文件最容易被修改了！因为很多木马程序执行的时候，还是会有所谓的“执行序, PID”为了怕被 root 追查出来，所以他们都会修改
这些检查调度的文件，如果你可以替这些文件创建指纹数据库 （就是使用 md5sum 检查一次，将该文件指纹记录下来，然后常常以 shell script
的方式由程序自行来检查指纹表是否不同了！），那么对于文件系统会比较安全啦！
源代码其实大多是纯文本文件，需要通过编译器的编译动作后，才能够制作出 Linux 系统能够认识的可执行的 binary file ；
开放源代码可以加速软件的更新速度，让软件性能更快、漏洞修补更实时；
在 Linux 系统当中，最标准的 C 语言编译器为 gcc ；
在编译的过程当中，可以借由其他软件提供的函数库来使用该软件的相关机制与功能；
为了简化编译过程当中的复杂的指令输入，可以借由 make 与 makefile 规则定义，来简化程序的更新、编译与链接等动作；
Tarball 为使用 tar 与 gzip/bzip2/xz 压缩功能所打包与压缩的，具有源代码的文件；
一般而言，要使用 Tarball 管理 Linux 系统上的软件，最好需要 gcc, make, autoconfig, kernel source, kernel header 等前驱软件才行，所
以在安装 Linux 之初，最好就能够选择 Software development 以及 kernel development 之类的群组；
函数库有动态函数库与静态函数库，动态函数库在升级上具有较佳的优势。动态函数库的扩展名为 *.so 而静态则是 *.a ；
patch 的主要功能在更新源代码，所以更新源代码之后，还需要进行重新编译的动作才行；
可以利用 ldconfig 与 /etc/ld.so.conf /etc/ld.so.conf.d/*.conf 来制作动态函数库的链接与高速缓存！
通过 MD5/SHA1/SHA256 的编码可以判断下载的文件是否为原本厂商所释出的文件。
实作题部分：
请前往企鹅游戏网站 http://xpenguins.seul.org/ 下载 xpenguins-2.2.tar.gz 源代码文件，并安装该软件。安装完毕之后，请在 GNOME 图形
接口执行 xpenguins ， 看看有没有出现如同官网上面出现的小企鹅？（你有可能需要安装 yum install libX*-devel 才行喔）
情境仿真题部分：
请依照下面的方式来创建你的系统的重要文件指纹码，并每日比对此重要工作。
1. 将 /etc/{passwd,shadow,group} 以及系统上面所有的 SUID/SGID 文件创建文件列表，该列表文件名为“ important.file ”；
[root@study ~]# ls /etc/{passwd,shadow,group} > important.file
[root@study ~]# find /usr/sbin /usr/bin -perm /6000 >> important.file
2. 通过这个文件名列表，以名为 md5.checkfile.sh 的文件名去创建指纹码，并将该指纹码文件“ finger1.file ”设置成为不可修改的属
性；
[root@study ~]# vim md5.checkfile.sh
#!/bin/bash
for filename in $（cat important.file）
do
md5sum $filename >> finger1.file
done
[root@study ~]# sh md5.checkfile.sh
[root@study ~]# chattr +i finger1.file
3. 通过相同的机制去创建后续的分析数据为 finger_new.file ，并将两者进行比对，若有问题则提供 email 给 root 查阅：
[root@study ~]# vim md5.checkfile.sh
#!/bin/bash
if [ "$1" == "new" ]; then
for filename in $（cat important.file）
do
md5sum $filename >> finger1.file
done
echo "New file finger1.file is created."
exit 0
fi
if [ ! -f finger1.file ]; then
echo "file: finger1.file NOT exist."
exit 1
fi
[ -f finger_new.file ] && rm finger_new.file
for filename in $（cat important.file）
do
md5sum $filename >> finger_new.file
done
testing=$（diff finger1.file finger_new.file）
if [ "$testing" != "" ]; then
diff finger1.file finger_new.file | mail -s 'finger trouble..' root
fi
[root@study ~]# vim /etc/crontab
30 2 * * * root cd /root; sh md5.checkfile.sh
如此一来，每天系统会主动的去分析你认为重要的文件之指纹数据，然后再加以分析，看看有没有被更动过。 不过，如果该变动是
正常的，例如 CentOS 自动的升级时，那么你就得要删除 finger1.file ， 再重新创建一个新的指纹数据库才行！否则你会每天收到有
问题信件的回报喔！
[1]GNU 的 make 网页：http://www.gnu.org/software/make/manual/make.html
几种常见加密机制的全名：
md5 （Message-Digest algorithm 5） http://en.wikipedia.org/wiki/MD5
sha （Secure Hash Algorithm） http://en.wikipedia.org/wiki/SHA_hash_functions
des （Data Encryption Standard） http://en.wikipedia.org/wiki/Data_Encryption_Standard
洪朝贵老师的 C 程序语言：http://www.cyut.edu.tw/~ckhung/b/c/
2002/08/21：第一次完成
2003/02/11：重新编排与加入 FAQ
2004/03/25：原本是 Tarball 与 RPM ，本日开始将 Tarball 与 RPM 分开说明与讲解（后续会花好几天喔！），
最重要的是 Source code 的说明，并提到相关的 gcc compile 功能等等！
2004/04/10：经历了当兵中的无奈生活，终于将这篇给他完工了～（当时的鸟哥在将军渔港与青山港～）
2005/09/30：旧版文章 （Tarball 与 RPM 的简单说明） 移动到 此处 。
2005/10/01：将风格作个转变之外，也将一些测试移转到 FC4 上面进行！
2008/01/10：感谢网友 ayttk 的说明，原本的 make 语法网页已经移动到其他地方了，请参考 这里。
2009/06/04：将基于 FC4 撰写的文章移动到 此处
2009/06/20：增加一个小练习，需要使用到 X software development 的软件群组喔！
2009/09/15：加入一个情境仿真，其实有点功力练功练功而已的习题啰！
第第第第二二二二十十十十二二二二章章章章、、、、软软软软件件件件安安安安装装装装 RRPPMM,, SSRRPPMM 与与与与 YYUUMM
最近更新日期：2015/10/16
蘡烚伣瓌渴亇瞥轿蟰挽亚纺譵厓争儛暭𫝭凚劺瘨譢缒，仪宝串 Linux distribution 瘨卵峄哪有讘，冽暭挽亚筅玪² 断瘨闲赖， 歹窃² 旓歳Ð 乞邡亡轿蟰渴亇瞥
纺譵瘨。夦杀股壃宪挽亚頨僬苏皓厂瘨砐亚³ 摱伀粟纃­ 霆纺譵夡懱卵峄瘨谪， ² 寕股壃譍皓厂瘨 distribution 儛暭婴侥 膘瘨挽亚毁曐去？夦杀儱刭­ 笤断瘨奶衩/
禟阈/筅玪竭曞凚瘨谪， 宝串挽亚捋筅寕亡笤断瘨垦。暭载祱Â 褣去？暭瘨，遇寕旓 RPM ³ YUM 载Ê Ð 夡瓌瘨吾吾。 敩烚载û 夡瓌，憵亐廷烚² 股钽轫嬊丄曞亡唔！𫎦
糋有卦变卦变！
在前一章我们提到以源代码的方式来安装软件，也就是利用厂商释出的 Tarball 来进行软件的安装。不过，你应该很容易发现，那就是
每次安装软件都需要侦测操作系统与环境、设置编译参数、实际的编译、 最后还要依据个人喜好的方式来安装软件到定位。这过程是真的很麻
烦的，而且对于不熟整个系统的朋友来说，还真是累人啊！
那有没有想过，如果我的 Linux 系统与厂商的系统一模一样，那么在厂商的系统上面编译出来的可执行文件， 自然也就可以在我的系统
上面跑啰！也就是说，厂商先在他们的系统上面编译好了我们使用者所需要的软件， 然后将这个编译好的可执行的软件直接释出给使用者来安
装，如此一来，由于我们本来就使用厂商的 Linux distribution ，所以当然系统 （硬件与操作系统） 是一样的，那么使用厂商提供的编译过的可
可执行文件就没有问题啦！ 说的比较白话一些，那就是利用类似 Windows 的安装方式，由程序开发者直接在已知的系统上面编译好，再将该
程序直接给使用者来安装，如此而已。
那么如果在安装的时候还可以加上一些与这些程序相关的信息，将他创建成为数据库，那不就可以进行安装、反安装、 升级与验证等等
的相关功能啰 （类似 Windows 下面的“新增移除程序”）？确实如此，在 Linux 上面至少就有两种常见的这方面的软件管理员，分别是 RPM 与
Debian 的 dpkg 。我们的 CentOS 主要是以 RPM 为主，但也不能不知道 dpkg 啦！所以下面就来约略介绍一下这两个玩意儿。
由于自由软件的蓬勃发展，加上大型 Unix-Like 主机的强大性能，让很多软件开发者将他们的软件使用 Tarball 来释出。 后来 Linux 发展
起来后，由一些企业或社群将这些软件收集起来制作成为 distributions 以发布这好用的 Linux 操作系统。但后来发现到，这些 distribution 的软
件管理实在伤脑筋， 如果软件有漏洞时，又该如何修补呢？使用 tarball 的方式来管理吗？又常常不晓得到底我们安装过了哪些程序？ 因此，
一些社群与企业就开始思考 Linux 的软件管理方式。
如同刚刚谈过的方式，Linux 开发商先在固定的硬件平台与操作系统平台上面将需要安装或升级的软件编译好， 然后将这个软件的所有
相关文件打包成为一个特殊格式的文件，在这个软件文件内还包含了预先侦测系统与相依软件的脚本， 并提供记载该软件提供的所有文件信息
等。最终将这个软件文件释出。用户端取得这个文件后，只要通过特定的指令来安装， 那么该软件文件就会依照内部的脚本来侦测相依的前驱
软件是否存在，若安装的环境符合需求，那就会开始安装， 安装完成后还会将该软件的信息写入软件管理机制中，以达成未来可以进行升级、
移除等动作呢。
目前在 Linux 界软件安装方式最常见的有两种，分别是：
dpkg：
这个机制最早是由 Debian Linux 社群所开发出来的，通过 dpkg 的机制， Debian 提供的软件就能够简单的安装起来，同时还能提供安装
后的软件信息，实在非常不错。 只要是衍生于 Debian 的其他 Linux distributions 大多使用 dpkg 这个机制来管理软件的， 包括 B2D,
Ubuntu 等等。
RPM：
这个机制最早是由 Red Hat 这家公司开发出来的，后来实在很好用，因此很多 distributions 就使用这个机制来作为软件安装的管理方式。
包括 Fedora, CentOS, SuSE 等等知名的开发商都是用这咚咚。
如前所述，不论 dpkg/rpm 这些机制或多或少都会有软件属性相依的问题，那该如何解决呢？ 其实前面不是谈到过每个软件文件都有提
供相依属性的检查吗？那么如果我们将相依属性的数据做成列表， 等到实际软件安装时，若发生有相依属性的软件状况时，例如安装 A 需要