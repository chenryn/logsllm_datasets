]
[
More precisely, we run two arguments, one for [A]w = [t
] and
]. The messages [u(cid:0)1] and [u1] are the sums of
one for [H ]r = [t
the messages which individual protocols would send, e.g. [u(cid:0)1] =
[A2]w1 + [H2]r1. Concretely
′′
′′
(cid:0)1
(cid:0)1
u
u
′′
′′
u
u
1
1
′′
(cid:6)1] are uniformly random in every round,
′′
(cid:6)1] is. In the base case of the recursion, i.e. small n, the
′
(cid:0)1
u
′
u
1
This ensures that the [u
because [u
A1w2
A2w1
′
(cid:0)1
u
′
u
1
H1r2
H2r1
u(cid:0)1
u1
[
]
[
]
[
]
[
=
=
=
+
;
;
]
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2107prover proves [A]w + [H ]r = [t] in zero-knowledge, using (for
concreteness) Protocol (cid:6)std.
To keep our protocol modular and comprehensible, we split it
into two steps.
Protocol B.1 (LMPAalmSnd). The following is a protocol to prove
9w : [t (0)] = [A]w, using testing distributions χm+1 resp.eχ2k(cid:0)1
(resp. χ (β )). witheχ3, χ (β ) as in Protocol LMPAnoZK. Furthermore,
we require that x   χm+1 satisfies xi , 0 for all i.
Common input is ([A]; [t (0)]) 2 Gm(cid:2)n (cid:2) Gn and some h 2 Gn
(typically derived from the CRS when this protocol is used as a
subprotocol). We assume n = 2ℓ > 4. Moreover, we let [H (i)] 2
Gm(cid:2)n for i = 1; : : : ; m, be defined as the matrix with [h] in the i-th
row and zeroes elsewhere, i.e. [H (i)] = ei [h]. We use a superscript
0, e.g. [H (0)] B [A], for terms related to [A]. The prover’s witness
is some w 2 Fn
(cid:15) P ! V: (Step 1: Prepare masking.) Pick r (i)   Mn (cid:20)
Fn
p and compute [t (i)] = [H (i)]r (i). Send [t (i)] for i =
1; : : : ; m.
(cid:15) V ! P: (Step 2: Random linear combination.) Pick and send
x   χm+1. The statement we prove is now effectively
p (also written r (0)).
[AjH (1)j : : : jH (m)]
'›››« x0w
:::
x1r (1)
“ﬁﬁﬁ‹ = [t] B
∑
i
xi [t (i)]:
(i)
ℓ ],
(i)
ℓ .
(i)
j
(i)
1
∑
2 Gm(cid:2)n/2. Compute [uℓ] =
For simplicity, the prover redefines r (i) B xir (i) for i =
0; : : : ; m.
(cid:15) P ! V: (Step 3: Begin the shrinking AoK.) Let [H (i)] =
(i)
m
2 ] with H
; H
i=0[u
[H
(i)
(i)
j(cid:0)i=ℓ[H
ℓ ] is computed as usual, i.e. [u
where [u
ℓ ]r
Send [uℓ] for ℓ = (cid:6)1.
⊤
(cid:15) P ! V: As in LMPAnoZK, compute w = x
⊤
∑
(cid:15) V ! P: Pick z  eχ3 (with associated x; y). Send (x; y; z).
∑
∑
andbr (i) = x
∑
[bH (i)] =
and [bA] = x
∑
j xjwi
j xj [Aj ],
ℓ zjuℓ, for the re-
], and [t] = z
⃗w =
[ ⃗A] =
⊤
u =
(i)
ℓ ] =
⃗r (i) =
(i)
j
∑
j xj [H
j xjr
(i)
j
⊤
duced statement (which V also computes).
If n > 4, engage recursively in the AoK for this statement,
i.e. goto Step 3. If n (cid:20) 4, engage in (for concreteness) Proto-
col (cid:6)std to prove the statement.
)
(
It is easy to check that Protocol B.1 is complete.
Lemma B.2. Protocol LMPAalmSnd has µ-special soundness (with
µ = (m + 1; 4; : : : ; 4; 2)) for finding a preimage ⃗v 2 (Fn
p )m (uncon-
ditionally) with [AjH (1)j : : : jH (m)]
= [t (0)], or a non-trivial
′(i)] consists only
′(1)j : : : jH
kernel element of [AjH
of the non-zero components of [H (i)]. (It is easy to find non-trivial
kernel elements if [h] has zeroes, so we exclude them) The protocol
inherits short-circuit extraction with µ
′(m)]. Here, [H
= (m + 1; 2; : : : ; 2; 2).
v0:::
vm
′
Note Lemma B.2 does not assert a witness w 2 Fn
p for [A]w =
[t (0)]. That will be assured in follow-up step.
Proof. We only sketch the proof. Let treeµ be a good µ-tree
of transcripts. First of all, we can extract the base subprotocol of
tocW from Lemma 3.6.) We find [AjH (1)j : : : jH (m)]Vi = [t]X. Mul-
Step 3. Using these witnesses, we can extract the linearly com-
bined argument essentially as in Lemma 3.6.¹² Now we extract
Step 2. From Step 3, we have m + 1 preimages ⃗vi 2 (Fm
p )n with
[AjH (1)j : : : jH (m)]⃗vi = [T ]xi where [T ] = [t (0); : : : ; t (m)]. Ar-
range matrices V = (⃗v0; : : : ; ⃗vm ) and X as usual. (V corresponds
(cid:0)1, we find preimages for each [t (i)], in particular
□
To prove zero-knowledge of Protocol LMPAalmSnd, we first show
that the prover’s messages [uℓ] in the recursive steps are almost al-
ways uniformly distributed. This yields statistical HVZK via straight-
forward simulation.
tiplying with X
a preimage for [t (0)].
As a preparation, note following (easy) linear algebra facts:
Lemma B.3. Consider Protocol B.1 (LMPAalmSnd). Suppose that
(at least) all components of [h] in Mn are distributed uniformly ran-
dom (and the rest may be 0). Suppose that for any x   χm+1 we
have xi , 0 for all i.
Then, in this argument system, with probability about O(log2(n)k)/p
=
r1
r2
)
)
(
0
H2
′′(cid:0)1
u
′′
u
1
)(
′
1 + r
( br
the vector U consisting of messages [uℓ] of all recursive rounds is uni-
formly random. The randomness is over [h], the challenges and the
prover’s randomness.
We give a short proof intuition for the case m = 1. So we have
[A]; [H ] 2 G1(cid:2)n. Intuitively, we need 2 Fp-elements of random-
ness in each round to mask [u(cid:6)1]. Moreover, these two terms of
randomness must be split so that one is in the first half r1 of r,
and one in the second half r2, since [uj(cid:0)i ] = [Hi ]rj. The mask-
ing sets Mn are built exactly as such, see Fig. 2. Moreover, to al-
low inductive reasoning, the masking sets are built in such a way
that even when “removing” two terms of randomness (say r1;0
′
2 is distributed according to Mn/2. Evi-
and r2;1), the sum r
dently, we need xi , 0 to prevent loss of randomness by multiplica-
tion with 0. More precisely, we want surjectivity of the “transition
when restricted to M2n (cid:20) F2n
map”,
in each step. See [31] for a full proof.
ε 2 O(2 log2(n))/p.
We sketch HVZK simulation: For a recursive step, the HVZK
simulator picks [uℓ]   Gm for ℓ , 0 and computes the uniquely
defined [u0] which makes the verifier accept that round. For Step 1
note that [t (i)] = [eit (i)] (i , 0) and hence [t (0)] and [t] (which is
[u0] of the last recursion) uniquely define all [t (i)]. Since the mes-
sages [uℓ] are uniformly distributed in an honest execution with
probability O(2 log2(n)2)/p, our claim follows.
Lemma B.4. Protocol LMPAZK is ε-statistical zero-knowledge for
x1 idn x2 idn
H2
0
Now, we finish the protocol and ensure that extraction yields
a witness w for [A]w = [t] as we desired. For this, we use a dual
= 0 for i (cid:21) 1 (with notation as in
testing distribution to ensure vi
Lemma B.2).
Protocol B.5 (LMPAZK). The following is a protocol to prove9w :
[A]w = [t]. We use Protocol B.1 (LMPAalmSnd) as a subprotocol
¹² Indeed, after suitably permuting the columns of [AjH (1)j : : : jH (m)], witness,
and randomness, the exact same reasoning as in Lemma 3.6 works for the recursive
step.
p
!
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2108with the same testing distributions χm+1 resp.eχ3 (resp. χ (β )). By
_
dim(Mn )+1, we refer to the dual testing distribution of χdim(Mn )+1
χ
as in Definition A.2. In particular, we require that the first compo-
nent x0 of x   χdim(Mn )+1 is always 1.
Common input is ([A]; [t]) 2 Gm(cid:2)n(cid:2)Gn We assume n = 2ℓ > 4.
The prover’s witness is some w 2 Fn
p (also written r (0)). The CRS
contains randomly (independently) chosen [q]   G1(cid:2)dim(Mn )+1.
(cid:15) V ! P: (Step 0: Setup of a “new” crs.) V picks and sends
_
M B Mx   χ
dim(Mn )+1 (as described in Definition A.2).
h] B [q]M 2 G1(cid:2)dim(Mn ). They de-
fine [h] 2 Gn so that the components Mn (cid:18) f0; : : : ; n(cid:0)1g of
h] (in order). All components of [h] not
in Mn are set to 0. See Fig. 2 for a pictorial description of
(non-)zero components of [h].
(cid:15) P $ V: Engage in Protocol LMPAalmSnd for 9w : [A]w =
[t] with parameters (in particular [h]) as above.
(cid:15) Both parties compute [e
[h] correspond to [e
Lemma B.6. Protocol LMPAZK has µ-special soundness (with µ =
(dim(Mn ) + 1; m + 1; 4; : : : ; 4; 2)) for finding a witness w 2 Fn
p
⊤
with [A]w = [t], or a non-trivial kernel element of [Aje
mq]
(equivalently [Aj diag(q; : : : ; q)]). Moreover, the protocol has short-
circuit extraction with µ
= (1; m + 1; 2; : : : ; 2; 2).
⊤
1 qj : : : je
′
There are reasons to suspect that LMPAZK may have uncondi-
tional extraction, i.e. it is proof of knowledge. But we could not
(dis)prove it yet.
p
p ; v 2 Fdim(M)
∩dim(M)
Proof. By extracting LMPAalmSnd i.e. applying Lemma B.2, we
can find preimages ⃗u 2 (Fn
p )m+1. (Also, we inherit short-circuit
and unconditional extraction.) Let [h] and [H (i)] = ei [h] be as
constructed in the protocols.
For simplicity, we first consider the case m = 1 and remove all 0-
columns of [H ]. In other words, we consider [AjqM] 2 G1(cid:2)n+dim(M).
We know (i.e. extracted) some w 2 Fn
such that
[A]w + [H ]v = [t]. We have to show that [A]w = [t], or we
find a non-trivial element in the kernel of [Ajq]. In the case that
[H ]v = 0, w is the witness we want. So suppose that [H ]v , 0.
In that case, we guarantee short-circuit extraction. So, suppose we
have dim(M) + 1 transcripts with “independent” challenge matri-
im(Mi ) = f0g, which
ces Mi. (Remember that this means
is equivalent to xi being linearly independent since Mi = Mxi .) By
subtracting the 0-th witness from the i-th witness, we find [A](wi(cid:0)
w0) + [q](Mivi (cid:0) M0v0). Thus, if Mivi (cid:0) M0v0 , 0, we obtain a