title:InvisiType: Object-Oriented Security Policies
author:Jiwon Seo and
Monica S. Lam
InvisiType: Object-Oriented Security Policies
Jiwon Seo
Monica S. Lam
Computer Systems Laboratory
Stanford University
Stanford, CA 94305
{jiwon, lam}@stanford.edu
Abstract
1
Introduction
Many modern software platforms today,
including
browsers, middleware server architectures, cell phone op-
erating systems, web application engines, support third-
party software extensions. This paper proposes InvisiType,
an object-oriented approach that enables platform develop-
ers to efﬁciently enforce ﬁne-grained safety checks on third-
party extensions without requiring their cooperation. This
allows us to harness the true power of third-party software
by giving it access to sensitive data while ensuring that it
does not leak data.
In this approach, a platform developer encapsulates all
safety checks in a policy class and selectively subjects ob-
jects at risk to these policies. The runtime enforces these
policies simply by changing the types of these objects dy-
namically. It uses the virtual method dispatch mechanism
to substitute the original methods and operations with code
laced with safety checks efﬁciently. The runtime hides the
type changes from application code so the original code can
run unmodiﬁed.
We have incorporated the notion of InvisiType into the
Python language. We have applied the technique to 4 real-
world Python web applications totaling 156,000 lines of
code. InvisiType policies greatly enhance the security of the
web applications, including MoinMoin, a popular, 94,000-
line Wiki Engine. MoinMoin has a large number of third-
party extensions, which makes security enforcement impor-
tant. With less than 150 lines of Python code, we found 16
security bugs in MoinMoin. This represents a signiﬁcant
reduction in developers’ effort from a previous proposal,
Flume, which required 1,000 lines of C++ code and modi-
ﬁcations to 1,000 lines of Python code.
Our InvisiType policies successfully found 19 cross-site
scripting vulnerabilities and 6 access control errors in total.
The overhead of applying the policies is less than 4 percent,
indicating that the technique is practical.
Third-party software extensions play an important role in
many software frameworks today. On the client side, impor-
tant extensions include ActiveX, Javascript and Java applets
embedded in web pages. Many “middleware” server plat-
forms provide a base on which developers can build their
applications: examples include servlets on web servers and
extensions in wiki engines. Finally, there is an emerging
class of server platforms that let end users supply their own
code:
these include application engines at Google, Face-
book and MySpace. This paper describes a new object-
oriented approach to allow software platform developers to
efﬁciently impose ﬁne-grained security policies on third-
party software as well as platform software.
1.1 Motivation
Third-party code adds greatly to the difﬁculty of securing
software. Even if we require that third-party code be signed
by a trusted party, it is likely that third-party software has
more security vulnerabilities than the underlying software
platform. Not only are third-party coders typically less ex-
perienced, they may be ignorant of the implicit principles
used in the design of the platform. As a case in point, exten-
sions for the popular MoinMoin Wiki system often neglect
access control checks for Wiki pages.
In addition, third-
party code seldom goes through the same level of review
and testing as the platform itself.
Measures used today to guard against malicious software
are too crude for third-party software extensions, which are
responsible for providing much of the user-desired features
on a platform. Android isolates applications from each
other by executing them in different virtual machines. The
Google App Engine constrains direct operating system ac-
cesses and limits resource usage with a quota system. The
Java Development Kit (JDK) uses sand-boxing to restrict
unsigned code from accessing certain system resources, and
allows permissions to be granted to classes and objects be-
longing to protection domains [10]. After permissions are
granted however, JDK users do not have control over how
the resources are used or what objects are accessible. For
example, once network access is granted, it is impossible to
enforce that only non-sensitive data are sent over the net-
work.
1.2 Object-Oriented Safety Checks
It has been found that software often have implicit de-
sign rules that govern the integrity of the program. Take for
example SQL injection, an important class of security vul-
nerabilities. SQL injection [1, 16] can be eliminated by sim-
ply disallowing access of the database with tainted strings,
input strings that have not been checked for malicious con-
tents. A number of static and dynamic techniques have been
proposed to ﬁnd such kinds of errors in programs automat-
ically [11, 12, 18]. A promising approach is to allow appli-
cation writers to deﬁne application-speciﬁc safety checks.
Aspect programming [14, 15] allows programmers to write
down codes related to, say, a safety check in one place, and
many lines of code scattered throughout the program may
be changed syntactically [19, 20].
Going beyond a syntactic rewrite system, our goal is to
extend the principles and beneﬁts of object-oriented pro-
gramming to safety checks. Safety checks of primitive
types, such as null pointer and array bound checks, have
been built into high-level programming languages. They
improve software robustness as well as relieve programmers
of the burden of inserting the error checking code. Analo-
gously, classes often have class-speciﬁc safety checks, such
as the prevention of data leakage via access right violations
and security vulnerabilities through unchecked inputs.
Allowing class designers to specify safety checks in a
class and having the runtime system enforce these checks
efﬁciently, we bring automatic safety check beneﬁts to a
higher semantic level. Fine-grained control enables us to
harness the true power of third-party software by giving it
access to sensitive data and resources in the system without
unduly exposing the platform to security attacks.
1.3
Introduction of InvisiType
Our approach to providing object-oriented security
check builds upon the fundamental idea of class hierarchies
in object-oriented programming. Roughly, our approach is
to create subclasses that extend the original class deﬁnitions
with virtual methods that contain safety checks. Through
the virtual method dispatch mechanism, subclassing en-
ables software to be extended efﬁciently with no changes
to the original code.
More speciﬁcally, we introduce the notion of a new
type called the InvisiType1 to enforce object-oriented safety
checks. An InvisiType is a class with special properties
known to the language’s runtime system.
Multiple inheritance. Safety-checking policies are en-
capsulated as policy classes derived from the InvisiType
class. We can impose a policy on an ordinary class by cre-
ating a new subclass, called a protected class, that inherits
from both the original class and the policy subclass itself.
Suppose we wish to keep track of input strings to guard
against SQL injection vulnerabilities. We can create a taint
policy, TaintPolicy, subclassed from InvisiType. A
tainted string is an instance of a protected class derived from
the string class and the TaintPolicy class.
Safety-checking rules. A policy class deﬁnes how all
operations, including method invocations, built-in opera-
tors, and native function calls, in an ordinary class are to
be augmented with safety checks. It also deﬁnes exception-
handling code. The runtime system of the language auto-
matically enforces the safety-checking rules and raises ex-
ceptions where necessary. The exceptions may be caught to
dynamically recover from the error conditions.
Third-party code transparency. Protected classes are
nameless and invisible to the application code, as suggested
by the name InvisiType. This ensures that third-party code
works without modiﬁcation; even the type() function call
returns the original type. Users of a class are oblivious to the
safety checks, just like they are oblivious to the insertions
of null checks.
Dynamic selection of policy enforcement. Unlike
primitive safety checks, object-oriented safety checks can
be complex and can incur higher overheads. It is necessary
to allow application writers to choose dynamically the in-
stances of a class to be subjected to safety policies. For ex-
ample, only input strings need to be treated as tainted; fur-
thermore, they should be classiﬁed as untainted after they
are checked for malicious contents.
In our design, we make inheritance and disinheritance of
safety policies a dynamic feature by generating protected
classes and changing the protection type of an object dy-
namically. To this end, we introduce a pair of built-in func-
tions, demote and promote. Demote puts an instance of an
ordinary class under a safety policy by making the instance
a member of the protected class derived from the instance’s
class and the policy class. A demoted object is also referred
to as a protected object in this paper. Conversely, promote
turns a protected instance back to an ordinary instance of
the original class.
Efﬁcient implementation. Unlike syntactic rewrite sys-
tems such as Aspect Programming [14, 15] that change the
deﬁnition of methods for every instance, InvisiType allows
1The name InvisiType is inspired by Invisalign, which is a series of
transparent teeth aligners used as an alternative to traditional metal dental
braces.
method deﬁnitions to change only for selected instances,
and only for the duration an instance is subject to safety
policies. The safety checking rules are implemented by
modifying the virtual method dispatch mechanism. As a re-
sult, the runtime system can enforce the safety checks with
a negligible overhead. This makes InvisiType especially ef-
ﬁcient for low-level safety checks that need to be applied
only to selected objects.
1.4 Contributions of this Paper
This paper aims to minimize vulnerabilities in software
caused by coding errors in third-party extensions as well
as platform softwares. Examples of errors of this sort in-
clude SQL injection, cross-site scripting, and incorrect ac-
cess control checking. It is not the intention of this paper to
guard against malicious third-party developers.
The premise of this paper is that software platform de-
velopers can insert ﬁne-grained control over third-party ex-
tension efﬁciently and transparently by encapsulating safety
checks in an object-oriented manner. The speciﬁc contribu-
tions of this paper are described below.
Concept of InvisiType. We propose encapsulating
object-oriented safety-checking rules as policy classes,
which are subclasses of the InvisiType class. Ordinary ob-
ject instances can be subjected to these policies selectively,
dynamically, and efﬁciently. The policies are enforced by
the runtime system, requiring no change be made to the
third-party code to be protected.
Common security policies described using Invisi-
Type. We use InvisiType to implement common security
policies such as taint tracking or access control on objects.
These policies are generally applicable and can enhance se-
curity of many applications.
An efﬁcient implementation of InvisiType for Python.
We have incorporated InvisiType into Python, a widely used
programming language. The design of InvisiType requires a
relatively small change to the runtime system. The overhead
incurred is found to be negligible.
Enhanced security of Python web applications. We
used the InvisiType technique to enhance the security of 4
widely used Python web applications. These applications
totaled approximately 160,000 lines of source code, not in-
cluding the library code. All the web applications have sup-
port for third-party extensions. One example is the Moin-
Moin Wiki Engine which has a large number of extensions,
and is known to have many security bugs both in its own
distribution and in third-party extensions. We successfully
found two important classes of security bugs in the applica-
tions; in MoinMoin the two classes of security bugs account
for more than 50% of all known security bugs. In total, we
found 25 security bugs in the 4 applications.
1.5 Paper Organization
The rest of the paper is organized as follows. We ﬁrst
illustrate the concept of InvisiType by showing how to use
it to eliminate cross-site scripting vulnerabilities in web ap-
plications in Section 2. Section 3 presents the rationale and
design of InvisiType. We then discuss the various secu-
rity policies we have implemented using InvisiType in Sec-
tion 4. We describe our implementation of InvisiType in
Python in Section 5. Section 6 presents the experimental re-
sults of applying InvisiType policies to a number of Python
web applications. Finally, Section 7 discusses related work
and Section 8 concludes.
2 Eliminating Cross-Site Scripting With An
InvisiType Policy
Cross-site scripting (XSS) is one of the most common
vulnerabilities that plague web server applications. Attack-
ers can send code to a web browser client if a web ap-
plication echoes back user-input strings directly as output.
Like SQL injection and many other vulnerabilities due to
unchecked inputs, XSS can be prevented with information
ﬂow control, a technique that controls how data ﬂows in-
side the system to the outside world.
In this section, we
introduce InvisiType by way of showing how it can be used
to control information ﬂow to prevent XSS.
2.1 Cross-Site Scripting
Let us ﬁrst consider a simpliﬁed example of a cross-
site scripting vulnerability drawn from the login extension
code in the MoinMoin Wiki Engine, as shown in Figure 1.
The function cgi.FieldStorage() returns a Python
dictionary-like object representing the HTML form data.
The login extension retrieves the name and password
ﬁelds from the form data. If there is no user with the given
name, the code responds with an error message. In this case,
the user-provided input name is echoed back unchanged.
By inserting some malicious Javascript code in the name it-
self, the Javascript gets executed when it is echoed on the
client’s computer, thus launching a cross-site scripting at-
tack.
We can avoid cross-site scripting using the notion of
tainting, which is a basic form of information ﬂow control.
There are four basic constraints in tainting:
Taint Constraint 1. All input strings are considered
tainted.
Taint Constraint 2. A string is considered tainted if it is
a concatenation of one or more tainted strings.
form = cgi.FieldStorage()
...
name = form["name"]
password = form["password"]
if not user.exist(name):
error = "Unknown user name:" + name
...
request.http_headers()
request.write(error)
Figure 1. Cross-site scripting example from
MoinMoin
Taint Constraint 3. Tainted strings cannot be used as ar-
guments in system calls.
Taint Constraint 4. Strings are safe to be used in sys-
tem calls if they cannot be interpreted as executable
Javascript. Strings can be made safe, sanitized, by
replacing characters with special meaning in HTML,
such as replacing “&” with “&amp”, “” with “&gt”.
This taint policy is applicable across many applications.
2.2 The Taint Policy
Let us show how we use InvisiType in the context of the
Python language to implement tainting. The escape func-
tion of the cgi module in the Python standard library has
already implemented sanitization. Third-party code is ex-
pected to call escape on all input strings before echoing
them back.
The framework developer encapsulates the taint policy
in our system with the deﬁnition of TaintPolicy, a sub-
class of InvisiType, as shown in Figure 2. All objects
subjected to this policy are considered tainted. The deﬁ-
nition of syscall enforces Taint Constraint 3, which
states that tainted objects are not allowed to be used in sys-
tem calls. The rest of the deﬁnition enforces Taint Con-
straint 2, which states that any concatenation of tainted
strings yields tainted strings. Details of the policy deﬁni-
tion are presented in Section 3.
2.3 Applying the Policy
A framework designer next applies the taint policy by
tainting all input strings until they are escaped. Each in-
put string is tainted by calling demote on the string along
with the TaintPolicy class. Figure 3 shows tainting is
class TaintPolicy(InvisiType):
def __add__(handler, self, other):
return TaintPolicy.propagate(handler,
self, other)
def __radd__(handler, self, other):
return TaintPolicy.propagate(handler,
self, other)
def __getitem__(handler, self, other):
return TaintPolicy.propagate(handler,
self, other)
def __nativecall__(handler, self, args):
return TaintPolicy.propagate(handler,
args)
...
def propagate(handler, *args):
result = InvisiType.call(handler, *args)
# demotes result with TaintPolicy
return taint(result)
def __syscall__(handler, self):
raise OperationError("Tainted object is"+
"used in a system call")
Figure 2. Deﬁnition of TaintPolicy
recv =
socket.recv = (lambda *args:
socket.recv
demote(recv(*args), TaintPolicy))
Figure 3. Tainting an input string received
from a socket
def escape(s, quote=None):
s = s.replace("&", "&amp;")
s = s.replace("", "&gt;")
if quote:
s = s.replace(’"’, "&quot;")