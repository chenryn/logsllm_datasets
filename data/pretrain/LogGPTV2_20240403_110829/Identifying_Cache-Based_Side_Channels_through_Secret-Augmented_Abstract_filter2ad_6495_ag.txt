side channels in binaries. In ACSAC (2018).
[83] WU, Z., XU, Z., AND WANG, H. Whispers in the
hyper-space: High-speed covert channel attacks in the
cloud. In USENIX Sec. (2012).
[84] XIE, Y., AND AIKEN, A. Scalable error detection us-
ing boolean satisﬁability. In POPL (2005).
[85] XU, Y., BAILEY, M., JAHANIAN, F., JOSHI, K.,
HILTUNEN, M., AND SCHLICHTING, R. An explo-
ration of L2 cache covert channels in virtualized envi-
ronments. In CCSW (2011).
[86] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD:
A high resolution, low noise, L3 cache side-channel at-
tack. In USENIX Sec. (2014).
[87] YAROM, Y., GENKIN, D., AND HENINGER, N.
CacheBleed: A timing attack on OpenSSL constant
time RSA. Tech. rep., Cryptology ePrint Archive, Re-
port 2016/224, 2016.
[88] ZHANG, D., WANG, Y., SUH, G. E., AND MYERS,
A. C. A hardware design language for timing-sensitive
information-ﬂow security. In ASPLOS (2015).
[89] ZHANG, Y., JUELS, A., OPREA, A., AND REITER,
M. K. HomeAlone: Co-residency detection in the
cloud via side-channel analysis. In IEEE SP (2011).
[90] ZHANG, Y., JUELS, A., REITER, M. K., AND RIS-
TENPART, T. Cross-VM side channels and their use to
extract private keys. In CCS (2012).
[91] ZHANG, Y., AND REITER, M. K. D¨uppel: Retroﬁtting
commodity operating systems to mitigate cache side
channels in the cloud. In CCS (2013).
A SAS as a Lattice
To further make SAS a lattice, we will need to specify a top
element (cid:62) ∈ SAS, a bottom element ⊥ ∈ SAS, and a join
operator (cid:116) over SAS.
Set Collapse and Bound. Each element in SAS is a set of
abstract values f ∈ AV. Considering f with different degrees
of abstractions may exist in one set, here we deﬁne reason-
able rules to “collapse” elements in a set. The “collapse”
function COL : SAS → SAS is given by:
COL(X) =
if (cid:62) ∈ X
else if p ∈ X ∧ AVs ∩ X (cid:54)= ∅
else if p ∈ X ∧ AVs ∩ X = ∅
otherwise
While the ﬁrst three rules introduce single symbols as a
safe and concise approximation, the last rule preserve a set
in SAS.
In addition, each set in SAS is also bounded with a maxi-
mum size of N through function BOU as follows:
{(cid:62)}
{(cid:62)}
{p}
X
{(cid:62)}
{p}
X
BOU(X) =
if |X| > N ∧ AVs ∩ X (cid:54)= ∅
else if |X| > N ∧ AVs ∩ X = ∅
otherwise
Hence, the abstract value set of any variable is bounded by
N during computations within SAS, which practically speed
ups the analysis convergence (N is set as 50 in this research,
see Appendix B for a discussion of different conﬁgurations).
With COL and BOU deﬁned, we can ﬁnally complete SAS
as a lattice.
Claim 2. SAS = P(AV) forms a lattice with the top element
(cid:62)SAS = {(cid:62)}
⊥SAS = {}
bottom element
and the join operator
(cid:116) = BOU◦ COL◦∪
For further discussion of SAS, including the concrete and
abstract semantics, soundness proof, etc., please refer to the
extended version of this paper [76].
B Evaluating Different Conﬁgurations of the
BOU Function
The deﬁnition of the BOU function includes a parameter N
as the maximum size of each abstract value set. Table 7 re-
ports the evaluation results of CacheS with respect to dif-
ferent N. As expected, with the increase of the allowed
size, analyses took more time before reaching the ﬁxed point.
Also, when the allowed size is small (i.e., N is 1 or 10), the
value set of certain registers is lifted into {p} rapidly and ter-
minates the analysis due to memory write accesses through
p (see Sec. 6.2; we terminate the analysis for memory access
of p since it rewrites the whole memory). The full evalua-
tion data in terms of different conﬁgurations is available in
the extended paper [76].
USENIX Association
28th USENIX Security Symposium    673
Table 7: Evaluating different conﬁgurations of BOU. When N
is set as 1 and 10, several analyses terminated before reach-
ing the ﬁxed point due to memory write accesses through the
public symbol p. The full evaluation data in terms of each
conﬁguration can be found at [76].
Value of N
1
10
25
100
50 (the default conﬁg)
True Positive
N/A
167
207
207
207
False Positive
N/A
1
1
1
1
Processing Time (CPU Seconds)
N/A
584.5
1,446.8
1,637.4
3,563.46
C Unknown Information Leaks in OpenSSL
int BN num bits(const BIGNUM ∗a) {
int i = a->top − 1;
bn check top(a);
if (BN is zero(a))
return ((i ∗ BN BITS2) + BN num bits word(a->d[i]));
return 0;
}
int BN num bits word(BN ULONG l) {
static const char bits[256]={
0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,
...
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
};
if (l & 0xffff0000L) {
if (l & 0xff000000L)
return bits[l >> 24] + 24;
return bits[l >> 16] + 16;
if (l & 0xff00L)
return bits[l >> 8] + 8;
return bits[l];
else
}
else {
else
}
}
Figure 7: RSA information leaks found in OpenSSL (1.0.2f).
Program secrets and their dependencies are marked as red
and the leakage points are boldfaced.
D Scatter & Gather Methods in OpenSSL
char∗ align(char∗ buf) {
uintptr t addr = (uintptr t) buf;
return (char∗)(addr − (addr&(BLOCK SZ−1)) + BLOCK SZ);
}
void scatter(char∗ buf, char p[][16], int k) {
for (int i = 0; i p[nblimbs] >> bufsize) & 1;
...
wbits |= (ei n n : n;
u1 = (d[0] + u0 * B->p[0]) * mm;
mpi mul hlp(m, B->p, d, u0);
}
...
}
...
}
Figure 9: RSA information leaks found in mbedTLS (2.5.1).
Program secrets and their dependencies are marked as red
and the leakage points are boldfaced.
F Secret-Dependent Branch Conditions in
OpenSSL
int BN mod exp mont consttime(BIGNUM ∗rr,
const BIGNUM ∗a, const BIGNUM ∗p,
const BIGNUM ∗m, BN CTX ∗ctx,
BN MONT CTX ∗in mont) {
...
bits = BN num bits(p);
if (bits == 0)
...
window = BN window bits for exponent size(bits);
for (wvalue = 0, i = bits%window; i>=0; i--,bits--)
{
...
...
while (bits >= 0){
}
...
}
}
#define BN window bits for exponent size(b) \
((b) > 671 ? 6 : \
(b) > 239 ? 5 : \
(b) > 79 ? 4 : \
(b) > 23 ? 3 : 1)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
Figure 8: Simple C program demonstrating the scatter &
gather methods in OpenSSL to remove timing channels. This
program should be secure regarding our threat model, but it
would become insecure by skipping the alignment function.
Figure 10: Several secret-dependent branch conditions found
in OpenSSL (1.0.2f). Program secrets and their dependen-
cies are marked as red and the information leakage condi-
tions are boldfaced. Note that the output of BN num bits
depends on the private key.
674    28th USENIX Security Symposium
USENIX Association