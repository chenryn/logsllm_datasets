### Side Channels in Binaries
- **Reference**: In ACSAC (2018).

### High-Speed Covert Channel Attacks in the Cloud
- **Authors**: Wu, Z., Xu, Z., and Wang, H.
- **Reference**: In USENIX Sec. (2012).

### Scalable Error Detection Using Boolean Satisfiability
- **Authors**: Xie, Y., and Aiken, A.
- **Reference**: In POPL (2005).

### Exploration of L2 Cache Covert Channels in Virtualized Environments
- **Authors**: Xu, Y., Bailey, M., Jahanian, F., Joshi, K., Hiltunen, M., and Schlichting, R.
- **Reference**: In CCSW (2011).

### FLUSH+RELOAD: A High-Resolution, Low-Noise, L3 Cache Side-Channel Attack
- **Authors**: Yarom, Y., and Falkner, K.
- **Reference**: In USENIX Sec. (2014).

### CacheBleed: A Timing Attack on OpenSSL Constant Time RSA
- **Authors**: Yarom, Y., Genkin, D., and Heninger, N.
- **Reference**: Tech. rep., Cryptology ePrint Archive, Report 2016/224, 2016.

### A Hardware Design Language for Timing-Sensitive Information-Flow Security
- **Authors**: Zhang, D., Wang, Y., Suh, G. E., and Myers, A. C.
- **Reference**: In ASPLOS (2015).

### HomeAlone: Co-Residency Detection in the Cloud via Side-Channel Analysis
- **Authors**: Zhang, Y., Juels, A., Oprea, A., and Reiter, M. K.
- **Reference**: In IEEE SP (2011).

### Cross-VM Side Channels and Their Use to Extract Private Keys
- **Authors**: Zhang, Y., Juels, A., Reiter, M. K., and Ristenpart, T.
- **Reference**: In CCS (2012).

### DÂ¨uppel: Retrofitting Commodity Operating Systems to Mitigate Cache Side Channels in the Cloud
- **Authors**: Zhang, Y., and Reiter, M. K.
- **Reference**: In CCS (2013).

## SAS as a Lattice

To transform SAS into a lattice, we need to define a top element \(\top \in \text{SAS}\), a bottom element \(\bot \in \text{SAS}\), and a join operator \(\sqcup\) over SAS.

### Set Collapse and Bound

Each element in SAS is a set of abstract values \(f \in \text{AV}\). Given that sets may contain elements with varying degrees of abstraction, we introduce rules to "collapse" these elements. The collapse function \( \text{COL} : \text{SAS} \to \text{SAS} \) is defined as follows:

\[
\text{COL}(X) = 
\begin{cases} 
\{\top\} & \text{if } \top \in X \\
\{p\} & \text{if } p \in X \land \text{AVs} \cap X \neq \emptyset \\
\{p\} & \text{if } p \in X \land \text{AVs} \cap X = \emptyset \\
X & \text{otherwise}
\end{cases}
\]

The first three rules provide a safe and concise approximation using single symbols, while the last rule preserves the set in SAS.

Additionally, each set in SAS is bounded by a maximum size \(N\) through the function \(\text{BOU}\):

\[
\text{BOU}(X) = 
\begin{cases} 
\{\top\} & \text{if } |X| > N \land \text{AVs} \cap X \neq \emptyset \\
\{p\} & \text{if } |X| > N \land \text{AVs} \cap X = \emptyset \\
X & \text{otherwise}
\end{cases}
\]

This ensures that the abstract value set of any variable is bounded by \(N\) during computations within SAS, which practically speeds up the analysis convergence. In this research, \(N\) is set to 50 (see Appendix B for a discussion of different configurations).

With \(\text{COL}\) and \(\text{BOU}\) defined, we can complete SAS as a lattice.

**Claim 2**: \(\text{SAS} = \mathcal{P}(\text{AV})\) forms a lattice with the top element \(\top_{\text{SAS}} = \{\top\}\), the bottom element \(\bot_{\text{SAS}} = \{\}\), and the join operator \(\sqcup = \text{BOU} \circ \text{COL} \circ \cup\).

For further discussion of SAS, including the concrete and abstract semantics, soundness proof, etc., please refer to the extended version of this paper [76].

## Evaluating Different Configurations of the BOU Function

The definition of the BOU function includes a parameter \(N\) as the maximum size of each abstract value set. Table 7 reports the evaluation results of CacheS with respect to different \(N\). As expected, increasing the allowed size leads to longer analysis times before reaching the fixed point. When \(N\) is small (i.e., 1 or 10), the value set of certain registers is quickly lifted into \(\{p\}\) and the analysis terminates due to memory write accesses through \(p\) (see Section 6.2; we terminate the analysis for memory access of \(p\) since it rewrites the whole memory). The full evaluation data for different configurations is available in the extended paper [76].

### Table 7: Evaluating Different Configurations of BOU

| Value of \(N\) | True Positive | False Positive | Processing Time (CPU Seconds) |
|----------------|---------------|----------------|--------------------------------|
| 1              | N/A           | N/A            | N/A                            |
| 10             | 167           | 1              | 584.5                          |
| 25             | 207           | 1              | 1,446.8                        |
| 100            | 207           | 1              | 1,637.4                        |
| 50 (default)   | 207           | 1              | 3,563.46                       |

## Unknown Information Leaks in OpenSSL

```c
int BN_num_bits(const BIGNUM *a) {
    int i = a->top - 1;
    bn_check_top(a);
    if (BN_is_zero(a))
        return ((i * BN_BITS2) + BN_num_bits_word(a->d[i]));
    return 0;
}

int BN_num_bits_word(BN_ULONG l) {
    static const char bits[256] = {
        0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
        ...
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    };
    if (l & 0xffff0000L) {
        if (l & 0xff000000L)
            return bits[l >> 24] + 24;
        return bits[l >> 16] + 16;
    }
    if (l & 0xff00L)
        return bits[l >> 8] + 8;
    return bits[l];
}
```

**Figure 7**: RSA information leaks found in OpenSSL (1.0.2f). Program secrets and their dependencies are marked in red, and the leakage points are boldfaced.

## Scatter & Gather Methods in OpenSSL

```c
char* align(char* buf) {
    uintptr_t addr = (uintptr_t) buf;
    return (char*)(addr - (addr & (BLOCK_SZ - 1)) + BLOCK_SZ);
}

void scatter(char* buf, char p[][16], int k) {
    for (int i = 0; i < k; i++) {
        memcpy(p[i], buf + i * BLOCK_SZ, BLOCK_SZ);
    }
}

void gather(char* buf, char p[][16], int k) {
    for (int i = 0; i < k; i++) {
        memcpy(buf + i * BLOCK_SZ, p[i], BLOCK_SZ);
    }
}
```

**Figure 8**: Simple C program demonstrating the scatter & gather methods in OpenSSL to remove timing channels. This program should be secure regarding our threat model, but it would become insecure by skipping the alignment function.

## Secret-Dependent Branch Conditions in OpenSSL

```c
int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont) {
    ...
    bits = BN_num_bits(p);
    if (bits == 0)
        ...
    window = BN_window_bits_for_exponent_size(bits);
    for (wvalue = 0, i = bits % window; i >= 0; i--, bits--) {
        ...
        while (bits >= 0) {
            ...
        }
    }
}

#define BN_window_bits_for_exponent_size(b) \
    ((b) > 671 ? 6 : \
     (b) > 239 ? 5 : \
     (b) > 79 ? 4 : \
     (b) > 23 ? 3 : 1)
```

**Figure 10**: Several secret-dependent branch conditions found in OpenSSL (1.0.2f). Program secrets and their dependencies are marked in red, and the information leakage conditions are boldfaced. Note that the output of `BN_num_bits` depends on the private key.