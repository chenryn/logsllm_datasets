WITH RECURSIVE search_graph(  
  c1,   -- 点1  
  c2,   -- 点2  
  prop, -- 边的属性  
  depth, -- 深度，从1开始  
  path  -- 路径，数组存储  
) AS (  
        SELECT    -- ROOT节点查询  
          g.c1,   -- 点1  
          g.c2,   -- 点2  
          g.prop,   -- 边的属性  
          1 as depth,        -- 初始深度=1  
          ARRAY[g.c1] as path  -- 初始路径  
        FROM a AS g  
        WHERE  
          c1 = :v_root_id         -- ROOT节点=?  
      UNION ALL  
        SELECT     -- 递归子句  
          g.c1,    -- 点1  
          g.c2,    -- 点2  
          g.prop,          -- 边的属性  
          sg.depth + 1 as depth,    -- 深度+1  
          path || g.c1 as path   -- 路径中加入新的点  
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2         -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))        -- 防止循环  
          AND sg.depth  ALL(sg.path))        -- 防止循环  
          AND sg.depth  ALL(sg.path))        -- 防止循环  
          AND sg.depth >'weight')::float8,0) >= ?        -- 相关性权重  
          -- ORDER BY coalesce((prop->>'weight')::float8,0) desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit :v_limit_per_layer            -- 每个层级限制多少条？  
        ) t  
      UNION ALL  
        select c1,c2,prop,depth,path from (  
        SELECT     -- 递归子句  
          g.c1,    -- 点1  
          g.c2,    -- 点2  
          g.prop,          -- 边的属性  
          sg.depth + 1 depth,    -- 深度+1  
          path || g.c1 path    -- 路径中加入新的点  
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2         -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))        -- 防止循环  
          AND sg.depth >'weight')::float8,0) >= ?   -- 相关性权重  
          -- ORDER BY coalesce((prop->>'weight')::float8,0) desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit :v_limit_per_layer            -- 每个层级限制多少条？  
        ) t  
)  
SELECT * FROM search_graph;    -- 查询递归表，可以加LIMIT输出，也可以使用游标  
```  
```  
  c1   |  c2   | prop | depth |        path  
-------+-------+------+-------+---------------------  
 31208 |    22 |      |     1 | {31208}  
 31208 |   644 |      |     1 | {31208}  
 31208 |   809 |      |     1 | {31208}  
 31208 |   879 |      |     1 | {31208}  
 31208 |   977 |      |     1 | {31208}  
 31208 |  1011 |      |     1 | {31208}  
 31208 |  1023 |      |     1 | {31208}  
 31208 |  1096 |      |     1 | {31208}  
 31208 |  1118 |      |     1 | {31208}  
 31208 |  1305 |      |     1 | {31208}  
 31208 |  1376 |      |     1 | {31208}  
 31208 |  1440 |      |     1 | {31208}  
...  
   743 |  6823 |      |     4 | {31208,644,384,743}  
   743 | 29440 |      |     4 | {31208,644,384,743}  
   743 | 24514 |      |     4 | {31208,644,384,743}  
   743 | 10329 |      |     4 | {31208,644,384,743}  
   743 | 19528 |      |     4 | {31208,644,384,743}  
   743 | 39914 |      |     4 | {31208,644,384,743}  
   743 |  7904 |      |     4 | {31208,644,384,743}  
   743 | 14666 |      |     4 | {31208,644,384,743}  
   743 | 32060 |      |     4 | {31208,644,384,743}  