所以在http://fettermansbooks.com（或其他应用）上浏览书籍，写书
评、阅读或购买的体验，会被来自Facebook的用户社会关系数据加
强和放大。具体来说，显示朋友的书评、期望清单和购买情况将有
助于用户的购买决定，发现新的书籍，或强化与其他用户之间的联
系。如果Facebook的内部映射user_get friends可以由
992
---
## Page 994
http://fettermansbooks.com这样的其他外部应用访问，就会为这些原
本分离的应用提供强大的社会关系上下文，让应用程序不需要创建
它自己的社会关系网络。所有这种类型的应用都可以与这种数据进
行很好的集成，因为开发者可以将这些核心Facebook映射应用于无
数其他Web应用，用户在这些应用里提供或消费内容。
Facebook平台的技术通过在社会关系网络和数据架构方面的一系列
改进，实现了这一点：
应用可以通过Facebook平台的数据服务来访问有用的社会关系数
据，为外部的WWeb应用、桌面操作系统应用和其他设备上的应用提
供社会关系上下文。
应用可以通过一种名为FBML的数据驱动标记语言来实现显示，在
http://facebook.com的页面上集成他们的应用体验。
通过FBML所要求的架构改变，开发者可以使用Facebook平台的
cookie和FacebookJavaScript（FBJS），从而让应用出现在
http://facebook.com上所需的改动最小。
·最后，应用可以获得这些功能，同时不必牺牲隐私，也不必放弃对
主要被看成是社会关系平台领域的先行者。大多数的架构考虑是为
了创建统一可用的社会关系上下文，它体现了这样的阴阳关系：数
据可获得性和用户隐私。
6.2创建一个社会关系Web服务
回过头来看一看像http://fettermansbooks.com这样一个简单的例子，
我们就很清楚大多数因特网应用都会因为在数据显示时添加社会关
系上下文而受益。但是，我们会遇到一个实际的问题：这种数据的
可获得性。
实际问题：应用可以利用在Facebook上的用户社会关系数据，但这
种数据是不可访问的。
数据解决方案：通过一个外部可以访问的Web服务来提供Facebook
数据（图6-2）。
993
---
## Page 995
为Facebook架构添加了FacebookAPI，就开始通过Facebook平台为外
部应用和Facebook建立了关系，本质上为外部应用栈添加了
Facebook数据。对于Facebook用户，当他显式地授权外部应用可以
代表他获得社会关系数据时，这种集成就开始了。
例6-4展示了http://fettermansbooks.com的登录页面在没有Facebook集
成的情况下可能的样子。
例6-4：书籍网站逻辑示例
$books_user_id=establish booksite_userid ($ REQuEsT) ;
$book_infos=user_get_likely_books ($books_user_id) ;
display_books ($book infos);
App数据
SQL对象
↑
HTML,JS,
S_REQUEST
App逻辑层
(obj)
App显示层
CSS
浏览器
App基础设施
FB基础设施
隐私规则
FB数
图6-2：应用栈通过Web服务使用Facebook数据
994
---
## Page 996
这个user_get_likely_books函数操作完全源自于这个书籍应用控制的
数据，可能使用智能的关联技术来猜测用户的兴趣。
但是，假定Facebook为在其他站点的用户提供了两个简单的远程过
程调用（RPC）方法：
friends.get ()
users.getInfo(Susers，Sfields)
通过它们，并添加从http://fettermansbooks.com的用户标识符到
Facebook的用户标识符的映射关系，我们就可以为
http://fettermansbooks.com上的所有内容添加社会关系上下文。请考
虑这个针对Facebook用户的新流程，如例6-5所示。
例6-5：包含社会关系上下文的书籍站点逻辑
$books_user_id=establish_booksite_userid (S_REQUEsT):
$facebook_client=establish_facebook_session ($_REQuEST
$books_user_id);
if ($facebook_client){
$facebook_friend_uids=$facebook_client->api_client->
friends_get () :
foreach ($facebook_friend_uids as$facebook_friend) {
$book_site_friends [$facebook_friend]
books_user_id_from_facebook_id ($facebook_friend);
上
$book_site_friend_names=$facebook->api_client->
users_getInfo (Sfacebook_friend_uids, 'name') ;
foreach ($book_site_friends as$fb_id=>$booksite_id){
$friend_books=user_get_reviewed_books ($booksite_id) ;
995
---
## Page 997
print"".$book_site_friend_names [$fb_id]."'s likely
picks:
";
display_books ($friend_books)；
这个例子中的粗体部分就是书籍应用使用Facebook平台提供的数据
的代码。如果我们能够弄清楚函数establishfacebooksession背后的
代码，这个架构就可以提供更多的数据，从而将这个了解书籍的应
用变成了一个完全了解用户的应用。
让我们来看看Facebook的API如何支持这一点。首先，我们会简单
浏览一下Web服务包装Facebook数据的技术，这是通过使用合适的
元数据以及名为Thrif的灵活的代码生成器来生成的。开发者可以使
用下一节中提到的这些技术，有效地创建各种Web服务，不论开发
者手中的数据是公有的还是私有的。
但是请注意，Facebook的用户并不认为他们的Facebook数据全部是
公有的。所以在技术概述之后，我们会探讨Facebook层面的隐私，
这是通过平台AP中的主要认证方式来实现的，即用户会话。
6.2.1数据：创建一个XMLWeb服务
为了能够在一个示例应用中提供基本的社会关系上下文，我们已经
建立了两个远程方法调用，即friends.get和users.getlnfo。访问这些数
据的内部功能可能存在于Facebook代码树的某个库中，为Facebook
站点上的类似请求提供服务。例6-6展示了一些例子。
例6-6：社会关系映射示例
function friends_get ($session_user) (..)
function users_getInfo ($session_user, $input_users
$input_fields) (.….
996
---
## Page 998
我们接下来要创建一个简单的Web服务，将通过HTTP的GET和
POST输入转换成对内部栈的调用，以XML的格式输出结果。在
Facebook平台中，目标方法的名称以及它的参数是在HTTP请求中传
递的，还包括一些与调用应用相关的证书（称为"apikey”），与用
户-应用对相关的证书（称为"用户会话key"），与请求实例本身相
关的证书（称为请求“签名”）。我们稍后将在6.2.2节中讨论会话
key。要服务一个针对http://api.facebook.com的请求，其大致过程如
下：
1.检查传递的证书（第6.2.2节），验证调用应用程序的身份，用户
当前在该应用中的授权，以及请求的可信度。
2.将进入的GET/POST请求解释为带有相应参数的方法调用。
3.对内部方法进行单次调用，将结果保存为内存中的数据结构。
4.将这些数据结构转换成已知的输出格式（如XML或JSON）并返
回。
创建外部可使用的接口，难度主要在于第2步和第4步。为外部使用
者提供这些数据接口的一致维护、同步和文档是很重要的，手工打
造一个代码框架来确保这种一致性则是一项无人赞赏而又耗时的工
作。另外，我们可能需要将这些数据提供给多种语言编写的内部服
务来使用，或者以不同的Wweb协议将结果提供给外部开发者，如
XML、JSON或SOAP。
那么这里的优美解决方案，就是利用元数据来封装数据类型和描述
API的方法签名。Facebook的工程师创建开源的跨语言进程间通信
（IPC）系统，名为Thrift（http://developers.facebook.com/thrift），
干净利落地实现了这个目标。
深入一步，例6-7展示了一个针对1.0版API的".thrif"文件的例子，在
这个版本里，Thrift包实现了这个API的大部分机制。
例6-7：通过Thrift对Web服务定义
xsd_namespace http://api.facebook.com/1.0/
/+**
997
---
## Page 999
*Definition of types available in api.facebook.com version
1 . 0
* /
typedef i32 uid
typedef string uid_list
typedef string field_list
struct location{
1: string street xsd_optional,
2: string city,
3: string state,
4: string country,
5: string zip xsd_optional
上
struct user{
1: uid uid,
2: string name;
3: string books,
4: string pics,
5: location current_location
{
service FacebookApi10{
listfriends_get ()
throws (1: FacebookApiException error_response),
listusers_getInfo (1: uid_list uids, 2: field_list
fields)
998
---
## Page 1000