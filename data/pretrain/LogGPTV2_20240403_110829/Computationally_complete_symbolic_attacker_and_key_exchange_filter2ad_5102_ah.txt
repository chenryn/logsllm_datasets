except that we have Mc, Π, S(cid:48)(cid:48), σ |c= ˆφ, (cid:126)x(cid:54)(cid:73)OK there. Note,
that in the axiom for the KDM case, we only require about
x that (cid:126)x, x (cid:52) ˆφ; but the BOO in IND case above, had x as
an input which it then submits to the encryption oracle. The
analogous BOO in the KDM case is not allowed to use x as
an input. Instead, in the deﬁnition of key usability for the
KDM case we allowed the algorithms to use the encryptions
functions of items depending on the names generated that far.
Hence (cid:126)x, x (cid:52) ˆφ can be submitted to the oracle in the form of
such a function. and that is what BOO is also allowed to use.
x can be one of the elements in (cid:126)y.
• Next, we have to show that encryptions with uncompromised
keys do not compromise. Note again in the proof below that
we do not need CCA2 security of the encryption, we only
need the deﬁnition of key compromise. Instead of the origi-
nal formula, we show the following in the IND-CCA2 case:
RanGen(K) ∧ RanGen(K
) ∧ fresh(R; ˆφ, (cid:126)x, x, K, K
(cid:48)
∧ (cid:126)x, x (cid:52) ˆφ ∧ ˆφ, (cid:126)x,{x}R
eK(cid:48) (cid:73)OK ∧ ˆφ, (cid:126)x, x(cid:54)(cid:73)OK
(cid:48)
−→ ˆφ, (cid:126)x (cid:73)OK.
(cid:48)
)
We have to show that for all S non-negligible sets and σ
evaluations of variables, if Mc, Π, S, σ satisﬁes the premise,
then it satisﬁes the conclusion as well. So let us suppose it
satisﬁes the premise. We want to conclude Mc, Π, S, σ |c=
ˆφ, (cid:126)x (cid:73)O K. Following the deﬁnition of key compromise,
take any subset S(cid:48) ⊆ S. By the deﬁnition of key compro-
mise applied to Mc, Π, S, σ |c= ˆφ, (cid:126)x,{x}R
eK(cid:48) (cid:73)OK, there are
S(cid:48)(cid:48) ⊆ S(cid:48), R(cid:48), R1 AOO
and AOO
such that, taking
the ﬁrst possibility,
, AOO
21
22
1
Equation 2, we get that there is an R(cid:48)(cid:48), a subset S(cid:48)(cid:48)(cid:48)(cid:48) ⊆ S(cid:48)(cid:48)(cid:48)
just by restricting R(cid:48)(cid:48), such that
|AOO
( ˆφ,(cid:126)x,{0|x|}R(cid:48)(cid:48)
|x|}R(cid:48)(cid:48)
AOO
21 ( ˆφ, (cid:126)x,{0
(cid:54)= AOO
22 ( ˆφ, (cid:126)x,{0
eK(cid:48) ,{0
|x|}R(cid:48)(cid:48)
eK(cid:48) ,{0
1
|AOO
( ˆφ,(cid:126)x,{0|x|}R(cid:48)(cid:48)
eK(cid:48) )|}R(cid:48)
eK ))
eK(cid:48) )|}R(cid:48)
(4)
1
1
1
3
1
1
3
3
42
eK ))
|AOO
|AOO
such that on S(cid:48)(cid:48)(cid:48)(cid:48)(cid:48),
( ˆφ, (cid:126)x)}R1
eK ) =AOO
eK )),
still for all R(cid:48). Again, there is a length function (cid:96)(η) such that
the probability that |x| = (cid:96)(η) is non-negligible on S(cid:48)(cid:48)(cid:48)(cid:48). Let
the subset of S(cid:48)(cid:48)(cid:48)(cid:48) on which they are equal be S(cid:48)(cid:48)(cid:48)(cid:48)(cid:48). Since 0(cid:96)
is easily computable, we get that there are algorithms AOO
,
AOO
41 and AOO
AOO
41 ( ˆφ, (cid:126)x,{AOO
but
41 ( ˆφ, (cid:126)x,{0
AOO
eK )).
This exactly means that Mc, Π, S, σ |c= ˆφ, (cid:126)x (cid:73)O K. If we
switch = and (cid:54)=, we receive the proof of the other case of
key compromise.
Here too, the KDM case is proven entirely analogously.
42 ( ˆφ, (cid:126)x,{AOO
eK )(cid:54)=AOO
42 ( ˆφ, (cid:126)x,{0
( ˆφ, (cid:126)x)}R1
( ˆφ,(cid:126)x)|}R(cid:48)
( ˆφ,(cid:126)x)|}R(cid:48)
• Fresh keys are not compromised: It is here where IND-CCA2
(or KDM-CCA2) security of the encryption is used. We de-
ﬁne our CCA2 attacker against the CCA2 oracle that allows
multiple submissions for encryptions, which is equivalent
with the original deﬁnition [11]. Let us consider the IND-
CCA2 case. What we have to prove is that if Mc, Π, S, σ
satisﬁes freshness of key K, then Mc, Π, S, σ |c= ˆφ, (cid:126)x (cid:73)OK
leads to a CCA2 attack to the encryption. Let Mc, Π, S, σ |c=
ˆφ, (cid:126)x (cid:73)O K hold. That is, for every S(cid:48) ⊆ S, there are
S(cid:48)(cid:48) ⊆ S(cid:48), etc. such that (consider the ﬁrst case),
( ˆφ, (cid:126)x)}R
eK ) on S
21 ( ˆφ, (cid:126)x,{AOO
AOO
( ˆφ, (cid:126)x)}R
AOO
22 ( ˆφ, (cid:126)x,{AOO
eK ) =
(cid:48)(cid:48) and
(5)
1
1
|AOO
21 ( ˆφ, (cid:126)x,{0
AOO
AOO
22 ( ˆφ, (cid:126)x,{0
1
( ˆφ,(cid:126)x)|}R(cid:48)
eK ) (cid:54)=
( ˆφ,(cid:126)x)|}R(cid:48)
eK )
1
|AOO
(6)
on S(cid:48)(cid:48). Note that keyfresh(K; ˆφ, (cid:126)x) ∧ (cid:126)x (cid:52) ˆφ means the de-
cryption key or any function of it was never used in ˆφ, (cid:126)x.
What the CCA2 attacker has to do is to simulate the protocol
execution such that
AOO
21 ( ˆφ, (cid:126)x,{x}R
= AOO
22 ( ˆφ, (cid:126)x,{x}R
eK(cid:48) ,{AOO
1
( ˆφ, (cid:126)x,{x}R
eK(cid:48) )}R1
eK(cid:48) ,{AOO
1
( ˆφ, (cid:126)x,{x}R
eK ))
eK(cid:48) )}R1
eK ))
on S(cid:48)(cid:48), but
AOO
21 ( ˆφ, (cid:126)x,{x}R
(cid:54)= AOO
22 ( ˆφ, (cid:126)x,{x}R
eK(cid:48) ,{0
|AOO
1
( ˆφ,(cid:126)x,{x}R
eK(cid:48) )|}R(cid:48)
eK(cid:48) ,{0
|AOO
1
( ˆφ,(cid:126)x,{x}R
1
eK ))
eK(cid:48) )|}R(cid:48)
1
eK ))
(1)
(2)
on S(cid:48)(cid:48). By Mc, Π, S(cid:48)(cid:48), σ|c= ˆφ, (cid:126)x, x(cid:54)(cid:73)OK(cid:48), from Equation 1,
we have that there is an R(cid:48), and a subset (by restricting R(cid:48))
S(cid:48)(cid:48)(cid:48) ⊆ S(cid:48)(cid:48) such that on S(cid:48)(cid:48)(cid:48),
AOO
21 ( ˆφ, (cid:126)x,{0
= AOO
( ˆφ, (cid:126)x,{0
eK )).
Equation 2 still holds on S(cid:48)(cid:48)(cid:48) and for all R(cid:48)
1 and R(cid:48)
are independent. By Mc, Π, S(cid:48)(cid:48)(cid:48), σ |c= ˆφ, (cid:126)x, x(cid:54)(cid:73)OK(cid:48), from
eK(cid:48) )}R1
|x|}R(cid:48)
1, as R(cid:48)
eK(cid:48) ,{AOO
|x|}R(cid:48)
22 ( ˆφ, (cid:126)x,{0
eK(cid:48) ,{AOO
eK(cid:48) )}R1
( ˆφ, (cid:126)x,{0
eK )) (3)
|x|}R(cid:48)
|x|}R(cid:48)
1
1
– except for K, the CCA2 attacker generates all keys
– encryptions (except for that of AOO
( ˆφ, (cid:126)x)) with K are
done by submitting two identical requests to the en-
cryption oracle
– the attacker keeps a table recording which encryption
1
belongs to which plaintext
– decryptions of ciphertexts provided by the encryption
oracle are done by looking it up in the table
– decryptions of strings not provided by the oracle are
– when the challenge state is reached, the interpretations
done by submitting to the decryption oracle
of (cid:126)x and AOO
( ˆφ, (cid:126)x) are computed
1
1
( ˆφ, (cid:126)x) is submitted to the encryption oracle along
with a string of 0’s of the same length. Let c0 denote the
encryption that is received from the oracle. Note that
the adversary does not know if this is the encryption of
AOO
( ˆφ, (cid:126)x) or of the 0’s.
1
– AOO
– apply AOO
21 and AOO
22
to ˆφ, (cid:126)x, c0.
1243– because of (5) and (6) on S(cid:48)(cid:48), if the correct bit string
was encrypted, the two computations are equal, and if