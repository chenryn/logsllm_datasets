### Key Compromise and Freshness in Encryption Schemes

#### KDM Case vs. IND Case
In the KDM (Key-Dependent Message) case, we have the parameters \( M_c, \Pi, S'', \sigma \mid c = \hat{\phi}, \vec{x} \not\in \text{OK} \). Note that in the KDM case, for \( \vec{x}, x \), we only require that \( \vec{x}, x \preceq \hat{\phi} \). In contrast, in the IND (Indistinguishability) case, \( x \) is an input to the encryption oracle. In the KDM case, the analogous BOO (Bounded Oracle Oracle) is not allowed to use \( x \) as an input. Instead, in the definition of key usability for the KDM case, algorithms are allowed to use the encryption functions of items depending on the names generated so far. Thus, \( \vec{x}, x \preceq \hat{\phi} \) can be submitted to the oracle in the form of such a function, and this is what BOO is also allowed to use. \( x \) can be one of the elements in \( \vec{y} \).

#### Encryptions with Uncompromised Keys
Next, we need to show that encryptions with uncompromised keys do not compromise. Note that in the proof below, we do not need CCA2 (Chosen Ciphertext Attack 2) security of the encryption; we only need the definition of key compromise. In the IND-CCA2 case, we show the following:
\[
\text{RanGen}(K) \land \text{RanGen}(K') \land \text{fresh}(R; \hat{\phi}, \vec{x}, x, K, K') \land \vec{x}, x \preceq \hat{\phi} \land \hat{\phi}, \vec{x}, \{x\}_{R_e^{K'}} \not\in \text{OK} \land \hat{\phi}, \vec{x}, x \not\in \text{OK}
\]
\[
\rightarrow \hat{\phi}, \vec{x} \not\in \text{OK}.
\]

We must show that for all non-negligible sets \( S \) and evaluations \( \sigma \), if \( M_c, \Pi, S, \sigma \) satisfies the premise, then it also satisfies the conclusion. Suppose it satisfies the premise. We want to conclude \( M_c, \Pi, S, \sigma \mid c = \hat{\phi}, \vec{x} \not\in \text{OK} \). Following the definition of key compromise, take any subset \( S' \subseteq S \). By the definition of key compromise applied to \( M_c, \Pi, S, \sigma \mid c = \hat{\phi}, \vec{x}, \{x\}_{R_e^{K'}} \not\in \text{OK} \), there exist \( S'' \subseteq S' \), \( R', R_1, AOO_1, AOO_{21}, AOO_{22} \) such that, taking the first possibility from Equation 2, there is an \( R'' \), a subset \( S''' \subseteq S'' \) by restricting \( R'' \), such that:
\[
|AOO_{21}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R''})| \neq |AOO_{22}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R''})|
\]
\[
|AOO_{21}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R''})| = |AOO_{22}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R''})|
\]
on \( S''' \). There is a length function \( \ell(\eta) \) such that the probability that \( |x| = \ell(\eta) \) is non-negligible on \( S''' \). Let the subset of \( S''' \) on which they are equal be \( S'''' \). Since \( 0^\ell \) is easily computable, there are algorithms \( AOO_{41} \) and \( AOO_{42} \) such that:
\[
AOO_{41}(\hat{\phi}, \vec{x}, \{AOO_1(\hat{\phi}, \vec{x})\}_{R_1}) \neq AOO_{42}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R_1})
\]
This exactly means that \( M_c, \Pi, S, \sigma \mid c = \hat{\phi}, \vec{x} \not\in \text{OK} \). If we switch \( = \) and \( \neq \), we receive the proof of the other case of key compromise.

#### Fresh Keys and CCA2 Security
Finally, we need to show that fresh keys are not compromised. This is where IND-CCA2 (or KDM-CCA2) security of the encryption is used. We define our CCA2 attacker against the CCA2 oracle that allows multiple submissions for encryptions, which is equivalent to the original definition [11]. Consider the IND-CCA2 case. We need to prove that if \( M_c, \Pi, S, \sigma \) satisfies freshness of key \( K \), then \( M_c, \Pi, S, \sigma \mid c = \hat{\phi}, \vec{x} \not\in \text{OK} \) leads to a CCA2 attack on the encryption. Let \( M_c, \Pi, S, \sigma \mid c = \hat{\phi}, \vec{x} \not\in \text{OK} \) hold. That is, for every \( S' \subseteq S \), there are \( S'' \subseteq S' \), etc., such that:
\[
AOO_{21}(\hat{\phi}, \vec{x}, \{AOO_1(\hat{\phi}, \vec{x})\}_{R_1}) = AOO_{22}(\hat{\phi}, \vec{x}, \{AOO_1(\hat{\phi}, \vec{x})\}_{R_1})
\]
on \( S'' \) and:
\[
AOO_{21}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R_1}) \neq AOO_{22}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R_1})
\]
on \( S'' \). Note that \( \text{keyfresh}(K; \hat{\phi}, \vec{x}) \land \vec{x} \preceq \hat{\phi} \) means the decryption key or any function of it was never used in \( \hat{\phi}, \vec{x} \).

The CCA2 attacker must simulate the protocol execution such that:
\[
AOO_{21}(\hat{\phi}, \vec{x}, \{x\}_{R_1}) = AOO_{22}(\hat{\phi}, \vec{x}, \{x\}_{R_1})
\]
on \( S'' \), but:
\[
AOO_{21}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R_1}) \neq AOO_{22}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R_1})
\]
on \( S'' \). By \( M_c, \Pi, S'', \sigma \mid c = \hat{\phi}, \vec{x}, x \not\in \text{OK} \), from Equation 1, there is an \( R' \) and a subset \( S''' \subseteq S'' \) by restricting \( R' \) such that on \( S''' \):
\[
AOO_{21}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R'}) = AOO_{22}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R'})
\]
Equation 2 still holds on \( S''' \) and for all \( R_1 \) and \( R' \) are independent. By \( M_c, \Pi, S''', \sigma \mid c = \hat{\phi}, \vec{x}, x \not\in \text{OK} \), from Equation 3, we have:
\[
AOO_{21}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R'}) \neq AOO_{22}(\hat{\phi}, \vec{x}, \{0^{|x|}\}_{R'})
\]
– except for \( K \), the CCA2 attacker generates all keys.
– encryptions (except for that of \( AOO_1(\hat{\phi}, \vec{x}) \)) with \( K \) are done by submitting two identical requests to the encryption oracle.
– the attacker keeps a table recording which encryption belongs to which plaintext.
– decryptions of ciphertexts provided by the encryption oracle are done by looking them up in the table.
– decryptions of strings not provided by the oracle are done by submitting to the decryption oracle.
– when the challenge state is reached, the interpretations of \( \vec{x} \) and \( AOO_1(\hat{\phi}, \vec{x}) \) are computed.
– \( AOO_1(\hat{\phi}, \vec{x}) \) is submitted to the encryption oracle along with a string of 0’s of the same length. Let \( c_0 \) denote the encryption received from the oracle. Note that the adversary does not know if this is the encryption of \( AOO_1(\hat{\phi}, \vec{x}) \) or of the 0’s.
– apply \( AOO_{21} \) and \( AOO_{22} \) to \( \hat{\phi}, \vec{x}, c_0 \).
– because of (5) and (6) on \( S'' \), if the correct bit string was encrypted, the two computations are equal, and if not, they are different.