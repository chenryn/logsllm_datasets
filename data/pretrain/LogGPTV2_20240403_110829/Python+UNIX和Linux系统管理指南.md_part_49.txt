和IPAddress。OperatingSystem类允许我们定义不同的操作系统。我们定义该类具有
我们为模型定义了5个类：OperatingSystem、Service、HardwareComponent、Server
件组件，每种类型的硬件组件或许会在多个服务器上存在。因此，我们在Server与
器或许有许多在其上运行的服务，每种类型的服务可能会运行在许多主机上，因此在
Server类是这个清单管理系统的核心。每一个Server实例具有与之前三个类的单独关
关系。
classAdmin:
server =models.ForeignKey(Server)
address = models.TextField(blank=True, null=True)
class IPAddress(models.Model):
def
第11章
pass
www.TopSage.com
---
## Page 359
会太困难。
虑一个方案，希望浏览器可以显示数据，那么你可以尝试让Django去完成，一般来说不
个非常有用的工具了。但是这还仅是Django所能做的事情中起始的部分。如果你正在考
集提供简单、实用的界面。即使这些就是Django所有可能做的事情，那么它也已经是一
简单且可用方式保存并显示数据是有好处的。Django可以完成一些神奇的工作，为数据
示了Django管理主页面，并且图11-9展示了“添加硬件”表单。用数据库工具以连续、
图11-7显示了登录表单。
服务器的命令以及命令产生的输出结果：
我们现在准备启动Django开发服务器，并且尝试一下管理界面。以下是启动Django开发
新创建一个包含你在settings.py文件中设置的所有应用的表格。如果创建了auth表，也会
简单，但是它可以充分演示在Django的数据组件之间如何建立关系。
Server之间创建一个外键关系，因为一个IP地址应该仅属于一个服务器。这一示例非常
（片段）：
Django version 0.97-pre-SVN-unknown, using settings 'sysmanage.settings'
Development server is running at http://0.o.0.0:8080/
0 errors found
Adding permission
Adding
Adding
Password (again): Superuser created successfully.
Username (Leave blank to use 'jmjones'):E-mail address: PI:EMAIL
superusers defined.
Adding
Creating tabledjango_admin_log
assword:
 permission
permission
permission
server
'server
'service
'service
'message
一旦登录，就可以添加服务器、硬件、
entry
Can delete server
|Can add message'
Can
Can change service'
an
iCan delete log entry
Can
www.TopSage.com
1change
log entry
、操作系统等。图11-8展
StE 1 In9敏闷
---
## Page 360
346丨第11章
首先，例11-13是一个升级的urls.py。
介绍。
然后显示该服务器的详细信息，同样可以做。接下来，我们使用这些“建议”
特征的服务器页面，也可以做。并且如果希望能够在服务器列表的每一个条目上点击，
这样做。如果希望能够在每一个这些独立的条目上点击，然后显示一个仅包含具有独立
例如，如果希望有一个具有操作系统、硬件组件、服务等每一个类型的页面，我们可以
图11-8：Django管理主页面
图11-7：Django系统管理登录
Site administration
Users
htp:/192.168.205.
addresss
+http://192.
syst
www.TopSage.com
Add
Add
Add
Ad
Ad
Ado
gnittht
，继续
---
## Page 361
 # Create your views here.
from django.conf.urls.defaults import *
例11-14：清单视图 (views.py)
是视图模块。
接下来将要做的事情是添加函数到views模块，这是在URL映射文件中声明的。例11-14
什么不同。我们映射URL的正则表达式到函数，也使用了一些正则表达式组。
我们添加三个新行，映射非管理URL到函数。这实际与从Apache日志浏览器中看到的没
urlpatterns = patterns('',
例11-13：URL映射（urls.py)
图11-9：Django系统管理添加硬件组件
#(r'^sysmanage/',include('sysmanage.foo.urls'))
# Uncomment this for admin:
#Example:
Add hardware component
r'
def server_detail(request, server_id):
def main(request):
import models
from django.shortcuts import render_to_response
0peratingSystems
 jmjones@dinkbuntu:~/code/sysmanage/inventory$ mkdir templates
return render_to_response('server_detail.html', ('server': server})
return render_to_response('categorized.html', {'server_list': server_list,
else:
elifcategory
elif category
category_dict
server_list =[]
server_list =\
第11章
'svc':
'hw':
'Hardware'}
www.TopSage.com
'category_name': category_name})
'oS
list'
exact=category_id)
---
## Page 363
{% endblock %]}
{{ category }}::{ category_name }}
[% block content %]
[% block title %}Server List{% endblock %}
{% extends "base.html"%}
例11-16：分类模板(categorized.html)
有服务器的列表。在对数据库进行信息查询之后，categorized()函数传递信息到
ID（例如，用户点击的特定组件，如“3Com 905b Network Card”）到categorized()
main模板传递一个类别（os表示操作系统，hw表示硬件组件，svc表示服务）以及类别
categorized().
有指定类别条目的所有服务器。当用户点击这些链接时，它会转到另一个视图函数
别。对于每一类别逐条列出所有条目，且每一类别条目具有一个链接，可以查看具
这个模板非常简单。它将页面分为三个部分，每一部分对应一个我们希望看到的类
“categorized.html”模板。例11-16显示了“categorized.html”模板的内容。
[% endblock %}
[% for s in server_list %}
{% endfor %}
Hardware Components
{% endfor %}
[% for s in svc_list %]
Services
[% endfor %]
{% endfor %}
{{ s.name }
{ h.manufacturer }}
{% for h in hardware_list %}
www.TopSage.com
X
创建GUI丨349
---
## Page 364
350丨第11章
[% xotqpua %]
{% block content %}
例11-17：服务器详细信息模板(server_detail.html)
有什么硬件组成，服务器上正在运行什么操作系统，以及服务器的IP地址是什么。
作用是显示每一服务器的独立数据，例如，服务器上正在运行什么操作系统，服务器具
显示在例11-17中的“server_detail.html”模板或许是最长的模板，但是它非常简单。其
据，最后传递数据到“sever_detail.html”模板中。
server_detail()视图函数取得服务器id参数，并获取数据库中对应服务器的相关数
{% block title %}Server Detail[% endblock %}
[% extends "base.html" %}
用户可以点击到独立服务器的链接，这会转到server_detail()视图函数。
/div>
OS: {{ server.os.name }
Services:
Description: {{ server.description }}
Name: {{ server.name }}
{%endfor %}
IP Addresses:
[% endfor %]
Hardware:
[% endfor %}
{hw.manufacturer }} { hw.type } {{ hw.model }
{{
{
( service.name }}
ip.address }}
www.TopSage.com
---
## Page 365
间，你或许需要为自己生成一个简单的应用；另一些时候，你或许意识到并不需要它，
是一个非常有价值的技术。有时，你或许需要为某个用户创建一些简单的应用；其他时
创建和使用GUI应用程序似乎不满足传统的系统管理员的相关要求，但是却可以证明这
本章小结
图11-11：系统管理应用的操作系统类型CentOS（分类）
图11-10：系统管理应用主页面
和数据异航视图，如图11-10、图11-11和图11-12所示。
了一个访问数据库的友好方式，并且仅使用了少量的代码。我们能够创建自定义的排序
这是一个示例，演示了使用Django如何创建一个非常简单的数据库应用。管理界面提供
Operating System::CentOS 5.1 GNU/Linux
Category List
Hardware Components
·3Com
Services
Operating Systems
Category List
Apache
Yaa
www.TopSage.com
brgo'reillyblogs
brg
ServerList
Q-Google
创建GUI丨351
PDG
---
## Page 366
图11-12：系统管理应用的服务器细节
久，你或许就会惊奇地发现自己是如此频繁地使用它。
但是它或许会将一些任务完成得更流畅。一且你习惯了创建GUI应用，那么要不了太
IPAddresses:
Hardware:
Apache
Services:
Des
·192.168.1.11
第11章
http:
/192
www.TopSage.com
---
## Page 367
首先，最基本的Python的“简单序列化”机制或许是标准库中的pickle模块。或许
Pickle
列化与关系序列化之间的差异。