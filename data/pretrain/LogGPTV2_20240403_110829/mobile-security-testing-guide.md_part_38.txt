Binary Analysis
Binary analysis frameworks give you powerful ways to automate tasks that would be almost impossible to do
manually. Binary analysis frameworks typically use a technique called symbolic execution, which allow to determine
the conditions necessary to reach a specific target. It translates the program's semantics into a logical formula in
which some variables are represented by symbols with specific constraints. By resolving the constraints, you can find
the conditions necessary for the execution of some branch of the program.
Symbolic Execution
Symbolic execution is useful when you need to find the right input for reaching a certain block of code. In the following
example, you'll use Angr to solve a simple Android crackme in an automated fashion. Refer to the "Android Basic
Security Testing" chapter for installation instructions and basics.
The target crackme is a simple license key validation Android app. Granted, you won't usually find license key
validators like this, but the example should demonstrate the basics of static/symbolic analysis of native code. You can
use the same techniques on Android apps that ship with obfuscated native libraries (in fact, obfuscated code is often
put into native libraries specifically to make de-obfuscation more difficult).
The crackme takes the form of a native ELF binary that you can download here:
https://github.com/angr/angr-doc/tree/master/examples/android_arm_license_validation
Running the executable on any Android device should give you the following output:
$ adb push validate /data/local/tmp
[100%] /data/local/tmp/validate
$ adb shell chmod 755 /data/local/tmp/validate
$ adb shell /data/local/tmp/validate
Usage: ./validate 
$ adb shell /data/local/tmp/validate 12345
Incorrect serial (wrong format).
So far so good, but you know nothing about what a valid license key looks like. Where do we start? Fire up Cutter to
get a good look at what is happening. The main function is located at address 0x00001874 in the disassembly (note
that this is a PIE-enabled binary, and Cutter chooses 0x0 as the image base address).
280
Tampering and Reverse Engineering on Android
Function names have been stripped, but you can see some references to debugging strings. The input string appears
to be Base32-decoded (call to fcn.00001340). At the beginning of main , there's a length check at 0x00001898. It
makes sure that the length of the input string is exactly 16 characters. So you're looking for a Base32-encoded 16-
character string! The decoded input is then passed to the function fcn.00001760, which validates the license key.
281
Tampering and Reverse Engineering on Android
The decoded 16-character input string totals 10 bytes, so you know that the validation function expects a 10-byte
binary string. Next, look at the core validation function at 0x00001760:
╭ (fcn) fcn.00001760 268
│ fcn.00001760 (int32_t arg1);
│ ; var int32_t var_20h @ fp-0x20
│ ; var int32_t var_14h @ fp-0x14
│ ; var int32_t var_10h @ fp-0x10
│ ; arg int32_t arg1 @ r0
│ ; CALL XREF from fcn.00001760 (+0x1c4)
│ 0x00001760 push {r4, fp, lr}
│ 0x00001764 add fp, sp, 8
│ 0x00001768 sub sp, sp, 0x1c
│ 0x0000176c str r0, [var_20h] ; 0x20 ; "$!" ; arg1
│ 0x00001770 ldr r3, [var_20h] ; 0x20 ; "$!" ; entry.preinit0
│ 0x00001774 str r3, [var_10h] ; str.
│ ; 0x10
│ 0x00001778 mov r3, 0
│ 0x0000177c str r3, [var_14h] ; 0x14
│ ╭─ 0x00001784 ldr r3, [var_10h] ; str.
│ │ ; 0x10 ; entry.preinit0
│ ╎│ 0x00001788 ldrb r2, [r3]
│ ╎│ 0x0000178c ldr r3, [var_10h] ; str.
│ ╎│ ; 0x10 ; entry.preinit0
│ ╎│ 0x00001790 add r3, r3, 1
│ ╎│ 0x00001794 ldrb r3, [r3]
│ ╎│ 0x00001798 eor r3, r2, r3
│ ╎│ 0x0000179c and r2, r3, 0xff
│ ╎│ 0x000017a0 mvn r3, 0xf
│ ╎│ 0x000017a4 ldr r1, [var_14h] ; 0x14 ; entry.preinit0
│ ╎│ 0x000017a8 sub r0, fp, 0xc
│ ╎│ 0x000017ac add r1, r0, r1
│ ╎│ 0x000017b0 add r3, r1, r3
282
Tampering and Reverse Engineering on Android
│ ╎│ 0x000017b4 strb r2, [r3]
│ ╎│ 0x000017b8 ldr r3, [var_10h] ; str.
│ ╎│ ; 0x10 ; entry.preinit0
│ ╎│ 0x000017bc add r3, r3, 2 ; "ELF\x01\x01\x01" ; aav.0x00000001
│ ╎│ 0x000017c0 str r3, [var_10h] ; str.
│ ╎│ ; 0x10
│ ╎│ 0x000017c4 ldr r3, [var_14h] ; 0x14 ; entry.preinit0
│ ╎│ 0x000017c8 add r3, r3, 1
│ ╎│ 0x000017cc str r3, [var_14h] ; 0x14
│ ╎│ ; CODE XREF from fcn.00001760 (0x1780)
│ ╎╰─> 0x000017d0 ldr r3, [var_14h] ; 0x14 ; entry.preinit0
│ ╎ 0x000017d4 cmp r3, 4 ; aav.0x00000004 ; aav.0x00000001 ; aav.
0x00000001
│ ╰── 0x00001854 ldr r3, aav.0x00000288 ; [0x1870:4]=0x288 aav.0x00000288
│ │ 0x00001858 add r3, pc, r3 ; 0x1ae8 ; "Incorrect serial." ;
│ │ 0x0000185c mov r0, r3 ; 0x1ae8 ; "Incorrect serial." ;
│ │ 0x00001860 bl sym.imp.puts ; int puts(const char *s)
│ │ ; int puts("Incorrect serial.")
│ │ ; CODE XREF from fcn.00001760 (0x1850)
│ ╰──────> 0x00001864 sub sp, fp, 8
╰ 0x00001868 pop {r4, fp, pc} ; entry.preinit0 ; entry.preinit0 ;
If you look in the graph view you can see a loop with some XOR-magic happening at 0x00001784, which supposedly
decodes the input string.
283
Tampering and Reverse Engineering on Android
Starting from 0x000017dc, you can see a series of decoded values compared with values from further subfunction
calls.
Even though this doesn't look highly sophisticated, you'd still need to analyze more to completely reverse this check
and generate a license key that passes it. Now comes the twist: dynamic symbolic execution enables you to construct
a valid key automatically! The symbolic execution engine maps a path between the first instruction of the license
check (0x00001760) and the code that prints the "Product activation passed" message (0x00001840) to determine the
constraints on each byte of the input string.
284
Tampering and Reverse Engineering on Android
The solver engine then finds an input that satisfies those constraints: the valid license key.
You need to provide several inputs to the symbolic execution engine:
An address from which execution will start. Initialize the state with the first instruction of the serial validation
function. This makes the problem significantly easier to solve because you avoid symbolically executing the
Base32 implementation.
The address of the code block you want execution to reach. You need to find a path to the code responsible for
printing the "Product activation passed" message. This code block starts at 0x1840.
Addresses you don't want to reach. You're not interested in any path that ends with the block of code that prints
the "Incorrect serial" message (0x00001854).
Note that the Angr loader will load the PIE executable with a base address of 0x400000, so you must add this to the
addresses above. The solution is:
#!/usr/bin/python
# This is how we defeat the Android license check using Angr!
# The binary is available for download on GitHub:
# https://github.com/b-mueller/obfuscation-metrics/tree/master/crackmes/android/01_license_check_1
# Written by Bernhard -- bernhard [dot] mueller [at] owasp [dot] org
import angr
import claripy
import base64
load_options = {}
# Android NDK library path:
load_options['custom_ld_path'] = ['/Users/berndt/Tools/android-ndk-r10e/platforms/android-21/arch-arm/usr/lib']
b = angr.Project("./validate", load_options = load_options)
# The key validation function starts at 0x401760, so that's where we create the initial state.
# This speeds things up a lot because we're bypassing the Base32-encoder.
state = b.factory.blank_state(addr=0x401760)
initial_path = b.factory.path(state)
path_group = b.factory.path_group(state)
# 0x401840 = Product activation passed
# 0x401854 = Incorrect serial
path_group.explore(find=0x401840, avoid=0x401854)
found = path_group.found[0]
# Get the solution string from *(R11 - 0x24).
285
Tampering and Reverse Engineering on Android
addr = found.state.memory.load(found.state.regs.r11 - 0x24, endness='Iend_LE')
concrete_addr = found.state.se.any_int(addr)
solution = found.state.se.any_str(found.state.memory.load(concrete_addr,10))
print base64.b32encode(solution)
Note the last part of the program, where the final input string is retrieved—it appears as if you were simply reading the
solution from memory. You are, however, reading from symbolic memory—neither the string nor the pointer to it
actually exist! Actually, the solver is computing concrete values that you could find in that program state if you
observed the actual program run up to that point.
Running this script should return the following:
(angr) $ python solve.py
WARNING | 2017-01-09 17:17:03,664 | cle.loader | The main binary is a position-independent executable. It is be
ing loaded with a base address of 0x400000.
JQAE6ACMABNAAIIA
Tampering and Runtime Instrumentation
First, we'll look at some simple ways to modify and instrument mobile apps. Tampering means making patches or run-
time changes to the app to affect its behavior. For example, you may want to deactivate SSL pinning or binary
protections that hinder the testing process. Runtime Instrumentation encompasses adding hooks and runtime patches
to observe the app's behavior. In mobile app-sec however, the term loosely refers to all kinds of run-time
manipulation, including overriding methods to change behavior.
Patching, Repackaging, and Re-Signing
Making small changes to the Android Manifest or bytecode is often the quickest way to fix small annoyances that
prevent you from testing or reverse engineering an app. On Android, two issues in particular happen regularly:
1. You can't intercept HTTPS traffic with a proxy because the app employs SSL pinning.
2. You can't attach a debugger to the app because the android:debuggable flag is not set to "true" in the Android
Manifest.
In most cases, both issues can be fixed by making minor changes to the app (aka. patching) and then re-signing and
repackaging it. Apps that run additional integrity checks beyond default Android code-signing are an exception—in
these cases, you have to patch the additional checks as well.
The first step is unpacking and disassembling the APK with apktool :
$ apktool d target_apk.apk
Note: To save time, you may use the flag --no-src if you only want to unpack the APK but not disassemble
the code. For example, when you only want to modify the Android Manifest and repack immediately.
Patching Example: Disabling Certificate Pinning
Certificate pinning is an issue for security testers who want to intercept HTTPS communication for legitimate reasons.
Patching bytecode to deactivate SSL pinning can help with this. To demonstrate bypassing certificate pinning, we'll
walk through an implementation in an example application.
Once you've unpacked and disassembled the APK, it's time to find the certificate pinning checks in the Smali source
code. Searching the code for keywords such as "X509TrustManager" should point you in the right direction.
286
Tampering and Reverse Engineering on Android
In our example, a search for "X509TrustManager" returns one class that implements a custom TrustManager. The
derived class implements the methods checkClientTrusted , checkServerTrusted , and getAcceptedIssuers .
To bypass the pinning check, add the return-void opcode to the first line of each method. This opcode causes the
checks to return immediately. With this modification, no certificate checks are performed, and the application accepts
all certificates.
.method public checkServerTrusted([LJava/security/cert/X509Certificate;Ljava/lang/String;)V
.locals 3
.param p1, "chain" # [Ljava/security/cert/X509Certificate;
.param p2, "authType" # Ljava/lang/String;
.prologue
return-void # a:Ljava/util/ArrayList;
invoke-virtual {v1}, Ljava/util/ArrayList;->iterator()Ljava/util/Iterator;
move-result-object v1
:goto_0
invoke-interface {v1}, Ljava/util/Iterator;->hasNext()Z
This modification will break the APK signature, so you'll also have to re-sign the altered APK archive after repackaging
it.
Patching Example: Making an App Debuggable
Every debugger-enabled process runs an extra thread for handling JDWP protocol packets. This thread is started only
for apps that have the android:debuggable="true" flag set in their manifest file's  element. This is the
typical configuration of Android devices shipped to end users.
When reverse engineering apps, you'll often have access to the target app's release build only. Release builds aren't
meant to be debugged—after all, that's the purpose of debug builds. If the system property ro.debuggable is set to
"0", Android disallows both JDWP and native debugging of release builds. Although this is easy to bypass, you're still
likely to encounter limitations, such as a lack of line breakpoints. Nevertheless, even an imperfect debugger is still an
invaluable tool, being able to inspect the run time state of a program makes understanding the program a lot easier.
To convert a release build into a debuggable build, you need to modify a flag in the Android Manifest file
(AndroidManifest.xml). Once you've unpacked the app (e.g. apktool d --no-src UnCrackable-Level1.apk ) and
decoded the Android Manifest, add android:debuggable="true" to it using a text editor:
Note: To get apktool to do this for you automatically, use the -d or --debug flag while building the APK. This will
add android:debuggable="true" to the Android Manifest.
Even if we haven't altered the source code, this modification also breaks the APK signature, so you'll also have to re-
sign the altered APK archive.
Repackaging
You can easily repackage an app by doing the following:
$ cd UnCrackable-Level1
$ apktool b
$ zipalign -v 4 dist/UnCrackable-Level1.apk ../UnCrackable-Repackaged.apk
287
Tampering and Reverse Engineering on Android
Note that the Android Studio build tools directory must be in the path. It is located at [SDK-Path]/build-
tools/[version] . The zipalign and apksigner tools are in this directory.
Re-Signing
Before re-signing, you first need a code-signing certificate. If you have built a project in Android Studio before, the IDE
has already created a debug keystore and certificate in $HOME/.android/debug.keystore . The default password for this
KeyStore is "android" and the key is called "androiddebugkey".
The standard Java distribution includes keytool for managing KeyStores and certificates. You can create your own
signing certificate and key, then add it to the debug KeyStore:
$ keytool -genkey -v -keystore ~/.android/debug.keystore -alias signkey -keyalg RSA -keysize 2048 -validity 200
00
After the certificate is available, you can re-sign the APK with it. Be sure that apksigner is in the path and that you
run it from the folder where your repackaged APK is located.
$ apksigner sign --ks ~/.android/debug.keystore --ks-key-alias signkey UnCrackable-Repackaged.apk
Note: If you experience JRE compatibility issues with apksigner , you can use jarsigner instead. When you do this,
zipalign must be called after signing.
$ jarsigner -verbose -keystore ~/.android/debug.keystore ../UnCrackable-Repackaged.apk signkey
$ zipalign -v 4 dist/UnCrackable-Level1.apk ../UnCrackable-Repackaged.apk
Now you may reinstall the app:
$ adb install UnCrackable-Repackaged.apk
The “Wait For Debugger” Feature
The UnCrackable App is not stupid: it notices that it has been run in debuggable mode and reacts by shutting down. A
modal dialog is shown immediately, and the crackme terminates once you tap "OK".
Fortunately, Android's "Developer options" contain the useful "Wait for Debugger" feature, which allows you to
automatically suspend an app doing startup until a JDWP debugger connects. With this feature, you can connect the
debugger before the detection mechanism runs, and trace, debug, and deactivate that mechanism. It's really an unfair