int rl_set_signals (void)
Install Readline’s signal handler for SIGINT, SIGQUIT, SIGTERM, SIGALRM, SIGTSTP,
SIGTTIN, SIGTTOU, and SIGWINCH, depending on the values of rl_catch_signals and
rl_catch_sigwinch.
[Function]
int rl_clear_signals (void)
Remove all of the Readline signal handlers installed by rl_set_signals().
2.6 Custom Completers
Typically, a program that reads commands from the user has a way of disambiguating
commands and data. If your program is one of these, then it can provide completion for
commands, data, or both. The following sections describe how your program and Readline
cooperate to provide this service.
2.6.1 How Completing Works
In order to complete some text, the full list of possible completions must be available. That
is, it is not possible to accurately expand a partial word without knowing all of the possible
words which make sense in that context. The Readline library provides the user interface
to completion, and two of the most common completion functions: ﬁlename and username.
For completing other types of text, you must write your own completion function. This
section describes exactly what such functions must do, and provides an example.
There are three major functions used to perform completion:
1. The user-interface function rl_complete().
This function is called with the same
arguments as other bindable Readline functions: count and invoking key. It isolates
the word to be completed and calls rl_completion_matches() to generate a list of
possible completions. It then either lists the possible completions, inserts the possible
completions, or actually performs the completion, depending on which behavior is
desired.
2. The internal function rl_completion_matches() uses an application-supplied gener-
ator function to generate the list of possible matches, and then returns the array of
these matches. The caller should place the address of its generator function in rl_
completion_entry_function.
3. The generator function is called repeatedly from rl_completion_matches(), returning
a string each time. The arguments to the generator function are text and state. text
is the partial word to be completed. state is zero the ﬁrst time the function is called,
allowing the generator to perform any necessary initialization, and a positive non-
zero integer for each subsequent call. The generator function returns (char *)NULL to
inform rl_completion_matches() that there are no more possibilities left. Usually
the generator function computes the list of possible completions when state is zero,
and returns them one at a time on subsequent calls. Each string the generator function
returns as a match must be allocated with malloc(); Readline frees the strings when
it has ﬁnished with them. Such a generator function is referred to as an application-
speciﬁc completion function.
Chapter 2: Programming with GNU Readline
42
[Function]
int rl_complete (int ignore, int invoking key)
Complete the word at or before point. You have supplied the function that does the
initial simple matching selection algorithm (see rl_completion_matches()). The
default is to do ﬁlename completion.
[Variable]
rl_compentry_func_t * rl_completion_entry_function
This is a pointer to the generator function for rl_completion_matches(). If the
value of rl_completion_entry_function is NULL then the default ﬁlename generator
function, rl_filename_completion_function(), is used.
An application-speciﬁc
completion function is a function whose address is assigned to rl_completion_entry_
function and whose return values are used to generate possible completions.
2.6.2 Completion Functions
Here is the complete list of callable completion functions present in Readline.
[Function]
int rl_complete_internal (int what to do)
Complete the word at or before point. what to do says what to do with the com-
pletion. A value of ‘?’ means list the possible completions. ‘TAB’ means do standard
completion. ‘*’ means insert all of the possible completions. ‘!’ means to display all
of the possible completions, if there is more than one, as well as performing partial
completion. ‘@’ is similar to ‘!’, but possible completions are not listed if the possible
completions share a common preﬁx.
[Function]
int rl_complete (int ignore, int invoking key)
Complete the word at or before point. You have supplied the function that does
the initial simple matching selection algorithm (see rl_completion_matches() and
rl_completion_entry_function). The default is to do ﬁlename completion. This
calls rl_complete_internal() with an argument depending on invoking key.
[Function]
int rl_possible_completions (int count, int invoking key)
List the possible completions. See description of rl_complete (). This calls rl_
complete_internal() with an argument of ‘?’.
[Function]
int rl_insert_completions (int count, int invoking key)
Insert the list of possible completions into the line, deleting the partially-completed
word. See description of rl_complete(). This calls rl_complete_internal() with
an argument of ‘*’.
[Function]
int rl_completion_mode (rl command func t *cfunc)
Returns the apppriate value to pass to rl_complete_internal() depending on
whether cfunc was called twice in succession and the values of the show-all-if-
ambiguous and show-all-if-unmodified variables. Application-speciﬁc completion
functions may use this function to present the same interface as rl_complete().
[Function]
char ** rl_completion_matches (const char *text,
rl compentry func t *entry func)
Returns an array of strings which is a list of completions for text. If there are no
completions, returns NULL. The ﬁrst entry in the returned array is the substitution
Chapter 2: Programming with GNU Readline
43
for text. The remaining entries are the possible completions. The array is terminated
with a NULL pointer.
entry func is a function of two args, and returns a char *. The ﬁrst argument is
text. The second is a state argument; it is zero on the ﬁrst call, and non-zero on
subsequent calls. entry func returns a NULL pointer to the caller when there are no
more matches.
[Function]
char * rl_filename_completion_function (const char *text, int
state)
A generator function for ﬁlename completion in the general case. text is a partial ﬁle-
name. The Bash source is a useful reference for writing application-speciﬁc completion
functions (the Bash completion functions call this and other Readline functions).
[Function]
char * rl_username_completion_function (const char *text, int
state)
A completion generator for usernames. text contains a partial username preceded by
a random character (usually ‘~’). As with all completion generators, state is zero on
the ﬁrst call and non-zero for subsequent calls.
2.6.3 Completion Variables
[Variable]
rl_compentry_func_t * rl_completion_entry_function
A pointer to the generator function for rl_completion_matches(). NULL means to
use rl_filename_completion_function(), the default ﬁlename completer.
[Variable]
rl_completion_func_t * rl_attempted_completion_function
A pointer to an alternative function to create matches. The function is called with
text, start, and end.
start and end are indices in rl_line_buffer deﬁning the
boundaries of text, which is a character string. If this function exists and returns
NULL, or if this variable is set to NULL, then rl_complete() will call the value of
rl_completion_entry_function to generate matches, otherwise the array of strings
returned will be used.
If this function sets the rl_attempted_completion_over
variable to a non-zero value, Readline will not perform its default completion even if
this function returns no matches.
[Variable]
rl_quote_func_t * rl_filename_quoting_function
A pointer to a function that will quote a ﬁlename in an application-speciﬁc fashion.
This is called if ﬁlename completion is being attempted and one of the characters
in rl_filename_quote_characters appears in a completed ﬁlename. The function
is called with text, match type, and quote pointer. The text is the ﬁlename to be
quoted.
The match type is either SINGLE_MATCH, if there is only one completion
match, or MULT_MATCH. Some functions use this to decide whether or not to insert a
closing quote character. The quote pointer is a pointer to any opening quote character
the user typed. Some functions choose to reset this character.
[Variable]
rl_dequote_func_t * rl_filename_dequoting_function
A pointer to a function that will remove application-speciﬁc quoting characters from
a ﬁlename before completion is attempted, so those characters do not interfere with
matching the text against names in the ﬁlesystem. It is called with text, the text
Chapter 2: Programming with GNU Readline
44
of the word to be dequoted, and quote char, which is the quoting character that
delimits the ﬁlename (usually ‘’’ or ‘"’). If quote char is zero, the ﬁlename was not
in an embedded string.
[Variable]
rl_linebuf_func_t * rl_char_is_quoted_p
A pointer to a function to call that determines whether or not a speciﬁc character
in the line buﬀer is quoted, according to whatever quoting mechanism the program
calling Readline uses. The function is called with two arguments: text, the text of the
line, and index, the index of the character in the line. It is used to decide whether a
character found in rl_completer_word_break_characters should be used to break
words for the completer.
[Variable]
rl_compignore_func_t * rl_ignore_some_completions_function
This function, if deﬁned, is called by the completer when real ﬁlename completion
is done, after all the matching names have been generated. It is passed a NULL ter-
minated array of matches. The ﬁrst element (matches[0]) is the maximal substring
common to all matches. This function can re-arrange the list of matches as required,
but each element deleted from the array must be freed.
[Variable]
rl_icppfunc_t * rl_directory_completion_hook
This function, if deﬁned, is allowed to modify the directory portion of ﬁlenames
Readline completes. It is called with the address of a string (the current directory
name) as an argument, and may modify that string. If the string is replaced with
a new string, the old value should be freed. Any modiﬁed directory name should
have a trailing slash. The modiﬁed value will be displayed as part of the completion,
replacing the directory portion of the pathname the user typed. It returns an integer
that should be non-zero if the function modiﬁes its directory argument. It could be
used to expand symbolic links or shell variables in pathnames. At the least, even if
no other expansion is performed, this function should remove any quote characters
from the directory name, because its result will be passed directly to opendir().
[Variable]
rl_dequote_func_t * rl_filename_rewrite_hook
If non-zero, this is the address of a function called when reading directory entries from
the ﬁlesystem for completion and comparing them to the partial word to be completed.
The function should perform any necesary application or system-speciﬁc conversion on
the ﬁlename, such as converting between character sets or converting from a ﬁlesystem
format to a character input format. The function takes two arguments: fname, the
ﬁlename to be converted, and fnlen, its length in bytes. It must either return its ﬁrst
argument (if no conversion takes place) or the converted ﬁlename in newly-allocated
memory. The converted form is used to compare against the word to be completed,
and, if it matches, is added to the list of matches. Readline will free the allocated
string.
[Variable]
rl_compdisp_func_t * rl_completion_display_matches_hook
If non-zero, then this is the address of a function to call when completing a word would
normally display the list of possible matches. This function is called in lieu of Readline
displaying the list. It takes three arguments: (char **matches, int num matches,
int max length) where matches is the array of matching strings, num matches is the
number of strings in that array, and max length is the length of the longest string in
Chapter 2: Programming with GNU Readline
45
that array. Readline provides a convenience function, rl_display_match_list, that
takes care of doing the display to Readline’s output stream. That function may be
called from this hook.
[Variable]
const char * rl_basic_word_break_characters
The basic list of characters that signal a break between words for the completer
routine. The default value of this variable is the characters which break words for
completion in Bash: " \t\n\"\\’‘@$><=;|&{(".
[Variable]
const char * rl_basic_quote_characters
A list of quote characters which can cause a word break.
[Variable]
const char * rl_completer_word_break_characters
The list of characters that signal a break between words for rl_complete_
internal(). The default list is the value of rl_basic_word_break_characters.
[Variable]
rl_cpvfunc_t * rl_completion_word_break_hook
If non-zero, this is the address of a function to call when Readline is deciding where
to separate words for word completion. It should return a character string like rl_
completer_word_break_characters to be used to perform the current completion.
The function may choose to set rl_completer_word_break_characters itself. If the
function returns NULL, rl_completer_word_break_characters is used.
[Variable]
const char * rl_completer_quote_characters
A list of characters which can be used to quote a substring of the line. Completion
occurs on the entire substring, and within the substring rl_completer_word_break_
characters are treated as any other character, unless they also appear within this
list.
[Variable]
const char * rl_filename_quote_characters
A list of characters that cause a ﬁlename to be quoted by the completer when they
appear in a completed ﬁlename. The default is the null string.
[Variable]
const char * rl_special_prefixes
The list of characters that are word break characters, but should be left in text when
it is passed to the completion function. Programs can use this to help determine what
kind of completing to do. For instance, Bash sets this variable to "$@" so that it can
complete shell variables and hostnames.
[Variable]
int rl_completion_query_items
Up to this many items will be displayed in response to a possible-completions call.
After that, readline asks the user if she is sure she wants to see them all. The default
value is 100. A negative value indicates that Readline should never ask the user.
[Variable]
int rl_completion_append_character
When a single completion alternative matches at the end of the command line, this
character is appended to the inserted completion text. The default is a space character
(‘ ’).
Setting this to the null character (‘\0’) prevents anything being appended
automatically. This can be changed in application-speciﬁc completion functions to
provide the “most sensible word separator character” according to an application-
speciﬁc command line syntax speciﬁcation.
Chapter 2: Programming with GNU Readline
46
[Variable]
int rl_completion_suppress_append
If non-zero, rl completion append character is not appended to matches at the end
of the command line, as described above. It is set to 0 before any application-speciﬁc
completion function is called, and may only be changed within such a function.
[Variable]
int rl_completion_quote_character
When Readline is completing quoted text, as delimited by one of the characters in
rl completer quote characters, it sets this variable to the quoting character found.
This is set before any application-speciﬁc completion function is called.
[Variable]
int rl_completion_suppress_quote
If non-zero, Readline does not append a matching quote character when performing
completion on a quoted string. It is set to 0 before any application-speciﬁc completion
function is called, and may only be changed within such a function.
[Variable]
int rl_completion_found_quote
When Readline is completing quoted text, it sets this variable to a non-zero value if
the word being completed contains or is delimited by any quoting characters, including
backslashes. This is set before any application-speciﬁc completion function is called.
[Variable]
int rl_completion_mark_symlink_dirs
If non-zero, a slash will be appended to completed ﬁlenames that are symbolic links
to directory names, subject to the value of the user-settable mark-directories variable.
This variable exists so that application-speciﬁc completion functions can override the
user’s global preference (set via the mark-symlinked-directories Readline variable)
if appropriate. This variable is set to the user’s preference before any application-
speciﬁc completion function is called, so unless that function modiﬁes the value, the
user’s preferences are honored.
[Variable]
int rl_ignore_completion_duplicates
If non-zero, then duplicates in the matches are removed. The default is 1.
[Variable]
int rl_filename_completion_desired
Non-zero means that the results of the matches are to be treated as ﬁlenames. This
is always zero when completion is attempted, and can only be changed within an
application-speciﬁc completion function. If it is set to a non-zero value by such a
function, directory names have a slash appended and Readline attempts to quote com-