title:Funny Accents: Exploring Genuine Interest in Internationalized Domain
Names
author:Victor Le Pochat and
Tom van Goethem and
Wouter Joosen
Funny Accents: Exploring Genuine
Interest in Internationalized
Domain Names
Victor Le Pochat(B)
, Tom Van Goethem, and Wouter Joosen
imec-DistriNet, KU Leuven, 3001 Leuven, Belgium
{victor.lepochat,tom.vangoethem,wouter.joosen}@cs.kuleuven.be
Abstract. International Domain Names (IDNs) were introduced to sup-
port non-ASCII characters in domain names. In this paper, we explore
IDNs that hold genuine interest, i.e. that owners of brands with dia-
critical marks may want to register and use. We generate 15 276 candi-
date IDNs from the page titles of popular domains, and see that 43%
are readily available for registration, allowing for spooﬁng or phishing
attacks. Meanwhile, 9% are not allowed by the respective registry to
be registered, preventing brand owners from owning the IDN. Based on
WHOIS records, DNS records and a web crawl, we estimate that at least
50% of the 3 189 registered IDNs have the same owner as the original
domain, but that 35% are owned by a diﬀerent entity, mainly domain
squatters; malicious activity was not observed. Finally, we see that appli-
cation behavior toward these IDNs remains inconsistent, hindering user
experience and therefore widespread uptake of IDNs, and even uncover
a phishing vulnerability in iOS Mail.
Keywords: Internationalized Domain Names · Phishing ·
Domain squatting · Homograph attack
1 Introduction
The Internet has become a global phenomenon, with more than half of the
world’s households being estimated to have Internet access [2]. The English lan-
guage and Latin alphabet remain dominant, but multilingual content is enjoy-
ing increased popularity [19,59]. However, one crucial part of the Internet, the
Domain Name System (DNS), has historically been limited to ASCII charac-
ters [5,27,46].
Internationalized Domain Names (IDNs) [20,35] have been introduced to
address this problem, and domain names can now contain (Unicode) characters
from various languages and scripts. IDNs allow end users to refer to websites
in their native language, and have helped to increase linguistic diversity, with a
strong correlation between a website’s language and the script of its IDN [19].
Acceptance of IDNs relies on support by web applications, and while this has
been improving, signiﬁcant gaps that present a barrier to user recognition and
c(cid:2) Springer Nature Switzerland AG 2019
D. Choﬀnes and M. Barcellos (Eds.): PAM 2019, LNCS 11419, pp. 178–194, 2019.
https://doi.org/10.1007/978-3-030-15986-3_12
Funny Accents: Exploring Genuine Interest in IDNs
179
adoption remain [19]. Moreover, IDNs have seen abuse, with malicious actors
registering domains that use visually similar characters to impersonate popular
domains for phishing attacks [21,28,41]. This further complicates how browsers
choose between displaying IDNs and protecting end users [1,44].
In this paper, we explore (ab)use of IDNs for over 15 000 popular brands and
phrases that contain non-ASCII characters (e.g. “Nestl´e”), obtained through the
presence of their ASCII equivalent in a set of popular domains (nestle.com). For
these, we deﬁne IDNs that hold genuine interest (nestl´e.com): these IDNs can
enhance user experience as they are easier and more natural to read and correctly
understand, and both end users and brand owners may therefore prefer to use
them. Moreover, country-speciﬁc keyboard layouts often feature dedicated keys
for characters with accents, making typing them no more diﬃcult than non-
accented letters. We study whether owners of popular domains where an IDN
with genuine interest exists have made the eﬀort to register and use it.
However, these IDNs can also attract malicious activity. While previous work
studied abuse of IDNs resembling very popular brands [41], these brands gen-
erally do not feature accents, meaning that users are less prone to use or trust
the IDNs, and brand owners are not inclined to own them except for defensive
purposes. In contrast, as our IDNs with genuine interest appear ‘valid’ to end
users, it becomes even more diﬃcult to distinguish a legitimate website from an
attempt at phishing, and the domains are therefore more valuable to malicious
actors. This also enables attacks akin to typosquatting [16], as users may type
the (non-)accented version of a domain, even though this may host a diﬀerent
website. We determine whether these IDNs are still open for or already see abuse.
In summary, we make the following contributions: (1) we generate 15 276
candidate IDNs with genuine interest as derived from the page titles of popular
domains; (2) we see that 43% can still easily be registered, e.g. for domain
squatting or abuse by malicious parties; (3) we estimate at least 50% of the
IDNs to share ownership with the original domain, but 35% to have diﬀerent
owners, mostly domain squatters; (4) we see that browsers and email clients
display IDNs inconsistently: our survey even leads us to discover a vulnerability
in iOS Mail that enables phishing for domains with ß.
2 Background and Related Work
Internationalized Domain Names. Through the Domain Name System (DNS),
user-friendly domain names are translated into IP addresses. Domain names rep-
resent a hierarchy, with the registries managing the top-level domains (e.g. .com)
usually delegating the public oﬀering of second-level domains (e.g. example.com)
to registrars. Originally, the LDH convention restricted domain names to ASCII
letters, digits and hyphens [5,27,46]. However, languages like French and Ger-
man use Latin characters with diacritics, and e.g. Arabic and Chinese use diﬀer-
ent character sets altogether. To provide a universal character encoding of these
writing systems, the Unicode Standard [65] was developed.
To support domain names with Unicode labels, IETF developed the Interna-
tionalized Domain Names in Applications (IDNA2003) protocol in 2003 [20]. To
180
V. Le Pochat et al.
maintain compatibility with existing protocols and systems, this protocol uses
the Punycode algorithm [10] to convert Unicode labels (“U-label”) to an ASCII
Compatible Encoding (ACE) label starting with xn-- and containing only ASCII
characters (“A-label”). In 2010, the standard was revised (IDNA2008) [35],
mainly to add support for newer versions of the Unicode Standard.
Homograph Attacks. Homographs are strings that contain homoglyphs or visu-
ally resembling characters, and can be used to trick users into thinking that they
are visiting one domain while actually browsing another, opening up opportuni-
ties for web spooﬁng or phishing [14,28]. While certain ASCII characters (e.g.
lower case l and upper case I) already allowed for confusion, the introduction of
IDNs gave rise to a whole new set of potential homographs, using either diacrit-
ics or resembling characters from other scripts. Evaluations over time of browser
and email client behavior regarding IDNs have found that browsers have imple-
mented countermeasures in response to vulnerabilities to homograph attacks,
but that they are not (yet) fully eﬀective [24–26,41,45,71].
Previous studies have shown IDNs confusable with popular domains to exist
on a modest scale and for relatively benign purposes such as parking [21,28]. In
2018, Liu et al. [41] detected 1 516 out of 1.4 million registered IDNs to exploit
homographs for targeting domains in Alexa’s top 1 000. Only 4.82% belonged
to the same owner as the original domain. Moreover, they generated 42 434
additional IDNs with suﬃcient visual similarity that are still unregistered. Tian
et al. [66] searched for phishing sites that impersonate a set of 702 popular brands
both in content and in domain, a.o. through homograph domains. Several indus-
try reports have addressed homograph attacks in the wild, seeing circumvention
of spam ﬁlters [70], phishing, malware and botnet abuse [38] and popular as well
as ﬁnancial websites being main targets [56].
Domain Squatting. Domain names can be exploited for deceiving end users:
involuntary errors redirect traﬃc to unintended destinations [3,15,16,50,63,67,
69], while credible domain names may create the perception of dealing with a
legitimate party [34,43,48]. Spaulding et al. [61] reviewed techniques to generate,
abuse and counteract deceptive domains. Liu et al. [41] found 1 497 IDNs that
combine domains from Alexa’s top 1 000 with keywords containing non-ASCII
characters. They also mention a type of abuse where the IDN is the translation
of a brand name to another language, but do not conduct any experiments.
3 Methods
3.1 Generating Candidate Domains
In order to obtain IDNs with genuine interest, we start from a list of popu-
lar domains. While the Alexa top million ranking is commonly used, Scheitle
et al. [55] and Le Pochat et al. [39] have shown that it has become very volatile
and disagrees with other rankings, while the latter proved that manipulation
by malicious actors requires very low eﬀort. Therefore, we use the Tranco list1
1 https://tranco-list.eu/list/RQ4M/1000000.
Funny Accents: Exploring Genuine Interest in IDNs
181
Table 1. Candidate IDNs are generated by searching relevant substitutions within a
domain name using its root page title.
proposed by Le Pochat et al. [39], a list of one million domains generated by
combining four rankings over 30 days (here 30 July to 28 August 2018), in order
to require prolonged popularity from multiple vantage points.
We check for each domain whether it corresponds to a string that contains
diacritical marks, i.e. where there could be genuine interest in adopting a variant
IDN. For this purpose, we look for plausible substitutions with accented words
in the title of its root page. To collect these title strings, we use a distributed
crawler setup of 4 machines with 4 CPU cores and 8 GB RAM, using Ubuntu
16.04 with Chromium version 66.0.3359.181 in headless mode.
We then convert this title to lowercase and remove punctuation, after which
two strings are generated: either diacritical marks are simply removed, or
language-speciﬁc substitutions are applied (as listed in Appendix A). The lat-
ter covers the common practice in for example German to use replacements such
as ae for ¨a. We then compare these converted (ASCII) strings with the domain
name: we favor the case where the full domain is found, but also consider cases
where single words are shared. Finally, if such cases are found, we retrieve the
corresponding accented form from the original title and apply this substitution
to the original domain name, resulting in the candidate IDN. Table 1 illustrates
our approach.
3.2 Retrieving Domain-Related Data
To understand if and how these IDNs are used, we collect the following data:
DNS Records. To check whether candidate IDNs exist in the DNS (i.e. are regis-
tered) and how they are conﬁgured, we request A, MX, NS and SOA records for both
the original and candidate domain. If all records return an NXDOMAIN response, we
assume the domain to be unregistered. Otherwise, we verify whether the name-
server is properly set up (no SERVFAIL) and if there are A records (suggesting a
reachable website) or only other records (suggesting another purpose).
Domain Eligibility. A TLD registry is free to support IDNs or not, and if they
do, they may only allow a speciﬁc set of characters. For country code TLDs
this set usually consists of the characters in languages spoken in that TLD’s
country, which can help in avoiding homograph attacks by prohibiting confusable
characters that would normally not be used in those languages.
182
V. Le Pochat et al.
ICANN’s IDN guidelines [29] require registries to publish “Label Genera-
tion Rulesets” (LGR), i.e. lists with permitted Unicode code points, in IANA’s
Repository for IDN Practices [30]. However, as of this publication, only six TLDs
had published these machine readable LGRs. For 626 other TLDs, the repository
contains simple text ﬁles that list the code points. Where possible, we parse these
ﬁles and generate the corresponding LGRs with ICANN’s LGR Toolset [31]. For
the remaining TLDs, no information is available from the repository. We manu-
ally search the IDN policy and generate an LGR for 30 additional TLDs. Finally,
we validate our candidate domains against these LGRs with the LGR Toolset
to determine whether they are allowed by their respective registries.
Domain Availability. To determine whether unregistered domains can be readily
bought through a popular registrar, we query GoDaddy’s API [22] for their
availability. This data complements the eligibility data, as further restrictions
may apply for certain TLDs (e.g. being based in that TLD’s country): in this
case the API returns an error indicating that the TLD is unsupported, otherwise
the API returns whether the domain is (un)available.