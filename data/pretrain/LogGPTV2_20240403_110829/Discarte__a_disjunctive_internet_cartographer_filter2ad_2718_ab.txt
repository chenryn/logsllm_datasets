much of the network. Further, our experiments use TR probes with
and without RR set, so any information gained from RR strictly
increases our understanding of the topology.
Second, routers might choose to drop or ﬁlter packets with IP
options. Of the 602,136 IP addresses of routers we observed within
nine hops of our vantage points (that could have dropped RR), only
8,441 (1%) dropped packets with record route. We mitigate this
limitation by running all traces with and without RR set.
3. ADDRESS ALIGNMENT
In order to achieve the beneﬁts of cross-validation (Section 2),
addresses discovered by TR and RR must be correctly aligned.
Address alignment is the process of matching the IP addresses dis-
covered by RR to the corresponding addresses discovered by TR.
Accurate address alignment requires classifying the RR implemen-
tation type of each router in a trace and correctly handling tricky
topology features.
3.1 Under-Standardized RR Implementations
The record route IP option [33] tells routers to record their IP
address into a buffer in a packet’s IP header. The interface that is
recorded is the ﬁrst source of implementation variation. Although
RFC 791 states that a router should record “its own Internet ad-
dress as known in the environment into which this data-gram is
being forwarded,” we have observed that routers record the address
corresponding to the incoming, outgoing, or internal interface de-
pending on implementation. The second implementation variation
we have observed is whether the address is recorded for an expiring
packet, that is, when a packet arrives with TTL=1.
We observe six different RR implementations. We describe each
implementation, sorted in order of popularity, along with our best
estimate of its manufacturer. An implementation’s popularity is a
function of the total number of routers we were able to classify.
Departing: 61.9% This implementation updates the RR array as
packets leave the router, and thus does not update the RR
array for expiring packets. That is, when a TTL=1 packet ar-
rives at a router, the router does not add an address to the RR
array. When a packet with TTL>1 passes through the router,
the outgoing interface address is recorded. We associate this
behavior with Cisco routers due to its popularity and private
communications with Cisco engineers.
MPLS: 13.3% This implementation behaves like a Departing router
(above), except for interfaces with MPLS [35] enabled. A
packet that exits an MPLS-enabled interface does not mod-
ify the RR array (similar to NotImpl, below). We know that
these interfaces use MPLS because they also implement the
ICMP unreachable MPLS trailers protocol [4] that returns
MPLS tunnel identiﬁers.
NotImpl: 9.1% Some routers disable or do not implement RR.
These routers pass RR probes through without modiﬁcation.
We believe that RR may have been previously overlooked as
a measurement technique due to inﬂated expectation of the
number of NotImpl routers.
Arriving: 7.1% In this implementation, the RR array is updated
when the packet arrives so TTL expiring packets are up-
dated. Some routers record the outgoing interface, while oth-
ers record the internal loopback interface. Internal loopback
addresses can be distinguished from outgoing addresses by
hand, for example, if the reverse DNS look-up of the ad-
dress contains the string “lo-”. We believe this RR-type cor-
responds to Juniper due to its appearance in the Abilene net-
work which uses Juniper routers [1].
Lazy: 5.8% These routers do not decrement TTL for packets with
the RR option set, and instead allow the packet to continue
S1
zzu1.6planetlab.edu.cn 
(219.243.200.37)
R2 (Arriving)
R3 (Departing)
?? (202.112.62.86)
?? (202.112.62.82)
R4 (Departing)
?? (202.112.62.85)
?? (202.112.62.81)
?? (219.243.200.38)
?? (202.112.62.210)
?? (202.112.62.209)
R5 (Lazy)
?? (202.112.53.218)
?? (202.112.53.217)
?? (202.112.53.214)
?? (202.112.53.213)
cdbj3.cernet.net
 (202.112.46.162)
?? (202.112.38.34)
?? (202.112.38.30)
?? (202.112.38.26)
?? (202.112.38.33)
?? (202.112.38.29)
?? (202.112.38.25)
bjcd3.cernet.net
(202.112.46.161)
?? (202.112.53.181)
E16
planetlab4.mnl.cs.sunysb.edu
(130.245.145.153)
S1
zzu1.6planetlab.edu.cn
 (219.243.200.37)
R2
Anonymous
R4
?? (219.243.200.38)
??
?? (202.112.62.81)
R5
E16
bjcd3.cernet.net
 (202.112.46.161)
planetlab4.mnl.cs.sunysb.edu
 (130.245.145.153)
Figure 2: Partial Trace from Zhengzhou University, China to SUNY Stony Brook, USA; inferred by DisCarte (top) and Rocket-
fuel techniques (bottom). DisCarte ﬁnds many load-balanced paths through an anonymous router (R3) and helps determine the
implementation class of each device along the path.
to the next hop. This caused signiﬁcant confusion in our
initial experiments using interleaved packets with and with-
out RR set. Publicly available router conﬁgurations at Na-
tional LambdaRail (NLR) suggest that Cisco’s Carrier line
of routers are Lazy. Of all RR implementations we have
observed, this is the only one that would seem to violate
RFC 791.
Mixed: 2.7% Some routers have mixed behavior for arriving and
departing packets. If the packet arrives and expires, the router
updates the RR array with the incoming interface address.
Else, if the packet does not expire, the router updates the RR
array with the outgoing interface address. We believe that
Linux-based IP stacks implement this behavior.
With the exception of the Lazy RR implementation, we believe
that these implementation variations correctly implement the RR
speciﬁcation as described in RFC 791. The variations in implemen-
tation arise because RR is underspeciﬁed, and we recommend ad-
ditions to the speciﬁcation (Section 10). Also, note that the “Flaky”
RR implementation, ﬁrst identiﬁed by Sherwood and Spring [38],
does not appear to exist. We believe that Flaky is a combination of
the Lazy implementation type above and equal-cost path routing of
different hop counts.
3.2 Topology Traps
We identify six topology features that complicate accurate topol-
ogy discovery. In this section, we catalog these features to show the
complexity inherent in topology discovery and motivate the need
for an automated inference tool.
Hidden routers do not decrement TTL and thus are not detected
by TTL-limited topology discovery. Hidden routers are caused
by certain conﬁgurations of multi-protocol label switching [35]
(MPLS) and result in missing nodes and incorrect link infer-
ences. As with anonymous routers, the RR IP options can be
used to detect hidden routers if supported. Also, the use of
MPLS can be detected by an optional MPLS tag attached as
a footer in TTL-exceeded messages [4]. We discovered 329
hidden routers in our experiments.
Non-standard ﬁrewall policies introduce varied sources of error.
In one case, a ﬁrewall in China forges TTL-exceeded mes-
sages from the destination [38] for packets with the RR op-
tion set. Also, we have observed ﬁrewalls that send ICMP
source quench, ICMP parameter problem, and ICMP admin-
istratively prohibited messages. Each of these behaviors must
be identiﬁed and removed from the data before processing.
Enabling IP options breaks load-balancing, spreading a single ﬂow
across multiple equal-cost paths. Five-tuple load-balancing
uses the source and destination IP and port ﬁelds along with
the IP protocol to identify a ﬂow and maps all packets in
the same ﬂow to the same path [3]. However, adding IP op-
tions to packets with the same ﬁve-tuple signature breaks this
scheme. We hypothesize that some router implementations
fail to account for IP options when calculating the packet off-
set to the TCP/UDP source and destination port ﬁelds when
computing the 5-tuple.
In other implementations, packets
with IP options are routed on arbitrary equal-cost paths. Both
behaviors add to the complexity of address alignment.
Different-length equal-cost paths can create false links and aliases.
Equal-cost paths may have different hop-count lengths, which
results in multiple sets of probes, offset in TTL, between the
same source and destination. Comparing probes from dif-
ferent paths may cause false topology assertions, e.g., not all
routers at TTL=3 have a link to routers at TTL=4. We use RR
to partition probes by the path they traversed, and only com-
pare probes that take the same path. By partitioning probes
by the paths that they traverse, we remove one source of self-
loops common to traceroute-inferred topologies [3]. Traces
from Cornell University to PlanetLab nodes in Amsterdam
have this behavior (Figure 3).
RR ﬁlls. The address alignment algorithm monitors hop-by-hop
increases in the size of the RR array to classify each router’s
RR type (Section 4). Because a given hop may add more
than one entry into the RR array when the RR array ﬁlls up—
reaches nine entries—the information about the true number
of RR entries for this hop is lost. For example, a packet with
eight RR entries that transitions from a Departing RR-type
router to a Arriving RR-type router, would normally receive
two new RR entries. However, since there is only space for
one more IP address, the second entry is lost. The address
alignment algorithm has to consider more possibilities when
the RR array ﬁlls. DisCarte’s DLP code base doubles in size
to handle this seemingly simple case.
Persistent Routing Loops can prevent naïve trace collection from
terminating. Our data collection scripts had to be rewritten
to detect loops. We revisited the looping paths three weeks
later and found that approximately half still persisted. In Sec-
tion 6.3, we further characterize the routing loops we discov-
ered.
R2 (Cisco)
R3 (Juniper)
S1 (NotImpl)
planetlab3−dsl.cs.cornell.edu
 (141.149.218.208)
A4−0−0−1711.DSL−RTR1.SYR.verizon−gni.net
 (130.81.8.238)
L201.DSL−RTR1.SYR.verizon−gni.net
 (141.149.218.1)
A3−0−0−1710.DSL−RTR1.SYR.verizon−gni.net
 (130.81.8.234)
at−1−1−0−1711.CORE−RTR2.SYR.verizon−gni.net
 (130.81.8.237)
?? (130.81.18.177)
R4 (NotImpl, MPLS trailer)
?? (130.81.18.176)
R6 (NotImpl, MPLS trailer)
?? (130.81.20.100)
R5 (Juniper)
at−1−1−0−1710.CORE−RTR1.SYR.verizon−gni.net
E16
 (130.81.8.233)
?? (130.81.20.101)
planetlab−2.amst.nodes.planet−lab.org
 (213.19.160.195)
Figure 3: Partial trace from Cornell to Amsterdam where probes that take different-length paths: bottom path is one hop shorter.
Data Collection Phase
Fact Generation Phase
BGP
Prefixes
Set .1
In each
/24 Prefix
§
6.1
Stop
Lists
DST
IPs
Make
Stoplist
§
6.2
TR,RR
Traces
From 
All P-Lab 
Nodes
All
Traces
Probe
Pairs
Pre-
Process
§
4.2
All
IPs
Probed
Aliases
ally
§
4.3,4.4
DLP
Models
Union
Models
5.1
§
Fact
Processing
Phase
Resolve
Conflicts
§
5.2
Hints
Good
Facts
Final
Topology
Conflict
Facts
Figure 5: Overview of the DisCarte Topology Inference System.
3.3 Ambiguity in classiﬁcation
4. DISCARTE
The variety of RR implementations make router classiﬁcation
ambiguous. Because different topologies and router implementa-
tions can generate the same trace (Figure 4), a router may be mis-
classiﬁed, leading to mismatched addresses and aliases. Thus, in
the same trace, IP X might be an alias for IP A or B depending
on the RR implementation. Further, the third probe discovers two
new RR addresses (Y, Z) and it is ambiguous whether IP address
Y belongs to a hidden router. We depict two of 15 possible inter-
pretations of the trace.
A single mismatched pair of addresses causes cascading errors
as each subsequent RR address in a trace is misaligned. However,
using observed network engineering practices it is possible to cor-
rectly match RR and traceroute discovered addresses (Section 4.4).
For example, network engineers tend to allocate IP addresses on
either end of a link out of a /30 or /31 network [14, 21], so the
topology that best matches this pattern is most likely correct.
Probe ttl
ICMP source IP
RR Array
1
2
3
A
B
C
-
X
X, Y, Z
Departing
Departing
Arriving
A
X
B
Y
C
Z
NotImpl
Arriving
Hidden
Arriving
A
B
X
Y
C
Z
S
S
Figure 4: Varied RR implementations create ambiguous align-
ments between IP addresses discovered by TR (A, B, C) and
those discovered by RR (X, Y, Z). We show two of 15 possible
topologies inferred from a hypothetical trace from source S:
rectangles represent routers and letters are IP interfaces.
Large-scale cross-validation and address alignment is difﬁcult