title:POSTER: An Open-Source Framework for Developing Heterogeneous Distributed
Enclave Applications
author:Gianluca Scopelliti and
Sepideh Pouyanrad and
Job Noorman and
Fritz Alder and
Frank Piessens and
Jan Tobias M&quot;uhlberg
POSTER: An Open-Source Framework for Developing
Heterogeneous Distributed Enclave Applications
Job Noorman
Sepideh Pouyanrad
Gianluca Scopelliti
PI:EMAIL
imec-DistriNet, KU Leuven
PI:EMAIL
imec-DistriNet, KU Leuven
Leuven, Belgium
Fritz Alder
PI:EMAIL
imec-DistriNet, KU Leuven
Leuven, Belgium
Leuven, Belgium
Frank Piessens
PI:EMAIL
imec-DistriNet, KU Leuven
Leuven, Belgium
PI:EMAIL
imec-DistriNet, KU Leuven
Leuven, Belgium
Jan Tobias Mühlberg
PI:EMAIL
imec-DistriNet, KU Leuven
Leuven, Belgium
ABSTRACT
We present an integrated open-source framework to develop, de-
ploy, and use event-driven distributed enclaved applications across
heterogeneous Trusted Execution Environments (TEEs). Our frame-
work strives for strong application authenticity and integrity guar-
antees, and optionally confidentiality and availability, while mini-
mizing the run-time Trusted Computing Base (TCB). For software
developers, our framework provides a high level of abstraction over
the platform-specific TEE layer that provides isolation, attestation
and secure communication amongst distributed application compo-
nents, allowing developers to focus of application logic. We provide
a notion of event-driven programming to develop distributed en-
clave applications in Rust and C for heterogeneous TEEs, including
Intel SGX, ARM TrustZone and the open-source Sancus. This het-
erogeneity makes our framework uniquely suitable for a broad
range of use cases which combine cloud processing, mobile and
edge devices, and lightweight sensing and actuation.
CCS CONCEPTS
• Security and privacy → Trusted computing; Distributed
systems security; • Computer systems organization → Sen-
sors and actuators; Availability; Maintainability and maintenance.
KEYWORDS
Trusted Execution; Event-Driven Systems; Intel SGX; ARM Trust-
Zone; Sancus
ACM Reference Format:
Gianluca Scopelliti, Sepideh Pouyanrad, Job Noorman, Fritz Alder, Frank
Piessens, and Jan Tobias Mühlberg. 2021. POSTER: An Open-Source Frame-
work for Developing Heterogeneous Distributed Enclave Applications. In
Proceedings of the 2021 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’21), November 15–19, 2021, Virtual Event, Republic of
Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.
3485341
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3485341
1 INTRODUCTION & PROBLEM
Trusted Execution Environments (TEEs) allow an application to
execute in a hardware-protected environment called enclave. En-
claves are isolated and protected from the rest of the system, ensur-
ing strong confidentiality and integrity guarantees. Cryptographic
primitives and cryptographic keys, which are unique per enclave
and which can only be used by that enclave, enable secure com-
munication and remote attestation; the latter is a mechanism to
obtain cryptographic proof that an application is running under
enclave protection on a specific processor. There are several TEEs
available, both in industry and research. Open-source TEEs include
Sancus and Keystone; proprietary options are, e.g., SGX for Intel
processors, SEV for AMD, TrustZone for ARM, and others [3]. De-
veloping distributed applications that execute on heterogeneous
TEEs is difficult, in particular for scenarios that combine Internet-
of-Things, Edge, and cloud hardware: each TEE requires a platform-
specific software implementation, comes with different approaches
to key management and attestation, a different Trusted Comput-
ing Base (TCB) footprint, and provides slightly different hardware
features and security guarantees.
Therefore, developing a distributed application that uses a mul-
titude of TEE architectures is non-trivial. A developer needs to
make choices as to which security features are required for which
components, adapt the code of each component to multiple spe-
cific platforms, arrange for different deployment and attestation
strategies, and implement secure interaction between the compo-
nents. Open-source projects such as Open Enclave SDK and Google
Asylo aim to bridge the development gap between different TEEs.
However, software engineers still need to account for the communi-
cation between different modules, which has to be properly secured
with cryptographic operations for data encryption and authentica-
tion. In particular, the responsibility for deploying the distributed
application, loading and attesting each enclave, establishing ses-
sion keys and secure connections between distributed components,
is still left to the application developer and operator. Overall, en-
suring strong security guarantees in distributed scenarios poses
a challenge to the adoption of TEE technology. To address these
challenges, our framework makes the following contributions:
• We present an integrated approach for the authentic execu-
tion of event-driven programs on heterogeneous distributed
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2393Figure 1: A smart irrigation system as an example for distributed application networks we support. Light-weight sensing and
actuation nodes are deployed in a field. Application AppA controls irrigation units (through driver Drv2) based on soil moisture
(obtained through Drv1). Application AppB provides the same functionality but has access to additional data sources, e.g.,
aerial surveillance and data aggregation on central infrastructure. All application components execute in enclaves (colored).
Directed data flows through untrusted networks (colored arrows) are at least authenticated and integrity protected; attestation
precedes the establishment of all data flows, and a notion of local attestation is used to establish trust between enclaves on the
same processor. All other software in the scenario is untrusted regarding our security properties, which leads to a very small
run-time application TCB. Guaranteeing availability properties may require a different compartmentalization strategy. The
concept is also applicable across, e.g., the different control units within a car or in an autonomous robot.
systems, under the assumption that the execution infrastruc-
ture offers specific security primitives – TEEs with support
for secure I/O (cf. [6]) and real-time processing (cf. [2]);
• We integrate a technique for implementing support for se-
cure I/O by means of protected driver modules, and availabil-
ity through TEE extensions, on small TEE-microprocessors
such as Sancus [6];
• We provide a revised open-source implementation of the
approach for Intel SGX, ARM TrustZone, and for Sancus,
which supports software development in Rust and C;
• We work towards an extensive evaluation of performance
and security aspects of that implementation. Preliminary
results show that our framework allows for the deployment
of complex distributed software systems with a very small
run-time application TCB.
Our framework is available under an open-source license at https:
//github.com/AuthenticExecution/env.
2 AUTHENTIC EXECUTION
We developed the concept of authentic execution [5] to address
the problem of securely executing distributed applications on a
shared infrastructure and to also minimize the application’s runtime
TCB. Authentic execution provides a notion of security that we
summarize as “if the application produces a physical output event