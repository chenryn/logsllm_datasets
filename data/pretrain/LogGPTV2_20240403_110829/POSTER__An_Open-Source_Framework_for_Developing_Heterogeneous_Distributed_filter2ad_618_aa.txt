### Title: POSTER: An Open-Source Framework for Developing Heterogeneous Distributed Enclave Applications

### Authors:
- Gianluca Scopelliti
- Sepideh Pouyanrad
- Job Noorman
- Fritz Alder
- Frank Piessens
- Jan Tobias Mühlberg

### Affiliations:
- imec-DistriNet, KU Leuven, Leuven, Belgium

### Abstract
We present an integrated open-source framework for developing, deploying, and using event-driven distributed enclaved applications across heterogeneous Trusted Execution Environments (TEEs). Our framework ensures strong application authenticity and integrity, with optional confidentiality and availability, while minimizing the run-time Trusted Computing Base (TCB). For software developers, our framework provides a high level of abstraction over the platform-specific TEE layer, which offers isolation, attestation, and secure communication among distributed application components. This allows developers to focus on application logic. We support event-driven programming in Rust and C for heterogeneous TEEs, including Intel SGX, ARM TrustZone, and the open-source Sancus. The heterogeneity of our framework makes it uniquely suitable for a broad range of use cases, combining cloud processing, mobile and edge devices, and lightweight sensing and actuation.

### CCS Concepts
- **Security and Privacy**: Trusted computing, Distributed systems security
- **Computer Systems Organization**: Sensors and actuators, Availability, Maintainability and maintenance

### Keywords
- Trusted Execution
- Event-Driven Systems
- Intel SGX
- ARM TrustZone
- Sancus

### ACM Reference Format
Gianluca Scopelliti, Sepideh Pouyanrad, Job Noorman, Fritz Alder, Frank Piessens, and Jan Tobias Mühlberg. 2021. POSTER: An Open-Source Framework for Developing Heterogeneous Distributed Enclave Applications. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485341

### Permission
Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s).

### Introduction and Problem
Trusted Execution Environments (TEEs) allow applications to execute in a hardware-protected environment called an enclave. Enclaves are isolated and protected from the rest of the system, ensuring strong confidentiality and integrity. Cryptographic primitives and keys, unique per enclave, enable secure communication and remote attestation, which provides cryptographic proof that an application is running under enclave protection on a specific processor. Several TEEs are available, both in industry and research, including open-source options like Sancus and Keystone, and proprietary ones such as Intel SGX, AMD SEV, and ARM TrustZone.

Developing distributed applications that execute on heterogeneous TEEs is challenging, especially when combining Internet-of-Things (IoT), Edge, and cloud hardware. Each TEE requires a platform-specific software implementation, different key management and attestation approaches, and varying TCB footprints and hardware features. This complexity makes it non-trivial for developers to create distributed applications that use multiple TEE architectures. Developers must choose the necessary security features for each component, adapt code to multiple platforms, arrange for different deployment and attestation strategies, and implement secure interaction between components.

Open-source projects like Open Enclave SDK and Google Asylo aim to bridge the development gap between different TEEs. However, developers still need to manage secure communication between modules, deploy the application, load and attest each enclave, and establish session keys and secure connections. Ensuring strong security guarantees in distributed scenarios remains a challenge for TEE technology adoption.

To address these challenges, our framework makes the following contributions:
- **Integrated Approach**: We present an integrated approach for the authentic execution of event-driven programs on heterogeneous distributed systems, assuming the execution infrastructure offers specific security primitives, such as TEEs with support for secure I/O and real-time processing.
- **Secure I/O and Availability**: We integrate a technique for implementing secure I/O through protected driver modules and availability through TEE extensions, particularly on small TEE-microprocessors like Sancus.
- **Open-Source Implementation**: We provide a revised open-source implementation for Intel SGX, ARM TrustZone, and Sancus, supporting software development in Rust and C.
- **Evaluation**: We are working towards an extensive evaluation of performance and security aspects of our implementation. Preliminary results show that our framework allows for the deployment of complex distributed software systems with a very small run-time application TCB.

Our framework is available under an open-source license at https://github.com/AuthenticExecution/env.

### Authentic Execution
We developed the concept of authentic execution to securely execute distributed applications on shared infrastructure while minimizing the application's runtime TCB. Authentic execution provides a notion of security that we summarize as "if the application produces a physical output event..."

---

This optimized version aims to improve clarity, coherence, and professionalism by reorganizing the content, enhancing the flow, and providing a more structured format.