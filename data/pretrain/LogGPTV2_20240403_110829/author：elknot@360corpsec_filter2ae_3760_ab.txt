        }
        if (a_tcp->nids_state == NIDS_RESET)
        {
            // 连接已经通过RST关闭。
            fprintf (stderr, "%s resetn", buf);
            return;
        }
        if (a_tcp->nids_state == NIDS_DATA)
        {
            // 新的数据已经到达，必须判断其数据流向
            // 判断其是否紧急数据
            struct half_stream *hlf;
            if (a_tcp->server.count_new_urg)
            {
                // 紧急数据的新字节已经到达
                strcat(buf,"(urgent->)");
                buf[strlen(buf)+1]=0;
                buf[strlen(buf)]=a_tcp->server.urgdata;
                write(1,buf,strlen(buf));
                return;
            }
            // 我们不必必须检查是否客户端的紧急数据已经到达
            // 因为我们没有增加a_tcp->client.collect_urg的值
            // 因此，我们还有一些正常的数据关心
            if (a_tcp->client.count_new)
            {
                //客户端的新数据
                hlf = &a_tcp->client; // 现在我们将处理hlf变量
                // 这个变量指向客户端一边的连接。
                strcat (buf, "(server; // 类似的
                strcat (buf, "(->)");
            }
            fprintf(stderr,"%s",buf); // 我们打印连接参数(saddr, daddr, sport, dport)
            // 和数据流向(-> or data,hlf->count_new); // 我们打印最新到达的数据
        }
        return ;
    }
    int main ()
    {
        // 这里我们可以改变Libnids的params,例如 nids_params.n_hosts=256;
        if (!nids_init ())
        {
            fprintf(stderr,"%sn",nids_errbuf);
            exit(1);
        }
        nids_register_tcp (tcp_callback);
        nids_run ();
        return 0;
    }
* * *
## 0x02 应用层协议分析
这里我们就完成了一个简单的TCP会话重组，但是实际上我们需要分析应用层中的协议，所以我这里放两个samplecode用来分析smtp协议和pop3协议。  
samplecode1:
    #include 
    #include
    #include"nids.h"
    #include"string.h"
    #include 
    #include
    char ascii_string[10000];
    char *char_to_ascii(char ch)
    {
        char *string;
        ascii_string[0]=0;
        string = ascii_string;
        if(isgraph(ch))
        *string++=ch;
        else if(ch==' ')
            *string++=ch;
        else if(ch=='\n'||ch=='\r')
            *string++=ch;
        else
            *string++='.';
        *string=0;
        return ascii_string;
    }
    //+++++++++++++++++++++++++++++++++++++++++++++++++
    //    下面分析pop3协议的回调函数
    //+++++++++++++++++++++++++++++++++++++++++++++++++
    void pop3_protocol_callback(struct tcp_stream *pop3_connection,void **arg)
    {
        int i;
        char address_string[1024];
        char content[65535];
        struct tuple4 ip_and_port;
        ip_and_port=pop3_connection->addr;
        strcpy(address_string,inet_ntoa(*((struct in_addr*)&(ip_and_port.saddr))));
        sprintf(address_string+strlen(address_string),":%i",ip_and_port.source);
        strcat(address_string,"");
        strcat(address_string,inet_ntoa(*((struct in_addr*)&(ip_and_port.daddr))));
        sprintf(address_string+strlen(address_string),":%i",ip_and_port.dest);
        strcat(address_string,"\n");
        switch (pop3_connection->nids_state)
        {
        case NIDS_JUST_EST:/*POP3客户端和服务器建立连接*/
            if(pop3_connection->addr.dest==110)
            {
                pop3_connection->client.collect++;/*pop3客户端接收数据*/
                pop3_connection->server.collect++;/*pop3服务器接收数据*/
                pop3_connection->client.collect_urg++;/*pop3客户端接收紧急数据*/
                pop3_connection->server.collect_urg++;/*pop3服务器接收紧急数据*/
                printf("%spop3客户端和服务器建立连接\n",address_string);
            }
         case NIDS_CLOSE:/*POP3协议连接正常关闭*/
            printf("---------------------------------------------------\n");
            printf("%sPOP3协议连接正常关闭\n",address_string);
            return;
         case NIDS_RESET:/*POP3协议连接被RESET关闭*/
            printf("---------------------------------------------------\n");
            printf("%sPOP3协议连接被RESET关闭\n",address_string);
            return;
         case NIDS_DATA:/*POP3协议有新的数据到达*/
            {
                char status_code[5];
                struct half_stream *hlf;
                if(pop3_connection->server.count_new_urg)/*POP3服务器收到新的紧急数据*/
                {
                    printf("---------------------------------------------------\n");
                    strcpy(address_string,inet_ntoa(*((struct in_addr*)&(ip_and_port.saddr))));
                    sprintf(address_string+strlen(address_string),":%i",ip_and_port.source);
                    strcat(address_string,"urgent---->");
                    strcat(address_string,inet_ntoa(*((struct in_addr*)&(ip_and_port.daddr))));
                    sprintf(address_string+strlen(address_string),":%i",ip_and_port.dest);
                    strcat(address_string,'\n');
                    address_string[strlen(address_string)+1]=0;
                    address_string[strlen(address_string)];
                    pop3_connection->server.urgdata;
                    printf("%s",address_string);
                    return;
                }
                if(pop3_connection->client.count_new_urg)/*POP3客户端收到新的紧急数据*/
                {
                    printf("---------------------------------------------------\n");
                    strcpy(address_string,inet_ntoa(*((struct in_addr*)&(ip_and_port.saddr))));
                    sprintf(address_string+strlen(address_string),":%i",ip_and_port.source);
                    strcat(address_string,"server.urgdata;
                    printf("%s",address_string);
                    return;
                }
                if(pop3_connection->client.count_new)/*POP3客户端收到新的数据*/
                {
                    hlf=&pop3_connection->client;
                    strcpy(address_string,inet_ntoa(*((struct in_addr*)&(ip_and_port.saddr))));
                    sprintf(address_string+strlen(address_string),":%i",ip_and_port.source);
                    strcat(address_string,"data,hlf->count_new);
                    content[hlf->count_new]='\0';
                    if(strstr(strncpy(status_code,content,4),"+OK"))
                    printf("操作成功\n");
                    if(strstr(strncpy(status_code,content,4),"-ERR"))
                    printf("操作失败\n");
                    for(i=0;icount_new;i++)
                    {
                        printf("%s",char_to_ascii(content[i]));
                    }
                    printf("\n");
                    if(strstr(content,"\n\r.\n\r"))
                        printf("数据传输结束\n");
                }
                else/*POP3服务器收到新的数据*/
                {
                    hlf=&pop3_connection->server;
                    strcpy(address_string,inet_ntoa(*((struct in_addr*)&(ip_and_port.saddr))));
                    sprintf(address_string+strlen(address_string),":%i",ip_and_port.source);
                    strcat(address_string,"count_new------>");
                    strcat(address_string,inet_ntoa(*((struct in_addr*)&(ip_and_port.daddr))));
                    sprintf(address_string+strlen(address_string),":%i",ip_and_port.dest);
                    strcat(address_string,'\n');
                    printf("---------------------------------------------------\n");
                    printf("%s\n",address_string);
                    memcpy(content,hlf->data,hlf->count_new);
                    content[hlf->count_new]='\0';
                    if(strstr(content,"USER"))
                        printf("邮件用户名为：\n");
                    if(strstr(content,"PASS"))
                        printf("用户密码为：\n");
                    if(strstr(content,"STAT"))
                        printf("返回统计资料：\n");
                    if(strstr(content,"RETR"))
                        printf("获取邮件:\n");
                    if(strstr(content,"DELE"))
                        printf("删除邮件：\n");
                    if(strstr(content,"QUIT"))
                        printf("退出连接：\n");
                    for(i=0;icount_new;i++)
                    {
                        printf("%s",char_to_ascii(content[i]));
                    }
                    printf("\n");
                }
            }
        default:
            break;
        }
        return;
    }
    int main(void)
    {