    ^C
    SOFTIRQ          TOTAL_usecs
    tasklet                  166
    block                   9152
    net_rx                 12829
    rcu                    53140
    sched                 182360
    timer                 306256
    ```
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其他资源**
-   `Softirqs`{.literal} man page
-   `/usr/share/bcc/tools/doc/softirqs_example.txt`{.literal}
-   `mpstat(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#_additional_resources_8}其他资源 {.title}
:::
::: itemizedlist
-   `/usr/share/doc/bcc/README.md`{.literal} 文件
:::
:::
:::
[]{#getting-started-with-tipc_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#getting-started-with-tipc_configuring-and-managing-networking}第 53 章 TIPC 入门 {.title}
:::
透明进程间通信(TIPC)（也称为`集群域套接字`{.literal}
）是用于集群范围内的操作的进程间通信(IPC)服务。
在高可用性和动态集群环境中运行的应用程序有特殊需要。集群中的节点数量可能会有所不同，路由器可能会失败，且出于负载均衡的考虑，功能也可以移到集群中的不同节点。TIPC
可最大程度降低应用程序开发人员处理此类问题的工作，并尽可能以正确和最佳的方式处理它们。另外，TIPC
比一般协议（如 TCP）提供效率更高且容错的通讯。
::: section
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#the-architecture-of-tipc_getting-started-with-tipc}TIPC 的构架 {.title}
:::
TIPC 是使用 TIPC
和数据包传输服务(`bearer`{.literal})的应用程序之间的一层，跨越传输、网络和信号链路层。然而，TIPC
可以使用不同的传输协议作为 bearer，这样 TCP 连接就可以充当 TIPC
信号连接的 bearer。
TIPC 支持以下 bearer:
::: itemizedlist
-   Ethernet
-   InfiniBand
-   UDP 协议
:::
TIPC 提供了在 TIPC 端口间可靠传送信息，这是所有 TIPC 通讯的端点。
以下是 TIPC 构架图：
::: informalfigure
::: mediaobject
```{=html}
```
```{=html}
```
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#loading-the-tipc-module-when-the-system-boots_getting-started-with-tipc}系统引导时载入 tipc 模块 {.title}
:::
在使用 TIPC 协议前，载入 `tipc`{.literal}
内核模块。本节介绍如何在系统引导时配置 RHEL 自动载入这个模块。
::: orderedlist
**步骤**
1.  使用以下内容创建 `/etc/modules-load.d/tipc.conf`{.literal} 文件：
    ``` literallayout
    tipc
    ```
2.  重启 `systemd-modules-load`{.literal}
    服务在不重启系统的情况下加载模块：
    ``` literallayout
    # systemctl start systemd-modules-load
    ```
:::
::: orderedlist
**验证步骤**
1.  使用以下命令验证 RHEL 是否已载入 `tipc`{.literal} 模块：
    ``` literallayout
    # lsmod | grep tipc
    tipc    311296  0
    ```
    如果命令没有显示 `tipc`{.literal} 模块的条目，RHEL 无法加载它。
:::
::: itemizedlist
**其他资源**
-   `modules-load.d(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#creating-a-tipc-network_getting-started-with-tipc}创建 TIPC 网络 {.title}
:::
这部分论述了如何创建 TIPC 网络。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
这些命令只临时配置 TIPC 网络。要在节点上永久配置
TIPC，在脚本中使用此流程的命令，并将 RHEL 配置为在系统引导时执行该脚本。
:::
::: itemizedlist
**先决条件**
-   `tipc`{.literal} 模块已被加载。详情请查看 [在系统引导时载入 tipc
    模块](#getting-started-with-tipc_configuring-and-managing-networking.html#loading-the-tipc-module-when-the-system-boots_getting-started-with-tipc "系统引导时载入 tipc 模块"){.link}
:::
::: orderedlist
**步骤**
1.  可选：设置一个唯一的节点身份，如 UUID 或节点的主机名：
    ``` literallayout
    # tipc node set identity host_name
    ```
    身份可以是由最多 16 个字母和数字组成的任何唯一字符串。
    此步骤后，您无法设置或更改身份。
2.  添加 bearer。例如，要将 Ethernet 用作介质，并将 `enp0s1`{.literal}
    设备用作物理 bearer 设备，请输入：
    ``` literallayout
    # tipc bearer enable media eth device enp1s0
    ```
3.  可选： 要获得冗余和更好的性能，请使用上一步中的命令附加更多
    bearer。您可以配置最多三个 bearer，但在同一介质上不能超过两个。
4.  在应该加入 TIPC 网络的每个节点中重复前面的所有步骤。
:::
::: orderedlist
**验证步骤**
1.  显示集群成员的链接状态：
    ``` literallayout
    # tipc link list
    broadcast-link: up
    5254006b74be:enp1s0-525400df55d1:enp1s0: up
    ```
    此输出显示，节点 `5254006b74be`{.literal} 上的 bearer
    `enp1s0`{.literal} 和节点 `525400df55d1`{.literal} 上的 bearer
    `enp1s0`{.literal} 之间的链接为。``{.literal}
2.  显示 TIPC 发布表：
    ``` literallayout
    # tipc nametable show
    Type       Lower      Upper      Scope    Port       Node
    0          1795222054 1795222054 cluster  0          5254006b74be
    0          3741353223 3741353223 cluster  0          525400df55d1
    1          1          1          node     2399405586 5254006b74be
    2          3741353223 3741353223 node     0          5254006b74be
    ```
    ::: itemizedlist
    -   服务类型为 `0`{.literal}
        的两个条目表示两个节点是这个集群的成员。
    -   服务类型为 `1`{.literal} 的条目代表内置的拓扑服务跟踪服务。
    -   service type `2`{.literal}
        的条目显示在发出节点中看到的链接。范围限制
        `3741353223`{.literal} 代表对等端点的地址（基于节点身份的唯一 32
        位哈希值）以十进制格式。
    :::
:::
::: itemizedlist
**其他资源**
-   `TIPC-bearer(8)`{.literal} man page
-   `TIPC-namespace(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#_additional_resources_9}其他资源 {.title}
:::
::: itemizedlist
-   红帽建议使用其他 bearer
    级别协议来根据传输介质加密节点之间的通信。例如：
    ::: itemizedlist
    -   MACsec： 请参阅[使用 MACsec 加密第 2
        层流量](#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_configuring-and-managing-networking.html "第 38 章 使用 MACsec 加密同一物理网络中的第 2 层流量"){.link}
    -   IPsec： [请参阅使用 IPsec 配置
        VPN](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/securing_networks/configuring-a-vpn-with-ipsec_securing-networks){.link}
    :::
-   有关如何使用 TIPC 的示例，请使用
    `git clone git://git.code.sf.net/p/tipc/tipcutils`{.literal}
    命令克隆上游 GIT 存储库。该仓库包含使用 TIPC
    功能的演示和测试程序的源代码。请注意，这个软件仓库不是由红帽提供的。
-   `/usr/share/doc/kernel-doc-/Documentation/output/networking/tipc.html`{.literal}
    由 `kernel-doc`{.literal} 软件包提供。
:::
:::
:::
[]{#automatically-configuring-network-interfaces-in-public-clouds-using-nm-cloud-setup_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#automatically-configuring-network-interfaces-in-public-clouds-using-nm-cloud-setup_configuring-and-managing-networking.html#automatically-configuring-network-interfaces-in-public-clouds-using-nm-cloud-setup_configuring-and-managing-networking}第 54 章 使用 nm-cloud-setup 在公共云中自动配置网络接口 {.title}
:::
通常，虚拟机(VM)只有一个可由 DHCP
可配置的接口。但是，一些虚拟机在一个无法由 DHCP
可配置的接口中可能具有多个网络接口、IP 地址和 IP
子网。另外，管理员可以在机器运行时重新配置网络。`nm-cloud-setup`{.literal}
实用程序从云服务提供商的元数据服务器自动检索配置信息，并更新公共云中虚拟机的网络配置。
::: section
::: titlepage
# []{#automatically-configuring-network-interfaces-in-public-clouds-using-nm-cloud-setup_configuring-and-managing-networking.html#proc_configuring-and-pre-deploying-nm-cloud-setup_automatically-configuring-network-interfaces-in-public-clouds-using-nm-cloud-setup}配置和预部署 nm-cloud-setup {.title}
:::
要在公共云中启用和配置网络接口，请运行 `nm-cloud-setup`{.literal}
作为计时器和服务。以下流程描述了如何将 `nm-cloud-setup`{.literal} 用于
Amazon EC2。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在 Red Hat Enterprise Linux On Demand 和 AWS
金级镜像上，`nn-cloud-setup`{.literal} 已启用且不需要任何操作。
:::
::: itemizedlist
**先决条件**
-   存在网络连接。
-   连接使用 DHCP。
    默认情况下，NetworkManager 会创建一个使用 DHCP
    的连接配置集。如果没有创建配置文件，因为您在
    `/etc/NetworkManager/NetworkManager.conf`{.literal} 中设置
    `no-auto-default`{.literal} 参数，请手动创建此初始连接。
:::
::: orderedlist
**步骤**
1.  安装 `nm-cloud-setup`{.literal} 软件包：
    ``` literallayout
    # dnf install NetworkManager-cloud-setup
    ```
2.  为 `nm-cloud-setup`{.literal} 服务创建并运行 snap-in 文件：
    ::: orderedlist
    1.  使用以下命令来编辑 snap-in 文件：
        ``` literallayout
        # systemctl edit nm-cloud-setup.service
        ```
        明确启动该服务或重启系统，以使配置设置有效。
    2.  使用 `systemd`{.literal} snap-in 文件在
        `nm-cloud-setup`{.literal} 中配置云提供程序。例如，要使用 Amazon
        EC2，请输入：
        ``` literallayout
        [Service]
        Environment=NM_CLOUD_SETUP_EC2=yes
        ```
        您可以设置以下环境变量来启用您所使用的云：
        ::: itemizedlist
        -   `NM_CLOUD_SETUP_AZURE`{.literal} for Microsoft Azure
        -   `NM_CLOUD_SETUP_EC2`{.literal} for Amazon EC2 (AWS)
        -   `NM_CLOUD_SETUP_GCP`{.literal} for Google Cloud
            Platform(GCP)
        -   `NM_CLOUD_SETUP_ALIYUN`{.literal} (Aliyun)
        :::
    3.  保存文件并退出编辑器。
    :::
3.  重新载入 `systemd`{.literal} 配置：
    ``` literallayout
    # systemctl daemon-reload
    ```
4.  启用并启动 `nm-cloud-setup`{.literal} 服务：
    ``` literallayout
    # systemctl enable --now nm-cloud-setup.service
    ```
5.  启用并启动 `nm-cloud-setup`{.literal} 计时器：
    ``` literallayout
    # systemctl enable --now nm-cloud-setup.timer
    ```
:::
::: itemizedlist
**其他资源**
-   `nm-cloud-setup(8)`{.literal} man page
-   [配置以太网连接](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-an-ethernet-connection_configuring-and-managing-networking){.link}
:::
:::
:::