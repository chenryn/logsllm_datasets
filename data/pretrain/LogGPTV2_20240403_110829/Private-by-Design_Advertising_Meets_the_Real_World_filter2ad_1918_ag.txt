tems deal with this through the notion of a budget. Each query deducts from
the budget, and when the budget is spent, the additional queries are simply
63
Figure 6.6: Differential privacy in the context of private-by-design adver-
tising
not allowed. However, this approach is not practical in the advertising context,
which requires longitudinal analytics. Rather than setting a hard limit on the
cumulative privacy loss, PDDP treats it as an ongoing measure referred to as
the privacy deﬁcit. The notion of the privacy deﬁcit makes it possible to address a
number of open issues. First, it provides a quantitative measure of the privacy
cost incurred as a result of a meaningful statistical analysis of the user popu-
lation. Second, as described in Section 9.5, the accumulated deﬁcit can be ana-
lyzed under a worst-case scenario to determine whether it theoretically allows a
malicious analyst to discover a number of sensitive user attributes. Indeed one
question we address in this study is “How far from actual reality is differential
privacy’s worst-case model?”
6.3 Related Work
In this section, we describe previous attempts at building and deploying a
private-by-design system.
64
Noisy AnswersDealerQuery(cleartext)Dealer(encrypted)ClientsClientsAmong the systems cited in Section 1.2, two were never implemented: Pi-
CoDa [49] used simulations to evaluate timing performance for the protocol
data, MobiAd [36] deferred the effort required to build and deploy a prototype
to future work. Only three systmes (Adnostic [58], RePriv [29] and Privad [32])
have been built as a functional research prototype.
The core targeting system of Adnostic [58] is available as a Firefox addon.
The user proﬁle in this implementation is a weighted list of categories derived
from Google Ads Preferences. In order to build a proﬁle, Adnostic monitors user
browsing activity and for each visited page assigns a number of most relevant
categories. These categories are then aggregated in the user interest proﬁle with
weights reﬂecting number of page visits, number of clicks and the page viewing
duration. The categorisation is based on computing similarity scores between
the webpage metadata and interest categories, which uses a pre-computed ma-
trix of cosine similarity between category words and most common bookmark
tags from delicious.com. While the addon also contains ad rendering and even
ad scraping functionality, these modules were only used to compute bench-
marks reported in the paper. Beyond that, unfortunately, the system was never
deployed and evaluated with actual users.
RePriv [29] describes a research prototype, built on top of C3, an experi-
mental browser developed in .NET [17]. In RePriv, the user proﬁle is also con-
structed locally in the browser by mining user browsing data to infer personal
interests. Additionally, RePriv allows service providers to register veriﬁed site-
speciﬁc miners, thereby improving the quality of inferred information. The re-
lease of sensitive information is controlled by the user, who determines how
much private information can leave the browser, and what exactly is shared
65
with each party. Once explicit user consent has been granted, RePriv sends rele-
vant portions of the user proﬁling information directly to the ad network. Func-
tionality implemented in the prototype includes a behavior mining algorithm, a
communication protocol for secure dissemination of proﬁle information, and an
extension framework for loading third-party software that utilizes user proﬁle.
Behavior mining is based on classiﬁcation of visited webpages using a hierar-
chical taxonomy of document topics derived from the Open Directory Project
(ODP).1 For each visited page RePriv assigns topic probabilities using a Na¨ıve
Bayes classiﬁer trained over a set of documents from each category of the ﬁrst
two levels of the ODP taxonomy. Classiﬁcation information for each page is
stored locally alongside with the browsing history. Proﬁle information exposed
by RePriv consists of a list of taxonomy categories together with an indication
of the interest level for each category (computed as a fraction of browsing his-
tory classiﬁed with that category). However, the authors do not elaborate on the
extent this information can be leveraged for ad targeting, neither do they report
any results regarding deployment or evaluation in the advertising context.
A proof-of-concept implementation and a pilot deployment of Privad was
described in [32]. In this experiment, the client component was distributed as
a stand-alone Firefox addon to 2083 Mechanical Turk2 workers, who were re-
munerated for having the addon installed for at least one week. User proﬁling
in the prototype implementation was based on scraping users’ Facebook proﬁle
and Google Ads Preferences. However, the extracted proﬁle information was
never used, the system simply scraped and republished Google ads without any
targeting. Overall, the system was in continuous operation for a year, retaining
a ﬁfth of its original user base. During this time there were 217K ad views, 238
1http://dmoz.org
2https://www.mturk.com
66
ad clicks. Admittedly, the main goal of that deployment was to evaluate tech-
nical aspects of the architecture, and as such it provides little insight into the
advertising utility of the system. In contrast, the purpose of this work is to ex-
ercise the private-by-design advertising in realistic settings. Towards this end,
we bring proﬁling and targeting several steps closer to that of a commercially
deployable system. Our prototype does real targeting based on user searches
and products browsed on shopping sites, and delivers real ads by pulling them
from online shopping APIs. Moreover, alongside with the advertising system,
we deployed a private analytics component providing a deeper insight into user
behavior and system performance.
67
CHAPTER 7
PROTOTYPE DETAILS
While Privad establishes a basic private-by-design architecture described in
the previous section, to put together a fully functional ad system prototype we
had to ﬁll in a number of gaps. Due to the experimental nature and small scale
of our system, we cannot work directly with advertisers or ad networks. In-
stead, we use product information from major shopping engines to as a proxy
for creating Privad ads. Given such product-oriented ads, for proﬁling and tar-
geting we focus exclusively on the user purchasing intent. We rewrite Google
ad iframe requests and repurpose resulting adboxes to render Privad ads, which
prevents exposing users to more ads than they would normally see.
In the rest of this chapter, we describe in detail the challenges we tackled
while building a private-by-design ad system prototype without support from
the ad industry. We also discuss ways in which the private system design
evolved to meet practical concerns. Then, we report privacy issues identiﬁed
and addressed along the way. Finally, we describe implementation details spe-
ciﬁc to our prototype.
7.1 User Proﬁling
Our approach to proﬁling combines aspects of both crawling and scraping de-
scribed in Section 6.1. Since we can only generate product-related ads, our main
goal with respect to user proﬁling is to identify and capitalize on the user trans-
actional (purchasing) intent [38]. Therefore, we focus on two main signals: user
browsing activity on shopping websites (product-based targeting) and product-
68
related searches on major search and shopping engines (search-based targeting).
Towards this end, we compiled a whitelist of shopping websites containing al-
most 14K entries by crawling retailers on Shopping.com that also appear in
Alexa’s top 1M [1]. The whitelist also includes Alexa’s top 500 websites for a
number of top-level shopping categories (such as “Clothing”, “General Mer-
chandise”, “Gifts”, etc.), as well as the 5 largest search engines. Additionally,
we built a dictionary of product-related terms by crawling a random set of ca.
80 million products offered on Google Products, Amazon and Shopping.com.
From the collected set of 10M terms appearing in product titles, we removed
terms with fewer than 100 occurrences, resulting in 180K whitelisted keywords.
Each time a user issues a search query on one of the whitelisted websites,
Privad client captures the query, extracts search terms and ﬁlters stemmed key-
words through the product-related dictionary. The resulting list of keywords is
then used to establish an ad channel. Additionally, the identiﬁed keywords are
cached and used to deduplicate future product searches.
We proﬁle user shopping activity by monitoring browsing behavior on
whitelisted websites and applying customized scrapers to identify speciﬁc
products the user is interested in. The fundamental challenge of this approach is
the effort required to build specialized product scrapers for the majority of pop-
ular online retailers. In our experimental prototype, we sidestep this challenge
by leveraging scraping functionality developed by InvisibleHand [7].
Invisi-
bleHand tries to identify a product the user is browsing for, and then displays a
notiﬁcation if there are better deals available for the product. At the moment, In-
visibleHand scrapers identify products on 670 shopping websites. As described
in Section 7.6, neither the whitelists nor the scraping functionality is hard-coded
69
Figure 7.1: Ad generation pipeline. C is client, D is dealer, B is broker
in the client. Instead, clients periodically check with the broker and download
updated lists of scrapers and whitelisted domain names as soon as they become
available.
7.2 Ad Generation
The experimental nature of our system dictates that we neither work with any
commercial advertising companies nor generate any revenue by displaying ads.
Instead, we create mock-up1 ads using product listings from three major shop-
ping engines: Amazon.com, Shopping.com and Semantics3.com.2
The series of steps performed to generate Privad ads is shown in Figure 7.1.
Once the Privad client detects a new product or product-related search, it uses
product title or whitelisted search keywords to establish a new interest channel
and request ads from this channel. We do not rely on any predeﬁned interest
hierarchy to map proﬁling information to channels. On the contrary, the interest
channels are generated at runtime and are fully deﬁned by the associated prod-
uct information. As such, we distinguish between two channel types according
1The generated ads look like legitimate Google ads and link to real products. We call them
‘mock-up’ only because they are not handcrafted.
2While we initially started out with Google.com/shopping as our third product provider,
over the course of the prototype development Google’s Search API for Shopping was depre-
cated and then eventually sunset.
70
2617SchedulerAd GrabberAd GrabberAd GrabberAd GrabberAd GrabberCDB345Shopping.comSemantics3.comAmazon.comto targeting parameters (product and search targeted channels). Targeting in-
formation associated with each channel is used to request a number of ads from
the broker in an anonymous, privacy-preserving manner. The ad request (step
1 in Figure 7.1) is relayed by the dealer to hide the client’s identity. The en-
cryption mechanism described in Section 7.4 is used to prevent the dealer from
eavesdropping.
The dealer batches requests from multiple clients into a single RPC request,
which is uploaded to the broker once every 30 seconds (step 2). Upon receiving
an ad request, the broker forwards targeting information to the ad grabbing ser-
vice (in step 3), which then uses it to make a product search on one of the three
shopping engines (steps 4 and 5). Up to 20 most relevant product offers from
the result set are converted into textual ads and returned to the broker. The con-
version is straightforward and consists of removing stop words and excessive
punctuations from the product title and description, distributing the remaining
terms together with a price tag over ad head and body (25 and 70 characters
long), and adding a short display URL. Most of the auto-generated ads pro-
duced this way are intelligible and look almost indistinguishable from AdSense
ads. However, in some cases products-to-ads conversion fails to produce mean-
ingful output (see examples in Figure 7.2). Finally, the broker bundles the re-
sulting set of text ads into a single ad channel and ships it back to the dealer
(step 6). The ad channel is stored at the dealer until it is eventually retrieved by
the client (step 7).
Shopping engines proved to be the major bottleneck in the ad generation
pipeline (with requests to Shopping.com taking on the order of several seconds).
Additionally, they tend to impose a limit on the number of allowed search re-
71
Figure 7.2: Examples of auto-generated Privad ads
quests per IP. To address this scalability challenge we replicated the ad grabbing
service on a number of machines and placed a simple round-robin load-balancer
(Scheduler in Figure 7.1) in between the Ad Grabbers and the broker.
7.3 Ad Selection and Placement
Since we lack real publishers, we render Privad ads in the existing Google Ad-
Sense adboxes (i.e., adboxes that contain contextual ads and appear on pub-
lisher websites). While we modify Google ad frame requests to display more
textual advertising (as opposed to ﬂash and image ads), we avoid exposing
users to more ads than they would normally see. Google allows publishers
to specify style parameters for textual ads so that ads have the same look and
feel as the publisher website. Instead of fully re-writing adbox html code, we
leverage this functionality by identifying and surgically replacing only relevant
ad content (head, body, click URL, etc.). As a result, apart from a small logo
indicating a Privad adbox, Privad ads look almost indistinguishable from Ad-
Sense text ads. However, while preserving ad style preferences, this approach is
ad hoc in nature and depends on cues in the html code characteristic to various
72
ad elements; once html code is modiﬁed our ad serving modules might fail to
render Privad ads.3
Our client implementation allows us to experiment with different placement
strategies: control mode (only Google ads), full-on Privad mode (only Privad
ads), mixed mode (a mixture of Privad and Google ads in the same multi-slot
adbox) and random mode (uniform distribution of adboxes ﬁlled with either
Privad or Google ads). Additionally, our client respects user preferences and
does not request or display any ads in Private Browsing Mode, since uploading
ad requests or view/click reports in PBM would clearly violate user expecta-
tions. Also, it does not display Privad ads if it detects any adblocking mecha-
nisms (browser addons or DNS-based blocking).
Unfortunately, we lack bid information to run a full-ﬂedged second price
auction. Instead, we conjecture that the click probability, and hence the user
score [54], is inversely related to the amount of time passed since an interest
was detected. In other words, the click probability on an ad from a particular
channel decreases over time. To verify this observation, the Privad client allows
experimentation with three ranking mechanisms according to the age of an ad
channel: most recent ﬁrst, uniform random and binomial (pick the most recent
with probability 1/2, second most recent with 1/4 and so on).
7.4 Message Exchange
Following the original Pub-Sub model [32], the dealer uses an asynchronous re-
lay protocol to forward messages between the clients and the broker. Each new
3Unluckily, as described in Section 8.1, this is exactly what happened during our deployment.
73
Privad client is bootstrapped by requesting a unique client id from the dealer.
This Uid then is sent to the dealer alongside the encrypted message payload.
For every incoming request that requires an explicit reply from the broker, the
dealer generates a unique request ID (Rid). It replaces Uid with Rid in the client’s
request and also stores the mapping between them. Finally, multiple client re-
quests are batched together and uploaded to the broker at regular intervals. The
broker then attaches the Rid to every response it sends back, which the dealer
uses to look up the intended client and save the broker’s response tagged with
the client’s Uid. A client uses its Uid to periodically poll the dealer for any new
messages from the broker.
As opposed to the original Privad design, which relies on a predeﬁned set
of channels to map user attributes to ads, in our prototype channels are es-
tablished on the ﬂy in response to an ad request (as long as the result set
of the corresponding product search is non-empty). This allowed us to re-
duce the original Pub-Sub ad dissemination mechanism to an asynchronous
request-response, which operates as follows. Client requests take the form
(EPKbroker(Kshared), EKshared(request)) where the actual message payload is encrypted
with a randomly generated 128-bit AES key Kshared, and the symmetric key it-
self is encrypted with the 1024-bit public RSA key of the broker PKbroker. Ran-
domized padding is added to defend against dictionary attacks. The response
from the broker is then EKshared(reply) encrypted with the symmetric key from the
corresponding request. The request and response messages of this form serve
as building blocks for all client-broker communications, which include ads de-
livery, click and view reporting, as well as the new communication channels
required for distributing scrapers, website and keywords dictionaries and ex-
perimental conﬁgurations (Section 7.6).
74
7.5 Privad Implementation
We built a fully functional Privad system. Following the architecture described
in Section 6.1, our prototype comprises three principal components: the client,
the dealer and the broker. The client is implemented as a 154KB Firefox ad-
don written entirely in JavaScript (8.5K lines of code not counting the pidCrypt
library and autogenerated RPC client code). All backend components are im-
plemented in Java, totaling 14K lines of code with the dealer, broker, and ad
generation infrastructure taking roughly equal parts. All Privad datatypes and
interfaces between system components are deﬁned in 600 lines of Apache Thrift
IDL [3], producing 48K and 6K lines of Java and JavaScript code respectively.
We chose to implement the client as a browser addon to enable us to scrape
highly-dynamic AJAX web applications, which would have been impossible
with a standalone daemon or local browser proxy. Concerned with Javascript
performance for cryptographic operations, we delegated all CPU-intensive pro-
cessing to two independent web workers (one responsible for Privad-related
functionality, the other for PDDP). These background Javascript threads have
no access to the DOM and communicate with the main browser thread via asyn-
chronous message passing. Also, they serve as the single gateway between the
client and the dealer. By outsourcing cryptographic operations, data serializa-
tion and network communication to background workers, we ensured that there
was no negative impact on the user’s browsing experience.
These web workers expose a thin set of predeﬁned API and thus serve as a
proof-of-concept reference monitor that performs the encryption and network
I/O, but does not validate message contents. Potentially our client could get
75
around this reference monitor and establish additional communication chan-
nels to the broker (in that sense the web workers are not the only point of com-
munication between the client and the backend components). But in contrast
to the proprietary closed source clients anticipated by Privad, our implementa-
tion is open source. It can be easily validated through manual inspection4 and,
therefore, does not have to be sandboxed.
All client-dealer communication is performed over HTTP to accommodate
clients behind ﬁrewalls and proxies. We use JSON since it is the only format
currently supported by the JavaScript Thrift library. While the dealer is written
as a Jetty [57] server handler, other backend components are built on top of
Thrift servers and communicate using binary Thrift format.
7.6 Client Details
In addition to the two communication channels between the client and the bro-
ker (ad delivery and view/click reporting) required by vanilla Privad, we also
introduced a distribution and update mechanism for product scrapers, shop-
ping websites and product term whitelists. To keep their whitelists and scrapers
up-to-date, clients periodically issue and upload a request containing the hash
of the currently active whitelist. As long as the hashes of the client’s and bro-
ker’s lists match, the request is ignored by the broker. If hashes do not match
(e.g., entries were added or removed from the whitelist), the new whitelist is
sent in response.
4Which is the case – our client code has been vetted by Mozilla reviewers
76
A similar mechanism is used to disseminate experiment conﬁgurations. In
addition to the hash of the conﬁguration in place, clients also include their con-
ﬁguration class in the request. This class is randomly selected from 16 avail-
able values during the client’s ﬁrst launch. By dividing client’s population
into 16 groups, we are able to run multiple experiments in parallel. An experi-
ment conﬁguration contains a number of parameters that specify start and end
timestamps and regulate ad placement strategy (none, everywhere, mixed, ran-