## 一、html, js 的自解码机制
html 的解析顺序：html parser --> css parser -->javascript parser  
`')" />`
我们可以看到这个button添加了click事件，那么当点击按钮的时候会向网页的文档流中插入html代码，弹出对话框。  
``` javascript
function HtmlEncode(str) {
    var s = "";
    if (str.length == 0) return "";
    s = str.replace(/&/g, "&amp;");
    s = s.replace(//g, "&gt;");
    s = s.replace(/\"/g, "&quot;");
    return s;
}
```
A: ``  
B: `'))"  />`
上面两条的执行结果是一样的，都只是在网页中输出了`` 而没有弹框， 只不过A中的js代码在执行前已经先按照html的形式解码了，浏览器已经先将 `&lt;img src=@ onerror=alert(123) /&gt;` 解码成 ``，所以他们的执行效果是一样的。  
关键的问题是这里的js代码是出现在html标签之间的，因为嵌入到html标签中的js 代码在解析之前会先按照html规则进行自动解码，包括：
进制编码：&#xH（十六进制格式）、&#D（十进制格式）。  
HTML 实体编码，下面是 html5 新增的实体编码：  
&#38;colon; => [冒号]  
&#38;NewLine; => [换行]  
case: `click`  
以上是关于js在html内的解码，那么假如用户的输入后所传递的值并不是出现在html标签之内，而是出现在js中呢？ 浏览器也有js的解析规则，还是举例子来说明  
``` javascript
```
上边的例子会弹出对话框吗?是不会的，因为它出现在js代码之中，上下文环境为JavaScript，浏览器解析前会将出现在js代码中的以下内容编码进行解码  
1):UniCode形式(\uH) 
``` javascript
```
我们发现这个例子弹出对话框了，道理是一样的，js在执行前已经将特殊字符解码了。   
2):普通16进制(\xHH) 或者 8进制(\[0-7]{1,3})  
``` javascript
```
3):纯转义，如果用户带入js代码的内容中含有 '、"、 这些字符将他们进行转义是没有意义的，还是会原样的输出  
看下边的示例:  
``` javascript
 //document.write('\'); //弹框
 //document.write('te\'st'); //te'st
 //document.write('te\"st'); //te"st
```
由此可知 在js代码中对这些字符转义是没意义的。  
具有 HtmlEncode 功能的标签  
如 &lt;textarea&gt;、&lt;title&gt;、&lt;iframe&gt;、&lt;noscript&gt;、&lt;noframes&gt;、&lt;xmp&gt;、&lt;plaintext&gt;， html 在这些标签里面是不解析的，比如 `$('tt').innerHTML=''`，不会造成弹框。&lt;xmp&gt; 没有HtmlEncode 功能，&lt;plaintext&gt; 在 Firefox 下不会进行 HtmlEncode 编码，而在 Chrome 下面会。  
## 二、解码顺序
1.第一个例子，现在考虑这三种编码同时存在的情况  
`');">click`  
首先是 HTML 解码，结果为  
`');">click` （上一行代码浏览器解析完查看dom树审查元素）  
点击链接后，先是 URL 解码，结果为（假设是 style 属性，则会执行 css 解码）  
`');">click`
最后是 JS 解码，结果为  
`');">click`
应该会出现一个弹窗，内容是 `` 。  
2.第二个例子，一段 php 代码  
``` php
          ');">test
```
当参数input的值为: `%26lt%5cu4e00%26gt` 的时候，因为 php 使用 $_GET 获取参数值（urldecode），故返回的 html 源码是  `test`，浏览器解析时 html 解码 为 `');">test` （查看dom 树审查元素），点击时进行 js 解码，故弹框为  ``  
## 三、浏览器urlencode 的影响
从浏览器 url 发出的请求，如果进行了 urlencode（比如chrome一般会编码 "<>，firefox 一般会编码 ' " &#96; <>， 而ie 分具体情况，如 /path/payload 会编码，而 /path/aa?bb=paylod 不会编码），比如将 `"` 转成`%22` 发出去，在服务器端的php 接收到的是原始的`"` 还是编码后的`%22` 得看用`$_GET["key"]` 还是`$_SERVER['QUERY_STRING']`，还要看在php 脚本内有没有做 `addslashes` 或者 `htmlspecialchars` 等函数调用，这样就能判断解析脚本 echo/print 出来的html 是怎样的组织形式，当然客户端请求得到的html 也就是这样的形式了。那为什么在chrome中对于`  