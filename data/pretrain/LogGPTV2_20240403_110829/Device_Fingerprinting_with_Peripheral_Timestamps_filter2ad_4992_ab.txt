initiates endpoint polling, there is no load induced on the CPU
until an event is received. The USB speciﬁcation states that
the maximum polling interval (set by the bInterval ﬁeld
in the endpoint descriptor) for low-speed devices must be in
the range 10-255ms. However, it is common practice for low-
speed devices to use an 8ms polling interval [10].
Prior to USB, the Personal System/2 (PS/2) protocol was
widely used. Unlike USB, PS/2 delivers a hardware interrupt
directly to the host CPU [17]. Despite being interrupt based,
a sample rate must be set on the PS/2 device itself [18]. This
ranges from 10-200Hz, such that the device will send no more
than 200 events per second to the host. Once received, the
interrupt must be handled by the host.
3) Process scheduling: An interrupt request (IRQ) signals
the presence of peripheral input to the CPU. The IRQ is
raised over a physical line connected to the programmable
interrupt controller (PIC). While some IRQ lines have ﬁxed
designations (e.g., PS/2 keyboards connect to IRQ1), USB
keyboards send events to the USB host controller which
typically shares an IRQ line with other devices. What happens
after this depends on the OS process scheduling policy. Both
the scheduling algorithm and preemption policy can affect the
time at which the IRQ is handled.
On Linux,
there are three main modes of scheduling:
periodic, dynamic, and adaptive [19]. In periodic mode, the
scheduler interrupts the running process to decide on context
switches at a ﬁxed rate speciﬁed by the OS clock tick.
More common on personal computing devices, dynamic mode
employs a periodic strategy under high load and omits schedul-
ing interrupts when the system is idle. This reduces power
consumption on mobile devices which may spend a signiﬁcant
amount of time in an idle state. In adaptive mode, scheduling
interrupts are omitted if there is only one runnable task, which
may be appropriate for systems with real-time constraints.
Process scheduling occurs similarly with other OS families.
On Windows, time is sliced into quantums. One quantum is
the amount of time a thread typically runs for, ranging from
10-15ms [20]. Earlier versions of Windows implemented a
characteristic 64Hz interrupt timer (15.625ms quantum) [21].
4) Browser event loop: The OS kernel notiﬁes the browser
of user input through a callback, after which the browser
queues the event and invokes the appropriate callbacks within
the web page. HTML speciﬁcation conforming browsers ad-
vance state in discrete frames, following an event loop respon-
sible for handling DOM callbacks, rendering, and updating the
DOM [22]. Once the browser has received notiﬁcation of the
event from the OS, it is placed in the event queue. The HTML
speciﬁcation does not mandate a particular speed at which the
event loop executes. Browsers may try to maintain a 60Hz
event loop, synced with screen refresh rate, or scale this up or
down depending on hardware capability and system resources.
If the loop slows beyond the allotted time, frames are dropped
altogether. This is referred to as jank [23].
B. Related work
1) Device and browser ﬁngerprinting: A device ﬁngerprint
is comprised of hardware and software characteristics that
enable device identiﬁcation [5], tracking users [24], authen-
tication [25], and Internet measurement applications such as
alias resolution, i.e., associating multiple IP addresses to a
single physical device [26]. Device ﬁngerprinting techniques
vary by which sensor or software system is measured, ranging
from timestamps and sensors to browser version information.
Closely related to our work is that of Kohno et al. [7],
which demonstrated that a physical device could be remotely
identiﬁed based on TCP timestamps (enabled when the TCP
Timestamps option is set), as well as ICMP timestamp replies.
An on-path observer calculates the offset between TCP times-
tamps and a reference clock controlled by the observer. Over
time, this offset may grow or shrink, and the clock skew is
rate at which the timestamps from each source diverge. This
phenomenon is well documented, as the network time protocol
(NTP) speciﬁcally aims to synchronize the time of networked
machines by accounting for differences in skew [27]. Clock
skew measured through TCP timestamps may be relatively
unique to a physical device depending on the victim’s OS and
whether system time is NTP synchronized.
Taking this concept further, clock drift refers to the change
in clock skew (i.e., frequency offset) over time. Crystal oscil-
lator circuits may speed up or slow down based on ambient
temperature. Thus, heat dissipation from the CPU under high
load can result in clock drift. This can allow a location-hidden
service, e.g., over Tor, to be resolved to the same physical
machine that hosts a publicly accessible IP address [8]. An
adversary may induce a high CPU load on the victim by
repeatedly accessing resources hosted by the hidden server
and simultaneously observe clock drift through a public IP
address assigned to the same machine.
Our work differs from [7] and [8] in that timestamps are
acquired within a web browser rather than remotely. This
threat model aligns with recent work on browser ﬁngerprinting
in which device-speciﬁc hardware and software attributes are
measured within a web browser to provide the means for
stateless tracking compared to, e.g., cookies [1]. The browser’s
User-Agent string, screen resolution, and installed fonts, to
name a few, all provide some entropy which may contribute
to a relatively unique identiﬁer.
Hardware features speciﬁcally can enable cross-browser
ﬁngerprinting, for example pixel-level differences based on
GPU-speciﬁc antialiasing effects [28]. Repeated function ex-
ecution time is also relatively unique due to performance
variability across machines [9]. More recently, high-entropy
mobile device ﬁngerprinting techniques have been developed
based on accelerometer and magnetometer readings [29], [5].
These sensors must be calibrated due to manufacturing im-
perfections, and the calibration settings are unique per device.
Our approach departs from these techniques in that no special
sensors or JavaScript APIs are utilized.
2) Human computer interaction: The precise timing of
user input has been extensively studied in human-computer
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:54 UTC from IEEE Xplore.  Restrictions apply. 
1020
interaction (HCI), though from a different perspective than our
work. Input latency, or lag, is the time delay from physical
interaction to a change in the system state, e.g., pressing a
key and then seeing a character appear on screen. Latency
is a critical factor that can affect human task performance
measured by the amount of effort or time a computing task
takes [30]. Peripheral latency has been well documented [12],
and HCI designers often strive for low-latency systems [31].
Recent work has noted stark differences in latency among
USB-connected keyboards and mice [10]. Because of the
various polling processes described in Section II-A,
input
latency distributions are often multimodal and not properly
summarized by aggregate statistics such as mean and standard
deviation. The USB polling rate largely determines input la-
tency, although the ways in which a low-speed device (125Hz)
adapts to high speed polling (1000Hz) can differ dramatically.
This is signiﬁcant in the HCI literature because input latency
can skew the results of psychological studies that measure
minuscule differences in response time [32].
The measurement of latency requires a closed-loop setup,
e.g., automating mouse input and detecting when the pointer
moves on screen. Although device ﬁngerprinting might be fea-
sible through latency measurements, this setup does not scale
well. Our approach is partly inspired by the work of Wimmer
et al. [10] but considers only timestamps measured on the host
rather than peripheral-to-host latency measurements.
input
In addition to HCI, peripheral
is of interest for
biometric applications. Differences in the way people type or
move a mouse cursor can form the basis of user authentication,
such as a second factor during password entry [33]. Research
in this area measures idiosyncratic user behaviors for person
recognition, and includes keyboard, mouse, and touchscreen
input [34], [35]. This capability is a privacy concern as well,
noting that user proﬁling (e.g., predicting age and gender) can
be performed from mouse pointer motion alone [36].
Recently, keystroke biometrics have shown promise as a
means of multi-factor authentication when scaled up to thou-
sands of users [37]. TypeNet is a recurrent neural network
(RNN) trained with triplet loss using a large keystroke dataset.
The model embeds a sequence of keystroke timings in a low-
dimensional feature space and achieves user veriﬁcation error
rates that plateau at around 2% with 50-keystroke samples
and a population size up to 100k users. Our work draws
some inspiration from Acien et al. [37]; we show how device
behavior can be extracted from the same data.
Device-speciﬁc behaviors in keyboard event
times have
previously been observed, with [38] and [39] noting device
effects on event timing as a limitation to keystroke biometrics.
In [39], timing artifacts resulting from USB polling were found
to signiﬁcantly alter user behavior ﬁngerprints. We propose
that device-speciﬁc behaviors could actually be leveraged to
improve keystroke biometric systems and show that more
discriminatory power is achieved by pairing features that
measure both device and user behavior.
III. DUAL CLOCK MODEL
We introduce the dual clock model and estimation tech-
niques in this section, borrowing some terminology from [7]
(based on the NTP standard), [40], and [41] (see Appendix A
for a summary of notation). Our model departs from prior
work that ﬁngerprints devices based skew and drift (e.g., [8],
[7], [11], and [42]) in two important ways: ﬁrst, we assume
that only a single time source is available which contains an
implicit reference; second, we show that temporal dynamics
beyond skew and drift can form the basis of device ﬁnger-
printing. Speciﬁcally, we estimate the instantaneous phase of
a low frequency clock measured at irregular intervals.
A. Overview
The dual clock model contains a reference clock CR that
reports the time at which some lower frequency subject clock
CS ticks, exempliﬁed in Figure 1. The reference clock emits
measurements at irregular times driven by some external event
source, e.g., input to a keyboard or other peripheral device.
Before reaching the reference clock, events pass through a
low-frequency polling process which acts as a buffer. As a
result, timestamps measured by the reference clock are closely
aligned to the subject clock ticks.
Let ˙ti be the time of event i which occurs as soon as there
is a measurable state change in the peripheral device (e.g., a
keyboard circuit closes), and let tR
i be the observed timestamp
of the ith event as measured by the reference clock. The event
times ˙ti are not observed. Because of event handling, which
at a minimum includes the physical transfer of an event from
peripheral to host, tR
Clock resolution is the granularity with which time ad-
vances, i.e., the period between ticks. We denote the period of
T S ). Likewise,
CS by T S (alternatively CS has frequency f S = 1
CR has period T R and frequency f R = 1
T R . Driven by the event
source, the subject clock advances in discrete ticks,
i > ˙ti.
kS
i =
i ∈ N (i.e., kS
i
T S
(1)
is a natural number) and i ∈
where kS
{1, . . . , N}. Event times of the subject clock are given by
(2)
where φi ∈ [0, T S) is the instantaneous phase of CS. Reference
clock ticks are given by
tS
i = φi + kS
i T S
(cid:24) ˙ti
(cid:25)
(cid:25)
(cid:24) tS
i
T R
kR
i =
(3)
and the timestamps observed at the reference clock CR have
the form
tR
i = kR
i T R
(4)
where T R is small and thus time quantization performed by the
i are bounded by reference
reference clock is minimal. The tS
i → tS
i as f R → inf.
clock ticks, tR
i ≈ tS
We assume that T R is small enough such that tR
i .
i − T R < tS
i ≤ tR
i , and tR
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:54 UTC from IEEE Xplore.  Restrictions apply. 
1021
τi =(cid:0)kS
(cid:1) T S + δi
i − kS
i−1
where δi = φi − φi−1 and i ≥ 2.
The dual clock model applies to peripheral timings. DOM
input events can typically be measured with at least millisec-
ond resolution in a web browser (i.e., f R = 1kHz) and must
pass through several lower-frequency processes, such as key-
board matrix scanning (100-200Hz), USB polling (125Hz), OS
scheduling (64-100Hz), and the browser event loop (60Hz).
Properties of the subject clock can be estimated through the
timestamps provided by the reference clock. These include the
subject clock’s resolution (i.e., frequency), skew with respect
to a known standard, drift, phase, and instantaneous phase.
B. Estimating frequency
Estimating the subject clock’s frequency can reveal which
process or device class CS belongs to. For example, 125Hz is a
hallmark of USB polling while 60Hz indicates a browser event
loop or touch sampling rate. We estimate f S through spectral
analysis of the observed times tR
i are point
events, the spectral density is computed directly, i.e., without
performing a fast Fourier transform (FFT), as
i . Because the tR
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) N(cid:88)
i=1
1
N
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)2
Clock skew is the rate of divergence between two clocks,
thought to be relatively unique based on device type and
manufacturing processes. However, unlike [7] and [40], we
assume that only a single time source is provided. Instead,
we measure skew between CS and hypothetical clock ˙C
which represents a speciﬁcation-conforming subject clock with
frequency ˙f (period ˙T = 1
˙f
) based on known standards.
The choice of
˙f is based on ˆf S being close to a known
standard. For example, an estimated frequency ˆf S = 125.1Hz
implies USB polling which should occur at 125Hz, thus the
intended frequency would be ˙f = 125Hz. Clock skew in this
case quantiﬁes how quickly the subject clock diverges from its
intended frequency as measured by the reference clock: ˆf S is
measured in terms of CR. That is, the unit of ˆf S is cycles per
second as measured by CR, and an estimated ˆf S = 125.1Hz
indicates only that CS runs fast compared to CR when in fact it
could be CR running slow. However, assuming CR comes from
an NTP adjusted source such as Date.now(), the former
seems more probable.
We ﬁrst estimate ticks of the subject clock using
(cid:23)
(cid:22) tR
i
ˆT S
The low resolution of the subject clock has a quantization
effect on the observed timestamps tR
i . That is, the intervals
i−1 between timestamps measured at the reference
τi = tR
clock are closely aligned to some multiple of the subject clock
period T S,
i − tR
various APIs to limit ﬁngerprinting [44] and timing attacks
[45],
in some cases by introducing noise to CR. We test
the effectiveness of these mitigations in Section VII-E by
comparing device ﬁngerprints before and after Spectre patches
were applied.
(5)
C. Estimating skew
P (f ) =
e2πjf tR
i
(6)
ˆkS
i =