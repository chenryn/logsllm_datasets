ity to frequent deployment and automatic calibration of performance models
responding to new alternatives during this process.
42 R. Wang
Model Parameterization. Resource demand is a critical factor among model
parameters that should be specified. The accuracy of resource demand estima-
tionisdecisivefortheperformanceofperformancemodels.Generally,regression-
based algorithms have been employed to solve the resource demand estimation
mostly based on utilization and response times [8,11]. With machine learning,
there are existing studies that estimate resource demands (e.g., CPU utiliza-
tion)fortheabilitytopredicttimeseriesdata[3]andcanalsohelptoselectthe
optimal approaches for estimation on account of varieties of existing resource
demand approaches [6].
Parametric Dependencies for Performance Models. Accurate resource
demand estimation requires identifying appropriate input parameters, their
dependencies, and their impact on the different elements of the performance
model [4]. With current adoption of DevOps, parameterizing the performance
models is more challenging for frequent releases and new features. To identify
and specify the parametric dependencies of performance models, reverse engi-
neering has been adopted in some works including static analysis and dynamic
analysis of source codes [7,9]. To characterize the relationship between depen-
dent and independent variables, [5] provides a machine learning-based feature
selection approach to represent parametric dependencies from monitoring data.
However,formicroserviceorserverless-basedarchitecture,incrementallydetect-
ing new changes and features to update parametric dependencies is required in
each DevOps cycle and the complexity of dependencies analysis should also be
considered.
3 Methodology
For learning performance models, sock shop1 has been selected as the system
under test (SUT). Sock shop is a microservices-based application that has been
widely used as benchmarks and study case for performance and quality of cloud
service [10,13], which simulates an e-commerce website on which users can log
in to the account, view and buy items. The application has been build with dif-
ferent language frameworks including Java Spring, GoLang and Node JS, along
with MongoDB and MySQL as data storage, which is intended to provide a
testbed for microservices and cloud orchestration. Sock shop provides several
services that are packaged in Docker containers and all services communicate
using REST over HTTP.
3.1 TOSCA Modelling
To generate architectural performance models, we propose to use TOSCA mod-
ellingwithperformance-relatedspecificationthatcanbefurthertransformedthe
specification model into layered queueing networks for performance prediction.
1 https://microservices-demo.github.io.
Learning Performance Models Automatically 43
TOSCA [1] is an OASIS standard language that can standardize the specifi-
cation of cloud applications and allow deployment and management based on
TOSCAmodelling.Componentsandtopologicalstructureoftheapplicationcan
be extracted by learning from monitoring data. With TOSCA, an application
can be specified in a service template. The nodes representing application com-
ponents are modelled within node templates by classifying different endpoints
and the edges between different components are extracted by analyzing the net-
work traffic between different services. After constructing the structure of the
application, based on monitoring data, resource demand of each microservice
can be estimated by regression approaches.
TheapplicationsockshophasbeenmodelledwithTOSCAbasedonRADON
modeling profile2. RADON TOSCA provides an extended TOSCA modelling
that helps to describe microservice and serverless orchestration. The represen-
tation of sock shop with RADON type hierarchy is shown in Fig.1. As it can be
observed in Fig.1, the client node represents the close workload for the applica-
tion. For these three target services, all of them are hosted on respective con-
tainers. The relationship ‘routed front’ indicated that the requests made by the
clientcouldbesenttothefrontendserviceandthenfrontendservicewouldroute
requeststocartandcatalogueserviceaccordingtotherequestedendpointswith
defined relationships ‘catalogue request’ and ‘cart request’.
Fig.1. Representation of modelling Sock Shop with RADON type hierarchy
2 https://radon-h2020.eu/wp-content/uploads/2019/11/D4.3-RADON-Models-I.
pdf.
44 R. Wang
3.2 Layered Queueing Network (LQN) Models
After specifying the application with TOSCA, RADON decomposition tool has
been employed to generate LQN models, which can parse YAML file and trans-
form the topology graph into LQN models automatically3. The generated LQN
model is shown in Fig.2. The task client simulated the concurrent users that
made requests to different services. Each task in LQN model represented a cer-
tain microservice except to client. Entries in each task were defined as different
classesofworkloadaccordingtobothendpointstherequestsmadetoanddiffer-
ent HTTP methods. The time consuming on the processor of each activity has
been declared with the mean service demand. All of the mentioned parameters
in LQN models have been specified with TOSCA in properties within node and
relationship templates. By solving LQN models with simulation or analytical
solvers, we can predict the performance of the application.
Fig.2. The generated LQN model for Sock Shop
3.3 Learning Parametric Dependencies from Code Analysis
Static analysis of code allows to check, debug and obtain information of pro-
gramswithoutactualexecutionofcodes.InDevOpspractices,aftercommitting
new version of code in the development phase, source code analysis could be
3 https://radon-h2020.eu/wp-content/uploads/2020/01/D3.2-Decomposition-Tool-I.
pdf.
Learning Performance Models Automatically 45
employed to capture new changes that are related to performance, e.g., adding
new functions and changing inside a method. TOSCA models can be updated
according to these detected changes of source code, providing a more accurate
specification in each iteration of committing source code. Continuous TOSCA
model updating can keep the architectural performance model consistent with
the latest development. In order to response to new changes in DevOps con-
text, incremental detection and analysis of alternatives should be implemented,
instead of analyzing and modelling the whole system every iteration.
Parametric dependencies can also be leveraged to optimize the resource
demand estimation. By tracing the data flow and control flow that generated
from source code and execution, the relations between input parameters and
corresponding methods can be captured, including branches, loops, numbers of
serviceinvocations.Thentheresourcedemandcanbeformulatedwithparamet-
ric dependencies as additional features to revise the estimated value that could
be fed into TOSCA parameterization.
4 Conclusion and Future Work
In this paper, we propose an approach to learn performance models automati-
callythatreachtheobjectiveoftheresearchproblems.Togeneratearchitectural
models,weintroduceTOSCAmodellingbyanalyzingmonitoringdata.Thenwe
transform performance-related TOSCA models into LQN models for simulation
and prediction. To enrich and update performance models responding to new
changes, we also present that learning parametric dependencies can provide a
possible way to incrementally detect changes and also help to calibrate the esti-
mation of resource demand.
In the future, we plan to integrate the performance models into DevOps
pipelineandimplementaframeworkenablingtoupdateperformanceprediction
models automatically.
References
1. Binz,T.,Breitenbu¨cher,U.,Kopp,O.,Leymann,F.:TOSCA:portableautomated
deployment and management of cloud applications. In: Bouguettaya, A., Sheng,
Q., Daniel, F. (eds.) Advanced Web Services, pp. 527–549. Springer, New York
(2014). https://doi.org/10.1007/978-1-4614-7535-4 22
2. Brosig, F., Kounev, S., Krogmann, K.: Automated extraction of palladio com-
ponent models from running enterprise java applications. In: Proceedings of the
Fourth International ICST Conference on Performance Evaluation Methodologies
and Tools, pp. 1–10 (2009)
3. Duggan,M.,Mason,K.,Duggan,J.,Howley,E.,Barrett,E.:PredictinghostCPU
utilizationincloudcomputingusingrecurrentneuralnetworks.In:201712thInter-
national Conference for Internet Technology and Secured Transactions (ICITST),
pp. 67–72 (2017)
46 R. Wang
4. Eismann, S., Walter, J., von Kistowski, J., Kounev, S.: Modeling of parametric
dependencies for performance prediction of component-based software systems
at run-time. In: 2018 IEEE International Conference on Software Architecture
(ICSA), pp. 135–13509 (2018)
5. Grohmann,J.,Eismann,S.,Elflein,S.,Kistowski,J.V.,Kounev,S.,Mazkatli,M.:
Detectingparametricdependenciesforperformancemodelsusingfeatureselection
techniques. In: 2019 IEEE 27th International Symposium on Modeling, Analysis,
and Simulation of Computer and Telecommunication Systems (MASCOTS), pp.
309–322 (2019)
6. Grohmann,J.,Herbst,N.,Spinner,S.,Kounev,S.:Usingmachinelearningforrec-
ommending service demand estimation approaches-position paper. In: CLOSER,
pp. 473–480 (2018)
7. Kappler, T., Koziolek, H., Krogmann, K., Reussner, R.: Towards automatic con-
struction of reusable prediction models for component-based performance engi-
neering. Software Engineering, 2008 (2008)
8. Kraft,S.,Pacheco-Sanchez,S.,Casale,G.,Dawson,S.:Estimatingserviceresource
consumption from response time measurements. In: Proceedings of the Fourth
International ICST Conference on Performance Evaluation Methodologies and
Tools, pp. 1–10 (2009)
9. Krogmann,K.,Kuperberg,M.,Reussner,R.:Usinggeneticsearchforreverseengi-
neering of parametric behavior models for performance prediction. IEEE Trans.
Software Eng. 36, 865–877 (2010)
10. Nguyen, C., Mehta, A., Klein, C., Elmroth, E.: Why cloud applications are not
ready for the edge (yet). In: Proceedings of the 4th ACM/IEEE Symposium on
Edge Computing, pp. 250–263 (2019)
11. P´erez,J.F.,Pacheco-Sanchez,S.,Casale,G.:Anofflinedemandestimationmethod
for multi-threaded applications. In: 2013 IEEE 21st International Symposium on
Modelling,AnalysisandSimulationofComputerandTelecommunicationSystems,
pp. 21–30. IEEE (2013)
12. Petriu, D.C., Shen, H.: Applying the UML performance profile: graph grammar-
basedderivationofLQNmodelsfromUMLspecifications.In:Field,T.,Harrison,
P.G., Bradley, J., Harder, U. (eds.) TOOLS 2002. LNCS, vol. 2324, pp. 159–177.
Springer, Heidelberg (2002). https://doi.org/10.1007/3-540-46029-2 10
13. Rahman, J., Lama, P.: Predicting the end-to-end tail latency of containerized
microservicesinthecloud.In:2019IEEEInternationalConferenceonCloudEngi-
neering (IC2E), pp. 200–210. IEEE (2019)
Blockchain-Based Business Processes:
A Solidity-to-CPN Formal Verification
Approach
B
Ikram Garfatta1,2( ), Ka¨ıs Klai2, Mahamed Gra¨ıet3,4, and Walid Gaaloul5
1 University of Tunis El Manar, National Engineering School of Tunis, OASIS,
Tunis, Tunisia
2 University Sorbonne Paris North, LIPN UMR CNRS 7030, Villetaneuse, France
PI:EMAIL
3 Higher Institute for Computer Science and Mathematics, University of Monastir,
Monastir, Tunisia
4 National School for Statistics and Information Analysis, Rennes, France
5 Institut Mines-T´el´ecom,T´el´ecom SudParis, UMR 5157, SAMOVAR, E´vry, France
Abstract. Withitsspanofapplicationswideningbytheday,thetech-
nologyofBlockchainhasbeengainingmoreinterestindifferentdomains.
It has intrigued many investors, but also numerous malicious users who
have put different Blockchain platforms under attack. It is therefore an
inescapable necessity to guarantee the correctness of smart contracts
as they are the core of Blockchain applications. Existing verification
approaches, however, focus on targeting particular vulnerabilities, sel-
dom supporting the verification of domain-specific properties.
In this paper, we propose a translation of Solidity smart contracts
into CPNs (Coloured Petri nets) and investigate the capability of CPN
Tools to verify CTL (Computation Tree Logic) properties.
· · ·
Keywords: Blockchain Formal verification Smart contract
· ·
Solidity Coloured Petri nets CTL properties
1 Introduction
Within the span of the two last decades, many advances have been made in the
world of Blockchain, allowing this technology to expand its reach to a myriad
of application domains including Business Process Management (BPM) [13]. A
Blockchainplatformcanindeedprovideareliableexecutionofbusinessprocesses
(BPs)evenwithinatrustlessnetwork,especiallythankstotheconceptofsmart
Supervised by Ka¨ıs Klai, University Sorbonne Paris North, LIPN UMR CNRS 7030,
Villetaneuse,France,andMahamedGra¨ıetHigherInstituteforComputerScienceand
Mathematics,UniversityofMonastir,Monastir,TunisiaandNationalSchoolforStatis-
tics and Information Analysis, Rennes, France.
Co-directedbyWalidGaaloul,InstitutMines-T´el´ecom,T´el´ecomSudParis,UMR5157,
SAMOVAR, Paris, France.
(cid:2)c SpringerNatureSwitzerlandAG2021
H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.47–53,2021.
https://doi.org/10.1007/978-3-030-76352-7_7
48 I. Garfatta et al.
contracts.InaBPMcontext,asmartcontractcandefinebusinesscollaborations
ingeneralandinter-organizationalBPsinparticular.Infact,smartcontractsare
pieces of script code that act like autonomous software agents, used to enforce
management rules on the execution of transactions on the Blockchain. They are
stored on and executed by the Blockchain and therefore inherit its characteris-
tics, particularly its immutability. This same feature can, however, turn into a
weakspotforsuchcontracts.Infact,asasmartcontractcannotbealteredonce
it has been deployed on the Blockchain, it cannot be corrected either, which
makes verifying its correctness prior to its deployment an indispensable neces-
sity. Furthermore, the correctness verification is an important aspect for the
design of blockchain-based BPs. The assessment of such processes involves both
requirements validation and consistency.
The main long-term objective of this thesis is therefore to develop an app-
roach that allows to construct correct blockchain-based BPs. In this paper, we
present our progress for the first milestone towards this goal, which we define
as the verification of smart contracts in a general context. We are interested in
Ethereum smart contracts as it is currently the second largest cryptocurrency
platform after Bitcoin besides being the inaugurator of smart contracts, and
particularly those written in Solidity [1] as it is the most popular language used
by Ethereum. The contribution described herein is a first step towards a formal
verification approach based on CPNs [7] for Solidity smart contracts.
Existing studies on the formal verification of smart contracts follow two
main streams. The first group of studies are based on theorem proving [2–4].
In this case, the verification is not automated and requires the user’s expertise
in the manipulation of the used theorem prover as well as manual intervention
in discharging proofs. The second group of studies are based on symbolic model
checkingcoupledwithcomplementarytechniquessuchassymbolicexecutionand
abstraction [5,8,11,12,14]. In order to use symbolic execution to generate the
traces that would be used for the verification, the proposed approaches usually
use under-approximation (e.g., in the form of loop bounds) which means that
criticalviolationscanbeoverlooked.Thisexplainsthepresenceoffalsenegatives
and/orpositivesintheirreportedresults.Wealsonotethatmostoftheexisting
studies target specific vulnerabilities in smart contracts, and few are those that
allow expressing customizable properties, in which case they are control flow-
related properties. In fact, none of these studies target data-related properties.
It is worth mentioning that most of the proposed approaches operate on the
EVM bytecode rather than on the Solidity code because of the latter’s lack of
formal semantics. This, however, results in loss of contextual information, and
consequently limits the range of properties that can be verified on the contract.
Toovercometheseshortcomings,weproposeanalgorithmforthetranslation
of a Solidity smart contract into a hierarchical CPN model over which CTL
properties can be verified. This work can easily be integrated as an extension
layer into existing studies that rely on the translation of BP models into smart
contractsasin[10]whichgeneratesSoliditycodefrommodelswritteninBPMN
(Business Process Model and Notation), to verify their output and therefore