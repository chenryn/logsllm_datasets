9: ˜c ← UT c
10: Determine θ
11: for xj ← current_test_vector do
12:
13:
14:
15:
16:
17: end for
18: function pasad_train(Tt r ain, N , L)
X ← hankel(Tt r ain, N , L)
19:
z ← svd(X)
20:
Determine r
21:
U ← z.eigenvectors(r )
22:
return UT
23:
24: end function
y ← ˜c − UT xj
Dj ← yT y
if Dj ≥ θ then
end if
generate alarm
▷ The partial isometry
▷ Compute the centroid
▷ Alarm threshold
▷ The departure score
▷ Check for departure
▷ Trajectory matrix
▷ Solve the SVD problem
▷ The statistical dimension
▷ The r leading eigenvectors
such as kinetics, components, and operating conditions, in order to
protect its proprietary nature.
The TE process produces two liquid products (G, H) from four
gaseous reactants (A, C, D, E), in addition to a byproduct (F) and an
inert (B), making a total of eight chemical components, coded after
the first eight letters of the alphabet. There are five main operation
units: reactor, condenser, recycle compressor, vapor-liquid sepa-
rator, and stripping column. The gaseous reactants, fed by three
different feeds, react to form liquid products. These products, along
with residual reactants, leave the reactor as vapors, which are then
cooled by the condenser to return to the liquid state. Next, the
vapor-liquid separator isolates the non-condensed vapors, which
are fed once again to the reactor by using a centrifugal compressor.
The condensed components, on the other hand, move to a stripping
column to remove the remaining residual reactants. The final prod-
uct (mix of G and H) exits the stripper and heads towards a refining
section that separates its components. This refining section is not
included in the model. Similarly, the inert and the byproduct are
purged in the vapor-liquid separator as vapor.
The process has 41 measured variables, labeled as XMEAS, that
comprise the readings of the sensors, and 12 manipulated variables,
named XMV, that correspond to actuator commands. The controller
reads the XMEAS values and, based on the implemented control
strategy, sends commands to the XMV variables, which mostly rep-
resent valves that control different process flows. A full description
of all process variables can be found in the original TE paper [12].
We use the open-source DVCP-TE implementation of the TE pro-
cess,5 first presented by Krotofil and Larsen [30], which is oriented
towards security research and features support for performing at-
tacks on both sensor and actuator signals. DVCP-TE is a Simulink
model, where the process is implemented as an S-function. A set of
control strategies, along with a framework for performing attacks,
are implemented in Simulink blocks.
As stated previously, the TE process originally lacked any control
strategy. If the process runs in absence of a control algorithm, it
remains unstable and eventually comes to a complete stop due to a
too high separator liquid level. In order to keep the process running
and maintain its stability, we use the control strategy presented
by Larsson et al. [32].
Most of the previous work focuses on the unreliability of the
sensor readings, while trusting actuators and controllers [51]. By
contrast, we simulate integrity attacks on both sensors and actuators
as depicted in Figure 2. Once attackers gain access to a control
network in charge of a process, they can either compromise the
data fed to the controller by tampering with the process readings
transmitted by the sensors, or tamper with the commands sent by
the controller to the actuators. In the former case, the controller
makes decisions based on maliciously modified data, potentially
leading to the destabilization of the process. In the latter case, the
process acts on arbitrary commands sent by the attacker rather
than on the commands sent by the controller.
i (t ) and y′
we simulate measured variables u′
We use the attacker model proposed by Krotofil et al. [31], where
ui (t ), yi (t )
ua
i (t ), ya
i (t ), ya
i (t )
i (t ) as
for t (cid:60) Ta
for t ∈ Ta
′
i (t ), y
′
i (t ) =
u
(14)
such that ui (t ), yi (t ) and ua
i (t ) correspond to the ith original
Figure 2: Attack scenarios on control systems: Attacks on
actuator signals (1) and attacks on sensor signals (2).
and modified measured variables at time 0 ≤ t ≤ T respectively, T
is the duration of the simulation run, and Ta is the attack interval.
We have designed the attacks with two main objectives in mind:
(i) Stealth attacks, designed to cause slow damaging perturbations
and aim to degrade the performance of the process; and (ii) direct
damage attacks where the attacker’s goal is to cause damage to
physical equipment (e.g., reactor, stripping column, pipes, etc.) that
5Available at https://github.com/satejnik/DVCP-TE
Physical ProcessSensorsActuatorsController12Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada824is essential for the process to run, mainly by driving the process to
unsafe operating conditions (e.g., high temperature or pressure).
Stealth Attacks. In stealth attacks, attackers try to remain
3.1.1
undetected by keeping the process readings under a set of thresh-
olds, which if exceeded, alarms are raised and operators are alerted.
In the following, we describe three such attacks.
SA1: The manipulated variable XMV(9) corresponds to the valve
that controls the steam input to the stripping column. When the TE
process is controlled by the control strategy of Larsson et al. [32],
no steam is used in the process, and this valve is always closed. In
this attack, we consider that the attacker opens the steam valve at
40%. Compared to a completely open steam valve, this attack has
less impact on the plant operation, but is nonetheless stealthier.
SA2: The manipulated variable XMV(6) corresponds to the purge
valve that controls the output of accumulating reactor gases. Open-
ing this valve more than necessary would result in products being
wasted, since in order to maintain the production rate, more re-
actants would need to be purged from the reactor and fed to the
process. However, opening the purge valve too much would drive
the reactor pressure to a too low level, causing the process to halt.
In this scenario, we set XMV(6) to 28% open, which is wide enough
to degrade the performance of the process without interrupting the
process execution.
SA3: In this sensor attack, we tamper with the readings of the
XMEAS(10) sensor, which measures the purge rate, so that it con-
stantly sends the value zero, tricking the controller into thinking
that there is no purge. The controller would then open the valve
XMV(6) to counteract.
3.1.2 Direct Damage Attacks. Direct damage attacks aim to sab-
otage equipment and eventually lead to the interruption of the
process. In the following, we describe two such attacks.
DA1: The manipulated variable XMV(10) corresponds to the
valve controlling the cooling water flow to the reactor to prevent its
pressure from reaching dangerous levels. Therefore, it is a critical
valve in the process. In this scenario, we set the XMV(10) valve to
35.9% open, slightly less than the optimal setting. Consequently, the
pressure adds up inside the reactor and the TE process execution
eventually stops due to reaching the predefined safety limits.
DA2: In this scenario, the value of the sensor XMEAS(7) measur-
ing the reactor pressure is set to zero, so that the controller thinks
the pressure is significantly lower than it actually is. In response,
the controller opens the way for more reactants to the reactor,
thus accelerating the chemical reaction, and eventually increasing
the reactor pressure. As in DA1, the model stops execution after
reaching a too high reactor pressure.
3.2 Scenario II: The SWaT Dataset
The SWaT dataset [16] is a collection of process readings and net-
work traces from the Secure Water Treatment (SWaT) testbed.6
Constructed to support ICS security research, the SWaT dataset
is divided into two main parts: a seven-day-long capture under
normal operating conditions and a four-day-long capture while
conducting diverse attacks.
The SWaT testbed [36], which was used to build the dataset, is
a real scaled-down version of a waste-water treatment plant. The
treatment process consists of six different treatment phases, each
independently controlled by a PLC, and has the capacity of filtering
18.93 water litres per hour. As such, the testbed is able to faithfully
recreate the operation of a real waste-water treatment plant, albeit
at a manageable scale.
At the process level, the captured data corresponds to 51 sensor
and actuator signals. During the capture, the SWaT testbed under-
goes 41 different attacks, five of them with no physical impact. A
detailed description of the attacks and their impact on the process,
as well as more technical information on the testbed, can be found
in [5, 16, 36].
3.3 Scenario III: A Water-Distribution Plant
In the final scenario, the data consists of network traffic captured
from equipment inside an operational water distribution plant in
Sweden. The 105GB Modbus/TCP traffic capture was recorded over
a period of 106 days.
To emulate a real-world scenario, we have set up a testbed con-
sisting of two single-board computers, one switch with a port-
mirroring feature, and a router. The ICS network traffic was re-
played from network dump files. Then, to capture and parse the traf-
fic, we have built a packet-capturing subsystem on top of Bro [43]
that features a dynamic buffering mechanism to deliver process
data to pasad, after having parsed the packets and extracted the
register data. Aside from replaying the traffic, all other subsystems,
including a C implementation of the detection component of pasad,
were running on a prototype consisting of a single-board computer.
Furthermore, in order to investigate the deployability of pasad
in real environments, we have deployed and run the prototype in
an operational paper factory and analyzed its performance [4].
4 EXPERIMENTS & RESULTS
In this section, we first investigate the time to detection and the
detection accuracy of pasad (EXP. I-III). Then, we compare pasad
with the AR-based method (EXP. IV) to highlight its distinctive ca-
pability of detecting stealthy attacks. In EXP. V, we demonstrate the
ability of pasad to maintain a relatively low false alarm rate by de-
termining the alarm threshold as defined in §2.9. Finally, in EXP. VI,
we explore the applicability of pasad to real-world scenarios.
In all subsequent figures, the upper subplot shows the raw sensor
readings and the lower subplot displays the departure scores. The
initial part of the time series that was used for training corresponds
to sensor measurements collected while the process is running nor-
mally (busy, not idle) and is highlighted in blue, and the extracted
signal is highlighted in green.7 The dotted horizontal line corre-
sponds to the threshold level, and the shaded region corresponds
to the time interval (Ta) during which the attack was occurring.
The vertical line indicates when the attack started. The selection of
6The dataset was collected by the iTrust group from the Centre for Research in Cyber
Security in the Singapore University of Technology and Design, and is available upon
request at https://itrust.sutd.edu.sg/research/dataset/
7To produce the extracted signal, the training vectors are first projected onto the
signal subspace, then an approximated series is reconstructed by applying the diagonal
averaging step in SSA [19].
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada825Figure 3: Stealthy attack SA1 compro-
mising the control variable xmv(9) de-
tected in sensor variable xmeas(5).
Figure 4: Stealthy attack SA2 compro-
mising the control variable xmv(6) de-
tected in sensor variable xmeas(10).
Figure 5: Stealthy attack SA3 compro-
mising the sensor variable xmeas(10) de-
tected in sensor variable xmeas(9).
pasad’s free parameters for all the experiments described herein
were chosen according to §2.9, and can be found in Table 1.
4.1 EXP. I: Detection of Stealth Attacks
In EXP. I, we wish to detect the three stealth attacks SA1, SA2,
and SA3 defined in §3.1.1, which were designed to mimic an ad-
versary whose aim is to cause perturbations in the physical process
while remaining unnoticed. This can be achieved by strategic at-
tackers who try to minimize the changes in the time series, opti-
mally hiding the entire change within the noise level, whilst accu-
mulating an impact on the infrastructure by drifting the process
from the optimal setting. Figures 3, 4, and 5 depict the detection of
stealthy attacks compromising the manipulated variables XMV(9)
and XMV(6), and the sensor variable XMEAS(10) respectively.
Stealthy attacks are detectable by pasad. When the process
is under a stealthy attack, the values of the sensor readings remain
roughly within the normal range. The process variables, however,
do exhibit changes in the oscillation and trend structure. These
structural changes would hinder the optimal execution of the con-
trol process, leading to performance degradation. As the figures
show, pasad is effective against different test scenarios. Notably,
in Figures 3 and 5, it is apparent that covert attacks like SA1 and
SA3 exhibit no visual change in the sensor readings but are nev-
ertheless detected by pasad with a decent time to detection. The
drop of the departure score below the threshold in Figure 3 can be
explained by the reaction of the control algorithm to the attack,
which tries to recover the optimal state of the control process.
4.2 EXP. II: Detection of Direct Damage Attacks