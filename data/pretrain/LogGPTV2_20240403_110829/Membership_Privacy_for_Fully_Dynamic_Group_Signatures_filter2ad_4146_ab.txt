Hofheinz and Kiltz show that the function introduced by Waters [42] is a programmable hash
function. For a key KPHF = (h0, . . . , h(cid:96)) ∈ G(cid:96)+1 and message X = (x1, . . . , x(cid:96)) ∈ {0, 1}(cid:96) the function
i . In particular, they prove that for any ﬁxed q = q(λ) it is a (1, q, 0, 1/8·
((cid:96) + 1) · q)-programmable hash function.
i=1 hxi
2.3 Signatures on Equivalence Classes
We now recall the notion of signatures on equivalence classes introduced by Hanser and Slamanig
[31]. The signing algorithm of the primitive SPS.Sign(skSPS, M ) deﬁnes an equivalence relation R
that induces a partition on the message space. A signer can simply sign one representative of the class
to create a signature for the whole class. The signature can then be changed without the knowledge
of the secret key to a diﬀerent representative using the SPS.ChgRep(pkSPS, M, σSPS, r) algorithm.
Existing instantiations work in the bilinear group setting and allow to sign messages from the
space (G∗
i )(cid:96), for (cid:96) > 1. The partition on the message space in those schemes is induced by the
relation Rexp: given two messages M = (M1, . . . , M(cid:96)) and M(cid:48) = (M(cid:48)
(cid:96)), we say that M and
M(cid:48) are from the same equivalence class (denoted by [M ]R) if there exists a scalar r ∈ Z∗
p, such that
∀i∈[(cid:96)](Mi)r = M(cid:48)
i . The original paper deﬁnes two properties of SPS-EQ namely unforgeability under
chosen-message attacks and class-hiding. Fuchsbauer and Gay [25] recently introduced a weaker
version of unforgeability called unforgeability under chosen-open-message attacks, which restricts
the adversaries’ signing queries to messages where it knows all exponents.
Deﬁnition 7 (Signing Oracles). A signing oracle is an OSPS(skSPS,·) (resp. Oop(skSPS,·)) ora-
cle, which accepts messages (M1, . . . , M(cid:96)) ∈ (G∗
p)(cid:96)) and returns
signature under skSPS on those messages (resp. on messages (ge1
i )(cid:96) (resp. vectors (e1, . . . , e(cid:96) ) ∈ (Z∗
i )(cid:96)).
1 ) ∈ (G∗
1, . . . , M(cid:48)
1 , . . . , ge(cid:96)
(resp.
scheme
Deﬁnition 8 (EUF-CMA
(SPS.BGGen, SPS.KGen, SPS.Sign, SPS.ChgRep, SPS.Verify, SPS.VKey) on (G∗
i )(cid:96) is called existentially
unforgeable under chosen message attacks (resp. adaptive chosen-open-message attacks), if for all
PPT algorithms A having access to an open signing oracle OSPS(skSPS,·) (resp. Oop(skSPS,·)) the
following adversary’s advantage (with templates T1, T2 deﬁned below) is negligible in the security
parameter λ:
EUF-CoMA)).
SPS-EQ
A
(cid:34)
Adv(cid:96),T1
SPS-EQ,A(λ) = Pr
BG←SPS.BGGen(λ);
SPS)←$ AOT2
(skSPS,pkSPS)←$ SPS.KGen(BG,(cid:96));
(skSPS ,·)(pkSPS)
(M∗,σ∗
:
∀M∈Q. [M∗]R(cid:54)=[M ]R ∧
SPS.Verify(pkSPS,M∗,σ∗
SPS)=1
where Q is the set of messages signed by the signing oracle OT2 and for T1 = euf-cma we have
T2 = SPS, and for T1 = euf-coma we have T2 = op.
6
(cid:35)
,
A stronger notion of class hiding, called perfect adaptation of signatures, was proposed by Fuchs-
bauer et al. in [25]. Informally, this deﬁnition states that signatures received by changing the rep-
resentative of the class and new signatures for the representative are identically distributed. In our
schemes we will only use this stronger notion.
Deﬁnition 9 (Perfect Adaption of Signatures). A SPS-EQ scheme on (G∗
(skSPS, pkSPS, M, σ, r),
signatures
for
SPS.VKey(skSPS, pkSPS) = 1, M ∈ (G∗
i )(cid:96) perfectly adapts
where
all
p and SPS.Verify(pkSPS, M, σ) = 1, the distribution of
1)(cid:96), r ∈ Z∗
if
((M )r, SPS.Sign(skSPS, M r)) and SPS.ChgRep(pkSPS, M, σ, r)
are identical.
2.4 Non-Interactive Proof Systems
In this paper we make use of non-interactive proof systems. Although we deﬁne the proof system for
arbitrarily languages, in our schemes we use the eﬃcient Groth-Sahai (GS) proof system for pairing
product equations [30].
Let R be an eﬃciently computable binary relation, where for (x, w) ∈ R we call x a statement
and w a witness. Moreover, we will denote by LR the language consisting of statements in R, i.e.
LR = {x|∃w : (x, w) ∈ R}.
Deﬁnition 10 (Non-Interactive Proof System). A non-interactive proof system Π consists of
the following three algorithms:
Π.Setup(1λ): on input security parameter 1λ, this algorithm outputs a common reference string ρ.
Π.Prove(ρ, x, w): on input common reference string ρ, statement x and witness w, this algorithm
outputs a proof π.
Π.Verify(ρ, x, π): on input common reference string ρ, statement x and proof π, this algorithm out-
puts either accept(1) or reject(0).
Some proof systems do not need a common reference string. In such a case, we omit the ﬁrst argument
to Π.Prove and Π.Verify.
Deﬁnition 11 (Soundness). A proof system Π is called sound, if for all PPT algorithms A the
following probability, denoted by Advsound
Π,A (λ), is negligible in the security parameter 1λ:
Pr[ρ ←$ Π.Setup(1λ); (x, π) ←$ A(ρ) : Π.Verify(ρ, x, π) = accept ∧ x (cid:54)∈ LR].
where the probability is taken over the randomness used by Π.Setup and the adversary A. We say
that the proof system is perfectly sound if Advsound
Π,A (λ) = 0.
Deﬁnition 12 (Perfect Knowledge Extraction). A proof system Π is called an argument of
knowledge for R, if there exists a knowledge extractor E = (Π.ExtGen, Π.Extract) such that for all
algorithms A
Adve1
Π,A(λ) := |Pr[ρ ←$ Π.Setup(1λ) : A(ρ) = 1] − Pr[(ρ, τ ) ←$ Π.ExtGen(1λ) : A(ρ) = 1]|
is negligible in λ and
Adve2
Π,A(λ) := Pr[(ρ, τ ) ←$ Π.ExtGen(1λ); (x, π) ←$ A(ρ, τ ); w ←$ Π.Extract(ρ, τ, x, π) :
Π.Verify(ρ, x, π) = accept ∧ (x, w) (cid:54)∈ R]
is negligible in 1λ. If Adve2
Π,A(λ) = 0, we say that Π is a perfect proof of knowledge.
7
Deﬁnition 13 (Witness Indistinguishability (WI)). A proof system Π is witness indistin-
guishable, if for all PPT algorithms A we have that the advantage Advwi
Π,A(λ) computed as:
| Pr[ρ ←$ Π.Setup(1λ); (x, w0, w1) ←$ A(1λ, ρ); π ←$ Π.Prove(ρ, x, w0) : A(π) = 1]−
Pr[ρ ←$ Π.Setup(1λ); (x, w0, w1) ←$ A(1λ, ρ); π ←$ Π.Prove(ρ, x, w1) : A(π) = 1]|,
where (x, w0), (x, w1) ∈ R, is at most negligible in λ. We say that the proof system if perfectly witness
indistinguishable if Advwi
Π,A(λ) = 0.
Deﬁnition 14 (Zero-Knowledge). A proof system Π is called zero-knowledge, if there exists a
PPT simulator S = (SimGen, Sim) such that for all PPT algorithms A the following probability,
denoted by Advzk
Π,A(λ), is negligible in the security parameter 1λ:
|Pr[ρ ←$ Π.Setup(1λ) : AΠ.Prove(ρ,·,·)(ρ) = 1]−
Pr[(ρ, τ ) ←$ SimGen(1λ) : AS(ρ,τ,·,·)(ρ) = 1]|,
where τ is a trapdoor information, oracle call S(ρ, τ, x, w) returns the output of Sim(ρ, τ, x) for
(x, w) ∈ R and both oracles output ⊥ if (x, w) (cid:54)∈ R.
We brieﬂy recall the framework of pairing product equations that is used for the languages of the
Groth-Sahai proof system [30]. For constants Ai ∈ G1, Bi ∈ G2, tT ∈ GT , γij ∈ Zp which are either
publicly known or part of the statement, and witnesses Xi ∈ G1, Yi ∈ G2 given as commitments, we
give proofs that:
n(cid:89)
e(Ai, Yi) · m(cid:89)
e(Xi, Bi) · m(cid:89)
n(cid:89)
e(Xi, Yi)γij = tT .
i=1
i=1
j=1
i=1
The system (ΠPPE.Setup, ΠPPE.Prove, ΠPPE.Verify, ΠPPE.ExtGen, ΠPPE.Extract) has several instan-
tiations based on diﬀerent assumptions. In this paper we only consider the instantiation based on
the decisional Diﬃe-Hellman assumption given by Ghadaﬁ, Smart and Warinschi [28].
2.5 Digital Signatures and Public Key Encryption
In our group signature construction we also make use of standard digital signatures and public key
encryption schemes. We use (DS.KeyGen, DS.Sign, DS.Verify) to denote the algorithms that make
up the scheme DS and Adveuf−cma
(λ) to denote the adversaries advantage against the existential
unforgeability under chosen message attacks of the signature scheme.
A,DS
A public key encryption scheme PKE consists of three algorithms (PKE.KeyGen, PKE.Enc, PKE.Dec).
We use the standard notion of indistinguishability of ciphertexts under chosen message attacks
(IND − CPA) as well as the notion of key privacy under chosen message attacks (IK − CPA), which
informally requires that it is infeasible for an attacker to determine which key was used to create a
given ciphertext even if with access to both encryption keys. A full formal deﬁnition of this property
can be found in [7]. An example of a scheme which achieves key privacy is the El Gamal encryption
scheme [27].
3 Fully Dynamic Group Signatures
We recall the framework of deﬁnitions for fully dynamic group signatures established in [15].
8
Deﬁnition 15. A fully dynamic group signature scheme GS is a deﬁned by the following set of
eﬃcient algorithms
GS.Setup(1λ): On input a security parameter, the setup algorithm outputs public parameters param
(cid:104)GS.KGenM(param), GS.KGenT (param)(cid:105): Given the public parameters param the group manager M
and initializes the user registration table reg.
and tracing manager T jointly execute a key generation protocol.
– The private output of the group manager is a secret manager key msk, its public output a
manager public key mpk and the initial group information info.
– The private output of the tracing manager is a secret tracing key tsk and a tracing manager
public key tpk.
The public outputs together are referred to as the group public key gpk := (param, mpk, tpk).
user secret and user public key (usk[uid], upk[uid]), bound to a fresh user id uid.
GS.UKGen(1λ): On input the public parameters, the user key generation algorithm outputs a pair of
(cid:104)GS.Join(infoτcurrent , gpk, uid, usk[uid]), GS.Issue(infoτcurrent , msk, uid, upk[uid])(cid:105): A user who has ex-
ecuted GS.UKGen, obtaining a user id uid and key pair (usk[uid], upk[uid]) may, given the group
public key and information regarding the current epoch infoτcurrent engage the group manager in
a join-issue procedure to become a member of the group. If successful, the output of the GS.Issue
algorithm is user registration information which is stored in reg[uid] the user secret key gsk[uid]
is updated with the output of GS.Join.
GS.UpdateGroup(gpk, msk, infoτcurrent ,S, reg): The group manager may advance the current epoch
τcurrent to the next epoch τnew, at the same time revoking membership of a subset S of the set of
active group members. If any uid ∈ S is not assigned to an active member of the group, i.e. was
not assigned in a run of the join-issue procedure, the algorithm aborts. The outputs is the new
group information infoτnew and a possibly updated registration table reg. If the group information
does not change, the algorithm outputs ⊥.
GS.Sig(gpk, gsk[uid], infoτ , m): Given their group signing key, current group information and the
group public key, a user may sign a message, producing a signature Σ. If the user-ID uid is
not assigned to an active group member in the current epoch τcurrent, the algorithm outputs ⊥
instead.
GS.Vf(gpk, infoτ , m, Σ): If the given signature Σ is valid for message m in epoch τ , veriﬁcation
outputs accept, otherwise reject.
GS.Trace(gpk, tsk, infoτ , reg, m, Σ): Given a signature, message, group information for epoch τ and
a registration table, the tracing manager may output a pair (uid, π) where uid > 0 identiﬁes the
user-ID of the group member who produced the signature and π is a proof of this fact. If tracing is
not successful the algorithm will output a pair (0, π) indicating the failure via the special user-ID
0, which is not assigned to any regular user.
GS.Judge(gpk, uid, infoτ , πTrace, upk[uid], m, Σ): Given a signature for epoch τ , the corresponding
group information and a tracing output (uid, π), anyone in possession of the group public key
can deterministically judge the validity of π w.r.t. to the statement, that Σ was created using
gsk[uid], in which case the algorithm outputs accept, otherwise reject.
3.1 Security of Fully Dynamic Group Signatures
In the framework of [15], a fully dynamic group signature scheme is secure if it achieves correctness,
anonymity, non-frameability, traceability, and tracing soundness.
Informally, these properties ensure the following guarantees:
Anonymity given a signature, it is infeasible, without a secret trapdoor information, to distinguish
which signer created the signatures.
9
Traceability it is infeasible to produce a signature for which the opening procedure fails. In other
words, even a coalition of group members and the opening authority should not be able to
produce a signature which would open to an identity not generated in the setup phase or an
identity that was not active in the epoch for which the signature was created.
Non-Frameability — any coalition of group members, the issuing authority and the opening
authority cannot produce a signature which opens to an identity of an honest user from outside
the coalition.
Tracing Soundness — this requirement ensures that even if all parties in the group collude, they
cannot produce a valid signature that traces to two diﬀerent members.
They are formally deﬁned as a set of adversarial experiments relative to a number of oracles, which
give the adversary an interface to the scheme:
AddU: To add an honest user to the group.
CrptU: To impersonate (corrupt) a user before joining the group.
SndToM: To communicate in the user role with an honest issuing authority.
SndToU: To communicate as an issuing authority with an honest user.
ReadReg: To read the registration table.
ModifyReg: To modify the registration table.
RevealU: To reveal an honest user’s secret keys.
Sign: To obtain a group signature on behalf of an honest user.
Trace: To obtain a tracing proof on a signature.
UpdateGroup: To remove users from the group via the group update procedure.
Chall: To receive a challenge signature in the anonymity game.
Security Experiments We have informally described the security notions of
recall their formal deﬁnitions.
[15] and will now
GS(1λ)
CorrectnessA
param ←$ GS.Setup(1λ); H := ∅
(msk, mpk, info, tsk, tpk) ←$ (cid:104)GS.KGenM(param), GS.KGenT (param)(cid:105)
gpk := (param, mpk, tpk)
(uid, m, τ ) ←$ AAddU,ReadReg,UpdateGroup(gpk, info)
if uid (cid:54)∈ H or gsk[uid] = ⊥ or infoτ = ⊥
or GS.IsActive(infoτ , reg, uid) = 0
then return 0
Σ ←$ GS.Sig(gpk, gsk[uid], infoτ , m)
if GS.Vf(gpk, infoτ , m, Σ) = reject
b,GS(1λ)
AnonymityA
param ←$ GS.Setup(1λ); H, C, B, Q, Q∗
:= ∅
(state, msk, mpk, info) ←$ A(cid:104)·,GS.KGenT (param)(cid:105)
if ⊥ ← GS.KGenT (param) or A’s output invalid
(init : param)
then return 0
(tsk, tpk) ← GS.KGenT (param); gpk := (param, mpk, tpk)
d ←$ AAddU,CrptU,SndToU,RevealU,Trace,ModifyReg,Challb (play : state, gpk)
return d
then return 1
∗
, π) ←$ GS.Trace(gpk, tsk, infoτ , reg, m, Σ)
(uid
if uid (cid:54)= uid
if GS.Judge(gpk, uid, infoτ , π, upk[uid], m, Σ) = 0
then return 1
∗
then return 0 else return 1
10
GS(1λ)
Non − FrameA
param ←$ GS.Setup(1λ); H, C, B, Q := ∅
(state, info, msk, mpk, tsk, tpk) ←$ A(init : param)
if msk = ⊥ or mpk = ⊥
then return 0
gpk := (param, mpk, tpk)