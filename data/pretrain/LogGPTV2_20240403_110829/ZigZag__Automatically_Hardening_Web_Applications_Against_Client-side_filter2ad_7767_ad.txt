or as an event handler
2. typeof(v0) === ’object’ && v0.origin ===
’https://dpsg.janraincapture.com’
3. v0.data === ’s1’ || v0.data === ’s2’2
4. v0.data is printable
For the function that is called by the event handler,
ZigZag generated the following invariants.
1. The function is only called by the receiver function
2. v0 === ’s1’ || v0 === ’s2’3
The attack is thwarted by restricting the receiver ori-
gin, only allowing two types of messages to be received,
and furthermore restricting control-flow to the dangerous
sink.
playforex.ru. This application contains an incor-
rect origin check that only tests whether the mes-
sage origin contains the expected origin (using in-
dexOf), not whether the origin equals or is a sub-
domain of the allowed origin.
Therefore, any ori-
gin containing the string “playforex.ru” such as “play-
forex.ru.attacker.com” would be able to iframe the site
and evaluate arbitrary code in that context. We reported
the bug and it was promptly fixed. However, this is not
an isolated case. Related work [9] has shown that such
a flawed origin check was used by 71 hosts in the top
10,000 websites.
ZigZag generated the following relevant invariants.
1. The function is only invoked from the global scope
or as an event handler
2. typeof(v0) === ’object’
&& v0.origin === ’http://playforex.ru’
3. v0.data === ”$(’#right_buttons’).hide();”
|| v0.data === ’calculator()’
ZigZag detected that the onMessage event handler only
receives two types of messages, which manipulate the UI
to hide buttons or show a calculator. By only accepting
these two types of messages, arbitrary execution can be
prevented.
Yves Rocher. This application does not perform an
origin check on received messages, and all received code
2s1 and s2 were long strings, which we omitted for brevity.
3s1 and s2 were long strings, which we omitted for brevity.
is executed in an eval sink. The bug has been reported
to the website owners. 43 out of the top 10,000 web-
sites had previously been shown to be exploitable with
the same technique. ZigZag generated the following rel-
evant invariant.
1. v0.origin === ’http://static.ak.facebook.
com’ || v0.origin === ’https://s-static.
ak.facebook.com’
From our manual analysis, this program snippet is only
intended to communicate with Facebook, and therefore
the learned invariant above is correct in the sense that it
prevents exploitation while preserving intended function-
ality.
adition.com. This application is part of a European
ad network. It used a new Function statement to parse
untrusted JSON data, which is highly discouraged as it
is equivalent to an eval. In addition, no origin check is
performed. This vulnerability allows attackers that are
able to send messages in the context of the site to replace
ads without having full JavaScript execution.
ZigZag learned that only valid JSON data is received
by the function, which would prevent the attack based on
the content of received messages. This is different than
the Yves Rocher example, as data could be transferred
from different origins while still securing the site. The
bug was reported and fixed.
Summary.
These are four attacks against CSV
vulnerabilities representative of the wider population.
postMessage receivers are used on 2,245 hosts out of
the top 10,000 websites. Such code is often included
through third-party libraries that can be changed without
the knowledge of website owners.
6.3 Performance Overhead
Instrumentation via a proxy incurs performance over-
head in terms of latency in displaying the website in the
browser. We quantify this overhead in a series of exper-
iments to evaluate the time required for instrumentation,
the worst-case runtime overhead due to instrumentation,
and the increase in page load latency for real web appli-
cations incurred by the entire system.
Instrumentation overhead. We tested the instrumen-
tation time of standalone files to measure ZigZag’s im-
pact on load times. As samples, we selected a range
of popular JavaScript programs and libraries: Mozilla
pdf.js, an in-browser pdf renderer; jQuery, a popular
client-side scripting library; and, d3.js, a library for data
visualization. Where available, we used compressed,
production versions of the libraries. As Mozilla pdf.js
is not minified by default, we applied the yui com-
pressor for simple minification before instrumenting.
746  24th USENIX Security Symposium 
USENIX Association
Unmodified
Uncached Instrumented
Cached Instrumented
s
d
n
o
c
e
S
 10
 1
 0.1
pdf (1 M B)
jQuery (81 K B)
d3 (142 K B)
tiny (0.02 K B)
Figure 10: Instrumentation overhead for individual files.
While the initial instrumentation can take a significant
amount of time for large files, subsequent instrumenta-
tions have close to no overhead.
The worker file is at 1.5 MB uncompressed and repre-
sents an atypically large file. Additionally, we instru-
mented a simple function that returns the value of docu-
ment.cookie. We performed 10 runs for cold and warm
testing each. For cold runs, the database was reset after
every run.
Figure 10 shows that while the initial instrumentation
can be time-consuming for larger files, subsequent calls
will incur low overhead.
Microbenchmark. To measure small-scale runtime
enforcement overhead, we created a microbenchmark
consisting of a repeated postMessage invocation where
one iframe (A) sends a message to another iframe (B),
and B responds to A. Specifically, A sends a message
object containing a property process set to the constant
20. B calculates the Fibonacci number for process, and
responds with another object that contains the result.
We trained ZigZag on this simple program and then
enabled enforcement mode. Next, we ran the program in
both uninstrumented and instrumented forms. The sub-
ject of measurement was the elapsed time between send-
ing a message from A to B and reception of the response
from B to A. We used the high resolution timer API win-
dow.performance.now to measure the round trip time,
and ran the test 100 times each. The results of this bench-
mark are shown in Table 2.
ZigZag learned and enforced the following invariants
for the receiving side.
1. The function is only invoked from the global scope
or as an event handler
2. typeof(v0) === ’object’ &&
v0.origin === ’http://example.com’
3. v0.data.process === 20
4. typeof(v0) === typeof(v0.data)
Average Runtime
Standard Deviation
Confidence (0.05)
Uninstrumented
3.11 ms
1.80
0.11
Instrumented
3.77 ms
0.54
0.35
Table 2: Microbenchmark overhead.
5. typeof(v0.timeStamp) === typeof(v0.data.
process) && v0.timeStamp > v0.data.process
For the message receiver that calculates the response,
ZigZag learned and enforced the following invariants.
1. The function is only invoked from the global scope
or as an event handler
2. typeof(v0) === ’object’
&& v0.origin === ’http://example.com’
3. typeof(v0.data.process) === ’number’
&& v0.data.process === 20
4. typeof(v0.timestamp) === typeof(v0.data.
process)
Finally, for the receiver of the response, ZigZag
learned and enforced the following invariants.
1. The function is only invoked from the global scope
or as an event handler
2. typeof(v0) === ’object’ &&
v0.origin === ’http://example.com’
3. v0.data.response === 6765
4. typeof(v0) === typeof(v0.data)
5. typeof(v0.timeStamp) === typeof(v0.data.
response) && v0.timeStamp > v0.data.
response
The above invariants represent a tight bound on the al-
lowable data types and values sent across between each
origin.
End-to-end benchmark. To quantify ZigZag’s im-
pact on the end-to-end user experience, we measured
page load times on the Alexa Top 20. First, we manu-
ally inspected the usability of the sites and established a
training set for enforcement mode. To do so, we browsed
the target websites for half an hour each.
We used Chrome to load the site and measure the
elapsed time from the initial request to the window.load
event, when the DOM completed loading (including all
sub-frames).4 The browser was unmodified, with only
one extension to display page load time.
Uninstrumented sites are loaded through the same
HTTP(S) proxy ZigZag resides on, but the program text
4We note, however, that websites can become usable before that
event fires.
USENIX Association  
24th USENIX Security Symposium  747
Uninstrumented
Instrumented
s
d
n
o
c
e
S
 10
 1
 0.1
Instrumentation Overhead
 1000
t
n
e
c
r
e
P
 100
 10
yahoo.co.jp
blogspot.com
google.co.in
sina.com.cn
weibo.com
google.com
live.com
linkedin.com
amazon.com
twitter.com
taobao.com
baidu.com
yahoo.com
youtube.com
facebook.com
wikipedia.org
vk.com
tmall.com
qq.com
 1
wikipedia.org
blogspot.com
google.co.in
weibo.com
linkedin.com
amazon.com
twitter.com
yahoo.com
youtube.com
baidu.com
tmall.com
yahoo.co.jp
sina.com.cn
google.com
taobao.com
facebook.com
live.com
vk.com
qq.com
(a) Absolute load times for uninstrumented and instrumented
programs.
(b) Overhead due to instrumentation.
Figure 11: End-to-end performance benchmark on the Alexa 20 most popular websites (excluding hao123.com as it
is incompatible with our prototype). A site is considered to be done loading content when the window.load event is
fired, indicating that the entire contents of the DOM has finished loading.
is not modified. Instrumented programs are loaded from
a ZigZag cache that has been previously filled with in-
strumented code and merge descriptions. However, we
do not cache original web content, which is freshly
loaded every time.
The performance overhead in absolute and relative
terms is depicted in Figure 11. We excluded hao123.com
from the measurement as it was incompatible with our
prototype.5 On average, load times took 4.8 seconds, rep-
resenting an overhead of 180.16%, with median values
of 2.01 seconds and an overhead of 112.10%. We found
server-side templated JavaScript to be popular with the
top-ranked websites. In particular, amazon.com served
15 such templates, and only 6 out of 19 serve no such
templates.
sina.com.cn is an obvious outlier, with an abso-
lute average overhead of 45 seconds. With 115 inlined
JavaScript snippets and 112 referenced JavaScript files,
this is also the strongest user of inline script. Further-
more, we noticed that the site fires the DOMContent-
Loaded event in less than 6 seconds. Hence, the web-
site appears to become usable quickly even though not
all sub-resources have finished loading.
In percentages, the highest overhead of 593.36% is in-
troduced for blogspot.com, which forwards to Google.
This site has the shortest uninstrumented loading time
(0.226 seconds) in our data set, hence an absolute over-
head will have the strongest implications on relative over-
5We discovered, as others have before, that hao123.com does not
interact well with Squid. We attempted to work around the problem by
adjusting Squid’s configuration as suggested by Internet forum posts,
but this did not succeed. Due to time constraints, we did not expend
further effort in dealing with this particular site.
head. That is, in relative numbers, it seems higher than
the actual impact on end-users.
We note that we measure the load event, which means
that all elements (including ads) have been loaded. Web-
sites typically become usable before that event is fired.
Our research prototype could be further optimized to
reduce the impact of our technique for performance-
critical web applications, for example by porting our
ICAP Python code, including parsing libraries, to an
ECAP C module. However, generally speaking we be-
lieve that trading off some performance for improved se-
curity would be acceptable for high assurance web appli-
cations and security-conscious users.
6.4 Program Generalization
As discussed in Section 3, ZigZag supports structural
similarity matching and invariant patching for templated
JavaScript to avoid singleton training sets and exces-
sive instrumentation when templated code is used. We
measured the prevalence of templated JavaScript in the
Alexa Top 50, and found 185 instances of such code.
In addition, the median value per site was three. With-
out generalization and invariant patching, ZigZag would
not have generated useful invariants and, furthermore,
would perform significantly worse due to unnecessary re-
instrumentation on template instantiations.
6.5 Compatibility
To check that ZigZag is compatible with real web ap-
plications, we ran ZigZag on several complex, benign
JavaScript applications. Since ZigZag relies on user in-
748  24th USENIX Security Symposium 
USENIX Association
DOM-based XSS. Cross-site scripting (XSS) is of-
ten classified as either stored, reflected, or DOM-based
XSS [20]. In this last type of XSS, attacks can be per-
formed entirely on the client-side such that no malicious
data is ever sent to the server. Programs become vul-
nerable to such attacks through unsafe handling of DOM
properties that are not controlled by the server; examples
include URL fragments or the referrer.
As a defense, browser manufacturers employ client-
side filtering, where the state-of-the-art is represented
by the Chrome XSS Auditor. However, the auditor has
shortcomings in regards to DOM-based XSS. Stock et
al. [21] have demonstrated filter evasion with a 73% suc-
cess rate and proposed a filter with runtime taint tracking.
DexterJS [22] rewrites insecure string interpolation
in JavaScript programs into safe equivalents to prevent