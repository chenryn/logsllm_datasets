### Title: The Dark Age of Memory Corruption Mitigations in the Spectre Era

Over the past few decades, the prevalence of memory corruption vulnerabilities has led to the development of various defenses, such as stack canaries, control flow integrity (CFI), and memory-safe programming languages. These mitigations are designed to prevent entire classes of vulnerabilities and enhance the overall security posture of software.

In this talk, we will explore how these memory corruption defenses can be bypassed using speculative execution attacks, a class of vulnerabilities that includes Spectre. We will examine specific cases, including stack protectors, CFI, and bounds checks in Go, to demonstrate the conditions under which they can be circumvented through speculative control flow hijacking. This attack relies on speculative or architectural overwrites of control flow data, allowing an attacker to redirect the speculative execution path of the victim to a gadget that accesses sensitive information and acts as a side-channel for exfiltrating that data.

Additionally, we will present, for the first time, a speculative return-oriented programming (ROP) attack, where multiple gadgets are stitched together to achieve the same goal. This novel approach highlights the ongoing challenges in securing software against sophisticated speculative execution attacks.