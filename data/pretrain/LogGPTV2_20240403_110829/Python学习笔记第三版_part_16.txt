>>> printx(1, 2, 3, sep = "|")
{'objects': (1, 2, 3), 'end': '\n', 'sep': '|'}
参数列表还不宜过长，可尝试将部分参数重构为复合对象。
复合参数变化与函数分离。添加字段，或修改缺省值，不影响已有⽤户。
!147
学习笔记 . 第三版
3. 返回值
函数没有返回值定义，具体返回什么，返回⼏个，全凭 “任性”。
def test(n):
if n > 0:
return 1, 2, 3
elif n >> test(1)
(1, 2, 3)
>>> test(-1)
(-1, -2)
>>> test(0)
0
这种返回数量忽多忽少的写法，在有明确返回值定义的语⾔⾥是决不允许的。那么，使⽤
时只能看帮助，或翻阅源代码？就没什么规矩么？
从实现⾓度看，只要返回数量多于⼀，编译器就将其打包成元组对象。如此⼀来，所谓忽
多忽少，⽆⾮是单个元组⾥元素数量多寡，完全可以理解。
def test(a, b):
return "hello", a + b
>>> dis.dis(test)
2 0 LOAD_CONST 1 ('hello')
2 LOAD_FAST 0 (a)
4 LOAD_FAST 1 (b)
6 BINARY_ADD
8 BUILD_TUPLE 2 # 打包成元组，返回。
10 RETURN_VALUE
>>> x = test(1, 2)
!148
学习笔记 . 第三版
>>> type(x)
>>> x
('hello', 3)
即便什么都不做，也会返回 None。如此，可以说函数总是返回⼀个结果。
只有这样，函数才能保证作为表达式出现。
>>> def test(): pass
>>> dis.dis(test)
1 0 LOAD_CONST 0 (None)
2 RETURN_VALUE
>>> def test(): return
>>> dis.dis(test)
1 0 LOAD_CONST 0 (None)
2 RETURN_VALUE
⾄于⽤多变量接收返回值，实际是序列解包在起作⽤。约定俗成，习惯性表述⽽已。
>>> dis.dis(compile("a, b = test()", "", "exec"))
1 0 LOAD_NAME 0 (test)
2 CALL_FUNCTION 0
4 UNPACK_SEQUENCE 2 # 解包
6 STORE_NAME 1 (a)
8 STORE_NAME 2 (b)
10 LOAD_CONST 0 (None)
12 RETURN_VALUE
!149
学习笔记 . 第三版
4. 作用域
与赋值针对当前名字空间，或以 global、nonlocal 关键字作外部声明不同。在函数内访问
变量，会以特定顺序依次查找不同层次作⽤域。
>>> import builtins
>>> builtins.B = "B"
>>> G = "G"
>>> def enclosing():
E = "E"
def test():
L = "L"
print(L, E, G, B)
return test
>>> enclosing()()
L E G B
此规则，简称作 LEGB。
load
locals enclosing globals builtins
store nonlocal: store global: store
内存结构
函数每次调⽤，都会新建栈帧（stack frame），⽤于分配局部变量，以及执⾏过程存储。
等执⾏结束，栈帧内存被回收，同时引发相关对象释放操作。
def test():
print(id(locals()))
!150
学习笔记 . 第三版
>>> test()
4460820664
>>> test()
4458753840
是否栈帧内存就是 locals 名字空间？
以字典实现的名字空间，虽然灵活，但存在访问效率低下等问题。对于使⽤频率相对较低
的模块名字空间尚可，可对于有性能要求的函数调⽤，显然就是瓶颈所在。
为此，解释器划出专门的内存空间，改以效率最快的数组替代哈希字典。在函数指令执⾏
前，先将包含参数在内的所有局部变量，以及要使⽤的外部变量复制（指针）到该数组。
基于作⽤域不同，此内存区域可简单分作两部分：FAST 和 DEREF。
外层嵌套变量， 闭包
Stack Frame FAST DEREF ...
参数，局部变量
如此，操作指令只需⽤索引即可⽴即读取或存储⽬标对象，远⽐哈希查找过程⾼效许多。
从前⽂反汇编开始，我们就看到⼤量类似 LOAD_FAST 的指令，其参数就是索引号。
def enclosing():
E = "E"
def test(a, b):
c = a + b
print(E, c)
return test
>>> t = enclosing() # 返回 test 函数。
>>> t.__code__.co_varnames # 局部变量量列列表（含参数）。与索引号对应。
('a', 'b', 'c')
>>> t.__code__.co_freevars # 所引⽤用外部变量量列列表。与索引号对应。
!151
学习笔记 . 第三版
('E',)
>>> dis.dis(t)
4 0 LOAD_FAST 0 (a) # 从 FAST 区域，以索引号访问并载⼊入。
2 LOAD_FAST 1 (b)
4 BINARY_ADD
6 STORE_FAST 2 (c) # 将结果存⼊入 FAST 区域。
5 8 LOAD_GLOBAL 0 (print)
10 LOAD_DEREF 0 (E) # 从 DEREF 区域，访问并载⼊入外部变量量。
12 LOAD_FAST 2 (c)
14 CALL_FUNCTION 2
16 POP_TOP
18 LOAD_CONST 0 (None)
20 RETURN_VALUE
FAST 和 DEREF 数组⼤⼩是统计参数和变量得来，对应索引值也是编译期所确定。所以，不能
在运⾏期扩张。前⽂曾提及，global 关键字可向全局名字空间新建名字，但 nonlocal 不允许。其
原因就是 nonlocal 代表外层函数，⽆法动态向其 FAST 数组插⼊或追加新元素。
另外，LEGB 中的 E 已被保存到 DEREF 数组，相应查找过程也被优化，⽆需费时费⼒去迭代调
⽤堆栈（call stack），⼀级级扒拉外层函数。LEGB 是针对源码的说法，⽽⾮内部实现。
名字空间
现在的问题是，为何 locals 函数返回的是字典类型？实际上，除⾮调⽤该函数，否则函数
执⾏期间，根本不会创建所谓名字空间字典。也就是说，其返回的字典是按需延迟创建，
并从 FAST 区域复制相关信息⽽得来。
在了解此背景后，类似下⾯的问题就很好解释。
def test():
locals()["x"] = 100 # 运⾏行行期通过名字空间新建变量量。
print(x) # 编译此指令时，本地并没有 x 这个名字。
>>> test() # 失败。
NameError: name 'x' is not defined
!152
学习笔记 . 第三版
>>> dis.dis(test)
2 0 LOAD_CONST 1 (100)
2 LOAD_GLOBAL 0 (locals)
4 CALL_FUNCTION 0
6 LOAD_CONST 2 ('x')
8 STORE_SUBSCR
3 10 LOAD_GLOBAL 1 (print)
12 LOAD_GLOBAL 2 (x) # 编译时确定，从全局⽽而⾮非 FAST 载⼊入。
14 CALL_FUNCTION 1
16 POP_TOP
18 LOAD_CONST 0 (None)
20 RETURN_VALUE
很显然，名字使⽤静态作⽤域。运⾏期⾏为，对此并⽆效果。另⼀⽅⾯，所谓 locals 名字
空间不过是 FAST 复制品，对其变更不会同步到 FAST 区域。
def test():
x = 100
locals()["x"] = 999 # 新建字典，复制。对复制品修改不不会影响 FAST。
print("fast.x =", x)
print("locals.x =", locals()["x"]) # 从 FAST 刷新，修改丢失。
>>> test()
fast.x = 100
locals.x = 100
⾄于 globals 能新建并影响，是因为模块直接以字典实现名字空间，没有类似 FAST 机制。
在 Python 2 ⾥，可通过插⼊ exec 语句影响名字作⽤域静态绑定。但随 Python 3 将其变成函数，
此⽅法也告失效。
栈帧会保存 locals 函数所返回字典，避免每次新建。如此，可⽤它存储额外数据，⽐如向
后续调⽤提供上下⽂状态等。但请注意，只有再次调⽤该函数，才会刷新字典数据。
def test():
x = 1
d = locals()
print(d is locals()) # ① 每次返回同⼀一字典对象。
!153
学习笔记 . 第三版
d["context"] = "hello" # ② 存储额外数据。
print(d)
x = 999 # ③ 修改 FAST 时，不不会主动刷新 locals 字典。
print(d)
print(locals()) # ④ 刷新操作由 locals 调⽤用触发。
print(d)
>>> test()
① True
② {'x': 1, 'context': 'hello'}
③ {'x': 1, 'context': 'hello'}
④ {'x': 999, 'context': 'hello'}
④ {'x': 999, 'context': 'hello'}
静态作用域
在对待作⽤域这个问题上，也许编译器⽐你想象的还要 “笨” ⼀些。
def test():
if False: x = 100
print(x)
>>> test()
UnboundLocalError: local variable 'x' referenced before assignment
>>> dis.dis(test)
4 0 LOAD_GLOBAL 0 (print)
2 LOAD_FAST 0 (x) # x 作⽤用域：FAST
4 CALL_FUNCTION 1
6 POP_TOP
8 LOAD_CONST 0 (None)
10 RETURN_VALUE
虽然编译器将死代码剔除了，但其对 x 作⽤域的影响依然存在。
似乎也不能说编译器笨。既然程序猿在代码⾥写了赋值语句，那么在最初设想⾥，x 显然是本地
变量。⾄于最后死代码执⾏与否，就是另⼀回事了。
!154
学习笔记 . 第三版
def test():
if False: global x
x = 100
>>> dis.dis(test)
4 0 LOAD_CONST 1 (100)
2 STORE_GLOBAL 0 (x) # x 作⽤用域：GLOBAL
4 LOAD_CONST 0 (None)
6 RETURN_VALUE
建议
函数最好设计为纯函数，仅依赖参数、内部变量和⾃⾝属性。依赖外部状态，会给重构和
测试带来诸多⿇烦。或许可将外部依赖变成 keyword-only 参数，如此测试就可⾃定义依赖
环境，以确保最终结果⼀致。
如必须依赖外部变量，那么尽可能不做修改，以返回值交由调⽤⽅决策。
纯函数（pure function）输出与输⼊以外的状态⽆关，没有任何隐式依赖。相同输⼊总是输出相
同结果，且不对外部环境产⽣影响。
注意区分函数和⽅法的设计差异。函数以逻辑为核⼼，输⼊条件，“计算” 结果。⽽⽅法则围绕实
例状态，展⽰或修改。
!155
学习笔记 . 第三版
5. 闭包
明⾯上，闭包（closure）是指函数离开⽣成环境后，依然可记住，并持续引⽤词法作⽤域
⾥的外部变量。
def make():
x = [1, 2]
return lambda: print(x)
>>> a = make()
>>> a()
[1, 2]
如果不考虑闭包因素，这段代码就有很⼤问题。因为 x ⽣命周期是 make 调⽤栈帧。当 make 结
束后，x 理应被销毁。但结果是，所返回匿名函数依然可以访问，这就是所谓闭包效应。
关于闭包，有很多学术解释。简单点说，就是函数和所引⽤环境变量的组合体。从这点上
说，闭包不等于函数，只是形式上返回⼀个函数⽽已。因引⽤外部状态，闭包函数⾃然也
不是纯函数。加上延长环境变量⽣命周期，理应慎重使⽤。
创建
既然闭包由两部分组成，那么其创建过程可分为：
1. 打包环境变量。
2. 将环境变量作为参数，新建函数对象。
同样因⽣命周期改变的缘故，环境变量作⽤域从 FAST 转移到 DEREF。
待返回闭包函数，可以是 lambda，或普通函数。
def make():
x = 100
return lambda: print(x)
!156
学习笔记 . 第三版
>>> dis.dis(make)
2 0 LOAD_CONST 1 (100)
2 STORE_DEREF 0 (x) # 作⽤用域改变。
3 4 LOAD_CLOSURE 0 (x) # 打包。
6 BUILD_TUPLE 1
8 LOAD_CONST 2 (>)
10 LOAD_CONST 3 ('make..')
12 MAKE_FUNCTION 8 # 创建函数对象。
14 RETURN_VALUE
同样，闭包函数也得从 DEREF 读取环境变量。