### Theorem 6.4
Suppose the underlying RSA signature scheme is deterministic (i.e., \( K_{\text{rand}} = 0 \)). If a type \(\text{ADV}(\text{dvc, no})\) forger \((q, \epsilon)\)-breaks the S-RSA[\(\epsilon, D\)] scheme, then either there exists an attacker \(A^*\) that \((2q_{\text{svr}}, \epsilon')\)-breaks \(\mathcal{E}\) with \(\epsilon' \approx \epsilon\), or there exists a forger \(F^*\) that \((2q_{\text{svr}}, \epsilon'' )\)-breaks the underlying RSA signature scheme with \(\epsilon'' \approx \epsilon\).

### Proof:
Given \( F \in \text{ADV}(\text{dvc, no}) \) that \((q, \epsilon)\)-breaks the S-RSA[\(\epsilon, D\)] scheme, we show that either we can construct a forger \(F^*\) for the underlying RSA signature scheme, or an attacker \(A^*\) against \(\mathcal{E}\). We first construct a forger \(F^*\) that runs \(F\) against a simulation of S-RSA, such that if \(F\) forges in the simulation with probability \(\delta\), \(F^*\) \((2q_{\text{svr}}, \epsilon'')\)-breaks the underlying RSA signature scheme with \(\epsilon'' \approx \delta\). Assuming \(F\) does not forge a signature in that simulation with probability \(\delta\), then we show that we can construct an attacker \(A^*\) that \((2q_{\text{svr}}, \epsilon')\)-breaks \(\mathcal{E}\) with \(\epsilon' \approx \delta\).

#### Part I: Construction of Forger \(F^*\)
1. **Simulation Setup:**
   - \(F^*\) is given the public key \((N, e)\) for the RSA scheme and simulates the S-RSA system for \(F\).
   - \(F^*\) gives \((N, e)\) to \(F\) as the device's public signature key.
   - \(F^*\) generates the server's key pair \((\text{pk}_{\text{svr}}, \text{sk}_{\text{svr}})\) and gives \(\text{pk}_{\text{svr}}\) to \(F\).
   - \(F^*\) generates the data \(a, b, U,\) and \(d_1\) in the normal way, using random \(t, v \in \{0,1\}^n\), but computes \(T = E_{\text{pk}_{\text{svr}}}(\text{K}_{\text{cf}} || X)\).
   - \(F^*\) gives \(a, U,\) and \(T\) to \(F\).

2. **Query Handling:**
   - **getVals Query:** \(F^*\) responds to a getVals query to the disable oracle by returning \(t, T\).
   - **svr disable(t', T') Query:** \(F^*\) responds as a normal server would.
   - **svr serve(y, \(\sigma\), T') Query:**
     - **Case 1:** \((y, \sigma, T')\) is from a dvc start(m) query: Query the signature oracle to get \(\sigma\) (where \(|\sigma| = 0\), since the signature scheme is deterministic), and then return \(p \cdot (\sigma / \text{encode}(m, T))^e \mod N\), where \(p\) is from the start query.
     - **Case 2:** \(y\) and \(T'\) are from a dvc start query, but not \(\sigma\): Behave like a normal server (i.e., the svr will abort).
     - **Case 3:** \(T' = T\), but \(y\) is not from a dvc start query: Let \(y = D_{\text{sk}_{\text{svr}}}(y)\). Behave like a normal server, but if \(p = b\), then query the signature oracle to get \(\sigma\) and return \(p \cdot (\sigma / \text{encode}(m, T))^e \mod N\).
     - **Case 4:** \(T' \neq T\), but \(y\) is from a dvc start(m) query: Let \(y = D_{\text{sk}_{\text{svr}}}(T')\). Behave like a normal server, but using \(m, T, \beta,\) and \(p\) from the dvc start(m) query.
     - **Case 5:** \(T' \neq T\) and \(y\) is not from a dvc start query: Behave like a normal server.

3. **dvc start(m) Query:**
   - \(F^*\) responds to a dvc start(m) query as a normal dvc would, except setting \(y = E_{\text{pk}_{\text{svr}}}(\text{K}_{\text{cf}} || m || X)\).
   - For a dvc finish(\(\tau\)) query corresponding to a start(m) query that returned \((y, d, x)\), if \(\tau\) was not returned from a svr serve(y, \(\sigma\), T) query, have dvc abort. Otherwise, \(F^*\) returns the signature found in that serve(y, \(\sigma\), T) query.

#### Part I: Analysis
- If \(F\) forges in the simulation, then \(F^*\) forges in the underlying signature scheme.

#### Part II: Construction of Attacker \(A^*\)
- The second part of the proof is similar to Part 2 of the proof of Theorem 6.3, except with \(t, b\) replaced by \(\epsilon\), and no negligible term.

### 7. Conclusion
Dictionary attacks against password-protected private keys pose a significant threat if the device holding those keys may be captured. In this paper, we present an approach to render devices invulnerable to such attacks. Our approach requires the device to interact with a remote server to perform its private key operations. Therefore, it is primarily suited for a device that uses its private key in interactive cryptographic protocols (and thus necessarily has network connectivity to reach the server when use of its private key is required). A prime example is a device that plays the role of a client in the TLS protocol with client authentication. Although our protocol requires the device to interact with a remote server, we prove that this server poses no threat to the device. Specifically, it gains no significant advantage in forging signatures that can be verified with the device’s public key or decrypting messages encrypted under the device’s public key. In particular, it cannot mount a dictionary attack to expose the device’s private key. Even if both the device and server are compromised, the attacker must still succeed in an offline dictionary attack before signing on behalf of the device.

In addition to the above properties, we presented protocols that further provide the feature of key disabling. This enables the user to disable the device’s private key immediately, even after the device has been captured and even if the attacker has guessed the user’s password. Once disabled, the device’s key is provably useless to the attacker (provided that the attacker cannot also compromise the server). Key disabling is thus an effective complement to any public key revocation mechanism that might exist, particularly if there is a delay for revoking public keys.