  3. 调用被恢复对象的readObject方法
  4. 命令执行
### 反序列化漏洞起源
#### 开发失误
之前的demo就是一个对反序列化完全没有进行安全审查的示例，但实战中不会有程序员会写出这种弱智代码。因此开发时产生的反序列化漏洞常见的有以下几种情况：
  1. 重写ObjectInputStream对象的resolveClass方法中的检测可被绕过。
  2. 使用第三方的类进行黑名单控制。虽然Java的语言严谨性要比PHP强的多，但在大型应用中想要采用黑名单机制禁用掉所有危险的对象几乎是不可能的。因此，如果在审计过程中发现了采用黑名单进行过滤的代码，多半存在一两个‘漏网之鱼’可以利用。并且采取黑名单方式仅仅可能保证此刻的安全，若在后期添加了新的功能，就可能引入了新的漏洞利用方式。所以仅靠黑名单是无法保证序列化过程的安全的。
#### 基础库中隐藏的反序列化漏洞
优秀的Java开发人员一般会按照安全编程规范进行编程，很大程度上减少了反序列化漏洞的产生。并且一些成熟的Java框架比如Spring
MVC、Struts2等，都有相应的防范反序列化的机制。如果仅仅是开发失误，可能很少会产生反序列化漏洞，即使产生，其绕过方法、利用方式也较为复杂。但其实，有很大比例的反序列化漏洞是因使用了不安全的基础库而产生的。  
2015年由黑客Gabriel Lawrence和Chris Frohoff发现的‘Apache Commons
Collections’类库直接影响了WebLogic、WebSphere、JBoss、Jenkins、OpenNMS等大型框架。直到今天该漏洞的影响仍未消散。  
存在危险的基础库：
    commons-fileupload 1.3.1
    commons-io 2.4
    commons-collections 3.1
    commons-logging 1.2
    commons-beanutils 1.9.2
    org.slf4j:slf4j-api 1.7.21
    com.mchange:mchange-commons-java 0.2.11
    org.apache.commons:commons-collections 4.0
    com.mchange:c3p0 0.9.5.2
    org.beanshell:bsh 2.0b5
    org.codehaus.groovy:groovy 2.3.9
    org.springframework:spring-aop 4.1.4.RELEASE
某反序列化防护软件便是通过禁用以下类的反序列化来保护程序：
    'org.apache.commons.collections.functors.InvokerTransformer',
    'org.apache.commons.collections.functors.InstantiateTransformer',
    'org.apache.commons.collections4.functors.InvokerTransformer',
    'org.apache.commons.collections4.functors.InstantiateTransformer',
    'org.codehaus.groovy.runtime.ConvertedClosure',
    'org.codehaus.groovy.runtime.MethodClosure',
    'org.springframework.beans.factory.ObjectFactory',
    'xalan.internal.xsltc.trax.TemplatesImpl'
基础库中的调用流程一般都比较复杂，比如`org.apache.commons.collections.functors.InvokerTransformer`的POP链就涉及反射、泛型等，而网上也有很多复现跟踪流程的文章，比如前些天先知发布的这两篇。  
[Java反序列化漏洞-玄铁重剑之CommonsCollection(上)](https://xianzhi.aliyun.com/forum/topic/2028)  
[Java反序列化漏洞-玄铁重剑之CommonsCollection(下)](https://xianzhi.aliyun.com/forum/topic/2029?from=groupmessage)  
这里就不再赘述了，可以跟着ysoserial的EXP去源码中一步步跟进、调试。
#### POP Gadgets
这里介绍一个概念，POP Gadgets指的是在通过带入序列化数据，经过一系列调用的代码链，其中POP指的是Property-Oriented
Programming，即面向属性编程，和逆向那边的ROP很相似，面向属性编程（Property-Oriented
Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented
Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。两者的不同之处在于ROP更关注底层，而POP只关注对象与对象之间的调用关系。  
Gadgets是小工具的意思，POP
Gadgets即为面向属性编程的利用工具、利用链。当我们确定了可以带入序列化数据的入口后，便是要寻找对应的POP链。以上提到的基础库和框架恰恰提供了可导致命令执行
POP 链的环境，所以引入了用户可控的序列化数据，并使用了不安全的基本库，就意味着存在反序列化漏洞。  
随着对反序列化漏洞的深入，我们会慢慢意识到很难将不安全的基本库这一历史遗留问题完全清楚，所以清楚漏洞的根源还是在不可信的输入和未检测反序列化对象安全性。
基本库中的反序列化触发机制较为复杂和底层，可以结合ysoserial源码中的exp来进行跟进分析。
本文后期会进行详细讲解。
### 如何发现Java反序列化漏洞
#### 白盒检测
当持有程序源码时，可以采用这种方法，逆向寻找漏洞。
反序列化操作一般应用在导入模板文件、网络通信、数据传输、日志格式化存储、对象数据落磁盘、或DB存储等业务场景。因此审计过程中重点关注这些功能板块。
流程如下：
① 通过检索源码中对反序列化函数的调用来静态寻找反序列化的输入点  
可以搜索以下函数：
    ObjectInputStream.readObject
    ObjectInputStream.readUnshared
    XMLDecoder.readObject
    Yaml.load
    XStream.fromXML
    ObjectMapper.readValue
    JSON.parseObject
小数点前面是类名，后面是方法名
② 确定了反序列化输入点后，再考察应用的Class Path中是否包含Apache Commons
Collections等危险库（ysoserial所支持的其他库亦可）。
③ 若不包含危险库，则查看一些涉及命令、代码执行的代码区域，防止程序员代码不严谨，导致bug。
④ 若包含危险库，则使用ysoserial进行攻击复现。
#### 黑盒检测
在黑盒测试中并不清楚对方的代码架构，但仍然可以通过分析十六进制数据块，锁定某些存在漏洞的通用基础库（比如Apache Commons
Collection）的调用地点，并进行数据替换，从而实现利用。  
在实战过程中，我们可以通过抓包来检测请求中可能存在的序列化数据。  
序列化数据通常以`AC ED`开始，之后的两个字节是版本号，版本号一般是`00 05`但在某些情况下可能是更高的数字。  
为了理解反序列化数据样式，我们使用以下代码举例：
    import java.io.*;
    public class SerializeDemo
    {
       public static void main(String [] args)
       {
          Employee e = new Employee();
          e.name = "员工甲";
          e.identify = "General staff";
          try
          {
            // 打开一个文件输入流
             FileOutputStream fileOut =
             new FileOutputStream("D:\\Task\\employee1.db");
             // 建立对象输入流
             ObjectOutputStream out = new ObjectOutputStream(fileOut);
             //输出反序列化对象
             out.writeObject(e);
             out.close();
             fileOut.close();
             System.out.printf("Serialized data is saved in D:\\Task\\employee1.db");
          }catch(IOException i)
          {
              i.printStackTrace();
          }
       }
    }
在本地环境下运行一下，即可看到生成的employee1.db文件。  
生成的employee1.db反序列化数据为（可用Winhex、Sublime等工具打开）：  
需要注意的是，`AC ED 00
05`是常见的序列化数据开始，但有些应用程序在整个运行周期中保持与服务器的网络连接，如果攻击载荷是在延迟中发送的，那检测这四个字节就是无效的。所以有些防火墙工具在检测反序列化数据时仅仅检测这几个字节是不安全的设置。
所以我们也要对序列化转储过程中出现的Java类名称进行检测，Java类名称可能会以“L”开头的替代格式出现 ，以';'结尾
，并使用正斜杠来分隔命名空间和类名（例如 “Ljava / rmi / dgc /
VMID;”）。除了Java类名，由于序列化格式规范的约定，还有一些其他常见的字符串，例如
：表示对象（TC_OBJECT），后跟其类描述（TC_CLASSDESC）的'sr'或
可能表示没有超类（TC_NULL）的类的类注释（TC_ENDBLOCKDATA）的'xp'。
识别出序列化数据后，就要定位插入点，不同的数据类型有以下的十六进制对照表：
    0x70 - TC_NULL
    0x71 - TC_REFERENCE
    0x72 - TC_CLASSDESC
    0x73 - TC_OBJECT
    0x74 - TC_STRING
    0x75 - TC_ARRAY
    0x76 - TC_CLASS
    0x7B - TC_EXCEPTION
    0x7C - TC_LONGSTRING
    0x7D - TC_PROXYCLASSDESC
    0x7E - TC_ENUM
`AC ED 00
05`之后可能跟上述的数据类型说明符，也可能跟`77(TC_BLOCKDATA元素)`或`7A(TC_BLOCKDATALONG元素)`其后跟的是块数据。
序列化数据信息是将对象信息按照一定规则组成的，那我们根据这个规则也可以逆向推测出数据信息中的数据类型等信息。并且有大牛写好了现成的工具-[SerializationDumper](https://github.com/NickstaDB/SerializationDumper)
用法：  
`java -jar SerializationDumper-v1.0.jar
aced000573720008456d706c6f796565eae11e5afcd287c50200024c00086964656e746966797400124c6a6176612f6c616e672f537472696e673b4c00046e616d6571007e0001787074000d47656e6572616c207374616666740009e59198e5b7a5e794b2`
后面跟的十六进制字符串即为序列化后的数据
工具自动解析出包含的数据类型之后，就可以替换掉TC_BLOCKDATE进行替换了。`AC ED 00 05`经过Base64编码之后为`rO0AB`
在实战过程中，我们可以通过tcpdump抓取TCP/HTTP请求，通过[SerialBrute.py](https://github.com/NickstaDB/SerialBrute/)去自动化检测，并插入ysoserial生成的exp  
`SerialBrute.py -r  -c  [opts]`  
`SerialBrute.py -p  -t  -c  [opts]`
使用ysoserial.jar访问请求记录判断反序列化漏洞是否利用成功：  
`java -jar ysoserial.jar CommonsCollections1 'curl " + URL + " '`
当怀疑某个web应用存在Java反序列化漏洞，可以通过以上方法扫描并爆破攻击其RMI或JMX端口（默认1099）。
### 环境测试
在这里，我们使用大牛写好的[DeserLab](https://github.com/NickstaDB/DeserLab)来模拟实战环境。
#### DeserLab演示
[DeserLab](https://github.com/NickstaDB/DeserLab)是一个使用了Groovy库的简单网络协议应用，实现client向server端发送序列化数据的功能。而Groovy库和上文中的Apache
Commons Collection库一样，含有可利用的POP链。  
我们可以使用上文提到的[ysoserial](https://github.com/frohoff/ysoserial/)和[在线载荷生成器](http://jackson.thuraisamy.me/runtime-exec-payloads.html)进行模拟利用。  