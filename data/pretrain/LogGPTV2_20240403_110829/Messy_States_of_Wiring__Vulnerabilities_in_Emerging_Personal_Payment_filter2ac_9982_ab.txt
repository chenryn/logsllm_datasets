on the personal account of the merchant by installing a
client app on the merchant’s smartphone that will hook
into the notiﬁcation interfaces of the third-party payment
platform apps. Even though merchants need to specif-
ically provide consent to such monitoring in order to
use the PPS, there are signiﬁcant privacy and security
concerns with such designs. However, we will leave the
investigation of these apps for a another time.
2.3.2 Order Generation
2.3.4 Payment Notiﬁcation
When the user makes a purchase attempt, an order is generated
at MS and delivered to MC, as shown in Figure 2.
In this stage, PMP sends notiﬁcation to both MS and MC after
conﬁrming the payment. Three steps are included as follows:
1. In the ﬁrst step, MC generates an order request, denoted
as orderrq, and then sends it to MS. The orderrq often
contains only the minimal amount of information that is
necessary to associate the order with the merchandise,
such as the unique item identiﬁer. Since the merchant
may offer multiple payment options, the buyer’s choice
is also included in this request.
2. After receiving the orderrq, MS generates the order
packet orderp, which contains detailed order parame-
ters for the requested merchandise, and a Token is also
generated using KEY to protect the integrity.
3. MS delivers orderp back to MC.
2.3.3 Order Payment
As shown in Figure 2, this stage includes ﬁve steps as follows.
4. MC sends the order packet orderp to PMP.
5. Upon receiving the order packet orderp, the PMP will
look up the stored KEY for the merchant speciﬁed in the
orderp, then use the received orderp and KEY to verify
the integrity of the order packet. Note that when PMP
9. Once the PMP detects the money paid to the merchant’s
personal account, PMP compares it to the expected paid
value of the pending orders.
10. A notiﬁcation is then sent to the MS (via noti f y_url in
orderp) which includes the payment status code, order
ID, and/or monitored payment value, indicating whether
an order is successfully paid or not.
11. The same notiﬁcation is also sent to the MC via the
return_url in orderp.
Notably, not all PPSs include the paid value in the notiﬁcation
to MS in step 10. In fact, few PPSs include the price in the
notiﬁcation. As mentioned in step 5, there can be small devia-
tions between the actual paid value and the item price. This
small deviation is a mechanism by which PMP distinguishes
different transactions from the same merchant by making
small adjustments to the price such that price is unique in
each transaction. Furthermore, MS is not informed of this
deviation in advance, therefore, they would be not able to
associate a money transaction with the order number. As a
result, the value of the price in the notiﬁcation is often not
used, and only the order number and the payment status code
in the notiﬁcation are used by MS to verify the success of the
3276    30th USENIX Security Symposium
USENIX Association
KEY Distribution
Order Generation
PPS  Processes
Vulnerabilities
Unprotected 
Changing API
Local KEY 
Storage
Packet Signature Generation
 Local Order 
Generation
MD5 Token 
Generation
 Simple String 
Concatenation
Order Payment
Payment Account 
Delivery
 Lacking Order 
Checking
Payment 
Notification
Historical 
Order Inquiry
 Lacking Actual 
paid amount
Attacks
Malicious KEY 
Changing
Order Tampering 
with KEY
MD5 Signature 
Collision
String Shift in 
Order Packet
Payment 
Substitution
Figure 3: The Vulnerabilities and attacks in the PPS ﬂows.
payment on a particular order in PPS. This unique design,
which ignores consistency in the order price of different order
processing stages, turns out to be problematic from a security
perspective, which will be discussed later in section 3.
After all the steps above, the payment transaction of one
order is completed as shown in Fig. 2, and the merchandise
can be shipped.
2.3.5 Order Inquiry in PPS
In PPS, the order management system is provided by PMP to
support the historical order inquiry service.
1. MS generates the query request (denoted as queryo),
which contains the merchant identiﬁcation code (mer-
chantID), and the order ID (orderid). This request is
protected by the Tokenq.
2. MS sends this query packet queryo to PMP.
3. Upon receiving the queryo, PMP looks up the merchant
KEY based on the merchant ID in the queryo. Using the
KEY, PMP veriﬁes the Token∗
q in queryo.
4 Once the request is veriﬁed, PMP sends the inquiry result
queryres back to MS.
We also found that only the payment status code is included
in the queryres rather than the actual paid value in most of
the PPSs. In this case, the merchant has no way to look up
the actual payment value in historical orders. This creates an
opportunity for the attacker, since merchants would not be
able to go back and verify the payment value via the PMP.
3 Security Analysis
In this paper, we focus our analysis on the unique design
of PPS, involving three key parties MC, MS, and PMP. As
shown in Figure 3, there are ﬁve main stages as previously
described, from key distribution to order generation, order
payment, payment notiﬁcation, and historical order inquiry.
We found seven unique vulnerable patterns in multiple stages
of the order processing pipeline. Based on these vulnerabili-
ties, we have created ﬁve proof-of-concept attacks.
3.1 Vulnerable KEY Distribution/Update
As discussed in Section 2.3.1, the unique KEY is assigned
when a merchant subscribes to the services and is often dis-
played on the PMP management web page. While accessing
the key via web management interface is well protected with
communication security mechanisms such as HTTPS, PPS
also provides REST APIs to allow merchants to manipulate
keys programmatically.
3.1.1 Unprotected Key Changing API
Through our study, we found that the web management
interface is well protected, however, the API allows pre-
authenticated requests to change KEY. In most of the PPSs
we studied, the API only requires merchant ID to change
KEY. The merchant ID is not a secret by design and can
be directly obtained by examining the order packet. As a re-
sult, an adversary, who has the merchant ID, can easily forge
a KEY change request from MS. This can lead to loss of
merchant KEY or disruption of merchant’s e-commerce.
3.1.2 Attack: Malicious KEY Changing
Taking advantage of this vulnerability, an attacker can ﬁrst
obtain the merchant ID from various places including any
order packet sent from MC to PMP, then forge a key change
request.
In some PPSs, the new KEY is included directly in the
reply. Using the new KEY, the attacker can make arbitrary
modiﬁcations to the order requests from this MS. Unfortu-
nately, communication security mechanisms such as HTTPS
with TLS do not mitigate this attack since attacker is the party
USENIX Association
30th USENIX Security Symposium    3277
Protection Methods
KEY Changing with 
AuthenticatIon 
Transmission with 
HTTPS(TLS)
Remove New KEY 
In Reply
Disables
Malicious Key 
Changing Attack
Results in
Cannot Disable
Steal New KEY
Disables
Results in
DoS Attack on 
Merchant
Figure 4: The attack, consequences, and protection in KEY
distribution.
making the requests, instead of eavesdropping or launching
man-in-the-middle attack over the network.
In other PPSs, the new KEY is not included in the reply,
and can only be accessed via the standard web portal. The best
an attacker can do is to leverage the interface to make frequent
key changes to disrupt merchant operations and achieve DoS.
The relationship between different attack results and protec-
tions against malicious use of KEY change APIs can be found
in Figure 4. It is possible to ﬁx the root cause of this vulnera-
bility by mandating authentication on key change request. It
is also possible to limit the damage of a pre-authenticated key
change API by removing the new KEY from the reply. How-
ever, communication security mechanisms, such as HTTPS,
unfortunately cannot defend against key stealing attacks or
DoS since the attacker is the one making the API calls.
3.2 Vulnerable Order Generation
Theoretically, orders should be generated and signed at the
merchant server end before being delivered to the client. How-
ever, in practice, many implementations generate partial or
entire orders at the client. In other words, the order request
includes information ﬁelds that go directly into the ﬁnal order
packet.
3.2.1 Local Order Generation
When the orders are generated locally, there are two secu-
rity implications. First, it implies that attackers can tamper
with some ﬁelds of a locally stored order. In many cases,
MS does not conduct additional cross validation, and then
the attacker can successfully manipulate an order. For ex-
ample, the attacker may reduce the price of an item. The
second implication is related to information leakage. When
the server performs additional validation, the attacker cannot
simply reduce the price by modifying the order request, but
he/she can still leverage the leaked information to help stage
more advanced attacks. For example, in the case of a hash
collision attack, which is described later in the section, it is
important that the attacker can manipulate ﬁelds in the order
to accommodate the spaces needed for near-collision blocks.
3.2.2 Local KEY Storage
The security of PPS mainly relies on the signature mechanism
to verify order packets, where KEY is essential as discussed
previously. However, to enable the local order generation,
some MC implementations store KEY in MC for convenience.
This allows an attacker to easily obtain the merchant’s KEY
by reverse engineering the MC program. With the KEY, an
attacker can make arbitrary modiﬁcations to the order packet
orderp.
3.2.3 Attack: Order Tampering with KEY
When the key is stored locally in MC, the attacker can easily
extract it by reverse engineering, and is able to make arbitrary
modiﬁcations to the order packet. After initiating the order
process with MS, the compromised MC can modify the or-
(cid:3)
p with the
der price and generate a new order packet order
modiﬁed price using the stored KEY. Furthermore, almost all
MSs check the payment status code instead of the actual paid
value due to the unique arrangement of price adjustment in
PPS. Thus, they cannot notice such a price change. To make it
worse, there is actually no way for the MS to ﬁnd the historical
payment value from PMP either, which we will discuss at the
end of this section.
3.3 Vulnerable Packet Signature Generation
Packet signing with the KEY to generate a Token is the most
important design aspect of the payment protocol in regards
to preventing order tampering. Our analysis revealed two
vulnerabilities.
3.3.1 String Concatenation in Token Generation
The ﬁrst vulnerability falls in the process of string concate-
nation when generating a Token. As we have described in
Section 2.3.1, Token is generated by concatenating all items
(i.e., parameters and their values) in the order packet along
with the KEY into a string and inputting that string to the
MD5 algorithm. While there are PPSs that separate the ﬁelds
in the order with a special character, some PPSs simply con-
catenate all ﬁelds without any delimiter. As a result, when the
sufﬁx of one ﬁeld is shifted to the preﬁx of the next ﬁeld in
the order packet, the generated Token does not change. This
allows an attacker to tamper with the order packet by shifting
some characters from one ﬁeld to the next ﬁeld.
3.3.2 Attack: Order Tampering using String Shift
To exploit this vulnerability, the attacker needs to take advan-
tage of several unique designs that are uniform to PPS. Since
3278    30th USENIX Security Symposium
USENIX Association
PMP does not have the capability to store all the detailed
information (including pricing) for individual merchandise
from all the merchants, PMP has to rely on the received order
packet to obtain the merchandise price and certify whether
this price has been modiﬁed via the token. Additionally, since
MS lacks visibility in how PMP manipulates prices to multi-
plex orders, it needs to rely on the payment status ﬂag in the
payment notiﬁcation packet rather than the paid amount. As a
result, since neither MS nor PMP know what the correct pay-
ment amount is, if the adversary can forge an order that passes
veriﬁcation on the token, then he/she can purchase any item
at a much lower price. While all the ﬁelds are well deﬁned
using a JSON object, the signature veriﬁcation is only over
the string concatenation of values from the consecutive ﬁelds.
This implies that the trailing bits of a ﬁeld can be maliciously
shifted to the heading bits of the next ﬁeld without impacting
the signature.
To give an illustrative example, let’s consider a price mod-
iﬁcation attack. To launch the attack, the attacker can shift
some sufﬁx of a Price ﬁeld into the neighboring return_url
ﬁeld or optional ﬁelds. Figure 5 shows one example of this
operation, where we assume the Price ﬁeld is 100 and the
neighboring return_url is “www.xxx.com". In this attack, the
attacker modiﬁes the order packet orderp at Step 3 by moving
the last 0 in Price to return_url before sending it to PMP. That
is, one 0 in the Price ﬁeld is shifted to the front of the URL
ﬁeld. Then the modiﬁed packet will include the new price of
10, and the URL of 0www.xxx.com. return_url works as the
function of notifying MC of the payment status.
(cid:258)  100  www.xxxx.com  (cid:258) 
price Return_URL
(cid:258)  10  0www.xxxx.com  (cid:258) 
price Return_URL
Same in calculating Token
(cid:258)100www.xxxx.com(cid:258)KEY
Figure 5: An example of the string shift in the order packet.
Since the string concatenation of the request has not
changed, the Token remains the same and can pass the veriﬁ-
cation at PMP. As a result, the attacker only has to pay a tenth
of the price to purchase the item. However, because of the
modiﬁcation on the return_url, his merchant client app will
not receive the notiﬁcation, but the loss of this functionality
is not important for MC.
3.3.3 MD5-based Token Generation
The second vulnerability is from the use of weak hash cryp-
tographic primitives. From our empirical study, most of the
PPSs are using weak cryptographic primitives such as MD5
message-digest algorithms to generate the Token. There
have been extensive studies demonstrating the weakness of
MD5 [14, 19, 24, 49]. MD5 collision attack has been veriﬁed
and implemented in [49], in which two different inputs that
have the same preﬁx can generate the same output string.
Later, the chosen-preﬁx collision attack proposed in [41–44]
allows an attacker to change the preﬁx part of one input, but
still generate the same MD5 output. Consequently, an attacker
can maliciously modify some of the ﬁelds in the order packet
(e.g., price), but still generate the same Token for fooling
the PMP, even without the KEY. However, exploiting this
requires chaining several vulnerabilities together.
3.3.4 Attack: Order Modiﬁcation based on MD5 Colli-
sion
Attackers have to take advantage of the vulnerabilities from lo-
cal order generation, in which some parameters are generated
at MC instead of MS, so that before the Token is generated at
the MS, they can create the collision based on the parameters
leaked at the MC. Different from the string shifting attack, by
leveraging collision attacks in the cryptographic hash function
attackers can make signiﬁcant changes to the order. With this
attack it is possible to modify the values of the ﬁelds instead
of shifting bits from one ﬁeld to its neighbor. Implementing
the MD5 signature collision in PPS should follow these three
steps:
Parameter Acquisition. To create the MD5 collision, the
attacker needs to obtain enough parameters from certain ﬁelds
in the order packet. Before the order packet has been signed,
the attacker can generate two packs of orders that differ in the
expected ﬁeld, usually the price ﬁeld, but result in the same
calculated MD5 value. The existing algorithm creates the
MD5 collision by generating the two different data blocks af-
ter the preﬁx, and as a result, an optional ﬁeld behind the price
is necessary for placing the collision data blocks. Furthermore,
for MD5, if String1 and String2 collide, then appending the
same string before or after String1 and String2 would also