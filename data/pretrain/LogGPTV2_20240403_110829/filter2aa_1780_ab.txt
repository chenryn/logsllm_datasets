… 
… 
@0x88 
rgbSessionID[0x20] 
… 
… 
@0x128 
pSessionTicket 
@0x130 
cbSessionTicketLength 
_NCRYPT_SSL_KEY_HANDLE 
4 
cbStructLength 
4 
dwMagic [“BDDD”] 
4/8 
pNcryptSslProvider 
4/8 
pNcryptSslKey 
_SSL_MASTER_SECRET 
4 
cbStructLength 
4 
dwMagic [“ssl5”] 
4 
dwProtocolVersion 
0/4 
dwUnknown1* [alignment?] 
4/8 
pCipherSuiteListEntry 
4 
bIsClientCache 
48 
rgbMasterSecret 
4 
dwUnknown2 [reserved?] 
Master Secret Mapped to Unique Identifier 
RSA Session-
ID:97420000581679ae7a064f3e4a350682dca9e839ebca0
7075b1a944d8b1b71f7 Master-
Key:897adf533d0e87eadbc41bc1a13adb241251a56f0504
35fad0d54b1064f83c50cedb9d98de046008cde04a409779
5df2 
RSA Session-
ID:f5350000be2cebcb15a38f38b99a20751ed0d53957890
1ddde69278dbbf9738e Master-
Key:716a1d493656bf534e436ffb58ff2e40000516b735db
d5dfaff93f37b5ac90ba1c3a25ba3e1505b8f3aa168a657e
007b 
RSA Session-
ID:bcb3aff3581fccb9fe268d46f99f5e2c6cc9e59e51c67
14d70997e63b9c6fe73 Master-
Key:e45e18945197c2f0a2addb901a9558f194241d2b488c
dc3d1f81e1271acb4dc776e3c772177c7d0462afeca57a3d
9cb2 
RSA Session-
ID:c7d0f952fb3fc4999a692ce3674acb1a4b2c791ece2c6
d1621af95e6414ec3b0 Master-
Key:db93026b71e0323b60e2537f0eeebf4fc321094b8a9a
6ccd8cf0f50c7fa68c294f6c490d5af3df881db585e2a10a
0aea 
Wireshark SSL Log Format 
Wireshark SSL input formats found here: https://github.com/boundary/wireshark/blob/master/epan/dissectors/packet-ssl.c 
Ephemeral & Persistent Private Keys 
 Both share the same structure 
 Both store secrets in a Key Storage Provider 
Key struct (KPSK) 
 The “Key Type” is compared with different 
values 
ssl6 gets compared with a list stored in 
bcryptprimitives 
ssl4 gets compared with a list stored in 
NCRYPTPROV 
 The Key Storage Provider Key (KPSK) is 
referenced indirectly through an “Ncrypt 
Key” struct* 
*NcryptKey not to be confused with NcryptSslKey 
_SSL_KEY_PAIR 
4 
cbStructLength 
4 
dwMagic [ “ssl4” | “ssl6” ] 
4 
dwKeyType 
4 
dwUnknown1 [alignment?] 
4/8 
pKspProvider 
4/8 
pKspKey 
_NCRYPT_KEY_HANDLE 
4 
cbStructLength 
4 
dwMagic [ 0x44440002 ] 
4 
dwKeyType 
4 
dwUnknown1 [alignment?] 
4/8 
pKspProvider 
4/8 
pKspKey 
_KSP_KEY 
4 
cbStructLength 
4 
dwMagic [ “KSPK” ] 
4 
dwKeyType 
... 
... 
@0x60 
pMSKY 
@0xD0 
pDpapiBlob 
@0xD8 
dwDpapiBlobLength 
Ephemeral Private Key 
 For performance, reused across connections 
Given the public connection params, we can 
derive the PMS and subsequently MS 
 Stored unencrypted in a LE byte array 
Inside of MSKY struct 
 The curve parameters are stored in the KPSK 
Other parameters (A&B, etc) are stored in MSKY 
w/ the key 
 Verified by generating the Public & comparing 
The Public Key is also stored in the first pointer 
of the CEphemData struct that points to “ssl6” 
In-line with suggestion of this paper: http://dualec.org/DualECTLS.pdf 
“Persistent” Private Key 
 The RSA Key that is stored on disk 
Unique instance for each private RSA Key – by 
default, the system has several 
E.g. one for Terminal Services 
 RSA Keys are DPAPI protected 
Lots of research about protection / exporting 
Note the MK GUID highlighted from the Blob 
 The Key is linked to a given Server Cache Item 
 Verified by comparing the DPAPI blob in 
memory to protected certificate on disk 
Also verified through decryption 
Decrypting Persistent Key - DPAPI 
 Can extract the blob from memory and decrypt w/ keys 
from disk 
 DPAPIck / Mimikatz 
 OR 
 Can decrypt directly from memory :D 
 MasterKeys get cached in Memory 
 On Win10 in: dpapisrv!g_MasterKeyCacheList 
 See Mimilib for further details 
 Even though symbols are sort of required, we 
could likely do without them 
There are only two Bcrypt key pointers in lsasrv’s 
.rdata section (plus one lock) 
Identifying the IV is more challenging 
Cached DPAPI MK + Params to Decrypt 
Decrypting Persistent Key - DPAPI 
Session Tickets 
 Not seemingly in widespread use with IIS? 
 Comes around w/ Server 2012 R2 
 Documentation is lacking. 
 Enabled via reg key + powershell cmdlets? 
 Creates an “Administrator managed” 
session ticket key 
 Schannel functions related to Session Tickets 
load the keyfile from disk 
 Export-TlsSessionTicketKey :D 
Reference to DISABLING session tickets in Win8.1 Preview release notes: https://technet.microsoft.com/en-us/library/dn303404.aspx 
Session Ticket Key 
 Keyfile contains a DPAPI blob, preceded by a 
SessionTicketKey GUID + 8 byte value 
 Key gets loaded via schannel  
 The heavy lifting (at least in Win10) is done 
via mskeyprotect 
 AES key derived from decrypted blob via 
BCryptKeyDerivation() 
 Key gets cached inside mskeyprotect! 
  No symbols for cache : / 
 No bother, we can just find the Key GUID 
that’s cached with it :D 
Session Ticket Key GUID 
Possibly Salt or MAC? 
Size of ensuing DPAPI Blob 
DPAPI Blob (contains it’s own fields) 
Decrypting Session Tickets 
 Session Ticket structure pretty much follows the 
RFC (5077), except: 
 MAC & Encrypted State are flipped (makes 
a lot of sense) 
 After extracting/deriving the Symm key, it’s just 
straight AES 256 
 Contents of the State are what you’d expect: 
 Timestamp 
 Protocol/Ciphersuite info 
 MS struct 
Key GUID 
IV 
MAC 
Encrypted 
TLS 
State 
Decrypting Session Tickets 
Master Secret 
Secrets are cool and all... 
But Jake, what if I don’t have a packet capture?  
(And I don’t care about future connections?) 
ThE Context 
Inherent Metadata TLS Provides 
Core SSL/TLS functionality 
 Timestamps 
 The random values *typically* start with a 4-byte 
timestamp (if you play by the RFCs) 
 Identity / fingerprinting 
 Public Key 
 Session ID* 
 Offered Cipher Suites / Extensions 
 Session ID’s are arbitrary, but are not always 
random -> Schannel is a perfect example 
 uses MaximumCacheEntries parameter when creating 
the first dword of the random, leading to a(n 
imperfect) fingerprint of two zero bytes in 3/4th byte* 
TLS Extensions 
 Server Name Indication (SNI) 
 Virtual hosts 
 Application-Layer Protocol Negotiation (ALPN) 
 Limited, but what protocol comes next 
 fingerprinting? 
 Session Tickets 
 Key GUID 
*Referenced in this paper: http://dualec.org/DualECTLS.pdf 
Schannel Caching Parameters 
Parameters: 
 The following control upper-limit of cache time: 
  m_dwClientLifespan 
  m_dwServerLifespan 
  m_dwSessionTicketLifespan 
 All of which: 
    are set to 0x02255100 (10hrs in ms) 
 Also of Interest: 
  m_dwMaximumEntries (set to 0x4e20 or 20,000 
entries by default) 
  m_dwEnableSessionTicket controls use of 
session tickets (e.g. 0, 1, 2) 
  m_dwSessionCleanupIntervalInSeconds (set 
to 0x012c or 300 seconds by default) 
HOWEVER! 
 Schannel is the library, the process has control 
 Proc can purge its own cache at will 
 For example, IIS reportedly* purges after 
around two hours  
 Schannel maintains track of process, frees cache 
items after client proc terminates :  
D 
e 
f 
c 
0 
n 
“ 
” 
Fin. 
QUestions? 
@TinRabbit_ 
Special Thanks 
For general support, helpful comments, their time, and encouragement. 
Áine Doyle 
Badass Extraordinaire  
(OCSC) 
Dr. John-Ross Wallrabenstein  
Sypris Electronics 
Dr. Marcus Rogers 
Purdue Cyber Forensics Laboratory 
Michael Hale Ligh (MHL)  
Volexity 
Tatiana Ringenberg 
Sypris Electronics