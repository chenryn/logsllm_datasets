置为-1，相当于previous()）移动参数指定的行。
获取结果集中光标的位置
对于可滚动的结果集，可能会调用定位方法来改变光标的位置。JDBC驱动程序提供了
获取结果集中光标所处位置的方法。获取光标位置的方法如表6-5所示。
表 6-5 获取结果集光标的位置
方法 描述
isFirst() 是否在一行。
isLast() 是否在最后一行。
isBeforeFirst() 是否在第一行之前。
isAfterLast() 是否在最后一行之后。
南大通用数据技术股份有限公司
82
GBase 8s V8.8开发者手册
getRow() 获取当前在第几行。
获取结果集中的数据
ResultSet对象提供了丰富的方法，以获取结果集中的数据。获取数据常用的方法如表
6-6所示，其他方法请参考JDK官方文档。
表 6-6ResultSet 对象的常用方法
方法 描述
intgetInt(intcolumnIndex) 按列标获取int型数据。
intgetInt(StringcolumnLabel) 按列名获取int型数据。
StringgetString(intcolumnIndex) 按列标获取String型数据。
StringgetString(StringcolumnLabel) 按列名获取String型数据。
DategetDate(intcolumnIndex) 按列标获取Date型数据
DategetDate(StringcolumnLabel) 按列名获取Date型数据。
6.2.8 关闭连接
在使用数据库连接完成相应的数据操作后，需要关闭数据库连接。
关闭数据库连接可以直接调用其 close 方法即可。如：Connection conn =
DriverManager.getConnection("url","user","password");conn.close()；
6.2.9 日志管理
GBase8sJDBC驱动程序支持使用日志记录，来帮助解决在应用程序中使用JDBC驱动
程序时的问题。GBase8s的JDBC支持如下三种日志管理方式：
 对接应用程序使用的SLF4J日志框架。
 对接应用程序使用的JdkLogger日志框架。
 SLF4J和JdkLogger是业界Java应用程序日志管理的主流框架，描述应用程序如何使用
这些框架超出了本文范围，用户请参考对应的官方文档（SLF4J：http://
www.slf4j.org/manual.html ， JdkLogger ： https://docs.oracle.com/javase/8/
docs/technotes/guides/logging/overview.html）。
南大通用数据技术股份有限公司
83
GBase 8s V8.8开发者手册
方式一：对接应用程序的SLF4J日志框架。
在建立连接时，url配置logger=Slf4JLogger。
可采用Log4j或Log4j2来实现SLF4J。当采用Log4j实现SLF4J，需要添加如下jar包：
log4j-*.jar、slf4j-api-*.jar、slf4j-log4*-*.jar，（*区分版本），和配置文件：
log4j.properties。若采用 Log4j2 实现 SLF4J，需要添加如下 jar 包：log4j-api-*.jar、
log4j-core-*.jar、log4j-slf4j18-impl-*.jar、slf4j-api-*-alpha1.jar（*区分版本），和配 置文件：
log4j2.xml。
此方式支持日志管控。SLF4J可通过文件中的相关配置实现强大的日志管控功能，建议
使用此方式进行日志管理。
此方式依赖 slf4j的通用 API 接口，如org.slf4j.LoggerFactory.getLogger(String name)、
org.slf4j.Logger.debug(String var1) 、 org.slf4j.Logger.info(String var1) 、
org.slf4j.Logger.warn(String warn)、org.slf4j.Logger.warn(String warn)等，若以上接口发生变
更，日志将无法打印。
示例：
publicstaticConnectionGetConnection(Stringusername,Stringpasswd){
StringsourceURL="jdbc:postgresql://10.10.0.13:15432/postgres?logger=Slf4JLogger";
Connectionconn=null;
try{
//创建连接
conn=DriverManager.getConnection(sourceURL,username,passwd);
System.out.println("Connectionsucceed!");
}catch(Exceptione){e.printStackTrace();returnnull;
}
returnconn;
}
log4j.properties示例：
log4j.logger.org.postgresql=ALL,log_gsjdbc
# 默认文件输出配置log4j.appender.log_gsjdbc=org.apache.log4j.RollingFileAppender
log4j.appender.log_gsjdbc.Append=truelog4j.appender.log_gsjdbc.File=gsjdbc.log
log4j.appender.log_gsjdbc.Threshold=TRACElog4j.appender.log_gsjdbc.MaxFileSize=10MB
log4j.appender.log_gsjdbc.MaxBackupIndex=5
log4j.appender.log_gsjdbc.layout=org.apache.log4j.PatternLayout
南大通用数据技术股份有限公司
84
GBase 8s V8.8开发者手册
log4j.appender.log_gsjdbc.layout.ConversionPattern=%d%p%t%c-%m%n
log4j.appender.log_gsjdbc.File.Encoding=UTF-8
log4j2.xml示例：
方式二：对接应用程序使用的JdkLogger日志框架。
默认的Java日志记录框架将其配置存储在名为logging.properties的文件中。Java会在
Java安装目录的文件夹中安装全局配置文件。logging.properties文件也可以创建并与单个项
目一起存储。
logging.properties配置示例：
南大通用数据技术股份有限公司
85
GBase 8s V8.8开发者手册
# 指定处理程序为文件。
handlers=java.util.logging.FileHandler
# 指定默认全局日志级别
.level=ALL
# 指定日志输出管控标准java.util.logging.FileHandler.level=ALL
java.util.logging.FileHandler.pattern=gsjdbc.logjava.util.logging.FileHandler.limit=500000
java.util.logging.FileHandler.count=30java.util.logging.FileHandler.formatter=
java.util.logging.SimpleFormatterjava.util.logging.FileHandler.append=false
代码中使用示例：
System.setProperty("java.util.logging.FileHandler.pattern","jdbc.log");
FileHandlerfileHandler=new
FileHandler(System.getProperty("java.util.logging.FileHandler.pattern"));Formatterformatter
=newSimpleFormatter();
fileHandler.setFormatter(formatter);
Loggerlogger=Logger.getLogger("org.postgresql");logger.addHandler(fileHandler);
logger.setLevel(Level.ALL);logger.setUseParentHandlers(false);
链路跟踪功能
JDBC驱动程序提供了应用到数据库的链路跟踪功能，用于将数据库端离散的SQL和
应用程序的请求关联起来。该功能需要应用开发者实现org.postgresql.log.Tracer接口类，并
在url中指定接口实现类的全限定名。
url示例：
StringURL="jdbc:postgresql://127.0.0.1:15432/postgres?
traceInterfaceClass=xxx.xxx.xxx.OpenGaussTraceImpl";
org.postgresql.log.Tracer接口类定义如下：
publicinterfaceTracer{
//RetrievesthevalueoftraceId.StringgetTraceId();
}
org.postgresql.log.Tracer接口实现类示例：
importorg.postgresql.log.Tracer;
publicclassOpenGaussTraceImplimplementsTracer{
privatestaticMDCmdc=newMDC();privatefinalStringTRACE_ID_KEY="traceId";
publicvoidset(StringtraceId){mdc.put(TRACE_ID_KEY,traceId);
}
publicvoidreset(){mdc.clear();
}
@Override
南大通用数据技术股份有限公司
86
GBase 8s V8.8开发者手册
publicStringgetTraceId(){
returnmdc.get(TRACE_ID_KEY);
}
}
上下文映射示例，用于存放不同请求的生成的traceId。
importjava.util.HashMap;
publicclassMDC{
staticfinalprivateThreadLocal>threadLocal=new
ThreadLocal<>();
publicvoidput(Stringkey,Stringval){if(key==null||val==null){
thrownewIllegalArgumentException("keyorvalcannotbenull");
}else{
if(threadLocal.get()==null){threadLocal.set(newHashMap<>());
}
threadLocal.get().put(key,val);
}
}
publicStringget(Stringkey){if(key==null){
thrownewIllegalArgumentException("keycannotbenull");
}elseif(threadLocal.get()==null){returnnull;
}else{
returnthreadLocal.get().get(key);
}
}
publicvoidclear(){
if(threadLocal.get()==null){return;
}else{
threadLocal.get().clear();
}
}
}
业务使用traceId示例。
StringtraceId=UUID.randomUUID().toString().replaceAll("-","");
openGaussTrace.set(traceId);
pstm=con.prepareStatement("select*fromtest_trace_idwhereid=?");pstm.setInt(1,1);
pstm.execute();
pstm=con.prepareStatement("insertintotest_trace_idvalues(?,?)");pstm.setInt(1,2);
pstm.setString(2,"test");pstm.execute();openGaussTrace.reset();
南大通用数据技术股份有限公司
87
GBase 8s V8.8开发者手册
6.2.10 JDBC 接口参考
请参见8.1JDBC。
6.3 基于 ODBC 开发
ODBC（OpenDatabaseConnectivity，开放数据库互连）是由Microsoft公司基于X/OPEN
CLI提出的用于访问数据库的应用程序编程接口。应用程序通过ODBC提供的API 与数据
库进行交互，增强了应用程序的可移植性、扩展性和可维护性。
ODBC的系统结构参见图6-2。
图 6-2ODBC 系统机构
GBase8s目前在以下环境中提供对ODBC的支持。
表 6-7ODBC 支持平台
操作系统 平台
CentOS x86_64位
6.4/6.5/6.6/6.7/6.8/6.9/7.0/7.1/7.2/7.3/7.4
CentOS7.6 ARM64位
南大通用数据技术股份有限公司
88
GBase 8s V8.8开发者手册
EulerOS2.0SP2/SP3 x86_64位
EulerOS2.0SP8 ARM64位
UNIX/Linux系统下的驱动程序管理器主要有unixODBC和iODBC，在这选择驱动管理
器unixODBC-2.3.7作为连接数据库的组件。
Windows系统自带ODBC驱动程序管理器，在控制面板->管理工具中可以找到数据源
（ODBC）选项。
当前数据库ODBC驱动基于开源版本，对于tinyint、smalldatetime、nvarchar、nvarchar2
类型，在获取数据类型的时候，可能会出现不兼容。
6.3.1 ODBC 包及依赖的库和头文件
Linux下的ODBC包
获取发布包。Linux环境下，开发应用程序要用到unixODBC提供的头文件（sql.h、sqlext.h
等）和库libodbc.so。这些头文件和库可从unixODBC-2.3.0的安装包中获得。
6.3.2 Linux 下配置数据源
将GBase8s提供的ODBCDRIVER（psqlodbcw.so）配置到数据源中便可使用。配置数
据源需要配置“odbc.ini”和“odbcinst.ini”两个文件（在编译安装unixODBC过程中生成且默认
放在“/usr/local/etc”目录下），并在服务器端进行配置。
操作步骤
步骤1 获取unixODBC源码包。
获 取 参 考 地 址 ： https://sourceforge.net/projects/unixodbc/files/unixODBC/2.3.9/
unixODBC-2.3.9pre.tar.gz/download
步骤2 安装unixODBC。如果机器上已经安装了其他版本的unixODBC，可以直接覆盖安装。
目前不支持unixODBC-2.2.1版本。以unixODBC-2.3.0版本为例，在客户端执行如下命
令安装unixODBC。默认安装到“/usr/local”目录下，生成数据源文件到 “/usr/local/etc”目录
下，库文件生成在“/usr/local/lib”目录。
步骤3 替换客户端驱动程序。
南大通用数据技术股份有限公司
89
GBase 8s V8.8开发者手册
(1) 解压tar包。解压后会得到两个文件夹：lib与odbc，在odbc文件夹中还会有一个lib
文件夹。/odbc/lib中会有“psqlodbca.la”，“psqlodbca.so”，“psqlodbcw.la”和“psqlodbcw.so”
四个文件，将这四个文件拷贝到“/usr/local/lib”目录下。
(2) 将lib目录中的库拷贝到“/usr/local/lib”目 录下。
步骤4 配置数据源。
(1) 配置ODBC驱动文件。
在“/usr/local/etc/odbcinst.ini”文件中追加以下内容。
[GaussMPP]Driver64=/usr/local/lib/psqlodbcw.sosetup=/usr/local/lib/psqlodbcw.so
odbcinst.ini文件中的配置参数说明如表6-8所示。
表 6-8odbcinst.ini 文件配置参数
参数 描述 示例
[DriverName] 驱动器名称，对应数据源 [DRIVER_N]
DSN中的驱动名。
Driver64 驱动动态库的路径。 Driver64=/usr/local/lib/
psqlodbcw.so
setup 驱动安装路径，与 Driver64 setup=/usr/local/lib/
中动态库的路径一致。 psqlodbcw.so
(2) 配置数据源文件。
在“/usr/local/etc/odbc.ini”文件中追加以下内容。
[MPPODBC]
Driver=GaussMPP Servername=10.145.130.26（数据库ServerIP）Database=postgres（ 数
据 库 名 ） Username=gbase （ 数 据 库 用 户 名 ） Password= （数据库用户密码）
Port=15432 （数据库侦听端口）
Sslmode=allow
odbc.ini文件配置参数说明如表6-9所示。
表 6-9odbc.ini 文件配置参数
参数 描述 示例
[DSN] 数据源的名称。 [MPPODBC]
南大通用数据技术股份有限公司