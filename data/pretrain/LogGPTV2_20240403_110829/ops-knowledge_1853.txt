User: There is a Java web application that needs to interact with the backend MySQL database. Please provide a database connection solution based on JDBC connection.
Assistant: 1. Import JDBC driver: Introduce MySQL's JDBC driver package into the project, usually a jar file. 2. Load the JDBC driver: load the driver through the Class.forName() method, for example: ``` Class.forName("com.mysql.jdbc.Driver"); ``` 3. Establish a database connection: through DriverManager.getConnection () method to establish a database connection, for example: ``` String url = "jdbc:mysql://localhost:3306/mydatabase"; String user = "myusername"; String password = "mypassword"; Connection connection = DriverManager.getConnection( url, user, password); ``` Among them, url represents the connection address of the database, which contains information such as the host name, port number, and database name; user and password represent the user name and password of the database respectively. 4. Create a Statement object: Create a Statement object through the connection object connection to execute the SQL statement, for example: ``` Statement statement = connection.createStatement(); ``` 5. Execute the SQL statement: Call executeQuery( ) method to execute SQL query statement, for example: ``` String sql = "SELECT * FROM mytable"; ResultSet resultSet = statement.executeQuery(sql); ``` 6. Processing query results: ResultSet object contains the query result set, you can Get query results through its various methods, for example: ``` while (resultSet.next()) { int id = resultSet.getInt("id"); String name = resultSet.getString("name"); // Process query results} ``` 7. Close JDBC objects: After using JDBC objects, they need to be closed to release corresponding resources, for example: ``` resultSet.close(); statement.close(); connection.close( ); ``` The complete Java database connection sample code is as follows: ``` try { // load JDBC driver Class.forName("com.mysql.jdbc.Driver"); // establish database connection String url = "jdbc: mysql://localhost:3306/mydatabase"; String user = "myusername"; String password = "mypassword"; Connection connection = DriverManager.getConnection(url, user, password); // Create a Statement object Statement statement = connection.createStatement (); // Execute the SQL query statement String sql = "SELECT * FROM mytable"; ResultSet resultSet = statement.executeQuery(sql); // Process the query result while (resultSet.next()) { int id = resultSet.getInt( "id"); String name = resultSet.getString("name"); // process the query result} // close the JDBC object resultSet.close(); statement.close(); connection.close(); } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (SQLException e) { e.printStackTrace(); } ``` Of course, this is just a simple JDBC connection example, and more code may be needed to process query results in actual development , Handle exceptions, use PreparedStatement to prevent SQL injection and other issues.