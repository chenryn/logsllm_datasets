To ensure that `pip` points to the version managed by `pyenv` rather than the system version, you need to make sure that the shims in `~/.pyenv/shims/` are correctly set up and that your `PATH` is configured properly. Hereâ€™s a step-by-step guide to help you resolve this issue:

1. **Verify Your `PATH` Configuration:**
   Ensure that `~/.pyenv/shims` is included in your `PATH` and appears before any other directories that might contain a `pip` executable. Based on the `PATH` you provided, it seems to be correctly placed:
   ```sh
   /Users/patrick/google-cloud-sdk/bin:/Users/patrick/.pyenv/shims:/Users/patrick/.pyenv/bin:/Users/patrick/.local/bin:/Users/patrick/npm/bin:/Users/patrick/google_appengine:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/mongodb/bin
   ```

2. **Rehash `pyenv`:**
   Run the `pyenv rehash` command to update the shims. This should create or update the shims for all installed Python versions.
   ```sh
   pyenv rehash
   ```

3. **Check the Shim Directory:**
   Verify the contents of `~/.pyenv/shims/` to ensure that the `pip` shim exists. Based on the directory listing you provided, it seems that the `pip` shim is missing. The correct shim files should include `pip` for each installed Python version.

4. **Manually Create the `pip` Shim:**
   If the `pip` shim is not present, you can manually create it by copying an existing shim (e.g., `python`). For example:
   ```sh
   cp ~/.pyenv/shims/python ~/.pyenv/shims/pip
   ```
   However, this approach is a workaround and may not always work as expected. It's better to ensure that `pyenv` is correctly managing the shims.

5. **Install the Correct Python Version:**
   Make sure that the desired Python version is installed and set as the global or local version using `pyenv`. For example:
   ```sh
   pyenv install 3.9.7
   pyenv global 3.9.7
   ```

6. **Verify the `pip` Version:**
   After ensuring that the shims are correctly set up and `pyenv` is managing the correct Python version, verify the `pip` version:
   ```sh
   which pip
   pip --version
   ```

If the `pip` shim still does not appear after following these steps, there might be an issue with your `pyenv` installation. You can try reinstalling `pyenv` or seeking further assistance from the `pyenv` community or documentation.

By following these steps, you should be able to ensure that `pip` points to the version managed by `pyenv` rather than the system version.