  }
}
void microkernel (float i){
   init_kernel(3.0);
   for(int i=1; ifunc
//    pool[i]->func()
microkernel(3);
void kernelLoop(void){
int i=0;
for(;;){
//Do we have any process to execute?
if (start != end){
printf("Ite. %d, Slot. %d: ", i, start);
//check if there is need to reschedule
if (pool[start]->Func() == REPEAT){
kernelAddProc(pool[start]);
}
//prepare to get the next process; 
start = (start+1)%POOL_SIZE;
        i++; // only for debug;
}
}
}
microkernel(3);
void tst1(void){
   printf("Process 1\n");
   return REPEAT;
}
void tst2(void){
   printf("Process 2\n");
   return SUCCESS;
}
void tst3(void){
   printf("Process 3\n");
   return REPEAT;
}
● Presenting the new processes
microkernel(3);
void main(void){
//declaring the processes
process p1 = {tst1};
process p2 = {tst2};
process p3 = {tst3};
kernelInit();
//Test if the process was added successfully
if (kernelAddProc(p1) == SUCCESS){
printf("1st process added\n");}
if (kernelAddProc(p2) == SUCCESS){
printf("2nd process added\n");}
if (kernelAddProc(p3) == SUCCESS){
printf("3rd process added\n");}
kernelLoop();
}
microkernel(3);
Console Output:
---------------------------
1st process added
2nd process added
3rd process added
Ite. 0, Slot. 0: Process 1
Ite. 1, Slot. 1: Process 2
Ite. 2, Slot. 2: Process 3
Ite. 3, Slot. 3: Process 1
Ite. 4, Slot. 0: Process 3
Ite. 5, Slot. 1: Process 1
Ite. 6, Slot. 2: Process 3
Ite. 7, Slot. 3: Process 1
Ite. 8, Slot. 0: Process 3
...
---------------------------
● Notes:
● Only process 1 
and 3 are 
repeating
● The user don't 
notice that the 
pool is finite*
microkernel(3);
//third implementation
//time conditions added
kernel_example(3+3/10);
microkernel(3);
● The first modification is to add one counter 
to each process
//process struct
typedef struct {
ptrFunc function;
int period;
int start;
} process;
microkernel(3);
● We must create an function that will run on 
each timer interrupt updating the counters
void isr(void) interrupt 1{
unsigned char i;
i = ini;
while(i!=fim){
if((pool[i].start)>(MIN_INT)){
pool[i].start--;
}
i = (i+1)%SLOT_SIZE;
}
}
microkernel(3);
● The add process function will be the 
responsible to initialize correctly the fields
char AddProc(process newProc){
//checking for free space
if ( ((end+1)%SLOT_SIZE) != start){
pool[end] = newProc;
//increment start timer with period
pool[end].start += newProc.period;
end = (end+1)%SLOT_SIZE;
return SUCCESS;
}
return FAIL;
}
microkernel(3);
if (start != end){
//Finding the process with the smallest start
j = (start+1)%SLOT_SIZE;
next = start;
while(j!=end){
if (pool[j].start 0){
}//great place to use low power mode
if ( (*(pool[ini].function))() == REPEAT ){
AddProc(&(vetProc[ini]));
}
ini = (ini+1)%SLOT_SIZE;
}
microkernel(3);
running_the_kernel(3.4);
“My board's programming” also works =)
void dd_controler (float i){
   device_driver_pattern(5.1);
   controller_engine(5.2);
   isr_abstract_layer(5.3);
   driver_callback(5.4);
}
device_driver_controller(4);
device_driver_pattern(5.1);
device_driver_controller(4);
● What is a driver?
● An interface layer that translate hardware to 
software
● Device driver standardization
● Fundamental for dynamic drivers load
device_driver_controller(4);
● Parameters problem
● The kernel must be able to communicate in the 
same way with all drivers
● Each function in each driver have different 
types and quantities of parameters 
● Solution
● Pointer to void
device_driver_controller(4);
● Driver example
Generic Device Driver
drvGeneric
-thisDriver: driver
-this_functions: ptrFuncDrv[ ]
-callbackProcess: process*
+availableFunctions: enum = {GEN_FUNC_1, GEN_FUNC_2 }
-init(parameters:void*): char
-genericDrvFunction(parameters:void*): char
-genericIsrSetup(parameters:void*): char
+getDriver(): driver*
driver
+drv_id: char
+functions: ptrFuncDrv[ ]
+drv_init: ptrFuncDrv
device_driver_controller(4);
controller_engine(5.2);
device_driver_controller(4);
● Device Driver Controller
● Used as an interface layer between the kernel 
and the drivers
● Can “discover” all available drivers (statically or 
dynamically)
● Store information about all loaded drivers
● Responsible to interpret the messages received 
from the kernel
device_driver_controller(4);
char initDriver(char newDriver) {
  char resp = FAIL;
  if(dLoaded drv_init(&newDriver);
    dLoaded++;
  }
  return resp;
}
device_driver_controller(4);
char callDriver(char drv_id,
                char func_id,
                void *param) {
   char i;
   for (i = 0; i drv_id) {
         return 
  drivers[i]->func[func_id].func_ptr(param);
      }
   }
   return DRV_FUNC_NOT_FOUND;
}
device_driver_controller(4);
void main(void) {
//system initialization
//kernel also initializate the controller
kernelInitialization(); 
initDriver(DRV_LCD);
callDriver(DRV_LCD, LCD_CHAR, 'D');
callDriver(DRV_LCD, LCD_CHAR, 'E');
callDriver(DRV_LCD, LCD_CHAR, 'F');
callDriver(DRV_LCD, LCD_CHAR, 'C');
callDriver(DRV_LCD, LCD_CHAR, '0');
callDriver(DRV_LCD, LCD_CHAR, 'N');
callDriver(DRV_LCD, LCD_CHAR, '@');
callDriver(DRV_LCD, LCD_CHAR, 'L');
callDriver(DRV_LCD, LCD_CHAR, 'A');
callDriver(DRV_LCD, LCD_CHAR, 'S');
}
device_driver_controller(4);
Where are the defines?
device_driver_controller(4);
● In order to simplify the design, each driver 
build its function define enum.
● The controller builds a driver define enum
enum {
    LCD_COMMAND, LCD_CHAR, LCD_INTEGER, LCD_END
};
enum {
    DRV_INTERRUPT, DRV_TIMER, DRV_LCD, DRV_END
};
device_driver_controller(4);
isr_abstract_layer(5.3);
device_driver_controller(4);
● Interrupts are closely related to hardware
● Each architecture AND compiler pose a 
different programming approach
● How to hide this from programmer?
//SDCC compiler way
void isr(void) interrupt 1{
thisInterrupt();
}
//C18 compiler way
void isr (void){
thisInterrupt();
} 
#pragma code highvector=0x08
void highvector(void){
_asm goto isr _endasm
}
#pragma code 
device_driver_controller(4);
//Inside drvInterrupt.c
//defining the pointer to use in ISR callback
typedef void (*intFunc)(void);
//store the pointer to ISR here
static intFunc thisInterrupt;
//Set interrupt function to be called
char setInterruptFunc(void *parameters) {
thisInterrupt = (intFunc) parameters;
return SUCESS;
}
device_driver_controller(4);
//Interrupt function set without knowing hard/compiler issues
void timerISR(void) {
    callDriver(DRV_TIMER, TMR_RESET, 1000);
    kernelClock();
}
void main (void){
    kernelInit();
    initDriver(DRV_TIMER);
    initDriver(DRV_INTERRUPT);
    callDriver(DRV_TIMER, TMR_START, 0);
    callDriver(DRV_TIMER, TMR_INT_EN, 0);
    callDriver(DRV_INTERRUPT, INT_TIMER_SET, (void*)timerISR);
    callDriver(DRV_INTERRUPT, INT_ENABLE, 0);
    kernelLoop();
}
device_driver_controller(4);
driver_callback(5.4);
device_driver_controller(4);
How to make efficient use of CPU peripherals 
without using pooling or hard-coding the 
interrupts?
device_driver_controller(4);
Callback functions
device_driver_controller(4);
● Callback functions resemble events in high 
level programming
● e.g.: When the mouse clicks in the button X, 
please call function Y.
● The desired hardware must be able to rise 
an interrupt
● Part of the work is done under interrupt 
context, preferable the faster part
Generic Driver
Interrupt Driver
Setup ISR
callback
Interrupt Driver
Generic Driver
Call ISR
callback
Kernel
Add callback
Process
Kernel
Main Process
Execute process
Generic Driver
Request data
(callback passed)
Kernel
Callback
Process
Execute process
Main
Program flow
Interrupt
context
device_driver_controller(4);
device_driver_controller(4);
//********** Excerpt from drvAdc.c **********
//  called from setup time to enable ADC interrupt
//  and setup ADC ISR callback
char enableAdcInterrup(void* parameters){
callDriver(DRV_INTERRUPT,INT_ADC_SET,(void*)adcISR);
BitClr(PIR1,6);
return FIM_OK;
}
//********** Excerpt from drvInterrupt.c **********
//  store the pointer to the interrupt function
typedef void (*intFunc)(void);
static intFunc adcInterrupt;
//  function to set ADC ISR callback for latter use
char setAdcInt(void *parameters) {
adcInterrupt = (intFunc)parameters;
return FIM_OK;
}
device_driver_controller(4);
//********** Excerpt from main.c **********
//  Process called by the kernel
char adc_func(void) {
    //creating callback process
static process proc_adc_callback = {adc_callback, 0, 0};
callDriver(DRV_ADC,ADC_START,&proc_adc_callback);
return REPEAT;
}
//********** Excerpt from drvAdc.c **********
//function called by the process adc_func (via drv controller)
char startConversion(void* parameters){
callBack = parameters;
ADCON0 |= 0b00000010;
 //start conversion
return SUCCESS;
}
device_driver_controller(4);
//********** Excerpt from drvInterrupt.c **********
//interrupt function
void isr(void) interrupt 1 {
if (BitTst(INTCON, 2)) { //Timer overflow
}
if (BitTst(PIR1, 6)) {   //ADC conversion finished
//calling ISR callback stored
adcInterrupt();
}
}
//********** Excerpt from drvAdc.c **********
//ADC ISR callback function
void adcISR(void){
value = ADRESH;
value <<= 8;
value += ADRESL;
BitClr(PIR1,6);
kernelAddProc(callBack);
}
device_driver_controller(4);
//********** Excerpt from main.c **********
//callback function started from the kernel
char adc_callback(void) {
unsigned int resp;
//getting the converted value
callDriver(DRV_ADC,ADC_LAST_VALUE,&resp);
//changing line and printing on LCD
callDriver(DRV_LCD,LCD_LINE,1);
callDriver(DRV_LCD,LCD_INTEGER,resp);
return SUCCESS;
}
My board's programming!
“Don't Reinvent The Wheel, Unless You Plan 
on Learning More About Wheels”
Jeff Atwood