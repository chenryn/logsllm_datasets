title:Ensuring high-quality randomness in cryptographic key generation
author:Henry Corrigan-Gibbs and
Wendy Mu and
Dan Boneh and
Bryan Ford
Ensuring High-Quality Randomness
in Cryptographic Key Generation
Henry Corrigan-Gibbs
Stanford University
∗
Wendy Mu
Stanford University
PI:EMAIL
PI:EMAIL
Dan Boneh
Stanford University
Bryan Ford
Yale University
PI:EMAIL
PI:EMAIL
ABSTRACT
The security of any cryptosystem relies on the secrecy of the
system’s secret keys. Yet, recent experimental work demon-
strates that tens of thousands of devices on the Internet use
RSA and DSA secrets drawn from a small pool of candidate
values. As a result, an adversary can derive the device’s
secret keys without breaking the underlying cryptosystem.
We introduce a new threat model, under which there is a
systemic solution to such randomness ﬂaws. In our model,
when a device generates a cryptographic key, it incorporates
some random values from an entropy authority into its cryp-
tographic secrets and then proves to the authority, using
zero-knowledge-proof techniques, that it performed this op-
eration correctly. By presenting an entropy-authority-signed
public-key certiﬁcate to a third party (like a certiﬁcate au-
thority or SSH client), the device can demonstrate that its
public key incorporates randomness from the authority and
is therefore drawn from a large pool of candidate values.
Where possible, our protocol protects against eavesdrop-
pers, entropy authority misbehavior, and devices attempt-
ing to discredit the entropy authority.
To demonstrate
the practicality of our protocol, we have implemented and
evaluated its performance on a commodity wireless home
router. When running on a home router, our protocol in-
curs a 1.7× slowdown over conventional RSA key generation
and it incurs a 3.6× slowdown over conventional EC-DSA
key generation.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and protection; C.2.2 [Computer-Communication
Networks]: Network Protocols—Applications; E.3 [Data
Encryption]: Public key cryptosystems
∗Work conducted while author was a staﬀ member at Yale
University.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516680.
Keywords
entropy authority; cryptography; key generation; RSA; DSA;
entropy; randomness
1.
INTRODUCTION
A good source of randomness is crucial for a number of
cryptographic operations. Public-key encryption schemes
use randomness to achieve chosen-plaintext security, key-
exchange algorithms use randomness to establish secret ses-
sion keys, and commitment schemes use randomness to hide
the committed value. The security of these schemes relies on
the unpredictability of the random input values, so when the
“random” inputs are not really random, dire security failures
result [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
26, 29, 32, 41].
Although the dangers of weak randomness have been part
of the computer security folklore for years [26], entropy fail-
ures are still commonplace. In 2008, a single mistaken patch
caused the OpenSSL distribution in all Debian-based oper-
ating systems to use only the process ID (plus a few other
easy-to-guess values) as the seed for its pseudo-random num-
ber generator. This bug caused aﬀected machines to select a
1024-bit RSA modulus from a pool of fewer than one million
values, rather than the near-21000 possible values [41]. By
replaying the key generation process using each of the one
million possible PRNG seeds, an adversary could recover the
secret key corresponding to one of these weak public keys in
a matter or hours or days.
Recent surveys [29, 32] of SSH and TLS public keys on
the Internet demonstrate that hardware devices with poorly
seeded random number generators have led to a prolifer-
ation of weak cryptographic keys. During the drafting of
this paper, NetBSD maintainers discovered a bug caused by
a “misplaced parenthesis” that could have caused NetBSD
machines to generate cryptographic keys incorporating as
few as 32 or 64 bits of entropy, instead of the 100+ ex-
pected bits [36]. Even more recently, a PRNG initialization
bug in the Android operating system could have caused ap-
plications using the system to generate weak cryptographic
keys [31].
Randomness failures continue to haunt cryptographic soft-
ware for a number of reasons: the randomness “stack” in a
modern operating system [39] is large and complex, there is
no simple way to test whether a random number generator
is really generating random numbers, and (at least in the
685context of cryptographic keys) there has never been a sys-
temic solution to the randomness problem. The response to
entropy failures has traditionally been ad hoc: each device
manufacturer or software vendor patches RNG-related bugs
in its own implementation (once discovered), without de-
ploying techniques to prevent similar failures in the future.
The quantity and severity of randomness failures suggests
that this “ﬁx the implementation” approach is grossly insuf-
ﬁcient.
We oﬀer the ﬁrst systemic solution to the entropy problem
in cryptographic key generation for public-key cryptosys-
tems. In our protocol, a device generating a cryptographic
keypair fetches random values from an entropy authority
and incorporates these values into its cryptographic secrets.
The device can later prove to third parties (e.g., a certiﬁ-
cate authority or an SSH client) that the device’s secrets
incorporate the authority’s random values, thus guarantee-
ing that the device’s cryptographic keys are selected from
a large enough pool of candidate values. Unlike certiﬁcate
authorities in today’s Internet, our entropy authorities are
not trusted third parties: if the device has a strong entropy
source, a malicious entropy authority learns no useful infor-
mation about the device’s secret key. We present versions of
our protocol for RSA and DSA key generation and we oﬀer
proofs of security for each.
A subtlety of our solution is the threat model: under a
traditional “global passive adversary” model, the adversary
can completely simulate the view of a device that has a very
weak entropy source. Thus, under the global passive adver-
sary model, a device with a weak entropy source has no hope
of generating strong keys. We propose an alternate threat
model, in which the adversary can observe all communica-
tion except for one initial communication session between
the device and the entropy authority. Under this more lim-
ited adversary model, which is realistic in many deployment
scenarios, we can take advantage of an entropy authority to
ensure the randomness of cryptographic keys.
The key generation protocols we present are useful both
for devices with strong and weak entropy sources. In par-
ticular, if the device has a strong entropy source (the device
can repeatedly sample from the uniform distribution over a
large set of values), running the protocol never weakens the
device’s cryptographic keys. In contrast, if the device has
a weak or biased entropy source, running the protocol can
dramatically strengthen the device’s keys by ensuring that
its keys incorporate suﬃcient randomness. The device need
not know whether it has a strong or weak entropy source:
the same protocol is used in both cases.
A recent survey of public keys [29] suggests that embed-
ded devices are responsible for generating the majority of
weak cryptographic keys on the Internet. To demonstrate
that our protocols are practical even on this type of com-
putationally limited network device, we have evaluated the
protocols on a $70 Linksys home router running the dd-
wrt [22] operating system. Our RSA key generation protocol
incurs less than a 2× slowdown on the Linksys router when
generating a 2048-bit key, and our RSA and DSA protocols
incur no more than 2 seconds of slowdown on a laptop and a
workstation. The DSA version of our protocol is compatible
with both elliptic-curve and ﬁnite-ﬁeld groups. Our proto-
cols generate standard RSA and DSA keys which are, for a
given bit-length, as secure as their conventionally generated
counterparts.
In prior work, Juels and Guajardo [30] present a proto-
col in which a possibly malicious device generates an RSA
key in cooperation with a certiﬁcate authority. Their proto-
col prevents a device from generating an ill-formed keypair
(e.g., an RSA modulus that is the product of more than two
primes). We consider a diﬀerent threat model. We ensure
that a device samples its keys from a distribution with high
min-entropy, but we do not prevent the device from gen-
erating malformed keys. Under this new threat model, we
achieve roughly a 25× performance improvement over the
protocol of Juels and Guajardo (as measured by the number
of modular exponentiations that the device must compute).
Section 7 compares the two protocols and discusses other
related work.
After introducing our threat model in Section 2, we de-
scribe our key generation protocols in Section 3 and present
security proofs in Section 4. Section 5 summarizes our eval-
uation results and Section 6 discusses issues related to inte-
grating our protocols with existing systems.
1.1 Why Other Solutions Are Insufﬁcient
Before describing our protocol in detail, we discuss a few
other possible, but unsatisfactory, ways to prevent networked
devices from using weak cryptographic keys.1
Possible Solution #1: Fix the implementation. One
possible solution to the weak key problem is to simply make
sure that cryptography libraries properly incorporate ran-
dom values into the cryptographic secrets that they produce.
Unfortunately, bugs and bad implementations are a fact of
life in the world of software, and the subtleties of random
number generation make randomness bugs particularly com-
mon. Implementations that seed their random number gen-
erators with public or guessable values (e.g., time, process
ID, or MAC address) [8, 15, 16, 18, 18], implementations
that use weak random number generators [10, 11, 12, 20,
21], and implementations without a good source of environ-
mental entropy [29] are all vulnerable.
The complexity of generating cryptographically strong ran-
dom numbers, the overwhelming number of randomness fail-
ures in deployed software, and the diﬃculty of detecting
these failures during testing all indicate that “ﬁx the imple-
mentation” is an insuﬃcient solution to the weak key prob-
lem. Given that some implementations will be buggy, there
should be a way to assure clients that their TLS and SSH
servers are using strong keys, even if the client suspects that
the servers do not have access to a good source of random
values.
Possible Solution #2: Simple entropy server. A sec-
ond possible solution would be to have devices fetch some
random values from an “entropy sever” and incorporate these
values (along with some random values that the device picks)
into the device’s cryptographic secrets. As long as the ad-
versary cannot observe the device’s communication with the
server, the server would provide an eﬀective source of envi-
ronmental entropy.
One problem with this approach comes in attributing blame
If a device using an entropy server produces
for failures.
1By weak keys we mean keys sampled from a distribution
with much less min-entropy than the user expects. For ex-
ample, a 224-bit EC-DSA key sampled from a distribution
with only 20 bits of min-entropy is weak.
686weak keys, the device might blame the entropy server for
providing it with weak random values. In turn, the entropy
server could claim that it provided the device with strong
random values but that the device failed to incorporate them
into the device’s cryptographic secrets. Without some addi-
tional protocol, a third party will not be able to deﬁnitively
attribute the randomness failure to either the device or the
entropy server.
Possible Solution #3: Key database. A third possi-
ble technique to prevent devices from using weak keys would
be to deploy a “key database” that contains a copy of every
public key on the Internet. A non-proﬁt organization could
run this database, much as the Electronic Frontier Founda-
tion maintains the SSL Observatory [23], a static database
of public keys on the Internet.
Whenever a device with a potentially weak entropy source
generates a new keypair, the device would send its new pub-
lic key to the key database. If the database already contains
that key (or if the database contains an RSA modulus that
shares a factor with the new key), the device would gener-
ate a fresh key and submit it to the database. The device
would continue this generate-and-submit process until ﬁnd-
ing a unique key. At the end of the process, the device would
be guaranteed to have a key that is unique, at least amongst
the set of keys in the database.
Unfortunately, this proposed solution would obscure the
entropy problem without ﬁxing it. An attacker could replay
the entire key generation process using the known initial
state of a device with a weak entropy source to learn the
secret keys of that device. By creating a centralized database
of (possibly weak) keys, such a solution would make it easier
for attackers to ﬁnd and compromise weak keys.
2. SYSTEM OVERVIEW
Our proposed solution to the weak key problem, pictori-
ally represented in Figure 1, takes place between a device, an
entropy authority, a certiﬁcate authority2 (optionally), and
a client. We describe the roles of each of these participants
before outlining our threat model and the security properties
of the scheme.
2.1 Participants
Device. The device is the entity generating the RSA or
DSA keypair that we want to ensure is suﬃciently random,
even if the device does not have access to a strong internal
entropy source. The device might be an embedded device
(e.g., a commodity wireless home router), or it might be a
full-ﬂedged server. The device could use the keypair it gen-
erates to secure HTTPS sessions and to authenticate itself
in SSH sessions.
Entropy authority (EA). The entropy authority is the
participant responsible for ensuring that a device’s keypair is
selected with enough randomness (is sampled independently
from a distribution with high enough min-entropy). Just
as a certiﬁcate authority veriﬁes the identifying information
(name, address, etc.) on a user’s public key, the entropy
authority veriﬁes the randomness of a user’s public key.
2IETF documents [5] use the term certiﬁcation authority but
we will follow common usage and use certiﬁcate authority.
Figure 1: Overview of the protocol participants. (1)
The device fetches random values from the entropy
authority, proves to the authority that its key in-
corporates these values, and obtains a signature on
the key from the EA. (2) The device submits its
EA-signed public key to the certiﬁcate authority for
signing. (3) The device presents an EA-signed key
to a connecting client to prove that its keypair in-