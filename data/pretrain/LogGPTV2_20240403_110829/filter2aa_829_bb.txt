Listing 10-24: A simple AmsiInitFailed patch
Evading EDR (Early Access) © 2023 by Matt Hand
198   Chapter 10
When it comes to patching, attackers commonly target AmsiScanBuffer(), 
the function responsible for passing buffer contents to the providers. 
Daniel Duggan describes this technique in a blog post, “Memory Patching 
AMSI Bypass,” where he outlines the steps an attacker’s code must take 
before performing any truly malicious activity:
 1. Retrieve the address of AmsiScanBuffer() within the amsi.dll currently 
loaded into the process.
 2. Use kernel32!VirtualProtect() to change the memory protections to 
read-write, which allows the attacker to place the patch.
 3. Copy the patch into the entry point of the AmsiScanBuffer() function.
 4. Use kernel32!VirtualProtect() once again to revert the memory protec-
tion back to read-execute.
The patch itself takes advantage of the fact that, internally, 
AmsiScanBuffer() returns E_INVALIDARG if its initial checks fail. These checks 
include attempts to validate the address of the buffer to be scanned. 
Duggan’s code adds a byte array that represents the assembly code in 
Listing 10-25. After this patch, when AmsiScanBuffer() is executed, it will 
immediately return this error code because the actual instruction that 
made up the original function has been overwritten.
mov eax, 0x80070057 ; E_INVALIDARG
ret
Listing 10-25: Error code returned to the caller of AmsiScanBuffer() after the patch
There are many variations of this technique, all of which work very 
similarly. For example, an attacker may patch AmsiOpenSession() instead of 
AmsiScanBuffer(). They may also opt to corrupt one of the parameters passed 
into AmsiScanBuffer(), such as the buffer length or the context, causing AMSI 
to return E_INVALIDARG on its own.
Microsoft got wise to this evasion technique pretty quickly and took 
measures to defend against the bypass. One of the detections it imple-
mented is based on the sequence of opcodes that make up the patch we’ve 
described. However, attackers can work around these detections in many 
ways. For example, they can simply modify their assembly code to achieve 
the same result, moving 0x80070057 into EAX and returning, in a way that is 
less direct. Consider the example in Listing 10-26, which breaks up the 
value 0x80070057 instead of moving it into the register all at once.
xor eax, eax ; Zero out EAX
add eax, 0x7459104a
add eax, 0xbadf00d
ret
Listing 10-26: Breaking up hardcoded values to evade patch detection
Imagine that the EDR looks for the value 0x80070057 being moved 
into the EAX register. This evasion strategy would bypass its detection logic 
Evading EDR (Early Access) © 2023 by Matt Hand
Antimalware Scan Interface   199
because the value is never directly referenced. Instead, it is broken up into 
two values, which happen to add up to the required value.
A Patchless AMSI Bypass
In April 2022, Ceri Coburn unveiled a technique for bypassing AMSI with-
out patching amsi.dll, an activity many EDR vendors have begun to monitor. 
Coburn’s technique doesn’t require fork&run either, allowing the attacker 
to stay in their original process.
The technique is quite clever. First, the attacker obtains a function 
pointer to amsi!AmsiScanBuffer() either from the loaded amsi.dll or by forcing 
it to load into the process through a call to LoadLibrary(). Next, they register 
a vectored exception handler via kernel32!AddVectoredExceptionHandler(). This 
handler allows developers to register a function that monitors and manages 
all exceptions in the application. Finally, they set a hardware breakpoint on 
the address of AmsiScanBuffer() by modifying the current thread’s debug reg-
isters (DR0, DR6, and DR7).
When the attacker executes their .NET code inline, the system will 
eventually call AmsiScanBuffer(), triggering the hardware breakpoint and 
invoking the vectored exception handler. This function takes the current 
thread context and updates the registers to match the values set when AMSI 
doesn’t detect malicious content, namely a return value of 0 (S-OK) in RAX 
and a result of 0 (AMSI_RESULT_CLEAN) in RSP+48.
Additionally, it pulls the return address from the stack (RSP) and points 
the instruction pointer (RIP) back to the caller of the AmsiScanBuffer() func-
tion. Next, it walks the stack pointer back to its position from before the 
call to AmsiScanBuffer(), clears the hardware breakpoint, and returns the 
EXCEPTION_CONTINUE_EXECUTION code. Execution resumes at the point at which 
the breakpoint occurred. Now Windows will take the attacker’s modified 
thread context and continue execution with our changes in place, pass-
ing the falsified values back to the caller and letting the malicious code 
continue undetected.
Conclusion
AMSI is an incredibly important piece of the host-based detection puzzle. 
Its integration into software such as PowerShell, .NET, and Microsoft Office 
means that it sits inline of many adversary activities, from initial access 
through post-exploitation. AMSI has been heavily researched due to its 
tremendous impact on offensive operations at the time of its release. Today, 
AMSI fills more of a supplementary role, as nearly countless evasion strate-
gies exist for it. However, vendors have caught on to this and have begun to 
invest in monitoring for common AMSI evasion strategies, then using those 
as indicators of adversary activity themselves.
Evading EDR (Early Access) © 2023 by Matt Hand
Evading EDR (Early Access) © 2023 by Matt Hand
In 2012, adversaries launched the Zacinlo 
adware campaign, whose rootkit, a member 
of the Detrahere family, includes a number 
of self-protection features. One of the most 
interesting is its persistence mechanism.
Similar to the callback routines discussed in Chapters 3 through 5, 
drivers can register callback routines called shutdown handlers that let them 
perform some action when the system is shutting down. To ensure that 
their rootkit persisted on the system, the Zacinlo rootkit developers used 
a shutdown handler to rewrite the driver to disk under a new name and 
create new registry keys for a service that would relaunch the rootkit as a 
boot-start driver. If anyone made an attempt to clean the rootkit from the 
system, the driver would simply drop these files and keys, allowing it to per-
sist much more effectively.
While this malware is no longer prevalent, it highlights a large gap in 
protection software: the ability to mitigate threats that operate early in the 
boot process. To address this weakness, Microsoft introduced a new anti-
malware feature in Windows 8 that allows certain special drivers to load 
11
E A R LY  L AU NCH A N T IM A LWA R E 
DR I V E R S
Evading EDR (Early Access) © 2023 by Matt Hand
202   Chapter 11
before all other boot-start drivers. Today, nearly all EDR vendors leverage 
this capability, called Early Launch Antimalware (ELAM), in some way, as it 
offers the ability to affect the system extremely early in the boot process. 
It also provides access to specific types of system telemetry not available to 
other components.
This chapter covers the development, deployment, and boot-start pro-
tection functionality of ELAM drivers, as well as strategies for evading these 
drivers. In Chapter 12, we’ll cover the telemetry sources and process protec-
tions available to vendors that deploy ELAM drivers to hosts.
How ELAM Drivers Protect the Boot Process
Microsoft lets third-party drivers load early in the boot process so that soft-
ware vendors can initialize those that are critical to the system. However, 
this is a double-edged sword. While it provides a useful way to guarantee 
the loading of critical drivers, malware authors too can insert their root-
kits into these early-load-order groups. If a malicious driver is able to load 
before antivirus or other security-related drivers, it could tamper with the 
system to keep those protection drivers from working as intended or pre-
vent them from loading in the first place.
To avoid these attacks, Microsoft needs a way to load ELAM drivers ear-
lier in the boot process, before any malicious driver can load. The primary 
function of an ELAM driver is to receive notifications when another driver 
attempts to load during the boot process, then decide whether to allow it to 
load. This validation process is part of Trusted Boot, the Windows security 
feature responsible for validating the digital signature of the kernel and 
other components, like drivers, and only vetted antimalware vendors can 
participate in it.
To publish an ELAM driver, developers must be part of the Microsoft 
Virus Initiative (MVI), a program open to antimalware companies that 
produce security software for the Windows operating system. As of this 
writing, in order to qualify to participate in this program, vendors must 
have a positive reputation (assessed by conference participation and 
industry-standard reports, among other factors), submit their applications 
to Microsoft for performance testing and feature review, and provide their 
solution for independent testing. Vendors must also sign a nondisclosure 
agreement, which is likely why those with knowledge of this program have 
been tight-lipped.
The Microsoft Virus Initiative and ELAM are closely tied. To create a 
production driver (one that can be deployed to systems not in test-signing 
mode), Microsoft must countersign the driver. This countersignature uses 
a special certificate, visible in the ELAM driver’s digital signature informa-
tion under Microsoft Windows Early Launch Anti-malware Publisher, as shown 
in Figure 11-1. This countersignature is available to participants of the 
Microsoft Virus Initiative program only.
Without this signature, the driver won’t be able to load as part of the 
Early-Launch service group discussed in “Loading an ELAM Driver” on 
Evading EDR (Early Access) © 2023 by Matt Hand
Early Launch Antimalware Drivers   203
page XX. For this reason, the examples in this chapter target a system with 
test-signing enabled, allowing us to ignore the countersigning require-
ment. The process and code described here are the same as for production 
ELAM drivers.
Developing ELAM Drivers
In many ways, ELAM drivers resemble the drivers covered in the previ-
ous chapters; they use callbacks to receive information about system 
events and make security decisions on the local host. ELAM drivers 
focus  specifically on prevention rather than detection, however. When an 
ELAM driver is started early in the boot process, it evaluates every boot-
start driver on the system and either approves or denies the load based 
on its own internal malware-signature data and logic, as well as a system 
policy that dictates the host’s risk tolerance. This section covers the pro-
cess of developing an ELAM driver, including its internal workings and 
decision logic.
Registering Callback Routines
The first ELAM-specific action the driver takes is to register its call-
back routines. ELAM drivers commonly use both registry and boot-
start callbacks. The registry callback functions, registered with 
nt!CmRegisterCallbackEx(), validate the configuration data of the driv-
ers being loaded in the registry, and we covered them extensively in 
Chapter 5, so we won’t revisit them here.
More interesting is the boot-start callback routine, registered with  
nt!IoRegisterBootDriverCallback(). This callback provides the ELAM driver 
with updates about the status of the boot process, as well as information 
about each boot-start driver being loaded. Boot-start callback functions 
are passed to the registration function as a PBOOT_DRIVER_CALLBACK_FUNCTION 
and must have a signature matching the one shown in Listing 11-1.
Figure 11-1: Microsoft’s countersignature  
on an ELAM driver
Evading EDR (Early Access) © 2023 by Matt Hand
204   Chapter 11
void BootDriverCallbackFunction(
 PVOID CallbackContext,
 BDCB_CALLBACK_TYPE Classification,
 PBDCB_IMAGE_INFORMATION ImageInformation
)
Listing 11-1: An ELAM driver callback signature
During the boot process, this callback routine receives two different 
types of events, dictated by the value in the Classification input parameter. 
These are defined in the BDCB_CALLBACK_TYPE enum shown in Listing 11-2.
typedef enum _BDCB_CALLBACK_TYPE {
BdCbStatusUpdate,
BdCbInitializeImage,
} BDCB_CALLBACK_TYPE, *PBDCB_CALLBACK_TYPE;
Listing 11-2: The BDCB_CALLBACK_TYPE enumeration
The BdCbStatusUpdate events tell the ELAM driver how far the system has 
gotten in the process of loading boot-start drivers so that the driver may act 
appropriately. It can report any of three states, shown in Listing 11-3.
typedef enum _BDCB_STATUS_UPDATE_TYPE {
 BdCbStatusPrepareForDependencyLoad,
 BdCbStatusPrepareForDriverLoad,
 BdCbStatusPrepareForUnload
} BDCB_STATUS_UPDATE_TYPE, *PBDCB_STATUS_UPDATE_TYPE;
Listing 11-3: The BDCB_STATUS_UPDATE_TYPE values
The first of these values indicates that the system is about to load driver 
dependencies. The second indicates that the system is about to load boot-
start drivers. The last indicates that all boot-start drivers have been loaded, 
so the ELAM driver should prepare to be unloaded.
During the first two states, the ELAM driver will receive another type 
of event that correlates to the loading of a boot-start driver’s image. This 
event, passed to the callback as a pointer to a BDCB_IMAGE_INFORMATION struc-
ture, is defined in Listing 11-4.
typedef struct _BDCB_IMAGE_INFORMATION {
BDCB_CLASSIFICATION Classification;
ULONG ImageFlags;
UNICODE_STRING ImageName;
UNICODE_STRING RegistryPath;
UNICODE_STRING CertificatePublisher;
UNICODE_STRING CertificateIssuer;
PVOID ImageHash;
PVOID CertificateThumbprint;
ULONG ImageHashAlgorithm;
ULONG ThumbprintHashAlgorithm;
ULONG ImageHashLength;
Evading EDR (Early Access) © 2023 by Matt Hand
Early Launch Antimalware Drivers   205
ULONG CertificateThumbprintLength;
} BDCB_IMAGE_INFORMATION, *PBDCB_IMAGE_INFORMATION;
Listing 11-4: The BDCB_IMAGE_INFORMATION structure definition
As you can see, this structure contains the bulk of the information 
used to decide whether some driver is a rootkit. Most of it relates to the 
image’s digital signature, and it notably omits a few fields you might expect 
to see, such as a pointer to the contents of the image on disk. This is due in 
part to the performance requirements imposed on ELAM drivers. Because 
they can affect system boot times (as they’re initialized every time Windows 
boots), Microsoft imposes a time limit of 0.5 ms for the evaluation of each 
boot-start driver and 50 ms for the evaluation of all boot-start drivers 
together, within a 128KB memory footprint. These performance require-
ments limit what an ELAM driver can do; for instance, it is too time- 
intensive to scan the contents of an image. Therefore, developers typically 
rely on static signatures to identify malicious drivers.
During the boot process, the operating system loads the signatures 
in use by ELAM drivers into an early-launch drivers registry hive under 
HKLM:\ELAM\, followed by the vendor’s name (for example, HKLM:\
ELAM\Windows Defender for Microsoft Defender, shown in Figure 11-2). This 
hive is unloaded later in the boot process and is not present in the registry 
by the time users start their sessions. If the vendor wishes to update signa-
tures in this hive, they may do so from user mode by mounting the hive 
containing the signatures from %SystemRoot%\System32\config\ELAM and 
modifying their key.
Figure 11-2: Microsoft Defender in the ELAM registry hive
Vendors can use three values of the type REG_BINARY in this key: Measured, 
Policy, and Config. Microsoft hasn’t published formal public documentation 
about the purposes of these values or their differences. However, the com-
pany does state that the signature data blob must be signed and its integrity 
validated using Cryptography API: Next Generation (CNG) primitive crypto-
graphic functions before the ELAM driver begins making decisions regard-
ing the status of the boot-start driver.
Evading EDR (Early Access) © 2023 by Matt Hand
206   Chapter 11
No standard exists for how the signature blobs must be structured 
or used once the ELAM driver has verified their integrity. In case you’re 
interested, however, in 2018 the German Bundesamt für Sicherheit in der 
Informationstechnik (BSI) published its Work Package 5, which includes an 
excellent walk-through of how Defender’s wdboot.sys performs its own integ-
rity checks and parses its signature blocks.
If the cryptographic validation of the signature blob fails for any rea-
son, the ELAM driver must return the BdCbClassificationUnknownImage classifi-
cation for all boot-start drivers using its callback, as the signature data isn’t 
considered reliable and shouldn’t affect Measured Boot, the Windows feature 
that measures each boot component from the firmware to the drivers and 
stores the results in the Trusted Platform Module (TPM), where it can be 
used to validate the integrity of the host.
Applying Detection Logic
Once the ELAM driver has received the BdCbStatusPrepareForDriverLoad sta-
tus update and pointers to BDCB_IMAGE_INFORMATION structures for each boot-
load driver, it applies its detection logic using the information provided in 
the structure. Once it has made a determination, the driver updates the 
Classification member of the current image-information structure (not to 
be confused with the Classification input parameter passed to the callback 
function) with a value from the BDCB_CLASSIFICATION enumeration, defined 
in Listing 11-5.
typedef enum _BDCB_CLASSIFICATION {
BdCbClassificationUnknownImage,
BdCbClassificationKnownGoodImage,
BdCbClassificationKnownBadImage,
BdCbClassificationKnownBadImageBootCritical,
BdCbClassificationEnd,
} BDCB_CLASSIFICATION, *PBDCB_CLASSIFICATION;
Listing 11-5: The BDCB_CLASSIFICATION enumeration
Microsoft defines these values as follows, from top to bottom: the 
image hasn’t been analyzed, or a determination regarding its malicious-
ness can’t be made; the ELAM driver has found no malware; the ELAM 
driver detected malware; the boot-load driver is malware, but it is critical to 
the boot process; and the boot-load driver is reserved for system use. The 
ELAM driver sets one of these classifications for each boot-start driver until 
it receives the BdCbStatusPrepareForUnload status update instructing it to clean 
up. The ELAM driver is then unloaded.
Next, the operating system evaluates the classifications returned by 
each ELAM driver and takes action if needed. To determine which action 
to take, Windows consults the registry key HKLM:\System\CurrentControlSet\
Control\EarlyLaunch\DriverLoadPolicy, which defines the drivers allowed to 
run on the system. This value, read by nt!IopInitializeBootDrivers(), can be 
any of the options included in Table 11-1.
Evading EDR (Early Access) © 2023 by Matt Hand
Early Launch Antimalware Drivers   207
Table 11-1: Possible Driver Load-Policy Values
Value
Description
0
Good drivers only
1
Good and unknown drivers
3
Good, unknown, and bad but critical to 
the boot process (Default)
7
All drivers
The kernel (specifically, the Plug and Play manager) uses the classification 
specified by the ELAM driver to prevent any banned drivers from loading. All 
other drivers are allowed to load, and system boot continues as normal.
N O T E 
If the ELAM driver identifies a known malicious boot-start driver and is running 
on a system that leverages Measured Boot, developers must call tbs!Tbsi_Revoke_
Attestation(). What this function does is a bit technical; essentially, it extends a 
platform configuration register bank in the TPM, specifically PCR[12], by an unspeci-
fied value and then increments the TPM’s event counter, breaking trust in the secu-
rity state of the system.
An Example Driver: Preventing Mimidrv from Loading
The debugger output in Listing 11-6 shows debug messaging from an 
ELAM driver when it encounters a known malicious driver, Mimikatz’s 
Mimidrv, and prevents it from loading.
[ElamProcessInitializeImage] The following boot start driver is about to be initialized:
Image name: \SystemRoot\System32\Drivers\mup.sys
Registry Path: \Registry\Machine\System\CurrentControlSet\Services\Mup
Image Hash Algorithm: 0x0000800c
Image Hash: cf2b679a50ec16d028143a2929ae56f9117b16c4fd2481c7e0da3ce328b1a88f
Signer: Microsoft Windows