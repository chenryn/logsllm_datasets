## 对比特币走势进行预测我们都知道比特币的走势除了和历史数据以外，还和很多外界因素相关，比如用户的关注度，各国的政策，币圈之间是否打架等等。当然这些外界的因素不是我们这节课需要考虑的对象。假设我们只考虑比特币以往的历史数据，用 ARMA这个时间序列模型预测比特币的走势。比特币历史数据（从 2012-01-01 到 2018-10-31）可以从 GitHub上下载：。你能看到数据一共包括了 8 个字段，代表的含义如下：![](Images/aab5834b918ab5d411f0f4cc1ccabd65.png){savepage-src="https://static001.geekbang.org/resource/image/b0/36/b0db4047723ec5e649240e2a87196a36.png"}\我们的目标是构造 ARMA 时间序列模型，预测比特币（平均）价格走势。p 和 q参数具体选择多少呢？我们可以设置一个区间范围，然后选择 AIC 最低的 ARMA模型。我们梳理下整个项目的流程：![](Images/93d5f72dff08284f0cc51d762a6ce38d.png){savepage-src="https://static001.geekbang.org/resource/image/95/1e/95f8294c1f4805b86f9947178499181e.jpg"}\首先我们需要加载数据。在准备阶段，我们需要先探索数据，采用数据可视化方式查看比特币的历史走势。按照不同的时间尺度（天，月，季度，年）可以将数据压缩，得到不同尺度的数据，然后做可视化呈现。这4 个时间尺度上，我们选择月作为预测模型的时间尺度，相应的，我们选择Weighted_Price 这个字段的数值作为观察结果，在原始数据中，Weighted_Price对应的是比特币每天的平均价格，当我们以"月"为单位进行压缩的时候，对应的Weighted_Price 得到的就是当月的比特币平均价格。压缩代码如下：    df_month = df.resample('M').mean()最后在预测阶段创建 ARMA 时间序列模型。我们并不知道 p 和 q取什么值时，模型最优，因此我们可以给它们设置一个区间范围，比如都是range(0,3)，然后计算不同模型的 AIC 数值，选择最小的 AIC 数值对应的那个ARMA 模型。最后用这个最优的 ARMA 模型预测未来 8个月的比特币平均价格走势，并将结果做可视化呈现。基于这个流程，具体代码如下：    
# -*- coding: utf-8 -*-
# 比特币走势预测，使用时间序列 ARMAimport numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom statsmodels.tsa.arima_model import ARMAimport warningsfrom itertools import productfrom datetime import datetimewarnings.filterwarnings('ignore')
# 数据加载df = pd.read_csv('./bitcoin_2012-01-01_to_2018-10-31.csv')
# 将时间作为 df 的索引df.Timestamp = pd.to_datetime(df.Timestamp)df.index = df.Timestamp
# 数据探索print(df.head())
# 按照月，季度，年来统计df_month = df.resample('M').mean()df_Q = df.resample('Q-DEC').mean()df_year = df.resample('A-DEC').mean()
# 按照天，月，季度，年来显示比特币的走势fig = plt.figure(figsize=[15, 7])plt.rcParams['font.sans-serif']=['SimHei'] 
# 用来正常显示中文标签plt.suptitle('比特币金额（美金）', fontsize=20)plt.subplot(221)plt.plot(df.Weighted_Price, '-', label='按天')plt.legend()plt.subplot(222)plt.plot(df_month.Weighted_Price, '-', label='按月')plt.legend()plt.subplot(223)plt.plot(df_Q.Weighted_Price, '-', label='按季度')plt.legend()plt.subplot(224)plt.plot(df_year.Weighted_Price, '-', label='按年')plt.legend()plt.show()
# 设置参数范围ps = range(0, 3)qs = range(0, 3)parameters = product(ps, qs)parameters_list = list(parameters)
# 寻找最优 ARMA 模型参数，即 best_aic 最小results = []best_aic = float("inf") 
# 正无穷for param in parameters_list:    try:        model = ARMA(df_month.Weighted_Price,order=(param[0], param[1])).fit()    except ValueError:        print('参数错误:', param)        continue    aic = model.aic    if aic `{=html}机器学习是人工智能的一部分，它指的是通过训练数据和算法模型让机器具有一定的智能。一般是通过已有的数据来学习知识，并通过各种算法模型形成一定的处理能力，比如分类、聚类、预测、推荐能力等。这样当有新的数据进来时，就可以通过训练好的模型对这些数据进行预测，也就是通过机器的智能帮我们完成某些特定的任务。深度学习属于机器学习的一种，它的目标同样是让机器具有智能，只是与传统的机器学习算法不同，它是通过神经网络来实现的。神经网络就好比是机器的大脑，刚开始就像一个婴儿一样，是一张白纸。但通过多次训练之后，"大脑"就可以逐渐具备某种能力。这个训练过程中，我们只需要告诉这个大脑输入数据是什么，以及对应的输出结果是什么即可。通过多次训练，"大脑"中的多层神经网络的参数就会自动优化，从而得到一个适应于训练数据的模型。所以你能看到在传统的机器学习模型中，我们都会讲解模型的算法原理，比如K-Means 的算法原理，KNN的原理等。而到了神经网络，我们更关注的是网络结构，以及网络结构中每层神经元的传输机制。我们不需要告诉机器具体的特征规律是什么，只需把我们想要训练的数据和对应的结果告诉机器大脑即可。**深度学习会自己找到数据的特征规律！而传统机器学习往往需要专家（我们）来告诉机器采用什么样的模型算法，这就是深度学习与传统机器学习最大的区别。**另外深度学习的神经网络结构通常比较深，一般都是 5 层以上，甚至也有 101层或更多的层数。这些深度的神经网络可以让机器更好地自动捕获数据的特征。