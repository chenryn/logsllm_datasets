### Condition and Alert Reporting
If a specific condition is met, the attack may be successful, triggering an alert. For simplicity, we refer to the first rule as the "request rule" and the second rule as the "response rule." Figure 1 illustrates the original Snort signature designed to detect a chunked transfer-encoding attack on an IIS web server, which is a buffer overflow attack. Figure 2 shows the new rules after conversion. The second rule identifies server responses that violate the HTTP protocol, indicating a successful buffer overflow attack.

### Rule Optimization
Several issues arise during rule conversion:
1. **Rule Proliferation**: The number of rules significantly increases post-conversion, complicating the maintenance of the signature database, which already contains over 2,800 Snort signatures.
2. **Resource Intensive**: More rules require additional resources to load and process, increasing runtime overhead.
3. **Complexity**: Sometimes, a single signature may require three or more rules (see Section 4.3 and Figure 3 for details).

To address these issues, we have developed a method to optimize response rules. For attacks with similar responses, we reuse tags. For example, in a web CGI attack, if the targeted program does not exist, the server responds with a "404" status code. This scenario is similar for different CGI attacks, allowing them to share the same tag and response rule. The distinct TCP connections ensure that the response rule for one attack does not mistakenly verify another, even if they share the same tag. After optimization, hundreds of web CGI attack signatures can share just 1-2 response rules, significantly reducing the total number of new rules.

**Protocol Status Code Selection**:
We must be cautious when choosing protocol status codes for rule optimization. If two sets of status codes, A and B, are chosen as failure indicators for two attacks, the new rule should use \( A \cap B \). Conversely, if A and B indicate success, the new rule should use \( A \cup B \). In our optimization, we chose both "2XX" and "5XX" as success indicators for CGI attacks and only "4XX" for unsuccessful ones. This approach minimizes false positives while ensuring no successful attacks are missed.

**Alert Differentiation**:
Another challenge is that request rules do not generate their own alerts and often share the same response rules, leading to identical alerts for different attacks. To mitigate this, we can configure both request and response rules to report alerts, then post-process the alerts to filter out unsuccessful attacks.

### Rule Set Conversion
Snort organizes its rules into multiple sets based on application protocols and attack types. We have converted eight rule sets: `ftp`, `pop3`, `web-attacks`, `web-cgi`, `web-coldfusion`, `web-frontpage`, `web-iis`, and `web-php`.

**Step-by-Step Conversion**:
1. **Tag Introduction**: For each rule set, we introduced a new tag. Using regular expressions, we inserted `flowbits:set, <new_tag>;` and `flowbits:noalert;` into each rule. This step was completed in minutes due to the standardized formatting and organization of Snort rule sets.
2. **Response Rules Addition**: We added one or more response rules to each set. These rules check the protocol status code in tagged TCP connections and take appropriate actionsâ€”either not reporting an alert if the attack failed or reporting an alert if it succeeded.

**Example: POP3 Rule Set**:
The POP3 protocol specifies that server responses must begin with `+OK ` or `-ERR `. Most attacks in the `pop3` rule set are buffer overflows, integer overflows, and format string attacks. If an attack succeeds, the server likely does not respond correctly. We added two new rules:
- The first rule verifies the failure of an attack by checking if the response follows the POP3 protocol, clearing the tag and not reporting an alert.
- The second rule verifies the success of an attack by checking if the response violates the POP3 protocol, clearing the tag and reporting an alert.

For rule sets like `ftp` and `web-iis`, which include various attack types, we added multiple tags and corresponding response rules. This process took slightly longer but was still manageable, resulting in 23 new rules compared to 687 original rules.

### Experimental Results
We conducted offline experiments using real-world data collected from our site to test our implementations. The results are promising.

**Setup**:
- Four honeypot machines were set up since June 2003, recording all network traffic with Tcpdump.
- Three machines (Windows NT 4.0, Windows 2000, and RedHat Linux 7.2) were repeatedly compromised via HTTP and FTP servers, generating significant traffic.

**Experiment**:
- We ran Snort twice on the recorded data: once with the original rule sets and once with the new rule sets.
- Unsuccessful attacks were not reported with the new rule sets.
- All unmodified rule sets were disabled, and default Snort configuration options were used.

**Results**:
- **Alert Reduction**: Our implementation reduced alerts by 83.28% for Windows NT 4.0, 90.91% for Windows 2000, and 96.95% for RedHat Linux 7.2.
- **Execution Time**: The average execution time for the new rule sets was significantly lower (Table 2).

**Manual Examination**:
- **RedHat Linux**: Most attacks were related to a Microsoft IIS server on Windows and the wu-ftp FTP server. Two types of IIS attacks were reported: the IIS view source via translate header attack and the IIS WEBDAV nessus safe scan attempt. Further refinement of response rules could further reduce false positives.
- **Windows NT 4.0 and Windows 2000**: Many filtered alerts were related to CodeRed II worm incidents, where the servers responded with "403 Forbidden" or "404 Not Found." Additionally, several buffer overflow attacks against anonymous FTP servers were also filtered out.

These results demonstrate the effectiveness of our approach in reducing false positives and improving the overall performance of Snort.