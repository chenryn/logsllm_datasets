If a certain condi-
tion is met, the attack is possibly successful, so an alert is
reported. For the sake of simplicity, we call the ﬁrst rule “re-
quest rule”, and the second rule “response rule”. Figure 1
shows the rule of an original Snort signature that detects a
chunked transfer-encoding attack against an IIS web server.
It is a buffer overﬂow attack. Figure 2 3 shows the new rules
after conversion. The second rule detects server responses
that do not obey the HTTP protocol, meaning a successful
buffer overﬂow attack.
4.2. Rule Optimization
There are several problems in rule conversion. First,
the number of rules dramatically increases after the con-
version, making the signature database more difﬁcult to
maintain since there are already more than Snort 2,800 sig-
natures to date. Secondly, it requires more resources to
load more rules, and increases run-time overhead to pro-
cess more rules. In fact, sometimes it requires even three or
3Option pcre in Figure 2 deﬁnes a Perl compatible regular expression to
inspect the payload of a HTTP response and determine if it obeys the HTTP
protocol. The Symbol “!” at the beginning of the option data reverses the
inspection result.
t c p $EXTERNAL NET any −> $HOME NET 80
a l e r t
( msg : ” I I S . h t r chunked T r a n s f e r −Encoding ” ;
flow : t o s e r v e r , e s t a b l i s h e d ;
s i d : 1 8 0 6 ;
u r i c o n t e n t : ” . h t r ” ; n o c a s e ;
c o n t e n t : ” T r a n s f e r −Encoding | 3A| ” ; n o c a s e ;
c o n t e n t : ” chunked ” ; d i s t a n c e : 0 ; n o c a s e ; )
Figure 1. Original Snort Signature
t c p $EXTERNAL NET any −> $HOME NET 80
a l e r t
( msg : ” I I S . h t r chunked T r a n s f e r −Encoding ” ;
flow : t o s e r v e r , e s t a b l i s h e d ;
s i d : 1 8 0 6 ;
u r i c o n t e n t : ” . h t r ” ; n o c a s e ;
c o n t e n t : ” T r a n s f e r −Encoding | 3A| ” ; n o c a s e ;
c o n t e n t : ” chunked ” ; d i s t a n c e : 0 ; n o c a s e ;
f l o w b i t s : s e t , t a g 1 8 0 6 ;
f l o w b i t s : n o a l e r t ; )
t c p $HOME NET 80 −> $EXTERNAL NET any
a l e r t
( msg : ” I I S . h t r chunked T r a n s f e r −Encoding ” ;
flow : t o c l i e n t , e s t a b l i s h e d ;
f l o w b i t s : i s s e t , t a g 1 8 0 6 ;
pcre : ! ” / ˆ HTTP\ /\ d \ .\ d\ s\d\d\d /m” ;
f l o w b i t s : u n s e t , t a g 1 8 0 6 ; )
Figure 2. New Snort Signature
more rules for a single signature (See Sect. 4.3 and Figure 3
for details).
We have developed a method to optimize the response
rules. For the attacks that have similar responses, we reused
a tag. For example, for a web CGI attack, if the targeted pro-
gram does not exist on a web server, the server will respond
to the request with a “404” status code. For a different CGI
attack, the scenario is similar. Thus, these two web attacks
can share the same tag and response rule. The distinct TCP
connections of the two attacks ensure that the response rule
of the second attack is not used to verify the result of the ﬁrst
attack even they have the same tag. After this optimization,
hundreds of signatures of web CGI attacks can share only
1–2 response rules. Therefore, the number of new rules is
reduced signiﬁcantly.
However, we must be conservative in choosing the pro-
tocol status code in rule optimization. For example, assume
two sets of status code A and B have been chosen as the fail-
ure indication of two attacks respectively. If we want to use
a single response rule to verify both attacks, the status code
of the new rule should be A∩B. On the other hand, if A and
B are used as the success indication for the two attacks, the
status code of the new rule should be A∪B. For example, in
our optimization, we chose both “2XX” and “5XX” as the
status code of successful CGI attacks, and only “4XX” as
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:27 UTC from IEEE Xplore.  Restrictions apply. 
the status code of unsuccessful CGI attacks. This can make
unsuccessful attacks trigger unwanted alerts. However, it is
better than missing successful attacks.
There is another problem in rule optimization. Because
the request rules do not ﬁre their own alerts and many of
them share the same response rules to verify their results,
different attacks will result in the same alert. The security
ofﬁcer must then examine each alert to ﬁgure out its cor-
responding attack. A simple ﬁx is to let both request and
response rules report alerts, and post-process the alerts to
ﬁlter out unsuccessful attacks.
4.3. Rule Sets Conversion
Snort groups its rules into multiple rule sets based on
the type of application protocols and attacks. Currently,
we have converted eight rule sets: ftp, pop3, web-attacks,
web-cgi, web-coldfusion, web-frontpage, web-iis, and
web-php.
The ﬁrst step of rule set conversion is trivial: for each
rule set, we introduced a new tag 4. Assuming a tag is
named new tag, we inserted two option statements, “ﬂow-
bits:set,new tag;” and “ﬂowbits:noalert;”, into each rule in
the rule set. This step was done in only several minutes
by using regular expression in pattern match and insertion.
We could do this because of the standardized formatting and
good organization of Snort rule sets. We strongly urge other
NIDS vendors to adopt a similar approach as it makes batch
maintenance very easy!
After the ﬁrst step, we added one or more response rules
to each rule set. These new rules checked protocol status
code in the TCP connection that is tagged in the ﬁrst step,
and take appropriate actions accordingly — the rule either
does not report an alert if the attack has failed or reports an
alert if the attack has succeeded.
Figure 3 shows the new rules added into the pop3 rule
set. The POP3 protocol speciﬁes that a response from
a POP3 server must begin with “+OKt” or “-ERRt” (t
means a space). Nearly all attacks in the pop3 rule set are
buffer overﬂow, integer overﬂow and format string attacks.
If these types of attacks succeed, the POP3 server is likely
not to respond as the POP3 protocol. Otherwise, the POP3
server will still behave as normal. Therefore, we added two
new rules. The ﬁrst rule veriﬁes the failure of an attack by
checking that the response from a POP3 server obeys the
POP3 protocol. It therefore clears the tag and does not re-
port alerts. The second rule veriﬁes the success of an attack
by checking that the response from a POP3 server does not
4Our ﬁrst attempt was to convert the rule set web-iis without rule op-
timization, which means we introduced a new custom tag for each rule in
this rule set and one or more response rules for each tag. Then we devel-
oped the rule optimization method and applied it to the conversion of all
other rule sets.
follow the POP3 protocol. It therefore clears the tag and
reports an alert.
For some rule sets, e.g., ftp and web-iis, there are mul-
tiple different types of attack, e.g., buffer overﬂow, anony-
mous login, and retrieving sensitive ﬁles. Thus, we added
multiple tags to handle different types of attack and cre-
ated corresponding response rules for each tag. This took
slightly longer time. Overall, we were able to accomplish
this task in a few minutes. The number of new rules is 23,
which is negligible compared to 687 original rules 5.
t c p $HOME NET 110 −> $EXTERNAL NET any
a l e r t
( msg : ” POP3 f a i l e d o v e r f l o w a t t a c k ” ;
e s t a b l i s h e d ;
flow : t o c l i e n t ,
pcre : ” / ˆ ( \ +OK|\−ERR)\ s /m” ;
f l o w b i t s : i s s e t ,
t a g p o p 3 b o ;
f l o w b i t s : u n s e t ,
t a g p o p 3 b o ;
f l o w b i t s : n o a l e r t ; )
t c p $HOME NET 110 −> $EXTERNAL NET any
a l e r t
( msg : ” POP3 s u c c e s s f u l o v e r f l o w a t t a c k ” ;
flow : t o c l i e n t ,
e s t a b l i s h e d ;
pcre : ! ” / ˆ ( \ +OK|\−ERR)\ s /m” ;
f l o w b i t s : i s s e t ,
t a g p o p 3 b o ;
f l o w b i t s : u n s e t ,
t a g p o p 3 b o ; )
Figure 3. POP3 Attack Response Rules
5. Experimental Results
We have performed several off-line experiments with
real-world data-set collected at our site to test our imple-
mentations. The results are promising.
We have set up four honeypot machines [27] since June
2003. All the network trafﬁc of these machines has been
recorded using Tcpdump [26]. Three honeypot machines, a
Windows NT 4.0 server, a Windows 2000 server and a Red-
Hat Linux 7.2 were repeatedly compromised via HTTP and
FTP servers. Furthermore, scans of the honeynet generated
large amount of HTTP and FTP trafﬁc.
In the experiments, we let Snort read the Tcpdump data
ﬁles recorded from the honeynet from June 18, 2003 to
November 30, 2003. We executed Snort twice on the data
ﬁles. One was using the original Snort rule sets, the other
was using our new rule sets. When using the new rule sets,
attacks that did not succeed were not reported. All unmod-
iﬁed rule sets were turned off from Snort conﬁguration ﬁle.
All options in the Snort conﬁguration ﬁle were kept at their
default values. The results are shown in Table 1 6.
5The web-iis rule set is excluded because it has not been optimized.
6Alerts generated by the Snort pre-processors instead of the rule sets
were excluded from the table.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:27 UTC from IEEE Xplore.  Restrictions apply. 
Honeypot
System
Win NT 4.0
Win 2000
RH Linux 7.2
Alert Number
(Org. Rule Sets)
Alert Number
(New Rule Sets)
16989
13660
4978
2841
1242
152
Table 1. Reported Alerts
Tcpdump
Data
New
Original
Avg. Time (sec.)
of Orig. Rule Sets
Avg. Time (sec.)
of New Rule Sets
164.620
285.349
222.648
343.354
Table 2. Snort Execution Time (each run)
Table 1 shows that our simple implementation is able to
eliminate 83.28%, 90.91% and 96.95% of the alerts against
the Windows NT 4.0 server, the Windows 2000 server and
the RedHat Linux 7.2 respectively. We feel it is an encour-
aging result since the new rules we have introduced are con-
servative. In fact, there is a potential to improve the result if
we take a close analysis for each individual signature.
A manual examination shows that most of the attacks
against RedHat Linux were related to a Microsoft IIS server
on Windows, and the others were related to the wu-ftp ftp
server on the system. Among the IIS attacks, two types of
attacks were reported by our new rule sets. One is the IIS
view source via translate header attack. The non-vulnerable
Apache web server running on the Linux system responded
“200 OK”, the same as the IIS server would respond. In
order to ﬁlter it, we can check the vendor information in
the server response besides of status code. This shows a
limitation of our approach, but is ﬁxable. The other is
the IIS WEBDAV nessus safe scan attempt attack. Since
it is a buffer overﬂow attack, we let Snort report an alert if
the server response code is “5XX”, meaning a server mal-
function has happened. In fact, the Apache web server re-
sponded “501 Method Not Implemented” to this attack, but
we had expected “500 Server Internal Errors” for a success-
ful attack. Thus, we can reﬁne the response rule for this
attack to suppress the alert if the server responds “501” sta-
tus code. Among the ftp attacks, three were unsuccessful
attacks related to directory operations, and two were unsuc-
cessful buffer overﬂow attacks. They were suppressed by
the response rules. The other 77 attacks all have succeeded,
including 76 directory operations and one buffer overﬂow
attack. They were all correctly reported by the new rule
sets. Thus, if we further reﬁne the response rules, we could
end up with 77 alerts corresponding to only the successful
attacks.
We manually studied the result of attacks on the Win-
dows NT 4.0 and Windows 2000 servers. First, many alerts
being ﬁltered out were related to CodeRed II worm inci-
dents [4]. The attacks scanned the web servers in order to
access a backdoor program, “root.exe”, created by early in-
fection of the worm. Since our servers were not infected,
the backdoor program did not exist. The servers responded
“403 Forbidden” or “404 Not Found” to the attacks. The
corresponding alerts were suppressed. Secondly, we ob-
served a lot of attacks that tried to access some known
vulnerable CGI programs on the IIS web server. Since
these CGI programs were not installed on the servers, the
servers responded “403 Forbidden” or “404 Not Found”
to the attacks. The corresponding alerts were suppressed,
too. Thirdly, there were also several buffer overﬂow at-
tacks against the anonymous ftp servers on the machines,
but both ftp servers were not vulnerable to the attacks. The