inputs received after the start of the execution. While our lower
bound does not directly capture such protocols, the ideas used
in the lower bound should be applicable to these protocols too.
In particular, there should always exist a point in time during
the execution after which a party cannot change its input; if the
adversary sends an input to some parties before this time, and
to some parties after, then similar arguments as in the lower
bound should hold true. Third, the lower bound uses integral
units of time for input delivery where each unit of time can
be of ∆ duration. This is achievable since the adversary is
responsible for delivering messages in the protocol (under the
∆-delay constraint), and it can always ensure that the message
is delivered at these integral boundaries, e.g., receiving input
at l = 0 implies that the input is received at exactly the
start of protocol execution. Fourth, our lower bound holds for
f ≤ 1/3. For a larger f, the lower bound can be trivially
extended to obtain a bound 1 − 2(1/3) = 0.34-anonymity.
Improving the lower bound at a higher f is still an open
question. Fifth, while the liveness bound is parameterized
with z, the anonymity bound assumes the maximum z value
of 1 − f, i.e., a protocol provides liveness only when all
honest parties receive the transaction. The bound is trivially
applicable even when the protocol provides stronger liveness
guarantees, i.e., when z  f. If the output is
v the adversary learns that the stakeAlice ≤ f. The adversary
now repeats the process above except that only f − d fraction
of Q play with the value v. If the output is not v, the adversary
learns that stakeAlice > f − d fraction of the total stake. Why?
If the output is not v by the deﬁnition of liveness it is implied
that  f − d. On the other hand, if the output is
v then the adversary runs the process again in the next round
with a larger d. We note than an exponential search gives the
best results in estimating the stake of Alice. We present a visual
example of the attack in Fig 11.
We note that the adversary could do this with every honest
party until it learns the exact stake distribution of all parties.
Remark (On deterministic protocols). Our lower bound in
the previous section is only for deterministic protocols that
guarantee (z, t)-liveness. However, protocols may use random-
ness for various reasons such as cryptographic operations,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1829
P1P2P3P4P5P6P7P8P9P10P1P2P3P4P5P6P7P8P9P10P1P2P3P4P5P6P7P8P9P10P1P2P3P4P5P6P7P8P9P10P1P2P3P4P5P6P7P8P9P10r = 0r = 1r = 2r = 3r = 4OUTPUTINPUT DIST OF  PARTIESPRQP + RQPRQPRQPRQALICEP1P2P3P4ALICEP1P2P3P4ALICEP1P2P3P4ALICEP1P2P3P4OUTPUTr = 0r = 1r = 2r = 3INPUT DIST OF  PARTIESefﬁciency, and anonymity. Since protocols such as Algorand
[4] and Ouroboros [3], [8] use randomness for efﬁciency
purposes (e.g., deciding the next committee members), the
above described attacks work so far as the protocols guarantee
liveness. In general, while our lower bound is constrained
to deterministic protocols, the ideas described may extend to
randomized protocols too unless the protocols use randomness
speciﬁcally to obtain anonymity.
Reverse Tagging Attack
Let the current round be r. We denote the ad-
versarially created value with a variable vr. The
adversary wants to determine stakeAlice. The
adversary initializes a fraction d to 0, where f − d is
adversary’s guess of stakeAlice.
While the output of execution at round r includes
vr:
1
totalStake and create a valid
input vr and run Delay(vr, Alice).
1) Update d = d +
2) Instruct parties in Q that make (f − d) fraction
of total stake to play with vr. Update r = r + 1
Output (f − d) as the estimate of stakeAlice.
Figure 12. The Reverse Tagging attack
VI. PRACTICALITY OF OUR ATTACKS
In this section we describe how our attacks can be carried
out on a real-world blockchain network. There exists no imple-
mentation of a privacy-preserving PoS blockchain, therefore
we describe our attacks for a privacy-preserving proof-of-work
blockchain, namely the Zcash blockchain [12].
In Section VI-A we present an overview of how the Zcash
p2p network works. We then describe (in Section VI-B) how
to implement the Delay function deﬁned in Section V. We note
that it sufﬁces to show an implementation of this function to
mount the tagging (Section V-A) and reverse tagging attacks
(Section V-B).
A. The Zcash peer-to-peer network
Establishing connections between nodes. When a Node
joins the Zcash network it needs to connect to existing nodes
on the network. To establish these connections the Node
initiates a TCP handshake with these nodes. To achieve this,
the only information the Node needs is the IP address of
the network nodes. At
the end of this process the Node
will have established incoming and outgoing connections to
Peer1 . . . Peerk.
Receiving and sending transactions. Nodes on the Zcash p2p
network follow a three-step protocol to propagate transactions.
To send a transaction to a peer, the Node ﬁrst sends just
the transaction hash to Peer1, . . . , Peerk and will follow up
with the entire transaction only if it is requested. In more
detail propagating a transaction across the Zcash p2p network
involves the following steps:
Inventory step: In this step the Node announces the
knowledge of a tx to its peers Peeri. The Node sends an INV
message which contains Htx to its peers. If this hash was
observed before, Peeri simply ignores the INV message, else
it proceeds to the get data step. Get data step : Peeri sends
a command GETDATA, Htx to Node to request the transaction
tx. Note that if a Peeri has requested GETDATA for a particular
INV message from Node then it will ignore INV messages for
the same transaction from other peers for a speciﬁc amount
of time (2 min in Zcash3) and simply add those INV messages
to a queue This time-out serves as a window for the Node to
respond to the GETDATA message, and will be relevant to our
attack. Send tx : In this step Node responds with the tx for
the corresponding INV it sent in the ﬁrst step. The Node then
adds this transaction to its buﬀer.
B. Implementing Delay
We assume that the adversary already knows the IP address
of a victim, let us denote such a node by victimNode. We
assume that the victimNode allows incoming connections and
the adversary connects to the victimNode using the process
described above.
Recall that in the Delay function the goal of the adversary is
to deliver a message to all nodes except the victimNode. Delay
can be implemented using a procedure called Invblocking, ﬁrst
described in [13] and also used in [30]. For completeness
we present the strategy here: 1) Create a transaction tx and
compute (INV, Htx). 2) Send (INV, Htx) to the victimNode and
all the adversary’s peers 3) Upon receiving GETDATA from all
peers, respond to all peers with tx immediately except for the
victimNode
The victimNode now waits for a time-out until it requests
a GETDATA from another peer who also sent an INV with the
same Htx. Thus the adversary succeeds in delaying the receipt
of tx to the victimNode. Note that if an adversary has multiple
connections to the victimNode it could delay the transaction
until the victimNode sends GETDATA to an honest peer. In
Zcash, a block is mined approximately every 75 seconds. Since
the time-out is 2 minutes in Zcash, the Invblocking attack
allows the adversary to ensure a transaction is not in the buﬀer
of a victimNode for an entire round, which is what we need
to implement Delay.
VII. CONCLUSION
In this work we showed that even if a PoS blockchain proto-
col is designed to preserve anonymity in the application layer,
a network adversary that can control the delivery of messages
can de-anonymize parties and even learn the stake distributions
of parties in the system. We suggest some countermeasures but
each come with their own limitations and require more thought
and work. We hope that our ﬁndings lead to new discussions
on technologies to preserve anonymity of stakeholders against
any network adversary.
3See Line 2171 of https://github.com/zcash/zcash/blob/master/src/net.cpp
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1830
bitcoin transactions.” 2017.
[24] A. Biryukov, D. Feher, and G. Vitto, “Privacy aspects and subliminal
channels in zcash,” in Proceedings of the 2019 ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS ’19. New York,
NY, USA: Association for Computing Machinery, 2019, p. 1813–1830.
[Online]. Available: https://doi.org/10.1145/3319535.3345663