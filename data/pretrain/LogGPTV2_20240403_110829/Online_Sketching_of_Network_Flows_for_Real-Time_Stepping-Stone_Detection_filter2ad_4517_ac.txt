(8)
The above bound indicates that, as a pair of correlated
ﬂows become more different than each other, the bit-error
probability between their binary sketches increases. It also
shows that as the magnitude of linear transform coefﬁcients
increases, which essentially means that the ﬂows transmit
more packets, their sketches become more resistant to per-
turbations.
To visualize how this bound changes with respect to delay
and chaff, we computed ∞t=−∞ E(t)2 and |CF (i)|2 for
1000 correlated ﬂow pairs. We used 512-bit sketches, there-
fore we have i = 1, 2, ....512. We obtained correlated ﬂows
by modifying 1000 original ﬂows, which are 60-second long
SSH ﬂows captured at our network border, with uniformly
distributed packet delays and random chaff insertions. Recall
that, the bound is different for each bit position depending
on the magnitude of the corresponding transform coefﬁcient.
Hence, for each correlated ﬂow pair we computed the bit-
error probability in expectation sense by using average
1
512P512
coefﬁcient magnitude, such that P eexp = P∞t=−∞ E(t)2
i=1 |CF (i)|2 .
Figure 2 plots the average P eexp of all 1000 ﬂow pairs
for different maxDelay and chaﬀRate values. As expected,
the average bit-error probability bound increases with both
increasing max delay and increasing chaff rate. It is also
observed that, the Hamming Distance between the sketches
of a pair of correlated ﬂows is expected to be less than a
threshold as long as maxDelay and chaﬀRate don’t exceed
a certain value.
6) Online Computation of Packet-Timing Sketches:
In this subsection we present an efﬁcient algorithm to
simultaneously compute packet-timing sketches of all ob-
served ﬂows. The algorithm computes sketches continuously
in a cumulative way. Therefore, the sketch of a ﬂow with
respect to the packets received so far is available at any
desired time even if the ﬂow is still active. The essence of
the algorithm is to cumulatively compute Equation (1) by
updating linear transform coefﬁcients (CF (i)) for each cap-
tured packet. Since VF (t) indicates the number of packets
that ﬂow F has in time-slot t, Equation (1) essentially ac-
cumulates the random basis vector values for the time-slots
that the observed packets are transmitted. More formally, for
each packet p of ﬂow F , the algorithm updates transform
coefﬁcients as follows:
CF (i) ← CF (i) +B i(tp)
(9)
where tp indicates the time-slot which packet p is trans-
mitted. The pseudo-code for the algorithm performing this
procedure for all ﬂows is given below. The algorithm runs on
the packet stream Φ and take three inputs namely the epoch
(TEpoch), length of the time-slots (LT S), and the number
of transform coefﬁcients−equivalently the length of binary
sketches−(k) for each ﬂow. The subroutines getF low() and
getT imeStamp() extracts the ﬂow information that
the
packet belongs to and the time stamp from a a packet
respectively. The algorithm might compute the random basis
vector elements “Bi(t)” online whenever needed. However,
since packets arrive roughly in chronological order, Bi(t)
values can be pre-computed for a sliding window of time
and stored in a cache repository for practical purposes.
Algorithm 1 MaintainSketches(TEpoch, LT S, k)
for all packet P captured on stream Φ do
F ← getF low(P ) {Determine the ﬂow of P}
t =  getT imeStamp(P )−TEpoch
for i = 1 to k do
LT S
{ Determine current time slot}
CF (i) ← CF (i) +B i(t)
end for
end for
The above algorithm continuously maintains an integer-
array sketch for each active ﬂow. If the binary sketch of a
ﬂow is required at any time, the algorithm simply computes
it from the signs of the current value of integer-array
sketch of that ﬂow as explained in the previous subsection.
477
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:53 UTC from IEEE Xplore.  Restrictions apply. 
d
n
F
i
P
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
mn=108
mn=109
mn=1010
20
40
β
60
80
100
Figure 3. Probability of the proposed search algorithm ﬁnding a correlated
ﬂow-pair among m ingress and n egress ﬂows for different number of
repetitions (β). The sketch length is k = 512 and the threshold is th = 71.
The above algorithm simply updates k coefﬁcients of the
corresponding ﬂow for each packet. Since k is constant
(typically k = 512), the algorithm runs in linear time in
the number of packets. Also, the algorithm requires linear
space in the number of active ﬂows since a constant length
integer array is maintained for each active ﬂow.
B. Efﬁcient Search for Correlated Flows
let b1, b2, ..., bα be these random bit
In this subsection, we present an approximate search al-
gorithm based on binary sketches, which ﬁnds all correlated
ﬂows in O(n + √nm) time, with high probability. The
algorithm is similar to the algorithm proposed in [12], where
the authors search a large audio database using robust audio
hashes. The algorithm steps are given below:
• We ﬁrst pick α random bit locations on binary sketches,
where 2α = √nm. We refer the bits on these random
locations of a ﬂow’s sketch as the subsketch of that ﬂow.
lo-
More formally,
cations, where k is the sketch length and α ≤ k. Then
[SF (b1), SF (b2), ..., SF (bα)] is the subsketch of ﬂow F .
• Then for n ingress ﬂows, we construct a lookup table,
which is used to access an ingress ﬂow from its subsketch.
Note that the size of the lookup tables is 2α = √nm, since
a subsketch can have 2α possible values.
• Following that, for each egress ﬂow Fe, we compute the
Hamming Distance between the binary sketch of Fe and
the binary sketches of ingress ﬂows whose subsketch is
the same as the subsketch of Fe. Notice that, we use the
lookup table constructed in the previous step to ﬁnd the
ingress ﬂows with the matching subsketches. If any of the
Hamming Distances is smaller than the threshold th, Fe and
that particular ingress ﬂow are declared as correlated.
• Finally, in case we miss comparing some of the correlated
ingress/egress ﬂow pairs, we repeat the above steps β times,
each time with a different subsketch bit locations.
Recall that n and m are the number of ingress and egress
ﬂows respectively. Hence, the proposed search algorithm
computes the lookup table in O(n) time. After that,
it
compares each of the m egress ﬂows with on average
n/2α ﬂows, since on average 1/2αth of the ingress ﬂows
matches the subsketch of a given egress ﬂow. And the
algorithm repeats this β times. As a result, the proposed
search algorithm runs in O((n + mn/2α)β) time in the
expectation sense. Since we set 2α = √nm, and β is
typically a small constant, the proposed algorithm’s run time
is O(n + √nm).
k−i
k−th−i
The proposed search algorithm can ﬁnd correlated ﬂow
pairs only if their subsketches match in at least one of
the β repetitions. To ﬁnd the probability of that event, let
Pmatch denote the probability of two ﬂows, whose sketches
are closer than th, having the same subsketch. Then we
can write that, Pmatch ≥ α−1
, where k is the
sketch length. Using this, we can write the probability of
the proposed search algorithm ﬁnding an ingress/egress ﬂow
pair, the Hamming Distance between whose sketches are
smaller than th, in β repetitions as Pf ind = 1 − (1 −
. It is clear that Pf ind
approaches to 1 as β increases. To give an example, in
Figure 3, we plot Pf ind, for different mn and β, where
we set 2α = √mn, where the sketch length is k = 512
and the threshold is th = 71. Threshold was set to allow
10−4 false positive rate as will be explained in Section IV.
It is observed that Pf ind climbs rapidly with β, and when
β ≈ 50, the proposed search algorithm is expected to ﬁnd
almost all ﬂows whose sketches are closer than th.
Pmatch)β ≥ 1−1 −α−1
k−i β
i=0
k−th−i
i=0
IV. EXPERIMENTS AND RESULTS
To demonstrate the efﬁcacy of the proposed stepping-
stone detection method we set up an experiment, which
measures how successfully the correlated ﬂows can be
detected under a ﬁxed false alarm probability.
Obtaining Correlated Flows: In most cases, stepping-stone
attacks are carried over an interactive protocol, such as SSH.
Therefore, to obtain correlated ﬂows, we ﬁrst captured 100
real SSH ﬂows, at our network’s border. We refer these ﬂows
as the original ﬂows. We observed that the original ﬂows
transmitted 2.4 packets per second on average. Then for each
of these original ﬂows, we obtained a perturbed ﬂow, by
delaying packets and introducing chaff. Despite the delay
and chaff, a perturbed ﬂow is considered to be correlated
to the ﬂow it originated from. To obtain a perturbed ﬂow
from an original ﬂow, ﬁrst we delayed each packet of the
original ﬂow by a random amount chosen uniformly from the
interval [0, maxDelay]. Then, we introduced chaff packets
to both the original ﬂow and the perturbed ﬂow at random
times, where the ratio of the number of introduced chaff
packets to the number of original packets was determined
by chaﬀRate.
Searching for Correlated Flows: Once we obtained these
100 correlated ﬂow pairs, we blended them into the real
network network trace, which was previously captured at our
network’s border during a typical weekday. Then, we ran the
proposed stepping-stone detection technique on the blended
trace as if it was a real-time network trafﬁc. The proposed
technique continuously maintained the sketches of the active
478
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:53 UTC from IEEE Xplore.  Restrictions apply. 
ﬂows in the network trace as packets were captured. To deal
with terminated ﬂows, we checked whether the ﬂows were
still active once in every minute. A ﬂow and it’s sketch were
erased if it was idle for more than 60 seconds. Finally, to
identify the correlated ﬂows in the trace, we performed the
proposed correlated ﬂow search at every ∆= 10 seconds.
We believe ∆= 10 is reasonable because, it is very hard for
an attacker to start and ﬁnish her attack within 10 seconds.
During the search, we used 16-bit subsketches and and 50
lookup tables, such that α = 16 and β = 50 as explained
in Section III-B . With those speciﬁc α and β values, we
were able to perform the search in O(n + √nm) time for
up to n = 105 active ingress and m = 105 active egress
ﬂows, since (216)2 ≈ 1010. We declared a pair of ﬂows
as correlated, when we found out in any of these periodic
search processes that the Hamming Distance between the
binary sketches of those ﬂows were below a threshold th.
Finally, to quantify the performance of the proposed scheme,
we measured the detection rate as the ratio of the number
of correctly identiﬁed correlated ﬂows to the number of all
correlated ﬂows blended into the trace.
Selecting the Threshold: A proper setting of the detec-
tion threshold th was crucial for our experiments. Like
all detection methods based on thresholds, the lower the
threshold the higher the false alarm rate and the higher the
threshold the lower the detection rate. In our experiments,
we picked the detection threshold, which yielded the ﬁxed
10−4 false alarm rate. We believe that, 10−4 false alarm
rate is acceptable in most cases. To determine a such
threshold, one needs to estimate the probability distribu-
tion of the Hamming Distances between binary sketches
uncorrelated ﬂows. For this purpose, we ﬁrst empirically
computed the probability distribution of Hamming Distances
between the binary sketches of 5000 uncorrelated SSH ﬂow
pairs captured at our network’s border. During that process,
we made sure that the ﬂows were concurrent, by shifting
them in time. This enabled us to produce a more realistic
estimate, since a stepping-stone detection scheme searches
concurrent ﬂows for correlated pairs. Once we computed the
empirical distribution, we ﬁtted a Gaussian on the empirical
distribution. Then we picked the threshold value th such
that, the integral of the ﬁtted Gaussian from −∞ to th was
equal to 10−4, such that  th
fG(h) dh = 10−4. We plot
the computed empirical distribution, ﬁtted Gassian and the
selected threshold value for 512-bit sketches in Figure 4,
where we used 500 millisecond time-slots.
Notice that, the distribution of Hamming Distances be-
tween the sketches of uncorrelated ﬂows should ideally be a
Binomial distribution with p = 0.5. However, the empirical
distribution deviated from the ideal as observed in Figure 4.
The reason is that, even though the ﬂows were uncorrelated,
their packet-count vector representations show some coarse
similarities. For instance, since we used quite long time slots
(i.e. 500 milliseconds), there’s a good chance that a pair
−∞
y
t
i
l
i
b
a
b
o
r
P
0.04
0.035
0.03
0.025
0.02
0.015
0.01
0.005
0
0
Empirical Distribution
Gaussian Fitting
Ideal Binomial Distribution
0.0001 False Alarm Threhsold
100
200
Hamming Distance
300
400
500
Figure 4. The empirical probability distribution of the Hamming Distances
between the binary sketches of uncorrelated ﬂows (durations between 10
and 40 seconds) and the Gaussian probability distribution function approx-
imating the empirical distribution. The vertical line marks the threshold
value (i.e. th = 71) for false alarm rate of 10−4.
of uncorrelated ﬂows share many common time slots that
they are both active in, although they usually have different
number of packets within a given time-slot.
Real-Time Exclusions in the Correlated Flow Search: In
our experiments we excluded some ﬂows in the correlated
search process, since they had no potential to be a part
of a stepping-stone attack. Our concern was not about
the computational efﬁciency but rather about the detection
performance, since such ﬂows might introduce extra false
positives. In order to be real-time, we identiﬁed and excluded
such ﬂows in real time as well. In our experiments, we
excluded the following cases:
• Flows With Reverse Directions: In most cases, two hosts
communicate with each other through a pair of ﬂows (one
for each direction), where one ﬂow’s source IP and port is
other ﬂow’s destination IP and port. Although, such a pair
of ﬂows usually have similar packet timings to each other