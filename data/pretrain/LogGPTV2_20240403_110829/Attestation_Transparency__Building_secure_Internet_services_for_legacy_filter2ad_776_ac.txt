bedded identities, there is a chicken-and-egg problem. Since
the identity of a program changes when including a diﬀer-
ent identity, it’s not possible for both programs to have the
other’s identity ﬁxed in its code. Also, it’s not secure to rely
upon a system administrator to sign the identities of the two
enclaves, since an insider could falsely sign the identity of a
malicious enclave. One solution is to combine multiple pro-
grams into a single one with multiple operating modes. Now
the same solution used for horizontal scaling can be applied.
4.2.3 Updates
When a service is updated, its persistent data will need to
be updated too. Data encrypted with a user-dependent key
can be used directly by the newer version. However, since
the new service identity will be diﬀerent from the previous
version, all data stored in sealed storage is lost. Sealed data
will need to be moved to the new version before the old
version can be retired.
A secure channel will need to be established between the
old and the new version, see §5.3.1 for details on the authen-
tication of this channel. Once the channel is established,
Begin
Valid private key
in sealed storage?
no
Generate &
store private key
yes
Valid certiﬁcate
in sealed storage?
yes
Start listening
TLS server
Input & store
certiﬁcate
no
Output certiﬁcate
signing request
Figure 4: Key management.
the old version can unseal the data in question and send it
across. The new version receives the data and immediately
puts it in sealed storage. If there is too much data to be
transferred over the secure channel, instead that data should
be encrypted with an enclave-generated secret key. The key
itself can then be stored in sealed storage and transferred
for updates.
5. CLIENT VERIFICATION OF SECURE
SERVICES
The previous section described how to construct a secure
service. This section will explain how a client connecting to
such a service can verify that service.
Consider the simple scenario in which the server sends an
attestation A(Ienclave) to the client as part of establishing
a secure channel. The client will need to verify both the
attestation and the identity. As a straw-man proposal, en-
vision a service provider distributing a client program that
includes a ﬁxed identity and can verify attestations expected
for a particular service. This would require users to install
a diﬀerent client per service they want to use. Additionally,
since the identity is ﬁxed in the client, service updates would
also require a client update.
A more general client could contain the logic to be able to
verify all possible attestation mechanisms, as well as main-
tain a list of all acceptable identities. Done naively, this
would be worse logistically, since now a new client needs to
be distributed for every service update.
5.1 Attestation Transparency
Instead of creating this new veriﬁcation mechanism that
clients would need to implement, we build a veriﬁcation
mechanism on top of an existing mechanism that clients al-
ready know how to use: Public-Key Infrastructure. Under
our proposed scheme, all the client needs to do to trust the
secure service is verify the TLS server certiﬁcate using stan-
dard existing methods.
Our scheme, called Attestation Transparency, is an ex-
tension of the Certiﬁcate Transparency framework [22].
Remember that in our unalterable secure service model,
6
demonstrating posession of K−1
server by an entity implies that
it is a secure service instance. The core idea of Attesta-
tion Transparency is that a secure service provider pub-
lishes (once) in the Attestation Transparency log an attested
statement A(Ienclave, Kserver). With this, they announce to
the world that an entity possessing K−1
server is an instance
of Ienclave. The secure service provider also obtains a valid
TLS server certiﬁcate for Kserver through normal means and
inputs it into the enclave. The certiﬁcate binds a Common
Name (CN) to the key Kserver, and the published attested
statement binds that to the identity Ienclave. When a client
establishes a TLS connection with the enclave, it veriﬁes
the certiﬁcate and the enclave uses its K−1
server to sign the
key exchange, after which the client has established a secure
channel with the enclave. The whole process is depicted in
Figure 2 on page 4.
An Attestation Transparency monitor performs a similar
function to a Certiﬁcate Transparency monitor. The AT
monitor continuously watches the CT logs for certiﬁcates is-
sued to the CN identifying the secure service it is interested
in. Once a new certiﬁcate with public key K is logged, the
monitor checks the AT logs to see if any attested statements
A(I, K) with that same key K exist.
If such an attested
statement does exist, the monitor checks whether the iden-
tity I is valid for that service. If the identity is invalid, or no
attested statement was found in the log, the monitor raises
the alarm.
To prevent spamming, an AT log might require proof of
existence of a valid certiﬁcate in the CT logs before accepting
statements for submission. As such, there can be a short
period of time where a certiﬁcate will exist in the CT logs
without a corresponding statement in the AT logs. Monitors
will need to take this into account and choose an appropriate
wait time (e.g. two maximum merge delays) before raising
the alarm. This wait time is the maximum time during
which clients could be vulnerable to attack, before it could
be noticed.
5.2
Incremental deployment — logs
While from the previous description it sounds like the AT
log is separate from the CT log, this is not necessarily the
case. Instead, attested statements can be included in a cer-
tiﬁcate as a X.509 Certiﬁcate extension.4 The secure service
can output the attested statement in the requested exten-
sions section of its certiﬁcate signing request. As Certiﬁcate
Transparency is already being deployed, this means Attesta-
tion Transparency does not require any new infrastructure.
We propose minor changes to CT to support AT, along with
an incremental deployment path towards a smoother process
in the future.
5.2.1 Fake attestation certiﬁcates
Currently the only data that can be included in the CT
logs are certiﬁcates and precertiﬁcates.5 To prevent spam,
the only certiﬁcates accepted in the logs are those signed by
a known CA.
In order to publish attested statements in the CT logs,
4We have allocated OID arc 1.3.6.1.4.1.4995.1000.4.1 for this
purpose.
5Precertiﬁcates are similar to regular certiﬁcates, conveying
the same information. However, they are constructed in
such a way that they can’t be used in place of a regular
certiﬁcate.
we propose that CT logs also accept (pre)certiﬁcates from
an ‘Attestation Authority’ (AA). This is a fake Certiﬁcation
Authority that only issues pre-certiﬁcates and is not trusted
by regular TLS clients. The AA follows a simple proce-
dure:
it takes as input a certiﬁcate, a Signed Certiﬁcate
Timestamp and a certiﬁcate signing request that includes a
statement as an extension. The AA veriﬁes the certiﬁcate
and SCT and it veriﬁes the CSR includes the same public
key. It will then issue a precertiﬁcate with the same Subject
Name and public key, including the statement extension and
a pointer to the real certiﬁcate. The AA will only issue one
precertiﬁcate per real certiﬁcate.
5.2.2 Attested statement log entries
An alternate ﬁrst step in the deployment process is to
move the Attestation Authority’s responsibilities into the
CT log server. This requires a change in the CT speciﬁca-
tion to add a new entry type for attested statements. The
inputs for the submission procedure will be the same, the
veriﬁcation and spam protection measures will be the same,
only the output will be an attested statement-type entry in
the CT log as well as an SCT for this entry.
While this setup increases the functionality and complex-
ity of the CT log, it reduces the logistical complexity com-
pared to using an Attestation Authority.
5.2.3 Certiﬁcate extensions
It would be much more convenient to just include the
attested statement as an extension in the actual valid end-
entity TLS certiﬁcate. This would eliminate the need for
any changes to the current CT system. It would also solve
the issue of a potential delay between the appearance of the
certiﬁcate and the attested statement in the logs.
It is currently practically infeasible to obtain certiﬁcates
with such an extension. We contacted a total of 9 sub-
sidiaries of the largest 6 Certiﬁcation Authorities (Comodo,
Symantec Group, Go Daddy Group, GlobalSign, DigiCert,
StartCom) to see if they would issue certiﬁcates with this
extension. Of the CAs we contacted, 5 did not respond to
our inquiry or did not understand the request, 3 were un-
able to provide such certiﬁcates, and 1 was unsure whether
it would be possible, but if it was, it would cost an additional
US$5,000. We considered (ab)using an existing extension,
but were unable to ﬁnd a suitable one for the type of data
we’d want to include.
We encourage CAs to support Attestation Transparency
extensions in the future.
5.3 Validating enclave identities
The previous discussion depends on being able to deter-
mine what is a valid enclave identity. This is mostly a matter
of policy, and as such we present a mechanism that supports
diﬀerent policies. For each service, some entity or a group
of entities—known as the policy administrator —is in charge
of verifying the policy for an enclave identity. The policy
administrator maintains a private key for each service pol-
icy. After veriﬁcation, the policy administrator signs the
enclave code indicating that the policy was met. For ex-
ample, the EFF could establish a service that audits code
for privacy violations and certify complying code by signing
it. These compliance certiﬁcates can be used as an auto-
mated or semi-automated mechanism by client software to
determine whether it trusts the code.
7
When a system runs such a signed enclave, it will issue at-
testation statements of the form A(Isigner : Ienclave, Kserver).
An AT monitor will maintain a list of policy administrators
it trusts for a speciﬁc CN. Now, the monitor need not itself
verify the enclave identity in an AT log entry, it can instead
rely on a valid signature from the policy administrator.
5.3.1 Handling updates
This mechanism also enables code updates to services by
having an old version of the service check the policy for the
new version. This check is embedded in the code for the old
service, and has undergone the same vetting process as the
rest of the code. The whole process for updating from an
old service S1 to a new service S2 is as follows.
−−−−−−−−−→ P
S2
D
(1)
When a developer D is ready to update their service, they
will send their binary S2 and optionally documenting mate-
rials to the policy administrator P .
−−−−−−−−−−−−−→ D
SigP (I2)
P
(2)
The administrator will verify that the new code meets the
policy and sign it.
SP : S2
−−−−−−−−−−−−−−−−−−−−→ CA, AT
CSR(K),A(P :I2,K)
(3)
The service provider SP will launch the signed enclave S2,
which will output a certiﬁcate signing request including the
attested statement. The service provider submits the CSR
to a CA and the attested statement will be published to the
AT logs.
−−−−−−−−−−−−−−→ SP : S2, CT
CertCA(K)
CA
(4)
CA will sign a certiﬁcate. The certiﬁcate will be submitted
to the CT logs. With this publication, the policy admin-
istrator has announced to the world that Ienclave conforms
to the policy established by Isigner. The service provider
inputs the certiﬁcate into the signed enclave and launches
the service. AT monitors will see the new service with the
new certiﬁcate and can use the CT/AT log to verify that
everything is in order.
←−−−−−−−−−−−−−−−→ S1
secure channel
S2
(5)
S2 establishes a mutually authenticated secure channel with
S1. Both sides must verify the code identity of the other
side through attestation, as well as check the Certiﬁcate
Transparency proofs for their keys. Doing both validates
the service code and ensures that there is a public record
for this particular service instance.
Proof(A(P :I2,K)∈AT )
−−−−−−−−−−−−−−−−−−−−−−→ S1
S2
(6)
S2 provides S1—which is conﬁgured to accept policy state-
ments from policy administrator P —with proof that an at-
testation A(P : I2, K) appears in the AT logs.
←−−−−−−−−−−−−−− S1
sealed data
S2
(7)
S1 will subsequently transfer its sealed data to S2.
The update process can be performed without downtime
for the users. Users can keep using the old version of the
service as long as its certiﬁcate is still valid. Once the new
certiﬁcate has been obtained and the required publications
in the Transparency logs have been made for the updated
service, it can start accepting connections. From then on,
clients will see the new certiﬁcate and Transparency log
proofs, indicating that they are now using the updated ser-
vice.
5.3.2 Enclave policies
A policy shall at least require that the TLS private key
will not be leaked and that updates shall be considered valid
only when accompanied with a proof that they appear in the
Attestation Transparency logs. While a policy administrator
may issue a signed policy statement erroneously, the state-
ment will be ineﬀective until published. Once published,
others can hold the policy administrator accountable. It is
also important that an entity controlling a Certiﬁcate Trans-
parency log signing key must not also be an entity control-
ling a policy signing key. Such an entity would be able to
issue signed policy statements and obtain a signed ‘proof
of inclusion’ from the log without actually publishing the
statement.
Policies can cover a variety of use cases from most trans-
parent to not transparent. Care must be taken when a sin-
gle party has a fair amount of control over what would be
considered a secure service under their policy. Such con-
structions should always be paired with the ability for inde-
pendent entities to verify their claims post facto using trans-
parency. We propose the following policies:
Open-source reproducible builds The software de-
veloper publishes their source code publicly with a mech-
anism for reproducible builds. The same developer doubles
as the policy administrator and builds the binary and signs
it before handing it oﬀ to the service provider.
Independent audit The
software developer hands
their source code to an independent auditor. The auditor
vets the secure service and describes the security properties
the service has in a policy. It will sign the binary and publish
the policy. When, later, the developer submits an updated
version of the software, the auditor checks whether it meets
the security requirements per the established policy.
As an extension to this scheme, an independent auditor
could maintain several standard policies. For example they
might have a ‘secure IMAP service’ policy. Anyone will be
able to write software that adheres to the policy, and the au-
ditor can verify and sign all such software. This eﬀectively
creates an interoperable system of secure IMAP services,
where data can be transferred from one service to the other
while maintaining the security properties.