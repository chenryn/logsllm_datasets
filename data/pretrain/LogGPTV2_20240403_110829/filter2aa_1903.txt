java.io.ObjectInputStream 反序列化分析 -…
Skay
这⾥主要参考了李三师傅的⽂章 http://redteam.today/2020/02/14/Java%E5%8E%9F%E
7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%B
A%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E7%AE%80%E8%A6%8
1%E5%88%86%E6%9E%90/  膜膜膜
感觉看了⽂章⼀下⼦明⽩了好多，当然还有好很多疑问
图镇楼
(1) ⾸先起⼀个Demo调试环境
被序列化的类
/**
1
我们的序列化和反序列化⽅法
 * @auther Skay
2
 * @date 2020/12/20 22:06
3
 * @description
4
 */
5
public class theObj implements java.io.Serializable{
6
    public String theObj;
7
    public void mailCheck()
8
    {
9
        System.out.println("This is the "+this.theObj);
10
    }
11
}
12
import java.io.*;
1
2
/**
3
 * @auther Skay
4
 * @date 2020/12/20 22:07
5
 * @description
6
 */
7
public class SerializeDemo {
8
    public static void main(String [] args)
9
    {
10
        serialize();
11
        deserialize();
12
    }
13
14
    public static void serialize(){
15
        theObj theobj = new theObj();
16
        theobj.theObj = "I'm the obj";
17
        try
18
        {
19
            // 打开一个文件输入流
20
            FileOutputStream fileOut =
21
                    new FileOutputStream("se.txt");
22
            // 建立对象输入流
23
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
24
            //输出反序列化对象
25
            out.writeObject(theobj);
26
            out.close();
27
            fileOut.close();
28
            System.out.printf("Serialized data is saved in se.txt\n");
29
        }catch(Exception e)
30
        {
31
            e.printStackTrace();
32
        }
33
    }
34
35
    public static void deserialize(){
36
        theObj theobj = null;
37
        try
38
        {
39
运⾏如下：
(2) 调试分析
1.序列化 writeobject
1.1 预处理
我们断点下到writeobject中，⾸先进⼊预处理逻辑，进⼊writeobject0
            // 打开一个文件输入流
40
            FileInputStream fileIn = new FileInputStream("se.txt");
41
            // 建立对象输入流
42
            ObjectInputStream in = new ObjectInputStream(fileIn);
43
            // 读取对象
44
            theobj = (theObj) in.readObject();
45
            in.close();
46
            fileIn.close();
47
        }catch(Exception e)
48
        {
49
            e.printStackTrace();
50
            return;
51
        }
52
        System.out.println("Deserialized theObj...");
53
        System.out.println("This is the "+theobj.theObj);
54
    }
55
}
56
这⾥参考⽂章提到的是通过内省拿到desc(ObjectOutputStreamClass),
官⽅⽂档中描述ObjectOutputStreamClass：
类的序列化描述符。它包含类的名称和 serialVersionUID。可以使⽤ lookup ⽅法找到/创建
在此 Java VM 中加载的具体类的 ObjectStreamClass。
以便于后期对⽬标类进⾏内省(内省我暂时的理解是反射的阉割版本，阉割了反射的修改功
能，但是暂时还没有深⼊分析过反射和内省，留坑)，不过desc的⽣成让我们确定了suid是在
哪⾥产⽣的
然后⾛到java.io.ObjectOutputStream#writeOrdinaryObject开始真正的序列化数据
这⾥分为三个步骤TC_OBJECT、⽣成类的元信息、填充类的具体数据
1.2 TC_OBJECT
⾸先是TC_OBJECT的填⼊
什么是TC_OBJECT，我们观察java序列化后的字符串前⼏个字节
AC ED： STREAM_MAGIC。指定这是⼀个序列化协议。
00 05：STREAM_VERSION。序列化版本。
0x73：TC_OBJECT。指定这是⼀个new Object。
STREAM_MAGIC以及STREAM_VERSION的填⼊是在ObjectOutpuutStream初始化中就已
⽣成
如果想看其它写⼊对象序列化流的常量，参考java.io.ObjectStreamConstants
1.3 ⽣成类的元信息
进⼊java.io.ObjectOutputStream#writeClassDesc，这个⽅法的注释信息写的是将给定类描
述符的表示形式写⼊流。嗯，参考⽂章写的元信息，差不多吧，汉语博⼤精深。
然后再看这个⽅法，很简单的逻辑，if else，分别处理对象为null类型、handler类型、代理类
型 以及所有其它类型，我⾃定义的theObject会⾛到最后⼀个else⾥
跟进java.io.ObjectOutputStream#writeNonProxyDesc
⾸先会填⼊TC_CLASSDESC，类描述符，然后具体跟进writeClassDescriptor
writeClassDescriptor中会直接调⽤desc.writeNonProxy(this);
写⼊name 写⼊suid 在for循环⾥写⼊属性信息
这⾥注意⼀点writeNonProxyDesc走完writeClassDescriptor逻辑后，会递归调用
writeClassDesc写入父类元信息。
1.4 写⼊类属性具体值
java.io.ObjectOutputStream#writeSerialData
跟进java.io.ObjectOutputStream#defaultWriteFields
这个图⽚直接偷的233333333333(其它不是哦~)
可以看到在序列化的时候世界上是写入了各字段长度的，所以在后面反序列化读的时
候是按照字段长度来进行读取的。这也解释了为什么在反序列化数据后面插入脏数据
会不会影响反序列化。
2.反序列化 readobject
2.1 预处理
直接跟进到java.io.ObjectInputStream#readObject0，这⾥有⼀个switch case逻辑，还记得
刚才的115么？因为是对对象的操作，所以会⾛到这⾥啦~
因为反序列化的步骤就是序列化的逆向，所以还是和序列化的⼤致步骤⼀样，先是还原类的元
信息，然后读取对象属性的具体值 整体逻辑都在
java.io.ObjectInputStream#readOrdinaryObject中
2.2 还原类的元信息
java.io.ObjectInputStream#readClassDesc 好熟悉，有没得
进⼊java.io.ObjectInputStream#readNonProxyDesc
主要关注readClassDescriptor、readsolveClass、以及最后的递归
⾸先是readClassDescriptor
java.io.ObjectInputStream#readNonProxyDesc中有⼀个readClassDescriptor处理逻辑，⽅
法注释为：加载与指定流类等效的本地类，参考⽂章中说到这⾥就是对类类型进⾏了构建，开
始对类(desc)进⾏构建了。
跟进java.io.ObjectInputStream#readClassDescriptor，然后进⼊
java.io.ObjectStreamClass#readNonProxy 还原name 还原suid 循环还原ﬁelds，治理注意⼀
下ﬁeld，反序列化时，java时讲属性抽象到了ObjectStreamField类中
然后是 resolveClass
forname的第⼀个参数为false，所以不会执⾏static代码块
resolveClass，反序列化的防御点就是这⾥，重写ObjInputStream时，覆盖的也是这个⽅法，
加上⾃⼰的⽩名单或者⿊名单的过滤
最后是initNonProxy 初始化表示⾮代理类的元数据，以及对readClassDesc进⾏递归。对我们
的ObjectStreamClass desc进⾏还原
最后的ObjectStreamClass desc填充好后会返回
java.io.ObjectInputStream#readOrdinaryObject
然后交给到java.io.ObjectInputStream#readSerialData
2.3 还原类属性值 readSerialData
其实映⼊眼帘的还有个readExternalData，留个坑，回头再说
直接进⼊java.io.ObjectInputStream#readSerialData  ⽅法注释为读取每个可序列化类的实例
数据，嗯，就是将类属性的值填充进去
和writeobject⼀样，如果我们⾃定义了readobject⽅法，就不会⾛到default逻辑，会⾛到
java.io.ObjectStreamClass#invokeReadObject中
java.io.ObjectInputStream#defaultReadFields，
defaultReadFields，中第⼀个循环把原⽣类型数据赋给obj，第⼆个循环把数组、枚举类
型、对象类型赋给obj。
⾄此结束。
(3) 参考链接
http://redteam.today/2020/02/14/Java%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%
88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%
96%E4%BB%A3%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/