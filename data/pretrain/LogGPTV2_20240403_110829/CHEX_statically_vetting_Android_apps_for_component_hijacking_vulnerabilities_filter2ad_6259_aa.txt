# CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities

**Authors:**
- Long Lu†
- Zhichun Li‡
- Zhenyu Wu‡
- Wenke Lee†
- Guofei Jiang‡

**Affiliations:**
- †College of Computing, Georgia Institute of Technology
- ‡NEC Labs America, Inc.

**Contact:**
- {long, wenke}@cc.gatech.edu
- {zhichun, adamwu, gfj}@nec-labs.com

## Abstract
The rapid growth in the number of Android applications has made it one of the most popular mobile operating systems. However, the quality and security of these applications can be a significant concern. Poorly designed apps may contain vulnerabilities that can severely compromise user security and privacy. This paper examines a general category of vulnerabilities known as component hijacking vulnerabilities, which include previously reported issues such as permission leakage, unauthorized data access, and intent spoofing.

We introduce CHEX, a static analysis method to automatically detect component hijacking vulnerabilities in Android apps. By modeling these vulnerabilities from a data-flow analysis perspective, CHEX conducts low-overhead reachability tests on customized system dependence graphs. To address the unique challenges posed by Android's programming paradigm, we employ novel techniques to discover component entry points comprehensively and use app splitting to model asynchronous executions of multiple entry points.

We implemented CHEX based on Dalysis, a generic static analysis framework for Android app bytecode. We evaluated CHEX with 5,486 real Android apps, identifying 254 potential component hijacking vulnerabilities. The median execution time for CHEX is 37.02 seconds, making it suitable for high-volume app vetting and testing scenarios.

**Categories and Subject Descriptors:**
- D.2.4 [Software Engineering]: Software/Program Verification—Validation
- D.2.5 [Software Engineering]: Testing and Debugging—Code inspections and walk-throughs

**General Terms:**
- Security

**Keywords:**
- Static analysis, app splitting, component hijacking vulnerability

## 1. Introduction
Android has gained immense popularity, with over 100 million activations globally. The success of Android can be attributed, in part, to its vibrant application development community. As of the end of 2011, more than 400,000 apps were available in the official Android Market, resulting in 10 billion cumulative installations. Alternative markets also play a crucial role in hosting and distributing a large number of apps.

Given the continuous influx of new and updated apps, it is essential to provide a scalable vulnerability filtering system for app market operators. Such a system should quickly vet apps for potential security vulnerabilities and provide warning messages to help developers generate fixes. Static analysis is particularly well-suited for this task due to its complete code coverage and scalability.

In this paper, we propose CHEX (Component Hijacking Examiner), a static analysis tool for detecting component hijacking vulnerabilities. These vulnerabilities arise when apps improperly implement access control or inadvertently leak private data or privileges. We transform the detection problem into a data-flow analysis problem, seeking to identify hijack-enabling flows in apps. Component hijacking vulnerabilities include, but are not limited to, permission re-delegation and leakage, intent spoofing, and private data leakage.

Our contributions are threefold:
1. A sound method for automatically discovering all types of app entry points with a low false-positive rate.
2. The concept of app splitting to efficiently model interleaved executions of multiple entry points and track data flows across them.
3. The development of CHEX, an in-depth and scalable static analysis tool for component hijacking vulnerabilities.

We evaluated CHEX with 5,486 real Android apps, finding 254 potential vulnerabilities. The median execution time is 37.02 seconds, making it suitable for high-volume app vetting. Our manual validation showed a true positive rate of 81%.

## 2. Component Hijacking Problem
Android's component-based approach to app design promotes flexible interoperability and efficient lifecycle management. Developers organize their code into individual components (e.g., Activities, Services) that can serve requests from other components, the framework, or other apps if they are publicly exported.

However, the ability to reuse components under the containing app's identity can lead to security threats if the components are critical but not well-protected. We define component hijacking as a class of attacks that seek to gain unauthorized access to protected or private resources through exported components in vulnerable apps.

**Definition 1.** An unauthorized app, issuing requests to one or more public components in a vulnerable app, seeks to:
- G1: Read sensitive data out of the app.
- G2: Write to critical data regions inside the app.
- G3: Perform a combination of G1 and G2.

To determine if a component is vulnerable to hijacking, we need to find feasible data flows that enable any of the above goals without passing through security checkpoints. These flows are referred to as hijack-enabling flows.

For example, if the Enumerator Service in Figure 1 is vulnerable, a hijack-enabling flow might propagate the contact list into an object returned to the requester, allowing the attacker to read the data directly. In more complex scenarios, the data sink may not be immediately accessible, but if the component contains a hijack-enabling flow that writes requester-supplied input into output-controlling data, the attacker can still indirectly read the information.

Component hijacking can also occur across a chain of components, where hijack-enabling flows span multiple component boundaries. Transforming the vulnerability detection problem into a data-flow analysis problem allows us to leverage existing techniques. Unlike data leakage detection, which only reports outbound sensitive data flows, component hijacking vulnerabilities are always exploitable and undermine user privacy.

## 3. Analysis Method
CHEX models component hijacking vulnerabilities from a data-flow analysis perspective. It analyzes Android apps and detects possible hijack-enabling flows by conducting reachability tests on customized system dependence graphs. To handle the unique challenges of Android's programming paradigm, we employ a novel technique to discover component entry points comprehensively and use app splitting to model asynchronous executions of multiple entry points.

## 4. Implementation and Evaluation
We implemented CHEX based on Dalysis, a generic static analysis framework for Android app bytecode. We evaluated CHEX with 5,486 real Android apps, identifying 254 potential component hijacking vulnerabilities. The median execution time is 37.02 seconds, making it suitable for high-volume app vetting. Our manual validation showed a true positive rate of 81%.

## 5. Case Studies
We conducted detailed case studies on the vulnerable apps uncovered by CHEX, providing practical insights into the vulnerabilities and possible exploits.

## 6. Limitations and Workarounds
We discuss the limitations of our work and propose possible workarounds to address these limitations.

## 7. Related Work
We survey related work on component hijacking and other relevant topics.

## 8. Conclusion
In conclusion, CHEX provides a scalable and effective solution for detecting component hijacking vulnerabilities in Android apps. Future work will focus on further improving the tool and addressing the identified limitations.