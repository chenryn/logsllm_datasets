19,998
–
8,344
∗159,542
∗43,852
1,584
8,372
7,728
13,903
23,482
12,867
39,804
93,677
Figure 8: The running time in seconds and communication overhead in MB for
various join operations and application. The input tables each contain n rows. The
[PSWW18] protocol has two implementation where [PSWW18]b is optimized for
the WAN setting. – denotes that the running time is not available. * denotes that
the running times were linearly extrapolated from the values of n provided by the
publication.
running time as shown in Figure 8. Out of these three protocol [KKRT16] is the
fastest requiring 3.8 seconds in the LAN setting to intersect two sets of size n = 220
while our protocol requires 4.9 seconds. However, our protocol is fully composable
while [KKRT16] is not. Considering this we argue that a slowdown of 1.28× is
acceptable. When compared to [BA12] which provides the same composable func-
tionality, our protocol is estimated3 to be 1220× faster.
In the WAN setting our protocol has a relative slowdown compared to [KKRT16].
This can be contributed to our protocol requiring more rounds and communication.
For instance, with n = 220 the protocol of [KKRT16] in the WAN setting requires
7.5 seconds while our protocol requires 41 seconds, a diﬀerence of 5.5×. With
respect to the communication overhead, our protocol for n = 220 requires 769 MB
of communication and [KKRT16] requires 127 MB, a diﬀerence of 6×. The WAN
running time and communication overhead of [BA12] is not known due to their code
not being publicly available.
Joins/Union. The second point of comparison is performing an inner join protocol
on two tables consisting of ﬁve columns of 32-bit values. We note that [BA12] is
capable of this task but no performance results were available. Instead we compare
with the join protocol of [LTW13]. This protocol is composable but requires that the
cardinality of the intersection be revealed after each join is performed. As previously
discussed, this leakage limits the suitability of the protocol in many applications.
The numbers reported for [LTW13] are from their paper and the experiments were
performed on three servers each with 12 CPUs at 3GHz in the LAN setting. As
3We linearly extrapolate the overhead of their protocol, despite having O(n log n) complexity.
25
can be seen in Figure 8, we estimate4 our protocol is roughly 200× faster in the
LAN setting. For example, with n = 220 our protocol requires a running time of
9.1 seconds while [LTW13] requires a running time of 2048 seconds. Moreover, our
protocol scales quite well with the addition of these extra four columns as compared
to a intersection protocol. For example, in the WAN setting an intersection with
n = 220 requires 41 seconds while the addition of the four columns results in a
running time of 61 seconds. For both protocols, operations such as left join and
unions can be performed with little to no additional computation as compared to
inner join.
[PSWW18] and De Cristofaro et al.
We observed the following relative performance of the various operations of our
protocol. Secret sharing the input tables tool 3% of the time, computing the ran-
domized encodings via Πencode required 50%, constructing the cuckoo hash table
via ΠPermute required 6%, selecting the rows from the cuckoo table required 26%,
and the ﬁnal circuit computation via Fmpc required 14%. These percentages were
obtained for n = 220 in the LAN setting and hold relatively stable regardless of n.
Cardinality. The set cardinality protocol presented here also outperforms all previ-
ous protocols. As described in Section 4, our cardinality protocol allows the omission
of the switching network which reduces the amount of communication and overall
running time. We demonstrate the performance by comparing with the two-party
protocols of Pinkas et al.
[CGT12]. The
protocol of [PSWW18] was benchmarked on two multi-core i7 machines at 3.7GHz
and 16GB of RAM with similar network settings. For the protocol of [CGT12], we
performed rough estimates on the time required for our machine to perform the com-
putation without any communication overhead. For sets of size n = 220 our protocol
requires 3.1 seconds in the LAN setting and 15.8 in the WAN setting. The next
fastest protocol is [PSWW18] which requires 86.6 seconds in the LAN setting and
390 seconds in the WAN setting. In both cases this represents more than a 20× dif-
ference in running time. [PSWW18] considers a variant of their protocol optimized
for the WAN setting which reduces their communication at the expense of increased
running time. The protocol of [CGT12] requires the most running time by a large
margin due to the protocol being based on exponentiation. Just to locally perform
these public key operations requires roughly 4200 seconds of computation on our
benchmark machine, a diﬀerence of 1350×. However, the protocol of [CGT12] also
requires the least amount of communication, consisting of 99MB for n = 220 while
our protocol requires 521MB followed by [PSWW18] with almost 10GB.
Sum. The last generic comparison we perform is for securely computing the weighted
sum of the intersection. Our protocol for performing this task is described in Sec-
[IKN+17] which is the protocol
tion 4. We compare to the protocol of Ion et al.
behind Google’s Join-and-Compute. This protocol can be viewed as an extension of
the public key based cardinality protocol of [CGT12]. In particular, [IKN+17] also
4Again, we linearly extrapolate the overhead of the protocol.
26
revealed the cardinality of the intersection and then performs a secondary compu-
tation using Paillier homomorphic encryption to compute the sum. Although this
protocol reveals more information than ours, we still think it is a valuable point of
comparison. Not surprisingly, the protocol of [IKN+17] requires signiﬁcantly more
computation time than our protocol. For a dataset size of n = 220, their protocol
requires almost 30000 seconds to just perform the public key operations without any
communication. Our protocol requires just 6.8 seconds in the LAN setting and 51
in the WAN setting. Both of these protocols also consume roughly the same amount
of communication with [IKN+17] requiring 483 MB and our protocol requires 527
MB, a increase of just 9 percent.
Voter Registration. We now turn our attention to the application of auditing the
voter registration data between and within the states of the United States as de-
scribed in Section 5.1 & Appendix A. In summary, this application checks that a
registered voter is not registered in more than one state and cross validates that
their current address is correct. Only the identities of the voters which have con-
ﬂicting data are revealed to the appropriate state to facilitate a process to contact
the individual. In addition, the application can be extended to assist the process of
enrolling unregistered citizens. This audit process is performed using two types of
join queries. First, each state computes a left join between the DMV database and
the list of registered voters. In Figure 9 we call this join Voter Intra-state. For all
pairs of states, these tables are then joined to identify any registration error, e.g.
double registered. This join is referred to as Voter Inter-state. Performance metrics
are reported for each of these joins individually and then we estimate the total cost
to perform the computation nation wide.
As shown in Figure 9, our protocol can perform the Voter Intra-state join with
an input set size of 16 million voters (n = 224) in 115 seconds on a LAN network
and in 456 seconds on a WAN network. Considering all but three states have a
voting population less than n = 224, we consider this a realistic estimate on the
running time overhead. Our protocol also achieves relatively good communication
overhead of 13.9 GB, where each of the servers sends roughly one third of this. On
average, that is 830 bytes for each of the n records. Given these tables, the Voter
Inter-state join is performed between all pairs of states. For two states with n = 224,
the benchmark machine required 135 seconds in the LAN setting and 748 seconds in
the WAN setting. The added overhead in this second join protocol is an additional
where clause which requires a moderate sized binary circuit to be securely evaluated.
This join requires 23.4 GB of communication.
Given the high value and low frequency of this computation we argue that these
computational overheads are very reasonable. Given the current population esti-
mates of each state, we extrapolate that the overall running time to run the protocol
between all pairs of 50 states in a LAN setting would be 53,340 seconds (14.8 hours)
or 285,687 seconds (about 80 hours) in the WAN setting. However, the running
time in the WAN setting could easily be reduced by running protocols in parallel
27
and increasing the bandwidth above the relatively low 100Mbps per party. The
total communication overhead is 9,131 GB which is the main bottleneck. While this
amount of communication is non-negligible, the actual dollar amount on a cloud
such as AWS[aws18] is relatively low (given the importance of the computation),
totaling roughly $820[Has17].
Threat Log. In this application N party secret share their data between the three
computational parties and delegate the task of identifying the events that appear in
at least k out of the N data sets. As described in Section 5.2, the protocol proceeds
by taking the union of the sets and then the number of times each event occurred
is counted and compared against k. Each event that appears more than k times is
then revealed to all parties. The union protocol can only function with respect to
two input sets. To compute the union of N sets we use a binary tree structure where
pairs of sets are combined. As such, there are a total of N − 1 union operations and
a depth of log N protocol instances.
When benchmarking we consider N = {2, 4, 8} input sets each of size n ∈
{28, 212, 216, 220, 224}. Since we do not reveal the size of the union, the ﬁnal ta-
ble will be of size nN . For N = 2 sets each with n = 224 items our protocol requires
121 seconds in the LAN setting and 586 seconds in the WAN setting. The total
communication is 804MB, or approximately 24 bytes per record. If we increase the
number of sets to N = 8 we observe that the LAN running time increases to 1,021
seconds and 4,228 seconds in the WAN setting. Given the the total input size in-
creased by 4×, we observe roughly an 8× increase in running time. This diﬀerence is
due to each successive union operation being twice as big. Theoretically the running
time and communication of this protocol is O(nN log N ).
References
[AFL+16] Toshinori Araki, Jun Furukawa, Yehuda Lindell, Ariel Nof, and Kazuma
Ohara. High-throughput semi-honest secure three-party computation
with an honest majority.
In Edgar R. Weippl, Stefan Katzenbeisser,
Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors, Pro-
ceedings of the 2016 ACM SIGSAC Conference on Computer and Com-
munications Security, Vienna, Austria, October 24-28, 2016, pages 805–
817. ACM, 2016.
[alt18]
Alienvault open threat exchange (otx). 2018.
[ARS+15] Martin R. Albrecht, Christian Rechberger, Thomas Schneider, Tyge
Tiessen, and Michael Zohner. Ciphers for MPC and FHE. In Elisabeth
Oswald and Marc Fischlin, editors, Advances in Cryptology - EURO-
CRYPT 2015 - 34th Annual International Conference on the Theory
and Applications of Cryptographic Techniques, Soﬁa, Bulgaria, April
28
26-30, 2015, Proceedings, Part I, volume 9056 of Lecture Notes in Com-
puter Science, pages 430–454. Springer, 2015.
[aws18]
Amazon web services. 2018.
[BA12]
Marina Blanton and Everaldo Aguiar. Private and oblivious set and
multiset operations. pages 40–41, 2012.
[BEE+17]
[CB17]
[CGT12]
Johes Bater, Gregory Elliott, Craig Eggen, Satyender Goel, Abel Kho,
and Jennie Rogers. Smcql: Secure querying for federated databases.
Proc. VLDB Endow., 10(6):673–684, February 2017.
Henry Corrigan-Gibbs and Dan Boneh. Prio: Private, robust, and scal-
able computation of aggregate statistics.
In Aditya Akella and Jon
Howell, editors, 14th USENIX Symposium on Networked Systems De-
sign and Implementation, NSDI 2017, Boston, MA, USA, March 27-29,
2017, pages 259–282. USENIX Association, 2017.
Emiliano De Cristofaro, Paolo Gasti, and Gene Tsudik. Fast and pri-
vate computation of cardinality of set intersection and union. In Josef
Pieprzyk, Ahmad-Reza Sadeghi, and Mark Manulis, editors, Cryptol-
ogy and Network Security, 11th International Conference, CANS 2012,
Darmstadt, Germany, December 12-14, 2012. Proceedings, volume 7712,
pages 218–231. Springer, 2012.
[CHLR18] Hao Chen, Zhicong Huang, Kim Laine, and Peter Rindal. Labeled psi
from fully homomorphic encryption with malicious security. In Proceed-
ings of the 2018 ACM SIGSAC Conference on Computer and Commu-
nications Security, CCS 2018, Toronto, Canada, October 14 - 16, 2018.
ACM, 2018.
[CLR17]
Hao Chen, Kim Laine, and Peter Rindal. Fast private set intersection
from homomorphic encryption. In Bhavani M. Thuraisingham, David
Evans, Tal Malkin, and Dongyan Xu, editors, Proceedings of the 2017
ACM SIGSAC Conference on Computer and Communications Security,
CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017, pages
1243–1255. ACM, 2017.
[DRRT18] Daniel Demmler, Peter Rindal, Mike Rosulek, and Ni Trieu. Pir-psi:
Scaling private contact discovery. Proceedings on Privacy Enhancing
Technologies, 2018(4), 2018.
[DSS12]
Anupam Datta, Divya Sharma, and Arunesh Sinha. Provable de-
anonymization of large datasets with sparse dimensions. In Pierpaolo
Degano and Joshua D. Guttman, editors, Principles of Security and
29
Trust, pages 229–248, Berlin, Heidelberg, 2012. Springer Berlin Heidel-
berg.
[eri18]
Electronic registration information center, inc. 2018.
[Fac20]
Facebook. Crypten: A research tool for secure machine learning in
pytorch. 2020.
[Has17]
Hasham. Aws data transfer costs and how to minimize them. 2017.
[HFH99]
Bernardo A. Huberman, Matt Franklin, and Tad Hogg. Enhancing
privacy and trust in electronic communities. In Proceedings of the 1st
ACM Conference on Electronic Commerce, EC ’99, pages 78–86, New
York, NY, USA, 1999. ACM.
[IKN+17] Mihaela Ion, Ben Kreuter, Erhan Nergiz, Sarvar Patel, Shobhit Sax-
ena, Karn Seth, David Shanahan, and Moti Yung. Private intersection-
sum protocol with applications to attributing aggregate ad conver-
sions. Cryptology ePrint Archive, Report 2017/738, 2017. https:
//eprint.iacr.org/2017/738.
[IKNP03] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. Extending
oblivious transfers eﬃciently. pages 145–161, 2003.
[KKRT16] Vladimir Kolesnikov, Ranjit Kumaresan, Mike Rosulek, and Ni Trieu.
Eﬃcient batched oblivious PRF with applications to private set inter-
section. pages 818–829, 2016.
[KLS+17]
´Agnes Kiss, Jian Liu, Thomas Schneider, N. Asokan, and Benny Pinkas.
Private set intersection for unequal set sizes with mobile applications.
PoPETs, 2017(4):177–197, 2017.
[KMP+17] Vladimir Kolesnikov, Naor Matania, Benny Pinkas, Mike Rosulek,
and Ni Trieu. Practical multi-party private set intersection from
symmetric-key techniques. In Bhavani M. Thuraisingham, David Evans,
Tal Malkin, and Dongyan Xu, editors, Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications Security, CCS
2017, Dallas, TX, USA, October 30 - November 03, 2017, pages 1257–
1272. ACM, 2017.
[LTW13]
Sven Laur, Riivo Talviste, and Jan Willemson. From oblivious aes to
eﬃcient and secure database join in the multiparty setting. In Proceed-
ings of the 11th International Conference on Applied Cryptography and
Network Security, ACNS’13, pages 84–101, Berlin, Heidelberg, 2013.
Springer-Verlag.
30
[MD20]
[Mea86]
[Mer12]
[MR18]
[MS13]
Yann Dupis et. al Morten Dahl, Justin Patriquin. Tf encrypted: En-
crypted deep learning in tensorﬂow. 2020.