plementation of device drivers prevents ShellOS from
running directly as the host OS. Running directly as the
host OS could have additional performance beneﬁts in
detecting code injection for network services. We leave
this for future work.
Finally, ShellOS provides a framework for fast de-
tection and analysis of a buffer, but an analyst or auto-
mated data pre-processor (such as that presented in §5)
must provide these buffers. As our own experience has
shown, doing so can be non-trivial, as special attention
must be taken to ensure a realistic operating environment
is provided to illicit the proper execution of the sample
under inspection. This same challenge holds for all VM
or emulation-based detection approaches we are aware
of (e.g., [6, 8, 10, 31]). Our framework can be extended
to beneﬁt from the active body of research in this area.
6 Limitations
7 Conclusion
Code injection attack detection based on run-time anal-
ysis, whether emulated or supported through direct CPU
execution, generally operates as a self-sufﬁcient black-
box wherein a suspicious buffer of code or data is sup-
plied, and a result returned. ShellOS attempts to pro-
vide a run-time environment as similar as possible to that
which the injected code expects. That said, we cannot
ignore the fact that shellcode designed to execute un-
der very speciﬁc conditions may not operate as expected
(e.g., non-self-contained [19, 26], context-keyed [11],
and swarm attacks [5]). We note, however, that by requir-
ing more speciﬁc processor state, the attack exposure is
reduced, which is usually counter to the desired goal —
that is, exploiting as many systems as possible. The same
rational holds for the use of ROP-based attacks, which
require speciﬁc data being present in memory.
More speciﬁc to our framework is that we cur-
rently employ a simplistic approach for loop detection.
Whereas software-based emulators are able to quickly
detect and (safely) exit an inﬁnite loop by inspecting pro-
gram state at each instruction, we only have the opportu-
nity to inspect state at each clock tick. At present, the
overhead associated with increasing timer frequency to
inspect program state more often limits our ability to exit
from inﬁnite loops more quickly. In future work, we plan
to explore alternative methods for safely pruning such
loops, without incurring excessive overhead.
Furthermore, while employing hardware virtualization
to run ShellOS provides increased transparency over
previous approaches, it may still be possible to detect a
virtualized environment through the small set of instruc-
tions that must still be emulated. We note, however, that
while ShellOS currently uses hardware virtualization
extensions to run along side a standard host OS, only im-
In this paper, we propose a new framework for en-
abling fast and accurate detection of code injection at-
tacks. Speciﬁcally, we take advantage of hardware virtu-
alization to allow for efﬁcient and accurate inspection of
buffers by directly executing instruction sequences on the
CPU. Our approach allows for the modular use of exist-
ing run-time heuristics in a manner that does not require
tracing every machine-level instruction, or performing
unsafe optimizations. In doing so, we provide a foun-
dation that defenses for code injection attacks can build
upon. We also provide an empirical evaluation, spanning
real-world attacks, that aptly demonstrates the strengths
of our framework.
Code Availability
We anticipate that the source code for the ShellOS ker-
nel and our packaged tools will be made available under
a BSD license for research and non-commercial uses.
Please contact the ﬁrst author for more information on
obtaining the software.
Acknowledgments
We are especially grateful to Michalis Polychronakis for
making nemu available to us, and for fruitful discussions
regarding this work. Thanks to Teryl Taylor, Scott Coull,
Montek Singh and the anonymous reviewers for their in-
sightful comments and suggestions for improving an ear-
lier draft of this paper. We also thank Bil Hayes and Mur-
ray Anderegg for their help in setting up the network-
ing infrastructure that supported some of the throughput
analyses in this paper. This work is supported by the
National Science Foundation under award CNS-0915364
and by a Google Research Award.
Notes
1See, for example, “Sophisticated, targeted malicious PDF doc-
uments exploiting CVE-2009-4324” at http://isc.sans.edu/
diary.html?storyid=7867.
2See the discussion at https://bugs.launchpad.net/
qemu/+bug/661696, November, 2010.
3We reset registers via popa and fxrstor instructions, while
memory is reset by traversing page table entries and reloading pages
with the dirty bit set.
4The
TAPiON engine
specialised.info/all/tapion/.
is
available
at
http://pb.
5We update this network trace with payload byte distributions col-
lected in 2011.
References
[1] P. Baecher and M. Koetter. Libemu - x86 shell-
code emulation library. Available at http://
libemu.carnivore.it/, 2007.
[2] F. Bellard. Qemu, a fast and portable dynamic
translator. In Proceedings of the USENIX Annual
Technical Conference, pages 41–41, Berkeley, CA,
USA, 2005.
[3] E. Buchanan, R. Roemer, H. Shacham, and S. Sav-
age. When Good Instructions Go Bad: General-
izing Return-Oriented Programming to RISC.
In
ACM Conference on Computer and Communica-
tions Security, Oct. 2008.
[4] B. Z. Charles Curtsigner, Benjamin Livshits and
C. Seifert. Zozzle: Fast and Precise In-Browser
Javascript Malware Detection. USENIX Security
Symposium, August 2011.
[5] S. P. Chung and A. K. Mok. Swarm attacks against
network-level emulation/analysis. In International
symposium on Recent Advances in Intrusion Detec-
tion, pages 175–190, 2008.
[6] M. Cova, C. Kruegel, and V. Giovanni. Detection
and analysis of drive-by-download attacks and ma-
licious javascript code. In International conference
on World Wide Web, pages 281–290, 2010.
[7] Y. Ding, T. Wei, T. Wang, Z. Liang, and W. Zou.
Heap Taichi: Exploiting Memory Allocation Gran-
In Annual
ularity in Heap-Spraying Attacks.
Computer Security Applications Conference, pages
327–336, 2010.
[8] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda.
Defending browsers against drive-by downloads:
Mitigating heap-spraying code injection attacks. In
Detection of Intrusions and Malware & Vulnerabil-
ity Assessment, June 2009.
[9] P. Fogla, M. Sharif, R. Perdisci, O. Kolesnikov, and
W. Lee. Polymorphic blending attacks. In USENIX
Security Symposium, pages 241–256, 2006.
[10] S. Ford, M. Cova, C. Kruegel, and G. Vigna. An-
alyzing and detecting malicious ﬂash advertise-
ments. In Computer Security Applications Confer-
ence, pages 363 –372, Dec 2009.
[11] D. A. Glynos. Context-keyed Payload Encoding:
Fighting the Next Generation of IDS. In Athens IT
Security Conference (ATH.C0N), 2010.
[12] R. Goldberg. Survey of Virtual Machine Research.
IEEE Computer Magazine, 7(6):34–35, 1974.
[13] B. Gu, X. Bai, Z. Yang, A. C. Champion, and
D. Xuan. Malicious shellcode detection with vir-
In International Confer-
tual memory snapshots.
ence on Computer Communications (INFOCOM),
pages 974–982, 2010.
[14] F. Hernandez-Campos, F. Smith, and K. Jeffay.
Tracking the evolution of web trafﬁc: 1995-2003.
In Proceedings of the 11th IEEE/ACM Interna-
tional Symposium on Modeling, Analysis and Sim-
ulation of Computer Telecommunication Systems
(MASCOTS), pages 16–25, 2003.
[15] F. Hernandez-Campos, K. Jeffay, and F. Smith.
Modeling and generating TCP application work-
In 14th IEEE International Conference on
loads.
Broadband Communications, Networks and Sys-
tems (BROADNETS), pages 280–289, 2007.
[16] I. Kim, K. Kang, Y. Choi, D. Kim, J. Oh, and
K. Han. A Practical Approach for Detecting Ex-
ecutable Codes in Network Trafﬁc. In Asia-Paciﬁc
Network Ops. & Mngt Symposium, 2007.
[17] G. MacManus and M. Sutton. Punk Ode: Hiding
Shellcode in Plain Sight. In Black Hat USA, 2006.
[18] L. Martignoni, R. Paleari, G. F. Roglia, and D. Br-
In Interna-
uschi.
tional Symposium on Software Testing and Analy-
sis, pages 261–272, 2009.
Testing CPU Emulators.
[19] J. Mason, S. Small, F. Monrose, and G. MacManus.
English shellcode. In Conference on Computer and
Communications Security, pages 524–533, 2009.
[20] MSDN. Mindump header structure. MSDN
http://msdn.microsoft.
Library.
See
com/en-us/library/ms680378(VS.85)
.aspx.
[21] R. Paleari, L. Martignoni, G. F. Roglia, and D. Br-
uschi. A Fistful of Red-Pills: How to Automati-
cally Generate Procedures to Detect CPU Emula-
tors. In USENIX Workshop on Offensive Technolo-
gies, 2009.
[22] A. Pasupulati, J. Coit, K. Levitt, S. F. Wu, S. H. Li,
R. C. Kuo, and K. P. Fan. Buttercup: on Network-
based Detection of Polymorphic Buffer Overﬂow
Vulnerabilities. In IEEE/IFIP Network Op. & Mngt
Symposium, pages 235–248, May 2004.
[23] U. Payer, P. Teuﬂ, and M. Lamberger. Hybrid En-
gine for Polymorphic Shellcode Detection. In De-
tection of Intrusions and Malware & Vulnerability
Assessment, pages 19–31, 2005.
[24] J. D. Pincus and B. Baker. Beyond stack Smashing:
Recent Advances in Exploiting Buffer Overruns.
IEEE Security and Privacy, 4(2):20–27, 2004.
[25] M. Polychronakis, K. G. Anagnostakis, and E. P.
Markatos. Network-level Polymorphic Shellcode
In Detection of In-
Detection using Emulation.
trusions and Malware & Vulnerability Assessment,
pages 54–73, 2006.
[26] M. Polychronakis, K. G. Anagnostakis, and E. P.
Markatos. Emulation-based Detection of Non-self-
contained Polymorphic Shellcode. In International
Symposium on Recent Advances in Intrusion Detec-
tion, 2007.
[27] M. Polychronakis, K. G. Anagnostakis, and E. P.
Markatos. An Empirical Study of Real-world Poly-
In USENIX
morphic Code Injection Attacks.
Workshop on Large-Scale Exploits and Emergent
Threats, 2009.
[28] M. Polychronakis, K. G. Anagnostakis, and E. P.
Markatos. Comprehensive shellcode detection us-
In Annual Computer Se-
ing runtime heuristics.
curity Applications Conference, pages 287–296,
2010.
[29] P. V. Prahbu, Y. Song, and S. J. Stolfo. Smash-
ing the Stack with Hydra: The Many Heads of Ad-
vanced Polymorphic Shellcode, 2009. Presented at
Defcon 17, Las Vegas.
[30] M. Probst. Fast machine-adaptable dynamic binary
translation. In Proceedings of the Workshop on Bi-
nary Translation, 2001.
[31] N. Provos, D. McNamee, P. Mavrommatis,
K. Wang, and N. Modadugu. The ghost in the
browser: Analysis of web-based malware.
In
Usenix Workshop on Hot Topics in Botnets, 2007.
[32] N. Provos, P. Mavrommatis, M. A. Rajab, and
In
F. Monrose. All Your iFRAMEs Point to Us.
USENIX Security Symposium, pages 1–15, 2008.
[33] T. Raffetseder, C. Kruegel, and E. Kirda. Detecting
System Emulators. Information Security, 4779:1–
18, 2007.
[34] M. A. Rahman. Getting 0wned by malicious PDF -
analysis. SANS Institute, InfoSec Reading Room,
2010.
[35] P. Ratanaworabhan, B. Livshits, and B. Zorn. NOZ-
ZLE: A Defense Against Heap-spraying Code In-
jection Attacks. In USENIX Security Symposium,
pages 169–186, 2009.
[36] A. Sotirov and M. Dowd. Bypassing Browser
Memory Protections. In Black Hat USA, 2008.
[37] D. Stevens. Malicious PDF documents. Informa-
tion Systems Security Association (ISSA) Journal,
July 2010.
[38] T. Toth and C. Kruegel. Accurate Buffer Overﬂow
Detection via Abstract Payload Execution. In Inter-
national Symposium on Recent Advances in Intru-
sion Detection, pages 274–291, 2002.
[39] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and
E. P. Markatos. Combining static and dynamic
analysis for the detection of malicious documents.
In Proceedings of the Fourth European Workshop
on System Security, pages 4:1–4:6, New York, NY,
USA, 2011.
[40] A. Vasudevan and R. Yerraballi. Stealth break-
In 21st Annual Computer Security Appli-
points.
cations Conference, pages 381–392, 2005.
[41] X. Wang, Y.-C. Jhi, S. Zhu, and P. Liu. STILL:
Exploit Code Detection via Static Taint and Initial-
ization Analyses. Annual Computer Security Appli-
cations Conference, pages 289–298, Dec 2008.
[42] Y. Younan, P. Philippaerts, F. Piessens, W. Joosen,
S. Lachmund, and T. Walter. Filter-resistant code
injection on ARM. In ACM Conference on Com-
puter and Communications Security, pages 11–20,
2009.
[43] Q. Zhang, D. S. Reeves, P. Ning, and S. P. Iyer. An-
alyzing Network Trafﬁc to Detect Self-Decrypting
Exploit Code. In ACM Symposium on Information,
Computer and Communications Security, 2007.