3)
i ==
return t[key][i].value
/**
        s
obj ：=ConstructorO;
obj.Set(key,value,timestamp) ;
*param_2 := obj-Get(key,timestamp);
*
984.StringWithoutAAAorBBB
题目
Given two integers A and B, return any string S such that:
●S has length A + B and contains exactly A *a' letters, and exactly B *b' letters;
●The substring 'aaa' does not occur in S;
●The substring 'bbb' does not occur in S.
Example 1:
Input: A = 1, B = 2
Output: “abb"
Explanation: “abb", "bab" and "bba" are all correct answers.
Example 2:
Input: A = 4, B = 1
Output: “aabaa"
Note:
---
## Page 943
1. 0 = 1 { //bbabbabb
for i:= 0;i pa[] es[]g 'a[]es[] => 0●
Note: input types have been changed on April 15, 2019. Please reset to default code definition to
get new method signature.
题目大意
这道题考察的是滑动窗口的问题。
给出2个数组A和数组B。要求求出这2个数组的交集数组。题意见图。
解题思路
---
## Page 947
交集的左边界应该为，start:=max（A[i].Start，B[j].Start)，右边界为，end：=
min（A[i].End，B[j].End)，如果startB[j].End，代表A数组范围比B数组大，B的游标右移。
代码
package leetcode
/**
*Definition for an interval.
type Interval struct {
Start int
End
int
*/
func intervalIntersection(A []Interval, B []Interval) []Interval {
res := []Interval{}
for i,j:= 0,0; i <len(A) && j <len(B);{
start := max(A[i].Start, B[j].Start)
end := min(A[i] .End, B[j] .End)
if start <= end {
res = append(res, Interval{Start: start, End: end})
if A[i] .End <= B[j] .End {
i++
}else{
j++
return res
990.SatisfiabillityofEquality_Equations
题目
Given an array equations of strings that represent relationships between variables, each string
equations [i] has length 4 and takes one of two different forms: "a==b" or *a!=b". Here, a
and b are lowercase letters (not necessarily different) that represent one-letter variable names.
Return true if and only if it is possible to assign integers to variable names so as to satisfy all the
given equations.
Example 1:
---
## Page 948
Input: ["a==b","b!=a"]
Output: false
Explanation: If we assign say, a = l and b = l, then the first equation is
satisfied, but not the second. There is no way to assign the variables to
satisfy both equations.
Example 2:
Input: ["b==a","a==b"]
output: true
Explanation: we could assign a = 1 and b = 1 to satisfy both equations.
Example 3:
Input: ["a==b","b==c","a==c"]
output: true
Example 4:
Input: ["a==b","b!=c","c==a"]
output: false
Example 5:
Input: ["c==c","b==d","x!=z"]
output: true
Note:
1. 1 <= equations.1ength <= 500
2. equations[i].1ength == 4
3. equations[i][o] and equations[i][3]are lowercaseletters
4. equations[i][1] is either '=′ or *!
5. equations[i][2] is =
题目大意
给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程equations[i]的长度为4，并
采用两种不同的形式之一："a==b"或“a!=b"。在这里，a和b是小写字母（不一定不同），表示单字
母变量名。只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回true，否则返回
false.
提示：
1. 1 <= equations.length <= 500
---
## Page 949
2. equations[i].length == 4
3.equations[ij][o]和equations[i][3]是小写字母
4.equations[i][1]要么是‘=，要么是！
5. equations[i][2] 是 “=
解题思路
·给出一个字符串数组，数组里面给出的是一些字母的关系，只有==和！=两种关系。问给
出的这些关系中是否存在悸论？
·这一题是简单的并查集的问题。先将所有==关系的字母union起来，然后再一一查看！
=关系中是否有==关系的组合，如果有，就返回false，如果遍历完都没有找到，则返回
true.
代码
package leetcode
import(
"github.com/halfrost/LeetCode-Go/template"
func equationsPossible(equations []string) bool{
if len(equations) == 0{
return false
uf := template.UnionFind{}
uf.Init(26)
for
-, equ := range equations {
if equ[1] ==‘=′ && equ[2] =='=′{
uf.union(int(equ[o]-′a′), int(equ[3]-'a′))
for _, equ := range equations {
if equ[1] == *!′ && equ[2] == '=′ {
if uf.Find(int(equ[0]-′a')) == uf.Find(int(equ[3]-′a')) {
return false
上
return true
992.SubarrayswithKDifferentIntegers
---
## Page 950
题目
good if the number of different integers in that subarray is exactly K.
(For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)
Return the number of good subarrays of A.
Example 1:
Input: A = [1,2,1,2,3], K = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1],
[1,2] , [2,3] , [1,2,1] , [2,1,2] , [1,2,1,2] 。
Example 2:
Input: A = [1,2,1,3,4], K = 3
:andno
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3],
[2,1,3], [1,3,4] .
Note:
●1 <= A.length <= 20000
●1 <= A[i] <= A.length
●1 <= K <= A.length
题目大意
这道题考察的是滑动窗口的问题。
给出一个数组和K，K代表窗口能能包含的不同数字的个数。K=2代表窗口内只能有2个不同的数
字。求数组中满足条件K的窗口个数。
解题思路
如果只是单纯的滑动窗口去做，会错过一些解。比如在例子1中，滑动窗口可以得到[1,2]，[1,2,1]，
[1,2,1,2]，[2,1,2],[1,2],[2,3]，会少[2,1]这个解，原因是右边窗口滑动到最右边了，左边窗口在缩小的过
程中，右边窗口不会再跟着动了。有同学可能会说，每次左边窗口移动的时候，右边窗口都再次从左边
窗口的位置开始重新滑动。这样做确实可以，但是这样做完会发现超时。因为中间包含大量的重复计
算。
---
## Page 951
这道题就需要第3个指针。原有滑动窗口的2个指针，右窗口保留这个窗口里面最长的子数组，正好有
K个元素，左窗口右移的逻辑不变。再多用一个指针用来标识正好有K-1个元素的位置。那幺正好有K
个不同元素的解就等于ans=atMostK(A，K)-atMostK(A,K-1）。最多有K个元素减去最多有K-1个元
素得到的窗口中正好有K个元素的解。
以例子1为例，先求最多有K个元素的窗口个数。
[1]
[1,2], [2]
[1,2,1], [2,1], [1]
[1,2,1,2], [2,1,2], [1,2], [2]
[2,3], [3]
每当窗口滑动到把K消耗为0的时候，res=right-left+1。为什么要这么计算，right-left+1代表
的含义是，终点为right，至多为K个元素的窗口有多少个。[left,right],[left+1,right],[left+2,right]
...[rightright]。这样算出来的解是包含这道题最终求得的解的，还多出了一部分解。多出来的部分减
掉即可，即减掉最多为K-1个元素的解。
最多为K-1个元素的解如下：
[1]
[2]
[1]
[2]
[3]
两者相减以后得到的结果就是最终结果：
[1,2]
[1,2,1], [2,1]
[1,2,1,2], [2,1,2], [1,2]
[2,3]
代码
package leetcode
func subarrayswithkDistinct(A []int, K int) int {
return subarrayswithkDistinctslidewindow(A, K) -
subarrayswithkDistincts1idewindow(A, K1)
func subarrayswithkDistinctslidewindow(A []int, K int) int {
left, right, counter, res, freq =0,0,K,0,map[int]int{}
for right = 0; right < 1en(A); right++ {
---
## Page 952
if freq[A[right]]==0{
counter=
freq[A[right]]++
for counter <0{
freq[A[left]]--
iffreq[A[left]]==0{
counter++
1eft++
res += right -1eft + 1
return res
993.CousinsinBinaryTree
题目
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth
k+1.
Two nodes of a binary tree are cousins if they have the same depth, but have different parents.
We are given the root of a binary tree with unique values, and the values x and y of two
dlifferent nodes in the tree.
Return true if and only if the nodes corresponding to the values x and y are cousins.
Example 1:
3
---
## Page 953
Input: root = [1,2,3,4], x = 4, y
Output:false
Example 2:
3
5
Input: root = [1,2,3,nu11,4,nu11,5], x = 5, y = 4
Output:true
Example 3:
3
Input: root = [1,2,3,nu11,4], x = 2, y = 3
Output:false
Note: