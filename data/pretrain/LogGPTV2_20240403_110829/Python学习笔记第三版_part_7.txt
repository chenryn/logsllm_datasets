>>> x.name = "jack"
>>> "{0.name}".format(x) # 对象属性。
jack
>>> "{0[2]}".format([1,2,3,4]) # 索引。
3
宽度、补位
>>> "{0:#08b}".format(5)
0b000101
数字
>>> "{:06.2f}".format(1.234) # 保留留 2 位⼩小数。
001.23
>>> "{:,}".format(123456789) # 千分位。
123,456,789
对⻬齐
>>> "[{:^10}]".format("abc") # 居中
[ abc ]
!60
学习笔记 . 第三版
>>> "[{:.>> "__name__" is sys.intern("__name__")
True
除了以常量⽅式出现的名字和字⾯量外，动态⽣成字符串⼀样可加⼊池中。如此可保证每
次都引⽤同⼀对象，不会有额外的创建和分配操作。
>>> a = "hello, world!"
>>> b = "hello, world!"
>>> a is b # 不不同实例例。
False
>>> sys.intern(a) is sys.intern("hello, world!") # 相同实例例。
True
当然，⼀旦失去所有外部引⽤，池内字符串对象会被回收。
>>> a = sys.intern("hello, world!")
!61
学习笔记 . 第三版
>>> id(a)
4401879024
>>> id(sys.intern("hello, world!")) # 有外部引⽤用。
4401879024
>>> del a # 删除外部引⽤用后被回收。
>>> id(sys.intern("hello, world!")) # 从 id 值不不同可以看到新建，⼊入池。
4405219056
字符串池实现算法很简单，就是简单的字典结构。
详情参考 Objects/unicodeobject.c : PyUnicode_InternInPlace。
做⼤数据处理时，可能需创建海量主键，使⽤ intern 有助于减少对象数量，节约⼤量内存。
2.4 字节数组
虽然⽣物都由细胞构成，但在普通⼈眼⾥，并不会将⼈、狮⼦、花草这些当做细胞看待。
因为对待事物的⾓度决定了，我们更关⼼⽣物外在形状和⾏为，⽽不是其构成组织。
从底层实现来说，所有数据都是⼆进制字节序列。但为了更好地表达某个逻辑，我们会将
其抽象成不同类型，⼀如细胞和狮⼦的关系。当谈及字节序列时，更多关⼼的是存储和传
输⽅式；⽽⾯向类型时，则着重于其抽象属性。尽管⼀体两⾯，但从不混为⼀谈。
如此，当 str 瘦⾝只为字符串⽽存在，专门⽤于⼆进制原始数据处理的类型也必然会出现。
早在 Python 2.6 时就引⼊ bytearray 字节数组，后 Python 3 又新增了只读版本 bytes。
同作为不可变序列类型，bytes 与 str 有着⾮常类似的操作⽅式。
>>> b"abc"
>>> bytes("汉字", "utf-8")
>>> a = b"abc"
>>> b = a + b"def"
!62
学习笔记 . 第三版
>>> b
b'abcdef'
>>> b.startswith(b"abc")
True
>>> b.upper()
b'ABCDEF'
相⽐ bytes 的⼀次性内存分配，bytearray 可按需扩张，更适合作为可读写缓冲区使⽤。如
有必要，还可为其提前分配⾜够内存，避免中途扩张造成额外消耗。
>>> b = bytearray(b"ab")
>>> len(b)
2
>>> b.append(ord("c"))
>>> b.extend(b"de")
>>> b
bytearray(b'abcde')
同样⽀持加法、乘法等运算符。
>>> b"abc" + b"123" # bytes
b'abc123'
>>> b"abc" * 2
b'abcabc'
>>> a = bytearray(b"abc")
>>> a * 2
bytearray(b'abcabc')
>>> a += b"123"
>>> a
bytearray(b'abc123')
!63
学习笔记 . 第三版
内存视图
如果要引⽤字节数据的某个⽚段，该怎么做？需要考虑的问题包括：是否会有数据复制⾏
为？是否能同步修改？
>>> a = bytearray([0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16])
>>> x = a[2:5] # 引⽤用⽚片段？
>>> x
bytearray(b'\x12\x13\x14')
>>> a[3] = 0xEE # 修改原数据。
>>> a
bytearray(b'\x10\x11\x12\xee\x14\x15\x16')
>>> x # 并未同步发⽣生变更更，显然是数据复制。
bytearray(b'\x12\x13\x14')
为什么需要引⽤某个⽚段，⽽不是整个对象？
以⾃定义⽹络协议为例，通常由标准头和数据体两部分组成。如要验证数据是否被修改，
总不能将整个包作为参数交给验证函数。这势必要求该函数了解协议包结构，显然是不合
理设计。⽽拷贝数据体又可能导致重⼤性能开销，同样得不偿失。
鉴于 Python 没有指针概念，外加内存安全模型限制，要做到这点似乎并不容易。为此，
须借助⼀种名为内存视图（Memory Views）的⽅式来访问底层内存数据。
内存视图要求⽬标对象⽀持缓冲协议（Buffer Protocol）。它直接引⽤⽬标内存，没有额
外复制⾏为。故此，可读取最新数据。在允许情况下，还可执⾏写操作。常见⽀持视图操
作的有 bytes、bytearray、array.array，以及著名第三⽅库 NumPy 的某些类型。
>>> a = bytearray([0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16])
>>> v = memoryview(a) # 完整视图。
>>> x = v[2:5] # 视图⽚片段。
>>> x.hex()
'121314'
!64
学习笔记 . 第三版
>>> a[3] = 0xee # 对原数据修改，可通过视图观察到。
>>> x.hex()
'12ee14'
>>> x[1] = 0x13 # 因为引⽤用相同内存区域，也可通过视图修改原始数据。
>>> a
bytearray(b'\x10\x11\x12\x13\x14\x15\x16')
0 1 2 3 4 5 6
a 0x10 0x11 0x12 0x13 0x14 0x15 0x16
v
x
0 1 2 3
视图⽚段有⾃⼰的索引范围。读写操作以视图索引为准，但不得超出限制。
当然，能否通过视图修改数据，得看原对象是否允许。
>>> a = b"\x10\x11"
>>> v = memoryview(a)
>>> v[1] = 0xEE
TypeError: cannot modify read-only memory
如要复制视图数据，可调⽤ tobytes、tolist ⽅法。复制后的数据与原对象⽆关，同样不会
影响视图⾃⾝。
>>> a = bytearray([0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16])
>>> v = memoryview(a)
>>> x = v[2:5]
!65
学习笔记 . 第三版
>>> b = x.tobytes() # 复制并返回视图数据。
>>> b
b'\x12\x13\x14'
>>> a[3] = 0xEE # 对原数据修改。
>>> b # 不不影响复制数据。
b'\x12\x13\x14'
>>> x.hex() # 但影响视图。
'12ee14'
除去上述所说，内存视图还为我们提供了⼀种内存管理⼿段。
⽐如说通过 bytearray 预申请很⼤⼀块内存，随后以视图⽅式将不同⽚段交由不同逻辑使
⽤。因逻辑不能越界访问，故此可实现简易内存分配器模式。对于 Python 这种限制较多
的语⾔，合理使⽤视图可在不使⽤ ctypes 等复杂扩展的前提下，改善算法性能。
可使⽤ memoryview.cast、struct.unpack 将字节数组转换为⽬标类型。
2.5 列表
仅从操作⽅式上看，列表（list）像是数组和链表的综合体。除按索引访问外，还⽀持插⼊、
追加、删除等操作，完全可视作队列（queue）或栈（stack）结构使⽤。如不考虑性能问
题，似乎是⼀种易⽤且功能完善的理想数据结构。
>>> x = [1, 2]
>>> x[1]
2
>>> x.insert(0, 0)
>>> x
[0, 1, 2]
>>> x.reverse()
>>> x
[2, 1, 0]
!66
学习笔记 . 第三版
queue
>>> q = []
>>> q.append(1) # 向队列列追加数据。
>>> q.append(2)
>>> q.pop(0) # 按追加顺序弹出数据。
1
>>> q.pop(0)
2
对于有⼤量写操作的专职队列或栈，建议使⽤ collections.deque、queue 等类型。
列表内部结构由两部分组成，头部保存元素和内存分配计数，另引⽤独⽴指针数组。所有
列表项（item）通过该数组保存指针引⽤，并不会嵌⼊元素实际内容。
指针数组
0 1 2
list
items
v v v
作为使⽤频率最⾼的数据结构之⼀，列表的性能优化很重要。那么，固定长度的头部结构，
很容易实现内存复⽤。创建时，优先从复⽤区获取。⽽当列表被回收，除⾮超出最⼤复⽤
数量限制（默认 80），否则会被放回复⽤区，⽽不是交还内存。每次真正需要分配和释放
内存的是指针数组。
⽤数组⽽⾮链表存储元素项引⽤，也有实际考虑。从读操作看，⽆论遍历还是基于序号访
问，数组性能总是最⾼。尽管插⼊、删除等变更操作需移动内存，但也仅仅是指针复制，
⽆关元素⼤⼩，不会有太⾼消耗。如果列表太⼤，或写操作远多于读，那么应当使⽤针对
性的数据结构，⽽⾮通⽤设计的内置列表类型。
另外，指针数组内存分配算法基于元素数量和剩余空间⼤⼩，按相应⽐率进⾏扩容或收缩，
⽽⾮逐项进⾏。如此，可避免太频繁的内存分配操作。
!67
学习笔记 . 第三版
构建
⽤⽅括号指定显式元素的构建语法最为常⽤。当然，也可基于类型创建实例，接收⼀个可
迭代对象作为初始内容。不同于数组，列表仅存储指针，对元素类型并不关⼼，故可以是
不同类型混合。
>>> [1, "abc", 3.14]
[1, 'abc', 3.14]
>>> list("abc") # iterable
['a', 'b', 'c']
另有⼀种称做推导式（comprehension）的语法。同样⽤⽅括号，但以 for 循环初始化元素，
并可选 if 表达式作为过滤条件。
>>> [x + 1 for x in range(3)]
[1, 2, 3]
>>> [x for x in range(6) if x % 2 == 0]
[0, 2, 4]
其⾏为类似以下代码。
>>> d = []
>>> for x in range(6):
if x % 2 == 0:
d.append(x)
>>> d
[0, 2, 4]
有种称做 Pythonic 的习惯，核⼼是写出简洁的代码，推导式算其中⼀种。
有关推导式更多信息，可阅读后章。
⽆论是历史原因，还是实现⽅式，内置类型关注性能要多过设计。如要实现⾃定义列表，
建议基于 collections.UserList 包装类型完成。除统⼀ collections.abc 体系外，最重要的是该
类型重载并完善了相关操作符⽅法。
!68
学习笔记 . 第三版
>>> list.__bases__
(object,)
>>> collections.UserList.__bases__
(collections.abc.MutableSequence,)
以加法操作符为例，对⽐不同继承的结果。
>>> class A(list): pass
>>> type(A("abc") + list("de")) # 返回的是 list，⽽而不不是 A。
list
>>> class B(collections.UserList): pass
>>> type(B("abc") + list("de")) # 返回 B 类型。
__main__.B
最⼩接⼜设计是个基本原则。应慎重考虑列表这种功能丰富的类型，是否适合作为基类。
操作
⽤加法运算符连接多个列表，乘法复制内容。
>>> [1, 2] + [3, 4]
[1, 2, 3, 4]
>>> [1, 2] * 2
[1, 2, 1, 2]
注意，同时加法（或乘法）运算，但结果却有所不同。
>>> a = [1, 2]
>>> b = a
>>> a = a + [3, 4] # 新建列列表对象，然后与 a 关联。
!69
学习笔记 . 第三版
>>> a # a、b 结果不不同，确定 a 指向新对象。
[1, 2, 3, 4]
>>> b
[1, 2]