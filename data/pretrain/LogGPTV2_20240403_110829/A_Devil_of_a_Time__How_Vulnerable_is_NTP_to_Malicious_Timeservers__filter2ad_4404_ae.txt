the continuous and easy-to-do addition of new timeservers at
diverse geographical locations.
Our solution is simple: each NTP client should simultane-
ously run two parallel synchronization processes. The ﬁrst syn-
chronization process is precisely that used by today’s NTPv4
clients to sync with pool-assigned servers in their region.
This “primary” synchronization process is used, by default, to
determine the client’s local time. The second synchronization
process is run in “watchdog mode”; the client applies Chronos’
provably secure approximate agreement algorithm [6] to a
large timeserver-set consisting of pool-provided stratum 1
timeservers, called “Ananke”. So long as the watchdog’s time
does not deviate from the primary time by “too much”, the
primary sychronization process continues to update the local
time. If, however, the results of these two time calculations are
12
(a) Europe
(b) North America
Figure 14: The distribution of netspeed across strata in Europe and North America
all to use stratum 1 servers, the load on a large fraction of
such servers would increase by three orders of magnitude
(due to them now carrying the burden previously placed on
higher-stata servers and equalizing the load on all stratum
1 servers regardless of netspeed); (2) As discussed above
(see Section VI-B), while this simple scheme might achieve
time accuracy, Chronos’ periodic transition between different
subsets of servers will
time jitters,
leading to suboptimal precision.
inevitably cause local
D. Realizing Our Approach
Algorithm 1 client-side synchronization pseudocode
1: Global count = 0
2: Global Ananke time = 0
3: procedure GetT ime(count)
4:
5:
6:
7:
N T P v4 time = GetN T P v4T ime
if count == 0 then
if |N T P v4 time−Ananke time| > ω+count·(Θ+
Ananke time = GetChronosT ime(Ananke)
new time = Ananke time + count · ∆t
1) · ∆t then
else
8:
9:
10:
11:
12:
ω
Θ
∆t
F
new time = N T P v4 time
count = (count + 1)%F
return new time
an upper bound on the distance from the UTC of the local time
at any NTP server not injected by the attacker.
an upper bound on the drift of the client’s local clock across time
[ms/sec]
The estimated time interval from the last time GetNTPv4Time
was executed [sec].
The number of times GetNTPv4Time is called for each time
GetChronosTime is called.
Table III: Notation Table
A new Ananke pool zone. Ananke can be realized as a new
NTP pool zone (see Section II-A), which a client can issue two
types of queries to: (1) requesting the list of all timeservers
in Ananke, and, (2) requesting a subset of the timeservers
in Ananke of predetermined size (m = 12 in our security
analysis) chosen uniformly at random from all servers in
Ananke (and not only those in the client’s region). We envision
the timeservers in Ananke as being geographically dispersed
across geographical, political, and organizational boundaries.
Ananke can be bootstrapped using a manually chosen subset
of the stratum 1 timeservers currently in the pool (which today
contains around 400 timeservers [41]).
Building on recent advances in client-side synchronization.
The pseudocode for the client-side synchronization procedure
employed by our scheme appears in Alg. 1. As explained
in Section VI-C, the client runs two parallel synchronization
processes. One exactly identical to NTPv4’s and another ap-
plying Chronos’ approximate-agreement scheme to the servers
in Ananke. The second synchronization process happens less
frequently than the ﬁrst; once every F NTPv4 updates (where
the variable F captures the frequency ratio between the two
processes). Local time at the client (the new time parameter)
is the time computed by NTPv4 (N T P v4 time) by default,
unless the gap between the two computed time values exceeds
a certain threshold, which takes into account both the reason-
able distance of an honest NTP timeserver from the UTC (ω)
and the clock’s natural drift since the servers in Ananke were
last queried. When this occurs, Chronos’ computed time is
used to update the client’s clock. Table III presents the notation
used in the pseudocode.
that
the required client-side changes are
highly compatible with those currently being promoted at the
IETF [42]. Speciﬁcally, to beneﬁt from Chronos’ [6] improved
security while preserving NTP’s time accuracy and precision,
Chronos’ approximate-agreement-based time synchronization
is intended to operate in the background (as a watchdog)
while traditional NTPv4 is used to update the local
time
by default. Our scheme prescribes the set of servers with
which the Chronos watchdog process interacts (Ananke), and
the frequency of this interaction, to contend with attacks (by
malicious servers) and load-related considerations, which were
previously not considered by NTP security schemes.
We point out
E. Assigning Values to the Parameters F and ω.
The choice of values for the parameters in the pseudocode
of Alg. 1 has important implications. Speciﬁcally, the choice
13
Figure 15: The average offsets measured from different locations with respect to timeservers at different levels of proximity.
Different possible locations for NTP timeservers the client syncs with appear above.
of F determines how frequently timeservers in Ananke will
be queried, and so the load on these servers. Another crucial
choice is determining the gap between NTPv4’s computed
time and Chronos’ computed time (for Ananke) required for
Chronos’ computed time to be used. The higher the gap is,
the more time can be shifted at the client before the watchdog
mode takes over; the lower the gap, the higher the risk that
the watchdog takes action without cause, harming the client’s
time accuracy and precision.
Implications of F for load on timeservers in Ananke. Recall
that stratum 1 servers constitute around 10% of timeservers in
the NTP server pool, amounting to around 400 servers. We
envision the set of Ananke servers as eventually consisting
of hundreds of servers with acceptable compute power and
capacity constraints (e.g., probably not
include those that
currently have very low netspeed values conﬁgured). Even
so, if our scheme sees wide adoption, all NTP clients, which
currently sync with thousands of servers, will also be required
to periodically contact the timeservers in Ananke. To avoid
overloading the servers in Ananke, clients should query these
much less frequently than in the parallel NTPv4 synchroniza-
tion process. In our security analysis (Section VI-F), F = 10.
F could also set to higher values (resulting in lower loads
on Ananke timeservers) without signiﬁcantly weakening the
security guarantees.
Implications of ω for time accuracy and precision. In our
scheme, a client c in a certain region might sync with a
stratum 1 server x in a distant region as part of the Chronos
synchronization process. The time at x, as computed by c,
also depends on the network latency between the two (see
Appendix A for an explanation). Hence, ω, which serves as
an upper bound on the distance between the local time at
an honest timeserver and the UTC, should be set to be high
enough to account to inaccurate time estimations due to long
and variable network latency. We show below, however, that
under normal conditions (i.e., when not under attack), these
two times are not far.
The time offset between an NTP client and an NTP server
is a value computed by the client that reﬂects the difference
between the local times at the client and at the server (see
Appendix A for a formal deﬁnition). Fig. 15 presents the
average time offsets measured at an NTP client by querying
timeservers at different levels of proximity to the client: (1)
timeservers in the client’s country, (2) timeservers in Europe
excluding the timeservers in the client’s country if located in
Europe, (3) timeservers in the US, and (4) timeservers across
the world excluding the timeservers in the US and Europe.
As can be seen from the results, the difference between the
average time offsets with respect to servers in the client’s
region and to faraway servers are merely several milliseconds
apart. ω = 25ms has been shown in [6] to be a good choice
when the client syncs only with servers in its own region.
Our offset analysis indicates that when syncing with servers
from other regions, setting ω to be sufﬁciently higher to also
account for inaccuracies of several milliseconds on average is
needed. We use the very conservative choice of ω = 50ms in
our security analysis.
F. Security Analysis
The security of our scheme is immediately derived from
Chronos’ security guarantees [6]. As explained in [6], the
expected time needed for the attacker to shift a Chronos client
by T seconds from the UTC can be approximated by
,
(1)
(cid:16)
I
P 2
3 m,m
(cid:17) T
E
where I is the length of the time interval between two consec-
utive time updates, E is the maximum time-shift permitted in
each time update, m is the size of the subset of servers queried
3 m,m is the probability that at least two
in each update, and P 2
thirds of the sampled subset of servers are controlled by the
attacker. In the case of our Chronos synchronization process
(the watchdog), I = F · ∆t, E = ω + F · Θ · ∆t.
Recall that the time computed by the Chronos synchroniza-
tion process is only used to update the clock if the gap between
this time and that computed by the NTPv4 synchronization
process exceeds a certain threshold, which is upper bounded
by E (as deﬁned above). Thus, the time computed by our
client can be at most further away from the UTC than the
Chronos synchronization process by an additive factor of E.
14
This implies that the probability of an attacker to shift time at
a client using our scheme by T + E is as in Equation 1.
Figure 16: The (expected) time required for the attacker to
succeed in shifting a client’s time by 1.1s.
To illustrate the security guarantees provided by our
scheme, we present the implications for security of speciﬁc
choices of values for the different parameters.
Theorem 6.1: When |Ananke| = 200, Θ = 50ms/hour
(as in [6]), ∆t = 1 hour (as in [6]), ω = 50ms, m = 12,
F = 10, and the attacker controls 1
7 of the timeservers in
Ananke, 26 years in expectation are needed for the attacker to
shift the client’s local time by 1.1sec or more from the UTC.
Thus, even if the timeservers in Ananke are queried 10x
less frequently than the “default” timeservers assigned by
the NTP server pool, shifting time by over 1.1s requires 26
years in expectation for an attacker with signiﬁcant presence
in Ananke (which should not be trivial to accomplish, as
Ananke should consist of hundreds of geographically diverse
and manually audited stratum 1 servers). Consequently, even
a fairly powerful attacker is effectively incapable of shifting
time sufﬁciently to harm many applications of interest (see
Table II).
Fig. 16 presents the expected time (in years) required
for the attacker to shift a client’s clock by 1.1sec from the
UTC for different choices of m (the number of servers in
Ananke sampled by the client in each update), and for different
fractions of timeservers in Ananke controlled by the attacker.
The assignment of values to all other relevant parameters is
as in Theorem 6.1. Observe that the result in Theorem 6.1
corresponds to the value on the y-axis (26 years) for x = 12
(the number of timeservers in Ananke queried) of the curve
7 of the
representing the scenario that the attacker controls 1
timeservers in Ananke.
We note that even if the frequency of queries to Ananke
is further reduced (by, setting, e.g., F = 100), the security
bounds yielded by our theoretical analysis would still be
meaningful.
15
G. Another Proposed Defense: Deploying “Secret Monitors”
Our attacks leveraging injection of new timeservers into the
NTP pool build on the attacker’s ability to avoid being detected
by the NTP pool’s monitor. An attacker-controlled timeserver
can evade the monitor by providing accurate times to the
monitor when queried while selectively reporting erroneous
times to others. (Recall that the attack that utilizes existing
NTP servers takes into account that the attacker-controlled
server will eventually be detected by the monitor and removed
from the NTP server pool, as discussed in Section III-A).
Currently, the NTP pool employs a single monitor server,
whose IP can be easily inferred; when a new timeserver is
registered to the pool, the ﬁrst NTP queries to that server are
made by the monitor. A natural defensive measure, then, is
to extend the pool’s monitoring infrastructure to contain many
monitors and attempting to keep the identities of these servers
hidden. We believe that this will indeed raise the bar for an
attacker and limit its ability to inﬂict harm. We point out,
however, that preserving the anonymity of “secret monitors”
might prove hard against strategic attackers, as such attackers
can periodically misreport times and keep track of the IPs of
the timeservers that queried them before their server scores
were decreased by the NTP pool.
VII. RELATED WORK
NTP, one of the Internet’s oldest protocols, is still widely
used throughout the world [5], [24], [27], [35]. However, NTP
suffers from many security vulnerabilities. Already in 1985, in
the context of the development of the Kerberos security model,
NTP’s inadequacy for achieving secure time synchronization
was pointed out [33].
The NTP pool was created in 2003 to provide better
reliability and scalability [41]. The current NTP pool is di-
vided into zones, (e.g., europe.pool.ntp.org, us.pool.ntp.org,
and de.pool.ntp.org [15], [17]). Thousands of timeservers in
different zones were analyzed in [41]. Similarly to our mea-
surements, [41] uses the “system peer” attribute to create a
dependency graph. In addition, [41] reports experience with
entering new timeservers into the pool. Our analysis differs