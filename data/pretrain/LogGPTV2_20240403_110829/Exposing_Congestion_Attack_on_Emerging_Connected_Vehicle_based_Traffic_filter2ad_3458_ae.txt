and then jump to step (3). If there are two skipped and the
budget allows more trials, try both and then jump to step (3).
This is because opening an originally skipped phase can cause
more total delay increase as explained in §VI-B2.
(3) In the second stage, if there are no skipped phases, try
the two data spooﬁng options with the latest arrival time for
the two former phases. If the budget allows more trials, try
the latest arrival time for the two latter phases. Try the former
phases ﬁrst is because their latest vehicles can cause phase
sequence switches to further increase the delay.
(4) In the second stage, if there is a skipped phase, try
the data spooﬁng options with the latest arrival time for this
phase. If the budget allows more trials, try the latest arrival
time for the former phases, and then the latter phases. If there
are two skipped phase, try the two data spooﬁng options with
the latest arrival time for these two phases.
e
c
n
e
r
e
f
f
i
d
e
v
i
t
l
a
e
R
)
%
(
d
n
u
o
b
r
e
p
p
u
o
t
 100
 80
 60
 40
 20
 0
 0
Exploit E1
Exploit E2
Exploit E3
Absolute difference
is only 2.3%
 2
 4
 6
 8
 10
 12
Data spoofing trial budget
Fig. 8: Relative differences between the average delay increase
percentages using the three exploits with limited trial budgets
and those by trying all possible options.
As introduced in §II-B2, at each planning time only the
planned duration for the ﬁrst stage is immediately applied.
Thus, in the above strategy we prioritize the attacking on the
ﬁrst stage so that the attack has an immediate effect. Also, in
this strategy we only consider at most two skipped phase since
we do not observe any snapshot in our analysis has more than
two skipped phases under the normal trafﬁc demand.
E2: Congestion attack for ﬁve-stage planning in the full
deployment period:
(1) If there are skipped phases, try any data spooﬁng option
for each of these phases. If the budget is not enough, prioritize
the ones in the earlier stages.
(2) Try the data spooﬁng options bg seconds after the
originally green end time for each open phase. For the ﬁrst
time entering this step, bg is 1. If the budget is not enough,
prioritize the ones in the earlier stages.
(3) If the budget allows more trials, repeatedly try (2) with
bg being increased by 1 each time until the budget is used up.
E3: Congestion attack for ﬁve-stage planning in the
transition period:
(1) For the through phases, try the data spooﬁng options
that add Qp non-existing queuing unequipped vehicles for each
phase p. If the budget is not enough, prioritize the ones in the
ﬁrst stage.
(2) For the left-turn phases, try the data spooﬁng options
that add Qp non-existing queuing unequipped vehicles for each
phase p. If the budget is not enough, prioritize the ones in the
ﬁrst stage.
(3) If the budget allows more trials, repeatedly try (1) and
(2) with Qp being decreased by 1 each time until the budget
is used up.
In this strategy, we prioritize the through phases since their
lanes are longer than those of the left-turn phases, and thus has
much (usually twice) larger Qp.
Fig. 8 shows the attack effectiveness of these three exploits
with different trial budget on the snapshots in the vulnerability
analysis. In the ﬁgure, the attack effectiveness metric is the
average total delay increase percentage. As shown, for E1, only
4 trials are need to reach the upper bound attack effectiveness,
i.e., the one by trying all possible options. For E2, the attack
effectiveness converges quickly after using 2 trials, and then
decreases very slowly when bg increases with more available
budget. At the tail, the relative difference to the upper bound
11
attack effectiveness is around 20%, but since the upper bound
is only 11.5%, it only has 2.3% absolute difference. As dis-
cussed in §VI-B2, the best trials responsible for such difference
highly depend on speciﬁc trafﬁc patterns. For E3, only 8 trials
are need to reach the upper bound attack effectiveness, which
is consistent with the discussion in §VI-C2.
We implement this budget-based trial strategies, and eval-
uate their effectiveness on the snapshots in the vulnerability
analysis. In this experiment, we use the running time without
attack for each snapshot to dynamically choose trial budget.
The results is shown at the bottom half in Table VII. As shown,
even though two-stage planning is much faster than ﬁve-stage
planning, the maximum trial number needed for E1 is only 6
so the average trial number is 3.6-3.8. For ﬁve-stage planning
scenarios, in the worst case the attacker can at most try 13.3
options due to the real-time attack requirement. This is already
much less than trying all possible options, which needs nearly
1000 trials for S1 and around 250 options for S2. Nevertheless,
our trial strategies show high effectiveness with less than 2.2%
difference to the upper bound attack effectiveness.
VIII. ATTACK EVALUATION
For each combination of PR and planning stage conﬁgu-
ration, we run the experiments for one hour three times, each
with a different random seed, based on the aforementioned
real-world trafﬁc demand. In this experiment we launch the
attack continuously for every signal planning in the I-SIG
system. This is different to the experiments in the vulnerability
analysis in which the attacks are launched individually to each
snapshot. In comparison, such continuous attacking is closer
to real-world attack situations. As we will show later, this is
able to create a cumulative attack effect and thus create even
more congestion than that in the vulnerability analysis.
Attack effectiveness measurement. In the evaluation we
directly measure the vehicle travel delay using each vehicle’s
trajectory output by VISSIM. To calculate the per-vehicle
delay, we subtract the free-ﬂow travel time, i.e., the travel time
at the speed limit, from the vehicle’s actual travel time. Then
the total vehicle delay is calculated as the sum of the per-
vehicle delay for all vehicles generated in the experiment. In
the VISSIM simulation, for the same random seed the vehicle
generated with the same ID has exactly the same initial data,
e.g., the same generation time and the same initial speed and
location. Thus, both the total vehicle delay and the per-vehicle
delay for experiments with and without attack are comparable.
In this section, we implement and evaluate the constructed
exploits using simulations with real-world intersection settings.
B. Results
A. Evaluation Setup
Real-world intersection settings. In this evaluation we
use the map of a real-world intersection with its real phase
conﬁgurations. The intersection map is shown in the screenshot
in Fig. 1. Compared to the generic intersection structure,
this intersection has different speed limits on each approach.
The speed limits are 30 mph, 35 mph, 40 mph, and 45
mph for southbound, eastbound, northbound and westbound
respectively. Only northbound approach has dedicated right
turn lane, while in other approaches the right turn lane is
shared with the through lane. The map range of the eastbound
approach is only extended to 220 meters because of the
existence of a close-spaced upstream intersection.
Real-world trafﬁc demand. To increase the practicality of
our analysis, we use the real trafﬁc demand for this intersection
in our VISSIM conﬁguration. To measure such demand, we
went
to the intersection and videotaped the trafﬁc in the
intersection on May 16th, 2017, 4-5 pm. Based on the videos,
we manually counted the passing vehicles for each lane, and
calculated the trafﬁc demand of each approach and the turning
ratio for each lane (the possibility of turning left or right for
the vehicles), as the input to the VISSIM trafﬁc model.
Experiment setup. In the experiment, the I-SIG system
and attack program can receive the BSM messages within their
DSRC ranges. The DSRC ranges for all approaches are set to
the normal value, 300 meters, except the one for the eastbound
approach is 220 meters as its lanes are shorter. On the attacker
side, the BSM messages are used in the attack decision process
detailed in §VII-A. After that, the BSM message sent with the
spoofed data is merged with the other BSM messages. The
I-SIG system uses these BSM messages, which may or may
not have the attack message, to perform the signal planning
and then use the plan to control the trafﬁc signals in VISSIM.
The results are summarized in Table II and analyzed below:
1) Exploit E1 and E2: Column 2, 4, 6, and 8 show the
results for E1. As shown, E1 is able to increase more than 60%
of the total delay for all cases expect when the PR is 25%.
These results are consistent with those in Table I, showing
high attack effectiveness. When the PR is 25%, we ﬁnd that the
errors in the unequipped vehicle estimations in the EVLS algo-
rithm are greater than those in the generic intersection settings,
causing the attack effectiveness to decrease. Nevertheless, the
total delay increase percentage is still very high (46.2%): for a
vehicle, a one-hour trip now takes nearly one and half hours,
showing a signiﬁcant decrease of the transportation mobility.
The results for E2 are shown in Column 3. As shown,
the attack effectiveness is only 4.8%, which is around 50%
lower than that in the vulnerability analysis. We ﬁnd that this
is because both categories of the successful data spooﬁng
trials in §VI-B2 can be largely affected by errors in the
vehicle trajectory data prediction in our attack decision process
(§VII-A). For the one that opens the skipped phase, any
legitimate vehicle requesting that phase in 5 seconds nulliﬁes
the attack effect. For the one that extends the green light end
time, the original green light end time can vary after 5 seconds
due to changes in the arrival table. Among the three exploits,
E2 is the most dependent on trafﬁc conditions and thus more
sensitive to the errors in our prediction. Considering that it also
has the least attack effectiveness, E2 is thus the least attractive
exploit among the three.
2) Exploit E3: The results for E3 are shown in Column 5,
7, and 9. Surprisingly, we ﬁnd that these attacks are much more
effective than those in the vulnerability analysis: when the PRs
are 75% and 50%, the average delay increase percentages are
181.6% and 193.3%, which are over 5× more than those in the
vulnerability analysis. The increase for the 25% PR scenario
is a bit lower, but is still around 4× more.
12
CV
Full deployment
100% PR
75% PR
Transition period
50% PR
25% PR
2-S
E1
5-S
E2
2-S
E1
5-S
E3
2-S
E1
5-S
E3
2-S
E1
5-S
E3
deployment
COP conﬁg.
Exploit
Ave. delay
inc. (s) & %
68435.4
66.7%
4695.9
4.8%
64008.0
61.7%
187746.0
181.6%
66797.4
64.2%
197410.0
193.3%
56618.0
46.2%
146685.0
133.2%
TABLE II: Evaluation results for the practical exploits. PR is short for penetration rate. Two-stage planning and ﬁve-stage
planning in COP are denoted as 2-S and 5-S, with the former being the default choice.
The lane blocking effect. We ﬁnd that such signiﬁcant
increase is because continuous attacking is able to cause the
attack effect to accumulate, and thus greatly escalates the
attack effectiveness. More speciﬁcally, in ﬁve-stage planning,
since the planning is allowed to delay serving some vehicles
in the current stage for more optimal long-term beneﬁt, these
vehicles are attacked for another time in the next signal
planning time. If the vehicle is near the end of the queue,
it can be attacked multiple times. Since in the vulnerability
analysis we only estimate the effectiveness for attacking once,
such cumulative attack effect causes the average total delay to
signiﬁcantly increase in comparison to that in the vulnerability
analysis. Such cumulative attack effect does not exhibit for the
two-stage planning scenarios, since two-stage planning only
has one serving opportunity for each phase and it is not allowed
to delay serving any vehicle.
We further ﬁnd that such cumulative attack effect is able to
cause an even higher level of congestion, which can block an
entire approach, causing massive trafﬁc jams. This is because
with such effect the queues in the left-turn lanes cannot be
effectively released and thus begin to increase with time. Since
the left-turn lanes are shorter in nature, at a certain point the
queues start to spill over to the through lanes and block the
through lane. This causes the through lane to start queuing
after the spilled-over left-turn vehicles. With both the real
queuing vehicles and the non-existing unequipped vehicles
added by our attack in the through lanes, the COP algorithm
sees more than 80 vehicles queuing in the through lanes and
thus only gives the spilled-over left-turn phase the minimum
green light time. Thus, the left-turn phase can now only release
the fewest possible vehicles. When some spilled-over vehicles
ﬁnally enter the left-turn lane, the following left-turn vehicles
quickly block the through lanes again.
Such blocking effect is shown earlier in Fig. 1, which
is a screenshot taken at the 1785.80 second in the VISSIM
simulation for one of the three random seeds and the 75% PR.
Note that such spillover and blocking effect always appears
on at least one approach in all E3 experiments. As shown in
the ﬁgure, in both the northbound and southbound approaches,
the left-turn vehicles spill over and block the through lanes,
causing long queues in the approach. In the real-world trafﬁc
demand we collected from 4 to 5 pm, the northbound approach
has the most left-turn vehicles and thus is the earliest to block
and thus have the longest queue at the time of the screenshot.
Fig. 9 shows the average delay every one minute with and
without attack in the northbound approach in this experiment.
As shown, the delay under attack usually has an increase when
the delay without attack increases. This is because when the
approach is more congested without attack due to a temporarily
higher demand, the congestion attack can further escalate such
congestion. As shown, at around second 1125, such higher
W/ attack
W/o attack
Repeated
blocking
effect starts
 350
 300
 250
 200
l
 150
 100
)
s
(
e
m
l
i
t
y