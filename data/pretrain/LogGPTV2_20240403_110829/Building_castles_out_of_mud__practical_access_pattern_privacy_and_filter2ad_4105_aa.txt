title:Building castles out of mud: practical access pattern privacy and
correctness on untrusted storage
author:Peter Williams and
Radu Sion and
Bogdan Carbunar
Building Castles out of Mud: Practical Access
Pattern Privacy and Correctness on Untrusted Storage
Peter Williams
Radu Sion
Stony Brook Network Security
and Applied Cryptography Lab
Stony Brook, NY 11794-4400
PI:EMAIL
Stony Brook Network Security
and Applied Cryptography Lab
Stony Brook, NY 11794-4400
PI:EMAIL
Bogdan Carbunar
Motorola Labs
1295 E. Algonquin Rd. IL05
Schaumburg, IL 60195
PI:EMAIL
ABSTRACT
We introduce a new practical mechanism for remote data
storage with eﬃcient access pattern privacy and correct-
ness. A storage client can deploy this mechanism to issue
encrypted reads, writes, and inserts to a potentially curi-
ous and malicious storage service provider, without reveal-
ing information or access patterns. The provider is unable
to establish any correlation between successive accesses, or
even to distinguish between a read and a write. Moreover,
the client is provided with strong correctness assurances for
its operations – illicit provider behavior does not go unde-
tected. We built a ﬁrst practical system – orders of magni-
tude faster than existing implementations – that can execute
over several queries per second on 1Tbyte+ databases with
full computational privacy and correctness.
Categories and Subject Descriptors
H.3.4 [Information Storage and Retrieval]: Systems
and Software
General Terms
Security
Keywords
Data Outsourcing, Private Information Retrieval
1.
INTRODUCTION
As networked storage architectures become prevalent –
e.g., networked ﬁle systems and online relational databases
in sensitive infrastructures such as email and storage por-
tals, libraries, health and ﬁnancial networks – protecting
the conﬁdentiality and integrity of stored data is paramount
to ensure safe computing. Such data is often geographically
distributed, stored on potentially vulnerable remote servers
or transferred across untrusted networks; this adds security
vulnerabilities compared to direct-access storage.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
Moreover, today, the remote servers are increasingly main-
tained by third party storage vendors. This is because the
total cost of storage management is 5–10 times higher than
the initial acquisition costs [10]. However, most third party
storage vendors do not provide strong assurances of data
conﬁdentiality and integrity. For example, personal emails
and conﬁdential ﬁles are being stored on third party servers
such as Gmail [1] and Xdrive [2]. Privacy guarantees of such
services are at best declarative and often subject customers
to unreasonable ﬁne-print clauses – e.g., allowing the server
operator (and thus malicious attackers gaining access to its
systems) to use customer behavior for commercial proﬁling,
or governmental surveillance purposes [9].
To protect data stored in such an untrusted server model,
security systems should oﬀer users assurances of data con-
ﬁdentiality and access privacy. As a ﬁrst line of defense, to
ensure conﬁdentiality, all data and associated meta-data can
be encrypted at the client side using non-malleable encryp-
tion, before being stored on the server. The data remains
encrypted throughout its lifetime on the server and is de-
crypted by the client upon retrieval.
Encryption provides important privacy guarantees at low
cost. It however, is only a ﬁrst step as signiﬁcant information
is still leaked through the access pattern of encrypted data.
For example, consider an adversarial storage provider that
determines a particular region of the encrypted database cor-
responds to an alphabetically sorted keyword index. This is
not unreasonable, especially if the adversary has any knowl-
edge of the client-side software. The adversary can then
correlate plaintext keywords, identiﬁed by their position in
the index, to documents, by observing which locations in the
encrypted index are updated when a new encrypted docu-
ment is uploaded.
In general, it is diﬃcult to bound the
amount of information leaked by access patterns.
In existing work, one proposed approach for ensuring client
access pattern privacy (and conﬁdentiality) tackles the case
of a single-owner model. Speciﬁcally, a service provider hosts
information for a client, yet does not ﬁnd out which items
are accessed. Note that in this setup the client has full
control and ownership over the data and other parties are
able to access the same data through this client only. One
prominent instance of such mechanisms is Oblivious RAM
(ORAM) [14]. For simplicity, in the following we will use the
term ORAM to refer to any such outsourced data technique.
One of the main drawbacks of existing ORAM techniques
is their overall time complexity. Speciﬁcally, in real-world
setups ORAM [14] yields execution times of hundreds to
thousands of seconds per single data access.
This Contribution.
In this paper we propose to build
on the work of Williams et al.[19] to introduce an eﬃcient
ORAM protocol with signiﬁcantly reduced communication
and computation complexities. Our protocol uses the ORAM-
based [14] pyramid-shaped database layout and reshuﬄing
schedule employed in [19] which yielded a protocol with
a complexity of O(log2 n) in the presence of O(√n) client
working memory, for a database sized n. Here however, we
deploy a new construction and more sophisticated reshuf-
ﬂing protocol, to signiﬁcantly reduce both the computa-
tional complexity (to O(log n log log n)) and the server stor-
age overheads (to O(n)) – yielding a comparatively fast and
practical oblivious data access protocol.
Eﬃciency. One of the main intuitions is to store each
pyramid level as an encrypted hashtable and an encrypted
Bloom ﬁlter (indexing elements in the hashtable). The Bloom
ﬁlter allows the client to privately and eﬃciently – no lin-
ear scanning of O(log n) fake block buckets for each stored
block to hide the success of each level query as in previ-
ous ORAMs – identify the level where an item of interest
is stored, which is then retrieved from the corresponding
hashtable. Less server-side storage is required (O(n) instead
of O(n log n)), thus both increasing throughput and reduc-
ing required server-side storage by an order of magnitude.
Privacy. The approach guarantees client access pat-
tern privacy, since the same operations are performed at all
pyramid levels, in the same sequence for any item of inter-
est. The use of the encrypted Bloom ﬁlters allows the client
to query an item directly at each level without revealing the
success, instead of relying on a series of O(log n) fake blocks
for each stored block to hide the success of each level query.
Our contributions consist also of a new reshuﬄing algorithm
that obliviously builds and maintains the encrypted Bloom
ﬁlters and of a more eﬃcient oblivious merge-and-scramble.
Correctness. Moreover, authenticated per-level integrity
constructs provide clients with correctness assurances at lit-
tle or no additional cost, speciﬁcally ensuring that illicit
server behavior (e.g., alterations) does not go undetected.
System. We built a system capable of executing several
queries per second on 1TByte+ databases with full compu-
tational access privacy and correctness assurances. To the
best of our knowledge, this is the ﬁrst system in existence
that oﬀers these assurances at a practical throughput.
Moreover, our ORAM protocol is well suited for deploy-
ment on constrained hardware such as SCPUs. We pro-
pose its deployment on existing secure hardware (IBM 4764
[3]) to implement Private Information Retrieval (Figure 1),
and show that the achievable throughputs are practical and
much higher than existing work. These results contribute
key insights towards making PIR assurances truly practical.
2. MODEL
Deployment. We consider the following concise yet rep-
resentative interaction model. Sensitive data is placed by
a client on a data server. Later, the client will access the
outsourced data through an online query interface exposed
by the server. Network layer conﬁdentiality is assured by
mechanisms such as SSL/IPSec. Without sacriﬁcing gener-
ality, we will assume that the data is composed of equal-sized
blocks (e.g., disk blocks, or database rows).
Clients need to read and write the stored data blocks with
correctness assurances, while revealing a minimal amount
of information (preferably none) to the (curious and possi-
bly malicious) server. We describe the protocols from the
perspective of the client, who will implement two privacy-
enhanced primitives: read(id), and write(id, newvalue). The
(un-trusted) server need not be aware of the protocol, but
rather just provide traditional store/retrieve primitives.
Adversary. The adversarial setting considered through
Section 4 assumes a storage provider that is curious and
possibly malicious. Not only does it desire to illicitly gain
information about the stored data, but it could also attempt
to cause data alterations while remaining undetected. We
prove that clients will detect any tampering performed by
the server, before the tampering can aﬀect the client’s be-
havior or cause any data leaks. We do not consider timing
attacks, noting that any implementation can be turned into
a timing-attack free implementation without aﬀecting the
running time complexity. We also do not address direct de-
nial of service behavior.
Cryptography. We require three cryptographic primitives
with all the associated semantic security [13] properties: (i)
a secure, collision-free hash function which builds a distribu-
tion from its input that is indistinguishable from a uniform
random distribution, (ii) an encryption function that gen-
erates unique ciphertexts over multiple encryptions of the
same item, such that a computationally bounded adversary
has no non-negligible advantage at determining whether a
pair of encrypted items of the same length represent the
same or unique items, and (iii) a pseudo random number
generator whose output is indistinguishable from a uniform
random distribution over the output space.
3. RELATED WORK
3.1 Oblivious RAM
Oblivious RAM [14] provides access pattern privacy to
clients (or software processes) accessing a remote database
(or RAM), requiring only logarithmic storage at the client.
The amortized communication and computational complex-
ities are O(log3n). Due to a large hidden constant factor,
the ORAM authors oﬀer an alternate solution with compu-
tational complexity of O(log4n), that is more eﬃcient for all
currently plausible database sizes.
In ORAM, the database is considered a set of n encrypted
blocks and supported operations are read(id), and write(id,
newvalue). The data is organized into log4(n) levels, as a
pyramid. Level i consists of up to 4i blocks; each block is
assigned to one of the 4i buckets at this level as determined
by a hash function. Due to hash collisions each bucket may
contain from 0 to log n blocks.
ORAM Reads. To obtain the value of block id, the client
must perform a read query in a manner that maintains two
invariants: (i) it never reveals which level the desired block
is at, and (ii) it never looks twice in the same spot for the
same block. To maintain (i), the client always scans a single
bucket in every level, starting at the top (Level 0, 1 bucket)
and working down. The hash function informs the client
of the candidate bucket at each level, which the client then
scans. Once the client has found the desired block, the client
still proceeds to each lower level, scanning random buckets
instead of those indicated by their hash function. For (ii),
once all levels have been queried, the client re-encrypts the
query result with a diﬀerent nonce and places it in the top
level. This ensures that when it repeats a search for this
block, it will locate the block immediately (in a diﬀerent
location), and the rest of the search pattern will be random-
ized. The top level quickly ﬁlls up; how to dump the top
level into the one below is described later.
ORAM Writes. Writes are performed identically to reads
in terms of the data traversal pattern, with the exception
that the new value is inserted into the top level at the end.
Inserts are performed identically to writes, since no old value
will be discovered in the query phase. Note that semantic
security properties of the re-encryption function ensure the
server is unable to distinguish between reads, writes, and
inserts, since the access patterns are indistinguishable.
Level Overﬂow. Once a level is full, it is emptied into the
level below. This second level is then re-encrypted and re-
ordered, according to a new hash function. Thus, accesses
to this new generation of the second level will hence-forth be
completely independent of any previous accesses. Each level
overﬂows once the level above it has been emptied 4 times.
Any re-ordering must be performed obliviously: once com-
plete, the adversary must be unable to make any correlation
between the old block locations and the new locations. A
sorting network is used to re-order the blocks.
To enforce invariant (i), note also that all buckets must
contain the same number of blocks. For example, if the
bucket scanned at a particular level has no blocks in it, then
the adversary would be able to determine that the desired
block was not at that level. Therefore, each re-order process
ﬁlls all partially empty buckets to the top with fake blocks.
Recall that since every block is encrypted with a semanticly
secure encryption function, the adversary cannot distinguish
between fake and real blocks.
ORAM Costs. Each query requires a total online cost of
O(log2(n)) for scanning the log n-sized bucket on each of the
log n levels, plus an additional, amortized cost due to inter-
mittent level overﬂows. Using a logarithmic amount of client
storage, reshuﬄing levels in ORAM requires an amortized
cost of O(log3(n)) per query. In practice, implementations
have a computational cost of O(log4(n)) as discussed above.
In [19] Williams et al. introduced an ORAM-variant with
a cost of O(log2 n) when O(√n) client storage is available.
In their work, the assumed client storage is used to speed up
the reshuﬄe process by taking advantage of the predictable
nature of a merge sort on uniform random data.
In this
work we build on their result.
3.2 Private Information Retrieval
Another set of existing mechanisms handle access pattern
privacy (but not data conﬁdentiality) in the presence of mul-
tiple clients. Private Information Retrieval (PIR) [8] pro-
tocols aim to allow (arbitrary, multiple) clients to retrieve
information from public or private databases, without re-
vealing to the database servers which records are retrieved.
In initial results, Chor et al. [8] proved that in an infor-
mation theoretic setting, any single-server solution requires
Ω(n) bits of communication. PIR schemes with only sub-
linear communication overheads, such as [8], require multi-
ple non-communicating servers to hold replicated copies of
the data. When the information theoretic guarantee is re-
laxed single-server solutions with better complexities exist;
an excellent survey of PIR can be found online [11, 12].
Recently, Sion et al. showed [17] that due to computation
costs, use of existing non-trivial single-server PIR protocols
on current hardware is still orders of magnitude more time-
consuming than trivially transferring the entire database.
data
outsourcing
ORAM
interaction
Data Pre-
Processor
Data
Outsourced
Data
Server Storage
data owner/client
un-trusted server
PIR
client proxy
(data “owner”)
Secure Co-
Processor
ORAM
interaction
data
clients
Data