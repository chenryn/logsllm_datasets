title:Outsourced Proofs of Retrievability
author:Frederik Armknecht and
Jens-Matthias Bohli and
Ghassan O. Karame and
Zongren Liu and
Christian A. Reuter
Outsourced Proofs of Retrievability
Frederik Armknecht
University of Mannheim, Germany
PI:EMAIL
Jens-Matthias Bohli
NEC Laboratories Europe,
Germany
Ghassan O. Karame
NEC Laboratories Europe,
Germany
PI:EMAIL
PI:EMAIL
Zongren Liu
NEC Laboratories Europe,
Germany
PI:EMAIL
Christian A. Reuter
University of Mannheim, Germany
PI:EMAIL
ABSTRACT
Proofs of Retrievability (POR) are cryptographic proofs that en-
able a cloud provider to prove that a user can retrieve his ﬁle in its
entirety. POR need to be frequently executed by the user to ensure
that their ﬁles stored on the cloud can be fully retrieved at any point
in time. To conduct and verify POR, users need to be equipped
with devices that have network access, and that can tolerate the
(non-negligible) computational overhead incurred by the veriﬁca-
tion process. This clearly hinders the large-scale adoption of POR
by cloud users, since many users increasingly rely on portable de-
vices that have limited computational capacity, or might not always
have network access.
In this paper, we introduce the notion of outsourced proofs of
retrievability (OPOR), in which users can task an external audi-
tor to perform and verify POR with the cloud provider. We argue
that the OPOR setting is subject to security risks that have not
been covered by existing POR security models. To remedy that,
we propose a formal framework and a security model for OPOR.
We then propose an instantiation of OPOR which builds upon the
provably-secure private POR scheme due to Shacham and Waters
(Asiacrypt’08) and we show its security in our proposed security
model. We implement a prototype based on our solution, and eval-
uate its performance in a realistic cloud setting. Our evaluation
results show that our proposal minimizes user effort, incurs negli-
gible overhead on the auditor (compared to the SW scheme), and
considerably improves over existing publicly veriﬁable POR.
1.
INTRODUCTION
Cloud services are increasingly gaining importance and appli-
cability in numerous application domains, such as storage, com-
puting services, collaboration platforms, etc. The success of the
cloud model is driven by the tremendous economic beneﬁt offered
to companies, private individuals, and public organizations to de-
ploy/provision cloud services in a cost effective manner.
The advent of cloud storage and computation services, however,
introduces new threats to data security. As a matter of fact, cus-
tomers of cloud services lose control over their data and how data is
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.
processed or stored. Indeed, this has been identiﬁed as the main ob-
stacle which makes users reluctant when using cloud services [2,8].
The literature features a number of solutions that enable users to
verify the integrity and availability of their outsourced data [14,16,
24, 35]. Examples include Proofs of Retrievability (POR) [24, 35]
which provide end-clients with the assurance that the data is still
available and can be entirely downloaded if needed, and Proofs of
Data Possession (PDP) [11] which enable a client to verify that its
stored data has not undergone any modiﬁcations, among others. All
existing solutions share a similar system and attacker model, com-
prising of the cloud user and a rational cloud provider. Here, the
‘malicious’ cloud aims at minimizing storage costs, e.g., by not de-
ploying the appropriate security measures in their datacenters, or
by intentionally modifying (e.g., deleting) user data.
Clearly, the guarantees provided by current solutions therefore
largely depend on the users themselves who are required to regu-
larly perform veriﬁcations (e.g., POR) in order to react as early as
possible in case of data loss. Moreover, the veriﬁcation of a POR
requires the user to be equipped with devices that have network ac-
cess, and that can tolerate the (non-negligible) computational over-
head incurred by the veriﬁcation process.
Therefore, customers either have to (i) accept this burden and
regularly verify their outsourced data (e.g., by invoking POR with
the cloud provider), or (ii) entrust the cloud providers to deploy the
necessary security mechanisms that ensure data integrity in spite of
server failures, exploits, etc. We point out that the integration of
such security mechanisms in current clouds often incurs consider-
able costs on the cloud providers, which explains the reason why
none of today’s cloud storage services accept liability for data loss
in their Service Level Agreements (SLAs) and only guarantee ser-
vice availability [5,6] – in spite of the plethora of cloud security and
dependability solutions that populate the literature [14, 24, 30, 35].
In this paper, we address this problem, and propose a novel solu-
tion—outsourced proofs of retrievability (OPOR)—which goes one
step beyond existing POR and enables an external party, the audi-
tor, to execute a POR protocol with the cloud provider on behalf
of the data owner. OPOR protects against a malicious auditor, and
malicious users/cloud providers (and against collusion among any
combination of these parties); we contrast this to existing public
(and delegable) POR [11, 32, 35, 35, 36], which allow an external
party to verify a POR but do not provide any security guarantees
when the user and/or external veriﬁer are dishonest. OPOR pro-
vides users with the guarantee that their data is entirely stored in the
cloud without having to verify their data themselves. Although au-
ditors are made (legally) liable to monitor the availability of their
ﬁles, users can verify the auditor’s work at any point in time; we
show that this veriﬁcation can be much less frequent, and is con-
siderably more (computationally) efﬁcient when compared to the
veriﬁcation of existing POR.
We argue that OPOR is technically and economically viable. In-
deed, by providing the necessary security guarantees for the audi-
tors, OPOR enables auditors to issue a security SLA for the cloud
users attesting that they will correctly verify the availability of out-
sourced data, in exchange, e.g., of ﬁnancial remuneration. While
the main barriers of wide adoption of the cloud lie in the lack of
customer trust and in the high costs of deploying security mea-
sures in cloud infrastructures, OPOR bridges these gaps and en-
ables customers and external auditors to establish a ﬁnancial con-
tract by which customers can rest assured that the security of their
ﬁles is constantly monitored.
In addition to introducing the notion of OPOR, we make the
following additional contributions:
Formal Framework. We propose a formal framework and a secu-
rity model for outsourced POR involving the cloud provider,
the user, and the auditor. Our framework extends the POR
model outlined in [35] and addresses security risks that have
not been covered so far in existing models.
Concrete Instantiation. We describe a concrete OPOR scheme,
dubbed Fortress, which builds upon the private SW POR
scheme [35] and that is secure in our enhanced security model.
Fortress inherits the security guarantees of this POR scheme
but allows to shift most of the computations a user has to
bear in a POR to the auditor. Fortress deploys a novel mech-
anism which enables the user and the auditor to commonly
extract pseudo-random bits using a time-dependent source,
and without any interaction; we show how this can be efﬁ-
ciently instantiated by leveraging functionality from Bitcoin.
Prototype Implementation. We implement and evaluate a proto-
type based on Fortress in a realistic cloud setting, and we
show that our proposal minimizes user effort, incurs negli-
gible overhead on the auditor when compared to the private-
key POR of [35], and considerably improves the performance
of existing public-key POR.
The remainder of this paper is organized as follows.
In Sec-
tion 2, we introduce a novel framework for outsourced proofs of
retrievability, OPOR. In Section 3, we propose Fortress, an efﬁ-
cient instantiation of OPOR, and analyze its security. In Section 4,
we describe a prototype implementation and evaluation of Fortress
in realistic cloud settings and compare its performance to the POR
schemes of [35]. In Section 5, we overview related work in the area
and we conclude the paper in Section 6.
2. OPOR: OUTSOURCED PROOFS OF
RETRIEVABILITY
In this section, we introduce a formal model for OPOR. Since
OPOR extends POR, we ﬁrst introduce POR, adapted from [35].
2.1 Proofs of Retrievability
Proofs of Retrievability (POR) are cryptographic proofs that prove
the retrievability of outsourced data. More precisely, POR assume
a model comprising of a user, and a service provider that stores a
ﬁle pertaining to the user. POR consist basically of a challenge-
response protocol in which the service provider proves to the user
that its ﬁle is still intact and retrievable. Note that POR only pro-
vide a guarantee that a fraction p of the ﬁle can be retrieved. For
that reason, POR are typically performed on a ﬁle which has been
erasure-coded in such a way that the recovery of any fraction p of
the stored data ensures the recovery of the ﬁle.
A POR scheme consists of four procedures [35], setup, store,
verify, and prove:
setup. This randomized algorithm generates the involved keys and
distributes them to the parties. If public keys are involved,
these are distributed amongst all parties.
store. This randomized algorithm takes as input the keys of the
user and a ﬁle M ∈ {0, 1}∗. The ﬁle gets processed and it
outputs the produced M∗ which will be stored on the server.
The algorithm also generates a ﬁle tag τ which contains addi-
tional information (e.g., metadata, secret information) about
M∗.
verify, prove. The randomized proving and verifying algorithms
deﬁne a protocol for proving ﬁle retrievability. We refer
to this protocol as the POR protocol (in contrast to a POR
scheme that comprises all four procedures). While the veri-
ﬁer algorithm takes the secret keys as input, the prover algo-
rithm takes as input the processed ﬁle M∗ that is output by
store. Both verify, prove algorithms also take as input the
public key and the ﬁle tag τ from store during protocol ex-
ecution. Algorithm verify outputs at the end of the protocol
run TRUE if the veriﬁcation succeeds, meaning that the ﬁle
is being stored on the server, and FALSE otherwise.
2.2 OPOR Model
Similar to the traditional POR model, an OPOR consists of a
user U, the data owner, who plans to outsource his data M to a
service provider S. In addition, U is interested in acquiring regular
proofs that his data is correctly stored and retrievable from S. To
this end, an OPOR comprises a new entity A, called the auditor,
who runs POR with S on behalf of U. If these POR do not succeed,
the auditor takes certain actions, e.g., inform the user immediately.
Otherwise, the user is assured that the data are stored correctly.
More speciﬁcally, an OPOR scheme comprises ﬁve protocols
Setup, Store, POR, CheckLog, and ProveLog. The ﬁrst three pro-
tocols resemble the protocols that are represented in a POR scheme
(see Section 2.1) but extend them. One major difference is that the
POR protocol not only outputs a decision on whether the POR has
been correct, but also a log ﬁle. The log ﬁles serve a twofold pur-
pose. First, they allow the user to check (using the CheckLog pro-
cedure) if the auditor did his job during the runtime of the OPOR
scheme. As the purpose of OPOR is to incur less burden on the
user, the veriﬁcation of the logs by the user should incur less re-
source consumption on the user when compared to the standard
veriﬁcation of POR directly with S. Second, logs allow the auditor
to prove (using the ProveLog procedure) that if some problems oc-
cur, e.g., the ﬁle is no longer stored by S, the auditor must not be
blamed. In what follows, we detail each protocol in OPOR.
The Setup Protocol.
This randomized protocol generates for each of the different par-
ties a public-private key pair. If a party only deploys symmetric key
schemes, the public key is simply set to ⊥. For the sake of brevity,
we implicitly assume for each of the subsequent protocols and pro-
cedures that an involved party always uses as inputs its own secret
key and the public keys of the other parties.
The Store Protocol.
This randomized ﬁle-storing protocol takes the secret keys of the
parties and a ﬁle M from the user to be stored. The output M∗ for
the service provider marks the data that it should store. The user
also needs a contract c specifying the policy for checks for the au-
ditor. Observe that M∗ may not be exactly equal to M, but it must
be guaranteed that M can be recovered from M∗. Additionally, the
output needs to contain information which (i) enables the execution
of a POR protocol between A and S on the one hand and (ii) en-
ables the validation of the log ﬁles created by A on the other hand.
This information consists of two tokens represented by τA and τU ,
respectively.
An important distinction from POR comes from the fact that
when uploading a ﬁle M to S which should be monitored by A,
several agreements need to be established. We denote by
Agree[P1,P2, [D]] a proof that both parties P1 and P2 agreed on
a ﬁle D. Observe that this does not require that D is given in clear
within the agreement. For example, an agreement could be the
signed hash of D. Most important, user U and auditor A need to
agree which ﬁle M∗ will be monitored. In addition, user and audi-
tor need to agree on the contract c that settles several parameters.
For example it may set a maximum interval within which the au-
ditor needs to notify the user in case M∗ is (partially) lost and a
maximum failure tolerance. Formally, it holds
Store :
[U : M, c; A : ⊥; S : ⊥]
, τU , τA, c]), Agree(U,S, [M
−→ [U : τU , Agree(U,A, [M
∗
∗
]);
A : τA, Agree(U,A, [M
, τU , τA, c]), Agree(A,S, [M
∗
∗
S : M
, Agree(A,S, [M