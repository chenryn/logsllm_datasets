**Author: fenix@Knownsec 404 Team**  
**Date: November 27, 2017**  
**Chinese Version:**
### 0x00 Introduction
According to [Gartner](http://www.gartner.com/newsroom/id/3598917 "Gartner"),
an IT research and consulting firm, the number of IoT devices worldwide will
reach 8.4 billion in 2017, up 31% from 6.4 billion in 2016, while the global
population is 7.5 billion. The number of IoT devices will reach 20.4 billion
in 2020.
In response, the security issues of IoT are also increasingly prominent,
especially for common devices such as webcams and routers. The rapid growth in
the number of IoT devices is in sharp contrast to the serious lag in their
security. At the same time, it also provides new opportunity for malicious
attackers and security researchers to play the game of good versus evil on a
new battlefield.
This is a detailed introductory level tutorial for many enthusiasts who want
to get started with smart device security.
### 0x01 Overview
#### 1.0 Firmware and Its Common Access Methods
Firmware is a program written in `EROM` (Erasable Read Only Memory) or
`EEPROM`(Electrically Erasable Programmable Read Only Memory). In particular,
for most routers and cameras on the market, the firmware is the program in the
25 series Flash chip on the board, which houses the embedded operating system,
usually a Linux system.
Obtaining the firmware is the premise of analyzing and mining firmware
vulnerabilities. This paper will take the camera as an example to show how to
dump firmware in Flash chips and some bright ideas after obtaining the
firmware.
In general, there are several ways to obtain firmware.
  1. **From the official:** The firmware of devices such as routers and cameras can usually be downloaded directly from the official, while it doesn’t support firmware download for most other IoT devices. The official generally only provide the latest firmware, not conducive to the study of historical firmware vulnerabilities.
  2. **Grab packet to analyze the download address of firmware:** When the phone controller (APP) can upgrade the firmware, you can try this method to obtain the firmware. If the firmware is upgraded in the form of patches, the complete firmware cannot be obtained, and data encryption may be difficult to crack.
  3. **Obtain via the serial port:** Get shell from the debug serial port, then package and upload system files.
  4. **Read the firmware memory chip directly:** It is the simplest and most direct way to read the firmware memory chip directly through the programmer. If there is line interference, which can only be read offline, the equipment may be damaged during welding.
This paper deals with the latter two ways to extract firmware.
### 0x02 About the Concepts
Before starting the formal firmware extraction, we need to grasp several basic
concepts.
#### The Serial Port and UART
The serial port is mainly used for serial bit-by-bit data transmission.
The serial port asynchronously transmits and receives bytes in bits following
the UART protocol. Normally, three pairs of pins need to be connected, and the
connection mode is as follows:
(Image via Internet)
In the figure above, TX is the receiving end, RX is the transmission end, and
GND is the ground end. Connect the debug serial port of the board and the USB
to TTL serial cable as shown. After setting important parameters such as baud
rate, data bit, stop bit and parity check, the two sides can send ASCII
characters normally, so as to carry out asynchronous serial communication.
#### 2.1 u-boot
U-boot is a kind of boot program commonly used in embedded system. It is
executed before the operating system runs, to initialize the hardware and
software environment, and finally to boot the system kernel.
### 0x03 Enter the System through the Debug Serial Port
#### 3.0 Research Objects
In this section, we will start with a wireless surveillance camera and explain
how to get the Shell of the system through the debug serial port.
Detect the open port and service of the camera by using `nmap`, and the result
is as follows:
    Host is up (0.0031s latency).
    Not shown: 996 closed ports
    PORT     STATE SERVICE    VERSION
    100/tcp   open  http       Mongoose httpd
    554/tcp  open  rtsp
    1935/tcp open  tcpwrapped
    100100/tcp open  soap       gSOAP 2.8
[Mongoose](https://github.com/cesanta/mongoose "Mongoose") monitoring on port
100 is an embedded Web server, and
[gSOAP](https://www.genivia.com/products.html "gSOAP") is a cross-platform
tool for developing Web Service servers and clients. [RTSP (Real Time
Streaming
Protocol)](https://baike.baidu.com/item/RTSP/1276768?fromtitle=RTSP%E5%8D%8F%E8%AE%AE&fromid=3361755
"RTSP \(Real Time Streaming Protocol\)") is an application-layer protocol in
TCP/IP protocol system, which defines how one-to-many applications can
effectively transmit multimedia data over IP networks.
The packet analysis of services can then be done by using tools like `Fidder`,
`wireshark`, and others, but that's not the focus of this paper. Next we will
analyze from the perspective of hardware.
#### 3.1 Tools
  * USB to TTL serial cable
  * soldering iron
  * screwdrivers
  * …
#### 3.2 Where is UART
Manufacturers of routers, cameras and other equipment usually leave debug
serial ports on the devices to facilitate development or after-sales
debugging. In order to communicate with the equipment, we first need to find
these "backdoors". Disassemble camera apart with tools, and identify the
purpose of the chip according to the model on the motherboard. As shown in the
figure, we found the location of the processor and memory chip. The processor
is [GK7102](https://www.unifore.net/company-highlights/goke-hd-ip-camera-solution-gk7101-gk7102.html "GK7102"), and the memory chip is IC25LP128. There
are three free interfaces on the motherboard in the right picture. After
testing, the lower left one is the 4-pin debug serial port (baud rate 115200),
the first pin of the serial port is `Tx`, the third pin is `Rx`, respectively
connected with the `Rx` and `Tx` of `USB-to-TTL`. The line and the motherboard
are powered by the same Hub, and the `VCC` is not much different, and no `GND`
is connected.
As for how to find the debug serial port on the device, you can refer to
[reverse-engineer-serial ports](http://www.devttys0.com/2012/11/reverse-engineering-serial-ports/ "reverse-engineer-serial ports"), no more details
here.
`minicom` is a serial port tool on the Linux platform. Type the following
command at the console to communicate with the serial port.
    # Use the following Bash code:
    minicom -D /dev/ttyUSB0
You can use the following way in case of the permissions issues in this step.
    sudo chmod 777 /dev/ttyUSB0
#### 3.3 Startup Process of Embedded System
The laptop is properly connected to the motherboard serial port. After power
supply, the following debugging information during system startup can be seen
in the terminal.
![
](https://images.seebug.org/content/images/2019/07/13d0556f-1053-4630-8102-e4293386f209.png-w331s)
![
](https://images.seebug.org/content/images/2019/07/7fdef173-039f-4a3a-aa2b-74f76a0c1c65.png-w331s)
The partition information of Flash chip is as follows:
![
](https://images.seebug.org/content/images/2019/07/a2b7b304-2f41-4773-9c17-e89c83924b5d.png-w331s)
After booting up, the system starts the following services, which may be the
main process of the camera service.
![
](https://images.seebug.org/content/images/2019/07/a92115b7-3347-40ad-94a5-26b9d295bcc5.png-w331s)
After the system is started, the Shell login interface is provided.
![
](https://images.seebug.org/content/images/2019/07/f9d5f690-f9fa-4406-ba25-5542d6057866.png-w331s)
By observing the startup process, we have gained a lot of useful information
and have a general understanding of how `u-boot` boots the system.
Finally, we tried to use weak passwords to get the Shell of the system.
Unfortunately, after many attempts, we failed.
#### 3.4 Login Bypass
If you've ever used Linux, maybe you've experienced the awkwardness of
forgetting your system password and not being able to access it. Our solution
is very simple and direct: go directly to the grub boot to change the
password. Therefore, if the device is within reach, there is almost no problem
of access to the system.
On a camera running an embedded Linux operating system, there exists `u-boot`
as well, similar to `grub`.
Restart the device and enter the `u-boot` command line by typing the
combination keys.
There are many built-in commands for us to use in the `u-boot` command line.
Type “h” to view the help.
![
](https://images.seebug.org/content/images/2019/07/b3c2a3da-8ed0-4592-8d78-a6426fd5b9b0.png-w331s)
Print the parameter information passed to the kernel by `u-boot` via
`printenv`.
The contents of some of the parameters show how `u-boot` transfers control to
the kernel.
  * Firstly, set the startup parameters for the kernel.
`console=${consoledev},${baudrate} noinitrd mem=${mem} rw ${rootfstype}