Msg4(r+1)
Install PTK & GTK
Msg4(r+2)
Install-keys command
Enc1
ptk{ Msg4(r+2) }
Reinstall PTK & GTK
next transmitted frame will reuse nonce 1
Data(...)
Enc1
ptk{ Data(...) }
Figure 5: Key reinstallation attack against the 4-way hand-
shake, when the victim accepts a plaintext message 3 re-
transmission if sent instantly after the first one. We assume
encryption and decryption is offloaded to the wireless NIC.
this happens, and how it can be exploited. Note that the AP is not
drawn in this figure: its actions are clear from context. In our attack,
we first let the client and AP exchange Message 1 and 2. However,
we do not forward the first message 3 to the client. Instead we wait
until the AP retransmits a second message 3. In stage two of the
attack, we send both message 3’s instantly after one another to the
client. The wireless NIC, which implements the data-confidentiality
protocol, does not have a PTK installed, and hence forwards both
messages to the packet receive queue of the main CPU. The main
CPU, which implements the 4-way handshake, replies to the first
message 3 and commands the wireless NIC to install the PTK. In
stage 4 of the attack, the main CPU of the client grabs the second
message 3 from its receive queue. Although it notices the frame
was not encrypted, Android and Linux allow unencrypted EAPOL
frames as an exception, and therefore the main CPU will process
the retransmitted message 3. Because the NIC has just installed the
PTK, the reply will be encrypted with a nonce value of 1. After this,
it commands the wireless NIC to reinstall the PTK. By doing this,
the NIC resets the nonce and replay counter associated to the PTK,
meaning the next transmitted data frame will reuse nonce 1.
1○
2○
3○
4○
5○
initial 4-way or FT handshake
Install PTK & GTK
pairwise rekey in progress
Msg3(r+1; GTK)
Msg3(r+2; GTK)
Msg4(r+1)
Install-keys command
Encx
Encx +1
ptk{ Msg3(r+1; GTK) }
ptk { Msg3(r+2; GTK) }
Ency
ptk{ Msg4(r+1) }
Install PTK′ & GTK
Msg4(r+2)
Install-keys command
Enc1
ptk′{ Msg4(r+2) }
Reinstall PTK′ & GTK
next transmitted frame will reuse nonce 1
Data(...)
Enc1
ptk′{ Data(...) }
Figure 6: Key reinstallation attack against the 4-way hand-
shake, when the victim only accepts encrypted message 3
retransmissions once a PTK is installed. We assume encryp-
tion and decryption is offloaded to the wireless NIC.
We now show how to attack OpenBSD, OS X, and macOS (see
Table 1 column 5). These devices only accept encrypted retransmis-
sions of message 3. Similar to the Android attack, we abuse race
conditions between the wireless NIC and main CPU. However, we
now target a 4-way handshake execution that refreshes (rekeys) the
PTK. Recall from Section 2.3 that all messages transmitted during a
rekey undergo encryption by the data-confidentiality protocol.
Figure 6 illustrates the details of the attack. Note that the AP is
not draw in this figure: its actions are clear from context. Again the
adversary uses a channel-based MitM position [70]. She then lets
the victim and adversary execute the initial 4-way handshake, and
waits until a second 4-way handshake is initiated to refresh the PTK.
Even though she only sees encrypted frames, messages in the 4-way
handshake can be detected by their unique length and destination.
At this point, the attack is analogous to the Android case. That is,
in stage 2 of the attack, the adversary does not instantly forward
the first message 3. Instead, she waits until the AP retransmits
message 3, and then forwards both messages right after one another
to the victim (see Figure 6 stage 2). The wireless NIC will decrypt
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1319CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
Mathy Vanhoef and Frank Piessens
both messages using the current PTK, and forwards them to the
packet receive queue of the main CPU. In the third stage of the
attack, the main CPU of the victim processes the first message 3,
replies to it, and commands the NIC to install the new PTK. In
the fourth stage, the main CPU picks the second message 3 from
the receive queue. Since a PTK is installed, OpenBSD, OS X, and
macOS (here called the main CPU) will mandate that the message
was encrypted. However, they do not check under which key the
message was encrypted. As a result, even though the message was
decrypted under the old PTK, the main CPU will process it. The
message 4 sent as a reply is now encrypted under the new PTK
using a nonce value of 1. After this, the main CPU commands the
NIC to reinstall the PTK, thereby resetting the nonce and replay
counters. Finally, the next data frame that the victim transmits
will again be encrypted using the new PTK with a nonce of 1. We
confirmed this attack against OpenBSD 6.1, OS X 10.9.5, and macOS
Sierra 10.12.
OpenBSD is only vulnerable if encryption is offloaded to the wire-
less NIC. For example, the iwn driver and associated devices support
hardware encryption, and therefore are vulnerable. However, the
rum driver performs software encryption in the same entity as the
4-way handshake, and is not vulnerable (see Table 1 column 5).
This attack technique requires us to wait until a rekey of the
session key occurs. Several APs do this every hour [66], some exam-
ples being [24, 26]. In practice, clients can also request a rekey by
sending an EAPOL frame to the AP with the Request and Pairwise
bits set. Coincidently, Broadcom routers do not verify the authentic-
ity (MIC) of this frame, meaning an adversary can force Broadcom
APs into starting a rekey handshake. All combined, we can assume
a rekey will eventually occur, meaning an adversary can carry out
the key reinstallation attack.
3.5 Attacking the PeerKey Handshake
The PeerKey handshake is related to the 4-way handshake, and
used when two clients want to communicate with each other di-
rectly in a secure manner. It consists of two phases [1, §12.7.8]. In
the first phase, a Station-To-Station Link (STSL) Master Key (SMK)
handshake is performed. It negotiates a shared master secret be-
tween both clients. In the second phase, a fresh session key is
derived from this master key using the STSL Transient Key (STK)
handshake. Although this protocol does not appear to be widely
supported [49], it forms a good test case to gauge how applicable
our key reinstallation technique is.
Unsurprisingly, the SKM handshake is not affected by our key
reinstallation attack. After all, the master key negotiated in this
handshake is not used by a data-confidentiality protocol, meaning
there are no nonces or replay counters to reset. However, the STK
handshake is based on the 4-way handshake, and it does install a
key for use by a data-confidentiality protocol. As a result, it can
be attacked in precisely the same manner as the 4-way handshake.
The resulting attack was tested against wpa_supplicant. To carry
out the test, we modified another wpa_supplicant instance to send
a second (retransmitted) message 3. This confirmed that an unmod-
ified wpa_supplicant will reinstall the STK key when receiving a
retransmitted message 3 of the STK handshake. However, we did
Table 2: Behaviour of Access Points. The 2nd column shows
whether it accepts replay counters it used in a message to the
client, but did not yet receive in a reply, or if it only accepts
the latest used counter. Column 3 shows whether the GTK
is installed immediately after sending group message 1, or if
this is delayed until all clients replied with group message 2.
GTK Install Time
latest only
not yet received
latest only
latest only
latest only
Replay Check
not yet received
Implementation
802.11 standard
Broadcom
Hostapd
OpenBSD
MediaTek
Aironet (Cisco)
Aerohive
Ubiquiti
macOS Sierra 10.12
Windows 7
Windows 10
a Retransmitted handshake messages do not use a new re-
play counter, so at all times there is only one allowed value.
delayed
immediate
delayed
delayed
immediate
immediate
delayed
delayed
immediate
not yet received
not yet received
latest only a
latest only
latest only
The group key is
never refreshed
not find other devices that support PeerKey. As a result, the impact
of our attack against the PeerKey handshake is rather low.
4 BREAKING THE GROUP KEY HANDSHAKE
In this section we apply our key reinstallation technique against the
group key handshake. We show all Wi-Fi clients are vulnerable to
it, enabling an adversary to replay broadcast and multicast frames.
4.1 Details of the Group Key Handshake
Networks periodically fresh the group key, to assure that only re-
cently authorized clients posses this key. In the most defensive case,
the group key is renewed whenever a client leaves the network. The
new group key is distributed using a group key handshake, and this
handshake has been formally proven as secure in [39]. As shown
in Figure 2, the handshake is initiated by the AP when it sends a
group message 1 to all clients. The AP retransmits this message if
it did not receive an appropriate reply. Note that the EAPOL replay
counter of these retransmitted messages is always incremented
by one. In our attack, the goal is to collect a retransmitted group
message 1, block it from arriving at the client, and forward it to
the client at a later point in the time. This will trick to client into
reinitializing the replay counter of the installed group key.
The first prerequisite of our attack, is that clients will reinitialize
the replay counter when installing an already-in-use group key.
Since clients also use the MLME-SETKEYS.request primitive to
install the group key, this should be the case. We confirmed that in
practice all Wi-Fi clients indeed reinitialize the replay counter of
an already-in-use group key (see Table 1 column 7). Therefore, all
Wi-Fi clients are vulnerable to our subsequent attacks.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1320Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2
CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
The second prerequisite is that we must be able to collect a group
message 1 that the client (still) accepts, and that contains a group
key that is already in use by the AP. How to achieve this depends
on when the AP starts using the new group key. In particular, the
AP may start using the new group key immediately after sending
the first group message 1, or it may delay the installation of the
group key until all clients replied using group message 2. Table 2,
column 3, summarizes this behaviour for several APs. Note that
according to the standard, the new group key should be installed
after all stations replied with a group message 2, i.e., the GTK
should be installed in a delayed fashion [1, Fig. 12-53]. When the
AP immediately installs the group key, our key reinstallation attack
is straightforward. However, if the AP installs the group key in a
delayed fashion, our attack becomes more intricate. We will discuss
both these cases in more detail in Section 4.2 and 4.3, respectively.
Recall from Section 2.3 that only the AP will transmit real broad-
cast and multicast frames (i.e., group frames) which are encrypted
using the group key. Since our key reinstallation attack targets the
client, this means we cannot force nonce reusing during encryption.
However, the client resets the replay counter when reinstalling the
group key, which can be abused to replay frames towards clients.
Most APs refresh the group key every hour. Some networks even
refresh this key whenever a client leaves the network. Additionally,
clients can trigger a group key handshake by sending an EAPOL
frame having the flags Request and Group [1, §12.7.7.1]. Again,
Broadcom routers do not verify the authenticity of this message,
meaning an attacker can forge it to trigger a group key update. All
combined, we can assume most networks will eventually execute a
group key update, which we can subsequently attack.
4.2 Attacking Immediate Key Installation
Figure 7 illustrates our key reinstallation attack when the AP imme-
diately installs the group key after sending group message 1 to all
clients. Notice that the group key handshakes messages themselves
are encrypted using the data-confidentiality algorithm under the
current PTK. On receipt of group message 1, the client installs the
new GTK, and replies with group message 2. The adversary blocks
this message from arriving at the AP. Hence, the AP will retransmit
a new group message 1 in stage 2 of the attack. We now wait until
a broadcast data frame is transmitted, and forward it to the victim.
After this, we forward the retransmitted group message 1 from
stage 2 to the victim. As a result, the victim will reinstall the GTK,
and will thereby reinitialize its associated replay counter. This al-
lows us to replay the broadcast data frame (see stage 5). The client
accepts this frame because its replay counter was reinitialized.
It is essential that the broadcast frame we replay is sent before the
retransmission of group message 1. This is because group message 1
contains the group key’s current value of the replay counter (recall
Section 2.5). Therefore, if it is sent after the broadcast frame, it
would contain the updated replay counter and therefore cannot be
abused to reinitialize the replay counter of the victim.
We confirmed this attack in practice for APs that immediately
install the group key after sending group message 1 (see Table 2 col-
umn 3). Based on our experiments, all Wi-Fi clients are vulnerable
to this attack when connected to an AP behaving in this manner.