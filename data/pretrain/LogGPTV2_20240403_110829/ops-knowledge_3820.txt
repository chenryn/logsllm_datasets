User: I have a Program written in python for automated testing on mobile devices (iOS & Android). The proper workflow of this program is as follows (for smoke tests):

Deploy executable to USB-connected device (.ipa or .app) using ios-deploy
Start Application (debugging process) --> writes to stdout.
Write output into Pipe --> this way it is possible to read the output of the debugging process parallel to it.
If the searched needle is detected in the output, the device is restarted (this is quite a dirty workaround, I am going to insert a force-stop method or something similar)

My Problem is: When the needle is detected in the output of the debug process, the lldb session is interrupted, but not exited. To exit the lldb session, I have to reconnect the device or quit terminal and open it again. 
Is there a possibility to append something like a "time-to-live-flag" to the lldb call to determine how long the lldb session should run until it exits auomatically? Another way I can imagine how to exit the lldb session is to join the session again after the device is restarted and then exit it, but it seems that lldb is just a subprocess of ios-deploy. Therefore I have not found any possibility to get access to the lldb process.
Assistant: There isn't such a thing built into lldb, but presumably you could set a timer in Python and have it kill the debug session if that's appropriate.
Note, when you restart the device, the connection from lldb to the remote debug server should close, and lldb should detect that it closed and quit the process.  It won't exit when that happens by default, but presumably whatever you have waiting on debugger events can detect the debuggee's exit and exit or whatever you need it to do.
Note, if lldb is waiting on input from debugserver (if the program is running) then it should notice this automatically, since the select call will return with EOF.  But if the process is stopped when you close the connection, lldb probably won't notice that till it goes to read something.  
In the latter case, you should be able to have lldb react to the stop that indicates the "needle" is found, and kill the debug session by hand.