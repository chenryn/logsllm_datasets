Q | A  
---|---  
Bug report? | yes  
Feature request? | no  
BC Break report? | no  
RFC? | yes/no  
Symfony version | 3.2.2  
When executing a command which throws a null error the isSuccessFul() method
of Symfony\Component\Process\Process returns true.
For example, when executing the following command:
    class FailingCronCommand extends ContainerAwareCommand
    {
      protected function configure()
      {
        $this->setName('command:fail');
      }
      protected function execute(InputInterface $input, OutputInterface $output)
      {
        $testNull = null;
        // throw new \Exception('FAIL');
        if ($testNull->getName() === null) {
          // never gets here because $testNull is null and trying getName() throws an error
        }
      }
    }
using the following code:
    /**
     * $console contains the full path to bin/console
     * @var Symfony\Component\Process\Process $process
     */
    $process = new Process('php ' .self::$console. ' command:fail');
    $process->run();
    $process->isSuccessful(); // returns true
    $process->getExitCode(); // returns 0 (OK)
    $process->getErrorOutput();
    /**
      [Symfony\Component\Debug\Exception\FatalThrowableError]
      Call to a member function getName() on null
    **/
When throwing a custom exception in `command:fail` the process I get the
following output:
    $process->isSuccessful(); // returns false
    $process->getExitCode(); // returns 1 (general error)
I also tried setting the "suppress_errors" option to false, but that did not
seem to make any difference.