### 4. Implementation

We define the SAuth protocol messages as a set of URIs, which facilitates their integration into URI-oriented application-level protocols such as HTTP. In our design, the user is represented by an agent program, typically a web browser. While we focus on HTTP due to its widespread use in web services, our design can be adapted to any other application-level protocol that supports endpoint redirection.

#### Message Categories
Our messages are categorized into two types: registration and authentication messages, defined as registration and authentication URIs, respectively.

#### Endpoint Awareness
For a target service and a vouching service to engage in an SAuth session, they must be aware of each other's endpoints. These endpoints can be explicitly exchanged offline or retrieved automatically from an XML file (conventionally named `sauth.xml`) hosted under the domain of each service and served over a secure network layer, such as SSL (e.g., `https://www.example.org/sauth.xml`). This allows users of a target service to include a vouching service of their choosing by providing the vouching service's domain name on the target service’s SAuth activation page. Alternatively, users can select from pre-configured vouching services.

#### Technical Realization
To address the technical challenges of adopting our protocol in a web application, we have implemented it entirely in PHP and developed sample applications with both front-end and back-end components. We argue that once SAuth is offered as a module or library, its adoption will require effort comparable to that of OAuth and similar authorization protocols, which are widely used today. Our implementation consists of fewer than 1000 lines of code (LoC).

### Registration Process

A user registering with a target service, S, selects a vouching party from a list of cooperating services or specifies one by providing its domain name (Listing 1, line 1). The selection of a vouching service or the introduction of a new one is only possible when registering a new account with the target service or after successfully authenticating to an existing one through SAuth, if enabled.

The response from service S to the user-agent’s registration request is a redirection to the authentication endpoint of the selected vouching service, V, with the parameter `action` set to instruct V to authenticate the user and associate the resulting account with an anonymous alias (Listing 2, line 1). Service S binds this alias to the newly registered account upon receiving confirmation from V. If the user has an account with V, they provide their credentials for authentication. If SAuth is enabled on V, a synergy-enhanced authentication process follows. If the user does not have an account with V, they can create one at this point. Eventually, the user successfully authenticates or creates a new account with V. Service V then redirects the user-agent back to service S, setting the `action` parameter to signal S to bind the generated alias to the user’s account (Listing 1, line 4). This completes the registration process under SAuth.

### Authentication Process

To authenticate using SAuth, a user first visits the target service, S, and is prompted for their username and password. They are also asked to select a vouching service, V (Listing 2, line 4). This selection can occur either on the same screen as the login form or after their credentials are authenticated by S. In the first case, the user can choose from any vouching services supported by S. In the second case, the user can only select from vouching services already associated with their account through a foreign alias. If the user specified a vouching party by its domain name, that party will be available as an option.

Target service S then redirects the user-agent to V, setting the `action` parameter to signal that a vouching for the current user is expected (Listing 2, line 7). The user presents their credentials to V for authentication. Upon successful local authentication with V, the service’s response redirects the user-agent back to S, setting the `action` parameter to indicate that the user has successfully authenticated and including the associated foreign alias in the response. Service S verifies this vouching response and checks if the returned foreign alias matches the alias bound to the user’s account on S. If there is a match, S successfully authenticates the user using SAuth and can optionally return a persistent authentication token, such as an HTTP cookie, to the user-agent for future interactions.

### HTTP User-Agent Redirection

To facilitate message relaying through the user-agent in HTTP, we use 3xx redirection messages. For service S to redirect the user-agent to service V, it responds with the 303 "See other" status code and includes the `Location` header with a URI under the service V domain that targets the desired endpoint and carries the necessary parameters. Listing 3 provides an example where the user-agent is redirected to V with a vouching request after successfully authenticating with S.

### Cryptographic Signatures

To ensure the integrity of messages relayed by the user-agent, we implement cryptographic signatures using 1024-bit RSA key pairs and the SHA-1 digest algorithm. Each protocol message must contain the parameters `service`, `signature`, and `signed_fields`. The `service` parameter identifies the sender and is used to retrieve the necessary information for verifying the signature. The `signed_fields` parameter specifies which parameters are included in the signature.

Web services use the same private key that supports their HTTPS connections with clients, and the corresponding public key is protected under an X.509 public key certificate. To verify a signature in SAuth, a service uses the `service` identifier to locate the corresponding URL for the sender. If the hostname of the sender service is used as the identifier, the service connects to the sender and downloads its public-key certificate. After retrieving the certificate, the service verifies the signature over the parameters specified by `signed_fields`. On success, the parameters are committed to the current user session. HTTP parameters not covered by the signature are discarded. If a parameter is specified twice, only the instance carrying a value that causes the signature verification to succeed is kept. If a signature fails, the request is terminated immediately, and no further processing occurs.

### Ensuring Freshness and Avoiding Replay Attacks

To ensure the freshness of protocol messages and avoid replay attacks, a nonce is generated per message and per user and is bound to the current user’s session state maintained by the service. The nonce is included as a parameter in the protocol message sent to a remote service, and the response is expected to carry the same nonce. Nonces do not survive the termination of a user session.

### 5. Password Reuse

SAuth becomes ineffective when a user shares the same password across multiple web sites acting as vouching services. Unfortunately, password reuse is common, with users often reusing passwords across six different web sites on average. This intensifies the problem of password leakage. Password management software, now natively offered by web browsers, could help, but usability issues hinder wide adoption.

#### Decoys

In line with recent research, we propose placing decoy passwords in databases to introduce uncertainty about the actual passwords chosen by users. This means that anyone examining the password database, including an attacker who has compromised it, will find that every user account has N passwords instead of one. Any of these passwords can successfully authenticate the user to the service, which is a key difference from Kamouflage and Honeywords. Decoy passwords carry no distinguishing marks and receive no special treatment from the service to eliminate heuristics that could distinguish them from actual user-set passwords.

#### Decoy Generation

Generating indistinguishable decoys is an interesting research area. Bowen et al. have worked on providing believable decoys at the database level. By integrating decoys, we aim to decrease the probability of an attacker successfully logging in, even in cases where a service has been compromised and the user’s password has been leaked.

### Table 1: Probabilities of Different Login Events

| Scenario | Current System | Proposed System (SAuth) | Proposed System with Decoys |
|----------|----------------|-------------------------|------------------------------|
| Normal Login (No Prior Knowledge) | P_S^-1 | P_S^-1 | K1 · K2 · (P_S 2)^-1 |
| Normal Login (Password Reuse) | P_S^-1 | P_S^-1 | K2 · P_S^-1 |
| Leaked Password (No Decoys) | 1 ✗ | P_S^-1 ✓ | 1 ✗ |
| Leaked Password (With Decoys) | 1 ✗ | P_S^-1 ✓ | K1^-1 ✓ |

Table 1 shows the probabilities of different login events under the current and proposed authentication systems. The proposed system (SAuth) offers a significant increase in security for normal login scenarios and cases where a service has been compromised. By coupling SAuth with decoys, we further decrease the probability of an attacker successfully logging in, even in the most challenging scenarios.