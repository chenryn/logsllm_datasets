title:NetHide: Secure and Practical Network Topology Obfuscation
author:Roland Meier and
Petar Tsankov and
Vincent Lenders and
Laurent Vanbever and
Martin T. Vechev
NetHide: Secure and Practical Network 
Topology Obfuscation
Roland Meier and Petar Tsankov, ETH Zurich; Vincent Lenders, armasuisse; 
Laurent Vanbever and Martin Vechev, ETH Zurich
https://www.usenix.org/conference/usenixsecurity18/presentation/meier
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.NetHide: Secure and Practical Network Topology Obfuscation
Roland Meier∗, Petar Tsankov∗, Vincent Lenders(cid:5), Laurent Vanbever∗, Martin Vechev∗
∗ ETH Zürich
(cid:5)armasuisse
nethide.ethz.ch
Abstract
Simple path tracing tools such as traceroute allow
malicious users to infer network topologies remotely and
use that knowledge to craft advanced denial-of-service
(DoS) attacks such as Link-Flooding Attacks (LFAs).
Yet, despite the risk, most network operators still allow
path tracing as it is an essential network debugging tool.
In this paper, we present NetHide, a network topol-
ogy obfuscation framework that mitigates LFAs while
preserving the practicality of path tracing tools. The key
idea behind NetHide is to formulate network obfuscation
as a multi-objective optimization problem that allows for
a ﬂexible tradeoff between security (encoded as hard
constraints) and usability (encoded as soft constraints).
While solving this problem exactly is hard, we show that
NetHide can obfuscate topologies at scale by only con-
sidering a subset of the candidate solutions and without
reducing obfuscation quality. In practice, NetHide obfus-
cates the topology by intercepting and modifying path
tracing probes directly in the data plane. We show that
this process can be done at line-rate, in a stateless fash-
ion, by leveraging the latest generation of programmable
network devices.
We fully implemented NetHide and evaluated it on re-
alistic topologies. Our results show that NetHide is able
to obfuscate large topologies (> 150 nodes) while pre-
serving near-perfect debugging capabilities. In particu-
lar, we show that operators can still precisely trace back
> 90% of link failures despite obfuscation.
1
Introduction
Botnet-driven Distributed Denial-of-Service (DDoS) at-
tacks constitute one of today’s major Internet threats [1,
2, 5, 10]. Such attacks can be divided in two categories
depending on whether they target end-hosts and services
(volume-based attacks) or the network infrastructure it-
self (link-ﬂooding attacks, LFAs).
Volume-based attacks are the simplest and work by
sending massive amounts of data to selected targets. Re-
cent examples include the 1.2 Tbps DDoS attack against
Dyn’s DNS service [6] in October 2016 and the 1.35
Tbps DDoS attack against GitHub in February 2018 [8].
While impressive, these attacks can be mitigated today
by diverting the incoming trafﬁc through large CDN in-
frastructures [23]. As an illustration, CloudFlare’s infras-
tructure can now mitigate volume-based attacks reaching
Terabits per second [18].
Link-ﬂooding attacks (LFAs) [26, 38] are more so-
phisticated and work by having a botnet generate low-
rate ﬂows between pairs of bots or towards public ser-
vices such that all of these ﬂows cross a given set of
network links or nodes, degrading (or even preventing)
the connectivity for all services using them. LFAs are
much harder to detect as: (i) trafﬁc volumes are rela-
tively small (10 Gbps or 40 Gbps attacks are enough to
kill most Internet links [31]); and (ii) attack ﬂows are
indistinguishable from legitimate trafﬁc. Representative
examples include the Spamhaus attack which ﬂooded se-
lected Internet eXchange Point (IXP) links in Europe and
Asia [4, 7, 12].
Unlike volume-based attacks, performing an LFA re-
quires the attacker to know the topology and the forward-
ing behavior of the targeted network. Without this knowl-
edge, an attacker can only “guess” which ﬂows share
a common link, considerably reducing the attack’s efﬁ-
ciency. As an illustration, our simulations indicate that
congesting an arbitrary link without knowing the topol-
ogy requires 5 times more ﬂows, while congesting a spe-
ciﬁc link is order of magnitudes more difﬁcult.
Nowadays, attackers can easily acquire topology
knowledge by running path tracing tools such as
traceroute [17].
In fact, previous studies have
shown that entire topologies can be precisely mapped
with traceroute provided enough vantage points are
used [37], a requirement easily met by using large-scale
measurement platforms (e.g., RIPE Atlas [16]).
USENIX Association
27th USENIX Security Symposium    693
Existing works Existing LFA countermeasures either
work reactively or proactively. Reactive measures dy-
namically adapt how trafﬁc is being forwarded [25,
33] or have networks collaborating to detect malicious
ﬂows [31]. Proactive measures work by obfuscating the
network topology so as to prevent attackers from dis-
covering potential targets [28, 39, 40]. The problem with
reactive countermeasures is the relative lack of incen-
tives to deploy them: collaborative detection is only use-
ful with a signiﬁcant amount of participating networks,
while dynamic trafﬁc adaptation conﬂicts with trafﬁc en-
gineering objectives. In contrast, proactive approaches
can protect each network individually without impact-
ing normal trafﬁc forwarding. Yet, they considerably
lower the usefulness of path tracing tools [28,39] such as
traceroute which is the prevalent tool for debugging
networks [24,27,37]. Further, they also provide poor ob-
fuscation which can be easily broken with a small num-
ber of brute-force attacks [39, 40].
Problem statement Given the limitations of existing
techniques, a fundamental question remains open: is it
possible to obfuscate a network topology so as to mit-
igate attackers from performing link ﬂooding attacks
while, at the same time, preserving the usefulness of path
tracing tools?
Key challenges Answering this question is challenging
for at least three reasons:
1. The topology must be obfuscated with respect to any
possible attacker location: attackers can be located
anywhere and their tracing trafﬁc is often indistin-
guishable from legitimate user requests.
2. The obfuscation logic should not be invertible and
should scale to large topologies.
3. The obfuscation logic needs to be able to intercept
and modify tracing trafﬁc at line-rate. To preserve
the troubleshooting-ability of network operators, trac-
ing trafﬁc should still ﬂow across the correct physical
links such that, for example, link failures in the phys-
ical topology are visible in the obfuscated one.
NetHide We present NetHide, a novel network obfus-
cation approach which addresses the above challenges.
NetHide consists of two main components: (i) a usability-
preserving and scalable obfuscation algorithm; and (ii) a
runtime system, which modiﬁes tracing trafﬁc directly in
the data plane.
The key technical insight behind NetHide is to formu-
late the network obfuscation task as a multi-objective op-
timization problem that allows for a ﬂexible trade-off be-
tween security (encoded as hard constraints) and usabil-
ity (soft constraints). We introduce two metrics to quan-
tify the usability of an obfuscated topology: accuracy
and utility. Intuitively, the accuracy measures the sim-
ilarity between the path along which a ﬂow is routed in
the physical topology with the path that NetHide presents
in the virtual topology. The utility captures how physi-
cal events (e.g., link failures or congestion) in the phys-
ical topology are represented in the virtual topology. To
scale, we show that considering only a few randomly se-
lected candidate topologies, and optimizing over those,
is enough to ﬁnd secure solutions with near-optimal ac-
curacy and utility.
We fully implemented NetHide and evaluated it on re-
alistic topologies. We show that NetHide is able to obfus-
cate large topologies (> 150 nodes) with marginal impact
on usability. In fact, we show in a case study that NetHide
allows to precisely detect the vast majority (> 90%) of
link failures. We also show that NetHide is useful when
partially deployed: 40 % of programmable devices allow
to protect up to 60 % of the ﬂows.
Contributions Our main contributions are:
• A novel formulation of the network obfuscation prob-
lem in a way that preserves the usefulness of existing
debugging tools (§3).
• An encoding of the obfuscation task as a linear op-
timization problem together with a random sampling
technique to ensure scalability (§4).
• An end-to-end implementation of our approach, in-
cluding an online packet modiﬁcation runtime (§5).
• An evaluation of NetHide on representative network
topologies. We show that NetHide can obfuscate
topologies of large networks in a reasonable amount
of time. The obfuscation has little impact on benign
users and mitigates realistic attacker strategies (§6).
2 Model
We now present our network and attacker models and
formulate the precise problem we address.
2.1 Network model
We consider layer 3 (IP) networks operated by a single
authority, such as an Internet service provider or an en-
terprise. Trafﬁc at this layer is routed according to the
destination IP address. We assume that routing is deter-
ministic, meaning that the trafﬁc is sent along a single
path between each pair of nodes. While this assumption
does not hold for networks relying on probabilistic load-
balancing mechanisms (e.g., ECMP [15]), it makes our
attacker more powerful as all paths are assumed to be
persistent and therefore easier to learn.
To deploy NetHide, we assume that some of the routers
are programmable in a way that allows them to: (i) match
694    27th USENIX Security Symposium
USENIX Association
Network components
(Nodes)
(Links)
(Forwarding tree)
(Forwarding trees)
(Flows)
Network topologies
(Physical)
(Virtual)
Metrics
(Flows per link)
(Flow density)
(Capacity)
(Accuracy)
(Utility)
N ⊆ N = {n1, . . . ,nN}
L ⊆ N × N
Tn = (N,Ln),tree rooted at n
n∈N Tn
F ⊆ N × N
T = (cid:83)
P = (N,L,T )
V = (N(cid:48),L(cid:48),T(cid:48))
N ⊆ N(cid:48)
f (T,l) = {(s,d) ∈ F | l ∈ Td}
fd(T,l) = | f (T,l)|
L → N
((s,d) ,P,V ) (cid:55)→ [0,1]
((s,d) ,P,V ) (cid:55)→ [0,1]
c
acc
util
:
:
:
Figure 2: NetHide notation and metrics
TTL values are decremented by one at each router, and
that the ﬁrst router to see a TTL value of 0 sends a re-
sponse to the source of the probe. For example, a packet
with TTL value of 3 sent from A to B will cause the third
router along the path from A to B to send an ICMP time
exceeded message to A. By aggregating paths between
many host pairs, it is possible to determine the topol-
ogy and the forwarding behavior of the network [37].
We remark that in addition to revealing forwarding paths,
traceroute-like probes also disclose the Round-Trip
Time (RTT), i.e., the time difference between the mo-
ment a probe is sent and the corresponding ICMP time
exceeded message is received, which can be used as a
side-channel to gain intuition about the feasibility of a
(potentially obfuscated) path returned by traceroute.
Finally, we assume that the attacker knows everything
about the deployed protection mechanisms in the net-
work (including the ones presented in this paper) except
their secret inputs and random decisions following Ker-
ckhoff’s principle [34].
2.3 Notation
We depict our notation and deﬁnitions in Fig. 2. We
model a network topology as a graph with nodes N ⊆ N ,
where N is the set of all possible nodes, and links
L ⊆ N × N. A node in the graph corresponds to a router
in the network and a link corresponds to an (undirected)
connection between two routers. NetHide allows to ex-
tend a topology with virtual nodes, i.e., nodes v ∈ N \N.
Given a node n, we use a tree Tn = (N,Ln) rooted at n