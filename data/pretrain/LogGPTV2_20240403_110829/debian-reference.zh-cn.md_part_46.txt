### 源代码合并工具列表

| 工具名称 | 版本 | 流行度 | 大小 | 命令 | 说明 |
| --- | --- | --- | --- | --- | --- |
| meld | V:8, I:31 | 3500 | meld(1) | 比较和移植文件（GTK） |
| wiggle | V:0, I:0 | 176 | wiggle(1) | 应用被拒绝的补丁 |
| diffutils | V:865, I:996 | 1735 | diff(1) | 逐行比较两个文件 |
| diffutils | V:865, I:996 | 1735 | diff3(1) | 逐行比较和合并三个文件 |
| quilt | V:2, I:23 | 871 | quilt(1) | 管理系列补丁 |
| wdiff | V:7, I:52 | 648 | wdiff(1) | 在文本文件中显示单词的不同 |
| diffstat | V:13, I:122 | 74 | diffstat(1) | 通过diff生成一个改变柱状图 |
| patchutils | V:15, I:120 | 232 | combinediff(1) | 从两个增量补丁创建一个积累补丁 |
| patchutils | V:15, I:120 | 232 | dehtmldiff(1) | 从HTML页面提取出一个diff |
| patchutils | V:15, I:120 | 232 | filterdiff(1) | 从diff文件中提取或排除特定部分 |
| patchutils | V:15, I:120 | 232 | fixcvsdiff(1) | 修复由CVS错误创建的diff文件 |
| patchutils | V:15, I:120 | 232 | flipdiff(1) | 交换两个补丁的顺序 |
| patchutils | V:15, I:120 | 232 | grepdiff(1) | 显示匹配正则表达式的补丁修改的文件 |
| patchutils | V:15, I:120 | 232 | interdiff(1) | 显示两个统一格式diff文件之间的差异 |
| patchutils | V:15, I:120 | 232 | lsdiff(1) | 显示哪些文件由补丁修改 |
| patchutils | V:15, I:120 | 232 | recountdiff(1) | 重新计算通用内容diff文件的数量和偏移 |
| patchutils | V:15, I:120 | 232 | rediff(1) | 修复手工编辑diff文件的数量和偏移 |
| patchutils | V:15, I:120 | 232 | splitdiff(1) | 隔离出增量补丁 |
| patchutils | V:15, I:120 | 232 | unwrapdiff(1) | 识别已经被分词的补丁 |
| dirdiff | V:0, I:1 | 167 | dirdiff(1) | 显示目录树之间的不同并移植改变 |
| docdiff | V:0, I:0 | 553 | docdiff(1) | 逐词逐字地比较两个文件 |
| makepatch | V:0, I:0 | 100 | makepatch(1) | 生成扩展补丁文件 |
| applypatch | V:0, I:0 | 100 | applypatch(1) | 应用扩展补丁文件 |

#### 10.4.1 从源代码文件导出差异
以下命令用于导出两个源文件的不同，并根据文件的位置，创建通用diff文件`file.patch0`或`file.patch1`。

```sh
$ diff -u file.old file.new > file.patch0
$ diff -u old/file new/file > file.patch1
```

#### 10.4.2 源代码文件移植更新
diff文件（通常称为patch补丁文件）用于发送程序更新。以下命令将应用这些更新到其他文件。

```sh
$ patch -p0 < file.patch0
$ patch -p1 < file.patch1
```

#### 10.4.3 交互式移植
如果你有两个版本的源代码，可以使用`imediff(1)`进行两方交互式移植：

```sh
$ imediff -o file.merged file.old file.new
```

如果你有三个版本的源代码，可以使用`imediff(1)`进行三方交互式移植：

```sh
$ imediff -o file.merged file.yours file.base file.theirs
```

### 10.5 Git
Git是目前流行的版本控制系统（VCS），因为它能够在本地和远程源代码管理上执行多种操作。Debian通过Salsa服务提供免费的Git服务，详细信息见[Debian Salsa Wiki](https://wiki.debian.org/Salsa)。

#### 10.5.1 配置 Git 客户端
你可以在`~/.gitconfig`中设置全局配置，例如你的名字和电子邮件地址：

```sh
$ git config --global user.name "Name Surname"
$ git config --global user.email your-email@example.com
```

你可以按如下方式定制Git的默认行为：

```sh
$ git config --global init.defaultBranch main
$ git config --global pull.rebase true
$ git config --global push.default current
```

如果你习惯使用CVS或Subversion命令，可以设置以下别名：

```sh
$ git config --global alias.ci "commit -a"
$ git config --global alias.co checkout
```

检查全局配置：

```sh
$ git config --global --list
```

#### 10.5.2 基本的 Git 命令
Git操作涉及几个关键数据：
- **工作树**：保持面向用户的文件，你可以对这些文件做修改。
- **索引**：保持暂存文件。需要记录的更改必须明确选择并暂存到索引中（使用`git add`和`git rm`命令）。
- **本地仓库**：保持已提交的文件。提交数据的历史链接在仓库中作为分支组织。
- **远程仓库**：保持已提交的文件。与远程仓库的通信使用安全协议如SSH或HTTPS。

主要的Git命令概览：

| Git命令 | 功能 |
| --- | --- |
| `git init` | 创建本地存储库 |
| `git clone URL` | 克隆远程存储库到本地工作目录 |
| `git pull origin main` | 通过远程仓库`origin`更新本地`main`分支 |
| `git add .` | 将工作树中的文件添加到索引 |
| `git add -A .` | 将工作树中的所有文件（包括已删除的）添加到索引 |
| `git rm filename` | 从工作树和索引中删除文件 |
| `git commit` | 提交索引中的更改到本地存储库 |
| `git commit -a` | 添加工作树中的所有更改到索引并提交 |
| `git push -u origin branch_name` | 使用本地`branch_name`分支更新远程仓库`origin`（初始启用） |
| `git push origin branch_name` | 使用本地`branch_name`分支更新远程仓库`origin`（后续调用） |
| `git diff treeish1 treeish2` | 显示`treeish1`提交和`treeish2`提交的不同 |
| `gitk` | 图形界面显示VCS存储库分支历史树 |

#### 10.5.3 Git 技巧
- **警告**：不要使用带空格的标签字符串，即使某些工具允许，但会影响其他Git命令。
- **小心**：如果本地分支推送到已经变基或压缩过的仓库，推送这样的分支有风险，并需要使用`--force`选项。
- **小心**：从2006年初开始，直接调用`git-xyz`的方式已被取消。
- **提示**：如果路径环境变量`$PATH`中有可执行文件`git-foo`，输入`git foo`会调用`git-foo`。

#### 10.5.4 Git 参考
- **man手册**：`git(1)` (`/usr/share/doc/git-doc/git.html`)
- **用户手册**：`/usr/share/doc/git-doc/user-manual.html`
- **介绍教程**：`/usr/share/doc/git-doc/gittutorial.html`
- **进阶教程**：`/usr/share/doc/git-doc/gittutorial-2.html`
- **日常命令**：`/usr/share/doc/git-doc/giteveryday.html`
- **Git魔术**：`/usr/share/doc/gitmagic/html/index.html`

#### 10.5.5 Git 命令行
| Git命令行 | 功能 |
| --- | --- |
| `gitk --all` | 查看完整的Git历史和操作 |
| `git stash` | 得到一个干净的工作树，不会丢失数据 |
| `git remote -v` | 检查远程设置 |
| `git branch -vv` | 检查分支设置 |
| `git status` | 显示工作树状态 |
| `git config -l` | 列出Git设置 |
| `git reset --hard HEAD; git clean -x -d -f` | 反转所有工作树的更改并完全清理 |
| `git rm --cached filename` | 反转`git add filename`的更改 |
| `git reflog` | 获取参考日志（对从删除的分支中恢复提交有用） |
| `git branch new_branch_name HEAD@{6}` | 从reflog信息创建新分支 |
| `git remote add new_remote URL` | 增加指向URL的远程仓库`new_remote` |
| `git remote rename origin upstream` | 将远程仓库`origin`重命名为`upstream` |
| `git branch -u upstream/branch_name branch_name` | 设置远程跟踪到远程仓库`upstream`及其分支 |
| `git remote set-url origin https://foo/bar.git` | 改变`origin`的URL |
| `git remote set-url --push upstream DISABLED` | 禁止推送到`upstream`（编辑`.git/config`来重新启用） |
| `git remote update upstream` | 获取远程仓库`upstream`的所有分支更新 |
| `git fetch upstream foo:upstream-foo` | 创建本地分支`upstream-foo`作为远程仓库`upstream`中`foo`分支的副本 |
| `git checkout -b topic_branch; git push -u topic_branch origin` | 创建并推送新分支`topic_branch`到`origin` |
| `git branch -m oldname newname` | 本地分支改名 |
| `git push -d origin branch_to_be_removed` | 删除远程分支（新方法） |
| `git push origin :branch_to_be_removed` | 删除远程分支（旧方法） |
| `git checkout --orphan new_branch` | 创建一个新的未连接分支 |

希望这些优化后的文本能更好地帮助你理解和使用这些工具和命令。