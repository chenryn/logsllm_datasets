a zero-filled 
(see Figure 3). A 
period. 
an increase 
this memory. 
explains 
the 
Analysis 
of a common program behavior 
or 
(i.e., 
writing 
a default 
to process 
a new event (e.g., 
its data structure 
does not use the entire space of initialized 
This 
value to the 
of zero-filled 
initializes 
when it is 
launched 
a user request). 
library 
zero-initialized). 
presence 
typically 
starts 
initialization 
includes 
memory. This can be done by a loader or user-level 
if it  is a bss section 
However, 
the 
application 
pages. The unused pages are freed when the  program 
finishes. 
lifetime 
modification. 
in memory for a long period. 
(ii) Data replicated 
page loaded from a storage 
reloading 
in a page that is modified during the 
it can be a long time until the first 
pages can stay 
Furthermore, 
of program, 
page if it was not modified. 
As a consequence, 
device can be recovered  by 
Errors in a memory 
zero-filled 
the storage 
by default. 
Like 
pages. An application  program 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
434 
DSN 2010: Yim et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:06:54 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable Systems & Networks (DSN) 
I . Others 30303030h . 41414141h . 07200720h . OO200020h • FFFFFFFFh .ooooooooh l 
700 
600 
500 
400 
300 
200 
100 
I 
-I 
JJ  I • 
T.  IITI 
a 
I 
0 36 9UHallU.UU"wunM 
Tim@{minut@) 
Figure 3. Physical pages with an identical 
value. 
• Not Activated Overwritten 
• Not Manifested 
• Disk Corruption 
30% 
25% 
"  20% 
Co 
> 
>-
 15% 
.2 
 10% 
5% 
0% 
for kernel 
text segments 
also belong to this category, 
code. These code pages are part 
static kernel text segments, 
modules and user programs 
except for self-modifying 
of the page cache and vmalloc 
and 1.2%, respectively, 
space. Also, data pages read from a file are recoverable 
software. 
cache, 
where the sIze of the buffer forms 23.5% of the total 
dynamic memory. 
by 
Thse data pages are mostly in the buffer 
of the total dynamic memory 
that constitute 
55.7% 
regions 
(iii) User multimedia 
into a data buffer sent to the graphics 
data. Most single errors 
data pages are automatically 
moves forward. 
in user 
removed as the 
For users, it is difficult to 
QoS even if 100 faults were 
the degraded 
injected 
to compute an output image. Note that this fault 
high. 
100 faults 
multimedia 
computation 
recognize 
uniformly 
processor 
rate (e.g., 
Moreover,  corruptions 
These 
to human eyes (e.g., 
multimedia 
region (23.5% 
of the dynamic memory on the host) and constitute 
of the graphics 
per video frame) is unrealistically 
of a single frame are unnoticeable 
for a frame rate of lOOfps). 
data are a part of an anonymous 
device memory space. 
most 
5. FaultlError Sensitivity 
of Dynamic Memory 
Fault injection 
is used to characterize 
fault/error 
of dynamic memory. Over 52,000 faults 
sensitivity 
(sigle-bit 
erros) 
regIOn (slab regIOn) 
for 1 minute after each fault injection. 
monitored 
select 
used data types (see the x-axis 
in Figure 4) that cover >80% of the slab region space. 
into a dynamic memory 
The target 
are injected 
on a Linux-based 
the 8 most frequently 
system. 
We 
is 
Figure 4 shows the fault sensitivity 
used dynamic memory objects. 
The 
at 30% because the 
faults. 
The 
when the 
category 
to not activated 
faults 
not manifested 
means activated 
fault when the first access is 
(i) Fault sensitivity. 
70% correspond 
type overwritten 
of the most frequently 
y-axis in Figure 4 is truncated 
remaining 
failure 
first access is memory-write, 
refers to an activated 
memory-read, 
system corruption. 
For comparison 
of the static 
sensitivity 
on error characterization 
and disk corruption 
we compute the fault 
purposes, 
memory based on our earlier 
work 
of Linux kernel [5]. In that study, 
corresponds 
to the  file 
a fault activation 
into the kernel data segment. 
ratio of 0.5% when 
in 
a 
For faults 
in this paper, we observe 
ratio of 16.7% on average. 
dynamic memory pages are managed by a 
(e.g., LRU-variant) 
cache replacement 
we measured 
inserting 
faults 
dynamic memory, analyzed 
mu.ch. higher fault activation 
This .IS because 
locahty-aware 
algorithm, 
memory location 
high fault activation 
sensitivity 
the static 
memory (0.32%). 
while static memory is placed in a fixed 
of its access frequency. 
This 
regardless 
ratio leads to 18 times higher fault 
of dynamic memory (5.83%) compared 
with 
by read operations 
is lower than that measured 
This 
memory 
caused failures. 
in static 
(ii) Error sensitivity. 
manifest, 
manifest  (based 
In dynamic memory, 34.8% of 
memory, 65.9% of 
while in static 
in 
faults 
have a 
as their first access. 
After 
faults, 
44.7% of not manifested 
operation 
on [5]). Furthermore, 
these overwritten 
49.2% (=5.8%111.8%) 
faults 
faults 
activated 
activated 
dynamic memory, 
memory-write 
excluding 
of faults 
ratio (49.2%) 
(65.9%) 
in static 
activated 
where the read/write 
[5]. 
memory is not reported 
Thee is a clear difference 
in terms of error sensitivity 
ratio of not-manifested 
faults 
high level of error sensitivity. 
lock variables 
break_lock 
data type in inode 
field of rwlock_t 
have a similarly 
that not only the data type but also how the 
For example, 
(e.g., 
objects 
field) have error an 
higher than 50%. Furthermore, 
deendmg .on the data type of the variable. 
pomter vanables 
for linked lists or associated 
next, a_ops, backing_dev_irifo 
sensitivity 
(e.g., 
structure) 
This indicates 
data. i.s .used is an important 
sen.sltlvlty. 
actIvated) 
highly error sensitive 
File system metadata 
failure 
buffer_head 
only mode and corrupt the  file 
by fsck at the next boot-up 
recoverable 
despite 
(e.g., 
For example, 
error 
factor in determining 
he reason is that not all corrupted 
(and 
pomters 
object can change the file system to a read­
riable. 
can cause serious 
cause a failure, 
being an integer 
if corrupted. 
and the break lock is 
a single-bit 
error in a 
buffer_head) 
system, potentially 
of the system. 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
435 
DSN 2010: Yim et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:06:54 UTC from IEEE Xplore.  Restrictions apply. 
20lO IEEEIIFIP International 
Conference 
on Dependable Systems & Networks (DSN) 
model. We observe 
that measuring 
fault 
(iii) Analytical 
is simpler 
expressions 
than measuring 
error sensitivity. 
(see (1), (2) and 
(ES) as a function of: (a) 
sensitivity 
Below we derive analytical 
(3» that give error sensitivity 
fault sensitivity 
(P a), and (c) the ratio of read access count to read/write 
access count (Pr). Equation 
(1) shows if a fault is activated 
but does not manifest 
reactivated 
by the first read access, 
in the following 
(FS), (b) probability 
of fault activation 
read accesses. 
it can be 
and manifest 
Pr, ES) =  PaPr{ES + (1 -ES)FS(Pa, 
FS(Pa, 
 FS =  (PaPrES)/(l 
 ES =  {FS(l-PaPr)}/{PaPr(1
(iv) Variations 
deriving 
of Pa and Pro To explore 
Pa and Pro we analyze 
Pr, ES)} (1) 
-PaPr + PaPrES) (2) 
-FS)}  (3) 
the possibility 
the variations 
of Pa. We find a relatively 
ratio between different 
object types and time. (a) 
large variance 
in the 
of the 
object instances 
of 
the standard 
deviations 
ratio of radix tree node and inode are 11.6% 
The activation 
ratio of 
_node objects  varies 
from 49% to 17% over 
of Pro The read ratio also has  a large 
belonging 
_node data type have a high read ratio 
object types. The objects 
to 
of statically 
of Pa and Pr over different 
Variations 
activation 
same data type. For example, 
the activation 
and 7.3%, respectively. 
radix_tree 
time. (b) Variations 
variation  between 
the radix_tree 
(Pr=93.6%) 
Using these two parameters 
(Pa=19.6%), 
be calculated 
variation 
over time. 
These two findings 
indicate 
error sensitivity 
of Pa and Pro For example, 
may not be the best approach, 
using statically 
that one must be cautious 
derived 
using simple 
and hence, 
in this paper remains 
when estimating 
parameters 
averages 
experimental 
a trustworthy 
evaluation 
alternative. 
as discussed 
and thus a high fault sensitivity 
(FS=12.39%). 
the error sensitivity 
as 62.4%. The read ratio also has  a large 
with the activation 
ratio 
can 
of radix_tree_node 
Failures 
249-258, 2006. 
finding to ours (i.e., 
similar 
pages in memory) is reported, 
used to design a cost-efficient 
efficiency 
improve compression 
sensitivity 
data is reported 
size of these data in an integrated 
of visual 
[10]. The low error 
[11], but the memory 
system is not measured. 
a large portion 
of zero-filled 
and this characteristic 
compressed 
is 
cache, as it can 
7. Conclusions 
This paper presents 
a measurement-based 
study of the 
of dynamic memory. A 
fault and error sensitivities 
software-implemented 
fault injector 
memory objects 
on system and applications. 
dynamic memory exhibits 
than static 
sensitivity 
activation 
rate. 
is used to characterize 
The results 
indicate 
that 
about 18 times higher fault 
of higher 
targeting 
dynamic 
the impact of errors 
memory, mainly because 
Acknowledgments 
We would like to thank Dr. Michael Paulitsch 
who shepherds 
this paper and the anonymous reviewers 
this paper. This work was supported in part by NSF grants CNS-
05-24695 and CSN-05-51665, the 
Center (GSRC/MARCO), IBM Corp., and 
Boeing Corp. 
Gigascale Systems Research 
for their help in refining 
References 
[I] B. Schroeder and G. A. Gibson, "A Large Scale Study of 
Computing Systems," Proc. DSN, pp. 
in High-Perf. 
[2] L. Borucki, G. Schindlbeck, 
and C. Slayman, "Comparison 
of Accelerated 
Component and System Level," Proc. IntI. Reliability 
Physics Sym., pp. 482-487, 2008. 
DRAM  Soft Error Rates Measured at 
[3] T.J. Dell, A White Paper on the Benefits of Chip kill-Correct 
ECC for PC Server Main Memory, IBM Microelectronics 
Division, 
1997. 
[4] K. Whisnant, et al., "The Effects of an ARMOR-Based 
SIFT Environment 
User Applications," 
277,2004. 
on the Performance 
and Dependability 
IEEE  Trans.  Software  Eng., 
of 
30(4): 257-
6. Related Work 
The memory fault rate is measured 
in many systems, 
injected 
are observed 
and if dynamic 
experiments 
have been conducted 
fault-sensitive 
memory [5][6], 
are randomly 
[9]. Also, many 
to 
memory states. 
Most 
and both hard and soft errors 
fault injection 
measure and identify 
of them are done for static 
memory is studied, 
faults 
part of the dynamic memory space. Thus, the correlation 
between data type and error sensitivity 
memory space is not analyzed. 
the error sensitivity 
analyzes 
virtual 
machine. 
protection 
space of the as kernel and user programs 
C/C++) was not studied. 
The possibility 
in dynamic 
is [8], which 
used in a Java 
Dynamic memory 
written 
This work shows the tradeoff 
of recovering 
and overhead. 
granularity 
An exception 
of heap objects 
between 
(e.g., 
into all or 
in 
files is suggested 
storage 
size of this area was not measured. 
for static 
code memory using 
memory [6], but the 
In on-chip 
caches, 
a 
[5] W. Gu, Z. Kalbarczyk, 
of 
the Linux Kernel Executing on PowerPC G4 and Pentium 4 
Processors," 
Proc. DSN, pp. 887-896,2004. 
and R.K. Iyer, "Error Sensitivity 
[6] K.S. Yim, et al., "Quantitative 
Analysis of Long Latency 
in System Software," Proc. PRDC, pp. 23-30, 2009. 
the Linux Kernel, 
[7] D.P. Bovet and M. Cesati, Understanding 
Failures 
3rd Ed., O'Reilly Media, 2000. 
[8] G. Chen, et al., "Analyzing Heap Error Behavior in 
Proc. CODES+lSSS, pp. 
Embedded JVM Environments," 
230-235, 2004. 
[9] B. Schroeder, 
E. Pinheiro, and W.-D. Weber, "DRAM 
Errors in the Wild: A Large-Scale 
SIGMETRICS, pp. 193-204,2009. 
Field Study," Proc. 
[10] J. Yang, Y. Zhang, and  R. Gupta, "Frequent Value 
in Data Caches," Proc. MICRO, pp. 258-265, 
Compression 
2000. 
[11] D. Nowroth, I. Polian, and B. Becker, "A Study of 
Proc. DSN, 
in a JPEG Compressor," 
Cognitive Resilience 
pp. 32-41, 2008. 
978-1-4244-7501-8/lO/$26.00 
©2010 IEEE 
436 
DSN 2010: Yim et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:06:54 UTC from IEEE Xplore.  Restrictions apply.