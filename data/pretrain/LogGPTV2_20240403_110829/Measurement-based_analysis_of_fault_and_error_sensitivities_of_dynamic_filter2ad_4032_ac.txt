### Zero-Filled Memory and Program Behavior

A zero-filled memory (see Figure 3) is a common program behavior. When a program initializes, it often sets a default value of zero to the memory space that it will use. This initialization typically occurs when the program is launched, either by a loader or at the user level. If the memory section is a BSS (Block Started by Symbol) section, it is zero-initialized by default.

However, not all of the initialized memory is used by the program. The unused pages are freed when the program finishes. This means that a portion of the memory can remain zero-filled for an extended period, even if the program is in memory for a long time.

### Data Replication and Page Management

Data replication and page management are also important considerations. For example, a page loaded from storage may be modified during the program's lifetime. If the page is not modified, it can stay in memory for a long time. As a consequence, errors in memory can be recovered from the storage device by default.

### Physical Pages with Identical Values

Figure 3 illustrates physical pages with identical values. These pages are often part of the kernel text segments, which include static kernel text segments, modules, and user programs, except for self-modifying code. These code pages are part of the page cache and `vmalloc` space, constituting 23.5% and 1.2% of the total dynamic memory, respectively. Additionally, data pages read from a file are recoverable and mostly reside in the buffer cache, which forms 55.7% of the total dynamic memory.

### User Multimedia Data

User multimedia data, such as video frames, are moved into a data buffer and sent to the graphics processor to compute an output image. Single-bit errors in these data pages are often unnoticeable to human eyes, especially at high frame rates (e.g., 100 fps). These data are part of an anonymous region in the graphics device memory space.

### Fault/Error Sensitivity of Dynamic Memory

Fault injection is used to characterize the fault/error sensitivity of dynamic memory. Over 52,000 single-bit faults were injected into a dynamic memory region on a Linux-based system. The target was the 8 most frequently used data types, covering more than 80% of the slab region space. The system was monitored for 1 minute after each fault injection.

#### Fault Sensitivity

- **Not Activated Overwritten**: A fault that does not activate.
- **Not Manifested**: A fault that activates but does not cause a failure.
- **Disk Corruption**: A fault that causes a failure.

The fault sensitivity of the most frequently used dynamic memory objects is shown in Figure 4. The y-axis is truncated at 30% because the remaining categories correspond to not activated faults. For comparison, the fault sensitivity of static memory is based on earlier work [5]. In that study, the fault activation ratio was 0.5% for static memory, while in this study, the average fault activation ratio for dynamic memory was 16.7%.

Dynamic memory pages are managed by a cache replacement algorithm (e.g., LRU-variant), leading to a higher fault activation ratio (5.83%) compared to static memory (0.32%). This is because dynamic memory is locality-aware, while static memory is placed in a fixed location regardless of access frequency.

#### Error Sensitivity

In dynamic memory, 34.8% of faults have a memory-write operation as their first access. After excluding these faults, 44.7% of not manifested faults have a memory-read operation as their first access. In static memory, 65.9% of faults have a memory-write operation as their first access. The error sensitivity of dynamic memory is 49.2%, while in static memory, it is 65.9%.

#### Analytical Expressions for Error Sensitivity

Analytical expressions (Equations 1, 2, and 3) give the error sensitivity (ES) as a function of fault sensitivity (FS), probability of fault activation (Pa), and the ratio of read access count to read/write access count (Pr).

- **Equation 1**: \( ES = Pa \cdot Pr \cdot (ES + (1 - ES) \cdot FS(Pa, Pr)) \)
- **Equation 2**: \( FS = \frac{Pa \cdot Pr \cdot ES}{1 - Pa \cdot Pr + Pa \cdot Pr \cdot ES} \)
- **Equation 3**: \( ES = \frac{FS \cdot (1 - Pa \cdot Pr)}{Pa \cdot Pr \cdot (1 - FS)} \)

#### Variations of Pa and Pr

To explore the variations of Pa and Pr, we analyzed different object types and time. We found a large variance in the activation ratio between different object instances. For example, the activation ratio of radix tree node and inode objects varies from 49% to 17% over time. The read ratio also has a large variation, with some object types having a high read ratio (e.g., radix_tree_node with Pr=93.6%).

Using these parameters, the error sensitivity can be calculated, and the findings indicate that one must be cautious when estimating error sensitivity using simple averages. Thus, experimental evaluation remains a trustworthy alternative.

### Conclusions

This paper presents a measurement-based study of the fault and error sensitivities of dynamic memory. The results indicate that dynamic memory exhibits about 18 times higher fault sensitivity than static memory, mainly due to the higher fault activation rate. A software-implemented fault injector was used to characterize the impact of errors on system and applications.

### Acknowledgments

We would like to thank Dr. Michael Paulitsch for shepherding this paper and the anonymous reviewers for their help in refining it. This work was supported in part by NSF grants CNS-05-24695 and CSN-05-51665, the Gigascale Systems Research Center (GSRC/MARCO), IBM Corp., and Boeing Corp.

### References

[1] B. Schroeder and G. A. Gibson, "A Large Scale Study of Computing Systems," Proc. DSN, pp. 249-258, 2006.

[2] L. Borucki, G. Schindlbeck, and C. Slayman, "Comparison of Accelerated DRAM Soft Error Rates Measured at Component and System Level," Proc. IntI. Reliability Physics Sym., pp. 482-487, 2008.

[3] T.J. Dell, A White Paper on the Benefits of Chip kill-Correct ECC for PC Server Main Memory, IBM Microelectronics Division, 1997.

[4] K. Whisnant, et al., "The Effects of an ARMOR-Based SIFT Environment on the Performance and Dependability of User Applications," IEEE Trans. Software Eng., 30(4): 257-277, 2004.

[5] W. Gu, Z. Kalbarczyk, and R.K. Iyer, "Error Sensitivity of the Linux Kernel Executing on PowerPC G4 and Pentium 4 Processors," Proc. DSN, pp. 887-896, 2004.

[6] K.S. Yim, et al., "Quantitative Analysis of Long Latency Failures in the Linux Kernel," Proc. PRDC, pp. 23-30, 2009.

[7] D.P. Bovet and M. Cesati, Understanding the Linux Kernel, 3rd Ed., O'Reilly Media, 2000.

[8] G. Chen, et al., "Analyzing Heap Error Behavior in Embedded JVM Environments," Proc. CODES+ISSS, pp. 230-235, 2004.

[9] B. Schroeder, E. Pinheiro, and W.-D. Weber, "DRAM Errors in the Wild: A Large-Scale Field Study," Proc. SIGMETRICS, pp. 193-204, 2009.

[10] J. Yang, Y. Zhang, and R. Gupta, "Frequent Value Compression in Data Caches," Proc. MICRO, pp. 258-265, 2000.

[11] D. Nowroth, I. Polian, and B. Becker, "A Study of Cognitive Resilience in a JPEG Compressor," Proc. DSN, pp. 32-41, 2008.

978-1-4244-7501-8/10/$26.00 Â©2010 IEEE
436
DSN 2010: Yim et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18, 2021 at 14:06:54 UTC from IEEE Xplore. Restrictions apply.