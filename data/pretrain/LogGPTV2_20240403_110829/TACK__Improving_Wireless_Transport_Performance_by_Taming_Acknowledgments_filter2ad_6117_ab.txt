to byte-counting ACK when 𝑏𝑑𝑝 is small.
Both TACK and delayed ACK reduce sending ACKs. Some
of the proposed ideas for compensating sending fewer ACKs
in this paper, for example the advancements in round-timing
(see S5.2), are also applicable to TCP’s delayed ACK scheme
in the case, called “stretch ACK violation” [66], where ACKs
are excessively delayed.
3 MOTIVATION
3.1 WLAN demands high throughput
It is predicted that, by 2022, the video-based applications
will make up 82% of all IP traffic [23]. It is also reported
that the video effect on the traffic is mainly because of the
introduction of UHD video streaming [24]. As illustrated in
Figure 2, the average bit rate for UHD video at about 16
Mbps is more than 2x the high-definition (HD) video bit rate
and 8x more than standard-definition (SD) video bit rate. By
2022, nearly 62% of the installed flat-panel TV sets will be
UHD, up from 23% in 2017. And UHD video streaming will
account for 22% of global IP video traffic. Moreover, VR/AR
gaming has become increasingly popular, and the traffic will
increase 12-fold, about 65% compound average growth rate
per year.
Figure 2: Average bit rate of applications [24].
It is reported that [24] the average WLAN connection
speed in 2018 was 30.3 Mbps and will be more than triple
(92 Mbps) by 2023. Which, however, is still far from satisfac-
tory for UHD-video-based applications. This is because UHD
video usually requires a peak bandwidth that is multiple
times of its average bit rate (e.g., a video with 100 Mbps av-
erage bit rate may require over 200 Mbps peak bit rate [45]).
Wireless projection is a representative UHD-video-based ap-
plication. A smartphone connects a TV using Wi-Fi Direct
and streams videos on top of Miracast [4]. Our deployment
experiences (see Figure 11) show that UDP-based solution
(a) Data throughput
(b) ACK throughput
Figure 3: Examples for contention between data
packets and ACKs over 802.11n wireless links.
achieves high throughput but suffers from 5 ∼ 6 times of mac-
roblocking artifacts due to unreliable transport, and legacy
TCP-based solutions assure zero macroblocking but result in
an over 30% of video rebuffering ratio [25] due to bandwidth
under-utilization. Reliable and high-throughput transport
over WLAN turns out to be a challenging requirement.
3.2 Legacy WLAN can be improved on
the transport layer
Most modern WLANs are based on the IEEE 802.11 stan-
dards. It has been well studied that the key challenge of TCP
is its poor bandwidth utilization and performance when inter-
acting with the IEEE 802.11 wireless MAC protocol [53, 69].
This can be attributed to the extensive number of medium
access carried out by TCP. Basically, TCP sends an ACK
every one or two packets [7, 15], which is frequent. Although
the length of an ACK is usually smaller than the data packet
(e.g., 64 bytes for an ACK vs. 1518 bytes for a data packet),
ACKs cause similar medium access overhead on the MAC
layer. By sharing the same medium path for ACKs and data
packets, frequent ACKs create competitions and collision-
s [53, 69], wasting wireless resources. As a result, the wastage
leads to data rate decline on the data path. Note that al-
though improvements in 802.11 standards (e.g., 802.11ac
and 802.11ax) result in data rate increase, they also cause
proportionally increased number of ACKs, which makes the
MAC overhead problem even worse.
To explain the problem of collision more clearly, we con-
ducted emulations over the 802.11n wireless links with a PHY
rate of 300 Mbps (see Figure 7). It can be demonstrated that
TCP’s packet clocking algorithms are highly dependent on
the ACK arrival pattern, and sending fewer ACKs has a
negative effect on TCP throughput (see Figure 10(b)). We
did not want our results to be biased because of such depen-
dency, and hence we chose to develop our own UDP-based
tool [29] that runs on two wireless laptops connected to a
commercial wireless router (TL-WDR7500) with negligible
external interferences. The sender keeps sending 1518-byte
packets at a fixed sending rate (100 Mbps), and the receiver
counts the received bytes, and then sends one 64-byte packet
that act as an ACK. 𝐿 emulates the byte-counting parameter
that limits the amount of data to be counted before sending
an ACK, e.g., 𝐿 = 1 denotes acknowledging every packet
(1:1) and 𝐿 = 2 denotes acknowledging every second packet
Video ApplicationAverage Bit Rate(Mbps)SDVideo2HDVideo8UHDStreaming16VR17UHDIP Video518KWall TV100HD VR167UHD VR5001:12:14:18:116:1# of data packets : ACKs0255075100Throughput (Mbps)Data path1:12:14:18:116:1# of data packets : ACKs0.00.51.01.5Throughput (Mbps)ACK pathSIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Tong Li et al.
min{𝑓𝑏, 𝑓𝑝𝑎𝑐𝑘}. Through Equations (1) and (2), we have
𝑓𝑡𝑎𝑐𝑘 = min{ 𝑏𝑤
𝛼}.
𝐿·𝑀 𝑆𝑆 , 1
In 2006, Floyd and Kohler [31] proposed a tunable trans-
port control variant in which the minimum ACK frequency
allowed is twice per send window (i.e., per RTT). In 2007,
Sara Landstr¨om et al. [50] has also demonstrated that, in
theory, acknowledging data twice per send window should
be sufficient to ensure utilization with some modifications to
the legacy TCP. Doubling the acknowledgment frequency to
four times per send window can produce good performance
and it is more robust in practice. Based on this rationale, we
set 𝛼 = 𝑅𝑇 𝑇𝑚𝑖𝑛
, which means sending 𝛽 ACKs per 𝑅𝑇 𝑇𝑚𝑖𝑛.
𝑅𝑇 𝑇𝑚𝑖𝑛 is the smallest RTT observed over a long period of
time. As a consequence, the frequency of TACK is eventually
given as follow:
𝛽
𝑓𝑡𝑎𝑐𝑘 = min{
𝑏𝑤
𝐿 · 𝑀 𝑆𝑆
,
𝛽
𝑅𝑇 𝑇𝑚𝑖𝑛
}
(3)
Qualitatively, TACK turns to periodic ACK when bandwidth-
delay product (𝑏𝑑𝑝) is large (𝑏𝑑𝑝 ≥ 𝛽·𝐿·𝑀 𝑆𝑆), and falls back
to byte-counting ACK when 𝑏𝑑𝑝 is small (𝑏𝑑𝑝 < 𝛽 · 𝐿· 𝑀 𝑆𝑆).
𝛽 indicates the number of ACKs per RTT, and 𝐿 indicates
the number of full-sized data packets counted before sending
an ACK. Appendices B.1∼B.2 have discussed the TACK
frequency minimization in terms of the lower bound of 𝛽
and the upper bound of 𝐿. By default, this paper sets 𝛽 = 4
and 𝐿 = 2 which we have found to be robust in practice1
(see Appendix B.3). We also quantitatively analyze the ACK
frequency below.
4.2 TACK frequency analysis
To facilitate the analysis, we assume that every data pack-
et is full-sized (i.e., MSS). When the TCP socket option
TCP QUICKACK is enabled, the legacy TCP sends an ACK
for every packet (i.e., per-packet ACK). The frequency of
per-packet ACK is computed as
𝑓𝑡𝑐𝑝 = 𝑓𝑡𝑐𝑝(𝐿=1) =
𝑏𝑤
𝑀 𝑆𝑆
(4)
TCP also alternatively adopts delayed ACK [7, 15, 46], in
which a data receiver may delay sending an ACK response
by a given time interval (𝛾) or for every 𝐿 full-sized incoming
packets. As described in RFC 1122 [15] and updated in RFC
5681 [7], 𝐿 is strictly limited up to 2, and 𝛾 is tens to hundreds
of milliseconds and varies in different Linux distributions. The
frequency of delayed ACK is computed as
{︃ 𝑏𝑤
𝑀 𝑆𝑆 ,
2𝑀 𝑆𝑆 ,
𝑏𝑤
0 ≤ 𝑏𝑤 < 2𝑀 𝑆𝑆
𝑏𝑤 ≥ 2𝑀 𝑆𝑆
𝛾
𝛾
(5)
(2:1), which are being used today and supported by IETF
standards [7, 15].
As shown in Figure 3, although the throughput on the
acknowledgement path is quite low (below 1.5 Mbps), the
throughput on the data path decreases significantly with
the increase of the ACK frequency. This demonstrates that
ACKs cause significant medium access overhead, degrading
data transmission performance dramatically if frequent ACKs
are sent. It is also observed that the ACK throughput fails
to double when we raise the number of ACKs by changing
the proportion between data packets and ACKs from 4:1 to
2:1. We believe that it is the result of the fierce collisions
between data packets and ACKs, based on the observation of
a higher bidirectional loss rate when 𝐿 ≤ 2. We also tested
802.11b/g/ac links, the insights of which remain similar.
Based on these observations, the legacy WLAN transport
can be improved on the transport layer by reducing the ACK
frequency required.
4 DESIGN RATIONALE
4.1 ACK frequency breakdown
ACK frequency can be denoted by 𝑓 with the unit of Hz,
i.e., the number of ACKs per second, which can be reduced
in two fundamental ways: byte-counting ACK and periodic
ACK.
Byte-counting ACK. There exist a number of studies that
reduce ACK frequency by sending an ACK for every 𝐿 (𝐿 ≥ 2)
incoming full-sized packets (packet size equals to the maxi-
mum segment size (MSS)) [8, 31, 50, 67]. The frequency of
byte-counting ACK is proportional to data throughput 𝑏𝑤:
𝑓𝑏 =
𝑏𝑤
𝐿 · 𝑀 𝑆𝑆
(1)
In general, 𝑓𝑏 can be reduced by setting a large value of 𝐿.
However, for a given 𝐿, 𝑓𝑏 increases with 𝑏𝑤. This means
when 𝑏𝑤 is extremely high, ACK frequency might still be
comparatively large. In other words, the frequency of byte-
counting ACK is unbounded under bandwidth change.
Periodic ACK. Byte-counting ACK’s unbounded frequency
can be attributed to the coupling between ACK sending and
packet arrivals (i.e., received-packet-driven). We therefore
propose periodic ACK that decouples ACK frequency from
packet arrivals, achieving a bounded ACK frequency when
𝑏𝑤 is high. The frequency of periodic ACK can be computed
as
𝑓𝑝𝑎𝑐𝑘 =
1
𝛼
(2)
𝑓𝑡𝑐𝑝 𝑑𝑒𝑙𝑎𝑦𝑒𝑑 = 𝑓𝑡𝑐𝑝(𝐿=2) =
where 𝛼 is the time interval between two ACKs. However,
when 𝑏𝑤 is extremely low, the ACK frequency is always as
high as that in the case of a high throughput, which might be
unnecessary. In other words, the frequency of periodic ACK
is unadaptable to bandwidth change, which wastes resources.
Tame ACK (TACK). To control ACK frequency in the
context of network dynamics, this paper proposes TACK,
balancing the above two ways to minimize ACK frequen-
cy. As a result, we set the TACK frequency as 𝑓𝑡𝑎𝑐𝑘 =
According to Equations (3), (4) and (5), we summarize
three insights as follows. First, given an 𝐿, the frequency of
TACK is always no more than that of legacy TCP ACK, i.e.,
𝑓𝑡𝑎𝑐𝑘 ≤ 𝑓𝑡𝑐𝑝. Second, the higher bit rate over wireless links,
the more number of ACKs are reduced by applying TACK.
Meanwhile, the larger latency between endpoints, the more
1Our real product deployment under both WAN and WLAN scenarios
serves as a validation of its practicability. If not for special needs, it is
not recommended to change the values of 𝛽 and 𝐿.
TACK: Improving Wireless Transport Performance by Taming Acknowledgments
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
number of ACKs are reduced by applying TACK. More de-
tailed discussion on ACK frequency is given in Appendix B.4.
4.3 Challenges for applying TACK
To apply TACK without decreasing transport performance,
we list several major challenges that need to be overcome.
Enlarged delay in loss recovery. For ordered and byte-
stream transport, when a loss occurs and a packet has to
be retransmitted, packets that have already arrived but that
appear later in the bytestream must await delivery of the
missing packet so the bytestream can be reassembled in order.
Known as head-of-line blocking (HoLB [71]), this incurs high
delay of packet reassembling and thus can be detrimental
to the transport performance. Applying TACK will further
enlarge this delay incurred by HoLB.
We define the TACK delay as the delay incurred between
when the packet is received and when the TACK is sent.
According to Equation (3), with a large 𝑅𝑇 𝑇𝑚𝑖𝑛, TACK
might be excessively delayed. When loss occurs during the
TACK interval, the excessive TACK delay might disturb
loss detection, resulting in costly retransmission timeouts.
TACK loss further aggravates this problem. For example,
𝑅𝑇 𝑇𝑚𝑖𝑛 = 200 ms, 𝑏𝑤 = 10 Mbps, and 𝐿 = 1, then 𝑓𝑡𝑎𝑐𝑘 =
20 Hz. Compared with per-packet ACK, TACK can cause
the feedback delay up to 50 ms upon loss event. If the TACK
is lost or the retransmission is lost again, then the delay
doubles.
Biased round-trip timing. The initial RTT can be com-
puted during handshakes (Figure 4 (a)), after that, the sender
calculates an RTT sample upon receiving a TACK. For ex-