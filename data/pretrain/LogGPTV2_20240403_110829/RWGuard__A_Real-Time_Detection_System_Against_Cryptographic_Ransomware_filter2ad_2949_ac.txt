obtained when we compute the similarity between two ﬁles that are exactly
same. Hence, in the case of an encryption, this function outputs a value close
to 0.
2. Entropy metric: Entropy, as it relates to digital information, is the measure-
ment of randomness in a given set of values (data), i.e., when computed over
a ﬁle, it provides information about the randomness of data in the ﬁle. There-
fore, certainly, a user’s data ﬁle in plaintext form has low entropy whereas
its encrypted version would have a high entropy. Other than encrypted data,
compressed data also has high entropy when compared to its plaintext form.
A widely used entropy computation technique is Shannon entropy [21]. The
Shannon entropy of an array of N bytes (assuming ASCII characters with
Pi . Here, Pi
values 0 to 255) can be computed as the following:
255
i=0 Pilog2
(cid:2)
1
A Real-time Detection System Against Cryptographic Ransomware
123
is the probability that a randomly chosen byte from the array is i, (i.e., Pi =
Fi/N) where Fi is the frequency of byte value i in the array. This equation
returns a value in the range of [0,8]. For an absolutely even distribution of
byte values in the array, the output value is 8. Since encrypted ﬁles have
bytes more evenly distributed (when compared to its plaintext version), the
Shannon entropy signiﬁcantly increases after encryption and results in a value
near 8.
3. File type change metric: A ﬁle generally does not change its type over the
course of its existence. However, it is common for a number of ransomware
families to change the ﬁle type after encryption. Therefore, whenever a ﬁle is
written, we compare the ﬁle types before and after the write operation.
4. File size change metric: Unlike ﬁle type change, ﬁle size change is a common
event, e.g., adding a large text to a document. However, this metric along
with other metrics can determine if the ﬁle changes are benign or malicious.
Upon detecting a ﬁle write operation that results in a ﬁle type change or
exceeds at least one of the given thresholds for the metrics, that is, similarity
(score  6), and/or signiﬁcantly changes the ﬁle size,
the FCMon module shares the recorded metrics with the PMon, FCls, and CFHk
modules for further assessment.
3.6 File Classiﬁcation (FCls) Module
After the PMon and FCMon modules collaboratively identify a process respon-
sible for anomalous I/O behavior and ﬁle changes, our detection system classiﬁes
whether the ﬁle is encrypted by the ransomware or the change is due to a benign
operation. Our FCls module performs this classiﬁcation by learning the usage
of the crypto-tool (a utility leveraging CryptoAPI used for user’s sensitive ﬁles’
encryption and decryption, e.g., Kryptel [17]) and proﬁling the user’s encryption
behavior. For example, if a ﬁle is encrypted which is from the same directory and
has the same type of a previously benignly encrypted ﬁle, this module assigns a
higher probability for this ﬁle to be benignly encrypted (however, a ransomware
cannot abuse this idea as described in CFHk module in Sect. 3.7). If the prob-
ability for a ﬁle is too low to belong to the benignly encrypted class and if the
ﬁle gets encrypted, a ﬂag is raised immediately by the FCls module. In order to
remove false negatives (i.e., ransomware encrypts a ﬁle which has a high proba-
bility of being benignly encrypted), the encryption information is validated with
the CFHk module which intercepts benign encryptions.
Protecting Sensitive Files: If at the time of the ransomware attack the
sensitive ﬁles are already in encrypted form, the ransomware could further
encrypt those ﬁles which makes those ﬁles unavailable too. Note that the FCMon
module may not be able to ﬂag this event with high probability. The reason
is that the entropy would not change signiﬁcantly since both the ﬁle versions
(before and after the ransomware encryption) would have high entropy. To
address such issue, we modify the permission settings for encrypted ﬁles, i.e.,
when a user encrypts a ﬁle using the crypto-tool, the only operations that we
124
S. Mehnaz et al.
Process
CryptEncrypt(…)
CryptoAPI 
Library
CryptEncrypt(…)
{
JUMP to HOOK
………
………
}
CFH Module
ShadowCryptEncrypt(…)
{
Extract parameters
and store tuples
}
Tuples
Fig. 3. CryptoAPI Function Hooking (CFHk) module
allow on that encrypted ﬁle are decryption and deletion (each of these opera-
tions requires the symmetric key used for encryption). Since it is impractical that
someone would edit/modify an encrypted ﬁle before decryption, this permission
setting suﬃces.
3.7 CryptoAPI Function Hooking (CFHk) Module
As described in Sect. 3.6, if the FCls module classiﬁes the change to be the
result of a possibly benign encryption, we need to further investigate whether
the encryption was actually performed using the crypto-tool. Hence, the CFHk
module places hooks at the beginning of the CryptoAPI library functions to
redirect control of the execution to our custom-written functions. Figure 3 shows
an example of hooking the ‘CryptEncrypt’ function included in the CryptoAPI
library. Whenever a process calls the CryptEncrypt function to encrypt some ﬁle,
the hook placed at the beginning of the CryptEncrypt function transfers con-
trol to a shadow CryptEncrypt function. This shadow CryptEncrypt function
extracts a tuple  for that particular call
and stores this information in encrypted form for security purposes so that no
other process can get access to this. The key for this encryption is derived from
a secret password set by the user. Once the tuple is stored, the shadow Cryp-
tEncrypt function returns control to the original procedure, and the process
continues its execution as if it had not been interrupted at all. The implemen-
tation details of this hooking procedure are discussed in Sect. 4.3.
To identify whether a ﬁle encryption is performed using the crypto-tool, we
simply search ‘CryptEncrypt’ tuples that are captured by the CFHk module.
– If such a tuple is not found, we terminate the process that resulted in the ﬁle
change so that no further encryption can take place.
– If such a tuple is found, the encryption is either benign (no action required)
or a ransomware using CryptoAPI is responsible for the encryption. In the
second case, we can recover all the ﬁles by using the key and algo information
from the tuples (details in Sect. 5.4). Since in our system we also store the
f ile information (by associating a ReadFile call with CryptEncrypt), we do
not need to iterate over all the keys for a single ﬁle decryption which is an
improvement over existing work [16].
A Real-time Detection System Against Cryptographic Ransomware
125
Hence, the advantage of hooking the CryptoAPI library functions is twofold:
(1) tracking all the benign encryption by the user, (2) recovering the ran-
somware encrypted ﬁles in the case that the ransomware dynamically links
system-provided cryptographic libraries (i.e., Windows CryptoAPI).
4 RWGuard Implementation
4.1 IRPParser
While IRPLogger logs the I/O requests, the IRPParser component parses the log
entries, extracts I/O requests, and provides these as input to the DMon, PMon,
and FCMon modules accordingly.
4.2 Decoy File Generator
We have designed an automated decoy ﬁle generator tool that generates the
decoy ﬁles based on the original ﬁle system and user preferences. By default, in
each directory, it generates a decoy ﬁle with a name that is similar to one of the
original ﬁles (selected at random or by the user depending on user preference)
in that same directory so that the decoy ﬁles’ names do not seem random to the
ransomware. In order to make sure that the decoy ﬁles can be easily identiﬁed by
the user, the naming options are selected based on the user’s preferences which
also makes the decoy ﬁles more unpredictable for the ransomware. The user is
able to set diﬀerent numbers of decoy ﬁles for diﬀerent directories. In this way,
the more sensitive ﬁles can be protected with a larger set of decoy ﬁles and also,
manually setting the numbers makes it easier for the user to identify the decoy
ﬁles during normal operations. The type extensions of the generated decoy ﬁles
are: .txt, .doc, .pdf, .ppt, and .xls whereas the contents of the ﬁles are generated
from the contents of neighboring ﬁles. Although we did not observe selective
behavior (e.g., checking ﬁle name, ﬁle content, etc. before encryption) in any
of the ransomware we experimented with, our decoy design is resilient to such
future advanced ransomware. Note that the sizes of the decoy ﬁles in our system
are randomly taken from a range (typically from 1 KB to few MBs) based on
the sizes of the ﬁles in the original ﬁle system while the overall space overhead
for decoy ﬁles is limited to 5% of the original ﬁle system size.
4.3 CryptoAPI Function Hooking
In our CFHk module, we leverage the Detours library introduced in Sect. 2.
Detours hooks a function by moving a speciﬁc number of bytes (generally ﬁve
bytes) from the beginning of the original function’s memory address to the newly
created hook function. In this blank space of the original function, an uncon-
ditional JMP instruction is added that would transfer the control to the hook
function. The hook function then performs the necessary operations (e.g., safely
storing the keys and other parameters passed to the original function). At the end
126
S. Mehnaz et al.
Table 4. Hooked CryptoAPI functions
Function
Details
CryptEncrypt
Encrypts data
CryptGenKey
Generates a random cryptographic session key or a
public/private key pair
CryptDeriveKey
Generates cryptographic session keys derived from a base
data value
CryptExportKey Exports a cryptographic key/key pair from a CSP
CryptGenRandom Fills a buﬀer with cryptographically random bytes
of these operations, another unconditional JMP instruction is added to transfer
the control back to the original function. The compiled DLL ﬁle is placed into
the registry key so that any process invoking the CryptoAPI functions would get
hooked and our CFHk module would store information related to encryption.
Table 4 lists the CryptoAPI functions we hook.
5 Evaluation
5.1 Experiment Dataset
While there exists diﬀerent variants of ransomware, we build a comprehensive
dataset from the most popular ransomware families: Locky, Cerber, Wannacry,
Jigsaw, Cryptolocker, Mamba, Teslacrypt, Cryptowall, Petya, Vipasana, Satana,
Radamant, Rex, and Matsnu. The ransomware samples are collected from Virus-
Total [28], Open Malware [23], VXVault [29], Zelster [32], and Malc0de [22].
Note that among these samples, the ﬁrst 9 families have been used in the
training phase of the PMon module. However, we run each of these 14 ran-
somware samples (one at a time) in the detection phase to assess the detec-
tion eﬀectivenesses and performance overheads of RWGuard modules. The reason
behind not using the 5 samples for PMon module training is to measure how
well this module performs with previously unseen ransomware samples.
5.2 Detection Eﬀectiveness
We evaluate the performance of RWGuard by running the ransomware samples
sequentially. Every time a ransomware sample is executed, we measure the time
required for ﬂagging each malicious process spawned by the ransomware. Once
the ransomware is detected, we restore the system with a clean OS and execute
the next ransomware sample.
Detection w/Decoy Deployment: We observe that ransomware detection
with decoy deployment is extremely fast and ensures almost zero data loss. Note
that the IRPParser component parses IRP logs collected in a 1 second cycle.
A Real-time Detection System Against Cryptographic Ransomware
127
10000
1000
100
10
1
10000
1000
100
10
1
# Write w/ decoy
# Avg. write w/ decoy
# Write w/o decoy
# Avg. write w/o decoy
Lk
Cr Wc
Jg
Cl
(a)
Tc
Cw
Vp
St
Rd
Rx
# Open w/ decoy
# Avg. open w/ decoy
# Open w/o decoy
# Avg. open w/o decoy
Lk
Cr Wc
Jg
Cl
(c)
Tc
Cw
Vp
St
Rd
Rx
10000
1000
100
10
1
10000
1000