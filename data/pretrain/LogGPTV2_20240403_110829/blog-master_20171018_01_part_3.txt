18728 postgres  20    0  626M 3236K sleep   0:10  0.00%  0.00% postgres: autovacuum launcher process   
18725 postgres  20    0  625M  171M sleep   0:02  0.00%  0.00% postgres: checkpointer process   
18731 postgres  20    0  626M 2748K sleep   0:00  0.00%  0.00% postgres: bgworker: logical replication launcher   
31761 postgres  20    0  627M 8004K sleep   0:00  0.00%  0.00% postgres: postgres postgres [local] idle
31642 postgres  20    0  627M 6956K sleep   0:00  0.00%  0.00% postgres: postgres postgres [local] idle
```
3、容灾  
4、HA  
5、时间点恢复  
6、数据迁移  
7、数据导入  
8、日常维护  
请参考  
[《PostgreSQL、Greenplum 宝典《如来神掌》》](../201706/20170601_02.md)    
## 性能诊断  
1、简单性能测试  
```
-- 写入1000万数据
pgbench -i -s 100
-- 4个连接，压测120秒
pgbench -M prepared -n -r -P 1 -c 4 -j 4 -T 120
-- 单核的ECS，不要指望性能。
transaction type: 
scaling factor: 100
query mode: prepared
number of clients: 4
number of threads: 4
duration: 120 s
number of transactions actually processed: 244443
latency average = 1.964 ms
latency stddev = 1.572 ms
tps = 2036.951685 (including connections establishing)
tps = 2037.095995 (excluding connections establishing)
script statistics:
 - statement latencies in milliseconds:
         0.002  \set aid random(1, 100000 * :scale)
         0.000  \set bid random(1, 1 * :scale)
         0.000  \set tid random(1, 10 * :scale)
         0.000  \set delta random(-5000, 5000)
         0.105  BEGIN;
         1.111  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
         0.127  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
         0.135  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
         0.169  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
         0.169  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
         0.144  END;
```
2、诊断  
```  
su - postgres  
psql  
postgres=# create extension pg_stat_statements;  
CREATE EXTENSION  
postgres=# select total_time tt_ms,calls,total_time/calls rt_ms,query from pg_stat_statements order by 1 desc limit 10;
      tt_ms       | calls  |        rt_ms         |                                                query                                                 
------------------+--------+----------------------+------------------------------------------------------------------------------------------------------
 246755.477457998 | 244443 |     1.00946019095658 | UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2
     28533.312025 |      2 |        14266.6560125 | vacuum analyze pgbench_accounts
     27666.358572 |      2 |         13833.179286 | copy pgbench_accounts from stdin
     15536.583254 |      2 |          7768.291627 | alter table pgbench_accounts add primary key (aid)
 4240.94766099985 | 244443 |   0.0173494338598358 | UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2
 3673.14024000005 | 244443 |   0.0150265715933778 | UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2
 2388.27852699992 | 244443 |  0.00977028807124736 | SELECT abalance FROM pgbench_accounts WHERE aid = $1
 1435.52010299995 | 244443 |  0.00587261694137263 | INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
 136.597061999987 | 244443 | 0.000558809464783147 | END
       136.452912 |      1 |           136.452912 | SELECT n.nspname as "Schema",                                                                       +
                  |        |                      |   p.proname as "Name",                                                                              +
                  |        |                      |   pg_catalog.pg_get_function_result(p.oid) as "Result data type",                                   +
                  |        |                      |   pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",                             +
                  |        |                      |  CASE                                                                                               +
                  |        |                      |   WHEN p.proisagg THEN $1                                                                           +
                  |        |                      |   WHEN p.proiswindow THEN $2                                                                        +
                  |        |                      |   WHEN p.prorettype = $3::pg_catalog.regtype THEN $4                                                +
                  |        |                      |   ELSE $5                                                                                           +
                  |        |                      |  END as "Type"                                                                                      +
                  |        |                      | FROM pg_catalog.pg_proc p                                                                           +
                  |        |                      |      LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace                                  +
                  |        |                      | WHERE pg_catalog.pg_function_is_visible(p.oid)                                                      +
                  |        |                      |       AND n.nspname <> $6                                                                           +
                  |        |                      |       AND n.nspname <> $7                                                                           +
                  |        |                      | ORDER BY 1, 2, 4
(10 rows)
```  
3、函数性能诊断    
[《PostgreSQL 函数调试、诊断、优化 & auto_explain》](../201611/20161121_02.md)    
## 安装mysql_fdw(可以用mysql_fdw在PostgreSQL直接读写mysql的数据)
1、安装mysql_fdw插件。  
```
su - root 
wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
rpm -ivh mysql57-community-release-el7-11.noarch.rpm
yum install -y mysql-community* --skip-broken
git clone https://github.com/EnterpriseDB/mysql_fdw
cd mysql_fdw
. /var/lib/pgsql/.bash_profile
USE_PGXS=1 make clean
USE_PGXS=1 make
USE_PGXS=1 make install
```
2、在数据库中加载mysql_fdw插件(在需要使用mysql_fdw的database中创建)。  
```
su - postgres
psql -U username -d dbname
-- load extension first time after install, 使用超级用户创建
CREATE EXTENSION mysql_fdw;
```
3、使用举例。  
```
-- 超级用户执行
-- create server object
-- 替换成mysql的真实IP和端口
CREATE SERVER mysql_server1
     FOREIGN DATA WRAPPER mysql_fdw
     OPTIONS (host '127.0.0.1', port '3306');
-- 超级用户执行
-- create user mapping
-- pguser 替换成需要查询MYSQL表的PG数据库普通用户
CREATE USER MAPPING FOR pguser
SERVER mysql_server
OPTIONS (username 'foo', password 'bar');
-- 超级用户执行
-- pguser 替换成需要查询MYSQL表的PG数据库普通用户
grant usage ON FOREIGN SERVER mysql_server to pguser;
-- 普通用户执行
-- create foreign table
-- 创建与mysql结构一样的表, 参数中指定表名和库名
\c dbname pguser
CREATE FOREIGN TABLE warehouse(
     warehouse_id int,
     warehouse_name text,
     warehouse_created datetime)
SERVER mysql_server
     OPTIONS (dbname 'db1', table_name 'warehouse');
-- insert new rows in table
-- 支持写MYSQL远程表, 如果要回收写权限，建议使用超级用户建foreign table，并且将select权限赋予给普通用户。  
INSERT INTO warehouse values (1, 'UPS', sysdate());
INSERT INTO warehouse values (2, 'TV', sysdate());
INSERT INTO warehouse values (3, 'Table', sysdate());
-- select from table
SELECT * FROM warehouse;
warehouse_id | warehouse_name | warehouse_created  
--------------+----------------+--------------------
        1 | UPS            | 29-SEP-14 23:33:46
        2 | TV             | 29-SEP-14 23:34:25
        3 | Table          | 29-SEP-14 23:33:49
-- delete row from table
DELETE FROM warehouse where warehouse_id = 3;
-- update a row of table
UPDATE warehouse set warehouse_name = 'UPS_NEW' where warehouse_id = 1;
-- explain a table
EXPLAIN SELECT warehouse_id, warehouse_name FROM warehouse WHERE warehouse_name LIKE 'TV' limit 1;
                                   QUERY PLAN                                                   
Limit  (cost=10.00..11.00 rows=1 width=36)
->  Foreign Scan on warehouse  (cost=10.00..13.00 rows=3 width=36)
     Local server startup cost: 10
     Remote query: SELECT warehouse_id, warehouse_name FROM db.warehouse WHERE ((warehouse_name like 'TV'))
Planning time: 0.564 ms (5 rows)
```
4、小技巧，一次导入目标端的所有表或指定多个表作为本地外部表，结构一样，本地表名一样。   
```
IMPORT FOREIGN SCHEMA remote_schema
    [ { LIMIT TO | EXCEPT } ( table_name [, ...] ) ]
    FROM SERVER server_name
    INTO local_schema
    [ OPTIONS ( option 'value' [, ... ] ) ]
```
## 克隆ECS
克隆，便于下次部署。  
## 建议
1、对于可以预计算的AP应用，使用PostgreSQL 10完全满足需求，这类应用PostgreSQL可以OLTP和OLAP一把抓。  
2、对于不能预计算的AP应用，视数据量和运算量，PostgreSQL结合强悍的硬件（IO能力强，CPU核数多），同样可以搞定。   
3、对于不能预计算，并且运算量和数据量超出了单机硬件能力能承受的范畴，再考虑Greenplum、Citus、PG-XL这样的产品。     
## 参考  
[《PostgreSQL on ECS多云盘的部署、快照备份和恢复》](../201708/20170812_01.md)    
[《PostgreSQL on Linux 最佳部署手册》](../201611/20161121_01.md)    
[《DBA不可不知的操作系统内核参数》](../201608/20160803_01.md)    
[《PostgreSQL 数据库开发规范》](../201609/20160926_01.md)    
[《PostgreSQL 清理redo(xlog,wal,归档)的机制 及 如何手工清理》](../201702/20170216_01.md)    
[《PostgreSQL、Greenplum 宝典《如来神掌》》](../201706/20170601_02.md)    
mysql_fdw foreign server、user mapping、foreign table的options如下:  
mysql_fdw/options.c   
```
/*
 * Valid options for mysql_fdw.
 *
 */
static struct MySQLFdwOption valid_options[] =
{
        /* Connection options */
        { "host",           ForeignServerRelationId },
        { "port",           ForeignServerRelationId },
        { "init_command",   ForeignServerRelationId },
        { "username",       UserMappingRelationId },
        { "password",       UserMappingRelationId },
        { "dbname",         ForeignTableRelationId },
        { "table_name",     ForeignTableRelationId },
        { "secure_auth",    ForeignServerRelationId },
        { "max_blob_size",  ForeignTableRelationId },
        { "use_remote_estimate",    ForeignServerRelationId },
        { "ssl_key",        ForeignServerRelationId },
        { "ssl_cert",       ForeignServerRelationId },
        { "ssl_ca",         ForeignServerRelationId },
        { "ssl_capath",     ForeignServerRelationId },
        { "ssl_cipher",     ForeignServerRelationId },
        /* Sentinel */
        { NULL,                 InvalidOid }
};
```
mysql与pgsql的类型映射：  
```
  WHEN c.DATA_TYPE = 'enum' THEN LOWER(CONCAT(c.COLUMN_NAME, '_t'))"
  WHEN c.DATA_TYPE = 'tinyint' THEN 'smallint'"
  WHEN c.DATA_TYPE = 'mediumint' THEN 'integer'"
  WHEN c.DATA_TYPE = 'tinyint unsigned' THEN 'smallint'"
  WHEN c.DATA_TYPE = 'smallint unsigned' THEN 'integer'"
  WHEN c.DATA_TYPE = 'mediumint unsigned' THEN 'integer'"
  WHEN c.DATA_TYPE = 'int unsigned' THEN 'bigint'"
  WHEN c.DATA_TYPE = 'bigint unsigned' THEN 'numeric(20)'"
  WHEN c.DATA_TYPE = 'double' THEN 'double precision'"
  WHEN c.DATA_TYPE = 'float' THEN 'real'"
  WHEN c.DATA_TYPE = 'datetime' THEN 'timestamp'"
  WHEN c.DATA_TYPE = 'longtext' THEN 'text'"
  WHEN c.DATA_TYPE = 'mediumtext' THEN 'text'"
  WHEN c.DATA_TYPE = 'blob' THEN 'bytea'"
  WHEN c.DATA_TYPE = 'mediumblob' THEN 'bytea'"
  ELSE c.DATA_TYPE"
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")