describes the basic NUTSS architecture. Section 3 presents various
use cases and minor extensions to the basic architecture. Section 4
reports on our proof-of-concept implementation of NUTSS. Sec-
tion 5 discusses related work. Section 6 offers concluding thoughts
and directions for future work.
2. NUTSS ARCHITECTURE
This section starts with a brief overview of the NUTSS architec-
ture, followed by a detailed description of NUTSS.
2.1 NUTSS Overview
In NUTSS, named endpoints may be applications or services,
and may be associated with individual users or endhosts. The names
are user-friendly, long-term stable, and location-independent. When
an endpoint application wishes to establish a data ﬂow with an-
other endpoint, it opens a NUTSS socket using the names only
(and not IP addresses) as endpoint identiﬁers. This triggers an
end-to-end name-based signaling exchange that authenticates the
endpoints and establishes the state necessary to transmit a 5-tuple
(source and destination IP address, source and destination port, and
IP protocol) data ﬂow end-to-end via a series of middleboxes, in-
cluding NATs and ﬁrewalls. In addition to the 5-tuple parameters
and NAT mappings normally required by ﬂows, this state also in-
cludes authorization tokens needed to traverse middleboxes that do
access control.
There are two components in NUTSS, P-boxes and M-boxes (for
policy-box and middlebox respectively). P-boxes and M-boxes are
deployed in the network as well as in endhosts. Networks that en-
force policies, such as access control or steering policies, must de-
ploy P-boxes and M-boxes. P-boxes form an overlay over which
name-routed signaling messages are carried end-to-end. Data ﬂows
(or just ﬂows for short) do not traverse P-boxes. Flows do, on the
other hand, traverse M-boxes, either because the M-box is deployed
on the IP path between endpoints (as with a ﬁrewall), or because
the signaling has negotiated to steer a ﬂow through an M-box (for
instance, an anonymizer). P-boxes make policy decisions about
richly-named ﬂows: whether to allow or disallow them, whether to
steer them through M-boxes, whether to require encryption, and so
on. M-boxes enforce the policy decisions made by an associated
P-box.
Signaling messages may traverse P-boxes or M-boxes. They tra-
verse P-boxes, routed by name, when no IP address is known for
the destination, or when the security tokens needed to traverse M-
boxes have not been obtained. Signaling through P-boxes is re-
ferred to as name-routed signaling. Otherwise, signaling messages
naturally traverse M-boxes, routed by the destination IP address
obtained during name-routed signaling (called address-routed sig-
naling). Because a name-routed P-box overlay path always exists
between endpoints, even for endpoints behind NAT boxes, there is
always a way to signal another endpoint to establish a ﬂow (policy
permitting).
There is a bidirectional coupling that exists between name-routed
and address-routed signaling, which exists by virtue of shared in-
formation (keys and addresses) between P-boxes and their associ-
ated M-boxes. This coupling is necessary to overcome the unavoid-
able lack of coordination between name-based overlay routing and
IP-based address routing. Speciﬁcally, P-boxes convey secure to-
kens to endpoints during name-routed signaling, which are then
carried in address-routed signaling to traverse M-boxes. If an un-
approved ﬂow is attempted through an M-box, the M-box refers the
sending endpoint to a P-box that may authorize the ﬂow.
2.2 Naming and Access Control
Endpoint names in NUTSS are (user, domain, service) 3-tuples.
The user is a user-friendly identiﬁer that is not globally unique
(e.g. bob). The domain is a globally-unique, user-friendly, hierar-
chical DNS name (e.g. acme.org). Together the user and domain
identify the principal that is considered to own the endpoint; the
user may be NULL, in which case the domain effectively identiﬁes
a machine. The service is a globally-unique, user-friendly iden-
ftpd for an
tiﬁer for the service provided by the endpoint (e.g.
FTP-server). Names are independent of network location.
Access control policy is deﬁned in terms of names. Wildcards
are permitted in policy deﬁnitions. A wildcard service name ∗
matches all services run by a particular principal (e.g. (bob, acme.org,
∗)), while a wildcard user name matches all principals in that do-
main. Furthermore, as domains are organized hierarchically, a wild-
card preﬁx in the domain name matches all subdomains below that
domain (e.g. (∗,∗.cs.acme.org, ∗)).
NUTSS relies on existing mechanisms to authenticate endpoint
identities. Standard protocols, such as public-key signatures or
challenge-response protocols (e.g. DIAMETER [7]), over the name-
routed path are used to authenticate principals. Similarly, services
can be authenticated if the necessary hardware and software sup-
port is present at endpoints. For instance, [46] proposes an architec-
ture that leverages trusted hardware [51] to measure the integrity of
Parameters
E : (user, domain, service) - Endpoint name
A : address - Network address to reach endpoint
P : port - Transport port for data ﬂow
τ : (token, nexthop) - address-routing state
ρ : (EP , AP ) - Referral to P-Box
Name-routed messages (sent to P-Box)
REGISTER(E, A)
Register a name-route (wildcards OK).
FLOWNEGOTIATE(Esrc, Edst, Asrc, τ1...n)
Use name-routed signaling to negotiate address-routed path.
P-Boxes add τi, and modify Ax to effective address Ax(cid:2)
Address-routed messages (sent through M-Box)
ρ = FLOWINIT(Aself , Apeer(cid:2) , Pself , τ1...n)
Use address-routed signaling to initialize data path.
An M-Box may refer to additional P-Boxes to contact
M-Boxes modify Px to effective port Px(cid:2)
ρ = SEND(Aself : Pself , Apeer(cid:2) : Ppeer(cid:2) , data)
Send data packet
Access Control (sent to P-Box)
DISALLOW(Edst, Esrc)
ALLOW(Edst, Esrc)
Add/remove ﬁlters for destination (wildcards OK).
Table 1: NUTSS API for establishing ﬂows and controlling access
P1
N1
M2
DNS
Policy-free
Internet Core
(may be null)
N2
P2
P4
N4
M-Box
P-Box
Endpoint
P3
N3
N5
E1
P-Box/M-Box Association
Referral Mechanism
(parent P-Box discovery)
P5
E2
Figure 1: Network topology and referral mechanism. Network N 5 is
multi-homed.
the software-stack. As such, authentication is not further addressed
in this paper.
2.3 Name-routed Signaling
We now discuss how NUTSS creates a name-routed path be-
tween endpoints. Our goal in creating this path is to incorporate
the policy of networks on the data path between the endpoints.
As mentioned, this is accomplished through policy-aware P-Boxes
that, by design, form a name-routing tree2 (rooted at the DNS).
Endpoints form the leaves of the tree such that the path between
two endpoints along the tree passes through P-Boxes designated by
networks topologically between the two endpoints.
2.3.1 Network Topology
NUTSS models the Internet topology as policy-aware edge net-
works connected by a policy-free core (Figure 1). The policy-free
core (or just core for short) is deﬁned as the set of interconnected
2In the presence of multi-homed networks, this is a directed acyclic graph
networks that do not assert middlebox policies and so do not de-
ploy P-Boxes. This model reﬂects the current Internet: networks
with ﬁrewalls today correspond to (policy-aware) edge networks,
and networks without ﬁrewalls correspond to the (policy-free) core.
Edge networks may comprise smaller networks that are separate
administrative entities. Each network designates one logical P-Box
(potentially multiple physical instances), which may be located ei-
ther inside or outside that network (e.g. in the ﬁgure, network N 2
designates P-Box P 2 and N 1 designated P 1). A P-Box for a net-
work not connected directly to the core has a parent P-Box. The
parent P-Box is the P-Box for an adjacent network through which
the former connects to the core (P 1 is P 2’s parent). A P-Box for a
multi-homed network (P 5) has multiple parents (P 3, P 4).
The network administrator associates M-Boxes with the P-Box
for the network. M-Boxes are typically, though not always, de-
ployed at the network boundary (e.g. M 2). P-Boxes use standard
cryptographic mechanisms (shared symmetric keys, or public keys)
to pass conﬁdential messages to the M-Box via untrusted third-
parties. To facilitate deploying many M-Boxes, a P-Box need not
know the addresses of the M-Boxes (except for M-Boxes that must
be explicitly addressed e.g. NATs). M-Boxes, on the other hand,
are all conﬁgured with the name and address of their associated P-
Box. The P-Box and M-Box may optionally be co-located in the
same physical package.
Endhosts have a resident P-Box and M-Box (Figure 1). NUTSS
primitives (Table 1) are initially sent by endpoints to their local
in-host P-Box and M-Box, and from there, to other P-Boxes and
M-Boxes.
NUTSS assumes the presence of the DNS (or a similar name-
resolution service) in the core. For each domain, the DNS contains
the addresses of one or more contact P-Boxes for that domain. The
contact P-Box is the outermost P-Box through which the endpoints
in that domain can be reached. For example, in Figure 2, endpoints
from acme.org typically register with P 2; the DNS administrator
for acme.org lists P 1 as the contact P-Box for his domain as P 1
can reach those endpoints through its child P 2. Contact P-boxes
must be globally addressable.
Note that the core may in fact be null, as long as the core freely
allows packets between contact P-boxes. The rationale for exploit-
ing DNS in the core is similar to that of IPNL [15]:
it allows
NUTSS to scale globally without changing the Internet core and
without requiring new name-based routing protocols as do TRIAD
[20] and DONA [28].
2.3.2 Discovery
A P-Box discovers it’s parent P-Box through the M-Box refer-
ral mechanism mentioned earlier. The child P-Box (e.g. E1’s
in-host P-Box) sends an address-routed message to a public ad-
dress. The message contains any authorization tokens needed to
clear the M-Boxes for the originating network/host (generated by
the P-Box itself), but does not contain authorization tokens for the
parent network (N 2); the parent network’s M-Box (M 2) therefore
blocks the message and responds with the name and address of the
parent P-Box (P 2). An advantage of using normal address-routed
messages for P-Box discovery is that if P-Boxes and M-Boxes are
added (even mid-ﬂow), for instance if a site becomes multi-homed,
they can be discovered via normal operation of the protocol.
2.3.3 Name-Route Creation
The REGISTER message, sent by endpoints through P-Boxes of
networks connecting it to the core, creates a (reverse) route from
the DNS to the endpoint through P-Boxes designated by the mid-
dle. The process is described as follows: endpoint E with network
Register Message
DNS mapping
(contact P-Box)
P-Box Reg. Table
P1
P2
P6
E3
(carman,acme.org,ftpd)
DNS
Core
acme.org
P4
P3
P5
rr.net
E1
(bob,acme.org,*)
DNS
 acme.org: P1
 rr.net: P3, P4
E2
(alice,rr.net,*)
P1
P4
P3
 (carman,acme.org,ftpd): P6
 (*,acme.org,*): P2
 (*,rr.net,*): P5
 (*,rr.net,*): P5
P2 (@acme.org)
P6
P5 (@rr.net)
 (bob,acme.org,*): E1
 (carman,acme.org,ftpd): E3
 (alice,rr.net,*): E2
E1
E3
E2
 (bob,acme.org,*)
 (carman,acme.org,ftpd)
 (alice,rr.net,*)
Figure 2: Endpoint registration, and name-routing state created. Network
N 5 is multi-homed. Endpoint E3 is roaming.
Algorithm 1 PROCESSREIGSTER(E,A)
Require: E is endpoint name (EU,ED,ES)
Require: A is next-hop address to E
Require: E has been authenticated, can be reached through A, and is au-
thorized to register as per local policy.
FWDTO ← GETCONTACTPBOXADDRESSESFOR(ED)
if CONTAINS(FWDTO, AL) then
Ensure: Name-routed path from contact P-Box for ED to E exists
1: UPDATEREGISTRATIONTABLE(E,A)
2: AL ← GETLOCALADDRESS()
3: FWDTO ← GETPARENTPBOXADDRESSES()
4: if ISEMPTY(FWDTO) then