### Important Considerations for Operation Sequencing and Consistency

A critical requirement is that each operation must be assigned a unique global sequence number, ensuring the history server maintains at least sequential consistency. This requirement applies specifically to keys with common clients. If two sets of keys do not share any clients, the assignment of sequence numbers among those sets does not need to be sequentially consistent. Violating this requirement can lead to clients detecting consistency violations, such as operations with duplicate sequence numbers. Therefore, it is not beneficial for a malicious cloud service to violate this requirement.

Additionally, the history server stores only hashes of data objects rather than the full data objects, which keeps the amount of stored data relatively small.

### Log on the History Server

The log on the history server serves as "proof" that the cloud service adheres to its promised consistency model. Depending on the consistency model, the servers and key-value store may include additional information about each operation to facilitate verification that the consistency model is met. We will discuss the details of the consistency verification procedures below.

### Attestation Process

One of the user's devices, acting as the attestor, periodically performs attestations by fetching a log segment from the history server. For simplicity, we assume the attestor has no battery limitations, though we will address this by employing an attestor-partitioning protocol described in Section IV-C. The attestor must meet two requirements: 
1. The role of the attestor is permanently assigned to one and only one device, and its identity should be known to all other devices.
2. The attestor should perform attestation operations on a schedule known to all devices.

To request a log segment, the attestor uses a `Read_History(GStart, GEnd)` operation, specifying a section of the log between two global sequence numbers, GStart and GEnd. The attestor submits this request to the server it is connected to, which reads it from the history server and returns the results. All log segments are signed by the history server to ensure they cannot be tampered with, enforcing Guarantee CLT2.

To create the attestation, the attestor adds a sequence number and timestamp to the log segment, signs it, and stores it back to the history server using a `Write_Attest(GStart, GEnd)` operation. Clients can read attestations from the history server using a `Read_Attest(GStart, GEnd)` operation, which returns all operations and attestations in the requested range. The attestor performs attestations at specific time intervals defined by the parameter TA.

Clients expect to read a new attestation every TA + ǫ, where ǫ accounts for variable delays due to network and processing. Scheduled attestations prevent a malicious service from showing different log contents to different clients. Tampering or dropping portions of the log will be detected when clients verify the log segments against the attestations. Missing sequence numbers in the stream of attestations will detect replay or omission of log segments or attestations. A malicious service attempting to drop all future log segments and attestations (i.e., truncation) will be detected because clients will not be able to read an attestation at the expected time.

If a client continues to miss attestations for an extended period, it can notify the user, who can then examine the state of their attestor device to determine if the device or its network connection has failed. If neither the device nor its network has failed, this indicates that the cloud service is acting maliciously.

### Verification Process

To distribute the verification tasks, each client is responsible for verifying the consistency of its own operations. Verification happens asynchronously to `Put` and `Get` operations when clients periodically fetch attestations using the `Read_Attest` operation. Caelus ensures that operations are inconsistent by at most some time bound TCaelus, thus enforcing Guarantee SRV3.

Clients verify their operations in three steps:
1. **Correctness Verification**: Clients verify the correctness of the fetched log segment against the accompanying attestation.
2. **Presence Check**: Clients verify the individual signatures on each operation in the log to detect tampering and check that the log segment does not omit or replay operations using the sequence numbers embedded in the operations.
3. **Consistency Verification**: Clients verify the consistency of their `Put` and `Get` operations. The exact method depends on the consistency model of the cloud service.

Caelus currently supports three consistency models: strong consistency, eventual consistency, and causal consistency with a visibility time bound TS.

- **Strong Consistency**: All operations appear to execute in a single global order, with every `Get` receiving the value of the immediately preceding `Put` to the same key. Puts should be globally visible as soon as they are acknowledged by the cloud service. Clients verify the consistency of `Puts` by checking that the `Put` appears in the next attestation signed by the attestor, allowing a delay of at most TA + ǫ. Clients verify the consistency of `Gets` by checking that the value returned matches the value of the immediately preceding `Put` in the log.
  
- **Bounded Eventual Consistency**: The results of `Puts` need not be immediately visible to all clients but may take up to the visibility time bound TS to become visible. Clients verify the consistency of `Puts` and `Gets` similarly to strong consistency, but with a delay of up to TS + TA + ǫ.

- **Bounded Causal Consistency (Causal+)**: The cloud service enforces causal consistency on the values read by `Gets` and will eventually make all `Puts` visible to all clients via the history log. Clients verify the consistency of `Puts` and `Gets` as in bounded eventual consistency. However, `Gets` must return the most recent value on which it is causally dependent. To uniquely identify each operation, vector clocks are attached to each operation in the log. Clients verify the correctness of the vector clocks by checking that they increase along with the sequence numbers, indicating program order. Clients use the vector clocks to verify the freshness of the value read by checking if there are any newer `Puts` to the same key between the vector clock of the `Get` and its associated `Put`.

For large numbers of clients, vector clocks can be expensive since the length of the vector is determined by the number of nodes in the system. In Caelus, vector clocks do not need to span users who do not share data, reducing the size and complexity.