sages on that port. The easiest way to do that is to use mach_msg_server()
and exc_server(). The mach_msg_server() function puts the calling thread in
a loop calling mach_msg_receive(), a given message-handling function, and
mach_msg_send(). The exc_server() function is an exception message-handling
function that works perfectly with mach_msg_server(). It decodes the exception
messages and calls locally defi ned exception-handler functions with arguments
from the decoded message. The declarations for these functions are shown in
the following examples.
extern mach_msg_return_t mach_msg_server(boolean_t (*)
(mach_msg_header_t *,
mach_msg_header_t *),
mach_msg_size_t,
mach_port_t,
mach_msg_options_t);
extern boolean_t exc_server(mach_msg_header_t *request,
mach_msg_header_t *reply);
The exception-handler functions must match the names and types that exc_
server() expects. These handler prototypes are as follows.
kern_return_t catch_exception_raise
(mach_port_t exception_port,
mach_port_t thread,
mach_port_t task,
exception_type_t exception,
exception_data_t code,
mach_msg_type_number_t code_count);
kern_return_t catch_exception_raise_state
(mach_port_t exception_port,
exception_type_t exception,
exception_data_t code,
mach_msg_type_number_t code_count,
int * flavor,
thread_state_t in_state,
mach_msg_type_number_t in_state_count,
thread_state_t out_state,
mach_msg_type_number_t * out_state_count);
9955336633cc1111..iinndddd 229999 11//2255//0099 44::4433::0033 PPMM
300 Part IV ■ Post-Exploitation
kern_return_t catch_exception_raise_state_identity
(mach_port_t exception_port,
mach_port_t thread,
mach_port_t task,
exception_type_t exception,
exception_data_t code,
mach_msg_type_number_t code_count,
int * flavor,
thread_state_t in_state,
mach_msg_type_number_t in_state_count,
thread_state_t out_state,
mach_msg_type_number_t * out_state_count);
Which function is called depends on the arguments to thread_set_exception_
ports(). For example, the call to thread_set_exception_ports() in the fi rst exam-
ple shows that we are interested in receiving EXCEPTION_STATE_IDENTITY
messages. This will cause exc_server() to call the locally defi ned handler named
catch_exception_raise_state_identity(). Handling exceptions is as simple as
defi ning an exception-handler function and using a call to mach_msg_server()
like the following.
mach_msg_server(exc_server, 2048,
exception_port,
MACH_MSG_TIMEOUT_NONE);
In this code, the call to mach_msg_server specifi es that exc_server() should
be called to process any received mach messages, a 2,048-byte buffer should be
used to receive messages, messages will be received on the port exception_port,
and there should be no timeout waiting for messages.
Mach Injection
In Chapter 9 we demonstrated an exploit payload that injected a compiled
Mach-O bundle into the currently running process. It would be convenient
to be able to do the same to other running local processes without having to
exploit a vulnerability within them. This technique has been used by a number
of Mac OS X packages to extend the functionality of system processes like the
Finder and WindowServer. An existing project, mach_inject, can be used to
do just that on both PowerPC and x86. The project provides a function called
mach_inject_bundle that will inject arbitrary bundles into running processes.
The mach_inject code is ideally suited to inclusion in a fully featured Mac OS
X application or framework bundle. There are several support fi les (including
subframeworks and bundles) that must be included along with the application
to support bundle injection. This is due to the fact that mach_inject_bundle()
9955336633cc1111..iinndddd 330000 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 301
fi rst uses the mach_inject() function to inject a support bundle that in turn
loads the actual bundle that was requested. In addition, the code assumes that
the injected bundle is part of a fully featured bundle directory, rather than just
the essential Mach-O bundle binary. To create an injection tool that is lighter
weight and a little more fl exible, we created our own custom injector called
inject-bundle.
Our inject-bundle is a self-contained single source fi le that can be used as
a command-line injection tool or integrated into other projects. The injector
operates somewhat differently from our remote bundle-injector exploit pay-
load. Nevertheless, we keep it similar enough so that we may test our injectable
bundles using the local injector and be confi dent that they will work without
modifi cation in the remote injector exploit payload. We will discuss some of
the mechanisms behind the injector with some code examples, but see the full
source code for more detail.
In the rest of this chapter we will use the injector along with some other tools
for dynamically overriding application behavior to demonstrate a variety of
injectable bundles for penetration testing and security testing.
Remote Threads
Our injector creates two functions to support remote threads, as shown in the
following code.
kern_return_t
create_remote_thread(mach_port_t task, remote_thread_t* rt,
vm_address_t start_address, int argc, ...);
kern_return_t
join_remote_thread(remote_thread_t* remote_thread, void** return_value);
To call remote functions, our injector creates a new thread within the remote
process to call the target function. When you create a new thread, you must
specify the values of all the CPU registers for it. You must also allocate some
memory in the remote process to use as a stack segment. An initial implemen-
tation could set the EIP (x86) or PC (PowerPC) registers to our target function;
however, there are some problems with this approach.
All threads on Mac OS X are more than just Mach threads; they are also POSIX
threads. Many library functions expect to be able to access POSIX thread–specifi c
data for the current thread. A “naked” Mach thread works to perform system
calls, but will crash when attempting to call anything more complicated. To fi x
this our injected thread needs to fi rst promote itself to a real POSIX thread.
Converting a “naked” Mach thread into a real POSIX thread involves set-
ting a pointer to the thread’s own pthread_t structure in a special CPU reg-
ister and storing a pointer to the thread’s own pthread_t structure within the
9955336633cc1111..iinndddd 330011 11//2255//0099 44::4433::0033 PPMM
302 Part IV ■ Post-Exploitation
pthread_t structure’s thread-specifi c data (TSD) array. A machine-specifi c func-
tion, __pthread_set_self(), in the commpage sets the CPU register to the given
pthread_t structure. On x86 and x86-64, the gs selector register points to the
currently executing thread’s pthread_t structure. On PowerPC, this is stored
in the special-purpose register SPRG3. There are also a few private functions
in Libc that will help us set the CPU register and TSD pointers (see the follow-
ing example). If you call _pthread_set_self() and then cthread_set_self() with
a pointer to enough space for a pthread_t structure, the “naked” Mach thread
will initialize itself to be a proper POSIX thread as well.
__private_extern__ void
_pthread_set_self(pthread_t p)
{
extern void __pthread_set_self(pthread_t);
if (p == 0) {
bzero(&_thread, sizeof(struct _pthread));
p = &_thread;
}
p->tsd[0] = p;
__pthread_set_self(p);
}
void
cthread_set_self(void *cself)
{
pthread_t self = pthread_self();
if ((self == (pthread_t)NULL) || (self->sig != _PTHREAD_SIG)) {
_pthread_set_self(cself);
return;
}
self->cthread_self = cself;
}
Since you must call _pthread_set_self() and cthread_set_self() fi rst, you can-
not simply set our thread’s start address to our target function. You also want to
know when these functions are done executing and what value they returned.
This requires you to execute a pair of special trampolines written in assembly:
mach_thread_trampoline() and pthread_trampoline(). The mach_thread_tram-
poline() is responsible for the following:
1. Calling _pthread_set_self with a pointer to an uninitialized pthread_t
2. Calling cthread_set_self with a pointer to the same pthread_t structure
3. Calling pthread_create() to create a new real pthread, specifying pthread_
trampoline() as its start routine and specifying the pointer to its parameter
block as the start routine’s single argument
9955336633cc1111..iinndddd 330022 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 303
4. Waiting for the pthread to terminate and retrieving its return value by
calling pthread_join()
5. Setting the trampoline’s return value to the pthread’s return value
6. Returning to a magic return address to indicate thread termination
The pthread_trampoline() is responsible for unpacking the target function’s
address and arguments from the trampoline’s parameter block and calling the
target function with those arguments. The trampoline returns the target func-
tion’s return value as its own.
On PowerPC, the two separate trampolines described earlier are necessary.
On x86 however, the functionality of both trampolines can be combined into
one since the remote thread’s stack can be initialized with the arguments to the
target function and thread-termination magic return address. The assembly-
code trampoline for x86 follows:
// Call _pthread_set_self with pthread_t arg already on stack
pop eax
call eax
add esp, 4
// Call cthread_set_self with pthread_t arg already on stack
pop eax
call eax
add esp, 4
// Call function with return address and arguments already on stack
pop eax
jmp eax
The trampolines for PowerPC are shown here:
/*
* Expects:
* r3 - struct _pthread *
* r26 - start_routine arg
* r27 - &(pthread_join)
* r28 - &(pthread_create)
* r29 - &(_pthread_set_self)
* r30 - &(cthread_set_self)
* r31 - &(start_routine)
* ...
*/
asm void mach_thread_trampoline(void)
{
mflr r0
stw r0, 8(r1)
stwu r1, -96(r1)
stw r3, 56(r1)
9955336633cc1111..iinndddd 330033 11//2255//0099 44::4433::0033 PPMM
304 Part IV ■ Post-Exploitation
// Call _pthread_set_self(pthread)
mtctr r29
bctrl
// Call cthread_set_self(pthread)
lwz r3, 56(r1)
mtctr r30
bctrl
// pthread_create(&pthread, NULL, start_routine, arg)
addi r3, r1, 60
xor r4, r4, r4
mr r5, r31
mr r6, r26
mtctr r28
bctrl
// pthread_join(pthread, &return_value)
lwz r3, 60(r1)
addi r4, r1, 64
mtctr r27
bctrl
lwz r3, 64(r1)
lwz r0, 96 + 8(r1)
mtlr r0
addi r1, r1, 96
blr
}
/*
* Loads argument and function pointer from single argument and calls
* the specified function with those arguments.
*/
asm void pthread_trampoline(void)
{
mr r2, r3
lwz r3, 0(r2)
lwz r4, 4(r2)
lwz r5, 8(r2)
lwz r6, 12(r2)
lwz r7, 16(r2)
lwz r8, 20(r2)
lwz r9, 24(r2)
lwz r10, 28(r2)
lwz r2, 32(r2)
mtctr r2
bctr
}
9955336633cc1111..iinndddd 330044 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 305
The trampoline code is placed on the remote thread’s stack. Normally, on
Mac OS X x86 stack segments are non-executable. Since we explicitly create the
memory mappings for the remote thread’s stack, we can specify its permis-
sions to allow reading, writing, and executing memory from it. At the top of
the stack, we reserve space for the thread’s pthread_t structure, the trampoline
code, and a prepared stack frame for running the trampoline code. When the
trampoline code executes, it restores data it needs from CPU registers and its
prepared stack frame.
To retrieve the return value from our remote thread, we employ a creative
use of Mach exceptions. As mentioned previously, the remote Mach-thread
trampoline returns to a magic return address. Our injector process installs itself
as an exception handler for the remote thread. This allows our injector to be
notifi ed of any exceptions within that thread. When an exception is received, the
exc_server() will decode the exception message and call catch_exception_raise_
state_identity() with the appropriate information. In the exception handler in the
following example, we examine the memory address of the faulting instruction
to identify whether it is our magic return address. If so, we suspend the thread
so that its state may be retrieved by join_remote_thread(). If not, we return a
special value (MIG_NO_REPLY) to indicate that the exception was not handled
and that the exception-handler search should continue. In practice this means
the unhandled exception will be converted into a UNIX signal and delivered
to the process, usually resulting in a crash.
kern_return_t catch_exception_raise_state_identity(
mach_port_t exception_port,
mach_port_t thread,
mach_port_t task,
exception_type_t exception,
exception_data_t code,
mach_msg_type_number_t code_count,
int *flavor,
thread_state_t old_state,
mach_msg_type_number_t old_state_count,
thread_state_t new_state,
mach_msg_type_number_t *new_state_count)
{
switch (*flavor) {
#if defined(__i386__)
case x86_THREAD_STATE32:
/*
* A magic value of EIP signals that the thread is done
* executing. We respond by suspending the thread so that
* we can terminate the exception handling loop and
* retrieve the return value.
*/
9955336633cc1111..iinndddd 330055 11//2255//0099 44::4433::0033 PPMM
306 Part IV ■ Post-Exploitation
if (((x86_thread_state32_t*)old_state)->__eip == MAGIC_RETURN) {
thread_suspend(thread);
/*
* Signal that exception was handled
*/
return MIG_NO_REPLY;
}
break;
#elif defined(__ppc__)
case PPC_THREAD_STATE: