review on an application won't let you simulate how the application will
react when it's running live and clients are interacting with it, and
it's very difficult to predict all the possible malicious inputs an
attacker can provide.
首先，它评估应用程序的非实时状态。在应用程序进行代码审查时，您无法模拟应用程序在运行实时且客户正在与之交互时的反应，而且很难预测攻击者可以提供的所有可能的恶意输入。
Static code analysis also requires access to the application's source
code. When you're doing a black-box test, as in a bug bounty scenario,
you probably won't be able to obtain the source code unless you can leak
the application's source code or identify the open source components the
application is using. This makes fuzzing a great way of adding to your
testing methodology, since you won't need the source code to fuzz an
application.
静态代码分析也需要获得应用程序的源代码。在黑盒测试中，例如在漏洞赏金情境下，你可能无法获得源代码，除非你可以泄露应用程序的源代码或确定应用程序正在使用的开源组件。这使得模糊测试成为您测试方法的重要手段之一，因为您不需要源代码就可以对应用程序进行模糊测试。
## Pitfalls of Fuzzing {#c25.xhtml#h1-501546c25-0006}
Of course, fuzzing isn't a magic cure-all solution for all bug
detection. This technique has certain limitations, one of which is
rate-limiting by the server. During a remote, black-box engagement, you
might not be able to send in large numbers of payloads to the
application without the server detecting your activity, or you hitting
some kind of rate limit. This can cause your testing to slow down or the
server might ban you from the service.
当然，模糊测试并非所有漏洞检测的万能解决方案。这种技术有一定的局限性，其中之一是服务器的速率限制。
在远程黑盒测试期间，您可能无法向应用程序发送大量有效负载数据而不被服务器检测到或命中某种速率限制。
这可能会使您的测试减慢，或者服务器可能会禁止您使用该服务。
[ ]{#c25.xhtml#Page_379 .pagebreak title="379"} In a black-box test, it
can also be difficult to accurately evaluate the impact of the bug found
through fuzzing, since you don't have access to the code and so are
getting a limited sample of the application's behavior. You'll often
need to conduct further manual testing to classify the bug's validity
and significance. Think of fuzzing as a metal detector: it merely points
you to the suspicious spots. In the end, you need to inspect more
closely to see if you have found something of value.
在黑盒测试中，通过模糊测试找到的漏洞的影响评估可能也很难。因为你无法访问代码，只能得到应用程序行为的有限样本。通常需要进行进一步的手动测试，以确定漏洞的有效性和重要性。把模糊测试想象成金属探测器：它只是简单地指向了可疑的区域。最终，您需要进行更仔细的检查，以确定是否找到有价值的东西。
Another limitation involves the classes of bugs that fuzzing can find.
Although fuzzing is good at finding certain basic vulnerabilities like
XSS and SQL injection, and can sometimes aid in the discovery of new bug
types, it isn't much help in detecting business logic errors, or bugs
that require multiple steps to exploit. These complex bugs are a big
source of potential attacks and still need to be teased out manually.
While fuzzing should be an essential part of your testing process, it
should by no means be the only part of it.
另一个限制涉及模糊测试可以发现的漏洞类别。尽管模糊测试擅长发现某些基本漏洞，比如XSS和SQL注入，有时可以帮助发现新的漏洞类型，但是它在检测业务逻辑错误或需要多步操作才能利用的漏洞方面并没有太大帮助。这些复杂的漏洞是潜在攻击的重要来源，仍需要手动梳理。虽然模糊测试应该是测试过程的重要组成部分，但绝不应该是唯一的部分。
## Adding to Your Automated Testing Toolkit {#c25.xhtml#h1-501546c25-0007}
Automated testing tools like fuzzers or scanners can help you discover
some bugs, but they often hinder your learning progress if you don't
take the time to understand how each tool in your testing toolkit works.
Thus, before adding a tool to your workflow, be sure to take time to
read the tool's documentation and understand how it works. You should do
this for all the recon and testing tools you use.
自动化测试工具（如Fuzzer或扫描器）可以帮助你发现一些漏洞，但是如果你不花时间理解测试工具包中每个工具的工作原理，它们往往会阻碍你的学习进程。因此，在将工具添加到工作流程之前，请确保花时间阅读工具的文档并理解其工作原理。对于您使用的所有侦查和测试工具都应该这样做。
Besides reading the tool's documentation, I also recommend reading its
source code if it's open source. This can teach you about the
methodologies of other hackers and provide insight into how the best
hackers in the field approach their testing. Finally, by learning how
others automate hacking, you'll begin learning how to write your own
tools as well.
除了阅读工具的文档之外，我还建议阅读其源代码（如果是开源的话）。这可以让你了解其他黑客的方法，并深入了解领域中最好的黑客如何进行测试。最后，学习其他人如何自动化黑客攻击，你也将开始学习如何编写自己的工具。
Here's a challenge for you: read the source code of the tools Sublist3r
(
[https://github.com/aboul3la/Sublist3r/](https://github.com/aboul3la/Sublist3r/){.LinkURL}
) and Wfuzz (
[https://github.com/xmendez/wfuzz/](https://github.com/xmendez/wfuzz/){.LinkURL}
). These are both easy-to-understand tools written in Python. Sublist3r
is a subdomain enumeration tool, while Wfuzz is a web application
fuzzer. How does Sublist3r approach subdomain enumeration? How does
Wfuzz fuzz web applications? Can you write down their application logic,
starting from the point at which they receive an input target and ending
when they output their results? Can you rewrite the functionalities they
implement using a different approach?
这是个挑战：阅读Sublist3r
(https://github.com/aboul3la/Sublist3r/)和Wfuzz
(https://github.com/xmendez/wfuzz/)工具的源代码。这两个都是用Python编写的易于理解的工具。Sublist3r是一个子域名枚举工具，而Wfuzz是一个Web应用程序模糊测试工具。Sublist3r如何处理子域名枚举？Wfuzz如何模糊测试Web应用程序？您能写下它们的应用逻辑吗，从它们接收输入目标开始，直到输出结果结束？您能否使用不同的方法重新编写它们实现的功能？
Once you've gained a solid understanding of how your tools work, try to
modify them to add new features! If you think others would find your
feature useful, you could contribute to the open source project: propose
that your feature be added to the official version of the tool.
一旦你掌握了工具的使用方法，尝试修改它们以新增功能！如果你认为其他人会觉得你的功能有用，你可以为开源项目做出贡献：建议将你的功能添加到工具的官方版本中去。
Understanding how your tools and exploits work is the key to becoming a
master hacker. Good luck and happy hacking!
了解你的工具和攻击手段的工作方式是成为大师黑客的关键。祝你好运并愉快地进行黑客活动！
:::
[]{#b01.xhtml}
::: section
# [ ]{#b01.xhtml#Page_381 .pagebreak title="381"} Index {.BackmatterTitleIndex}
Please note that index links to approximate location of each term.
请注意索引链接到每个术语的近似位置。
**Symbols**
符号
`      ../     ` , [279](#c17.xhtml#Page_279) ,
[287](#c18.xhtml#Page_287) , [325](#c21.xhtml#Page_325)
../，279，287，325
*.bash_profile* , [81](#c05.xhtml#Page_81)
\`.bash_profile, 81\`: \`.bash_profile\`，81
*/etc/passwd* , [252](#c15.xhtml#Page_252) , [291](#c18.xhtml#Page_291)
\`/etc/passwd, 252, 291\` 的翻译为：\`/etc/passwd，252，291\`。
*/etc/shadow* , [177](#c10.xhtml#Page_177) , [249](#c15.xhtml#Page_249)
, [253](#c15.xhtml#Page_253) -- [260](#c15.xhtml#Page_260) ,
[279](#c17.xhtml#Page_279) , [332](#c21.xhtml#Page_332)
/etc/shadow，177，249，253-260，279，332
.git directory, [328](#c21.xhtml#Page_328) -- [330](#c21.xhtml#Page_330)
. *See also* Git
\`.git\` 目录，328-330。另请参阅 Git。
annotated tags, [330](#c21.xhtml#Page_330)
\"注释标签，330\"
blobs, [330](#c21.xhtml#Page_330)
斑点、330。
commits, [330](#c21.xhtml#Page_330)
提交，330
trees, [330](#c21.xhtml#Page_330)
树，330
**A**
一
access control, [43](#c03.xhtml#Page_43) , [175](#c10.xhtml#Page_175) ,
[177](#c10.xhtml#Page_177) -- [178](#c10.xhtml#Page_178) ,
[278](#c17.xhtml#Page_278) , [324](#c21.xhtml#Page_324) ,
[364](#c24.xhtml#Page_364) -- [365](#c24.xhtml#Page_365) . *See also*
broken access control
访问控制，43，175，177-178，278，324，364-365。也查看破坏的访问控制。
access tokens, [312](#c20.xhtml#Page_312) -- [316](#c20.xhtml#Page_316)
, [364](#c24.xhtml#Page_364) -- [365](#c24.xhtml#Page_365)
访问令牌，312-316，364-365
long-lived tokens, [316](#c20.xhtml#Page_316)
长久的令牌，316
account takeover, [172](#c09.xhtml#Page_172) ,
[185](#c10.xhtml#Page_185) , [321](#c20.xhtml#Page_321)
账户接管，172, 185, 321
active scanning, [69](#c05.xhtml#Page_69) . *See also* passive scanning
主动扫描，69。也可以参见被动扫描。
ADB. *See* Android Debug Bridge (ADB)
ADB。请参见Android调试桥（ADB）
admin panels, [70](#c05.xhtml#Page_70) -- [71](#c05.xhtml#Page_71) ,
[278](#c17.xhtml#Page_278) , [321](#c20.xhtml#Page_321)
\"管理面板，70-71，278，321\" -\> \"管理面板，70-71，278，321\"
AFL. *See* American Fuzzy Lop (AFL)
AFL，即美国毛绒洛普（AFL）。
alert box, [116](#c06.xhtml#Page_116) , [122](#c06.xhtml#Page_122) --
[126](#c06.xhtml#Page_126)
警告框，116，122--126
allowlist, [133](#c07.xhtml#Page_133) , [141](#c07.xhtml#Page_141) ,
[194](#c11.xhtml#Page_194) , [215](#c13.xhtml#Page_215) ,
[220](#c13.xhtml#Page_220) -- [221](#c13.xhtml#Page_221) . *See also*
blocklist
允许列表，133，141，194，215，220-221。查看封锁列表。
Altdns, [69](#c05.xhtml#Page_69)
Altdns，69
Amass, [68](#c05.xhtml#Page_68)
积累，68
Amazon Elastic Compute Cloud (EC2), [77](#c05.xhtml#Page_77) ,
[226](#c13.xhtml#Page_226) . *See also* Amazon Web Services (AWS)
亚马逊弹性计算云（EC2），77, 226。参见亚马逊网络服务（AWS）。
Amazon S3, [74](#c05.xhtml#Page_74) -- [77](#c05.xhtml#Page_77) ,
[226](#c13.xhtml#Page_226) . *See also* Amazon Web Services (AWS)
亚马逊S3，74-77，226。另请参阅亚马逊网络服务（AWS）。
Lazys3, [74](#c05.xhtml#Page_74)
Lazys3，74 → 懒懒s3，74
S3 buckets, [61](#c05.xhtml#Page_61) , [64](#c05.xhtml#Page_64) ,
[74](#c05.xhtml#Page_74)
S3存储桶，61，64，74
Amazon Web Services (AWS), [61](#c05.xhtml#Page_61) ,
[75](#c05.xhtml#Page_75) , [308](#c20.xhtml#Page_308) ,
[316](#c20.xhtml#Page_316)
亚马逊网络服务（AWS），61、75、308、316
`      awscli     ` , [75](#c05.xhtml#Page_75)
awscli，75
American Fuzzy Lop (AFL), [370](#c25.xhtml#Page_370)
美国绒毛兔（AFL），370
Android, [335](#c22.xhtml#Page_335) , [347](#c23.xhtml#Page_347) --
[354](#c23.xhtml#Page_354)
安卓，335，347-354
Android Debug Bridge (ADB), [351](#c23.xhtml#Page_351)
Android 调试桥（ADB），351
Android Package (APK), [350](#c23.xhtml#Page_350)