title:New Side Channels Targeted at Passwords
author:Albert Tannous and
Jonathan T. Trostle and
Mohamed Hassan and
Stephen E. McLaughlin and
Trent Jaeger
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
New Side Channels Targeted at Passwords∗
Albert Tannous†
Jonathan Trostle‡ Mohamed Hassan† Stephen E. McLaughlin† Trent Jaeger†
† The Pennsylvania State University
University Park, PA 16802
{tannous,mhassan,smclaugh,tjaeger}@cse.psu.edu
‡ Johns Hopkins University APL
Laurel, MD 20723
PI:EMAIL
Abstract
Side channels are typically viewed as attacks that leak
cryptographic keys during cryptographic algorithm pro-
cessing, by observation of system side effects. In this paper,
we present new side channels that leak password informa-
tion during X Windows keyboard processing of password
input. Keylogging is one approach for stealing passwords,
but current keylogging techniques require special hardware
or privileged processes. However, we have found that the
unprivileged operation of modifying the user key mappings
for X Windows clients enables a side channel sufﬁcient for
unprivileged processes to steal that user’s passwords, even
enabling the attacker to gain root access via sudo. We suc-
cessfully tested one version on Linux 2.6; we were able to
obtain a high degree of control over the scheduler, and thus
we can obtain accurate timing information. A second ver-
sion (logon detection) works without depending on accurate
clocks or cache effects. Thus, in addition to demonstrating
new side channels, we show that (a) side channels cannot be
eliminated by removing accurate clocks or hardware cache
mechanisms (b) side channels are of continued concern for
computer security as well as cryptographic processing.
1. Introduction
Computer security has historically been focused on pre-
venting untrusted programs from obtaining access to infor-
mation that would violate security policy, where the pol-
icy is realized in the form of Mandatory Access Controls
(MAC) [16]. Although Mandatory Access Controls are ef-
fective for control of the system designed communication
interfaces, it has long been known that covert channels [6]
∗This material is partly based upon work supported by the National Sci-
ence Foundation under Grant No. CNS-0627551. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this material are those
of the author(s) and do not necessarily reﬂect the views of the National
Science Foundation.
can obviate this protection and lead to security policy vi-
olations. A covert channel is deﬁned as a communication
channel between two entities that does not use the system
deﬁned communication interfaces. For example, one pro-
cess can manipulate the disk in order to send information
to another process, where the security policy would prevent
normal communication between these processes.
A related threat, usually in the context of cryptographic
processing, is side channels. Here untrusted malicious pro-
grams are able to observe some aspects of a shared system
and obtain information about cryptographic keys due to the
side effects of cryptographic processing (the cryptographic
process is trusted and does nothing to aid the malicious pro-
cess in contrast to a covert channel).
With the exception of the Tenex ﬂaw [1, 7], side chan-
nels are primarily the concern of cryptographic algorithm
developers, and covert channels are of concern to computer
security design and development. Thus side channels have
largely not been a concern to computer security.
In this
paper, we present side channels that disclose information
about user passwords, and thus we show that side channels
continue to be of concern for computer security design. (In
current commodity OS-based systems, there are more efﬁ-
cient attacks, but side channels are a concern for systems
with more advanced security features).
1.1. Related Work
One of the earliest examples of a side channel is the
Tenex ﬂaw [1, 7] where passwords are vulnerable since
they were checked one character at a time, and process-
ing stopped at the ﬁrst incorrect character. Thus an attacker
could guess password characters based on the amount of
time needed to process the password.
More recently, Kocher demonstrated timing attacks
against RSA and other public key algorithms [5]. The
papers [12, 11] also demonstrate cryptographic side chan-
nels against RSA, where [2, 9] demonstrate side channels
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.47
DOI 10.1109/ACSAC.2008.47
35
45
against AES. Countermeasures against cache based chan-
nels are presented in [10, 17].
Trostle [14] presents a side channel against the Xlock
program, using information associated with X Windows
processing. [14] shows that keyboard interrupts and X pro-
cessing can be detected and measured by an unprivileged
process running on the system. Classical covert channel
countermeasures [3, 15, 4] will have some effectiveness in
limiting or closing side channels as well. In particular, [3]
is aimed at removing accurate clocks which many channels
depend on.
1.2. Our Results
In this paper, we present side channels that disclose in-
formation about user passwords. These channels leak pass-
word information during X Windows keyboard processing
of password input. We demonstrate that it is possible for
an unprivileged process to steal a user’s password using the
following sequence of steps: (1) remap that user’s X Win-
dow key map to generate a measurable timing side channel
for keyboard entry processing (2) that the effects of this side
channel can be measured by an unprivileged process exter-
nal to the victim; and (3) use these measurements to guess a
password from an unprivileged process without access to
the password ﬁle. We show that this side channel is an
appropriate mechanism to extract passwords from X client
programs (e.g., screensavers and command line programs).
The key facet of this attack is that it can be executed by un-
privileged processes, rather than requiring privileged pro-
cess access of typical keyloggers, hardware-based attacks,
such as JitterBugs [13], or unauthorized access to X Win-
dows processing directly. Even if all of these approaches are
prevented, this side channel may still be leveraged to obtain
access to a user’s password, including users who may have
the privilege to use this password for sudo processing.
Our ﬁrst attack is based on a remap timing channel,
and we demonstrate an implementation of an unprivileged,
multi-threaded attack process on a Linux 2.6 system. With
the 2.6 scheduler, we are able to obtain a high degree of
control over the scheduler, and thus we can obtain highly
accurate timing information. In particular, we have imple-
mented a multithreaded timing program which is able to ac-
curately time run durations of other interactive processes.
It it likely that this capability has other applications. Our
second channel, although noisy, is effective on quiescent
systems and is able to obtain enough information about an
eight character password to make a subsequent guessing at-
tack tractable. We have successfully tested it on a Linux 2.4
kernel system. Our second algorithm is ineffective on our
2.6 system. Both of these channels scale well as password
length increases. We also present results for a 3rd channel:
the logon detection channel. This channel simply detects
whether a given character is in the password by determin-
ing whether an initial logon is successful or not. In other
words, a given character is remapped, prior to password en-
try, and the character is not in the password if and only if the
initial logon is successful. All attacks are performed using
only unprivileged processes.
The basic mechanism for our side channels leverages
the X Windows keyboard remapping capability (using the
xmodmap command). We can remap keys or a subset of
keys to a character that requires a longer time for X pro-
cessing. Thus if the password contains the remapped key,
then that will be detectable by an untrusted program based
on the additional processing time. The user will be un-
able to detect that the key has been remapped, since the
remapped key is not echoed to the terminal. However, if
the password contains a remapped key, then the password
will be invalid. The attacker must immediately remap the
keys back to the pre-existing conﬁguration so that the sec-
ond logon succeeds. If this attack occurs infrequently, then
it will not be detected by the user. Also, when the attack
only remaps keys not contained in the password, then those
runs will not cause login failures. This latter channel (the
logon detection channel), has the advantage that it does not
depend on the hardware cache and is also effective in the
absence of accurate clocks. Thus countermeasures aimed at
removing accurate clocks [3] or the hardware cache mecha-
nism for side channels [10, 17] will not effect this channel.
A limitation of the logon detection channel is that it does
not give information about which password characters are
in which positions; thus a follow-up guessing attack will re-
quire more time. It is unlikely to be effective against pass-
words longer than 9 characters, unless combined with some
other attack.
As an example of the remap timing channel, suppose the
attacker remaps the ’a’ key and the user password contains
one ’a’ as well as other characters. Then the attacker pro-
gram can time the X Windows processing for each password
character. The attacker will see that one character requires
a longer processing time and will conclude that this charac-
ter in the password is the ’a’ character. Both unprivileged
user and the root passwords can be targeted with these at-
tacks. This remap timing side channel is more efﬁcient than
the original Tenex ﬂaw attack, since it samples one or more
keys across multiple password characters during a single lo-
gon.
We have conducted experiments that validate these chan-
nels on the Linux operating system with X Windows. In
principle, these attacks can also be carried out on other op-
erating systems that support keyboard remapping, such as
the Windows operating system.
3646
1.3. Organization
The paper is organized as follows: Section 2 covers some
preliminaries including X Windows background. Section 3
overviews our remapping side channels. In Section 4, we
show that the remap timing channel exists and can be used
to determine passwords from an unprivileged process on
Linux 2.6. We also brieﬂy examine this channel on a sys-
tem with a different scheduler, Linux 2.4.
In Section 5,
we present the logon detection channel which leverages the
same remapping mechanism to identify password charac-
ters based on login failures. Section 6 covers guessing at-
tacks, as we do not have access to the password ﬁle. In Sec-
tion 7, we brieﬂy discuss countermeasures. In Section 8,
we brieﬂy discuss the impact of user input errors and other
issues. We conclude in Section 9.
2. Side Channels in X Windows
We now brieﬂy examine X Window keyboard input pro-
cessing. In the X Windows system, the X server process
receives mouse and keyboard input interrupts from the op-
erating system. The X server then sends these X events to
interested X clients which process the events. To enable
alternative keyboard layouts, the xmodmap utility allows
(unprivileged) users to remap the keyboard. Thus the map-
ping between keys and characters can be changed. There are
three mappings that occur between the time a key is pressed,
and the time a character is displayed on the screen in the X
Windows system [8]. They are as follows:
1. Physical keys to keycodes: This translation is X
server dependent, and client processes cannot detect
this. We will not mention it any further.
2. Keycodes to keysyms: This mapping can be modiﬁed
by the X clients themselves, but applies system wide.
As we will see, the remapping utility (xmodmap) en-
ables the side channels. The keysym is a logical entity
which carries the meaning of a keypress. Examples
of keysyms include XK Return and XK Space, which
represent the return key and the space bar respectively.
3. Keysyms to strings: A keysym itself contains no in-
formation about whether or not a character should be
displayed for a given keypress or how. It is up to the
client process to work with the X server to perform
the keysym to string mapping, where the string is zero
or more characters to be printed for a given keypress.
This translation is performed in the X client by the X
library function XLookupString. We noticed that the
XLookupString has two code paths for different types
of symbols. One path does translations for ascii char-
acters and the other for unicode characters. The path
for unicode characters is longer, but also importantly,
not leveraged for normal password characters. This
unicode code path in XLookupString will form the ba-
sis for our ﬁrst two timing channels.
The combination of our ability to remap the keycode to
keysym mapping in the X server and the presence of this
extended code path in XLookupString provides the basis for
a timing channel that an adversary could leverage. An un-
privileged process, under the control of an adversary, may
remap a keycode using xmodmap to a keysym that corre-
sponds to a unicode character, thus resulting in the execu-
tion of this extended code path. Further, since passwords
almost always consist of ascii characters only (at least in
the US), the execution of this code path will be infrequent,
so a signiﬁcant instruction cache impact will be likely.
As a result, if the adversary can setup the system to cause
such overheads and effectively measure the delays inherent
to such overheads, then the adversary can detect when a
victim pressed a key that has been remapped, enabling pre-
diction of the key. Designing and implementing an attack
approach that enables these functions is non-trivial as we
describe in the following section.
3. Remapping Side Channels
In this section, we overview remapping and its applica-
tion to side channels. At a high level, the adversary’s goal is
to learn information about characters in a secret string (e.g.,
password) by remapping some keys on the keyboard. De-
pending on the X client and channel, the adversary must de-
termine: (1) what is a remapping that will enable the execu-
tion of the extended code path in XLookupString, (2) when
to initially remap the keyboard (prior to password entry), (3)
how the measure the channel, (4) when to map the keyboard
back (after the password has been entered), (5) how to de-
termine the password from the measurements. These tasks
are challenging; remap and map back must occur at the right
times else the attack will fail or be discovered. Measuring
is also potentially challenging, depending on the channel.
For the remap timing channel, our strategy is to remap
a subset of keys to a character that requires a noticeably
longer time for X Windows processing. The third X Win-
dows mapping described above, keysyms to strings, is rele-
vant here. We remap the selected keys to the euro: 0x20ac
(hexadecimal), since the euro exercises the extended code
path described above (actually, the euro is deep in this
path). Also, the euro is unlikely to be a password character.
In addition, the ﬁrst time the unicode code path is taken
a signiﬁcant number of instruction cache misses result, fur-
ther increasing the processing time. Our experiments val-
idate this hypothesis; roughly 10000-20000 additional cy-
cles are needed to map the euro keysym the ﬁrst time.
3747
The 3rd X mapping occurs in the X client. Thus if
we are able to time the X client processing, then we will
likely notice whether the associated key has been remapped.
Our strategy is to run a timing process (with one or more
threads) both prior to the X client, and after the X client.
In the ﬁrst channel below (Linux 2.6), the timing process
is able to time both the X server and the X client separately
(see Figure 2). This results in accurate measurements, since
the X client processing duration is what we want to mea-
sure. In the second channel described below (Linux 2.4),
the timing process will time both the X server and the X
client (see Figure 1).
We call the other remapping channel mentioned above,
that detects whether logon is successful or not, the logon
detection channel. This channel is noiseless, and if used
alone, can narrow the password space to the set of charac-
ters contained in the password.
4. Remap Timing Channels
We present the remapping timing side channels in this
section. First, we describe an initial experiment with one
process that failed to detect the remapping channel. We
then performed a second, detailed timing experiment that
conﬁrmed the existence of the remapping channel. We ﬁnd
that the remapping channel is caused by a combination of
longer code path to process unicode and the overhead due
to instruction cache misses when this code path is taken.
In the third experiment, we show that a multi-threaded at-
tack process can successfully measure the remapping side
channel. The use of a multi-threaded attack process enables
us to maintain the scheduling priority of the attack process-
ing, so we can ensure that it runs directly prior to and after
the X client victim. Our attack depends on the Linux 2.6
scheduling algorithm. We examine the attack on Linux 2.4
to discuss the impact of a different scheduler.
The machine used for the Linux 2.6 experiments has
a Intel Pentium M-740 (1.73GHz) processor and runs
the Ubuntu 6.10 operating system (Linux Kernel version
2.6.17-11). Our 2.6 system is a wireless laptop.
We ran experiments using a generic X client that accepts
keyboard entry like a program for entering a password, such
as su, login, or the SSH client. It does not include all of
the display functions of screen locking programs, such as
xscreensaver, although the amount of display update
activity is not great when a password is being entered. Our
X client processes user keyboard events that are sent by the
X server. It works by enabling the user to type a string (e.g.,
a password), and it prints out the received character string
after receiving a return character.
Figure 1. Scheduler Timeline with One Timing
Process and X Windows Processing: a single
timing process follows both X server and X
client, resulting in noisy measurements.
initial (Linux 2.6) experiment used a single timing process
that detects and measures other process activity by sampling
a timer in a loop. Thus when the timing process detects a
large delay between consecutive timer samples, it can reli-
ably associate this duration with other process activity. As
discussed in Section 3, we remap one or more keys to the
euro keysym in order to detect the longer processing asso-
ciated with these keys.
For our experiment, we initially needed to match known
X processing events in the X client with the corresponding
observed process activity in the timing process. Without
this information, we would not know what types of process
activity durations to look for. This task was easily accom-
plished using timestamps in both the X client and the timing
process. (Note: in Section 4.3, where we perform the real
experiments against passwords, we do not use timestamps
in the X client. In other words, the X client is treated as a
ﬁxed program that cannot be modiﬁed by the adversary.) By
matching the timestamps, we could clearly associate the X