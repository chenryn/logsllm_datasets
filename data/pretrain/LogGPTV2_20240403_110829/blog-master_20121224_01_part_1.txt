## 执行计划选择算法 与 绑定变量 - PostgreSQL prepared statement: SPI_prepare, prepare|execute COMMAND, PL/pgsql STYLE: custom & generic plan cache     
### 作者                                         
digoal                                          
### 日期                                          
2012-12-24                                                                     
### 标签                                                                                                                                                          
PostgreSQL , 绑定变量 , 绑定执行计划 , custom scan , generic plan cache   
----                                          
## 背景                                  
prepare statement的目的是让同样的SQL(无参数)或者类似的SQL(有参数)仅需要一次parse analyse, 因此减少了parse analyse的次数.   
同时使用 prepare statement 还有一个功效是cache plan, 也就是说plan的次数也可以减少 .   
本文介绍一下PostgreSQL的几种prepare statement的方法, 仅供参考.  
首先是SPI, 如SPI_prepare, 语法如下 :   
```  
SPIPlanPtr SPI_prepare(const char * command, int nargs, Oid * argtypes)  
const char * command  
command string  
int nargs  
number of input parameters ($1, $2, etc.)  
Oid * argtypes  
pointer to an array containing the OIDs of the data types of the parameters  
```  
注意SPI_prepare返回结果类型为SPIPlanPtr(一个指针), 用于存储plan的数据.  
作为SPI_execute_plan或者SPI_execute_plan_with_paramlist 的参数传入 :   
因为SPI_prepare可以带参数(nargs,argtypes), 也可以不带参数. SPI_execute_plan建立generic plan 对带参数和不带参数的处理方式略有不同, 见下面的解释.  
1, 无参数的情况.  
```  
If no parameters are defined, a generic plan will be created at the first use of SPI_execute_plan, and used for all subsequent executions as well.   
```  
2, 有参数的情况.  
```  
If there are parameters, the first few uses of SPI_execute_plan will generate custom plans that are specific to the supplied parameter values.   
After enough uses of the same prepared statement, SPI_execute_plan will build a generic plan, and if that is not too much more expensive than the custom plans,   
it will start using the generic plan instead of re-planning each time.  
```  
另外就是使用如果使用prepared 游标, SPI_prepare_cursor, 可以指定flag. 如下 :   
```  
If this default behavior is unsuitable, you can alter it by passing the CURSOR_OPT_GENERIC_PLAN or CURSOR_OPT_CUSTOM_PLAN flag to SPI_prepare_cursor,   
to force use of generic or custom plans respectively.  
```  
这些flag来自src/include/nodes/parsenodes.h   
```  
/* ----------------------  
 *              Declare Cursor Statement  
 *  
 * Note: the "query" field of DeclareCursorStmt is only used in the raw grammar  
 * output.      After parse analysis it's set to null, and the Query points to the  
 * DeclareCursorStmt, not vice versa.  
 * ----------------------  
 */  
#define CURSOR_OPT_BINARY               0x0001  /* BINARY */  
#define CURSOR_OPT_SCROLL               0x0002  /* SCROLL explicitly given */  
#define CURSOR_OPT_NO_SCROLL    0x0004  /* NO SCROLL explicitly given */  
#define CURSOR_OPT_INSENSITIVE  0x0008  /* INSENSITIVE */  
#define CURSOR_OPT_HOLD                 0x0010  /* WITH HOLD */  
/* these planner-control flags do not correspond to any SQL grammar: */  
#define CURSOR_OPT_FAST_PLAN    0x0020  /* prefer fast-start plan */  
#define CURSOR_OPT_GENERIC_PLAN 0x0040  /* force use of generic plan */  
#define CURSOR_OPT_CUSTOM_PLAN  0x0080  /* force use of custom plan */  
SPI_prepare_cursor 用法 如下 :   
SPIPlanPtr SPI_prepare_cursor(const char * command, int nargs,  
                              Oid * argtypes, int cursorOptions)  
```  
PL/pgsql cache plan 实际上都是调用的SPI. 所以处理cache plan也分两种情况 (带参数和不带参数).  
例如如果以下SQL在PL/pgSQL中执行 :   
1\. select id,info from test where id=$1; 这属于带参数的SQL语句.  
所以SPI_prepare这条SQL, 当第一次用SPI_execute_plan执行后不会马上建立generic plan. 而需要有足够多次使用到同一个prepare statement后才会建立generic plan.   
2\. select id,info from test where id=1; 这属于不带参数的SQL语句.   
所以SPI_prepare这条SQL, 当第一次用SPI_execute_plan执行后将会建立generic plan.  
选择使用generic plan还是重新plan(custom plan), 用到这个函数 :   
src/backend/utils/cache/plancache.c  
```  
00840 /*  
00841  * choose_custom_plan: choose whether to use custom or generic plan  
00842  *  
00843  * This defines the policy followed by GetCachedPlan.  
00844  */  
00845 static bool  
00846 choose_custom_plan(CachedPlanSource *plansource, ParamListInfo boundParams)  
00847 {  
00848     double      avg_custom_cost;  
00849   
00850     /* Never any point in a custom plan if there's no parameters */  
00851     if (boundParams == NULL)  
00852         return false;  
00853   
00854     /* See if caller wants to force the decision */  
00855     if (plansource->cursor_options & CURSOR_OPT_GENERIC_PLAN)  
00856         return false;  
00857     if (plansource->cursor_options & CURSOR_OPT_CUSTOM_PLAN)  
00858         return true;  
00859   
00860     /* Generate custom plans until we have done at least 5 (arbitrary) */  
00861     if (plansource->num_custom_plans total_custom_cost / plansource->num_custom_plans;  
00865   
00866     /*  
00867      * Prefer generic plan if it's less than 10% more expensive than average  
00868      * custom plan.  This threshold is a bit arbitrary; it'd be better if we  
00869      * had some means of comparing planning time to the estimated runtime cost  
00870      * differential.  
00871      *  
00872      * Note that if generic_cost is -1 (indicating we've not yet determined  
00873      * the generic plan cost), we'll always prefer generic at this point.  
00874      */  
00875     if (plansource->generic_cost generic_cost  create table test(id int, info text);  
CREATE TABLE  
```  
测试数据 :   
```  
digoal=> insert into test select 1,repeat(random()::text,10) from generate_series(1,500000);  
INSERT 0 500000  
digoal=> insert into test values (2,'test');  
INSERT 0 1  
digoal=> select id,count(*) from test group by id;  
 id | count    
----+--------  
  1 | 500000  
  2 |      1  
(2 rows)  
```  
索引 :   
```  
digoal=> create index idx_test_1 on test(id);  
CREATE INDEX  
```  
接下来使用PL/pgsql 的cache plan情况测试 :   
PL/pgSQL的cache plan用法细节参见http://www.postgresql.org/docs/9.2/static/plpgsql-implementation.html  
创建函数 :   
```  
CREATE OR REPLACE FUNCTION digoal.f_immutable(i_id integer)  
 RETURNS bigint  
 LANGUAGE plpgsql  
 STRICT IMMUTABLE  
AS $function$  
declare  
  result bigint;  
begin  
  select count(*) into result from digoal.test where id=i_id;  
  return result;  
end;  
$function$;  
```  
测试 :   
```  
digoal=> \timing  
Timing is on.  
```  
注意这些SQL的执行耗时. 很明显的区分索引扫描和全表扫描.  
使用PL/pgsql 封装的 prepared statement 在第一次执行后SPI_execute_plan并没有马上产生 generic plan.  
```  
digoal=> select * from f_immutable(1);  
 f_immutable   
-------------  
      500000  
(1 row)  
Time: 148.080 ms  
```  
因此第二次执行f_immutable(2) 依然进行了plan ,  也就是用了custom plan.   
因为1走了全表扫描, 2走了索引扫描.  
```  
digoal=> select * from f_immutable(2);  
 f_immutable   
-------------  
           1  
(1 row)  
Time: 0.736 ms  
```  
执行计划如下 :   
```  
digoal=> explain analyze select count(*) from test where id=1;  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=245.336..245.336 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=0.012..166.642 rows=500000 loops=1)  
         Filter: (id = 1)  
         Rows Removed by Filter: 1  
 Total runtime: 245.384 ms  
(5 rows)  
Time: 246.075 ms  
digoal=> explain analyze select count(*) from test where id=2;  
                                                         QUERY PLAN                                                           
----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=1.41..1.42 rows=1 width=0) (actual time=0.031..0.031 rows=1 loops=1)  
   ->  Index Only Scan using idx_test_1 on test  (cost=0.00..1.40 rows=1 width=0) (actual time=0.023..0.024 rows=1 loops=1)  
         Index Cond: (id = 2)  
         Heap Fetches: 1  
 Total runtime: 0.083 ms  
(5 rows)  
Time: 0.772 ms  
```  
那么如SPI_prepare所述, 同一个prepare statement被SPI_execute_plan多次使用后, 将会生成generic plan.  
所以接下来我多次(这里选择5次) 调用 select * from f_immutable(1);  
根据前面提到的choose_custom_plan函数, 5次后将会进入plansource->generic_cost  \timing  
Timing is on.  
digoal=> select * from f_immutable(1);  
 f_immutable   
-------------  
      500000  
(1 row)  
Time: 242.742 ms  
digoal=> select * from f_immutable(1);  
 f_immutable   
-------------  
      500000  
(1 row)  
Time: 179.910 ms  
digoal=> select * from f_immutable(1);  
 f_immutable   
-------------  
      500000  
(1 row)  
Time: 180.052 ms  
digoal=> select * from f_immutable(1);  
 f_immutable   
-------------  
      500000  
(1 row)  
Time: 180.027 ms  
digoal=> select * from f_immutable(1);  
 f_immutable   
-------------  
      500000  
(1 row)  
Time: 179.758 ms  
```  
经过以上5次调用select * from f_immutable(1);后,   
所以下面把参数改成2, 也不走索引扫描了. 执行时间139毫秒.  
```  
digoal=> select * from f_immutable(2);  
 f_immutable   
-------------  
           1  
(1 row)  
Time: 139.941 ms  
digoal=> select * from f_immutable(2);  
 f_immutable   
-------------  
           1  
(1 row)  
Time: 139.994 ms  
```  
将函数的strict改成stable和volatile测试的结果与上面一致, 因为和函数的volatile无关.  
```  
digoal=> alter function f_immutable(int) strict volatile;  
ALTER FUNCTION  
Time: 0.490 ms  
digoal=> alter function f_immutable(int) strict stable;  
ALTER FUNCTION  
Time: 0.451 ms  
```  
测试结果略.  
接下来使用prepare SQL COMMAND进行测试 :   
结果和PL/pgsql一致.  
```  
digoal=> \timing  
Timing is on.  
digoal=> prepare p_test(int) as select count(*) from test where id=$1;  
PREPARE  
Time: 1.154 ms  
digoal=> explain analyze execute p_test(1);  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=298.463..298.463 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=0.034..220.116 rows=500000 loops=1)  
         Filter: (id = 1)  
         Rows Removed by Filter: 1  
 Total runtime: 298.580 ms  
(5 rows)  
Time: 299.951 ms  
digoal=> explain analyze execute p_test(1);  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=243.990..243.990 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=0.012..166.291 rows=500000 loops=1)  
         Filter: (id = 1)  
         Rows Removed by Filter: 1  
 Total runtime: 244.040 ms  
(5 rows)  
Time: 244.800 ms  
digoal=> explain analyze execute p_test(1);  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=20637.01..20637.02 rows=1 width=0) (actual time=244.184..244.184 rows=1 loops=1)  
   ->  Seq Scan on test  (cost=0.00..19387.01 rows=500001 width=0) (actual time=0.012..166.416 rows=500000 loops=1)  
         Filter: (id = 1)  
         Rows Removed by Filter: 1  
 Total runtime: 244.235 ms  
(5 rows)  