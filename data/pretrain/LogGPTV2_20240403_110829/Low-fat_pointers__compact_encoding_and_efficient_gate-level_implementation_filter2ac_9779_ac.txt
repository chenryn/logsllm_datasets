roundup the operations on the fat pointers (Sec. 4.8). Fi-
nally, we show the datapaths to support the fat-pointer op-
erations and quantify their area and delay (Secs. 4.9–4.10).
4.1 Aligned Encoding
Keeping track of base and bound potentially requires three
pointers. To get a more compact fat-pointer representation,
let us ﬁrst assume that the size of the segment the pointer
is referencing is a power of two (i.e., 2B for some B). Fur-
thermore, assume that the pointer is aligned on the same
power of two boundary. Then the base of the pointer can
be determined by replacing B bits in the LSB with 0’s:
base = A − (A & ((1 > B)[5 : 0] > B)[5 : 0] > M ?
(carry | Mshift) − Atop :
Mshift − Atop
(2)
(3)
(4)
It is not as simple as a deposit because the bits above
the I or M bits in the word may need to be incremented.
Nonetheless, this is easy to detect and accommodate. There
are two possible cases for this scheme: the pointer has not
incurred any carries in the A ﬁeld beyond |I| + B bits or it
has. When there have been no carries beyond the bottom
|I| + B bits, the relevant bits that determined I and M have
725not changed. Therefore, the |I| bits above the B bits will
be greater than or equal to I and less than or equal to M .
In this case we can compute the distance to underﬂow and
overﬂow, Dunder and Dover, by doing a |I| + B subtraction
using the bottom bits of A and the base and bound com-
puted from simple shifts. When there is a carry, however, I
could be larger than the corresponding bits in A and vice-
versa for M . We can resolve this issue by adding one bit to
the MSB of the smaller quantity (i.e., add 2|I|+B). Eqs. 3
and 4 show the computation required.
To ﬁt the encoding into one 64-bit word, we must use
some of the bits to encode B, I, and M . For example, if we
allocate 6 bits to each, that leaves us with 46b to specify the
address. Since we use word addressing of 64b words, this
is comparable (249=512TB) to the 40b byte addresses [26]
(1TB) or 48b byte addresses (256TB) [4] currently supported
by x86-64 architectures.
4.3 Out-of-Bounds
One consequence of the compact representation is that we
cannot represent a pointer that points to an address that is
not bounded by the base and bounds. Consequently, when-
ever a pointer is computed that violates its bounds, we rep-
resent it with a diﬀerent hardware type, the Out-of-Bounds-
Pointer. Producing an out-of-bounds pointer, itself, is not
an error. It is common to increment a pointer until it ex-
ceeds the bound. The error only occurs when we attempt
to use the Out-of-Bounds-Pointer as the address in a load
or store operation. As a result, there is no bounds check
at the time of the load, only a Hardware Type Unit check
that the type of the word used as an address is still a valid,
in-bounds pointer. This means that addp eﬀectively both
computes the new pointer and checks bounds. Note here
that once a pointer goes out of bounds, it is permanently
marked as an error. Any further updates on the pointer will
not change the type back to Pointer.
4.4 Option to Enforce Exact Bounds
The ﬂoating-point size representation results in an approx-
imate bound, meaning that there can be size mismatches
between the pointer and the object. The segment thus will
have some words that extend beyond the end of the ob-
ject that will be unused and accessing these words will not
be considered a violation on the basis of the compact fat-
pointer bounds alone. Nonetheless, these extra words are
not part of any other segment, so writes through pointers
will never write into a diﬀerent segment.
In systems, such as SAFElite, where type rules and for-
warding pointers demand that we read every word before
writing it, we can enforce exact bounds for all pointers by
ﬁlling the extra words with type Out-of-Bounds-Memory-
Location. When the processor performs a memory opera-
tion with a pointer within the fat-pointer bounds but reads
an Out-of-Bounds-Memory-Location type, the hardware will
ﬂag the same error as an out-of-bounds pointer. In both of
the cases of spatial violation, the processor will trap to a
software handler that will resolve the error. This abstraction
allows user-level applications to treat both kinds of out-of-
bounds references in the same way.
4.5 Fragmentation
The BIMA encoding provides a better ﬁt between the ob-
ject and the segment than the exponential alignment and
Pointer 1
Pointer 2
0 1 2 3 4
5 6 7
8
9
10
11
12
13 14 15
Unused
Figure 4: Example of external fragmentation
sizing (Sec. 4.1), but the approximate nature of the ﬂoating-
point size representation also forces us to over-allocate mem-
ory to objects as noted above. Any object of size larger than
2|I| may result in allocation of a segment larger than the ob-
ject. Segments of odd size larger than 2|I|, for instance, will
be collections of blocks of even size, and thus there would
be at least one word that is wasted.
To compute the impact of the internal fragmentation, we
note that maximizing (M − I) and minimizing B will result
in smaller internal fragmentation. The pointer will never
be more than one 2B block larger than the object. Thus,
if we ensurethat the allocator will always use the largest
(M − I) and smallest B possible, the memory loss from
internal fragmentation is less than 1/2|I|.
The encoding also speciﬁes that blocks of size 2B must be
aligned, and the alignment could cause external fragmenta-
tion. In particular, with the simple allocation scheme that
assigns blocks of memory in the order of the requests, we
could have a large object following a small object. In this
case, the smaller object could be using some words in the
segment that would have been in the ﬁrst block of the larger
object. This forces the larger object to be aligned on the
next boundary of 2B, thus wasting nearly a whole block.
For example, in Fig. 4, Pointer 1 is of size 5, and has B = 0.
For the sake of illustration, assume |I| = 2. Pointer 2 is
of size 8, and B = 2. Because Pointer 1 uses address 4,
Pointer 2 must be aligned on the next 22 boundary, result-
ing in addresses 5, 6, and 7 being unused. Nevertheless,
this can only waste at most one 2B block. External frag-
mentation can therefore result in memory loss of at most
1/2|I| of the allocated memory. Internal and external frag-
mentation together waste less than 1/2|I|−1 of memory. If
we choose |I| = 6, the maximum fraction of memory lost to
fragmentation is 3%. The external fragmentation could be
reduced with a more sophisticated allocator that kept track
of fragments and avoided placing small blocks on larger block
alignment boundaries whenever possible. Nonetheless, the
observation above shows that this is not absolutely neces-
sary: such sophisticated alignment would at most eliminate
worst-case external fragmentation and thereby only cut to-
tal fragmentation in half. Furthermore, note that the length
of objects whose size is less than 2|I| are always represented
exactly; therefore, for small objects there is no loss due to
fragmentation.
4.6 Decoded Bounds
The BIMA encoding demands that we decode the bounds
in order to perform checks. We can avoid the delay as-
sociated with decoding bounds by storing decoded bounds
(Dunder, Dover) along with the pointer in the register ﬁle.
Whenever the processor loads a pointer, the processor also
computes the underﬂow and overﬂow distances in prepara-
tion for any necessary pointer computation. This does re-
sult in a larger register ﬁle from storing the distance values.
However, as we will see in Sec. 4.9, it increases performance
signiﬁcantly with low overhead in area. Furthermore, since
726the decoded pointers are only stored in the register ﬁle, there
is no overhead in the memory.
4.7 C Compatibility
For C compatibility, it is necessary to represent Out-of-
Bounds pointers that are one element past the end of the
array. In cases where the pointer size is larger than the allo-
cated object, as discussed in Sec. 4.4, our scheme already ac-
commodates the C-style Out-of-Bounds pointers. As long as
no reference is made to the Out-of-Bounds-Memory-Location,
no error is ﬂagged. If the pointer is subsequently modiﬁed so
that it comes back in bounds, it can be used. For cases where
the pointer size is exact, our scheme as described would not
allow the pointer to be advanced to one past the end of the
array and then recovered as a pointer. The simplest way to
support this feature would be to allocate a pointer that is at
least one word longer and ﬁll the memory location past the
real end of the object with Out-of-Bounds-Memory-Location
as described in the previous section. Note that this, retains
the same worst-case 3% fragmentation overhead we establish
in Sec. 4.5 beyond the object-size+1 allocation made.
A slight modiﬁcation to the scheme would avoid paying
for any extra memory locations. With our Dunder, Dover
scheme (Sec. 4.6) we could allow Dover to become negative
and then check the sign of Dover on a memory operation.
As long as the pointer is returned to in-bounds before a
memory reference is made, no error is ﬂagged. To handle
the case of a one-element-over Out-of-Bounds being written
to memory, we could add a distinguished C-Out-of-Bounds-
by-One pointer type and convert to this pointer type at the
point of writeback to memory. This feature is not included
in the detailed evaluation that follows; we believe it would
add area but not impact cycle time.
With suitable compiler and linker support, Nagarakatte
reports that bounds can be applied to most legacy C pro-
grams without source code changes [30].
4.8 Operation
We now roundup the pointer-related operations that must
be performed with the BIMA encoding.
4.8.1
newp
The MM subsystem uses a privileged instruction newp to
create new fat pointers. Typically, these would be allocated
out of an available block of memory (e.g. NewSpace or Copy-
Space in a Garbage Collection scheme). newp can be used
to decompose a large, unallocated segment into a collection
of allocated segments.
4.8.2
offsetp
The offsetp instruction returns the oﬀset of the pointer
from its base. This is simply the Dunder value in the register
ﬁle, so requires no computation. Iterators can use the oﬀset
to identify the end of an array when the approximate bound
(Sec. 4.2) makes the segment larger than the live data.
4.8.3
addp
Pointer arithmetic in SAFElite is done via an instruction
called addp. The addp instruction is a three-operand (two
sources, one destination) instruction where one source is the
pointer we are changing, and the other is the oﬀset.
In
BIMA, when we read the pointer to add the oﬀset, we read
the Dunder and Dover associated with the pointer as well.
We then add the oﬀset to Dunder to indicate that distance to
underﬂow has changed by the oﬀset. Similarly, we subtract
the oﬀset from Dover. The pointer is within bounds as long
as both distances are non-negative since neither underﬂow
or overﬂow has happened.
If either distance is negative,
we replace the hardware type of the pointer with Out-of-
Bounds-Pointer.
4.8.4
sw
SAFElite has a two-operand store instruction, sw. Like
many RISC architectures, there is a direct path from the
register ﬁle to the memory. In the SAFElite, however, we
check the type of the pointer in parallel with the memory
access (see Fig. 2). As described before, if the address ﬁeld is
out of bounds, then the type of the pointer will be changed
to an Out-of-Bounds-Pointer. Therefore if the word we are
using as an address to store is an Out-of-Bounds-Pointer,
we ﬂag an out-of-bounds error. Otherwise, the operation is
carried out as with any other processors.
When we are storing a pointer to memory, note the pro-
cessor can just store the 64b BIMA pointer and ignore the
decoded bounds Dunder and Dover. They are redundant in-
formation and can be recomputed when loading the pointer
back from the memory using the lw operation.
4.8.5
lw
SAFElite also has a load operation lw that is a one-source,
one-destination instruction. On a lw, there are potentially
two pointers that we need to check: the pointer we are us-
ing as the source, and the loaded value from memory that
could be a pointer. The fat-pointer computation for the ﬁrst
pointer behaves the same as the store case: we check if the
pointer is out of bounds, indicated by the Out-of-Bounds-
Pointer type on the pointer.
The fat-pointer decode computation is unique to lw. The
loaded value could be a pointer as well, and for future bounds
checks from the loaded pointer, we need to determine its
Dunder and Dover. Therefore, we must decode the pointer
before it is stored in the register ﬁle (See Fig. 6a).
4.8.6 Conventional Processor Equivalent
For the sake of comparison, Tab. 1 shows roughly the in-
structions required to simulate these operations on a RISC
processor with no hardware support for fat pointers. Tab. 1
omits offsetp since it is not needed when using full 64b
pointers to represent base and bound and newp since it is
dominated by other instructions for allocation. Compiler
analysis and support will often be able to remove some of
the bounds checks and data movement (e.g. [32]).
4.9
Implementation