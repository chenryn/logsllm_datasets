else
▶ node is a leaf, and 𝑅 ∩ 𝑆 = ∅
▶ checks if
if Remainder(node, C) ⊆ 𝑆 then
return {𝑅 − nonmatches} ▶ returns {𝑅 − 𝑋1 − 𝑋2 . . . 𝑋𝑚 }
nonmatches ←𝑘∈𝐶 GetMatch(¬ 𝑆, k)
return𝑘∈𝐶 GetMatch(𝑆, k) ▶ returns {𝑋1, 𝑋2 . . . 𝑋𝑛 }
10
11
12
13
3.3 StructuralDiff
It would be possible to use a semantic approach like SemanticDiff
to reason about all configuration components, just as we do for route
maps and ACLs. However, we observe that other configuration
components typically have a very stylized structure, as a single
atomic value (e.g., integer or boolean) or a simple collection of such
values. Hence, when considered modularly, the equivalence of two
such components is tied to their structure.
That is, two components are behaviorally equivalent, for all
possible configurations, if and only if their structural representation
is identical. Thus we can use a simple structural check without
incurring additional false positives versus a semantic approach.
Since the structural approach does not require logical modeling, it
is more efficient. Further, localization is trivial since the structural
check directly identifies the portions of the two components that
differ.
Our StructuralDiff function implements this approach. All
components are represented as atomic values, tuples, or unordered
sets. Atomic values are tested for equality. Tuples are compared
by testing that the corresponding values are equal. Finally, sets are
compared using set difference.
For example, to check two OSPF configurations are equivalent
(excluding route redistribution which is handled by SemanticD-
iff), it suffices to check equivalence for all corresponding attributes
on all corresponding links. That means both routers must have
OSPF edges to the same peers, and the corresponding edges are
configured with the same costs, areas, passive status, etc. We can
think of the configuration of each OSPF link as a tuple of its config-
ured attributes and check each corresponding attribute. The same
approach works for BGP properties not implemented with route
maps, such as which edges are to route reflector clients and whether
communities are propagated.
Other components that affect routing include connected and
static routes. Connected routes are formed by the set of subnets
connected to the router’s interfaces, and the difference between
routers is the set of such subnets present in one router but not the
other. Similarly, a single static route can be represented as a tuple
consisting of a destination prefix, a next-hop, an administrative
distance, and optional fields like tags; so the difference is the set
of tuples present in one router but not the other. Administrative
distances can also be compared as values configured per protocol.
As mentioned earlier, localization for these components is
straightforward because the equivalence check is performed di-
rectly on the components’ structures. Further, unlike route maps
and ACLs, these components have no explicit notion of input. Hence
there is no need for, or analogue to, HeaderLocalize for such dif-
ferences.
3.4 Debugging an Entire Router
We now formalize our approach to checking full router equivalence.
We observe that many crucial parts of routing, such as the route
selection process, are fixed. They are implemented according to a
standard and depend only on the provided inputs and configura-
tions. All of the various processes in Figure 4 need to be modeled to
754
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Tang et al.
fully simulate a router or network, but only the configured aspects
(shown in brown) need to be modeled to find behavioral differences.
Figure 4 provides a flow diagram illustrating the processes sup-
ported by Campion. For routing, there is both a BGP process (top
of figure) and an OSPF process (middle of figure), as these are the
most common inter-domain and intra-domain routing protocols;
other protocols could be added similarly. The bottom of the figure
shows the router’s process for forwarding routes. The brown (un-
marked) nodes represent parts of the router configuration, while
the other components are fixed processes like routing protocols
(in blue (✓)), or input routes and packets (in yellow (incoming
)
), or outputs and byproducts like selected routes and forwarded
packets (in green (outgoing
)).
Assuming that these are the only routing components used in
the configurations being compared, then Campion is a sound ver-
ifier for router configuration equivalence: If Campion identifies
no differences, then the two router configurations are behaviorally
equivalent. We formalize the fact that behavioral equivalence can
be verified without reasoning about the routing protocols as follows
(our formalization considers behavioral equivalence of entire net-
works, but it therefore also applies to the special case of individual
routers).
Definition 3.1. A network N = (𝑇 , R, CP, FP, ⪯P) is a topology
T = (V, E) of vertices and edges, a set of routes R, a family of
configuration functions CP : E → Ω that maps each edge in
the topology to a configuration Ω, a family of transfer functions
FP : Ω × E × R → R that transforms a route along an edge
for a protocol, and a protocol preference relation ⪯P: R × R that
compares two routes for a protocol.
Definition 3.2. For two networks N = (𝑇 , R, CP, FP, ⪯P) and
N∗ = (𝑇∗, R, C∗
P, ⪯P) and an isomorphism I between T
and T ∗, we say that the two networks are locally equivalent if
for all protocols 𝑝 ∈ P, edges 𝑒 ∈ E, and routes 𝑟 ∈ R then
F𝑝(C𝑝(𝑒), 𝑒, 𝑟) = F ∗
𝑝 (𝐼(𝑒)), 𝐼(𝑒), 𝑟).
Theorem 3.3 (Soundness). If networks N and N∗ are locally
equivalent for isomorphism I, then they have the same set of routing
solutions.
P, F ∗
𝑝 (C∗
Proof. The proof is by a reduction to the stable routing prob-
□
lem [4] and is described in the appendix.
4 Implementation and Limitations
Campion operates on a vendor-independent representation pro-
duced by Batfish [12]. Real routers support an enormous number
of features. For Campion, we have focused on the most common
components used for routing and forwarding. Campion currently
supports all of the configuration components and features that
are supported by Minesweeper (Table 1). This includes common
features of BGP route maps, like communities, local preference,
and MEDs, as well as other configurable aspects of BGP like route
redistribution. It also includes configurable OSPF attributes like
link cost and areas, static routes, and ACLs. Sets of packets and
route advertisements are represented by BDDs that are handled
with the JavaBDD library, extending code from Bonsai [4] used to
encode import filters, output filters, and ACLs.
As mentioned in the previous section, it is sometimes necessary
to match up corresponding components between two routers. We
755
used a few simple heuristics instead of manually specifying match-
ing components. For BGP properties and route maps, we match up
connections with the same neighbor id, and we report the neighbors
that occur in one router but not the other. We match ACLs with
the same name. For OSPF attributes, we match interfaces using a
combination of their interface names, Batfish’s inferred topology,
and their IP address masks. This is necessary since interfaces in
backup routers usually have different IP addresses. While these
heuristics are not perfect, they allow Campion to be run quickly
and easily.
Campion can identify differences and perform header localiza-
tion for any vendor format that Batfish supports. However, cur-
rently Campion can only output exact text lines for configurations
in Cisco IOS and Juniper JunOS formats, since we must write un-
parsers to convert Batfish’s representation back to the original
configuration text. For other formats, Campion does not produce
exact text lines, but it still provides substantial localization informa-
tion, including the component name, affected headers, and actions.
Similarly, for some formats we do not show the exact text lines
for StructuralDiff results, for example OSPF costs. But in these
cases the localization information that Campion provides typically
allows operators to find the relevant lines with simple text searches.
HeaderLocalize for route maps currently only provides exhaus-
tive information for IP prefix ranges. For other relevant parts of a
route advertisement such as community tags, Campion provides a
single example. It is possible to extend HeaderLocalize to provide
exhaustive information across multiple parts of a route advertise-
ment, but doing so increases the complexity both of the algorithm
and of its output. The current approach has been sufficient for
operators to understand Campion’s results and localize the errors.
5 Evaluation
We applied Campion to debug router configuration differences
from a large cloud provider and the campus network of a large uni-
versity, both of which employ a diversity of hardware router ven-
dors. Our experiments demonstrate Campion’s ability to identify
cross-vendor configuration differences and to provide actionable
localization information to operators.
5.1 Differencing in a large Data Center
Network 𝐴 is from a global cloud vendor that uses routers from
different manufacturers. We tested Campion on a data center net-
work from vendor 𝐴 that employs a Clos topology with hundreds
of routers and thousands of servers. All routers are either Juniper
or Cisco, whose configuration languages are supported by Cam-
pion. The data center network uses eBGP, iBGP, OSPF, static routes,
ACLs, and route redistribution for the layer-3 routing topology.
It carries business traffic for multiple global services. Each router
configuration is thousands of lines.
Scenarios. We asked the network operators to employ Campion
on three frequent, real and challenging tasks:
Scenario 1: Debugging redundant routers. Some routers (e.g., Top-
of-Rack) are configured to be backups of one another with equiv-
alent modular policies handling BGP, OSPF and static routes. For
diversity, the operators deploy redundant routers from different
vendors (e.g., Juniper, Cisco). Because network 𝐴 took months to
build, its current configuration comprises fragments written by
Campion: Debugging Router Configuration Differences
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Scenario
Component
Structural or Semantic Differences
Scenario 1
Scenario 2
Scenario 3
BGP
Static Routes
BGP
ACLs
Semantic
Structural
Semantic
Semantic
5
2
4
3
Table 6: Data Center Network Results
different operators for diverse purposes, making hidden inconsis-
tencies likely. It is important to not only ensure equivalence of
multi-vendor, redundant routers, but also to quickly localize the
root causes of any errors. Network 𝐴 is constantly being reconfig-
ured as more policies are added for upcoming production traffic.
Campion allows greater agility by allowing new policies to be more
quickly deployed in diverse backup routers. The operators used
Campion to compare all pairs of backup routers.
Scenario 2: Router replacement. Network 𝐴 has an important up-
date called router replacement, where operators replace a router from
one vendor with one from a different vendor. Such replacements
occur several times a month to take advantage of the price, perfor-
mance, and newer features. For example, the operators of network
𝐴 might replace lower-version Cisco routers with higher-version
Juniper routers in order to avoid a Cisco bug. Router replacement is
one of the riskiest update operations in network 𝐴, since operators
must manually rewrite the old configurations to the new format;
many critical errors have occurred as a result. The operators used
Campion to check for differences between old and new configu-
rations before performing a scheduled replacement, in order to
proactively detect errors.
Scenario 3: Access control in gateway routers. In network 𝐴, many
ACL rules are applied in gateway routers for traffic control. All of
network A’s gateway routers should have identical access-control
policies, but it is difficult for network A’s operators to guarantee
this since: (1) the number of ACL rules is very large, and (2) the use
of nested ACL rules makes their logic complex. The operators used
Campion to check the equivalence of ACL rules in the gateway
routers of the data center network.
Output evaluation. Note that network 𝐴’s operators used Cam-
pion and its user interface without any feedback or help from us in
interpreting results. The operators gave us very positive feedback on
the practicality and usability of Campion. By using Campion, they
found several risky, hidden configuration errors, as summarized in
Table 6. All differences that Campion found were unintentional and
considered to be errors by the operators. The network configura-
tions had recently undergone a standardization process to replace
ambiguous and “uncommonly-used” configuration commands with
unambiguous and standard ones. Hence any differences found by
Campion were likely to be erroneous, and indeed this was borne
out by the lack of any false positives.
Scenario 1: Debugging redundant routers. Campion detected seven
configuration bugs across all of the redundant router pairs that it
analyzed. Five of the bugs represent missing fragments of BGP
policy, and two of them were incorrect next hops in static routes.
For four BGP bugs, Campion was able to accurately localize the
756
difference. For example, Campion pointed out that a prefix for
an import filter was missing in the primary router but present in
the backup one. Why were these bugs not detected by customers
or real-time monitoring systems? This was because the missing
prefixes had not been used for production traffic yet, but would
have been in the near future. Once a service using this prefix is
enabled, a service problem would have occurred. Thus, Campion
proactively prevented a future service disruption.
The fifth BGP error that Campion detected used a version of
the Cisco IOS format which Campion does not fully support yet.
Campion still detected the error and produced useful localization
information, such as the relevant input space and the actions taken
by each router, but the output configuration text was inaccurate.
Due to this inaccuracy, the operator reported the need to spend
more time to understand the precise bug location, but they still
said that it was easy to spot the deviant configuration lines from
Campion’s output.
The two static route errors Campion detected were misconfig-
ured next hops. Backup routers in network 𝐴 should forward the
same prefix to the same next hop, but Campion detected that they
were configured to forward a particular prefix 𝑝 to different next
hops. This is very dangerous: a cascading failure would have trig-
gered when the production traffic corresponding to 𝑝 is turned on
in the near future. Campion accurately pointed out non-equivalent
next hops of this kind in two pairs of backup routers.
Scenario 2: Router replacement. We used Campion to test more
than 30 router replacements. Campion successfully detected four
bugs: one was an incorrect community number and three were
incorrect local preferences. One local preference bug was for the
replacement of a reflector device for iBGP. If this bug were not