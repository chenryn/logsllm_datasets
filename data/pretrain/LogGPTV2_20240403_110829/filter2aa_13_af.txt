注意：可以用debug方式启动应用（am start-D-n…）。特别在反编译调试应用的时候，可能需要用debug方式启动应用。
7.am startservice
说明：启动一个服务。
用法：am startservice-n[包（package）名]/[包名].[服务（service）名]
案例：
和上面命令类似，启动服务。
8.am broadcast
说明：发送一个广播。
用法：am broadcast-a[广播动作]
案例：
和上面的命令类似，发送一个广播。有时候定义了一个广播，可能需要测试，就可以借助这个功能模拟发送一个广播。
9.netcfg
说明：查看设备的ip地址。
用法：netcfg
有时候想查看设备的ip地址，去设置页面太费劲了，可以直接用这个命令即可：
10.netstat
说明：查看设备的端口号信息。
用法：netstat
有时候想查看设备的端口号信息，这个命令也是非常重要的，例如：
11.app_process
说明：运行Java代码。
用法：app_process[运行代码目录][运行主类]
案例：
这个命令主要用于Android中一些特殊开发场景中，想启动一个jar包，不过这个jar包有要求：需要dx命令把dex文件转化成jar包功能，实际上它不是一个正常的jar包了，而是一个包含了classes.dex文件的压缩文件了。
12.dalvikvm
说明：运行一个dex文件。
用法：dalvikvm-cp[dex文件][运行主类]
案例：
有时候为了测试一个dex文件功能可以用到这个命令，与上面的命令有很大相似之处，只是运行的文件不一样。
13.top
说明：查看当前应用的CPU消耗信息。
用法：top[-n/-m/-d/-s/-t]
-m//最多显示多少个进程
-n//刷新次数
-d//刷新间隔时间（默认5秒）
-s//按哪列排序
-t//显示线程信息而不是进程
案例：
这个命令在分析应用性能的时候非常有用，可以用grep过滤想要分析的应用信息，查看它的当前CPU使用率。
14.getprop
说明：查看系统属性值。
用法：getprop[属性值名称]
案例：
这个命令可以查看设备的信息，比如设备版本号、系统属性等，后面章节会介绍在root设备之后，还可以去修改这些系统属性。比如debug开关，让所有的应用都处于可调试状态。
3.4 操作apk命令
有两个命令可直接获取apk的信息，下面分别介绍。
1.用aapt操作apk命令
说明：查看apk中的信息以及编辑apk程序包。
用法：aapt dump xmltree[apk包][需要查看的资源文件xml]
案例：
依然用重定向把输出信息保存到文件中，然后再打开查看，可以看到非常详细的apk清单文件了。所以有时候想查看一个apk中的清单文件，也没必要进行复杂的反编译工作。
2.用dexdump操作dex命令
说明：可以查看一个dex文件的详细信息。
用法：dexdump[dex文件路径]
案例：
这个命令用于查看apk中dex文件的详细信息，有时候也没必要反编译，可以直接用这个命令即可。
3.5 进程命令
这里介绍用cat命令查看当前应用进程的信息，在逆向中可能用得到。
1.查看当前进程的内存加载情况
可以使用如命令
查看当前进程的内存映射信息，比如加载了哪些so文件，dex文件等：
2.查看进程的状态信息
可以利用如下命令
查看当前进程的状态信息，比如熟知的TracerPid：
3.查看当前应用使用的端口号信息
可以使用如下命令
获取当前应用使用到的端口号信息：
注意：上面介绍的shell命令也可以在手机中直接运行，需要去下载一个“终端模拟器”应用，直接在里面输入这些shell命令即可，这样不用电脑就可以进行操作了。
3.6 本章小结
本章分析了Android开发和逆向中常用的一些命令，这些命令对于后续操作起到非常高效的助推作用。当然还有其他命令，只是没有那么好用，也就没有介绍了。
第4章 so文件格式解析
本章详细介绍so文件的内容，so文件的格式解析非常重要，不仅对Android中的底层开发非常有用，而且对Android的安全更重要。在这个内容基础之上，后面的章节中会进一步介绍如何对so文件进行加密做到应用的安全防护，以及逆向分析应用的so代码逻辑。
4.1 ELF文件格式
Android中的so文件就是ELF文件，所以要了解so文件，必须先来了解一下ELF文件的格式。如何详细了解ELF文件？最好的方法就是手动写一个工具类来解析一个ELF文件。ELF文件格式见图4-1。
图4-1 ELF文件格式（见书后彩图，图片由@非虫授权）
这张图已经很详细了，后面用Java代码来解析ELF文件的时候，就是按照这张图来进行的。
4.2 解析工具
这里还需要介绍一个工具readelf，因为这个工具在解析ELF文件的时候也非常有用，而且是检查解析ELF文件的模板。不过Window下这个命令不能用，因为这个命令是Linux的，所以还得做个工作，就是安装Cygwin。
提示：Cygwin下载地址：http://pan.baidu.com/s/1C1Zci
下载Cygwin之后，需要改一个东西才能用，如图4-2所示。
图4-2 下载Cygwin工具
改一下这个文件：
将路径要改成你本地cygwin64中的bin目录的路径，不然运行错误。改好之后，直接运行Cygwin.bat就可以了。
关于readelf工具我们这里不做太详细的介绍，只介绍本章要用到的命令。
1.readelf-h xxx.so
查看so文件的头部信息，如下所示：
2.readelf-S xxx.so
查看so文件的节（Section）头的信息，如下所示：
3.readelf-l xxx.so
查看so文件的程序段头信息（Program），如下所示：
4.readelf-a xxx.so
查看so文件的全部内容，如下所示：
还有很多命令及用法，这里就不细讲了。
4.3 解析ELF文件
上面介绍了ELF文件格式资料、解析ELF文件的工具，下面就来实际操作一下，用Java代码动手解析一个libhello-jni.so文件。这个libhello-jni.so文件可以下载。
提示：libhello-jni.so下载地址：
http://download.csdn.net/detail/jiangwei0910410003/9204087
1.定义ELF文件中各个结构体内容
这需要参考elf.h这个头文件的格式，这个文件在Android源码目录中：
在看elf.h文件中定义的数据结构时，要记得每个字段的占用字节数就可以了。
有了结构定义，下面就来看看如何解析吧。在解析之前需要将so文件读取到byte[]中，定义一个数据结构类型：
2.解析ELF文件的头部信息
文件的最开始几个字节给出如何解释文件的提示信息。这些信息独立于处理器，也独立于文件中的其余内容。ELF头部信息数据结构如下表示：
这里介绍几个重要的字段，后面修改so文件的时候也会用到：
·e_phoff：是程序头（Program Header）内容在整个文件的偏移值，可以用这个偏移值来定位程序头的开始位置，用于解析程序头信息。