https://github.com/apache/incubator-dubbo
https://github.com/zxing/zxing
https://github.com/kohsuke/jenkins
https://github.com/raver119/deeplearning4j
https://github.com/eclipse/vert.x
https://github.com/prestodb/presto
https://github.com/perwendel/spark
https://github.com/brettwooldridge/HikariCP
https://github.com/junit-team/junit4
https://github.com/xetorthio/jedis
https://github.com/code4craft/webmagic
https://github.com/google/auto
https://github.com/dropwizard/dropwizard
https://github.com/emeroad/pinpoint
https://github.com/redisson/redisson
https://github.com/codecentric/spring-boot-admin
https://github.com/swagger-api/swagger-core
version
parent-2.4.0
parent-3.11.0
released-all-futures
dubbo-2.6.4
BS-4.7.8
1.386
latest_release
3.5.4
0.212
2.7.2
HikariCP-3.2.0
JUnit 4.12
jedis-2.9.0
WebMagic-0.7.3
auto-value-1.6.3rc1
v2.0.0-rc0
1.6.2
redisson-3.8.2
2.0.3
v2.0.5
project name
retrofit
okhttp
Google Guava
Apache Dubbo
ZXing
Jenkins
Deeplearning4j
Vert.x
Presto
Spark
HikariCP
Junit4
Jedis
WebMagic
Google Auto
Dropwizard
Pinpoint
Redisson
Spring Boot Admin
Swagger Core library
some time for an interview. Unfortunately, this activity did not pro-
vide us with the sufficient number of interviewees, because there
was only one response.
In agreement with B.Adams [1], the most likely reason for the
fact, that developers of the most popular Github projects ignored
us, is that they may be overloaded by the various research studies.
I.e., the developer selection approach we followed is very tempting
for researchers. Hence, developers of popular research projects
may receive many emails with different requests for participation
in various scientific studies. So, they treat such kind of requests
as spam and ignore it. In our case the request for the study also
contained an attachment. And in the light of constantly increasing
threat of ransomware, such kind of emails looked very suspicious.
So, we had to select a different strategy for hiring interviewees.
C APPENDIX ‚Äì CODES DISTRIBUTION
Figure 2 shows the frequency distribution (number of occurrences)
of the codes attributed to the fragment of interviews. Developers
are worried about the possible issues (including security bugs)
that dependencies may introduce into their projects: dislike (114
occurrences), security (106 occurrences), and bugs (84 occurrences)
are within the topmost mentioned codes. At the same time, the
relatively low number of occurrences of codes such as direct deps
(8 occurrences) and transitive deps (16 occurrences) in an interview
about dependencies suggests that developers may not consider
all details of the dependency management process to be really
problematic (like had 75 occurrences). After all, this is the whole
advantage of using dependencies as black boxes:
If there‚Äôs something we really know to be broken, we fix it.
Otherwise, it‚Äôs kind of left to itself. (#1)
The preliminary analysis also suggests that developers prefer to
use dependencies as they are (i.e., adopt new ones or update them)
rather than to go deeper into details and change the source code: all
interviewed developers discussed management (149 occurrences),
while only 15 out of 25 developers touched the maintenance topic
(24 occurrences).
Then we analyze the codes that are mentioned together. For this
purpose, we have extracted the co-occurrence table of the inter-
view codes [24]: each column and row of the table corresponds to
an interview code, while each cell contains the number of code
co-occurrences. To identify the cells with a significantly high num-
ber of co-occurrences, we have calculated the mean and standard
deviation for the code co-occurrences (ùúá = 8.27, ùúé = 11.62) in the
table and underlined the values in cells, where the number exceeds
ùúá by at least the value of ùúé (i.e. 19.89). To reduce the noise, we will
not report the columns where cell values do not exceed ùúá.
Session 5C: Forensics CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1526Language: c/c++
Language: java
Language: javascript
Language: python
Attitude: like
Attitude: dislike
Attitude: recommendation
Context: functionality
Context: requirements
Context: security
Issues: broken
Issues: bugs
Issues: resources
Issues: licenses
Issues: fix availability
Operations: management
Operations: maintenance
Operations: direct deps
Operations: looking for info
Operations: transitive deps
Process: automated
Process: code tool
Process: workflow
Process: dependency tool
Process: manual
4
9
17
12
27
20
34
37
13
18
24
8
16
11
37
41
27
75
62
84
114
106
149
75
74
50
100
Code frequency
Figure 2: Code frequency by code groups
D APPENDIX ‚Äì COMPLETE
CO-OCCURRENCE TABLE
Figure 3 shows the complete co-occurence table for the Section 5.
E APPENDIX ‚Äì PER LANGUAGE ANALYSIS
Figure 4 shows the distribution of codes by languages.
Figure 3: Full Co-occurence table. Available online at https:
//gofile.io/?c=iBuWJW
Codeautomatedbrokenbugsc/c++code tooldependency tooldirect depsdislikefix availabilityfunctionalityjavajavascriptlicenseslikelooking for infomaintenancemanagementmanualpythonrecommendationrequirementsresourcessecuritytransitive depsworkflowautomated01967180140281214711831472218213broken10610002127168160428313106424bugs960102102291518162013119945833441257317c/c++61100360174100182174201052214212code tool7023030101520020502200907dependency tool18010630011026172793262146141819direct deps0020000200420010713001342dislike1421291711120723333173159869445323361216fix availability021540007057209293250041102functionality271810120235025958164332168228310java8161605643372504328266476097926721javascript12820121723129401272244671084729526licenses1118020705310130602101112like4631207039828271098442341234416looking for info70191729115216262239045071752022113maintenance14940309946408407713207611management18284520526786333474664450701349181428561445manual338102192267027713017003818python1413330214344516010234171349170651533318recommendation71452605089811521806012746requirements20420103027402201405100908resources261220412342971307283152001703security184571491833611826291442265683379170533transitive deps223201412037511111413400502workflow134171279216210212626131458186833320Session 5C: Forensics CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1527Figure 4: Distribution of codes by languages. Available online at https://gofile.io/?c=u54rXh
Codemaintenance & Cmanagement & Cdirect_deps & Clooking_for_info & Ctrans_deps & Cautomated02020Codeautomated & Cbroken & Cbugs & Cmaintenance & Cmanagement & Cdirect_deps & Cfunctionality & Cworkflow & Cresources & Csecurity & Clooking_for_info & Ctrans_deps & Ccode  tool00000dislike114390622640workflow08070like001000000100dependency tool03040manual01000maintenance & Javamanagement & Javadirect_deps & Javalooking_for_info & Javatrans_deps & Javaautomated14011automated & Javabroken & Javabugs & Javamaintenance & Javamanagement & Javadirect_deps & Javafunctionality & Javaworkflow & Javaresources & Javasecurity & Javalooking_for_info & Javatrans_deps & Javacode  tool03010dislike31252291676835workflow014111like21921806401641dependency tool14011manual24020maintenance & JSmanagement & JSdirect_deps & JSlooking_for_info & JStrans_deps & JSautomated19032automated & JSbroken & JSbugs & JSmaintenance & JSmanagement & JSdirect_deps & JSfunctionality & JSworkflow & JSresources & JSsecurity & JSlooking_for_info & JStrans_deps & JScode  tool02010dislike63412512321055workflow016030like031021800421711dependency tool215041manual16020maintenance & Pythonmanagement & Pythondirect_deps & Pythonlooking_for_info & Pythontrans_deps & Pythonautomated & Pythonbroken & bugs & maintenance & Pythonmanagement & Pythondirect_deps & Pythonfunctionality & Pythonworkflow & Pythonresources & Pythonsecurity & Pythonlooking_for_info & Pythontrans_deps & Pythonautomated09020dislike4611033086111242code  tool01000like141602201001650workflow012121dependency tool010010manual06131JAVACJAVASCRIPTPythonDependency operations for languagesDeveloper attitutes for languagesSession 5C: Forensics CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1528F APPENDIX ‚Äì INTERVIEW TRANSCRIPT EXAMPLE
a. How do you deal with software dependencies in your projects?
Usually, when I deal with software dependencies, I rely on some tools, for example, Maven, Gradle for Java.
Or pip for Python. Some dependencies, that you introduce, which can be, let‚Äôs say, not compliance with other
libraries about some reason maybe. Maybe one dependency has a dependency on another library, but different
versions, which can be tricky. I think so. Let‚Äôs say, I have also an issue, while external dependency for..
I think, it was Json, no xml parser in Java. And this library created memory leaks in context at the time.
And that was very bag experience with external libraries. Because I needed to take some memory snapshot to
understand what was the leak. And I understood, that the leak was caused by an external library. So not by
the code, that we were writing.
b. And how did you cope with that bug? What did you do?
Simply we used another library, which more or less did the same thing. Now I am thinking, that it wasn‚Äôt
an xml parser, it was something to, an utility to expose REST services in Java. And we used another tool.
We basically changed library. And that, of course, caused us to rewrite some piece of software. At least we
solved this memory leak problem in Tomcat.
c. Ok, I see. So you basically substituted this library?
Exactly. A solution maybe to make an issue to a library and wait for a fix, but at that time we decided to
change the library. Also because we changed the library and we wrote better some piece of software. We took
the moment to do it.
d. Yes, sure. Fair enough. There was an alternative. That‚Äôs good. I see. I wanted to understand better on what
you‚Äôre telling me. Can you tell me a bit about your background? I nderstand, that you‚Äôre a Java developer.
How much experience do you have?
I was working basically five years in .Net, and then three years in Java plus university projects if you
can count them. They were also in Java. And then also one year and a half in Python. There was a JavaScript
framework for web development. Which in the case was NodeJS. But, let‚Äôs say, in that case we used npm, so
node package manager to manage the libraries in JavaScript.
e. And currently you are working in a company, right?
Yes, I recently changed again. Yesterday I started at the new company. SO here the recent project, that I am
involved in, again Java. I came back to Java.
f. And in the previous job?
In the previous job I was working with Python and I was working with Django. So, the back- end. And at least
vJS at some time.
g. I see. And what was the scope of the company? I mean, what kind of projects were you working on?
This is a big corporate, wanted to implement a certain solution. They produce plastic for automatic surface.
And it has several clients all over the world. China, South America, Europe, Nothern America. And they wanted
to build a system to make the Industry 4.0. Basically, so it is still a big project. The development of
a web application to be used by all the employees of the company, which allows to read data from sensors
installed on the machines through several protocols, for example, PROTOCOL1. To read SOME data. And then to
also read data from other sources. For example, some ERP system. And then a lot of features, that are still
under development to digitalize the production sector and standardize the way they use the system all over
the world. It‚Äôs very big activity to summarize it in several words. I hope, I was enough clear.
h. Yeah, yeah. I understand something. In broad perspective. Ok, and how old was the project, that you were
working on?
This project, I mean, in the last company was.. I mean, we started it from scratch. Then I had other experiences
before, working on some, let‚Äôs say, established software. And so in that case we had a lot of dependencies.
And introduced those dependencies, I think, in our pipeline or development environment.
i. Ok, I see. in both projects, that you are talking about. They were Python projects, right?
Python project was in the last company, where I was working for one and a half years. Before I was working
in another company, and there I was developing in Java. There I was working on both old piece of software
without any kind of, unfortunately, a dependency management. At the beginning. Then we introduced Maven to
fix the jar we were facing, let‚Äôs say. It works on my machine, then I had a chance to use Gradle. But for
those projects I used Gradle as a very beginning level. So the depependency were controlled by those tools.
j. Ok, and so when you implemented this switch to Maven, when you introduced Maven to this project.. How did
you select the dependencies, that you want to include?
Well it was complicated. Let‚Äôs say, we had lib folder with a lot of dependencies inside. The guy, who
implemented the software didn‚Äôt.. They had no idea on how to organise them better. And then basically we
Session 5C: Forensics CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1529started from scratch to compile the software and added dependencies one by one. It was a long process. And
then we faced also some problems of these versions of required libraries. And then we also had some problems
at runtime. You know, in pom files there are explicit dependencies to other jar files. So sometimes it also
depends on the quality of the dependency. Dependency pom file. Sometimes they say compile exception, because
the dependency tree was not satisfied. And it was a painful process. But it was necessary to introduce a new
development to the field. And it was a mess with it. And then without this technology you cannot think about
any improvements. You know, like continuous deployment or use some automatic tools online to build and deploy
applications.
k. Yeah, of course. I see. And so. Ok, when you.. Did you also face sometime the situation, when you have to
select the new dependency for your project? Like to introduce some new functionality?
Yes, I did. This especially happens with the project I started by myself. Of course, I needed some extra
features. And I used dependencies for that. And it actually very convenient to take external dependencies.
l. Ok, but how do you actually select them? So, what do you consider during that selection?
Well, I usually, check if they are reliable by looking at Github sites and numbers of.. I am talking only
about open source dependencies. I check if they are reliable, I look at the Github stars, number of commits,
contributors. I see if the project is active. And so I understand, that this is a dependency I can introduce,
because a lot of people is using it. And it is still maintainable. It is stable. Then in other cases you can
buy some external library. But it was really bad situation. And I was basically just asking for feedback of
other people, who were using the same library. You can read reviews online. If there is a customer support
also. Of course, when you have paid solution, you have also another kind of support.
m. I see. In case you had to select this paid library.. Why did you have to go for it? Why did you decide to
select the private, commercial library and not the open source?
Especially, when you work for a Microsoft environment for .Net applications, there are no a lot of free
alternatives for enterprise applications. For example, windows form applications for, let‚Äôs say rapid
development. You want to speed up the development, so you basically buy these libraries, because there
was no open source solutions in that case. For example, to develop user interfaces in windows form, I used
the vectors. And the library, which was build on top of windows form, that also they have libraries for also
web development and other software stuff. And there, of course, you pay quite a lot. But then you have a lot
of features already out of the box, functionalities, which is actually 99% what customer wants. So in that
case, let‚Äôs say. Since you pay, these libraries are very reliable. Usually there is no problem of integration
or bugs, or malicious software.
n. I see. But still, there may be some new bugs discovered. Or some new vulnerabilities discovered?
Vulnerabilities - no. But bugs - yes. Sometimes you find some bugs also in this case. And there is a support,
that you submit these issues. And if you pay, they answer you after it. Then it depends if you are... Because
we are working for a customer and he had, he bought the golden support. And with golden support they also
release patches for you. And they introduce the patch in the next version, so for other people. So this is
the other type of contact.
o. Ok, I mean, that‚Äôs interesting. This patch, I assume, that you need to just basically apply for your dependency,
without update to a new version. Right?
Yes.
p. And doesn‚Äôt break the build of the project?
Usually it‚Äôs a minor release, so it‚Äôs not breaking anything. Then, of course, when there are major releases.
The risk you break something, which also can be high.
q. I see. Did you actually face the updates of the library? Did you have to updates the libraries in your
projects?
Yes. Let‚Äôs say. It depends on the policy of the company. Some says, do not touch anything unless it stops
working. But then you, maybe if you need to update some library and you move some version 1.0 to 3.5, because,
let‚Äôs say, you decide or your CTO in three years do not update anything. But then it becomes a mess. Because
skipping a lot of versions can really break a lot of stuff. In another company they instead have this policy
to update the main libraries very often. And that of course any time when the library was updated, you should
do a lot of tests.
r. Ok, but do you see any correlation with the policy of the company and programming language that they use?
Well, it is. Usually I saw Microsoft environment, let‚Äôs say, in corporate environments of big companies,
big corporates, that can afford paying licenses. And another companies that use Java and other open source
technologies are much smaller. But about the policies about updating or not updating dependencies - no. I
cannot say anything, that there is a correlation.
s. In this case do companies prefer to update libraries or they prefer just to keep them?
Session 5C: Forensics CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1530It depends on the company. How many developers you have, how money you have on the project. Because, of
course, this updating process is also time consuming. Apparently time consuming, because it take resources
from developing new features, solving new bugs. But then, let‚Äôs say, in long term, I think, it saves a lot of
time, because ok, one day you will need to update all libraries, I think. Because, you know, some bugs, some
vulnerabilities.. I don‚Äôt know. It can be a lot of stuff. It really depends on how long the company exists,
how experience the managers are.
t. I see. This is really interesting what actually drives the companies to update software dependencies. For
example, in your experience, how often did you update dependencies? And when did you decide to update them?
Let‚Äôs say, in.. When I was working for .Net applications. At least we updated the main dependencies once per
year. Because these libraries received major updates once per year. So we basically updated these. To always
be align with basic features. But it was a more structured company and we had people to do it. And also,
let‚Äôs say, there was no issue not to do it. Then, of course, if you work for a smaller company. Or maybe if
you are alone managing the project, then you basically update when you need to. Or several factors can drive
this. For example, you need to.. There is a bug or there are new features, that the new version offers. Or
you need to change the version of Java, because the version you are using needs updating. Then you understand,
that your all dependencies need to be updated also. Let‚Äôs say, I think in a well-structured software company,
they should plan the updates frequently. If you want to maintain your products. If you want to include new
features. But then, of course, it depends on different cases.
u. And what about the security side? So, did you ever faced the security of the dependencies?
About security I do not have a lot of examples. I know, that, for example, for Java and also other environments,
they. At some point they stop to release patches, security patches. It depends also how much you.. Is your
business to make application secure.
v. So in your experience, do the companies looked somehow on the security sides of their dependencies? Did they
check their dependencies on the presence of security vulnerabilities?
No, in this case, I can say. Let‚Äôs say, in this case I saw the dependencies are used around, where, let‚Äôs
say, mostly trustworthy, because they are very used dependencies. Because they are also, dependencies are
coming from enterprises. So you kind of trust them. It‚Äôs not just a random dll or random jar you find. So,
let‚Äôs say, that we are using, we search for reliable sources. Also, you sometimes want to look at the code
to understand if it actually introduces some security vulnerabilities.
w. Ok, I see, it‚Äôs fair enough. If the publisher development company is trustable, if it is big enough. Like
Microsoft, then you kind of trust them And they do not ship bad code.
Yes yes yes. Also if you use some dependencies from open source, from Github with a lot of contributors, a
lot of stars, you can trust. I don‚Äôt know if anyone is going to check anything in such libraries. A lot of
people use them and they can just do whatever. But there is someone in the world, some nerd ones, that take
look at the code, at every line of code and do this work for me.
x. Yes, sure. That‚Äôs the idea behind the dependencies. So kind of outsource some part of your work to somebody
else.
Aha, yeah.
y. I have just last question basically. You already mentioned, that there was a time, when you had to switch to
another library, because there was a problem, there was a bug. So basically there was no fix. Can you comment
about this situation? So, if you, also from the perspective of different companies where you worked. So, if
you face this situation, when there is no fix, what would be your reaction if there is no new version with
the fix of the bug or security vulnerability?
In this case if it was an open source library, I don‚Äôt know, we could complain to the maintainer of the
library. If there is a license somewhere, if there is a line saying: I‚Äôm not responsible for any bugs. That
policy of the company was, that when they understood, that the memory leak was caused by this library in our,
let‚Äôs say, in our software configuration. We checked where the library was used and we understood if it was
very painful to change it or not. And we understood, that it wasn‚Äôt that painful and we took also the chance
to rewrite some old class in a better way. Then we didn‚Äôt experience, the memory leak, let‚Äôs say, any more.
Session 5C: Forensics CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1531