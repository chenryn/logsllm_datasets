title:JSKernel: Fortifying JavaScript against Web Concurrency Attacks via
a Kernel-Like Structure
author:Zhanhao Chen and
Yinzhi Cao
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
JSKernel: Fortifying JavaScript against Web
Concurrency Attacks via a Kernel-like Structure
Zhanhao Chen† and Yinzhi Cao‡
PI:EMAIL, PI:EMAIL
† Palo Alto Networks
‡ Johns Hopkins University
Abstract—As portals to the Internet, web browsers constitute
prominent targets for attacks. Existing defenses that redeﬁne web
APIs typically capture information related to a single JavaScript
function. Thus, they fail to defend against the so-called web
concurrency attacks that use multiple interleaved functions to
trigger a browser vulnerability.
In this paper, we propose JSKERNEL, the ﬁrst generic frame-
work that introduces a kernel concept into JavaScript to defend
against web concurrency attacks. The JavaScript kernel, inspired
from operating system concepts, enforces the execution order of
JavaScript events and threads to fortify security.
We implement a prototype of JSKERNEL deployable as
add-on extensions to three widely used web browsers, namely
Google Chrome, Mozilla Firefox, and Microsoft Edge. These
open-source extensions are available at
(https://github.com/
jskernel2019/jskernel) along with a usability demo at (https:
//jskernel2019.github.io/). Our evaluation shows the prototype
to be robust to web concurrency attacks, fast, and backward
compatible with legacy websites.
I. INTRODUCTION
Web browsers typically form the front line across defenders
and adversaries resulting from the direct access to untrusted
web content on the Internet. The problem is exacerbated by
the rapid evolution of the World Wide Web along with the
continuous introduction of multiple new features (e.g., Web
Workers), and the corresponding new vulnerabilities.
A popular direction in securing browsers is that of attack
surface reduction that aims to constrain speciﬁc web function-
alities. Such an approach dates to the early days of the web
where the advocacy was for disabling JavaScript to improve
security. More recently, Snyder et al. [1] also proposed to
disable certain high-risk APIs, such as Web Workers,
to
fortify security. However, as the web continues to evolve with
new feature-based functionalities, the disabling approach is
not always realistic. For example, Web Workers are widely
used for background computations in popular websites (e.g.,
Google Maps and Overleaf), and disabling workers would
detrimentally affect the user experience.
Another widely-pursued direction to secure web browsers
is to precisely detect the triggering condition of web attacks
and stop them before they happen. Such an approach dates
back to the seminal BrowserShield [2] work where Reis et al.
proposed to rewrite JavaScript in a proxy to enforce security
policies. Such methods of rewriting JavaScript in a proxy
have gradually evolved to the redeﬁnition of JavaScript APIs
via browser add-ons. For example, more recently, JavaScript
Zero [3] redeﬁnes JavaScript APIs in browser add-ons to
prevent side-channel attacks. Similarly, JavaScript API redeﬁn-
ition is widely utilized in many commercial products [4], [5],
and approaches such as Canvas Defender [4] redeﬁne canvas
API to introduce noise and defend against canvas ﬁngerprint-
ing. However, all these existing API redeﬁnition works rely
on an implicit assumption that the triggering condition of
web attacks needs information only from the redeﬁned API.
For example, BrowserShield enforces simple security policies
that check the length of API calls to prevent buffer overﬂow.
Analogously, JavaScript Zero redeﬁnes perf ormance.now, a
modern, ﬁne-grained clock API, to reduce its precision.
However, the above assumption no longer holds in modern
web browsers that include full-ﬂedged, event-driven operating
system architectures with multiple threads. Speciﬁcally, we
show that the triggering condition of many modern web attacks
needs information, i.e., the invocation sequence, of multiple
JavaScript functions spread across different web threads. In
this paper, we deﬁne these attacks as Web Concurrency At-
tacks. These attacks cannot be prevented using simple API
re-deﬁnitions proposed in prior work.
The most prominent web concurrency attack is probably
the web implicit clock [6] used in side-channel attacks, that
can also transpire in many prior attacks [7], [8], [9], [10], [11],
[12]. In particular, the triggering condition of an implicit clock
is the interleaved invocations of two JavaScript functions: one
is the implicit clock API, such as the onmessage callback
of postM essage function, and the other is the measurement
target API. The number of invoked onmessage callbacks is
used to infer the duration of the target API invocation. Prior
approaches that redeﬁne individual APIs (such as JavaScript
Zero) cannot prevent web implicit clocks. This is because
the attack is related to the invocation sequence of multiple
JavaScript functions, which cannot be captured by the security
policy using information from individual functions.
Web concurrency attacks also extend beyond implicit clocks
in timing side-channel attacks. Consider the use-after-free
vulnerability [13] documented in the Common Vulnerabilities
and Exposures (CVE) Database. The triggering condition of
this vulnerability involves three JavaScript functions, namely
the fetch initiating a web request, a false termination of the
worker, and an abort signal to the fetch. Speciﬁcally, the
fetch has to occur in the worker, the worker has to be falsely
terminated due to a bug, and then the main thread needs to
send an abort signal to the terminated worker to ﬁnally trigger
the use-after-free vulnerability. Again, JavaScript Zero cannot
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00026
64
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
capture the correlation among these three functions. JavaScript
Zero only replaces the native implementation of workers with
a nonparallel version like a polyﬁll, which sacriﬁces true
parallelism of web browsers.
In this paper, we propose JSKERNEL,
the ﬁrst frame-
work that introduces a kernel concept with the capability of
capturing concurrency information of different threads into
JavaScript to defend against web concurrency attacks. The
core kernel concept, of an additional
layer with a higher
privilege in between the browser and the website JavaScript,
is inspired by the operating system (OS) kernel analogy. The
key idea is that the JavaScript kernel, similar to an OS kernel,
manages all the JavaScript threads and schedules events in
each thread following a certain security policy thus preventing
a web concurrency attack. The policy for the implicit clock
example can be deterministic [14] or fuzzy [6] scheduling;
the one for the aforementioned use-after-free vulnerability
is a manual speciﬁcation that explicitly closes the already-
terminated worker after the fetch and before the abort signal.
We have implemented a prototype of JSKERNEL as exten-
sions to three major browsers, i.e., Firefox, Chrome and Edge.
Our implementation is open-source and available at the follow-
ing repository (https://github.com/jskernel2019/jskernel). We
also provide an demo of the attack at https://jskernel2019.
github.io/. Our design and implementation of the JSKERNEL
prototype follows the following principles:
• Browser-agnostic. We design JSKERNEL to be deployable
at any existing web browser. Speciﬁcally, we design JSKER-
NEL with a piece of thin extension code for bootstrapping
and a portal kernel runnable at any existing browser.
• Backward compatibility. We design JSKERNEL to be
backward compatible with legacy websites. For example, in
timing APIs, the execution sequence of asynchronous event
enforced by JSKERNEL is one out of many possibilities,
thus being compatible with legacy websites.
• High performance.
JSKERNEL incurs insigniﬁcant over-
head compared with legacy execution of web applications.
Our evaluation shows that JSKERNEL only incurs 0.30%
median overhead on the Dromaeo benchmark [15].
II. OVERVIEW
In this section, we provide an overview of JSKERNEL. We
start by describing the web concurrency attack in Section II-A
and present examples of security policies needed for prevent-
ing web concurrency attacks in Section II-B.
A. Threat Model: Web Concurrency Attack
Web concurrency attack is deﬁned as a web-level attack
triggered by a speciﬁc invocation sequence of two or more
JavaScript built-in functions, e.g., system APIs and callbacks,
with certain parameters and possibly located in multiple
threads. The consequence of web concurrency attack varies,
where the manifestation could be a privacy leak of cross-origin
information or an exploit of a low-level vulnerability. The
// worker.js:
function(){
postMessage(i);
for (var i = 0; i 
worker = new Worker("worker.js");
startTime = performance.now();
worker.onmessage = function (event) {
}
// Main Script:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
Listing 1: Web Concurrency Attack Example 1: A JavaScript
worker uses the callback function of postMessage as an
implicit clock.
count = event.data;
if (event.data == NUM) {
tick = (performance.now() - startTime)/NUM;
callback = function(){
}
document.getElementById("e").classList.toggle(’f’);
requestAnimationFrame(callback);
asyncTimerDuration = tick * (count - NUM);
}
}
common thread among such attacks is that the triggering con-
dition requires a particular invocation sequence of JavaScript
functions.
Note that web concurrency attacks differ from low-level
concurrency attacks [16]. Low-level concurrency attacks are
mostly caused by a race condition, which could then lead to,
for example, a privilege escalation from the user space to the
kernel. The cause of web concurrency attacks, if targeting a
low-level vulnerability, is that a particular invocation sequence
of JavaScript functions across multiple threads will result
in control and data ﬂows at
the
vulnerability can be triggered.
the low level such that
Next, we present
two examples to illustrate web con-
currency attacks. We start from an implicit clock example
in Section II-A1 that measures unknown information, e.g.,
loading time of a cross-origin resource in timing attacks,
and then describe a low-level use-after-free vulnerability in
Section II-A2.
1) Attack Example 1—An implicit web clock: We ﬁrst
describe a timing attack with an implicit clock in Listing 1
to illustrate web concurrency attacks. Consider the general
pattern of a timing attack with an implicit clock. An adversary
measures a secret, e.g., the operational time of an SVG ﬁlter
(Lines 7–13), using the number of invocations of an implicit
clock API, e.g., onmessage events (Lines 17–27) triggered
by the postMessage call (Line 4) in a JavaScript worker
(Lines 2–5). As the operational time of the SVG ﬁlter differs
based on the image contents, an adversary can infer the image
contents based on prior works [9]. The use of an implicit clock
belongs to a web concurrency attack because of the interleaved
invocation of the secret and the implicit clock API.
The attack transpires in two stages covering the measure-
ment of (i) a tick and (ii) a secret. First, similar to the clock
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
65
1
2
3
4
5
// worker.js
var abortCtl0 = new AbortController();
var abortSig0 = abortCtl0.signal;
setInterval(function (e) {
fetch("./fetchedfile0.html", {signal:abortSig0}).then(
function(e){...}).catch(function(e) {...});
}, 32);
// Main Script
1
2
3
4
5
6
7
8
9
10
11
policy_deterministic = {
worker: { // policy for worker thread
JSKernel_WorkerPostMessage: (callback) => {
var pendingOnMessage = new Event(callback, [], "
pending");
var expectedTime = predictOnMessage();
event_queue.push(pendingOnMessage, expectedTime);
}
},
main: { // policy for main thread
JSKernel_WorkerPrototypeOnmessage: (e) => {
event_queue.lookup(e.command).status = "
confirmed";
}
}
12
13
Listing 3: A Security Policy of Deterministic Scheduling to
Defend against Attack Example One
edge attack [6], the adversary needs to measure the length of a
clock tick, i.e., the invocation time of onmessage event in the
current browser that includes an i + + (Line 3) and a message
passing from the worker to the main thread (Line 4). Particu-
larly, the adversary executes the operation multiple times and
then divides the overall duration by the number of executions
to obtain one tick’s length (Line 20). Second, the adversary
invokes the target, i.e., an erode operation, and measures the
number of onmessage events from the worker thread. Then,
the duration of the operation will be the tick length multiplied
by the event number (i.e., asyncTimerDuration in Line 22).
2) Attack Example 2—A use-after-free vulnerability: A
web concurrency attack targeting a use-after-free vulnerability
(CVE-2018-5092) is depicted in Listing 2. The vulnerability
is a use-after-free where the browser code sends an abort
signal to a fetch request that has already been freed due
to a false worker termination.The triggering code, simpliﬁed
from Bugzilla [13] while preserving its functionality, ﬁrst
registers a fetch in the worker thread at Line 4, causes the
false termination in the fetch request at Line 5, and then
triggers the abort signal by closing the main thread at Line 10.
The exploitation of this use-after-free vulnerability is a web
concurrency attack because of the strict invocation sequence
of these JavaScript APIs across the worker and main threads.
B. Security Policy
We illustrate some example security policies adopted by
JSKERNEL to defend against web concurrency attacks. A
security policy in JSKERNEL, represented in a JSON format
and speciﬁes the corresponding functions to be invoked for a
user-space, i.e., a website JavaScript, function call in either
the main or the worker thread. A security policy has access to
kernel objects, such as the event queue described subsequently
in Section III-C, such that it can schedule events in a speciﬁc
sequence for defense.
We present two examples of security policies in defending
the aforementioned web concurrency attacks in Section II-A
and then present how to specify policies in general.
1) A Deterministic Scheduling Policy against
Implicit