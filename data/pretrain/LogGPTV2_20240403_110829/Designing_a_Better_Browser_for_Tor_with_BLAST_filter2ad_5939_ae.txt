databases as Firefox add-ons, though to force the browser
to use prefetched resources, we would need to change
the connection manager. We would also need to make
changes to Tor itself to load those databases for the client.
• We do not propose to implement the HTTP/2 database due
to its small performance gain shown and the possibility
that future changes (such as a better ALPN implementa-
tion) would eliminate the need.
Patches to the connection manager would not be alien
to Tor Browser as it has had multiple patches to implement
its own features such as randomized pipelining. However we
saw from the failure of optimistic data in newer browser
versions that Firefox version changes can demand additional
maintenance for such features, but Tor developers may not
necessarily prioritize such maintenance. Our proposed features
require expert maintenance to ensure they remain functional
with every browser version update, especially since Firefox
is unlikely to support our features (as they are not designed
for normal browsing). The proposed databases also need to be
constantly updated, though this is easily automated.
The volatility of browser enhancements is why we believe
simulation has great value for experimental validation. Simu-
lation allows our results to be obtained on a reproducible and
veriﬁable medium. The predictive power of the BLAST sim-
ulator allows us to prove the usefulness of our enhancements
in order to adopt motivation and constant maintenance.
B. Network design and browser design
Previous work on improving anonymity network user ex-
perience focused on improving network design rather than
browser design (detailed in Section VII). Better network design
works hand-in-hand with better browser design in improving
user experience, but we have not seen an evaluation of how
network design would affect page load times. We perform such
an evaluation here using the BLAST simulator.
11
Fig. 7: CDFs of differences in page load times for implementa-
tions of Redirection database and Server database compared to
original Tor Browser, tested on ten instances each of the top
200 pages collected with Tor Browser. These features were
implemented as Firefox add-ons for Tor Browser. Negative
time values indicate an improvement.
we used BLAST to automatically obtain redirects and sub-
stitute the user’s action to visit the top 200 pages without
requiring server round-trips; (2) server database, where we
used BLAST to automatically obtain the servers each web page
connects to and immediately create a connection to them when
the user accesses the top 200 pages.
The server database is a weaker version of the prefetch
database; instead of prefetching known resources on the page,
we pre-establish connections to known servers used by the
page so resources can use these connections without waiting.
There are signiﬁcant technical challenges in implementing the
prefetch database for Tor Browser through an add-on.8 Both
implementations are evaluated on 10 instances each of the top
200 pages through Tor Browser. Though compatible, the two
implementations were evaluated independently. We present the
results separately in the following, based on real data (not
simulation).
Redirection database. The redirection database allows the
user to skip a few unnecessary round-trips when loading a
page. On the top 200 pages, we obtained a 14.7% decrease
in page load times from 18.4 s to 15.7 s. Per-instance, the
decrease was 2.7 s ± 5.7 s, a large variation due to the
randomness of network conditions and Tor circuits. 80% of
page instances saw a decrease in load times; 62% saw a
decrease of more than 1 second, while 12% saw an increase
of more than one second. The simulator predicted a decrease
from 17.3 s to 15.5 s, a similar but smaller 10.4% decrease.
Server database. The server database allows the user to pre-
establish connections with required servers at the moment page
load begins, rather than at the moment resources are required.
On the top 200 pages, we obtained a 9.4% decrease in page
load times from 18.5 s to 16.8 s. Per-instance, the decrease was
1.7 s ± 6.0 s, a somewhat larger variation than the redirection
database. 66% of page instances saw a decrease in load times;
66% saw a decrease of more than 1 second, while 16% saw
an increase of more than one second.
We show a CDF of reduction in load times per instance
for both features in Figure 7. The success of these prototype
8 We observed that Tor Browser refused to use cached resources during the
same page load even though memory caching was on, although it used cached
resources in a subsequent page load.
 0 0.2 0.4 0.6 0.8 1-10 0 10Page load time difference (s)Redirection DBServer DBclient loads these databases from the Tor directory servers
to aid in their web browsing alongside server descriptors,
which does not increase the client’s vulnerability since
server descriptors are already loaded.
3) Optimistic data does not require tokens or databases, so
it belongs in its own category.
(a)
(b)
Fig. 8: Mean page load time based on round-trip time and
per-resource bandwidth, simulating http2. In (a) we vary
the bandwidth used while ﬁxing the round-trip time to 0.8 s,
marking the original bandwidth setting of 164 kB/s with a
cross. In (b) we vary the round-trip time while ﬁxing the
bandwidth used to 164 kB/s, marking the original round-trip
time of 0.8 s with a cross. Each graph contains 100 data points.
We change the simulator parameters of mean round-trip
time (originally 0.8 s) and per-resource bandwidth (originally
164 kB/s), and evaluate their effects on HTTP/2 using the
simulator. We show how page load time changes based on
round-trip time and bandwidth in Figure 8.
We see that the round-trip time has an almost entirely linear
effect on overall page load times. Our choice of 0.8 s probably
does not represent Tor’s minimal round-trip time and includes
some degree of congestion. If we could reduce Tor’s mean
round-trip time by half, page load time would also be reduced
by half. In contrast, increasing bandwidth has a much reduced
effect on page load times. If we doubled the bandwidth,
page load time would decrease from 18.0 s to 17.0 s (5.6%
decrease). Tor’s bandwidth is sufﬁciently high that increasing
it further has only a minor effect on page load time.
C. Privacy implications
In this section, we analyze if and how our proposed browser
features would impact Tor’s anonymity guarantees. In doing
so, we also make recommendations on their implementation
to avoid potential compromises.
First, we note that an eavesdropping attacker could distin-
guish between someone who is using our proposed enhance-
ments and someone who is not; we do not consider this a
threat to anonymity because such features, if proven beneﬁcial,
should be adopted universally and not by a small portion of
users. In that case, the client’s identity would not be linked to
whether or not they use these enhancements. Instead, we focus
on whether or not an eavesdropping attacker can distinguish
between someone who has visited a webpage and someone
who has not in the following.
We analyze how our proposed enhancements impact Tor’s
anonymity by ﬁrst dividing them into three categories:
1) Requires tokens. TCP Fast Open and 0-RTT TLS uses
tokens stored in the browser to save round trips when a
client re-connects to a previously visited website.9
2) Requires databases. These include the Redirection,
HTTP/2, and Prefetching databases; we propose that the
9 Note that if 0-RTT TLS is implemented using a single QUIC handshake
as proposed in HTTP/3, it would not require tokens.
We determine if these tokens and databases cause privacy
issues by considering three types of relevant attacks in this
work.
Storage-seizing attackers. These attackers gain control over
the client’s hard disk and seek to determine what they did on
Tor Browser. To defend against these attackers, tokens should
be stored in memory only and should not leave a hard disk
trace. Databases should not be modiﬁed even if the client
would obtain a performance improvement; for example, if the
client knows that a website allows HTTP/2 and it was not
recorded in the database, she should not add that record as it
would serve as evidence that she visited the site.
Browser Fingerprinting attackers. These attackers control a
web server and seek to determine the client’s identity with
prompts to which different clients answer differently [8].
To defend against browser ﬁngerprinting, tokens should be
implemented in such a way that a web server cannot check
whether or not they exist unilaterally. For example, a web
server should not be able to ask if the client has a 0-RTT TLS
session resumption ticket for another domain. Databases are
not open to browser ﬁngerprinting attacks; even if a leak would
allow the server to query the client’s databases, its contents are
determined by the Tor directory servers and do not reﬂect the
client’s activity.
Website Fingerprinting attackers. These attackers are local,
passive eavesdroppers who observe trafﬁc patterns in order
to determine what the client is doing (which websites she
is visiting). We observe that our faster re-connection tokens
alter trafﬁc patterns, allowing such an attacker to determine
whether or not the client has visited a web page previously
within the same session. However, this is already true for Tor
Browser, which uses memory-based caching, allowing web
resources to be stored in memory for use in a future web
visit. Our proposals therefore do not compromise the client
more than memory-based caching already does, as long as the
necessary tokens are deleted along with memory caches after
the termination of a browsing session.
There remains the harder question of whether or not
enhancing the browser would in and of itself make the website
ﬁngerprinting classiﬁcation task easier. We cannot deﬁnitively
answer this question without a full
implementation of all
proposed enhancements and subsequent testing with state-of-
the-art website ﬁngerprinting attacks; even then, better attacks
in the future or alternative implementations may change the
answer. There is some evidence to suggest that our enhance-
ments, which generally reduce the number of round trips
required to load a page, would make website ﬁngerprinting
harder. Researchers have noted that website ﬁngerprinting re-
lies on identifying bursts of packets in the same direction [11],
[19], [21], [22], [26], and that web pages with more bursts
are harder to obscure [27]. This would suggest that reducing
the number of round trips is more likely to impede website
ﬁngerprinting than to aid it.
12
 0 5 10 15 20 25 30 0 100 200 300 400 500Page load time (s)Bandwidth (kB/s) 0 5 10 15 20 25 30 0 0.5 1 1.5Page load time (s)Round-trip time (s)VII. RELATED WORK
VIII. CONCLUSION
We are not aware of any related academic work on solving
the problem of browser design for anonymity networks. On
the other hand, much work has been done on network design
for anonymity networks (focusing on Tor), with the same mo-
tivation as our work: to improve users’ experience, especially
latency-sensitive users who need to be convinced to sacriﬁce
utility for privacy. We survey these works here as we share its
objectives and some of its methodology.
One way to improve anonymity network design is to tackle
the relay selection problem. To deliver user trafﬁc, Tor chooses
volunteer relays at random to form a circuit lasting for about 10
minutes. Snader and Borisov [23] show a way to improve relay
bandwidth reporting and for users to choose relays based on a
trade-off between bandwidth and anonymity. Wang et al. [25]
recommends congestion-aware path selection:
the user can
measure relay congestion based on timing packet round trips,
and elect to drop congested circuits to improve performance.
Akhmoondi et al. [1] suggests that Tor clients should choose
relays based on their autonomous systems to reduce latency.
Other works have attempted to enhance Tor’s performance
by changing its behavior at the network-stack level. These pro-
posals include DefenestraTor [4] to improve Tor’s congestion
control behavior; DiffTor to classify Tor trafﬁc in real time
to offer distinct classes of service [3]; and trafﬁc splitting
with circuit multiplexing [2], by AlSabah et al. DefenestraTor
showed a 10–20% decrease in time to download 5 MB ﬁles. A
proposal by Jansen et al. to improve Tor’s socket interactions
with real-time dynamic computation of socket congestion,
KIST, is currently used by Tor. [12] It showed a reduction
of latency from 0.838 s to 0.686 s, a 18% decrease; we saw
in this work that latency reduction is highly signiﬁcant for
speeding up page loading.
To address the challenge of determining how much these
proposals would improve Tor, Bauer et al. created Experimen-
Tor [5] to emulate Tor nodes so as to test various proposals on
a toy network. Jansen et al. created Shadow [13] to simulate
Tor nodes for the same goal. Using an improved version of
ExperimenTor, Wacek et al. [24] evaluated relay selection
proposals.
Improving anonymity network performance serves two
important privacy goals, besides the overarching goal of im-
proving user experience. First, the more concurrent users there
are, the larger their anonymity set. Therefore, the greater the
number of people using Tor, the less likely an eavesdropper
is to identify a Tor user, which is easier if they have prior
information (such as timing or locale). Convincing otherwise
reluctant users to use Tor therefore beneﬁts all current Tor
users. For this reason, there has been much work on enhancing
the scalability of Tor [14], [18].
Second, Tor may be vulnerable to website ﬁngerprinting,
which have recently started to show success in open-world ex-
periments against large Tor data sets [11], [15], [19], [21], [22],
[26]. Currently, the best proposed defenses against website
ﬁngerprinting all have large overhead values [6], [16], [27] and
will inevitably slow down the network, hurting user experience.
Combining a defense with our browser improvements could
still result in reduced page load times while offering better
resilience against website ﬁngerprinting.
13
We investigated how Tor Browser loads web pages using
BLAST, our new logging, analysis and simulation tool. Ana-
lyzing BLAST logs, we found inordinately large queue wait
times and unnecessary round trips. We leveraged resource trees
to effectively represent web pages; with resource trees, the
BLAST simulator is able to predict how long it will take page
to load and how they will be loaded. This lets us easily observe
how much different browser improvements would speed up
page loading.
The analytical and predictive power of BLAST allows
us to make several important observations. We found that
browser performance on Tor, a high-latency environment, is
almost entirely dependent on round trips instead of bandwidth.
We observed that increasing resource loading capacity does
not