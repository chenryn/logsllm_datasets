    docker run --rm -it -e var="--vm 2 --timeout 20" --memory 512MB --name docker-stress docker-stress
    ```
5.  移回运行`docker stats`的终端，你会看到内存使用百分比飙升到几乎 100%。这不是一件坏事，因为它只占分配给运行容器的内存的一小部分。在本例中，它为 512 MB，仅为之前的四分之一:
    ```
    NAME            CONTAINER      MEM %     MEM USAGE / LIMIT
    docker-stress   bd84cf27e480   88.11%    451.1MiB / 512MiB
    ```
6.  一次运行多个容器，看看我们的`stats`命令如何响应。使用`-d`选项作为`docker run`命令的一部分，在主机系统的后台运行容器作为守护程序。两个`docker-stress`容器现在将各使用六名工人，但是我们的第一个映像，我们将命名为`docker-stress1`，仅限于`512MB`内存，而我们的第二个映像，命名为`docker-stress2`，仅运行 20 秒，将有无限的内存:
    ```
    docker run --rm -dit -e var="--vm 6 --timeout 60" --memory 512MB --name docker-stress1 docker-stress
    ca05e244d03009531a6a67045a5b1edbef09778737cab2aec7fa92eeaaa0c487
    docker run --rm -dit -e var="--vm 6 --timeout 20" --name docker-stress2 docker-stress
    6d9cbb966b776bb162a47f5e5ff3d88daee9b0304daa668fca5ff7ae1ee887ea
    ```
7.  Move back to the terminal running `docker stats`. You can see that only one container, the `docker-stress1` container, is limited to 512 MB, while the `docker-stress2` image is allowed to run on a lot more memory:
    ```
    NAME             CONTAINER       MEM %    MEM USAGE / LIMIT
    docker-stress1   ca05e244d030    37.10%   190MiB / 512MiB
    docker-stress2   6d9cbb966b77    31.03%   617.3MiB / 1.943GiB
    ```
    如果您稍等片刻，`docker-stress1`映像将自行运行:
    ```
    NAME             CONTAINER      MEM %    MEM USAGE / LIMIT
    docker-stress1   ca05e244d030   16.17%   82.77MiB / 512MiB
    ```
    注意
    这里我们没有涉及的一个选项是`--memory-reservation`选项。这也与`--memory`选项一起使用，需要设置为低于记忆选项。这是一个软限制，当主机系统上的内存不足时会激活，但不能保证会强制实现该限制。
本章的这一部分有助于确定如何运行容器和监控使用情况，以便在容器进入生产环境时，它们不会因耗尽所有可用内存而停止主机系统。现在，您应该能够识别您的映像使用了多少内存，并且如果长时间运行或内存密集型进程出现问题，您还可以限制可用的内存量。在下一节中，我们将了解我们的容器如何消耗主机系统磁盘上的设备读写资源。
# 管理容器磁盘的读写资源
运行中的容器消耗的 CPU 和内存通常是环境运行不佳的最大元凶，但是运行中的容器试图向主机的磁盘驱动器读取或写入太多数据时也可能会出现问题。这很可能比 CPU 或内存问题的影响要小，但是如果有大量数据传输到主机系统的驱动器，它仍然会导致争用并降低服务速度。
幸运的是，Docker 还为我们提供了一种方法来控制我们的运行容器可以执行的读写量。正如我们之前看到的，我们可以通过`docker run`命令使用许多选项来限制我们正在读取或写入设备磁盘的数据量。
`docker stats`命令还允许我们查看正在运行的容器之间的数据传输。它有一个专用列，可以使用我们的`docker stats`命令中的`BlockIO`值添加到我们的表中，该值代表对我们的主机磁盘驱动器或目录的读写:
```
docker stats --format "table {{.Name}}\t{{.Container}}\t{{.BlockIO}}"
```
如果我们的系统上没有任何正在运行的容器，前面的命令应该会为我们提供以下输出:
```
NAME                CONTAINER           BLOCK I/O
```
如果我们需要限制一个正在运行的容器可以移动到我们的主机系统的磁盘存储的数据量，我们可以从使用`docker run`命令的`--blkio-weight`选项开始。该选项代表**块输入输出重量**，允许我们将容器的相对重量设置在`10`和`1000`之间，并且相对于系统上运行的所有其他容器。所有容器将设置相同比例的带宽，即 500。如果任何容器的值为 0，此选项将被关闭:
```
docker run --blkio-weight  
```
我们可以使用的下一个选项是`--device-write-bps`，它将以每秒字节数的值限制指定设备可用的特定写入带宽。特定设备与容器在主机系统上使用的设备相关。该选项还有一个`iops (Input/Output) per seconds`选项也可以使用。以下语法提供了该选项的基本用法，其中限制值是设置为 MB 的数值:
```
docker run --device-write-bps : 
```
正如有一种方法可以限制主机系统磁盘的写入进程一样，也有一种方法可以限制可用的读取吞吐量。同样，它也有一个`iops (Input/Output) per seconds`选项可以使用，并将限制可以从您的运行容器中读取的数据量。以下示例使用`--device-read-bps`选项作为`docker run`命令的一部分:
```
docker run --device-read-bps : 
```
如果您坚持容器最佳实践，过度消耗磁盘输入或输出应该不是太大的问题。不过，没有理由认为这不会给你带来任何问题。正如您已经使用了 CPU 和内存一样，在您的服务在生产中实现之前，您的磁盘输入和输出应该在您运行的容器上进行测试。
## 练习 12.03:理解磁盘读写
本练习将让您熟悉如何查看运行容器的磁盘读写。它将允许您通过使用运行时可用的选项配置磁盘使用速度限制来开始运行容器:
1.  Open a new terminal window and run the following command:
    ```
    docker stats --format "table {{.Name}}\t{{.Container}}\t{{.BlockIO}}" 
    ```
    带有`BlockIO`选项的`docker stats`命令帮助我们监控从容器到主机系统磁盘的输入和输出的级别。
2.  启动容器，从 bash 命令行访问它。直接在运行的`docker-stress`映像上执行一些测试。压力应用确实为您提供了一些选项来控制容器和主机系统上的磁盘利用率，但它仅限于磁盘写入:
    ```
    docker run -it --rm --name docker-stress docker-stress /bin/bash
    ```
3.  与 CPU 和内存使用不同，块输入和输出显示容器使用的总量，因此它不会是动态的，并且会随着运行的容器执行更多的更改而改变。回到你正在运行的终端`docker stats`。输入输出见`0B`:
    ```
    NAME                CONTAINER           BLOCK I/O
    docker-stress       0b52a034f814        0B / 0B
    ```
4.  在这种情况下，您将使用 bash shell，因为它允许访问`time`命令来查看每个进程需要多长时间。使用`dd`命令，这是一个用于复制文件系统和备份的 Unix 命令。在下面的选项中，使用`if`(输入文件)选项创建我们的`/dev/zero`目录的副本，并使用`of`(输出文件)选项将其输出到`disk.out`文件。`bs`选项是块大小或一次应该读取的数据量，`count`是要读取的总块数。最后，将`oflag`值设置为`direct`，这意味着副本将避免缓冲区缓存，因此您将看到磁盘读写的真实值:
    ```
    time dd if=/dev/zero of=disk.out bs=1M count=10 oflag=direct
    10+0 records in
    10+0 records out
    10485760 bytes (10 MB, 10 MiB) copied, 0.0087094 s, 1.2 GB/s
    real    0m0.010s
    user    0m0.000s
    sys     0m0.007s
    ```
5.  Move back into the terminal running your `docker stats` command. You will see just over 10 MB of data sent to the host system's disk. Unlike CPU and memory, you do not see this data value go down after the transfer has occurred:
    ```
    NAME                CONTAINER           BLOCK I/O
    docker-stress       0b52a034f814        0B / 10.5MB
    ```
    您还会注意到*第 4 步*中的命令几乎是瞬间完成的，其中`time`命令显示只需`0.01s`实时完成。如果您限制可以写入磁盘的数据量，您将看到会发生什么，但是首先，退出正在运行的容器，以便它不再存在于我们的系统中。
6.  要再次启动我们的`docker-stress`容器，在`/dev/sda`设备驱动上设置`--device-write-bps`选项为`1MB`每秒:
    ```
    docker run -it --rm --device-write-bps /dev/sda:1mb --name docker-stress docker-stress /bin/bash
    ```
7.  Run the `dd` command again, preceded by the `time` command, to test how long it takes. You should see that the command takes a lot longer than what it did in *step 4*. The `dd` command is once again set to copy `1MB` blocks, `10` times:
    ```
    time dd if=/dev/zero of=test.out bs=1M count=10 oflag=direct
    ```
    因为容器被限制为每秒只能写入 1 MB，所以该命令需要 10 秒钟，如以下输出所示:
    ```
    10+0 records in
    10+0 records out
    10485760 bytes (10 MB, 10 MiB) copied, 10.0043 s, 1.0 MB/s
    real    0m10.006s
    user    0m0.000s
    sys     0m0.004s
    ```
我们已经能够很容易地看到我们的运行容器如何影响底层主机系统，特别是在使用磁盘读写时。我们还能够看到如何轻松限制可以写入设备的数据量，从而减少运行容器之间的争用。在下一节中，我们将快速回答如果您正在使用`docker-compose`您需要做什么的问题，并查看限制您的容器正在使用的资源数量。
# 容器资源和 Docker 组成
像 Kubernetes 和 Swarm 这样的编排者在控制和运行您的资源以及在需要额外资源时启动新主机方面有很大的帮助。但是如果你在你的系统或者测试环境中运行`docker-compose`，你会怎么做呢？幸运的是，前面提到的资源配置也能很好地与`docker-compose`配合使用。
在我们的`docker-compose.yml`文件中，在我们的服务下，我们可以使用`deploy`配置下的`resources`选项，并为我们的服务指定我们的资源限制。正如我们一直在使用`--cpus`、`--cpu_shares`和`--memory`等选项一样，我们也会在`docker-compose.yml`文件中使用与`cpus`、`cpu_shares`和`memory`相同的选项。
下面代码块中的示例`compose`文件正在部署我们在本章中使用的`docker-stress`映像。如果我们看一下*第 8 行*，可以看到`deploy`语句，后面是`resources`语句。这是我们可以设置容器限制的地方。和上一节一样，我们在*11*线上将`cpus`设置为`2`，在*12*线上将`memory`设置为`256MB`:
```
1 version: '3'
2 services:
3   app:
4     container_name: docker-stress
5     build: .