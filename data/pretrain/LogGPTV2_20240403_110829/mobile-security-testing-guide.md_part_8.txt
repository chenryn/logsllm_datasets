Data from another website you have visited or scanned (e.g. QR code) or
Data from a physical letter or physical entry point (e.g., data you receive only after signing a document at a bank).
Make sure that critical operations enforce the use of at least one additional channel to confirm user actions. These
channels must not be bypassed when executing critical operations. If you're going to implement an additional factor to
verify the user's identity, consider also one-time passcodes (OTP) via Google Authenticator.
Dynamic Analysis
Identify all of the tested application's critical operations (e.g., user enrollment, account recovery, and financial
transactions). Ensure that each critical operation requires at least one additional verification channel. Make sure that
directly calling the function doesn't bypass the usage of these channels.
References
OWASP Mobile Top 10 2016
M3 - Insecure Communication - https://www.owasp.org/index.php/Mobile_Top_10_2016-M3-
Insecure_Communication
OWASP MASVS
MSTG-NETWORK-1: "Data is encrypted on the network with TLS. The secure channel is used consistently
throughout the app."
MSTG-NETWORK-2: "The TLS settings are in line with current best practices, or as close as possible if the
mobile operating system does not support the recommended standards."
MSTG-NETWORK-5: "The app doesn't rely on a single insecure communication channel (e-mail or SMS) for
critical operations such as enrollment and account recovery."
59
Testing Network Communication
CWE
CWE-308 - Use of Single-factor Authentication
CWE-319 - Cleartext Transmission of Sensitive Information
Tools
bettercap - https://www.bettercap.org
Burp Suite - https://portswigger.net/burp/
OWASP ZAP - https://www.owasp.org/index.php/
tcpdump - https://www.androidtcpdump.com/
Testssl.sh - https://github.com/drwetter/testssl.sh
Wireshark - https://www.wireshark.org/
Android
Android supported Cipher suites -
https://developer.android.com/reference/javax/net/ssl/SSLSocket#Cipher%20suites
iOS
iOS supported Cipher suites - https://developer.apple.com/documentation/security/1550981-
ssl_cipher_suite_values?language=objc
IANA Transport Layer Security (TLS) Parameters
TLS Cipher Suites - https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4
OWASP TLS Cipher String Cheat Sheet
Recommendations for a cipher string -
https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/TLS_Cipher_String_Cheat_Sheet.md
SIM Swapping attacks
The SIM Hijackers - https://motherboard.vice.com/en_us/article/vbqax3/hackers-sim-swapping-steal-phone-
numbers-instagram-bitcoin
SIM swapping: how the mobile security feature can lead to a hacked bank account -
https://www.fintechnews.org/sim-swapping-how-the-mobile-security-feature-can-lead-to-a-hacked-bank-account/
NIST
FIPS PUB 186 - Digital Signature Standard (DSS)
SIM Swap Fraud
https://motherboard.vice.com/en_us/article/vbqax3/hackers-sim-swapping-steal-phone-numbers-instagram-
bitcoin
How to protect yourself against a SIM swap attack - https://www.wired.com/story/sim-swap-attack-defend-phone/
60
Testing Network Communication
IETF
RFC 6176 - https://tools.ietf.org/html/rfc6176
RFC 6101 - https://tools.ietf.org/html/rfc6101
RFC 2246 - https://www.ietf.org/rfc/rfc2246
RFC 4346 - https://tools.ietf.org/html/rfc4346
RFC 5246 - https://tools.ietf.org/html/rfc5246
RFC 8446 - https://tools.ietf.org/html/rfc8446
RFC 6979 - https://tools.ietf.org/html/rfc6979
RFC 8017 - https://tools.ietf.org/html/rfc8017
RFC 2631 - https://tools.ietf.org/html/rfc2631
RFC 7919 - https://tools.ietf.org/html/rfc7919
RFC 4492 - https://tools.ietf.org/html/rfc4492
RFC 4279 - https://tools.ietf.org/html/rfc4279
RFC 2631 - https://tools.ietf.org/html/rfc2631
RFC 8422 - https://tools.ietf.org/html/rfc8422
RFC 5489 - https://tools.ietf.org/html/rfc5489
RFC 4772 - https://tools.ietf.org/html/rfc4772
RFC 1829 - https://tools.ietf.org/html/rfc1829
RFC 2420 - https://tools.ietf.org/html/rfc2420
RFC 3268 - https://tools.ietf.org/html/rfc3268
RFC 5288 - https://tools.ietf.org/html/rfc5288
RFC 7465 - https://tools.ietf.org/html/rfc7465
RFC 7905 - https://tools.ietf.org/html/rfc7905
RFC 7539 - https://tools.ietf.org/html/rfc7539
RFC 6151 - https://tools.ietf.org/html/rfc6151
RFC 6234 - https://tools.ietf.org/html/rfc6234
RFC 8447 - https://tools.ietf.org/html/rfc8447#section-8
61
Cryptography in Mobile Apps
Cryptography for Mobile Apps
Cryptography plays an especially important role in securing the user's data - even more so in a mobile environment,
where attackers having physical access to the user's device is a likely scenario. This chapter provides an outline of
cryptographic concepts and best practices relevant to mobile apps. These best practices are valid independent of the
mobile operating system.
Key Concepts
The goal of cryptography is to provide constant confidentiality, data integrity, and authenticity, even in the face of an
attack. Confidentiality involves ensuring data privacy through the use of encryption. Data integrity deals with data
consistency and detection of tampering and modification of data. Authenticity ensures that the data comes from a
trusted source.
Encryption algorithms converts plaintext data into cipher text that conceals the original content. Plaintext data can be
restored from the cipher text through decryption. Encryption can be symmetric (secret-key encryption) or
asymmetric (public-key encryption). In general, encryption operations do not protect integrity, but some symmetric
encryption modes also feature that protection.
Symmetric-key encryption algorithms use the same key for both encryption and decryption. This type of encryption
is fast and suitable for bulk data processing. Since everybody who has access to the key is able to decrypt the
encrypted content, this method requires careful key management. Public-key encryption algorithms operate with
two separate keys: the public key and the private key. The public key can be distributed freely while the private key
shouldn't be shared with anyone. A message encrypted with the public key can only be decrypted with the private key.
Since asymmetric encryption is several times slower than symmetric operations, it's typically only used to encrypt
small amounts of data, such as symmetric keys for bulk encryption.
Hashing isn't a form of encryption, but it does use cryptography. Hash functions deterministically map arbitrary pieces
of data into fixed-length values. It's easy to compute the hash from the input, but very difficult (i.e. infeasible) to
determine the original input from the hash. Hash functions are used for integrity verification, but don't provide an
authenticity guarantee.
Message Authentication Codes (MACs) combine other cryptographic mechanisms (such as symmetric encryption or
hashes) with secret keys to provide both integrity and authenticity protection. However, in order to verify a MAC,
multiple entities have to share the same secret key and any of those entities can generate a valid MAC. HMACs, the
most commonly used type of MAC, rely on hashing as the underlying cryptographic primitive. The full name of an
HMAC algorithm usually includes the underlying hash function's type (for example, HMAC-SHA256 uses the SHA-256
hash function).
Signatures combine asymmetric cryptography (that is, using a public/private key pair) with hashing to provide
integrity and authenticity by encrypting the hash of the message with the private key. However, unlike MACs,
signatures also provide non-repudiation property as the private key should remain unique to the data signer.
Key Derivation Functions (KDFs) derive secret keys from a secret value (such as a password) and are used to turn
keys into other formats or to increase their length. KDFs are similar to hashing functions but have other uses as well
(for example, they are used as components of multi-party key-agreement protocols). While both hashing functions and
KDFs must be difficult to reverse, KDFs have the added requirement that the keys they produce must have a level of
randomness.
62
Cryptography in Mobile Apps
Identifying Insecure and/or Deprecated Cryptographic Algorithms (MSTG-
CRYPTO-4)
When assessing a mobile app, you should make sure that it does not use cryptographic algorithms and protocols that
have significant known weaknesses or are otherwise insufficient for modern security requirements. Algorithms that
were considered secure in the past may become insecure over time; therefore, it's important to periodically check
current best practices and adjust configurations accordingly.
Verify that cryptographic algorithms are up to date and in-line with industry standards. Vulnerable algorithms include
outdated block ciphers (such as DES and 3DES), stream ciphers (such as RC4), hash functions (such as MD5 and
SHA1), and broken random number generators (such as Dual_EC_DRBG and SHA1PRNG). Note that even
algorithms that are certified (for example, by NIST) can become insecure over time. A certification does not replace
periodic verification of an algorithm's soundness. Algorithms with known weaknesses should be replaced with more
secure alternatives.
Inspect the app's source code to identify instances of cryptographic algorithms that are known to be weak, such as:
DES, 3DES
RC2
RC4
BLOWFISH
MD4
MD5
SHA1
The names of cryptographic APIs depend on the particular mobile platform.
Please make sure that:
Cryptographic algorithms are up to date and in-line with industry standards. This includes, but is not limited to
outdated block ciphers (e.g. DES), stream ciphers (e.g. RC4), as well as hash functions (e.g. MD5) and broken
random number generators like Dual_EC_DRBG (even if they are NIST certified). All of these should be marked
as insecure and should not be used and removed from the application and server.
Key lengths are in-line with industry standards and provide protection for sufficient amount of time. A comparison
of different key lengths and protection they provide taking into account Moore's law is available online.
Cryptographic means are not mixed with each other: e.g. you do not sign with a public key, or try to reuse a
keypair used for a signature to do encryption.
Cryptographic parameters are well defined within reasonable range. This includes, but is not limited to:
cryptographic salt, which should be at least the same length as hash function output, reasonable choice of
password derivation function and iteration count (e.g. PBKDF2, scrypt or bcrypt), IVs being random and unique,
fit-for-purpose block encryption modes (e.g. ECB should not be used, except specific cases), key management
being done properly (e.g. 3DES should have three independent keys) and so on.
The following algorithms are recommended:
Confidentiality algorithms: AES-GCM-256 or ChaCha20-Poly1305
Integrity algorithms: SHA-256, SHA-384, SHA-512, Blake2
Digital signature algorithms: RSA (3072 bits and higher), ECDSA with NIST P-384
Key establishment algorithms: RSA (3072 bits and higher), DH (3072 bits or higher), ECDH with NIST P-384
Additionally, you should always rely on secure hardware (if available) for storing encryption keys, performing
cryptographic operations, etc.
For more information on algorithm choice and best practices, see the following resources:
"Commercial National Security Algorithm Suite and Quantum Computing FAQ"
63
Cryptography in Mobile Apps
NIST recommendations (2016)
BSI recommendations (2017)
Common Configuration Issues (MSTG-CRYPTO-1, MSTG-CRYPTO-2 and
MSTG-CRYPTO-3)
Insufficient Key Length
Even the most secure encryption algorithm becomes vulnerable to brute-force attacks when that algorithm uses an
insufficient key size.
Ensure that the key length fulfills accepted industry standards.
Symmetric Encryption with Hard-Coded Cryptographic Keys
The security of symmetric encryption and keyed hashes (MACs) depends on the secrecy of the key. If the key is
disclosed, the security gained by encryption is lost. To prevent this, never store secret keys in the same place as the
encrypted data they helped create. Developers often make the mistake of encrypting locally stored data with a static,
hard-coded encryption key and compiling that key into the app. This makes the key accessible to anyone who can use
a disassembler.
First, ensure that no keys or passwords are stored within the source code. This means you should check native code,
JavaScript/Dart code, Java/Kotlin code on Android and Objective-C/Swift in iOS. Note that hard-coded keys are
problematic even if the source code is obfuscated since obfuscation is easily bypassed by dynamic instrumentation.
If the app is using two-way SSL (both server and client certificates are validated), make sure that:
1. The password to the client certificate isn't stored locally or is locked in the device Keychain.
2. The client certificate isn't shared among all installations.
If the app relies on an additional encrypted container stored in app data, check how the encryption key is used. If a
key-wrapping scheme is used, ensure that the master secret is initialized for each user or the container is re-
encrypted with new key. If you can use the master secret or previous password to decrypt the container, check how
password changes are handled.
Secret keys must be stored in secure device storage whenever symmetric cryptography is used in mobile apps. For
more information on the platform-specific APIs, see the Testing Data Storage on Android and Testing Data
Storage on iOS chapters.
Weak Key Generation Functions
Cryptographic algorithms (such as symmetric encryption or some MACs) expect a secret input of a given size. For
example, AES uses a key of exactly 16 bytes. A native implementation might use the user-supplied password directly
as an input key. Using a user-supplied password as an input key has the following problems:
If the password is smaller than the key, the full key space isn't used. The remaining space is padded (spaces are
sometimes used for padding).
A user-supplied password will realistically consist mostly of displayable and pronounceable characters. Therefore,
only some of the possible 256 ASCII characters are used and entropy is decreased by approximately a factor of
four.
Ensure that passwords aren't directly passed into an encryption function. Instead, the user-supplied password should
be passed into a KDF to create a cryptographic key. Choose an appropriate iteration count when using password
derivation functions. For example, NIST recommends and iteration count of at least 10,000 for PBKDF2.
64
Cryptography in Mobile Apps
Weak Random Number Generators
It is fundamentally impossible to produce truly random numbers on any deterministic device. Pseudo-random number
generators (RNG) compensate for this by producing a stream of pseudo-random numbers - a stream of numbers that
appear as if they were randomly generated. The quality of the generated numbers varies with the type of algorithm
used. Cryptographically secure RNGs generate random numbers that pass statistical randomness tests, and are
resilient against prediction attacks.
Mobile SDKs offer standard implementations of RNG algorithms that produce numbers with sufficient artificial
randomness. We'll introduce the available APIs in the Android and iOS specific sections.
Custom Implementations of Cryptography
Inventing proprietary cryptographic functions is time consuming, difficult, and likely to fail. Instead, we can use well-
known algorithms that are widely regarded as secure. Mobile operating systems offer standard cryptographic APIs
that implement those algorithms.
Carefully inspect all the cryptographic methods used within the source code, especially those that are directly applied
to sensitive data. All cryptographic operations should use standard cryptographic APIs for Android and iOS (we'll write
about those in more detail in the platform-specific chapters). Any cryptographic operations that don't invoke standard
routines from known providers should be closely inspected. Pay close attention to standard algorithms that have been
modified. Remember that encoding isn't the same as encryption! Always investigate further when you find bit
manipulation operators like XOR (exclusive OR).
At all implementations of cryptography, you need to ensure that the following always takes place:
Worker keys (like intermediary/derived keys in AES/DES/Rijndael) are properly removed from memory after
consumption.
The inner state of a cipher should be removed from memory as soon as possible.
Inadequate AES Configuration
Advanced Encryption Standard (AES) is the widely accepted standard for symmetric encryption in mobile apps. It's an
iterative block cipher that is based on a series of linked mathematical operations. AES performs a variable number of
rounds on the input, each of which involve substitution and permutation of the bytes in the input block. Each round
uses a 128-bit round key which is derived from the original AES key.
As of this writing, no efficient cryptanalytic attacks against AES have been discovered. However, implementation
details and configurable parameters such as the block cipher mode leave some margin for error.
Weak Block Cipher Mode
Block-based encryption is performed upon discrete input blocks (for example, AES has 128-bit blocks). If the plaintext
is larger than the block size, the plaintext is internally split up into blocks of the given input size and encryption is
performed on each block. A block cipher mode of operation (or block mode) determines if the result of encrypting the
previous block impacts subsequent blocks.
ECB (Electronic Codebook) divides the input into fixed-size blocks that are encrypted separately using the same key.
If multiple divided blocks contain the same plaintext, they will be encrypted into identical ciphertext blocks which
makes patterns in data easier to identify. In some situations, an attacker might also be able to replay the encrypted
data.
65
Cryptography in Mobile Apps
Verify that Cipher Block Chaining (CBC) mode is used instead of ECB. In CBC mode, plaintext blocks are XORed with
the previous ciphertext block. This ensures that each encrypted block is unique and randomized even if blocks contain
the same information. Please note that it is best to combine CBC with an HMAC and/or ensure that no errors are
given such as "Padding error", "MAC error", "decryption failed" in order to be more resistant to a padding oracle
attack.
When storing encrypted data, we recommend using a block mode that also protects the integrity of the stored data,
such as Galois/Counter Mode (GCM). The latter has the additional benefit that the algorithm is mandatory for each
TLSv1.2 implementation, and thus is available on all modern platforms.
For more information on effective block modes, see the NIST guidelines on block mode selection.
Predictable Initialization Vector
CBC, OFB, CFB, PCBC mode require an initialization vector (IV) as an initial input to the cipher. The IV doesn't have
to be kept secret, but it shouldn't be predictable. Make sure that IVs are generated using a cryptographically secure
random number generator. For more information on IVs, see Crypto Fail's initialization vectors article.
Initialization Vectors in stateful operation modes
Please note that the usage of IVs is different when using CTR and GCM mode in which the initialization vector is often
a counter (in CTR combined with a nonce). So here using a predictable IV with its own stateful model is exactly what
is needed. In CTR you have a new nonce plus counter as an input to every new block operation. For example: for a
5120 bit long plaintext: you have 20 blocks, so you need 20 input vectors consisting of a nonce and counter. Whereas
in GCM you have a single IV per cryptographic operation, which should not be repeated with the same key. See
section 8 of the documentation from NIST on GCM for more details and recommendations of the IV.
Padding Oracle Attacks due to Weaker Padding or Block Operation
Implementations
In the old days, PKCS #7 (Public Key Cryptography Standards 7) was used as a padding mechanism when doing
asymmetric encryption. Now in modern Java environments it is referred to as PKCS #5. This mechanism is vulnerable
to the padding oracle attack. Therefore, it is best to use OEAP (Optimal Asymmetric Encryption Padding) (or PKCS #1
v2.0). Note that, even when using OAEP, you can still run into an issue known best as the Mangers attack as
described in the blog at Kudelskisecurity.
Note: AES-CBC with PKCS #5 has shown to be vulnerable to padding oracle attacks as well, given that the
implementation gives warnings, such as "Padding error", "MAC error", or "decryption failed". See The Padding Oracle
Attack for an example. Next, it is best to ensure that you add an HMAC after you encrypt the plaintext: after all a
66
Cryptography in Mobile Apps
ciphertext with a failing MAC will not have to be decrypted and can be discarded.