IDP认证用户结果的标志，这里为success，表示用户认证成功。
#### Assertion
Assertion是断言的意思，这里面包含的是用户的一些基本信息和属性。
其中包含的Issuer标签代表的意思和AuthnRequest一样，Signature也是类似，不过签名的内容不一样，在后续代码细节分析会看到签的是哪一部分。
#### Subject
  * NameID: 标识符，其中的Format属性为unspecified，表示IdP为其定义了格式，并假设SP知道如何解析来自 IdP的格式数据响应。例如，IdP给出一个格式数据"UserName=XXXXX Country=US"，SP得到断言，可以解析得到UserName为"XXXXX"。这里我们就只是一个字符username字符串格式，表示用户名为wewe
  * SubjectConfirmation: 用户如何进行认证的，这里method使用的bearer方式
  * SubjectConfirmationData: InResponseTo表示响应给谁，NotOnOrAfter表示在这之前有效，Recipient表示接收端点
  * Conditions: 限定Assertion有效时间，其中的带Audience相关标签是接收者的一些信息
  * AuthnStatement: idp对用户认证使用方式，认证机构等信息
  * AttributeStatement: 和用户有关的一些属性
## 通过OpenSAML源码看SAML SSO细节
还是之前那个项目，这里着重看SP生成AuthnRequest和IDP生成AuthnResponse生成以及IDP收到AuthnRequest和SP收到AuthnResponse的处理，其中的签名和摘要以及涉及到的一些转换和校验部分是重点。
### SP生成AuthnRequest
到摘要处调用栈如下：
    calculateDigest:719, Reference (org.apache.xml.security.signature)
    generateDigestValue:406, Reference (org.apache.xml.security.signature)
    generateDigestValues:206, Manifest (org.apache.xml.security.signature)
    sign:609, XMLSignature (org.apache.xml.security.signature)
    signObject:77, Signer (org.opensaml.xml.signature)
    signMessage:193, BaseSAML2MessageEncoder (org.opensaml.saml2.binding.encoding)
    doEncode:109, HTTPPostEncoder (org.opensaml.saml2.binding.encoding)
    encode:52, BaseMessageEncoder (org.opensaml.ws.message.encoder)
    sendMessage:224, SAMLProcessorImpl (org.springframework.security.saml.processor)
    sendMessage:42, ConfigurableSAMLProcessor (mujina.sp)
    sendMessage:148, AbstractProfileBase (org.springframework.security.saml.websso)
    sendAuthenticationRequest:107, WebSSOProfileImpl (org.springframework.security.saml.websso)
    initializeSSO:225, SAMLEntryPoint (org.springframework.security.saml)
    commence:152, SAMLEntryPoint (org.springframework.security.saml)
    sendStartAuthentication:215, ExceptionTranslationFilter
调用栈就是整个生成AuthnRequest的流程，这里主要看下摘要，摘的是哪一部分:
    http://mock-sp
xml内容是经过两个transform处理之后的内容:
`Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"`转换器会排除AuthnRequest中的Signature标签的内容，`Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"`会将xml规范化(移除注释等一些操作)并压缩，最后得到的内容就如上了。
然后对这一部分内容进行SHA-256摘要算法:
后续进行签名，到签名处调用栈如下:
    engineSign:190, RSASignature (sun.security.rsa)
    engineSign:1235, Signature$Delegate (java.security)
    sign:598, Signature (java.security)
    engineSign:133, SignatureBaseRSA (org.apache.xml.security.algorithms.implementations)
    sign:174, SignatureAlgorithm (org.apache.xml.security.algorithms)
    sign:628, XMLSignature (org.apache.xml.security.signature)
    signObject:77, Signer (org.opensaml.xml.signature)
    signMessage:193, BaseSAML2MessageEncoder (org.opensaml.saml2.binding.encoding)
    doEncode:109, HTTPPostEncoder (org.opensaml.saml2.binding.encoding)
    encode:52, BaseMessageEncoder (org.opensaml.ws.message.encoder)
    sendMessage:224, SAMLProcessorImpl (org.springframework.security.saml.processor)
    sendMessage:42, ConfigurableSAMLProcessor (mujina.sp)
    sendMessage:148, AbstractProfileBase (org.springframework.security.saml.websso)
    sendAuthenticationRequest:107, WebSSOProfileImpl
使用SP的私钥(在application.yml文件中有配置)，对SingedInfo进行签名:
    UEOuyyx4dWr3X0XoQryWQfSzNpXleQ5zSg9LayAEX7E=
经过这些处理之后，看到的AuthnRequest的xml就是之前抓包解码看到的了: