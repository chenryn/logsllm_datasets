by the request subsequence 𝜃 in 𝑆.
Case 2: 𝑠𝑖 is ∞. If we sampled a stack distance that is ∞, the
algorithm discards the object 𝑜 from the list and introduces a new
object at the end of the list. Recall that in the computation of a
Footprint Descriptor (FD), the first access to an object is counted as
infinite stack distance (see Section 2.2).
Thus, in each iteration, the sampled stack distance is approxi-
mately represented in the synthetic trace. As 𝑁 → ∞, the distri-
bution of unique bytes across the reuse subsequences in 𝑆 approxi-
mately converges to the 𝑃(𝑠) of trace Π. Now, since the rHRC can
be computed from 𝑃(𝑠) using Theorem 1, both traces Π and 𝑆 have
□
approximately the same rHRC.
THEOREM 4. Given a bFD, ⟨𝜆, 𝑃𝑟𝑏(𝑠, 𝑡), 𝑃𝑎𝑏(𝑠, 𝑡)⟩ and a size
distribution 𝑆𝑍 of an original trace Π, Algorithm 2 produces a
synthetic trace 𝑆 = {𝑟1, . . . , 𝑟𝑁 }, where 𝑟𝑖 is a tuple ⟨𝑡𝑖, 𝑜𝑖, 𝑧𝑖⟩ of
timestamp, object id and object size, and 𝑁 is the synthetic trace
length. As 𝑁 → ∞, the bHRC of traces 𝑆 and Π for an LRU cache
are approximately equal.
PROOF. Given a bFD ⟨𝜆, 𝑃𝑟𝑏(𝑠, 𝑡), 𝑃𝑎𝑏(𝑠, 𝑡)⟩, Algorithm 2 com-
putes 𝑃(𝑠) = 𝑡 𝑃𝑟𝑏(𝑠, 𝑡) and uses 𝑃(𝑠) for sampling the stack
trace 𝑆 approximately equals𝑠′≤𝑠 𝑃(𝑠′), i.e., rHRC of 𝑆 approx-
distance. Using Theorem 3, we know that the rHRC of the synthetic
imately equals the bHRC of Π. We will now show that rHRC and
bHRC of 𝑆 are equal, and hence, bHRC of 𝑆 approximately equals
bHRC of Π.
Let 𝑟ℎ𝑟𝑐(𝑠) (resp., 𝑏ℎ𝑟𝑐(𝑠)) be the probability that a reuse request
subsequence (resp., reuse byte subsequence) in 𝑆 contains exactly 𝑠
unique bytes. We will show that 𝑟ℎ𝑟𝑐(𝑠) = 𝑏ℎ𝑟𝑐(𝑠).
Let 𝑘 be an object of size 𝑧𝑘 in 𝑆 and 𝜃𝑘 be the set of reuse request
subsequences of 𝑆 that end in object 𝑘. The set 𝜃𝑘 consists of reuse
request subsequences such that the subsequence either (i) starts at the
beginning of the trace and ends in the first access for object 𝑘, or (ii)
that begin and end in object 𝑘. Now, the expected number of reuse
request subsequences in 𝜃𝑘 that contain 𝑠 unique bytes is given by
IMC ’21, November 2–4, 2021, Virtual Event, USA
Anirudh Sabnis and Ramesh K. Sitaraman
𝑟ℎ𝑟𝑐(𝑠).|𝜃𝑘| and the number of reuse byte subsequences that contain
𝑠 unique bytes and end in a byte that belongs to object 𝑘 is obtained
as 𝑟ℎ𝑟𝑐(𝑠).|𝜃𝑘|.𝑧𝑘. Therefore, if 𝐾 is the set of all objects that are
requested in 𝑆, the expected number of reuse byte subsequences in 𝑆
that contain 𝑠 unique bytes is given by,
𝐵𝑠 = 𝑟ℎ𝑟𝑐(𝑠)
|𝜃𝑘|.𝑧𝑘 .
(1)
Now, the term |𝜃𝑘|.𝑧𝑘 in the above expression gives us the number
of reuse byte subsequences that end in any byte of object 𝑘, and
thus, the summation across all objects𝑘∈𝐾 |𝜃𝑘|.𝑧𝑘, gives us the
total number of reuse byte subsequences in 𝑆. Let 𝐵 =𝑘∈𝐾 |𝜃𝑘|.𝑧𝑘.
𝑘∈𝐾
Equation 1 can be simplified as,
𝑟ℎ𝑟𝑐(𝑠) =
𝑘∈𝐾 |𝜃𝑘|𝑧𝑘
𝐵𝑠
=
𝐵𝑠
𝐵
= 𝑏ℎ𝑟𝑐(𝑠)
Since bHRC and rHRC of 𝑆 can be computed from 𝑏ℎ𝑟𝑐(𝑠) and
𝑟ℎ𝑟𝑐(𝑠), respectively, the bHRC of 𝑆 equals rHRC of 𝑆. As rHRC of 𝑆
approximately equals the bHRC of Π, the bHRC of 𝑆 approximately
equals the bHRC of Π.
□
4.2 How to use TRAGEN
The tool is written in python with around 2000 lines of code. The
tool can be accessed through a GUI or a command line interface. A
screenshot of the GUI is shown in Figure 5. The user is expected to
fill in the following details:
(1) Select hit rate type. Select if the synthetic trace is to have the
same RHR or BHR as the original.
(2) Enter trace length. Specify the number of requests in the syn-
thetic trace.
(3) Select traffic volume unit. Select if the traffic volume field in
the third column of the table will be input as requests/second or
Gigabits per second (Gbps).
(4) Select required traffic classes and specify the traffic volume.
Select traffic classes from the first column of the table and spec-
ify a traffic volume for the selected traffic classes in the third
column of the table. The synthetic trace will be similar to origi-
nal production traffic with the specified mix. The second column
provides a description of each choice. Each choice is either a
pure traffic class such as video, web, or social media traffic class.
Or, it is a traffic mix itself, e.g., EU a mix of all traffic served by
a cache located in Europe in the production CDN.
(5) Generate. Hit the generate button and TRAGEN will start pro-
ducing the synthetic trace.
Based on the selected hit rate type, the tool uses the FD or the
bFD calculus to generate the properties of the traffic mix. The tool
then implements the algorithm defined in Section 4.1 to produce
a synthetic trace. A command line version of the tool will also be
made available.
Performance. The tool implements a 𝐵+-tree [15] to represent the
cache (list 𝐶 in Algorithm 2). Both insert and delete take time
O(log 𝑚), where 𝑚 is the number of objects in the cache. In each
iteration of the Algorithm 2, we incur a deletion and insertion, there-
fore if 𝑁 is the length of required trace, the tool runs with time
complexity O(𝑁 log 𝑚). The tool takes around 580 to 640 seconds
373
Figure 5: TRAGEN GUI
to generate a trace of 10 million requests for the four traffic classes
in Table 1.
Downloading TRAGEN. We have made the tool open-source and
is publicly available for download2. Apart from the code that is used
to generate traces, we have also released the code that computes the
FDs, bFDs and SZ from original traces. So, in addition to our traffic
models, users can compute and seed TRAGEN with traffic classes
from their own environment.
5 Empirical evaluation
We empirically validate TRAGEN by showing that it produces a
synthetic trace that is similar to the original production trace, for a
range of commonly-used caching policies and for a range of traffic
classes from Akamai’s production CDN. We collect four produc-
tion traces from the Akamai CDN, each consisting of hundreds of
millions of requests made for a few million objects. The traces are
described in Table 1. The VIDEO and WEB traces are collected
from CDN servers that are predominantly serving video and web
traffic, respectively. The EU and TC traces are collected from CDN
servers that serve a mix of traffic. The EU trace consists of 10 differ-
ent traffic classes with varying characteristics (Table 3), while TC
trace consists of requests for Download, Images, Media and Web
(Table 2). In each experiment, we generate a synthetic trace of 100
million requests, unless otherwise specified.
5.1 TRAGEN validation
We first show results individually for traces in Table 1 and then
show results for the traffic mixes.
2It can be downloaded from https://github.com/UMass-LIDS/Tragen.
TRAGEN: A Synthetic Trace Generator for Realistic Cache Simulations
IMC ’21, November 2–4, 2021, Virtual Event, USA
Trace
Length (mil. reqs)
Req. rate (reqs/sec)
Traffic (GBps)
No. of objects (mil.)
Avg. obj. size (KB)
Year collected
Video (V) Web (W)
6167
7414
2.29
279
291
2015
596
382
1.5
127
1756
2018
TC
288
820
0.36
51
122
2018
EU
595
382
1.31
99
1268
2015
Table 1: Trace description
Figure 6: rHRC of original and synthetic traces in Table 1
Figure 7: bHRC of original and synthetic traces in Table 1
We compute average difference defined as𝑠∈𝐶 |𝐻𝑅𝐶𝑜𝑟𝑖𝑔𝑖𝑛𝑎𝑙 (𝑠) −
Validation by comparing hit rate curves. We show that the HRCs
of original and synthetic trace are similar for a LRU cache. For
rHRCs, we use FDs of the original traces in Table 1 to produce
synthetic traces. To show that the bHRCs are equal, we use bFDs
to produce synthetic traces. The rHRCs and bHRCs of the original
and the synthetic traces are shown in Figure 6 and Figure 7, respec-
tively. The curves are computed at intervals of 200 MB cache size.
𝐻𝑅𝐶𝑠𝑦𝑛𝑡ℎ𝑒𝑡𝑖𝑐(𝑠)|/|𝐶|, where 𝐶 is the set of all cache sizes the hit
rates are computed for. We observe an average difference of 2.4e-07,
8.2e-07, 1.6e-06, and 4.6e-07 in the rHRCs and an average difference
of 4.6e-07, 1.4e-06, 1.1e-06, and 5.6e-07 in the bHRCs of traces
VIDEO, WEB, TC and EU, respectively. Thus, the average differ-
ence is extremely small and the HRCs of the original and synthetic
traces are nearly identical.
374
Validation by simulating different caching policies. We empiri-
cally validate that TRAGEN produces a synthetic trace that will
yield similar RHRs and BHRs as the original trace by implementing
and running cache simulations for commonly-used caching policies
that are listed below.
(1) FIFO. The First In First Out caching policy evicts objects from
the cache in the order they were inserted. FIFO is easily imple-
mentable, provides comparable hit rates as LRU in practice [20],
and provides better performance on SSDs as compared to other
caching policies [36]. Hence, we expect FIFO to be widely used.
(2) RANDOM. RANDOM caching policy evicts a random object
from cache upon the insertion of a new object. Due to its simplic-
ity, RANDOM caching policy and its variants are widely studied
[1, 33] and used in practice (for instance, in ARM Processors
[58]).
(3) SLRU (and S4LRU). Segmented LRU divides the cache into two
segments that individually run the LRU caching policy. Upon a
cache miss, the requested object is first inserted into the lower
segment. On a subsequent request, if the requested object is in the
lower segment, it is moved to the upper segment. SLRU is used
as the caching policy for Facebook photo caching [27]. S4LRU is
similar to SLRU, but divides the cache into four segments.
(4) MARKERS. The markers caching policy runs in phases. At the
beginning of each phase, all objects in the cache are unmarked.
On a cache hit, the requested object is marked. On a cache miss,
the requested object is inserted into the cache and marked. Upon
insertion, one of the unmarked objects is evicted. A new phase
begins when all objects in the cache are marked [1, 37].
(5) CLOCK. The clock caching policy maintains a circular list of
the objects that are present in cache and an iterator that points
to the last examined object in the list. To evict an object, a R
(referenced) bit is inspected at the iterators location. If R is 0, the
object at the iterators location is evicted. If not, R is unset and
the iterator is incremented to point to the next object. The process
repeats till an object is evicted from the cache [16].
(6) PLRU. The Pseudo-LRU caching policy is a tree based policy
that approximates LRU. PLRU arranges objects in the cache as
leaves of a binary tree and maintains pointers in the non leaf nodes
to point to an object that has not been recently used. This object
is evicted upon an insertion of a new object into the cache. These
pointers are updated on every cache access and eviction. PLRU
is used in the TC1798 CPU and several POWERPC variants
(MPC603E, MPC755, MPC7448) [46].
We verify that an LRU cache yields the same RHR and BHR
for the original and synthetic traces, across all the traces and cache
sizes that we tested on. The results for the VIDEO and EU trace
are shown in Figure 10. This validates Theorem 3 and Theorem 4.
The RHRs of the synthetic trace and the original trace are similar
for the other caching policies with a maximum difference of around
5% that is observed for the EU trace on a cache of size 2 TB that
uses CLOCK caching policy. For the other caching policies, the
difference in RHRs for the original and synthetic trace is below 2%
across all cache sizes. We observe similar results in the BHRs for the
tested caching policies. We observe a maximum difference of around
3.5% in the BHRs for the VIDEO trace on a cache size of 2TB that
uses the MARKERS caching policy. The difference is smaller than
2% for other caching policies for the VIDEO and EU trace.
0.02.55.07.510.0Cache size (TB)0.00.20.40.60.81.0Request hit rate (RHR)EU-SynthEU-OrigW-SynthW-OrigTC-SynthTC-OrigV-SynthV-Orig0.02.55.07.510.0Cache size (TB)0.00.20.40.60.81.0Byte hit rate (BHR)EU-SynthEU-OrigW-SynthW-OrigV-SynthV-OrigTC-SynthTC-OrigIMC ’21, November 2–4, 2021, Virtual Event, USA
Anirudh Sabnis and Ramesh K. Sitaraman
Thus, TRAGEN produces a synthetic trace that yields a RHR
(resp., BHR) that differs from the RHR (resp., BHR) of the original
trace by 1.5% (resp., 1%) on average and at most 5% (resp., 3%) in
the worst-case, across all cache sizes, caching policies and traces in
our evaluation.
Trace
Length (mil. reqs)
Req. rate (reqs/sec)
Traffic (MBps)
No. of objects (mil.)
Avg. obj. size (KB)