approach to achieve program obliviousness. It is a set of
compiler and hardware modiﬁcations that enables execution of
an ORAM controller inside an FPGA card used for sensitive
data accesses. Their work offers only a “conceptual” approach to
the problem. In particular, their assume “unbounded resources,
and no caching” and do not target any modern processor
(Introduction, [22]). In contrast, the focus of this work is to
design a real-world system capable of running on a widely
available Intel CPU architecture.
Opaque [59] is a secure Spark database system where
components of the database server are run in SGX enclaves.
Opaque is complementary to ZeroTrace: their focus is to
support oblivious queries for a database system; our focus
is to support arbitrary read/write operations. Each system is
superior in supporting its chosen task.
3) Attacks and Defenses: The primary attack vectors against
SGX in literature stem from the fact that enclaves share
physical resources with other applications and interact with the
OS to perform syscalls and paging. Using a shared resource
(e.g., a cache [16], [19], [23], [31], [45], [47], [55], [58]
or branch predictor [21]) can be detected by an adversary
and can reveal ﬁne-grain details about program execution. In
SGX-based systems, there is an arms race currently underway
between defenses that detect if an enclave is undergoing a
shared resource attack based on frequency or magnitude of
enclave exits/interruptions (e.g., T-SGX [38] and Deja Vu [8])
and new attacks (e.g., Brasser et al. [6], Wang et al. [48])
that work towards reducing the required enclave exits. Gruss
et al. [15] recently demonstrated a new direction for defense
mechanisms against cache side-channel by leveraging Hardware
Transactional Memory(HTM).
Similarly, a malicious OS can induce and monitor appli-
13
cation page fault behavior to learn program memory access
patterns [53]. Bulck et al. [7] demonstrated attacks that infer
page accesses through bits set in the page tables without
resorting to page faults. Shinde et al. [39] proposed compiler-
based defense mechanisms against page-level attacks by moving
secret-dependent control and data ﬂows into the same page.
However their approach is still susceptible to cache attacks.
ZeroTrace protects against all shared resource and page
fault-related attacks by converting the program to an oblivious
representation.
VIII. CONCLUSION
This paper designs and implements ZeroTrace, the ﬁrst
library of oblivious memory primitives for a real secure
hardware platform, optimized for Intel’s SGX. Our work
argues for building applications out of modules at the memory-
service interface level. We provide several oblivious memory
services, the core block being an oblivious block-level memory
controller that can defend against software attacks from an
active adversary. While these services can be connected directly
to co-located applications in the cloud, they can also be used
to implement remote ﬁle storage systems – granting constant
WAN bandwidth overhead solutions at the expense of trusting
the SGX mechanism.
REFERENCES
[1]
I. Anati, S. Gueron, S. Johnson, and V. Scarlata, “Innovative technology
for cpu based attestation and sealing,” 2013.
[2] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe,
J. Lind, D. Muthukumaran, D. O’Keeffe, M. L. Stillwell, D. Goltzsche,
D. Eyers, R. Kapitza, P. Pietzuch, and C. Fetzer, “Scone: Secure linux
containers with intel sgx,” in 12th USENIX Symposium on Operating
Systems Design and Implementation (OSDI 16), 2016, pp. 689–703.
[3] M. Backes, A. Kate, M. Maffei, and K. Pecina, “Obliviad: Provably
secure and practical online behavioral advertising,” in Security and
Privacy (SP), 2012 IEEE Symposium on, 2012, pp. 257–271.
[4] A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from an
untrusted cloud with haven,” ACM Transactions on Computer Systems
(TOCS), p. 8, 2015.
[5] K. D. Bowers, A. Juels, and A. Oprea, “Proofs of retrievability: Theory
and implementation,” in Proceedings of the 2009 ACM Workshop on
Cloud Computing Security, 2009, pp. 43–54.
[7]
[6] F. Brasser, U. M¨uller, A. Dmitrienko, K. Kostiainen, S. Capkun, and
A. Sadeghi, “Software grand exposure: SGX cache attacks are practical,”
CoRR, 2017.
J. V. Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx,
“Telling your secrets without page faults: Stealthy page table-based
attacks on enclaved execution,” in 26th USENIX Security Symposium
(USENIX Security 17). Vancouver, BC: USENIX Association, 2017,
pp. 1041–1056.
[8] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang, “Detecting privileged
side-channel attacks in shielded execution with d´ej´a vu,” in Proceedings
of the 2017 ACM on Asia Conference on Computer and Communications
Security, 2017, pp. 7–18.
[9] V. Costan and S. Devadas, “Intel sgx explained,” 2016.
[10] S. Devadas, M. van Dijk, C. W. Fletcher, L. Ren, E. Shi, and D. Wichs,
“Onion oram: A constant bandwidth blowup oblivious ram,” in Theory
of Cryptography Conference, 2016, pp. 145–174.
[11] C. W. Fletcher, M. v. Dijk, and S. Devadas, “A secure processor
architecture for encrypted computation on untrusted programs,” in
Proceedings of
the Seventh ACM Workshop on Scalable Trusted
Computing, ser. STC ’12. New York, NY, USA: ACM, 2012, pp. 3–8.
[Online]. Available: http://doi.acm.org/10.1145/2382536.2382540
[12] C. Gentry, “Fully homomorphic encryption using ideal lattices,” in
Proceedings of the Forty-ﬁrst Annual ACM Symposium on Theory of
Computing, ser. STOC ’09. New York, NY, USA: ACM, 2009, pp. 169–
178. [Online]. Available: http://doi.acm.org/10.1145/1536414.1536440
[13] O. Goldreich and R. Ostrovsky, “Software protection and simulation on
oblivious rams,” J. ACM, pp. 431–473, 1996.
[14] T. C. Group, “Trusted computing platform alliance (tcpa) main speciﬁca-
tion version 1.1b,” https://www.trustedcomputinggroup.org/specs/TPM/
TCPA Main TCG Architecture v1 1b.pdf, 2003.
[15] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa,
“Strong and efﬁcient cache side-channel protection using hardware
transactional memory.” USENIX Association, August 2017.
[16] D. Gullasch, E. Bangerter, and S. Krenn, “Cache games–bringing access-
based cache attacks on aes to practice,” in Security and Privacy (SP),
2011 IEEE Symposium on, 2011, pp. 490–505.
[17] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A distributed
sandbox for untrusted computation on secret data,” in 12th USENIX
Symposium on Operating Systems Design and Implementation (OSDI
16), 2016, pp. 533–549.
Intel, “Intel.”
[18]
[19] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar, “Wait a minute!
a fast, cross-vm attack on aes,” in International Workshop on Recent
Advances in Intrusion Detection, 2014, pp. 299–319.
[20] P. Kocher, J. Jaffe, and B. Jun, “Differential power analysis,” in Advances
in cryptologyCRYPTO99, 1999, pp. 789–789.
[21] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado, “Inferring
ﬁne-grained control ﬂow inside sgx enclaves with branch shadowing,”
arXiv preprint arXiv:1611.06952, 2016.
[22] C. Liu, A. Harris, M. Maas, M. Hicks, M. Tiwari, and E. Shi, “Ghostrider:
A hardware-software system for memory trace oblivious computation,”
ACM SIGARCH Computer Architecture News, pp. 87–101, 2015.
[23] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache
side-channel attacks are practical,” in Security and Privacy (SP), 2015
IEEE Symposium on, 2015, pp. 605–622.
[24] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi, K. Asanovic,
J. Kubiatowicz, and D. Song, “Phantom: Practical oblivious computation
in a secure processor,” in Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security, 2013, pp. 311–324.
[25] S. Matetic, M. Ahmed, K. Kostiainen, A. Dhar, D. Sommer, A. Gervais,
A. Juels, and S. Capkun, “Rote: Rollback protection for trusted execution,”
2017.
J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An execution infrastructure for tcb minimization,” SIGOPS
Oper. Syst. Rev., vol. 42, no. 4, pp. 315–328, Apr. 2008. [Online].
Available: http://doi.acm.org/10.1145/1357010.1352625
[26]
[27] F. McKeen, I. Alexandrovich, I. Anati, D. Caspi, S. Johnson, R. Leslie-
Hurd, and C. Rozas, “Intel&reg; software guard extensions (intel&reg;
sgx) support for dynamic memory management inside an enclave,” in
Proceedings of the Hardware and Architectural Support for Security
and Privacy 2016, 2016, pp. 10:1–10:9.
[28] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. R. Savagaonkar, “Innovative instructions and
software model for isolated execution,” in Proceedings of the 2Nd
International Workshop on Hardware and Architectural Support for
Security and Privacy, 2013, pp. 10:1–10:1.
[29] D. Molnar, M. Piotrowski, D. Schultz, and D. Wagner, “The program
counter security model: Automatic detection and removal of control-
ﬂow side channel attacks,” in International Conference on Information
Security and Cryptology, 2005, pp. 156–168.
[30] O. Ohrimenko, F. Schuster, C. Fournet, A. Mehta, S. Nowozin,
K. Vaswani, and M. Costa, “Oblivious multi-party machine learning on
trusted processors,” in Proceedings of the 25th USENIX Conference on
Security Symposium, 2016.
[31] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and
countermeasures: the case of aes,” in Cryptographers Track at the
RSA Conference, 2006, pp. 1–20.
[32] A. Rane, C. Lin, and M. Tiwari, “Raccoon: Closing digital side-channels
through obfuscated execution,” in Proceedings of the 24th USENIX
Conference on Security Symposium, 2015, pp. 431–446.
14
[53] Y. Xu, W. Cui, and M. Peinado, “Controlled-channel attacks:
Deterministic side channels for untrusted operating systems,” in 2015
IEEE Symposium on Security and Privacy, 2015, pp. 640–656.
[54] K. Yang, M. Hicks, Q. Dong, T. Austin, and D. Sylvester, “A2:
Analog malicious hardware,” in Security and Privacy (SP), 2016 IEEE
Symposium on, 2016, pp. 18–37.
[55] Y. Yarom and K. Falkner, “Flush+ reload: a high resolution, low noise,
l3 cache side-channel attack,” in Proceedings of the 23rd USENIX
conference on Security Symposium, 2014, pp. 719–732.
[56] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar, “Native client: A sandbox
for portable, untrusted x86 native code,” in Proceedings of
the
2009 30th IEEE Symposium on Security and Privacy, ser. SP ’09.
Washington, DC, USA: IEEE Computer Society, 2009, pp. 79–93.
[Online]. Available: http://dx.doi.org/10.1109/SP.2009.25
[57] M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma, M. McCauley, M. J.
Franklin, S. Shenker, and I. Stoica, “Resilient distributed datasets: A fault-
tolerant abstraction for in-memory cluster computing,” in Proceedings
of the 9th USENIX conference on Networked Systems Design and
Implementation, 2012, pp. 2–2.
[58] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-tenant
side-channel attacks in paas clouds,” in Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security, 2014,
pp. 990–1003.
[59] W. Zheng, A. Dave, J. G. Beekman, R. A. Popa, J. E. Gonzalez, and
I. Stoica, “Opaque: An oblivious and encrypted distributed analytics
platform,” in 14th USENIX Symposium on Networked Systems Design
and Implementation (NSDI 17), 2017, pp. 283–298.
[33] L. Ren, C. Fletcher, A. Kwon, E. Stefanov, E. Shi, M. Van Dijk,
to
the 24th USENIX Conference
Berkeley, CA, USA:
[Online]. Available:
and S. Devadas, “Constants count: Practical
oblivious ram,” in Proceedings of
on Security Symposium,
USENIX Association, 2015, pp. 415–430.
http://dl.acm.org/citation.cfm?id=2831143.2831170
improvements
ser. SEC’15.
[34] L. Ren, C. W. Fletcher, X. Yu, M. Van Dijk, and S. Devadas, “Integrity
veriﬁcation for path oblivious-ram,” in High Performance Extreme
Computing Conference (HPEC), 2013 IEEE, 2013, pp. 1–6.
[35] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard, “Malware
guard extension: Using SGX to conceal cache attacks,” 2017.
[36] N. Sehatbakhsh, A. Nazari, A. Zajic, and M. Prvulovic, “Spectral
proﬁling: Observer-effect-free proﬁling by monitoring em emanations,” in
Microarchitecture (MICRO), 2016 49th Annual IEEE/ACM International
Symposium on, 2016, pp. 1–11.
[37] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li, “Oblivious ram with o
((logn) 3) worst-case cost,” in International Conference on The Theory
and Application of Cryptology and Information Security, 2011, pp. 197–
214.
[38] M.-W. Shih, S. Lee, T. Kim, and M. Peinado, “T-SGX: Eradicating
Controlled-Channel Attacks Against Enclave Programs,” in Proceedings
of the 2017 Annual Network and Distributed System Security Symposium
(NDSS), 2017.
[39] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena, “Preventing page
faults from telling your secrets,” in Proceedings of the 11th ACM on
Asia Conference on Computer and Communications Security, 2016, pp.
317–328.
[40] S. Shinde, D. L. Tien, S. Tople, , and P. Saxena, “Panoply: Low-tcb
linux applications with sgx enclaves,” in NDSS, 2017.
[41] E. Stefanov and E. Shi, “Oblivistore: High performance oblivious cloud
storage,” in Security and Privacy (SP), 2013 IEEE Symposium on, 2013,
pp. 253–267.
[42] E. Stefanov, E. Shi, and D. Song, “Towards practical oblivious ram,”
arXiv preprint arXiv:1106.3652, 2011.
[43] E. Stefanov, M. Van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu, and
S. Devadas, “Path oram: an extremely simple oblivious ram protocol,”
in Proceedings of the 2013 ACM SIGSAC conference on Computer &
Communications Security (CCS’13), 2013, pp. 299–310.
[44] G. E. Suh, C. W. O’Donnell, and S. Devadas, “Aegis: A single-chip
secure processor,” Information Security Technical Report, vol. 10, no. 2,
pp. 63–73, 2005.
[45] E. Tromer, D. A. Osvik, and A. Shamir, “Efﬁcient cache attacks on aes,
and countermeasures,” Journal of Cryptology, pp. 37–71, 2010.
[46] C.-C. Tsai, K. S. Arora, N. Bandi, B. Jain, W. Jannen, J. John, H. A.
Kalodner, V. Kulkarni, D. Oliveira, and D. E. Porter, “Cooperation
and security isolation of library oses for multi-process applications,” in
Proceedings of the Ninth European Conference on Computer Systems,
2014, pp. 9:1–9:14.
J. van de Pol, N. P. Smart, and Y. Yarom, “Just a little bit more,” in
Cryptographers Track at the RSA Conference, 2015, pp. 3–21.
[47]
[48] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler,
H. Tang, and C. A. Gunter, “Leaky cauldron on the dark land:
Understanding memory side-channel hazards in sgx,” arXiv preprint
arXiv:1705.07289, 2017.
[49] X. Wang, H. Chan, and E. Shi, “Circuit oram: On tightness of the
goldreich-ostrovsky lower bound,” in Proceedings of the 22Nd ACM
SIGSAC Conference on Computer and Communications Security, 2015,
pp. 850–861.
[50] X. S. Wang, K. Nayak, C. Liu, T.-H. H. Chan, E. Shi, E. Stefanov, and
Y. Huang, “Oblivious data structures,” in Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security, 2014,
pp. 215–226.
[51] X. S. Wang, K. Nayak, C. Liu, T. Chan, E. Shi, E. Stefanov, and
Y. Huang, “Oblivious data structures,” in Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security. ACM,
2014, pp. 215–226.
[52] P. Williams and R. Sion, “Single round access privacy on outsourced
storage,” in Proceedings of the 2012 ACM Conference on Computer
and Communications Security, 2012, pp. 293–304.
15