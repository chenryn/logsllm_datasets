telephony situation, the device may send command to answer,
reject or terminate an incoming call. What is more, the device
is able to dial arbitrary number resulting in a outgoing calls.
All
the functions mentioned above could be done on
a locked Android phone. Under our attack model, we can
successfully force the phone to connect to the HFP-enabled
device thus taking over the telephony function. For example,
the device can record an incoming call and answer with
prepared voice ﬁle.
Attack: Voice Command Injection. Besides the telephony
function, we found the HFP can also trigger the Google Voice
Assistant. And by default,
this Google service will allow
Bluetooth headset to send voice command even when the
phone is securely locked. In the attack, we ﬁrst trigger the
assistant and open the audio connection. Then we can inject
any voice command it supports. However, we found the voice
feedback is carried by A2DP rather than HFP SCO channel.
So the device could claim the A2DP proﬁle at same time and
once connected, the phone will send the voice feedback to
the device. As a consequence, the attacker is able to inject
commands and steal information through the voice channel
stealthily.
D. Other Proﬁles
Besides the proﬁles we tested above, SIM Access (SAP),
Message Access (MAP), Phone Book Access (PBAP) and
Object Push Proﬁle (OPP) are potential targets. However, those
proﬁles require the Bluetooth device to be the initiator and
the phone to be the acceptor, which is opposite to the attack
ﬂow described before (see Section IV-B). As a result, the
user will be notiﬁed when the Bluetooth device requests to
connect under those proﬁles and the request has to be approved
manually, making the attack less stealthy.
Fig. 7: Experimental Devices.
VI.
IMPLEMENTATIONS AND EVALUATIONS
In this section, we introduce the technical implementations
of our attacks and discuss its scope.
Hardware Setup. We used a Raspberry Pi 2 (900MHz quad-
core ARM CPU with 1GB memory) as the attack device, as
shown in Figure 7. It runs Raspbian, a customized Linux OS.
Also, a CSR8510 Bluetooth USB dongle is attached because
no built-in Bluetooth chip is on Raspberry Pi 2. In practice, a
bare-metal device equipped with low-cost Bluetooth chip [9]
is sufﬁcient to launch our attacks. The smartphone used as the
host is Google Pixel 2 equipped with Android 8.1.
Implementations. We implemented a prototype of attack
program (for Raspberry Pi 2) with around 1,100 Python lines
of code. Our implementation was mainly based on the Py-
Bluez [16] package which encapsulates the build-in BlueZ [12]
(Linux Bluetooth protocol stack) of Raspbian and could man-
age the system Bluetooth resources. The main feature provided
by PyBluez is to establish an L2CAP or RFCOMM connection.
Also, some open-source softwares or libraries are integrated
into our attack program for speciﬁc purposes. In details, the
HID attack was implemented utilizing raw L2CAP channel
directly. To the PAN attack, tcpdump [18] and dnsmasq [13]
are used to sniff network trafﬁc and set up DHCP/DNS servers.
In the HFP attack, we used pulseaudio [15] to handle the
audio processing and ofono [17] to verify the feasibility of this
attack. In the real attack, we used raw RFCOMM to achieve
it.
Besides, a malicious Android app is needed to assist
launching the BadBluetooth attack. Its functionality is simple,
mainly for connecting to the Bluetooth device. We invoked
Android hidden APIs to implement such a requirement, as
illustrated in Table V.
10
Bluetooth AppAppsAppsHands-Free UnitAndroid OSConnect to HFIncoming callsOutgoing callsVoice commandTABLE V: Attack Implementations on Android
Attack
HID
PAN
HFP
Invoked APIs
BluetoothInputDevice.connect()
BluetoothPan.setBluetoothTethering()
BluetoothPan.connect()
BluetoothHeadset.connect()
TABLE VI: Attack Results
Phone Brand
OS
Vulnerable
Google Pixel 2
Google Nexus 6
Google Nexus 6
Sony Xperia XZs
Samsung Galaxy S7
Huawei P10
Meizu M3 Note
‡:Exclude Network Consumption Attack
∗:Exclude Voice Command Injection Attack
AOSP Android 8.1
AOSP Android 7.1
AOSP Android 6.0
Sony Ofﬁcial Android 8.0
Samsung Ofﬁcial Android 7.0
Huawei Ofﬁcial Android 8.0
Meizu Ofﬁcial Android 5.1
Yes
Yes‡
Yes‡
Yes‡
Yes‡
Yes‡∗
Yes‡∗
Scope of Attacks. To evaluate the scope of our attacks, we
selected the other 6 Android phones equipped with different
Android OSes (from Android 5.1 to the latest Android 8.1)
and tested the attacks against them. In our experiment, Google
Voice Assistant
is only available on the phones equipped
with Google Service Framework (GSF). Therefore, the voice
command injection attack was not tested on Huawei P10 and
Meizu M3 Note. Besides, we found the WRITE_SETTINGS
permission is needed to launch network consumption attack
except Google Pixel 2 (Android 8.1). Except for the above
two attacks, all the other attacks were successfully launched
on all phones as listed in Table VI.
VII. PROFILE BINDING FOR ANDROID
The design ﬂaws of the Bluetooth stack and the BadBlue-
tooth attacks described in this paper should be ﬁxed timely. In
this section, we propose a lightweight solution named Proﬁle
Binding for Android, which provides a ﬁne-grained control for
the Bluetooth proﬁles and better visibility of proﬁles to user.
A. Overview
The high-level idea of our protection mechanism is to
enhance the control of Bluetooth proﬁles and prevent
the
unapproved changes of proﬁles. In particular, we bind the
device with a permitted proﬁle list and prohibit other proﬁle
connections. In practice, when processing a pairing request, the
system will prompt a selection list containing the advertised
proﬁles of the external Bluetooth device for the user to
approve. After that, the system will create a binding policy
based on the user’s selection, and further mediate every proﬁle
connection intent to enforce the policy checking.
As a result, this mechanism could let user vet the device
proﬁle and prevent unnoticed proﬁle changing. Meanwhile,
the silent pairing weakness is immediately addressed since the
pairing process could not be hidden to the user anymore.
Fig. 8: Overview of the Proﬁle Binding mechanism. The black
lines show the original communication ﬂow, while the white
blocks and blue lines represent our defense framework.
Architecture. Figure 8 illustrates the updated architecture of
the Android Bluetooth subsystem that deploys our defense
framework. This framework contains three main modules:
Binding Policy DB, Pairing Monitor and Connection Con-
troller. In the original design of the Bluetooth subsystem,
any upper-layer apps including Settings app (under user’s con-
trol) could communicate with the Android Bluetooth process
through IPC requests. For example, an app can initiate the pair-
ing using AdapterService.createBond() or establish
the proﬁle connection through various ProfileService.
After deploying our defense, any unauthorized pairing
and connection intent will be prohibited. The pairing mon-
itor module integrated into AdapterService will create
binding policies for Bluetooth devices. Then the connec-
tion controller module performs a policy validation in each
ProfileService.
Note that, all three defense modules are integrated within
the Android Bluetooth process, which ensures every pairing
or connection intent from upper layer will be checked. All
Bluetooth Java APIs regarding pairing and proﬁle connecting
will ﬁnally fall into this system process. Though there exist
native Bluetooth functions like createBondNative() and
connectHidNative(), it is still impossible to bypass our
defense through native code. According to our investigation as
well as mentioned in [34], only the Bluetooth process has the
privileged permission to access the underlying Bluetooth stack
directly, which is protected by the Linux user-based access
control mechanism.
Workﬂow. The defense is implemented around the binding
policy which is generated in the Bluetooth pairing phase.
As described before, either the phone or the device could
initiate the pairing. For the former case, both third-party
apps and the user (through Settings app) will ﬁnally in-
voke the API AdapterService.createBond() with
the target device’s MAC address. In the latter case, when
the Android Bluetooth process receives an external pairing
request, the callback function sspRequestCallback() or
11
Third-party AppsBluetooth StackKernelBluetooth ProcessApp FrameworkSettings App                 Binding Policy DBAdapter ServicePairing Monitor...PANProfile ServiceConnection ControllerHIDpinRequestCallback() of AdapterService will be
called.
For both pairing cases, our defense framework will pop up
a dialog showing the proﬁles declared by the Bluetooth device
(extracted from its SDP records). After the user selects the
permitted proﬁles manually, a policy record which binds the
user’s choice (a proﬁle list) with the device (MAC address)
will be inserted into the policy database. Therefore, our
scheme supports the user to vet
the device explicitly and
prevents the silent pairing behavior. The policy associated with
each device will be validated whenever ProfileService
receives a connection intent. If the proﬁle type indicated by
the connection appears in the policy record of the target
device, this connection request will be approved and sent to
the Bluetooth stack. Otherwise, this connection request will be
rejected. As a result, the BadBluetooth attack will be prevented
because a malicious device could not hide or change its proﬁle
without user permission.
B. Implementation
Our proposed defense solution could prevent the BadBlue-
tooth attacks and address the current Android Bluetooth weak-
nesses in the meantime. In the following parts, we describe
the improvements to each weakness and the corresponding
technical implementations of each module.
Pairing Monitor (Weakness #1, #2, #4). The pairing monitor
module inspects both the incoming and outgoing pairing
requests. Then it fetches the device SDP to generate the proﬁle
candidate list. After that, as shown in Figure 9, it presents a
multi-choice dialog for user conﬁrmation. We also remove the
original system dialog (if it exists) and merge with ours to
enhance the user experience. Finally, we save the permitted
proﬁles as a bitmap associated with the device using the
Settings.Secure storage, which cannot be modiﬁed by
third-party apps. Through this approach, we prevent silent
pairing and provide a ﬁne-grained control method for users.
Connection Controller (Weakness #1, #2, #5). This module
locates proﬁle by ProfileService to enforce the policy
validation. We adopt the whitelist approach to restrict the
connection. Speciﬁcally, only if the device (MAC address) is
registered in the policy database and the desired proﬁle is set
to be allowed, this connection could pass through. Otherwise,
it gets denied immediately. Moreover, to unpair a device, the
Adapter.removeBond() will be invoked. In this case, we
will remove the device policy record accordingly.
Settings App (Weakness #1, #3). To enhance the usability
for users, we also create the updateProfile method on
the policy database and only expose it to the Settings app
(protected by privileged permission). Therefore, the user could
adjust the proﬁle preference (binding policy) later. Moreover,
to provide more meaningful information and reveal potential
risk, we modify the Bluetooth icon mechanism. In our scheme,
the device icon is chosen by its “behavior”. Speciﬁcally, it is
always the job of supporting proﬁles of a device to determine
the icon. If a device claims more than one proﬁle, the most
“dangerous” one will be presented. We deﬁne the danger level
as: HID > PAN > HFP > Others.
Fig. 9: Pairing dialog example of our defense. This dialog is
shown when a pairing process happens.
C. Defense Coverage
As discussed in Section V-D, for some proﬁles like OPP,
the device may initiate the connection without broadcasting
in SDP. It is out of the scope of our defense, because, in the
original mechanism of the Android Bluetooth stack, it will
notify the user appropriately. Alternatively, our scheme can
unify all proﬁles by showing them together at the pairing (no
matter the device claims or not). However, such design is not
user-friendly as a long list will be shown to the user every
time. So, we did not follow this approach.
D. Evaluation
To evaluate the defense effect and corresponding overhead,
we conduct several experiments on Google Pixel 2, which has
a 2.35 GHz processor and 4GB memory with our modiﬁed
AOSP Android 8.1.
Effectiveness. To examine the effectiveness of the proﬁle
binding mechanism, we launched all the attacks described in
Section V on the phone. We found that all the pairing process
is monitored and prompted to users, and only explicitly granted
proﬁles can be connected. Therefore, the BadBluetooth attack
is completely mitigated by our defense framework.
Performance. Pairing to an external device is adjusted to be
noticed by the user, and our system should not cause prominent
delay of UI-transition. In the meantime, the performance of
normal operations should not be impacted. Given that the
policy validation is supposed to be most
time-consuming
among all the introduced components, we instrumented the
connect() methods and measured the execution time delay
for certain proﬁle connection (HID, PAN, and HFP). Our
measurement process excludes the native function execution.
For each proﬁle connection, we conducted the test 10 times.
The results are shown in Table VII. We can see the delays
12
TABLE VII: Proﬁle connection evaluation. (mean/std)
Total∗
(µs)
ProﬁleService Class
Original
(µs)
Defense
(µs)
Delays
(µs)
110.6
224.6
48.7
2546.0/589.4
1890.5/420.5
2359.3/326.1
HidService
PanService
HeadsetService
494.9/63.0
235.8/45.8
473.5/62.4
605.5/49.0
460.4/43.1
522.2/66.5
∗:From upper-layer API call to connection completion (original Android
OS).
are from 48.7µs to 224.6µs, which is hardly perceivable.
Comparing with the total time cost (from upper layer API
calls to connection completion), the delay is less than 12%.
VIII. DISCUSSION
We ﬁrst discuss the limitations of our attack in this section.
Then we describe other adversary models to be considered
to expand BadBluetooth attack. In addition, we believe the
weaknesses we discovered are not just limited to a single
device or a single OS. Therefore, in the long run, the protection
should not only rely on the platform-speciﬁc implementations
but also need to reconsider the design of Bluetooth stack.
Responsible Disclosure. Before the submission, we have
reported our ﬁndings to the Android security team responsibly.
They acknowledged the problems and are developing the
corresponding solution. We will work further with them to
better understand the issues underlying Bluetooth design and
develop new defense mechanisms accordingly.
Limitations and Extensions of BadBluetooth. Our adversary
model requires both a malicious device and a colluded app to
successfully launch the BadBluetooth attack. Here we discuss
other scenarios when some components are not controlled
by attacker initially. If we assume only the malicious app is
installed on the victim smartphone, then the app is able to
discover and exploit nearby devices through Bluetooth channel.
For example, a vulnerable Bluetooth device (e.g., has Blue-
tooth driver or application code bugs) may be compromised
to install malicious proﬁles or remotely controlled by the app.
In another example, the ﬁrmware updating process could be
leveraged to compromise a Bluetooth device (as mentioned in
Section IV). As a result, the attack is still feasible when there
are vulnerable Bluetooth devices.
We implemented the attacks using Raspberry Pi 2, a dedi-
cated device as the Bluetooth peripheral. However, we found
the host like smartphone itself could also be programmed like
an external device since its underlying Bluetooth controller has
the same capabilities. The difference is that an app located in
the user space can only access limited APIs provided by the
OS. Through taking advantage of smartphone Bluetooth stack,
attacks are still possible without a physical device, which leads
to a more general threat model. For example, we note that
future Android version plans to bring the HID device ability
to normal app [26]. As a result, an app might be able to make a
phone behave like a mouse or a keyboard. Therefore, it brings
the risk that a malicious app controls its host phone to attack
another connected phone through the Bluetooth channel.
Future Directions. Firstly, we plan to investigate the attack
feasibility of above mentioned app-based BadBluetooth. Be-
sides, Bluetooth ﬁrmware updating is also an appropriate entry
point to study Bluetooth security. We will consider them as
future directions.
In this work, we mainly focused on Android platform.
However,
the exposed weaknesses and problems may still
exists on other OS platforms like iOS, Windows or Linux. For
example, through a preliminary study on these platforms, we
found none of them provides a good solution to the UI issue.
Windows relies on the CoD number instead of the real proﬁles.