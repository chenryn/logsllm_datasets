can   retrieve   sensitive   files   by   traversing   up   or   down   the   file   structure.  
As   you   can   see   above   the   characters   “../”   are   used   to   go   one   directory   up   from  the   
current   one.  
Directory  Traversal  
If   you   see   an   application   utilizing   user   supplied   input   to   fetch   files   you   should   
immediately   test   to   see   if  its  vulnerable   to   directory   traversal.   This   can   be   fairly   easy   to   
spot   as   shown   below:  
●
https://example.com/?page=index.html  
As   you   can   see   there   is   a   GET   parameter   called   page   which   is   used   to   load   the   
contents   of   “index.html”.   If   improperly   implemented   attackers   leverage   the   “../”   technique   
to   load   any   file   they   want.  
As   you   can   see   above   the   GET   parameter   “page”   is   loaded   into   a   variable   called   “file”.   
Then   on   line   10   the   file   is   opened   and   read   out   to   the   page.   You   can   clearly   see   that   
there   are   no   additional   checks   so   we   should   be   able   to   exploit   this.  
As   you   can   see   we   exploited   this   vulnerability   to   retrieve   the   “/etc/passwd”   file   from  the   
operating   system.   In   case   you   didn't   know   the   “/etc/passwd”   file   is   used   to   store   
information   on   each   user   account   in   a   linux   system.  
Summary  
Directory   traversal   is   an   easy   bug   for   developers   to   mess   up   if  they   aren't   thinking   
correctly   when   coding.   If   an   application   uses   user   supplied   input   to   interact   with   files   on   
the   system   then   there   is   a   chance   the   endpoint   is   vulnerable   to   directory   traversal.   If   you   
do   find   this   vulnerability   make   sure   to   look   for   config   files,   source   code,   or   if  it  is   in   an   
upload   functionality   try   overwriting   files   on   disk.  
Open  Redirect  
Introduction  
According   to   Google   “Open   redirection   vulnerabilities   arise   when   an   application   
incorporates   user-controllable   data   into   the   target   of   a   redirection   in   an   unsafe   way”.   
Basically   we   force   the   application   to   redirect   to   an   attacker   controlled   site.   This   is   
typically   considered   a   low   impact   vulnerability.   However,   this   vulnerability   can   be   
chained   with   other   bugs   giving   you   greater   impact.  
Open  Redirect  
As   mentioned   earlier   our   goal   is   to   make   the   application   redirect   to   our   site.   Looking   at   
the   code   below   we   can   clearly   see   user   supplied   input   is   being   passed   to   a   redirect   
function.  
In   the   real   world   you   probably   won't   have   to   have   access   to   the   source   code   so   you   will   
just   have   to   test   the   site   the   old   fashion   way.   
To   do   this   I   try   to   get   the   site   to   redirect   to   Google,   if  it  does   then   the   application   is   
vulnerable.  
Summary  
Open   redirect   is   an   easy   bug   to   find   and   has   little   impact   on   the   application.   You   may   be   
able   to   make   a   few   dollars   reporting   this   bug   but   you're   better   off   trying   to   chain   this   
vulnerability   with   other   bugs   such   as   SSRF,   OATH   bypass,   and   other   things.  
Insecure  Direct  Object  Reference(IDOR)  
Introduction  
Insecure   direct   object   reference(IDOR)   is   a   vulnerability   that   occurs   when   a   user   is   able   
to   view   unauthorized   data.   The   issue   here   is   that   the   developer   failed   to   implement   
proper   access   controls   when   calling   resources   so   users   can   access   other   users   data.   
IDOR  
IDOR  is   one   of   my   favorite   vulnerabilities   to   search   for   as   it  is   easy   to   find   and   can   have   
a   high   impact   depending   on   the   context.   
The   vast   majority   of   the   time   you   can   spot   this   vulnerability   by   looking   for   a   request   
which   contains   your   user   id,   username,   email,   or   some   other   id   tied   to   your   user.   Some   
applications   will   use   this   id   to   serve   you   content   based   on   the   id   supplied.   Under   normal   
circumstances   you   would   only   supply   your   users   id   so   developers   might   forget   to   
include   authentication   checks   when   retrieving   this   data.   If   that's   the   case   attackers   can   
supply   other   users   id   to   retrieve   data   belonging   to   them.   This   could   be   anything   such   as   
a   user's   shipping   address,   credit   card   number,   email,   or   anything.   Not   only   can   you   
retrieve   information   but   sometimes   you   can   exploit   IDOR  to   send   commands   to   the   
application   such   as   adding   an   admin   account,   changing   a   user's   email,   or   removing   a   
set   of   permissions.  
As   you   can   see   above   there   are   two   requests.   One   will   set   a   users   email   and   the   other   
will   get   a   users   email.   The   backend   application   uses   the   “userId”   value   supplied   by   the   
user   when   performing   these   actions   without   any   other   verification.   So   as   an   attacker   we   
could   easily   modify   and   retrieve   any   user's   email   on   the   application.   
Sometimes   it  is   as   easy   as   changing   your   user   id   to   another   users   but   what   if  you   can’t   
easily   guess   the   userid   as   shown   in   the   response   below:  
Looking   at   the   user   id   of   “8f14e45fceea167a5a36dedd4bea2543”   you   might   think   it's   a   
random   id   that's   impossible   to   guess   but   that   may   not   be   the   case.   It's   common   practice   
to   hash   user   ids   before   storing   them   in   a   database   so   maybe   that's   what's   happening   
here.  
As   you   can   see   above   this   is   a   MD5   hash   of   the   number   7.   If   an   attacker   were   to   take   
an   MD5  
Hash   of   the   number   “11”   they   would   be   able   to   craft   a   user   id   for   that   user.  
Now   that   we   generated   an   MD5   hash   for   the   integer   11   we   can   use   this   to   retrieve   
information   from  that   person's   user   account.  
Since   the   user   id   is   guessable   and   increments   by   one   for   every   user   this   attack   could   
also   be   scripted   to   exploit   every   user   on   the   application.  
Summary  
IDOR  is   all   about   abusing   an   application's   functionality   to   retrieve   unauthorized   
information.   It   can   be   as   easy   as   changing   a   user's   id   to   someone   else's   though   you   
may   have   to   figure   out   a   way   to   generate   another   user's   id   if  it's   not   easily   guessable.   
Once   exploited   this   vulnerability   can   be   used   to   retrieve   sensitive   information   of   other   
users   or   issue   commands   as   other   users.   That's   why   this   vulnerability   is   normally   
considered   high   severity   finding,   it's   easy   to   find,   easy   to   locate,   and   it  normally   has   high   
impact.  
Conclusion  
Learning   how   to   exploit   common   web   application   vulnerabilities   by   hand   is   a   must   for   
any   security   professional.   As   a   hunter   you   want   to   pay   close   attention   to   the   bugs   that   
are   most   commonly   found   by   other   hunters.   XSS   is   extremely   popular   and   easy   to   
exploit   so   if  you're   new   to   this   field   I   would   start   here,   it  is   the   most   paid   bug   by   
Hackerone.   You   also   need   to   know   other   basic   vulnerabilities   such   as   sql   injection   and  
IDOR  as   they   are   also   frequently   found   in   web   applications   and   often   lead   to   high   
severity   findings.   There   are   a   bunch   of   other   OWASP   vulnerabilities   that   you   will   want   to   
learn   so   you   can   add   them   to   your   arsenal   of   techniques.   The   more   vulnerabilities   you   
know   how   to   exploit   the   better   your   chances   of   finding   one   and   as   you   progress   through   
the   book   you   will   learn   more.   That   being   said   if  you   only   know   a   few   basic   web   
vulnerabilities   you   can   still   be   wildly   successful.  
API  Testing  
Introduction  
Back   in   the   day   applications   were   built   using   a   single   language   such   as   PHP   but   the   
architecture   of   today's   applications   tend   to   look   a   little   different.   Most   modern   day   
applications   are   split   into   two   sections,   frontend   and   backend   as   shown   below:  
As   mentioned   before   the   application   is   separated   into   front   end   and   back   end   code.   The   
frontend   is   the   web   UI  you   see   in   your   browser,   this   is   typically   written   in   a   modern   day   
javascript   framework   such   as   ReactJS   or   AngularJS.   The   backend   is   the   API   and   can   
be   written   in   multiple   languages.  
When   dealing   with   this   type   of   application   there   are   certain   things   you   need   to   know   and   
get   familiar   with   if  you   want   to   be   successful.   There   are   several   types   of   APIs   and   they   
are   each   slightly   different   so   before   you   start   API   hacking   you   need   to   understand   a   few   
things.  
APIs  
Rest  API  
If   you   notice   an   application   talking   to   a   backend   API   9/10   times    it’s  going   to   be   a   REST   
API.   An   example   request   in   Burp   to   a   REST   API   might   look   something   like   the   image   
below:   
When   looking   at   this   request   the   first   sign   that   tells   me   this   is   a   request   for   a   REST   API   
is   the   fact   that   the   request   data   is   a   JSON   string.   JSON   strings   are   widely   used   by   
REST   APIs.   The   other   sign   is   that   the   application   is   issuing   a   PUT  request.   The   PUT   
method   is   one   of    several   HTTP   methods   associated   with   REST   APIs   as   shown   in   the   
below   table:  
Http  Methods  
Description  
GET  
Used   to   get   a   resource   or   information   
from  a   server.  
For  example   a   banking   application   might   
use   a   GET   request   to   retrieve   your   first   
and   last   name   so   it  can   be   displayed   on   
the   screen.  
POST  
Used   to   create   a   resource   though   people   
use   this   as   a   way   of   updating   well.   
For  example   a   social   media   application   
might   use   a   POST   request   to   create   a   
new   message.  
PUT  
Used   to   update   a   resource.   
For  example   a   PUT  request   might   be   
used   to   update   your   password   when   you   
issue   a   password   reset.  
PATCH  
Used   to   update   a   resource.  
DELETE  
Used   to   delete   a   resource.  
For  example   a   social   media   application   
might   use   the   DELETE   method   when   
deleting   a   comment.  
Now   that   you   know   this   information   you   can   tell   the   previous   PUT  request   in   Burp   is   
updating   “param1”   and   setting   its  value   to   “value1”.  
Another   sign   you're   dealing   with   a   REST   API   is   when   the   HTTP   response   contains   a   
MIME   type   of   JSON   as   shown   in   the   below   Burp   requests:  
  As   mentioned   earlier   the   vast   majority   of   REST   APIs   use   JSON   so   if  you   get   a   JSON   
response   you're   probably   dealing   with   a   REST   API.  
Remote  Procedure  Call  (RPC)  
Remote   Procedure   Call   (RPC)   is   the   oldest   form  of   communication   you   will   see   being   
used   by   an   application   dating   back   to   the   1980s.   This   protocol   is   fairly   basic,   each   
HTTP   request   maps   to   a   particular   function.   
There   are   several   indicators   here   which   hint   that   this   is   an   RPC   endpoint.   The   first   thing   
is   the   file   name   “xmlrpc.php”.    XMLRPC   uses   XML   while    JSONRPC   uses   JSON   for   its   
encoding   type.   If   this   endpoint   was   an   JSONRPC   API   the   data   would   be   contained   in   a   
JSON   string   instead   of   an   XML   doc,   that's   really   the   only   difference   between   the   two   
RPC   APIs.  
In   the   request   body   you   see   two   tags   called    “methodCall”   and    “methodName” ,   I   
mentioned   earlier   that   RPC   requests   correspond   to   function   names   so   this   is   another   
hint   at   this   being   an   RPC   API.   In   case   you're   not   familiar   with   programming,   “method”   
means   the   same   thing   as   “function.   Here   we   are   calling   the   function   
“system.listMethods”   and   passing   zero   arguments.   After   issuing   the   request   the   server   
responded   with   an   XML   document   containing   a   list   of   methods   exposed   by   this   API.  
You   know   that   REST   APIs   use   several   HTTP   methods   such   as   PUT,POST,   and   
DELETE   but   RPC   APIs   only   use   two,   GET   and   POST   methods.   So   if  you   see   an   HTTP   
request   using   something   other   than   a   GET   or   POST   request   you   know   it’s  probably   not   
an   RPC   API.  
Simple  Object  Access  Protocol  (SOAP)  
In   the   previous   section   I   mentioned   RPC   APIs,   specifically   I   talked   about   something   
called   XMLRPC.   You   can   think   of   a   SOAP   API   as   a   more   advanced   version   of   
XMLRPC.   They   are   both   very   similar   by   the   fact   they   both   use   XML   for   encoding   and   
HTTP   to   transfer   messages.   However,   SOAP   APIs   tend   to   be   a   little   more   complex   as   
shown   in   the   below   request:  
Unlike   the   XMLRPC   request   which   is   just   an   XML   blob   of   data   the   SOAP   request   is   a   
little   more   structured   and   inorder   to   send   a   SOAP   request   you   must   follow   this   structure.   
An   example   of   the   SOAP   format   can   be   found   below:  
As   you   can   see   the   message   is   first   wrapped   in   an    “”   tag   which   
contains   the   header   and   body   tags.   This   value   can   be   used   as   an   indicator   that   you’re   
dealing   with   a   SOAP   API   so   be   on   the   lookout   for   this   string.   The   header   part   is   optional   
and   is   used   to   hold   values   related   to   authentication,   complex   types,   and   other   
information   about   the   message   itself.   The   body   is   the   part   of   the   XML   document   which   
actually   contains   our   message   as   shown   below   example:  
gero  et  
As   you   can   see   in   the   above   SOAP   body   we   are   calling   a   method   named   
“ GetCitiesByCountry ”   and   passing   in   an   argument   called    “CountryName ”   with   a   string   
value   of    “gero  et” .  
GraphQL  API  
GraphQL   is   a   data   query   language   developed   by   Facebook   and   was   released   in   2015.   
GraphQL   acts   as   an   alternative   to   REST   API.   Rest   APIs   require   the   client   to   send   
multiple   requests   to   different   endpoints   on   the   API   to   query   data   from  the   backend   
database.   With  graphQL   you   only   need   to   send   one   request   to   query   the   backend.   This   
is   a   lot   simpler   because   you   don’t   have   to   send   multiple   requests   to   the   API,   a   single   
request   can   be   used   to   gather   all   the   necessary   information.  
As   new   technologies   emerge   so   will   new   vulnerabilities.   By   default   graphQL   does   not   
implement   authentication,   this   is   put   on   the   developer   to   implement.   This   means   by   
default   graphQL   allows   anyone   to   query   it,   any   sensitive   information   will   be   available   to   
attackers   unauthenticated.  
When   performing   your   directory   brute   force   attacks   make   sure   to   add   the   following   