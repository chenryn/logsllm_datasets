// disable entropy collection
kdebug_enable &= ~KDEBUG_ENABLE_ENTROPY;
kdebug_slowcheck &= ~SLOW_ENTROPY;
}
}
...
}
6.8.8. Low-Level Diagnostics and Debugging Interfaces
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 105 of 137
The Mac OS X kernel provides a low-level diagnostics and debugging interface that can be enabled at
boot time by passing the diag argument to the kernel. Depending on the specific flags passed through
this argument, the kernel enables specific features and behavior. The various flag bits that can be set
in the diag value[19] are defined in osfmk/ppc/Diagnostics.h. Table 617 lists these flags and their
purpose.
[19] The diag value is passed as a logical OR of these flag bits.
Table 617. Flags for Enabling Diagnostic Features at Boot Time
Name Value Description
enaExpTrace 0x0000_0001 This bit enables ultra-low-level diagnostics tracing in
the kernel. The built-in kernel debugger, KDB, can be
used to view the trace records.
enaUsrFCall 0x0000_0002 This bit enables the firmware call interface to be used
from user space. The interface provides hardware-
dependent low-level functionality.
enaUsrPhyMp 0x0000_0004 This bit is unused.
enaDiagSCs 0x0000_0008 This bit enables the diagnostics system call interface.
enaDiagDM 0x0000_0010 If this bit is set, the driver for /dev/mem allows access
to the entire physical memory (mem_actual), even if
available physical memory has been limited through
the maxmem boot-time argument.
enaDiagEM 0x0000_0020 This bit causes the special opcode 0, along with an
extended opcode that is one of the X-form instructions
capable of taking an alignment interrupt, to simulate
an alignment exception. This is to facilitate debugging
of the alignment handler.
enaDiagTrap 0x0000_0040 This bit enables the special diagnostics trap, which is
of the form twi 31,r31,0xFFFX, with X being a
hexadecimal digit. When enabled, the trap returns
from the kernel with a return value of 1.
enaNotifyEM 0x0000_0080 Instructions that fail because of operand alignment
can be emulated by low-level kernel code. This bit
enables notification of such emulationsay, for logging
of unaligned accesses.
chudxnu_passup_alignment_exceptions()
[osfmk/ppc/chud/chud_cpu.c]a CHUD toolkit
internal functioncan set or clear this bit.
The flags listed in Table 617 are likely to be useful only to Mac OS X core kernel developers.
Enabling any of the diagnostics or low-level debugging features on production systems is not
recommended.
6.8.8.1. Firmware Call Interface
The firmware call interface is so called because it provides functionality that is considered an
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 106 of 137
extension of the hardwareit is not an interface to Open Firmware. Its functionality includes the
following:
Writing debugging information (such as register contents) to a printer or modem port
(dbgDispCall)
Storing words to physical memory and clearing physical pages (StoreRealCall and
ClearRealCall, respectively)
Loading BAT registers (LoadDBATsCall and LoadIBATsCall)
Creating fake I/O and decrementer interrupts (CreateFakeIOCall and CreateFakeDECCall,
respectively)
Crashing the system immediately (Choke)
Shutting down the system immediately (CreateShutdownCTXCall)
Switching context (SwitchContextCall)
Preempting (DoPreemptCall)
Note that the kernel uses certain firmware calls during its regular operation. For example,
_ml_set_interrupts_enabled() [osfmk/ppc/machine_routines_asm.s] can conditionally
invoke the DoPreemptCall() system call from within the kernel. Similarly, context-switching
assembly code in osfmk/ppc/cswtch.s uses the SwitchContextCall() firmware call.
Let us look at an example of using the firmware call interface from user space. A system call is
treated as a firmware call if its number has its high-order bit set to 1. As we saw in Figure 612, the
xcpSyscall() handler tests for firmware calls early. Whereas firmware calls are always allowed
from supervisor state, they must be explicitly enabled for user space, as noted in Table 617. If
xcpSyscall() finds the high-order bit set in the system call number, and the call is allowed, it
forwards the call to FirmwareCall() [xnu/osfmk/ppc/Firmware.s]. The low-order bits in the
system call number represent the index of the desired call in the firmware call table (FWtable), which
is declared in osfmk/ppc/Firmware.s and populated in osfmk/ppc/FirmwareCalls.h. The lowest
numbered firmware callCutTraceCall()has the number 0x80000000. Looking at
osfmk/ppc/FirmwareCalls.h, we find that the Choke() call is at index 0xa, whereas the
CreateShutdownCTXCall() call is at index 0xd.
Firmware call indices may not be the same across all kernel versions.
For example, if we make a system call with the value 0x8000000a in GPR0, the system will crash.
Similarly, a call with the value 0x8000000d in GPR0 will cause the system to shut down instantly, as
if all power to the system has been cut.
6.8.8.2. Diagnostics System Call Interface
The diagnostics system call interface is somewhat more generally interesting for experimentation than
the firmware call interface. Its functionality includes routines for the following operations:
Adjusting the Timebase Registerused for testing drift recovery
Returning the physical address of a page
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 107 of 137
Accessing physical memory (including copying physical memory pages, and reading or writing
individual bytes)
Soft-resetting the processor
Forcing all caches, including the TLB, to be reinitialized
Retrieving boot-screen information
A complete list of implemented diagnostics system calls can be seen in osfmk/ppc/Diagnostics.c.
As shown in Table 612, the PowerPC-specific diagCall() system call has the number 0x6000. This
system call invokes diagCall() [osfmk/ppc/Diagnostics.c]the dispatcher for these system calls.
diagCall() uses the value in GPR3 to determine the specific diagnostics operation to perform. The
available operations are defined in osfmk/ppc/Diagnostics.h.
// osfmk/ppc/Diagnostics.h
#define diagSCnum 0x00006000
#define dgAdjTB 0
#define dgLRA 1
#define dgpcpy 2
#define dgreset 3
#define dgtest 4
#define dgBMphys 5
#define dgUnMap 6
#define dgBootScreen 7
...
#define dgKfree 22
#define dgWar 23
...
Let us look at examples of using the diagnostics system calls. First, we create a common header
filediagCommon.hcontaining code we will use in all examples in this section. Figure 640 shows
diagCommon.h.
Figure 640. Common header file for using the diagnostics system call interface
// diagCommon.h
#ifndef _DIAG_COMMON_H_
#define _DIAG_COMMON_H_
#include 
#include 
#include 
#include 
#define _POSIX_C_SOURCE
#include 
#include 
struct savearea;
// These headers are not available outside of the kernel source tree
#define KERNEL_PRIVATE
#include 
#include 
#undef KERNEL_PRIVATE
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 108 of 137
// The diagCall() prototype in Diagnostics.h is from the kernel's standpoint
// -- having only one argument: a pointer to the caller's save area. Our user-
// space call takes a variable number of arguments.
//
// Note that diagCall() does have a stub in libSystem.
//
// Here we declare a prototype with a variable number of arguments, define
// a function pointer per that prototype, and point it to the library stub.
typedef int (*diagCall_t)(int op, ...);
diagCall_t diagCall_ = (diagCall_t)diagCall;
// Defined in osfmk/vm/pmap.h, which may not be included from user space
#define cppvPsrc 2
#define cppvNoRefSrc 32
// Arbitrary upper limit on the number of bytes of memory we will handle
#define MAXBYTES (8 * 1024 * 1024)
#endif // _DIAG_COMMON_H_
Before the diagnostics system call interface can be used, it must be enabled at boot time by passing
the diag= boot argument, where  contains set bits corresponding to the
enaDiagSCs constant (0x8), as noted in Table 617. Similarly, the firmware interface is enabled by
passing set bits corresponding to the enaUsrFCall constant (0x2). For example, to enable both
interfaces, pass diag=0xa, since 0xa is the logical OR of 0x8 and 0x2.
Retrieving Boot-Screen Information
In this example, we will write a program that uses the dgBootScreen() call to retrieve the boot-
screen "video" information from the kernel. The information is maintained in a structure of type
vc_info. The system console code in osfmk/console/video_console.c manages this structure.
Figure 641 shows the output of our program on a system with a 1280x854 display attached to it. Note
that the quantity labeled "physical address" shows the location of the raw framebuffer in physical
memory.
Figure 641. Retrieving boot-screen information using a diagnostics system call
// diagBootScreen.c
#include "diagCommon.h"
int
main(int argc, char **argv)
{
struct vc_info vc_info;
if (diagCall_(dgBootScreen, &vc_info) \n", PROGNAME);
exit(1);
}
// Must be in hexadecimal
virt = strtoul(argv[1], NULL, 16);
phys = diagCall_(dgLRA, virt);
if (!phys) {
printf("virtual address %08x :: physical page none\n", virt);
exit(1);
}
physaddr = (u_int64_t)phys * 0x1000ULL + (u_int64_t)(virt & 0xFFF);
printf("virtual address %#08x :: physical page %#x (address %#llx)\n",
virt, phys, physaddr);
exit(0);
}
$ gcc -Wall -I /path/to/xnu/osfmk/ -o diagLRA diagLRA.c
$ ./diagLRA 0x0
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 110 of 137
virtual address 00000000 :: physical page none
$ ./diagLRA 0xFFFF8000
virtual address 0xFFFF8000 :: physical page 0x1669 (address 0x1669000)
...
Examining Physical Memory
The dgpcpy() diagnostics system call copies physical memory into a supplied buffer. In this
example, we will write a program that uses this call to fetch physical memory and dumps it on the
standard output. Thereafter, we can either redirect the program's output to a file or pipe it through a
utility such as hexdump to view the memory's contents in different formats. Figure 643 shows the
program.
Figure 643. Retrieving physical memory using a diagnostics system call
// diagpcpy.c
#include "diagCommon.h"
#define PROGNAME "diagpcpy"
void usage(void);
int
main(int argc, char **argv)
{
int ret;
u_int32_t phys;
u_int32_t nbytes;
char *buffer;
if (argc != 3)
usage();
phys = strtoul(argv[1], NULL, 16);
nbytes = strtoul(argv[2], NULL, 10);
if ((nbytes  MAXBYTES) ? MAXBYTES : nbytes;
buffer = (char *)malloc(nbytes);
if (buffer == NULL) {
perror("malloc");
exit(1);
}
// copy physical to virtual
ret = diagCall_(dgpcpy, 0, phys, 0, buffer, nbytes, cppvPsrc|cppvNoRefSrc);
(void)write(1, buffer, nbytes);
free(buffer);
exit(0);
}
void
usage(void)
{
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 111 of 137
printf("usage: %s  \n", PROGNAME);
printf("\tphysical address must be specified in hexadecimal\n");
printf("\tnumber of bytes to copy must be specified in decimal\n");
exit(1);
}
$ gcc -Wall -I /path/to/xnu/osfmk/ -o diagpcpy diagpcpy.c
...
We can test the operation of our diagpcpy program by examining physical memory that is known to
contain specific information. Recall from Figure 628 that the beginning of the comm area contains a
string signature. Moreover, we know that the comm area should begin at virtual address 0xFFFF8000
in every user virtual address space, and we determined the corresponding physical address using our
diagLRA program in a previous example.
$ ./diagLRA 0xFFFF8000