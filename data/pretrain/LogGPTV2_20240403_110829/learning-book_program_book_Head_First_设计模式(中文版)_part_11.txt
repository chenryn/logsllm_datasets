你现在的位置，55
---
## Page 92
设计气象站
设计气象站
看看这个设计图，和你的设计图有何异同？
所有的气象组件都实现此观
察者接口。这样，主题在需
我们也为布告板建立一个
这是我们的主题接口
要通知观察者时.有了一个
共同的接口。布告板只电要
看起来应该不陌生，
共同的接口。
实现display）方法。
Subject
察者
>
Observer
>
(
DisplayElement
removeObserver()
update()
()Aejdsp
notifyObservers[)
Cur
onsDisplay
update()
display（1（//显示当前观
ThirdPartyDisplay
值1
update()
removeObserver[}
display（）（//显示基于观
notifyObservers()
测值的其他内容）
此布告板根据
StatisticsDisplay
getTemperature()
()Ai:pwngi00
update()
Weathe:Data对录
display(}（//昱示最小、
K
getPressure(}
显示当前观测值。
平均和最大的现测值）
开发人员可以通过
实现观察者和显示
接口来创建自己
此布告板跟踪最小、平
的布告板。
现在Weathe:Data实现
均、最大的观测值，
update(1
Subject接口
disply(}{//显示天
显示它们。
气预报）
此布告板根据气压计要
示天气预报。
这三个布告板都应该有一个也被命名为“su6ject”的指针来指
向WeatherData对象。但是，这张图没有函出这样的关系，以免
大乱。
56
第2章
---
## Page 93
观察者模式
实现气象站
依照两页前Mary和Sue的讨论，以及上一页的类图，我们要开始实现这个系统
了。稍后，你将会在本章看到Java为观察者模式提供了内置的支持，但是，我们
暂时不用它，而是先自己动手。虽然，某些时候可以利用Java内置的支持，但
是有许多时候，自己建立这一切会更具弹性（况且建立这一切并不是很麻烦）。
所以，让我们从建立接口开始吧：
这两个方法都常要一个观察
public interface Subject {
老作为变量，该观察者是用
public void registerObserver(Observer o);
来注册或被删除的。
public void removeObserver(Observer o);
public void notifyobservers () ;
当主题状态改变时，这个方法会被
调用，以通知所有的观察老。
所有的观察老都必须
public interface Observer {
实现update(）方法，w以
public void update (float temp,
float humidity, float pressure);
实现观察老接口。在
↑
这里，我们按照Mary和
当气象观测值改变时，主题会把这些状态值当作
Sue的想法把观测值传
方法的参数，传送给观察者。
入观察者中。
public interface DisplayElement (
public void display();
DisplayElement接口只包含了一个方法
也就是display()。当布告板需要显示时
遇用此方法。
XOX
BRAIN
XPOWER
Mary和Sue认为：把观测值直接传人观察者中是更新状态的最直接的方法。你
认为这样的做法明智吗？暗示：这些观测值的种类和个数在未来有可能改变
吗？如果以后会改变，这些变化是否被很好地封装？或者是需要修改许多代
码才能办到？
关于将更新的状态传送给观察者，你能否想到更好的方法解决此问题？
别担心，在我们完成第一次实现后，我们会再回来探讨这个设计决策。
你现在的位置
57
---
## Page 94
实现气象站
在WeatherData中实现主题接口
提醒你：为了节省篇幅，我们
在代码中没有列出import和
packase语句。你可以到
还记得我们在本章一开始的地方就试图实现WeatherData类吗？你可以
wichedlysmatt网站找到究
去回顾一下。现在，我们要用观察者模式实现.
整的源代码，URL在本书的第
xxxv页。
public class WeatherData implements Subject {
WeatherData现在实现了
private ArrayList observers;
Subject接口。
private float temperature;
private float humidity;
我们加上一个Araylist来纪录观察
private float pressure;
者，此Arraylist是在构造器中建立
public WeatherData()(
的。
observers = new ArrayList();
当注册观察老时，我们只覆把它加
public void registerObserver(Observer o）（比到Anaylist的后面即可。
observers.add(o) ;
同样地，当观察者想取消注册，我们把
public void removeObserver(Observer o)(
它从Arraylist中到除即可。
的
int i = observers.indexOf (o);
D
if (i >= 0){
observers.remove (i);
有趣的地方来了：在这里，我们
13
把状态告诉每一个观察老。固为
Subje
观察老都实现了update（）.所以我
们知道如何通知它们。
分
public void notifyObservers()(
for (int i = 0;i< observers.size();i++){
Observer observer = (observer)observers.get(i);
observer.update(temperature,humidity, pressure);
1
当从气象站得到更新观测值
public void measurementsChanged() (
时，我们通知观察者。
notifyobservers () ;
public void setMeasurements(float temperature,float humidity, float pressure)
this.temperature = temperature;
this.humidity = humidity;
我们想要每本书随书赠送一个小型气象站
this.pressure = pressure;
但是出版社不肯。所以，和从装置中读取
measurementsChanged () ;
实际的气象数据相比，我们宁愿利用这个
方法来测试布告板。或者，为了好玩，你
//WeatherData的其他方法
也可以写代码从网站上抓取观测值。
58
第2章
---
## Page 95
观察者模式
现在，我们来建立布告板吧！
我们已经把WeatherData类写出米了，现在轮到布告板了。Weather-O-Rama气象
站订购了三个布告板：目前状况布告板、统计布告板和预测布告板。我们先看看
目前状况布告板。一旦你熟悉此布告板之后，可以在本书的代码目录中，找到另
外两个布告板的源代码，你会觉得这些布告板都很类似。
它也实现了DisplayElement接口
此布告板实现了O6servet接口，所以
因为我们的AP规定所有的布告
可以从WeatherData对象中获得改变。
板都必须实现此接口。
public class CurrentConditionsDisplay implements Observer, DisplayElement {
private float temperature;
private float humidity;
private Subject weatherData;
构造器需要weatherData对象（也
K
public CurrentConditionsDisplay(Subject weatherData) (
就是主题）作为注册之用。
this.weatherData = weatherData;
weatherData.registerObserver(this);
public void update(float temperature,
float humidity, float pressure）(
this.temperature =temperature;
this.humidity = humidity; 《
当update(）被调用时，我们
display ();
把温度和湿度保存起来，
然后调用display(）。
public void display() {
System.out.println("Current conditions: "+ temperature
display（）方法就只是
个
把最近的温度和溶
度显示出来。
DumbQuestions
问：
的方式。当我们谈到MVC（Model-
update(）是最适合调用
View-Controller）模式时会再作说
的确如此，但是以后我
display(）的地方吗？
明。
们可能想要取消注册，如果已经有
了对Subject的引用会比较方便。
为什么要保存对
当值变化的时候调用displayO，是很
Subject的引用呢？构造完后似乎用
合理的。然而，你是对的，的确是
不着了呀？
有很多更好的方法来设计显示数据
你现在的位置
59
---
## Page 96
测试气象站
启动气象站
①先建立一个测试程序
气象站已经完成得差不多了，我们还需要一些代码将这一切连接起
来。这是我们的第一次尝试，本书中稍后我们会再回来确定每个
组件都能通过配置文件来达到容易“插拔”。现在开始测试吧：
public class WeatherStation {
首先，建立一个
WeatherData对象。
public static void main(String[] args) {
WeatherData weatherData = new WeatherData () ;
CurrentConditionsDisplay currentDisplay =
如果你还不想下
new CurrentConditionsDisplay (weatherData) ;
载完整的代码，
可以将这两行注
( ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);
释摔，就能质利
weatherData.setMeasurements(80, 65, 30.4f);
建立三个布告板
执行了。
weatherData.setMeasurements(82, 70, 29.2f);
并把WeatherData对象
weatherData.setMeasurements(78, 90, 29.2f);
传给它们。
模拟新的气象测量。
②运行程序，让观察者模式表演魔术。
&java WeatherStation
Current conditions:80.0F degrees and 65.0% humidity
Avg/Max/Min temperature = 80.0/80.0/80.0
Forecast:Improving weather on the way!
Current conditions:82.0F degrees and 70.0& humidity
Avg/Max/Min temperature =81.0/82.0/80.0
Forecast: Watch out for cooler,rainy weather
Current conditions:78.0F degrees and 90.0& humidity
Avg/Max/Min temperature=80.0/82.0/78.0
Forecast:More of the same
60
第2章
---
## Page 97
观察者模式
JohnnyHurricane（Weather-O-Rama气象站的CEO）刚刚来电告知l，他们还需要酷热指数
（HeatIndex）布告板，这是不可或缺的。细节如下：
酷热指数是一个结合温度和湿度的指数，用来显示人的温度感受。可以利用温度T和相对湿
度RH套用下面的公式来计算酷热指数：
heatindex =
10-10*T2*RH²-4.81975 *10-11*T3*RH3
开始练习打字吧！
开玩笑的啦！别担心，你不需要亲自输入此公式，只要建立你自己的HeatIndexDisplayjava文
件并把公式从heatindex.txt文件中拷贝进来就可以了。
heatindex,txt文伴可人wickedlysmart.com取写
这个公式是怎么回事？你可以参考《HeadFirst气象学》，或者问问国家气象局的员工
（或用Google搜索）。
当你完成后，输出结果应如下所示：
Sjava WeatherStation
Current conditions:80.0F degrees and 65.0& humidity
Avg/Max/Min temperature=80.0/80.0/80.0
Forecast:Improving weather on the way!
输出
Heat indexis82.95535
Current conditions:82.0F degrees and 70.0% humidity
变的地方
里。
Avg/Max/Min temperature=81.0/82.0/80.0
Forecast:Watch out for cooler,rainy weather
Heat index is 86.90124
Current conditions:78.0F degrees and 90.0 humidity
Avg/Max/Min temperature =80.0/82.0/78.0
Forecast:More of the same
Heat index is83.64967
你现在的位置
61
---
## Page 98
围炉夜话：主题与观察者
团护表话
今夜话题：主题和观察者就使观察者获得状态信
忽的正确方法发生了争吵。
主题
观察者
我很高兴，我们终于有机会面对面聊天了。
是这样吗？我以为你根本不在乎我们这群观察者
呢。
喉呀！我把该做的事都做到了，不是吗？我总是会
通知你们发生什么事了.我虽然不知道你们是谁，
但这不意味着我不在乎你们。况且，我知道关于你
们的一件重要的事：你们实现了Observer接口。
是呀，但这只是关于我的一小部分罢了！无论如
何，我对你更了解.
是吗？说来听听！
嗯！你总是将你的状态传给我们，所以我们可以
知道你内部的情况。有时候，这很烦人的
拜托，我必须主动送出我的状态和通知给大家，好
让你们这些懒情的观察者知道发生什么事了。
咳！等等。我说主题先生，首先，我们并不懒，
在你那些“很重要”通知的空档中，我们还有别
的事要做。另外，为何由你主动送数据过来，而
不是让我们主动去向你索取数据？
嗯.…这样或许也行，只是我必须因此门户大开，让
你们全都可以进来取得你们需要的状态，这样太危险
了。我不能让你们进来里面大肆挖掘我的各种数据。
62
第2章
---
## Page 99
观察者模式
主题
观察者
你何不提供一些公开的getter方法，让我
们“拉”走我们需要的状态？
是的，我可以让你们“拉”走我的状态，但是你不觉
得这样对你们反而不方便吗？如果每次想要数据时都
来找我，你可能要调用很多次才能收集齐全你所要的
状态。这就是为什么我更喜欢“推”的原因，你们可
以在一次通知中一口气得到所有东西。
死鸭子嘴硬！观察者种类这么多，你不可能事先
料到我们每个人的需求，还是让我们直接去取得
我们需要的状态比较恰当，这样一来，如果我们
有人只需要一点点数据，就不会被强迫收到一堆
数据。这么做同时也可以在以后比较容易修改。
比方说，哪一天你决定扩展功能，新增更多的状
态，如果采用我建议的方式，你就不用修改和更
新对每位观察者的调用，只需改变自己来允许更