### Computation in the Encrypted Domain

In the encrypted domain, we compute \(c_1\) and \(c_2\) as an encrypted DGK evaluation of Bob’s ciphertexts \(E_{pk_B}(v_{B,1})\) and \(E_{pk_B}(v_{B,2})\) with Alice's inputs \(v_{A,1}\) and \(v_{A,2}\):

\[
c_1[0] = - E_{pk_B}(v_{B,1})[0] + E_{pk_B}(v_{B,2})[0] - 2 \cdot v_{A,2} \cdot E_{pk_B}(v_{B,2})[0]
\]

\[
c_1[1] = v_{A,1} \cdot P_1 - E_{pk_B}(v_{B,1})[1] + P_1 + v_{A,2} \cdot P_1 + E_{pk_B}(v_{B,2})[1] - 2 \cdot v_{A,2} \cdot E_{pk_B}(v_{B,2})[1]
\]

\[
c_2[0] = - E_{pk_B}(v_{B,2})[0]
\]

\[
c_2[1] = v_{A,2} \cdot P_1 - E_{pk_B}(v_{B,2})[1] + P_1
\]

Alice can then send \(c_1\) and \(c_2\) to Bob by publishing them on the blockchain. Bob can decrypt these values. If one of them decrypts to 0, Bob will know that \(v_A\) is less than or equal to \(v_B\). In a two-party scenario, it is unnecessary to run the third round and publish the outcome of the evaluations, as both Alice and Bob already know the result after the second round.

### Protocol for Multiple Parties

For more than two parties, we introduce two major changes to the simplified two-party, two-bit protocol to achieve malicious security, assuming a majority of the parties are honest:

1. **Verifiable Secret Sharing (VSS):** During the first round, each party verifiably secret shares their private key using the blockchain as a broadcast channel.
2. **Additional Round on Demand:** If a malicious party \(P_i\) aborts the protocol at any time or is caught cheating in their zero-knowledge (ZK) proofs, the honest parties agree to run an additional round. In this round, the parties will re-assemble shares of \(P_i\)'s secret key and reveal \(P_i\)'s input integer. This ensures that the party with the kth-ranked integer is determined, even if this integer comes from a malicious \(P_i\).

### First Round

Let \(VSS(t, n, G_1, pk^{lt}_1, \ldots, pk^{lt}_n)\) be a verifiable secret sharing scheme, where \(n\) is the total number of parties, \(t\) is the number of parties required to reconstruct a secret, \(G_1\) is a group where the Decisional Diffie-Hellman (DDH) assumption holds, and \(pk^{lt}_i\) are the long-term public keys. The output of VSS is a random private key \(sk \in \mathbb{Z}_p\), internal commitments \(C\), encryptions \(Y_j\) of shares under the other parties' public keys, and a ZK proof \(Proof_{VSS}\) proving the consistency of the shares.

Each party \(P_i\) invokes VSS, gets a private session key \(ski\), and computes the public session key \(pki = ski \cdot P_1 \in G_1\). Additionally, \(P_i\) generates random strings \(r_j\) for encryption, random strings \(R_j\) for blinding, and random bits \(\beta_j\) for shuffling. These values, along with corresponding ZK proofs, are published on the blockchain.

### Algorithm 2: BOREALIS’ First Round

```plaintext
1. Let η = ℓ · log(ℓ) − ℓ/2.
2. For each party Pi, 1 ≤ i ≤ n:
   - (ski, C0, ..., Cτ-1, Y1, ..., Yn, ProofVSS,i) ← VSS(τ − 1, n, G1, pklt_1, ..., pklt_n)
   - pki = ski · P1
   - {ri,1, ..., ri,ℓ} $← \mathbb{Z}_ℓ
   - {(Ri,1,1, ..., Ri,1,ℓ), ..., (Ri,n-1,1, ..., Ri,n-1,ℓ)} $← \mathbb{Z}^{(n-1)·ℓ}
   - {(βi,1,1, ..., βi,1,η), ..., (βi,n-1,1, ..., βi,n-1,η)} $← {0, 1}^{(n-1)·η}
   - Publish pki, Com(ski), ProofKeyECDLP,i, C0, ..., Cτ-1, Y1, ..., Yn, ProofVSS,i, Com(vi,1), ..., Com(vi,ℓ), ProofBit,i,1, ..., ProofBit,i,ℓ, Com(ri,1), ..., Com(ri,ℓ), ci,1 = Epki(vi,1), ..., ci,ℓ = Epki(vi,ℓ), ProofEnc,i,1, ..., ProofEnc,i,ℓ, Com(Ri,1,1), ..., Com(Ri,1,ℓ), ..., Com(Ri,n-1,ℓ), (Com(βi,1,1), ..., Com(βi,1,η)), (Com(βi,n-1,1), ..., Com(βi,n-1,η)), (ProofBit,i,1,1, ..., ProofBit,i,1,η), ..., (ProofBit,i,n-1,1, ..., ProofBit,i,n-1,η) on the blockchain.
```

### Second Round

Both the second and third rounds start with parties verifying ZK proofs. Assume all proofs are successfully verified. After verification, each party \(P_i\) homomorphically computes a DGK comparison for each other party's integer \(vj\):

```plaintext
1. For each party Pi, 1 ≤ i ≤ n:
   - For each j ≠ i:
     - For u = 2 to ℓ:
       - wu = Epkj(vj,u)[0] − 2 · vi,u · Epkj(vj,u)[0]
       - Wu = vi,u · P1 + Epkj(vj,u)[1] − 2 · vi,u · Epkj(vj,u)[1]
     - For u = 1 to ℓ:
       - ci,j,u[0] = −Epkj(vj,u)[0] + ∑(δ=u+1 to ℓ) wδ
       - ci,j,u[1] = vi,u · P1 − Epkj(vj,u)[1] + P1 + ∑(δ=u+1 to ℓ) Wδ
       - Publish Com(ci,j,u[0]), Com(ci,j,u[1]), ProofDGK,i,j,u on the blockchain
       - c′i,j,u = (Ri,j,u · ci,j,u[0], Ri,j,u · ci,j,u[1])
       - Publish Com(c′i,j,u[0]), Com(c′i,j,u[1]) on the blockchain
```

This ensures that all computations are performed in parallel, and the first round requires only one block latency.