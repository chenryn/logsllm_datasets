### System and Security Measures

To bypass access checks during calls to the ext3 file system, the process server runs with superuser privileges. To prevent users from directly accessing data via the ext3 file system, the root directory of the ext3 file system is owned by the superuser, and all access permissions are disabled.

### File System Organization

For illustrative purposes, assume PCFS is mounted at `/pcfs` and makes calls to the ext3 file system at `/src`. The file system structure under `/pcfs` mirrors that rooted at `/src`, but all operations within `/pcfs` are subject to procap-based checks. A special directory, `/pcfs/#config`, contains configuration data for the file system, including procaps and the secret key used to sign them. This directory is protected by strict rules that do not use procaps. Below are some important files and directories in this special directory, along with their contents and protections:

- **/pcfs/#config/config-file**: Contains configuration options, including the user IDs of the principals `admin` and `pcfssystem`. (Recall from Section 4 that `pcfssystem` is the only user with access to the secret key needed to sign procaps.) Anyone can read this file, but only `pcfssystem` can modify it.
- **/pcfs/#config/shared-key**: Stores the shared key used to sign procaps. Only `pcfssystem` can read or write this file.
- **/pcfs/#config/ca-pubkey.pem**: Contains the public key of the certifying authority who signs associations between other public keys and users. Anyone can read this file, but only `pcfssystem` can write to it.
- **/pcfs/#config/procaps/**: This directory contains the procaps. Its organization is discussed next. `pcfssystem` has full access to this directory, while other users have access to specific subdirectories only.

A more secure method to prevent access via the underlying file system would be to keep data encrypted and decrypt it in the process server. However, we have not implemented this design, as our objective here is to evaluate the performance of access checks.

### Procap Storage and Access

The procap granting the right \(\langle k, f, \eta \rangle\), subject to access-time conditions, is stored in the file `/pcfs/#config/procaps//.perm.`. Here, \(k\) is the user ID, \(f\) is the file path (relative to the mount point), and \(\eta\) is a textual representation of the permission. Each procap is stored in a separate file, and there can be at most one procap authorizing a given right. This makes lookups straightforward, as the exact path for a procap can be determined by knowing the PCFS mount point and the right \(\langle k, f, \eta \rangle\). To prevent denial of service attacks and protect user privacy, the PCFS server ensures that only user \(k\) can access (read, write, or delete) files inside `/pcfs/#config/procaps//`.

Since `pcfssystem` has full access to all files and directories within `/pcfs/#config/`, it is a high-value target for attacks. If an attacker gains control of this account, they could change the secret key used to sign and verify procaps and inject fake procaps to access other files. To mitigate this, the PCFS process server denies `pcfssystem` all rights in other directories within the file system. Thus, an attacker must break into at least one additional account to attack PCFS through this mechanism.

### Procap Cache

To improve performance, PCFS uses an in-memory cache to store commonly used procaps. The cache is a least recently used (LRU) cache, whose size can be adjusted at mount time. It stores parsed procaps with verified signatures. The only cost involved in using a cached procap is checking its conditions (lists \(\vec{C}\) and \(\vec{i}\) from Section 4). This is extremely fast, typically taking only 10–100µs. As a result, PCFS achieves high performance when the number of files in use is small. The effect of the cache is evaluated in Section 6.

### Permissions

PCFS uses five distinct permissions on any file or directory: read, write, execute, identity, and govern. (In contrast, POSIX mandates only the first three permissions.)

- **Read and Write**: These are the standard permissions for reading and changing the contents of a file or directory.
- **Execute**: This permission allows reading the metadata of a file or directory.
- **Identity**: This permission is required to delete or rename a file or directory. It is separated from others because administrators may want to allow users to perform certain operations on shared files without allowing deletion or renaming.
- **Govern**: This permission is needed to change the owner of a file and to change extended attributes starting with the prefix `user.#pcfs`. These attributes can be used by administrators to give classification or security labels to files.

Figure 3 lists the permissions needed to perform common file system operations. During a file system call, the relevant procaps are looked up and checked. By separating the identity and govern permissions from write, PCFS allows for easy administration of both mandatory and discretionary access control, which is difficult with POSIX permissions where the owner always has all permissions on a file.

### Default Permissions

When a program first creates a file, it cannot be assumed that any policy rules apply to it, as this usually requires creating certificates by administrators. Many programs create temporary files, and they must have access to these files to complete their tasks. To allow such programs to execute correctly, when a new file or directory is created, PCFS automatically creates and stores default procaps that give the creator read, write, execute, and identity permissions for a fixed period (adjustable at mount time). Additionally, the user `admin` is given execute and govern rights on the new file. After this period elapses, the default procaps expire, and administrators must create policy rules to control access to the file.

### Evaluation

We evaluate PCFS in two ways: by reporting the results of performance benchmarks on the backend of the file system and by commenting on the expressiveness of the framework through two case studies.

#### 6.1 Performance of the Backend

Our primary interest is in measuring the overhead of access control checks due to procaps. Our baseline for comparing performance is a FUSE-based file system that does not perform the corresponding checks but otherwise runs a process server and uses an underlying ext3 file system, just like PCFS. We call this file system FUSE/Null. For macrobenchmarks, we also compare with an ext3 file system. All measurements were made on a 2.4GHz Core Duo 2 machine with 3GB RAM and a 7200RPM 100GB hard disk drive, running the Linux kernel 2.6.24-23.

**Read and Write Throughput**

By default, PCFS does not make any access checks when read or write operations are performed on a previously opened file. Instead, access checks are made when the file is opened. As a result, its read and write throughput is very close to that of FUSE/Null. The following table summarizes the read and write throughputs of PCFS and FUSE/Null based on reading and writing a 1GB file sequentially using the Bonnie++ test suite [1].

| Operation | PCFS (MB/s) | FUSE/Null (MB/s) |
|-----------|-------------|------------------|
| Read      | 538.69      | 567.47           |
| Write     | 73.18       | 76.05            |

It is possible, through a mount-time option, to force PCFS to check procaps that authorize read and write access during read and write operations, respectively. As long as the procaps checked are cached in memory, this does not affect performance, as the time taken to check a cached procap is only a few microseconds.

**File Stats**

Besides read and write, two other very common file operations are open and stat (reading a file's metadata). In terms of access checks, both are similar, as usually one procap must be checked in each case. The table below shows the speed of the stat operation in PCFS with different hit rates in the procap cache. All measurements are reported in the number of operations per second, as well as the time taken per operation. The title "n%" indicates a measurement with a cache hit rate of n%. For comparison, the performance of FUSE/Null is also shown. The figures are based on choosing a random file 20,000 times in a directory containing exactly 20,000 files and stating it. To get a hit rate of n%, the cache size is set to \(n/100 \times 20000\), and the cache is warmed a priori with random procaps. For an LRU cache, this results in a hit rate of exactly n% when subsequent files (procaps) are also chosen at random.

| Cache Hit Rate → | 0%   | 50%  | 90%  | 95%  | 98%  | 100% | FUSE/Null |
|------------------|------|------|------|------|------|------|-----------|
| Stats per Second  | 5774 | 7186 | 11879| 23652| 8871 | 9851 | 36042     |
| Time per Stat (µs)| 173.2| 139.2| 84.2 | 42.2 | 112.7| 101.5| 27.7      |

As can be seen from this table, the procap cache is extremely helpful in achieving efficiency. The difference in times between the last two columns provides an estimate of the time it takes to check a cached procap (i.e., the time needed to check the conditions in a procap). In this case, this time is \(42.2 - 27.7 = 14.5\) µs. This estimate is rough, and the actual time varies with the complexity of the conditions in the procap. The procaps used here are default ones. In other experiments, we have found that this time varies from 10 to 100 µs. By taking the difference in times between the first and last columns, we obtain an estimate of the time required to read a procap, check its signature, parse the procap, and check its conditions. In this experiment, this time is \(173.2 - 27.7 = 145.5\) µs. Additional time may be needed to seek the procap on disk, which is not counted here. This suggests that, in general, procap checking is dominated by reading and parsing times. The signatures we use for procaps are message authentication codes (MACs), which can be verified in 1 to 2 µs.

**File Creation and Deletion**

The table below lists the number of create and delete operations per second supported by PCFS and FUSE/Null. These are measured by creating and deleting 10,000 files in a single directory.

| Operation | PCFS (op/s) | FUSE/Null (op/s) |
|-----------|-------------|------------------|
| Create    | 1386        | 4738             |
| Delete    | 1989        | 15429            |

PCFS is approximately 3.5 times slower than FUSE/Null in creating files. This is because PCFS also creates six default procaps for every file created. As a result, it creates seven times as many files in three separate directories. Deletion in PCFS is nearly 7.7 times slower than in FUSE/Null. This is because when a file is deleted in PCFS, one procap must be looked up, parsed, and checked, and all procaps related to the file must later be deleted. This is done to avoid accumulating useless procaps; it can be turned off using a mount-time option. In this case, each file deletion corresponds to seven file deletions on the ext3 file system in three different directories. The effect of the procap cache is negligible during create and delete operations.

In summary, assuming a low rate of cache misses, the performance of PCFS on common file operations like read, write, stat, and open is comparable to that of FUSE/Null. On the other hand, less common operations like create and delete are slower because default procaps must be managed.

**Macrobenchmarks**

To understand the performance of PCFS in practice, we ran two simple macrobenchmarks. The first (called OpenSSL in the table below) untars the OpenSSL source code, compiles it, and deletes it. The other (called FUSE in the table below) performs similar operations for the source of the FUSE kernel module five times in sequence. As can be seen, the performance penalty for PCFS compared to FUSE/Null is approximately 10% for OpenSSL and 2.5% for FUSE. The difference arises because the OpenSSL benchmark depends more on file creation and deletion compared to the FUSE benchmark.

| Benchmark      | PCFS (s) | FUSE/Null (s) | Ext3 (s) |
|----------------|----------|---------------|----------|
| OpenSSL        | 126      | 114           | 94       |
| FUSE x 5       | 79       | 77            | 70       |

#### 6.2 Case Studies

We have completed two case studies using BL and PCFS. In each case, we expressed the policy from the case study in BL and considered whether it could be enforced in PCFS.

**Classified Information**

Our first case study formalizes rules for the control and dissemination of classified information among intelligence agencies in the U.S. (Examples 1 and 2 are based on this case study.) The enforcement of these rules was also the original motivation for building PCFS. We obtained information on these rules from public government documents and through an industrial collaborator. This information was distilled into 35 formulas in BL. The study is interesting because it uses almost all features of BL. Extended attributes are used to represent the classification status of files (classified vs. unclassified) and their classification level, as in Example 1. Attributes of individuals are specified in certificates issued by administrators, many of which expire at fixed points in time. For example, some background checks expire every 5 years. These expirations are represented using the @ connective in BL. Additionally, one of the rules requires arithmetic over time – the owner of an unclassified file can access it for 90 days after its creation. (BL supports linear arithmetic over time, but we have not discussed it in this paper.)

Some of the proofs needed for access in this study are quite large; they contain as many as 1100 proof steps and depend on 70 certificates. It takes nearly 100 ms to verify these proofs. This strongly supports the case for performing proof verification ahead of access and using capabilities, as PCFS does. If such proof verifications were performed during file access, the file system interface would be limited to less than 10 operations per second.

**Course Administration**

In our second case study, we formalize the rules for controlling permissions on directories for storing class materials and assignments, based on current workflows at our university. Although these rules are much simpler than those in the previous study, we had to add support for a new kind of interpreted predicate: `member(f, d)`, which means that file `f` is contained in directory `d`. This effort gave us an idea about the difficulty involved in extending PCFS (and BL) with new interpreted predicates. In total, it took us less than 10 minutes of programming effort to add support for this new predicate. (All parsers in our implementation already support parsing unknown predicates, so we only had to define a procedure for verifying the predicate.)