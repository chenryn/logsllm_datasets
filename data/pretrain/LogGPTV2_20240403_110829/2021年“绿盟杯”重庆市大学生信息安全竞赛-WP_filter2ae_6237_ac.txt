    aW5jbHVkaW5nIGluIHJlY2VudCBoaXN0b3JpY2FsIHRpbWVzIGFuZCB0
    aGUgcHJlc2VudCBkYXkuIFBvc3NpYmxlIHBlcm11dGF0aW9ucyBhcmUgZW5kbGVzcyBhbmQ=
    a25vd24gZXhhbXBsZXMgaW5jbHVkZTo=
    SGlkZGVuIG1lc3NhZ2VzIHdpdGhpbiB3YXggdGE=
    YmxldHM6IGluIGFuY2llbnQgR3JlZWNlLCBwZW9wbGUgd3JvdGUgbWU=
    c3NhZ2VzIG9uIHRoZSB3b29kLCB0aGV是uIGNvdmVyZWQgaXQgd2l0aCB3YXggdXBvbiB3aGljaCBhbiBpbm5vY2Vu
    dCBjb3ZlcmluZyBtZXNzYWdlIHdhcyB3cml0dGVu
    SGlkZGVuIG1lc3NhZ2VzIG9uIG1lc3NlbmdlcidzIGJvZHk6IGFsc28gdXNlZCBpbiBhbmNpZW4=
    用 base64 隐写脚本提取即可：
    #!/usr/bin/env python
    import re
    path = 'flag3.txt'
    b64char = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    with open(path, 'r')as f:
        cipher = [i.strip() for i in f.readlines()]
    plaintext = ''
    for i in cipher:
        if i[-2] == '=':  # There are 4-bit hidden info while end with two '='
            bin_message = bin(b64char.index(i[-3]))[2:].zfill(4)
            plaintext += bin_message[-4:]
        elif i[-1] == '=':  # There are 2-bit hidden info while end with one '='
            bin_message = bin(b64char.index(i[-2]))[2:].zfill(2)
            plaintext += bin_message[-2:]
    plaintext = re.findall('.{8}', plaintext)  # 8bits/group
    plaintext = ''.join([chr(int(i,2)) for i in plaintext])
    print(plaintext)
    flag3：37f267472516
    Flag：flag{042f38b694b52bff956837f267472516}
###  huahua
    huahua.zip 少文件头，补上后解压得到的 png 缺文件头；
    修补后尝试打开，发现 CRC 不对，使用其他忽略 CRC 的图片查看器打开发现少了一截，猜测是高被修改了；
    将高度修改大一点后成功拿到 flag
    Flag：flag{b3afc91a8fbb6cc798bdebb253b02550}
###  noise
    打开压缩包，查看文件类型发现 out 为 wav 音频格式，直接利用 audacity 打开看频谱，稍微调整一下设置后即可看得清楚 flag
    Flag：flag{98ce526ad52c409763405847185d9c6c}
###  DdDdDd
    流量包直接提取HTTP对象，其中一个 .gcode 文件较大，经搜索为打印机控制语言，直接用在线工具：https://gcode.ws/ 一把梭
    Flag：flag{2fc07441-fd87-4e1c-9f0f-72aa8c984a}
###  Forensic
    内存镜像先用 volatility 查看 imageinfo，发现是 win7 的内存；
    接着利用 filescan 导出文件列表，通过搜索 flag 搜索到 flag.docx 文件，再进行提取
    python2 vol.py -f data.raw --profile=Win7SP1x64 dumpfiles --dump-dir . -Q 0x000000007d1a0d10
    提取出来直接当作 zip 打开，查看 document.xml 文件，发现隐藏字符串：ZmxhZ3s5MDE3Y2VmMjZhMDdiZWI0ZTY2OWE0YTgwNmJjZDliNn0=，base64 解码即可拿到 flag
    Flag：flag{9017cef26a07beb4e669a4a806bcd9b6}
###  隐藏的数据
    zip 伪加密直接用 7-zip 绕过，其中 key.docx 当作压缩包解压后看 xml 文件，文件末尾有隐藏字符串
    flag.zip 直接解压得 flag，还是 zip 文件；
    尝试用此密码解压 zip 文件，发现无法打开，尝试 John 暴力破解成功拿到密码：0546
    解压后又得到 flag，但是还是 zip 文件，这里采用之前隐藏字符串给出的密码：$Th1S_1S_P@SSW0Rd#####，解压得到 flag_not_here.docx 文件；
    当作压缩包查看 xml，在接近末尾处找到 flag
    Flag：flag{4de41c0b106051b30cb3c654901b1b06}
###  something in picture
    这道题是今年强网杯的原题，这里直接贴大师傅的题解啦：https://zhuanlan.zhihu.com/p/381863924
    Flag：flag{D1mEn5i0nAl_Pr061em}
## Reverse
###  re1
    TEA 算法，但需要注意每次 key 都会变
    #include 
    #include "TEA.h"
    #include "XTEA.h"
    unsigned char enc[] =
    {
      0xD1, 0x5F, 0x50, 0x67, 0xA0, 0x6A, 0xDB, 0xBC, 0xE4, 0x5E,
      0x6B, 0x8D, 0x12, 0xF2, 0x5B, 0x78, 0xC2, 0xB3, 0xE4, 0xC6,
      0x58, 0x46, 0x80, 0x39
    };
    unsigned int key[4] = { 0x1060308, 0x50E070F, 0xA0B0C0D, 0xDEADBEEF };
    int main()
    {
        for (int i = 0; i 
    #include 
    #include 
    #include 
    #include 
    #include 
    using namespace std;
    #define N 4
    #define N2 16
    #define LIMIT 1000                                   //代表你设置的最大限度
    int MDT[N2][N2];                                    //代表所有节点的曼哈顿距离数组
    static const int dx[4] = { 0,-1,0,1 };              //方向数组
    static const int dy[4] = { 1,0,-1,0 };              //方向数组
    static const char dir[4] = { '%','@','$','#' };     //代表移动的标识，当搜索到最优解时，通常通过移动的标识长度来计算步数，同时也可以根据该标识来从输入的拼图推出最终的拼图。(r为向右，l为向左，u为向上，d为向下)
    struct Puzzle {                                     //代表拼图的结构体
        int f[N2];                                      //代表当前的拼图
        int space;                                      //代表空位的下标(或者说是0拼图下标)
        int MD;                                         //代表当前拼图的曼哈顿距离
    };
    Puzzle state;                                       //声明一个拼图(用处之后再说)
    int limit;                                          //代表最小成本的变量limit，也是IDA*中不断增加的限制值，在本题中起始值通常为输入拼图的曼哈顿距离，限制值一直增加到你设定的最大值LIMIT为止。若你的限定值limit在增加时超过了最大值，但还是没有搜索出结果的话，结果就为unsolvable
    int path[LIMIT];                                    //代表存储搜索到的路径数组。（也就是说，当你找到了从输入拼图到最终拼图的最短路径，那么在本题中这个路径会以一串移动的标识来显示。决定移动标识的下标值就会存储在这个路径数组中。
    int getAllMD(Puzzle pz)                             //代表求出输入拼图的曼哈顿距离的函数
    {
        int sum = 0;                                    //代表各个拼图的曼哈顿距离之和就为输入拼图的曼哈顿距离
        for (int i = 0; i  limit)                                      //如果当前的搜索深度+当前拼图的启发值（曼哈顿距离) 大于 限制深度的话，我们就要对其进行剪枝，禁止dfs再向下搜索。
        {
            return false;        
        }
        int sx = state.space / N;                                          //根据这个式子来求出当前所在的坐标(sx,sy),老实说我也没明白这个式子是什么意思，但是我们可以暂时理解为就是当前空位的下标，之后我们要对这个空位来进行移动，从而得到拼图的不同情况。
        int sy = state.space % N;
        Puzzle tmp;                                                        //声明拼图tmp
        for (int r = 0; r = N || ty >= N)                    //如果移动的下标要是越界的话，就直接进行返回
            {
                continue;
            }
            if (max(prev, r) - min(prev, r) == 2)                          //这个式子非常重要，虽说我是不知道它怎么来的，但是这个式子的意思是避免重复的搜索，如果有重复的搜索就直接返回。（例如：我将输入拼图中的8向右移动了一次，那么拼图为:1 2 3 4 6 7 16 8 5 10 11 12 9 13 14 15。将移动之后的地图进行再次的dfs，那么再次dfs的话，就有可能出现将8再向左移动一位的情况。向左移动一位的话，拼图就又变回去了(1 2 3 4 6 7 8 16 5 10 11 12 9 13 14 15)。所以，为了防止这个情况的发生，有了这个式子。(不信的话可以打个断点，试一下就知道了。)
            {
                continue;
            }
            tmp = state;                                                   //将temp地图等于state拼图
            state.MD -= MDT[tx * N + ty][state.f[tx * N + ty] - 1];        //代表进行拼图的移动时，有没有因为这个拼图的移动导致原先的曼哈顿距离减少。典型的例子就是将拼图移动到了规定的位置中(这里规定的位置指某块拼图在终点拼图的位置)。并且，这段话的意思就是计算移动后的新拼图的曼哈顿距离
            state.MD += MDT[sx * N + sy][state.f[tx * N + ty] - 1];        //代表进行拼图的移动时，有没有因为这个拼图的移动导致原先的曼哈顿距离增加。典型的例子就是某块拼图移动到了规定的位置更远处。（举个例子：例如我将输入拼图1 2 3 4 6 7 8 16 5 10 11 12 9 13 14 15 中的4向下移动，那么原先的曼哈顿距离就会加1。（因为4向下移动并没有将原来的曼哈顿距离减少，因为除4之外的拼图都没有进行移动。而4向下移动就会让4脱离原先正确的位置，使原先的曼哈顿距离加了1)
            swap(state.f[tx * N + ty], state.f[sx * N + sy]);              //代表进行拼图的移动，并生成新拼图state
            state.space = tx * N + ty;                                     //重新计算新拼图的空位下标
            if (dfs(depth + 1, r))                                         //生成新拼图后向下继续搜索
            {
                path[depth] = r;                                           //如果搜索成功，那么就将最短步数中的每一步都记录在path数组中。r代表移动的具体方向下标。depth代表当前遍历的深度。其实就是第几步的意思。(例如：path[5] = 2，就代表第5步向左移动的意思,同时对应着移动标识的'l')
                return true;                                               //代表搜索成功，返回上一层
            }
            state = tmp;                                                   //如果在这个拼图的移动中，搜索没成功的话，那么就将当前移动之后的拼图回溯到之前没有进行移动过的状态，并尝试进行下一方向的移动。
        }
        return false;                                                      //如果四个方向搜索均没有成功的话，那么就代表当前限制深度(limit)中无解，需要在下一个限制深度(limit+1)中重新进行dfs。
    }
    string iterative_deepening(Puzzle in)                    //代表进行IDA*搜索的函数
    {
        in.MD = getAllMD(in);                                //计算输入拼图的启发值,同时也是输入拼图的曼哈顿距离
        for (limit = in.MD; limit <= LIMIT; limit++)         //进行迭代加深搜索的循环，起始限制值为输入拼图的曼哈顿距离(启发值),通过不断搜索增加限制值，实其让dfs具有bfs的功能。直到限制值增大到最大值（LIMIT)+1为止。如果限制值一直到最大值+1的期间都没有搜索到结果，则整个IDA*也就无法找到结果。