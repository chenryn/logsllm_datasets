"os"
"time"
)
func main() {
service := ":1200"
tcpAddr, err := net.ResolveTCPAddr("tcp", service)
checkError(err)
listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
for {
conn, err := listener.Accept()
if err != nil {
continue
}
daytime := time.Now()
// Ignore return network errors.
mdata, _ := asn1.Marshal(daytime)
conn.Write(mdata)
conn.Close() // we're finished
}
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
which can be compiled to an executable such as ASN1DaytimeServer and run with no
arguments. It will wait for connections and then send the time as an ASN.1 string
to the client.
它可以被编译为一个诸如名为ASN1DaytimeServer 的可执行程序，运行它不需要任何实际参数，（启
动后）它将等待来自客户端的连接，当有新连接后它会将当前时间当作ASN.1 字符串传回给客户端.
A client is
客户端代码是
/* ASN.1 DaytimeClient
*/
package main
import (
"bytes"
"encoding/asn1"
"fmt"
"io"
"net"
"os"
"time"
)
func main() {
if len(os.Args) != 2 {
fmt.Fprintf(os.Stderr, "Usage: %s host:port", os.Args[0])
os.Exit(1)
}
service := os.Args[1]
conn, err := net.Dial("tcp", service)
checkError(err)
result, err := readFully(conn)
checkError(err)
var newtime time.Time
_, err1 := asn1.Unmarshal(result, &newtime)
checkError(err1)
fmt.Println("After marshal/unmarshal: ", newtime.String())
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
func readFully(conn net.Conn) ([]byte, error) {
defer conn.Close()
result := bytes.NewBuffer(nil)
var buf [512]byte
for {
n, err := conn.Read(buf[0:])
result.Write(buf[0:n])
if err != nil {
if err == io.EOF {
break
}
return nil, err
}
}
return result.Bytes(), nil
}
This connects to the service given in a form such as localhost:1200, reads the TCP
packet and decodes the ASN.1 content back into a string, which it prints.
连接字符串形如：localhost:1200。它将读取应答TCP 包然后将ASN.1 内容解码成字符串并输出。
We should note that neither of these two - the client or the server - are compatable
with the text-based clients and servers of the last chapter. This client and server
are exchanging ASN.1 encoded data values, not textual strings.
我们应当注意，无论是客户端还是服务器都不兼容前一章介绍的基于文本的客户端与服务器。此地的
客户端与服务器交换的是ASN.1 编码的数据值，而非文本串。
4.5 JSON JSON
JSON stands for JavaScript Object Notation. It was designed to be a lighweight means
of passing data between JavaScript systems. It uses a text-based format and is
sufficiently general that it has become used as a general purpose serialisation
method for many programming languages.
JSON 全称是JavaScript Object Notation,它是一种应用于JavaScript 系统之间传递数据的轻
量级格式。它使用基于文本的格式，因为足够通用，现在已经成为了多种编程语言采用的通用的序列
化方法了。
JSON serialises objects, arrays and basic values. The basic values include string,
number, boolean values and the null value. Arrays are a comma-separated list of values
that can represent arrays, vectors, lists or sequences of various programming
languages. They are delimited by square brackets "[ ... ]". Objects are represented
by a list of "field: value" pairs enclosed in curly braces "{ ... }".
JSON 序列化对象，数组和基本值。基本值包括：字符串，数字，布尔值和 NULL 值。数组是逗号分
割的一组值的列表，可以用来表示各种编程语言中的数组、向量、列表或者序列。它们由方括号来界
定，对象则由一个包含在大括号中的"field: values"对构成的列表来表示。
For example, the table of employees given earlier could be written as an array of
employee objects:
例如.前面提到过的雇员表可以被编码成如下的一个雇员对象的数组.
[
{Name: fred, Occupation: programmer},
{Name: liping, Occupation: analyst},
{Name: sureerat, Occupation: manager}
]
There is no special support for complex data types such as dates, no distinction
between number types, no recursive types, etc. JSON is a very simple language, but
nevertheless can be quite useful. Its text-based format makes it easy for people
to use, even though it has the overheads of string handling.
JSON 没有为类似日期这这样的复杂数据类型提供特别的格式支持，不区分各种数字类型，也没有递
归类型等。JSON 是一个非常简单但却十分有用的语言，尽管他基于文本的格式在字符传递上开销过
多，但是却很适合人类阅读和使用。
From the Go JSON package specification, marshalling uses the following
type-dependent default encodings:
从Go JSON 包的规范文档可知，JSON 包将在编组时使用以下类型相关的默认编码方法：
 Boolean values encode as JSON booleans.
 Floating point and integer values encode as JSON numbers.
 String values encode as JSON strings, with each invalid UTF-8 sequence replaced
by the encoding of the Unicode replacement character U+FFFD.
 Array and slice values encode as JSON arrays, except that []byte encodes as
a base64-encoded string.
 Struct values encode as JSON objects. Each struct field becomes a member of
the object. By default the object's key name is the struct field name converted
to lower case. If the struct field has a tag, that tag will be used as the
name instead.
 Map values encode as JSON objects. The map's key type must be string; the object
keys are used directly as map keys.
 Pointer values encode as the value pointed to. (Note: this allows trees, but
not graphs!). A nil pointer encodes as the null JSON object.
 Interface values encode as the value contained in the interface. A nil interface
value encodes as the null JSON object.
 Channel, complex, and function values cannot be encoded in JSON. Attempting
to encode such a value causes Marshal to return an InvalidTypeError.
 JSON cannot represent cyclic data structures and Marshal does not handle them.
Passing cyclic structures to Marshal will result in an infinite recursion.
 布尔值被编码为JSON 的布尔值。
 浮点数与整数被编码为JSON 的数字值。
 字符串被编码为JSON 的字符串，每一个非法的UTF-8 序列将会被UTF8 替换符U+FFFD 替换。
 数组与Slice 会被编码为JSON 数组，但是[]byte 是会被编码为base64 字符串。
 结构体被编码为JSON 对象。每一个结构体字段被编码为此对象的对应成员，默认情况下对象
的key 的名字是对应结构体字段名的小写。如果此字段含有tag，则此tag 将是最终对象 key
的名字。
 map值被编码为JSON对象，此map的key的类型必须是string；map的key直接被当作JSON
对象的key。
 指针值被编码为指针所指向的值（注意：此处只允许出现树(tree),而不允许出现图（graph）！）。
空指针被编码为空JSON 对象.
 接口值被编码为接口实际包含的值。空接口被编码为空JSON 对象。
 程道，复数，函数不能被编码为JSON 格式。如果尝试这样做，Marshal 将会返回一个
InvalidTypeError 错误。
 JSON 不能表示环形数据结构。Go 的Marshal 函数也不处理它们，将一个环形结构传递给
Marshal 将会导致死循环。
A program to store JSON serialised data into a file is
将JSON 数据存入文件的示例如下:
/* SaveJSON */
package main
import (
"encoding/json"
"fmt"
"os"
)
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Kind string
Address string
}
func main() {
person := Person{
Name: Name{Family: "Newmarch", Personal: "Jan"},
Email: []Email{Email{Kind: "home", Address: "PI:EMAIL"},
Email{Kind: "work", Address: "PI:EMAIL"}}}
saveJSON("person.json", person)
}
func saveJSON(fileName string, key interface{}) {
outFile, err := os.Create(fileName)
checkError(err)
encoder := json.NewEncoder(outFile)
err = encoder.Encode(key)
checkError(err)
outFile.Close()
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
and to load it back into memory is
可以这样将之重新加载到内存中:
/* LoadJSON
*/
package main
import (
"encoding/json"
"fmt"
"os"
)
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Kind string
Address string
}
func (p Person) String() string {
s := p.Name.Personal + " " + p.Name.Family
for _, v := range p.Email {
s += "\n" + v.Kind + ": " + v.Address
}
return s
}
func main() {
var person Person
loadJSON("person.json", &person)
fmt.Println("Person", person.String())
}
func loadJSON(fileName string, key interface{}) {
inFile, err := os.Open(fileName)
checkError(err)
decoder := json.NewDecoder(inFile)
err = decoder.Decode(key)
checkError(err)
inFile.Close()
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
The serialised form is (formatted nicely)
被序列化后的结果如：（经过了美化处理）
{"Name":{"Family":"Newmarch",
"Personal":"Jan"},
"Email":[{"Kind":"home","Address":"PI:EMAIL"},
{"Kind":"work","Address":"PI:EMAIL"}
]
}
A client and server
客户端与服务器
A client to send a person's data and read it back ten times is
一个将person 数据收发10 次的客户端
/* JSON EchoClient
*/
package main
import (
"fmt"
"net"
"os"
"encoding/json"
"bytes"
"io"
)
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Kind string
Address string
}
func (p Person) String() string {
s := p.Name.Personal + " " + p.Name.Family
for _, v := range p.Email {
s += "\n" + v.Kind + ": " + v.Address
}
return s
}
func main() {
person := Person{
Name: Name{Family: "Newmarch", Personal: "Jan"},
Email: []Email{Email{Kind: "home", Address: "PI:EMAIL"},
Email{Kind: "work", Address: "PI:EMAIL"}}}
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host:port")
os.Exit(1)
}
service := os.Args[1]
conn, err := net.Dial("tcp", service)
checkError(err)
encoder := json.NewEncoder(conn)
decoder := json.NewDecoder(conn)
for n := 0; n < 10; n++ {
encoder.Encode(person)
var newPerson Person
decoder.Decode(&newPerson)
fmt.Println(newPerson.String())
}
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
func readFully(conn net.Conn) ([]byte, error) {
defer conn.Close()
result := bytes.NewBuffer(nil)
var buf [512]byte
for {
n, err := conn.Read(buf[0:])
result.Write(buf[0:n])