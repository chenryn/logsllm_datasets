camera driver: CVE-2016-2501, CVE-2016-3903, and
CVE-2016-2061. We leverage the available PoCs in our
analysis. The PoCs crash the kernel using the reported
vulnerability. We use the kernel crash dump to iden-
tify the crash site. We then insert a breakpoint before
the crash site in a GDB session to investigate the root
cause of the crash. Since we compile the driver and ker-
nel with debugging information, GDB can also display
source lines, making the debugging much easier.
CVE-2016-3903.
The vulnerable code is shown
in Figure 4a. The crash site is at line 11 (in function
msm csid cid lut()). At a ﬁrst glance, this appears
to be an out-of-bounds access bug, but our investiga-
tion (described next) showed that this is a use-after-free
bug. We performed our investigation as follows. By us-
ing a watchpoint, we ﬁnd that the index variable i at the
crash site is always within a normal range (and not neg-
ative). We then try to inspect other pointer values at the
crash site with GDB and ﬁnally identify that vc cfg[i]
holds an invalid address. To trace the origin of the array
vc cfg, we utilize watchpoints to trace its parent struc-
ture csid lut params and ﬁnally locate another func-
tion, msm csid cmd, which is responsible for initializ-
ing the structure. By single-stepping through the initial-
ization code, we ﬁnd that if an error occurs during the
vc cfg initialization at line 2, it will be freed at line 4
and then the initialization loop will terminate at line 6.
However, the function call at line 10 will continue to use
the csid params structure regardless of its vc cfg sub-
ﬁeld having been freed, thus causing a use-after-free vul-
nerability.
CVE-2016-2501. The vulnerable code is shown in
Figure 4b. The crash site is at line 5. When the break-
point at the crash site is triggered, we can infer that it
is likely an out-of-bounds array access. Next, we set
a watchpoint for the index variable step index, trac-
ing its value change. Indeed, its value is negative when
the crash occurs. Upon a closer look, as a loop index,
it is compared against step boundary at line 3, which
is a 16-bit register holding the value of 0xffff. How-
ever, step index is a signed integer and can take neg-
ative values before it reaches 0xffff to terminate the
loop (note that the comparison is unsigned). Therefore,
when it is used as array index at line 5, out-of-bounds
access occurs. In the end, we also set a watchpoint for
step boundary and ﬁnd that its value comes from a
function argument passed from user space, which is un-
trusted.
CVE-2016-2061. The vulnerable code is shown in
302    27th USENIX Security Symposium
USENIX Association
Figure 4c. A ﬁrst glance at the crash site suggests a pos-
sibility that memset() at line 5 zeroes an invalid mem-
ory region, which causes the kernel crash. Indeed, by in-
specting the various variable values involved in the crash
at the crash site, we ﬁnd that i takes a negative value as
an array index, leading to an out-of-bounds access. To
fully understand why i can be negative, we trace it back
with the help of watchpoints and ﬁnd that the value of i
comes from a user controlled parameter (line 1). Besides,
the sanity check at line 2 cannot ﬁlter the negative i, un-
fortunately. We then ﬁnd out that this is a critical vul-
nerability. This is because starting from line 6, the right
side of the assignment statements is also controlled by
a parameter stream cfg cmd originated in user space.
Together with the user controlled index variable i, this
vulnerability becomes an ideal target for privilege esca-
lation, which we show we can achieve next.
6.6 Building a Driver Exploit using GDB
Our analysis in the previous subsection show that CVE-
2016-2061 can be potentially used for a full compromise
of the kernel given that it can perform write operations
at unintended locations. To further demonstrate the ca-
pabilities of Charm, we use GDB on the driver code and
attempt to develop an exploit against it.
The ﬁrst step is to check if the “vulnerable object”
(struct vfe device, where the out-of-bounds write
occurs) is a kernel heap or stack object. With GDB, we
are able to conﬁrm that it is allocated using kzalloc(),
indicating that it is a heap object. To gain the ability
of arbitrary code execution from heap-related vulnera-
bilities, we attempt heap feng shui [40, 55], which is a
technique to arrange the heap layout in a deterministic
fashion to facilitate the write operation. However, this
vulnerability only allows a very limited form of write.
First of all, it cannot write to absolute addresses (only
relative addresses to the base of an object). Secondly,
when it writes, 480 bytes are written continuously (most
are 0s due to the memset() at line 5), with only a few
ﬁelds controlled by the attacker. Such a large memory
footprint can destroy the integrity of data stored nearby
and cause a kernel crash.
To address the ﬁrst problem, we borrow the heap feng
shui idea from the exploit of CVE-2017-7308 [5] to pre-
cisely co-locate the “vulnerable object” with one or more
“target objects” (where one of their function pointer
ﬁelds is the target for overwriting). To verify the feasi-
bility of this approach, we use GDB to track the location
of the vulnerable object. It turns out that the object is
allocated in the beginning when the kernel boots, as part
of the driver initialization procedure. In addition, its ad-
dress changes from boot to boot, making it difﬁcult to
predict. When we attempt to allocate target objects (e.g.,
struct sock), their addresses shown by GDB are never
close to the vulnerable object, due to the fact that they are
allocated much later after the kernel boots completely.
This means that the strategy of precisely co-locating the
objects is not feasible. However, from GDB, we do no-
tice that the address ranges of the vulnerable object and
target objects more or less stay the same. This means that
we can potentially spray a large number of target objects
and try to arrange the target objects to be at a desired
offset from the vulnerable object.
To address the second problem, where a 480-byte
overwrite may crash the kernel unintentionally, it is nec-
essary to know the size of the target object and how likely
they will align with the vulnerable object. As it turns
out, the vulnerable object is always at the start of a page.
After exhausting the slab caches, we know that target
objects (we use struct inet sock which has a size
of 896 bytes) are allocated in blocks whose addresses
are aligned to be multiples of 4 pages. This allows us
to calculate the desired offset at which the write should
occur, where the sk destruct function pointer can be
overwritten. As a proof-of-concept, we use GDB to en-
sure that the target objects can indeed fall in the desired
address range. By calling close() on the socket from
user space, we can indeed cause the kernel to jump to
any arbitrary location to execute code. Otherwise, we
can simply spray enough objects and hope that the write
will probabilistically succeed. Alternatively, we need a
kernel arbitrary read vulnerability (similar to what Melt-
down [52] provides) so that the attack can be determinis-
tic.
Still, we need to make sure that the 480-byte over-
write does not crash the kernel. After all, the function
pointer is towards the end of the struct inet sock ob-
ject, and the 480-byte overwrite will corrupt the next ob-
ject adjacent to it. Fortunately, since we know struct
inet sock objects are allocated sequentially from low
addresses to high addresses in a block, we can simply it-
erate the close() on each and every socket from user
space and stop as soon as we notice a redirection of the
control ﬂow, ensuring that no one will touch the cor-
rupted object.
7 Related Work
7.1 Remote I/O Access
The closest to our work are Avatar [77] and SURRO-
GATES [50], solutions for dynamic analysis of binary
ﬁrmware in embedded devices, such as a hard disk boot-
loader, a wireless sensor node, and a mobile phone base-
band chip. Since performing analysis in embedded de-
vices is difﬁcult, they execute the ﬁrmware in an emula-
tor and forward the low-level memory accesses (includ-
USENIX Association
27th USENIX Security Symposium    303
ing I/O operation) to the embedded device. The remoting
boundary in these solutions is similar to the boundary
used in Charm. However, they focus on very different
software and hardware. More speciﬁcally, they focus on
binary ﬁrmware of embedded devices whereas Charm fo-
cuses on open source device drivers of mobile systems.
Moreover, the connections to the embedded devices are
low-bandwidth UART or JTAG interfaces in Avatar and
a custom FPGA bridge in SURROGATES. In contrast,
Charm uses a USB interface. This, in turn, results in dif-
ferent underlying techniques used in these systems. First,
in its full separation mode, Avatar forwards all memory
accesses to the embedded device, unlike Charm that ports
the device driver fully to the virtual machine and only
forwards I/O accesses. This results in poor performance
in Avatar unlike Charm, which achieves performance on
par with that of native mobile execution. To optimize,
Avatar uses heuristics to perform some memory access
locally. It also executes some or all of the ﬁrmware code
directly on the embedded device. In contrast, Charm runs
all the device driver code in the virtual machine. And
for performance optimizations, it devises a custom low-
latency USB channel and leverages the native execution
speed of x86 processors. SURROGATES, on the other
hand, tries to overcome the performance bottleneck in
Avatar using a custom FPGA bridge that connects the
host machine’s PCI Express interface to the embedded
device under test. In contrast, Charm does not require
custom hardware. These technical differences also make
these solutions useful for different analysis techniques.
For example, Charm can fuzz the device driver fully in a
virtual machine.
Other forms of remote I/O exists for mobile sys-
tems as well, such as Rio [22] and M+ [60]. The
main difference between Charm and these systems is
the boundary at which I/O operations are remoted. Rio
uses the device ﬁle boundary and M+ uses the Android
binder IPC boundary. In contrast, Charm uses the low-
level software-hardware boundary. Therefore, Charm
uniquely enables the remote execution of the device
driver. In both Rio and M+, the device driver remains
in the machine containing the I/O device.
Code ofﬂoad has been an important topic in mobile
computing research [35,38,44,45] in an effort to improve
performance and reduce energy consumption. The idea
is to ofﬂoad heavy computation to a server to reduce the
load on the mobile system itself. In Charm, in contrast,
we “ofﬂoad” the I/O operations from the workstation to
real mobile systems.
7.2 Analysis of System Software
Over the years, many static and dynamic analysis so-
lutions have been invented for a wide range of appli-
In re-
cations such as safety, reliability, and security.
cent years, popular analysis techniques include taint
tracking [34, 41, 59, 76], symbolic and concolic execu-
tion [27, 28, 30, 31, 39, 73], unpacking and reverse engi-
neering [47, 49, 74, 79], malware sandboxing [3, 25, 71],
and fuzzing [29, 42, 69, 72].
Many of these analysis frameworks are built on top
of the virtualization technology and can support full-
system analysis, including the low-level code such as
kernel and device drivers [33, 34, 59, 75, 76]. For in-
stance, Panorama [76] and DroidScope [75] can analyze
the entire Windows and Android operating systems, re-
spectively. Aftersight [33] uses virtual machine replay
to feed recorded logs from a production system to a test-
ing system in real time where more expensive analysis
is run. kAFL is a hardware-based feedback-driven ker-
nel fuzzer [65]. It uses the Intel Processor Tracer (PT) to
collect execution traces in the hypervisor and use that to
guide the fuzzer. Digtool is a kernel vulnerability detec-
tion solution based on a customized hypervisor, which
can monitor various events in the kernel such as memory
allocation and thread scheduling. Keil et al. fuzz wire-
less device drivers in a QEMU virtual machine [48]. To
enable the driver to run in a virtual machine, they emu-
late the wireless interface hardware in software. Dovga-
lyuk et al. perform reverse debugging of device drivers
in a QEMU virtual machine. They use GDB as well
as record-and-replay in their debugging. Unfortunately,
none of these solutions can be applied to device drivers of
mobile systems. They can only support system software
running within a virtual machine, e.g., device drivers for
emulated and virtualized I/O devices (including direct
device assignment for PCI-based I/O devices). Charm
addresses this problem and is complementary to all of
these solutions.
In other words, Charm enables all of
these dynamic analysis solutions to be applied to device
drivers of mobile systems as well.
Fuzzing is an effective dynamic analysis technique,
which can be applied to the operating system kernel and
device drivers as well. Peach Fuzzer fuzzes the device
drivers by running a fuzzer in a separate physical ma-
chine than the one with the I/O device [17]. While su-
perior to running the fuzzer and driver in the same ma-
chine, their approach suffers from similar challenges that
Syzkaller suffers from when fuzzing a mobile system di-
rectly (§2.3). Charm solves these problems by making it
possible to run the device driver in a virtual machine.
In [57], Mendonc¸a et al. fuzz the Wi-Fi interface card
driver. They perform the fuzzing directly on a Windows
Mobile Phone. In contrast, Charm enables the fuzzing
to be performed in a virtual machine in a workstation,
providing signiﬁcant usability beneﬁts.
DIFUZE automatically generates
for
fuzzing the kernel device drivers directly on mobile sys-
templates
304    27th USENIX Security Symposium
USENIX Association
tems [36]. IMF improves input generation by inferring
a model for the system under test [46].
It learns the
model by inspecting how application use the APIs of
this system. Skyﬁre deploys data driven seed generation
to enable fuzzing deep parts of the code [67]. Charm
approach is orthogonal and it can beneﬁt from DIFUZE,
IMF and Skyﬁre for template generation.
VUzzer boosts the fuzzing effectiveness using static
It helps the fuzzer to spend most of its
analysis [63].
time reaching deeper parts of the code. Bohme et al.
introduced a directed greybox fuzzing technique, which
encourages the fuzzer to trigger speciﬁed part of the
code [26]. VUzzer and directed greybox fuzzing can be
used alongside Charm to improve the code coverage.
Slowfuzz enables ﬁnding non-crash bugs [62]. Charm
can beneﬁt from Slowfuzz since it generally broadens the
scope of the fuzzers’ use cases.
The diversity of device drivers and their direct inter-
actions with physical I/O devices create challenges for
dynamic analysis. Static analysis, therefore, has been
extensively used on device drivers [23, 32, 61]. Exam-
ples are symbolic execution solutions such as in Sym-
Drive [64], S2E [30, 31], and DDT [51] and taint and
pointer analyses such as in DR. CHECKER [56]. Static
analysis has the beneﬁt of eliminating the need for the
presence of actual devices. However, static analysis tools
cannot uncover all the bugs and vulnerabilities in the
drivers. They can only detect those which the analyzer
explicitly checks for. Moreover, static analysis solutions
often suffer from large false positive rates due to impre-
cision.
Analysis of ﬁrmware running inside embedded de-
vices faces similar challenges stemming from diversity
as analysis of device drivers. Both static analysis [37]
and dynamic analysis [66, 77] solutions have been used
for ﬁrmware analysis as well. In contrast to this line of
work, Charm focuses on modern mobile systems.
7.3 Mobile Testing
Several mobile testing frameworks have recently
emerged. BareDroid analyzes Android apps directly on
mobile systems [58]. SPOKE analyzes the access con-
trol policies of Android by running test cases directly
on mobile systems [68]. The main motivation behind
this line of work is that the system software of mobile
systems are unique and device-speciﬁc and hence these
tests cannot be simply performed on virtual machines.
Our motivation is in line with these systems. However,
directly analyzing the device drivers in mobile systems
is challenging, as we extensively discussed in the paper.