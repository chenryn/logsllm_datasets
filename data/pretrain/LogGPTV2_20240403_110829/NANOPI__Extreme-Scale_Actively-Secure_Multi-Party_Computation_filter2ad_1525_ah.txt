15
20
)
s
/
D
N
A
(
d
e
e
p
S
60K
50K
40K
30K
20K
10K
0
150
50
45
40
30
35
25
Memory (MB)
Figure 11: Memory’s impact on performance
200
250
300
Memory (MB)
(⊗ for LAN, + for WAN)
)
s
/
D
N
A
(
d
e
e
p
S
40K
30K
20K
10K
0
350
400
450
500
2
3
4
5
6
7
8
9 10 11 12
Number of parties
Figure 12: Scale up with # of parties
(⊗ for LAN, + for WAN)
Table 6: Comparing to Pool-JIMU and WRK in executing two-party random circuits (B refers to cut-and-choose bucket size.)
Memory
Budget
Protocol
) 20 Mbps
s
/
D
N
A
200 Mbps
40 ms
(
d
e
e
p
S
40 ms
2 Gbps
<1 ms
Bandwidth
(Byte/AND)
20 MB
200 MB
2 GB
This Work
(B = 4)
Pool-JIMU
(B=6)
WRK
(only if
|Cf | ≤ 3.8K)
This Work
(B=3)
Pool-JIMU
(B = 4)
WRK
(only if
|Cf | ≤ 38K)
This Work
(B = 3)
Pool-JIMU
(B = 4)
WRK
(only if
|Cf | ≤ 500K)
795.03
825.18
20.27K
505
561
4.12K
46.6K
3.3K
1.73K
2.76K
20.53K
504
2.73K
6.94K
46.66K
380
787.72
6.21K
69.77K
2.2K
2.75K
12.94K
46.84K
504
3.12K
20.94K
49.34K
379
925.04
7.20K
88.01K
1.8K
3.23K
22.38K
50.64K
378
Pool-JIMU
WRK
This work
6.25
5.33
2.88
2.69
2.09
1.94
1.03
0.25
0.14
0.08
0.31
0.2
0.49
0.46
)
s
(
e
m
T
i
6
4
2
0
AES
(2 Party)
AES
(4 Party)
AES
(8 Party)
SHA256
(2 Party)
SHA256
(4 Party)
SHA256
(8 Party)
Figure 13: Application-specific performance comparisons. (Pool-
JIMU was run with 2.6M pool, B = 4, and check rate rc = 3%. This work was run with
479K pool, B = 3, and stage of 128K AND.)
[30] Payman Mohassel and Yupeng Zhang. 2017. Secureml: A system for scalable
privacy-preserving machine learning. In IEEE Symposium on Security and Privacy.
[31] Benjamin Mood, Lara Letaw, and Kevin Butler. 2012. Memory-efficient garbled
circuit generation for mobile devices. In International Conference on Financial
Cryptography and Data Security. Springer, 254–268.
[32] Greg Morrisett, Matthias Felleisen, and Robert Harper. 1995. Abstract Models
of Memory Management. In Proceedings of the Seventh International Conference
on Functional Programming Languages and Computer Architecture (FPCA). ACM,
New York, NY, USA, 66–77.
[33] Moni Naor and Benny Pinkas. 2001. Efficient oblivious transfer protocols. In
[34] Kartik Nayak, Xiao Wang, Stratis Ioannidis, Udi Weinsberg, Nina Taft, and Elaine
Shi. 2015. GraphSC: Parallel secure computation made easy. In IEEE Symposium
on Security and Privacy.
[35] Jesper Nielsen, Peter Nordholt, Claudio Orlandi, and Sai Burra. 2012. A new
approach to practical active-secure two-party computation. In CRYPTO.
[36] Jesper Nielsen, Thomas Schneider, and Roberto Trifiletti. 2017. Constant Round
Maliciously Secure 2PC with Function-independent Preprocessing using LEGO.
In NDSS.
SODA.
Protocol Π2pc
Inputs: the parties agree on a function f : {0, 1}|I1| × {0, 1}|I2| → {0, 1}|O|. P1 holds x ∈ {0, 1}|I1| and P2 holds y ∈ {0, 1}|I2|.
Function-independent preprocessing:
(1) P1 and P2 send init to FPre, which sends ∆1 to P1 and ∆2 to P2.
(2) For each wire w ∈ I1 ∪ I2 ∪ W where W denotes the set of internal wires, P1 and P2 send abit to FPre. In return, FPre sends (rw, M[rw], K[sw]) to P1
and (sw, M[sw], K[rw]) to P2. Define λw = sw ⊕ rw . P1 picks a uniform κ-bit string L0
w and sets L1
w (cid:66) L0
w ⊕ ∆1.
Function-dependent preprocessing:
(3) For each gate G = (α, β, γ , ⊕), P1 computes (rγ , M[rγ ], K[sγ ]) (cid:66) (rα ⊕rβ , M[rα ] ⊕ M[rβ], K[sα ] ⊕ K[sβ]), and sets L0
(4) For each gate G = (α, β, γ , ∧):
Similarly, P2 computes (sγ , M[sγ ], K[rγ ]) := (sα ⊕ sβ , M[sα ] ⊕ M[sβ], K[rα ] ⊕ K[rβ]). Define λγ = λα ⊕ λβ .
(a) P1 (resp., P2) sends (aAND, (rα , M[rα ], K[sα ]), (rβ , M[rβ], K[sβ])) (resp., (aAND, (sα , M[sα ], K[rα ]), (sβ , M[sβ], K[rβ]))) to FPre. In return, FPre
(b) P1 computes the following locally:
sends (rσ , M[rσ ], K[sσ ]) to P1 and (sσ , M[sσ ], K[rσ ]) to P2, where sσ ⊕ rσ = λα ∧ λβ .
β and L1
α ⊕ L0
γ (cid:66) L0
γ (cid:66) L0
γ ⊕ ∆1.
)
(rγ ,0, M[rγ ,0], K[sγ ,0]) (cid:66)(rσ ⊕ rγ ,
)
(rγ ,1, M[rγ ,1], K[sγ ,1]) (cid:66)(rσ ⊕ rγ ⊕ rα ,
(rγ ,2, M[rγ ,2], K[sγ ,2]) (cid:66)(rσ ⊕ rγ ⊕ rβ ,
)
(rγ ,3, M[rγ ,3], K[sγ ,3]) (cid:66)(rσ ⊕ rγ ⊕ rα ⊕ rβ , M[rσ ] ⊕ M[rγ ] ⊕ M[rα ] ⊕ M[rβ], K[sσ ] ⊕ K[sγ ] ⊕ K[sα ] ⊕ K[sβ] ⊕ ∆1)
M[rσ ] ⊕ M[rγ ],
M[rσ ] ⊕ M[rγ ] ⊕ M[rα ],
M[rσ ] ⊕ M[rγ ] ⊕ M[rβ],
K[sσ ] ⊕ K[sγ ]
K[sσ ] ⊕ K[sγ ] ⊕ K[sα ]
K[sσ ] ⊕ K[sγ ] ⊕ K[sβ]
(c) P2 computes the following locally:
)
(sγ ,0, M[sγ ,0], K[rγ ,0]) (cid:66)(sσ ⊕ sγ ,
)
(sγ ,1, M[sγ ,1], K[rγ ,1]) (cid:66)(sσ ⊕ sγ ⊕ sα ,
(sγ ,2, M[sγ ,2], K[rγ ,2]) (cid:66)(sσ ⊕ sγ ⊕ sβ ,
)
(sγ ,3, M[sγ ,3], K[rγ ,3]) (cid:66)(sσ ⊕ sγ ⊕ sα ⊕ sβ ⊕ 1, M[sσ ] ⊕ M[sγ ] ⊕ M[sα ] ⊕ M[sβ], K[rσ ] ⊕ K[rγ ] ⊕ K[rα ] ⊕ K[rβ])
M[sσ ] ⊕ M[sγ ],
M[sσ ] ⊕ M[sγ ] ⊕ M[sα ],
M[sσ ] ⊕ M[sγ ] ⊕ M[sβ],
K[rσ ] ⊕ K[rγ ]
K[rσ ] ⊕ K[rγ ] ⊕ K[rα ]
K[rσ ] ⊕ K[rγ ] ⊕ K[rβ]
(d) P1 computes L1
α (cid:66) L0
α ⊕ ∆1 and L1
β
(cid:66) L0
β ⊕ ∆1, and then sends the following to P2:
γ ⊕ K[sγ ,0] ⊕ rγ ,0∆1)
L0
γ ⊕ K[sγ ,1] ⊕ rγ ,1∆1)
L0
γ ⊕ K[sγ ,2] ⊕ rγ ,2∆1)
L0
γ ⊕ K[sγ ,3] ⊕ rγ ,3∆1)
L0
β , γ , 0) ⊕ (rγ ,0, M[rγ ,0],
β , γ , 1) ⊕ (rγ ,1, M[rγ ,1],
β , γ , 2) ⊕ (rγ ,2, M[rγ ,2],
β , γ , 3) ⊕ (rγ ,3, M[rγ ,3],
α , L0
α , L1
α , L0
α , L1
Gγ ,0 (cid:66) H(L0
Gγ ,1 (cid:66) H(L0
Gγ ,2 (cid:66) H(L1
Gγ ,3 (cid:66) H(L1
Input processing:
(5) For each w ∈ I2, P1 sends (rw, M[rw]) to P2, who checks that (rw, K[rw], M[rw]) is valid. If so, P2 computes λw (cid:66) rw ⊕ sw and sends yw ⊕ λw to P1.
(6) For each w ∈ I1, P2 sends (sw, M[sw]) to P1, who checks that (sw, K[sw], M[sw]) is valid. If so, P1 computes λw (cid:66) rw ⊕ sw and sends xw ⊕ λw and
to P2.
Finally, P1 sends Lyw ⊕λw
Lxw ⊕λw
w
w
to P2.
Circuit evaluation:
(7) P2 evaluates the circuit in topological order. For each gate G = (α, β, γ , T), P2 initially holds (zα ⊕ λα , Lzα ⊕λα
α
are the underlying values of the wires.
(a) If T = ⊕, P2 computes zγ ⊕ λγ (cid:66) (zα ⊕ λα ) ⊕ (zβ ⊕ λβ) and Lzγ ⊕λγ
(cid:66) Lzα ⊕λα
(b) If T = ∧, P2 computes i (cid:66) 2(zα ⊕ λα ) + (zβ ⊕ λβ) followed by (rγ ,i, M[rγ ,i], L0
α
γ
⊕ L
zβ ⊕λβ
β
.
P2 checks that (rγ ,i, K[rγ ,i], M[rγ ,i]) is valid and, if so, computes zγ ⊕ λγ (cid:66) (sγ ,i ⊕ rγ ,i) and Lzγ ⊕λγ
(cid:66) (L0
γ
Output revelation:
(8) For each w ∈ O, P1 sends (rw, M[rw]) to P2, who checks that (rw, K[rw], M[rw]) is valid. If so, P2 outputs zw (cid:66) (zw ⊕ λw) ⊕ rw ⊕ sw .
Figure 14: The original two-party WRK in the FPre-hybrid model. (excerpted from [44])
γ ⊕ K[sγ ,i] ⊕ rγ ,i ∆1) (cid:66) Gγ ,i ⊕ H(Lzα ⊕λα
α
, γ , i). Then
γ ⊕ K[sγ ,i] ⊕ rγ ,i ∆1) ⊕ M[sγ ,i].
zβ ⊕λβ
β
, L
) and (zβ ⊕ λβ , L
zβ ⊕λβ
β
), where zα , zβ
[37] Valeria Nikolaenko, Udi Weinsberg, Stratis Ioannidis, Marc Joye, Dan Boneh, and
Nina Taft. 2013. Privacy-preserving ridge regression on hundreds of millions of
records. In IEEE Symposium on Security and Privacy.
[38] Benny Pinkas, Thomas Schneider, Nigel P Smart, and Stephen C Williams. 2009.
Secure two-party computation is practical. In ASIACRYPT.
[39] Peter Rindal and Mike Rosulek. 2016. Faster malicious 2-party secure computation
with online/offline dual execution. In USENIX Security Symposium.
[40] University of Virginia Security Research Group. 2015. Obliv-C: A Language for
Extensible Data-Oblivious Computation. https://oblivc.org/
[41] Xiao Wang, Yan Huang, Yongan Zhao, Haixu Tang, XiaoFeng Wang, and Diyue
Bu. 2015. Efficient genome-wide, privacy-preserving similar patient query based
on private edit distance. In ACM CCS.
[42] Xiao Wang, Alex Malozemoff, and Jonathan Katz. 2016. EMP-toolkit: Efficient
MultiParty computation toolkit. https://github.com/emp-toolkit
[43] Xiao Wang, Alex Malozemoff, and Jonathan Katz. 2017. Faster Secure Two-Party
Computation in the Single-Execution Setting. In EUROCRYPT.
[44] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Authenticated garbling
and efficient maliciously secure two-party computation. In ACM CCS.
[45] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Global-scale secure
multiparty computation. In ACM CCS. ACM.
[46] Glynn Winskel. 1993. The Formal Semantics of Programming Languages: An
Introduction. MIT Press, Cambridge, MA, USA.
[47] Ruiyu Zhu and Yan Huang. 2017. JIMU: Faster LEGO-based Secure Computation
using Additive Homomorphic Hashes. In ASIACRYPT.
[48] Ruiyu Zhu, Yan Huang, and Darion Cassel. 2017. Pool: scalable on-demand secure
computation service against malicious adversaries. In ACM CCS.