调用closc函数就可以结束服务器和客户上的套接字连接，就象对底层文件描述符进行操作
一样。要想关闭套接字，就必须把服务器和客户两头都关掉才行。对服务器来说，应该在read返
回“O”的时候做这件事，但如果套接字是一个面向连接的类型并且设置了SOCK_LINGER选项，
close调用会在该套接字尚有未传输数据时阻塞。我们将在这一章后面的内容里学习如何设置套
接字选项。
14.2.9套接字通信
学习了与套接字有关的基本函数调用之后，我们来看儿个程序示例。
我们将尽量使用网络套接字面不是使用文件系统套接字。文件系统套接字的缺点是除非程
序员使用的是一个绝对路径名，否则套接字将创建在服务器程序的当前子目录里；因此，为了
让它更具通用性，就需要把它创建在一个服务器及其客户都认可的能被全局性访问的子目录
（比如/tmp子目录）里。面对网络套接字来说，我们只需选择一个未被使用的端口号就可以了。
我们的例子将选择使用端口号9734。这个端口号是在避开了标准服务的前提下随便挑选的。
我们不能使用小于1024的端口号，因为它们都是为系统保留的。端口号和通过它们提供的服务
通常都列在系统文件/etc/services里。在编写基于套接字的程序时永远要选择没有在这个配置文
件里列出的端口号。
我们将在一个网络上运行我们的服务器和客户，但网络套接字的用途并不仅限于网络，
只要是带因特网连接（那怕是一个调制解调器拨号连接）的机器就能使用网络套接字与其他
机器进行通信。你甚至可以在一台UNIX单机上使用一个基于网络的程序，这是因为UNIX计
算机通常会被配置为一个只包含着它自身的回馈（loopback）网络。出于演示的目的，我们将
使用这个回馈网络，它不存在与外部网络有关的问题，对我们网络程序的调试工作是很有帮
助的。
127.0.0.1。这就是所谓的本地主机。大家可以在网络主机文件/etc/hosts列出的共享网络上各主机
的名字和服务清单里找到它的地址。
与计算机进行通信的每个网络都有一个相关的硬件接口设备。网络上的每一台计算机都可
以有好儿个不同的网络名，当然也就有好几个不同的IP地址。就拿我的计算机tilde来说吧，它有
二个网络接11，因此也就有三个地址。这些信息都保存在/etc/hosts文件里：
加入java编程群：524621833
---
## Page 449
第14章接字
127.0.0.1
localhost
Local. private Ethermet
#Loopback
158 152.X.X
192.16R.1.1
cilde.demon.co.uk
t1lde.localnet
dn-retp wapon 
表中的第一个就是那个简单的同馈网络，第二个是通过一块以太网卡来访问的局域网，第
三个是到一个因特网接人服务提供商的调制解调器链接。你编写的基于套接字的网络程序不做
任何修改就可以通过这些个接口与相应的服务器进行通信
下面是经过修改了的客户程序clienr2.c，它通过回馈网络与一个网络套接字进行连接。这个
程序里有一个硬件依赖方面的缺陷，但我们一会儿再讨论它。
动手试试：网络客户
1)头文件和变量的初始化。
#n
#include csys/socket.h>
include 
#1nclude 
tinclude 
#inciude 
int main()
:nt sockfd;
struct sockaddr_in address:
int len:
int result;
char ch = 'A':
2）为客户创建一个套接字。
sockfd = socket (AF_INET, SOCK_S7REAM, 0) :
3）给套接字起个名字，注意要与服务器保持一致。
address.sin_family = AF_INET;
address.sin_addr .s_addr = inet_addr (*127.0.0.1*);
len = sizeof(address);
address,sin_port 9734;
这个程序的其余部分与这一章前面出现的client1.c完全一样。当我们运行这一版本的时候，
它会连接失败，因为在这台计算机的9734号端口上现在还没有服务器运行着。
oops: client2: Connection refused
Sclient2
$
操作注释：
客户程序用头文件netinet/in.h里定义的sockaddr_in结构定义了一个AF_INET地址。它试
图与IP地址为127.0.0.1的主机上的服务器建立连接。它使用inet_addr函数把IP地址的字符串
形式转换为符合套接字编址要求的格式。inet的使用手厨页里有对其他地址转换函数的详细
说明。
我们还需要修改服务器程序，让它在我们挑选的端口号上等待连接的到来。下面是经过了
修改的服务器server2.c
加入jaVa编程群：524621833
---
## Page 450
432
Linux程序设计
动手试试：网络服务器
1)必要的头文件和变量的初始化：
include 
#include 
include 
include 
inc[ude 
#include 
int atn ()
int serve_sockfd, client_sor
大家应该能够看到分配给服务器和客户之间这条连接的端口号。“LocalAddress”栏给出的
是服务器，而“ForeignAddress”给出的是远程客户（即使是在同一台机器上，它也是通过一个
网络而连接起来的）。为保证所有的套接字都是泾渭分明的，那些客户端口一般都异于服务器的
监听套接字，并且在这台计算机上都是独一-无二的。
可是，显示出来的本地地址（即服务器套接字）是1574，而我们选择的端口是9734，它
们为什么会不一样呢？答案是这样的：通过套接学接口传递的端口号和地址都是二进制数字；
面不同计算机上的整数所使用的字节顺序是不-样的。比如说，英特尔处理器在把32位整数保
存到内存里去的时候所使用的字节顺序是1-2-3-4，1代表最大字节；面摩托罗拉处理器是以宁节
顺序4-3-2-1的方式来保存整数的。如果保存整数用的字节是以简单的字节对字节方式拷贝的话，
在两台不同的计算机上得到的整数值就将是不一致的
为了使不同型号的计算机在通过网络传递的多字节整数上能够取得一致的值，就必须为字
节定义一个网络顺序。客户程序和服务器程序必须在传输之前把它们内部的整数表示方式转换
为字节的网络顺序。这一工作是由netinetin.h头文件单定义的函数完成的，如下所示：
#include 
unsigned long int htonl(unaigned long int hogtLong);
unsigned short Int htons（unsigned short int hostshort)1
unsigmed short int ntoha(unsigmed ghort int natahort);
这些函数的作用是把16位和32位整数的本地主机格式转换为标准的网络顺序。函数的名称
是与之对应的转换操作的简写形式。比如说“host to network，long”（htonl，主机到网络，长整
数）和“host tonetwork，short”（htons，主机到网络，短整数）等。如果计算机本身的字节顺予
与网络顺序相同的话，它们就代表空操作。
为了保证16位端口号有正确的字节顺序，我们的服务器和客户需要用这些函数来处理这个
端口地址。新服务器程序server3.c里的改动是：
server_address.s1n_addr,s_addr • hton1 (INADDR_ANY 1;
server_address.sin_port + htors[9734 1;
我们不需要对函数调用“inet_addr（127.0.0.1"）”进行转换，因为inet_addr已经被定义为产
生一个网络字节顺序的结果了。新客户程序client3.c里的改动是：
加入jaVa编程群：524621833
---
## Page 452
434Linux程序设计
address.sin_port = htons (9734 ) ;
服务器还需要对为允许任-IP地址连接而使用的INADDR_ANY进行改动。
现在，当我们运行server3和client3的时候，就会看到本地连接使用的是正确的端口了。
S netatat
Active Internet connections
0 1ocalhost:97341ocalhost:1:75
(State)
TIME_WAIT
raot
User
如果读者使用的计算机上的本机字节顺序与网络字节相同，就不会看到任何差异。为了让
不同体系结构的计算机上的客户和服务器能够正确地实现操作，最好是把刚才介绍的转换函数
加到你编写的每一个网络释序里去。
14.3网络信息
到目前为止，我们的客户和服务器一直是把地址和端口号编译在它们自己的内部的。如果
我们想让这些服务器和客户程序更具通用性，就应该使用网络信息函数来获取相应的地址和端
L号。
单里去，这个文件可以给端口号分配一个名字，使客户可以使用符号化的服务项目名称而不是
干巴巴的数字。
类似地，如果给定一个计算机的名字，我们就可以通过调用主机数据库函数对其进行解析的
方法确定它的IP地址。这些函数会通过查询网络配置文件来完成这些工作，比如查询/etc/hosts文件，
或者查询网络信息服务等。比较知名的网络信息服务有NIS（NetworkInformationService，网络信
息服务；以前叫做YellowPages，黄页服务）和DNS（DomainNameService，域名解析服务）等。
主机数据库函数是在接口头文件netdb.h里定义的，如下所示：
#include 
struct hostent *gethostbyaddr(const void *addr, size_t len,int type);
这些函数返回的结构至少会包含以下几个成员：
int b_addrtype)
/*address type */
int h_length;
/*length in bytes of the addzess */
char **h_addr_liet
/*list of address (network order)*/
如果没有与我们查询的主机或地址相关的数据库数据项，这些信息函数会返回一个空指针
类似地，与服务及其关联端口号有关的信息可以通过一些服务信息函数查到，下面是它们
的定义情况：
tinclude 
struct servent *getservbyport(int port, const cbar *proto);
加入jaVa编程群：524621833
---
## Page 453
第14章套接字
435
proto参数指定了用来连接到该项服务的协议，SOCK_STREAM类型的TCP连接对应的是
“tcp”，而iSOCK_DGRAM类型的UDP数据图对应的是“udp”。
serveat结构至少应该包含以下几个成员：
struct servent （
char *s_name;
/*pame of the service */
char **_aliases;
/liat of aliases(alternative names)*/
int s_port;
/The IP port nunber */
如果想收集某台计算机的主机数据库信息，我们可以调用gethostbyname函数并且把结果打
印出米。注意要把地址表映射到正确的地址类型上去，面且要把它们从网络字节顺序转换为一
个可供打印的字符串一—这个转换可以用inet_ntoa函数来完成，它的定义情况如下所示：
#include 
cbar *inet_ntoa(struct in_addr in)
这个函数的作用是把一个因特网主机地址转换为一个四点数格式的可打印字符串。它在失
败时将返回“-1”，但X/Open技术规范并没有定义任何错误。其他可用的新函数还有gethostname，
下面是它的定义：
#include cunistd.b>
int gethostnane(char *nase, int namelength );
这个函数的作用是把当前主机的名字写到name指向的字符串里去。这个主机名是以空字节
“0”结尾的。参数namelength限定了字符串name的长度，如果返回的主机名太长，就会被截短。
gethostname在成功时返回“0"、失败时返回“-1”，但POSIX里还是没有定义任何错误。
下面这个getnamc.c程序的功能是查询一台主机计算机的有关信息。
动手试试：网络信息
1）和往常一样，必要的头文件和变量定义。
inciude 
include 
#inciude 
inciude cstdio.h>