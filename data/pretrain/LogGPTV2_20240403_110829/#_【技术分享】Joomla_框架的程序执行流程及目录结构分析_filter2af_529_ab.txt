/includes/defines.php定义各个功能模块的目录
/includes/framework.php整个框架调度的核心代码与cms运行的核心代码，框架初始化的入口。
/libraries/import.legacy.php开启自动加载类，并向注册队列注册cms核心类。
调用了JLoader中的setup方法；spl_autoload_register使其进行类的初始定义。
spl_autoload_register()是PHP自带的系统函数，其主要完成的功能就是注册给定的函数作为__autoload的实现。即将函数注册到SPL__autoload函数队列中。如果该队列尚未激活，则激活它们。
/libraries/loader.php定义了JLoader实现类的注册，加载，相关文件的包含等操作。
其中load方法从注册队列中寻找需要被自动加载的类，并包含该注册队列的值。
_autoload方法从注册队列中的prefixes的J中选取需要加载的类目录的前缀。[0]=>/joomla/libraries/joomla，[1]=>/joomla/libraries/legacy
_load方法完成了绝对路径的拼接，及相关文件的包含
/cms.php将PHP
Composer生成的加载器autoload_static.php、/autoload_namespaces.php、/autoload_psr4.php、/autoload_classmap.php中的内容全部导入一个$loader的数组，之后将该数组中的前缀及所有类，注册到注册队列中，以方便使用。而这些类，都是针对于cms本身的操作的。接着开始设置异常处理以及一个消息处理器（日志）。最后，将一些注册类的名字规范为autoloader的规则。
configuration.php配置项
之后设置报错的格式
最终的注册队列：
**2\. 设置分析器，记下使用方法并在分析器后加标记对应代码**
对应代码：
    JDEBUG ? JProfiler::getInstance('Application')->setStart($startTime, $startMem)->mark('afterLoad') : null;
**3\. 实例化应用程序**
对应代码：
    $app = JFactory::getApplication('site');
在这边可能会有疑问，为什么会直接实例化一个之前没有引入的类（同样也没有包含相应的文件）。
还记得我们之前看到过的自动加载类么，在这里，我们首先发现没有在classmap中寻找到，之后在/libraries目录，以/libraries/cms/目录为查找目录，在该目录查找是否存在factory.php文件，若找到，则将该文件包含进来。
在factory.php中，会首先检查我们是否已经创建了一个JApplicationCms对象，如果未创建该对象，则创建该对象。最后创建为JApplicationSite，并将这个对象实例化（对象位于/libraries/cms/application/site.php）。
在该文件中，首先注册了application（这边是site）的名称与ID，之后执行父构造函数和“祖父“构造函数。
为了清晰的说明Joomla web应用的实例化过程，我们列一个树状图来看
    |-web.php “祖父”
    |--cms.php 父
    |---site.php 子
    web.php
完成了应用的最基础功能，包括：
返回对全局JApplicationWeb对象的引用，仅在不存在的情况下创建它
初始化应用程序
运行应用程序
对模板的渲染（文档缓冲区推入模板的过程占位符，从文档中检索数据并将其推入应用程序响应缓冲区。）
检查浏览器的接受编码，并尽可能的将发送给客户端的数据进行压缩。
将应用程序响应发送给客户端
URL的重定向
应用程序配置对象的加载
设置/获取响应的可缓存状态
设置响应头的获取、发送与设置等基本功能
首先在web.php中实例化了JInput对象。并将config指向JoomlaRegistryRegistry。接着，创建了一个应用程序程序的网络客户端，用于进行网络请求的操作。同时将已经指向的config导入，设置执行时间，初始化请求对象，并配置系统的URIs。
在cms.php中实例化了调度器，主要完成对于组件及模块的调度。并对session进行设置和初始化。
完成了以上所有的配置后，将已经配置完毕的应用对象返回到/joomla/libraries/joomla/factory.php中。完成应用对象的初始化。
**4\. 执行应用**
调用web.php中的execute()方法完成应用的执行。
**0x03 说一下我们的关心的路由问题**
那么，我们的路由在框架中到底是怎样解析的呢？
其实在跟实例化应用的时候，当执行/joomla/libraries/joomla/application/web.php构造函数时，我们就可以看到Joomla对于URI的处理了：
    $this->loadSystemUris();
跟进看一下loadSystemUris方法，不难看到这一句：
跟进detectRequestUri，发现首先判断了URI是否是http还是https，之后看到这句：
    if (!empty($_SERVER['PHP_SELF']) && !empty($_SERVER['REQUEST_URI']))
            {
                // The URI is built from the HTTP_HOST and REQUEST_URI environment variables in an Apache environment.
                $uri = $scheme . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
            }
就是在这里将$_SERVER['REQUEST_URI']中的相对路径与$scheme . $_SERVER['HTTP_HOST']拼接成了完整的URI：
完成了完整路径获取后，开始修改对象的属性，将新获得的request.uri添加进入配置列表中：
下一步，就是遍历配置列表，查看是否已经设置了显示URI，在配置列表中键值为site_uri。显然我们现在并没有设置该选项：
之后完成的操作就是要设置该显示URI。我们继续跟进一下：
跟进到joomla/libraries/vendor/joomla/uri/src/UriHelper.php的时候，我们稍停一下，看到进入了parse_url方法中。在这个方法中，首先对传入的URL进行了双重过滤，之后利用PHP自带方法parse_url，对URL进行了分割处理并保存到一个数组中，接着返回该数组：
最后的处理结果为：
    option=com_content&view=article&id=7:article-en-gb&catid=10&lang=en&Itemid=116
处理完我们的显示URL后，在调用joomla/libraries/cms/application/cms.php中的execute方法时，在调用doExecute方法的时候，会使用joomla/libraries/cms/application/site.php文件中的route方法，这个方法将路由到我们application中。
在joomla/libraries/cms/application/cms.php中的route方法中，我们首先获取了全部的request
URI，之后在getRouter方法中初始化并实例化了joomla/libraries/cms/router/router.php中的JRouter类，该类完成了对我们路由参数的识别与划分：
最后在joomla/libraries/cms/router/site.php中的parse方法中完成了相关组件的路由：
可以明显的看到，在
    $component = $this->JComponentHelper::getComponents()
后，$component的值：
对比components/目录下的组件，发现已经将所有的组件遍历，并保存在数组中。
接着遍历该数组，对每个组件设置本地路由，并包含响应的文件，从而完成路由控制。
**0x04 总结一下**
Joomla整体的运行思路可以简单的归结为一下几点：
**框架核心代码的初始化：**
关键是初始化了类自动加载器与消息处理器，并完成了配置文件的配置与导入。
完成了这一步，就可以通过类的自动加载器来实现核心类的查找与调用。自动加载器成为了cms的一个工具。
**实例化应用程序：**
这一步可以简单的理解为对Joomla接下来要提供的web服务的预加，与定义。
**应用的执行：**
这一步基于上面两步的准备，将执行应用。从代码上来看可以容易的总结出来一个规律：
预加载“执行之前需要做的事件”
执行应用
执行“执行之后要做的事件”
基本上都是以这样的形式来完成调用以及运行的。
以上都是小菜个人看法，可能有不准确或者非常模糊的地方，希望大牛们多给建议…