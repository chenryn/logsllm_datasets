在这篇文章中，我们希望从头到尾完成一项模糊的工作。 这到底是什么意思？
首先，即使找到一个好的软件来进行模糊测试似乎也令人生畏，但是您可以遵循某些标准，这些标准可以帮助您确定在模糊测试中什么是有用且容易上手的。
有了软件后，对它进行模糊处理的最佳方法是什么？ 那我们应该使用哪些测试用例呢？ 我们如何知道我们做得如何，或者目标软件中可能缺少哪些代码路径？
我们希望涵盖所有这些内容，以提供全彩色的360度视图，说明如何从头到尾有效，高效地执行完整的模糊工作流程。 为了易于使用，我们将重点介绍AFL框架。
# 我该fuzz什么？ 找到正确的软件
AFL在C或C ++应用程序上效果最好，因此这是我们应该在想要模糊的软件中寻找的一项标准。 在寻找模糊软件时，我们可以问自己几个问题。
  1. 有示例代码吗
    * 该项目附带的任何实用程序都有可能过于繁重，可以出于模糊的目的而进行精简。 如果项目具有简单的示例代码，这将使我们的工作变得更加轻松。
  2. 我能自己编译吗
    * 当您能够从源代码构建软件时，AFL效果最佳。 它确实支持使用QEMU即时检测黑匣子二进制文件，但这超出了范围，并且性能往往很差。 在理想的情况下，我可以轻松地使用afl-clang-fast或afl-clang-fast ++构建软件。
  3. 是否有容易获得的和独特的测试用例？
    * 我们可能会模糊文件格式（尽管可以进行一些调整，但可以模糊网络应用程序），并且有一些独特而有趣的测试用例可以为我们提供一个良好的开端。 如果项目具有包含文件测试用例的单元测试（或将文件包含先前已知的错误用于回归测试），那么这也是一个的胜利。
这些问题会帮助我们节约很多时间，如果你直接开始一会儿就会很头痛。
好的，但是如何找到有关这些问题的软件？ Github是最适合的地方，因为您可以轻松地搜索最近更新的并用C或C ++编写的项目。
例如，在Github中搜索所有200星以上的C ++项目，使我们找到了一个显示出很大希望的项目：yaml-cpp（ 让我们用三个问题来研究它，看看我们有多容易得到这种模糊测试。
  1. 我可以自己编译吗？
    * yaml-cpp使用cmake作为其构建系统。 当我们可以定义要使用的编译器时，这看起来很棒，而且afl-clang-fast ++很有可能会运行Just™。 yaml-cpp的README文件中的一个有趣注释是，它默认情况下会构建一个静态库，这对我们来说是完美的，因为我们希望为AFL提供一个静态编译和检测到的二进制文件。
  2. 有示例代码吗？
    * 在项目根目录（ yaml-cpp库。 特别感兴趣的是parse.cpp文件。 这个parse.cpp文件非常完美，因为它已经被编写为可以接收来自stdin的数据，并且我们可以轻松地使其适应AFL的持久模式，这将大大提高速度。
  3. 有容易获得的和独特/有趣的测试用例吗？
    * 在项目根目录的test文件夹中，有一个名为specexamples.h的文件，其中包含许多独特而有趣的YAML测试用例，每个用例似乎都在yaml-cpp库中执行特定的代码段。 同样，对于我们来说，这非常适合作为模糊测试的种子。
程序看起来很简单来开始fuzz 测试，lets‘s do it。
# 开始fuzz
我们将不介绍安装或设置AFL，因为我们假定已经完成了。 我们还假设还已经构建并安装了afl-clang-fast和afl-clang-fast ++。
尽管afl-g ++应该可以正常工作（尽管您不会使用出色的持久模式），但afl-clang-fast ++无疑是首选。 让我们获取yaml-cpp代码库，并使用AFL进行构建。
    # git clone https://github.com/jbeder/yaml-cpp.git
    # cd yaml-cpp
    # mkdir build
    # cd build
    # cmake -DCMAKE_CXX_COMPILER=afl-clang-fast++ ..
    # make
or afl-g++
    cmake -DCMAKE_CXX_COMPILER=afl-g++
一旦我们知道一切都可以成功构建，就可以对某些源代码进行一些更改，以便AFL可以提高速度。
从项目的根目录/util/parse.cpp中，我们可以更新main()。
    int main(int argc, char** argv) {
      Params p = ParseArgs(argc, argv);
      if (argc > 1) {
        std::ifstream fin;
        fin.open(argv[1]);
        parse(fin);
      } else {
        parse(std::cin);
      }
      return 0;
    }
使用这个简单的main（）方法，我们可以更新if语句的else子句，以包括一个while循环和一个称为__AFL_LOOP（）的特殊AFL函数，该函数使AFL可以通过某种内存向导基本上对进程中的二进制文件进行模糊处理。
，而不是为我们要测试的每个新测试用例启动一个新流程。 让我们看看会是什么样子。
    if (argc > 1) {
      std::ifstream fin;
      fin.open(argv[1]);
      parse(fin);
    } else {
      while (__AFL_LOOP(1000)) {
        parse(std::cin);
      }
    }
注意else子句中的新while循环，我们将1000传递给__AFL_LOOP（）函数。
这告诉AFL在启动一个新的过程以进行同样的测试之前，最多要模糊处理1000个测试用例。
通过指定更大或更小的数字，您可以增加执行次数，但以牺牲内存使用为代价（或者受内存泄漏的支配），并且可以根据正在使用的应用程序进行高度可调。
添加这种类型的代码以启用持久模式也不总是那么容易。 由于启动期间产生的资源或其他因素，某些应用程序可能没有支持轻松添加while循环的体系结构。
回到build目录，重新编译 。 重新编译遇到问题 afl-clang-fast++ compile 失败，error 003 。 索性直接用afl-g++
# 测试二进制文件
程序编译好以后可以使用afl附加的工具afl-showmap，afl-showmap
会运行一个给定的二进制文件（通过标准输入将输入传给二进制文件）并且打印程序运行期间的反馈报告。
    # afl-showmap -o /dev/null -- ./parse 
    [*] Executing './parse'...
    -- Program output begins --    hi
    -- Program output ends --    [+] Captured 1748 tuples in '/dev/null'.
通过将输入更改为应该使用新代码路径的内容，你会看到报告末尾出现的元组数量增加或减少。
    # afl-showmap -o /dev/null -- ./parse 
    [*] Executing './parse'...
    -- Program output begins --    hi:blah
    -- Program output ends --    [+] Captured 1771 tuples in '/dev/null'.
正如所看到的， 发送了一个yaml 键 hi 展示了1748个反馈元祖，第二次发送了 hi:blah 展示了1771个反馈元祖。
# 使用更好的测试用例
最初为您的Fuzzer注入测试的用例是（如果不是）最重要的方面之一，即是否会看到Fuzz运行是否导致一些良好的崩溃。 如前所述，yaml-cpp测试目录中的specexamples.h文件具有出色的测试用例，供我们开始使用，但它们甚至可以更好。
为此，我手动将示例从头文件复制并粘贴到测试用例中，以节省读者的时间，此处链接的是我用于复制目的的原始种子文件。
afl 附带的两个工具我们可以用来确定：
  * 测试语料库中的文件尽可能有效地唯一
  * 每个测试文件都尽可能有效地表示其唯一的代码路径
afl-cmin和afl-tmin这两个工具完成所谓的“最小化”。 afl-cmin提取给定的潜在测试用例文件夹，然后运行每个用例并将接收到的反馈与所有其余测试用例进行比较，以找到最佳的测试用例。 有效地表达最独特的代码路径。
最好的测试用例将保存到新目录。
另一方面，afl-tmin工具仅适用于指定的文件。 在进行模糊测试时，我们不想浪费CPU周期来摆弄相对于测试用例可能表示的代码路径无用的位和字节。
为了将每个测试用例最小化到表示与原始测试用例相同的代码路径所需的最低限度，afl-tmin遍历测试用例中的实际字节，逐渐删除越来越小的数据块，直到删除了所有
不影响所采用的代码路径。 有点多，但是这些是有效进行模糊测试的非常重要的步骤，是需要理解的重要概念。 让我们来看一个例子。
git仓库中我创建了从specexample.h文件中的原始测试用例， 我们用两个文件来开始。
1
    Mark McGwire
    Sammy Sosa
    Ken Griffey
2
    hr:  65    # Home runs
    avg: 0.278 # Batting average
    rbi: 147   # Runs Batted In
    # afl-tmin -i in/1 -o in/1.min -- ./parse
    afl-tmin 2.56b by 
    [+] Read 36 bytes from 'in/1'.
    [*] Performing dry run (mem limit = 50 MB, timeout = 1000 ms)...
    [+] Program terminates normally, minimizing in instrumented mode.
    [*] Stage #0: One-time block normalization...
    [+] Block normalization complete, 12 bytes replaced.
    [*] --- Pass #1 ---    [*] Stage #1: Removing blocks of data...
        Block length = 2, remaining size = 36
        Block length = 1, remaining size = 36
    [+] Block removal complete, 0 bytes deleted.
    [*] Stage #2: Minimizing symbols (16 code points)...
    [+] Symbol minimization finished, 13 symbols (18 bytes) replaced.
    [*] Stage #3: Character minimization...
    [+] Character minimization done, 0 bytes replaced.
    [*] --- Pass #2 ---    [*] Stage #1: Removing blocks of data...
        Block length = 2, remaining size = 36
        Block length = 1, remaining size = 36
    [+] Block removal complete, 0 bytes deleted.
         File size reduced by : 0.00% (to 36 bytes)
        Characters simplified : 83.33%