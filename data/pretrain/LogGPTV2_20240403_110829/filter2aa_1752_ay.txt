以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 8.7.1 栈中的复制字符串

`alloca()` 函数用于在栈上分配内存。与 `malloc()` 不同，`alloca()` 分配的内存在函数返回时自动释放。

#### 示例：使用 `alloca()` 复制字符串
```c
/* 我们希望复制 'song' 字符串 */
char *dup;
dup = alloca(strlen(song) + 1);
strcpy(dup, song);
/* 操作 'dup'... */
return; /* 'dup' 在函数返回时自动释放 */
```

在 Linux 上，可以使用 `strdupa()` 和 `strndupa()` 来简化这一过程：
```c
#define _GNU_SOURCE
#include <string.h>

char *strdupa(const char *s);
char *strndupa(const char *s, size_t n);

/* strdupa() 复制 s 字符串 */
char *dup = strdupa(s);

/* strndupa() 复制 s 的前 n 个字符 */
char *partial_dup = strndupa(s, n);
```

这些函数在内部使用 `alloca()` 分配内存，并在函数返回时自动释放。尽管 `alloca()` 在某些情况下非常方便，但在 POSIX 系统中并不总是可用。因此，建议在需要跨平台兼容性时使用 `malloc()` 和 `free()`。

### 8.7.2 变长数组 (VLAs)

C99 引入了变长数组 (Variable Length Arrays, VLAs)，允许在运行时动态确定数组的大小。GNU C 编译器也支持这一特性。VLAs 在功能上类似于 `alloca()`，但语法更简洁。

#### 示例：使用 VLAs
```c
for (i = 0; i < n; i++) {
    int arr[i]; // 数组大小由 i 决定
    // 使用 arr...
}
```

VLAs 在栈上分配内存，并在作用域结束时自动释放。然而，由于它们在栈上分配内存，可能会导致栈溢出，特别是在处理大量数据时。

### 8.9.1 内存设置

`memset()` 函数用于将一块内存区域设置为指定的值。

#### 示例：使用 `memset()` 将内存置零
```c
#include <string.h>

void *memset(void *s, int c, size_t n);

/* 将 [s, s+256) 范围内的内存置零 */
memset(s, '\0', 256);
```

`bzero()` 是 BSD 系统中类似 `memset()` 的函数，但在新的代码中推荐使用 `memset()`，因为 `bzero()` 已被弃用。

#### 示例：使用 `bzero()`
```c
#include <strings.h>

void bzero(void *s, size_t n);

/* 将 [s, s+256) 范围内的内存置零 */
bzero(s, 256);
```

虽然 `calloc()` 也可以用于分配并初始化为零的内存，但它更适合于长期使用的内存。对于临时性的内存操作，`memset()` 更加灵活。

### 8.9.2 字节比较

`strcmp()` 用于比较字符串，而 `memcmp()` 用于比较内存块。

#### 示例：使用 `memcmp()` 比较内存
```c
#include <string.h>

int memcmp(const void *s1, const void *s2, size_t n);

/* 比较 s1 和 s2 的前 n 个字节 */
int result = memcmp(s1, s2, n);
if (result == 0) {
    // s1 和 s2 相等
} else if (result < 0) {
    // s1 小于 s2
} else {
    // s1 大于 s2
}
```

BSD 提供了一个类似的函数 `bcmp()`，但在新的代码中推荐使用 `memcmp()`。

#### 示例：使用 `bcmp()`
```c
#include <strings.h>

int bcmp(const void *s1, const void *s2, size_t n);

/* 比较 s1 和 s2 的前 n 个字节 */
int result = bcmp(s1, s2, n);
if (result == 0) {
    // s1 和 s2 相等
} else {
    // s1 和 s2 不相等
}
```

### 8.9.3 字节移动

`memmove()` 用于将一个内存区域的内容复制到另一个内存区域，即使这两个区域有重叠也能正确处理。

#### 示例：使用 `memmove()`
```c
#include <string.h>

void *memmove(void *dst, const void *src, size_t n);

/* 将 src 的前 n 个字节复制到 dst */
memmove(dst, src, n);
```

BSD 提供了一个类似的函数 `bcopy()`，但在新的代码中推荐使用 `memmove()`。

#### 示例：使用 `bcopy()`
```c
#include <strings.h>

void bcopy(const void *src, void *dst, size_t n);

/* 将 src 的前 n 个字节复制到 dst */
bcopy(src, dst, n);
```

### 8.9.4 字节搜索

`memchr()` 和 `memrchr()` 用于在内存块中查找特定的字节。

#### 示例：使用 `memchr()` 查找字节
```c
#include <string.h>

void *memchr(const void *s, int c, size_t n);

/* 在 s 的前 n 个字节中查找 c */
void *ptr = memchr(s, c, n);
if (ptr != NULL) {
    // 找到 c
} else {
    // 未找到 c
}
```

`memrchr()` 从后向前查找字节。

#### 示例：使用 `memrchr()` 查找字节
```c
#define _GNU_SOURCE
#include <string.h>

void *memrchr(const void *s, int c, size_t n);

/* 从后向前在 s 的前 n 个字节中查找 c */
void *ptr = memrchr(s, c, n);
if (ptr != NULL) {
    // 找到 c
} else {
    // 未找到 c
}
```

### 8.9.5 字节加密

Linux 提供了一个简单的内存加密函数 `memfrob()`。

#### 示例：使用 `memfrob()` 加密内存
```c
#define _GNU_SOURCE
#include <string.h>

void *memfrob(void *s, size_t n);

/* 对 s 的前 n 个字节进行异或操作 */
memfrob(s, n);

/* 两次调用 memfrob() 可以恢复原始数据 */
memfrob(memfrob(s, n), n);
```

### 8.10 内存锁定

Linux 允许进程锁定部分或全部地址空间，以防止页面被交换到磁盘。这可以通过 `mlock()` 和 `mlockall()` 函数实现。

#### 锁定部分地址空间
```c
#include <sys/mman.h>

int mlock(const void *addr, size_t len);

/* 锁定 addr 到 addr+len 的内存 */
int ret = mlock(addr, len);
if (ret != 0) {
    perror("mlock");
}
```

#### 锁定全部地址空间
```c
#include <sys/mman.h>

int mlockall(int flags);

/* 锁定当前映射的页 */
int ret = mlockall(MCL_CURRENT);
if (ret != 0) {
    perror("mlockall");
}

/* 锁定未来映射的页 */
int ret = mlockall(MCL_FUTURE);
if (ret != 0) {
    perror("mlockall");
}
```

#### 解锁内存
```c
#include <sys/mman.h>

int munlock(const void *addr, size_t len);
int munlockall(void);

/* 解锁 addr 到 addr+len 的内存 */
int ret = munlock(addr, len);
if (ret != 0) {
    perror("munlock");
}

/* 解锁所有锁定的内存 */
int ret = munlockall();
if (ret != 0) {
    perror("munlockall");
}
```

内存锁定可以提高实时性能和安全性，但也可能导致内存使用量增加。在使用这些函数时，需要注意系统的资源限制和权限要求。

---