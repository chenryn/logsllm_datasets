S-javaagent
参考文章
javaagent使用指南 
Java Instrumentation
javaagent 实例
Javaagent 是 java 命令的一个参数。参数 javaagent  可以用于指定一个 jar 包，并且对该 
java  包有2个要求：1、这个 jar  包的 MANIFEST.MF  文件必须指定 Premain-Class 项。2、
Premain-Class 指定的那个类必须实现 premain() 方法。 premain  方法，从字面上理解，就是
运行在 main  函数之前的的类。当 Java  虚拟机启动时，在执行 main  函数之前， JVM  会先运
行 -javaagent 所指定 jar  包内 Premain-Class  这个类的 premain  方法 。在命令行输入 java
可以看到相应的参数，其中有 和 java agent相关的：
-agentlib:[=] 加载本机代理库 , 例如 -agentlib:hprof
   另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help
-agentpath:[=]
   按完整路径名加载本机代理库
-javaagent:[=]
   加载 Java 编程语言代理, 请参阅 java.lang.instrument
agent 编写
MANIFREST.MF
PreMainTraceAgent
此处需要注意的是自动打包的过程中，自定义的 MANIFREST.MF 会被修改，所以需要手动替换，或
者是用maven打包，并自定义打包插件
Manifest-Version: 1.0
Can-Redefine-Classes: true
Can-Retransform-Classes: true
Premain-Class: PreMainTraceAgent
//此处是一个空行，不可省略
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.instrument.Instrumentation;
import java.security.ProtectionDomain;
public class PreMainTraceAgent {
    public static void premain(String agentArgs, Instrumentation inst){
        System.out.println("agentArgs : " + agentArgs);
        inst.addTransformer(new DefineTransformer(), true);
    }
    static class DefineTransformer implements ClassFileTransformer{
        @Override
        public byte[] transform(ClassLoader loader, String className, Class 
classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) 
throws IllegalClassFormatException {
            System.out.println("premain load Class:" + className);
            return classfileBuffer;
        }
    }
}
        javaagent
        org.example
        1.0-SNAPSHOT
    4.0.0
    agentClass
                org.apache.maven.plugins
main 函数编写
新建一个项目，创建main函数，在启动时通过 -javaagent 参数执行 premain 函数
                maven-jar-plugin
                3.1.0
                            true
                            PreMainTraceAgent
                            PreMainTraceAgent
                            true
                            true
        8
        8
public class TestMain {
    public static void main(String[] args) {
        System.out.println("main start");
        try {
            Thread.sleep(3000);
        }catch (InterruptedException e){
            e.printStackTrace();
        }
        System.out.println("main end");
    }
}
添加 JVM 参数，在启动时注入 agent  
执行后会打印出全部的类加载过程
动态修改字节码内容
运行 main 函数之前首先通过 javassit 修改 date 方法的类
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtMethod;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;
public class MyClassTransformer implements ClassFileTransformer {
    @Override
重新打包然后运行之后
    public byte[] transform(ClassLoader loader, String className, Class 
classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) 
throws IllegalClassFormatException {
        // 操作Date类
        System.out.println(className);
        if ("java/util/Date".equals(className)) {
            System.out.println(11111111);
            try {
                //java.util.Date
                // 从ClassPool获得CtClass对象
                final ClassPool classPool = ClassPool.getDefault();
                final CtClass clazz = classPool.get("java.util.Date");
                CtMethod convertToAbbr = 
clazz.getDeclaredMethod("convertToAbbr");
                //这里对 java.util.Date.convertToAbbr() 方法进行了改写，在 return之前
增加了一个 打印操作
                String methodBody = "
{sb.append(Character.toUpperCase(name.charAt(0)));" +
                        "sb.append(name.charAt(1)).append(name.charAt(2));" +
                        "System.out.println(\"sb.toString()\");" +
                        "return sb;}";
                convertToAbbr.setBody(methodBody);
                // 返回字节码，并且detachCtClass对象
                byte[] byteCode = clazz.toBytecode();
                //detach的意思是将内存中曾经被javassist加载过的Date对象移除，如果下次有需
要在内存中找不到会重新走javassist加载
                clazz.detach();
                return byteCode;
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        // 如果返回null则字节码不会被修改
        return null;
    }
}
JVM 启动后动态 Instrument
上面介绍的 Instrumentation 是在 JDK 1.5 中提供的，开发者只能在 main 加载之前添加手脚，
在 Java SE 6  的 Instrumentation  当中，提供了一个新的代理操作方法： agentmain ，可以在 
main  函数开始运行之后再运行。
agentmain 的编写
配置 pom
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.instrument.Instrumentation;
import java.security.ProtectionDomain;
public class AgentMain {
    public static void agentmain(String agentArgs, Instrumentation 
instrumentation) {
        instrumentation.addTransformer(new DefineTransformer(), true);
    }
    static class DefineTransformer implements ClassFileTransformer {
        @Override
        public byte[] transform(ClassLoader loader, String className, Class 
classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) 
throws IllegalClassFormatException {
            System.out.println("premain load Class:" + className);
            return classfileBuffer;
        }
    }
}
        javaagent
        org.example
        1.0-SNAPSHOT
    4.0.0
    agentMain
                org.apache.maven.plugins
                maven-jar-plugin
                3.1.0
main 函数编写
通过 VirtualMachineDescriptor 获取所有运行中的 jvm 进程，然后匹配当前进程，最后加载
agent
                            true
                            AgentMain
                            true
                            true
        8
        8
import com.sun.tools.attach.*;
import java.io.IOException;
import java.util.List;
public class TestMain2 {
    public static void main(String[] args) throws IOException, 
AttachNotSupportedException {
        //获取当前系统中所有 运行中的 虚拟机
        System.out.println("running JVM start ");
        List list = VirtualMachine.list();
        for (VirtualMachineDescriptor vmd : list) {
            //如果虚拟机的名称为 xxx 则 该虚拟机为目标虚拟机，获取该虚拟机的 pid
            //然后加载 agent.jar 发送给该虚拟机
            System.out.println(vmd.displayName());
            if (vmd.displayName().endsWith("TestMain2")) {  //在获取到当前进程之后，
注入agent
                System.out.println("111111111111");
                VirtualMachine virtualMachine = null;
                try {
                    virtualMachine = VirtualMachine.attach(vmd.id());
                    virtualMachine.loadAgent("D:\\Java\\project\\study\\基础
\\javaagent\\agentMain\\target\\agentMain-1.0-SNAPSHOT.jar");
                    virtualMachine.detach();
                } catch (AgentLoadException e) {
                    e.printStackTrace();
                } catch (AgentInitializationException e) {
                    e.printStackTrace();
                }
            }
        }
运行结果
    }
}