a number of independent veriﬁers. Upon receiving the up-
date, a user veriﬁes that a threshold of signatures is valid;
if so, she can directly install the binary without needing to
build it herself.
5.3 Release-Validation via Cothority
Although decentralized developer approval and repro-
ducible builds improve software-update security, running
reproducible builds for each binary places a high bur-
den on developers (e.g., building the Tor Browser Bun-
dle takes 32 hours on an average modern laptop [60]).
The load becomes even worse for developers involved
in multiple software projects. Moreover, verifying many
developer-signatures in large software projects can be a
burden for client devices, especially when upgrading mul-
tiple packages. It would naturally be more convenient for
an intermediary to take the developers’ commitments, run
the reproducible builds and produce a result that is eas-
ily veriﬁable by clients. Using a trusted third party is,
however, contrary to CHAINIAC’s goal of decentraliza-
tion. Hence to maintain decentralization, we implement
the intermediary as a collective authority or cothority.
To announce a new software release, the package devel-
opers combine the hashes of the associated source-code
and binaries in a Merkle tree [52]. Each developer checks
the source code and signs the root hash (of this tree), that
summarizes all data associated with the release. The de-
velopers then send the release data and the list of their
individual signatures to the cothority that validates and
collectively signs the release. Clients can download and
validate the release’s source and/or any associated binary
by verifying only a single collective signature and Merkle
inclusion proofs for the components of interest.
To validate a release, each cothority server checks
the developer signatures against
the public keys and
the threshold deﬁned in the policy ﬁle. Remembering
the policy for each software project is a challenge for
the cothority that is supposed to be stateless. For now,
we assume that each cothority member stores a project-
to-policy list for all the projects it serves for. We relax
this assumption in Section 5.5. The build veriﬁers then
compile the source code and compare the result against
the binaries of the release. The latter veriﬁcation enables
the transition from reproducible builds to veriﬁed builds: a
deployment improvement over reproducible builds, which
we introduce. The veriﬁed builds enable clients to obtain
the guarantee of source-to-binary correspondence without
USENIX Association
26th USENIX Security Symposium    1277
the need to accomplish the resource-consuming building
work, due to the broad independent validation.
5.4 Anti-equivocation Measures
Many software projects are maintained by a small group
of (often under-funded or volunteer) developers. Hence,
it is not unreasonable to assume that a powerful (state-
level) attacker could coerce a threshold of group members
to create a secret backdoored release used for targeted
attacks. In our next step towards CHAINIAC, we tackle
the problem of such stealthy developer-equivocation, as
well as the threat of an (untrusted) software-update center
that accidentally or intentionally forgets parts of the soft-
ware release history.
We introduce cothority-controlled hash chains that cre-
ate a public history of the releases for each software
project. When a new release is announced, the develop-
ers include and sign the summary (Merkle Root) of the
software’s last version. The cothority then checks the de-
velopers’ signatures, the collective signature on the parent
hash-block, and that there is no fork in the hash-chain (i.e.,
that the parent hash-block is the last one publicly logged
and that there is no other hash-block with the same par-
ent). If everything is valid, it builds the summary for the
current release, then runs BFT-CoSi [42] to create a new
collective signature. Because the hash chain is cothority
controlled, we can distribute the witnessing of its consis-
tency across a larger group: for example, not just across a
few servers chosen by the developers of a particular pack-
age, but rather across all the servers chosen by numerous
developers who contribute to a large software distribution,
such as Debian. Even if an attacker controls a threshold
of developer keys for a package and creates a seemingly
valid release, the only way to convince any client to ac-
cept this malicious update is to submit it to the cothority
for approval and public logging. As a result, it is not pos-
sible for the group to sign the compromised release and
keep it “off the public record”.
This approach prevents attackers from secretly creating
malicious updates targeted at speciﬁc users without be-
ing detected. It also prevents software-update centers from
"forgetting" old software releases, as everything is stored
in a decentralized hash chain. CHAINIAC’s transparency
provisions not only protect users from compromised de-
velopers, but can also protect developers from attempts of
coercion, as real-world attackers prefer secrecy and would
be less likely to attack if they perceive a strong risk of the
attack being publicly revealed.
5.5 Evolution of Authoritative Keys
So far, we have assumed that developer and cothority keys
are static, hence clients who verify (individual or collec-
tive) signatures need not rely on centralized intermedi-
aries such as CAs to retrieve those public keys. This as-
sumption is unrealistic, however, as it makes a compro-
mise of a key only a matter of time. Collective signing
exacerbates this problem, because for both maximum in-
dependence and administrative manageability, witnesses’
keys might need to rotate on different schedules. To lift
this assumption without relying on centralized CAs, we
construct a decentralized mechanism for a trust delegation
that enables the evolution of the keys. As a result, devel-
opers and cothorities can change, when necessary, their
signing keys and create a moving target for an attacker,
and the cothority becomes more robust to churn.
To implement this trust delegation mechanism, we em-
ploy skipchains presented in Section 4. For the cothor-
ity keys, each cothority conﬁguration becomes a block in
a skipchain. When a new cothority conﬁguration needs to
be introduced, the current cothority witnesses run BFT on
it. If completed successfully, they add the conﬁguration to
the skipchain, along with the produced signature as a for-
ward link. For the developer keys, the trust is rooted in the
policy ﬁle. To enable a rotation of developer keys, a pol-
icy ﬁle needs to be a part of the Merkle tree of the release,
hence examined by the developers. Thus, the consistency
of key evolution becomes protected by the hash chain. To
update their keys, the developers ﬁrst specify a new pol-
icy ﬁle that includes an updated set of keys, then, as usual
during a new release, they sign it with a threshold of their
current keys, thus delegating trust from the old to the new
policy. Once the cothority has appended the new release
to the chain, the new keys become active and supersede
their older counterparts. Anyone following the chain can
be certain that a threshold of the developers has approved
the new set of keys. With this approach, developers can
rotate their keys regularly and, if needed, securely revoke
a sub-threshold number of compromised keys.
5.6 Role Separation and Timeliness
In addition to verifying and authenticating updates,
a software-update system must ensure update timeliness,
so that a client cannot unknowingly become a victim of
freeze or replay attacks (see Section 2.1). To retain decen-
tralization in CHAINIAC, we rely on the update cothor-
ity to provide a timestamp service. Using one set of keys
for signing new releases and for timestamping introduces
tradeoffs between security and usability, as online keys
are easier compromisable than ofﬂine keys, whereas the
latter cannot be used frequently. To address the described
challenges, we introduce a multi-layer skipchain-based ar-
chitecture with different trust roles, each having different
responsibilities and rights. We distinguish the four roles
ROOT, CONFIG, RELEASE, and TIME. The ﬁrst three are
1278    26th USENIX Security Symposium
USENIX Association
approximately accurate notion of the current time2, the
clients can then detect freeze attacks.
5.7 Multiple-Package Projects
To keep track of software packages, users often rely on
large software projects, such as Debian or Ubuntu, and
their community repositories. Each of these packages can
be maintained by a separate group of developers, hence
can deploy its own release log. To stay updated with
new releases of installed packages, a user would have
to frequently contact all the respective release logs and
follow their conﬁguration skipchains. This is not only
bandwidth- and time-consuming for the user but also re-
quires the maintainers of each package to run a fresh-
ness service. To alleviate this burden, we further enhance
CHAINIAC to support multi-package projects.
Figure 4: Constructing an aggregate layer in CHAINIAC
We introduce an aggregate layer into CHAINIAC: this
layer is responsible for collecting, validating and pro-
viding to clients information about all the packages in-
cluded in the project. A project-level update cothority im-
plements a project log where each entry is a snapshot of
a project state (Figure 4). To publish a new snapshot,
the cothority retrieves the latest data from the individual
package skipchains, including freshness proofs and signa-
tures on the heads. The witnesses then verify the correct-
ness and freshness of all packages in this snapshot against
the corresponding per-package logs. Finally, the cothority
forms a Merkle tree that summarizes all package versions
in the snapshot, then collectively signs it.
This architecture facilitates the gradual upgrade of large
open-source projects, as packages that do not yet have
their own skipchains can still be included in the aggregate
layer as hash values of the latest release ﬁles. The project-
level cothority runs an aggregate timestamp service, en-
suring that clients are provided with the latest status of all
individual packages and a consistent repository state. A
2 Protecting the client’s notion of time is an important but orthogonal
problem [50], solvable using a timestamping service with collectively-
signed proofs-of-freshness, as in CoSi [69, Section V.A.].
Figure 3: Trust delegation in CHAINIAC
based on skipchains and interconnected with each other
through upward and downward links represented as cryp-
tographic hashes and signatures, respectively. Figure 3
shows an overview of this multi-layer architecture.
The ROOT role represents CHAINIAC’s root of trust;
its signing keys are the most security-critical. These keys
are kept ofﬂine, possibly as secrets shared among a set of
developer-administrators. They are used to delegate trust
to the update cothority and revoke it in case of misbehav-
ior. The ROOT skipchain changes slowly (e.g., once per
year), and old keys are deleted immediately. As a result,
the ROOT skipchain has a height of one, with only single-
step forward and backward links.
The CONFIG role represents the online keys of the up-
date cothority and models CHAINIAC’s control plane.
These keys are kept online for access to them quicker than
to the ROOT keys. Their purpose is to attest to the validity
of new release-blocks. The CONFIG skipchain can have
higher-level skips, as it can be updated more frequently.
If a threshold of CONFIG keys is compromised, the ROOT
role signs a new set of CONFIG keys, enabling secure re-
covery. This is equivalent to a downward link from the
ROOT skipchain to the CONFIG skipchain.
The RELEASE role wraps the functionality of the re-
lease log, as speciﬁed previously, and adds upward links
to ROOT and CONFIG skipchains, enabling clients to efﬁ-
ciently look up the latest trusted ROOT and CONFIG con-
ﬁgurations required for verifying software releases.
Finally, the TIME role provides a timestamp service that
informs clients of the latest version of a package, within
a coarse-grained time interval. Every TIME block contains
a wall-clock timestamp and a hash of the latest release.
The CONFIG leader creates this block when a new RE-
LEASE skipblock is co-signed, or every hour if nothing
happens. Before signing it off, the rest of the indepen-
dent servers check that the hash inside the timestamp is
correct and that the time indicated is sufﬁciently close to
their clocks (e.g., within ﬁve minutes). From an absence
of fresh TIME updates and provided that clients has an
USENIX Association
26th USENIX Security Symposium    1279
121.11.21.1.11.1.21.2.11.2.2timerootconfigreleaseco-signaturehashdev-signaturetimestamps||||||||||||||||||client can request the latest signed project-snapshot from
the update cothority and check outdated packages on her
system using Merkle proofs. If there are such packages,
the client accesses their individual release logs, knowing
the hash values of the latest blocks.
A multi-package project can potentially have several
aggregate layers, each representing a certain distribution ,
e.g., based on the development phase of packages, as sta-
ble, testing, and unstable in Debian. Individual packages
would still maintain a single-view linear skipchain-log but
the project developers would additionally tag each release
with its distribution afﬁliation. For example, the stable
distribution would then notify clients only when corre-
spondingly tagged releases appear, and would point to the
precise block in the package skipchain by providing its
hash value, whereas the developers might move ahead and
publish experimental versions of the package to its release
log. The timeliness is then ensured by maintaining a sep-
arate timestamp service for each distribution.
6 Security Analysis
In this section, we informally analyze the security of
CHAINIAC against the threat model deﬁned in Section 3.2.
We thereby assume that an adversary is computationally
bound and unable to compromise the employed cryptosys-
tems (e.g., create hash collisions or forge signatures), ex-
cept with negligible probability.
Developers. The ﬁrst point of attack in CHAINIAC
is the software-release proposal created by developers.
An attacker might
try to sneak a vulnerability into
the source code, compromise the developers’ signing
keys, or intercept a release proposal that the developers
send to the update cothority, and replace it with a back-
doored version. If developers carefully review source-
code changes and releases, and fewer than the threshold
td of developers or their keys are compromised, the at-
tacker alone cannot forge a release proposal that the up-
date cothority would accept.3 As developer-signed re-
lease proposals are cryptographically bound to particular
sources and binaries, the update cothority will similarly
refuse to sign a release proposal whose sources differ from
the signed versions, or whose binaries differ from those
reproduced by the build veriﬁers. If a sub-threshold num-
ber of developer keys are compromised without detection,
3Of course there is no guarantee that even honest, competent devel-
opers will detect all bugs, let alone sophisticated backdoors masquerad-
ing as bugs. CHAINIAC’s transparency provisions ensure that even com-
promised releases are logged and open to scrutiny, and the freshness
mechanisms ensure that a compromised release does not remain usable
in rollback or freeze attacks after being ﬁxed and superseded.
a regular signing key rotation (Section 5.5) can eventually
re-establish full security of the developer keys.
Update cothority. The next point an adversary might
attack is the update-cothority’s witness servers. The wit-
nesses and build veriﬁers should be chosen carefully by
the software project or repository maintainers, should re-
side in different physical locations, and be controlled by
trustworthy, independent parties. For a successful attack,
the adversary must compromise at least tw witnesses to
violate the correctness or transparency of the release time-
line, and must compromise tv build veriﬁers to break the
source-to-binary release correspondence. As with devel-
oper keys, the regular rotation of cothority keys further
impedes a gradual compromise.
If a threshold of online cothority keys are compro-
mised, then, once this compromise is detected, the de-
velopers can use the ofﬂine ROOT keys to establish
a new cothority conﬁguration (see Section 5.6). Non-
compromised clients (e.g., those that did not update crit-
ical software during the period of compromise) can then
“roll forward” securely to the new conﬁguration. An un-
avoidable limitation of this (or any) recovery mechanism
using ofﬂine keys, however, is an inability to ensure time-
liness of conﬁguration changes. Old clients, whose net-
work connectivity is attacker controlled, could be denied
the knowledge of the new conﬁguration, hence remain
reliant on the old, compromised cothority conﬁguration.
“Fixing” this weakness would require bringing the ofﬂine
ROOT keys online, defeating their purpose.
Update timeline. An attacker might attempt to tam-
per with the skipchain-based update timeline containing
the authoritative signing keys and the software releases,
e.g., by attempting to fork either of the logs, to modify en-
tries, or to present different views to users. The skipchain
structure relies on the security of the underlying hash and