            print(repr(to_bytes(m, 0)))
        return bound[0]
    def main():
        print(bsearch(0, 128 ** PASSLEN, check))
    if __name__ == '__main__':
        main()
    # DSA8&&!@#$%^&D1NGY1AS3DJA
## Misc
### freq game
每一个 level 涉及 4 个字节，给了你 1500 个关于正弦函数 `sin` 的等式，要解出这 4 个字节。管它是什么式子，就直接 C++ 写个大约
$ O\left (\binom {256}{4} \right ) $ 的暴力跑一跑比较一下 eps 就完事了，反正数据不变可以离线跑，然后写个
python 脚本调用一下就好了。
    #include
    using namespace std;
    #define pi acos(-1.0)
    #define eps 1e-8
    const int PAT_TOT = 8;
    const int N = 1500;
    const int MAX = 256;
    double x[N], y[N];
    int main() {
        for (int i = 0; i = 0; --i) {
                            double tmp = sin(x[i] * a) + sin(x[i] * b) 
                                       + sin(x[i] * c) + sin(x[i] * d);
                            if (fabs(tmp * 7 - y[i]) > eps) {
                                flag = 0;
                                break;
                            }
                        }
                        if (flag) {
                            printf("%d %d %d %d\n", a, b, c, d);
                            return 0;
                        }
                    }
        return 0;
    }
### easy dump
是个Win7虚拟机内存镜像。  
可以导出当时的屏幕布局，结合进程目录可以推断出是个画图软件。  
恢复画图的内容，分辨率1295*720，偏移151384059。
### guess my key
写了一个神(bao)经(po)网(jiao)络(ben)丢去训练了，跑了大概30分钟拿到flag。
    import requests
    import os
    def cost(a, b):
        d = [(i-j)*100*(i-j) for i, j in zip(a, b)]
        return sum(d)
    challenge_url = "http://150.109.62.46:13577/enc?msg=%s&key=%s"
    flag_url = "http://150.109.62.46:13577/enc?msg=%s"
    key_list = [0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1]
    key = ','.join([str(i) for i in key_list])
    while True:
        msg_list = bin(int(os.urandom(12).encode('hex'), 16))[2:]
        msg = ','.join(msg_list)
        c0 = 9999
        c1 = 9999
        r = requests.get(flag_url % (msg))
        res = eval(r.text)
        flag_c = eval('['+res['raw_cipher'][1:-1]+']')
        for round in range(2*96):
            try:
                r = requests.get(challenge_url % (msg, key), timeout=3)
                res = eval(r.text)
                c0 = cost(eval('['+res['raw_cipher'][1:-1]+']'), flag_c)
            except Exception:
                pass
            key_list[round%96] ^= 1
            key = ','.join([str(i) for i in key_list])
            try:
                r = requests.get(challenge_url % (msg, key), timeout=3)
                res = eval(r.text)
                c1 = cost(eval('['+res['raw_cipher'][1:-1]+']'), flag_c)
            except Exception:
                pass
            if c1 > c0:
                key_list[round%96] ^= 1
                key = ','.join([str(i) for i in key_list])
                print round, c0
            else:
                print round, c1
            if c1 == 0 or c2 == 0;
                break
    print key
### difficult programming language
键盘流量，解出来的结果是
    D'`;M?!\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q=|;)sxwYXtsl2pongOe+LKa'e^]\a`_X|V[Tx;:VONSRQJn1MFKJCBfFE>& 解流量代码
    import sys
    import os
    DataFileName = "usb.dat"
    presses = []
    normalKeys = {"04":"a", "05":"b", "06":"c", "07":"d", "08":"e", "09":"f", "0a":"g", "0b":"h", "0c":"i", "0d":"j", "0e":"k", "0f":"l", "10":"m", "11":"n", "12":"o", "13":"p", "14":"q", "15":"r", "16":"s", "17":"t", "18":"u", "19":"v", "1a":"w", "1b":"x", "1c":"y", "1d":"z","1e":"1", "1f":"2", "20":"3", "21":"4", "22":"5", "23":"6","24":"7","25":"8","26":"9","27":"0","28":"","29":"","2a":"", "2b":"","2c":"","2d":"-","2e":"=","2f":"[","30":"]","31":"\\","32":"","33":";","34":"'","35":"`","36":",","37":".","38":"/","39":"","3a":"","3b":"", "3c":"","3d":"","3e":"","3f":"","40":"","41":"","42":"","43":"","44":"","45":""}
    shiftKeys = {"04":"A", "05":"B", "06":"C", "07":"D", "08":"E", "09":"F", "0a":"G", "0b":"H", "0c":"I", "0d":"J", "0e":"K", "0f":"L", "10":"M", "11":"N", "12":"O", "13":"P", "14":"Q", "15":"R", "16":"S", "17":"T", "18":"U", "19":"V", "1a":"W", "1b":"X", "1c":"Y", "1d":"Z","1e":"!", "1f":"@", "20":"#", "21":"$", "22":"%", "23":"^","24":"&","25":"*","26":"(","27":")","28":"","29":"","2a":"", "2b":"","2c":"","2d":"_","2e":"+","2f":"{","30":"}","31":"|","32":"","33":":","34":"\"","35":"~","36":"","38":"?","39":"","3a":"","3b":"", "3c":"","3d":"","3e":"","3f":"","40":"","41":"","42":"","43":"","44":"","45":""}
    def main():
        # check argv
        if len(sys.argv) != 2:
            exit(1)
        # get argv
        pcapFilePath = sys.argv[1]
        # get data of pcap
        os.system("tshark -r %s -T fields -e usb.capdata > %s" % (pcapFilePath, DataFileName))
        # read data
        with open(DataFileName, "r") as f:
            for line in f:
                presses.append(line[0:-1])
        # handle
        result = ""
        for press in presses:
            Bytes = press.split(":")
            if Bytes[0] == "00":
                if Bytes[2] != "00":
                    result += normalKeys[Bytes[2]]
            elif Bytes[0] == "02": # shift key is pressed.
                if Bytes[2] != "00":
                    result += shiftKeys[Bytes[2]]
            elif Bytes[0] == "01":
                if Bytes[2] != "00":
                    result += ("Ctrl+" + shiftKeys[Bytes[2]])
            else:
                print "[-] Unknow Key : %s" % (Bytes[0])
        print "[+] Found : %s" % (result)
        # clean the temp data
        os.system("rm ./%s" % (DataFileName))
    if __name__ == "__main__":
        main()
## Crypto
### xor game
枚举长度，按位考虑，枚举每一位的可能值，然后去密文里异或一遍，异或出来的字符如果不是正常英文诗歌该有的，说明不合法。可以发现密码长度为 21
时每一位都有可能值。每一位候选项不多，最后两位猜一下拿去解一下密文看顺不顺眼就好了。
    import base64
    def invalid(x):
        if chr(x) in '{}[]@#%^*=+':
            return True
        if x == 10:
            return False
        if x = 128:
            return True
        return False
    cipher = base64.b64decode(open('cipher.txt', 'r').read())
    for L in range(1, 32):
        c = []
        cc = []
        for i in range(L):
            t = []
            for cand in range(32, 128):
                flag = True
                for j in range(i, len(cipher), L):
                    tmp = cand ^ cipher[j]
                    if invalid(tmp):
                        flag = False
                        break
                if flag:
                    t.append(chr(cand))
            c.append(len(t))
            cc.append(t)
        if 0 not in c:
            print(L, c)
            for i in range(L):
                print('\t', i, cc[i])
### xor?rsa
裸的 Coppersmith’s short-pad attack  
抄个轮子一把梭，调一下 epslion 参数，真香  
small_roots 有个 epslion 参数，根据文档，大概是在 $ \frac{1}{e^2} - \frac{kbits+1}{nbits}
$左右最合适
    def franklinReiter(n,e,r,c1,c2):
        R. = Zmod(n)[]
        f1 = X^e - c1
        f2 = (X + r)^e - c2
        return Integer(n-(compositeModulusGCD(f1,f2)).coefficients()[0])
    def compositeModulusGCD(a, b):
        if(b == 0):
            return a.monic()
        else:
            return compositeModulusGCD(b, a % b)
    def CoppersmithShortPadAttack(e, n, C1, C2, nbit, kbit):
        P. = PolynomialRing(ZZ)
        ZmodN = Zmod(n)
        g1 = x^e - C1
        g2 = (x+y)^e - C2
        res = g1.resultant(g2)
        P. = PolynomialRing(ZmodN)
        rres = 0
        for i in range(len(res.coefficients())):
            rres += res.coefficients()[i]*(y^(res.exponents()[i][1]))
        print(rres.degree())
        diff = rres.small_roots(epsilon=1/rres.degree()-(kbit+1)/nbit)
        print(diff)
        recoveredM1 = franklinReiter(n,e,diff[0],C1,C2)
        print(recoveredM1)
    e = 5
    n = ...
    C1 = ...
    C2 = ...
    CoppersmithShortPadAttack(e, n, C1, C2, 2048, 40)
## Blockchain
### ez2win
`_transfer` 转钱完事
* * *
最后，感谢 **_Vidar-Team_** 对又一届优秀赛事的组织。