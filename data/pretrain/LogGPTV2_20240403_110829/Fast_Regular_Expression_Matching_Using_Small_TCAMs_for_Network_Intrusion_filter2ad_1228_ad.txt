graph with where
each deferment tree
is a node and where
the weight of each edge is the cost of consolidating the
two corresponding deferment trees together. We ﬁnd a
minimum weight matching of this complete graph to give
us an optimal pairing for k = 2. For larger k = 2l, we
then repeat this process l − 1 times. Our matching is not
necessarily optimal for k > 2.
Figure 7: D2FA for {a.*bc, cde}
c
9
e
7
e
3
In some cases, the deferment forest may have only one
tree. In such cases, we consider consolidating the sub-
trees rooted at the children of the root of the single defer-
ment tree. We also consider similar options if we have a
few deferment trees but they are not structurally similar.
4.4 Effectiveness of Table Consolidation
We now explain why table consolidation works well on
real-world RE sets. Most real-world RE sets contain
REs with wildcard closures ‘.*’ where the wildcard ‘.’
matches any character and the closure ‘*’ allows for un-
limited repetitions of the preceding character. Wildcard
closures create deferment trees with lots of structural
similarity. For example, consider the D2FA in Fig. 7
for RE set \{a.*bc, cde\} where we use dashed ar-
rows to represent the default transitions. The wildcard
closure ‘.*’ in the RE a.*bc duplicates the entire DFA
sub-structure for recognizing string cde. Thus, table
consolidation of the subtree (0, 1, 2, 3) with the subtree
(4, 5, 6, 7) will lead to signiﬁcant space saving.
5 Variable Striding
We explore ways to improve RE matching throughput by
consuming multiple characters per TCAM lookup. One
possibility is a k-stride DFA which uses k-stride transi-
tions that consume k characters per transition. Although
k-stride DFAs can speed up RE matching by up to a fac-
tor of k, the number of states and transitions can grow
exponentially in k. To limit the state and transition space
explosion, we propose variable striding using variable-
stride DFAs. A k-var-stride DFA consumes between 1
and k characters in each transition with at least one tran-
sition consuming k characters. Conceptually, each state
in a k-var-stride DFA has 256k transitions, and each tran-
sition is labeled with (1) a unique string of k characters
and (2) a stride length j (1 ≤ j ≤ k) indicating the num-
ber of characters consumed.
In TCAM-based variable striding, each TCAM lookup
uses the next k consecutive characters as the lookup key,
but the number of characters consumed in the lookup
varies from 1 to k; thus, the lookup decision contains
both the destination state ID and the stride length.
5.1 Observations
We use an example to show how variable striding can
achieve a signiﬁcant RE matching throughput increase
with a small and controllable space increase. Fig. 8
shows a 3-var-stride transition table that corresponds to
state s0 in Figure 1. This table only has 7 entries as op-
posed to 116 entries in a full 3-stride table for s0. If we
assume that each of the 256 characters is equally likely
to occur, the average number of characters consumed per
9
3-var-stride transition of s0 is 1 ∗ 1/16 + 2 ∗ 15/256 +
3 ∗ 225/256 = 2.82.
TCAM
Input
SRAM
DEC : Stride
0110 0000 **** **** **** ****
0110 **** **** **** **** ****
**** **** 0110 0000 **** ****
**** **** 0110 **** **** ****
**** **** **** **** 0110 0000
**** **** **** **** 0110 ****
**** **** **** **** **** ****
s0 : 1
s1 : 1
s0 : 2
s1 : 2
s0 : 3
s1 : 3
s0 : 3
SRC
s0
s0
s0
s0
s0
s0
s0
Figure 8: 3-var-stride transition table for s0
5.2 Eliminating State Explosion
We ﬁrst explain how converting a 1-stride DFA to a k-
stride DFA causes state explosion. For a source state and
a destination state pair (s, d), a k-stride transition path
from s to d may contain k−1 intermediate states (exclud-
ing d); for each unique combination of accepting states
that appear on a k-stride transition path from s to d, we
need to create a new destination state because a unique
combination of accepting states implies that the input has
matched a unique combination of REs. This can be a
very large number of new states.
We eliminate state explosion by ending any k-var-
stride transition path at the ﬁrst accepting state it reaches.
Thus, a k-var-stride DFA has the exact same state set
as its corresponding 1-stride DFA. Ending k-var-stride
transitions at accepting states does have subtle interac-
tions with table consolidation and shadow encoding. We
end any k-var-stride consolidated transition path at the
ﬁrst accepting state reached in any one of the paths being
consolidated which can reduce the expected throughput
increase of variable striding. There is a similar but even
more subtle interaction with shadow encoding which we
describe in the next section.
5.3 Controlling Transition Explosion
In a k-stride DFA converted from a 1-stride DFA with al-
phabet Σ, a state has |Σ|k outgoing k-stride transitions.
Although we can leverage our techniques of character
bundling and shadow encoding to minimize the number
of required TCAM entries, the rate of growth tends to be
exponential with respect to stride length k. We have two
key ideas to control transition explosion: k-var-stride
transition sharing and self-loop unrolling.
5.3.1 k-var-stride Transition Sharing Algorithm
Similar to 1-stride DFAs, there are many transition shar-
ing opportunities in a k-var-stride DFA. Consider two
states s0 and s1 in a 1-stride DFA where s0 defers to s1.
The deferment relationship implies that s0 shares many
common 1-stride transitions with s1. In the k-var-stride
DFA constructed from the 1-stride DFA, all k-var-stride
transitions that begin with these common 1-stride tran-
sitions are also shared between s0 and s1. Furthermore,
two transitions that do not begin with these common 1-
stride transitions may still be shared between s0 and s1.
For example, in the 1-stride DFA fragment in Fig. 9, al-
though s1 and s2 do not share a common transition for
character a, when we construct the 2-var-stride DFA, s1
and s2 share the same 2-stride transition on string aa that
ends at state s5.
To
on
Figure 9: s1 and s2 share transi-
tion aa
promote
transition
sharing
among states in a
k-var-stride DFA,
we ﬁrst need to
the
decide
deferment
rela-
among
tionship
The ideal
states.
deferment
rela-
tionship should be calculated based on the SRG of the
ﬁnal k-var-stride DFA. However, the k-var-stride DFA
cannot be ﬁnalized before we need to compute the
deferment relationship among states because the ﬁnal
k-var-stride DFA is subject to many factors such as
available TCAM space. There are two approximation
options for the ﬁnal k-var-stride DFA for calculating
the deferment relationship:
the 1-stride DFA and the
full k-stride DFA. We have tried both options in our
experiments, and the difference in the resulting TCAM
space is negligible. Thus, we simply use the deferment
forest of the 1-stride DFA in computing the transition
tables for the k-var-stride DFA.
Second, for any two states s1 and s2 where s1 defers to
s2, we need to compute s1’s k-var-stride transitions that
are not shared with s2 because those transitions will con-
stitute s1’s k-var-stride transition table. Although this
computation is trivial for 1-stride DFAs, this is a sig-
niﬁcant challenge for k-var-stride DFAs because each
state has too many (256k) k-var-stride transitions. The
straightforward algorithm that enumerates all transitions
has a time complexity of O(|Q|2|Σ|k), which grows ex-
ponentially with k. We propose a dynamic program-
ming algorithm with a time complexity of O(|Q|2|Σ|k),
which grows linearly with k. Our key idea is that the
non-shared transitions for a k-stride DFA can be quickly
computed from the non-shared transitions of a (k-1)-var-
stride DFA. For example, consider the two states s1 and
s2 in Fig. 9 where s1 defers to s2. For character a, s1
transits to s3 while s2 transits to s4. Assuming that we
have computed all (k-1)-var-stride transitions of s3 that
are not shared with the (k-1)-var-stride transitions of s4,
if we prepend all these (k-1)-var-stride transitions with
10
character a, the resulting k-var-stride transitions of s1 are
all not shared with the k-var-stride transitions of s2, and
therefore should all be included in s1’s k-var-stride tran-
sition table. Formally, using n(si, sj, k) to denote the
number of k-stride transitions of si that are not shared
with sj, our dynamic programming algorithm uses the
following recursive relationship between n(si, sj, k) and
n(si, sj, k − 1):
n(si, sj, 0) = (cid:26) 0 if si = sj
n(si, sj, k) = Xc∈Σ
1 if si 6= sj
n(δ(si, c), δ(sj, c), k − 1)
(1)
(2)
The above formulae assume that
the intermediate
states on the k-stride paths starting from si or sj are all
non-accepting. For state si, we stop increasing the stride
length along a path whenever we encounter an accepting
state on that path or on the corresponding path starting
from sj. The reason is similar to why we stop a con-
solidated path at an accepting state, but the reasoning is
more subtle.
Let p be the string that leads sj to an accepting state.
The key observation is that we know that any k-var-stride
path that starts from sj and begins with p ends at that ac-
cepting state. This means that si cannot exploit transition
sharing on any strings that begin with p.
The above dynamic programming algorithm produces
non-overlapping and and incomplete transition tables
that we compress using the 1-dimensional incomplete
classiﬁer minimization algorithm in [21].
5.3.2 Self-Loop Unrolling Algorithm
We now consider root states, most of which are self-
looping. We have two methods to compute the k-var-
stride transition tables of root states. The ﬁrst is direct
expansion (stopping transitions at accepting states) since
these states do not defer to other states which results in
an exponential increase in table size with respect to k.
The second method, which we call self-loop unrolling,
scales linearly with k.
Self-loop unrolling increases the stride of all the self-
loop transitions encoded by the last default TCAM entry.
Self-loop unrolling starts with a root state j-var-stride
transition table encoded as a compressed TCAM table of
n entries with a ﬁnal default entry representing most of
the self-loops of the root state. Note that given any com-
plete TCAM table where the last entry is not a default
entry, we can always replace that last entry with a default
entry without changing the semantics of the table. We
generate the (j+1)-var-stride transition table by expand-
ing the last default entry into n new entries, which are
obtained by prepending 8 *s as an extra default ﬁeld to
the beginning of the original n entries. This produces
a (j+1)-var-stride transition table with 2n − 1 entries.
11
Fig. 8 shows the resulting table when we apply self-loop
unrolling twice on the DFA in Fig. 1.
5.4 Variable Striding Selection Algorithm
We now propose solutions for the third key challenge -
which states should have their stride lengths increased
and by how much, i.e., how should we compute the tran-
sition function δ. Note that each state can independently
choose its variable striding length as long as the ﬁnal
transition tables are composed together according to the
deferment forest. This can be easily proven based on
the way that we generate k-var-stride transition tables.
For any two states s1 and s2 where s1 defers to s2, the
way that we generate s1’s k-var-stride transition table
is seemingly based on the assumption that s2’s transi-
tion table is also k-var-stride; actually, we do not have
this assumption. For example, if we choose k-var-stride
(2 ≤ k) for s1 and 1-stride for s2, all strings from s1
will be processed correctly; the only issue is that strings
deferred to s2 will process only one character.
We view this as a packing problem: given a TCAM
capacity C, for each state s, we select a variable stride
length value Ks, such thatPs∈Q |T(s, Ks)| ≤ C, where
T(s, Ks) denotes the Ks-var-stride transition table of
state s. This packing problem has a ﬂavor of the knap-
sack problem, but an exact formulation of an optimiza-
tion function is impossible without making assumptions
about the input character distribution. We propose the
following algorithm for ﬁnding a feasible δ that strives
to maximize the minimum stride of any state. First, we
use all the 1-stride tables as our initial selection. Second,
for each j-var-stride (j ≥ 2) table t of state s, we create
a tuple (l, d, |t|) where l denotes variable stride length, d
denotes the distance from state s to the root of the defer-
ment tree that s belongs to, and |t| denotes the number
of entries in t. As stride length l increases, the individual
table size |t| may increase signiﬁcantly, particularly for
the complete tables of root states. To balance table sizes,
we set limits on the maximum allowed table size for root
states and non-root states. If a root state table exceeds the
root state threshold when we create its j-var-stride table,
we apply self-loop unrolling once to its (j − 1)-var-stride
table to produce a j-var-stride table. If a non-root state
table exceeds the non-root state threshold when we cre-
ate its j-var-stride table, we simply use its j−1-var-stride
table as its j-var-stride table. Third, we sort the tables by
these tuple values in increasing order ﬁrst using l, then
using d, then using |t|, and ﬁnally a pseudorandom coin
ﬂip to break ties. Fourth, we consider each table t in or-
der. Let t′ be the table for the same state s in the current
selection. If replacing t′ by t does not exceed our TCAM
capacity C, we do the replacement.
6 Implementation and Modeling
Entries
1024
2048
4096
8192
16384
32768
65536
131072
TCAM
Chip size
(36-bit wide)
0.037 Mb
0.074 Mb
0.147 Mb
0.295 Mb
0.590 Mb
1.18 Mb
2.36 Mb
4.72 Mb
TCAM
Chip size
Latency
ns
(72-bit wide)
0.074 Mb
0.147 Mb
0.295 Mb
0.590 Mb
1.18 Mb
2.36 Mb
4.72 Mb
9.44 Mb
0.94
1.10
1.47
1.84
2.20
2.57
2.94
3.37
Table 1: TCAM size in Mb and Latency in ns
We now describe some implementation issues associ-
ated with our TCAM based RE matching solution. First,
the only hardware required to deploy our solution is the
off-the-shelf TCAM (and its associated SRAM). Many
deployed networking devices already have TCAMs, but
these TCAMs are likely being used for other purposes.
Thus, to deploy our solution on existing network devices,
we would need to share an existing TCAM with another
application. Alternatively, new networking devices can
be designed with an additional dedicated TCAM chip.