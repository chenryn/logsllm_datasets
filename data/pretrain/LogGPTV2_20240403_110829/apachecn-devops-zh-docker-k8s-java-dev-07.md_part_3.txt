我们已经解释了所有的 Kubernetes 抽象——我们知道有 Pods、复制集、部署和服务。现在是时候转向 Kubernetes 架构的物理执行层了。所有那些小而脆弱的豆荚都需要生活在某个地方。它们生活在节点中，我们现在将了解这一点。
# 节点
节点是 Kubernetes 斯架构中的一匹工作马。根据您的基础架构，它可能是虚拟机或物理机。工作节点按照主节点的指示运行任务，我们将很快解释这一点。节点(在早期的 Kubernetes 生命中，它们被称为奴才)可以运行一个或多个 Pods。它们在容器化环境中提供特定于应用的虚拟主机。
When a worker node dies, the Pods running on the node die as well.
下图显示了节点的内容:
![](img/96e83167-47e2-48ad-b3ee-fd086586e0c0.png)
从上图中可以看到，Kubernetes 中的一个节点内部运行着一些进程，每个进程都非常重要。让我们一个一个解释他们的目的。
# KubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetes
库布雷可能是 Kubernetes 斯最重要的控制者。这是一个对来自主节点的命令做出响应的过程(我们稍后将解释主节点是什么)。每个节点都有这个进程监听。主人称之为管理豆荚和它们的容器。Kubelet 运行 Pods(正如您已经知道的，Pods 是共享一个 IP 和卷的容器的集合)。库伯莱([https://kubernetes.io/v1.0/docs/admin/kubelet/](https://kubernetes.io/v1.0/docs/admin/kubelet/))负责在一台单独的机器上运行什么，它有一个任务:给定一组要运行的容器，以确保它们都在运行。换句话说，Kubelet 是代理的名称，节点是我们所说的代理运行的机器。值得了解的是，每个 Kubelet 还有一个内部`HTTP`服务器，它监听 HTTP 请求并响应一个简单的 API 调用来提交一个新的清单。
# 代理
代理是一种网络代理，它创建一个客户端可以访问的虚拟 IP 地址。网络呼叫将透明地代理到 Kubernetes 服务中的 Pods。正如您已经知道的，服务提供了一种将 Pods 分组为某种单一业务流程的方法，这可以在通用访问策略下实现。通过在节点上运行代理，我们可以调用服务的 IP 地址。从技术上讲，节点的代理是一个`kube-proxy`([【https://kubernetes.io/docs/admin/kube-proxy/】](https://kubernetes.io/docs/admin/kube-proxy/))进程，该进程对`iptables`规则进行编程，以阻止对服务 IP 地址的访问。Kubernetes 网络代理运行在每个节点上。没有它，我们将无法访问该服务。
`kube-proxy` knows only UDP and TCP, does not understand HTTP, provides load balancing, and is just used to reach services.
# Docker
最后，每个节点都需要一些东西来运行。它将是一个 Docker 容器运行时，负责拉取映像和运行容器。
所有这些节点，就像现实世界中的任何其他工人群体一样，都需要一个经理。在 Kubernetes 中，节点管理器的角色由一个特殊的节点执行:主节点。
# 主节点
主节点不运行任何容器——它只是处理和管理集群。主节点是提供集群统一视图的中央控制点。有一个主节点控制多个工作节点，它们实际上运行我们的容器。主节点通过考虑每个节点上的可用资源，自动处理群集中工作节点之间的 Pods 调度。主节点的结构如下图所示:
![](img/398c41fe-9c4f-42d9-ad45-d79badfcbf33.png)
让我们从`etcd`开始，一片一片地解剖主节点。
# 和 cd
Kubernetes 将其所有集群状态存储在 [`etcd`](https://github.com/coreos/etcd) 中，这是一个具有强一致性模型的分布式数据存储。`etcd`是分布式系统中最关键数据的分布式可靠键值存储，重点是:
*   **简单**:定义明确、面向用户的 API
*   **安全**:自动 TLS，可选客户端证书认证
*   **快速**:以 10，000 次写入/秒为基准
*   **可靠**:使用筏适当分布
这种状态包括集群中存在哪些节点，应该运行哪些 Pods，它们在哪些节点上运行，等等。整个集群状态存储在`etcd`的一个实例中。这提供了一种可靠地存储配置数据的方法。主节点上运行的另一个关键组件是应用编程接口服务器。
# 应用编程接口服务器
驻留在主节点上的主要组件之一是应用编程接口服务器。这非常重要，有时，您可能会发现主节点通常被称为应用编程接口服务器。从技术上讲，这是一个名为`kube-apiserver`的过程，它使用 JSON 接受并响应`HTTP` `REST`的请求。它的主要目的是为应用编程接口对象验证和配置数据，这些对象是 pod、服务、复制集和其他对象。应用编程接口服务器提供了集群共享状态的前端，所有其他组件都可以通过它进行交互。API 服务器是中央管理实体，是唯一连接到 etcd 的 Kubernetes 组件。所有其他组件必须通过应用编程接口服务器才能与集群状态一起工作。我们将在[第 9 章](09.html)、*与 Kubernetes 斯原料药合作*中详细介绍 Kubernetes 斯原料药。
The Master node does not run any containers--it just handles and manages the whole cluster. The nodes that actually run the containers are the worker nodes.
# 调度程序
如前所述，如果您创建了一个部署，主节点将调度应用实例在集群中各个节点上的分布。一旦应用实例启动并运行，部署控制器将持续监控这些实例。这是一种自我修复机制——如果一个节点宕机或被删除，部署控制器会替换它。
现在我们知道了构成其架构的 Kubernetes 特定组件是什么，让我们看看有哪些工具可供我们使用。
# 可用工具
在本书的剩余部分，我们将使用几个工具。先说最重要的一个:`kubectl`。
# 库布特雷
`kubectl`是针对 Kubernetes 集群运行命令的命令行界面。事实上，这是使用 Kubernetes 时最常用的命令。在[第 8 章](08.html)、*将 Kubernetes 与 Java 一起使用*中，我们将介绍该命令的语法和可能的用法。使用`kubectl`，您将与您的集群进行交互。当然，有了主节点和应用编程接口服务器公开的应用编程接口，我们可以使用我们选择的`HTTP`客户端来实现，但是使用`kubectl`要快得多，也更方便。`kubectl`提供了许多功能，例如列出资源、显示关于资源的详细信息、打印日志、管理集群以及在 Pod 中的容器上执行命令。
# 仪表盘
Kubernetes Dashboard 是一个用于 Kubernetes 集群的漂亮、干净的基于网络的用户界面。使用仪表板，您可以管理集群本身以及在其中运行的应用，并对其进行故障排除。你可以说这是 Kubernetes 的用户界面。对于那些喜欢使用图形用户界面的人来说，仪表板可以成为一个方便的工具，用于部署容器化的应用，获得集群上运行的应用的概述，以及创建或修改单个资源，如部署、Pods 和服务。例如，您可以使用部署向导扩展部署、启动滚动更新、重新启动 Pod 或部署新应用。我们还将在[第 8 章](08.html)、*中使用仪表板，将 Kubernetes 与 Java 一起使用*。
# 迷你库比
运行集群似乎是一个复杂的过程，需要大量的设置。这不一定是事实。实际上，为了学习、测试和开发的目的，让 Kubernetes 集群在本地机器上运行是非常容易的。位于[https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube)的 GitHub 提供的`minikube`工具允许您在自己的机器上设置本地集群。它适用于所有主要平台，包括 Linux、macOS 和 Windows。开始的集群当然将是单节点集群，但是开始做真实的 Kubernetes 例子就足够了。事实上，在[第 8 章](08.html)、*将 Kubernetes 与 Java 一起使用*中，在我们开始将我们的`REST`服务部署到集群中之前，我们将在本地运行 Kubernetes。
除了前面提到的那些，你可能会在互联网上找到许多其他与 Kubernetes 配合得非常好的工具和实用程序。
# 摘要
这一章介绍了很多新概念。让我们简要总结一下我们对 Kubernetes 架构的了解。
Kubernetes (k8s)是一个开源平台，用于自动化容器操作，如跨节点集群的部署、调度和可伸缩性。使用 Kubernetes，您可以:
*   自动化容器的部署和复制
*   动态缩放容器
*   将容器分组，并在它们之间提供负载平衡
*   轻松推出新版本的应用容器
*   为您的应用提供容错机制——如果容器死亡，它将被替换
*   Kubernetes 包括:
    *   **一个集群**:一组节点。
    *   **节点**:充当工作者的物理机或虚拟机。每个节点运行 kubelet、代理和 Docker 引擎进程。
    *   **主节点**:提供集群的统一视图。它提供了 Kubernetes API 服务器。API 服务器提供了一个`REST`端点，可以用来与集群进行交互。主机还包括用于创建和复制 Pods 的控制器。
    *   **Pods** :调度到节点。每个 Pod 运行一个容器或一组容器和卷。同一 Pod 中的容器共享相同的网络命名空间和卷，并且可以使用 localhost 相互通信。他们的生命是脆弱的；他们会一直生老病死。
    *   **标签** : Pods 有标签，附有键/值对。标签用于精确选择吊舱。
    *   **服务**:定义一组 Pods 和访问它们的策略的抽象。服务通过使用标签选择器找到他们的 Pods 组。因为单个 Pod 的 IP 可以改变，所以该服务提供了一个永久的 IP 地址供其客户端使用。
这是一个可能有点难以置信的理论。别担心，在[第 8 章](08.html)、*用 Java 使用 Kubernetes*中，我们要运行本地的 Kubernetes 集群。我们的计划将包括使用`minikube`创建一个本地 Kubernetes 集群。然后，我们将使用我们的 Java REST 微服务部署和管理 Docker 容器。通过做一些实际的、动手的操作，Kubernetes 架构将变得更加清晰。经营一个当地的库本内斯并不是我们唯一要做的事情。稍后，在[第 10 章](10.html)、*在云中的 Kubernetes 上部署 Java*中，我们将把我们的应用放在真正的云中——一个 Kubernetes 真正闪耀的地方。