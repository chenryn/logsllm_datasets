index则是单独存放的，有个指针指向primarykey。
整个表的内容，因为聚集索引是把 primary key 以及row data 保存在一起的，而 secondary
以查询数据，从而保证数据的一致性。
塞，从而保证数据的一致性。
索引页，和之前相比，速度会更快。但创建聚集索引（主键）或者是外键时，还是需要复制
1.1.18快速创建、删除、更改索引
速度对比
14.4.7.14.Control of Spin LockPolling
表信息
表1-3是创建和删除非聚集索引的速度对比。
3）复制完毕后删除原表，并把新表改名为原表。
2）复制原表的数据到新表，这时会对原表加一个共享锁，其他的会话不能更新，但可
从MySQL5.5.X版本开始，创建和删除非聚集索引不用复制整个表的内容了。只须更新
1）创建一个和原表结构一样的空表，然后创建非聚集索引。
创建和删除非聚集索引的过程如下：
3）复制完毕后删除原表，并把新表改名为原表。
2）复制原表的数据到新表，这时会对原表加一个排他锁，其他的会话dml操作会阻
1）创建一个和原表结构一样的空表，然后创建聚集索引。
在MySQL5.1.X版本里，创建和删除聚集索引的过程如下：
mysql> select count(*) from testl;
1 row in set (0.01 sec)
1row in set (0.94 sec)
count(*)
5.5.19-1og
aysql> select @@version;
@@version
666666
MySQL5.5.X
表1-3创建和删除非聚集索引的速度对比
uent
mysql> select count(*) from testl;
mysql> select @version:
row in set (2.60 sec)
row in set (0.00 sec)
5.1.59-1og
count(*)
@eversion
666666
MySQL5.1.X
第1章MySQL5.5介绍·29
of
---
## Page 44
30·第一部分MySQL5.5新特性篇
1.1.19
MySQL.5doesnot support cficient crationordroppingofFOREGNEYconstraintsThereforeifyouuseATERAto
the table forread access,b
WhileanlDBsecndarindexiseingcreatedordroppedthtableslckedinsharedodenywitestothtablearelocked
InnoDBhastwotypesofindexes:theclustredindexandsecondaryndexesSincethclusteredindexcontainsthedatavaluesinits
14.4.2.Fast IndexCreation in theInnoDBStorage Engine
增加索引
速度对比
删除索引
从MySQL5.5.X版本开始支持InnoDB数据页压缩，数据页的压缩使数据文件体积变
关于快速创建索引的介绍，请参见MySQL5.5手册：
从结果上看，MySQL5.5.X的速度更快。
InnoDB支持创建压缩数据页
mysql> drop index IX_tid on testl.
mysql>select @version:
5,5.19-1og
ysql> select @@version.
uery
row in set (0.01 sec)
row in set (0.01 sec)
5.5.19-1og
@@version
@eversion
MySQL5.5.X
Warnings:0
ary
mysql>
Records:999999
mysql> drop index IX_tid on testl.
usingFast Index Creation.
5.1.59-1og
nysql> select @eversion.
mysql>
row in set （0.00 sec)
ysql>create index IX_tid on testl(tid)
@version
row in set (0.00 sec)
5.1.59-1og
@oversion
OK,
select
the
666666
kedinexclusivemodebecauseth
@Cversion
MySQL5.1.X
Duplicates:0
(15.82 sec)
Warnings:
（续）
---
## Page 45
BLOCK_SIZE=8即可，代码如下：
2KB、4KB还是8KB，如果设置过小，会导致消耗更多的CPU，通常设置为8KB。
Pool为600MB。
解压缩带来的开销。
颈时，这个算法会同时踢出未压缩的页和压缩的页，留出更多的内存来存放热数据，减少
其目的是避免当CPU繁忙时花费太多的时间在解压缩上，也是为了避免在CPU空闲时在
那么会直接写入磁盘中，因此缓冲池中可能有压缩和未压缩的页，也可能只有压缩页。
--MySQL-db=test--oltp-table-name=uncompressed--MySQL-socket=/tmp/MySQL.sockrun
解压缩操作上做过多的I/O操作。所以，当系统处于I/O瓶颈时，这个算法会踢出未压缩的
一个压缩表时，InnoDB会通过自适应的LRU算法来实现内存中压缩页和未压缩页的平衡
的数据页踢出去，而保留压缩的页在内存中，如果未压缩的页在一段时间内没有被访问
存在着被压缩的和未压缩的页。为了给其他需要的数据页腾出空间，缓冲池里会把未压缩
缩的16KB的数据页来解压缩，
池里，那么会从磁盘加载进去，并且会在Innodb_Buffer_Pool缓冲池里开辟一个新的未压
来说最为有效，同样的内存可以存储更多的数据，充分地“榨干”内存利用率。
小，减少磁盘I/O，提高吞吐量，小成本地提高了CPU利用率。尤其是对读多写少的应用
页
页，而不是未压缩和压缩的页，从而为更多的页注入内存腾出空间。而当系统处于CPU瓶
在以前的版本中，
它的工作原理是：当用户获取数据时，如果压缩的页没有在Innodb_Buffer_Pool缓冲
/usr/local/bin/Sysbench--test=oltp--MysQL-table-engine=innodb--oltp-table-size=10000000--max-requests=1000
InnoDB采用最近最少使用（LRU）算法，将经常被访问的热数据放人内存里。当访问
/usr/local/bin/Sysbench--test=oltp--MySQL-table-engine=innodb--oltp-table-size=10000o00--max-requests=1000
下面针对8KB和16KB的数据页进行了一次压力测试，虚拟机内存1 GB，Buffer_
CREATETABLE'compressed’(
要设置数据页为8KB，在建表的时候加人ROW_FORMAT=COMPRESSEDKEY
注意，必须采用Barracuda文件格式且独立表空间，才支持数据页压缩，如下所示：
KEY_BLOCK_SIZE=8
ROW_FORMAT=COMPRESSED
DEFAULTCHARSET=gbk
innodb_file_per_table=1
innodb_file_format=Barracuda
ENGINE=InnoDB
'pad’char(60)NOT NULL DEFAULT",
'c'char(120)NOTNULLDEFAULT",
K'int(10)unsigned NOTNULL DEFAULT0”,
id'int（10)unsignedNOTNULLAUTO_INCREMENT,
KEYK'('k")
PRIMARYKEY('id"),
一个数据页是16KB，现在可以在建表时指定压缩的页是1KB、
为了减少磁盘1/O以及对页的解压操作，在缓冲池里同时
第1章MySQL5.5介绍●31
---
## Page 46
32·第一部分MySQL5.5新特性篇
时的性能情况。
的体积要小于16KB数据页。
要比未压缩的16KB的数据页体积小一半，也就是说，存储同样的数据，8KB数据页存储
--MySQL-db=test--oltp-table-name=compressed--MySQL-socket=/tmp/MySQL.sockrun
--num-threads=10 --MySQL-host=192.168.110.140 --MySQL-port=3306--MysQL-user=admin --MySQL-password=123456
在实验过程中，先创建了一个有100万行记录的表，经过压缩后，8KB的数据页的表
在图1-10～图1-12中，16:35～16:50为未压缩时的性能情况，16:55～17:05为压缩
用Linux命令 Ⅱl-h查看数据物理文件大小，如图 1-9 所示。
CPU Utilization
口
Connections
%
#connections
100
6
16:40
16:40
hac
p-datanod
16:45
sql
图1-10连接数和CPU情况
KernelUserWait l/OTotal
16:45
图1-9
TotalRunningCached
msql8.
数据物理文件大小
16:50
16:50
16:55
6
6
61
06
17:00
17.00
17:00
17:05
17:05
17:10
17:10
---
## Page 47
未压缩的性能要稍好于压缩过的，
从图1-10～图1-12可以看出，被请求的数据页小于InnoDB_Buffer_Pool缓冲池大小时，
Load Average
InnoDBBufferPool
Database Activity
avgstatements/sec
MB
LoadAverage
1400
1200
2000
1
0000
0
500
5
6
Total SizeUsedModifiedDictionaryinnodb_buffer_pool.series5.label
16:40
16:40
图1-11
16:40
SelectInsertUpdateReplaceDeleteCall
16:45
16:45
数据库状态和 InnoDB_Buffer_Pool情况
，因为压缩会带来额外的CPU 消耗，
16:45
16:45
图1-12CPU负载情况
1515
16:50
16:50
16
16:54
16:55
16:55
16:55
17:00
17:00
17:00
，但总体上差异不大。
17:05
17:05
17:05
第1章
MySQL5.5介绍·33
17:10
17:10
17:10
---
## Page 48
34·第一部分MySQL5.5新特性篇
时，压缩的性能要好于压缩过的，吞吐量也提高了，最为明显的是CPUWait/IO降低很多。
17:55为压缩后的8KB数据页的性能情况。
--MySQL-db=test--oltp-table-name=compressed--MySQL-socket=/tmp/MysQL.sockrun
--num-threads=10--MySQL-host=192.168.110.140--MySQL-port=3306--MySQL-user=admin--MySQL-password=123456
/usr/local/bin/Sysbench--test=oltp--MySQL-table-engine=innodb--oltp-table-size=10000000--max-requests=10000
从测试的情况来看，你可根据自身的业务情况，选择是否开启数据页压缩功能。
在图1-13～图1-15中，17:25～17:40为未压缩的16KB数据页的性能情况，17:45～
另附上大批量插入时的测试数据，以下是16KB数据页的情况：
从图1-13～图1-15中可以看出，被请求的数据页大于InnoDB_Buffer_Pool缓冲池大小
/usr/local/bin/Sysbench--test=oltp--MysQL-table-engine=innodb--oltp-table-size=10000000--max-requests=10000
下面把 Sysbench 参数调大，再进行一次压力测试：
cPU Utilization
Connections
%
#connections
b
8
6
001
9
71
17:25
17:25
17:30
17:30
Kernel UserWait 1/0Total
图1-13连接数和CPU情况
17:35
TotalRunningCached
17:35
17:40
17:40
17:45
17:45
17:50
17:55
17:55
18:00
18:00
18:05
18:05
---
## Page 49
MysQL>showcreatetabletest1\G;
Load Average
InnoDB Buffer Pocl
LoadAverage
avg statements/sec
MB
1400
2000
5
0000000
00
1800
0
Total SizeUsedModifiedDictionaryinnodb_buffer_pool.series5.label
17:25
17:25
17:25
图1-14
Select  Insert  Update Replace Delete Call]
17:30
17:30
17:30
数据库状态和InnoDB_Buffer_Pool情况
图1-15CPU负载情况
17:35
17:35
17:35
STI SIT
17:40
17:40
17:40
17:45
17:45
17:45
17:50
17:50
17:50
17:55
17:55
17:55
第1章
18:00
18:00
18:00
MySQL5.5介绍
18:05
18:05
18:05
3
---
## Page 50
36·第一部分MySQL5.5新特性篇
8KB数据页的性能要比16KB数据页的性能有所下降。
表进行批量插人操作后的情况。
14.4.3.1.Overviewof Table Compression
关于InnoDB表压缩，请参见MySQL5.5手册：
图1-16中给出的是先对8KB数据页test3表进行批量插人，然后对16 KB 数据页 testl
从上面的测试可以看到，在大批量插人的时候，
1row in set(0.79 sec)
CreateTable:CREATETABLE'test3'
MySQL>showcreate tabletest3\G;
以下是8KB数据页的情况：
CreateTable:CREATETABLE'test1'(
ENGINE=InnoDBDEFAULT CHARSET=gbkROW_FORMAT=COMPRESSEDKEY_BLOCK_SIZE=8
***************
PRIMARYKEY('id')