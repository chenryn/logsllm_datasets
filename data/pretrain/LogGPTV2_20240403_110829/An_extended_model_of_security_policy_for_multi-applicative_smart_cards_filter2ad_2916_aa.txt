# An Extended Model of Security Policy for Multi-Applicative Smart Cards

**Author:** Matthias Schwan  
**Affiliation:** Humboldt University Berlin, Department of Computer Science, Unter den Linden 6, 10099 Berlin, Germany  
**Email:** [Your Email Address]  
**Support:** This work was supported by T-Systems Enterprise Services GmbH.

## Abstract
The overall security level of applications running on a smart card is influenced not only by the specific applications and the operating system but also by external devices. Current security models for smart card operating systems assume that secure communication between the card and the outside world (e.g., card readers) is implemented by the applications themselves. To integrate external devices and applications into a mandatory security policy, we extend the SMaCOS security model, which combines the Bell/LaPadula secrecy model and the Biba integrity model. We introduce a modified execution access right and use integrity access categories to implement real-world applications. As a case study, we present a signature creation application in combination with biometric user verification.

**Keywords:** biometrics, electronic signatures, security policy, smart cards

## 1. Introduction
Several multi-applicative smart card operating systems, such as Java Card, Multos, Windows for Smart Cards (no longer supported), and BasicCard, have been developed. These systems implement varying security policies concerning the confidentiality and integrity of application data, as well as the loading of new applications onto the card. However, all proposed smart card operating systems place the responsibility for secure communication between external devices or applications on the smart card applications themselves.

Potential security issues arise when an on-card application needs to communicate with external devices. For example, a biometric identification application that stores a biometric reference template on the card and provides an on-card matching unit must obtain actual biometric data from a capture device, such as a fingerprint sensor. The overall security of this application depends not only on the quality of the matching algorithm but also on the security of the external devices. Known attacks include fooling the system with artificial fingers, necessitating robust aliveness checks and secure data transmission.

Similar security requirements apply to PIN applications and smart card terminals (readers). In the context of an electronic passport equipped with a contactless smart card, it is crucial that only authorized entities, such as border control, can use and see the biometric application. Unauthorized entities should not be able to identify the RFID smart card as an electronic passport.

We propose that the operating system should act as a firewall between applications on the card and the outside world, shifting the management of external devices and applications from the applications to the operating system. This can enhance security and reduce development costs, especially for applications seeking Common Criteria (CC) or ITSEC evaluations. The SMaCOS security model, which combines the Bell/LaPadula and Biba models, does not currently account for external devices or applications. Our extended model integrates these elements, ensuring that communication between any applications or devices—whether inside or outside the card—is fully controlled by the operating system.

## 2. Case Study: Electronic Signature Creation and Biometrics
Directive 1999/93/EC of the European Parliament and the Council defines a framework for electronic signatures to facilitate their use and legal recognition. The directive distinguishes between advanced and qualified electronic signatures, each with different requirements. An advanced electronic signature (AeSig) must be uniquely linked to the signatory, capable of identifying them, created using means under their sole control, and linked to the data in a way that detects subsequent changes. A qualified electronic signature (QeSig) is an advanced signature based on a qualified certificate created by a secure signature creation device (SSCD).

In our BioSig example, a smart card serves as both a SCD and an SSCD. The SSCD provides evaluated (pre-checked) security functionality, while the SCD provides claimed security functionality. A QeSig is legally more reliable than an AeSig. We consider a PGP key stored on the same smart card as a secret signature key corresponding to a qualified certificate. An EAL4high-evaluated external signature application (ExtSig) running on a host computer may execute the QeSig application on the smart card, but not the AeSig application. Additionally, we have an unevaluated external signature application (ExtSig*), such as a PGP signature tool.

Different authentication methods are required for QeSig and AeSig. We distinguish between a password (PWD) method, which is unevaluated, and a personal identification number (PIN) method, which is EAL4high-evaluated. The QeSig key cannot be activated with the PWD method. Two biometric systems, Bio1 (EAL4high-evaluated) and Bio2 (EAL4medium-evaluated), are also considered. After successful authentication with PIN or Bio1, up to 10 successive authentications via Bio2 are allowed. We also allow the activation of AeSig with higher-evaluated authentication applications.

All authentication applications require user interaction and depend on external devices, such as PIN pads or biometric capture devices. The performance of a biometric system is measured in terms of false rejection rate (FRR) and false acceptance rate (FAR). Other vulnerabilities, such as fooling the system with artificial fingers, must be addressed. The biometric applications on the smart card need to verify the trustworthiness of the biometric sensor, and the PIN application must ensure communication with a trusted PIN pad.

## 3. Security Requirements for Multi-Applicative Smart Cards
In the previous section, we demonstrated how different applications, developed by different providers, can work together, each with its own security requirements. The operating system must ensure that these requirements are met. The following security objectives represent the extended security policy:

- **SO1:** Only approved applications, e.g., by the card issuer, should be loadable onto the card, even when the card is in circulation.
- **SO2:** Applications stored on the card should neither be readable nor alterable by other applications.
- **SO3:** The access rights of applications cannot be altered by other applications or by the applications themselves.
- **SO4:** Applications on the card can communicate with each other only if they have the appropriate rights. This includes the execution of other applications.
- **SO5:** Applications on the card can communicate with external applications only if both have the appropriate rights. This includes the confidentiality and integrity of transmitted data.
- **SO6:** Applications on the card can communicate with external devices only if both have the appropriate rights. This includes the confidentiality and integrity of transmitted data.

## 4. The Extended Model of Security Policy
The extended security policy and its model are based on the SMaCOS security model, which defines a multi-level security system (MLS). MLS operating systems implement a reference monitor that supervises all operating system calls and checks access conditions to decide whether a command can be executed. The reference monitor controls the access rights of applications or processes to data or other resources according to the security policy.

### 4.1 The SMaCOS Security Model
The SMaCOS security model combines the Bell/LaPadula secrecy model and the Biba integrity model. Both models define partially ordered access classes (or levels) and access categories for secrecy and integrity. Each subject \( s_i \in S \) and object \( o_j \in O \) is assigned to a specific access class in a specific access category via assignment functions \( Scls \) and \( Icls \) for secrecy and integrity, respectively. Access categories are defined by the assignment functions \( Sctg \) and \( Ictg \).

For read access, the access class of the object must be less than or equal to the access class of the subject (simple security property). For write access, the access class of the subject must be less than or equal to the access class of the object (*-property or confinement property). The integrity model defines similar properties, preventing high-integrity applications from reading low-integrity data or executing low-integrity programs.

### 4.2 Integration of External Applications and Devices
To integrate external applications and devices, we introduce a modified execution access right and use integrity access categories. This ensures that communication between any applications or devices—whether inside or outside the card—is fully controlled by the operating system. The extended model allows for the secure and controlled interaction between internal and external entities, enhancing the overall security of the smart card system.

## Conclusion
By extending the SMaCOS security model to include external applications and devices, we provide a more comprehensive and secure framework for multi-applicative smart cards. This approach not only enhances the security of the system but also simplifies the development and evaluation of applications, making it easier to achieve Common Criteria (CC) or ITSEC evaluations. The case study of an electronic signature creation application with biometric user verification demonstrates the practical application of the extended model.