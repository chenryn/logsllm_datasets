title:An extended model of security policy for multi-applicative smart cards
author:Matthias Schwan
An extended model of security policy for
multi-applicative smart cards ∗
Matthias Schwan
Humboldt University Berlin
PI:EMAIL
Department of Computer Science
Unter den Linden 6
10099 Berlin, Germany
ABSTRACT
The overall security level of applications running on a smart
card is not only determined by the particular applications
and by the operating system but also by external devices.
All proposed security models of smart card operating sys-
tems assume the secure communication of applications on
the card and the outside world, e.g. card readers, to be im-
plemented by the applications themselves. In order to inte-
grate external devices and external applications in a manda-
tory security policy, we extend the SMaCOS security model,
which combines the secrecy model by Bell/LaPadula and the
integrity model by Biba. Therefore, we introduce a modi-
ﬁed execution access right and use integrity access categories
to implement real world applications. As a case study, we
give a signature creation application in combination with
biometric user veriﬁcation.
Keywords
biometrics, electronic signatures, security policy, smart cards
1.
INTRODUCTION
Currently, a few multi-applicative smart card operating
systems are developed, e.g. Java Card,1 Multos,2 Windows
for Smart Cards (no longer supported) or BasicCard.3 They
all implement very diﬀerent security policies regarding the
secrecy and the integrity of application data, as well as the
loading of new applications onto the card. All proposed
smart card operating systems place the responsibility for the
reliable communication between external devices or external
applications on the applications of the smart card.
In fact, potential security problems arise if an on-card ap-
plication needs to communicate with external devices. Let
∗work supported by T-Systems Enterprise Services GmbH
1see http://java.sun.com/products/javacard
2see http://www.multos.com
3see http://www.basiccard.com
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’07, March 20-22, 2007, Singapore.
Copyright 2007 ACM 1-59593-574-6/07/0003 ...$5.00.
us consider a biometric identiﬁcation application that stores
the biometric reference template on the card and provides
an on-card matching unit. This application needs to get
the actual biometric data of the user from a capture device,
e.g. a ﬁngerprint sensor. The overall security of the ap-
plication depends not only on the quality of the matching
algorithm. One of the most known attacks involves fooling
the system with e.g. artiﬁcial ﬁngers [13, 17]. That is why
powerful aliveness checks of the biometric capture device
are needed, as well as a secure transmission of the actual
biometric data from the sensor to the matching unit [18].
Therefore, the overall security level of the biometric identi-
ﬁcation application depends heavily on the external devices.
We can identify similar security requirements for e.g. PIN
applications.
Furthermore, we may demand those requirements even for
smart card terminals (smart card readers). To continue our
example, let us consider the biometric identiﬁcation applica-
tion in the context of an electronic passport that is equipped
with a contactless smart card, e.g. an RFID card, that holds
the biometric application as well as other applications. We
want the authorities (e.g. border control) to only be able
to use and even to see the biometric application. Thus, no-
body else shall be able to identify the RFID smart card as
an electronic passport while scanning for RFID cards.
In
other words, it is the particular smart card terminal that
activates or hides particular applications on the card.
We want the operating system to do both act as a ﬁrewall
between applications on the card as well as between applica-
tions on the card and the outside world. This is a shift of the
managing of external devices or external applications from
the applications themselves to the operating system. It may
lead not only to an increase of the security level but may
also let development costs of the applications drop because
they can take advantage of the operating system functions.
This is of special interest if the application providers strive
for an evaluation under the Common Criteria (CC) [8] or
ITSEC scheme [1], because the less the complexity of an
application, the lower is the eﬀort to achieve a successful
CC evaluation. Of course, this may require an evaluation
of the operating system and therefore a formalization and
veriﬁcation of the underlying security policy. This has been
done extensively for Multos (ITSEC E6high evaluated [6])
and partly for the JavaCard security model [3]. A further
veriﬁed security model is given by SMaCOS [9, 15], which
combines the secrecy model by Bell/LaPadula [4] and the
integrity model by Biba [5]. All security models do not take
226
external devices or external applications into account.
We use the proposed SMaCOS security model and inte-
grate external devices and external applications in a way
that they can be handled as internal applications.
In our
extended model, communication between any applications
or devices - whether they are inside or outside the card - is
fully controlled by the operating system. Moreover, in [15]
the calling of an application is not seen as security relevant.
Since we are deaply concerned with this issue, we deﬁne a
modiﬁed execute access right in the extended model. While
extending the SMaCOS model and applying the case study
given in the next section it turns out that we make use of
integrity access categories. Currently, there is no known ap-
plication of the integrity access categories. They are simply
seen as the mathematical dual of the secrecy model.
In the following sections, we will ﬁrst introduce a signiﬁ-
cant application in the context of electronic signatures and
biometrics in order to develop security requirements of a
multi-applicative smart card operating system. Then we in-
troduce the new extended model of security policy. Lastly,
we apply the mentioned case study in order to demonstrate
how to use the extended model.
2. A CASE STUDY: ELECTRONIC SIGNA-
TURE CREATION AND BIOMETRICS
In the Directive 1999/93/EC [2], the European Parliament
and the Council deﬁne a framework for electronic signatures
in order to facilitate their use and to contribute to their le-
gal recognition. The Directive distinguishes the advanced
electronic signature and the qualiﬁed electronic signature.
All kinds of signatures must fulﬁll diﬀerent requirements.
Hence, an advanced electronic signature means an electronic
signature that meets the following requirements: (a) it is
uniquely linked to the signatory; (b) it is capable of iden-
tifying the signatory; (c) it is created using means that the
signatory can maintain under his sole control, and (d) it is
linked to the data to which it relates in such a manner that
any subsequent change of the data is detectable.
Furthermore, a qualiﬁed electronic signature means an ad-
vanced electronic signature that is based on a qualiﬁed cer-
tiﬁcate created by a secure signature creation device (SSCD).
In the following section, we concentrate on advanced (AeSig)
and qualiﬁed (QeSig) electronic signatures.
As mentioned, one of the main diﬀerences between an
AeSig and a QeSig application is the use of a SSCD, which
holds the signature creation data, e.g. a cryptographic key.
The SSCD creates a signature only after the successful au-
thentication of the signatory. This can be done by a knowl-
edge based method (PIN or Password) or by biometric meth-
ods [16]. The successful evaluation of the SSCD according to
the Protection Proﬁle (PP) of SSCD’s [7] of the CC is com-
pulsory. The PP states an evaluation assurance level (EAL)
of EAL4 and a strength of function (SOF) of SOFhigh, which
also includes the authentication methods.
In addition, the combination of a knowledge based method
of strength SOFhigh and a biometric method of strength
SOFmedium is an opportunity, which means, once the signa-
ture creation data are activated with the high method, the
signature can be created after the successful authentication
of the signatory with the medium-method. The number of
such signature creations may be limited.
In the following section, we name all other non evaluated
ExtSig
QeSig
PIN
Bio2
ExtSig*
AeSig
PWD
execute clearance
Pad1
CD1
Pad2
Figure 1: Allowed execution chains in the BioSig
example
devices (according to the PP) signature creation devices SCD.
In other words, the SSCD provides evaluated (pre-checked)
security functionality whereas the SCD provides claimed se-
curity functionality. Hence, a qualiﬁed signature is legally
seen as more reliable than advanced signatures.
In our BioSig example, a smart card is considered that
serves as a SCD as well as a SSCD. One may consider a PGP
key that a user likes to store in the same smart card as
his secret signature key that corresponds to a qualiﬁed cer-
tiﬁcate. In this scenario the former application belongs to
a AeSig and the latter one belongs to a QeSig. Further-
more, an EAL4high evaluated external signature application
ExtSig running on a host computer may execute the signa-
ture creation application QeSig running on the smart card.
Our aim is to prevent high evaluated external signature ap-
plications from using not evaluated AeSig application.
In
addition, we assume a second external signature application
ExtSig* without any evaluation, e.g. a PGP signature tool.
We already mentioned the diﬀerent requirements of the
signature creation applications QeSig and AeSig concerning
authentication methods. That is why we distinguish a pass-
word authentication method PWD that is not evaluated at all
and an authentication with a personal identiﬁcation number
PIN that is EAL4high evaluated. Please note, that the QeSig
key can not be activated with the PWD method. Furthermore,
there are two more applications that implement biometric
systems Bio1 and Bio2, whereas Bio1 is also EAL4high eval-
uated while Bio2 is EAL4medium evaluated.
Application PWD activates AeSig whereas applications PIN
and Bio1 activate QeSig. Additionally, we say that after the
successful authentication of the signatory with PIN or Bio1,
the signature creation is allowed after the successful authen-
tication via Bio2 at a maximum of 10 times in succession.
We also want to allow the opportunity to activate AeSig
with the higher evaluated authentication applications.
All authentication applications need user interaction and
therefore depend on external devices, e.g. PIN pads or bio-
metric capture devices. So, the overall performance of a bio-
metric system cannot simply be expressed in terms of error
rates. This is the measuring of the performance of a biomet-
ric system in terms of false rejection rate (FRR) and false
acceptance rate (FAR), which state the rate of false rejected
users and false accepted impostors [12, 14]. Other vulnera-
bilities have to be taken into account [11]. An attacker may
simply fool the system with , e.g. artiﬁcial ﬁngers [13, 17],
or may bypass the biometric capture device at all. That is
why powerful aliveness checks of the biometric capture de-
vice are needed as well as a secure transmission of the actual
biometric data from the sensor to the veriﬁcation unit [18].
227
Thereby, the biometric applications Bio1 and Bio2 on the
smart card need to check whether the biometric sensor (cap-
ture device) meets the individual requirements of the bio-
metric system. A similar requirement must be postulated
for the PIN application because it is important that the ap-
plication communicates with a trusted PIN pad. In these
days smart card terminals with integrated PIN pads have
been developed that ensure the PIN can not be altered or
eavesdropped while transmitting. In the BioSig example we
distinguish a trusted PIN pad Pad1 and an untrusted PIN
pad Pad2, e.g. the keyboard of a PC. In Figure 1 the in-
tended execution chains in our example scenario are given.
We skipped the Bio1 application to keep the ﬁgure simple.
In conclusion, we state that the smart card must be able
to authenticate its environment in order to decide if speciﬁc
security requirements are met by the external devices. Ad-
ditionally, we do not restrict the use of the authentication
applications to the BioSig application. They should also be
available for other potential applications like access control
systems.
3. SECURITY REQUIREMENTS FOR
MULTI-APPLICATIVE SMART CARDS
In the previous section, we demonstrated in a case study
how diﬀerent applications, developed by diﬀerent providers,
may act hand-in-hand. Hereby, every single application
claims individual security requirements according to its pur-
pose. The operating system of the smart card has to ensure
that all the requirements are met. We consider the following
security requirements: data conﬁdentiality, data integrity
and application authenticity, which includes communication
security between applications.
A typical threat model considers a malicious application
that somehow gains access to data of an application that
are supposed to be conﬁdential or full of integrity. These
malicious applications can be considered on the card as well
as outside the card. Furthermore, no application should be
able to alter or delete other applications or even to load
new (malicious) applications onto the card without autho-
rization. Moreover, a malicious application may pretend to
have an identity diﬀerent from its real identity and there-
fore may execute applications and communicate with them
without such authorization. One may think on the PWD ap-
plication in the BioSig example that successfully pretends
the identity of the PIN application and therefore activates
the QeSig application. This would violate the BioSig secu-
rity policy.
We can summarize the following security objectives SO rep-
resenting the extended security policy:
SO1: Approved applications only, e.g. by the card issuer,
must be loadable onto the card even when the card is
in circulation.
SO2: The applications stored on the card should neither be
readable nor alterable by other applications.
SO3: The access rights of applications can not be altered
by other applications as well as by the applications
themselves.
SO4: Applications on the card can communicate with each
other only if they got the appropriate right. This in-
cludes the execution of other applications.
SO5: Applications on the card can communicate with appli-
cations outside the card (external applications) only
if both got the appropriate right, e.g. applications on
other cards. This includes the conﬁdentiality and in-
tegrity of the transmitted data if requested by one of
the applications as well as the execution of external
applications.
SO6: An application on the card can communicate with ex-
ternal devices only if both got the appropriate right.
This includes the conﬁdentiality and integrity of the
transmitted data if requested by the application.
In the next section we will introduce the extended model
of security policy that fulﬁlls the security objectives.
4. THE EXTENDED MODEL OF
SECURITY POLICY
The extended security policy and its model proposed here
is based on the SMaCOS security model, which deﬁnes a
multi level security system (MLS). Generally, MLS operat-
ing systems implement a reference monitor that supervises
all operating system calls (or commands) and checks the
access conditions to decide whether the command can be
executed. Hence, the reference monitor controls the access
rights of applications or processes to data or other resources
according to rules given by the security policy.
In the following, we introduce the SMaCOS security model
together with a few modiﬁcations. Next, we explain how ex-
ternal applications and external devices are integrated in the
extended model.
4.1 The SMaCOS security model
The SMaCOS security model combines the secrecy model
by Bell and LaPadula [4] (BLP) and the integrity model by
Biba [5]. Both models deﬁne partial ordered access classes
(or level) SecL, IntL and access categories SecC, IntC for
secrecy and integrity, respectively. Each subject si ∈ S and
object oj ∈ O has to be assigned to a speciﬁc access class in
a speciﬁc access category via the assignment functions Scls
and Icls for secrecy and integrity. In addition, every access
category deﬁnes its own access classes, which is given by the
assignment functions Sctg and Ictg.
If a subject wishes to gain read access to an object, the
access class of the object must be less than or equal to the
access class of the subject. This rule is called simple security
property.
It simply hinders subjects from reading higher
classiﬁed objects. The second secrecy rule is the *-property
(or conﬁnement property), which states that the access class
of the subject must be less than or equal to the access class
of the object in order to get write access to the object. In
other words a subject that is only cleared for the secrecy
access class secret in category X is not allowed to read an
object of access class top secret in category X or even to
read an object of access class secret in category Y, if we
assume top secret greater than secret.
The integrity model deﬁnes similar integrity access classes
and integrity access categories as well as the simple integrity
property and the integrity conﬁnement property. They state
that the access class of a subject must be less than or equal
to the access class of the object in order to get read access
and, vice versa, to get write access. It prevents applications
of high integrity of reading data or executing programs of
228
subjects
objects
S = {s1, . . . , sa}
O = {o1, . . . , ob}
secrecy
integrity
access category
access class, p ∈ {r, w, x}
category assignment fct
class assignment function Scls : S ∪ O → SecLS ecC
SecC = {sc1, . . . , scc}
SecL = {slsck
Sctg : SecL → SecC
{p}1, . . . , slsck
{p}d
}
IntC = {ic1, . . . , ice}