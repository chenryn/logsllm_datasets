    ``` screen
    # yum install iscsi-initiator-utils
    ```
2.  检查 initiator 名称：
    ``` screen
    # cat /etc/iscsi/initiatorname.iscsi
    InitiatorName=2006-04.com.example.foo:888
    ```
3.  如果 ACL 在 ["创建 iSCSI
    ACL"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-an-iscsi-acl_adding-an-iscsi-target "创建 iSCSI ACL"){.xref}
    中被授予自定义名称，请相应地修改
    `/etc/iscsi/initiatorname.iscsi`{.literal} 文件。
    ``` screen
    # vi /etc/iscsi/initiatorname.iscsi
    ```
4.  发现目标并使用显示的目标 IQN 登录到目标：
    ``` screen
    # iscsiadm -m discovery -t st -p 10.64.24.179
        10.64.24.179:3260,1 iqn.2006-04.example:444
    # iscsiadm -m node -T iqn.2006-04.example:444 -l
        Logging in to [iface: default, target: iqn.2006-04.example:444, portal: 10.64.24.179,3260] (multiple)
        Login to [iface: default, target: iqn.2006-04.example:444, portal: 10.64.24.179,3260] successful.
    ```
    将 [*10.64.24.179*]{.emphasis} 替换为 target-ip-address。
    如果将对应的启动器名称添加到 ACL 中，如 ["创建 iSCSI
    ACL"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-an-iscsi-acl_adding-an-iscsi-target "创建 iSCSI ACL"){.xref}
    所述，您可以使用此流程连接到同一目标的任何数量的启动器。
5.  找到 iSCSI 磁盘名称并在这个 iSCSI 磁盘中创建文件系统：
    ``` screen
    # grep "Attached SCSI" /var/log/messages
    # mkfs.ext4 /dev/disk_name
    ```
    使用 `/var/log/messages`{.literal} 文件中显示的 iSCSI 磁盘名称替换
    [*disk_name*]{.emphasis}。
6.  挂载文件系统：
    ``` screen
    # mkdir /mount/point
    # mount /dev/disk_name /mount/point
    ```
    使用分区的挂载点替换 [*/mount/point*]{.emphasis}。
7.  编辑 `/etc/fstab`{.literal} 文件以便在系统引导时自动挂载文件系统：
    ``` screen
    # vi /etc/fstab
    /dev/disk_name /mount/point ext4 _netdev 0 0
    ```
    使用 iSCSI 磁盘名称替换
    [*disk_name*]{.emphasis}，使用分区的挂载点替换
    [*/mount/point*]{.emphasis}。
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
-   `iscsiadm`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#setting-up-the-challenge-handshake-authentication-protocol-for-the-target_adding-an-iscsi-target}为目标设置 Challenge-Handshake 验证协议 {.title}
:::
`Challenge-Handshake Authentication Protocol (CHAP)`{.literal}
允许用户使用密码保护目标。发起方必须了解这个密码才能连接到目标。
::: itemizedlist
**先决条件**
-   创建 iSCSI ACL。更多信息请参阅 ["创建 iSCSI
    ACL"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-an-iscsi-acl_adding-an-iscsi-target "创建 iSCSI ACL"){.xref}。
:::
::: orderedlist
**流程**
1.  设置属性身份验证：
    ``` screen
    /iscsi/iqn.20...mple:444/tpg1> set attribute authentication=1
    Parameter authentication is now '1'.
    ```
2.  设置 `userid`{.literal} 和 `password`{.literal}：
    ``` screen
    /tpg1> set auth userid=redhat
    Parameter userid is now 'redhat'.
    /iscsi/iqn.20...689dcbb3/tpg1> set auth password=redhat_passwd
    Parameter password is now 'redhat_passwd'.
    ```
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#setting-up-the-challenge-handshake-authentication-protocol-for-the-initiator_adding-an-iscsi-target}为发起方设置 Challenge-Handshake Authentication Protocol {.title}
:::
`Challenge-Handshake Authentication Protocol (CHAP)`{.literal}
允许用户使用密码保护目标。发起方必须了解这个密码才能连接到目标。
::: itemizedlist
**先决条件**
-   创建 iSCSI initiator。更多信息请参阅 ["创建 iSCSI
    启动程序"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-an-iscsi-initiator_adding-an-iscsi-target "创建 iSCSI 启动程序"){.xref}。
-   为目标设置 `CHAP`{.literal}。更多信息请参阅 ["为目标设置
    Challenge-Handshake
    验证协议"一节](#getting-started-with-iscsi_managing-storage-devices.html#setting-up-the-challenge-handshake-authentication-protocol-for-the-target_adding-an-iscsi-target "为目标设置 Challenge-Handshake 验证协议"){.xref}。
:::
::: orderedlist
**流程**
1.  在 `iscsid.conf`{.literal} 文件中启用 CHAP 验证：
    ``` screen
    # vi /etc/iscsi/iscsid.conf
    node.session.auth.authmethod = CHAP
    ```
    默认情况下，`node.session.auth.authmethod`{.literal} 设置为
    `None`{.literal}
2.  在 `iscsid.conf`{.literal} 文件中添加目标 `username`{.literal} 和
    `password`{.literal}:
    ``` screen
    node.session.auth.username = redhat
    node.session.auth.password = redhat_passwd
    ```
3.  启动 `iscsid`{.literal} 守护进程：
    ``` screen
    # systemctl start iscsid.service
    ```
:::
::: itemizedlist
**其它资源**
-   `iscsiadm`{.literal} man page
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-iscsi_managing-storage-devices.html#monitoring-an-iscsi-session_getting-started-with-iscsi}监控 iSCSI 会话 {.title}
:::
作为系统管理员，您可以使用 `iscsiadm`{.literal} 工具监控 iSCSI 会话。
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#monitoring-an-iscsi-session-using-the-iscsiadm-utility_monitoring-an-iscsi-session}使用 iscsiadm 程序监控 iSCSI 会话 {.title}
:::
这个步骤描述了如何使用 `iscsiadm`{.literal} 监控 iscsi 会话。
默认情况下，iSCSI 服务被启动，服务会在运行 `lazily`{.literal}
命令后启动。`iscsiadm`{.literal}如果 root 没有在 iSCSI
设备中，或者没有标记为 `node.startup = automatic`{.literal}
的节点，则在执行需要 `iscsid`{.literal} 或 `iscsi`{.literal}
内核模块启动的 `iscsiadm`{.literal} 命令前，iSCSI 服务才会启动。
要强制 `iscsid`{.literal} 守护进程运行和 iSCSI 内核模块载入：
``` screen
# systemctl start iscsid.service
```
::: itemizedlist
**先决条件**
-   在客户端机器中安装 iscsi-initiator-utils:
    ``` screen
    yum install iscsi-initiator-utils
    ```
:::
::: orderedlist
**流程**
1.  查找正在运行的会话的信息：
    ``` screen
    # iscsiadm -m session -P 3
    ```
    此命令显示会话或设备状态、会话
    ID(sid)、一些协商参数，以及可通过会话访问的 SCSI 设备。
    ::: itemizedlist
    -   对于较短的输出，例如，只显示 `sid-to-node`{.literal}
        映射，请运行：
        ``` screen
        # iscsiadm -m session -P 0
                or
        # iscsiadm -m session
        tcp [2] 10.15.84.19:3260,2 iqn.1992-08.com.netapp:sn.33615311
        tcp [3] 10.15.85.19:3260,3 iqn.1992-08.com.netapp:sn.33615311
        ```
        这些命令以以下格式打印正在运行的会话列表：
        `driver [sid] target_ip:port,target_portal_group_tag proper_target_name`{.literal}
    :::
:::
::: itemizedlist
**其它资源**
-   `/usr/share/doc/iscsi-initiator-utils-version/README`{.literal}
    文件。
-   `iscsiadm`{.literal} man page。
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-iscsi_managing-storage-devices.html#removing-an-iscsi-target_getting-started-with-iscsi}删除 iSCSI 目标 {.title}
:::
作为系统管理员，您可以删除 iSCSI 目标。
::: section
::: titlepage
## []{#getting-started-with-iscsi_managing-storage-devices.html#removing-an-iscsi-object-using-targetcli-tool_removing-an-iscsi-target}使用 targetcli 工具删除 iSCSI 对象 {.title}
:::
这个步骤描述了如何使用 `targetcli`{.literal} 工具删除 iSCSI 对象。
::: orderedlist
**流程**
1.  从目标登出：
    ``` screen
    # iscsiadm -m node -T iqn.2006-04.example:444 -u
    ```
    有关如何登录到目标的详情请参考 ["创建 iSCSI
    启动程序"一节](#getting-started-with-iscsi_managing-storage-devices.html#creating-an-iscsi-initiator_adding-an-iscsi-target "创建 iSCSI 启动程序"){.xref}。
2.  删除整个目标，包括所有 ACL、LUN 和门户：
    ``` screen
    /> iscsi/ delete iqn.2006-04.com.example:444
    ```
    将 [*iqn.2006-04.com.example:444*]{.emphasis} 替换为
    target_iqn_name。
    ::: itemizedlist
    -   删除 iSCSI 后端存储：
        ``` screen
        /> backstores/backstore-type/ delete block_backend
        ```
        ::: itemizedlist
        -   使用
            `fileio`{.literal}、`block`{.literal}、`pscsi`{.literal} 或
            `ramdisk`{.literal} 替换 [*backstore-type*]{.emphasis}。
        -   [*使用您要删除的后端存储名称替换*]{.emphasis}
            [*block_backend*]{.emphasis}。
        :::
    -   要删除 iSCSI 目标的部分内容，如 ACL：
        ``` screen
        /> /iscsi/iqn-name/tpg/acls/ delete iqn.2006-04.com.example:444
        ```
    :::
3.  查看更改：
    ``` screen
    /> iscsi/ ls
    ```
:::
::: itemizedlist
**其它资源**
-   `targetcli`{.literal} man page。
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-iscsi_managing-storage-devices.html#dm-multipath-overrides-of-the-device-timeout_getting-started-with-iscsi}DM 多路径覆盖设备超时 {.title}
:::
`recovery_tmo`{.literal} `sysfs`{.literal} 选项控制特定 iSCSI
设备的超时时间。以下选项全局覆盖 `recovery_tmo`{.literal} 值：
::: itemizedlist
-   `replacement_timeout`{.literal} 配置选项会全局覆盖所有 iSCSI 设备的
    `recovery_tmo`{.literal} 值。
-   对于由 DM 多路径管理的所有 iSCSI 设备，DM 多路径中的
    `fast_io_fail_tmo`{.literal} 选项全局覆盖 `recovery_tmo`{.literal}
    值。
    DM 多路径中的 `fast_io_fail_tmo`{.literal} 选项会覆盖光纤通道设备的
    `fast_io_fail_tmo`{.literal} 选项。
:::
DM 多路径 `fast_io_fail_tmo`{.literal} 选项优先于
`replacement_timeout`{.literal}。红帽不推荐使用
`replacement_timeout`{.literal} 覆盖在由 DM 多路径管理的设备中的
`recovery_tmo`{.literal}，因为 DM 多路径总是在 `multipathd`{.literal}
服务重新加载时重置 `recovery_tmo`{.literal}。
:::
:::
[]{#using-fibre-channel-devices_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#using-fibre-channel-devices_managing-storage-devices.html#using-fibre-channel-devices_managing-storage-devices}第 8 章 使用光纤通道设备 {.title}
:::
RHEL 8 提供以下原生 Fibre Channel 驱动程序：