title:Separation virtual machine monitors
author:John P. McDermott and
Bruce E. Montrose and
Margery Li and
James Kirby and
Myong H. Kang
Separation Virtual Machine Monitors
John McDermott, Bruce Montrose, Margery Li, James Kirby, Myong Kang
Center for High-Assurance Computer Systems
Naval Research Laboratory
Washington, DC, US 20375
PI:EMAIL
ABSTRACT
Separation kernels are the strongest known form of sepa-
ration for virtual machines. We agree with NSA’s Informa-
tion Assurance Directorate that while separation kernels are
stronger than any other alternative, their construction on
modern commodity hardware is no longer justiﬁable. This
is because of orthogonal feature creep in modern platform
hardware. We introduce the separation VMM as a response
to this situation and explain how we prototyped one.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—se-
curity kernels,veriﬁcation
General Terms
Security
Keywords
virtualization, hypervisor, virtual machine monitor (VMM),
open source
1.
INTRODUCTION
Use of virtual machine monitors (VMMs, using the hard-
ware vendor’s term for what are also called hypervisors) to
share hardware between virtual machines is rapidly increas-
ing. For security, VMMs are an attractive alternative to
hardware separation. Conventional VMMs are typically de-
signed to provide secure separation of their exported virtual
machines but the strongest known separation for shared ex-
ecution environments is provided by a separation kernel [26,
22]:
the task of a separation kernel is to create an en-
vironment which is indistinguishable from that
provided by a physically distributed system:
it
must appear as if each regime is a separate, iso-
lated machine and that information can only ﬂow
This paper is authored by an employee(s) of the U.S. Government and is
in the public domain. Non-exclusive copying or redistribution is allowed,
provided that the article citation is given and the authors and agency are
clearly identiﬁed as its source.
ACSAC ’12, December 3-7, 2012, Orlando, FL
ACM 978-1-4503-1312-4/12/12
.
from one machine to another along known exter-
nal communication lines.
(Rushby used the term regime to denote the hardware ab-
straction a separation kernel provides to a VM.) The separa-
tion kernel is a concept proven by practical application. We
have a great deal of knowledge about how they can be con-
structed and used. Separation kernels are already available
as, for example, the emerging MILS platform [2, 6] and the
Green Hills Integrity R(cid:27) VMM [1]. Separation kernel soft-
ware is small and simple, so it makes a small target that can
be completely analyzed and veriﬁed mathematically.
Separation kernels represent the upper bound of practi-
cal software separation strength, but they are no longer
justiﬁable on commodity hardware. The National Secu-
rity Agency’s Information Assurance Directorate (IAD) dis-
cusses this issue in its guidance for separation kernels on
commodity workstations [31]. Their essential conclusion is
that strict separation kernels are still the strongest known
means of separation, but that there is no rationale for build-
ing strict separation kernels because of the increasing orthog-
onal feature creep of modern commodity hardware. Orthog-
onal feature creep makes commodity hardware too complex
for separation kernels. The IAD report states
Ultimately, the problem with commodity desk-
top platforms comes down to the fact that too
many developers and vendors are interdependent.
Each organization involved in the creation of a
desktop workstation has an economic interest in
adding features to distinguish their version from
the competition and often needs a particular, unique,
and potentially powerful access. This prevents a
uniﬁed strategy for security from emerging.
For commodity hardware, we need to ﬁnd and understand
the new practical upper bound for separation strength. It is
critical to understand that we are not proposing to change
the meaning of high robustness. Instead, we want to ﬁnd
a better approach to measuring, building, and using VMMs
that have the greatest robustness that is justiﬁable for com-
modity hardware.
The ﬁrst consideration would seem to be how such VMMs
might be used but actually this begs the question of what is
the practical upper bound of assurance that can be justiﬁed.
This is the goal of the Xenon project, to investigate this new
practical upper bound of assurance for modern commodity
hardware.
If we take Rushby’s separation kernel concept as an ap-
proach rather than a speciﬁc architecture, we can make sig-
419
niﬁcant progress towards ﬁnding and understanding a justi-
ﬁable upper bound. Lacking full mathematical veriﬁcation,
the alternative will not separate as robustly as a strict sep-
aration kernel. However it will provide stronger separation
than commercial/open source best practice VMMs, for mod-
ern commodity hardware.
As an approach, the separation kernel combines the fol-
lowing concepts:
• partition all computation into VMs,
• isolate the VMs to use a small number of well-understood
communication paths, and
• verify the security properties of the VMM to the high-
est level possible.
If we relax the assurance of the separation kernel from com-
plete mathematical veriﬁcation to the highest level commen-
surate with modern commodity hardware, but retain the
strict isolation concept, we get a separation VMM. A sepa-
ration VMM will
• run on modern commodity hardware,
• virtualize modern commodity operating systems,
• be smaller and simpler than a conventional VMM,
• use fewer and simpler communication paths, and
• have the highest assurance justiﬁable for its modern
commodity hardware.
2. VMM SECURITY ALTERNATIVES
There are several general approaches to increasing the
run-time security of a VMM:
• add an external run-time integrity veriﬁcation mecha-
nism,
• add an internal run-time integrity veriﬁcation mecha-
nism,
• add further self-protection mechanisms, to increase tam-
per resistance,
• reduce the size and complexity of the software, to de-
crease the number of residual security ﬂaws, or
• use formal methods to decrease the number of residual
security ﬂaws.
Various combinations of these measures are possible as well.
Research into these approaches has signiﬁcantly increased
our understanding of how VMM security can be improved.
Separation kernels represent an extreme combination of the
last 2 approaches; separation VMMs are a less extreme com-
bination of the same.
Each approach also brings with it some undesirable im-
pacts and shortcomings. Adding software of any kind typi-
cally increases space and time overhead but it also increases
the size of the code base, most probably introducing new
security ﬂaws. If we accept the motivation for adding the
software, viz. security ﬂaws in software are inevitable, then
we must accept that an addition itself has ﬂaws. None of
the reported VMM security research on adding software dis-
cusses measures taken to reduce the residual ﬂaw density of
the added software (or ﬂaws in its interaction with the exist-
ing VMM software). The added software may also increase
the attack surface of the VMM, by providing new ways to
access its run-time internals.
Integrity veriﬁcation mechanisms face additional challenges.
All veriﬁcation mechanisms face challenges of sampling rate
and coverage. In modern commodity hardware, small but
signiﬁcant parts of the security state are either diﬃcult to
capture or change too rapidly to sample in a reliable way.
It is diﬃcult to show that there is no way for an attacker to
bypass these kinds of defenses. External veriﬁcation mecha-
nisms are relatively tamper-resistant, but sample too slowly
and cannot observe all of the security state. Internal ver-
iﬁcation mechanisms are better at sampling but are also
relatively easy to tamper with.
Integrity veriﬁcation de-
fenses that are non-trivial are hard to assure. Their security
properties are complex, i.e. precise deﬁnition of all possible
attacks and how the integrity mechanism is sure not to miss
any of them.
Augmenting the existing self-protection mechanisms of a
VMM is an intuitive response to VMM security. (To save
space, we will assume that the reader is already familiar
with hardware protection mechanisms such as no-execute,
write-protect, and other paging attributes, segment regis-
ters, cache-line address space identiﬁers, and guard pages.)
Advanced Micro Device’s (AMD’s) decision to remove the
segment register protection mechanisms from the x86 64 in-
struction set architecture (ISA) may have been justiﬁed by
the fact that current operating systems were not using it,
but the security results of segment register protection in the
Multics project still apply [4, 15]. There is no characteristic
of modern operating systems that would rule out use of this
strong and eﬃcient mechanism.
This lack of proper segment registers (or alternative com-
partmentation mechanisms) in the widely-used x86 64 ISA is
a strong motivation for adding further self-protection mech-
anisms to VMMs. These added mechanisms are designed to
directly prevent tampering with code in memory, malicious
diversion of control ﬂow, and access to unauthorized address
spaces. The challenge is to design software mechanisms that
both satisfy the three reference monitor properties 1 but also
are eﬃcient. New protection mechanisms must also per-
mit typical system programming techniques such as function
pointers and self-modifying code.
Reducing the size and complexity of the software not only
decreases the number of residual security ﬂaws in a VMM,
it also strengthens its reference monitor property of veriﬁ-
ability. There are four fundamental challenges to this ap-
proach. First, as the IAD guidance concludes, modern com-
modity hardware is growing more and more complex, and
virtualization of all of this under complexity constraints is
hard. Second, modern unmodiﬁed guest operating systems
are even more complex than the hardware, but a practical
VMM must support this complexity. Third, simplicity can
introduce signiﬁcant performance penalties. It can be diﬃ-
cult to design code that is both simple and fast; especially
under the restrictions imposed by complex commodity hard-
ware and guest operating systems. Fourth, it can be diﬃ-
cult to report research results on approaches that reduce size
or complexity. Peer-reviewed venues prefer novel, powerful,
and ﬂexible security features, which tend to be large and
1completeness, isolation, and veriﬁability
420
complex rather than simple and small. To achieve signiﬁ-
cant results, approaches that reduce the size or complexity
of the VMM, for security, must run on hardware that is
arguably a commodity, e.g. x86 64 or ARM, and support
commodity operating systems such as the various forms of
Microsoft Windows, Apple OS X, or an unmodiﬁed stan-
dard Linux distribution. A signiﬁcant result for minimizing
the hypervisor must also retain all of the features needed to
support cloud computing.
Formal methods applied to small (less than 10,000 source
lines of code (SLOC)) separation kernels or embedded soft-
ware systems can raise security assurance to the highest
level. Even successful approaches have placed signiﬁcant re-
strictions on standard system programming techniques such
as the use of pointers. In addition to the veriﬁcation size
challenge per se, that is, how to verify enough code to as-
sure an actual product, formal methods approaches also face
the 4 challenges of size/complexity reduction approaches:
complex underlying hardware, support for complex guests,
performance penalties, and the lack of signiﬁcance entailed
by toy projects. We agree with the IAD guidance that math-
ematically veriﬁed separation kernels are not justiﬁable on
modern commodity hardware.
3. PROTOTYPING A SEPARATION VMM
We prototyped the separation VMM concept using the
Xen open source VMM. Our prototyping is limited to the
Xen VMM itself. The Xenon VMM will work with any of the
conventional Xen control plane tools such as xm, xl, or lib-
virt. The prototype is tested continuously against not only
Windows and various Linux distributions but also Hadoop,
Zookeeper, and Accumulo. This conﬁrms that our exten-
sive refactoring and re-design of the VMM internals has pre-
served Xenon’s support for commodity software.
It is important to understand that our separation VMM
prototype is not a security enhancement to Xen, but a sep-
arate VMM code base that does not necessarily conform
to Xen community practices. The VMM security features
that we describe here are neither recommended as changes
to Xen, because they do not conform to Xen community
goals and practices, nor, for the same reason, are they to be
viewed as criticisms of Xen’s design.
Our prototype is based on Xen 4, starting with a 4.0.1 ba-
sis but then forward porting to a Xen 4.1.2 basis (to measure
the diﬃculty of a forward port). While justiﬁable assurance
is a key question of our work, that assurance must have a
reasonable target. So the Xenon prototype not only explores
separation VMM construction but also acts as a target for
investigation of justiﬁable assurance.
Xenon’s code is not meant to be a special branch of the
Xen code base. Xenon draws from Xen’s code, for selected
new features and bug ﬁxes, but separation VMM simplic-
ity and assurance requirements rule out maintaining it as a
branch of Xen. We validated this strategy by measuring the
eﬀort needed to keep the prototype synchronized with both
the ﬁxes and the new features of Xen [21]. The eﬀort of an-
alyzing, translating, vetting (not all bug ﬁxes are applied to
Xenon ) and applying all of the Xen bug ﬁxes created during
a 6 month period was measured at approximately 100 hours
for an experienced kernel coder [21]. The eﬀort needed to
synchronize new features from one Xen branch to another
(4.0.1 to 4.1.2) was measured at approximately 200 hours.
Our changes to the Xen code have resulted in a VMM
Directory
arch
common
include
crypto
drivers
xsm
msm
Total
Xen Xenon
46520
13204
1691
1072
19256
0
269
82012
64006
15507
3558
1113
19287
6665
0
110136
Table 1: Size Reduction of Xenon VMM in Non-
comment Lines of Code. MSM is the Xenon re-
placement for XSM.
that is 26% smaller than conventional Xen, in terms of lines
of code, with worst-case complexity [36] reduced from 2,450
to 70, a 3500% decrease. We report these values as ap-
proximate percentages because they change frequently, but
downward over time. Table 1 shows speciﬁc values for Xenon
change set 341 and its base Xen 4.1.2. Some simpliﬁcations
also increase the total amount of code in the hypervisor, for
example when a complex C function is broken up into many
smaller functions.
4. SEPARATION VMM SECURITY
We wanted our separation VMM prototype’s enforcement
mechanisms to be as veriﬁable as we could make them. We
also wanted the security to be intuitive to use.
A virtual machine monitor and its guest virtual machines
constitute a virtual machine system [25]. The combined
security model for a VM system must deﬁne policies that
are both consistent and intuitive. The need for consistency
in security VM system models and policies is addressed by
Rueda et al. [25] so we will not discuss it further here. The
need for intuitiveness is less clear but no less important. In-
tuitiveness is related to safety [14]: a complex unintuitive
security model and its policies may be described in a way
that is theoretically tractable but leaves administrators of
real systems unable to easily determine whether the conﬁg-
ured policy satisﬁes their requirements. Ultimately, the pol-
icy enforced by a VMM must be easy to understand and to
construct, otherwise users will disable or work around it. A
complex resource-based policy expressed as rules about low-
level platform-speciﬁc resources will be relatively diﬃcult to
translate into the high-level service agreements needed by
cloud or SOA management. If a guest migrates to another
VM system, it may need a diﬀerent set of low-level rules on
its new host VMM, because the devices and other peripher-
als it was using on the source have diﬀerent names are not
present on the destination host. We would like to have a
policy that uses high-level rules that can be the same on