### Feeds and SUD Schema
Feeds, such as those that change or add content regularly, are a common feature of many websites. Unlike RSS subscriptions, which provide updates on news, the Student Update Data (SUD) feeds provide information about students. Figure 4 illustrates part of the SUD schema for students.

---

### The Semantic Web and its Applications

#### 2.3.2 Ontology Population
Ontology population refers to the process of extending an existing class structure in the RUD (Resource Update Data) and SUD ontologies with instance data (individuals). This can be done either by a computer or a human editor. In our case, the RUD and SUD instances are generated automatically by an instance generator. Figure 5 shows an example of a SUD instance created for the student Lee Hall.

**Figure 10-2. SUD schema represented in OWL**

**Figure 10-3. A SUD instance represented in OWL**

**Lee Hall**
- **Major:** Computer Science
- **Email:** PI:EMAIL
- **Course:** Semantic Web

---

### 2.3.3 Difficulties in Creating and Populating the Ontology
During the creation of the RUD and SUD ontologies and the generation of instances to populate these schemas, we encountered several challenges:

- **Database Complexity:** The university database has 200 tables, and there was no available documentation, making it difficult to identify and decide on relevant classes, subclasses, and properties.
- **Duplicate Values:** There were numerous duplicate values in the database, requiring significant effort to select the most appropriate ones.
- **Mapping Issues:** There was no direct mapping between OWL classes and the corresponding database tables, nor with HTML web pages.
- **OWL Expressiveness:** Utilizing OWL's special properties (e.g., transitivity, symmetry, inverse, functional, inverse functional) required increasing the complexity of the representation, which was challenging to manage.
- **Limited Examples:** The examples of OWL documents found on the internet were few and simple, not reflecting the true complexity of OWL documents.
- **Recursive Dependencies:** Classes and properties were connected in a recursive fashion, making it impossible to create all instances of a certain class without first defining others.
- **Tool Limitations:** The ontology creation tool, Protégé, had an error when translating OWL documents.
- **Jena API Issues:** The Jena API, used to programmatically manipulate OWL ontology models, did not load the models after changes.
- **Instance Generator Specificity:** The instance generator developed was specific to the RUD and SUD schema, leading to potential issues if the schema changed, as it would require modifications at the programmatic level.

---

### 2.4 Query Layer
The query layer provides an interface for querying the knowledge base formed by all the RUD and SUD ontology instances. It supports three semantic query languages: RDF Query Language (RQL), RDF Data Query Language (RDQL), Buchingae, and SPARQL. These languages allow users to query ontology classes, navigate to their subclasses, and discover resources classified under them.

Initially, we aimed to use a language that could query the native OWL representation of our knowledge base, but no suitable language existed. Using this layer, teachers can query student and university information. For example, the following RDQL query selects students with a GPA greater than 4.0:

```sql
SELECT ?x, ?c, ?z
WHERE
(?x  ?y),
(?x  ?c),
(?y  ?z)
AND ?z > 4.0
```

Another example, using Buchingae, allows a teacher to inquire about students enrolled in a specific course:

```sql
query qu is p:Studies(?st, ?course) and
p:Teaches(?prof, ?course);
```

---

### 2.5 Inference Layer
We implemented a rule management system to extract and isolate course management logic from procedural code. Since enrollment rules may change frequently, embedding them in the source code is inefficient. Detaching these rules from the source code offers several advantages:

1. **Rule Reuse:** Enrollment rules can be reused across different course management systems.
2. **Better Understanding:** Separate business rules enhance understanding.
3. **Documentation:** Rules document enrollment decisions.
4. **Lower Maintenance Costs:** Reduces application maintenance costs.
5. **Ease of Change:** Visual tools make it easier to change rules.

In S-CMS, rules are defined in SWRL or Buchingae. An example of a Buchingae rule states that only students who have taken Knowledge Engineering (CS6100) and Logic Programming (CS6550) are eligible to enroll in the Introduction to Semantic Web (CS8050) class project.

**Example Rule:**

```swrl
prefix builtin = <http://www.etri.re.kr/2003/10/bossam-builtin#>;
prefix RUD = <http://apus.uma.pt/RUD.owl#>;
namespace is <http://www.etri.re.kr/samples#>;

rulebase rb01 {
    rule R01 is
    if
        classTaken(?x, RUD:CS6100) and
        classTaken(?x, RUD:CS6550)
    then
        eligible(?x, RUD:CS8050)
}
```

Several open-source rule engines are available, including Jess, Algernon, SweetRules, and Bossam. We chose Bossam, a forward-chaining rule engine, due to its support for OWL inferencing, seamless integration with Java, and ease of use.

---

### 2.6 Application Layer
The application layer consists of two main components: the S-CMS Manager and the Dynamic Enrollment Website.

**S-CMS Manager:**
We developed an integrated class project management environment using Eclipse SDK 3.1.1. When a teacher interacts with the system, a list of courses they are teaching is displayed, retrieved from the RUD knowledge base. Teachers can create and delete class projects and manage semantic enrollment rules using a SWRL and Buchingae rule editor.

**Dynamic Enrollment Website:**
This website serves two primary functions: allowing students to enroll in projects and enabling teachers to post reports and other relevant information. Students can enroll in projects via HTTP/HTML, and the website dynamically generates web pages for each class project. Students can be added to a class project through a bulk upload from the RUD or individually by providing their SUD URL.

**Figure 10-5. General structure of the Dynamic Enrollment Web site**

**Figure 7.** Illustrates the general structure of the Dynamic Enrollment Website, which reflects the current state of the S-CMS manager. The interaction process involves:

a) Professors dynamically deploying a website for student enrollment using the S-CMS manager. The process is automatic, and an XML configuration file is uploaded to the web server.
b) The website creates dynamic web pages for student registration using PHP.
c) Students register for projects.
d) The list of registered students is downloaded to the S-CMS manager using XML.

**Report Generator:**
Once students enroll in class projects, teachers can generate reports indicating which students are allowed to participate based on the semantic enrollment rules. Reports can be generated in PDF, TXT, and HTML formats using the Formatting Objects Processor (FOP).

**Grading Ontology and Plug-In:**
The grading plug-in uses a grading ontology to enable the calculation of final grades based on user-defined evaluation items and weights. This approach adds flexibility and reusability, making it easier to adapt to different universities or schools. The reasoning capabilities of OWL and SWRL are leveraged to define and calculate grades based on complex rules.

---

This revised text aims to provide a clearer, more coherent, and professional presentation of the original content.