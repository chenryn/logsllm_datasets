feeds; these are typically sites that change or add content regularly.
Unlike RSS subscriptions, SUD do not include information about
news but about students. Figure 4 illustrates part of the SUD schema
for students.
(...)
1
10 The Semantic Web and its Applications
1
(...)
Figure 10-2. SUD schema represented in OWL
2.3.2 Ontology population
By ontology population we refer to a process, where the class
structure of the RUD and SUD ontologies already exists and is
extended with instance data (individuals). This can be done either by a
computer or by a human editor. In our case, the RUD and SUD
instances are created automatically by the instance generator. Figure 5
illustrates the SUD instance created for the student Lee Hall.
(...)
2041999
Lee Hall
Computer Science 
PI:EMAIL
Semantic Web
(...)
(...)
Figure 10-3. A SUD instance represented in OWL
Developing Course Management Systems Using Semantic Web 11
Technologies
2.3.3 Difficulties in creating and populating the ontology
During the process of creating the RUD and SUD ontology and
generating the instance to populate the ontologies schema we have
found the following difficulties:
• Since the University database has 200 tables and there was no
documentation available it was difficult to identify and decide
the relevant classes, subclasses and properties.
• There was a considerable amount of duplicate values in the
database. Selecting the most appropriate values involved also
a considerable ffort.
• There was no direct mapping between OWL classes and the
corresponding database tables. The same happen with the
HTML Web pages.
• Make use OWL expressiveness, namely with the especial
properties such as transitivity, symmetry, inverse, functional,
inverse functional.
• The examples of OWL documents that we have found in the
Internet were few and simple and did not represent the true
complexity of OWL documents.
• To take advantage of the expressive capabilities of OWL we
had to increase the complexity of representation which was
difficult to manage.
• As the classes and properties are connected in a recursive
fashion we could not simply create all instances of a certain
class because other might need to already have been defined.
• The tool that we have used to create ontologies, Protégé,
although being very intuitive in its usage had an error when
translating OWL documents.
• The Jena API (Jena 2005), used to programmatically
manipulate OWL ontology models, did not load the models
after a change.
• The generator of instances developed was not generic. It
specific to this particular RUD and SUD schema, this brings
some disadvantages in further enhancements because any
change in the schema can led to modification at the
programmatic level.
12 The Semantic Web and its Applications
2.4 Query layer
The query layer provides a query interface to the knowledge-base
formed with all the RUD and SUD ontology instances automatically
generated. The query interface understands three distinct semantic
query languages: RQL (RDF Query Language), RDQL (RDF Data
Query Language), Buchingae, SPARQL. These languages allow
querying ontology classes, navigating to its subclasses, and
discovering the resources which are directly classified under them.
Our initial objective was to make available to users a language that
would enable us to query the native representation of our knowledge-
base, i.e. OWL, but no suitable query language of this type exists yet.
Using this layer, teachers are able to query student and university
information. For example, the following query expressed in RDQL
allows selecting the students that have a GPA greater than 4.0 marks.
SELECT ?x,?c,?z
WHERE
(?x  ?y),
(?x  ?c),
(?y  ?z)
AND ?z>4.0
As another example, the following query expressed in Buchingae
allows a teacher to inquire about the students that are enrolled in a
specific course,
query qu is p:Studies(?st, ?course) and
p:Teaches(?prof, ?course);
2.5 Inference layer
We have implemented a rule management system to extract and
isolate course management logic from procedural code. Since the rules
associated with the enrollment of students for class projects may
change quite often, these changes cannot be handled efficiently by
representing rules embedded in the source code of the application
logic. The option to detach enrolment rules from the source code gives
teachers an effective way of creating the rule base and of building and
changing rules. The following list considers some advantages of
separating enrolment rules from the application logic:
1. Student enrolment rule reuse across other course management
systems.
Developing Course Management Systems Using Semantic Web 13
Technologies
2. A better understanding of enrolment rules through separate business
rules.
3. Documentation of enrolment decisions through rules.
4. Lower application maintenance costs.
5. Ease of changing enrolment rules by using visual tools.
In S-CMS, the rules are defined in SWRL (Semantic Web Rule
Language) or Buchingae. They correspond to axioms about classes
(concept) or their properties of the instance stored in the OWL
knowledge-base. By applying these rules to the set of facts it is
possible to infer new facts.
SWRL was designed to be the rule language of the semantic Web
enabling rule interoperation on the Web. SWRL is based on a
combination of the OWL DL and OWL Lite. It provides the ability to
write Horn-like rules expressed in terms of OWL for reasoning about
OWL individuals.
Since SWRL rules are fairly well-known, we give an example of a
Buchingae rule. The rule states that only students that have taken the
course Knowledge Engineering (CS6100) and Logic Programming
(CS6550) are eligible to enroll for a the class project of the course
Introduction to Semantic Web (CS8050),
prefix builtin =
http://www.etri.re.kr/2003/10/bossam-
builtin#;
prefix RUD = http://apus.uma.pt/RUD.owl#;
namespace is http://www.etri.re.kr/samples#;
rulebase rb01
{
(...)
rule R01 is
if
classTaken(?x, RUD:CS6100) and
classTaken(?x, RUD:CS6550)
then
eligible(?x, RUD:CS8050)
}
A large number of rule engines are available as open source
software. Some of the most popular engines include Jess, Algernon,
SweetRules, and Bossam. We chose Bossam (Bossom 2005), a
forward-chaining rule engine, as the first rule engine candidate for our
semantic course management system since it supports OWL
inferencing, it works seamlessly with Java, is well documented, and is
very easy to use and configure.
14 The Semantic Web and its Applications
2.6 Application layer
The application layer is composed of two applications: the S-CMS
manager and the dynamic enrolment Web site.
S-CMS Manager. We have developed an integrated class project
management environment using Eclipse SDK 3.1.1 (Eclipse 2005).
Eclipse is an open source framework focused on providing an
extensible development platform and application frameworks for
building software.
When a teacher interacts with the system, a list of all the courses
that he is currently teaching is displayed. This information is retrieved
from the RUD knowledge-base. The teacher is then able to create and
delete class projects associated with a given course. Figure 6 shows
the main screen of the S-CMS application.
Figure 10-4. Strawberry main application
For each class project created, the teacher is responsible for
creating and managing the semantic enrolment rules. The integrated
class project management environment has a SWRL and Buchingae
rule editor available for this purpose. Semantic enrolment rules can be
defined for specific projects (project enrolment rules), for a specific
Developing Course Management Systems Using Semantic Web 15
Technologies
course (course enrolment rules), or for all the projects independently
of the course (global enrolment rules). As explained previously, a
teacher can define a project enrolment rule for the project Merging
Ontologies Semi-Automatically of the course Semantic Web
(CS8050) which states that only students that have taken the
Knowledge Engineering course (CS6100) and Logic Programming
(CS6550) can enrol.
Dynamic Enrolment Web site. The Enrolment Web site is one of the
interfaces for the Strawberry project. It has two main functions. First,
it allows for students to enroll into projects proposed by their lecturers
and second, it allows the teacher to post reports and other relevant
information so that students can easily access it, better enabling the
communication process between teachers and students.
A student can enroll in a class project using the S-CMS as a single
portal via HTTP/HTML. The S-CMS provides an overview Web page
for each class project in which the student can enroll. The Web pages
are automatically generated from the S-CMS manager.
Students can be added to a class project either by a bulk upload
from the information stored in the RUD, or individually. In the latter
case, the student has to indicate the URL of its SUD. The SUD will be
read by the S-CMS and matched against a student instance in the
RUD. All the information of a student relevant to enrolling for a class
project will be retrieved automatically from the RUD. If a student may
decide to drop out of a class project he only needs to resend his SUD
to the system indicating that he wishes to drop out of a given project.
Figure 10-5. General structure of the Dynamic Enrollment Web site
16 The Semantic Web and its Applications
Figure 7 illustrates the general structure of the Dynamic
Enrollment Web site. The Web site reflects the current state of the S-
CMS manager. The interaction with the S-CMS manager is the
following:
a) Using the S-CMS manager, professors can dynamically deploy a
Web site for students’ enrollment. Professors do not have do deal
with Web pages in any way, all the process is automatic. When a
professor selects the deploy option, an HTTP connection is
established with the Web server and an XML configuration file is
uploaded. This file contains a listing of all the courses and project
that should be shown in the Web site. Each course has an id, a
name, a lecturer and a set of projects. Each project has an id, a
name, a description, a last update date and a color.
b) The Web site automatically and dynamically creates a set of Web
pages to enable students to register for projects. The module that
carry out these tasks was build in PHP because it does not require
any other software other than a simple HTTP Server with PHP, it
allows to create pages physically dynamically, and made possible
the use of XML to exchange data with the S-CMS manager.
c) Students register for projects
d) The list of students that have registered for a particular project is
downloaded to the S-CMS manager using XML.
Report Generator. Once students have enrolled for class projects, it
is helpful for teachers to have a tool to automatically generate a report
indicating which students are in fact allowed to be part of a class
project for which they want to enroll. Not all the students that send
their SUD to enroll in a class project can indeed carry out the project.
The decision that determines if a student can actually carry out a
specific project is based on the semantic enrolment rules.
At the presentation layer, the teacher is able to generate enrolment
reports that indicate which students are allowed to carry out a project
and which are not. We support several formats for the reports. We use
the Formatting Objects Processor (FOP 2005) to convert the results
from applying enrolment rules to PDF, TXT, and HTML. The
Formatting Objects Processor (FOP) is an open source Java API that
can convert XML data into reports in PDF format, as well as other
relevant formats such as TXT, SVG, AWT, MIF, and PS.
The Grading Ontology and its Plug-In. The grading plug-in is a
feature of the Strawberry project on which a grading Ontology is used
to enable grading of the students that attend a course. The plug-in
Developing Course Management Systems Using Semantic Web 17
Technologies
enables the user to define a grading policy on which the final grade
will be calculated. It allows teachers to create new evaluation items
such as exams and calculate students’ final grades based on user
defined evaluation items weights. The use of ontologies in modelling
a grading domain certainly adds a new degree of flexibility and reuse.
The way the ontology can be plugged with exiting ones makes it
easier to migrate it to adapt to different Universities or Schools.
Any teacher has its own way to grade students. Different forms of
evaluation exist even within one course. This implies that an
automatic tool which calculates the grades is difficult to make,
because there is no single way to calculate the final grade. For
example, if a student does not make assignment nº1 than the final
grade will be the grade of the exam, otherwise the final grade will de
60% of the exam and 40% of assignment nº1. A vast number of
formulas for calculating grade can be applied. Generally rules are in
the form of “if … then ... else …”.
To tackle this problem, a semantic Web approach is a reasonable
approach. The versatility of domain modeling and the reuse of
existing domains (such as one describing a university) could make it
easy to integrate a generalist grading ontology that could be easily link
with existing ones describing a school.
The most interesting aspect of using the semantic Web is using its
reasoning capabilities on which a grading model could be defined
using rules that could be used to calculate final grade.
Reasoning support in OWL with SWRL is very flexible and would
solve the problem of representing and calculating grades. However,