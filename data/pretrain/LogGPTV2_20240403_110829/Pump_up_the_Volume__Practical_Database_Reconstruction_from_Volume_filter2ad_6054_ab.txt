will therefore be to identify the volumes of these elementary ranges among the set of all volumes.
Our approach stems from the following observation: every range [x, y] can be expressed either as
[1, y] (if x = 1) or as [1, y] \ [1, x − 1] (if x > 1). In other words, every range is either an elementary
range, or can be expressed as the set diﬀerence of two elementary ranges. From the point of view of
volumes, this means that every volume is either the volume of an elementary range (an elementary
volume), or the diﬀerence of the volumes of two elementary ranges. Conversely, the set diﬀerence of two
elementary ranges is a range, and so the diﬀerence (in absolute value) of the volumes of two elementary
ranges is itself an observed volume. Elementary ranges are also R-complemented. That is, if R is the
total number of records and v is the volume of an elementary range, then R− v must also be the volume
of a range. This holds because the complement of an elementary range is also a range. Note that the
range [1, N ] of maximum volume R may not be R-complemented; however by convention and to avoid
special cases later on, we shall adapt the deﬁnition of “R-complemented” to say that it is.
In summary, the volumes of elementary ranges have the following strong properties among the set
of all volumes:
1. Every volume occurs as either the volume of an elementary range, or the diﬀerence of the volumes
of two elementary ranges.
2. Conversely, the diﬀerence (in absolute value) of the volumes of any two elementary ranges is a
volume.
3. If v < R is the volume of an elementary range, then R − v is also a volume.
In fact, if we include 0 as the volume of an elementary range (whether 0 was an observed volume or
6
not), these properties imply that the set of pairwise diﬀerences of the volumes of elementary ranges is
exactly the set of all volumes.
Remark. All three conditions above are necessary for an N -subset of all observed volumes to be the
set of elementary volumes. But a form of converse holds: if a set of N volumes, viewed as a candidate
set of elementary volumes, satisﬁes all three properties, then it is straightforward to check that the set
of database counts it induces generates exactly the set of all observed volumes. In other words, a set
of N volumes is a valid solution to our problem (in the sense that it is compatible with the observed
leakage) iﬀ it satisﬁes all three properties; the three properties characterize the set of valid solutions.
Building a graph.
In order to exploit the previous three properties of elementary ranges, we build
a graph as follows. The nodes (a.k.a. vertices) of the graph are the R-complemented volumes. Two
nodes are connected by an edge iﬀ their absolute diﬀerence is also a volume; we label the edge by
that diﬀerence. Property (3) implies that elementary volumes must appear as nodes in the graph.
Property (1) implies that every volume must occur as a node or an edge in the subgraph induced by the
elementary volumes. Property (2) means that every pair of elementary volumes must share an edge:
that is, the elementary volumes form a clique in the graph. In light of the remark above, if we include
0 in the set of elementary volumes, a valid solution is exactly an (N + 1)-clique (including the dummy
node 0) whose edges contain all volumes.
Algorithm overview. One natural approach is to build the graph and run a clique-ﬁnding algo-
rithm to identify elementary volumes. Empirically, this approach suﬃces in some cases but has three
drawbacks. First, in many real-world datasets the edge density of the graph is high and clique-ﬁnding
does not terminate in a reasonable time frame (recall that the clique decision problem is NP-complete).
Second, in some cases, the solution clique is not maximal, and clique-ﬁnding would not suﬃce. Third,
this approach does not use Property (1). For these reasons, our algorithm uses generic clique-ﬁnding
only as a last resort.
Instead, we run a graph pre-processing phase, which exploits both properties 1 and 2 to simultane-
ously identify nodes that must be elementary volumes, named necessary nodes; and prune nodes that
cannot be elementary volumes, to progressively reduce a set of candidate nodes. This step is iterated
until the sets of necessary and candidate nodes stabilize. Our experiments show that in many cases,
this pre-processing step suﬃces to identify the set of elementary volumes. However, in the cases that it
does not suﬃce, we then run a clique-ﬁnding step that seeks to extend the set of necessary nodes into
a clique within the subset of candidate nodes while satisfying properties 1 and 2.
We now explain the steps of our algorithm in detail.
3.1 Reconstruction Algorithm
The idea of our algorithm is to use the properties of elementary ranges to identify their volumes among
the set of all volumes. As explained earlier, this information is then enough to reconstruct database
counts up to reﬂection (cf. Section 2). The main constraint of our algorithm is that it requires the set
of all volumes. In the context of an adversary observing volume leakage, this means that (in general)
every range query must have been issued at least once.
Step 1: Obtaining the set of query volumes. The ﬁrst step of the algorithm is to collect all
volumes. Let V be the set of all observed volumes. We can bound the number of possible distinct
volumes. If the data is dense (i.e., each of the N values occurs at least once), then N ≤ |V | ≤ N (N +1)/2,
the upper bound being the number of ranges. If the data is sparse (iﬀ the volume 0 appears in V ),
then the number of values N(cid:48) < N that appear in the database (with non-zero counts) must satisfy
|V | ≤ N(cid:48)(N(cid:48) + 1)/2 + 1, and therefore is at least Nmin
= −0.5 + 0.5 ·(cid:112)
1 + 8 · (|V | − 1).
def
7
Aside. Note that N nodes are not always necessary to generate all observed volumes V . Consider
N = 5 with all elements having counts of 2, so V = {2, 4, 6, 8, 10}. Then the triangle with nodes 2, 6,
10 (and edges 4, 4, 8) generates all observed volumes, yet it has 3 < N nodes.
The query complexity of this step depends on the query distribution. No constraint on the query
distribution is required, other than every query should occur with non-zero probability. The adversary
does not need to know the query distribution. In principle, the adversary could even try to run the
attack and see whether it succeeds to determine whether all volumes have been observed yet. If a query
distribution is assumed, one can give bounds on the number of queries necessary before all volumes
have been collected with high probability. This is discussed further in Section 3.2.
Step 2: Graph pre-processing. Given the set V of all possible query volumes, we form an initial
set of candidate elementary volumes, Vcand. First, if 0 appeared in V (iﬀ the data was not dense), then
we remove it entirely from V for simplicity. Let Vcand be the set containing R and all volumes that have
an R-complement:
def
= {R} ∪ {v ∈ V : R − v ∈ V } \ {0}.
Vcand
This set will contain R, pairs of volumes, and maybe the singleton volume R/2 if R is even and this
volume was observed. This is the initial set of nodes. It must contain the volumes of the elementary
ranges [1, 1] through [1, N − 1] because of their complementary ranges [2, N ] through [N, N ]. It must
also contain the elementary volume R for range [1, N ].
We place an edge between two node candidates iﬀ their absolute diﬀerence is an observed volume:
the set of edges E is deﬁned as
def
= {(v, v
(cid:48)
) ∈ Vcand × Vcand :
E
(cid:12)(cid:12)v − v
(cid:48)(cid:12)(cid:12) ∈ V }.
Form the graph G = (Vcand, E) with node set Vcand and edge set E. In Appendix C, we present an
analytical model to estimate the number of vertices and edges in the graph.
In this pre-processing step, we prune the set of nodes Vcand and identify a set of nodes Vnec ⊆ Vcand
that must be in the clique. We present an example of graph-preprocessing in Figure 1. Subﬁgure (a)
shows the initial graph – for the moment, ignore its distinguished nodes.
Let vmin be the smallest R-complemented volume. It must be an elementary volume, up to reﬂection.
Indeed the largest volume strictly smaller than R can only be the volume of [1, N − 1] or [2, N ], since
every other range strictly within [1, N ] is included in one of those two ranges. It follows that the smallest
R-complemented volume is either the volume of [1, 1] or the volume of [N, N ]. Since we can reconstruct
the database only up to reﬂection (cf. Section 2), we break the reﬂection symmetry by assuming that
it is the volume of [1, 1] – which is correct up to reﬂection. In this respect, note that by the reﬂection
symmetry, in addition to the N -clique induced by the volumes of queries [1, 1], [1, 2], . . . , [1, N ], the graph
will contain another N -clique generated by the volumes of the queries [N, N ], [N − 1, N ], . . . , [1, N ];
reconstruction up to reﬂection is equivalent to recovering one of these two solutions.
Therefore, we initialize the set of necessary nodes Vnec to contain vmin and R. These two nodes are
highlighted in subﬁgure (a) in the example in Figure 1.
Next, we repeatedly perform the two following steps until they do not yield changes in the sets Vcand
and Vnec: (1) eliminate node candidates that are not adjacent to all necessary nodes, and (2) identify
necessary nodes based on volumes that arise only as one node candidate or edges incident to it.
Below, we brieﬂy describe these two steps.
If any node in Vcand \ Vnec is not adjacent to all nodes in Vnec, then
Eliminating candidate nodes:
it cannot be an elementary volume, so remove it from Vcand. In the example in Figure 1, we see in
subﬁgure (b) that three nodes have been removed in this way.
8
2
27
3
2
27
2
27
2
27
25
24
23
25
24
4
5
8
4
5
25
24
4
5
24
4
22
19
22
19
22
19
19
(a) The largest observed
volume is R=27, so we
initialize Vcand
to the
set of R-complemented
volumes
to
and Vnec
{vmin, R}={2, 27}.
(b) Eliminate candidate
volumes 3, 8, and 23
since they are not ad-
jacent to both nodes in
Vnec.
(c) 4 and 19 are neces-
sary since 15 arises only
as their diﬀerence.
24
is necessary since it does
not arise as a diﬀerence of
candidate volumes, only
as a candidate volume it-
self.
(d) The number of nec-
essary volumes
is N ,
so pre-processing suc-
ceeded. These elemen-
tary volumes correspond
to element counts 2, 2,
15, 5, 3 (or 3, 5, 15, 2,
2).
Figure 1: An example of pre-processing for a database with N = 5 distinct elements having counts 3, 5, 15, 2, and
2. The set of all possible range query volumes is {2, 3, 4, 5, 8, 15, 17, 19, 20, 22, 23, 24, 25, 27}. Nodes corresponding
to necessary elementary volumes have thicker borders and red shading.
Identifying necessary nodes: There are three ways to extend the set of necessary nodes. First, if
the set of node candidates is as small as it can be (Nmin if the data is sparse, or N otherwise), then
all candidate nodes must be necessary (Vcand = Vnec). Second, if any non-complemented volume arises
only as edges incident to a single non-necessary node candidate, then this node must correspond to an
elementary volume and is therefore added to Vnec. In the example in Figure 1, we see in subﬁgure (c)
that nodes 4 and 19 have been added to the set of necessary nodes because non-complemented volume
15 arises only as an edge between them. Finally, if any non-necessary node candidate arises only as
itself or as edges incident to itself, then it must correspond to an elementary volume and is added to
Vnec. We see in subﬁgure (c) that node 24 was added to the set of necessary nodes for this reason. The
example ﬁnishes in subﬁgure (d) when all remaining non-necessary candidate nodes are removed since
they are not adjacent to all of the necessary nodes.
In Appendix F we prove a straightforward lemma that shows this procedure is correct: it does not
eliminate any elementary volumes from the set of node candidates, and all necessary nodes correspond
to elementary volumes.
Pseudo-code for Step 2 is given in Algorithm 1. The main Get Elem Volumes procedure uses a
few subroutines. Gen All Volumes checks whether a subset of nodes generates all volumes in a given
set (and perhaps other volumes). Gen Exact Volumes additionally checks that only the volumes in
the given set are generated. Min Subcliques takes a clique Vk that generates all volumes of a given set
Vall and ﬁnds the minimal subclique(s) of Vk that generate exactly the volumes in Vall. Here, “minimal”
refers to no strict subset of them generating all volumes in Vall.
Step 3: Clique-ﬁnding. At this point, we have two sets of volumes, Vnec and Vcand, satisfying
Vnec ⊆ Velem ⊆ Vcand, and we know a lower bound, Nmin, on the size of the clique formed by Velem. As
we will see when we present our experimental results, when the data is dense, the pre-processing in Step
2 often found a clique that generated all volumes in V (i.e., the sets it found satisﬁed Vnec = Vcand).
This is the case in the example of Figure 1. When that is not the case, however, we must ﬁnd a clique
of size at least Nmin in the graph induced by Vcand that generates exactly all volumes in V . There may
be multiple such cliques. Although the clique of the elementary volumes Velem must be a subclique of
a maximal clique, it is not necessarily a subclique of a maximum clique (the largest maximal clique).
9
Algorithm 1 Graph pre-processing: ﬁnding a smaller subgraph.
1: procedure Graph Preprocessing(N , V )
2:
3:
4:
R ← max{V }
if 0 ∈ V then
Nmin ←(cid:108)−0.5 + 0.5 ·(cid:112)1 + 8 · |V |(cid:109)
V ← V \ {0}
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
Nmin ← N
else
Vcomp ← {v ∈ V : R − v ∈ V } ∪ {R}
Vcomp ← V \ Vcomp
vmin ← min{Vcomp}
Vnec ← {vmin, R}
Vcand ← Vcomp
all processed ← FALSE
while not all processed do
Vnec ← V ∗
Vcand ← V ∗
nec
cand
return Vcand, Vnec
nec ← Augment NEC(Vcand, Vnec, Vcomp, Nmin)
V ∗
cand ← Reduce CAND(Vcand, V ∗
V ∗
if V ∗
nec = Vnec then