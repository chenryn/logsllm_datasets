### Lua 基础库介绍

Lua 的基础库提供了核心函数，如果你不将这个库包含在你的程序中，就需要自己实现其中的一些功能。

#### `assert`
```lua
assert(v [, message])
```
- **功能**：如果参数 `v` 为 `nil` 或 `false`，则调用 `error` 函数；否则返回所有参数。
- **错误处理**：在错误情况下，`message` 作为错误对象。如果没有提供该参数，默认为 "assertion failed!"。

#### `collectgarbage`
```lua
collectgarbage([opt [, arg]])
```
- **功能**：垃圾收集器的通用接口。通过参数 `opt` 提供不同的功能：
  - `"collect"`: 进行一次完整的垃圾收集循环（默认选项）。
  - `"stop"`: 停止垃圾收集器运行。
  - `"restart"`: 重启垃圾收集器自动运行。
  - `"count"`: 返回 Lua 使用的总内存数（以 K 字节为单位）。
  - `"step"`: 单步运行垃圾收集器，步长由 `arg` 控制。
  - `"setpause"`: 设置垃圾收集器的间歇率，返回前一个值。
  - `"setstepmul"`: 设置垃圾收集器的步进倍率，返回前一个值。
  - `"isrunning"`: 返回表示收集器是否在工作的布尔值。

#### `dofile`
```lua
dofile([filename])
```
- **功能**：打开并执行文件中的 Lua 代码块。如果不带参数，执行标准输入的内容。
- **返回值**：返回代码块的所有返回值。对于错误情况，`dofile` 将错误反馈给调用者。

#### `error`
```lua
error(message [, level])
```
- **功能**：中止上一次保护函数调用，返回错误对象 `message`。
- **参数**：
  - `level` 指定如何获取出错位置信息。默认值为 1，表示 `error` 调用的位置。
  - 传入 `level` 为 0 可避免添加出错位置信息。

#### `_G`
- **功能**：全局变量，存储全局环境。Lua 不使用这个变量，改变其值不会影响任何环境。

#### `getmetatable`
```lua
getmetatable(object)
```
- **功能**：返回对象的元表。如果对象没有元表，返回 `nil`。如果元表中有 `__metatable` 域，返回其关联值。

#### `ipairs`
```lua
ipairs(t)
```
- **功能**：返回三个值（迭代函数、表 `t` 和 0），用于遍历表 `t` 中的键值对 (1, t[1]), (2, t[2]), ...，直到第一个空值。

#### `load`
```lua
load(chunk [, chunkname [, mode [, env]]])
```
- **功能**：加载一个代码块并返回编译好的函数。
- **参数**：
  - `chunk` 是字符串或函数，提供代码块内容。
  - `chunkname` 用于错误和调试消息，默认为 "chunk"。
  - `mode` 控制代码块是文本还是二进制，默认为 "bt"。
  - `env` 设置结果函数的第一个上值，默认为全局环境。

#### `loadfile`
```lua
loadfile([filename [, mode [, env]]])
```
- **功能**：从文件或标准输入加载代码块，类似于 `load`。

#### `next`
```lua
next(table [, index])
```
- **功能**：返回表中下一个键及其关联值。如果 `index` 为 `nil`，返回初始键及其关联值。
- **注意**：索引次序无定义，修改表中的非现有域会导致未定义行为。

#### `pairs`
```lua
pairs(t)
```
- **功能**：返回三个值（`next` 函数、表 `t` 和 `nil`），用于遍历表 `t` 中的所有键值对。

#### `pcall`
```lua
pcall(f [, arg1, ...])
```
- **功能**：以保护模式调用函数 `f`，捕获并返回错误信息。
- **返回值**：状态码（布尔量）和所有调用的结果。有错误时返回 `false` 和错误消息。

#### `print`
```lua
print(...)
```
- **功能**：接收任意数量的参数，并将其转换为字符串后打印到标准输出。

#### `rawequal`
```lua
rawequal(v1, v2)
```
- **功能**：检查 `v1` 是否等于 `v2`，不触发任何元方法。

#### `rawget`
```lua
rawget(table, index)
```
- **功能**：获取 `table[index]` 的值，不触发任何元方法。

#### `rawlen`
```lua
rawlen(v)
```
- **功能**：返回对象 `v` 的长度，不触发任何元方法。

#### `rawset`
```lua
rawset(table, index, value)
```
- **功能**：设置 `table[index]` 为 `value`，不触发任何元方法。

#### `select`
```lua
select(index, ...)
```
- **功能**：返回第 `index` 个参数之后的部分。如果 `index` 为 `"#"`，返回参数的个数。

#### `setmetatable`
```lua
setmetatable(table, metatable)
```
- **功能**：设置表的元表。如果 `metatable` 为 `nil`，移除元表。如果原元表有 `__metatable` 域，抛出错误。

#### `tonumber`
```lua
tonumber(e [, base])
```
- **功能**：将参数转换为数字。如果提供 `base`，`e` 必须是该进制下的整数字符串。

#### `tostring`
```lua
tostring(v)
```
- **功能**：将任何类型转换为可读的字符串形式。如果 `v` 有 `__tostring` 元方法，调用它并返回结果。

#### `type`
```lua
type(v)
```
- **功能**：返回参数的类型编码为字符串。

#### `_VERSION`
- **功能**：包含当前解释器版本号的全局变量。

#### `xpcall`
```lua
xpcall(f, msgh [, arg1, ...])
```
- **功能**：类似 `pcall`，但可以设置额外的消息处理器 `msgh`。

## 协程管理

协程操作被放在独立表 `coroutine` 中。

#### `coroutine.create`
```lua
coroutine.create(f)
```
- **功能**：创建一个主体函数为 `f` 的新协程，返回类型为 "thread" 的对象。

#### `coroutine.isyieldable`
```lua
coroutine.isyieldable()
```
- **功能**：如果当前协程可以让出，则返回 `true`。

#### `coroutine.resume`
```lua
coroutine.resume(co [, val1, ...])
```
- **功能**：开始或继续协程 `co` 的运行。返回 `true` 加上传给 `yield` 的所有值，或主体函数的所有返回值。如果有错误，返回 `false` 和错误消息。

#### `coroutine.running`
```lua
coroutine.running()
```
- **功能**：返回当前正在运行的协程和一个布尔量。如果是主线程，布尔量为 `true`。

#### `coroutine.status`
```lua
coroutine.status(co)
```
- **功能**：返回协程 `co` 的状态，可能的值为 "running", "suspended", "normal", "dead"。

#### `coroutine.wrap`
```lua
coroutine.wrap(f)
```
- **功能**：创建一个主体函数为 `f` 的新协程，返回一个函数，每次调用都会延续该协程。

#### `coroutine.yield`
```lua
coroutine.yield(...)
```
- **功能**：挂起当前协程的执行，传递给 `yield` 的参数会转为 `resume` 的额外返回值。