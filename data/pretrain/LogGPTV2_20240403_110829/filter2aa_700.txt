### IceRiver高版本Q.V简单说明

#### 前言
本文将介绍一些IceRiver高版本中的功能使用方法，特别是Self Inject模式的详细说明。

#### Self Inject模式
从CS 4.6版本开始，官方对ts和client端进行了代码分离，并且ts端采用了Java to Native技术进行编译。因此，后续版本中对ts端的修改变得较为困难。目前，二次开发主要集中在client端。IceRiver未来的计划包括：保持CS的稳定性、规避内存和行为查杀、添加实用性插件以及结合其他开源项目以更高效地应用于实战。

#### 功能使用介绍

##### Self Inject模式
该插件自4.4版本的IceRiver就已经存在，在4.7版本中其实现方式有所变动，但用户侧的使用方法保持不变。默认情况下，beacon的inject配置显示为"default"。此时执行一些后渗透模块（如screenshot）时，将采用spawn模式，即在beacon侧采用fork & inject & resume的方式，注入傀儡进程执行RDI。

由于注入傀儡进程的操作过于敏感，已被各大杀软加入行为黑名单。为了在不修改beacon端代码的前提下绕过行为查杀，可以通过修改client发送到ts端的指令（由spawn改成inject）来实现。

1. **启用Self Inject模式**
   - 选择一条session，右键点击IceRiver子菜单中的“SelfInject”选项。
   - 界面上的inject显示将从"default"变为"less"。
   - 再次使用screenshot模块时，可以看到模式已从spawn改为注入到beacon所在进程的模式。

2. **禁用Self Inject模式**
   - 点击“DisableSelfInject”模式。
   - 注入模式将再次回到"default"。
   - 再次使用screenshot验证beacon行为，可以看到它回到了默认的spawn模式。

3. **SelfInjectFull插件**
   - 计划支持第三方自定义native dll和.NET assembly注入到beacon自身。
   - 目前该功能还在实现和测试验证阶段。

通过上述步骤，您可以灵活地切换不同的注入模式，以适应不同的安全环境和需求。希望这些说明能够帮助您更好地理解和使用IceRiver的Self Inject功能。