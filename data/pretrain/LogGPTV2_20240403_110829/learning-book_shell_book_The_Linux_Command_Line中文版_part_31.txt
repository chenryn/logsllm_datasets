dirlist-bin.txt
相反地，如果我们只想查看不包含匹配项的文件列表，我们可以这样操作：
xx**4st[xrp dtzq 7dox s[-xoqxnutgou]
dirlist-sbin.txt
dirlist-usr-bin.txt
dirlist-usr-sbin.txt
20.2元字符和原义字符（Metacharacters AndLiterals)
它可能看起来不明显，但是我们的grep程序一直使用了正则表达式，虽然是非常简单的例子。
这个正则表达式“bzip”意味着，匹配项所在行至少包含4个字符，并且按照字符“b”、“z”、"”
都是原义字符，因此它们匹配本身。除了原义字符之外，正则表达式他可能包含元字符，其被
用来指定更复杂的匹配项。正则表达式元字符由以下字符组成：
250
---
## Page 252
$. []{}-?*+()1
其它所有字符都被认为是原义字符。在个别情况下，反斜杠会被用来创建元序列，元字符也
可以被转义为原义字符，而不是被解释为元字符。
注意：正如我们所见到的，当shell执行展开的时候，许多正则表达式元字符，也是对shell
有特殊含义的字符。当我们在命令行中传递包含元字符的正则表达式的时候，把元字符用引号
引起来至关重要，这样可以阻止shell试图展开它们
20.3任何字符
我们将要查看的第一个元字符是圆点字符，其被用来匹配任意字符。如果我们在正则表达式中
包含它，它将会匹配在此位置的任意一个字符。这里有个例子：
x.*sttxtp ,dtz,u- do. s[- xoqxnutgou]
bunzip2
bzip2
bzip2recove1
gunzip
gzip
funzip
gPg-z1p
preunzip
prezip
prezip-bin
unzip
unzipsfx
我们在文件中查找包含正则表达式“zip”的文本行。对于搜索结果，有几点需要注意一下。
注意没有找到这个zip程序。这是因为在我们的正则表达式中包含的圆点字符把所要求的匹配
项的长度增加到四个字符，并且因为字符串“zip”只包含三个字符，所以这个zip程序不匹配。
251
---
## Page 253
另外，如果我们的文件列表中有一些文件的扩展名是.zip，则它们也会成为匹配项，因为文件扩
展名中的圆点符号也会被看作是“任意字符”。
20.4锚点
在正则表达式中，插入符号和美元符号被看作是锚点。这意味着正则表达式只有在文本行的开
头或末尾被找到时，才算发生一次匹配。
4x4'*asttxtp ,dtz,, u- dox s[- xoqxnusteou]
zip
zipcloak
zipgrep
zipinfo
zipnote
zipsplit
4x2**stxtp ,sdtz, u- do1 s[- xoqmutoou]
gunzip
gzip
funzip
gPg-zip
preunzip
prezip
unzip
zip
x4**stxTp ,$dtz,, u- dox s[- xoqxnusteou]
zip
zip独占一行）的匹配行。注意正则表达式“s”（行首和行尾之间没有字符）会匹配空行。
字谜助手
到目前为止，甚至凭借我们有限的正则表达式知识，我们已经能做些有意义的事
情了
我妻子喜欢玩字谜游戏，有时候她会因为一个特殊的问题，而向我求助。类似这
样的问题，“一个有五个字母的单词，它的第三个字母是“j”，最后一个字母是‘r”，
是哪个单词？”这类问题会让我动脑筋想想。
252
---
## Page 254
你知道你的Linux系统中带有一本英文字典吗？千真万确。看一下/usr/share/
dict目录，你就能找到一本。或几本。存储在此目录下的字典文件，其内容仅仅是
一个长长的单词列表，每行一个单词，按照字母顺序排列。在我的系统中，这个文
件仅包含98.000个单词。为了找到可能的上述字谜的答案，我们可以这样做：
[ne@linuxbox -]$ grep =1~. .J.r$* /usr/share/dict/words
Major
major
使用这个正则表达式，我们能在我们的字典文件中查找到包含五个字母，且第三
个字母是“i”.最后一个字母是“r”的所有单词。
20.5中括号表达式和字符类
除了能够在正则表达式中的给定位置匹配任意字符之外，通过使用中括号表达式，我们也能够
从一个指定的字符集合中匹配单个字符。通过中括号表达式，我们能够指定一个待匹配字符集
合（包含在不加中括号的情况下会被解释为元字符的字符）。在这个例子里，使用了一个两个字
符的集合：
4x**sttxtp ,dtz[8q]. u- dox3 s[- xoqxnuteou]
bzip2
bzip2recover
gzip
一个字符集合可能包含任意多个字符，并且元字符被放置到中括号里面后会失去了它们的
特殊含义。然而，在两种情况下，会在中括号表达式中使用元字符，并且有着不同的含义。第
一个元字符是插入字符（），其被用来表示否定；第二个是连字符字符（-），其被用来表示一个
字符范围。
253
---
## Page 255
20.6否定
如果在中括号表示式中的第一个字符是一个插入字符（），则剩余的字符被看作是不会在给定
的字符位置出现的字符集合。通过修改之前的例子，我们试验一下：
4x4**4stxtp , dtz[8q.] . q- dox3 s[-xoqzmustoou]
bunzip2
gunzip
funzip
gPg-zip
preunzip
prezip
prezip-bin
unzip
unzipsfx
通过激活否定操作，我们得到一个文件列表，它们的文件名都包含字符串“zip”，并且“zip”
的前一个字符是除了"b”和“g”之外的任意字符。注意文件zip没有被发现。一个否定的字
符集仍然在给定位置要求一个字符，但是这个字符必须不是否定字符集的成员。
插人字符如果是中括号表达式中的第一个字符的时候，才会唤醒否定功能：否则，它会失去
它的特殊含义，变成字符集中的一个普通字符。
20.7传统的字符区域
如果我们想要构建一个正则表达式，它可以在我们的列表中找到每个以大写字母开头的文件，
我们可以这样做：
所以有另外一种方式：
254
---
## Page 256
4x4**sxP [z-]. - dox s[- xoqxnutoou]
MAKEDEV
ControlPane]
GET
HEAD
X11
Xorg
MAKEFLOPPIES
NetvorkManager
MetuorkManagerDispatcher
通过使用一个三个符区域，我们能够缩写26个字母。任意字符的区域都能按照这种方式表
达，包括多个区域，比如下面这个表达式就匹配了所有以字母和数字开头的文件名：
x4 **sx . [60z2-], 1-dox8s[-xoqxuou]
在字符区域中，我们看到这个连字符被特殊对待，所以我们怎样在一个正则表达式中包含一
个连字符呢？方法就是使连字符成为表达式中的第一个字符。考虑一下这两个例子：
x**stxp ,[z-v] . - dox s[- xoqxnustgou]
这会匹配包含一个大写字母的文件名。然而
qx**4st[xrp .[z-]. u dox3 s[- xoqxnuteou]
上面的表达式会匹配包含一个连字符，或一个大写字母“A”，或一个大写字母“Z”的文件
名。
20.8POSIX字符集
传统的字符区域是一个易于理解和有效的方法，用来处理快速指定字符集合的问题。不幸的是
它们不总是工作。到目前为止，虽然我们在使用grep程序的时候没有遇到任何问题，但是我们
255
---
## Page 257
可能在使用其它程序的时候会遭遇困难。
回到第5章，我们看看通配符怎样被用来完成路径名展开操作。在那次讨论中，我们说过在
某种程度上，那个字符区域被使用的方式几乎与在正则表达式中的用法一样，但是有一个问题：
[ned1inuxbox -]$ 1s /usr/sbin/ [ABCDEFGHIJKLMNOPQRSTUVWXYZ] *
/usr/sbin/MAKEFLOPPIES
/usr/sbin/MetvorkManagerDispatcher
/usr/sbin/letvorkManager
（依赖于不同的Linux发行版，我们将得到不同的文件列表，有可能是一个空列表。这个例
子来自于Ubuntu）这个命令产生了期望的结果一只有以大写字母开头的文件名，但是：
*[z-]/utqs/xsn/ sT s[-xoqxnuttgou]
/usr/sbin/biosdecode
/usr/sbin/chat
/usr/sbin/chgpassud
/usr/sbin/chpassvd
/usr/sbin/chroot
/usr/sbin/cleanup-info
/usr/sbin/conplain
/usr/sbin/console-kit-daenon
通过这个命令我们得到完全不同的结果（只列出了部分结果）。原因说来话长，简单来说就
是：
追潮到Unix刚刚开发的时候，它只知道ASCI1字符，并且Unix符性也如实反映了这一事
实。在ASCII中，前32个字符（数字0－31）都是控制码（如tabs丶backspaces 和回车）。
随后的32个字符（32一63）包含可打印的字符，包括大多数的标点符号和数字0到9。再随
后的32个字符（64一95）包含大写字符和一些更多的标点符号。最后的31个字符（96一
127）包含小写字母和更多的标点符号。基于这种安排方式，使用ASCII的系统的排序规则像
下面这样：
ABCDEFGHIJKLMNOPQRSTUVVXYZabcdefghi jklanopqrstuvuxyz
256
---
## Page 258
这个不同于正常的字典顺序，其像这样：
随着Unix系统的知名度在美国之外的国家传播开来，就需要支持不在U.S.英语范围内的
字符。于是就扩展了这个ASCII字符表，使用了整个8位，添加了字符（数字128一255），这
样就容纳了更多的语言。
为了支持这种功能，posix标准引入了“locale”概念，它能针对不同地区选择合适的字符
集
[ne@linuxbox -]$ echo $LANG
en_US.UTF8
通过这个设置，POSIX相容的应用程序将会使用字典排列顺序而不是ASCII顺序。这就解
释了上述命令的行为。当[A-Z字符区域按照字典顺序解释的时候，包含除了小写字母“a”之
外的所有字母，因此得到这样的结果。
为了部分地解决这个问题，POSIX标准包含了大量的字符集，其提供了有用的字符区域。
如下表中所示：
字符集
说明
[:alnum:]
字母数字字符。在ASCII中，等价于：[A-Za-z0-9]
[word:]
与[alnum:相同，但增加了下划线字符。
[:alpha:]
字母字符。在ASCII中，等价于：[A-Za-z]
[:blank:]
包含空格和tab字符。
[:cntrl:]
ASCII的控制码。包含了0到31，和127的ASCII字符。
[digit:]
数字0到9
[:graph:]
可视字符。在ASCII中.它包含33到126的字符。
[:lower:]
小写字母。
[:punct:]
标点符号字符。在ASCII中，等价于：!#S
%&′()*+/:;?@[\\\]]
[uμd:]
可打印的字符·在[graph:]中的所有字符，再加上空格字
符。
257
---
## Page 259
[:space:]
空白字符，包括空格、tab、回车、换行、verticaltab和
form feed.在ASCII 中.等价于：[\t\r\n\v\f]
[addn:]
大写字母。
[:xdigit:]
用来表示十六进制数字的字符。在ASCII中，等价于：
[0-9A-Fa-f]
表20-2:POSIX字符集
甚至通过字符集，仍然没有便捷的方法来表达部分区域，比如[A-M]。
通过使用字符集，我们重做上述的例题，看到一个改进的结果：
[ne@linuxbox -]$ ls /usr/sbin/ [[:upper:]]*
/usr/sbin/MAKEFLOPPIES
/usr/sbin/NetvorkManagerDispatcher
/usr/sbin/letvorkManager
记住，然而，这不是一个正则表达式的例子，而是shell正在执行路径名展开操作。我们在
这里展示这个例子，是因为POSIX规范的字符集适用于二者。
恢复到传统的排列顺序
通过改变环境变量LANG的值，你可以选择让你的系统使用传统的（ASCII）排
列规则。如上所示，这个LANG变量包含了语种和字符集。这个值最初由你安装
Linux系统时所选择的安装语言决定。
使用locale命令，来查看locale的设置。
258
---
## Page 260
[ne@linuxbox -]$ locale
LANG=en_US UTF=8
LC_CTYPE="en_US.UTF8*
LC_NUMERIC=*en_US . UTF8"
LC_TIME=*en_US .UTF8"
LC_COLLATE=*en_US .UTF8"
LC_MONETARY=*en_US .UTF8"
LC_MESSAGES=*en_US .UTF8"
LC_PAPER="en_US.UTF8*
LC_NAME=*en_US . UTF=8"
LC_ADDRESS=*en_US . UTF=8"
LC_TELEPHONE="en_US .UTF8*
LC_MEASUREMENT=*en_US.UTF8"
LC_IDENTIFICATION=*en_US .UTF8"
LC_ALL=
把这个LANG变量设置为POSIX，来更改locale，使其使用传统的Unix行为。
me@linuzbox ~/$ ezport LANG=POSIX
注意这个改动使系统为它的字符集使用U.S.英语（更准确地说，ASCII），所以