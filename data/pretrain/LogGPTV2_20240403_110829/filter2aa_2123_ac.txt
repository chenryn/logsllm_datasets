md5(1235) = 9996535e07258a7bbfd8b132435c5962
●
Pre-image resistance：可以从 X 算出 Hash(X)，但无法从 Hash(X) 算出 X
●
Second-preimage resistance：已知 X，很难找到 X’ 符合 Hash(X) = Hash(X’)
●
Collision resistance：很难找到两个不同字串 X 与 X’ 符合 Hash(X) = Hash(X’)
●
例如：md5, sha256, Argon2
杂凑函数（Hash）
用途：
●
验证资料完整性（Data integrity）
○
用不安全通道传很大的档案
用安全通道传该档案的  Hash
以节省加密解密所需的资源
●
在不取得明文的情况下验证资料正确性
○
储存使用者密码的 Hash 在资料库，确保管理员看不到使用者密码的明文
讯息认证码（MAC）
●
Message authentication code
●
验证完整性
●
可验证是谁传来的
○
只有当密钥只有 sender 和 recipient 
知道时成立
●
常用的有 HMAC（带有密钥功能
的 Hash）
和 CBC-MAC（用 Block Cipher 创
造 MAC）
数位签章（Digital Signature）
●
类似于在纸上签名，证明这份资料是我认可的
●
只有拥有私钥的人可以签章，所有人都可以验证签章
●
因为讯息很长，所以通常会先将讯息 Hash 过再签章
●
基于非对称式加密系统的应用
●
具有不可否认性（Non-repudiation）
数位签章（Digital Signature）
1.
Alice 想要签一笔资料 D
2.
Alice 把 D 拿去算 hash 得 H
3.
Alice 拿自己的私钥对 H 签章得 S
4.
Alice 把 (D, S) 传给 Bob
5.
Bob 拿 D 去算 hash 得 H’
6.
Bob 把 S 用 Alice 的公钥验证得 H
7.
比较 H 与 H’ 是否一样
https://en.wikipedia.org/wiki/File:Digital_Signature_diagram.svg
由 FlippyFlink 以创用CC 姓名标示-相同方式分享 4.0 国际 公开
Hash vs. MAC vs. Digital Signature
完整性：Bob 可以确认 Alice 传来的讯息是完整的，没有缺漏或被意外更改
可验证性：Bob 可以确认讯息确实是 Alice 传来的
不可否认性：Bob 把讯息拿给第三方，第三方可以确认该讯息是 Alice 传的，
      且 Alice 无法不承认这个讯息源自于她
Hash
MAC
Digital Signature
完整性 Integrity
Yes
Yes
Yes
可验证性 Authentication
No
Yes
Yes
不可否认性 Non-repudiation
No
No
Yes
Man-in-the-middle attack
Alice
Bob
明文
密文
加密
密文
明文
解密
公开通道
Man-in-the-middle attack
Alice
Bob
明文
加密
Mallory
密文
解密
明文
明文
加密
密文
解密
明文
Alice 如何知道他拿到的公钥真的是  Bob 的？
Certificate Authority
●
负责身份验证并发放、管理、注销凭证的
权威机构
●
大家都信任这个机构发放的签章
乱数
乱数（Random number）
密码学中，使用乱数的时机：
●
生成金钥
●
生成 Nonce
●
生成 IV
乱数（Random number）
由 Seed 搭配演算法产出乱数（具有确定性）：
●
伪乱数生产器
Pseudorandom number generator，简称 PRNG
●
密码学安全伪乱数生成器
Cryptographically secure pseudorandom number generator，简称 CSPRNG
由物理世界的现象产出乱数（不具有确定性）：
●
真乱数生成器
True random number generator，简称 TRNG
乱数（Random number）
●
Seed 很重要
●
key = srand(time(NULL))
●
如果已知 PRNG 与大略的生成时间 Orz
●
请使用 /dev/urandom 和 CryptGenRandom
●
演算法不要乱来，请用 NIST 系列的（DUAL_EC_DRBG 除外）
乱数（Random number）
随机性：看起来够乱，没有规律，所有数字分布平均
不可预测性：无法从之前的乱数数列猜出下一个乱数的值
不可重复性：以后不可能再有同样的数列
随机性
不可预测性
不可重复性
PRNG
O
X
X
CSPRNG
O
O
X
TRNG
O
O
O
只有 CSPRNG 和 TRNG 可以用于密码学
那些没时间介绍但很有趣的东西
●
Feistel cipher
●
Merkle–Damgård construction
●
Length Extension Attack
●
PGP
●
SSL/TLS
●
Public key infrastructure
●
Merkle Tree
●
Secret Sharing
●
Zero-Knowledge Proof
●
Blind Signature
●
Homomorphic encryption
●
...
密码学的世界还在快速发展著呢！
恸！怎么学都学不完啊  Orz
图：https://github.com/ry/deno/issues/25
https://gotyour.pw/
谢谢大家 
References
●
密码学与网路安全应用 - 结城浩（旗标）
●
Understanding Cryptography: A Textbook for Students and Practitioners -  Christof Paar, January Pelzl (Springer)
●
https://en.wikipedia.org/wiki/Cryptography
●
https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle
●
https://en.wikipedia.org/wiki/Substitution_cipher
●
https://en.wikipedia.org/wiki/Caesar_cipher
●
https://en.wikipedia.org/wiki/Classical_cipher
●
https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher
●
https://en.wikipedia.org/wiki/Index_of_coincidence
●
https://zh.wikipedia.org/wiki/ASCII
●
https://reverseengineering.stackexchange.com/questions/2062/what-is-the-most-efficient-way-to-detect-and-to-break-
xor-encryption
●
https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption
●
https://en.wikipedia.org/wiki/XOR_cipher
●
https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
●
https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation
●
http://securitylesson.blogspot.com/2012/02/blog-post_15.html
References
●
https://en.wikipedia.org/wiki/Public-key_cryptography
●
https://en.wikipedia.org/wiki/Hybrid_cryptosystem
●
https://en.wikipedia.org/wiki/RSA_(cryptosystem)
●
https://blog.cryptographyengineering.com/2018/04/07/hash-based-signatures-an-illustrated-primer/
●
https://crypto.stackexchange.com/questions/5646/what-are-the-differences-between-a-digital-signature-a-mac-and-a-
hash
●
https://en.wikipedia.org/wiki/Padding_(cryptography)
●
https://www.owasp.org/images/e/eb/Fun_with_Padding_Oracles.pdf
●
https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
●
https://en.wikipedia.org/wiki/Avalanche_effect
●
https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
●
https://speakerdeck.com/inndy/no-more-crypto-fails
●
https://gpgtools.tenderapp.com/kb/faq/what-is-ownertrust-trust-levels-explained
那些被删掉的简报
不要自己设计密码演算法
●
现在主流的演算法都是公开并经过许多密码学家验证过，绝对比你自己设计的
演算法安全
●
所以永远不要使用自己设计的密码系统
○
除非你已经成为密码学专家了
CFB
●
类似 CBC
●
模拟 Stream Cipher
●
IV 作为 Seed
●
当遗失整个 block 时并不
影响后续加密
●
重送攻击
●
请改用 CTR
GCM
●
Galois/Counter Mode
●
GMAC + CTR
●
兼具资料加密（CTR）与验证（GMAC）
●
一种认证加密（Authenticated encryption）的
模式
●
Google 与 Facebook 都在用 GCM 做加密