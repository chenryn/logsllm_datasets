title:Effective Seed Scheduling for Fuzzing with Graph Centrality Analysis
author:Dongdong She and
Abhishek Shah and
Suman Jana
1
6
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Effective Seed Scheduling for Fuzzing with
Graph Centrality Analysis
Dongdong She, Abhishek Shah and Suman Jana
Columbia University
Abstract—Seed scheduling,
the order in which seeds are
selected, can greatly affect the performance of a fuzzer. Existing
approaches schedule seeds based on their historical mutation
data, but ignore the structure of the underlying Control Flow
Graph (CFG). Examining the CFG can help seed scheduling by
revealing the potential edge coverage gain from mutating a seed.
An ideal strategy will schedule seeds based on a count of all
reachable and feasible edges from a seed through mutations, but
computing feasibility along all edges is prohibitively expensive.
Therefore, a seed scheduling strategy must approximate this
count. We observe that an approximate count should have
3 properties —(i) it should increase if there are more edges
reachable from a seed; (ii) it should decrease if mutation history
information suggests an edge is hard to reach or is located far
away from currently visited edges; and (iii) it should be efﬁcient
to compute over large CFGs.
We observe that centrality measures from graph analysis
naturally provide these three properties and therefore can ef-
ﬁciently approximate the likelihood of reaching unvisited edges
by mutating a seed. We therefore build a graph called the edge
horizon graph that connects seeds to their closest unvisited nodes
and compute the seed node’s centrality to measure the potential
edge coverage gain from mutating a seed.
We implement our approach in K-Scheduler and compare
with many popular seed scheduling strategies. We ﬁnd that
K-Scheduler increases feature coverage by 25.89% compared
to Entropic and edge coverage by 4.21% compared to the next-
best AFL-based seed scheduler, in arithmetic mean on 12 Google
FuzzBench programs. It also ﬁnds 3 more previously-unknown
bugs than the next-best AFL-based seed scheduler.
I. INTRODUCTION
Fuzzing is a popular security testing technique that has
found numerous vulnerabilities in real-world programs [46, 6,
15, 20, 13, 35, 37, 55, 59, 52, 64, 55]. Fuzzers automatically
search through the input space of a program for speciﬁc
inputs that result in potentially exploitable buggy behaviors.
However, the input spaces of most real-world programs are
too large to explore exhaustively. Therefore, most existing
fuzzers follow an edge-coverage-guided evolutionary approach
for guiding the input generation process to ensure that the
generated inputs explore different control ﬂow edges of the
target program [62, 3, 2]. Starting from a seed input corpus,
a coverage-guided fuzzer repeatedly selects a seed from the
corpus, mutates it, and adds only those mutated inputs back to
the corpus that generate new edge coverage. The performance
of such fuzzers have been shown to heavily depend on seed
scheduling,
the order in which the seeds are selected for
mutation [28].
The main challenge in seed scheduling is to identify which
seeds in a corpus, when mutated, are more likely to explore
many new edges. Performing more mutations on such promis-
ing seeds can achieve higher edge coverage. Most prior work
on seed scheduling identiﬁes and prioritizes the promising
seeds based on the historical distribution of edge/path coverage
across prior mutations of the seeds. For example, a fuzzer
can prioritize the seeds whose mutations, in the past, resulted
in a higher path coverage [60] or triggered rarer edges [32].
However, these existing approaches ignore the structure of the
underlying Control Flow Graph (CFG). For example, consider
a seed s1 whose execution path is close to many unvisited
edges and a seed s2 whose execution path is close to only
one unvisited edge. Existing coverage-guided fuzzers might
schedule seed S2 before S1 based on historical patterns.
However, examining the structure of the CFG will reveal that
S1 is indeed more promising than S2 as mutating it can
potentially result in exploration of many unvisited edges that
are close to the S1’s execution path.
The naive strategy of scheduling seeds simply based on
the counts of all potentially reachable edges in the CFG for
each seed is unlikely to be effective. Such a naive approach
assumes that all CFG edges are equally likely to be reachable
through mutations which does not hold true for most real-
world programs. In fact, some shallow edges tend to be
reachable by a large number of mutated inputs while other
deep edges are only reached by a few,
if any at all (as
many branches might be infeasible) [40]. An ideal strategy
would schedule seeds based on the count of all reachable
and feasible edges from a seed by mutations. The seeds with
higher edge counts will be mutated more. However, computing
the feasibility along all edges is impractical as it will incur
prohibitive computational cost.
Therefore, a seed scheduling strategy must approximate the
feasible edge count. We observe that such an approxima-
tion should have 3 properties. First, the approximate count
should increase if there are many edges reachable from a
seed. Second, the count should decrease if mutation history
information suggests that an edge is hard to reach or is located
far away from currently visited edges. Empirical evidence from
prior work has shown that reaching child nodes through input
mutations is typically harder than reaching parent nodes [40]
because the number of inputs that can reach a child, for a
given path, is strictly less than or equal to the number of inputs
that can reach the parent. Third, the approximate count must
© 2022, Dongdong She. Under license to IEEE.
DOI 10.1109/SP46214.2022.00129
12194
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
be efﬁcient to compute for large CFGs as real-world CFGs
can be quite large (e.g., inter-procedural CFGs might contain
thousands of nodes).
Our key observation is that centrality measures from graph
inﬂuence analysis naturally provide the aforementioned prop-
erties while measuring a node’s inﬂuence on the graph. Inﬂu-
ence analysis is often used to identify a graph’s (e.g., a social
network’s) most inﬂuential nodes and graph centrality mea-
sures each node’s inﬂuence on other nodes with three prop-
erties as described below. First, centrality measures additively
scale up a node’s inﬂuence proportional to the number of edges
that are reachable from the node. Each sequence of edges of
the same length is treated equally independent of its order.
Second, centrality measures can easily incorporate external
contribution (e.g., based on past mutation history) to a node’s
inﬂuence and can decay contributions from farther away nodes
to the node’s inﬂuence. Contributions decay multiplicatively
with the increase in distance (i.e., more intermediate nodes)
to reduce contributions from longer paths. Finally, centrality
can be efﬁciently approximated on large graphs using iterative
methods [29].
In this paper, we introduce a new approach for seed schedul-
ing based on centrality analysis of the seeds on the CFG.
We prioritize scheduling seeds with the largest centrality, i.e.,
approximate counts of unvisited but potentially reachable CFG
edges from a seed through mutations. To measure a seed’s
inﬂuence with centrality, we modify the CFG to construct an
edge horizon graph containing the eponymous horizon nodes.
The horizon nodes form the boundary between the visited and
unvisited regions of the CFG for a given fuzzing corpus.
Since horizon nodes delineate between the visited and
unvisited regions of the CFG, we ﬁrst classify CFG nodes as
visited or unvisited based on the coverage of a fuzzer’s current
corpus. We then deﬁne horizon nodes as unvisited nodes with a
visited parent node. These nodes are crucial to fuzzing because
a fuzzer must ﬁrst visit a horizon node before going further
into the unvisited region of the CFG. The centrality of horizon
nodes reachable by mutations on a seed therefore measures
the seed’s ability to discover new edge coverage. Hence, we
introduce one node corresponding to each seed and connect the
nodes to their corresponding horizon nodes. We do not keep
any visited node in the edge horizon graph to avoid inﬂating a
seed’s centrality score with contributions from already visited
nodes.
To compute centrality over the edge horizon graph, we
use Katz centrality because it provides all the three desired
approximation properties described earlier in this section and
can operate on directed graphs like CFGs. We also use
historical mutation data to bias the inﬂuence of horizon nodes
to a value between 0 and 1 where values closer to 0 mean the
node is harder to reach by mutations. The bias value estimates
the hardness to reach a node by counting how many mutations
reach a node’s parents but fail to reach the node itself. Using
the centrality scores for all seeds, a fuzzer can prioritize
the seed with the highest centrality. We also periodically re-
compute the edge horizon graph and centrality scores during
a fuzzing campaign.
We implement our centrality-analysis-based seed scheduling
technique as part of K-Scheduler (K stands for Katz cen-
trality). Our evaluation shows that K-Scheduler increases
feature coverage by 25.89% compared to Entropic and edge
coverage by 4.21% compared to the next-best AFL-based
seed scheduler, in arithmetic mean on 12 Google FuzzBench
programs. It also ﬁnds 3 more previously-unknown bugs than
the next-best AFL-based seed scheduler. We also conduct
preliminary experiments to show the utility of K-Scheduler
in non-fuzzing seed scheduling settings such as concolic
execution and measure the impact of K-Scheduler’s design
choices. Our main contributions are described below:
• We model seed scheduling in fuzzing as a graph centrality
analysis problem.
• We construct an edge horizon graph and use Katz cen-
trality to compute centrality scores that approximate the
number of reachable and feasible unvisited CFG edges
from a seed.
• We implement our approach in K-Scheduler and
integrate it into Libfuzzer and AFL to show the generic
utility of our approach. We release our implementation
on https://github.com/Dongdongshe/K-Scheduler.
• We demonstrate that using K-Scheduler increases
feature coverage by 25.89% compared to Entropic and
edge coverage by 4.21% compared to the next-best AFL-
based seed scheduler, in arithmetic mean on 12 Google
FuzzBench programs. It also ﬁnds 3 more previously-
unknown bugs than the next-best AFL-based seed sched-
uler.
II. GRAPH INFLUENCE ANALYSIS BACKGROUND
A. Centrality Measures for Inﬂuence Analysis
Identifying a graph’s most inﬂuential nodes is a common
and important task in graph analysis. Many different centrality
measures exist in the literature to estimate a node’s inﬂu-
ence [39]. For example, degree centrality measures a node’s
inﬂuence by counting its direct neighbors. This technique
can identify a node with local inﬂuence over its neighbors.
Eigenvector centrality, in contrast, can identify nodes with
global inﬂuence over the entire graph. However, eigenvec-
tor centrality can fail to produce useful scores on directed
graphs [36, 38]. Because program CFGs are directed graphs
and we want to measure the global inﬂuence of a node to
reach other nodes in a graph, we use Katz centrality, a variant
of eigenvector centrality for directed graphs. We believe that
Pagerank centrality, another eigenvector centrality variant, is
not suitable for our setting because it dilutes node inﬂuence
by the number of its direct neighbors. Such artiﬁcial dilutions
will undesirably decrease a node’s inﬂuence in a program’s
CFG. We conduct experiments to experimentally support this
claim in Section VI.
For directed graphs like a program CFG, a node’s neighbors
can be deﬁned by incoming or outgoing edges. Therefore,
centrality measures are classiﬁed as out-degree if they use
outgoing edges or in-degree if they use incoming edges during
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
22195
Fig. 1: Fuzzer workﬂow with K-Scheduler.
the computation. Their actual usage depend on the target
domain. For example, academic citation graphs use in-degree
centrality measures because inﬂuential papers are highly cited.
In our setting, we use out-degree Katz centrality because we
want to measure a node’s ability to reach as many unvisited
CFG edges (with respect to the current fuzzing corpus) as
possible. We describe the details of the out-degree Katz
centrality measure below.
B. Katz Centrality
Let A denote an n by n adjacency matrix of a graph with n
nodes. If there is an edge connecting node i to node j, element
Aij = 1. Otherwise, Aij = 0. Let c denote the Katz centrality
vector of size n. The element corresponding to node i, ci, is
deﬁned as follows,
n(cid:88)
ci = α
Aijcj + βi
(1)
j=1
where α ∈ [0, 1] and βi is the i-th element of β, a vector
of size n consisting of non-negative elements. Conceptually,
the left equation term captures that node centrality additively
depends on its neighbors centrality and assigns each neighbor
equal weight. Because the sum operator is commutative, the
centrality score is independent of the order in which nodes are
reached. The right term β captures the minimum centrality of
a node, which we will later use in Section IV to bias the
centrality of horizon nodes based on historical mutation data.
The α term represents the decay factor, so that long paths are
weighted less than short paths as we show in Section IV.
In matrix form, equation 1 can be written as
c = αAc + β
(2)
To compute c, the Katz centrality vector, one can solve the
linear system so that
c = (I − αA)−1β
(3)
However, computing the matrix inverse in Equation 3 is pro-
hibitively expensive with O(n3) complexity for large graphs.
In practice, an iterative approach called the power method is
used to approximate c based on Equation 2. After initially
setting c(0) = β, the power method computes the t-th iteration
with the following formula,
c(t) = αAc(t − 1) + β
(4)
where c(t) denotes the t-th iteration. Each iteration increases
the power of matrix A which corresponds to considering
neighbors farther away. Hence, Katz centrality measures global
node inﬂuence over the entire graph. Each iteration also
reduces the contribution of farther away nodes to a node’s
inﬂuence as we describe in Section IV. The power method
converges to the centrality vector in Equation 3 with O(n)
complexity under some reasonable assumptions about
the
graph topology [38] such as α having to be less than the
multiplicative inverse of the largest eigenvalue. We refer the
reader to [36, 38] for more technical details.
III. OVERVIEW OF OUR APPROACH
Workﬂow. Figure 1 depicts the workﬂow of K-Scheduler.
Given a program, seed corpus, and a target program’s inter-
procedural CFG, we modify the CFG to produce an edge
horizon graph composed of only seed, horizon, and non-
horizon unvisited nodes. We then use Katz centrality to per-
form centrality analysis on the edge horizon graph. A fuzzer
prioritizes the seed with the highest centrality score. As a
fuzzer’s mutations reach previously unvisited nodes, we delete
these newly visited nodes and re-compute Katz centrality on
the updated edge horizon graph.
Motivating Example. Figure 2 shows a motivating example to