#!/bin/bash
# Progran to output a systenm information page
TITLE="Systen Infornation Report For $HOSTMAME*
,oa
$TITLE
367
---
## Page 369
$TITLE
"
我们亦借此机会，通过在标题中添加shell变量名HOSTNAME，让标题变得活泼有趣些。
这个变量名是这台机器的网络名称。
注意：实际上，shell确实提供了一种方法，通过使用带有-r（只读）选项的内部命令declare
来强制常量的不变性。如果我们给TITLE这样赋值：
那么随后所有给TITLE的赋值都会被shell阻止。这个功能极少被使用，但为了很早之前
的脚本，它仍然存在。
26.3.1给变量和常量赋值
这里是我们真正开始使用参数扩展知识的地方。正如我们所知道的，这样给变量赋值：
variable=value
这里的rariable是变量的名字，ualue是一个字符串。不同于一些其它的编程语言，shell不
会在乎变量值的类型；它把它们都看作是字符串。通过使用带有-i选项的declare命令，你可
以强制shell把赋值限制为整数，但是，正如像设置变量为只读一样，极少这样做。
注意在赋值过程中，变量名、等号和变量值之间必须没有空格。那么，这些值由什么组成
呢？可以展开成字符串的任意值：
a=z
# Assign the string "z* to variable a.
b=*a string*
# Enbedded spaces nust be within quotes.
c=*a string and $b*
# Dther expansions such as variables can be
# expanded into the assignment.
368
---
## Page 370
d=$(1s -1 foo.txt)
# Results of a coanand.
e=$((5 * 7))
# Arithmetic expansion.
f=*\t\ta string\n"
# Escape sequences such as tabs and nevlines.
可以在同一行中对多个变量赋值：
a#5 b="a stringa
在参数展开过程中，变量名可能被花括号“1”包围着。由于变量名周围的上下文，其变得
不明确的情况下，这会很有帮助。这里，我们试图把一个文件名从myfile改为myfilel，使用
一个变量：
u,=oueu $[- xoqxutgou]
[neglinuxbox -]$ touch $filenase
[neglinuxbox -]$ mv $filenane $filename1
mv: nissing destination file operand after *myfile*
这种尝试失败了，因为shell把mv命令的第二个参数解释为一个新的（并且空的）变量。
通过这种方法可以解决这个问题：
[neglinuxbox -]$ mv $filenane ${filenane}1
通过瘀加花括号，shell不再把末尾的1解释为变量名的一部分
我们将利用这个机会来添加一些数据到我们的报告中，即创建包括的日期和时间，以及创建
者的用户名：
#!/bin/bash
# Progran to output a systen information page
TITLE="Systen Infornation Report For $HOSTNAME*
CURRENT_TIME=$(date +*%x %z YZ")
369
---
## Page 371
TIME_STAMP=*Generated $CURRENT_TIME, by $USER*
echo *
$TITLE
$TITLE
$TIME_STAMP
"
26.4Here Documents
我们已经知道了两种不同的文本输出方法，两种方法都使用了echo命令。还有第三种方法，叫
做here document 或者here script。一个here document 是另外一种I/O重定向形式，我们在
脚本文件中嵌入正文文本，然后把它发送给一个命令的标准输入。它这样工作：
command 
$TITLE
---
## Page 372
$TITLE
$TIME_STAMP
_EOF
取代echo命令，现在我们的脚本使用cat命令和一个here document。这个字符串_EOF
意思是“文件结尾”，一个常见用法）被选作为token，并标志着嵌入文本的结尾。注意这个
token必须在一行中单独出现，并且文本行中没有末尾的空格。
那么使用一个heredocument的优点是什么呢？它很大程度上和echo一样，除了默认情况
下，here documents 中的单引号和双引号会失去它们在shell 中的特殊含义。这里有一个命令
中的例子：
[netlinuzbox -]$ cat$foo
>*$foo"
>‘$foo'
>\$foo
>_EOF。
sone text
"sone text"
'sone text'
$foo
正如我们所见到的，shell根本没有注意到引号。它把它们看作是普通的字符。这就允许我
们在一个heredocument中可以随意的嵌入引号。对于我们的报告程序来说，这将是非常方便
的。
Heredocuments可以和任意能接受标准输入的命令一块使用。在这个例子中.我们使用了
一个heredocument将一系列的命令传递到这个ftp程序中，为的是从一个远端FTP服务器
中得到一个文件：
#1/bin/bash
# Script to retrieve a file via FTP
371
---
## Page 373
FTP_SERVER=ftp.nl.debian .org
FTP_PATH=/debian/dists/lenny/nain/installer-i386/current/inages/cdrom
REMOTE_FILE=debian-cd_info.tar ·gz
ftp -n 
$TITLE
$TIME_STAMP
$(report_uptine)
$(report_disk_space)
$(report_hone_space)
_EOF
我们能够用两种方法来创建这些额外的命令。我们可以分别编写三个脚本，并把它们放置
到环境变量PATH所列出的目录下，或者我们也可以把这些脚本作为shell函数嵌入到我们的
函数有两种语法形式：
function nane {
cosmands
return
and
nane () {
cosmands
return
这里的name是函数名，commands是一系列包含在函数中的命令。
---
## Page 378
两种形式是等价的，可以交替使用。下面我们将查看一个说明shell函数使用方法的脚本：
1
#!/bin/bash
2
3
# Shell function deno
4