● EventSourceSampleAnnotations
● ClientApp/MyApplicationEvents
● WinAppInsights
20.1 诊断概述
应用程序的发布周期变得越来越短，了解应用程序在生产环境中运行时的行为越来越
重要。会发生什么异常？知道使用了什么功能也是要关注的。用户找到应用程序的新功能
了吗？他们在页面上停留多长时间？为了回答这些问题，需要应用程序的实时信息。
本章介绍如何获得关于正在运行的应用程序的实时信息，找出应用程序在生产过程中
出现某些问题的原因，或者监视需要的资源，以确保适应较高的用户负载。这就是名称空
间System.Diagnostics.Tracing的作用。这个名称空间提供了使用Event Tracing for Windows
（ETW）进行跟踪的类。
当然，在应用程序中标记错误的一种方式是抛出异常。然而，有可能应用程序不抛出
异常，但仍不像期望的那样运行。应用程序可能在大多数系统上都运行良好，只在几个系
统上出问题。在实时系统上，可以启动跟踪收集器，改变日志行为，获得应用程序运行状
况的详细实时信息。这可以用ETW功能来实现。
如果应用程序出了问题，就需要通知系统管理员。事件查看器是一个常用的工具，并
不是只有系统管理员才需要使用它，软件开发人员也需要它。使用事件查看器可以交互地
监视应用程序的问题，通过添加订阅功能来了解发生的特定事件。ETW允许写入应用程
序的相关信息。
Application Insights是一个Microsoft Azure云服务，可以监视云中的应用程序。只需要
几行代码，就可以得到如何使用应用程序或服务的详细信息。
本章解释了这些功能，演示了如何为应用程序使用它们。
  注意： System.Diagnostics名称空间还提供了其他用于跟踪的类，例如Trace和
TraceSource。这些类在.NET之前的版本中使用。本章只介绍最新的跟踪技术：
EventSource。
20.2 使用EventSource跟踪
利用跟踪功能可以从正在运行的应用程序中查看消息。为了获得关于正在运行的应用
程序的信息，可以在调试器中启动应用程序。在调试过程中，可以单步执行应用程序，在
特定的代码行上设置断点，并在满足某些条件时设置断点。调试的问题是包含发布代码的
程序与包含调试代码的程序以不同的方式运行。例如，程序在断点处停止运行时，应用程
序的其他线程也会挂起。另外，在发布版本中，编译器生成的输出进行了优化，因此会产
生不同的效果。在经过优化的发布代码中，垃圾回收要比在调试代码中更加积极。方法内
的调用次序可能发生变化，甚至一些方法会被彻底删除，改为就地调用。此时也需要从程
序的发布版本中获得运行时信息。跟踪消息要写入调试代码和发布代码中。
下面的场景描述了跟踪功能的作用。在部署应用程序后，它运行在一个系统中时没有
问题，而在另一个系统上很快出现了问题。在出问题的系统上打开详细的跟踪功能，就会
获得应用程序中所出现问题的详细信息。在运行没有问题的系统上，将跟踪功能配置为把
错误消息重定向到Windows事件日志系统中。系统管理员会查看重要的错误，跟踪功能的
系统开销非常小，因为仅在需要时配置跟踪级别。
.NET中的跟踪有相当长的历史了。.NET的第一个版本只有简单的跟踪功能和Trace
类，而.NET 2.0对跟踪进行了巨大的改进，引入了TraceSource类。TraceSource背后的架构
非常灵活，分离出了源代码、侦听器和一个开关，根据一组跟踪级别来打开和关闭跟踪功
能。
从.NET 4.5开始，又引入了一个新的跟踪类EventSource，并在.NET 4.6中增强。这个
类在NuGet包System.Diagnostics的System.Diagnostics.Tracing名称空间中定义。
新的跟踪架构基于Windows Vista中引入的Event Tracing for Windows（ETW）。它允
许在系统范围内快速传递消息，Windows事件日志记录和性能监视功能也使用它。
下面看看ETW跟踪和EventSource类的概念。
● ETW提供程序是一个触发ETW事件的库。本章创建的应用程序是ETW提供程序。
● 
ETW清单描述了可以在ETW提供程序中触发的事件。使用预定义清单的优点是，
只要安装了应用程序，系统管理员就已经知道应用程序可以触发的事件了。这
样，管理员就可以配置特定事件的侦听。新版本的EventSource支持自描述的事件
和清单描述的事件。
● ETW关键字可以用来创建事件的类别。它们定义为位标志。
● 
ETW任务是分组事件的另一种方式。任务可以基于程序的不同场景来创建，以定
义事件。任务通常和操作码一起使用。
● ETW操作码识别任务中的操作。任务和操作码都用整型值定义。
● 
事件源是触发事件的类。可以直接使用EventSource类，或创建一个派生自基类
EventSource的类。
● 事件方法是事件源中触发事件的方法。派生自EventSource类的每个void方法，如果
没有用NonEvent特性加以标注，就是一个事件方法。事件方法可以使用Event特性
来标注。
● 事件级别定义了事件的严重性或冗长性。这可以用于区别关键、错误、警告、信息
和详细级事件。
● ETW通道是事件的接收器。事件可以写入通道和日志文件。Admin、Operational、
Analytic和Debug是预定义的通道。
使用EventSource类时，要运用ETW概念。
20.2.1 EventSource的简单用法
使用EventSource类的示例代码利用如下依赖项和名称空间：
依赖项
    NETStandard.Library
    System.Net.Http
名称空间
    System
    System.Collections.Generic
    System.Diagnostics.Tracing
    System.IO
    System.Net.Http
    System.Threading.Tasks
    static System.Console
在.NET 4.6和.NET Core 1.0版本中，扩展并简化了类EventSource，允许实例化和使用
它，而不需要派生一个类。这样，在小场景中使用它就更简单了。
使用EventSource的第一个例子显示了一个简单的案例。在Console 
Application
（Package）项目中，将EventSource实例化为Program类的一个静态成员。在构造函数中，
指定了事件源的名称（代码文件SimpleEventSourceSample /Program. cs）：
    private static EventSource sampleEventSource =
      new EventSource("Wrox-EventSourceSample1");
在Program类的Main方法中，事件源的唯一标识符使用Guid属性检索。这个标识符基
于事件源的名称创建。之后，编写第一个事件，调用EventSource的Write方法。所需的参
数是需要传递的事件名。其他参数可通过对象的重载使用。第二个传递的参数是定义Info
属性的匿名对象。它可以把关于事件的任何信息传递给事件日志：
    static void Main()
    {
      WriteLine($"Log Guid: {sampleEventSource.Guid
}");
      WriteLine($"Name: {sampleEventSource.Name
}");
      sampleEventSource.Write("Startup", new { Info = "started app" });
      NetworkRequestSample().Wait();
      ReadLine();
      sampleEventSource&#x0003F? .Dispose();
    }
  注意： 不是把带有自定义数据的匿名对象传递给Write方法，而是可以创建
一个类，它派生自基类EventSource，用EventData特性标记它。这个特性在本章后面介
绍。
在Main（）方法中调用的NetworkRequestSample（）方法发出一个网络请求，写入一
个跟踪日志，把请求的URL发送到跟踪信息中。完成网络调用后，再次写入跟踪信息。异
常处理代码显示了写入跟踪信息的另一个方法重载。不同的重载版本允许传递下一节介绍
的特定信息。下面的代码片段显示了设置跟踪级别的EventSourceOptions。写入错误信息
时设定Error事件级别。这个级别可以用来过滤特定的跟踪信息。在过滤时，可以决定是
只读取错误信息（例如，错误级别信息和比错误级别更重要的信息）。在另一个跟踪会话
期间，可以决定使用详细级别读取所有的跟踪信息。EventLevel枚举定义的值有
LogAlways、Critical、Error、Warning、Informational和Verbose：
    private static async Task NetworkRequestSample()
    {
      try
      {
        using (var client = new HttpClient())
        {
        string url = "http://www.cninnovation.com";
        sampleEventSource.Write("Network", new { Info = $"requesting {url}" });
        string result = await client.GetStringAsync(url);
        sampleEventSource.Write("Network",
          new
          {
            Info =
              $"completed call to {url}, result string length: {result.Length}"
          });
        }
        WriteLine("Complete.................");
      }
      catch (Exception ex)
      {
        sampleEventSource.Write("Network Error",
        new EventSourceOptions { Level = EventLevel.Error },
        new { Message = ex.Message, Result = ex.HResult });
        WriteLine(ex.Message);
      }
    }
在运行应用程序之前，需要进行一些配置，使用工具读取跟踪信息。下一节将解释如
何这样做。
  注意： EventSource的简单用法只能在.NET 4.6、.NET Core 1.0和更高版本中
使用。使用.NET早期版本创建的程序，需要创建一个派生自EventSource的类，参见下
面的章节。另外，要使用更简单的选项，可以使用NuGet包
Microsoft.Diagnostics.Tracing. EventSource，它可用于.NET的旧版本。
20.2.2 跟踪工具
为了分析跟踪信息，可以使用几种工具。logman工具是Windows的一部分。使用
logman，可以创建和管理事件跟踪会话，把ETW跟踪信息写入二进制日志文件。tracerpt
也可用于Windows。这个工具允许将从logman写入的二进制信息转换为CSV、XML或
EVTX文件格式。PerfView工具提供了ETW跟踪的图形化信息。
1. logman
下面开始使用logman从以前创建的应用程序中创建一个跟踪会话。需要先启动应用程
序，复制为应用程序创建的GUID。需要这个GUID和logman启动日志会话。start选项开始
一个新的会话来进行记录。-p选项定义了提供程序的名称；这里的GUID用来确定提供程
序。-o选项定义了输出文件，-ets选项直接把命令发送给事件跟踪系统，无需调度。确保
在有写入权限的目录中启动logman，否则它就不能写入输出文件mytrace.etl：
    logman start mysession -p {3b0e7fa6-0346-5781-db55-49d84d7103de} -o mytrace.e
tl -ets
运行应用程序之后，可以用stop命令停止跟踪会话：
    logman stop mysession -ets
  注意： logman有更多的命令，这里不做介绍。使用logman可以看到所有已安
装的ETW跟踪提供程序、它们的名字和标识符，创建数据收集器，在指定的时间启动
和停止，定义最大日志文件的大小等。使用logman - h可以看到logman的不同选项。
2. tracerpt
日志文件是二进制格式。为了得到可读的表示，可以使用实用工具tracerpt。有了这
个实用工具，指定- of选项，可以提取CSV、XML和EVTX格式：
    tracerpt mytrace.etl -o mytrace.xml -of XML
现在，信息可以用可读的格式获得。有了应用程序记录的信息，就可以在Task元素中
看到传递给Write方法的事件名，也可以找到EventData元素内的匿名对象：
        2
        0
        5
        0
        0
        0x0
        started app
        Startup
错误信息与跟踪信息一起显示，如下所示：
      An error occurred while sending the request.
      -2146233088
3. PerfView
读取跟踪信息的另一个工具是PerfView。可以从微软下载页面
（http://www.microsoft.com/downloads）上下载这个工具。这个工具的1.8版本有很大改
进，可将它用于Visual Studio 2015和EventSource中自描述的ETW格式。这个工具不需要安
装，只需要把它复制到需要的地方即可。启动这个工具后，它使用它所在的子目录，并允
许直接打开二进制ETL文件。图20-1显示了PerfView打开logman创建的文件mytrace.etl。
图20-1
20.2.3 派生自EventSource
除了直接使用EventSource的实例之外，最好在一个地方定义所有可以追踪的信息。
对于许多应用程序而言，定义一个事件源就足够了。这个事件源可以在一个单独的日志程
序集中定义。事件源类需要派生自基类EventSource。有了这个自定义类，所有应写入的
跟踪信息就可以用独立的方法来定义，这些独立方法调用基类的WriteEvent方法。类的实
现采用单例模式，提供一个静态的Log属性，返回一个实例。把这个属性命名为Log是使
用事件源的一个惯例。私有构造函数调用基类的构造函数，设置事件源名称（代码文件
EventSourceSampleInheritance / SampleEventSource.cs）：
    public class SampleEventSource : EventSource
    {
      private SampleEventSource()
        : base("Wrox-SampleEventSource2")
      {
      }
      public static SampleEventSource Log = new SampleEventSource();
      public void Startup()
      {
        base.WriteEvent(1);
      }
      public void CallService(string url)
      {
        base.WriteEvent(2, url);
      }
      public void CalledService(string url, int length)
      {
        base.WriteEvent(3, url, length);
      }
      public void ServiceError(string message, int error)
      {
        base.WriteEvent(4, message, error);
      }
    }
事件源类的所有void方法都用来写入事件信息。如果定义一个辅助方法，就需要用
NonEvent特性加以标记。
在只应写入信息性消息的简单场景中，不需要其他内容。除了把事件ID传递给跟踪
日志之外，WriteEvent方法有18个重载版本，允许传递消息string、int和long值，以及任意
数量的object。
在这个实现代码中，可以使用SampleEventSource类型的成员，写入跟踪消息，如
Program类所示。Main方法使跟踪日志调用Startup方法，调用NetworkRequestSample方
法，通过CallService方法创建一个跟踪日志，并使跟踪日志避免错误（代码文件
EventSourceSampleInheritance/Program.cs）：
    public class Program
    {
      public static void Main()
      {
        SampleEventSource.Log.Startup();
        WriteLine($"Log Guid: {SampleEventSource.Log.Guid}");
        WriteLine($"Name: {SampleEventSource.Log.Name}");
        NetworkRequestSample().Wait();
        ReadLine();
      }
      private static async Task NetworkRequestSample()
      {
        try
        {
        var client = new HttpClient();
        string url = "http://www.cninnovation.com";
        SampleEventSource.Log.CallService(url);
        string result = await client.GetStringAsync(url);
        SampleEventSource.Log.CalledService(url, result.Length);
        WriteLine("Complete.................");
        }
        catch (Exception ex)
        {
        SampleEventSource.Log.ServiceError(ex.Message, ex.HResult);
        WriteLine(ex.Message);
        }
      }
    }
用这些命令，在项目目录的开发命令提示符下运行应用程序时，会产生一个XML文
件，其中包含跟踪的信息：
    > logman start mysession -p "{1cedea2a-a420-5660-1ff0-f718b8ea5138}"
      -o log2.etl -ets
    > dnx run
    > logman stop mysession -ets
    > tracerpt log2.etl -o log2.xml -of XML
服务调用的事件信息如下：