假想你正在给学校写一个成绩管理系统，并没有太多编码经验的你，可能会这样子写。
class Student:
def __init__(self, name, math, chinese, english):
self.name = name
self.math = math
self.chinese = chinese
self.english = english
def __repr__(self):
return "".format(
self.name, self.math, self.chinese, self.english
)
看起来一切都很合理
>>> std1 = Student('', 76, 87, 68)
>>> std1
但是程序并不像人那么智能，不会自动根据使用场景判断数据的合法性，如果老师在录入成绩的时
候，不小心录入了将成绩录成了负数，或者超过100，程序是无法感知的。
聪明的你，马上在代码中加入了判断逻辑。
class Student:
def __init__(self, name, math, chinese, english):
self.name = name
if 0 ".format(
self.name, self.math, self.chinese, self.english
)
这下程序稍微有点人工智能了，能够自己明辨是非了。
程序是智能了，但在 __init__ 里有太多的判断逻辑，很影响代码的可读性。巧的是，你刚好学过
Property 特性，可以很好的应用在这里。于是你将代码修改成如下，代码的可读性瞬间提升了不少
class Student:
def __init__(self, name, math, chinese, english):
self.name = name
self.math = math
self.chinese = chinese
self.english = english
@property
def math(self):
return self._math
@math.setter
def math(self, value):
if 0 ".format(
self.name, self.math, self.chinese, self.english
)
程序还是一样的人工智能，非常好。
你以为你写的代码，已经非常优秀，无懈可击了。
没想到，人外有天，你的主管看了你的代码后，深深地叹了口气：类里的三个属性，math、
chinese、english，都使用了 Property 对属性的合法性进行了有效控制。功能上，没有问题，但就
是太啰嗦了，三个变量的合法性逻辑都是一样的，只要大于0，小于100 就可以，代码重复率太高
了，这里三个成绩还好，但假设还有地理、生物、历史、化学等十几门的成绩呢，这代码简直没法
忍。去了解一下 Python 的描述符吧。
经过主管的指点，你知道了“描述符”这个东西。怀着一颗敬畏之心，你去搜索了下关于 描述符
的用法。
其实也很简单，一个实现了  的类就是一个描述符。
什么描述符协议：在类里实现了 __get__() 、 __set__() 、 __delete__() 其中至少一个方法。
__get__ ： 用于访问属性。它返回属性的值，若属性不存在、不合法等都可以抛出对应的异
常。
__set__ ：将在属性分配操作中调用。不会返回任何内容。
__delete__ ：控制删除操作。不会返回内容。
对描述符有了大概的了解后，你开始重写上面的方法。
如前所述，Score 类是一个描述符，当从 Student 的实例访问 math、chinese、english这三个属性
的时候，都会经过 Score 类里的三个特殊的方法。这里的 Score 避免了 使用Property 出现大量的代
码无法复用的尴尬。
class Score:
def __init__(self, default=0):
self._score = default
def __set__(self, instance, value):
if not isinstance(value, int):
raise TypeError('Score must be integer')
if not 0 ".format(
self.name, self.math, self.chinese, self.english
)
实现的效果和前面的一样，可以对数据的合法性进行有效控制（字段类型、数值区间等）
以上，我举了下具体的实例，从最原始的编码风格到 Property ，最后引出描述符。由浅入深，一步
一步带你感受到描述符的优雅之处。
到这里，你需要记住的只有一点，就是描述符给我们带来的编码上的便利，它在实现
 、  的基本功能，同时有大大提高代码的复用率。
2. 描述符的访问规则
描述符分两种：
数据描述符：实现了 __get__ 和 __set__ 两种方法的描述符
非数据描述符：只实现了 __get__ 一种方法的描述符
你一定会问，他们有什么区别呢？网上的讲解，我看过几个，很多都把一个简单的东西讲得复杂
了。
其实就一句话，数据描述器和非数据描述器的区别在于：它们相对于实例的字典的优先级不同。
如果实例字典中有与描述符同名的属性，那么：
描述符是数据描述符的话，优先使用数据描述符
描述符是非数据描述符的话，优先使用字典中的属性。
这边还是以上节的成绩管理的例子来说明，方便你理解。
## 
class DataDes:
def __init__(self, default=0):
self._score = default
def __set__(self, instance, value):
self._score = value
def __get__(self, instance, owner):
print(" __get__")
return self._score
## 
class NoDataDes:
def __init__(self, default=0):
self._score = default
def __get__(self, instance, owner):
print(" __get__")
return self._score
class Student:
math = DataDes(0)
chinese = NoDataDes(0)
def __init__(self, name, math, chinese):
self.name = name
self.math = math
self.chinese = chinese
def __getattribute__(self, item):
print(" __getattribute__")
return super(Student, self).__getattribute__(item)
def __repr__(self):
return "".format(
self.name, self.math, self.chinese)
需要注意的是，math 是数据描述符，而 chinese 是非数据描述符。从下面的验证中，可以看出，
当实例属性和数据描述符同名时，会优先访问数据描述符（如下面的math），而当实例属性和非
数据描述符同名时，会优先访问实例属性（ __getattribute__ ）
>>> std = Student('xm', 88, 99)
>>>
>>> std.math
 __getattribute__
 __get__
88
>>> std.chinese
 __getattribute__
99
讲完了数据描述符和非数据描述符，我们还需要了解的对象属性的查找规律。
当我们对一个实例属性进行访问时，Python 会按 obj.__dict__ → type(obj).__dict__ →
type(obj).__dict__ 顺序进行查找，如果查找到目标属性并发现是一个描述符，Python 会
调用描述符协议来改变默认的控制行为。
3. 基于描述符如何实现property
经过上面的讲解，我们已经知道如何定义描述符，且明白了描述符是如何工作的。
正常人所见过的描述符的用法就是上面提到的那些，我想说的是那只是描述符协议最常见的应用之
一，或许你还不知道，其实有很多 Python 的特性的底层实现机制都是基于  的，比如我
们熟悉的 @property 、 @classmethod 、 @staticmethod 和 super 等。
先来说说 property 吧。
有了前面的基础，我们知道了 property 的基本用法。这里我直接切入主题，从第一篇的例子里精
简了一下。
class Student:
def __init__(self, name):
self.name = name
@property
def math(self):
return self._math
@math.setter
def math(self, value):
if 0 >>
>>> s1.math = 90
in __set__
>>> s1.math
in __get__
90
对于以上理解 property 的运行原理有困难的同学，请务必参照我上面写的两点说明。如有其他疑
问，可以加微信与我进行探讨。
4. 基于描述符如何实现staticmethod
说完了 property ，这里再来讲讲 @classmethod 和 @staticmethod 的实现原理。
我这里定义了一个类，用了两种方式来实现静态方法。
class Test:
@staticmethod
def myfunc():
print("hello")
## 
class Test:
def myfunc():
print("hello")
# 
myfunc = staticmethod(myfunc)
这两种写法是等价的，就好像在 property 一样，其实以下两种写法也是等价的。
@TestProperty
def math(self):
return self._math
math = TestProperty(fget=math)
话题还是转回到 staticmethod 这边来吧。
由上面的注释，可以看出 staticmethod 其实就相当于一个描述符类，而 myfunc 在此刻变成了一
个描述符。关于 staticmethod 的实现，你可以参照下面这段我自己写的代码，加以理解。
调用这个方法可以知道，每调用一次，它都会经过描述符类的 __get__ 。
>>> Test.myfunc()
in staticmethod __get__
hello
>>> Test().myfunc()
in staticmethod __get__
hello
5. 基于描述符如何实现classmethod
同样的 classmethod 也是一样。
class classmethod(object):
def __init__(self, f):
self.f = f
def __get__(self, instance, owner=None):
print("in classmethod __get__")