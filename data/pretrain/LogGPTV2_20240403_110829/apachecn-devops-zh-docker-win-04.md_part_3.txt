设置 Docker 使用本地注册表有两个选项。第一种方法是扩展注册服务器来保护通信——如果您向注册服务器映像提供 SSL 证书，它可以在 HTTPS 上运行。这是我在生产环境中会做的事情，但首先我可以使用另一个选项，并在 Docker 配置中做一个例外。如果在不安全注册表的允许列表中明确命名了 HTTP 注册表，Docker 引擎将允许使用该注册表。
You can run the registry image with HTTPS using your company's SSL certificate or a self-signed certificate, which means that you don't need to configure the Docker Engine to allow insecure registries. There is a Windows registry walkthrough in Docker's lab repository on GitHub, `docker/labs`, which explains how to do that.
# 配置 Docker 以允许不安全的注册表
Docker 引擎可以使用 JSON 配置文件来更改设置，包括引擎允许的不安全注册表列表。该列表中的任何注册表域都可以使用 HTTP 而不是 HTTPS，因此这不是您应该为托管在公共网络上的注册表做的事情。
Docker 的配置文件位于`%programdata%\docker\config\daemon.json` ( **守护进程**是 Linux 术语，指后台服务，所以这是 Docker Engine 配置文件的名称)。您可以手动编辑它，将本地注册表添加为安全选项，然后重新启动 Docker Windows 服务。此配置允许 Docker 通过 HTTP 使用本地注册表:
```
{  
    "insecure-registries": [    
         "registry.local:5000"  
    ]
}
```
如果您在 Windows 10 上使用 Docker Desktop，用户界面有一个很好的配置窗口，可以为您解决这个问题。不要手动编辑文件，只需右键单击状态栏中的 Docker 徽标，选择设置*、*导航到守护程序页面，并在不安全注册表列表中添加一个条目:
![](img/500523ff-3838-4543-8104-c4342100969a.png)
将本地注册表域添加到我的不安全列表后，我可以使用它来推送和拉取映像:
```
> docker image push registry.local:5000/infrastructure/registry:v2.6.2
The push refers to repository [registry.2019:5000/infrastructure/registry]
dab5f9f9b952: Pushed
9ab5db0fd189: Pushed
c53fe60c877c: Pushed
ccc905d24a7d: Pushed
470656dd7daa: Pushed
f32c8541ff24: Pushed
3ad7de2744af: Pushed
b9fa4df06e58: Skipped foreign layer
37c182b75172: Skipped foreign layer
v2.6.2: digest: sha256:d7e87b1d094d96569b346199c4d3dd5ec1d5d5f8fb9ea4029e4a4aa9286e7aac size: 2398 
```
任何可以通过网络访问我的 Docker 服务器的用户都可以使用`docker image pull`或`docker container run`命令来使用存储在本地注册表中的映像。您也可以通过在`FROM`指令中指定带有注册表域、存储库名称和标签的名称，将本地映像用作其他 Dockerfiles 中的基础映像:
```
FROM registry.local:5000/infrastructure/registry:v2.6.2
CMD ["cmd /s /c", "echo", "Hello from Chapter 4."]
```
There is no way to override the default registry, so you can't set your local registry as the default when a domain isn't specified – the default is always Docker Hub. If you want to use a different registry for images, the registry domain always has to be specified in the image name. Any image names you use without a registry address will be assumed to refer to images from `docker.io`.
# 将窗口映像层存储在本地注册表中
不允许您公开重新分发 Microsoft 映像的基础层，但允许您将它们存储在私有注册表中。这对于 Windows 服务器核心映像特别有用。该映像的压缩大小为 2 GB，微软每月都会发布一个新版本的映像，并在 Docker Hub 上列出最新的安全补丁。
更新通常只向映像添加一个新层，但该层可能是 300 MB 的下载。如果您有许多用户使用 Windows 映像，他们都需要下载这些层，这需要大量带宽和时间。如果您运行本地注册表服务器，您可以从 Docker Hub 中提取这些层一次，并将它们推送到您的本地注册表中。然后，其他用户从本地注册中心下载，从快速本地网络而不是从互联网下载。
您需要使用`allow-nondistributable-artifacts`字段为 Docker 配置文件中的特定注册表启用此功能:
```
{
  "insecure-registries": [
    "registry.local:5000"
  ],
 "allow-nondistributable-artifacts": [
    "registry.local:5000"
  ]
}
```
此设置不会直接显示在窗口用户界面的 Docker 中，但您可以在设置屏幕的高级模式中进行设置:
![](img/7fe10262-09e8-4ea1-90b6-01d668a719bf.png)
现在，我可以将 Windows *外来图层*推送到我的本地注册表中。我可以用自己的注册表域标记最新的 Nano Server 映像，并将该映像推送到那里:
```
PS> docker image tag mcr.microsoft.com/windows/nanoserver:1809 `
     registry.local:5000/microsoft/nanoserver:1809
PS> docker image push registry.local:5000/microsoft/nanoserver:1809
The push refers to repository [registry.2019:5000/microsoft/nanoserver]
75ddd2c5f09c: Pushed
37c182b75172: Pushing  104.8MB/243.8MB
```
当您将视窗基础映像图层储存在自己的注册表中时，图层编号将不同于 MCR 上的原始图层编号。这对 Docker 的映像缓存有影响。您可以使用完整的标签`registry.local:5000/microsoft/nanoserver:1809`在干净的机器上提取自己的纳米服务器映像。然后如果你拉微软官方图片，图层会再次下载。它们具有相同的内容但不同的标识，因此 Docker 不会将它们识别为缓存命中。
If you're going to store your own versions of base images for Windows, make sure you're consistent and only use those images in your Dockerfiles. That also applies to images that build from the Windows image – so if you want to use .NET, you'll need to build your own SDK image using your Windows image as the base. There's an overhead to this, but lots of large organizations prefer the approach because it gives them fine control over their base images.
# 使用商业登记处
运行您自己的注册表并不是拥有安全、私有的映像存储库的唯一方法，您可以使用一些第三方产品。实际上，它们都以相同的方式工作——您需要用注册表域标记您的映像，并向注册表服务器进行认证。有几个选项可供选择，最全面的选项来自 Docker，Inc .，该公司有不同的产品可用于不同的服务级别。
# Docker 集线器
Docker Hub 是使用最广泛的公共容器注册中心，在撰写本文时，平均每月有超过 10 亿次映像提取。您可以在 Hub 上托管无限的公共存储库，并支付订阅费用来托管多个私有存储库。
Docker Hub 有一个自动构建系统，因此您可以在 GitHub 或 Bitbucket 中将映像存储库链接到源代码存储库，每当您推送更改时，Docker 的服务器都会从存储库中的 Docker 文件构建映像–这是一个简单有效的托管**持续集成** ( **CI** )解决方案，尤其是当您使用可移植的多阶段 Docker 文件时。
Hub 订阅适用于多个用户在同一应用上工作的较小项目或团队。它有一个授权框架，用户可以在其中创建一个组织，该组织将成为存储库中的帐户名，而不是单个用户的帐户名。许多用户可以访问组织的存储库，这允许多个用户推送映像。
Docker Hub 也是商业软件分发的注册中心。它就像是服务器端应用的应用商店。如果你的公司生产商业软件，Docker Hub 可能是分发它的好选择。您以完全相同的方式构建和推送映像，但是您的源代码可以保密，只有打包的应用是公开的。
您可以向 Docker 注册为经验证的发行商，以确定有商业实体维护映像。Docker Hub 允许您过滤已验证的发布者，因此这是获得应用可见性的好方法:
![](img/d6a7c495-7147-4b6d-86cd-3c79835f0983.png)
对于托管在 Docker Hub 上的映像，您还可以通过认证流程。Docker 认证适用于软件映像和硬件栈。如果您的映像经过认证，它保证可以在任何经过认证的硬件上工作。Docker 在认证过程中测试了所有这些组合，这种端到端的保证对大型企业非常有吸引力。
# 可信注册表 Docker
**Docker 可信注册中心** ( **DTR** )是 Docker 企业套件的一部分，该套件是 Docker 公司的企业级**容器即服务** ( **CaaS** )平台..它面向在自己的数据中心或任何云中运行 Docker 主机集群的企业。Docker Enterprise 附带了一个名为**通用控制平面** ( **UCP** )的综合管理套件，该套件提供了一个界面来管理 Docker 集群中的所有资源—主机服务器、映像、容器、网络、卷以及其他一切。Docker Enterprise 还提供了 DTR，这是一个安全、可扩展的映像注册表。
DTR 运行在 HTTPS 之上，是一个集群服务，因此您可以跨集群部署多个注册服务器，以实现可扩展性和故障转移。您可以为 DTR 使用本地存储或云存储，因此如果您在 Azure 中运行，映像可以以几乎无限的容量保存在 Azure 存储中。像 Docker Hub 一样，您可以为共享存储库创建组织，但是使用 DTR，您可以通过创建自己的用户帐户或插入**轻量级目录访问协议** ( **LDAP** )服务(如活动目录)来管理认证。然后，您可以为细粒度权限配置基于角色的访问控制。
DTR 也提供安全扫描，这是一项扫描映像中二进制文件以检查已知漏洞的功能。您可以将扫描配置为每当推送映像时运行，或者建立时间表。当在旧映像的某个依赖项中发现新漏洞时，预设扫描会向您发出警报。通过 DTR 用户界面，您可以深入了解漏洞的详细信息，并查看确切的文件和确切的漏洞利用情况:
![](img/57b74dfa-9361-4b46-ac45-baa91cefca64.png)
还有一个主要的安全特性只有在 Docker Enterprise 中可用，即**内容信任**。Docker 内容信任允许用户对映像进行数字签名，以捕获批准工作流，因此 QA 和安全团队可以通过他们的测试套件运行映像版本，并对其进行签名，以确认他们批准了用于生产的候选版本。这些签名保存在 DTR。UCP 可以配置为只运行由特定团队签名的映像，因此您可以密切控制集群将运行什么软件，以及证明谁构建并批准了该软件的审计跟踪。
Docker Enterprise 有一套丰富的功能，可以通过友好的网络用户界面以及常用的 Docker 命令行进行访问。安全性、可靠性和可扩展性是功能集中的主要因素，这使得它成为寻求管理映像、容器和 Docker 主机的标准方法的企业用户的一个很好的选择。我将在[第 8 章](08.html)、*管理和监控 Docker 化解决方案*中介绍 UCP，在[第 9 章](09.html)、*中介绍 DTR 了解 Docker 化的安全风险和好处*。
If you want to try out Docker Enterprise in a sandbox environment with no setup requirements, browse to [http://trial.docker.com](http://trial.docker.com) for a hosted trial that you can use for 12 hours.
# 其他注册表
Docker 现在如此受欢迎，以至于许多第三方服务已经在其现有产品中添加了映像注册。在云上，你有来自**的 **EC2 容器注册** ( **ECR** )亚马逊网络服务** ( **AWS** )、微软的 Azure 容器注册、谷歌云平台的容器注册。所有这些产品都与标准的 Docker 命令行以及每个平台中的其他产品相集成，因此，如果您大量投资于一家云服务提供商，它们可能是不错的选择。
还有独立的注册中心产品，包括来自 JFrog 的 Artifactory 和 Quay.io，它们都是托管服务。拥有托管注册中心可以消除运行您自己的注册中心服务器的管理开销，如果您已经在使用提供注册中心的提供商提供的服务，那么评估该选项是有意义的。
所有注册表提供商都有不同的功能集和服务级别，您应该比较他们的产品，最重要的是，检查 Windows 支持的级别。大多数现有平台最初都是为了支持 Linux 映像和 Linux 客户端而构建的，Windows 可能没有功能对等。
# 摘要
在本章中，您已经学习了映像注册表的功能以及如何使用 Docker 来使用它。我讲述了存储库名称和映像标记，以识别应用版本或平台变体，以及如何运行和使用本地注册服务器-通过在容器中运行一个。
在 Docker 之旅的早期，您可能会使用私有注册表。当您开始整理现有的应用并尝试新的软件栈时，在快速的本地网络中推送和拉入映像可能会很有用，如果本地存储空间有问题，也可以使用云。随着您越来越多地使用 Docker 并推进到生产实现，您可能会有一个升级到 DTR 的路线图，以获得具有丰富安全功能的受支持的注册表。
现在，您已经很好地理解了如何共享映像和使用他人共享的映像，您可以考虑使用容器优先的解决方案设计，将可靠的软件组件引入我们自己的应用。