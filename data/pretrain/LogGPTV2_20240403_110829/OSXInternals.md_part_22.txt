A 32-entry Load Reorder Queue (LRQ) in the Load/Store Unit (LSU) that holds physical
addresses for tracking the order of loads and watching for hazards
A 32-entry Store Reorder Queue (SRQ) in the LSU that holds physical addresses and tracks all
active stores
A 32-entry Store Data Queue (SDQ) in the LSU that holds a double word of data
A 12-entry Prefetch Filter Queue (PFQ) for detecting data streams for prefetching
An 8-entry (64 bytes per entry) fully associative Store Queue for the L2 cache controller
3.3.5. Prefetching
Cache miss rates can be reduced through a technique called prefetchingthat is, fetching information
before the processor requests it. The 970FX prefetches instructions and data to hide memory latency.
It also supports software-initiated prefetching of up to eight data streams called hardware streams,
four of which can optionally be vector streams. A stream is defined as a sequence of loads that
reference more than one contiguous cache line.
The prefetch engine is a functionality of the Load/Store Unit. It can detect sequential access patterns
in ascending or descending order by monitoring loads and recording cache line addresses when there
are cache misses. The 970FX does not prefetch store misses.
Let us look at an example of the prefetch engine's operation. Assuming no prefetch streams are active,
the prefetch engine will act when there is an L1 D-cache miss. Suppose the miss was for a cache line
with address A; then the engine will create an entry in the Prefetch Filter Queue (PFQ)[29] with the
address of either the next or the previous cache linethat is, either A + 1 or A 1. It guesses the direction
(up or down) based on whether the memory access was located in the top 25% of the cache line
(guesses down) or the bottom 75% of the cache line (guesses up). If there is another L1 D-cache miss,
the engine will compare the line address with the entries in the PFQ. If the access is indeed
sequential, the line address now being compared must be either A + 1 or A 1. Alternatively, the
engine could have incorrectly guessed the direction, in which case it would create another filter entry
for the opposite direction. If the guessed direction was correct (say, up), the engine deems it a
sequential access and allocates a stream entry in the Prefetch Request Queue (PRQ)[30] using the next
available stream identifier. Moreover, the engine will initiate prefetching for cache line A + 2 to L1
and cache line A + 3 to L2. If A + 2 is read, the engine will cause A + 3 to be fetched to L1 from L2,
and A + 4, A + 5, and A + 6 to be fetched to L2. If further sequential demand-reads occur (for A + 3
next), this pattern will continue until all streams are assigned. The PFQ is updated using an LRU
algorithm.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 26 of 83
[29] The PFQ is a 12-entry queue for detecting data streams for prefetching.
[30] The PRQ is a queue of eight streams that will be prefetched.
The 970FX allows software to manipulate the prefetch mechanism. This is useful if the programmer
knows data access patterns ahead of time. A version of the data-cache-block-touch (dcbt) instruction,
which is one of the storage control instructions, can be used by a program to provide hints that it
intends to read from a specified address or data stream in the near future. Consequently, the processor
would initiate a data stream prefetch from a particular address.
Note that if you attempt to access unmapped or protected memory via software-initiated prefetching,
no page faults will occur. Moreover, these instructions are not guaranteed to succeed and can fail
silently for a variety of reasons. In the case of success, no result is returned in any registeronly the
cache block is fetched. In the case of failure, no cache block is fetched, and again, no result is
returned in any register. In particular, failure does not affect program correctness; it simply means
that the program will not benefit from prefetching.
Prefetching continues until a page boundary is reached, at which point the stream will have to be
reinitialized. This is so because the prefetch engine does not know about the effective-to-real address
mapping and can prefetch only within a real page. This is an example of a situation in which large
pageswith page boundaries that are 16MB apartwill fare better than 4KB pages.
On a Mac OS X system with AltiVec hardware, you can use the vec_dst() AltiVec function to
initiate data read of a line into cache, as shown in the pseudocode in Figure 37.
Figure 37. Data prefetching in AltiVec
while (/* data processing loop */) {
/* prefetch */
vec_dst(address + prefetch_lead, control, stream_id);
/* do some processing */
/* advance address pointer */
}
/* stop the stream */
vec_dss(stream_id);
The address argument to vec_dst() is a pointer to a byte that lies within the first cache line to be
fetched; the control argument is a word whose bits specify the block size, the block count, and the
distance between the blocks; and the stream_id specifies the stream to use.
3.3.6. Registers
The 970FX has two privilege modes of operation: a user mode (problem state) and a supervisor mode
(privileged state). The former is used by user-space applications, whereas the latter is used by the Mac
OS X kernel. When the processor is first initialized, it comes up in supervisor mode, after which it
can be switched to user mode via the Machine State Register (MSR).
The set of architected registers can be divided into three levels (or models) in the PowerPC
architecture:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 27 of 83
1. User Instruction Set Architecture (UISA)
2. Virtual Environment Architecture (VEA)
3. Operating Environment Architecture (OEA)
The UISA and VEA registers can be accessed by software through either user-level or supervisor-
level privileges, although there are VEA registers that cannot be written to by user-level instructions.
OEA registers can be accessed only by supervisor-level instructions.
3.3.6.1. UISA and VEA Registers
Figure 38 shows the UISA and VEA registers of the 970FX. Their purpose is summarized in Table
36. Note that whereas the general-purpose registers are all 64-bit wide, the set of supervisor-level
registers contains both 32-bit and 64-bit registers.
Figure 38. PowerPC UISA and VEA registers
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 28 of 83
Table 36. UISA and VEA Registers
Name Width Count Notes
General-Purpose 64-bit 32 GPRs are used as source or destination
Registers (GPRs) registers for fixed-point operationse.g., by
fixed-point load/store instructions. You
also use GPRs while accessing special-
purpose registers (SPRs). Note that GPR0
is not hardwired to the value 0, as is the
case on several RISC architectures.
Floating-Point 64-bit 32 FPRs are used as source or destination
Registers (FPRs) registers for floating-point instructions.
You also use FPRs to access the Floating-
Point Status and Control Register
(FPSCR). An FPR can hold integer,
single-precision floating-point, or double-
precision floating-point values.
Vector Registers 128-bit 32 VRs are used as vector source or
(VRs) destination registers for vector
instructions.
Integer Exception 32-bit 1 The XER is used to indicate carry
Register (XER) conditions and overflows for integer
operations. It is also used to specify the
number of bytes to be transferred by a
load-string-word-indexed (lswx) or store-
string-word-indexed (stswx) instruction.
Floating-Point Status 32-bit 1 The FPSCR is used to record floating-
and Control Register point exceptions and the result type of a
(FPSCR) floating-point operation. It is also used to
toggle the reporting of floating-point
exceptions and to control the floating-
point rounding mode.
Vector Status and 32-bit 1 Only two bits of the VSCR are defined:
Control Register the saturate (SAT) bit and the non-Java
(VSCR) mode (NJ) bit. The SAT bit indicates that
a vector saturating-type instruction
generated a saturated result. The NJ bit, if
cleared, enables a Java-IEEE-C9X-
compliant mode for vector floating-point
operations that handles denormalized
values in accordance with these standards.
When the NJ bit is set, a potentially faster
mode is selected, in which the value 0 is
used in place of denormalized values in
source or result vectors.
Condition Register 32-bit 1 The CR is conceptually divided into eight
(CR) 4-bit fields (CR0CR7). These fields store
results of certain fixed-point and floating-
point operations. Some branch instructions
can test individual CR bits.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 29 of 83
Vector Save/Restore 32-bit 1 The VRSAVE is used by software while
Register (VRSAVE) saving and restoring VRs across context-
switching events. Each bit of the
VRSAVE corresponds to a VR and
specifies whether that VR is in use or not.
Link Register (LR) 64-bit 1 The LR can be used to return from a
subroutineit holds the return address after
a branch instruction if the link (LK) bit in
that branch instruction's encoding is 1. It is
also used to hold the target address for the
branch-conditional-to-Link-Register
(bclrx) instruction. Some instructions can
automatically load the LR to the
instruction following the branch.
Count Register (CTR) 64-bit 1 The CTR can be used to hold a loop count
that is decremented during execution of
branch instructions. The branch-
conditional-to-Count-Register (bcctrx)
instruction branches to the target address
held in this register.
Timebase Registers 32-bit 2 The Timebase (TB) Register, which is the
(TBL, TBU) concatenation of the 32-bit TBU and TBL
registers, contains a periodically
incrementing 64-bit unsigned integer.
Processor registers are used with all normal instructions that access memory. In fact, there are no
computational instructions in the PowerPC architecture that modify storage. For a computational
instruction to use a storage operand, it must first load the operand into a register. Similarly, if a
computational instruction writes a value to a storage operand, the value must go to the target location
via a register. The PowerPC architecture supports the following addressing modes for such
instructions.
 Register IndirectThe effective address EA is given by (rA | 0).
 Register Indirect with Immediate IndexEA is given by (rA | 0) + offset, where offset can
be zero.
 Register Indirect with IndexEA is given by (rA | 0) + rB.
rA and rB represent register contents. The notation (rA | 0) means the contents of register rA unless
rA is GPR0, in which case (rA | 0) is taken to be the value 0.
The UISA-level performance-monitoring registers provide user-level read access to the 970FX's
performance-monitoring facility. They can be written only by a supervisor-level program such as the
kernel or a kernel extension.
Apple's Computer Hardware Understanding Development (CHUD) is a suite of programs (the
"CHUD Tools") for measuring and optimizing performance on Mac OS X. The software in the
CHUD Tools package makes use of the processor's performance-monitoring counters.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 30 of 83
The Timebase Register
The Timebase (TB) provides a long-period counter driven by an implementation-dependent
frequency. The TB is a 64-bit register containing an unsigned 64-bit integer that is incremented
periodically. Each increment adds 1 to bit 63 (the lowest-order bit) of the TB. The maximum value
that the TB can hold is 264 1, after which it resets to zero without generating any exception. The TB
can either be incremented at a frequency that is a function of the processor clock frequency, or it can
be driven by the rising edge of the signal on the TB enable (TBEN) input pin.[31] In the former case,
the 970FX increments the TB once every eight full frequency processor clocks. It is the operating
system's responsibility to initialize the TB. The TB can be readbut not written tofrom user space. The
program shown in Figure 39 retrieves and prints the TB.
[31] In this case, the TB frequency may change at any time.
Figure 39. Retrieving and displaying the Timebase Register
// timebase.c
#include 
#include 
#include 
u_int64_t mftb64(void);
void mftb32(u_int32_t *, u_int32_t *);
int
main(void)
{
u_int64_t tb64;
u_int32_t tb32u, tb32l;
tb64 = mftb64();
mftb32(&tb32u, &tb32l);
printf("%llx %x%08x\n", tb64, tb32l, tb32u);
exit(0);
}
// Requires a 64-bit processor
// The TBR can be read in a single instruction (TBU || TBL)
u_int64_t
mftb64(void)
{
u_int64_t tb64;
__asm("mftb %0\n\t"
: "=r" (tb64)
:
);
return tb64;
}
// 32-bit or 64-bit
void
mftb32(u_int32_t *u, u_int32_t *l)
{
u_int32_t tmp;
__asm(
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 31 of 83
"loop: \n\t"
"mftbu %0 \n\t"
"mftb %1 \n\t"
"mftbu %2 \n\t"
"cmpw %2,%0 \n\t"
"bne loop \n\t"
: "=r"(*u), "=r"(*l), "=r"(tmp)
:
);
}
$ gcc -Wall -o timebase timebase.c
$ ./timebase; ./timebase; ./timebase; ./timebase; ./timebase
b6d10de300000001 b6d10de4000002d3
b6d4db7100000001 b6d4db72000002d3
b6d795f700000001 b6d795f8000002d3
b6da5a3000000001 b6da5a31000002d3
b6dd538c00000001 b6dd538d000002d3
Note in Figure 39 that we use inline assembly rather than create a separate assembly source file. The
GNU assembler inline syntax is based on the template shown in Figure 310.
Figure 310. Code template for inline assembly in the GNU assembler
__asm__ volatile(
"assembly statement 1\n"
"assembly statement 2\n"
...
"assembly statement N\n"
: outputs, if any
: inputs, if any
: clobbered registers, if any
);
We will come across other examples of inline assembly in this book.
Viewing Register Contents: The Mac OS X Way
The contents of the TBR, along with those of several configuration registers, memory
management registers, performance-monitoring registers, and miscellaneous registers can
be viewed using the Reggie SE graphical application (Reggie SE.app), which is part of
the CHUD Tools package. Reggie SE can also display physical memory contents and
details of PCI devices.
3.3.6.2. OEA Registers
The OEA registers are shown in Figure 311. Examples of their use include the following.
The bit-fields of the Machine State Register (MSR) are used to define the processor's state. For
example, MSR bits are used to specify the processor's computation mode (32-bit or 64-bit), to
enable or disable power management, to determine whether the processor is in privileged
(supervisor) or nonprivileged (user) mode, to enable single-step tracing, and to enable or
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 32 of 83
disable address translation. The MSR can be explicitly accessed via the move-to-MSR (mtmsr),
move-to-MSR-double (mtmsrd), and move-from-MSR (mfmsr) instructions. It is also modified
by the system-call (sc) and return-from-interrupt-double (rfid) instructions.
The Hardware-Implementation-Dependent (HID) registers allow very fine-grained control of
the processor's features. Bit-fields in the various HID registers can be used to enable, disable, or
alter the behavior of processor features such as branch prediction mode, data prefetching,
instruction cache, and instruction prefetch mode and also to specify which data cache
replacement algorithm to use (LRU or first-in first-out [FIFO]), whether the Timebase is
externally clocked, and whether large pages are disabled.
The Storage Description Register (SDR1) is used to hold the page table base address.
Figure 311. PowerPC OEA registers
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 33 of 83
3.3.7. Rename Registers
The 970FX implements a substantial number of rename registers, which are used to handle register-
name dependencies. Instructions can depend on one another from the point of view of control, data, or