title:Inductive methods and contract-signing protocols
author:Rohit Chadha and
Max I. Kanovich and
Andre Scedrov
Inductive Methods and Contract-Signing Protocols∗
R. Chadha M. Kanovich A. Scedrov
{rchadha@math,PI:EMAIL,scedrov@cis}.upenn.edu
University of Pennsylvania
ABSTRACT
Garay, Jakobsson and MacKenzie introduced the notion of
abuse-free distributed contract-signing: at any stage of the
protocol, no participant A has the ability to prove to an
outside party, that A has the power to choose between com-
pleting the contract and aborting it. We study a version
of this property, which is naturally formulated in terms of
game strategies, and which we formally state and prove for a
two-party, optimistic contract-signing protocol. We extend
to this setting the formal inductive proof methods previously
used in the formal analysis of simpler, trace-based properties
of authentication protocols.
1.
INTRODUCTION
Distributed contract signing over a network involves many
challenges in mimicking the features of paper contract sign-
ing. For instance, a paper contract is usually signed by
both parties at the same time and at the same place, but
distributed electronic transactions over a network are in-
herently asymmetric in that someone has to send the ﬁrst
message.
Several digital contract-signing protocols have been de-
vised in order to overcome this basic asymmetry and to
achieve symmetric properties such as fairness, namely, nei-
ther party signs the contract without receiving the other
party’s signature. Even and Yacobi [8] showed that no de-
terministic two-party contract-signing protocol can achieve
fairness. Even [7] introduced contract-signing protocols with
a third party. A trusted third party can enforce the con-
tract after it witnesses a partial completion of the protocol.
In optimistic contract-signing protocols [1, 10] the trusted
third party is contacted only in case of a dispute, otherwise
the protocol can be completed without involving the third
party. Such protocols involve several subprotocols that al-
∗
Chadha and Scedrov were partially supported by DoD
MURI “Semantic Consistency in Information Exchange” as
ONR Grant N00014-97-1-0505, NSF Grant CCR-9800785
and by NSF grant CCR 0098096.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
low a contract to be signed normally or aborted or resolved
by the trusted third party. This makes reasoning about such
protocols complicated. A formal analysis of such protocols
was initiated in [18, 15] using a ﬁnite state veriﬁcation tool.
Another kind of symmetry desirable in distributed con-
tract signing was identiﬁed in [10]: a fair protocol is said to
be abuse-free if, at any stage of the protocol, it is impossible
for any participant, say A, to be able to prove to an outside
challenger that A has the power to choose between complet-
ing the contract and aborting it. (If the intruder takes only
ﬁnitely many steps, then it is a consequence of fairness that
there are only two possible outcomes: either no one receives
a 1valid contract or both parties receive a valid contract.)
Abuse-freeness is an important property of contract signing.
Indeed, suppose that Alice and Bob use a protocol that is
not abuse-free. Then it is possible for one party, say Alice,
at some point to convince another party, Charlie, that Bob
is committed to the contract, whereas Alice is not yet. This
would put Bob at a distinct disadvantage, because there is a
risk that Alice does not really want to sign the contract with
Bob but only use Bob’s willingness to sign to gain leverage
for another contract with Charlie.
Our aim in this paper is to study a version of abuse-
freeness for a two-party optimistic contract-signing proto-
col slightly revised from [10, 15]. We adopt the multiset-
rewriting formalism for protocol analysis [3], which reﬂects
the two basic assumptions of the Dolev-Yao model [16, 6,
21], perfect cryptography coupled with nondeterministic com-
putation on the part of the intruder. These assumptions
provide an idealized setting in which protocol analysis be-
comes relatively tractable.
One of the decisions is how to model dishonest partici-
pants. We model two kinds of dishonest participants. One
is a weakly dishonest participant, which behaves normally
but is always ready to accept messages from the network
and take no further part in the protocol. We also discuss a
strongly dishonest participant which shares its private keys
with the Dolev-Yao intruder prior to the execution of the
protocol. On the other hand, we assume that the trusted
third party is well-behaved and does not play the role of a
party interested in signing the contract.
We formally state and prove a version of abuse-freeness
similar to the version suggested in [15]. We call our ver-
sion of the property the balance property.
In particular,
assuming that the intruder takes only ﬁnitely many steps
and that any one protocol participant and the trusted third
party are honestly following the protocol, we prove that,
at any stage of the protocol, the other protocol participant,
176even a strongly dishonest one, does not have both the power
to complete the contract as well as the power to abort it. In
this way, if Charlie requests any particular outcome, Alice
would not be able to guarantee it.
More precisely, we view A’s power to abort as A’s abil-
ity to prevent the successful completion of the contract in
coalition with the intruder, regardless of the actions of the
other (honest) participant and the actions of the trusted
third party. Similarly, we view A’s power to complete the
contract as A’s ability to prevent the abort in coalition with
the intruder, regardless of the actions of the other (honest)
participant and the actions of the trusted third party.
Because our setting is asynchronous and a participant can-
not control the actions of other parties, we take the view
that the only ability that a participant has is that it may
choose to ﬁre a certain subset of its allowable actions at any
stage of the protocol and hope to determine the outcome
in that way. Our version of abuse-freeness, which assumes
fairness, may be stated equivalently in terms of certain re-
cursive properties of ﬁnite trees, which we prove by inductive
methods. (Fairness itself is proved by inductive proof meth-
ods as well.) Inductive methods were introduced in [17] and
used more recently in [4], both in the analysis of simpler
properties of authentication protocols [21].
Let us emphasize that balance is not a trace-based prop-
erty in that it refers to the entire execution tree rather than
to any single branch. In particular, balance is not a corre-
spondence property in the sense of [21]. Nevertheless, we
show that balance may be represented as formal provability
in a logical system in which formal derivations correspond
to protocol execution trees.
In Section 2 we describe our revised version of the Garay-
Jakobsson-MacKenzie (GJM) two-party contract-signing pro-
tocol [10, 15]. Section 3 contains a brief description of the
multiset-rewriting framework [3], which is used in Section 4
to formalize the protocol. Section 5 contains the discussion
of fairness of the protocol. In Section 6 we discuss the bal-
ance property and give an inductive proof of this property.
In Section 7 we indicate how balance may be represented
using provability in linear logic [11].
We thank Karthikeyan Bhargavan, Iliano Cervesato, David
Dill, Satyaki Dutta, Carl Gunter, Joshua Guttman, Steve
Kremer, Philip Mackenzie, Dahlia Mahlki, Cathy Mead-
ows, Jonathan Millen, John Mitchell, Sylvan Pinsky, Vitaly
Shmatikov and Paul Syverson for interesting and helpful
discussions. We would also like to thank the anonymous
referees for their useful comments.
2. THE GARAY-JAKOBSSON-MACKENZIE
PROTOCOL
We now describe a protocol obtained by a slight revision of
the two-party optimistic contract-signing protocol of Garay,
Jakobsson, and MacKenzie in [10, 15]. We discuss the dif-
ferences in our protocol and these protocols in Section 2.3.
In the protocol, the two parties may contact a trusted third
party, henceforth referred to as T . We start by describ-
ing the purpose, cryptographic assumptions, communication
model under which the protocol is meant to be executed.
upon contractual text, m with the help of a trusted third
party, T .
Each protocol participant is assumed to have a private
signing key and a corresponding public veriﬁcation key. Each
participant is identiﬁed with this private signing/public ver-
iﬁcation key pair. In particular, for the rest of a section if
we say that ”A can..”, we mean anyone that possesses the
private signing key of A.
The protocol uses a cryptographic primitive, private con-
tract signature(PCS) introduced in [10]. We write
P CSO(m, R, T ), for the private contract signature of O on
a contract text m, intended for R with respect to T . The
main properties of private contract signatures are:
1) P CSO(m, R, T ) can be computed by O.
2) There is a probabilistic polynomial−time algorithm P CS
−V er such that P CS−V er(m, O, R, T, S) = true if S=
P CSO(m, R, T ). This algorithm can be run by anybody
who knows the public veriﬁcation keys of O, R and T .
3) R can compute S = F akeSignR(m, O, T ) such that P CS
−V er(m, O, R, T, S) = true. Nobody other than O or R
can compute S such that P CS−V er(m, O, R, T, S) = true.
O can verify whether it was created by R and similarly R
can verify whether it was created by O. T can also verify
whether it was generated by O or R.
4) O can convert P CSO(m, R, T ) into a conventional digi-
tal signature, sigO(m). There is a probabilistic-polynomial
time algorithm, S−V er such that S−V er(m, O, T, S) = true
iﬀ S = sigO(m). Nobody other than O can compute S such
that S−V er(m, O, T, S) = true.
5) T can convert P CSO(m, R, T ) into a digital signature,
T P−SigO(m). There is a probabilistic-polynomial time al-
gorithm, T−V er such that T−V er(m, O, T, S) = true iﬀ
S = T P−SigO(m). Nobody other than T can compute S
such that T−V er(m, O, T, S) = true.
Our formalization of the cryptographic primitives will in-
volve an abstract version of these primitives.
Usually, no assumption is made on the communication
channel between the two parties. An intruder may assume
full control over the communication channel between these
two parties. However the protocol participants have sepa-
rate communication channels to T. These channels are as-
sumed to be write-protected, i.e., nobody except the T and
the participant(or anybody who possesses the private sign-
ing key of the participant) can write on this channel. Fur-
thermore these channels are assumed to be transparent; the
channel never loses a message, unless the intended party
reads it; and the intruder can observe messages from this
channel without blocking or delaying them. We assume an
asynchronous communication model. We have relaxed the
condition of private channels as stated in [10].
T is assumed to maintain a permanent database of each of
the protocol instances that it has acted upon before. In our
analysis, we further assume that T does not misbehave and
does not act as a party to a contract. In [15], the authors
allowed T to be accidently corrupt, namely the database of
T was visible to the intruder. Since we have relaxed the no-
tion of private channels, we do allow the accidently corrupt
behavior of T , by making all communication between it and
the participants observable to the intruder.
2.1 Purpose and assumptions of the protocol
2.2 Protocol Description
The purpose of the protocol is to enable two parties,
O and R, to exchange signatures on a previously agreed
The protocol consists of three subprotocols: exchange,
abort, and resolve subprotocols. Usually the parties would
177try to achieve the contract by executing the exchange sub-
protocol. They would contact T using one of the other two
subprotocols when they think something is amiss. Once
they contact it, they no longer take part in the exchange
subprotocol.
In the protocol description, when a participant A sends
a message, mssg intended for B, it will be abbreviated as
A → B : mssg.
In the description, the two parties will be designated as O,
the originator and R, the respondent. Before executing the
protocol, the participants are assumed to have agreed upon
each other’s identity, the contractual text m and the identity
of the trusted third party, T . As in [10, 15], we do not
consider how this is achieved, in our analysis. In addition,
they also agree on a globally unique identiﬁer n, before they
execute the protocol. Diﬀerent instances of the protocol
would have diﬀerent identiﬁers. We further assume that the
intruder knows this identiﬁer. Let pd =.
We begin by describing the exchange subprotocol.
Exchange Subprotocol: O displays its commitment to
sign by sending P CSO(pd, R, T ), intended for R. If R re-
ceives it, then it displays its commitment by sending P CSR
(pd, O, T ), intended for O. If O receives it, it sends sigO(pd),
intended for R. If R receives it, it sends sigR(pd) intended
for O and the protocol ﬁnishes for R. The protocol ﬁnishes
for O when it receives sigR(pd). The protocol steps are de-
scribed as
O → R : me1=P CSO(, R, T )
R → O : me2=P CSR(, O, T )
O → R : me3=sigO()
R → O : me4=sigR()
Abort Subprotocol: O may request T to abort the
protocol after it sends P CSO(pd, R, T ) and before it re-
ceives P CSR(pd, O, T ). This it does by sending ma1 =
sigO(abort, pd) on the private O−T channel. T on receiving
the abort request, checks it database and checks if it has
ever answered a request for pd that it received before on
the O−T Channel. If it has, it will not send back anything,
otherwise it checks if it has resolved pd before. If it has, it
sends the stored resolution T P−SigO(pd), T P−SigR(pd).
Otherwise it issues an abort token, sigT (ma1) and sends it
on the O−T channel. It raises its abort ﬂag for pd and stores
the abort token. An abort token is a promise by T that it
has not and will not resolve pd in future.
While R is not allowed to abort, it is allowed to quit before
it receives the ﬁrst message.
Resolve Subprotocol: O may request T to resolve the
protocol after it sends sigO(pd) and before it receives
sigR(pd). R may run the subprotocol after it sends P CSR(pd
, O, T ) and before it receives sigO(pd).
R requests T to resolve the protocol instance by sending