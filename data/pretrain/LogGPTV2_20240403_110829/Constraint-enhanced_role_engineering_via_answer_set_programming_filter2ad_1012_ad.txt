Robert_Schreiber/.
• user[r1] ⊆ user[r2] and perm[r2] ⊆ perm[r1] so that any
user of r1 is a member of r2 and any permission of r2 is also
assigned to r1.
It is guaranteed that at least two thirds of the constraints in Cman
are not satisﬁed by γ.
Experiments were performed on a Windows 7 laptop with Intel
Core 2.66GHz i5-560M processor and 4GB RAM. ASP programs
were executed with the grounder gringo 3.0.3 and the solver clasp
2.0.0.6 Our concerns lie in the efﬁciency and the scalability of the
approach. Each test was limited to 600 seconds and forced to termi-
nate otherwise. Table 3 shows the experiment results, with varying
(α+, α−) but ﬁxed β = 40. For each setting of (α+, α−) in each
data-set, the result was averaged over 3 runs with constraints gener-
ated separately. Each run includes both the transformation process
and ASP solving process.
Table 3: The computing time in seconds when γ0 does not exist
and when it does. t/o denotes “timeout”.
α−
α+
0.9
1.0
1.0
1.5
1.8
2.0
1.0
1.5
Dom
EMEA
FW1
FW2
HCare
MelbS
USA
APJ
AmSm
AmLa
Dom
EMEA
FW1
FW2
HCare
MelbS
USA
APJ
AmSm
AmLa
0.32
1.73
2.01
2.54
0.12
0.20
12.33
1.51
15.20
42.57
0.82
3.13
5.10
12.92
1.03
1.32
25.82
4.74
18.23
219.16
γ0 does not exist
0.29
1.99
2.79
2.87
0.12
0.18
14.91
1.99
21.28
132.65
2.62
4.18
6.53
34.17
3.77
2.92
36.18
4.12
30.03
426.83
0.28
2.21
3.23
3.11
0.14
0.22
15.11
2.26
25.05
401.22
γ0 exists
6.17
5.93
8.13
53.29
5.29
4.03
51.55
5.64
38.85
t/o
0.32
2.47
3.32
3.51
0.13
0.22
16.92
2.22
27.31
t/o
6.29
5.88
8.58
87.15
5.83
6.29
52.17
6.13
56.93
t/o
1.71
2.58
5.23
4.51
1.27
0.36
16.15
2.02
16.28
79.88
3.53
6.12
12.17
56.31
4.60
2.01
32.01
3.54
35.17
193.27
1.80
2.61
5.18
5.60
1.30
0.42
18.31
2.34
24.32
t/o
7.83
7.21
22.19
95.28
8.18
6.89
58.09
5.11
43.25
t/o
When no solution existed for tested RCP instances, all tests ter-
minated within the time limit, except for AmLa. The results were
encouraging; even for large-size data-set AmSm, the tests returned
within 30 seconds. When a solution γ0 was found, the computing
time was more demanding, but still acceptable; for example, so-
lutions were returned within 60 seconds for AmSm. The tests for
AmLa timed out as (α+, α−) increases.
It is interesting that the tests for AmSm were about 4 to 10 times
less efﬁcient than those for APJ, while they are well-matched in
terms of |U| and |P|. However, we notice that APJ has twice as
many role as AmSm; as a result, VPA and VUPA of AmSm are
much larger than those of APJ. It seems plausible to say that the
time is sensitive to VPA and VUPA. This is further conﬁrmed by
FW2. Medium-size as FW2 is, VPA is 67.6 and VUPA is 112.08;
the tests of FW2 were much slower than those of FW1. However,
one exception is EMEA. Despite the large VPA and VUPA, the tests
were efﬁcient, perhaps because of the small |U|. The number of
users also played a dominate role in the USA cases.
In Figure 5, we compare the performance when β takes 20, 40,
and 60, respectively, with α+ = 1.5 and α− = 0.9. It can be seen
that the value of β has an impact, especially on large data-sets.
When β = 60, the tests of AmLa timed out. Except for AmLa,
the approach scaled well with respect to β. We are interested in the
6http://sourceforge.net/projects/potassco/.
In order to discover “good” conﬁgurations, RE usually has cer-
tain optimization objectives, such as minimizing the number of
roles or the number of edges (i.e., |UA| + |PA|). ASP provides
strong support in this regard. We ﬁrst deﬁne the roles that are as-
sociated with any user or permission by rule (20); statement (21)
minimizes the role set. Statement (22) minimizes the edge set.
not_dangling(R) ← hold (asg(R, _, _), γ0), role(R).
#minimize{not_dangling(R)}.
#minimize{hold (asg(X1, X2, T ), γ0) : type(T )}.
(20)
(21)
(22)
Roles’ Semantic Meanings.
There is a possibility that a solution fails to retain roles’ seman-
tic meanings. Structural constraints can be put to exclude such so-
lutions. A role’s meaning is essentially captured by a real-world
concept, which can expressed as a set of attributes; a role is said to
match its meaning if the set of its users is exactly the set of users
who have all the attributes in the corresponding set [21]. There-
fore, for a semantically meaningful role r, a constraint of the form
user[r] = {u1,··· , un} protects its meaning.
Bounded Changes.
Previously, an arbitrary number of changes could be applied to
the selected conﬁguration γ1. However, since γ1 is either the run-
ning one or discovered by an RE tool, it makes more sense to seek a
solution γ0 in proximity to γ1. In this case, the number of changes
applied to γ1 should be bounded. Suppose B is the bound.
We encode the requirement of bounded changes in an ASP pro-
gram Π(B). No doubt that Π(B) contains the following statement
0 #count {applied (G)} B.
which is a direct encoding of this requirement. We could have one
more restriction. Let N be the number of assignments in γ1 (i.e.
N = |UA1| + |PA1|). Π(B) contains the following statement
(N−B) #count{hold (asg(X1, X2, T ), γ0) : type(T )} (N +B).
It says that one can make γ0 from γ1 by deleting at most B many
assignments or by adding at most B many assignments.
Weights.
One may associate weights with conﬁgurations in Γ. For exam-
ple, consider a migration process where an organization is running
under a conﬁguration γcur and may migrate into γmig suggested
by RE tools. In this case, Γ = {γcur, γmig}. Considering that
γmig is optimized in various ways, one may associate γmig with
a weight of 3 and γcur with a weight of 1 so that the closeness to
γmig takes priority. Let weight(γ, w) denotes a fact that γ has a
weight of w. To support weights, statement (23) is substituted for
(11) in Π(quality)
#minimize [dif (Asg, Y ) : weight(Y, W ) = W ] .
(23)
Multiple Solutions.
It is likely that more than one solution exists for an RCP in-
stance. Although these solutions are deemed equally good with re-
spect to closeness to Γ, they may differ in other prospects, such as
the above-mentioned optimization objectives. Since these metrics
can vary from case to case and may be subjective, it is debatable
to hard-code them in programs. ASP solvers are good enough to
return all or a given number of solutions. Thus one may choose an
appropriate conﬁguration from them, either manually or by some
evaluation algorithms. When closeness is not a major concern, one
Figure 5: The comparison of computing time with a solution re-
turned when varying β = 20, β = 40, and β = 60.
number of constraints in Cman rather than Cran for two reasons:
(1) the encoding for Cman is more complex, which may result in
considerable overhead; (2) γ satisﬁes Cran but not Cman.
Cases where |Γ| > 1.
For each data-set, we already have one conﬁguration. To acquire
more conﬁgurations, we ran the role mining function of IBM Role
Modeling Assistant [15] with the user-permission assignments of
each data-set.
However, Γ did not necessarily meet the assumption that R1 =
R2 for any γ1, γ2 ∈ Γ. As will be discussed in Section 6.2, we pre-
processed Γ to meet the assumption. First, we composed a tuple of
roles, each of which is from a conﬁguration of Γ, compared the sim-
ilarity between roles in the tuple, and regarded them as counterpart
roles if they were similar enough (by some similarity threshold).
We used the similarity measure of [29, Deﬁnition 3]. In this way,
we actually named the roles of each conﬁguration and picked the
same name for counterpart roles. Second, if there exists γ1, γ2 ∈ Γ
such that |R1| (cid:54)= |R2|, we assume, without loss of generality, that