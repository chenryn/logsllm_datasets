TrustCert Confimation
N
ay htpu/
图4-23
点击一系列的弹出对话框后，会安装Fiddler的根证书。当Fiddler解密数据流时，依赖
Windows证书库的应用不会再显示安全错误。
要删除所有Fiddler生成的证书，应取消选中DecryptHTTPStraffie复选框，然后按下
RemoveInterceptionCertificates按钮。
95
---
## Page 96
第4章配置Fiddler和客户端
手动信任Fiddler根证书
如果你希望手动信任Fiddler根证书，可启动certmgr.msc，并把信任证书从Personal文件夹
拖拽到TrustedRootCertificationAuthorities文件夹。如果希望基于整个计算机做这个修改，执行
以下步骤：
1）在Personal文件夹中右击DO_NOT_TRUST_FIDDLERROOT证书，选择AllTasks>Export
2）把根证书以DEREncodedX509Binary形式导出成桌面FiddlerRoot.cer文件。
3）启动mmc.exe。
4）点击 File >Add/Remove Snap-In
5）选中Certificates并按下Add键。
6）当弹出对话框 This snap-in will always manage certificates for，选中 Computer Account。
7）点击Local Computer，然后点击Finish，再点击OK。
8）打开节点Certificates（LocalComputer）。
9）右击文件夹Trusted Root CertificateAuthorities，选择All Tasks>Import。
10）选中在第2步中导出的文件，并导入它。
其他HTTPS选项
在关闭FiddlerOptions窗口之前，考虑使用下拉条配置使用哪个进程解析数据流，如图
4-24所示。
 Dgcrypt HTTPS traffic
如果你只计划解析浏览器数据流，那么选中该选项，避
..fomalprocesses
免解析其他不感兴趣的应用数据流。除了保存CPU循环和
ffomapocesses
内存，选中该选项可以防止不是以标准方式使用HTTPS的
-..from remote dlents only
应用所引发的问题（如Outlook使用RPC-over-HTTPS通道
连接Exchange服务器）以及不关心Fiddler在Windows信任
图 4-24
库（如Dropbox）中的根证书所引发的问题。
你还可以使用文本框列出不需要解密的HTTPS数据流的服务器。举个例子，我通过以下
设置防止对OutlookWebAccess和Dropbox数据流进行解密，如图4-25所示。
通过分号可以解析列表域名，使用*作为通配符。
96
---
## Page 97
4.9为HTTPS解密配置客户端
Skip decyptionfor thefollowing hosts:
*.exchange.microsoft.com;*dropbox.cot
图4-25
4.9为HTTPS解密配置客户端
虽然绝大多数应用（IE、MicrosoftOffice、Chrome、Safari等）使用Windows证书库来
验证证书链，但一些应用会维护自己的证书库。比如，Java运行时环境通常有自己的证书库，
而Firefox和Opera浏览器又分别维护自己的证书列表。
要配置这样的客户端信任Fiddler生成的证书，首先必须获取Fiddler的根证书作为.CER
文件。可以有两种方式实现这一目标：
1）点击FiddlerOptions窗口的HTTPS选项卡的ExportRoot Certificate toDesktop按钮。
2）在浏览器中访间http://127.0.0.1:8888/，点击链接FiddlerRootCertificate，把证书下载
为.CER文件。
在有了根证书文件后，便可以将其加入到应用的信任证书列表中。
4.9.1浏览器
Firefox
在Firefox中，点击Tools>Options。点击Advanced按钮，然后切换到Encryption选项卡。
点击ViewCertificates可以打开CertificateManager。点击选项卡Authorities，并点击Import
按钮。选中文件FiddlerRoot.cer，点击Open。选中复选框Trust thisCAtoidentifywebsites，按
下Ok。Firefox会信任Fiddler生成的HTTPS服务器证书。
Opera
在Opera浏览器中，点击Opera>Settings>Preferences。点击Advanced选项卡，点击列
表中的 Security。点击Manage Certificates。点击Authorities选项卡，点击Import...按钮。选
中FiddlerRootcer文件，点击Open。点击Install按钮，点击Ok按钮，确定你信任该证书。
Opera会信任Fiddler生成的HTTPS服务器证书。
97
---
## Page 98
第4章配置Fiddler和客户端
跨计算机的场景
如果配置Fiddler作为其他计算机的HTTPS数据流代理，必须手动配置其他计算机，使
它信任Fiddler服务器的根证书。可以从http://FiddlerMachineName:8888/页面下载根证书，然
后手动配置certmgr.msc文件，使它信任根证书。
重要提示
每个Fiddler根证书对每台计算机是唯一的.如果客户端PC之前已经生成了Fiddler根证
书，该根证书会在另一台计算机上通过Fiddler干扰代理数据流，因为不同计算机上生成的根
证书不匹配（其主题内客相同，但是公有密钥不同）这种不匹配性在建立HTTPS连接时会
带来致命错误一即使客户端已经被配置为信任根证书。要避免这个问题，必须删除已有的
Fiddler根证书
4.9.2HTTPS和设备
Windows手机
为了使WindowsPhone设备信任FiddlerRoot证书，在Windows手机上必须安装该证书。
要实现这一点，应先从设备打开htp://FiddllerMachineName:8888/，下载根证书。打开
FiddlerRoot.cer文件，然后在弹出的Installcertificate？屏幕上，点击Install按钮。
Android and iOS
Fiddler默认的证书生成器（CertificateMaker）是基于命令行工具makecert.exe。儿乎所
有的Windows客户端都接受该工具生成的证书，大部分其他平台也接受这类证书。但是，Apple
iOS设备（包括iPad、iPhone和iPod）都要求根证书和服务器证书包含makecert.exe-生成的
证书中所没有的其他元数据。一些Android发布也有类似的需求。
要使Fiddler生成的证书和这些设备兼容，应从以下站点下载Fiddler插件Certificate
Maker:
http://fiddler2.com/z/?FiddlerCertMaker
该插件需要的运行环境为WindowsVista或以上的版本。它会把Fiddler中默认的证书生
成代码替换成基于开源的BouncyCastle图形化库的版本。默认情况下，插件会生成iOS兼容
的证书，并且考虑一些Preferences，以支持广泛的平台兼容。
举个例子，至少一种Android平台要求服务器证书在EKU上不应该有Critical约束。可
以配置证书生成器插件，通过QuickExec设置偏好，从而删除约束：
prefs set fiddler.certmaker.bc.ee.criticaleku false
86
---
## Page 99
4.9为HTTPS解密配置客户端
该插件生成的服务器证书并没有放在Windows证书库中，而只是保存在内存中。每次
Fiddler重新启动，就会生成新的服务器证书。面makecert.exe工具所生成的证书则分别添加
到个人证书库中，只有当按下RemoveInterceptionCertificates按钮后才会删除。
配置了Fiddler生成和设备兼容的证书后，就应该配置设备信任Fiddler的根证书。要实
现这一点，应该按照本书前面章节所描述的方法配置设备，使它能够支持Fiddler作为代理。
然后，在设备上打开http://ipv4.fiddler:8888/，并下载根证书，打开文件FiddlerRoot.cer，如
图4-26所示。
按下Install按钮。你会看到警告信息，可以按下Install按钮进行确认，如图4-27所示。
Unverifled Protle
Pad.
Root Certificate
agtalingtheceticleONOT_TRUSTFidelo
图4-26
图4-27
安装了Fiddler的根证书后，当Fiddler解析数据流时，设备浏览器和应用不会再弹出根
证书错误的信息。
如果你希望从设备上卸载根证书，可打开Settings应用，点击General，然后滚动鼠标到
最下方的Profiles。选中DO_NOT_TRUST_FiddlerRoot，并按下Remove按钮。
4.9.3HTTPS服务器有Bug
有少数HTTPS服务器没有正确实现TLS握手协议，当Fiddler和这些服务器握手时会失
败。当Web浏览器和服务器连接时，会出现同样的连接失败，但是浏览器可以自动回退到使
用老版本的握手协议，默默地处理失败问题。
Fiddler可以配置成为服务器提供特定的协议版本，从而适应有bug的实现。在FiddlerScript
中，在MainO函数中可以添加如下代码，限制Fiddler在建立HTTPS连接时只提供SSLv3。
CONFIG.oAcceptedServerHTTPSProtocols =
System.Security.Authentication.SslProtocols.Ss13;
66
---
## Page 100
第4章配置Fiddler和客户端
此外，可以限制协议基于每一个请求。在OnBeforeRequest函数中，添加如下代码：
if (oSession.HTTPMethodIs("CONNECT")66
oSession.HostnameIs (*buggy.example,com"))
通过只提供SSLv3，你可以调整那些没有正确支持扩展或TLS协议其他功能的服务器。
4.9.4证书生效
当Fiddler连接到HTTPS服务器时，它会验证服务器证书，确保证书是有效的，而且包
含目标站点的主机名。默认情况下，会展示所有的证书错误供你决定如何继续，如图4-28
所示。
Ignoreremote cerfcateenor
emeteCertfcateChanErors
for Sonicw
mentCasfcalefor
swdbydngTe O）
lpore errors aad proceedanyway?Leo
图 4-28
如果选中No，该连接就会被丢弃。如果选择Yes，证书错误会被忽略，连接会正常使用。
Fiddler会缓存你做出的决定，直到重新启动。因为Fiddler会生成它自己的证书，使得来自客
户端的连接变安全，客户端应用不会意识到服务器证书是无效的。
4.9.5CertificatePinning
行硬编码，从而只接收指定的证书。即使操作系统完全信任连接使用的证书所挂接到的根服
务器，这种应用会拒绝接收不是目己期望的证书。
比如，一些Twitter和Dropbox应用包含该功能，Windows8Metro应用可以选择性地要
求特定证书，而不是依赖系统的受信任根证书库。
100
---
## Page 101
4.10 Fiddler 和 FTP
当Certificate-Pinned应用通过CONNECT通道和Fiddler进行HTTPS握手时，它会检查
响应的证书，并且在发现Fiddler生成的证书时，会拒绝发送其他请求。
遗的是，没有通用的方案解决这个问题，你能够做到的最多是通过在CONNECT通道
上设置x-no-decryptSession标志位，免除对应用的数据流进行解密。该标志位会阻止Fiddler
解密通道中的数据流，因而流向Fiddler的数据流是未加密的。
4.10Fiddler和FTP
与HTTP类似，文件传输协议（FTP）是基于TCP/IP的协议，用于传输文件，但是它比
HTTP协议出现得早，并且和HTTP协议不兼容。但是，协议依然是个例外，Fiddler只能查
看基于HTTP的协议。这是因为当客户端浏览器或应用是配置成通过CERN形式的代理（如
Fiddler）来代理FTP数据流时，客户端在发送给代理之前会把FTP下载请求转化成HTTPGET
请求。
客户端的期望是代理会作为网关，把每个FTP到HTTP的请求转化成FTP请求，该请求
会通过FTP协议被发送到原始服务器。只有HTTP请求的URL和Authorization头是用于FTP
请求，其他请求头都会被忽略。
Fiddler可以通过三种方式处理FTP数据流：
1）作为HTTP到FTP的网关。
2）通过挂接到上游CERN形式的代理服务器（如MicrosoftISA），该服务器会作为HTTP
到FTP的网关。
3）通过FiddlerAutoResponder（或其他功能）来响应请求。
要配置Fiddler注册为系统的FTP代理，点击Tools>FiddlerOptions。在Connections选
项卡里，选中CaptureFTPrequests选项，再重启Fiddler。
如果Fiddler接收到的FTP请求没有发送到上游网关代理，而且AutoResponder规则没有
处理该请求，Fiddler会尝试使用FTP协议连接到服务器。Fiddler会重新格式化FTP服务器的
响应作为HTTP响应，并返回给客户端。当作为HTTP到FTP的网关时，会存在一些局限性。
例如，不会设置Session的Timers对象。Fiddler不支持FTP流式响应—完整的FTP响应在
转换之前会被缓存，并返回给客户端。
101
---
## Page 102
第4章配置Fiddler和客户编
4.llFiddler和Web认证
绝大多数公开的Web站点使用HTML表单进行认证一会弹出对话框，要求客户输入用
户名和密码。如果提供的证书有效，客户端会得到登录Cookie，该Cookie会发送给所有后续
的请求。Fiddler可以很容易查看和提交这种Cookie。
但是，HTTP和HTTPS提供两种原生机制进行客户端认证：
·HTTP身份认证
·HTTPS客户端证书
Fiddler可以使用以上任何一种认证方式与服务器通信。
4.11.1HTTP身份认证
使用HTTP身份认证，客户端会发送HTTP请求，服务器响应包含需要证书的HTTP/401
或HTTP/407。HTTP/401s是由需要身份认证的服务器发送的，而HTTP/407s是由代理服务器
发送的。
HTTP通常有四种身份认证机制：
·Basic
·Digest
NTLM
Negotiate
在Basic认证（RFC2617）机制中，客户端在Authorization请求头中提供用户名和密码。
客户端证书通常基于64位编码，利用AuthInspector可以轻松解码。Basic认证机制是原始的，
显然在未加密的HTTP连接中使用是不安全的。
在Digest认证机制中（它也在RFC2617中描述），服务器会通过WWW-Authenticate响
应头向客户端提出质询。客户端会结合质询数据和用户密码计算消息摘要，向服务器证明自
已知道密码。该认证机制比Basic强大，但是由于服务器端对该机制支持有限以及各种客户端
bug，该机制很少见。
NTLM认证机制很少在公共Internet中使用，但是在基于Windows的Intranet中却普遍使
102
---
## Page 103
4.11Fiddler和Web认证
用。当服务器向客户端发送HTTP/401响应，客户端会重新发送请求，表示其支持NTLM认
证，然后服务器提出质询。客户端通过该质询和证书生成对该质询的回复。如果质询回答正