 tps = 2760.238242 (including connections establishing)
 tps = 2764.017578 (excluding connections establishing)
 statement latencies in milliseconds:
 0.002850 \setrandom id 1 5000000
 5.772589 select * from user_info where id=:id;
本地高速缓存pgfincore
 加载本地缓存
 digoal=# select pgfadvise_willneed('user_info');
 pgfadvise_willneed
 --------------------------------------------------------------------
 (pg_tblspc/66422/PG_9.3_201306121/16384/92762,4096,93458,24384631)
 (1 row)
 digoal=# select pgfadvise_willneed('user_info_pkey');
 pgfadvise_willneed
 --------------------------------------------------------------------
 (pg_tblspc/66422/PG_9.3_201306121/16384/92768,4096,27424,24355374)
 (1 row)
 如果涉及TOAST表的查询, 还需要将toast表加载到缓存中.
本地高速缓存pgfincore
 加载本地缓存后的测试结果, 性能提升是非常明显的.
 pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 10 digoal
 transaction type: Custom query
 scaling factor: 1
 query mode: prepared
 number of clients: 16
 number of threads: 4
 duration: 10 s
 number of transactions actually processed: 578719
 tps = 57846.754016 (including connections establishing)
 tps = 57925.210019 (excluding connections establishing)
 statement latencies in milliseconds:
 0.002523 \setrandom id 1 5000000
 0.269790 select * from user_info where id=:id;
异地高速缓存pgmemcache
 异地高速缓存pgmemcache
 http://blog.163.com/digoal@126/blog/static/163877040201210172341257/
 pgmemcache是一系列的PostgreSQL函数, 用于memcache的读写操作.
 通过pgmemcache以及PostgreSQL的触发器可以方便的对数据库中的数据进行缓存.
 当然缓存的操作也可以挪至应用程序自己来处理. pgmemcache只是一种选择.
异地高速缓存pgmemcache
 pgmemcache的安装
 pgmemcache 依赖 libmemcache 和 PostgreSQL
 libmemcache 依赖 libevent 和 memcached
 memcached 依赖 libevent
 依次安装
异地高速缓存pgmemcache
 安装libevent
 wget https://github.com/downloads/libevent/libevent/libevent-2.0.20-stable.tar.gz
 tar -zxvf libevent-2.0.20-stable.tar.gz
 cd libevent-2.0.20-stable
 ./configure
 make
 make install
 加入lib库路径
 vi /etc/ld.so.conf
 /usr/local/lib
 ldconfig
 ldconfig -p|grep libevent
 libevent_pthreads-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent_pthreads-2.0.so.5
 libevent_openssl-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent_openssl-2.0.so.5
 libevent_extra-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent_extra-2.0.so.5
 libevent_core-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent_core-2.0.so.5
 libevent-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent-2.0.so.5
异地高速缓存pgmemcache
 安装memcached
 wget http://memcached.googlecode.com/files/memcached-1.4.15.tar.gz
 tar -zxvf memcached-1.4.15.tar.gz
 cd memcached-1.4.15
 ./configure --help
 ./configure --prefix=/opt/memcached-1.4.15 --enable-sasl --enable-64bit
 make
 make install
 cd /opt/memcached-1.4.15/share/man/man1
 man ./memcached.1
 启动memcached
 memcached -d -u pg93 -m 800
 小提示
 64bit 对应pointer_size : 64, 所以将占用更多的空间. 如果没有超过20亿的key, 使用32位就够了.
异地高速缓存pgmemcache
 安装libmemcached
 wget http://download.tangent.org/libmemcached-0.48.tar.gz
 tar -zxvf libmemcached-0.48.tar.gz
 cd libmemcached-0.48
 ./configure --prefix=/opt/libmemcached-0.48 --with-memcached=/opt/memcached-1.4.15/bin/memcached
 make
 make install
 修改动态库配置文件, 并使之生效 :
 vi /etc/ld.so.conf
 /opt/libmemcached-0.48/lib
 ldconfig
 查看新增的动态库是否生效 :
 ldconfig -p|grep libmemcache
 libmemcachedutil.so.1 (libc6,x86-64) => /opt/libmemcached-0.48/lib/libmemcachedutil.so.1
 libmemcachedutil.so (libc6,x86-64) => /opt/libmemcached-0.48/lib/libmemcachedutil.so
 libmemcachedprotocol.so.0 (libc6,x86-64) => /opt/libmemcached-0.48/lib/libmemcachedprotocol.so.0
 libmemcachedprotocol.so (libc6,x86-64) => /opt/libmemcached-0.48/lib/libmemcachedprotocol.so
 libmemcached.so.6 (libc6,x86-64) => /opt/libmemcached-0.48/lib/libmemcached.so.6
 libmemcached.so (libc6,x86-64) => /opt/libmemcached-0.48/lib/libmemcached.so
异地高速缓存pgmemcache
 安装pgmemcache
 wget http://pgfoundry.org/frs/download.php/3018/pgmemcache_2.0.6.tar.bz2 -- 或者 https://github.com/ohmu/pgmemcache/
 tar -jxvf pgmemcache_2.0.6.tar.bz2
 cd pgmemcache
 需要用到pg_config, 所以需要加入到PATH中.
 . /home/pg9.2.0/.bash_profile
 pgmemcache的头文件中包含了libmemcached的一些头, 如下, 所以需要将这些头文件拷贝到pgmemcache的目录中来.
 less pgmemcache.h
 #include 
 #include 
 #include 
 #include 
 拷贝这些头文件到本地目录中,
 cp -r /opt/libmemcached-0.48/include/libhashkit ./
 cp -r /opt/libmemcached-0.48/include/libmemcached ./
异地高速缓存pgmemcache
 同时编译时需要用到libmemcached.so, 如下Makefile :
 less Makefile
 SHLIB_LINK = -lmemcached -lsasl2
 但是没有指定库目录, 所以需要修改一下
 vi Makefile
 SHLIB_LINK = -L/opt/libmemcached-0.48/lib -lmemcached -lsasl2
 接下来编译安装就可以了.
 gmake
 gmake install
异地高速缓存pgmemcache
 安装好pgmemcache后, 需要修改PostgreSQL的配置文件重启数据库,
 这里假设172.16.3.150上已经启动了memcached.
 su - pg93
 cd $PGDATA
 vi postgresql.conf
 shared_preload_libraries = 'pgmemcache'
 pgmemcache.default_servers = '172.16.3.150:11211' #多个memcached用逗号隔开配置.
 pgmemcache.default_behavior = 'BINARY_PROTOCOL:1' #多个配置用逗号隔开配置.
 重启数据库 :
 pg_ctl restart -m fast
 在加载pgmemcache.sql前, 需要对这个脚本修改一下, 否则会报语法错误.
 cd $PGHOME/share/contrib
 vi pgmemcache.sql
 :%s/LANGUAGE\ 'C'/LANGUAGE\ C/g
 :x!
异地高速缓存pgmemcache
 在需要的库中执行脚本 :
 psql -h 127.0.0.1 -U postgres digoal -f ./pgmemcache.sql
 测试 :
 digoal=> select memcache_set('key1', '1');
 memcache_set
 --------------
 t
 (1 row)
 digoal=> select memcache_get('key1');
 memcache_get
 --------------
 1
 (1 row)
异地高速缓存pgmemcache
 digoal=> select memcache_incr('key1',99);
 memcache_incr
 ---------------
 100
 (1 row)
 digoal=> select memcache_incr('key1',99);
 memcache_incr
 ---------------
 199
 (1 row)
异地高速缓存pgmemcache
 digoal=> select memcache_stats();
 memcache_stats
 ------------------------------
 +
 Server: 172.16.3.150 (11211)+
 pid: 1918 +
 uptime: 13140 +
 time: 1353222576 +
 version: 1.4.15 +
 pointer_size: 64 +
 rusage_user: 0.999 +
 rusage_system: 0.1999 +
 curr_items: 1 +
 total_items: 3 +
 bytes: 72 +
 curr_connections: 6 +
 total_connections: 10 +
 connection_structures: 7 +
异地高速缓存pgmemcache
 cmd_get: 1 +
 cmd_set: 1 +
 get_hits: 1 +
 get_misses: 0 +
 evictions: 0 +
 bytes_read: 207 +
 bytes_written: 3196 +
 limit_maxbytes: 67108864 +
 threads: 4 +
异地高速缓存pgmemcache
 cmd_get: 1 +
 cmd_set: 1 +
 get_hits: 1 +
 get_misses: 0 +
 evictions: 0 +
 bytes_read: 207 +
 bytes_written: 3196 +
 limit_maxbytes: 67108864 +
 threads: 4 +
异地高速缓存pgmemcache
 digoal=> select memcache_flush_all();
 memcache_flush_all
 --------------------
 t
 digoal=> select memcache_get('key1');
 memcache_get
 --------------
 (1 row)
异地高速缓存pgmemcache
 cache应用场景举例, 将用户-密码作为K-V存储到MEMCACHED中, 密码校验先从memcached进行匹配, 未匹配到再到数据库中检索.
 1. 测试表
 digoal=> create table tbl_user_info (userid int8 primary key, pwd text);
 NOTICE: CREATE TABLE / PRIMARY KEY will create implicit index "tbl_user_info_pkey" for table "tbl_user_info"
 CREATE TABLE
 2. 测试数据
 digoal=> insert into tbl_user_info select generate_series(1,10000000), md5(clock_timestamp()::text);
 INSERT 0 10000000
 3. 更新触发器(不安全, SQL回滚后memcache的操作不能自动回滚)
 CREATE OR REPLACE FUNCTION tbl_user_info_upd() RETURNS TRIGGER AS $$
 BEGIN
 IF OLD.pwd != NEW.pwd THEN
 PERFORM memcache_set('tbl_user_info_' || NEW.userid || '_pwd', NEW.pwd);
 END IF;
 RETURN NULL;
 END;
 $$ LANGUAGE 'plpgsql' STRICT;
 CREATE TRIGGER tbl_user_info_upd AFTER UPDATE ON tbl_user_info FOR EACH ROW EXECUTE PROCEDURE tbl_user_info_upd();
异地高速缓存pgmemcache
 4. 插入触发器(不安全, 同理)
 CREATE OR REPLACE FUNCTION tbl_user_info_ins() RETURNS TRIGGER AS $$
 BEGIN
 PERFORM memcache_set('tbl_user_info_' || NEW.userid || '_pwd', NEW.pwd);
 RETURN NULL;
 END;
 $$ LANGUAGE 'plpgsql' STRICT;
 CREATE TRIGGER tbl_user_info_ins AFTER INSERT ON tbl_user_info FOR EACH ROW EXECUTE PROCEDURE tbl_user_info_ins();