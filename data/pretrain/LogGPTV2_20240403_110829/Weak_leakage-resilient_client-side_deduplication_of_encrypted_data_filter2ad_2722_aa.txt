# Weak Leakage-Resilient Client-Side Deduplication of Encrypted Data in Cloud Storage

**Authors:**
- Jia Xu
- Ee-Chien Chang
- Jianying Zhou

**Institute for Infocomm Research**
1 Fusionopolis Way, Singapore 138632  
Email: [PI:EMAIL]

**National University of Singapore**
21 Lower Kent Ridge Road, Singapore 119077  
Email: [PI:EMAIL]

## Abstract

Recently, Halevi et al. (CCS '11) introduced a cryptographic primitive known as proofs of ownership (PoW) to enhance the security of client-side deduplication in cloud storage. In their scheme, any owner of the same file \( F \) can robustly and efficiently prove to the cloud storage that they own \( F \), even in a bounded leakage setting where a certain amount of efficiently-extractable information about \( F \) is leaked.

Building on this work, we propose a secure client-side deduplication scheme with the following advantages:
- Our scheme protects data confidentiality (and some partial information) against both external adversaries and honest-but-curious cloud storage servers, whereas Halevi et al. assume the cloud storage server is trusted for data confidentiality.
- Our scheme is proven secure with respect to any distribution with sufficient min-entropy, while Halevi et al.'s most practical construction is specific to a particular type of distribution (a generalization of "block-fixing" distribution) of input files.

The trade-off for these improvements is a weaker leakage setting: our scheme allows a bounded one-time leakage of a target file before execution, whereas Halevi et al. allow a bounded multi-time leakage before and after their scheme's execution. To the best of our knowledge, previous works on client-side deduplication prior to Halevi et al. do not consider any leakage setting.

**Funding:** This work is funded by A*Star project SecDC-112172014.

**Permission:** Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

**Conference:** ASIA CCS'13, May 8–10, 2013, Hangzhou, China.  
**Copyright:** © 2013 ACM 978-1-4503-1767-2/13/05. . . $10.00

**Categories and Subject Descriptors:**
- H.3.5 [Information Systems]: Information storage and retrieval—On-line information services
- E.3 [Data Encryption]

**General Terms:**
- Algorithms, Security

**Keywords:**
- Cloud Storage, Client-side Deduplication, Proofs of Ownership, Privacy, Leakage-Resilient, Universal Hash

## Introduction

Cloud storage services have gained popularity in recent years. To reduce resource consumption in terms of network bandwidth and storage, many cloud storage services, such as Dropbox and Wuala, employ client-side deduplication. When a user attempts to upload a file to the server, the server checks if the file is already stored in the cloud. If it is, the uploading process is skipped, ensuring that each file has only one copy in the cloud (Single Instance Storage). According to the SNIA white paper, deduplication can save up to 90% of storage, depending on the application.

### Current Implementation of Client-Side Deduplication

According to Halevi et al. and Dropship, the existing implementation of client-side deduplication works as follows: 
- Alice, a cloud user, tries to upload a file \( F \) to the cloud storage.
- The client software on Alice's computer computes and sends the hash value \( \text{hash}(F) \) to the cloud server.
- The cloud server maintains a database of hash values of all received files and looks up \( \text{hash}(F) \).
- If no match is found, \( F \) is not in the cloud storage, and Alice's client software uploads \( F \) to the cloud, adding \( \text{hash}(F) \) to the database.
- If a match is found, \( F \) is already in the cloud, and the upload is saved. The cloud server allows Alice to access \( F \).

This method, known as the "hash-as-a-proof" method, uses the hash value \( \text{hash}(F) \) as both an index and a proof of ownership. If the client software is trusted and the hash function is collision-resistant, this method is sufficiently secure. However, malicious users can develop their own client software using public APIs, sending manipulated messages to the cloud server. Therefore, a more sophisticated solution is required.

### Security Concerns

#### 1.1 Data Privacy against Outside Adversaries

An attack on the "hash-as-a-proof" method in popular cloud storage services like Dropbox and MozyHome has been proposed. An adversary who has the short hash value of a file can present it as proof and gain access to the file. This attack does not require finding a hash collision, as the client software can be bypassed.

#### 1.2 Data Privacy against Inside Adversaries (Cloud Storage Servers)

Confidentiality of users' sensitive data against the cloud storage server itself is another important concern. Users hope to ensure that the cloud storage server cannot access their data. While Dropbox claims to protect users' data with AES encryption, the encryption keys are managed by Dropbox. A bug in Dropbox's software once left all user accounts unlocked for almost 4 hours. If users encrypt their data on the client side and keep the encryption keys away from Dropbox, there will be no single point of failure for privacy protection.

#### 1.3 Divide and Conquer Attack

Consider a classified document with high overall min-entropy but low min-entropy in its first page. If the document is stored in a cloud that supports block-level cross-user deduplication, an adversary could recover the low-entropy information through brute-force search. This issue also applies to deterministic encryption schemes. Block-level cross-user client-side deduplication should not be applied to sensitive files.

#### 1.4 Poison Attack

When a file \( F \) is encrypted on the client side with a randomly chosen key, the cloud server may not be able to verify the consistency between the ciphertext and the metadata. A malicious user can substitute the valid ciphertext with a poisoned file, leading subsequent users to retrieve the poisoned file. This attack, known as a Target Collision attack, does not require finding a hash collision and can be practical if client-side deduplication over encrypted data is not properly implemented.

#### 1.5 Plausible Approaches

- **Convergent Encryption:** Intuitively, convergent encryption together with PoW might provide a solution. However, the threat models of PoW and convergent encryption are incompatible. In the presence of leakage, convergent encryption is insecure because its short encryption key is generated deterministically and can be leaked.
- **Per-User Encryption Key:** Each user can choose their own encryption key, allowing deduplication only within the same user's files. This approach limits the effectiveness of deduplication. We are interested in cross-user deduplication, where identical files from different users are detected and removed safely.

#### 1.6 Current States of Various Cloud Storage Services

We have collected technical information about various cloud storage services (Dropbox, SpiderOak, and Wuala) from public sources. Microsoft SkyDrive and Google Drive do not provide client-side deduplication, even within a single user account. We conjecture that cloud storage services with simple web access either do not encrypt users' data or encrypt it on the server side only.