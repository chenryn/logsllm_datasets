div-int/2addr v0, v1
rem-int/2addr v0, v1
and-int/2addr v0, v1
or-int/2addr v0, v1
xor-int/2addr v0, v1
shl-int/2addr v0, v1
shr-int/2addr v0, v1
ushr-int/2addr v0, v1
```
#### 数组操作指令
数组操作指令中实现了获取数组长度，新建数组，数组赋值，数组元素取值与赋值等操作。
| **指令**                                   | **说明**                                   |
| ---------------------------------------- | ---------------------------------------- |
| array-length vA, vB                      | 获取给定vB寄存器中数组的长度并赋给vA寄存器，数组长度指的是数组中的元素个数。 |
| new-array vA, vB, type@CCCC              | 构造大小为vB的元素类型为type@CCCC的数组，并将引用赋给vA寄存器    |
| filled-new-array {vC, vD, vE, vF, vG},type@BBBB | 构造大小vA的元素类型为type@BBBB的数组并填充数组内容。vA寄存器是隐含使用的，除了指定数组的大小外还指定了参数的个数，vC~vG是使用到的参数寄存序列 |
| filled-new-array/range {vCCCC  ..vNNNN}, type@BBBB | 指令功能与filled-new-array {vC, vD, vE, vF, vG},type@BBBB相同，只是参数寄存器使用range后缀指定了取值范围 ，vC是第一个参数寄存器，N = A +C -1 |
| fill-array-data vAA, +BBBBBBBB           | 用指定的数据来填充数组，vAA寄存器为数组引用，引用必须为基础类型的数组，在指令后面会紧跟一个数据表 |
| new-array/jumbo vAAAA, vBBBB,type@CCCCCCCC | 指令功能与new-array vA,vB,type@CCCC相同，但是寄存器值与指令的索引取值范围更大（Android4.0中新增的指令） |
| filled-new-array/jumbo {vCCCC  ..vNNNN},type@BBBBBBBB | 指令功能与filled-new-array/range {vCCCC  ..vNNNN},type@BBBB相同，只是索引取值范围更大（Android4.0中新增的指令） |
| arrayop vAA, vBB, vCC                    | 对vBB寄存器指定的数组元素进行取值与赋值。vCC寄存器指定数组元素索引，vAA寄存器用来存放读取的或需要设置的数组元素的值。读取元素使用aget类指令，元素赋值使用aput类指定，根据数组中存储的类型指令后面会紧跟不同的指令后缀，指令列表如下：aget, aget-wide, aget-object, aget-boolean, aget-byte,aget-char, aget-short, aput, aput-wide, aput-object, aput-boolean, aput-byte, aput-char, aput-short。 |
我们可以定义数组如下
```java
int[] arr = new int[10];
```
其对应的smali如下
```smali
const/4 v1, 0xa
new-array v0, v1, I
```
如果我们直接在定义时，对数组进行初始化，如下
```smali
int[] arr = {1, 2, 3, 4, 5};
```
对应的smali如下
```smali
const/4 v1, 0x1
const/4 v2, 0x2
const/4 v3, 0x3
const/4 v4, 0x4
const/4 v5, 0x5
filled-new-array {v1, v2, v3, v4, v5}, I
move-result v0
```
在寄存器连续的情况下，还可以写成如下代码
```smali
const/4 v1, 0x1
const/4 v2, 0x2
const/4 v3, 0x3
const/4 v4, 0x4
const/4 v5, 0x5
filled-new-array-range {v1..v5}, I
move-result v0
```
#### 实例操作指令
实例操作指令主要实现了实例的类型转换，检查及新建等功能。
| **指令**                                   | **说明**                                   |
| ---------------------------------------- | ---------------------------------------- |
| check-cast vAA, type@BBBB                | 将vAA寄存器中的对象引用转换成type@BBBB类型，如果失败的话，抛出ClassCastException异常。如果类型B指定的是基本类型，对于非基本类型的A来说，运行时始终会失败 |
| instance-of vA, vB, type@CCCC            | 判断vB寄存器中的对象引用是否可以转换成指定的类型，如果可以，vA寄存器被赋值为1，否则vA寄存器被 赋值为0。 |
| new-instance vAA, type@BBBB              | 构造一个指定类型对象的新实例，并将对象引用赋值给vAA寄存器，类型符type指定的类型不能是数组类 |
| check-cast/jumbo vAAAA, type@BBBBBBBB    | 功能与check-cast vAA, type@BBBB相同，只是寄存器值与指令的索引取值范围更大（Android4.0中新增的指令） |
| instance-of/jumbo vAAAA, vBBBB, type@CCCCCCCC | 功能与instance-of vA, vB, type@CCCC相同，只是寄存器值与指令的索引取值范围更大（Android4.0中新增的指令） |
| new-instance/jumbo vAAAA, type@BBBBBBBB  | 功能与new-instance vAA, type@BBBB相同，只是寄存器值与指令的索引取值范围更大（Android4.0中新增的指令） |
比如，我们定义一个实例
```java
Object obj = new Object();
```
其对应的smali代码如下
```smali
new-instance v0, Ljava/lang/Object;
invoke-direct-empty {v0}, Ljava/lang/Object;->()V
```
再比如我们可以进行如下的类型判断
```java
String s = "test";
boolean b = s instanceof String;
```
其对应的smali代码如下
```smali
const-string v0, "test"
instance-of v1, v0, Ljava/lang/String;
```
如果我们进行类型的强制转换
```java
String s = "test";
Object o = (Object)s;
```
其对应的smali代码如下
```smali
const-string v0, "test"
check-cast v0, Ljava/lang/Object;
move-object v1, v0
```
#### 字段操作指令
字段操作指令主要是对实例的字段进行读写操作。其中读操作使用get来标记，即vx=vy.field。写操作使用put来标记，即vy.field=vx。
其中对于java中的类来说，主要分为两种字段，普通字段，静态字段。对于普通字段采用操作指令前加i来标记，如iget，iput。对于静态字段采用在操作指令前加s来标记，如sput，sget。
此外，对于不同字段大小的操作会在指令的后面加上后缀来进行区别。如 iget-byte指令表示读取类型为字节的实例字段的值，iput-short指令表示设置的实例字段的类型为短整型。
普通字段操作指令有：
iget，iget-wide，iget-object，iget-boolean，iget-byte，iget-char，iget-short，
iput，iput-wide，iput-object，iput-boolean，iput-byte，iput-char，iput-short。
静态字段操作指令有：
sget，sget-wide，sget-object，sget-boolean，sget-byte，sget-char，sget-short，
sput，sput-wide，sput-object，sput-boolean，sput-byte，sput-char，sput-short。
如果我们编写如下代码
```java
int[] arr = new int[2];
int b = arr[0];
arr[1] = b;
```
其对应的smali如下
```smali
const/4 v0, 0x2
new-array v1, v0, I
const/4 v0, 0x0
aget-int v2, v1, v0
const/4 v0, 0x1
aput-int v2, v1, v0
```
如果我们想获得类com.example.test的静态int类型的字段staticField，其smali如下
```smali
sget v0, Lcom/example/Test;->staticField:I
```
#### 比较指令
比较指令实现了对两个寄存器的值（浮点型或长整型）进行比较的操作。
其格式为cmp(l/g)-kind vAA, vBB, vCC，其中vBB寄存器与vCC寄存器是需要比较的两个寄存器或寄存器对，比较的结果放到vAA寄存器。
- l-->less
- g--> great
目前的比较指令如下
| **指令**      | **说明**                                   |
| ----------- | ---------------------------------------- |
| cmpl-float  | 比较两个单精度浮点数。如果vBB寄存器大于vCC寄存器，结果为-1，相等则结果为0，小于的话结果为1 |
| cmpg-float  | 比较两个单精度浮点数。如果vBB寄存器大于vCC寄存器，则结果为1，相等则结果为0，小于的话结果为-1 |
| cmpl-double | 比较两个双精度浮点数。如果vBB寄存器对大于vCC寄存器对，则结果为-1，相等则结果为0，小于则结果为1 |
| cmpg-double | 比较两个双精度浮点数。如果vBB寄存器对大于vCC寄存器对，则结果为1，相等则结果为0，小于的话，则结果为-1 |
| cmp-long    | 比较两个长整型数。如果vBB寄存器大于vCC寄存器，则结果为1，相等则结果为0，小则结果为-1 |
#### 跳转指令
跳转指令实现了从当前地址跳转到指定的偏移处的操作。Dalvik指令集中有三种跳转指令
- goto，无条件跳转
- switch，分支跳转
- if，条件跳转
##### goto指令
如下
| 指令                | 含义                      |
| ----------------- | ----------------------- |
| goto +AA          | 无条件跳转到指定偏移处，偏移量AA不能为0   |
| goto/16 +AAAA     | 无条件跳转到指定偏移处，偏移量AAAA不能为0 |
| goto/32 +AAAAAAAA | 无条件跳转到指定偏移处             |
##### if指令
if指令中主要分为两种if-test与if-testz。`if-test vA,vB,+CCCC` 会比较vA与v，如果比较结果满足就跳转到CCCC指定的偏移处（相对当前偏移），偏移量CCCC不能为0。if-test类型的指令如下：
| 指令                   | 说明           |
| -------------------- | ------------ |
| `if-eq vA,vB,target` | 如果vA=vB，跳转。  |
| `if-ne vA,vB,target` | 如果vA!=vB，跳转。 |
| `if-lt vA,vB,target` | 如果vAvB，跳转。  |
| `if-ge vA,vB,target` | 如果vA>=vB，跳转。 |
| `if-le vA,vB,target` | 如果vA0，跳转。  |
| if-lez vAA,target | 如果vA=0，跳转。 |
举个例子，java代码如下
```java
int a = 10
if(a > 0)
    a = 1;
else
    a = 0;
```
smali代码如下
```smali
const/4 v0, 0xa
if-lez v0, :cond_0 # if 块开始
const/4 v0, 0x1
goto :cond_1       # if 块结束
:cond_0            # else 块开始
const/4 v0, 0x0
:cond_1            # else 块结束
```
在只有if的情况下
```java
int a = 10;
if(a > 0)
    a = 1;
```
smali代码如下
```smali
const/4 v0, 0xa
if-lez v0, :cond_0 # if 块开始
const/4 v0, 0x1
:cond_0            # if 块结束
```
##### switch指令
如下
| 指令                          | 含义                                       |
| --------------------------- | ---------------------------------------- |
| packed-switch vAA,+BBBBBBBB | vAA寄存器为switch分支中需要判断的值，BBBBBBBB指向一个packed-switch-payload格式的偏移表，表中的值是有规律递增的。 |