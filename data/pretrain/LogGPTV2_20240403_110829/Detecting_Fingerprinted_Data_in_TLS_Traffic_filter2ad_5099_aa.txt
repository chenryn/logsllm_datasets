title:Detecting Fingerprinted Data in TLS Traffic
author:Konstantin B&quot;ottinger and
Dieter Schuster and
Claudia Eckert
Detecting Fingerprinted Data in TLS Trafﬁc
Konstantin Böttinger, Dieter Schuster, and Claudia Eckert
Fraunhofer Institute for Applied and Integrated Security (AISEC)
PI:EMAIL, PI:EMAIL,
85748 Garching (near Munich), Germany
PI:EMAIL
ABSTRACT
We present a new method for detecting known data in cer-
tain TLS encrypted communication channels. Our approach
enables us to detect single ﬁles in eavesdropped TLS secured
network traﬃc. We generate ﬁngerprints by a ﬁne-grained
measurement of the entropy of fragments of known data and
introduce the application of methods from the ﬁeld of ma-
chine learning to the problem of ﬁle detection. We imple-
ment all proposed methods on a real data base and show the
practical eﬃciency of our approach.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols; I.5.4 [Pattern Recognition]: Applications
Keywords
TLS, Traﬃc Analysis, Machine Learning
1.
INTRODUCTION
The Transport Layer Security (TLS) protocol is the most
widely used security protocol on the Internet today, designed
to provide conﬁdentiality and authenticity in modern com-
munication technology. Our goal is to apply machine learn-
ing methods to identify single ﬁles in eavesdropped TLS
communication. This information leakage is realized by a
side channel in the compression layer of TLS. By ﬁngerprint-
ing a known set of data, we can eﬀectively detect this data
in compression-enabled TLS traﬃc. Our novel approach in-
troduces machine learning methods for analysis of encrypted
network traﬃc in order to identify single ﬁles from large data
bases. We implement all of our proposed methods and show
their feasibility by evaluating them in a realistic scenario.
Although we focus on TLS, our approach illuminates a
general problem in certain combinations of encryption and
compression in cryptographic protocols. Therefore, the pre-
sented approach can be applied to many other compression
enhanced security protocols in general.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore.
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714595.
With our presented detection method we cover several use
cases. First, our approach enables detection of illegal con-
tent in TLS secured communication channels. Second, if the
ﬁngerprinted data can be assigned to a speciﬁc communica-
tion participant, a detection of this data directly causes the
loss of anonymity of that participant. Our goal is to in-
crease awareness of our approach, therefore we also discuss
countermeasures that mitigate the attack.
The remainder of the paper is organized as follows. Sec-
tion 2 discusses related work. In Section 3 we present nec-
essary background regarding the TLS record layer and the
Deﬂate compression algorithm. We deﬁne data ﬁngerprints
for detection in TLS traﬃc as well as a method to practi-
cally measure ﬁngerprints in Section 4. Next, we present a
practical approach to eﬀectively detect ﬁngerprints in TLS
communication in Section 5. To demonstrate the feasibility
of our approach, we implemented all of our presented meth-
ods and evaluate our prototype in Section 6. We discuss
possible countermeasures in Section 7. The paper concludes
with a short outlook on further applications of our approach
in Section 8.
2. RELATED WORK
The history of TLS has seen a diversity of attacks and it
is known that traﬃc analysis can disclose sensitive informa-
tion of the secured communication. By statistical analysis
of TLS traﬃc it is possible to identify versions of network
protocol implementations [7], accessed websites [3], and de-
tailed sensitive information of web applications [2]. In this
paper we will present a method that even leaks informa-
tion about single ﬁles that are being transferred over a TLS
secured channel.
The related work most relevant to our approach is a rela-
tively new attack described in 2013 by Bhargavan et al. [1].
The authors discovered information leakage by ﬁngerprint-
ing the compression ratio of fragments of known ﬁles.
However, two important points were left open up to now.
First, in a realistic scenario a ﬁle will be sent in the mid-
dle of a larger data stream, which adds noise the recorded
data (as discussed in more detail in Section 5). Second, it
remained an open question how to practically ﬁngerprint a
large number of ﬁles and eﬀectively detect these ﬁles in TLS
secured channels. In this paper we propose a solution for
both problems by introducing methods from the ﬁeld of ma-
chine learning. We show that our novel approach of tackling
ﬁle identiﬁcation with machine learning methods allows us
to detect ﬁles of large data bases in an eﬃcient and feasible
way.
633up to 256 diﬀerent compression methods, the prevalent al-
gorithm in use today is Deﬂate.
Deﬂate uses a combination of the LZ77 algorithm [10] and
Huﬀman coding, resulting in two compression steps. In the
ﬁrst step, input data is compressed using the LZ77 sliding
window approach that sequentially parses the input data
and looks for repeated occurrences of smaller data blocks.
Initially, the algorithm creates an entry in the sliding win-
dow with every ﬁrst occurrence of a new data block. While
parsing new data, the algorithm looks for matches to al-
ready parsed data. If the parsed data matches to an entry
in the sliding window, is is just a repetition of a block al-
ready parsed before and gets replaced by a reference to the
previous occurrence. So by sequentially parsing the input
data and searching for already existing entries in the slid-
ing window, the algorithm builds up a dictionary, where
repetitions of data sequences are translated to references to
a previous occurrence. However, the sliding window has a
ﬁxed maximum size. Therefore, the window only holds most
recent data and therefore slides over data blocks during the
compression process.
In the second step, the output of the LZ77 compression
gets Huﬀman coded by replacing symbols with weighted rep-
resentation symbols based on frequency of use. By creating
a binary tree of nodes, where the initial symbols are the leaf
nodes and nodes get successively removed according to high-
est priority (lowest probability of occurrence), the Huﬀman
algorithm derives a table based on the estimated frequency
of occurrence for each symbol of the input data.
The most important aspect of Deﬂate for the following
discussion is its characteristic of being stateful. That means
that the Deﬂate algorithm has a state, represented by the
content of the sliding window and the table of estimated
frequencies of symbols. This state gets updated while com-
pressing new input data. In context of the TLS Record Pro-
tocol (see Section 3.1), the Deﬂate compressor sequentially
gets fragments of application data. While compressing a sin-
gle fragment, the compressor state gets updated according
to the compressed input fragment. When switching to the
next fragment of application data, this developed compres-
sor state remains, i.e., the sliding window and the table of
estimated frequencies of symbols are not being reset.
4. DATA FINGERPRINTING
Our ﬁnal aim is to detect known data in encrypted TLS
communication.
If we eavesdrop on a TLS secured com-
munication channel we basically see encrypted TLS packets
augmented with headers from the lower communication lay-
ers, e.g. TCP, IP, and Ethernet headers. Among all meta
data still visible in encrypted TLS communication (such as
source and destination of the packets) we particularly choose
the length ﬁelds of TLS records. In the following we will de-
scribe an attack that lets us detect plaintext content in the
encrypted traﬃc under the condition that we have ﬁnger-
printed the exchanged data in advance. This attack even
works by solely taking the TLS record length ﬁelds into ac-
count.
Therefore, let us ﬁrst reconsider application data being
processed by the TLS Record Protocol (see Figure 1). As
described in Section 3.1, the input application data ﬁrst gets
fragmented into blocks of size 214 bytes or less. If the initial
application data’s size is at least a multiple of 214, each
fragment is of size 214 bytes (except the last one in case
Figure 1: TLS Record Layer
3. BACKGROUND
Before we present the main idea of our paper, we give
some background on the TLS Record Protocol as well as the
Deﬂate compression algorithm. These two building blocks
form the ground our attack is based on.
3.1 The TLS Record Layer
The Transport Layer Security (TLS) protocol is the most
widely used security protocol on the Internet today. Despite
of a long history of attacks, in many applications it is still
the ﬁrst choice when communication partners want to ensure
an authenticated, conﬁdential and integrity-protected infor-
mation exchange. All speciﬁed versions of TLS (v1.0, v1.1,
and v1.2) deﬁne the functionality to compress application
data before encrypting them.
The TLS Record Protocol handles application data frag-
mentation, compression, authentication of fragments and
encryption, as depicted in Figure 1. It ﬁrst fragments appli-
cation data coming from the upper layer into blocks of 214
bytes or less. Each fragment then gets compressed with the
compression algorithm negotiated in the initial TLS hand-
shake. This compression step will later provide the cru-
cial attack surface, since the rate of compression leaks in-
formation about the entropy of the fragments (see Section
5). Next, a Message Authentication Code (MAC) is gen-
erated for each compressed fragment over its content and
associated TLS header including content type, protocol ver-
sion and sequence number. The MAC is then added to the
corresponding fragment. The resulting blocks are then en-
crypted (using the encryption algorithm and cipher suite
negotiated at the initial establishment of the TLS channel
by the Handshake protocol of the upper layer). Last, a cor-
responding TLS header is added to each of the encrypted
blocks (not depicted in Figure 1).
3.2 The Deﬂate Compression Algorithm
A detailed understanding of the compression step of the
TLS Record Protocol is necessary in order to identify a source
of measurement uncertainty in realistic scenarios in Section
4.1. In the following, we refer to this uncertainty as noise.
The Deﬂate compression algorithm is the most commonly
used compression method in the TLS Record Protocol. Al-
though the TLS speciﬁcations (v1.0, v1.1, and v1.2) allow
Application dataFragment 1Fragment n...FragmentationCompressionFragment 1 compressedFragment n compressedFragment 1 compressedMAC GenerationMAC......Fragment n compressedMACEncryption...634lengths Si (i = 1, ..., n) and searching for a match in the
generated ﬁngerprint database. However, in a real scenario
we have to deal with noise in the TLS record lengths. So
before we present our detection method, we ﬁrst discuss the
sources of noise. In the following we identify two sources of
noise in the monitored TLS record lengths.
Fragment Offsets and Uncertain Compressor State.
In an ideal monitoring setting we could imagine that frag-
mentation in the TLS Record Protocol coincides with the
overall beginning of data transmission. Fragmentation in
this scenario begins with the ﬁrst 214 bytes of the ﬁnger-
printed application data. We could then monitor the TLS
record lengths and check if they match with the generated
ﬁngerprint sequence Si (i = 1, ..., n).
However, in a realistic scenario the application data in
scope is sent in the middle of a larger data stream. This
means that the ﬁrst bytes of the application data in scope
are appended to a previous data block and packed together
in one single fragment. The ﬁrst fragment in this scenario
holds previous data as well as the ﬁrst bytes from the ﬁn-
gerprinted data. So if the fragment gets compressed in the
next step of the TLS Record Protocol, the size of the com-
pressed fragment does not exactly match C1, the size of the
ﬁrst compressed fragment without previous data. With the
same argument, the actually monitored TLS record lengths
do not exactly match the ﬁngerprint Si (i = 1, ..., n).
Even more crucial is the state of the compressor. As de-
scribed in Section 3.2, the Deﬂate algorithm is stateful in
the sense that its state is represented by the content of the
LZ77 sliding window and the table of estimated frequencies
of symbols regarding Huﬀman coding. We already men-
tioned that when switching to the next fragment of appli-
cation data the compressor state remains. This means that
the last bytes of the previous data (which are the ﬁrst bytes
of the plaintext fragment) have inﬂuence on the compression
ratio of all subsequent fragments.
Theoretically we could proceed with measuring the se-
quence Si (i = 1, ..., n) for all possible combinations of pre-
vious data in all possible sizes (from zero to 214 − 1 bytes)
mixed into the ﬁrst TLS fragment, which is not feasible in
practice. Instead, we will later take only a small subset of
possible record lengths into account, train a machine learn-
ing algorithm with this subset and apply the trained machine
to classify previously unseen length sequences.
Symmetric Block Cipher Padding.
We can identify another source of noise in the encryp-
tion step of the TLS Record Protocol. When initially es-
tablishing the TLS channel, the communicating endpoints
negotiate a cipher suite for symmetric encryption. This ne-
gotiation takes place in the TLS handshake and the result
is redirected to the TLS Record Protocol, which then ap-
plies the negotiated symmetric algorithm to the compressed
fragments. When a symmetric block cipher is negotiated,
the compressed fragments (with appended MAC) have to
be padded to the block size of the symmetric cipher. For
example, when AES_256 is negotiated as symmetric cipher,
the compressed fragments (with appended MAC) are padded
to ﬁt into a multitude of 256 bit. If we had ﬁxed sizes of
compressed fragments, we could of course generate multiple
ﬁngerprints of a single ﬁle, one ﬁngerprint for each block
size. But this is not the case, as we have seen in the last
Figure 2: Generation of Ci (i = 1, ..., n)
the application data’s size is not a multiple of 214 bytes
and therefore the last fragment holds the remainder). We
assume without loss of generality that the application data
is fragmented into n ∈ N packets of size 214 bytes. Each
of those n packets gets compressed to size Ci (i = 1, ..., n)
less (or equal) to 214 bytes. The described generation of the
sequence Ci (i = 1, ..., n) is visualized in Figure 2.
Next, the compressed fragments of size Ci (i = 1, ..., n)
are further processed by the TLS Record Protocol as de-
scribed in Section 3.1. Each compressed fragment gets ap-
pended by an additional MAC (of constant length), an op-
tional padding for input to the symmetric block cipher, en-
crypted and wrapped into a TLS header. These attach-
ments are small compared to the sizes of the compressed
fragments, so the compressed TLS fragments have lengths
Ci ≈ Si (i = 1, ..., n) of approximately the lengths of the
corresponding records, which are eventually transferred to
the transport layer.
The size of a compressed data fragment gives us a practical
approximation of the entropy of that fragment. So if we
know the sizes Ci (i = 1, ..., n) we have a ﬁne-grained view
(of resolution 214 bytes) on the distribution of entropy of the
input application data. This entropy distribution is like a
ﬁngerprint of the input data. Since we can directly extract
the TLS record lengths Si (i = 1, ..., n) out of the intercepted
TLS communication and since Si ≈ Ci (i = 1, ..., n), we can
directly extract an approximation of the entropy distribution
of the exchanged communication data.
Bhargavan et al.
[1] indicated that this entropy distri-
bution may be unique for each ﬁle. They evaluated this
hypotheses on ten diﬀerent MP3 ﬁles with positive results.
However, it was completely left open how to automatically
detect ﬁngerprints from a large number of ﬁles. We will
demonstrate in the next section that we have to deal with
measurement uncertainty, also referred to as noise in the
following. To handle this noise we apply methods from the
ﬁeld of machine learning.
4.1 Sources of Noise in Realistic Scenarios
Ideally, detection of a ﬁngerprint in TLS communication
would be reduced to monitoring the sequence of TLS record
CompressionApplication Data635(cid:26)(cid:16)
(cid:17)
paragraph. Therefore, the symmetric block cipher padding
causes noise in the monitored TLS records.
4.2 Fingerprint Deﬁnition
Our concept of a data ﬁngerprint should be ﬂexible enough
to handle the described sources of noise in realistic scenarios.
Solely measuring the TLS record lengths Si (i = 1, ..., n) will
not be enough to apply our identiﬁcation method to large
data bases of ﬁles. Therefore, we have to bear in mind the
sources of noise for a deﬁnition of a ﬁngerprint practicable
in realistic scenarios.
For data a and b let a|b denote the concatenation of a and
b. For ω ∈ N let Rω denote a string of random bytes of
size ω. Further, for a ﬁle F and an oﬀset ω ∈ N let Sω
i (F)
(i = 1, ..., n(Rω|F )) be the sequence of n(Rω|F ) of TLS record
sizes when Rω|F is sent through a TLS channel.
Next, for an ω ∈ {1, ..., 214} we can divide the fragment
ω (cid:101) pieces, where (cid:100)x(cid:101) is the smallest
size 214 into m = (cid:100) 214
integer not less than x. With this notation in mind we give
the following deﬁnition for a data ﬁngerprint.
We deﬁne the ﬁngerprint Φω(F) of a ﬁle F and resolution
ω to be the set of sequences corresponding to
Φω(F) =
(F)
Skω
i
| k = 1, ...,
i=1,...,n(Rω|F )
(1)
In other words, the ﬁngerprint Φω(F) of a ﬁle F is the set