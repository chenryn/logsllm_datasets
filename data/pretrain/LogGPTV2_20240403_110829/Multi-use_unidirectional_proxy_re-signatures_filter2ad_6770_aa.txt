# Multi-Use Unidirectional Proxy Re-Signatures

## Authors
Benoît Libert  
Damien Vergnaud  
Université Catholique de Louvain, Crypto Group, Belgium

## Abstract
In 1998, Blaze, Bleumer, and Strauss introduced the concept of proxy re-signature, where a semi-trusted proxy transforms a signature computed under Alice's secret key into one from Bob on the same message. The proxy is limited in that it cannot learn any signing key or sign arbitrary messages on behalf of Alice or Bob. In 2005, Ateniese and Hohenberger revisited this primitive by providing appropriate security definitions and efficient constructions in the random oracle model. However, they left open the problem of constructing a multi-use unidirectional scheme where the proxy can only translate in one direction and signatures can be re-translated multiple times.

This paper presents the first steps towards efficiently solving this problem, which was first suggested 10 years ago. We introduce the first multi-hop unidirectional proxy re-signature schemes. Although our proposals feature a linear signature size in the number of translations, they are the first multi-use realizations of the primitive that satisfy the requirements of the Ateniese-Hohenberger security model. The first scheme is secure in the random oracle model. Using the same underlying idea, we extend this to a secure construction in the standard model. Both schemes are computationally efficient but require newly defined Diffie-Hellman-like assumptions in bilinear groups.

**Categories and Subject Descriptors:**
E.3 [Data]: Data Encryption – Public Key Cryptosystems

**General Terms:**
Algorithms, Design, Security

**Keywords:**
Digital signatures, multi-use proxy re-cryptography, unidirectionality

## 1. Introduction
In 1998, Blaze, Bleumer, and Strauss [10] introduced a cryptographic primitive where a semi-trusted proxy can transform Alice's signature on a message into Bob's signature on the same message. These proxy re-signatures (PRS) differ from proxy signatures [26] in that the proxy cannot sign arbitrary messages on behalf of Alice or Bob. Recent years have seen renewed interest in proxy re-cryptography [3, 4, 5, 20, 21, 22, 14].

This paper presents the first constructions of multi-use unidirectional proxy re-signature, where the proxy can only translate signatures in one direction, and messages can be re-signed a polynomial number of times. Our constructions are efficient and rely on new (but falsifiable) Diffie-Hellman-related intractability assumptions in bilinear map groups. One of our contributions is a secure scheme in the standard model (i.e., without resorting to the random oracle model).

### Related Work
Alice, the delegator, can easily designate a proxy to translate signatures computed using Bob's secret key into ones valid with respect to her public key by storing her secret key at the proxy. Upon receiving Bob's signatures, the proxy can check them and re-sign the message using Alice's private key. However, this approach allows the proxy to sign arbitrary messages on behalf of Alice. Proxy re-signatures aim to securely enable the delegation of signatures without fully trusting the proxy. They are related to proxy signatures [26, 18] in that any PRS can be used to implement a proxy signature mechanism, but the converse is not necessarily true.

In 1998, Blaze et al. [10] provided the first example of PRS where signing keys remain hidden from the proxy. The primitive was formalized in 2005 by Ateniese and Hohenberger [5], who identified useful properties expected from proxy re-signature schemes:
- **Multi-usability:** A message can be re-signed a polynomial number of times.
- **Privacy of proxy keys:** Re-signature keys can be kept secret by honest proxies.
- **Transparency:** Users may not even know that a proxy exists.
- **Unlinkability:** A re-signature cannot be linked to the signature from which it was generated.
- **Key optimality:** A user is only required to store a constant amount of secret data.
- **Non-interactivity:** The delegatee does not act in the delegation process.
- **Non-transitivity:** Proxies cannot re-delegate their re-signing rights.

Blaze et al.'s construction is bidirectional and multi-use, but Ateniese and Hohenberger [5] identified a flaw: given a signature/re-signature pair, anyone can deduce the re-signature key used in the delegation. Another issue is that the proxy and the delegatee can collude to expose the delegator's secret.

To overcome these limitations, Ateniese and Hohenberger [5] proposed two constructions based on bilinear maps. The first is a multi-use, bidirectional extension of Boneh-Lynn-Shacham (BLS) signatures [13]. Their second scheme is unidirectional but single-use, involving two different signature algorithms. A slightly less efficient variant was also suggested to ensure the privacy of re-signature keys. The security of all schemes was analyzed in the random oracle model [9].

### Motivations
Several applications motivate the search for unidirectional systems. One application is to provide a proof that a certain path was taken in a directed graph. For example, U.S. customs can use a single public key (the immigration service's key) to verify that a foreign visitor legally entered the country and went through the required checkpoints. Optionally, the final signature can hide the specific path chosen, vouching only for the fact that an authorized path was taken.

Another application is the sharing and conversion of digital certificates. Valid signatures for untrusted public keys can be turned into signatures that verify under already certified keys, saving the cost of obtaining a new certificate. Unidirectional schemes are appealing for converting certificates between ad-hoc networks.

As a third application, PRS can be used to implement anonymizable signatures that hide the internal organization of a company. Outgoing documents are first signed by specific employees. Before releasing them, a proxy translates signatures into ones that verify under a corporate public key, concealing the original issuer's identity and the internal structure of the company.

### Our Contributions
Ateniese and Hohenberger left as open challenges the design of multi-use unidirectional systems and secure schemes in the standard security model. This paper provides solutions to both problems:
- We present a simple and efficient system (built on the short signature put forth by Boneh et al. [13]) which is secure in the random oracle model under an appropriate extension of the Diffie-Hellman assumption.
- Using an elegant technique due to Waters [31], the scheme is modified to achieve security in the standard model. To the best of our knowledge, this provides the first unidirectional PRS that dispenses with random oracles and thereby improves a recent bidirectional construction [29].

Both proposals preserve the privacy of proxy keys (with improved efficiency compared to [5] in the case of the first one). They combine almost all of the above properties. As in prior unidirectional schemes, proxies are not completely transparent since signatures have different shapes and lengths across successive levels. The size of our signatures grows linearly with the number of past translations. Despite this, we retain important benefits:
- Signers may tolerate a limited number (say t) of signature translations for specific messages. If L distinct signature levels are permitted in the global system, users can directly sign messages at level L-t.
- The conversion of a ℓth-level signature is indistinguishable from one generated at level ℓ + 1 by the second signer. The original signer's identity is perfectly hidden, and the verifier only needs the new signer's public key.

As a last contribution, we show how the single-hop restrictions of both schemes can be modified to prove their security in the stronger plain public key model (also considered in [6] for different primitives). Prior works on proxy re-cryptography consider security definitions where dishonest parties' public keys are honestly generated and the corresponding secret key is known to the attacker. Relying on this assumption requires CAs to ask for a proof of knowledge of the associated private key before certifying a public key. In our setting, we extend the security definitions of [5] to the plain public key model, where the adversary is allowed to choose public keys on behalf of corrupt users without revealing or proving knowledge of the underlying private key. In our model, we construct single-hop unidirectional schemes that are secure in the plain public key model. The practical impact is that users do not have to demonstrate knowledge of their secret upon certification; they must only obtain a standard certificate such as those provided by current PKIs.

### Organization
In the following sections, we recall the syntax of unidirectional PRS schemes and the security model in Section 2. Section 3 explains the algorithmic assumptions we need. Section 4 describes our random-oracle-using scheme. In Section 5, we detail how to get rid of the random oracle idealization. Section 6 suggests single-hop constructions in the chosen-key model.

## 2. Model and Security Notions
We first recall the syntactic definition of unidirectional PRS schemes from [5].

### Definition 1 (Proxy Re-Signatures)
A (unidirectional) proxy re-signature (PRS) scheme for N signers and L levels (where N and L are both polynomial in the security parameter λ) is a tuple of (possibly randomized) algorithms (Global-Setup, Keygen, ReKeygen, Sign, Re-Sign, Verify) where:
- **Global-Setup(λ):** A randomized algorithm (possibly run by a trusted party) that takes as input a security parameter λ and produces system-wide public parameters cp.
- **Keygen(cp):** A probabilistic algorithm that, on input of public parameters cp, outputs a signer's private/public key pair (sk, pk).
- **ReKeygen(cp, pki, skj):** On input of public parameters cp, the public key pki of signer i, and signer j’s private key skj, this (possibly randomized but ideally non-interactive) algorithm outputs a re-signature key Rij that allows turning i’s signatures into signatures in the name of j.
- **Sign(cp, ℓ, ski, m):** On input of public parameters cp, a message m, a private key ski, and an integer ℓ ∈ {1, . . . , L}, this (possibly probabilistic) algorithm outputs a signature σ on behalf of signer i at level ℓ.
- **Re-Sign(cp, ℓ, m, σ, Rij, pki, pkj):** Given common parameters cp, a level ℓ < L signature σ from signer i ∈ {1, . . . , N} and a re-signature key Rij, this (possibly randomized) algorithm first checks that σ is valid w.r.t. pki. If yes, it outputs a signature σ' that verifies at level ℓ + 1 under the public key pkj.
- **Verify(cp, ℓ, m, σ, pki):** Given public parameters cp, an integer ℓ ∈ {1, . . . , L}, a message m, an alleged signature σ, and a public key pki, this deterministic algorithm outputs 0 or 1.

For all security parameters λ ∈ N and public parameters cp output by Global-Setup(λ), for all couples of private/public key pairs (ski, pki), (skj, pkj) produced by Keygen(cp), for any ℓ ∈ {1, . . . , L} and message m, we should have:
- Verify(cp, ℓ, m, Sign(cp, ℓ, ski, m), pki) = 1;
- Verify(cp, ℓ + 1, m, σ', pkj) = 1,
whenever σ' = ReSign(cp, ℓ, m, Sign(cp, ℓ, ski, m), Rij) and Rij = ReKeygen(cp, pki, skj).

To lighten notations, we sometimes omit to explicitly include public parameters cp that are part of the input of some of the above algorithms.

### Security Model
The security model of [5] considers the following two orthogonal notions termed external and insider security.

#### External Security
External security is the security against adversaries outside the system (different from the proxy and delegation partners). This notion demands that the next probability be a negligible function of the security parameter λ:
\[ \Pr\left[ \begin{array}{l}
(pki, ski) \leftarrow \text{Keygen}(\lambda) \text{ for } i \in [1, N], \\
(i^*, L, m^*, \sigma^*) \leftarrow A^{\text{OSign}(.), \text{OResign}(.)} (\{pki\}_{i \in [1, N]}) : \\
\text{Verify}(L, m^*, \sigma^*, pki_{i^*}) \land (i^*, m^*) \notin Q
\end{array} \right] \]
where OSign(.) is an oracle taking as input a message and an index i ∈ {1, . . . , N} to return a 1st-level signature σ ← Sign(1, ski, m); OResign(.) takes indices i, j ∈ {1, . . . , N} and a ℓth-level signature σ to output σ' ← Re-Sign(ℓ, m, σ, ReKeygen(pki, skj), pki, pkj); and Q denotes the set of (signer, message) pairs (i, m) queried to OSign(.) or such that a tuple (?, j, i, m), with j ∈ {1, . . . , N}, was queried to OResign(.). This notion only makes sense if re-signing keys are kept private by the proxy.

In our setting, the translation of a ℓth-level signature is perfectly indistinguishable from a signature produced by the delegator at level ℓ + 1. Therefore, we can always simulate the OResign(.) oracle by publicly "sending" outputs of OSign(.) to the next levels. For the sake of generality, we nevertheless leave OResign(.) in the definition.

#### Internal Security
The second security notion considered in [5] strives to protect users against dishonest proxies and colluding delegation partners. Three security guarantees should be ensured:
1. **Limited Proxy Security:** This notion captures the proxy's inability to sign messages on behalf of the delegatee or to create signatures for the delegator unless messages were first signed by one of the latter's delegatees. Formally, we consider a game where adversaries have all re-signing keys but are denied access to signers' private keys. The following probability should be negligible:
\[ \Pr\left[ \begin{array}{l}
(pki, ski) \leftarrow \text{Keygen}(\lambda) \text{ for } i \in [1, N], \\
Rij \leftarrow \text{ReKeygen}(pki, skj) \text{ for } i, j \in [1, N], \\
(i^*, L, m^*, \sigma^*) \leftarrow A^{\text{OSign}(.), \text{OResign}(.)} (\{pki\}_{i \in [1, N]}, \{Rij\}_{i, j \in [1, N]}) : \\
\text{Verify}(L, m^*, \sigma^*, pki_{i^*}) \land m^* \notin Q
\end{array} \right] \]

This concludes the introduction and overview of the security model. The subsequent sections will delve into the details of the algorithms and security proofs.