main[1] cont
Breakpoint hit: "thread=main", java.lang.String.equals(), line=639 bci=2
main[1] locals
Method arguments:
Local variables:
other = "I want to believe"
main[1] cont
This is the plaintext string you're looking for!
Debugging with an IDE
Setting up a project in an IDE with the decompiled sources is a neat trick that allows you to set method breakpoints
directly in the source code. In most cases, you should be able single-step through the app and inspect the state of
variables with the GUI. The experience won't be perfect—it's not the original source code after all, so you won't be
able to set line breakpoints and things will sometimes simply not work correctly. Then again, reversing code is never
easy, and efficiently navigating and debugging plain old Java code is a pretty convenient way of doing it. A similar
method has been described in the NetSPI blog.
To set up IDE debugging, first create your Android project in IntelliJ and copy the decompiled Java sources into the
source folder as described above in the "Reviewing Decompiled Java Code" section. On the device, choose the app
as “debug app” on the Developer options” (Uncrackable1 in this tutorial), and make sure you've switched on the "Wait
For Debugger" feature.
Once you tap the Uncrackable app icon from the launcher, it will be suspended in "Wait For Debugger" mode.
Now you can set breakpoints and attach to the Uncrackable1 app process with the "Attach Debugger" toolbar button.
269
Tampering and Reverse Engineering on Android
Note that only method breakpoints work when debugging an app from decompiled sources. Once a method
breakpoint is reached, you'll get the chance to single step during the method execution.
After you choose the Uncrackable1 application from the list, the debugger will attach to the app process and you'll
reach the breakpoint that was set on the onCreate method. Uncrackable1 app triggers anti-debugging and anti-
tampering controls within the onCreate method. That's why setting a breakpoint on the onCreate method just before
the anti-tampering and anti-debugging checks are performed is a good idea.
270
Tampering and Reverse Engineering on Android
Next, single-step through the onCreate method by clicking "Force Step Into" in Debugger view. The "Force Step Into"
option allows you to debug the Android framework functions and core Java classes that are normally ignored by
debuggers.
Once you "Force Step Into", the debugger will stop at the beginning of the next method, which is the a method of the
class sg.vantagepoint.a.c .
This method searches for the "su" binary within a list of directories ( /system/xbin and others). Since you're running
the app on a rooted device/emulator, you need to defeat this check by manipulating variables and/or function return
values.
271
Tampering and Reverse Engineering on Android
You can see the directory names inside the "Variables" window by clicking "Step Over" the Debugger view to step into
and through the a method.
Step into the System.getenv method with the "Force Step Into" feature.
After you get the colon-separated directory names, the debugger cursor will return to the beginning of the a method,
not to the next executable line. This happens because you're working on the decompiled code instead of the source
code. This skipping makes following the code flow crucial to debugging decompiled applications. Otherwise,
identifying the next line to be executed would become complicated.
If you don't want to debug core Java and Android classes, you can step out of the function by clicking "Step Out" in
the Debugger view. Using "Force Step Into" might be a good idea once you reach the decompiled sources and "Step
Out" of the core Java and Android classes. This will help speed up debugging while you keep an eye on the return
values of the core class functions.
272
Tampering and Reverse Engineering on Android
After the a method gets the directory names, it will search for the su binary within these directories. To defeat this
check, step through the detection method and inspect the variable content. Once execution reaches a location where
the su binary would be detected, modify one of the variables holding the file name or directory name by pressing F2
or right-clicking and choosing "Set Value".
Once you modify the binary name or the directory name, File.exists should return false .
This defeats the first root detection control of UnCrackable App for Android Level 1 . The remaining anti-tampering
and anti-debugging controls can be defeated in similar ways so that you can finally reach the secret string verification
functionality.
273
Tampering and Reverse Engineering on Android
The secret code is verified by the method a of class sg.vantagepoint.uncrackable1.a . Set a breakpoint on method
a and "Force Step Into" when you reach the breakpoint. Then, single-step until you reach the call to String.equals .
This is where user input is compared with the secret string.
You can see the secret string in the "Variables" view when you reach the String.equals method call.
274
Tampering and Reverse Engineering on Android
Debugging Native Code
Native code on Android is packed into ELF shared libraries and runs just like any other native Linux program.
Consequently, you can debug it with standard tools (including GDB and built-in IDE debuggers such as IDA Pro and
JEB) as long as they support the device's processor architecture (most devices are based on ARM chipsets, so this is
usually not an issue).
You'll now set up your JNI demo app, HelloWorld-JNI.apk, for debugging. It's the same APK you downloaded in
"Statically Analyzing Native Code". Use adb install to install it on your device or on an emulator.
$ adb install HelloWorld-JNI.apk
If you followed the instructions at the beginning of this chapter, you should already have the Android NDK. It contains
prebuilt versions of gdbserver for various architectures. Copy the gdbserver binary to your device:
$ adb push $NDK/prebuilt/android-arm/gdbserver/gdbserver /data/local/tmp
The gdbserver --attach command causes gdbserver to attach to the running process and bind to the IP address and
port specified in comm , which in this case is a HOST:PORT descriptor. Start HelloWorldJNI on the device, then
connect to the device and determine the PID of the HelloWorldJNI process (sg.vantagepoint.helloworldjni). Then
switch to the root user and attach gdbserver :
$ adb shell
$ ps | grep helloworld
u0_a164 12690 201 1533400 51692 ffffffff 00000000 S sg.vantagepoint.helloworldjni
$ su
# /data/local/tmp/gdbserver --attach localhost:1234 12690
Attached; pid = 12690
Listening on port 1234
The process is now suspended, and gdbserver is listening for debugging clients on port 1234 . With the device
connected via USB, you can forward this port to a local port on the host with the abd forward command:
$ adb forward tcp:1234 tcp:1234
275
Tampering and Reverse Engineering on Android
You'll now use the prebuilt version of gdb included in the NDK toolchain.
$ $TOOLCHAIN/bin/gdb libnative-lib.so
GNU gdb (GDB) 7.11
(...)
Reading symbols from libnative-lib.so...(no debugging symbols found)...done.
(gdb) target remote :1234
Remote debugging using :1234
0xb6e0f124 in ?? ()
You have successfully attached to the process! The only problem is that you're already too late to debug the JNI
function StringFromJNI ; it only runs once, at startup. You can solve this problem by activating the "Wait for Debugger"
option. Go to "Developer Options" -> "Select debug app" and pick HelloWorldJNI, then activate the "Wait for
debugger" switch. Then terminate and re-launch the app. It should be suspended automatically.
Our objective is to set a breakpoint at the first instruction of the native function
Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI before resuming the app. Unfortunately, this isn't
possible at this point in the execution because libnative-lib.so isn't yet mapped into process memory—it is loaded
dynamically during run time. To get this working, you'll first use JDB to gently change the process into the desired
state.
First, resume execution of the Java VM by attaching JDB. You don't want the process to resume immediately though,
so pipe the suspend command into JDB:
$ adb jdwp
14342
$ adb forward tcp:7777 jdwp:14342
$ { echo "suspend"; cat; } | jdb -attach localhost:7777
Next, suspend the process where the Java runtime loads libnative-lib.so . In JDB, set a breakpoint at the
java.lang.System.loadLibrary method and resume the process. After the breakpoint has been reached, execute the
step up command, which will resume the process until loadLibrary returns. At this point, libnative-lib.so has
been loaded.
> stop in java.lang.System.loadLibrary
> resume
All threads resumed.
Breakpoint hit: "thread=main", java.lang.System.loadLibrary(), line=988 bci=0
> step up
main[1] step up
>
Step completed: "thread=main", sg.vantagepoint.helloworldjni.MainActivity.(), line=12 bci=5
main[1]
Execute gdbserver to attach to the suspended app. This will cause the app to be suspended by both the Java VM
and the Linux kernel (creating a state of “double-suspension”).
$ adb forward tcp:1234 tcp:1234
$ $TOOLCHAIN/arm-linux-androideabi-gdb libnative-lib.so
GNU gdb (GDB) 7.7
Copyright (C) 2014 Free Software Foundation, Inc.
(...)
(gdb) target remote :1234
Remote debugging using :1234
0xb6de83b8 in ?? ()
Tracing
276
Tampering and Reverse Engineering on Android
Execution Tracing
Besides being useful for debugging, the JDB command line tool offers basic execution tracing functionality. To trace
an app right from the start, you can pause the app with the Android "Wait for Debugger" feature or a kill –STOP
command and attach JDB to set a deferred method breakpoint on any initialization method. Once the breakpoint is
reached, activate method tracing with the trace go methods command and resume execution. JDB will dump all
method entries and exits from that point onwards.
$ adb forward tcp:7777 jdwp:7288
$ { echo "suspend"; cat; } | jdb -attach localhost:7777
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
> All threads suspended.
> stop in com.acme.bob.mobile.android.core.BobMobileApplication.()
Deferring breakpoint com.acme.bob.mobile.android.core.BobMobileApplication.().
It will be set after the class is loaded.
> resume
All threads resumed.M
Set deferred breakpoint com.acme.bob.mobile.android.core.BobMobileApplication.()
Breakpoint hit: "thread=main", com.acme.bob.mobile.android.core.BobMobileApplication.(), line=44 bci=0
main[1] trace go methods
main[1] resume
Method entered: All threads resumed.
The Dalvik Debug Monitor Server (DDMS) is a GUI tool included with Android Studio. It may not look like much, but its
Java method tracer is one of the most awesome tools you can have in your arsenal, and it is indispensable for
analyzing obfuscated bytecode.
DDMS is somewhat confusing, however; it can be launched several ways, and different trace viewers will be launched
depending on how a method was traced. There's a standalone tool called "Traceview" as well as a built-in viewer in
Android Studio, both of which offer different ways to navigate the trace. You'll usually use Android studio's built-in
viewer, which gives you a zoom-able hierarchical timeline of all method calls. The standalone tool, however, is also
useful—it has a profile panel that shows the time spent in each method and the parents and children of each method.
To record an execution trace in Android Studio, open the "Android" tab at the bottom of the GUI. Select the target
process in the list and click the little "stop watch" button on the left. This starts the recording. Once you're done, click
the same button to stop the recording. The integrated trace view will open and show the recorded trace. You can
scroll and zoom the timeline view with the mouse or trackpad.
Execution traces can also be recorded in the standalone Android Device Monitor. The Device Monitor can be started
within Android Studio (Tools -> Android -> Android Device Monitor) or from the shell with the ddms command.
To start recording tracing information, select the target process in the "Devices" tab and click "Start Method Profiling".
Click the stop button to stop recording, after which the Traceview tool will open and show the recorded trace. Clicking
any of the methods in the profile panel highlights the selected method in the timeline panel.
DDMS also offers a convenient heap dump button that will dump the Java heap of a process to a .hprof file. The
Android Studio user guide contains more information about Traceview.
Tracing System Calls
Moving down a level in the OS hierarchy, you arrive at privileged functions that require the powers of the Linux kernel.
These functions are available to normal processes via the system call interface. Instrumenting and intercepting calls
into the kernel is an effective method for getting a rough idea of what a user process is doing, and often the most
efficient way to deactivate low-level tampering defenses.
277
Tampering and Reverse Engineering on Android
Strace is a standard Linux utility that monitors interaction between processes and the kernel. The utility is not included
with Android by default, but can easily be built from source via the Android NDK. Strace is a very convenient way to
monitor a process' system calls. Strace depends, however on the ptrace system call to attach to the target process,
so it only works up to the point at which anti-debugging measures start up.
If the Android "stop application at startup" feature is unavailable, you can use a shell script to launch the process and
immediately attach strace (not an elegant solution, but it works):
$ while true; do pid=$(pgrep 'target_process' | head -1); if [[ -n "$pid" ]]; then strace -s 2000 - e "!read" -
ff -p "$pid"; break; fi; done
Ftrace
Ftrace is a tracing utility built directly into the Linux kernel. On a rooted device, ftrace can trace kernel system calls
more transparently than strace can (strace relies on the ptrace system call to attach to the target process).
Conveniently, the stock Android kernel on both Lollipop and Marshmallow include ftrace functionality. The feature can
be enabled with the following command:
$ echo 1 > /proc/sys/kernel/ftrace_enabled
The /sys/kernel/debug/tracing directory holds all control and output files related to ftrace. The following files are
found in this directory:
available_tracers: This file lists the available tracers compiled into the kernel.
current_tracer: This file sets or displays the current tracer.
tracing_on: Echo "1" into this file to allow/start update of the ring buffer. Echoing "0" will prevent further writes into
the ring buffer.
KProbes
The KProbes interface provides an even more powerful way to instrument the kernel: it allows you to insert probes
into (almost) arbitrary code addresses within kernel memory. KProbes inserts a breakpoint instruction at the specified
address. Once the breakpoint is reached, control passes to the KProbes system, which then executes the user-
defined handler function(s) and the original instruction. Besides being great for function tracing, KProbes can
implement rootkit-like functionality, such as file hiding.
Jprobes and Kretprobes are other KProbes-based probe types that allow hooking of function entries and exits.
The stock Android kernel comes without loadable module support, which is a problem because Kprobes are usually
deployed as kernel modules. The strict memory protection the Android kernel is compiled with is another issue
because it prevents the patching of some parts of Kernel memory. Elfmaster's system call hooking method causes a
Kernel panic on stock Lollipop and Marshmallow because the sys_call_table is non-writable. You can, however, use
KProbes in a sandbox by compiling your own, more lenient Kernel (more on this later).
Emulation-based Analysis
The Android emulator is based on QEMU, a generic and open source machine emulator. QEMU emulates a guest
CPU by translating the guest instructions on-the-fly into instructions the host processor can understand. Each basic
block of guest instructions is disassembled and translated into an intermediate representation called Tiny Code
Generator (TCG). The TCG block is compiled into a block of host instructions, stored in a code cache, and executed.
After execution of the basic block, QEMU repeats the process for the next block of guest instructions (or loads the
already translated block from the cache). The whole process is called dynamic binary translation.
278
Tampering and Reverse Engineering on Android
Because the Android emulator is a fork of QEMU, it comes with all QEMU features, including monitoring, debugging,
and tracing facilities. QEMU-specific parameters can be passed to the emulator with the -qemu command line flag.
You can use QEMU's built-in tracing facilities to log executed instructions and virtual register values. Starting QEMU
with the -d command line flag will cause it to dump the blocks of guest code, micro operations, or host instructions
being executed. With the –d_asm flag, QEMU logs all basic blocks of guest code as they enter QEMU's translation
function. The following command logs all translated blocks to a file:
$ emulator -show-kernel -avd Nexus_4_API_19 -snapshot default-boot -no-snapshot-save -qemu -d in_asm,cpu 2>/tmp
/qemu.log
Unfortunately, generating a complete guest instruction trace with QEMU is impossible because code blocks are
written to the log only at the time they are translated—not when they're taken from the cache. For example, if a block
is repeatedly executed in a loop, only the first iteration will be printed to the log. There's no way to disable TB caching
in QEMU (besides hacking the source code). Nevertheless, the functionality is sufficient for basic tasks, such as
reconstructing the disassembly of a natively executed cryptographic algorithm.
Dynamic analysis frameworks, such as PANDA and DroidScope, build on QEMU's tracing functionality.
PANDA/PANDROID is the best choice if you're going for a CPU-trace based analysis because it allows you to easily
record and replay a full trace and is relatively easy to set up if you follow the build instructions for Ubuntu.
DroidScope
DroidScope (an extension to the DECAF dynamic analysis framework)is a malware analysis engine based on QEMU.
It instruments the emulated environment on several context levels, making it possible to fully reconstruct the
semantics on the hardware, Linux and Java levels.
DroidScope exports instrumentation APIs that mirror the different context levels (hardware, OS, and Java) of a real
Android device. Analysis tools can use these APIs to query or set information and register callbacks for various
events. For example, a plugin can register callbacks for native instruction start and end, memory reads and writes,
register reads and writes, system calls, and Java method calls.
All of this makes it possible to build tracers that are practically transparent to the target application (as long as we can
hide the fact that it is running in an emulator). One limitation is that DroidScope is compatible with the Dalvik VM only.
PANDA
PANDA is another QEMU-based dynamic analysis platform. Similar to DroidScope, PANDA can be extended by
registering callbacks that are triggered by certain QEMU events. The twist PANDA adds is its record/replay feature.
This allows an iterative workflow: the reverse engineer records an execution trace of the target app (or some part of
it), then replays it repeatedly, refining the analysis plugins with each iteration.
PANDA comes with pre-made plugins, including a string search tool and a syscall tracer. Most importantly, it supports
Android guests, and some of the DroidScope code has even been ported. Building and running PANDA for Android
("PANDROID") is relatively straightforward. To test it, clone Moiyx's git repository and build PANDA:
$ cd qemu
$ ./configure --target-list=arm-softmmu --enable-android $ makee
As of this writing, Android versions up to 4.4.1 run fine in PANDROID, but anything newer than that won't boot. Also,
the Java level introspection code only works on the Android 2.3 Dalvik runtime. Older versions of Android seem to run
much faster in the emulator, so sticking with Gingerbread is probably best if you plan to use PANDA. For more
information, check out the extensive documentation in the PANDA git repository.
VxStripper
279
Tampering and Reverse Engineering on Android
Another very useful tool built on QEMU is VxStripper by Sébastien Josse. VXStripper is specifically designed for de-
obfuscating binaries. By instrumenting QEMU's dynamic binary translation mechanisms, it dynamically extracts an
intermediate representation of a binary. It then applies simplifications to the extracted intermediate representation and
recompiles the simplified binary with LLVM. This is a very powerful way of normalizing obfuscated programs. See
Sébastien's paper for more information.