本节特别针对美国。Twilio 确实也在美国以外的国家提供手机短信服务，本书
并不包括这些细节。但 twilio 模块及其功能，在美国以外的国家也能用。更多信息
请参见http://twilio.com/。
16.6.1 注册Twilio 账号
访问 http://twilio.com/并填写注册表单。注册了新账户后，你需要验证一个手机
号码，短信将发给该号码（这项验证是必要的，防止有人利用该服务向任意的手机
第16章 发送电子邮件和短信
号码发送垃圾短信）。
收到验证号码短信后，在Twilio网站上输入它，证明你拥有要验证的手机。现
在，就可以用twilio模块向这个电话号码发送短信了。
Twilio 提供的试用账户包括一个电话号码，它将作为短信的发送者。你将需要
两个信息：你的账户 SID 和 AUTH（认证）标志。在登录 Twilio 账户时，可以在
Dashboard 页面上找到这些信息。从Python 程序登录时，这些值将作为你的 Twilio
用户名和密码。
16.6.2 发送短信
一旦安装了twilio模块，注册了Twilio账号，验证了你的手机号码，登记了Twilio
电话号码，获得了账户的SID 和auth 标志，你就终于准备好通过Python 脚本向你
自己发短信了。
与所有的注册步骤相比，实际的Python代码很简单。保持计算机连接到因特网，
在交互式环境中输入以下代码，用你的真实信息替换 accountSID、authToken、
myTwilioNumber和myCellPhone变量的值：
 >>> from twilio.rest import TwilioRestClient
>>> accountSID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
>>> authToken = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
 >>> twilioCli = TwilioRestClient(accountSID, authToken)
>>> myTwilioNumber = '+14955551234'
>>> myCellPhone = '+14955558888'
 >>> message = twilioCli.messages.create(body='Mr. Watson - Come here - I want
t o see you.', from_=myTwilioNumber, to=myCellPhone)
键入最后一行后不久，你会收到一条短信，内容为：Sent from your Twilio trial
account - Mr. Watson - Come here – I want to see you.。
因为 twilio 模块的设计方式，导入它时需要使用 from twilio.rest import
TwilioRestClient，而不仅仅是import twilio。将账户的SID保存在accountSID，认
证标志保存在 authToken 中，然后调用 TwilioRestClient()，并传入 accountSID 和
authToken。TwilioRestClient()调用返回一个TwilioRestClient对象。该对象有一个
message属性，该属性又有一个create()方法，可以用来发送短信。正是这个方法，
将告诉 Twilio 的服务器发送短信。将你的 Twilio 号码和手机号码分别保存在
myTwilioNumber和myCellPhone中，然后调用create()，传入关键字参数，指明短信的
正文、发件人的号码（myTwilioNumber），以及收信人的电话号码（myCellPhone）
create()方法返回的Message对象将包含已发送短信的相关信息。输入以下代码，
继续交互式环境的例子：
>>> message.to
'+14955558888'
>>> message.from_
'+14955551234'
Python编程快速上手——让繁琐工作自动化
>>> message.body
'Mr. Watson - Come here - I want to see you.'
to、from_和 body 属性应该分别保存了你的手机号码、Twilio 号码和消息。请
注意，发送手机号码是在from_属性中，末尾有一个下划线，而不是from。这是因
为from是一个Python关键字（例如，你在from modulename import *形式的import语
句中见过它），所以它不能作为一个属性名。输入以下代码，继续交互式环境的例子：
>>> message.status
'queued'
>>> message.date_created
datetime.datetime(2015, 7, 8, 1, 36, 18)
>>> message.date_sent == None
True
status 属性应该包含一个字符串。如果消息被创建和发送，date_created 和
date_sent属性应该包含一个 datetime对象。如果已收到短信，而 status属性却设置
为'queued'，date_sent属性设置为None，这似乎有点奇怪。这是因为你先将Message
对象记录在message变量中，然后短信才实际发送。你需要重新获取Message对象，
查看它最新的status和date_sent。每个Twilio消息都有唯一的字符串ID（SID），可
用于获取Message对象的最新更新。输入以下代码，继续交互式环境的例子：
>>> message.sid
'SM09520de7639ba3af137c6fcb7c5f4b51'
 >>> updatedMessage = twilioCli.messages.get(message.sid)
>>> updatedMessage.status
'delivered'
>>> updatedMessage.date_sent
d atetime.datetime(2015, 7, 8, 1, 36, 18)
输入 message.sid 将显示这个消息的 SID。将这个 SID 传入 Twilio 客户端的 get()
方法，你可以取得一个新的Message对象，包含最新的信息。在这个新的Message
对象中，status和date_sent属性是正确的。
status 属性将设置为下列字符串之一：'queued'、'sending'、'sent'、'delivered'、
'undelivered'或'failed'。这些状态不言自明，但对于更准确的细节，请查看 http://nostarch.
com/automatestuff/的资源。
用Python接收短信
遗憾的是，用Twilio接收短信比发送短信更复杂一些。Twilio需要你有一个
网站，运行自己的Web应用程序。这已超出了本书的范围，但你可以在本书的资
源中找到更多细节（http://nostarch.com/automatestuff/）。
16.7 项目：“只给我发短信”模块
最常用你的程序发短信的人可能就是你。当你远离计算机时，短信是通知你自
第16章 发送电子邮件和短信
己的好方式。如果你已经用程序自动化了一个无聊的任务，它需要运行几小时，你
可以在它完成时，让它用短信通知你。或者可以定期运行某个程序，它有时需要与
你联系，例如天气检查程序，用短信提醒你带伞。
举一个简单的例子，下面是一个 Python 小程序，包含了 textmyself()函数，它
将传入的字符串参数作为短信发出。打开一个新的文件编辑器窗口，输入以下代码，用
自己的信息替换帐户SID，认证标志和电话号码。将它保存为textMyself.py。
#! python3
# textMyself.py - Defines the textmyself() function that texts a message
# passed to it as a string.
# Preset values:
accountSID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
authToken = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
myNumber = '+15559998888'
twilioNumber = '+15552225678'
from twilio.rest import TwilioRestClient
 def textmyself(message):
 twilioCli = TwilioRestClient(accountSID, authToken)
 twilioCli.messages.create(body=message, from_=twilioNumber, to=myNumber)
该程序保存了账户的 SID、认证标志、发送号码及接收号码。然后它定义了
textmyself()，接收参数，创建 TwilioRestClient 对象，并用你传入的消息调用
create()。
如果你想让其他程序使用textmyself()函数，只需将textMyself.py文件和Python
的可执行文件放在同一个文件夹中（Windows 上是 C:\Python34，OS X 上是
/usr/local/lib/python3.4，Linux上是/usr/bin/python3）。现在，你可以在其他程序中使
用该函数。只要想在程序中发短信给你，就添加以下代码：
import textmyself
textmyself.textmyself('The boring task is finished.')
注册Twilio和编写短信代码只要做一次。在此之后，从任何其他程序中发短信，
只要两行代码。
16.8 小结
通过因特网和手机网络，我们用几十种不同的方式相互通信，但以电子邮件和
短信为主。你的程序可以通过这些渠道沟通，这给它们带来强大的新通知功能。甚
至可以编程运行在不同的计算机上，相互直接通过电子邮件能信，一个程序用 SMTP
发送电子邮件，另一个用IMAP收取。
Python 的 smtplib 提供了一些函数，利用 SMTP，通过电子邮件提供商的SMTP
Python编程快速上手——让繁琐工作自动化
服务器发送电子邮件。同样，第三方的 imapclient 和 pyzmail 模块让你访问 IMAP
服务器，并取回发送给你的电子邮件。虽然IMAP比SMTP复杂一些，但它也相当
强大，允许你搜索特定电子邮件、下载它们、解析它们，提取主题和正文作为字符
串值。
短信与电子邮件有点不同，因为它不像电子邮件，发送短信不仅需要互联网连
接。好在，像Twilio这样的服务提供了模块，允许你通过程序发送短信。一旦通过
了初始设置过程，就能够只用几行代码来发送短信。掌握了这些模块，就可以针对
特定的情况编程，在这些情况下发送通知或提醒。现在，你的程序将超越运行它们
的计算机！
16.9 习题
1．发送电子邮件的协议是什么？检查和接收电子邮件的协议是什么？
2．必须调用哪4个smtplib函数/方法，才能登录到SMTP服务器？
3．必须调用哪两个imapclient函数/方法，才能登录到IMAP服务器？
4．传递给mapObj.search()什么样的参数？
5．如果你的代码收到了错误消息，got more than 10000 bytes，你该怎么做？
6．imapclient模块负责连接到IMAP服务器和查找电子邮件。什么模块负责读
取imapclient收集的电子邮件？
7．在发送短信之前，你需要从Twilio得到哪3种信息？
16.10 实践项目
作为实践，编程完成以下任务。
16.10.1 随机分配家务活的电子邮件程序
编写一个程序，接受一个电子邮件地址的列表，以及一个需要做的家务活列表，
并随机将家务活分配给他们。用电子邮件通知每个人分配给他们的家务。如果你觉
得需要挑战，就记录每个人之前分配家务活的记录，这样就可以确保程序不会向
任何人分配上一次同样的家务活。另一个可能的功能，就是安排程序每周自动运
行一次。
这里有一个提示：如果将一个列表传入 random.choice()函数，它将从该列表中
返回一个随机选择的项。你的部分代码看起来可能像这样：
chores = ['dishes', 'bathroom', 'vacuum', 'walk dog']
randomChore = random.choice(chores)
chores.remove(randomChore) # this chore is now taken, so remove it
第16章 发送电子邮件和短信
16.10.2 伞提醒程序
第11章展示了如何利用requests模块，从http://weather.gov/抓取数据。编写一
个程序，在你早晨快醒来时运行，检查当天是否会下雨。如果会下雨，让程序用短
信提醒你出门之前带好一把伞。
16.10.3 自动退订
编程扫描你的电子邮件账户，在所有邮件中找到所有退订链接，并自动在浏览
器中打开它们。该程序必须登录到你的电子邮件服务提供商的IMAP服务器，并下
载所有电子邮件。可以用BeautifulSoup（在第11章中介绍）检查所有出现unsubscribe
（退订）的HTML链接标签。
得到这些 URL 的列表后，可以用 webbrowser.open()，在浏览器中自动打开所
有这些链接。
仍然需要手工操作并完成所有额外的步骤，从这些邮件列表中退订。在大多数
情况下，这需要点击一个链接确认。
但这个脚本让你不必查看所有电子邮件，寻找退订链接。然后，可以将这个脚
本转给你的朋友，让他们能够针对他们的电子邮件账户运行它（要确保你的邮箱密
码没有硬编码在源代码中）。
16.10.4 通过电子邮件控制你的电脑
编写一个程序，每 15 分钟检查电子邮件账户，获取用电子邮件发送的所有指
令，并自动执行这些指令。例如，BitTorrent是一个对等网络下载系统。利用免费的
BitTorrent软件，如qBittorrent，可以在家用电脑上下载很大的媒体文件。如果你用
电子邮件向该程序发送一个（完全合法的，根本不是盗版的）BitTorrent链接，该程
序将检查电子邮件，发现这个消息，提取链接，然后启动qBittorrent，开始下载文件。
通过这种方式，你可以在离开家的时候让家用电脑开始下载，这些（完全合法的，根
本不是盗版的）下载在你回家前就能完成。
第 15 章介绍了如何利用 subprocess.Popen()函数启动计算机上的程序。例如，
下面的调用将启动qBittorrent程序，并打开一个torrent文件：
qbProcess = subprocess.Popen(['C:\\Program Files (x86)\\qBittorrent\\
qbittorrent.exe', 'shakespeare_complete_works.torrent'])
当然，你希望该程序确保邮件来自于你自己。具体来说，你可能希望该邮件包
含一个密码，因为在电子邮件中伪造“from”地址，对黑客来说很容易。该程序应
该删除它发现的邮件，这样就不会每次检查电子邮件账户时重复执行命令。作为一
个额外的功能，让程序每次执行命令时，用电子邮件或短信给你发一条确认信息。因
Python编程快速上手——让繁琐工作自动化
为该程序运行时，你不会坐在运行它的计算机前面，所以利用日志函数（参见第 10
章）写文本文件日志是一个好主意，你可以检查是否发生错误。
qBittorrent（以及其他BitTorrent应用程序）有一个功能，下载完成后，它可以
自动退出。第15章解释了如何用Popen对象的wait()方法，确定启动的应用程序何
时已经退出。wait()方法调用将阻塞，直到qBittorrent停止，然后程序可以通过电子
邮件或短信，通知你下载已经完成。
可以为这个项目添加许多可能的功能。如果遇到困难，可以从 http://nostarch.
com/automatestuff/下载这个程序的示例实现。
第16章 发送电子邮件和短信
17
第 章
操 作 图 像
如果你有一台数码相机，或者只是将照片从手机上传
到 Facebook，你可能随时都会偶然遇到数字图像文件。你
可能知道如何使用基本的图形软件，如 Microsoft Paint 或
Paintbrush，甚至更高级的应用程序，如 Adobe Photoshop。
但是，如果需要编辑大量的图像，手工编辑可能是漫长、
枯燥的工作。
请用 Python。Pillow 是一个第三方 Python 模块，用于
处理图像文件。该模块包含一些函数，可以很容易地裁剪图像、调整图像大小，
以及编辑图像的内容。可以像 Microsoft Paint或 Adobe Photoshop 一样处理图
像，有了这种能力，Python 可以轻松地自动编辑成千上万的图像。
17.1 计算机图像基础
为了处理图像，你需要了解计算机如何处理图像中的颜色和坐标的基本知识，
以及如何在Pillow中处理颜色和坐标。但在继续探讨之前，先要安装pillow模块。