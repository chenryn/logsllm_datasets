能将最新访问的数据缓存起来，而将历史数据清理出缓存。如果应用系统访问数据没有
非常高，比如新浪微博的热门微博，缓存以后可能会被读取数百万次。
写入一次缓存，在数据更新前至少读取两次，缓存才有意义。实践中，这个读写比通常
和事务一致性的问题。
需慎重对待。还有一种策略是数据更新时立即更新缓存，不过这也会带来更多系统开销
因此应用要容忍一定时间的数据不一致，如卖家已经编辑了商品属性，但是需要过一段
有意义，因为大部分数据还没有被再次访问就已经被挤出缓存了。
热点，不遵循二八定律，即大部分数据访问并没有集中在小部分数据上，那么缓存就没
取缓存，数据就已失效的情形，徒增系统负担。一般说来，数据的读写比在2:1以上，即
低可用的缓存系统、不恰当地使用缓存的数据访问特性等。
能，还会成为系统的累赘，甚至风险。实践中，缓存滥用的情景屡见不鲜一
据读取速度，降低存储访问压力。
的处理-
缓存是为提高数据读取性能的，缓存数据丢失或者缓存不可用不会影响到应用程序
一般会对缓存的数据设置失效时间，一旦超过失效时间，就要从数据库中重新加载。
缓存使用内存作为存储，内存资源宝贵而有限，不可能将所有数据都缓存起来，只
频繁修改的数据
2.合理使用缓存
网站数据访问通常遵循二八定律，即80%的访问落在20%的数据上，因此利用Hash
缓存可用性
数据不一致与脏读
没有热点的访问
如果缓存中保存的是频繁修改的数据，就会出现数据写入缓存后，应用还来不及读
使用缓存对提高系统性能有很多好处，但是不合理使用缓存非但不能提高系统的性
一它可以从数据库直接获取数据。但是随着业务的发展，缓存会承担大部分数
4瞬时响应：网站的高性能架构
一过分依赖
47
---
## Page 69
据库加载这部分数据不会对数据库产生很大影响。
改善缓存的可用性。当一台缓存服务器宕机的时候，只有部分缓存数据丢失，重新从数
将缓存访问切换到热备服务器上。但是这种设计显然有违缓存的初衷，缓存根本就不应
据访问的压力，数据库已经习惯了有缓存的日子，所以当缓存服务崩溃时，数据库会因
崩溃。一个简单的对策是将不存在的数据也缓存起来（其value 值为 null )。
缓存没有保存该数据，所有的请求都会落到数据库上，会对数据库造成很大压力，甚至
up）。对于一些元数据如城市地名列表、类目信息，可以在启动时加载数据库中全部数据
么最好在缓存系统启动时就把热点数据加载好，这个缓存预加载手段叫作缓存预热（warm
如果没有任何数据，在重建缓存数据的过程中，系统的性能和数据库负载都不太好，那
对不断访问的数据筛选淘汰出来的，这个过程需要花费较长的时间。新启动的缓存系统
雪崩，发生这种故障，甚至不能简单地重启缓存服务器和数据库服务器来恢复网站访问
该被当做一个可靠的数据源来使用。
为完全不能承受如此大的压力而宕机，进而导致整个网站不可用。这种情况被称作缓存
到缓存进行预热。
大型网站技术架构核心原理与案例分析
48
通过分布式缓存服务器集群，将缓存数据分布到集群多台服务器上可在一定程度上
实践中，有的网站通过缓存热备等手段提高缓存可用性：当某台缓存服务器宕机时
如果因为不恰当的业务、或者恶意攻击持续高并发地请求某个不存在的数据，由于
缓存中存放的是热点数据，热点数据又是缓存系统利用LRU（最近最久未用算法）
缓存穿透
缓存预热
失去生命力的四不像。
来改变产品的发展方向，左右摇摆、什么都想做的产品，最后有可能成为一个
不是产品提供的特性。在产品漫长的生命周期中，会有形形色色的困难和诱惑
产品在设计之初就需要一个明确的定位：什么是产品要实现的功能，什么
---
## Page 70
Memcached 为代表的不互相通信的分布式缓存。
缓存服务器之间不通信，缓存集群的规模可以很容易地实现扩容，具有良好的可伸缩性。
的内存空间，而且当集群规模较大的时候，缓存更新信息需要同步到集群所有机器，其
图4.9所示。JBossCache 通常将应用程序和缓存部署在同一台服务器上，应用程序可从
器有缓存数据更新的时候，会通知集群中其他机器更新缓存数据或清除缓存数据，如
架构方式有两种，一种是以 JBoss Cache 为代表的需要更新同步的分布式缓存，一种是以
优异的性能、互不通信的服务器集群、海量数据可伸缩的架构令网站架构师们趋之若鹜。
的服务器上，应用程序通过一致性Hash等路由算法选择缓存服务器远程访问缓存数据，
也被称作互不通信的分布式架构方式。缓存与应用分离部署，缓存系统部署在一组专门
代价惊人。因而这种方案更多见于企业应用系统中，而很少在大型网站使用。
本地快速获取缓存数据，但是这种方式带来的问题是缓存数据的数量受限于单一服务器
就需要另一种分布式缓存，如图4.10所示。Memcached采用一种集中式的缓存集群管理，
JBoss Cache的分布式缓存在集群中所有服务器中保存相同的缓存数据，当某台服务
分布式缓存指缓存部署在多个服务器组成的集群中，以集群方式提供缓存服务，其
Memcached 曾一度是网站分布式缓存的代名词，被大量网站使用。其简单的设计、
大型网站需要缓存的数据量一般都很庞大，可能会需要数TB 的内存做缓存，这时候
3.分布式缓存架构
Memcached的伸缩性设计参考本书第6章内容。
4
H
Memcached
BossCache
应用程序
更新同步
图4.9需要更新同步的 JBoss Cache
更新同步
Boss Cache
应用程序
更新同步
瞬时响应：网站的高性能架构T
JBossCache
应用程序
49
---
## Page 71
NoSQL产品都借鉴了或直接支持这套协议。
50
网站，Memcached更是如鱼得水。
语言，Java、C/C++/C#、Perl、Python、PHP、Ruby等，因此在混合使用多种编程语言的
列化协议则是一套基于文本的自定义协议，非常简单，以一个命令关键字开头，后面是
数据序列化方式才能使通信得以完成，如 XML、JSON 等文本序列化协议，或者Google
议，抑或HTTP协议；一是通信序列化协议，数据传输的两端，必须使用彼此可识别的
器通信，因此Memcached发展出非常丰富的客户端程序，几乎支持所有主流的网站编程
一组命令操作数。例如读取一个数据的命令协议是 get。Memcached 以后，许多
Protobuffer等二进制序列化协议。Memcached使用TCP协议（UDP也支持）通信，其序
大型网站技术架构核心原理与案例分析
高性能的网络通信
Memcached通信协议非常简单，只要支持该协议的客户端都可以和Memcached服务
Memcached服务端通信模块基于Libevent，一个支持事件触发的网络通信程序库。
丰富的客户端程序
远程通信设计需要考虑两方面的要素，一是通信协议，即选择TCP协议还是UDP协
简单的通信协议
ched
服务器
应用服务器1
应用程序
图4.10不互相通信的Memcached
协议memcached协议
mecached
服务器
应用服务器2
memcached协议
---
## Page 72
Memcached需要的。
Libevent 的设计和实现有许多值得改善的地方，但它在稳定的长连接方面的表现却正是
务器互不通信使得集群可以做到几乎无限制的线性伸缩，这也正是目前流行的许多大数
更成为数据存储伸缩性架构设计的经典范式（参考本书第6章）。事实上，正是集群内服
存产品中脱颖而出，满足网站对海量缓存数据的需求。而其客户端路由算法一致性 Hash
个 chunk只能存一个数据，其他空间被浪费了。如果启动参数配置不合理，浪费会更加惊
问的数据占用的空间，释放的chunk被标记为未用，等待下一个合适大小数据的写入。
是以chunk为单位的。和其他缓存一样，Memcached 采用LRU算法释放最近最久未被访
slab_class，如图4.11 所示。存储数据时根据数据的 Size大小，寻找一个大于 Size 的最小
chunk将数据写入。这种内存管理方式避免了内存碎片管理的问题，内存的分配和释放都
slab里的每个chunk的大小是固定的，拥有相同大小chunk的slab被组织在一起，叫作
空间分配。Memcached将内存空间分为一组 slab，每个 slab里又包含一组chunk，同一个
这方面想了许多办法：压缩、复制等。Memcached 使用了一个非常简单的办法一
人，发现没有缓存多少数据，内存空间就用尽了。
当然这种方式也会带来内存浪费的问题。数据只能存入一个比它大的chunk里，而一
内存管理中一个令人头痛的问题就是内存碎片管理。操作系统、虚拟机垃圾回收在
高效的内存管理
如上所述，正是这个特性使得Memcached从JBoss Cache、OSCache等众多分布式缓
互不通信的服务器集群架构
slab_class[m]
slab_class[2]
slab_class[6]
slab_class[4]
slab_class[3]
slab_class[1]
图4.11Memcached内存管理
slab[4]
slab[2]
slab[1]
slab[6]
slab[5]
瞬时响应：网站的高性能架构
chunk[x]
chunk[6]
chunk[5]
chunk[4]
chunk[3]
chunk[2]
chunk[1]
一固定
51
---
## Page 73
据技术的基本架构特点。
使用消息队列，可有效抵御促销活动刚开始大量涌入的订单对系统造成的冲击。如图4.14
使用消息队列还可改善网站系统的性能，如图4.12和图4.13所示。
4.3.2
然在分布式缓存领域占据着重要地位。
能方面有许多产品优于Memcached，但Memcached由于其简单、稳定、专注的特点，仍
息存储在消息队列中，从而削平高峰期的并发事务。在电子商务网站促销活动中，合理
性），因此用户的响应延迟可得到有效改善。
消息队列服务器处理速度远快于数据库（消息队列服务器也比数据库具有更好的伸缩
通常独立部署在专门的服务器集群上）从消息队列中获取数据，异步写入数据库。由于
的数据发送给消息队列后立即返回，再由消息队列的消费者进程（通常情况下，该进程
会对数据库造成巨大的压力，同时也使得响应延迟加剧。在使用消息队列后，用户请求
52
所示。
大型网站技术架构核心原理与案例分析
虽然近些年许多NoSQL产品层出不穷，在数据持久化、支持复杂数据结构、甚至性
使用消息队列将调用异步化，可改善网站的扩展性（参考本书第7章内容）。事实上，
消息队列具有很好的削峰作用——即通过异步处理，将短时间高并发产生的事务消
在不使用消息队列的情况下，用户的请求数据直接写入数据库，在高并发的情况下，
用户
用户
异步操作
-1发送请求一
-3接收响应一
1发送请求
—3接收响应—
图4.12不使用消息队列服务器
图4.13使用消息队列服务器
D
网站应用服务器
2发送消息