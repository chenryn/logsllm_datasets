Every app needs to define some metadata, the most important
being the package name, a developer-specified string that acts as
the main app identifier. While it is commonly believed that package
names are analogous to web domain names for mobile apps, they
are actually very different for what concerns security guarantees.
In fact, the only constraint is that the package name needs to be
unique 1) across the apps published on the Play Store and 2) across
the apps installed on a given device. No other security guarantees
are provided.
Once installed, apps execution is sandboxed via a number of
security mechanisms. Thus, apps have access to private storage,
and they cannot interfere with the execution of other apps. Access
to security- and privacy-related functionality and information are
controlled by the Android permission system (i.e., each app needs
to declare the list of permission it needs to work properly), and
inter-app communication is implemented via the Intent system.
3 ANDROID PASSWORD MANAGERS
A password manager (PM from now on) is a tool that stores and
manages user’s credentials like usernames and passwords. PMs aim
to suggest to the user the right credentials to insert in login forms,
thereby leveraging the same user from the burden of memorizing
their sensitive data.
PMs have been originally conceived for the web domain and
mostly implemented as browser extensions. They work as follows:
the first time a user visits a website and inputs credentials in online
forms, the PM stores such credentials on its backend and it main-
tains the association between the credentials and the domain name.
When the user visits the same domain later on, the PM recognizes
and verifies the domain, and it suggests the credentials to insert in
the corresponding login form.
The increasing popularity of mobile apps acting as wrappers
of their corresponding websites (e.g., email providers, online do-
cuments, social networks, home banking) has motivated the de-
velopment of password managers for mobile devices. These are
implemented as mobile apps, and they have the capability of help-
ing managing and automatically filling user’s credentials in other
apps. Modern PM apps and browser extensions also provide ad-
vanced sync functionalities between app and website credentials.
For example, consider a user opening for the first time the Face-
book app, which requires the users credentials: at this point, the
PM identifies the app, determines which domain name this app is
associated to (i.e., facebook.com), and checks whether it has creden-
tials associated to it; if this is the case, it auto-suggests them to the
user, who can thus authenticate herself with few clicks, without
the need of manually inserting her credentials. Figure 1 shows two
examples of password managers auto-suggesting credentials.
From the technical standpoint, filling credentials requires proper
mechanisms allowing PMs to access the UI of other apps, thereby by-
passing the isolation provided by the sandbox. To this end, modern
Android versions offer three mechanisms to support the implemen-
tation of PMs apps: Accessibility Service, Autofill Framework, and
OpenYOLO.
Accessibility Service. The Accessibility Service, a11y in short, is
a framework that allows third-party apps to be accessible to users
with disabilities [21]. An app can make use of this framework by
requesting the BIND_ACCESSIBILITY_SERVICE permission and by
implementing a component that, while in the background, receives
callbacks by the system when “Accessibility Events” are fired. These
events are related to some specific transitions on the user interface,
e.g., the focus is changed or a button has been clicked. This service
has also access to relevant contextual information, the most impor-
tant being which app the user is currently interacting with. This
last information is made available by means of the package name
of the app.
Even if a11y has been developed to assist users with disabil-
ities, app developers have (benignly) abused this framework to
implement a variety of different features, one of which is the imple-
mentation of password managers. In particular, PMs rely on a11y to
determine which app the user is interacting with and whether there
are text fields that could be filled with stored credentials; if that is
the case, the PM then relies once again on a11y to programmatically
interact with the target app and automatically fill the credentials
fields on behalf of the user.
Unfortunately, while a11y is certainly useful, in the past few
years there have been a number of research works from the industry
and academic communities that show how a11y can be abused to
perform a number of malicious functionality, from stealing user’s
personal information to the complete compromise of the device [5,
6, 18, 31, 34, 35, 43]. Due to these threats, Google has developed
additional Android features so that apps do not need to have access
to such powerful mechanism to implement their functionality. Since
password managers are some of the most common and prominent
use cases, Google has recently introduced the Autofill Framework.
Autofill Framework. The Autofill Framework [22] has been in-
troduced in Android Oreo. This framework offers to password
managers apps a technical solution to implement their core func-
tionality without requiring access to a11y. In particular, the Autofill
Framework allows an app to 1) determine which app the user is
interacting with, and 2) fill credential fields programmatically.
The Autofill framework requires the developer to create an app
that implements an Autofill Service, which allows filling out forms
by injecting data directly into the views, such as the EditText wid-
gets that store the credentials. To use that, the app needs to require
the BIND_AUTOFILL_SERVICE permission. Android Oreo has also
introduced some new XML attributes to assist password managers:
importantForAutofill, which specifies whether the view is aut-
ofillable, autofillHints, which is a list of strings that suggests
to the service what data to fill the view with, and autofillType,
which tells the Autofill Service the type of data it expects to receive.
Through these attributes, an app implementing an Autofill service
is able to detect, classify, and fill form fields according to their types
(e.g., username, email address, password). Note that an app that
wants to be “compatible” with the Autofill Framework must use
these XML attributes. Note also that only one Autofill service can
be active at the same time (the user can select which one to use
through a dedicated setting menu).
At run-time, when the user opens a supported app with a login
form, the password manager is able to determine which app the
user is interacting with (once again, through its package name) and
it can offer the possibility to the user to automatically insert the
corresponding credentials on her behalf.
OpenYOLO. OpenYOLO (YOLO stands for “You Only Login Once”)
is a recently developed protocol, supported by Google partnering
with Dashlane, and it is available as an open-source library [20].
OpenYOLO does not require neither a11y nor Autofill Framework,
but it requires to modify each app that wants to support OpenYOLO-
based PMs. This mechanism is constituted by two components:
the client and the credential provider (the server). The client is a
component that needs to be embedded in each app that wants
to support this protocol (e.g., Facebook). The credential provider,
instead, is used within the password manager itself, and it is in
charge of providing information to the password manager about the
requester app identity. At run-time, the client seamlessly interacts
with the credential provider (via the Intent mechanism), which,
with the cooperation of the password manager, then returns to the
client a set of credentials, if available. The interaction between the
two components is depicted in Figure 2.
4.1 The Mapping Problem
PMs have access to package names as the key information to iden-
tify apps and to determine whether to automatically suggest cre-
dentials and for which website. Given a package name, PMs need to
bridge the gap between the mobile apps and the web worlds. There
is thus the need of mapping package names to their associated web
domain names.
One of the problems is that package names resemble URLs (e.g.,
the package name of the official Facebook app is com.facebook.katana),
thereby suggesting to inexperienced Android developers the same
level of trustworthiness of the associated domain name, facebook.com.
As we will see later in this paper, even developers of leading PMs
severely misplace trust in package names, thus affecting the secu-
rity of PMs and the entire ecosystem by making mobile phishing
attacks more practical. We now discuss the main characteristics of
domain names, package names, and the relation between them.
Domain names are trusted. In the modern web, domain names
can be considered as trusted. With the wide adoption of robust DNS
services and HTTPS, users and developers can determine whether
they are securely visiting a given URL: the browser would verify
the identity of the domain name by means of the PKI and the digital
certificates ecosystem. Thus, web PMs do rightfully place trust
in domain names. For example, a PM will automatically suggest
Facebook’s credentials whenever the user browses to facebook.com.
Notably, PMs do not suggest Facebook credentials when the user
visits a different domain name.
No authentication of package names. Differently than domain
names, there is no authentication of package names. Anybody can
create an app with a given package name, and it is possible for
an attacker to create an app with the same package name of, for
example, the legitimate Facebook app. However, one constraint
must always be satisfied: there cannot be two apps with the same
package name published on the Google Play Store or installed on
the same device. In other words, package names act as unique
keys. Note that third-party markets are not as controlled, and it
may be possible to publish malicious apps with package names
of legitimate apps. However, depending on the specific victim, it
may be challenging to lure her to install such malicious apps from
third-party stores.
No authority on “sub-packages.” In the world of domain names,
owners of the example.com are in control of sub-domains as well.
In the world of package names, instead, this is not the case: the
owner of com.example package name does not have any control over
package names that may appear as “sub-packages.” For example,
nothing prevents anybody to create an app with package name
com.example.evil: there is no relation between them. Thus, the sub-
domain trustworthiness of the web world does not hold in the
mobile counterpart. Unfortunately, as we will discuss later in the
paper, this false sense of safety is a key cause of security issues
among PMs.
The mapping problem. In the vast majority of cases, credentials
are associated to websites, not to mobile apps: in fact, credentials
are generally used to authenticate to a web service backend, not
to a mobile app. Thus, given an app package name, PMs need to
answer the question “which website is this package name associated
Figure 2: Deployment and workflow of OpenYOLO. We note
that the interaction between the client and server is actually
implemented via the Intent mechanism.
Note that OpenYOLO only helps PMs to interact with the target
app. However, the implementation logic in charge of retrieving the
correct credentials is left to the PM developers. In particular, the
OpenYOLO credential provider exposes to the password manager
the package name and the signature of the app requesting creden-
tials. Once again, the PM is in charge of mapping the given package
name to the appropriate domain names and credentials.
The central role of package names. Independently from which
mechanism a password manager is relying on, the key information
to identify which app the user is interacting with is the app package
name. Unfortunately, in all these cases, the developers of the PM
are left with the responsibility of securely mapping package names
and domain names. As we will discuss in the rest of this paper,
this design choice has a severe negative impact on the security
of password managers and of the entire ecosystem. In fact, while
mobile password managers have access to package names (and thus
apps), the user’s credentials they manage are related to websites.
And this begs the question: “how do mobile password managers
actually link apps to their respective websites?”
4 WEB AND MOBILE APPS WORLDS
The three mechanisms discussed in the previous section allow PMs
to feed website-related credentials to the corresponding mobile app
counterparts. To work properly, a PM needs 1) to identify the app
that requires credentials and 2) to bridge the mobile and the web
worlds. Since all the available mechanisms use apps package names
as the main abstraction, in order to determine the right credentials
to suggest, PMs need to somehow define a mapping between these
package names and their corresponding website. We argue that
package names are the wrong abstraction for PMs to work with. This
section discusses the many pitfalls associated with this process, and
how it is likely to misplace trust in these package names.
App with login formUsernamePasswordLOGIN OpenYOLO ClientPassword managercredentialsgetCredentials()Credentials Provider(OpenYOLO Server)queryCredentials()credentials(1)(2)(3)(4)to?”. This is not a trivial question to answer. To make things worse,
PMs developers are left to implement their own “solution”. Unfortu-
nately, there are many pitfalls in implementing this mechanism, and
we found that even leading PMs opted to rely on heuristics to solve
this problem. It turns out that most of these heuristics are vulnera-
ble, and malicious apps can trick PMs to leak credentials associated
to arbitrary websites.
4.2 Attacker Practicality Aspects
From an attacker perspective, there are several aspects that would
make a phishing attack more or less practical. In this section, we
enumerate some questions related to the attacker capabilities. We
will put them in relation to each vulnerable mapping in the next
subsection.
Q1) Is the mapping vulnerable? The first question is, of course,
about whether the mapping is vulnerable or not. We consider a map-
ping as vulnerable if an attacker can create an app that, although
not being the legitimate one, can trick PMs into auto-suggesting
credentials associated to a given website.
Q2) Can the legitimate and malicious apps co-exist? One of
the most basic attack vectors is for a malicious app to have the same
package name as the legitimate one. Since no two apps installed on
the same device can have the same package name, this implies that,
in this scenario, the legitimate and the malicious app cannot co-exist.
This, in turn, implies that an attacker exploiting this package name-
colliding technique would need to first lure the user to uninstall
the legitimate app before the attack can be performed. Of course,
this poses practicality issues. Thus, this question is about: can an
attacker bypass this constraint? In other words, to give an example,
can an attacker create a malicious app that can co-exist with the
legitimate Facebook app and that, when opened, would trick PMs
to auto-suggest the legitimate Facebook credentials?
Q3) Can the malicious app be hosted on the Play Store? In
the general case, it is more difficult to lure the user to install an app
that is not hosted on the Play Store. Thus, one relevant question is:
is it possible for an attacker to upload her malicious app to the Play
Store? The main constraint for an attacker is that no two apps with
the same package name can be hosted on the Play Store at the same
time. In other words, this question asks whether an attack requires
creating an app with the same package name of an already-existing
app on the Play Store. If yes, the only venue for the attacker is to
lure the user to install the malicious app from a third-party market
(via the side-loading process): although this attack is possible, it is
less practical.
Q4) Can the attacker generate tailored suggestions? PMs have
the capability to auto-suggest one or more set of credentials. Then,
the user can choose one of them and, at the touch of a click, these
credentials are automatically filled in the target app. Now, from an
attacker perspective, the ideal situation would be to able to write
a malicious app such that, for example, the PM would only sug-
gest the credentials of facebook.com (or any other domain name
chosen by the attacker). A less-ideal scenario is a PM where all the
credentials are always suggested: although the user has the possi-
bility to lure her credentials to the malicious app, this attack would
be slightly less practical. Thus, the question is: can the attacker
Table 1: This table systematizes vulnerable mapping imple-
mentations and puts them in relation with attacker practi-
cality aspects.
Q1 Q2 Q3 Q4
Secure mapping
Static one-to-one mapping
✓
Static many-to-one mapping
✓
Crowdsourced mapping
✓
Heuristic-based mapping
✓
No mapping (all credentials suggested) ✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
have fine-grained control over which and how many credentials
are suggested?
4.3 Vulnerable Mappings
This section systematizes the different possible implementations