We note that several techniques in ABE schemes have
roots in Identity-Based Encryption [37, 8, 16, 7, 42, 18, 9].
Finally, we mention here the related concept of Predicate
Encryption introduced by Katz, Sahai, and Waters [21] and
further reﬁned in [39, 38, 31, 23, 32, 10].
1.2 Organization
In Sec. 2 we introduce some notation, background in-
formation about access structures and linear secret-sharing
schemes, and the complexity assumption for our CP-ABE
scheme. Section 3 contains the algorithms and the selective
security deﬁnition for CP-ABE schemes. Our CP-ABE con-
struction and the security proof are in Sec. 4. Finally, im-
plementations and eﬃciency results are presented in Sec. 5.
The assumption for our KP-ABE construction is in App. A.
In App. B and App. C we present the KP-ABE algorithms
with the security deﬁnition, and our KP-ABE construction
with the security proof, respectively.
2. PRELIMINARIES
2.1 Notation
p
$← S as shorthand for s1
For n ∈ N, we deﬁne [n] def.= {1, 2, . . . , n}. Also, for
n1, n2, . . . , nk ∈ N:
[n1, n2, . . . , nk] def.= [n1] × [n2] × . . . ×
[nm]. When S is a set, we denote by s $← S the fact that
the variable s is picked uniformly at random from S. We
$←
write s1, s2, . . . , sn
$← S. By negl(n) we denote a negligible function
S, . . . , sn
in n and by PPT probabilistic polynomial-time.
The set of matrices of size m × n with elements in Zp is
denoted by Zm×n
. Special subsets are the set of row vectors
of length n: Z1×n
, and column vectors of length n: Zn×1
.
When (cid:126)v is a vector (of any type), we will denote by vi the
i-th element and by (cid:104)(cid:126)v, (cid:126)w(cid:105) the inner product of vectors (cid:126)v
and (cid:126)w.
2.2 Access Structures and
$← S, s2
p
p
Linear Secret-Sharing Schemes
In this section, we present the formal deﬁnitions of access
structures and linear secret-sharing schemes introduced in
[5], adapted to match our setting.
Deﬁnition 2.1 (Access Structures [5]). Let U be the at-
tribute universe. An access structure on U is a collection A
of non-empty sets of attributes, i.e. A ⊆ 2U \ { }. The sets
in A are called the authorized sets and the sets not in A are
called the unauthorized sets.
∀B, C ∈ A : if B ∈ A and B ⊆ C, then C ∈ A.
Additionally, an access structure is called monotone if
In our constructions, we only consider monotone access
structures, which means that as a user (CP-ABE setting)
acquires more attributes, he will not lose his possible decryp-
tion privileges. General access structures in large universe
ABE can be realized by splitting the attribute universe in
half and treating the attributes of one half as the negated
versions of the attributes in the other half [20]. We note that
if the access structure is encoded as a monotonic Boolean
formula over attributes1, there is a generic algorithm that
1A monotonic Boolean formula consists of only AND, OR,
and threshold gates, for example A1∧(A2∨A3). This means
465generates the corresponding access policy in polynomial time
[5, 24].
Deﬁnition 2.2 (Linear Secret-Sharing Schemes (LSSS) [5]).
Let p be a prime and U the attribute universe. A secret-
sharing scheme Π with domain of secrets Zp realizing access
structures on U is linear over Zp if
1. The shares of a secret s ∈ Zp for each attribute form
a vector over Zp.
p
2. For each access structure A on U, there exists a matrix
M ∈ Z(cid:96)×n
, called the share-generating matrix, and a
function ρ, that labels the rows of M with attributes
from U, i.e. ρ : [(cid:96)] → U, which satisfy the following:
During the generation of the shares, we consider the
column vector (cid:126)v = (s, r2, . . . , rn)(cid:62), where r2, . . ., rn
$← Zp. Then the vector of (cid:96) shares of the secret s
according to Π is equal to M(cid:126)v ∈ Z(cid:96)×1
. The share
(M(cid:126)v)j where j ∈ [(cid:96)] “belongs” to attribute ρ(j).
We will be referring to the pair (M, ρ) as the policy of
the access structure A.
p
In our setting,
secret s according to Π, it is true that: (cid:80)
According to [5], each secret-sharing scheme (not only the
linear ones) should satisfy the reconstruction requirement
(each authorized set can reconstruct the secret) and the se-
curity requirement (any unauthorized set cannot reveal any
partial information about the secret).
let S denote an authorized set for the
access structure A encoded by the policy (M, ρ). Then
let I be the set of rows whose labels are in S, i.e. I =
{i|i ∈ [(cid:96)] ∧ ρ(i) ∈ S}. The reconstruction requirement as-
serts that the vector (1, 0, . . . , 0) is in the span of rows of M
indexed by I. This means that there exist constants {ωi}i∈I
in Zp such that for any valid shares {λi = (M(cid:126)v)i}i∈I of a
i∈I ωiλi = s.
Additionally, it has been proved in [5] that the constants
{ωi}i∈I can be found in time polynomial in the size of the
share-generating matrix M .
On the other hand, for unauthorized sets S(cid:48) no such con-
stants {ωi} exist. Moreover,
in this case it is also true
that if I(cid:48) = {i|i ∈ [(cid:96)] ∧ ρ(i) ∈ S(cid:48)}, there exists a vector (cid:126)w ∈
Z1×n
, such that its ﬁrst component w1 is any non zero el-
ement in Zp and (cid:104) (cid:126)Mi, (cid:126)w(cid:105) = 0 for all i ∈ I(cid:48), where (cid:126)Mi =
(Mi,1, Mi,2, . . . , Mi,n); the i-th row of M .
2.3 Assumption 1
p
For our CP-ABE construction we will use a q-type as-
sumption on prime order bilinear groups, denoted by q-1,
which is similar to the Decisional Parallel Bilinear Diﬃe-
Hellman Exponent Assumption [43]. It is parameterized by
a security parameter λ ∈ N and an integer q, polynomial
in λ. We assume that there exists a group generator algo-
rithm G(1λ) → (p, G, GT , e) that outputs the description of
the (symmetric) bilinear group of order p = Θ(2λ). This as-
sumption can be proved secure in the generic group model,
but the proof is omitted due to space constraints. It is de-
ﬁned via the following game between a challenger and an
attacker:
Initially the challenger calls the group generation algo-
rithm with input the security parameter, picks a random
that as a key (in CP-ABE) or a ciphertext (in KP-ABE)
acquires more attributes it will not lose the decryption ca-
pabilities.
j
, gbj , gsbj , gaibj , gai/b2
group element g $← G, and q + 2 random exponents a, s, b1,
$← Zp. Then he sends to the attacker the group
b2, . . ., bq
description (p, G, GT , e) and all of the following terms:
g, gs
∀(i, j) ∈ [q, q]
gai
∀(i, j, j(cid:48)) ∈ [2q, q, q] with j (cid:54)= j(cid:48)
gaibj /b2
j(cid:48)
∀(i, j) ∈ [2q, q] with i (cid:54)= q + 1
gai/bj
∀(i, j, j(cid:48)) ∈ [q, q, q] with j (cid:54)= j(cid:48)
gsaibj /bj(cid:48) , gsaibj /b2
j(cid:48)
The challenger also ﬂips a random coin b $← {0, 1} and if
b = 0, it gives to the attacker the term e(g, g)saq+1
. Other-
wise it gives a random term R $← GT . Finally the attacker
outputs a guess b(cid:48) ∈ {0, 1}.
Deﬁnition 2.3. We say that the q-1 assumption holds if all
PPT attackers have at most a negligible advantage in λ in
the above security game, where the advantage is deﬁned as
Adv = Pr [b(cid:48) = b] − 1/2.
Remark: Notice the absence of the term gaq+1/bj in the
fourth line of the assumption. If this term were given to the
attacker, then he could break the assumption trivially by
pairing it with the corresponding gsbj term. On the other
hand, the term gaq+1bj /b2
j(cid:48) is given, and this poses no prob-
lems in the generic group model since j (cid:54)= j(cid:48) and by possible
pairing the adversary cannot get rid of the bj’s.
3. CIPHERTEXT - POLICY ATTRIBUTE -
BASED ENCRYPTION
3.1 Algorithms
A Ciphertext-Policy Attribute-Based Encryption scheme
• Setup(1λ) → (pp, msk):
consists of the following four PPT algorithms:
The Setup algorithm takes
the security parameter λ ∈ N encoded in unary and outputs
the public parameters pp and the master secret key msk.
We assume that the public parameters contain a description
of the attribute universe U. 2
• KeyGen(1λ, pp, msk,S) → sk: The key generation al-
gorithm takes as inputs the public parameters pp, the master
secret key msk and a set of attributes S ⊆ U. The secu-
rity parameter is included in the inputs to ensure that it is
polynomial time in λ. The algorithm generates a secret key
corresponding to S.
• Encrypt(1λ, pp, m, A) → ct: The encryption algorithm
takes as inputs the public parameters pp, a plaintext message
m, and an access structure A on U. It outputs the ciphertext
ct.
• Decrypt(1λ, pp, sk, ct) → m: The decryption algorithm
takes as inputs the public parameters pp, a secret key sk,
and a ciphertext ct. It outputs the plaintext m.
Correctness: We require that a CP-ABE scheme is
correct, i.e the decryption algorithm correctly decrypts a
ciphertext of an access structure A with a secret key on S,
when S is an authorized set of A. Formally:
2In previous CP-ABE constructions the attribute universe U
(or its size) was one of the arguments of the Setup algorithm.
In our constructions, the attribute universe depends only on
the size of the underlying group G, which depends on the
security parameter λ and the group generation algorithm.
466Deﬁnition 3.1. A CP-ABE scheme is correct when for all
messages m, and all attribute sets S and access structures A
with S ∈ A (i.e. for S authorized), any pair (pp, msk) out-
put from Setup(1λ), any secret key sk output from KeyGen
(1λ, pp, msk,S), and any ciphertext ct output by Encrypt
(1λ, pp, m, A), it is true that: Decrypt(1λ, pp, sk, ct) = m.
3.2 CP-ABE Selective Security
In this section we present the deﬁnition of selective se-
curity for CP-ABE schemes. This is described by a game
between a challenger and an attacker and is parameterized
by the security parameter λ ∈ N. The phases of the game
are the following:
• Initialization:
In this phase the attacker declares the
challenge access structure A∗, which he will try to attack,
and sends it to the challenger.
• Setup: Here the challenger calls the Setup(1λ) algo-
rithm and sends the public parameters pp to the attacker.
• Query Phase 1:
In this phase the attacker can
adaptively ask for secret keys for the sets of attributes S1, S2,
. . ., SQ1 . For each Si the challenger calls KeyGen(msk,Si) →
ski and sends ski to the attacker. The restriction that has
to be satisﬁed for each query is that none of the queried sets
satisﬁes the challenge access structure, i.e. ∀i ∈ [Q1] : Si /∈
A∗.
• Challenge:
The attacker declares two equal-length
plaintexts m0 and m1 and sends them to the challenger. He
ﬂips a random coin b ∈ {0, 1} and calls Encrypt(mb, A∗) →
ct. He sends ct to the attacker.
• Query Phase 2: This the same as query phase 1. The
attacker asks for the secret key for the sets SQ1+1, SQ1+2,
. . ., SQ, for which the same restriction holds: ∀i ∈ [Q] : Si /∈
A∗.
• Guess: The attacker outputs his guess b(cid:48) ∈ {0, 1} for
b.
Deﬁnition 3.2. A CP-ABE scheme is selectively secure if
all PPT attackers have at most a negligible advantage in λ in
the above security game, where the advantage of an attacker
is deﬁned as Adv = Pr [b(cid:48) = b] − 1/2.
4. OUR LARGE UNIVERSE CP-ABE
In this section we present our large universe CP-ABE con-
struction. The public parameters consist of the six group el-
ements (g, u, h, w, v, e(g, g)α), which intuitively are utilized
in two separate “layers” to achieve secure large universe
CP-ABE.
In the “attribute layer”, the u, h terms provide
a Boneh-Boyen-style [7] hash function (uAh), while in the
“secret sharing layer” the w term holds the secret random-
ness r during key generation and the shares of the secret
randomness s during encryption. The v term is used to
“bind” the two layers together. The g and e(g, g)α terms are
used to introduce the master secret key functionality and
allow correct decryption.
4.1 Construction
Our scheme consists of the following four algorithms:
• Setup(1λ) → (pp, msk): The setup algorithm calls the
group generator algorithm G(1λ) and gets the descriptions
of the groups and the bilinear mapping D = (p, G, GT , e),
where p is the prime order of the groups G and GT . The
attribute universe is U = Zp.
Then the algorithm picks the random terms g, u, h, w, v $←
G and α $← Zp. It outputs
pp = (D, g, u, h, w, v, e(g, g)α)
msk = (α)
• KeyGen(msk,S = {A1, A2, . . . , Ak} ⊆ Zp) → sk:
Ini-
tially, the key generation algorithm picks k+1 random expo-
$← Zp. Then it computes K0 = gαwr,
nents r, r1, r2, . . . , rk
K1 = gr, and for every τ ∈ [k]
Kτ,2 = grτ and Kτ,3 = (uAτ h)rτ v
−r
• Encrypt(m ∈ GT , (M, ρ)) → ct:
The secret key output is sk = (S, K0, K1,{Kτ,2, Kτ,3}τ∈[k]).
The encryption
algorithm takes the plaintext message m and the access
structure encoded in an LSSS policy, with M ∈ Z(cid:96)×n
and
ρ : [(cid:96)] → Zp. First, it picks (cid:126)y = (s, y2, . . . , yn)(cid:62) $← Zn×1
.
In the terminology of Sec. 2.2, s is the random secret to
be shared among the shares. The vector of the shares is
(cid:126)λ = (λ1, λ2, . . . , λ(cid:96))(cid:62) = M (cid:126)y.
It then picks (cid:96) random exponents t1, t2, . . . , t(cid:96)
$← Zp and
calculates C = m · e(g, g)αs, C0 = gs, and for every τ ∈ [(cid:96)]
p
p
Cτ,1 = wλτ vtτ , Cτ,2 = (uρ(τ )h)
−tτ and Cτ,3 = gtτ
The ciphertext output is