...
if (m->cs_tainted ||
(( !cs_enforcement_disable && !cs_bypass ) &&
((!m->cs_validated && (prot & VM_PROT_EXECUTE)) ||
(page_immutable(m, prot) &&
((prot & VM_PROT_WRITE) || m->wpmapped)))))
{
...
reject_page = cs_invalid_page((addr64_t) vaddr);
...
if (reject_page) {
/* reject the tainted page: abort the page fault */
kr = KERN_CODESIGN_ERROR;
cs_enter_tainted_rejected++;
The two macros referenced are defi ned here:
/*
* CODE SIGNING:
* When soft faulting a page, we have to validate the page if:
* 1. the page is being mapped in user space
* 2. the page hasn’t already been found to be “tainted”
* 3. the page belongs to a code-signed object
* 4. the page has not been validated yet or has been mapped
for write.
*/
#define VM_FAULT_NEED_CS_VALIDATION(pmap, page) \
((pmap) != kernel_pmap /*1*/ && \
!(page)->cs_tainted /*2*/ && \
(page)->object->code_signed /*3*/ && \
(!(page)->cs_validated || (page)->wpmapped /*4*/))
and here:
#define page_immutable(m,prot) ((m)->cs_validated)
cc0044..iinndddd 8855 44//1166//22001122 55::4433::5500 PPMM
86 Chapter 4 n Code Signing and Memory Protections
The fi rst thing this code does is see whether the page needs to be validated
for code signing. It will be validated if it has not previously been validated, is
going to be writable, belongs to a code signed object, and is being mapped into
user space. So, basically, it is validated any interesting time. The actual valida-
tion takes place in vm_page_validate_cs, which maps the page in question
into kernel space for examination and then calls vm_page_validate_cs_mapped,
which then makes a call to vnode_pager_get_object_cs_blobs:
vnode_pager_get_object_cs_blobs (…){
...
validated = cs_validate_page(blobs,
offset + object->paging_offset
(const void *)kaddr,
&tainted);
page->cs_validated = validated;
if (validated) {
page->cs_tainted = tainted;
}
cs_validate_page does the actual comparison between the stored hash and
the computed hash, and records whether it is validated and/or tainted. Here,
validated means it has an associated code signing hash, and tainted means the
current computed hash does not match the stored hash:
cs_validate_page(
void *_blobs,
memory_object_offset_t page_offset,
const void *data,
boolean_t *tainted)
{
...
for (blob = blobs;
blob != NULL;
blob = blob->csb_next) {
...
embedded = (const CS_SuperBlob *) blob_addr;
cd = findCodeDirectory(embedded, lower_bound,
upper_bound);
if (cd != NULL) {
if (cd->pageSize != PAGE_SHIFT ||
...
hash = hashes(cd, atop(offset),
lower_bound, upper_bound);
if (hash != NULL) {
bcopy(hash, expected_hash,
sizeof (expected_hash));
found_hash = TRUE;
cc0044..iinndddd 8866 44//1166//22001122 55::4433::5500 PPMM
Chapter 4 n Code Signing and Memory Protections 87
}
break;
...
if (found_hash == FALSE) {
...
validated = FALSE;
*tainted = FALSE;
} else {
...
if (bcmp(expected_hash,
actual_hash, SHA1_RESULTLEN) != 0) {
cs_validate_page_bad_hash++;
*tainted = TRUE;
} else {
*tainted = FALSE;
}
validated = TRUE;
}
return validated;
vm_page_validate_cs_mapped then marks whether the page is considered
validated and tainted in the page structure.
Then later in the original code snippet of vm_page_enter, a conditional deter-
mines whether the page is invalid. A page is considered invalid when any of
the following are true:
n It is tainted (meaning it has no saved hash or does not match the saved hash).
n Code signing is not turned off, and it is not validated (has no hash) and
executable.
n Code signing is not turned off, and it is immutable (has a hash) and writable.
So from this you can see that executable pages need to have a hash and match
the hash. Data pages do not require a hash. If there is a hash associated with
it and it is writable, then it is invalid (presumably this was once executable).
When invalid pages are encountered, the kernel checks if the CS_KILL fl ag is
set, and if it is, kills the process; see the following cs_invalid_page function,
which is responsible for these actions. As you saw, AMFI sets this fl ag for all
iOS processes. Therefore, any iOS process with an invalid page will be killed.
In Mac OS X, code signing is enabled and checked; however, the CS_KILL fl ag
is not set and so it is not enforced:
int
cs_invalid_page(
addr64_t vaddr)
{
...
cc0044..iinndddd 8877 44//1166//22001122 55::4433::5500 PPMM
88 Chapter 4 n Code Signing and Memory Protections
if (p->p_csflags & CS_KILL) {
p->p_csflags |= CS_KILLED;
proc_unlock(p);
printf(“CODE SIGNING: cs_invalid_page(0x%llx): “
“p=%d[%s] honoring CS_KILL, final status
0x%x\n”,
vaddr, p->p_pid, p->p_comm, p->p_csflags);
cs_procs_killed++;
psignal(p, SIGKILL);
proc_lock(p);
}
...
How the iOS Ensures No Changes Are Made
to Signed Pages
If a platform wants to enforce code signing, it is not enough to enforce it at the
time code is loaded. It must be enforced continually. This prevents signed code
from being tampered with, new code from being injected into the process, and
other nastiness. iOS enforces this by not allowing any executable and writable
pages. This prevents code modifi cation and the dynamic creation of new code
(with the exception provided for just-in-time (JIT) compiling, discussed in the
next section). Such preventions are possible because there is code in the kernel at
all the spots in which memory region permissions are created or modifi ed. For
example, in vm_map_enter, which is used when allocating a range in a virtual
address map, you see the following:
#if CONFIG_EMBEDDED
if (cur_protection & VM_PROT_WRITE){
if ((cur_protection & VM_PROT_EXECUTE) && !(flags &
VM_FLAGS_MAP_JIT)){
printf(“EMBEDDED: %s curprot cannot be
write+execute. turning off execute\n”,
__PRETTY_FUNCTION__);
cur_protection &= ~VM_PROT_EXECUTE;
}
}
#endif /* CONFIG_EMBEDDED */
This says if a page is requested that is writable, executable, and not intended
for JIT, don’t let it be executable. Furthermore, in vm_map_protect, which is used
to change the permissions on address regions, you see basically the same thing:
#if CONFIG_EMBEDDED
if (new_prot & VM_PROT_WRITE) {
if ((new_prot & VM_PROT_EXECUTE) &&
!(current->used_for_jit)) {
cc0044..iinndddd 8888 44//1166//22001122 55::4433::5511 PPMM
Chapter 4 n Code Signing and Memory Protections 89
printf(“EMBEDDED: %s can’t have both write
and exec at the same time\n”,
__FUNCTION__);
new_prot &= ~VM_PROT_EXECUTE;
}
}
#endif
In both of these cases, the kernel restricts memory regions from being execut-
able and writable, except in the case of just-in-time compiling, which is the next
topic. Not surprisingly, both of the previous code snippets are patched during
the jailbreaking procedure. Chapter 10 discusses jailbreaking in more detail.
Discovering Dynamic Code Signing
From the time code signing was introduced in iOS 2.0 until iOS 4.3, the previously
discussed description of code signing was all that existed. All code needed to be
signed, and no unsigned memory could be executed. However, this strict code
signing policy ruled out technologies like Just-In-Time compiling (JIT), which
is a feature that allows bytecode interpreters to run signifi cantly faster. Because
many JavaScript interpreters utilize JIT, Apple’s desire to have MobileSafari run
faster fi nally outweighed its desire for total control over all executing code. In
iOS 4.3, Apple introduced the idea of dynamic code signing to allow JIT.
To run faster, bytecode interpreters using JIT determine what machine code
the bytecode is trying to run, write the machine code to a buffer, mark it exe-
cutable, and then execute it with the actual processor. With typical iOS code
signing, this is impossible. To allow JIT, but still keep much of the security of
the original code signing scheme, Apple chose a compromise. It would allow
only certain processes (for example, MobileSafari) to make a memory region
that was writable and executable to perform their JIT work. Furthermore, the
process could make exactly one such region. Any attempts to make additional
writable and executable regions would fail.
Why MobileSafari Is So Special
Using ldid, as shown earlier, you can see the special entitlement given to
MobileSafari — dynamic code signing:
# ldid -e /Applications/MobileSafari.app/MobileSafari
com.apple.coreaudio.allow-amr-decode
cc0044..iinndddd 8899 44//1166//22001122 55::4433::5511 PPMM
90 Chapter 4 n Code Signing and Memory Protections
com.apple.coremedia.allow-protected-content-
playback
com.apple.managedconfiguration.profiled-access
com.apple.springboard.opensensitiveurl
dynamic-codesigning
keychain-access-groups
com.apple.cfnetwork
com.apple.identities
com.apple.mobilesafari
platform-application
seatbelt-profiles
MobileSafari
Only executables with this entitlement are allowed to create these special
regions, and only MobileSafari has this entitlement.
If you look inside the WebKit source code, it is possible to see the JIT space get allo-
cated. Namely, within JavaScriptCore, in the fi le ExecutableAllocatorFixedVMPool
.cpp, you see the allocation take place:
#define MMAP_FLAGS (MAP_PRIVATE | MAP_ANON | MAP_JIT)
// Cook up an address to allocate at, using the following recipe:
// 17 bits of zero, stay in userspace kids.
// 26 bits of randomness for ASLR.
// 21 bits of zero, at least stay aligned within one level of
// the pagetables.
//
// But! - as a temporary workaround for some plugin problems
(rdar://problem/6812854),
// for now instead of 2^26 bits of ASLR lets stick with 25 bits of
// randomization plus 2^24, which should put up somewhere in the
// middle of usespace (in the address range
// 0x200000000000 .. 0x5fffffffffff).
intptr_t randomLocation = 0;
#if VM_POOL_ASLR
randomLocation = arc4random() & ((1 (randomLocation),
cc0044..iinndddd 9900 44//1166//22001122 55::4433::5511 PPMM
Chapter 4 n Code Signing and Memory Protections 91
m_totalHeapSize, INITIAL_PROTECTION_FLAGS, MMAP_FLAGS,
VM_TAG_FOR_EXECUTABLEALLOCATOR_MEMORY, 0);
To see the call in action, set a breakpoint at mmap with a condition for the
protection fl ags to be readable, writable, and executable (RWX), for example,
for the protection fl ags (kept in r2) to be 0x7.
(gdb) attach MobileSafari
Attaching to process 17078.
...
(gdb) break mmap
Breakpoint 1 at 0x341565a6
(gdb) condition 1 $r2==0x7
(gdb) c
Continuing.
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
[Switching to process 17078 thread 0x2703]
Breakpoint 1, 0x341565a6 in mmap ()
(gdb) i r
r0 0x0 0
r1 0x1000000 16777216
r2 0x7 7
r3 0x1802 6146
...
Therefore, MobileSafari calls mmap requesting an RWX region of size 0x1000000
(16MB) with the fl ags 0x1802. Looking in mman.h in the iOS SDK, you see that
this value corresponds to having the bits MAP_PRIVATE | MAP_JIT | MAP_ANON
set, as the JavaScriptCore souce code indicated it would. The fact that r0 is zero
also reveals that VM_POOL_ASLR must not be defi ned, and so the location of the
JIT buffer is purely reliant on the ASLR of the iOS heap. The most interesting
of the fl ags passed is MAP_JIT, which is defi ned as follows: