in Table I. While we have found these signatures to be highly
21These are not abstract suggestions either; we are working with a privacy-
focused browser vendor to implement these proposals.
accurate (based on the methodology discussed in Section IV
and the AST-based matching discussed in Section V), there
are ways the signatures could be further improved. First, the
signatures could be augmented with further instrumentation
points, to further reduce any false positives, and build even
more unique signatures per event-loop turn. Second, we expect
that for many scripts, calling a given function will result in
neither purely deterministic behavior, nor completely unpre-
dictable behavior; that some subsections of code can result
in more than one, but less than inﬁnite, distinct signatures.
Further crawling, therefore, could increase recall by more
comprehensively generating all possible signatures for known
privacy-and-security affecting code.
D. Web Compatibility
Current web-blocking tools suffer signiﬁcant trade-offs be-
tween coverage and usability. Making decisions at the URL
level, for example, will result in cases of over blocking (and
breaking the benign parts of a website) or under blocking (and
allowing the privacy harming behavior). By moving the unit of
analysis to the event-loop turn, privacy tools could make ﬁner
grained decisions, and do a better job distinguishing between
unwanted and benign code. While we leave an evaluation
of the web-compatibility improvements of our proposed per-
event-loop-turn system to further work, we note it here as a
promising direction for researchers and activists looking to
make practical, usable web privacy tools.
E. Limitations
Finally, we note here limitations of this work, and sugges-
tions for how they could be addressed by future work.
1) Automated Crawling: The most signiﬁcant limitation is
our reliance on automated-crawls to build signatures. While
such automated crawls are useful for covering a large portion
of the web, they have signiﬁcant blind spots, including missing
scripts only accessible after authentication on a site, or only
after performing complex interactions on a page. Prior work
has attempted to deal with this though paid research-subject
volunteers [33], or other ways of approximating real world
usage. Such efforts are beyond the scope of this project, but
we note them here for completeness.
2) Evasion: Second, while our behavioral-based signature
approach is far more robust to evasion than existing URL
focused web privacy-and-security tools, there are still cases
where the current approach could be fooled. For example, if
an attacker took a privacy-harming behavior currently carried
out by a single script, and spread the functionality across
multiple colluding code units, our system would not detect
it (though it could with some post-processing of the graph to
merge the behavior of colluding scripts). Similarly, attackers
might introduce intentional non-determinism in their code, by,
for example, shufﬂing the order of some operations in a way
that does not affect the code’s outcome.
While our system could account for some of these cases
through further crawling (to account for more possible code
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:35 UTC from IEEE Xplore.  Restrictions apply. 
1727
paths) or generalizations in signature generation, we note this
attack as a current limitation and area for future work.
We note, however, that our signature-based approach would
be robust to many forms of obfuscation that would confuse
other signature-based approaches. Because our approach relies
on code’s behavior, and not text representation, our approach
is resilient against common obfuscation techniques like code
rewriting, modifying the text’s encoding, and encrypting the
code. We also note that our approach would not be fooled by
obfuscation techniques that only changed control ﬂow without
also changing script behavior; our technique would be robust
against obfuscation techniques that only modify JavaScript
structure.
3) False Positives: Our approach, like all signature-based
approaches, makes trade offs between false-positive and false-
negative rates. Encoding more information in a signature
increases the conﬁdence in cases where the signature matches
observed behavior, but at the risk of missing more similar-
but-not-identical cases. As described in Section III-D, our
system only builds signatures for graphs including at least
13 edges and at least 4 nodes. This minimum graph size was
selected by iteratively increasing the minimum graph size until
we no longer observed any false positives through manual
examination.
However, it is possible that despite the above described
process, our minimum signature size is not sufﬁcient to prevent
some false positives; given the number and diversity of scripts
on the web, it is nearly a certainty that there are instances
of both benign and undesirable code that perform the same
13 behaviors, interacting with 4 similar page structures, even
if we observed no such instances in our manual evaluation.
Deployments of our work that prefer accuracy over recall
could achieve such by increasing the minimum graph size used
in signature generation.
VII. RELATED WORK
A. Blocking trackers
The current line of defense that most users have against
web tracking is via browser extensions [1], [15], [4], [2].
These extensions work by leveraging hand-crafted ﬁlter lists of
HTML elements and URLs that are connected with advertisers
and trackers [3]. There are also dynamic approaches for
blocking, like Privacy Badger from EFF [10], which tracks
images, scripts and advertising from third parties in the visited
pages and blocks them if it detects any tracking techniques.
The future of browser extensions as web tracking prevention
tools is currently threaten by the transition to the newest
version of WebExtensions Manifest v3 [8], which limits the
capabilities of dynamically making decisions to block content.
Previous research has also focused on automated approaches
to improve content blocking. Gugelmann et al., built a clas-
siﬁer for identifying privacy-intrusive Web services in HTTP
trafﬁc [14]. NoMoAds leverages the network interface of a
mobile device to extract features and uses a classiﬁer to detect
ad requests [30].
B. Instrumenting the browser
Extracting information from the browser is mandatory step
into understanding web tracking. Previous approaches, like
OpenWPM, have focused on leveraging a browser extension to
monitor the events of a visited page [11]. In-band approaches
like OpenWPM inject JS into the visited page in order to
capture all events, which can affect their accuracy, as they are
running at the same level as the monitored code. Recently, we
have observed a shift in pushing more browser instrumentation
out-of-band (in-browser) [19], [23], [20]. In this paper, we fol-
low a similar out-of-band approach, where we build signatures
of tracking scripts based on the dynamic code execution by
instrumenting Blink and V8 in the Chromium browser.
C. Code Similarity
Code similarity is a well-established research ﬁeld in the
software engineering community [29]. From a security per-
spective, ﬁnding code similarities with malicious samples has
been explored in the past. Revolver [22] performed large-scale
clustering of JavaScript samples in order to ﬁnd similarities
in cases where the classiﬁcation is different, automatically
detecting this way evasive samples.
Ikram et al. [16], suggested the use of features from
JavaScript programs using syntactic and structural models to
build a classiﬁer that detects scripts with tracking [16]. Instead
of relying on syntactic and structural similarity, in our work
we identify tracking scripts based on the tracking properties of
their execution in the browser, defeating this way techniques
like obfuscation [31] and manipulation of ASTs [12].
D. Other Content Blocking Strategies
Another approach to block content is via perceptual detec-
tion of advertisements [34], [27]. This approach is based on
the identifying advertisements based on known visual patterns
that they have, such as the AdChoices standard [9]. Although
this is an exciting new avenue of blocking content on the web,
there is already work that aims to create adversarial attacks
against perceptual ad blocking [35].
VIII. CONCLUSION
The usefulness of content blocking tools to protect Web
security and privacy is well understood and popularly enjoyed.
However, the URL-focus of these tools means that the most
popular and common tools have trivial circumventions, which
are also commonly understood, though frequently ignored for
lack of alternatives.
In this work we make several contributions to begin solving
this problem, by identifying malicious code using highly
granular, event-loop turn level signatures of runtime JavaScript
behavior, using a novel system of browser instrumentation
and graph-based signature generation. We contribute not only
the ﬁrst Web-scale measurement of how much evasion is
occurring on the Web, but also the ground work for practical
defenses. To further contribute to the goal a privacy-and-
security respecting Web, we also contribute the source code
for our instrumentation and signature generation systems, the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:35 UTC from IEEE Xplore.  Restrictions apply. 
1728
raw data gathered during this work, and ﬁlter list rules that
can help users of existing tools defend against a subset of the
problem [5].
IX. ACKNOWLEDGEMENTS
We would like to thank our shepherd Ben Stock, and
our anonymous reviewers for their insightful feedback and
comments. This work was supported by the Ofﬁce of Naval
Research (ONR) under grant N00014-17-1-2541, by DARPA
under agreement number FA8750-19-C-0003, and by the Na-
tional Science Foundation (NSF) under grant CNS-1703375.
REFERENCES
[1] Adblock Plus. https://adblockplus.org/.
[2] Disconnect. https://disconnect.me/.
[3] EasyList and EasyPrivacy ﬁlter lists. https://easylist.to/.
[4] Ghostery. https://www.ghostery.com/.
[5] Semantic
signatures.
semantic-signatures, 2020.
https://github.com/semantic-signatures/
are
[6] Sadia Afroz, Michael Carl Tschantz, Shaarif Sajid, Shoaib Asif Qazi,
Mobin Javed, and Vern Paxson. Exploring server-side blocking of
regions. arXiv preprint arXiv:1805.11606, 2018.
trafﬁc
[7] Alexa.
mined?
200449744-How-are-Alexa-s-trafﬁc-rankings-determined-.
deter-
https://support.alexa.com/hc/en-us/articles/
rankings
Alexa’s
How
[8] Chromium Blog. Trustworthy Chrome Extensions, by default. https://
blog.chromium.org/2018/10/trustworthy-chrome-extensions-by-default.
html.
[9] Digital Advertising Alliance (DAA). Self Regulatory Principles for
https://digitaladvertisingalliance.org/
Online Behavioral Advertising.
sites/aboutads/ﬁles/DAA ﬁles/seven-principles-07-01-09.pdf, 2009.
[10] EFF. Privacy Badger. https://www.eff.org/privacybadger.
[11] Steven Englehardt and Arvind Narayanan. Online tracking: A 1-million-
site measurement and analysis. In Proceedings of the ACM Conference
on Computer and Communications Security (CCS), 2016.
[12] Aurore Fass, Michael Backes, and Ben Stock. HideNoSeek: Camou-
ﬂaging Malicious JavaScript in Benign ASTs. 2019.
[13] Kiran Garimella, Orestis Kostakis, and Michael Mathioudakis. Ad-
In
blocking: A study on performance, privacy and counter-measures.
Proceedings of the 2017 ACM on Web Science Conference, pages 259–
262. ACM, 2017.
[14] David Gugelmann, Markus Happe, Bernhard Ager, and Vincent Lenders.
An automated approach for complementing ad blockers’ blacklists.
Proceedings of
the Symposium on Privacy Enhancing Technologies
(PETS), 2015.
[15] Raymond Hill. uBlock Origin. https://github.com/gorhill/uBlock.
[16] Muhammad Ikram, Hassan Jameel Asghar, Mohamed Ali Kaafar,
Anirban Mahanti, and Balachandar Krishnamurthy. Towards seamless
tracking-free web: Improved detection of trackers via one-class learning.
Proceedings of
the Symposium on Privacy Enhancing Technologies
(PETS), 2017.
Inc.
- mozilla —
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/
webrequest.ﬁlterresponsedata()
mdn.
WebExtensions/API/webRequest/ﬁlterResponseData.
[17] Mozilla
[21] Jordan Jueckstock, Shaown Sarker, Peter Snyder, Panagiotis Papadopou-
los, Matteo Varvello, Benjamin Livshits, and Alexandros Kapravelos.
The blind men and the internet: Multi-vantage point web measurements.
arXiv preprint arXiv:1905.08767, 2019.
[18] Luca Invernizzi, Kurt Thomas, Alexandros Kapravelos, Oxana Co-
manescu, Jean-Michel Picod, and Elie Bursztein. Cloak of visibility:
In 2016 IEEE
Detecting when machines browse a different web.
Symposium on Security and Privacy (SP), pages 743–758. IEEE, 2016.
[19] Umar Iqbal, Peter Snyder, Shitong Zhu, Benjamin Livshits, Zhiyun Qian,
and Zubair Shaﬁq. Adgraph: A graph-based approach to ad and tracker
In Proceedings of the IEEE Symposium on Security and
blocking.
Privacy (S&P), 2020.
[20] Jordan Jueckstock and Alexandros Kapravelos. VisibleV8: In-browser
In Proceedings of the ACM
Monitoring of JavaScript in the Wild.
Internet Measurement Conference (IMC), 2019.
[22] Alexandros Kapravelos, Yan Shoshitaishvili, Marco Cova, Chris
Kruegel, and Giovanni Vigna. Revolver: An Automated Approach to
In Proceedings of the
the Detection of Evasive Web-based Malware.
USENIX Security Symposium, 2013.
[23] Bo Li, Phani Vadrevu, Kyu Hyung Lee, and Roberto Perdisci. Jsgraph:
Enabling reconstruction of web attacks via efﬁcient tracking of live in-
In Proceedings of the Symposium on
browser javascript executions.
Network and Distributed System Security (NDSS), 2018.
[24] Zhou Li, Kehuan Zhang, Yinglian Xie, Fang Yu, and XiaoFeng Wang.
Knowing your enemy: understanding and detecting malicious web
advertising. In Proceedings of the 2012 ACM conference on Computer
and communications security, pages 674–686. ACM, 2012.
[25] Ben Miroglio, David Zeber, Joﬁsh Kaye, and Rebecca Weiss. The effect
of ad blocking on user engagement with the web. In Proceedings of the
2018 World Wide Web Conference, pages 813–821. International World
Wide Web Conferences Steering Committee, 2018.
[26] Mozilla. Event loop.
https://developer.mozilla.org/en-US/docs/Web/
JavaScript/EventLoop#Event loop, 2020.
[27] Adblock Plus. Sentinel - the artiﬁcial intelligence ad detector. https:
//adblock.ai/.
[28] Enric Pujol, Oliver Hohlfeld, and Anja Feldmann. Annoyed users: Ads
In Proceedings of the 2015 Internet
and ad-block usage in the wild.
Measurement Conference, pages 93–106. ACM, 2015.
[29] Chanchal Kumar Roy and James R Cordy. A Survey on Software Clone
Detection Research. Queen’s School of Computing, Technical Report,
2007.
[30] Anastasia Shuba, Athina Markopoulou, and Zubair Shaﬁq. Nomoads:
Effective and efﬁcient cross-app mobile ad-blocking. Proceedings of the
Symposium on Privacy Enhancing Technologies (PETS), 2018.
[31] Philippe Skolka, Cristian-Alexandru Staicu, and Michael Pradel. Any-
thing to Hide? Studying Miniﬁed and Obfuscated Code in the Web. In
Proceedings of the Web Conference (WWW), 2019.
[32] Peter Snyder, Lara Ansari, Cynthia Taylor, and Chris Kanich. Browser
feature usage on the modern web. In Proceedings of the 2016 Internet
Measurement Conference, pages 97–110. ACM, 2016.
[33] Peter Snyder, Cynthia Taylor, and Chris Kanich. Most websites don’t
need to vibrate: A cost-beneﬁt approach to improving browser security.
In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, pages 179–194. ACM, 2017.
[34] Grant Storey, Dillon Reisman, Jonathan Mayer, and Arvind Narayanan.
The future of ad blocking: An analytical framework and new techniques.
arXiv preprint arXiv:1705.08568, 2017.
[35] Florian Tram`er, Pascal Dupr´e, Gili Rusak, Giancarlo Pellegrino, and Dan
Boneh. AdVersarial: Defeating Perceptual Ad Blocking. In Proceedings
of the ACM Conference on Computer and Communications Security
(CCS), 2019.
[36] Michael Carl Tschantz, Sadia Afroz, Shaarif Sajid, Shoaib Asif Qazi,
Mobin Javed, and Vern Paxson. A bestiary of blocking: The motivations
and modes behind website unavailability. In 8th USENIX Workshop on
Free and Open Communications on the Internet (FOCI 18), 2018.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:35 UTC from IEEE Xplore.  Restrictions apply. 
1729