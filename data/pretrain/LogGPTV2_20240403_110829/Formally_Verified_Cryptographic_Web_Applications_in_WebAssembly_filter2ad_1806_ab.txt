only need to use 51 bits, and so it has 13 extra bits that it
can use to store pending carries that need to be propagated
later. Delaying the carry propagation in this way is a common
optimization in many Curve25519 implementations, but needs
careful veriﬁcation since it is also a leading cause of functional
correctness bugs [20]–[22].
We then show the type of fadd (its code appears in III-B).
The type uses the Stack annotation (instead of Tot) to indicate
that the function is stateful, and that it allocates memory only
on the stack, not on the heap. The function takes three array
arguments: the operands a and b of the addition, and output,
the destination array where the result is to be stored.
The pre-condition of the function (indicated by requires)
demands that all three arrays must be live in the initial heap
h0; i.e. they have been allocated (and not freed) and contain
values of the expected type and length. Since this function does
not perform carry propagation, the pre-condition also requires
(in fadd pre, elided) that there must be enough space left in
each limb to avoid overﬂows when adding two limbs.
The post-condition (indicated by ensures) guarantees that
once the function has executed, the resulting memory h1 at
address output contains exactly the speciﬁcation add applied
to the values contained at addresses a and b in the initial
memory h0. Furthermore, nothing except the array output has
been modiﬁed between h0 and h1.
Veriﬁcation with F∗. Veriﬁcation goes as follows. Seeing the
deﬁnition of the function, F∗ computes a weakest precondition
for it, then checks that this weakest precondition subsumes
the requires/ensures annotation of the function. This involves
discharging proof goals to the Z3 theorem prover. Once Z3
approves, the correctness meta-theorem of F∗ concludes that
the function does meet its speciﬁcation. Thereafter, at every
1258
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
call site for this function F∗ will verify that the pre-condition
is satisﬁed, and will then be able to use the post-condition to
prove further properties.
The veriﬁcation of fadd ensures that it is memory safe: it
does not read or write from an unallocated memory region
and it does not access arrays out-of-bounds. It also guarantees
functional correctness with respect to a high-level speciﬁcation
add. As we shall discuss in IV-C, our model of machine
integers (e.g. uint64) treats them as abstract secrets that cannot
be compared or used as memory addresses. Hence, typecheck-
ing our code also guarantees a form of timing side-channel
resistance called secret independence [9].
Compilation to C. To compile the veriﬁed code to C, it
must be in Low∗, a restricted subset of F∗ that is suitable
for compilation to C. (The fadd function above is in Low∗.)
A Low∗ program must verify against an F∗ model of the
C stack and heap (indicated by the Stack annotation). In
particular, it must not modify the structure of the stack or
allocate in any previous stack frame or on the heap. Finally,
Low∗ programs may not use certain language features, such
as closures, and must essentially remain ﬁrst-order. Programs
that obey all these restrictions compile transparently to C,
via KreMLin [9], a dedicated compiler, and do not need any
runtime support. In short, Low∗ is a curated subset of C
modeled in F∗.
All the speciﬁcations and proof annotations are erased at
compile-time: pre- and post-conditions, reﬁnements all disap-
pear, leaving only an efﬁcient implementation to be executed,
using stack allocations, machine integers, pointers and loops.
The fadd function is a small, representative building block.
HACL∗ builds implementations all the way to the elliptic
curve scalar multiplication in Curve25519. The total amount
of low-level code, including proof annotations, whitespace and
comments, is about 10,000 lines of Low∗ code, for a resulting
700 lines of C code after compilation.
B. WebAssembly: a runtime environment for the Web
WebAssembly is the culmination of a series of experiments
(NaCl, PNaCl, asm.js) whose goal was to enable Web develop-
ers to write high-performance assembly-like code that can be
run within a browser. Now with WebAssembly, programmers
can target a portable, compact, efﬁcient binary format that is
supported by Chrome, Firefox, Safari and Edge. For instance,
Emscripten [23], a modiﬁed version of LLVM, can generate
WebAssembly. The code is then loaded by a browser, JIT’d to
machine code, and executed. This means that code written in,
say, C, C++ or Rust, can now be run efﬁciently on the web.
The syntax of WebAssembly is shown in Figure 2. We use i
for WebAssembly instructions and t for WebAssembly types.
WebAssembly is a typed, expression language that reduces
using an operand stack; each instruction has a function type
that indicates the types of operands it consumes from the stack,
and the type of operand it pushes onto the stack. For instance,
if (cid:2) has type i32, then get local (cid:2) has type [] → i32, i.e.
it consumes nothing and pushes a 32-bit value on the stack.
f ∶∶=
i ∶∶=
t ∶∶=
tf ∶∶=
o ∶∶=
func tf local
(cid:6)⇀
(cid:3) ∶ t
(cid:6)⇀
i
(cid:6)⇀
i
(cid:6)⇀
i else
if tf
call f
get local (cid:3)
set local (cid:3)
t.load
t.store
t.const k
drop
loop
br if
t.binop o
(cid:6)⇀
i
i32
i64
(cid:6)⇀
t → t
add, sub, div, . . .
function
instruction
conditional
function call
read local variable
set local variable
load from memory
write to memory
push constant
drop operand
loop
break-if-true
binary arithmetic
value type
32-bits integer
64-bits integer
function type
operator
Fig. 2. WebAssembly Syntax (selected constructs)
Similarly, t.store has type i32; t → [], i.e. it consumes a 32-bit
address, a value of type t, and pushes nothing onto the stack.
We omit from this presentation: n-ary return types for
functions (currently not supported by any WebAssembly im-
plementation); treatment of packed 8-bit and 16-bit integer
arrays (supported by our implementation, elided for clarity).
This human-readable syntax maps onto a compact binary
format. The programmer is not expected to directly write
programs in WebAssembly; rather, WebAssembly was de-
signed as a compilation target. Indeed, WebAssembly delivers
performance: ofﬂine compilers generates better code than a
JIT; compiling WebAssembly code introduces no runtime-
overhead (no GC); the presence of 64-bit values and packed
arrays enables more efﬁcient arithmetic and memory locality.
WebAssembly also delivers better security. Previous works
attempted to protect against the very loose, dynamic nature of
JavaScript (extending prototypes, overloading getters, rebind-
ing this, etc.) by either deﬁning a “safe” subset [24], [25], or
using a hardening compilation scheme [26], [27]. By contrast,
none of the JavaScript semantics leak into WebAssembly,
meaning that reasoning about a WebAssembly program within
a larger context boils down to reasoning about the boundary
between WebAssembly and JavaScript.
From a security standpoint, this is a substantial leap forward,
but some issues still require attention. First, the boundary
between WebAssembly and JavaScript needs to be carefully
audited:
the JavaScript code is responsible for setting up
the WebAssembly memory and loading the WebAssembly
modules. This code must use defensive techniques, e.g. make
sure that the WebAssembly memory is suitably hidden behind
a closure. Second, the whole module loading process needs to
be reviewed, wherein one typically assumes that the network
content distribution is trusted, and that the WebAssembly API
1259
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
Cryptographic libraries have been successfully ported to
WebAssembly using Emscripten. The most popular one is lib-
sodium, which owing to its relatively small size and simplicity
(no plugins, no extensibility like OpenSSL) has successfully
been compiled to both JavaScript and WebAssembly.
Issues with the current toolchain. The core issue with the
current toolchain is both the complexity of the tooling involved
and its lack of auditability. Trusting libsodium to be a correct
cryptographic library for the web involves trusting, in order:
that the C code is correct, something notoriously hard to
achieve;
the runtime
system of Emscripten does not interfere with the rest of the
code; that the Binaryen tool produces correct WebAssembly
code; that none of these tools introduce side-channels; that the
code is sufﬁciently protected against attackers.
that LLVM introduces no bugs;
that
cannot be tampered with (e.g. Module.instantiate).
Using WebAssembly now. The ﬂagship toolchain for com-
piling to WebAssembly is Emscripten [23], a compiler from
C/C++ to JavaScript
that combines LLVM and Binaryen,
a WebAssembly-speciﬁc optimizer and code emitter. Using
Emscripten, several
large projects, such as the Unity and
Unreal game engines, or the Qt Framework have been ported to
WebAssembly. Recently, LLVM gained the ability to directly
emit WebAssembly code without going through Binaryen; this
has been used successfully by Rust and Mono.
In short, the trusted computing base (TCB) is very large.
The source language, C, is difﬁcult to reason about. Numerous
tools intervene, each of which may be ﬂawed in a different
way. The ﬁnal WebAssembly (and JavaScript) code, being
subjected to so many transformations and optimizations, can
neither be audited or related to the original source code.
III. FROM F∗ TO WEBASSEMBLY
Seeing that WebAssembly represents a compelling com-
pilation target for security-critical code on the web; seeing
that F∗ is a prime language for writing security-critical code;
we repurpose the Low∗-to-C toolchain and present a veriﬁed
compilation path from Low∗ to WebAssembly.
A. Overview of the toolchain
Protzenko et.al. [9] model the Low∗-to-C compilation in
three phases (Figure 3). The starting point
is Explicitly
Monadic F∗ [28]. First, the erasure of all computationally-
irrelevant code yields a ﬁrst-order program with relatively
few constructs, which they model as λow∗, a simply-typed
lambda calculus with mutable arrays. Second, λow∗ programs
are translated to C∗, a statement language with stack frames
built into its reduction semantics. Third, C∗ programs go to
CLight, CompCert’s internal frontend language for C [29].
Semantics preservation across these three steps is shown
using a series of simulations. More importantly, this Low∗-
to-C pipeline ensures a degree of side-channel resistance, via
type abstraction. This is achieved through traces of execution,
which track memory access and branches. The side-channel
resistance theorem states that if two programs verify against
an abstract secret type; if these two programs only differ
F∗
EMF∗
Low∗
≈er a s e
KreMLin
Clight
≈
print
.c
compile
C∗
hoist ≈
Exe
1st-order EMF∗
partial ≈
≈
λow∗
GCC/Clang/CompCert
Fig. 3. The original Low∗-to-C translation
in their secret values; if the only functions that operate on
secrets have secret-independent traces; then once compiled to
Clight, the two programs reduce by producing the same result
and emitting the same traces. In other words, if the same
program operates on different secrets, the traces of execution
are indistinguishable.
We repurpose both the formalization and the implementa-
tion, and replace the λow∗ → C∗ → Clight toolchain with
a new λow∗ → C♭ → WebAssembly translation. We provide
a paper formalization in the present section and our imple-
mentation is now up and running as a new backend of the
KreMLin compiler. (Following [9], we omit the handling of
heap allocations, which are not used in our target applications.)
Why a custom toolchain. Using off-the-shelf tools, one can
already compile Low∗ to C via KreMLin, then to WASM via
Emscripten. As we mentioned earlier, this TCB is substantial,
but in addition to the trust issue, there are technical reasons
that justify a new pipeline to WASM.
First, C is ill-suited as an intermediary language. C is a
statement language, where every local variable is potentially
mutable and whose address can be taken; LLVM immediately
tries to recover information that was naturally present
in
Low∗ but lost in translation to C, such as immutable local
variables (“registers”), or an expression-based representation
via a control-ﬂow graph. Second, going through C via C∗ puts
a burden on both the formalization and the implementation.
On paper, this mandates the use of a nested stack of con-
tinuations for the operational semantics of C∗. In KreMLin,
this requires not only dedicated transformations to go to a
statement language, but also forces KreMLin to be aware of
C99 scopes and numerous other C details, such as undeﬁned
behaviors. In contrast, C♭, the intermediary language we use
on the way to WebAssembly, is expression-based, has no C-
speciﬁc concepts, and targets WebAssembly whose semantics
have no undeﬁned-behavior. As such, C♭ could be a natural
compilation target for a suitable subset of OCaml, Haskell, or