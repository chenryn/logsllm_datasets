# Hyper-V DirectX Component Security Analysis

## Overview
This document provides an in-depth analysis of the security vulnerabilities and attack surface of the Hyper-V DirectX component. It includes a detailed examination of the architecture, configuration, and vulnerabilities, as well as the importance of fuzzing in discovering these issues.

## Table of Contents
1. **Hyper-V DirectX Component Architecture**
2. **Configuration**
3. **Attack Surface**
4. **Vulnerabilities Details**
5. **Why Fuzzing is Necessary**
6. **Fuzzing Architecture**
7. **Example: Fuzzing DXGK_VMBCOMMAND_SIGNALSYNCOBJECT**
8. **Conclusion**
9. **Black Hat Sound Bytes**
10. **Q & A**

## 1. Hyper-V DirectX Component Architecture
- **Hypervisor**: Manages virtual machines.
- **Host (Root Partition)**: Runs the host operating system.
- **Guest (Child Partition)**: Runs the guest operating system.
- **dxgmms1.sys, dxgmms2.sys, dxgkrnl.sys, dxgkrnl.ko**: Kernel modules for handling DirectX commands.
- **UserMode**: Applications and fuzzer.
- **KernelMode**: Kernel modules and drivers.

## 2. Configuration
- **Enable DirectX Component in Hyper-V VM**: Detailed steps to configure the DirectX component in a Hyper-V virtual machine.

## 3. Attack Surface
- **DXG_HOST_VIRTUALGPU_VMBUS::VmBusSignalSyncObject**
  - **Structure Layout**:
    - `size`: 0x00
    - `command`: 0x18
    - `object_count`: 0x04
    - `flags`: 0x04
    - `context_count`: 0x04
    - `reserved`: 0x04
    - `fence_value`: 0x08
    - `device`: 0x08
    - `ObjectHandleArray[object_count]`: 4 * object_count
    - `ContextArray[context_count]`: 4 * context_count
    - `MonitoredFenceValueArray[object_count]`: 8 * object_count
  - **CVE-2022-21918**:
    - **Trigger Condition**: If `v10_objectcount = 1`, then `v16_buflen = 0x3c`.
    - **PoC Code**:
      1. Create a context handle.
      2. Create a sync handle.
      3. Trigger the bug to read from address `0x4141414141414141`.

- **DXGK_VMBCOMMAND_SUBMITVAILPRESENTHISTORYTOKEN**
  - **Structure Layout**:
    - `size`: 0x00
    - `command`: 0x18
    - `context_handle`: 0x04
    - `unknown1_off4`: 0x04
    - `unknown2_off8`: 0x08
    - `unknown3_off10`: 0x08
    - `unknown4_off18`: 0x08
    - `unknown5_off20`: 0x08
    - `device_synchandle`: 0x04
    - `unknown6_off2C`: 0x04
  - **CVE-2022-21898**:
    - **Arbitrary Address Write**:
      - **Trigger Condition**: When `v2 = 0`, `v4 = *(_QWORD *)((char *)a2 + 0xC8)`.
      - **PoC Code**:
        1. Create a sync handle.
        2. Trigger the bug to write to address `0x414141414141414d`.

## 4. Why Fuzzing is Necessary
- **Large Codebase**: The Hyper-V DirectX component has a large codebase with 87 commands and corresponding structures.
- **Context Dependency**: Many commands depend on context, such as device handles and allocation handles. Fuzzing can effectively mutate these contexts to find vulnerabilities.
- **Efficiency**: Fuzzing is more efficient in discovering vulnerabilities in complex, context-dependent systems.
- **Proven Success**: The vulnerabilities discussed were discovered through fuzzing.

## 5. Fuzzing Architecture
- **Hypervisor**: Manages virtual machines.
- **Host (Root Partition)**: Runs the host operating system.
- **Guest (Child Partition)**: Runs the guest operating system.
- **dxgmms1.sys, dxgmms2.sys, dxgkrnl.sys, dxgkrnl.ko**: Kernel modules for handling DirectX commands.
- **UserMode**: Applications and fuzzer.
- **KernelMode**: Kernel modules and drivers.
- **Fuzzer**: Sends mutated DirectX command data and receives responses.
- **Agent Layer**: Facilitates communication between the fuzzer and the host DirectX component.

## 6. Example: Fuzzing DXGK_VMBCOMMAND_SIGNALSYNCOBJECT
- **Mutation**: Mutate the `dxgkvmb_command_signalsyncobject` structure members.
- **Data Flow**:
  - Send mutated DirectX command data.
  - Receive data returned from the kernel module, such as the return data of the create allocation command.
  - Agent layer sends the data to the host DirectX component and returns the response to the usermode program.

## 7. Conclusion
- **Large Attack Surface**: The Hyper-V DirectX component has a large attack surface and is still being updated.
- **Application Scenarios**: Used in WDAG, Windows Sandbox, and HoloLens 2 emulator. Future applications may include online 3D gaming.
- **Out of Scope for Bounty Program**: MSRC considers the Hyper-V DirectX component out of scope for the Hyper-V bounty program, but it remains a significant remote attack surface.

## 8. Black Hat Sound Bytes
- **Overview**: Introduction to the Hyper-V DirectX component architecture and configuration.
- **Attack Surface**: Discussion of the attack surface and how to find vulnerabilities through fuzzing.
- **Vulnerabilities**: Disclosure of internal details of four Hyper-V DirectX component vulnerabilities.

## 9. Q & A
- **Presenters**:
  - Zhenhao Hong (@rthhh17)
  - Ziming Zhang (@ezrak1e)

Thank you for your attention!