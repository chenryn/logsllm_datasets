### Figure 2: AND Gates in Push Operations

- **Top Plot**: This plot shows the exact number of AND gates used in the \(i\)-th `cpush` operation.
- **Bottom Plot**: This plot displays the running average number of AND gates for the first \(i\) operations. The trend closely matches the amortized \(O(\log n)\) complexity that we have analyzed.

### Crossover for Pop Operation

In this section, we compare the performance of our predicate method against the `pop` operation for generating the \(j\)-th bit of the binary expansion of a bias \(p\). We compute the average number of gates required for `pop` operations and the size of our predicate solution for increasingly long binary expansions of the bias. The results are summarized in Table 2.

| \(\lambda\) | 64 | 128 | 192 | 256 | 320 | 384 | 448 | 512 | 576 | 640 |
|-------------|----|-----|-----|-----|-----|-----|-----|-----|-----|-----|
| **Pop Method** | 43.6 | 52.2 | 60.8 | 60.8 | 60.8 | 69.3 | 69.3 | 69.3 | 69.3 | 69.3 |
| **Predicate Method** | 16 | 24 | 32 | 39 | 47 | 54 | 61 | 69 | 77 | 84 |

**Table 2**: Amortized number of AND gates for `pop` vs. predicate as the length of the bias \(\lambda\) increases. For the `pop` method, we took the average over 10,000 iterations of calling `pop` and conditionally resetting on a random bit. The crossover point is approximately \(\lambda > 512\), which is a highly secure setting but still a reasonable parameter choice.

### 5.2 Two-Party d-Sample Benchmarks

We benchmarked the process of generating \(d\) samples from \(Geo(2/\varepsilon)\) using the second version of `make-batch`, which employs a predicate function to generate the bias. For comparison, we also benchmarked the ODO (Optimal Differential Obliviousness) implementation. We varied the number of samples between \(2^{12}\) and \(2^{19}\) and sampled with two different values of \(\varepsilon\): one of the form \(\varepsilon = 2^{-i} \ln 2\) (specifically, \(\varepsilon = 2^{-3} \ln 2\)) and one not in that form (\(\varepsilon = 0.1\)). For each value of \(\varepsilon\), we benchmarked for \(\delta = 2^{-60}\) and \(\delta = 2^{-80}\).

- **Wall-Clock Time**: Presented in Figures 3a and 3c.
- **Communication Overhead**: Shown in Figures 3b and 3d, including the total number of bytes transmitted and the sum of the number of non-free Yao gates and the number of unbiased coins used.

**Note**: The cost and communication overhead are consistent across different network settings.

As expected, our protocol scales well with \(d\) in all categories. Despite the sub-optimal asymptotic behavior of the second `make-batch`, it performs well because the cost of the predicate function is roughly constant for lower values of \(\lambda + \log d\), making its complexity comparable to the first `make-batch`.

### 5.3 Two-Party Noisy Max Benchmarks

We report on our full implementation of the noisy max algorithm using our improved biased coin sampling procedure. The performance of noisy max is primarily determined by the sampling cost, as supported by the data below. In our two-party setup, each party contributes half of the dataset. We vary the dataset size from \(2^{12} = 4096\) to \(2^{19}\), using 32-bit integer entries. The benchmarks were run with two machines in the same `us-east1` datacenter. The results are presented in Table 3.

**Table 3**: Benchmark Results for Noisy Max

- **Cost Growth**: As predicted by our analysis, the cost grows slowly between \(\delta = 2^{-60}\) and \(\delta = 2^{-80}\). At \(d = 2^{19}\), the difference is only 10 seconds or 2%.
- **Communication Overhead**: The communication overhead is high but feasible for moderate-sized datasets.

**Figures 3a, 3b, 3c, 3d**:
- **Figure 3a**: Wall-clock time for \(d\)-sample generation.
- **Figure 3b**: Communication overhead for \(d\)-sample generation.
- **Figure 3c**: Wall-clock time for \(d\)-sample generation (continued).
- **Figure 3d**: Total number of Yao gates and random bits used for \(d\)-sample generation.

The figures and tables provide a comprehensive view of the performance and resource usage of our algorithms under various conditions.