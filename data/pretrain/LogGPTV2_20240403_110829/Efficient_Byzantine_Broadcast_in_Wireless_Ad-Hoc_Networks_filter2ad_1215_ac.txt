3.2.2 Gossiping and Message Recovery in Detail
Intuitively, the idea here is that nodes gossip about messages they received (or sent) to all their neighbors.
This way, if a node hears a gossip about a message that it has never received, it can explicitly ask the message
both from its overlay neighbor and from the node from which it received the gossip. If any of the contacted
nodes has the message, it forwards it to the requesting node. Messages can be purged either after a timeout,
or by using a stability detection mechanism. In this work, we have chosen to use a timeout based purging
due to its simplicity.
Additionally, there are several mechanisms in place to overcome Byzantine failures (in addition to sig-
natures that detect impersonations). In order to prevent a Byzantine overlay node from blocking the dissem-
ination of a message, searching a missing message can be initiated by limited ﬂooding with TTL 2, which
ensures that the recovery request will reach beyond a single Byzantine overlay node. This, in addition to
requesting the message from the process that gossiped about its existence. Also, when a node feels that
it received a request for a missing message too often, or that such a request is unjustiﬁed, it notiﬁes the
VERBOSE failure detector about it.
More accurately, the gossiping and message recovery task is composed of the following subtasks:
1. When a node p receives a gossip header(m) for a message m it has already received before, then p
gossips header(m) with the other N (1, p) nodes. Otherwise, p ignores such gossips. In particular, p
only gossips about messages it has already received and does not forward gossips about messages it
has not receive yet. This is done in order to make the recovery process more efﬁcient, and in order to
help detect mute failures more accurately.5
2. When p receives a gossip header(m) for a message m it has not received, p asks its overlay neighbors
and the sender of the gossip to forward m to it using a REQUEST MSG message.
3. If p receives header(m) messages from more than sig proofs threshold other nodes, or when some
timeout has passed since p got the ﬁrst header(m) message, yet p still has not received m, then p
asks the overlay neighbors in 2 hop distance (using ﬂooding with TTL=2) as well as one of the nodes
q from which p received header(m) to forward m to it. Essentially, this situation is likely to happen
if the nearest overlay neighbor, or its neighbor, is mute. By approaching the overlay neighbors at
distance 2, we can bypass such mute overlay nodes. Note that if p does not receive the requested
5It is possible to piggyback the ﬁrst gossip of a message by the sender and by overlay nodes on the actual message. This saves
one message and makes the recovery of messages a bit faster, since gossips about messages advance slightly faster this way. For
clarity of presentation, we separate these two types of messages in the pseudo-code.
9
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
message, then eventually this will trigger the MUTE failure detector at p to suspect p’s 2 hop overlay
neighbors (which in return will eventually lead to electing another node to the overlay).
4. When an overlay node p receives a REQUEST MSG for the same message m too many times from
the same node q, it causes p’s VERBOSE failure detector to suspect q.
5. When an overlay node p receives a REQUEST MSG for the same message m from different nodes
more than a threshold (missing msg threshold) of times, or a timeout has passed since it received the
ﬁrst such message, yet p has not received m, then p sends a FAULTY MSG message to nodes in
OL(2, p) asking them to ﬁnd the Byzantine node that is not forwarding m. (The message is sent to
overlay nodes at distance 2 in order to bypass a potential neighboring Byzantine node.)
6. When an overlay node p receives a FAULTY MSG message for a message m that it does not have yet,
then p forwards m to the nodes in OL(2, p). This is in order to make sure that if its overlay neighbor
is mute, it will be detected and eventually replaced.
7. When an overlay node p receives a FAULTY MSG message for m from a node q ∈ N (1, p) and
p has m, then p will broadcast m (to q and its other immediate neighbors). There are two reasons
why p forwards the message in a broadcast and not using a point-to-point message: (1) if one of p’s
neighbors was missing the message, it is likely that many of them miss the message, and (2) as listed
in Item 8 below, if any of the overlay neighbors r of p has forwarded m to p and does not hear p
forwarding it again, then r will suspect that p is mute.
8. When an overlay node p receives a FAULTY MSG message for m from a node q 6∈ N (1, p) and p
has m, then p ﬁrst broadcast m. Following this, p instructs its MUTE failure detector to expect a
retransmission of m by all its overlay neighbors. Failure by any of them to do so will eventually lead
the MUTE failure detector of p to suspect such a node.
3.3 Correctness Proof
Let us remind the reader that in Section 2.1 we assumed that there are enough correct nodes so that non-
Byzantine nodes form a connected graph. With this assumption, we prove the following validity and eventual
dissemination properties.
Theorem 3.1 The protocol satisﬁes the validity property.
Proof: According to the protocol, the originator of a message m adds a signature sig(m) and then dis-
seminates the message m||sig(m) to other nodes. Note that on receiving of m||sig(m), every correct node
checks if sig(m) corresponds to m before the node accepts m. As a part of the model’s basic assumptions,
a Byzantine node cannot forge signatures. Therefore, no correct node will accept a message other than m
as if it was m. Moreover, according to the protocol, correct nodes ﬁlter duplicates of messages they have
already received.
Theorem 3.2 The protocol satisﬁes the eventual dissemination property.
Proof: We show that a message m that is sent inﬁnitely often by a correct originator p is disseminated to
all the correct nodes. Assume, by way of contradiction, that there is message m that is not received by some
correct process. Let k be the smallest number such that there exists a correct node q ∈ N (k, p) that does not
receive m.
10
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
Recall that by assumption, the correct nodes form a connected graph. Therefore there exists a correct
node l ∈ N (k −1, p) such that the distance between q and l is smaller than rl and l received m. According to
the protocol, l will send a gossip about m to its neighbors and if requested by its neighbors, l will also send
m. Thus, q will receive m either from its overlay node or from l. This is a contradiction to the assumption
about the minimality of k.
In the following, we show that eventually, if the MUTE failure detector is indeed ∈ ♦P mute, then
messages are disseminated to all correct nodes by the overlay. The signiﬁcance of this is that dissemination
along overlay nodes is fast, since it need not wait for the periodic gossip mechanism.
Claim 3.3 Assume that the MUTE failure detector ∈ ♦P mute. Then eventually the non-mute overlay nodes
form a connected graph COL such that every correct node is either in COL, or within the transmission
range of a non-mute node in COL.
Proof: Eventually, ♦Pmute of all correct nodes will suspect all the mute nodes. Thus, the goodness number
in the overlay maintenance protocol for mute nodes will be lower than all other nodes. Consequently, the
overlay built by the maintenance protocol will have the desired property.
Claim 3.4 Every Byzantine overlay node is eventually suspected if it does not forward a message m that is
sent by s inﬁnitely often and if the MUTE failure detector ∈ ♦P mute.
Proof: Let p be the ﬁrst correct overlay node that does not receive m. Let q be the ﬁrst Byzantine overlay
node between s and p that does not forward m. We assume that q is not forwarding m and we will show
that q will be eventually suspected. The route between s and q is either s− > s1− > ...− > si− > q
when i ≥ 1 or s− > q. The proof for both cases is similar, so we will examine the more complicate case
(s− > s1− > ...− > si− > q when i ≥ 1).
Let Q = {the non-overlay nodes ∈ N (1, q)} and Si = {the non-overlay nodes ∈ N (1, si)}. Since q is the
ﬁrst overlay node that is not forwarding m, there exist at least one correct node in Q that will not get m. The
correct nodes in Si receive m from si and will eventually forward sig(m) to nodes in Q. After receiving
sig(m), every correct node in Q that has not received m from q will activate its MUTE failure detector and
eventually q will be suspected.
Claim 3.5 Eventually, when there are no collisions, most messages propagate to all the nodes via the over-
lay nodes, if the MUTE failure detector ∈ ♦P mute.
Proof: Claim 3.4 shows that eventually every mute overlay node will be suspected.
In Claim 3.3, we
showed that eventually, the non-mute nodes of the overlay form a connected graph that covers all non-mute
nodes. Therefore, eventually, all messages are propagated by overlay nodes to all correct nodes, which
proves the claim.
4 Overlay Maintenance
Overlay maintenance is carried by a distributed protocol. There is no global knowledge and each node must
decide whether it considers itself an overlay node or not. Thus, the collection of overlay nodes is simply the
set of all nodes that consider themselves as such. At the same time, every correct overlay node periodically
publishes this fact to its neighbors, so in particular, each overlay node eventually knows about all its correct
overlay neighbors.
11
The goal of the protocol is to ensure that indeed the overlay can serve as a good backbone for dissemi-
nation of messages. This means that eventually between every pair of correct nodes p and q there will be a
path consisting of overlay nodes that do not exhibit externally visible Byzantine behavior. At the same time,
for efﬁciency reasons, the overlay should consist of as few nodes as possible.
For scalability and resiliency reasons, we are interested in a self-stabilizing distributed algorithm in
which every node decides whether it participates in the overlay based only on the knowledge of its neigh-
bors. Recall that the neighbors of p are the nodes that appear in the transmission disk of p. Thus, p can
communicate directly with them and every message p sends is received by all of them. Additionally, we
would like to inﬂuence the overlay construction process such that the overlay nodes will be the best nodes
under a given metric. For example, since in mobile systems nodes are often battery operated, we may wish
to use the energy level as the metric in order to have the nodes with highest energy levels members of
the overlay. Alternatively, we might use bandwidth, transmission range, or local storage capacity, or some
combination of several such metrics.
Following the work of [21], we deﬁne the goodness number as a generic function that associates each
node with a value taken from some ordered domain. The goodness number represents the nodes appropriate-
ness to serve in the overlay. This way, it is possible to compare any two nodes using their goodness number
and to prefer to elect the one whose value is highest to the overlay. For example, it is easy to evaluate and
compare the battery level of nodes. Intuitively, the idea is that a process that believes that it has the high-
est goodness number among its neighbors that are not covered by another overlay node elects itself to the
overlay.
The protocol for deciding if a node should be in the overlay consists of computation steps that are taken
periodically and repeatedly by each node. In each computation step, each node makes a local computation
about whether it thinks it should be in the overlay or not, and then exchanges its local information with its
neighbors. For simplicity, we concentrate below on the local computation steps only.
Each node has a local status, which can be either active or passive; active means that the node is in
the overlay whereas passive means that it is not. The local state of each node includes a status (active or
passive), its goodness number, and its knowledge of the local states of all its neighbors (based on the last
local state they reported to it). Also, for each neighbor, the list of its active neighbors. We assume that these
messages are signed as well.
Moreover, to ensure the appropriateness of the overlay, we need to ensure that the overlay includes
alternatives to each detected mute or verbose node. Ideally, we would like to eliminate these nodes from the
overlay, but as they are Byzantine, they may continue to consider themselves as overlay nodes. Thus, the
best we can do is make sure that there is an alternative path in the overlay that does not pass through such
nodes, and that correct nodes do not consider mute and verbose nodes as their overlay neighbors. So we
reﬁne the intuitive notion of a goodness number by ensuring that a node elects itself to the overlay if it has
the highest goodness number among its trusted neighbors. Below we list a couple of overlay maintenance
protocols that realize this intuition.
Speciﬁcally, we have implemented two overlay maintenance protocols, namely the Connected Domi-
nating Set (CDS) and the Maximal Independent Set with Bridges (MIS+B) of [21], augmented with trust
levels.6 For lack of space, and since other than adding the trust level, the protocols are the same as in [21],
we do not repeat them here.
6The CDS and MIS+B protocols in [21] are in fact self-stabilizing generalizations of the work of [48].
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
12
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
s
e
g
a
s
s
e
m
d
e
v
e
c
e
r
%
i
100
90
80
70
60
50
40
30
20
10
0
0
BDP(MIS)
BDP(CDS)
OVERLAY(MIS)
OVERLAY(CDS)
FLOODING
0.5
1
1.5
2
2.5
3
3.5
4
#messages sent per second
x 105
s
e
g
a
s
s
e
m
t
n
e
s
#
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
BDP(MIS)
BDP(CDS)
OVERLAY(MIS)
OVERLAY(CDS)
FLOODING
0.5
1
1.5
2
2.5
3
3.5
4
#messages sent per second
Figure 5: Message delivery ratio when all nodes
are static
Figure 6: Network load in terms of total number of
messages sent when all nodes are static
5 Results
We have measured the performance of our protocol using the SWANS/JIST simulator [1]. In the simula-
tions, we have compared the performance of our protocol with the performance of ﬂooding on one hand and
of simple dissemination along an overlay (without recovery of lost messages). Here, ﬂooding is an example
of a very robust protocol against maliciousness, but also very wasteful. At the other extreme, dissemination
along an overlay without message recovery is very efﬁcient, but very unreliable as well. We have measured
the percentage of messages delivered to all nodes, the latency to deliver a message to all and to most of the
nodes, and the load imposed on the network. It is also important to note that our performance measure-
ments included the overhead of the overlay maintenance as well as the gossip messages (although overlay
maintenance are piggybacked on gossip messages).
In order to reduce the number of collisions, we have employed a staggering technique. That is, each time
a node is supposed to send a message, it delays the sending by a random period of up to several milliseconds.
In the simulations, mobility was modelled by the Random-Waypoint model [28]. In this model, each
node picks a random target location and moves there at a randomly chosen speed. The node then waits
for a random amount of time and then chooses a new location etc. In our case, the speed of movement
ranged from 0.5-1.5 m/s, which corresponds to walking speed. Also, the maximal waiting time was set
to 20 seconds. Each simulation lasted 5 minutes (of simulation time) and each data point was generated
as an average of 10 runs. The transmission range was set to roughly 80 meters7 with a simulation area
of 200x200 meters, the message size was set to 1KB (less than one UDP/IP packet), and the network
bandwidth to 1Mbps. In each simulation, two nodes were generating messages at variable rates. We have run
simulations with varying number of nodes, but discovered that with the exception of very sparse networks,
the results are qualitatively the same. Thus, we only present the results when the number of nodes is
ﬁxed at 200. In the graphs, we denote the ﬂooding protocol by FLOODING, our Byzantine dissemination
protocol by BDP(MIS) and BDP(CDS) depending on the overlay mechanism used (see Section 4), and by
OVERLAY(MIS) and OVERLAY(CDS) the simple overlay dissemination mechanism that has no message
7In fact in SWANS one can choose the transmission power which translates into a transmission range based on power degrada-
tion and background noise.
13
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n