通过binwalk即可常规解压，find命令可以快速查找到httpd程序所在位置
    $ find -name httpd                                                                                                    
    ./usr/sbin/httpd
### 定位查找绕过认证函数
拖入IDA,查找在这个设备中对应的 **evaluate_access** 函数，通过检索`%s has already
granted`这个字符串很容易可以找到，并把这个函数重命名为evaluate_access
后边的步骤，偷了个懒，没有根据作者的步骤一步步回溯，我尝试在github中搜索ARC_SYS_LogEnable这个字符串，果然找到了一个相似的匹配[链接](https://github.com/y251615254/ARC_RE_WEB/blob/a5846f621c4be57b5f119507d2f57b7d39d9b53c/bt_SA/httpd/src/plc/vendor_hook.c)
简单把源码和二进制汇编比较了一下，基本匹配，因此下面基本基于源码开展分析。通过ARC_SYS_LogEnable这个字符串，顺利找到对应函数check_auth
check_grant函数正是在检查访问的ip是否时已经授权过的ip
然后我们查看check_auth函数的引用，只找到一处引用，被evalute_access函数引用
可以看到正如作者分析，如果bypass_flag如果不为0，即可绕过check_auth的检查，
查找bypass_flag的引用，发现代码`r->bypass_flag =
bypass_check(r->url);`,bypass_flag是被bypass_check()这个函数赋值的，所以我们去看一下bypass_check这个函数
发现正是在检查url是否与bypass_list匹配
    char *bypass_list[] = {
        "/images/",
        "/lang/",
    //  "/cgi/", hugh hide it due to security issue
        "/js/",
        "/css/",
        "/setup_top_login.htm",
        "/login.htm",
        "/loginpserr.htm",
        "/login.cgi",
        "/3g_conn.xml",
        "/top_conn.xml",
        "/wireless_calibration.htm",
        "/cgi/cgi_login.js",
        "/cgi/cgi_autologout.js",
        "/internet_paused.htm",
        NULL
        ...
    }
### 明晰 **httoken** 处理流程
根据作者的分析，身份验证绕过的漏洞点并不能绕过验证访问任意界面，因为在访问的时候还需要正确的httoken值。根据前面的对照，httoken是在服务器端生成，然后在前端js解码，最终将这个值添加到访问请求中
在代码中找到了以下位置
    static int ssi_image_token(struct request_rec *r, int argc, char **argv)
    {
        int i;
        int type; // runsen_lao, log type: 0--system_log 1--security_log
        int nbytes = 0;
        unsigned long token = 0;
        // NzgyMjIwMTU2Cg==
        char output_buf[OUT_BASE64_SZ+1] ={0}; // {[0 ... (OUT_BASE64_SZ + 1)] = 0x00};
        char *p;
        int len=0;
        int tid;
        if((tid = get_tid()) == MID_FAIL)
            return 0;
    #ifdef CONFIG_HTTPD_TOKEN_CHECK_SUPPORT
        token = httoken_get( r->url?r->url:"/" );
        //ht_dbg("token=%lu from %s\n", token, r->url?r->url:"NULL" );
        sprintf(output_buf, "%lu", token );
    #else
        sprintf(output_buf, "123456789"); //hard code
    #endif
        len=strlen(output_buf);
        p=(char *)( output_buf + len+1);
        //cprintf("get [%s]\n",output_buf);
        b64_encode((unsigned char *)output_buf ,len, (unsigned char *) p, OUT_BASE64_SZ-len);
        // NOTE: hugh 2014/2/20
        //  A Data URI scheme(RFC2397) to present a space GIF icon.
        //
        //  this return a empty gif for present purpuse! but we dirty append our session ID after
        //  UI need take time to reteieve the sesison ID from "dutrefer" Image Object
        //
       nbytes += so_printf(r, "", p);
        return nbytes;
    }
在前端源码中也找到了运行时会添加到页面的代码,这段代码会将服务器端生成的码解码，然后添加到新的请求当中去。
    function getToken(){
        var objs=document.getElementsByTagName("img");
        var x;
        for(var i=0,sz=objs.length;i < sz; i++){
            x=objs[i].src;
            if(x.indexOf("data:") ==0){
                return ArcBase.decode(x.substring(78));
            }
        }
        return "";
    }
## 总结
本次分析中，没有针对ASUS DSL-AC68VG设备固件进行很详细的分析，借着作者的思路明确这个设备的漏洞利用流程其实也是比较容易的，但是个人认为重要的是作者的研究思路很值得参考，所以主要分析了一下作者的挖掘流程，并加入了一些自己的思考（当然，主要原因还是因为懒）。
从访问页面没有cookie头信息到去探析整个认证授权流程，然后梳理清楚httoken的产生流程，到最后通过在配置中新加入一项配置来达到攻击效果的攻击手段，都很值得借鉴。