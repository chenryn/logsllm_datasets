::: informalexample
``` screen
/* theme colors/images */
@define-color product_bg_color @redhat;
/* logo and sidebar classes */
.logo-sidebar {
   background-image: url('/usr/share/anaconda/pixmaps/sidebar-bg.png');
   background-color: @product_bg_color;
   background-repeat: no-repeat;
}
/* Add a logo to the sidebar */
.logo {
   background-image: url('/usr/share/anaconda/pixmaps/sidebar-logo.png');
   background-position: 50% 20px;
   background-repeat: no-repeat;
   background-color: transparent;
}
/* This is a placeholder to be filled by a product-specific logo. */
.product-logo {
   background-image: none;
   background-color: transparent;
}
AnacondaSpokeWindow #nav-box {
   background-color: @product_bg_color;
   background-image: url('/usr/share/anaconda/pixmaps/topbar-bg.png');
   background-repeat: no-repeat;
   color: white;
}
```
:::
CSS 文件最重要的部分是根据分辨率处理缩放的方法。PNG
镜像背景无法扩展，它们总是显示在实际的维度中。相反，背景信息具有透明背景，样式表在
`@define-color`{.literal} 行上定义匹配的背景颜色。[*因此，后台图像
[]{.emphasis}
\"灰显\"到后台颜色*]{.emphasis}，这意味着后台在所有分辨率上工作，而无需镜像扩展。
您还可以将 `后台参数更改为指定`{.literal}
后台参数；或者，如果您确信将要安装的每个系统具有相同的显示分辨率，您可以使用填充整个栏的后台映像。
以上列出的任何文件都可以自定义。执行此操作后，请按照第 2.2
节中的说明操作，\"创建 product.img 文件\"以使用自定义图形创建自己的
product.img，然后按照第 2.3 节\"创建自定义引导映像\"
以创建包含您的更改的新可引导 ISO 映像。
:::
::: section
::: titlepage
# []{#branding-and-chroming-the-graphical-user-interface_customizing-anaconda.html#customizing-the-product-name_branding-and-chroming-the-graphical-user-interface}自定义产品名称 {.title}
:::
若要自定义产品名称，您必须创建一个 custom
`.buildstamp 文件`{.literal}。要做到这一点，使用以下内容创建新 file
`.buildstamp.py`{.literal} ：
``` literallayout
[Main]
Product=My Distribution
Version=8.4
BugURL=https://bugzilla.redhat.com/
IsFinal=True
UUID=202007011344.x86_64
[Compose]
Lorax=28.14.49-1
```
将 [*My Distribution*]{.emphasis} 更改为您要在安装程序中显示的名称。
创建自定义 .buildstamp 文件后，按照 ["创建 product.img
文件"一节](#completing-post-customization-tasks_customizing-anaconda.html#creating-a-product-img-file_completing-post-customization-tasks "创建 product.img 文件"){.xref}
部分中的步骤创建一个包含自定义的新 product.img
文件，使用包括的更改创建新可引导 ISO
文件。["创建自定义引导镜像"一节](#completing-post-customization-tasks_customizing-anaconda.html#creating-custom-boot-images_completing-post-customization-tasks "创建自定义引导镜像"){.xref}
:::
::: section
::: titlepage
# []{#branding-and-chroming-the-graphical-user-interface_customizing-anaconda.html#customizing-the-default-configuration_branding-and-chroming-the-graphical-user-interface}自定义默认配置 {.title}
:::
您可以创建自己的配置文件，并使用它来自定义安装程序的配置。
::: section
::: titlepage
## []{#branding-and-chroming-the-graphical-user-interface_customizing-anaconda.html#_configuring_the_default_configuration_files}配置默认配置文件 {.title}
:::
您可以使用 `.ini`{.literal} 文件格式编写 Anaconda 配置文件。Anaconda
配置文件由部分、选项和注释组成。每个部分都由一个 `[ 部分]`{.literal}
标头定义，注释以 `#`{.literal} 字符和用于定义 `选项`{.literal}
的键开头。生成的配置文件使用 `configparser 配置文件解析`{.literal}
器进行处理。
默认配置文件位于 `/etc/anaconda/anaconda.conf`{.literal}
中，包含记录的部分和支持选项。该文件提供了安装程序的完整默认配置。您可以从
/etc/anaconda/ `product.d/ 和 /etc/anaconda/`{.literal}
`conf.d/ 中的`{.literal} 自定义配置文件修改产品配置文件的配置。
以下配置文件描述了 RHEL 8.4 的默认配置：
``` literallayout
# Anaconda configuration file for Red Hat Enterprise Linux.
[Product]
product_name = Red Hat Enterprise Linux
[Anaconda]
# Run Anaconda in the debugging mode.
debug = False
# Enable Anaconda addons.
addons_enabled = True
# List of enabled Anaconda DBus modules for RHEL.
kickstart_modules =
    org.fedoraproject.Anaconda.Modules.Timezone
    org.fedoraproject.Anaconda.Modules.Network
    org.fedoraproject.Anaconda.Modules.Localization
    org.fedoraproject.Anaconda.Modules.Security
    org.fedoraproject.Anaconda.Modules.Users
    org.fedoraproject.Anaconda.Modules.Payloads
    org.fedoraproject.Anaconda.Modules.Storage
    org.fedoraproject.Anaconda.Modules.Services
[Installation System]
# Should the installer show a warning about enabled SMT?
can_detect_enabled_smt = False
[Installation Target]
# Type of the installation target.
type = HARDWARE
# A path to the physical root of the target.
physical_root = /mnt/sysimage
# A path to the system root of the target.
system_root = /mnt/sysroot
# Should we install the network configuration?
can_configure_network = True
[Network]
# Network device to be activated on boot if none was configured so.
# Valid values:
#
#   NONE                   No device
#   DEFAULT_ROUTE_DEVICE   A default route device
#   FIRST_WIRED_WITH_LINK  The first wired device with link
#
default_on_boot = NONE
[Payload]
# Default package environment.
default_environment =
# List of ignored packages.
ignored_packages =
# Enable installation of latest updates.
enable_updates = True
# List of .treeinfo variant types to enable.
# Valid items:
#
#   addon
#   optional
#   variant
#
enabled_repositories_from_treeinfo = addon optional variant
# Enable installation from the closest mirror.
enable_closest_mirror = True
# Default installation source.
# Valid values:
#
#    CLOSEST_MIRROR  Use closest public repository mirror.
#    CDN             Use Content Delivery Network (CDN).
#
default_source = CLOSEST_MIRROR
# Enable ssl verification for all HTTP connection
verify_ssl = True
[Security]
# Enable SELinux usage in the installed system.
# Valid values:
#
#  -1  The value is not set.
#   0  SELinux is disabled.
#   1  SELinux is enabled.
#
selinux = -1
[Bootloader]
# Type of the bootloader.
# Supported values:
#
#   DEFAULT   Choose the type by platform.
#   EXTLINUX  Use extlinux as the bootloader.
#
type = DEFAULT
# Name of the EFI directory.
efi_dir = default
# Hide the GRUB menu.
menu_auto_hide = False
# Are non-iBFT iSCSI disks allowed?
nonibft_iscsi_boot = False
# Arguments preserved from the installation system.
preserved_arguments =
     cio_ignore rd.znet rd_ZNET zfcp.allow_lun_scan
     speakup_synth apic noapic apm ide noht acpi video
     pci nodmraid nompath nomodeset noiswmd fips selinux
     biosdevname ipv6.disable net.ifnames net.ifnames.prefix
     nosmt
[Storage]
# Enable dmraid usage during the installation.
dmraid = True
# Enable iBFT usage during the installation.
ibft = True
# Do you prefer creation of GPT disk labels?
gpt = False
# Tell multipathd to use user friendly names when naming devices during the installation.
multipath_friendly_names = True
# Do you want to allow imperfect devices (for example, degraded mdraid array devices)?
allow_imperfect_devices = False
# Default file system type. Use whatever Blivet uses by default.
file_system_type =
# Default partitioning.
# Specify a mount point and its attributes on each line.
#
# Valid attributes:
#
#   size     The size of the mount point.
#   min  The size will grow from MIN_SIZE to MAX_SIZE.
#   max  The max size is unlimited by default.
#   free     The required available space.
#
default_partitioning =
    /     (min 1 GiB, max 70 GiB)
    /home (min 500 MiB, free 50 GiB)
    swap
# Default partitioning scheme.
# Valid values:
#
#    PLAIN      Create standard partitions.
#    BTRFS      Use the Btrfs scheme.
#    LVM        Use the LVM scheme.
#    LVM_THINP  Use LVM Thin Provisioning.
#
default_scheme = LVM
# Default version of LUKS.
# Valid values:
#
#   luks1  Use version 1 by default.
#   luks2  Use version 2 by default.
#
luks_version = luks2
[Storage Constraints]
# Minimal size of the total memory.
min_ram = 320 MiB
# Minimal size of the available memory for LUKS2.
luks2_min_ram = 128 MiB
# Should we recommend to specify a swap partition?
swap_is_recommended = True
# Recommended minimal sizes of partitions.
# Specify a mount point and a size on each line.
min_partition_sizes =
    /      250 MiB
    /usr   250 MiB
    /tmp   50  MiB
    /var   384 MiB
    /home  100 MiB
    /boot  200 MiB
# Required minimal sizes of partitions.
# Specify a mount point and a size on each line.
# Allowed device types of the / partition if any.
# Valid values:
#
#  LVM        Allow LVM.
#  MD         Allow RAID.
#  PARTITION  Allow standard partitions.
#  BTRFS      Allow Btrfs.
#  DISK       Allow disks.
#  LVM_THINP  Allow LVM Thin Provisioning.
#
root_device_types =
# Mount points that must be on a linux file system.
# Specify a list of mount points.
must_be_on_linuxfs = / /var /tmp /usr /home /usr/share /usr/lib
# Paths that must be directories on the / file system.
# Specify a list of paths.
must_be_on_root = /bin /dev /sbin /etc /lib /root /mnt lost+found /proc
# Paths that must NOT be directories on the / file system.
# Specify a list of paths.
must_not_be_on_root =
[User Interface]
# The path to a custom stylesheet.
custom_stylesheet =
# The path to a directory with help files.
help_directory =
# A list of spokes to hide in UI.
# FIXME: Use other identification then names of the spokes.
hidden_spokes =