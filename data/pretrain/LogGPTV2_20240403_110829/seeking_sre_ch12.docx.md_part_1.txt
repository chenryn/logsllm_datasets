# DevOps 和 SRE：来自社区的声音
David N. Blank-Edelman 的见闻收录
# 背景
  从我与 SRE 社区互动的最初开始，我就对 DevOps 和 SRE
之间的关系感到好奇。我有幸与许多聪明人谈论这件事，并听到许多绝佳的见解。就我所知，这不是一个已解决的问题。与我交谈的每个人都给我的理解增添了一些东西。当需要就这个话题找到一个贡献者时，我能做的最好的事情就是邀请尽可能多的声音参与讨论。
欢迎来到我的实验章节，一个完全众包的章节。
# 方法
2018 年 2 月底，我建立了一个网站，其中有一个页面，询问以下内容：
> 用两段或更少的文字来描述：你认为什么是 DevOps 和 SRE
> 之间的关系？它们是如何相似的？它们有什么不同？两者都可以在每个组织中实施？两者能否同时存在于同一个组织中？等等\...
我通过 Twitter 发出一个通告，LinkedIn
到我的专业社交网络上来征集意见（并要求他们把这个网页的指针传到他们的网络，许多人也确实这样做了）。最终，Google
Analytics（谷歌分析）报告，来自 34 个不同国家的 1165 人来到了这个页面。
# 结果
看到我对这些问题得到的深思熟虑的答案，真让人激动。我现在呈现给你们的只是稍微编辑了的版本章节篇幅的限制，导致我不能包括更多人的答复，但我很感激我收到的每一个答复。谢谢大家！，并没有特定的顺序，也没有特定的组织（所以它准确地反映了讨论的"混乱"性质，你会发现互联网上的交互特性）。对于每个回复，我列出了此人的姓名、职务和隶属关系（如果他们允许共享该信息）。
这并不是一个有代表性的调查，但我认为它很好地表现了关于这个问题的观点的异质性和同质性。希望这个讨论能够抛砖引玉，让你开始形成自己的思想的问题。我还应说，我故意提出这些答复，没有我本人的评论或意见。与其试图把关于这个主题的研讨打包整齐成礼品的样子，或者把我自己对材料的印象强加在你的思想上，我更感兴趣的是听到你的结论。我们是否更接近于回答这些问题？
显然，关于这个话题，还有更多的可说。如果你想分享自己的想法，请随时与我们联系，我很乐意听到它们。
# 回复
站点可靠性是运维可靠性、可扩展性和效率。这包括业务连续性（灾难恢复、高可用性）。运维站点本身就成为产品，并可能包括自己的内部工具的
CI/CD。自动化趋向于定制的工具；例如，带有 Boto 库的 Python、带
AWS【亚马逊云服务】 SDK 的 Ruby 和 Go 语言，而不是使用 Terraform 和
Ansble
等高级工具，因为它们被认为效率低下。虽然这不是绝对的，但只是一种趋势。SRE
正在对运维进行编程，以创建可靠、高效的基础结构。
DevOps
专注于打破文化壁垒，提高部署（CI/CD）管道的效率或速度，从开发到交付；这包括构建和构建工件之前和之后的组件测试（在构建组件之前和之后进行测试），也就是
CT
或*持续测试*。它接管了敏捷开发模型的间隙，并包含精益的各个方面。DevOps
将采用上游优化和集成（构建、测试）和下游进行部署和交付。两者存在重叠，其中对运行中的系统进行部署或发布是与
SRE 的共享域。也有相反的理想，其中 DevOps 集成跨管道， SRE
仅在运维基础结构， 在严格的 DevOps 哲学中被视为一个孤岛。 
***---Joaquin Menchaca，高级 DevOps 工程师，NinjaPants 咨询***
◆ ◆ ◆
虽然许多人认为 DevOps
是一个单一的框架，但它实际上是一个实践管道的保护伞，这些实践跨越了组织的价值流，从概念到价值创造。大多数
DevOps
实践侧重于从开发到部署的各个阶段，如持续集成、持续交付和持续部署。在我看来，SRE
是 DevOps 作为连续操作的自然延伸。
在同一理念下，SRE 在使 ITIL/ITSM 流程与 DevOps
保持和演变方面发挥着关键作用。在 SRE
级别管理和执行时，单一过程（如事件、问题、知识、更改和服务级别管理）在
SRE
级别进行管理和执行时，会变得不那么具有约束性，而更成为推动因素，以便适应更快、更频繁的变更。为什么？因为
SRE 不仅仅是一组实践：SRE 是一个清晰定义的角色，有一组相应的职责。这是
SRE 和 DevOps 之间的另一个根本区别；没有明确界定的"DevOps 工程师"角色。
***---Jayne Groll, CEO, DevOps Institute***
◆ ◆ ◆
DevOps
以三个原则为基础：系统思维（关注整个系统，而不仅仅是某个部分）、放大反馈循环，以及持续实验和学习的文化。SRE
遵循这些相同的原则，SLO、错误预算及其参与系统的所有方面就证明了这一点。在某些方面，SRE
是执行 DevOps 的一种方法，就像 Scrum 是实现敏捷的一种方式一样。
SRE 专注于工程解决方案，与 DevOps
不同。这种对代码的关注使得在其他解决方案无法达到的级别进行扩展，从而使
SRE 本质上是一个高度可扩展的 DevOps。换句话说，SRE
是一种以工程解决方案为中心的 DevOps 实现。 
***---Tanner Lund, Microsoft***
◆ ◆ ◆
我相信 DevOps
来自业界，它回答了由两大技术趋势推动的运维复杂性的无情增长：迁移到云，以及不可变的基础架构加上代码定义的基础架构。随着每家公司都拼命向云提供商转移，并彻底改变其成本结构，从而大幅改变价值观（云提供商是可变运营成本，而不是固定的），所有公司都在拼命追赶最新的代码定义的基础架构突破（Docker
和
Kubernetes），运维复杂性呈指数级增长。大多数公司缺乏能够实现力量健康平衡的技能组合和工程文化，从而释放创新并可靠地运维创新。
我相信SRE只是谷歌、微软、LinkedIn、Facebook
和其他大公司努力解决同样的问题。十多年来，这些公司一直在应对这种规模的运维复杂性，经历了一代代的工程团队考察、执行和推进。此外，对其产品的可靠性和性能的期望更高，而且拥有顶级公司的实践经验，这些实践在团队层面为学习和实施进行了精心定义和完善。我相信
SRE 基本上是
DevOps，但它领先了整整十年的试验和错误，现在，由于几本书和白皮书，它已被提供给其他行业学习和采用。 
***---Santiago Suarez Ordoñez, CTO, Blameless***
◆ ◆ ◆
我认为基本上这些角色非常相似，但差异在于它们更关注业务需求。对于小型企业或大型企业中较新的团队，事情可能更手动一些，因为那里还没有人自动执行他们的常见任务。这可能意味着对运维工程师的迫切需求更大。在教导运维工程师如何将软件工程原理应用于他们的工作（DevOps）之后，我认为站点可靠性工程师是自然的进步，并且他们已经自动化了大量的运维工作。作为这种实践的一部分，他们已为需要大规模提供和可靠的服务提供脚手架和运维服务。这为他们提供了必要的经验，可以介入其他项目，并帮助实施改进，也可以推动软件工程模式的进步，从而产生更好的系统。
我认为这些角色可以在大多数组织中实现，但它们可能会发生在略有不同的时间。用于支持业务的基础设施应该建立起来，然后有专门人员可以专注于以一致的方式在这些系统上构建更可靠的系统。这实际上意味着可能从运维工程师开始，以最终让他们像
SRE 工程师一样的方式集中工作。开始采用 SRE
计划并不是表明执行运维的人不再需要，但事实上，可能需要更多相关人员来帮助继续迭代和支持基础结构和系统，以确保它继续满足业务。虽然这两个角色的核心焦点略有不同，但请务必记住，当在单个组织中有效使用时，它们都可以相互补充。 
***---Tim Heckman，Netflix 公司高级网站可靠性工程师。***
◆ ◆ ◆
DevOps 和 SRE
是工程实践，在倡导从失败中学习的文化中，都侧重于协作和自动化。DevOps
专注于以敏捷方式频繁交付客户功能，而 SRE 则专注于通过为其专业知识支持
DevOps 团队，尽可能可靠地发布产品。
考虑到它们共享其基本原则，只要组织明确构建和运行的责任，SRE 和 DevOps
就可以轻松共存。在ING内部，BizDevOps
团队总体负责他们的服务及其事件响应：SRE
提供监控和警报解决方案，致力于流量建模，ChatOps
并引入一种无可指责的文化，我们通过故障报告和混乱工程组织接受并战胜失败。荷兰
ING 零售银行的 SRE 与 DevOps 分别由 7名 和 1700 名工程师，我认为我们的
SRE 团队与其他组织相比有点小。雇用 SRE 可能比雇用 DevOps
工程师更加困难，因为需要自动化功能、全堆栈工程技能、可靠性思维以及咨询和教育他人有关
SRE 相关主题所需的软技能。  
***---Janna Brummel and Robin van Zijll，IT 部门分管 SRE 及
SRE/产品所有者，ING***
◆ ◆ ◆
从纯粹的观点来看，简而言之，DevOps
是一种实践，其目标是通过减少交接和增加协作来改进反馈周期，而 SRE
则更符合实际的角色标题，并且更注重工程，从而通过工程成果来推动变革。它们相似的地方是，它们都需要一种心态、行为和文化变化。我不同意
DevOps 工程师这个词，在我看来，这其实就是所谓的 SRE。
DevOps
可以而且应该在每个采用敏捷或迭代工作方式的组织中实现，以便推动产品所有者或带实现功能推动者的反馈循环，以确保服务管理问题被发现并解决。SRE
与拥有或寻求培养工程文化、消除浪费和通过工程成果提高效率的组织兼容。当组织足够大或足够成熟时，两者可以在同一组织中共存。拥有许多人所称的"遗留系统"的组织可以轻松地切换到
DevOps
的工作方式，同时他们形成针对更多新领域或不断涌现的新系统的有针对性的 SRE
团队。正如一句睿智的谚语所说，你怎么吃掉大象？一次一口。 