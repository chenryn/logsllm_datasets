title:Specification-Based Protocol Obfuscation
author:Julien Duchêne and
Eric Alata and
Vincent Nicomette and
Mohamed Kaâniche and
Colas Le Guernic
Speciﬁcation-based Protocol Obfuscation
Julien Duchˆene
CALID, Paris, France
& LAAS-CNRS,
Univ. de Toulouse, CNRS, INSA,
Toulouse, France
PI:EMAIL
Eric Alata, Vincent Nicomette,
and Mohamed Kaˆaniche
LAAS-CNRS,
Univ. de Toulouse, CNRS, INSA,
Toulouse, France
ﬁPI:EMAIL
Colas Le Guernic
DGA Maˆıtrise de l’Information
Rennes, France
& Univ. Rennes, Inria, CNRS, IRISA
Rennes, France
PI:EMAIL
8
1
0
2
l
u
J
5
2
]
R
C
.
s
c
[
1
v
4
6
4
9
0
.
7
0
8
1
:
v
i
X
r
a
Abstract—This paper proposes a new obfuscation technique of
a communication protocol that is aimed at making the reverse
engineering of
the protocol more complex. The obfuscation
is based on the transformation of protocol message format
speciﬁcation. The obfuscating transformations are applied to
the Abstract Syntax Tree (AST) representation of the messages
and mainly concern the ordering or aggregation of the AST
nodes. The paper also presents the design of a framework that
implements the proposed obfuscation technique by automatically
generating, from the speciﬁcation of the message format, a
library performing the corresponding transformations. Finally,
our framework is applied to two real application protocols
(Modbus and HTTP) to illustrate the relevance and efﬁciency
of the proposed approach. Various metrics recorded from the
experiments show the signiﬁcant increase of the complexity of the
obfuscated protocol binary compared to the non-obfuscated code.
It is also shown that the execution time and memory overheads
remain acceptable for a practical deployment of the approach in
operation.
I. INTRODUCTION
that
Reverse engineering is aimed at extracting knowledge from
in
a component
is, a priori, complex to understand,
order to infer its main characteristics and behavior. It
is
used for many different purposes, both by legitimate people
or attackers. For instance, attackers motivations could be to
steal intellectual property and generate counterfeit, whereas
legitimate people use reverse engineering to analyze malware
in order to develop protection countermeasures. The target
of the reverse engineering may be for instance a binary
program or a communication protocol. In this paper, we are
mainly concerned by the development of efﬁcient countermea-
sures against malicious protocol reverse engineering activities.
Several complementary solutions are available to fulﬁll this
objective, such as cryptography or obfuscation. An obfuscation
is a transformation applied on a component (either a software
or a communication protocol) to make the inference of the
transformed component behavior difﬁcult without knowing its
speciﬁcation. Of course, the transformed component must still
ensure the service for which it was developed. Inevitably, re-
verse engineering and obfuscation activities are closely linked.
This paper focuses on the obfuscation of communication
protocols. Several solutions have been proposed recently,
based e.g., on randomization, mimicry or tunneling techniques
with the objective to make the communication indistinguish-
able from noise or other protocols (see e.g., the discussion of
related work in [1]). Most of these techniques have been devel-
oped in order to circumvent network censorships. However, the
proposed transformations have not been designed to provide
enhanced protection against communication protocols reverse
engineering. Furthermore, the obfuscations are integrated a
posteriori
in the binary. They are implemented through a
dedicated function between the transformation layer and the
core application, that can be easily identiﬁed by an attacker
to understand the obfuscation logic.
The main objective of this paper is to present a new
protocol obfuscation technique that is aimed at increasing
the effort needed by an adversary, having access to network
traces or to the application binary, to successfully reverse the
protocol. For that purpose, the transformations are applied
to the speciﬁcation of the protocol, focusing on the message
format. The transformations are, by construction, invertible to
avoid ambiguities when the messages are parsed. We are not
aware of similar obfuscation techniques that operate at the
protocol speciﬁcation level.
Cryptography could be another solution. Indeed, it guar-
antees several security properties including conﬁdentiality.
Conﬁdentiality does imply protection against protocol reverse
engineering. However, conﬁdentiality is lost if the attacker can
intercept the buffer before encryption in the process memory.
In that case our approach offers some additional protection.
Finding a single buffer with a very speciﬁc access pattern
is arguably easier than reversing the code or the message
format produced by our approach. Note that a higher level of
protection can also be obtained by combining both techniques:
e.g., messages can be obfuscated before being encrypted and
sent through the secured communication channel.
To implement our new technique, we developed a frame-
work with the following design characteristics: 1) the frame-
work automatically generates, from the speciﬁcation of the
message format, a library code performing the transformations,
that can be easily linked to the core application to provide
an obfuscated binary; 2) this library code can be easily re-
generated with new transformations, at regular intervals, to
produce new versions of the obfuscated core application; 3)
the generated code is designed to make the protocol difﬁcult
to reverse for an attacker that would capture network traces
or reverse the binary code of the application itself. One of
the objectives of the framework is to make the interface
between the transformation layer and the core application
difﬁcult to identify and understand by an attacker. Moreover,
the framework generates obfuscated protocols that behave
according to non regular models which are known to be
difﬁcult to reverse by existing reverse engineering tools.
We applied the proposed obfuscation framework to two
application protocols (Modbus and HTTP). Various metrics
are presented to illustrate the signiﬁcant
increase of the
complexity of the obfuscated protocol binary compared to
the non-obfuscated code. It is also shown that the execution
time and memory overhead remains acceptable for a practical
deployment of the approach in operation.
This paper is organized as follows. Section II presents
basic background about protocol reverse engineering methods,
associated tools and inference models. It also discusses the
main challenges faced by reverse engineering analysts. Then,
Section III discusses some related work addressing obfuscation
techniques and outlines the main motivations and original
characteristics of our obfuscation techniques. Section IV and
Section V respectively present the architecture of the frame-
work we designed to implement our obfuscation technique and
a detailed description of the main transformations applied to
the message format speciﬁcation supported by this framework.
Section VI presents and justiﬁes some choices we made for
the implementation of the framework and Section VII presents
the different experiments we have carried out in order to assess
the relevance of our obfuscation technique. Then Section VIII
concludes and outlines some future work.
II. PROTOCOL REVERSE ENGINEERING (PRE)
Reverse engineering is the process of analyzing a subject
system to extract relevant knowledge or design information
about its components, their interrelationships and behavior,
and to create representations of the system based on the
extracted information [2]. Historically, it has initially targeted
hardware products and then its main concepts were applied to
software applications and communication protocols. Software
applications reverse engineering mostly applies to ”closed-
source” programs and usually requires to disassemble the
application binary with tools such as IDA [3] or radare2 [4].
In this paper we focus on communication protocols reverse
engineering (PRE). PRE is the process in which protocol
parameters, format, and semantics are inferred in the absence
of the formal protocol speciﬁcation [5]. It can be achieved
by focusing either on:
the vocabulary (types of messages
which can be exchanged),
the message format (encoding
language of message types) or on the protocol grammar
(encoding language of message exchanges). PRE is useful in
many domains such as interoperability, protocol simulation,
security audits or conformance testing. Unfortunately, it is also
useful for attackers to steal intellectual property or to make
counterfeit software. PRE also raised some legal concerns.
These are not discussed in this paper. The remainder of this
section presents: i) the different methods used to perform
communication protocols reverse engineering, ii) some state-of
the art PRE tools, and iii) the associated challenges.
Fig. 1. Protocol reverse engineering steps.
A. PRE methods
In order to reverse engineer a protocol, an analyst needs to
have access either to a network protocol execution trace, or
to the application binary. The analysis of the traces is carried
out by so-called ”network based inference” techniques. Binary
analysis, carried out by so-called ”application based inference”
techniques, focus on the instructions of the binary that parse or
generate messages. It can be done using static code analyses
or dynamic analyses if the binary can be properly executed to
trigger communications.
The reverse engineering activity is divided into several steps.
These steps are quite similar for both network based and
application based inference tools. They are summed up in
ﬁgure 1.
The ﬁrst step, called observation, is aimed at gathering raw
information resulting from the protocol execution. Probes are
placed to collect data the less noisy possible according to the
method used by the reverser. For instance, a network probe
monitors trafﬁc that is fully encapsulated in many protocols
(IP, TCP, etc.). On another side, a probe deployed in the
application, using a debugger, can dump messages without any
noise. If data are noisy, a preprocessing step is required. With
network traces, this preprocessing step consists in removing
the consequences of network protocol encapsulations, using
data sanitization and data aggregation. For instance, some
network traces that have been fragmented by the TCP layer
must be aggregated in order to retrieve messages. The last
step is dedicated to the inference process that begins by
the classiﬁcation of sanitized messages into different classes,
representing different message types. Finally, either a message
format inference is done on each message class, or a protocol
grammar inference is done on sequences of message types.
This last step is based on language learning algorithms.
B. PRE tools
Various surveys of protocol inference tools are available [6],
[5], [7]. Before 2004, PRE was mainly performed manually.
It was error prone and time consuming. In 2004, PI Project
PRE tool [8], [9] proposed a sequence alignment algorithm
for message classiﬁcation and message format inference based
on network traces. Shortly afterwards, several
tools were
developed using this algorithm while inference algorithms
based on regular languages were used to retrieve the protocol
grammar. For instance, ReverX [10] uses regular language
inference algorithm for both message format inference and
grammar inference. Netzob [11], [12] uses active inference to
guess the message semantics.
The number of application based inference tools is more
important. The main tools are FFE/x86 [13], Dispatcher [14],
[15], [16], Prospex [17] and MACE [18], [19]. FFE/x86
is based on a static analysis of the application to retrieve
messages format as a hierarchical ﬁnite state machine. Poly-
glot [20] introduces dynamic binary analysis for message for-
mat inference. This technique was widely used and improved
by following tools. Prospex measures the impact of message
processing on the system to classify the messages and infer
the protocol grammar with classic regular language learning
algorithms. MACE infers the protocol grammar based on a
symbolic execution using a regular model.
Almost all PRE tools rely on regular models to retrieve the
protocol speciﬁcation (message format and protocol grammar).
In addition, the message classiﬁcation step is important for a
coherent format inference.
C. Challenges
In the following, we focus on some of the challenges faced
during the protocol reverse engineering process, that we have
considered in our study to guide the selection of proposed
obfuscation approach.
1) Observation: The placement of probes to capture rel-
evant information required for protocol reverse engineering
is critical. When the application uses a cryptographic library,
most of the time, the interface between this library and the
core application is easy to locate and understand. So, it is
still possible through this interface to dump messages using
a debugger and hooks on the interface. Recent work [16],
[21] has introduced techniques to automatically identify the
cryptographic library and to perform PRE on encrypted pro-
tocols. Thus, making the placement of such probes difﬁcult for
a reverser will make the reverse engineering of message format
more complex. This objective can be fulﬁlled by ensuring
that the code used for the generation of the messages is not
easy to identify by the reverser. Serialization projects naturally
answer to this requirement as they provide an interface based
on accessors (setters and getters) to manipulate data stored in
an internal abstract representation.
2) Fields delimitation: When performing message format
inference, ﬁelds delimitation is generally based on a sequence
alignment algorithm and well known delimiters like ’\r\n’,
’\0’ or ’SP’. Thus, the PRE process will be more tedious if
the delimiters are removed. Furthermore, sequence alignment
algorithms are very efﬁcient when applied to messages of the
same types, as these messages have many sub-sequences in
common. If messages of the same type do not fulﬁll this
property, the classiﬁcation will be more complex.
3) Classiﬁcation: Classiﬁcation in PRE is mainly based on
similarity measures. It is a key step in PRE as the efﬁciency
of the inference depends on the quality of this classiﬁcation.
This quality can be degraded if 1) two messages of the same
type seem different or 2) if two messages of different type
seem very close. In the ﬁrst situation, the number of classes
obtained after the classiﬁcation exceeds the real number of
message types. In the second situation, the number of classes
is lower compared to the effective number of message types.
With a mix of the two approaches, the classiﬁcation is likely
to provide meaningless classes.
4) Inference models: To perform message format inference,
most PRE tools rely on regular models (automata, trees, etc),
that are possibly annotated to represent dependencies such as
a ﬁeld which is the length of another ﬁeld. Therefore, PRE
tools are likely to be less efﬁcient when the message formats
are not regular. The inference algorithm may not converge, or
it may lead to overﬁtting (the model accepts a message that
does not belong to the protocol) or underﬁtting (the model
doesn’t recognize messages that belong to the protocol).
III. OBFUSCATION BACKGROUND
The objective of a program obfuscation is to make it
”unintelligible” while preserving its functionality [22], [23],
[24]. It is implemented by means of a set of transformations
that are used to transform a component P (a software or
a communication protocol) into an equivalent component P’
(providing the same service) such that the behavior of P’ is less
understandable than the behavior of P, without having their
speciﬁcation. To obfuscate a communication protocol, these
transformations can be applied to the application implementing