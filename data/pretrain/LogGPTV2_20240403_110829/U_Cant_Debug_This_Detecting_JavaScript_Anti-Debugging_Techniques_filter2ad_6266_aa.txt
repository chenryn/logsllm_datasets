title:U Can't Debug This: Detecting JavaScript Anti-Debugging Techniques
in the Wild
author:Marius Musch and
Martin Johns
U Can’t Debug This: Detecting JavaScript 
Anti-Debugging Techniques in the Wild
Marius Musch and Martin Johns, TU Braunschweig
https://www.usenix.org/conference/usenixsecurity21/presentation/musch
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.U Can’t Debug This: Detecting JavaScript
Anti-Debugging Techniques in the Wild
Marius Musch and Martin Johns
TU Braunschweig, Germany
Abstract
1
Introduction
Through security contests such as Pwn2Own, we are con-
stantly reminded that no complex piece of software should
ever be considered secure. As we execute untrusted code in
our browser every day, browser exploits written in JavaScript
remain a constant threat to the security of our systems. In
particular, evasive malware that detects analysis systems and
then changes its behavior is a well-known problem.
However, there are also anti-debugging techniques that
interfere with the manual analysis of a website in a real
browser. These techniques try to prevent, or at least slow
down, any attempts at manually inspecting and debugging the
JavaScript code of a website. For example, such a technique
could constantly trigger breakpoints at random locations to
effectively hinder single-stepping while debugging the code.
More cunningly, it could also ﬁnd out whether the browser’s
integrated Developer Tools are open by using certain side-
channels available in JavaScript. With this knowledge, it is
possible to subtly alter or suppress any malicious behavior
while under analysis.
In this paper, we systematically explore this phenomenon.
To this end, we introduce 9 anti-debugging techniques and
discuss their advantages and drawbacks. We then conduct a
large-scale study on 6 of them, to investigate the prevalence
of these techniques in the wild. We ﬁnd that as many as 1 out
of 550 websites contain severe anti-debugging measures, with
multiple of these techniques active on the same site. Moreover,
we present a novel approach based on a deterministic website
replay and a comparison of JavaScript code coverage. The
approach can automatically detect the remaining 3 timing-
based anti-debugging techniques, which use side-channels
to learn if the DevTools are open. In a targeted study on
2000 websites with anti-debugging techniques, we discover
over 200 of them indeed execute different code when under
analysis.
In our modern, interconnected world, the Web platform is
one of, if not the main way our computers interact with the
outside world. We use our browsers to visit new websites
almost every day, some of which might not be trustworthy at
all. Nevertheless, we visit them and execute their JavaScript
code on our computers, while relying on the browser to keep
us safe. Yet browsers are incredibly complex applications,
e.g., in 2020 the Chromium browser had over 25M lines of
code [3]. Unsurprisingly, some of these lines have bugs that
can have severe security implications [e.g., 8–11]. Therefore,
detecting and analyzing JavaScript malware is a crucial task
to maintain the security of the Web platform.
Heavy obfuscation and the ability to generate new code
during runtime makes a fully static analysis of malicious
JavaScript largely infeasible. Therefore, effective detection of-
ten relies on a dynamic analysis or a combination of both [e.g.,
6, 7, 26, 43]. This then led to a shift towards evasive mal-
ware which abuses implementation differences between a real
browser and dynamic analysis systems, leading in turn to new
approaches to deal with such evasive techniques [25].
Yet one, so far, overlooked scenario is the manual analysis
of websites using a normal browser, since we can only combat
evasive malware deceiving our automated tools if we can man-
ually inspect and learn from it. Unfortunately, this scenario
opens up new paths for inventive attackers to interfere with
the analysis by creating anti-debugging techniques targeting
humans using real browsers.
Over the past few years, there were already a few reports of
such techniques being used for malicious purposes. For exam-
ple, in their 2018 paper on cryptojacking Konoth et al. [30]
discovered one particular script that stops with the mining of
cryptocurrency as soon as the browser’s integrated Developer
Tools are opened. More recently, in June 2020 the security
company Sansec found online stores infected with a script
that records credit card information while it is entered and
then sends it to the attacker’s servers. However, if at any point
while visiting an affected domain someone opens the Dev-
USENIX Association
30th USENIX Security Symposium    2935
Tools, the malicious script detects this, stops sending out its
data, and sets a cookie to never activate the skimming for this
particular user again [44]. These occurrences demonstrate that
some attackers are aware of these anti-debugging techniques
and already abuse them in the wild to thwart with manual
analyses.
In this paper, we introduce 9 different anti-debugging tech-
niques and present two studies on this phenomenon. In our
large-scale study of the 1 million most popular websites, we
investigate the prevalence of 6 basic techniques, like disabling
the console or constantly triggering breakpoints to hinder an
inspection. We ﬁnd that their prevalence varies widely be-
tween the different techniques themselves, their aggressive-
ness (a few vs. 100 breakpoints), their distribution vectors
(ﬁrst vs. third-party code), and their presence on the site (front
vs sub-page). Moreover, we also observe that these techniques
are more prevalent on certain website categories related to
suspicious, illegal, or outright malicious content.
We then follow up with a second study of the 2000 sites
with the highest severity of these basic techniques. In this
targeted study, we investigate the presence of 3 sophisticated
techniques, which utilize timing side-channels to detect at-
tempts at analyzing the website. To detect these elusive tech-
niques, we use a generic approach that is based on measuring
code coverage during multiple, deterministic replays of the
same page. This approach of comparing executions recorded
in multiple environments is a proven concept from the area
of malware detection in native executables [e.g., 2, 28, 34].
However, we instead use this idea to replay a whole website’s
code to reveal anti-debugging techniques written in JavaScript
which target a human analyst. In this study, we ﬁnd that about
12% of these suspicious sites execute different code under
analysis.
To summarize, we make the following contributions:
• Collection and systematization of 9 anti-debugging tech-
niques
• Large-scale study of 6 basic techniques with our auto-
mated framework to measure their prevalence and sever-
ity in the wild
• Targeted study of 3 sophisticated techniques using a
generic approach based on deterministic web page replay
and code convergence
2 Background and Scenario
This section brieﬂy describes how to inspect and debug
JavaScript code in a browser, followed by the general sce-
nario and what we consider in and out of scope for this paper.
2.1 Debugging JavaScript Code
While previously developers and malware analysts might have
relied on browser extensions such as FireBug [41] to inspect a
website, nowadays all browsers ship with powerful, integrated
Developer Tools [17], or DevTools for short. At the time of
writing the DevTools of Chromium shipped with 24 different
tabs, each focusing on a different feature. In the following, we
will brieﬂy introduce the four most useful of these features.
The elements tab shows the DOM tree of the currently
displayed page. It automatically updates all elements if
JavaScript code manipulates them and all elements can also
be changed by the user and directly affect the rendered page.
The sources tab not only allows the inspection of the whole
client-side code but also includes a full debugger. With it,
the user can set breakpoints anywhere, step through the code,
inspect the call stack and variable scopes, and even change
the value of variables on the ﬂy. The console tab acts like
an interactive shell, which allows you to execute arbitrary
JavaScript code in the top-level scope of the currently loaded
page. If execution is currently suspended at a breakpoint, all
code executed in the console will run in the scope of the
breakpoint’s location instead. The network tab, like the name
suggests, allows full inspection of all network trafﬁc including
the headers and timing data. On top of that, the DevTools offer
many advanced features like measuring site performance with
a stack-based proﬁler, creating a heap snapshot to investigate
memory leaks, and the ability to measure and inspect code
coverage.
Using any other analysis tool that is not part of a browser,
e.g., static analysis or executing a single script in isolation is
usually not an option if one wants to obtain reliable results,
due to multiple reasons: First of all, JavaScript code written
for the Web expects many objects that are not part of the
language speciﬁcation, like document or location. Moreover,
scripts often load additional code on the ﬂy, e.g., one particu-
lar script might generate code for an iframe with a URL as the
source and add that to the DOM. The browser then requests
the content for that iframe over the network, which might con-
tain additional script code which then again loads additional
code via an XMLHttpRequest. Previous research has shown
that such patterns of deep causality trees in script inclusions
are a common occurrence today [31, 32]. Only a real browser
is able to correctly handle the inherent complexity of modern
Web applications and thus only a real browser can be used to
accurately inspect and analyze JavaScript code on the Web.
2.2 Threat Model and Scope
Throughout this paper, we consider the following scenario: A
user, also referred to as the analyst, manually visits a given
website in a real browser to analyze and interact with the
website’s code. In particular, the user intends to browse the
source code of that website, set breakpoints and step through
2936    30th USENIX Security Symposium
USENIX Association
the code, and inspect variables and functions. On the other
hand, the website does not want to be analyzed and contains
evasive measures to detect and hinder or, at least, slow down
and deter any attempts at inspection.
We consider the browser’s integrated DevTools the tool of
choice for the user to achieve their analysis goals. As pre-
viously outlined, the DevTools are not only full of useful
features, but with their integration into the browser also the
only way to correctly execute the JavaScript code in the ﬁrst
place. Moreover, using them also avoids the problem of eva-
sive malware potentially detecting the inspection by noticing
it does not run in a real browser.
In scope
In general, the underlying problem in this scenario
is that the analyst can not fully trust the capabilities used dur-
ing a live inspection, e.g., any logged output during execution,
as the website might have manipulated the logging functional-
ity on-the-ﬂy. Furthermore, if the website is able to detect the
presence of the inspection, it could also alter or completely
suppress any malicious activity to appear benign during anal-
ysis. In this paper, we investigate all these techniques that
affect the dynamic analysis of a website, like altering built-in
functions or detecting the presence of a debugger. We refer to
such techniques as anti-debugging techniques from now on.
Out of scope Since we only focus on techniques that are
affecting the code at runtime, all static code transformation
techniques, in particular obfuscation, are out of scope for this
paper. While these can certainly be a powerful tool to greatly
slow down manual analysis, especially when combined with
some of the anti-debugging techniques introduced in the fol-
lowing, these static techniques have already been extensively
studied in the past [e.g., 4, 14, 61, 62]. Similarly, all tech-
niques that do not affect a real browser but rather aim to break
sandboxes or other analysis systems, e.g., by intentionally us-
ing new features or syntax not yet supported by these systems,
are out of scope as well.
3 Basic Anti-Debugging
In this section, we will introduce 6 basic anti-debugging tech-
niques (BADTs) with three different goals: Either to outright
impede the analysis, or to subtly alter its results, or to just
detect its presence. During its introduction, we will give each
technique a short name, e.g., ModBuilt, by which it will be
referenced throughout the remainder of the paper and will
also provide a link to a mention of this technique on the
Web. Additionally, we provide a testbed1 with one or two
exemplary implementations for each technique so that the
interested reader can experiment with each technique while
reading this chapter. Finally, we will also brieﬂy describe
possible countermeasures for each BADT to give a better
impression of how effective they are.
1Available at https://js-antidebug.github.io/
Impeding the analysis
3.1
These ﬁrst three techniques all just try to impede attempts
at debugging the website. They are generally not very effec-
tive but still might cause an unsuspecting user to give up in
frustration.
Preventing Shortcuts (SHORTCUT) Before any meaning-
ful work can begin, the analyst ﬁrst needs access to the full
client-side code of the website and thus the following BADT
simply tries to prevent anyone from accessing that source
code. The quickest way to open the DevTools is by using
a keyboard shortcut. Depending on the browser and plat-
form there are multiple slightly different combinations to
consider, e.g., for Chrome on Windows F12, Ctrl+Shift+I,
and Ctrl+Shift+J all work. As JavaScript has the ability to
intercept all keyboard and mouse events as long as the website
has the focus, these actions can be prevented by listening for
the respective events and then canceling them, as shown in
Figure 1 [52]. This obviously can not prevent someone from
opening the DevTools by using the browser’s menu bar.
Besides the advanced DevTools, common browsers also
have a simple way to just show the plain HTTP response of
the main document. This can usually be accessed by right-
clicking and selecting "View page source" from the context
menu, or directly with the Ctrl+U shortcut. Again, both these
actions can be prevented by listening for these events and then
canceling them. There are many ways to easily bypass this,
e.g., by preﬁxing the URL with the view-source: protocol or
opening the sources panel of the DevTools.
window.addEventListener("keydown", function(event){
if (event.key == "F12") {
event.preventDefault(); return false;
}});
Figure 1: Disabling the F12 shortcut
Triggering breakpoints (TRIGBREAK) The debugger
statement is a keyword in JavaScript that has the same ef-
fect as manually setting a breakpoint [12]. As long as no
debugger is attached, i.e., the DevTools are closed, the state-
ment has no effect at all. This behavior makes the statement
a perfect tool to only interfere with debugging attempts. The
technique can be as simple as just calling the debugger in a
fast loop over and over again. As a simple measure to counter
this technique, the DevTools of popular browsers have the
option to "Never stop here", effectively disabling only the
debugger statements while still allowing breakpoints in gen-
eral. However, many variations exist which make it harder
to reliably block it, e.g., constantly creating new anonymous
functions on the ﬂy instead of always hitting the breakpoint
at the same location [46]. On the other hand, this can still be
countered by speciﬁc code snippets that remove all debugger
statements on the ﬂy, like the Anti Anti-debugger script [60]
for the Greasemonkey browser extension [1].
USENIX Association
30th USENIX Security Symposium    2937
Clearing the Console (CONCLEAR) While the sources
panel for the DevTools offers the ability to inspect and change
variables in the scopes of the current breakpoint, the console
can be very useful in this regard as well. For example, it al-
lows one to easily compare two objects or to run a simple
statement at the current location of the suspended execution.
However, it is possible to make the console unusable by con-
stantly calling the console.clear function [51]. If done fast
enough, this makes it near impossible to inspect the output
and thus the value of variables during runtime without setting
breakpoints with the debugger. However, this technique can
be circumvented by enabling "Preserve log" in the DevTools
options or by disabling the clear function by redeﬁning it to
an empty function.
3.2 Altering the analysis
Instead of only blatantly trying to impede the analysis, the
following technique can also subtly alter what an analyst
observes during debugging attempts.
Modifying Built-ins (MODBUILT) As JavaScript allows
monkey patching, all built-in functions can be arbitrarily re-
deﬁned. For instance, a popular music streaming service for
a while had modiﬁed the alert function, which many bug
bounty hunters use to test for XSS, to secretly leak all client-
side attempts to trigger an XSS attack to their back-end, as
shown in Figure 2.
// Wrapping funcs in a naive attempt to catch
(cid:44)→
externally found XSS vulns
(function(fn) {
window.alert = function() {
var args = Array.prototype.slice.call(arguments);
_doLog('alert', args);
return fn.apply(window, args);
};
}(window.alert));
Figure 2: This code including the comment was found on
spotify.com in 2018 [59]. The _doLog function reports the
current URL along with a full stack trace to their backend any
time the alert function is called.
As this example demonstrates, the possibilities to redeﬁne
built-in functions and objects to make them behave differently
are basically endless. Furthermore, there are many legitimate
use cases, like polyﬁlls that provide a shim for an API not
supported by older browsers. Since we are only interested in
functions that a human analyst is likely to use in the DevTools
console, we focus our search on modiﬁcations to the console,
String and JSON objects, and their respective functions. Fig-
ure 3 shows a somewhat contrived example of how malicious
code could hide itself [16]. Note that this technique can also
be used to impede the analysis instead, e.g., by redeﬁning
all functions like log and info to an empty function [46, 49].
A possible countermeasure is to save a reference to every
native function one intends to use before executing any of the