149,040
1,339,084
262,020
406,650
582,930
790,860
1,030,440
1,301,670
9,436
19,031
47,816
95,791
12,844
26,079
68,136
146,071
233,806
1,122,351
59,027
83,891
115,947
303,027
428,691
598,987
608,027
859,691
1,202,787
32
1,741
20,290
202,772
405,640
608,668
47,583
220,825
905,728
65
5,440
35,776
20,480
175,936
45,120
436,916
79,360
123,200
176,640
239,680
312,320
394,560
3,003
6,038
15,143
30,318
4,196
8,520
22,260
47,720
76,380
366,600
19,342
27,490
38,006
99,302
140,490
196,366
199,252
281,740
394,316
654
673
729
714
604
970
705
717
680
686
639
598
637
635
733
660
899
623
646
675
858
660
707
735
788
746
649
666
639
724
614
1,150
666
663
677
690
653
700
688
646
1,017
8
127
469
2,715
6,275
9,774
838
2,702
18,173
15
279
519
611
1,689
1,644
3,790
1,477
2,205
3,003
4,557
5,467
8,025
86
115
145
291
219
367
620
995
1,279
6,267
539
723
1,084
1,517
2,170
3,039
2,934
4,504
6,918
870
796
982
1,376
855
942
771
1,001
835
782
683
673
719
823
993
1,112
803
1,018
840
712
828
719
712
1,095
774
912
744
809
674
675
807
884
733
725
734
830
789
913
802
875
845
9
175
849
4,447
6,983
11,037
1,088
4,243
21,008
16
346
644
812
2,810
2,287
4,794
2,240
3,221
4,108
6,127
6,966
9,262
104
143
215
353
324
648
802
1,345
1,969
7,799
914
932
1,472
1,935
3,054
3,750
3,975
5,496
8,205
(cid:63)) MBI(g, m, i): Memory bounded interpreter with g gates and m bits memory where i bits are initialized by input.
Table 1: Experimental results: circuit sizes (number of gates and number of gates other than XORs) and
timing results for the preparation and evaluation phases (in ms).
First we consider the complexity of one addition and one
multiplication operation, see Table 1. While specifying one
addition or multiplication of two unsigned integers can be
done by a single statement in C, the corresponding addi-
tion circuit already consists of 5 · 32 = 160 gates, of which
32 are non-XOR gates; a multiplication even requires 6, 223
gates where 1, 741 are non-XOR gates. While the number
of non-XOR gates is optimal for the addition (e.g. com-
pared to a hand-optimized circuit), it is possible to use bet-
ter optimized versions for the multiplication. For example,
[19] reports a multiplication circuit consisting of 1, 729 non-
XOR gates implementing a method by Karatsuba [22]. Since
many arithmetic operations can be expressed in one single
line of a C program, the circuits corresponding to even small
programs can be huge.
Circuits for programs that perform several arithmetic op-
erations sequentially essentially scale linear in the number
of operations. To test this, we created programs contain-
778ing up to 3000 random arithmetic operations, comprising of
90% additions and 10% multiplications with varying num-
bers of input and output variables. Table 1 depicts the
results. The largest circuit consists of more than 2.2 mil-
lion gates; still, the time it takes to evaluate the circuit
(approximately 13 seconds) is rather moderate. This shows
that common medium-size programs consisting of arithmetic
operations—which occur, for example, in standard spread-
sheet computations—can be implemented in practical appli-
cations with acceptable performance.
As a second test case, we consider the problem of imple-
menting the S × S matrix multiplication obliviously; the
CBMC-GC implementation is shown in Figure 1. Compil-
ing the program using CBMC-GC for 3 × 3 matrices results
in a circuit with 170, 875 gates, while 8× 8 matrices already
require more than 3.2 million gates; still, an 8 × 8 multipli-
cation requires only 23 seconds to ﬁnish. Again, runtimes of
the program for diﬀerent values of S are given in Table 1.
#define S 2 // size of matrices
int INPUT_A_a[S][S];
int INPUT_B_b[S][S];
int OUTPUT_c[S][S];
void multiply()
{
int i, j, k;
for (i = 0; i  0; i--) {
for (j = 0; j  tmp2) {
INPUT_A_a[j] = tmp2;
INPUT_A_a[j + 1] = tmp1;
}
}
}
OUTPUT_median = INPUT_A_a[MEDIAN];
}
int b[K]; // temporary array for mergesort
void mergesort(int l, int r) {
int i, j, k, m;
if (r > l) {
m = (r + l)/2;
mergesort(l, m);
mergesort(m + 1, r);
for (i = m + 1; i > l; i--)
b[i - 1] = INPUT_A_a[i - 1];
for (j = m; j > 1) & 0x55555555);
x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
x = (x + (x >> 4)) & 0x0f0f0f0f;
x += x >> 8;
x += x >> 16;
return x & 0x7f;
}