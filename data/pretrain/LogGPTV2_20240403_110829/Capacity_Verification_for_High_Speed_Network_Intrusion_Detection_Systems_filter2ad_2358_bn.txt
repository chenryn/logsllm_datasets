the following quad: 1. The task speciﬁcation has to determine the class of sce-
narios that lead to the intended result. Known data speciﬁes the information
about attacked computer network (host) known for a malefactor. Attack object
corresponds to the optional variable in attack goal speciﬁcation and are speciﬁed
in the following ways:
1. “ ” — the attack object is not speciﬁed for the malefactor’s intention “Re-
connaissance” (R);
2. If the intention corresponds to the attacks like CVR or IVR then the attack
object is speciﬁed as follows: [Account,] [Process {/},] [File {/},] [Data in transit {/}], where Account is object’s account, Process is
running process(es), File is ﬁle(s) that is the attack target(s) to get, Data
in transit is data transmitting, where the variables in [ ] are optional, the
repeatable variables are placed in {}, and symbol “/” is interpreted as “OR”;
3. “All” — all resources of the host (network);
4. “Anyone” — at least one of the resources of the host (network).
3 “Computer Network Attacks” Ontology
It is well known that the development of a model of an information system
must start with the development of the domain ontology. The ontology is the set
of notions structured in terms of relationships existing over them. The ontology
has to be abstracted from speciﬁcs of the implementation issues. A peculiarity of
the particular domain is reﬂected in data structures and algorithms interpreting
ontology notions and relationships. Although at present a lot of work is being
performed in order to develop ontologies [33], but there are no such works in the
network attacks domain.
The developed ontology comprises a hierarchy of notions specifying activities
of malefactors directed to implementation of attacks of various classes in diﬀerent
levels of detail. In this ontology, the hierarchy of nodes representing notions
1 In the software tool this quad is used for speciﬁcation of simulation task by user.
Attacks against Computer Network
225
splits into two subsets according to the macro- and micro-levels of the domain
speciﬁcations. All nodes of the ontology of attacks at the macro- and micro-
levels of speciﬁcation are divided into the intermediate (detailable) and terminal
(non-detailable).
The notions of the ontology of an upper level can be interconnected with the
corresponding notions of the lower level through one through three kinds of re-
lationships: (1) “Part of ” that is decomposition relationship (“Whole”–“Part”);
(2) “Kind of ” that is specialization relationship (“Notion”–“Particular kind of
notion”); and (3) “Seq of ” that is relationship specifying sequence of operation
(“Whole operation”–“Sub-operation”). High-level notions corresponding to the
intentions form the upper levels of the ontology. They are interconnected by
the “Part of ” relationship. Attack actions realizing malefactor’s intentions are
interconnected with the intentions by “Kind of ” or “Seq of ” relationship. The
developed ontology includes the detailed description of the network attack do-
main in which the notions of the bottom level (“terminals”) can be speciﬁed in
terms of network packets, OS calls, and audit data.
Let us look at a high-level fragment of the developed ontology (Fig. 2). At the
upper-level of the macro-speciﬁcation of attacks, the notion of “Network Attack”
(designated by A) is in the “Part of ” relationship to the “Reconnaissance” (R)
and “Implantation and threat realization” (I). In turn, the notion R is in the
“Part of ” relationship to the notions IH, IS, IO, CI, RE, U E, and ABE. The
notion I is in the “Part of ” relationship to the notions GAR, EP , GAD, T R,
CT , and CBD. In the next (lower) level of the hierarchy of the problem domain
ontology, for example, the notion IH is in the “Kind of ” relationship to the
notions “Network Ping Sweeps” (DC) and “Port Scanning” (SP IH). At that,
the notion “Network Ping Sweeps” (DC) is the lowest (“terminal”) notion of
Fig. 2. Macro-level fragment of the domain ontology “Computer network attacks”
226
V. Gorodetski and I. Kotenko
the macro-level of attack speciﬁcation, and the notion “Port Scanning” (SP IH)
is detailed through the use of the “Kind of ” relationship by a set of “terminal”
notions of the macro-level of attack speciﬁcation.
The “terminal” notions of the macro-level are further detailed at the micro-
level of attack speciﬁcation, and on this level they belong to the set of top-level
notions detailed through the use of the three relationships introduced above.
Thus, for example, the notion “Network Ping Sweeps” (DC) is in the “Kind of ”
relationship with the notions “Network Ping Sweeps with ping ” (P I), “Network
Ping Sweeps with Ping Sweep” (P SW ), etc., which, in turn, correspond to the
names of utilities that perform “Network Ping Sweeps”.
In turn, each of these notions, e.g. “Network Ping Sweeps with Ping Sweep”
(P SW ), is in the “Seq of ” relationship to the “ICMP ECHO REQUEST” (IER)
notions. The “ICMP ECHO REQUEST” (IER) notions correspond to network
packets that are directed at the host (or the network) — the target of the attack.
In micro speciﬁcations of the attacks ontology, besides the three relations
described (“Part of ”, “Kind of ”, “Seq of ”), the relationship “Example of ” is
also used. It serves to establish the “type of object — speciﬁc sample of object”
relationship. In Fig. 3, this type of relationship is used to establish the connection
of
the
echo-request
between
the
protocol ICMP (“ICMP ECHO RE-
QUEST”) and its speciﬁc implementa-
tion speciﬁed, for example, as a message
  > :
icmp: echo request, where  —
time stamp,  — source IP
address,  — source port,
 — destination IP address.
Fig. 3. Micro-speciﬁcations of the
domain ontology “Computer net-
work attacks”
4 Formal Framework for Attacks Speciﬁcation
Being based on the above explanation of the attack modeling strategy, deﬁnition
of basic notions of attack speciﬁcation and structure of the basic malefactors’
intentions and also on the malefactors’ actions, the following basic assumptions
and statements are used below in the formal attack speciﬁcation:
1. Each attack intention can be considered as a sequence of symbols in terms
of lower-level intentions. These sequences can be formally considered as
“words” of a language, which can be generated by a formal grammar. Thus,
each node of the ontology (see Fig. 2) can be speciﬁed in terms of a formal
grammar generating more detailed attack speciﬁcation;
2. Analysis of a wide spectrum of formal grammar-based speciﬁcations of at-
tack intentions justiﬁed that attack intentions can be adequately speciﬁed
in terms of LL(2) context-free grammar;
3. Speciﬁcation of uncertainties inherent to the attack development can be done
in probabilistic terms through attributes and functions given over them.
Attacks against Computer Network
227
Thus, in conjunction with the above conclusions the resulting framework for
attack speciﬁcation can be restricted to a stochastic attribute grammar;
4. Each node (grammar) of the ontology (like shown in Fig. 2) is intercon-
nected with the upper level node (grammar) and this interconnection can
be speciﬁed through “grammar substitution” operation [15] in which a ter-
minal symbol of the parent node is considered as the axiom of the grammar
corresponding to its child node.
5. Each malefactor’s action has to be followed by an attacked network response.
The rest of this section presents the above summary in formal terms.
Thus, mathematical model of attack intentions is determined in terms of a
set of formal grammars specifying particular intentions interconnected through
“substitution” operations: MA =, where {Gi} — the formal
grammars, {Su} — the “substitution” operations.
Every formal grammar is speciﬁed by quintuple G =,
where G is the grammar name, VN is the set of non-terminal symbols (that are
associated with the upper and the intermediate levels of an attack scenario),
VT is the set of its terminal symbols (that designate the steps of a lower-level
attack scenario), S ∈ VN is the grammar axiom (an initial symbol of an attack
scenario), P is the set of productions that specify the specialization operations
for the intention through the substitution of the symbols of an upper-level node
by the symbols of the lower-level nodes, and A is the set of attributes and
algorithms of their computation.
Attribute component of each grammar serves for several purposes. The ﬁrst
of them is to specify randomized choice of a production at the current inference
step if several productions have the equal left part non-terminals coinciding with
the ”active” non-terminal in the current sequence under inference. These prob-
abilities are recalculated on-line subject to the prehistory of attack development
and previous results of attack. So, in order to specify a stochastic grammar,
each production is supplemented with a speciﬁcation of the probability of the
rule being chosen in the inference process.
Also the attribute component is used to check conditions determining the
admissibility of using a production at the current step of inference. These con-
ditions depend on attack task speciﬁcation, attacked computer network (host)
response and also on the malefactor’s previous actions. These conditions may
depend on compatibility of malefactor’s actions and attacked network or host
properties, e.g., OS type and version, running services, security parameters, etc.
These are the examples of host parameters, which may form production con-
ditions: (1) OS types — Unix, Linux, Win (all Windows OS), 9x (95, 98, Me),
NT (NT, 2000), SunOS, Solaris, etc.; (2) running applications — e.g., PWS —
an initial version of Microsoft’s Personal Web Server is running; (3) protection
parameter — CFP (shared ﬁles and printers), NS (Null Sessions), PA (Password
is Absent), RR (Remote Registry), etc.; (4) additional parameters — AS (Access
to Segment of LAN), THD (Trusted Host Data), etc.
If it is necessary to specify several parameters, operations “OR” (signiﬁed by
“,”) and (or) “AND” (“.”) are used. Relationships of ownership and membership
Thus,
V. Gorodetski and I. Kotenko
228
are also taken into account, e.g. SunOS ∈ Unix; {95, 98, Me} ⊂ 9x; {95, 98, Me,
NT, 2000} ⊂ Win, 9x ∈ Win, etc.
in general case, the grammar production is recorded as follows:
[(U)]X → α (Prob), where U — the condition for upholding the rule, [ ] —
an optional element, X — non-terminal symbol, α — a string of terminal and
non-terminal symbols, Prob — the initial probability of the rule.
Let us explain by example the operation of grammar substitution and its role
in the formal model of attacks. Let a ∈ VT (Gi) be a terminal symbol of the
grammar Gi in the sequence of symbols generated by the grammar Gi, a is a
node of the ontology mapped to the grammar G(a). Symbol a denotes the name
of a particular intention or attack action and G(a) is the grammar generating
variants of the a implementation. Let also X be the axiom of the grammar G(a).
Then, operation Su(a) of substitution G(a) in place of symbol a is speciﬁed in the
form Su(a) : {a → G(a)}. Semantics of this operation is that in place of symbol
a in already generated sequence any “word” generated by grammar G(a) can be
placed. In fact, this operation corresponds to a step towards the more detailed
speciﬁcation of an attack scenario.
When the micro speciﬁcations are used for modeling of attacks, it is necessary
to use the ontology nodes of the lowest (terminal) level and substitute speciﬁc
values for the variables that determine the attack task speciﬁcation.
For example, let us suppose a ping attack is being implemented using “Net-
work Ping Sweeps with Ping Sweep” (P SW ). P SW is in the “Seq of ” rela-
tionship to the “ICMP ECHO REQUEST” (IER) network packets that are
directed at the target host (network). In micro speciﬁcations of attacks the
IER node is in the “Example of ” relationship to its speciﬁc implementation
deﬁned as the following message:   > : icmp:
echo request, where  — time stamp,  — source IP address,
 — source port,  — destination IP address.
The grammar that speciﬁes P SW may look like this: VN = {P SW, P SW 1},
VT = {IER}, S = {P SW}, P = {P SW → IER P SW 1 (1), P SW 1 → IER P SW 1
(0.2), P SW 1 → IER (0.8)}.
Let us suppose a ping attack with “Ping Sweep” is being implemented from
host 244.146.4.20 on the hosts of the network 198.24.15.0 in the time interval
[0:43:10.094644, 00:43:16.036735]. Let us suppose that the string “IER IER” was
created as a result of using the PSW grammar. Then, based on the “Example
of ” relationship, the symbols of this string should generate two messages:
  > : icmp: echo request,
  > : icmp: echo request.
After the parameterization  = 00:43:10.094644,
= 244.146.4.20,  = 198.24.15.255,
= 00:43:16.036735, these messages should look like these:
00:43:10.094644 244.146.4.20>198.24.15.255:icmp:echo request and
00:43:16.036735 244.146.4.20>198.24.15.255:icmp:echo request,
which correspond to the icmp-packets sent to the network hosts 198.24.15.0
Attacks against Computer Network
229
(since the X.X.X.255 address is speciﬁed in the icmp-packets, the packets are
sent to all the hosts of the speciﬁed networks).
The development of the family of grammars {Gi} is conducted in the fol-
lowing order: (1) First, for each basic malefactor’s intention, its own family of
enclosed attributed stochastic context-free grammars is constructed; (2) Second,
these families of grammars are transformed into the generalized grammars that
correspond to each non-terminal node of ontology for all of the intentions.
It is assumed that if a value of the production condition is not determined at
the moment of production selection all available productions may be used at the
respective step of attack simulation. Also it is supposed that the terminal ac-
tions generated by productions are associated with the probabilities of successful
realization of those actions (attacks) and the host response.
Let us consider, for example, the grammars for the intention “Users and
{(Win) UE → UE1(1), (NS)UE1 →
(0.7),
A1
A1 → R
groups Enumeration” (U E):
Level “Network Attack”: VN = {A, A1}, VT = {R}, S = {A},
P = {A → A1
(1), A1 → R
(0.3)};
Level “Reconnaissance”: VN = {R, R1}, VT = {UE}, S = {R},
P = {R → R1 (1), R1 → UE (0.7), R1 → UE R1 (0.3)};
Level “Users and groups Enumeration”
VN = {UE, UE1, UE2, UE3, UE4}, S = {UE},
VT = {DNNT, EUE, PIUD, IAUS, SNMPE, FUE, UTFTP},
Pfor Windows 9x,Me,NT,2000
UE1 → SNMPE(0.25), UE1 → SNMPE UE1 (0.05), (NS)UE1 → UE2 UE1
(0.05), (&)UE2 → CNS UE3(1), UE3 → DNNT (0.2), UE3 → DNNT UE4
(0.05), UE3 → IAUS(0.35), UE3 → EUE(0.2), UE3 → PIUD (0.2),
UE4 → DNNT UE4(0.1), UE4 → DNNT(0.9)},
Pfor Unix/Linux = {(Unix, Linux) UE → UE1(1), UE1 → FUE(0.3),
UE1 → SNMPE(0.2), UE1 → UTFTP(0.1), UE1 → FUE UE1(0.1),
UE1 → SNMPE UE1(0.1), UE1 → UTFTP UE1(0.2)};
UE2(0.65),
=
Level “Identifying Accounts with user2sid/sid2user”:
VN = {IAUS, IAUS1, IAUS2}, VT = {ISU, IAS}, S = {IAUS},
P = {(NT) IAUS → IAUS1 (1), (&) IAUS1 → ISU IAS (0.8),
IAUS1 → IAUS1 IAUS2 (0.2), (&) IAUS2 → ISU IAS (1)}.
In this set of grammars the following denotations are used: A — Network At-
tack; R — Reconnaissance; UE — Users and groups Enumeration; DNNT — Dumping
the NetBIOS Name Table with nbtstat and nbtscan; EUE — Enumerating Users with
enum; PIUD — Providing Information about Users with DumpSec (DumpACL); IAUS —
Identifying Accounts with user2sid/sid2user; SNMPE — SNMP Enumeration with sn-
mputil or IP Network Browser; FUE — Finger Users Enumeration; UTFTP — Use of
Trivial File Transfer Protocol for Unix enumerating by stealing /etc/passwd and (or)
/etc/hosts.equiv and (or) ˜/.rhosts; ISU — Identifying SID with user2sid; IAS — Identi-
fying Account with sid2user using user’s RID; A1, R1, UE1, UE2, UE3, UE4, IAUS1,
IAUS2 — auxiliary symbols.
Algorithmic interpretation of the attack generation speciﬁed as formal gen-
eralized grammars is implemented by a family of state machines. The basic
elements of each state machine are states, transition arcs, and explanatory texts
230
V. Gorodetski and I. Kotenko
for each transition. States of each state machine are divided into three types:
ﬁrst (initial), intermediate, and ﬁnal (marker of this state is End). The initial
and intermediate states are the following: non-terminal, those that initiate the
operation of the corresponding nested state machines; terminal, those that in-
teract with the host model; auxiliary states. Transition arcs are identiﬁed with
the productions of grammars. The model of each state machine is set by specify-
ing the following elements: diagram; main parameters; parameters of transitions
that determine the stochastic model of the state machine for diﬀerent relevant
intentions; executable scripts; transition conditions.
5 Formal Model of the Attacked Computer Network
The attack development depends on the malefactor’s “skill”, information re-
garding network characteristics, which he/she possesses, some other malefactor’s
attributes [39], security policy of the attacked network, etc. An attack is devel-
oping as interactive process, in which the network is reacting on the malefactor’s
action. Computer network plays the role of the environment for attacker, and
therefore its model must be a part of the attack simulation tool.
The peculiarity of any attack is that the malefactor’s strategy depends on the
results of the intermediate actions. This is the reason why it is not possible to
generate the complete sequence of malefactor’s actions from the very beginning.
The malefactor’s action has to be generated on-line in parallel with the getting
reaction from the attacked network. The proposed context-free grammar syntax
provides the model with this capability. At each particular step of inference, it
generates no more than single terminal symbol that can be interpreted by the
computer network model as a malefactor’s action. The network returns the value
of the result (success or failure). The model of attacker receives it and generates
the next terminal symbol according to the attack model and depending on the
returned result of the previous phase of the attack.
Model of the attacked computer network is represented as quadruple M A =, where MCN is the model of the computer network