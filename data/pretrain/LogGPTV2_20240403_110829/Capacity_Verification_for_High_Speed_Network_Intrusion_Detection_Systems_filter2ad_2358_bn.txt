### Task Specification and Attack Object

1. **Task Specification:**
   - The task specification must define the class of scenarios that lead to the intended result.
   - Known data specifies information about the attacked computer network (host) that is known to the attacker.
   - The attack object corresponds to an optional variable in the attack goal specification and can be specified in the following ways:

2. **Attack Object Specification:**
   - **" " (Empty):** The attack object is not specified for the attacker's intention of "Reconnaissance" (R).
   - **CVR or IVR Intention:** If the intention corresponds to attacks like CVR (Compromise, Violate, or Remove) or IVR (Introduce, Violate, or Remove), the attack object is specified as follows: `[Account,] [Process {/},] [File {/},] [Data in transit {/}]`. Here, `Account` refers to the target account, `Process` refers to running processes, `File` refers to the files targeted for acquisition, and `Data in transit` refers to data being transmitted. The variables in `[ ]` are optional, and the repeatable variables are placed in `{ }`, with the symbol `/` interpreted as "OR".
   - **"All":** All resources of the host (network).
   - **"Anyone":** At least one of the resources of the host (network).

### Computer Network Attacks Ontology

The development of a model for an information system typically begins with the creation of a domain ontology. An ontology is a structured set of concepts and their relationships, abstracted from specific implementation details. While significant work has been done on developing ontologies, there is a gap in the domain of network attacks.

#### Developed Ontology
- **Hierarchy of Notions:** The developed ontology includes a hierarchy of notions that specify the activities of attackers in implementing various classes of attacks at different levels of detail.
- **Macro- and Micro-Level Specifications:** The ontology is divided into two subsets: macro-level and micro-level. Nodes at both levels are further categorized into intermediate (detailable) and terminal (non-detailable) nodes.
- **Relationships:**
  - **"Part of":** Decomposition relationship ("Whole"–"Part").
  - **"Kind of":** Specialization relationship ("Notion"–"Particular kind of notion").
  - **"Seq of":** Relationship specifying the sequence of operations ("Whole operation"–"Sub-operation").

#### High-Level Fragment
- **Upper-Level Macro-Specification:**
  - **"Network Attack" (A):** In a "Part of" relationship with "Reconnaissance" (R) and "Implantation and Threat Realization" (I).
  - **"Reconnaissance" (R):** In a "Part of" relationship with IH, IS, IO, CI, RE, UE, and ABE.
  - **"Implantation and Threat Realization" (I):** In a "Part of" relationship with GAR, EP, GAD, TR, CT, and CBD.
- **Lower-Level Macro-Specification:**
  - **IH (Information Harvesting):** In a "Kind of" relationship with "Network Ping Sweeps" (DC) and "Port Scanning" (SPIH).
  - **"Network Ping Sweeps" (DC):** A terminal notion at the macro-level.
  - **"Port Scanning" (SPIH):** Detailed through the "Kind of" relationship by a set of terminal notions at the macro-level.

#### Micro-Level Specifications
- **Further Detailing:**
  - Terminal notions at the macro-level are further detailed at the micro-level.
  - For example, "Network Ping Sweeps" (DC) is in a "Kind of" relationship with "Network Ping Sweeps with ping" (PI) and "Network Ping Sweeps with Ping Sweep" (PSW).
- **Additional Relationships:**
  - **"Example of":** Establishes the "type of object — specific sample of object" relationship. For instance, "ICMP ECHO REQUEST" (IER) is related to its specific implementation, such as `icmp: echo request`.

### Formal Framework for Attack Specification

Based on the attack modeling strategy, basic notions, and structure of intentions and actions, the following assumptions and statements are used for formal attack specification:

1. **Grammar-Based Specification:**
   - Each attack intention can be considered as a sequence of symbols in terms of lower-level intentions, forming "words" generated by a formal grammar.
   - Attack intentions can be adequately specified using LL(2) context-free grammars.
   - Uncertainties in attack development can be specified probabilistically through attributes and functions.

2. **Stochastic Attribute Grammar:**
   - The framework for attack specification is restricted to a stochastic attribute grammar.
   - Each node (grammar) is interconnected with the upper level node (grammar) through "grammar substitution" operations.

3. **Mathematical Model:**
   - The mathematical model of attack intentions is determined by a set of formal grammars and "substitution" operations.
   - Each formal grammar is specified by a quintuple \( G = \langle VN, VT, S, P, A \rangle \), where:
     - \( VN \): Set of non-terminal symbols (upper and intermediate levels of attack scenario).
     - \( VT \): Set of terminal symbols (steps of a lower-level attack scenario).
     - \( S \): Grammar axiom (initial symbol of an attack scenario).
     - \( P \): Set of productions specifying specialization operations.
     - \( A \): Set of attributes and algorithms for their computation.

4. **Attribute Component:**
   - Specifies randomized choice of production during inference.
   - Checks conditions for the admissibility of using a production, depending on attack task specification, network response, and previous actions.

### Example of Grammar Substitution

- **Operation Su(a):** Substitutes the grammar \( G(a) \) in place of the terminal symbol \( a \) in the sequence generated by grammar \( Gi \).
- **Micro Specifications:**
  - Uses the lowest (terminal) level ontology nodes and substitutes specific values for variables determining the attack task specification.
  - For example, a ping attack using "Network Ping Sweeps with Ping Sweep" (PSW) is in a "Seq of" relationship with "ICMP ECHO REQUEST" (IER) packets.

### Development of Grammar Families

- **Order of Development:**
  - Construct families of attributed stochastic context-free grammars for each basic attacker's intention.
  - Transform these families into generalized grammars corresponding to each non-terminal node of the ontology for all intentions.

### Algorithmic Interpretation

- **State Machines:**
  - Implemented by a family of state machines with states, transition arcs, and explanatory texts.
  - States are divided into initial, intermediate, and final types.
  - Transition arcs are identified with the productions of grammars.

### Formal Model of the Attacked Computer Network

- **Interactive Process:**
  - The attack development depends on the attacker's skill, network characteristics, and other attributes.
  - The model of the attacked computer network is represented as a quadruple \( M_{CN} = \langle MCN, MP, MA, MR \rangle \), where:
    - \( MCN \): Model of the computer network.
    - \( MP \): Model parameters.
    - \( MA \): Model attributes.
    - \( MR \): Model responses.

This structured and detailed approach ensures a comprehensive and coherent framework for understanding and simulating computer network attacks.