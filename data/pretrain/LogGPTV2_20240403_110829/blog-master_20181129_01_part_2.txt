select id from c   
union all   
select id from d   
union all   
select id from e   
)) order by (('('||c1||','||c2||','||c3||','||c4||','||c5||')')::cube)    
cube '(4010,8018,7566,9150,5278,7782,5188,7960,98,5960,9605,6981,6882,9398,2356,8905,4811,2484,345,2856,5851,4647,5846,246,1029,5395,5519,1372,966,2449,1414,4976,467,8980,4127,5745,6762,9314,3705,6860,5274,3311,3842,2156,2708,6197,1061,7519,8682,1406,375,4533,6053,6221,4778,7083,1616,297,8454,2581,2746,9869,7558,3213,8849,1684,8958,5611,998,2663,2471,6273,5974,6312,8429,8682,2510,9490,6201,1191)'   
limit 1;  
```  
以上CTE语法，每一条SQL都走索引，但是串行执行。为了解决串行问题，使用dblink异步调用。  
```  
                                                                                                        QUERY PLAN                                                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=22.12..22.18 rows=1 width=44)  
   CTE a  
     ->  Limit  (cost=0.36..3.53 rows=100 width=8)  
           ->  Index Scan using idx_test_sig_1 on test_sig test_sig_1  (cost=0.36..31722.96 rows=999994 width=8)  
                 Order By: (((('('::text || c1) || ')'::text))::signature  '(4010.000000, 8018.000000, 7566.000000, 9150.000000, 5278.000000, 7782.000000, 5188.000000, 7960.000000, 98.000000, 5960.000000, 9605.000000, 6981.000000, 68  
82.000000, 9398.000000, 2356.000000, 8905.000000)'::signature)  
   CTE b  
     ->  Limit  (cost=0.36..3.53 rows=100 width=8)  
           ->  Index Scan using idx_test_sig_2 on test_sig test_sig_2  (cost=0.36..31754.59 rows=999994 width=8)  
                 Order By: (((('('::text || c2) || ')'::text))::signature  '(4811.000000, 2484.000000, 345.000000, 2856.000000, 5851.000000, 4647.000000, 5846.000000, 246.000000, 1029.000000, 5395.000000, 5519.000000, 1372.000000, 96  
6.000000, 2449.000000, 1414.000000, 4976.000000)'::signature)  
   CTE c  
     ->  Limit  (cost=0.36..3.52 rows=100 width=8)  
           ->  Index Scan using idx_test_sig_3 on test_sig test_sig_3  (cost=0.36..31603.68 rows=999994 width=8)  
                 Order By: (((('('::text || c3) || ')'::text))::signature  '(467.000000, 8980.000000, 4127.000000, 5745.000000, 6762.000000, 9314.000000, 3705.000000, 6860.000000, 5274.000000, 3311.000000, 3842.000000, 2156.000000, 2  
708.000000, 6197.000000, 1061.000000, 7519.000000)'::signature)  
   CTE d  
     ->  Limit  (cost=0.36..3.53 rows=100 width=8)  
           ->  Index Scan using idx_test_sig_4 on test_sig test_sig_4  (cost=0.36..31746.30 rows=999994 width=8)  
                 Order By: (((('('::text || c4) || ')'::text))::signature  '(8682.000000, 1406.000000, 375.000000, 4533.000000, 6053.000000, 6221.000000, 4778.000000, 7083.000000, 1616.000000, 297.000000, 8454.000000, 2581.000000, 27  
46.000000, 9869.000000, 7558.000000, 3213.000000)'::signature)  
   CTE e  
     ->  Limit  (cost=0.36..3.53 rows=100 width=8)  
           ->  Index Scan using idx_test_sig_5 on test_sig test_sig_5  (cost=0.36..31757.63 rows=999994 width=8)  
                 Order By: (((('('::text || c5) || ')'::text))::signature  '(8849.000000, 1684.000000, 8958.000000, 5611.000000, 998.000000, 2663.000000, 2471.000000, 6273.000000, 5974.000000, 6312.000000, 8429.000000, 8682.000000, 2  
510.000000, 9490.000000, 6201.000000, 1191.000000)'::signature)  
   InitPlan 6 (returns $5)  
     ->  Append  (cost=0.00..0.24 rows=500 width=4)  
           ->  CTE Scan on a  (cost=0.00..0.04 rows=100 width=4)  
           ->  CTE Scan on b  (cost=0.00..0.04 rows=100 width=4)  
           ->  CTE Scan on c  (cost=0.00..0.04 rows=100 width=4)  
           ->  CTE Scan on d  (cost=0.00..0.04 rows=100 width=4)  
           ->  CTE Scan on e  (cost=0.00..0.04 rows=100 width=4)  
   ->  Result  (cost=4.25..4.82 rows=10 width=44)  
         ->  Sort  (cost=4.25..4.27 rows=10 width=402)  
               Sort Key: ((((((((((((('('::text || test_sig.c1) || ','::text) || test_sig.c2) || ','::text) || test_sig.c3) || ','::text) || test_sig.c4) || ','::text) || test_sig.c5) || ')'::text))::cube  '(4010, 8018, 7566, 9150, 5  
278, 7782, 5188, 7960, 98, 5960, 9605, 6981, 6882, 9398, 2356, 8905, 4811, 2484, 345, 2856, 5851, 4647, 5846, 246, 1029, 5395, 5519, 1372, 966, 2449, 1414, 4976, 467, 8980, 4127, 5745, 6762, 9314, 3705, 6860, 5274, 3311, 3842, 2156, 270  
8, 6197, 1061, 7519, 8682, 1406, 375, 4533, 6053, 6221, 4778, 7083, 1616, 297, 8454, 2581, 2746, 9869, 7558, 3213, 8849, 1684, 8958, 5611, 998, 2663, 2471, 6273, 5974, 6312, 8429, 8682, 2510, 9490, 6201, 1191)'::cube))  
               ->  Index Scan using test_sig_pkey on test_sig  (cost=0.37..4.21 rows=10 width=402)  
                     Index Cond: (id = ANY ($5))  
(33 rows)  
Time: 1.549 ms  
```  
**CTE 分5组查询性能**  
```  
-[ RECORD 1 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
id  | 747179  
sig | (2078, 3409, 9574, 9870, 3416, 1144, 494, 7580, 582, 4150, 4434, 5115, 4206, 8239, 2058, 9233, 6658, 1164, 1592, 4742, 5276, 2063, 3176, 2736, 2019, 9209, 5868, 2924, 1246, 3781, 8324, 3324, 7191, 7898, 3194, 606, 9042, 3688, 8187, 9625, 7838, 2621, 4740, 2044, 860, 6798, 1277, 7519, 7962, 2869, 2261, 3238, 4932, 5436, 5974, 6951, 4645, 1841, 9875, 5891, 5623, 8199, 9215, 2813, 6097, 2409, 3420, 5140, 6097, 1607, 4764, 3935, 4228, 9504, 5979, 5088, 6302, 7256, 2607, 4265)  
Time: 1634.734 ms (00:01.635)  
```  
**80维直接查询 - 索引性能**  
```  
--  
```  
**80维直接查询 - 全表扫描性能**  
```  
set enable_indexscan=off;
set enable_bitmapscan=off;
select * from test_sig order by (('('||c1||','||c2||','||c3||','||c4||','||c5||')')::cube)    
cube '(4010,8018,7566,9150,5278,7782,5188,7960,98,5960,9605,6981,6882,9398,2356,8905,4811,2484,345,2856,5851,4647,5846,246,1029,5395,5519,1372,966,2449,1414,4976,467,8980,4127,5745,6762,9314,3705,6860,5274,3311,3842,2156,2708,6197,1061,7519,8682,1406,375,4533,6053,6221,4778,7083,1616,297,8454,2581,2746,9869,7558,3213,8849,1684,8958,5611,998,2663,2471,6273,5974,6312,8429,8682,2510,9490,6201,1191)'   
limit 1;  
-[ RECORD 1 ]-----------------------------------------------------------------------  
id | 747179  
c1 | 2078,3409,9574,9870,3416,1144,494,7580,582,4150,4434,5115,4206,8239,2058,9233  
c2 | 6658,1164,1592,4742,5276,2063,3176,2736,2019,9209,5868,2924,1246,3781,8324,3324  
c3 | 7191,7898,3194,606,9042,3688,8187,9625,7838,2621,4740,2044,860,6798,1277,7519  
c4 | 7962,2869,2261,3238,4932,5436,5974,6951,4645,1841,9875,5891,5623,8199,9215,2813  
c5 | 6097,2409,3420,5140,6097,1607,4764,3935,4228,9504,5979,5088,6302,7256,2607,4265  
Time: 14548.096 ms (00:14.548)  
```  
### 5组异步并行调用加速  
1、创建dblink插件  
```  
create extension if not exists dblink;    
```  
2、创建一个建立连接函数，不报错  
```  
create or replace function conn(          
  name,   -- dblink名字          
  text    -- 连接串,URL          
) returns void as $$            
declare            
begin            
  perform dblink_connect($1, $2);           
  return;            
exception when others then            
  return;            
end;            
$$ language plpgsql strict;   
```  
3、创建并行查询函数  
如果使用的是imgsmlr signature类型，那么函数如下：  
```  
create or replace function parallel_img_search(    
  vc1 text,  -- 第1组向量  
  vc2 text,  -- 第2组向量  
  vc3 text,  -- 第3组向量  
  vc4 text,  -- 第4组向量  
  vc5 text,  -- 第5组向量  
  lmt1 int,  -- 每一个维度返回TOP N条 欧式距离最小的记录  
  lmt2 int,  -- 最终返回N条 所有维度上 欧式距离最小的记录  
  conn text default format('hostaddr=%s port=%s user=%s dbname=%s application_name=', '127.0.0.1', current_setting('port'), current_user, current_database())  -- dblink连接    
)    
returns setof record as    
$$    
declare    
  app_prefix text := 'abc';       
  sql text[];    
  vsql text;  
  i int :=1 ;  
  ids int[];  
  ids1 int[] := '{}'::int[];  
  ts1 timestamp;    
begin    
  sql := array[  
format(  
$_$  
select id from test_sig order by (('('||c1||')')::signature)  signature '(%s)' limit %s  
$_$,vc1,lmt1),  
format(  
$_$  
select id from test_sig order by (('('||c2||')')::signature)  signature '(%s)' limit %s  
$_$,vc2,lmt1),  
format(  
$_$  
select id from test_sig order by (('('||c3||')')::signature)  signature '(%s)' limit %s  
$_$,vc3,lmt1),  
format(  
$_$  
select id from test_sig order by (('('||c4||')')::signature)  signature '(%s)' limit %s  
$_$,vc4,lmt1),  
format(  
$_$  
select id from test_sig order by (('('||c5||')')::signature)  signature '(%s)' limit %s  
$_$,vc5,lmt1)];  
  foreach vsql in array sql loop    
    perform conn(app_prefix||i,  conn||app_prefix||i);     
    perform id from dblink_get_result(app_prefix||i, false) as t(id int);      
    perform dblink_send_query(app_prefix||i, vsql);       
    i := i+1;  
  end loop;    
  ts1 := clock_timestamp();    
  for i in 1..5 loop    
    select array_agg(id) into ids from dblink_get_result(app_prefix||i, false) as t(id int);      
    ids1 := ids1||ids;  
  end loop;    
  raise notice '%', clock_timestamp()-ts1;   
  return query execute  
  format($_$  
  select * from test_sig where id = any (%L) order by (('('||c1||','||c2||','||c3||','||c4||','||c5||')')::cube)    
cube '(%s,%s,%s,%s,%s)'   
limit %s $_$,ids1,vc1,vc2,vc3,vc4,vc5,lmt2);  
  return;    
end;    
$$ language plpgsql strict;   
```  
如果使用的是cube类型，那么函数如下：  
```  
create or replace function parallel_img_search(    
  vc1 text,  -- 第1组向量  
  vc2 text,  -- 第2组向量  
  vc3 text,  -- 第3组向量  
  vc4 text,  -- 第4组向量  
  vc5 text,  -- 第5组向量  
  lmt1 int,  -- 每一个维度返回TOP N条 欧式距离最小的记录  
  lmt2 int,  -- 最终返回N条 所有维度上 欧式距离最小的记录  
  conn text default format('hostaddr=%s port=%s user=%s dbname=%s application_name=', '127.0.0.1', current_setting('port'), current_user, current_database())  -- dblink连接    
)    
returns setof record as    
$$    
declare    
  app_prefix text := 'abc';       
  sql text[];    
  vsql text;  
  i int :=1 ;  
  ids int[];  
  ids1 int[] := '{}'::int[];  
  ts1 timestamp;    
begin    
  sql := array[  
format(  
$_$  
select id from test_sig order by (('('||c1||')')::cube)  cube '(%s)' limit %s  
$_$,vc1,lmt1),  
format(  
$_$  