to the uApp loader.
If the uApp loader is not present in
memory, the transfer of control fails. This would happen if
the user directly called suspend-to-disk in the user OS with
the intention of rebooting or powering down the machine.
In this case, we proceed with the standard suspend-to-disk
code to retain the existing kernel functionality. This change
required only to add a single line of C code to the kernel.
4.2 uApp Loader and OS Implementation
uApp loader. Our uApp loader builds on tboot [13], an
open-source project initiated by Intel. Tboot currently pro-
vides a pre-kernel module as an MLE that uses Intel TXT
to perform a measured and veriﬁed launch of the Linux ker-
nel or Xen hypervisor. Normally, tboot is invoked by the
GRUB bootloader. However, to remove the bootloader and
BIOS execution from the switch time, Unicorn invokes tboot
using kexec as discussed above. Tboot creates the MLE and
then extends PCR 17 with several chipset and AC module
speciﬁc measurements using GETSEC[SENTER], PCR 18
with measurements of the tboot kernel binary, uApp kernel
binary and boot parameters, and PCR 19 with hashes of the
initrd binary used to boot the uApp Linux kernel. It is im-
portant to measure boot parameters as well as the binaries,
since kernel behavior can be signiﬁcantly altered by chang-
ing the boot parameters. The ﬁnal component of the uApp
that must be measured is the partition that will be used to
boot the uApp OS. Unfortunately, tboot is unable to access
the disk directly to perform the measurement, so we modify
the uApp kernel to measure its root partition just before the
kernel mounts the partition, and extend PCR 20 with this
measurement. We set the TPM locality of the uApp ker-
nel to 1 (default is 0), as PCR 20 cannot be extended from
locality 0. This PCR is reset by tboot during initialization.
Cleanup at exit. When exiting from a uApp, we must en-
sure TXT tear down and clean up of residual states so that
secrets used in the uApp session are not exposed to the user
OS. Tboot contains this functionality, so one possibility was
to simply reuse this functionality by exiting the uApp ker-
nel and returning execution back to tboot. However, tboot
does not have support for kexec, so it would not be able
to return directly back to the user OS and instead would
have to reboot the machine to return to the user OS. Thus,
we reimplement the tboot cleanup code in the uApp kernel
and then use kexec to load the user OS kernel and transfer
control to it. We also reset the TPM locality to 0 from the
uApp kernel.
Hardening uApp OS. We take two approaches to harden
the OS in our uApp prototype. First, we reduce the net-
work attack surface by constraining the uApp to only being
able to access a minimal set of network services. We also
cryptographically authenticate the remote services. Net-
work restriction is achieved by using the iptables ﬁrewall
to constrain network connections by IP address, and SSL
with client-side veriﬁcation to authenticate remote servers
(without allowing any user-end override options if certiﬁ-
cate errors are detected). Second, we reduce the code foot-
print of uApps to keep the TCB as small as possible. For our
prototype, this meant removing unnecessary services and bi-
naries from the uApp OS. Hardening of the uApp OS could
be taken further by using a security-oriented high-assurance
OS instead of a commodity OS like Linux. Candidate sys-
tems include:
formally veriﬁed seL4 micro-kernel [15], en-
forcing security policies via SELinux [17], ensuring kernel
integrity with SecVisor [27], continuous integrity monitor-
ing using HyperSentry [2], and the Nexus OS [28] designed
with trusted computing in mind.
Read-only uApp image and reducing image size. To
make the uApp OS veriﬁcation possible, we need a read-only
uApp base image which is not changed after being invoked.
However, a read-only root image is problematic to a regular
Linux OS, as certain utilities in Linux require a modiﬁable
root ﬁle system. For example, it is common for applications
to write their PIDs (e.g., into /var/run), and log messages
to disk. To address these issues, we use AUFS (Another
Union File System [23]), which allows several ﬁle systems
to be simultaneously mounted at a single mount point and
act as a single ﬁle system. AUFS overlays the ﬁle systems,
creating a uniﬁed hierarchy. Each ﬁle system can be con-
ﬁgured as read-only or writable. During boot, the uApp
creates a temporary rewritable in-memory ﬁle system using
tmpfs. It then combines the root read-only uApp ﬁle system
with temporary ﬁle system using AUFS. This combined ﬁle
system is mounted as the root ﬁle system for our uApp OS.
As a result, modiﬁcations will be stored in the in-memory
ﬁle system and will be discarded when the user exits the
uApp. The uApp starts from its pristine state the next time
it is invoked.
Another challenge is the large size of the uApp base image.
Since a hash must be performed over the entire uApp root
partition, it is critical that the partition be as small as pos-
sible. To achieve this, one might start by removing unneces-
sary applications and kernel modules from the uApp OS. We
made a smaller image by installing Ubuntu in command line
mode and adding X server (Xorg), a simple window man-
ager (openbox) and a login manager (SLiM).3 Another way
of reducing the image size is using a compressed ﬁle system.
We use squashfs [30], an open source compressed read-only
ﬁle system for Linux. In our setup, squashfs shrinks the size
of our uApp base image to less than one-third of its original
size. Altogether, with our optimizations we made a uApp
base image of size less than 260 MB (about 900MB in ext4).
We then copy this image to a 275MB partition.
4.3 Server and PSD Attestors
Attestation can be performed by the remote server, a
PSD, or both. To demonstrate remote server attestation, we
implement a web server that performs attestation of clients
connecting to it using the Twisted [33] networking engine
version 10.0.0 written in python. The web server’s python
3We use auto-login, but without the login manager, Ubuntu
boots into a command-line mode.
22module uses a signature veriﬁcation function we developed
in C through ctypes (a Python wrapper of C library). Ver-
iﬁcation of the TPM quote received from the uApp client
requires the RSA signature algorithm and SHA-1 hash func-
tion; we use the openssl library (version 0.9.8k) for these
cryptographic operations.
To perform a quote operation of a uApp client connect-
ing to it, our web server sends a quote request to another
Twisted instance, called the TPM server, running in the
uApp. When the user connects to the remote service, it con-
tacts the TPM server on the uApp client with a nonce, PCR
indices, and requests a quote. The TPM server retrieves the
quote from TPM, and responds to the web server. We note
that in reality, uApp clients are likely to be behind ﬁrewalls
so it may not be possible for the remote service to initiate
a connection to the uApp instance in the same way as our
prototype. In this case, we would have to tunnel the quote
request over the existing connection that was initiated by
the uApp client. We leave this for future work.
Our PSD client prototype is implemented on an Android
phone. This client is used for veriﬁcation and authentica-
tion as follows. First we copy the expected platform mea-
surement values, public part of the AIK, and the long-term
shared secret to the PSD. Communications between the PSD
and uApp are done via QR-codes. After receiving the server
nonce, the TPM server on uApp generates the TPM quote,
converts the quote data into a QR-code image and displays
the image on a browser page. The user scans the image by
the PSD. After the PSD client retrieves the quote data from
the scanned image, it attempts to verify the quote using the
stored AIK and PCR values. We use Java crypto packages
for performing crypto operations on Android. If veriﬁcation
is successful, an HMAC response is generated (see Figure 2)
and displayed as a base64 response. Normally, the HMAC
response would be transmitted automatically to the uApp,
but in our prototype we manually copy the response to the
uApp TPM server. Note that ease of use is not the focus of
our prototype implementation; see below. The HMAC value
and quote are then sent to the web server, which can now
verify the platform, and authenticate the user.
Communication channels. As shown in Figures 2 and
3, we assume communication channels exist between the re-
mote server, uApp OS, and PSD. Between the remote server
and uApp OS, we secure the connection using SSL. The
server’s domain name is included in the uApp OS. The OS
does not allow any connection beyond this embedded do-
main. This prevents relay attacks. To defeat rogue or com-
promised CA attacks [29], hash of the server’s SSL certiﬁcate
may be included in the uApp OS, and checked during con-
nection establishment. Similar to current browser-initiated
SSL connections, this process remains transparent to users.
For transferring data from uApp to PSD, we use QR-code
as outlined above. This provides an intuitive and secure
channel for users without requiring any setup. For PSD-to-
computer data transfer, the PSD may communicate directly
with the computer over the network, or through a common
3rd party Internet site (such as a Twitter account or Google
Docs page). This channel need not be secure. Instead, keys
for encryption and signing are transferred from computer
to PSD via the QR-code displayed in Step 2 of Figure 1.
We are also exploring the feasibility of a reverse QR-code
channel where the PSD’s QR-coded response is scanned by
a PC webcam.
5. UNICORN APPLICATION EXAMPLES
We built two applications as examples of how the Unicorn
architecture may be realized in practice. We chose these ex-
ample uApps to be representative of diﬀerent types of ap-
plications people use often. Since these are proof-of-concept
applications, we envision that commercial deployments may
have updated authentication mechanisms, incorporate bet-
ter security techniques (e.g., strict SELinux policies) and
have spent more eﬀort in reducing the uApp image size (e.g.,
dropping unnecessary functionality).
Secure online ﬁnancial transactions. Our online-banking
application represents services that would like to verify the
integrity of the user platform and authenticate users before
serving sensitive data and allowing ﬁnancial transactions (re-
call Figure 2). The banking application uses both the local
TPM server and the remote bank server. After booting into
the uApp OS, the Chromium web browser is opened with the
bank server’s URL. The user requests for validation by click-
ing on a button on the page. The web server then contacts
the TPM server with a nonce, PCR indices, and requests
a quote. A pre-distributed shared secret is stored on the
PSD. The TPM server retrieves the quote from TPM (via a
Python C wrapper), and displays the QR-coded quote data
on a web page to be scanned by the PSD. If the PSD client
can verify the quote, it uses the stored shared secret to gen-
erate the HMAC response. After receiving the HMAC value
from PSD, the TPM server responds to the bank server with
this value and the quote. The user is logged into her bank
account only if veriﬁcation is successful at the server. She
can then continue using her account from the browser with-
out involving her PSD again.
Secure access to encrypted data. For this case, we
built a uApp with a PDF reader application which repre-
sents environments that would want to verify the integrity
of the user platform locally before allowing access to en-
crypted data stored on the user PC or a mobile storage (re-
call Figure 3). Assume a corporate IT department where ad-
ministrators want that their users can access sensitive data
from anywhere as long as a veriﬁed environment is used.
This application does not involve a remote party. Half of
the decryption key is stored on the PSD (Kpsd), and the
other half is sealed into the computer’s TPM (Ktpm, with
PCR values dependent on the uApp binary). After booting
into this uApp, we use a custom program to get Kpsd from
the PSD if attestation is successful, and unseal Ktpm from
the TPM if correct PCR values are initialized by the loaded
uApp; these keys then form the decryption key (Kdec, see
Section 3.2). Retrieving the decryption key implicitly indi-
cates the uApp’s correctness. We use openssl to encrypt a
PDF ﬁle, and store the encryption key parts in the PSD, and
TPM. Afterwards, when we boot into this uApp, the decryp-
tion key is formed upon a successful veriﬁcation, openssl is
used to decrypt the ﬁle, and then the PDF reader displays
the content; cf. Kells [5] which enables a mobile storage sys-
tem to perform attestation to verify a host’s integrity state
before allowing access to sensitive data.
6. EVALUATION
We evaluate Unicorn along two axes. First, we qualita-
tively evaluate the security of Unicorn against a variety of
attacks. Then, we evaluate the time it takes to switch be-
tween the user OS and a uApp.
236.1 Security Evaluation
(a) Tampering with uApp before launch. As men-
tioned in Section 2, we assume the attacker can compromise
and gain complete control over the user OS. Since the uApp
image is stored on storage accessible to the user OS, the at-
tacker may arbitrarily modify the uApp image. However, the
integrity of the entire uApp image is measured and stored in
the TPM so any tampering of any component of the uApp
will necessarily alter those measurements. This will result
in a failed uApp launch as the integrity veriﬁcation test by
the PSD will fail. We note that this allows an adversary to
mount a denial of service attack. Moreover, by controlling
the user OS, the adversary could encourage the user to re-
enter the setup phase when the uApp launch fails. Thus,
it is important that the setup phase be constructed to en-
sure user diligence, even at the cost of convenience, since the
setup phase should be a rare event in benign scenarios.
(b) Run time attacks. The attacker can try to mount
run time attacks against the uApp in three ways. First, she
may try to tamper with the hardware platform the uApp
will run on so that the eﬀect of the tampering will only
be felt after the uApp is running. Second, she may try to
ﬁnd a vulnerability in the uApp and exploit it while it is
running. Finally, she may try to extract information left in
the machine after the uApp has terminated.
To tamper with the platform, the attacker initiates resid-
ual commands on a device from the user OS that would be
executed after the uApp is launched (e.g., after measure-
ments have been taken and stored in the TPM). For exam-
ple, before being suspended, a sophisticated attacker might
schedule a DMA transfer to overwrite critical memory pages
in the uApp. Such attacks are not possible because the MLE
protects its content from being tampered by DMA. Also, our
uApp kernel enables DMA remapping using VT-d, which re-
stricts all DMA-capable devices to only be able to write to
regions for which they are authorized.
Another potential vector for hardware tampering is to
modify the contents of the TPM. If the attacker can learn
the TPM ownership password, she can create new AIKs and
delete existing AIKs from the TPM. However, new AIKs
are not a threat unless the attacker can convince the user
to add them to their PSD. Deleting an AIK will make the
TPM unable to attest the state of the uApp to the remote
server or the user’s PSD. This means the user will not be
able to use the uApp, but does not result in the compromise
of any user information.
The attacker may attempt to ﬁnd and exploit a vulnera-
bility in the uApp while it is running (known as time of check
to time of use attacks, see, e.g., [4]). We believe that the
smaller attack surface of the uApp, achieved by constrain-
ing the network servers it communicates with, along with
the smaller TCB of the uApp, achieved through reducing
the functionality in the uApp OS, make such an attack diﬃ-
cult for an adversary to mount. Other hardening techniques
can also be employed to limit these attacks; see Section 4.2.
Finally, after uApp terminates and the user OS is re-
sumed, attackers can look for sensitive information on the
memory and disk. On exiting uApp, we tear down the MLE
and zero-out in-memory states. To prevent accidental stor-
age of Unicorn secrets on the disk (e.g., due to swapping),