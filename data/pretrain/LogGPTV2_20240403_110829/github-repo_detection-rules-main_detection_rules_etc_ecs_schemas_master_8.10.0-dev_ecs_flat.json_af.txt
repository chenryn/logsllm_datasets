{"dns.op_code": {"dashed_name": "dns-op-code", "description": "The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.", "example": "QUERY", "flat_name": "dns.op_code", "ignore_above": 1024, "level": "extended", "name": "op_code", "normalize": [], "short": "The DNS operation code that specifies the kind of query in the message."}}
{"dns.question.class": {"dashed_name": "dns-question-class", "description": "The class of records being queried.", "example": "IN", "flat_name": "dns.question.class", "ignore_above": 1024, "level": "extended", "name": "question.class", "normalize": [], "short": "The class of records being queried."}}
{"dns.question.name": {"dashed_name": "dns-question-name", "description": "The name being queried.\nIf the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \\t, \\r, and \\n respectively.", "example": "www.example.com", "flat_name": "dns.question.name", "ignore_above": 1024, "level": "extended", "name": "question.name", "normalize": [], "short": "The name being queried."}}
{"dns.question.registered_domain": {"dashed_name": "dns-question-registered-domain", "description": "The highest registered domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".", "example": "example.com", "flat_name": "dns.question.registered_domain", "ignore_above": 1024, "level": "extended", "name": "question.registered_domain", "normalize": [], "short": "The highest registered domain, stripped of the subdomain."}}
{"dns.question.subdomain": {"dashed_name": "dns-question-subdomain", "description": "The subdomain is all of the labels under the registered_domain.\nIf the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.", "example": "www", "flat_name": "dns.question.subdomain", "ignore_above": 1024, "level": "extended", "name": "question.subdomain", "normalize": [], "short": "The subdomain of the domain."}}
{"dns.question.top_level_domain": {"dashed_name": "dns-question-top-level-domain", "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".", "example": "co.uk", "flat_name": "dns.question.top_level_domain", "ignore_above": 1024, "level": "extended", "name": "question.top_level_domain", "normalize": [], "short": "The effective top level domain (com, org, net, co.uk)."}}
{"dns.question.type": {"dashed_name": "dns-question-type", "description": "The type of record being queried.", "example": "AAAA", "flat_name": "dns.question.type", "ignore_above": 1024, "level": "extended", "name": "question.type", "normalize": [], "short": "The type of record being queried."}}
{"dns.resolved_ip": {"dashed_name": "dns-resolved-ip", "description": "Array containing all IPs seen in `answers.data`.\nThe `answers` array can be difficult to use, because of the variety of data formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip` makes it possible to index them as IP addresses, and makes them easier to visualize and query for.", "example": "[\"10.10.10.10\", \"10.10.10.11\"]", "flat_name": "dns.resolved_ip", "level": "extended", "name": "resolved_ip", "normalize": ["array"], "short": "Array containing all IPs seen in answers.data", "type": "ip"}}
{"dns.response_code": {"dashed_name": "dns-response-code", "description": "The DNS response code.", "example": "NOERROR", "flat_name": "dns.response_code", "ignore_above": 1024, "level": "extended", "name": "response_code", "normalize": [], "short": "The DNS response code."}}
{"dns.type": {"dashed_name": "dns-type", "description": "The type of DNS event captured, query or answer.\nIf your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query`.\nIf your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.", "example": "answer", "flat_name": "dns.type", "ignore_above": 1024, "level": "extended", "name": "type", "normalize": [], "short": "The type of DNS event captured, query or answer."}}
{"ecs.version": {"dashed_name": "ecs-version", "description": "ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.\nWhen querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.", "example": "1.0.0", "flat_name": "ecs.version", "ignore_above": 1024, "level": "core", "name": "version", "normalize": [], "required": true, "short": "ECS version this event conforms to."}}
{"email.attachments": {"dashed_name": "email-attachments", "description": "A list of objects describing the attachment files sent along with an email message.", "flat_name": "email.attachments", "level": "extended", "name": "attachments", "normalize": ["array"], "short": "List of objects describing the attachments.", "type": "nested"}}
{"email.attachments.file.extension": {"dashed_name": "email-attachments-file-extension", "description": "Attachment file extension, excluding the leading dot.", "example": "txt", "flat_name": "email.attachments.file.extension", "ignore_above": 1024, "level": "extended", "name": "attachments.file.extension", "normalize": [], "short": "Attachment file extension."}}
{"email.attachments.file.hash.md5": {"dashed_name": "email-attachments-file-hash-md5", "description": "MD5 hash.", "flat_name": "email.attachments.file.hash.md5", "ignore_above": 1024, "level": "extended", "name": "md5", "normalize": [], "original_fieldset": "hash", "short": "MD5 hash."}}
{"email.attachments.file.hash.sha1": {"dashed_name": "email-attachments-file-hash-sha1", "description": "SHA1 hash.", "flat_name": "email.attachments.file.hash.sha1", "ignore_above": 1024, "level": "extended", "name": "sha1", "normalize": [], "original_fieldset": "hash", "short": "SHA1 hash."}}
{"email.attachments.file.hash.sha256": {"dashed_name": "email-attachments-file-hash-sha256", "description": "SHA256 hash.", "flat_name": "email.attachments.file.hash.sha256", "ignore_above": 1024, "level": "extended", "name": "sha256", "normalize": [], "original_fieldset": "hash", "short": "SHA256 hash."}}
{"email.attachments.file.hash.sha384": {"dashed_name": "email-attachments-file-hash-sha384", "description": "SHA384 hash.", "flat_name": "email.attachments.file.hash.sha384", "ignore_above": 1024, "level": "extended", "name": "sha384", "normalize": [], "original_fieldset": "hash", "short": "SHA384 hash."}}
{"email.attachments.file.hash.sha512": {"dashed_name": "email-attachments-file-hash-sha512", "description": "SHA512 hash.", "flat_name": "email.attachments.file.hash.sha512", "ignore_above": 1024, "level": "extended", "name": "sha512", "normalize": [], "original_fieldset": "hash", "short": "SHA512 hash."}}
{"email.attachments.file.hash.ssdeep": {"dashed_name": "email-attachments-file-hash-ssdeep", "description": "SSDEEP hash.", "flat_name": "email.attachments.file.hash.ssdeep", "ignore_above": 1024, "level": "extended", "name": "ssdeep", "normalize": [], "original_fieldset": "hash", "short": "SSDEEP hash."}}
{"email.attachments.file.hash.tlsh": {"dashed_name": "email-attachments-file-hash-tlsh", "description": "TLSH hash.", "flat_name": "email.attachments.file.hash.tlsh", "ignore_above": 1024, "level": "extended", "name": "tlsh", "normalize": [], "original_fieldset": "hash", "short": "TLSH hash."}}
{"email.attachments.file.mime_type": {"dashed_name": "email-attachments-file-mime-type", "description": "The MIME media type of the attachment.\nThis value will typically be extracted from the `Content-Type` MIME header field.", "example": "text/plain", "flat_name": "email.attachments.file.mime_type", "ignore_above": 1024, "level": "extended", "name": "attachments.file.mime_type", "normalize": [], "short": "MIME type of the attachment file."}}
{"email.attachments.file.name": {"dashed_name": "email-attachments-file-name", "description": "Name of the attachment file including the file extension.", "example": "attachment.txt", "flat_name": "email.attachments.file.name", "ignore_above": 1024, "level": "extended", "name": "attachments.file.name", "normalize": [], "short": "Name of the attachment file."}}
{"email.attachments.file.size": {"dashed_name": "email-attachments-file-size", "description": "Attachment file size in bytes.", "example": 64329, "flat_name": "email.attachments.file.size", "level": "extended", "name": "attachments.file.size", "normalize": [], "short": "Attachment file size.", "type": "long"}}
{"email.bcc.address": {"dashed_name": "email-bcc-address", "description": "The email address of BCC recipient", "example": "PI:EMAIL", "flat_name": "email.bcc.address", "ignore_above": 1024, "level": "extended", "name": "bcc.address", "normalize": ["array"], "short": "Email address of BCC recipient"}}
{"email.cc.address": {"dashed_name": "email-cc-address", "description": "The email address of CC recipient", "example": "PI:EMAIL", "flat_name": "email.cc.address", "ignore_above": 1024, "level": "extended", "name": "cc.address", "normalize": ["array"], "short": "Email address of CC recipient"}}
{"email.content_type": {"dashed_name": "email-content-type", "description": "Information about how the message is to be displayed.\nTypically a MIME type.", "example": "text/plain", "flat_name": "email.content_type", "ignore_above": 1024, "level": "extended", "name": "content_type", "normalize": [], "short": "MIME type of the email message."}}
{"email.delivery_timestamp": {"dashed_name": "email-delivery-timestamp", "description": "The date and time when the email message was received by the service or client.", "example": "2020-11-10T22:12:34.8196921Z", "flat_name": "email.delivery_timestamp", "level": "extended", "name": "delivery_timestamp", "normalize": [], "short": "Date and time when message was delivered.", "type": "date"}}
{"email.direction": {"dashed_name": "email-direction", "description": "The direction of the message based on the sending and receiving domains.", "example": "inbound", "flat_name": "email.direction", "ignore_above": 1024, "level": "extended", "name": "direction", "normalize": [], "short": "Direction of the message."}}
{"email.from.address": {"dashed_name": "email-from-address", "description": "The email address of the sender, typically from the RFC 5322 `From:` header field.", "example": "PI:EMAIL", "flat_name": "email.from.address", "ignore_above": 1024, "level": "extended", "name": "from.address", "normalize": ["array"], "short": "The sender's email address."}}
{"email.local_id": {"dashed_name": "email-local-id", "description": "Unique identifier given to the email by the source that created the event.\nIdentifier is not persistent across hops.", "example": "c26dbea0-80d5-463b-b93c-4e8b708219ce", "flat_name": "email.local_id", "ignore_above": 1024, "level": "extended", "name": "local_id", "normalize": [], "short": "Unique identifier given by the source."}}
{"email.message_id": {"dashed_name": "email-message-id", "description": "Identifier from the RFC 5322 `Message-ID:` email header that refers to a particular email message.", "example": "81ce15$PI:EMAIL", "flat_name": "email.message_id", "level": "extended", "name": "message_id", "normalize": [], "short": "Value from the Message-ID header.", "type": "wildcard"}}
{"email.origination_timestamp": {"dashed_name": "email-origination-timestamp", "description": "The date and time the email message was composed. Many email clients will fill in this value automatically when the message is sent by a user.", "example": "2020-11-10T22:12:34.8196921Z", "flat_name": "email.origination_timestamp", "level": "extended", "name": "origination_timestamp", "normalize": [], "short": "Date and time the email was composed.", "type": "date"}}
{"email.reply_to.address": {"dashed_name": "email-reply-to-address", "description": "The address that replies should be delivered to based on the value in the RFC 5322 `Reply-To:` header.", "example": "PI:EMAIL", "flat_name": "email.reply_to.address", "ignore_above": 1024, "level": "extended", "name": "reply_to.address", "normalize": ["array"], "short": "Address replies should be delivered to."}}
{"email.sender.address": {"dashed_name": "email-sender-address", "description": "Per RFC 5322, specifies the address responsible for the actual transmission of the message.", "flat_name": "email.sender.address", "ignore_above": 1024, "level": "extended", "name": "sender.address", "normalize": [], "short": "Address of the message sender."}}
{"email.subject": {"dashed_name": "email-subject", "description": "A brief summary of the topic of the message.", "example": "Please see this important message.", "flat_name": "email.subject", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "email.subject.text", "name": "text", "type": "match_only_text"}], "name": "subject", "normalize": [], "short": "The subject of the email message."}}
{"email.to.address": {"dashed_name": "email-to-address", "description": "The email address of recipient", "example": "PI:EMAIL", "flat_name": "email.to.address", "ignore_above": 1024, "level": "extended", "name": "to.address", "normalize": ["array"], "short": "Email address of recipient"}}