(2).构建windows批处理命令  
点击构建-execute windows batch
command，执行批处理命令。这里的目的是为了使用调用pclint工具进行项目源代码扫描。如果代码层次较多请参考PClint扫描指南。  
Lint-nt -i"e:\pclint\lint" –u std.lnt env-vc10.lnt -v -width(0,0)
+xml(results) -"format=" -"format_specific= " -hFs1 -e900 _.cpp >Pclint_report.xml  
如果是写批处理文件，需要使用如下方式：  
Lint-nt -i"e:\pclint\lint" –u std.lnt env-vc10.lnt -v -width(0,0^)
+xml(results^) -"format=" -"format_specific= " -hFs1 -e900 _.cpp>Pclint_report.xml  
(3).构建sonar扫描  
配置analysis properties  
sonar.projectKey=sectest //该参数获取参考2.1  
sonar.projectName=sectest //该参数获取参考2.1  
sonar.projectVersion=2.0  
sonar.sources=.  
sonar.language=c++  
sonar.cxx.pclint.reportPath= Pclint_report.xml  
(4).运行(build now)  
3.2.2 dependency-check扫描  
(1).新建item  
创建新的项目。  
图2 jenkins新建项目  
(2).点击项目-进入配置页面：设置工作目录  
(3).构建  
在构建中选择dependency-check扫描，参数里面添加以下选项，如果没有设置系统将采用默认参数配置。  
需要说明：这里面需要设置导出为xml，因为下一步sonar扫描是基于xml进行的。  
(4).添加sonar扫描构建  
在analysis properties中填写以下信息  
sonar.projectKey=denpendencyy //sonar中创建的项目  
sonar.projectName=denpendencyy //sonar中创建的项目  
sonar.projectVersion=2.0  
sonar.sources=.  
sonar.dependencyCheck.reportPath=dependency-check-report.xml  
Projectkey和projectname获取参考下图：当创建完项目以后，点击配置-项目找到自己创建的项目信息。  
构建中填上属性信息：projectkey和projectName是在sonar中，其他的不变。如图7所示为sonar扫描的配置内容。  
(5).build  
点击build now运行项目，如图8所示。  
运行完以后点击sonarqube，直接进入sonar看到扫描结果，如图9所示。  
### 3.2.3 findbugs扫描
    Findbus扫描很简单，这个不需要做过多介绍。下载sonar运行以后，其会给出使用介绍。
# 4.安全扫描阶段
    安全扫描阶段对应就是图1中的验证阶段。安全扫描大致可以分为以下几个过程，源代码扫描，黑盒扫描，渗透测试等环节。源代码和黑盒扫描主要是借助工具进行自动扫描，当然在黑盒扫描的时候可能也会用到半自动扫描，所谓半自动就是被动扫描。被动扫描的好处就是可以抓取尽可能多的数据包，避免了主动扫描触及不到的地方。接下来，会详细介绍各个阶段涉及到的一些工具。
## 4.1 源代码动态扫描
    源代码动态扫描目前国内比较好的是fortify。Fortify SCA是一个静态的、白盒的软件源代码安全测试工具。它通过内置的五大主要分析引擎：数据流、语义、结构、控制流、配置流等对应用软件的源代码进行静态分析，分析的过程中与它特有的软件安全漏洞规则进行全面地匹配、查找，从而将源代码中存在的安全漏洞扫描出来，并给于整理报告。目前位置，fortify支持多种语言扫描，包括主流的java,C/C++等。
    还有其它的一些源码安全扫描工具，比如CoBOT等。还有一些开源的PHP和java扫描工具，感兴趣的可以搜索了解一下。
## 4.2 黑盒扫描
    黑盒扫描工具挺多的，这里按照产品类型介绍。通常产品类型可以化分为web，Android，PC。
    针对web的有awvs，appscan，绿盟WVSS扫描器，默安的雳鉴等；
    针对Android的有梆梆扫描，360app漏洞扫描等其他工具，同时还有一个开源的android安全扫描工具MOBSF，该工具是基于Django开发的web扫描工具，功能还是很强大的。
    针对PC，目前貌似没有听说有专门漏洞扫描工具，但是可以做一个PC漏洞检测集成平台，将各种单一扫描工具集成到统一平台从而搭建自动扫描工具。PC端有时候会面临病毒的威胁，比如程序会被杀毒软件直接杀死。针对该问题由于单个公司是不可能分析维护庞大的病毒库的，因此该工作可以依赖第三方安全公司来做。
    Web扫描工具大部分是收费的，但是有部分是可以使用破解版的，具体请自行下载使用。除此之外，还有各种扫描敏感文件，端口漏洞，常见系统漏洞的扫描器，这些也是可以结合起来使用。这种扫描器在Github上能找到，因此这里也就不再详细介绍，感兴趣的可以去搜索以下。
## 4.3 渗透测试
    渗透测试阶段，这个应该做的比较多，大家也都比较熟悉。这个阶段主要是渗透人员，对各个功能进行测试，找到安全问题并记录。同时想说的是，这个阶段测试是肯定需要手动完成的，但是问题的记录和后续跟踪需要平台支撑，这样即方便记录同时也方便后续的查看追踪，数据统计等工作。
    渗透测试阶段主要检测以下问题，这里就不再一一列举，直接使用其他人分享的图片作为展示。
# 5.后监控阶段
    产品上线以后，还需要不断跟进。因为当前众多产品都是基于开源组件或者是公司通用组件，这些开源组件或者通用组件的安全问题可能是不断更新的，因此有必要及时监控，预警，跟进。这个阶段需要有一个平台能及时追踪最新预警信息，同时要能根据预警信息快速定位相关产品，通知相关产品负责人及时升级修复问题。同时要有负责人反馈机制，以便后续的责任定位。
除此之外，还要及时监控敏感信息泄露的问题。Github是一个开发者广泛使用的平台，众多人员可能不经意间将公司敏感数据上传，因此有必要使用工具及时监控Github。这样的工具也很多，有收费的有不收费的。公司安全团队可以自行评估选择哪种方式，当然有条件的可以自己研发监控工具。
# 6 总结
    安全需要将上述的多个环节打通，同时能自动化运行的要尽量自动化，减少人为的参与。能集成到一个平台尽量集成到一个平台方便管理。整个环节环环相扣，又不断补充，相信这样会对整个公司的安全产生重要影响。
    最后，上述提到的内容可能不全，有些可能在实际工作中还需要继续视情况具体修复补充。当然也可能写的有不对的地方，欢迎大神指教。