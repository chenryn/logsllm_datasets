grams in the previous section. Are there any numeric fields where there should
before, with the summing removed:
---
## Page 87
SECT1ON 1.2
NOA V
77
colcheck -check consistency of columns
output: lines whose format differs from first line
input:
rows of numbers and strings
NR e= 1 {
nfld = NF
for ( = 1; i $1}
The first line of unbundle closes the previous file when a new one is encoun-
tered; if bundles don’t contain many files (less than the limit on the number of
open files), this line isn’t necessary.
There are other ways to write bundle and unbundle, but the versions here
are the easiest, and for short files, reasonably space efficient. Another organiza·
tion is to add a distinctive line with the filename before cach file, so the
filename appears only once.
Exercise 3-17. Compare the speed and space requirements of these versions of bundle
and unbundle with variations that use headers and perhaps trailers. Evaluate the
tradeoff between performance and program complexity. 
3.4 Multiline Records
The examples so far have featured data where each record fits neatly on one
line. Many other kinds of data, however, come in multiline chunks. Examples
include address lists:
1234 Wa11 St.,Apt.5C
Adam Smith
New York,NY 10021
212 555-4321
or bibliographic citations:
Donald E. Knuth
Volume 2: Seninumerical Algorithms,Second Edition
The Artof Computer Programming
Addison-Wesley, Reading, Mass.
1981
or personal databases:
Chateau Lafite Rothschi1d 1947
12 bott1es @ 12.95
It's easy to create and maintain such information if it's of modest size and
regular structure; in effect, each record is the equivalent of an index card.
Dealing with such data in awk requires only a bit more work than single-line
data does; we'll show several approaches.
Records Separated by Blank Lines
Imagine an address list, where each record contains on the first four lines a
name, street address, city and state, and phone number; after these, there may
---
## Page 93
SECTION 3.4
MULTILINE RECORDS
8
be additional lines of other information.Records are separated by a single
blank line:
Adan Smith
1234 Wa11 St.,Apt.5C
New York, NY 10021
212 555-4321
David W. Copperfield
221 Dickens Lane
Monterey, CA 93940
work phone 408 555-6532
408 555-0041
Mary,birthday January 30
Canadian Consulate
555 Fifth Ave
212 586-2400
When records are separated by blank lines, they can be manipulated
directly: if the record separator variable RS is set to null (RS=""), each multi-
line group becomes a record. Thus
BEGIN(RS=")
/New York/
will print each record that contains New York, regardless of how many lines it
has:
Adan Smith
1234 Wa11 St., Apt. 5C
New York,NY 10021
212 555-4321
Canadian Consulate
555 Fifth Ave
N  
212 586-2400
When several records are printed in this way, there is no blank line between
them, so the input format is not preserved. The easiest way to fix this is to set
the output record separator ORS to a double newline \n\n:
BEGIN(RS="*;ORS="\n\n"}
/New York/
Suppose we want to print the names and phone numbers of all Smith's, that
is, the first and fourth lines of all records in which the first line ends with
Smith. That would be easy if each line were a field. This can be arranged by
setting FS ton:
---
## Page 94
DATA PROCESSING
CHAPTER 3
$1-/Smiths/(print $1，$4}
{ RS = "*; FS = "\n" )
name,phone
This produces
Adam Smith 212 555-4321
Recall that newline is always a field separator for multiline records, regardless
of the value of Fs. When RS is set to "", the field separator by default is any
sequence of blanks and tabs, or newline. When Fs is set to n, only a newline
acts as a field separator.
Processing Multiline Records
 s Ke m su q Kruo ynd si sd u wod Buixo ue J
able to use it for multiline records by writing two awk programs. The first com-
bines the multiline records into single-line records that can be processed by the
existing program. Then, the second transforms the processed output back into
the original multiline format. (We'll assume that limits on line lengths are not
aproblem.)
To illustrate, let's sort our address list with the Unix sort command. The
following pipeline sorts the address list by last name:
 pipeline to sort address list by last names
avk '
BEGIN ( RS = ""; FS = "\n” )
（[（.*x's）d]x11%,）aud）
for（1=1;'‘s%s%）auxd
8ort
BEGIN(PS*1I#")
awk'
（for（1=2;1<=NF;i++)
printf(*xs\n",$1)
printf("\n")
In the first program, the function split($1, x, " ") splits the first line of
each record into the array x and returns the number of elements created; thus,
x[split(s1,x,
，"=)] is the entry for the last name.(This assumes that
the last word on the first line really is the last name.) For each multiline record
the first program creates a single line consisting of the last name, followed by
the string 11#, followed by all the fields in the record separated by this string.
Any other separator that does not ocur in the data and that sorts earlier than
the data could be used in place of the string 11#. The program after the sort
reconstructs the multiline records using this separator to identify the original
---
## Page 95
SECTION 3.4
MULTILINE RECORDS 85
fields.
Exercise 3-18. Modify the first awk program to detect occurrences of the magic string
11# in the data. 
Records with Headers and Trailers
Sometimes records are identified by a header and trailer, rather than by a
record separator. Consider a simple example, again an address list, but this
time each record begins with a header that indicates some characteristic, such
   o         
accountant
Adan Smith
1234 Wa11 St., Apt.5C
New York, NY 10021
Dr.Wi11 Seymour
doctor- ophthalmologist
798 Maple Blvd.
Berkeley Heights,NJ 07922
David W. Copperfield
lawyer
Monterey，CA 93940
221 Dickens Lane
doctor - pediatrician
600 Mountain Avenue
Dr. Susan Mark
Murray Hi11, NJ 07974
A range pattern is the simplest way to print the records of all doctors:
/doctor/、/*s/
The range pattern matches records that begin with doctor and end with a
blank line (/^s/ matches a blank line).
To print the doctor records without headers, we can use
/doctor/{p=1;next }
p =e1
/°%/
（p=0;next }
This program uses a variable p to control the printing of lines. When a line
containing the desired header is found, p is set to one; a subsequent line con-
taining a trailer resets p to zero, its default initial value. Since lines are printed
only when p is set to one, only the body and trailer of each record are printed;
other combinations are easily selected instead.
---
## Page 96
86
DATA PROCESSING
CHAPTER 3
Name-Value Data
 p s  u s o s  p se ss u
a sequence of unformatted lines. For instance, addresses might include a coun-
try name, or might not have a street address.
One way to deal with structured data is to add an identifying name or key-
a checkbook in this format:
check
Chanpagne Unlinited
1021
to
date
anount
123.10
1/1/87
deposit
anount
500.00
date
1/1/87
check
1022
date
1/2/87
anount
45.10
to
Getwell Drug Store
tax
nedical
check
1023
anount
125.00
date
to
International Travel
1/3/87
anount