destination by a time t2 that satisﬁes both conditions (1) and (2).
We start with two observations. The ﬁrst observation is that a
packet will not encounter the same failed link twice. This follows
from the fact that once a packet encounters a failed link l, this link is
carried in the packet header, and each subsequent path computation
will avoid l.
The second observation is that any packet forwarded during
[t1, t2] will take at most d(LG(t1, t2)) time to either reach the des-
tination, or encounter a (new) failed link. This is because, unless a
new failure is encountered, every node uses the same map and failed
link list (i.e., the one carried by the packet) to forward the packet
along the shortest path. Furthermore, at any time t ∈ [t1, t2), the
shortest path is at most d(LG(t1, t)). This is because, from con-
dition (2) and deﬁnition 1, both LG(t1, t2) and LG(t1, t) span
M, and LG(t1, t) includes all links of LG(t1, t2), which yields
d(LG(t1, t2)) ≥ d(LG(t1, t)), ∀t ∈ (t1, t2).
Let k be the number of link failures encountered by packet p
during interval [t1, t2], where k ≤ f by hypothesis. After encoun-
tering the kth failure, the packet is routed along the shortest path
to destination. Since there are no packet losses, the only reason p
may not reach the destination is either because (a) p encounters
another link failure, or because (b) some node A, tries to forward
p but does not have a route to D in the network map minus the
list of failed links. However, (a) cannot be true, since by the sec-
ond observation, p would encounter the (k + 1)th failure by time
t1 + (k + 1)×d(LG(t1, t2)) ≤ t1 + (f + 1)×d(LG(t1, t2)) ≤ t2,
which violates condition (1). Similarly, (b) cannot be true as it im-
plies that the liveness graph is disconnected at some point during
the interval [t1, t2], which violates condition (2). This completes
the proof.
Note that FCP can fail even if there is a viable path in LG(t1, t2),
but this can only occur if the LG(t1, t2) is disconnected and the
packet-in-ﬂight gets stranded on a disconnected component. As an
example, consider Figure 1. As before, N1 initially sends the packet
to N2. However, at this instant, let the links N1−N2, N3−Nd and
N3−N4 all go down. Since N2 and N3 are disconnected from the
destination they cannot route the packet to Nd despite the fact that
3FCP does not reuse failed links to avoid cycles.
Figure 2: An example illustrating FCP routing.
router on the packet path inserts the entire route to the destination
in the packet header. Subsequent routers simply forward the packet
based on the source route in the packet header until the packet ei-
ther reaches the destination or encounters a failed link. In the latter
case, the node adds the failed link to the packet header (exactly like
basic FCP), and replaces the source route in the header with a newly
computed route, if any exists, to the destination.
The main advantage of SR-FCP over FCP is that it works cor-
rectly even when not all nodes have the same network map. Thus,
SR-FCP does not require that all nodes have the same map. A sec-
ond advantage is that, unless there is a link failure, packet forward-
ing does not require a lookup operation, and thus can be imple-
mented much faster in practice.
On the downside, SR-FCP increases the packet overhead, by re-
quiring each packet to carry the source route. Furthermore, the in-
consistency across maps can signiﬁcantly increase the list of failed
links, as any link that does not appear in all maps can be potentially
marked as a failed link.
For the sake of simplicity, most of our discussion will focus on
basic FCP, and then we will discuss brieﬂy the properties of this
alternate SR-FCP approach.
2.3 Properties
We present two key properties of FCP: guaranteed reachability
and path isolation. Informally, the reachability property says that as
long as the network is connected and there are no packet losses due
to congestion, every packet is guaranteed to reach its destination
despite any link failures. The path isolation property says that a
malicious node cannot impact the path followed by a packet unless
it is already on that path. Finally, we show that SR-FCP can provide
these properties even when the node maps are inconsistent.
Since a failed node can be represented as a node whose entire set
of links has failed, in the remainder of this section we consider only
link failures. Furthermore, unless otherwise speciﬁed, we consider
only fail-stop failures2, and assume that FCP employs shortest path
routing. To state FCP’s properties more precisely, we start with the
following deﬁnition.
DEFINITION 1. Let M be the network graph (map). Deﬁne the
liveness graph LG(t1, t2) as the maximal graph consisting of only
nodes and links of M that are alive at all times during the closed
time interval [t1, t2].
Note that once a link goes down during [t1, t2], it is removed
from LG(t1, t2) irrespective of whether the link comes back again
2Under the fail-stop assumption, processes fail by halting and failures are
easily detectable.
N1N2N3N5N4N6SourceNdN7DestinationF = {}F = {}F = {N3-Nd, N5-N7}F = {N3-Nd, N5-N7}F = {N3-Nd}F = {N3-Nd}the path N1−N5−N6−N7 was always active. Note that condi-
tion (2) in the above Lemma ﬁlters out this scenario, as it requires
LG(t1, t2) to span the entire graph.
In today’s protocols, malicious routers can send fake route up-
dates, and hence subvert a network to cause more packets to ﬂow
through them [17, 31]. In FCP, once the map is uploaded to each
node, there are no dynamic link updates that nodes exchange to
modify this map. Furthermore, each packet is treated independently
of other packets—only failures that the packet encounters are taken
into account for computing the paths. Hence, a node which is not
on the packet’s path, as computed by FCP, cannot affect the fate of
the packet. The next lemma states this property.
LEMMA 2. Path isolation: Assuming the map distribution is
secure, malicious nodes cannot perform off-path attacks.
PROOF. The proof follows directly from the fact that an off-path
node has no way to contaminate the routing state of the nodes along
a packet’s path. This is because nodes along the packet’s path com-
pute the route solely based on the disseminated map and the list of
failed links in the packet header.
The main assumption we make here is that the map dissemination
is much less frequent than route updates in today’s routing proto-
cols, and thus we can afford to improve the security of the map
dissemination operation, even at the expense of an increased over-
head.
Note that the path isolation property does not provide security
guarantees against arbitrary attacks. For example, a malicious node
can still mount denial of service attacks by sending spurious packets
with large lists of fake failed links in the hope of overloading the
CPUs of its neighbors. This attack is similar to a malicious node
sending a large number of fake routing updates to its neighbors.
The next result shows that SR-FCP is able to provide these prop-
erties, even in the presence of inconsistent maps. In this case, the
properties apply to the graph deﬁned by the intersection of all maps
in the system. Intuitively, this is because SR-FCP potentially treats
any link that is not in all maps as a failed link. In particular, if a
link l in a packet’s source route is not in the map of a node A that
forwards the packet, A simply adds l to the list of failed links.
LEMMA 3. Consider a network where the maps maintained by
nodes are not necessarily consistent. Redeﬁne the notion of link fail-
ure to include every link that does not belong to all node maps.
Using the new deﬁnition of link failure, SR-FCP achieves both
the guaranteed reachability and the path isolation properties, as
stated by Lemmas 1 and 2, respectively.
PROOF. The proof for guaranteed reachability is similar to the
proof of Lemma 1. The only difference is that, in this case, nodes
may have different maps. However, by using source routing, we
ensure that the two observations in Lemma 1 are still true. Let A
be the node that has computed and inserted the source route in a
given packet p. Since, in the route computation step, A eliminates
the failed links encountered by p so far, p will not encounter the
same failed link twice. Furthermore, every subsequent node along
p’s path uses the source route inserted by A to route packet p un-
til either p reaches its destination or encounters another failed link.
Since the map used by A to compute the source route of p is a
superset of LG(t1, t2) (where times t1 and t2 are as deﬁned in
Lemma 1)4, it follows that it takes p at most d(LG(t1, t2)) to reach
the destination or the next failed link.
4By the deﬁnition of link failure in Lemma 3, LG(t1, t2) does not contain
any link unless the link is present in all maps, including the A’s map.
Figure 3: An example in which a packet experiences multiple link fail-
ures but recomputation is not necessary.
The proof of the path isolation property follows again from the
fact that an off-path node has no way of contaminating the routing
state of the nodes along packet’s path.
2.4 Challenges
We have described the basic algorithm and its fundamental prop-
erties. In the rest of the paper, we address the main challenges of
realizing FCP.
• Computational overhead (Section 3): Whenever a packet car-
rying failure information arrives at a router, the router needs
to compute new routes. We present mechanisms to reduce the
computation overhead signiﬁcantly.
• Map dissemination and updates (Section 4): FCP relies on all
routers having a consistent view of the network map, which
requires a map dissemination and update protocol.
• Quantitative performance (Section 5): While FCP’s correct-
ness properties might be theoretically appealing, to have
practical relevance, FCP must be compared quantitatively to
OSPF performance, as well as backup path techniques that
are commonly used in operational networks today.
• Deployment (Section 6): For FCP to have practical implica-
tions, the mechanisms should be deployable with minimal
changes to the infrastructure. We discuss how we can lever-
age currently deployed mechanisms (such as MPLS), and
several earlier proposals (such as RCP) to achieve our goals.
• FCP extensions (Section 7): Since much of the paper dis-
cusses FCP as a link-state routing protocol, it is directly
applicable only in the intradomain context. We discuss
how FCP can deal with incomplete maps and with policy con-
straints needed for interdomain routing.
3. REDUCING OVERHEAD OF FCP
Basic FCP requires computation for every packet that encounters
a failure at every node that the packet traverses. We present several
mechanisms that reduce the overhead signiﬁcantly by adding only
a small overhead to router state.
3.1 Reducing per-packet route computation
To reduce per-packet computation at nodes where failures are
encountered, nodes perform some precomputation. Each node (in
addition to the default forwarding table), for every adjacent link
N1N2N3N5N4N6SourceNdN7DestinationF = {}F = {}F = {N3-Nd, N5-N7}F = {N3-Nd, N5-N7}F = {N3-Nd}F = {N3-Nd}No recomputationneededDefault path = {Nd}, Backup path = {N4,N5,N7,Nd}No recomputationneeded even for multiple failuresDefault path = {N7,Nd}, Backup path = {N6,Nd}l, computes the forwarding table using the consistent map minus
l; this table is used when l is failed. However, in terms of actual
forwarding state, such a precomputation only doubles the memory
requirement: for each destination, in addition to the default path P
computed using the map, we need to store the precomputed path
computed using map minus lP , where lP is ﬁrst hop in P .
LEMMA 4. If a packet p encounters a failed link l at node N,
and the precomputed path Pl to the destination (using the consistent
map minus l) does not contain a link that belongs to the set of failed
links that p carries, then Pl can be used to route p to the destination,
and no recomputation is necessary.
PROOF. Proof follows from the fact that a shortest path is unaf-
fected by removing a link not contained in that path.
Figure 3 illustrates the intuition behind the above technique.
When the packet reaches node N5, multiple failures are encoun-
tered. But since the backup path at N5 for the failed link N5−N7
does not traverse N3−Nd, recomputation is not necessary. In other
words, recomputation is needed only when failures happen on both
the primary and backup path. Hence, when the fraction of failed
links is small, the chance that a recomputation is triggered is low.
3.2 Reducing recomputation time
Each node maintains a cache of the paths that it computes based
on failures seen in packets. For each combination of failures, a node
performs computation to ﬁnd shortest paths only once. This is be-
cause performing a shortest path computation on M\F , where M
is the map, and F is the list of failed links, yields shortest paths to
all destinations.
For performing recomputation, we borrow from the literature on
incremental recomputation [13, 25]. Prior research has shown that
incremental recomputation can be performed within the order of a
few milliseconds even for graphs with a thousand nodes [3]. Per-
forming recomputation within a few milliseconds is very reason-
able; since failure detection itself could take that much time, re-
computation does not substantially worsen the vulnerability period.
Furthermore, since many of the incremental algorithms construct
shortest-path trees, the recomputation step yields paths to all desti-
nations. Hence, by saving this information, the node can avoid re-
computation for all future packets with the same set of failed links
irrespective of the destination.
3.3 Reducing packet overhead
We now present a mechanism to reduce packet overhead further
at the expense of local mapping state at the nodes. Consider a node
N1 sending a failure header that includes a set of failed links F to
node N2. With the failure header F , the node N1 associates a label
lf , and includes the mapping lf → F when it sends the packet
to N2. After N1 receives an acknowledgment from N2 about the
mapping, N1 includes only the label lf rather than the entire failure
header F . Labels don’t have global meaning but are speciﬁc to a
pair of adjacent nodes. Since labels are allocated on-demand for
each new combination of failures that is encountered, the number of
labels needed is atmost the number of different failure combinations
a router encounters, which is small in practice. For robustness, a
time-to-live value T can be associated with a label; if no packet
with a particular label is seen for period T, the label is removed.
4. DISSEMINATION OF NETWORK MAPS
We now turn to the problem of disseminating the global network
map to all nodes periodically. The purpose of the map is to provide
all routers with a loosely-synchronized but globally consistent view
of network state.
4.1 Network map information
To reduce overhead as well as react quickly to changes, the net-
work map does not include transient changes to the network. For
instance, if a link fails temporarily for a short duration, it is not
removed from the map. Rather, only long-term updates such as
planned outages and newly provisioned links are published in the
map (short-term updates are handled by the FCP protocol described
in previous sections). In order to reduce bandwidth consumption,
only the difference from the previous version of the map can be