    addr);
    #endif
        struct page *(*find_special_page)(struct vm_area_struct *vma, unsigned long
    addr);
    };
如上所示，有许多函数指针可以实现自定义处理函数。 这些例子在Linux设备驱动程序手册中有详细描述。
常见的行为是开发人员在实现内存分配时实施“fault”处理程序。 比如，看下面的代码：
    static struct file_operations fops =
    {
        .open = dev_open,
        .mmap = simple_vma_ops_mmap,
        .release = dev_release,
    };
    static struct vm_operations_struct simple_remap_vm_ops = {
        .open = simple_vma_open,
        .close = simple_vma_close,
        .fault = simple_vma_fault,
    };
    static int simple_vma_ops_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        printk(KERN_INFO "MWR: Device simple_vma_ops_mmap\n");
        vma->vm_private_data = filp->private_data;
        vma->vm_ops = &simple_remap_vm_ops;
        simple_vma_open(vma);
        printk(KERN_INFO "MWR: Device mmap OK\n");
        return 0;
    }
    void simple_vma_open(struct vm_area_struct *vma)
    {
        printk(KERN_NOTICE "MWR: Simple VMA open, virt %lx, phys %lx\n",
        vma->vm_start, vma->vm_pgoff virtual_address - vma->vm_start) + (vma>vm_pgoff
     PAGE_SIZE vm_private_data + offset);
        vmf->page = page;
        get_page(page);
        nopage_out:
        return 0;
在上面的代码中，可以看到`simple_vma_ops_mmap`函数用于处理mmap调用。
除了将一个`simple_remap_vm_ops`结构赋值为一个虚拟内存操作处理程序外，它什么也不做。
让我们考虑使用上面提供的代码在驱动程序上运行以下代码：
    int fd = open("/dev/MWR_DEVICE", O_RDWR);
    unsigned long size = 0x1000;
    unsigned long * addr = (unsigned long *)mmap((void*)0x42424000, size, PROT_READ |
    PROT_WRITE, MAP_SHARED, fd, 0x1000);
在dmesg中给出了以下输出：
    [268819.067085] MWR: Device has been opened 2 time(s)
    [268819.067121] MWR: Device simple_vma_ops_mmap
    [268819.067123] MWR: Simple VMA open, virt 42424000, phys 1000
    [268819.067125] MWR: Device mmap OK
映射进程地址空间：
    42424000-42425000 rw-s 00001000 00:06 140215 /dev/MWR_DEVICE
我们可以看到，调用了`simple_vma_ops_mmap`函数，并根据请求创建了内存映射。
在这个例子中，`simple_vma_fault`函数没有被调用。
问题是，我们在地址范围'0x42424000'-'0x42425000'中有一个映射，但它指向哪里？
我们还没有定义这个地址范围指向物理内存的地方，所以如果进程试图访问'0x42424000'-'0x42425000'的任何一个部分，那么将会运行`simple_vma_fault`错误处理程序。
那么让我们看下面的用户空间代码：
    int fd = open("/dev/MWR_DEVICE", O_RDWR);
    unsigned long size = 0x2000;
    unsigned long * addr = (unsigned long *)mmap((void*)0x42424000, size, PROT_READ |
    PROT_WRITE, MAP_SHARED, fd, 0x1000);
    printf("addr[0]: %x\n", addr[0]);
上面代码中唯一的变化是我们用`printf`函数访问映射的内存。
由于内存位置无效，因此我们调用`simple_vma_fault`处理程序，如下面的dmesg输出所示:
    [285305.468520] MWR: Device has been opened 3 time(s)
    [285305.468537] MWR: Device simple_vma_ops_mmap
    [285305.468538] MWR: Simple VMA open, virt 42424000, phys 1000
    [285305.468539] MWR: Device mmap OK
    [285305.468546] MWR: simple_vma_fault
在`simple_vma_fault`函数内部，我们可以观察到`offset`变量是使用`vmf>virtual_address`来计算的，该变量指向在内存访问期间未映射的地址。在我们的例子中，这是'addr
[0]'的地址。
下一页结构是通过使用`virt_to_page`宏来获得的，该宏导致新获得的页面被分配给`vmf-> page`变量。
这个赋值意味着当错误处理程序返回时，'addr [0]'将指向由`simple_vma_fault`函数计算出的一些物理内存。
这个内存可以被用户空间程序访问，而不需要任何额外的成本。
如果程序试图访问'addr [513]'（假设sizeof（无符号长整数）等于8），那么错误处理程序将被再次调用，因为'addr [0]'和'addr
[513]'分别位于两个不同的 内存页面，并且只有一页内存已被映射。
因此下面的代码：
    int fd = open("/dev/MWR_DEVICE", O_RDWR);
    unsigned long size = 0x2000;
    unsigned long * addr = (unsigned long *)mmap((void*)0x42424000, size, PROT_READ |
    PROT_WRITE, MAP_SHARED, fd, 0x1000);
    printf("addr[0]: %x\n", addr[0]);
    printf("addr[513]: %x\n", addr[513])
将生成以下内核日志：
    [286873.855849] MWR: Device has been opened 4 time(s)
    [286873.855976] MWR: Device simple_vma_ops_mmap
    [286873.855979] MWR: Simple VMA open, virt 42424000, phys 1000
    [286873.855980] MWR: Device mmap OK
    [286873.856046] MWR: simple_vma_fault
    [286873.856110] MWR: simple_vma_fault
# 3.典型的mmap处理程序问题
### 3.1缺乏用户输入验证
让我们来考虑一下前面的mmap处理程序示例：
    static int simple_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        printk(KERN_INFO "MWR: Device mmap\n");
        if ( remap_pfn_range( vma, vma->vm_start, virt_to_pfn(filp->private_data),
        vma->vm_end - vma->vm_start, vma->vm_page_prot ) )
        {
            printk(KERN_INFO "MWR: Device mmap failed\n");
            return -EAGAIN;
        }
        printk(KERN_INFO "MWR: Device mmap OK\n");
        return 0;
    }
这个代码是实现mmap处理程序的常用方法，类似的代码可以在Linux设备驱动程序手册中找到。
这个示例代码的主要问题是，`vma-> vm_end`和`vma->
vm_start`的值从不验证，而是直接作为大小参数传递给`remap_pfn_range`。 这意味着恶意进程可能会调用无限大小的mmap。
在我们的例子中，这将允许用户空间进程映射位于`filp-> private_data`缓冲区之后的所有物理内存地址空间，包括所有的内核内存。
这意味着恶意进程将能够从用户空间读取/写入内核内存。
下面是另一个流行的用例：
    static int simple_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        printk(KERN_INFO "MWR: Device mmap\n");
        if ( remap_pfn_range( vma, vma->vm_start, vma->vm_pgoff,
                        vma->vm_end - vma->vm_start, vma->vm_page_prot ) )
        {
            printk(KERN_INFO "MWR: Device mmap failed\n");
            return -EAGAIN;
        }
        printk(KERN_INFO "MWR: Device mmap OK\n");
        return 0;
    }
在上面的代码中，我们可以看到用户控制的偏移`vma-> vm_pgoff`作为物理地址直接传递给`remap_pfn_range`函数。
这会导致恶意进程能够将任意物理地址传递给mmap，从而允许从用户空间访问所有内核内存。
这种情况经常会发生轻微的修改，例如在偏移被屏蔽或使用另一个值计算的情况下。
### 3.2 整数溢出
经常看到，开发人员将尝试使用复杂的计算，位掩码，位移，大小和偏移之和等来验证映射的大小和偏移量。然而不幸的是，这往往会创建一些复杂且不寻常的计算和验证程序，导致这些程序难以阅读。经过少量的size和offset的模糊处理后，可以找到绕过这些验证检查的值。
我们来看下面的代码：
    static int integer_overflow_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        unsigned int vma_size = vma->vm_end - vma->vm_start;
        unsigned int offset = vma->vm_pgoff  0x10000)
        {
            printk(KERN_INFO "MWR: mmap failed, requested too large a chunk of
        memory\n");
            return -EAGAIN;
        }
        if (remap_pfn_range(vma, vma->vm_start, virt_to_pfn(filp->private_data),
        vma_size, vma->vm_page_prot))
        {
            printk(KERN_INFO "MWR: Device integer_overflow_mmap failed\n");
            return -EAGAIN;
        }
        printk(KERN_INFO "MWR: Device integer_overflow_mmap OK\n");
        return 0;
    }
这是一个整数溢出漏洞的例子，当一个进程调用的大小等于0xfffa000并且偏移量为0xf0006的mmap2系统调用时，将触发这个漏洞。
因为偏移量在mmap处理程序中移到0xf0006000，将会发生整数溢出。0xfffa000和0xf0006000的总和等于0x100000000。  
由于无符号整数的最大值是0xffffffff，因此最高有效位将被剥离，并且总和的最终值仅为0x0。结果是mmap系统调用会成功，大小为0xfffa000，进程将访问预期缓冲区之外的内存。
如前所述，有两个独立的系统调用mmap和mmap2。
mmap2系统调用允许使用32位`off_t`类型的应用程序通过支持用作偏移量参数的巨大值来映射大型文件（最多2 ^ 44个字节）。
有趣的是，mmap2系统调用通常在64位内核系统调用表中不可用。  
但是，如果操作系统支持32位和64位进程，通常可以在32位进程内使用这些系统调用。 这是因为32位和64位进程使用单独的系统调用表。
### 3.3 带符号的整数类型
另一个常见问题是对大小变量使用带符号的类型。看下面的代码：
    static int signed_integer_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        int vma_size = vma->vm_end - vma->vm_start;
        int offset = vma->vm_pgoff  0x10000 || offset  0x1000 || (vma_size + offset
        > 0x10000))
        {
            printk(KERN_INFO "MWR: mmap failed, requested too large a chunk of
        memory\n");
            return -EAGAIN;
        }
        if (remap_pfn_range(vma, vma->vm_start, offset, vma->vm_end - vma->vm_start,
    vma->vm_page_prot))
        {
            printk(KERN_INFO "MWR: Device signed_integer_mmap failed\n");
            return -EAGAIN;
        }
        printk(KERN_INFO "MWR: Device signed_integer_mmap OK\n");
        return 0;
    }
在上面的代码中，用户控制的数据存储在`vma_size`和`offset`中，它们都被声明为带符号整数。 然后通过以下代码行执行大小和偏移验证：
    if (vma_size > 0x10000 || offset  0x1000 || (vma_size + offset >
    0x10000))
不幸的是，因为`vma_size`被声明为一个有符号的整数，攻击者可能会使用负值（如0xf0000000）绕过此验证。
这将导致0xf0000000字节映射到用户地址空间。
# 4.利用mmap处理程序
### 4.1理论
到目前为止，我们已经理解了如何实现一个mmap处理程序，在这里我们可以找到常见问题，以及可以用来访问任意内存位置（通常是内核内存）的方法。
现在的问题是，为了获得root权限，我们可以用这些知识做些什么？ 我们考虑两个基本情况：
    1.当我们了解物理内存布局时（通常通过访问'/proc/iomem'）
    2.黑盒案例 - 我们只有一个大型的，oversized mmap
当我们了解物理内存布局时，我们可以轻松地检查我们映射的内存区域，并且可以尝试将其与虚拟地址相匹配。 这使我们能够精确地覆盖cred、函数指针等。
更有趣但更复杂的情况是黑盒的情况。
但是，这将适用于多种内核和体系结构，一旦编写了漏洞利用代码，它可能对许多不同的驱动程序有用。要利用这种情况，我们需要在记忆中找到一些可以直接告诉我们是否找到有用的东西的模式。
当我们开始考虑可以搜索的内容时，我们很快意识到：“我们可以搜索一些明显的模式，至少有16个字节，因为这是我们应该能够在其中找到几乎任何东西的整个内存”。
如果看看证书结构`struct cred`，那么我们会发现很多有趣的数据：
    struct cred {