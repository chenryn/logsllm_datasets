title:MACE: Model-inference-Assisted Concolic Exploration for Protocol
and Vulnerability Discovery
author:Chia Yuan Cho and
Domagoj Babic and
Pongsin Poosankam and
Kevin Zhijie Chen and
Edward XueJun Wu and
Dawn Song
MACE: Model-inference-Assisted Concolic Exploration
for Protocol and Vulnerability Discovery
Chia Yuan Cho†‡
Domagoj Babi´c†
Pongsin Poosankam†§
Kevin Zhijie Chen†
Edward XueJun Wu†
Dawn Song†
†University of California, Berkeley
§Carnegie Mellon University
‡DSO National Labs
Abstract
Program state-space exploration is central to software se-
curity, testing, and veriﬁcation. In this paper, we propose
a novel technique for state-space exploration of software
that maintains an ongoing interaction with its environ-
ment. Our technique uses a combination of symbolic and
concrete execution to build an abstract model of the ana-
lyzed application, in the form of a ﬁnite-state automaton,
and uses the model to guide further state-space explo-
ration. Through exploration, MACE further reﬁnes the
abstract model. Using the abstract model as a scaffold,
our technique wields more control over the search pro-
cess. In particular: (1) shifting search to different parts of
the search-space becomes easier, resulting in higher code
coverage, and (2) the search is less likely to get stuck in
small local state-subspaces (e.g., loops) irrelevant to the
application’s interaction with the environment. Prelim-
inary experimental results show signiﬁcant increases in
the code coverage and exploration depth. Further, our
approach found a number of new deep vulnerabilities.
1 Introduction
Designing secure systems is an exceptionally hard prob-
lem. Even a single bug in an inopportune place can create
catastrophic security gaps. Considering the size of mod-
ern software systems, often reaching tens of millions of
lines of code, exterminating all the bugs is a daunting
task. Thus, innovation and development of new tools
and techniques that help closing security gaps is of crit-
ical importance. In this paper, we propose a new tech-
nique for exploring the program’s state-space. The tech-
nique explores the program execution space automati-
§This work was done while Pongsin Poosankam was a visiting stu-
dent at UC Berkeley.
cally by combining exploration with learning of an ab-
stract model of program’s state space. More precisely,
it alternates (1) a combination of concrete and symbolic
execution [22] to explore the program’s state-space, and
(2) the L∗ [1] online learning algorithm to construct high-
level models of the state-space. Such abstract models, in
turn, guide further search.
In contrast, the prior state-
space exploration techniques treat the program as a ﬂat
search-space, without distinguishing states that corre-
spond to important input processing events.
A combination of concrete execution and symbolic
reasoning, known as DART, concolic (concrete and
symbolic) execution, and dynamic symbolic execution
[17, 25, 8, 7], exploits the strengths of both. The con-
crete execution creates a path, followed by symbolic ex-
ecution, which computes a symbolic logical formula rep-
resenting the branch conditions along the path. Manipu-
lation of the formula, e.g., negation of a particular branch
predicate, produces a new symbolic formula, which is
then solved with a decision procedure. If a solution ex-
ists, the solution represents an input to the concrete exe-
cution, which takes the search along a different path. The
process is repeated iteratively until the user reaches the
desired goal (e.g., number of bugs found, code coverage,
etc.).
We identiﬁed two ways to improve this iterative pro-
cess. First, dynamic symbolic execution has no high-
level information about the structure of the overall pro-
gram state-space. Thus, it has no way of knowing how
close (or how far) it is from reaching important states
in the program and is likely to get stuck in local state-
subspaces, such as loops. Second, unlike decision proce-
dures that learn search-space pruning lemmas from each
iteration (e.g., [30]), dynamic symbolic execution only
tracks the most promising path preﬁx for the next iter-
ation [17], but does not learn in the sense that informa-
tion gathered in one iteration is used either to prune the
search-space or to get to interesting states faster in later
iterations.
These two insights led us to develop an approach
— Model-inference-Assisted Concolic (concrete and
symbolic) Exploration (MACE) — that learns from each
iteration and constructs a ﬁnite-state model of the search-
space. We primarily target applications that maintain
an ongoing interaction with its environment, like servers
and web services, for which a ﬁnite-state model is fre-
quently a suitable abstraction of the communication pro-
tocol, as implemented by the application. At the same
time, we both learn the protocol model and exploit the
model to guide the search.
MACE relies upon dynamic symbolic execution to
discover the protocol messages, uses a special ﬁltering
component to select messages over which the model
is learned, and guides further search with the learned
model, reﬁning it as it discovers new messages. Those
three components alternate until the process converges,
automatically inferring the protocol state machine and
exploring the program’s state-space.
We have implemented our approach and applied it to
four server applications (two SMB and two RFB im-
plementations). MACE signiﬁcantly improved the line
coverage of the analyzed applications, and more im-
portantly, discovered four new vulnerabilities and three
known ones. One of the discovered vulnerabilities re-
ceived Gnome’s “Blocker” severity, the highest severity
in their ranking system meaning that the next release can-
not be shipped without a ﬁx. Our work makes the follow-
ing contributions:
• Although dynamic symbolic execution and decision
procedures perform very similar tasks, the state-
of-the-art decision procedures feature many tech-
niques, like learning, that yet have to ﬁnd their way
into dynamic symbolic execution. While in deci-
sion procedures, learned information can be conve-
niently represented in the same format as the solved
formula, e.g., in the form of CNF clauses in SAT
solvers, it is less clear how would one learn or rep-
resent the knowledge accumulated during the dy-
namic symbolic execution search process. We pro-
pose that for applications that interact with their en-
vironment through a protocol, one could use ﬁnite-
state machines to represent learned information and
use them to guide the search.
• As the search progresses, it discovers new infor-
mation that can be used to reﬁne the model. We
show one possible way to keep reﬁning the model
by closing the loop — search incrementally reﬁnes
the model, while the model guides further search.
• At the same time, MACE both infers a model of
the protocol, as implemented by a program, and
explores the program’s search space, automatically
generating tests. Thus, our work contributes both to
the area of automated reverse-engineering of proto-
cols and automated program testing.
• MACE discovered seven vulnerabilities (four of
which are new) in four applications that we ana-
lyzed. Furthermore, we show that MACE performs
deeper state-space exploration than the baseline dy-
namic symbolic execution approach.
2 Related Work
Model-guided testing has a long history. The hard-
ware testing community has developed modeling lan-
guages, like SystemVerilog, that allow veriﬁcation teams
to specify input constraints that are solved with a deci-
sion procedure to generate random inputs. Such inputs
are randomized, but adhere to the speciﬁed constraints
and therefore tend to reach much deeper into the tested
system than purely random tests. Constraint-guided ran-
dom test generation is nowadays the staple of hardware
testing. The software community developed its own lan-
guages, like Spec# [3], for describing abstract software
models. Such models can be used effectively as con-
straints for generating tests [27], but have to be written
manually, which is both time consuming and requires a
high level of expertise.
Grammar inference (e.g., [16]) promises automatic in-
ference of models, and has been an active area of re-
search in security, especially applied to protocol infer-
ence. Comparetti et al. [12] infer incomplete (possibly
missing transitions) protocol state machines from mes-
sages collected by observing network trafﬁc. To reduce
the number of messages, they cluster messages according
to how similar the messages are and how similar their ef-
fects are on the execution. Comparetti et al. show how
the inferred protocol models can be used for fuzzing.
Our work shares similar goals, but features a few im-
portant differences. First, MACE iteratively reﬁnes the
model using dynamic symbolic execution [18, 25, 9, 7]
for the state-space exploration. Second, rather than ﬁl-
tering out individual messages through clustering of in-
dividual messages, we look at the entire sequences. If
there is a path in the current state machine that produces
the same output sequence, we discard the corresponding
input sequence. Otherwise, we add all the input mes-
sages to the set used for inferring the state machine in
the next iteration. Third, rather than using the inferred
model for fuzzing, we use the inferred model to initialize
state-space exploration to a desired state, and then run
dynamic symbolic execution from the initialized state.
In our prior work [10], we proposed an alternative pro-
tocol state machine inference approach. There we as-
sume the end users would provide abstraction functions
that abstract concrete input and output messages into
an abstract alphabet, over which we infer the protocol.
Designing such abstraction functions is sometimes non-
trivial and requires multiple iterations, especially for pro-
prietary protocols, for which speciﬁcations are not avail-
able.
In this paper, we drop the requirement for user-
provided input message abstraction, but we do require a
user-provided output message abstraction function. The
output abstraction function determines the granularity of
the inferred abstraction. The right granularity of abstrac-
tion is important for guiding state-space exploration, be-
cause too ﬁne-grained abstractions tend to be too expen-
sive to infer automatically, and too abstract ones fail to
differentiate interesting protocol states. Furthermore, our
prior work is a purely black-box approach, while in this
paper we do code analysis at the binary level in combi-
nation with grammatical inference.
In this paper, we analyze implementations of protocols
for which the source code or speciﬁcations are available.
However, MACE could also be used for inference of
proprietary protocols and for state-exploration of closed-
source third-party binaries. In that case, the users would
need to rely upon the prior research to construct a suit-
able output abstraction function. The ﬁrst step in con-
structing a suitable output abstraction function is under-
standing the message format. Cui et al. [14, 15] and Ca-
ballero et al. [6] proposed approaches that could be used
for that purpose. Further, any automatic protocol infer-
ence technique has to deal with encryption. In this paper,
we simply conﬁgure the analyzed server applications so
as to disable encryption, but that might not be an option
when inferring a proprietary protocol. The work of Ca-
ballero et al. [5] and Wang et al. [29] addresses automatic
reverse-engineering of encrypted messages.
Software model checking tools, like SLAM [2] and
Blast [20], incrementally build predicate abstractions of
the analyzed software, but such abstractions are very dif-
ferent from the models inferred by the protocol inference
techniques [12, 11]. Such abstractions closely reﬂect the
control-ﬂow structure of the software from which they
were inferred, while our inferred models are more ab-
stract and tend to have little correlation with the low-level
program structure. Further, depending on the inference
approach used, the inferred models can be minimal (like
in our work), which makes guidance of state-space ex-
ploration techniques more effective.
The Synergy algorithm [19]
combines model-
checking and dynamic symbolic execution to try to cover
all abstract states of a program. Our work has no ambi-
tion to produce proofs, and we expect that our approach
could be used to improve the dynamic symbolic execu-
tion part of Synergy and other algorithms that use dy-
namic symbolic execution as a component.
The Ketchum approach [21] combines random sim-
ulation to drive a hardware circuit into an interesting
state (according to some heuristic), and performs local
bounded model checking around that state. After reach-
ing a predeﬁned bound, Ketchum continues random sim-
ulation until it stumbles upon another interesting state,
where it repeats bounded model checking. Ketchum be-
came the key technology behind MagellanTM, one of
the most successful semi-formal hardware test genera-
tion tools. MACE has similar dynamics, but the com-
ponents are very different. We use the L∗ [1] ﬁnite-state
machine inference algorithm to infer a high-level abstract
model and declare all the states in the model as interest-
ing, while Ketchum picks interesting states heuristically.
While Ketchum uses random simulation, we drive the
analyzed software to the interesting state by ﬁnding the
shortest path in the abstract model. Ketchum explores the
vicinity of interesting states via bounded model check-
ing, while we start dynamic symbolic execution from the
interesting state.
3 Problem Deﬁnition and Overview
We begin this section with the problem statement and a
list of assumptions that we make in this paper. Next, we
discuss possible applications of MACE. At the end of
this section, we introduce the concepts and notation that
will be used throughout the paper.
3.1 Problem Statement
We have three, mutually supporting, goals. First, we
wish to automatically infer an abstract ﬁnite-state model
of a program’s interaction with its environment, i.e., a
protocol as implemented by the program. Second, once
we infer the model, we wish to use it to guide a com-
bination of concrete and symbolic execution in order to
improve the state-space exploration. Third, if the explo-
ration phase discovers new types of messages, we wish
to reﬁne the abstract model, and repeat the process.
There are two ways to reﬁne the abstract ﬁnite-state
model; by adding more states, and by adding more mes-
sages to the state machine’s input (or output) alphabet,
In our work, we make a few assumptions:
Determinism We assume the analyzed program’s com-
munication with its environment is deterministic,
i.e.,
the same sequence of inputs always leads
to the same sequence of outputs and the same
state. In practice, programs can exhibit some non-
determinism, which we are abstracting away. For
example, the same input message could produce
two different outputs from the same state. In such
a case, we put both output messages in the same
equivalence class by adjusting our output abstrac-
tion (see below).
Resettability We assume the analyzed program can be
easily reset to its initial state. The reset may be
achieved by restarting the program, re-initializing
its environment or variables, or simply initiating a
new client connection. In practice, resetting a pro-
gram is usually straightforward, since we have a
complete control of the program.
Output Abstraction Function We assume the exis-
tence of an output abstraction function that ab-
stracts concrete response (output) messages from
the server into an abstract set of messages (alpha-
bet) used for state machine inference. In practice,
this assumption often reduces to manually identi-
fying which sub-ﬁelds of output messages will be
used to distinguish output message types. The out-
put alphabet, in MACE, determines the granularity
of abstraction.
3.2 Applications
The primary intended application of MACE is state-
space exploration of programs communicating with their
environment through a protocol, e.g., networked appli-
cations. We use the inferred protocol state machine as a
map that tells us how to quickly get to a particular part
of the search-space. In comparison, model checking and
dynamic symbolic execution approaches consider the ap-
plication’s state-space ﬂat, and do not attempt to exploit
the structure in the state machine of the communication
protocol through which the application communicates
with the world. Other applications of MACE include
proprietary protocol inference, extension of the existing
protocol test suites, conformance checking of different
protocol implementations, and ﬁngerprinting of imple-
mentation differences.
(a)
(b)
Figure 1: An Abstract Rendition of the MACE State-
Space Exploration. The ﬁgure on the left shows an
abstract model, i.e., a ﬁnite-state machine, inferred by
MACE. The ﬁgure on the right depicts clusters of con-
crete states of the analyzed application, such that clus-
ters are abstracted with a single abstract state. We infer
the abstract model with L∗, initialize the analyzed appli-