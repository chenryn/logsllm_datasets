Clever choices of data sources, representations, and
modeling algorithms can reduce the rate of false positives;
the presence of false positives, however, inherently limits
the scalability of any intrusion detection system. For ex-
1While POP [16] has some similarities to IMAP, it is primarily designed
for downloading messages from an email server, not for managing a remote
email archive. Because of this difference, we do not address POP further
in this paper.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:33 UTC from IEEE Xplore.  Restrictions apply. 
ample, a system that would only produce one false alarm
per week for 50 users would, without modi(cid:2)cation, pro-
duce around 14 alarms per day for 5000 users.
Inherent
in the design of any IDS, then, are assumptions about the
size of the observed population relative to that of the mon-
itors (system administrators or security of(cid:2)cers). Because
existing user-based anomaly IDSs tended to have higher
rates of false positives than other IDS technologies, their de-
ployments have traditionally been limited to environments
where large numbers of security of(cid:2)cers are available such
as secret government agencies and military organizations.
If we make the entire system user speci(cid:2)c (not just the
models), then we have a ratio of one user to one monitor-
ing party. With this change, user modeling becomes inher-
ently more feasible because we can tolerate a higher rate
of false positives; further, because a user understands his
own behavior, he is the best equipped to determine whether
or not a given alarm re(cid:3)ects a genuine security violation.
This choice also puts the party with the most at stake(cid:151)the
user(cid:151)in a position to make appropriate trade-offs regarding
their level of protection vs. the amount of work required for
monitoring the IDS.
We have found, though, that it is dif(cid:2)cult for a simple
model of user behavior to apply equally accurately to all
users (see Section 5). While we cannot be certain that all
simple models have this limitation, the inherent variability
of human behavior suggests that this will be the case. To
overcome this problem, a production email archive IDS sys-
tem would need to incorporate multiple models of potential
user behavior, with some of these models based upon dif-
ferent sets of observables. The system would then decide
which model(s) to use to capture normal behavior during
the system’s initial training period. Thus, the model pro-
posed in Section 4 should not be seen as applying to all
users, but merely as a proof-of-concept model that applies
to a reasonable fraction of potential users.
Because an email archive IDS would interact directly
with the protected user, it needs a secure path of commu-
nications with that user; however, by assumption the pro-
tected user’s password(s) may be compromised, so we can-
not create such a trusted path by using a password. While
this might seem like a fatal (cid:3)aw, in practice there are many
potential solutions. For example, the IDS could use an al-
ternate communication channel to transmit alarms such as
instant messaging, mobile phone text messaging, or an al-
ternative email account. (In this context, the IDS in effect
(cid:2)lters side-channel messages to reduce user fatigue.) An-
other, potentially simpler alternative would be a clear alert
in the mail reading client/web browser that cannot be re-
moved by the user; instead, it would persist on-screen for a
(cid:2)xed period of time (e.g. a few days or a week). The most
appropriate design for such a system would depend upon
the deployed system and the security requirements of the
speci(cid:2)c users; what is important is that attackers should not
be able to stop alarm messages, while false alarms should
not create too much of a burden on the protected user.
Of course, before we can consider the feasibility of
building an email archive IDS, we (cid:2)rst need to determine
whether user behavior within this domain is consistent
enough to form the basis of an anomaly-based IDS. To ad-
dress this question, we need at least one candidate method
for modeling user behavior. The next section, Section 4,
explains our chosen modeling approach in detail, and Sec-
tion 5 presents the results of of(cid:3)ine experiments that test the
performance of our model.
4 Modeling User Email Behavior
In this section we explain our approach to modeling
email archive access behavior. Section 4.1 explains the in-
tuitions that underly our model design. Section 4.2 presents
the features used by our behavioral model. Section 4.3 de-
scribes the model itself. To evaluate this model, we need
attacker behavior data in addition to normal user behavior;
Section 4.4 explains our approach to modeling attackers for
testing purposes.
4.1 Intuition
To design an anomaly-based email archive IDS, we (cid:2)rst
need to decide what to observe about email archive ac-
cess behavior and how to model those observations. We
have many possible observables, such as the time of day
of archive accesses, the amount of data transferred, and the
program used to access the archive. Rather than look at such
incidental features, we have chosen to focus on the pattern
of email disposition, i.e. whether an individual user chooses
to read an email, delete it, forward it, etc. Because there
are only a small set of possibilities for email disposition,
this restriction greatly simpli(cid:2)es the task of modeling user
behavior. At the same time, though, these operations repre-
sent the fundamentals of user decisions regarding email.
In this context, we note that there is a fundamental dif-
ference between how users approach newly arrived email
and already received email. User accesses to old email are
dictated by the speci(cid:2)c semantics of individual messages
and the tasks the user is engaged in; new emails, however,
are frequently read, deleted, or responded to soon after they
have arrived. Because of this observation, we have chosen
to build our model of user behavior using only the disposi-
tion of newly arrived emails.
The other key observation we have is that there is a
naturally high correlation between the sender of an email
message and its (cid:2)nal disposition. Some email originating
from an announcement email list might be read and deleted;
email from an important colleague, though, would typically
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:33 UTC from IEEE Xplore.  Restrictions apply. 
be responded to and/or archived. Our model of user behav-
ior, thus, correlates new email disposition with the sender
of individual messages.
To test our model, we need to understand how an attacker
might choose to mask her behavior. If an attacker is famil-
iar with the habits of an individual, it might be possible for
her to disguise her attack by imitating the targeted user’s
archive access behaviors. The problem for the attacker,
though, is that typical message disposition actions change
the state of the archive: email messages are moved, deleted,
or are marked as being read. If an attacker attempts to do
exactly the same operations as those of the normal user, be-
cause email accounts are normally not shared, the user her-
self will notice the unauthorized changes (messages marked
as read that have never been seen by the user, mysteriously
moved messaged, etc.). An attacker thus must both conceal
her actions from the IDS and from the targeted user. This
dilemma greatly simpli(cid:2)es the design of an email archive
IDS system; we explore this idea further in Section 4.4 and
Section 5.2.
4.2 Feature Extraction
There are a number of user disposition operations related
with new email messages. Rather than build a model that
incorporates all of these possibilities, we have instead cho-
sen to focus on the following common operations: reading,
deleting, copying, moving, marking a message as being un-
read (setting the unread (cid:3)ag). If none of these actions are
taken, we assume that the message was left unread in the
user’s inbox. For each newly received email message for
a given user, we record the sender of the email (from the
(cid:147)From:(cid:148) line of the message) along with which (if any) of
the selected disposition options was performed. Note that to
reduce data storage requirements and simplify our model,
we ignore the parameters of these operations, e.g. the desti-
nation folder for a move operation.
For the reported experiments, we gathered this informa-
tion by monitoring the IMAP requests that were sent from
a user’s email client to an IMAP server. Because clients
can send different patterns of IMAP requests in response to
the same basic user action, we tested various email clients
and created a translation table that maps speci(cid:2)c IMAP re-
quests to the intended user action. This translation actually
makes the detection task harder, because without it (i.e. if
we built our model using IMAP commands directly) an at-
tacker could be detected if he used a different email client
from the targeted user’s. Our intent, however, has been to
evaluate the speci(cid:2)c feasibility of modeling user interac-
tions with an email archive. Because the same basic op-
erations would also be used when accessing an archive via
a web interface or other access protocol, our results poten-
tially translate to these other systems in addition to IMAP-
sender #
k (# msgs)
1
2
3
10
8
20
lr
0.8
0.5
0.0
ld
0.2
0.0
1.0
lm
0.0
1.0
0.0
lc
0.0
0.0
0.0
lu
0.1
0.0
0.0
Table 1. Example of long›term behavior data.
based email archives.
4.3 The Model
Each user has a pro(cid:2)le consisting of two parts, a long-
term record of the frequency of different email dispositions
for each email sender, and a set of dynamically-determined
general model parameters. After a pro(cid:2)le has been trained
on a suf(cid:2)cient amount of user data, it is then used to mea-
sure signi(cid:2)cant changes in that user’s recent short-term be-
havior. When those changes exceed a (cid:2)xed threshold, that
short-term behavior is considered to be anomalous.
A user’s short-term behavior patterns are assessed us-
ing a (cid:2)xed number of the most recent messages received
by that user. By default, the size of short-term data win-
dow is set to a user’s average number of new messages re-
ceived in one day. Long-term behavior patterns are stored
using a larger sliding window that hold a user’s email dis-
positions for a larger set of past messages. By default, this
second window is twenty times the size of the short-term
data window, or equivalent to approximately the number
of messages received in twenty days. Both of these win-
dows store frequency information for each monitored email
disposition (reading, deleting, copying, moving, setting the
unread (cid:3)ag).
To assess the difference between short-term and long-
term trends in behavior, we de(cid:2)ne three measures, message
variation M, sender con(cid:2)dence C, and window variation
W . They are de(cid:2)ned as follows.
4.3.1 Message variation M
The message variation M is the Euclidean distance between
the disposition of a given message in recent short-term data
and the average disposition (within the long-term pro(cid:2)le)
of past messages from that same sender. More speci(cid:2)cally,
we place dispositions within a (cid:2)ve dimensional space, with
each dimension corresponding to a particular type of mes-
sage disposition: read r, delete d, move m, copy c, set un-
read (cid:3)ag u. A single recent message s in short-term data is
represented in this space as a point with a 1 for each chosen
disposition and 0 otherwise. The long term behavior record
for a user, then, is simply the set of points flg represent-
ing the average disposition over k past messages for each
email sender. The message variation M is de(cid:2)ned in terms
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:33 UTC from IEEE Xplore.  Restrictions apply. 
of the distance between the short term behavior s (a single
message’s disposition) and long term behavior l as:
(cid:1) = s (cid:0) l
M = q(cid:1)2
r + (cid:1)2
d + (cid:1)2
m + (cid:1)2
c + (cid:1)2
u
For example, assume that a user’s long term behavior
pro(cid:2)le is described in Table 1. This hypothetical user has
received 38 messages from three distinct email senders. For
the (cid:2)rst email sender, based upon a sample of ten messages,
this user generally reads messages (80% of the time), but
sometimes deletes (20%) or just marks a message as unread
(10%). Next, assume that this user receives a new message
from sender #1 which the user decides to read and delete.
Then, the message variation M for this message is:
(cid:1) = h(1 (cid:0) 0:8)r; (1 (cid:0) 0:2)d; (0 (cid:0) 0)m;
(0 (cid:0) 0)c; (0 (cid:0) 0:1)ui
M = p0:22 + 0:82 + 02 + 02 + ((cid:0)0:1)2
(cid:25) 0:8307
In addition to this de(cid:2)nition of M, we also tested an al-
ternative de(cid:2)nition for M that used a modi(cid:2)ed Euclidean
distance metric; we found, though, that this alternative met-
ric was generally much less effective than the one outlined
above. When pv = 1, then this alternative metric was used;
otherwise, the default de(cid:2)nition for M was used. For fur-
ther information on this alternative M, see [14].
4.3.2 Sender con(cid:2)dence C
The numbers of messages from different mail senders is ex-
tremely variable in long-term behavior data. A given user
in the period of one month can receive dozens of messages
from one sender while only receiving one from another. Ac-
curate modeling requires an adequate number of samples; to
determine whether we have seen a suf(cid:2)cient number of mes-
sages for predictive purposes, we need a per-sender measure
of our con(cid:2)dence in the model.
To measure this con(cid:2)dence, which we refer to as sender
con(cid:2)dence C, we divide the number of messages k received
from an email sender by a (cid:2)xed user-speci(cid:2)c threshold pC.
We also set the maximum possible C value to be 1. In other
words, we de(cid:2)ne C as:
C = min(
k
pC
; 1)
By default, pC = 10; thus, we are maximally con(cid:2)dent in
our model with respect to an email sender once we have
received ten or more messages from that sender.
Read all new msgs., mark as unread.