[]{#index.html}
::: book
::: titlepage
::: producttitle
[Red Hat Enterprise Linux]{.productname} [9]{.productnumber}
:::
# []{#index.html#idm140438210469568}构建、运行和管理容器 {.title}
## 在 Red Hat Enterprise Linux 9 上构建、运行和管理 Linux 容器 {.subtitle}
::: abstract
**摘要**
本文档论述了如何使用命令行工具（如 podman、buildah、skopeo、runrun 和
crun）在 Red Hat Enterprise Linux 9 系统中使用 Linux 容器。
:::
------------------------------------------------------------------------
:::
:::
[]{#con_beta-warning.html}
::: preface
::: titlepage
# []{#con_beta-warning.html#con_beta-warning}RHEL Beta 发行版本 {.title}
:::
红帽为所有具有红帽订阅的账户提供了对 Red Hat Enterprise Linux Beta
版本的访问权限。Beta 访问的目的是：
::: itemizedlist
-   为客户提供在正式发布之前测试主要特性和功能的机会，并提供反馈或报告问题。
-   提供 Beta 产品文档作为预览.Beta 产品文档正在开发中，可能随时更改。
:::
请注意，红帽不支持在生产环境中使用 RHEL Beta
版本。如需更多信息，请参阅[什么是 Red Hat Enterprise Linux 的 Beta
版本？我可以将 RHEL Beta
版本的安装升级到正式发行（GA）版本吗？](https://access.redhat.com/solutions/21531){.link}
:::
[]{#making-open-source-more-inclusive.html}
::: preface
::: titlepage
# []{#making-open-source-more-inclusive.html#making-open-source-more-inclusive}让开源更具包容性 {.title}
:::
红帽致力于替换我们的代码、文档和 Web
属性中存在问题的语言。我们从这四个术语开始：master、slave、黑名单和白名单。由于此项工作十分艰巨，这些更改将在即将推出的几个发行版本中逐步实施。详情请查看
[CTO Chris Wright
的信息](https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language){.link}。
:::
[]{#proc_providing-feedback-on-red-hat-documentation_building-running-and-managing-containers.html}
::: preface
::: titlepage
# []{#proc_providing-feedback-on-red-hat-documentation_building-running-and-managing-containers.html#proc_providing-feedback-on-red-hat-documentation_building-running-and-managing-containers}对红帽文档提供反馈 {.title}
:::
我们感谢您对文档提供反馈信息。请让我们了解如何改进文档。
::: itemizedlist
-   关于特定内容的简单评论：
    ::: orderedlist
    1.  请确定您使用 [*Multi-page HTML*]{.emphasis}
        格式查看文档。另外，确定 [**Feedback**]{.strong}
        按钮出现在文档页的右上方。
    2.  用鼠标指针高亮显示您想评论的文本部分。
    3.  点在高亮文本上弹出的 [**Add Feedback**]{.strong}。
    4.  按照显示的步骤操作。
    :::
:::
::: itemizedlist
-   要通过 Bugzilla 提交反馈，请创建一个新的问题单：
    ::: orderedlist
    1.  进入
        [Bugzilla](https://bugzilla.redhat.com/enter_bug.cgi?product=Red%20Hat%20Enterprise%20Linux%209){.link}
        网站。
    2.  在 Component 中选择 [**Documentation**]{.strong}。
    3.  在 [**Description**]{.strong}
        中输入您要提供的信息。包括文档相关部分的链接。
    4.  点 [**Submit Bug**]{.strong}。
    :::
:::
:::
[]{#assembly_starting-with-containers_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#assembly_starting-with-containers_building-running-and-managing-containers}第 1 章 从容器开始 {.title}
:::
Linux
容器已逐渐成为一种关键的开源应用程序打包和交付技术，将轻量级应用程序隔离与基于镜像的部署方法的灵活性相结合。RHEL
使用核心技术实现 Linux 容器，例如：
::: itemizedlist
-   控制组（cgroups）用于资源管理
-   命名空间（namespace）用于进程隔离
-   SELinux 用于安全性
-   安全多租户
:::
这些技术降低了安全漏洞的可能性，并为您提供了生成和运行企业级容器的环境。
Red Hat OpenShift 提供了强大的命令行和 Web UI 工具，用于以称为 pod
的单元形式构建、管理和运行容器。红帽允许您在 OpenShift
之外构建和管理单个容器和容器镜像。本指南描述了为执行在 RHEL
系统上直接运行这些任务所提供的工具。
与其他容器工具实现不同，这里描述的工具不以单一的 Docker 容器引擎和
`docker`{.literal}
命令为中心。相反，红帽提供了一组命令行工具，无需容器引擎即可操作。它们是：
::: itemizedlist
-   [**podman**]{.strong} - 用于直接管理 pod
    和容器镜像（`run`{.literal}、`stop`{.literal}、`start`{.literal}、`ps`{.literal}、`attach`{.literal}
    和`exec`{.literal} ，等等）
-   [**buildah**]{.strong} - 用于构建、推送和签名容器镜像
-   [**skopeo**]{.strong} - 用于复制、检查、删除和签名镜像
-   [**runc**]{.strong} - 为 podman 和 buildah 提供容器运行和构建功能
-   [**crun**]{.strong} - 可选运行时，可以配置，并为 rootless
    容器提供更大的灵活性、控制和安全性
:::
由于这些工具与开放容器项目(OCI)兼容，因此它们可用于管理由 Docker
和其他兼容 OCI 的容器引擎生成和管理的相同的 Linux
容器。然而，它们特别适用于直接在 Red Hat Enterprise Linux
中运行在单节点用例。
如需多节点容器平台，请参阅
[OpenShift](https://docs.openshift.com/){.link} 和 [使用 CRI-O
容器引擎](https://access.redhat.com/documentation/en-us/openshift_container_platform/3.11/html-single/cri-o_runtime/){.link}
以了解详细信息。
::: section
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#con_characteristics-of-podman-buildah-and-skopeo_assembly_starting-with-containers}Podman、Buildah 和 Skopeo 的特点 {.title}
:::
Podman、Skopeo 和 Buildah 工具被开发来取代 Docker
命令功能。这种场景中的每个工具都是非常轻量级的，并专注于功能的子集。
Podman、Skopeo 和 Buildah 工具的主要优点包括：
::: itemizedlist
-   以无根模式运行 - rootless
    容器更安全，因为它们在运行时不需要添加任何特权
-   不需要守护进程 -
    这些工具在空闲时对资源的要求要低得多，因为如果您没有运行容器，Podman
    就不会运行。另一方面，Docker 有一个守护进程始终在运行
-   原生 systemd 集成 - Podman 允许您创建 systemd
    单元文件，并将容器作为系统服务运行
:::
Podman、Skopeo 和 Buildah 的特点包括：
::: itemizedlist
-   Podman、Buildah 和 CRI-O
    容器引擎都使用相同的后端存储目录，`/var/lib/containers`{.literal}，而不是默认使用
    Docker 存储位置 `/var/lib/docker`{.literal}。
-   虽然 Podman、Buildah 和 CRI-O
    共享相同的存储目录，但它们不能相互交互。这些工具可以共享镜像。
-   要以编程方式与 Podman 进行交互，您可以使用 Podman v2.0 RESTful
    API，它可以在有根和无根的环境中工作。如需更多信息，请参阅
    [使用容器工具
    API](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html-single/building_running_and_managing_containers/index#using-the-container-tools-api_using-the-container-tools-cli){.link}
    一章。
:::
::: itemizedlist
**其他资源**
-   [向 Buildah、Podman 和 Skopeo
    \"问好\"](https://www.redhat.com/en/blog/say-hello-buildah-podman-and-skopeo){.link}
-   [Docker 用户的 podman 和
    Buildah](https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users){.link}
-   [Buildah - 构建 OCI
    容器镜像的工具](https://github.com/containers/buildah){.link}
-   [Podman -
    运行和管理容器的工具](https://github.com/containers/libpod/tree/master/cmd/podman){.link}
-   [Skopeo -
    复制和检查容器镜像的工具](https://github.com/containers/skopeo){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#con_overview-of-podman-commands_assembly_starting-with-containers}Podman 命令概述 {.title}
:::
表 1.1 显示您可以在 `podman`{.literal} 命令中使用的命令列表。使用
`podman -h`{.literal} 来查看所有 Podman 命令的列表。
::: table
[]{#assembly_starting-with-containers_building-running-and-managing-containers.html#idm140438164064400}
**表 1.1. podman 支持的命令**
::: table-contents
  ------------------------ ------------------------------------- -------------------------------- ----------------------------------------------------------------
  podman 命令              描述                                  podman 命令                      描述
  [**attach**]{.strong}    附加到正在运行的容器                  [**commit**]{.strong}            从更改的容器创建新镜像
  [**build**]{.strong}     使用 Containerfile 指令构建镜像       [**创建**]{.strong}              创建一个容器，但不启动它
  [**diff**]{.strong}      检查容器文件系统的更改                [**exec**]{.strong}              在正在运行的容器中运行进程
  [**export**]{.strong}    将容器的文件系统内容导出为 tar 归档   [**help, h**]{.strong}           显示某个命令的命令或帮助列表
  [**history**]{.strong}   显示指定镜像的历史记录                [**images**]{.strong}            列出本地存储中的镜像
  [**import**]{.strong}    导入 tarball 创建文件系统映像         [**info**]{.strong}              显示系统信息
  [**inspect**]{.strong}   显示容器或镜像的配置                  [**kill**]{.strong}              向运行的一个或多个容器发送特定信号
  [**load**]{.strong}      从存档加载镜像                        [**login**]{.strong}             登录到容器 registry
  [**logout**]{.strong}    从容器 registry 中登出                [**logs**]{.strong}              获取容器日志
  [**mount**]{.strong}     挂载可运行的容器根文件系统            [**pause**]{.strong}             暂停一个或多个容器中的所有进程
  [**ps**]{.strong}        列出容器                              [**port**]{.strong}              列出容器的端口映射或特定映射
  [**pull**]{.strong}      从 registry 中拉取镜像                [**push**]{.strong}              将镜像推送到指定的目的地
  [**restart**]{.strong}   重启一个或多个容器                    [**rm**]{.strong}                从主机中删除一个或多个容器。如果要运行，添加 `-f`{.literal}。
  [**rmi**]{.strong}       从本地存储中移除一个或多个镜像        [**run**]{.strong}               在新容器中运行命令
  [**save**]{.strong}      将镜像保存到存档中                    [**search**]{.strong}            在 registry 中搜索镜像
  [**start**]{.strong}     启动一个或多个容器                    [**stats**]{.strong}             为一个或多个容器显示 CPU、内存、网络 I/O、块 I/O 和 PID 百分比
  [**stop**]{.strong}      停止一个或多个容器                    [**tag**]{.strong}               为本地镜像添加额外名称
  [**top**]{.strong}       显示容器的运行进程                    [**umount, unmount**]{.strong}   卸载正常工作容器的根文件系统
  [**unpause**]{.strong}   取消暂停一个或多个容器中的流程        [**version**]{.strong}           显示 podman 版本信息
  [**wait**]{.strong}      在一个或多个容器上阻止                                                  
  ------------------------ ------------------------------------- -------------------------------- ----------------------------------------------------------------
:::
:::
::: itemizedlist
**其他资源**
-   [Podman
    基础知识备忘单](https://developers.redhat.com/cheat-sheets/podman-basics-cheat-sheet){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#con_running-containers-without-docker_assembly_starting-with-containers}不使用 Docker 运行容器 {.title}
:::
红帽从 RHEL 8 中删除了 Docker 容器引擎和 docker 命令。
如果您仍然希望在 RHEL 中使用 Docker，可以从不同的上游项目获取
Docker，但其在 RHEL 8 中不支持。
::: itemizedlist
-   您可以安装 `podman-docker`{.literal} 软件包，每次运行
    `docker`{.literal} 命令时，它实际上是运行 `podman`{.literal} 命令。
-   Podman 还支持 Docker Socket API，因此 `podman-docker`{.literal}
    软件包还在 `/var/run/docker.sock`{.literal} 和
    `/var/run/podman/podman.sock`{.literal}
    之间建立了一个链接。因此，您可以继续使用 `docker-py`{.literal} 和
    `docker-compose`{.literal} 工具运行 Docker API 命令，而无需 Docker
    守护进程。Podman 将为请求提供服务。
-   `podman`{.literal} 命令和 `docker`{.literal} 命令一样，可以
    `Containerfile`{.literal} 或 `Dockerfile`{.literal}
    构建容器镜像。可以在 `Containerfile`{.literal} 和
    `Dockerfile`{.literal} 中使用的命令一样。
-   `podman`{.literal} 不支持的 `docker`{.literal} 命令选项包括
    network、node、plugin（`podman`{.literal}
    不支持插件）、rename（`podman`{.literal} 使用 rm 和 create
    来重命名容器）、secret、service、stack 和 swarm（`podman`{.literal}
    不支持 Docker Swarm）。容器和镜像选项用于运行直接在
    `podman`{.literal} 中使用的子命令。
:::
::: itemizedlist
**其他资源**
-   [Docker 用户的 podman 和
    Buildah](https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#con_choosing-a-rhel-architecture-for-containers_assembly_starting-with-containers}为容器选择 RHEL 架构 {.title}
:::
红帽为以下计算机架构提供容器镜像和容器相关的软件：
::: itemizedlist
-   AMD64 和 Intel 64（基础镜像和分层镜像；不支持 32 位构架）
-   PowerPC 8 和 9 64 位（基本镜像和大部分层次镜像）
-   64 位 IBM Z（基本镜像和大多数层次镜像）
-   ARM 64-bit（仅用于基础镜像）
:::
虽然还没有在所有构架中都首先支持所有红帽镜像，但几乎所有镜像现在都包含在所有列出的构架中。
::: itemizedlist
**其他资源**
-   [通用基础镜像(UBI)：镜像、存储库和软件包](https://access.redhat.com/articles/4238681){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#proc_getting-container-tools_assembly_starting-with-containers}获取容器工具 {.title}
:::
此流程演示了如何安装包含 Podman、Buildah、Skopeo 和 runc 工具的
`container-tools`{.literal} 模块。
::: orderedlist
**流程**
1.  安装 RHEL。
2.  注册
    RHEL：输入您的用户名和密码。用户名和密码与您红帽客户门户网站的登录凭证相同：
    ``` screen
    # subscription-manager register
    Registering to: subscription.rhsm.redhat.com:443/subscription
    Username: ********
    Password: **********
    ```
3.  订阅 RHEL。
    ::: itemizedlist
    -   要自动订阅 RHEL：
        ``` literallayout
        # subscription-manager attach --auto
        ```
    -   要按池 ID 订阅 RHEL：
        ``` literallayout
        # subscription-manager attach --pool PoolID
        ```
    :::