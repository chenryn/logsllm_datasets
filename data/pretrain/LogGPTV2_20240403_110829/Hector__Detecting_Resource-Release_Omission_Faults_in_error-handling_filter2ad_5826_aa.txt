title:Hector: Detecting Resource-Release Omission Faults in error-handling
code for systems software
author:Suman Saha and
Jean-Pierre Lozi and
Ga&quot;el Thomas and
Julia L. Lawall and
Gilles Muller
Hector: Detecting Resource-Release Omission Faults
in Error-Handling Code for Systems Software
Suman Saha
LIP6-Regal
Jean-Pierre Lozi
LIP6-Regal
Ga¨el Thomas
LIP6-Regal
Julia L. Lawall
Inria/LIP6-Regal
Gilles Muller
Inria/LIP6-Regal
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Omitting resource-release operations in systems
error handling code can lead to memory leaks, crashes, and
deadlocks. Finding omission faults is challenging due to the
difﬁculty of reproducing system errors, the diversity of system
resources, and the lack of appropriate abstractions in the C
language. To address these issues, numerous approaches have
been proposed that globally scan a code base for common
resource-release operations. Such macroscopic approaches are
notorious for their many false positives, while also leaving many
faults undetected.
We propose a novel microscopic approach to ﬁnding resource-
release omission faults in systems software. Rather than gener-
alizing from the entire source code, our approach focuses on
the error-handling code of each function. Using our tool, Hector,
we have found over 370 faults in six systems software projects,
including Linux, with a 23% false positive rate. Some of these
faults allow an unprivileged malicious user to crash the entire
system.
I.
INTRODUCTION
Any computing system may encounter errors, such as inap-
propriate requests from supported applications, or unexpected
behavior from malfunctioning or misconﬁgured hardware. If the
system’s software, such as its operating system, programming-
language runtime, or web server, does not recover from these
errors correctly, they may lead to more serious failures such
as a crash or a vulnerability to an attack by a malicious user.
Therefore, correct error recovery is essential when a system
supports long-running or critical services. Indeed, the ability to
recover from errors has long been viewed as a cornerstone of
system reliability [1], and much of systems code is concerned
with error detection and handling. For example, 48% of Linux
2.6.34 driver code is found in functions that handle at least
one error.
A critical part of recovering from an error is to release any
resources that the error has made incoherent or unnecessary.
Omitting a needed resource release can lead to crashes,
deadlocks, and resource leaks. Resource-release omission faults
are a particular instance of the general problem of checking
that API usage protocols are respected, that has received
substantial attention [2], [3], [4], [5]. A challenge, however,
is to identify the resource-release operations that are required.
Indeed, systems code manipulates many different types of
resources, each associated with their own dedicated operations,
making it difﬁcult for any given developer to be familiar with
all of them. Furthermore, the protocol for releasing a given
type of resource can vary from one subsystem to another,
and can even vary within a single function, depending on the
resource’s state. Finally, systems code is written in C, which
unlike more modern programming languages such as Java, does
not provide any speciﬁc abstractions for resource management
or error-handling code.
In the context of the general problem of checking API
usage, a number of works have proposed to complement
fault-ﬁnding tools with a preliminary phase of speciﬁcation
mining to ﬁnd sets of operations that should occur together in
the code [3], [6], [7], [8], [9], [10], [11], [12], [13], [14]. These
approaches follow a macroscopic strategy, identifying common
sets of operations by a global scan of the entire code base or a
sufﬁciently large execution history. In practice, however, such
global scans result in many false positives [15], which in turn
lead to many false positives among the found faults. To reduce
the rate of false positives, speciﬁcation-mining approaches
typically limit the reported results to the most frequently
occurring operations. The resulting speciﬁcations, however, are
insufﬁcient to ﬁnd resource-release omission faults involving
rarely used functions, which are typical of systems code.
In this paper, we propose an alternative approach that
speciﬁcally targets the properties of error-handling code (EHC)
in C systems software. We observe that when one block of
error-handling code needs a given resource-release operation,
nearby error-handling code typically needs the same operation.
Based on this observation, we propose a microscopic resource-
release omission fault ﬁnding algorithm, based on a mostly
intraprocedural, ﬂow and path-sensitive analysis, that targets and
exploits the properties of error-handling code. Our algorithm
is resistant to false positives in the set of resource acquisition
and release operations, resulting in a low rate of false positives
in the fault reports, and is highly scalable. It ﬁnds resource-
release omission faults irrespective of the number of times the
associated acquisition and release operations are used together
across the code base, and is independent of the strategy for
identifying them. It focuses on whether a resource release is
needed, based on information found in the same function, and
is not led astray by information derived from other parts of the
system. As a proof of concept, we provide an implementation,
Hector,1 that uses heuristics and mostly intraprocedural analysis,
including a lightweight intraprocedural alias analysis, to identify
resource-related operations. Hector does not require any ﬁxed
or user-provided list of resource-release operations and does
not depend on the most frequent results obtained by a global
scan, but still achieves a low rate of false positives.
1The ﬁrst three letters of “Hector” are a permutation of “EHC.”
The main contributions of our work are:
• We highlight the fact that resource-release omission
faults in error-handling code are an important problem,
that may lead to crashes, resource unavailability, and
memory exhaustion. Much error-handling code is rarely
executed, making faults hard to ﬁnd by testing.
• We show that existing tools for ﬁnding faults in systems
code are unlikely to ﬁnd many of these faults due to
these tools’ reliance on the frequency of function uses
to reduce the number of false positives.
• We propose a resource-release omission fault detecting
algorithm based on the observation that patterns of code
found within a single function can provide insight into
the requirements on the rest of the code within the
same function. The applicability of the approach is
illustrated by the fact that in the considered systems
software, up to 43% of the code is in functions that
contain multiple blocks of error-handling code.
• Using Hector, we ﬁnd 371 resource-release omission
faults in the widely used systems software Linux, PHP,
Python, Apache, Wine, and PostgreSQL, with a false
positive rate of only 23%. 52% of the found faults
involve pairs of resource acquisitions and releases that
are used together in the code fewer than 15 times,
making the associated faults unlikely to be detected by
previous speciﬁcation-mining based approaches. We
have submitted patches based on many of our results
to the developers of the concerned software, and these
patches have been accepted or are awaiting evaluation.
• We ﬁnd that 257 of the 285 faults found in Linux
cause memory leaks, while 9 can lead to deadlocks.
The rest of this paper is organized as follows. Section II
presents some examples that motivate our work. Section III
presents our fault-ﬁnding algorithm, and Section IV describes
the design choices taken in the implementation of Hector.
Section V evaluates the results obtained by applying Hector
to large systems software. Finally, Section VI presents related
work and Section VII concludes.
II. MOTIVATION AND BACKGROUND
We ﬁrst present some faults in error-handling code that have
been found using Hector. These examples reveal that faults in
error-handling code can have an impact that goes beyond just
the loss of a few bytes due to an unreleased memory region. We
then give an overview of error-handling in systems software.
A. Linux resource-release omission faults
We motivate our work using three representative crashes
and memory leaks derived from a variety of faults in Linux
error-handling code. One of these faults was previously found
by a Linux user; in this case, the bug report and Linux commit
log contain no evidence that the fault was found using other
tools. The other two faults were previously unreported; we
have reported them to the appropriate maintainers and provided
patches.2 The unreported faults involve rarely used acquisition
2http://lkml.org/lkml/2012/4/14/41, http://lkml.org/lkml/2012/5/3/230
and release functions that would be unlikely to be reported by
existing speciﬁcation-mining based approaches.
Crash following a resource conﬂict. In January 2009, a
user of the Fedora Rawhide (development) kernel found that
installing the w83627ehf driver crashed his machine.3 Fig. 1
shows an extract of the faulty code. It performs a series of
operations, on lines 1, 4, 6, 10, and 13, that may encounter
an error. If an error is detected, the function branches to
the error-handling code (boxed) on lines 3, 5, 8, 12 and 15,
respectively. In the ﬁrst three cases, the error-handling code
correctly jumps to labels at the end of the function that execute
an increasing sequence of unregister operations, according to
the acquisitions that have been performed so far. The error-
handling code provided with the ACPI resource conﬂict check
on line 10, however, jumps to the last label in the function,
which just returns the error code. The device remains registered
even though it does not exist, and subsequent operations by the
kernel on the non-existent device cause the system to crash.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
err = platform driver register(&w83627ehf driver);
if (err)
goto exit;
if (!(pdev = platform device alloc(. . .)))
goto exit unregister;
err = platform device add data(. . .);
if (err)
goto exit device put;
. . .
err = acpi check resource conﬂict(&res);
if (err)
goto exit;
Omission fault
err = platform device add resources(pdev, &res, 1);
if (err)
goto exit device put;
platform device put(pdev);
. . .
exit device put:
exit unregister:
exit:
return err;
platform driver unregister(&w83627ehf driver);
Fig. 1. w83627ehf driver containing an omission fault
(From drivers/hwmon/w83627ehf.c, sensors_w83627ehf_init)
Note that the error-handling code starting on line 3 correctly
does not release any resources, because none have been
successfully acquired at
this point. Thus, ﬂow and path
sensitivity are necessary to determine what resource-release
operations are needed at each point in a function.
Memory leak in the handling of invalid user inputs.
Using Hector, we found a previously unreported memory-
release omission fault in the autofs4 IOCTL function. As shown
in Fig. 2, the error-handling code starting on line 11 does not
release the resource param that was previously released in
the error-handling code starting on lines 6 and 8. Using a 9-
line program, we were able to repeatedly invoke the IOCTL
function with an invalid command argument, and use up almost
all of the 2GB of memory on our test machine in under one
minute. This fault is exploitable by an unprivileged user who
has obtained the CAP_MKNOD capability. We have veriﬁed
that an unprivileged user can obtain this capability using a
previously reported NFS vulnerability.4 Using this vulnerability,
an attacker, having usurped the IP address of an NFS client, is
able to create an autofs4 device ﬁle accessible to unprivileged
3https://bugzilla.redhat.com/show bug.cgi?id=483208
4http://lwn.net/Articles/328594/
param = copy dev ioctl(user);
if (IS ERR(param))
return PTR ERR(param);
err = validate dev ioctl(command, param);
if (err)
if (cmd == AUTOFS DEV IOCTL VERSION CMD)
goto out;
goto done;
fn = lookup dev ioctl(cmd);
if (!fn) {
AUTOFS WARN(". . .", command);
return −ENOTTY;
}
. . . /* more error-handling code jumping to out */
if (err >= 0 && copy to user(user, param, . . .))
err = −EFAULT;
done:
out:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
Omission fault
Fig. 3. ReiserFS code containing an omission fault
(From fs/reiserfs/journal.c, journal_init)
users on the NFS server. Then, the attacker, connected as an
unprivileged user on each NFS client machine, can exploit the
autofs4 fault to exhaust all the memory of each client machine
by issuing invalid IOCTL calls, preventing other programs from
allocating memory and causing them to fail in unpredictable
ways. Reclaiming the lost memory requires rebooting each
affected machine. The fault has been present since the code
was introduced into the Linux kernel in version 2.6.28 (2008),
and is still present in Linux 3.6.6.
free dev ioctl(param);
return err;
Fig. 2. Autofs4 code containing an omission fault
(From fs/autofs4/dev-ioctl.c, _autofs_dev_ioctl)
Memory leak in the handling of an invalid ﬁle system.
Using Hector, we found a previously unreported memory-
release omission fault in the initialization of the ReiserFS ﬁle
system journal. The omission occurs when there is an attempt
to mount the ﬁle system and some parameters stored within
the ﬁle system are found to be invalid. As shown in Fig. 3, the
error-handling code starting on line 16 does not release bhjh
that was previously released in the error-handling code starting
on line 9. An unprivileged user who mounts a ﬁle system from
an external disk drive that has been previously formatted with
invalid parameters can trigger the fault. On a modern Linux
distribution, such a ﬁle system is normally mounted using
autofs, which imposes a delay between ﬁle-system mounts,
thus limiting the possible damage. Older systems, however,
may be conﬁgured to allow a user to mount such a ﬁle system
directly. In the latter case, as an unprivileged user, we were
able to use up almost all of the 2GB of memory on our test
machine within an hour, by repeatedly mounting the ﬁle system.
The fault was introduced in Linux 2.6.24 (2008), and is still
present in Linux 3.6.6.
B. Systems error-handling code
To assess the importance of error-handling code in systems
software, we consider the amount of code that is found within
functions that contain error-handling code and the kinds of
errors that are detected. We also study the usage frequency of
various resource acquisition and release functions, to estimate
the applicability of speciﬁcation-mining based methods to
ﬁnding omitted resource releases. Our study primarily focuses
on the drivers, sound (sound drivers), net (network
jh = (struct reiserfs journal header *)(bhjh−>b data);
&& (le32 to cpu(. . .) != sb jp journal magic(rs))) {
bhjh = journal bread(sb, . . .);
reiserfs warning(sb, . . .);
goto free and return;