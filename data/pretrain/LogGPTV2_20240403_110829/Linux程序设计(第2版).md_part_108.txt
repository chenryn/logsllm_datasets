我们先把GNOME体系结构的特性总结一下：
·它具有功能强大、品种丰富的素材库。
·GNOME桌面的前端提供了控制板、控制中心、文件管理器等友好而又易于使用的应用程
序。
·它定制实现了·-个名为ORBi的CORBA系统，使软件对象之间能够有效地相互通信。
·它具有一个名为Bonobo的框架结构允许在应用程序里嵌人文档，它类似于微软公司提出的
“对象链接和嵌入”（ObjectLinking and Embedding，简称OLE）方案。举个例子，它允许
把一份电子表嵌人到一个文本文档里去。
·它是一个完整的国际化系统，带有对Unicode编码方案和ComplexTextProcessing（复杂文
本处理）系统的支持，而这些是显示中东和南亚地区文字时所必需的
·具有输出打印框架结构。
GNOME确实很棒！我们现在先把复杂的东西抛在脑后，来看看我们将在屏幕上看到的东西
桌面（如图17-1所示）。
图17-1
加入jaVa编程群：524621833
---
## Page 578
560Linux程序设计
17.1.2GNOME桌面
当我们把GNOME和所有必要的库文件正确地安装好以后（X启动脚本的最后一行必须是
"execgnome-session”。根据你使用的计算机平台和它具体的配置情况，X启动脚本可能是
~/.xinitrc、.xsession或.Xcliebts这几个脚本之一）.我们就可以用下面这个熟悉的命令启动桌面了：
S startx
熟悉桌面最好的办法就是使用它！你很快就会发现它的设计是多么的优秀，它对用户又是
多么的友好、面且，它又是多么巨大地改善了Linux的使用性
GNOME桌面的核心是它的控制板，这是一个配置性非常好的任务条。各个独立的控制板可
以被置在屏幕的任意边角，程序的快捷键、菜单的快捷键和小的应用程序（applet，人们经常
称之为“插件程序”）都可以放置在控制板里。点击控制板两端向外的箭头可以把它隐藏起来，
它们滑出屏幕的姿态是极其顺畅，就像动画一样一一你肯定会百看不厌！
你当然可以随心所欲地选择与GNOME一起使用的窗口管理器，它们的作用是控制窗口在屏
幕上的摆放位置和外观，但其中有几个比其他的更符合GNOME的要求。最流行的选择是
“Enlightenment”和“IceWM”。这两个都是百分之百符合GNOME要求的，你可以通过它们提
供的数不胜数的选项对自己桌面的外观进行定制。
GNOME的文件管理器是GNOME版的“mc”（midnightcommander）程序。MSWindows用
户对文件目录树和完全的拖放功能肯定会觉得如鱼得水。我们可以方便地完成文件的拷贝、移
动、换名、改变文件属主和优先级等操作。
17.1.3在GNOME里利用GTK+设计程序
我们现在开始最激动人心的部分—用GTK+来设计程序！我们先通过GTK+基本素材的使
用示例来学习一些必要的基本知识，然后前进到更复杂的素材，最后用它们来编写一个GNOME
应用程序。
在上路之前，我们先来看一些我们将会用到的数据类型和素材层次结构方面的概念。
1.数据类型
GLIB定义有自己的基本数据类型（datatype）集合，它们中的大多数都有直接对应的C语言标
准数据类型。这使得不同计算机平台之间的代码移植工作更容易实现；并且在某些情况下一—比如
用gpointer代替void*的情况下，它可以改进程序的可读性，使之更容易理解。坚持使用这些新的数
据类型可以保证我们的代码即使在其底层实现发生了变化的情况下仍然能够继续工作（见表17-1。
裹17-1
GLIB类型
C语言类型
gchar
char
gshort
short
glong
1ong
gint
int
gboolean
char
gpointer
voi d*
加入jaVa编程群：524621833
---
## Page 579
第17章使用GTK+进行GNOME程序设计561
2.素材的层次结构
GNOME和GTK+中的素材都是一个层次结构上的成员，这样对一组素材都适用的两数（比
如gtk_widget_show函数）就只需要被实现一次。为了尽量减少重复性的代码编写工作，新的素
材是从现有素材推导出来的，程序员只需要编写出新素材的新功能就大功告成。我们来看看
GnomeApp素材的素材层次结构，它是GNOME中的顶层窗口素材，下面是我们节选自“Gnome
UserInterfaceLibraryReferenceManual（《GNOME参考手册-用户操作接L库》）中的内容：
tkcbiet
-*..- Gtka1deet
-*GA k(retainor
-.---GtkBin
+**+-Gt kssndo%
*-/ncmeApp
它告诉我们GnomeApp素材是从GtkWindow素材推导出来的，而iGtkWindow素材又是从
GtkBin素材里推导出来的，依次类推。根据这个层次结构，我们就可以把GtkWindow、GtkBin、
GtkContainer、GtkWidget和GtkObject的函数用在GnomeApp素材上。
用米创建素材的--切函数，比如gnome_app_new函数等，返回的都是一个GtkWidget指针，
GtkWidget是最基本的索材。这就意味着如果我们想调用GnomeApp专用的函数，比如调用
gnome_app_set_menus（GnomeApp*app，GtkMenuBar*menubar）的时候，我们就必须用一个宏定
义（这个例子对应的是GNOME_APP）把GtkWidget类型映射为一个GnomeApp类型。我们之所
以能够这样做，正是因为GnomeApp是从GtkWidget推导出来的。如果类型映射不正确，编译器
是不会发现的，但当程序运行时GTK+库会向控制台报告出现了这样的错误。GTK+在报告错误
方面做得很好，对我们的调试工作有很大的帮助。我们将看到许多使用宏定义进行类型映射的
例子。
现在，我们要暂时离开素材这个话题来编写我们的第一个GNOME程序，它将在屏幕上显示
一个窗口。
动手试试：创建窗口
#include 
int sain (int argc, char *argv[1)
Gtkwidget *apexa
gtk_main ();
return 0:
在开始编译示例程序的代码之前必须先做好一项重要的工作：把全部GNOME库和GTK+库
都安装好，并且把这些库文件的路径都设置好。
为了简化编译工作，GNOME自己带有一个名为gnome-config的shell脚本程序，它的作用是
向编译器提供编译操作所需要的正确标志，我们要用反引号（）把它的输出追加在编泽命令行
的尾部。
加入jaVa编程群：524621833
---
## Page 580
562
Linux程序设计
请输人下面的命令来编译程序gnomel.c（注意反引号和双短划线！）：
编详完成后请在一个GNOME桌面的终端窗口里执行它。
如果你在对程序进行编译时遇到了麻烦，可以在www.gnome.org站点查到常见问题的详细原
因和解决办法。
这个示例程序在运行时会弹出一个长宽为200×200点阵的空白窗口，如图17-2所示。
Wndow
图17-2
你可以对这个窗口进行移动、尺寸调整和关闭等操作，但它并不会让我们返回到shell提示
符去，这是因为我们还没有给它设置一个退出动作的处理器。
操作注释：
我们来一行一行地解释这段代码。首先，我们用“#include”语句给程序添加上
必要的头文件，它将负责处理好一切与GNOME库和GTK+库有关的定义。在main函数里，我们
声明了一个指向我们窗口对象的GtkWidget指针app，然后调用了gnome_init函数，它的作用是对
各个库进行了初始化、设置对会话的管理和加载用户的首选设置。我们给gnome_init传去这个应
用程序的id（本例中是“example”）、它的版本号“0.1”以及main函数接收到的命令行参数；这
都是供GNOME内部使用的。
接下来我们调用gnome_app_new创建出我们的窗口。这个函数需要的参数有：应用程序的名
字，它可以与在gnome_init函数里给出的字符串不同（它也是内部使用的）；窗口的标题，我们
这个例子里用的是“windowtile”，但它可以是NULL。千万不要被这个函数的名字给弄糊涂了，
它的作用是创建一个顶层窗口而不是一个“新应用程序”，我们每次想创建一个新窗口时都要调
用gnome_app_new。为了能够在屏幕上看见我们创建的窗口，我们又调用了gtk_widget_show函
加入jaVa编程群：524621833
---
## Page 581
第17章使用GTK+进行GNOME程序设计
563
数。最后，我们通过gtk_main把控制移交给GNOME，这样才能对各种事件、鼠标点击、按钮动
作等进行响应和处理。
一旦调用了gtk_main就再也回不来了-—我们将只能通过回调函数（callback）把用户事件和
我们的程序中的函数连接起来以完成进一步的动作。我们将在下一个例子里看到几个回调函数。
动手试试：无处不在的“HelloWorld”
在第一个例子里加上下面带阴影的内容或做相应的修改：
ine1ude 
statsc void button_cl1ekediGtkoiidget *button. gpointer data)
char *string • data;
g_prant (string) :
inL main fint aigc, char *argv[]1
Gtkridget *betton;
gnone_int(*exanple*, *0.1, argc. argv):
a[cuexa,] mau"ddeauouf= dde
button = gtk_button_nev_with_label (*Re1lo. \n GNOME wor1d:*1:
gtk_signal_connect {GrK_o8JECT (app1, *delete_event*,
GTK_SIGNAL_FUNC (gtk_main_quit1,
MULL1:
gtk_signa1_connect (GTK_oBJEC7 (button),*clicked*,
GTK_SIGNAL_FtNC (button_clicked) .
*Ouch:\n'):
gnome_app_set_contents (GNOME_APP (app). button);
gtk_main ():
return 0;
运行这个程序的时候，我们将看到一个如图17-3所示的窗口。
Eaa
图17-3
加入iava编程群：524621833
---
## Page 582
564Linux程序设计
操作注释：
我们使用gtk_button_new_with_label函数创建了-个带标题签的按钮并通过gnome_app_set
_conents把它放在了窗口里，我们用GNOME_APP宏定义把GtkWidget指针映射为GnomeApp类型。
我们还注册了两个回调函数，其中…个通过调用GLIB的g_print函数（这个库函数通常用于
调试目的，它与printf的不同之处是它的输出可以被覆盖）在按钮每次被点击时输出字符串
“Ouch！；第二个会在窗口被关闭时调用gtk_main_quit函数使我们的程序干净利落地退出运行。
在我们的例子里省略了对GNOME函数返回结果的检查，但在成熟的窗口环境里，那些“重
量级”应用软件必须对它们进行检查！
下面来仔细研究一下程序里的信号处理器函数。
3.信号和回调函数的处理
每当鼠标移动、鼠标进出素材、按钮被按下、开关按钮切换了状态、菜单项被选取等事件
发生的时候，就会有一个信号被送到应用程序，然后信号再被传递到一个回调函数去（GNOME
信号与我们在第10章里介绍的UNIX信号可不是一回事）应用程序对大多数信号都没有什么兴
趣，但一般都要对其中的几个进行处理并采取一定的行动。一个绘图程序可能需要在以后按下
每个鼠标按钮时绘制·条直线，面一个音响播放程序可能需要在一个滑块素材被调节时增减输
出音量。在GNOME和GTK+里，我们通过调用gtk_signal_connect函数把信号和处理器函数联系
在一起。下面是它的语法定义：
guint gtk_sigmal_connect (Gtkobject *object， const gchar *name, Gtksigmalrunc func,
pointer data)
它有四个参数，这四个参数告诉GNOME和GTK+这个回调函数是与哪一个素材关联着的、
要对哪--个信号进行处理、信号出现时将要被调用的函数是哪一个，以及将要传递给信号处理
函数的任何其他数据。如果我们现在回过头来再看看第一个例子，就可以明白其中的下面这个
调用是什么意思了：
gtk, signal.connect（Grk_oBJscr (button),*clicked*,
GTK_SIGNAL_PUNC (button_ellcked).
"Ouchi\n*):
出来。注意GTK+把信号看做是字符串，不像普通的信号处理过程那样把它看做是常数，因此
GTK+里的信号拼写错误将在运行时才会被捕提到。
不同的素材会发送出不同的信号来，与按钮有关的信号见表17-2：
表17-2
信号
动作
clicked
按钮被点击（即按下和释放）
pressed
按钮被鼠标按下
released
按钮被释放
enter
鼠标移动进人按钮上空
leave
鼠标移动离开按钮上空
加入jaVa编程群：524621833
---
## Page 583
第17章使用GTK+进行GNOME程序设计
565
这些全都是为GNOME用户操作界面编写程序的基本要素。在本章其余的例子里，我们将对
一些更复杂的素材进行学习。
不要惊讶于GTK+和Tk有那么多的相似之处。这可不是巧合！
在“HelloWorld”例子里，窗口会收缩为只包容着那个按钮素材，这也许正是你的预期效
果。事实上，窗口只能有一个子素材，如果你试图创建并在窗口里增加一个按钮，它就会取代
第一个按钮。大家可能会问了：“我怎样才能在窗口里放置不止一个的素材呢？”这个问题把我
们带到包容器概念上来了。
4.包客器
GTK+是一个基于包容器的工具包，即只有给素材指定一个父包容器才能把它们摆放到窗口
里去。窗口是一个单素材包容器，因此GTK+需要使用看不见的“包装箱”（packingbox）来容
别由gtk_hbox_new和gtk_vbox_new创建。如果想把素材放到这些包装箱里去，我们只需为每个
素材调用gtk_box_pack_start函数并指定儿个格式选项就行了（如图17-4所示）
下面的代码段演示了创建一个竖直包装箱并在其中放置两个标题签素材的操作过程：
Gtkdget *vbox，*label:
gboolean Fi1lTRUE;
gboolean expand = FALSE;
gint padding = 2:
vbox = gtk_vbox_new (honogenecus. spacing);
1abel = gtk_1abel_new(*This is the top label widget*);
gtk_box_pack_start (GTK_Box (vbox1,1abel. expand, fi11, padding):
label = gtk_1abel_new (*This is the bottom label widget*};
gtk_box_pack_start
(GTK_BOX {Vbox), 1abel. FALSE,TRUE, 2）;
Verticalpcking Box
This is the top label widget
Thisisthe bottom label widget
图17-4
我们对第二个标题签使用了expand、fil和padding属性的典型值。它们的含义见表17-3中的
表17-3
参
数
说明
homogeneous gboolean