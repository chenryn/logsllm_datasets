for active measurements, including opening TCP and UDP sock-
ets, setting socket options, and performing both blocking and non-
blocking I/O operations.
fathom.proto supplies clients and servers for common
application-layer protocols including DNS, multicast DNS, HTTP,
and UPnP.
fathom.system realizes controlled access
to system-
provided tools and information to invoke select services on the
host that can provide information otherwise unavailable or incon-
venient to re-implement. Fathom sanitizes the call arguments, han-
dles onerous output parsing, and returns results to the caller while
abstracting platform speciﬁcs. Examples in this family include the
host’s ping and traceroute implementations.
In contrast to other
runtime plugins such as Java (see § 5.1), Fathom’s API never al-
lows invocation of arbitrary system commands.
Lastly, fathom.utils collects additional helpful APIs, par-
ticularly access to aggregate statistics for passively collected
data (metrics.*) and conﬁguration settings for the browser
(browser.*), such as proxy conﬁguration.
low-level
fathom.utils.metrics.* performs
system
sampling and monitors the browser’s HTTP activity. Fathom cur-
rently conducts passive data collection in three domains: each web
page, the browser itself, and the host’s system and network resource
usage. For web pages, collection includes socket connection times,
DNS resolution times, HTTP response times and goodput, as well
as the trigger times for DOMContentLoaded and Load page
events.2 From the browser, it collects its overall memory use as
well as network transmission statistics. Finally, from the host sys-
tem it collects CPU load, memory use and availability, per-process
load, and network interface statistics including packet/byte coun-
ters, transmission errors, and—for wireless links—signal strength
and noise levels. Per-page CPU load proves tricky to measure.
Fathom can expose any browser speciﬁc performance measurement
API [37] to web pages to measure JavaScript overhead, but authors
would still need to instrument their code for reliable proﬁling. Fur-
thermore, the CPU load induced by active embedded objects such
as Flash manifests outside of the browser.
Fathom keeps a history of these metrics to provide baseline per-
JavaScript code using Fathom
formance metrics for the pages.
can then obtain aggregate statistics of these data points in order
to diagnose detected anomalies in the document loading process.
Fathom stores browser and system metrics in client-side persistent
storage, while the web page metrics end up in the site’s HTML5
localStorage facility. This separation of storage for the base-
line metrics enables websites to selectively retain or discard col-
lected datasets for individual browsing sessions, reduces Fathom’s
persistent storage requirements, and minimizes information leak-
age across different origins.
Since Fathom monitors the browser’s entire HTTP activity, web
pages not requiring Fathom’s capabilities will also incur an over-
head in page load times. To exclude any added overhead, we pro-
pose that sites that require Fathom’s diagnostic capabilities could
explicitly request them. To signal to the server that the client sup-
ports Fathom, Fathom adds an X-Fathom header in the HTTP re-
quest for each page. Web sites that wish to enable diagnostic mea-
surements for the page and its additional resources echo this header
in their response. Via local browser conﬁguration the user can re-
quest passive data collection for sites as needed.
Comparison: Flash and Java constitute the main competitors to
Fathom, so it behooves us to compare their capabilities directly.
Fathom’s network I/O capabilities subsume Flash’s, with the ex-
ception of the latter’s built-in multimedia streaming capabilities.
2When downloading a page’s DOM has ﬁnished, the browser trig-
gers a DOMContentLoaded event. When the page’s additional
components (such as images) have ﬁnished downloading as well,
the browser triggers a Load event.
75API
fathom.socket.tcp.*
fathom.socket.udp.*
fathom.socket.broadcast.*
fathom.socket.multicast.*
fathom.proto.dns.*
fathom.proto.http.*
fathom.proto.mdns.*
fathom.proto.upnp.*
fathom.system.getActiveInterfaces()
fathom.system.getResolvers()
fathom.system.getRoutingTable()
fathom.system.doTraceroute()
fathom.system.doPing()
fathom.utils.browser.*
fathom.utils.timer.*
fathom.utils.metrics.*
JavaScript & DOM access
Availability in
Default
JavaScript Flash Java Applet1 policy (§ 4.3)
U3 / SM→U
U3 / SM→U
1 Given signed code and trust conﬁrmed by
the user, i.e., unconstrained host access with
user-level privileges.
2 No support for listening sockets.
3 For listening sockets.
4 If implemented by the experimenter.
5 By directly calling system binaries in OS-
speciﬁc locations.
connections
6 Implicitly or partially; for example, XML-
transparently
HttpRequest
In Flash,
inherit browser proxy settings.
socket connections do not inherit, others do.
7 By abusing the getURL function; no access
to return values.
8 JavaScript–Java interaction via LiveConnect;
details depend on platform and implementa-
tion.
SM→U
U
U
–
U
U
U
U
U
–
–
U
–
U
–
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)6
(cid:32)
(cid:35)
(cid:32)
(cid:71)(cid:35)2
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)6
(cid:32)
(cid:35)
(cid:71)(cid:35)7
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)4
(cid:32)
(cid:32)4
(cid:32)4
(cid:32)
(cid:32)
(cid:71)(cid:35)5
(cid:71)(cid:35)5
(cid:71)(cid:35)5
(cid:71)(cid:35)6
(cid:32)
(cid:35)
(cid:71)(cid:35)8
Table 1: Primary Fathom namespaces and APIs. Due to lack of space, we show select individual functions only for the system
family of calls, given its diversity. The ﬁnal column indicates input mechanisms required by the default client policy (see § 4.3):
“U” symbolizes that a capability requires user input, “SM→U” means that server manifests sufﬁce to permit the capability while
their absence necessitates user input, and “–” indicates permission without additional conﬁrmation. Fathom by design provides full
access to JavaScript functions and the DOM without the need of an additional API; we include the ability here to compare to other
platforms.
In particular, Fathom supports listening sockets, UDP, protocol-
speciﬁc APIs, as well as controlled access to host commands and
historical performance baselines. With Java, the situation depends
on the execution context: without host-speciﬁc customization, un-
trusted applets only allow a limited set of network I/O APIs and
require communication with the applet’s origin server. As pointed
out in § 5.1, signed and trusted applets (as well as Java applica-
tions) provide an over-privileged environment that supports all of
Fathom’s capabilities, without abstracting from platform speciﬁcs
and without reliable DOM interaction. Table 1 summarizes the re-
spective capabilities.
4.2 Privacy
Our ﬁrst goal is to ensure Fathom does not allow measurements to
exﬁltrate sensitive information from a user’s browser or host. To
do so, Fathom’s design mandates that its network I/O stack oper-
ates independently of the browser’s stack. Hence, any state the
browser would normally associate with a connection is unavail-
able to Fathom. For example, when Fathom script code running
in a web page from site a.com issues HTTP connections to site
b.com, such connections do not transmit current session cook-
ies for b.com even though the user might currently be logged in
to that site in a separate tab. This mechanism effectively defeats
classic attacks leveraging same-origin violations, such as cross-
site scripting (XSS) or cross-site request forgery (CSRF). Like any
JavaScript code, Fathom scripts can only access host-local state (in-
cluding cookies) for the site the script originated from (a.com, in
this case).
By providing websites with the ability to collect additional
client-side data in the form of both active and passive measure-
ments, Fathom increases the ability for websites to ﬁngerprint
visitors [15]. In addition, clients using anonymizing proxies ex-
pose themselves to additional de-anonymization risks due to web
pages having access to TCP and UDP sockets that can bypass the
browser’s proxy settings, as well as communicating with local net-
work services (such as the local DNS resolver) that may expose
identifying information. Current tools for obtaining anonymity
or resisting ﬁngerprinting try to automate disabling or changing
sensitive browser functionality [45], but require vigilance on the
user’s part. Thus, it seems reasonable to expect developers of such
technologies (or users employing it) to consider disabling Fathom
as needed. Additionally, when the browser has a proxy setup,
Fathom’s default policy (see below) could disallow active measure-
ment except through the proxy or by explicit agreement of the user.
Doing so would also reduce the chances of ﬁngerprinting through
arbitrary active communication.
The storage of local data about a user’s browsing history is
another important privacy concern. Most popular browsers have
adopted private browsing modes that, when enabled, aim to elimi-
nate the local storage of information that could later reveal a user’s
browsing history [2]. Additionally, users expect that “clearing their
history” removes all data the browser keeps that one could use to
infer their history—behavior that Fathom conforms with.
4.3 Security
We next discuss Fathom’s model for controlling scripts such that
the platform has adequate protection against facilitating active at-
tacks. We note that in the limit any communication we allow
can become part of a distributed attack, but the same applies to
browsers without Fathom [29, 50]. We strive to provide enough
control that Fathom does not exacerbate the situation signiﬁcantly.
In our present design, Fathom sets its security posture for a given
script based on the following inputs:
I.1: Client Policy. Once users have installed Fathom, they may
tune the client policy by customizing a general local security pol-
icy that comes with Fathom. This policy speciﬁes the conditions
under which Fathom makes API calls available to scripts. For
groups of APIs, the policy deﬁnes which destinations they may
access, whether they require permission to execute, and the form
of that permission. Permission forms include user conﬁrmation,
76Resource Schema
http://*.google.com:*
*://{upnp}:*
udp://10.1/16:53,5353
Description
fathom.http.* APIs may contact
any *.google.com name on arbitrary
ports
any API can contact hosts found via
fathom.upnp.* calls
fathom.udp.* APIs may contact
hosts within 10.1/16 on the DNS and
mDNS ports
Table 2: Example resource schemas in Fathom script manifests.
script manifests, and code signing, with multiple forms possible in
order to indicate priorities. Users can adjust this policy at any time.
Table 1 shows the default policies for the various API groups.
I.2: User Conﬁrmation. Fathom can directly ask users whether
it should allow some activity at script run time. We do not con-
sider this a particularly appealing mechanism because (i) framing
questions in a way users will understand is challenging, and (ii)
a system that overly interferes with a user’s workﬂow may lead
users to disable Fathom, or train them to grant permission requests
blindly [16]. (Note that Fathom’s status icon in the browser’s tool-
bar always indicates to the user when a web page employs Fathom
APIs.)
I.3: Script Manifests. Each Fathom script includes a script mani-
fest that succinctly declares desired resources. Fathom ensures that
in-page JavaScript code can only access resources declared in the
manifest, subject to the effective client policy. Currently, these re-
sources include Fathom APIs and active measurement targets. APIs
and their permissible targets get expressed in tandem in resource
schemas of the following form:
[API _subset] : //[destinations] : [ports]
A resource schema requests access to certain destinations and
ports for a subset of the Fathom API. Similar to import state-
ments in other languages, Fathom supports API aggregation, al-
lowing authors to request access to speciﬁc functions (e.g., to
fathom.proto.dns.query()) or to all routines in a fam-
ily (e.g., fathom.proto.dns.*). Destinations come in three
forms: (i) domains with wildcarding (such as *.a.com), (ii) IP
address ranges (e.g., 192.168/16), and (iii) derived IP addresses
(e.g., {upnp}), covering cases where one Fathom API returns an
address that the author wants to subsequently pass to another API,
but which the script author cannot specify in advance.3 Table 2
shows examples of Fathom resource schemas.
Fathom enforces resource schemas by initially only making a
single API function available: fathom.init(). This func-
tion receives the script manifest (in JSON form), and subsequently
hooks only the requested APIs into the window.fathom object.