Activation
Module
random
area_x
...
area_(m-1)
get(cid:2)assigned time
for next awake
Back to Normal World
Shared
Data
Core_0
Integrity
Checking
Module
Self
Activation
Module
Core_(n-1)
Integrity
Checking
Module
Self
Activation
Module
assign
ment
Wake-Up
Time Queue
n-1
time_0
0
...
...
i
time_1
...
...
time_(n-2)
n-2
time_(n-1)
Fig. 6: Multi-Core Collaboration of SATIN
effectively minimize the exposure of any recognized patterns
on the invocation of the asynchronous introspection to the
normal OS. We set tp = Tgoal/m, where Tgoal is the time
period to guarantee that all the target areas can be scanned at
least once.
D. Multi-Core Collaboration
To increase the checking accuracy, we propose to choose a
random core for conducting the introspection task. This design
choice is based on the observation that if only one core is used
for asynchronous introspection, the malicious normal world
can achieve a better probing accuracy than that when all cores
are randomly chosen to conduct introspection, as mentioned
in Section IV-B2.
Figure 6 illustrates the collaborative introspection of SATIN
on the multi-core architecture. When any core i wakes up for
the introspection, it randomly takes one kernel area from the
shared Kernel Area Set setarea and inspects this area. Later,
other cores are not going to inspect this area repeatedly since
core i removes the area it chooses from the set. If there is
no more area available, the set is reﬁlled with all areas again.
Next, core i obtains the next wake-up time from a wake-up
time queue and conﬁgures it’s secure timer accordingly, where
the wake-up time queue is responsible to coordinate all cores
that wake up in a random sequence.
Coordinating all cores to wake up in a random sequence
is also a challenged task. ARMv8-A architecture does not
provide a solution for one core to directly read or write the
timer of another core. In this case, an intuitive design is to
use the cross-core interrupt to notify all cores on serving the
introspection in turn. ARMv8-A allows one core to generate a
secure interrupt to forcibly switching another core into the se-
cure world, so after core i ﬁnishes one round of introspection,
it can switch another core j into secure world and then core j
sets the secure timer for the next round introspection. However,
the switch of core j can also be probed by the normal world
so this method may leak the wake up sequence to the normal
world, which can defeat the beneﬁts from randomly waking
up cores.
To protect the wake-up pattern from the normal world,
SATIN does not apply the cross-core interrupt mechanism, and
296
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
instead coordinates all cores via the secure memory. SATIN
stores the wake-up time of each core in the wake-up time
queue and requires each wake-up core to check the queue to
get next wake up time. For the devices with n cores, the wake-
up time queue contains n wake-up time slots. Each time value
is determined by the rule discussed in V-C. The initial wake-
up sequence of all CPU cores is set during the trusted booting
process. Then when any core enters the self activation module,
it picks the next time based on a random assignment. Once
all core extract their assigned slots from the queue, the self
activation module refreshes the queue with n newly generated
time values and newly generated random assignment. By
ﬂushing the wake-up time queue and re-assigning the time
slots to each core, we can use all cores for kernel introspection
while prevent the normal world from knowing the awake core
or awake time for the next round of introspection. Finally, all
cores can coordinate to make sure each core inspects a random
memory area at a random wake-up time.
VI. SATIN IMPLEMENTATION AND EVALUATION
A. SATIN Implementation
To verify the effectiveness of SATIN on defeating TZ-
Evader, we develop a prototype of SATIN on the ARM Juno r1
development board with the same conﬁguration as mentioned
in Section IV-A. We modify the Test Secure Payload in S-EL1
to implement the major modules of SATIN.
1) Self Activation Module: When the self activation module
is called on one core, the module stops the secure timer by
updating the register CN T P S CT L EL1. Then it takes the
assigned wake-up time from the Wake-Up Time Queue and
writes the value to comparer register CN T P S CV AL EL1.
After that, the module restarts the secure timer for that core.
For any core in the processor, when the shared physical timer
counter register CN T P CT EL0 becomes equal to or greater
than the per-core register CN T P S CV AL EL1, the core
raises a secure timer interrupt.
2) Integrity Checking Module: As we calculated in Sec-
tion IV-C, for each area of the checking module, its size
must be smaller than 1218351 bytes. Also, we implement
the integrity checking module to guarantee that each section
of the normal world OS’s System.map only belongs to one
area for introspection. Thus, we divide the normal world’s
kernel into 19 areas according to the System.map. Among
these areas, the largest one contains 876616 bytes and the
smallest one contains 431360 bytes. During the booting time,
SATIN hashes these 19 areas and then saves these hash values
into an authorized hash table stored in the secure world.
B. SATIN Evaluation
We evaluate the performance of SATIN in two aspects,
the effectiveness on defeating TZ-Evader and the
namely,
triggered extra system overhead.
1) Defeating TZ-Evader: SATIN can effectively and se-
curely defeat TZ-Evader attacks. First, the introspection mod-
ule is deployed in the secure world, so we can protect the
introspection module from being compromised by malware
in the normal world. We assume the hardware-assisted Trust-
Zone technique can be trusted to protect the secure world.
Second,
it can prevent malware from removing its traces
before the invocation of each introspection, since the normal
world cannot accurately predict or intercept the invocation of
introspection operations. Third, it can detect malware that uses
race condition to remove its traces during the introspection.
Because we divide the entire large introspection area into
smaller areas, we can ﬁnish the introspection of one small
area even before the malware detects the entrance of one core
into the secure world and then begins to remove the attacking
trace. In addition, it is user-friendly. The introspection does not
require to fully freeze the rich OS in the normal world. On
multi-core processors, since not all cores are forced to enter
the secure world at the same time, the rich OS can continue
to run on the remaining cores when one core conducts the
introspection on one core.
In our introspection mechanism, every m rounds of the
introspection can guarantee scanning the entire OS kernel
once and the average time between two rounds is tp. Within
the time period m ∗ (tp) +
it
can successfully catch the malicious memory bytes within
the checked areas. In our experiment,
the entire time is
approximately 152 s.
i=0 sizearea i ∗ Ts 1byte,
m−1
(cid:3)
To validate the detection results, we execute TZ-Evader in
the normal world while running SATIN simultaneously in the
secure world. We set the probing thresholds of KProber as
1.8 × 10−3 s. TZ-Evader maliciously modiﬁes one system call
handler which resides in the area 14 of the integrity checking
module. SATIN conducts 190 rounds of introspection to ex-
amine the entire kernel 10 times. KProber can faithfully report
all 190 rounds of introspection without any false negative or
false positive. Among these rounds, SATIN checks area 14
10 times and correctly detects the hijacked handler all the
time. The average time between two consecutive checks for
area 14 is 141s. In the meanwhile, TZ-Evader attempts to
attack during these 10 checks but all the recovery efforts fail
since the memory cleaning occurs later than the introspection.
2) SATIN Overhead: We use UnixBench [41] to evaluate
the performance overhead on normal world operations when
enabling our TrustZone-based asynchronous introspection.
Figure 7 shows the normalized performance degradation when
we use the self activation module to wake up the secure world
across all cores of the device compared to the case where the
self activation module is not enabled.
Since our experiment platform consists of 6 cores (i.e., 4
A53 cores and 2 A57 cores), we measure the overhead using
two sets of experiments: executing each benchmark program
once (1-task) and invoking 6 copies of the same benchmark
simultaneously (6-task). In general, activating the introspection
incurs 0.711% and 0.848% performance degradation in the 1-
task and 6-task cases, respectively. This is reasonable as there
is an increasing chance for SATIN to interrupt the normal
world when more cores are utilized simultaneously. We also
notice that the two tasks file copy 256B and context
switching experience the largest overhead: 3.556% and
297
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
protected by any existing synchronous introspection mecha-
nisms. Alternatively, with the root privilege, the attacker can
modify the address of IRQ exception vector by launching
the following data attack that cannot be prevented by the
synchronous introspection [20]. The synchronous introspection
method in both [7] and [17] set the vector table as non-
writable, so any writing attempt to the exception vector will
trigger a page fault and thus be trapped into the synchronous
introspection. However, after getting the root privilege, the
attack can utilize a write-what-where vulnerability [26] to
change the Access Permissions (AP) bits of the related page
table entry from non-writable to writable. After that,
the
attacker can freely modify the vector table without triggering
the corresponding synchronous introspection.
B. TZ-Evader Limitation
In TZ-Evader,
the probing threshold Tns threshold may
vary on different ARM processors, and the attacker has to
evaluate this value before attacking a targeted ARM processor.
If the attacker has a device which has the same processor
conﬁguration as the attacking target, then the attacker can
disable the secure world to get the Tns threshold value quickly
and accurately. However, if the attacker is not able to evaluate
the threshold on a fully controlled device, then Tns threshold
needs to be learned from the victim directly. The attacker needs
to run multi-threads Time Reporter and Time Comparer for a
relatively long time (e.g., one hour) to study how the threshold
varies. For each time the secure application is running, the
attacker can observe the time difference among all cores. With
the long-term study, the attacker can determine Tns threshold
for the target device and then start the TZ-Evader.
C. Necessity of Asynchronous Introspection
Synchronous introspection protection is an effective de-
fending mechanism; however, due to the high-performance
overhead, incomplete hooking locations, and implementation
bugs, it may still be circumvented [20], [26]. With a small
execution overhead, asynchronous introspection provides one
more layer of secure protection in addition to synchronous
introspection. For example, Samsung TIMA deploys a syn-
chronous introspection mechanism called Real-time Kernel
Protection (RKP) in the hypervisor to protect virtual machines
in the normal world and deploys an asynchronous introspec-
tion mechanism called Periodical Kernel Measurement (PKM)
in TrustZone to protect the hypervisor [37]. Moreover, one
main usability limitation of asynchronous introspection (i.e.,
rich OS suspension) on the single-core processors can be
resolved on the multi-core processors by assigning one core
on security checking and continuing normal operations of the
normal world OS on other cores.
D. Portability of SATIN
SATIN architecture has three requirements, namely, multi-
core processors, a high-privileged operating mode, and a
secure timer. Since most modern processors support multi-
core architecture, it is reasonable to allocate one core for per-
forming the asynchronous introspection on most processors.
Fig. 7: SATIN Overhead
3.912%. The reason is that the test program happens to stay
right at the random-selected core for the secure world more
times than other cases. We believe this level of performance
overhead is acceptable especially when the normal world is not
suspended for even one nanosecond on multi-core systems.
C. SATIN Security Analysis
1) SATIN’s Security: SATIN’s security is based on the
feature that its control ﬂow cannot be affected by the attackers,
which can be realized by utilizing TrustZone. Also, even con-
sidering recent TrustZone-related side-channel attacks
[52],
since they are focused on attacking TrustZones conﬁdentiality
instead of control ﬂow, SATIN is secure.
2) SATIN Capability: SATIN is capable of detecting ad-
vanced persistent attacks that leave attacking traces during an
extended period, even if they apply TZ-Evader to hide their
traces. Similarly, SATIN can detect evasion attacks utilizing
other side channels. Finally, SATIN can reduce attack efﬁ-
ciency and maximize the chances to detect APT attacks.
VII. DISCUSSION
A. TZ-Evader under Synchronous Introspection Protection
To accurately probe the secure world state, TZ-Evader
provides two implementation options, namely, (i) using the RT
scheduler and (ii) modifying the address of the IRQ exception
vector. Both options need to get the root privilege in the
normal world, which may have been protected by certain
synchronous introspection solutions. However, due to the in-
complete hooking locations and implementation bugs [20], it is
difﬁcult, if not impossible, for the synchronous introspection to
ensure that the malware cannot obtain the root privilege in the
rich OS. For example, real attacks [26] have been discovered
to gain the root privilege even if the normal OS kernel is
being protected by real deployed synchronous introspection
mechanism KNOX-RKP [7].
After getting the root privilege,
the attacker can freely
manipulate the RT scheduler, which has not been hooked or
298
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
Therefore, besides ARM TrustZone, SATIN can be ported on
other TEE architectures that can provide a secure timer and
high-privilege for introspection.
VIII. RELATED WORK
A. Asynchronous Introspection
Asynchronous introspection mechanisms [14], [15], [18],
[22], [24], [27], [33], [34], [36], [48] have been popularly