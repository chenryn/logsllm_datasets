### Analysis of Mitigation Techniques in AOSP and Vendor Binaries

We compared the mitigation techniques used in vendor binaries with those in the corresponding AOSP base image. Initially, we found a positive indication: the vendor binaries that are common with the AOSP base image employ the same mitigation techniques, suggesting that third-party vendors typically do not modify the AOSP settings.

However, the results differ when comparing binaries exclusive to the vendor's ROM (i.e., those not present in any version of vanilla AOSP). Figure 3 presents the analysis results as the mean computed over the ROMs aggregated by SDK version. The vertical red line indicates the point in time when the security feature was first mentioned in the Security Enhancements (SE) document. Stack Canaries and NX do not have a vertical line because they were introduced even before SDK 10. The dash-dotted line represents the means of AOSP binaries, while the continuous line (with standard deviation) represents the vendor binaries. All graphs clearly show that the new binaries added by vendors consistently use fewer mitigation techniques than those in AOSP. 

Upon closer inspection, we observed other interesting trends. For instance, even though stack canaries are the oldest security feature presented in the SE, it took several years for vendors to adopt them. Even today, some vendors still do not fully implement this feature.

### Analysis of Services and Privileges in Init Scripts

The left side of the violin plot in Figure 4 covers all new services, while the right side only includes those that start at boot with root permissions. The plot illustrates how, over the years, vendors have made significant changes to init scripts, particularly in the total number of newly defined services, which is constantly growing. Some ROMs define almost 250 additional services compared to AOSP.

To provide context, an AOSP 8.0 (SDK 26) had, on average, 59 services defined in the init script, while an average ROM had 90, with some vendors defining up to 195 additional services. The high number of services starting as root is concerning, as it suggests that vendors may be violating the principle of least privilege. It is easier for vendors to run a binary as root rather than configuring it with the minimum necessary privileges and properly setting SELinux policies.

Another trend we observed is how vendors customize AOSP-specific services by changing or adding the root user as the owner of the service. Although the numbers are not very high, we noticed that, on average, vendors customize at least one service starting from Android 4.0.3. This customization is difficult to justify since these core services are designed to run without modification. Extending the permissions of these services can result in over-privileged services. One possible cause of this change might be due to aggressive and dangerous customizations that require root privileges to function correctly.

### Cross-Referencing New Services with Debugging Binaries

We cross-referenced the list of new services with the results from the previous subsection, where we identified binaries typically used for debugging purposes in commercial ROMs. Surprisingly, some of these binaries are also configured to start at boot with root privileges. For example, we identified 18 ROMs (from 2 different vendors) that start `tcpdump` at boot. Manual investigation revealed that `tcpdump` was configured to monitor incoming packets on all interfaces and save the first 134 bytes of data from each packet into a log file. Some of these ROMs use an outdated version of `tcpdump` (version 4.9.2, released in 2017), which is affected by several CVEs [33], [34], some of which have public proof-of-concept exploits. We even identified these issues in a ROM branded as Android One, built in 2019. Listening and processing packets from untrusted sources expose the device to potential remote and local attackers, severely compromising the device's security.

### SELinux Customization Analysis

As discussed in Section V-B, vendors often customize the SELinux configuration. This section provides an in-depth analysis of the most frequent vendor SELinux-related changes and their impact on overall system security, independent of compliance with the CDD and other requirements.

SELinux plays a crucial role in Android's security and can be used to introduce temporary patches to mitigate vulnerabilities. For example, the vold privilege escalation bug was initially mitigated by a SELinux rule before the vulnerable daemon was patched [35], [36]. Unfortunately, vendors sometimes modify these policies without verifying whether the changes introduce new vulnerabilities. Motorola, for instance, introduced a logical bug that reverted the patch for vold, allowing attackers to gain root access [37]. In another case, a default SELinux domain in AOSP was misconfigured, leading to a local privilege escalation vulnerability [38].

These examples highlight the delicate and error-prone nature of defining SELinux policies. However, such changes are necessary for vendors to label and configure new processes, files, and resources. Our analysis extracted and analyzed all vendor rules not present in the corresponding basic AOSP policy. We identified three types of changes: 1) rules that extend permissions and operations on existing resources; 2) rules that extend core policy domains to support new resources; and 3) entirely new rules operating on domains and resources not present in the original AOSP policy.

### Results of SELinux Policy Analysis

Figure 5 shows the distribution of the number of SELinux rules present in the policy, combining a traditional boxplot with a violin plot to show the distribution of the number of ROMs defining a given number of rules. The Y-axis is plotted on a logarithmic scale to accommodate outliers. We observed that some vendors aggressively modified the default AOSP policy, adding a significant number of rules. For example, for SDK 27, an AOSP policy contained, on average, 10,000 rules, but some vendors defined a policy with over 232,000 rules (a 20x increase).

Figure 6 presents the changes to the definition of domains, types, and classes, showing a similar trend. These results highlight the significant impact of customization on SELinux policies and the varying behaviors of vendors. Even very restrictive policies, such as those provided by AOSP, have been found to contain issues, making it unlikely that policies with 20 times more rules are free from logical misconfigurations or vulnerabilities.

Figure 7 provides a more detailed breakdown of the changes. For each modified rule, we checked if it applies to new domains added by the vendor, affects AOSP domains, adds permissions to a previous rule, or modifies sensitive domains. The graph shows that most vendor changes involve new domains not present in the original AOSP policy. We also observed a substantial number of changes to rules affecting AOSP domains, introducing new classes and types. These numbers illustrate the extent of customization required for new components to interact correctly with the system but also highlight the intrusive nature of vendor changes.

A more critical finding is the number of changes vendors made to the base policy by extending permissions and privileges for default AOSP domains. These modifications can raise runtime SELinux violations if a new feature introduced by the vendor conflicts with a rule in the original policy.

### Conclusion

In this work, we focused on the four main components responsible for Android OS security: SELinux configurations, system binaries hardening, init scripts, and the Linux kernel. Over the years, vendor customizations have introduced severe vulnerabilities. Google has introduced requirements (e.g., CDD) and automated routines (e.g., CTS and VTS) to address this issue, and recently re-architected the Android OS with Project Treble to disentangle vendor customizations from AOSP.

Our large-scale analysis of 2,907 ROMs from 42 different vendors reveals worrisome results. About 20% of ROMs did not meet at least one of the security requirements imposed by Google, including 11 ROMs branded by Google itself. We observed non-compliant kernels in 190/2,396 ROMs (∼8%) from 10 different vendors, and 443/1,533 ROMs (∼29%) violated SELinux policy requirements. Vendors often configure over-privileged services, introduce over-permissive SELinux policy changes, and neglect compiler-level mitigations. These problems have not improved over time and with new Android versions.

The current set of regulations and checks is insufficient, and Project Treble's impact has not been enough to mitigate these issues. The testing and verification procedure, based on trust, is often violated. While most vendors act in good faith, some changes suggest intentional attempts to circumvent Google’s safety nets.

Looking forward, more checks should be automated and more accurate. An automatic framework like the one we presented can identify CDD violations not detected by existing test suites. Additionally, the CDD should be extended to prevent vendors from customizing ROMs in ways that go against established security practices and principles.

We hope this paper inspires future research and analysis in the area of OEM customizations, and that Google takes a stronger stance on customizations that prioritize performance and ease of development over security.