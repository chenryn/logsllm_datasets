Although the FGPA-based approaches improve the performance in
DPI of REM, real networks often hesitate to adopt them as a critical
function of DPI because of the limited flexibility on the FPGAs tied
to specific implementations [14, 39, 75, 79]. Here, we discuss three
critical challenges of FPGA-based REM.
1Note that, in this paper, FPGA-based approaches mean only a circuit-based approach,
not including memory-based approaches like [2, 8, 11, 68]. Because the memory-
based one features sequential processing, it does not fully support massively parallel
processing [10], i.e., out of our scope.
7.6G7.2G6.8G153M67.2M49.0M0.6M621Reinhardt: Real-time Reconfigurable Hardware Architecture for Regular Expression Matching in DPI
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Regex Engine
Sourdis et al. [65]
Bisop et al. [10]
Johnson & Mackenzie [38]
Ganegedara et al. [25]
# of Patterns
1,504
310
310
200
760
Time (hh:mm:ss)
4:53:50
0:45:49
1:47:00
1:38:57
1:52:00
Table 1: Compilation time on previous FPGA-based REM
(a) Evaluation config.
Figure 2: Update response time of the simple H.W-based IPS
(b) Traffic delivery rate
C1. Long compilation time: Unlike software-based solutions,
FPGA-based solutions require the compilation process (i.e., syn-
thesis, mapping, placement, and routing) to update regex patterns
at a circuit level. It takes several hours, presenting difficulty in
applying specific regex patterns into FPGA without long delay
[40, 41, 46, 75]. Table 1 shows the compilation time of existing so-
lutions [10, 25, 38, 65]. While it is difficult to directly compare their
update times due to different design goals and the complexity of
target regex patterns, we can see that updating regex patterns is a
time-consuming task.
C2. Inevitable service interruption: After the compilation
process, FPGAs require a system halt due to the initialization with
updated regex patterns. During this time, the device will be in-
terrupted from several seconds to a couple of minutes. In terms
of serviceability, networks are temporarily unavailable during the
initialization, increasing an operational burden.
C3. All-or-Nothing update operation: FGPA-based solutions
should update new patterns in an all-or-nothing fashion since regex
patterns deployed in FGPA are statically fixed at a circuit level
[40, 41, 46, 75]. Even a tiny change in regex patterns requires the
entire compilation process and initialization of FPGA. It enforces
the pattern updates regularly (stacking updates and applying them
at once) instead of actively applying the patterns on demand.
We demonstrate these challenges with a simple evaluation. As
shown in Figure 2a, while Flow A and B pass through a simple
FPGA-based IPS, we try to deploy a new pattern, which inspects
packet payloads and drops Flow B at 5 seconds, and measures
the time when the IPS blocks flow B. The hardware platform is
NetFPGA-SUME [52], and the pattern was compiled using Vivado
2016.04 on Xeon E5-2630. As we can see in Figure 2b, it spends
about 15 minutes only to compile the single pattern. Moreover, while
installing the newly compiled pattern, the IPS stopped about 10
seconds for device initialization so that Flow A is also dropped
unintendedly. At last, all update procedures are completed after 924
seconds, and the pattern is working properly to filter Flow B only.
(a) Architecture
(b) Workflow
Figure 3: Overall Design of Reinhardt
2.4 Near Real-time Rule Update in DPI
It has not been a serious concern to update DPI rules (for pattern
matching) in near real-time. We can stop or delay the operation of a
hardware/software system for DPI services, upload newly compiled
DPI patterns to the system, and relaunch the system after any
update. This delayed operation was not a big problem so far.
However, the rapid increase in malware also drives the need
for real-time updates in DPI as NIDS/IPS to detect known attack
patterns (i.e., signatures) in the packet payload. According to the
statistics of common vulnerabilities and exposures (CVE) [1, 49],
more than 30 new vulnerabilities are registered on their index every
day. Hence, to keep security up to date, we should update DPI rules
(i.e., signatures) that can detect those vulnerabilities immediately;
Indeed, in the update history of signatures [18], one or two updates
occur every day, and also updates for critical threats sometimes
occur multiple times within hours. For this reason, previous works
[4, 7, 20, 72, 74, 79] as well as many eminent security articles [13,
17, 22, 33, 61, 67] address dynamic updatability as the main aspects
to consider for NIDS/IPS.
Moreover, these days, as the development of network technol-
ogy (e.g., 5G/6G) enables many things to connect to a network,
numerous systems and services are provided over the network and
cloud infrastructure, and DPI is not an option but plays a central
role in handling heterogeneous protocols from the diverse sys-
tems/services [5, 21, 32, 54, 59]. Among them, since it contains
mission-critical and time-sensitive services where network failure
can cause catastrophic consequences such as automotive, smart fac-
tory, healthcare, and smart sensors, the network should guarantee
reliable communication without loss [3, 19, 26, 47, 56, 69, 73].
3 DESIGN
Our design principles for a dynamic updatable FPGA-based REM
are twofold. First, the compilation process must be minimized to
apply new and updated regex patterns dynamically. Second, regex
patterns in FPGA must be updated without service interruption.
Considering these factors, we propose a novel reconfigurable FPGA
architecture, called Reinhardt, that introduces new FPGA blocks
Flow ASimpleIPSFlow BInspect and drop Flow B!PayloadMatchingPattern to Circuit0246921923925927929931024692192392592792993110Delivered rateTry pattern updateStart compilationInitialize deviceRecover deliveryEnd compilationDrop by the patternTime (sec)012345678910012345678910Traﬃc ATraﬃc BReinhardt CoreMemoryInput QueueReinhardt FrameworkEvent ListenerAPI ProviderReinhardt AppRegex patternsEvent HandlerHost S.W.Datapath (FPGA)Regex ConverterMatchedInputActionABCDABCD(AB|C)+DInput622ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Taejune Park, Jaehyun Nam, Seung Ho Na, Jaewoong Chung, and Seungwon Shin
(b) Input cell
(a) Design of Reinhardt Core
(c) Logic cell
Figure 4: Design of Reinhardt Core
called reconfigurable cells; It transforms given regex patterns repre-
sented in NFA to a composition of the reconfigurable cells, allowing
the regex patterns to be deployed into hardware in real-time with
no service interruption. Their configurations are made by a host
software so that administrators can update specific regex patterns
on-demand, on-time in a programmable way.
Figure 3 shows the design of Reinhardt and its workflow. Rein-
hardt is mainly composed of two parts: datapath in hardware (FPGA)
and a software framework on the host side. Three sub-components
(i.e., core, memory, and input queue) process an observation string
in the datapath. More specifically, the Reinhardt core consists of a
set of reconfigurable cells that are connected in a w × h grid topol-
ogy with input/output ports for each direction, Top-Bottom-Left-
Right. Each cell can dynamically determine the output directions
of the input signals in accordance with Reinhardt configurations.
In the software, a regex converter and an event listener manages
and controls the Reinhardt datapath. The framework provides APIs
which allow Reinhardt applications to update regex patterns and
receive messages from the datapath.
The most significant advantage of Reinhardt is to update regex
patterns in real-time onto hardware without any service interrup-
tion. An update includes all actions related to managing regex pat-
terns, such as 1) deploying new patterns and 2) modifying/removing
parts of a previously deployed pattern. The key idea of Reinhardt is
that a target regex is directly represented by state machines in the
Reinhardt core through a combination of the cell connections.
As seen in Figure 3b, when given regular expressions, the corre-
sponding NFA structures are represented as the combination of the
reconfigurable cells by the Regex Converter. The conversion results
are stored in the memory to change the input/output directions
of the cells in the core; thus, the equivalent state machines for the
regex patterns are implemented in real-time. The current design of
Reinhardt can support all common metacharacters. An observation
string is inspected by driving the NFA logic in the core, and if any
matched pattern is found, the Reinhardt core sends a notification to
the event listener on the host. Then, the event listener notifies ap-
plications that utilize the event handler and take actions according
to the matched result, e.g., blocking suspected traffic or updating
the list of patterns to strengthen inspection.
3.1 Reinhardt Core
To understand how Reinhardt implements NFA in FPGA, we view
the structure of the Reinhardt core. Figure 4 illustrates the w ×
h Reinhardt core. It consists of two kinds of reconfigurable cells;
the 0th column of the grid is composed of input cells, and the
rests are logic cells. Each cell is connected to neighbor cells by the
input/output ports for each direction Top-Bottom-Left-Right, and
the position of each cell is expressed in (x, y) coordinates. On the
left side of the core, the character input bus is connected to the
input cells, and the ϵ-signal bus and accept-signal bus on the other
side are connected to the logic cells.
For regex pattern matching, a given regex pattern is converted
into NFA in the core by combining the abovementioned cells. The
pattern is split into substrings and metacharacters, and the sub-
strings are placed in the input cells while the respective connection
of logic cells represents their relation (i.e., operation by metachar-
acter). For clarification, a regex pattern of ‘abc|xyz’ would be sep-
arated into substrings ‘abc’ and ‘xyz’. The metacharacter ‘|’ would
be expressed by the connection of the logic cells afterward.
Input cell (Figure 4b): The input cells represent states, and they
are activated or transitioned via the input/output ports connected
to the logic cells on the right side of the input cells. The input
cells are the linear-chained automata states of length m, which
works as a simple m string matcher. An input cell starts comparing
observation characters when their state is activated and executes a
state transition to the output port when all characters match. Input
cells can function as a simple string matcher, but they can compare
observation characters with a min-max range. For example, to find
a character between ‘a’ and ‘f’ (i.e., a bracket expression [a-f]),
the min target character is set as ‘a’, and the max target character
is set as ‘f’. Also, the input cell can take flags about the observation
character to indicate the beginning and end of the string or not
contained condition (i.e., ^,$ and [^]).
Logic cell (Figure 4c): It serves as the directed edges connect-
ing the states in state machines. They function by forwarding input
signals (i.e., state transition) from each direction to designated di-
rections by opening/closing internal gates and switches. In addition,
the logic cells include a counter that can measure how many times
a state transition occurs in its region, allowing logic cells to imple-
ment states where the condition has to be met a certain number of
times, helping express interval operators {m,n}.
Core I/O: There are three input/output buses to drive NFA logics
in the core; 1) The character input bus delivers each character in
the observation string (i.e., packet bytestream) sequentially to all
input cells every clock; thus, all NFA logics implemented in the
core will work simultaneously. 2) The ϵ-signal indicates the start
of the NFA by triggering the initial state (i.e., the input cell for the
first substring of a given regex pattern) through the logic cells. 3)
The accept-signal notifies the end of the NFA by triggering the final
state (i.e., the input cell for the last substring). This signal is sent
when the observation string matches the given regex pattern.