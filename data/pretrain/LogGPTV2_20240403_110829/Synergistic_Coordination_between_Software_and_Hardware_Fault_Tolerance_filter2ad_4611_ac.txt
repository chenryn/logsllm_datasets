373 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:44 UTC from IEEE Xplore.  Restrictions apply. 
of stable-storage checkpoint N d c  matches the value of 
the Ndc of the receiving process. 
4  TB Protocol Modification 
4.1  Necessity for Synergistic Coordination 
Although the TB protocol guarantees basic  global  state 
consistency  and recoverability,  directly combining  it  with 
the MDCD protocol  would  not extend a system's fault tol- 
erance capability, but rather may  have a detrimental effect 
on  system reliability.  As  shown in  Figure 4(a),  if  P2  and 
Pidw follow the TB protocol to save their states when their 
checkpointing timers expire, then the checkpoint of P2  will 
reflect a potentially contaminated process state, whereas the 
checkpoint  of  Pidw will  reflect  a  non-contaminated state. 
Consequently, when  a  hardware  fault  occurs  in  the  node 
accommodating P2,  P2  would  have  no  choice  but  to  roll 
back  to  a  potentially  contaminated  state  and  become  un- 
able to restore  a non-contaminated state if  a software error 
is  detected subsequently.  This example illustrates  a  seri- 
ous consequence of attempting to simply combine software 
and hardware fault tolerance techniques. In particular, when 
establishing the  stable-storage checkpoint,  P2  ignores the 
knowledge about messagektate validity  that is made avail- 
able by  the  MDCD protocol.  This causes the  loss of  the 
most recent non-contaminated state of  P2  that  is saved by 
the MDCD protocol  in the volatile-storage  checkpoint. 
Suppose  that,  in  the  same  scenario,  instead  of  saving 
the current process state in  stable storage when  its check- 
pointing timer expires, the potentially  contaminated process 
P2  copies to stable storage its most recent volatile-storage 
checkpoint'  C that is established prior to the timer expira- 
tion, while the non-contaminated process Psdw saves its cur- 
rent  state S to stable storage.  As  verified  in  [ 5 ] ,  the most 
recent non-contaminated process states of P2  and Pidw (rel- 
ative to a time  instant  t )  are always globally consistent.  It 
follows that the two stable-storage checkpoints, which  are 
copies of C and S, will be globally consistent, because C and 
S reflect the most recent non-contaminated process states of 
P2  and P;dw (relative to any time instant t within the block- 
ing period of Pidw), respectively. 
However,  the  above mechanism  will  fail  to  ensure re- 
coverability  in  the  scenario illustrated  by  Figure 4(b).  In 
that scenario, the timer of Pidw expires at t when both Pidw 
and P2  are potentially  contaminated.  Suppose that, when 
its timer expires, Pidw copies to stable storage its most re- 
cent volatile-storage checkpoint (which reflects Pidw's most 
recent  non-contaminated process state, relative  to t). But 
after t  and before P2's  timer expires, P2  passes an AT, re- 
sulting in an in-transit  "passed  AT" notification message. It 
follows that m would  1) be reflected in P2's  stable-storage 
'Recall  that with the MDCD protocol,  a process will not roll back any 
further than its most recent checkpoint; therefore, a process keeps only its 
most recent checkpoint in volatile storage. 
checkpoint as a  valid  message that  has been  sent  and  ac- 
knowledged (because PS""  receives m before the blocking 
period starts), and 2 )  be excluded from Pidw's stable-storage 
checkpoint and not be restored in case of error recovery (be- 
cause P2  would only re-send unacknowledged messages). 
(from PP ) 
........... 
p2 d ! J @ . * . . . .  
(....- 
(a) Loss of non-contaminated  state 
$dw 
1 
p2 
1.1.1.11..  7 
(b) Violation of recoverability 
0 
0  copying the most recent RAM checkpoint to disk 
saving current state to disk 
I....  blocking period 
Figure 4: Consequence of Simple Combination 
The  above  observations suggest  that  using  knowledge 
about  potential  process  state  contamination  for  choosing 
the contents of a stable-storage checkpoint is necessary  but 
nor  sufficient.  To guarantee recoverability, an  in-progress 
stable-storage checkpoint establishment must be responsive 
to  the  knowledge  update  that  occurs  during  the  blocking 
period.  Accordingly, we  modify the  TB algorithm, as de- 
scribed in the next subsection. 
4.2!  Adapted TB Protocol 
Figure  5  shows  the  adapted  version  of  the  TB check- 
pointing  algorithm.  Analogous  to  the  original TB  algo- 
rithm, the adapted version  lets a process save a checkpoint 
in  stable  storage and  undergo a  blocking  period  when  its 
checkpointing timer expires. And similar to the original TB 
algorithm, the adapted version lets a process save, as part of 
the next checkpoint, all unacknowledged messages.  Thus, 
when hardware error recovery is invoked, the  process will 
be able to re-send those unacknowledged messages. 
To  ensure  validity-concerned global  state  consistency, 
the  adapted TB algorithm first examines, upon  the  expira- 
tion  of  a  process's  checkpointing timer,  whether  the  pro- 
cess is potentially contaminated. If its d i r t y b i  t indicates 
that  the  current state is potentially  contaminated,  then  the 
volatile-storage checkpoint will be copied to stable storage; 
otherwise, the current process state will  be saved  in  stable 
storage, as illustrated  in Figure 6(a). In either case, the pro- 
374 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:44 UTC from IEEE Xplore.  Restrictions apply. 
createCKPT ( )   { 
if  (dirty-bit ==  0 )  
else 
write-disk(current-state,  0, null); 
write-disk(rCKPT, 1, current-state); 
Nac++; 
dCKPT-time  =  dCKPT-time  +  0; 
set-timer(createCKPT, dCKPT-time); 
i f  ( ( b + 2 p ( N d C  - l)e+T,(dirty-bit))  > 
(getTime ( )  - (dCKPT-time - e))) 
requestResyncTimers0; 
1 
Figure 5: Adapted TB Checkpointing Algorithm 
cess will  begin to undergo a blocking period  when  it starts 
the checkpoint establishment.  Note that, in addition to en- 
suring basic  global  state  consistency,  the  blocking period 
prevents  the  following  event  from  happening:  after  pro- 
cess P saves a checkpoint  in  stable storage and before  the 
timer of another process P’ expires, P performs an AT and 
sends P’ a “passed AT” notification message. Therefore, the 
blocking period also ensures validity-concerned  global state 
consistency. 
To  prevent  the  checkpoints  from  violating  validity- 
concerned recoverability, the adapted TB algorithm makes 
the process that is engaged in stable-storage checkpoint es- 
tablishment responsive to confidence change.  Specifically, 
although none of the application-purpose messages sent to a 
process during its blocking period is read before the block- 
ing  period  ends,  the  MDCD  protocol  lets  the  incoming 
“passed AT” notification messages be monitored and allows 
the process’s d i r t y b i t  to be updated during the blocking 
period (see Appendix  A).  This enables a potentially  con- 
taminated process  that  is engaged in  stable-storage check- 
point  establishment to  adjust  its  behavior.  More  specifi- 
cally,  the  process  will  begin  its  checkpoint establishment 
with copying its most recent volatile-storage  checkpoint to 
stable storage, and will abort the copying action and replace 
the contents of the checkpoint with its current process state 
(equivalent  to  the  state at the moment the blocking period 
starts) if the value of d i r t y b i  t changes from one to zero 
within the blocking period, as shown in Figure 6(b). 
Figures 6(c) and  (d) further illustrate  how  protocol co- 
ordination  facilitates  the  establishment  of  stable-storage 
checkpoints that satisfy validity-concerned  consistency and 
recoverability,  from the perspective  of  the  interacting pro- 
cesses  Py‘ and  Pz.  (Recall  that  there  is  no  application- 
purpose  interaction  between  ?‘  and Pidw, and  that  all  of 
the outgoing messages of Pidw are suppressed.) 
As  shown  in  Figure  5, the  adaptive checkpointing be- 
havior  described  above  is  implemented  by  the  function 
write-disk, which  takes  three  arguments.  The first  ar- 
gument specifies the contents of the checkpoint that a pro- 
cess should begin  with  writing  to stable  storage when  its 
I 
t 
0 
0  copying the most recent RAM checkpoint to disk 
saving current state to disk 
..I.. 
blocking period 
Figure 6:  Stable-Storage Checkpoint Establishment based 
on Protocol Coordination 
timer expires; the second argument specifies the value that 
the process’s dirtybit* must match, in order to continue 
writing  the  contents specified by  the  first argument to sta- 
ble storage; and the third argument specifies the alternative 
checkpoint contents the process should use to overwrite the 
initial contents, if the value of d i r t y b i t  becomes differ- 
ent from that  specified by  the  second argument before the 
end of the blocking period. 
When  the  adapted TB algorithm is  contrasted with  the 
modified  MDCD algorithms shown  in  Appendix  A,  it  is 
clear that the two entities, Ndc and d i r t y b i t  (which are 
2For process  PTt, the second argument  will  instead specify the value 
ofpseudo-dirtybit. 
375 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:44 UTC from IEEE Xplore.  Restrictions apply. 
Attribute 
Blocking period 
Original TB Protocol 
6 + 2p4 - tmzn 
T 
Checkpoint contents 
Current state 
Messages blocked 
All 
Adapted TB Protocol 
~ ( b )  = b + 2p4 + T,(b),  where 
T,(b)  = b t,”,  - (1 - b)t” 
Current  state  or  the  most  recent 
Purpose of blocking 
Consistency 
Consistency and recoverability“ 
“Blocking (after a process is engaged  in stable-storage  checkpoint  establishment)  is necessary  but not sufficient for validity-concemed  recov- 
erability; saving unacknowledged  application-purpose  messages and re-sending them  during recovery (as the original TB protocol  does) are also 
required. 
maintained by the TB and MDCD protocols, respectively), 
play  important roles in protocol  coordination.  Specifically, 
the  TB  protocol  lets  a  process  choose  the  contents  of  a 
stable-storage checkpoint based on the value of d i r t y b i t ,  
and allows the process to adjust the contents of the check- 
point if the d i r t y b i t  changes its value during the block- 
ing period.  Whereas the  update of  the d i r t y b i t  during 
the  blocking period  is  handled by  the  MDCD protocol  in 
a cautious way.  More succinctly, by comparing the stable- 
storage checkpoint sequence number N d c  piggybacked on a 
“passed AT” notification message with the local N d c ,  a pro- 
cess decides whether to reset the local d i r t y h i t .  (There- 
fore, it is not possible for a potentially contaminatedprocess 
to wrongly adjust the checkpoint contents due to a “passed 
AT”  notification  message  from  a process  that  has  already 
completed its stable-storage checkpoint establishment.) 
An underlying objective of the above coordination strat- 
egy is to preserve validity-concerned recoverability  by pre- 
venting  a “passed AT”  notification  message (which would 
alter  our  confidence  in  a  process)  from  becoming  “in- 
transit”  in  nature.  Since  1) a message will  not become an 
in-transit  message  unless  it  is  received after  the  timer  of 
the  receiving process expires and sent before the timer of 
the  sending process expires, and 2)  the  adapted algorithm 
allows a  process  that  is  engaged  in  checkpoint  establish- 
ment to adjust the contents of the checkpoint in response to 
a confidence change, it will  be sufficient  for us  to achieve 
this objective if  we can ensure that  a potentially  contami- 
nated process will  receive a “passed AT’ notification  mes- 
sage (given that  it occurs) within  the blocking period.  Ac- 
cordingly, we let the blocking period for a process that has a 
potentially  contaminated state be the sum of the maximum 
clock drift and the  maximum message-delivery delay, i.e., 
b + 2p4 + t,,,, 
where 6 is the maximum initial clock de- 
viation, p is the clock drift rate, 4 is the elapsed time since 
the last clock resynchronization (4 = Ndc6, where 8 is the 
length of a checkpointing interval), and t,,, 
is the maxi- 
mum message-delivery delay. 
On the other hand, if a process has a non-contaminated 
stai;e when its checkpointing timer expires, the process will 
perform  checkpointing just  like  the  original TB  protocol 
does. That is, the current process state will be saved to sta- 
ble storage upon the timer expiration and a blocking period 
with  a length of  6 + 2p4 - t,,, 
will  be enforced, where 
tm,;, is the minimum message-delivery delay. 
or 6 + 2p4 - tm,, 
for a process will  be 6 + 2p4 + t,,, 
(the latter  coincides  with  that  used  by  the original TB al- 
gorithm),  depending  upon  whether  the ‘process is  poten- 