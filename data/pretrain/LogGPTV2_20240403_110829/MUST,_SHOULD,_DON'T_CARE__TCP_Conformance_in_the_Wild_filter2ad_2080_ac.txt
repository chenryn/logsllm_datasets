which represent a heterogeneous set of globally distributed targets. In addition
to the IPv4 address and successfully scanned port, many targets include infor-
mation on host, vendor, OS, and product. Using the dataset compiled on August
8th, 2019, 10,559,985 Censys targets were identiﬁed with reachable ports 80 or
443, including, but not limited to, IoT devices, customer-premises equipment,
industrial control systems, remote-control interfaces, and network infrastructure
appliances. By removing duplicate IP addresses and blacklist ﬁltering we arrive
at 3,237,086 Censys target hosts.
Ethical Considerations. We aim to minimize the impact of our active scans as
much as possible. First, we follow standard approaches [26] to display the intent
of our scans in rDNS records of our scan IPs and on a website with an opt-out
mechanism reachable via each scan IP. Moreover, we honor opt-out requests to
our previous measurements and exclude these hosts. We further evaluated the
MUST, SHOULD, DON’T CARE: TCP Conformance in the Wild
131
potential implications of the uIP/Contiki crash observed in Sect. 3.3. Embedded
microcontrollers, commonly used in IoT devices, are the primary use-case of
uIP/Contiki. We could not identify hosts using this stack in the Censys device
type data to exclude IPs, but assume little to very little use of this software stack
within our datasets. We thus believe the potential implications to be minimal.
We conﬁrm this by observing that 100% of failed targets in the CDN as well as
the Alexa dataset, and 99.35% of failed targets in the Censys dataset, are still
reachable following UrgentPointer test case execution. We thus argue that our
scans have created no harm to the Internet at large.
4.2 Results and Discussion
We next discuss the results of our conformance testing, which we summarize in
Table 3. The table shows the relative results per test case for all reachable target
hosts, excluding the unreachable ones. As the target data was derived from
the respective sources multiple days before executing the tests (see Sect. 4.1),
unreachable targets are expected. Except for minor variations, which can be
explained by dynamic IP address assignment and changes to host conﬁgurations
during test execution, ∼12% of targets could not be reached in each test case and
are removed from the results. While the CDN and Alexa datasets were derived
from sources featuring popular websites, we expect a large overlap of target hosts,
which is conﬁrmed by 15,387 targets present in both datasets. Alexa and Censys
share only 246 target hosts, while CDN and Censys do not overlap. All datasets
are publicly available [5]. The decision to classify a condition as PASS, UNK,
FTarget, or FPath, does vary between test cases as a result of their architecture
(see Sect. 3.2) and are discussed in detail next.
TCP Checksum. We start with the results of our checksum tests that validate
correct checksum handling. As Table 3 shows, CDNs have a low failure rate
Table 3. Overview of relative results (in %) per test case per dataset. Here, n denotes
the number of targets in each dataset. For better readability, we do not show the PASS
results and highlight excessive failure rates in bold.
MUST Test as
CDN
n = 27,795
Alexa
n = 466,685
Censys
n = 3,237,086
deﬁned in Table 1 UNK FTarget FPath UNK FTarget FPath UNK FTarget FPath
0.441 3.224 0.002 3.743 3.594 0.003
ChecksumIncorrect 0.234 0.374
ChecksumZero
0.253 0.377
0.455 3.210 0.001 3.873 3.592 0.003
1.410 0.313
0.040
OptionSupport
1.477 0.019
0.026 0.011
OptionUnknown
MSSSupport
0.018
0.412 0.004
0.018 0.303 0.299 0.136 1.423 0.388 0.416
MSSMissing
2.791 0.048
Reserved
Reserved-SYN
1.849 0.049
0.150 0.330 0.022 0.804 3.179 0.208 3.815 7.300 0.042
UrgentPointer
0.470 0.009
0.585 0.053
0.728 0.002
2.194 0.011
0.138 0.011
6.689 0.293
1.297 0.309
0.026
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
132
M. Kosek et al.
for both tests, and we do not ﬁnd any evidence for on-path modiﬁcations. In
contrast, hosts from the Alexa and the Censys dataset show over ∼3% FTarget
failures. Drilling down on these hosts, they naturally cluster into two classes when
looking at the AS ownership. On the one hand, we ﬁnd AS (e.g., Amazon), where
roughly 7% of all hosts fail both tests. Given the low share, these hosts could be
purpose build high-performance VMs, e.g., for TCP-terminating proxies that do
not handle checksums correctly. On the other hand, we ﬁnd hosts (e.g., hosted in
the QRATOR ﬁltering AS) where nearly all hosts in that AS fail the tests. Since
QRATOR oﬀers a DDoS protection service, it is a likely candidate for operating
a special purpose stack.
Takeaway: We ﬁnd cases of hosts that do not correctly handle checksums. While
incorrect checksums may be a niche problem in the wild, these ﬁndings highlight
that attackers with access to the unencrypted payload, but without access to the
headers, could alter segments and have the modiﬁed data accepted.
TCP Options. We next study if future TCP extensibility is honored by the
ability to use TCP options. In our four option tests (see Table 3 for an overview),
we observe overall the lowest failure rates—a generally good sign for extensibility
support. Again, the Censys dataset shows the most failures, and especially the
OptionSupport and the MSSMissing test have the highest FPath (middlebox
failures) across all tests. Both tests show a large overlap in the aﬀected hosts and
have likely the same cause for the high path failure rates. We observe that these
hosts are all located in ISP networks. For the MSSMissing failures, we observe
that an MSS is inserted at these hosts—likely due to the ISPs performing MSS
clamping, e.g., due to PPPoE encapsulation by access routers. These routers
need to rewrite the options header (to include the MSS option), and as the
OptionSupport fails when, e.g., some of the EOOL and NOOP are stripped, the
exact number of EOOL and NOOP are likely not preserved. Still, inserting the
MSS option alters the originally intended behavior of the sender, i.e., having an
MSS of 536 byte for IPv4. In this special case, the clamping did actually increase
the MSS, and thereby strip some of the EOOL and NOOP options.
Looking at the OptionUnknown test, where we send an option with an unal-
located codepoint, we again see low FPath failures, but still, a non-negligible
number of FTarget fails. There is no single AS that stands out in terms of the
share of hosts that fail this test. However, we observe that among the ASes with
the highest failure rates are ISPs and companies operating Cable networks.
Lastly, the MSSSupport test validating the correct handling of MSS values
shows comparably high conformance. As we were unable to clearly pinpoint
the failures to speciﬁc ASes, the most likely cause can be traced to the non-
conformant operating systems as shown by our validation (see Sect. 3.3), where
Windows fails this test and likely others that we did not test in isolation.
MUST, SHOULD, DON’T CARE: TCP Conformance in the Wild
133
Takeaway: Our TCP options tests show the highest level of conformance of all
tests, a good sign for extensibility. Still, we ﬁnd cases of middlebox inference,
mostly MSS injectors and option padding removers—primarily in ISP networks
hinting at home gateways. Neither is inherently harmful due to path MTU dis-
covery and the voluntary nature of option padding.
TCP Flags. Besides the previously tested options, TCP’s extensibility is mainly
guaranteed by (im-)mutable control ﬂags in its header to toggle certain proto-
col behavior. In the Reserved test, we identify the correct handling of unknown
(future) ﬂags by sending an unallocated ﬂag and expect no change in behav-
ior. Instead, we surprisingly observe high failure rates across all datasets, most
notable CDNs. When inspecting the CDN dataset, we found ∼10% of Akamai’s
hosts to show this behavior. We contacted Akamai, but they validated that their
servers do not touch this bit. Further analysis revealed that the reserved ﬂag on
the SYN was truthfully ignored, but our test failed as the ﬁnal ACK of the
3-way handshake (second part of the test, see Table 1), which also contains the
reserved ﬂag, was seemingly dropped as we got SYN/ACK retransmissions. How-
ever, this behavior originates from the usage of Linux’s TCP DEFER ACCEPT
socket option, which causes a socket to only wakeup the user space process if
there is data to be processed [10]. The socket will wait for the ﬁrst data segment
for a speciﬁed time, re-transmitting the SYN/ACK when the timer expires in
the hope of stimulating a retransmission of possibly lost data. Since we were
not sending any data, we eventually received a SYN/ACK retransmission, seem-
ingly due to the dropped handshake-completing ACK with the reserved ﬂag set.
Hence, we credited the retransmission to the existence of the reserved ﬂag at
ﬁrst, later uncovering that the retransmission was unrelated to the reserved ﬂag,
but actually expected behavior using the TCP DEFER ACCEPT socket option.
Following up with Akamai, they were able to validate our assumption by reveal-
ing that parts of their services utilize this socket option. While it is certainly
debatable if deliberately ignoring the received ACK is a violation of the TCP
speciﬁcation, our test fails to account for this corner case. Thus, connectivity is
not impaired.
In contrast, connectivity is impaired in the cases where our reserved ﬂag SYN
fails to trigger a response at all, leaving the host unreachable (see Reserved-SYN
in Table 3). The diﬀerence between both failure rates thus likely denotes hosts
using the defer accept mechanism, as CDNs, in general, seem to comply with
the standard. We also observe a signiﬁcant drop in failures in the Alexa targets.
While our results are unable to show if only defer accepts are the reason for this
drop, they likely contribute signiﬁcantly as TCP implementations would need
to diﬀerentiate between a reserved ﬂag on a SYN and on an ACK, which we
believe is less likely. Our results motivate a more focused investigation of the
use of socket options and the resulting protocol conﬁgurations and behavioral
changes.
Lastly, the URG ﬂag is part of TCP since the beginning to indicate data
segments to be processed immediately. With the UrgentPointer test we check if
segments that are ﬂagged as urgent are correctly received and acknowledged. To
134
M. Kosek et al.
conﬁrm our assumption of this test having minimal implications on hosts due
to the uIP/Contiki crash (see Sect. 3.3), we checked if the FTarget instances were
still reachable after test execution. Our results show that of these failed targets,
99.35% of Censys, and 100% of CDN and Alexa, did respond to our following
connection requests, which were part of the subsequent test case executed several
hours later. While we argue that these unresponsive hosts can be explained by
dynamic IP address assignment due to the ﬂuctuating nature of targets in the
Censys dataset, we recognize that the implicit check within the subsequent test
case is problematic due to the time period between the tests and the possibility
of devices and services being (automatically) restarted after crashing. We thus
posit, that future research should include explicit connectivity checks directly