# Objective
Our primary goal is to defeat the adversaries and safeguard the Earth.

# Our Contributions
- **Introduction of a New Analysis Framework**: 
  - This framework simplifies the analysis of normal applications by utilizing web proxies.
- **Methodologies for Implementation**:
  - We will outline the advantages and disadvantages of these methodologies.
- **Use Case Demonstrations**:
  - We will provide practical examples to illustrate the effectiveness of our approach.

# Key Definitions
- **Web Application**:
  - Typically written in scripting languages.
  - Operates on a web server/client model.
- **Normal Application**:
  - Executable binaries, such as PE (Portable Executable) and ELF (Executable and Linkable Format) files.
- **Web Proxy**:
  - A tool used for web application analysis, such as Burp Suite, Paros, and Fiddler.

# Background
## Existing Methodologies and Tools for Application Analysis
### Web Application Analysis
- **Ease of Use**: Tools like Burp, Paros, and Fiddler make it easy to monitor and modify content.
- **Functionality**: These tools allow for straightforward content monitoring and modification.

### Normal Application Analysis
- **Complexity**: Analyzing executables (e.g., using GDB, IDA, OllyDbg, WinDbg) is more challenging.
- **Secure Channel Monitoring**: It is difficult to check the contents in secure channels.

# Challenges in Application Analysis
- **Resource Constraints**: Limited time and manpower.
- **Current Limitations**: Current resources are insufficient to achieve our objectives.

# Proposed Solution
- **Need for an Easy Tool**: We need a user-friendly solution to address the challenges.

# BinProxy: A New Paradigm for Binary Analysis
- **Key Features**:
  - No longer need complex tools like GDB and OllyDbg for application analysis.
  - Ability to modify return values and control function flow.
  - Monitor and control normal applications with your preferred web proxy.
  - Identify and monitor functions in target applications.

# Overall Architecture
## Components
- **Target Application**:
  - Examples include smartphone apps and executable programs on Windows, macOS, etc.
- **Web Proxy**:
  - User-friendly proxy tools such as Burp, Paros, etc.
- **BinProxy Client**:
  - Installed in the target application.
  - Communication module: Facilitates communication with the BinProxy server.
  - Hooking module: Modifies the function flow.
- **BinProxy Server**:
  - Installed in the web proxy.
  - Communication module: Facilitates communication with the BinProxy client and web proxy.

# Main Techniques for Implementation
- **Function Control via Web Proxy**:
  - Convert functions and control their calls.
- **API and User-Defined Function Hooking**:
  - Dynamic function hooking without pre-compiled code.
  - Select target functions dynamically.
- **Return Value and Argument Management**:
  - Handle primitive and reference type arguments.
- **Function Selection**:
  - Extract API lists and user-defined functions.
  - Determine argument types and select target functions.

# How to Build BinProxy
- **Client-Server Interaction**:
  - **BinProxy Client**:
    - Sends `before_call` messages to the BinProxy server.
    - Blocks until a response is received.
  - **BinProxy Server**:
    - Converts `before_call` messages into HTTP requests.
    - Sends `after_call` messages back to the client.
- **Execution Flow**:
  - The original function is executed after receiving the `after_call` message.
  - The return value is then sent back to the client.

# Ways to Build Android and iOS Clients
## Android
- **Tools for Hooking**:
  - Cydia Substrate for Android.
  - Introspy-Android.
  - AndHook.
  - ADBI.
- **Implementation**:
  - Use JNI to get method information and define new native functions.
  - Replace original methods with new native functions.
  - Monitor and modify arguments and return values.

## iOS
- **Tools for Hooking**:
  - Cydia Substrate for iOS.
  - Fishhook.
  - Mach-O-Hook.
- **Implementation**:
  - Use Cydia Substrate for stability.
  - Extract Objective-C classes and methods.
  - Monitor and log entire methods and APIs.

# Future Work
- **Improvement Areas**:
  - Enhance performance.
  - Support additional operating systems.
- **Additional Features**:
  - Arbitrary function execution.
  - Arbitrary code execution.
  - Memory scan and patch.
  - Script-based function control.
  - Disassembly and decompilation.

# Questions or Comments?
- **Contact Information**:
  - Email: [PI:EMAIL]

Thank you!