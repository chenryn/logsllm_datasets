Objective 
       We have to defeat the enemies  
           and save the earth!! 
Our contributions 
●  Introduce a new concept of analysis 
framework to use easily 
o  perform analysis of normal application by using web 
proxy 
●  Introduce methodologies for implementing 
our concept 
o  pros and cons of the methodologies 
●  Demonstrate use cases 
Define Keyword 
●  Web Application 
o  consist of usually script languages 
o  operate based on web server/client 
●  Normal Application 
o  executable binary except for web applicaton 
o  PE, ELF, etc. 
●  Web Proxy 
o  a tool for web application analysis 
o  Burp suite, paros, fiddler, etc. 
What’s wrong? 
Background 
Existing methodologies/tools 
for application analysis 
Web Application analysis 
●  easy to use and operate using a web proxy (burp, paros, 
fiddler, etc.) 
●  monitor and modify the contents without difficulty 
Existing methodologies/tools 
(cont’d) 
Normal Application(excutables) analysis  
●  much harder and complex than web application(GDB, IDA, 
Ollydbg, windbg, etc.) 
●  In secure channel, how can we check the contents? 
Challenges for application 
analysis 
       We cannot  
     save the earth  
   using our resources 
Lack of time and manpower 
How to solve a problem? 
Need a EASY tool 
So what?? 
BinProxy : A New Paradigm for Binary 
Analysis 
Let’s get started with Demo! 
Key Features 
We do not need gdb and ollydbg  
to analyze applications any more. 
Key Features (cont’d) 
2. modify return value 
1. original return value 
3. Click Forward Button 
Should we use the difficult tools for simple analysis?  
You can monitor and control the normal applications  
with your favorite web proxy 
Key Features (cont’d) 
We do not want to use difficult IDA tool  
to analyze applications any more. 
Key Features (cont’d) 
You can know what functions are existed in target apps and 
what functions can be monitored. 
Overall Achitecture 
Components 
● 
Target application 
o 
smart phone apps, excutable program based on Windows, OSX and etc. 
● 
Web Proxy 
o 
A user-friendly proxy to be used for analysis (ex. burp, 
paros, ..)  
● 
BinProxy Client 
o 
is Operated in the target application is installed 
o 
communication module : communicate with BinProxy server 
o 
hooking module : modify the flow of functions. 
● 
BinProxy Server 
o 
is Operated in the web proxy is installed 
o 
communication module : communicate with BinProxy client and web 
proxy 
What You Need 
Need things to make BinProxy 
Intercept function call & 
Forward it to a Web proxy 
Main techniques for implementation 
how to control function calls by using web proxy 
            Convert Functions  
Function monitoring and 
Function Controlling 
Main techniques for implementation (cont’d) 
        API / User-defined function  
           Hooking 
Function monitoring and 
Function Controlling 
Main techniques for implementation (cont’d) 
  Dynamic function Hooking 
    No need a pre-compiled hooking code 
     Dynamic target function selection 
Function monitoring and 
Function Controlling 
Main techniques for implementation (cont’d) 
        Return value,          
 primitive / refernce    
       type arguments        
Target function selection 
Main techniques for implementation (cont’d) 
Extraction API lists   
Target function selection 
(cont’d) 
Main techniques for implementation (cont’d) 
  Extracting user-defined fuctions 
     and Finding out Args and Types 
Target function selection 
(cont’d) 
Main techniques for implementation (cont’d) 
Monitoring function calls and statistics  
-> Selecting target functions easily 
How to make? 
the way of building BinProxy 
How to interwork with a web 
proxy - BinProxy Client 
* hooked_func send before_call message to BinProxy Server through 
communication module. 
* before_call message = function name + the value of arguments 
* After sending a before_call message, the hooked_func will be blocked until 
getting response from BinProxy Server. 
How to interwork with a web 
proxy - BinProxy Server 
BinProxy Server convert a before_call message into 
HTTP request format for delivering the message to 
Web Proxy. 
POST http://127.0.0.1:53388/function_name 
Host: target_app_name 
User-Agent: BinProxy 
01_414141 
How to interwork with a web 
proxy - Web Proxy 
How to interwork with a web 
proxy - BinProxy Client 
execute an original function 
After sending an after_call message,  
hooked_func will be blocked until getting response from BinProxy Server. 
How to interwork with a web 
proxy - BinProxy Server 
BinProxy Server convert a after_call message into  
HTTP response format for delivering the message to 
Web Proxy. 
HTTP/1.1 200 OK 
Date: Mon, 04 Aug 2014 17:22:59 GMT 
Server: BinProxy 
Content-Length: 1 
Connection: close 
Content-Type: application/return 
0 
How to interwork with a web 
proxy - Web Proxy 
How to interwork with a web 
proxy - BinProxy Client 
return the value 
How to make? 
Ways of build android client & PoC 
Key Requirements 
Function 
What&How
ToExtract???
HowtoHook???
Key Requirements  
- What & How To extract .. 
We  can use for hooking in Android : 
• 
Cydia substrate for Android 
• 
Introspy-Android (GUI Interface + Cydia Substrate ) 
• 
AndHook(Android Hooking Framework) 
• 
 ADBI(Android Dynamic Binary Instrumentation Toolkit) 
• 
[Paper] Hooking on Android -2014 CodeEngn Conference 
 …. 
Key Requirements  
- What & How To extract .. 
ADBI 
(Android Binary Instrumentation Toolkit) 
Intercept/Use DVM Methods  
on Dalvik VM Library 
(libdvm.so) 
Dynamic Dalvik Instrumentation Framework for Android (old) 
 - Collin Mulliner, SummerCon 2013. 
https://github.com/crmulliner/adbi (current) 
Binproxy Client modules for Android 
TARGET (App.) 
HOOKY 
(shared library) 
Binproxy Server 
(Users) 
COMMUNICATOR 
(user interaction) 
INJECTOR 
HOOKY 
(shared library) 
COMM. 
(user interaction) 
●  INJECTOR 
: Inject the HOOKER(.so) into Target App.(running 
process) 
●  HOOKER 
: Hook the java/Android standard API for analysis. 
: loaded as the shared library(so) developed using JNI 
●  COMMUNICATOR 
: Interactive interface for communication with user  
: Send/receive values for Hooking, Monitoring, 
Modifying 
Binproxy Client modules … (cont’d) 
How to implement Android Client 
Implemented using JNI(Java Native Interface) 
-  Get the method Information loaded 
-  Define/Prototype new function(native) for target 
function(method) 
-  Call Original Method from new function. 
-  Monitor/Modify a argument/return value 
                  DVM 
Original 
method 
New(JNI) 
FindClass/Method
(dvmFindXXXX)
1 
Replacetheoriginalmethod
withanewnativefunction
(dvmUseJNIBridge)
3 
Definenewnativefunction
2 
Calltheoriginalfunction
fromnewnativefunction
(callback)
4 
How to implement … (Cont’d) 
Monitor/Modify  
How to implement .. (Cont’d) 
Call  Method
DEMO - PoC for Android App 
     DEMO 
How to make? 
Ways of build iOS client & PoC 
Key Requirements - How To hook .. 
●  We can use for hooking in iOS: 
a.  Cydia Substrate for iOS 
b.  fishhook 
c.  Mach-O-Hook 
How to implement iOS client 
●  Use a CydiaSubstrate 
a.  Why CydiaSubstrate? 
-> verified stability 
●  Most of Apps in Cydia are use a 
CydiaSubstrate! 
●  Component of CydiaSubstrate 
a.  MobileHooker 
b.  MobileLoader 
c.  Safe Mode 
Key Requirements - What & How 
extract... 
●  Mach-O File Format 
Key Requirements - What & How 
extract... 
●  API 
LC_SYMTAB 
Symbol Table 
String Table 
Key Requirements - What & How 
extract... 
●  Objective-C and User Function Address 
LC_FUNCTION_STARTS 
Function Starts 
How to implement iOS client 
●  Target API and method selection 
a.  Extracting Objective C classes & 
methods 
b.  Extracting API lists 
c.  Finding out user-defined function’s 
args and types 
●  Monitoring an entire method and API by 
using hooking (Logging?) (Logging?) 
DEMO - PoC for iOS App 
     DEMO 
Anything else? 
Future Works 
Implementation Methods 
●  How to obtain a target application’s 
function list and detail informations of 
the function 
●  How to utilize database information to 
distinct functions 
Additional Functions 
●  arbitrary function execution 
●  arbitrary code execution 
●  memory scan and patch 
●  function control based on script 
languages 
●  disassemble and decompilation 
And… 
●  Performance Improvement 
●  Additional OS Support 
谢谢 
Any Other Questions or Comments? 
email : PI:EMAIL