theregister.co.uk/2019/02/14/password_length/. Feb. 2019.
I. Corona et al. “Lux0r: Detection of Malicious PDF-Embedded
JavaScript Code through Discriminant Analysis of API References”.
In: Proceedings of the 2014 Workshop on Artiﬁcial Intelligent and
Security Workshop. ACM. 2014, pp. 47–57.
[20]
[21]
[22]
[19] CVE Details. Adobe Acrobat Reader: Security Vulnerabilities (DoS).
https://www.cvedetails.com/vulnerability-list/vendor_id-53/product_
id-497/opdos-1/Adobe-Acrobat-Reader.html. 2006.
P. Deutsch. DEFLATE Compressed Data Format Speciﬁcation. 1996.
ECMA. ECMAScript Language Speciﬁcation, 3rd Edition. 1999.
E. Ellingsen. ZIP File Quine: Droste.zip. https://web.archive.org/web/
20160130230432/http://www.steike.com/code/useless/zip-ﬁle-quine/.
[23] K. Foss. Washington Post’s scanned-to-PDF Sniper Letter More Re-
vealing Than Intended. http://web.archive.org/web/20040204141449/
http://planetpdf.com/mainpage.asp?webpageid=2434. 2002.
[24] G. Franken, T. Van Goethem, and W. Joosen. “Who Left Open
the Cookie Jar? A Comprehensive Evaluation of Third-Party Cookie
Policies”. In: 27th USENIX Security Symposium (USENIX Security
18). Baltimore, MD: USENIX Association, 2018, pp. 151–168.
J. Gajek. “Macro Malware: Dissecting a Malicious Word Document”.
In: Network Security 2017.5 (2017), pp. 8–13.
S. Garﬁnkel. “Leaking Sensitive Information in Complex Document
Files – and How to Prevent It”. In: IEEE Security & Privacy 12.1
(2013), pp. 20–27.
[27] V. Hamon. “Malicious URI resolving in PDF documents”. In: Journal
of Computer Virology and Hacking Techniques 9.2 (2013), pp. 65–76.
[28] Michael Harder, Benjamin Morse, and Michael D Ernst. “Speciﬁca-
[25]
[26]
tion Coverage as a Measure of Test Suite Quality”. In: (2001).
[29] Chris Hummel. “Why Crack When You Can Pass The Hash”. In:
SANS Institute InfoSec Reading Room 21 (2009).
[30] A. Inführ. Adobe Reader PDF - Client Side Request Injection. 2018.
[31] A. Inführ. Multiple PDF Vulnerabilities – Text and Pictures on
Steroids. 2014.
[32] A. Inführ. PDF – Mess with the Web. Sept. 2015.
[33] B. Krebs. Document Security 101. http://voices.washingtonpost.com/
[34]
[35]
securityﬁx/2005/12/document_security_101_1.html. 2005.
P. Laskov and N. Šrndi´c. “Static Detection of Malicious JavaScript-
bearing PDF Documents”. In: Proceedings of the 27th Annual Com-
puter Security Applications Conference. ACM. 2011, pp. 373–382.
J. Magazinius, B. Rios, and A. Sabelfeld. “Polyglots: Crossing Origins
by Crossing Formats”. In: Proceedings of the 2013 ACM SIGSAC
Conference on Computer & Communications Security. ACM. 2013,
pp. 753–764.
[36] D. Maiorca and B. Biggio. “Digital Investigation of PDF Files:
Unveiling Traces of Embedded Malware”. In: IEEE Security and
Privacy: Special Issue on Digital Forensics (2017).
[37] D. Maiorca, G. Giacinto, and I. Corona. “A Pattern Recognition
System for Malicious PDF Files Detection”. In: International Work-
shop on Machine Learning and Data Mining in Pattern Recognition.
Springer. 2012, pp. 510–524.
[38] D. Maiorca et al. “A Structural and Content-Based Approach for
a Precise and Robust Detection of Malicious PDF Files”. In: 2015
International Conference on Information Systems Security and Privacy
(ICISSP). IEEE. 2015, pp. 27–36.
I. Markwood et al. “PDF Mirage: Content Masking Attack Against
Information-Based Online Services”. In: 26th USENIX Security Sym-
posium (USENIX Security 17), (Vancouver, BC). 2017, pp. 833–847.
[40] M. Marlinspike. “Divide and Conquer: Cracking MS-CHAPv2 with a
[39]
100% success rate”. In: CloudCracker [online] 29 (2012).
[41] K. McCarthy. That classiﬁed US military report’s secrets in full. https:
//theregister.co.uk/2005/05/03/military_report_secrets/. 2005.
[49]
[48]
[42] A. Nusca. Facebook settlement revealed via poor PDF redaction.
https://www.zdnet.com/article/facebook- settlement- revealed- via-
poor-pdf-redaction/. 2009.
[43] N. Ochoa. Pass-The-Hash Toolkit-Docs & Info. 2008.
[44]
Parker, T. How to do (not so simple) form calculations. https : / /
acrobatusers.com/tutorials/print/how- to- do- not- so- simple- form-
calculations. July 2006.
[45] G. Pellegrino et al. “In the Compression Hornet’s Nest: A Security
Study of Data Compression in Network Services”. In: 24th USENIX
Security Symposium (USENIX Security 15). 2015, pp. 801–816.
[46] C. Pesce. Document Metadata, the Silent Killer...
[47] D. Poddebniak et al. “Efail: Breaking S/MIME and OpenPGP Email
Encryption using Exﬁltration Channels”. In: 27th USENIX Security
Symposium (USENIX Security 18). 2018, pp. 549–566.
S. Rautiainen. “A Look at Portable Document Format Vulnerabilities”.
In: Information Security Technical Report 14.1 (2009), pp. 30–33.
F. Raynal, G. Delugré, and D. Aumaitre. “Malicious Origami in PDF”.
In: Journal in Computer Virology 6.4 (2010), pp. 289–315. URL: http:
//esec-lab.sogeti.com/static/publications/08-pacsec-maliciouspdf.pdf.
[50] Check Point Research. NTLM Credentials Theft via PDF Files. https:
//research.checkpoint.com/ntlm-credentials-theft-via-pdf-ﬁles/. 2018.
[51] B. Rios, F. Lanusse, and M. Gentile. Adobe Reader Same-Origin
Policy Bypass. http://www.sneaked.net/adobe- reader- same- origin-
policy-bypass. Jan. 18, 2013.
[52] K. Selvaraj and N. Gutierrez. The Rise of PDF Malware. Tech. rep.
Symantec, 2010. URL: https : / / www. symantec . com / content / dam /
symantec/docs/security- center/white- papers/security- response- rise-
of-pdf-malware-10-en.pdf.
[53] C. Smutz and A. Stavrou. “Malicious PDF Detection Using Metadata
and Structural Features”. In: Proceedings of the 28th Annual Computer
Security Applications Conference. ACM. 2012, pp. 239–248.
[54] Aaron Spangler. WinNT/Win95 Automatic Authentication Vulnerability
(IE Bug #4). https : / / insecure . org / sploits / winnt . automatic .
authentication.html. Mar. 1997.
[55] N. Šrndi´c and P. Laskov. “Hidost: A Static Machine-Learning-Based
Detector of Malicious Files”. In: EURASIP Journal on Information
Security 2016.1 (2016), p. 22.
Sutherland, E. First Reported PDF Virus Is Not ’Peachy’. http://web.
archive.org/web/20030617154329/http://www.osopinion.com/perl/
story/12626.html. 2001.
Symantec. VBS/PeachyPDF@MM. Aug. 2001. URL: https : / / www.
symantec.com/security-center/writeup/2001-080705-1926-99.
Symantec. W32/.Yourde-A. Apr. 2003. URL: https://www.symantec.
com/security-center/writeup/2003-050108-4923-99.
[59] Adobe Systems. Fast Facts. 2018. URL: https : / / www. adobe . com /
[56]
[57]
[58]
content/dam/cc/en/fast-facts/pdfs/fast-facts.pdf.
[60] Adobe Systems. PDF Reference, version 1.7. sixth edition. Nov. 2006.
L. Tong et al. A Framework for Validating Models of Evasion Attacks
[61]
on Machine Learning, with Application to PDF Malware Detection.
L. Tong et al. “Feature Conservation in Adversarial Classiﬁer Evasion:
A Case Study”. In: CoRR abs/1708.08327 (2017).
[63] H. Valentin. “Malicious URI Resolving in PDF Documents”. In:
[62]
BlackHat Abu Dhabi (2012).
[64] M. West and M. Goodwin. “Same-site Cookies”. In: Internet Engi-
neering Task Force Secretariat (2016), pp. 1–14.
14
Pages
loop
GoTo
loop
Action
loop
Calculator
functions
Outline
loop
ObjStm
loop
JavaScript
loop
Deﬂate
bomb
Application
A1 A2 A3 A4 B1 B2 B3 B4 C1 C2 C3 D1 D3 E2 E3
G1 G2 G3
–
Acrobat Reader DC
Foxit Reader
PDF-XChange Viewer
Perfect PDF Reader
PDF Studio Viewer
Nitro Reader
Acrobat Pro DC
Foxit PhantomPDF
PDF-XChange Editor
Perfect PDF Premium
PDF Studio Pro
Nitro Pro
Nuance Power PDF
iSkysoft PDF Editor
Master PDF Editor
Soda PDF Desktop
PDF Architect
PDFelement
Preview
Skim
Evince
Okular
MuPDF
Chrome
Firefox
Safari
Opera
Edge
s
w
o
d
n
i
W
(cid:35) (cid:35) (cid:35) Ǆ (cid:35) (cid:35) / (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) Ǆ Ǆ Ǆ (cid:35) Ǆ Ǆ (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) / (cid:35)
Ǆ Ǆ Ǆ Ǆ (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) Ǆ Ǆ (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) /
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) Ǆ (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) Ǆ Ǆ
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) Ǆ (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) / (cid:35) Ǆ Ǆ Ǆ Ǆ (cid:35) Ǆ Ǆ (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) / / (cid:35) (cid:35) Ǆ Ǆ (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) Ǆ Ǆ (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) / (cid:35) /
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) Ǆ (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) Ǆ Ǆ
(cid:35) (cid:35) Ǆ Ǆ Ǆ (cid:35) (cid:35) Ǆ Ǆ Ǆ Ǆ Ǆ (cid:35) Ǆ Ǆ
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) / /
(cid:35) (cid:35) (cid:35) (cid:35) Ǆ (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) Ǆ Ǆ (cid:35) (cid:35) Ǆ Ǆ
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) Ǆ Ǆ (cid:35) (cid:35) Ǆ Ǆ
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) Ǆ /
(cid:35) (cid:35) (cid:35) (cid:35)
c (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) Ǆ Ǆ Ǆ (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) Ǆ Ǆ Ǆ (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
x (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
b (cid:35) (cid:35) (cid:35) (cid:35) (/) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (/) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (/) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (/) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (/) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
u
n
i
L
(/) Only current tab hangs
/ Applications hangs
W
M
a
e
F1
/
/
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
/
/
/
/
/
/ Ǆ /
(cid:35)
/
/
/
/
/
/ / /
/ / /
/ Ǆ /
/ (cid:35) /
(cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35)
/ (cid:35) /
/ (cid:35) /
(cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35)
(cid:35)
/ (cid:35) / Ǆ
(cid:35) (cid:35) (cid:35)
(cid:35)
(cid:35)
/ (cid:35) /
(cid:35) (cid:35) (cid:35)
(cid:35)
(cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35) Ǆ
/ (cid:35) / Ǆ
(cid:35)
(/) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35)
(/) (cid:35) (cid:35)
(cid:35) (cid:35) (cid:35)
/ Ǆ Ǆ /
/ Ǆ Ǆ /
/ / /
(cid:35)
(cid:35)
/
/
/
/
(/)
DETAILED RESULTS FOR THE DENIAL-OF-SERVICE CLASS OF ATTACKS.
(cid:35) Not vulnerable
Ǆ Application crashes
TABLE VI.
APPENDIX
Acknowledgements
Jens Müller was supported by the research training group
“Human Centered System Security”, sponsored by the state
of North Rhine-Westfalia. Dominik Noss was supported by
the research project “MITSicherheit.NRW” funded by the Eu-
ropean Regional Development Fund North Rhine-Westphalia
(EFRE.NRW). In addition, this work was supported by the
German Research Foundation (DFG) within the framework of
the Excellence Strategy of the Federal Government and the
States – EXC 2092 CASA.
A. Availability of Artifacts
We released a comprehensive test suite of malicious PDF
ﬁles which can be used by developers to test their software.
All proof of concept exploit ﬁles are available for download
from https://pdf-insecurity.org/download/pdf-dangerous-paths/
exploits-and-helper-scripts.zip, to allow for easy reproduction.
B. Evaluation Details: Denial of Service
In Table VI, full evaluation details for the DoS class of
attacks are given. Test cases (e.g., A1) follow the same naming
convention as the proof-of-concept ﬁles provided as artifacts,
which are available online.
C. Evaluation Details: Content Masking
Table VII shows detailed evaluation results for content
masking attacks. Each column corresponds to a test case
in the artifacts. Columns which did not produce ambiguous
results (i.e., render similar in all tested applications) have been
stripped for reasons of clarity.
15
X
Q
9
Q
8
Q
7
Q
6
Q
5
Q
4
Q
3
Q
2
Q
1
Q
X
P
9
P
8
P
7
P
6
P
4
P
3
P
1
P
5
N
4
N
3
N
2
N
1
N
4
M
3
M
8
K
7
K
6
K
5
K
4
K
1
K
1
J
3
I
6
H
5
H
3
H
2
H
3
G
1
G
3
F
1
F
4
E
3
E
4
D
2
D
1
D
X
C
8
C
7
C
6
C
4
C
3
C
2
C
1
C
1
B
5
A
4
A
3
A
1
A
n
o
i
t
a
c
i
l
p
p
A
–
1
1
2
2
2
2
1
1
–
1
–
–
–
–
2
1
1
1
–
–
1
–
2
–
1
1
2
2
2
2
1
1
–
1
–
–
–
–
2
1
1
1
–
–
1
–
2
–
1
1
2
2
2
2
1
1
–
1
–
–
–
–
2
1
1
1
–
–
1
–
2
–
1
1
2
2
2
2
1
1
–
1
–
–
2
–
2
1
1
1
–
–
1
–