I understand you're encountering an issue while trying to highlight the current menu item by checking `Router.pathname` in your Next.js application. The error message indicates that no router instance is found, which typically happens when you try to use `next/router` on the server side. Here’s a more detailed and professional way to describe and solve the problem:

---

### Issue Description

I am attempting to highlight the current menu item in my Next.js application by checking the `Router.pathname`. However, I am encountering the following error:

```
No router instance found. You should only use "next/router" inside the client side of your app.
Error: No router instance found.
You should only use "next/router" inside the client side of your app.
```

When I remove the code and add it after the page has loaded (using Hot Module Replacement, HMR), the code works. However, when I refresh the page, the error reappears.

### Steps to Reproduce

1. Import `Router` from `next/router`.
2. Use `Router.pathname` in a functional component.

Example code:
```javascript
import Router from 'next/router';

const Menu = () => (
    <div>
        {JSON.stringify(Router.pathname)}
    </div>
);

export default Menu;
```

### Solution

The issue arises because `next/router` is not available on the server side. To ensure the code runs only on the client side, you can use the `useEffect` hook to access `Router` after the component has mounted. Here’s how you can modify your code:

```javascript
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';

const Menu = () => {
    const [pathname, setPathname] = useState('');
    const router = useRouter();

    useEffect(() => {
        setPathname(router.pathname);
    }, [router.pathname]);

    return (
        <div>
            {JSON.stringify(pathname)}
        </div>
    );
};

export default Menu;
```

### Explanation

1. **Import `useRouter`**: This hook provides access to the router object, which is only available on the client side.
2. **Use `useState`**: Initialize a state variable `pathname` to store the current path.
3. **Use `useEffect`**: Update the `pathname` state whenever the `router.pathname` changes. This ensures that the code runs only on the client side after the initial render.

By following these steps, you can avoid the error and correctly highlight the current menu item based on the current route.

### Environment
- Next.js version: 2.1.1

---

This approach ensures that your code is both clear and professional, and it provides a robust solution to the problem.