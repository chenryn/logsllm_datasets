 **I'm submitting a**
  * bug report
  * feature request
  * support request
**Current behavior**  
When instantiating a component with ViewContainerRef.createComponent(), if
component has a selector, and there are also directives that match the
component selector, they don't get instantiated.
**Expected behavior**
All matching directives should get instantiated along with the component
instantiation.
**Minimal reproduction of the problem with instructions**  
This plunk: https://plnkr.co/edit/1oLA6HkAuOTgwOPMseG2?p=preview
**What is the motivation / use case for changing the behavior?**
Creating component from **template** , or **programmatically** is a matter of
use case and should result in the same outcome as much as possible. Although
there is no support for explicitly applying a custom set of directives on the
instantiated component when working with `ViewContainerRef.createComponent()`,
and it may be too complicated to add support for it, the case when component
selector matches some other directives can and need to be handled.
The specific use case in which I encountered the issue:  
I was creating a structural `*myLoading="condition"` directive, which simply
renders a spinner if the condition is true or renders the host element
otherwise. I was using MdProgressSpinner component for the spinner but the
stroke color was not applying because the theme related classes are adding via
a directive with exact same selector as the component selector.  
I created a simple plunk for this example.
**Please tell us about your environment:**
Not related actually.
  * **Angular version:** 4.1.3
  * **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
  * **Language:** [all | TypeScript X.X | ES6/7 | ES5]
  * **Node (for AoT issues):** `node --version` =