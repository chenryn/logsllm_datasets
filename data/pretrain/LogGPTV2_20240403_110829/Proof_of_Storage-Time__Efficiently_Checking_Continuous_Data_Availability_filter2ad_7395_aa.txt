title:Proof of Storage-Time: Efficiently Checking Continuous Data Availability
author:Giuseppe Ateniese and
Long Chen and
Mohammad Etemad and
Qiang Tang
Proof of Storage-Time: Efﬁciently Checking
Continuous Data Availability
Giuseppe Ateniese∗, Long Chen†, Mohammad Etemad∗ and Qiang Tang†
∗Stevens Institute of Technology, Email: {gatenies, metemad}@stevens.edu
†New Jersey Institute of Technology, Email: {longchen, qiang}@njit.edu
Abstract—A high-quality outsourced storage service is crucial
for many existing applications. For example, hospitals and data
centers need to guarantee the availability of their systems to
perform routine daily activities. Such a system should protect
users against downtime and ensure data availability over time.
Continuous data availability is a critical property to measure
the quality of an outsourced storage service, which implies
that outsourced data is continuously available to the server
during the entire storage period. We formally study the Proof of
Storage-Time (PoSt), the notion initially proposed in the Filecoin
whitepaper, which enables a veriﬁer to audit the continuous data
availability of an outsourced storage service. We provide a formal
security model of PoSt and generic constructions that are proven
secure under our deﬁnition. Moreover, our concrete instantiation
can yield a PoSt protocol with an extremely efﬁcient veriﬁcation:
a single hash computation to verify a proof of size around 200
bits. This makes our scheme applicable even in the decentralized
storage marketplace enabled by blockchain.
I.
INTRODUCTION
Outsourced storage has become a common practice over
the years for backup, data sharing, and more. Increasingly
enterprises and individuals choose to rely on a cloud service
provider, for example, Amazon Simple Storage Service (S3),
to store and maintain their data. If the server collapses, as
several occurrences reported recently, e.g., [46], [2],
there
would be severe repercussions hindering business operations,
causing productivity decrease, customer dissatisfaction, or even
revenue reduction. The consequences are particularly dire for
certain applications that need to be run 24/7 [10]. Therefore,
a system that ensures consistent service availability is highly
desirable for those mission- and business-critical applications.
Continuous availability, on the other hand, becomes one
distinguishing feature that several major storage providers,
such as DELL EMC [43] and IBM [39], readily advertise.
How to provide such a property from a system perspective
has been intensively studied by various researchers [19], [29],
[34]. In general, continuous availability should protect users
against downtime, whatever the cause, and ensures that ﬁles
remain accessible to users anytime and anywhere.
Continuous data availability or possession is an enhanced
storage integrity feature that is difﬁcult to achieve. To provide
a highly reliable service, cloud providers have to deal with
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24427
www.ndss-symposium.org
all kinds of failures, power outages, or even attacks on their
servers. They have to include more replications, devote more
redundant hardware and software components, and handle
complex administrative workloads. It is thus straightforward
to recognize that providing continuous data availability is
costly and forces cloud storage providers to adopt specialized
hardware and software solutions [12]. A dishonest provider
would likely ofﬂoad those burdens and provide an inferior
service without continuous data availability. Moreover, data
owners are charged more for reliable storage [35] and may
require an irrefutable guarantee that
the service they are
paying for is being provided correctly. An immediate question
arises: how can we verify that a storage provider is indeed
supplying continuous data availability,
the provider is
virtually always in possession of the outsourced data so that
the data owner can retrieve it at any time?
i.e.,
Similar to other data availability techniques, such as proof
of data possession (PDP) [8] and proof of retrievability (PoR)
[31],
the veriﬁcation procedure should be as efﬁcient as
possible, both in terms of computation and communication.
Ideally, those costs should be independent of the data size and
the length of time for continuous storage.
We strive for a very light veriﬁcation procedure also due to
the emerging application of decentralized storage marketplaces
powered by Ethereum [49] or Filecoin [40]. This new storage
framework is believed to provide superior resilience and reduce
costs [16]. In such a setting, data owners simply publish a
smart contract that pays storage peer nodes once a succinct
and valid proof of storage is received. As smart contracts use
on-chain messages and can be expensive to run, it’s crucial to
minimize both the size and computational cost of veriﬁcation.
The above discussion highlights a central question we
would like to study in this article:
How can we efﬁciently monitor storage providers to ensure
outsourced data is continuously available?
Naive attempts. Proof of data possession (PDP) [8] and
proof of retrievability (PoR) [31] are cryptographic protocols
that enable a client to efﬁciently verify whether data stored
at the cloud provider is intact and available. The original
PoR scheme, based on hidden sentinels, worked only for
encrypted ﬁles and a limited number of challenges. PDP, based
on homomorphic tags, had no such restrictions and offered
public veriﬁability where everybody, not just the data owner,
can verify the proofs. The ﬁeld evolved rapidly and schemes
with better efﬁciency [44], [9], [17], [45], [5], or advanced
properties [50], [51], [20] were introduced. New PoR schemes
are based on homomorphic tags and can be seen as PDP
schemes coupled together with erasure coding. This extra step,
while costly, guarantees retrievability of the ﬁle [7]. However,
PDP/PoR protocols certify data integrity and availability only
at the time a valid proof is processed. Between two proofs,
there is nothing that can be guaranteed about the availability
of the outsourced data. In principle, a rogue storage node could
delegate storage contracts to other nodes that may offer inferior
service and then recover the data in time to respond to the next
challenge. It’s possible to request the client to challenge the
storage provider frequently, but this method is inefﬁcient in
terms of communication and computational cost for the client
that must verify multiple proofs. Besides, it requires the client
to be always online.
A. Our contributions
To address the problem of efﬁciently verifying continuous
data availability, we give a formal and systematic treatment
for the new notion of proof of storage-time (PoSt) (Filecoin
initially proposed a similar notion called proof of spacetime
[40], but
the name “spacetime” now refers to an existing
primitive [33] so we renamed it to avoid confusion). PoSt is a
challenge-response protocol that allows the prover to convince
the veriﬁer that data is continuously available and retrievable
for a range of time. Efﬁciency in our context means that the
proof from the prover must be succinct, and the veriﬁer does
not have to be always online.
In particular, we ﬁrst formally deﬁne the security properties
of PoSt, i.e., what continuous availability precisely means. We
then give a warm-up construction paired with a rigorous secu-
rity analysis, followed up by our main construction with fur-
ther efﬁciency improvements as well as supporting advanced
properties such as “public veriﬁability/validation”. We also
demonstrate the efﬁciency of our protocol by implementing
it for various choices of the parameters.
Formally deﬁning PoSt. The syntax of PoSt is similar to PoR/
PDP. The veriﬁer sends a challenge and receives a succinct
response after a time T speciﬁed by the veriﬁer. The veriﬁer
can be ofﬂine most of the time.
Providing a precise security model is intricate. We need to
deﬁne the continuous availability requirement formally, i.e., the
data is possessed by the prover at any time during the storage
period. Intuitively, we shall upgrade the soundness deﬁnition
of PDP/PoR [8], [44], which deﬁnes an extractor algorithm
(similar to the classical notion of proof of knowledge) that
the data can be extracted via (non-black-box) interaction with
the prover. To capture continuous availability, we could deﬁne
a stronger extractor algorithm that can extract the data from
the prover at any point in time. But, a critical question arises:
how do we ensure the extracted knowledge of data is indeed
presently possessed by the prover at a speciﬁc time?
Informally, the non-black-box PoSt prover is modeled as an
interactive Turing machine (ITM); thus, any knowledge/data
that is presently possessed by the machine must be either
preserved in the conﬁguration (memory) at that time point or
hardcoded in the transition function. This allows us to capture
“continuous extractability” by requiring the extractor to operate
after is provided with the conﬁguration of the prover’s ITM at
any speciﬁed execution step along with the transition function.
To make our deﬁnition more general, we choose a param-
eter t to characterize the approximation of the above idealized
“continuous extractability”, i.e., the extractor is provided by
a bunch of conﬁgurations that correspond to an epoch with
length t instead of one single step. Of course, the smaller t
is the better approximation of the continuous availability the
model will be. Intuitively, this approximation mimics the trivial
solution that the data is audited every epoch with length t.1
Non-triviality of the construction. Constructing a PoSt re-
quires special care. Simple improvements over naive attempts
may still suffer from various nuisances. For example,
the
veriﬁer may execute a PoR in each time slot t during the range
period T . To relieve the veriﬁer from being always online,
he could send all challenges in advance. However, the prover
could cheat by computing all PoR proofs rapidly and, thus,
spending less time than t for each challenge. On the other
hand, if all challenges are sent at the end of the period, the
prover could keep data ofﬂine for most of the time and then
retrieve it when required. So the main challenge is to ﬁnd a
protocol where the prover is challenged often (e.g., once every
time slot t) without requiring the veriﬁer to stay online and
interact with the prover.
Filecoin proposed a candidate PoSt construction in their
whitepaper [40]. Their idea is to let the prover generate a
sequence of PDP/PoR proofs, where the challenge for each
proof is derived from hashing the antecedent proof in the
sequence. In this way, the veriﬁer needs to provide only the
ﬁrst challenge and then can stay put ofﬂine.
While the idea is reasonable and intuitive, it does not
provide the security guarantee needed for a PoSt protocol. The
main issue is that the prover can run proof-of-storage protocols
much faster than expected or estimated by the veriﬁer. Once
all proofs are computed, a malicious storage provider could
simply put data ofﬂine until it is rechallenged. This is a severe
drawback since proof-of-storage schemes can be accelerated
through parallelism.
Warm-up construction. The time constraints of PoSt are quite
strict and critical. One way to build a PoSt protocol that can
be proven secure is to leverage the recently proposed notion of
veriﬁable delay function (VDF). In a veriﬁable delay function,
the evaluation of the function must be delayed by a speciﬁed
amount of time (currently measured by the number of certain
unit operations), but the results can be veriﬁed much more
efﬁciently. More importantly, the delay holds even if one uses
a parallel computer. With the help of a VDF, we could now
compel the storage provider to generate a PDP/PoR proof in
every time slot with length t.
Intuitively, we require the prover to generate the challenge
for each PDP/PoR instance from the output of a VDF. Con-
cretely, each challenge ci = H (VDF.Eval(G(pi−1))), where
pi−1 is the antecedent PDP/PoR proof, G(·),H(·) are properly-
chosen hash functions, and VDF.Eval(·) is the VDF evaluation
algorithm. The prover returns all challenge-proof pairs together
with the respective VDF proofs. Recall that the execution time
1In practice, when t is reasonably small, the cost for the storage provider
to frequently move the data back and forth could be even higher than simply
keeping them online. On the other hand, there should be a natural trade-off
between efﬁciency and precision, which is expressed by the extra parameter
t.
2
is divided into a speciﬁc number of slots. Then, the veriﬁer
selects a proper VDF delay time to ensure the prover calculates
at least one PDP/PoR proof per time slot. If the prover is not
fast enough, the PoSt will not be computed in time.
Striving for efﬁcient veriﬁcation. The intuitive protocol above
is quite simple and provably secure, but it’s very inefﬁcient.
The communication cost is high, and the veriﬁcation procedure
is computationally expensive. The homomorphic aggregation
techniques originally introduced in PDP [8] are not applicable
here since the sequentiality of challenges is critical to PoSt.
One of our main innovations is to come up with a different
strategy. Our idea is to let the veriﬁer reproduce the same
sequence of PDP/PoR instances as the prover. Thus, rather
than verifying all proofs and VDFs, the veriﬁer must simply
check that two sequences of PDP/PoR proofs are the same.
The comparison can be efﬁciently realized through collision-
resistant hash functions.
However, we still must overcome two remaining challenges
to make our idea practical: (1) the prover algorithm needs to
be deterministic to ensure that the reproduction performed by
the veriﬁer is the same; (2) the veriﬁer algorithm must be
efﬁcient. The ﬁrst point is simple to address since we can
rely on multiple and suitable PDP/PoR candidates [31], [8],
[44], [45]. Controlling the computation cost of the veriﬁer is
challenging, and we make two additional observations:
• We could leverage an asymmetric VDF in the sense
that there is a trapdoor that allows anyone to compute
the evaluation function efﬁciently without any delay.
These computations can be moved to the setup phase.
Our construction of PoSt can be viewed as a practical
application of the notion of trapdoor delay function
(TDF) mentioned by Wesolowski [48].
• We could adopt a bounded-use PDP/PoR that supports
only a limited number of challenges. Given the struc-
ture of our protocol, this is not a limitation and allows
us to reduce costs signiﬁcantly. Indeed, bounded-use
proof of storage protocols can be obtained purely from
symmetric-key primitives, and enjoy greater efﬁciency
than the algebraic constructions.
We demonstrate our method in Fig. 1.
Fig. 1: Structure of our construction
Public validation. In the application of a decentralized storage
marketplace as proposed by Filecoin [40], the data owner could
crowdsource the storage service and leverage a smart contract
that pays providers if they can produce a valid PoSt proof
3
of continuous data availability. Therefore, we could consider
the notion of public validation where a smart contract or any
third party could validate PoSt proofs from public knowledge.
An even stronger property, public veriﬁability,
insists that
the veriﬁer possesses no trapdoor at all, see section IV for
details. Note that the warm-up construction introduced above
provides public veriﬁability while its compact version, which
is presented later, provides public validation.
Indeed, consider the following observation. When compar-
ing two sequences of proofs, it’s possible to check the digests
(hashes) of the two sequences directly. Thus, the veriﬁer could
further hash the digest of the sequence to derive d and then
make d public or embed it into the smart contract. Anyone
with d can check whether h(π) = d, where h(·) is a collision-
resistant hash and π is the PoSt proof. In the end, we obtain
a PoSt protocol whose veriﬁcation algorithm performs only a
single hash computation!
An efﬁcient instantiation. Note that in a PoSt, the prover’s
computational cost is intrinsic since the nature of PoSt requires
the prover to access data blocks frequently. Thus, the main
concern relevant to efﬁciency is the setup step. However, since
we can use a stateless PoR from highly efﬁcient symmetric-
key primitives, the total cost of the setup procedure can also be
made practical. According to our experiment results (section
VII), the setup procedure for a ﬁle of size 64 MB, which is
supposed to be stored for 1 month and veriﬁed every hour, will