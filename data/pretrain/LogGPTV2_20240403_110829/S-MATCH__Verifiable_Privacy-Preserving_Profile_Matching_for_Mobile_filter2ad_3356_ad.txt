number of rounds of interaction to recover plaintext M of the
ciphertext C. At round i,
Fig. 3. The S-MATCH scheme.
proﬁle data Au as input and outputs the newly computed
high entropy proﬁle data.
• Encryption: Cu ← Enc(Mu). Enc runs OPE, the sym-
metric encryption scheme, on the client’s mobile device.
• Matching: R ← M atch(u, C). Match runs at the server
side to output k users with similar social proﬁles to
user u, with user u’s ID and the encrypted social proﬁle
dataset as input.
• Authentication: ciphu ← Auth(u). Auth runs at the the
client’s mobile device which takes user u’s ID as input
and returns the authentication information ciphu.
• Veriﬁcation: b ← V f (IDv, ciphv, u). Vf runs at the
the client’s mobile device which takes the authentication
information ciphv and user v’s ID as input and returns a
boolean b.
B. Security Analysis
Now, we formally deﬁne the plaintext recovery under or-
dered known plaintext attack (PR-OKPA) and the plaintext
recovery under known key attack (PR-KK) which become
more feasible given the information leakage problem and the
key sharing problem we mentioned in Section IV.
between a user u and an adversary S proceeds as follows:
Deﬁnition 6: PR-OKPA security game. The security game
(1) The user u chooses the key k ← K.
• The adversary S hashes the Kup as the index.
• The adversary leads the interaction for the ordered search
in the server, with the adversary S observing all the states
of the server.
• The server returns the ciphertexts {C}.
(cid:2)}.
(3) The adversary S outputs {M
We say the adversary S wins the game if its guess is
(cid:2)} = {M}). Let Adv
P R−KK
S−M AT CH (S) be the value
correct ({M
indicating the success of the adversary in the above game.
Theorem 2: A proﬁle matching scheme based on OPE is
P R−KK
PR-KK secure if for all adversaries S Adv
S−M AT CH (S) =
m
N , where m is the number of users whose proﬁles are close
(i.e., (cid:7) Au − Av (cid:7)≤ θ) to user u, N is the number of users
and m (cid:10) N.
For the honest-but-curious server and honest-but-curious
user (Section V-B), during the proﬁle matching, only the order-
preserving encrypted proﬁles will be submitted to the server.
In other words, the server obtains nothing but the order of
the plaintexts. With the entropy of users’ proﬁle attributes
increased to a conﬁgurable value based on the security level,
the scheme is PR-OKPA secure. For instance, to achieve the
security level of 80, the entropy can be conﬁgured to 64 bits.
Namely, even though the untrusted server obtains the order of
the plaintext encrypted with OPE, it cannot obtain the exact
values of users’ proﬁle attributes. Hence, our proﬁle matching
scheme is PR-OKPA secure against the honest-but-curious
server.
Also, an honest-but-curious user is not able to obtain the
proﬁles or network information of others because they do
294294294
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:56 UTC from IEEE Xplore.  Restrictions apply. 
not communicate with each other directly. Additionally, the
communication messages between the user and the server are
protected from eavesdropping and modiﬁcation by other users,
because of the secure communication channel. During the
results veriﬁcation, the authentication information cannot be
cracked by the honest-but-curious server or honest-but-curious
user, because the veriﬁcation scheme utilizes the user’s secret
value su and the proﬁle key Kup to generate the authentication
information. Assuming that the secret value su is generated
randomly and uniformly, the complexity to obtain su from the
ciphu is as hard as the computational Difﬁe-Hellman problem,
which, as far as we know, cannot be solved in polynomial
time in the proper group (e.g., the subgroup of quadratic
residues). Consider the collusion between a user and the server,
S-MATCH is PR-KK secure, which indicates that the proﬁle
leakage only happens among the users whose proﬁles are close
(i.e., (cid:7) Au − Av (cid:7)≤ θ) to this honest-but-curious user.
For the malicious server, it is impossible for the server
to fake the proﬁle matching results. This is because in the
veriﬁcation technique we proposed, each user is required to
submit the authentication information ciphv for the proﬁle
veriﬁcation. If the server wants to alter ciphv to fake the proﬁle
matching result, the server must obtain the user’s proﬁle key,
which is impossible except for the collusion with the users.
Also, the hash function h() is assumed to be one-way and
collision resistant, so the malicious server cannot reverse it
to obtain the secret value. Therefore, our technique defends
against an honest but curious server, honest but curious user, as
well as a malicious server (that alters proﬁle matching results).
C. Cost Analysis
(1) Computation cost: For the mobile user, it takes O(d)
operations to increase the entropy and chain the attributes,
O(M N ) operations for OPE, where M is the plaintext length
and N is the ciphertext length. d + 2 hash operations and
2 modular exponentiations are for proﬁle key generation. One
symmetric encryption operation and one symmetric decryption
operation are needed for the veriﬁcation protocol with proﬁle
key kup. For the server, it takes O(|V |log|V |) operations for
sorting the users proﬁle information, and O(log|V |) operation
for searching, where |V | is the number of users under the same
proﬁle key.
(2) Communication cost: Communication is only between
the server and the users. Users do not exchange information
among themselves. To bootstrap the proﬁle matching, users
send their high-entropy proﬁle information along with the
authentication information, i.e., lid + lh + lciph + d· nN
M , where
lid is the length of the user ID, lh is the length of the hashed
proﬁle key as index, lciph is the length of the authentication
information, n is the plaintext size of the proﬁle attribute and
d is the number of the proﬁle attributes. After obtaining the
query request and conducting the proﬁle matching, the server
return the k proﬁle matching results with the corresponding
authentication information,
i.e., k(lid + lciph), where k is
the number of the proﬁle matching results, lid is the length
of the user ID and lciph is the length of the authentication
information.
VIII. IMPLEMENTATION
In this section, we present the implementation of S-MATCH
client on an Android phone and S-MATCH server on a PC.
Framework. The S-MATCH client was implemented as an
Android application on HTC Nexus One smartphone, and S-
MATCH server was implemented on a PC. The HTC Nexus
One smartphone has 1 GHz QSD8250 processors running
Android 2.1 platform. The PC had two 3.10 GHz Intel Core
i5-2400 processors running the Linux 3.5 kernel.
Communication. The HTC Nexus One communicates to the
PC over an 802.11n 53Mbps WiFi connection. The application
instances set up a communication channel via SSL socket
using JAVA libraries, and the packages are sent with the mode
Encrypt-then-MAC.
Key Generation. We implemented RS decoder proposed in
[32]. We used RSA in the javax.crypto package to implement
the RSA-OPRF scheme as an instance of the oblivious pseudo-
random function.
Encryption. The OPE, as the instance of the PPE, was
implemented in JAVA, based on the C++ code from [37]. As
the ciphertexts are outsouced in the server, the ciphertext range
in OPE is set as the same as the plaintext range. Based on the
controlled trial in [8], the Paillier homomorphic cryptosystem
is used as the instance of the homomorphic encryption,
Veriﬁcation. In the veriﬁcation scheme, AES in CTR mode
with random IV was utilized for symmetric encryption and
decryption. The generator p is generated from the BigInteger
class in JAVA. SHA2 was used as the hash function.
IX. PERFORMANCE EVALUATION
In this section, we present an evaluation of the validity and
efﬁciency of our scheme, S-MATCH, using three real-world
datasets (Infocom06 [26], Sigcomm09 [27], and Weibo [28])
under a real testbed. In particular, we answer the following
questions:
• (information leakage) How does our technique increase
entropy for various plaintext sizes? How close is our
technique to perfect entropy?
• (correctness) What
is the true positive rate (correct
matching rate) of the proﬁle matching as the RS Decoder
threshold varies?
• (computation cost) How do the client and the server com-
putation costs of S-MATCH compare to a representative
technique based on homomorphic encryption (homoPM
[8]) in a real testbed?
• (communication cost) How dose the communication cost
of S-MATCH compare to a representative technique
based on homomorphic encryption (homoPM [8]) in a
real testbed?
295295295
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:56 UTC from IEEE Xplore.  Restrictions apply. 
2048
1024
512
256
128
64
)
t
i
b
(
y
p
o
r
t
n
E
32
64
128
e
t
a
r
e
v
i
t
i
s
o
p
e
u
r
T
1
0.98
0.96
0.94
0.92
0.9
0.88
0.86
0.84
5
Infocom06
Sigcomm09
Weibo
6
9
RS Decoder Threshold
7
8
)
s
m
(
t
s
o
c
n
o
i
t
a
t
u
p
m
o
C
105
104
103
102
101
100
10í1
64
10
PM
PM+V
homoPM
128
256
512
1024
2048
Plaintext size (bit)
Infocom06
Sigcomm09
Weibo
Perfect entropy
256
512
1024
2048
Plaintext size (bit)
(a) Entropy of three datasets
(b) True positive rate of the proﬁle matching
(c) Computation cost of the client under Info-
com06 dataset
)
s
m
(
t
s
o
c
n
o
i
t
a
t
u
p
m
o
C
105
104
103
102
101
100
10í1
64
PM
PM+V
homoPM
PM
PM+V
homoPM
105
104
103
102
101
)
s
m
(
t
s
o
c
n
o
i
t
a
t
u
p
m
o
C
128
256
512
1024
Plaintext size (bit)
2048
100
64
128
256
512
1024
2048
Plaintext size (bit)
(d) Computation cost of the client under Sig-
comm09 dataset
(e) Computation cost of the client under Weibo
dataset
Fig. 4. Entropy of the three datasets after applying our technique are indicated in Fig. 4(a). The true positive rate of the proﬁle matching are indicated in
Fig. 4(b). The user computation cost under three datasets are shown in Fig. 4(c), 4(d) and 4(e).
A. Information Leakage
Figure 4(a) shows the entropy of the Infocom06, Sig-
comm09 and Weibo datasets after the entropy increase and
the attribute chaining, compared with that of the perfect
entropy (theoretical limit). Overall, the entropy of the original
data increases as the plaintext size k increases. With the
increase of the bit size for proﬁle attributes,
the entropy
increasing step generates more one-to-N mappings and log Δ
increases. Moreover, with the attribute chaining, the attribute
value distribution among the message space becomes more
uniform, which will also increase the entropy. Compared to
the Infocom06 and Sigcomm09 datasets, the Weibo dataset
has more proﬁle attributes and users, which has larger original
entropy. Similar to the Infocom06 and Sigcomm09 datasets,
the increment of entropy after chaining becomes larger with
the increase of the plaintext size k. As with more users and
attributes, the increment of the entropy becomes slower when
the plaintext size is small. However, when the plaintext size
becomes larger,
the rate of entropy increase grows faster.
Therefore, the attribute data processed after entropy increase
and attribute chaining is more suitable for PPE, which increas-
es the security of PPE to protect from PR-OKPA.
B. Correctness
To evaluate the correctness of the proﬁle matching of S-
MATCH, we measured the true positive rate (TPR) of the
proﬁle matching results under various RS Decoder thresholds
to generate the proﬁle key. TPR indicates the proportion of
true cases that are correctly found. The formal deﬁnition of
TPR is as follows:
T P R =
T rue P ositive
T rue P ositive + F alse N egative
.
(5)
Figure 4(b) shows the TPR of the proﬁle matching results
under different RS Decoder thresholds in Infocom06, Sig-
comm09 and Weibo datasets. The number of query results
is set to 5, and the plaintext size is set to 64. For θ = 8,
our proﬁle matching scheme has a correctness of 97.2%,
95.8% and 93.0% in the Infocom06 dataset, Sigcomm09
and Weibo dataset respectively. We can see that the TPR
goes down as the RS Decoder threshold increases. This is
caused by the correction threshold when implementing the
RS decoding algorithm. For higher TPR, the Guruswami and
Sudan algorithm [34] can be utilized to implement the RS
decoding algorithm. Moreover, with the smaller RS Decoder
threshold, the difference of the proﬁles under the same proﬁle
key is small, which helps the big-jump mapping in the entropy
increase part have better performance. Another important
observation is that the TPR of the proﬁle matching decreases
slightly in the Weibo dataset, which is caused by the fact
that the Weibo dataset has more attributes which affect the
performance of the big-jump mapping in the entropy increase
part to distinguish the difference of the attributes.
C. Computation Cost Analysis
To evaluate the performance of our scheme, we measured
the computation cost of S-MATCH under the Infocom06,
296296296
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:56 UTC from IEEE Xplore.  Restrictions apply. 
)
s
m
(
t
s
o
c
n