# DATAFLASKS: An Epidemic-Dependent Key-Value Substrate

## Authors
Francisco Maia, Miguel Matos, Ricardo Manuel Pereira Vilaça, José Pereira, Rui Oliveira  
High Assurance Software Laboratory, INESC TEC and UMinho, Braga, Portugal  
Email: {fmaia, miguelmatos, rmv, jop, rco}@di.uminho.pt  

Etienne Rivière  
Université de Neuchâtel, Switzerland  
Email: etienne.riviere@unine.ch

## Abstract
In recent years, tuple-stores have become essential components in many information systems due to their ability to handle large datasets. However, these tuple-stores typically rely on structured peer-to-peer (P2P) protocols, which assume a moderately stable environment. This assumption often fails in very large-scale systems with thousands of machines. In this paper, we present a novel approach to the design of a tuple-store based on an unstructured substrate. Our approach, called DATAFLASKS, leverages epidemic protocols to achieve high dependability and scalability.

**Keywords:** Dependability, Epidemic Protocols, Distributed Systems, Large-Scale Data Stores

## 1. Introduction
The increasing scale of computing systems presents significant challenges. While processors are no longer improving at the same rate as before, the number of processors is increasing, enabling data centers with thousands of machines. Developing services and software systems that can effectively utilize such large-scale resources is non-trivial.

With the exponential growth in data production and exchange, several approaches have been developed to build scalable tuple-stores [2]–[5]. These data stores have proven effective for various tasks [6], but they still rely on structured P2P systems, typically distributed hash tables (DHTs). DHTs require a moderately stable environment to ensure availability, which becomes unrealistic as the system size grows. In large-scale systems, faults and churn are common, making the assumption of stability untenable.

We propose an unstructured but resilient approach to data management, more suitable for large-scale systems. In [7], we introduced a two-layer approach to the design of a key-value data store, separating the client interface and concurrency control (top layer) from the actual data storage (bottom layer). This paper focuses on the bottom layer, presenting DATAFLASKS, a highly resilient and dependable data storage system designed for very large-scale environments.

Throughout the paper, we discuss the design of DATAFLASKS, address the main challenges, and provide concrete solutions. We also evaluate the current version of DATAFLASKS to validate its scalability.

The remainder of the paper is organized as follows: Section 2 provides background on epidemic protocols. Section 3 describes the context and requirements of DATAFLASKS. Section 4 presents the design of DATAFLASKS, and Section 5 details its architecture. Section 6 includes the evaluation, and Section 7 outlines open challenges and future work.

## 2. Background
Designing systems for very large-scale environments presents unique challenges, particularly in maintaining global knowledge. Any system that relies on information growing linearly with system size is not scalable. Therefore, large-scale protocols must operate with partial information and local decisions. Epidemic or gossip-based protocols are well-suited for this purpose.

### 2.1 Epidemic Protocols
Epidemic protocols function by having each node periodically exchange information with one or more neighbors. The primary challenge is maintaining a fresh list of neighbors (view) despite nodes joining and leaving the system. A uniformly random sample of nodes in the view ensures that selecting a random peer is equivalent to choosing randomly from all nodes. Peer Sampling Services, such as Cyclon [9] and Newscast [10], provide this functionality.

### 2.2 Information Dissemination
Using the views generated by the Peer Sampling Service, it is possible to disseminate data in an epidemic fashion. Each node relays a sufficient number of messages to ensure high probability of dissemination. This mechanism is scalable and forms the basis for request dissemination in DATAFLASKS.

### 2.3 Distributed System Slicing
Slicing techniques partition a large-scale distributed system into groups (slices) based on criteria like storage space or uptime. Epidemic approaches can achieve this without global knowledge. Slicing will be crucial for the design of DATAFLASKS.

## 3. STRATUS
In [18], we proposed STRATUS, a stratiﬁed system with a clear separation of concerns between layers. This separation allows the system to scale to thousands of nodes.

### 3.1 Architecture Overview
STRATUS has a top layer, DATADROPLETS, which handles client interfaces, caching, concurrency control, and high-level processing. The bottom layer, DATAFLASKS, provides data persistence and high availability. DATADROPLETS assumes a structured approach for a moderately sized environment, while DATAFLASKS addresses large-scale concerns.

### 3.2 Requirements for DATAFLASKS
DATAFLASKS must provide data persistence and high availability, even in highly unstable environments. It should support simple `get` and `put` operations, with objects carrying version stamps to manage concurrency.

## 4. DATAFLASKS Design
DATAFLASKS is designed to handle a set of nodes, on the order of thousands, where any node can receive requests from the upper layer. The main challenges are:

- **Data Distribution**: Disseminating data in an epidemic fashion and allowing nodes to decide locally if they need to store an item.
- **Request Routing**: Ensuring write requests reach the appropriate set of nodes and read requests reach at least one node holding the target item.
- **Data Replication**: Replicating data among nodes to tolerate failures and churn.

### 4.1 Data Distribution
DATAFLASKS uses slicing mechanisms to partition the system into sets of nodes, each responsible for storing a subset of the data. Nodes are assigned to slices based on their storage capacity, ensuring balanced distribution. Slicing protocols are resilient and adapt to changes in the system.

### 4.2 Request Routing
Requests are routed using a Peer Sampling Service. Each node disseminates information to its local view, and optimizations ensure efficient routing. For example, once a request reaches a node in the target slice, dissemination is limited to that slice.

### 4.3 Data Replication
Data is replicated among nodes in each slice to tolerate failures and churn. Recent slicing protocols allow for dynamic configuration, enabling autonomous replication management.

## 5. Evaluation
We evaluate the current version of DATAFLASKS to validate its scalability. The results demonstrate that DATAFLASKS can handle large-scale environments effectively, providing high dependability and resilience.

## 6. Open Challenges and Future Work
While DATAFLASKS addresses many challenges, there are still open issues to be tackled. Future work will focus on optimizing data distribution, enhancing request routing, and improving data replication strategies.

## 7. Conclusion
In this paper, we presented DATAFLASKS, a novel, highly resilient, and dependable data storage system designed for very large-scale environments. By leveraging epidemic protocols and unstructured substrates, DATAFLASKS achieves high scalability and dependability. Future research will continue to enhance the system's performance and robustness.