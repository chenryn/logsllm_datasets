* [在 Linux 上进行高速包过滤](https://cdn.shopify.com/s/files/1/0177/9886/files/phv2017-gbertin.pdf) （Gilberto Bertin, DEF CON 25, Las Vegas, July 2017）
在 Linux 上的最先进的包过滤的介绍，面向 DDoS 的保护、讨论了关于在内核中进行包处理、内核旁通、XDP 和 eBPF。
#### 关于 基于 eBPF 或者 eBPF 相关的其它组件
* [在边界上的 P4](https://schd.ws/hosted_files/2016p4workshop/1d/Intel%20Fastabend-P4%20on%20the%20Edge.pdf) （John Fastabend, May 2016）：
提出了使用 **P4**，一个包处理的描述语言，使用 BPF 去创建一个高性能的可编程交换机。
* 如果你喜欢音频的演讲，这里有一个相关的 [OvS Orbit 片断(#11)，叫做 在边界上的 P4](https://ovsorbit.benpfaff.org/#e11)，日期是 2016 年 8 月。OvS Orbit 是对 Ben Pfaff 的访谈，它是 Open vSwitch 的其中一个核心维护者。在这个场景中，John Fastabend 是被访谈者。
* [P4, EBPF 和 Linux TC 卸载](http://open-nfp.org/media/pdfs/Open_NFP_P4_EBPF_Linux_TC_Offload_FINAL.pdf) （Dinan Gunawardena 和 Jakub Kicinski, August 2016）：
另一个 **P4** 的演讲，一些有关于 Netronome 的 **NFP**（网络流处理器）架构上的 eBPF 硬件卸载的因素。
* **Cilium** 是一个由 Cisco 最先发起的技术，它依赖 BPF 和 XDP 去提供 “基于 eBPF 程序即时生成的，用于容器的快速内核强制的网络和安全策略”。[这个项目的代码](https://github.com/cilium/cilium) 在 GitHub 上可以访问到。Thomas Graf 对这个主题做了很多的演讲：
	+ [Cilium：对容器利用 BPF & XDP 实现网络 & 安全](http://www.slideshare.net/ThomasGraf5/clium-container-networking-with-bpf-xdp)，也特别展示了一个负载均衡的使用案例（Linux Plumbers conference, Santa Fe, November 2016）
	+ [Cilium：对容器利用 BPF & XDP 实现网络 & 安全](http://www.slideshare.net/Docker/cilium-bpf-xdp-for-containers-66969823) （Docker Distributed Systems Summit, October 2016 — [video](https://www.youtube.com/watch?v=TnJF7ht3ZYc&amp;amp;amp;list=PLkA60AVN3hh8oPas3cq2VA9xB7WazcIgs)）
	+ [Cilium：使用 BPF 和 XDP 的快速 IPv6 容器网络](http://www.slideshare.net/ThomasGraf5/cilium-fast-ipv6-container-networking-with-bpf-and-xdp) （LinuxCon, Toronto, August 2016）
	+ [Cilium： 用于容器的 BPF & XDP](https://fosdem.org/2017/schedule/event/cilium/) （fosdem17, Brussels, Belgium, February 2017）在上述不同的演讲中重复了大量的内容；嫌麻烦就选最近的一个。Daniel Borkmann 作为 Google 开源博客的特邀作者，也写了 [Cilium 简介](https://opensource.googleblog.com/2016/11/cilium-networking-and-security.html)。
* 这里也有一个关于 **Cilium** 的播客节目：一个是 [OvS Orbit episode (#4)](https://ovsorbit.benpfaff.org/)，它是 Ben Pfaff 访谈 Thomas Graf （2016 年 5 月），和 [另外一个 Ivan Pepelnjak 的播客](http://blog.ipspace.net/2016/10/fast-linux-packet-forwarding-with.html)，仍然是 Thomas Graf 关于 eBPF、P4、XDP 和 Cilium 方面的（2016 年 10 月）。
* **Open vSwitch** (OvS)，它是 **Open Virtual Network**（OVN，一个开源的网络虚拟化解决方案）相关的项目，正在考虑在不同的层次上使用 eBPF，它已经实现了几个概念验证原型：
	+ [使用 eBPF 卸载 OVS 流处理器](http://openvswitch.org/support/ovscon2016/7/1120-tu.pdf) （William (Cheng-Chun) Tu, OvS conference, San Jose, November 2016）
	+ [将 OVN 的灵活性与 IOVisor 的高效率相结合](http://openvswitch.org/support/ovscon2016/7/1245-bertrone.pdf) （Fulvio Risso, Matteo Bertrone 和 Mauricio Vasquez Bernal, OvS conference, San Jose, November 2016）据我所知，这些 eBPF 的使用案例看上去仅处于提议阶段（并没有合并到 OvS 的主分支中），但是，看它带来了什么将是非常值得关注的事情。
* XDP 的设计对分布式拒绝访问（DDoS）攻击是非常有用的。越来越多的演讲都关注于它。例如，在 2017 年 4 月加拿大蒙特利尔举办的 netdev 2.1 会议上，来自 Cloudflare 的人们的讲话（[XDP 实践：将 XDP 集成到我们的 DDoS 缓解管道](http://netdevconf.org/2.1/session.html?bertin)）或者来自 Facebook 的（[Droplet：由 BPF + XDP 驱动的 DDoS 对策](http://netdevconf.org/2.1/session.html?zhou)）都存在这样的很多使用案例。
* Kubernetes 可以用很多种方式与 eBPF 交互。这里有一篇关于 [在 Kubernetes 中使用 eBPF](http://blog.kubernetes.io/2017/12/using-ebpf-in-kubernetes.html) 的文章，它解释了现有的产品（Cilium、Weave Scope）如何支持 eBPF 与 Kubernetes 一起工作，并且进一步描述了，在容器部署环境中，eBPF 感兴趣的交互内容是什么。
* [CETH for XDP](http://www.slideshare.net/IOVisor/ceth-for-xdp-linux-meetup-santa-clara-july-2016) （Yan Chan 和 Yunsong Lu、Linux Meetup、Santa Clara、July 2016）：
**CETH**，是由 Mellanox 发起的，为实现更快的网络 I/O 而主张的通用以太网驱动程序架构。
* [**VALE 交换机**](http://info.iet.unipi.it/%7Eluigi/vale/)，另一个虚拟交换机，它可以与 netmap 框架结合，有 [一个 BPF 扩展模块](https://github.com/YutaroHayakawa/vale-bpf)。
* **Suricata**，一个开源的入侵检测系统，它的旁路捕获旁特性依赖于 XDP。有一些关于它的资源：
	+ [Suricate 文档的 eBPF 和 XDP 部分](http://suricata.readthedocs.io/en/latest/capture-hardware/ebpf-xdp.html?highlight=XDP#ebpf-and-xdp)
	+ [SEPTun-Mark-II](https://github.com/pevma/SEPTun-Mark-II) （Suricata Extreme 性能调优指南 — Mark II）， Michal Purzynski 和 Peter Manev 发布于 2018 年 3 月。
	+ [介绍这个特性的博客文章](https://www.stamus-networks.com/2016/09/28/suricata-bypass-feature/) Éric Leblond 发布于 2016 年 9 月。
	+ [Suricate 的 eBPF 历险记](http://netdevconf.org/1.2/slides/oct6/10_suricata_ebpf.pdf) （Éric Leblond, netdev 1.2, Tokyo, October 2016）
	+ [eBPF 和 XDP 一窥](https://www.slideshare.net/ennael/kernel-recipes-2017-ebpf-and-xdp-eric-leblond) （Éric Leblond, Kernel Recipes, Paris, September 2017）当使用原生驱动的 XDP 时，这个项目要求实现非常高的性能。
* [InKeV：对于 DCN 的内核中分布式网络虚拟化](https://github.com/iovisor/bpf-docs/blob/master/university/sigcomm-ccr-InKev-2016.pdf) （Z. Ahmed, M. H. Alizai 和 A. A. Syed, SIGCOMM, August 2016）：
**InKeV** 是一个基于 eBPF 的虚拟网络、目标数据中心网络的数据路径架构。它最初由 PLUMgrid 提出，并且声称相比基于 OvS 的 OpenStack 解决方案可以获得更好的性能。
* [gobpf - 在 Go 中使用 eBPF](https://fosdem.org/2017/schedule/event/go_bpf/) （Michael Schubert, fosdem17, Brussels, Belgium, February 2017）：
“一个来自 Go 库，可以去创建、加载和使用 eBPF 程序”
* [ply](https://wkz.github.io/ply/) 是为 Linux 实现的一个小而灵活的开源动态 **跟踪器**，它的一些特性非常类似于 bcc 工具，是受 awk 和 dtrace 启发，但使用一个更简单的语言。它是由 Tobias Waldekranz 写的。
* 如果你读过我以前的文章，你可能对我在这篇文章中的讨论感兴趣，[使用 eBPF 实现 OpenState 接口](https://fosdem.org/2017/schedule/event/stateful_ebpf/)，关于包状态处理，在 fosdem17 中。
### 文档
一旦你对 BPF 是做什么的有一个大体的理解。你可以抛开一般的演讲而深入到文档中了。下面是 BPF 的规范和功能的最全面的文档，按你的需要挑一个开始阅读吧！
#### 关于 BPF
* **BPF 的规范**（包含 classic 和 extended 版本）可以在 Linux 内核的文档中，和特定的文件 [linux/Documentation/networking/filter.txt](https://www.kernel.org/doc/Documentation/networking/filter.txt) 中找到。BPF 使用以及它的内部结构也被记录在那里。此外，当加载 BPF 代码失败时，在这里可以找到 **被校验器抛出的错误信息**，这有助于你排除不明确的错误信息。
* 此外，在内核树中，在 eBPF 那里有一个关于 **常见问答** 的文档，它在文件 [linux/Documentation/bpf/bpf\_design\_QA.txt](https://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git/tree/Documentation/bpf/bpf_design_QA.txt?id=2e39748a4231a893f057567e9b880ab34ea47aef) 中。
* … 但是，内核文档是非常难懂的，并且非常不容易阅读。如果你只是去查找一个简单的 eBPF 语言的描述，可以去 IO Visor 的 GitHub 仓库，那儿有 [它的概括性描述](https://github.com/iovisor/bpf-docs/blob/master/eBPF.md)。
* 顺便说一下，IO Visor 项目收集了许多 **关于 BPF 的资源**。大部分分别在 bcc 仓库的 [文档目录](https://github.com/iovisor/bcc/tree/master/docs) 中，和 [bpf-docs 仓库](https://github.com/iovisor/bpf-docs/) 的整个内容中，它们都在 GitHub 上。注意，这个非常好的 [BPF 参考指南](https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md) 包含一个详细的 BPF C 和 bcc Python 的 helper 的描述。
* 想深入到 BPF，那里有一些必要的 **Linux 手册页**。第一个是 [bpf(2) man 页面](http://man7.org/linux/man-pages/man2/bpf.2.html) 关于 `bpf()` **系统调用**，它用于从用户空间去管理 BPF 程序和映射。它也包含一个 BPF 高级特性的描述（程序类型、映射等等）。第二个是主要是处理希望附加到 tc 接口的 BPF 程序：它是 [tc-bpf(8) man 页面](http://man7.org/linux/man-pages/man8/tc-bpf.8.html)，是 **使用 BPF 和 tc** 的一个参考，并且包含一些示例命令和参考代码。
* Jesper Dangaard Brouer 发起了一个 **更新 eBPF Linux 文档** 的尝试，包含 **不同的映射**。[他有一个草案](https://prototype-kernel.readthedocs.io/en/latest/bpf/index.html)，欢迎去贡献。一旦完成，这个文档将被合并进 man 页面并且进入到内核文档。
* Cilium 项目也有一个非常好的 [BPF 和 XDP 参考指南](http://docs.cilium.io/en/latest/bpf/)，它是由核心的 eBPF 开发者写的，它被证明对于 eBPF 开发者是极其有用的。
* David Miller 在 [xdp-newbies](http://vger.kernel.org/vger-lists.html#xdp-newbies) 邮件列表中发了几封关于 eBPF/XDP 内部结构的富有启发性的电子邮件。我找不到一个单独的地方收集它们的链接，因此，这里是一个列表：
	+ [bpf.h 和你 …](https://www.spinics.net/lists/xdp-newbies/msg00179.html)
	+ [从语境上讲…](https://www.spinics.net/lists/xdp-newbies/msg00181.html)
	+ [BPF 校验器概述](https://www.spinics.net/lists/xdp-newbies/msg00185.html)最后一个可能是目前来说关于校验器的最佳的总结。
* Ferris Ellis 发布的 [一个关于 eBPF 的系列博客文章](https://ferrisellis.com/tags/ebpf/)。作为我写的这个短文，第一篇文章是关于 eBPF 的历史背景和未来期望。接下来的文章将更多的是技术方面，和前景展望。
* [每个内核版本的 BPF 特性列表](https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md) 在 bcc 仓库中可以找到。如果你想去知道运行一个给定的特性所要求的最小的内核版本，它是非常有用的。我贡献和添加了链接到提交中，它介绍了每个特性，因此，你也可以从那里很容易地去访问提交历史。
#### 关于 tc
当为了网络目的结合使用 BPF 与 tc （Linux  流量控制      t    raffic     c    ontrol   工具）时，它可用于收集 tc 的常规功能的信息。这里有几个关于它的资源。
* 找到关于 **Linux 上 QoS** 的简单教程是很困难的。这里有两个链接，它们很长而且很难懂，但是，如果你可以抽时间去阅读它，你将学习到几乎关于 tc 的任何东西（虽然，没有什么关于 BPF 的)。它们在这里：[怎么去实现流量控制 （Martin A. Brown, 2006）](http://linux-ip.net/articles/Traffic-Control-HOWTO/)，和 [怎么去实现 Linux 的高级路由 & 流量控制 （LARTC） （Bert Hubert & al., 2002）](http://lartc.org/lartc.html)。
* 在你的系统上的 **tc 手册页面** 并不是最新的，因为它们中的几个最近已经增加了内容。如果你没有找到关于特定的队列规则、分类或者过滤器的文档，它可能在最新的 [tc 组件的手册页面](https://git.kernel.org/cgit/linux/kernel/git/shemminger/iproute2.git/tree/man/man8) 中。
* 一些额外的材料可以在 iproute2 包自已的文件中找到：这个包中有 [一些文档](https://git.kernel.org/pub/scm/linux/kernel/git/shemminger/iproute2.git/tree/doc?h=v4.13.0)，包括一些文件，它可以帮你去理解 [tc 的 action 的功能](https://git.kernel.org/pub/scm/linux/kernel/git/shemminger/iproute2.git/tree/doc/actions?h=v4.13.0)。
**注意：** 这些文件在 2017 年 10 月 已经从 iproute2 中删除，然而，从 Git 历史中却一直可用。
* 不完全是文档：[有一个关于 tc 的几个特性的研讨会](http://netdevconf.org/1.2/session.html?jamal-tc-workshop)（包含过滤、BPF、tc 卸载、…） 由 Jamal Hadi Salim 在 netdev 1.2 会议上组织的（October 2016）。
* 额外信息 — 如果你使用 `tc` 较多，这里有一些好消息：我用这个工具 [写了一个 bash 补完功能](https://git.kernel.org/cgit/linux/kernel/git/shemminger/iproute2.git/commit/bash-completion/tc?id=27d44f3a8a4708bcc99995a4d9b6fe6f81e3e15b)，并且它被包 iproute2 带到内核版本 4.6 和更高版中！
#### 关于 XDP
* 对于 XDP 的一些 [进展中的文档（包括规范）](https://prototype-kernel.readthedocs.io/en/latest/networking/XDP/index.html) 已经由 Jesper Dangaard Brouer 启动，并且意味着将成为一个协作工作。正在推进的（2016 年 9 月）：你期望它去改变，并且或许在一些节点上移动（Jesper [称为贡献](https://marc.info/?l=linux-netdev&amp;amp;amp;m=147436253625672)，如果你想去改善它）。
* 自来 Cilium 项目的 [BPF 和 XDP 参考指南](http://docs.cilium.io/en/latest/bpf/) … 好吧，这个名字已经说明了一切。
#### 关于 P4 和 BPF
[P4](http://p4.org/) 是一个用于指定交换机行为的语言。它可以为多种目标硬件或软件编译。因此，你可能猜到了，这些目标中的一个就是 BPF … 仅部分支持的：一些 P4 特性并不能被转化到 BPF 中，并且，用类似的方法，BPF 可以做的事情，而使用 P4 却不能表达出现。不过，**P4 与 BPF 使用** 的相关文档，[被隐藏在 bcc 仓库中](https://github.com/iovisor/bcc/tree/master/src/cc/frontends/p4)。这个改变在 P4\_16 版本中，p4c 引用的编辑器包含 [一个 eBPF 后端](https://github.com/p4lang/p4c/blob/master/backends/ebpf/README.md)。
### 教程
Brendan Gregg 为想要 **使用 bcc 工具** 跟踪和监视内核中的事件的人制作了一个非常好的 **教程**。[第一个教程是关于如何使用 bcc 工具](https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md)，它有许多章节，可以教你去理解怎么去使用已有的工具，而 [针对 Python 开发者的一篇](https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md) 专注于开发新工具，它总共有十七节 “课程”。
Sasha Goldshtein 也有一些 [Linux 跟踪研究材料](https://github.com/goldshtn/linux-tracing-workshop) 涉及到使用几个 BPF 工具进行跟踪。
Jean-Tiare Le Bigot 的另一篇文章提供了一个详细的（和有指导意义的）[使用 perf 和 eBPF 去设置一个低级的跟踪器](https://blog.yadutaf.fr/2017/07/28/tracing-a-packet-journey-using-linux-tracepoints-perf-ebpf/) 的示例。