# Improving Antivirus Accuracy with Hypervisor-Assisted Analysis

**Author: Danny Quist**

**Affiliation: Offensive Computing, LLC**

- **Email:** [PI:EMAIL]
- **Twitter:** [@ocomputing]

## About the Author

Danny Quist is a reverse engineer specializing in automated reverse engineering and the unpacking of complex malware. He is the founder of Offensive Computing, which hosts the largest open collection of malware. Danny also conducts RE training courses and maintains a research blog. He holds a Ph.D. from New Mexico Tech (2010).

## Overview

This presentation will cover:
- The complexities of reverse engineering.
- The challenges in malware detection.
- The current state of the commercial antivirus industry.
- The role of hypervisors in reverse engineering.
- Techniques for improving AV scanning results.

## Complexities of Reverse Engineering

### Malware Code Structure
- **Most malware is compiled Intel x86 Assembly code.**
  - **Compiler Optimizations:**
    - Machine code becomes more complex.
    - C Code (45 lines) can result in 1,200 assembly instructions, with only 118 relevant to the core functionality.
    - Compiler-generated boilerplate code adds to the complexity.

### Obfuscation Techniques
- **Packing and Obfuscations:**
  - Executables can be obfuscated to hide their true nature.
  - Common packers include UPX, ASPack, FSG, and others.
  - Information loss during compilation (e.g., comments, variable names, original code structure) further complicates analysis.

## Commercial Antivirus Challenges

- **Time and Resource Constraints:**
  - Customers expect quick results, leading to less invasive but potentially less thorough scans.
  - Example: Symantec Endpoint Protection 11 loads 14 kernel-mode modules, which can be resource-intensive.
  - **Signature-Based Detection:**
    - Fast and easy to implement but limited in detecting new, unknown threats.
    - Detection rate for new, unknown threats is around 45%.

- **Malware Authors' Advantages:**
  - Slight modifications can evade detection.
  - Common exploit kits are sold with guarantees of non-detection for multiple iterations of AV.
  - Generic deobfuscation is not feasible for AV vendors due to the diversity of techniques used by malware authors.

## Types of Packers

- **Common Packers:**
  - UPX, ASPack, FSG, PeCompact, ASProtect, PEtite, tElock, MEW 11 SE, WinRAR 32-bit SFX Module, Borland C++ DLL, yoda's Protector, NeoLite, Xtreme-Protector, LCC Win32, Themida, MinGW, Ste@lth PE 1.01, Armadillo, TASM / MASM, PECompact, PE Pack, PKLITE32, UPX-Scrambler RC, Wise Installer Stub, SVK Protector, CodeSafe, WinZip 32-bit SFX.

## Unpacking: The Generic Algorithm

- **Process:**
  - Track memory writes and executed memory addresses.
  - Log EIP (instruction pointer) when it writes to memory.
  - Trigger the unpacking process if EIP points to a previously written address.

- **Challenges:**
  - Multiple obfuscations and staged unpacking.
  - High number of candidate OEPs (Original Entry Points).

## Related Work: Improving Antivirus Accuracy

- **Automated Unpacking Systems:**
  - Performance measured by antivirus detection rates.
  - Examples: Polyunpack, Renovo, Ether.
  - Monitor memory writes and flag on execution of written data.
  - Use of QEMU for analysis, though it can be detectable.
  - Instruction-level resolution and emulation, which can be slow.

## Hypervisor-Assisted Analysis

- **Contributions:**
  - Improved unpacking technique using the Ether hypervisor system.
  - Enhanced import rebuilding using kernel data structures.
  - Better OEP detection through stack back-tracking.
  - Overall improvement in antivirus scanning performance.

### Ether System Architecture

- **Components:**
  - Linux Dom0 (Management OS)
  - Xen Hypervisor with Ether Extensions
  - Instrumented Windows XP SP2 Virtual Machine

### Importance of Repairs

- **Viruses and Packing:**
  - Removing imported APIs makes reverse engineering more difficult.
  - OEP detection has not significantly improved over the years.
  - Monitoring all written memory and logging into a hash table helps identify OEPs.

### Imported API Recovery

- **Rebuilding Imports:**
  - Find the OEP and unpack until this address is found.
  - Identify references to imported DLLs and use the IAT (Import Address Table) to rebuild the imports.
  - Use kernel memory management data structures (VADs) to accurately map DLLs to memory addresses.

### Original Entry Point Detection

- **Standard OEP Discovery:**
  - Produces many candidates, especially for complex packers.
  - Manual analysis is often required for each candidate.

- **EBP-Based Stack Frames:**
  - Start at EBP, unwind the stack, and backtrack assembly to the beginning of the code.

## Testing and Analysis

- **Verification of Malicious Files:**
  - Ensure the file runs without crashing.
  - Check for modifications to the registry, file system, and startup systems.
  - Detection by at least one AV scanner.

### Test 1: Linux Virus Scanners

- **Method:**
  - Analyze 500,000 samples detected by one AV vendor.
  - Randomly select 1,000 samples and apply verification methods.
  - **Results:**
    - Highest detection rate: 45.23%
    - Average detection rate: 19.86%
    - Lowest detection rate: 0.68%

### Test 2: Virus Total

- **Method:**
  - Use Virus Total (VT), a website that aggregates 40 AV scanners' results.
  - Allow two weeks for AV signature development.
  - Apply verification methods to 1,195 samples.
  - **Results:**
    - Highest detection rate: 11.54%
    - Average detection rate: 7.37%
    - Lowest detection rate: 1.70%

## Conclusions

- **Unpacking and Deobfuscation:**
  - High-value changes for improving AV accuracy.
  - In development for line-speed email scanners.
  - Improved detection of slightly modified malware.
  - Full recovery of import data and VAD-based import rebuilding.
  - Improved OEP detection reduces multiple candidates and analysis time.

## Future Work

- **Optimizing Unpacking:**
  - Current method takes up to 5 minutes.
  - Developing better algorithms to determine unpacking success.
  - Integration with existing tools like IDA Pro, OllyDbg, and WinDbg.
  - Building a full-fledged debugger with PDB/Paimei integration and visual control of unpacking.

## Questions?

For further information, please contact:

- **Danny Quist**
  - **Email:** [PI:EMAIL]
  - **Twitter:** [@ocomputing]