Improving Antivirus Accuracy 
with Hypervisor Assisted 
Analysis
Danny Quist
Danny Quist
Offensive Computing, LLC
PI:EMAIL
Twitter: ocomputing
Danny Quist
 Reverse engineer
 Automated reverse engineering
 Unpacker of strange malware
 RE Training Course
 Founder Offensive Computing
 Largest open collection of malware
 Blog with research (when able)
 Ph.D. New Mexico Tech, 2010
Overview
 Complexities of reverse engineering
 Discussion of malware detection problem
 The commercial antivirus industry
 Hypervisors  and Reverse Engineering
 Improving AV scanning results
Complexities of Reverse Engineering
 Most malware is compiled Intel x86 Assembly code
Compiler
• Machine code is more
complex
• Optimizations make
C Code – 45 lines
Relevant Assembly Code
• Optimizations make
analysis more difficult
•Total code size is 1,200
instructions
• 118 Relevant assembly 
instructions
• Much of machine code is 
compiler boiler plate
Reverse Engineering
Complexities of Reverse Engineering
 Executables can be obfuscated
Packing /
Obfuscations
Compiler
Information Loss - (Comments, Variable Names, Original Structure of Code
Information Loss - (Comments, Variable Names, Original Structure of Code
Commercial Antivirus
 Limited by time and resources
 Customers get annoyed if results take too long
 If AV is too invasive, software is uninstalled
 Example: Symantec Endpoint Protection 11 has 14 kernel mode 
modules that are loaded
 Signatures heavily favored by Vendors
 Fast and easy to implement
 Decoders, as long as they are fast, used for known obfuscations
 Time is AV’s achilles heel.
 Detection of new, unknown threats is only 45%
Malware Authors Have an Easy Life
 Slight modifications yield zero detection
 Modify the icons inside the PE files
 Remove imports
 Slight modification of code
 Most common exploit kits sold for N iterations of AV
 Guaranteed not detectable
 Provides a funding source on detection
 Generic deobfuscation is not possible for AV vendors
Types of Packers
UPX
ASPack
FSG
PeCompact
ASProtect
PEtite
tElock
MEW 11 SE
WinRAR 32-bit SFX Module
Borland C++ DLL
yoda's Protector
NeoLite
Xtreme-Protector
Xtreme-Protector
LCC Win32
Themida -> Oreans Technologies 
2004
MinGW
Ste@lth PE 1.01 -> BGCorp
Armadillo
TASM / MASM
PECompact
PE Pack
PKLITE32 1.1 -> PKWARE Inc.
PKLITE32
UPX-Scrambler RC
Wise Installer Stub
SVK Protector
CodeSafe
WinZip 32-bit SFX
PEiD scanning results from 1.6 million samples from Offensive Computing
UPX
ASPack
FSG
Unpacking: The Generic Algorithm
0x401000
0x401002
0x401008
0x401010
0x401094
0x401098
Written Memory
0x509003
0x380303
0x380290
0x313370
0x31337B
0x401339
Is EIP Writing 
Memory?
If yes, log it
0x401098
0x401339
Is EIP a 
Previously 
Written Address?
Yes
Trigger 
Unpacking 
Process
• Need a system to track:
• Memory writes
• Executed memory addresses
• Differences among solutions
• Monitoring implementation
•Variances in this algorithm
Related Work – Improving Antivirus 
Accuracy
 Automated unpacking system performance can be 
measured based on antivirus detection performance
 Polyunpack, Renovo,  Ether
 Automated unpacking systems
 Monitor memory writes, flag on execution of written data
 Josse
 QEMU virtual machine used for analysis (detectable)
 Instruction level resolution executable monitoring
 Emulation makes analysis slow
 Repair mechanisms of each of system primitive or non-
existent
Improving Antivirus Accuracy with 
Hypervisor Assisted Analysis
 Contributions
 Improved unpacking technique leveraging Ether hypervisor 
system
 Better import rebuilding using kernel data structures
 Better OEP detection from stack back-tracking technique
 Antivirus scanning performance improved
Ether System Architecture
Ether Analysis System 
Linux Dom0 
Instrumented 
Windows XP SP2 
Xen Hypervisor with Ether Extensions
Ring -1
Intel x86-64 CPU with Hardware Virtualization
Linux Dom0 
Management OS
VM Disk 
Images
Ether 
Mgmt 
Tools
Windows XP SP2 
Virtual Machine
Importance of Repairs
 Viruses can be packed and avoid detection
 Removing imported APIs takes data away from analysis engines
 Original Entry Point (OEP) Detection hasn’t progressed in 
years
 Watch for all written memory, log into a hash table
 If there is an execution in written memory guessed to be OEP
 If there is an execution in written memory guessed to be OEP
 Dump contents of memory
 Problems
 Multiple obfuscations
 Staged unpacking
 Lots of candidate OEPs
 Restoring this information improves existing AV tools accuracy
Imported API Recovery
 Removing Imported APIs is first obfuscation step
 Reverse engineering is difficult without APIs
 Provide no context for code
 Order of magnitude increase in complexity
 Restoring them is extremely valuable
Which is easier to read?
No Imports
Which is easier to read?
No Imports
Imports Rebuilt
Import Repair Process
 Find the original entry point
 Unpack code until this address is found
 Use OEP method discussed later
 Find references to imported DLLs
 call [ADDRESS]
 jmp [ADDRESS]
Import Address Table (IAT)
Import Repair Process
 Each imported DLL has an IAT corresponding to the APIs 
brought into the application
 The first DLL is found by backtracking the IAT memory 
until a NULL is found.
 The DWORD after the NULL is the beginning of that 
DLL’s API
 How do we determine which DLL belongs to which 
memory address?
Determining DLL Address Space
 Old Method
 Attach to process via debugger interface
 Call windows APIs to query address module
 Resolve addresses from the DLL listings
 Problems
 Hypervisor has no access to internal Windows APIs
 Access to APIs would violate sterility of guest environment
(DETECTION)
 No real way to extract data we need
Import Repair Process
 New Method – Use kernel memory management data 
structure
 Virtual Address Descriptor –VAD
 Each process has a VAD to describe memory usage
 OS uses VADs to interact with CPU MMU
 Very accurate use of process space
 Balanced Binary Tree
 Address space
 Size of memory region
 Execution flags
 Module memory mapping
This is all the information 
needed to rebuild imports
Executable Memory Space
Ring-0  Address Space
0x80000000
Process VAD Tree
ImageBase
ADVAPI32.dll
WS2_32.DLL
.Data
KERNEL32.DLL
Process Virtual Address Descriptor Tree
0x7FFFFFFF
0x80000000
0x00000000
PEB (FS:30)
WS2_32.DLL
KERNEL32.DLL
ImageBase
…
ADVAPI32.dll
ImageBase
KERNEL32.DLL
Ring-3  Address Space
Original Entry Point Detection
 Standard OEP discovery 
produces many file
 Most common packers 
produce few samples
Packer
Detected OEPs
Armadillo
1
Petite
1
UPX
1
UPX Scrambler
1
Aspack
2
 Complex packers increase 
complexity of unpacking
 Requires manual analysis 
of each candidate dump
FSG
2
PECompact
2
VMProtect
12
PEPack
12
AsProtect
15
Themida
33
Yoda
43
PEX
133
MEW
1018
OEP Algorithm – EBP based stack frames
RET: 0x59009538
Stack Data
RET: 0x59010030
Stack Data
….
push ebp
mov ebp, esp
sub esp, 6A58h
xor eax, eax
2. Unwind 
stack until 
no more  
frames 
found
OEP
RET: 0x59009500
Stack Data
….
RET: 0x59009530
Stack Data
….
Stack Data
….
xor eax, eax
mov edx, 0x43
shl edx, 32
mov ecx, 0xBE
shl ecx,
mov eax 0xEF9ECA4E
xor eax, 0x313374A1
call eax
1. Start at EBP
3. 
Backtrack 
assembly to 
the 
beginning of 
code / 
preamble
Testing and Analysis
 Verification of malicious file
 Execution – show that it runs without crashing
 OS state change – Look for modifications to
 Registry
 File system
 File system
 Startup systems
 Verification of maliciousness
 Detection by at least 1 AV scanner
 Good way to scan large sample sets of malware
Test 1: Linux Virus Scanners
 Analyze 500,000 samples for samples that are detected by 
one AV vendor
 Randomly choose 1,000 samples
Apply verification method, 697 left over
 Apply verification method, 697 left over
 Results
 Highest 
45.23%
 Average
19.86%
 Lowest
0.68%
Test 2: Virus Total
 Virus Total (VT) –Website by Hispasec that aggregates 40 
AV scanners’ testing results.
 Two weeks passed to allow for improved AV signature 
development
 Apply verification method, 1,195 left over
 Results
 Highest 
11.54%
 Average
7.37%
 Lowest
1.70%
Test 2: Improvement of Scanners
Best: 
11.54%
Average
7.37%
Lowest
1.70%
Test 2: Total Detection Percentages
• High value improvements to most AV vendors
• Low improvement means either deobfuscation is poor, or detection is poor
• Blue represents packed, red represents unpacked state
Improving AV Conclusions
 Unpacking and deobfuscation are high value changes
 In development to incorporate into line-speed e-mail scanner
 Improved detection of slightly modified malware
 Rebuilding of imports
 Improves reverse engineering
 Full recovery of import data
 VAD is fundamental part of OS (hard to deceive)
 Improved OEP Detection
 Reduces multiple OEP candidates
 Reduced analysis time
 Improvement in AV scanning results
Improving AV Future Work
 Unpacking process takes too long
 Current method is to unpack for 5 minutes
 Better algorithms can be found to determine if unpacking 
works
 Integration with existing tools 
IDA Pro
 IDA Pro
 OllyDbg
 WinDbg
 Build full-fledged debugger
 PDB / Paimei integration
 Visual control of unpacking
Questions?
 Contact Information
 Danny Quist
Email:
PI:EMAIL
Email:
PI:EMAIL
Twitter:
Ocomputing