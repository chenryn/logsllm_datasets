title:Toward the Analysis of Embedded Firmware through Automated Re-hosting
author:Eric Gustafson and
Marius Muench and
Chad Spensky and
Nilo Redini and
Aravind Machiry and
Yanick Fratantonio and
Davide Balzarotti and
Aur&apos;elien Francillon and
Yung Ryn Choe and
Christopher Kruegel and
Giovanni Vigna
Toward the Analysis of Embedded Firmware through Automated Re-hosting
Eric Gustafson1,2, Marius Muench3, Chad Spensky1, Nilo Redini1, Aravind Machiry1, Yanick Fratantonio3
Aurélien Francillon3, Davide Balzarotti3, Yung Ryn Choe2, Christopher Kruegel1, and Giovanni Vigna1
1University of California, Santa Barbara
{edg, cspensky, nredini, machiry, chris, vigna}@cs.ucsb.edu
2Sandia National Laboratories
{edgusta, yrchoe}@sandia.gov
3EURECOM
{marius.muench, francill, yanick.fratantonio, balzarot}@eurecom.fr
Abstract
The recent paradigm shift introduced by the Internet of
Things (IoT) has brought embedded systems into focus as
a target for both security analysts and malicious adversaries.
Typiﬁed by their lack of standardized hardware, diverse soft-
ware, and opaque functionality, IoT devices present unique
challenges to security analysts due to the tight coupling
between their ﬁrmware and the hardware for which it was de-
signed. In order to take advantage of modern program analysis
techniques, such as fuzzing or symbolic execution, with any
kind of scale or depth, analysts must have the ability to exe-
cute ﬁrmware code in emulated (or virtualized) environments.
However, these emulation environments are rarely available
and are cumbersome to create through manual reverse
engineering, greatly limiting the analysis of binary ﬁrmware.
In this work, we explore the problem of ﬁrmware
re-hosting, the process by which ﬁrmware is migrated
from its original hardware environment into a virtualized
one. We show that an approach capable of creating virtual,
interactive environments in an automated manner is a
necessity to enable ﬁrmware analysis at scale. We present
the ﬁrst proof-of-concept system aiming to achieve this
goal, called PRETENDER, which uses observations of the
interactions between the original hardware and the ﬁrmware
to automatically create models of peripherals, and allows
for the execution of the ﬁrmware in a fully-emulated
environment. Unlike previous approaches, these models
are interactive, stateful, and transferable, meaning they are
designed to allow the program to receive and process new
input, a requirement of many analyses. We demonstrate
our approach on multiple hardware platforms and ﬁrmware
samples, and show that the models are ﬂexible enough to
allow for virtualized code execution, the exploration of new
code paths, and the identiﬁcation of security vulnerabilities.
1
Introduction
The new wave of commercialized embedded systems, brought
about by trends such as the IoT, has resulted in their use for an
increasing number of security and safety-critical applications.
The most unusual feature of this new computing paradigm is
its extreme diversity, in terms of both hardware and software.
At the software level, each new device comes with its unique
ﬁrmware, which is purpose-built for its speciﬁc function,
and may not include a conventional operating system. At
the hardware level, each device includes its own unique
selection of hardware, both on the board (sensors, actuators,
etc.) and on the chip (bus controllers, timers, and other I/O
peripherals), which combine to form the unique execution
environment of the ﬁrmware.
Unfortunately for security researchers, in stark contrast to
the desktop and mobile ecosystems, market forces have not
created any de facto standard for components, protocols, or
software, hampering existing program analysis approaches,
and making the understanding of each new device an
independent, mostly manual, time-consuming effort.
Emulators for these systems are a key component in en-
abling dynamic analysis of the ﬁrmware at scale, as transpar-
ent on-device analysis is rarely possible, and it is impractical
to acquire hundreds of identical physical devices to parallelize
the analysis process. However, appropriate emulators are
typically unavailable, particularly due to the impracticality of
properly supporting the thousands of incompatible embedded
CPUs, and an enormous selection of external peripherals.
Worse yet, the physicality of these devices means that
analyzing their ﬁrmware without the sensors, actuators, and
other components may not be useful, or even possible at all.
Previous efforts have avoided the problem through the use
of an operating system abstraction [3, 8], or with a hardware-
in-the-loop scheme [15, 16, 26]. However, these techniques
impose severe limits on the scale and scope of analyzable
targets, such as requiring that a general-purpose OS is present,
or a signiﬁcant amount of potentially costly original hardware
to be tractable. Without these approaches, analysts must
manually implement models of all the on-chip and off-chip
peripherals for a device. This requires that the analyst can
obtain complete documentation or thorough understanding
for every component of the system, and spends the time
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 135to manually develop components usable by the emulator.
Manufacturers can also use completely custom components,
for which no documentation can be obtained, rendering
emulation by any existing method extremely difﬁcult.
We explore the possibility of automated ﬁrmware re-
hosting. The key idea behind ﬁrmware re-hosting consists of
analyzing a given ﬁrmware/hardware combination (possibly
through multiple execution rounds), understanding what the
ﬁrmware expects from the surrounding hardware, and then
attempting to replace the hardware altogether, so that the
ﬁrmware analysis can be carried out with software-only com-
ponents. In essence, ﬁrmware re-hosting would allow analysts
to decouple the execution of ﬁrmware from the hardware on
which it expects to be executed. This allows for the scaling
of popular dynamic analysis techniques, outperforming
hardware-in-the-loop or device-only approaches [20].
We identiﬁed four key aspects that are necessary for
building a re-hosting solution to deal with today’s embedded
ﬁrmware: A re-hosting scheme must be virtual to allow for
scale and reduce costs; should also be interactive, to allow
the ﬁrmware to process new input and actually withstand
program analysis; should be abstraction-less (i.e., it should
not rely on high-level concepts, such as operating systems and
hardware abstraction layers) to allow the system to handle
the widest possible variety of ﬁrmware. Finally, re-hosting
should be automated, so that the system can overcome the
extreme diversity that is impractical for humans to handle.
Although previous approaches to the problem are numerous,
all are missing at least one of these aspects.
In this work, we develop an approach to re-hosting
that achieves all of them, and propose a proof-of-concept
system, called PRETENDER, which is able to observe
hardware-ﬁrmware interactions and create models of
hardware peripherals automatically. Our system ﬁrst creates
a recording of real interactions between the ﬁrmware and its
hardware, and uses machine learning and pattern recognition
techniques to create models for each peripheral on the
CPU. The generated models can then be leveraged by
popular full-system emulators (e.g., QEMU [2]) or program
analysis engines (e.g., angr [23]) to enable precise, scalable,
interactive analyses of the accompanying ﬁrmware.
While automated re-hosting may seem conceptually
straightforward, the challenges in modeling even simple
hardware-ﬁrmware interactions are numerous. We may think
of a peripheral, such as a serial port, as a simple object
that sends and receives data, but the ﬁrmware’s view of this
hardware is much more complex, consisting of dozens of
individual conﬁguration, status, or data registers, which, from
the point-of-view of the ﬁrmware, appear as only opaque
memory accesses, without any indication of their layout or
behavior. Two peripherals performing the same function on
two different CPUs, even from the same vendor, vary wildly
in terms of memory layout and implementation details. On
top of this, accesses to these peripherals occur within the
CPU itself, and obtaining these interactions for modeling is
its own challenge. Interrupts are also a common feature of
embedded peripherals, and must occur exactly as expected,
or the hardware or ﬁrmware may fail.
To evaluate our approach, we demonstrate our recording
and modeling techniques on a set of six unique “blob”
ﬁrmware samples,each on three different hardware platforms,
with associated external peripheral devices. Our experiments
show that PRETENDER is able to successfully extract the
peripheral models and execute the ﬁrmware in a fully
emulated environment. The models offer enough interactivity
to allow for the exploration of parts of the program not
seen during recording or training. We further show the
potential for direct applications to dynamic analysis, by using
these modeled environments to trigger synthetic security
vulnerabilities in the ﬁrmware samples. The hardware
modeled in these experiments represents CPUs and other
components common to low-power IoT and embedded
devices. However, many challenges remain before typical
commercial devices can be modeled in full. We nevertheless
believe that the goal of automated ﬁrmware re-hosting is
both achievable and necessary. Therefore, we conclude with
a discussion of limitations, open problems, and next steps
toward tackling the complexity of commercial devices.
In summary, our contributions are as follows:
• We explore the problem of ﬁrmware re-hosting, and show
that virtual, interactive, automatic, and abstraction-less
approaches are needed to handle today’s diverse ﬁrmware.
• We present PRETENDER, a proof-of-concept system able
to automatically build hardware models, through a mix
of novel hardware and interrupt recording techniques,
machine learning, and peripheral state approximation.1.
• We apply PRETENDER to multiple ﬁrmware samples
across multiple hardware platforms and show that the
generated peripheral models are accurate, automatic,
and interactive enough to enable program analysis and
vulnerability discovery.
2 The Re-hosting Problem
To deal with the plethora of software applications that need
to be analyzed on desktop and mobile platforms, the security
community has developed many techniques for enabling the
scalable analysis of programs to ﬁnd bugs and detect malice.
In this section, we examine what makes embedded systems
different and much less tractable to these techniques, as
well as propose qualities that a system capable of analyzing
arbitrary ﬁrmware must have.
Today’s state-of-the-art program analysis techniques, in-
cluding dynamic analysis tools such as AFL [27] or symbolic
execution engines such as angr [23] or S2E [4], rely on some
1To allow the reproducibility of this work, the source code to this work
is available at https://github.com/ucsb-seclab/pretender
136          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationform of abstraction to be tractable. Dynamic approaches typ-
ically rely on virtualization to enable parallel, scalable anal-
yses, while symbolic approaches rely on function summariza-
tion of the underlying operating system to minimize the code
that they need to execute. In order to use any of these tools,
the analyst must take the program out of its original execu-
tion environment, and provide a suitable analysis environment
able to execute it. This is a process referred to as re-hosting.
For desktop and mobile programs, the standardization
of the execution environments (e.g., commodity hardware,
which consists of a relatively small number of OSes and archi-
tectures) has made this re-hosting process simpler. However,
with embedded ﬁrmware, many well-established assumptions
fail. For example, there may not be a general-purpose
operating system designed to run arbitrary code on the device,
leaving the analyst to deal with the hardware directly. This is
especially true for low-power IoT devices, which are typically
based on microcontroller-class CPUs that lack the ability
to run such OSes. Firmware for these devices is typically
obtained in the form of a binary blob, an opaque code object
containing no metadata about its contents. How this blob is
handled is entirely dependent on the CPU hardware, and will
vary widely from chip to chip. This also makes distinguishing
between library code and device-speciﬁc code challenging.
With no visible abstractions to use, the execution environment
for embedded ﬁrmware is the hardware itself. We can break
this hardware down into three distinct categories:
• CPU Core. The CPU core itself must, of course, be emu-
lated. This includes the instruction set, but also any func-
tion able to directly alter code execution, such as the chip’s
primary interrupt controller.
• On-Chip Peripherals. These peripherals include timers,
bus controllers, serial ports, General Purpose Input and Out-
put (GPIO), and other features typically included on the
die of the CPU itself. Most CPUs expose these peripherals
to the program as Memory-Mapped Input/Output (MMIO),
where they are organized as a group of contiguous memory
locations, that do not behave like normal memory. Each
group may contain multiple locations, used for conﬁgur-
ing, checking the status of, and exchanging data with the
peripheral. An example of a typical MMIO peripheral map-
ping is shown in Figure 1. On-chip peripherals are also
responsible for issuing interrupts, events that trigger asyn-
chronous changes in control ﬂow in response to a hardware
event. More precisely, a peripheral is associated with one
or more numbered interrupt “channels” or “lines”; when an
interrupt occurs, the code in the ﬁrmware associated with
that interrupt (known as an Interrupt Service Routine, or
ISR) is executed. When, how, and why a peripheral issue
interrupts are all properties of the peripheral’s hardware on
a particular chip, but typically includes the arrival of data,
the expiration of timers, and error conditions.
• External Peripherals. These peripherals are the sen-
sors, actuators, and other circuitry on the device’s circuit
Table 1: Excerpt of tools tackling the re-hosting problem
Tool
Simics [17]
FIE [9]
Avatar [26]
PROSPECT [14, 15]
Surrogates [16]
Firmadyne [3]
Avatar2 [19]
PRETENDER
Virtual
(cid:88)
(cid:88)
-
-
-
(cid:88)
(cid:88)
(cid:88)
Interactive
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Abstraction-less
(cid:88)
(cid:88)
(cid:88)
-
(cid:88)
-
(cid:88)
(cid:88)
Automatic
-
-
-
(cid:88)
-
(cid:88)
-
(cid:88)
board(s). They are exposed to the program only through
one of the on-chip peripherals, including GPIO, or a bus
such as Inter-Integrated Circuit (I2C) or Serial Peripheral
Interface (SPI). While from the programmer’s perspective,
communicating with these peripherals is as easy as sending
and receiving messages thanks to software libraries, the
resulting compiled ﬁrmware does so through a complex
series of accesses to the MMIO regions of on-chip periph-
erals, making the direct ﬂow of data in and out of each
peripheral difﬁcult to observe. This is also the source of the
most variety in embedded systems, as these devices typi-
cally contain entirely-custom circuit boards, with whatever
array of components the designers felt were necessary.
2.1 Re-hosting Aspects and Related Work
Many solutions have been proposed to enable ﬁrmware
re-hosting, each with their own qualities and drawbacks. To
showcase their differences, we identify four salient properties
that an ideal analysis system, capable of handling arbitrary
ﬁrmware, should possess. Table 1 shows prevalent tools that
tackled the re-hosting problem in the past, and classiﬁes them
according to the aspects, which are described as follows.
Virtual. A re-hosting solution should not depend on the pres-
ence of hardware during analysis. Many proposed approaches
to ﬁrmware analysis [7, 15, 16, 26] require hardware-in-the-
loop execution. However, such approaches inherently limit the
scale of the analyses. In a dynamic context, only one thread
of execution is possible per-device, and re-starting execution,
which happens very often in modern fuzzers, can incur a sig-
niﬁcant time penalty [20]. Symbolic execution is even more
impacted by such approaches; analyses using hardware-in-
the-loop must be careful to only execute portions of code that
do not contain hardware interactions, to avoid corrupting the