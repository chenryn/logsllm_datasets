title:SAD THUG: Structural Anomaly Detection for Transmissions of High-value
Information Using Graphics
author:Jonathan P. Chapman
SAD THUG: Structural Anomaly Detection 
for Transmissions of High-value  
Information Using Graphics
Jonathan P. Chapman, Fraunhofer FKIE
https://www.usenix.org/conference/usenixsecurity18/presentation/chapman
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.SAD THUG: Structural Anomaly Detection
for Transmissions of High-value Information Using Graphics
Jonathan P. Chapman
Fraunhofer FKIE
Abstract
The use of hidden communication methods by malware
families skyrocketed in the last two years. Ransomware
like Locky, Cerber or CryLocker, but also banking tro-
jans like Zberp or ZeusVM, use image ﬁles to hide their
tracks. Additionally, malware employed for targeted at-
tacks has been using similar techniques for many years.
The DuQu and Hammertoss families, for instance, use
the popular JPEG ﬁle format to clandestinely exchange
messages. Using these techniques, they easily bypass
systems designed to protect sensitive networks against
them. In this paper, we show that these methods result
in structural changes to the respective ﬁles. Thus, in-
fections with these malware families can be detected by
identifying image ﬁles with an unusual structure. We de-
veloped a structural anomaly detection approach that is
based on this insight.
In our evaluation, SAD THUG
achieves a mean true positive ratio of 99.24% for JPEG
ﬁles using 10 different embedding methods while main-
taining a mean true negative ratio of 99.323%. For PNG
ﬁles, the latter number drops slightly to 98.88% but the
mean true positive ratio improves to 99.318%. We only
rely on the fact that these methods change the structure
of their cover ﬁle. Thus, as we show in this paper, our ap-
proach is not limited to detecting a particular set of mal-
ware information hiding methods but can detect virtually
any method that changes the structure of a container ﬁle.
1
Introduction
Malware infections are, and remain, a constant threat to
computer users worldwide. For the second quarter of
2016, Microsoft reports that 21.2% of the systems that
are running their Windows operating and are conﬁgured
to share encounters with the company encountered mal-
ware at least once, up from 14.8% in the year before.1
Victims of malware may be private individuals, or small
businesses that e.g.
lose money or ﬁles due to infec-
tions with a banking trojan or ransomware. Or they may
be large corporations, public institutions like the Na-
tional Health Service in the United Kingdom, which was
severely affected by the WannaCry ransomware, or even
political entities such as the Democratic National Com-
mittee (DNC) in the United States, which was attacked
by the group associated with the Hammertoss malware
[23, 9].
Practically all malware uses the Internet to establish
a command and control (C&C) channel with its au-
thors. For instance, banking trojans upload credentials
harvested from the infected machine. Similarly, mal-
ware used in targeted attacks exﬁltrates passwords, doc-
uments, or other sensitive information or retrieves new
commands from its operator. Network operators on the
other hand seek to detect or prevent malware communi-
cations to protect their systems. Application level gate-
ways are important tools to these ends. However, in a
recent study Gugelmann et al. [27] were able to bypass
all three tested systems simply by base64 encoding data.
With respect to attempts to establish a covert channel,
which includes the methods discussed in this paper, they
point out that no product even claims to be able to detect
them.
Consequently, the use of steganography, the science
of hiding even the fact that communicating is taking
place, by malware has surged in the last two years
[52, 38, 39, 20, 53]. More particularly, malware used
in targeted attacks like DuQu [14], Hammertoss [23] or
Tropic Trooper [8] has been hiding data in image ﬁles for
many years. General purpose malware like the ZeusVM
[59] and Zberp [2] banking trojans followed suit. How-
ever, most of the recent surge in the use of steganogra-
phy may be attributed to exploit kits. These kits bundle
attacks against common web browsers and are leased to
other malware authors to help them distribute their soft-
ware [25, 41].
Signiﬁcant resources were invested in research for de-
tecting steganography exploiting compressed image data
USENIX Association
27th USENIX Security Symposium    1147
[48, 11, 12, 21]. However, most malware families, in-
cluding those used in targeted attacks, sidestep these ef-
forts by hiding their data not in the image data itself but
in the container ﬁle that is used to deliver it. Until now,
only Stegdetect [48] implements methods that can de-
tect speciﬁc attacks of this kind. However, it is limited
to JPEG ﬁles and can effectively only detect variations of
one particular method. Also, when we employed Stegde-
tect to analyze a realistic data set, it caused a signiﬁcant
number of false positives, rendering it unﬁt for practical
use.
In this paper we introduce SAD THUG, or Struc-
tual Anomaly Detection for Transmissions of High-value
information Using Graphics, a machine-learning based
anomaly detection approach to uncover malware that
modiﬁes the structure of image ﬁles. While technically
our approach can be used with any structured ﬁle format,
for this work we focused on the two image ﬁle formats
which are most widely used on the Internet and also most
frequently exploited by malware, JPEG and PNG. For
both formats, SAD THUG achieves exceptional accu-
racy. We also show that it can detect both known and un-
known methods, so long as they cause signiﬁcant anoma-
lies in the structure of the image ﬁles they use as a cover
medium.
Our contributions to the state of the art are as follows:
• In contrast to previous work for detecting struc-
tural anomalies in JPEG ﬁles, our approach uses a
learned model and achieves near perfect results for
a wide range of information hiding methods.
• Our approach is not limited to a particular ﬁle for-
mat and is the only approach with the demonstrated
capability of detecting structural anomalies in PNG
ﬁles.
• SAD THUG achieves a very low false positive ratio
for JPEG ﬁles and a low ratio for PNG ﬁles.
• Our ﬁndings are backed by an comprehensive eval-
uation using 270,000 JPEG ﬁles and 33,000 PNG
ﬁles along with additional ﬁles used by live mal-
ware.
The remainder of this paper is organized as follows.
First, we brieﬂy deﬁne the usage scenario for our ap-
proach. Then in section 3, we describe the JPEG and
PNG ﬁle formats, methods for structural information
hiding, and how they are abused by a wide range of mal-
ware families. We then introduce a small set of pre-
viously unpublished structural embedding methods that
complement the methods currently used by malware.
With this background, we introduce our detection ap-
proach in section 5, and describe our evaluation and re-
sults in section 6. Before contrasting our approach with
previous work in the ﬁeld (section 8), we brieﬂy describe
its inherent limitations. Finally, we draw our conclusions
and show avenues for future work in section 9.
2 Threat Model
Companies and organizations, in particular those that
handle sensitive data, use network separation to contain
the effect of malware infections and other attacks. On
the other hand, fully disconnected, or air-gapped, net-
works are often not an option. In these cases, most orga-
nizations only allow communications to take place using
email or HTTP through a proxy server. Here, the proxy
server doubles as an application level gateway (ALG)
that only allows communication to take place that ad-
heres to the HTTP standard.
However, malware authors adapted to these precau-
tions.
Instead of attacking systems directly, they use
email and HTTP to attack their victims. Spear ﬁshing
email is often and effectively used in targeted attacks
[10, 55, 28, 17], and additionally, exploit kits [25, 41]
or collections of attacks against web browsers and their
plugins gained signiﬁcant popularity as a tool for infect-
ing end user systems. Finally, practically all malware
families use the HTTP(S) protocol for their C&C com-
munications, allowing them to simply use their victim’s
HTTP proxy servers.
Hence, organizations started adopting more advanced
ALGs, often referred to as web application ﬁrewalls
(WAFs). WAFs implement ancillary security features
like payload signatures to prevent malicious communica-
tions through them. Additionally, many ALGs execute a
man-in-the-middle attack against TLS/SSL connections
to prevent unwanted communication from taking place
under a simple layer of off-the-shelf cryptography. How-
ever, malware authors once again adjusted to the new sit-
uation by more elaborately hiding their communications.
Since they still almost exclusively use the HTTP proto-
col, WAFs remain in the right place to detect or prevent
their communications. Yet they are increasingly unable
to do so. A study covering three commercial WAFs [27]
showed that none of them was able to detect the exﬁl-
tration of sensitive data once that data was base64 en-
coded. The authors also pointed out that they were not
aware of any product that claims to be able to detect ad-
vanced techniques like establishing a covert channel us-
ing messages hidden in image ﬁles. Our work provides
an important cornerstone for closing this gap.
Figure 1 depicts the simpliﬁed structure of a partially
segmented network. On the left side of the ﬁgure, client
systems reside in a protected network – including a com-
promised system, as indicated by a warning sign. The
systems in this network have no direct access to untrusted
networks but they may communicate with an email and
1148    27th USENIX Security Symposium
USENIX Association
Figure 1: Schematics of a partially segmented network. Icons: Tango Project.
HTTP proxy server residing in the organization’s demil-
itarized zone. These in turn have access to other, un-
trusted networks, e.g. the Internet. To communicate with
another system under the attacker’s control in those net-
works, again indicated by a warning sign, the attacker
has to exploit the servers in the demilitarized zone.
For the purposes of this paper, we deﬁne an attacker as
an entity that has control over two systems. One system
resides in a segmented network. The attacker wants to
establish a communication channel between this system
and another system outside that network that allows it to
transfer signiﬁcant amounts of data between them. How-
ever, all communications have to traverse an uncompro-
mised ALG. The ALG, on the other hand, has to distin-
guish between benign and malicious data exchanged be-
tween systems inside and outside a given network with
no advance knowledge on which particular systems or
data may be malicious or not.
We are aware of 40 malware families, including four
proof-of-concepts, that use various techniques to hide
their C&C communications.
34 families exploit im-
ages for this purpose. There are two facts supporting
this choice, in particular with regard to WWW trafﬁc.
First, compressed images primarily consist of high en-
tropy data that is difﬁcult to distinguish from encrypted
data. Second, viewing a single web page usually re-
quires downloading dozens, sometimes well above one
hundred, image ﬁles. Hence, attackers can hide their
communications among a large volume of benign data
transfers.
The malware families exploiting images can further be
subdivided into two evenly sized groups. The ﬁrst half
hides their messages in the image data – the detection
of which has been covered by an extensive number of
research papers. The second half however exploits the
structure of the corresponding ﬁle – an approach that has
received little to no attention so far despite being used
by high proﬁle malware like DuQu [14] or Hammertoss
[23]. Therefore, our work focuses on the detection of
methods falling into the second category.
3 Background
In this section, we ﬁrst brieﬂy introduce the ﬁle formats
most widely exploited by malware for hiding their com-
munications, JPEG and PNG. We then summarize the
fundamental structural embedding methods before point-
ing out how different malware families implement these
approaches in practice.
JPEG File Structure
3.1
The JPEG File Interchange Format (JFIF) [31] and Ex-
changeable Image File Format (Exif) [19] are both con-
tainers for JPEG compressed image data. Unless we
speciﬁcally need to explain a detail with respect to one
of these formats, we will simply refer to a “JPEG ﬁle”,
assuming that the data is stored in either one of them.
For simplicity, and like most decoders for JPEG ﬁles,
for the remainder of this paper we do not distinguish be-
tween the segments of the container format and those that
syntactically belong to the JPEG compressed data except
that we introduce them in separate sections below.
3.1.1
JPEG Container Formats
Both JFIF and Exif ﬁles borrow from the JPEG data for-
mat they are designed to contain. They consist of a se-
ries of segments, each starting with a two byte “marker”
code. The code indicates the type of a given segment and
is sometimes followed by a two byte length ﬁeld. Both
ﬁles begin with a “start of image” (SOI) marker, and an
“end of image” marker indicates the end of the image
data.
There are 16 codes that
indicate an application-
speciﬁc or “APPn” segment follows where n is a num-
ber between 0 and 15. These segments start with a zero-
terminated ASCII string to identify the nature of their
USENIX Association
27th USENIX Security Symposium    1149
Protected NetworkDemilitarized ZoneUntrusted Networkscontent. Somewhat contradictory to the marker’s desig-
nation, the JFIF standard requires that the SOI marker
is followed by an “APP0” marker with identiﬁer “JFIF”
that contains mandatory meta data. Similarly, Exif ﬁles
start with an “APP1: Exif” segment that also contains
meta data on the image.
In contrast to the JFIF stan-
dard, Exif does discuss the possibility of encountering
additional data behind the end of image marker, and rec-
ommends that such data should be ignored.
3.1.2 JPEG Data Format
The JPEG compression algorithms’s [30] core depends
on the block-wise transformation of an input image’s
color channels into frequency components. It achieves
its lossy data reduction by dividing the respective coefﬁ-
cients using a quantization table, allowing users or their
applications to choose a trade off between the quality and
ﬁle size achieved. The resulting data is stored in seg-
ments, each of which starts with a two byte marker indi-
cating the segment’s type. Most but not all of these seg-
ments also include a two byte length ﬁeld, limiting their
size to 65,535 bytes. Furthermore, most segments con-
tain or consist of a header indicating how the following
data should be interpreted. While some obvious restric-