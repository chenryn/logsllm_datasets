if-else block. However, we point out that at the return state-
ment the dynamically qualiﬁed set of contexts becomes a
singleton, that is, the end context is precisely known. The
T-RET-DYN rule applies in such cases and soundly converts
the qualiﬁer for ρ back to a statically-qualiﬁed type.
For templates that do not start and end in precise con-
texts, our CSAS engine creates multiple clones of the tem-
plate, as explained in Section 5.1.3, to force conformance to
the type rules.
4.3 Sanitization
Handling manually placed sanitizers. The T-SAN rule
converts the type of the expression e in the sanitization ex-
pression San(f, e) from UNSAFE to a statically-qualiﬁed type
STATICc1(cid:44)→c2 , only if f is a correct sanitizer for the con-
text transition c1 (cid:44)→ c2 according to the externally speciﬁed
SanM ap relation.
Auto-sanitization Only at Type Promotions. Other
than T-SAN, the T-PROM type rule is the only way an UNSAFE-
qualiﬁed string can become statically-qualiﬁed. The CSAS
engine inserts statically selected sanitizers during compila-
tion only at the type promotion command that promote
UNSAFE-qualiﬁed to statically-qualiﬁed strings. For such a
command v := (STATICc1(cid:44)→c2 )e, the CSAS engine’s compi-
lation step automatically inserts the sanitizer which matches
the start context c1 and will ensure that parsing v will safely
end in context c2 .
Type Promotion from UNSAFE to Dynamic. For dy-
namically qualiﬁed strings, the CSAS engine needs to per-
form runtime parsing and sanitization. To enable this for
dynamically-qualiﬁed strings, our instrumentation uses an
auxiliary data structure, which we call the CSRP-expression,
which keeps constant substrings separate from the untrusted
components. For conceptual simplicity, our CSRP-expression
data structure is simply a string in which untrusted sub-
strings are delimited by special characters(cid:76)(cid:77). These special
delimiters are not part of the string alphabet of base tem-
plating language.
The T-PROM rule permits promotions from UNSAFE-qualiﬁed
strings to dynamically-qualiﬁed expressions. The CSAS en-
gine inserts instrumentation during compilation to insert
the special characters (cid:76)(cid:77) around the untrusted data and to
initialize this CSRP-expression with it. The concatenation
operation over regular strings naturally extends to CSRP-
expressions.
Runtime Parsing and Sanitization. At program points
where the output buﬀer is dynamically-qualiﬁed, the CSAS
engine adds instrumentation to track its dynamic context as
a metadata ﬁeld. The metadata ﬁeld is updated at each
print. When a CSRP-expression is written to the output
buﬀer at runtime, the CSRP-expression is parsed starting in
the dynamically-tracked context of the output buﬀer. This
parsing procedure internally determines the start and end
context of each untrusted substring delimited by (cid:76)(cid:77), and
selects sanitizers for them context-sensitively.
We detail the operational semantics for the language and
sketch the soundness proof for our type system in the ap-
pendix A.
5. CSAS ENGINE
We present the design and implementation of the CSAS
engine in this section. The CSAS engine performs two main
steps of inferring context type qualiﬁers and then compiling
well-typed IR to JavaScript or server-side Java code with
sanitization logic.
5.1 Type Qualiﬁer Inference & Compilation
The goal of the type inference step is to convert untyped
or vanilla templates to well-typed IR. In the the qualiﬁer in-
ference step, the CSAS engine ﬁrst converts template code to
an internal SSA representation (untyped IR). The qualiﬁer
594inference sub-engine is also supposed to add additional type
promotions for untrusted inputs, where sanitization primi-
tives will eventually be placed. However, the qualiﬁer in-
ference sub-engine does not apriori know where all saniti-
zations will be needed. To solve this issue, it inserts a set
of candidate type promotions, only some of which will be
compiled into sanitizers. These candidate type promotions
include type qualiﬁer variables, i.e., variables whose values
are context types and are to be determined by the type in-
ference. They have the form v(cid:48) := (Q)e where Q is a type
qualiﬁer variable, and its exact value is a context type to be
determined by the type qualiﬁer inference sub-engine. Next,
the type qualiﬁer inference step solves for these qualiﬁer vari-
ables by generating type constraints and solving them.
Once constraint solving succeeds, the concrete context
type for each qualiﬁer variable is known. These context
types can be substituted into the candidate type promo-
tions; the resulting IR is well-typed and is guaranteed to
conform to our type rules.
In the ﬁnal compilation step,
only some of the candidate type promotions are turned into
sanitizer calls. Speciﬁcally, type promotions in well-typed IR
that essentially cast from a qualiﬁed-type to itself, are redun-
dant and don’t require any sanitization, whereas those which
cast UNSAFE-qualiﬁed variables into other qualiﬁed values are
compiled into sanitizers as described in section 4.3.
5.1.1 Inserting Type Promotions with Qualifer Vari-
ables
Candidate type promotions are introduced at the follow-
ing points while converting templates to the untyped IR:
• Each print (e) statement is turned into a print (v(cid:48))
statement in the IR by creating a fresh internal pro-
gram variable v(cid:48). The CSAS engine also inserts a type
promotion (and assignment) statement v(cid:48) := (Q) e pre-
ceeding the print statement, creating a qualiﬁer vari-
able Q.
• Each v = φ(v1, v2) statement is turned into equivalent
type promotions v := (Q1) v1 and v := (Q2) v2 in the
respective branches before the join point, by creating
new qualiﬁer variables Q1 and Q2 .
• Parameter marshalling from actual parameter “a” to
formal parameter “v” is made explicit via a candidate
promotion operation v := (Q) a, by creating new qual-
iﬁer variable Q.
• A similar type promotion is inserted before the con-
catenation of a constant string expression with another
string expression.
5.1.2 Constraint Solving for Qualiﬁer Variables
The goal of this step is to infer context type qualiﬁers for
qualiﬁer variables. We analyze each template’s IR starting
with templates that are used by external code— we call these
public templates. We generate a version of compiled code
for each start and end context in which a template can be
invoked, so we try to analyze each public template for each
choice of a start and end context. Given a template T , start
context cs and end context ce, the generic type inference
procedure called T empAnalyze(T, cs, ce) is described below.
T empAnalyze(T, cs, ce) either succeeds having found a
satisfying assignment of qualiﬁer variables to context type
qualiﬁers, or it fails if no such assignment is found. It oper-
ates over a call-graph of the templates in depth-ﬁrst fashion
starting with T , memoizing the start and end contexts for
each template it analyzes in the process. When analyzing
the body of a template in IR form, it associates a typemap
L mapping local variables to type qualiﬁers at each program
location. At the start of the inference for T , all local vari-
ables are qualiﬁed as UNSAFE in L. The analysis proceeds
from the entry to the exit of the template body statement
by statement, updating the context qualiﬁer of each program
variable. The context of the output buﬀer is also updated
with the analysis of each statement.
Type rules deﬁned in Figure 8 can be viewed as inference
rules as well:
for each statement or command in the con-
clusion of a rule, the premises are type constraints to be
satisﬁed. Similar constraints are implied by type rules for
expressions. Our type inference generates and solves these
type constraints during the statement by statement analysis
using a custom constraint solving procedure.
Several of our type rules are non-deterministic. As an
example, the rules T-CONSTSTR and T-CSTRDYN have iden-
tical premises and are non-deterministic because the lan-
guage syntax alone is insuﬃcient to separate statically and
dynamically qualiﬁed types. Our constraint solving pro-
cedure resolves such non-determinism by backtracking to
ﬁnd a satisfying solution to the constraints. Our inference
prefers the most precise (or static) qualiﬁers over less pre-
cise (dynamic) qualiﬁers as solutions for all qualiﬁer vari-
ables during its backtracking-based constraint solving pro-
cedure. For instance, consider the non-determinism inher-
ent in the premise involving IsP arseV alid used in the T-
CONSTSTR and T-CSTRDYN rules. IsP arseV alid is a one-to-
many relation and a constant string may parse validly in
many start contexts. Our constraint solving procedure non-
deterministically picks one such possible context transition
initially, trying to satisfy all instances of the T-CONSTSTR
rule before that of the T-CSTRDYN rule and reﬁnes its choice
until it ﬁnds a context transition under which the static
string parses validly. If no instance of the T-CONSTSTR rule
matches, the engine tries to satisfy the T-CSTRDYN rule. Sim-
ilar, backtracking is also needed when analyzing starting and
ending contexts of templates when called via the callTem-
plate operation.
5.1.3 Resolving Context Ambiguity by Cloning
The static typing T-CALL rule for callTemplate has strin-
gent pre-conditions: it permits a unique start and end con-
text for each template. A templates can be invoked in mul-
tiple diﬀerent start (or end) contexts—our inference handles
such cases while keeping the consistency with the type rules
by cloning templates. We memoize start and end contexts
inferred for each template during the inference analysis. If
during constraint generation and solving, we ﬁnd that a tem-
plate T is being invoked in start and end contexts diﬀerent
from the ones inferred for T previously during the inference,
we create a clone T (cid:48). The cloned template has the same
body but expects to begin and end in a diﬀerent start and
end context. Cloned templates are also compiled to sepa-
rate functions and the calls are directed to the appropriate
functions based on the start and end contexts.
6.
IMPLEMENTATION & EVALUATION
We have implemented our CSAS engine design into a
state-of-the-art, commercially used open-source templating
framework called Google Closure Templates [45]. Closure
Templates are used extensively in large web applications in-
595Contexts
HTML PCDATA
HTML RCDATA
HTML TAGNAME
HTML ATTRIBNAME
QUOTED HTMLATTRIB
UNQUOTED HTMLATTRIB
JS STRING
JS REGEX
CSS ID, CLASS, PROPNAME, KEYWDVAL, QUANT
CSS STRING, CSS QUOTED URL, CSS UNQUOTED URL
URL START, URL QUERY, URL GENERAL
Figure 10: A set of contexts C used throughout the paper.
cluding Gmail, Google Docs and other Google properties.
Our auto-sanitized Closure Templates can be compiled both
into JavaScript as well as server-side Java code, enabling
building reusable output generation elements.
Our implementation is in 3045 lines of Java code, exclud-
ing comments and blank lines, and it augments the existing
compiler in the Closure Templates with our CSAS engine.
All the contexts deﬁned in Figure 10 of the appendix are
supported in the implementation with 20 distinct sanitizers.
Subject Benchmarks. For real-world evaluation, we gath-
ered all Closure templates accessible to us. Our benchmarks
consist of 1035 distinct Closure templates from Google’s
commericially deployed applications. The templates were
authored by developers prior to our CSAS engine implemen-
tation. Therefore, we believe that these examples represent
unbiased samples of existing code written in templating lan-
guages.
The total amount of code in the templates (excluding ﬁle
prologues and comments outside the templates) is 21, 098
LOC. Our benchmarks make heavy use of control ﬂow con-
structs such as callTemplate calls. Our benchmark’s tem-
plate call-graph is densely connected.
It consists of 1035
nodes, 2997 call edges and 32 connected components of size
ranging from 2 - 12 templates and one large component with
633 templates. Overall, these templates have a total of
1224 print statements which write untrusted data expres-
sions. The total number of untrusted input variables in the
code base is 600, ranging from 0− 13 for diﬀerent templates.
A small ratio of untrusted inputs to untrusted print shows
that untrusted inputs are used in multiple output expres-
sions, which are one of the main reasons for context ambi-
guity that motivate our ﬂow-sensitive design.
egy in today’s web frameworks.
Evaluation Goals. The goal of our evaluation is to mea-
sure how easily our principled type-based approach retroﬁts
to an existing code base. In addition, we compare the secu-
rity and performance of our “mostly static”, context-sensitive
approach to the following alternative approaches:
• No Auto-Sanitization. This is the predominant strat-
• Context-insensitive sanitization. Most remaining web
frameworks supplement each output print command
with the same sanitizer.
• Context-sensitive runtime parsing sanitization. As ex-
plained earlier, previous systems have proposed deter-
mining the contexts by runtime parsing [5]. We com-
pare the performance of our approach against this ap-
proach.
6.1 Compatibility & Precision
Our benchmark code was developed prior to our type sys-
tem. We aim to evaluate the extent to which our approach
can retroﬁt security to existing code templates. To per-
form this experiment, we disabled all sanitization checks in
the benchmarks that may have been previously applied and
enabled our auto-sanitization on all of the 1035 templates.
We counted what fraction of the templates that were trans-
formed to well-typed compiled code. Our analysis is im-
plemented in Java and takes 1.3 seconds
for all the 1035
benchmarks on a platform with 2 GB of RAM, an Intel 2.6
MHz dual-core processor running Linux 2.6.31.
Our static type inference approach avoids imprecision by
cloning templates that are called in more than one context.
In our analysis, 11 templates required cloning which resulted
in increasing the output print statements (or sinks) from
1224 initially to 1348 after cloning.
Our main result is that all 1348 output sinks in the 1035
templates were auto-sanitized. No change or annotations to
the vanilla templates were required. We test the outputs
of the compiled templates by running them under multiple
inputs. The output of the templates under our testing was
unimpacted and remained completely compatible with that
of the vanilla template code.
Our vanilla templates, being commercially deployed, have
existing sanitizers manually applied by developers and are
well-audited for security by Google. To conﬁrm our compat-
ibility and correctness, we compared the sanitizers applied
by our CSAS engine to the those pre-applied in the vanilla
versions of the benchmarked code manually by developers.
Out of the 1348 print statements emitting untrusted expres-
sions, the sanitization primitives on untrusted inputs ex-
actly match the pre-applied sanitizers in all but 21 cases.
In these 21 cases, our CSAS engine applies a more accurate
(escapeHtmlAttribute) sanitizer versus the more restrictive
sanitizer applied previously (escapeHTML) by the developer.
Both sanitizers defeat scripting attacks; the pre-existing san-
itizer was overly restrictive rendering certain characers in-
ert that weren’t dangerous for the context. This evaluation
strengthens our conﬁdence that our approach does not im-
pact/alter the compatibility of the HTML output, and that
our CSAS engine implementation applies sanitization cor-
rectly.
Our type qualiﬁer inference on this benchmark statically-
qualiﬁed expressions written to all but 9 out of the 1348
sinks. That is, for over 99% of the output sinks, our ap-
proach can statically determine a single, precise context.
In these 9 cases, the set of ambiguous contexts is small and
a single sanitizer that sanitizes the untrusted input for all
contexts in this set can be applied. In our present implemen-
tation, we have special-cased for such cases by applying a
static sanitizer, which is safe but may be over-restrictive. We
have recently implemented the CSRP scheme using an aux-
iliary data structure, as described in Section 4.3, in jQuery
templates for JavaScript [28]; we expect porting this imple-
mentation to the Google Closure compiler to be a straight-
forward task in the future.