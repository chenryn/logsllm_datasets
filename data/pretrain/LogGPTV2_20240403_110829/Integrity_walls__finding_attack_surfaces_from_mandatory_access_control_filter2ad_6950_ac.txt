attack surface over several days on a system in normal use,
involving bootup, typical application usage, and shutdown.
We found that only 13.8% (295 of 2138) of the total entry
points are part of the attack surface (Table 2). For exam-
ple, we found many entry points accessing trusted objects
such as etc_t; these entry points would not be part of the
attack surface. Thus, simply listing all possible entry points
in TCB programs as part of the attack surface would be a
signiﬁcant overapproximation, and not very useful for anal-
ysis. Of the 295 attack surface entry points across various
programs in the TCB, that received untrusted input, 81 are
overt operations (Section 4.2); 35 of these have had input ﬁl-
tering problems, many recently discovered for the ﬁrst time.
Five Bash scripts add a total of 8 entry points to the attack
surface (Table 3).
In addition, we found a previously un-
known vulnerability at an entry point in a script that sets
up the X server that has been around for several years, which
we discuss below. This leads us to believe that identiﬁcation
and examination of such entry points prior to deployment is
key to preventing exploits.
Runtime analysis in inherently incomplete. To examine
completeness, we ran our kernel module in an enforcing
mode (Section 4.4), where any access crossing the system
TCB integrity wall was blocked unless made through one of
the entry points in Table 2 and between appropriate types.
We did not note any new accesses, and since we have a
conservative adversary model (including unprivileged users),
we believe our set of entry points to be complete for a de-
fault Ubuntu 10.04.2 Desktop distribution in relation to its
SELinux policy.
We located various subtle entry points that are part of
the attack surface. We illustrate this using the example
of logrotate. logrotate has an entry point that reads
from user_home_t, and the source code for this entry point
called a library function that gave little hint as to why this
was happening. The reading is actually done inside a li-
brary function in libpopt attempting to read its conﬁgura-
tion ﬁle. As another example, we found entry points call-
ing libc glob(). This function performs the system call
getdents returning untrusted directory ﬁlenames. A recent
untrusted ﬁlename attack on logrotate (CVE-2011-1155),
was found at this entry point. Neither of the above entry
points are as a result of simply calling read() in the source
code, and can be easily missed by manual code inspection.
We examined some of the entry points identiﬁed, to see
if we could locate any obvious problems. The script corre-
sponding to entry point 2 in Table 3 is responsible for setting
up the /tmp/.X11-unix directory, in which the X server cre-
ates a Unix-domain socket that clients can connect to. This
ﬂow is into initrc_t from tmp_t (Table 2). However, we
found that it is vulnerable to a time-of-check-to-time-of-use
(TOCTTOU) vulnerability. Looking at the script makes it
fairly clear that the developer did not expect a threat at
this entry point. This script has existed as part of Ubuntu
distributions since at least 2006, and is an example of how
locating the attack surface made the problem obvious. We
believe that a more thorough testing of the entry points un-
covered may expose further vulnerabilities; however, that is
outside the scope of this paper.
5.2.2 Apache Webserver
We use our tool to evaluate a typical webserver deploy-
ment, the Apache webserver (version 2.2.14) with mod perl.
For the wall generation, of particular interest are object
types in the SELinux policy module for Apache that were
not included in the application TCB, four httpd_user types
and httpd_log_t. For the runtime analysis for Apache, we
ran the Apache::Test perl module, which contains test cases
Program
Overt Violating
Object Type
acpid
avahi-daemon
Entry
1 Unix socket
3 * Unix socket
1 Netlink socket
1 UDP socket read
console-kit-daemon
1 ﬁle
Accessed
apmd t
system dbus daemon
avahi t
avahi t
tty device t
Bug ID /
Notes
CVE-2009-0798
CVE-2007-3372
CVE-2006-5461
CVE-2006-6870
–
1 Unix socket
system dbus daemon
CVE-2010-4664
TCB Type
apmd t
avahi t
consolekit t
cupsd t
devicekit disk t
devicekit power t
dhcpc t
getty t
hald t
initrc t
init t
Total
Viol.
Entry Entry
3
38
37
56
72
97
15
18
188
479
319
3
14
3
10
6
7
2
3
28
23
27
local login t
152
10
logrotate t
NetworkManager t
ntpd t
restorecond t
rtkit daemon t
sshd t
syslogd t
system dbusd t
udev t
xdm t
41
76
24
17
20
78
29
63
217
56
6
45
4
9
9
11
1
15
25
16
cupsd
udisks-daemon
upowerd
dhclient3
nm-dhcp-client.action
getty
hald
hald-probe-serial
hald-addon-storage
hald-addon-acpi
sh
sh
telinit
plymouth
ureadahead
init
sh
loadkeys
login
python
logrotate
1 ﬁle
1 TCP socket
1 ﬁle
1 * 4 unix socket
1 netlink socket
1 * 2 unix socket
1 netlink socket
1 raw socket read
1 unix socket
1 ﬁle read
1 unix socket
1 ﬁle
1 unix socket
1 unix socket
1 ﬁle read
2 * dir read
1 * 2 ﬁle read
1 ﬁle read
1 ﬁle read
1 unix socket
2 ﬁle read
1 ﬁle read
1 * 2 ﬁle read
1 unix socket
1 ﬁle read
1 dir search
1 dir search
1 dir search
1 ﬁle read
1 dir search
1 dir read
NetworkManager
1 netlink socket
sh
ntpdate
restorecond
rtkit-daemon
(Discussed
in Table 5)
rsyslogd
dbus-daemon
udevd
sh
gdm-binary
gdm-simple-slave
gdm-session-worker
consolekit log t
cupsd t
print spool t
–
CVE-2000-0540
–
system dbus daemon
CVE-2010-0746
devicekit power t
devicekit power t
devicekit power t
dhcpc t
system dbus daemon
initrc var run t
system dbus daemon
tty device t
system dbus daemon
apmd t
initrc var run t
tmp t
initrc var run t
devpts t
user home t
system dbus daemon
tmp t
devpts t
–
–
–
CVE-2009-0692
–
–
–
–
–
Ubuntu Bug 230110
–
Prev. unknown
–
–
–
–
–
–
initrc var run t
system dbus daemon
CVE-2008-5394
–
user home t
user home dir t
user home dir t
user home dir t
generic - log ﬁles
user home dir t
var log t
NetworkManager t
system dbus daemon
tmp t
ntpd t
generic - all types
user home dir t
system dbus daemon
–
–
syslogd t
1 unix socket
2 * dir search
1 udp socket
1 * 3 ﬁle read
1 dir read
1 unix socket
(5 in privileged
part)
1 udp socket
1 * 3 unix socket
system dbus daemon
1 * 2 netlink socket read
1 ﬁle read
1 ﬁle read
1 unix socket
1 ﬁle read
1 ﬁle read
1 ﬁle read
1 dir search
1 * 3 ﬁle read
1 unix socket
1 netlink socket
1 shared memory
81
udevd t
tty device t
user home t
system dbus daemon
initrc var run t
xdm tmp t
xauth home t
user home dir t
xdm tmp t
xserver t
xserver t
unconﬁned t
(motd) CVE-2010-0832
(hushlogin)
CVE-2010-4708
Python search path
–
(libpopt)
CVE-2011-1155
–
CVE-2009-0578
–
CVE-2001-0414
–
–
–
2 vulns
–
CVE-2008-5617
CVE-2008-3834
CVE-2009-1185
–
CVE-2006-1057
–
–
–
CVE-2006-5214
CVE-2010-4708
–
CVE-2007-1003
–
CVE-2008-1379
35
xserver t
43
18
Xorg
Total
2138
295
Table 2: Attack surface for the system TCB. The ﬁrst column is the TCB type we consider, the second the total number of entry points
for all programs running under that type, and the third the number of violating entry points that cross the integrity wall. Next, we
list the speciﬁc binary with its overt violating entry points (Section 4.2) and the object type accessed that causes the entry point to
be violating. We also identify vulnerabilities caused due to insuﬃcient ﬁltering at the overt entry points (we could not ﬁnd any for the
covert entry points). When multiple vulnerabilities are available for an entry point, the chronologically earliest is listed. Highlighted