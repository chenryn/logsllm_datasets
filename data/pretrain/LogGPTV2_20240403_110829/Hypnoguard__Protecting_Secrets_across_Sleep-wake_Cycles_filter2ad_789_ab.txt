crets from a computer in sleep, excluding any attacks
that rely on compromising ﬁrst and tricking the user to
use it later, the so-called evil-maid attacks, which can
be addressed by adapting existing defenses, e.g., [20] for
wakeup-time. However, no known eﬀective defense exists
for more advanced evil-maid attacks, including hardware
modiﬁcations as in NSA’s ANT catalog [21]. Note that,
our AES-GCM based implementation can restrict modi-
ﬁcation attacks on encrypted RAM content.
3. The host OS is assumed to be general-purpose, e.g., Win-
dows or Linux; a TXT/SVM-aware kernel is not needed.
Also, the Hypnoguard tool may reside in an untrusted ﬁle
system and be bootstrapped from a regular OS.
4. We assume all user data, the OS, and any swap space
used by the OS are stored encrypted on disk, e.g., us-
ing a properly conﬁgured software/hardware FDE sys-
tem (cf. [44, 12]). A secure boot-time solution should be
used to enforce strong authentication (cf. [70]). The FDE
key may remain in RAM under Hypnoguard’s protection.
This assumption can be relaxed, only if the data on disk
is assumed non-sensitive, or in the case of a diskless node.
5. Any information placed in memory by the user/OS is
treated as sensitive. With full memory encryption, it
is not necessary to distinguish user secrets from non-
sensitive data (e.g., system binaries).
6. The adversary must not be able to capture the computer
while it is operating, i.e., in Advanced Conﬁguration and
Power Interface (ACPI [1]) S0. We assume the computer
goes into sleep after a period of inactivity, or through user
actions (e.g., lid-close of a laptop).
7. The adversary may attempt to defeat Hypnoguard’s pol-
icy enforcement mechanism (i.e., when to delete or unlock
HGpriv during authentication). With physical access, he
may intervene in the wakeup process, e.g., by tampering
Figure 1: Memory layout and key usage of Hypnoguard.
Shaded areas represent encrypted/protected data; diﬀerent
patterns refer to using diﬀerent schemes/key types.
with the UEFI boot script for S3 [67], and may attempt
to observe the input and output of our tool and inﬂuence
its logic. In all cases, he will fail to access HGpriv, unless
he can defeat TXT/SVM/TPM (via an implementation
ﬂaw, or advanced hardware attacks).
8. In the case of coercion, the user never types the correct
password but provides only deletion or incorrect pass-
words, to trigger the deletion of HGpriv. Coercion has
been considered recently during boot-time [70], requir-
ing the computer to be in a powered-oﬀ state before the
coercive situation. We consider coercion during wakeup;
ideally, both systems should be used together.
9. We require a system with a TPM chip and a TXT/SVM-
capable CPU with AES-NI (available in many consumer-
grade Intel and AMD CPUs). Without AES-NI, full
memory encryption will be slow, and users must resort
to partial memory encryption.
3. DESIGN
In this section, we detail the architecture of Hypnoguard,
and demonstrate how it achieves the design goals stated in
Section 2.2. Technical considerations not speciﬁc to our cur-
rent implementation are also discussed.
Overview. Figure 1 shows the memory layout and key
usage of Hypnoguard across sleep-wake cycles; the transition
and execution ﬂows are described in Section 4.1. User secrets
are made unavailable from RAM by encrypting the whole
system memory, regardless of kernel or user spaces, with a
one-time random symmetric key SK before entering sleep.
Then SK is encrypted using HGpub and stored in system
memory. At this point, only HGpriv can decrypt SK. HGpriv
is sealed in the TPM chip with the measurements of the
genuine copy of Hypnoguard protected by a user password.
At wakeup-time, Hypnoguard takes control in a trusted
execution session (TXT/SVM), and prompts the user for
the Hypnoguard user password. Only when the correct pass-
word is provided in the genuine Hypnoguard environment,
HGpriv is unlocked from TPM (still in TXT/SVM). Then,
HGpriv is used to decrypt SK and erased from memory im-
mediately. The whole memory is then decrypted with SK
and the system exits from TXT/SVM back to normal OS
operations. SK is not reused for any future session.
3.1 Design choices and elements
Trusted execution mode. We execute the unlocking pro-
gram in the trusted mode of modern CPUs (TXT/SVM),
where an unforgeable measurement of the execution envi-
ronment is generated and stored in TPM (used to access
HGpriv). The use of TXT/SVM and TPM ensures that
the whole program being loaded and executed will be re-
ﬂected in the measurement; i.e., neither the measurement
can be forged at the load time nor can the measured pro-
gram be altered after being loaded, e.g., via DMA attacks.
The memory and I/O space of the measured environment
is also protected, e.g., via Intel VT-d/IOMMU, from any
external access attempt.
We choose to keep Hypnoguard as a standalone module
(a) Small trusted
separate from the OS for two reasons.
computing base (TCB): If Hypnoguard’s unlocking program
is integrated with the OS, then we must also include OS
components (at least the kernel and core OS services) in
the TPM measurement; this will increase the TCB size sig-
niﬁcantly. Also, in a consumer OS, maintaining the cor-
rect measurements of such a TCB across frequent updates
and run-time changes, will be very challenging. Unless mea-
suring the entire OS is the purpose (cf. Unicorn [38]), a
TXT/SVM-protected application is usually a small piece of
code, not integrated with the OS, to achieve a stable and
manageable TCB (e.g., Flicker [40]). In our case, only the
core Hypnoguard unlock logic must be integrity-protected
(i.e., bound to TPM measurement). The small size may also
aid manual/automatic veriﬁcation of the source code of an
implementation. (b) Portability: We make Hypnoguard less
coupled with the hosting OS except for just a kernel driver,
as we may need to work with diﬀerent distributions/versions
of an OS, or completely diﬀerent OSes.
TPM’s role. TPM serves three purposes in Hypnoguard:
1. By working with TXT/SVM, TPM’s platform conﬁgura-
tion registers (PCRs) maintain the unforgeable measure-
ment of the execution environment.
2. We use TPM NVRAM to store HGpriv safely with two
layers of protection. First, HGpriv is bound to the Hypno-
guard environment (e.g., the Intel SINIT module and
the Hypnoguard unlocking program). Any binary other
than the genuine copy of Hypnoguard will fail to ac-
cess HGpriv. Second, an authdata secret, derived from
the Hypnoguard user password, is also used to protect
HGpriv. Failure to meet either of the above two condi-
tions will lead to denial of access.
3. If HGpriv is deleted by Hypnoguard (e.g., triggered via
multiple authentication failures, or the entry of a deletion
password), we also use TPM to provide a quote, which is a
digest of the platform measurement signed by the TPM’s
attestation identity key (AIK) seeded with an arbitrary
value (e.g., time stamp, nonce). Anyone, including the
adversary, can verify the quote using TPM’s public key
at a later time, and conﬁrm that deletion has happened.
4. For generation of the long-term key pair HGpriv and
HGpub, and the per-session symmetric key SK, we need a
reliable source of randomness. We use the TPM_GetRandom
command to get the required number of bytes from the
random number generator in TPM [60] (and optionally,
mix them with the output from the RDRAND instruction
in modern CPUs).
Necessity of HGpriv and HGpub. Although we use ran-
dom per sleep-wake cycle symmetric key (SK) for full mem-
ory encryption, we cannot directly seal SK in TPM (un-
der the Hypnoguard password), i.e., avoid using (HGpriv,
HGpub). The reason is that we perform the platform-bound
user re-authentication only once at the wakeup time, and
without involving the user before entering sleep, we cannot
password-seal SK in TPM. If the user is required to enter the
Hypnoguard password every time before entering sleep, the
user experience will be severely aﬀected. We thus keep SK
encrypted under HGpub in RAM, and involve the password
only at wakeup-time to release HGpriv (i.e., the password
input is similar to a normal OS unlock process).
3.2 Unlock/deletion policy and deployment
Unlocking policy. A user-deﬁned unlocking policy will
determine how Hypnoguard reacts to a given password, i.e.,
what happens when the correct password is entered vs. when
a deletion or invalid password is entered. If the policy al-
lows many/unlimited online (i.e., via Hypnoguard) guessing
attempts, a dictionary attack might be mounted, violating
goal G5 ; the risk to the attacker in this case is that he might
unknowingly enter the deletion password. If the composition
of the allowed password is not properly chosen (e.g., diﬀer-
ent character sets for the correct password and the deletion
password), an adversary may be able to recognize the types
of passwords, and thus avoid triggering deletion.
Static policies can be conﬁgured with user-selected pass-
words and/or rule-based schemes that support evaluating an
entered password at run-time. Security and usability trade-
oﬀs should be considered, e.g., a quick deletion trigger vs.
tolerating user mistyping or misremembering (cf. [11]). Dur-
ing setup, both unlocking and deletion passwords are cho-
sen by the user, and they are set as the access passwords for
corresponding TPM NVRAM indices: the deletion password
protects an index with a deletion indicator and some random
data (as dummy key), and the unlocking password protects
an index containing a null indicator and HGpriv (similar
to [70]). Note that, both the content and deletion indicator
of an NVRAM index are protected (i.e., attackers cannot
exploit the indicator values). Multiple deletion passwords
can also be deﬁned. We also use a protected monotonic
counter to serve as a fail counter, sealed under Hypnoguard,
and initialized to 0. We use a regular numeric value sealed
in NVRAM (i.e., inaccessible outside of Hypnoguard); the
TPM monotonic counter facility can also be used. The fail
counter is used to allow only a limited number of incorrect
attempts, after which, deletion is triggered; this is speciﬁ-
cally important to deal with lost/stolen cases.
At run-time, only when the genuine Hypnoguard program
is active, the fail counter is incremented by one, and a typed
password is used to attempt to unlock the deﬁned indices,
sequentially, until an index is successfully opened, or all the
indices are tried. In this way, the evaluation of a password
is performed only within the TPM chip and no information
about any deﬁned plaintext passwords or HGpriv is leaked
in RAM—leaving no chance to cold-boot attacks. If a typed
password successfully unlocks an index (i.e., a valid pass-
word), the fail counter is decremented by one; otherwise,
the password entry is considered a failed attempt and the
incremented counter is not decremented. When the counter
reaches a preset threshold, deletion is triggered. The counter
is reset to 0 only when the correct password is entered (i.e.,
HGpriv is successfully unlocked). Thus, a small thresh-
old (e.g., 10) may provide a good balance between security
(quick deletion trigger) and usability (the number of incor-
rect entries that are tolerated). For high-value data, the
threshold may be set to 1, which will trigger deletion imme-
diately after a single incorrect entry.
Deployment/setup phase. With a setup program in the
OS, we generate a 2048-bit RSA key pair and save HGpub
in TPM NVRAM (unprotected), and ask the user to create
her passwords for both unlocking and deletion. With the
unlocking password (as authdata secret), HGpriv is stored
in an NVRAM index, bound to the expected PCR values
of the Hypnoguard environment at wakeup (computed ana-
lytically); similarly, indices with deletion indicators are al-
located and protected with the deletion password(s). There
is also certain OS-end preparation, e.g., loading and initial-
izing the Hypnoguard device drivers; see Section 4.1.
3.3 How goals are achieved
Hypnoguard’s goals are deﬁned in Section 2.2. G1 is ful-
ﬁlled by Hypnoguard’s full memory encryption, i.e., replace-
ment of all plaintext memory content, with corresponding
ciphertext generated by SK. As the OS or applications are
not involved, in-place memory encryption can be performed
reliably. SK resides in memory encrypted under HGpub
(right after full memory encryption is performed under SK).
HGpriv can only be unlocked with the correct environment
and password at wakeup-time, and is erased from RAM right
after its use in the trusted execution mode.
A random SK with adequate length generated each time
before entering sleep, and a strong public key pair (HGpub,
HGpriv) generated during setup guarantee G2.
TPM sealing (even with a weak Hypnoguard user pass-
word) helps achieve G3. Without loading the correct binary,
the adversary cannot forge the TPM measurement and trick
TPM to access the NVRAM index (cf. [30, 60]); note that,
learning the expected PCR values of Hypnoguard does not
help the attacker in any way. The adversary is also unable
to brute-force the potentially weak user password, if he is
willing to program the TPM chip without Hypnoguard, as
TPM ensures the consistent failure message for both incor-
rect passwords and incorrect measurements.
The user is required to memorize a regular password for
authentication. If the adversary keeps the genuine environ-
ment but does not know the correct password, he may be
only left with a high risk of deleting HGpriv. The legitimate
user, however, knows the password and can control the risk
of accidental deletion, e.g., via setting an appropriate dele-
tion threshold. Therefore G4 is satisﬁed.
When the adversary guesses within Hypnoguard, the pass-
word scheme (unlocking policy) makes sure that no (or only
a few, for better usability) guessing attempts are allowed
before deletion is triggered. This achieves G5.
The additional goal for coercion attacks is achieved through
the TPM Quote operation. The quote value relies on mainly
two factors: the signing key, and the measurement to be