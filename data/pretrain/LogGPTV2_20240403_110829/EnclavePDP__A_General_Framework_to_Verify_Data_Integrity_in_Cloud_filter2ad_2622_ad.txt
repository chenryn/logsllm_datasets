described above, the low-overhead operation (the verify oper-
ation) is affected more signiﬁcantly by the ecall execution
context switch. Though up to 92% runtime overhead, the fol-
lowing experiments (Section 6.4) will demonstrate that such
microsecond-range or millisecond-range overhead makes ac-
ceptable, or even negligible impact on the throughput for the
practical deployment.
Observation 3. Running the veriﬁcation operation
inside the enclave introduces less overhead (12.70%–
92.2%)
challenge operation
(18.10%–190%), because the challenge operation is
relatively “lightweight” compared with the veriﬁcation
operation in terms of computation.
compared with the
6.4 Evaluation of PDP Request
We measured the response time and throughput of the 10
native PDP schemes and their EnclavePDP implementation,
by verifying the integrity of ﬁles with different sizes. The
response time includes the time of network communication
and all operations (i.e., Challenge, Proof, Verify) in the veriﬁ-
cation phase. Since we set the maximum number of challenge
blocks as 460, we intend to choose 1GB ﬁle (larger than 460
blocks) and 16KB ﬁle (smaller than 460 blocks) to conduct
the following experiments.
The right of Table 3 shows the average response time un-
der the condition of the maximum throughout of both native
PDP and EnclavePDP on verifying the integrity of 1GB ﬁle.
“Thr” indicates the number of concurrent threads (imitating
multiple users) used to trigger the maximum throughput. As
shown in Table 3, the average response time for most of the
PDP schemes (including CPOR, SEPDP, MACPDP, APDP,
MRPDP, DPDP and FlexDPDP), when implemented in In-
tel SGX, is almost negligible, with the overhead from 1.0%
to 5.4%. In contrast, the overhead of the three BLS-based
schemes, i.e., PPPAS, DHT-PA and SEPAP, is 24.5%, 23.4%,
and 10.9% respectively. Recall the veriﬁcation operation for
the BLS-based schemes takes signiﬁcantly longer than that of
other PDP schemes, in the scale of second, but the overhead
incurred by EnclavePDP is still reasonable.
We conducted an experiment to measure the proportion of
challenge/verify time to the total response time, when launch-
ing only one thread to issue one PDP request each time. As
shown in Table 4, the veriﬁcation time of the BLS-based
schemes accounts for much more proportion than that of
other schemes, which well explains why running BLS-based
schemes in enclave introduces more overhead compared with
other PDP schemes. However, the response time also includes
the network communication latency and the time of the proof
operation, thus the overhead per PDP request for these PDP
schemes is diluted. For most of these 10 PDP schemes, the
runtime of the challenge operation and the verify operation
accounts for a quite small proportion of the total response
time, which is in line with the fact that although per challenge
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    203
4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files050100150200250300350Challenge generation time (us)APDPEnclaveNative4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files050100150200250300350Challenge generation time (us)MRPDP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files020406080100120140Challenge generation time (us)CPOR4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files020406080100120Challenge generation time (us)MACPDP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0246810Challenge generation time (us)SEPDP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files02004006008001000120014001600Challenge generation time (us)PPPAS4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files02004006008001000120014001600Challenge generation time (us)DHTPA4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files02004006008001000120014001600Challenge generation time (us)SEPAP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files020406080100120140160Challenge generation time (us)DPDP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files020406080100120140160Challenge generation time (us)FDPDPFigure 4: Overhead of Verify Operations
Table 3: Evaluation of PDP Request on 16KB and 1GB File.
16KB ﬁle
EnclavePDP
515 ms (403.2 req/s)
1154 ms (33.8 req/s)
957 ms (89.8 req/s)
642 ms (410.2 req/s)
539 ms (389.7 req/s)
1095 ms (90.4 req/s)
1075 ms (90.7 req/s)
8391 ms (3.3 req/s)
5552 ms (3.5 req/s)
1311 ms (22.3 req/s)
Schemes
MACPDP
APDP [9]
MRPDP [11]
SEPDP [10]
CPOR [12]
DPDP [7]
FlexDPDP [8]
PPPAS [19]
SEPAP [17]
DHT-PA [18]
* Note: the value in the "( )" is the maximum throughput (req/s) associated with corresponding response time.
* Thr. : Threads indicating concurrent users.
or verify operation introduces relatively high overhead, the
impact to per PDP request is almost negligible.
Native PDP
500 ms (418.1 req/s)
1110 ms (35.1 req/s)
936 ms (91.1 req/s)
601 ms (436.7 req/s)
520 ms (414.2 req/s)
939 ms (103.4 req/s)
934 ms (104.7 req/s)
6318 ms (4.5 req/s)
4162 ms (4.6 req/s)
1110 ms (26.3 req/s)
EnclavePDP
987 ms (239.9 req/s)
2164 ms (8.9 req/s)
3115 ms (6.2 req/s)
725 ms (327.6 req/s)
1140 ms (84.8 req/s)
24655 ms (0.0405 req/s)
50698 ms (0.052 req/s)
46034 ms (0.363 req/s)
41700 ms (0.365 req/s)
34207 ms (0.487 req/s)
Overhead
3.0% (3.6%)
3.9% (3.7%)
2.2% (1.4%)
6.8% (6.0%)
3.6% (6.0%)
16.6% (12.6%)
15.1% (13.3%)
32.8% (24.4%)
33.3% (24.0%)
18.1% (15.2%)
Thr.
220
40
100
275
250
120
120
30
30
30
1GB ﬁle
Native PDP
971 ms (244.7 req/s)
2079 ms (9.3 req/s)
2976 ms (6.5 req/s)
718 ms (334.0 req/s)
1131 ms (85.7 req/s)
23814 ms (0.0418 req/s)
48100 ms (0.0552 req/s)
36886 ms (0.465 req/s)
37591 ms (0.458 req/s)
27709 ms (0.64 req/s)
Overhead
1.6% (2.0%)
4.1% (4.5%)
4.7% (4.6%)
1.0% (1.9%)
1.0% (1.1%)
3.4% (3.5%)
5.4% (5.5%)
24.5% (21.9%)
10.9% (20.4%)
23.4% (24.0%)
Thr.
200
40
40
250
100
5
5
20
20
30
In addition, we ﬁnd that the proportion of challenge/verify
time for most enclave-enabled PDP schemes is in the same
order of magnitude as that of native PDP schemes, slightly
higher than the latter. For DPDP and FlexDPDP schemes,
the higher overhead on challenge time (2.3 times and 1.5
times respectively) might be explained by a loop function
(an expensive operation) used to generate non-negative ran-
dom integers in the challenge generation function of the two
enclave-enabled schemes. The 1.6 times overhead on chal-
lenge time for the enclave-enabled CPOR scheme is probably
due to the extra operations (e.g., private keys loading, chal-
lenge backup), which has signiﬁcant impact on the originally
small challenge operation time of the CPOR scheme.
Observation 4. The impact incurred by EnclavePDP to
the entire response time, a complete challenge-verify
procedure, is acceptable for practical deployment.
From the perspective of maximum throughput, SEPDP,
MAC-PDP and CPOR perform much better than the other
schemes. In particular, the maximum throughput of SEPDP
and MAC-PDP is one order of magnitude higher than CPOR
and two orders of magnitude higher than APDP and MRPDP.
This can be attributed to the fact that symmetric encryption
(SEPDP and MAC-PDP) is of higher efﬁciency than asym-
metric encryption (e.g., APDP). Meanwhile, the maximum
throughput of those three BLS-based schemes (i.e., PPPAS,
DHT-PA and SEPAP) is one or several orders of magnitude
slower than the above ﬁve schemes, since they utilize the
BLS signatures primitive to support public auditing at the
expense of low efﬁciency inherited from BLS signatures. The
maximum throughput of DPDP and FlexDPDP is another one
order of magnitude smaller than the three BLS-based PDP
schemes, because building the Rank-Based Authenticated
Skiplist (RBASL) or FlexList data structures is not efﬁcient
and quite memory-consuming.
Figure 4 shows that the veriﬁcation time of DPDP and
FlexDPDP is about one order of magnitude shorter than that
204    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0510152025Verification time (ms)APDPEnclaveNative4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0102030405060Verification time (ms)MRPDP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0100200300400500Verification time (us)CPOR4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files010203040506070Verification time (us)MACPDP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0246810Verification time (us)SEPDP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0.00.51.01.52.0Verification time (s)PPPAS4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0.000.250.500.751.001.251.501.752.00Verification time (s)DHTPA4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0.00.51.01.52.0Verification time (s)SEPAP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0510152025303540Verification time (ms)DPDP4KB16KB64KB256KB1MB4MB16MB64MB256MB1GBSize of Files0510152025303540Verification time (ms)FDPDPTable 4: Proportion of Challenge and Verify Time in a PDP Request
Challenge
Verify
MACPDP
0.015%
0.010%
0.011%
0.009%
APDP [9] MRPDP [11]
0.037%
0.032%
2.881%
2.574%
0.030%
0.025%
5.541%
5.104%
SEPDP [10]
0.001%
0.001%
0.001%
0.001%
CPOR [12]
0.016%
0.006%
0.072%
0.037%
DPDP [7]
0.001%
0.0003%
0.154%
0.108%
FlexDPDP [8]
0.001%
0.0004%
0.210%
0.140%
PPPAS [19]
0.040%
0.026%
62.870%
57.180%
SEPAP [17]
0.040%
0.027%
68.083%
58.753%
DHT-PA [18]
0.050%
0.034%
71.942%
63.338%
E
N
E
N
* Note: "E" means "EnclavePDP"; "N" means "Native PDP".
of the three BLS-based schemes, which seems contradictory
to fact that the maximum throughput of the former is about
one order of magnitude smaller than that of the latter when
verifying the integrity of 1GB ﬁle as in the right of Table
3. We conducted another experiment to evaluate the proof
generation time of those ﬁve schemes to generate proofs on
1GB ﬁle. We ﬁnd that the proof generation time of DPDP
is 10s, nearly 5 times of those three BLS-based schemes,
i.e., 2.5s for PPPAS, 1.8s for DHTP-A and 2.3s for SEPAP,
respectively. The proof generation time of FlexDPDP is also
about 3 times of those BLS-based schemes. In fact, the proof
generation of DPDP and FlexDPDP spends a large amount
of time to build RBASL and FlexList, and the property
information of the blocks to be checked needs to be sent back
to the veriﬁer, which introduces much more communication
overhead than that of those BLS-based schemes. Moreover,
the size of RBASL and FlexList also depends on the size
of the ﬁle to be veriﬁed. The left part of Table 3 shows
that DPDP and FLexDPDP perform better than the BLS-
based schemes when verifying the integrity of smaller ﬁles.
Observation 5. To support dynamic auditing, the perfor-
mance of PDP schemes like DPDP and FlexDPDP down-
grades signiﬁcantly, due to the expense of building and
managing memory-consuming data structures.
Finally, we also conducted an experiment to evaluate the
overhead incurred by EncalvePDP when performing integrity
veriﬁcation on a smaller ﬁle, i.e., 16KB. As shown in Table
3, when the number of concurrent threads is the same for
16KB ﬁle and 1GB ﬁle, verifying 16KB ﬁle by EnclavePDP
introduces less overhead than 1GB ﬁle. For example, with the
same 40 concurrent threads, enclave-enabled APDP imposed
3.9% overhead on 16KB ﬁle and 4.1% overhead on 1GB
ﬁle. With the same 30 concurrent threads, enclave-enabled
DHT-PA imposed 18.1% overhead on 16KB ﬁle, and 23.4%
overhead on 1GB ﬁle. However, for other schemes, we can-
not simply compare the overhead on 16KB ﬁle and 1GB ﬁle
directly, because the number of concurrent threads launched
to evaluate the maximum throughput can be quite different,
e.g., 120 for DPDP and FlexDPDP on 16KB ﬁle and 5 on
1 GB ﬁle. Overall, when verifying 16KB ﬁle, the maximum