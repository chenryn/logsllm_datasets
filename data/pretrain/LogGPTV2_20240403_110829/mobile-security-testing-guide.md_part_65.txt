app will do so by calling URLForResource:withExtension: and loadHTMLString:baseURL .
To quicky inspect this, you can use frida-trace and trace all "loadHTMLString" and "URLForResource:withExtension:"
methods.
$ frida-trace -U "Where's My Browser?"
-m "*[WKWebView *loadHTMLString*]" -m "*[* URLForResource:withExtension:]"
14131 ms -[NSBundle URLForResource:0x1c0255390 withExtension:0x0]
14131 ms URLForResource: web/WKWebView/scenario2.html
14131 ms withExtension: 0x0
14190 ms -[WKWebView loadHTMLString:0x1c0255390 baseURL:0x0]
475
iOS Platform APIs
14190 ms HTMLString: 
...
14190 ms baseURL: nil
In this case, baseURL is set to nil , meaning that the effective origin is "null". You can obtain the effective origin by
running window.origin from the JavaScript of the page (this app has an exploitation helper that allows to write and
run JavaScript, but you could also implement a MITM or simply use Frida to inject JavaScript, e.g. via
evaluateJavaScript:completionHandler of WKWebView ).
As an additional note regarding UIWebView s, if you retrieve the effective origin from a UIWebView where baseURL is
also set to nil you will see that it is not set to "null", instead you'll obtain something similar to the following:
applewebdata://5361016c-f4a0-4305-816b-65411fc1d780
This origin "applewebdata://" is similar to the "file://" origin as it does not implement Same-Origin Policy and allow
access to local files and any web resources. In this case, it would be better to set baseURL to "about:blank", this way,
the Same-Origin Policy would prevent cross-origin access. However, the recommendation here is to completely avoid
using UIWebView s and go for WKWebView s instead.
Determining WebView File Access
Even if not having the original source code, you can quickly determine if the app's WebViews do allow file access and
which kind. For this, simply navigate to the target WebView in the app and inspect all its instances, for each of them
get the values mentioned in the static analysis, that is, allowFileAccessFromFileURLs and
allowUniversalAccessFromFileURLs . This only applies to WKWebView s ( UIWebVIew s always allow file access).
We continue with our example using the "Where's My Browser?" app and Frida REPL, extend the script with the
following content:
ObjC.choose(ObjC.classes['WKWebView'], {
onMatch: function (wk) {
console.log('onMatch: ', wk);
console.log('URL: ', wk.URL().toString());
console.log('javaScriptEnabled: ', wk.configuration().preferences().javaScriptEnabled());
console.log('allowFileAccessFromFileURLs: ',
wk.configuration().preferences().valueForKey_('allowFileAccessFromFileURLs').toString());
console.log('hasOnlySecureContent: ', wk.hasOnlySecureContent().toString());
console.log('allowUniversalAccessFromFileURLs: ',
wk.configuration().valueForKey_('allowUniversalAccessFromFileURLs').toString());
},
onComplete: function () {
console.log('done for WKWebView!');
}
});
If you run it now, you'll have all the information you need:
$ frida -U -f com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js
onMatch: >
URL: file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/
Library/WKWebView/scenario1.html
javaScriptEnabled: true
allowFileAccessFromFileURLs: 0
hasOnlySecureContent: false
allowUniversalAccessFromFileURLs: 0
476
iOS Platform APIs
Both allowFileAccessFromFileURLs and allowUniversalAccessFromFileURLs are set to "0", meaning that they are
disabled. In this app we can go to the WebView configuration and enable allowFileAccessFromFileURLs . If we do so
and re-run the script we will see how it is set to "1" this time:
$ frida -U -f com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js
...
allowFileAccessFromFileURLs: 1
Determining Whether Native Methods Are Exposed Through WebViews
(MSTG-PLATFORM-7)
Overview
Since iOS 7, Apple introduced APIs that allow communication between the JavaScript runtime in the WebView and
the native Swift or Objective-C objects. If these APIs are used carelessly, important functionality might be exposed to
attackers who manage to inject malicious scripts into the WebView (e.g., through a successful Cross-Site Scripting
attack).
Static Analysis
Both UIWebView and WKWebView provide a means of communication between the WebView and the native app. Any
important data or native functionality exposed to the WebView JavaScript engine would also be accessible to rogue
JavaScript running in the WebView.
Testing UIWebView JavaScript to Native Bridges
There are two fundamental ways of how native code and JavaScript can communicate:
JSContext: When an Objective-C or Swift block is assigned to an identifier in a JSContext , JavaScriptCore
automatically wraps the block in a JavaScript function.
JSExport protocol: Properties, instance methods and class methods declared in a JSExport -inherited protocol
are mapped to JavaScript objects that are available to all JavaScript code. Modifications of objects that are in the
JavaScript environment are reflected in the native environment.
Note that only class members defined in the JSExport protocol are made accessible to JavaScript code.
Look out for code that maps native objects to the JSContext associated with a WebView and analyze what
functionality it exposes, for example no sensitive data should be accessible and exposed to WebViews.
In Objective-C, the JSContext associated with a UIWebView is obtained as follows:
[webView valueForKeyPath:@"documentView.webView.mainFrame.javaScriptContext"]
Testing WKWebView JavaScript to Native Bridges
JavaScript code in a WKWebView can still send messages back to the native app but in contrast to UIWebView , it is not
possible to directly reference the JSContext of a WKWebView . Instead, communication is implemented using a
messaging system and using the postMessage function, which automatically serializes JavaScript objects into native
Objective-C or Swift objects. Message handlers are configured using the method add(_ scriptMessageHandler:name:) .
Verify if a JavaScript to native bridge exists by searching for WKScriptMessageHandler and check all exposed methods.
Then verify how the methods are called.
The following example from "Where's My Browser?" demonstrates this.
477
iOS Platform APIs
First we see how the JavaScript bridge is enabled:
func enableJavaScriptBridge(_ enabled: Bool) {
options_dict["javaScriptBridge"]?.value = enabled
let userContentController = wkWebViewConfiguration.userContentController
userContentController.removeScriptMessageHandler(forName: "javaScriptBridge")
if enabled {
let javaScriptBridgeMessageHandler = JavaScriptBridgeMessageHandler()
userContentController.add(javaScriptBridgeMessageHandler, name: "javaScriptBridge")
}
}
Adding a script message handler with name "name" (or "javaScriptBridge" in the example above) causes the
JavaScript function window.webkit.messageHandlers.myJavaScriptMessageHandler.postMessage to be defined in all frames
in all web views that use the user content controller. It can be then used from the HTML file like this:
function invokeNativeOperation() {
value1 = document.getElementById("value1").value
value2 = document.getElementById("value2").value
window.webkit.messageHandlers.javaScriptBridge.postMessage(["multiplyNumbers", value1, value2]);
}
The called function resides in JavaScriptBridgeMessageHandler.swift :
class JavaScriptBridgeMessageHandler: NSObject, WKScriptMessageHandler {
//...
case "multiplyNumbers":
let arg1 = Double(messageArray[1])!
let arg2 = Double(messageArray[2])!
result = String(arg1 * arg2)
//...
let javaScriptCallBack = "javascriptBridgeCallBack('\(functionFromJS)','\(result)')"
message.webView?.evaluateJavaScript(javaScriptCallBack, completionHandler: nil)
The problem here is that the JavaScriptBridgeMessageHandler not only contains that function, it also exposes a
sensitive function:
case "getSecret":
result = "XSRSOGKC342"
Dynamic Analysis
At this point you've surely identified all potentially interesting WebViews in the iOS app and got an overview of the
potential attack surface (via static analysis, the dynamic analysis techniques that we have seen in previous sections or
a combination of them). This would include HTML and JavaScript files, usage of the JSContext / JSExport for
UIWebView and WKScriptMessageHandler for WKWebView , as well as which functions are exposed and present in a
WebView.
Further dynamic analysis can help you exploit those functions and get sensitive data that they might be exposing. As
we have seen in the static analysis, in the previous example it was trivial to get the secret value by performing reverse
engineering (the secret value was found in plain text inside the source code) but imagine that the exposed function
retrieves the secret from secure storage. In this case, only dynamic analysis and exploitation would help.
478
iOS Platform APIs
The procedure for exploiting the functions starts with producing a JavaScript payload and injecting it into the file that
the app is requesting. The injection can be accomplished via various techniques, for example:
If some of the content is loaded insecurely from the Internet over HTTP (mixed content), you can try to implement
a MITM attack.
You can always perform dynamic instrumentation and inject the JavaScript payload by using frameworks like
Frida and the corresponding JavaScript evaluation functions available for the iOS WebViews
( stringByEvaluatingJavaScriptFromString: for UIWebView and evaluateJavaScript:completionHandler: for
WKWebView ).
In order to get the secret from the previous example of the "Where's My Browser?" app, you can use one of these
techniques to inject the following payload that will reveal the secret by writing it to the "result" field of the WebView:
function javascriptBridgeCallBack(name, value) {
document.getElementById("result").innerHTML=value;
};
window.webkit.messageHandlers.javaScriptBridge.postMessage(["getSecret"]);
Of course, you may also use the Expoitation Helper it provides:
See another example for a vulnerable iOS app and function that is exposed to a WebView in [#THIEL] page 156.
Testing Object Persistence (MSTG-PLATFORM-8)
Overview
479
iOS Platform APIs
There are several ways to persist an object on iOS:
Object Encoding
iOS comes with two protocols for object encoding and decoding for Objective-C or NSObject s: NSCoding and
NSSecureCoding . When a class conforms to either of the protocols, the data is serialized to NSData : a wrapper for
byte buffers. Note that Data in Swift is the same as NSData or its mutable counterpart: NSMutableData . The
NSCoding protocol declares the two methods that must be implemented in order to encode/decode its instance-
variables. A class using NSCoding needs to implement NSObject or be annotated as an @objc class. The NSCoding
protocol requires to implement encode and init as shown below.
class CustomPoint: NSObject, NSCoding {
//required by NSCoding:
func encode(with aCoder: NSCoder) {
aCoder.encode(x, forKey: "x")
aCoder.encode(name, forKey: "name")
}
var x: Double = 0.0
var name: String = ""
init(x: Double, name: String) {
self.x = x
self.name = name
}
// required by NSCoding: initialize members using a decoder.
required convenience init?(coder aDecoder: NSCoder) {
guard let name = aDecoder.decodeObject(forKey: "name") as? String
else {return nil}
self.init(x:aDecoder.decodeDouble(forKey:"x"),
name:name)
}
//getters/setters/etc.
}
The issue with NSCoding is that the object is often already constructed and inserted before you can evaluate the
class-type. This allows an attacker to easily inject all sorts of data. Therefore, the NSSecureCoding protocol has been
introduced. When conforming to NSSecureCoding you need to include:
static var supportsSecureCoding: Bool {
return true
}
when init(coder:) is part of the class. Next, when decoding the object, a check should be made, e.g.:
let obj = decoder.decodeObject(of:MyClass.self, forKey: "myKey")
The conformance to NSSecureCoding ensures that objects being instantiated are indeed the ones that were expected.
However, there are no additional integrity checks done over the data and the data is not encrypted. Therefore, any
secret data needs additional encryption and data of which the integrity must be protected, should get an additional
HMAC.
Note, when NSData (Objective-C) or the keyword let (Swift) is used: then the data is immutable in memory and
cannot be easily removed.
480
iOS Platform APIs
Object Archiving with NSKeyedArchiver
NSKeyedArchiver is a concrete subclass of NSCoder and provides a way to encode objects and store them in a file.
The NSKeyedUnarchiver decodes the data and recreates the original data. Let's take the example of the NSCoding
section and now archive and unarchive them:
// archiving:
NSKeyedArchiver.archiveRootObject(customPoint, toFile: "/path/to/archive")
// unarchiving:
guard let customPoint = NSKeyedUnarchiver.unarchiveObjectWithFile("/path/to/archive") as?
CustomPoint else { return nil }
When decoding a keyed archive, because values are requested by name, values can be decoded out of sequence or
not at all. Keyed archives, therefore, provide better support for forward and backward compatibility. This means that
an archive on disk could actually contain additional data which is not detected by the program, unless the key for that
given data is provided at a later stage.
Note that additional protection needs to be in place to secure the file in case of confidential data, as the data is not
encrypted within the file. See the "Data Storage on iOS" chapter for more details.
Codable
With Swift 4, the Codable type alias arrived: it is a combination of the Decodable and Encodable protocols. A
String , Int , Double , Date , Data and URL are Codable by nature: meaning they can easily be encoded and
decoded without any additional work. Let's take the following example:
struct CustomPointStruct:Codable {
var x: Double
var name: String
}
By adding Codable to the inheritance list for the CustomPointStruct in the example, the methods init(from:) and
encode(to:) are automatically supported. Fore more details about the workings of Codable check the Apple
Developer Documentation. The Codable s can easily be encoded / decoded into various representations: NSData
using NSCoding / NSSecureCoding , JSON, Property Lists, XML, etc. See the subsections below for more details.
JSON and Codable
There are various ways to encode and decode JSON within iOS by using different 3rd party libraries:
Mantle
JSONModel library
SwiftyJSON library
ObjectMapper library
JSONKit
JSONModel
YYModel
SBJson 5
Unbox
Gloss
Mapper
JASON
Arrow
481
iOS Platform APIs
The libraries differ in their support for certain versions of Swift and Objective-C, whether they return (im)mutable
results, speed, memory consumption and actual library size. Again, note in case of immutability: confidential
information cannot be removed from memory easily.
Next, Apple provides support for JSON encoding/decoding directly by combining Codable together with a
JSONEncoder and a JSONDecoder :
struct CustomPointStruct:Codable {
var x: Double
var name: String
}
let encoder = JSONEncoder()
encoder.outputFormatting = .prettyPrinted
let test = CustomPointStruct(x: 10, name: "test")
let data = try encoder.encode(test)
print(String(data: data, encoding: .utf8)!)
// Prints:
// {
// "x" : 10,
// "name" : "test"
// }
JSON itself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON
that contains secrets has been appropriately protected (e.g., encrypted/HMACed). See the "Data Storage on iOS"
chapter for more details.
Property Lists and Codable
You can persist objects to property lists (also called plists in previous sections). You can find two examples below of
how to use it:
// archiving:
let data = NSKeyedArchiver.archivedDataWithRootObject(customPoint)
NSUserDefaults.standardUserDefaults().setObject(data, forKey: "customPoint")
// unarchiving:
if let data = NSUserDefaults.standardUserDefaults().objectForKey("customPoint") as? NSData {
let customPoint = NSKeyedUnarchiver.unarchiveObjectWithData(data)
}
In this first example, the NSUserDefaults are used, which is the primary property list. We can do the same with the
Codable version:
struct CustomPointStruct:Codable {