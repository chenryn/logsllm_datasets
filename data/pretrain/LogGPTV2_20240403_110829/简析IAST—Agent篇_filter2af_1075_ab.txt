        4.0.0
        agent
        agent
            8
            8
                    org.apache.maven.plugins
                    maven-assembly-plugin
                                single
                            package
                                    jar-with-dependencies
                                        true
                                        org.dgcat.agent.MonitorAgent
                                        org.dgcat.agent.MonitorAgent
                                        true
                                        true
                                        dgcat
                                        ${project.name}
                                        ${project.version}
                                        ${project.name}
                                        ${project.version}
                    org.apache.maven.plugins
                    maven-compiler-plugin
                        7
                        7
###  4.3 spy包实现
spy包主要有两个类，一个是AbstractAspect抽象类，core包里会有一个Aspect继承它，一个是SpyAPI类，它主要是装载Aspect类，为正常程序提供接口从而调用我们Aspect类实现的方法。
SpyAPI类如下：
    public class SpyAPI {
        private static volatile AbstractAspect spyInstance;
        public static void setSpy(AbstractAspect spy) {
            spyInstance = spy;
        }
        public static void atEnter(String className, String methodInfo, String parametersName, Object[] arg, String codeLine){
            spyInstance.atEnter(className, methodInfo, parametersName, arg, codeLine);
        }
        public static void atExit(String clazzName, String methodInfo, Object returnValue){
            spyInstance.atExit(clazzName, methodInfo, returnValue);
        }
        public static void atExceptionExit(String clazzName, String methodInfo, Throwable throwable){
            spyInstance.atExceptionExit(clazzName, methodInfo, throwable);
        }
    }
其中，`setSpy()`实现装载core包中的Aspect类，`atEnter()`、`atExit()`、`atExceptionExit()`分别在程序进入、退出、异常的时候做不同的方法逻辑修改。
###  4.4 core包实现
因为core包中的类比较多，我们就挑几个比较重要类和方法讲解。首先是我们自己实现的Transformer中的`transform()`方法，这里我们可以对需要修改字节码的类做下过滤，如果修改的类比较多的话，项目启动会及其缓慢，且容易发生栈溢出问题，这是一项需要长期优化的工作，所以我们这里选择只对应用程序本身的类进行修改，简单看下效果即可。`transform()`方法代码如下：
    public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
            if (className.contains("secexample")){
                return BaseAdaptor.get("normal").modifyCode(className, classfileBuffer, spyJarPath, loader);
            }
            else {
                return classfileBuffer;
            }
        }
其中BaseAdaptor也是一个抽象类，我们实际还有一个NormalAdaptor的实现类，这里的逻辑如果有一些设计模式基础的话会更容易理解一些。Adaptor类中主要实现一个`modifyCode()`方法，我们具体来看一下。
    public byte[] modifyCode(String className, byte[] classfileBuffer, String spyJarPath, ClassLoader loader) {
            try {
                    ClassPool classPool = ClassPool.getDefault();
                    // 没有的话爆nopoint
                    classPool.appendClassPath(spyJarPath);
                    // spring等框架有自己的实现的类加载器
                    // 根据双亲委派原则，这ClassPool时候是搜索不到框架类加载器加载的类的，这时候需要把当前ClassLoader加载的类添加到ClassPool中
                    classPool.appendClassPath(new LoaderClassPath(loader));
                    String clazzname = className.replace("/", ".");
                    // CtClass ctClass = classPool.get(clazzname);
                    CtClass ctClass = classPool.makeClass(new ByteArrayInputStream(classfileBuffer));
                    // 排除掉注解，接口，枚举
                    if (!ctClass.isAnnotation() && !ctClass.isInterface() && !ctClass.isEnum()) {
                        // 针对所有函数操作
                        for (CtBehavior ctBehavior : ctClass.getDeclaredMethods()) {
                            addMethodAspect(clazzname, ctBehavior, false);
                        }
                    return ctClass.toBytecode();
                }
                else {
                    return classfileBuffer;
                }
            }
            catch (Exception e){
                e.printStackTrace();
                return classfileBuffer;
            }
        }
这里大部分是javassist的代码，需要注意的有两个地方：第一个是`classPool.appendClassPath(spyJarPath);`如果没有这行代码的话，会有nopoint错误；第二个是`classPool.appendClassPath(new
LoaderClassPath(loader));`，通常我们插入agent的程序是一个Web，一般都有类似于`spring`之类的框架，上文我们也提到这些框架也会有自己的类加载器实现类隔离加载，根据双亲委派原则，ClassPool无法获取这些类，所以需要把当前ClassLoader加载的类添加到ClassPool中。接下来到`addMethodAspect()`方法
        private static void addMethodAspect(String clazzname, CtBehavior ctBehavior, boolean isConstructor)
                throws Exception {
            // 去掉native方法和abtract方法
            if (Modifier.isNative(ctBehavior.getModifiers()) || Modifier.isAbstract(ctBehavior.getModifiers())|| "main".equals(ctBehavior.getName())) {
                return;
            }
            // 方法前增强
            // 如果是基本数据类型的话，传参为Object是不对的，需要转成封装类型
            // 转成封装类型的话非常方便，使用$w就可以，不影响其他的Object类型
            // 方法名称和出入参类型
            String methodName = isConstructor ? ctBehavior.getName() + "#" : ctBehavior.getName();
            String methodInfo = methodName + "|" + ctBehavior.getMethodInfo().getDescriptor();
            // 获取参数名称
            CodeAttribute codeAttribute = ctBehavior.getMethodInfo().getCodeAttribute();
            LocalVariableAttribute attribute = (LocalVariableAttribute) codeAttribute.getAttribute(LocalVariableAttribute.tag);
            CtClass[] parameterTypes = ctBehavior.getParameterTypes();
            StringBuilder parametersName = new StringBuilder();
    //        System.out.println(clazzname);
    //        System.out.println(methodInfo);
            // 静态方法的第一个参数是this
            int pos = Modifier.isStatic(ctBehavior.getModifiers()) ? 0 : 1;
            try {
                for(int i = pos; i  parameters = new LinkedList();
                    for (int i = 0; i < parametersTypes.length; i++) {
                        parameters.add(new Parameter(parametersNames[i], parametersTypes[i], arg[i]));
                    }
                    EnterInfo enterInfo = new EnterInfo(TRANSACTION_ID.get(), className, methodName, parameters, codeLine);
                    System.out.println(JSON.toJSONString(enterInfo));
                }
            } catch (Throwable e) {
                e.printStackTrace();
            }
        }
这里大部分逻辑是做一些参数封装，并打印输出。需要注意的是这里用到了ThreadLocal，需要在我们开始记录调用链的入口处做拦截，生成一个TRANSACTION_ID并将其附加到当前线程上，这个TRANSACTION_ID将在`atExit()`方法做清除。
到这里，我们实现的主要逻辑就已经介绍完毕了。我们为一个springboot项目插桩，简单看下效果。
指定-javaagent参数启动
`java -javaagent:./agent-1.0-SNAPSHOT-jar-with-dependencies.jar -jar
secexample-1.0.jar`
请求效果
存在parameterList字段的记录是进入方法的信息，存在returnType字段的记录是退出方法的信息，我们看到不同请求的traceId也是不一致的，由此可以标识不同请求的调用链。这里由于我们修改的类比较少，形成的调用链比较简单，如果确定好合适的需要修改的类后，则可以看到更详细的调用链条。
###  4.5 写在最后
到这里，本篇文章分析的内容就到尾声了，写这个小demo的时候其实也踩到了很多坑，个别问题花了大量时间解决或是到现在也没能解决，主要是以下几个问题：
  1. 框架适配，不同的框架有不同的入口，需要寻找框架合适的入口做traceId的生成和清除，也是一项长期且复杂的工作。
  2. 分布式追踪，有些服务是使用分布式、微服务的这种架构，这时候需要对分布式框架的出入口做对应的修改，将当前的traceId到框架请求中，这样调用链才能追踪下去。
  3. javassist的一些问题，javassist还是过于简单了一些，某些方法的bug官方到现在也没有修改，比如获取参数信息`attribute.variableName(i)`，经常会有数组越界的问题，在后续版本更新了`attribute.variableNameByIndex(i)`方法后，这种情况依然偶有发生，这跟本地变量表有关系，javassist显然是有些情况没能考虑到，还是ASM更靠谱一些。
  4. 目前实现的这种traceId标记一次请求调用链还是有一些问题的，如果在一次请求中的代码也启动子线程就会导致一部分调用链的确实。对于new Thread()创建线程，我们可以通过InheritableThreadLocal将traceId拷贝到子线程中。但如果使用线程池就比较麻烦了，需要去修改线程池相关的类和方法的字节码。
IAST agent需要实现的更多功能，大家可以参考火线洞态IAST，其在github上开源了一个java版本的agent，还是具有比较良好的借鉴意义的。