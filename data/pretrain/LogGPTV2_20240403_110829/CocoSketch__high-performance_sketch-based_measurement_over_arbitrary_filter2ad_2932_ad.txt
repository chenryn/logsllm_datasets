mented to 𝑓𝑗 + 𝑤. Thus, the update of the value does not depend
on the key when 𝑑 = 1. Based on the Eq. (3), we can derive that
FullKeySizeSrcIPSrcPort19.98.10.268052134.52.73.138030519.98.10.268052034.52.73.1711885634.52.73.13123463Partial KeySizeSrcIP19.98.10.26104134.52.73.1376834.52.73.17856SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Y. Zhang et al.
6 IMPLEMENTATION
We have implemented CocoSketch on four network platforms: x86
CPU, Open vSwitch (OVS) [50], Xilinx FPGA [51], and Barefoot
Tofino [49]. In this section, we describe the implementation of
hardware-friendly CocoSketch on FPGA and Barefoot Tofino and
defer the implementation of the basic CocoSketch on CPU and OVS
to Appendix B. We have open-sourced the artifact on GitHub [75].
6.1 FPGA Platform
FPGA background: FPGAs [51] are based on a matrix of config-
urable logic blocks (CLBs) connected via programmable intercon-
nects. The main resources of FPGA include Slice LUTs, Slice Regis-
ters, and Block RAM Tile. Slice LUTs are lookup tables, which are
used to implement combinational logic. Slice Registers are mainly
used as cache resources. Block RAM Tile is on-chip block storage,
which is the main storage resource.
FPGA implementation: We have implemented the hardware-
friendly version (§4.2) on a Xilinx Alveo U280 [51] with full pipelin-
ing. We divide our algorithm into four main parts: hash computa-
tion, accessing arrays of value, replacement probability calculation,
and accessing arrays of key. In FPGA, accessing one BRAM Tile in
FPGA needs two cycles while other operations such as hash com-
putation and probability calculation take one cycle. We pipeline
all the key/value memory accesses to improve the clock rate. To
replace the key in a bucket with some probability 𝑝 ∈ (0, 1], we
first generate a 32-bit random number 𝑟𝑎𝑛𝑑, then replace the key
recorded only if 𝑟𝑎𝑛𝑑 × 1
𝑝  0.4).
Heavy change detection with different number of keys (Fig-
ures 10(a) -10(b)): Similar to that of heavy hitter detection, with
an increasing number of keys, the CocoSketch maintains its high
fidelity, while the accuracy of other algorithms drops significantly.
Both the recall rate and the precision rate of CocoSketch are higher
than 95%, regardless of the number of tracked partial keys. When
measuring 6 keys, the recall rate of the CocoSketch is around 71%,
62%, 23%, and 70% higher than that of C-Heap, CM-Heap, Elastic
Sketch, and UnivMon, respectively.
1-d HHH detection with different memory (Figure 11): We
consider the source IP hierarchy in bit granularity (32 prefixes + 1
empty key) in 1-d HHH detection. We compare the basic CocoSketch
with R-HHH [39] only, because the throughput of other baselines
is too low to measure these many keys. With only 500KB memory,
the F1 Score of CocoSketch is higher than 99.5%. For R-HHH, even
with 2.5MB memory, its F1 Score stays around 50%. The ARE of
CocoSketch is about 1902× smaller than that of R-HHH.
2-d HHH detection with different memory (Figure 12): We
consider source/destination IP hierarchies in bit granularity (33 ×
33 = 1089 keys) in 2-d HHH detection. With 5MB memory, the F1
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Y. Zhang et al.
(a) F1 Score
(b) ARE
Figure 11: 1-d HHH with different memory constraints.
(a) F1 Score
(b) ARE
Figure 12: 2-d HHH with different memory constraints.
(a) F1 Score on Heavy Hitter
(b) F1 Score on Heavy Change
Figure 13: Experiment results on the MAWI dataset.
Score of CocoSketch is higher than 99.8%. We use more than 5MB
memory for R-HHH in this experiment, since it cannot work with
smaller memory. Even with 25MB memory, its F1 Score is about
16%. The ARE of CocoSketch is about 39843× smaller than that of
R-HHH.
Experiments on MAWI traces (Figure 13(a)-13(b)): We also run
heavy hitters detection and heavy changes detection on MAWI
traces. We find that CocoSketch also maintains high accuracy. When
tracking more than two partial keys, CocoSketch achieves over 90%
F1 Score and is better than all baselines.
(a) Throughput in CPU
(b) 95𝑡ℎ percentile CPU cycles
Figure 14: Processing speed in CPU platform.
7.3 Software Platforms
In this section, we will compare the throughput of the basic CocoS-
ketch (“Ours” in the figures) with other baseline algorithms.
Throughput in CPU (Figure 14(a)): Our memory configuration
in this experiment is the same as that in the heavy hitter detection
(§7.2). We compare single-thread packet processing throughput.
The throughput of both CocoSketch and USS are not affected by
the number of partial keys measured, while the throughput of other
algorithms decreases with the number of partial keys increases.
The throughput of CocoSketch is around 23.7 Mpps/core. When
measuring 6 partial keys, its throughput is around 27.2 times higher
than others.
95𝑡ℎ percentile CPU cycle (Figure 14(b)): Similar to the through-
put in CPU, the CPU cycle of other algorithms increases with the
number of partial keys increasing. When measuring 6 partial keys,
the number of CPU 95𝑡ℎ percentile cycles of CocoSketch is around
18.6, 3.8, 29.2, and 3.0 times smaller than that of SS, Elastic Sketch,
UnivMon, and USS, respectively. Although the throughput of USS
is also not affected by the number of partial keys measured, its
throughput is lower because the auxiliary data structures (hash
table + a variant of double-linked list) still need many memory
accesses.
Throughput in OVS (Figure 15(a)): We find that the throughput
of the CocoSketch increases with the number of threads. With
two or more threads, CocoSketch reaches the speed limit of the
evaluated 40Gbps NIC. We observe that CocoSketch incurs a small
CPU overhead (< 1.8%).
7.4 Hardware Platforms
In this section, we compare the hardware-friendly CocoSketch
(Ours) with Elastic Sketch [78]. Elastic Sketch has multiple ver-
sions designed for different platforms [30], each has a different
performance. We configure the memory of evaluated sketches to
guarantee 90% F1 Scores in heavy hitters detection (via accuracy
experiments).
Throughput in FPGA platform (Figure 15(b)): We show the
throughput of both the hardware-friendly CocoSketch and basic
CocoSketch with 𝑑 = 2 on the FPGA platform, reported by Vi-
vado [79]. After removing the circular dependencies, hardware-
friendly CocoSketch achieves about 5 times higher throughput