tings make a diﬀerence only for UDP and TCP.
We specify the services that are remotely accessi-
ble with the add command. In addition to the tem-
plate name, we need to specify the protocol, port
and the command to execute for each service. In-
stead of specifying a service, Honeyd also recognizes
the keyword proxy that allows us to forward network
connections to a diﬀerent host. The framework ex-
pands the following four variables for both the ser-
vice and the proxy statement: $ipsrc, $ipdst, $sport,
and $dport. Variable expansion allows a service to
adapt its behavior depending on the particular net-
work connection it is handling.
It is also possible
to redirect network probes back to the host that is
doing the probing.
The bind command assigns a template to an IP
address. If no template is assigned to an IP address,
we use the default template. Figure 6 shows an ex-
ample conﬁguration that speciﬁes a routing topology
and two templates. The router template mimics the
network stack of a Cisco 7206 router and is accessible
only via telnet. The web server template runs two
services: a simple web server and a forwarder for
SSH connections. In this case, the forwarder redi-
rects SSH connections back to the connection initia-
tor. A real machine is integrated into the virtual
routing topology at IP address 10.1.0.3.
$ traceroute -n 10.3.0.10
traceroute to 10.3.0.10 (10.3.0.10), 64 hops max
1
2
3
4
10.0.0.1 0.456 ms 0.193 ms
10.2.0.1 46.799 ms 45.541 ms 51.401 ms
10.3.0.1 68.293 ms 69.848 ms 69.878 ms
10.3.0.10 79.876 ms 79.798 ms 79.926 ms
0.93 ms
Figure 7: Using traceroute, we measure a routing path
in the virtual routing topology. The measured latencies
match the conﬁgured ones.
3.6 Logging
The Honeyd framework supports several ways of
logging network activity.
It can create connection
logs that report attempted and completed connec-
tions for all protocols. More usefully, information
can be gathered from the services themselves. Ser-
vice applications can report data to be logged to
Honeyd via stderr. The framework uses syslog to
store the information on the system. In most situ-
ations, we expect that Honeyd runs in conjunction
with a NIDS.
4 Evaluation
This section presents an evaluation of Honeyd’s
ability to create virtual network topologies and to
mimic diﬀerent network stacks as well as its perfor-
mance.
4.1 Fingerprinting
We start Honeyd with a conﬁguration similar to
the one shown in Figure 6 and use traceroute to ﬁnd
the routing path to a virtual host. We notice that
the measured latency is double the latency that we
conﬁgured. This is correct because packets have to
traverse each link twice.
Running Nmap 3.00 against
IP addresses
10.0.0.1 and 10.1.0.2 results in the correct iden-
tiﬁcation of the conﬁgured personalities. Nmap re-
ports that 10.0.0.1 seems to be a Cisco router and
that 10.1.0.2 seems to run NetBSD. Xprobe iden-
tiﬁes 10.0.0.1 as Cisco router and lists a number
of possible operating systems, including NetBSD, for
10.1.0.2.
To fully test if the framework deceives Nmap, we
set up a B-class network populated with virtual hon-
eypots for every ﬁngerprint in Nmap’s ﬁngerprint
Figure 8: The graphs shows the aggregate bandwidth
supported by Honeyd for diﬀerent packet sizes and dif-
ferent destination IP addresses.
ﬁle. After removing duplicates, we found 600 dis-
tinct ﬁngerprints. The honeypots were conﬁgured so
that all but one port was closed; the open port ran
a web server. We then launched Nmap 3.00 against
all conﬁgured IP addresses and checked which oper-
ating systems Nmap identiﬁed. For 555 ﬁngerprints,
Nmap uniquely identiﬁed the operating system sim-
ulated by Honeyd. For 37 ﬁngerprints, Nmap pre-
sented a list of possible choices that included the
simulated personality. Nmap failed to identify the
correct operating system for only eight ﬁngerprints.
This might be a problem of Honeyd, or it could be
due to a badly formed ﬁngerprint database. For ex-
ample, the ﬁngerprint for a SMC Wireless Broad-
band Router is almost identical to the ﬁngerprint for
a Linksys Wireless Broadband Router. When eval-
uating ﬁngerprints, Nmap always prefers the latter
over the former.
Currently available ﬁngerprinting tools are usu-
ally stateless because they neither open TCP con-
nections nor explore the behavior of the TCP state
machine for states other than LISTEN or CLOSE.
There are several areas like congestion control and
fast recovery that are likely to be diﬀerent between
operating systems and are not checked by ﬁnger-
printing tools. An adversary who measures the dif-
ferences in TCP behavior for diﬀerent states across
operating system would notice that they do not dif-
fer in Honeyd and thus be able to detect virtual hon-
eypots.
Another method to detect virtual honeypots is
to analyze their performance in relation to other
hosts. Sending network traﬃc to one virtual hon-
eypot might aﬀect the performance of other virtual
02040608000.10.20.30.40.50.60.70.80.91Fraction of returned traffic400 byte packets to interface400 byte packets to Honeyd400 byte packets to Honeyd (1 hop)400 byte packets to Honeyd (2 hop)020406080Bandwidth in MBit00.10.20.30.40.50.60.70.80.91Fraction of returned traffic800 byte packets to interface800 byte packets to Honeyd800 byte packets to Honeyd (1 hop)800 byte packets to Honeyd (2 hop)number of conﬁgured templates. The benchmark
chooses a random destination address from the con-
ﬁgured templates and sends a TCP SYN segment
to a closed port. We measure how long it takes
for Honeyd to process the packet and generate a
TCP RST segment. The measurement is repeated
80,000 times. Figure 9 shows that for one thousand
templates the processing time is about 0.022 ms per
packet which is equivalent to about 45,000 packets
per second. For 250,000 templates, the processing
time increases to 0.032 ms or about 31,000 packets
per second.
To evaluate Honeyd’s TCP end-to-end perfor-
mance, we create a simple internal echo service.
When a TCP connection has been established, the
service outputs a single line of status information
and then echos all the input it receives. We mea-
sure how many TCP requests Honeyd can support
per second by creating TCP connections from 65536
random source IP addresses in 10.1/16 to 65536
random destination addresses in 10.1/16. To de-
crease the client load, we developed a tool that cre-
ates TCP connections without requiring state on the
client. A request is successful when the client sees its
own data packet echoed by the echo service running
under Honeyd. A successful transaction between a
random client address Cr and a random virtual hon-
eypot Hr requires the following exchange:
1. Cr → Hr: TCP SYN segment
2. Hr → Cr: TCP SYN|ACK segment
3. Cr → Hr: TCP ACK segment
4. Hr → Cr: banner payload
5. Cr → Hr: data payload
6. Cr → Hr: TCP ACK segment (banner)
7. Hr → Cr: TCP ACK segment (data)
8. Hr → Cr: echoed data payload
9. Cr → Hr: TCP RST segment
The client does not close the TCP connection via
a F IN segment as this would require state. Depend-
ing on the load of the Honeyd machine, it is possible
that the banner and echoed data payload may arrive
in the same segment.
Figure 10 shows the results from our TCP per-
formance measurement. We repeated our measure-
ments at least ﬁve times and show the average re-
sult including standard deviation. The upper graph
Figure 9: The graph shows the per-packet process-
ing time depending on the number of virtual honey-
pots. For one thousand randomly chosen destination
addresses, the processing time is about 0.022 ms per
packet. For 250,000 destination addresses, it increases
to about 0.032 ms.
honeypots but would not aﬀect the performance of
a real host. In the following section, we present a
performance analysis of Honeyd.
4.2 Performance
We analyze Honeyd’s performance on a 1.1 GHz
Pentium III over an idle 100 MBit/s network. To de-
termine the aggregate bandwidth supported by Hon-
eyd, we conﬁgure it to route the 10/8 network and
measure its response rate to ICMP echo requests
sent to IP addresses at diﬀerent depths within a vir-
tual routing topology. To get a base of comparison,
we ﬁrst send ICMP echo requests to the IP address
of the Honeyd host because the operating system
responds to these requests directly. We then send
ICMP echo requests to virtual IP addresses at dif-
ferent depths of the virtual routing topology.
Figure 8 shows the fraction of returned ICMP
echo replies for diﬀerent request rates. The upper
graph shows the results for sending 400 byte ICMP
echo request packets. We see that Honeyd starts
dropping reply packets at a bandwidth of 30 MBit/s.
For packets sent to Honeyd’s entry router, we mea-
sure a 10% reply packet loss. For packets sent to
IP addresses deeper in the routing topology, the loss
of reply packets increases to up to 30%. The lower
graph shows the results for sending 800 byte ICMP
echo request packets. Due to the larger packet size,
the rate of packets is reduced by half and we see
that for any destination IP address, the packet loss
is only up to 10%.
To understand how Honeyd’s performance de-
pends on the number of conﬁgured honeypots, we
use a micro-benchmark that measures how the pro-
cessing time per packet changes with an increasing
0.005.00·1041.00·1051.50·1052.00·1052.50·105Number of configured honeypots00.0050.010.0150.020.0250.030.0350.04Processing time per packet in mssecurity.
5.1 Network Decoys
The traditional role of a honeypot is that of a
network decoy. Our framework can be used to in-
strument the unallocated addresses of a production
network with virtual honeypots. Adversaries that
scan the production network can potentially be con-
fused and deterred by the virtual honeypots. In con-
junction with a NIDS, the resulting network traﬃc
may help in getting early warning of attacks.
5.2 Detecting and Countering Worms
Honeypots are ideally suited to intercept traﬃc
from adversaries that randomly scan the network.
This is especially true for Internet worms that use
some form of random scanning for new targets [25],
e.g. Blaster [5], Code Red [15], Nimda [4], Slam-
mer [16], etc.
In this section, we show how a vir-
tual honeypot deployment can be used to detect
new worms and how to launch active countermea-
sures against infected machines once a worm has
been identiﬁed.
To intercept probes from worms, we instrument
virtual honeypots on unallocated network addresses.
The probability of receiving a probe depends on the
number of infected machines i, the worm propaga-
tion chance and the number of deployed honeypots
h. The worm propagation chance depends on the
worm propagation algorithm, the number of vulner-
able hosts and the size of the address space. In gen-
eral, the larger our honeypot deployment the earlier
one of the honeypots receives a worm probe.
To detect new worms, we can use the Honeyd
framework in two diﬀerent ways. We may deploy
a large number of virtual honeypots as gateways in
front of a smaller number of high-interaction hon-
eypots. Honeyd instruments the virtual honeypots.
It forwards only TCP connections that have been
established and only UDP packets that carry a pay-
load that fail to match a known ﬁngerprint. In such
a setting, Honeyd shields the high-interaction hon-
eypots from uninteresting scanning or backscatter
activity. A high-interaction honeypot like ReVirt [7]
is used to detect compromises or unusual network
activity. Using the automated NIDS signature gen-
eration proposed by Kreibich et al. [14], we can then
block the detected worm or exploit at the network
border. The eﬀectiveness of this approach has been
analyzed by Moore et al. [17]. To improve it, we can
Figure 10: The two graphs show the number of TCP
transactions per second that Honeyd can support for
diﬀerent conﬁgurations. The upper graph shows the
performance when using the default template for all
honeypots and when using an individual template for
each honeypot. Performance decreases slightly when
each of the 65K honeypots is conﬁgured individually.
The lower graph shows the performance for contacting
honeypots at diﬀerent levels of the routing topology.
Performance decreases for honeypots with higher la-
tency.
shows the performance when using the default tem-
plate for all honeypots compared to the performance
when using an individual template for each honey-
pot. Performance decreases slightly when each of
the 65K honeypots is conﬁgured individually.
In
both cases, Honeyd is able to sustain over two thou-
sand TCP transactions per second. The lower graph
shows the performance for contacting honeypots at
diﬀerent levels of the routing topology. The perfor-
mance decreases most noticeably for honeypots that
are three hops away from the sender. We do not
have a convincing explanation for the drop in per-
formance around six hundred requests per second.
Our measurements show that a 1.1 GHz Pen-
tium III can simulate thousands of virtual honey-
pots. However, the performance depends on the
complexity and number of simulated services avail-
able for each honeypot. The setup for studying
spammers described in Section 5.3 simulates two C-
class networks on a 666 MHz Pentium III.
5 Applications
In this section, we describe how the Honeyd
framework can be used in diﬀerent areas of system
05001000150020002500300000.10.20.30.40.50.60.70.80.911.1Fraction of successful requestsDefault template for 65k hostsIndividual templates for 65k hosts050010001500200025003000TCP requests per second00.10.20.30.40.50.60.70.80.911.1Fraction of successful requestsDefault template for 256 hosts (1 hop)Default template for 256 hosts (2 hops)Default template for 256 hosts (3 hops)Figure 11: The graphs show the simulated worm propagation when immunizing infected hosts that connect to
a virtual honeypot. The left graph shows the propagation if the virtual honeypots are activated one hour after
the worm starts spreading. The right graph shows the propagation if the honeypots are activated after twenty
minutes. The ﬁrst row in each graph shows the result when no honeypots have been deployed, the second row
shows the results for four thousand honeypots, the third for sixty ﬁve thousand honeypots and the fourth for
262,000 honeypots.
conﬁgure Honeyd to replay packets to several high-
interaction honeypots that run diﬀerent operating
systems and software versions.
On the other hand, we can use Honeyd’s subsys-
tem support to expose regular UNIX applications
like OpenSSH to worms. This solution is limiting
as we are restricted to detecting worms only for the
operating system that is running the framework and
most worms target Microsoft Windows, not UNIX.
Moore et al. show that containing worms is not
practical on an Internet scale unless a large frac-
tion of the Internet cooperates in the containment
eﬀort [17]. However, with the Honeyd framework, it