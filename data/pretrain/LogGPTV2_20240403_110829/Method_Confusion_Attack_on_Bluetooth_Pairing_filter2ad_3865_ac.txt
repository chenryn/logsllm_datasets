I now validates the received EMR successfully, which also
completes the pairing between I and MR.
Note that M only completes the LTK Calculation and
Validation stage if both victims have successfully completed
the Authentication stage. If one victim does not complete the
Authentication stage, the pairing procedures are eventually
terminated by a timeout. Through that, the attacker prevents a
so-called one-sided pairing. This behavior may be altered as
an alternative attack vector as described in Section III-D.
As a result, I and MR establish the same LTK. The
same holds for MI and R. All future communication is
encrypted using keys derived from those LTKs. Consequently,
M is able to relay all communication between I and R by
decrypting the received messages and forwarding them after
re-encryption with the respective peer’s LTK. Therefore, M
is able to eavesdrop on the cleartext of all messages which
are exchanged over the encrypted channel between I and R.
I and R are not aware of the attacker’s presence.
C. Numeric on Passkey
NoP is similar to PoN. The largest difference is that in
NoP I and MR perform NC, while R and MI perform PE. In
consequence, PoN and NoP also differ in their implementation
of the LTK Generation and Validation stage.
MR performs NC-based pairing with I until the point where
V a is displayed at I and known to MR. Simultaneously,
MI performs PE-based pairing with R until the start of the
Authentication stage.
As soon as both pairing couples complete these steps, the
V a calculated by MR is set as passkey at MI. Then, the PE
between MI and R is continued until completion.
When the user conﬁrms the NC dialogue at I, the message
Ea is sent to MR where it is discarded. Then, MI calculates
its conﬁrmation message EMI , which is sent to R after PE has
completed. R checks the received conﬁrmation message suc-
cessfully, calculates and replies with Eb, thereby completing
the pairing between MI and R.
When MI receives Eb it discards the message, whereupon
MR calculates EMR and sends it to I. I receives the conﬁr-
mation message and successfully validates it, upon which also
the pairing between I and MR is completed.
As with PoN, this allows the MitM to relay, eavesdrop and
manipulate all further communication between I and R.
D. Alternative One-sided Pairing
If a user enters and conﬁrms the passkey but does not
conﬁrm the NC, our original description of the attack would
abort through a timeout eventually. Sometimes, though, it is
a sufﬁcient goal for an attacker to establish a connection to
one of the victim devices; for instance, if the attacker aims to
extract information like a phone book, ﬁtness tracking data,
or attempts to modify the target bank account settings of a
point-of-sales terminal. For such scenarios, the attack can be
amended by not aborting the pairing. We call this One-Sided
Method Confusion Attack.
IV. IMPLEMENTATION
To prove the real-world viability of the attack, we designed
an end-to-end attack framework. The framework initializes all
devices and orchestrates its three components: 1) a Method
Confusion Attack implementation, 2) a jammer, and 3) in case
LE Privacy is enabled, also an address sniffer.
A. BThack
We implemented the Method Confusion Attack in our Blue-
tooth MitM platform BThack. BThack is based on BTstack [8],
a well-established BLE stack offered by Bluekitchen GmbH.
BThack allows its applications to modify the communication
in various ways.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:14 UTC from IEEE Xplore.  Restrictions apply. 
1337
We combined it with USB Cambridge Silicon Radio, Ltd.,
Bluetooth Dongles (CSR dongles), which operate in HCI
mode. Since BTstack is a commonly used commercial open-
source product, we assume it to be an industry-proven and
speciﬁcation-compliant implementation of BLE.
In order to reduce the chances of unintended side-effects,
the codebase and control ﬂow of BTstack were altered as little
as possible. This also assures simpliﬁed maintenance in case
of upstream updates. To gain complete control over the pairing
process, BThack extends the state machines of BTstack with
callbacks. A BThack application registers custom callbacks
to interrupt the control ﬂow of the state machine at certain
points. By virtue of BTstack’s single-threaded design, the stack
then suspends execution and allows memory modiﬁcation
before eventually resuming. This simpliﬁes, for example, the
synchronization of our MitM Initiator and Responder.
B. BThack MitM Application
The BThack MitM application consists of two memory-
independent processes, each containing its independent BLE
stack. Each of the processes communicates with its individual
USB-BLE device (CSR dongle) and with each other using
Inter Process Communication (IPC). One of the processes
takes the role of a Responder (R), while the other acts as
Initiator (I). Through IPC, they are able to synchronize the
state machines of both virtual devices and relay messages.
The PoN attack as seen in Fig. 6 was implemented as
follows. The ﬁrst victim device (I) connects to our MitM
Responder (MR). This, in turn, triggers the MitM Initiator
(MI) to connect to the device originally intended by the victim
(R). At the passkey generation of MR, a callback is placed.
When triggered, the callback waits for MI and R to ﬁnish
NC and sets V a as passkey in MR. MI waits for the signal
of MR that PE was successful before it eventually conﬁrms
NC. After pairing is completed, the IPC is used to forward
the communication between I and R.
NoP was implemented analogously with exchanged roles of
Initiator and Responder.
C. Selective Jamming
As preparation for the Method Confusion Attack, the victim
Initiator I has to establish a connection to our attack device
MR instead of R. We, therefore, have to prevent R’s adver-
tisement messages from reaching I, for instance by jamming
them. At the same time, we have to avoid jamming the other
device’s, or even our own (MR’s), advertisements. To assure
that, we perform a selective jamming of advertisements.
To perform Selective Jamming, we have to identify adver-
tisement packets on-air and selectively induce interference. An
interference message needs to be sent before the packet has
ﬁnished transmission. Therefore, a low latency implementa-
tion is required. To fulﬁll that requirement, we adapted the
work of Cayre et al. [9], which uses a customized ﬁrmware
[10] for the nrf51 BLE chip [11]. The ﬁrmware abuses the
address matching functionality of the nrf51 [11, 17.1.13]. The
(original) address matching feature allows to conﬁgure a 4-
byte pattern that, if observed, triggers the packet reception
process. The designated use of this functionality is to ﬁlter
incoming packets for their header address to provide selective
reception. The custom ﬁrmware instead utilizes this feature to
scan for an arbitrary pattern on-air. Further, it conﬁgures the
radio to stop any packet reception after 0 bytes and switch into
transmission mode, transmitting a dummy packet. The caused
interferences of two simultaneous accesses to the medium
then alters the payload and causes a checksum mismatch
of the advertisement packet;
to be
discarded upon reception. All of these actions are performed
in the radio’s hardware without CPU involvement keeping the
latency as low as possible.
this causes the packet
Bluetooth scrambles payload data with a standardized pseu-
dorandom sequence before transmission [1, Vol. 3 Part D
1.1.2.2]. The offset of our matching pattern has to be known to
pre-calculate the scrambling for it. The matching pattern can,
therefore, be any 4-byte value that has a predictable occurrence
and position in the target’s advertisement payload.
If LE Privacy is not enabled, the advertisement address is
always ﬁxed to the beginning of the payload. In that case,
the matching pattern is the ﬁrst 4 bytes of the advertisement
address.
Otherwise, the advertisement address is variable and we use
the Local Name of the device as matching pattern. While the
packet layout is variable, it is typically consistent between de-
vices of the same model / implementation. We can, therefore,
analyze one advertisement packet of R to obtain the position
of the Local Name or alternatively guess it. The matching
pattern is then set to the ﬁrst 4 bytes of the Local Name. In
order to avoid jamming our own advertisements of MR, we
move the Local Name entry to a different position in their
payloads by placing a data entry before it.
Our hardware platform uses three micro:bit development
boards, each hosting a nrf51 radio chip, to observe and jam
all three advertisement channels simultaneously.
D. Interaction of the Components
The address of the victim is typically static. In fact, multiple
studies have shown that LE Privacy mode is seldomly used
among peripheral devices [12, 13, 14]. In that case, the jammer
is conﬁgured to intercept the packets based on R’s address.
However, if LE Privacy is enabled, R’s Local Name is used
for jamming. In that case, the framework also initializes a
sniffer with disabled CRC check to keep track of the victim
Responder’s address. It constantly scans for R as it comes
online and advertises.
Simultaneously to the jamming,
the BThack MitM ap-
plication is started to advertise under R’s Local Name (cf.
Section IV-B).
As soon as the BThack MitM application reports a connec-
tion attempt (from I to MR), the jammer is halted. Then, the
current address of R is passed from the sniffer to the MitM
application which then initiates a connection between MI and
R. The attack subsequently completes as described above (cf.
Section IV-B).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:14 UTC from IEEE Xplore.  Restrictions apply. 
1338
V. EVALUATION
We evaluated our end-to-end PoC in four steps. We con-
ducted a pre-test to validate the jamming functionality isolated
from the actual Method Confusion Attack. Then, we conducted
a full end-to-end lab-test to prove that the Method Confusion
Attack is capable of gaining a MitM position among custom
devices. Subsequently, we showed that our implementation
also works with off-the-shelf devices. Finally, we conducted
a performance evaluation to measure throughput and delay.
For all tests, we used our jamming implementation with three
micro:bit devices from Section IV-C.
For the lab test, we implemented a basic BTstack application
running on CSR dongles. The Responder dongle R,
the
Initiator dongle I, and the malicious device M were placed so
that the three devices formed a triangle with a right angle at R;
the distance between I and R was 2 m. This way, high-quality
reception for all devices was guaranteed. Through these steps,
we were able to accommodate for the weak antenna setup
of our jamming application (micro:bits). With a high-power
transceiver and better antenna the distance and constellation
of the devices would be more ﬂexible.
A. Testing Jamming of Bluetooth Advertisements
We validated the jamming functionality by conducting a se-
ries of repeatable tests. For that, we placed R into discoverable
mode and attempted pairing from R while our jamming system
was active. We tested jamming based on the known device
address (LE Privacy disabled) and also on its Local Name (LE
Privacy enabled) for a timespan of 10 minutes each (repeated
3 times). In all of our tests no advertisement messages from
R reached I.
B. End-to-End Lab Test
In our full end-to-end test, we conﬁrmed that our imple-
mentation of the Method Confusion Attack is capable of
compromising a BLE connection that was established using
LESC.
Since the Method Confusion Attack has two variations, we
test two scenarios. The only difference between both test cases
are the IOCaps of R.
• Scenario 1: Responder’s IOCaps were DisplayYesNo;
Initiator’s IOCaps were DisplayKeyboard; attack scheme
was PoN
• Scenario 2: Responder’s IOCaps were KeyboardOnly;
Initiator’s IOCaps were DisplayKeyboard; attack scheme
was NoP
The experimental procedure was the following: R was
placed into advertising mode and I scanned for available
devices. When I detected R’s name among the scan results,
it attempted a connection to that device. When a connection
was established, pairing was requested.
When one of the devices was displaying a 6-digit value,
while the other prompted a passkey ﬁeld, we transferred and
conﬁrmed the value (cf. Section VI-A). As soon as pairing
resulted in an encrypted connection, secret information was
exchanged over that channel.
In both scenarios, the attacker used the end-to-end attack
framework (cf. Section IV) to target the pairing attempts.
Both scenario tests succeeded, meaning that the attacker
was in both cases able to establish a paired MitM position.
Further,
the attacker was able to eavesdrop on the secret
information exchanged between the victims. This was veriﬁed
by comparing the eavesdropped data with the cleartext that
was legitimately decrypted by the victims.
C. Production-Device Evaluation
We also evaluated the attack with openly available off-the-
shelf BLE-capable devices to verify the attack in real-world
scenarios. The tested devices are likely to be used by regular
users and may pose, if compromised, an open attack surface
and critical data leak.
Again, we tested both the NoP and the PoN variant. In both
scenarios, the attacked Initiators were a OnePlus 7 Pro with
Android 9.0, an iPhone 11 with iOS 13.4.1 and a Thinkpad
W540 with Windows 10, all providing DisplayKeyboard. The
two attacked Responder devices were:
• Samsung Galaxy Watch 42mm: smartwatch running Tizen
Wearable OS 4.0; IOCaps were DisplayKeyboard; pairs
with a smartphone using NC; attack scheme was PoN
• Reiner SCT tanJack Bluetooth: wireless TAN-Generator,
IOCaps were KeyboardOnly; pairs with a smartphone
using PE; attack scheme was NoP
Otherwise, the experimental procedure was equivalent to the
lab-test.
The attacker was able to complete pairing with the victim
devices and achieve a MitM position in all tested cases. The
successful attacks proved the viability of Method Confusion
with openly available unmodiﬁed devices.
D. Performance Evaluation
After a successful Method Confusion Attack, the MitM acts
as additional hop between the attacked devices. To estimate the
effects on network performance, we measured throughput and
Round Trip Time (RTT).
Typically, BLE applications communicate over an abstrac-
tion layer called Generic Attribute Proﬁle (GATT) which can
guarantee a reliable, ordered communication [1, Vol. 3 Part
G 1.1]. We implemented a basic GATT-based application
in which both devices constantly transmit packets of ﬁxed
size. Upon reception, the packets are validated and counted.
To measure the RTT, the application periodically sends a
probing message that is acknowledged upon reception. The
time difference in transmission of the probe and reception of
the response is the RTT.
We evaluated the connection without MitM as well as
with MitM in place (Fig. 7). Overall, the connection quality
achieved appears to be sufﬁcient for most applications. For
instance, a VoIP call requires 21 kbps (throughput) and should
for optimal quality not exceed an (RTT) of 300 ms [15].
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:14 UTC from IEEE Xplore.  Restrictions apply. 
1339
Fig. 7. Average Performance of a GATT Measurement Application.
VI. ROLE OF THE USER IN THE ATTACK
(a) Android 10.0 - Numeric Com-
parison.
A. User Model
In the course of a Method Confusion Attack, one of the
victim devices displays a 6-digit number and expects the user
to compare and conﬁrm that number. Simultaneously, the other
victim device expects the user to enter a 6-digit number.
The Bluetooth speciﬁcation does not provide any rules
for these interactions. In fact, the design and wording on
how expectations are communicated to the user vary between
implementations. In Fig. 8, we collected a number of pairing
dialogues from popular off-the-shelf BLE products.
For example, in a pairing attempt that is under attack of