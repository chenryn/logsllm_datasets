# Ocasta: Clustering Configuration Settings for Error Recovery

**Authors:** Zhen Huang and David Lie  
**Conference:** 2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
Effective machine-aided diagnosis and repair of configuration errors remains a challenge for computer systems designers. Most existing literature focuses on errors that can be attributed to a single erroneous configuration setting. However, recent studies have shown that a significant number of configuration errors require fixing multiple settings simultaneously. To address this limitation, Ocasta statistically clusters dependent configuration settings based on the application's access patterns to its configuration settings. It then uses these clusters to fix configuration errors involving multiple settings. Ocasta treats applications as black-boxes, relying solely on the ability to observe application accesses to their configuration settings.

We collected usage traces from 24 Linux and 5 Windows desktop computers and found that Ocasta correctly identifies clusters with 88.6% accuracy. To demonstrate Ocasta's effectiveness, we evaluated it on 16 real-world configuration errors in 11 Linux and Windows applications. Ocasta successfully repaired all evaluated configuration errors in an average of 11 minutes, requiring users to review an average of 3 screenshots to confirm the error was fixed. A user study showed that Ocasta is easy to use for both expert and non-expert users and is more efficient than manual troubleshooting.

**Keywords:** Fault diagnosis, System recovery, Clustering algorithms, Software tools

## I. Introduction
Configuration errors are a leading cause of failures and unavailability in desktop applications [1]. Fixing such errors typically involves two steps: identifying the configuration settings causing the error and replacing the faulty settings with values that resolve the issue.

To facilitate the first step, various approaches have been proposed, including pinpointing when the error first appeared [2], using statistical anomaly detection to identify abnormal settings [3, 4, 5], and employing white-box dynamic analysis to find specific settings that cause the application to execute an erroneous code path [6]. While the latter two approaches attempt to identify the configuration setting causing the error, they only work if the error results from a single setting. This is a significant limitation, as a recent study found that a substantial number (14.9%-34.7%) of configuration errors require changing multiple settings [7].

For example, in Microsoft Word, the "Max Display" setting controls the number of recently accessed documents stored in the "Item" settings. If a user reduces the maximum number of recently accessed documents, Word not only updates the "Max Display" setting but also deletes excess "Item" settings. To undo this change, both the "Max Display" and the deleted "Item" settings must be restored.

In this paper, we present a novel technique that uses hierarchical agglomerative clustering [8] to identify related configuration settings, relying only on the ability to observe application accesses to its configuration store. This makes the technique language, binary, and OS independent. We implemented this technique in Ocasta, which treats applications as black-boxes and can work across a wide range of applications and environments.

To evaluate Ocasta, we collected application usage traces from both Windows and Linux machines over periods ranging from 18 to 76 days. Using these traces, Ocasta identified clusters of related configuration settings in 11 different applications across four OS flavors. Our evaluation shows that Ocasta accurately identifies 88.6% of the clusters of related settings.

We further developed a GUI-based configuration error repair tool that, with user input, uses Ocasta's clustering information to automatically search for and fix settings causing configuration errors. The tool requires a GUI-action script that triggers the error and then searches historical values of the clustered settings for a fix. After each search, a screenshot is recorded, and the user selects the one that indicates the error is resolved.

While Ocasta's proof-of-concept tool can fix the symptoms of all our configuration errors, it cannot guarantee that the selected fix does not introduce new hidden errors or fix errors without visible symptoms. Studies show that even trained humans may fail to completely fix configuration errors, create new ones, or resort to resetting the application to its defaults [9]. Our evaluation demonstrates that Ocasta's method for inferring related configuration settings broadens the range of errors that automated tools can handle, providing valuable clustering information even when automated tools fail.

Our contributions include:
- Characterizing the types and reasons for relationships between configuration settings by manually inspecting over 500 settings across 11 applications.
- Designing and implementing Ocasta, which uses black-box statistical clustering to identify related settings. Ocasta has been implemented and evaluated on both Linux and Windows using data from real users.
- Evaluating the usability of Ocasta's clustering with a proof-of-concept tool that automatically searches historical values of clusters for a fix. We demonstrate its effectiveness against 16 real-world configuration errors and provide a user study showing the tool's effectiveness.

The rest of the paper is organized as follows: Section II defines the problem, Section III describes Ocasta's high-level design, Section IV provides implementation details, Section V explains how we collected our traces, Section VI evaluates Ocasta, and Section VII discusses related work. We conclude in Section VIII.

## II. Problem Definition
Similar to relationships between program variables [10], relationships between configuration settings are common but often undocumented. We describe three representative examples of related settings:

### Example 1: Microsoft Word
- **Max Display**: Determines the number of recently accessed documents.
- **Item 1 to Item N**: Store the paths to the recently accessed documents.

### Example 2: Acrobat Reader
- **InlineAutoComplete**: Enables/disables the auto-complete feature.
- **RecordNewEntries**: Specifies whether to record user-entered data.
- **ShowDropDown**: Controls the display of previously recorded data in a dropdown box.

### Example 3: Evolution Mail
- **mark_seen**: Marks an email as seen after opening.
- **mark_seen_timeout**: Specifies the time interval before marking an email as seen.

These examples illustrate that related settings exist when one or more settings control the validity or meaning of another group of settings. Applications and users tend to update related settings together, while independent settings are less likely to be changed simultaneously. Ocasta identifies these relationships by observing access correlations and using hierarchical agglomerative clustering to group related settings.

### Limitations
Ocasta has several limitations:
- Independent settings may be accidentally updated simultaneously, leading to incorrect clustering.
- Partial updates of dependent settings may be legal, causing Ocasta to incorrectly infer separate clusters.
- Ocasta's performance depends on the quality and quantity of available data.
- Ocasta must intercept and record accesses to individual keys where the application stores its persistent settings. We have implemented this for OS-provided key-value stores like the Windows Registry and GConf in Linux, and for common file formats like XML, JSON, PostScript, INI, and plain text.

Ocasta's proof-of-concept error repair tool has additional limitations:
- A fix must exist in the application's recorded history.
- The error must occur deterministically.
- The user must be able to identify a fixed application from its screenshot, making the error visually observable.

## III. Overview

### A. Clustering Configuration Settings
Ocasta improves configuration troubleshooting and repair by heuristically identifying clusters of related settings. It abstracts configurations into key-value pairs, with the key being the name of the setting and the value being its content. Many application configurations naturally fit this abstraction.

Accurate clustering is crucial. Undersized clusters may miss necessary settings, while oversized clusters can lead to extraneous changes. Ocasta leverages the property that related settings are more likely to be modified together than unrelated ones.

By clustering related settings, Ocasta provides a more effective approach to diagnosing and repairing configuration errors, especially those involving multiple settings.