a = 0.10
a = 0.20
a = 0.30
106
s
m
r
a
l
A
l
a
t
o
T
105
∞
22
21
20
2−1
2−2
2−3
2−4
Decay half-life (seconds)
500
400
300
200
100
s
e
v
i
t
a
g
e
N
e
s
l
a
F
0
2−5
105.5
a = 0
a = 0.10
a = 0.20
a = 0.30
s
m
r
a
l
A
105
l
a
t
o
T
104.5
104
∞
22
21
20
2−1
2−2
2−3
2−4
Decay half-life (seconds)
500
400
300
200
100
s
e
v
i
t
a
g
e
N
e
s
l
a
F
0
2−5
Fig. 5: Total number of alarms and false negatives on TC Engagement 3 and Engagement 4 datasets using different attenuation and decay rates. The scale for total number
of alarms is on the left, while the false negative scale is on the right. The total number of true positives are 126 and 425. The total number of alarms without attenuation
and decay are 1.69 million and 0.59 million respectively, and they reduce by 10x with tag attenuation and decay.
Scenario Graph Size Reduction
Figure 4 summarizes the reduction in scenario graph sizes achieved
using tag attenuation and decay. These graphs were generated as
described in Section V.B: starting from the primary alarm, and
retaining only nodes with data integrity below 0.5. The geometric
mean of the reduction achieved across all the attacks in our dataset
is about 35. No relevant nodes were missed.
Note that in some cases, the resulting graphs are still large,
especially in the case of Dropbear, with about 2K nodes. This is
because Dropbear is an SSH server that continues to be used for
the duration of the dataset, and any of its actions during this period
could actually be malicious. However, in realistic settings, the
analyst would want to construct the scenario graph soon after an
alarm is triggered. We observed that if the graph is generated within
10 minutes of the attack, our approach would indeed generate a
compact graph consisting of just 20 nodes.
SLEUTH [30], our previous work, also achieves alarm reduction
using two subject tags, called code- and data-trustworthiness tags.
By triggering only on code-trustworthiness, it reduced false alarms
by two orders of magnitude on TC Engagement 1 dataset. However,
this strategy causes it to miss half the attacks in Engagement 3
and 4, including the Firefox backdoor, user-level rootkit, kernel
malware, dropbear, and some of the malicious HTTP requests.
Alarm Reduction
To properly evaluate our approach of alarm reduction, we calculated
the alarm reduction achieved on an hourly basis, and computed
its geometric mean. This was done individually for each alarm
type, as well as the total number of alarms. These results are shown
in Table V. Across all datasets and all alarm types, our approach
achieved an average of 11.4x reduction in the number of alarms.
Note that MORSE’s F ileExec, MemExec, ChP erm,
Corrupt and DataLeak policies match those of SLEUTH but for
the use of tag attenuation and decay. Consequently, SLEUTH’s alarm
counts correspond to the “Base” column in Table V. Thus, MORSE
generates an order of magnitude fewer alarms than SLEUTH.
False Negatives
High values for tag attenuation and/or decay can lead to false
negatives. To assess this potential, we plot the total alarm numbers
and the false negatives (based on the ground truth) in Fig. 5. Alarm
number curves are sloping down, with the y-scale shown on the
left of each chart. False negative curves slope upward, and their
scale is shown on the right side of the chart.
From the charts, it is clear that false negatives are generally absent
at attenuation rates of 0.2 or lower, but they increase afterwards.
At rates above 0.25, if low integrity data from the internet is written
to a file after passing through a pipe, the file will have high data
integrity (i.e., ≥ 0.5). This behavior, seen with some services such
as ssh, causes attacks to be missed. These results support our initial
choice of 0.2 for attenuation rate. If additional margin of safety is
desired, it can be reduced to 0.1. While this increases alarms, we
found that the scenario graph sizes are unchanged from Fig. 4.
At our chosen attenuation rate, false negatives due to decay don’t
increase significantly until we reach decay rates at least 4x faster
than the 250ms we suggested earlier. These results hold for both
datasets we have used in our evaluation. Although not shown here
due to space limitations, this observation holds even if we separate
the datasets further based on the OS.
Summary of Effectiveness
For the attenuation and decay rate selected at the beginning of
this section, we achieve an 11.4x reduction in alarms without
experiencing false negatives. We also achieve a 35x reduction in
scenario graph size without false negatives. The decay rate could be
increased by a further 4x before experiencing false negatives, while
the attenuation rate could be decreased by 2x without changing
scenario graph sizes, thus providing significant margins of safety.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:08 UTC from IEEE Xplore.  Restrictions apply. 
1148
Data
set
L-3
L-4
F-3
F-4
Size on
disk (GB)
23.79
2.27
1.18
1.26
Number of
attacks
Graph generation
time/attack (sec.)
3
4
4
2
0.043
0.053
0.030
0.220
Table VI: Runtime for scenario graph generation.
Data
set
L-3
L-4
F-3
F-4
Total
Total
events
714 M
36.5 M
21 M
37.2 M
808.7 M
File size
on disk (GB)
23.79
2.27
1.18
1.26
28.5
Memory
Usage (GB)
0.49
0.11
0.19
0.11
0.90
Table VII: Main memory size of dependence graphs.
C. Runtime Performance
Table VI
shows performance related to scenario graph
reconstruction. The second column shows on-disk sizes of data sets
in compressed Apache Avro binary format. The third column shows
the number of attacks in each dataset, while the fourth shows the
average time to generate the scenario graphs for these attacks. Even
though the data set sizes range from a few to tens of GBs, scenario
graph generation is very fast, taking on average 69 milliseconds per
attack across the 13 attack instances in our dataset. The principal
source of this speed is the compact in-memory dependence graph
representation used in our implementation. Specifically, we have
developed (a) a versioned graph representation that is acyclic, and
(b) a notion of full dependence preservation [31] that eliminates
the need to store the vast majority of events, while guaranteeing
accurate forensic analysis results. Table VII shows the resulting
in-memory size of the dependence graph for each dataset. Memory
usage varies between 0.7 and 9 bytes per event across these datasets,
with the overall average of 1.12 bytes of memory per event.
Construction of the dependence graph from Apache Avro format
is fast, taking about a second per 100K events. This is 10x to 100x
faster than the rate of data generation, enabling MORSE to operate
in real-time. Consumption from our CSR format is even faster,
operating at about 1M events per second.
D. Analysis of Evasion Attacks
A natural question is whether attackers can evade detection by
abusing our mechanisms for mitigating dependence explosion. Tag
decay can be abused by artificially introducing delays between the
time a subject reads input and the time it writes it. Tag attenuation
can be abused by making many intermediate copies of data. Both
abuses are easy if performed by an attacker-controlled process.
However, our system is designed to tag such processes with a suspi-
cious subject tag. Since tag decay and attenuation are not applied to
suspect subjects, no evasion is possible for such subjects. To success-
fully abuse our tag explosion mitigation techniques, attackers need
to control or co-opt processes with benign or susp env subject tags.
Controlling benign processes. The primary means for attackers to
control a process is by having it execute their code. This requires
the use of a load, exec or inject operation shown in Table II. Since
these operations change the subject to be suspicious,, they don’t
serve the goal of controlling a process with benign subject tag.
Command interpreters such as python and bash can use read
operations to load scripts, and this may provide an evasion path
1149
105
104
s
e
d
o
N
f
o
r
e
b
m
u
N
l
a
t
o
T
111,082
3,593
2,833
Naive
Propagation
Without Using
env Tag
Using
env Tag
Fig. 6: Size of the scenario graph withou decay or attenuation, without using env tag
(i.e., no decay or attenuation for suspect environment subjects) and using env tag.
for an attacker. Our system treats read operations as loads for