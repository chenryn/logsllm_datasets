implementors, we now have to explain why the observed
anomaly arises in this case. Since the relevant bits and val-
ues are different for accessing different parts of memory,
looking up a random element of T 00 will result in a some-
what different power signal than looking up a random ele-
ment of T 01. Let s0(t) be the average power signal of the
encryption when T 00 is looked up at a random index and let
s1(t) be the average signal in the case of a random lookup
in T 01. Let m(i) be the number of distinct values of R[i]
with MSB = 1, for which y will be in T 01, i.e. ([i] +
2*R[i]) mod (512) will be in the range [256,511]. Corre-
spondingly let n(i) be the number of bytes R[i] with MSB
= 0, for which y will be in T 01.
We now claim that the observed correlation of the sig-
nals with the MSB of R[i] will be proportional to (m(i)-
n(i))*(s0(t)-s1(t)), i.e., the observed correlation will be pro-
portional to the quantity (m(i)-n(i)). This claim is quite easy
to prove, once the reader observes a symmetry property of
T 0 lookups in COMP128:
independent of the key [i],
exactly half of the R[i] result in values of y which lie in
T 00 and the other half in T 01. Moreover, the values of
R[i] which fall into T 00 and T 01 are contiguous modulo
256. The results of these two different contiguous equipar-
titions of the space of 256 possible values of R[i], based on
MSB and table accessed is depicted in Figure 5. From this it
can be observed that the average signal for MSB=0 should
be proportional to (m(i)*s0(t) + n(i)*s1(t)). The average
signal for MSB=1 should be proportional to (m(i)*s1(t) +
n(i)*s0(t)). This indicated that the input correlation to the
MSB should be proportional to the differences of the aver-
age signals, i.e., (m(i)-n(i))*(s0(t)-s1(t)).
Clearly, the values of m(i) and n(i) depend on the key
byte [i]. The exact values of the absolute difference of
m(i) and n(i) for all possible key bytes [i] is shown in
Figure 6. It is clear from this ﬁgure that (m(i)-n(i)) is large
for almost all values of [i], with m(i) and n(i) being equal
only in the special cases where [i] is 128 or 129. This ex-
plains the observed large correlations seen with the MSBs
of the input bytes. In addition, the explanation based on ta-
ble splitting, is also consistent with observations about the
other bits. For the other bits, the indexing of a split table
with y = ([i] + 2*R[i]) mod (512), does not introduce
any correlation. However, indexing with z=(2*[i] + R[i])
mod (512), introduces correlation which diminishes expo-
nentially as the bit position moves from MSB to LSB.
We therefore accept the table split explanation for the
anomaly and focus on how this knowledge can be use to
formulate an attack (that we term as a “partitioning” attack)
on this and similar implementations of COMP128.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
R[i]
MSB=0
MSB=1
n(i)
m(i)
m(i)
n(i)
ACCESS T00
ACCESS T01
Figure 5. Partitioning of R[i]
140
120
100
80
60
40
20
)
n
−
m
(
s
b
a
0
0
50
100
150
K[i]
200
250
300
Figure 6. Absolute value of (m(i)-n(i)) for vari-
ous values of key byte [i]
1200
1000
800
600
400
200
0
−200
−400
2.685
2.69
2.695
2.7
2.705
2.71
2.715
2.72
2.725
2.73
x 104
Figure 7. Power signals: T 00 access versus
T 01 access
3.5. Partitioning Attack on COMP128
Assuming that the table split mechanism was employed,
we started comparing signals to see whether it was possible
to distinguish between the use of tables T 00 and T 01. By
focusing on the regions where input correlation was found,
we discovered that in each such region, one could directly
classify each power signal into one of two categories, based
on its shape in the region. We assumed that these two cate-
gories correspond to accessing T 00 vs accessing T 01, even
though we could not decide which category corresponded to
which table. Figure 7, which plots strengths of two signals
drawn from two different categories against time, shows the
distinctions between a signal in one category and a signal
in the other. This distinguishability could be further en-
hanced by signal processing, as shown in Figure 8 which
plots strengths of the processed signals against time. Simi-
lar results were also obtained for signals obtained from elec-
tromagnetic emanations from the card.
Moreover, there were 32 regions during the ﬁrst level of
compression where such distinctions existed, which in turn
were organized into 16 pairs. This is consistent with the fact
that the ﬁrst level of compression in COMP128 requires two
table lookups into T 0 with indices y and z, for each of the
16 bytes of input.
We then focussed on the ﬁrst region in the ﬁrst pair and
classiﬁed 1000 signals we had earlier collected with ran-
dom inputs into the two categories. This yielded some very
interesting but not entirely unexpected results; all signals
with R[0] in the range [0,..,26] and [155,...,255] fell in one
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
x 104
3
2.5
2
1.5
1
0.5
490
492
494
496
498
500
502
504
506
508
510
Figure 8. Processed power signals: T 00 ac-
cess versus T 01 access
category and all signals with R[0] in the range [27,..,154]
fell into the other. This contiguous equipartitioning (mod-
ulo 256) is consistent with the behavior expected while per-
forming a lookup of T 0[y] for y =([0] + 2*R[0]) mod
(512), using split tables T 00 and T 01. When R[0] is 0,
T 00 will be accessed independent of [0]. The transition
when R[0] goes from 26 to 27 has to be caused by the value
of y crossing 256 for the ﬁrst time. Similarly the transition
when R[0] goes from 154 to 155 must be caused by the
value ([0] + 2*R[0]) crossing 512 for the ﬁrst time. From
this it follows that [0] can only be 202 or 203. Next, the
same classiﬁcation was performed with the second region
in the ﬁrst pair, which would correspond to accessing T 0
at index z = (2*[0]+R[0]) mod (512). Values of R[0] in
the range [0,..,105] were in one category and values in the
range [106,..,255] in the other. Since [0] is either 202 or
203, the transition when R[0] goes from 105 to 106 must
be caused by (2*[0]+R[0]) crossing 512 for the ﬁrst time.
This only occurs for [0]=203 and hence we obtained the
ﬁrst byte of the key.
Similar analysis performed on the remaining pairs of re-
gions yielded the remaining the key bytes 2. In fact, the key
byte is always uniquely determined from partitioning infor-
2This was conﬁrmed by comparing the output of the card with the out-
put of COMP128 code [1] with the obtained key.
mation about accesses with indices y and z. Even when the
transition from one partition to the other is approximately
known due to noisy signals, this technique cuts down the
possible values of each key byte to a very small number,
permitting feasible brute force search.
This attack was performed with 1000 samples with ran-
dom inputs. This ensured that with high probability, each
input byte adequately covered the range of values [0,..,255]
so that the transitions in the partitions could be determined
with good accuracy. In practice, one could work with fewer
random inputs (say 500). This problem also disappears if
the inputs could be chosen, in which case 256 different in-
puts with each input byte covering all the 256 possibilities
sufﬁces. If one is satisﬁed with 2 possibilities per key byte,
i.e., 216 possibilities for a 16-byte key, only 128 inputs with
covering byte values [1,128] sufﬁce, since these can deter-
mine the ﬁrst y transitions. If in addition, one could adap-
tively choose the inputs, then exploiting the fact that for
each input byte, the partitions consist of contiguous values,
one can perform a binary search to determine the transition
from one partition to another. This binary search could be
performed simultaneously for all 16 input bytes and thus
entire 16-byte key can be obtained using only 8 adaptively
chosen inputs. In fact, seven adaptively chosen inputs are
sufﬁcient to determine all the ﬁrst y transitions thus restrict-
ing each key byte to two possibilities. A ﬁnal carefully cho-
sen input targeted towards all the z accesses then uniquely
determines the key.
4. General Partitioning Attacks
We now generalize the ideas used in the preceding
COMP128 attack to show how Partitioning Attacks can
be formulated on any implementation of any algorithm
in which countermeasures against differential side-channel
analysis have not been properly applied. Clearly, the actual
attack would be very dependent on the algorithm being im-
plemented, the architecture being used and would require
some guesswork on the part of the attacker as to the types
of software countermeasures being used. Therefore the ap-
proach can only be described at an abstract level.
Assume there is an implementation that violates the Car-
dinal Principle, that is, the relevant bits or their values
thereof in some intermediate cycle are not statistically in-
dependent of the input, output and sensitive information.
Since the side–channel signals obtained during that inter-
mediate cycle are affected by and correlated to these rele-
vant bits and the contribution of each of these relevant bits
is somewhat different, this means that the side–channel sig-
nals will also not be statistically independent of inputs, out-
puts and sensitive information. General Partitioning attacks
try to exploit this statistical dependence in the signals to
extract the sensitive information.
Without loss of generality, assume that the values of the
relevant bits at that intermediate cycle depend on some parts
of the input and the sensitive information 3. Since sensi-
tive information such as keys is usually ﬁxed for a device,
this dependence will show up as a dependence on the in-
puts. The statistical distribution of the side channel signal
for each of the intermediate cycles for any input can be es-
timated with reasonable accuracy by sampling. This can be
done by repeatedly invoking the operation on the same input
and extracting the resulting signals. By performing these
estimates on several inputs, the intermediate cycles where
the statistical distribution is input dependent can be identi-
ﬁed. In practice, estimation of the statistical distribution is
likely to be unnecessary; an estimation of a parameter of the
distribution (such as the mean signal) should sufﬁce.
Once the input dependent intermediate cycles are iden-
tiﬁed, attention should be focussed on the ﬁrst such cycle;
the others can be revisited after the analysis of the ﬁrst such
cycle is complete. From the known information about the
abstract algorithm being implemented, the characteristics of
the device, guesswork about the implementation approach
and by experiments with different inputs, it should be pos-
sible to isolate a small valued function of the input which
affects this intermediate cycle. This is because, the cycle
can be dealing with at most one machine word of informa-
tion.
In some cases this could directly be a word of the
input or a word derived from the input and possibly some
secret information during the initial processing stage of the
algorithm. A good heuristic to isolate this function would
be to vary a few bits of the input while keeping the rest of
the bits the same, to see whether or not the distribution is
affected. Another heuristic is to compute correlations be-