**Description**
Is there a way to use pydantic models for GET requests? I would like to have a
similar interface for both query params and for the body. So for instance, an
example could look like this:
    class PingArgs(BaseModel):
        """Model input for PingArgs."""
        dt: datetime.datetime = ...
        to_sum: List[int] = ...
        @validator("dt", pre=False, always=True, whole=True)
        def validate_dt(cls, v, values):
            """Validate dt."""
            parsed_dt = v.replace(tzinfo=None)
            return parsed_dt
    @router.get("/ping", tags=["basic"])
    def ping(args: PingArgs, request: Request):
        """Example."""
        return JSONResponse(
            status_code=starlette.status.HTTP_200_OK,
            content={"detail": "pong", "dt": args.dt.isoformat() "summed": sum(x for x in args.to_sum)},
        )
Where as, right now I think you would have to do something like this:
    @router.get("/ping", tags=["basic"])
    def ping(dt: datetime.datetime = Query(None), to_sum: List[int] = Query(None), request: Request):
        """Example."""
        parsed_dt = dt.replace(tzinfo=None)
        return JSONResponse(
            status_code=starlette.status.HTTP_200_OK,
            content={"detail": "pong", "dt": dt.isoformat() "summed": sum(x for x in to_sum)},
        )
Hope this can be clarified.