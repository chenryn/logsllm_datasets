would require client certiﬁcates. If an application requires client-
authentication, then it is much more common to realize this by run-
ning an additional protocol over the established TLS channel. For
instance, by transmitting a password. TLS is most commonly used
with server-only authentication, therefore we focus on this setting.
However, we stress that our attacks would apply identically to TLS
deployments with client certiﬁcates.
Derivation of symmetric cryptographic keys. All further hand-
shake messages and all secrets of the TLS session, including the
MasterSecret and all encryption and MAC keys, are derived
from the PremasterSecret and other public values. Thus, an
attacker that is able to compute the PremasterSecret is also
able to compute all cryptographic keys of the session.
Figure 2: Structure of the SSL/TLS Handshake protocol for TLS_DHE_RSA and TLS_RSA cipher suites and TLS versions up to 1.2.
4. THE QUIC PROTOCOL
In the sequel we give a high-level description of the QUIC pro-
tocol, in as much detail as required to follow the description of our
attacks. A full description is out of scope of this paper. We refer
to [32, 8], and the documents referenced in [31] for details. See
also [14, 23] for formal security analyses of QUIC.
Slightly simplifying the description contained in [32, pp.18 ff]
and [8] (in particular ignoring all countermeasures against poten-
tial denial of service attacks), a QUIC connection consists of two
phases, the connect phase and the repeat phase (see Figure 4).
Connect phase. This phase is executed whenever a client connects
to a server for the ﬁrst time. It takes usually one, sometimes even
two round-trip times (RTT), and is therefore avoided whenever pos-
sible. Its main purpose is to perform authentication between client
and server (in particular, the server’s X.509 certiﬁcate is transmit-
ted to the client in this phase), and to establish a state from which
future session keys can be derived in the zero-RTT repeat phase
described below.
Most importantly for our work, in this phase the server transmits
a serialized server conﬁg (SCFG) message, which contains infor-
mation about supported elliptic curves and encryption algorithms,
an elliptic curve Difﬁe-Hellman share gS as the server’s contribu-
tion to a Difﬁe-Hellman key exchange, and a 64-bit expiry time
which indicates the expiration date of the given parameters. After
the SCFG message has expired, a new connect phase must be per-
formed. The SCFG message is digitally signed with the secret key
corresponding to the server’s X.509 certiﬁcate.
If the server uses an RSA-certiﬁcate, which is probably the most
common scenario, then the RSA-PSS signature algorithm is used to
compute the signature. Please note that only input from the server
is signed, in contrast to TLS, where the client nonce (which may be
assumed to be unique for each session) is signed, too.
Repeat Phase. This phase is executed immediately after the con-
nect phase, and whenever the client later connects to the server
(provided that the time stamp in the stored SCFG message has not
expired and that the server still uses the same certiﬁcate).
Most importantly for us, this message contains the client’s con-
tribution gC to the elliptic curve Difﬁe-Hellman key shared be-
tween client and server. Moreover, this message may also contain
encrypted payload, encrypted with a shared key derived from the
mutual Difﬁe-Hellman key gCS.
Figure 3: Messages of the TLS 1.3 Handshake.
Mandatory cipher suites. For interoperability reasons, each TLS
version speciﬁes cipher suites that are mandatory to implement:
• TLS 1.0: TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
• TLS 1.1: TLS_RSA_WITH_3DES_EDE_CBC_SHA
• TLS 1.2: TLS_RSA_WITH_AES_128_CBC_SHA
Note that TLS versions 1.1 and 1.2 mandate a cipher suite from the
TLS_RSA family, while version 1.0 mandates a TLS_DHE cipher
suite, but with DSS signatures instead of RSA.
3.2 Differences in the TLS 1.3 Handshake
TLS version 1.3 [13] is currently under development. One goal
of this standard is to improve security of TLS. To this end, obso-
lete and non-authenticated algorithms are removed, to enforce us-
age of secure algorithms. In particular, the IETF Working Group
decided to remove support of key exchange algorithms based on
RSA-encrypted key transport and static-exponent Difﬁe-Hellman.
In addition to these changes in cryptographic algorithms, TLS
1.3 modiﬁes the TLS Handshake protocol. The server public key
parameters for TLS_(EC)DHE cipher suites are exchanged in new
ServerKeyShare messages. These messages are not authenti-
cated directly. Instead, the server sends the public key parameters
unauthenticated, followed by further handshake messages. The au-
thentication process is performed with a CertificateVerify
message which is sent directly before the server Finished mes-
sage. The CertificateVerify message includes a PKCS#1
v1.5 RSA signature over a hash of all the previous messages.
A mandatory cipher suite for TLS 1.3 is not yet deﬁned in the
current IETF draft [13].
TLS-DHETLS ClientTLS ClientTLSServerTLSServerTLS ClientTLS ClientTLSServerTLSServerClientHello: rc ServerHello: rsCertificate: pkencServerKeyExchange: gs,sigServerHelloDoneClientKeyExchange:gcChangeCipherSpec(Client-) FinishedChangeCipherSpec(Server-) FinishedTLS-RSAClientHello: rc ServerHello: rsCertificate: pkencServerHelloDoneClientKeyExchange:encpk(pms)ChangeCipherSpec(Client-) FinishedChangeCipherSpec(Server-) FinishedPremasterSecret = gscmod pPremasterSecret = pmsTLS ClientTLS ClientTLSServerTLSServerClientKeyShareServerHelloServerKeyShareCertificateVerifyClientHello(Client-) Finished(Server-) FinishedCertificate3. Interpret m as an integer such that 0 < m < N and compute
the signature as σ := md mod N.
A digital signature over message M according to the RSA-PSS
signature scheme [19], as used in QUIC, is computed identically,
except that instead of the simple padding in Step 2 of the above
algorithm a more complex, probabilistic padding scheme is used to
compute the padded message m.
Public-key encryption. The basic idea of PKCS#1 v1.5 encryption
is to take a message k (a bit string), concatenate this message with
a random padding string P S, and then apply the RSA encryption
function m (cid:55)→ me mod N. More precisely, a message k of byte-
length |k| ≤ (cid:96) − 11 is encrypted as follows.
1. Choose a random padding string P S of byte-length (cid:96) − 3 −
|k|, such that P S contains no zero byte. The byte-length
|P S| of P S must be at least |P S| ≥ 8.
2. Set m := 0x00||0x02||P S||0x00||k.
3. Interpret m as an integer such that 0 < m < N and compute
the ciphertext as c := me mod N.
i.e.
whether m(cid:48)
The decryption algorithm computes m(cid:48) = cd mod N and inter-
prets integer m(cid:48) as a bit string. It tests whether m(cid:48) has the correct
format,
as
m(cid:48) = 0x00||0x02||P S||0x00||k, where P S consists of at least
8 non-zero bytes. If this holds, then it returns k, otherwise it rejects
the ciphertext.
5.2 Bleichenbacher’s Attack
parsed
can
be
In this section, we recall the well-known attack of Bleichen-
bacher [7] on RSA-PKCS#1 v1.5 encryption [20]. Essentially, Ble-
ichenbacher’s attack allows one to compute the “textbook” RSA-
decryption (resp. RSA-signing) function m (cid:55)→ md mod N with-
out knowing the secret exponent d or (equivalently) the factoriza-
tion of N, by exploiting the availability of a ciphertext validity ora-
cle. This gives rise to attacks on cryptosystems relying on the one-
wayness of the RSA function, like RSA-PKCS#1 v1.5 encryption
and signatures.
Prerequisites. Bleichenbacher’s attack assumes an oracle OBl which
tells whether a given ciphertext is valid (that is, PKCS#1 v1.5 con-
formant) with respect to the target public key (N, e). This oracle
takes as input a ciphertext c and responds as follows.
(cid:40)
OBl(c) =
1 if c is valid w.r.t. PKCS#1 v1.5 and (N, e),
0 otherwise.
The oracle abstracts the availability of, for instance, a web server
responding with appropriate error messages. We note that this or-
acle does not need to be “perfect”. That is, Bleichenbacher’s algo-
rithm works even if the oracle occasionally returns false-negatives,
which occur if OBl(c) returns 0 but c is a valid PKCS#1 v1.5 ci-
phertext.
High-level attack description. We give only a high-level descrip-
tion of the attack, and refer to the original paper [7] for details.
Suppose a PKCS#1 v1.5 conformant ciphertext c = me mod N is
given. Thus, m = cd mod N lies in the interval [2B, 3B), where
B = 28((cid:96)−2). Bleichenbacher’s algorithm proceeds as follows. It
chooses a small integer s, computes
(cid:48)
c
= (c · se) mod N = (ms)e mod N,
Figure 4: Two phases in the QUIC protocol.
Analysis. We make the following two observations, which are cru-
cial for the practicality of our second attack.
1. The repeat-phase does not perform any additional server au-
thentication. The server is authenticated explicitly in the
connect-phase, by the signature over the SCFG message con-
taining gS, and only implicitly in the repeat phase by being
able to compute the shared key derived from gCS.
2. The signed SCFG message transmitted in the connect-phase
is independent of a client’s connection request. Therefore
the SCFG message can be pre-computed by a server (with
an appropriate expiration date) or — as we will show — by
an attacker which is able to compute forged signatures for
arbitrary messages.
5. RSA ENCRYPTION
For completeness, we describe PKCS#1 v1.5 encryption and sig-
natures [20] in this section, and give high-level descriptions of the
attacks of Bleichenbacher [7] and Manger [25]. The reader may
safely skip these details, keeping only the following in mind:
• For a given RSA public key (N, e) with secret key d, both
attacks enable an attacker to compute the “textbook” RSA
decryption (resp. RSA signature) function m (cid:55)→ md mod
N without knowing d for all values m ∈ ZN .
• This is sufﬁcient to compute an RSA-PSS or an RSA-PKCS#1
v1.5 signature σ for any message M, such that σ is valid with
respect to M and (N, e).
Note also that RFC 2313 [20], which speciﬁes PKCS#1 v1.5 en-
cryption and signatures, is obsolete [21, 19]. However, TLS still
uses this version for backwards compatibility reasons.
5.1 RSA-Signatures and RSA-Encryption ac-
cording to PKCS#1 v1.5
In the sequel let (N, e) be an RSA public key, with correspond-
ing secret key d. We denote with (cid:96) the byte-length of N, thus, we
have 28((cid:96)−1) < N < 28(cid:96).
Digital signatures. Let H : {0, 1}∗ → {0, 1}8(cid:96)H be a crypto-
graphic hash function (e.g. SHA-1) with (cid:96)H-byte output length.
A digital signature over message M according to RSA-PKCS#1
v1.5 [20], as used in all TLS versions, is computed in three steps.
1. Compute the hash value h := H(M ).
2. Compute a padded message
m := 0x01||0xFF|| . . .||0xFF||0x00||ASN.1||h
where ASN.1 is a 15-byte string which identiﬁes the hash
function H in ASN.1 format.
and queries the oracle with c(cid:48). If OBl(c(cid:48)) = 1, then the algorithm
learns that 2B ≤ ms − rN < 3B for some small integer r which
QUIC ClientQUIC ClientQUICServerQUICServerInchoateClientHello:SourceAddrTokenServerConfig, sig(ServerConfig), nsFullClientHello:ns, nc, gxServerHello: gyConnect PhaseRepeat Phaseis equivalent to
6. ATTACKS ON TLS 1.3 AND QUIC
2B + rN
s
≤ m <
3B + rN
s
.
By iteratively choosing new s, the adversary reduces the number of
possible values of m, until only one is left.
Attack efﬁciency. For a 1024-bit modulus and a random cipher-
text, the original analysis in [7] shows that the attack requires about
one million oracle queries to recover a plaintext. Therefore, Ble-
ichenbacher’s attack became also known as the “Million Message
Attack”. Recent improvements in cryptanalysis [4] show, however,
that this number can be signiﬁcantly improved. In particular, in cer-
tain (realistic) scenarios the improved attack of [4] performs only
about 3800 oracle queries, depending on which ciphertext validity
checks are performed by the oracle.
5.3 Manger’s Attack
Subsequent to Bleichenbacher, Manger [25] described an attack
on RSA-PKCS#1 v2.0 encryption [21] (aka. RSA-OAEP). Like
Bleichenbacher’s attack, Manger’s attack allows one to compute
the RSA-decryption (resp. RSA-signing) function m (cid:55)→ md mod
N without knowing the secret exponent d or (equivalently) the fac-
torization of N, by exploiting the availability of a ciphertext va-
lidity oracle, but under different prerequisites and with better efﬁ-
ciency.
We note that Manger’s attack can be easily adopted to RSA-
PKCS#1 v1.5, provided that an oracle is given which checks only
whether the ﬁrst byte is zero.
Prerequisites. Manger’s attack assumes an oracle OMa which tells
whether for a given ciphertext c, the value cd mod N (interpreted
as a byte array) begins with 0x00. Thus, this oracle takes as input
a ciphertext c and responds as follows.
(cid:40)
OMa(c) =
1 if cd mod N begins with 0x00,
0 otherwise.
Let B = 28((cid:96)−1), so that any number in ZN less than B will start
with a 0x00-byte. Thus, the oracle tells for a given ciphertext c
whether m = cd mod N lies in the interval [0, B−1] (if the oracle
outputs 1) or in [B, N − 1] (if the oracle outputs 0).
We need to assume that this oracle is “perfect”, in the sense that
it always responds correctly. It is not able to tolerate false-positives
or false-negatives.
High-level attack description. Again, we give only a high-level
description of the attack, and refer to the original paper [25] for
details. Suppose c = me mod N is given, with m < B. Manger’s
algorithm proceeds very similarly to Bleichenbacher’s algorithm,
by choosing a small integer s, computing c(cid:48) = (c · se) mod N =
(ms)e mod N, and querying the oracle with c(cid:48).
The main difference to Bleichenbacher’s algorithm is that
Manger’s approach makes essential use of the “perfectness” of the
oracle, which allows one to choose values s in a more sophisti-
cated way. That is, the information whether m · s mod N lies in
[0, B − 1] or not, which is provided by OMa, reveals (almost) one
bit of information about m.
Attack efﬁciency. For a 1024-bit modulus and a random cipher-
text, the original analysis in [25] shows that the attack requires
only about 1100 oracle queries to invert the RSA function (note
that this is close to optimal). However, in contrast to Bleichen-
bacher’s attack, Manger’s attack needs a “perfect” oracle which al-
ways responds correctly. It is not able to tolerate false-positives or
false-negatives.
We consider a victim client C that establishes a TLS/QUIC con-
nection to a web server S. The web server uses an X.509 certiﬁcate
containing an RSA key pair with public key (N, e) and secret key
d for the TLS connection. The certiﬁcate is digitally signed by a
certiﬁcation authority (CA) trusted by C. Of course, we neither
assume that the attacker is able to corrupt the CA (or any other CA
trusted by the client), nor that the client does not verify certiﬁcates
properly [15], as otherwise a man-in-the-middle attack would be
trivial.
The goal of our attacker is to impersonate the server S towards
C, to be able to mount a man-in-the-middle attack that enables it
to read and modify the TLS-encrypted data exchanged between C
and S. For clarity, let us summarize and discuss the assumptions
that we make.
Standard network attacker model. We work in the standard net-
work attacker model. Essentially, we assume that the attacker’s