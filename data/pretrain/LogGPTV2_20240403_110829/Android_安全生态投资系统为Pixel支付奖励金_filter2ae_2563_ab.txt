    0x4be08f28     8  8b4508         mov eax,[ebp+0x8]
    0x4be08f2b     b  e8702e2bde     call 0x2a0bbda0  (ToNumber)    ;; code: BUILTIN
    0x4be08f30    10  a801           test al,0x1
    0x4be08f32    12  0f852a000000   jnz 0x4be08f62  
JS_TO_WASM 函数将会把 funcx
的第六个参数当做它的第一个参数，但是它把第一个参数当做对象指针，因此当把这个参数传递ToNumber函数，将会产生类型混淆问题，这也意味着我们可以将任何被当做对象指针的数值传递给ToNumber函数。因此，我们可以在某些地址如在一个double
array中伪造一个ArrayBuffe对象，并将其传给ToNumber函数。ArrayBuffer 的布局如下：
    /* ArrayBuffer layouts 40 Bytes*/                                                                                                                         
    Map                                                                                                                                                       
    Properties                                                                                                                                                
    Elements                                                                                                                                                  
    ByteLength                                                                                                                                                
    BackingStore                                                                                                                                              
    AllocationBase                                                                                                                                            
    AllocationLength                                                                                                                                          
    Fields                                                                                                                                                    
    internal                                                                                                                                                  
    internal                                                                                                                                                                                                                                                                                                      
    /* Map layouts 44 Bytes*/                                                                                                                                   
    static kMapOffset = 0,                                                                                                                                    
    static kInstanceSizesOffset = 4,                                                                                                                          
    static kInstanceAttributesOffset = 8,                                                                                                                     
    static kBitField3Offset = 12,                                                                                                                             
    static kPrototypeOffset = 16,                                                                                                                             
    static kConstructorOrBackPointerOffset = 20,                                                                                                              
    static kTransitionsOrPrototypeInfoOffset = 24,                                                                                                            
    static kDescriptorsOffset = 28,                                                                                                                           
    static kLayoutDescriptorOffset = 1,                                                                                                                       
    static kCodeCacheOffset = 32,                                                                                                                             
    static kDependentCodeOffset = 36,                                                                                                                         
    static kWeakCellCacheOffset = 40,                                                                                                                         
    static kPointerFieldsBeginOffset = 16,                                                                                                                    
    static kPointerFieldsEndOffset = 44,                                                                                                                      
    static kInstanceSizeOffset = 4,                                                                                                                           
    static kInObjectPropertiesOrConstructorFunctionIndexOffset = 5,                                                                                           
    static kUnusedOffset = 6,                                                                                                                                 
    static kVisitorIdOffset = 7,                                                                                                                              
    static kInstanceTypeOffset = 8,     //one byte                                                                                                            
    static kBitFieldOffset = 9,                                                                                                                               
    static kInstanceTypeAndBitFieldOffset = 8,                                                                                                                
    static kBitField2Offset = 10,                                                                                                                             
    static kUnusedPropertyFieldsOffset = 11
由于栈上的内容可以被泄露出去，所以我们可以获取很多有用的数据来伪造这个
ArrayBuffer，例如，我们可以泄露一个对象的起始地址，计算该对象的elements属性的起始地址，elements属性是FixedArray类型的对象。我们可以使用这个FixedArray对象作为伪造的ArrayBuffer的properties和elements属性部分，同时我们还得伪造ArrayBuffer的map属性部分。幸运的是，在触发漏洞的时候，大多数map属性字段并没有被使用。
但是偏移8个字节的InstanceType必须设置为0xc3（这个值取决于V8的版本），用来表明这个对象是
ArrayBuffer。为了在JavaScript中获得伪造的ArrayBuffer的引用，我们必须将map中偏移16字节的Prototype字段设置为一个对象，该对象的Symbol.toPrimitive属性是一个JavaScript回调函数。当这个伪造的数组传进ToNumber函数，ArrayBuffer对象会被转换成数字，此回调函数将会被调用。因此我们在回调函数中可以得到伪造的ArrayBuffer的引用。由于ArrayBuffer伪造在double
array中，该array的内容可以被设置成任意值，因此我们可以修改伪造的ArrayBuffer的BackingStore和ByteLength字段，从而获得任意地址读写的能力。有了任意地址读写能力，执行shellcode将非常简单。Chrome中JIT代码是可读、可写、可执行的，因此我们可以通过覆盖JIT代码来执行ShellCode。
Chrome团队非常迅速的在chrome 61.0.3163.79版本中修复了这个问题，仅仅在我们提交此利用一周之后就修复了。
## 提权漏洞(EoP) (CVE-2017-14904)
沙箱逃逸漏洞是由于map和unmap不匹配导致的Use-After-Unmap问题，漏洞代码位于gralloc_map和gralloc_unmap函数：
    static int gralloc_map(gralloc_module_t const* module,
    buffer_handle_t handle){
     ……
    private_handle_t* hnd = (private_handle_t*)handle;
    ……
    if (!(hnd->flags & private_handle_t::PRIV_FLAGS_FRAMEBUFFER) &&
    !(hnd->flags & private_handle_t::PRIV_FLAGS_SECURE_BUFFER)) {
        size = hnd->size;
        err = memalloc->map_buffer(&mappedAddress, size,
        hnd->offset, hnd->fd);
    //---> mapped an ashmem and get the mapped address. the ashmem fd and offset can     be controlled by Chrome r
        if(err || mappedAddress == MAP_FAILED) {
            ALOGE("Could not mmap handle %p, fd=%d (%s)",
            handle, hnd->fd, strerror(errno));
            return -errno;
        }
    hnd->base = uint64_t(mappedAddress) + hnd->offset;
    //---> save mappedAddress+offset to hnd->base
    } 
    else {
    err = -EACCES;
    }
    ……
    return err;
    } 
gralloc_map将由参数handle控制的图形缓冲区映到内存，gralloc_unmap
进行unmap，被映射的地址加上hnd->offset赋值给hnd->base，但是在unmap的时候，hnd->base直接传递给unmap系统调用，并没有减去hnd->offset。hnd->offset可以被Chrome的沙箱进程中控制，因此可以从Chrome沙箱的渲染进程中unmap
system_server中的任何内存页。
    static int gralloc_unmap(gralloc_module_t const* module,
    buffer_handle_t handle)
    {
    ……
    if(hnd->base) {
        err = memalloc->unmap_buffer((void*)hnd->base, hnd->size, hnd->offset);
    //---> while unmapping, hnd->offset is not used, hnd->base is used as the base address, map and unmap are
        if (err) {
            ALOGE("Could not unmap memory at address %p, %s", (void*) hnd->base,
            strerror(errno));
            return -errno;
        }
        hnd->base = 0;
    }
    ……
    return 0;
    }
    int IonAlloc::unmap_buffer(void *base, unsigned int size,
    unsigned int /*offset*/)
    //---> look, offset is not used by unmap_buffer
    {
    int err = 0;
    if(munmap(base, size)) {
        err = -errno;
        ALOGE("ion: Failed to unmap memory at %p : %s",
        base, strerror(errno));
    }
    return err;
    }  
尽管SeLinux限制了isolated_app域访问大多数Android系统服务，但是isolated_app仍然可以访问三个系统服务。
    neverallow isolated_app {
        service_manager_type
        -activity_service
        -display_service
        -webviewupdate_service
    }:service_manager find;
为了从Chrome沙箱进程中触发上面提到的Use-After-Unmap漏洞，首先将一个可序列化的GraphicBuffer对象放进bundle，然后调用IActivityManager的binder方法convertToTranslucent，将恶意的bundle传递给system_server，当system_server处理这个恶意的bundle的时候，这个漏洞就会被触发。
这个提权漏洞指向的攻击面与我在2016
MoSec上介绍的相同，[安卓Chrome沙箱逃逸的一种姿势](https://github.com/secmob/mosec2016/blob/master/%E5%AE%89%E5%8D%93Chrome%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%9A%84%E4%B8%80%E7%A7%8D%E5%A7%BF%E5%8A%BF.pdf)，也类似于[Bitunmap](https://googleprojectzero.blogspot.com/2016/12/bitunmap-attacking-android-ashmem.html)，但是从Chrome的沙箱进程中利用此种类型的漏洞要比从app中利用困难的多。
这个提权漏洞的利用大概可以分为六步：
  1. 地址空间整形，使地址空间布局看起来如下，一个堆块正好在一些连续的ashmem映射之上：
    7f54600000-7f54800000 rw-p 00000000 00:00 0         [anon:libc_malloc]
    7f58000000-7f54a00000 rw-s 001fe000 00:04 32783     /dev/ashmem/360alpha29 (deleted)
    7f54a00000-7f54c00000 rw-s 00000000 00:04 32781     /dev/ashmem/360alpha28 (deleted)
    7f54c00000-7f54e00000 rw-s 00000000 00:04 32779     /dev/ashmem/360alpha27 (deleted)
    7f54e00000-7f55000000 rw-s 00000000 00:04 32777     /dev/ashmem/360alpha26 (deleted)
    7f55000000-7f55200000 rw-s 00000000 00:04 32775     /dev/ashmem/360alpha25 (deleted)
    ......
  2. 通过触发漏洞，unmap掉堆块的一部分(1KB)和一部分共享内存空间(ashmem: 2MB-1KB)
    7f54400000-7f54600000 rw-s 00000000 00:04 31603  /dev/ashmem/360alpha1000 (deleted)
    7f54600000-7f547ff000 rw-p 00000000 00:00 0       [anon:libc_malloc]
    //--->There is a 2MB memory gap
    7f549ff000-7f54a00000 rw-s 001fe000 00:04 32783    /dev/ashmem/360alpha29 (deleted)
    7f54a00000-7f54c00000 rw-s 00000000 00:04 32781   /dev/ashmem/360alpha28 (deleted)
    7f54c00000-7f54e00000 rw-s 00000000 00:04 32779   /dev/ashmem/360alpha27 (deleted)
    7f54e00000-7f55000000 rw-s 00000000 00:04 32777   /dev/ashmem/360alpha26 (deleted)
    7f55000000-7f55200000 rw-s 00000000 00:04 32775   /dev/ashmem/360alpha25 (deleted)
  3. 用ashmem内存填充unmap掉的地址空间
    7f54400000-7f54600000 rw-s 00000000 00:04 31603  /dev/ashmem/360alpha1000 (deleted)
    7f54600000-7f547ff000 rw-p 00000000 00:00 0       [anon:libc_malloc]
    7f547ff000-7f549ff000 rw-s 00000000 00:04 31605    /dev/ashmem/360alpha1001 (deleted)  
    //--->The gap is filled with the ashmem memory 360alpha1001
    7f549ff000-7f54a00000 rw-s 001fe000 00:04 32783    /dev/ashmem/360alpha29 (deleted)
    7f54a00000-7f54c00000 rw-s 00000000 00:04 32781   /dev/ashmem/360alpha28 (deleted)
    7f54c00000-7f54e00000 rw-s 00000000 00:04 32779   /dev/ashmem/360alpha27 (deleted)
    7f54e00000-7f55000000 rw-s 00000000 00:04 32777   /dev/ashmem/360alpha26 (deleted)
    7f55000000-7f55200000 rw-s 00000000 00:04 32775   /dev/ashmem/360alpha25 (deleted)
  4. 通过堆喷射，将堆数据写入ashmem内存中
    7f54400000-7f54600000 rw-s 00000000 00:04 31603   /dev/ashmem/360alpha1000 (deleted)
    7f54600000-7f547ff000 rw-p 00000000 00:00 0       [anon:libc_malloc]
    7f547ff000-7f549ff000 rw-s 00000000 00:04 31605    /dev/ashmem/360alpha1001 (deleted)
    //--->the heap manager believes the memory range from 0x7f547ff000 to 0x7f54800000 is still mongered by it and will allocate memory from this range, result in heap data is written to ashmem memory
    7f549ff000-7f54a00000 rw-s 001fe000 00:04 32783    /dev/ashmem/360alpha29 (deleted)
    7f54a00000-7f54c00000 rw-s 00000000 00:04 32781   /dev/ashmem/360alpha28 (deleted)
    7f54c00000-7f54e00000 rw-s 00000000 00:04 32779   /dev/ashmem/360alpha27 (deleted)
    7f54e00000-7f55000000 rw-s 00000000 00:04 32777   /dev/ashmem/360alpha26 (deleted)
    7f55000000-7f55200000 rw-s 00000000 00:04 32775   /dev/ashmem/360alpha25 (deleted)
  5. 由于步骤3中的填充的ashmem可以被同时映射在system_server进程和渲染进程中，渲染进程可以读写system_server进程中的部分堆的内容，我们可以触发system_server在ashmem中分配一些GraphicBuffer对象。 因为GraphicBuffer继承ANativeWindowBuffer类，ANativeWindowBuffer类有个叫common的成员，它的类型是android_native_base_t。我们可以从ashmem读取两个函数指针（incRef和decRef），并计算libui模块的基地址。在最新的Pixel设备中，Chrome渲染进程仍然是32位的，但是system_server是64位进程，因此我们还需泄露一些模块的基地址，用来ROP。现在，我们拥有libui模块的基地址，最后的步骤就是触发ROP。不太幸运的是，函数指针incRef和decRef看起来并没有被使用，不可能通过修改他们跳转到ROP，但是我们可以修改GraphicBuffer的虚表，从而触发ROP。
    typedef struct android_native_base_t
    {
    /* a magic value defined by the actual EGL native type */
    int magic;
    /* the sizeof() of the actual EGL native type */
    int version;
    void* reserved[4];
    /* reference-counting interface */
    void (*incRef)(struct android_native_base_t* base);
    void (*decRef)(struct android_native_base_t* base);
    } android_native_base_t;  
  6. 触发GC，执行ROP，当GraphicBuffer对象析构的时候，虚函数onLastStrongRef 将被调用，因此我们可以覆盖此函数，从而跳转到ROP，这样控制流转入ROP。从一个单一的libui模块找到合适的ROP链非常具有挑战性，但是经过不断的努力，我们成功找到了一个ROP链，并且将/data/misc/wifi/wpa_supplicant.conf的文件内容转存出来了。
因为system_server是权限很高的系统进程，能以system_server的身份执行任意代码意味着手机中绝大部分数据都可以被获取，手机的大部分权限可能被恶意使用。此漏洞链可能带来的危害包括但不限于获取手机的短信，通讯录，照片，通过后台程序使用手机发短信，打电话，录音录像等。
## 小结
对于我们的报告，Android安全团队响应非常迅速，在2017年12月的安全更新中修复了这两个漏洞。2017-12-05的安全补丁或更高版本的设备，将不受影响。但是在敏感的位置解析不可信的parcels仍然存在，Android安全团队正在努力加固平台，以缓解类似的漏洞。