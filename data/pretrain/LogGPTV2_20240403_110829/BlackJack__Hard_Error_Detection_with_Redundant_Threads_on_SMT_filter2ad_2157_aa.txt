title:BlackJack: Hard Error Detection with Redundant Threads on SMT
author:Ethan Schuchman and
T. N. Vijaykumar
BlackJack: Hard Error Detection with Redundant Threads on SMT
Ethan Schuchman and T. N. Vijaykumar
School of Electrical and Computer Engineering, Purdue University
{erys, vijay}@purdue.edu
Abstract
Testing is a difficult process that becomes more difficult with
scaling.  With  smaller  and  faster  devices,  tolerance  for  errors
shrinks and devices may act correctly under certain condition and
not under others. As such, hard errors may exist but are only exer-
cised by very specific machine state and signal pathways. Target-
ing these errors is difficult, and creating test cases that cover all
machine  states  and  pathways  is  not  possible.  In  addition,  new
complications during burn-in may mean latent hard errors are not
exposed in the fab and reach the customer before becoming active. 
To  address  this  problem,  we  propose  an  architecture  we  call
BlackJack that allows hard errors to be detected using redundant
threads running on a single SMT core. This technique provides a
safety-net that catches hard errors that were either latent during
test or just not covered by the test cases at all. 
Like SRT, our technique works by executing redundant copies
and  verifying  that  their  resulting  machine  states  agree.  Unlike
SRT, BlackJack is able to achieve high hard error instruction cov-
erage by executing redundant threads on different front and back-
end  resources  in  the  pipeline.  We  show  that  for  a  15%
performance  penalty  over  SRT,  BlackJack  achieves  97%  hard
error instruction coverage compared to SRT’s 35%. 
1  Introduction
Technology  scaling  has  yielded  smaller  and  faster  transistors
which  have  enabled  higher  performance.  Unfortunately,  scaled
devices are more susceptible to hard errors (i.e., permanent errors)
because each device has smaller margins for correct operation. For
instance, a small charge trapped in the gate oxide can permanently
damage  the  transistor.  In  addition,  because  margins  are  small,
other (hard to quantify) variables can cause devices to operate cor-
rectly  in  some  cases  and  incorrectly  in  others.  These  variables
arise  from  normal  operating  conditions  such  as  signal  paths,
machine  state,  or  localized  temperatures  and  supply-voltage
droops. With correct operation being dependent on such variables,
testing becomes difficult. For good coverage, it is not enough to
test a transistor under one operating condition, but every transistor
must  be  tested  considering  intractably  many  signal  paths  and
machine states. 
The  increasingly-difficult  problem  of 
  defects  compli-
cates  the  testing  process  even  more.  CPU  lifetime  can  be
described best by a bathtub-shaped curve, where some chips have
short lifetimes, a few have intermediate lifetimes, and most have
long  (acceptable)  lifetimes.  The  lifetime  is  determined  by  how
long it takes for a latent defect to worsen and become active. CPU
manufacturers weed out the short-lifetime chips from the produc-
tion flow by a process called burn-in. In burn-in, chips are run at
high voltage and temperature to cause large amounts of wear-and-
tear over a short amount of time. Burn-in causes chips with short
lifetimes to fail before leaving the fab, so that chips that reach the
customer  can  be  expected  to  have  a  long  (acceptable)  lifetime.
latent
Burn-in has long been relied upon but its continued feasibility and
coverage are now coming into question. As devices get smaller,
they incur more wear-and-tear in burn-in causing even the long-
thermal  run-
lifetime  chips  to  fail.  In  addition,  an  effect  called 
away
 is becoming a problem. In thermal run-away, devices under-
going burn-in get hotter increasing leakage which in turn increases
the temperature, creating a positive feedback loop. If thermal-run-
away is not controlled, even the good chips are destroyed [13]. If
controlled, the coverage of burnin comes into question [8]. Have
all devices been exercised long enough at high-enough tempera-
tures so that all latent faults are exposed? 
These two worsening difficulties attack two basic assumptions
of testing for hard errors. The first difficulty implies that test cases
cannot be created for every possible defect. The second difficulty
implies that even if one could, some of the latent defects would
remain unexposed by burn-in. Even today, not only is 100% cov-
erage not achieved but even quantifying what has been covered is
only an approximation [7]. 
for
Despite  these  difficulties,  testing  will  not  disappear,  but  will
only  become  more  important.  However,  hard  errors  will  get  by
and  will  be  exposed  in  the  field,  despite  most  valiant  attempts.
not  a
This  paper  proposes  a  technique  which  is  a  safety  net, 
replacement, 
testing.  Our  technique  allows  defects  that  are
missed in the testing process (either because the error was never
tested, or the error was latent at testing time) to be detected in the
field,  preventing  hard  errors  from  corrupting  data.  It  may  seem
that  continual  testing  throughout  the  lifetime  of  the  chip  would
achieve  our  target.  However,  injecting  test  inputs  into  the  chip
requires  testers,  which  are  expensive,  specialized  machines,  and
are not available in the field. 
We make the key observation that instead of testing for an inor-
dinately large number of potential defects we can instead test only
for the defects that are exercised by a program when the program
runs.  One  such  way  is  to  redundantly  execute  the  program  and
compare program state. Because redundant execution is the stan-
dard approach to handling soft errors, our observation implies that
soft-error schemes can be applied to hard errors to allow previ-
ously untested or latent defects to be detected at run time.
trailing
Despite this implication, soft-error schemes can not be applied
as  is
  to  hard  errors.  Because  soft-error  techniques  rely  on  the
errors being transient, the techniques exploit temporal redundancy.
For instance, a Simultaneously and Redundantly Threaded proces-
leading
sor (SRT [10]) executes two copies of a program, called 
and 
 threads, on one SMT core assuming that a soft error
would affect only one copy. Because hard errors are permanent,
temporal redundancy 
 will not suffice. Because both copies
of  an  instruction  run  on  the  same  core,  they  may  encounter  the
same  hard  error  which  would  then  elude  detection.  To  ensure
proper  detection,  each  instruction  copy  must  use  different  hard-
spatially diverse
ware. That is, the redundant executions must be 
. 
Ensuring spatial diversity is the key challenge in using SRT for
alone
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
BlackJack
hard-error detection. We address this challenge in our microarchi-
tecture called 
. Spatial diversity does not occur naturally
in SRT because the trailing thread is mostly-identical to the lead-
ing  thread,  resulting  in  the  same  resources  being  used  by  most
leading-trailing  instruction  pairs. A  naive  approach  would  be  to
shuffle SRT’s trailing instructions that are issued together in one
cycle, so that each trailing instruction goes to a different execution
way than the corresponding leading instruction. However, as we
explain later, there is no convenient point in the pipeline to shuffle
the trailing instructions. Shuffling before rename violates program
correctness due to lack of dependence information; shuffling after
rename does not cover the frontend and severely complicates issue
which is already timing-critical. 
before
To avoid these difficulties, we make the key observation that
the leading thread determines dependencies well before the trail-
ing thread executes. Accordingly, our novel idea is that we borrow
dependence information from the leading thread which allows us
to shuffle the instructions 
 they are fetched by the trailing
thread. The dependence information ensures that the shuffling pre-
serves  program  correctness.  Specifically,  we  shuffle  the  leading
packet.
instructions that were co-issued in the same cycle, called a 
Our shuffling is 
 random and is specifically designed to ensure
that the leading and trailing executions are spatially diverse. We
call  this  scheme 
which  allows  us  to  cover  both  the
frontend  and  backend.  Because  we  perform  the  shuffling  at  the
leading  thread  commit  which  is  off  the  critical  path,  we  do  not
affect timing-critical components. 
safe-shuffle 
Finally, there may be a marketing concern as to what happens
when  a  defect  is  detected.  We  have  not  changed  the  marketing
model.  The  key  point  is  that  the  defect  exists  with  or  without
BlackJack, and both cases will result in the chip being returned to
the manufacturer. Without BlackJack, the user will return the chip
after  the  defect  causes  data  corruption.  BlackJack  prevents  this
corruption. 
not
•
•
•
safe-shuffle;
In summary, the main contributions of BlackJack are:
We show that shuffling the trailing thread allows SRT, a soft-
error technique, to detect hard errors as well. 
We propose 
 a novel scheme which allows us to
shuffle instructions before they enter the trailing thread while
still ensuring correctness. Thus safe-shuffle allows coverage of
hard-errors in both the pipeline frontend and backend.
We show that for a 15% performance degradation over SRT,
BlackJack is able to achieve 97% hard error instruction cover-
age while SRT achieves 34%.
The  rest  of  the  paper  is  organized  as  follows.  We  discuss
related work in Section 2. Section 3 provides background on SRT.
Section 4 describes BlackJack. Section 5 describes our experimen-
tal methodology, and Section 6 presents our results. We conclude
in Section 7. 
2  Related Work
There is a large body of past work [12] on error checking logic
and  error  correcting  codes  (ECC). Although  applicable  to  some
modern microarchitectural structures (mostly array memory struc-
tures and some data path components) and implemented in some
modern processors [2], these techniques cannot cover much of the
faster  and  more  complex  control-dominated  modern  microarchi-
tectures. For example, it is hard to build checker logic that checks
the  issue  queue  operation  every  cycle  and  correctly  responds  to
wakeup  and  select  actions  without  significantly  degrading  cycle
time.
Because of such deficiencies in error checking logic for mod-
ern  processors,  there  has  been  extensive  work  in  architectural
redundancy techniques for soft errors. SRT with recovery (SRTR)
[17] extends SRT to detect and recover from soft errors, but still
would not provide good hard-error instruction coverage because of
lack  of  spatial  diversity.  Though  primarily  targeting  soft  errors,
Redundant  Multithreading  (RMT)  [9]  proposes  using  redundant
threads for hard errors. Using a clustered microarchitecture, RMT
achieves spatial diversity by executing the redundant threads on
different clusters. However, because the frontend of the pipeline is
not  clustered,  the  technique  does  not  provide  coverage  for  the
frontend, ensuring spatial diversity only after rename. Moreover,
RMT can provide backend coverage only because the issue queue
is statically segmented among the clusters at design time, so that
the leading and trailing instructions can be dispatched to different
issue-queue segments. However, a segmented issue queue would
incur substantial performance loss in an SMT compared to a con-
ventional unified issue queue. A unified issue queue allows both
threads to occupy as much of the issue queue as needed whereas as
a segmented issue queue artificially limits each thread to its own
segment. Such segmentation defeats SMT’s purpose of improving
throughput by flexibly sharing the pipeline resources (one of the
most important of which is the issue queue) among the threads. 
every
Chip-level redundant threading with recovery (CRTR) [6] pro-
poses a CMP-based solution for soft-error detection and recovery.
Despite being designed for soft-error recovery, CRTR would natu-
rally  provide  good  spatial  diversity  by  running  the  redundant
threads on two different cores. However,CRTR requires many val-
 load and store value and address) to be sent at high rates
ues (
between  the  cores.  As  such,  satisfying  such  high  bandwidth
demand may not be realistic as it would require deeply-pipelining
long,  wide  buses  by  introducing  numerous  latches  and  buffers
which  are  power-hungry  and  increase  chip  area.  Furthermore,
CRTR forces running one copy each of two different programs on
one core (limiting one core to run one copy of only one program
would halve execution throughput and is not an option). The two
programs may thrash in the core’s i-cache, and may contend for
pipeline resources increasing the complexity of the OS in ensuring
that each program gets its due share of resources. The contented
resources may not be visible to the OS, which would amount to
not just worse complexity but more uncertainty in the OS. In con-
trast, SRT runs both copies on the same core, containing each pro-
gram  to  one  core  and  avoiding  these  OS  complexity  and
uncertainty problems. 
A recent paper on lifetime reliability [16] discusses the effect
on  reliability  of  detecting  and  disabling  defective  resources,  but
provides no such techniques to support such features.
DIVA[1], although intended to catch design bugs, not fabrica-
tion  bugs,  can  catch  some  hard  errors.  DIVA  uses  an  additional
simple pipeline that checks committed instructions. A recent work,
[3], uses multiple DIVA checkers to provide on-line diagnosis of
failures.  Online  diagnosis  may  not  be  advantageous  to  the  user
beyond  detection,  if  degraded  operation  is  not  acceptable  and
defective chips are still to be returned. As proposed in [3], the mul-
tiple  DIVA  checkers  and  additional  area  overhead  may  increase
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007 
the likelihood of the chip having a failure. Furthermore, [3] relies
on randomization logic in the timing-critical select-map logic for
spatial diversity. Finally, to keep DIVA checkers simple, [3] can
not cover hard errors in large parts of the pipeline such as the reg-
ister file. 
A  recent  paper,  [5],  proposes  defect-tolerance  techniques  for
CMP  interconnect  switches.  This  work  is  orthogonal  to  ours
because we target defects in the processor pipeline.
another recent work [18] proposes using standard SMT to run
test  case  applications  in  the  background  and  evaluates  perfor-
mance overhead. [18] does not rely on redundancy and therefore
its coverage depends on the quality, number and frequency of test
cases being ran.
Finally, Rescue [11] proposes architectures that allow detected
hard errors to be isolated at test time and avoided at run time, but
provides no support for hard errors missed at test time. 
3  SRT Background
SRT  [10]  provides  a  hardware  technique  for  detecting  soft
errors. SRT uses SMT hardware to allow two copies of a single
program, called leading and trailing threads, to be executed con-
currently on one SMT core. SRT detects soft errors whenever the
corresponding stores in the leading and trailing threads disagree in
address or data. Specifically, the leading store waits in the store
buffer for the trailing store. Upon successful checking, SRT com-
mits  the  store  to  the  memory  hierarchy.  SRT  commits  register
writes, however, in the respective threads without any checking.
Because incorrect values propagate through computations and are
eventually consumed by stores, checking only stores suffices for
soft-error detection. 
In SRT, the trailing thread executes behind the leading thread
by  some  specified  amount  of 
.  This  slack  provides  two
important  performance  advantages.  First,  the  slack  enables  the
leading branches to be resolved well ahead of the trailing thread,
so that branch outcomes are passed to the trailing thread to be used
as  the  trailing  thread’s  prediction,  allowing  the  trailing  thread
never  to  mispredict  (assuming  fault-free  operation).  Second,  the
slack enables leading load misses to be resolved well ahead of the
trailing  thread,  so  that  leading  load  values  can  be  passed  to  the
trailing  thread,  allowing  the  trailing  thread  never  to  miss. Thus,
only the leading thread accesses the cache. The second advantage
also  addresses  a  correctness  issue:  Duplicating  cached  loads  is
problematic  because  memory  locations  may  be  modified  by  an
external agent (e.g., another processor) between the time the lead-
ing thread loads a value and the time the trailing thread tries to
load  the  same  value.  Then,  the  two  threads  may  diverge  if  the
loads return different data, resulting in loss of redundancy. 
slack
Together  these  two  advantages  mean  that  the  trailing  thread
executes  far  fewer  instructions  than  the  leading  thread  and  exe-
cutes  the  remaining  (only  non-speculative)  instructions  at  high
IPC. By using SMT, SRT allows much of the trailing thread’s exe-
cution to be hidden during leading thread stalls. To implement the
passing  of  branch  outcomes  and  load  values  from  the  leading
thread to the tailing thread, SRT uses a Branch Outcome Queue
(BOQ) and a Load Value Queue (LVQ). 
4  Hard Error Detection with SMT
The  key  to  detecting  hard  errors  on  SMT  is  ensuring 
spatial
g
n
i
l
i
Icache Block
a
r
T
&
g
n
d
a
e
L
i
F 
F 
F 
F 
D R
D R
D R
D R
W C
W C
W C
W C
FIGURE 1: Mapping of instructions from cache 
frontend way and from issue to backend ways
E M
E M
E M
E M
R
R
R
R
I
S
S
U
E
 crossing over only at the issue queue to a 
diversity
 — i.e., trailing instructions do not use the same pipeline
resources used by the corresponding leading instructions. We note
that in an out-of-order pipeline an instruction is processed in one
frontend way
backend
way
 which the instruction uses till write back. Figure 1 shows a
diagram of the instruction flow. Once in a frontend way or back-
end  way,  an  instruction  uses  resources  dedicated  to  that  way.  It
suffices to ensure that a trailing instruction uses a different fron-
tend way and a different backend way than the leading instruction
to  ensure  that  the  trailing  instruction  uses  different  pipeline
resources than the leading instruction. Spatial diversity does not
occur naturally in SRT because the trailing thread is an instruction
stream mostly-identical to the leading thread, resulting in the same
resources being used by most leading-trailing instruction pairs. 
which