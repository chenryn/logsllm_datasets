2.2 Key-Reinstallation Attacks
In 2017, Vanhoef and Piessens demonstrated subtle attacks on
WPA2 that trick a supplicant into reinstalling a key [29, 30].
Such reinstallations can seriously harm the security of WPA2
because whenever a supplicant reinstalls a key, it updates cor-
responding data, in particular, the nonce used for encryption.
Attacks and Countermeasures The key-reinstallation at-
tacks by Vanhoef and Piessens are person-in-the-middle at-
tacks that force a party into reusing a nonce by making clever
use of WPA2 mechanisms such as message retransmissions.
The most critical of these attacks is on the four-way handshake
itself. As discussed earlier, in an ideal four-way handshake,
the authenticator and the supplicant ﬁrst exchange nonces
before the authenticator transmits the group temporal key to
the supplicant. The supplicant then installs both the pairwise
transient key and the group temporal key and conﬁrms the
installation to the authenticator, who in turn also installs the
pairwise transient key.
A problem arises, however, if the authenticator does not
receive an installation conﬁrmation from the supplicant, and
this is where the retransmission of messages comes into play:
If the authenticator does not receive an installation conﬁr-
mation within a certain period of time, it assumes that the
supplicant did not receive its previous message and therefore
retransmits this message (M3) to the supplicant. But what if
the supplicant did actually receive the previous message and
Figure 3: KRACK Attack on the Four-Way Handshake
thus installed the keys already? In that case, the supplicant
would, upon receiving M3 again, reinstall the two keys and
thus reset the nonce of the pairwise transient key to 0. Now,
if the supplicant sent encrypted messages with the pairwise
transient key before reinstalling it, the nonce reset will lead to
the reuse of nonces when encrypting further messages after
the second installation.
So all it takes for a person-in-the-middle attacker is to trick
the authenticator into believing that the supplicant didn’t in-
stall the keys. But this is easy: The attacker can simply prevent
the supplicant’s installation conﬁrmation from reaching the
authenticator. When the authenticator then retransmits mes-
sage 3, the attacker forwards it to the supplicant, who will in
turn reinstall the keys and that’s it. Figure 3 illustrates an exe-
cution of this attack. In practice, the attack might not be that
straightforward. This is because some implementations of the
supplicant only accept encrypted messages after they installed
a PTK, and the message (M3) the attacker intercepted is still
unencrypted. Even in this case, Vanhoef and Piessens showed
later [30] how to achieve a key-reinstallation by abusing the
so-called sleep-ﬂag of WPA2.
To prevent key-reinstallation attacks, Vanhoef and
Piessens [29, 30] suggested possible countermeasures, which
we discuss later in Section 5.2. Before we move on to
presenting our formal model of WPA2, we give a short
overview of Tamarin—the tool used for our analysis.
2.3 The Tamarin Prover
The Tamarin prover [23] is an automated-reasoning tool for
the analysis of complex security protocols. Tamarin operates
on the symbolic level, meaning that bit strings are abstracted
to algebraic terms. Tamarin is particularly well suited for
modeling complex state machines with loops and evolving
state, and is therefore a natural choice for WPA2.
4    29th USENIX Security Symposium
USENIX Association
AuthenticatorSupplicantInstall KeysEncrypt data with PTK and nonce 0Reinstall KeysM1 (counter1)M1 (counter1)M2 (counter1)M2 (counter1)M3 (counter2)M3 (counter2)M4 (counter2)Attacker...Encrypt data with PTK and nonce nEncrypt data with PTK and nonce 0...Nonce Reuse!M3 (counter3)M3 (counter3)To formalize a security protocol in Tamarin, we encode the
protocol as a collection of multiset-rewriting rules, such as:
(cid:2) State(userID,key,’READY’) (cid:3)
—(cid:2) SendsReadyMsg(userID) (cid:3)→
(cid:2) Out(senc(key,userID)) (cid:3)
Intuitively, this rule says that if a user with a given ID and a
given key is in state ‘READY’, it can encrypt its ID with its
key and send the resulting ciphertext to the network.
Terms such as the above State(userID,key,’READY’),
SendsReadyMsg(userID), and Out(senc(key,userID)) are
called facts. Moreover, senc is a built-in function symbol for
symmetric encryption. Tamarin also allows to deﬁne custom
function symbols and to specify their semantics via equations,
a feature we use in Section 3.4 to model the use of nonces in
authenticated encryption schemes.
In general, the multiset-rewriting rules used with Tamarin
consist of a left-hand side (the part with the fact
State(userID,key,’READY’) in the above example), a right-
hand side (the part with Out(senc(key,userID))), and so-
called action facts (SendsReadyMsg(userID)).
Once we have encoded a protocol by a set of such rules, we
can specify desired properties in a guarded fragment of many-
sorted ﬁrst-order logic (guarded here means that the use of
quantiﬁers is syntactically restricted, for details see [22]). For
example, such a property could look as follows:
∀ user key t1. Installed(user,key)@t1 ⇒ ¬∃ t2. K(key)@t2
This rule intuitively says that if a user has installed a certain
key at time t1, then there does not exist a time t2 at which the
attacker knows that key, or, in short: installed keys are secure.
The speciﬁcation of security properties is also where the
above-mentioned action facts come into play: logical formulas
in Tamarin can refer to action facts and the knowledge of
the attacker (denoted by the fact K as in the example) but
not to facts occurring on the left-hand side or on the right-
hand side of a rule. For the rule stated earlier, this means
that when we write a formula, we are allowed to use the fact
SendsReadyMsg but not the facts State or Out.
As underlying threat model and as a core-part of its reason-
ing mechanism, Tamarin assumes a Dolev-Yao attacker, i.e.,
a person in the middle that controls the whole network. When
messages are sent to the network (with the fact Out), the at-
tacker can learn these messages and send arbitrary messages
to the nodes in the network. All this is formalized in terms
of reasoning techniques in Tamarin’s proof system as well as
via speciﬁc rewriting rules that model the capabilities of the
attacker.
Tamarin models traditionally assumed perfect cryptogra-
phy, meaning that the attacker can only encrypt or decrypt
messages (or, similarly, compute signatures, MACs, etc.) if it
knows the corresponding keys. As we will discuss later (Sec-
tion 3.6), we loosened the assumption of perfect cryptography
in our model to allow the attacker to exploit nonce reuse in
authenticated encryption schemes. Moreover, we allow the
attacker to compromise certain pairwise master keys.
Once a security protocol and a security property are speci-
ﬁed, Tamarin tries to prove the property by refuting its nega-
tion. In case Tamarin terminates, it either outputs a proof (if
the statement is true) or a counter example (if the statement is
false). A proof is provided in the form of a proof tree whereas
a counter example is provided in the form of a trace, i.e., a
sequence of steps that corresponds to a possible execution of
the protocol. Proofs and counter-examples can be inspected
in the graphical user interface of Tamarin.
An additional feature of Tamarin that we used heavily in
our formalization of WPA2 is the possibility to specify so-
called restrictions. A restriction is a logical formula (exactly
like the formulas used to specify security properties) that
must hold in every valid execution of the protocol. For exam-
ple, the following formula intuitively says that a sender must
increment replay counters for every message it sends:
∀ senderID counter1 counter2 t1 t2. (t1 < t2 ∧
SendsWithCounter(senderID,counter1)@t1 ∧
SendsWithCounter(senderID,counter2)@t2)
⇒ ∃ x. counter2 = counter1 + x
Restrictions allow to further deﬁne the semantics of a pro-
tocol in an intuitive way, often more succinctly than with only
multiset-rewriting rules.
3 Formal Model of WPA2
Our goal is to model the crucial components of WPA2 in a
faithful way, to capture a large class of possible attacks and
thus provide reliable security guarantees. In the following,
we explain the core of our formal model and further details
of the IEEE 802.11 standard together with notes on how we
modeled them. The core mechanisms of WPA2 are speciﬁed
in the standard in terms of state machines that interact with
each other. In particular, the standard deﬁnes:
• two state machines for the four-way handshake (one for
the supplicant and one for the authenticator),
• two state machines for the group-key handshake (again,
one for the supplicant and one for the authenticator),
• one state machine that speciﬁes how an authenticator
generates new group keys.
Moreover, when a supplicant intends to enter the previously-
mentioned WNM sleep mode, it has to ask the authenticator
for permission. Likewise, when the supplicant wants to exit
WNM sleep mode again, it has to inform the authenticator.
The corresponding message exchange can be speciﬁed by two
state machines, which leaves us with a total of seven state
machine types, which we all capture in our formal model.
USENIX Association
29th USENIX Security Symposium    5
(a) Supplicant State Machine.
(b) Authenticator State Machine.
Figure 4: Simpliﬁed Four-Way Handshake State Machines
In our setting, authenticators and supplicants are modeled
as devices that can start arbitrarily many concurrent threads.
Thereby, a particular authenticator thread can be associated
with a particular supplicant thread to establish a connection.
This means that an authenticator can communicate with ar-
bitrarily many supplicants in parallel (and vice versa), and
that one and the same authenticator can start arbitrarily many
sessions with one and the same supplicant. Moreover, we not
only allow multiple threads per supplicant or authenticator
but also multiple authenticators or supplicants as such.
To obtain strong security guarantees, we model a worst-
case scenario where possible. For example, in places where
the standard prescribes the use of a key that was derived
from the PTK, we actually use the PTK itself. This gives
the attacker more power as it can learn the full PTK in cases
where nonce reuse would usually only allow it to learn a (less
general) derived key; and any proofs we obtain give stronger
guarantees for a worst-case scenario. As a beneﬁcial side
effect, this also keeps our model simpler because it contains
fewer keys.
Our full formal model of WPA2 together with all proofs and
extensive documentation can be downloaded from the website
corresponding to this paper [14]. Due to space reasons, we do
not discuss every detail of our model here. Instead, we give
an overview of its critical components and how we modeled
them. In particular, we focus on (1) the four-way handshake,
(2) the group-key handshake, (3) WNM sleep mode, (4) the en-
cryption layer, (5) the replay-counter mechanisms, and (6) our
model of nonce reuse.
3.1 Four-Way Handshake
In Figure 4a, we show a simpliﬁed version of the suppli-
cant state machine for the four-way handshake (deﬁned on
page 2121 of the 802.11 standard [1]). Notice that the suppli-
cant can transition from state FT-PTK-INIT-DONE (where
the keys are installed) back to the state FT-PTK-CALC-
NEGOTIATING if it receives message 3. This can lead to key
reinstallations.
In our formal model, we encode the state machines using
multiset-rewriting rules that essentially encode the transition
relation between different states. For example, to encode that
the supplicant transitions from state FT-PTK-START to state
FT-PTK-CALC-NEGOTIATING when it receives message 3,
we use the following rule (see below what the facts used in
the rule stand for):
(cid:2) SuppState(~suppThreadID,’PTK_START’,
InEnc((cid:104)m3,mic_m3(cid:105),suppThreadID,oldPTK,Supp) (cid:3)
—(cid:2) SuppRcvM3(~suppThreadID, . . . ),
Eq(mic_m3,MIC(newPTK,m3)) (cid:3)→
(cid:2) SuppState(~suppThreadID,’PTK_CALC_NEGOTIATING’,
(cid:104)~suppID,~PMK,newPTK, . . .(cid:105)),
SuppSeesCtr(~suppThreadID,~PMK,ctr_m3),
(cid:104)~suppID,~PMK,newPTK, . . .(cid:105)) (cid:3)
In this rule, we have a fact SuppState that represents the
current state of a thread started by the supplicant. The
ﬁrst parameter, suppThreadID, uniquely identiﬁes the sup-
plicant and its thread. The “~” symbol is a type annota-
tion that restricts the variable to values that were previ-
ously freshly generated (by the protocol or the attacker). The
6    29th USENIX Security Symposium
USENIX Association
FT-INIT-R1-SAFT-PTK-STARTFT-PTK-CALC-NEGOTIATINGFT-PTK-INIT-DONEReceive M1Receive M3Receive M3Generate SNonceDerive PTK = KDF(PMK, ANonce, SNonce)Send M2PMK = preshared secretSend M4Install PTK with nonce 0Install GTK with received nonceReceive M1FT-INIT-R1-SAFT-PTK-STARTFT-PTK-CALC-NEGOTIATINGFT-PTK-INIT-DONESend M1PMK = preshared secretGenerate ANonceDerive PTK = KDF(PMK, ANonce, SNonce)Install PTK with nonce 0FT-PTK-CALC-NEGOTIATING3Send M3TimeoutReceive M2TimeoutReceive M2MIC of M2 is validReceive M4(a) Simpliﬁed Global Authenticator State Ma-
chine for GTKs.
(b) Simpliﬁed Supplicant State
Machine for the Group-Key
Handshake.
(c) Simpliﬁed Authenticator State Machine for the
Group-Key Handshake.
Figure 5: Group-Key-Related State Machines
second parameter (’PTK_START’ before the transition and
’PTK_CALC_NEGOTIATING’ after the transition) is the
name of the state, and the ﬁnal tuple contains the (data items
in the) current state, including the PMK, the newly derived
PTK, and other data items.
The fact InEnc is used to receive messages from the net-
work. Usually, in Tamarin you would model incoming mes-
sages from the network with the fact In, but in our case we
have to ensure that in the initial four-way handshake, mes-
sages are not encrypted whereas in later handshakes (rekeys)
they are actually encrypted. To do so, we modeled a dedi-
cated message queue that handles the encryption mechanism.
The InEnc fact is an important component of this mechanism.
Later on, in Section 3.4, we explain in detail how we modeled
the encryption layer.
Finally, there are the three action facts, SuppRcvM3,
SuppSeesCtr, and Eq. We need the ﬁrst one to prove lem-
mas that are required for verifying our model. The second
one, SuppSeesCtr, is used to model the semantics of the re-
play counter mechanism via restrictions; we explain details
of the replay-counter mechanism in Section 3.5. Finally, the
third one, Eq, is required for making sure that the message
integrity code appended to a message is valid.
Overall, we used six multiset-rewriting rules to encode the
state machine of the supplicant, not including mechanisms
such as key installation. The six rules correspond to the tran-
sitions in Figure 4a. The corresponding state machine for the
authenticator is given in Figure 4b ([1] p. 2116).
3.2 Group-Key Handshake
As already mentioned earlier, a group-key handshake is used
to distribute a group temporal key together with its nonce
(and an index, which we do not discuss here for the sake of
simplicity) to the supplicants. It involves three different state
machines: two state machines (one for the supplicant and one
for the authenticator) specify how messages are exchanged
during a handshake whereas one other state machine on the
side of the authenticator speciﬁes how new group keys are
generated and then sent to all the supplicants. We refer to this
third state machine as the global state machine ([1] p. 2067);
it is depicted in Figure 5a.
After initialization (‘GTK_INIT’), the authenticator enters
the state ‘SETKEYSDONE’. From this state, it can transi-
tion to the state ‘SETKEYS’, which triggers group-key hand-
shakes with all supplicants and thus leads to the execution
of the two other state machines, depicted in Figure 5b ([1],
speciﬁed implicitly on p. 2041) and Figure 5c ([1] p. 2066).
The standard speciﬁes two ways in which the creation and
distribution of a new group temporal key can be triggered:
(1) “The Supplicant may trigger a group key handshake by
sending an EAPOL-Key frame with the Request bit set to
1 and the type of the Group Key bit." ([1] p. 2040), or
(2) “The Authenticator may initiate the exchange when a
Supplicant is disassociated or deauthenticated." ([1] p.
2040)
We cover both cases in our model by allowing an authenticator
to non-deterministically start group-key handshakes whenever
it is in the ‘SETKEYSDONE’ state.
In our model, the state machines for the group-key hand-
shake and the state machines for the four-way handshake can
only be performed sequentially, i.e., we encode the state in a
group-key handshake with the same fact symbol as the state
in a four-way handshake: the fact symbol AuthState on the
side of the authenticator and the state symbol SuppState on
the side of the supplicant. Then, we encode transitions that
lead from the ‘FT-PTK-INIT-DONE’ state (the state after a
successful execution of the four-way handshake) to the start