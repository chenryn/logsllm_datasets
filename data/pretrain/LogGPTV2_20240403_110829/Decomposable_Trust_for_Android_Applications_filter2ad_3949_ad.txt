the
overhead was grievous (upwards of 60x). kprobes is not ideal
for our use-case because we are only interested in speciﬁc
348348
android framework
headless android
e
c
a
p
s
r
e
s
u
t
s
o
h
e
c
a
p
s
l
e
n
r
e
k
t
s
o
h
app
proxy
UID: 10000
app
(UID: 10000)
CVM kernel
anception layer
open
write
ioctl...
syscall table
display
decide
input
host kernel
Guest
K-Pages
Remapped
Guest
K-Pages
...
Fig. 4. Detailed Anception Architecture: Guest kernel pages are remapped
into host kernel space for quick marshaling
(cid:1)(cid:2)(cid:1)(cid:3)(cid:4)(cid:5)(cid:5)(cid:6)
(cid:7)(cid:8)(cid:9)(cid:10)(cid:6)(cid:11)(cid:12)(cid:13)(cid:6)(cid:1)(cid:2)(cid:1)(cid:14)(cid:9)(cid:10)(cid:14)(cid:15)(cid:16)
(cid:10)(cid:17)(cid:15)(cid:14)(cid:4)(cid:18)(cid:19)(cid:8)(cid:9)(cid:20)(cid:21)(cid:6)(cid:22)(cid:6)(cid:10)(cid:4)(cid:1)(cid:23)(cid:19)(cid:1)(cid:10)(cid:15)(cid:24)(cid:3)(cid:10)(cid:6)(cid:22)(cid:6)(cid:25)(cid:26)
(cid:25)(cid:26)(cid:6)(cid:27)(cid:6)(cid:12)
(cid:28)(cid:4)(cid:5)(cid:1)(cid:14)
(cid:29)(cid:15)(cid:24)(cid:14)
(cid:1)
(cid:1)
(cid:1)(cid:2)(cid:1)(cid:3)(cid:4)(cid:5)(cid:5)(cid:10)(cid:4)(cid:30)(cid:5)(cid:14)(cid:31)(cid:32)(cid:14)(cid:4)(cid:33)(cid:34)
(cid:9)(cid:14)(cid:35)(cid:1)(cid:2)(cid:1)(cid:3)(cid:4)(cid:5)(cid:5)(cid:10)(cid:4)(cid:30)(cid:5)(cid:14)(cid:31)(cid:32)(cid:14)(cid:4)(cid:33)(cid:34)
Fig. 5. Anception Syscall Interception Method: Uses a virtualization byte
(Redirection Entry)
processes system calls and not the whole system. Instead,
Anception introduces a one byte ﬁeld in the task_struct
of a process. We patch the system call handler (Figure 5) to
inspect this ﬁeld, known as RE, or the redirection entry. If
its value is non-zero, we index an alternate system call table
containing stubs that point to the CVM. The stubs perform
marshaling, pointer translation and make use of the page-
sharing scheme described above. Using a single byte, we
can virtualize the entire system call table of a process with
negligible overhead (Section VI-A).
3) Efﬁcient Call Execution. When a call is received by
the guest kernel, we need to schedule it on the correct proxy
for execution. Naively, one would notify a proxy and transfer
the call data from guest kernel to the proxy userspace. Then
the call would be issued, for a total of 4 context switches.
Instead, Anception forces the proxy to be in an interruptible
sleeping wait in guest kernel space. So, when a call comes, in,
we post the call data (after rewriting pointers if necessary) to
the proxy, that is waiting already in kernel space. It executes
the call from its context, and returns the result, all in kernel
space, thus saving 4 context switches.
4) Headless Android. We built a headless Android version
that runs in the CVM. The display devices were removed,
along with the set of services related to the UI such as the Win-
dowManager and InputMethodManager. This design reduces
memory pressure on the host when running the CVM because
no memory is reserved for framebuffers by the headless CVM
instance.
5) Device support. As a proof of concept, we implemented
a virtual storage and network device within the guest. Addi-
tional device support can be added using existing virtualization
techniques. An option is to build a virtual device node in the
guest and a bridge-driver to the host similar to the virtual
network device. Another option is to use Xen-style virtual-
ization or device namespaces [5], [45] and directly assign the
hardware device to the CVM. A third option is virtualization
at the device ﬁle layer [4].
V. SECURITY EVALUATION
We performed a qualitative and quantitative evaluation of
the security guarantees provided by Anception. First, we ana-
lyzed previously reported Android vulnerabilities that do local
privilege escalation to determine their effect under Anception.
Second, we compute the number of system calls redirected
to the CVM and quantify the reduction in attack surface of
the host. Third, we quantify the amount of lines of code
deprivileged by Anception’s design. Lastly, we measure the
size of Anception’s trusted code base.
A. Case Studies
We present examples of how Anception defeats different
classes of privilege escalation attacks that aim to break app
isolation.
1) Kernel level bugs: These types of bugs provide kernel
code and memory access to unprivileged processes. For in-
stance, a buggy driver’s device ﬁle could be left world-readable
and world-writeable. Speciﬁcally, the kernelchopper exploit
(CVE-2013-2596) [31] accessed kernel memory by mapping
the /dev/graphics/fb0 device node and then performed
code injection into the mapped kernel memory. On Anception,
the attempt to open the device node would be redirected to the
CVM and then fail in the CVM because the CVM does not
provide framebuffer access.
2) Privileged userspace bugs. The userspace runs different
privileged (uid 0) code and services that have been exploited
by malware [22], [37]. An example is the GingerBreak exploit
that targets the volume daemon (vold). The vold listens on a
netlink socket whose permissions were conﬁgured incorrectly
allowing anyone to send messages. A function in the code also
has a overﬂow vulnerability that permits a local attacker to
perform code injection. On Anception, the CVM provides an
alternate execution environment. Therefore, communication of
shellcode to the vold is redirected to the CVM environment
and the exploit manages to perform a code injection on the
CVM-version of vold. The host
this point. A
detailed walkthrough appears later in this section.
is safe at
In the above attacks, it is possible that an exploit compro-
mises the CVM. But, as discussed in Section III, stealing data
from other well-designed applications running on the CVM
is still difﬁcult because the CVM does not have access to
the memory pages of the apps or their UI events. Integrity,
349349
however, is not guaranteed. For example, the CVM can return
bad results from system calls [12].
If an exploit gains root access or control of the CVM, it
is then restricted to the privilege of the CVM. It cannot map
pages outside its assigned memory or even access a display
device.
B. Vulnerability Study
The CVE database for exploits involving Android contains
a signiﬁcant number of reported vulnerabilities that are root
exploits or other serious attacks that attempted to gain control
of the entire system. Of the 25 such vulnerabilities since
2010 that we located, three of them targeted privileged system
services only to obtain root access and the remaining 22
targeted kernel interfaces to escalate their privileges. Out of
25, our detailed analysis of their attack vector showed that
eight would have acquired root on the unprivileged CVM only
(and thus not be able to read memory pages of other apps
or monitor their UI interactions). Fifteen of these would have
failed completely to compromise anything. One such example
is the Exploid vulnerability that ﬁrst creates a special ﬁle on the
ﬁlesystem and then invokes the kernel hotplug functionality.
With Anception,
the
kernel hotplug executes on the host, thus the exploit fails to
accomplish anything. Our ﬁndings were that only 2 out of 25
of the vulnerabilities would have resulted in root access on the
host, but the exploits would have been easily detectable and
thus preventable with simple checks at the system call interface
on both Android and Anception (see Section V-A for further
details). Due to space constraints, we document our analysis
at http://goo.gl/brEbjW.
the ﬁle is created on the CVM, but
It is interesting to compare the above results with classical
virtualization in which all apps run in an unprivileged guest.
In that case, all of the above vulnerabilities could have ended
up compromising the guest, but not the host OS. While this
prevents host OS compromise, this would not have protected
the virtual memory or UI interactions of other apps within
the same guest. The key insight here is that it is important to
protect apps from each other with a smaller trusted base, not
just the OS from the apps.
C. Example Exploit Walkthrough – Gingerbreak
Gingerbreak is a local privilege escalation based on a
negative integer array access in vold, the volume manager on
Android. It has been used by a number of malware applications
[29] as a method to gain superuser privileges and nullify the
Android security model. Below, we summarize the steps that
a malicious app with Gingerbreak takes and the actions that
occur when that app is running on Anception.
1)
2)
Gingerbreak starts out by making a copy of itself
by reading /proc/self/exe and writing to the
malicious app’s private directory. With Anception, the
write will be redirected to the app’s private direc-
tory, which is an identically named and conﬁgured
directory in the CVM. Thus, a copy of the exploit’s
executable will be made in the CVM.
The exploit then proceeds to its information gather-
ing stage. The ﬁrst step here is to ﬁnd the vold
daemon by its process identiﬁer. It does this by
3)
4)
5)
exploit
then
procfs
searches
opening /proc/net/netlink. With Anception,
this open system call will be redirected to the
CVM and the exploit will read the CVM’s runtime
information of the netlink environment. We have an
identical environment in the container.
for
The
/system/bin/vold and makes a note of the
corresponding PID. Note that now, the Gingerbreak
exploit executing on the host has obtained the PID
of the vold executing inside the container.
The exploit proceeds to ﬁnd the address of system
and strcmp inside /system/bin/libc.so. As
applications execute on the host, and any useful
application will use libc, Anception simply allows
opens and reads to execute on the host for such
system code libraries.
The exploit, in the next stage of information gather-
ing, attempts to ﬁnd the Global Offset Table (GOT)
start address of vold. The Gingerbreak exploit does
this by opening the vold executable and using the
ELF-32 API to parse it. The exploit then looks for
the last piece of information to ﬁnd the storage device
that vold manages. System ﬁles are involved in the
reading process and as per our rules, we let them go
through on the host itself since these ﬁles are read-
only.
Coming to the actual privilege escalation, Gingerbreak
needs to ﬁnd the negative index value to send to vold so
as to achieve code execution. It uses a brute force approach
by trying values in a range and then scanning the logcat crash
logs for failed attempts. The exploit creates its own logcat log
ﬁle (which is redirected and created in the app’s container),
kills logcat (which is mirrored in the app’s container as well),
and then restarts it by specifying its own ﬁle as the log ﬁle (also
restarted in the app’s container). Note that as per Anception’s
rules, when a fork/exec occurs, we simply let the fork happen
on the host, but the new process is bound to the app’s container;
the sandbox is extended to the forked process. Since the new
logcat is bound to app’s container, it sends its output to a ﬁle
that only exists in that container.
Once an index has been calculated, Gingerbreak forms a
netlink message and uses socket calls to talk with the vold
process. With Anception, Gingerbreak sends shell code with
the negative index to vold inside the container. This causes
vold to execute the exploit binary that was copied into the
container. The exploit always checks on execution whether its
uid is 0. Since vold started it the second time in the container,
the root check succeeds and the exploit has succeeded inside
the container VM. At this point, if the exploit tries to corrupt
the virtual memory of an app, it will issue reads/writes on
a target app’s /proc/pid/mem. On Anception, the exploit
ends up reading the memory of the proxy and not the real app.
D. Attack Surface and TCB
Host system call interface. Anception reduces the attack
surface of the host kernel presented to apps by executing
many of the system calls on the CVM. To quantify this,
we analyzed 324 Linux system calls. Using our redirection
logic, Anception redirects 70.7% (ﬁle, network, IPC) calls
and executes 20.4% (process control, signal handlers) on the
350350
host always. Anception executes part of the functionality of