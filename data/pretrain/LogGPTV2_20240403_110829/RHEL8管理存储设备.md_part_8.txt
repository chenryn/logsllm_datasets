::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
为了清晰起见，以下示意图进行了简化，不反映您在实际安装 Red Hat
Enterprise Linux 时遇到的确切分区布局。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#using-unpartitioned-free-space_strategies-for-repartitioning-a-disk}使用未分区的空闲空间 {.title}
:::
在这种情况下，已定义的分区不会跨越整个硬盘，留下不属于任何定义的分区的未分配空间。下图显示了以下情况：
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531391533040}
**图 3.5. 有未分区的可用空间的磁盘**
::: figure-contents
::: mediaobject
![unpart 空间](images/unpart-space.png)
:::
:::
:::
在上例中，第一个图表示一个具有一个主分区的磁盘，以及一个具有未分配空间的未定义分区的磁盘，第二个图代表了具有两个定义分区且分配空间的磁盘。
未使用的硬盘也属于这一类别。[*唯一的区别在于，所有空间并非任何定义的分区的一部分*]{.emphasis}。
无论哪种情况，您都可以从未使用的空间创建必要的分区。这种情境很可能是新磁盘。大部分预安装的操作系统都被配置为占据磁盘驱动器上所有可用空间。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#using-space-from-an-unused-partition_strategies-for-repartitioning-a-disk}使用未使用分区中的空间 {.title}
:::
在这种情况下，您可以有一个或者多个不再使用的分区。下图显示了这种情况。
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531391524000}
**图 3.6. 有未使用分区的磁盘**
::: figure-contents
::: mediaobject
![未使用的分区](images/unused-partition.png)
:::
:::
:::
在上例中，第一个图表示带有未使用分区的磁盘，第二个图表示为 Linux
重新分配未使用的分区。
在这种情况下，您可以使用分配给未使用分区的空间。您必须删除分区，然后在其位置创建适当的
Linux 分区。您可以删除未使用的分区并在安装过程中手动创建新分区。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#using-free-space-from-an-active-partition_strategies-for-repartitioning-a-disk}使用活跃分区中的空闲空间 {.title}
:::
这是最常见的情况。它也是最难以处理的，因为即使您有足够的可用空间，它也当前被分配给已在使用的分区。如果您购买了一台带有预安装软件的计算机，硬盘很可能有一个大型分区存放操作系统和数据。
除了向系统添加新硬盘驱动器外，您还可以从破坏性和非破坏性重新分区中选择。
::: section
::: titlepage
### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#destructive-repartitioning_using-free-space-from-an-active-partition}破坏性重新分区 {.title}
:::
这会删除分区并创建几个较小的分区。您必须进行完整备份，因为原始分区中的所有数据都会被破坏。[*创建两个备份，使用验证（如果您的备份软件中可用），并在删除分区前尝试从备份中读取数据*]{.emphasis}。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
如果在该分区上安装了操作系统,必须重新安装它才能使用该系统。请注意，一些与预安装操作系统一起销售的计算机可能不包括安装介质来重新安装原始操作系统。[*在销毁原始分区及其操作系统安装前*]{.emphasis}，您应该检查是否对您的系统适用。
:::
为现有操作系统创建一个更小的分区后，您可以重新安装软件，恢复您的数据并启动
Red Hat Enterprise Linux 安装。
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531391509952}
**图 3.7. 在磁盘上进行破坏性重新分区动作**
::: figure-contents
::: mediaobject
![dstrct reprt](images/dstrct-reprt.png)
:::
:::
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
原有分区中的数据将会丢失。
:::
:::
::: section
::: titlepage
### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#non-destructive-repartitioning_using-free-space-from-an-active-partition}非破坏性重新分区 {.title}
:::
通过非破坏性重新分区，您将执行一个程序，使大分区减小而不丢失该分区中存储的任何文件。这个方法通常是可靠的，但在大型驱动器上可能非常耗时。
非破坏性重新分区过程很简单，它由三个步骤组成：
::: orderedlist
1.  压缩和备份现存数据
2.  重新划分现存分区的大小
3.  创建新分区
:::
每个步骤都会详细介绍。
::: section
::: titlepage
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#compressing-existing-data_non-destructive-repartitioning}压缩现有数据 {.title}
:::
第一步要压缩现存分区上的数据。这样做的原因是重新排列数据，以最大化分区\"结尾\"的可用空间。
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531391495552}
**图 3.8. 磁盘压缩**
::: figure-contents
::: mediaobject
![compression](images/compression.png)
:::
:::
:::
在上例中，第一个图在压缩前代表磁盘，压缩后的第二个图表代表磁盘。
这一步骤至关重要。如果没有它，数据的位置可能会阻止分区的大小调整为所需的范围。请注意，有些数据无法移动。在这种情况下，它会严重限制新分区的大小，并且可能强制您以破坏性方式重新分区磁盘。
:::
::: section
::: titlepage
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#resizing-the-existing-partition_non-destructive-repartitioning}重新定义现有分区大小 {.title}
:::
下图显示了实际调整大小的流程。虽然重新定义大小操作的实际结果会有所不同，具体取决于所使用的软件，但在大多数情况下，新释放空间用于创建与原始分区相同的类型未格式化的分区。
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531487048784}
**图 3.9. 分区在磁盘上调整大小**
::: figure-contents
::: mediaobject
![部分调整大小](images/part-resize.png)
:::
:::
:::
在上例中，第一个图表示重新定义大小前的分区，调整大小后的第二个图表。
务必要了解重新定义软件大小对新释放空间有什么作用，以便您可以执行相应的步骤。在此处演示的情形中，最好删除新的
DOS 分区并创建适当的 Linux 分区或分区。
:::
::: section
::: titlepage
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#creating-new-partitions_non-destructive-repartitioning}创建新分区 {.title}
:::
如[重新定义现存分区大小](#assembly_getting-started-with-partitions_managing-storage-devices.html#resizing-the-existing-partition_non-destructive-repartitioning "重新定义现有分区大小"){.link}
示例中所述，创建新分区可能也可能不是必需的。然而，除非重新分区软件支持安装
Linux 系统，您很可能需要删除在调整大小过程中创建的分区。
::: figure
[]{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531391470816}
**图 3.10. 带有最终分区配置的磁盘**
::: figure-contents
::: mediaobject
![nondestruct fin](images/nondestruct-fin.png)
:::
:::
:::
在上例中，第一个图表示配置前的磁盘，配置后是第二个图表。
:::
:::
:::
:::
:::
[]{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#assembly_overview-of-persistent-naming-attributes_managing-storage-devices}第 4 章 持久性命名属性概述 {.title}
:::
作为系统管理员，您需要引用使用持久性命名属性的存储卷来构建比多个系统引导更可靠存储设置。
::: section
::: titlepage
# []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#con_disadvantages-of-non-persistent-naming-attributes_assembly_overview-of-persistent-naming-attributes}非持久性命名属性的缺陷 {.title}
:::
Red Hat Enterprise Linux
提供识别存储设备的多种方法。在使用正确的选项时，务必要使用正确的选项来识别每个设备，以避免意外访问错误的设备，特别是在安装到或重新格式化驱动器时。
通常，Linux 中使用非持久性名称来指代存储设备，格式为
`/dev/sd(major number)(minor number)`{.literal}检测到后为每个设备分配主号码和副号码范围以及关联的
`sd`{.literal}
名称。这意味着，当设备检测顺序改变时，主号码和副号码范围与关联的
`sd`{.literal} 名称之间的关联可能会改变。
在以下情况下可能会在以下情况下更改排序：
::: itemizedlist
-   系统引导过程的并行化会根据每个系统引导的顺序检测到存储设备。
-   磁盘无法启动或响应 SCSI
    控制器。这会导致通常的设备探测不会检测到它。该磁盘不能被系统访问，后续的设备将具有它们的主号码和副号码范围，包括相关的
    `sd`{.literal} 名称。例如：如果没有检测到通常称为 `sdb`{.literal}
    的磁盘，通常称为 `sdc`{.literal} 的磁盘会显示为 `sdb`{.literal}。
-   SCSI 控制器（主机总线适配器或
    HBA）无法初始化，从而导致没有检测到与该 HBA
    连接的所有磁盘。所有连接到随后探测的 HBA
    的磁盘都会被分配不同的主号码和副号码范围，以及不同的关联的
    `sd`{.literal} 名称。
-   如果系统中存在不同类型的
    HBA，则驱动初始化顺序会改变。这会导致连接到那些 HBA
    的磁盘以不同顺序被检测到。当将 HBA 移动到系统的不同 PCI
    插槽时也会出现这种情况。
-   例如，在探测存储设备时，通过光纤通道、iSCSI 或 FCoE
    适配器连接到系统的磁盘可能无法访问，例如，存储阵列或干预交换机被关闭。如果存储阵列的在线需要比系统启动的时间更长，则系统在电源失败后重启时会出现这种情况。虽然某些光纤通道驱动程序支持一种机制来指定持久性
    SCSI 目标 ID 到 WWPN
    映射，但这不会导致主号码和副号码范围，以及相关的 `sd`{.literal}
    名称，它只提供一致的 SCSI 目标 ID 号。
:::
这使得您不希望在引用设备时使用主号码和副号码范围或者关联的
`sd`{.literal} 名称，比如在 `/etc/fstab`{.literal}
文件中。可能挂载了错误的设备，并可能导致数据崩溃。
然而，偶尔也会需要引用 `sd`{.literal}
名称，即使使用了其它机制，比如当设备报告错误时。这是因为 Linux
内核在针对该设备的内核信息中使用 `sd`{.literal} 名称（以及 SCSI
host/channel/target/LUN 标题）。
:::
::: section
::: titlepage
# []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#file-system-and-device-identifiers_assembly_overview-of-persistent-naming-attributes}文件系统和设备识别符 {.title}
:::
这部分解释了识别文件系统和块设备的持久性属性之间的区别。
### []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#file_system_identifiers}文件系统识别符
文件系统标识符与在块设备中创建的特定文件系统绑定。标识符也作为文件系统的一部分保存。如果您将文件系统复制到不同的设备中，它仍采用相同的文件系统识别符。另外，如果您重写该设备，比如使用
`mkfs`{.literal} 程序进行格式化，则设备会丢失该属性。
文件系统识别符包括：
::: itemizedlist
-   唯一标识符（UUID）
-   标签
:::
### []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#device_identifiers}设备识别符
设备标识符与块设备绑定：例如磁盘或者分区。如果您重写了该设备，比如使用
`mkfs`{.literal}
程序进行格式化，则该设备会保留属性，因为它没有存储在文件系统中。
设备识别符包括：
::: itemizedlist
-   World Wide Identifier (WWID)
-   分区 UUID
-   序列号
:::
### []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#recommendations}建议
::: itemizedlist
-   有些文件系统（比如逻辑卷）会跨越多个设备。红帽建议您使用文件系统识别符而不是设备标识符访问这些文件系统。
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#con_device-names-managed-by-the-udev-mechanism-in-dev-disk-_assembly_overview-of-persistent-naming-attributes}使用 /dev/disk/ 中的 udev 机制管理的设备名称 {.title}
:::
本节列出了 `udev`{.literal} 服务在 `/dev/disk/`{.literal}
目录中提供的不同类型的持久命名属性。
`udev`{.literal} 机制用于 Linux
中所有设备，而不仅仅用于存储设备。对于存储设备，Red Hat Enterprise Linux
包含 `udev`{.literal} 规则，它会在 `/dev/disk/`{.literal}
目录中创建符号链接。这可让您使用以下方法指向存储设备：
::: itemizedlist
-   其内容
-   唯一标识符
-   它们的序列号。
:::
虽然 `udev`{.literal}
命名属性是持久的，但它们在系统重启后不会自行改变，但有些也可以配置。
::: section
::: titlepage
## []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#file-system-identifiers_assembly_overview-of-persistent-naming-attributes}文件系统识别符 {.title}
:::
### []{#assembly_overview-of-persistent-naming-attributes_managing-storage-devices.html#the_uuid_attribute_in_dev_disk_by_uuid}/dev/disk/by-uuid/ 中的 UUID 属性
[**此目录中的条目提供一个符号链接名称，通过存储在该设备上的内容（即数据）中的唯一标识符**]{.strong}