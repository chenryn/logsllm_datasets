## londiste3 copy table' snapshot & PostgreSQL logical replication's snapshot 不同之处  
### 作者                             
digoal                           
### 日期                                                                                                                                             
2015-09-08                                                                        
### 标签                                                                          
PostgreSQL , londiste3 , 快照 , snapshot , logical replication , 逻辑复制 , 队列复制      
----                                                                                                                                          
## 背景           
PostgreSQL有物理复制，也有逻辑复制。  
物理复制是持续的从XLOG读取block data在对应的物理文件实行recovery的过程。  
建立物理备份的standby时，会强制开启一个检查点，然后拷贝数据文件，拷贝完后的数据库其实是不一致的，没有关系，只要从检查点开始的所有XLOG都在，就可以恢复。检查点我们可以通俗的认为是一个snapshot。  
那么对于逻辑复制，snapshot又是怎么来的呢？  
我们想象一下，在备份数据库时，会堵塞数据库的读写操作吗？当然不会，所以创建逻辑备份库，也不能堵塞数据库的读写操作。  
那么，怎样保证数据一致性呢？  
例如常见的逻辑备份工具londiste3，它支持表级别的创建复制对象。还有PostgreSQL的基于XLOG的逻辑复制，它们是怎么保证创建基础后可以准确的接上REDO SQL。  
本文主要谈一下londiste3和PostgreSQL逻辑流复制的snapshot的差别。  
首先谈一下londiste3，它可以在http://git.postgresql.org/gitweb/?p=skytools.git;a=summary这里下载。  
londiste3的原理是使用触发器记录行的变更，包括变更前和变更后的记录。  
初始化前，创建触发器，记录所有的变更，（由于创建触发器是DDL操作，在建好触发器时，所有这个表相关的事务一定是已经结束了的），在拷贝初始化数据的事务中，先使用txid_current_snapshot()获得当前的事务快照，然后获取数据。  
数据获取完后，就可以从触发器跟踪的REDO记录开始持续恢复了，快照的作用是判断事务产生的REDO是否需要应用。  
例如：  
```  
0. 创建触发器，开始记录表的REDO SQL。  
1. 未结束事务1,2,3,4   
2. begin;  
3. 获得快照  1:5:1,2,3,4    
4. 开始创建初始化数据  
5. 开启事务6,7,8,9   结束事务6   
6. 结束事务1    
7. end;  // 结束创建初始化数据  
8. 回滚事务  2,7   
9. 结束事务  3,4,8,9   
```  
以上是一个非常容易遇到的情况，在创建初始化数据前，可能有未结束的事务，开始创建初始化数据后，可能有新的事务发起，回归等等情况。  
通过快照就可以很好的处理这些情况，skytools相关的代码。  
```  
python/londiste/table_copy.py  
	# get snapshot  
        src_curs.execute("select txid_current_snapshot()")  
        snapshot = src_curs.fetchone()[0]  
        src_db.commit()  
        # restore old behaviour  
        src_db.set_isolation_level(oldiso)  
        src_db.commit()  
        tbl_stat.change_state(TABLE_CATCHING_UP)  
        tbl_stat.change_snapshot(snapshot)  
        self.save_table_state(dst_curs)  
python/londiste/playback.py  
    def change_snapshot(self, str_snapshot, tag_changed = 1):  
        """Set snapshot."""  
        if self.str_snapshot == str_snapshot:  
            return  
        self.log.debug("%s: change_snapshot to %s", self.name, str_snapshot)  
        self.str_snapshot = str_snapshot  
        if str_snapshot:  
            self.from_snapshot = skytools.Snapshot(str_snapshot)  
        else:  
            self.from_snapshot = None  
        if tag_changed:  
            self.ok_batch_count = 0  
            self.last_tick = None  
            self.changed = 1  
python/skytools/sqltools.py  
#  
# Support for PostgreSQL snapshot  
#  
class Snapshot(object):  
    """Represents a PostgreSQL snapshot.  
    Example:  
    >>> sn = Snapshot('11:20:11,12,15')  //  最小未提交事务11, 最小未分配事务20, 当前未提交事务11,12,15  
    >>> sn.contains(9)  // 该snapshot是否包含事务9的内容, 是，因为最小未提交事务是11，9已经提交了。  
    True  
    >>> sn.contains(11)  // 该snapshot是否包含事务11的内容, 否，因为11还未提交  
    False  
    >>> sn.contains(17)  // 该snapshot是否包含事务9的内容, 是，已提交  
    True  
    >>> sn.contains(20)  // 该snapshot是否包含事务9的内容, 否，未分配  
    False  
    """  
    def __init__(self, str):  
        "Create snapshot from string."  
        self.sn_str = str  
        tmp = str.split(':')  
        if len(tmp) != 3:  
            raise Exception('Unknown format for snapshot')  
        self.xmin = int(tmp[0])  
        self.xmax = int(tmp[1])  
        self.txid_list = []  
        if tmp[2] != "":  
            for s in tmp[2].split(','):  
                self.txid_list.append(int(s))  
    def contains(self, txid):  
        "Is txid visible in snapshot."  
        txid = int(txid)  
        if txid = self.xmax:  
            return False  
        if txid in self.txid_list:  
            return False  
        return True  
```  
通过快照来判断，哪些事务的变更是需要APPLY的，哪些事务的变更是不需要APPLY的。  
用到的txid_current_snapsho()函数介绍如下：  
http://www.postgresql.org/docs/devel/static/functions-info.html  
Name|	Description  
---|---  
xmin|	Earliest transaction ID (txid) that is still active. All earlier transactions will either be committed and visible, or rolled back and dead.  
xmax|	First as-yet-unassigned txid. All txids greater than or equal to this are not yet started as of the time of the snapshot, and thus invisible.  
xip_list|	Active txids at the time of the snapshot. The list includes only those active txids between xmin and xmax; there might be active txids higher than xmax. A txid that is xmin slot->data.confirmed_flush = ctx->reader->EndRecPtr;  
......  
```  
src/backend/replication/logical/logical.c  
```  
/*  
 * Returns true if an consistent initial decoding snapshot has been built.  
 */  
bool  
DecodingContextReady(LogicalDecodingContext *ctx)  
{  
        return SnapBuildCurrentState(ctx->snapshot_builder) == SNAPBUILD_CONSISTENT;  
}  
```  
src/include/replication/snapbuild.h  
```  
typedef enum  
{  
        /*  
         * Initial state, we can't do much yet.  
         */  