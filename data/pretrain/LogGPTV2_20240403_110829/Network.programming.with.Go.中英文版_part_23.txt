translations := req.FormValue("translations")
fmt.Println("word is ", word, " card is ", cardName,
" simplified is ", simplified, " pinyin is ", pinyin,
" trad is ", traditional, " trans is ", translations)
flashcards.AddFlashEntry(cardName, word, pinyin, simplified,
traditional, translations)
// add another card?
addFlashCards(rw, cardName)
}
func listFlashCards(rw http.ResponseWriter, req *http.Request) {
flashCardsNames := flashcards.ListFlashCardsNames()
t, err := template.ParseFiles("html/ListFlashcards.html")
if err != nil {
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
t.Execute(rw, flashCardsNames)
}
/*
* Called from ListFlashcards.html on form submission
*/
func manageFlashCards(rw http.ResponseWriter, req *http.Request) {
set := req.FormValue("flashcardSets")
order := req.FormValue("order")
action := req.FormValue("submit")
half := req.FormValue("half")
fmt.Println("set chosen is", set)
fmt.Println("order is", order)
fmt.Println("action is", action)
cardname := "flashcardSets/" + set
//components := strings.Split(req.URL.Path[1:], "/", -1)
//cardname := components[1]
//action := components[2]
fmt.Println("cardname", cardname, "action", action)
if action == "Show cards in set" {
showFlashCards(rw, cardname, order, half)
} else if action == "List words in set" {
listWords(rw, cardname)
} else if action == "Add cards to set" {
addFlashCards(rw, set)
}
}
func showFlashCards(rw http.ResponseWriter, cardname, order, half string) {
fmt.Println("Loading card name", cardname)
cards := new(flashcards.FlashCards)
//cards.Load(cardname, d)
//flashcards.SaveJSON(cardname + ".json", cards)
flashcards.LoadJSON(cardname, &cards)
if order == "Sequential" {
cards.CardOrder = "SEQUENTIAL"
} else {
cards.CardOrder = "RANDOM"
}
fmt.Println("half is", half)
if half == "Random" {
cards.ShowHalf = "RANDOM_HALF"
} else if half == "English" {
cards.ShowHalf = "ENGLISH_HALF"
} else {
cards.ShowHalf = "CHINESE_HALF"
}
fmt.Println("loaded cards", len(cards.Cards))
fmt.Println("Card name", cards.Name)
//t := template.New("PinyinTemplate")
t := template.New("ShowFlashcards.html")
t = t.Funcs(template.FuncMap{"pinyin": templatefuncs.PinyinFormatter})
t, err := t.ParseFiles("html/ShowFlashcards.html")
if err != nil {
fmt.Println(err.Error())
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
err = t.Execute(rw, cards)
if err != nil {
fmt.Println("Execute error " + err.Error())
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
}
func listWords(rw http.ResponseWriter, cardname string) {
fmt.Println("Loading card name", cardname)
cards := new(flashcards.FlashCards)
//cards.Load(cardname, d)
flashcards.LoadJSON(cardname, cards)
fmt.Println("loaded cards", len(cards.Cards))
fmt.Println("Card name", cards.Name)
//t := template.New("PinyinTemplate")
t := template.New("ListWords.html")
if t.Tree == nil || t.Root == nil {
fmt.Println("New t is an incomplete or empty template")
}
t = t.Funcs(template.FuncMap{"pinyin": templatefuncs.PinyinFormatter})
t, err := t.ParseFiles("html/ListWords.html")
if t.Tree == nil || t.Root == nil {
fmt.Println("Parsed t is an incomplete or empty template")
}
if err != nil {
fmt.Println("Parse error " + err.Error())
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
err = t.Execute(rw, cards)
if err != nil {
fmt.Println("Execute error " + err.Error())
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
fmt.Println("No error ")
}
func addFlashCards(rw http.ResponseWriter, cardname string) {
t, err := template.ParseFiles("html/AddWordToSet.html")
if err != nil {
fmt.Println("Parse error " + err.Error())
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
cards := flashcards.GetFlashCardsByName(cardname, d)
t.Execute(rw, cards)
if err != nil {
fmt.Println("Execute error " + err.Error())
http.Error(rw, err.Error(), http.StatusInternalServerError)
return
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
10.7 Other Bits: JavaScript and CSS 其他: JavaScript 和 CSS
On request, a set of flashcards will be loaded into the browser. A much abbreviated
set is shown below. The display of these cards is controlled by JavaScript and CSS
files. These aren't relevant to the Go server so are omitted. Those interested can
download the code.
根据需求,flashcards 组将会被加载到浏览器中。下面展示了一个简短的 HTML 页。cards 的显示由
JavaScript 和CSS 文件控制。这些都不是和Go 服务器相关的技术所以在这省略了。有兴趣的可以
下载代码。
Flashcards for Common Words
Flashcards for Common Words
hello
nǐ hǎo
你好
你好
hello 
hi 
how are you? 
hello (interj., esp. on telephone)
wèi
喂
喂
hello (interj., esp. on telephone) 
hey 
to feed (sb or some animal) 
Press  to continue
 Return to Flash Cards list
Copyright Jan Newmarch, PI:EMAIL
版权所有 Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 11 第十一章
HTML 关于 HTML
The Web Server was originally created to serve HTML documents. Now it is used to
serve all sorts of documents as well as data of different kinds. Nevertheless, HTML
is still the main document type delivered over the Web. Go has basic mechanisms for
parsing HTML documents, which are covered in this chapter
Web 服务器的建立最开始是用来提供HTML 文件服务的。现在它能为各种类型的文档和各种不同类型
的数据提供服务。然而，HTML 依然是互联网网络中传递的主要文档类型。Go 有一套基本机制来解析
HTML，本章主要阐述此内容。
11.1 Introduction 介绍
The Web was originally created to serve HTML documents. Now it is used to serve all
sorts of documents as well as data of dirrent kinds. Nevertheless, HTML is still
the main document type delivered over the Web
Web 服务器的建立最开始是用来提供HTML 文件服务的。现在它为各种类型的文档和各种不同类型的
数据提供服务。然而，HTML 仍然是互联网网络中传递的主要文档类型。
HTML has been through a large number of versions, and HTML 5 is currently under
development. There have also been many "vendor" versions of HTML, introducing tags
that never made it into standards.
HTML 经历了大量的版本变迁，HTML5 目前还在开发阶段。此外出现不少“独立供应商”版的 HTML，但
引入的标签从来没有做成标准。
HTML is simple enough to be edited by hand. Consequently, many HTML documents are
"ill formed", not following the syntax of the language. HTML parsers generally are
not very strict, and will accept many "illegal" documents.
HTML 足够简单，以至于可以纯手工编写。因此，许多 HTML 文件格式不规范，没有遵守标准准则的
语法。HTML 解析器通常也不是很严格，而且能接受大多数格式“不严格”的文件。
There wasn't much in earlier versions of Go about handling HTML documents - basically,
just a tokenizer. The incomplete nature of the package has led to its removal for
Go 1. It can still be found in theexp (experimental) package if you really need it.
No doubt some improved form will become available in a later version of Go, and then
it will be added back into this book.
在早期版本的Go 没有太多关于处理 HTML 文件的细节--基本上只是一个分词器。不完整的原始包在
Go 1 的版本中已移除。如果你真的需要它，仍然可以在 exp(试验)包中找到它。 毫无疑问，Go 未
来版本在这方面会有一些改进的地方，那么到时将会添加到本书中。
There is limited support for HTML in the XML package, discussed in the next chapter.
在XML 包中对 HTML 的支持是有限的，在下一章将会讨论。
11.2 Conclusion 结论
There isn't anything to this package at present as it is still under development.
目前这个包没有内容，因为它目前仍处于开发阶段。
Copyright Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 12 第十二章
XML
XML is a significant markup language mainly intended as a means of serialising data
structures as a text document. Go has basic support for XML document processing.
XML 是一种重要的标记语言，旨在把数据结构序列化成文本文档。Go 基本支持XML 文档处理。
12.1 Introduction 介绍
XML is now a widespread way of representing complex data structures serialised into
text format. It is used to describe documents such as DocBook and XHTML. It is used
in specialised markup languages such as MathML and CML (Chemistry Markup Language).
It is used to encode data as SOAP messages for Web Services, and the Web Service
can be specified using WSDL (Web Services Description Language).
现在XML是一个用序列化的文本格式表现复杂数据结构的普遍方式。它被用来描述文档例如DocBook
和XHTML。它还用于描述专用标记语言如MathML 和CML(化学标记语言)。Web 服务中它还用来将数
据编码成SOAP 消息,Web 服务也可以指定使用WSDL(Web 服务描述语言)。
At the simplest level, XML allows you to define your own tags for use in text documents.
Tags can be nested and can be interspersed with text. Each tag can also contain
attributes with values. For example,
在最简单的层次上,XML 允许您定义您个人标记用于文本文档。标签可以嵌套,也穿插在文本里。每个
标记也可以包含属性与值。例如,
 Newmarch 
 Jan 
PI:EMAIL
PI:EMAIL
The structure of any XML document can be described in a number of ways:
任何XML 文档的结构可以用多种方式描述:
 A document type definition DTD is good for describing structure
 XML schema are good for describing the data types used by an XML document
 RELAX NG is proposed as an alternative to both
 一个文档类型定义DTD 有利于表现数据结构
 在一个XML 文档中，使用XML 模式有利于描述数据类型
 RELAX NG 提出了替代方案
There is argument over the relative value of each way of defining the structure of
an XML document. We won't buy into that, as Go does not suport any of them. Go cannot
check for validity of any document against a schema, but only for well-formedness.
人们总会争论定义XML 文档结构的每一个方式的好坏。我们不会陷入其中,因为Go 不支持其中任何
一个。Go 不能检查任何文档模式的有效性，但只知道良构性。
Four topics are discussed in this chapter: parsing an XML stream, marshalling and
unmarshalling Go data into XML, and XHTML.
在本章中讨论四个主题:解析一个XML 流,编组和解组Go 数据成为XML 和XHTML。
12.2 Parsing XML 解析 XML
Go has an XML parser which is created using NewParser. This takes an io.Reader as
parameter and returns a pointer to Parser. The main method of this type is Token which
returns the next token in the input stream. The token is one of the