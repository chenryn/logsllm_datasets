     filename="poc.eml"
    Subject: [REDACTED]
    To: PI:EMAIL
    From: "Dr.-Ing. Mario Heiderich" 
    Content-Type: multipart/signed; micalg=pgp-sha256; protocol="application/pgp-signature"; boundary="PWpC1qlx6dsQoTPWMjFMqgqCjLq1TuoEA"
    This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
    --PWpC1qlx6dsQoTPWMjFMqgqCjLq1TuoEA
    Content-Type: multipart/mixed; boundary="MkhracRKbd653uoMlB5pR9frBfLDD2DJK"; protected-headers="v1"
    From: "Dr.-Ing. Mario Heiderich" 
    To: PI:EMAIL
    Subject: [REDACTED]
    --MkhracRKbd653uoMlB5pR9frBfLDD2DJK
    Content-Type: text/plain; charset=utf-8
    Content-Language: en-US
    Content-Transfer-Encoding: quoted-printable
    Hi,
    [REDACTED]
    Cheers,
    =2Emario
    --MkhracRKbd653uoMlB5pR9frBfLDD2DJK--    --PWpC1qlx6dsQoTPWMjFMqgqCjLq1TuoEA
    Content-Type: application/pgp-signature; name="signature.asc"
    Content-Description: OpenPGP digital signature
    Content-Disposition: attachment; filename="signature.asc"
    -----BEGIN PGP SIGNATURE-----    Version: GnuPG v2
    iQIcBAEBCAAGBQJZdwtDAAoJEMJshYCQ9wra/7kP/20hr3PCSO4Lm0eZ6OCpuhGj
    p04h38Mx6Jxrn+i85yMA/Bk7aU48spraWNm9cVBv8sFnVLdSTs9IiNcNsEznUCM3
    KMxkva+E8u3+uuOZEGlo70L/c8EFIkXT2TrW241ZMJFLzhvcAaQLKD4V+cnsJ6CS
    bV9v0WYfFH3sS4ImTj1VPVGKfLgYQnxZK/OTnxVM7oHwb4ibshqGBic2L4C4afDI
    K8MRc4Fek+llKPBqH/1Am72tTyyweGFyRAfJJ5BfxJTrSSJ08KPMya6NHQq4QG0A
    63Sy1Ji1l5j9BoK+Y7VolwmONDnBYLnyTkN/UoPl/6C7rA8SVQzuQtG/qihXete6
    6vrlwEADuS904BZv3BJuhwIw9irmqFSjMFcx4gRldZzvyII7MD7IvtSouSsbwSTZ
    3swiifz5fNRUrKq4yNarLCqOKbXn+W0mSjS6Ft23wnMosadGNyT49t6f9ZPILpuB
    kL2Cro1Sihsrryzg/Y5NG52Dy2BFH7VfBHjIIl++1dTU6nnfGCZ3XWdnXB5sX2BH
    i+cZ2GFiu05ICgi7tdIAjL7Zwh0P1Pf4uAwZ4o5F7Ilxo1ez5LFMTPMoVa1R1E8t
    bS/DwqhzTad5EXhhJknpNDt8VZJpx+XjHbD+QW4z8OTlLSVQ2UYnLZXqQsgzK8yE
    hGGHg2U2a9dCF7psD2Cf
    =VrRa
    -----END PGP SIGNATURE-----    --PWpC1qlx6dsQoTPWMjFMqgqCjLq1TuoEA--    --------------AEA294334A39599F740CD34A--    
根据前面的分析，我们建议相关软件在签名验证流程中修复邮件解析过程中的问题，需要确认整封邮件都经过签名，而不单单是邮件附件经过签名。
## 三、 其他问题
这部分内容中，我们会介绍一些值得关注的问题，虽然这些问题不会直接与漏洞利用工具关联起来，但攻击者可以借助这些漏洞进一步实现恶意目标。这些问题中，大多数为存在漏洞的代码片段，攻击者无法通过简单的方法来调用这些代码。总而言之，虽然的确存在漏洞，但攻击者不一定能够使用相应的漏洞利用技术。
**3.1 TBE-01-001 Enigmail：不安全的随机密钥生成过程（ _低_ ）**
Enigmail在实现[pEp（pretty Easy
privacy）](https://en.wikipedia.org/wiki/Pretty_Easy_privacy)过程中，调用了JavaScript的`Math.Random()`函数来生成安全令牌。然而这并不是一种非常[安全](https://stackoverflow.com/questions/5651789/is-math-random-cryptographically-secure)的伪随机数生成方法。
**受影响的文件：**
    /enigmail-source/package/rng.jsm
**调用位置：**
    /enigmail-source/packagepEpAdapter.jsm:
**受影响的代码：**
    gSecurityToken = EnigmailRNG.generateRandomString(40);
    [...]
    /**
    * Create a string of random characters with numChars length
    */
    function generateRandomString(numChars) {
     let b = "";
     let r = 0;
     for (let i = 0; i 3.2 TBE-01-003 Enigmail：可用于拒绝服务的正则表达式漏洞（ _低_ ）**
正则表达式经常用来解析用户输入数据或者`gnupg`的输出数据，使用范围太过于广泛。因此，这也让拒绝服务（Denial of
Service，DoS）攻击有了可乘之机。在我们发现的这些漏洞中，软件会将任意长度的附件头部、URL协议头部以及邮件地址链接当成有效输入数据。因此，攻击者可以将非常巨大的一个字符串传递给Enigmail内部处理函数，在客户端造成拒绝服务攻击，最终导致客户端崩溃。
我们并没有发现这个问题会带来更加严重的后果，因此我们不认为这个问题会对用户安全造成任何实际层面上的影响。除了给用户正常工作流程带来干扰之外，这个漏洞无法造成更多危害。
**受影响的文件：**
    /enigmail-source/package/decryption.jsm
**受影响的代码：**
    if (attachmentHead.match(/-----BEGIN PGP w+ KEY BLOCK-----/)) {
    // attachment appears to be a PGP key file
**受影响的文件：**
    /enigmail-source/ui/content/enigmailMessengerOverlay.js
**受影响的代码：**
    // Hyperlink URLs
    var urls = text.match(/b(http|https|ftp):S+s/g);
**受影响的文件：**
    /enigmail-source/ui/content/enigmailMessengerOverlay.js
**受影响的代码：**
    // Hyperlink email addresses
    var addrs = text.match(/b[A-Za-z0-9_+.-]+@[A-Za-z0-9.-]+b/g);
根据我们检测到的这些问题，Enigmail可以使用匹配固定长度输入数据的正则表达式来替换匹配任意长度输入数据的这些正则表达式。比如，不同的场景可以处理不同的输入数据长度，通常情况下预先处理1到1024个字符长度即可满足要求。对于PGP头部而言，只需要预先处理1到10个字符就足以满足要求。