3 r1ch
rich
rich
4096 Oct
44 Oct 17 22:20 temp,N5F306
1.7 22 :20
- - /
rW
1r1ch
[dlr,ouT8s8]$ cat temp.N5F306
rich
44 Oct 17 22:20 temp .SQa1b7
Thla is a test line of Gata for
temp .N5F306
[Glx,ouT8s8]$ cat temp SQalb7
Thla ia a test
:1ine of data for temp.SQalb7
[dlr, out8s8]$
这段脚本在当前目录创建了一个目录，然后它用ca命令进人该目录，并创建了两个临时文件。
之后这两个临时文件被分配给文件描述符，用来存储脚本的输出。
15.8
记录消息
将输出同时发送到显示器和日志文件，这种做法有时候能够派上用场。你不用将输出重定向
两次，只要用特殊的tee命令就行。
tee命令相当于管道的一个T型接头。它将从STDIN过来的数据同时发往两处。一处是
STDOUT，另一处是tee命令行所指定的文件名：
tee filename
由于tee会重定向来自sTDIN的数据，你可以用它配合管道命令来重定向命令输出。
$ date l tee testfile
Sun 0ct 19 18:56:21 EDr 2014
$ cat testfile
Sun 0ct 19 18:56:21 EDT 2014
输出出现在了STDOUT中，同时也写人了指定的文件中。注意，默认情况下，tee命令会在每
次使用时覆盖输出文件内容。
$ who l tee teatrlle
rich
pta/0
2014-1017 18:41 (192.168.1.2)
$ cat testfile
rich
pta/0
20141017 18 :41 (192 , 168.1.2)
如果你想将数据追加到文件中，必须用-a选项。
$ Gate l tee -a testfile
Sun Oct 19 18:58:05 EDT 2014
$ cat testfile
rich
pta/0
20141017 18 : 41 (192 , 168.1.2)
---
## Page 343
328
第15章
呈现数据
Sun 0ct 19 18:58:05 EDT 2014
利用这个方法，既能将数据保存在文件中，也能将数据显示在屏幕上。
$ cat test22
using the tee command for logging
1/bin/bash
temprile=test22f11e
echo *rhia la the atart of the test* l tee Stenpfile
echo *rhis la the second line of the teat* l tee -a Stenpfile
Thia la the ataxt of the test
$./test22
This la the second llne of the test
This la the end of the test
$ cat test22file
Thia la the second line of the test
This la the start of the test
Thia la the end of the test
现在你就可以在为用户显示输出的同时再永久保存一份输出内容了。
15.9实例
文件重定向常见于脚本需要读人文件和输出文件时。这个样例脚本两件事都做了。它读取.csV
格式的数据文件，输出SQLINSERT语句来将数据插人数据库（参见第25章）。
shell脚本使用命令行参数指定待读取的.csv文件。.csv格式用于从电子表格中导出数据，所以
你可以把数据库数据放人电子表格中，把电子表格保存成.csv格式，读取文件，然后创建INSERT
语句将数据插人MySQL数据库。
脚本内容如下。
218 1e$
#1 /bin/bash
 read file and create INSERT statenents for MySQL
outfi1es*nenbere.aq1*
IFS=′, *
vhile read Lnane fnane address city state zip
do
cat >> $outf11e > $outfile << E0F
这条语句中包含一个输出追加重定向（双大于号）和一个输人追加重定向（双小于号）。输
出重定向将cat命令的输出追加到由Soutfile变量指定的文件中。cat命令的输人不再取自标准
输人，而是被重定向到脚本中存储的数据。EOF符号标记了追加到文件中的数据的起止。
INSERT INTO members (lname, fname, address, city, state, zip) vAL/ES
('$lname', *$fname', '$address', '$city', *$state', *$zip*) J
上面的文本生成了一个标准的SQLINSERT语句。注意，其中的数据会由变量来替换，变量
中内容则是由read语句存人的。
所以基本上while循环一次读取一行数据，将这些值放人INSERT语句模板中，然后将结果
输出到输出文件中。
在这个例子中，使用以下输人数据文件。
Blum, Richard, 123 Ma.in St , Chicago, IL, 60601
$ cat members, csv
Blum, Barbara, 123 Main St , Chicago, IL, 606 01
Bresnahan, Tinothy , 456 0ak Ave. , Columbus, OH, 43201
Bresnahan, Christine, 456 Oak Ave., Co1unbus, 0H, 43201
运行脚本时，显示器上不会出现任何输出：
$/test23 < members,csv
但是在members.sql输出文件中，你会看到如下输出内容。
$ cat memibers.sq]
INSERT INTO menbers (lname, fname, address, city,state, zip) VALIEs (*Blun′
Richard′,*123 Main St,*,*Chicago*,*IL′,60601*11
INSERT INTO menbers (lname, fname, address, city,8tate, zip) VALIEs (*Blun′
‘Barbara′,*123 Main St,*,*Chicago′,*IL′,60601*11
Christine*, *456 Oak Ave.*,*Columbus′,*OH',*43201*)
INSERT INTO menbers (1name, fname, address,city,state, zip) VALVES (*Bresnahan′,
INSERT INTO menbers (lname, fname, address, city, 8tate, zip) VALiEs (*Bresnahan′
*Timothy′, *456 0ak Ave. *, 'Columibus*, *0H', *43201*) }
结果和我们预想的一样！现在可以将members.sql文件导人MySQL数据表中了（参见第25章）。
---
## Page 345
330第15章呈现数据
15.10小结
在创建脚本时，理解了bashshell如何处理输人和输出会给你带来很多方便。你可以改变脚本
获取数据以及显示数据的方式，从而在任何环境中定制脚本。脚本的输人/输出都可以从标准输
人（STDIN）/标准输出（STDOUT）重定向到系统中的任意文件。除了STDOUT，你可以通过重定
向STDERR输出来重定向由脚本产生的错误消息。这可以通过重定向与STDERR输出关联的文件描
述符（也就是文件描述符2）来实现。可以将STDERR输出和STDOUT输出到同一个文件中，也可
以输出到完全不同的文件中。这样就可以将脚本的正常消息同错误消息分离开。
bash shell允许在脚本中创建自己的文件描述符。你可以创建文件描述符3-9，并将它们分配
给要用到的任何输出文件。一旦创建了文件描述符，你就可以利用标准的重定向符号将任意命令
的输出重定向到那里。
bashshell也允许将输人重定向到一个文件描述符，这给出了一种将文件数据读入到脚本中的
简便途径。你可以用1sof命令来显示shel中在用的文件描述符。
Linux系统提供了一个特殊的文件（称为/dev/null）来重定问不需要的输出。Linux系统会期
掉任何重定向到/dev/null文件的东西。你也可以通过将/dev/null文件的内容重定向到一个文件中来
产生空文件。
mktemp命令是bash shell中一个很方便的特性，可以轻松地创建临时文件和目录。只需要给
mktemp命令指定一个模板，它就能在每次调用时基于该文件模板的格式创建一个唯一的文件。
也可以在Linux系统的/tmp目录创建临时文件和目录，系统启动时会清空这个特殊位置中的内容。
tee命令便于将输出同时发送给标准输出和日志文件。这样就可以在显示器上显示脚本的消
息的同时，又能将它们保存在日志文件中。
在第16章中，你将了解如何控制和运行脚本。除了直接从命令行中运行之外，Linux还提供
了另外几种不同的方法来运行脚本。你还将了解如何在特定时间运行脚本，以及在脚本运行时如
何暂停。
---
## Page 346
第16章
16
控制脚本
本章内容
口处理信号
口以后台模式运行脚本
口禁止挂起
作业控制
口修改脚本优先级
口脚本执行自动化
开始构建高级脚本时，你大概会问如何在Limux系统上运行和控制它们。在本书中，到
目前为止，我们运行脚本的唯一方式就是以实时模式在命令行界面上直接运行。这并
不是Linux上运行脚本的唯一方式。有不少方法可以用来运行shel脚本。另外还有一些选项能够
用于控制脚本。这些控制方法包括向脚本发送信号、修改脚本的优先级以及在脚本运行时切换到
运行模式。本章将会对逐一介绍这些方法。
16.1
处理信号
Linux利用信号与运行在系统中的进程进行通信。第4章介绍了不同的Linux信号以及Linux如
何用这些信号来停止、启动、终止进程。可以通过对脚本进行编程，使其在收到特定信号时执行
某些命令，从而控制shell脚本的操作。
16.1.1重温Linux信号
Linux系统和应用程序可以生成超过30个信号。表16-1列出了在Linux编程时会遇到的最常见
的Linux系统信号。
表16-1Linux信号
信
号
值
描
述
1
SIGHUP
挂起进程
2
SIGINR
终止进程
---
## Page 347
332
第16章控制脚本
（续）
信
值
述
3
SIGQUIT
停止进程
9
SIGKILL
无条件终止进程
15
SIGTERM
尽可能终止进程
17
SIGSTOP
无条件停止进程，但不是终止进程
18
SIGTSTP
停止或暂停进程，但不终止进程
19
SIGCONT
继续运行停止的进程
默认情况下，bash shell会忽略收到的任何SIGQUIT（3）和sIGTERM（5}信号（正因为这样，
交互式shelI才不会被意外终止）。但是bash shell会处理收到的SIGHUP（1）和sIGINT（2）信号。
如果bash shell收到了SIGHUP信号，比如当你要离开一个交互式shell，它就会退出。但在退
出之前，它会将SIGHUP信号传给所有由该shell所启动的进程（包括正在运行的shell脚本）。
通过SIGINT信号，可以中断shell。Linux内核会停止为shell分配CPU处理时间。这种情况发
生时，shell会将SIGINT信号传给所有由它所启动的进程，以此告知出现的状况。
你可能也注意到了，shell会将这些信号传给shell脚本程序来处理。而shell脚本的默认行为
是忽略这些信号。它们可能会不利于脚本的运行。要避免这种情况，你可以脚本中加人识别信
号的代码，并执行命令来处理信号。
16.1.2生成信号
bash shell允许用键盘上的组合键生成两种基本的Linux信号。这个特性在需要停止或暂停失
控程序时非常方便。
1.中断进程
Ctrl+C组合键会生成sIGINT信号，并将其发送给当前在shel中运行的所有进程。可以运行一
条需要很长时间才能完成的命令，然后按下Ctrl+C组合键来测试它。
S sleep 100
^C
Ctrl+C组合键会发送SIGINT信号，停止shell中当前运行的进程。sleep命令会使得shell暂停
指定的秒数，命令提示符直到计时器超时才会返回。在超时前按下Curl+C组合键，就可以提前终
止sleep命令。
2.暂停进程
你可以在进程运行期间暂停进程，而无需终止它。尽管有时这可能会比较危险（比如，脚本
打开了一个关键的系统文件的文件锁），但通常它可以在不终止进程的情况下使你能够深入脚本
内部一窥究竞。
Ctrl+Z组合键会生成一个SIGTSTP信号，停止shell中运行的任何进程。停止（stopping）进程
---
## Page 348
16.1处理信号
333
跟终止（terminating）进程不同：停止进程会让程序继续保留在内存中，并能从上次停止的位置
继续运行。在16.4节中，你会了解如何重启一个已经停止的进程。
当用Ctrl+Z组合键时，shell会通知你进程已经被停止了。
1G
S sleep 100
[1] +  Stopped
Z
sleep 100
方括号中的数字是shell分配的作业号（jobnumber）。shel将shell中运行的每个进程称为作业，
并为每个作业分配唯一的作业号。它会给第一个作业分配作业号1，第二个作业号2，以此类推。
如果你的shell会话中有一个已停止的作业，在退出shell时，bash会提醒你。
S sleep 100
[1] +Stopped
Z
$exit
sleep 100
There are stopped jobe.
exit
可以用ps命令来查看已停止的作业。
S sleep 100
paddoag  +[↑]
Z
sleep 100
 ps -1
F S UID
PID PPID C PRI NI ADDR SZ WCHAN TTY
0 - 27118 wa.it pts/0 00:00:00 bash
TIHE CMD
0 8 501
0 T 501
2456 2431 0 80 0 -25227 signal pts/0 00:00:00 sleep
2 431
2430
080
0 R 501 2458 2431 0 80 0 - 27034 -
pts/0 00 : 0 0:00 ps
在s列中（进程状态），ps命令将已停止作业的状态为显示为T。这说明命令要么被跟踪，要