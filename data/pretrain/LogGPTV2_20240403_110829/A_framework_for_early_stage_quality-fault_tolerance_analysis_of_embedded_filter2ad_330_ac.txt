### Fuel Flow Rate Computation and Fault-Tolerant Control System

The fuel flow rate for the engine is computed based on various inputs. The fuel controller, as shown in Figure 6, receives inputs from appropriate sensors, including the rate of oxygen flow (EGO) and manifold pressure (MAP). These inputs are connected via a feedback loop from the plant, which is not depicted in the figure. Additionally, two external inputs, the throttle position and engine speed, are also considered.

**Figure 6.** The control part of the "fault-tolerant fuel controller" example, showing major sub-components.

The control system consists of four main components:
1. **Control Logic**
2. **Sensor Fault Correction Unit**
3. **Air-Flow Calculation Unit**
4. **Fuel Calculation Unit**

Simulations are conducted using a fixed-step solver with a time step of 0.01 seconds.

### Fault Scenarios and Tolerance Requirements

In our analysis, we consider a fault scenario where the four input signals (throttle, engine speed, EGO, and MAP) can be affected by quality faults. These faults include:
- **Noise:** Magnitude ranging from 0% to 5% of the signal range.
- **Shift:** Magnitude ranging from -5% to 5%.
- **Spikes:** Up to two spikes.

The fault-tolerance requirement is that the output (fuel flow rate) should not deviate by more than 10% from its fault-free value. The size of the quality-fault space to be examined is \((6 \times 11 \times 3)^4 - 1 = 1,536,953,615\), making it impractical to cover exhaustively through simulations.

### Methodology

To apply the proposed method, we first obtained fault-free traces of the control system at various points with a given set of inputs (the functional test case). We identified twenty basic operations in the system, which collectively form the fuel controller. These components have the following input characteristics:
- **Fifteen components** with two floating-point inputs.
- **Four components** with one floating-point and one boolean input.
- **One component** with one floating-point input.

Each floating-point input signal can be affected by:
- **Shifts:** -5%, -2.5%, 0%, 2.5%, 5%
- **Noises:** 0%, 2.5%, 5%
- **Spikes:** 0, 1, 2

Boolean input signals can be affected by spikes only (0, 1, 2).

For each component, the output shift, noise, and spike values are stored for all possible combinations of input error affections, completing the characterization of the control system. This characterization is an offline step and can be reused across different designs.

### Fault Tolerance Requirement

The fault-tolerance requirement is that the output shift should be within the following ranges:
- **-6% < output shift < 6%**
- **-7% < output shift < 7%**
- **-8% < output shift < 8%**
- **-9% < output shift < 9%**
- **-10% < output shift < 10%**

### SMT Solver and Counterexample Analysis

The network of LUTs (Look-Up Tables) is described as a set of constraints in Yices, and the SMT (Satisfiability Modulo Theories) solver finds a solution guided by the fault-tolerance requirements. A SAT instance denotes a hot-spot that must be counter-verified in the fault-injection and simulation setup. Table I presents the number of counterexamples found out of the first 100 hot-spots generated by the SMT solver for different fault-tolerance requirements. Method I uses an over-approximating technique, while Method II uses a closeness-based technique. As expected, the over-approximating technique has more false-positives (100 - value in the table) compared to the closeness-based method. Both methods took around 50 minutes to generate and evaluate the first 100 hot-spots, with the first counterexample reported in about 40 seconds.

**Table I.** Number of counterexamples found out of the first 100 hot-spots generated by the SMT solver for different fault-tolerance requirements.

| Fault Tolerance Requirement | Method I | Method II |
|-----------------------------|----------|-----------|
| -6% < output shift < 6%     | 81       | 27        |
| -7% < output shift < 7%     | 22       | 15        |
| -8% < output shift < 8%     | 13       | 98        |
| -9% < output shift < 9%     | 98       | 98        |
| -10% < output shift < 10%   | 91       | 73        |

### Quality-Faults Violating Tolerance Requirements

Table II presents some of the quality-faults found to violate the given fault-tolerance requirement (-10% < output shift < 10%) by the proposed method. For example, Row 1 indicates that a (-5% shift, 2 spikes) at the throttle input, a (3% shift, 4% noise, 2 spikes) at the engine speed input, a (1% shift, 2% noise) at the EGO input, and a (4% shift, 4% noise) at the MAP input cause the output (fuel flow rate) to shift by at least 10% for a predefined duration of time. Similar interpretations apply to other rows.

**Table II.** Some of the quality-faults found to violate the given fault-tolerance requirement (-10% < output shift < 10%).

| Sl. No. | Throttle (sh%, no%, sp) | Engine Speed (sh%, no%, sp) | EGO (sh%, no%, sp) | MAP (sh%, no%, sp) |
|---------|------------------------|-----------------------------|--------------------|--------------------|
| 1       | -5, 0, 2               | 4, 1, 1                     | 5, 5, 2            | 4, 4, 2            |
| 2       | 5, 4, 2                | 5, 4, 2                     | 5, 4, 2            | 5, 4, 2            |
| 3       | 5, 4, 2                | 5, 4, 2                     | 5, 4, 2            | 5, 4, 2            |
| 4       | 5, 4, 2                | 5, 4, 2                     | 5, 4, 2            | 5, 4, 2            |
| 5       | 5, 4, 2                | 5, 4, 2                     | 5, 4, 2            | 5, 4, 2            |

### Discussion

#### Merits
- **Early Stage Analysis:** Early stage analysis of control models with respect to quality faults helps designers understand the impact of small faults on the system.
- **Sensitivity Testing:** The analysis can be used to test the sensitivity of different signals in combination with one another, which is crucial for highly safety-critical systems.
- **Fault Modeling:** Various low-level faults can be modeled at the operation level, such as transient stuck-at faults as spikes and bit-flip faults as shifts.
- **Efficient Characterization:** Individual operations/components are characterized at the quality-fault abstraction level to minimize the number of costly simulations.
- **SMT Modeling:** The LUT network is modeled using SMT to quickly explore the entire search space and find counterexamples.

#### Limitations
- **Characterization Cost:** Complete characterization of some components may be expensive in terms of time and space, requiring approximation schemes.
- **SMT Instance Size:** As the model or LUT size grows, the SMT instance size also increases, potentially leading to long solving times or crashes. Minimization and pre-processing of LUTs may be necessary.

### Conclusion

Exhaustive analysis of quality-fault tolerance is computationally intensive. We propose a method that abstracts the behavior of operation-level models to discrete lookup tables and performs static analysis to identify hot-spots. These hot-spots are then simulated in the operation-level model to check their validity. Strategies to reduce the probability of false-negatives are presented. Early-stage modeling and analysis of quality-faults help in converging to better designs quickly. In future work, we aim to focus on finding minimal counterexamples that violate fault-tolerance requirements, which can help pinpoint the origin of faulty behavior and provide better insights.

### Acknowledgment

This work is partially supported by the General Motors-Indian Institute of Technology Kharagpur collaborative research lab on electronics, controls, and software.

### References

[1] Krishnendu Chatterjee, Arkadeb Ghosal, Thomas A. Henzinger, Daniel Iercan, Christoph M. Kirsch, Claudio Pinello, and Alberto Sangiovanni-Vincentelli. Logical reliability of interacting real-time tasks. In DATE ’08: Proceedings of the conference on Design, automation and test in Europe, pages 909–914, 2008.

[2] International Electrotechnical Commission. Functional safety of electrical/electronic/programmable electronic safety-related systems. Technical Report IEC-61508, International Electrotechnical Commission, 2005.

[3] C. Constantinescu. Impact of deep submicron technology on dependability of VLSI circuits. In Proceedings of the International Conference on Dependable Systems and Networks (DSN), 2002.

[4] F. Corno, P. Gabrielli, and S. Tosato. Relating vehicle-level and network-level reliability through high-level fault injection. In HLDVT ’03: Proceedings of the Eighth IEEE International Workshop on High-Level Design Validation and Test Workshop, page 71, Washington, DC, USA, 2003. IEEE Computer Society.

[5] J.C. Cunha, R. Maia, M.Z. Rela, and J.G. Silva. A study of failure models in feedback control systems. In Proceedings of the International Conference on Dependable Systems and Networks (DSN), pages 314–323, 2001.

[6] Dipankar Das, P. P. Chakrabarti, and Purnendu Sinha. Robust embedded software design through early analysis of quality faults. In Proceedings of the 4th India Software Engineering Conference, ISEC ’11, pages 31–40. ACM, 2011.

[7] B. Dutertre and L. Moura. Yices: An SMT solver. http://yices.csl.sri.com/, 2008.

[8] G. Fainekos, S. Sankaranarayanan, F. Ivancic, and A. Gupta. Robustness of model-based simulations. In 30th IEEE International Real-Time Systems Symposium (RTSS), pages 345–354, 2009.

[9] Jon Friedman. MATLAB/Simulink for automotive systems design. In DATE ’06: Proceedings of the conference on Design, automation and test in Europe, pages 87–88, 3001 Leuven, Belgium, Belgium, 2006. European Design and Automation Association.

[10] Jr. Allen M. Johnson and Miroslaw Malek. Survey of software tools for evaluating reliability, availability, and serviceability. ACM Comput. Surv., 20(4):227–269, 1988.

[11] Rupak Majumdar and Indranil Saha. Symbolic robustness analysis. 30th IEEE International Real-Time Systems Symposium (RTSS), 0:355–363, 2009.

[12] Natarajan Shankar. Automated deduction for verification. ACM Comput. Surv., 41(4):1–56, 2009.

[13] J. G. Silva, P. Prata, M. Rela, and H. Madeira. Practical issues in the use of ABFT and a new failure model. In Proceedings of the The Twenty-Eighth Annual International Symposium on Fault-Tolerant Computing, FTCS ’98, pages 26–, Washington, DC, USA, 1998. IEEE Computer Society.

[14] Jonny Vinter, Olof Hannius, Torbjorn Norlander, Peter Folkesson, and Johan Karlsson. Experimental dependability evaluation of a fail-bounded jet engine control system for unmanned aerial vehicles. International Conference on Dependable Systems and Networks (DSN), pages 666–671, 2005.