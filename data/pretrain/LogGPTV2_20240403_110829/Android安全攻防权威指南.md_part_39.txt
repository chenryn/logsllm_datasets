_Codes update (OpCodes)
_Codes = ()
105
fields_desc = [ L&IntField(*Length*, None),
(sapogseg) asepdn*sapog"
106
107
108
L&ShortEnumPield(*Type*, 1, _Types),
L&ShortEnumPield(*Code*, None, _Codes),
109
LEIntField(*TransactionID*, None) 1
这个类描述了PTP和MTP所采用容器的结构。由于使用了Scapy，这个类只需要定义
fields_desc，然后Scapy就会知道如何去构造这个对象所代表的数据包了。从以上源码中可以
看到，Container 包包含4个字段：长度（Length）、类型（Type）、编号（Code）和事务标识
（TransactionID）。根据这个定义，Containter类包含了一个post_build函数。post_build
函数处理了两件事情，首先，从载荷中将编号和事务标识复制出来，这里面会包含两种包类型中
的一种，后面会详细讨论：其次，post_build函数基于载荷的长度来更新长度字段。
Olle又定义了两个对象Operation和 Response，用来描述两种类型的包。这些数据包就
是Container对象的载荷。两种包拥有相同的结构，仅仅编号字段不同。相关代码如下：
127 class Operation(Packet) :
128
129
name = *Operation *
fields_desc = [ LsShortEnumPield(*OpCode*, 0, OpCodes),
130
LEIntField(*SessionID*, 0),
143 class Response (Packet) :
[ - . -]
144
145
fields_desc = [ LEshortEnumField(*ResCode*, 0, ResCodes),
nane = *Response *
1.46
LEIntField(*TransactionID*, 1),
LEIntField(*SessionID*, 0),
147
148
LEIntField(*Parameterl*, 0),
149
LEIntPield(*Parameter2*, 0),
150
LEIntField(*Parameter3*,
151
LSIntField(*Parameter4*, 0),
0) ,
152
L&IntField(*Parameter5*, 0) ]
两种数据包代表了4种MTP会话类型中最重要的两种，对于Operation事务可以从
OpCodes字典中根据OpCode字段来选择，Response事务则使用 ResCodes字典。
虽然这些对象描述了模糊测试工具所用到的数据包格式，但是并没有实现整个输人生成过
程。Olle在examples/mtp_fuzzer.py文件中实现了输人生成的剩余部分，代码如下：
31
trans = struct.unpack(*I*, os.urandom(4))[0]
32
[1 [(podoutx] ()r spodo-poodo
r = struct.unpaek(*8*, os.urandom(2))[0]
34
if opcode = OpCodes[*CloseSession*]:
35
cmd = Container()/fuzz (Operation (OpCode=opcode,
opcode = 0
9
TransactionID=trans, SessionID=dev,current_session()1)
---
## Page 174
158第6章使用模棚测试来挖掘漏洞
第31行~第33行随机挑选了一种MTP事务类型及其操作码。第34行和第35行处理了随机
得到CloseSession这种特殊操作的情形，因为如果会话被关闭，模测试工具就无法测试要
求开放会话的任何底层代码了。最后，第36行创建了请求包。代码中Scapy的fuzz函数会往包
的各个字段中填上随机值。到此，输入已经生成完毕，可以发送到目标设备了。
6.5.4处理输入
MTP规范中描述了发起方（Initiator）和响应方（Responder）在协议流中的角色。正如大
多数USB设备的通信一样，主机是发起方，设备是响应方。Olle的工具反复发送Operation包，
然后读取Response包。他使用了PyUSB这一基于libusb的 Python通信库。PyUSB 提供的 API
非常简洁易用。
Olle首先创建了一个MTPDevice类，你可以在USBFuzz/MTPpy 中找到。这个类继承自
PyUSB的 Bu1kPipe类，顾名思义，BulkPipe类用于USB的BulkPipe。除开一些基于时间的
选项，这个类需要目标设备的 VendorId和Productld。连接建立之后，大多数功能是关于监视而
不是传递输入的。因此我们会在6.5.5节讨论它。
回到examples/mtp_fuzz-py这个文件中，Olle实现了剩余的代码，如下所示：
17 cmd = Container() /Operation (OpCode=OpCodes [*OpenSession*] 
16 s = dev.nev_session()
18 cmd.show2()
Parameterl=s)
19 dev.send(cmd)
()esuodeexpeax°Aap = oeuodsox 02
（..-]
27 while True:
8C
response = dev,read_response (trans)
dev, 8end (cmd)
第16行-第20行用于开启与MTP设备的会话。这个过程包括发送一个设置了OpenSession
操作码的Operation包，以及读取Response包。第38行和第39行就是完成输人传递的所有代码。
相比其他模糊测试，典型的USB主从结构使得处理输入这一步变得非常简单。现在只剩下监控
异常行为这一步了。
6.5.5监控测试
大多数USB设备儿乎都没有给出监视设备内部行为的方法，但是Android设备并非如此，
使用Android自带的监视机制是非常容易的。本章前面所讨论的方法依然可以很好地工作。当然，
6.5.1节中提到的设备可能会被重置或停止响应这一问题，还是需要特别处理。
Olle的USB模期测试工具在设备端并没有做任何监视设备的工作，这并不奇怪，因为他的
开发工作并不是针对Android设备的。不过Olle实现了在主机端监视设备。MTPDevice类实现
了一个叫作is_alive的方法，用来监视设备是否可以响应。在实现中，Olle使用了BulkPipe
---
## Page 175
6.6小结159
类来检测设备的会话是否还保持通畅。他使用自定义的事务标识0xdeadbeef，发送了一个Skip
Operation数据包，如果能够收到错误反馈，那么就意味着设备响应正常。
在模期测试工具核心代码examples/mtp_fuzzer.py中，Olle 首先重置设备，这样就可以认为
设备处于一个正常状态。然后进人一个主循环进行交互，每次交互完调用is_alive方法来判断
状态。一且设备无响应，则重置设备到可用的状态。采用这种方式可以让模测试工具持续运行
很长的时间。但是，在Android设备上跑这个工具还差一些，除了is_alive外，Oll 也打印了
发出去的Operation和收到的 Response包。这会帮助我们及时发现问题所在，但这种方案并
不完美。特别是，通过这种方法我们难以重放输入，面且难以将输入和崩溃关联起来。
当把这个模棚测试工具用于Andoid设备时，监视Android的系统日志会得到更好的反馈结
果。但现在我们依然需要解决设备频繁重置问题，好在使用下面的命令就可以轻松解决。
dev:~/android/usbdevice-fuzzing $ while true; do adb wait-for-device 1
[. log output here ..]
logcat; done
通过上面的命令，我们就可以看到MtpServer在设备上运行时所记录的调试信息了。就像对
Chrome进行模棚测试那样，实时监控系统日志当中的错误消息，可以发现哪些协议是不支持的。
注释掉它们会提高测试的效率，面且也不影响发现漏洞。
当我们在搭载Android4.4系统的2012版Nexus7上运行模翻测试工具时，只花了几分钟就
找到了一个崩溃。下面是MtpServer线程前溃时所记录的消息：
Fatal signal 11 (SIGSEGV) at 0x66f9fo02 (code=1),。 thread 413 (Mtp5erver)
Bui1d fingerprint : *google/nakas1/grouper:4 .4/KRT160/907817:user/release-
Revision: '0'
xeys'
pid: 398, tid: 413, name: MtpServer >>> android.process.nedia <<<
signal 11 (SIGSEGV) , code 1 (SSGV_MAPERR), fault addr 66f9f002
r0 5a3adb58r1 66f92008r2 66f9f000 r3 0000cff8
r4 66fa2dd8r5 000033fb
8sqpeges 9x
r7 00009820
r8 220b0ff6r9 63ccbef0s163ccc1e4
ip 63cc3a11 ap 6a8e3a8c 1r 63cc3fc9 pc 63cc3d2a epsr 000f0030
fp 63ccbef0
仔细观察发现这个崩溃影响并不大，但是崩溃的速度如此之快预示着MTP的实现当中可能
急藏着其他问题。
对MtpServer、USB协议和设备等的模棚测试留给有兴趣的读者去完成。总的来看，这一节
表明，即便使用公开的模期测试工具，也能在Android中找到bug。
6.6小结
本章提供了在Android上进行模期测试所需的所有信息，从高层面上介绍了模糊测试的4个
步骤，即选定目标、生成测试输人、处理输入和监控异常行为。本章还介绍了对Android进行模
糊测试有哪些优势和挑战。
---
## Page 176
160第6章使用模糊测试来挖振漏洞
注意第11章有更多对Android短消息作模糊测试的内容。
本章完成了3个模糊测试工具的深入讨论，前两个是专门为本章设计的，最后一个是将公开
的工具迁移到Android设备上。每个例子中，模期测试工具都能找到底层代码中的问题，这也能
说明模棚测试是一种发现Android设备中bug和安全漏洞的有效手段。
下一章会介绍如何使用调试和漏洞分析技术来深人理解漏洞，这能帮助你从模测试的结果
中去收获一些安全漏洞，为开发可行的漏洞利用代码微铺垫。
---
## Page 177
调试与分析安全漏洞
想要编写一个完全没有安全漏洞的程序相当困难，甚至是不可能的。不管你的目标是修补还
是利用漏洞，使用调试工具和技术是最好的方式。研究者可以用调试器来观测程序运行时的状态，
验证数据流，捕捉值得关注的程序状态，或者在运行时修改它们的行为。在信息安全工业界，调
试器在分析漏洞的成因和判断漏洞严重性等方面，都是必不可少的工具。
本章将带领大家探索各种Android操作系统的调试工具，引导大家通过配置调试环境来获得
最高的调试效率。我们会使用一些样例代码和真实漏洞来介绍调试的整个过程，教你如何分析前
溃、判断漏洞的成因和可利用性。
7.1获取所有信息
想要成功地调试或分析漏洞，第一步是收集所有相关信息，例如文档、源代码、二进制文件、
符号文件以及可用的工具等。本节会告诉你为什么这些信息如此重要，以及如何使用它们来提高
调试效率。
要去寻找目标相关的协议、支持的文件格式等文档，因为了解的越多，获得成功的概率也就
越大。如果能在分析过程中随时使用这些文档，会迅速解决意想不到的困难。
交叉引用关于如何获取各种Android设备的源代码，请参照附录B。
在分析过程中，分析对象的源代码是无价之宝。比起逆向长的汇编代码，阅读源代码的效率
要高很多。更重要的是，如果拥有源代码，就可以将目标重新编译成带符号的版本。7.6.5节会介
绍，拥有符号可以实现源代码级调试。如果无法得到调试对象的源代码，可以试着去寻找一些竞争
对手产品、衍生产品或者老版本的代码，尽管这些代码有可能与汇编不一致。即使不同端程人员的
编码风格差异较大，也很可能会用和同的方法处理问题。所以，每个细节信息都可能会有所帮助。
二进制文件也很有用，原因有二。首先，某些设备中的二进制文件可能包含部分符号。符号
会提供有用的信息，例如函数名、参数名称和类型等，这是源代码和二进制文件的最大区别。其
次，即便没有符号，二进制文件也能提供程序的脉络。使用静态分析工具去逆向分析二进制文件
依然会获得十分有用的信息。例如，反汇编器可以重构数据流和控制流，这样可以基于控制流来
---
## Page 178
162第7章调试与分析安全漏洞
浏览程序，在调试的时候找到方向，并发现程序中一些有趣的点。
与x86系统相比，ARM系统中的符号信息更为重要。正如第9章所讨论的，ARM处理器有
好几种执行模式，所以ARM系统中的符号不仅可以确定名称和类型，还能用来确定在执行函数
时处理器所处的模式。此外，ARM处理器经常把一些只读的常量存储在代码之后，所以符号也
可以帮助找到这些常量数据。这些特殊类型的符号在调试的时候显得尤为重要。在调试中查看栈
回溯信息或者插入断点时，如果没有符号，调试器就会出现问题。例如，在不同处理器模式下，
插入断点的指令是不同的。如果弄错了模式，就会导致程序崩溃或错过断点，甚至调试器前溃。
基于这些原因，在调试Android上的ARM二进制程序时，符号是最宝贵的资源。