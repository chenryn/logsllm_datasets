### Just-in-Time Node Freeing and Linked List Unlinking

- **Core(1** exhausts the linked list, reaching the `NULL` node.
- **Core(0** detects a change on the `NULL` page.
- **Core(0** calls `svcSignalEvent` to free a group of linked list nodes.
- Subsequent allocations use the freed nodes as intended.

#### Just-in-time Node Freeing
- The `nextptr`, `prevptr`, and `objptr` fields in a node are set to `00000000`.
- The node is then marked as free.

#### Linked List Unlinking
- When the `NULL` node is unlinked, control over `node->next` and `node->prev` is gained.
- This allows writing an arbitrary value to an arbitrary location.
- The value must be a writable "pointer" value.
- The vtable is used immediately after unlinking for an indirect call, making it a target for overwriting.

#### Challenges
- The kernel panics if `free_kobj` encounters a `NULL` node.
- Unlinking writes to both the target and the value, complicating the process of writing a code address.

### How to Achieve Code Execution

#### KLinkedList::remove Implementation
```c
KLinkedListNode* next = node->next;
KLinkedListNode* prev = node->prev;
next->prev = prev;
prev->next = next;
node->next = 0;
node->prev = 0;
```

#### Exploitation Steps
- After `KLinkedList::remove` is called, `free_kobj` is invoked to free the node.
- The vtable is then used for an indirect call, providing an opportunity for code execution.

### RWX NULL Page Linked List Nodes

- **Node 0**
  - Next: Node 1
  - Prev: Irrelevant (unused)
  - Element: Fake object that won't trigger unlinking

- **Node 1**
  - Next: Node 2
  - Prev: Address of the target vtable slot
  - Element: Fake object that will trigger unlinking

- **Node 2**
  - Next: Instruction `ldr pc, [pc]`
  - Prev: Irrelevant (unlinking overwrites it)
  - Element: Address loaded by `ldr pc, [pc]`

### Manufacturing the Linked List

```plaintext
00000040 C0C0C0C0 00000800 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000080 DFFEC6B0 00000C00 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
E59FF000 DEADBABE 00101678 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000
00000010
00000020
00000030
00000040
00000050
00000060
00000070
00000080
00000090
000000A0
000000B0
Node 1
Node 2
Node 0
```

### ARM11 Kernel Compromise

- The ARM11 kernel is compromised, affecting all ARM11 processes.
- To take over the ARM9, additional steps are required.

### ARM9 Responsibilities

- Manages access to storage (SD, NAND).
- Handles title management (installing, updating).
- Decrypts and verifies/authenticates content.
- Manages backwards compatibility.
- Runs AGB_FIRM, SAFE_FIRM, TWL_FIRM, and NATIVE_FIRM.

### FIRM Firmware System

- **AGB_FIRM**: Runs GBA software, used for "safe mode" and firmware updates.
- **SAFE_FIRM**: Main FIRM, runs apps and games, booted by default.
- **TWL_FIRM**: Runs DS and DSi software.
- **NATIVE_FIRM**: Primary FIRM for the 3DS.

### FIRM Launch Process

1. **ARM9 loads FIRM from NAND**.
2. **CRYPTO hardware decrypts and authenticates FIRM**.
3. **ARM9 copies sections to relevant locations**.
4. **ARM9 signals ARM11 to run its FIRM section and then runs its own**.
5. **A compromised ARM11 can continue running its own code**.

### TWL_FIRM and ROM Loading

- **TWL_FIRM** can load ROMs from multiple sources:
  - Game carts (physical games)
  - NAND (DSiWare)
  - ARM11 (custom code)
- ROMs are authenticated before being parsed.
- DSi games are RSA signed, while DS games are hashed and checked against a whitelist.
- Checks are bypassed when the ROM comes from ARM11.

### DS Mode Memory Layout

- 3DS_PA = (NDS_PA - 0x02000000) * 4 + 0x20000000
- 8 bytes of 3DS address space = 2 bytes of DS space
- If NDS_PA is not properly bounded, any 3DS_PA value is possible.

### ROM Header Format

- **Header Overview**
  - **000h**: Game Title (Uppercase ASCII, padded with 00h)
  - **00Ch**: Gamecode (Uppercase ASCII, NTR-)
  - **010h**: Makercode (Uppercase ASCII, e.g., "01"=Nintendo)
  - **012h**: Unitcode (00h=Nintendo DS)
  - **013h**: Encryption Seed Select (00..07h, usually 00h)
  - **014h**: Device capacity (Chipsize = 128KB SHL nn, e.g., 7 = 16MB)
  - **015h**: Reserved (zero filled)
  - **01Eh**: ROM Version (usually 00h)
  - **01Fh**: Autostart (Bit2: Skip "Press Button" after Health and Safety)
  - **020h**: ARM9 rom_offset (4000h and up, align 1000h)
  - **024h**: ARM9 entry_address (2000000h..23BFE00h)
  - **028h**: ARM9 ram_address (2000000h..23BFE00h)
  - **02Ch**: ARM9 size (max 3BFE00h, 3839.5KB)
  - **030h**: ARM7 rom_offset (8000h and up)
  - **034h**: ARM7 entry_address (2000000h..23BFE00h, or 37F8000h..3807E00h)
  - **038h**: ARM7 ram_address (2000000h..23BFE00h, or 37F8000h..3807E00h)
  - **03Ch**: ARM7 size (max 3BFE00h, or FE00h, 3839.5KB, 63.5KB)

### TWL_FIRM ROM Loader Code Section Checks

- **section_ram_address >= 0x02000000**
- **section_ram_address + section_size <= 0x02000000**
- **0xBC01B98D + 0x43FE4673 = 0x023FF000**
- **Section does not intersect with [0x03FFF600; 0x03FFF800]**

### Example Values

- **section_ram_address = 0xBC01B98D**
- **section_size = 0x43FE4673**
- **(0xBC01B98D - 0x02000000) * 4 + 0x20000000 = 0x0806E634**

### Handling Large Section Sizes

- **ROM section loading code**
  - Copies in blocks of 0x10000 bytes at most.
  - Can interrupt the copy process to avoid crashes.

### Corrupting the Stack

- **Stack corruption** allows redirecting to a gadget within a 0x10000 byte region.
- Addresses are determined by pointers already on the stack.

### Acknowledgments

- Thanks to: derrek, nedwill, yellows8, plutoo, naehrwert
- Code available at: github.com/smealum
- Icon credits: 
  - https://www.webdesignerdepot.com/2017/07/free-download-flat-nintendo-icons/
  - https://www.flaticon.com/free-icon/gaming_771247
  - https://www.flaticon.com/free-icon/checked_291201
  - https://www.flaticon.com/free-icon/close_579006
  - https://www.flaticon.com/free-icon/twitter_174876