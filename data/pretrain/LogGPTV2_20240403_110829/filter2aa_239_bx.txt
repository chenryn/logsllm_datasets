    Ferrari
    Force India
    Lotus
    McLaren
    Mercedes
    Red Bull
    Sauber
    Toro Rosso
    Williams
ExceptWith（）方法从allTeams集中删除所有私有队：
    allTeams.ExceptWith(privateTeams);
    WriteLine();
    WriteLine("no private team left");
    foreach (var team in allTeams)
    {
      WriteLine(team);
    }
集合中的其他元素不包含私有队：
    Ferrari
    McLaren
    Mercedes
11.10 性能
许多集合类都提供了相同的功能，例如，SortedList类与SortedDictionary类的功能几
乎完全相同。但是，其性能常常有很大区别。一个集合使用的内存少，另一个集合的元素
检索速度快。在MSDN文档中，集合的方法常常有性能提示，给出了以大写O记号表示的
操作时间：
● O（1）
● O（log n）
● O（n）
O（1）表示无论集合中有多少数据项，这个操作需要的时间都不变。例如，
ArrayList类的Add（）方法就具有O（1）行为。无论列表中有多少个元素，在列表末尾添
加一个新元素的时间都相同。Count属性会给出元素个数，所以很容易找到列表末尾。
O（n）表示对于集合执行一个操作需要的时间在最坏情况时是N。如果需要重新给集
合分配内存，ArrayList类的Add（）方法就是一个O（n）操作。改变容量，需要复制列
表，复制的时间随元素的增加而线性增加。
O（log n）表示操作需要的时间随集合中元素的增加而增加，但每个元素需要增加的
时间不是线性的，而是呈对数曲线。在集合中执行插入操作时，SortedDictionary集合类具有O（log n）行为，而SortedList集合类具有O（n）行
为。这里SortedDictionary 集合类要快得多，因为它在树型结构中插入元
素的效率比列表高得多。
表11-4列出了集合类及其执行不同操作的性能，例如，添加、插入和删除元素。使用
这个表可以选择性能最佳的集合类。左列是集合类，Add列给出了在集合中添加元素所需
的时间。List和HashSet类把Add方法定义为在集合中添加元素。其他集合类用不
同的方法把元素添加到集合中。例如，Stack类定义了Push（）方法，Queue类定
义了Enqueue（）方法。这些信息也列在表中。
表11-4
如果单元格中有多个大O值，表示若集合需要重置大小，该操作就需要一定的时间。
例如，在List类中，添加元素的时间是O（1）。如果集合的容量不够大，需要重置大
小，则重置大小需要的时间长度就是O（n）。集合越大，重置大小操作的时间就越长。
最好避免重置集合的大小，而应把集合的容量设置为一个可以包含所有元素的值。
如果表单元格的内容是n/a（代表not applicable），就表示这个操作不能应用于这种集
合类型。
11.11 小结
本章介绍了如何处理不同类型的泛型集合。数组的大小是固定的，但可以使用列表作
为动态增长的集合。队列以先进先出的方式访问元素，栈以后进先出的方式访问元素。链
表可以快速插入和删除元素，但搜索操作比较慢。通过键和值可以使用字典，它的搜索和
插入操作比较快。集（set）用于唯一项，可以是无序的（HashSet），也可以是有序
的（SortedSet）。
第12章将介绍一些特殊的集合类。
第12章
特殊的集合
本章要点
● 使用位数组和位矢量
● 使用可观察的集合
● 使用不可变的集合
● 使用并发的集合
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● 位数组示例
● 位矢量示例
● 可观察的集合示例
● 不可变的集合示例
● 管道示例
12.1 概述
第11章介绍了列表、队列、堆栈、字典和链表。本章继续介绍特殊的集合，例如，处
理位的集合、改变时可以观察的集合、不能改变的集合，以及可以在多个线程中同时访问
的集合。
12.2 处理位
如果需要处理的数字有许多位，就可以使用BitArray类和BitVector32结构。BitArray
类位于名称空间System.Collections中，BitVector32结构位于名称空间
System.Collections.Specialized中。这两种类型最重要的区别是，BitArray类可以重新设置
大小，如果事先不知道需要的位数，就可以使用BitArray类，它可以包含非常多的位。
BitVector32结构是基于栈的，因此比较快。BitVector32结构仅包含32位，它们存储在一个
整数中。
12.2.1 BitArray类
BitArray类是一个引用类型，它包含一个int数组，其中每32位使用一个新整数。这个
类的成员如表12-1所示。
表12-1
BitArray类的成员
说明
Count
Length
Count和Length属性的get访问器返回数组中的位数。使用
Length属性还可以定义新的数组大小，重新设置集合的大小
Item
Get
Set
可以使用索引器读写数组中的位。索引器是布尔类型。除了
使用索引器之外，还可以使用Get（）和Set（）方法访问数
组中的位
SetAll
根据传送给该方法的参数，SetAll（）方法设置所有位的值
Not
Not（）方法对数组中所有位的值取反
And
Or
Xor
使用And（）、Or（）和Xor（）方法，可以合并两个
BitArray对象。And（）方法执行二元AND，只有两个输入
数组的位都设置为1，结果位才是1。Or（）方法执行二元
OR，只要有一个输入数组的位设置为1，结果位就是1。
Xor（）方法是异或操作，只有一个输入数组的位设置为
1，结果位才是1
辅助方法DisplayBits（）遍历BitArray，根据位的设置情况，在控制台上显示1或
0（代码文件BitArraySample/Program.cs）：
    public static void DisplayBits(BitArray bits)
    {
      foreach (bool bit in bits)
      {
        Write(bit ? 1: 0);
      }
    }
BitArraySample使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Collections
    static System.Console
说明BitArray类的示例创建了一个包含8位的数组，其索引是0～7。SetAll（）方法把
这8位都设置为true。接着Set（）方法把对应于1的位设置为false。除了Set（）方法之外，
还可以使用索引器，例如，下面的第5个和第7个索引：
    var bits1 = new BitArray(8);
    bits1.SetAll(true);
    bits1.Set(1, false);
    bits1[5] = false;
    bits1[7] = false;
    Write("initialized: ");
    DisplayBits(bits1);
    WriteLine();
这是初始化位的显示结果：
    initialized: 10111010
Not（）方法会对BitArray类的位取反：
    Write(" not ");
    DisplayBits(bits1);
    bits1.Not();
    Write(" = ");
    DisplayBits(bits1);
    WriteLine();
Not（）方法的结果是对所有的位取反。如果某位是true，则执行Not（）方法的结果
就是false，反之亦然。
    not 10111010 = 01000101
这里创建了一个新的BitArray类。在构造函数中，因为使用变量bits1初始化数组，所
以新数组与旧数组有相同的值。接着把第0、1和4位的值设置为不同的值。在使用Or（）
方法之前，显示位数组bits1和bits2。Or（）方法将改变bits1的值：
    var bits2 = new BitArray(bits1);
    bits2[0] = true;
    bits2[1] = false;
    bits2[4] = true;
    DisplayBits(bits1);
    Write(" or ");
    DisplayBits(bits2);
    Write(" = ");
    bits1.Or(bits2);
    DisplayBits(bits1);
    WriteLine();
使用Or（）方法时，从两个输入数组中提取设置位。结果是，如果某位在第一个或
第二个数组中设置为true，该位在执行Or（）方法后就是true：
    01000101 or 10001101 = 11001101
下面使用And（）方法作用于位数组bits1和bits2：
    DisplayBits(bits2);
    Write(" and ");
    DisplayBits(bits1);
    Write(" = ");
    bits2.And(bits1);
    DisplayBits(bits2);
    WriteLine();
And（）方法只把在两个输入数组中都设置为true的位设置为true：
    10001101 and 11001101 = 10001101
最后使用Xor（）方法进行异或操作：
    DisplayBits(bits1);
    Write(" xor ");
    DisplayBits(bits2);
    bits1.Xor(bits2);
    Write(" = ");
    DisplayBits(bits1);
    WriteLine();
使用Xor（）方法，只有一个（不能是两个）输入数组的位设置为1，结果位才是1。
    11001101 xor 10001101 = 01000000
12.2.2 BitVector32结构
如果事先知道需要的位数，就可以使用BitVector32结构替代BitArray类。BitVector32
结构效率较高，因为它是一个值类型，在整数栈上存储位。一个整数可以存储32位。如果
需要更多的位，就可以使用多个BitVector32值或BitArray类。BitArray类可以根据需要增
大，但BitVector32结构不能。
表12-2列出了BitVector32结构中与BitArray类完全不同的成员。
表12-2
BitVector32结构的成员
说明
Data
Data属性把BitVector32结构中的数据返回为整数
Item
BitVector32的值可以使用索引器设置。索引器是重
载的——可以使用掩码或BitVector32. Section类型
的片段来获取和设置值
CreateMask
这是一个静态方法，用于为访问BitVector32结构中
的特定位创建掩码
CreateSection
这是一个静态方法，用于创建32位中的几个片段
BitVectorSample使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Collections.Specialized
名称空间：
    System.Collections.Specialized
    System.Text
    static System.Console
示例代码用默认构造函数创建了一个BitVector32结构，其中所有的32位都初始化为
false。接着创建掩码，以访问位矢量中的位。对CreateMask（）方法的第一个调用创建了
用来访问第一位的一个掩码。调用CreateMask（）方法后，bit1被设置为1。再次调用
CreateMask（）方法，把第一个掩码作为参数传递给CreateMask（）方法，返回用来访问
第二位（它是2）的一个掩码。接着，将bit3设置为4，以访问位编号3。bit4的值是8，以
访问位编号4。
然后，使用掩码和索引器访问位矢量中的位，并相应地设置字段（代码文件
BitArraySample/Program.cs）：
    var bits1 = new BitVector32();
    int bit1 = BitVector32.CreateMask();
    int bit2 = BitVector32.CreateMask(bit1);
    int bit3 = BitVector32.CreateMask(bit2);
    int bit4 = BitVector32.CreateMask(bit3);
    int bit5 = BitVector32.CreateMask(bit4);
    bits1[bit1] = true;
    bits1[bit2] = false;
    bits1[bit3] = true;
    bits1[bit4] = true;
    bits1[bit5] = true;
    WriteLine(bits1);
BitVector32结构有一个重写的ToString（）方法，它不仅显示类名，还显示1或0，来
说明位是否设置了，如下所示：
    BitVector32{00000000000000000000000000011101}
除了用CreateMask（）方法创建掩码之外，还可以自己定义掩码，也可以一次设置多
位。十六进制值abcdef与二进制值1010 1011 1100 1101 1110 1111相同。用这个值定义的所
有位都设置了：
    bits1[0xabcdef] = true;
    WriteLine(bits1);
在输出中可以验证设置的位：
    BitVector32{00000000101010111100110111101111}
把32位分别放在不同的片段中非常有用。例如，IPv4地址定义为一个4字节的数，该
数存储在一个整数中。可以定义4个片段，把这个整数拆分开。在多播IP消息中，使用了
几个32位的值。其中一个32位的值放在这些片段中：16位表示源号，8位表示查询器的查
询内部码，3位表示查询器的健壮变量，1位表示抑制标志，还有4个保留位。也可以定义
自己的位含义，以节省内存。
下面的例子模拟接收到值0x79abcdef，把这个值传送给BitVector32结构的构造函数，
从而相应地设置位：
    int received = 0x79abcdef;
    BitVector32 bits2 = new BitVector32(received);
    WriteLine(bits2);
在控制台上显示了初始化的位：
    BitVector32{01111001101010111100110111101111}
接着创建6个片段。第一个片段需要12位，由十六进制值0xfff定义（设置了12位）。
片段B需要8位，片段C需要4位，片段D和E需要3位，片段F需要两位。第一次调用
CreateSection（）方法只是接收0xfff，为最前面的12位分配内存。第二次调用
CreateSection（）方法时，将第一个片段作为参数传递，从而使下一个片段从第一个片段
的结尾处开始。CreateSection（）方法返回一个BitVector32. 
Section类型的值，该类型包
含了该片段的偏移量和掩码。
    // sections: FF EEE DDD CCCC BBBBBBBB
    // AAAAAAAAAAAA
    BitVector32.Section sectionA = BitVector32.CreateSection(0xfff);
    BitVector32.Section sectionB = BitVector32.CreateSection(0xff, sectionA);
    BitVector32.Section sectionC = BitVector32.CreateSection(0xf, sectionB);
    BitVector32.Section sectionD = BitVector32.CreateSection(0x7, sectionC);
    BitVector32.Section sectionE = BitVector32.CreateSection(0x7, sectionD);
    BitVector32.Section sectionF = BitVector32.CreateSection(0x3, sectionE);
把一个BitVector32.Section类型的值传递给BitVector32结构的索引器，会返回一个
int，它映射到位矢量的片段上。这里使用一个帮助方法IntToBinaryString（），获得该int
数的字符串表示：
    WriteLine($"Section A: {IntToBinaryString(bits2[sectionA], true)}");
    WriteLine($"Section B: {IntToBinaryString(bits2[sectionB], true)}");
    WriteLine($"Section C: {IntToBinaryString(bits2[sectionC], true)}");
    WriteLine($"Section D: {IntToBinaryString(bits2[sectionD], true)}");
    WriteLine($"Section E: {IntToBinaryString(bits2[sectionE], true)}");
    WriteLine($"Section F: {IntToBinaryString(bits2[sectionF], true)}");
IntToBinaryString（）方法接收整数中的位，并返回一个包含0和1的字符串表示。在
实现代码中遍历整数的32位。在迭代过程中，如果该位设置为1，就在StringBuilder的后面
追加1，否则，就追加0。在循环中，移动一位，以检查是否设置了下一位。