# 如何从浏览器中提取信用卡密码
##### 译文声明
本文为翻译文章，原作者为 Avi Gimpel，原文发布于 www.cyberark.com。译文仅供参考，具体内容及含义以原文为准。

## 引言
在当前信用卡广泛使用的背景下，信用卡欺诈事件频发，攻击手段多样，包括中间人攻击（MITM）、恶意软件和rootkit攻击等。一旦攻击者获取了数据访问权限，他们通常会将窃取到的信用卡信息转移到自己的服务器上，然后用于匿名支付或出售以牟利。近期，我们研究了几款主流浏览器—Internet Explorer（IE）、Microsoft Edge、Google Chrome 和 Mozilla Firefox，在存储信用卡数据及其他安全风险方面的情况。

## 记住密码功能的安全隐患
为了方便用户，许多现代浏览器提供了“记住密码”等功能。然而，这也暴露了一些潜在的安全问题。以“记住密码”功能为例，其工作原理是浏览器存储HTML表单数据，并在需要时自动填充这些表单，从而避免用户重复输入信息并节省时间。我们在研究中发现，IE、Edge、Chrome 和 Firefox 都具备这一功能，但它们存储敏感信息的方式存在一定的安全隐患。

图1展示了“记住密码”功能的一个示例。

## 自动填写数据的存储方式
不同浏览器根据操作系统的差异，采用不同的方法来存储自动填写的数据。以下是一些常见浏览器的具体做法：
- **IE 和 Edge**：数据被保存在以下注册表项中：
  - `HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\IntelliForms\FormData`
  - `HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppContainer\Storage\microsoft.microsoftedge_8wekyb3d8bbwe\MicrosoftEdge\IntelliForms\FormData`
  - `HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\IntelliForms\Storage1`
  - `HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\IntelliForms\Storage2`

- **Chrome**：使用 SQLite 数据库文件存储数据，路径为 `%LocalAppData%\Google\Chrome\User Data\Default\Web Data`。

- **Firefox**：同样利用 SQLite 数据库文件，具体位置为 `%AppData%\Mozilla\Firefox\Profiles\{uniqString}\formhistory.sqlite`。

值得注意的是，上述所有浏览器均依赖 Windows DPAPI（数据保护接口）对自动填写数据进行加密，并在下次使用前解密。

## 关于DPAPI
DPAPI 是一组提供操作系统级别数据保护服务的函数调用。尽管数据保护是操作系统的一部分，意味着任何应用程序都可以无需特定加密代码即可保护数据，但问题在于浏览器通过 DPAPI 函数加密数据后，任何脚本或代码都可在无需特殊许可的情况下调用相应的解密函数来获取这些数据，例如信用卡信息。

## 提取加密数据的方法
要从 IE、Edge、Chrome 和 Firefox 中提取信用卡数据，需掌握两点关键知识：
1. **SQLite 数据库结构**
2. **如何利用 DPAPI 解密信用卡信息**

### SQLite 简介
SQLite 是一种流行的嵌入式数据库引擎，广泛应用于浏览器、操作系统以及各种嵌入式系统如手机等。

### DPAPI 的 CryptUnprotectData 函数
此函数的主要参数包括：
- `pDataIn [输入]`：指向包含加密数据的 DATA_BLOB 结构的指针。
- `ppszDataDescr [输出, 可选]`：指向描述加密数据字符串的可读指针。
- `pOptionalEntropy [输入, 可选]`：指向加密过程中使用的额外熵或密码的 DATA_BLOB 结构的指针。
- `pPromptStruct [输入, 可选]`：指向 CRYPTPROTECT_PROMPTSTRUCT 结构的指针，该结构定义了显示提示的位置、时间和内容。此参数可以设为 NULL。
- `pDataOut [输出]`：指向接收解密数据的 DATA_BLOB 结构的指针。

## Chrome 案例分析
### 1. Chrome 的 SQLite 存储文件
通过使用“DB Browser for SQLite”工具查看 Chrome 的 Web 数据 SQLite 文件，可以看到 Chrome 将信用卡详情单独保存在一个名为“credit_cards”的表格中。除了 card_number 字段外，其他字段均为明文形式。card_number 字段则是一个经过加密的 BlobData 字段。

### 2. Chrome 对 DPAPI 的调用
当用户试图查看存储的信用卡信息或浏览器尝试自动填写表单时，会调用 DPAPI 函数来解密数据。在 Chrome 中，您可以通过访问 `chrome://settings/AutoFill` 来查看存储的信用卡信息。当请求显示信用卡信息时，浏览器会调用 DPAPI 的 CryptUnProtectData() 函数进行解密。

## 深入探究代码实现
基于以上了解，我们可以编写一个概念验证程序（POC），主要涉及两个步骤：
1. 导入处理 SQLite 数据库（适用于 Chrome 和 Firefox）和 DPAPI 的相关库。
2. 使用 DPAPI 函数解密浏览器中的自动填写 BlobData。

### 示例代码
#### Chrome (C#)
```csharp
string SQLiteFilePath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\Google\Chrome\User Data\Default\Web Data";
string tableName = "credit_cards";

// 定义数据库连接及查询语句
string connectionString = "data source=" + SQLiteFilePath + ";New=True;UseUTF16Encoding=True";
string sql = string.Format("SELECT * FROM {0}", tableName);

using (var connect = new SQLiteConnection(connectionString))
{
    using (var command = new SQLiteCommand(sql, connect))
    {
        using (var adapter = new SQLiteDataAdapter(command))
        {
            var DB = new DataTable();
            adapter.Fill(DB);

            // 从数据库对象中提取加密的 BlobData 字段（即信用卡号）
            byte[] byteArray = (byte[])DB.Rows[0][4];
            byte[] decrypted = DPAPI.Decrypt(byteArray, null, out _);
        }
    }
}
```

#### IE & Edge (C++)
```cpp
DATA_BLOB DataIn;
DATA_BLOB DataVerify;
std::vector<std::wstring> RegKeys = {
    L"Software\\Microsoft\\Internet Explorer\\IntelliForms\\FormData",
    L"Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppContainer\\Storage\\microsoft.microsoftedge_8wekyb3d8bbwe\\MicrosoftEdge\\IntelliForms\\FormData",
    L"Software\\Microsoft\\Internet Explorer\\IntelliForms\\Storage1",
    L"Software\\Microsoft\\Internet Explorer\\IntelliForms\\Storage2"
};

for (const auto& key : RegKeys) {
    // 读取每个注册表项中的自动填写 BlobData
    // 并使用 DPAPI 解密
}
```

以上代码片段展示了如何从 Chrome 和 IE/Edge 浏览器中提取并解密存储的信用卡信息。希望这能帮助您更好地理解这一过程及其潜在的安全风险。