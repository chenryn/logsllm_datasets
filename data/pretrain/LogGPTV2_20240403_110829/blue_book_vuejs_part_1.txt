---
title: Vue.js
date: 20210507
author: Lyz
---
[Vue.js](https://vuejs.org) is a progressive JavaScript framework for building user
interfaces. It builds on top of standard HTML, CSS and JavaScript, and provides
a declarative and component-based programming model that helps you efficiently
develop user interfaces, be it simple or complex.
Here is a minimal example:
```javascript
import { createApp } from 'vue'
createApp({
  data() {
    return {
      count: 0
    }
  }
}).mount('#app')
```
```html
    Count is: {{ count }}
```
The above example demonstrates the two core features of Vue:
* *Declarative Rendering*: Vue extends standard HTML with a template syntax that
    allows us to declaratively describe HTML output based on JavaScript state.
* *Reactivity*: Vue automatically tracks JavaScript state changes and
    efficiently updates the DOM when changes happen.
# Features
## [Single file components](https://vuejs.org/guide/introduction.html#single-file-components)
Single-File Component (also known as `*.vue` files, abbreviated as SFC)
encapsulates the component's logic (JavaScript), template (HTML), and styles
(CSS) in a single file. Here's the previous example, written in SFC format:
```vue
  Count is: {{ count }}
```
## [API Styles](https://vuejs.org/guide/introduction.html#api-styles)
Vue components can be authored in two different API styles: Options API and
Composition API.
### Options API
With Options API, we define a component's logic using an object of options such
as `data`, `methods`, and `mounted`. Properties defined by options are exposed
on this inside functions, which points to the component instance:
```vue
  Count is: {{ count }}
```
The Options API is centered around the concept of a "component instance" (`this`
as seen in the example), which typically aligns better with a class-based mental
model for users coming from OOP language backgrounds. It is also more
beginner-friendly by abstracting away the reactivity details and enforcing code
organisation via option groups.
### Composition API
With Composition API, we define a component's logic using imported API
functions. In SFCs, Composition API is typically used with ``. The
setup attribute is a hint that makes Vue perform compile-time transforms that
allow us to use Composition API with less boilerplate. For example, imports and
top-level variables / functions declared in `` are directly usable
in the template.
Here is the same component, with the exact same template, but using Composition
API and `` instead:
```vue
  Count is: {{ count }}
```
The Composition API is centered around declaring reactive state variables
directly in a function scope, and composing state from multiple functions
together to handle complexity. It is more free-form, and requires understanding
of how reactivity works in Vue to be used effectively. In return, its
flexibility enables more powerful patterns for organizing and reusing logic.
# [Initialize a project](https://vuejs.org/guide/quick-start.html#with-build-tools)
To create a build-tool-enabled Vue project on your machine, run the following
command in your command line. If you don't have `npm` follow [these
instructions](nodejs.md).
```bash
npm init vue@latest
```
This command will install and execute create-vue, the official Vue project
scaffolding tool. You will be presented with prompts for a number of optional
features such as TypeScript and testing support. If you are unsure about an
option, simply choose `No`. Follow their instructions.
Once the project is created, follow the instructions to install dependencies and
start the dev server:
```bash
cd 
npm install
npm run dev
```
When you are ready to ship your app to production, run the following:
```bash
npm run build
```
# The basics
## [Creating a Vue Application](https://vuejs.org/guide/essentials/application.html)
Every Vue application starts by creating a new application instance with the
`createApp` function:
```vue
import { createApp } from 'vue'
const app = createApp({
  /* root component options */
})
```
The object we are passing into `createApp` is in fact a component. Every app
requires a "root component" that can contain other components as its children.
If you are using Single-File Components, we typically import the root component
from another file:
```vue
import { createApp } from 'vue'
// import the root component App from a single-file component.
import App from './App.vue'
const app = createApp(App)
```
An application instance won't render anything until its `.mount()` method is
called. It expects a "container" argument, which can either be an actual DOM
element or a selector string:
```html
```
```javascript
app.mount('#app')
```
The content of the app's root component will be rendered inside the container
element. The container element itself is not considered part of the app.
The `.mount()` method should always be called after all app configurations and
asset registrations are done. Also note that its return value, unlike the asset
registration methods, is the root component instance instead of the application
instance.
You are not limited to a single application instance on the same page. The
`createApp` API allows multiple Vue applications to co-exist on the same page,
each with its own scope for configuration and global assets:
```javascript
const app1 = createApp({
  /* ... */
})
app1.mount('#container-1')
const app2 = createApp({
  /* ... */
})
app2.mount('#container-2')
```
### [App configurations](https://vuejs.org/guide/essentials/application.html#app-configurations)
The application instance exposes a `.config` object that allows us to configure
a few app-level options, for example defining an app-level error handler that
captures errors from all descendent components:
```javascript
app.config.errorHandler = (err) => {
  /* handle error */
}
```
The application instance also provides a few methods for registering app-scoped
assets. For example, registering a component:
```javascript
app.component('TodoDeleteButton', TodoDeleteButton)
```
This makes the `TodoDeleteButton` available for use anywhere in our app.
You can use also [environment variables](#environment-variables)
## [Declarative rendering](https://vuejs.org/tutorial/#step-2)
The core feature of Vue is declarative rendering: using a template syntax that
extends HTML, we can describe how the HTML should look like based on JavaScript
state. When the state changes, the HTML updates automatically.
State that can trigger updates when changed are considered reactive. In Vue,
reactive state is held in components.
We can declare reactive state using the data component option, which should be
a function that returns an object:
```javascript
export default {
  data() {
    return {
      message: 'Hello World!'
    }
  }
}
```
The message property will be made available in the template. This is how we can
render dynamic text based on the value of message, using mustaches syntax:
```html
{{ message }}
```
The double mustaches interprets the data as plain text, not HTML. In order to
output real HTML, you will need to use the `v-html` directive, although you
should try to avoid it for security reasons.
Directives are prefixed with `v-` to indicate that they are special attributes
provided by Vue, they apply special reactive behavior to the rendered DOM.
## [Attribute bindings](https://vuejs.org/tutorial/#step-3)
To bind an attribute to a dynamic value, we use the `v-bind` directive:
```html
```
A directive is a special attribute that starts with the `v-` prefix. They are part
of Vue's template syntax. Similar to text interpolations, directive values are
JavaScript expressions that have access to the component's state.
The part after the colon (`:id`) is the "argument" of the directive. Here, the
element's `id` attribute will be synced with the `dynamicId` property from the
component's state.
Because `v-bind` is used so frequently, it has a dedicated shorthand syntax:
```html
```
### Class binding
For example to turn the `h1` in red:
```vue
  Make me red 
```
You can have multiple classes toggled by having more fields in the object. In
addition, the `:class` directive can also co-exist with the plain class attribute.
So given the following state:
```javascript
data() {
  return {
    isActive: true,
    hasError: false
  }
}
```
And the following template:
```html
```
It will render:
```html
```
When `isActive` or `hasError` changes, the class list will be updated
accordingly. For example, if `hasError` becomes true, the class list will become `static active text-danger`.
The bound object doesn't have to be inline:
```javascript
data() {
  return {
    classObject: {
      active: true,
      'text-danger': false
    }
  }
}
```
```html
```
This will render the same result. We can also bind to a [computed
property](#computed-property) that returns an object. This is a common and
powerful pattern:
```javascript
data() {
  return {
    isActive: true,
    error: null
  }
},
computed: {
  classObject() {
    return {
      active: this.isActive && !this.error,
      'text-danger': this.error && this.error.type === 'fatal'
    }
  }
}
```
```html
```
### Style binding
`:style` supports binding to JavaScript object values.
```javascript
data() {
  return {
    activeColor: 'red',
    fontSize: 30
  }
}
```
```html
```
It is often a good idea to bind to a style object directly so that the template is cleaner:
```javascript
data() {
  return {
    styleObject: {
      color: 'red',
      fontSize: '13px'
    }
  }
}
```
```html
```
Again, object style binding is often used in conjunction with computed properties that return objects.
## [Event listeners](https://vuejs.org/tutorial/#step-4)
We can listen to DOM events using the `v-on` directive:
```vue
{{ count }}
```
Due to its frequent use, `v-on` also has a shorthand syntax:
```vue
{{ count }}
```
Here, `increment` references a function declared using the methods option:
```javascript
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      // update component state
      this.count++
    }
  }
}
```
Inside a method, we can access the component instance using `this`. The component
instance exposes the data properties declared by data. We can update the
component state by mutating these properties.
You should avoid using arrow functions when defining methods, as that prevents
Vue from binding the appropriate this value.
### [Event modifiers](https://vuejs.org/guide/essentials/event-handling.html#event-modifiers)
It is a very common need to call `event.preventDefault()` or
`event.stopPropagation()` inside event handlers. Although we can do this easily
inside methods, it would be better if the methods can be purely about data logic
rather than having to deal with DOM event details.
To address this problem, Vue provides event modifiers for `v-on`. Recall that modifiers are directive postfixes denoted by a dot.
* `.stop`
* `.prevent`
* `.self`
* `.capture`
* `.once`
* `.passive`
```html
...