mission at its peer device,
if the link is not encrypted,
the peer device may send either an “Insufficient
Authentication (0x05)”
“Insufficient
or
Encryption (0x0f)” error code.
the attribute’s
permission is “authenticated read/write” and the
link is only encrypted with an unauthenticated-and-no-
If
the peer
MITM-protection key as introduced in §2.3.2,
device sends the 0x05 error code. When an Android
mobile’s Bluetooth service receives either 0x05 or 0x0f
error code, it automatically starts re-pairing, ignoring the
previously adopted association method. Although the app
can learn if the 0x05 or 0x0f error occurs via a callback
function onCharacteristicRead(), the app cannot stop
the re-pairing process in this callback function. Therefore,
an attacker may spoof a paired device, utilize this error to
start a pairing process with an Android mobile, and obtain
the Android mobile’s MAC address and IRK.
1 boolean numericcomparison = false ;
2 boolean passkey = false ;
3 boolean justworks = false ;
4 boolean plaintext = true ;
5 // Activity starts ; register intents
6 public void OnCreate () {
7
IntentFilter pairingRequestFilter = new
IntentFilter () ;
8
9
10
pairingRequestFilter . addAction ( BluetoothDevice .
ACTION_BOND_STATE_CHANGED );
pairingRequestFilter . addAction ( BluetoothDevice .
ACTION_PAIRING_REQUEST );
registerReceiver ( mPairingRequestRecevier ,
pairingRequestFilter );
}
// Once connected call createBond ()
11
12
13
14
15 public void onReceive ( Context context , Intent intent
// Process intents and determine association method
device . createBond () ;
) {
if ( BluetoothDevice . ACTION_PAIRING_REQUEST . equals (
intent . getAction () )){ // either numeric
comparison or passkey is used
int pairingtype = intent . getIntExtra (
BluetoothDevice . EXTRA_PAIRING_VARIANT ,
BluetoothDevice . ERROR );
if ( pairingtype == BluetoothDevice .
PAIRING_VARIANT_PASSKEY_CONFIRMATION ){
numericcomparison = true ;
plaintext = false ;
}
if ( pairingtype == BluetoothDevice .
PAIRING_VARIANT_PIN ){
Passkey = true ;
plaintext = false ;
}
}
if ( BluetoothDevice . ACTION_BOND_STATE_CHANGED .
equals ( intent . getAction () )) { // Bonding ,
bonded , or bonding none ( failure )?
int bondstate = intent . getIntExtra (
BluetoothDevice . EXTRA_BOND_STATE ,
BluetoothDevice . ERROR );
if ( bondstate == BluetoothDevice . BOND_BONDED ){
if (! numericcomparison && ! passkey ){
justworks = true ;
plaintext = false ;
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36 }
}
}
}
Listing 2: Android determining association method after
bonding
Flaw 4 – No mechanism to programmatically remove a
suspicious/broken bond and start re-pairing. A third-
party Android app cannot remove a bond from the mobile’s
list of bonded devices although the user can manually re-
move a bond with the system settings app. The app can-
42    29th USENIX Security Symposium
USENIX Association
not use the prohibited reﬂection technique to call the system
level API removeBond() and delete an LTK, i.e., a bond.
Even if the app is able to tear down an insecure connection
that uses Just Works, breaking the connection does not re-
move the bond. The app cannot start a new secure pairing
process with a bonded device using createBond() either
since the LTK/bond still exists.
4 Downgrade Attacks
In this section, we present
the threat model, attack
overview, and detailed downgrade attacks against Android
mobiles and ensuing attacks against their peer devices.
4.1 Threat Model
Threat model for Android mobiles. Our attacks against
Android mobiles take the following assumptions. (i) An at-
tacker can obtain the same type of victim devices to explore
the applications and communication protocols. (ii) The at-
tacker cannot physically access the mobile. (iii) Our attacks
do not need malicious apps installed on the mobile while
many other attacks require malicious apps for Bluetooth ex-
ploits [11–13]. (iv) Before the attack, the Android mobile
and its peer device are paired using secure association meth-
ods such as Passkey Entry and Numerical Comparison. This
assumption presents a more reasonable and harder scenario
for attackers. Note that all attacks introduced in this paper
can also be deployed if the Android and its peer device have
not paired or paired with Just Works.
Threat model for peer devices. The threat model for the
attacks against peer BLE devices is different from the threat
model for attacks against mobiles, and it has following as-
sumptions: (i) Before the attack, the Android mobile and
its peer device are paired using secure association methods.
This assumption is the same as the one for attacks against
mobiles. (ii) We also assume that the attacker cannot touch
or unlock victim mobiles, but the attacker may have phys-
ical access to BLE devices, which could be true in various
scenarios. For example, IoT products such as smart lights
may be placed outside a house. Few people physically lock
away their BLE keyboards and attackers may press keys of
those BLE keyboards. Regardless, we consider the follow-
ing two attack scenarios against peer BLE devices of mo-
biles: (a) The attacker can physically access victim BLE de-
vices brieﬂy, for example, for a few minutes or even seconds;
(b) The attacker cannot physically access the BLE device.
Our defense in §5 will defeat attacks even if the attacker can
physically access victim BLE devices.
4.2 Attack Overview
Our attacks against mobiles involve four adversarial
parties: sniffer, fake BLE device, fake mobile, and blocker.
The sniffer sniffs BLE communication and collects basic
information such as the device’s MAC address and name
from advertising packets and scan response packets. The
fake BLE device and fake mobile are full-ﬂedged BLE
devices and also called the spooﬁng device and spooﬁng
mobile. A fake device emulates a victim device. The
attacker uses a sniffer to obtain the MAC address and name
of a BLE device. A fake device is then conﬁgured to have
the same MAC address and name as the victim BLE device.
It can forge advertising and scan response packets that
contain the same device name and service description as
those of the victim device. The fake device can implement
the same attributes of the victim device and manipulate the
permissions of these attributes. A fake mobile emulates a
victim mobile. This requires that the fake mobile know the
victim mobile’s MAC address and IRK which is proved
possible and will be demonstrated later in this section.
A blocker can launch a Denial of Service (DoS) attack
and block a victim BLE device from connecting to a victim
mobile so that a fake/spooﬁng device can connect to the
victim mobile. The blocker can be implemented as follows.
(i) A blocker can be a customized initiator. The number of
connections to a victim device is often limited to one. There-
fore, when a blocker connects to the victim BLE device,
other mobiles cannot connect to the victim device any more.
If the victim device allows multiple connections, multiple
blockers can be used [1]. (ii) If a whitelist is used by the
victim device, a blocker may fail to connect to it, since the
victim device only accepts an initiator that has paired with
it before. To subvert such a defense, a fake/spooﬁng BLE
device can increase its advertising frequency and will have
a better chance connecting to the victim mobile than the
victim device with the same MAC address. Our experiments
in §6.3 have validated this approach. (iii) A jammer can also
work as a blocker although we do not use it in this paper.
The four adversarial parties collaborate to deploy attacks
against victim mobiles and peer devices as shown in Fig-
ure 3. For example, to attack a victim mobile, a blocker
can be used to block a victim device so that a fake device
can connect to the victim mobile. The fake device can then
manipulate the BLE protocol such as device I/O capabilities
and intentionally create errors to poke the mobile. With the
stolen IRK and MAC address of the victim mobile through
attacks against mobiles, the fake mobile can connect to the
victim device, which can work with the fake device to per-
form attacks such as MITM attacks.
4.3 Attacks against Android Mobiles
Figure 3 gives steps of each attack and the relationship
between different attacks. One attack can be a building block
of other attacks. The name of an attack indicates its goal.
Attack I – False data injection via Design Flaw 3. The
fake device intentionally creates an error code Pin or Key
Missing (0x06). The communication between the An-
droid mobile and the fake device is downgraded to plaintext
USENIX Association
29th USENIX Security Symposium    43
as discussed in Design Flaw 3. We conﬁgure the permission
of the attributes of the fake device as read/write so that ac-
cess to the attributes does not require any pairing. The fake
device can then inject false data to the mobile. This attack
cannot be easily detected since the Android mobile does not
delete the original LTK. Therefore, even if the user checks
the list of bonded devices at the Android mobile’s system
settings, the list will not show any aberrations.
Attack II – Spooﬁng attack on sensitive information
via Design Flaw 3. By using Design Flaw 3, the attacker
downgrades the communication between the fake device
and the Android mobile to plaintext. The fake device
is positioned to receive any sensitive information from
the Android mobile. We ﬁnd that many IoT applications
implement an application layer password mechanism for
user authentication. When a user inputs the password, the
fake device can collect this password.
Attack III – Stealing Android mobile’s IRK and MAC
address via Design Flaws 1, 2 and 3. To prevent the MAC
address from leakage, an Android mobile with API 23 or
above uses IRK by default [14]. According to our experi-
ments, the IRK is generated when the mobile is conﬁgured
for the ﬁrst time starting from the factory settings. It will
not change until the mobile is reset to the factory settings.
Any peer BLE device paired with the mobile will receive
the same IRK and MAC address of the mobile.
To obtain the IRK and MAC address of a victim Android
mobile, the fake device can intentionally create a “Pin or
Key Missing (0x06)” error so that the communication be-
tween the mobile and fake device is downgraded to plain-
text. The attacker also conﬁgures the attribute permission of
the fake device as “encrypted read/write”. When the
Android app tries to access these attributes, the fake device
sends an “Insufficient Authentication (0x05)” or
“Insufficient Encryption (0x0f)” error to the victim
mobile, which starts a re-pairing process according to De-
sign Flaw 3. The fake device is conﬁgured to have no I/O
capabilities so that the victim mobile and fake device pair
with Just Works because of Design Flaws 1 and 2. The mo-
bile then distributes the IRK and MAC address to the fake
device in Step 9 in Figure 2. With the IRK, the attacker can
perform the private address resolution and trace the identity
of the Mobile every time the mobile uses BLE. This attack
defeats the purpose of IRK, which is used to prevent an An-
droid mobile from being tracked.
Attack IV – Denial of Service (DoS) via Design Flaws 1,
2, 3 and 4. To perform Attack IV, the attacker ﬁrst performs
Attack III stealing the mobile’s MAC and IRK, in which an
attacker can pair a fake device with a victim Android mobile
using Just Works. This pairing process creates a new LTK for
the mobile. The attacker then turns off the fake device and
blocker. The victim mobile will try to communicate with the
victim device. However, since the LTK on the mobile and
the LTK on the victim device are now different, we ﬁnd that
Android cannot detect the inconsistency and the communi-
cation enters into a deadlock. However, as mentioned in De-
sign Flaw 4, there is no public API for an app to remove a
bond on the mobile. The app cannot remove the bond or start
re-pairing. The deadlock can only be resolved by manually
removing the bond in the Android system setting.
(cid:57)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)
(cid:37)(cid:79)(cid:82)(cid:70)(cid:78)(cid:72)(cid:85)
(cid:57)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)
(cid:41)(cid:68)(cid:78)(cid:72)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)
(cid:41)(cid:68)(cid:78)(cid:72)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)
(cid:20)(cid:29)(cid:3)(cid:37)(cid:79)(cid:82)(cid:70)(cid:78)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)
(cid:21)(cid:29)(cid:3)(cid:38)(cid:82)(cid:81)(cid:81)(cid:72)(cid:70)(cid:87)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:3)(cid:72)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:22)(cid:29)(cid:3)(cid:54)(cid:72)(cid:81)(cid:71)(cid:3)(cid:5)(cid:3)(cid:51)(cid:76)(cid:81)(cid:3)(cid:82)(cid:85)(cid:3)(cid:46)(cid:72)(cid:92)(cid:3)(cid:48)(cid:76)(cid:86)(cid:86)(cid:76)(cid:81)(cid:74)(cid:3)(cid:5)(cid:3)
(cid:72)(cid:85)(cid:85)(cid:82)(cid:85)(cid:3)(cid:11)(cid:19)(cid:91)(cid:19)(cid:25)(cid:12)
alt
(cid:23)(cid:29)(cid:3)(cid:44)(cid:81)(cid:77)(cid:72)(cid:70)(cid:87)(cid:3)(cid:73)(cid:68)(cid:78)(cid:72)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)(cid:3)(cid:87)(cid:82)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)
(cid:24)(cid:29)(cid:3)(cid:54)(cid:87)(cid:72)(cid:68)(cid:79)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)(cid:3)(cid:73)(cid:85)(cid:82)(cid:80)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)
(cid:25)(cid:29)(cid:3)(cid:41)(cid:68)(cid:78)(cid:72)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:69)(cid:79)(cid:82)(cid:70)(cid:78)(cid:72)(cid:85)(cid:3)(cid:74)(cid:82)(cid:3)(cid:82)(cid:73)(cid:73)(cid:79)(cid:76)(cid:81)(cid:72)(cid:17)(cid:3)(cid:57)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)
(cid:70)(cid:82)(cid:80)(cid:80)(cid:88)(cid:81)(cid:76)(cid:70)(cid:68)(cid:87)(cid:72)(cid:3)(cid:76)(cid:81)(cid:3)(cid:83)(cid:79)(cid:68)(cid:76)(cid:81)(cid:87)(cid:72)(cid:91)(cid:87)
(cid:26)(cid:29)(cid:3)(cid:36)(cid:70)(cid:70)(cid:72)(cid:86)(cid:86)(cid:3)(cid:68)(cid:87)(cid:87)(cid:85)(cid:76)(cid:69)(cid:88)(cid:87)(cid:72)(cid:86)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:72)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:72)(cid:71)(cid:3)(cid:82)(cid:85)
(cid:68)(cid:88)(cid:87)(cid:75)(cid:72)(cid:81)(cid:87)(cid:76)(cid:70)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:85)(cid:72)(cid:68)(cid:71)(cid:18)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:3)(cid:83)(cid:72)(cid:85)(cid:80)(cid:76)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:86)
(cid:27)(cid:29)(cid:3)(cid:54)(cid:72)(cid:81)(cid:71)(cid:3)(cid:5)(cid:3)(cid:44)(cid:81)(cid:86)(cid:88)(cid:73)(cid:73)(cid:76)(cid:70)(cid:76)(cid:72)(cid:81)(cid:87)(cid:3)(cid:36)(cid:88)(cid:87)(cid:75)(cid:72)(cid:81)(cid:87)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:11)(cid:19)(cid:91)(cid:19)(cid:24)(cid:12)(cid:3)(cid:5)
(cid:82)(cid:85)(cid:3)(cid:5)(cid:3)(cid:44)(cid:81)(cid:86)(cid:88)(cid:73)(cid:73)(cid:76)(cid:70)(cid:76)(cid:72)(cid:81)(cid:87)(cid:3)(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:11)(cid:19)(cid:91)(cid:19)(cid:73)(cid:12)(cid:3)(cid:5)(cid:3)(cid:72)(cid:85)(cid:85)(cid:82)(cid:85)
(cid:28)(cid:29)(cid:3)(cid:51)(cid:68)(cid:76)(cid:85)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:45)(cid:88)(cid:86)(cid:87)(cid:3)(cid:58)(cid:82)(cid:85)(cid:78)(cid:86)(cid:30)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:54)(cid:87)(cid:72)(cid:68)(cid:79)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)(cid:10)(cid:86)(cid:3)(cid:48)(cid:36)(cid:38)(cid:15)(cid:3)(cid:44)(cid:53)(cid:46)
alt
(cid:20)(cid:19)(cid:29)(cid:3)(cid:54)(cid:72)(cid:81)(cid:71)(cid:3)(cid:48)(cid:36)(cid:38)
(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:44)(cid:53)(cid:46)
(cid:20)(cid:20)(cid:29)(cid:3)(cid:37)(cid:92)(cid:83)(cid:68)(cid:86)(cid:86)(cid:3)(cid:90)(cid:75)(cid:76)(cid:87)(cid:72)(cid:3)
(cid:79)(cid:76)(cid:86)(cid:87)(cid:3)(cid:82)(cid:73)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)
(cid:3)(cid:20)(cid:21)(cid:29)(cid:3)(cid:51)(cid:68)(cid:76)(cid:85)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)
(cid:3)(cid:3)(cid:20)(cid:22)(cid:29)(cid:3)(cid:48)(cid:68)(cid:81)(cid:76)(cid:83)(cid:88)(cid:79)(cid:68)(cid:87)(cid:72)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)
(cid:20)(cid:23)(cid:29)(cid:3)(cid:53)(cid:72)(cid:79)(cid:68)(cid:92)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)(cid:3)(cid:69)(cid:72)(cid:87)(cid:90)(cid:72)(cid:72)(cid:81)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)
(cid:20)(cid:24)(cid:29)(cid:3)(cid:3)(cid:41)(cid:68)(cid:78)(cid:72)(cid:3)(cid:80)(cid:82)(cid:69)(cid:76)(cid:79)(cid:72)(cid:15)(cid:3)(cid:73)(cid:68)(cid:78)(cid:72)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:69)(cid:79)(cid:82)(cid:70)(cid:78)(cid:72)(cid:85)(cid:3)(cid:74)(cid:82)(cid:3)(cid:82)(cid:73)(cid:73)(cid:79)(cid:76)(cid:81)(cid:72)(cid:17)(cid:3)(cid:38)(cid:82)(cid:80)(cid:80)(cid:88)(cid:81)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:72)(cid:81)(cid:87)(cid:72)(cid:85)(cid:86)
(cid:76)(cid:81)(cid:87)(cid:82)(cid:3)(cid:71)(cid:72)(cid:68)(cid:71)(cid:79)(cid:82)(cid:70)(cid:78)(cid:3)(cid:71)(cid:88)(cid:72)(cid:3)(cid:87)(cid:82)(cid:3)(cid:76)(cid:81)(cid:70)(cid:82)(cid:81)(cid:86)(cid:76)(cid:86)(cid:87)(cid:72)(cid:81)(cid:87)(cid:3)(cid:47)(cid:55)(cid:46)(cid:86)
Figure 3: Sequence diagram of downgrade attacks w/o phys-
ical access in Uniﬁed Modeling Language (UML). The alt
frame is the alternative combined fragment, modeling the if-
then-else logic. Steps of Attacks against victim mobile: (I)
Fake data Injection Attack (1–4); (II) Sensitive Information
Stealing Attack (1–3 and 5); (III) Stealing IRK and MAC
Address Attack (1–3 and 7–9); (IV) DoS Attack (1–3, 7–9
and 15). Steps of Attacks against victim device: (V) Eaves-
dropping Attack (1–3 and 6); (VI) Whitelist Bypassing At-
tack (1–3 and 7–11); (VII) Data Manipulation Attack (1-3
and 7-13); (VIII) Man-in-the-Middle Attack; (1–3 and 7–14)
4.4 Attacks against Peer Devices
Attacks against an Android mobile will affect its bonded
peer BLE device. We now discuss the attacks beyond mo-
44    29th USENIX Security Symposium
USENIX Association
biles, i.e., Attacks V–VIII in Figure 3. The fake mobile that
obtains the victim mobile’s MAC address and IRK can con-
nect to the victim device and deploy different attacks under
the two different threat models.
4.4.1 Attacks with Brief Access to Victim Device
Given that a mobile cannot enforce secure pairing, a fake
device connects to the victim mobile using the scheme in
Attack I (false data injection attack). Since an attacker can
touch a victim peer device, the attacker can always pair a