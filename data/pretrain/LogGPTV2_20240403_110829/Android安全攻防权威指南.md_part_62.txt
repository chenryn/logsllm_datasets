生后如果继续运行，可能会导致数据损失，或许更精。
she118android: / $ cat /proe/sys/kerne1/panic
---
## Page 280
264第10章攻击内核
shel19android: / $ cat /proc/nyu/kernel/panic
/proc/sys/kemelpanic_on_oops 项控制Oops（下一节讨论）是否会触发panic。这个选项是默
认开启的，如下方式可以关闭它：
she119android:/ $ cat /proc/sys/kerne1/panic_on_oops
she11gandroid:/ $ su -c *echo 0 > /proc/sys/kerne1/panic_on_oops
shell@android:/ $ cat /proc/sys/kernel/panic_on_oops
用这些方法就能够获得内核崩溃信息。现在，必须理解内核空间发生的问题。
10.4.2理解Oops信息
内核崩溃信息通常被称为Oops。Oops实际上就是一个崩溃dump文件，包含通用的分类信
息、寄存器值、寄存器指向的数据、加载模块以及栈回溯信息。并非任何时候都能获得这些信息，
例如，如果栈顶指针被破坏，就不可能建立一个正确的栈回溯。本节分析了运行Android4.2.2
系统的Nexus4上的一个Oops消息。这个Oops的全部内容可以从本书的附加材料中下载：
http://www.wiley.com/go/androidhackershandbook/。
注意本节使用的内核包含LG电子公司所作的修改，所以其他设备上可能没有一部分信息：
这个Oops发生在触发CVE-2013-1763的时候，该漏洞位于sock_diag_1ock_handler函
数。详细信息参阅本章后面案例研究的“sock_diag”部分。这里我们不关注漏洞，面是重点关注
如何理解Oops消息本身。
Oops的第一行表示内核尝试访问未映射的内存，由/amm/mm/faultc中的_do_kernel_fault
函数生成。
Unable to handle kernel paging request at virtual address 00360004
内核尝试读取用户空间的地址0x00360004。由于在这个地址上，用户空间的进程中没有任
何内存映射，所以产生了页错误。
第二和第三行跟页表项有关，由show_ptr函数生成，这个函数也在arch/arm/mm/fault.c
中。
pgd = e9d08000
00000000=p5d[0009000]
第二行显示了页全局目录（PGD）的地址，而第三行显示了访问地址以及地址对应PGD中
的值。这里，*pgd的值为0x00000000，表明这个地址没有被映射。
页表有许多用处，主要用于把虚拟内核转换成物理内存地址，还可以用来追踪内存权限和
swap状态。在32位的系统中，页表也用来管理全系统的物理内存使用（超出地址空间一般的允
---
## Page 281
10.4调试内核
265
许范围）。这使得32位系统可以使用超过4GB的RAM，尽管单个32位的进程无法编制所有内
存空间。可以在Understanding theLimax Kermel第3版中找到更多关于页表和页错误处理的相关
信息，也可以参考Linux内核源代码中的Documentation/vm目录。
在页表信息后，Oops消息包含了一行有用的信息：
Internal error: Oops: 5 [#1] PREEMPT SMP ARH
尽管只有一行，但它包含了很多信息。这行消息由/arm/kermel/traps.c中的_die函数触发。
字符串的第一部分Internalerror 为内核源代码中的静态字符串。第二部分Oops 是调用函
数传入的参数。其他调用点使用不同的字符申指出发生了何种错误。下一个部分5表明了_die
函数的运行次数，但是还不明确为何会显示数字5。其余部分显示了内核编译时使用的一些选项：
抢占式多任务（PREEMPT）、对称多处理结构（SMP）和ARM架构。
后面的几行消息由 arch/arm/kemelprocessc中的_show_regs 函数生成。这部分是Oops 消
息中最重要的信息，从中可以找到内核是在哪里崩溃的，以及崩溃时CPU处于何种状态。下面
这行消息显示了错误发生时的CPU序号。
CPU: 0 Not tainted (3.4.0-perf-g7ce11cd ind#1)
CPU序号之后的域显示了内核是否被污染。这里的内核没有被污染：如果被污染了，就会显
示Tainted，并在后续的几个字符中给出内核如何被污染的信息。
紧接着的两行显示了内核代码段出错的位置：
PC is at sock_diag_rcv_msg+0x80/0xb4
LR i8 at sock_diag_rcv_nsg+0x68/0xb4
这两行显示了pc和1r寄存器的符号值，分表代表了当前代码的位置及其调用函数。使用
print_symbol函数来获取符号名字。如果找不到符号，就会显示寄存器值。利用这个值，能够
使用IDApro或者attach上的内核调试器找到出错代码的位置。
接下来的5行包含了所有寄存器的信息：
pC：1r:psr:20000013
sp:ecf7dcd0ip:00000006
r10: 00000012
r9 : 00000012
r8 :00000000
r3:00360000 r2:ecf76cc8 r1:ea9d6600 r0:c0de8c1c
13
ecf7dd04r61c108bb4c
0099P6e9 1 cx
r4:1ce2bb600
10
上面的行包含了每个寄存器的数值。这些值对于跟踪代码崩溃前的指令非常有用，尤其是与
Oops消息当中的内存内容信息相结合。上面的最后一行信息显示了很多编码后的标志：
Flags: nzCv IRQs on FIQs on Mode SVC_32 ISA ARM Segment user
这些标志被解码成了人类可读的表示形式。第一组是nzCv，对应于算数逻辑单元（ALU）
中cpsr寄存器的状态标志。如果这个标志位被置1，就用大写字母显示，否则用小写字母显示。
在这个Oops消息中，进位标志位被置1，但是负数、零和溢出标志位被置0。
ALU状态标志信息之后，显示了中断或快速中断是否被开启。接着，显示了发生崩溃时处
理器处在什么模式。由于崩溃发生在内核空间中，所以这里显示的是SVC_32。接下来的两个词
---
## Page 282
266第10章攻击内核
代表前溃时使用的指令集体系架构（ISA）。最后，Segment信息表示当前的段为内核空间的内
存还是用户空间的内存。这个例子中是用户空间，这是一个很危险的信号，因为内核应该严禁访
问用户空间中未映射的内存。
下一行由_show_regs函数生成，包含了ARM处理器的一些特定的信息。
Contro1: 10c5787d Table: aa70806a DAC: 00000015
这里出现了三个属性：控制、表和DAC，分别对应于特殊的ARM特权寄存器c1、c2和
c3。c1寄存器是ARM处理器的控制寄存器，用于进行底层的设置，例如内存对齐、缓存和终
端等。c2寄存器用于转换表基址寄存器TTBRo（TranslationTableBaseRegister），存储了第一级
页表的地址。c3寄存器用于域访问控制（DAC，DomainAccessControl）寄存器，指定了最多16
个域的权限等级，每个等级有两个控制位。每个域可以为用户空间或者内核空间设置访问权限。
在随后的部分中，show_extra_register_data函数打印的消息包含了通用寄存器指向的
虚拟内存中的内容。如果寄存器指向的不是一个已映射的地址，就会被忽略，或是在应为数据内
容的地方出现星号标记。
PC:0xe066ba0c:
ba0c  e92d4070 e1a04000 e1d130b4 e1a05001 e3530012 3a000021 e3530013 9a000002
[.- -]
b9f4 eb005564 ela00004 e8bd4038 ea052f6a c0de8c08 c066ba0c e92d4070 ela04000
LR: 0xc066b9f4:
[. . -]
SP: 0xecf7dc50:
dc50
c0df1040 00000002 c222a440 00000000 00000000 c00f5d14 00000069 eb2c71a4
[-.·]
对于每个寄存器中的地址，从之前128字节的位置开始，一共显示256字节的内存。PC寄
存器和LR寄存器指向的内存尤其有用，特别是与Linux内核源代码中提供的decodecode脚本工
具相结合。这个脚本会在10.5.3的“sock_diag”漏洞部分中用到。
在内存信息之后，_die函数详细显示了触发错误的进程。
Process sock_diag (pid: 2273. stack 1imit = 0xecf7c2f0)
10oop
Stack: (0xecf7dcd0 to 0xecf7e000)
ea9d6600 ee2bb600 c066ba0c c0680fdc
dce0: 
dd00: 
c0de8c08 ee2bb600 ea065000 c066b9f8 c066b9d8 ef166200 ee2bb600 c067fc40
ea065000 7fffffff 00000000 ee2bb600 ea065000 00000000 ecf7df7c ecf76d78
[..-]
第一行显示了进程名、进程ID和内核栈顶信息。对于某些进程，这个函数也会显示内核栈
中的数据，从栈顶sp一直到栈低的数据。之后是调用栈回溯信息，如下所示：
[≤c066ba8c>](sock_dlag_rcv_nsg+0x80/0xb4) from []
[] (net1ink_rev_skb+0x50/0xac) from []
(net1ink_rcv_skb+0x50/0xac)
[](sock_diag_rev+0x20/0x34) from []
(sock_diag_rcv+0x20/0x34)
[](net1ink_unicast+0x14c/0xle8) from []
(net1ink_unicast+0x14c/0x1e8)
(net1ink_sendnsg+0x278/0x310)
---
## Page 283
10.4调试内核
267
[] (net1ink_sendmsg▪0x278/0x310) from []
[](sock_sendnsg+0xa4/0xc0) from []
(sock_sendmsg+0xa4/0xc0)
(_sys_sendmsg+0x1cc/0x284)
[](ays_sendmsg+0x1cc/0x284) fxom []
[](sys_sendmeg+0x3e/0x60) from []
(09x0/0gxg+bsupuas"ss)
(ret_fa8t_8y8ca11+0x0/0x30)
调用栈精确显示了导致错误的执行路径，包括函数的名称符号：还显示了每个栈帧的1r寄
存器值。从中可以清楚地看到栈破坏。
接下来，使用dump_instr函数显示4个导致错误的用户空间的指令：
Code: e5963008 e3530000 03e04001 0a000004 (e5933004)
尽管显示这个数据似乎不可靠，但可以用来诊断问题，例如英特尔的0xf00fbug。
从_die函数返回后，开始执行oops_exit函数。该函数显示了一个随机值来代表这个
Oops:
--  end trace 3162958b5078dabf 1---
最后，如果panic_on_oops标志被置1，内核会打印一条消息并暂停：
Kernel panie - not symcing: Fatal exception
Linux内核的Oops消息在内核发生问题时提供了丰富的信息，对于追踪问题根源有极大的
帮助。
10.4.3使用KGDB进行Live调试
只通过内核前漫日志来调试是不够的。内核还有几个选项和工具，可以实现实时调试。
在.config文件中搜索debug字符申，能找到80多个调试选项。在Documentation目录搜索“debug”，
能找到2300多个结果。这些特性具有许多功能，有些能增加调试日志，有些能打开完整的交互
式调试功能。
目前，交互式调试体验最好的是KGDB，但它并不总是最好的选择。举个例子，在经常被调
用的地方设置断点，会让调试变得很慢。这种情形下，使用自定义的插桩或是类似Kprobe的工
具更加合适。本节主要介绍使用KGDB进行交互式调试。在开始之前，需要为设备和开发机作
一些准备，之后就能attach到内核并使用KGDB了。
1.准备设备
Linux内核支持通过USB和console端口使用KGDB。这两种机制分别通过kgdbdbgp和
kgdboc内核命令行参数来控制，但是都需要一些特殊的准备工作：使用USB端口需要一个特殊
的USB驱动，面使用console端口需要访问设备上的一个串口。由于访问 GalaxyNexus串口的相
关资料较多，所以以console端口为例比较理想。制作线的详细信息请参考第13章。
线制作完成后，需要制作一个自定义的引导镜像，包括创建一个自定义内核和RAM盘。
由于内核编译需要时间，所以先创建自定义内核。要想使用KGDB，需要修改内核中的两个
---
## Page 284
268
第10章攻击内核
参数：配置和序列初始化代码。需要配置的参数见表10-1。
表10-1开启KGDB的配置参数
特性
描述
CONFIG_KGDB=y
开启内核的 KGDB支持
CONFIG_OMAP_FIQ_DEBUGGER=n
Galaxy Nexus 默认开启白带的 FIQ 调试器
关闭它，防止与使用申口的KGDB发生冲突
CONFIG_CMDLINE-[.-]
通过设置kgdboc来使用正确的串口和波特率
让引导控制台也使用中口
CONFIG_WATCHDOG=n
CONFIG_OMAP_
防止看门病在调试时重启设备
WATCHDOG=n
为了让串口连接自制的线，还需要稍微修改内核。只需要修改OMAP（OpenMultimedia