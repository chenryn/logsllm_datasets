•
potentially dangerous services that have been left acti-
vated, and missed opportunities to activate useful addi-
tional security functions (e. g., password protection,
encryption, authentication)
strongly encrypted passwords that are reused in weakly
encrypted format (thus providing almost plaintext for
the strongly encrypted secret)
incomplete  configuration  of  complex  router  features
(e.g., authentication based on RADIUS, but with no
RADIUS server being specified)
an assignment of an undefined access control list to an
interface (leaving the interface silently unprotected)
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
•
•
•
•
•
an  access  control  list  that  is  defined  but  never  used
(probably due to a typing mistake: chances are that the
misspelled access control list actually exists but pro-
vides inadequate protection)
access  control  lists  that  contain  superfluous  ("dead")
rules (not an immediate danger, but an indication that
the router administrator did not fully comprehend the
implications of the configured properties) — see Sec-
tion 3.5
an  ingress/egress  interface  (i.e.,  a  connection  to  a  for-
eign, potentially hostile network) that fails to satisfy the
user-defined minimum relaying (whitelist) and filtering
(blacklist) requirements — see Section 3.5
a  line  interface  failing  user-defined  blacklist  and
whitelist restrictions
an  inadequately  high  reporting  threshold  for  logging
(thus excluding access control list events that are
explicitly required to be logged).
Note that most of these findings require an evaluation of the
combined  effects  of  multiple  configuration  clauses.  This
type of analysis cannot be achieved by mere pattern matching
— i.e., by checking the structural equivalence to predefined
clause templates at the syntax level — but requires an assess-
ment of the semantics of the configuration as a whole.
Figure 2 shows the evaluation profile of a demonstration
run. For more details about the configuration under test there
and the results of its evaluation, we refer the reader to the
CROCODILE  homepage  at  www.iese.fraunhofer.de/
crocodile.
3.3. Differential display mode
A special type of reporting is the differential display of
two analysis results. Differential display mode emphasizes
the effects of changes relative to an earlier configuration —
all findings not affected by these changes are faded out in
the display. This is very useful in practice, as the user will
usually not "fix" all findings, but leave some settings as they
are for reasons not visible in the configuration file. It would
be a considerable nuisance to be presented the same irrele-
vant findings again and again. CROCODILE can restrict its
evaluation to only the differences between two versions of
a configuration, producing an evaluation profile display and
a side-by-side overview display that make immediately obvi-
ous where the configuration was changed and whether the
change was for the better or for the worse.
3.4.1. CompoundPatterns. The most fundamental checker
module  delivered  with  CROCODILE  is  the  CompoundPat-
terns module. It supports user-defined evaluation criteria
for the (non-)existence of certain IOS configuration clauses.
The user may specify arbitrary syntax patterns and, for each
pattern, assign a severity to (1) the occurrence of this pattern
in  the  configuration  and  (2)  the  omission  of  the  pattern.
Depending on the user’s choice, CROCODILE will generate
an OKAY, INFO, CHECK, WARN, or ALERT message in each case.
A pattern may be either a basic pattern referring to a single
configuration clause, or a compound consisting of several
basic  patterns  linked,  for  example,  by  logical  AND,  OR,
XOR,  NOT,  or  IF-THEN-ELSE  operators.  CompoundPat-
terns recognizes the IOS configuration modes (e.g., 'inter-
face mode', 'line mode', 'router mode'), and patterns may be
restricted to be valid in certain IOS modes only. Compound-
Patterns presents its findings in a CROCODILE view of the
same name.
Figure 3 shows an example of typical macro and com-
pound  pattern  specifications.  The  first  compound  pattern
requires  that  for  all  interfaces  except  'Loopback'  or  'Null'
interfaces,  the  interface  must  be  either  disabled  ("shut-
down"), or else the Cisco Discovery Protocol (CDP) must
be disabled — either local to the interface context ("no cdp
enable"), or at global level for all interfaces("no cdp run").
If this condition is met, CROCODILE generates an OKAY mes-
sage ('o'); otherwise, a WARN message ('w') is issued.
Of  course  this  simple  specification  format  covers  only
those  evaluation  criteria  that  can  be  recognized  without
extracting and accumulating state information from the con-
figuration clauses that match the compound pattern. Typical
evaluation problems covered by CompoundPatterns are, for
example, checking that (un)desired services and modes are
explicitly (de)activated, that certain commands are assigned
the required level of privilege, or that passwords are assigned
and sufficiently securely encrypted. 
INTERFACE ::=   { int | interface }
INTERFACE !Loopback !Null ... {
ow  if (NOT shutdown) {
no cdp enable | Global(no cdp run)
}
} INTERFACE ...
line Vty ... {
ow
oc
no exec | access-class NUM in
logging synchronous
3.4. Available checker modules
} line ...
CROCODILE currently comes with the following checker
modules:
Figure 3.  Compound pattern specifications
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
Relationships that require comparisons between specific
attributes of multiple pattern instances cannot be expressed
in compound pattern syntax, for example, that an arbitrary
name  found  in  use  has  been  properly  defined  elsewhere.
However,  this deliberate restriction yields  a  very intuitive
way to describe many simple properties of a configuration.
Our experience has shown that CompoundPatterns contrib-
utes significantly to a large evaluation coverage. Neverthe-
less, an analysis of the complex aspects of a router configu-
ration needs to dig deeper than this. To this end, CROCODILE
provides the more specific modules described next, which
offer advanced capabilities at the expense of less flexibility
in module configuration.
3.4.2. Connectivity. This module extracts from the config-
uration information about the topology of the router’s net-
work neighborhood with its surrounding subnets and nodes.
While it does report irregularities and potential weaknesses,
the focus of this module is not on security checking, but on
extracting and deriving topology information for later pro-
cessing  by  other  modules  or  for  manual  inspection.  Cur-
rently, the reconstructed topology data are listed in textual
form, but a graphical output format for human users is under
development. Taking the case of an interface as an example
of the extracted information, the module would list which
IP protocols are routed through this interface as inbound and
outbound traffic to and from which subnets or hosts. Con-
nectivity  presents  most  of  its  findings  in  CROCODILE
views for 'Lines and Interfaces' and 'Nodes and Subnets' .
3.4.3. IngressEgress. This module verifies that the config-
uration of access control lists (ACLs), line interfaces, and
network interfaces conforms to the desired behavior as spec-
ified by the CROCODILE user. The user may specify black-
sets and whitesets for these objects, and the IngressEgress
module will list any violations found in the ACL relative to
these sets, as well as perform other analyses as described in
Section 3.5.  Figure 4  shows  an  example  of  a  user-defined
egress restriction. Note that format and order of independent
egress  clauses  is  irrelevant:  IngressEgress  computes  the
precise meaning — i.e., blackset and whiteset — of the spec-
ification, and checks whether the evaluation target is at least
as restrictive as the blackset, and open at least for the whi-
teset. The module presents its findings in various CROCO-
DILE views for 'Ingress/Egress' in general, for 'Accesslists',
and for 'Lines and Interfaces'.
3.4.4. AAA. The  authentication/authorization/accounting
(AAA) functionality of IOS is central to securing access to
a router. The AAA module checks the consistency, complete-
ness and security of the authentication and authorization set-
tings (accounting is not yet assessed), including the order of
clauses, the consistency of definition and use of mechanisms,
INGRESS_EGRESS_INTERFACE ::= Serial {1|2}
NETMASK  ::= 0.0.0.255
LOCALNET ::= 157.106.153.0 NETMASK
!  RFC1918 outbound address filtering
interface INGRESS_EGRESS_INTERFACE out {
ip any 10.0.0.0 
deny 
0.255.255.255
deny   ip any 127.0.0.0  0.255.255.255
deny   ip any 172.16.0.0 0.15.255.255
deny   ip any 192.168.0. 0 0.0.255.255
permit ip LOCALNET 
any
}
Figure 4.  IngressEgress specification
the use of insecure or deprecated features, the use of IOS
commands that are incompatible with AAA, as well as use
and  security  of  passwords  and  of  external  authentication
server accesses. The evaluation of AAA is a complex task,
and numerous non-AAA features like interface, line, user,
and server commands have to be taken into account for this
analysis. The module feeds its findings into the view 'AAA'
of the 'Authentication & Authorization' display.
3.4.5. Logging. IOS supports five modes of logging relevant
events at different severity levels (e.g., console logging, sys-
log, SNMP traps), which may be used in any combination.
The Logging module checks and lists the activation level of
logging modes, remote logging servers involved, and con-
figured  attributes  such  as  time  stamps,  bandwidth  limita-
tions, or buffer sizes. The module validates the consistency
of all these settings. Logging collects its findings in a CROC-
ODILE view of the same name.
3.4.6. Passwords. Several passwords may be specified for
an IOS router, such as login passwords, enable passwords,
or  FTP  passwords,  optionally  restricted  to  certain  IOS
"enabling  levels"  only.  Each  password  may  be  encrypted
using either a cryptographically weak or strong mechanism.
The Passwords  module  checks  and  lists  the  general  and
level-specific activation of passwords, checks for trivial or
weakly  encrypted  passwords,  and  whether  strongly
encrypted passwords are reused in weakly encrypted format.
The  module  presents  its  findings  in  the  'Passwords  and
Secrets'  view  of  the  'Authentication  &  Authorization'  dis-
play.
3.4.7. SNMP. The  Simple  Network  Management  Protocol
(SNMP) is a protocol for the remote retrieval and manipu-
lation of numerous router parameters pertaining to network
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
management.  In  particular  SNMPv3  supports  multiple
mechanisms for authentication, authorization, and account-
ing.  CROCODILE  checks  the  router  for  SNMP  issues  like
full  use  of  the  available  security  features,  easily  guessed
community  strings,  protection  by  access  control  lists  and
SNMP view restrictions, and (de)activation of certain SNMP
traps (i.e., asynchronous notification messages). SNMP col-
lects its findings in a CROCODILE view of the same name.
3.4.8. NTP. The Network Time Protocol (NTP) supports the
synchronization of system  clocks among network  compo-
nents,  which  is  useful  for  monitoring  and  error  handling.
Among other things, the NTP checker module evaluates NTP
access control lists, checks and lists the declared and used
authentication keys, and performs cross-checks between the
configured NTP commands and these security settings. Fur-
thermore, the potential NTP client hosts are listed for each
router interface. NTP collects its findings in a CROCODILE
view of the same name.
3.4.9. RATemulation. Another module, which is somewhat
out of line with the others in that it does not cover a security
aspect of its own, is a module that emulates the Router Audit
Tool (RAT). Section 4.1 describes RAT and our emulation
module in more detail.
3.5. Access control list analysis
A unique feature of CROCODILE is the symbolic repre-
sentation and processing of access control lists (ACLs) and
their associated blacksets and whitesets, that is, the sets of
packets that can (not) pass through an ACL. In IOS an ACL
is  specified  as  an  ordered  sequence  of  'permit'  and  'deny'
rules. Each rule refers to packets with a specific combination
of protocol type (e.g., IP, TCP, UDP, ICMP, IGMP), origin
address,  destination  address,  and  maybe  some  additional
packet attributes. Conceptually, the router applies an ACL
to a given IP packet by sequentially comparing the packet
to each ACL rule; the first rule that matches the packet deter-
mines  whether  the  packet  is  accepted  (’permit’  rule)  or
rejected (’deny’ rule). Obviously, the order of rules is sig-
nificant here. If none of the ACL’s rules matches the packet,
the packet is silently discarded. This ACL formalism is sim-
ple yet flexible.
Unfortunately,  ACLs  tend  to  grow  over  time,  and  the
growth is often rather unsystematical. Therefore, it is often
infeasible for a human to determine the exact whiteset and
blackset of a real-world ACL, and thus errors in the filtering
behavior of a router are easily missed. Note, for example,
that if an ACL rule appears too late in the rule sequence it
may be unreachable for any matching IP packet — the rule
may unintentionally become a dead clause. Note also that an
intended ACL effect may be achieved in many different, syn-
tactically unrelated ways, which makes two ACLs virtually
incomparable for the human expert without knowing their
blacksets  and  whitesets.  CROCODILE  computes  blacksets
and whitesets independently of a specific ordering or format
of ACL and routing clauses, and uses them for a number of
consistency and security checks:
• ACL rules whose packet domain intersects with that of
earlier rules must be reconsidered when removing or
reordering ACL clauses. CROCODILE indicates such
dependent rules along with the set of rules they depend
on.
• Rules which could be removed without any effect (dead
rules) are flagged, along with the set of earlier rules
whose combined effect "killed" them by "shading" the
rule’s whole packet domain. Such a dead rule is a hint
that the creator of the ACL originally intended a differ-
ent effect than that actually resulting.
• The IngressEgress checker module (see Section 3.4.3)
employs the blackset and whiteset computation when
verifying that a given ACL (or, more generally, an
interface specification in combination with associated
routes and ACLs) does indeed amount to (at least) the
relaying and filtering effect that the user stipulated.
• For a complex ACL with many rules, the corresponding
blackset and whiteset may become so fragmented that
manual inspection of all fragments is no longer feasi-
ble. CROCODILE’s 'blackwhite.pl' utility can be used in
such cases to interactively narrow the scope of the set
computations from full generality (i.e., all IP packets)
to arbitrary subsets of IP packets — for example to
"ICMP packets originating from remote addresses" or
"TCP packets belonging to not-yet-established connec-
tions" only: Such blackset and whiteset projections are
much easier to comprehend and to verify. 
4. Related Work
Few tools are available for router security checking, none
of them, remarkably, by the router vendors. The well-known
RAT (Router Audit Tool) [3] and one lesser known tool by
Equant Communications [4] are the only serious contenders
known  to  us.  Also  technically  interesting  are  some  tools
aimed at firewalls rather than routers, which analyze packet
filtering behavior in a way that is comparable to CROCO-
DILE’s functions in this area.
4.1. RAT
RAT version 2.0 is a joint development of several partners,
including  the  U.S.  National  Security  Agency  (NSA),