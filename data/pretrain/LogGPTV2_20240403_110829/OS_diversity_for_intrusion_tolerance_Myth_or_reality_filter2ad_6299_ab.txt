come with the operating system but that are not needed
for basic operations, and in some cases require speciﬁc
installation: database management systems, messenger
clients,
text editors and processors, web/email/FTP
clients and servers, music/video players, programming
languages (compilers and virtual machines), antivirus,
Kerberos/LDAP software, games, etc.
The classiﬁcation above facilitates the analyses of which
parts of the operating systems may suffer most from com-
mon vulnerabilities, which would inﬂuence the architectural
decisions of how one designs a diverse system.
IV. OS DIVERSITY STUDY
This section presents the results of the study. In particular,
it presents an overall analysis of the counts of vulnerabilities
for each OS component class, and shows how many vulner-
abilities affect OS pairs. The section also provides empirical
evidence to demonstrate if there are security gains in using
diverse OSes when deploying an intrusion-tolerant system.
A. Distribution of OS Vulnerabilities
Vulnerability classiﬁcation: The descriptions of 1887
vulnerabilities were examined, and then they were assigned
to one of the OS component classes presented in the previous
section. Table II summarizes the result of this analysis.
The table shows that with the exception of Drivers, all
OS distributions have a reasonable number of vulnerabil-
ities in each class. In the BSD and Solaris OS families,
vulnerabilities appear in higher numbers in the Kernel part,
while in the Linux and Windows families, the Applications
vulnerabilities are more prevalent. This can be explained
by noticing that Windows and Linux distributions usually
OS
OpenBSD
NetBSD
FreeBSD
OpenSolaris
Solaris
Debian
Ubuntu
RedHat
Windows 2000
Windows 2003
Windows 2008
% Total
Driver
Kernel
Sys. Soft.
2
9
4
0
2
1
2
5
3
1
0
75
59
147
15
156
24
22
89
143
95
42
33
32
54
9
114
34
8
93
132
71
14
App.
32
26
53
7
128
142
55
182
203
176
62
Total
142
126
258
31
400
201
87
369
481
343
118
1.4%
35.5%
23.2%
39.9%
VULNERABILITIES PER OS COMPONENT CLASS.
Table II
contain a larger set of pre-installed applications, when com-
pared to more stripped down products like BSD family OSes.
Therefore, there is a tendency to include more applications in
platforms based on these OSes, causing more vulnerabilities
of this type to appear in the statistics.
The last row of the table presents the percentage of
each class on the total data set. One can observe that
most vulnerabilities occur in the Application and Kernel
components, which is then followed by the System Software
group of utility programs. It is interesting to notice that
Drivers account for a very small percentage of the published
OS vulnerabilities. This observation seems to contradict pre-
vious studies showing that drivers are the main contributor of
crashes [37], and it is somewhat surprising given that drivers
usually account for a large percentage of the OS code [21].
One, however, should keep in mind that crash-inducing bugs
do not necessarily translate into vulnerabilities, since they
might not be exploitable by an adversary (e.g., because the
conditions to activate the fault might be extremely hard to
force). On the other hand, large and complex codes are a
typical breeding ground for programming ﬂaws, and we may
experience a rise in driver vulnerabilities in the future.
Temporal distribution of the vulnerabilities: Figure 2
presents the number of vulnerabilities announced per OS
for each year, while organizing in separate graphs the OS
families. The ﬁgure also includes the dates of some of the
major releases of the OSes. Certain OSes like Windows
2008 and Ubuntu have several years with zero vulnerabilities
because their ﬁrst distribution is relatively recent.
The graphs lead to some interesting observations. First, it
is possible to notice a strong correlation among the peaks
and valleys of both the Windows and Linux families, and
somewhat to a lesser extent in the BSD family. This could
mean that some vulnerabilities might be shared across the
family members (see next section for a better discussion).
Second, some OS families have less vulnerabilities being
reported in the recent past (last 5 years) when compared
with the more distant past. This is true both for the BSD
and Linux families, which could indicate that the systems
are becoming more stable, but also that
the employed
development process imposes stronger requirements on the
quality of the software.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
387(a) Solaris family.
(b) BSD family.
(c) Windows server family.
(d) Linux family.
Figure 2. Temporal distribution of vulnerability publication data for four operating system families
Finally, it is also important to compare the vulnerability
dates and the year of the ﬁrst OS release. NVD classiﬁes
vulnerabilities when they are ﬁrst discovered, and then lists
the OSes that might be compromised by their exploitation.
Therefore, it was possible to ﬁnd Windows 2000 in seven en-
tries earlier than 1999, sharing vulnerabilities with Windows
NT. This conﬁrms that Windows 2000 was built with some
of the code of Windows NT, but apparently it seems that this
code was not ﬁxed from all already known vulnerabilities4.
B. Common Vulnerabilities
Table III shows the common vulnerabilities that were
found in every combination of OS pair over the period of
1994 to (Sept) 2010. The columns with v(A) and v(B) show
the total number of vulnerabilities collected for OS A and
B respectively, whereas v(AB) is the count of vulnerabilities
that affect both the A and B systems. Three ﬁlters were
applied to the data set: All corresponds to all vulnerabilities,
representing the raw data; No Applications removes from
the data set the vulnerabilities classiﬁed as Applications
(see Section III-B); No Applications and No Local: same as
the previous ﬁlter but only considers remotely exploitable
vulnerabilities (vulnerabilities with “Network” or “Adjacent
Network” values in their CVSS_ACCESS_VECTOR ﬁeld).
The aim of the ﬁrst ﬁlter is to characterize a platform with
a reasonable number of installed applications (called a Fat
Server). The second ﬁlter captures only the fundamental
OS vulnerabilities, and it basically corresponds to a server
platform that, to decrease security risks, is stripped of all
applications with the exception of the offered single service
(called a Thin Server). The third ﬁlter represents a similar
conﬁguration, but where the machine is physically protected
4We found three cases in other OS versions where a vulnerability was
reported much earlier than the corresponding release. After examining the
NVD entry, we were able to exclude them as errors in the database, and
therefore, they are not shown in the graphs.
from illegal access and therefore it can only be remotely
attacked (called an Isolated Thin Server).
it
The number of shared vulnerabilities between two OSes
is substantially reduced when compared to the overall set
of vulnerabilities. Even considering a Fat Server conﬁg-
uration,
is possible to ﬁnd out OS pairs that do not
have common ﬂaws (e.g., NetBSD-Ubuntu). As expected,
OSes from the same family are affected by more common
vulnerabilities due to the software components and applica-
tions that are reused (e.g., Debian-RedHat or Windows2000-
Windows2003). The use of an Isolated Thin Server, when
compared with a Fat Server, has a strong impact on the
security of the platform because it decreases the number of
common vulnerabilities by 56% on average. This means that
a signiﬁcant portion of common vulnerabilities are local (i.e.,
cannot be exploited remotely) or come from applications that
are available on both operating systems.
Table IV shows which part of the OS is affected by com-
mon vulnerabilities in an Isolated Thin Server conﬁguration,
considering only the OS pairs with non-zero common vul-
nerabilities. The fact that there are many common Kernel and
System Software vulnerabilities between Windows 2000 and
2003 indicates that the latter inherits considerable parts of
the OS from its predecessor. This same trend is also observed
between Windows 2008 and Windows 2003/Windows 2000,
although to a less extent. Interestingly, no single vulnerable
driver is present in all products, which can be explained by
the very few faulty drivers that are reported.
The second family of OS with more common vulnerabil-
ities is BSD, which also re-utilizes several components of
the operating system. A somewhat surprising result is the
fact that most Linux distributions have much less common
vulnerabilities than we anticipated. We inspected manually
the vulnerabilities in order to ﬁnd an explanation, and we
discovered that Linux distributions customize both their
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:50 UTC from IEEE Xplore.  Restrictions apply. 
 0 20 40 60199319941995199619971998199920002001200220032004200520062007200820092010SolarisOpenSolaris# of vulnerabilitiesOpenSolaris2008.05Solaris      2.17810 0 20 40 60199619971998199920002001200220032004200520062007200820092010FreeBSDNetBSDOpenBSD# of vulnerabilitiesOpenBSD      1.23.13.5NetBSD3.0.1FreeBSD3.04.05.06.07.08.0 0 20 40 6019971998199920002001200220032004200520062007200820092010Win2008Win2003Win2000# of vulnerabilitiesWin20002000Win20032003SP1Win20082008SP1 0 20 40 60199619971998199920002001200220032004200520062007200820092010DebianUbuntuRedhat# of vulnerabilitiesRedhat6.07   34   5.4 Debian    1.1  2.12.2    3.1  5.0 Ubuntu        4.105.09.04388Operating Systems
Pairs (A-B)
OpenBSD-NetBSD
OpenBSD-FreeBSD
OpenBSD-OpenSolaris
OpenBSD-Solaris
OpenBSD-Debian
OpenBSD-Ubuntu
OpenBSD-RedHat
OpenBSD-Windows2000
OpenBSD-Windows2003
OpenBSD-Windows2008
NetBSD-FreeBSD
NetBSD-OpenSolaris
NetBSD-Solaris
Netbsd-Debian
NetBSD-Ubuntu
NetBSD-RedHat
NetBSD-Windows2000
NetBSD-Windows2003
NetBSD-Windows2008
FreeBSD-OpenSolaris
FreeBSD-Solaris
FreeBSD-Debian
FreeBSD-Ubuntu
FreeBSD-RedHat
FreeBSD-Windows2000
FreeBSD-Windows2003
FreeBSD-Windows2008
OpenSolaris-Solaris
OpenSolaris-Debian
OpenSolaris-Ubuntu
OpenSolaris-RedHat
OpenSolaris-Windows2000
OpenSolaris-Windows2003
OpenSolaris-Windows2008
Solaris-Debian
Solaris-Ubuntu
Solaris-RedHat
Solaris-Windows2000
Solaris-Windows2003
Solaris-Windows2008
Debian-Ubuntu
Debian-RedHat
Debian-Windows2000
Debian-Windows2003
Debian-Windows2008
Ubuntu-RedHat
Ubuntu-Windows2000
Ubuntu-Windows2003
Ubuntu-Windows2008
RedHat-Windows2000
RedHat-Windows2003
RedHat-Windows2008
Windows2000-Windows2003
Windows2000-Windows2008
Windows2003-Windows2008
All
v(B)
126
258
31
400
201
87
369
481
343
118
258
31
400
201
87
369
481
343
118
31
400
201
87
369
481
343
118
400
201
87
369
481
343
118
201
87
369
481
343
118
87
369
481
343
118
369
481
343
118
481
343
118
343
118
118
v(AB)
40
53
1
12
2
3
10
3
2
1
49
0
15
3
0
7
3
1
1
0
21
7
3
20
4
2
1
27
1
1
1
0
0
0
4
2
13
9
7
0
12
61
1
0
0
25
1
0
0
2
1
0
253
70
95
v(A)
142
126
258
31
400
201
87
369
481
343
v(A)
110
100
205
24
272
59
32
187
278
167
v(B)
100
205
24
272
59
32
187
278
167
56
205
24
272
59
32
187
278
167
56
24
272
59
32
187
278
167
56
272
59
32
187
278
167
56
59
32
187
278
167
56
32
187
278
167
56
187
278
167
56
278
167
56
167
56
56
32
48
1
10
2
1