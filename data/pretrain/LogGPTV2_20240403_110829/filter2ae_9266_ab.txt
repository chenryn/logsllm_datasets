                            k_align_dst += creq->vbuf.dst[dst_i].len +
                                                    byteoffset;
                            creq->data_len -= creq->vbuf.dst[dst_i].len;
                            dst_i++;
                    } else {
                                    if (err == 0 && __copy_to_user(
                                    (void __user *)creq->vbuf.dst[dst_i].vaddr,
                                    (k_align_dst + byteoffset),
                                    creq->data_len))
                                            return -EFAULT;
                            k_align_dst += creq->data_len;
                            creq->vbuf.dst[dst_i].len -= creq->data_len;
                            creq->vbuf.dst[dst_i].vaddr += creq->data_len;
                            creq->data_len = 0;
                    }
            }
            *di = dst_i;
            return err;
    };
在函数 `qcedev_vbuf_ablk_cipher_max_xfer` 里，我们发现它没有再用到变量 `creq->in_place_op`，
也没有对地址 `creq->vbuf.dst[i].vaddr` 做校验，我们还可以看到该函数最后是使用 `__copy_to_user` 而不是
`copy_to_user` 从变量 `k_align_dst` 拷贝数据到地址 `creq->vbuf.dst[i].vaddr`
由于 `__copy_to_user` 本质上只是 memcpy, 且 `__copy_to_user` 的目标地址是
`creq->vbuf.dst[dst_i].vaddr`, 这个地址可以被用户态控制， 这样漏洞就坐实了，我们得到了一个内核任意地址写漏洞。
接下去我们看一下能写什么值
    file: drivers/crypto/msm/qcedev.c
    while (creq->data_len > 0) {
                    if (creq->vbuf.dst[dst_i].len data_len) {
                            if (err == 0 && __copy_to_user(
                                    (void __user *)creq->vbuf.dst[dst_i].vaddr,
                                            (k_align_dst + byteoffset),
                                            creq->vbuf.dst[dst_i].len))
                                            return -EFAULT;
                            k_align_dst += creq->vbuf.dst[dst_i].len +
                                                    byteoffset;
                            creq->data_len -= creq->vbuf.dst[dst_i].len;
                            dst_i++;
                    } else {
再看一下漏洞触发的地方，源地址是 `k_align_dst` ，这是一个局部变量，下面看这个地址的内容能否控制。
     static int qcedev_vbuf_ablk_cipher_max_xfer(struct qcedev_async_req *areq,
                                     int *di, struct qcedev_handle *handle,
                                     uint8_t *k_align_src)
     {
             int err = 0;
             int i = 0;
             int dst_i = *di;
             struct scatterlist sg_src;
             uint32_t byteoffset = 0;
             uint8_t *user_src = NULL;
             uint8_t *k_align_dst = k_align_src;
             struct  qcedev_cipher_op_req *creq = &areq->cipher_op_req;
             if (areq->cipher_op_req.mode == QCEDEV_AES_MODE_CTR)
                     byteoffset = areq->cipher_op_req.byteoffset;
             user_src = (void __user *)areq->cipher_op_req.vbuf.src[0].vaddr;
             if (user_src && __copy_from_user((k_align_src + byteoffset), // line 1160
                                     (void __user *)user_src,
                                     areq->cipher_op_req.vbuf.src[0].len))
                     return -EFAULT;
             k_align_src += byteoffset + areq->cipher_op_req.vbuf.src[0].len;
在函数 `qcedev_vbuf_ablk_cipher_max_xfer` 的行 1160 可以看到，变量 `k_align_dst`
的值是从用户态地址拷贝过来的，可以被控制，但是，还没完
    1178         /* restore src beginning */
    1179         k_align_src = k_align_dst;
    1180         areq->cipher_op_req.data_len += byteoffset;
    1181 
    1182         areq->cipher_req.creq.src = (struct scatterlist *) &sg_src;
    1183         areq->cipher_req.creq.dst = (struct scatterlist *) &sg_src;
    1184 
    1185         /* In place encryption/decryption */
    1186         sg_set_buf(areq->cipher_req.creq.src,
    1187                                         k_align_dst,
    1188                                         areq->cipher_op_req.data_len);
    1189         sg_mark_end(areq->cipher_req.creq.src);
    1190 
    1191         areq->cipher_req.creq.nbytes = areq->cipher_op_req.data_len;
    1192         areq->cipher_req.creq.info = areq->cipher_op_req.iv;
    1193         areq->cipher_op_req.entries = 1;
    1194 
    1195         err = submit_req(areq, handle);
    1196 
    1197         /* copy data to destination buffer*/
    1198         creq->data_len -= byteoffset;
行1195调用函数 `submit_req` ，这个函数的作用是提交一个 buffer 给高通加解密引擎进行加解密，buffer 的设置由函数
`sg_set_buf` 完成，通过行 1186 可以看到，变量 `k_align_dst` 就是被传进去的 buffer , 经过这个操作后， 变量
`k_align_dst` 的值会被改变, 即我们通过`__copy_to_user` 传递给 `creq->vbuf.dst[dst_i].vaddr`
的值是被加密或者解密过一次的值。
那么我们怎么控制最终写到任意地址的那个值呢？
思路很直接，我们将要写的值先用一个秘钥和算法加密一次，然后再用解密的模式触发漏洞，在漏洞触发过程中，会自动解密，如下：
1) 假设我们最终要写的数据是A, 我们先选一个加密算法和key进行加密
    buf = A
    op = QCEDEV_OPER_ENC  // operation 为加密
    alg = QCEDEV_ALG_DES // 算法
    mode = QCEDEV_DES_MODE_ECB
    key = xxx  // 秘钥
    =>  B
2) 然后将B作为参数传入 `qcedev_vbuf_ablk_cipher_max_xfer`
函数触发漏洞，同时参数设置为解密操作，并且传入同样的解密算法和key
    buf = B
    op = QCEDEV_OPER_DEC //// operation 为解密
    alg = QCEDEV_ALG_DES // 一样的算法
    mode = QCEDEV_DES_MODE_ECB
    key = xxx // 一样的秘钥
    => A
这样的话，经过 `submit_req` 操作后， line 1204 得到的 `k_align_dst` 就是我们需要的数据。
至此，我们得到了一个任意地址写任意值的漏洞。
##### CVE-2016-6738 漏洞补丁
这个
[漏洞的修复](https://source.codeaurora.org/quic/la//kernel/msm-3.18/commit/?id=0a2528569b035a2ca8ebe9a4612dbbaaaffa5b2e)
很直观，将 `in_place_op` 的判断去掉了，对 `creq->vbuf.src` 和 `creq->vbuf.dst` 两个数组里的地址挨个进行
access_ok 校验
下面看第二个漏洞
##### CVE-2016-3935 漏洞成因
    long qcedev_ioctl(struct file *file, unsigned cmd, unsigned long arg)
    {
    ...
            switch (cmd) {
    ...
            case QCEDEV_IOCTL_SHA_INIT_REQ:
                    {
                    struct scatterlist sg_src;
                    if (!access_ok(VERIFY_WRITE, (void __user *)arg,
                                    sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    if (__copy_from_user(&qcedev_areq.sha_op_req,
                                            (void __user *)arg,
                                            sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    if (qcedev_check_sha_params(&qcedev_areq.sha_op_req, podev))
                            return -EINVAL;
    ...
                    break;
    ...
            case QCEDEV_IOCTL_SHA_UPDATE_REQ:
                    {
                    struct scatterlist sg_src;
                    if (!access_ok(VERIFY_WRITE, (void __user *)arg,
                                    sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    if (__copy_from_user(&qcedev_areq.sha_op_req,
                                            (void __user *)arg,
                                            sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    if (qcedev_check_sha_params(&qcedev_areq.sha_op_req, podev))
                            return -EINVAL;
    ...
                    break;
    ...
            default:
                    return -ENOTTY;
            }
            return err;
    }
在 command 为下面几个case 里都会调用 `qcedev_check_sha_params` 函数对用户态传入的数据进行合法性校验
  * QCEDEV_IOCTL_SHA_INIT_REQ
  * QCEDEV_IOCTL_SHA_UPDATE_REQ
  * QCEDEV_IOCTL_SHA_FINAL_REQ
  * QCEDEV_IOCTL_GET_SHA_REQ
    static int qcedev_check_sha_params(struct qcedev_sha_op_req *req,
                                                    struct qcedev_control *podev)
    {
            uint32_t total = 0;
            uint32_t i;
    ...
            /* Check for sum of all src length is equal to data_len  */
            for (i = 0, total = 0; i entries; i++) {
                    if (req->data[i].len > ULONG_MAX - total) {
                            pr_err("%s: Integer overflow on total req buf length\n",
                                    __func__);
                            goto sha_error;
                    }
                    total += req->data[i].len;
            }
            if (total != req->data_len) {
                    pr_err("%s: Total src(%d) buf size != data_len (%d)\n",
                            __func__, total, req->data_len);
                    goto sha_error;
            }
            return 0;
    sha_error:
            return -EINVAL;
    }
`qcedev_check_sha_params` 对用户态传入的数据做多种校验，其中一项是对传入的数据数组挨个累加长度，并对总长度做整数溢出校验
问题在于， `req->data[i].len` 是 uint32_t 类型， 总长度 total 也是 uint32_t 类型，uint32_t 的上限是
UINT_MAX, 而这里使用了 ULONG_MAX 来做校验
    usr/include/limits.h
    /* Maximum value an `unsigned long int' can hold.  (Minimum is 0.)  */
    #  if __WORDSIZE == 64
    #   define ULONG_MAX    18446744073709551615UL
    #  else
    #   define ULONG_MAX    4294967295UL
    #  endif
注意到：
  * 32 bit 系统， **UINT_MAX = ULONG_MAX**
  * 64 bit 系统， **UINT_MAX ！= ULONG_MAX**
所以这里的整数溢出校验 在64bit系统是无效的，即在 64bit 系统，req->data
数组项的总长度可以整数溢出，这里还无法确定这个整数溢出能造成什么后果。
下面看看有何影响，我们选取 `case QCEDEV_IOCTL_SHA_UPDATE_REQ`
    long qcedev_ioctl(struct file *file, unsigned cmd, unsigned long arg)
    {
    ...     
            case QCEDEV_IOCTL_SHA_UPDATE_REQ:
                    {
                    struct scatterlist sg_src;
                    if (!access_ok(VERIFY_WRITE, (void __user *)arg,
                                    sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    if (__copy_from_user(&qcedev_areq.sha_op_req,
                                            (void __user *)arg,
                                            sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    if (qcedev_check_sha_params(&qcedev_areq.sha_op_req, podev))
                            return -EINVAL;
                    qcedev_areq.op_type = QCEDEV_CRYPTO_OPER_SHA;
                    if (qcedev_areq.sha_op_req.alg == QCEDEV_ALG_AES_CMAC) {
                            err = qcedev_hash_cmac(&qcedev_areq, handle, &sg_src);
                            if (err)
                                    return err;
                    } else {
                            if (handle->sha_ctxt.init_done == false) { 
                                    pr_err("%s Init was not called\n", __func__);
                                    return -EINVAL;
                            }
                            err = qcedev_hash_update(&qcedev_areq, handle, &sg_src);
                            if (err)
                                    return err;
                    }
                    memcpy(&qcedev_areq.sha_op_req.digest[0],
                                    &handle->sha_ctxt.digest[0],
                                    handle->sha_ctxt.diglen);
                    if (__copy_to_user((void __user *)arg, &qcedev_areq.sha_op_req,
                                            sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    }