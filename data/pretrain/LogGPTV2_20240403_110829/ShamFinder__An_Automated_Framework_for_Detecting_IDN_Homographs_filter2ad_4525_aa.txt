title:ShamFinder: An Automated Framework for Detecting IDN Homographs
author:Hiroaki Suzuki and
Daiki Chiba and
Yoshiro Yoneya and
Tatsuya Mori and
Shigeki Goto
ShamFinder: An Automated Framework
for Detecting IDN Homographs
Hiroaki Suzuki
Waseda University
Tokyo, Japan
PI:EMAIL
Daiki Chiba
NTT Secure Platform Laboratories
Tokyo, Japan
PI:EMAIL
Yoshiro Yoneya
Japan Registry Services
Tokyo, Japan
PI:EMAIL
Tatsuya Mori
Waseda University/NICT/RIKEN AIP
Tokyo, Japan
PI:EMAIL
Shigeki Goto
Waseda University
Tokyo, Japan
PI:EMAIL
ABSTRACT
The internationalized domain name (IDN) is a mechanism that
enables us to use Unicode characters in domain names. The set
of Unicode characters contains several pairs of characters that
are visually identical with each other; e.g., the Latin character ‘a’
(U+0061) and Cyrillic character ‘а’ (U+0430). Visually identical
characters such as these are generally known as homoglyphs. IDN
homograph attacks, which are widely known, abuse Unicode homo-
glyphs to create lookalike URLs. Although the threat posed by IDN
homograph attacks is not new, the recent rise of IDN adoption in
both domain name registries and web browsers has resulted in the
threat of these attacks becoming increasingly widespread, leading
to large-scale phishing attacks such as those targeting cryptocur-
rency exchange companies. In this work, we developed a framework
named “ShamFinder,” which is an automated scheme to detect IDN
homographs. Our key contribution is the automatic construction
of a homoglyph database, which can be used for direct countermea-
sures against the attack and to inform users about the context of
an IDN homograph. Using the ShamFinder framework, we perform
a large-scale measurement study that aims to understand the IDN
homographs that exist in the wild. On the basis of our approach,
we provide insights into an effective countermeasure against the
threats caused by the IDN homograph attack.
CCS CONCEPTS
• Security and privacy → Network security.
KEYWORDS
DNS, IDN homograph, Unicode, Homoglyph
ACM Reference Format:
Hiroaki Suzuki, Daiki Chiba, Yoshiro Yoneya, Tatsuya Mori, and Shigeki
Goto. 2019. ShamFinder: An Automated Framework for Detecting IDN
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6948-0/19/10...$15.00
https://doi.org/10.1145/3355369.3355587
449
Homographs. In Internet Measurement Conference (IMC ’19), October 21–
23, 2019, Amsterdam, Netherlands. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3355369.3355587
1 INTRODUCTION
Internationalized domain name (IDN) is a mechanism that allows
us to use various non-English characters such as Arabic, Chinese,
Cyrillic, Hangul, Hebrew, Hiragana, or Tamil. IDN was first pro-
posed by Dürst in 1996 as an Internet Draft (I-D) [19]. Subsequently,
a system known as Internationalizing Domain Names in Applica-
tions (IDNA) was adopted as an Internet standard [11]. Currently,
the IDNA system is widely deployed in various domains including
hundreds of top-level domains (TLDs). In addition, the majority of
modern web browsers are capable of accommodating IDNs.
Character sets permitted to be used as IDNs contain several
pairs of characters that are visually similar with each other. These
characters are known as homoglyphs. The existence of homoglyphs
enables an attacker to create a spoofing domain name. For instance,
by using a Unicode character ‘é’, which is a Latin lowercase letter e
with an acute accent (U+00E9), an attacker can create a spoofing do-
main name, “facébook.com,” which is visually similar to the original
domain name “facebook.com.” The domain spoofing attack exploit-
ing Unicode homoglyphs is known as “IDN homograph attack” and
has been used for malicious purposes such as phishing attacks. IDN
homograph attacks are not a new problem. In 2002, Gabrilovich and
Gontmakher [12] demonstrated that they successfully registered
an IDN homograph using the two Russian letters ‘с’ and ‘о’.
As the adoption rate of IDN was not high in the past, an IDN
homograph has been recognized as a proof-of-concept attack. How-
ever, the recent rise in the number of IDN registrations and the
adoption of an IDN in many TLDs together with the adoption of
IDNs in modern browsers have resulted in the threat of IDN be-
coming realistic and has attracted interest from researchers [21, 46]
as well as from attackers. In May 2018, Binance, which is a cryp-
tocurrency exchange company, reported that their primary domain
name binance.com was the victim of an IDN homograph attack [3].
We note that as this incident implied, the targets of IDN homograph
attacks are not only browsers, but also email clients, where a victim
could click a malicious URL composed of an IDN homograph.
A straightforward and effective countermeasure against the
threat of an IDN homograph attack is to identify possible IDN
homographs. The key technical challenge here is to automate the
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Hiroaki Suzuki, Daiki Chiba, Yoshiro Yoneya, Tatsuya Mori, and Shigeki Goto
process of detecting homoglyphs that could be abused for creating
an IDN homograph. As of May 2019, of the 137,928 characters in-
cluded in Unicode 12.0.0 [39], 123,006 characters can be used for
IDN, following the specification of IDNA2008 [8]. Furthermore, the
number of IDNs registered has continued to increase. According
to the IDN World Report [18], the estimated number of IDNs reg-
istered was 2.0 million in 2009 and this number increased to 7.5
million IDNs in December 2017.
In this work, we developed a generic framework named “ShamFinder,”
which aims to identify IDN homographs in a scalable manner.
The key technical contribution of ShamFinder is to build a new
homoglyph database named SimChar, which can be maintained
without requiring time-consuming manual effort. Unlike previous
approaches for detecting IDN homographs [21, 30], the notable
advantage of ShamFinder is that it can pinpoint the differential
characters; thus, it can be used for direct countermeasures such as
building a blacklist of the confusable characters or highlighting the
anomalous characters to inform the user of the potential risk of
an IDN homograph attack. We note that our homoglyph database
covers a wide range of homoglyphs that have not been listed in the
existing database maintained by the Unicode consortium [36].
Using the ShamFinder framework, we attempt to understand the
IDN homographs registered in the wild. In our study, we investi-
gated the way in which the registered IDN homographs are abused
by collecting IDNs from the world’s most popular TLD, .com. In
addition, using ShamFinder as a building block, we discuss a proof-
of-concept system that aims to mitigate the threats posed by an
IDN homograph attack.
The main contributions of this work are summarized as follows:
to identify IDN homographs in an automated manner.
• We developed a framework named ShamFinder, which aims
• We built a new homoglyph database named SimChar, which
can be automatically updated and can be used for other se-
curity applications such as detecting plagiarism that exploits
homoglyphs.
• Using the ShamFinder framework, we performed a large-
scale measurement study on how IDNs are used or abused
in the wild. The measurement study demonstrated that our
framework efficiently extracted IDN homographs, which
contained malicious ones.
• Based on the ShamFinder framework, we propose a practical
countermeasure against the generic threat of IDN homo-
graph attacks.
The remainder of the paper is organized as follows: Section 2
presents an overview of IDN and IDN homograph attacks. In Sec-
tion 3, we introduce the ShamFinder framework. Section 4 contains
an evaluation of the performance of the ShamFinder framework
from the viewpoints of human perception and computational costs.
In Sections 5 and 6, we present our data sources and findings de-
rived from the large-scale measurement of IDN in the wild, using
the ShamFinder framework. Section 7 discusses the limitations of
our work and effective countermeasures against the threats posed
by IDN homograph attacks. In Section 8, we review related work
in comparison with ours. We conclude our work in Section 9.
450
2 BACKGROUND
This section first presents an overview of IDNs. We then provide
an overview of IDN homograph attacks and recent studies on the
threats posed by these attacks.
2.1 IDN and Permitted Unicode Characters
Since the initial proposal of IDN in 1996, its protocol specification
has been standardized. In 2003, the Internet Corporation for As-
signed Names and Numbers (ICANN) and top IDN registries such
as .cn, .info, .jp, .org, and .tw have published a guideline for
the implementation/operation of IDN [27]． The guideline requires
TLD registries to employ an “inclusion-based” approach, i.e., in each
TLD, only code points that are permitted by the TLD can be used for
IDN. Each TLD employs language-specific registration and admin-
istration rules, which are publicly available as IDN tables [28]. The
tables are maintained by the Internet Assigned Number Authority
(IANA).
This restriction introduced by the inclusion-based approach is
expected to thwart the threats of IDN homograph attacks because
the set of characters that can be used for IDN are limited with the
tables. For instance, the JP domain, which is the country code top-
level domain (ccTLD) for Japan, limits the permitted character sets
for IDN to LDH, which consists of case-insensitive English letters,
digits, and hyphens (Letter-Digit-Hypen), Hiragana, Katakana, and
a subset of CJK unified ideographs (character set used in Chinese,
Japanese, and Korean). Therefore, it is not possible to register Latin-
based IDN homographs with names such as “ácm.jp” because the
permitted characters for IDN of the JP domain do not contain a
homoglyph of LDH.
However, as we shall present later, among the characters per-
mitted for each TLD such as .com, there are many homoglyphs,
indicating that an attacker can leverage such homoglyphs to exe-
cute an IDN homograph attack. We note that an attacker can create
an IDN homograph of a non-Latin IDN homograph. One of the key
contributions of our work is to automatically build a comprehen-
sive list of homoglyphs, which could be potentially abused for IDN
homograph attack.
Although the IDN extension allows us to use non-Latin char-
acters for domain names, we need to use LDH at the protocol
level for backward compatibility reasons. Therefore, we need a
mechanism that transcodes a domain name consisting of Unicode
characters into one with LDH characters. In this regard, Puny-
code is a character encoding scheme for transcoding a Unicode
string to a string with LDH. The specification of Punycode is de-
fined in RFC 3492 [6]. When using a string transcoded by Puny-
code for IDN, we add the prefix “xn--” to the beginning of the
transcoded string. For instance, the string “阿里巴巴” is repre-
sented as “tsta8290bfzd” by the Punycode transcoding, and the
corresponding IDN is “xn--tsta8290bfzd.com”.
Finally, we note that each web browser implements the process-
ing of IDN in a different way [23, 35]. As we explain below, the
way IDN is displayed in the address bar could increase or decrease
the threat of an IDN homograph attack. Thus, the implementation
largely affects the way users react to the IDN homograph presented
in a browser. In Section 7, we discuss a proof-of-concept implemen-
tation of IDN processing on a browser to enable users to become
ShamFinder
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
knowledgeable of the existence of a possible IDN homograph attack
without sacrificing the usability of IDN for them.
2.2 IDN Homograph Attack
As mentioned in the previous section, the history of IDN homo-
graph attacks can be traced back to the early 2000s. As Gabrilovich
and Gontmakher [12] reported in 2002, numerous English domain
names can be homographed by leveraging non-Latin letters.
Despite the fact that threats of IDN homograph attacks were
pointed out earlier, effective and usable countermeasures against
these threats have not been developed. We conjecture that the
reason behind abandoning the threats is that IDN has not been
widely deployed in the world and there have been few web clients
that can correctly process IDN. However, the situation has changed
because popular web browsers today have developed the ability to
handle IDNs. In addition, according to the IDN World Report [18],
7.5 million of IDNs have been registered by December 2017. These
observations imply that the threat of IDN homograph attacks have
become real. In fact, as mentioned in Section 1, the cryptocurrency
exchange company Binance was the victim of an IDN homograph
attack.
As countermeasures against IDN homograph attacks, many browser
vendors have updated the implementation of displaying IDN in the
address bar after the threat of an IDN homolog attack was widely
publicized by a blog post on the web [46] in April 2017. Specifically,
Firefox and Chrome have changed their implementations as fol-
lows: when characters originating from multiple scripts (character
sets) are mixed in a character string constituting an IDN, the IDN
is displayed in the form of Punycode instead of Unicode [23, 35].
For instance, if a Latin-script-based domain name comprises non-
English scripts such as Latin scripts, Cyrillic scripts, or Greek scripts,
the domain name is displayed in the form of Punycode; i.e., for “facé-
book”, its Punycode, xn--facbook-dya is displayed in the address
bar.
Although this update can be expected to mitigate the threats of
IDN homographs to some extent, it is likely to impair the usability
because Punycode is not a human-friendly representation. As the
human-readable domain name provides hints as to the authenticity
of the website, masking the original domain name may leave users
less knowledgeable. Although the aforementioned countermeasure
by the browsers becomes a temporary countermeasure against IDN
homograph attacks, if it is compulsorily displayed in Punycode, it is
problematic in that it becomes difficult to understand the cause of
the threat. That is, because the user does not notice that the domain
name entered in the browser is a homograph attack, the user risks
visiting the site with the same domain name again.
We also note that, in the above implementations, even in the
case of an IDN composed of multiple scripts, if the domain name
comprises both Latin script and a CJK ideograph, it will be displayed
with Unicode. Furthermore, an attacker can create an IDN by not
only combining Latin script, Cyrillic script, or Greek script but also
by combining characters belonging to the set of CJK ideographs.
We refer to such a homograph as a non-Latin homograph. For
instance, the string “工业大学” (meaning an institute of technology
in English) has the homograph, “エ业大学”, where ‘工’ is a CJK
Unified Ideograph (U+5DE5) and ‘エ’ is a Katakana Letter (U+30A8).
451
Figure 1: Overview of the ShamFinder Framework.
Current web browsers do not have a way to identify non-Latin IDN
homographs such as this.
3 SHAMFINDER FRAMEWORK
In this section, we first provide a high-level overview of the ShamFinder
framework. Next, we present several Unicode character sets and
those used for IDN. We note that precise understanding of these
character sets is essential in extracting Unicode homoglyphs that
could be abused for an IDN homograph attack. We then describe
the approach we followed to build the homoglyph database, which
plays a key role in the ShamFinder framework. Finally, we describe
the characteristics of the homoglyph database.
3.1 High-level Overview
Figure 1 presents a high-level overview of the ShamFinder frame-
work.
Step 1: First, we collect registered/active domain names for each
TLD. To this end, we can either make use of the DNS zone file
for each TLD or publicly available/commercial domain name lists
such as [7]. We introduce the datasets we used for our analysis in
Section 5.
Step 2: Next, we extract IDNs from the collected domain names by
searching for those starting with the prefix “xn--.”
Step 3: To find IDN homographs, we leverage a list of popular
domain names as reference. As representative reference we can
leverage a website ranking lists [29, 31] such as Alexa Top Sites [2]
or Majestic Million [22]. Next, we leverage the database of homo-
glyphs to identify potential IDN homographs; as we show in the
next subsection, our contribution is to present a way of automati-
cally building such a database.
Figure 2 and Algorithm 1 show the IDN detection scheme. We
check the length (number of characters) of each domain name listed
in the reference domain names list and extract the IDNs with the
same number of characters. For each pair consisting of a reference
domain name and sampled IDN, we check their letters one by one
to determine whether they correspond. If two corresponding letters
match each other, we proceed to the next pair of letters. If the letters
do not match, we check whether the pair is listed in the homoglyph
database, which we present in the next subsection. If they are listed,
we proceed to the next pair of letters and repeat the same process. If
we find letters that do not match, we conclude that the IDN is not an
IDN homograph of the reference domain name. The computational
complexity of the algorithm is |N ||M||L| where |N |, |M|, and L are
Reference domain namesAll domain namesExtractedIDNsHomoglyph DBIDN homographsStep 1Step 2Step 3IMC ’19, October 21–23, 2019, Amsterdam, Netherlands