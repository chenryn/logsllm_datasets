任何的字符字符串。
[set]
任何在ser里的字符，
[261]
任何不在ser里的字符。
?通配符匹配于任何的单一字符，所以如果你的目录里含有whizprog.c、whizprog
1og与whizprog.o这三个文件，与表达式whi=prog.?匹配的为whizprog.c与
whizprog.o，但whizprog.log期不匹配。
星号（·）是一个功能强大而且广为使用的通配符：它匹配于任何字符组成的字符串。表
达式whizprog.*符合前面列出的所有三个文件，网页设计人员也可以使用*.html表
达式匹配他们的输人文件。
注意：MS-DOS、MS-Windows与OpenVMS用户要注意的是：UNIX文件名中的点号（.）并设
有任何特殊之处（除了文件名开头的点号表示隐藏文件外）：点号只是一个字符而已。例
如：13·会列出在当能目录下的所有文件：你不需要像在其他系统上一样使用·.*
剩下的通配符就是ser结构了。set是一组字符列表（例如abc）、一段内含的范围（例
如a-z），或者是这两者的结合。如果希望破折号（dash）也是列表的一部分，只要把它
放在第一个或最后一个就可以了。表7-6（假定在ASCI环境下）有更详尽的解释。
途 3 :
由于目录里的文件未按照次序排列，国此Shell会排丹录个通配字将展开后的结果，在部
分系统上，会根据适合于系统的位置两排序，但各个机器底层的整理展序各有不网，
UNIX传统主叉者可能会用exportLC_ALL=C设置他们习惯的行为模式，这在先的
2.8节已讨论过。
www.TopSage.com
---
## Page 181
输入/输出、文件与命令执行
46968
表7-6：使用set结构的通配符
Sage.com
表达式
匹配的单一字符
[abe]
a、b或c
[.,1]
句点、逗点，或分号
[-_1
破折号或下划线
[α-c]
a、b或c
[a-z]
任何一个小写字母
[6-01]
任何一个非数字字符
[16-0]
任何一个数字或惊叹号
[a-zA-z]
任何一个小写或大写字母
[a-zA-Z0-9_-]任何一个字母、任何一个数字、下划线或破折号
在原来的通配符范例中，whizpzog.[co}与whizprog.[a-z]两者都匹配whizprog.c
与whizprog.o，但whizprog.log则不匹配。
在左方括号之后的惊叹号用来“否定”一个set。例如【!.：1符合句点与分号以外的任
何一个字符：[1a-zA-z]符合任何一个非字母的字符。
范围表示法固然方便，但你不应该对包含在范围内的字符有太多的假设。比较安全的方
式是：分别指定所有大写字母、小写字母、数字，或任意的子范围（例如[f-q]、[2-6]）。
不要想在标点符号字符上指定范围，或是在混用字每大小写上使用、像[a-z]与[A-z]
这样的用法，都不保证一定能确切地匹配出包括所有想要的字母，而没有其他不想要的
字符。更大的问题是在于：这样的范围在不同类型的计算机之间无法提供完全的可移植
性。
另一个间题是：现行系统支持各种不同的系统语言环境（locale），用来描述本地字符集
的工作方式。很多国家的默认locale字符集与纯粹ASCII的字符集是不同的，为解决这
些问题，POSIX标准提出了方括号表达式（bracketexpression），用来表示字母、数字、
标点符号及其他类型的字符，并且具有可移植性，这部分我们在3.2.1.1节里已讨论过。
在正则表达式下的方括号表达式里也出现相同的元素，它们可被用在兼容POSIX的
Shell内的Shell通配符模式中，不过你仍应避免将其应用在需可移植的Shell脚本里。
习惯上，当执行通配符展开时，UNIXShell会忽略文件名开头为一个点号的文件。像这
样的“点号文件（dotfiles）”通常用做程序配置文件或启动文件。像是Shell的SHOME/
profile、ex/vi编辑器的 sHOME/.exrc，以及bash与gdb使用的 GNUreadline
程序库的SHOME/.inputrc。
www.TopSage.com
---
## Page 182
170
第7章
要看到这类文件，需在模式前面明确地提供一个点号，例如：
echo ,*
显示隐囊文件
你可以使用-a（显示全部）选项，让1s列出隐藏文件：
tota1 4525
≤ 18 -1a
drwxr-xr-x
39 tolstoy
17 root
whee1
4096 Nov 19 14:44
drwxY-xr=X
1 tolstoy
root
1024 Aug 26 15:56
vhee1
32 Sep 9 17:14 .MCOP-random-seed
-rM-
1to1stoy
whee1
306 Nov 18 22:52 .Xauthority
--1--I-R-
1 tolstoy
vhee1
142 Sep 19 1995 .xdefaults
---IR-
1 tolstoy
1 tolstoy
wbee1
767 Nov 18 16:20 -article
----I-R-
wbee1
158 Feb 142002 .aumixrc
1 tolstoy
vhee1
注意：再强调一次，隐藏文件只是个习惯用法，在用户显面的软件上它是这样的，但核心程序
（kernel）并不认为开头带有一个点号的文件与其他文件有不同。
7.6
命令替换
命令替换（commandsubstitution）是指Shell执行命令并将命令替换部分替换为执行该
命令后的结果。这听起来有点绕舌，不过实际上相当简单。
命令替换的形式有两种，第一种是使用反引号一或称重音符号（）的方式，将要
执行的命令框起来：
for i in ^cd /old/code/dir 1 echo *,e*
产生/old/code/aix下的文件列表
do
diff -c /old/code/dir/$i $ 1 more
在分页程序下比较旧版与新板的异间
循环处理
·done
这个Shell一开始执行cd/old/code/dir；echo*.c，产生的输出结果（文件列表）
接着会成为for循环里所使用的列表。
反引号形式长久以来一直是供命令替换使用的方法，而且POSIX也支持它，因此许多已
存在的Shell脚本都使用它。不过，所有最简单的用法很快会变成复杂的，特别是内嵌
的命令替换及使用双引号时，都需要小心地转义反斜杠字符：
S echo outer.·'ecbo inner1 \'echo inner2\` innerl'outer
outer inner1 1nner2 inner1 outer
www.TopSage.com
---
## Page 183
输入/输出、文件与命令执行
ILI
这个例子举得有点牵强，不过正说明了必须使用反引号的原因。命令执行顾序如下：
1.执行echoinner2，其输出（为单词inner2）会放置到下一个要被执行的命令中。
2.
执行echo inner1 inner2innerl，其输出（单词inner1 inner2innerl）
会放置到下一个要执行的命令中。
3.最后，执行 echo outer innerl inner2 inner1 outer。
使用双引号，情况更精：
S ecbo *outer +’ecbo inner -1′ecbo \"nested quote\" here\′- inner′+ cuter”
outer +inner -nested quote here- inner+ outer
为了更清楚明白，我们使用负号括住内部的命令替换，而使用正号框住外部的命令替换。
简面言之，就是更为混乱。
由于使用嵌套的命令替换，有或没有引号，很快地就变得很难阅读，所以POSIXShell
采用Korn Shell里的一个功能。不用反引号的用法，改为将命令括在S（...）里。因为
这种架构使用不同的开始定界符与结束定界符，所以看起来容易多了，以先前的例子来
看，使用新语法重写如下：
$ echo outer $(echo Lnnerl $(echo Inner2) innerl) Quter
outer inner1 inner2 inner1 outer
S ecbo *outer +$(echo inner -$(echo *nested quote* bere)- inner)+ outer*
outer +inner -nested quote here- inner+ outer
这样是不是好看多了？不过要特别留意的是：内嵌的双引号不再需要转义。这种风格已
广泛建议用在新的开发上，本书中有许多范例也是使用这种方法。
这边要看的是先前介绍过，使用for循环比较不同的两个目录下的文件版本，以新语法
重写如下：
for i in $ (cd /old/code/dir : echo *,c)
产生/old/code/dir下的文件列表
do
diff -c /old/code/dir/$i $i
信环处理
done 1 nore
将所有结果经过分页程序
且版本与薪版本相比较
这里不同之处在于使用s（..）命令替换，以及将“整个”循环的输出，通过管道（pipe）
送到more屏幕分页程序。
7.6.1.为head命令使用sed
之前在第3章的例3-1介绍过使用sed的head命令来显示文件的前n行。真实的head
命令可加上选项，以指定要显示多少行，例如head-n10/etc/passwd,传统的POSIX
www.TopSage.com
---
## Page 184
172
常
版本之前的head可指明行数作为选项（例如head-10/etc/passwd），且许多UNIXom
的长期用户也习惯于使用此法执行head。
使用命令替换与sed，我们对Shell脚本稍作修改，使其与原始head版本的工作方式相
同。见例7-2。
例7-2：使用sed的head命令的脚本，修订版
head ---打印前n行
语法：head-N file
（.//-/，p1ts oqo）s=quno
截去前置的负号
shift
sed $(count)q *$9*
移出 $1
当我们以head-10foo.xm1调用这个脚本时，sed最终是以sed10qfoo.xml被
引用。
7.6.2：创建邮件列表
不同UNIXShell的新版本不断地出现，而且分散在各站点的用户可以从/etc/Shel1s
所列的Shell中选择自己的登录Shell。这样，如果以email通知用户有新版本的Shell更
新且已安装的功能，这对系统管理而言会是很不错的事。
为了实现这个目的，我们必须先以登录Shel来识别用户，且产生邮件列表供安装程序
用来公告新Shell版本。由于每封通知信息内容都不尽相同，我们也不是要建立一个直
接传送邮件的脚本，只是要建立一个可用来寄送邮件的地址列表。邮件列表格式会因邮
件用户端程序而有所不同，所以我们可以微一个合理的假设：最后完成的，只是一个以
逗点分隔电子邮件地址的列表，一行一个或多个地址，而最后一个地址之后是否有逗点
则不重要。
在这种情况下，较合理的方式应该是通过密码文件处理，为每个登录Shell建立一个输
出文件，文件中每一行的用户名称都以逗点结束。这里是我们曾于第5章使用过的密码
文件：
Jones:* :32713:899:Adrian W. Jones/0sD211/5550123:/home/Jones:/bin/ksh
dorothy:*:123:30:Dorothy Ga1e/krs321/555-0044:/home/dorothy:/bin/bash
toto:*:1027:18:Toto Ga1e/KNs322/555-0045:/home/toto:/bin/tcsh
ben: *:301:10:Ben Frank1in/0sD212/5550022;/home/ben:/bin/bash
jhaneoek:*:1457:57:John Hancock/SIG435/555-0099:/home/jhancock:/bin/bash
betsy:*:110:20:Betsy Ross/BMD17/555-0033:/home/bet8y:/bin/ksh
george:* : 692:42:George Washington/Bs7999/555-0001:/home/george:/bin/tcsh
www.TopSage.com
---
## Page 185
输入/输出、文件与命令执行
173
脚本本身结合了变量与命令替换、read命令及while循环，整个脚本执行的代码不到
10行1见例7-3。
例7-3：将密码文件转换为Shell邮等列表
1/bin/eh
 passwd-to-mai1ing-1ist
产生使用特定Shel1的所有用户邮寄列表
语法：
#-
passwd-to-mailing-1ist > $filel
done
每次读取密码文件的记录时，程序都会根据Shell的文件名产生文件名。sed命令会删
除前置/字符，井将后续的每个/改成连字号。这段脚本会建立/tmp/bin-bash.
mailing-list.这样形式的文件名。每个用户的名称与结尾的逗点都通过>>附加到特
定的文件中，执行这个脚本后，会得到以下结果：
dorothy.
S cat /tmp/bin-bash.nailing-ligt
ben,
jhancoek,
S cat- /tmp/bin-tcah,mai1ing-11et
tj,
toto,
S cat /tnp/bin-ksh.mailing-llet
george,
betsy.
jones,
我们可以让这个建立部件列表的程序更广地应用。例如，：如果系统的进程统计
（processaccounting）是打开的，要为系统里的每个程序做一份邮件列表就很容易了，只
要从进程统计记录中取出程序名称和执行过程序的用户姓名即可，注意，访问统计文件