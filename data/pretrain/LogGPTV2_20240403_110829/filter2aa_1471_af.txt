KVA shadowing disabled
Non-
global
Global
N / D
KVA shadowing enabled, 
PCID strategy
PCID 1, 
non-global
PCID 2, 
non-global
PCID 1, 
non-global
KVA shadowing enabled, 
global/non-global strategy
Global
Non-
global
Global
Hardware indirect branch controls (IBRS, IBPB,
STIBP, SSBD)
Processor manufacturers have designed hardware mitigations for various
side-channel attacks. Those mitigations have been designed to be used with
the software ones. The hardware mitigations for side-channel attacks are
mainly implemented in the following indirect branch controls mechanisms,
which are usually exposed through a bit in CPU model-specific registers
(MSR):
■    Indirect Branch Restricted Speculation (IBRS) completely disables
the branch predictor (and clears the branch predictor buffer) on
switches to a different security context (user vs kernel mode or VM
root vs VM non-root). If the OS sets IBRS after a transition to a more
privileged mode, predicted targets of indirect branches cannot be
controlled by software that was executed in a less privileged mode.
Additionally, when IBRS is on, the predicted targets of indirect
branches cannot be controlled by another logical processor. The OS
usually sets IBRS to 1 and keeps it on until it returns to a less
privileged security context.
The implementation of IBRS depends on the CPU manufacturer:
some CPUs completely disable branch predictors buffers when IBRS
is set to on (describing an inhibit behavior), while some others just
flush the predictor’s buffers (describing a flush behavior). In those
CPUs the IBRS mitigation control works in a very similar way to
IBPB, so usually the CPU implement only IBRS.
■    Indirect Branch Predictor Barrier (IBPB) flushes the content of the
branch predictors when it is set to 1, creating a barrier that prevents
software that executed previously from controlling the predicted
targets of indirect branches on the same logical processor.
■    Single Thread Indirect Branch Predictors (STIBP) restricts the
sharing of branch prediction between logical processors on a physical
CPU core. Setting STIBP to 1 on a logical processor prevents the
predicted targets of indirect branches on a current executing logical
processor from being controlled by software that executes (or
executed previously) on another logical processor of the same core.
■    Speculative Store Bypass Disable (SSBD) instructs the processor to
not speculatively execute loads until the addresses of all older stores
are known. This ensures that a load operation does not speculatively
consume stale data values due to bypassing an older store on the same
logical processor, thus protecting against Speculative Store Bypass
attack (described earlier in the “Other side-channel attacks” section).
The NT kernel employs a complex algorithm to determine the value of the
described indirect branch controls, which usually changes in the same
scenarios described for KVA shadowing: context switches, trap entries, and
trap exits. On compatible systems, the system runs kernel code with IBRS
always on (except when Retpoline is enabled). When no IBRS is available
(but IBPB and STIBP are supported), the kernel runs with STIBP on,
flushing the branch predictor buffers (with an IBPB) on every trap entry (in
that way the branch predictor can’t be influenced by code running in user
mode or by a sibling thread running in another security context). SSBD,
when supported by the CPU, is always enabled in kernel mode.
For performance reasons, user-mode threads are generally executed with
no hardware speculation mitigations enabled or just with STIBP on
(depending on STIBP pairing being enabled, as explained in the next
section). The protection against Speculative Store Bypass must be manually
enabled if needed through the global or per-process Speculation feature.
Indeed, all the speculation mitigations can be fine-tuned through the global
HKLM\System\CurrentControlSet\Control\Session Manager\Memory
Management\FeatureSettings registry value. The value is a 32-bit bitmask,
where each bit corresponds to an individual setting. Table 8-2 describes
individual feature settings and their meaning.
Table 8-2 Feature settings and their values
Name
V
a
l
u
e
Meaning
FEATURE_S
ETTINGS_DI
SABLE_IBRS
_EXCEPT_ 
HVROOT
0
x
1
Disable IBRS except for non-nested root partition 
(default setting for Server SKUs)
FEATURE_S
ETTINGS_DI
SABLE_KVA
_SHADOW
0
x
2
Force KVA shadowing to be disabled
FEATURE_S
ETTINGS_DI
SABLE_IBRS
0
x
4
Disable IBRS, regardless of machine 
configuration
FEATURE_S
ETTINGS_SE
T_SSBD_AL
WAYS
0
x
8
Always set SSBD in kernel and user
FEATURE_S
ETTINGS_SE
T_SSBD_IN_
KERNEL
0
x
1
0
Set SSBD only in kernel mode (leaving user-
mode code to be vulnerable to SSB attacks)
FEATURE_S
ETTINGS_US
ER_STIBP_A
LWAYS
0
x
2
0
Always keep STIBP on for user-threads, 
regardless of STIBP pairing
FEATURE_S
ETTINGS_DI
SABLE_USE
R_TO_USER
0
x
4
0
Disables the default speculation mitigation 
strategy (for AMD systems only) and enables the 
user-to-user only mitigation. When this flag is set, 
no speculation controls are set when running in 
kernel mode.
FEATURE_S
ETTINGS_DI
SABLE_STIB
P_PAIRING
0
x
8
0
Always disable STIBP pairing
FEATURE_S
ETTINGS_DI
SABLE_RET
POLINE
0
x
1
0
0
Always disable Retpoline
FEATURE_S
ETTINGS_FO
RCE_ENABL
E_RETPOLIN
E
0
x
2
0
0
Enable Retpoline regardless of the CPU support 
of IBPB or IBRS (Retpoline needs at least IBPB 
to properly protect against Spectre v2)
FEATURE_S
ETTINGS_DI
SABLE_IMP
0
x
2
Disable Import Optimization regardless of 
Retpoline
ORT_LINKIN
G
0
0
0
0
Retpoline and import optimization
Keeping hardware mitigations enabled has strong performance penalties for
the system, simply because the CPU’s branch predictor is limited or disabled
when the mitigations are enabled. This was not acceptable for games and
mission-critical applications, which were running with a lot of performance
degradation. The mitigation that was bringing most of the performance
degradation was IBRS (or IBPB), while used for protecting against Spectre.
Protecting against the first variant of Spectre was possible without using any
hardware mitigations thanks to the memory fence instructions. A good
example is the LFENCE, available in the x86 architecture. Those instructions
force the processor not to execute any new operations speculatively before
the fence itself completes. Only when the fence completes (and all the
instructions located before it have been retired) will the processor’s pipeline
restart to execute (and to speculate) new opcodes. The second variant of
Spectre was still requiring hardware mitigations, though, which implies all
the performance problems brought by IBRS and IBPB.
To overcome the problem, Google engineers designed a novel binary-
modification technique called Retpoline. The Retpoline sequence, shown in
Figure 8-9, allows indirect branches to be isolated from speculative
execution. Instead of performing a vulnerable indirect call, the processor
jumps to a safe control sequence, which dynamically modifies the stack,
captures eventual speculation, and lands to the new target thanks to a
“return” operation.
Figure 8-9 Retpoline code sequence of x86 CPUs.
In Windows, Retpoline is implemented in the NT kernel, which can apply
the Retpoline code sequence to itself and to external driver images
dynamically through the Dynamic Value Relocation Table (DVRT). When a
kernel image is compiled with Retpoline enabled (through a compatible
compiler), the compiler inserts an entry in the image’s DVRT for each
indirect branch that exists in the code, describing its address and type. The
opcode that performs the indirect branch is kept as it is in the final code but
augmented with a variable size padding. The entry in the DVRT includes all
the information that the NT kernel needs to modify the indirect branch’s
opcode dynamically. This architecture ensures that external drivers compiled
with Retpoline support can run also on older OS versions, which will simply
skip parsing the entries in the DVRT table.
 Note
The DVRT was originally developed for supporting kernel ASLR
(Address Space Layout Randomization, discussed in Chapter 5 of Part 1).
The table was later extended to include Retpoline descriptors. The system
can identify which version of the table an image includes.
In phase -1 of its initialization, the kernel detects whether the processor is
vulnerable to Spectre, and, in case the system is compatible and enough
hardware mitigations are available, it enables Retpoline and applies it to the
NT kernel image and the HAL. The
RtlPerformRetpolineRelocationsOnImage routine scans the DVRT and
replaces each indirect branch described by an entry in the table with a direct
branch, which is not vulnerable to speculative attacks, targeting the Retpoline
code sequence. The original target address of the indirect branch is saved in a
CPU register (R10 in AMD and Intel processors), with a single instruction
that overwrites the padding generated by the compiler. The Retpoline code
sequence is stored in the RETPOL section of the NT kernel’s image. The
page backing the section is mapped in the end of each driver’s image.
Before being started, boot drivers are physically relocated by the internal
MiReloadBootLoadedDrivers routine, which also applies the needed fixups
to each driver’s image, including Retpoline. All the boot drivers, the NT
kernel, and HAL images are allocated in a contiguous virtual address space
by the Windows Loader and do not have an associated control area,
rendering them not pageable. This means that all the memory backing the
images is always resident, and the NT kernel can use the same
RtlPerformRetpolineRelocationsOnImage function to modify each indirect
branch in the code directly. If HVCI is enabled, the system must call the
Secure Kernel to apply Retpoline (through the
PERFORM_RETPOLINE_RELOCATIONS secure call). Indeed, in that
scenario, the drivers’ executable memory is protected against any
modification, following the W^X principle described in Chapter 9. Only the
Secure Kernel is allowed to perform the modification.
 Note
Retpoline and Import Optimization fixups are applied by the kernel to
boot drivers before Patchguard (also known as Kernel Patch Protection;
see Part 1, Chapter 7, “Security,” for further details) initializes and
protects some of them. It is illegal for drivers and the NT kernel itself to
modify code sections of protected drivers.
Runtime drivers, as explained in Chapter 5 of Part 1, are loaded by the NT
memory manager, which creates a section object backed by the driver’s
image file. This implies that a control area, including a prototype PTEs array,
is created to track the pages of the memory section. For driver sections, some
of the physical pages are initially brought in memory just for code integrity
verification and then moved in the standby list. When the section is later
mapped and the driver’s pages are accessed for the first time, physical pages
from the standby list (or from the backing file) are materialized on-demand
by the page fault handler. Windows applies Retpoline on the shared pages
pointed by the prototype PTEs. If the same section is also mapped by a user-
mode application, the memory manager creates new private pages and copies
the content of the shared pages in the private ones, reverting Retpoline (and
Import Optimization) fixups.
 Note
Some newer Intel processors also speculate on “return” instructions. For
those CPUs, Retpoline cannot be enabled because it would not be able to
protect against Spectre v2. In this situation, only hardware mitigations can
be applied. Enhanced IBRS (a new hardware mitigation) solves the
performance problems of IBRS.
The Retpoline bitmap
One of the original design goals (restraints) of the Retpoline implementation
in Windows was to support a mixed environment composed of drivers
compatible with Retpoline and drivers not compatible with it, while
maintaining the overall system protection against Spectre v2. This implies
that drivers that do not support Retpoline should be executed with IBRS on
(or STIBP followed by an IBPB on kernel entry, as discussed previously in
the “Hardware indirect branch controls” section), whereas others can run
without any hardware speculation mitigations enabled (the protection is
brought by the Retpoline code sequences and memory fences).
To dynamically achieve compatibility with older drivers, in the phase 0 of
its initialization, the NT kernel allocates and initializes a dynamic bitmap that
keeps track of each 64 KB chunk that compose the entire kernel address
space. In this model, a bit set to 1 indicates that the 64-KB chunk of address
space contains Retpoline compatible code; a 0 means the opposite. The NT
kernel then sets to 1 the bits referring to the address spaces of the HAL and
NT images (which are always Retpoline compatible). Every time a new
kernel image is loaded, the system tries to apply Retpoline to it. If the
application succeeds, the respective bits in the Retpoline bitmap are set to 1.
The Retpoline code sequence is augmented to include a bitmap check:
Every time an indirect branch is performed, the system checks whether the
original call target resides in a Retpoline-compatible module. In case the
check succeeds (and the relative bit is 1), the system executes the Retpoline
code sequence (shown in Figure 8-9) and lands in the target address securely.
Otherwise (when the bit in the Retpoline bitmap is 0), a Retpoline exit
sequence is initialized. The RUNNING_NON_RETPOLINE_CODE flag is
set in the current CPU’s PRCB (needed for context switches), IBRS is
enabled (or STIBP, depending on the hardware configuration), an IBPB and
LFENCE are emitted if needed, and the SPEC_CONTROL kernel event is
generated. Finally, the processor lands on the target address, still in a secure
way (hardware mitigations provide the needed protection).
When the thread quantum ends, and the scheduler selects a new thread, it
saves the Retpoline status (represented by the presence of the
RUNNING_NON_RETPOLINE_CODE flag) of the current processors in the
KTHREAD data structure of the old thread. In this way, when the old thread
is selected again for execution (or a kernel trap entry happens), the system
knows that it needs to re-enable the needed hardware speculation mitigations
with the goal of keeping the system always protected.
Import optimization
Retpoline entries in the DVRT also describe indirect branches targeting
imported functions. An imported control transfer entry in the DVRT
describes this kind of branch by using an index referring to the correct entry
in the IAT. (The IAT is the Image Import Address Table, an array of
imported functions’ pointers compiled by the loader.) After the Windows
loader has compiled the IAT, it is unlikely that its content would have
changed (excluding some rare scenarios). As shown in Figure 8-10, it turns
out that it is not needed to transform an indirect branch targeting an imported
function to a Retpoline one because the NT kernel can ensure that the virtual
addresses of the two images (caller and callee) are close enough to directly
invoke the target (less than 2 GB).
Figure 8-10 Different indirect branches on the ExAllocatePool function.
Import optimization (internally also known as “import linking”) is the
feature that uses Retpoline dynamic relocations to transform indirect calls
targeting imported functions into direct branches. If a direct branch is used to
divert code execution to an imported function, there is no need to apply
Retpoline because direct branches are not vulnerable to speculation attacks.
The NT kernel applies Import Optimization at the same time it applies
Retpoline, and even though the two features can be configured
independently, they use the same DVRT entries to work correctly. With
Import Optimization, Windows has been able to gain a performance boost
even on systems that are not vulnerable to Spectre v2. (A direct branch does
not require any additional memory access.)
STIBP pairing
In hyperthreaded systems, for protecting user-mode code against Spectre v2,
the system should run user threads with at least STIBP on. On
nonhyperthreaded systems, this is not needed: protection against a previous
user-mode thread speculation is already achieved thanks to the IBRS being
enabled while previously executing kernel-mode code. In case Retpoline is
enabled, the needed IBPB is emitted in the first kernel trap return executed
after a cross-process thread switch. This ensures that the CPU branch