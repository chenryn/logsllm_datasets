    x  Dead (Linux 2.6.33 to 3.13 only)
    K  Wakekill (Linux 2.6.33 to 3.13 only)
    W  Waking (Linux 2.6.33 to 3.13 only)
    P  Parked (Linux 3.9 to 3.13 only)
`array.c`我们已经修改完毕了,
这时候我们就要修改其他部分了。在[导入Project](https://blog.csdn.net/MyLinChi/article/details/78459373)之后,
我们在整个proc文件中搜索关键词`trace`。先按照下图打开`Project Search Bar`, 并在其中输入`trace`。  
我们会发现搜索的结果都是在`base.c`文件中(下图出现的第一个包含`trace`关键词的函数是我已经修改过的)。  
在检查完有`trace`关键词的代码没发现有用的, 就在`base.c`文件中搜索关键词`status`。
`Ctrl+F`输入关键词之后没找到, 就通过下图的向下搜索的功能一个个定位, 前面的部分都没找到自己想要找的函数段。  
直到找到了关键的部分, 选中函数`proc_pid_status`, 在右边`Relation Window`中继续找我们想要的关键函数。  
但是很遗憾,
在`proc_pid_status`函数中跟了很多相关的函数仍然没找到我们想要的。那我们就回到我们最开始的地方。这部分最上面的标识是`pid_entry`。顺着这个部分往下看,
我们就找到了`proc_tid_stat`函数, 选中该函数之后我们可以找到`do_task_stat`函数。  
接下来, 我们就好好看看这个函数里面有什么。在右边的`Relation Window`中关注到一个有`state`关键词的函数,
双击之后跳转到该函数调用的位置。  
定位到上图那一行之后, 分别跟了`state`关键词和`get_task_state`函数, 都没有发现什么(`base.c`是进程运行之前要做的准备工作,
从`get_task_state`函数可直接回到之前修改的`array.c`文件。但因为已修改完成, 所以就留在`base.c`文件中没有继续定位了)。
现在看到这段函数之中大部分都用到了变量`task`, 所以只好将`task`作为关键词用笨办法来一个一个定位。最后找到了`wchan`,
真的眼泪都掉下来。(因为事先知道要改这个部分)
看了[Android反调试技术整理与实践](https://gtoad.github.io/2017/06/25/Android-Anti-Debug/)这篇文章才知道为什么要修改带有`wchan`关键词的函数。因为`/proc/pid/wchan` 和
`/proc/pid/task/pid/wchan`在调试状态下，里面内容为`ptrace_stop`,
非调试的状态下为ep_poll。所以也可能会泄露正在被调试的信息, 所以我们直接在Project中查找`wchan`关键词,
就定位到函数`proc_pid_wchan`  
定位结束之后我们进行如下修改, 到这里我们的修改就彻底结束了。  
### 修改`msm/fs/proc/base.c`文件
在Ubuntu中编辑文件`vim msm/fs/proc/base.c`, 定位函数`proc_pid_wchan`(大概在268行左右)
    267 static int proc_pid_wchan(struct task_struct *task, char *buffer)
    268 {
    269        unsigned long wchan;
    270        char symname[KSYM_NAME_LEN];
    271
    272        wchan = get_wchan(task);
    273
    274        if (lookup_symbol_name(wchan, symname) uid, cred->euid, cred->suid, cred->fsuid,
    193            cred->gid, cred->egid, cred->sgid, cred->fsgid);
修改的结果为
    180 seq_printf(m,
    181            "State:\t%s\n"
    182            "Tgid:\t%d\n"
    183            "Pid:\t%d\n"
    184            "PPid:\t%d\n"
    185            "TracerPid:\t%d\n"
    186            "Uid:\t%d\t%d\t%d\t%d\n"
    187            "Gid:\t%d\t%d\t%d\t%d\n",
    188            get_task_state(p),
    189            task_tgid_nr_ns(p, ns),
    190            pid_nr_ns(pid, ns),
                   //修改部分
    191            ppid, 0,
    192            cred->uid, cred->euid, cred->suid, cred->fsuid,
    193            cred->gid, cred->egid, cred->sgid, cred->fsgid);
## 源码的编译运行
在编译运行之前, 我们需要先用`echo $PATH`确认交叉编译器在PATH中。  
按照下面来进行配置
    $ export ARCH=arm #指明目标体系架构，arm、x86、arm64
    $ export SUBARCH=arm
    $ cd msm #进入内核所在目录
    $ make hammerhead_defconfig # 设备名_defconfig
    #指定使用的交叉编译器的前缀
    $ make ARCH=arm CROSS_COMPILE=arm-eabi- -j4 ##如果没有gcc的环境, 就增加了CC=clang
可以从[编译内核](https://source.android.com/source/building-kernels.html)这篇文章中找到相应的设备名。
在编译的过程中, 遇到了下面的报错。  
这时候需要修改`kernel/timeconst.pl`文件, 用`vim kernel/timeconst.pl`编辑该文件, 定位到下述代码。
    372     @val = @{$canned_values{$hz}};           
    373     if (!defined(@val)) {                     
    374         @val = compute_values($hz);           
    375     }                                         
    376     output($hz, @val);
将`if (!defined(@val))`改为`if (!@val)`, 再编译一次就可以了。  
接下来, 就按照上图提示进入目录`arch/arm/boot`。  
### 重打包boot.img
为了防止发生不可挽回的刷砖错误, 在刷机之前,
一定要按照[尝试绕过TracePid反调试](https://www.52pojie.cn/thread-917096-1-1.html)将boot.img进行备份。
#### 准备好bootimg-tools工具
因为我之前Windows环境是准备好了的, 就直接在本地解决下面的任务。
在Ubuntu环境中, 输入下面命令就准备完成了
    $ git clone https://github.com/pbatard/bootimg-tools.git
    $ make
    $ cd mkbootimg
Windows环境下进入`[MinGW安装的目录]]\MinGW\msys\1.0`目录下, 双击`msys.bat`。
把[提取出来的boot.img](https://www.52pojie.cn/thread-917096-1-1.html)放到mkbootimg文件夹下,
之后的步骤不管是哪个环境下都是相同的。
#### 用unmkbootimg解包
在MinGW输入命令`./unmkbootimg -i boot.img`, 如果是Ubuntu, 直接去掉前面的`./`执行命令。
我们获得了rebuild需要输入的指令, 之后要rebuild的时候要修改一下才能用。
    To rebuild this boot image, you can use the command:
      mkbootimg --base 0 --pagesize 2048 --kernel_offset 0x00008000 --ramdisk_offset 0x02900000 --second_offset 0x00f00000 --tags_offset 0x02700000 --cmdline 'console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.enable=1' --kernel kernel --ramdisk ramdisk.cpio.gz -o boot.img
#### 替换kernel重新打包
#### 刷入bootnew.img
在手机开机的情况下, 进入bootnew.img存放的目录输入下述命令。
    $ adb reboot bootloader
    $ astboot flash boot bootnew.img
    $ fastboot reboot
### 测试
现在到了见证奇迹的时刻了  
## 参考文章或其他链接
[Ubuntu 安装 JDK 7 / JDK8 的两种方式](http://www.cnblogs.com/a2211009/p/4265225.html)  
[在Ubuntu中通过update-alternatives切换java版本](https://blog.csdn.net/zhandoushi1982/article/details/50807282)  
[编译Android
9.0内核源码并刷入手机](https://blog.csdn.net/XXOOYC/article/details/85679143)  
[Android系统内核编译及刷机实战
（修改反调试标志位）](https://blog.csdn.net/u012417380/article/details/73353670)  
[搭建编译环境](https://source.android.com/setup/build/initializing)  
[How to Build a Custom Android Kernel](https://appuals.com/how-to-build-a-custom-android-kernel/)  
[Android源码定制添加反反调试机制](https://blog.csdn.net/fly_hps/article/details/86172698)  
[Java6+Java7链接](https://pan.baidu.com/s/1K5LU-h8npuczj4JgjKkaWw) 提取码：ma3i