            if (pe32.th32ProcessID == pid)
            {
                processName = pe32.szExeFile;
                break;
            }
        } while (Process32Next(hProcessSnap, &pe32));
        CloseHandle(hProcessSnap);
        return processName;
    }
    status = NtQueryInformationProcess(
        GetCurrentProcess(),
        ProcessBasicInformation,
        &processBasicInformation,
        sizeof(PROCESS_BASIC_INFORMATION),
        NULL);
    std::wstring parentProcessName = GetProcessNameById((DWORD)processBasicInformation.InheritedFromUniqueProcessId);
    if (L"devenv.exe" == parentProcessName)
    {
        std::cout  u KERNELBASE!GetThreadContext L6
    KERNELBASE!GetThreadContext:
    7538d580 8bff            mov     edi,edi
    7538d582 55              push    ebp
    7538d583 8bec            mov     ebp,esp
    7538d585 ff750c          push    dword ptr [ebp+0Ch]
    7538d588 ff7508          push    dword ptr [ebp+8]
    7538d58b ff1504683975    call    dword ptr [KERNELBASE!_imp__NtGetContextThread (75396804)]
若反调试保护在Dr0-DR7中接收到零值，请重置上下文结构的ContextFlages字段中的CONTEXT_DEBUG_RESTRIGS标志，然后在原始的NtGetContextThread函数调用之后恢复其值。对于GetThreadContext函数，它调用NtSetContextThread。以下示例显示如何绕过硬件断点检查并重置：
    typedef NTSTATUS(NTAPI *pfnNtGetContextThread)(
        _In_  HANDLE             ThreadHandle,
        _Out_ PCONTEXT           pContext
        );
    typedef NTSTATUS(NTAPI *pfnNtSetContextThread)(
        _In_ HANDLE              ThreadHandle,
        _In_ PCONTEXT            pContext
        );
    pfnNtGetContextThread g_origNtGetContextThread = NULL;
    pfnNtSetContextThread g_origNtSetContextThread = NULL;
    NTSTATUS NTAPI HookNtGetContextThread(
        _In_  HANDLE              ThreadHandle,
        _Out_ PCONTEXT            pContext)
    {
        DWORD backupContextFlags = pContext->ContextFlags;
        pContext->ContextFlags &= ~CONTEXT_DEBUG_REGISTERS;
        NTSTATUS status = g_origNtGetContextThread(ThreadHandle, pContext);
        pContext->ContextFlags = backupContextFlags;
        return status;
    }
    NTSTATUS NTAPI HookNtSetContextThread(
        _In_ HANDLE              ThreadHandle,
        _In_ PCONTEXT            pContext)
    {
        DWORD backupContextFlags = pContext->ContextFlags;
        pContext->ContextFlags &= ~CONTEXT_DEBUG_REGISTERS;
        NTSTATUS status = g_origNtSetContextThread(ThreadHandle, pContext);   
        pContext->ContextFlags = backupContextFlags;
        return status;
    }
    void HookThreadContext()
    {
      HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
      g_origNtGetContextThread = (pfnNtGetContextThread)GetProcAddress(hNtDll, "NtGetContextThread");
      g_origNtSetContextThread = (pfnNtSetContextThread)GetProcAddress(hNtDll, "NtSetContextThread");
      Mhook_SetHook((PVOID*)&g_origNtGetContextThread, HookNtGetContextThread);
      Mhook_SetHook((PVOID*)&g_origNtSetContextThread, HookNtSetContextThread);
    }
# SEH（结构化异常处理）
结构化异常处理是操作系统向应用程序提供的一种机制，允许应用程序接收有关异常情况的通知，如除数是零、引用不存在的指针或执行受限指令。此机制允许您在不涉及操作系统的情况下处理应用程序中的异常。如果不处理异常，将导致异常的程序终止。开发人员通常在堆栈中定位指向SEH的指针，称为SEH框架。当前SEH框架地址位于x64系统的FS选择器或GS选择器的0的偏移处，这个地址指向`ntdll！_EXCEPTION_REGISTRATION_RECORD`结构：
    0:000> dt ntdll!_EXCEPTION_REGISTRATION_RECORD
       +0x000 Next             : Ptr32 _EXCEPTION_REGISTRATION_RECORD
       +0x004 Handler          : Ptr32 _EXCEPTION_DISPOSITION
启动异常时，控制权将转移到当前SEH处理程序。根据具体情况，此SEH处理程序应返回`_EXCEPTION_DANDITY`的一个值：
    typedef enum _EXCEPTION_DISPOSITION {
        ExceptionContinueExecution,
        ExceptionContinueSearch,
        ExceptionNestedException,
        ExceptionCollidedUnwind
    } EXCEPTION_DISPOSITION;
如果处理程序返回ExceptionContinueSearch，系统将继续从触发异常的指令执行。如果处理程序不知道如何处理异常，则返回ExceptionContinueSearch，然后系统移动到链中的下一个处理程序。可以使用WinDbg调试器中的！exChain命令浏览当前异常链
    0:000> !exchain
    00a5f3bc: AntiDebug!_except_handler4+0 (008b7530)
      CRT scope  0, filter: AntiDebug!SehInternals+67 (00883d67)
                    func:   AntiDebug!SehInternals+6d (00883d6d)
    00a5f814: AntiDebug!__scrt_stub_for_is_c_termination_complete+164b (008bc16b)
    00a5f87c: AntiDebug!_except_handler4+0 (008b7530)
      CRT scope  0, filter: AntiDebug!__scrt_common_main_seh+1b0 (008b7c60)
                    func:   AntiDebug!__scrt_common_main_seh+1cb (008b7c7b)
    00a5f8e8: ntdll!_except_handler4+0 (775674a0)
      CRT scope  0, filter: ntdll!__RtlUserThreadStart+54386 (7757f076)
                    func:   ntdll!__RtlUserThreadStart+543cd (7757f0bd)
    00a5f900: ntdll!FinalExceptionHandlerPad4+0 (77510213)
链中的最后一个是系统分配的默认处理程序。如果以前的处理程序都无法处理异常，则系统处理程序将转到注册表以获取
    HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\AeDebug
根据AeDebug键值，要么终止应用程序，要么将控制转移到调试器。调试器路径应在调试器REG_SZ中指示。  
创建新流程时，系统会将主SEH框架添加到其中。主SEH框架的处理程序也由系统定义。主SEH框架本身几乎位于为进程分配的内存堆栈的最开始处。SEH处理程序函数签名如下所示：
    typedef EXCEPTION_DISPOSITION (*PEXCEPTION_ROUTINE) (
        __in struct _EXCEPTION_RECORD *ExceptionRecord,
        __in PVOID EstablisherFrame,
        __inout struct _CONTEXT *ContextRecord,
        __inout PVOID DispatcherContext
        );
如果正在调试应用程序，则在生成int 3h中断后，控制将被调试器截取。否则，控制权将转移到SEH处理程序。以下代码示例显示基于SEH框架的反调试保护：
    BOOL g_isDebuggerPresent = TRUE;
    EXCEPTION_DISPOSITION ExceptionRoutine(
        PEXCEPTION_RECORD ExceptionRecord,
        PVOID             EstablisherFrame,
        PCONTEXT          ContextRecord,
        PVOID             DispatcherContext)
    {
        g_isDebuggerPresent = FALSE;
        ContextRecord->Eip += 1;
        return ExceptionContinueExecution;
    }
    int main()
    {
        __asm
        {
            // set SEH handler
            push ExceptionRoutine
            push dword ptr fs:[0]
            mov  dword ptr fs:[0], esp
            // generate interrupt
            int  3h
            // return original SEH handler
            mov  eax, [esp]
            mov  dword ptr fs:[0], eax
            add  esp, 8
        }
        if (g_isDebuggerPresent)
        {
            std::cout  Eip + = 1行更改执行流程中下一条指令的地址，这将导致执行int
3h后的指令。然后，代码返回原始SEH处理程序，清除堆栈，并检查是否存在调试器。
未完待续.