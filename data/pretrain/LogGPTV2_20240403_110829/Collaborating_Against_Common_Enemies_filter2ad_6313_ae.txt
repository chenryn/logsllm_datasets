as the time diﬀerence between the instant the source is
blacklisted by some IDS and the instant the source was
ﬁrst detected by any of the collaborators. The plots are
only for sources detected at more than 1 IDS, because
localized sources always require the same time to de-
tect under all four schemes. The malicious sources on
the x axis are sorted according to their detection time
by Local Detection. Note that for this ﬁgure, we set
USENIX Association
Internet Measurement Conference 2005  
375
i
s
e
t
u
n
m
n
i
e
m
i
t
n
o
i
t
c
e
t
e
D
 100000
 10000
 1000
 100
 10
 1
 CBC
 Random and Local 
are almost identical
 Collaborating with 
     all IDSs
Local Detection
CBC
Random Collaboration
Collaboration with all IDSs
 0
 2000
 4000
 6000
 8000  10000  12000  14000  16000
Malicious source IP addresses
Figure 12: Comparison of time taken in min-
utes for blacklisting a shared malicious source for
CBC, Local Detection, Random Collaboration and
Collaboration with All IDSs. Short duration at-
tacks (under 5 minutes) which number around 25%
do not show signiﬁcant diﬀerence, local detection
works nearly as well. CBC performs nearly as well
as collaboration with all IDSs in detecting longer
duration, slower attacks. Random collaboration of-
fers no beneﬁt except for a few sources.
Blacklisting Threshold to a total of 1000 packets,
rather than 1000 packet/day, so that each approach
will eventually detect the malicious source.
The ﬁgure shows that, for fast sources which can be
detected locally in 5 minutes or less, there is no signif-
icant diﬀerence among the four schemes. These form
nearly 25% of all classiﬁed common attackers. The
curves diverge for slower sources which take longer to
blacklist locally. Random collaboration oﬀers no ben-
eﬁt, i.e., the time taken to blacklist is the same as Lo-
cal Detection except for a few sources.
In contrast,
CBC speeds up detection for about 75% of the studied
sources, and performs nearly as well as collaborating
with all IDSs. There are a small number around 5%
of slower sources which take longer to detect in CBC
because of them being correlated across IDSs which do
not belong to each other’s correlation group.
7.3 Overhead
In comparison with Local Detection, the speedup in
detecting malicious sources is obtained at the cost of
communication among the collaborators. The aver-
age query rates in CBC and Random Collaboration
are fairly close. They both have an average of about
1.3 query/minute/IDS, with a standard deviation of
2.9.
In comparison, collaborating with all IDSs has
a very high overhead; the average query overhead is
454.9 query/minute/IDS, which is 2 orders of magni-
Alert
Reduction
Sources
missed
CBC
Local
Detection Collaboration
Random
All
IDSs
73.44% 35.48%
37.77%
80.56%
5.02%
38.65%
36.69%
0%
Table 3: Comparison between 4 schemes for pick-
ing collaborators in terms of alert volume reduction
and the number of malicious sources missed.
tude higher than CBC.
7.4 Effectiveness
Faster detection of malicious sources also results in sig-
niﬁcant reduction in alert volume. Table 3 lists the av-
erage reduction in alert volume from blacklisting under
CBC, Random Collaboration, Collaborating with all
IDSs and Local Detection. On average, CBC results in
73.44% reduction in alert volume (i.e., the size of the
log that admin should examine). The value is close to
the one obtained by collaborating with all IDSs, which
is 80.56%. Local Detection, on the other hand, per-
forms signiﬁcantly worse; it reduces the alert volume
only by 35.48%. There is no discernible diﬀerence be-
tween Local Detection and Random Collaboration, the
reduction in alert volume is only marginally better at
37.77%. The above numbers are for all attacks, corre-
lated and uncorrelated. Thus by being able to quickly
detect correlated attacks, CBC reduces alert volume
by a further 38% over Local Detection.
Table 3 also lists the fraction of correlated malicious
sources missed by CBC, Local Detection, and Random
Collaboration in comparison to Collaborating with all
IDSs. A malicious source is missed if the scheme is
unable to blacklist it due to incomplete information,
though it is blacklisted all IDSs collaborate. CBC
misses only 5.02% of the malicious sources, while Local
Detection misses 38.65% of them. Random collabora-
tion scheme is almost similar at 36.69%. These val-
ues depend on the thresholds used, but they demon-
strate the order of magnitude improvement obtained
in CBC and the insigniﬁcant diﬀerence between CBC
and collaborating with all IDSs. In summary, CBC im-
proves signiﬁcantly over Local Detection. It increases
the number of detected sources by 33%, and reduces
the volume of alerts by an extra 38% beyond Local
Detection. It performs almost as well as the collabo-
rating with all IDSs. In contrast, a random choice of
collaborators is as bad as not collaborating.
8 RELATED WORK
Several proposals exist for building collaborative and
distributed intrusion detection systems [21, 9, 10, 26,
20, 23, 22, 8, 28], but none of them has studied attack
correlation. Our work extends many of these propos-
376
Internet Measurement Conference 2005 
USENIX Association
als with a mechanism for picking collaborators, and
maximizes the beneﬁt of collaboration while limiting
its overhead.
Early distributed intrusion detection systems collect
audit data from distributed component systems but an-
alyze them in a central place (e.g., DIDS [21], ISM [9],
NADIR [10], NSTAT [26] and ASAX [8]). Recent sys-
tems have paid more attention to scalability (e.g., EMER-
ALD [20], GrIDS [23], AAFID [22], and CSM [27]). We
discuss a few of them below.
The Collaborative Intrusion Detection System [14]
involves dynamic groups of nodes that rapidly change
and exchange information. The set of nodes exchang-
ing information is not constant and is changed contin-
uously to cover all nodes in the system which limits its
scalability. COSSACK [11], another collaborative re-
sponse framework, is concerned more with alarm prop-
agation than detection itself. DOMINO [28] relies on
a hierarchy of nodes with diﬀerent levels of trust and
aims to exchange blacklist information. The nodes are
placed such that IDSs protecting networks with close
destination address spaces are close together.
The Distributed Intrusion Detection System (DIDS)
[21] addresses system attacks across a network. At-
tacks such as doorknob, chaining, and loopback could
be detected when data from hosts within a given net-
work was combined under centralized control. Clever
attackers could still subvert DIDS by reducing the vol-
ume of attacks for a given network.
EMERALD addresses intrusions within large sep-
arately administered networks [20]. EMERALD in-
cludes features for handling diﬀerent levels of trust
between the domains from the standpoint of a cen-
tralized system: individual monitors are deployed in a
distributed fashion, but still contribute to a high-level
event-analysis system. EMERALD appears to scale
well to large domains. The Hummer project [15] fo-
cuses on the relationships between diﬀerent IDSs (e.g.,
peer, friend, manager/subordinate relationships) and
policy issues (e.g., access control, cooperation policies).
Finally, there has been work on speciﬁcation and
event abstraction to allow multiple IDS boxes to share
attack information and collaborate on detection and
protection [5, 24, 7].
Attack Measurements & Analysis: A lot of work
has been done in characterizing attack characteristics.
Yegneswaran et al. [28, 18] study the global character-
istics of intrusions as well as Internet background ra-
diation. Network telescopes are used to study DoS ac-
tivity in [17]. Placement of blackholes in a distributed
Internet setting for global threat detection is addressed
in [3].
Analysis of Intrusion Alerts: GrIDS [23] col-
lects traﬃc and connections data. It analyzes TCP/IP
network activities using activities graphs and reports
anomalies when activity exceeds an user speciﬁed thresh-
old. Methods of discovering intent by correlating alerts
from diﬀerent IDSs are presented in [12]. Algorithms
for sharing of alerts [13] in a privacy-preserving man-
ner could be a future avenue of research. Alert corre-
lation to reduce the number of alerts to be manually
examined is discussed in [4]. Alerts are inserted into
a relational database to be aggregated and the sum-
marized alert is presented to the operator. These are
orthogonal to our work and can be easily integrated.
9 CONCLUDING REMARKS
We have presented the ﬁrst wide-scale study of attack
correlation in the Internet, i.e., attacks that share the
source IP but occur at diﬀerent networks. Our dataset,
constituting of alert logs collected at 1700 IDSs, show
that correlated attacks are fairly prevalent in today’s
Internet; 20% of all the attacking sources are shared at-
tackers, and they are responsible for 40% of all alerts
in our logs. Shared attackers attack diﬀerent networks
within a few minutes of each other, emphasizing the ad-
vantage of realtime collaboration between victim net-
works as opposed to sharing attack information oﬄine.
Our results also show that the 1700 IDSs can be
grouped into small correlation groups of 4-6 IDSs; two
IDSs in the same correlation group share highly cor-
related attacks, whereas IDSs in diﬀerent correlation
groups see almost no correlated attacks. Furthermore,
the correlation groups are stable and their membership
persists for months. Though not conclusive, our analy-
sis indicates that similarity in the software and services
running on the protected networks causes their IDSs to
show attack correlation.
Our empirical results have important implications for
collaborative intrusion detection of common attackers.
They show that it is quite important that each net-
work/IDS picks the right collaborators. Exchanging
alerts with thousands of IDSs in realtime is imprac-
tical because of the resulting overhead and the lack
of trust between these networks. Using a trace-driven
simulation, we show that picking at random a smaller
and ﬁxed set of collaborators has almost no beneﬁts
beyond local detection. In contrast, collaborating with
the 4-6 IDSs in one’s correlation group has almost the
same utility as collaborating with all 1700 IDSs in our
dataset with 350 times less overhead.
Finally, we note that our results reﬂect the state of
the Internet at the end of 2004 and the beginning of
2005.
It is hard to predict the extent of attack cor-
relation in the future and the continuous existence of
correlation groups. Future research should investigate
these characteristics and track their evolution.
USENIX Association
Internet Measurement Conference 2005  
377
Radiation. In Proceedings of the IMC 2004.
[19] V. Paxson. Bro: a system for detecting network intruders
in real-time. Computer Networks (Amsterdam,
Netherlands: 1999), 31(23–24):2435–2463, 1999.
[20] P. A. Porras and P. G. Neumann. EMERALD: Event
monitoring enabling responses to anomalous live
disturbances. In Proc. 20th NIST-NCSC National
Information Systems Security Conference, 1997.
[21] A. Snapp and et. al. Distributed intrusion detection
system - motivation, architecture, and an early prototype.
In Proceedings of the 14th NCSC, 1991.
[22] E. Spaﬀord and Z. D. Intrusion detection using
autonomous agents. In Computer Networks, Volume 34,
2000.
[23] S. Staniford-Chen and et. al. GrIDS – A graph-based
intrusion detection system for large networks. In 19th
National Information Systems Security Conference, 1996.
[24] B. Staniford-Chen S.; Tung and D. Schnackenberg. The
Common Intrusion Detection Framework (CIDF). In
Information Survivability Workshop, Orlando FL, 1998.
[25] The Honeynet Project. Know your Enemy: Tracking
Botnets. http://www.honeynet.org/papers/bots/.
[26] G. Vigna, S. Eckmann, and R. Kemmerer. The stat tool
suite. In In Proceedings of DISCEX, 2000.
[27] U. White, G. B.; Pooch. Cooperating security managers:
distributed intrusion detection systems. In Computers &
Security, Vol. 15, No. 5, pages 441–450, 1996.
[28] V. Yegneswaran, P. Barford, and J. Ullrich. Internet
intrusions: Global characteristics and prevalence. In In
Proceedings of ACM SIGMETRICS,, 2003.
[29] S. Zanero. Behavioral Intrusion Detection. In ISCIS 2004.
Notes
1 Moore et al. [16] have shown that it is hard to contain
epidemic worms such as Code Red using IP blacklists. In the 150
million alerts we observed in our ISP dataset logs from 40 IDS,
only 4% are caused by epidemic worms. Thus, IP blacklisting
continues to be an important tool for warding oﬀ attack.
2 The cross correlation is deﬁned as:
rxy =
Pi(x(i) − ¯x)(y(i) − ¯y)
pPi(x(i) − ¯x)2pPi(y(i) − ¯y)2
where rxy is the cross correlation, x and y are vectors of equal
length, and ¯x and ¯y are the corresponding means.
3Message formatting and exchange protocols, though neces-
sary for IDS collaboration, are beyond the scope of this paper.
Some of the existing literature addresses these issues [7, 5, 24].
10 ACKNOWLEDGMENTS
We would like to thank John Hardenbergh, Ben Leong, Har-
sha Madhyastha, Vyas Sekar and the anonymous referees
for their comments; the Internet Storm Center for provid-
ing us the DSHIELD data; Ed Amoroso, Martin Arlitt,
Tim Battles, Glenn Fowler, Patrick Haﬀner, Adam Ham-
mer, Christopher Morrow, Manuel Ortiz, Dan Sheleheda,
and Vinod Yegneswaran for their help with our project.
Also, Katti and Katabi acknowledge the support of the Na-
tional Science Foundation under NSF Career Award CNS-
0448287. The opinions and ﬁndings in this paper are those
of the authors and do not necessarily reﬂect the views of
NSF.
References
[1] Computer Emergency Readiness Team.
http://www.us-cert.gov/.
[2] Distributed Intrusion Detection System.
http://www.dshield.org/.
[3] E. Cooke, M. Bailey, D. Watson, F. Jahanian, and
D. McPherson. Towards understanding distributed
blackhole placement. In The 2nd Workshop on Rapid
Malcode (WORM) Fairfax, Virginia, October 29, 2004.
[4] F. Cuppens and A. Miege. Alert correlation in a
cooperative intrusion detection framework. In 2002 IEEE
Symposium on Security and Privacy.
[5] D. Curry and H. Debar. Intrusion detection message
exchange format: Extensible markup language (xml)
document type deﬁnition, 2001.
[6] F-SECURE. F-secure virus descriptions : Santy.
http://www.f-secure.com/v-descs/santy a.shtml/.
[7] B. Feinstein, G. Matthews, and J. White. The intrusion
detection exchange protocol (idxp), 2003.
[8] N. Habra, B. L. Charlier, A. Mounji, and I. Mathieu.
ASAX : Software architecture and rule- based language for
universal audit trail analysis. In ESORICS, 1992.
[9] L. T. Heberlein, B. Mukherjee, and K. N. Levitt. Internet
security monitor: An intrusion detection system for
large-scale networks. In Proceedings of the 15th National
Computer Security Conference, 1992.
[10] J. Hochberg, K. Jackson, C. Stallings, J. McClary, and
J. DuBois, D.and Ford. NADIR: An automated system for
detecting network intrusions and misuse. In Proceedings of
Computers and Security 12(1993)3, 1993.
[11] A. Hussain, J. Heidemann, and C. Papadopoulos.
COSSACK: Coordinated Suppression of Simultaneous
Attacks. In DISCEX, 2003.
[12] C. Krugel, T. Toth, and C. Kerer. Decentralized Event
Correlation for Intrusion Detection. In 4th International
Conference on Information Security and Cryptology 2001.
[13] P. Lincoln, P. Porras, and V. Shmatikov.
Privacy-Preserving Sharing and Correlation of Security
Alerts. In Usenix Security 2004, San Diego, CA.
[14] M. Locasto and et al. Collaborative Distributive Intrusion
Detection. In CU Tech Report CUCS-012-04, 2004.
[15] J. McConnell, D. Frincke, D. Tobin, J. Marconi, and
D. Polla. A framework for cooperative intrusion detection.
In NISSC, pages 361–373, 1998.
[16] D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet
Quarantine: Requirements for Containing
Self-Propagating Code. In INFOCOM, 2003.
[17] D. Moore, G. M. Voelker, and S. Savage. Inferring internet
Denial-of-Service activity. In USENIX Security 2001.
[18] R. Pang, V. Yegneswaran, P. Barford, V. Paxson, and
L. Peterson. Characteristics of Internet Background
378
Internet Measurement Conference 2005 
USENIX Association