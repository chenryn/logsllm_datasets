timestamp
Figure 1: Topology of dissimilarities (by MDS) between seg-
ments generated by tshark from NTP messages. The seg-
ments are colored according to cluster membership (glow)
and true field type (dot).
are labeled as glows around the segment dots. Therefore, it can visu-
ally be distinguished that the clusters inferred by our method match
the perception of dense areas. We verify this visual indication of
the validity of our approach by result precision statistics in the
following evaluation of application mode 2.
3.2 Recognize Field Types from Templates
As described in application mode 2, we recognize types of newly
seen segments from templates of typical field data types. Thus, we
can recognize, e. g., counting numbers, IDs, IP and MAC addresses,
and timestamps. By further heuristics, chars [5] and flags can also
be identified.
Using templates derived from these clusters, we recognize similar
segments in a test set of messages that were not used in creating the
templates. For the presented evaluation, we used a combination of
100 messages of each DHCP, DNS, NBNS, NTP, and SMB as training
set to derive templates. We tested the approach with different traces
of the same binary protocols truncated to 1000 messages each. We
compared the data type of segments as recognized by our approach
in mode 2 to the true data type derived from tshark for the analyzed
protocol. We present the recognition quality using the well-known
quality measure “precision”. For each data type, the precision (P) is
the ratio of correctly recognized segments (TP) among all true (TP)
and false recognitions (FP) of one data type: P = TP
TP+FP .
As Table 1 shows for each of our test traces, we are able to
recognize most data types with high precision. The precision stays
PosterCCS ’19, November 11–15, 2019, London, United Kingdom2582Noise
Cluster #0
Cluster #1
Cluster #2
Cluster #3
4 CONCLUSION
The tshark dissectors provide reliable ground truth from known
protocols to test our approach. To realistically obtain message seg-
ments for an unknown binary protocol, we propose to improve
NEMESYS [5] in future work. During our ongoing work we opti-
mize the segment inference to more accurately match true field
boundaries in unknown protocols. Moreover, we envision to add
intra- and inter-message semantics inference to be able to identify,
e. g., length fields and message counter fields. Another future task
will be to validate the approach on a broader basis of protocols for
training and testing.
By our novel approach, we can identify similar segments and
group these into clusters that represent the same data type regard-
less whether ground truth about the protocol is available (mode 1)
or not (mode 3). For field types learned from a training set (mode
1), it is possible to label matching segments of unknown proto-
cols according to their true data type (mode 2). Thus, the analysis
of unknown messages from network traces can be improved by
automatically determining the most relevant portions of data to
investigate further.
Figure 2: Topology of dissimilarities (by MDS) between
NEMESYS-generated segments from DNS. The segments are
colored according to cluster membership.
below of its optimum value of 1.0 where the segments’ data differs
from the learned template further than a predefined threshold. We
measure this difference in terms of the Mahalanobis distance. A
near-zero precision results from completely unrelated training and
testing data.
3.3 NEMESYS clustering
We also did a preliminary evaluation of application mode 3 by clas-
sifying similar segments without the utilization of ground truth. As
an example, Figure 2 illustrates the results for DNS: The topology of
dissimilarities and clusters shows distinct dense areas of segments
that constitute similar data values. To emulate the lack of ground
truth, we performed the segmentation by NEMESYS [5]. However,
the inevitable heuristic nature of this approach introduces distor-
tions of the true field boundaries and as a consequence also of the
data types. For example, the density cores of NTP are too blurred
to clearly separate all contained data types. To solve this issue is
subject of our future work.
Table 1: Recognition precision for 1000 messages each.
At positions denoted with “n/a”, the protocol does not contain
the respective field type. ts is timestamp, mac is MAC address.
Data Type
DHCP
DNS
NBNS
NTP
SMB
chars
0.87
1.00
1.00
n/a
0.82
float
n/a
n/a
n/a
0.96
n/a
id
0.70
0.87
n/a
0.00
0.01
ipv4 mac
1.00
0.99
n/a
0.00
1.00
n/a
n/a
0.85
n/a
n/a
ts
n/a
n/a
n/a
1.00
0.33
REFERENCES
[1]
Georges Bossert, Frédéric Guihéry, and Guillaume Hiet. 2014. Towards Auto-
mated Protocol Reverse Engineering Using Semantic Information. In Proceed-
ings of the 9th ACM Symposium on Information, Computer and Communications
Security (AsiaCCS). ACM.
Chia Y. Cho, Domagoj Babić, Eui C. R. Shin, and Dawn Song. 2010. Inference
and Analysis of Formal Models of Botnet Command and Control Protocols.
In Proceedings of the 17th ACM Conference on Computer and Communications
Security (CCS). ACM.
[2]
[3] Weidong Cui, Jayanthkumar Kannan, and Helen J. Wang. 2007. Discoverer:
Automatic Protocol Reverse Engineering from Network Traces. In Proceedings
of 16th USENIX Security Symposium. USENIX Association.
[6]
[5]
[4] Martin Ester, Hans-Peter Kriegel, Jörg Sander, and Xiaowei Xu. 1996. A Density-
Based Algorithm for Discovering Clusters in Large Spatial Databases with
Noise. In Proceedings of 2nd International Conference on Knowledge Discovery
and Data Mining. AAAI Press.
Stephan Kleber, Henning Kopp, and Frank Kargl. 2018. NEMESYS: Network
Message Syntax Reverse Engineering by Analysis of the Intrinsic Structure
of Individual Messages. In 12th USENIX Workshop on Offensive Technologies
(WOOT). USENIX Association.
Stephan Kleber, Lisa Maile, and Frank Kargl. 2019. Survey of Protocol Reverse
Engineering Algorithms: Decomposition of Tools for Static Traffic Analysis.
IEEE Communications Surveys and Tutorials, 21, 1, (February 2019). Firstquarter.
G. N. Lance and W. T. Williams. 1966. Computer Programs for Hierarchical
Polythetic Classification (“Similarity Analyses”). The Computer Journal, 9, 1,
(May 1966), 60–64.
Jian-Zhen Luo and Shun-Zheng Yu. 2013. Position-Based Automatic Reverse En-
gineering of Network Protocols. Journal of Network and Computer Applications,
36, 3, (May 2013). Elsevier.
Prasanta Chandra Mahalanobis. 1936. On the Generalized Distance in Statistics.
Proceedings of the National Institute of Science of India, 2, 1, 49–55.
[7]
[8]
[9]
[11]
[10] David N. Reshef, Yakir A. Reshef, Hilary K. Finucane, Sharon R. Grossman,
Gilean McVean, Peter J. Turnbaugh, Eric S. Lander, Michael Mitzenmacher,
and Pardis C. Sabeti. 2011. Detecting Novel Associations in Large Data Sets.
Science, 334, 6062, (December 2011), 1518–1524. American Association for the
Advancement of Science.
Yipeng Wang, Xiao-Chun Yun, Muhammad Zubair Shafiq, Liyan Wang, Alex
X. Liu, Zhibin Zhang, Danfeng Yao, Yongzheng Zhang, and Li Guo. 2012. A
Semantics Aware Approach to Automated Reverse Engineering Unknown
Protocols. In 20th IEEE International Conference on Network Protocols (ICNP).
IEEE.
Shameng Wen, Qingkun Meng, Chao Feng, and Chaojing Tang. 2017. Protocol
Vulnerability Detection Based on Network Traffic Analysis and Binary Reverse
Engineering. PLOS ONE, 12, 10, (October 2017). Public Library of Science.
[12]
PosterCCS ’19, November 11–15, 2019, London, United Kingdom2583