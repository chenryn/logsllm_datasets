title:Using the Fluhrer, Mantin, and Shamir Attack to Break WEP
author:Adam Stubblefield and
John Ioannidis and
Aviel D. Rubin
Using the Fluhrer, Mantin, and Shamir Attack
to Break WEP
Adam Stubbleﬁeld
∗
Computer Science Dept.
Rice University
PI:EMAIL
Abstract
John Ioannidis
Aviel D. Rubin
AT&T Labs – Research, Florham Park, NJ
{ji,rubin}@research.att.com
We implemented an attack against WEP, the link-layer
security protocol for 802.11 networks. The attack was
described in a recent paper by Fluhrer, Mantin, and
Shamir. With our implementation, and permission of the
network administrator, we were able to recover the 128
bit secret key used in a production network, with a pas-
sive attack. The WEP standard uses RC4 IVs improperly,
and the attack exploits this design failure. This paper
describes the attack, how we implemented it, and some
optimizations to make the attack more efﬁcient. We con-
clude that 802.11 WEP is totally insecure, and we pro-
vide some recommendations.
1 Introduction
Wireless networking has taken off, due in large part
to the availability of the 802.11 standard. While an-
other standard, Bluetooth, is also gaining in popularity,
the longer range and higher speeds achieved by 802.11
make it the protocol of choice for wireless LANs. Ofﬁce
buildings, conferences, and even many residences now
offer 802.11 connectivity. The PC cards that are most
often used in these networks provide a security protocol
called Wired Equivalent Privacy (WEP).
WEP is easy to administer. The device using the
802.11 card is conﬁgured with a key, that in practice
usually consists of a password or a key derived from
a password. The same key is deployed on all devices,
including the access points. The idea is to protect the
wireless communication from devices that do not know
the key.
Borisov, Goldberg and Wagner demonstrated some se-
curity ﬂaws in WEP [1]. They explained that WEP fails
to specify how IVs for RC4 are speciﬁed. Several PC
cards reset IVs to zero every time they are initialized,
∗
Research done while a summer intern at AT&T Labs
and then increment them by one for every use. This re-
sults in high likelihood that keystreams will be reused,
leading to simple cryptanalytic attacks against the ci-
pher, and decryption of message trafﬁc. The authors ver-
iﬁed this experimentally and describe other weaknesses
as well. For example, the space from which IVs are cho-
sen is too small, virtually guaranteeing reuse, and lead-
ing to the same cryptanalytic attacks just described. The
paper also shows that message authentication in WEP is
broken.
Fluhrer, Mantin, and Shamir describe a passive
ciphertext-only attack against RC4 as used in WEP [4].
The attack exploits the method in which the standard de-
scribes using IVs for the RC4 stream cipher. In their pa-
per, the authors state, Note that we have not attempted
to attack an actual WEP connection, and hence do not
claim that WEP is actually vulnerable to this attack.
Based on the description in their paper, we successfully
implemented the attack, proving that WEP is in fact
completely vulnerable. The purpose of this paper is to
describe our implementation, along with some enhance-
ments to improve the performance of the attack.
2 Overview of the WEP attack
In this section we present an overview of the WEP
protocol and review brieﬂy how the attack of Fluhrer,
Mantin, and Shamir can be applied to WEP. For a de-
tailed description of WEP we refer the reader to the of-
ﬁcial 802.11 standard [7].
Encryption in WEP uses a secret key, k, shared be-
tween an access point and a mobile node. To compute
a WEP frame, the plaintext frame data, M, is ﬁrst con-
catenated with its (non-cryptographic) checksum c(M),
to produce M · c(M) (where · denotes concatenation).
Then, a per packet initialization vector (IV) is prepended
to the secret key, k, to create the packet key, IV · k. The
RC4 stream cipher is then initialized using this packet
key, and the output bytes of the cipher are exclusive-ored
(denoted ⊕) with the checksummed plaintext to generate
the ciphertext:
3 Implementation
C = (M · c(M))⊕ RC4(IV · k)
The actual WEP data is the per-packet IV prepended
to this ciphertext, C.
2.1 The Known IV Attack of Fluhrer, Mantin,
and Shamir
For completeness, we include a short description of
the attack of Fluhrer, Mantin, and Shamir [4] here. We
refer the reader to the original paper for the motivation
and details.
To begin, we describe the structure of the RC4 stream
cipher (a full description can be found in [9]). RC4
consists of two parts, a key scheduling algorithm and
an output generator. In WEP, the key scheduling algo-
rithm uses either a 64-bit packet key (40-bit secret key
plus 24-bit IV) or a 128-bit key (104-bit secret key plus
24-bit IV) to set up the RC4 state array, S, which is a
permutation of {0, . . . ,255}. The output generator uses
the state array S to create a pseudorandom sequence.
The attack utilizes only the ﬁrst byte of output from
the pseudorandom sequence, so we focus our attention
there. The equation for this ﬁrst byte of output is given
by S[S[1] + S[S[1]]. Thus, after the key setup stage, this
ﬁrst byte depends on only three values of the state ar-
ray (S[1], S[S[1]], S[S[1] + S[S[1]]). The attack is based
on our ability to derive information about the key by ob-
serving this value. We defer the discussion of how to
recover the value of this ﬁrst byte from a WEP cipher-
text stream until Section 3.
To mount the attack, we search for IVs that place the
key setup algorithm into a state which leaks information
about the key. Using the terminology of Fluhrer et al.,
we refer to these key-leaking cases as resolved.
It is
simple to test whether a particular packet provides an
IV and output byte that result in a resolved condition,
though we refer the reader to the Fluhrer et. al. paper for
the conditions under which they occur1. Each resolved
packet leaks information about only one key byte, and
we must correctly guess each key byte before any packet
gives us information about a later key byte.
We say we must “guess” each key byte as the attack is
statistical in nature; each resolved packet gives us a 5%
chance of guessing a correct key byte and a 95% chance
of guessing incorrectly. However, by looking at a large
number of these resolved cases, we can expect to see a
bias toward the true key bytes.
1It is important to use the criteria given in section 7 rather than the
criteria given in appendix A. The IVs listed in appendix A are only a
subset of the IVs which can resolve. We return to this in section 4 of
this paper.
In implementing this attack, we had three goals. First
and foremost, we wanted to verify that the attack could
work in the real world. Second, we were interested in
how cheaply and easily the attack could be launched.
Lastly, we wanted to see what improvements could be
made to both the general RC4 attack and the WEP attack
in particular. In this section we report on our success
at the ﬁrst two goals, while reserving discussion about
attack optimizations to Section 4.
3.1 Simulating the Attack
Before trying to break WEP, we created a simulation
of the RC4 attack to both verify our understanding of the
weakness and to gather information about how many re-
solved packets we could expect would be required when
mounting the actual attack. The coding of the simulated
attack took under two hours, including a few optimiza-
tions. The simulation showed that the attack was always
able to recover the full key when given 256 probable
resolved cases.2 We also observed that although 60 re-
solved cases (the number recommended in the Fluhrer
et. al. paper) were usually enough to determine a key
byte, there were instances in which more were required.
Because at this point we had not thoroughly investi-
gated how accurately we would be able to determine the
ﬁrst output byte of the RC4 pseudorandom sequence,
we also simulated the effect that sometimes guessing
wrong would have on the attack. We were pleased to
see that as long as the number of incorrect guesses was
kept small, the correct key byte would still be returned,
though sometimes more resolved cases were needed.
3.2 Capturing the Packets
Surprisingly, capturing WEP encrypted packets off of
our wireless network proved to be the most time con-
suming part of the attack. There are a number of com-
mercial software programs that are able to both cap-
ture and decode 802.11 packets, such as NAI’s “Snif-
fer” and Wildpacket’s “AiroPeek,” though both products
cost thousands of dollars. Because we wanted to show
that the attack could be done by an adversary with lim-
ited resources, we purchased a $100 Linksys wireless
card, based on the Intersil Prism II chipset. We made
this choice because the Prism II allows much of its com-
putation to be completed in software and because there
was a Linux driver available that could grab raw WEP
encrypted packets. Though we did not know it at the
time, this chipset has been used by others to mount dic-
2Cases corresponding to IVs of the form (B+3, 255, N) as in the
Fluhrer et. al. paper.
tionary and brute force attacks against WEP.3
We used both the linux-wlan-ng prism2
driver4 and a modiﬁed version of Tim Newsham’s patch
to re-enable raw packet monitoring,5 to get the card
working in Linux. We were then able to use a modiﬁed
version of the packet sniffer ethereal6 to capture raw
WEP encrypted packets and to decode the data neces-
sary for our attack tool.
There is one problem with using this card as opposed
to a more sophisticated solution. The prism2 chipset
does request a transmission time-slot even when in mon-
itor mode. Many inexpensive basestations do not report
this, though a software hack can allow Linux computers
running as access points to register an SNMP trap each
time that a node joins or leaves the network [5]. This in-
formation does not directly indicate likely attackers, but
could be combined with other information in an IDS to
locate users who register with a basestaion but not with
whatever network level access controls exist. Also, we
know of no practical reason why this “registration” with
the network is necessary; there may even exist consumer
802.11 chipsets which support listening without regis-
tering (perhaps even the prism2 chipset in some other
undocumented mode).
Even with the hardware and software problems, from
the time that we ﬁrst decided to look at this problem, it
took less than a week for the the card to be ordered and
shipped, the test-bed to be set up, the problems to be
debugged, and a full key to be recovered.
3.3 Mounting the Attack
The last piece in actually mounting the attack was
determining the true value of the ﬁrst plaintext byte of
each packet, so that we could could infer the ﬁrst byte
of the pseudorandom sequence from the ﬁrst ciphertext
byte. We originally looked at tcpdump output of de-
crypted trafﬁc (using a correctly keyed card7), and were
planning on using packet length to differentiate between
ARP and IP trafﬁc (both of which have well known ﬁrst
bytes in their headers) as these were by far the two most
common types of trafﬁc on our network. After imple-
menting this, however, we discovered that the attack
didn’t seem to work. We then tried hand decrypting
packets to determine whether tcpdump was working
correctly and discovered that an additional 802.2 encap-
3See Blackhat ‘01 presentation at http://www.lava.net/
˜newsham/wlan/WEP_password_cracker.ppt
4Available from http://www.linux-wlan.com/
5Available
from http://www.lava.net/˜newsham/
wlan/
6Available from http://www.ethereal.com/
7Note that a correctly keyed card is not needed; we simply used
one to design the attack.
sulation header is added for both ARP and IP trafﬁc.8
This discovery actually made the attack even easier, as
all IP and ARP packets would now have the same ﬁrst
plaintext byte (0xAA, the SNAP designation).9 If the
network in question also carries legacy IPX trafﬁc, the
ﬁrst plaintext byte will not be 0xAA for these packets.
However, as we showed in our simulation, as long as the
IP and ARP packets greatly outnumber the IPX packets,
the attack is still possible. If the network carries mostly
IPX trafﬁc, the attack should be modiﬁed to use either
0xFF or 0xE0 instead of 0xAA.
Although our actual attack used the improvements
discussed in the next section, we present an outline of
how a naive attack could work here. It is interesting to
note that even this baseline version of the attack would
still be successful in a short period of time (a day or
two at most) and with an even smaller amount of com-
putation when compared to the improved implementa-
tion, assuming that the wireless network in question had
a reasonable amount of trafﬁc.
To begin, we collected a large number of packets from
our wireless network. To speed the process up for some
of our experiments late at night when network volume
was low, we artiﬁcially increased the load on the wire-
less network by ping ﬂooding a wireless node.
(We
could have waited until more trafﬁc was created; this
is not an active attack.) Because we are able to predict
the value of the ﬁrst byte of any plaintext, the fact that
we changed the makeup of the network trafﬁc did not
affect these experiments. In looking at the IVs of these
collected packets, we discovered that the wireless cards
use a simple counter to compute the IV, wherein the ﬁrst
byte is incremented ﬁrst.10
Figure 1 shows the basic attack used to recover a WEP
key. In section A.1 of Fluhrer et. al., the authors pos-
tulate that 4,000,000 packets would be sufﬁcient with
this baseline attack; we found the number to be between
5,000,000 and 6,000,000 for our key. This number is still
not unreasonable, as we were able to collect that many
packets in a few hours on a partially loaded network.
4 Improving the attack