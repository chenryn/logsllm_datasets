          {
            if ( (_BYTE)cmd == 1 )                  // cmd 1 vs buff[cur_size++]=value, cur_size  0x10uLL )
                return;
              v8 = (__int64)opaque + 16 * BYTE2(mem_value);
              vs_buff = *(_QWORD *)(v8 + 0x133D8);  // 0x133d8 vuln_state buff
              if ( !vs_buff )
                return;
              cur_size = *(unsigned int *)(v8 + 0x133E4);// 0x133e4 cur_size
              if ( (unsigned int)cur_size >= *(_DWORD *)(v8 + 0x133E0) )// 0x133e0 max_size
                return;
    LABEL_26:
              *(_DWORD *)(v8 + 0x133E4) = cur_size + 1;
              *(_BYTE *)(vs_buff + cur_size) = mem_value;
              return;
            }
            goto LABEL_35;
          }
          if ( (_BYTE)cmd != 3 )
          {
            if ( (_BYTE)cmd == 4 )                  // cmd 4 vs buff[cur_size++]=value, no cur_size check
            {
              if ( BYTE2(mem_value) > 0x10uLL )
                return;
              v8 = (__int64)opaque + 16 * BYTE2(mem_value);
              vs_buff = *(_QWORD *)(v8 + 0x133D8);
              if ( !vs_buff )
                return;
              cur_size = *(unsigned int *)(v8 + 0x133E4);
              if ( (unsigned int)cur_size > 0xFFF )
                return;
              goto LABEL_26;
            }
    LABEL_35:
            v20 = vulncnt;
            if ( vulncnt vga.sr[0xCC]`为`cmd`，`opaque->vga.sr[0xCD]`为idx，功能描述如下：
  1. cmd为0时，申请value&0xffff空间大小的堆，并放置`vs[vulncnt]`中，同时初始化`max_size`。
  2. cmd为1时，设置`idx`所对应的`vs[idx]`的`max_size`为`value&0xffff`。
  3. cmd为2时，`printf_chk(1,vs[idx].buff)`。
  4. cmd为3时，当`cur_sizevga.sr[7]&1
==1)`以绕过前面的`if`判断、设置`opaque->vga.sr[0xCC]`来设置cmd以及设置`opaque->vga.sr[0xCD]`设置idx。
在代码中可以找到`cydf_vga_ioport_write`函数中可以设置`opaque->vga.sr`。`addr`为`0x3C4`，`vulue`为`vga.sr`的`index`；当`addr`为`0x3C5`时，`value`为`vga.sr[index]`的值。从而可以通过`cydf_vga_ioport_write`设置`vga.sr[7]`、`vga.sr[0xCC]`以及`vga.sr[0xCD]`。
还需要说明的是可以通过`cydf_vga_mem_read`函数来设置`opaque->latch[0]`，`latch[0]`刚好是`vs`越界访问到的元素。
    uint64_t __fastcall cydf_vga_mem_read(CydfVGAState *opaque, hwaddr addr, uint32_t size)
    {
      ...
      latch = opaque->latch[0];
      if ( !(_WORD)latch )
      {
        v4 = (opaque->vga.sr[7] & 1) == 0;
        opaque->latch[0] = addr | latch;            // set latch low dword
        if ( !v4 )
          goto LABEL_3;
        return vga_mem_readb(&opaque->vga, addr);
      }
      v4 = (opaque->vga.sr[7] & 1) == 0;
      opaque->latch[0] = (_DWORD)addr vga, addr);
        ...
## 利用
漏洞已经清楚了，利用则可以利用数组越界漏洞来实现任意地址写。具体原理为：可以通过`cydf_vga_mem_read`函数将`opaque->latch[0]`设置成想要写的任意地址；再将`opaque->vga.sr[0xCD]`（idx）设置成0x10，再往`vs[0x10]`写数据时即实现了往任意地址（`latch[0]`中的地址）写数据。
在代码中存在`qemu_log`函数，关键代码如下：
    int qemu_log(const char *fmt, ...)
    {
      ...
      if ( qemu_logfile )
      {
       ...
        ret = vfprintf(qemu_logfile, fmt, va);
      ...
      }
    ...
    }
且因为程序没有开PIE，结合上面的`qemu_log`函数，可以做到只利用任意地址写就能实现任意命令执行。具体利用的步骤则如下：
  1. 往bss段数据中写入要执行的命令`cat /root/flag`。
  2. 将该bss地址写入到全局变量`qemu_logfile`中。
  3. 将`vfprintf`函数got表覆盖为`system`函数的plt表地址。
  4. 将`printf_chk`函数got表覆盖为`qemu_log`函数的地址。
  5. 利用cmd为2时，触发`printf_chk`，最终实现system函数的调用，同时参数也可控。
最后一个问题，该如何去交互。以往都是用户态打开对应的`resource0`文件进行映射，实现mmio的访问。但是这次`000a0000-000bffff`地址空间不知道该打开哪个文件去映射。访问该地址空间才可以实现对`cydf_vga_mem_write`以及`cydf_vga_mem_read`的访问。
这时我们可以利用`/dev/mem`文件，[`dev/mem`](https://yq.aliyun.com/articles/592075)是物理内存的全映像，可以用来访问物理内存，用mmap来访问物理内存以及外设的IO资源，是实现用户空间驱动的一种方法。具体可以`man
mem`去查看详情。
调用`cydf_vga_ioport_write`去设置`opaque->vga.sr[]`以及`opaque->vga.sr_index`，有两种方式（exp中使用的是前者）可以实现对`cydf_vga_ioport_write`函数的调用：
一种是利用访问`febc1000-febc1fff`地址空间，触发`cydf_mmio_write`从而实现对
`cydf_vga_ioport_write`的调用。
    void __fastcall cydf_mmio_write(CydfVGAState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      if ( addr > 0xFF )
        cydf_mmio_blt_write(opaque, addr - 0x100, val);
      else
        cydf_vga_ioport_write(opaque, addr + 0x10, val, size);
    }
一种是直接利用PMIO，`out`类指令以及`in`类指令直接对相应的`0x3b0 - 0x3df`端口进行访问，实现对该函数的调用。
## 小结
即使做完了这题，对于vga设备的原理还是不太了解，还是有很多的事值得去做、需要去做。
感觉这部分应该有不少是我理解错误了的或者没考虑到的，欢迎各位师傅对我进行指导。
相关文件与脚本[链接](https://github.com/ray-cp/vm-escape/tree/master/qemu-escape/seccon-2018-q-escape)
## 参考链接
  1. [使用 monitor command 监控 QEMU 运行状态](https://www.xuebuyuan.com/3206943.html)
  2. [Linux中通过/dev/mem操控物理地址](https://yq.aliyun.com/articles/592075)
  3. [Mapping of Display Memory into CPU Address Space](http://www.osdever.net/FreeVGA/vga/vgamem.htm)
  4. [SECCON2018_online_CTF/q-escape](https://github.com/SECCON/SECCON2018_online_CTF/tree/master/Pwn/q-escape)
  5. [seccon 2018 - q-escape](https://uaf.io/exploitation/2018/11/22/seccon-2018-q-escape.html)
  6. [q-escape - SECCON 2018](https://devcraft.io/2018/11/22/q-escape-seccon-2018.html)
  7. [cirrus_vga.c](https://github.com/qemu/qemu/blob/master/hw/display/cirrus_vga.c)