title:Robustness Testing of the Windows DDK
author:Manuel Mendonça and
Nuno Ferreira Neves
Robustness Testing of the Windows DDK* 
Manuel Mendonça 
University of Lisboa, Portugal 
PI:EMAIL 
Nuno Neves 
University of Lisboa, Portugal 
PI:EMAIL 
Abstract 
existing  ones.  For  these  reasons  they  are  the  most 
dynamic and largest part of today’s OS. 
Modern  computers  interact  with  many  kinds  of 
external  devices,  which  have  lead  to  a  state  where 
device  drivers  (DD)  account  for  a  substantial  part  of 
the operating system (OS) code. Currently, most of the 
systems  crashes  can  be  attributed  to  DD  because  of 
flaws contained in their implementation. In this paper, 
we  evaluate  how  well  Windows  protects  itself  from 
erroneous  input  coming  from  faulty  drivers.  Three 
Windows  versions  were  considered  in  this  study, 
Windows XP and 2003 Server, and the future Windows 
release Vista.  Our results demonstrate that in general 
these OS are reasonably vulnerable, and that a few of 
the  injected  faults  cause  the  system  to  hang  or crash. 
Moreover,  all of them handle bad inputs in a roughly 
equivalent  manner,  which  is  worrisome  because  it 
means  that  no  major  robustness  enhancements  are  to 
be  expected  in  the  DD  architecture  of  the  next 
Windows Vista. 
1 
Introduction 
innovation  of 
Personal  computers  are  common  tools  on  today’s 
modern  life,  not  only  for  business,  but  for leisure and 
learning.  Currently  they  interconnect  all  kinds  of 
consumer  electronic  devices  (e.g.,  cameras,  MP3 
players,  printers,  cell  phones).  In  order  to  support  the 
constant 
these  products,  operating 
systems  (OS)  had  also  to  evolve  in  their  architectures 
to  become,  as  much  as  possible,  independent  of  the 
hardware. Their flexibility and extensibility is achieved 
by  the  virtualization  offered  by  device  drivers  (DD), 
which  basically  act  as  the  interface  between  the 
software and the hardware. Given the typical short life 
cycle  of  chipsets  and  motherboards,  system  designers 
have to constantly develop  new DD and/or update the 
interfaces, 
and 
compilers, 
Even tough current DD are mostly written in a high 
level language (e.g., C), they continue to be difficult to 
build and verify. The development of a driver requires 
knowledge  from  a  set  of  disparate  areas,  including 
chips,  OS 
timing 
requirements,  which  are  often  not  simultaneously 
mastered  by  the  programmers,  leading  to  both  design 
and  implementation  errors.  Consequently,  DD  are 
becoming  one  of  the  most important causes of system 
failures.  A  recent  report  showed  that  89%  of  the 
Windows  XP  crashes  are  due  to  3rd  party  DD  [21]. 
Another  analysis  carried  out  on  Linux  demonstrated 
that  a  significant  portion  of  failures  can  be  pointed to 
faulty drivers [4].  
As  a  result,  commercial  and  open  source  OS  are 
both  committed  in  efforts  to  deploy  more  robust 
drivers. As an example, Microsoft has several tools to 
assist  developers  that write  code  in kernel-mode (e.g., 
Driver Verifier [16]). Other projects like [3, 6, 22, 25] 
also  propose  ways  to  improve  the  error  containment 
capabilities of the OS. 
In this paper, we want to study the behavior of three 
Windows  versions,  XP,  2003  Server  and  the  future 
Windows  release  Vista,  when  they  receive  erroneous 
input  from  a  faulty  driver.  We want to understand for 
instance if this input can frequently cause the crash of 
the OS, and if most functions process the input in a safe 
way  or  if  they are mostly unprotected. We would like 
also  to  know  the  impact  of  the  file  system, FAT32  or 
NTFS, on the observed failure modes. This type of data 
is important because it helps to understand the extent of 
the problem, and what solutions need to be devised and 
applied to ameliorate the robustness of current systems. 
Additionally, in the past, the origin of the bad input 
has been mainly from accidental nature. This situation 
will probably change in the future, as DD turn into the 
targets of the malicious attacks, especially because the 
* This work was partially supported by the EU through project IST-4-027513-STP (CRUTIAL) and NoE IST-4- 026764-NOE (RESIST), and by 
the FCT through project POSC/EIA/61643/2004 (AJECT) and the Large- Scale Informatic Systems Laboratory (LASIGE). 
most  common  avenues  of  attack  are  becoming 
increasingly  difficult  to  exploit.  If  this  scenario  ever 
occurs,  one  might  end  up  in  a  position  where  many 
drivers have vulnerabilities, and our only defense is the 
OS own abilities to protect itself. 
The  paper  uses  robustness  testing  to  measure  how 
well these OS handle the inputs from a DD [1, 5, 12]. 
A group of functions from the Windows interface (for 
kernel-mode  DD,  these  functions  are  defined  in  the 
Device  Driver  Toolkit  (DDK))  was  selected  and 
experimentally evaluated. The tests emulated a range of 
programming 
function 
initializations to outside range parameter values. 
from  missing 
flaws, 
Our  results  show  that  in  general  the  three  OS  are 
relatively vulnerable to erroneous input, and that only a 
few  routines  made  an  effective  checking  of  the 
parameters. A few experiments resulted in an OS hang 
and  several  caused  the  system  to  crash.  When  the  OS 
installation  used  the  FAT32  file  system,  some  files 
ended  up  being  corrupted  during  the  crash.  This 
problem was not  observed with the NTFS file system. 
The  minidump  diagnosis  mechanism  was  also 
analyzed, and it provided valuable information in most 
cases. Overall, the three OS versions showed a roughly 
equivalent behavior.  
2  DDK Test Methodology 
In  a  robustness  testing  campaign  one  wants  to 
understand  how  well  a  certain  interface  withstands 
erroneous  input  to  its  exported  functions.  Each  test 
basically  consists  on  calling  a  function  with  a 
combination of good and bad parameter values, and on 
observing  its  outcome  in  the  system  execution.  As 
expected, these campaigns can easily become too time 
consuming and extremely hard to perform, specially if 
the  interface  has  a  large  number  of  functions  with 
various parameters, since this leads to an explosion on 
the  number  of  tests  that  have  to  be  carried  out.  This 
kind  of  problem  occurs  with  the  Windows  DDK 
because  it  exports  more  than  a  thousand  functions. 
However,  from  the  group  of  all  available  functions, 
some  of  them  are  used  more  often  than  others,  and 
therefore these functions potentially have more impact 
in  the  system.  Moreover,  in  most  cases,  (good) 
parameter  values  are often restricted  to a small subset 
of the supported values of a given type.  
Based  on  these  observations,  we  have  used  the 
approach  represented  in  Figure  1  in  the  tests.  The 
DevInspect tool  performs an automatic analysis of the 
target system to obtain a list of available DD. Then, it 
measures  the  use  of  each  imported  function  from  the 
DDK by each driver.  
Device Driver N 
Device Driver 2 
Device Driver 1 
DevInspect 
1. Obtain all DD of 
    an OS installation 
2. Select which DDK  functions 
    should be tested 
List with 
all used 
DDK 
functions 
List with 
candidate 
functions 
for testing 
Compilation 
definitions 
DD Template 
XML signature 
description 
3. Generate group of 
    DD for testing 
DevBuilder 
DD_test K 
DD_test 2 
DD_test 1 
Figure 1: Generating the test DD. 
Using this data, one can select a group of functions 
for testing, the candidate list. A XML file is manually 
written  to  describe  the  prototype  of  each  function, 
which also includes the fault load (e.g., the bad values 
that should be tried). 
Next,  the  DevBuilder  tool  takes  as  input  the 
information contained in the XML file, a template of a 
device  driver  code  and  some  compilation  definitions, 
and  generates  the  workload  utilized  to  exercise  the 
target  system  and 
its  behavior.  The 
workload includes for each function test a distinct DD 
that injects the faulty input. 
to  observe 
Other  approaches  could  have  been  employed  to 
implement the tests (e.g., a single DD injects all faulty 
data).  This  solution  was  chosen  because:  First,  the 
control  logic  of  each  driver  and  management  tool 
becomes  quite  simple.  Second, 
interference 
between experiments basically disappears since an OS 
reboot  is  performed  after  a  driver  test.  Last,  one  can 
determine 
loading  and  unloading 
mechanisms are damaged by the injected faults. 
the  DD 
the 
if 
2.1  Selecting the Candidate Functions 
Windows  stores  drivers  in  the  portable  executable 
file  format  [15],  which  contains  a  table  with  the 
functions that are exported and imported. In the case of 
drivers,  the  imported  functions  are  the  ones  provided 
by  the  DDK.  Therefore,  one  can  discover  the  DD 
currently  available  in  a  system  by  looking  for  .sys 
modules  placed 
\system32\drivers.  Then,  by 
examining  the  table  of  imported  functions  of  the 
drivers,  one  can  collect  statistics  about  which  DDK 
functions are utilized in practice. 
in 
We  have  installed  Windows  XP  and  Server  2003 
with  FAT32  and  NTFS  file  systems  and  Windows 
Vista with NTFS file system in a DELL Optiplex 170L 
computer. Table 1 shows the number of drivers found 
in  each  Windows  installation.  Each  line  identifies  the 
OS  name  and  file  system,  the  number  of  drivers  that 
were  found  and  that  were  running  when  the  boot 
sequence  completed,  and  the  number  of  functions 
called  by  these  drivers.  It  is  possible  to  observe,  for 
instance, 
that  Windows  Vista  calls  many  more 
functions  than  Server  2003  for  roughly  the  same 
number of drivers (2400 instead of 1463).  
From  the  analysis  of  these  drivers  (both  total  and 
running), it was visible that a small group of functions 
was  called  by  a  majority  of  the  DD,  and  that  most  of 
the rest of the functions were infrequently utilized (e.g., 
around  900  functions  were  only  called  by  1  or  2 
drivers).  These  results indicate that if  one  of the most 
called  functions  unsafely  treats  its  parameters,  then 
almost every DD is potentially affected.  
For this work, the functions that were chosen for the 
candidate list were the ones utilized by the majority of 
the  drivers.  We  have  established 
the  following 
selection  criterion:  the  tested  functions  had  to  be 
present in at least 95% of all running drivers. Table 2 
displays the first group of the most used functions that 
satisfied  this  criterion.  In  each  line,  the  table  presents 
our internal identifier, the name of the function and its 
alias  (to  reduce  the  size  of  the  rest  of the  tables). We 
have  found  out  that  this  list  changes  very  little  when 
this  criteria  is  applied  to  all  existing  drivers  and  not 
only  the  running  ones.  Table  3  displays  the  driver 
coverage  by  this  group  of  functions  in  each  OS 
configuration.  
We considered other criteria to select the candidate 
list, such as the static or dynamic frequency of function 
calls. Static frequency picks functions that appear many 
times in the code without taking into account the logic 
under it – a function may appear repeatedly in the code 
but  may  never  be  executed.  Dynamic  frequency 
chooses the functions that are called most often during 
the  execution  of  a  given  workload.  Therefore,  if  the 
workload  has  a  high  file  activity  then  disk  drivers 
would run more, and their functions would be selected 
for  the  candidate  list.  This  will  bias  the  analysis 
towards  the  elected  workload,  which  is  something  we 
wanted to avoid in these experiments.  
2.2  Tested Faulty Values 
The main responsibility of the DevBuilder tool is to 
write a number of DD based on the template code, each 
one carrying out a distinct function test (see Figure 1).  
Table 1: Drivers in a Windows installation. 
Run Drivers 
Functions 
Drivers 
Windows 
File  
System  Total  Run 
93 
FAT32 
94 
NTFS 
93 
FAT32 
NTFS 
92 
113 
NTFS 
259 
260 
189 
189 
250 
1490 
1494 
1463 
1463 
2400 
XP 
Server 
2003 
Vista 
Table 2:Top 20 called DDK functions. 
Name 
ntoskrnl::RtlInitUnicodeString 
ntoskrnl::ExAllocatePoolWithTag 
ntoskrnl::KeBugCheckEx 
ntoskrnl::IofCompleteRequest 
ntoskrnl::IoCreateDevice 
ntoskrnl::IoDeleteDevice 
ntoskrnl::KeInitializeEvent 
ntoskrnl::KeWaitForSingleObject 
ntoskrnl::ZwClose 
ID 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10  ntoskrnl::IofCallDriver 
11  ntoskrnl::ExFreePoolWithTag 
12  ntoskrnl::KeSetEvent 
13  ntoskrnl::KeInitializeSpinLock 
14  HAL::KfAcquireSpinLock 
15  HAL::KfReleaseSpinLock 
16  ntoskrnl::ObfDereferenceObject 
17  ntoskrnl::ZwOpenKey 
18  ntoskrnl::ZwQueryValueKey 
19 
20  ntoskrnl::memset 
IoAttachDeviceToStack 
Alias 
InitStr 
AllocPool 
BugCheck 
CompReq 
CreateDev 
DeleteDev 
InitEvt 
WaitObj 
ZwClose 
CallDrv 
FreePool 
SetEvt 
InitLock 
AcqLock 
RelLock 
DerefObj 
OpenKey 
QryKey 
AttachDev 
memset 
Table 3: Top 20 Functions Driver coverage. 
Windows 
File System  Driver coverage 
XP 
Server 
2003 
Vista 
FAT32 
NTFS 
FAT32 
NTFS 
NTFS 
96,7% 
96,8% 
96,7% 
96,7% 
97,3% 
To accomplish this task, all relevant data about the 
functions is provided in a XML signature file, and the 
DD  template  has  special  marks  that  identify  where  to 
place the information translated from XML into code. 
The  signature  file  includes  the  function  name, 
parameter type and values that should be tried out, and 
expected  return  values.  In  addition,  for  certain 
functions,  it  also  contains  some  setup  code  that  is 
inserted  before  the  function  call,  to  ensure  that  all 
necessary initializations are performed. Similarly, some 
other code can also  be included, which is placed after 
the  function  call,  for  instance  to  evaluate  if  some 
parameter  had  its  value  correctly  changed  or to check 
the returned value. 
In  order  to  obtain  the  relevant  data  about  the 
functions,  we  had  to  resort  to  the  Windows  DDK 
documentation.  From  the  point  of  view  of  a  DD 
developer,  this  documentation  corresponds  to  the 
specification of the DDK functions. Therefore, if there 
are  errors 
they  may  be 
translated into bugs in the drivers’ implementations and 
also  in  our  tests.  Nevertheless,  in  the  worst  case,  if  a 
problem is observed with a test, at least it indicates that 
the function description contains some mistake.  
in  documentation, 
then 
The signature file defines seven types of correct and 
faulty  inputs.  These  values  emulate  the  outcomes  of 
some  of  the  most  common  programming  bugs.  They 
can be summarized as follows: 
Acceptable  Value:  parameter  is  initialized  with  a 
correct value. 
Missing local variable initialization: parameter with a 
random initial value. 
Forbidden  values:  uses  values  that  are  explicitly 
identified in the DDK documentation as incorrect. 
Out  of  bounds  value:  parameters  that  exceed  the 
expected range of values. 
Invalid  pointer 
assignment: 
invalid  memory 
locations. 
NULL  pointer  assignment:  NULL  value  passed  to  a 
pointer parameter. 
Related function not called: this fault is produced by 
deliberately  not  calling  a  setup  function,  contrarily 
to what is defined in the DDK documentation. 
2.3  Expected Failure Modes 
The list displayed in Table 4 represents the possible 
scenarios that are expected to occur after a DD injects a 
fault into the OS. Initially we started with a much larger 
list  of  failure  modes,  which  was  derived  from  various 
sources,  such  as  the  available  works  in  the  literature 
and  expert  opinion  from  people 
that  administer 
Windows  systems.  However,  as 
the  experiences 
progressed, we decided to reduce substantially this list 
because several of the original failure modes were not 
observed in practice.  
Generally  speaking  there  are  two  major  possible 
outcome scenarios:  either the faulty input produces an 
error  (e.g.,  a  crash)  or  it  is  handled  in  some  manner. 
Since  the  fault  handling  mechanisms  can  also  have 
implementation  problems,  the  FM1  failure  mode  was 
divided  in  three  subcategories.  In  order  to  determine 
which subcategory applies to  a  given  experiment,  the 
ID 
FM1 
Table 4: Expected failure modes. 
Description 
No  problems  are  detected 
execution. 
in 
the  system 
FM2  The applications or even the whole system hangs. 
The  system  crashes  and  then  reboots;  the  file 
system  is  checked  and  NO  corrupted  files  are 
found. 
FM3 
FM4  Same as FM3, but there are corrupted files. 
DD verifies the correctness of the return value (if it was 
different  from  void)  and  output  parameters  of  the 
function. 
Returns  ERROR  (RErr):  The  return  value  from  the 
function  call  indicates  that  an  error  was  detected 
possibly due to invalid parameters. This means that 
the  bad  input  was  detected  and  was  handled 
properly. 
Returns  OK  (ROk):  The  return  value  of  the  call 
indicates  a  successful  execution.  This  category 
includes two cases: even with some erroneous input, 
the  function  executed  correctly  or  did  not  run  but 
returned  OK;  all  input  was  correct,  for  instance 
because  only  good  parameter  values  were  utilized 
or 
the  random  parameters  ended  up  having 
acceptable values. 
Invalid  return  value  (RInv):  Some  times  several 
values are used to indicate a successful execution (a 
calculation  result)  or  an  error  (reason  of  failure). 
When  the  return  value  is  outside  the  range  of 
possible output values (at least from what is said in 
the DDK documentation), this means that either the 
documentation or the function implementation has a 
problem.  
Whenever  crash  occurs,  Windows  generates  a 
minidump  file  that  describes  the  execution  context  of 
the system when the failure took place. The analysis of 
this file is very important because it allows developers 