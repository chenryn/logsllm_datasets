top of the stack
subsequent return. At the next return instruction, cor-
responding to the return from the method that called the
vulnerable method, the actual return address is one
element up the stack from the location that will be used.
It is very likely that the element on the stack interpreted
as the
return address will be an illegal memory
reference. Even when the memory reference is legal, it
is unlikely to jump to a location that corresponds to the
beginning of a valid instruction.
So, the return attack can only be used effectively for
vulnerabilities in which observable server activity (such
as a message back to the attack client) occurs between
the guessed return and the first instruction that would
cause the server to crash (which at the latest, occurs at
the end of the called vulnerable routine, but often
occurs earlier). We suspect situations where the return
attack can be used are rare, but an attacker who is
fortunate enough to find such a vulnerability can use it
to break an ISR key very quickly.
2.3 Jump Attack
For vulnerabilities where the return attack cannot
succeed, we can use the jump attack instead. The
advantage of the jump attack is it can be used on any
vulnerability where normal behavior keeps a socket
open to the client. However, it requires guessing a
two-byte instruction,
instead of the one-byte return
instruction. Another disadvantage of the jump attack is
that it produces infinite loops on the server. This slows
down server processing for further attack attempts (and
may also be noticed by a system administrator). We
will present techniques for substantially reducing both
the number of guess attempts required and the number
of infinite loops created in Section 3.2.
The jump attack is depicted in Figure 2. As with the
return attack,
the jump attack overwrites the return
address with an address on the stack where a jump
instruction encrypted with the current guess is placed.
The injected instruction is a near jump (0xeb) instruc-
tion with an offset -2 (0xfe).
If the guess is correct it
local buffer
...
...
saved base pointer
saved return address
*
...
...
local buffer
encrypted return intruction
...
saved base pointer
overwritten return address
saved return address
...
top of the stack
top of the stack
local buffer
...
...
...
local buffer
short jump (0xeb)
offset (0xfe)
...
*
saved return address
overwritten return address
...
...
bottom of the stack (higher address)
bottom of the stack (higher address)
bottom of the stack (higher address)
bottom of the stack (higher address)
Normal Stack Layout
Stack Layout After Attack
Figure 1. Return attack.
Normal Stack Layout
Stack Layout After Attack
Figure 2.  Jump attack.
148
14th USENIX Security Symposium
USENIX Association
will jump back to itself, creating an infinite loop. The
attacker will see the socket open but
receive no
response. After a timeout has expired, the attacker
assumes the server is in an infinite loop. Usually, an
incorrect guess will cause the process handling the
request
to crash. This is detected by the attacker
because the socket is closed before the timeout expires.
2.4 Incremental Key Breaking
After
the attacker has
the first successful guess,
obtained the encryption key for one (return attack) or
two (jump attack) memory locations.
Since other
locations are encrypted with different key bits,
however, finding one or two key bytes is not enough to
inject effective malicious code.
The next step is to change the position of the guessed
key byte. For the return attack, we just advance to the
next position and repeat
the attack using the next
position as the return address. With the jump attack,
the attacker needs up to obtain the first two key bytes at
once, but can proceed in one byte at a time thereafter.
On the first attack, shown in the left side of Figure 3,
the positions base and base+1 of the attack string are
occupied by the jump instruction. On the second
attack, we attempt to guess the key at location baseâ€“1.
Since we already know the key for location base, we
can encode the offset value -2 at that location, and can
guess the key for the jump opcode with at most 28
attempts.
During the incremental phase of
the attack, we
decrement the return address placed on the stack for
each memory location we guess. At some point the last
byte of the address will be zero. This address cannot
be injected using a buffer overflow exploit, because it
will terminate the attack string before the other bytes
can be injected. To deal with this case we introduce an
extra jump placed in a position where we already know
the encryption key and whose address does not contain
a null byte. The return address will point to this jump,
which will then jump to the position for which we are
trying to guess the key.
When a repeated 32-bit randomization key is used (as
in [12]), the number of attempts required to acquire the
key using the straightforward attacks would be at most
1024 (4K28) for the return attack and 66,048 (216+2K28)
for the jump attack (extra attempts may be needed to
distinguish between correct guesses and false positives,
as explained in the next section). For ISR implementa-
tions, such as RISE [3], that do not use short repeated
keys the attacker may need to obtain many key bytes
...
base
base+1
short jump (0xeb)
offset (0xfe)
...
...
baseâˆ’1
short jump (0xeb)
offset (0xfe)
...
overwritten return address
overwritten return address
...
...
Next Byte
First Two Bytes
Figure 3.  Incremental jump attack.
before the malicious code can be injected. This cannot
be done realistically with the approach described here.
Section 3 describes techniques that can be used to make
incremental key breaking more efficient. Section 4
explains how many key bytes an attacker will need to
compromise to inject and propagate an effective worm.
3. Attack Details and Analysis
The main difficulty in getting the attack to work in
practice is that an incorrect guess may have the same
behavior as the correct guess. In order to determine the
key correctly, the attacker needs to be able to identify
the correct key byte from multiple guesses with the
same apparently correct server behavior. The next two
subsections explain how false positives can be elimina-
ted with the return and jump attacks respectively.
Section 3.3 describes an extended attack that can be
used to break large keys.
3.1 Return Attack
There are three possible reasons a return attack guess
could produce the apparently correct behavior:
1. The correct key was guessed and the injected
instruction decrypted to 0xc3. 
2. An incorrect key was guessed, but the injected
instruction decrypted to some other instruction
that produced the same observable behavior as a
near return.
3. The
injected instruction decrypted to an
instruction that did not cause the process to
crash, and some subsequently executed instruc-
tion behaved like a near return.
The first case will happen once in 256 guess attempts.
The most
There are several guesses that could produce the second
outcome.
likely is when the injected
instruction decrypts to the 3-byte near return and pop
instruction, 0xc2 imm16. The near return and pop has
the same behavior as the near return instruction, except
it will also pop the value of its operand bytes off the
stack. Hence, if the current stack height is less than the
USENIX Association
14th USENIX Security Symposium
149
decrypted value of the the next two bytes on the stack,
the observed behavior after a 0xc2 instruction may be
indistinguishable from the intended 0xc3 instruction.
In the worst case, the stack is high enough for all
values to be valid and we will have a false positive
corresponding to 0xc2 once every 256 guess attempts.  
There are two other types of instructions that can also
produce the apparently correct behavior: calls and
jumps.
In order to produce the near return behavior,
the 4-byte offset of the call or jump instruction must
jump to the return address. The probability of encoun-
tering such a false positive is extremely remote
(approximately 2-36). Thus, we ignore this case in our
analysis and implementation; this has not caused prob-
lems in our experiments.
Given that we observe the return behavior, we can
estimate the probability that
the correct mask was
guessed. We use ph to represent the probability an
arbitrarily long random sequence of bits will start with
a harmless instruction. We consider any instruction
that does not cause the execution to crash immediately
after executing it to be harmless (even though it may
alter the machine state in ways that cause subsequent
instruction to produce a crash).
Instruction lengths
vary, so determining whether a given injected byte is
harmless may depend on the subsequent bytes on the
stack. The value of ph depends on the current state of
the execution. Whether or not a given instruction
produces a crash depends on the executionâ€™s address
space, as well as the current values in registers and
memory.
We use pr to represent the probability a random se-
quence of bits on the stack exhibits the same behavior
as the near return instruction, thus capturing cases 1
and 2 above. As we have defined it, the harmless in-
structions include instructions that behave like the near
return. We use phnr = ph â€“ pr to denote the probability
random bits correspond to a harmless instruction that
does not behave like a near return. Then, we can
estimate the probability that a guess produces the
apparently correct behavior as:
Given that we observe the correct behavior for some
guess, the conditional probability that the guess was
actually correct is:
The actual values of ph and pr depend on the execution
state. For our test server application (described in
Section 5.1), we compute pr as 1/256 (probability of
guessing 0xc3) + 1/256 (probability of guessing 0xc2) K

 (fraction of immediate values that do not
cause a crash) = 0.00454.
In our experiments
(described in Section 5.3), we observed the apparently
correct behavior with probability 0.0073. The false
positive probability is 0.0034. From this, we estimate
ph = 0.43. Thus, 57% of the time an execution will
crash on the first random instruction inserted.
Eliminating False Positives
For each memory location for which we want to learn
the randomization key, a straightforward implementa-
tion guesses all 255 possibilities. We cannot guess the
mask 0xc3 using a string buffer overflow attack, since
this would require inserting a null byte. If none of the
255 attempts produce the return behavior, we conclude
that the actual mask is 0xc3.  
If more than one guess produces the apparently correct
behavior, we place a known harmless instruction at the
guessed position followed by a previously injected
guess that produced the return behavior at the next
stack position as shown in Figure 4.
If this attempt
does not exhibit the apparently correct behavior, we can
safely eliminate the guessed mask since we know the
injected byte did not decrypt to a harmless one-byte
instruction as expected. Note that we do not need to
know the exact mask for the next position, just a guess
we have previously learned produces
the return
behavior at that location. This approach allows us to
distinguish correct guesses from false positives at all
locations except for the bottom address (the first one
we guess since we are guessing in reverse order on the
stack). In cases where multiple guesses are possible for
the bottom location, we use its guessed mask only to
eliminate false positives in the other guesses, but do not
use that location to inject code.
Harmless instructions help us eliminate false positives
for two reasons. If the guess is correct they have known
behavior; otherwise,
to either a
harmful instruction or to an instruction with a different
they may decrypt
...
harmless instruction
near return (0xc3)
...
overwritten return address
...
Figure 4.  Eliminating false positives.
150
14th USENIX Security Symposium
USENIX Association
it
size that will alter the subsequent instructions. In the
second case,
is possible to still produce the
apparently correct behavior when the mask guess is
incorrect. Hence, we learn conclusively when a mask
is incorrect, but still cannot be sure the guess is correct
just because it exhibits the correct behavior.
the guessed harmless
The number of useful harmless one-byte instructions is
limited by the density of x86 instruction set. If there are
groups of harmless instructions with similar opcodes, it
is hard to differentiate between them. Harmless
instructions are only useful if an incorrect mask guess
encrypts
instruction to an
instruction that causes a crash. For example, if we use
as harmless instructions a group of similar instructions
such as clear carry flag (0xf8), clear direction (0xfc),
complement carry flag (0xf5), set carry flag (0xf9), set
direction flag (0xfd), the number of masks eliminated is
in most of the cases is the same as if we had use only
one of
these instructions. Our attack uses three
disparate one-byte harmless instructions: nop (0x90),
clear direction (0xfc), and increment ecx register
(0x42).  
For a given set of possible masks it would be possible
to determine a minimal set of distinguishing harmless
instructions, however this would add substantially to
the length and complexity of the attack code.
Instead,
in the rare situations where the three selected one-byte
harmless instructions are unable to eliminate all but one
of
the guessed masks, we use harmless two-byte
instructions, of which there are many. This approach
works for all
the next-to-bottom
address. In the rare situations when it is not possible to
determine the correct mask for this location, we can
simply start the injected attack code further up the
stack.  
locations except
Using harmless one-byte and two-byte instructions we
are able to reduce the number of apparently correct
masks to at most two. We cannot handle the case
where the first instruction decrypts to a near return and
pop instruction (0xc2 imm16) using this elimination
process described because the near return (0xc3) and
near return and pop (0xc2) opcodes differ by only their
final bit. There is no harmless x86 instruction we can
use to reliably distinguish them. When a harmless
instruction is encrypted with an incorrect mask and
decrypted with the correct masks, the opcode of the
instruction executed differs only by one bit from the
guessed harmless instruction.
this
instruction will be a harmless instruction too.
is likely that
It
from the stack.
To distinguish between the two forms of near return we
place the bytes 0xc2 0xff 0xff on the stack using the
guessed masks. This is a near return which pops
65,535 bytes
For many target
vulnerabilities (including our test server), this is enough
to generate a crash. To use this approach, we need to
already know the next two masks on the stack. This is
not a problem because we start elimination from the
bottom of the stack. The first two times we apply
elimination with 0xc2 we have to execute an attempt for
each combination of possible masks of the next two
positions. After that, we know the correct masks for