    ``` screen
    # fapolicyd-cli --update
    ```
4.  重启 `fapolicyd`{.literal} ：
    ``` screen
    # systemctl restart fapolicyd
    ```
:::
::: orderedlist
**验证**
1.  检查您的自定义二进制文件现在是否可以执行，例如：
    ``` screen
    $ /tmp/ls
    ls
    ```
:::
::: itemizedlist
**其它资源**
-   `fapolicyd.trust(5)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#proc_adding-custom-allow-and-deny-rules-for-fapolicyd_assembly_blocking-and-allowing-applications-using-fapolicyd}为 fapolicyd 添加自定义 allow 和 deny 规则 {.title}
:::
`fapolicyd`{.literal}
包中的默认规则集不影响系统功能。对于自定义场景，例如将二进制文件和脚本存储在非标准目录中，或者不使用
`yum`{.literal} 或 `rpm`{.literal}
安装程序来添加应用程序，您必须修改现有的规则或添加新规则。以下步骤演示了如何添加新的规则以允许自定义二进制文件。
::: itemizedlist
**先决条件**
-   `fapolicyd`{.literal} 框架部署在您的系统上。
:::
::: orderedlist
**流程**
1.  将自定义二进制文件复制到所需的目录中，例如：
    ``` screen
    $ cp /bin/ls /tmp
    $ /tmp/ls
    bash: /tmp/ls: Operation not permitted
    ```
2.  停止 `fapolicyd`{.literal} 服务：
    ``` screen
    # systemctl stop fapolicyd
    ```
3.  使用 debug 模式来识别相应的规则。因为 `fapolicyd --debug`{.literal}
    命令的输出非常详细，且您只能通过按
    [**Ctrl**]{.keycap}+[**C**]{.keycap}
    或终止相应的进程来停止它，因此请将错误输出重定向到文件中：
    ``` screen
    # fapolicyd --debug 2> fapolicy.output &
    [1] 51341
    ```
    或者，您可以在另一个终端中运行 `fapolicyd`{.literal} debug 模式。
4.  重复不允许的命令：
    ``` screen
    $ /tmp/ls
    bash: /tmp/ls: Operation not permitted
    ```
5.  通过在前台恢复并按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 来停止 debug
    模式：
    ``` screen
    # fg
    fapolicyd --debug
    ^Cshutting down...
    Inter-thread max queue depth 1
    Allowed accesses: 2
    Denied accesses: 1
    [...]
    ```
    或者，杀掉 `fapolicyd`{.literal} debug 模式的进程：
    ``` screen
    # kill 51341
    ```
6.  查找拒绝执行应用程序的规则：
    ``` screen
    # cat fapolicy.output
    [...]
    rule:9 dec=deny_audit perm=execute auid=1000 pid=51362 exe=/usr/bin/bash : file=/tmp/ls ftype=application/x-executable
    [...]
    ```
7.  在 `/etc/fapolicyd/fapolicyd.rules`{.literal}
    文件中拒绝执行自定义二进制文件的规则[*前*]{.emphasis}添加一个新的
    `allow`{.literal} 规则。上一命令的输出表明该规则是本例中的规则编号
    [*9*]{.emphasis} ：
    ``` screen
    allow perm=execute exe=/usr/bin/bash trust=1 : path=/tmp/ls ftype=application/x-executable trust=0
    ```
    另外，您可以通过在 `/etc/fapolicyd/fapolicyd.rules`{.literal}
    文件中添加以下规则来允许执行 `/tmp`{.literal}
    目录中的所有二进制文件：
    ``` screen
    allow perm=execute exe=/usr/bin/bash trust=1 : dir=/tmp/ all trust=0
    ```
8.  要防止自定义二进制文件内容的更改，请使用 SHA-256
    校验和定义所需的规则：
    ``` screen
    $ sha256sum /tmp/ls
    780b75c90b2d41ea41679fcb358c892b1251b68d1927c80fbc0d9d148b25e836  ls
    ```
    将规则改为以下定义：
    ``` screen
    allow perm=execute exe=/usr/bin/bash trust=1 : sha256hash=780b75c90b2d41ea41679fcb358c892b1251b68d1927c80fbc0d9d148b25e836
    ```
9.  启动 `fapolicyd`{.literal} 服务：
    ``` screen
    # systemctl start fapolicyd
    ```
:::
::: orderedlist
**验证**
1.  检查您的自定义二进制文件现在是否可以执行，例如：
    ``` screen
    $ /tmp/ls
    ls
    ```
:::
::: itemizedlist
**其它资源**
-   `fapolicyd.trust(5)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#proc_enabling-fapolicyd-integrity-checks_assembly_blocking-and-allowing-applications-using-fapolicyd}启用 fapolicyd 完整性检查 {.title}
:::
默认情况下，`fapolicyd`{.literal} 不执行完整性检查。您可以配置
`fapolicyd`{.literal}，来通过比较文件大小或 SHA-256
哈希执行完整性检查。您还可以使用完整性度量架构(IMA)子系统来设置完整性检查。
::: itemizedlist
**先决条件**
-   `fapolicyd`{.literal} 框架部署在您的系统上。
:::
::: orderedlist
**流程**
1.  在您选择的文本编辑器中打开 `/etc/fapolicyd/fapolicyd.conf`{.literal}
    文件，例如：
    ``` screen
    # vi /etc/fapolicyd/fapolicyd.conf
    ```
2.  将 `integrity`{.literal} 选项的值从 `none`{.literal} 改为
    `sha256`{.literal}，保存文件并退出编辑器：
    ``` screen
    integrity = sha256
    ```
3.  重启 `fapolicyd`{.literal} 服务：
    ``` screen
    # systemctl restart fapolicyd
    ```
:::
::: orderedlist
**验证**
1.  备份用于验证的文件：
    ``` screen
    # cp /bin/more /bin/more.bak
    ```
2.  更改 `/bin/more`{.literal} 二进制文件的内容：
    ``` screen
    # cat /bin/less > /bin/more
    ```
3.  以普通用户身份使用更改的二进制文件：
    ``` screen
    # su example.user
    $ /bin/more /etc/redhat-release
    bash: /bin/more: Operation not permitted
    ```
4.  恢复更改：
    ``` screen
    # mv -f /bin/more.bak /bin/more
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_blocking-and-allowing-applications-using-fapolicyd_security-hardening.html#ref_troubleshooting-problems-related-to-fapolicyd_assembly_blocking-and-allowing-applications-using-fapolicyd}故障排除与 fapolicyd 相关的问题 {.title}
:::
下面的部分提供了 `fapolicyd`{.literal}
应用程序框架的基本故障排除技巧，以及使用 `rpm`{.literal}
命令添加应用程序的指导。
::: itemizedlist
**使用 `rpm`{.literal} 安装应用程序**
-   如果使用 `rpm`{.literal} 命令安装应用程序，则必须手动刷新
    `fapolicyd`{.literal} RPM 数据库：
    ::: orderedlist
    1.  安装 [*应用程序*]{.emphasis} ：
        ``` screen
        # rpm -i application.rpm
        ```
    2.  刷新数据库：
        ``` screen
        # fapolicyd-cli --update
        ```
        如果您跳过这一步，系统可能会被冻结，必须重启。
    :::
:::
::: itemizedlist
**服务状态**
-   如果 `fapolicyd`{.literal} 无法正常工作，请检查服务状态：
    ``` screen
    # systemctl status fapolicyd
    ```
:::
::: itemizedlist
**Debug 模式**
-   Debug 模式提供关于匹配规则、数据库状态等的详细信息。将
    `fapolicyd`{.literal} 切换到 debug 模式：
    ::: orderedlist
    1.  停止 `fapolicyd`{.literal} 服务：
        ``` screen
        # systemctl stop fapolicyd
        ```
    2.  使用 debug 模式来识别相应的规则：
        ``` screen
        # fapolicyd --debug
        ```
        因为 `fapolicyd --debug`{.literal}
        命令的输出非常详细，所以您可以将错误输出重定向到文件中：
        ``` screen
        # fapolicyd --debug 2> fapolicy.output
        ```
    :::
:::
::: itemizedlist
**删除 `fapolicyd`{.literal} 数据库**
-   要解决与 `fapolicyd`{.literal}
    数据库相关的问题，请尝试删除数据库文件：
    ``` screen
    # systemctl stop fapolicyd
    # fapolicyd-cli --delete-db
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    不要删除 `/var/lib/fapolicyd/`{.literal} 目录。`fapolicyd`{.literal}
    框架只自动恢复这个目录下的数据库文件。
    :::
:::