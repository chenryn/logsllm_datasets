到这里可知，客户端调用`LocateRegistry#getRegistry`方法获取到的对象是`RegistryImpl_Stub`。
* * *
接下来跟进客户端的第二行代码，即`RegistryImpl_Stub#lookup`：
在`super.ref.newCall( this, operations, 2, ...);`处会发起前期的握手包（不是tcp的），
然后在`super.ref.invoke(var2);`处发送`lookup`的数据。
在接下来的`var23=(Remote)var6.readObject()`获取到服务端发送的代理对象。
这里的`super.ref`就是一个`unicastRef`对象。
#### super.ref.newCall()
这里先跟进`super.ref.newCall`：
再跟进`this.ref.getChannel().newConnection()`，AKA`TCPChannel#newConnection`：
跟进`this.createConnection()`，这部分代码有些长，分两部分列出：
这里的`var3.writeByte(75)`就是去构造了客户端发送的第一个握手包，在注册端的分析中我们知道它其实表示`StreamProtocol`：
至于if块中的`var3.writeByte(76)`，应该是在socket不是Reusable时，采用将握手包和实际数据合在一起的方式（可以看到它没有`var3.flush()`）。
接着`var3.writeByte(75)`看它之后的代码：
这里是在读取注册端回复的第一个数据包。长这样，发现它把我们的host和port又发给了我们：
从`var3.writeUTF`开始，客户端发送第二个数据包：
到这里为止，客户端发送了两次数据包，处理了注册端的第一个回复。
回到`super.ref.newCall`：
接下来进入`var7 = new StreamRemoteCall(var6, this.ref.getObjID(), var3, var4);`：
这里其实是在构造实际的`lookup`包了。但是还没有写入对象，只是将一些信息写到了BlockData中。
到这里为止，`super.ref.newCall()`的功能基本分析完毕。该回到`RegistryImpl_Stub#lookup`分析下个方法`super.ref.invoke`。在此之前，需要看到，在`lookup`中，它先调用了`var3.writeObject(var1)`将查询的字符串写入了缓冲区：
#### super.ref.invoke()
跟进`UnicastRef#invoke`：
跟进`StreamRemoteCall#executeCall()`：
首先在`this.releaseOutputStream()`中将刚才的写的数据（主要是lookup的字符串）发送了出去：
到这里，客户端发送了第三个数据包。
客户端发送这个数据包之后，是期望得到注册端的回复的，因为我们希望通过`lookup`获取到一个对象，然后基于这个对象来操纵远程对象。
我们看一下回复数据包长啥样：
不太清晰，用`SerializationDumper.jar`打开看下：
可以看到，返回的对象是一个继承了`java.rmi.Remote`和`org.las.remote.IRemoteHelloWorld`（自定义）接口的代理对象（`TC_PROXYCLASSDESC`），同时也需要注意，在`TC_BLOCKDATA`中也有东西。后面读的一些内容就是从这里拿的。
接着`releaseOutputStream`的代码就开始对注册端回复的这个数据包进行处理。
首先验证了第一个字节是否为`0x51`，接着是读取存储在BlockData中的一个字节和UID。
这里我们回过头看一下注册端最后`RegistryImpl_skel#dispatch`的部分，因为我们其实并没有分析它在调用了api函数后是怎样发送数据包的。我们就以`lookup`为例：
首先关注这个`var2.getResultStream(true)`，在这个函数里会写入两个字节和UID。
接下来将lookup查询到的`var8`写入流中。
然后回到调用`RegistryImpl_skel#dispatch`的上级方法`UnicastServerRef#oldDispatch`：
这里调用`releaseInputStream`发送了缓冲的数据。
回过头来，刚才分析到`StreamRemoteCall#executeCall`读取了BLOCK_DATA中的数据，但还没有读取关键的代理对象，继续看该方法的代码：
这里之前读到的`var1`其实是1，所以我们`return`到上一级。不过也能从这里看到，当读到的`var2`是2时，是会在这里抛出异常的。
#### var6.readObject()
重新回到`RegistryImpl_Stub#lookup`，这里通过了`var23 =
(Remote)var6.readObject()`来获取到`lookup`查询到的代理对象。
最后把这个`var23`返回，这就是`lookup`的全过程了：
至于finally中的`super.ref.done`大致就是将刚才的流释放的操作。
此时的堆栈很简洁：
### 总结
  1. 以客户端定位到注册端并调用`lookup`为例，客户端与注册端的通信流程如下：
    * 客户端发送第一个握手包，注册端回复；
    * 客户端发送第二个包含ip和端口的包，注册端并不回复；
    * 客户端发送`lookup`数据包，其内容是字符串的序列化。注册端返回一个序列化的代理对象。
  2. 注册端底层使用`UnicastServerRef`对象发送请求。与之相对的，客户端使用`UnicastRef`。
  3. 注册端上层获取的对象是`RegistryImpl`，而客户端上层获取的是`RegistryImpl_Stub`。
## 4\. 客户端—服务端
编写服务端前首先得提供一个接口和一个远程对象。
我自己编写了一个远程调用接口：
    package org.las.remote;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    public interface IRemoteHelloWorld extends Remote {
        public Object helloWorld(Object word) throws RemoteException;
    }
一个远程对象：
    package org.las.remote;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class RemoteHelloWorldImpl extends UnicastRemoteObject implements IRemoteHelloWorld {
        public RemoteHelloWorldImpl() throws RemoteException{
        }
        public Object helloWorld(Object word) throws RemoteException {
            System.out.println("Hello world..");
            return "las";
        }
    }
我的客户端代码：
    import org.las.remote.IRemoteHelloWorld;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class RMIServer {
        public static void main(String[] args) throws Exception{
            Registry registry = LocateRegistry.getRegistry("127.0.0.1", 1099);
            IRemoteHelloWorld helloWorld = (IRemoteHelloWorld) registry.lookup("Hello");
            helloWorld.helloWorld("las");
        }
    }
在分析客户端和服务端之前，我想先贴出两者之间产生的流量。
红框框住的地方，是客户端在调用远程方法间隙，执行的有关`DGC`的操作。同时也可以看到，客户端发送的数据包有些太多了。除去握手包，注意第24和26两个包，根本不是我自己发的（远程调用的数据包是32、34号）而且数据量比较大。通过将24、26的数据反序列化后会发现，它们也是和`DGC`有关的。
关于DGC，简单提一下，全称是`distribute garbage
collection`。其实它的存在也很合理，当客户端获取远程对象时，服务端需要创建一个对象，以供客户端来调用其上的方法；但是这些对象也并不是永久存在的，它们也需要垃圾收集，这就引出了`DGC`的概念。但是具体是如何实现的我不太清楚，这也是我分析RMI源码的一个原因，希望接下来的分析能让我进一步理解它是如何实现的。
这一次我们先从客户端开始分析。
在此之前，又先抛出另外一个问题。
### 奇怪的UnicastRemoteObject
我们知道，一个远程对象，要么得继承`UnicastRemoteObject`类，要么得通过`UnicastRemoteObject#exportObject`进行转换：
    public class RMIServer {
        public static void main(String[] args) throws Exception{
            System.setSecurityManager(null);
            IRemoteHelloWorld remoteHelloWorld = new RemoteHelloWorldImpl();
            IRemoteHelloWorld remoteHelloWorld2 = new RemoteHelloWorldImpl2();
            Object obj2 = UnicastRemoteObject.exportObject(remoteHelloWorld2,0);
            System.out.println(remoteHelloWorld);
            System.out.println(obj2);
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.bind("Hello", remoteHelloWorld);
            registry.bind("Hello2", (Remote) obj2);
            System.out.println("[*] RMI Server started...");
        }
    }
这里我们将两个对象都打印出来看看：
后者是一个代理对象，前者还是正常的`RemoteHelloWorldImpl`。
但是在客户端看看呢：
    public class RMIClient {
        public static void main(String[] args) throws Exception{
            Registry registry = LocateRegistry.getRegistry("127.0.0.1", 1099);
            IRemoteHelloWorld helloWorld = (IRemoteHelloWorld) registry.lookup("Hello");
            IRemoteHelloWorld helloWorld2 = (IRemoteHelloWorld) registry.lookup("Hello2");
            System.out.println(helloWorld);
            System.out.println(helloWorld2);
        }
    }
打印结果：
都是代理对象！
这就奇怪了，在分析 **客户端—注册端**
时，我们讨论了在调用`registry.bind`时只是单纯将对象放到`registryImpl`的成员变量`bindings`中：
在客户端`lookup`时，注册端也只是从这个`bindings`里将对象取出，并调用`writeObject`：
所以问题只可能出在`writeObject`方法中。
我们跟进`var9.writeObject`方法，在下面这个地方发现了敏感的函数`replaceObject`，在进入前我们是`RemoteHelloWorldImpl`，出来时就是代理对象了：
此时的调用堆栈：
进入`MarshalOutputStream#replaceObject`瞧瞧：
这里的`ObjectTable`看着怪熟悉的。它在哪个地方似乎出现过。
其实是在`TCPTransport#exportObject`中：
我们之前只跟进了`this.listen()`，但是在它下面的`super.exportObject(var1)`里：
这里！它将Target放到了`ObjectTable`中。
但是到目前为止，我还有两个疑问：