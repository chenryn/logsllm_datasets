Scrutiny on the bug bounty 
(pun hall of fame plz)
Nathaniel Wakelam & Shubham Shah
Who are we?
Nathaniel Wakelam (naﬀy)
Application Security 
Consultant @ Trustwave 
Twitter: @nnwakelam
Email: PI:EMAIL
Shubham Shah (shubs)
Senior Security Analyst @ 
Bishop Fox
Twitter: @infosec_au
Email: PI:EMAIL
We’ve been participating in bug bounties for around three years now.
Who are we?
If anyone remembers Captain Underpants, this is essentially us:
The usual rundown
- What are bug bounties?
- Why did we start participating?
- What are we covering today?
Our core methodology: Large scale asset identiﬁcation
●
What matters most is that you ﬁnd the assets that have bugs before other hunters 
do. 
●
Think of it as oﬀensive incident response. 
●
We watch a company closely and as soon as they put new assets or content up, we 
go after them.
●
Invest in multiple bounties that you trust and ensure that their entire scope is 
covered.
But… how?  -- #1 Elasticsearch + Masscan (scantastic)
●
https://github.com/maK-/scantastic-tool - created by a cool Irish friend of ours
○
Input a list of IP ranges on a network
○
Scans every range via Masscan for ports that you deﬁne
○
Performs content discovery (ﬁle/folder bruteforcing) on every discovered 
asset
○
Imports the results into Elasticsearch via Logstash
○
Let’s you visually search and discover content on large IP ranges
●
Pros: Allows you to minimize brute forcing, allows you to ﬁnd cool stuﬀ without 
really trying
●
Cons: Gets you permanently temporarily banned from Yahoo’s bug bounty 
program
But… how?  -- #2 DNS pattern identiﬁcation (AltDNS)
●
From analyzing gathered DNS data for numerous bounty programs, we identiﬁed 
diﬀerent patterns used by organizations to classify their subdomain assets.
●
For example, for a private program on HackerOne, we were ﬁnding subdomains 
named like the following:
○
privacy-staging.corporatedomain.com
○
privacy.staging.corporatedomain.com
○
privacystaging.corporatedomain.com
○
stagingprivacy.corporatedomain.com
●
Even though we’d identify some of these subdomains through 
enumeration/bruteforcing - we’d miss quite a few QA/Dev/Staging instances.
But… how?  -- #2 DNS pattern identiﬁcation (AltDNS)
●
So… after some back and forth, we created a simple tool called AltDNS..
●
Provide a list of known subdomains and a list of common QA/Dev words, AltDNS 
will output a list of potential subdomains we may have missed based on the 
patterns we identiﬁed.
●
AltDNS takes the list of known subdomains and outputs a list where the common 
QA/Dev words have been placed as per common patterns seen in subdomains.
#2 DNS Pattern Identiﬁcation Results (AltDNS)
●
We provided a list of ~900 subdomains 
belonging to an organization.
●
We provided a list of roughly ~130 words 
that were commonly found in DNS records 
for staging/QA/dev instances.
●
Passed both of these lists into AltDNS, which 
then altered, permuted and modiﬁed our 
original list of subdomains with the common 
words to produce a total list of “potential” 
subdomains.
●
AltDNS generated a total of 5264017 unique 
new “potential” subdomains to check for.
●
After resolving the 5264017 unique 
new “potential” subdomains, we were 
able to ﬁnd ~1400 new subdomains.
●
That’s…. A lot of new assets….
●
Github:
https://github.com/infosec-au/altdns
# ./altdns.py -i data/subdomains.txt -o data_output -w words.txt -r -s results_output.txt
#2 DNS Pattern Identiﬁcation Results (Altdns)
#3 General Pattern Identiﬁcation
When discovering assets, it is important to look for trends between hosts, such as 
unique hosts (CDN/serving host) or unique information disclosures, you can use to 
help you ﬁngerprint hosts. 
#4 Passive identiﬁcation and alerts (Assetnote)
●
Finding security issues is one part of the bug bounty spectrum, another major part 
is being the ﬁrst person to ﬁnd them.
●
Duplicate issues == time wasted and no money gained. Let’s reduce that.
●
Wouldn’t it be great if we knew about an asset (subdomain or host) as soon as it 
was put online?
●
You enter in a domain to monitor, Assetnote keeps track of the domain and runs 
daily passive scans. If new domains are found, a push notiﬁcation is sent to you.
#4 Passive identiﬁcation and alerts (Assetnote)
●
E.g. Threatcrowd’s passive data store (free for everyone to use):
○
http://threatcrowd.org/searchApi/v2/domain/report/?domain=uber.com
○
Returns a JSON output with a list of identiﬁed subdomains, to date
●
Script created to scrape this API endpoint
●
Script is ran daily via Cron for every 
domain “monitored” through assetnote
●
A push notiﬁcation sent to you upon 
discovering any new subdomain
#4 Passive identiﬁcation and alerts (Assetnote)
●
Github: https://github.com/infosec-au/assetnote
#4 Passive identiﬁcation and alerts (Assetnote)
●
Github: https://github.com/infosec-au/assetnote
#4 Passive identiﬁcation and alerts (Asset Note)
●
Github: https://github.com/infosec-au/assetnote
●
Total of ~780 assets discovered through passive 
analysis, sent to me as a push notiﬁcation.
●
Have woken up numerous times when asleep so 
that I can hack on assets before others get to them.
●
You’re basically on call. 
You get a buzz on your phone.
You get out of bed.
You start hacking.
You report the found bugs.
You get paid.
#4 Passive identiﬁcation and alerts (Assetnote)
Now that we’ve covered methodology.... 
Let’s see some bugs
1.
~200M user details access via one cookie ($13.37k)
2.
Global lookup of all Yahoo! users ($11.7k)
3.
~110k user details access via guessing parameters ($7k)
4.
Corporate wireless metadata on every Yahoo employee ($250)
5.
Accessing internal AWS infrastructure via a limited SSRF (payment to be decided)
6.
Subdomain hijack x 2 ($19.5k) in a phone call
1. ~200M user details access… by modifying a cookie
GET request to view the current players details:
GET /player? HTTP/1.1
Host: events.privatebugbounty.com
Accept: application/json, text/javascript, */*; q=0.01
Cookie: __cfduid=d40c20fd5214deef9c93633e8ea1836b61444993920; 
ping_session_id=fea5643f-e023-4c5a-880f-c881fd168792; 
N_TOKEN=GluZ3JheSIsInZvdWNoaW5nX2tleV9pZCI6IjkwMzQ3NTJiMmI0NTYwNDR
hZTg3ZjI1OTgyZGFkMDdkIiwic2lnbmF0dXJlIjoibHZMcjRBMFoxSkNqVDZJNkJtM
ndaMFJjcVl6MkhOZS9iR3VrNDQwY0dNbFI2cjJUNVQ4TCtmMzZwNTVNR0VEYWEwUWd
UaEJEQ0RXeWN1VzN1dGNESEV0NFZMRjFaRFBZWmY3bTV2Nkp6ZUw5RGxLZTFVSDBoT
StkZm8vZzI5dzNtTWhON0pXTnV0RkkvUzFOc1c0QXFWSFZXbTZPOEt5a2J3bk9hR1h
zWWVzPSJ9; N_ACCT=shubs; N_ID=200258342; N_LANG=en_US;
1. ~200M user details access… by modifying a cookie
HTTP response returned:
"user":{"name":"shubs","email":"PI:EMAIL","email_validated":false,"retrieval_t
ime":"2015-12-11T12:57:36.642Z","s_id":580327,"tier":null,"division":null}
1. ~200M user details access… by modifying a cookie
GET request to view the current players details:
GET /player? HTTP/1.1
Host: events.privatebugbounty.com
Accept: application/json, text/javascript, */*; q=0.01
Cookie: __cfduid=d40c20fd5214deef9c93633e8ea1836b61444993920; 
ping_session_id=fea5643f-e023-4c5a-880f-c881fd168792; 
N_TOKEN=GluZ3JheSIsInZvdWNoaW5nX2tleV9pZCI6IjkwMzQ3NTJiMmI0NTYwNDR
hZTg3ZjI1OTgyZGFkMDdkIiwic2lnbmF0dXJlIjoibHZMcjRBMFoxSkNqVDZJNkJtM
ndaMFJjcVl6MkhOZS9iR3VrNDQwY0dNbFI2cjJUNVQ4TCtmMzZwNTVNR0VEYWEwUWd
UaEJEQ0RXeWN1VzN1dGNESEV0NFZMRjFaRFBZWmY3bTV2Nkp6ZUw5RGxLZTFVSDBoT
StkZm8vZzI5dzNtTWhON0pXTnV0RkkvUzFOc1c0QXFWSFZXbTZPOEt5a2J3bk9hR1h
zWWVzPSJ9; N_ACCT=shubs; N_ID=200258200;
N_LANG=en_US;
1. ~200M user details access… by modifying a cookie
HTTP response returned:
"user":{"name":"SomeRandomPersonsDetails","email":"PI:EMAIL
m","email_validated":false,"retrieval_time":"2015-12-11T12:58:20.642Z","s_
id":580201,"tier":null,"division":null}
1. ~200M user details access… by modifying a cookie
$13,337.37 payout
2.  PROFESSIONAL HACKER TOOL NMAP
Was hanging out on a Friday and couldn’t be bothered actually setting up anything so I 
just ran NMAP over some bullshit and went to the bar. Grabbed some Yahoo /24’s 
from Hurricane Electric and just ran them with some NSE scripts.
Only one that came out that had any content that was of interest was /index.php on 
apiexplorer.contacts.gq1.yahoo.com. (api explorer, lol).
...lo and behold... 
2.  PROFESSIONAL HACKER TOOL NMAP
What the f*** is this?
That was my ﬁrst professional assessment.
Quickly realized that it was a friendly frontend to communicate with Yahoo APIs 
internally that conveniently had global auth tokens hardcoded. It supported 
functionality like calling APIs in diﬀerent zones via inbuilt proxy support (which was 
also full control Server Side Request Forgery). 
In addition to gaining the ability to look up any Yahoo user via email, name, or phone 
(and also viewing particulars associated with their accounts) I believe that it was 
capable of more, but I didn’t verify that as I didn’t want to get banned again. I do have 
a photo of it in action though...
3.  Guessing endpoints and parameters to win $7k
●
Receive a notiﬁcation about a new asset ->
Reverse engineer the android app ->
Dynamic analysis via Genymotion ->
Observe API endpoints once auth’d ->
Guess API endpoints??? ->
Win $7.5k?
Leads to an Android application
API endpoints located at 
/api/v1.1/
/api/v1.1/users?page=1  
???
3.  Guessing endpoints and parameters to win 7k
4.  Corporate wireless metadata of every Yahoo employee 
1.
Create an “application” via https://create.privatebounty.com/create-app
2.
Specify a “project URL” - we specify “https://shubh.am/” 
3.
Verify the URL via hitting https://create.privatebounty.com/verify-url
5.  Accessing internal AWS infrastructure via a limited SSRF
●
The application attempts to verify you own the URL speciﬁed in the “project 
URL” ﬁeld by checking for a ﬁle called “app.txt” in the root directory of the 
website speciﬁed.
●
IF the response code of “https://shubh.am/app.txt” is NOT a 200, the full HTTP 
response body of “https://shubh.am/app.txt”  is returned on 
https://create.privatebounty.com/verify-url. 
5.  Accessing internal AWS infrastructure via a limited SSRF
●
What if we forced “https://shubh.am/app.txt” to be a 301 redirect to an 
arbitrary URL?
5.  Accessing internal AWS infrastructure via a limited SSRF
●
Response from https://create.privatebounty.com/verify-url:
5.  Accessing internal AWS infrastructure via a limited SSRF
●
Sample data obtained from DNS bruteforcing *.privatebounty.com and 
through altdns:
5.  Accessing internal AWS infrastructure via a limited SSRF
●
What if we forced “https://shubh.am/app.txt” to be a 301 redirect to an 
internal AWS elasticsearch host with an invalid elasticsearch query?
5.  Accessing internal AWS infrastructure via a limited SSRF
●
What if we forced “https://shubh.am/app.txt” to be a 301 redirect to an 
internal AWS elasticsearch host with an invalid elasticsearch query?
5.  Accessing internal AWS infrastructure via a limited SSRF
●
Due to the AWS VPC that the host https://create.privatebugbounty.com was in, we 
could access all other internal AWS hosts within that same VPC.
●
A somewhat limited SSRF turned into a very useful one.
●
Default conﬁgurations for Elasticsearch instances have no authentication required.
●
Would have allowed for us to exﬁltrate data from internal Elasticsearch instances 
via the REST api, through the SSRF.
●
Can also trivially shutdown Elasticsearch instances via visiting 
https://elasticsearchinstance:9200/_shutdown
●
Chaos and madness - over 150 internal hosts accessible through this SSRF
5.  Accessing internal AWS infrastructure via a limited SSRF
6. Subdomain hijacking with a phone call
Using Altdns I identiﬁed two domains of interest that were being used for 
development. I added them to my domain list and forgot about them, about a month 
later they went oﬄine and I wondered if they were still in use (the records were still 
there).
100 USD to make $15k USD (7.5k x 2).. Right on! 
A quick phone call later … 
Takeaways
●
Think about how these exposed resources can allow for an attacker to move 
laterally and/or could undermine security strategies that are in place already.
●
If it’s facing the external web or can be easily accessed from the internal network, 
you should assume everyone can access it.
●
Internal applications ARE problematic, just because it isn’t externally facing 
doesn’t mean it isn’t a problem.
●
If you have critical/dev/staging/test applications running on obscure subdomains, 
do not assume that we will not ﬁnd your obscure subdomain.
●
Internet wide scanning costs have been reduced to a $20 vps and anyone that can 
run a simple tool.
Questions?