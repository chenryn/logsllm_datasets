### WSL Fuzzing 结果

我们使用38个vCPU对WSL进行了为期四周的模糊测试。最终，我们成功构建了一个工作原型，并深入理解了Syzkaller的工作原理。尽管发现了四个DoS错误和一些死锁，但未能发现任何安全漏洞，这让我们有些失望。因此，我们决定转向真正的特权提升（PE）目标。

## 迈向真实目标

### Fuzzing WSL

Fuzzing WSL是理解Syzkaller在Windows环境中的一个良好起点。然而，我们现在希望回到一个真实的特权提升目标上——一个默认随Windows提供并可从各种沙箱访问的目标。

我们研究了Windows内核的攻击面，决定从Win32k入手。Win32k是Windows子系统的内核端，构成了操作系统的图形用户界面基础结构。由于可以从许多沙箱中访问它，Win32k成为本地特权提升（LPE）的常见目标。

Win32k包括两个主要子系统：
- 窗口管理器（也称为User）
- 图形设备接口（GDI）

它包含大约1200个系统调用，使其成为基于语法的fuzzer的理想目标。例如，CVE-2018-0744就是一个很好的例子。从Windows 10开始，win32k被拆分为多个驱动程序：win32k、win32kbase 和 win32kfull。

为了使Syzkaller适用于Win32k，我们需要进行以下调整：
- 将fuzzer和executor二进制文件编译到Windows
- 进行与操作系统相关的更改
- 向fuzzer公开Windows系统调用
- 使用MinGW进行交叉编译以方便开发

### Win32k 调整

我们首先从fuzzer源代码开始，添加了Windows的相关实现，如管道和共享内存。语法是fuzzer的关键部分，稍后我们将详细说明。

然后，我们使用MinGW将executor修复为可以交叉编译。我们还必须修复共享内存和管道，并禁用fork模式，因为它在Windows中不可用。

作为语法编译的一部分，syz-sysgen会生成一个头文件（syscalls.h），其中包含所有系统调用的名称和数字。对于Windows，我们选择了导出的系统调用封装和WinAPI（如CreateWindowExA和NtUserSetSystemMenu）。大多数系统调用封装都在**win32u.dll**和**gdi32.dll**中导出。为了将它们公开给executor二进制程序，我们使用[gendef](https://sourceforge.net/p/mingw-w64/wiki2/gendef/)从DLL中生成定义文件，然后使用mingw-dlltool生成库文件，最终将其链接到executor。

### 完整性检查

为了确保fuzzer能够复现旧漏洞，我们选择了一个已知漏洞（CVE-2018-0744）。我们添加了相关系统调用并运行fuzzer，但未能复现该漏洞。我们怀疑存在错误，于是编写了一个syz程序，并使用syz-execprog直接执行它。虽然系统调用成功执行，但机器并未崩溃。

经过进一步调查，我们发现fuzzer在会话0下运行，而会话0并不适合运行GUI应用程序。因此，我们将其更改为在会话1下以普通用户身份运行。随后，Syzkaller成功复现了该漏洞。

由此得出结论，必须通过模拟漏洞或复现旧漏洞来测试新代码。

### 稳定性检查

我们总共添加了15个API，并再次运行fuzzer。我们在win32kfull!_OpenClipboard中遇到了第一个崩溃，这是一个UAF引起的崩溃。但这个崩溃在其他机器上无法复现。经过调试，我们发现崩溃发生在条件块内，该条件块是否执行取决于ETW provider的标志：Win32kTraceLoggingLevel。我们报告了此崩溃并重新安装了Windows。

再次运行fuzzer时，我们发现了一个新的拒绝服务漏洞，出现在RegisterClassExA中。这激励了我们继续扩展fuzzer的覆盖范围。

## Win32k 中的语法

由于之前没有关于syscall fuzzing Win32k的公开研究，我们必须从头开始创建正确的语法。最初，我们尝试自动化这一过程，但遇到了两个问题：
1. Windows头文件不足以生成语法，因为它们无法提供关键信息（如唯一字符串）。
2. 许多系统调用没有文档（如NtUserSetSystemMenu）。

幸运的是，Windows的部分源码是开源的，包括：
- Windows NT泄漏的源码
- Windows 2000泄漏的源码
- ReactOS
- Windows Research Kit

我们在MSDN和泄漏的源码中查找每个系统调用，并使用IDA和WinDBG进行验证。我们制作了许多API签名，但有些非常复杂，涉及大量结构体和未公开的参数。

经过几百次系统调用后，我们再次运行fuzzer，发现了3个GDI漏洞和一些DoS错误。至此，我们已经覆盖了Win32k中的数百个系统调用，并计划进一步扩展。

### 结果

我们使用60个vCPU进行了一个半月的模糊测试，发现了10个漏洞（3个待处理，1个重复）：
- [CVE-2019-1014](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1014)
- [CVE-2019-1096](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1096)
- [CVE-2019-1159](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1159)
- [CVE-2019-1164](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1164)
- [CVE-2019-1256](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1256)
- [CVE-2019-1286](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1286)

此外，还发现了3个DoS错误、1个WinLogon中的崩溃和一些死锁。

## LPE → RCE？

本地特权提升漏洞很有趣，那么远程代码执行呢？

### Windows图元文件格式（WMF）

WMF是一种图形文件格式，支持矢量图形和位图。Microsoft多年来扩充了该格式，增加了EMF、EMF+和EMFSPOOL等变体。这些格式允许添加可回放的记录，以重现图形输出。当回放这些记录时，图像解析器会调用NtGdi系统调用。更多信息可以在[j00ru的PPT](https://j00ru.vexillium.org/slides/2016/pacsec.pdf)中找到。

我们发现了一个接受EMF文件的StretchBlt中的漏洞。

视频链接：

## 总结

我们的目标是使用fuzzer发现Windows内核中的bug。我们开始在Windows内核中探索fuzzer领域，由于有使用AFL风格fuzzer的经验，我们寻找性能类似的工具并找到了kAFL。分析kAFL后，我们发现系统调用fuzzer可以覆盖更多的攻击面。搜索系统调用fuzzer后，我们找到了Syzkaller。

我们开始将其移植到WSL，因为WSL与Linux内核最为相似，我们可以获得在Windows上使用Syzkaller的一些经验。我们使用IntelPT实现了Windows内核的覆盖率检测，分享了一种崩溃检测机制，并用于错误重复数据删除。我们发现了一些覆盖率稳定性问题，并分享了解决方案。

在发现一些DoS错误后，我们转向了真正的PE目标——Win32k，并在Syzkaller中实现了缺失的部分。我们进行了完整性检查和压力测试，以确保fuzzer不会浪费CPU时间。最后，我们投入了大量时间编写语法，阅读和分析目标，并最终向fuzzer中添加了对Win32k中新学习部分的支持。

总体而言，我们的研究在Windows 10内核中发现了8个漏洞、DoS错误和死锁。