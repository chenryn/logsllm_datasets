Benchmark
500.perlbench_r
502.gcc_r
505.mcf_r
508.namd_r
510.parest_r
511.povray_r
519.lbm_r
520.omnetpp_r
523.xalancbmk_r
Baseline (s)
46.9
68.5
64.7
51.6
68.9
9.8
29.8
105.3
112.4
NV NV Std. Dev.
0.013
1.134
0.015
1.099
0.987
0.032
0.013
1.094
0.011
1.009
0.020
1.101
0.029
1.027
1.030
0.122
0.030
1.232
Benchmark
525.x264_r
531.deepsjeng_r
538.imagick_r
541.leela_r
544.nab_r
557.xz_r
600.perlbench_s
602.gcc_s
605.mcf_s
Baseline (s)
72.5
99.8
83.4
133.4
184.0
53.0
46.6
68.4
66.0
NV NV Std. Dev.
0.038
1.040
0.033
1.099
0.980
0.009
0.018
1.083
0.014
1.032
0.094
1.025
0.057
1.166
1.108
0.010
0.034
0.960
Benchmark
619.lbm_s
620.omnetpp_s
623.xalancbmk_s
625.x264_s
631.deepsjeng_s
638.imagick_s
641.leela_s
644.nab_s
657.xz_s
Baseline (s)
228.1
98.6
111.9
72.0
117.6
82.9
132.8
184.4
54.4
NV NV Std. Dev.
0.026
0.990
0.091
1.063
1.217
0.014
0.016
1.025
0.043
1.060
0.017
0.993
0.012
1.072
1.027
0.013
0.059
0.934
3 IMPLEMENTATION
We built an initial prototype of Venkman for the 64-bit POWER8
architecture [1] using the LLVM compiler [9]. We chose POWER8
because it uses fixed-length instructions, making it easier to write
code that creates aligned bundles of instructions. Currently, only
our code alignment and branch instrumentation is implemented.
We built Venkman as two MachineFunctionPass components
added to the LLVM 4.0 compiler. The first pass searches for instruc-
tions that move values into the link register and counter register;
all indirect branches on POWER8 use these two registers to hold
the target of the branch [1]. In the case of the counter register,
Venkman searches forward in the basic block to see if the counter
register is used as an indirect branch target or if it is read by another
instruction. In the former case, the value moved into the counter
register is the target of a branch; in the latter case, it is a non-target
value and is not modified. For values moved into the link register
and target addresses moved into the counter register, Venkman
adds two instructions that clear the lowest 4 bits (so that the target
address is aligned on a 16-byte bundle boundary) and clears the
highest 33 bits (to force the target to be a code segment address;
Venkman will eventually force all code to be loaded into the lower
2 GB of the virtual address space).
The second MachineFunctionPass transforms each basic block
to be a bundle of instructions that is 16 bytes long and aligned on a
16-byte boundary. It breaks larger basic blocks up into smaller basic
blocks and adds NOP instructions to smaller basic blocks to make
them equal to 16 bytes. During this process, Venkman ensures that
instructions that must belong to the same bundle are co-located in
the same basic block. For example, the bit-masking instructions on
values moved to the link or counter register are always located in
the same basic block as the branch using the target address value.
Venkman also ensures that all call instructions appear at the end of
a basic block; this ensures that the return address saved in the link
register is the address of the next contiguous bundle in memory.
4 PRELIMINARY RESULTS
To evaluate Vekman’s performance, we compiled the SPEC CPU
2017 benchmarks without Venkman (as the baseline) and with
Venkman. We used a 64-bit 20-core IBM POWER8 machine running
at 4.1 GHz. The machine has 64 GB of RAM and runs Linux 3.10.0.
Table 1 shows the baseline performance using the train inputs,
and the overhead induced by Venkman normalized to the baseline.
As Table 1 shows, the alignment and bit-masking of control data
imposed by Venkman induces 0% to 23% overhead with an average
of 5.9%.
5 CONCLUSIONS AND FUTURE WORK
This paper presents a software-based solution that mitigates BTB
poisoning by ensuring that all software trains BTB entries to jump
to aligned addresses within the code segment, thereby preventing
malicious branches to arbitrary instructions. By deploying SFI on all
store instructions, we can ensure that the processor never corrupts
the code segment during speculative execution.
In future work, we will complete the Venkman prototype and in-
corporate our work into existing defenses such as Spectre-resistant
SFI [3], providing a complete SFI solution that resists Spectre attacks.
We will also measure the memory overhead induced by Venkman.
REFERENCES
[1] 2018. Power ISA™ Version 2.07 B. IBM.
[2] John Criswell, Andrew Lenharth, Dinakar Dhurjati, and Vikram Adve. 2007.
Secure Virtual Architecture: A Safe Execution Environment for Commodity Op-
erating Systems. In Proceedings of the 21st ACM SIGOPS Symposium on Operating
Systems Principles (SOSP’07). 351–366. https://doi.org/10.1145/1294261.1294295
[3] Xiaowan Dong, Zhuojia Shen, John Criswell, Alan Cox, and Sandhya Dwarkadas.
2018. Spectres, Virtual Ghosts, and Hardware Support. In Proceedings of the 7th
International Workshop on Hardware and Architectural Support for Security and
Privacy (HASP’18). Article 5, 9 pages. https://doi.org/10.1145/3214292.3214297
[4] Intel Corporation 2018. Intel Analysis of Speculative Execution Side Channels. Intel
Corporation. Document Number: 336983-004.
[5] Intel Corporation 2018. Speculative Execution Side Channel Mitigations. Intel
Corporation. Document Number: 336996-003.
[6] Vladimir Kiriansky and Carl Waldspurger. 2018. Speculative Buffer Overflows:
Attacks and Defenses. ArXiv e-prints (July 2018). arXiv:1807.03757
[7] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas,
Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz,
and Yuval Yarom. 2019. Spectre Attacks: Exploiting Speculative Execution. In
Proceedings of the 40th IEEE Symposium on Security and Privacy (SP’19).
[8] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu Song, and
Nael Abu-Ghazaleh. 2018. Spectre Returns! Speculation Attacks using the Return
Stack Buffer. In Proceedings of the 12th USENIX Workshop on Offensive Technologies
(WOOT’18). https://www.usenix.org/conference/woot18/presentation/koruyeh
[9] Chris Lattner and Vikram Adve. 2004. LLVM: A Compilation Framework for
Lifelong Program Analysis & Transformation. In Proceedings of the International
Symposium on Code Generation and Optimization: Feedback-directed and Runtime
Optimization (CGO’04). 75–86. http://dl.acm.org/citation.cfm?id=977395.977673
[10] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas,
Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval
Yarom, and Mike Hamburg. 2018. Meltdown: Reading Kernel Memory from User
Space. In Proceedings of the 27th USENIX Security Symposium (Security’18). 973–
990. https://www.usenix.org/conference/usenixsecurity18/presentation/lipp
[11] John Paul Shen and Mikko H. Lipasti. 2013. Modern Processor Design: Fundamentals
of Superscalar Processors (1st ed.). Waveland Press, Inc., Long Grove, IL, USA.
[12] Paul Turner. 2018. Retpoline: A Software Construct for Preventing Branch-Target-
Injection. https://support.google.com/faqs/answer/7625886.
[13] Bennet Yee, David Sehr, Gregory Dardyk, J. Bradley Chen, Robert Muth, Tavis
Ormandy, Shiki Okasaka, Neha Narula, and Nicholas Fullagar. 2009. Native Client:
A Sandbox for Portable, Untrusted x86 Native Code. In Proceedings of the 30th
IEEE Symposium on Security and Privacy (SP’09). 79–93. https://doi.org/10.1109/
SP.2009.25
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada2299