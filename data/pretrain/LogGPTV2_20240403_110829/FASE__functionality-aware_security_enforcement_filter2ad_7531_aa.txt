title:FASE: functionality-aware security enforcement
author:Petar Tsankov and
Marco Pistoia and
Omer Tripp and
Martin T. Vechev and
Pietro Ferrara
FASE: Functionality-Aware Security Enforcement
Petar Tsankov∗
ETH Zurich
PI:EMAIL
Marco Pistoia
IBM T. J. Watson Research Center
PI:EMAIL
Omer Tripp†
Google Inc.
PI:EMAIL
Martin Vechev
ETH Zurich
PI:EMAIL
Pietro Ferrara†
Julia
PI:EMAIL
Dynamic information-ﬂow enforcement systems automat-
ically protect applications against conﬁdentiality and in-
tegrity threats. Unfortunately, existing solutions cause un-
desirable side eﬀects, if not crashes, due to unconstrained
modiﬁcation of run-time values (e.g. anonymizing sensitive
identiﬁers even when these are used for authentication).
To address this problem, we present Functionality-Aware
Security Enforcement (FASE), a lightweight approach for ef-
ﬁciently securing applications without breaking their func-
tionality. The key idea is to let developers specify function-
ality constraints and then use a run-time synthesizer to re-
place sensitive values with constraint-compliant ones. Con-
cretely, FASE consists of: (i) an eﬃcient ﬁne-grained data-
ﬂow-tracking engine, (ii) a domain-speciﬁc language (DSL)
for expressing functionality constraints, (iii) a synthesizer
that derives constraint-compliant values at security-sensitive
operations, and (iv) an enforcement mechanism that auto-
matically repairs illicit ﬂows at run time.
We instantiated FASE to the problem of securing Android
applications. Our experiments show that the FASE system
is useful in practice: Its average run-time overhead is <12%;
it avoids the crashes, side eﬀects, and run-time errors exhib-
ited by existing solutions; and the constraints in the FASE
DSL are readable and concise.
1.
INTRODUCTION
Improper enforcement of information-ﬂow security remains
the main cause of software vulnerabilities [22, 24]. This
comes as no surprise—enforcing information-ﬂow security is
hard as it requires global reasoning about transitive infor-
mation ﬂows throughout the application as well as subtle
checks and mutations of sensitive data.
∗
Parts of this author’s contribution to this work took place
while the author was a Research Intern at IBM’s T. J. Wat-
son Research Center.
†
All of this author’s contribution to this work took place
while the author was employed by IBM Corporation at
IBM’s T. J. Watson Research Center.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05 - 09, 2016, Los Angeles, CA, USA
c(cid:2) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991116
Dynamic Data Flow
Tracking
(§3)
Functionality
Constraints
(§4)
Source
Sink
Application
Constraints
Generic
Constraints
Synthesizer (§5)
synth(
) =
,
,
Figure 1: Functionality-Aware Security Enforcement
Beyond these general challenges, there are also factors
that are speciﬁc to the mobile setting. Mobile developers
have to cope with pressing demand for software releases and
updates, leaving little room for security education and prac-
tice. At the same time, mobile platforms are rich in security-
sensitive APIs—for example, for accessing device sensors
and performing inter-application communication (IAC). Us-
ing these APIs in a secure manner requires special knowledge
that developers often do not have.
Existing Work. The tension between the security needs
of mobile software and the general lack of security savvy
among developers motivates solutions for dynamic security
enforcement. Recently, several promising approaches featur-
ing low run-time overheads have been proposed; see e.g. [1,
18, 31]. However, existing solutions ignore constraints due
to the application’s functionality, and thus cause undesir-
able side eﬀects and crashes [18]. For example, mocking an
identiﬁer (e.g., the device ID) may be acceptable if the mo-
bile application sends it to a remote server for advertising
or analytics purposes, but not if it is used for identifying the
user. Fundamentally, securing an application dynamically
without breaking it hinges on precisely understanding its
functionality, which is diﬃcult to uncover in a purely auto-
mated manner. Nonetheless, this is an essential requirement
for the wide adoption of automated protection solutions.
Our Approach. We present Functionality-Aware Security
Enforcement (FASE), a dynamic security enforcement ap-
proach designed for developers without security background.
Our key insight is that combining ﬁne-grained information-
471ﬂow tracking with a concise description of the application’s
functionality is suﬃcient to precisely detect, and correctly
repair,
information-ﬂow vulnerabilities at run time. De-
velopers declaratively specify functionality constraints in a
designated DSL. The security enforcement system, in turn,
automatically repairs information-ﬂow vulnerabilities while
satisfying all speciﬁed constraints.
We illustrate the overall ﬂow and key components of FASE
in Figure 1. The security goal is to protect applications
against: (i) conﬁdentiality violations (leaking private data to
unauthorized parties, such as remote servers and other apps
running on the device), and (ii) integrity violations (using
unsanitized data in security-sensitive computations). Below,
we brieﬂy describe FASE’s key components.
Fine-grained Information-ﬂow Tracking. FASE fea-
tures a dynamic ﬁne-grained tracking engine that traces sen-
sitive data at the byte (rather than the object) level as it ﬂows
from sources (i.e., methods that output private or untrusted
data) to sinks (i.e. private data releasing points or security
operations using untrusted input). Byte-level tracking is an
essential prerequisite for precisely repairing illicit ﬂows at
run time for two reasons. First, dynamic data correction
requires contextual information that is only available at the
sink. Therefore, sensitive data cannot be anonymized/sani-
tized at the source. Second, data typically undergoes multi-
ple transformations before reaching a sink. Therefore, data-
ﬂow tracking must be ﬁne-grained to prevent benign data
from being unnecessarily modiﬁed as this will likely cause
undesirable side eﬀects and crashes. For example, conﬁden-
tial data is often concatenated to URL strings. The system
must modify only the conﬁdential parts of the URL string
because changes to the other URL parts (e.g. the host path)
may result in unwanted side eﬀects or even cause application
crashes.
Two Kinds of Functionality Awareness. There are two
kinds of functionality awareness. The ﬁrst kind includes
generic constraints imposed by the API, such as the pre-
conditions of network and ﬁle-system APIs. For example, a
URL string ﬂowing into a network API must remain a well-
formed URL string after the protection system modiﬁes it.
These constraints are general, and hence they are preconﬁg-
ured in the security enforcement system. The second kind
includes application constraints, such as the distinction be-
tween essential and extraneous servers to which identiﬁers
are sent, which impose further constraints on the URL. As
these constraints are speciﬁc to the application at hand, they
are deﬁned by the application’s developers.
Domain-speciﬁc Language. FASE features a DSL that
developers use to declaratively express application-speciﬁc
functionality constraints. The constraints are purely functional—
free of any security considerations—which creates a clean
separation of concerns: the developers focus on the applica-
tion’s functionality, while the enforcement system augments
the application’s behavior with security aspects. We empiri-
cally show that our DSL is suﬃciently expressive for captur-
ing constraints arising in real-world apps while restricting
the run-time overhead of constraint solving to a tolerable
level.
Run-time Synthesis. Enforcing information-ﬂow security
amounts to replacing all sensitive data passed to sinks with
constraint-compliant values; see Figure 1. Generating values
Contributions. Our main contributions are:
security at run time while preserving functionality.
that satisfy all functionality constraints—both generic and
application-speciﬁc—is nontrivial as the constraints are of-
ten interdependent. Towards this, FASE features a special-
ized and highly-eﬃcient synthesizer for string constraints.
The FASE system utilizes the synthesizer to automatically
generate values that satisfy all their associated constraints.
• A new approach, FASE, for enforcing information-ﬂow
• An eﬃcient ﬁne-grained information-ﬂow-tracking en-
gine for strings and primitive values, ensuring that the
enforcement system modiﬁes only sensitive data (§3).
• A domain speciﬁc language expressive enough to cap-
ture functionality constraints of real-world apps (§4).
• A synthesizer consisting of a specialized solver that is
fast and scalable, and can precisely enforce the desired
functionality constraints (§5).
• An implementation of FASE for Android featuring an
eﬃcient ﬁne-grained information-ﬂow-tracking engine.
Our experiments with real-world applications indicate
that (i) our DSL can capture interesting constraints,
(ii) the FASE system is robust and does not cause func-
tional side eﬀects or application crashes, and (iii) the
run-time overhead is less than 12% on average (§6).
2. OVERVIEW
In this section, we outline the FASE system. We do so
with reference to an Android application that releases con-
ﬁdential data to the network. Afterwards, we discuss the
challenges that must be accounted for when securing this
application and we illustrate how FASE addresses them. Fi-
nally, we present our attacker model and state the security
guarantees provided by the FASE system.
2.1 Motivating Example
The program shown in Figure 2(left) implements an An-
droid service component for fetching user data from the ap-
plication’s backend server and for collecting user data for
analytics. The service sends an HTTP request to the ap-
plication’s analytics server. This request contains the Inter-
national Mobile Subscriber Identity (IMSI), obtained via a
call to the getSubscriberId API. The analytics server uses
only the ﬁrst 6 digits of the IMSI, which are suﬃcient to ex-
tract the country code and the network code of the device.
The service then creates a second request, this time pass-
ing the IMSI to the backend server, which uses the IMSI to
identify the user’s device. The Android service executes two
security-sensitive operations: (i) sending the IMSI to the
analytics server, and (ii) sending it to the backend server.
As we illustrate next, in both cases, the enforcement system
cannot naively anonymize the URI strings that contain the
IMSI.
2.2 Security Enforcement Challenges
We next outline some of the key challenges that must be
accounted for when securing the presented Android applica-
tion.
Generic Constraints. Naively masking all conﬁdential
data to protect the user’s privacy fails in practice because it
may end up violating the application’s overall functionality.
In our example, one cannot replace the URI strings passed
as parameters to get at lines 4 and 6 with arbitrary strings,
472get("http :// backend .com?id="+imsi );
public void onBind ( Intent msg) {
String imsi = getSubscriberId ();
get("http :// analytics .com?id="+imsi );
HttpResponse userData =
1 public class UserData extends Service {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17 }
} catch ( URISyntaxException e) {...}
HttpGet req = new HttpGet (u);
return httpClient . execute (req );
}
public HttpResponse get( String s) {
}
...
URI u = null;
try {
u = new URI(s);
(source)
(sink)
(HttpClient.execute(HttpUriReqeust), req.uri) (cid:2)→ Uri
::= "http" "s"? "://" Chars "." Dom Args
::= [a(cid:2)zA(cid:2)Z0(cid:2)9]+
::=  | ”?” Arg
::= Chars "=" Chars | Arg "&"Arg
Uri
Chars
Dom ::= "com" | "net" | "org" | ...
Args
Arg
(a) Generic constraint (G)
sink HttpClient.execute(req)
if req.uri.startsWith(”http : //analytics.com”)
constrain req.uri(cid:4)IMSI(cid:5) to val.substr(0,6) · [0-9](cid:2)
keep req.uri(cid:4)IMSI(cid:5)
if req.uri.startsWith(”http : //backend.com”)
http : //analytics.com?
id = 310152843957264
http : //analytics.com?
id = 310152000000000
(b) Application-speciﬁc constraint (A)
G = L(Uri)
∩
A = L("http://analytics.com?id=310152" · [0-9](cid:2))
Synthesizer
Figure 2: Securing an Android application using the FASE approach
because the execute API invoked at line 15, accepts only
HTTP request objects with well-formed URI strings [27].
The security-enforcement system must ensure that such pre-
conditions are satisﬁed to prevent run-time errors and ap-
plication crashes. We refer to such preconditions as generic
constraints.
We remark that such generic constraints are common for
integrity sinks as well. For example, any modiﬁcations to
an untrusted user input appended to an SQL query must
preserve the well-formdness of the SQL query before it is
passed to the SQLiteDatabase.execQuery integrity sink.
Application-speciﬁc Constraints. Satisfying generic con-
straints alone is, however, often insuﬃcient for securing an
application without causing side eﬀects. For example, the
application’s functionality is disrupted if the security system
completely anonymizes the IMSI. The security system must
keep the IMSI intact when it is sent to the backend server,
because this server uses the IMSI to identify the user’s de-
vice. However, the security system can anonymize the last 9
digits of the IMSI when it is sent to the analytics server,
because this server, for its purposes, should only use the
ﬁrst 6 digits and ignore the remaining 9 digits. We refer to
such application-speciﬁc functional requirements as applica-
tion constraints.
Sink Sensitivity. Modifying sensitive data correctly de-
pends on the sink and the run-time values ﬂowing into it.
For example, anonymizing the IMSI in our example depends
on the URL object passed to the sink; concretely, it depends
on the host name, which identiﬁes whether the IMSI is being
sent to the backend or to the analytics server. It is there-
fore impossible to anonymize the IMSI directly at the source
(i.e., at line 3).
2.3 The FASE System
FASE automatically secures the application by guarantee-
ing that any conﬁdential/untrusted data is anonymized/san-
itized before being used in a sink, while enforcing the func-
tional constraints imposed by the application and its library
dependencies. We now illustrate how the motivating exam-
ple is secured using the FASE system without breaking its
functionality.
Fine-grained Information-Flow Tracking. The FASE
tracking engine assigns the label IMSI to each byte (or, char-
acter) of the string returned by the source API call at line 3.
Byte-level data ﬂow tracking is key to precisely anonymize
sensitive data because the data typically undergoes multiple
transformations before reaching the sink. FASE propagates
the label IMSI as the application appends the imsi string
to construct the two URI strings at lines 4 and 6, and later
when it constructs URI objects at line 12 and HTTP requests
at line 14. FASE inspects the HTTP requests passed to the
sink API at line 15. The application invokes the sink twice,
and in both cases the passed HTTP request objects point
to the labeled imsi string. The data ﬂow tracker reports
precisely which bytes of the URI strings represent the IMSI.
Functionality Constraints. To avoid side eﬀects, the pro-
tection system is conﬁgured with generic constraints and
application-speciﬁc constraints. The relevant constraints for
our motivating example are shown in Figure 2(a-b).
The generic constraint in Figure 2(a) deﬁnes the precon-
dition of the execute API method. This constraint formal-
izes, using the context-free grammar with start symbol Uri,
that the URI strings in HTTP requests must indeed be
well-formed URI strings. Such generic constraints are pre-
conﬁgured in our FASE system, as they are not application-
speciﬁc.
Developers capture application-speciﬁc functionality con-
straints using the FASE DSL. These constraints enable de-
velopers to designate the sensitive values that are important
for the application’s functionality.
Intuitively, these con-
straints restrict how the FASE system modiﬁes strings that
originate from a source and ﬂow to a sink. For example,
473the ﬁrst rule Figure 2(b) imposes that whenever the appli-
cation sends the IMSI to the analytics server, FASE must
not modify its ﬁrst 6 characters, while it can arbitrarily re-
place the remaining 9. This is speciﬁed via regular expres-
sion val.substr(0,6) · [0-9](cid:2), where val is bound to the imsi
string at run time. The second constraint imposes that the
IMSI must not be modiﬁed when it is sent to the backend
server. This constraint is needed because the backend server
uses the IMSI to identify the user’s device. Both constraints
restrict changes to the URI strings of HTTP requests. The
FASE DSL also supports constraints that restrict modiﬁ-
cations to sensitive values passed as parameters of HTTP
POST requests. We give an example of such an application-
speciﬁc constraint in Section 4.2.
Synthesizer. Any sensitive data passed to a sink is au-
tomatically repaired by calling a synthesizer at run time.
The synthesizer guarantees that the anonymized/sanitized
values satisfy all functionality constraints. By default, the
synthesizer forbids all explicit ﬂows.
Figure 2 shows how the URI string used to connect to the
analytics server is anonymized using the synthesizer. For
illustration, we ﬁx the imsi string to "3101522843957264".
Based on the concrete URI string at run time, the syn-
thesizer derives a regular expression r from the application
constraints A. The URI strings contained in this regular ex-
pression are indeed precisely those that keep the host name