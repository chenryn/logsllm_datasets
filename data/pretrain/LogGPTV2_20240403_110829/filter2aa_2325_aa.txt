**© Copyright 2013 NCC Group**

**An NCC Group Publication**

**Revealing Embedded Fingerprints: Deriving Intelligence from USB Stack Interactions**

**Prepared by:**
- **Andy Davis**
- **Research Director**
- **andy.davis@nccgroup.com**

---

**NCC Group | Page 2**

**© Copyright 2013 NCC Group**

**Contents**
1. List of Figures and Tables
2. Introduction
   2.1 Previous Research
3. USB Background: The Enumeration Phase in Detail
4. USB Testing Platform
5. USB Stack Implementations
6. Identifying Supported Devices
   6.1 USB Device Classes
   6.2 Enumerating Installed Class Drivers
   6.3 Other Devices Already Connected
7. Fingerprinting Techniques
   7.1 Operating System Identification
   7.2 Application Identification
   7.3 Timing Information
   7.4 Descriptor Types Requested
   7.5 Responses to Invalid Data
8. Umap
9. Conclusions
10. References and Further Reading
11. Glossary

---

**NCC Group | Page 3**

**© Copyright 2013 NCC Group**

**1. List of Figures and Tables**

- **Figure 1:** The use of a Facedancer board in conjunction with a Packet-Master USB analyzer.
- **Figure 2:** Enumeration stops at “Set Configuration” when a device class is not supported.
- **Figure 3:** Enumeration continues past the “Set Configuration” when a device class is supported.
- **Figure 4:** A Packet-Master capture showing multiple USB devices connected to the same bus.
- **Figure 5:** Linux-based TV Set-Top-Box.
- **Figure 6:** Windows 8.
- **Figure 7:** gphoto2 (Linux).
- **Figure 8:** “Photos” Metro app (Windows 8).
- **Figure 9:** USB timing information during enumeration.
- **Figure 10:** Umap basic help.
- **Figure 11:** The USB device classes that umap currently understands.
- **Figure 12:** Umap identifying supported classes, sub-classes, and protocols.
- **Figure 13:** The umap VID/PID lookup facility.
- **Figure 14:** The umap operating system identification capability.
- **Figure 15:** Umap emulating a USB camera.
- **Figure 16:** Generic USB fuzz test cases.
- **Figure 17:** Class-specific USB fuzz test cases.

- **Table 1:** Get Device descriptor request.
- **Table 2:** Device descriptor.
- **Table 3:** Configuration descriptor.
- **Table 4:** Interface descriptor.
- **Table 5:** Endpoint descriptor.
- **Table 6:** HID descriptor.
- **Table 7:** String descriptor.
- **Table 8:** Set Configuration request.
- **Table 9:** USB Device classes.
- **Table 10:** Hub class information in a Device descriptor.
- **Table 11:** Image class information in an Interface descriptor.
- **Table 12:** VID and PID information in a Device descriptor.
- **Table 13:** Microsoft OS descriptor request.

---

**NCC Group | Page 4**

**© Copyright 2013 NCC Group**

**2. Introduction**

Embedded systems are ubiquitous, found in everything from televisions to aircraft, printers to weapons control systems. As a security researcher, it can be challenging to know where to start when faced with one of these black boxes for testing, especially in situ. However, if the device has a USB port, there is valuable information to be gained. This paper will demonstrate how analyzing USB stack interactions can provide insights into the operating system running on the embedded device, the installed USB drivers, and the supported devices. When testing the security of a USB host stack, knowledge of the installed drivers can significantly enhance the efficiency of the testing process.

**2.1 Previous Research**

There has been extensive research into USB security in recent years, primarily focusing on different methods to test USB hosts for vulnerabilities [Davis, Dominguez Vega, Larimer]. However, the author is only aware of one reference to research involving the use of USB interactions to identify information about the host stack [Goodspeed].

---

**3. USB Background: The Enumeration Phase in Detail**

USB is a master-slave protocol, with the host acting as the master and the devices as slaves. Only the master can make requests to the slaves, not the other way around. This poses a challenge when trying to identify information about the host's configuration from the perspective of a slave (device). Therefore, we need to closely observe the host's requests and provide potentially unexpected responses to generate unique behavior that can be analyzed.

The initial communication between a USB device and a host occurs during the enumeration phase. Enumeration is the process by which a USB host determines the status, configuration, and capabilities of an inserted USB device. The process begins when a device is physically connected to the host and follows several steps:

- There are four lines on a USB connector: Vcc (+5V), GND (0V), positive data (D+), and negative data (D-). Prior to a device being connected, D+ and D- are connected to GND via a 15K resistor.
- At the point of insertion, different resistors and differential signals are used to determine the speed of the connected device:
  - A low-speed device (1.5Mbps) connects D- to Vcc via a 1.5K pull-up resistor.
  - A full-speed device (12Mbps) connects D+ to Vcc via a 1.5K pull-up resistor.
  - A high-speed device (480Mbps) also connects D+ to Vcc via a 1.5K pull-up resistor, initially appearing as a full-speed device. The host then attempts to communicate at 480Mbps using J and K chirps (a J chirp is a differential signal on D+ and D- >= +300mV, whereas a K chirp is >= -300mV). If the communication fails, the host assumes the device is a full-speed device rather than a high-speed device.

Once the host knows the communication speed, it can start interrogating the device for information. An 8-byte SETUP packet, known as the setup transaction (Table 1), is sent by the host in the first phase of a control transfer. It contains the "GET_DESCRIPTOR" request (for the device descriptor) and is sent using address 0.

The device responds with an 18-byte device descriptor, also on address 0 (Table 2).

**Table 1: Get Device descriptor request**

| Field             | Value  | Meaning                                      |
|-------------------|--------|----------------------------------------------|
| bmRequestType (direction) | 1      | Device-to-host                               |
| bmRequestType (type)    | 0      | Standard                                     |
| bmRequestType (recipient) | 0      | Device                                       |
| bRequest           | 0x06   | Get Descriptor                               |
| wValue             | 0x0100 | DEVICE Index = 0                             |
| wIndex             | 0x0000 | Zero                                         |
| wLength            | 0x0040 | Length requested = 64                        |

**Table 2: Device descriptor**

| Field             | Value  | Meaning                                      |
|-------------------|--------|----------------------------------------------|
| bLength           | 18     | Descriptor length (including the bLength field) |
| bDescriptorType   | 1      | Device descriptor                            |
| bcdUSB            | 0x0110 | Spec version                                 |
| bDeviceClass      | 0x00   | Class information stored in Interface descriptor |
| bDeviceSubClass   | 0x00   | Class information stored in Interface descriptor |
| bDeviceProtocol   | 0x00   | Class information stored in Interface descriptor |
| bMaxPacketSize0   | 8      | Max EP0 packet size                          |
| idVendor          | 0x413c | Dell Inc                                     |
| idProduct         | 0x2107 | Unknown                                      |
| bcdDevice         | 0x0178 | Device release number                        |
| iManufacturer     | 1      | Index to Manufacturer string                 |
| iProduct          | 2      | Index to Product string                      |
| iSerialNumber     | 0      | Index to serial number                       |
| bNumConfigurations | 1      | Number of possible configurations            |

The most important data in the device descriptor includes:
- Device class information (if present)
- Maximum packet size in bytes of Endpoint 0
- Vendor and Product IDs (VID and PID)
- Number of configurations

The host then resets the device, allocates an address to it (in the range of 1 to 127), and re-requests the device descriptor using the new address.

For each possible configuration, the host will request a configuration descriptor (Table 3). The configuration descriptor includes additional descriptors (interface and endpoint, examples shown in Tables 4 and 5, respectively). The primary fields of interest are:
- Number of interfaces supported by this configuration
- Power attributes indicating if the device is self- or bus-powered and the maximum current the device will draw.

**Table 3: Configuration descriptor**

| Field             | Value  | Meaning                                      |
|-------------------|--------|----------------------------------------------|
| bLength           | 9      | Descriptor length (including the bLength field) |
| bDescriptorType   | 2      | Configuration descriptor                     |
| wTotalLength      | 34     | Total combined size of this set of descriptors |
| bNumInterfaces    | 1      | Number of interfaces supported by this configuration |
| bConfigurationValue | 1      | Value to use as an argument to the SetConfiguration() request to select this configuration |
| iConfiguration    | 0      | Index of String descriptor describing this configuration |
| bmAttributes (Self-powered) | 0      | Bus-powered                                  |
| bmAttributes (Remote wakeup) | 1      | Yes                                          |
| bmAttributes (Other bits) | 0x80    | Valid                                        |
| bMaxPower         | 100mA  | Maximum current drawn by device in this configuration |

**Table 4: Interface descriptor**

| Field             | Value  | Meaning                                      |
|-------------------|--------|----------------------------------------------|
| bLength           | 9      | Descriptor length (including the bLength field) |
| bDescriptorType   | 4      | Interface descriptor                         |
| bInterfaceNumber  | 0      | Number of this interface                     |
| bAlternateSetting | 0      | Value used to select this alternative setting for the interface identified in the prior field |
| bNumEndpoints     | 1      | Number of endpoints used by this interface   |
| bInterfaceClass   | 0x03   | HID                                          |
| bInterfaceSubClass | 0x01   | Boot interface                               |
| bInterfaceProtocol | 0x01   | Keyboard                                     |
| iInterface        | 0      | Index of string descriptor describing this interface |

**Table 5: Endpoint descriptor**

| Field             | Value  | Meaning                                      |
|-------------------|--------|----------------------------------------------|
| bLength           | 7      | Descriptor length (including the bLength field) |
| bDescriptorType   | 5      | Endpoint descriptor                          |
| bEndpointAddress  | 0x81   | Endpoint 1 – OUT                             |
| bmAttributes      | 0x03   | Interrupt data endpoint                      |
| wMaxPacketSize    | 0x0008 | Maximum packet size is 8                     |
| bInterval         | 0x0a   | 10 frames (10ms)                             |

Within the interface descriptor, the important information includes:
- Number of endpoints
- Class information (interface-specific information not provided in the device descriptor)

An endpoint descriptor contains:
- The endpoint address and type
- The maximum packet size in bytes of the endpoint

Sometimes, class-specific descriptors are included within the configuration, such as the HID descriptor (Table 6).

**Table 6: HID descriptor**

| Field             | Value  | Meaning                                      |
|-------------------|--------|----------------------------------------------|
| bLength           | 9      | Descriptor length (including the bLength field) |
| bDescriptorType   | 0x21   | HID                                          |
| bcdHID            | 0x0110 | HID Class Spec Version                       |
| bCountryCode      | 0      | Not Supported                                |
| bNumDescriptors   | 1      | Number of Descriptors                        |
| bDescriptorType   | 34     | Report descriptor                            |
| wDescriptorLength | 65     | Descriptor length                            |

If there are multiple configurations for a device, further configuration (as well as interface, endpoint, etc.) descriptors will be requested.

The next descriptors requested are string descriptors, which provide human-readable information about the device type and vendor (Table 7).

**Table 7: String descriptor**

| Field             | Value  | Meaning                                      |
|-------------------|--------|----------------------------------------------|
| bLength           | 48     | Descriptor length (including the bLength field) |
| bDescriptorType   | 3      | String descriptor                            |
| bString           | “Dell USB Entry Keyboard” | Human-readable string |

The final step is for the host to select one of the device configurations and inform the device that it will be using that configuration. This is done by issuing a "Set Configuration" request (Table 8).

**Table 8: Set Configuration request**

| Field             | Value  | Meaning                                      |
|-------------------|--------|----------------------------------------------|
| bmRequestType (direction) | 0      | Host-to-device                               |
| bmRequestType (type)    | 0      | Standard                                     |
| bmRequestType (recipient) | 0      | Device                                       |
| bRequest           | 0x09   | Set Configuration                            |
| wValue             | 0x0001 | Configuration No.                            |
| wIndex             | 0x0000 | Zero                                         |
| wLength            | 0x0000 | Zero                                         |

The enumeration phase is now complete, with the USB device configured and ready to use. From this point until the device is removed, class-specific communication is used between the device and the host. However, as we will discuss later, there are variations in this enumeration phase that can be used to fingerprint different host implementations.

---

**NCC Group | Page 8**

**© Copyright 2013 NCC Group**

**4. USB Testing Platform**

Additional hardware is required to interact with USB, allowing the emulation of different USB devices. The testing platform must meet the following requirements:

- **Capture and replay USB traffic:** While many USB analyzers are available, only a few allow captured traffic to be replayed, which is crucial for our purposes.
- **Full control of generated traffic:** Many test-equipment-based solutions restrict users to generating traffic that conforms to the USB specification. We need full control over all aspects of generated traffic, as the host may behave unexpectedly when receiving unconventional data, which is what we aim to observe.
- **Class decoders:** For each USB device class (e.g., mass storage, printer), there are separate specification documents detailing the class-specific communication protocols. Having an application that understands and decodes these protocols makes understanding the class communication significantly easier.
- **Support for multiple speeds:** USB devices operate at various speeds depending on their function. Therefore, the ability to capture and generate data at these different speeds is crucial for emulating the full range of devices.

For this project, we chose a solution comprising two primary components: a commercial USB analyzer and generator (Packet-Master [MQP]) and a custom device emulation board called Facedancer [GoodFET]. Figure 1 illustrates how these components are used together.

**Figure 1: The use of a Facedancer board in conjunction with a Packet-Master USB analyzer**

The benefit of using both devices is that fully arbitrary USB traffic can be generated by Facedancer, acting as a USB device, and the responses from the host under test can be captured by the Packet-Master appliance. However, for most of the techniques described in this paper, a Facedancer board alone would suffice.

---

**NCC Group | Page 9**

**© Copyright 2013 NCC Group**

**5. USB Stack Implementations**

USB is a complex protocol, particularly because it provides backward compatibility to support older, slower devices. Consequently, USB host stack implementations on different operating systems can exhibit varying behaviors, as we aimed to observe during this research. Typical components within a USB host stack include:

- **Host controller hardware:** This component handles the low-level timing and electrical aspects of the protocol and communicates via a host controller interface (HCI).
- **Host controller interface (HCI):** Several HCIs have been developed over the years, each with different capabilities. The primary difference is their ability to support devices running at different speeds. These include:
  - **Open Host Controller Interface (OHCI):** Supports full-speed and low-speed devices.
  - **Universal Host Controller Interface (UHCI):** Supports full-speed and low-speed devices.
  - **Enhanced Host Controller Interface (EHCI):** Supports high-speed, full-speed, and low-speed devices.
  - **XHCI (eXtensible Host Controller Interface):** Supports SuperSpeed, high-speed, full-speed, and low-speed devices.

Understanding the specific HCI in use can provide valuable insights into the host's capabilities and potential vulnerabilities.