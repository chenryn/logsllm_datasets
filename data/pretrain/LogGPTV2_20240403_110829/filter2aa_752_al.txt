完美废人 译 
要事前发现这个情况，可以用这样的代码进行判断： 
if (!pthread_equal (pthread_self (), other_thread)) 
pthread_join (other_thread, NULL); 
4.1.5 线程属性 
线程属性提供了一种可以用于在细粒度调整线程行为方式的机制。试着回忆一下，
pthread_create 函数接受一个指向线程属性对象的指针。如果你传递 NULL 指针，默认线程
属性被用于配置新线程。同时，你也可以通过创建并且传递一个线程属性对象来指明属性中
的一些值。 
要指明自定义的线程属性，你必须参照以下步骤： 
1. 
创建一个 pthread_attr_t 对象。最简单的方法是声明一个该类型的自动变
量。 
2. 
调用 pthread_attr_init，传递一个指向新创建对象的指针。这个步骤将各
个属性置为默认值。 
3. 
修改这个对象，使各个属性包含期望的值。 
4. 
在调用 pthread_create 的时候，传递一个指向该对象的指针。 
5. 
调用 pthread_attr_destroy 释放这个属性对象。这个 pthread_attr_t 对象
本身不会被释放；可以通过 pthread_attr_init 将其重新初始化。 
一个单独线程对象可以用于创建许多线程。在创建线程之后没有必要保持线程属性对
象。 
对于多数 GNU/Linux 应用程序而言，一般只有一个线程属性会显得有趣（其它的主要
属性均针对实时程序）。这个属性就是线程的脱离状态（detach state）。一个线程可以创建为
一个可等待线程（joinable thread）（默认情况）或者一个脱离线程（detached thread）。一个
可等待线程，类似一个进程，在结束的时候不会被 GNU/Linux 系统自动清理。相反的，它
的退出状态停留在系统中（某种程度来说，类似一个僵尸进程）直到另外某个线程调用
pthread_join 获取它的返回值。直到这时，它的资源才被释放。与此不同的是，一个脱离线
程在结束的时候会被自动清理。因为脱离线程会被立刻清理，其它线程无法与它的结束事件
进行同步，也无法获取其返回值。 
可以使用 pthread_attr_setdetachstate 函数设置脱离属性。第一个参数是一个指向线程
属性对象的指针，第二个参数是脱离状态。因为可等待状态是默认的，只有创建脱离线程的
时候才需要调用这个函数；传递 PTHREAD__CREATE__DETACHED 作为第二个参数。 
列表 4.5 中的代码通过修改线程属性创建一个脱离线程。 
列表 4.5 (detached.c) 创建脱离线程的原型程序 
#include  
void* thread_function (void* thread_arg) 
{ 
  /* 这里完成工作……*/ 
} 
www.AdvancedLinuxProgramming.com 
56
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
int main () 
{ 
  pthread_attr_t attr; 
  pthread_t thread; 
  pthread_attr_init (&attr); 
  pthread_attr_setdetachstate (&attr, PTHREAD_CREATE_DETACHED); 
  pthread_create (&thread, &attr, &thread_function, NULL); 
  pthread_attr_destroy (&attr); 
  /* 进行其它工作……*/ 
  /* 不需要等待第二个线程 */ 
  return 0; 
} 
即使一个线程是创建成为一个可等待线程，它也可以随后转换成一个脱离线程。调用
pthread_detach 进行这个转换过程。一旦线程成为脱离线程，它将无法转换会可等待状态。 
4.2 线程取消 
一般情况下，一个线程在它正常结束（通过从线程函数返回或者调用 pthread_exit 退出）
的时候终止。但是，一个线程可以请求另外一个线程中止。这被成为取消一个线程。 
要取消一个线程，以被取消的线程 ID 作为参数调用 pthread_cancel。一个被取消的线
程可以稍后被其它线程等待；实际上，你应该对一个被取消的线程执行 pthread_wait 以释
放它占用的资源，除非这个线程是脱离线程（参考 4.1.5 节，“线程属性”）。一个取消线程的
返回值由特殊值 PTHREAD_CANCELED 指定。 
经常，线程可能运行在一段不可分割的代码中，必须全部得到执行或者干脆不执行。例
如，线程可能分配一些资源，使用并稍后释放它们。如果线程在中途被取消，它可能没有机
会释放那些被分配的资源，从而导致资源的泄漏。为防止这种情况发生，一个线程可以控制
自身是否可以被取消，以及何时允许取消操作。 
对于线程取消而言，一个线程可能处于如下三种情况之一： 
· 线程可以被异步取消（asynchronously cancelable）。线程可以在执行中的
任意时刻被取消。 
· 线程可以被同步取消（synchronously cancelable）。线程可以被取消，但是
不是在任意时刻都可以。相反的，取消请求会被排队，而线程只有在到达特殊的执
行点才会执行取消操作。 
· 线程不可被取消（uncancelable）。尝试取消线程的请求会被直接忽略。 
当一个线程刚被建立的时候，它处于可同步取消状态。 
4.2.1 同步和异步线程 
一个可异步取消的线程可在它执行过程中的任意时刻被取消。一个可同步取消的线程，
www.AdvancedLinuxProgramming.com 
57
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
概念上来说，只能在执行过程中的特定位置被取消。这些位置被称为取消点（cancellation  
points）。线程会将取消请求排队，直到到达下一个取消点再由程序处理。 
可以通过调用 pthread_setcanceltype 使一个线程进入允许被异步取消的状态。这个函数
作用于调用它的线程。第一个参数可以是常量 PTHREAD_CANCEL_ASYNCHRONOUS，
表示将线程设置为可异步取消状态；或者是 PTHREAD_CANCEL_DEFERRED，将线程设
置回可同步取消状态。如果第二个参数不为空，则它指向的变量将保存线程的前一个取消类
型。下面例子中的代码将线程设置为异步取消状态： 
pthread_setcanceltype (PTHREAD_CANCEL_ASYNCHRONOUS, NULL); 
取消点究竟是什么？它们应该被放置在哪里？最直接的创建一个取消点的方法是调用
pthread_testcancel。这个函数的唯一工作就是在一个可同步取消的线程中处理一个没有被处
理的线程取消请求。如果一个线程要执行长时间的计算过程，则应该定期在线程取消不会导
致资源泄露或产生其它负面影响的情况下调用 pthread_testcancel。 
还有部分函数可以作为隐式的取消点。在 pthread_cancel 的手册页中有这些函数的列
表。需要注意的是，其它函数可能因为调用这些函数而间接成为取消点。 
4.2.2 不可取消的临界区 
线 程 可 以 利 用 pthread_setcancelstate 函 数 完 全 禁 止 自 己 被 取 消 。 类 似 于
pthread_setcanceltype，这个函数作用于调用线程。如果将 PTHREAD_CANCEL_DISABLE
作为第一个参数，则线程取消操作将被禁止；如果是 PTHREAD_CANCEL_ENABLE 则线
程取消被重新允许。第二个参数如果不为空，则指向的变量将保存线程的前一个线程取消状
态。下面例子中的代码将禁止线程取消： 
pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, NULL); 
程序可以利用 pthread_setcancelstate 实现临界区。临界区指的是一段必须完整执行或
者完全不执行的代码；换言之，一旦一个线程进入临界区，在到达临界区终点之前它将无法
被取消。 
举个例子，假设你正在实现一个银行程序中负责在帐户之间转移款项的一部分。要实现
这一点，你必须在给一个帐户的余额中加上一个值的同时从另外一个帐户中扣除相同的值。
如果运行这一段过程的线程很不巧地在这两个操作之间被取消，事务的中断会错误地导致银
行的总储蓄额提高。要防止这种情况的发生，应将这两个操作放在一个临界区中。 
你可以实现将整个传输过程封装在一个 process_transaction 函数中，如列表 4.6 中这样。
这个函数禁用线程取消以进入一个临界区，然后才操作帐户。 
列表 4.6 (critical-section.c) 用临界区保护银行事务 
#include  
#include  
#include  
/* 表示帐户结余的数组，以帐户号码为序列 */ 
float* account_balances; 
www.AdvancedLinuxProgramming.com 
58
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
/* 将 DOLLARS 从 FROM_ACCT 帐户转移到 TO_ACCT。如果成功， 
   返回 0；如果 FROM_ACCT 的结余过低则返回 1。 */ 
int process_transaction (int from_acct, int to_acct, float dollars) 
{ 
  int old_cancel_state; 
  /* 检查 FROM_ACCT 的结余。 */ 
  if (account_balences[from_acct]  
#include  
#include  
/* 用于为每个线程保存文件指针的 TSD 键值。*/ 
static pthread_key_t thread_log_key; 
/* 将 MESSAGE 写入当前线程的日志中。*/ 