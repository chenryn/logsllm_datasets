 ec2_vpc_igw:
 region: "{{ aws_region }}"
 vpc_id: "{{ vpc.id }}"
 register: swarm_gateway
 - name: Setting up routing table for the VPC network
 ec2_vpc_route_table:
 region: "{{ aws_region }}"
 vpc_id: "{{ vpc.id }}"
 lookup: tag
 tags:
 Name: "Swarm Routing Table"
 subnets:
 - "{{ swarm_subnet.subnet.id }}"
 routes:
 - dest: 0.0.0.0/0
 gateway_id: "{{ swarm_gateway.gateway_id }}"
 - name: Setting up security group / firewall
 ec2_group:
 region: "{{ aws_region }}"
 name: "Swarm SG"
 description: "Security group for the swarm"
 vpc_id: "{{ vpc.id }}"
 rules:
 - cidr_ip: 0.0.0.0/0
 proto: tcp
 from_port: 22
 to_port: 22
 - cidr_ip: 0.0.0.0/0
 proto: tcp
 from_port: 80
 to_port: 80
 rules_egress:
 - cidr_ip: 0.0.0.0/0
 proto: all
 register: swarm_sg
 - name: Provisioning cluster node
 ec2:
 region: "{{ aws_region }}"
 image: "{{ cluster_node_ami }}"
 key_name: "{{ ssh_key_name }}"
 instance_type: "t2.medium"
 group_id: "{{ swarm_sg.group_id }}"
 vpc_subnet_id: "{{ swarm_subnet.subnet.id }}"
 source_dest_check: no
 assign_public_ip: yes
 monitoring: no
 instance_tags:
 Name: cluster-node
 wait: yes
 wait_timeout: 500
```
我们在这里所做的与我们之前的计划非常匹配，但是现在我们有了具体的部署代码来匹配它:
1.  我们用`ec2_vpc_net`模块设置了 VPC。
2.  我们创建我们的子网，并将其与`ec2_vpc_subnet`模块关联到 VPC。
3.  我们云的互联网虚拟网关是用`ec2_vpc_igw`创建的。
4.  然后，互联网网关将解析不在同一网络中的任何地址。
5.  `ec2_group`模块用于启用入口和出口网络，但仅允许端口`22` (SSH)和端口`80` (HTTP)进入。
6.  最后，我们的 EC2 实例是在新配置的 VPC 中用`ec2`模块创建的。
正如我们前面提到的，拆除应该非常相似，但方向相反，包含更多的`state: absent`参数。让我们将以下内容放在同一个文件夹中的`destroy.yml`中:
```
- hosts: localhost
 connection: local
 gather_facts: False
 tasks:
 - name: Finding VMs to delete
 ec2_remote_facts:
 region: "{{ aws_region }}"
 filters:
 "tag:Name": "cluster-node"
 register: deletable_instances
 - name: Deleting instances
 ec2:
 region: "{{ aws_region }}"
 instance_ids: "{{ item.id }}"
 state: absent
 wait: yes
 wait_timeout: 600
 with_items: "{{ deletable_instances.instances }}"
 when: deletable_instances is defined
 # v2.0.0.2 doesn't have ec2_vpc_net_facts so we have to fake it to get VPC info
 - name: Finding route table info
 ec2_vpc_route_table_facts:
 region: "{{ aws_region }}"
 filters:
 "tag:Name": "Swarm Routing Table"
 register: swarm_route_table
 - set_fact:
 vpc: "{{ swarm_route_table.route_tables[0].vpc_id }}"
 when: swarm_route_table.route_tables | length > 0
 - name: Removing security group
 ec2_group:
 region: "{{ aws_region }}"
 name: "Swarm SG"
 state: absent
 description: ""
 vpc_id: "{{ vpc }}"
 when: vpc is defined
 - name: Deleting gateway
 ec2_vpc_igw:
 region: "{{ aws_region }}"
 vpc_id: "{{ vpc }}"
 state: absent
 when: vpc is defined
 - name: Deleting subnet
 ec2_vpc_subnet:
 region: "{{ aws_region }}"
 vpc_id: "{{ vpc }}"
 cidr: "{{ swarm_vpc_cidr }}"
 state: absent
 when: vpc is defined
 - name: Deleting route table
 ec2_vpc_route_table:
 region: "{{ aws_region }}"
 vpc_id: "{{ vpc }}"
 state: absent
 lookup: tag
 tags:
 Name: "Swarm Routing Table"
 when: vpc is defined
 - name: Deleting VPC
 ec2_vpc_net:
 region: "{{ aws_region }}"
 name: "Swarm VPC"
 cidr_block: "{{ swarm_vpc_cidr }}"
 state: absent
```
如果部署行动手册是可读的，那么这个行动手册通常应该很容易理解，正如我们提到的，它只是反向运行相同的步骤，删除我们已经创建的任何基础架构部分。
# 运行部署和拆卸行动手册
如果您还记得，在我们的`group_vars`定义的早期，我们有一个关键变量(`ssh_key_name: swarm_key`)，在这一点上变得相对重要，因为没有工作密钥，我们既不能部署也不能启动我们的虚拟机，所以让我们现在就这样做。我们将使用`awscli`和`jq`，这是一个 JSON 解析工具，可以减少我们的工作量，但是也可以通过图形用户界面控制台不使用它:
```
$ # Create the key with AWS API and save the private key to ~/.ssh directory
$ aws ec2 create-key-pair --region us-west-1 \
 --key-name swarm_key | jq -r '.KeyMaterial' > ~/.ssh/ec2_swarm_key
$ # Check that its not empty by checking the header
$ head -1 ~/.ssh/ec2_swarm_key 
-----BEGIN RSA PRIVATE KEY-----
$ # Make sure that the permissions are correct on it
$ chmod 600 ~/.ssh/ec2_swarm_key
$ # Do a sanity check that it has the right size and permissions
$ ls -la ~/.ssh/ec2_swarm_key
-rw------- 1 sg sg 1671 Oct 31 16:52 /home/sg/.ssh/ec2_swarm_key
```
有了密钥，我们终于可以运行部署脚本了:
```
$ ansible-playbook deploy.yml 
 [WARNING]: provided hosts list is empty, only localhost is available
PLAY ***************************************************************************
TASK [Setting up VPC] **********************************************************
ok: [localhost]
TASK [set_fact] ****************************************************************
ok: [localhost]
TASK [Setting up the subnet] ***************************************************
ok: [localhost]
TASK [Setting up the gateway] **************************************************
ok: [localhost]
TASK [Setting up routing table] ************************************************
ok: [localhost]
TASK [Setting up security group] ***********************************************
ok: [localhost]
TASK [Provisioning cluster node] ***********************************************
changed: [localhost]
PLAY RECAP *********************************************************************
localhost : ok=7 changed=1 unreachable=0 failed=0 
$ # Great! It looks like it deployed the machine! 
$ # Let's see what we have. First we need to figure out what the external IP is
$ aws ec2 describe-instances --region us-west-1 \