上面的命令只会显示 `PID`、`PPID`、和进程相关的命令、 CPU 使用率以及 RAM 使用率，并按照 CPU 使用率降序排序。创建 .iso 文件的时候运行上面的命令，下面是输出的前面几行：
![](/data/attachment/album/201609/05/200033gvw0tjttrtb22b24.png)
*根据 CPU 使用率查找进程*
一旦我们找到了感兴趣的进程(例如 `PID=2822` 的进程)，我们就可以进入 `/proc/PID`(本例中是 `/proc/2822`) 列出目录内容。
这个目录就是进程运行的时候保存多个关于该进程详细信息的文件和子目录的目录。
#### 例如：
* `/proc/2822/io` 包括该进程的 IO 统计信息（IO 操作时的读写字符数）。
* `/proc/2822/attr/current` 显示了进程当前的 SELinux 安全属性。
* `/proc/2822/cgroup` 如果启用了 CONFIG*CGROUPS 内核设置选项，这会显示该进程所属的控制组（简称 cgroups），你可以使用下面命令验证是否启用了 CONFIG*CGROUPS：
```
# cat /boot/config-$(uname -r) | grep -i cgroups
```
如果启用了该选项，你应该看到：
```
CONFIG_CGROUPS=y
```
根据 [红帽企业版 Linux 7 资源管理指南](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Resource_Management_Guide/index.html) 第一到四章的内容、[openSUSE 系统分析和调优指南](https://doc.opensuse.org/documentation/leap/tuning/html/book.sle.tuning/cha.tuning.cgroups.html) 第九章、[Ubuntu 14.04 服务器文档 Control Groups 章节](https://help.ubuntu.com/lts/serverguide/cgroups.html)，你可以使用 `cgroups` 管理每个进程允许使用的资源数目。
`/proc/2822/fd` 这个目录包含每个打开的描述进程的文件的符号链接。下面的截图显示了 tty1（第一个终端） 中创建 **.iso** 镜像进程的相关信息：
![](/data/attachment/album/201609/05/200034yh5yccgu8yikz5ug.png)
*查找 Linux 进程信息*
上面的截图显示 **stdin**（文件描述符 **0**）、**stdout**（文件描述符 **1**）、**stderr**（文件描述符 **2**） 相应地被映射到 **/dev/zero**、 **/root/test.iso** 和 **/dev/tty1**。
更多关于 `/proc` 信息的可以查看 Kernel.org 维护的 “`/proc` 文件系统” 和 Linux 开发者手册。
### 在 Linux 中为每个用户设置资源限制
如果你不够小心、让任意用户使用不受限制的进程数，最终你可能会遇到意外的系统关机或者由于系统进入不可用的状态而被锁住。为了防止这种情况发生，你应该为用户可以启动的进程数目设置上限。
你可以在 **/etc/security/limits.conf** 文件末尾添加下面一行来设置限制：
```
*       hard    nproc   10
```
第一个字段可以用来表示一个用户、组或者所有人`(*)`， 第二个字段强制限制可以使用的进程数目（nproc） 为 **10**。退出并重新登录就可以使设置生效。
然后，让我们来看看非 root 用户（合法用户或非法用户） 试图引起 shell fork 炸弹 （参见 [WiKi](https://en.wikipedia.org/wiki/Fork_bomb)） 时会发生什么。如果我们没有设置限制， shell fork 炸弹会无限制地启动函数的两个实例，然后无限循环地复制任意一个实例。最终导致你的系统卡死。
但是，如果使用了上面的限制，fort 炸弹就不会成功，但用户仍然会被锁在外面直到系统管理员杀死相关的进程。
![](/data/attachment/album/201609/05/200034rrowl6qq6xqr2lq3.png)
*运行 Shell Fork 炸弹*
**提示**： `limits.conf` 文件中可以查看其它 **ulimit** 可以更改的限制。
### 其它 Linux 进程管理工具
除了上面讨论的工具， 一个系统管理员还可能需要：
**a)** 通过使用 **renice** 调整执行优先级（系统资源的使用）。这意味着内核会根据分配的优先级（众所周知的 “**niceness**”，它是一个范围从 `-20` 到 `19` 的整数）给进程分配更多或更少的系统资源。
这个值越小，执行优先级越高。普通用户（而非 root）只能调高他们所有的进程的 niceness 值（意味着更低的优先级），而 root 用户可以调高或调低任何进程的 niceness 值。
renice 命令的基本语法如下：
```
# renice [-n]   identifier
```
如果 new priority 后面的参数没有（为空），默认就是 PID。在这种情况下，**PID=identifier** 的进程的 niceness 值会被设置为 ``。
**b)** 需要的时候中断一个进程的正常执行。这也就是通常所说的[“杀死”进程](http://www.tecmint.com/kill-processes-unresponsive-programs-in-ubuntu/)。实质上，这意味着给进程发送一个信号使它恰当地结束运行并以有序的方式释放任何占用的资源。
按照下面的方式使用 **kill** 命令[杀死进程](http://www.tecmint.com/find-and-kill-running-processes-pid-in-linux/)：
```
# kill PID
```
另外，你也可以使用 [pkill](http://www.tecmint.com/how-to-kill-a-process-in-linux/) 结束指定用户`(-u)`、指定组`(-G)` 甚至有共同的父进程 ID `(-P)` 的所有进程。这些选项后面可以使用数字或者名称表示的标识符。
```
# pkill [options] identifier
```
例如：
```
# pkill -G 1000
```
会杀死组 `GID=1000` 的所有进程。而
```
# pkill -P 4993 
```
会杀死 `PPID 是 4993` 的所有进程。
在运行 `pkill` 之前，先用 `pgrep` 测试结果、或者使用 `-l` 选项列出进程名称是一个很好的办法。它需要和 `pkill` 相同的参数、但是只会返回进程的 PID（而不会有其它操作），而 `pkill` 会杀死进程。
```
# pgrep -l -u gacanepa
```
用下面的图片说明：
![](/data/attachment/album/201609/05/200035efk4pfptozb49fko.png)
*在 Linux 中查找用户运行的进程*
### 总结
在这篇文章中我们探讨了一些监控资源使用的方法，以便验证 Linux 系统中重要硬件和软件组件的完整性和可用性。
我们也学习了如何在特殊情况下采取恰当的措施（通过调整给定进程的执行优先级或者结束进程）。
我们希望本篇中介绍的概念能对你有所帮助。如果你有任何疑问或者评论，可以使用下面的联系方式联系我们。
---
via: 
作者：[Gabriel Cánepa](http://www.tecmint.com/author/gacanepa/) 译者：[ictlyh](https://github.com/ictlyh) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出