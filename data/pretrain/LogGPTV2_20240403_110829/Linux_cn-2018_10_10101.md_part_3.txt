[![Gocon 2014 (34)](/data/attachment/album/201810/11/150703od3wruoluulul8da.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-34.jpg)
虽然 goroutine 是协作式调度的，但运行时会为你处理。
Goroutine 可能会给禅让给其他协程时刻是：
* 阻塞式通道发送和接收。
* Go 声明，虽然不能保证会立即调度新的 goroutine。
* 文件和网络操作式的阻塞式系统调用。
* 在被垃圾回收循环停止后。
[![Gocon 2014 (35)](/data/attachment/album/201810/11/150703i6iizmwzc4yw46ya.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-35.jpg)
这个例子说明了上一张幻灯片中描述的一些调度点。
箭头所示的线程从左侧的 `ReadFile` 函数开始。遇到 `os.Open`，它在等待文件操作完成时阻塞线程，因此调度器将线程切换到右侧的 goroutine。
继续执行直到从通道 `c` 中读，并且此时 `os.Open` 调用已完成，因此调度器将线程切换回左侧并继续执行 `file.Read` 函数，然后又被文件 IO 阻塞。
调度器将线程切换回右侧以进行另一个通道操作，该操作在左侧运行期间已解锁，但在通道发送时再次阻塞。
最后，当 `Read` 操作完成并且数据可用时，线程切换回左侧。
[![Gocon 2014 (36)](/data/attachment/album/201810/11/150704qqr9ypjt4wvk5mz9.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-36.jpg)
这张幻灯片显示了低级语言描述的 `runtime.Syscall` 函数，它是 `os` 包中所有函数的基础。
只要你的代码调用操作系统，就会通过此函数。
对 `entersyscall` 的调用通知运行时该线程即将阻塞。
这允许运行时启动一个新线程，该线程将在当前线程被阻塞时为其他 goroutine 提供服务。
这导致每 Go 进程的操作系统线程相对较少，Go 运行时负责将可运行的 Goroutine 分配给空闲的操作系统线程。
[![Gocon 2014 (37)](/data/attachment/album/201810/11/150705izgacaz1i3i160go.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-37.jpg)
在上一节中，我讨论了 goroutine 如何减少管理许多（有时是数十万个并发执行线程）的开销。
Goroutine故事还有另一面，那就是栈管理，它引导我进入我的最后一个话题。
[![Gocon 2014 (39)](/data/attachment/album/201810/11/150705oi4k8lp4zdlnzl8l.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-39.jpg)
这是一个进程的内存布局图。我们感兴趣的关键是堆和栈的位置。
传统上，在进程的地址空间内，堆位于内存的底部，位于程序（代码）的上方并向上增长。
栈位于虚拟地址空间的顶部，并向下增长。
[![Gocon 2014 (40)](/data/attachment/album/201810/11/150705j76et6vtzw7yt524.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-40.jpg)
因为堆和栈相互覆盖的结果会是灾难性的，操作系统通常会安排在栈和堆之间放置一个不可写内存区域，以确保如果它们发生碰撞，程序将中止。
这称为保护页，有效地限制了进程的栈大小，通常大约为几兆字节。
[![Gocon 2014 (41)](/data/attachment/album/201810/11/150706l0s3q3qws46jq6xc.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-41.jpg)
我们已经讨论过线程共享相同的地址空间，因此对于每个线程，它必须有自己的栈。
由于很难预测特定线程的栈需求，因此为每个线程的栈和保护页面保留了大量内存。
希望是这些区域永远不被使用，而且防护页永远不会被击中。
缺点是随着程序中线程数的增加，可用地址空间的数量会减少。
[![Gocon 2014 (42)](/data/attachment/album/201810/11/150706vwcsvue4wwqzneew.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-42.jpg)
我们已经看到 Go 运行时将大量的 goroutine 调度到少量线程上，但那些 goroutines 的栈需求呢？
Go 编译器不使用保护页，而是在每个函数调用时插入一个检查，以检查是否有足够的栈来运行该函数。如果没有，运行时可以分配更多的栈空间。
由于这种检查，goroutines 初始栈可以做得更小，这反过来允许 Go 程序员将 goroutines 视为廉价资源。
[![Gocon 2014 (43)](/data/attachment/album/201810/11/150707op5uu58pdm57728d.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-43.jpg)
这是一张显示了 Go 1.2 如何管理栈的幻灯片。
当 `G` 调用 `H` 时，没有足够的空间让 `H` 运行，所以运行时从堆中分配一个新的栈帧，然后在新的栈段上运行 `H`。当 `H` 返回时，栈区域返回到堆，然后返回到 `G`。
[![Gocon 2014 (44)](/data/attachment/album/201810/11/150708g4qriqyqa6zyyyp4.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-44.jpg)
这种管理栈的方法通常很好用，但对于某些类型的代码，通常是递归代码，它可能导致程序的内部循环跨越这些栈边界之一。
例如，在程序的内部循环中，函数 `G` 可以在循环中多次调用 `H`，
每次都会导致栈拆分。 这被称为  热分裂   Hot Split  问题。
[![Gocon 2014 (45)](/data/attachment/album/201810/11/150708kijz6qxbf4cv66yk.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-45.jpg)
为了解决热分裂问题，Go 1.3 采用了一种新的栈管理方法。
如果 goroutine 的栈太小，则不会添加和删除其他栈段，而是分配新的更大的栈。
旧栈的内容被复制到新栈，然后 goroutine 使用新的更大的栈继续运行。
在第一次调用 `H` 之后，栈将足够大，对可用栈空间的检查将始终成功。
这解决了热分裂问题。
[![Gocon 2014 (46)](/data/attachment/album/201810/11/150709e7xl40j4hvj40rv2.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-46.jpg)
值，内联，逃逸分析，Goroutines 和分段/复制栈。
这些是我今天选择谈论的五个特性，但它们绝不是使 Go 成为快速的语言的唯一因素，就像人们引用他们学习 Go 的理由的三个原因一样。
这五个特性一样强大，它们不是孤立存在的。
例如，运行时将 goroutine 复用到线程上的方式在没有可扩展栈的情况下几乎没有效率。
内联通过将较小的函数组合成较大的函数来降低栈大小检查的成本。
逃逸分析通过自动将从实例从堆移动到栈来减少垃圾回收器的压力。
逃逸分析还提供了更好的  缓存局部性   Cache Locality 。
如果没有可增长的栈，逃逸分析可能会对栈施加太大的压力。
[![Gocon 2014 (47)](/data/attachment/album/201810/11/150709j45msje4ss0v5sps.jpg)](https://dave.cheney.net/wp-content/uploads/2014/06/Gocon-2014-47.jpg)
* 感谢 Gocon 主办方允许我今天发言
* twitter / web / email details
* 感谢 @offbymany，@billkennedy\_go 和 Minux 在准备这个演讲的过程中所提供的帮助。
### 相关文章：
1. [听我在 OSCON 上关于 Go 性能的演讲](https://dave.cheney.net/2015/05/31/hear-me-speak-about-go-performance-at-oscon)
2. [为什么 Goroutine 的栈是无限大的？](https://dave.cheney.net/2013/06/02/why-is-a-goroutines-stack-infinite)
3. [Go 的运行时环境变量的旋风之旅](https://dave.cheney.net/2015/11/29/a-whirlwind-tour-of-gos-runtime-environment-variables)
4. [没有事件循环的性能](https://dave.cheney.net/2015/08/08/performance-without-the-event-loop)
---
作者简介：
David 是来自澳大利亚悉尼的程序员和作者。
自 2011 年 2 月起成为 Go 的 contributor，自 2012 年 4 月起成为 committer。
联系信息
* [PI:EMAIL](mailto:PI:EMAIL)
* twitter: @davecheney
---
via: 
作者：[Dave Cheney](https://dave.cheney.net/) 译者：[houbaron](https://github.com/houbaron) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出