whose type is assigned whenever the dongle under protection is
attached to the Audio jack. Note that the user only experiences
this sub-second delay once per use of the accessory, which
we believe is completely tolerable. In our results we report
the absolute time needed to perform an operation, instead of
providing the percentage difference with the baseline. Doing
the latter is misleading in our case. Consider for example the
operation content://sms query(). On the baseline it
takes 2.7ms while the same operation costs 6.39ms on SEACAT.
While this entails a 137% slowdown, it is way below a user
perceivable delay [25], [15].
All the results presented here do not include the delay
caused by human interventions: for example, the time the user
takes to determine if an app or resource should be protected.
Such a delay depends on human reaction and therefore is hard
to measure. Also they only bring in a one-time cost, as subjects
(apps) and objects (resources) only need to be labeled once.
Actually, for NFC, our implementation could even remove the
need for human intervention during policy enforcement: in the
presence of two apps with the same NFC priority, the user
could be asked to choose one of them to handle an NFC event
whenever it happens, while under SEACAT, this interaction is
avoided if one of the apps is assigned in the domain authorized
to access the related NFC device and the other is not.
VI. RELATED WORK
SEAndroid. Our approach is built on AOSP, on top of the
partially integrated SEAndroid [30]. SEACAT leverages the
existing AVC and policy engine for compliance checks over
both MAC and DAC databases. By comparison, the current
implementation of SEAndroid does not offer any protection
for external resources: it neither can specify policies for this
purpose, nor does it have the right hooks to enforce such
policies. Particularly on the framework layer, the MMAC
mechanism within SEAndroid can only achieve the control
granularity at the permission level, a far cry from what is
expected to mediate external resources.
An improvement on MMAC has been proposed re-
cently [14], which, like SEACAT, also supports app-based
policies and user-speciﬁed policies. Further, the way it controls
content providers is similar to what we did when sanitizing the
list of messages to let an app access only those it is allowed to
read. Nevertheless, like SEAndroid, this prior work does not
offer any means to control external resources either. It cannot
label those devices, not to mention enforcing any policies. Also,
the approach is designed as an alternative to SEAndroid, which
comes with its own policy language and policy engine. By
comparison, SEACAT is carefully designed to be a natural
extension of AOSP to handle external resources.
External-device misbonding. This work is partially inspired
by our prior research on Bluetooth misbonding problems [28]
and work conducted by others on unauthorized screenshot tak-
ing [24]. Particularly, in prior work [28] we developed a security
mechanism, called Dabinder, to offer a ﬁne-grained control
on Bluetooth devices. However, Dabinder is implemented on
the framework layer, inside the Bluetooth service which could
be bypassed by any app with native code. Native code can
be used to talk directly to the Bluetooth stack and in general
circumvent the framework protection. SEACAT works as an
integrated part of SEAndroid in AOSP, which offers protection
cross-layer, preventing unauthorized access to Linux devices.
Speciﬁcally for Bluetooth, SEACAT enforces policies directly
in the Bluetooth stack (see Figure 3), providing much stronger
security guarantees. Also importantly, Dabinder is designed to
be a DAC mechanism just for protecting Bluetooth devices,
while SEACAT offers centralized protection that enforces both
MAC and DAC policies, across multiple channels (Bluetooth,
13
TABLE V: Performance Measurements in milliseconds (ms). Conﬁdence Interval (CI) given for conﬁdence level=95%
AOSP
Operation
install app
Bluetooth pairing
BluetoothSocket.connect
mean
1415.6
1136.5
1699.1
stdev
CI
±25.17
40.61
351.65 ±217.95
770.22 ±477.38
dispatchTag
87.3
4.32
dispatchTag (foreground)
Ndef.writeNdefMessage(app
A)
Ndef.writeNdefMessage(app
B)
SMS process message
content://sms query() ﬁlter
(10 messages)
Audio device connection
AudioRecord.startRecording
(allow)
272
197.1
112.4
94
2.7
14.9
85.9
26.33
6.17
12.45
7.3
1.1
5.11
6.84
±2.68
±16.32
±3.82
±7.72
±4.52
±0.68
±3.17
±4.24
SEACAT
Operation
install app (label)
Bluetooth pairing (label)
BluetoothSocket.connect
BluetoothSocket.connect
(block)
dispatchTag(MAC:allow)
dispatchTag(MAC:block)
dispatchTag(label+allow)
dispatchTag(allow foreground)
dispatchTag(deny foreground)
Ndef. writeNdefMessage
(DAC/MAC allow)
Ndef. writeNdefMessage (un-
labeled)
SMS process message(allow)
SMS process message (redi-
rect)
SMS query() ﬁlter
Audio device connection
(label+ connect)
AudioRecord.startRecording
(allow)
AudioRecord.startRecording
(block)
mean
1465.2
1434.4
1616
6
96.9
113.1
358.28
269
132.5
190.89
117.5
106.5
154
6.39
177.6
95.6
7.2
stdev
CI
±47.15
76.07
237.60 ±147.26
306.83 ±190.17
3
±1.86
±2.87
±2.21
±25.08
±25.74
±13.49
±9.06
±10.14
±5.03
±7.51
±1.49
±13.59
±10.38
±2.22
4.63
3.57
40.47
41.53
21.76
14.61
16.36
8.11
12.11
2.4
21.92
16.75
3.58
overhead (ms)
49.52
279.9
-83.1
-1693.1
9.6
25.8
270.98
-3
-139.5
-6.21
5.1
12.5
60
3.69
162.7
9.7
-78.7
SMS, Internet, Audio and NFC) and its uniﬁed approach allows
easy extension to new channels.
Enhancing Android security model. Android permission
system has long been scrutinized and there is a line of research
on enhancing this security model [27], [21], [18], [12], [16],
[22], [19], [13]. Most related to our work is Porscha [29],
which controls the content an app can access on a phone for
digital rights management. For SMS messages, this has been
done through sending an IBE encrypted message to a Porscha
proxy on the phone, which further dispatches the message to
authorized apps according to a set of policies. Porscha needs
to make a substantial change to the SMS mechanism, adding
the proxy to intercept incoming messages and a new ﬁeld in
MMS content provider for tagging messages. By comparison,
SEACAT just places hooks within the existing mechanism,
using SEAndroid for policy compliance check, and therefore is
much easier to integrate into today’s Android, and also offers
both mandatory and discretionary protection across-layers.
VII. CONCLUSION AND FUTURE WORK
In this paper, we present SEACAT, a new security system
that enhances today’s Android security model to protect external
resources. SEACAT was designed to provide integrated security
control through both MAC and DAC across different Android
layers. More speciﬁcally, we utilize the same policy engine and
AVC to support policy compliance checks on both MAC and
DAC policy sets, which were extended for setting policies
on external resources. Such checks are performed on the
Android framework layer as well as the Linux kernel, within
different security hooks placed there to control various channels
(Bluetooth, SMS, Internet, Audio and NFC). DAC and MAC
rules are enforced through the same security hooks. In the
meantime, a misconﬁgured DAC policy will not cause the
MAC rules to be circumvented. This new system provides
phone manufacturers and system administrators means to deﬁne
mandatory security policies. It also empowers ordinary Android
users to specify their own rules to protect resources from third
parties. SEACAT provides strong security guarantees, incurs a
negligible performance overhead, is backward-compatible and
in some cases it even improves users’ experience.
The current design of SEACAT only manages the 5 most
popular channels. A further step in this direction would extend
our enforcement mechanism to other channels, such as Wireless
and Infrared. SEACAT cannot provide MAC protection to
Audio, due to the lack of identiﬁers for the devices attached
to this channel. A solution could ﬁngerprint different Audio
devices through probing them to inspect their responses.
ACKNOWLEDGMENT
IU authors were supported in part by the NSF 1017782,
1117106, 1223477 and 1223495. This work was also partially
supported by HHS 90TR0003-01 (SHARPS) and NSF 13-30491
(ThaW). The views expressed are those of the authors only.
REFERENCES
[1]
[2]
androidcentral.com set default nfc app. http://goo.gl/ZJj7Kf.
androidforums.com making nfc app as default when scanning tag. http:
//goo.gl/jJtuUK.
Jawbone ofﬁcial website. http://goo.gl/nt25Ub.
developers.android.com nfc basics. http://goo.gl/65ilBF.
[3] Chase ofﬁcial website. http://goo.gl/GHlt0Y.
[4]
[5] GooglePlay go locker app. http://goo.gl/s9CSTi.
[6]
[7] SEACAT demos website. http://goo.gl/y61UBH.
[8] Square ofﬁcial website. http://goo.gl/oq3IqI.
[9] Square Security ofﬁcial website. http://goo.gl/Nij1v0.
[10] Viper ofﬁcial website. http://goo.gl/F7j0SE.
[11] Yahoo Mobile ofﬁcial website. http://goo.gl/qppn9v.
[12] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan. Mockdroid: trading
In HotMobile,
privacy for application functionality on smartphones.
pages 49–54, New York, NY, USA, 2011. ACM.
[13] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and
B. Shastry. Practical and lightweight domain isolation on android. In
SPSM, pages 51–62, New York, NY, USA, 2011. ACM.
14
[14] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and ﬁne-grained
mandatory access control on android for diverse security and privacy
policies. In USENIX Security, 2013.
[15] S. K. Card, G. G. Robertson, and J. D. Mackinlay. The information
visualizer, an information workspace. In CHI, pages 181–186, New
York, NY, USA, 1991. ACM.
[16] K. Z. Chen, N. M. Johnson, V. D’Silva, S. Dai, K. MacNamara,
T. Magrino, E. X. Wu, M. Rinard, and D. X. Song. Contextual policy
enforcement in android applications with permission event graphs. In
NDSS. The Internet Society, 2013.
[17] B. Dwyer. Paypal here vs. square. http://goo.gl/wNGueP.
[18] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting privacy
leaks in iOS applications. In NDSS, Feb. 2011.
[19] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone
application certiﬁcation. In CCS, pages 235–245, New York, NY, USA,
2009. ACM.
[20] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android
permissions demystiﬁed. In CCS, pages 627–638, New York, NY, USA,
2011. ACM.
[21] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These
aren’t the droids you’re looking for: retroﬁtting android to protect data
from imperious applications. In CCS, pages 639–652, New York, NY,
USA, 2011. ACM.
[22] L. Jia, J. Aljuraidan, E. Fragkaki, L. Bauer, M. Stroucken, K. Fukushima,
S. Kiyomoto, and Y. Miyake. Run-time enforcement of information-ﬂow
properties on Android (extended abstract). In ESORICS, pages 775–792.
Springer, Sept. 2013.
J. R. W. J. Joseph Tran, Rosanna Tran. Smartphone-based glucose
monitors and applications in the management of diabetes: An overview
[23]
of 10 salient “apps“ and a novel smartphone-connected blood glucose
monitor. http://goo.gl/GrvL6i, 2012.
[24] C.-C. Lin, H. Li, X. Zhou, and X. Wang. Screenmilker: How to milk
your android screen for secrets. In NDSS, 2014.
[25] R. B. Miller. Response time in man-computer conversational transactions.
In AFIPS (Fall, part I), pages 267–277, New York, NY, USA, 1968.
ACM.
[26] E. Mills. Researchers ﬁnd avenues for fraud in square. http://goo.gl/
Fq7CrR, 2011.
[27] M. Nauman, S. Khan, and X. Zhang. Apex: extending android permission
In
model and enforcement with user-deﬁned runtime constraints.
ASIACCS, pages 328–332, New York, NY, USA, 2010. ACM.
[28] M. Naveed, X. Zhou, S. Demetriou, X. Wang, and C. A. Gunter. Inside
job: Understanding and mitigating the threat of external device mis-
bonding on android. In NDSS, 2014.
[29] M. Ongtang, K. Butler, and P. McDaniel. Porscha: Policy oriented
secure content handling in android. In ACSAC, pages 221–230, New
York, NY, USA, 2010. ACM.
[30] S. Smalley and R. Craig. Security enhanced (se) android: Bringing
ﬂexible mac to android. In NDSS, 2013.
[31] S. Stein. Withings wireless blood pressure monitor supports android/ios,
now available. http://goo.gl/9ed0aP, 2014.
[32] K. Voss. Top 10 phone apps for home security. http://goo.gl/4MHK7A,
2014.
[33] N. Wanchoo. Fda approves mega electronic’s android-based emotion
ecg mobile monitor. http://goo.gl/wqU4oS, 2013.
J. Wick. New interactive diabetes support tools manage mealtime insulin
dosing. http://goo.gl/78RnDp, 2014.
[34]
15