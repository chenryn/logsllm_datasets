### Type Assignment and User Experience

The type is assigned whenever the protected dongle is connected to the audio jack. It's important to note that the user will only experience a sub-second delay once per use of the accessory, which we believe is completely acceptable. In our results, we report the absolute time required to perform an operation rather than providing the percentage difference from the baseline. The latter can be misleading in our case. For example, the `content://sms query()` operation takes 2.7 ms on the baseline, while it takes 6.39 ms on SEACAT. Although this represents a 137% slowdown, it remains well below the threshold for user-perceivable delays [25], [15].

### Exclusion of Human Interventions

All the results presented here do not include delays caused by human interventions, such as the time taken by the user to determine if an app or resource should be protected. Such delays are dependent on human reaction times and are therefore difficult to measure. Additionally, these delays are one-time costs, as subjects (apps) and objects (resources) need to be labeled only once. In the case of NFC, our implementation can even eliminate the need for human intervention during policy enforcement. For instance, when two apps have the same NFC priority, the user might be asked to choose one to handle an NFC event. With SEACAT, this interaction is avoided if one of the apps is authorized to access the related NFC device and the other is not.

### Related Work

#### SEAndroid
Our approach is built on AOSP, leveraging the partially integrated SEAndroid [30]. SEACAT uses the existing AVC and policy engine for compliance checks over both MAC and DAC databases. In contrast, the current implementation of SEAndroid does not provide protection for external resources; it lacks the capability to specify policies for this purpose and does not have the necessary hooks to enforce such policies. Specifically, the MMAC mechanism within SEAndroid can only control at the permission level, which is insufficient for mediating external resources.

A recent improvement on MMAC [14] supports app-based and user-specified policies, similar to SEACAT. However, like SEAndroid, this prior work does not offer any means to control external resources. It cannot label devices or enforce policies. Moreover, this approach is designed as an alternative to SEAndroid, with its own policy language and engine. SEACAT, on the other hand, is designed as a natural extension of AOSP to handle external resources.

#### External-Device Misbonding
This work is partly inspired by our previous research on Bluetooth misbonding problems [28] and unauthorized screenshot taking [24]. In prior work [28], we developed Dabinder, a security mechanism for fine-grained control over Bluetooth devices. However, Dabinder is implemented at the framework layer, which can be bypassed by native code. SEACAT, integrated into SEAndroid in AOSP, provides cross-layer protection, preventing unauthorized access to Linux devices. For Bluetooth, SEACAT enforces policies directly in the Bluetooth stack (see Figure 3), offering stronger security guarantees. Dabinder is a DAC mechanism for Bluetooth, while SEACAT offers centralized protection for multiple channels (Bluetooth, SMS, Internet, Audio, and NFC) with a unified approach that can be easily extended to new channels.

#### Enhancing Android Security Model
The Android permission system has been extensively scrutinized, leading to various research efforts to enhance it [27], [21], [18], [12], [16], [22], [19], [13]. Porscha [29] is particularly relevant, as it controls the content an app can access on a phone for digital rights management. For SMS messages, Porscha uses IBE encryption and a proxy to dispatch messages to authorized apps. This requires substantial changes to the SMS mechanism, including adding a proxy and a new field in the MMS content provider. SEACAT, in contrast, places hooks within the existing mechanism, using SEAndroid for policy compliance checks, making it easier to integrate into todayâ€™s Android and providing both mandatory and discretionary protection across layers.

### Conclusion and Future Work
In this paper, we present SEACAT, a new security system that enhances the Android security model to protect external resources. SEACAT provides integrated security control through both MAC and DAC across different Android layers. We utilize the same policy engine and AVC to support policy compliance checks on both MAC and DAC policy sets, extended for setting policies on external resources. These checks are performed on the Android framework layer and the Linux kernel, using security hooks to control various channels (Bluetooth, SMS, Internet, Audio, and NFC). SEACAT ensures that a misconfigured DAC policy does not circumvent MAC rules. This system provides phone manufacturers and system administrators with the means to define mandatory security policies and empowers ordinary Android users to specify their own rules to protect resources from third parties. SEACAT offers strong security guarantees, incurs negligible performance overhead, and is backward-compatible, often improving user experience.

Future work will extend our enforcement mechanism to other channels, such as Wireless and Infrared. Currently, SEACAT cannot provide MAC protection for Audio due to the lack of identifiers for attached devices. A potential solution could involve fingerprinting different Audio devices through probing and inspecting their responses.

### Acknowledgment
IU authors were supported in part by NSF grants 1017782, 1117106, 1223477, and 1223495. This work was also partially supported by HHS 90TR0003-01 (SHARPS) and NSF 13-30491 (ThaW). The views expressed are those of the authors only.

### References
[References listed as provided in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical accuracy and detail of the original text.