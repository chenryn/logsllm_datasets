Local
Page Tables
Access
Conﬁg Regs./
Page Tables
Access Other
Sensitive
GPU Objects
GPU
Processing
Others
GPU Instructions
Report
Presentation:
SecApps’
Geometry,
V-Sync Enable
Data Path:
Framebuﬀer
Bases, Target
Display
Others: Ring
Buﬀer Base
Performance
Report
Yes Yes Yes
Yes Yes Yes
Yes Yes Yes
Yes Yes No
Yes No No
GGTT
Yes Yes Yes
Yes Yes No
Yes Yes Yes
Yes Yes No
Update GPU
Page Table
Batch Buﬀer
Base
3D
Commands Yes* No No
No
Yes* No No
No No
batch veriﬁcation of an entire group of submitted GPU com-
mands instead of trapping and mediating single GPU com-
mand individually. Furthermore, the TDK protects the veri-
ﬁed GPU commands from malicious modiﬁcation in TOCT-
TOU attacks, by shadowing the ring buﬀers and write- pro-
tecting batch buﬀers as illustrated by Tian et al. [46].
The access mediation policy has a small code base, since
sensitive GPU objects comprise only a small group among
all the GPU objects. As illustrated in Table 2, the TDK
needs to mediate accesses to only a few GPU objects of each
type and all accesses for GPU global page tables. However,
the mediation of page-table access is simple due to their lim-
ited formats and sizes. In addition, special GPU protections
built in hardware, such as GPU privilege protection, further
reduces the mediation eﬀort. It should also be noted that
the TDK forces GPU commands to use GGTT’ instead of
GGTT whenever possible to reduce the mediation overhead
of GPU command accesses. Section 5.1 presents the TDK
code base minimization results.
Table 2 also shows that TDK has to mediate access to
far fewer GPU objects than full GPU virtualization [46, 45].
This is largely due to ﬁne-grained object separation provided
by our security model. For GPU data, full GPU virtual-
996ization must mediate all the accesses to other VM’s GPU
data, whereas TDK needs to mediates the accesses only to
a small set of trusted-display sensitive GPU data and GPU
conﬁguration registers.
In contrast, full virtualization ap-
proaches need to mediate all accesses to GPU conﬁguration
registers to isolate the GPU conﬁgurations among diﬀerent
VMs. Full GPU virtualization also requires mediation of ac-
cesses to GPU instructions by design, whereas the TDK uses
address space separation to avoid verifying individual GPU
instructions. In addition, full GPU virtualization needs to
mediate accesses to more GPU commands than the TDK,
due to the virtualization of the GPU processing engines.
In Section 5.1, we will provide a detailed evaluation on the
mediation-policy trusted base.
4.5 Access Emulation
The TDK emulates accesses to four categories of GPU ob-
jects (viz., Table 2) operating on the shadow objects instead
of the originals, as follows.
• For GPU data accesses, the TDK allocates dummy
memory with equal size of the sensitive GPU data,
and invokes TD add-on to remap the sensitive GPU
data to the dummy memory for untrusted OS/Apps.
• For GPU conﬁguration registers, the TDK maintains
shadow registers, and updates their values on untrusted
accesses and chronology events (e.g. V-Sync) accord-
ing to their function deﬁnitions. TDK also keeps all
the pending updates if the corresponding register re-
quires stateful restoring during trusted-display ﬁnaliza-
tion; e.g., register update relies on previous updates.
• For GPU page tables, the TDK updates the shadow
GGTT’ whenever the original GGTT is updated.
• For GPU commands, the TDK modiﬁes their param-
eters or results to access shadow objects.
Table 2 shows that only a small number of mediated GPU
objects requires function emulation. The result is unsurpris-
ing since many sensitive GPU objects are not used by the
trusted display. Section 5.1 shows the results of access em-
ulation minimization.
4.6 TD add-on
Trapper. The trapper intercepts sensitive GPU object ac-
cesses by untrusted OS/Apps, as speciﬁed by the TDK dur-
ing the trusted display session. It use the CPU instruction
emulator to obtain the trapped instruction’s access infor-
mation; e.g., object being accessed, access mode, and access
parameters such as a new value to be written. Then it no-
tiﬁes the TDK with the access information and busy waits
for TDK’s access decision. When TDK returns the access
decision, the trapper resumes the execution of the untrusted
OS/Apps.
CPU instruction emu-
CPU Instruction Emulator.
lation is needed only for instructions that access security-
sensitive GPU objects, and hence its complexity is lower
than that of general purpose instruction emulators and dis-
assemblers. For example, only a small subset of CPU in-
structions can be used to access GPU objects; e.g., instruc-
tions for MMIO and PIO. Also, the only instruction func-
tions that need emulation are those operating in protected
mode.
Fast Communication Channel. The fast communica-
tion channels facilitate communications initiated by the TD
add-on with the TDK on multi-core platforms. They em-
ploy shared memory to hold the communication data and
use Inter-Processor Interrupts (IPI) for cross-core notiﬁca-
tion [9, 25, 56]. However, these channels diﬀer from previous
approaches in two ways. First, the communication initiator,
namely the TD add-on, busy waits for TDK’s response after
sending a request. Second, the communication receiver noti-
ﬁes ready responses via shared memory, instead of issuing IPI
back to the TD add-on. Thus, these channels avoid expen-
sive context switches between mHV and TDK, and improve
the system performance. More importantly, fast commu-
nication channels preserve the mHV’s sequential execution
and veriﬁed security properties [47], since the TD add-on
neither receives or handles inter-processor interrupts.
4.7 Life-Cycle
As is the case with previous secure I/O kernel designs [56],
the TDK boots on-demand. This requires the mHV to iso-
late the execution of TDK from commodity OS/Apps and
the TDK to isolate its memory from SecApp access.
Initialization. The TDK conﬁgures the trusted display
services when invoked by a SecApp. The untrusted OS/App
provisions GPU objects (e.g. shadow frame buﬀer, V-Sync
interrupt) and pins the related GPU memory in GPU global
address space. Then the OS/App registers the conﬁguration
via an OS-hypervisor interface. After conﬁguration, the TD
add-on switches execution to the TDK. The TDK disables
interrupts, pauses GPU command execution, and calls the
TD add-on to specify and enable the interception of sensi-
tive GPU objects accesses from untrusted OS/Apps. Next,
the TDK initializes GPU access emulation and veriﬁes all
GPU objects accesses according to the security invariants.
Lastly, the TDK conﬁgures shadow memories (e.g. shadow
ring buﬀer, shadow frame buﬀer) to start the trusted dis-
play service, resumes GPU command execution, enables in-
terrupts, and and returns to the SecApp. Trusted display
initialization is not needed for a SecApp unless all previous
SecApps that used the trusted display terminated. Finaliza-
tion reverses these steps and zeros shadow memories without
verifying GPU objects again.
Untrusted Code Accesses to Sensitive GPU Objects.
The TDK mediates the sensitive GPU object access using
the access information received from the TD add-on, allows
the access if the relevant security invariants are satisﬁed, and
emulates the access if necessary, as described in Section 4.5.
Then it returns the access decision to the TD add-on.
5. EVALUATION
We implemented and evaluated our system prototype on
an oﬀ-the-shelf HP2540P laptop, which is equipped with a
dual-core Intel Core i5 M540 CPU running at 2.53 GHz, 4
GB memory and an integrated Intel 5th generation GPU
(IronLake) with screen resolution of 1200 * 800. The lap-
top runs 32-bit Ubuntu 12.04 as the commodity OS with
Linux kernel 3.2.0-36.57. We implemented a test SecApp
that outputs a still image in all experiments.
997Table 3: Number of GPU Objects Requiring Access
Mediation.
Table 4: Code base size of trusted display service.
(a) Micro-hypervisor
(b) GPU code in TDK
GPU Object
Mediation in
TDK
Full GPU
Virtualization [46]
GPU Data
˜6 MB
GPU Conﬁguration
Registers10
GPU Page Tables
GPU Commands
GPU Instructions
39
21
0
All other
VM’s data
711
All
43
14
Total
2 GB
625
269
66
Modules
XMHF11 +
TrustVisor
CPU
Instruction
Emulator
Fast
Communication
Channel
Trapper
Total
SLoC
28943
1090
144
66
30243
Modules
Screen Overlay
SLoC
177
Access Mediation 2865
Access Emulation 1571
973
5586
Utility Code
Total
5.1 Trusted Code Base
Access Mediation Comparison. The number of GPU
objects that require access mediation by TDK is much smaller
than the number of GPU objects mediated in full GPU vir-
tualization approaches [46]; viz., Table 3. This comparison is
based on the Intel 7th generation GPUs (Haswell), which has
an open-source driver (released by Intel) and detailed docu-
mentation. For GPU data, Haswell GPU maps a 2 GB GPU
memory into the GGTT. Full GPU virtualization hosts the
bulk of other VM’s GPU data in the global address space,
whereas in our system the sensitive GPU memory is mapped
in only about 6 MB. The memory used for sensitive GPU ob-
jects includes the shadow framebuﬀers (3750 KB for screens
with 1200 * 800 resolution and 4 bytes per pixel), GGTT’
(2052 KB), and other very small sensitive GPU memory ar-
eas; e.g., shadow ring buﬀers (128 KB). Note that the ratio
of sensitive GPU objects to all GPU objects may vary, since
the protection of multiple local GPU page tables requires
more mediation of GPU data accesses and also increases the
mapped memory space.
The TDK has to mediate access to far fewer GPU con-
ﬁguration registers than full GPU virtualization. That is,
access to 39 out of 625 GPU conﬁguration registers require
mediation, 13 of which are needed for hardware overlays. In
contrast, full GPU virtualization must mediate accesses to
all GPU conﬁguration registers to share all GPU functions
securely among the diﬀerent VMs that access the GPU. It
also mediates access to more GPU commands than the TDK
since it needs to perform additional tasks such as the virtu-
alization of the GPU 2D/3D processing engine. In addition,
the TDK does not need to mediate accesses of individual
GPU instructions due to its use of the address-space sepa-
ration mechanism.
Access Emulation Minimization.
The TDK has to
emulates the functions of only 20 conﬁguration registers and
12 GPU commands since the trusted display only uses a
subset of the sensitive GPU objects. As is the case with
access mediation, full GPU virtualization needs to emulate
the functions of all conﬁguration registers to support all VMs
that access the GPU, and more GPU commands than the
TDK to virtualize the GPU 2D/3D processing engine.
Code Base Minimization. We use the SLOCCount
tool to measure the code base of our trusted-display service.
10We count registers using the same functional clustering as
in Intel’s documentation. This diﬀers slightly from Tian et
al.’s count [46], which lists registers individually.
11XMHF with ﬁne-grained DMA protection takes 24551
Source Lines of Code (SLoC) [56]
Table 5: Access mediation overhead of TDK.
GPU Conﬁgu-
ration Registers
2.61 µs
GPU Page
GPU
Tables
2.69 µs
Commands
8.86 µs