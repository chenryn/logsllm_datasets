Generally, these solutions fall into the IDS and IPS world, 
but for web applications, the most chosen are the 
Web Application Firewall (WAFs). 
1.2 Filtering Basics
|  p.74
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://www.modsecurity.org/
Even with WAFs, it is possible to choose between several 
implementations. 
These range from not only commercial and very expensive, 
but also free and open source solutions like the well known 
ModSecurity.
1.2 Filtering Basics
|  p.75
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The instructions on what a WAF, or generally, what a filter 
must block/allow are defined as rules (also referred as 
filters).
Before we analyze different filter implementations, let’s see 
the de facto standard used to write rules.
|  p.76
1.2 Filtering Basics
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Regular Expressions (RE or RegEx) represents the official 
way used to define the filter rules. Mastering RegEx is 
fundamental to understand how to bypass filters because 
RE are extremely powerful!
The upcoming slides contain a brief introduction to the 
subject.
1.2 Filtering Basics
|  p.77
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
NOTE: 
This is a brief introduction to Regular Expressions. For a 
comprehensive introduction and much more, in the 
references you will find some interesting resources. 
1.2.1 Regular Expressions
|  p.78
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
A regular expression is a special sequence of characters 
used for describing a search pattern. 
For the sake of clarity, in the next slides we will see the 
following notation: 
▪
regular expression >  regex
▪
pattern matched >  match
1.2.1 Regular Expressions
|  p.79
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://en.wikipedia.org/wiki/Deterministic_finite_automaton
http://en.wikipedia.org/wiki/Nondeterministic_finite_automaton
Many programming languages, text processors, etc., support 
regular expressions. The implementation system of regex 
functionality is often called regular expression engine. Basically, 
a regex "engine" tries to match the pattern (regex) to the given 
string.
There are two main types of regex engines: DFA and NFA, also 
referred to as text-directed and regex-directed engines. The key 
difference between the two engines is a notational convenience 
in the construction of the FA (Finite Automaton). 
1.2.1 Regular Expressions
|  p.80
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The DFA engine is faster than NFA because of its deterministic 
approach, but it does not support useful features like lazy 
quantifiers and backreferences. Additionally, NFA works the way 
humans tend to do: "regex-directed". It’s no surprise that the NFA 
engine is more popular.
Here is a table of notable programs that use 
DFA or NFA engines:
1.2.1 Regular Expressions
|  p.81
ENGINE
PROGRAM
DFA
awk, egrep, MySQL, Procmail
NFA
.NET languages, Java, Perl, PHP, Python, Ruby, PCRE library, vi, grep, less, more
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The syntax and behavior of a particular engine is called a 
regular expression flavor. Since the engine is a piece of 
software, there are different versions and of course they are 
not fully compatible with each other. 
Thus, expect to find multiple flavor based on the library you 
are using/testing!
1.2.1 Regular Expressions
|  p.82
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
For a complete comparison list of regular expression 
engines/flavors visit the following links:
Comparison of regular expression engines
• http://en.wikipedia.org/wiki/Comparison_of_regular_expr
ession_engines
Regular Expression Flavor Comparison
• http://www.regular-expressions.info/refflavors.html
1.2.1 Regular Expressions
|  p.83
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Since regular expression is a "symbolic language", to 
master this tool we must know the symbols of the 
language. They are few and have specific meanings.
Let’s look at some tables that collect these symbols and 
their meanings.
1.2.1 Regular Expressions
|  p.84
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 |  p.85
1.2.1.1 Metacharacters
Char
Name
Meaning
^
Caret
The position at the START of the line.
$
Dollar
The position at the END of the line.
()
Opening/Closing parenthesis
Start/close a characters group.
[]
Opening/Closing square bracket Start/close a characters class.
?
Question mark
One or zero (optional) of the immediately-preceding item (char or group).
+
Plus
One or more of the immediately-preceding item (char or group).
*
Star or asterisk
Any number, including none, of the immediately-preceding item (char or group).
.
Period or dot
Shorthand for a character class that matches any character.
\
Backslash
Escape special characters.
|
Vertical bar or pipe
It means OR. Combines multiple expressions in one that matches any of single ones.
{}
Opening/Closing curly brace
Start/close repetitions of a characters class.
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Since there are some character classes frequently used, 
there are also related shorthand classes that are useful to 
decrease the size and increase the readability of a regex.
The table on the next slide has the most common 
shorthand classes.
1.2.1.2 Shorthand Character Classes
|  p.86
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 |  p.87
1.2.1.2 Shorthand Character Classes
SHORTHAND
NAME
MEANING
^
Caret
If at the beginning of the character class, it means to reverse the 
matching for the class.
\d
Digit
Matches any digit character. The same as [0-9]
\D
Non-digit
The complement of \d. The same as [^\d]
\w
Part-of-word character
Matches any alphanumeric character or an underscore. The same as 
[a-zA-z0-9_]
In some flavors the underscore is omitted.
\W
Non-word character
The complement of \w. The same as [^\w] 
\s
Whitespace character
Matches any whitespace character. The same as [ \f\n\r\t\v]
\S
Non-whitespace 
character
The complement of \s. The same as [^\s] 
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://en.wikipedia.org/wiki/Control_character
Oftentimes, to evade bad filters and obfuscate the payload 
it is common to use non-printing characters. These are 
control characters used mainly to control the format of 
displayed/printed information. 
The most used characters are represented in the table on 
the next slide.
1.2.1.3 Non-Printing Characters
|  p.88
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 |  p.89
1.2.1.3 Non-Printing Characters
SHORTHAND
NAME (Symbol, Unicode)
MEANING
\0
NUL (␀ U+0000)
NUL Byte, in many programming languages marks the end of a string.
\b
Backspace (␀ U+0008)
Within a character class represent the backspace character, while outside \b matches 
a word boundary.
\t
Horizontal tab (␀ U+0009)
Generated by the Tab key on a standard keyboard.
\n
Line feed (␀ U+000A)
New line. 
\v
Vertical tab (␀ U+000B)
Vertical tabulation.
\f
Form feed (␀ U+000C)
Form feed.
\r
Carriage return (␀ U+000D)
In HTTP, the \r\n sequence is used as the end-of-line marker.
\e
Escape (␀ U+001B)
Escape character (Only for GNU Compiler Collection).
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Regular expression flavors that work with Unicode use 
specific meta-sequences to match code points.
The sequence is \ucode-point , where code-point is the 
hexadecimal number of the character to match. There are 
regex flavors like PCRE that do not support the former 
notation, but use an alternative sequence \x{code-point} 
in its place.
1.2.1.4 Unicode
|  p.90
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Match Unicode Code Point
For example, the regex \u2603 matches the snowman 
character  ☃ in .NET, Java, JavaScript and Python. 
If we want to match the same character to the PCRE library 
in Apache and PHP, we must use the other notation: 
\x{2603}
1.2.1.4 Unicode
|  p.91
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Instead of matching a single Unicode code point, it is 
possible to match if a character has a specific "quality". 
This is possible with the use of Unicode properties. 
Unicode defines for each character, properties or qualities, 
such as: "is this character uppercase" or "is this character a 
punctuation" and so on, in order to match these qualities 
with regex exists specific meta-sequences.
1.2.1.4 Unicode
|  p.92
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The characters that have a specific quality are matched 
with the meta-sequence \p{quality-id} . To match the 
characters that do not have the quality, the meta-sequence 
is \P{quality-id} .
Some general Unicode character qualities are reported in 
the table on the next slide.
1.2.1.4 Unicode
|  p.93
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 |  p.94
1.2.1.4 Unicode
CHARACTER QUALITY
DESCRIPTION
\p{L} or \p{Letter}
All the letters, from any language.
\p{Ll} or \p{Lowercase_Letter}
Lowercase letters that have the respective uppercase quality.
\p{Z} or \p{Separator}
Characters used to separate, but without visual representation.
\p{S} or \p{Symbol}
Currency symbols, math symbols, etc…
\p{N} or \p{Number}
All the numeric characters.
\p{Nd} or \p{Decimal_Digit_Number} Numbers from zero to nine in multiple scripts except Chinese, 
Japanese, and Korean.
\p{P} or \p{Punctuation}
All the punctuation characters.
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Match Unicode Category
For example, to match the lowercase characters in this 
string: 
Ğ ī ű Ŝ ê p Р Ễ
the regex is \p{Ll} and the characters matched are
ī ű ê p
1.2.1.4 Unicode
|  p.95
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Match Unicode Category
To match the string with all the case variations 
(lower, upper and title), this regex does the job:
[\p{Ll}\p{Lu}\p{Lt}]
As a shorthand, some regex flavors implement this 
solution:
\p{L&}
1.2.1.4 Unicode
|  p.96
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
We have briefly seen Regular Expressions, which is the main 
method used to define the rules of how a WAF should behave. 
They define which input is good or bad for the web application 
and respectively what the WAF should allow or block.
The meaning given to the rules defines the mode by which a WAF 
should behave. It can be whitelisted or blacklisted. Basically, a 
WAF in whitelisting mode allows only what is explicitly defined in 
the rules; however, in contrast, blacklisting mode allows anything 
except what is explicitly denied in the rules.
1.2.2 Web Application Firewall
|  p.97
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
It turns out that whitelisting mode is the best solution to 
protect a web application; on the other hand, to customize 
the rules is not an easy task. This requires a deep 
knowledge of the application to protect and, obviously, of 
the WAF solution. 
Furthermore, the whitelisting mode is prone to false 
positives, which is the reason it is very common to find 
WAFs deployed in blacklisting mode rather than whitelisting 
mode.
1.2.2 Web Application Firewall
|  p.98
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The blacklisting mode is a collection of well-known attacks. 
WAF producers put together a list of rules to protect a web 
application against various attack vectors that are used to 
exploit the most common vulnerabilities. 
|  p.99
1.2.2 Web Application Firewall
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The main problem with this kind of approach is that there 
are multiple ways to reach the same goal; therefore, every 
small change of the attack payload must be added to the 
blacklist, otherwise you have a WAF bypass! 
Predicting or keeping track of each payload tweak is very 
hard, that's why we frequently read the expression: 
All WAFs can be bypassed!
1.2.2 Web Application Firewall
|  p.100
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Over the years, security researchers have discovered 
several "alternative vectors" (i.e. WAF bypasses) and a lot of 
well-known names were involved.
The following examples are just simple rules to follow to 
deceive ingenuous WAFs.
1.2.2 Web Application Firewall
|  p.101
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Cross-Site Scripting
Instead of using:
The best choice is:
1.2.2.1 Simple Rules to Bypass WAFs
|  p.102
▼
alert(‘xss’)
▼
alert(1)
▲
prompt('xss')
▲
prompt(8) 
▲
confirm('xss')
▲
confirm(8)