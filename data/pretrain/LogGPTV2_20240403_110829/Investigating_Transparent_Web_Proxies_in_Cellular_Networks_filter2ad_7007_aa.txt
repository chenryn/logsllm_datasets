title:Investigating Transparent Web Proxies in Cellular Networks
author:Xing Xu and
Yurong Jiang and
Tobias Flach and
Ethan Katz-Bassett and
David R. Choffnes and
Ramesh Govindan
Investigating Transparent Web Proxies
in Cellular Networks
Xing Xu1(B), Yurong Jiang1, Tobias Flach1, Ethan Katz-Bassett1,
David Choﬀnes2, and Ramesh Govindan1
{xingx,yurongji,flach,ethan.kb,ramesh}@usc.edu
1 USC, Los Angeles, USA
2 Northeastern University, Boston, USA
PI:EMAIL
Abstract. People increasingly use mobile devices as their primary
means to access the Internet. While it is well known that cellular net-
work operators employ middleboxes, the details of their behavior and
their impact on Web performance are poorly understood. This paper
presents an analysis of proxy behavior and how transparent Web proxies
interact with HTTP traﬃc in four major US cell carriers. We ﬁnd that
all four carriers use these proxies to interpose on HTTP traﬃc, but they
vary in terms of whether they perform object caching, traﬃc redirection,
image compression, and connection reuse. For example, some transparent
proxies unilaterally lower the quality of images, which improves object
fetch time but may hurt user satisfaction. We also ﬁnd that these prox-
ies do not necessarily enhance performance for mobile Web workloads in
terms of object fetch times; namely, we observe noticeable beneﬁts only
when ﬂow sizes are large and the path between the server and proxy
exhibits large latency and/or loss.
1 Introduction
Internet service providers commonly deploy middleboxes inside their networks for
security, traﬃc management, and performance optimization [23]. In the mobile
environment, in which resources such as spectrum are scarce, operators have sig-
niﬁcant incentives to interpose on Internet traﬃc. Unfortunately, operators are
rarely transparent about middlebox policies, and their impact on mobile work-
loads is poorly understood. Previous work identiﬁed that middleboxes exist in cel-
lular networks and characterized several middlebox behaviors [8,11,13,21,24,26].
For example, these studies show that carriers proxy traﬃc to servers by transpar-
ently splitting client TCP connections into two connections: the proxy terminates
the client’s TCP connection by spooﬁng as the server, and the proxy establishes
a separate connection to the server by spooﬁng as the client. With split connec-
tions, the proxy can conﬁgure each segment individually and respond to latency
and loss independently, potentially improving performance.
It is widely believed that splitting TCP connections should improve – or at
least not worsen – performance for devices in cellular networks, where latencies
c(cid:2) Springer International Publishing Switzerland 2015
J. Mirkovic and Y. Liu (Eds.): PAM 2015, LNCS 8995, pp. 262–276, 2015.
DOI: 10.1007/978-3-319-15509-8 20
Investigating Transparent Web Proxies in Cellular Networks
263
and loss can be much larger than in ﬁxed-line paths [9,11,13,21,24]. However,
previous studies do not characterize the performance impact for modern cellular
networks and workloads.
In this paper, we are the ﬁrst to conduct a detailed study of transparent
proxies in four major US cellular providers (AT&T, Sprint, T-Mobile, and Ver-
izon) across four US metro areas (Boston, Chicago, Los Angeles, and Seattle)
and determine their impact on performance. Our measurements indicate that
all four carriers use transparent proxies for Web traﬃc (TCP port 80) which
represents a large portion of today’s Internet ﬂows. Thus, we focus in particular
on transparent Web proxies.
We designed controlled experiments to investigate features of transparent
Web proxy implementations including caching, content modiﬁcation, traﬃc redi-
rection to preferred servers, and connection persistence. Speciﬁcally, we tightly
control and monitor the traﬃc generated by devices, DNS servers, and Web
servers to characterize proxy behavior and its impact under varying network
conditions and workloads, including representative workloads using a mobile
Web browser. We also develop techniques that allow us to infer proxy behav-
ior for communication with servers that we do not control and evaluate proxy
impact on popular Web sites. Note that, we conjecture, but do not focus on why
do carriers deploy these features.
Key Results. First, each carrier implements proxying policies diﬀerently, and
they can lead to a diﬀerent user experience in terms of the speed and quality of
downloaded content. For example, image compression can reduce download time
by a factor of ﬁve, but caching content has little impact on performance in our
experiments. Second, we observe that split connections improve performance for
larger ﬂows (up to 45 %), but have negligible impact on small ones (≤100 KB).
We show that proxied connections can provide beneﬁts in lossy and high-latency
environments, particularly where the cellular segment is not the dominating
factor determining end-to-end performance. We use a mobile Web browser to
download replicated Web content from servers we control while approximat-
ing the same communication patterns. Under normal network conditions, these
proxies do not measurably improve performance, but page load times are 30 %
faster when we induce loss on the wired segment. Last, we verify that proxy-
ing occurs of all of the most popular 100 Web site front pages, but discover
that YouTube video servers bypass T-Mobile’s proxy, possibly due to special
arrangements between the providers [20]. Our results indicate proxies may not
necessarily improve performance for mobile users, motivating the need for larger-
scale and more in-depth analysis of the performance beneﬁts across networks,
devices, locations, and workloads.
2 Background and Related Work
Few studies systematically reveal proxy policies in mobile networks and assess
their impact. Early work in this area has focused on understanding, modeling
and improving split-TCP designs for proxies in wireless and cellular networks.
264
X. Xu et al.
An early survey [8] qualitatively characterizes the behavior and role of perfor-
mance-enhancing proxies for wireless networks in general. Ehsan et al. [11] study
the beneﬁts of proxies for satellite networks and describe the beneﬁts of split-
TCP connections. Necker et al. [24] explore, through simulation, the impact
of proxies on bulk downloads and Web traﬃc on UMTS networks. Ivanovich
et al. [21] discuss advanced ACKing strategies to buﬀer data at the proxy for
increased wireless link utilization. Finally, Gomez et al. [16] show that proxies
can improve Web browsing performance, Rodriguez et al. [25] discuss the archi-
tecture of a proxy (together with associated TCP optimizations) for a GPRS
network, and Baccelli et al. [7] model the performance of split-TCP to under-
stand its asymptotic behavior. In contrast, our work characterizes the behavior
and performance impact of deployed proxies on modern cellular networks, across
four major US carriers.
More recently, several pieces of work have explored other aspects of proxy
behavior in modern cellular networks. Botta et al. [9] explore how middleboxes
can impact measurements, and propose a careful methodology for cellular mea-
surements, some of which we adopt and extend. Farkas et al. [13] use numerical
simulations to quantify the performance improvement of proxies in LTE net-
works, while our work directly measures this improvement. Ehsan et al. [12]
study tradeoﬀs of caching through real user traces. Closest to our work are three
measurement studies that have attempted to reveal complementary aspects of
proxy behavior. Wang et al. [26] show how cellular middlebox settings can impact
mobile device energy usage and how middleboxes can be used to attack or deny
service to mobile devices. Michio et al. [19] developed a method for measuring
middlebox behavior related to TCP extensions and showed that some proxies
remove TCP options and proxy connections, which is supplementary to our
works.
Weaver et al. [27] study the prevalence of HTTP proxying using a large
dataset of clients and taxonomize the types of HTTP proxying seen in the wild,
ranging from transcoding proxies to censoring and anti-virus proxies. Unlike our
work, that study does not attempt to enumerate the detailed TCP-level behav-
ior of cellular proxies for various network conditions and Web workloads. Jiang
et al. [22] analyze buﬀerbloat in cellular networks and propose a dynamic window
adjustment algorithm to alleviate this. Our work explores proxy behavior, which
includes buﬀers among many other features that impact performance. Finally,
Hui et al. [20] conﬁrm our observation that proxies can actually hurt perfor-
mance instead of improving it. Their proxy bypass experiments with T-Mobile
revealed that direct server-client connections have lower retransmission rates,
higher throughput, and smaller amounts of buﬀerbloat.
3 Experimental Testbed
Our testbed design is motivated by three goals. First, we want to conduct con-
trolled experiments to determine how a proxy responds to diﬀerent Web ﬂow
characteristics. Second, for transparently proxied connections, we want to use
Investigating Transparent Web Proxies in Cellular Networks
265
microbenchmarks to identify under which circumstances the proxy behavior
helps or hurts performance in terms of download time. Last, we want to under-
stand how proxy behavior impacts the performance under realistic workloads.
We focus on the delivery time of Web sites that include multiple resources from
diﬀerent servers.
With these goals in mind, we set up the following testbed. We use multiple
rooted mobile devices (HTC One phones with Android 4.3) and diﬀerent phone-
speciﬁc cellular carrier data plans to explore proxy behavior for each of the four
major US carriers (comprising 99 % of US subscribers [4]). We control a Web
server and a DNS subdomain that resolves to it, allowing us to monitor both
endpoints of a connection when we access a URL via one of our mobile devices.
Our measurement were conducted in more than 2 months. For each experiment
day, we conduct experiments over a wide range of times, including on and oﬀ-
peak to avoid bias from time-of-day eﬀects. Finally, we run tcpdump on the device
and on the server to capture detailed network information, including TCP/IP
headers and timestamps (after synchronizing endpoints using NTP).
With full control over the server and client devices, we can explore proxy
properties through diﬀerent experiment conﬁgurations, varying parameters such
as the content that is fetched, socket properties (e.g. server IP/port), HTTP
conﬁguration (including modiﬁed headers), and even adjust network conditions.
For each given conﬁguration we mention in this paper, we conduct at least
250 trials. When comparing performance results between two conﬁgurations,
we interleave trials of the two conﬁgurations to minimize the probability of
signal strength and congestion variation impacting our results. In addition, we
monitor signal strength readings to ﬁlter out biased results due to poor signal
strength.
Fig. 1. Fetch times for cached and
uncached objects.
Fig. 2. Impact of Sprint’s image com-
pression (original vs. compressed ﬁle
size).
For all four carriers, we conducted experiments in the metro areas of Boston,
Chicago, Los Angeles, and Seattle. In addition, we have measurements for AT&T
and T-Mobile in the metro areas of Philadelphia and Washington, DC.
266
X. Xu et al.
Fig. 3. Fetch times for compressed
(left), and original images (right), on
Sprint.
Fig. 4. Server-side handshake latency
for split (top) and non-split connec-
tions, on T-Mobile.
4 Proxy Features
We test a list of well-known proxy features and identify ﬁve used in prac-
tice: caching, redirection, content rewriting, connection persistence, and delayed
server-side handshakes. We observe diﬀerent feature sets for each carrier
(Table 1), but within each carrier the identiﬁed features are consistent across
all metro areas we covered.
To observe proxy features, we conduct experiments between the mobile
phones and our server. Since we control both endpoints, we can correlate client-
and server-side packet traces, and extract features that indicate Web proxy inter-
ference. We ﬁrst establish the presence of a Web proxy by inspecting various
connection properties, including the TCP window scaling parameter, receiver
window, and sequence and acknowledge numbers. In all four carriers we studied,
at least one of these properties was inconsistent between the client and server,
suggesting interference by a proxy. In addition, we observe that a client receives
the initial TCP SYN-ACK before the server receives a SYN packet, and con-
versely a server receives acknowledgements for transmitted data packets before
the client sees the same data. Thus, we conclude that these proxies split connec-
tions between the two original endpoints.
We observe that proxies only intercept traﬃc on some ports (including
port 80). Thus, we can compare data for proxied and unproxied traﬃc by varying
Table 1. Proxy implementations observed in our study.
Caching
Redirection
(cid:2)
(cid:2)
Content rewriting
Connection persistence (cid:2)
Delayed handshaking (cid:2)
(cid:2)