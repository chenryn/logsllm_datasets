    ```
2.  你应该还保留着本章中最初使用的`docker-compose.yaml`文件。如果您还没有运行 Anchore，运行`docker-compose`命令并导出`ANCHORE_CLI_URL`、`ANCHORE_CLI_URL`和`ANCHORE_CLI_URL`变量，就像您之前所做的那样，以允许我们运行`anchore-cli`命令:
    ```
    docker-compose up -d
    ```
3.  通过运行`anchore-cli system status`命令来检查锚定应用的状态:
    ```
    anchore-cli system status
    ```
4.  使用`feeds list`命令检查订阅源列表是否全部更新:
    ```
    anchore-cli system feeds list
    ```
5.  一旦所有的提要都被更新，添加我们已经推送到 Docker Hub 的`postgres-app`映像。使用`anchore-cli`提供的`image add`命令，提供我们要扫描的映像的存储库、映像和标签。这将把映像添加到我们的 Anchore 数据库，准备扫描:
    ```
    anchore-cli image add /postgres-app:activity2
    ```
6.  使用`image list`命令，允许我们验证我们的映像已经被分析。一旦完成，您应该会在`Analysis Status`栏中看到`analyzed`字样:
    ```
    anchore-cli image list
    ```
7.  Use the `image vuln` command with our image name to see a list of all the vulnerabilities found on our `postgres-app` image. This image is a lot larger and a lot more complex than the images we have tested previously, so there is a long list of vulnerabilities found when we use the `all` option. Fortunately, most of the vulnerabilities present either `Negligible` or `Unknown`. Run the `image vuln` command and pipe out the results to the `wc -l` command:
    ```
    anchore-cli image vuln /postgres-app:activity2 all | wc -l
    ```
    这将为我们提供已发现漏洞的数量。在这种情况下有 100 多个值:
    ```
    108
    ```
8.  Finally, use the `evaluate check` command to see whether the vulnerabilities found will give us a pass or fail:
    ```
    anchore-cli evaluate check /postgres-app:activity2
    ```
    幸运的是，从下面的输出可以看出，我们通过了:
    ```
    Image Digest: sha256:57d8817bac132c2fded9127673dd5bc7c3a97654
    636ce35d8f7a05cad37d37b7
    Full Tag: docker.io/vincesestodocker/postgres-app:activity2
    Status: pass
    Last Eval: 2019-11-23T06:15:32Z
    Policy ID: 2c53a13c-1765-11e8-82ef-23527761d060
    ```
由于映像是由大型组织提供的，确保您可以安全使用符合他们的最佳利益，但是由于扫描映像非常容易，我们应该仍然在扫描它们，以验证它们 100%可以安全使用。
# 12 时。最佳实践
## 活动 12.01:查看全景徒步应用使用的资源
**解决方案:**
我们可以通过多种方式来完成本章的第一项活动。以下步骤是一种方法，使用`docker stats`命令查看全景徒步应用中服务正在使用的资源。在本例中，我们将使用`postgresql-app`服务，该服务作为全景徒步旅行应用的一部分运行:
1.  Create a script that will create a new table and fill it with random values. The following script does exactly what we want in this situation as we want to create a long processing query and see how it affects the resources on our container. Add in the following details and save the file as `resource_test.sql` using your favorite editor:
    ```
    1 CREATE TABLE test_data
    2 (
    3     random_value NUMERIC NOT NULL,
    4     row1         NUMERIC NOT NULL,
    5     row2         NUMERIC NOT NULL
    6 );
    7 
    8 INSERT INTO test_data
    9     SELECT random_value.*,
    10     gen.* ,
    11     CEIL(RANDOM()*100)
    12     FROM GENERATE_SERIES(1, 300) random_value,
    13     GENERATE_SERIES(1, 900000) gen
    14     WHERE gen ' use 'apt-get install 
    ='
    /dev/stdin:2 DL3009 Delete the apt-get lists after installing 
    something
    /dev/stdin:2 DL3015 Avoid additional packages by specifying 
    '--no-install-recommends'
    /dev/stdin:2 DL3014 Use the '-y' switch to avoid manual input 
    'apt-get -y install '
    /dev/stdin:3 DL3025 Use arguments JSON notation for CMD 
    and ENTRYPOINT arguments
    ```
    与最初测试映像时相比，没有真正的变化。但是`Dockerfile`中只有三行代码，看能否减少`hadolint`呈现的警告数量。
3.  如本章前面所述，`hadolint`维基页面将为您提供如何解决每个警告的详细信息。但是，如果您遍历每一行，您应该能够解决所有这些警告。第一个显示的是`DL3006`，要求标记您正在使用的 Docker 映像的版本，这是 Ubuntu 映像的新版本。将您的`Dockerfile`的*第 1 行*更改为现在包括`18.08`映像版本，如图所示:
    ```
    1 FROM ubuntu:18.08
    ```
4.  接下来的四个警告都和我们`Dockerfile`的第二行有关。`DL3008`要求锁定正在安装的应用版本。在以下情况下，将应力应用固定到版本 1.0.3。`DL3009`声明你应该删除任何列表。这就是我们在下面的代码中添加了*第 4 行*和*第 5 行*的地方。`DL3015`声明你也应该使用`--no-install-recommends`，确保你没有安装你不需要的应用。最后，`DL3014`建议您包括`-y`选项，以确保不会提示您验证应用的安装。编辑`Dockerfile`如下所示:
    ```
    2 RUN apt-get update \
    3 && apt-get install -y stress=1.0.4 --no-install-recommends \
    4 && apt-get clean \
    5 && rm -rf /var/lib/apt/lists/*
    ```
5.  `DL3025` is your last warning and states that you need to have your `CMD` instruction in JSON format. This could cause issues as you are trying to use environment variables with your stress application. To clear up this warning, run the `stress` command with the `sh -c` option. This should still allow you to run the command with environment variables:
    ```
    6 CMD ["sh", "-c", "stress ${var}"]
    ```
    您现在遵循最佳实践的完整`Dockerfile`应该如下所示:
    ```
    FROM ubuntu:18.04
    RUN apt-get update \
     && apt-get install -y stress=1.0.4 --no-install-recommends \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*
    CMD ["sh", "-c", "stress ${var}"]
    ```
6.  现在，再次使用`hadolint`去除`Dockerfile`的绒毛，不再出现警告:
    ```
    docker run --rm -i hadolint/hadolint < Dockerfile
    ```
7.  If you want to be 100% sure that the `Dockerfile` is looking as good as it can be, perform one final test. Open `FROM:latest` in your browser and you will see the `Dockerfile` with the latest changes showing `No problems or suggestions found!`:
    ![Figure 12.4: The docker-stress Dockerfile now adhering to the best practices ](img/B15021_12_04.jpg)
图 12.4:Docker 压力 Docker 文件现在坚持最佳实践
您的`Dockerfiles`可能比本章中介绍的要大得多，但是正如您所看到的，系统的逐行方法将帮助您纠正您的`Dockerfiles`可能存在的任何问题。使用诸如`hadolint`和`FROM latest`之类的应用，以及它们关于如何解决警告的建议，将使您熟悉最佳实践。这就把我们的活动和这一章带到了最后，但还有更多有趣的内容要走，所以现在不要停下来。
# 13。监控 Docker 指标
## 活动 13.01:创建 Grafana 仪表板来监控系统内存
**解决方案**:
您可以通过多种方式来执行此活动。以下步骤就是这样一种方法:
1.  确保普罗米修斯正在运行并收集数据，Docker 和`cAdvisor`被配置为公开度量，Grafana 正在运行并以普罗米修斯为数据源进行配置。
2.  打开 Grafana 网络界面和您在*练习 13.05:在您的系统上安装和运行 Grafana*中创建的`Container Monitoring`仪表板
3.  There is an `Add panel` option at the top of the dashboard and to the right of the dashboard name. Click the `Add panel` icon to add in your new dashboard panel:
    ![Figure 13.26: Adding a new panel to the container monitoring dashboard ](img/B15021_13_26.jpg)
    图 13.26:向容器监控仪表板添加一个新面板
4.  从下拉列表中选择`Prometheu` s 作为我们将用于生成新仪表板面板的数据源。
5.  在`metrics`部分，添加以下 PromQL 查询，`container_memory_usage_bytes`，只搜索具有名称值的条目。然后，对每个名称求和，为每个容器提供一个线图:
    ```
    sum by (name) (container_memory_usage_bytes{name!=""})
    ```
6.  Depending on the amount of data you have available in your time-series database, adjust the relative time if needed. Perhaps set the relative time to `15m`. The previous three steps are captured in the following diagram:
    ![Figure 13.27: Adding a new panel to the Container Monitoring dashboard ](img/B15021_13_27.jpg)
    图 13.27:向容器监控仪表板添加一个新面板
7.  选择`Show options`并添加`Memory Container Usage`的标题。
8.  If you click on `Save`, you will notice that you cannot save the panel as the dashboard has been provisioned on startup. You can export the JSON, which you can then add to your provisioning directory. Click the `Share Dashboard` button and export the JSON. Select `Save JSON to file` and store the dashboard file in the `/tmp directory`:
    ![Figure 13.28: Warning that we cannot save the new dashboard ](img/B15021_13_28.jpg)
    图 13.28:警告我们不能保存新的仪表板
9.  停止运行您的 Grafana 容器，以便可以在您的环境中添加到配置文件。使用以下`docker kill`命令进行操作:
    ```
    docker kill grafana
    ```
10.  在`provisioning/dashboards`目录中已经有一个名为`ContainerMonitoring.json`的文件。从您的`tmp`目录复制您刚刚创建的 JSON 文件，并替换`provisioning/dashboards`目录中的原始文件:
    ```
    cp /tmp/ContainerMonitoring-1579130313205.json provisioning/dashboards/ContainerMonitoring.json
    ```
11.  再次启动 Grafana 映像，并使用默认管理密码登录应用:
    ```
    docker run --rm -d --name grafana -p 3000:3000 -e "GF_SECURITY_ADMIN_PASSWORD=secret" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/Grafana
    ```
12.  Log in to Grafana one more time and move to the `Container Monitoring` dashboard you have been provisioning. You should now see the newly created `Memory Container usage` panel at the top of our dashboard, similar to the following screenshot: