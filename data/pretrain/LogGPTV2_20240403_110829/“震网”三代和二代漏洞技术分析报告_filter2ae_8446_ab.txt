转换成PIDL的样子。
`DisplayNameOfW` 参数 0x8001 表示返回目标路径，0x8000 表示返回全路径。
跑起来有点小意外，stupid并没有被加载。
原因是加载之前有一段代码检测 `PSGetNameFromPropertyKey(&PKEY_Software_AppId,
&ppszCanonicalName);` 是否成功。在explorer里这句是成功的，自己的小程序load shell32.dll跑则失败。
好吧，这不是重点。那么把这段程序load到explorer里去跑下，果然成功了，stupid.dll被加载。或者在
`PSGetNameFromPropertyKey` 下断，把返回值改为0，也可以成功跑出stupid。
至此，我们知道，只要能来一发 `DisplayNameOfW` \+ `SHParseDisplayName` 连续技，就可以成功利用。
接下来就是寻找哪里可以触发连续技。
`DisplayNameOfW`的调用点也是蛮多，排除掉一眼看上去就不靠谱的，再把二眼看上去犹疑的踢到次级优先梯队，还剩下这么些需要深入排查的：
然而逐一鉴定后，发现一个都不好使，再把第二梯队拉出来溜一圈，依然不好使。
那么，再看看有关联但之前暂不关注的`SHGetNameAndFlagsW`吧，另外又一个功能也差不多的`DisplayNameOfAsString`
也一并进入视野（在分析`CShellLink::_ResolveIDList`时，这里面就能看到`DisplayNameOfAsString`，也有
`ParseDisplayNameChild`。这里面花了很大功夫，然而这里的`GetAttributesWithFallback`
函数要求满足属性值存在0x40000000位这个条件无法通过。最后不得不转移阵地。另外其实即使这里能跑通，这个函数也不是插入U盘就能立刻触发的，还是需要一定操作。）。
`SHGetNameAndFlagsW`，这个函数调用点很多，又花了很多时间，然而并没有惊喜。
好在`DisplayNameOfAsString`的调用点不多，才十多个，并且终于在这里见到了彩头。
可以回溯了：
    DisplayNameOfAsString  CPL_ParseCommandLine -> CPL_ParseToSeparator`
中我们又可以将上面使用过的大长文件名截断为短文件名，因为 `CPL_ParseToSeparator` 中除了使用”，”作为分割符，也是包含了空格符。
切成短名字，是为了过 `CPL_LoadCPLModule` 函数中的：
这里有返回值检查，超长的话就返回了。
我们的0x101长度名字，是不能在尾部附加一串”.manifest”的。
过了它，我们的短名dll（如果存在的话）就真的被加载起来了。
所以，这个利用需要用到一长名一短名双文件技巧。
长名文件任意内容，0字节都可以，只是被检测一下存在性。
比如：
    3.dll
    3333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.000
（注意dll后面有个空格）
短名文件（真正加载的就是它了）：3.dll
.lnk里指定那个长名字就好了。
Hf，全文完！