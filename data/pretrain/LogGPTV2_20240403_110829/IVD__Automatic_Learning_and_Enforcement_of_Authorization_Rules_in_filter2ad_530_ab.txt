proﬁles.
return nil
the authorization logic for the post operation is shown in
Algorithm 1. As IVD intercepts requests between the OSN
and its graph database, it executes as a result of writing to the
graph on line 3. Because this line is only executed when the
logged-in user is a friend of the picture’s target proﬁle, i.e.
the pic.target property, the rule “a picture can only be posted
when its target property refers to a friend of the logged-in
user” can be inferred.
On the other hand, when reading an image, the authorization
checks happen after the graph reads, as shown in Algorithm 2.
The algorithm is correct: the authorization checks only allow
users to see pictures from their friends’ proﬁle. However, the
getObject method—and as a result IVD—is called both when
legitimate users access pictures from their friends’ proﬁle, and
when prying users attempt to access pictures they do not have
access to. Therefore, the authorization rule “a picture can only
be read by a friend of the picture’s target user” is not clear
until line 4, outside IVD’s scope.
In addition, OSNs’ workloads are notoriously read-heavy,
as newly created content is often broadcast to subscribers,
followers or other connections, leading to several orders of
magnitude more database reads than writes and to increased
resource consumption for any system that has to inspect these
operations. As a result, in this work we only focus on write
operations and outline potential approaches for handling reads
in future work (§VII). However, it is important to realize
that authorization bugs in write operations can lead to data
breaches, e.g. allowing an attacker to befriend arbitrary users
without their consent would expose all data users shared only
with their friends.
C. Facebook
Facebook is one of the biggest OSNs, having a correspond-
ingly large graph database, both in terms of entities stored and
1096
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply. 
users accessing it. Its database contains more than one trillion
entities, and receives over 10,000,000 peak writes per second.
To secure the data, most accesses to the graph database
happen through a declarative privacy-aware framework. The
framework implements rule-based authorization by allowing
developers to associate with any entity type authorization
policies, which are then automatically checked whenever an
entity of that type is read or written. An authorization policy
is a predicate that decides whether a user action should be
allowed or not. A typical model represents them as ordered
sets of authorization rules. Each rule can either allow, deny, or
take no decision regarding the action. The rules are evaluated
sequentially and the ﬁrst decision taken is the overall result of
the policy.
For example, the previously discussed feature of merging
businesses can be implemented by creating a new business
object and connecting each of the businesses to be merged
with it through a MERGED INTO association. Enforcing autho-
rization checks is done by associating with the MERGED INTO
association type an authorization policy with a single rule that
allows the creation of the association only if the two business
objects being connected belong to the logged-in user.
We believe that while authorization policies are a very
powerful tool, they require a great amount of engineering dis-
cipline. First, the policies must be complete; developers must
reason about all possible cases, implement the appropriate
rules and connect them in the appropriate order. Over time, this
often leads to policies that are complex, hard to debug and hard
to reason about in the ﬁrst place. Second, the authorization
policies must be checked on every database read or write;
any database access that, for historical or engineering reasons,
does not go through the privacy framework must manually
enforce the correct authorization checks, which can easily be
overlooked in a very large codebase modiﬁed by hundreds or
thousands of engineers. This problem is compounded when
multiple endpoints implement the same functionality for dif-
ferent platforms, e.g. a regular web interface, a mobile web
interface and a REST API. Any authorization checks added to
one of these endpoints must be replicated in all the others.
Even with structured authorization policies in place, bugs
still creep in. Since its launch, Facebook’s bug bounty
program1 received more than 2,400 valid submissions and
awarded more than $4.3 million to more than 800 researchers
around the world, with reports about business logic bugs
becoming more common [12]. In Section V we present several
case studies where IVD has or could have prevented exploits.
IVD works alongside authorization policies. While we ad-
vocate for writing correct policies and thoroughly enforcing
them, we recognize that bugs are inevitable and we add a
second layer of defense through IVD. All bugs detected and
blocked by IVD should shortly after materialize in new au-
thorization rules. As an added beneﬁt, a missing authorization
1Facebook’s bug bounty program encourages security researchers and
whitehat hackers to poke at Facebook’s systems, discover bugs and earn mon-
etary rewards in exchange of disclosing them responsibly without accessing
or mutating actual user data.
check that IVD detects in one speciﬁc endpoint can point to
a systemic problem, whose ﬁx will affect overall security.
In this sense, IVD picks up where testing leaves off; while
more testing may ﬁnd more bugs,
to know
if one has tested “enough” or more testing is needed. IVD
mitigates this problem by contributing to a diversiﬁed set of
bug ﬁnding approaches, whose combined strengths increase
overall security.
is difﬁcult
it
D. Threat Model
IVD protects against attacks which rely on improper or
incomplete authorization checks, usually mounted through a
publicly accessible web interface or API. We adopt a realistic
threat model, where the attackers are either logged-out or have
regular user accounts. They can make any number of requests
and can pass arbitrary arguments to any endpoint exposed by
the OSN but cannot modify the OSN’s server-side code or
otherwise interfere with its execution.
In the most basic form, the exploits involve passing iden-
tiﬁers of objects that are not under the attacker’s control,
in the hope that the OSN’s code will not make appropriate
authorization checks, and inadvertently mutate the objects.
Such attacks are successful when developers miss a check,
make incorrect assumptions regarding the data that their code
processes, or rely on client-side code to perform authorization.
IVD only protects against attack vectors which involve unau-
thorized database requests made through usual APIs. While
other web application attacks such as XSS, CSRF, denial of
service, social engineering, and infrastructure compromise are
important, their prevention and mitigation require signiﬁcantly
different approaches such as taint tracking, rate limiting or
intrusion detection. These approaches are complementary to
the enforcement of correct authorization checks.
III. DESIGN
In theory, invariants could be arbitrary graph predicates ex-
pressed in a graph database query language [13]. For example,
the following Lorel [14] query ﬁnds entities X and Y such that
the same sequence of edge properties that connects X and Y
connects John and Y:
s e l e c t X, Y
from
Winners . a u t h o r A, Winners . a u t h o r X,
A. #@P. Y, X. #@Q.Y
path−o f ( P ) = path−o f (Q)
where A. name = ’ John ’
and
where # denotes a path of any length, @P binds the path to
variable P, and path-of returns a sequence of edge properties.
It can be easily seen that such a query would be prohibitively
slow to perform in near-real time for all requests, at the scale
of a large graph database.
To achieve scalability IVD uses a lightweight
invariant
design. The main insight behind our approach is that limiting
the scope of the query still offers enough expressive power
to catch many real-world problems. Our design drastically
limits both the extent of the graph that can be accessed and
1097
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply. 
the predicates that can be used. An object invariant can only
reference properties of the object being manipulated, while
an association invariant can only reference properties of the
association and of the two objects the association connects.
We collectively call these properties local properties.
To mitigate the locality of this invariant design we introduce
a small number of domain-speciﬁc global properties that can
be referenced in addition to local properties, such as the
identity of the currently logged-in user or the set of groups
the logged-in user is an administrator of. This helps in two
ways: ﬁrst, being able to reference the identity of the logged-in
user immediately allows creating more expressive invariants.
Second, being able to directly reference objects that often
determine a user’s permission to perform an action (e.g. being
an administrator of a group allows one to add other users
to the group) allows IVD to essentially side-step the locality
restriction for a small set of authorization-relevant objects.
To provide the most beneﬁt, the global properties have to be
relevant to authorization checks and efﬁciently computable, i.e.
involve traversing a small number of edges from known graph
objects. Such properties are the logged-in user’s connections
or friends, or the business proﬁles that they administer.
Local or global properties are connected in an invariant
predicate by invariant operators. The only two operators an
IVD invariant can use are property equality and association
existence. Equality predicates assert that two properties are
always equal. For example
o1 .property1 = o2 .property2 .subproperty
While object properties can have scalar or aggregate types,
we only consider equality of scalar values and recursively
enumerate the values in any aggregate property, such as the
o2.property2 dictionary in the previous example.
Association existence predicates assert that an association
always exists between two objects. For example
(cid:2)
logged-in user
o.propertyx
ATYPE
distills the constraint that a graph association of type ATYPE
must exist between the logged-in user and the object refer-
enced by the property propertyx of the object involved in
the database operation. While association existence predicates
and global properties have similarities, they have different use
cases: the former are domain-agnostic, but require a signiﬁcant
amount of database queries to determine, while the latter are
intended to be used for efﬁciently-computable sets of values
that are relevant to authorization. As we detail later on (§IV-B),
our implementation uses different approaches to infer each
type of predicates.
Figure 2 shows the invariants that apply in the previously
discussed scenario of merging several businesses into a single
entity. The implementation creates a new business object
and connects all previous business with it (for simplicity we
only depict one connection) through an association of type
MERGED INTO. The creation of this association must only
be permitted when the logged-in user is the owner of both
1098
Old business (o1)
name: My First Business
owner: 1234
…
MERGED_INTO
New business (o2)
name: My New Business
owner: 1234
…
o1.owner = logged-in user
o2.owner = logged-in user
o1.owner = o2.owner
Fig. 2: Three invariants that apply when a user merges a
business proﬁle into another business proﬁle. Adding the
MERGED INTO association must only be allowed when the
logged-in user (a global property) is the owner of both
businesses (local properties).
businesses being connected, a constraint which is distilled in
three invariants that respect the semantic restrictions imposed
by IVD.
As this example shows, IVD invariants contain, in addition
to a predicate, the context in which the predicate applies.
Rather than create global invariants that would be checked
on every operation, IVD uses a ﬁner granularity and binds
predicates to speciﬁc operations. For example, it associates a
set of predicates to the operation of merging business proﬁles,
a different set of predicates to the operation of creating a
photo, and yet a different set to the operation of creating
a comment. At runtime, only the predicates relevant to the
current operation—if any—need to be checked. As a further
improvement, we also associate predicates to the code which
generated the request, i.e. a canonical representation of the
URI or API endpoint that was used to initiate the request. This
handles situations where an endpoint makes additional checks
before issuing the request, e.g. the administrator area of an
OSN could authorize users based on their IP address, hence
can afford making requests that break invariants associated
with openly accessible endpoints.
More formally, we deﬁne an invariant category as a 3-tuple
(ENDPOINT, OTYPE, OPERATION) for object invariants, and a
5-tuple (ENDPOINT, O1TYPE, ATYPE, O2TYPE, OPERATION)
for association invariants, where ENDPOINT is the source of the
request, OTYPE, O1TYPE, O2TYPE and ATYPE are the types of
the database entities involved in the request, and OPERATION
is one of CREATE, DELETE or MUTATE.
Using this notation, we deﬁne an invariant as a pair
I = (invariant category,P)
where
P : properties × properties → {true, false}
is the invariant predicate function, restricted to the two oper-
ators previously discussed.
IVD’s invariants fall under two broad classes: authorization
invariants and data validation invariants.
Authorization invariants are the main focus of this work.
They are constraints that involve a user’s identity, e.g. a group
post can only be created if the request comes from a member of
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply. 
Invariants
Legitimate
requests
Malicious
request
t
n
a
i
r
a
v
n
r
e
k
c
e
h
C
I
l
t
s
e
u
q
e
R
r
e
p
m
a
S
x
Violations
Logs
DB
Logs
Violations
Invariants
Legitimate
requests
t
n
a
i
r
a
v
n
r
e
k
c
e
h
C
x
Malicious
request I