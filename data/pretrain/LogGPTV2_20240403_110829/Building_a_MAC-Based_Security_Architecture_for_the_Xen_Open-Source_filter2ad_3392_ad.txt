### Resource Sharing and Cooperation in sHype

sHype must support the sharing of resources among multiple coalitions or enable different coalitions to cooperate using filtering and fine-grained access control within a MAC (Mandatory Access Control) domain. 

When virtual resources, such as vLANs, are distributed across multiple hypervisor systems and communicate over a network, sHype relies on MAC bridging domains to securely isolate vLAN traffic from other network traffic and to control access of VMs (Virtual Machines) to the vLAN. Consequently, sHype controls which domains can connect to MAC-bridging domains but delegates the isolation and MAC guarantees for vLAN traffic to these MAC-bridging domains.

### Performance Considerations

To minimize performance overhead, sHype performs authorization only at bind time and caches these decisions. Policy changes occur infrequently, so the associated overhead does not impact the critical path. Similarly, Chinese Wall hooks are invoked only during domain operations (e.g., creation), and thus do not affect the critical path. We conducted experiments to measure the overhead of Type Enforcement hooks when VMs communicate through the Xen event channel and grant table mechanisms.

In our experiments, we ran the management domain (Dom0) and one user domain (DomU), both with Fedora Core 4 Linux installations, on a current uniprocessor desktop system. We assigned common Type Enforcement and Chinese Wall types to Dom0 and DomU. A physical disk partition (hda7) managed by Dom0 was mounted by DomU through the Xen virtual block interface. The experiment involved transferring 108 disk blocks from Dom0 to DomU via the virtual block interface (using `dd if=/dev/hda7 of=/dev/null count=10000000`). Shared-memory grant tables were dynamically set up between Dom0 and DomU during the transfer. When the Type Enforcement policy was activated, the 10 transfers invoked the grant-table hook approximately 12 million times, and the transfers took between 1196 and 1198 seconds to complete.

Using the time-to-completion metric, we observed no significant overhead. The performance was identical for configurations that did not invoke any hooks (null policy) and for configurations that did invoke hooks (TE policy).

### Related Work

Several highly secure operating systems, such as GEMSOS [32, 29], KSOS [24], and Multics [4, 18], have been successfully commercialized. However, their widespread use has been limited due to the high design, development, and evaluation costs, which are justified only in specialized application domains with very high security requirements. Implementing access control with process and file granularity in general-purpose OSs, as seen in SELinux [26] policies, is complex and challenging due to interdependencies between processes [17]. VMMs (Virtual Machine Monitors) can supplement OS security and provide containment in case OS security controls fail [23].

Gold et al. [11] demonstrated that virtualizing a single hardware platform enables the execution of multiple virtual systems, each running at a single security level, ensuring strong isolation between them. The prevalent approach to creating multiple VMs on a single hardware platform is to use a VMM [12]. Based on VMs, a single system can implement a multi-level secure system by dividing it into multiple single-level virtual systems, guaranteeing secure separation. Separation Kernels, which are VMMs that completely isolate VMs, have been proven to be feasible by Rushby [27]. Kelem et al. [21] derived a formal model for Separation VMMs, and NetTop [25] is an example of a more recent separation kernel design based on virtualization.

While strictly separated VMs do not map well into cooperating distributed applications, some research has explored kernels that enable secure sharing between VMs. However, these approaches [19, 11] often suffer from high performance overhead and large trusted computing bases due to necessary I/O emulation inside the hypervisor layer. Karger et al. [20] reported a 50-90% overhead for the KVM approach (with limited performance tuning) compared to VM/370, and a 10-70% overhead for the VaxVMM approach (no performance tuning, including virtualization overhead) compared to the native VMS operating system.

The sHype hypervisor security architecture is motivated by these prior secure VMM systems to address performance overhead issues and minimize design and code modifications in modern hypervisors targeted for medium-assurance commercial environments. Initial prototypes of sHype in multiple hypervisors show promising results, but further validation against enterprise workloads using standardized benchmarks is needed as the initiatives and architecture mature.

Today, several virtualization technologies, such as PHYP [13] and VMware [34], are successfully deployed in the commercial domain. Research VMMs like Terra [10], Xen [3], and the IBM Research Hypervisor [14] also offer a basis for broad application of sHype, though none were built for the highest levels of assurance or use the KVM or VaxVMM approaches.

Micro-kernel system architectures have also grappled with controlling access to system resources. Some systems focus on minimality, while others concentrate system-wide security features in the kernel. Notable examples include EROS [31], L4 [22], and Exokernel [9].

In summary, the sHype approach, targeting the commercial hypervisor space, complements existing secure operating system approaches and is orthogonal to existing secure hypervisor approaches.

### Conclusion

We presented sHype, a secure hypervisor architecture implemented in the Xen open-source hypervisor, which can be downloaded as part of the Xen distribution [35]. We demonstrated how access control in the hypervisor can be implemented with minimal impact on VM performance and without intruding on existing VMM code.

The hypervisor layer is becoming a standard component in system software. With its coarse-grained resource management, protection against workloads, and relatively small footprint, a hypervisor is an ideal vehicle for implementing a flexible security framework that supports a range of security policies.

Currently, we are extending our security architecture to cover multiple hardware platforms, involving policy agreements and the protection of information flows that leave the control of the local hypervisor. We need to establish trust in the semantics and enforcement of the security policy governing the remote hypervisor system before allowing information flow to and from such a system. To this end, we are experimenting with establishing this trust based on the Trusted Computing Groupâ€™s Trusted Platform Module [1] and the related Integrity Measurement Architecture [28].

While Xen separates device drivers and management functions from Dom0 into their own domains, we are experimenting with MAC domains for sharing limited physical resources, e.g., in mid-range servers and desktops. Future work includes accurate accounting of resource use and generating audit trails appropriate for medium-assurance Common Criteria evaluation targets.