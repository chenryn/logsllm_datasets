erals must be shared between multiple coalitions or if differ-
ent coalitions shall be able to co-operate using (cid:2)ltering and
(cid:2)ne-granular access control implemented inside a MAC do-
main.
If virtual resources (e.g. vLANs) are distributed over
multiple hypervisor systems and communicate over a net-
work, sHype relies on the domains bridging those systems
(MAC bridging domains) to securely isolate the vLAN traf-
(cid:2)c from other traf(cid:2)c on the connecting network and to con-
trol access of VMs on the connected systems to the vLAN.
In consequence, sHype controls which domains are able to
connect to MAC-bridging domains but defers isolation and
MAC guarantees for vLAN traf(cid:2)c to these MAC-bridging
domains.
By performing authorization only at bind time and by
caching those decisions, sHype aims to introduce minimal
overhead on the performance-critical path. Policy changes
happen rarely and therefore the related overhead is not on
the critical path. Similarly, since Chinese Wall hooks are in-
voked only during domain operations (e.g, create), they are
also not on the critical path. We ran experiments to measure
the overhead of Type Enforcement hooks that are invoked
when VMs communicate through the Xen event channel
and grant table mechanisms.
In our experiments, we ran the management domain
(Dom0) and one user domain (DomU), both with Fedora
Core 4 Linux installations, on a current uniprocessor desk-
top system. We assigned common Type Enforcement and
Chinese Wall types to Dom0 and DomU. We assigned
DomU a physical disk partition (hda7) that is managed
by Dom0 and mounted by DomU through the Xen virtual
block interface. The experiment made 10 transfers of 108
disk blocks from Dom0 through the virtual block inter-
face to DomU (dd if=/dev/hda7 of=/dev/null
count=10000000). Shared-memory grant tables were
dynamically set up between Dom0 and DomU when trans-
ferring the disk blocks. When we activated the Type En-
forcement policy, the 10 transfers invoked the grant-table
hook approximately 12 (cid:3) 106 times, and took between 1196
and 1198 seconds to complete.
Using this time-to-completion metric, we did not ob-
serve any overhead. The performance was identical for con-
(cid:2)gurations that did not invoke any hooks (null policy) and
for con(cid:2)gurations that did invoke hooks (TE policy).
6 Related Work
While there have been instances of highly secure oper-
ating systems that have been successfully commercialized
8
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:59 UTC from IEEE Xplore.  Restrictions apply. 
(cid:150)e.g., GEMSOS [32, 29], KSOS [24], or Multics [4, 18](cid:150)
their widespread use has not come about. The huge design,
development, and evaluation cost proved justi(cid:2)ed only for
specialized application domains with very high security re-
quirements. Access control with process and (cid:2)le granular-
ity in general-purpose OSs, while possible, is very complex
as illustrated by SELinux [26] policies. Expressing and en-
forcing a simple TCB model in general-purpose OSs is very
dif(cid:2)cult due to interdependencies between processes [17].
VMMs can supplement OS security and provide con(cid:2)ne-
ment in case OS security controls fail [23].
Gold et al. [11] demonstrated that virtualization of a sin-
gle hardware platform enabled the execution of multiple
virtual systems, each running at a single security level, so
that those virtual systems were strongly isolated from each
other. The prevalent approach to creating multiple virtual
machines on a single real hardware platform is to use a
VMM. [12].
Based on VMs, a single system can implement a multi-
level secure system by dividing it into multiple single-level
virtual systems, guaranteeing secure separation. Separa-
tion Kernels are VMMs that completely isolate virtual ma-
chines. Rushby [27] proved that complete isolation and
separation of VMs is possible. Based on Rushby’s work,
Kelem et al. [21] derived a formal model for Separation
VMMs. One example of a more recent separation kernel
design based on virtualization is NetTop [25]. NetTop im-
plements virtual systems that are isolated from each other
on a single hardware platform to allow processing of data
belonging to multiple sensitivity levels on a single system.
Recognizing that strictly separated VMs do not map
well into cooperating distributed applications, some re-
search has examined kernels that enabled secure sharing
between VMs. However, these secure-sharing VMM ap-
proaches [19, 11] tend to suffer from high performance
overhead as well as large trusted computing bases due to
necessary I/O emulation inside the hypervisor layer. Karger
et al. [20] report for the KVM approach a 50-90% overhead
(limited performance tuning) as compared to VM/370 plus
the effort of rewriting 50% of the VMM code; and for the
VaxVMM approach a 10-70% overhead (no performance
tuning, including virtualization overhead) as compared to
the native VMS operating system plus writing the entire
VMM code (no retro(cid:2)t).
Our sHype hypervisor security architecture is motivated
by these prior secure VMM systems to adequately address
performance overhead issues and to strive for minimal de-
sign / code modi(cid:2)cations in modern hypervisors that are tar-
geted for the medium-assurance commercial environment.
Experience with initial sHype prototypes in multiple hyper-
visors is very promising in this regard, but will require vet-
ting against enterprise workloads using standardized bench-
marks as these initiatives and our architecture mature.
Today, a number of virtualization technologies are de-
ployed successfully in the commercial domain, such as
PHYP [13] and VMWare [34]. There are also several
promising research VMMs, such as Terra [10], Xen [3], and
the IBM Research Hypervisor [14]. All of these offer a ba-
sis for broad application of sHype, while none were built
for the highest levels of assurance, nor do any use the KVM
or VaxVMM approaches.
Micro-kernel system architectures also struggled with
the problem of determining how to control access to system
resources. Some systems focus on minimality, forgoing all
but the most basic security. Others concentrate system-wide
security features in the kernel. Notable examples include
EROS [31], L4 [22], and Exokernel [9].
In summary, the sHype approach (cid:150)targeting the commer-
cial hypervisor space(cid:150) is supplementary to existing secure
operating system approaches and orthogonal to existing se-
cure hypervisor approaches.
7 Conclusion
We presented a secure hypervisor architecture, sHype,
that we have successfully implemented in the Xen open-
source hypervisor. It can be downloaded as part of the Xen
distribution [35]. We showed how access control in the hy-
pervisor can be implemented in a way that has very low
impact on VM performance and is non-intrusive to existing
VMM code.
The hypervisor layer is becoming a standard component
in system software. With its coarse-grained resource man-
agement, protection against workloads, and relatively small
footprint, a hypervisor proved the ideal vehicle for imple-
menting a (cid:3)exible security framework that supports a range
of security policies.
Currently, we are extending our security architecture to
cover multiple hardware platforms (cid:150) involving policy agree-
ments and the protection of information (cid:3)ows that leave the
control of the local hypervisor. We need to establish trust
into the semantics and enforcement of the security policy
governing the remote hypervisor system before allowing in-
formation (cid:3)ow to and from such a system. To this end, we
are experimenting with establishing this trust based on the
Trusted Computing Group’s Trusted Platform Module [1]
and the related Integrity Measurement Architecture [28].
While Xen separates device drivers and management
functions from Dom0 into their own domains, we are exper-
imenting with MAC domains for sharing limited physical
resources, e.g., in the mid-range server and desktop space.
Future work includes the accurate accounting of resource
use, and generating audit trails appropriate for medium-
assurance Common Criteria evaluation targets.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:59 UTC from IEEE Xplore.  Restrictions apply. 
9
References
[1] TCG TPM Speci(cid:2)cation Version
www.trustedcomputinggroup.org.
1.2.
http://
[2] Advanced Micro Devices.
(cid:148)Paci(cid:2)ca(cid:148) Technology,
AMD64 Virtualization
Codenamed
Secure Virtual
Machine Architecture Reference Manual, Rev 3.01,
May 2005.
con-
tent type/white papers and tech docs/33047.pdf.
http://www.amd.com/us-en/assets/
[3] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris,
A. Ho, R. Neugebauer, I. Pratt, and A. War(cid:2)eld. Xen and
In Proceedings of the 19th ACM
the art of virtualization.
Symposium on Operating Systems Principles, October 2003.
[4] D. E. Bell and L. J. LaPadula. Secure computer systems:
Uni(cid:2)ed exposition and multics interpretation. Technical re-
port, MITRE MTR-2997, March 1976.
[5] K. J. Biba.
Integrity Considerations for Secure Computer
Systems. Technical Report MTR-3153, Mitre Corporation,
Mitre Corp, Bedford MA, June 1975.
[6] W. E. Boebert and R. Y. Kain. A practical alternative to hier-
archical integrity policies. 8th National Computer Security
Conference, 1985.
[7] D. F. C. Brewer and M. J. Nash. The Chinese Wall Security
Policy. Proc. IEEE Symposium on Security and Privacy,
pages 206(cid:150)214, May 1989.
[8] Common Criteria.
Common Criteria
formation
http://www.commoncriteriaportal.org.
Technology
Security
for
In-
Evaluation.
[9] D. Engler, M. Kaashoek, and J. J. O’Toole. Exokernel: An
operating system architecture for application-level resource
management. Proceedings of the 15th Symposium on Oper-
ating System Principles, 1995.
[10] T. Gar(cid:2)nkel, B. Pfaff, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A Virtual Machine-Based Platform for
Trusted Computing. In Proc. 9th ACM Symposium on Op-
erating Systems Principles, pages 193(cid:150)206, 2003.
[11] B. D. Gold, R. R. Linde, and P. F. Cudney. KVM/370 in Ret-
rospect. In Proc. IEEE Symposium on Security and Privacy,
1984.
[12] R. P. Goldberg. Survey of Virtual Machine Research. IEEE
[13] IBM.
Computer Magazine, 7(6):34(cid:150)45, 1974.
PHYP: Converged
for pSeries
Firmware
iSeries.
1.ibm.com/servers/enable/site/peducation/
abs 2bb2.html.
and
POWER Hypervisor
http://www-
abstracts/
[14] IBM Research.
The Research Hypervisor (cid:150) A
Multi-Platform, Multi-Purpose Research Hypervisor.
http://www.research.ibm.com/ hypervisor.
[15] Intel.
Intel Virtualization Technology Speci(cid:2)ca-
the IA-32 Intel Architecture, April 2005.
computing/
technology/
tion for
ftp://download.intel.com/
vptech/C97063-002.pdf.
[16] J. P. Anderson et. al. Computer security technology planning
study. Technical Report ESD-TR-73-51, Vol. I+II, Air Force
Systems Command, USAF, 1972.
[17] T. Jaeger, R. Sailer, and X. Zhang. Analyzing Integrity Pro-
In 12th USENIX
tection in the SELinux Example Policy.
Security Symposium. USENIX, 2003.
[18] P. A. Karger and R. R. Schell. Thirty Years Later: Lessons
In Annual Com-
from the Multics Security Evaluation.
puter Security Applications Conference (ACSAC), Decem-
ber 2004.
[19] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, and
C. E. Kahn. A VMM Security Kernel for the VAX Archi-
tecture. In Proc. IEEE Symposium on Security and Privacy,
May 1990.
[20] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason,
and C. E. Kahn. A Retrospective on the VAX VMM Secu-
rity Kernel. In IEEE Transaction on Software Engineering,
November 1991.
[21] N. L. Kelem and R. J. Feiertag. A Separation Model for
In Proc. IEEE Symposium on
Virtual Machine Monitors.
Security and Privacy, 1991.
[22] J. Liedtke. On (cid:22)-kernel construction. Proceedings of the
15th Symposium on Operating System Principles, 1995.
[23] S. E. Madnick and J. J. Donovan. Application and analysis
of the virtual machine approach to information system se-
curity and isolation. Proceedings of the ACM workshop on
virtual computer systems, 1973.
[24] E. J. McCauley and P. J. Drongowski. KSOS (cid:150) The design
of a secure operating system. In Proc. In AFIPS Conference,
pages 345(cid:150)353, 1979.
[25] R. Meushaw and D. Simard. NetTop - Commercial Technol-
ogy in High Assurance Applications. Tech Trend Notes, Fall
2000.
[26] National Security Agency.
Security-Enhanced Linux
(SELinux). http://www.nsa.gov/selinux.
[27] J. Rushby. Proof of Separability(cid:151)A veri(cid:2)cation technique
In Proc. 5th International
for a class of security kernels.
Symposium on Programming, volume 137 of Lecture Notes
in Computer Science, pages 352(cid:150)367, Turin, Italy, 1982.
Springer-Verlag.
[28] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design
and Implementation of a TCG-based Integrity Measurement
In Thirteenth USENIX Security Symposium,
Architecture.
pages 223(cid:150)238, August 2004.
[29] R. R. Schell, T. F. Tao, and M. Heckman. Designing the
GEMSOS Security Kernel for Security and Performance.
8th National Computer Security Conference, pages 108(cid:150)
119, 1985.
[30] H. Scherzer, R. Canetti, P. A. Karger, H. Krawczyk, T. Ra-
bin, and D. C. Toll. Authenticating Mandatory Access Con-
trols and Preserving Privacy for a High-Assurance Smart
Card. In (ESORICS), 2003.
[31] J. Shapiro, J. Smith, and D. Farber. EROS: A fast capability
system. Proceedings of the 17th Symposium on Operating
System Principles, 1999.
[32] W. R. Shockley, T. F. Tao, and M. F. Thompson. An
Overview of the GEMSOS Class A1 Technology and Appli-
cation Experience. 11th National Computer Security Con-
ference, pages 238(cid:150)245, October 1988.
[33] R. Spencer, P. Loscocco, S. Smalley, M. Hibler, D. Ander-
son, and J. Lepreau. The Flask Security Architecture: Sys-
tem support for diverse security policies. In Proceedings of
The Eighth USENIX Security Symposium, August 1999.
[34] VMware. http://www.vmware.com/.
[35] XenSource. http://xenbits.xensource.com/xen-unstable.hg.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:59 UTC from IEEE Xplore.  Restrictions apply. 
10