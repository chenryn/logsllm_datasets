in Preventing Malware Infections on Client Computers. In Fifth International
Conference on Information Technology: New Generations (itng 2008). IEEE, Vegas,
Nevada, 628–632. https://doi.org/10.1109/ITNG.2008.233
[12] Getmonero.org. n.d.. MONERO. https://www.getmonero.org/resources/user-
guides/vps_run_node.html
[13] Andy Greenberg. 2011. Crypto Currency.
https://www.forbes.com/f
orbes/2011/0509/technology-psilocybin-bitcoins-gavin-andresen-crypto-
currency.html#5f63487a353e
[14] Lester Hio. 2018. Cybercriminals now cryptojacking mobile phones. https://ww
w.straitstimes.com/tech/cybercriminals-now-cryptojacking-mobile-phones
[15] Geng Hong, Zhemin Yang, Sen Yang, Lei Zhang, Yuhong Nan, Zhibo Zhang, Min
Yang, Yuan Zhang, Zhiyun Qian, and Haixin Duan. 2018. How You Get Shot in the
Back: A Systematical Study about Cryptojacking in the Real World. In Proceedings
of the 2018 ACM SIGSAC Conference on Computer and Communications Security
(Toronto, Canada) (CCS ’18). Association for Computing Machinery, New York,
NY, USA, 1701–1713. https://doi.org/10.1145/3243734.3243840
[16] Dhilung Kirat, Giovanni Vigna, and Christopher Kruegel. 2014. BareCloud:
Bare-metal Analysis-based Evasive Malware Detection. In 23rd USENIX Security
Symposium (USENIX Security 14). USENIX Association, San Diego, CA, 287–301.
https://www.usenix.org/conference/usenixsecurity14/technical-sessions/prese
ntation/kirat
[17] Radhesh Krishnan Konoth, Rolf van Wegberg, Veelasha Moonsamy, and
Herbert Bos. 2019. Malicious cryptocurrency miners: Status and Outlook.
arXiv:1901.10794 [cs.CY]
[18] Radhesh Krishnan Konoth, Emanuele Vineti, Veelasha Moonsamy, Martina
Lindorfer, Christopher Kruegel, Herbert Bos, and Giovanni Vigna. 2018.
MineSweeper: An In-Depth Look into Drive-by Cryptocurrency Mining and
Its Defense (CCS ’18). Association for Computing Machinery, New York, NY, USA,
1714–1730. https://doi.org/10.1145/3243734.3243858
[19] Seunghyeon Lee, Changhoon Yoon, Heedo Kang, Yeonkeun Kim, Yongdae Kim,
Dongsu Han, Sooel Son, and Seungwon Shin. 2019. Cybercriminal minds: an
investigative study of cryptocurrency abuses in the Dark Web. In Network and
Distributed System Security Symposium. Internet Society, San Diego, California,
1–15.
[20] MiningPoolStats. [n.d.]. MiningPoolStats. https://miningpoolstats.stream/mon
ero
rocks/
[21] Yisroel Mirsky, Tomer Doitshman, Yuval Elovici, and Asaf Shabtai. 2018. Kit-
sune: An Ensemble of Autoencoders for Online Network Intrusion Detection.
arXiv:1802.09089 [cs.CR]
[22] MoneroMiner.Rocks. 2020. Browser Based Web Mining. https://monerominer.
[23] Michael Nadeau. 2020. What is cryptojacking? How to prevent, detect, and
recover from it. https://www.csoonline.com/article/3253572/what-is-cryptoja
cking-how-to-prevent-detect-and-recover-from-it.html
[24] Lindsey O’Donnell. 2018. Cryptojacking Campaign Exploits Drupal Bug, Over 400
Websites Attacked. https://threatpost.com/cryptojacking-campaign-exploits-
drupal-bug-over-400-websites-attacked/131733/
[25] Sergio Pastrana and Guillermo Suarez-Tangil. 2019. A First Look at the Crypto-
Mining Malware Ecosystem: A Decade of Unrestricted Wealth. In Proceedings
of the Internet Measurement Conference (Amsterdam, Netherlands) (IMC ’19).
Association for Computing Machinery, New York, NY, USA, 73–86.
https:
//doi.org/10.1145/3355369.3355576
[26] Sergio Pastrana, Daniel Thomas, Alice Hutchings, and Richard Clayton. 2018.
CrimeBB: Enabling Cybercrime Research on Underground Forums at Scale, In
Proceedings of the 2018 World Wide Web Conference. WWW ’18: Proceedings
of the 2018 World Wide Web Conference, 1845–1854.
https://doi.org/10.1145/
3178876.3186178
[27] Ruben Recabarren and Bogdan Carbunar. 2017. Hardening stratum, the bitcoin
pool mining protocol. Proceedings on Privacy Enhancing Technologies 2017, 3
(2017), 57–74.
[28] Jan Rüth, Torsten Zimmermann, Konrad Wolsing, and Oliver Hohlfeld. 2018.
Digging into Browser-Based Crypto Mining. In Proceedings of the Internet Mea-
surement Conference 2018 (Boston, MA, USA) (IMC ’18). ACM, New York, NY,
USA, 70–76. https://doi.org/10.1145/3278532.3278539
[29] Steven Salzberg. 1991. Distance metrics for instance-based learning. In Interna-
[30] Bill Guyton Scott Renfro. n.d.. mergecap - Merges two or more capture files into
tional Symposium on Methodologies for Intelligent Systems. Springer, 399–408.
one. https://www.wireshark.org/docs/man-pages/mergecap.html
[31] DENIS SINEGUBKO. 2017. Hacked Websites Mine Cryptocurrencies.
//blog.sucuri.net/2017/09/hacked-websites-mine-crypocurrencies.html
[32] Sorin Soviany, Andrei Scheianu, George Suciu, Alexandru Vulpe, Octavian Fratu,
and Cristiana Istrate. 2018. Android Malware Detection and Crypto-Mining
Recognition Methodology with Machine Learning. In 2018 IEEE 16th International
Conference on Embedded and Ubiquitous Computing (EUC). IEEE, 14–21.
[33] Forrest Stroud. n.d.. cryptocurrency mining. https://www.webopedia.com/TE
RM/C/cryptocurrency-mining.html
[34] Viabtc.com. 2021. Viabtc mining pool. https://www.viabtc.com/
[35] Wikipedia. 2020. Mining pool. https://en.wikipedia.org/wiki/Mining_pool
[36] Foudge Xmrig, SChernykh. 2021. Stratum mining protocol. https://github.com
https:
/xmrig/xmrig-proxy/blob/master/doc/STRATUM.md
[37] Foudge Xmrig, SChernykh. 2021. XMRig. https://github.com/xmrig/xmrig
[38] Jun Xu, Jinliang Fan, Mostafa H Ammar, and Sue B Moon. 2002. Prefix-preserving
ip address anonymization: Measurement-based security evaluation and a new
cryptography-based scheme. In 10th IEEE International Conference on Network
Protocols, 2002. Proceedings. IEEE, 280–289.
[39] Yuqi Yu, Hanbing Yan, Hongchao Guan, and Hao Zhou. 2018. DeepHTTP:
Semantics-Structure Model with Attention for Anomalous HTTP Traffic Detec-
tion and Pattern Mining. arXiv:1810.12751 [cs.CR]
[40] ZeroDot1. 2019. CoinBlockerLists. https://zerodot1.gitlab.io/CoinBlockerLists
Web/
A ALGORITHM PSEUDOCODE
A.1 Local Similarity Table-Naive
Algorithm 1 shows the specific calculation process of naive local
similarity table mentioned in 3.2.1. We first compute the naive local
similarity for each flow f in the flow set F separately (on line 6).
Then we calculate the local interval distance of the flow f (on lines
7-10). Finally, we calculate the local interval similarity of the flow
f and add the result to the local similarity table (on lines 11-12).
A.2 Local Similarity Table-Improved
Algorithm 2 shows the specific calculation process of the improved
local similarity table mentioned in Section 3.2.1. Compared to Algo-
rithm 1, we add a credible probability coefficient α (on lines 12-17).
1061ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Shize Zhang, Zhiliang Wang, Jiahai Yang, Xin Cheng, Xiaoqian Ma, Hui Zhang, Bo Wang, Zimu Li, and Jianping Wu
Algorithm 1 Local Similarity Table-Naive
Input:
1: The interval k = (xk−1, xk) of block sequence;
2: The flow set, F;
Output:
3: The local similarity table of F in the interval (xk−1, xk);
4: function LST-Naive(xk−1, xk , F)
5:
Initialize an empty local similarity table as LST , a dict in
which key is the flow name and value is the local interval
similarity.
for each f in F do
Initialize the local interval distance as el = xk − xk−1;
for each p in f do
if p in (xk−1, xk) then
el ← min (el , p − xk−1)
xk−xk−1
sl ← 1 −
el
LST .add(f ,sl )
return LST ;
6:
7:
8:
9:
10:
11:
12:
13:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
Algorithm 2 Local Similarity Table-Improved
Input:
1: The interval k = (xk−1, xk) of block sequence;
2: The flow set, F;
Output:
3: The local similarity table of F in the interval (xk−1, xk);
4: function LST-Improved(xk−1, xk , F)
5:
Initialize an empty local similarity table as LST , a dict in
which key is the flow name and value is the local interval
similarity.
for each f in F do
Initialize the packet count as ml = 0
Initialize the local interval distance as el = xk − xk−1;
for each p in f do
ml ← ml + 1
el ← min (el , p − xk−1)
if p in (xk−1, xk) then
Initialize the cumulative distribution probability CDP =
0; Set the probability as P; Set the credible probability coefficient
as α.
xk−xk−1 )ml − ( xk−xk−1−i−1
xk−xk−1
)ml
for i = 0 to el do
P ← ( xk−xk−1−i
CDP ← CDP + P
xk−xk−1 )
α ← 1 − CDP
sl ← α ∗ (1 −
LST .add(f ,sl )
el
return LST ;
Algorithm 3 Global Similarity Table
Input:
1: The detection time interval, [ts , te];
2: The flow set, F;
3: The time series of created block, X;
Output:
4: The global similarity table of F in the interval [ts , te];
5: function GST-Improved(ts , te , F , X)
6:
Initialize an empty global similarity table as GST , a dict in
which key is the flow name and value is the global interval
similarity.
for each xi in X do
7:
8:
9:
10:
11:
12:
13:
14: