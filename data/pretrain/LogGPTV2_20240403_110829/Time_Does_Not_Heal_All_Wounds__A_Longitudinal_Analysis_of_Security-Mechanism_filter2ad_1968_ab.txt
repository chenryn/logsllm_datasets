remote resources to those from trusted domains. Al-
though the original goal of CSP was to make XSS at-
tacks harder—by disabling inline scripting and limiting the
sources trusted for remote JavaScript code—CSP today sup-
ports more than 20 directives controlling, among other things,
the loading of scripts (script-src), images (img-src),
stylesheets (style-src), forms (form-src), and fonts
(font-src). Moreover, CSP can be used to subsume older
standalone headers (e.g., by replacing the anti-clickjacking
X-Frame-Options header with the frame-ancestors
CSP directive) and to instruct a browser to block all mixed
requests (i.e., HTTP requests originating from an HTTPS
page) or automatically upgrade them to HTTPS (upgrade-
insecure-requests).
Next to the large number of resource-speciﬁc directives,
an additional complication is that CSP deﬁnes a fallback
Fig. 3: The fallback tree of CSP fetch directives.
hierarchy for directives [16, 27], as shown in Figure 3. For
instance, even though the default-src directive is used
when a resource-speciﬁc directive is missing, certain types
of directives, such as frame-src (controlling the loading
of frames) and worker-src (controlling the sources of
JavaScript workers) have other intermediate fallback directives
which are supposed to be preferred over default-src. A
browser that does not properly follow this fallback ordering
may allow the loading of speciﬁc types of resources from
domains other than the ones that the developer expected.
Given the large number of directives and fallback
the
combinations, we take a pragmatic approach to limit
number of tests necessary for our evaluation. We start by
eliminating directives controlling the loading of resources
of a type that are not associated with remote-resource
attacks [6, 48, 31, 17, 13], such as the manifest-src
and media-src directives. For the remaining directives,
we follow a data-driven strategy where we crawl the main
pages of the Alexa top 1-million websites and search for
the directives that are most commonly used in real websites.
Our ﬁnal list of directives are the following: default-src,
script-src, child-src, img-src, frame-src,
worker-src, font-src, style-src, connect-src,
frame-ancestors,
upgrade-
insecure-requests, block-all-mixed-content
and require-sri-for. Even after this pruning strategy, as
Table I shows, our test suite contains an order of magnitude
more tests for CSP than for other security mechanisms.
form-action,
G. Referrer Policy [#Tests: 62]
HTTP Referer header indicates from which speciﬁc web
page the current outgoing request originated. For example, if
a user clicks on a link B while on webpage A, the full URL
of webpage A is then sent to webpage B via the Referer
header. Even though browsers always omitted the header when
transitioning from an HTTPS page to an HTTP one, previous
studies have found that the Referer header often contains
personally identiﬁable information which could be used to de-
anonymize users [38].
To mitigate unwanted privacy leaks, modern browsers
allow websites, via the Referrer-Policy header,
to
control when and how a request will contain a Referer
header. Among others, websites can set
to
no-referrer (completely omit
the Referer header),
origin-when-cross-origin (omit the ﬁle path from
the Referer header when sending it to a cross-origin web-
site), and same-origin (send the Referer header if requests
this header
4
default-srcscript-srcchild-srcimg-srcchild-srcframe-srcscript-srcchild-srcworker-srcfont-srcstyle-srcconnect-srcclear whether an older version of the browser would include
the most recent list of HSTS preloaded websites. As such,
our current framework tests the support of HSTS and the
includeSubDomains ﬂag, but not whether the headers are
correctly preloaded.
(a) No SSL-stripping
(b) With SSL-stripping (secure)
I. Test Generation and Veriﬁcation
Firefox v59.0 on Android 5.1.
(c) No SSL-stripping
(d) With SSL-stripping (vulnerable)
Dolphin v12.0.4 on Android 5.1.
Fig. 4: The Dolphin browser does not recognize the HSTS
header and thus allows MITM attackers to perform successful
SSL stripping attacks.
are to the same origin). Our framework utilizes 62 tests to
quantify the extent
the
various values of Referrer-Policy mechanism.
to which mobile browsers support
H. HTTP Strict Transport Security [#Tests: 2]
The HTTP Strict-Transport-Security (HSTS) mechanism
enables websites to instruct browsers to only access them
over HTTPS for a speciﬁc period of time. The HSTS header
can also include the includeSubDomains ﬂag instructing
the browser to utilize HTTPS for communications with all
subdomains of a given website. The HSTS header was intro-
duced to protect against SSL-stripping attacks where a man-
in-the-middle could strip away a website’s HTTP-to-HTTPS
redirection messages and exﬁltrate sensitive user informa-
tion [25]. By setting the HSTS header with and without the
includeSubDomains option and attempting to load the
website and one of its subdomains over HTTP, we test how
well the HSTS mechanism is supported.
Figure 4 shows an example of accessing paypal.com
(which utilizes the HSTS mechanism), ﬁrst in the absence
of an attacker and then in the presence of a MITM attacker
conducting an SSL stripping attack. While Firefox correctly
handles both scenarios, the Dolphin browser does not recog-
nize the HSTS header and therefore attempts to communicate
with paypal.com over HTTP, giving an opportunity to the
MITM attacker to conduct a successful SSL stripping attack.
To solve the Trust On First Use (TOFU) problem of HSTS,
modern browsers preload HSTS headers for websites that
support it. During preliminary experimentation, we discovered
that, given our goal of performing a browser-agnostic, longi-
tudinal analysis of mobile browsers, we could not evaluate
preloaded certiﬁcates for older browsers since it was not
5
Given that writing test cases for hundreds of security mech-
anisms is time consuming and error prone, we implemented
a templating system to help with test generation. For each
security mechanism, we created a set of template ﬁles that
enable us to easily tweak different parameters. For example,
for the X-Frame-Options category, we can modify the content
of the header (Deny, SameOrigin or Allow-From) but we can
also change the URL of the frame (both the schema and the
domains) and its type (iframe, object, embed). Using these
parameters, we can comprehensively assess the support for a
security mechanism including its mainstream usage as well
as potential corner cases. For X-Frame-Options, combining
all these parameters lead to 30 tests for this category. Other
categories, such as CSP, present more complex combinations
that require ﬁner-grained templates.
After the generation process, we used a desktop browser
and a custom browser extension to verify that the tests worked
properly. By using the extension to selectively enable and
disable speciﬁc security mechanisms in the browser, we were
able to verify that the tests indeed failed (i.e., marked as “vul-
nerable”) when the security feature was disabled, and passed
otherwise. Finally, before launching large-scale measurements,
we sampled 60 different mobile browsers—both old and new
versions—directly on mobile devices to gauge whether our
test pages were behaving as expected on these devices. We
will release all 395 generated tests that evaluate the support of
the security mechanisms listed in Table I, in the near future.
III. AUTOMATED VULNERABILITY TESTING
In this section, we ﬁrst describe our methodology for the
selection of the evaluated mobile browsers, and then describe
the framework utilized to evaluate these browsers against the
395 tests presented in Section II.
A. Mobile Browser Dataset
Unlike desktop browsers, mobile app markets house hun-
dreds of different mobile browsers with each browser advertis-
ing a set of unique features, such as voice control, data savings,
and built-in anti-tracking capabilities.
Browser family selection: To identify mobile web browsers
we ﬁrst downloaded all app descriptions that contain the word
“browser” from the Google Play Store, and then manually
ﬁltered out apps that are not web browsers. Because of the
large number of tests and the decreasing population of users
utilizing less popular browsers, we limit our study to the
20 most popular browser families, based on the number of
downloads reported by the Google Play Store. As Table II
shows, these browsers range from billions (Google Chrome)
to millions (Boat Browser) of installations.
TABLE II: The twenty most-popular mobile browsers studied in this paper.
Rank
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
Package name
com.android.chrome
com.UCMobile.intl
org.mozilla.ﬁrefox
com.opera.browser
com.opera.mini.native
com.uc.browser.en
mobi.mgeek.TunnyBrowser
com.ksmobile.cb
com.yandex.browser
com.explore.web.browser
com.mx.browser
com.htc.sense.browser
com.asus.browser
com.baidu.browser.inter
com.appsverse.photon
com.apusapps.browser
com.jiubang.browser
org.adblockplus.browser
com.boatbrowser.free
com.dolphin.browser.express.web
# Installs
1,000,000,000+
500,000,000+
100,000,000+
100,000,000+
100,000,000+
100,000,000+
50,000,000+
50,000,000+
50,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
10,000,000+
5,000,000+
# Versions
22
27
29
25
14
21
22
19
24
11
29
4
9
12
14
16
16
12
7
18
Latest
65.0.3325.109 (2018)
12.2.0.1089 (2018)
59.0 (2018)
45.1.2246.125351 (2018)
32.0.2254.124407 (2018)
11.0.6 (2017)
12.0.4 (2017)
5.22.11.0008 (2018)
18.1.1.642 (2018)
2.6.3 (2018)
5.2.0.3213 (2018)
11.5.08 (2016)
6.4.0.4 (2016)
5.3 (2016)
2.0.5 (2018)
2.17 (2016)
1.3.3 (2017)
8.7.8 (2016)
7.0.2511222747 (2015)
1.5.6.150317 (2015)
7.30.2620152639 (2016)
2.1.2.83 170817 (2018)
8.0.1739.87973 (2015)
1.0.1364.172 (2013)
Oldest
29.0.1547.72 (2013)
8.4.0 (2012)
9.0 (2011)
12.1 (2012)
8.1.0 (2012)
8.8.1 (2012)
3.0.6 (2014)
2.1.0 (2014)
1.1.4 (2011)
11.2.1 (2014)
1.0.0.0 (2012)
1.5 (2012)
1.0.0 (2015)
1.06 (2013)
1.0.0 (2015)
4.0 (2012)
Browser version collection: For a longitudinal analysis of
the support of security mechanisms, we needed to obtain as
many versions as possible for each of the selected mobile
browsers. Since the Google Play store only provides the most
recent version of each app, we relied on third-party app
markets and APK-archiving websites to obtain older versions.
To this end, we implemented a range of website-speciﬁc
crawlers and reverse-engineered the ways utilized by third-
party markets for fetching older APKs.
Through this process, we were able to obtain 1,369 unique
APKs belonging to the 20 selected browser families. Since
we needed to conduct 395 tests per APK (as described in
Section II), analyzing all of these APKs would be prohibitively
time consuming. Therefore, we chose to analyze four APKs per
year for each browser family, ﬁltering our initial set down to
351 unique APKs covering a seven-year period (2011 to 2018).
Table II shows the distribution of these 351 unique APKs
across the selected browser families. For the browsers with
no versions in 2018, we were able to manually verify that this
is because the browser vendors have not released any recent
updates to their browsers. Note that even with this ﬁltering,
we still need to conduct more than 138K tests (395 tests ×
351 APKs) to quantify the evolution of security-mechanism
support in mobile web browsers.
Finally, we should point out that testing older versions
of mobile browsers does not just provide us with interesting
statistics on the evolution of security-mechanism support, but
also gives us a window into the current vulnerability of all
the users utilizing older devices which are no longer receiving
updates from their app stores [40].
Release Time Tagging: To be able to conduct our longitudi-
nal study through the years, we need to be able to not just order
the collected APKs by version but to also date them. For this,
we rely on the methodology of Luo et al. [22] where the date
of each APK is extracted based on the modiﬁcation time of
speciﬁc ﬁles in the APK package (such as the .RSA and .DSA
ﬁles). To account for repackaging that may have occurred by
the third-party APK archiving services, we use this method to
only extract the release year and discard the exact month and
day. Finally, where possible, we cross-validate our results with
release dates found online.
B. Testing Framework
Given the large number of individual tests needed for this
study (138,645 tests), manual testing is highly impractical and
error prone. To automate the testing process, we rely on the
Hindsight framework [22]. Hindsight
is a dynamic testing
framework that can automatically install a mobile browser
APK on a mobile device and navigate the browser to a series
of pages. The framework takes care of assigning APKs to
the appropriate Android version when multiple smartphones
are available for testing, bypassing potential splash screens of
newly installed browsers, and closing existing open tabs. In the
rest of this section, we focus on how we utilized Hindsight to
test the security mechanisms described in Section II and refer
the reader to the original paper for a detailed description of
the Hindsight framework [22].
For each test, three pieces of information are collected
to evaluate its success/failure: a screenshot of the rendered
page, the web server logs indicating which resources were
requested by the browser, and, where necessary, results of
running JavaScript code on the browser that are sent to a
monitoring web server using AJAX messages. For example, in
SOP-related DOM tests, to detect whether a parent frame was
able to access a child frame using the document.location
attribute, the test page attempts the access and sends an AJAX
message to the web server to record the success or failure of
the test.
These three pieces of information are then used by a test-
speciﬁc evaluation logic to determine whether a given security
mechanism is properly implemented by the browser under a
given test. This step uses the web server logs and collected
6
Fig. 5: Vulnerability trend for most- vs. least-popular families
(lower is better).
AJAX messages to detect cases where the browser requests
resources that should have been blocked (according to the
the speciﬁcation of the particular security mechanism being
tested). This log-based analysis works well for most evaluated
browsers.
A class of browsers which require different handling
are “proxy-based” browsers such as UC Browser Mini
(com.uc.browser.en). These are lightweight browsers that ren-
der the page in a remote server and send a compressed
version of the rendered page back to the client browser for
display. We experimentally discovered that for many proxy-
based browsers, the rendering server blindly requests all the
resources that are embedded in a web page, before evaluating
whether security-based restrictions should be applied to these
resources. For example, the remote servers backing a proxy-
based browser may request all third-party resources before