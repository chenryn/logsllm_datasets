extensions/mv3/intro/mv3-overview/. Accessed on 2021-04-29.
[21] chrome. [n. d.]. The activeTab permission. https://developer.chrome.com/docs/
extensions/mv2/manifest/activeTab/#what-activeTab-allows. Accessed on 2021-
04-21.
[22] chrome. [n. d.]. Themes. https://developer.chrome.com/extensions/themes. Ac-
cessed on 2021-04-25.
[23] Chromium. [n. d.]. Changes to Cross-Origin Requests in Chrome Extension Con-
tent Scripts. https://www.chromium.org/Home/chromium-security/extension-
content-script-fetches. Accessed on 2021-04-21.
[24] Xu Duan, Jingzheng Wu, Shouling Ji, Zhiqing Rui, Tianyue Luo, Mutian Yang,
and Yanjun Wu. 2019. VulSniper: Focus Your Attention to Shoot Fine-Grained
Vulnerabilities. In International Joint Conference on Artificial Intelligence (IJCAI).
[25] Ecma International. [n. d.]. ECMAScript 2020 Language Specification. https:
//262.ecma-international.org/11.0. Accessed on 2021-04-21.
[26] Extension Monitor. [n. d.]. Breaking Down the Chrome Web Store. https:
//extensionmonitor.com/blog/breaking-down-the-chrome-web-store-part-1. Ac-
cessed on 2021-04-25.
[27] Aurore Fass. [n. d.]. DoubleX: Statically Detecting Vulnerable Data Flows in
Browser Extensions at Scale. https://github.com/Aurore54F/DoubleX.
[28] Aurore Fass, Michael Backes, and Ben Stock. 2019. HideNoSeek: Camouflaging
Malicious JavaScript in Benign ASTs. In CCS. Code repository: https://github.
com/Aurore54F/HideNoSeek.
[29] Aurore Fass, Michael Backes, and Ben Stock. 2019. JStap: A Static Pre-Filter for
Malicious JavaScript Detection. In ACSAC. Code repository: https://github.com/
Aurore54F/JStap.
[30] Asger Feldthaus and Anders Møller. 2013. Semi-Automatic Rename Refactoring
for JavaScript. In Conference on Object-Oriented Programming, Systems, Languages,
and Applications (OOPSLA).
[31] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. 1987. The Program De-
pendence Graph and Its Use in Optimization. ACM Transactions on Programming
Languages and Systems (TOPLAS) (1987).
[32] HyungSeok Han, DongHyeon Oh, and Sang Kil Cha. 2019. CodeAlchemist:
Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines.
In NDSS.
[33] Ariya Hidayat. [n. d.]. ECMAScript Parsing Infrastructure for Multipurpose
Analysis. http://esprima.org. Accessed on 2021-04-29.
[34] Ariya Hidayat. [n. d.]. Esprima. https://github.com/jquery/esprima. Accessed on
2021-04-29.
[35] Nav Jagpal, Eric Dingle, Jean-Philippe Gravel, Panayiotis Mavrommatis, Niels
Provos, Moheeb Abu Rajab, and Kurt Thomas. 2015. Trends and Lessons from
Three Years Fighting Malicious Extensions. In USENIX Security Symposium.
[36] Simon Holm Jensen, Peter A. Jonsson, and Anders Møller. 2012. Remedying the
Eval That Men Do. In International Symposium on Software Testing and Analysis
(ISSTA).
[37] Simon Holm Jensen, Anders Møller, and Peter Thiemann. 2009. Type Analysis
for JavaScript. In International Symposium on Static Analysis (SAS).
[38] Nenad Jovanovic, Christopher Kruegel, and Engin Kirda. 2006. Pixy: A Static
Analysis Tool for Detecting Web Application Vulnerabilities. In S&P.
[39] Alexandros Kapravelos, Chris Grier, Neha Chachra, Christopher Kruegel, Gio-
vanni Vigna, and Vern Paxson. 2014. Hulk: Eliciting Malicious Behavior in
Browser Extensions. In USENIX Security Symposium.
[40] Soroush Karami, Panagiotis Ilia, Konstantinos Solomos, and Jason Polakis. 2020.
Carnus: Exploring the Privacy Threats of Browser Extension Fingerprinting. In
NDSS.
[41] Jamila Kaya and Jacob Rickerd. [n. d.]. Security Researchers Partner With Chrome
To Take Down Browser Extension Fraud Network Affecting Millions of Users.
https://duo.com/labs/research/crxcavator-malvertising-2020. Accessed on 2021-
04-27.
[42] Ravie Lakshmanan. [n. d.]. 49 New Google Chrome Extensions Caught Hi-
jacking Cryptocurrency Wallets. https://thehackernews.com/2020/04/chrome-
cryptocurrency-extensions.html. Accessed on 2021-04-27.
[43] Ravie Lakshmanan. [n. d.]. Over a Dozen Chrome Extensions Caught Hijacking
Google Search Results for Millions. https://thehackernews.com/2021/02/over-
dozen-chrome-extensions-caught.html. Accessed on 2021-04-27.
[44] Pierre Laperdrix, Oleksii Starov, Quan Chen, Alexandros Kapravelos, and Nick
Nikiforakis. 2021. Fingerprinting in Style: Detecting Browser Extensions via
Injected Style Sheets. In USENIX Security Symposium.
[45] Suyoung Lee, HyungSeok Han, Sang Kil Cha, and Sooel Son. 2020. Montage: A
Neural Network Language Model-Guided JavaScript Engine Fuzzer. In USENIX
Security Symposium.
[46] Einar Lielmanis. [n. d.]. js-beautify. https://www.npmjs.com/package/js-beautify.
Accessed on 2021-04-25.
[47] Benjamin Livshits, Manu Sridharan, Yannis Smaragdakis, Ondřej Lhoták, J. Nelson
Amaral, Bor-Yuh Evan Chang, Samuel Z. Guyer, Uday P. Khedker, Anders Møller,
and Dimitrios Vardoulakis. 2015.
In Defense of Soundiness: A Manifesto. In
Communications of the ACM.
[48] Joseph Menn. [n. d.]. Exclusive: Massive spying on users of Google’s Chrome
shows new security weakness. https://www.reuters.com/article/us-alphabet-
google-chrome-exclusive/exclusive-massive-spying-on-users-of-googles-
chrome-shows-new-security-weakness-idUSKBN23P0JO?il=0. Accessed on
2021-04-27.
[49] Katherine L. Monti. 1995. Folded Empirical Distribution Function Curves (Moun-
tain Plots). In The American Statistician.
[50] Marvin Moog, Markus Demmel, Michael Backes, and Aurore Fass. 2021. Statically
Detecting JavaScript Obfuscation and Minification Techniques in the Wild. In
Dependable Systems and Networks (DSN).
[51] Mozilla. [n. d.]. Firefox Browser Add-ons: Extensions. https://addons.mozilla.
org/en-US/firefox/extensions. Accessed on 2021-04-25.
[52] Mozilla Developer Network. [n. d.]. XPCOM Interfaces. https://developer.mozilla.
org/en-US/docs/Archive/Mozilla/XUL/Tutorial/XPCOM_Interfaces. Accessed on
2021-04-29.
[53] Mozilla Developer Network.
[n. d.].
Content Security Policy (CSP).
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/
manifest.json/content_security_policy. Accessed on 2021-04-21.
[54] Mozilla Developer Network. [n. d.]. Cross-Origin Resource Sharing (CORS).
https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. Accessed on 2021-
07-30.
[55] Mozilla Developer Network. [n. d.]. EventTarget.addEventListener(). https:
//developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener. Ac-
cessed on 2021-04-21.
[56] Mozilla Developer Network. [n. d.]. Functions. https://developer.mozilla.org/en-
US/docs/Web/JavaScript/Reference/Functions. Accessed on 2021-04-29.
[57] Mozilla Developer Network.
[n. d.].
manifest.json: permissions.
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/
manifest.json/permissions. Accessed on 2021-04-21.
[58] Mozilla Developer Network. [n. d.]. Promise. https://developer.mozilla.org/en-
US/docs/Web/JavaScript/Reference/Global_Objects/Promise. Accessed on 2021-
04-21.
[59] Mozilla Developer Network. [n. d.]. Same-origin policy. https://developer.mozilla.
org/en-US/docs/Web/Security/Same-origin_policy. Accessed on 2021-04-29.
[60] Mozilla Developer Network. [n. d.]. tabs.executeScript(). https://developer.mozilla.
org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/executeScript. Ac-
cessed on 2021-04-21.
[61] Mozilla Developer Network. [n. d.]. WindowEventHandlers.onmessage.
https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/
onmessage. Accessed on 2021-04-21.
[62] Mozilla Developer Network. [n. d.]. Window.postMessage(). https://developer.
mozilla.org/en-US/docs/Web/API/Window/postMessage. Accessed on 2021-04-
21.
[63] Tomasz Andrzej Nidecki. [n. d.]. Mutation XSS in Google Search. https://www.
acunetix.com/blog/web-security-zone/mutation-xss-in-google-search. Accessed
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1802[64] Erlend Oftedal. [n. d.]. Retire.js: What you require you must also retire. https:
//retirejs.github.io/retire.js. Accessed on 2021-04-25.
[65] Xiang Pan, Yinzhi Cao, Shuangping Liu, Yu Zhou, Yan Chen, and Tingzhe Zhou.
2016. CSPAutoGen: Black-box Enforcement of Content Security Policy upon
Real-world Websites. In CCS.
[66] Nikolaos Pantelaios, Nick Nikiforakis, and Alexandros Kapravelos. 2020. You’ve
Changed: Detecting Malicious Browser Extensions through their Update Deltas.
In CCS.
[67] Inian Parameshwaran, Enrico Budianto, Shweta Shinde, Hung Dang, Atul Sadhu,
and Prateek Saxena. 2015. DexterJS: Robust Testing Platform for DOM-based
XSS Vulnerabilities. In Foundations of Software Engineering.
[68] puppeteer. [n. d.]. puppeteer. https://github.com/puppeteer/puppeteer. Accessed
on 2021-04-25.
on 2021-04-21.
[69] Iskander Sánchez-Rola, Igor Santos, and Davide Balzarotti. 2017. Extension
Breakdown: Security Analysis of Browsers Extension Resources Control Policies.
In USENIX Security Symposium.
[70] Alexander Sjösten, Steven Acker, and Andrei Sabelfeld. 2017. Discovering Browser
Extensions via Web Accessible Resources. In Conference on Data and Application
Security and Privacy (CODASPY).
[71] Dolière Somé. [n. d.]. extsanalyzer (EmPoWeb). https://gitlab.com/doliere/
extsanalyzer. Accessed on 2021-04-29.
[72] Dolière Francis Somé. 2019. EmPoWeb: Empowering Web Applications with
Browser Extensions. In S&P.
[73] Pratik Soni, Enrico Budianto, and Prateek Saxena. 2015. The Sicilian Defense:
Signature-Based Whitelisting of Web JavaScript. In CCS.
[74] Cristian-Alexandru Staicu, Michael Pradel, and Benjamin Livshits. 2018. SYNODE:
Understanding and Automatically Preventing Injection Attacks on NODE.JS. In
NDSS.
[75] Oleksii Starov, Pierre Laperdrix, Alexandros Kapravelos, and Nick Nikiforakis.
2019. Unnecessarily Identifiable: Quantifying the fingerprintability of browser
extensions due to bloat. In WWW.
[76] Oleksii Starov and Nick Nikiforakis. 2017. Extended Tracking Powers: Measuring
the Privacy Diffusion Enabled by Browser Extensions. In WWW.
[77] Oleksii Starov and Nick Nikiforakis. 2017. XHOUND: Quantifying the Finger-
printability of Browser Extensions. In S&P.
[78] StatCounter. [n. d.]. Desktop Browser Market Share Worldwide. https://gs.
statcounter.com/browser-market-share/desktop/worldwide. Accessed on 2021-
04-25.
[79] Benno Stein, Benjamin Barslev Nielsen, Bor-Yuh Evan Chang, and Anders Møller.
2019. Static Analysis with Demand-Driven Value Refinement. In ACM on Pro-
gramming Languages.
[80] Ben Stock, Martin Johns, Marius Steffens, and Michael Backes. 2017. How the
Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security. In
USENIX Security Symposium.
[81] Jiangang Wang, Xiaohong Li, Xuhui Liu, Xinshu Dong, Junjie Wang, Zhenkai
Liang, and Zhiyong Feng. 2012. An Empirical Study of Dangerous Behaviors in
Firefox Extensions. In International Conference on Information Security (ISC).
[82] Michael Weissbacher, Enrico Mariconti, Guillermo Suarez-Tangil, Gianluca
Stringhini, William Robertson, and Engin Kirda. 2017. Ex-Ray: Detection of
History-Leaking Browser Extensions. In ACSAC.
[83] Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. Modeling
and Discovering Vulnerabilities with Code Property Graphs. In S&P.
A Appendix
This appendix contains some supplementary material.
In particular, Listing 6 illustrates Chrome long-lived connections,
as discussed in Section 2.2.
Listing 7 shows the full data flow report for the vulnerable con-
tent script example of Listing 4, as discussed in Section 4.4.
Table 5 lists the sensitive APIs that we considered for our large-
scale analysis of extensions (provided an extension has the corre-
sponding permissions, cf. Section 4.4.1). We indicate, in particular,
if all extension components can access the sensitive APIs or only
the high-privilege ones.
Figure 6 is a graphical representation of the EDG of the extension
from Listing 2. As discussed in Sections 4.2 and 4.3, it includes
control flows (blue dotted edges), data flows (orange dashed edges),
and message flows (green solid edges).
Finally, Figure 7 presents DoubleX run-time performance de-
pending on the extension size.
/ / Web page code
" Hi BP " } ) ;
" myport " } ) ;
1
2 var port = c h r o m e . r u n t i m e . c o n n e c t ( { name :
3 p o r t . p o s t M e s s a g e ( { g r e e t i n g :
4
5
6
7
8
9
10
/ / Background page code
c h r o m e . r u n t i m e . o n C o n n e c t E x t e r n a l . a d d L i s t e n e r ( f u n c t i o n ( p )
p . o n M e s s a g e . a d d L i s t e n e r ( f u n c t i o n ( message )
r e c e i v e d = m e s s a g e . g r e e t i n g / / Hi BP
} ) ;
} ) ;
Listing 6: Messages: web page - background page (long-lived)
{
{
1 {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39 }
" extension ": " vuln - extension ",
" cs ": {
" direct_dangers ": {
" danger1 ": {
" danger ": " eval ",
" value ": " window . eval ( event . data )",
" sink - param1 ": " event . data ",
" line ": "2 - 2" ,
" filename ": " vuln - extension / content - script . js ",
" dataflow ": true ,
" param_id0 ": {
" received_from_wa_1 ": {
" wa ": " event ",
" line ": "1 - 1" ,
" filename ": " vuln - extension / content - script . js ",
" where ": " event ",
}
}
},
" danger2 ": {
" danger ": " eval ",
" value ": " eval (42) ",
" sink - param1 ": 42 ,
" line ": "4 - 4" ,
" filename ": " vuln - extension / content - script . js ",
" dataflow ": false ,
" param_id0 ": {}
}
},
" indirect_dangers ": {} ,
" exfiltration_dangers ": {}
},
" bp ": {
" direct_dangers ": {} ,
" indirect_dangers ": {} ,
" exfiltration_dangers ": {}
}
Listing 7: Full data flow report for Listing 4
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1803Flaw category
Code Execution
Triggering Downloads
Cross-Origin Requests
Data Exfiltration
All components
eval, setInterval, setTimeout
High-privilege components
tabs.executeScript
downloads.download
$.ajax, jQuery.ajax, fetch, $.get,
jQuery.get, $http.get, $.post,
$http.post, XMLHttpRequest().open,
jQuery.post, XMLHttpRequest.open
bookmarks.getTree, cookies.getAll,
history.search, topSites.get
Table 5: Security- and privacy-critical APIs considered depending on the extension components
Figure 6: EDG of the extension from Listing 2 (see Table 1 for the specific messages exchanged)
Figure 7: Run-time performance of DoubleX depending on the extension size
(for content scripts and background page)
LiteralIdentifiermessageHi BPIdentifierdatarequestObjectExpressionIdentifiermessagePropertyIdentifierdataresponseExpressionStatementCallExpressionMemberExpressionFunctionExpressionMemberExpressionIdentifierIdentifierIdentifierchromeruntimesendMessageBlockStatementresponseExpressionStatementeAssignmentExpressionIdentifierMemberExpressionreceivedIdentifierfarewellExpressionStatementCallExpressionMemberExpressionFunctionExpressionMemberExpressionIdentifierMemberExpressionIdentifierIdentifierIdentifierchromeruntimeonMessageaddListenerIdentifierIdentifierBlockStatementrequestsenderIdentifierdatasendResponsesendResponseExpressionStatementeExpressionStatementeAssignmentExpressionIdentifierreceivedCallExpressionIdentifierLiteralfarewellBye CSSession 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1804