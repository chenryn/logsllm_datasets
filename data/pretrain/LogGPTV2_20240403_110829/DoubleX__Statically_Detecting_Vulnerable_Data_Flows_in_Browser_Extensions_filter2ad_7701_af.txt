以下是经过优化后的参考文献列表，使其更加清晰、连贯和专业：

---

### 参考文献

1. Chrome. [无日期]. Manifest V3 概述. https://developer.chrome.com/docs/extensions/mv3/intro/mv3-overview/. 访问日期: 2021-04-29.
2. Chrome. [无日期]. `activeTab` 权限. https://developer.chrome.com/docs/extensions/mv2/manifest/activeTab/#what-activeTab-allows. 访问日期: 2021-04-21.
3. Chrome. [无日期]. 主题. https://developer.chrome.com/extensions/themes. 访问日期: 2021-04-25.
4. Chromium. [无日期]. Chrome 扩展内容脚本中的跨源请求更改. https://www.chromium.org/Home/chromium-security/extension-content-script-fetches. 访问日期: 2021-04-21.
5. Xu Duan, Jingzheng Wu, Shouling Ji, Zhiqing Rui, Tianyue Luo, Mutian Yang, and Yanjun Wu. 2019. VulSniper: 集中注意力检测细粒度漏洞. 国际人工智能联合会议 (IJCAI).
6. Ecma International. [无日期]. ECMAScript 2020 语言规范. https://262.ecma-international.org/11.0. 访问日期: 2021-04-21.
7. Extension Monitor. [无日期]. 解析 Chrome 网上应用店. https://extensionmonitor.com/blog/breaking-down-the-chrome-web-store-part-1. 访问日期: 2021-04-25.
8. Aurore Fass. [无日期]. DoubleX: 大规模静态检测浏览器扩展中的易受攻击数据流. https://github.com/Aurore54F/DoubleX.
9. Aurore Fass, Michael Backes, and Ben Stock. 2019. HideNoSeek: 在良性 AST 中伪装恶意 JavaScript. 在 CCS. 代码库: https://github.com/Aurore54F/HideNoSeek.
10. Aurore Fass, Michael Backes, and Ben Stock. 2019. JStap: 恶意 JavaScript 检测的静态预过滤器. 在 ACSAC. 代码库: https://github.com/Aurore54F/JStap.
11. Asger Feldthaus and Anders Møller. 2013. JavaScript 的半自动重命名重构. 在面向对象编程、系统、语言和应用程序会议 (OOPSLA).
12. Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. 1987. 程序依赖图及其在优化中的应用. ACM 编程语言与系统事务 (TOPLAS) (1987).
13. HyungSeok Han, DongHyeon Oh, and Sang Kil Cha. 2019. CodeAlchemist: 语义感知代码生成以查找 JavaScript 引擎中的漏洞. 在 NDSS.
14. Ariya Hidayat. [无日期]. 用于多用途分析的 ECMAScript 解析基础设施. http://esprima.org. 访问日期: 2021-04-29.
15. Ariya Hidayat. [无日期]. Esprima. https://github.com/jquery/esprima. 访问日期: 2021-04-29.
16. Nav Jagpal, Eric Dingle, Jean-Philippe Gravel, Panayiotis Mavrommatis, Niels Provos, Moheeb Abu Rajab, and Kurt Thomas. 2015. 三年对抗恶意扩展的经验与教训. 在 USENIX 安全研讨会.
17. Simon Holm Jensen, Peter A. Jonsson, and Anders Møller. 2012. 修复 eval 带来的问题. 在国际软件测试与分析研讨会 (ISSTA).
18. Simon Holm Jensen, Anders Møller, and Peter Thiemann. 2009. JavaScript 类型分析. 在国际静态分析研讨会 (SAS).
19. Nenad Jovanovic, Christopher Kruegel, and Engin Kirda. 2006. Pixy: 一种用于检测 Web 应用程序漏洞的静态分析工具. 在 S&P.
20. Alexandros Kapravelos, Chris Grier, Neha Chachra, Christopher Kruegel, Giovanni Vigna, and Vern Paxson. 2014. Hulk: 诱使浏览器扩展表现出恶意行为. 在 USENIX 安全研讨会.
21. Soroush Karami, Panagiotis Ilia, Konstantinos Solomos, and Jason Polakis. 2020. Carnus: 探索浏览器扩展指纹识别带来的隐私威胁. 在 NDSS.
22. Jamila Kaya and Jacob Rickerd. [无日期]. 安全研究人员与 Chrome 合作打击影响数百万用户的浏览器扩展欺诈网络. https://duo.com/labs/research/crxcavator-malvertising-2020. 访问日期: 2021-04-27.
23. Ravie Lakshmanan. [无日期]. 49 个新的 Google Chrome 扩展被发现劫持加密货币钱包. https://thehackernews.com/2020/04/chrome-cryptocurrency-extensions.html. 访问日期: 2021-04-27.
24. Ravie Lakshmanan. [无日期]. 超过十几个 Chrome 扩展被发现劫持数百万用户的 Google 搜索结果. https://thehackernews.com/2021/02/over-dozen-chrome-extensions-caught.html. 访问日期: 2021-04-27.
25. Pierre Laperdrix, Oleksii Starov, Quan Chen, Alexandros Kapravelos, and Nick Nikiforakis. 2021. 时尚的指纹识别: 通过注入样式表检测浏览器扩展. 在 USENIX 安全研讨会.
26. Suyoung Lee, HyungSeok Han, Sang Kil Cha, and Sooel Son. 2020. Montage: 由神经网络语言模型引导的 JavaScript 引擎模糊测试. 在 USENIX 安全研讨会.
27. Einar Lielmanis. [无日期]. js-beautify. https://www.npmjs.com/package/js-beautify. 访问日期: 2021-04-25.
28. Benjamin Livshits, Manu Sridharan, Yannis Smaragdakis, Ondřej Lhoták, J. Nelson Amaral, Bor-Yuh Evan Chang, Samuel Z. Guyer, Uday P. Khedker, Anders Møller, and Dimitrios Vardoulakis. 2015. 为健全性辩护: 一份宣言. 在通信 ACM.
29. Joseph Menn. [无日期]. 独家: 对 Google Chrome 用户的大规模监视显示了新的安全弱点. https://www.reuters.com/article/us-alphabet-google-chrome-exclusive/exclusive-massive-spying-on-users-of-googles-chrome-shows-new-security-weakness-idUSKBN23P0JO?il=0. 访问日期: 2021-04-27.
30. Katherine L. Monti. 1995. 折叠经验分布函数曲线 (山地图). 在美国统计学家.
31. Marvin Moog, Markus Demmel, Michael Backes, and Aurore Fass. 2021. 野外静态检测 JavaScript 混淆和最小化技术. 在可信赖系统与网络 (DSN).
32. Mozilla. [无日期]. Firefox 浏览器附加组件: 扩展. https://addons.mozilla.org/en-US/firefox/extensions. 访问日期: 2021-04-25.
33. Mozilla Developer Network. [无日期]. XPCOM 接口. https://developer.mozilla.org/en-US/docs/Archive/Mozilla/XUL/Tutorial/XPCOM_Interfaces. 访问日期: 2021-04-29.
34. Mozilla Developer Network. [无日期]. 内容安全策略 (CSP). https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/content_security_policy. 访问日期: 2021-04-21.
35. Mozilla Developer Network. [无日期]. 跨源资源共享 (CORS). https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. 访问日期: 2021-07-30.
36. Mozilla Developer Network. [无日期]. EventTarget.addEventListener(). https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener. 访问日期: 2021-04-21.
37. Mozilla Developer Network. [无日期]. 函数. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions. 访问日期: 2021-04-29.
38. Mozilla Developer Network. [无日期]. manifest.json: 权限. https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions. 访问日期: 2021-04-21.
39. Mozilla Developer Network. [无日期]. Promise. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise. 访问日期: 2021-04-21.
40. Mozilla Developer Network. [无日期]. 同源策略. https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy. 访问日期: 2021-04-29.
41. Mozilla Developer Network. [无日期]. tabs.executeScript(). https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/executeScript. 访问日期: 2021-04-21.
42. Mozilla Developer Network. [无日期]. WindowEventHandlers.onmessage. https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage. 访问日期: 2021-04-21.
43. Mozilla Developer Network. [无日期]. Window.postMessage(). https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage. 访问日期: 2021-04-21.
44. Tomasz Andrzej Nidecki. [无日期]. Google 搜索中的变异 XSS. https://www.acunetix.com/blog/web-security-zone/mutation-xss-in-google-search. 访问日期: 2021-04-21.
45. Erlend Oftedal. [无日期]. Retire.js: 你引入的东西必须也要退役. https://retirejs.github.io/retire.js. 访问日期: 2021-04-25.
46. Xiang Pan, Yinzhi Cao, Shuangping Liu, Yu Zhou, Yan Chen, and Tingzhe Zhou. 2016. CSPAutoGen: 黑盒强制执行真实网站的内容安全策略. 在 CCS.
47. Nikolaos Pantelaios, Nick Nikiforakis, and Alexandros Kapravelos. 2020. 你变了: 通过更新差异检测恶意浏览器扩展. 在 CCS.
48. Inian Parameshwaran, Enrico Budianto, Shweta Shinde, Hung Dang, Atul Sadhu, and Prateek Saxena. 2015. DexterJS: DOM 基于 XSS 漏洞的稳健测试平台. 在软件工程基础.
49. Puppeteer. [无日期]. Puppeteer. https://github.com/puppeteer/puppeteer. 访问日期: 2021-04-25.
50. Iskander Sánchez-Rola, Igor Santos, and Davide Balzarotti. 2017. 扩展分解: 浏览器扩展资源控制策略的安全分析. 在 USENIX 安全研讨会.
51. Alexander Sjösten, Steven Acker, and Andrei Sabelfeld. 2017. 通过 Web 可访问资源发现浏览器扩展. 在数据与应用程序安全与隐私会议 (CODASPY).
52. Dolière Somé. [无日期]. extsanalyzer (EmPoWeb). https://gitlab.com/doliere/extsanalyzer. 访问日期: 2021-04-29.
53. Dolière Francis Somé. 2019. EmPoWeb: 用浏览器扩展增强 Web 应用程序. 在 S&P.
54. Pratik Soni, Enrico Budianto, and Prateek Saxena. 2015. 西西里防御: 基于签名的 Web JavaScript 白名单. 在 CCS.
55. Cristian-Alexandru Staicu, Michael Pradel, and Benjamin Livshits. 2018. SYNODE: 理解并自动防止 NODE.JS 注入攻击. 在 NDSS.
56. Oleksii Starov, Pierre Laperdrix, Alexandros Kapravelos, and Nick Nikiforakis. 2019. 不必要的可识别: 量化浏览器扩展由于膨胀而产生的指纹识别. 在 WWW.
57. Oleksii Starov and Nick Nikiforakis. 2017. 扩展跟踪能力: 衡量浏览器扩展启用的隐私扩散. 在 WWW.
58. Oleksii Starov and Nick Nikiforakis. 2017. XHOUND: 量化浏览器扩展的指纹识别. 在 S&P.
59. StatCounter. [无日期]. 全球桌面浏览器市场份额. https://gs.statcounter.com/browser-market-share/desktop/worldwide. 访问日期: 2021-04-25.
60. Benno Stein, Benjamin Barslev Nielsen, Bor-Yuh Evan Chang, and Anders Møller. 2019. 基于需求驱动值细化的静态分析. 在 ACM 编程语言.
61. Ben Stock, Martin Johns, Marius Steffens, and Michael Backes. 2017. Web 如何自我纠缠: 揭示客户端 Web (不) 安全的历史. 在 USENIX 安全研讨会.
62. Jiangang Wang, Xiaohong Li, Xuhui Liu, Xinshu Dong, Junjie Wang, Zhenkai Liang, and Zhiyong Feng. 2012. Firefox 扩展中危险行为的实证研究. 在国际信息安全会议 (ISC).
63. Michael Weissbacher, Enrico Mariconti, Guillermo Suarez-Tangil, Gianluca Stringhini, William Robertson, and Engin Kirda. 2017. Ex-Ray: 检测泄露历史记录的浏览器扩展. 在 ACSAC.
64. Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. 使用代码属性图建模和发现漏洞. 在 S&P.

---

### 附录

#### 附录 A
本附录包含一些补充材料。特别是，清单 6 展示了 Chrome 的长期连接，如第 2.2 节所述。清单 7 显示了第 4.4 节讨论的易受攻击的内容脚本示例的完整数据流报告。表 5 列出了我们在扩展大规模分析中考虑的敏感 API（前提是扩展具有相应的权限，参见第 4.4.1 节）。我们特别指出，所有扩展组件是否可以访问这些敏感 API，或者只有高特权组件可以访问。

**清单 6: 消息: 网页 - 背景页 (长期)**

```javascript
// 网页代码
var port = chrome.runtime.connect({ name: "myport" });
port.postMessage({ greeting: "Hi BP" });

// 背景页代码
chrome.runtime.onConnectExternal.addListener(function(p) {
    p.onMessage.addListener(function(message) {
        received = message.greeting; // Hi BP
    });
});
```

**清单 7: 清单 4 的完整数据流报告**

```json
{
    "extension": "vuln-extension",
    "cs": {
        "direct_dangers": {
            "danger1": {
                "danger": "eval",
                "value": "window.eval(event.data)",
                "sink-param1": "event.data",
                "line": "2-2",
                "filename": "vuln-extension/content-script.js",
                "dataflow": true,
                "param_id0": {
                    "received_from_wa_1": {
                        "wa": "event",
                        "line": "1-1",
                        "filename": "vuln-extension/content-script.js",
                        "where": "event"
                    }
                }
            },
            "danger2": {
                "danger": "eval",
                "value": "eval(42)",
                "sink-param1": 42,
                "line": "4-4",
                "filename": "vuln-extension/content-script.js",
                "dataflow": false,
                "param_id0": {}
            }
        },
        "indirect_dangers": {},
        "exfiltration_dangers": {}
    },
    "bp": {
        "direct_dangers": {},
        "indirect_dangers": {},
        "exfiltration_dangers": {}
    }
}
```

**表 5: 根据扩展组件考虑的安全性和隐私关键 API**

| 缺陷类别 | 所有组件 | 高特权组件 |
| --- | --- | --- |
| 代码执行 | `eval`, `setInterval`, `setTimeout` | `tabs.executeScript` |
| 触发下载 | | `downloads.download` |
| 跨源请求 | `$$.ajax`, `jQuery.ajax`, `fetch`, `$$get`, `jQuery.get`, `$http.get`, `$$post`, `$http.post`, `XMLHttpRequest().open`, `jQuery.post`, `XMLHttpRequest.open` | |
| 数据外泄 | | `bookmarks.getTree`, `cookies.getAll`, `history.search`, `topSites.get` |

**图 6: 清单 2 中扩展的 EDG (参见表 1 了解具体的消息交换)**

**图 7: DoubleX 运行时性能取决于扩展大小 (对于内容脚本和背景页)**

---

希望这能帮助您更好地组织和展示您的参考文献！