determine independence among values of type $. Finally, the rand ﬂag denotes whether the nonce/associated
data are fresh.
For XOR nodes, we have several cases.
For FIN, OUT, and DUP nodes, Map simply propagates the type of the parent node. For TBC nodes, if the
nonce or input is fresh then the output is (pseudo)random and independent of any prior random values, and
so the node gets type $; otherwise, we propagate the type of the parent node.
If the two input nodes x and y are typed typex and typey,
respectively, with (typex, typey) ∈ {(0, 0), (0, 1), (1, 0)}, then we type the XOR node as typex ⊕ typey. We
brieﬂy explain this reasoning. The fact that typex, typey ∈ {0, 1} means there is a prior query using the
same nonce and associated data. If the two parents have type 0, indicating that the values computed at
those nodes are equal in the two queries, then clearly the value computed at the XOR node is also equal in
the two queries, and thus that node gets type 0. On the other hand, if one parent is typed 0 and the other
is typed 1, then the value computed at the XOR node will be diﬀerent from the corresponding value in the
prior query, and thus the XOR node is assigned type 1. If (typex, typey) = (1, 1) then we cannot say anything
deﬁnitive and thus Map assigns type ⊥ to the XOR node. Finally, suppose input node x has type $. Here we
utilize the ctr values. If the ctr value at x is diﬀerent from the ctr value of y, then the (random) value of x
is independent of the value of y, and hence we assign the XOR node type $.
7
In the next two lemmas we show how determining the types for an unlabeled graph can be used to reason
about the values that one obtains when evaluating the labeled graph. We ﬁrst show that all values typed $
by Map (when inputs are typed ⊥ and hence may be under arbitrary control of the adversary) are indeed
random when computed using Eval and a truly random tweakable permutation.
Lemma 3.1. Let G = (d, r, F, P, L) and let n ≥ 1 be an integer. Set R := Map(G−,⊥, . . . ,⊥, true). Fix
arbitrary Z1, . . . , Zd ∈ {0, 1}n and T ∈ T , and consider the following probabilistic experiment:
1. Choose f ←$ Perm(T , n).
2. Run (Z1, . . . , Zr) := Evalf,f−1(G, T, Z1, . . . , Zd).
Then for any j with R(j) = ($, ctr j), the random variable Zj is uniform and independent of {Zi | ctr i  ctr t. Since ctr j = ctr i, the claim follows.
The next lemma proves a similar property as above for pairs of queries. Consider the query (Y1, . . . , Yr) :=
Evalf,f−1(G, T, Y1, . . . , Yd) followed by query (Z1, . . . , Zr) := Evalf,f−1(G, T, Z1, . . . , Zd), where each Zi is
either chosen equal to Yi (and thus typei = 0), distinct from Yi (and thus typei = 1), or uniformly (and
thus typei = $). We show that for all nodes j of type $ assigned by Map(G−, type1, . . . , typed, false), the
statistical diﬀerence between Zj and uniform is small, even conditioned on all the {Yi}.
Lemma 3.2. Let G = (d, r, F, P, L) and let n ≥ 1 be an integer. Fix arbitrary Y1, . . . , Yr ∈ {0, 1}n and
T ∈ T such that the set S = {f ∈ Perm(T , n) | (Y1, . . . , Yr) = Evalf,f−1(G, T, Y1, . . . , Yd)} is non-empty. For
each i ≤ d, choose Zi and typei in one of the following ways: (i) Zi = Yi and typei = 0, (ii) Zi 6= Yi and
typei = 1, or (iii) Zi ←$ {0, 1}n and typei = $. Let R = Map(G−, type1, . . . , typed, false). Consider the
following probabilistic experiment:
1. Choose f ←$ S.
2. Run (Z1, . . . , Zr) := Evalf,f−1(G, T, Z1, . . . , Zd).
Then for any j with R(j) = ($, ctr j), the statistical diﬀerence between the random variable Zj and uniform,
conditioned on {Zi | ctr i  ctr t, in which case the claims also follow. Finally, if F(j) = TBC then let i be the parent of j.
Let ‘ = L(j), and let T = (N, A, v). Then Yj = f(T ∗, Yp) and Zj = f(T ∗, Zp), where T ∗ = (N, A, v + |‘|).
Consider the following cases:
8
−
proc Priv(G
1 , G
−
−
2 are unlabeled graphs of Enc and Tag, respectively.
// G
1 and G
−
2 )
−
−
01 (d1, r1, F1, P1) := G
1 ; (d2, r2, F2, P2) := G
2
// Check that output of Tag is random
2 ,⊥,⊥, true); (type, ctr) := R(r2)
−
02 R := Map(G
03 if type 6= $ then return false
1 ,⊥,⊥,⊥,⊥, true)
−
04 R := Map(G
05 (type1, ctr1) := R(r1 − 1); (type2, ctr2) := R(r1)
06 return ((type1 = $) ∧ (type2 = $) ∧ (ctr1 6= ctr2))
// Check that output blocks of Enc are random and independent
−
proc Auth(G
1 , G
−
−
2 are unlabeled graphs of Dec and Tag, respectively.
// G
1 and G
−
2 )
−
−
11 (d1, r1, F1, P1) := G
1 ; (d2, r2, F2, P2) := G
2
// Check that output of Tag is random when the nonce/associated data are fresh
2 ,⊥,⊥, true); (type, ctr) := R(r2)
−
12 R := Map(G
13 if type 6= $ then return false
// Check that if there are two executions of Dec with the same initial state
// but diﬀerent input blocks, then the ﬁrst half of the ﬁnal state is random
14 for (x, y) ∈ {(0, 1), (1, 0), (1, 1)} do
15
16
1 , 0, 0, x, y, false); (type, ctr) := R(r1 − 3)
−
R := Map(G
if type 6= $ then return false
// Check that if the ﬁrst half of the initial state input to Dec is random,
// then the ﬁrst half of the ﬁnal state output by Dec is random
17 for x, y, z ∈ {0, 1} do
18
19
1 , $, x, y, z, false); (type, ctr) := R(r1 − 3)
−
R := Map(G
if type 6= $ then return false
// Check that if there are two executions of Tag in which the ﬁrst halves of the
// initial states are diﬀerent, then the resulting tags are random and independent
20 for x ∈ {0, 1} do
−
R := Map(G
2 , 1, x, false); (type, ctr) := R(r2)
21
if type 6= $ then return false
22
23 return true
Figure 3.6: Tests to determine if a scheme Π satisﬁes privacy and authenticity, respectively.
Case 1. typei ∈ {0,⊥}. Then (typej, ctr j) = (typei, ctr i) and the claims follow.
Case 2. typei = 1. Then typej = $ and ctr j ≥ 1. First, since ctr t ≥ ctr j when t is a descendant of j, we
see that no node t with ctr t < ctr j is a descendant of j. Next, since Zi 6= Yi and we use a diﬀerent tweak
for each TBC node, Zj ←$ {0, 1}n\{Yj} is independent of {Yt | t ≤ r} and {Zt | ctr t < ctr j}. Hence the
statement of the lemma follows.
Case 3. typei = $. Then typej = $. By the induction hypothesis, Zi is (2ctr i/2n)-close to uniform (even
conditioned on {Yt | t ≤ r} and {Zt | ctr t < ctr i}). If Zi 6= Yi, which occurs except with probability at most
(2ctr i+1)/2n, then Zj is 2−n-close to uniform (even conditioned on all the {Yt} values and {Zt | ctr t < ctr j}).
Hence, overall, Zj is (2ctr i + 2)/2n-close to uniform (conditioned on {Yt | t ≤ r} and {Zt | ctr t < ctr j}) and
the statement of the lemma follows since we have ctr j ≥ ctr i + 1.
3.3 Verifying Privacy and Authenticity
We use Lemmas 3.1 and 3.2 to automatically check if a candidate AE scheme is secure in the sense of both
privacy and authenticity. Speciﬁcally, Figure 3.6 shows procedures Priv and Auth to check for privacy and
9
Figure 3.7: Left: A scheme that can be accepted or (incorrectly) rejected by Priv, depending on the topological
ordering of the nodes. Middle left: The corresponding Enc graph. Middle right: The (type, ctr) pairs in each
node of the Enc graph if the left TBC node is visited ﬁrst. The graph is (incorrectly) rejected because the two OUT
nodes both have ctr = 2. Right: The (type, ctr) pairs in each node of the Enc graph if the right TBC is visited ﬁrst.
This time, the graph is accepted because the two OUT nodes have diﬀerent ctr values.
authenticity, respectively, of an AE scheme Π.
Intuitively, for privacy we verify that the tag and all the ciphertext blocks output by the scheme are
random and independent (namely, have type $ and distinct counter values) even when the inputs—that is,
the message blocks—are controlled by the adversary (namely, have type ⊥). We remark that the values of
ctr assigned to nodes by the map R output by Map depend on the topological order in which Map traverses
the input graph; see Figure 3.7 for an example. Thus, there are schemes which, depending on the order in
which the graph is traversed, are accepted or (incorrectly) rejected by Priv (due to the ctr values for the OUT
nodes being equal). This shows that the test is sound but not complete.8
The authenticity check for a scheme (Enc, Dec, Tag) is more complicated. We now argue informally that
if a scheme passes the checks of algorithm Auth (cf. Figure 3.6), then the scheme satisﬁes authenticity. To
see this, consider a candidate forgery (N, A, C) output by an adversary. First suppose there was no prior
query (N, A, ?) to the encryption oracle. Auth veriﬁes that the Tag algorithm outputs a random tag when
the tweak for the TBC node in Tag was not used previously; thus, the candidate forgery will be invalid except
with probability 2−τ. (Recall that τ is the tag length.) Next, consider the case that there was a prior
encryption query (N, A, M), and let C0 be the corresponding ciphertext. Then C 6= C0; otherwise (N, A, C)
is not a valid forgery. If C and C0 only diﬀer in their tags, the candidate forgery must be invalid because
the tag is uniquely determined by N, A, and the rest of the ciphertext. Otherwise, consider the ﬁrst pair of
blocks in which C and C0 diﬀer. Auth veriﬁes that (i) the ﬁrst half of the ﬁnal state produced by Dec when
run on those blocks is random, (ii) Dec has the property that if the ﬁrst half of its initial state is random,
then the ﬁrst half of the ﬁnal state it outputs is random, and (iii) Tag has the property that if the ﬁrst half
of its initial state is random, then the tag it outputs is random9. Taken together, these imply that the tag
will be random, and hence the candidate forgery will be invalid except with probability 2−τ.
To demonstrate the strength of our approach, consider a modiﬁed version of the OTR scheme [20]. The
original OTR scheme (cf. Figure 3.8) is secure, which our automated tests conﬁrm. If, however, the scheme
is changed so that Σ is computed as the checksum of the odd blocks M1 ⊕ M3 ⊕ ··· , rather than the even
blocks, then it becomes insecure. And, indeed, the modiﬁed scheme does not pass our tests. Namely, on
input (0, 0, 1, 0) to Map we ﬁnd that the required FIN node is typed 1 instead of $.
Proofs of correctness. We now prove that schemes that pass our tests are secure. We ﬁrst show that if
Priv returns true when given the (unlabeled) graphs corresponding to the Enc and Tag components of some
AE scheme, then that scheme satisﬁes privacy when instantiated with a secure tweakable blockcipher.
8In Appendix C we describe a technique for generating attacks given a scheme which fails the tests of Figure 3.6. Looking
ahead, we ﬁnd only a handful of schemes which we can neither prove secure nor ﬁnd concrete attacks for; see Section 4.
9Although here we are considering just the ﬁrst half of the ﬁnal/initial state, if one switches to the second half then one will