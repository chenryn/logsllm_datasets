# 分布式理论下面，我们来学习一下分布式方面的理论知识。首先，你需要看一下 [An introduction to distributedsystems](https://github.com/aphyr/distsys-class)。这只是某个教学课程的提纲，我觉得还是很不错的，几乎涵盖了分布式系统方面的所有知识点，而且辅以简洁并切中要害的说明文字，非常适合初学者提纲挈领地了解知识全貌，快速与现有知识结合，形成知识体系。这也是一个分布式系统的知识图谱，可以让你看到分布式系统的整体全貌。你可以根据这个知识图Google 下去，然后你会学会所有的东西。然后，你需要了解一下拜占庭将军问题（[Byzantine GeneralsProblem](https://en.wikipedia.org/wiki/Byzantine_fault_tolerance)）。这个问题是莱斯利·兰波特（LeslieLamport）于 1982年提出用来解释一致性问题的一个虚构模型（[论文地址](https://www.microsoft.com/en-us/research/uploads/prod/2016/12/The-Byzantine-Generals-Problem.pdf)）。拜占庭是古代东罗马帝国的首都，由于地域宽广，守卫边境的多个将军（系统中的多个节点）需要通过信使来传递消息，达成某些一致的决定。但由于将军中可能存在叛徒（系统中节点出错），这些叛徒将努力向不同的将军发送不同的消息，试图会干扰一致性的达成。拜占庭问题即为在此情况下，如何让忠诚的将军们能达成行动的一致。对于拜占庭问题来说，假如节点总数为 `N`，叛变将军数为 `F`，则当`N >= 3F + 1` 时，问题才有解，即拜占庭容错（Byzantine FaultTolerant，BFT）算法。拜占庭容错算法解决的是，网络通信可靠但节点可能故障情况下一致性该如何达成的问题。最早由卡斯特罗（Castro）和利斯科夫（Liskov）在 1999年提出的实用拜占庭容错（Practical Byzantine FaultTolerant，PBFT）算法，是第一个得到广泛应用的 BFT 算法。只要系统中有 2/3的节点是正常工作的，则可以保证一致性。PBFT算法包括三个阶段来达成共识：预准备（Pre-Prepare）、准备（Prepare）和提交（Commit）。这里有几篇和这个问题相关的文章，推荐阅读。-   [Dr.Dobb's - The Byzantine Generals    Problem](http://www.drdobbs.com/cpp/the-byzantine-generals-problem/206904396)-   [The Byzantine Generals    Problem](http://blog.jameslarisch.com/the-byzantine-generals-problem)-   [Practicle Byzantine Fault    Tolerance](http://pmg.csail.mit.edu/papers/osdi99.pdf)拜占庭容错系统研究中有三个重要理论：CAP、FLP 和 DLS。-   [CAP 定理](https://en.wikipedia.org/wiki/CAP_theorem)，CAP    理论相信你应该听说过不下 N 次了。CAP    定理是分布式系统设计中最基础也是最为关键的理论。CAP    定理指出，分布式数据存储不可能同时满足以下三个条件：一致性（Consistency）、可用性（Availability）和    分区容忍（Partition tolerance）。    "在网络发生阻断（partition）时，你只能选择数据的一致性（consistency）或可用性（availability），无法两者兼得"。    论点比较直观：如果网络因阻断而分隔为二，在其中一边我送出一笔交易："将我的十元给    A"；在另一半我送出另一笔交易："将我的十元给    B"。此时系统要不是，a）无可用性，即这两笔交易至少会有一笔交易不会被接受；要不就是，b）无一致性，一半看到的是    A 多了十元而另一半则看到 B 多了十元。要注意的是，CAP    理论和扩展性（scalability）是无关的，在分片（sharded）或非分片的系统皆适用。-   [FLP    impossibility](http://the-paper-trail.org/blog/a-brief-tour-of-flp-impossibility/)，在异步环境中，如果节点间的网络延迟没有上限，只要有一个恶意的节点存在，就没有算法能在有限的时间内达成共识。但值得注意的是，    ["Las Vegas"    algorithms](https://en.wikipedia.org/wiki/Las_Vegas_algorithm)（这个算法又叫撞大运算法，其保证结果正确，只是在运算时所用资源上进行赌博，一个简单的例子是随机快速排序，它的    pivot    是随机选的，但排序结果永远一致）在每一轮皆有一定机率达成共识，随着时间增加，机率会越趋近于    1。而这也是许多成功的共识算法会采用的解决问题的办法。-   容错的上限，从[DLS    论文](http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf)    中我们可以得到以下结论：    -   在部分同步（partially        synchronous）的网络环境中（即网络延迟有一定的上限，但我们无法事先知道上限是多少），协议可以容忍最多        1/3 的拜占庭故障（Byzantine fault）。    -   在异步（asynchronous）的网络环境中，具有确定性质的协议无法容忍任何错误，但这篇论文并没有提及        [randomized        algorithms](http://link.springer.com/chapter/10.1007%2F978-3-540-77444-0_7)，在这种情况下可以容忍最多        1/3 的拜占庭故障。    -   在同步（synchronous）网络环境中（即网络延迟有上限且上限是已知的），协议可以容忍        100% 的拜占庭故障，但当超过 1/2        的节点为恶意节点时，会有一些限制条件。要注意的是，我们考虑的是\"具有认证特性的拜占庭模型（authenticated        Byzantine）\"，而不是\"一般的拜占庭模型\"；具有认证特性指的是将如今已经过大量研究且成本低廉的公私钥加密机制应用在我们的算法中。当然，还有一个著名的"8 条荒谬的分布式假设（[Fallacies of DistributedComputing](http://en.wikipedia.org/wiki/Fallacies_of_distributed_computing)）"。1.  网络是稳定的。2.  网络传输的延迟是零。3.  网络的带宽是无穷大。4.  网络是安全的。5.  网络的拓扑不会改变。6.  只有一个系统管理员。7.  传输数据的成本为零。8.  整个网络是同构的。阿尔农·罗特姆 - 盖尔 - 奥兹（Arnon Rotem-Gal-Oz）写了一篇长文 [Fallaciesof Distributed ComputingExplained](http://www.rgoarchitects.com/Files/fallacies.pdf)来解释为什么这些观点是错误的。另外，[加勒思·威尔逊（GarethWilson）的文章](https://www.computing.dcu.ie/~ray/teaching/CA485/notes/fallacies.pdf)则用日常生活中的例子，对这些点做了通俗的解释。为什么我们深刻地认识到这 8个错误？是因为，这要我们清楚地认识到------在分布式系统中错误是不可能避免的，我们在分布式系统中，能做的不是避免错误，而是要把错误的处理当成功能写在代码中。下面分享几篇一致性方面的论文。-   当然，关于经典的 CAP 理论，也存在一些误导的地方，这个问题在 2012    年有一篇论文 [CAP Twelve Years Later: How the Rules Have    Changed](https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed)    （[中译版](http://www.infoq.com/cn/articles/cap-twelve-years-later-how-the-rules-have-changed)）中做了一些讨论，主要是说，在    CAP 中最大的问题就是分区，也就是 P，在 P 发生的情况下，非常难以保证    C 和 A。然而，这是强一致性的情况。    其实，在很多时候，我们并不需要强一致性的系统，所以后来，人们争论关于数据一致性和可用性时，主要是集中在强一致性的    ACID 或最终一致性的 BASE。当时，BASE    还不怎么为世人所接受，主要是大家都觉得 ACID    是最完美的模型，大家很难接受不完美的 BASE。在 CAP    理论中，大家总是觉得需要"三选二"，也就是说，P    是必选项，那"三选二"的选择题不就变成数据一致性    (consistency)、服务可用性 (availability) 间的"二选一"？    然而，现实却是，P 很少遇到，而 C 和 A    这两个事，工程实践中一致性有不同程度，可用性也有不同等级，在保证分区容错性的前提下，放宽约束后可以兼顾一致性和可用性，两者不是非此即彼。其实，在一个时间可能允许的范围内是可以取舍并交替选择的。-   [Harvest, Yield, and Scalable Tolerant    Systems](https://pdfs.semanticscholar.org/5015/8bc1a8a67295ab7bce0550886a9859000dc2.pdf)    ，这篇论文是基于上面那篇"CAP 12 年后"的论文写的，它主要提出了    Harvest 和 Yield    概念，并把上面那篇论文中所讨论的东西讲得更为仔细了一些。-   [Base: An Acid    Alternative](https://queue.acm.org/detail.cfm?id=1394128)    （[中译版](http://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html)），本文是    eBay 的架构师在 2008 年发表给 ACM 的文章，是一篇解释 BASE    原则，或者说最终一致性的经典文章。文中讨论了 BASE 与 ACID    原则的基本差异,    以及如何设计大型网站以满足不断增长的可伸缩性需求，其中有如何对业务做调整和折中，以及一些具体的折中技术的介绍。一个比较经典的话是------"在对数据库进行分区后,    为了可用性（Availability）牺牲部分一致性（Consistency）可以显著地提升系统的可伸缩性    (Scalability)"。-   [Eventually    Consistent](https://www.allthingsdistributed.com/2008/12/eventually_consistent.html)    ，这篇文章是 AWS 的 CTO 维尔纳·沃格尔（Werner Vogels）在 2008    年发布在 ACM Queue 上的一篇数据库方面的重要文章，阐述了 NoSQL    数据库的理论基石------最终一致性，对传统的关系型数据库（ACID，Transaction）做了较好的补充。
# 小结好了，总结一下今天分享的内容。文章的开头，我给出了学习分布式架构需要注意的几个关键点，然后列出了入门学习的资源，基本涵盖了所有与系统架构相关的技术。随后讲述了拜占庭容错系统研究中有三个重要理论：CAP、FLP和 DLS，以及 8条荒谬的分布式假设，从理论和认知等角度让你更为清楚地理解分布式系统。最后分享了几篇一致性相关的论文，很实用很经典，推荐阅读。下篇文章中，我将推荐一些分布式架构的经典图书和论文，并给出了导读文字，几乎涵盖了分布式系统架构方面的所有关键的理论知识。敬请期待。下面是《程序员练级攻略》系列文章的目录。-   [开篇词](https://time.geekbang.org/column/article/8136)-   入门篇    -   [零基础启蒙](https://time.geekbang.org/column/article/8216)    -   [正式入门](https://time.geekbang.org/column/article/8217)-   修养篇    -   [程序员修养](https://time.geekbang.org/column/article/8700)-   专业基础篇    -   [编程语言](https://time.geekbang.org/column/article/8701)    -   [理论学科](https://time.geekbang.org/column/article/8887)    -   [系统知识](https://time.geekbang.org/column/article/8888)-   软件设计篇    -   [软件设计](https://time.geekbang.org/column/article/9369)-   高手成长篇    -   [Linux        系统、内存和网络（系统底层知识）](https://time.geekbang.org/column/article/9759)    -   [异步 I/O 模型和 Lock-Free        编程（系统底层知识）](https://time.geekbang.org/column/article/9851)    -   [Java 底层知识](https://time.geekbang.org/column/article/10216)    -   [数据库](https://time.geekbang.org/column/article/10301)    -   [分布式架构入门（分布式架构）](https://time.geekbang.org/column/article/10603)    -   [分布式架构经典图书和论文（分布式架构）](https://time.geekbang.org/column/article/10604)    -   [分布式架构工程设计        (分布式架构)](https://time.geekbang.org/column/article/11232)    -   [微服务](https://time.geekbang.org/column/article/11116)    -   [容器化和自动化运维](https://time.geekbang.org/column/article/11665)    -   [机器学习和人工智能](https://time.geekbang.org/column/article/11669)    -   [前端基础和底层原理（前端方向）](https://time.geekbang.org/column/article/12271)    -   [前端性能优化和框架（前端方向）](https://time.geekbang.org/column/article/12389)    -   [UI/UX        设计（前端方向）](https://time.geekbang.org/column/article/12486)    -   [技术资源集散地](https://time.geekbang.org/column/article/12561)![](Images/1c1e992cf41f5294df097aabed82f9e4.png){savepage-src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg"}
# 82 \| 程序员练级攻略：分布式架构经典图书和论文
# 经典图书首先，我推荐几本分布式架构方面的经典图书。-   **Distributed Systems for fun and    profit](http://book.mixu.net/distsys/single-page.html)**，这是一本免费的电子书。作者撰写此书的目的是希望以一种更易于理解的方式，讲述以亚马逊的    Dynamo、谷歌的 Bigtable 和 MapReduce    等为代表的分布式系统背后的核心思想。-   **Designing Data Intensive    Applications](https://book.douban.com/subject/27154352/)**，这本书是一本非常好的书，我们知道，在分布式的世界里，数据结点的扩展是一件非常麻烦的事。这本书深入浅出地用很多的工程案例讲解了如何让数据结点做扩展。作者马丁·科勒普曼（Martin    Kleppmann）在分布式数据系统领域有着很深的功底，并在这本书中完整地梳理各类纷繁复杂设计背后的技术逻辑，不同架构之间的妥协与超越，很值得开发人员与架构设计者阅读。    这本书深入到 B-Tree、SSTables、LSM    这类数据存储结构中，并且从外部的视角来审视这些数据结构对 NoSQL    和关系型数据库的影响。这本书可以让你很清楚地了解到真正世界的大数据架构中的数据分区、数据复制的一些坑，并提供了很好的解决方案。最赞的是，作者将各种各样技术的本质非常好地关联在一起，令你触类旁通。    而且，这本书完全就是抽丝剥茧，循循善诱，从"提出问题"到"解决问题"、"解决方案"、"优化方案"和"对比不同的方案"，一点一点地把非常晦涩的技术和知识展开。本书的引用相当多，每章后面都有几百个    Reference，通过这些 Reference 你可以看到更为广阔、更为精彩的世界。-   [Distributed Systems: Principles and    Paradigms](http://barbie.uta.edu/~jli/Resources/MapReduce&Hadoop/Distributed%20Systems%20Principles%20and%20Paradigms.pdf)    ，本书是由计算机科学家安德鲁·斯图尔特·塔能鲍姆（Andrew S.    Tanenbaum）和其同事马丁·范·斯蒂恩（Martin van    Steen）合力撰写的，是分布式系统方面的经典教材。    语言简洁，内容通俗易懂，介绍了分布式系统的七大核心原理，并给出了大量的例子；系统讲述了分布式系统的概念和技术，包括通信、进程、命名、同步化、一致性和复制、容错以及安全等；讨论了分布式应用的开发方法（即范型）。但本书不是一本指导"如何做"的手册，仅适合系统性地学习基础知识，了解编写分布式系统的基本原则和逻辑。中文翻译版为[《分布式系统原理与范型》（第二版）](https://item.jd.com/10079452.html)。-   [Scalable Web Architecture and Distributed    Systems](http://www.aosabook.org/en/distsys.html)，\    这是一本免费的在线小册子，其中文翻译版 [可扩展的 Web    架构和分布式系统](http://nettee.github.io/posts/2016/Scalable-Web-Architecture-and-Distributed-Systems/)。本书主要针对面向互联网（公网）的分布式系统，但其中的原理或许也可以应用于其他分布式系统的设计中。作者的观点是，通过了解大型网站的分布式架构原理，小型网站的构建也能从中受益。本书从大型互联网系统的常见特性，如高可用、高性能、高可靠、易管理等出发，引出了一个类似于    Flickr 的典型的大型图片网站的例子。-   [Principles of Distributed    Systems](http://dcg.ethz.ch/lectures/podc_allstars/lecture/podc.pdf)    ，本书是苏黎世联邦理工学院的教材。它讲述了多种分布式系统中会用到的算法。虽然分布式系统的不同场景会用到不同算法，但并不表示这些算法都会被用到。不过，作为学生来说，掌握了算法设计的精髓也就能举一反三地设计出解决其他问题的算法，从而得到分布式系统架构设计中所需的算法。``{=html}
# 经典论文