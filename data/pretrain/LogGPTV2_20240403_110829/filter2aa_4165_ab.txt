    }
    # Script execution starts here
    BEGIN {
       main(10, 60)
    }
'
```
Awk Arrays
---------
### Array with index
```
awk 'BEGIN {
    arr[0] = "foo";
    arr[1] = "bar";
    print(arr[0]); # => foo
    delete arr[0];
    print(arr[0]); # => ""
}'
```
### Array with key
```
awk 'BEGIN {
    assoc["foo"] = "bar";
    assoc["bar"] = "baz";
    print("baz" in assoc); # => 0
    print("foo" in assoc); # => 1
}'
```
### Array with split
```
awk 'BEGIN {
    split("foo:bar:baz", arr, ":");
    for (key in arr)
        print arr[key];
}'
```
### Array with asort
```
awk 'BEGIN {
    arr[0] = 3
    arr[1] = 2
    arr[2] = 4
    n = asort(arr)
    for (i = 1; i  0; i--)
        print x[i]
    }
' /etc/passwd
```
#### Reverse fields
```
awk -F: '{
    for (i = NF; i > 0; i--)
        printf("%s ",$i);
    print ""
}' /etc/passwd
```
#### Sum by record
```
awk -F: '{
    s=0;
    for (i = 1; i <= NF; i++)
        s += $i;
    print s
}' /etc/passwd
```
#### Sum whole file
```
awk -F: '
    {for (i = 1; i <= NF; i++)
        s += $i;
    };
    END{print s}
' /etc/passwd
```
### while {.row-span-2}
```
awk 'BEGIN {
    while (a < 10) {
        print "- " " concatenation: " a
        a++;
    }
}'
```
#### do...while
```
awk '{
    i = 1
    do {
        print $0
        i++
    } while (i <= 5)
}' /etc/passwd
```
### Break
```
awk 'BEGIN {
    break_num = 5
    for (i = 0; i < 10; i++) {
        print i
        if (i == break_num)
            break
    }
}'
```
### Continue
```
awk 'BEGIN {
    for (x = 0; x <= 10; x++) {
        if (x == 5 || x == 6)
            continue
        printf "%d ", x
    }
    print ""
}'
```
Awk Formatted Printing
---------
### Usage
#### Right align
```
awk 'BEGIN{printf "|%10s|\n", "hello"}'
|     hello|
```
#### Left align
```
awk 'BEGIN{printf "|%-10s|\n", "hello"}'
|hello     |
```
### Common specifiers 
| Character     | Description           |
|---------------|-----------------------|
| `c`           | ASCII character       |
| `d`           | Decimal integer       |
| `e`, `E`, `f` | Floating-point format |
| `o`           | Unsigned octal value  |
| `s`           | String                |
| `%`           | Literal %             |
### Space
```
awk -F: '{
    printf "%-10s %s\n", $1, $(NF-1)
}' /etc/passwd | head -n 3
```
Outputs
```shell script
root       /root
bin        /bin
daemon     /sbin
```
### Header
```
awk -F: 'BEGIN {
    printf "%-10s %s\n", "User", "Home"
    printf "%-10s %s\n", "----","----"}
    { printf "%-10s %s\n", $1, $(NF-1) }
' /etc/passwd | head -n 5
```
Outputs
```
User       Home
----       ----
root       /root
bin        /bin
daemon     /sbin
```
Miscellaneous
-------------
### Regex Metacharacters
- `\`
- `^`
- `$`
- `.`
- `[`
- `]`
- `|`
- `(`
- `)`
- `*`
- `+`
- `?`
{.cols-3 .marker-none}
### Escape Sequences
| -    | -                   |
|------|---------------------|
| `\b` | Backspace           |
| `\f` | Form feed           |
| `\n` | Newline (line feed) |
| `\r` | Carriage return     |
| `\t` | Horizontal tab      |
| `\v` | Vertical tab        |
### Run script
```shell script
$ cat demo.awk
#!/usr/bin/awk -f
BEGIN { x = 23 }
      { x += 2 }
END   { print x }
$ awk -f demo.awk /etc/passwd
69
```
Also see
--------
- [The GNU Awk User's Guide](https://www-zeuthen.desy.de/dv/documentation/unixguide/infohtml/gawk/gawk.html) _(www-zeuthen.desy.de)_
- [AWK cheatsheet](https://gist.github.com/Rafe/3102414) _(gist.github.com)_