### EDB Postgres Replication Server User’s Guide

#### 5.1.6.3 Configuring `pg_hba.conf` for Publication and Subscription Servers

**Note:** The following example assumes that the publication server and the subscription server are running on the same host, which is why there is a single entry for the database `edb`. If the publication and subscription servers are running on separate hosts, the `pg_hba.conf` file on the publication database server should be configured as follows:

```plaintext
# TYPE  DATABASE  USER        ADDRESS         METHOD
# "local" is for Unix domain socket connections only
local   all        all         md5
# IPv4 local connections:
host    edb        pubuser     192.168.2.22/32 md5
host    edb        pubuser     192.168.2.24/32 md5
host    all        all         127.0.0.1/32    md5
# IPv6 local connections:
host    all        all         ::1/128          md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local  replication  enterprisedb  md5
#host   replication  enterprisedb  127.0.0.1/32  md5
#host   replication  enterprisedb  ::1/128       md5
```

**Additional Configuration for Log-Based Synchronization:**

If the log-based method of synchronization replication is used, the `pg_hba.conf` file must include an additional entry with the `DATABASE` field set to `replication` to allow replication connections from the publication server. Here is an example of the modified `pg_hba.conf` file:

```plaintext
# TYPE  DATABASE  USER        ADDRESS         METHOD
# "local" is for Unix domain socket connections only
local   all        all         md5
# IPv4 local connections:
host    edb        pubuser     192.168.2.22/32 md5
host    edb        pubuser     192.168.2.24/32 md5
host    all        all         127.0.0.1/32    md5
# IPv6 local connections:
host    all        all         ::1/128          md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local  replication  enterprisedb  md5
#host   replication  enterprisedb  127.0.0.1/32  md5
#host   replication  enterprisedb  ::1/128       md5
host    replication  pubuser     192.168.2.22/32 md5
```

For more information on synchronization replication using the log-based method, refer to Sections 2.2.10 and 5.1.2.

**Reloading the Configuration:**

After making the necessary modifications, reload the configuration file. To do this, select **Reload Configuration** (under **Expert Configuration**, then **Reload Configuration** on **Advanced Server**) from the Postgres application menu. This will apply the changes made to the `pg_hba.conf` file.

#### 5.1.6.4 Configuring `pg_hba.conf` for Subscription Databases

For a Postgres subscription database, the following entries are required in the `pg_hba.conf` file to allow access to the subscription database:

```plaintext
host sub_dbname sub_dbuser pub_ipaddr/32 md5
host sub_dbname sub_dbuser sub_ipaddr/32 md5
```

Replace `sub_dbuser` and `sub_dbname` with the actual subscription database user name and the subscription database name created in steps 1 and 2 of Section 5.1.5.1.

**Example for a Subscription Database Named `subdb`:**

```plaintext
# TYPE  DATABASE  USER        ADDRESS         METHOD
# "local" is for Unix domain socket connections only
local   all        all         md5
# IPv4 local connections:
host    subdb      subuser     192.168.2.22/32 md5
host    all        all         127.0.0.1/32    md5
# IPv6 local connections:
host    all        all         ::1/128          md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local  replication  enterprisedb  md5
#host   replication  enterprisedb  127.0.0.1/32  md5
#host   replication  enterprisedb  ::1/128       md5
```

**Note:** The above example assumes that the publication and subscription servers are running on the same host. If they are on separate hosts, the `pg_hba.conf` file on the subscription database server should include the following:

```plaintext
# TYPE  DATABASE  USER        ADDRESS         METHOD
# "local" is for Unix domain socket connections only
local   all        all         md5
# IPv4 local connections:
host    subdb      subuser     192.168.2.22/32 md5
host    subdb      subuser     192.168.2.24/32 md5
host    all        all         127.0.0.1/32    md5
# IPv6 local connections:
host    all        all         ::1/128          md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local  replication  enterprisedb  md5
#host   replication  enterprisedb  127.0.0.1/32  md5
#host   replication  enterprisedb  ::1/128       md5
```

**Reloading the Configuration:**

After making the modifications, reload the configuration file. Select **Reload Configuration** (under **Expert Configuration**, then **Reload Configuration** on **Advanced Server**) from the Postgres application menu to apply the changes.

#### 5.2 Creating a Publication

Creating your first publication involves the following steps:

1. **Registering the Publication Server**
2. **Adding the Publication Database**
3. **Creating a Publication** by selecting the tables and views for the publication and creating any optional filter clauses

Once the publication database is added, you can create as many publications as there are available tables and views that meet the criteria outlined in Sections 2.4.2 and 2.4.3.

##### 5.2.1 Registering a Publication Server

When you register a publication server, you identify the network location, admin user name, and password of a specific, running publication server instance that you will use to manage all aspects of the publications.

**Important:** Record the login information for the publication server, as you must always use this same publication server instance to manage all publications created under it, as represented in the xDB Replication Console replication tree.

**Step 1: Start the Publication Server**

- **Linux:**
  - Verify the publication server is running using the `systemctl` command for CentOS 7 or RHEL 7, or the `service` command for previous Linux versions.
  - Use the following commands:
    - For CentOS 7 or RHEL 7:
      ```sh
      systemctl status edb-xdbpubserver
      systemctl restart edb-xdbpubserver
      systemctl start edb-xdbpubserver
      ```
    - For previous Linux versions:
      ```sh
      service edb-xdbpubserver status
      service edb-xdbpubserver restart
      service edb-xdbpubserver start
      ```

- **Windows:**
  - Open Control Panel, System and Security, Administrative Tools, and then Services. The publication server runs as a service named **Publication Service for xDB Replication Server**.
  - Use the **Start** or **Restart** link for the service.

**Step 2: Register the Publication Server**

- Open the xDB Replication Console from the system’s application menu.
- Select the top-level **Replication Servers** node.
- From the **File** menu, choose **Publication Server** > **Register Server**. Alternatively, right-click the **Replication Servers** node and choose **Register Publication Server**.
- Enter the values you supplied during the installation of xDB Replication Server unless otherwise specified:
  - **Host**: Network IP address of the host running the publication server.
  - **Port**: Port number the publication server is using.
  - **User Name**: Admin user name for the publication server.
  - **Password**: Password of the admin user.
  - **Save Login Information**: Check this box if you do not want to re-register the publication server each time you open the xDB Replication Console.

**Step 3: Add a Publication Database**

- Ensure the database server in which the publication database resides is running and accepting client connections.
- Select the **SMR** type node under the **Publication Server** node.
- From the **Publication** menu, choose **Publication Database** > **Add Database**. Alternatively, right-click the **SMR** type node and choose **Add Database**.
- Fill in the following fields:
  - **Database Type**: Select Oracle, SQL Server, PostgreSQL, or Postgres Plus Advanced Server.
  - **Host**: IP address of the host on which the publication database server is running.
  - **Port**: Port on which the publication database server is listening for connections.
  - **User**: The publication database user name.
  - **Password**: Password of the database user.
  - **Service ID (For Oracle)**: Enter the Oracle System Identifier (SID) or the net service name.
  - **Database (For Postgres or SQL Server)**: Enter the database name.
  - **URL Options (For SSL connectivity)**: Enter the URL options to establish SSL connectivity.
  - **Changeset Logging (For Postgres)**: Select **Table Triggers** for the trigger-based method or **WAL Stream** for the log-based method.

- Click the **Test** button. If the test is successful, click **OK** and then **Save**.

**Step 4: Create a Publication**

- Select the **Publication Database** node.
- From the **Publication** menu, choose **Create Publication**. Alternatively, right-click the **Publication Database** node and choose **Create Publication**.
- Fill in the following fields:
  - **Publication Name**: Enter a unique name for the publication.
  - **Snapshot-only replication**: Check the box if replication is to be done by snapshot only.
  - **Publish**: Check the boxes next to the tables that are to be included in the publication. Views can also be included if **Snapshot-Only Replication** is checked.
  - **Select All**: Check this box to include all tables and views in the publication.
  - **Use Wildcard Selection**: Click this button to use wildcard pattern matching for selecting publication tables.

- Optionally, define table filters for the publication. Table filters consist of a set of filter rules that control the selection criteria for rows replicated to the subscription tables during a snapshot or synchronization replication.

- After defining the filters, click the **Table Filters** tab, select the table or view, and click **Add Filter** to add a filter rule.

**Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved.**