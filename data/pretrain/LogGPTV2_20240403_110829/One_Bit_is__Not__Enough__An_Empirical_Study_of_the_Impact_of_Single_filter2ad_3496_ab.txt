A. Fault Injection Techniques
In this paper, we conduct our fault injection experiments
using two techniques, namely inject-on-read and inject-on-
write. Using these techniques, faults are only injected in
live registers, which eliminate faults with no possibility of
activation. The motivation for injecting faults in live registers
is that 80-90% of randomly injected faults are often not
even activated [28], [29]. Examples of these are faults placed
in a register just before the register is written into (and is
overwritten), and faults that are injected into unused registers.
1) Inject-on-read: This technique only injects a fault into
a register just before it is read by an instruction [16], [23],
[30]. Using this technique, Barbosa et al. [16] managed to
reduce the error space of workloads by two to ﬁve orders
of magnitude. The inject-on-read is well suited for emulating
errors that propagate into a register, for example due to a direct
hit by an ionizing particle. In this technique, all faults targeting
a speciﬁc bit of a given register, from the time the register is
written into until it is read, are considered equivalent.
Note that
to obtain an accurate estimation of different
it would be necessary to apply a
dependability measures,
weight factor corresponding to the number of faults in each
equivalence class [16], [23], [31]. However, the aim of this
paper is to compare the single and multiple bit-ﬂip models,
rather than to ﬁnd an absolute dependability measure for
programs. Therefore, we do not apply such a weight factor.
2) Inject-on-write: This is a technique that is used to reduce
the error space size by only injecting an error into a register
right after it is written into by an instruction [23], [24], [32].
It aims to mimic faults in computation, such as the ones that
occur in the arithmetic logic units (ALUs) and in different
pipeline registers that eventually manifest as an error in a
destination register.
B. LLFI Fault Injection Tool
In this paper, we use LLFI [24], an open source fault
injector, that injects faults into the LLVM [17] framework’s
intermediate code of a program. LLVM is a collection of
reusable compiler tools and components, and allows analysis
and optimization of code written in multiple programming
languages. The key component of LLVM is its intermediate
representation (IR), an assembly-like language that abstracts
out the hardware and ISA-speciﬁc information. LLFI has been
used in several other work [9], [10], [12], for injecting single
and double bit-ﬂip errors using inject-on-read and inject-on-
write techniques. In this work, we have extended LLFI to
facilitate the injection of multiple bit-ﬂip errors as explained
in the next section1.
1LLFI is available at http://github.com/DependableSystemsLab/LLFI
C. Extending LLFI for Multiple Bit-Flip Injections
LLFI [24] deﬁnes single bit-ﬂip errors as time-location pairs
according to a fault-free execution of a program. The location
is selected from IR registers, and the time corresponds to
a dynamic IR instruction. To model multiple bit-ﬂip errors,
we extend the time-location parameters by two additional
parameters, namely max-MBF and win-size, which allow us
to cluster the error space into different classes of errors to
be able to explore the error space in a more systematic way.
The max-MBF parameter controls the number of bit-ﬂip errors
that could occur in one run of a program. Selecting a certain
value, say 5, as the max-MBF does not necessarily mean
that ﬁve errors will be injected into the program. This is
because the program may crash prematurely (after the ﬁrst
injection, say), causing the remaining faults to not be injected.
Therefore, max-MBF is in fact, the maximum number of bit-
ﬂip errors that occur in the program. The win-size, on the other
hand, controls the number of dynamic instructions that should
be executed between consecutive injections. For example, if
the win-size is equal to 2, the dynamic instruction distance
between each injection is equal to two.
As there are no commonly agreed values for the new
parameters in the literature, we consider a wide variety of
values for the parameters when studying the impact of multiple
bit-ﬂip errors on programs. These value ranges cover various
multiple bit-ﬂip scenarios temporally, enabling us to perform
sensitivity analysis. In this paper, we use 10 different values
for the max-MBF (see Table I) ranging from 2 to 30. We
motivate the use of 30 as a max-MBF value in §IV-C1.
For the window size parameter, we select nine win-size
values covering dynamic window sizes from zero to 1000
(see Table I). A window size of zero implies that the in-
jections, following the ﬁrst one, will be performed into the
same instruction (i.e., register). The rationale behind limiting
the maximum value of this parameter to 1000 is that we
predominantly consider multiple bit-ﬂip errors in software that
are caused by a single transient fault in the processor. Such
faults are likely to affect instructions that are “in-ﬂight” in the
processor’s instruction window2. Typical instruction windows
in modern processors are a few hundred of instructions in size,
and hence 1000 is a reasonable upper bound. Six of the values
selected are constants (0, 1, 4, 10, 100, 1000). The remaining
three values are randomly selected from a range of 2-10, 11-
100, or 101-1000, to achieve better representativeness.
The chosen win-size values could also represent multiple
unconnected transient faults that cause errors in instructions
that are apart from each other by less than 1000 dynamic
instructions. However, it is very unlikely that multiple transient
faults (due to multiple soft errors) occur in a single run of a
program, that too within a short time of each other.
D. Benchmark Programs
We target 15 programs in our set of fault injection ex-
periments. We select a diverse set of programs with respect
2The instruction window is the set of all instructions that have been decoded
but not yet committed in a superscalar processor.
VALUES SELECTED FOR THE MAXIMUM NUMBER OF MULTIPLE BIT-FLIP
ERRORS (MAX-MBF) AND THE DYNAMIC WINDOW SIZE (WIN-SIZE)
BETWEEN CONSECUTIVE INJECTIONS.
Table I
max-MBF max-MBF
value
index
m1
m2
m3
m4
m5
m6
m7
m8
m9
m10
2
3
4
5
6
7
8
9
10
30
win-size
index
w1
w2
w3
w4
w5
w6
w7
w8
w9
win-size
value
0
1
4
random between 2-10
10
random between 11-100
100
random between 101-1000
1000
to source code implementation, code size, input type/size,
functionality, etc. from two distinct benchmark suites, namely
MiBench [33] and Parboil [34] (see Table II).
1) MiBench Benchmark Suite: This benchmark suite con-
tains a set of commercially representative embedded programs.
The programs are placed into six different packages of auto-
motive, consumer, network, ofﬁce, security, and telecomm. In
this paper, we select 11 programs from these packages (see
Table II). MiBench provides two inputs for every program,
namely small and large. We use the small inputs in our set of
experiments as we need to perform thousands of fault injection
experiments and hence need inputs that do not lead to long
running times.
2) Parboil Benchmark Suite: This benchmark suite contains
a set of programs selected from scientiﬁc and commercial
ﬁelds. We select four programs from this benchmark suite (see
Table II). Two of them (bfs and histo) are taken from the base
implementation package. The remaining two programs (sad
and spmv) are from the CPU implementation package.
Table II also shows the total number of candidate in-
structions for inject-on-read and inject-on-write fault injection
techniques. From the table, we can see that the number of
instructions that are available for inject-on-read is higher than
the inject-on-write. This is because instructions, such as the
store instruction, do not have destination register in the
LLVM IR; thus they are not selected as candidates for fault
injection in inject-on-write.
E. Experimental Design and Outcome Classiﬁcation
We conduct 182 fault injection campaigns for each of the
benchmark programs presented in §III-D. A fault injection
campaign refers to a set of fault injection experiments using
the same fault model on a given workload; a workload is a
program running with a given input. Half of the campaigns
use the inject-on-read technique presented in §III-A1, whereas
the other half use the inject-on-write technique presented in
§III-A2. In addition to two single bit-ﬂip campaigns, each
using a fault injection technique, we perform multiple bit-ﬂip
errors using the parameters (max-MBF, win-size) in Table I.
k
r
a
m
h
c
n
e
B
h
c
n
e
B
M
i
l
i
o
b
r
a
P
Package
Program (LoC)
Table II
SELECTED BENCHMARK PROGRAMS
Total number of candidate
instructions for fault injection
inject-on-read
inject-on-write
Description & Input
automotive
telecomm
network
security
ofﬁce
base
cpu
basicmath (178)
3,683,881
2,964,600
qsort (35)
susan corners(1700)
susan edges(1700)
susan smoothing(1700)
FFT (215)
IFFT (215)
CRC32 (107)
2,615,557
2,449,209
5,188,476
62,752,639
5,313,377
5,423,988
28,746,216
2,214,245
2,088,322
4,413,577
49,105,460
4,526,716
4,620,938
23,270,737
dijkstra (133)
67,617,629
54,495,536
sha (188)
30,609,559
25,726,389
stringsearch (340)
161,533
114,835
bfs (592)
113,582,521
94,021,100
histo (610)
sad (944)
spmv (619)
678,224,521
566,829,877
648,604,565
510,295,230
11,003,882
8,965,172