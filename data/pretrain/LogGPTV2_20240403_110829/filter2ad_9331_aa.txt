# 1.堆
## 1.1 堆概述
### 1.1.1 堆数据结构，申请与释放
堆和栈都是一种数据结构，在内存中线性分布储存数据，栈由高地址向低地址伸展，堆由低地址向高地址伸展。堆的位置一般都在bss段的高地址处。
在程序运行过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存。堆其实就是程序虚拟地址空间的一块连续的线性区域，它由低地址向高地址方向增长。我们一般称管理堆的那部分程序为堆管理器。
目前 Linux 标准发行版中使用的堆分配器是 glibc 中的堆分配器：ptmalloc2。ptmalloc2 主要是通过 malloc/free
函数来分配和释放内存块。
**_libc_malloc**
一般我们会使用 malloc 函数来申请内存块，可是当仔细看 glibc 的源码实现时，其实并没有 malloc 函数。其实该函数真正调用的是
**libc_malloc 函数。为什么不直接写个 malloc 函数呢，因为有时候我们可能需要不同的名称。此外，** libc_malloc
函数只是用来简单封装 _int_malloc 函数。_int_malloc 才是申请内存块的核心。下面我们来仔细分析一下具体的实现。
该函数会首先检查是否有内存分配函数的钩子函数（__malloc_hook），这个主要用于用户自定义的堆分配函数，方便用户快速修改堆分配函数并进行测试。这里需要注意的是，
**用户申请的字节一旦进入申请内存函数中就变成了无符号整数** 。
    // wapper for int_malloc
    void *__libc_malloc(size_t bytes) {
        mstate ar_ptr;
        void * victim;
        // 检查是否有内存分配钩子，如果有，调用钩子并返回.
        void *(*hook)(size_t, const void *) = atomic_forced_read(__malloc_hook);
        if (__builtin_expect(hook != NULL, 0))
            return (*hook)(bytes, RETURN_ADDRESS(0));
判断目前的状态是否满足以下条件
  * 要么没有申请到内存
  * 要么是 mmap 的内存
  * **要么申请到的内存必须在其所分配的 arena 中**
**_int_malloc**
_int_malloc 是内存分配的核心函数，其核心思路有如下
  1. 它根据用户申请的 **内存块大小** 以及 **相应大小 chunk 通常使用的频度** （fastbin chunk, small chunk, large chunk），依次实现了不同的分配方法。
  2. 它由小到大依次检查不同的 bin 中是否有相应的空闲块可以满足用户请求的内存。
  3. 当所有的空闲 chunk 都无法满足时，它会考虑 top chunk。
  4. 当 top chunk 也无法满足时，堆分配器才会进行内存块申请。
在进入该函数后，函数立马定义了一系列自己需要的变量，并将用户申请的内存大小转换为内部的 chunk 大小。
fast bin
如果申请的 chunk 的大小位于 fastbin 范围内， **需要注意的是这里比较的是无符号整数** 。 **此外，是从 fastbin 的头结点开始取
chunk** 。
large bin
当 fast bin、small bin 中的 chunk 都不能满足用户请求 chunk 大小时，就会考虑是不是 large bin。但是，其实在
large bin 中并没有直接去扫描对应 bin 中的 chunk，而是先利用 malloc_consolidate（参见 malloc_state
相关函数） 函数处理 fast bin 中的 chunk，将有可能能够合并的 chunk 先进行合并后放到 unsorted bin
中，不能够合并的就直接放到 unsorted bin 中，然后再在下面的大循环中进行相应的处理。 **为什么不直接从相应的 bin 中取出 large
chunk 呢？这是 ptmalloc 的机制，它会在分配 large chunk 之前对堆中碎片 chunk 进行合并，以便减少堆中的碎片。**
大循环 - 遍历 unsorted bin
**如果程序执行到了这里，那么说明 与 chunk 大小正好一致的 bin (fast bin， small bin) 中没有 chunk 可以直接满足需求
，但是 large chunk 则是在这个大循环中处理** 。
在接下来的这个循环中，主要做了以下的操作
  * 按照 FIFO 的方式逐个将 unsorted bin 中的 chunk 取出来
    * 如果是 small request，则考虑是不是恰好满足，是的话，直接返回。
    * 如果不是的话，放到对应的 bin 中。
  * 尝试从 large bin 中分配用户所需的内存
该部分是一个大循环，这是为了尝试重新分配 small bin chunk，这是因为我们虽然会首先使用 large bin，top chunk
来尝试满足用户的请求，但是如果没有满足的话，由于我们在上面没有分配成功 small bin，我们并没有对 fast bin 中的 chunk
进行合并，所以这里会进行 fast bin chunk 的合并，进而使用一个大循环来尝试再次分配 small bin chunk。
使用 top chunk
如果所有的 bin 中的 chunk 都没有办法直接满足要求（即不合并），或者说都没有空闲的 chunk。那么我们就只能使用 top chunk 了。
##### 1.1.2 malloc
在glibc的malloc中，有以下说明：
malloc 函数返回对应大小字节的内存块的指针。
当 n=0 时，返回当前系统允许的堆的最小内存块
当 n 为负数时，由于在大多数系统上， **size_t 是无符号数（这一点非常重要）**
，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配。
malloc --> __libc_malloc --> _int_malloc
    __libc_malloc(size)
    用户申请的字节一旦进入申请内存函数中就变成了 无符号整数。
    寻找钩子hook ----》 寻找arena ----》 调用_int_malloc分配内存 -+--》成功，返回内存
                                              ↑                 |
                                              |                 ↓
                                              +-----分配失败，再寻找一个arena
    _int_malloc()
    --------------------------------------------------------------------------------    
    将size转化为对应的chunk大小 ----》 fastbin ----》 遍历（后进先出），检查大小是否符合 ----》 符合则计算索引 ----》 chunk转换为内存返回
    根据大小选择bin            ----》 smallbin ----》获取索引、指针 ----》 检查该bin是否为空 ----》 不为空 ----》将链表中最后一个chunk分配（先进先出）
                                                                                          |           +----》 初始化
                                                                                          +---》 该bin为空
                              ----》 不在fastbin和smallbin中 ----》 malloc_consolidate()：处理fastbin ----》 可以合并的合并，然后放 unsorted bin ----》大循环
    ----------------------------------------------------------------------------------    
    大循环 ----》 遍历unsorted bin ----》 FIFO寻找大小刚好合适的bin ----》若有，bin转为内存后返回
    循环10000次                                                  ----》若没有，则将当前的unsorted bin按照大小放至对应的small或large中
          ----》 遍历large bin ----》对应的 bin 中从小(链表尾部)到大（头部）进行扫描 ----》 找到第一个合适的返回
          ----》 若大小合适的bin都不存在，则在map中找更大的bin遍历 ----》 找到，返回内存
                                                               ----》 找不到，使用top chunk ----》 满足，分割后返回
                                                                                           ----》 不满足，使用 sysmalloc 来申请内存
    ------------------------------------------------------------------------------------    
    //从 fastbin 的头结点开始取 chunk（LIFO）
##### 1.1.3 free
在glibc'中的free，有以下说明：
free 函数会释放由 p 所指向的内存块。这个内存块有可能是通过 malloc 函数得到的，也有可能是通过相关的函数 realloc 得到的。
当 p 为空指针时，函数不执行任何操作。
**当 p 已经被释放之后，再次释放会出现乱七八糟的效果，这其实就是`double free`。**
除了被禁用 (mallopt) 的情况下，当释放很大的内存空间时，程序会将这些内存空间还给系统，以便于减小程序所使用的内存空间。
free --> __libc_free --> _int_free
    _int_free()
    检查 ----》是否fastbin ----》是fastbin，放至fastbin链表表头
                          +---》是否mmap分配 ----》 是，munmap_chunk()
                                            +---》 否，合并chunk ----》 向低地址合并 ----》想高地址合并 ----》 下一个是否是top chunk ----》 是，合并到top chunk
                                                                                                                                +---》 否，合并加入unsorted bin
##### 1.1.4 内存分配中的系统调用
在前面提到的函数中，无论是 malloc 函数还是 free
函数，我们动态申请和释放内存时，都经常会使用，但是它们并不是真正与系统交互的函数。这些函数背后的系统调用主要是brk函数以及 mmap，mummap函数。
堆进行 **申请内存块的操作**
**(s)brk**
对于堆的操作，操作系统提供了 brk 函数，glibc 库提供了 sbrk 函数，我们可以通过增加 brk的大小来向操作系统申请内存。
初始时，堆的起始地址 start_brk以及堆的当前末尾 brk指向同一地址。根据是否开启 ASLR，两者的具体位置会有所不同
  * 不开启 ASLR 保护时，start_brk 以及 brk 会指向 data/bss 段的结尾。
  * 开启 ASLR 保护时，start_brk 以及 brk 也会指向同一位置，只是这个位置是在 data/bss 段结尾后的随机偏移处。
**例子**
    /* sbrk and brk example */
    #include 
    #include 
    #include 
    int main()
    {
            void *curr_brk, *tmp_brk = NULL; //创立空指针
            printf("Welcome to sbrk example:%d\n", getpid()); //读取heap，pid
            /* sbrk(0) gives current program break location */
            tmp_brk = curr_brk = sbrk(0); //通过sbrk空指针赋值
            printf("Program Break Location1:%p\n", curr_brk);
            getchar();
            /* brk(addr) increments/decrements program break location */
            brk(curr_brk+4096);
            curr_brk = sbrk(0);
            printf("Program break Location2:%p\n", curr_brk);
            getchar();
            brk(tmp_brk);
            curr_brk = sbrk(0);
            printf("Program Break Location3:%p\n", curr_brk);
            getchar();
            return 0;
    }
在第一次调用brk函数之前。
从下面的输出中可以看出没用产生堆。
start_brk = brk = end_data = 0x1bd2000
在第二次调用brk函数
start_brk = end_data = 0x1bb1000
bak = 0x1bd3000
其中，关于堆的那一行
  * 0x01bb1000 是相应堆的起始地址
  * rw-p 表明堆具有可读可写权限，并且属于隐私数据。
  * 00000000 表明文件偏移，由于这部分内容并不是从文件中映射得到的，所以为 0。
  * 00:00 是主从 (Major/mirror) 的设备号，这部分内容也不是从文件中映射得到的，所以也都为 0。
  * 0 表示着 Inode 号。由于这部分内容并不是从文件中映射得到的，所以为 0。
##### 1.1.5 Chunk
chunk是glibc管理内存的基本单位，整个堆在初始化后会被当成一个free chunk，称为top
chunk，每次用户请求内存时，如果bins中没有合适的chunk，malloc就会从top chunk中进行划分，如果top
chunk的大小不够，就调用brk函数扩展堆的大小，然后从新生成的top
chunk中进行划分。用户释放内存时，glibc会先根据情况将释放的chunk与其他相邻的free chunk合并，然后加入合适的bin中。
chunk的数据结构如下
    struct malloc_chunk{
        INTERNAL_SIZE_T mchunk_prev_size; 记录被释放的相邻chunk的大小。
        INTERNAL_SIZE_T mchunk_size;      记录当前chunk的大小，chunk的大小都是8字节对齐
        struct malloc_chunk *fd;
        struct malloc_chunk *bk;
        struct malloc_chunk *fd_nextsize;
        struck malloc_chunk *bk_nextsize; 
    }
1.Fast bin
Fast bin分类的chunk的大小为32-128字节(0x80)字节，如果chunk在被释放时发现其大小满足这个要求，则将该chunk放入Fast
Bin。一个最新被加入的Fast Bin的chunk，其fd指针指向上一次加入的Fast Bin的chunk。
2.Small bin
Small
bin保存大小为32-1024（0x400）字节的chunk，每个放入其中的chunk为双链表结构，不同大小的chunk储存在对应的链接中。由于时双链表结构，所以他的速度比fast
bin慢一些。
3.Large bin
大于1024字节的chunk使用Large Bin进行管理。相同大小的Large Bin使用fd和bk指针连接，不同大小的Large
bin通过fd_nextsize和bk_nextsize按大小排序连接。
4.Unsorted Bin
Unsorted Bin相当于Ptmalloc2堆管理器的垃圾桶。chunk被释放后，会先加入Unsorted
Bin中，等待下次分配使用。在堆管理器的Unsorted Bin不为空的时候，用户申请非Fast Bin大小内存会先从Unsorted
Bin中查找，如果找到符合该申请的chunk(等于或者大于)，则直接分配或者分割该chunk。
##### 1.1.6 arena
arena包含一片或者数片连续的内存，对快将会从这片区域中划分给用户。主线程的arena被称为main_arena，它包含start_brk 和
brk之间的这片连续内存。一般把start_brk 和 brk之间这片连续的内存称为堆。
主线程arena只有堆，子线程的arena可以有数片连续的内存。如果主线程的堆大小不够分的话，就要通过brk函数调用来扩展，但是子线程分配的映射段大小是固定的，不可以扩展的，所以子线程分配处理的一段映射段不够用的话就需要再次使用mmap函数来分配新的内存。
#### 1.2 简单的堆漏洞
##### 1.2.1 堆溢出概述
堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可使用的字节数（
**之所以是可使用而不是用户申请的字节数，是因为堆管理器会对用户所申请的字节数进行调整，这也导致可利用的字节数都不小于用户申请的字节数**
），因而导致了数据溢出，并覆盖到 **物理相邻的高地址** 的下一个堆块。
不难发现，堆溢出漏洞发生的基本前提是
  * 程序向堆上写入数据。
  * 写入的数据大小没有被良好地控制。
对于攻击者来说，堆溢出漏洞轻则可以使得程序崩溃，重则可以使得攻击者控制程序执行流程。
堆溢出是一种特定的缓冲区溢出（还有栈溢出， bss
段溢出等）。但是其与栈溢出所不同的是，堆上并不存在返回地址等可以让攻击者直接控制执行流程的数据，因此我们一般无法直接通过堆溢出来控制 EIP
。一般来说，我们利用堆溢出的策略是
  1. 覆盖与其
物理相邻的下一个 chunk的内容。
    * prev_size
    * size，主要有三个比特位，以及该堆块真正的大小。
      * NON_MAIN_ARENA 
      * IS_MAPPED 
      * PREV_INUSE 
      * the True chunk size
    * chunk content，从而改变程序固有的执行流。
  2. 利用堆中的机制（如 unlink 等 ）来实现任意地址写入（ Write-Anything-Anywhere）或控制堆块中的内容等效果，从而来控制程序的执行流。
##### 1.2.2 堆溢出总结