启动参数一样。如果 shell 运行过程中设置了它，\fBbash\fP 就启用 \fIposix mode\fP，就好像执行了
.if t \f(CWset -o posix\fP
.if n \fIset -o posix\fP
命令一样。
.TP
.B PROMPT_COMMAND
如果有定义，它的值将作为一个命令，每次显示主提示符之前都会执行。
.TP
.B PS1
这个参数的值被扩展 (参见下面的
.SM
.B PROMPTING 提示符
段落)，用作主提示符字符串。默认值是
``\fB\es\-\ev\e$ \fP''。
.TP
.B PS2
这个参数的值同
.B PS1
一起被扩展，用作次提示符字符串。默认值是
``\fB> \fP''。
.TP
.B PS3
这个参数的值被用作内建命令
.B select
的提示符 (参见上面的
.SM
.B SHELL GRAMMAR 语法
章节)。
.TP
.B PS4
这个参数的值同
.B PS1
一起被扩展，在执行跟踪中在
.B bash
显示每个命令之前显示。需要的话，
.SM
.B PS4
的第一个字符会被复制多次，来指示 indirection 的层数。默认值是 ``\fB+ \fP''。
.TP
.B TIMEFORMAT
在前缀 time 保留字的管道中，这个参数的值用作格式字符串，
指定计时信息如何显示。字符 \fB%\fP 引入的转义序列，被扩展为时间值
或其他信息。转义序列和它们的含义如下所示；括号中是可选的成分。
.sp .5
.RS
.PD 0
.TP 10
.B %%
一个字面上的 \fB%\fP。
.TP
.B %[\fIp\fP][l]R
经历的时间，以秒计算。
.TP
.B %[\fIp\fP][l]U
CPU 在用户模式下执行的秒数。
.TP
.B %[\fIp\fP][l]S
CPU 在系统模式下执行的秒数。
.TP
.B %P
CPU 使用率，算法是 (%U + %S) / %R。
.PD
.RE
.IP
可选的 \fIp\fP 是指定精度 (小数点后数字位数) 的数值。
如果是 0 就不输出小数点或小数值。最多指定到小数点后三位；
如果 \fIp\fP 大于 3 就会被改为 3。如果没有指定 \fIp\fP，默认使用 3。
.IP
可选的 \fBl\fP 指定了长格式，包含分钟，格式是 \fIMM\fPm\fISS\fP.\fIFF\fPs。
\fIp\fP 的值决定了是不是包含小数位。
.IP
如果没有设置这个值，\fBbash\fP 假定它的值是
\fB$'\enreal\et%3lR\enuser\et%3lU\ensys\t%3lS'\fP。
如果它是空值，就不会显示计时信息。显示格式字符串的时候，会加上
一个前导的新行符。
.TP
.B TMOUT
如果设置为大于 0 的值，\fBTMOUT\fP 被当作内建命令 \fBread\fP 的默认超时
等待时间。如果等待终端输入时， \fBTMOUT\fP 秒之后仍然没有输入，
\fBselect\fP 命令将终止。在交互的 shell 中，它的值被解释为显示了
主提示符之后等待输入的秒数。如果经过这个秒数之后仍然没有输入，
.B Bash
将退出。
.TP
.B auto_resume
这个变量控制了 shell 如何与用户和作业控制交互。如果设置了这个变量，
一个不包含重定向的单个词的简单命令，将作为恢复被中断的作业的指示。
不允许出现模棱两可的情况；如果有多个作业都以这个词起始，将恢复最近运行
的作业。在这种情形下，被中断的作业的
.I name
是用于启动它的命令行。如果值设置为
.IR exact，
给出的字符串必须精确匹配被中断的作业名；如果设置为
.IR substring ，
给出的字符串需要匹配被中断的作业名的子串。值
.I substring
的功能与作业标识符
.B %?
功能类似 (参见下面的
.SM
.B JOB CONTROL 作业控制
章节)。如果设置为任何其他值，给出的字符串必须是被中断的作业的前缀；
这样做与作业标识符
.B %
功能类似。
.TP
.B histchars
两到三个字符，控制着历史扩展和分段 (tokenization，参见下面的
.SM
.B HISTORY EXPANSION 历史扩展
章节)。第一个字符是 \fIhistory expansion\fP(历史扩展) 字符，
这个字符表明了历史扩展的开始，通常是 `\fB!\fP'。
第二个字符是 \fIquick substitution\fP(快速替换) 字符，
它是重新运行上次输入的命令，但将命令中的字符串替换为另一个的简写，
默认是 `\fB^\fP'。可选的第三个字符是指示如果作为一个词的开始，那么
一行中剩余字符是注释。通常这个字符是 `\fB#\fP'。历史注释字符使得
对一行中剩余字符在历史替换中被跳过。它不一定使 shell 解释器将
这一行的剩余部分当作注释。
.PD
.SS Arrays
.B Bash
提供了一维数组变量。任何变量都可以作为一个数组；内建命令
.B declare
可以显式地定义数组。数组的大小没有上限，也没有限制在连续对成员引用和
赋值时有什么要求。数组以整数为下标，从 0 开始。
.PP
如果变量赋值时使用语法 \fIname\fP[\fIsubscript\fP]=\fIvalue\fP，
那么就会自动创建数组。
.I subscript
被当作一个算术表达式，结果必须是大于等于 0 的值。要显式地定义一个数组，使用
.B declare \-a \fIname\fP
(参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节)。也可以用
.B declare \-a \fIname\fP[\fIsubscript\fP]
这时 \fI subscript\fP 被忽略。数组变量的属性可以用内建命令
.B declare
和
.B readonly
来指定。每个属性对于所有数组元素都有效。
.PP
数组赋值可以使用复合赋值的方式，形式是
\fIname\fP=\fB(\fPvalue\fI1\fP ... value\fIn\fP\fB)\fP，这里每个
\fIvalue\fP 的形式都是 [\fIsubscript\fP]=\fIstring\fP。\fIstring\fP 
必须出现。如果出现了可选的括号和下标，将为这个下标赋值，否则
被赋值的元素的下标是语句中上一次赋值的下标加一。下标从 0 开始。
这个语法也被内建命令
.B declare
所接受。单独的数组元素可以用上面介绍的语法
\fIname\fP[\fIsubscript\fP]=\fIvalue\fP 来赋值。
.PP
数组的任何元素都可以用 ${\fIname\fP[\fIsubscript\fP]} 来引用。
花括号是必须的，以避免和路径扩展冲突。如果
\fIsubscript\fP 是 \fB@\fP 或是 \fB*\fP，它扩展为 \fIname\fP 的所有成员。
这两种下标只有在双引号中才不同。在双引号中，${\fIname\fP[*]} 扩展为一个词，
由所有数组成员的值组成，用特殊变量
.SM
.B IFS
的第一个字符分隔；${\fIname\fP[@]} 将 \fIname\fP 的每个成员扩展为一个词。
如果数组没有成员，${\fIname\fP[@]} 扩展为空串。这种不同类似于特殊参数
\fB*\fP 和 \fB@\fP 的扩展 (参见上面的
.B Special Parameters
段落)。${#\fIname\fP[\fIsubscript\fP]} 扩展为 
${\fIname\fP[\fIsubscript\fP]} 的长度。如果 \fIsubscript\fP 是 \fB*\fP
或者是 \fB@\fP，扩展结果是数组中元素的个数。引用没有下标数组变量等价于
引用元素 0。
.PP
内建命令
.B unset
用于销毁数组。\fBunset\fP \fIname\fP[\fIsubscript\fP]
将销毁下标是 \fIsubscript\fP 的元素。
\fBunset\fP \fIname\fP, 这里 \fIname\fP 是一个数组，或者
\fBunset\fP \fIname\fP[\fIsubscript\fP], 这里
\fIsubscript\fP 是 \fB*\fP 或者是 \fB@\fP，将销毁整个数组。
.PP
内建命令
.BR declare ,
.BR local ,
和
.B readonly
都能接受
.B \-a
选项，从而指定一个数组。内建命令
.B read
可以接受
.B \-a
选项，从标准输入读入一列词来为数组赋值。内建命令
.B set
和
.B declare
使用一种可以重用为输入的格式来显示数组元素。
.SH 扩展(EXPANSION)
命令行的扩展是在拆分成词之后进行的。有七种类型的扩展：
.IR "brace expansion" (花括号扩展),
.IR "tilde expansion" (波浪线扩展),
.IR "parameter and variable expansion" (参数和变量扩展),
.IR "command substitution" (命令替换),
.IR "arithmetic expansion" (算术扩展),
.IR "word splitting" (词的拆分),
和
.IR "pathname expansion" (路径扩展).
.PP
扩展的顺序是：brace expansion, tilde expansion,
parameter, variable 和 arithmetic expansion 还有
command substitution
(按照从左到右的顺序), word splitting, 最后是 pathname
expansion.
.PP
还有一种附加的扩展：\fIprocess subtitution\fP (进程替换) 只有在支持它
的系统中有效。
.PP
只有 brace expansion, word splitting, 和 pathname expansion
在扩展前后的词数会发生改变；其他扩展总是将一个词扩展为一个词。
唯一的例外是上面提到的
"\fB$@\fP" 和 "\fB${\fP\fIname\fP\fB[@]}\fP" (参见
.SM
.BR PARAMETERS 参数)。
.SS Brace Expansion
.PP
.I "Brace expansion"
是一种可能产生任意字符串的机制。这种机制类似于
\fIpathname expansion\fP, 但是并不需要存在相应的文件。
花括号扩展的模式是一个可选的
.IR preamble (前导字符),
后面跟着一系列逗号分隔的字符串，包含在一对花括号中，
再后面是一个可选的
.IR postscript (附言)。
前导被添加到花括号中的每个字符串前面，附言被附加到每个结果字符串之后，
从左到右进行扩展。
.PP
花括号扩展可以嵌套。扩展字符串的结果没有排序；而是保留了从左到右的顺序。
例如， a\fB{\fPd,c,b\fB}\fPe 扩展为 `ade ace abe'。
.PP
花括号扩展是在任何其他扩展之前进行的，任何对其他扩展有特殊意义的字符
都保留在结果中。它是严格字面上的。
.B Bash
不会对扩展的上下文或花括号中的文本做任何语义上的解释。
.PP
正确的花括号扩展必须包含没有引用的左括号和右括号，以及至少一个没有
引用的逗号。任何不正确的表达式都不会被改变。可以用反斜杠来引用
\fB{\fP 或 \fB,\fP 来阻止将它们识别为花括号表达式的一部分。
为了避免与参数扩展冲突，字符串 \fB${\fP 不被认为有效的组合。
.PP
这种结构通常用来简写字符串的公共前缀远比上例中为长的情况，例如：
.RS
.PP
mkdir /usr/local/src/bash/{old,new,dist,bugs}
.RE
或者：
.RS
chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}
.RE
.PP
花括号扩展导致了与历史版本的
.BR sh 
的一点不兼容。在左括号或右括号作为词的一部分出现时，
.B sh
不会对它们进行特殊处理，会在输出中保留它们。
.B Bash
将括号从花括号扩展结果的词中删除。例如，向
.B sh
输入 \fIfile{1,2}\fP 会导致不变的输出。同样的输入在
.BR bash
进行扩展之后，会输出
.I file1 file2 .
如果需要同
.B sh
严格地保持兼容，需要在启动
.B bash
的时候使用
.B +B 
选项，或者使用
.B set
命令加上
.B +B
选项来禁用花括号扩展 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节)。
.SS Tilde Expansion
.PP
如果一个词以没有引用的波浪线字符 (`\fB~\fP') 开始，所有
在第一个没有引用的斜线 (`/') 之前的字符 (或者是这个词的所有字符，
如果没有没引用的斜线的话) 都被认为是 \fItilde-prefix\fP(波浪线前缀)。
如果 tilde-prefix 中没有被引用的字符，那么波浪线之后的字符串
被认为是 \fIlogin name\fP(登录名)。如果登录名是空字符串，波浪线将
被替换为 shell 参数
.SM
.BR HOME 
的值。如果没有定义
.SM
.B HOME，
将替换为执行此 shell 的用户的个人目录。否则，tilde-prefix 被替换为
与指定登录名相联系的个人目录。
.PP
如果 tilde-prefix 是 `~+'，将使用 shell 变量
.SM
.B PWD
的值来替换。如果 tilde-prefix 是 `~\-'，并且设置了 shell 变量
.SM
.BR OLDPWD ,
将使用这个变量值来替换。如果在 tilde-prefix 中，波浪线之后的字符串
由一个数字 \fIN\fP 组成，前缀可选的 `+' 或者 `\-'，那么 tilde-prefix
将被替换为目录栈中相应的元素，就是将 tilde-prefix 作为参数执行内建命令
.B dirs
显示的结果。如果 tilde-prefix 中波浪线之后的字符是一个数字，没有前缀，
那么就假定有一个 `+'。
.PP
如果登录名不合法，或者波浪线扩展失败，这个词将不会变化。
.PP
在变量赋值中，对于
.B :
或
.BR =
之后的字符串会立即检查未引用的 tilde-prefix。
这种情况下，仍然会进行波浪线扩展。因此，可以使用带波浪线的文件名来为
.SM
.BR PATH ,
.SM
.BR MAILPATH ,
和
.SM
.BR CDPATH 
赋值，shell 将赋予扩展之后的值。
.SS Parameter Expansion
.PP
字符 `\fB$\fP' 引入了参数扩展，命令替换和算术扩展。要扩展的参数名或符号
可能包含在花括号中，花括号可选的，但是可以使得要扩展的变量不会与紧随其后
的字符合并，成为新的名称。
.PP
使用花括号的时候，匹配的右括号是第一个 `\fB}\fP'，并且它没有被反斜杠引用
或包含在一个引用的字符串中，也没有包含在一个嵌入的算术扩展，命令替换
或是参数扩展中。
.PP
.PD 0
.TP
${\fIparameter\fP}
被替换为 \fIparameter\fP 的值。如果
.I parameter
是一个位置参数，并且数字多于一位时；或者当紧随
.I parameter
之后有不属于名称一部分的字符时，都必须加上花括号。
.PD
.PP
如果 \fIparameter\fP 的第一个字符是一个感叹号，将引进一层间接变量。
\fBbash\fP 使用以 \fIparameter\fP 的其余部分为名的变量的值作为变量的名称；
接下来新的变量被扩展，它的值用在随后的替换当中，而不是使用 