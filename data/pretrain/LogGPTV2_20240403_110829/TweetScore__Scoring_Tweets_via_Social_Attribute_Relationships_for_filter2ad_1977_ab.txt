As our solution depends on two types of graphs: Activity Graph
and Attribute Graph, we give the definitions of these two types of
graphs, which will be used later in our design.
2.2 Definition
2.2.1 User Activity Graph. The “mention” activities included in all
tweets are extracted to construct the user activity graph. We use a
directed graph G = (V , E) to model mention activities among users,
where each vertex i ∈ V in the graph represents one user and each
edge e(i, j) ∈ E represents the mention activity from users i to j,
i.e., i mentions j. For example, if A mentions B, C, and D, while B
and D, C and D mention each other, then the constructed activity
graph is shown in Figure 1, where A, B, C and D indicate the users
while the directed edges among them reflect the mention activities
among four users.
Figure 1: Example of Activity Graph. A node denotes a user
and a directed edge denotes a mention behavior from sender.
Figure 2: Example of Attribute Graph. Each node denotes an
attribute of one user. Sender’s attributes are fully connected
to receiver’s attributes.
2.2.2 User Attribute Graph. Each user has a set of attributes. We
define the attribute graph as a directed graph ¯G = ( ¯V , ¯E) to model
the attribute relationships among users. In ¯G, each vertex represents
one unique attribute and each edge represents the relationship
between two attributes from two different users. The attribute
relationships can be constructed based on the Activity Graph G.
That is, for any two users i and j while each of them has a set of
attributes, if i mentions j, then we assume any one attribute from
user i has the directed relationships to any one attribute of user
j. Such directed relationships are expressed as the directed edges
in the graph ¯G. In a special case, if one user mentions the other
user and both have one same attribute, there will be one directed
edge from this attribute to itself. To better understand the Attribute
Graph, we take the edge A → B in Figure 1 as an example. We
assume user A has the attributes of Friends 10, Followers 30, and Age
26 while user B has the attributes of Friends 10, Followers 100, and
Age 30. Then, the constructed Attribute Graph is shown in Figure 2,
where all attributes have directed edges based on A → B except
the attribute Friend 10 has directed edge to itself.
3 PSEUDO-HONEYPOT MONITORING
SYSTEM
In this section, we present our proposed pseudo-honeypot system
for efficient tweets monitoring. The goal of pseudo-honeypot is
to collect tweets that are more likely to be spam messages. As
ACDBDFriends 10Followers 30Followers 100Friends 10Followers 30Friends 10Followers 100User AUser BmentionABA BAge 26Age 30Age 30Age 26BASession 5A: Web SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand381discussed in Section 2, the pseudo-honeypots are constructed across
normal users, that are more vulnerable to be targeted by spammers,
to perform monitoring of activities or behaviors among these users
and their neighbors. The main challenges here include: i) How to
select such a set of users to meet the above criteria while obeying
the ethical consideration; ii) How to guarantee the effectiveness of
pseudo-honeypots.
3.1 Pseudo-honeypot Construction
User’s diversity serves as the key resources to construct pseudo-
honeypot nodes. Our goal is to select a set of features that have the
higher potentials of attracting spammers’ interests and then screen
a set of users accounts that possess these features as the pseudo-
honeypot nodes. Obviously, these user accounts are more likely to
serve as spammers’ target because they meet spammers’ taste. The
feature identifying procedure is one of the key steps for building
pseudo-honeypot systems. Our approach is to leverage the features
that have been well explored in previous research [2, 22] with high
efficiency in attracting spammers. We can identify a set of most
effective ones and utilize them in the pseudo-honeypot system for
screening users. After that, we take the reverse engineering strategy
to refine the top ones that are more likely to attract spammers. These
refined attributes guide our design of a highly effective pseudo-
honeypot system.
After identifying a set of effective features, we screen the user
accounts that possess these features and use them to serve as the
pseudo-honeypot nodes, which surely can attract spammers with a
higher likelihood. Note here, the selected users may also be spam-
mers. By constructing pseudo-honeypot on this set of users, the
pseudo-honeypot can monitor their activities from nearby users
and collect their tweeting activities, thus yielding a much higher
probability of including spammer’s behaviors. Such a solution can
significantly reduce the spammer detection workload and increase
the probability of capturing spammers when comparing to the tra-
ditional spammer monitoring methods where spammer detection
is performed on the blindly monitored massive tweets.
Notably, even the pseudo-honeypot network takes normal users
as the parasitic body, its monitoring activities (i.e., data collection)
should be completely transparent to the normal users. That is, it
should be controlled to be unnoticeable to normal users and is
not allowed to perform any social interaction or interference to
Twitter users. Moreover, it is not allowed to dig the sensitive or
secret information and can only fetch the public information so
as to comply with the Twitter terms of the privacy policy. Such
functions are supported by the Twitter RESTful and streaming APIs.
By leveraging these APIs, pseudo-honeypot can monitor the users’
activities while maintaining transparency to them.
3.2 Online Pseudo-honeypot Monitoring
Since users and their neighbor’s activity patterns change over time,
the selected users may not always stay attractive to spammers
indefinitely. Besides, the spammers may keep changing their tar-
gets in order to attack more victims and prevent themselves from
being detected. To improve the performance of pseudo-honeypot
network, we enable pseudo-honeypot to drift across different sets
of users, where on each set of users, pseudo-honeypot stays only
for a short period of time and only when these users have adequate
activities. To express a period of time, we define the Prosperous
Period and Recession Period for selected users. The Prosperous Period
represents the time period that users post new tweets and bring
lots of mentions and reply activities in a certain time interval, while
Recession Period denotes the time period that users either do not
post new tweets, or post new tweets but bringing few mentions
or replies in a certain time interval. We let the pseudo-honeypot
to drift among different sets of users and always stay on the set of
users in the Prosperous Period to perform tweets monitoring.
4 TWEETSCORE
In this section, we present our novel solution, called TweetScore, for
efficient spam classification. At the core of TweetScore is to score
tweets by considering the relevant users while quantifying users
and their attribute relationships.
We start with an overview of TweetScore. Assume the pseudo-
honeypot collects a set of tweets, denoted as D. Our goal is to
classify each tweet in D as spam or non-spam. We extract the
“mention” activities among users as well as each user’s attributes to
construct the Activity Graph and Attribute Graph. For the Attribute
Graph, we can score the attribute relationships (i.e., each edge) based
on the mentioning frequency of the associated users. For attributes
that have no relationship in Attribute Graph, we predict their values
based on the scores of known attribute relationships. After that,
we customize the PageRank algorithm [16] into our design to score
the value of each attribute (i.e., vertex in the Attribute Graph). As a
result, each attribute has an associated value to reflect both attribute
and user relationships. On the other hand, we utilize the constructed
Activity Graph to perform the Random Walk algorithm [11] for
identifying the most relevant users (i.e., walk l steps) to this tweet.
Then, we can quantify the relevant attribute scores of this tweet by
using the start and end users (in the l steps) to evaluate attribute
values (from PageRank results). In parallel, we also use the Random
Walk results to model the users’ relationships while quantifying
such relationships into two vectors, sender vector and receiver
vector. We concatenate the attribute scores vector, sender vector,
and receiver vector into a single one to represent a tweet’s score
vector. Notably, such vector can reflect both the relevant users’
relationships and attributes’ relationships of the associated tweet.
In the end, we label a subset of tweets as the ground truth and
classify the remaining set of unlabeled tweets using the neural
network model.
Figure 3 shows the flowchart of our design. In the following, we
give the design details of each step in TweetScore.
4.1 Constructing Activity Graph
We extract user’s mentioning activities from D to construct directed
Activity Graph G as we discussed in Section 2.2. To model the
mention frequency and similarity of two users (i.e., vertices), we
define a weighted Activity Graph by giving a weight for each edge
¯e(i, j) ∈ ¯E, as follows:
w(i, j) = (1 + η · Sim(i, j))M(i, j),
(1)
where Sim(i, j) reflects the consine similarity [27] of activities be-
tween users i and j, η is an adjustment coefficient, and M(i, j) counts
Session 5A: Web SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand382shown that the attribute value of a spammer varies much dramati-
cally than a non-spammer, but it still stays within a relatively small
range. Thus, for these attributes whose values vary with time, we
define some continuous intervals for each attribute to capture such
fluctuation so as to construct the stable vertices in the Attribute
Graph. Thus, in the Attribute Graph, each vertex represents an inter-
val of one attribute. For ease of expression, we abbreviate attribute
interval as an attribute in the following steps, unless specified.
To construct the Attribute Graph ¯G, we take the user relation-
ships (i.e., edges) from the Activity Graph to map the attribute
relationships as we have described in Section 2.2. In ¯G, we quantify
the attribute relationships (i.e., assign a weight for each edge in
¯G) with numerical values by counting the mentions frequency of
the associated users. These numerical values represent the scores
of attribute relationships. That is, if there is a total number of w1
mentions from users having attributes x to users having attributes
y, then the weight of this edge ¯e(x, y) will be w1, which represents
the score of relationships between x and y. Obviously, we can only
get the attribute relationships for these edges that are existing in
¯G, but for these attributes whose associated users have no mention
activity, their relationships are unknown yet.
4.3 Scoring Attribute Relationships
We aim to score the relationships between any two attributes. This
can be done by prediction based on the known ones in ¯G. We
transform the scored ¯G into a matrix expression and denote it as
an Na by Na matrix A, where both the row and column represent
all vertices in ¯G (i.e., attributes), Na represents the total number of
all attributes in ¯G, and the entries in A represent the scores of the
attribute relationships. For these entries that do not have attribute
relationships in ¯G, we leave it as blank. Our goal of this step is to
predict these blank entries in A.
Here, we employ the UV-Decomposition method, which has
been widely used in recommendation system [14] and aims to find
an Na by m matrix U and an m by Na matrix V such that P = UV
closely approximates to A for these non-blank entries, while giving
predicted values to those blank entries. The general idea of such de-
composition is shown below. To simplify our expression, we denote
the entries of U, V, P and A in row i and column j as uij , vij , pij, and
aij, respectively. The entries in U and V are initialized into all ones
and then we vary each entry uij or vij to find a new value of uij or
vij that minimizes the Root-Mean-Squarre-Error (RMSE) between
A and P, i.e., min(aij − pij). Then, we can claim the new P approxi-
mates to A. For example, we vary the entry urs (i.e., consider it as
a variable) and want to find a new value for it, denoted as λ. This
affects only the i-th row in P, so each entry in the new r-th row in
k =1,k(cid:44)s urkvk j + λvs j for each
column j where all urk and vk j are the current values in U and V.
Then, we employ the RMSE method to minimize the differentiation
of A and P, that is:
P will be: pr j =m
k =1 urkvk j =m
j(cid:60)Q
min
(ar j − pr j),
j=1
(2)
where Q represents the set of column numbers whose correspond-
ing entries in A are blank.
Figure 3: The flowchart of TweetScore.
the frequency of mention activities from i to j. To calculate the co-
sine similarity, we refer Figure 1 and take the vertices A and D as
an example. We assume the mention frequency is 1 for each edge in
this figure. Since A mentions B, C and D, we define (cid:174)A = [0, 1, 1, 1] as
the vector of mention frequency from A to A, B, C and D. Similarly,
we define (cid:174)D = [0, 1, 1, 0] as the vector of mention frequency from
D to A, B, C and D. Then, the cosine similarity of A and D can be
calculated as follows:
Sim(A, D) =
=
(cid:174)A · (cid:174)D
∥ (cid:174)A∥·∥ (cid:174)D∥
 · 
∥ ∥∥ ∥ = 0.8165
4.2 Constructing Attribute Graph
We extract the attributes from user’s profile. This set of attributes
include number of friends, number of followers, number of
favorites, number of lists, account age, number of tweets,
number of retweets, number of mentions, number of hash-
tags, number of URLs, number of characters in the tweet and
number of digits in the tweet. The previous research [19] has
Tweet MonitoringTwitter StreamingPseudo-honeypotConstructionFilter the “Mention”ActivitiesTweetScore FrameworkExtract UserRelationsGenerate ActivityGraph (G)Random WalkExtract UserFeaturesGenerate AttributeGraph (   )¯GRank Attribute RelationshipsRun PageRankTweetScore VectorNeural NetworkUser Relationship Score Spam ClassificationDataLabelingSpam DetectionTweet Attribute ScoreSession 5A: Web SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand383To solve Eqn. (2), we take its derivative with respective to λ and
set its formula equal to 0, then we can get the value of λ as follows:
m
j=1 vs j(ar j −m
m
Na
i =1 uir(ais −Na
Na
j=1 v
2
ir
i =1 u
λ =
γ =
k =1,k(cid:44)s urkvk j)
2
s j
.
(3)
k =1,k(cid:44)r uikvks)
.
(4)
Similarly, we can set the entry of vrs to a variable γ and take the
same method to get a new value for vrs, that is:
We iteratively execute above operations and update one entry
in U or V each time until all uij and vij values are refreshed in
both U and V. The final P = UV will be the approximated matrix