            break;
        if (i > 0) //在l中找到了, 停止链表遍历
          break;
        /* 只有全部都是ef_free才能走到这里 */
        l->idx = 0;
      }
      if (l == NULL || i == sizeof(l->fns) / sizeof(l->fns[0])) //没有找到空闲位置
      {
        /*
        l==null 说明整个__exit_funcs中都没有ef_free
        i == sizeof(l->fns) / sizeof(l->fns[0]) 说明对于l节点, fns已经全部遍历了, 都没找到ef_free
        此时就需要插入一个新的exit_function_list节点
      */
        if (p == NULL)
        {
          assert(l != NULL);
          p = (struct exit_function_list *)calloc(1, sizeof(struct exit_function_list)); //申请一个结构体, p指向新节点
          if (p != NULL)  //分配冲哥
          {
            p->next = *listp; //头插法, 再__exit_funcs中插入一个节点
            *listp = p;
          }
        }
        if (p != NULL)  //分配成功
        {
          r = &p->fns[0]; //r指向新节点的第一个析构函数描述结构体
          p->idx = 1;
        }
      }
      else //找到空闲位置了, l节点中第i个为ef_free
      {
        r = &l->fns[i];
        l->idx = i + 1;
      }
      /* 此时这个函数位置的类型从空闲(ef_free)变为使用中(ef_us), 等待写入函数指针 */
      if (r != NULL)
      {
        r->flavor = ef_us;
        ++__new_exitfn_called;
      }
      __libc_lock_unlock(lock);
      return r;
    }
## __exit_funcs中有什么函数?
exit()中的析构函数很明显是在main()执行之前就已经注册了, 那么是谁注册的呢?
我们首先需要明白一个程序是怎么启动的?
  * 新程序的启动往往是通过libc中exe()系列函数进行的, exe系列函数最终都可以归纳为execve这个系统调用
  * 系统层面 
    * kernel会检查这个文件的类型
    * 确定是elf之后会为新进程分配页表, 文件描述符, task描述符等各种资源
    * 然后解析这个elf文件, 把text data bss等段都映射到内存中
    * 然后jmp到elf的入口点, 从而开始执行
###  ELF的入口点_start()
但是现代ELF一般都使用了运行时重定位机制
也就是说elf文件的text段还有些地址位置还没有确定, 只有运行是才知道, 比如各种libc库函数的地址, 编译时并不知道libc会被mmap到哪里,  
自然也不知道libc中函数的地址
因此如果kernel发现需要运行时重定位, 那么就会转而jmp到这个elf指定的动态链接器(也就是常用的ld.so.2),  
由ld去重定位elf中相关地址后再jmp到elf的入口点
但是ld并不是直接执行main()函数, 因为有析构函数就必定有构造函数, 在进入main之前还需要进行参数设置, 申请流缓冲区等操作
实际上ld会跳转到elf中的_start标号处, 这才是elf中第一个被执行的指令地址
  * _start标号处的程序由汇编编写, 对应libc中start.S文件, 
    * _start做的工作很少, 只会为__libc_start_main()设置好参数, 然后调用
    * _start()会在编译的时候被链接入ELF文件中
    * 而 **libc_start_main()定义在libc中, _start()通过PLT+GOT调用到** libc_start_main()
_start()的源码:
    ENTRY (_start)    /* 编译时告诉链接器, 这里才是整个函数的入口点 */
        /* Clearing frame pointer is insufficient, use CFI.  */
        cfi_undefined (rip)
        /* 初始化栈底: %ebp=0 */
        xorl %ebp, %ebp
        /* 设置__libc_start_main的参数
           调用__libc_start_main的参数会通过如下寄存器传递, 因为linux才用cdecl函数调用约定:
        main:        %rdi
        argc:        %rsi
        argv:        %rdx
        init:        %rcx
        fini:        %r8
        rtld_fini:    %r9
        stack_end:    stack.    */
        mov %RDX_LP, %R9_LP    /* 设置参数rtld_fini */
    #ifdef __ILP32__
        mov (%rsp), %esi    /* Simulate popping 4-byte argument count.  */
        add $4, %esp
    #else
        popq %rsi        /* Pop argc */
    #endif
        /* 设置参数argv */
        mov %RSP_LP, %RDX_LP
        /* rsp对齐 */
        and  $~15, %RSP_LP
        /* Push garbage because we push 8 more bytes.  */
        pushq %rax
        /* Provide the highest stack address to the user code (for stackswhich grow downwards).  */
        pushq %rsp
    #ifdef SHARED
        /* 设置参数init和fini */
        mov __libc_csu_fini@GOTPCREL(%rip), %R8_LP
        mov __libc_csu_init@GOTPCREL(%rip), %RCX_LP
        /* 设置参数main函数地址 */
        mov main@GOTPCREL(%rip), %RDI_LP
        /*     调用__libc_start_main() 
            __libc_start_main()进行一些构造工作, 然后调用main()
            main() return到__libc_start_main之后 __libc_start_main会进行析构工作 */
        call __libc_start_main@PLT
    #else
        /* Pass address of our own entry points to .fini and .init.  */
        mov $__libc_csu_fini, %R8_LP
        mov $__libc_csu_init, %RCX_LP
        mov $main, %RDI_LP
        /* Call the user's main function, and exit with its value.
           But let the libc call main.      */
        call __libc_start_main
    #endif
        hlt            /* Crash if somehow `exit' does return.     */
    END (_start)
编译后的结果可以看的更加清楚, 用IDA反汇编结果如下
  * 由此注册析构函数的关键点就在__libc_start_main()中
###  __libc_start_main()
这个函数定义在libc源码的libc-start.c文件中, 由于比较复杂, 因此只分析关键部分
  * 首先是其参数列表也就是_start()传递的参数, 我们中重点注意下面三个 
    * init: ELF文件 也就是main()的构造函数
    * fini: ELF文件 也就是main()的析构函数
    * rtld_fini: 动态链接器的析构函数
    static int __libc_start_main(
                    int (*main)(int, char **, char **MAIN_AUXVEC_DECL), //参数: main函数指针
                    int argc, char **argv,                              //参数: argc argv
                    ElfW(auxv_t) * auxvec,
                    __typeof(main) init,     //参数: init ELF的构造函数
                    void (*fini)(void),      //参数: fini ELF的析构函数
                    void (*rtld_fini)(void), //参数: rtld_fini ld的析构函数
                    void *stack_end         //参数: 栈顶
            )
    {
        ...函数体;
    }
  * 进入函数体, __libc_start_mian()主要做了以下几件事 
    * 为libc保存一些关于main的参数, 比如__environ…
    * 通过atexit()注册fini 与 rtld_fini 这两个参数
    * 调用init为main()进行构造操作
    * 然后调用main()函数
    static int __libc_start_main(...)
    {
      /* 保存main的返回地址 */
      int result;
      //获取环境变量指针, 并保存到libc的.data中
      char **ev = &argv[argc + 1];
      __environ = ev;
      /* 保存下栈顶 */
      __libc_stack_end = stack_end;
        ...;
      /* 初始化TLS */
      __pthread_initialize_minimal();
      /* 设置stack guard */
      uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard(_dl_random);
      /* 设置pointer gurad */
      uintptr_t pointer_chk_guard = _dl_setup_pointer_guard(_dl_random, stack_chk_guard);
        ...;
      /* 注册动态链接器(ld.so.2)的析构函数  */
      if (__glibc_likely(rtld_fini != NULL))
        __cxa_atexit((void (*)(void *))rtld_fini, NULL, NULL);
      /* 进行一些简单的libc初始化工作: 在libc中保存argc argv env三个参数 */
      __libc_init_first(argc, argv, __environ);
      /* 注册ELF的fini函数  */
      if (fini)
        __cxa_atexit((void (*)(void *))fini, NULL, NULL);
      /* 如果ELF有构造函数的话, 那么先调用init() */
      if (init)
        (*init)(argc, argv, __environ MAIN_AUXVEC_PARAM);
        ...;
      /* 调用main()  */
      result = main(argc, argv, __environ MAIN_AUXVEC_PARAM);
      /* 如果main()返回后, __libc_start_main()回帮他调用exit()函数 */
      exit(result);
    }
至此我们知道 **libc_start_mian()会在** exit_funcs中放入下面两个函数
  * ELF的fini函数
  * ld的rtld_fini函数
然后会调用一个构造函数:
  * init()
我们分别分析这三个要素
**ELF的fini()**
被编译在elf的text段中, 由_start()传递地址给__libc_start_main()
就是一个空函数, 没什么用
**ELF的init()**
让我们思考一个问题: 如果只有fini与init的话, ELF只能有一个构造/ 析构函数
当具有多个构造析构函数时改怎么办呢?
ELF的解决方法是, 把所有的构造函数的指针放在一个段: .init_array中, 所有的析构函数的指针放在一个段 .fini_array中
init就负责遍历.init_array, 并调用其中的构造函数, 从而完成多个构造函数的调用
**ld的rtdl_fini()**
我们说完了.init_array, 那么对于.fini_array呢?
很明显不是ELF的fini()负责 , 因为他就是一个空函数, 那么就只能由rtdl_fini来负责
rtdl_fini实际指向_dl_fini()函数, 源码再dl-fini.c文件中, 会被编译到ld.so.2中
**rtdl_fini概述**
但是为了不再源码中迷失, 我们首先需要搞明白_dl_fini()需要进行哪些工作
首先我们需要了解linux的共享库机制
  * 假设程序A B都使用了printf函数
  * 如果编译时都在在A.ELF B.ELF中写入printf的指令, 那么会造成空间上的浪费
  * linux会把printf的指令写入libc.so.6中, 然后把libc分别映射到进程A 进程B的虚拟地址空间中
  * 这样A B执行printf函数时, 实际只用了一份代码, 可以避免空间上的浪费
  * 我们把进程空间中的一个单独文件, 称之为模块
  * ld.so.2会通过dl_open()把所需文件到进程空间中, 他会把所有映射的文件都记录在结构体_rtld_global中
  * 当一个进程终止, ld.so.2自然需要卸载所映射的模块, 这需要调用每一个非共享模块的fini_arrary段中的析构函数
  * 一言以蔽之: _dl_fini()的功能就是调用进程空间中所有模块的析构函数
**命名空间**
  * Linux Namespaces机制提供一种资源隔离方案。
  * 我们可以认为namespace就是一个进程的集合, 这个进程集合中可以看到相同的全局资源, 并与其他命名空间独立
  * 这里不是重点, 了解这个概念可以帮助理解rtld结构体
**rtld_global结构体**
接着来看_rtld_global结构体, 这个结构体很复杂, 我们只看与本文相关的
  * _rtld_global一般通过宏GL来引用, 这个结构体定义在ld.so.2的data段中
    #define GL(name) _rtld_global._##name
    extern struct rtld_global _rtld_global __rtld_global_attribute__;
  * 再看其结构体struct rtld_global的定义 
    * 一些缩写的含义: 
      * ns代表着NameSpace
      * nns代表着Num of NameSpace
    * struct rtld_global先以命名空间为单位建立了一个数组 _dl_ns[DL_NNS]
    * 在每个命名空间内部加载的模块以双向链表组织, 通过_ns_loaded索引
    * 同时每个命名空间内部又有一个符号表_ns_unique_sym_table, 记录着所有模块导出的符号集合
    struct rtld_global
    {
        #define DL_NNS 16
        struct link_namespaces
        {
            //每个模块用_ns_loaded描述, 这个命名空间中所映射的模块组成一个双向链表, _ns_loaded就是这个链表的指针
            struct link_map *_ns_loaded;
            /* _ns_loaded中有多少模块 */
            unsigned int _ns_nloaded;
            /* 映射模块的搜索表 */
            struct r_scope_elem *_ns_main_searchlist;
            /* This is zero at program start to signal that the global scope map is
           allocated by rtld.  Later it keeps the size of the map.  It might be
           reset if in _dl_close if the last global object is removed.  */
            size_t _ns_global_scope_alloc;
            /* 这个命名空间中的符号表, 单个命名空间中的符号不允许重复 */
            struct unique_sym_table