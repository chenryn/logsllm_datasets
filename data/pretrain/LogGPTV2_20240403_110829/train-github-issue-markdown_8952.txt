 **Migrated issue, originally created by Anonymous**
Hello everyone,
picture a common code location within a company, outside of any application,
where database entities would be stored for common use in different
applications within that company. In that common area you would store base
objects of database entities such as a base object for a contract. That
contract base object would be declared using declarative base and would use
table information previously gathered through sqlautocode. Also it would
include manual relation setups, such as the product this contract is bound to.
Optionally it may also contain common logic.
In your application you would inherit from this contract base object and add
your application-specific logic to it. The goals of this setup would be: Keep
your company wide-used objects in a common place, avoid redundancies.
This pretty much works with SA, as declarative base was designed with
inheritance in mind. (kudos!) What does not work, however, is using a custom
polymorphic map, when this map would be set up on first inheriting from the
base object (you wouldn't want to set up polymorphic mapping in your base
object if you don't need this kind of differentiation of your contract objects
in all of your applications).
Example scenario:
    class ContractBase(Base):
        """ Contract base """
        __tablename__ = 'schema.contract'
        product_list = relation(...)
    class Contract(ContractBase):
        """ Contract """
        __mapper_args__ = {'polymorphic_on': contract_table.c.contract_status_id,
                           '_polymorphic_map': ContractStatusPolymorphicMap()}
    class ActiveContract(Contract):
        """ Active contract """
    class InactiveContract(Contract):
        """ Inactive contract """
(This is a fictional scenario. Please don't care about its use in general and
use of a custom polymorphic map in particular.)
In this scenario the polymorphic_on mapper argument is being used. The
polymorphic_map argument, however, is "ignored", as it is being overwritten in
the _configure_inheritance() call:
                self.polymorphic_map = self.inherits.polymorphic_map
I guess we should only overwrite self.polymorphic_map in
_configure_inheritance() if self.inherits.polymorphic_map is not the default
(f.e. self.inherits.polymorphic_map is not None and self.polymorphic_map is
only being set in the constructor if self.polymorphic_on is not None).
Best Regards,  
Thomas Wiebe