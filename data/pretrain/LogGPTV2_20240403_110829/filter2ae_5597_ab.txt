        * {
            font-size:18px;
            font-weight:bold;
            color: #2e2e2e;
        }
            const el = document.getElementById('container')
            const dynamic_paragraph = document.createElement('p')
            const dp_content = document.createTextNode('Hello from dynamically added aragraph!')
            dynamic_paragraph.appendChild(dp_content)
            el.appendChild(dynamic_paragraph)
当你打开浏览器并查看源码时，你会发现所呈现的内容和上面的代码是一样的。  
在这个非常简单的例子中，JavaScript添加一个元素到DOM树中。为了看清这样的不同，在开发者工具中使用Elements tab去查看  
当你对比Elements标签的中的内容和查看源代码中的内容，你会很容易发现它们的不同点。在Elements标签页中，你可以看到``
元素之间的内容，它被添加到了``元素的子节点中。你源码模式中不会看到这些元素，因为它们不存在于源代码中。
如果你用一些框架处理这些单页应用，例如AngularJS, React, Vue.js,
Ember.js等。你会看到大量的动态内容被添加到标签之中。这些内容包含变量，还有表单，带分页，排序搜索属性的动态表格或列表。这些元素会造成大量DOM
XSS的产生，或者前端模板会解析用户的输入（像AngularJS会解析{{ }}）  
漏洞的原因在于，应用常常使用来自GET请求，POST请求中，保存在cookie中的数据或者浏览器存储中的数据去渲染网站应用中的内容。并且应用自己也会创建很多东西，所以总是会有机会去发现各种各样的漏洞。
在我们进入到JavaScript这一章节之前，还有一点非常重要的事情要说，你要注意网页源代码中那些没有被渲染的注释。你会发现非常多有价值的东西。
# 查看cookie和浏览器存储
你用开发者工具做的另外一件事情就是去检查那些存储在客户端上的信息。网站应用经常会用到两个地方。其中最常见的就是cookie--通过名称来识别的一小片数据（其实cookie就是简单的键-值对数据），通过http请求包和返回包，cookie会在客户端和服务器端来回交换。
浏览器存储是另一个地方，你会在其中发现很多有价值的东西。它们有两种存储形式：本地存储和session存储。这两种存储方式的不同点在于，当你关闭应用时，session会消失（当你关闭浏览器的tab时或者关闭整个浏览器时）。而如果你没有指定时间的话，本地存储会保存相当一段时间（数据本身没有过期时间）
你可以使用开发者工具中的Application tab去查看所有存储在本地的信息。  
使用Application
tab你不仅仅能看到这些数据的内容，你还可以去修改，删除，和增加你自己所需要的键以及对应的值，修改这些值之后，应用可能会发生一些不可思议的现象，有时甚至会触发漏洞。通过这样的方式去修改session
token，看会不会导致越权的产生--只要改变维持会话的cookie值就可以了（这仅仅是一个例子，现代web应用程序使用几种不同的方式去识别用户并且仅仅改变单个cookie不足以冒充为其他的用户）  
这个标签页上还有一个位置，你可以在那个上面发现JavaScript源码和web应用程序的关系：Service
Workers。你可以在下面这个网站中找到关于Service Workers的介绍 --
这里还是有不少新的东西，不仅许多web应用程序会用到，还可以用它分析web应用是如何工作的，尤其在web应用离线时。
# 分析JavaScript
现在我们来到代码这一章节，这些代码会运行在整个web应用之中（HTML和css仅仅只会作为展示，它们不会包含任何逻辑。但还是有一小部分css的表达式可以运行JavaScript代码，这种特性会导致xss漏洞
--但是在纯HTML和css组成的网页中，这样的机会不是很多）  
有几种方式去分析JavaScript代码，我们先用浏览器中的工具试试。我已经介绍了关于Sources
标签和如何使用{}这个功能来让压缩后的代码变的可读。但是你可以用开发者工具做更多的事情其中最好用的一个就是JavaScript的debugger
## 使用DevTools debugger
如果你不了解debug是什么，那么通俗来说，就是让程序停在某一行代码上。这让你可以看到实际的变量值，实际所执行的函数和函数怎么样被调用的（这个优点主要得益于调用栈
--debugger展示了函数的调用顺序，像函数a被函数b调用，在此之前，函数b被另一个函数c调用）。并且debugger允许你单步运行代码（一条指令），这可以让你有机会跟踪程序的每一次改变和其中的状态。最后一点，debugger可以修改运行时的程序，这意味着，当你修改变量时甚至程序自身的逻辑时，程序将会发生什么。高效的使用debugger是一种非常好的方式，我认为这是每一个优秀程序员都应该具备的重要技能。
从赏金猎人的角度来看，debugging可以让你更好的明白程序是怎样工作的，你也可以直接测试你的payload。你也可以很轻松的直接从程序中分离出有漏洞的代码，并且可以用debugger给予你的有力工具去测试这些东西。例如，想象一下，你发现了一个有任意重定向漏洞的函数，你想了解这个函数每一次到底做了什么，这个函数被调用之后浏览器就被重定向到了一个外部的资源，当你被重定向之后，你不会重定向之后的页面里面看到上一步页面的代码。
在重定向函数之前设置一个设置断点，浏览器运行到重定向函数之前就可以停下来，现在你去读取函数的源代码，去了解这个函数是如何工作的，想清楚你要如何注入你的payload，是否需要将你的payload进行编码或者去做其他的事情。
了解完原理之后，就去练习一下。  
下面这个代码实现了一个简单重定向的功能
        Redirection