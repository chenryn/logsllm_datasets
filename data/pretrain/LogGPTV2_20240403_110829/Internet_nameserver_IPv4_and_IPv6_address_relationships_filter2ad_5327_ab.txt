In addition to the opportunistic, passive DNS data collec-
tion, we develop an active DNS measurement to both val-
idate and better understand our passive results. This ac-
tive DNS measurement ties the previous two techniques
together by permitting us to perform the targeted TCP-
based timestamping on a subset of the DNS resolvers
obtained passively to further evaluate siblings.
There are numerous open DNS forwarders on the pub-
lic Internet, mostly misconﬁgured NAT devices. We ob-
tained about 500 addresses of such NATs from data col-
lected by Netalyzr [21] which were both open and for-
warded to a resolver which supports IPv6. Additionally,
≈6500 of the IPv4 addresses and ≈2600 of the IPv6 ad-
dresses associated with the passively collected DNS re-
solvers are open and also respond to external requests.
Thus there exist a large pool of systems which will pro-
cess recursive DNS requests, either on their own or by
forwarding to their conﬁgured recursive DNS resolver.
We actively probe these open systems, issuing spe-
cially crafted queries for DNS names for which we are
authoritative. Our authoritative domains are served by a
custom DNS server that is compliant with the DNS stan-
dard [12]. This server listens on both IPv4 and IPv6,
uses both TCP and UDP, and reacts differently depend-
ing upon the incoming request. The server handles mul-
tiple domains that support either IPv4 or IPv6 requests,
where the choice of domain selects the IP protocol used
by the recursive resolver. We can also force a resolver
to contact our server via TCP by always replying with
TRUNCATE to UDP requests [6], which signals to the re-
solver that it must retry using TCP.
object induce the resolver under test to issues a series of
queries that alternate between IPv4 and IPv6. We main-
tain state between requests by specially encoding the re-
turned results such that the end result is a “chain” of IPv4
and IPv6 records that we observe a remote system using
to resolve the record. Figure 3 shows a timing diagram
of the interaction of our prober and authoritative DNS
with a resolver that has IPv6 addresses=A1, A3 and IPv4
addresses=A2, A4.
An individual measurement queries the open resolver
or forwarder for a single TXT record. The resolver
can only fetch this name using IPv6, but instead of
just returning a value, our server returns a canonical
name (CNAME) alias. This CNAME encodes the IPv6 ad-
dress which contacted our server; for example an IPv6
address 2001:f8b0::91 is encoded into the CNAME:
“2001yf8b0yy91.nonce.dnstest.icsi.berkeley.edu.”
This returned CNAME exists within the IPv4-only do-
main. The next CNAME redirects back to IPv6, encoding
both IPs. After following another CNAME back to the IPv4
domain, our server ﬁnally returns a TXT record reporting
the sequence of four IP addresses which contacted our
server. Note that while DNS authority servers may typi-
cally include multiple records in a single returned result,
our server only returns one result at a time in order to
force multiple lookups and infer the chain. Our CNAME
encoding scheme, combined with DNS message com-
pression [25], ensure that, even in the worst case ASCII
IPv4 and IPv6 encoding expansion, our chains of length
4 are less than 512 bytes. As 512B is the limit for DNS
over UDP, we ensure that our chains rely on neither trun-
cation nor EDNS0 [35].
An example lookup using our deployed authority to
query the Google Public DNS is:
dig +short TXT @8.8.8.8
cname1e6464.nonce.v6.dnstest.icsi.berkeley.edu
We initiate queries to the open and forwarding re-
solvers. The results from our DNS server for the queried
which returns the nonce and the sequence of addresses
that contacted our server to resolve the request.
4
c1.N.v6.domain
P
r
o
b
e
r
TXT="A1 A2 A3 A4"
v6Q? c1.N.v6.domain
CNAME=c2.N.A1.v4.domain
v4Q? c2.N.A1.v4.domain 
CNAME=c3.N.A1.A2.v6.domain
v6Q? c3.N.A1.A2.v6.domain
CNAME=txt.N.A1.A2.A3.v4.domain
v4Q? txt.N.A1.A2.A3.v4.domain
TXT="A1 A2 A3 A4"
S
N
D
h
t
u
A
n
i
a
m
o
d
Resolver (w/ IPv6=A1,A3; IPv4=A2,A4)
Figure 3: Active DNS Probing: Our authoritative DNS server returns a series of CNAME results with alternating IPv6
and IPv4 glue. We probe a resolver under test for our special domain, including a nonce N. State is maintained on
addresses the resolver uses by encoding the IPs along the chain. The ﬁnal result is the sequence of IPv4, IPv6 addresses
used by the resolver (here A1, A2, A3, A4).
As we will show in §3, many large-scale resolvers are
actually clusters, not individual systems. A cluster might
be behind a single publicly facing IP address with load
distributed among multiple backend machines, or might
encompass multiple publicly visible IP addresses. We
therefore repeat our active DNS probes 32 times in order
to gain a more complete picture of cluster structure when
present. Since the DNS speciﬁcation [12] requires that
the recursive resolver process the entire CNAME chain,
these four IP addresses should represent the same “sys-
tem” responsible for completing the DNS resolution.2
The replies themselves have a 0 second TTL and the
request contains a counter, thus a resolver should never
cache the result.
We also conduct a series of requests that force
These use individual queries over both
truncation.
IPv4 and IPv6 where the authority server
forces
each request to retry using TCP. During these scans,
we collect packet
traces on our server in order to
capture the TCP timestamps. Although the recur-
sive resolver’s eventual reply is over UDP,
the ex-
tra latency required to complete these lookups may
be easily observed (e.g. even by external parties
by querying txt.v4t.dnstest.icsi.berkeley.edu and
txt.v4.dnstest.. several times and comparing the re-
sults.)
Although limited to probing IPv6-capable resolvers
that either directly accept requests or where we know
2We initially noticed a complication where a NAT forwarder could
send an initial lookup to our server but, after receiving our CNAME reply,
it queries instead a conﬁgured recursive resolver for the CNAME. We ob-
serve that most such systems are not IPv6 capable, so we changed our
query’s order from V4/V6/V4/V6 to V6/V4/V6/V4 to prevent a NAT
from initiating the request directly, forcing it to contact the conﬁgured
recursive resolver.
a forwarder exists (thus excluding most corporate net-
works), the active measurement has several advantages
over the passive measurements. This technique forces
the resolver to use IPv6 (instead of relying on a resolver’s
preference for IPv6 over IPv4). Since the measurements
all occur within a short time window, this measurement
is not affected by network changes. It also produces a
set of up to four siblings, allowing it to more effectively
and precisely map the structure of a cluster resolver. Fi-
nally, by combining the DNS CNAME measurement with
our use of truncation to force TCP lookups, we are able
to even more precisely characterize siblings within clus-
ters. While the passive measurements identify common
clusters, the active measurements enable use to identify
common systems.
3 Results
This section analyzes results from deploying the afore-
mentioned techniques on the IPv4 and IPv6 Internet.
However, we begin by concretely deﬁning our notion of
sibling “equivalence classes.”
3.1 Sibling Equivalence Classes
To better understand sibling relationships, we conceptu-
alize the associations as a bipartite graph. The set of dis-
covered IPv4 and IPv6 addresses (nodes) are connected
by edges as our techniques discover associations. We de-
ﬁne an equivalence class that encompasses siblings, i.e.
IPv4 and IPv6 addresses connected in the graph. Let m-
n denote an equivalence class containing m IPv4 and n
IPv6 addresses. To illustrate, Figure 4 provides an ex-
ample with 5 IPv4 addresses, 7 IPv6 addresses, and 8
5
IPv4
IPv6
Figure 4: Example equivalence classes, various ways of
measuring 1-1 equivalences are given in Table 1.
address pairings (edges). The address pairs partition into
4 equivalence classes, two of which are 1-1, one is 2-1
and one is 1-4. 4 of the 12 addresses (33%) are in the 1-1
equivalence class, while 2 of the 8 address pairs (25%)
are 1-1. The canonical case of a simple dual-stack server
with a single routable IPv4 and IPv6 address represents a
1-1 sibling equivalence class. Though the converse need
not hold as a 1-1 relationship may also be the public fac-
ing portion of a more complicated architecture.
3.2 Passive DNS Equipment Siblings
We examine (v4, v6) DNS resolver address pairs as col-
lected by the Akamai network, using our passive tech-
nique of §2.1, over a six month period from 17 Mar 2012
to 13 Sep 2012. Akamai observes a signiﬁcant cross-
section of global DNS trafﬁc in its role as a large CDN;
the dataset includes resolvers from over 213 countries [3]
and contains: 674,000 (v4, v6) pairs with 271,000 unique
IPv4 and 282,000 unique IPv6 addresses.
It is well-known that DNS servers and resolvers expe-
rience signiﬁcant load, and that many approaches exist
for balancing DNS query load [29, 2]. Thus, while we
expect many instances of 1-to-1 IPv4 to IPv6 mapping,
we also discover complex IPv4 and IPv6 interrelation
among DNS resolvers and resolver clusters. Note: we do
not automatically presume that an equivalence class of
the DNS servers is an equipment sibling, as it is possible
that the machines associated with the addresses that are
grouped into in the equivalence class may not be coop-
erating in any sense, but rather that some of the recorded
addresses are from some intermediary boxes uncoordi-
nated with the actual resolver, for example.
Frequently, multiple addresses of a non-1-1 equiv-
alence class reside in a given network preﬁx (e.g.
network/mask). We therefore examine aggregating
addresses by preﬁx, thereby forming network-speciﬁc
equivalence classes. Given that larger preﬁxes lead to
greater simpliﬁcation, but also increase the chance of
pooling together unrelated equipment, we chose a /24 for
IPv4 and a /64 for IPv6. We obtain different results de-
6
Table 1: Prevalence of 1-1 equivalence classes
Data Set
Addresses
Aggregate to
preﬁxes (before)
Aggregate to
preﬁxes (after)
Restrict to
last week and
aggregate to
preﬁxes (after)
Aggregate to
AS’s (after)
Example in Fig 4
Num
of
pairs
% of
eq cls
that
are 1-1
674,000 77%
238,000 67%
260,000 83%
49,000
92%
55,000
8
95%
50%
% of
v4+v6
in 1-1
eq cls
34%
31%
55%
83%
92%
33%
% of
pairs
in 1-1
eq cls
14%
18%
39%
75%
89%
25%
pending on whether preﬁx aggregation is performed be-
fore or after forming equivalence classes. Table 1 shows
1-1 equivalence class prevalence for the passive-DNS
data set, as well as for preﬁx aggregation before and af-
ter computing classes, and, for reference, the example of
Figure 4.
Perhaps counter intuitively, aggregating addresses to
preﬁxes before forming equivalence classes sometimes
leads to classes that have more pairs. For example,
when aggregating a v4 address to its /24 preﬁx, there
may be other v4 nameservers in that preﬁx which are
in other equivalence classes, and some of the v6 name-
servers associated with these other v4 nameservers are
in /64 preﬁxes different from those in the original equiv-
alence class, and this can continue, thereby creating a
larger class.
In contrast, if address-based equivalence
classes are subsequently aggregated to preﬁxes (the “af-
ter” case), then, by construction, the number of classes
remains the same, but the number of pairs within a class
can only decrease.
As shown in Table 1, 77% (93,832 of 122,610) of
the per-address equivalence classes are 1-1. Since each
equivalence class has equal weight when computing this
percentage, and since non-1-1 classes contain more than
two addresses and more than one address pair, percent-
ages for the latter two are lower. A signiﬁcant percent-
age of addresses and preﬁxes are in non-1-1 classes. In
particular, for the 553,126 addresses (sum of IPv4 and
IPv6), the percent of v4+v6 addresses in 1-1 equiva-
lence classes is only 34% (2 * 93,832 / 553,126). For
the 673,784 address pairs, the percentage is only 14%
(93,832 / 673,784).
When aggregated to preﬁxes (after) these percentages
increase, but still only 39% of preﬁx pairs are 1-1. Fig-
ure 5 is a scatter plot, using the relative frequency for
color, of the per-address equivalence classes. We explore
211
210
29
28
27
26
25
24
23
22
21
20
i
s
s
a
l
c
.
v
u
q
e
n
i
s
e
s
s
e
r
d
d
a
6
v
f
o
r
e
b
m
u
n
2-1
2-1
20
75%
5%
2%
1%
0.5%
0.2%
0.1%
29
210
22
21
28
number of v4 addresses in equiv. class
23
24
25
26
27
Figure 5: Scatter plot of number of v4 and v6 addresses
in the equivalence classes
potential causes for this broad range of m-n classes, as
well as the signiﬁcant reduction in complexity when ag-
gregating to autonomous systems (ASes), in §4.
3.2.1
IPv4 address within IPv6 address
Auto-tunneled [8] addresses raise a natural question
whether the embedded IPv4 address (i.e. the 32 bits that
come after the “2002:”) matches the paired IPv4 ad-
dress from the discovery technique. Of pairs including
a 6to4 address, the embedded IPv4 address equals the
paired address for 37% of the pairs, i.e. 63% do not. The
weak matching between paired and embedded address
is not surprising given that a network may have mul-
tiple IPv4 addresses distinct from the embedded IPv4
gateway address. Of matching cases, 21% embed the
paired address twice: both after the “2002:” and in the
lowest order 32 bits. Of 92 pairs with Teredo IPv6 ad-
dresses, (2001:0000::/32) only one has an embedded
IPv4 equal to the paired IPv4. Of the pairs where the
IPv6 address is neither 6to4 nor Teredo, just 0.6% have
an embedded IPv4 equal to the paired IPv4. Of these,
57% embed the IPv4 address in the lowest 32 bits. For
29%, the highest bit of the embedded IPv4 is at bit posi-
tion 96 and the rest are scattered across bit positions 48,
56, 64, and 104; and 11 pairs embed twice, at positions
96 and 32.
We also observe an interesting human-centric con-
vention in at least one major ISP’s DNS infrastructure.
Rather that encoding the IPv4 address directly in the
IPv6 address, the network assigns the lower 64 bits of
the IPv6 address so that the hexadecimal values ren-
der as the decimal equivalent of the IPv4 address, such
as 68.87.76.181 which has an IPv6 address of e.g.
2001:558:1014:f:68:87:76:181.
7
 20
 15
 10
 5
s
e
s
s
e
r
d
d
a