where st is the state information, f (Ikey, Ienc) = 1 and all
I0
key issued to Osk, Ork satisﬁes f (I0
enc) ¤ 1.
key, I(cid:2)
Table I. Deﬁnitions of oracles.
Input
Output
enc
Ikey
Ikey, I0
CTI, Ikey, I0
Ikey, CTI
I0
key, CTI, CTI0
enc
SKI
RKI!I0
CTI0
M or an error symbol ?
M or an error symbol ?
Oracle
Osk
Ork
Ore
Ode
Orvd
Selective CPA security. An AB-VPRE scheme is selec-
tively CPA secure at original ciphertexts (re-encrypted
ciphertexts) if we add an Init stage before Setup where the
adversary submits the challenge I(cid:2)
enc.
Weak master key security. An AB-VPRE scheme has
the weak master key security if for any PPT adversary A,
given access to the oracle O 2 {Osk,Ork,Ode,Orvd}, the
advantage in the following security game is negligible:
Pr[(PP, MSK)   Setup(1(cid:2), U);
key, SKI(cid:2) , RKI(cid:2)!I0)   AO
(I(cid:2)
CTI   Enc(PP, M, Ienc) :
M   Dec(PP, SKI(cid:2) , CTI)]  negl((cid:2)),
(PP);
where f (I(cid:2)
ﬁes Ikey ¤ I(cid:2)
from SKI(cid:2) where (I(cid:2)
key, Ienc) = 1, and any Ikey issued to Osk satis-
key. RKI(cid:2)!I0 is a re-encryption key generated
key, I0
enc) has been issued to Ork.
Selective weak master key security. An AB-VPRE
scheme has selective weak master key security if we add
an Init stage before Setup where the adversary commits
to I(cid:2)
key.
Veriﬁcation soundness. An AB-VPRE scheme meets
veriﬁcation soundness if for any PPT adversary A, given
access to the oracle O 2 {Osk,Ork,Ore,Ode,Orvd}, the
advantage in the following security game is negligible:
Pr[(PP, MSK)   Setup(1(cid:2), U);
enc, st)   AO
(M(cid:2), I(cid:2)
(PP);
CTI(cid:2)   Enc(PP, M(cid:2), I(cid:2)
enc);
enc, CTI0(cid:2))   AO
(I0
key, I0(cid:2)
(CTI(cid:2) , st);
SKI0   KGen(PP, MSK, I0
key);
REVer.Test(CTI(cid:2), CTI0(cid:2) ) = b :
b ^ REVer.Dec(PP, SKI0, CTI0(cid:2), b)
… {M(cid:2),?}]  negl((cid:2)),
where st is the state information and f (I0
key, I0(cid:2)
enc) = 1.
4. GENERIC CONSTRUCTION
In this section, we present our construction of an AB-
VPRE scheme based on a pairing-based AB-KEM scheme
described in a similar form of bilinear predicate encod-
ing scheme [21–23] and analyze its security. Here, we just
consider the AB-KEM scheme built on the bilinear group
system of prime order for practical applications.
4.1. Bilinear encoding AB-KEM
Let ˘KM = (KM.Setup, KM.KGen, KM.Enc, KM.Dec)
denote an AB-KEM scheme of which the algorithms are
described as follows:
(cid:4) KM.Setup(1(cid:2), U): The setup algorithm chooses
a bilinear group system (G, GT , e) of prime order
p (p 2 ‚(2(cid:2))) and then selects a generator g 2R G,
SecurityComm.Networks(2016) © 2016 John Wiley & Sons, Ltd.
DOI: 10.1002/sec
S. Lin, R. Zhang and M. Wang
Provable security
a vector Ea = (x, a1, a2,(cid:2)(cid:2)(cid:2) ) 2R (Z(cid:2)
p )`Ea and a value
˛ 2R Z(cid:2)
p . It outputs the public parameters PK =
(e, g, gEa, e(g, g)˛) and the master secret key MSK =
(˛, Ea).
(cid:4) KM.KGen(PK, MSK, Ikey): The key generation
algorithm chooses a vector Er 2R (Z(cid:2)
p )`Er and then out-
puts the private key SK = (SK0, SK1), where SK0 =
g˛ (cid:2) gxKE0(Er,Ea), SK1 = gKE(Ikey,Er,Ea).
(cid:4) KM.Enc(PK, Ienc, M): The encryption algorithm
selects s 2R Z(cid:2)
Eu 2R (Z(cid:2)
p )`Eu, and sets C0 = gs, C1 = gsCE(Ienc,Eu,Ea),
C2 = hs, then outputs the ciphertext C = (C0, C1, C2).
The encapsulated key is DK0 = e(g, g)˛s.
(cid:4) KM.Dec(SK, C): If f (Ikey, Ienc) ¤ 1, return an
error symbol ?; otherwise, compute e(SK0,C0)
to
F(SK1,C1)
obtain DK0 = e(g, g)˛s.
p , and a vector
Here, KE0, KE, CE are polynomial-time computable func-
tions, where the outputs are vectors over Z(cid:2)
p and F :
G`SK1 (cid:3) G`C1 ! GT is a polynomial-time computable
bilinear function satisfying the following property:
Decryptability. For all Ikey, Ienc, such that f (Ikey, Ienc)
= 1, there exists an efﬁciently computable bilinear function
F such that

(cid:2)
(cid:2)

gKE(Ikey,Er,Ea), gsCE(Ienc,Eu,Ea)
F
gxKE0(Er,Ea), gs
.
= e
The property of decryptability is similar to the property of
˛–reconstruction proposed in [22,23], and the correctness
of the aforementioned scheme can be veriﬁed easily. We
require that the functions KE0, KE, and CE have linear
properties described as follows:
Linearity. (i) For all Ea 2 (Z(cid:2)
p )`Ea, KE0(Er, Ea) is linear in
Er. (ii) For all Ikey and Ea 2 (Z(cid:2)
p )`Ea, KE(Ikey,Er, Ea) is linear in
Er. (iii) For all Ikey and Ea 2 (Z(cid:2)
p )`Ea, CE(Ienc, Eu, Ea) is afﬁne
in Ea and also afﬁne in Eu if Eu is not null.
Remark 1. The linearity of KE0, KE, and CE imply that
we can compute gxKE0(Er,Ea), gKE(Ikey,Er,Ea), and gsCE(Ienc,Eu,Ea)
given Ikey, Ienc along with g, gEa (but not Ea).
4.2. Construction of AB-VPRE
(cid:4) Setup(1(cid:2), U): Choose an AB-KEM described as
in Section 4.1, and a symmetric key encryption
scheme ˘SE = (SE.Gen, SE.Enc, SE.Dec), where `SE
denotes the length of the private key, and then select
a key derivation function KDF with the output length
` and a commitment scheme (Commit, Decom).
Call KM.Setup(1(cid:2)) ! (PK, MSK),
then output
the public parameters PP = (PK, KDF, `, ˘SE, `SE,
(Commit, Decom)) and the master secret key MSK.
(cid:4) KGen(PP, MSK, Ikey): Call KM.KGen(PK, MSK,
Ikey)! SK and output the private key SKI =(Ikey, SK).
SecurityComm.Networks(2016) © 2016 John Wiley & Sons, Ltd.
DOI: 10.1002/sec
C).
b
(cid:4) Enc(PP, Ienc, M): Call KM.Enc(PK, Ienc) ! (CI,
DK0), where CI = (C0, C1, C2). Compute KDF(DK0,
b
`) = DK k d, where ` = `SE+|d|, then run SE.Enc(DK,
M) ! C. Calculate Commitd(DK) =
C and output
the ciphertext CTI = (Ienc, CI, C,
(cid:4) Dec(PP, SKI, CTI): If f (Ikey, Ienc) ¤ 1, return ?.
b
If f (Ikey, Ienc) = 1, call KM.Dec(SK, CI) ! DK0 and
compute KDF(DK0, `) = DK k d, where ` = `SE + |d|.
C, run SE.Dec(DK, C) ! M and
If Commitd(DK) =
output M; otherwise, output ?.
(cid:4) RKGen(PP, SKI, I0
enc): Parse SKI = (Ikey, SK)
where SK = (SK0, SK1), and SK0 = g˛ (cid:2) gxKE0(Er,Ea),
SK1 = gKE(Ikey,Er,Ea). Choose E(cid:3), Eı 2R (Z(cid:2)
p )`Er and set
e
D = gKE0(Eı,Ea), rk = (rk0, rk1), where rk0 = SK0 (cid:2)
f
f
rk1 = SK1 (cid:2) gKE(Ikey, E(cid:3)+Eı,Ea).
gxKE0(E(cid:3),Ea), rk1 = SK1 (cid:2)
Call KM.Enc(PK, I0
enc) ! (QCI0,
DK, `SE), D) ! QC, and set CI0 = (QCI0,
SE.Enc(KDF(
QC). Output the re-encryption key RKI!I0 = (Ikey,
I0
enc, rk, CI0).
b
(cid:4) REnc(RKI!I0 , CTI): If f (Ikey, Ienc) = 1, Call
KM.Dec(rk, CI) ! C0
1 and output the re-encrypted
enc, C0, C0
ciphertext CTI0 = (I0
C, CI0); other-
b
b
wise, output an error symbol ?.
(cid:4) REVer.Test(CTI, CTI0): Parse CTI = (Ienc, C0, C1,
b
b
1, C0
0, C0
enc, C0
C),CTI0 = (I0
C0, CI0). IfC0 =
C2, C,
0
0 and C2 = C0
C0
C0, output
2 and C = C
b = 1; otherwise, return b = 0.
f
f
enc, I0
(cid:4) REVer.Dec(PP, SKI0, CTI0, b): If f (I0
key) ¤ 1
or b = 0, return ?; otherwise, call KM.Dec(SKI0,
b
QCI0)!
DK, `SE), QC)! D,
DK, and run SE.Dec(KDF(
then compute DK0 = C0
1 (cid:2) e(D, C0
2) and KDF(DK0,
C0, run SE.Dec(DK,
`) = DK k d. If Commitd(DK)=
0
) ! M, and output M; otherwise, return a special
C
symbol ? indicating that the veriﬁcation fails.
,
C =
1, C2, C,
2, C
and
then run
DK),
0
We note that the correctness for the original ciphertext
holds naturally, and the correctness for the re-encrypted
ciphertext can be veriﬁed as follows. If f (I0
C0
1 (cid:2) e(D, C0
enc, I0

key) = 1,
e(rk0, C0)
F(rk1, C1)
2) =
e

(cid:2) e(D, C2)

(cid:2)
SK0 (cid:2) gxKE0(E(cid:3),Ea), C0
Ikey, E(cid:3)+Eı,Ea
(cid:2)
SK1 (cid:2) g
, C1
Er+E(cid:3)+Eı,Ea
xKE0
g
KE
e
(cid:2)

Ikey,Er+E(cid:3)+Eı,Ea
KE
F
g
! (cid:2) e(D, C2)
!

!
, C0
, C1
=
F
= e(g, g)˛s (cid:2)
= e(g, g)˛s = DK0.
According to the linearity of the functions KE, KE0,
and the decryptability property, the third and the fourth
Provable security
b
equalities hold respectively. Then KDF(DK0, `) = DK k d.
If REVer.Test(CTI, CTI0) = 1 and Commitd(DK) =
C,
REVer.Dec(PP, SKI0, CTI0, b) outputs M.
4.3. Data privacy and re-encryption
veriﬁability
Now we discuss data privacy for original and re-
encrypted ciphertexts, and re-encryption veriﬁability for
the constructed AB-VPRE scheme. Formally, we have the
following:
Theorem 1. Suppose the AB-KEM ˘KM is CPA secure,
the symmetric key encryption scheme ˘SE is semantically
secure, the key derivation function KDF is secure, and the
commitment scheme (Commit, Decom) is computation-
ally hiding and binding, then the constructed AB-VPRE
scheme is CPA secure at original ciphertexts and meets
veriﬁcation soundness.
(cid:2)
,
four games
enc, CI(cid:2) , C
(Game0, Game1,
Proof. We consider
Game2, and Game3) between a challenger and a proba-
b
bilistic polynomial-time (PPT) adversary A as follows.
Game0: The real CPA game at original ciphertexts where
the challenge ciphertext CTI(cid:2) = (I(cid:2)
C(cid:2)) is
b