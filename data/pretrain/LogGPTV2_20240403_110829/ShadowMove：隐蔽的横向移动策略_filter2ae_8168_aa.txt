# ShadowMove：隐蔽的横向移动策略
|
##### 译文声明
本文是翻译文章，文章原作者 Amirreza Niakanlahij,Jinpeng WeiMd,Rabbi Alam,Qingyang Wang,Bei-Tseng Chu，文章来源：29th USENIX Security Symposium
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
高级持续威胁（APT）攻击使用各种策略和技术在进入奖励环境中横向移动。但是，现有的策略和技术具有局限性，例如需要更高的权限，创建新的连接，执行新的身份验证或需要进行过程注入。基于这些特征，已经提出了许多基于主机和基于网络的解决方案来防止或检测这种横向移动尝试。在本文中提出了一种新颖的隐蔽横向移动策略ShadowMove，其中仅将企业网络中系统之间已建立的连接误用于横向移动。它具有一组独特的功能，例如不需要提升的特权，不需要新的连接，不需要额外的身份验证以及不需要进行进程注入，这使它绕过了最新的检测机制。
ShadowMove通过新颖的套接字复制方法启用，该方法允许恶意进程以静默方式滥用良性进程建立的TCP连接。
本文为当前的Windows和Linux操作系统设计和实现ShadowMove，为了验证ShadowMove的可行性，构建了多个原型，这些原型成功劫持了三种企业协议FTP，Microsoft
SQL和Window Remote
Management，以执行横向移动操作，例如将恶意软件复制到下一台目标计算机并在目标计算机上启动恶意软件。还确认现有的基于主机和网络的解决方案无法检测到本研究的原型，例如五种顶级防病毒产品（McAfee，Norton，Webroot，Bitdefender和Windows
Defender），四个IDS（Snort，OSSEC，Osquery和Wazuh）以及两个终端检测响应系统（CrowdStrike Falcon
Prevent和Cisco AMP）。
## 0x01 Introduction
高级持久威胁（APT）是复杂的精心计划，并且是针对诸如政府机构或大型企业等知名目标的多步骤网络攻击。这种攻击是由资源丰富的知识渊博的攻击者（如Lazarus或APT38）进行的，每年给公司和政府机构造成数十亿美元的财务损失。
APT攻击者通常使用鱼叉攻击或水坑攻击在目标网络中找到立足点。一旦进入目标网络，他们会谨慎地使用承诺的系统作为进入其他系统的跳板，直到他们能够访问关键系统（例如包含机密文件的文件服务器）后，这些关键系统都被藏在网络内部。朝向关键系统的这种移动称为横向移动（
_lateral movement_ ）。
横向移动可以通过多种方式实现。攻击者可以利用SMB或RDP等网络服务中的漏洞在网络中横向移动。但是，由于防御机制的进步，找到此类漏洞并成功将其利用而不被发现就变得越来越困难。或者，攻击者可以从受感染的系统中获取用户凭据，然后重复使用这些凭据来执行横向移动（例如，凭据转储credential
dumping，哈希传递pass-the-hash或票证传递pass-the-ticket）。但是，这种方法需要创建新的网络连接，因此如果新连接偏离合法系统之间的正常通信模式，则可以通过网络级防御进行检测。攻击者可以使用另一种方法，利用劫持攻击来修改合法客户端，以便将其连接重新用于横向移动（例如，通过修补SSH客户端以与SSH服务器通信而不知道密码）。但是，此类攻击是特定于应用程序和协议的，需要进行过程注入。由于现有的基于主机的防御解决方案（例如Windows
Defender ATP）认识到各种过程注入技术，因此它们难以实施且易于检测。
在本文中提出了一种新颖的横向移动策略，称为ShadowMove，它使APT攻击者可以在企业网络中的系统之间平稳移动，而不会被现有的主机级和网络级防御机制所发现。攻击者希望避免在操作过程中利用远程服务中的漏洞，以减少被入侵检测系统（IDS）暴露的机会。在这种攻击情况下，攻击者被动地观察受感染系统的通信动态，以逐步构建其在目标网络中正常行为的模型，并利用该模型选择下一个受害者系统。此外，为了使攻击更加隐秘，攻击者将自己限制为仅重用已建立的连接。
WinRM（Windows远程管理）和FTP等许多应用程序协议允许用户在远程服务器上执行某些操作。攻击者将自己的命令注入此类协议的命令流中，以实现其目标。例如，攻击者可以通过在建立的WinRM会话中注入命令来远程执行程序），或者可以通过在建立的FTP连接中注入FTP命令来检查远程系统上的文件系统。
ShadowMove在良性客户端过程中不使用任何代码来注入伪造的命令。取而代之的是，它采用了一种新颖的技术来秘密复制合法客户端所拥有的套接字，并通过这种被盗套接字注入命令。这样，将不会创建新的连接，也不会执行新的身份验证，因为在已建立的会话的上下文中解释了所注入的命令；这意味着攻击者无需通过任何身份验证。
在本文中，展示了攻击者如何在典型的企业网络上实施这种攻击。为此开发了一个原型系统，该系统可以劫持在同一客户端下运行的FTP客户端，Microsoft
SQL客户端和WinRM客户端建立的现有TCP连接。用户帐户作为本研究的原型，没有任何提升的特权。还提供了一个基于Prolog的计划程序，攻击者可以利用该计划程序通过劫持可用的连接来系统地计划横向移动。这样，攻击者可以比现有攻击方案更秘密地访问关键系统。本文讨论了有关攻击者如何注入其数据包的技术挑战，这些数据包符合在已建立的TCP连接上运行的协议，并且在连接的另一端服务器可以接受。
## 0x02 ShadowMove
ShadowMove的基本思想是重用已建立的合法连接，以在受感染的网络内横向移动。如上图所示，ShadowMove的工作分为三个主要步骤：首先，它默默地复制合法客户端应用程序用来与服务器应用程序通信的套接字。其次，它使用复制的套接字在客户端和服务器之间的现有TCP会话中注入数据包。第三，服务器处理注入的数据包，并无意中保存和/或启动ShadowMove的新实例。这些步骤的结果是，攻击者会从客户端计算机秘密移动到服务器计算机。
由于ShadowMove会限制自己重用已建立的连接到相邻系统，因此它可以确保入侵检测系统对意外连接发出警报，而不会检测到它的运行。此外，通过这样做，攻击可以绕过建立新连接所需的身份验证阶段。从主机安全角度和网络安全角度来看，ShadowMove攻击都是值得注意的：在主机级别，ShadowMove滥用受害进程拥有的资源（即已建立并经过身份验证的网络连接）；另一方面，由于ShadowMove滥用的是套接字，通过将恶意网络流量与良性网络流量混合，其攻击行为扩展到了网络级别。
###  1）ShadowMove利用的基本弱点
ShadowMove攻击是现有计算机环境中的两个基本弱点。在诸如GNU Linux和Microsoft
Windows之类的商用操作系统中，这两个相互矛盾但必不可少的要求（即进程隔离和资源共享）的第一个漏洞。下一个弱点是由于许多现有的网络协议缺少适当的内置消息源完整性验证机制，这使它们容易受到消息注入攻击。
进程隔离和进程（资源）共享是相互矛盾的要求。进程具有虚拟地址空间，系统对象的打开句柄和其他属性。出于可靠性和安全性的考虑，必须保护操作系统中的所有进程免受彼此的活动影响。现代OS的保护机制将进程之间对不同种类资源（例如CPU，内存和I
/ O设备）的访问隔离开来。例如，内存隔离会将每个进程放入其自己的“地址空间”。
另一方面，现代OS支持在进程之间共享，因为共享数据/资源可能很有用。以套接字共享为例，一个进程首先创建套接字并建立连接，然后将那些套接字移交给其他进程，这些进程将负责通过这些套接字进行信息交换。但是，进程之间的共享存在风险，因此必须对其进行仔细控制。现代OS假设共享资源的进程通过设置适当的安全策略来控制对共享对象的访问，从而确保这种共享的安全性，从而彼此信任。
不幸的是，商用OS的默认访问控制策略遭受关于过程信任关系的错误假设。例如，内置的Windows安全策略允许同一用户的进程将其开放句柄共享给资源，而内置的Linux策略则允许父进程通过ptrace访问子进程的内存。这些默认允许策略假定同一用户的进程之间或父进程与子进程之间建立信任关系，这在当今的计算环境中是不现实的。结果，这种默认的允许策略可能会被攻击者滥用。在本文中提供了一个具体的示例，套接字复制攻击，它使恶意进程能够在与网络上的外部实体进行交互时模仿合法进程。
启用ShadowMove的另一个潜在问题是，在许多应用程序协议（例如FTP和TDS（用于MS
SQL））中缺少适当的消息源完整性检查。结果，端点无法验证消息的来源，以确保恶意行为者不会交错消息。复制套接字的攻击者可以在客户端的请求之间插入一个请求，并误导服务器以为原始客户端发送了该请求，从而处理了该请求。关于加强消息来源完整性，可以将应用协议分为三类：
•没有源完整性强制实施：这样的协议没有使服务器能够检查接收到的消息的来源完整性的任何内置机制，因此服务器接受符合协议的任何适当消息。它们容易受到ShadowMove攻击，一种典型的协议是FTP。
•原始完整性执行不充分：在这些协议中，服务器生成一个随机的随机数供客户端与其请求一起使用，并且服务器使用此随机数来验证接收到的请求的来源。不幸的是，这些协议对ShadowMove并不安全，因为攻击者可以等待客户端创建新连接并听取服务器的响应以立即学习。一种典型的协议是WinRM。
•充分执行原始完整性：在这些协议中，验证起源完整性所需的部分信息是由客户端而不是服务器生成的。在这种情况下，攻击者无法通过侦听服务器响应来学习该信息。这些协议不受ShadowMove的影响，其中一个代表性协议是SSL。
###  2）威胁模型
假设攻击者已经在普通用户的特权下建立了受害者系统，并且希望向关键资产进行横向移动。攻击者必须运行恶意软件才能实现此目的。假定将要劫持其TCP连接的受害者进程不知道恶意软件进程。
演示场景—以公司的员工自助服务应用程序为例。这是典型的多层企业应用程序，可以从浏览器进行访问。下面是这种系统的组件的描述：
•运行Web客户端的员工台式计算机，一些员工同时是IT人员，他们有时需要将内容推送到应用程序服务器，因此他们的计算机上安装了文件复制工具（例如FTP）。
•应用程序服务器，运行许多应用程序，例如工资，股票，健康保险，退休计划和差旅。
•数据库服务器，用于存储人员信息，例如DOB，SSN，联系信息和薪水，并由应用程序服务器访问。
在此示例中，攻击者通过鱼叉式网络登陆到员工的桌面上，而该员工恰好是IT人员。攻击者所追求的关键资产是存储在数据库服务器中的员工信息。因此，攻击者需要从桌面移动到应用程序服务器，然后再移动到数据库服务器。此外，他们需要在数据库服务器上保留一些工具，以便获取有关员工记录更新的每日报告。
为了从桌面移动到应用程序服务器，攻击者可以利用FTP连接（请参阅第4.2节）将一段恶意软件复制到应用程序服务器，然后等待该恶意软件被执行。例如，应用服务器通常可以在配置文件中指定的路径中运行外部程序（例如，用C实现的数据处理应用）。配置文件可能包含“命令名=
C：\ users \ alluser \ appdata \ updater \
dpanalyzer.exe”，并在此基础上，一旦触发了某些相关事件，应用服务器将执行dpanalyzer.exe。为了使应用程序服务器保持最新，授权IT人员将文件复制到应用程序服务器以更新dpanalyzer.exe。在这种情况下，攻击者可以利用FTP连接将一段恶意软件复制到应用程序服务器，以替换合法的dpanalyzer.exe，然后等待该应用程序服务器执行该恶意软件。攻击者可以通过相同的FTP连接获取配置文件的内容。
当恶意软件在应用程序服务器上启动时（例如dpanalyzer.exe），它可以利用应用程序服务器和数据库服务器之间的数据库连接（Microsoft
SQL）来进一步复制和启动。数据库服务器上的恶意软件。
## 0x03 ShadowMove Architecture and Design