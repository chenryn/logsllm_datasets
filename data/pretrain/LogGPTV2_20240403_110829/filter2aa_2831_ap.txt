### ATL Wizard Generated Server Resources and Registry Entries

When you examine the resources of a server generated by an ATL wizard, you will notice a section containing registry entries. These resources are used to define a new type of registry script. In the project's file list, you will see a file with the ".RGS" extension for each of these entries. By double-clicking on these "REGISTRY" resources, you can view the text files that contain the serverâ€™s registration commands. These RGS files are used to automatically update the registry entries for the server.

You may be familiar with "REG" scripts used with the REGEDIT application, but RGS scripts are used by a different application. The server's ATL classes implement a special COM interface called `IRegister`, which executes these scripts. The `IRegister` interface has limited capabilities to add, delete, and make simple text substitutions.

Here is an example of an RGS file:

```plaintext
HKCR
{
    BasicTypes.BasicTypes.1 = s 'BasicTypes Class'
    {
        CLSID = s '{543FB20E-6281-11D1-BD74-204C4F4F5020}'
    }
    BasicTypes.BasicTypes = s 'BasicTypes Class'
    {
        CurVer = s 'BasicTypes.BasicTypes.1'
    }
    NoRemove CLSID
    {
        ForceRemove {543FB20E-6281-11D1-BD74-204C4F4F5020} = s 'BasicTypes Class'
        {
            ProgID = s 'BasicTypes.BasicTypes.1'
            VersionIndependentProgID = s 'BasicTypes.BasicTypes'
            LocalServer32 = s '%MODULE%'
            val AppID = s '{543FB201-6281-11D1-BD74-204C4F4F5020}'
        }
    }
}
```

The syntax here is straightforward. `HKCR` stands for `HKEY_CLASSES_ROOT`. This script creates two entries: `BasicTypes.BasicTypes` and `BasicTypes.BasicTypes.1`. Under `HKEY_CLASSES_ROOT`, you will see these entries. The script also writes information into the `CLSID` key of the registry, including a key for the GUID and several significant sub-keys such as `LocalServer32`.

The `NoRemove` keyword ensures that the `CLSID` branch is not deleted when the server unregisters.

### Automatic Registration of Remote Servers

If the server runs as an EXE or service, registration is accomplished with a special startup command:

```bash
MyServer -RegServer
```

Let's look at the code generated by ATL. The following snippet is from the `WinMain` function in `IdlTest.CPP`:

```cpp
if (lstrcmpi(lpszToken, _T("RegServer")) == 0)
{
    _Module.UpdateRegistryFromResource(IDR_IdlTest, TRUE);
    nRet = _Module.RegisterServer(TRUE);
    bRun = FALSE;
    break;
}
```

When the server is run from the command line, it checks for the "RegServer" command. This command tells the server to write its settings into the registry and exit immediately. In this example, `_Module` is an ATL class of type `CComModule`. The `UpdateRegistryFromResource` function is called first, followed by `RegisterServer`.

Unregistration is a mirror image of registration. The server is invoked with a command line of "UnregServer":

```cpp
if (lstrcmpi(lpszToken, _T("UnregServer")) == 0)
{
    _Module.UpdateRegistryFromResource(IDR_IdlTest, FALSE);
    nRet = _Module.UnregisterServer();
    bRun = FALSE;
    break;
}
```

### In-Process Servers

For servers implemented as DLLs, the registration scheme is different. Each COM DLL must contain two exported functions: `DllRegisterServer` and `DllUnregisterServer`. These functions perform the same registration tasks as a remote COM server.

Since you cannot directly run a DLL, registration is handled differently. Windows provides a utility called `REGSVR32` to register a DLL. `REGSVR32` loads the DLL and calls the `DllRegisterServer` function. This utility is executed automatically during the build process or can be run manually.

### Using the Registry API

If you prefer a more traditional approach, you can skip the RGS files and directly call the registry API functions, such as `RegCreateKey` and `RegDeleteValue`. In the early days of COM, this was the only way to register servers. These functions can be counterintuitive, so refer to the help files for usage details.

### Summary

COM uses the registry to store all information related to COM servers and interfaces. When a COM client wants to access a server, the operating system uses the registry to find, start, and control the server. Understanding the registry improves your ability to debug COM applications. The registry is also a common source of COM errors, such as when a server fails to self-register, preventing the client from activating it.

### Callback Interfaces

So far, we have seen one-directional interfaces where a client program connects to a COM server and calls its methods. For more complex server applications, the server may need to send responses to the client, such as notifying the client of asynchronous events.

A callback is a function on the client that is called by the server. In COM, it is acceptable for a client application to expose COM objects, allowing the server to connect back to a client object. This blurs the distinction between client and server.

In the COM/OLE world, the terms "source" and "sink" describe bi-directional interfaces. The sink interface is used by the server to notify the client, while the source is the origin of events.

We will build a dialog-based client program called `CallbackClient` that implements a COM interface. We will also design a server that allows the client to register itself. Once registered, the server can connect back to the client.

### Steps to Implement the Server Object

1. **Create a COM Server**: Use the ATL Wizard to create a server named `CallbackServer`.
2. **Add a COM Object**: Add a COM object to the server using the ATL Object Wizard. Name the object `SimpleCallback`.
3. **Define the ICallBack Interface**: Add the definition of a COM interface named `ICallBack` to the IDL code for the server.
4. **Add Methods to ISimpleCallback**: Add four methods to the `ISimpleCallback` interface: `Advise()`, `UnAdvise()`, `Now()`, and `Later()`.

### Create the Server

Use the ATL COM AppWizard to create the `CallbackServer` project. You can implement the server as either an in-process server or an EXE-based server. The sample code is built as an EXE server, but these techniques work with any type of server, including services and DLLs.

### Add a COM Object to the Server

Use the ATL Object Wizard to add a COM object named `SimpleCallback` to the server. Select the following attributes:
- Apartment threading model.
- Custom Interface (Dual would also work).
- Either yes or no for aggregation.

Note that the "Support Connection Points" option is unnecessary for a custom callback method.

Next, add the following methods to the `ISimpleCallback` interface in `CallbackServer.IDL`:

```idl
[
    object,
    uuid(B426A80D-50E9-11D2-85DA-004095424D9A),
    helpstring("ISimpleCallback Interface"),
    pointer_default(unique)
]
interface ISimpleCallback : IUnknown
{
    HRESULT Advise([in] ICallBack *pICallback, [out] long *lCookie);
    HRESULT UnAdvise([in] long lCookie);
    HRESULT Now([in] long lCode);
    HRESULT Later([in] long lSeconds);
};
```

### Adding the ICallBack Interface to IDL

Add the following definition to `CallbackServer.IDL`:

```idl
// Implemented on the client only
[
    object,
    uuid(B426A80D-50EA-11D2-85DA-004095424D9A),
    helpstring("ICallBack Interface")
]
interface ICallBack : IUnknown
{
    HRESULT Awake(long lVal);
};
```

### Modify the Header

Modify the `CSimpleCallback` class in `SIMPLECALLBACK.H` to include two member variables:

```cpp
public:
    long m_lCookie;
    ICallBack *m_ICallBack;
```

### Adding the Advise Method to the Server

Add the `Advise` method to `SimpleCallback.CPP`:

```cpp
STDMETHODIMP CSimpleCallback::Advise(ICallBack *pICallback, long *lCookie)
{
    // Save the pointer
    m_ICallBack = pICallback;
    // Keep the interface alive by calling AddRef
    m_ICallBack->AddRef();
    // Make up a cookie with a semi-unique number
    *lCookie = (long)this;
    m_lCookie = *lCookie;
    return S_OK;
}
```

### Adding the UnAdvise Method

The `UnAdvise` method is used to disconnect the client:

```cpp
STDMETHODIMP CSimpleCallback::UnAdvise(long lCookie)
{
    if (lCookie == m_lCookie)
    {
        m_ICallBack->Release();
        m_ICallBack = nullptr;
        m_lCookie = 0;
    }
    return S_OK;
}
```

The cookie ensures that the client un-advises the same interface it advised. This check is unnecessary in this example but can be important in more complex servers.