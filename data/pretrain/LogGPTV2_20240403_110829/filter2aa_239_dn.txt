    current reader count: 0
    Writer 2 waiting for the write lock
    current reader count: 0
    Writer 2 waiting for the write lock
    current reader count: 0
    Writer 2 waiting for the write lock
    current reader count: 0
    Writer 1 finished
    reader 4, loop: 0, item: 1
    reader 1, loop: 0, item: 1
    Writer 2 waiting for the write lock
    current reader count: 4
    reader 2, loop: 0, item: 1
    reader 3, loop: 0, item: 1
    reader 4, loop: 1, item: 2
    reader 1, loop: 1, item: 2
    reader 3, loop: 1, item: 2
    reader 2, loop: 1, item: 2
    Writer 2 waiting for the write lock
    current reader count: 4
    reader 4, loop: 2, item: 3
    reader 1, loop: 2, item: 3
    reader 2, loop: 2, item: 3
    reader 3, loop: 2, item: 3
    Writer 2 waiting for the write lock
    current reader count: 4
    reader 4, loop: 3, item: 4
    reader 1, loop: 3, item: 4
    reader 2, loop: 3, item: 4
    reader 3, loop: 3, item: 4
    reader 4, loop: 4, item: 5
    reader 1, loop: 4, item: 5
    Writer 2 waiting for the write lock
    current reader count: 4
    reader 2, loop: 4, item: 5
    reader 3, loop: 4, item: 5
    reader 4, loop: 5, item: 6
    reader 1, loop: 5, item: 6
    reader 2, loop: 5, item: 6
    reader 3, loop: 5, item: 6
    Writer 2 waiting for the write lock
    current reader count: 4
    Writer 2 acquired the lock
    Writer 2 finished
22.13 Timer类
使用计时器，可以重复调用方法。本节介绍两个计时器：System.Threading名称空间
中的Timer类和用于基于XAML应用程序的DispatcherTimer。
使用System.Threading.Timer类，可以把要调用的方法作为构造函数的第一个参数传
递。这个方法必须满足TimeCallback委托的要求，该委托定义一个void返回类型和一个
object参数。通过第二个参数，可以传递任意对象，用回调方法中的object参数接收对应的
对象。例如，可以传递Event对象，向调用者发送信号。第3个参数指定第一次调用回调方
法时的时间段。最后一个参数指定回调的重复时间间隔。如果计时器应只触发一次，就把
第4个参数设置为值-1。
如果创建Timer对象后应改变时间间隔，就可以用Change（）方法传递新值（代码文
件TimerSample/Program.cs）：
    private static void ThreadingTimer()
    {
      using (var t1 = new Timer(TimeAction, null,
        TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(3)))
      {
        Task.Delay(15000).Wait();
      }
    }
    private static void TimeAction(object o)
    {
      WriteLine($"System.Threading.Timer {DateTime.Now:T}");
    }
System.Windows.Threading名称空间（用于带有WPF的Windows桌面应用程序）和
Windows.UI.Xaml （用于Windows应用程序）中的DispatcherTimer是一个基于XAML的应
用程序的计时器，其中的事件处理程序在UI线程中调用，因此可以直接访问用户界面元
素。
演示DispatcherTimer的示例应用程序是一个Windows应用程序，显示了切换每一秒的
时钟指针。下面的XAML代码定义的命令允许开始和停止时钟（代码文件WinAppTimer /
MainPage. xaml）：
时钟的指针使用形状Line定义。要旋转该指针，请使用RotateTransform元素：
  注意： XAML形状参见第30章。
DispatcherTimer对象在MainPage类中创建。在构造函数中，处理程序方法分配给Tick
事件，Interval指定为1秒。在OnTimer方法中启动计时器，该方法在用户单击CommandBar
中的Play按钮时调用（代码文件WinAppTimer / MainPage.xaml.cs）：
    private DispatcherTimer _timer = new DispatcherTimer();
    public MainPage()
    {
      this.InitializeComponent();
      _timer.Tick += OnTick;
      _timer.Interval = TimeSpan.FromSeconds(1);
    }
    private void OnTimer()
    {
      _timer.Start();
    }
    private void OnTick(object sender, object e)
    {
      double newAngle = rotate.Angle + 6;
      if (newAngle >= 360) newAngle = 0;
      rotate.Angle = newAngle;
    }
    private void OnStopTimer()
    {
      _timer.Stop();
    }
运行应用程序，就会显示时钟，如图22-2所示。
图22-2
22.14 小结
第21章描述了如何使用任务并行化应用程序。本章涉及使用多个任务的问题，如争用
条件和死锁。
本章讨论了几个可用于.NET的同步对象，以及适合使用同步对象的场合。简单的同
步可以通过lock关键字来完成。在后台，Monitor类型允许设置超时，而lock关键字不允
许。为了在进程之间进行同步，Mutex对象提供了类似的功能。Semaphore对象表示带有
计数的同步对象，该计数是允许并发运行的任务数量。为了通知其他任务已准备好，讨论
了不同类型的事件对象，比如AutoResetEvent、ManualResetEvent和CountdownEvent。拥
有多个读取器和写入器的简单方法由ReaderWriterLock提供。Barrier类型提供了一个更复
杂的场景，其中可以同时运行多个任务，直到达到一个同步点为止。一旦所有任务达到这
一点，它们就可以继续同时满足于下一个同步点。
下面是有关线程的几条规则：
● 尽力使同步要求最低。同步很复杂，且会阻塞线程。如果尝试避免共享状态，就可
以避免同步。当然，这不总是可行。
● 类的静态成员应是线程安全的。通常，.NET Framework中的类满足这个要求。
● 
实例状态不需要是线程安全的。为了得到最佳性能，最好在类的外部使用同步功
能，且不对类的每个成员使用同步功能。.NET Framework类的实例成员一般不是
线程安全的。在MSDN库中，对于.NET Framework的每个类在“线程安全性”部分
中可以找到相应的归档信息。
第23章介绍另一个.NET核心主题：文件和流。
第23章
文件和流
本章要点
● 介绍目录结构
● 移动、复制、删除文件和文件夹
● 读写文本文件
● 使用流读写文件
● 使用阅读器和写入器读写文件
● 压缩文件
● 监控文件的变化
● 使用管道进行通信
● 使用Windows Runtime流
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● DriveInformation
● WorkingWithFilesAndFolders
● WPFEditor
● StreamSamples
● ReaderWriterSamples
● CompressFileSample
● FileMonitor
● MemoryMappedFiles
● NamedPipes
● AnonymousPipes
● WindowsAppEditor
23.1 概述
当读写文件和目录时，可以使用简单的API，也可以使用先进的API来提供更多的功
能。还必须区分Windows Runtime提供的.NET类和功能。在通用Windows平台（Universal
Windows Platform, UWP）Windows应用程序中，不能在任何目录中访问文件系统，只能
访问特定的目录。或者，可以让用户选择文件。本章涵盖了所有这些选项，包括使用简单
的API读写文件并使用流得到更多的功能；利用.NET类型和Windows 
Runtime提供的类
型，混合这两种技术以利用.NET功能和Windows运行库。
使用流，也可以压缩数据并且利用内存映射的文件和管道在不同的任务间共享数据。
23.2 管理文件系统
图23-1中的类可以用于浏览文件系统和执行操作，如移动、复制和删除文件。
图23-1
这些类的作用是：
● FileSystemInfo——这是表示任何文件系统对象的基类。
● FileInfo和File——这些类表示文件系统上的文件。
● DirectoryInfo和Directory——这些类表示文件系统上的文件夹。
● Path——这个类包含的静态成员可以用于处理路径名。
● DriveInfo——它的属性和方法提供了指定驱动器的信息。
  注意： 在Windows上，包含文件并用于组织文件系统的对象称为文件夹。例
如，在路径C:\My Documents\ReadMe.txt中，ReadMe.txt是一个文件，My Documents是
一个文件夹。文件夹是一个Windows专用的术语：在其他操作系统上，用术语“目录”代
替文件夹，Microsoft为了使.NET具有平台无关性，对应的.NET基类都称为Directory和
DirectoryInfo。因为它有可能与LDAP目录混淆，而且本书与Windows有关，所以本章
仍使用文件夹。
注意，上面的列表有两个用于表示文件夹的类，和两个用于表示文件的类。使用哪个
类主要依赖于访问该文件夹或文件的次数：
● Directory类和File类只包含静态方法，不能被实例化。只要调用一个成员方法，提
供合适文件系统对象的路径，就可以使用这些类。如果只对文件夹或文件执行一
个操作，使用这些类就很有效，因为这样可以省去创建.NET对象的系统开销。
● DirectoryInfo类和FileInfo类实现与Directory类和File类大致相同的公共方法，并拥有
一些公共属性和构造函数，但它们都是有状态的，并且这些类的成员都不是静态
的。需要实例化这些类，之后把每个实例与特定的文件夹或文件关联起来。如果
使用同一个对象执行多个操作，使用这些类就比较有效。这是因为在构造时它们
将读取合适文件系统对象的身份验证和其他信息，无论对每个对象（类实例）调
用了多少方法，都不需要再次读取这些信息。
比较而言，在调用每个方法时，相应的无状态类需要再次检查文件或文件夹的详细内
容。
23.2.1 检查驱动器信息
在处理文件和目录之前，先检查驱动器信息。这使用DriveInfo类实现。DriveInfo类可
以扫描系统，提供可用驱动器的列表，还可以进一步提供任何驱动器的大量细节。
为了举例说明DriveInfo类的用法，创建一个简单的Console应用程序，列出计算机上
的所有可用的驱动器。
DriveInformation的示例代码使用了以下依赖项和名称空间：
依赖项
    NETStandard.Library
    System.IO.FileSystem.DriveInfo
名称空间
    System.IO
    static System.Console
下面的代码片段调用静态方法DriveInfo.GetDrives。这个方法返回一个DriveInfo对象
的数组。通过这个数组，访问每个驱动器，准备写入驱动器的名称、类型和格式信息，它
还显示大小信息（代码文件DriveInformation / Program.cs）：
    DriveInfo[] drives = DriveInfo.GetDrives();
    foreach (DriveInfo drive in drives
)
    {
      if (drive.IsReady
)
      {
        WriteLine($"Drive name: {drive.Name
}");
        WriteLine($"Format: {drive.DriveFormat
}");
        WriteLine($"Type: {drive.DriveType
}");
        WriteLine($"Root directory: {drive.RootDirectory
}");
        WriteLine($"Volume label: {drive.VolumeLabel
}");
        WriteLine($"Free space: {drive.TotalFreeSpace
}");
        WriteLine($"Available space: {drive.AvailableFreeSpace
}");
        WriteLine($"Total size: {drive.TotalSize
}");
        WriteLine();
      }
    }
在没有DVD光驱、但有固态硬盘（solid-state disk, SSD）和内存卡的系统上，运行这
个程序，得到如下信息：
    Drive name: C:\
    Format: NTFS
    Type: Fixed
    Root directory: C:\
    Volume label: Windows
    Free space: 225183154176
    Available space: 225183154176
    Total size: 505462910976
    Drive name: D:\
    Format: exFAT
    Type: Removable
    Root directory: D:\
    Volume label:
    Free space: 19628294144
    Available space: 19628294144
    Total size: 127831375872
23.2.2 使用Path类
为了访问文件和目录，需要定义文件和目录的名称，包括父文件夹。使用字符串连接
操作符合并多个文件夹和文件时，很容易遗漏单个分隔符或使用太多的字符。为此，Path
类可以提供帮助，因为这个类会添加缺少的分隔符，它还在基于Windows和Unix的系统
上，处理不同的平台需求。
Path类提供了一些静态方法，可以更容易地对路径名执行操作。例如，假定要显示文
件夹D:\Projects中ReadMe.txt文件的完整路径名，可以用下述代码查找文件的路径：
    WriteLine(Path.Combine(@"D:\Projects", "ReadMe.txt"));
Path.Combine（）是这个类常使用的一个方法，Path类还实现了其他方法，这些方法
提供路径的信息，或者以要求的格式显示信息。
使用公共字段VolumeSeparatorChar、DirectorySeparatorChar、
AltDirectorySeparatorChar和PathSeparator，可以得到特定于平台的字符，用于分隔开硬
盘、文件夹和文件，以及分隔开多个路径。在Windows中，这些字符是：、\、/和；。
Path类也帮助访问特定于用户的临时文件夹（GetTempPath），创建临时
（GetTempFileName）和随机文件名（GetRandomFileName）。注意，方法
GetTempFileName（）包括文件夹，而GetRandomFileName（）只返回文件名，不包括任
何文件夹。
WorkingWithFilesAndFolders的示例代码使用了下面的依赖项和名称空间：
依赖项
    NETStandard.Library
    System.IO.FileSystem
名称空间
    System
    System.Collections.Generic
    System.IO
    static System.Console