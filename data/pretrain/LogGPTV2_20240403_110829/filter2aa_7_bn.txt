  技术的变化速度通常是很快的。但是，编程语言不一样，与其说它是技术，还不如说是程序员的思考模式。编程语言是技术和宗教的混合物^。所以，一种很普通的编程语言就是很普通的程序员使用的语言，它的变化就像冰山那样缓慢。大概在1960年，Lisp语言引入了垃圾回收机制（Garbage Collection），今天已经被广泛认为是非常好的做法。Lisp的动态类型特点也同样受到越来越多人的认同。闭包是20世纪60年代Lisp语言引入的功能，现在的接受程度还很低。宏也是60年代中期Lisp语言引入的，现在还是一片处女地。
^“所以，如果你想对编程语言进行比较，那就做好准备打一场宗教战争，或者索性就写一本绝对不带个人色彩的大学教材，枯燥得像人类学研究一样。那些喜欢平静生活的人以及想要得到终身教职的人对这个话题唯恐避之不及。但是，必须承认的是，它只是一半与宗教有关，所以剩下的一半依然值得研究，尤其是当你要设计新语言的时候。”
  很显然，那些很普通的编程语言正在主导一切。我不建议你挑战这种强大的习惯势力，相反，我建议你向日本合气道选手学习，利用这种势力削弱你的竞争对手，让他们自食其果。
  如果你为大公司工作，想要改用Lisp语言可能不是一件容易的事。你很难说服自以为是的老板，让他允许你用Lisp语言开发程序。老板受到报纸的影响，认为某些其他语言将主宰世界（就像20年前Ada语言受到的评价）。但是，如果你为创业公司工作，那里没有这样的老板，那么你就能和我们一样，将他人的Blub困境转变为你的优势。你的竞争对手被牢牢粘在那些很普通的语言上面，永远都追不上你使用的技术。
  如果你为创业公司工作，那么这里有一个评估竞争对手的妙招——关注他们的招聘职位。他们网站上的其他内容无非是一些陈腐的照片和夸夸其谈的文字，但是招聘职位却不得不写得很明确，反映出他们到底想干什么，否则就会引来一大批不合适的求职者。
  在Viaweb创业期间，我读过大量竞争对手的招聘职位。差不多每个月都有一个新的竞争对手浮出水面。我首先会看他们的产品有没有一个试用版，然后就去找他们的招聘职位。这样过了几年，我就知道哪些公司值得关注，啷些公司不用在意。有些公司的职位描述使用了大量的IT词汇，这样的内容越多，这家公司就越不构成威胁。最不用担心的竞争对手就是那些要求应聘者具有Oracle数据库经验的公司，你永远不必担心他们。如果是招聘C++或Java程序员的公司，对你也不会构成威胁。如果他们招聘Perl或Python程序员，就稍微有点威胁了。至少这听起来像一家技术公司，并且由黑客控制。如果我有幸见到一家招聘Lisp黑客的公司，就会真的感到如临大敌。
13.书呆子的复仇
  软件业有一场永不停息的战斗，书生气的开发者与官僚主义的经理之间总是发生冲突。大家应该都看过漫画《呆伯特》，熟悉里面那个发型高耸的经理^。我想，技术行业的大部分人对这个角色都过目难忘，因为在他们的公司里就有这个角色的原型。
^“这篇文章发上网后，我收到了一封显然发自肺腑的电子邮件，开头是这样写的：发型高耸？难道有谁的头发不是向上耸的吗？如果你只能想出这种词去悔辱你的经理，那么你们这些人活该被称为“书呆子”。”
  那些经理奇迹般地同时具备了两种很常见但很难结合在一起的特点：（a）对技术一无所知；（b）对技术有强烈的个人观点。
  举例来说，假设你需要写一个软件。你的经理根本不懂这个软件的运作机制，也不知道各种编程语言有什么区别。但是，他竟然明确要求你一定要使用某一种语言进行开发。没错，他就是要求你一定要用Java语言。
  为什么他会提出这种要求？让我们看看他脑袋里是怎么想的。他的想法无非就是，Java是业界的标准。我知道肯定如此，因为媒体对此有铺天盖地的报道。既然它是标准，那么使用它就不会错。另外，这也意味着人才市场上肯定有无数Java程序员，即使现在为我打工的这批人都辞职了（真奇怪，这种事情总是不断发生），我也能够轻易地找到替代者。
  嗯，这听起来也不无道理。但是，它的前提是一个没有说出口的假设，而这个假设实际上是错的。你的经理相信所有编程语言的功能都差不多，可以互相替代。如果这种想法是对的，那么他要求你用Java编程就很合理了。反正编程语言之间没有区别，那么就用大家都在用的那种语言吧。
  但是，编程语言是不一样的。就算不探讨各种语言之间的具体区别，我也能向你证明这一点。回到1992年，如果你问经理使用什么语言开发软件。他会像今天一样毫不迟疑地回答说C++。如果所有编程语言都一样，为什么答案变了？进一步说，为什么Java语言的设计者要如此麻烦地去创造一种新语言呢？
  一般来说，如果你动手创造一种新语言，那是因为你觉得它在某些方面会优于现有的语言。Java语言之父詹姆斯·戈斯林在第一份《Java白皮书》中说得很清楚，之所以要设计Java，就是想解决C++的一些弱点。所以结论就是，各种编程语言的编程能力是不相同的。如果你接受你的经理的假设，然后一路追溯到Java语言的源头，就会得到与他的假设完全不同的结果。
  到底谁对？戈斯林还是你的经理？结果当然是意料之中的，戈斯林是正确的。某些情况下，一些语言就是比另一些语言更出色。可是这样一说又导致了另外的问题。C++不适合解决某些难题，所以Java才被设计出来。那么，什么情况下应该使用Java，什么情况下应该使用C++呢？会不会某些情况下其他语言比它们更合适呢？
  一旦你开始思考这个问题，就会发现它非常棘手。如果你的经理被迫去想这个问题，当他看到它的复杂性时，脑袋恐怕都会爆炸。如果所有语言真的都一样，那么他只需选择一种看上去获得大部分人拥戴的语言就可以了，因为这实际上是一种流行风尚，而不是技术问题，所以即使像你的经理这样对技术无知的人也有可能轻松得到正确答案。但是，如果语言各有不同，你的经理就会突然发现，有两个互相关联的方程，他必须找到一个能够同时满足两个方程的最佳解，而最要命的却是他对此根本一无所知。第一个方程是找到（相对于要解决的问题）能够适用20年左右的最佳语言，第二个方程是（为这种语言）找到合适的程序员、函数库的机会有多大。如果假定所有语言都不同，就会遇到这种苦苦求解的情况，所以难怪你的经理不愿意接受这个假设了。
  认为所有语言都一样的看法的缺点是自欺欺人，但是优点是可以使许多事情变得很简单。我想这就是为什么它被广泛接受的主要原因。它是一个令人舒服的想法。
  大家都觉得Java—定有过人之处，因为它是一种很酷的新兴编程语言。但是真的如此吗？如果你站在远处观察编程语言的世界，似乎Java就是最新的东西。（如果你站得足够远，那么你看到的所有东西就是Sun公司出钱制作的大型霓虹广告牌。）但是，如果你靠近观察这个世界，就会发现不同的人对“酷”的理解是不一样的。在黑客圏子里，Perl被公认比Java酷得多。黑客社区网站Slashdot就是用Perl开发的。我估计你不可能看到黑客愿意使用Java的JSP技术开发网站。可是，还有一种更新的语言叫做Python，它的使用者往往看不起Perl。另一些人则认为Ruby语言是取代Python的最佳选择。
  当你按照Java、Perl，Python，Ruby这样的顺序观察这些语言，你会发现一个有趣的结果。至少，如果你是一个Lisp黑客，你就看得出来，排在越后面的语言越像Lisp。Python语言模仿Lisp，甚至把许多Lisp黑客认为属于设计错误的功能也一起模仿了。至于Ruby语言，如果回到1975年，你声称它是一种有着自己句法的Lisp方言，没有人会提出反对意见。编程语言现在的发展不过刚刚赶上1958年Lisp语言的水平。
朝着数学的方法发展
  1958年，约翰·麦卡锡第一个提出了Lisp语言。我认为，当前最流行的编程语言不过只是实现了他在1958年的想法而已。
  这怎么可能呢？计算机技术的发展不是日新月异吗？1958年的计算机的运算能力还不如今天的电子表，而体积却大得像冰箱^。那时的技术怎么可能超过今天的水平呢？
^“IBM 704型计算机的CPU就像冰箱一样大，并且重得多（1429千克）。4K大小的RAM则装在另外一个箱子里，重达1800千克。相比之下，Sub-zero 690是最大的家用冰箱型号之一，重量还不到300千克。 ”
图13-1 IBM 704，美国劳伦斯利弗莫尔国家实验室，1956年
  让我告诉你原因。这是因为设计者本来没打算把Lisp设计成编程语言，至少不是我们现在意义上的编程语言。我们今天所说的编程语言指的是用来告诉计算机怎么做的一种工具。麦卡锡最后确实有意开发这种意义上的编程语言，但是实际上他做出来的Lisp却是完全不同的一种东西，语言的基础是他的一种理论演算，他想用更简洁的方式定义图灵机。正如他后来所说：
Lisp比图灵机表达起来更简洁。证明这一点的一种方法就是写一个Lisp通用函数，证明它比图灵机的一般性描述更短、更易仅。这个Lisp函数就是eval……它用来计算Lisp表达式的值……。编写eval函数需要发明一种表示法，能够把Lisp函数表示成Lisp数据。设计这种书写法完全是为了满足论文写作的需要。（我）根本没有想过用它来编写Lisp程序并在计算机上运行。
图13-2 书呆子之王约翰·麦卡锡
  1958年年底，麦卡锡的一个学生史蒂夫·拉塞尔^看到了eval函数的定义，意识到如果把它翻译成机器语言，就可以把Lisp解释器做出来。这在当时是非常令人吃惊的事。麦卡锡后来回忆：
拉塞尔对我说：“我想把eval编成程序……”我告诉他，别把理论和实践混淆，eval只是用来读的，不是用来做计算的。但是他执意要做，并且还真的做出来了。就是说，他把我论文中的eval编译成了[IBM] 704计算机的机器码，修正了bug，然后对外宣布做出了Lisp语言的一种解释器，这倒没有说错，确实如此。所以，从那个时候开始，Lisp语言就基本上是它现在的样子了……
^“Steve Russell，也是历史上第一个电脑游戏的作者，1962年他写了《太空大战》（Spacewar）。”