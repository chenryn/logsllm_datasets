G
62
G
14
29
110
77
10
45
25
G
5
G
26
Q
33 H
100
27
38
8
21
16
29
13
G
Q
Q
G
Q
G
G
Bower Wapp
Rank
Use on Crawled Sites
COM
% ALEXA
1
13
18
3
12
6
2
26
23
42 %
7 %
10 %
6 %
3 %
2 %
3 %
84.5 %
24.7 %
22.1 %
13.7 %
13.6 %
11.3 %
10.7 %
5.8 %
4.0 %
3.6 %
3.5 %
3.4 %
2.7 %
2.7 %
2.5 %
2.4 %
2.3 %
2.3 %
2.2 %
2.2 %
1.9 %
1.7 %
1.7 %
1.6 %
1.6 %
1.4 %
1.4 %
1.4 %
1.3 %
1.1 %
62.6 %
8.6 %
9.3 %
4.8 %
5.3 %
10.7 %
5.2 %
2.4 %
1.2 %
1.6 %
1.4 %
2.3 %
3.4 %
1.6 %
1.6 %
2.5 %
1.4 %
2.8 %
0.5 %
1.3 %
1.1 %
0.4 %
1.3 %
1.4 %
1.8 %
0.2 %
0.3 %
0.8 %
1.0 %
0.6 %
HTML  anywhere in the string as HTML [14], so that a
parameter such as #
would lead to code execution rather than a selection. This
behaviour was considered a vulnerability and ﬁxed.
Other vulnerabilities in JavaScript libraries include cases
where libraries do not sanitise inputs that are expected to be
pure text, but are passed to eval() or document.write()
internally, which could cause them to be executed as script
or rendered as markup, respectively. Attackers can use these
capabilities to steal data from a user’s browsing session, initiate
transactions on the user’s behalf, or place fake content on a
website. Therefore, JavaScript libraries must not introduce any
attack vectors into the websites where they are used.
III. METHODOLOGY
Identifying client-side JavaScript libraries, ﬁnding out how
they are loaded by a website, and determining whether they are
outdated or vulnerable requires a combination of techniques
and data sources. Challenges arise due to the lax JavaScript
language, the fragmented library ecosystem, and the complex
nature of modern websites. First, we need to collect metadata
about popular JavaScript libraries, including a list of available
versions, the corresponding release dates, code samples, and
known vulnerabilities. Second, we must be able to determine if
JavaScript code found in the wild is a known library. Third, we
need to crawl websites while keeping track of causal resource
inclusion relationships and match them with detected libraries.
A. Catalogueing JavaScript Libraries
In contrast to Maven’s Central Repository in the Java world,
JavaScript does not have a similarly popular repository of library
3
versioning and project dependency metadata. We must therefore
collect and correlate this data from various separate sources.
1) Selecting Libraries: The initial construction of our meta-
data archive involves a certain amount of manual veriﬁcation
work. Since there are thousands of JavaScript libraries (e.g.,
the community-based cdnjs.com hosts 2,379 projects as of
August 2016), we focus our study on the most widely used
libraries because they are the most consequential.
To select libraries, we leverage library popularity statistics
provided by the JavaScript package manager Bower [6] and
the web technology survey Wappalyzer [38]. We extend this
list of popular libraries with all projects hosted on the public
CDNs operated by Google, Microsoft and Yandex. As we will
show in Section IV-C, many websites rely on these commercial
CDNs to host JavaScript libraries. We collected the data from
Bower, Wappalyzer, and the three CDNs in January 2016.
Due to various data availability requirements explained in
detail in Section III-A5, we need to exclude certain libraries
from our study. Overall, we support 72 libraries—18 out of the
Top 20 installed with Bower, 7 out of the Top 10 frameworks
identiﬁed on websites by Wappalyzer, 13 of the 14 libraries
hosted by Google, 12 of the 18 libraries hosted by Microsoft,
and all 11 libraries hosted by Yandex. Table I shows a subset
of 30 libraries in our catalogue as well as their rank on Bower
and their market share according to Wappalyzer. Although our
catalogue appears to cover a sparse set of the libraries on
Bower, many of the missing ranks belong to submodules of
popular libraries (e.g., rank 5 is Angular Mocks). According to
Wappalyzer, we cover 73 % of the most popular libraries.
2) Extracting Versioning Information: Our next step is
compiling a complete list of library versions along with
their release dates. After unsuccessful experiments with ﬁle
timestamps and available-since dates on the libraries’ ofﬁcial
websites and CDNs, we determined that GitHub was the most
reliable source for this kind of information. Nearly all of the
open source libraries in our seed lists are hosted on GitHub
and tag the source code of their releases, allowing us to extract
timestamps and version identiﬁers from the tags. In naming
their releases, they typically follow a major.minor.patch
version numbering scheme, which makes it straightforward to
identify tags pertaining to releases and ignore all other tags,
including “alpha,” “beta” and “release candidate” versions that
are not meant to be used in production. As shown in Table I,
popular libraries like Angular and jQuery have up to 110 and
66 distinct versions in our catalogue, respectively. However,
half of the libraries have fewer than 26 versions.
3) Obtaining Reference Files: Some methods of library
detection require us to have access to code samples for each
version of a library. We gather library code from two sources:
the ofﬁcial website of each library, and from CDNs. For the
ofﬁcial websites, we manually download all available library
versions. However, some ofﬁcial websites do not provide copies
of old library versions, or they only provide copies of a subset
of versions. In contrast, CDNs typically do host comprehensive
collections of old library versions in order to not break websites
that depend on older versions. We utilise the API of one such
CDN, jsDelivr, to automatically discover all available versions
of libraries on ﬁve supported CDNs. For the remaining CDNs,
we construct download link templates manually, such as https://
Fig. 1.
Fraction of library versions with i distinct known vulnerabilities
each (represented by colours), out of the total library versions in parentheses.
Angular 1.2.0 has 5 known vulnerabilities and there are 110 versions overall.
ajax.googleapis.com/ajax/libs/jquery/{version}/jquery.min.js. In
doing so, we make sure that we download all available variants
of a library ﬁle, including the full development variant and the
miniﬁed production variant without whitespace or comments.
When comparing ﬁles downloaded from ofﬁcial websites
and different CDNs, we noticed that even the same version
and variant (e.g., miniﬁed) of a library may sometimes differ
between sources. We observed additional whitespace, removal
of comments, or the likely use of a different miniﬁer or miniﬁer
setting, especially when the library’s developers do not provide a
miniﬁed version. This observation highlights the importance of
collecting ground-truth JavaScript library samples from as many
ofﬁcial and semi-ofﬁcial sources as possible. Therefore, we use
ofﬁcial websites as well as dedicated CDNs (Bootstrap CDN
and jQuery CDN), commercial CDNs (Google, Microsoft, and
Yandex), and open source CDNs (jsDelivr, cdnjs and OssCDN).
In total, we collect 81,027 JavaScript ﬁles. We analyse
the sizes of the “main” ﬁles of each library in our dataset
(that is, we exclude ﬁles such as plug-ins that cannot be
used stand-alone), and ﬁnd that Script.aculo.us 1.9.0 is the
smallest at 996 bytes (miniﬁed). After accounting for duplicates
and discarding ﬁles smaller than 996 bytes (to reduce the
likelihood of false positives due to shared ancillary resources
such as conﬁguration ﬁles, localisations and plug-ins), our ﬁnal
catalogue includes 19,099 distinct ﬁles.
4) Identifying Vulnerabilities: The last step towards building
our catalogue is aggregating vulnerability information for our
72 JavaScript libraries. Unfortunately, there is no centralised
database of vulnerabilities in JavaScript libraries; instead, we
manually compile vulnerability information from the Open
Source Vulnerability Database (OSVDB), the National Vulnera-
bility Database (NVD), public bug trackers, GitHub comments,
blog posts, and the vulnerabilities detected by Retire.js [27].
Overall, we are able to obtain systematically documented
details of vulnerabilities for 11 of the JavaScript libraries in
our catalogue. In some cases, the documentation for a given
ﬂaw speciﬁes an affected range of versions, in which case we
consider all library versions within the range to be vulnerable.
In other cases, when a ﬂaw is identiﬁed in a speciﬁc version v
of a library, we consider all versions ≤ v to be vulnerable.
4
0.00.20.40.60.81.0Fraction of total versionsYUI 3 (37)Mustache (29)jQuery-UI (46)jQuery-Mobile (16)jQuery-Migrate (7)jQuery (66)Handlebars (25)Ember (77)Dojo (72)Backbone (29)Angular (110)012345Figure 1 shows details of the 11 libraries with vulnerability
information. For each library, we show the total number of
versions in our catalogue as well as the fraction of versions
with i distinct known vulnerabilities. The worst offender is
Angular 1.2.0, which contains 5 vulnerabilities. Overall, we
see that 28.3 %, 6.7 %, and 6.1 % of these library versions
contain one, two, or three known vulnerabilities, respectively.
5) Limitations: Although we have expended a great deal of
effort constructing our catalogue of JavaScript libraries, it is
impacted by several limitations. First, by choosing GitHub for
versioning and release date information, we need to exclude a
small number of libraries that have few or no releases tagged on
GitHub or do so in an apparently inconsistent way (e.g., multiple
successive releases tagged on the same day). Furthermore, we
cannot include closed-source libraries such as Google Maps,
advertising and tracking libraries like Google Analytics, and
social widgets since they typically do not publish version
information. Fortunately, the vast majority of such libraries are
hosted by their creators at a single, non-versioned URL (e.g.,
https://www.google-analytics.com/analytics.js), meaning that
all clients automatically include the latest version of the library.
Second, our catalogue may miss some revisions of libraries
if the author chose to patch the code and not increment the
version number. Similarly, we may miss revisions if they are
denoted using non-standard notation, such as special sufﬁxes,
four-part version numbers, etc., and we may not possess
any code samples for a version of a library if it cannot be
downloaded from the developer website or a supported CDN.
Third, our library vulnerability assessments are based solely
on publicly available documentation. We make no attempts to
discover new vulnerabilities, or to quantify the exploitability
of libraries as used on websites, for both practical and ethical
reasons. Thus, although a website may include a vulnerable
library, this does not necessarily imply that the website is
exploitable. Furthermore, libraries differ in their release cycles,
attack surfaces, functionality, and public scrutiny with respect
to vulnerabilities. Thus, we do not claim to provide comparable
coverage of vulnerabilities for each library in our catalogue.
B. Library Identiﬁcation
Identifying an unknown ﬁle as a speciﬁc version of a
JavaScript library is challenging because these libraries are text,
which gives web developers, development tools and network
software the ability to modify them, e.g., by adding or removing
features, concatenating multiple libraries into a single ﬁle, or
tampering with comments. To reliably detect as many libraries
as possible, we use two complementary techniques. These
techniques are conceptually similar to those used by the Library
Detector Chrome extension [20] and Retire.js.
Static Detection: We compute the ﬁle hashes of all observed
JavaScript code and compare them to the 19,099 reference
hashes in our catalogue. File hashing enables us to identify all
cases where libraries are used “as-is.”
Dynamic Detection: During the crawl, we detect
the
presence of libraries in the browser by ﬁngerprinting the
JavaScript runtime environment and by relying on libraries
to identify themselves. Speciﬁcally, modern libraries typically
make themselves available to the environment by means of a
global variable that can be detected at runtime. Furthermore,
most libraries in our catalogue contain a variable or method
that returns the version of the library. As an illustration, the
following snippet of JavaScript code detects jQuery:
1 v a r
j q = window . jQuery | | window . $ | | window . $ j q | |
window . $ j ;
r e t u r n j q . f n . j q u e r y
| |
n u l l ;
/ / v e r s i o n ( i f known )
i f ( j q && j q . f n ) {
2
3
4 } e l s e {
5
6 }
r e t u r n f a l s e ;
/ / jQuery n o t
found
Line 1 extracts jQuery’s global variable, and line 3 returns the
version number if it exists in its fn.jquery attribute. Note
that in order to prevent false positives, we check for the global
variable and that the fn attribute exists.
While this dynamic methodology detects libraries even if the
source code has been (lightly) modiﬁed, it cannot extract version
numbers if they are not programmatically exported by the
library. Overall, we collect or create signatures for 68 libraries,
out of which seven do not export any version information, and
a few more provide only partial version information, as shown
in Table I. Typically, more recent versions of a library export
version information while older versions may not.
Limitations: Our two detection techniques represent a best-
effort approach to identifying JavaScript libraries in the wild.
However, there are cases where both techniques can fail. For
example, heavily modiﬁed libraries will not match our ﬁle
hashes nor will they match the dynamic signatures. Furthermore,
we rely on the correctness of our information sources, i.e., that
CDNs contain the version of a library that they claim, and that