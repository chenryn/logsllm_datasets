case study on how we analyze 
leave the details 
[22]. 
5.2 A Case Study 
} 
ENTRY (Receive_Ping) { 
get ( &GUID ) ; 
if(two consecutive messages with identical GUlD) 
do_command_A( ); 
introducing 
features: 
In this case, we 
a covert Botnet com­
to the mutella im­
(the pro­
so 
management 
protocol 
The idea is to reuse the Gnutella 
(C&C) mechanism 
in stealthily 
and desirable 
intent 
Malicious 
are interested 
mand and control 
plementation. 
tocol used by mutella) internal 
that network packets 
lay is completely 
the Gnutella 
packet is used to announce 
network; 
notify they are reachable. 
warded to other connected 
invisible 
protocol 
of a node on the 
and other peers respond with a "PONG" packet to 
The "PING" message is also for­
the presence 
would look normal and the C&C over­
from 
to the peers. In particular, 
specification 
[2], we know a "PING" 
peers before reaching 
the max-
dependent 
the invoca­
into a loop, 
The patch duplicates 
and wraps the duplication 
Attack logic composition: 
tion of Send_Ping 
on the specific 
with the number of iterations 
C&C command. The second half of the attack code handles 
the receiving 
the command. It gets the argument GUID at the invoca­
tion to Receive_ Ping, decodes the command based on 
the number of consecutive 
with the same id, and 
action. 
takes the corresponding 
input instead 
It is translated 
end of the "PING" messages 
to a memory access 
of output. 
messages 
by interpreting 
The get function concerns 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
288 
DSN 2010: Lin et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:19 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable Systems 
& Networks 
(DSN) 
engineered 
the reference 
path to the reverse 
following 
ment GUID, which is * (ESP+O) in this case. Moreover, 
since feature 
duplicated, 
which explains 
Table 5. 
functions 
our detector 
the' -' symbols in the side effect col umns in 
input are not likely 
their side effects, 
does not analyze 
concerning 
to get 
argu­
which can no longer be singled 
action without 
side-effects. 
An­
tains very few function 
calls, 
out to perform a malicious 
other approach 
be difficult 
mal ware programs 
detection. 
efit from obfuscation 
to identify 
is to obfuscate 
the binaries 
so that it would 
reuse-able 
functions. 
In fact, many 
in the wild adopt such strategy 
to avoid 
We argue that legitimate 
in preventing 
programs 
ROC attacks. 
may also ben­
6  Discussion 
7  Related Work 
Having demonstrated 
the feasibility 
of ROC attacks 
and 
possible 
threats, 
however, 
approaches 
consistent 
it is difficult 
we now discuss 
and prevention. 
their potential 
to ROC attack detection 
check. The most intuitive 
is to hash all legal binaries 
way to de­
(e.g., 
using 
[20], or NSRL [3]) and periodically 
check their 
to maintain 
In practice, 
considering 
globally 
Return-into-libc 
return-into-libc 
prior knowledge 
requires 
Binary integrity 
returned 
library 
tect ROC attacks 
ization 
Tripwire 
tack uses dynamic program analysis 
integrity. 
reuse-ability 
up-to-date, 
tantly, 
frequent,  automatic  software  patching 
attacks 
as the decentralized 
attacks 
Moreover, 
program and reverse 
tegrity 
mote such practice. 
trojans 
Meanwhile, 
cluding 
amount and the dynamics 
timely binary in­
check. In fact, one purpose of this work is to pro­
of 
the control 
is fairly 
by design try to mimic the control 
samples for their detection, 
users may not always enforce 
a return-oriented 
it is also impossible 
This, in part, explains 
the 
as well 
to hash all mal ware (in­
and other drive-by 
of application 
distribution 
the prevalence 
flow deviation 
and patches. 
techniques 
due to the large 
hash values, 
of binaries 
malware [12]. 
Internet. 
and update, 
downloads 
functions 
on today's 
of today's 
trojans) 
and easily 
obvious 
any side-effects. 
attack [15,23]. The return-into-libc 
attack. The ROC attack is related 
to the 
attack 
of the 
about the implementation 
by random­
and is defeat-able 
[19]. On the other hand, the ROC at­
techniques 
to infer the 
More impor­
level functions. 
caused by return-into-libc 
detectable; 
whereas ROC 
flow of the victim 
patch gets the control. Therefore 
granularity 
of modular functions. 
except at the entry and exit points 
check. A ROC attack does not vio­
flow integrity 
to detect such violations 
Control flow integrity 
late control 
where the malicious 
be possible 
filing the binary's 
at runtime. 
legal control 
challenge 
part a/the victim binary, 
CFI check as part of its side-effect 
flow transfers 
normal control 
For example, 
at those entry/exit 
points. 
One 
would be that, since the CFI enforcement 
is 
may bypass the 
the ROC attacker 
itself 
it may 
by monitoring 
and pro­
flows and enforcing 
them 
elimination 
patch. 
we could use CFI [7] to enforce 
are carried 
out by du­
invocations. 
legal function 
existing, 
may be oblivious 
Host-based IDS. ROC attacks 
plicating 
the attacks 
systems (e.g., 
sion detection 
timing/sequencing 
function 
invocations 
tion. Hence, detectors 
sis (e.g., 
may provide a lead for their detec­
based on behavioral 
analy­
sequence 
[18]) may be able to detect ROC attacks. 
to many host-based 
VtPath [16]). However, 
the 
of the duplicated 
feature 
characteristics 
As such, 
intru­
IDS. ROC attacks 
the 
as demon­
by the mutella case study. As such, most 
of the victim binary, 
are able to preserve 
IDSes (e.g., 
Network-based 
normal network behavior 
strated 
network-based 
behavior 
of a specific 
content-based 
fic (e.g., 
generalized 
ROC trojan, 
signatures 
spams). Such detection, 
to all ROC trojans. 
that an NIDS using 
it is possible 
be able to detect its malicious 
traf­
unfortunately, 
cannot be 
abnormality.  However, 
PAYL [28]) would not pickup 
on the nature 
depending 
To prevent 
ROC attacks, 
one way is to break the software 
programming. Shacham et al. recently 
programming 
paradigm 
instruction 
to compose malicious 
sequences 
[27, 10], 
in large code 
logics. 
This 
at the 
reuse of very basic functionalities 
Return-oriented 
proposed 
which reuses existing 
segments 
paradigm 
granularity 
tacks reuse high-level 
(much coarser) 
(e.g., 
enables 
library) 
of short instruction 
functional 
whereas ROC at­
of software 
at the 
sequences; 
features 
and computational 
et. al. presented 
extrac­
an execution 
applica­
the basic blocks which are 
[29]. Greevy et. al. 
a program feature 
Wong et. al. proposed 
to identify 
Feature extraction. Prior work exists in feature 
tions from binaries. 
slice-based 
technique 
used to implement 
proposed 
namic analysis 
units of an application 
execution 
using symoblic 
attacks 
tion level "insider" 
[26]. 
Caballero 
More recently, 
a compact feature-driven 
[17]. Pattabiraman 
to characterize 
to enumerate 
all possible 
approach 
features 
based on dy­
et al. [11] independently 
pro­
BCR, by com­
the malware 
and decryption 
and reuse them in a 
traffic). 
analysis, 
functions 
technique, 
to extract 
posed a binary code extraction 
bining dynamic and static 
encryption 
network proxy (to decrypt the encrypted 
mainly focus on how to extract 
in which the entry point needs to be given, inside the bi­
nary, for 
reuse the transformation 
the malware analysis 
program); 
within the same binary, 
side-effect 
get [14] is another 
tracting 
and reusing 
with additional 
and reversal). 
independent 
features 
the purpose of mal ware analysis. 
effort that focuses 
minimization 
requirements 
(e.g., 
gad­
The Inspector 
on ex­
code in a different program (i.e., 
inside malware programs. 
whereas we reuse the code 
In addition, 
they 
They 
Memory Graph. Our reference 
ilar to the object reference 
object-oriented 
graph (RG) concept 
is sim­
in 
graph for garbage collection 
modularity, 
e.g., by transforming 
a program so that it con-
programs [8] and the memory graph [31] 
the transformation  function 
978-1-4244-7501-8/10
/$26.00 
©201O IEEE 
289 
DSN 2010: Lin et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:19 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable Systems 
& Networks 
(DSN) 
as its 
through 
relations 
graph has objects 
of dynamically 
An object reference 
as its edges. Memory graphs re­
their field edges. It mainly focuses 
memory. A 
as its nodes 
[31]; 
about data structure 
definitions 
for ROC attack construction 
assumes 
of RG is less 
in C programs. 
nodes connected 
on the management 
allocated 
memory graph has dynamic data structures 
and "points-to" 
quire prior knowledge 
whereas our technique 
only binaries. 
stringent, 
vides valid reference 
out requiring 
actual data structure 
Boehm [9] also traverses 
without 
plicitly 
grained, 
by 
memory to find reachable 
It does not ex­
graph and its traversal 
field information. 
meaning that an RG is valid as long as it pro­
with­
memory regions 
follow the 
demanding 
build the reference 
capturing 
without 
symbolic  information. 
is coarse­
The garbage collector 
regions 
the nodes and edges to precisely 
the requirement 
paths to specific 
In addition, 
definition. 
8  Conclusion 
The ROC attack/trojan 
poses a new threat, 
virtually 
of their victim binary programs 
content 
or behavior 
"signature" 
a legal binary into a stealthy, 
malicious 
one. 
in a legal binary are poten­
are heavily 
ROC trojans 
de­
features 
functional 
of ROC attacks. 
transforming 
The neutral 
tial targets 
pendent on the semantics 
and there exists 
no generic 
across all ROC attacks. 
present 
an integrated 
vulnerabilities 
crete ROC trojans. 
world software 
real and ROC vulnerabilities 
in a systematic 
framework 
binaries 
indicate 
fashion. 
Our experiments 
To defend against 
ROC attacks, 
we 
for the detection 
of ROC 
of con­
with a number of real­
that the ROC attacks 
are 
in a binary and for the construction 
can be detected 
and confirmed 
9  Acknowledgment 
for earlier 
reviewers 
discussion 
is supported, 
We thank the anonymous 
for their insight­
ful comments. We also thank Guofei Gu, Xuxian Jiang, 
and Vinod Yegneswaran 
This research 
Research 
National 
0720516 and 0845870. Any opinions, 
clusions 
necessarily 
on this work. 
in part, by the Office of Naval 
(ONR) under grant N00014-09-1-0776 
and by the 
Science 
in this paper are those of the authors 
reflect the views of the ONR or NSF. 
(NSF) under grants 0716444, 
Foundation 
findings, 
and do not 
and con­
[7] M. Abadi, M. Budiu, Vlfar Erlingsson, and 1. Ligatti. Control-flow 
integrity. 
In ACM CCS'05, 2005. 
[8] O. Agesen,  D. Detlefs, and 1.  E. Moss. Garbage collection 
and local 
and liveness 
in java virtual machines. SiG­
type-precision 
variable 
PLAN Not. ,  33(5):269-279,1998. 
[9] H.-1. Boehm. Space efficient 
ACM PLDl' 93 , 1 993 . 
conservative 
garbage collect
ion. In 
[ 1 0] E. Buchanan,  R. Roemer, H. Shacham, and S .  Savage.  When good 
to 
go bad: Generalizing return-oriented 
programming 
instructions 
RISe. In ACM CCS'08, 2008. 
[ 1 1 ]  1. Caballero ,  N.  M. 
code extraction 
In ISOC NDSS' 10,2010. 
10hnson, S .  McCamant, 
and D. Song. Binary 
and interface identification for security applicati
ons. 
[ 1 2] 1. Canto, M .  Dacier, E. Kirda, and e. Leita. Large scale malware 
collection: lessons 
learned. In IEEE SRDS'08, 2008. 
[13] 1.  Chow, 
B .  Pfaff, T. Garfinkel,  K. Christopher, 
and M. Rosenblum. 
Understanding data lifetime 
USENIX Security Symposium, 2004. 
via whole system simulation. In 13th 
, T. Holz, e.  Kruegel 
extraction 
[14] e. Kolbitsch
Automated 
In IEEE Symposium on Security 
-libc" 
"retum-to
of proprietary 
and Privacy, 2010. 
[ 1 5] S .  Designer. 
[ 1 6] H.  H. Feng, O.  M. Kolesnikov, P.  Fogla, W. Lee, and W. Gong. 
on. In IEEE Symposium 
attack. Bugtraq, August 1 997. 
using call stack informati
and E. Kirda. Inspector gadget: 
gadgets from 
mal ware binaries. 
Anomaly detection 
on Security 
and Privacy, 2003. 
[17] O. Greevy and S .  Ducasse. Correlating 
and code using a 
compact two-sided trace analysis approach. In European Conference 
on Software Ma intenance 
features 
and Reengineering
and A. Somayaj i .  Intrusion detection 
us­
, 2005. 
[ 1 8] S .  A.  Hofmeyr, 
S .  Forrest, 
ing sequences of system 
1 998. 
calls. 
1. Computer Security, 6(3):151-180, 
[ 1 9] A .  D. Keromytis .  Randomized 
instruction 
sets and runtime 
environ­
and future directions. IEEE Security and Pri­
ments past research 
vacy, 7(1):1 8-25,2009. 
[20] G.  H.  Kim 
and E.  H. Spafford.  The design and implementation 
of 
tripwire:  a file system integrity 
checker. 
In ACM CCS'94, 1994. 
[21 ]  B .  Korel and 1. Laski. Dynamic program slicing
. information Pro­
cessing Letters, 29(3):155-163 ,1 988. 
[22] Z. Lin, X. Zhang, and D. Xu. Reuse-Oriented Camouflaging 
on. Technical 
Attack: 
report, 
Vulnerability Detection 
CERIAS TR 2009-29, Purdue Universit
return-into-lib
y , 2009. 
(c) exploits
and Attack Constructi
[23] Nergal. The advanced 
: Pax case study. 
Phrack, 10(58),200 1 .  
[24] N. Nethercote 
weight dynamic binary 
instrumentati
and 1 .  Seward. Valgrind: A framework 
for heavy­
on. In ACM PWl '07, 2007. 
[25] 1. Newsome and D. Song. Dynamic taint analysis for automatic 
de­
tection, analysis, and signature 
software. In iSOC NDSS'05, 2005. 
generation 
of exploits 
on commodity 
[26] K. Pattabiraman,  N.  Nakka,  Z. 
Kalbarczyk, and R. Iyer. Discover­
Insider Attacks Using  Symbolic 
Execution. In 
References 
[ I ]  Bitdefender malware and 
spam survey. 
http;llnews.bitdefender.comlNWi094-en-BitDefender-Malware­
and-Spam-Survey-finds-E-Threats-Adapting-to-
Trends .html. 
Online-Behavioral­
[2] Gnutella protocol 
[3] National 
Software 
[4] Most abused infection 
spec. http;llwiki.limewire.orglindex.php
Reference 
Library. 
vector. http;llblog.trend
micro.comlmost­
http;llwww.nsrl.nist.govl. 
?title=GDF. 
abused-infection-vectorl. 
[5] Virus collection (vx heavens). http;llvx.netlux.orglvl.php, 
visited in 
Nov. 2009. 
[6] Parasitic 
malware: 
The resurgence 
of an old threat. 
Network Security, 
2008(3): IS -18,2008. 
ing Application-Level 
IFlP SEC, 2009 
Proc. of the 24th 
[27] H. Shacham. The geometry 
of innocent 
flesh on the bone: return­
into-libc 
without 
function 
calls. 
In ACM CCS'07, 2007. 
[28] K. Wang and S .  1. Stolfo. Anomalous 
sion detecti
on. In Recent Advances in Intrusion Detection, 
[29] W. E. Wong, S.  S. Gokhale, and 1.  R. Horgan. Quantifying 
payload-based 
network intru­
2004. 
the 
and features .  1. Syst. Softw. ,  
between 
program components 
closeness 
54(2):87-98, 2000. 
[30] H.  Yin, D. Song,  E. Manuel,  e. Kruegel, and E. Kirda. Panorama: 
information 
flow for malware detecti
on and 
Capturing 
system-wide 
analysis. In ACM CCS'07, 2007. 
[31 ]  T. Zimmermann 
and A. Zeller. 
Visualizing 
Revised Lectures on Software Visuali:ation, 
2002. 
memory graphs. In 
International 
Seminar, 
978-1-4244-7501-8/10/$26
.00 mOl O  IEEE 
290 
DSN 2010: Lin et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:19 UTC from IEEE Xplore.  Restrictions apply.