# Title: ObliviStore: High-Performance Oblivious Cloud Storage

## Authors
- Emil Stefanov, University of California, Berkeley (PI:EMAIL)
- Elaine Shi, University of Maryland, College Park (PI:EMAIL)

## Abstract
We design and implement ObliviStore, a high-performance, distributed ORAM-based cloud data store that is secure in the malicious model. To our knowledge, ObliviStore is the fastest ORAM implementation to date, achieving speeds 10 times or more faster than the best-known ORAM implementations. By making I/O operations asynchronous, ObliviStore achieves high throughput while addressing the security challenges introduced by asynchrony. We propose several practical optimizations and techniques for dynamically scaling a distributed ORAM in a data center. Our evaluation shows that with 11 trusted machines (each equipped with a modern CPU) and 20 Solid State Drives, ObliviStore can achieve a throughput of 31.5 MB/s with a block size of 4 KB.

## 1. Introduction
Cloud computing offers significant economies of scale for a wide range of online services. However, concerns over data privacy have limited its adoption, with many potential users either avoiding the cloud entirely or only storing less sensitive data [10]. Encryption alone is insufficient for ensuring data privacy, as data access patterns can leak substantial amounts of sensitive information. For example, Islam et al. demonstrated that access patterns can reveal up to 80% of search queries made to an encrypted email repository [21].

Oblivious RAM (ORAM), originally proposed by Goldreich and Ostrovsky [14], is a cryptographic construction that allows a client to access encrypted data on an untrusted storage server while hiding the access patterns. This is achieved by continuously re-encrypting and reshuffling data blocks to conceal the logical access pattern. ORAM has been proposed for various applications, including behavioral advertising, location services, web search, and more, often in combination with trusted hardware [8, 25].

While the idea of using trusted hardware and ORAM to protect user privacy in cloud services is promising, the practical efficiency of ORAM remains a key challenge. ORAM was initially studied as a theoretical concept, but recent works have shown its potential for real-world applications [25, 40, 46, 47].

### 1.1 Our Contributions
We design and build ObliviStore, an efficient ORAM-based cloud data store that secures data and access patterns against adversaries in the malicious model. Our evaluation shows that in a single client/server setting with 7 rotational hard disk drives (HDDs), ObliviStore is an order of magnitude faster than the independent work PrivateFS by Williams et al. [47]. With the decreasing cost of solid-state drives (SSDs) [30] and their increasing adoption in cloud providers and data centers [4], we also evaluate ObliviStore with SSDs in a distributed setting on Amazon EC2. Using 11 trusted nodes (each with a modern CPU), we achieve a throughput of 31.5 MB/s with a block size of 4 KB.

Our technical contributions include:
- **Asynchronous ORAM Operations**: We introduce novel techniques to make the SSS ORAM [40] asynchronous and parallel. We address the unique security challenges posed by asynchrony, such as preventing information leakage through the timing of I/O events. We formally define the notion of oblivious scheduling and prove that our construction satisfies this requirement.
- **Distributed ORAM**: We adapt our ORAM construction for a distributed setting, ensuring secure partitioning across multiple servers. We also propose a novel algorithm for securely scaling a distributed ORAM at runtime without service interruption.
- **Practical Optimizations**: We incorporate several practical optimizations, such as batch shuffling, reordering and coalescing asynchronous I/O requests, and prioritizing read accesses to minimize blocking.

## 2. Architecture and Trust Model
All ORAM schemes assume a trusted client and an untrusted storage provider. In our distributed ORAM, the trusted client consists of an oblivious load balancer and multiple ORAM nodes. The rest of the system, including the network, storage arrays, and other software, is untrusted.

ObliviStore is designed for two primary deployment scenarios:
- **Hybrid Cloud**: A company or government agency can outsource or back up its databases or file systems to untrusted cloud storage providers while hosting the trusted components (oblivious load balancer and ORAM nodes) in a private cloud.
- **Trusted Hardware in the Cloud**: We envision a future where trusted hardware, such as Trusted Platform Modules (TPMs) or secure co-processors, can be used to establish a Trusted Computing Base (TCB) in the cloud. This TCB would handle encryption and privatize access patterns, while the rest of the software stack remains untrusted.

## 3. Preliminaries
### 3.1 Partitioning Framework
Stefanov, Shi, and Song [40] propose a new paradigm for constructing practical ORAM schemes, which includes partitioning and eviction. The ORAM server storage is divided into \( O(\sqrt{N}) \) partitions, each with a capacity of \( O(\sqrt{N}) \). At any point, a block resides in a random partition, and the client stores a local position map to track the partition of each block.

#### Read Operation
1. Look up the position map to determine the partition \( p \) for the block.
2. If the block is not in the eviction caches, read from partition \( p \).
3. If the block is in the local eviction caches, read a dummy block from partition \( p \).
4. Randomly assign the block to a new partition \( p' \) and update the eviction caches.
5. Call the Evict function \( \nu \) times, where \( \nu > 1 \) is the eviction rate.

#### Evict Operation
1. Randomly select a partition \( p \).

This framework ensures that the sequence of physical addresses accessed is independent of the actual data being accessed, thus providing strong security guarantees.