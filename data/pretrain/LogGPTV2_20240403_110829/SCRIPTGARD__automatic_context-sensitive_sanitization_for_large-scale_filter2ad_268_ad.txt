### Histogram of Sanitizer Sequences (Length 2 or More)

Figure X illustrates the characterization of sanitizer sequences, specifically focusing on `EcmaScriptStringLiteralEncode`, `UrlKeyValueEncode`, `UrlPathEncode`, and `SimpleHtmlEncode`. The analysis observed these sanitizers in various combinations across distinct web pages, which were subjected to ScriptGard analysis. 

### Web Page Analysis

Figure 6 presents the size of the web pages in terms of the number of DOM nodes generated from their initial HTML output, excluding dynamic updates via JavaScript. The page sizes range from 350 to 900 nodes. Our analysis statically instrumented 23,244 functions. A significant portion of the DOM nodes in the application's output is derived from custom objects that handle their own rendering. This is a notable advantage of ScriptGard's language-based solution, as it allows for direct analysis of these custom objects, unlike .NET runtime library-specific solutions.

### Context-Sanitization Mapping

Figure 7 depicts the mapping between contexts and sanitization functions for our application, which is a strict subset of the mappings in previous work [20]. It permits only quoted attributes with well-defined sanitization rules [27] and sets the page encoding to UTF-8, eliminating character-set encoding attacks [14]. This mapping was refined through several interactions with the applicationâ€™s security engineers.

### Inconsistently Sanitized Paths

Figure 9 characterizes the fraction of paths that were inconsistently sanitized. The right-most column indicates the fraction of those paths that could not be proven safe and were highlighted by our analysis. Some paths sanitize constant strings or provably trusted data, explaining the difference between the last and second-to-last columns.

### Inconsistent Sanitization Patterns

We identified 12 instances of the `(EcmaScriptStringLiteralEncode)(HtmlEncode)+` pattern, which is inconsistent because these sanitizers do not commute. Additionally, we found the `(EcmaScriptStringLiteralEncode)(UrlPathEncode)+` pattern, which is problematic because it does not properly handle URL parameter sanitization, potentially allowing adversaries to inject additional parameters.

### Distribution of Path Lengths

Figure 10 shows the distribution of lengths of paths that could not be proven safe. Each hop in the path represents a string propagation function. Longer chains indicate taint sources that are more removed from taint sinks.

### Multiple Sanitization

We discovered 498 instances of multiple sanitizations that were superfluous. For example, applying `UrlKeyValueEncode` multiple times can lead to broken URLs due to excessive percent encoding, and repeated use of `HtmlEncode` can cause incorrect rendering of output HTML. These multiple sanitizations, while not security bugs, can break the intended functionality of the applications.

### Nested Parsing Contexts

Nesting of parsing contexts, such as a URL within an HTML attribute, is common. Figure 11(b) shows the histogram of sanitizer sequence lengths, indicating that the inferred context for most sinks requires multiple sanitizers. Figure 8 highlights the widespread use of multiple sanitizers, with sequences like `UrlPathEncode HtmlEncode` being the most popular. These sanitizers are non-commutative, leading to different behaviors when applied in different orders.

### Dynamic Analysis and Test Cases

As ScriptGard is a dynamic technique, all identified paths can be reproduced with test cases. We investigated a small fraction of these test cases and found that, while the sanitization is inconsistent, injecting strings in these contexts did not lead to privilege escalation attacks. This is partly due to our conservative positive tainting: if a string cannot be proven safe, the path is flagged. In other cases, the adversary's authority and the application's policy made exploitation impossible.

### Runtime Overhead

For our experiments, the server was a dual-core Intel machine running at 3.16 GHz with 4 GB of RAM and 250 GB of 7200 RPM disk, running Windows Server 2008. The client was a Core 2 Duo Intel machine running at 2.67 GHz with 8 GB of RAM and 160 GB of 7200 RPM disk, running 64-bit Windows 7. The client and server were connected directly using a network switch.

#### Full Overhead

We measured the overhead of the full ScriptGard instrumentation, including positive taint flow and output parsing. The full instrumentation incurs a significant overhead, but the preferential profiling phase incurs negligible overhead. We tested nine URLs, each triggering complex processing on the server to generate the resulting web page. For each URL, we first warmed the server cache by requesting the URL multiple times.