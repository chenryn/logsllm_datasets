8:
Histogram of
sanitizer
sequences
2
or more
Figure
of
characterizing
ual
sanitizer
EcmaScriptStringLiteralEncode,
UrlKeyValueEncode, UrlPathEncode,SimpleHtmlEncode respectively.
consisting
observed in analysis,
from man-
resulting
denote
sanitizers
HtmlAttribEncode,
sanitizers
sanitization
placement.
E,H,U,
K,P,S
HtmlEncode,
empirically
practices
distinct web pages, which we subjected to ScriptGard
analysis. Figure 6 shows the size of the various web pages
in terms of the number of DOM nodes they generate from
their initial HTML output (ignoring dynamic updates to
the DOM via JavaScript, etc.). Page sizes range from 350
to 900 nodes. Our analysis statically instrumented 23,244
functions.
Our application uses custom objects that handle their own
rendering. Figure 6 shows a majority of the DOM nodes in
the applications’ outputs are derived from custom objects.
The language-based solution of ScriptGard, as opposed to
.NET runtime library-speciﬁc solution, allows it to directly
analyze these custom objects.
Figure 7 shows the mapping between contexts and saniti-
zation functions for our application; which is a strict subset
of mapping in previous work [20]. In particular, it permits
only quoted attributes which have well-deﬁned rules for san-
itization [27]. Furthermore, it always sets the page encoding
to UTF-8, eliminating the possibility of character-set encod-
ing attacks [14]. We arrived at the result in Figure 7 after
several interactions with the application’s security engineers.
1 1 2 2 3 3 6 7 10 12 12 12 12 12 12 16 20 20 21 21 31 34 53 54 75 76 253 292 335 491 559 657 1,059 02004006008001,0001,200PKPSHPHKKPEHPKPHHPKHKKKPP+EPP+HPP+KPEH+KPEP+PEHHPEP+KHHEHHHHHHEPHHKPEHKHPEHKPEEKEHEHKEKPHHHKPEPEPH610Web
Page
Home
A1 P1
A1 P2
A1 P3
A1 P4
A1 P5
A1 P6
A1 P7
A1 P8
A1 P9
A1 P10
A2 P1
A2 P2
A2 P3
A2 P4
A2 P5
A2 P6
A2 P7
A2 P8
A2 P9
A3 P1
A3 P2
A3 P3
A3 P4
A3 P5
A3 P6
A3 P7
A3 P8
A3 P9
A4 P1
A4 P2
A4 P3
A4 P4
A4 P5
A4 P6
A4 P7
A4 P8
A4 P9
A4 P10
A4 P11
A4 P12
A4 P13
A4 P14
A5 P1
A5 P2
A5 P3
A5 P4
A5 P5
A5 P6
A5 P7
A5 P8
A5 P9
A5 P10
Total
Sanitized
Paths
Inconsistently sanitized
Total
Highlight
396
565
336
992
297
482
436
403
255
214
1,623
315
736
261
197
182
237
632
450
802
589
2,268
389
477
323
292
219
691
173
301
231
271
436
956
193
230
310
200
208
498
579
295
591
604
376
376
401
565
493
521
427
413
502
14
28
16
26
44
22
23
19
22
16
18
16
53
21
16
22
22
20
23
26
25
18
16
103
24
51
16
25
16
24
30
28
38
36
24
36
24
24
24
34
34
25
104
61
25
25
26
31
34
34
24
24
28
9
22
11
21
35
17
18
13
18
12
14
12
47
16
12
18
18
16
19
22
21
14
12
15
20
45
12
21
12
20
25
22
32
24
18
32
20
18
20
29
29
20
91
55
21
21
21
26
29
29
20
20
23
25,209
1,558
1,207
Figure 9: Characterization of the fraction of the paths that were
inconsistently sanitized. The right-most column indicates which frac-
tion of those paths could not be proved safe and so were highlighted
by our analysis. The diﬀerence between last and second last colmn is
that some paths sanitize constant strings or provably trusted data.
As we saw in Section 2,
Second, we found 12 instances of
the (EcmaScriptStringLiteralEncode)(HtmlEncode)+ pat-
tern applied.
these sani-
tizers do not commute, and this speciﬁc order is in-
consistent.
the
(EcmaScriptStringLiteralEncode)(UrlPathEncode)+ pat-
tern. This pattern is inconsistent because it does not prop-
erly handle sanitization of URL parameters. If an adversary
controls the data sanitized, it may be able to inject addi-
tional parameters.
Figure 10: Distribution of lengths of paths that could not be proved
safe. Each hop in the path is a string propagation function. The
longer the chain, the more removed are taint sources from taint sinks.
(a) Classiﬁcation
of
functions
for
used
ScriptGard instrumen-
tation.
(b) Distribution of the
lengths of applied sani-
tization chains, showing
a sizable fraction of the
paths have more than
one sanitizer applied.
Figure 11: Characterizing ScriptGard instrumentation.
We found an additional 498 instances of multiple sanitiza-
tion that were superﬂuous. That is, sanitizer A was applied
before sanitizer B, rendering sanitizer B superﬂuous. While
not a security bug, this multiple sanitization could break
the intended functionality of the applications. For example,
repeated use of UrlKeyValueEncode could lead to multiple
percent encoding causing broken URLs. Repeated use of
HtmlEncode could lead to multiple HTML entity-encoding
causing incorrect rendering of output HTML.
We also observed that nesting of parsing contexts is com-
mon. For example a URL may be nested within an HTML
attribute. Figure 11(b) shows the histogram of sanitizer se-
quence lengths observed. The inferred context for a majority
of these sinks demanded the use of multiple sanitizers. Fig-
ure 8 shows the use of multiple sanitizers in the application is
widespread, with sanitizer sequences such as UrlPathEncode
HtmlEncode being most popular. In our application, these
sanitizers are not commutative, i.e. they produce diﬀerent
outputs if composed in diﬀerent orders, which means that
paths with diﬀerent orderings produce diﬀerent behavior.
Because ScriptGard is a dynamic technique, all paths
found can be reproduced with test cases exhibiting the
context-inconsistent sanitization. We investigated a small
fraction of these test cases in more depth. We found that
while the sanitization is in fact inconsistent, injecting strings
in these contexts did not lead to privilege escalation attacks.
In part this is because our positive tainting is conservative:
if we cannot prove a string is safe, we ﬂag the path.
In
other cases, adversary’s authority and the policy of the test
application made it impossible to exploit the inconsistency.
0501001502002503003501234566,691 42 16,511 Initializers (sound)Initializers (unsound)Propagators(sound)16,949 2,948 1,093 104 length=1length=2length=3length>36116.2 Runtime Overhead
For our experiments, the server was a dual core Intel ma-
chine running at 3.16 GHz with 4 GB of RAM, 250 GB
of 7200 RPM disk, running Windows Server 2008. Our
client was a Core 2 Duo Intel machine running at 2.67 GHz
with 8 GB of RAM, 160 GB of 7200 RPM disk, running 64-
bit Windows 7. We connected the client and server directly
using a network switch.
Full overhead: We started by measuring the overhead
of the full ScriptGard instrumentation, including positive
taint ﬂow and output parsing. Then we measured the over-
head that would be incurred by the deployment phase of
path preferential proﬁling techniques. While the full instru-
mentation incurs a huge overhead, the preferential proﬁling
incurs negligible overhead.
We took nine URLs, each of which triggered complicated
processing on the server to create the resulting web page.
For each URL we ﬁrst warmed the server cache by request-