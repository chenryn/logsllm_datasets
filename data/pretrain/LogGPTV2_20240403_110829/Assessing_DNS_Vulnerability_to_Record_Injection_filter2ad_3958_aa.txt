title:Assessing DNS Vulnerability to Record Injection
author:Kyle Schomp and
Tom Callahan and
Michael Rabinovich and
Mark Allman
Assessing DNS Vulnerability to Record Injection(cid:2)
Kyle Schomp1, Tom Callahan1, Michael Rabinovich1, and Mark Allman2
1 Case Western Reserve University, Cleveland, OH, USA
2 International Computer Science Institute, Berkeley, CA, USA
Abstract. The Domain Name System (DNS) is a critical component of the In-
ternet infrastructure as it maps human-readable names to IP addresses. Injecting
fraudulent mappings allows an attacker to divert users from intended destinations
to those of an attacker’s choosing. In this paper, we measure the Internet’s vul-
nerability to DNS record injection attacks—including a new attack we uncover.
We ﬁnd that record injection vulnerabilities are fairly common—even years after
some of them were ﬁrst uncovered.
Keywords: Domain Name System (DNS), Measurement, Security, Cache
Poisoning.
1 Introduction
The Domain Name System (DNS) is a critical component of the Internet infrastruc-
ture. DNS maps human-readable hostnames (e.g., “amazon.com”) to IP addresses and
is involved to some degree in most Internet transactions. Given the foundational role
of DNS in today’s Internet, DNS security has a profound effect on the overall security,
trust, and operability of the network. In particular, substituting an authoritative map-
ping with a fraudulent record allows an attacker to divert user access to nefarious hosts
with implications ranging from replacing the original content and phishing attacks to
installing malware on client hosts. In this paper, we measure the prevalence of DNS
vulnerabilities to attacks designed to substitute the authoritative mapping. Collectively,
these attacks are known as “record injection” attacks. We consider known attacks and a
new vulnerability we uncover, as well as the extent of the adoption of suggested best-
practice defenses.
Fraudulent hostname-to-IP address mappings originate in two places: (i) a compo-
nent in the hostname resolution machinery (e.g., a local DNS resolver) or (ii) a man-in-
the-middle that can monitor DNS transactions and either change or inject responses. A
variant of the ﬁrst is a cache poisoning attack whereby an attacker populates the cache
of a DNS resolver with an illegitimate record, which the resolver then uses to satisfy
subsequent requests for the given hostname.
Cache poisoning attacks generally rely on open DNS resolvers that will act upon
DNS requests from arbitrary Internet hosts. Open resolvers have long been a known
security issue. However, the prevalence of such resolvers is increasing—from 15M in
2010 [11] to 30M in 2013 [14]. While not all open resolvers are vulnerable, their in-
creasing numbers provide a larger attack surface that we must understand. Moreover, as
(cid:2) Work supported in part by NSF grants CNS-0831821, CNS-1213157 and CNS-1237265.
M. Faloutsos and A. Kuzmanovic (Eds.): PAM 2014, LNCS 8362, pp. 214–223, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
Assessing DNS Vulnerability to Record Injection
215
we discuss below, open resolvers often give attackers a vector to attack closed resolvers,
which further weakens the overall system.
The Internet engineering community has spent considerable energy fortifying DNS
with DNSSEC [1] which cryptographically protects the integrity of the authoritative
bindings set by the holder of a name. While DNSSEC is the long-term security strategy
for the DNS, deployment is currently low—with only about 1% of the resolvers vali-
dating DNSSEC records [6,9]. Given the low DNSSEC deployment, understanding the
security landscape of DNS without DNSSEC remains of critical importance.
Unfortunately, assessing the extent of security threats within the DNS infrastructure
is anything but straightforward. The path a DNS transaction takes through a maze of
intermediate resolvers is often both complex and hidden from external view. This paper
develops techniques to attribute vulnerabilities to various actors in this infrastructure.
Our key observations are: (i) that some closed resolvers are still vulnerable to cache
poisoning, (ii) while vulnerability mitigations exist, deployment is not ubiquitous, and
(iii) 7–9% of home networks are vulnerable to a simple new cache poisoning attack
we uncover. Our general ﬁnding is that DNS security soft spots are not rare—even
for vulnerabilities that have been known for years. Finally, note that our datasets are
available for community use [13].
2 Terminology and Methodology
The architecture of the client-side DNS resolution infrastructure varies across
providers—which we discuss in depth in companion work [14]. Here we provide a
short overview of our terminology. Generally, client systems do not query authorita-
tive DNS servers (“ADNS”) directly, but rather rely on a recursive resolver, which we
denote “RDNS”, to handle these interactions and return the ﬁnal address mapping. An
RDNS may optionally leverage additional RDNS servers in the lookup process. We de-
note open resolvers that will answer arbitrary requests as “ODNS”. We often ﬁnd that
ODNS resolvers do not perform recursive lookup themselves, but rather simply for-
ward requests to an RDNS. We denote a forwarding ODNS as an “FDNS”. The RDNS
querying our ADNS for an FDNS is an indirect RDNS, which we denote “RDNSi”.
Our basic methodology for studying the vulnerability of the client-side DNS infras-
tructure is to probe the Internet in search of ODNS resolvers, similar to previous ef-
forts [5, 14]. We register a domain and deploy an ADNS for this domain.1 We then use
approximately 100 PlanetLab [3] nodes to randomly scan the IP address space with
DNS requests for various hostnames within our domain. We embed the IP address of
the target of our scan in the hostname request. Therefore, the queries arriving at our
ADNS illuminate the set of ODNS servers. Additionally, the ADNS can use the source
IP address to discover the set of RDNS resolvers. Given these two pieces of information,
we can distinguish between ODNS resolvers that are themselves performing recursive
lookup from those that are merely forwarding the requests to another resolver—i.e., the
set of FDNS servers. Table 1 provides information about the datasets we discover and
1 Note, unless otherwise stated, we always work within our own unused namespace as to not
interfere with users’ normal activities.
216
K. Schomp et al.
Table 1. Collected Datasets
Table 2. RDNS Characteristics
Scan Begin Dur. (Days) # ODNS # RDNS
S1 2/29/12
S2
3/1/13
S3 7/19/13
1.09M 69.5K
40.5K
5.3K
2.31M 86.1K
17
11
12
Observation
Total
Unclassiﬁed
Classiﬁed
Complex Trans. ID Seq.
Var. Ephemeral Port
0x20 Encoding
RDNS
No.
%
69K 100%
18%
12K
57K
82%
57K 100%
84%
48K
195
0.3%
utilize in the remainder of the paper. While the general methodology we sketch here ap-
plies to all our experiments, the speciﬁcs vary across experiments as we study different
aspects of the infrastructure. The speciﬁcs are given in the relevant sections below.
Note, we return to methodological issues in § 8. In particular, we use the techniques
we develop in the paper to address two speciﬁc issues. First, we aim to understand
whether the ODNS servers we ﬁnd are actually in operational use by real users. Second,
since we do not probe the entire Internet address space, we seek to understand if our
sample is representative of the broader Internet.
3 Kaminsky’s Attack
Kaminsky [10] describes a DNS cache poisoning attack which leverages the connec-
tionless nature of typical UDP-based DNS requests to insert an NS record2 into the vic-
tim’s cache. The Kaminsky attack proceeds with the attacker A sending a large number
of requests for hostnames within a domain to be poisoned, P.com, to a victim RDNS
V in the form of queries for random string.P.com. A legitimate response to such re-
quests must (i) be from the ADNS for P.com, (ii) be directed to the correct ephemeral
UDP port number (the source port listed in the request message), (iii) contain the query
string from the request and (iv) use the transaction ID assigned in the request. How-
ever, A knows the query string and can readily determine and spoof the IP address
of the ADNS—leaving only checks (ii) and (iv) as protection against illegitimate re-
sponses. By sending a large number of requests with different query strings, A can then
use brute force guessing of port numbers and transaction IDs in forged replies until a
reply is accepted by V .
Mitigating the Kaminsky attack involves increasing the amount of entropy in DNS
requests such that the average cost of mounting a successful attack is prohibitively high.
Resolvers can increase entropy by randomizing both the DNS transaction ID and the
ephemeral port number. While randomizing only the DNS transaction ID is insufﬁcient
protection, randomizing both values is an effective strategy [10]. Another technique to
increasing entropy is “0x20 encoding” [4] in which the RDNS randomly changes the
capitalization throughout query strings. Authoritative servers should be case insensitive
2 An NS record contains the hostname of the ADNS for all hostnames within a particular do-
main. For instance, Google has an NS record that indicates the authoritative source for the
binding of “news.google.com” to an IP address.
Assessing DNS Vulnerability to Record Injection
217
when resolving the query yet retain the capitalization in their response [12]. Hence,
checking that the capitalization in the request and response matches is another way to
decrease an attacker’s likelihood of forming an acceptable response.
To understand the vulnerability to the Kaminsky attack we assess the adoption of
the strategies for enhancing entropy by sending multiple requests for unique hostnames
to each ODNS. Then, in our S1 dataset, we check successive queries from a single
RDNS at our ADNS for variation in the ephemeral port selection, DNS transaction ID,
and for the use of 0x20 encoding. Table 2 shows our results. First, our dataset does
not contain enough requests,3 to accurately characterize 12K (or 18%) of the RDNS
resolvers. For the remainder, we ﬁnd that nearly all RDNS resolvers employ a complex
(presumably random) method for selecting DNS transaction IDs.4 Further, 84% of the
classiﬁed RDNS resolvers use some variation in their ephemeral port selection. That
means 9K RDNS servers use a static ephemeral port on all transactions! Per the dis-
cussion above, both the ephemeral port and the transaction ID values must be random
to thwart attacks and therefore roughly 16% of classiﬁed RDNS servers are vulnerable
to the Kaminsky attack. Furthermore, we observe RDNS resolvers using static source
ports in 37% of the autonomous systems in our dataset, which illuminates the breadth of
the issue. Additionally, we ﬁnd that 0x20 encoding is in use by roughly 0.3% of RDNS
resolvers—showing that resolvers are generally not using this strategy for increasing
the entropy of requests.5 These results are nearly identical when only considering the
RDNSi subset of RDNS resolvers that we know to serve FDNS clients.
Finally, we note that the use of RDNS pools (e.g., [7, 14]) serves to mitigate the
Kaminsky attack as well. Regardless of the IP address the attacker uses as entry point
into the pool, the IP address used to communicate with the ADNS is chosen according
to an algorithm unknown to the attacker. Therefore, to launch a Kaminsky attack against
an RDNS pool, the attacker must either target every RDNS in the pool simultaneously,
know how the pool distributes requests internally, or guess the destination IP address.
4 Bailiwick Rules Violations
Bailiwick rules prevent malicious ADNS servers from inserting fraudulent records into
resolvers’ caches [2]. Under this attack, a legitimate response from X.com also includes
an “additional answers” section that supplies arbitrary unrelated bindings—e.g., for
www.Y.com. To potentially save time later, a susceptible resolver adds www.Y.com
to its cache. During our S1 scan, we test for this vulnerability by returning legitimate
responses from our domain that also include information for a non-existent google.com
subdomain.6 We then query the ODNS for the google.com subdomain and determine
3 We require at least ten transactions for the results in this paper, but in other experiments we
ﬁnd the insights are not sensitive to the exact threshold.
4 We conclude that resolvers do not use static, incrementing, or decrementing transactions IDs
by observing a high standard deviation in the transaction ID sequence.
5 Our results may be a lower bound on the adoption of 0x20 encoding as at least one major
RDNS pool—Google Public DNS [8]—uses 0x20 encoding on a white-listed set of domains.
Unfortunately, we have no information on the prevalence of white-listing.
6 This will not interfere with regular Google trafﬁc as the hostnames involved are not in use.
218
K. Schomp et al.
whether the response includes our poisoned result or an error message from Google
indicating a non-existent domain.
Preventing this attack can be accomplished through the implementation of bailiwick
rules—such as checking that any records in the “additional answers” section belong to
the domain owned by the responding ADNS. In the most simplistic attack, we ﬁnd
675 cases where client-side DNS infrastructure readily caches a DNS response for
a mapping we provide for a bogus google.com subdomain. Furthermore, we observe
231 cases where the resolvers cache any additional record from a response to an MX
query (these are queries for the mail server for the domain in question) and 203 cases
where the resolver caches any additional CNAME-type record. Overall, there are a total
of 749 cases where we ﬁnd a resolver falling prey to at least one of these record injection
attacks. While a relatively small number, these RDNS resolvers are completely exposed
to crude poisoning by malicious ADNS servers, with no guessing involved.
5 Preplay Attack
The Kaminsky attack requires an attacker to forge an acceptable DNS response. How-
ever, in the course of our investigation we determined that FDNS servers were vulnerable
to a previously unknown injection attack. While FDNS servers do not themselves recur-
sively look up mappings, they often do have caches of previous lookups. The FDNS
servers populate these caches with the responses from upstream RDNS resolvers. In
some cases we ﬁnd that FDNS servers fail to validate the DNS responses. This leaves
these FDNS servers vulnerable to the crudest form of cache injection: a “preplay” attack
whereby an attacker sends a request to a victim FDNS and then, before the legitimate
response comes back, the attacker answers the request with a fraudulent response. The
FDNS will then forward the fake response to the originator and cache the result. An
FDNS that (i) forwards requests with a new random ephemeral port number and DNS
transaction ID and (ii) veriﬁes these and the upstream RDNS’ IP address on returning
responses would be protected against the preplay attack. Such protections would reduce
an attacker to guessing a variety of values in the short amount of time before the legiti-
mate response from the RDNS arrives. However, we ﬁnd a non-trivial number of FDNS
servers simply forward on the packets received and/or do not verify the values on DNS
responses. This leaves the door open for a crude attack whereby an attacker does not
have to guess these values, but can just use those from the original request.
To assess the extent of this vulnerability during our S2 and S3 experiments, we send
a request for a hostname within our domain to each ODNS and immediately issue a
fraudulent response containing IP address X. On the other hand, our ADNS responds
to these requests with a binding to IP address Y . The probing host issues a subsequent
request and determines which IP address is in the ODNS’ cache.
In its most primitive form, the preplay attack does not involve spooﬁng or guessing
to make the fraudulent response appear legitimate—we use the ephemeral port number
and DNS transaction ID from the original request. Additionally, we use the probing
machine’s genuine IP address. We use variants of this attack that attempt to leverage
information arriving at the ADNS (e.g., the RDNS server’s IP address) to craft DNS
responses that look more legitimate. However, to date our variants do not point to higher
Assessing DNS Vulnerability to Record Injection
219
vulnerability rates. Finally, while we use the DNS default port 53 as the ephemeral port
in the results herein, using a random ephemeral port number shows similar results.
We ﬁrst test the preplay attack during the S2 scan. Unlike our other scans which were
performed from PlanetLab nodes, the S2 scan leverages a single node in a residential
network.7 For each ODNS we attempt each attack variant three times to reduce any