As shown in the left part of the gure, if the port number is the one
used in the victim connection, the server will either accept or drop
the packet (depending on the SEQ and ACK numbers); the response
is sent to the client if appropriate. If the port number in the packet
is not used (right part of the gure), the server determines that an
ACK was received before any SYN packet. It therefore drops the
packet but responds to the client with an OPENPORT RST packet.
Because of this, the OPENPORT RST Counter is increased by one.
Subsequently, in a check phase, the attacker will send 200 SYN-
ACK packets to exhaust the OPENPORT RST limit (in 1 second) and
observes the number of resposnes (RSTs) received from the server.
If the attacker receives 200 RSTs, it means that the victim client is
using that port number to communicate with server; else, it infers
that the port number that it had guessed is incorrect.
SYN-backlog-based side-channels (Class B). The SYN backlog
is a buer that stores half-opened TCP sockets from connections
during the three-way-handshake. Because the SYN backlog is asso-
ciated with the “Listen” socket, its state is shared by all connections
to the server. In order to prevent DoS attacks, the size of the SYN
backlog is constrained to a shared limit. When the number of half-
opened sockets has reached this limit, the SYN backlog buer will
either remove an old element or directly drop the current one (based
on the OS kernel used, i.e., FreeBSD or Linux).
Side-channels 5 and 9 in Table 3, are caused because of this
feature, exploiting which an attacker can infer the port number
of a victim connection. Side-channels 10 and 11 can be used to
infer the port number, SEQ number and ACK number; however it is
practically hard to do so since the attacker needs to guess all three
secrets simultaneously (which leads to a prohibitive search space).
To illustrate, let us consider the side-channel 9 as an example,
which can be used to infer the port number of the victim connection.
To begin with, the attacker establishes a number of half-opened
sockets to just leave enough space for one additional spot in the
SYN backlog buer. Next, as shown in Figure 8, the attacker sends
a spoofed SYN packet to server pretending to be the victim. If the
guessed port number is already used in an established connection
(i.e., the server and the client are communicating), the server will
drop the SYN or send a challenge ACK, without allocating a new
half-opened socket (as shown in the left part of the gure). Other-
wise, a half-open socket is allocated and this makes the buer full
(as shown in the right part of the gure). Subsequently, the attacker
sends a SYN packet with its own IP address towards creating a
new half-opened socket, but more importantly to check whether
the SYN backlog is full. Because Linux implements a LIFO (Last In
First Out) algorithm to constrain the buer size, if SYN backlog is
full (as shown in the right part of the gure) , the server simply
drops this new request for a half-opened socket without sending
a response (assuming that SYN cookies are not enabled, which is
common among quite a few cloud servers [2, 12]). Otherwise, the
server will respond with a SYN-ACK to attacker.
Dierent from the Linux kernel, FreeBSD implements SYN back-
log as a FIFO (First In First Out) buer; this implies that an old
half-opened socket will be dropped if the buer is full. In this case,
before sending the spoofed SYN packet, the attacker needs to plant
its own half-opened socket rst (via a legitimate SYN). After send-
ing the spoofed SYN, it can infer whether buer is full by checking
if the previously planted half-opened socket still exists, by send-
ing an ACK packet. Similar to the case with Linux, here we again
assume that SYN cookies are not enabled.
TCP memory-counter-based side-channels (Class C). Side-
channels 6, 7, and 8 are caused by a new shared variable discovered
by SCENT. We refer to them as the TCP memory-counter-based
side-channels. As shown in Table 3, all three vulnerabilities require
an attacker to guess port number, SEQ number (in-window) and
ACK number simultaneously, therefore they are not quite practi-
cal. Information leakage in this class are due to a global variable,
viz., tcp_memory_allocated, which can be changed by any TCP
connection. Table 3 depicts two key constraints associated with
this variable: (a) sysctl_tcp_mem[1] indicates that currently the
memory is under pressure, while (b) sysctl_tcp_mem[2] is used
to indicate if the current allocated memory has reached a hard limit
(thus, the server will drop data packets that need additional memory
allocation). The dierent values of the above global variable can lead
to dierent control ows, which in turn cause the server to send dif-
ferent packets to the attacker (in response to specic sequences of
inputs). To exploit this feature, the attacker will rst send a spoofed
packet to try to change this global variable. The changes occur
Has connection
Server1
Client1
Oﬀ-path	
a)acker
No connection
Server2
Client2
OPENPORT	
RST	Counter	
=	200
Drop
ACK
ACK
OPENPORT	
RST	Counter	
=	200
reqsk
que
(9)
OPENPORT	
RST	Counter	
=	199
RST
SYN
SYN
SYN-ACK
SYN
SYN
OPENPORT	
RST	Counter	
=	0
200	ACKs
200	ACKs
200	RST
199	RST
OPENPORT	
RST	Counter	
=	0
reqsk
que
(10)
SYN-ACK
RST
Has connection
Server1 Client1
No connection
Server2
Client2
Oﬀ-path	
a)acker
In-window seq 
& correct ACK
Server1 Client1
Out-of-window seq 
or wrong ACK 
Server2
Client2
Oﬀ-path	
a)acker
reqsk
que
(9)
reqsk
que
(10)
memory	
under	
pressure
tcp_mem_
allocated++
tcp_mem_
allocated++
memory	
over	hard	
limit
ACK
Drop
Data	pkt
Data	pkt
Drop
memory	
under	
pressure
Pkt	with	
128B	
payload
Pkt	with	
128B	
payload
tcp_mem_
allocated++
ACK
Figure 7: Reset counter based side chan-
nel example (Vulnerability 1, FreeBSD)
Figure 8: SYN-backlog based side
channel example when SYN-Cookie
is disabled (Vulnerability 9, Linux)
Figure 9: TCP memory counter based
side channel example (Vulnerability 6,
Linux)
Table 4: Branch Coverage Information Before and After
Transformation
Kernel
Linux
FreeBSD
Before Transformations After Transformations
Num
476
618
Rate
36.62%
33.59%
Rate
46.00%
42.45%
Num
598
781
Increase Rate
25.63%
26.38%
only when the secret attributes of interest (i.e., SEQ number, ACK
number, and port number) are guessed correctly. Subsequently, the
attacker sends its own packets to try to reach the aforementioned
limit; it can observe if the global variable has changed, based on
the patterns of packets that are received. A change indicates that
its guess of the secret attributes holds true.
To showcase this class of side channels, we sketch an exemplary
case study shown in Figure 9. First, the attacker subsumes (pre-
allocates) a large volume of memory before the attack. Next, the
attacker sends a spoofed long data packet with a guessed SEQ
number and ACK number. If the SEQ number is in window and
the ACK number is correct (as shown on the left), the long data
payload is stored in a queue that holds out-of-order packets (packets
that are in window but are not equal to the next expected packet
i.e., rcv_next) causing an increase in the tcp_memory_allocated
counter; otherwise, the server will simply drop the packet (as shown
on the right). During a subsequent probing phase, the attacker
deliberately sends an out-of-order packet with a large data payload
on its own connection. This is designed to signicantly increase
tcp_memory_allocated. If tcp_memory_allocated has increased
before (in the previous step) causing the server to reach its hard
memory limit, it will cause a droppage of this packet; otherwise, the
attacker will receive an ACK packet from server. Therefore, attacker
can infer whether the guesssed secret attributes (SEQ number and
ACK number) in the spoofed packet are correct or not.
Challenge counter based side channel (Class D). Side-channel
12 is a new one that is similar to previously reported old ones (13,
14, 15). Here, we explicitly include the challenge ack mechanism in
Linux 3.8.0 towards validating previously reported side channels [7];
these are based on a global variable called challenge_count and
have been extensively described in [7]. Furthermore, this has al-
ready been patched in Linux and other OSes.
8.3 Eectiveness of automated downscaling
Automated downscaling is the core innovation of SCENT that im-
proves the code coverage of bounded model checking. In this sub-
section, we evaluate the eectiveness of this technique.
Table 4 shows the branch coverages achieved before and after
the transformation of automated downscaling. The branch cover-
age rate was increased by 25.63% with regards to the Linux kernel
and by 26.38% with the FreeBSD kernel. Although the nal branch
coverage rate is seemingly low at 46.00% (as in Linux model), dur-
ing our manual analysis, we found that many of the uncovered
branches were due to our limited input space. Specically, we did
not explore paths related to header options, paths that involve the
server actively sending packets, paths that are related to connec-
tion termination before the “Closed” state, etc. If we discard these
branches (which we do not expect to cover) the branch coverage
rate improves to around 70%.
Besides code coverage, a more important question is whether au-
tomated downscaling enables SCENT to discover more side-channels.
The second last column in Table 3 shows the answer to this question.
In fact, none of the side-channels can be found without automated
downscaling (all require it). We believe that this highlights the im-
portance and eectiveness of our technique.
8.4 Performance of model checking
One important design choice we made when building SCENT is
whether to use bounded testing [32], wherein we can directly test
an unmodied kernel, or use bounded model checking. The benet
of model checking is that it will visit each state only once, thereby
avoiding the execution of redundant steps and improving the perfor-
mance of testing. In this subsection, we compare the performance of
bounded model checking with bounded testing, in terms of number
of iterations. Figure 10 shows the result. Basically, bounded model
checking executes 4 orders of magnitude fewer iterations than blind
enumeration (i.e., bounded testing).
The next choice we made, that is related to the performance of
model checking, is imposing a limit on the number of packets to be
enumerated during bounded model checking. Figure 11 shows how
the time of one round of model checking increases as the number
of packets increases. Figure 12 shows how the memory usage of the
model checker increases as the number of packets increases. When
the number of packets increase to 4, it will either take too long to
test all the dierent congurations or exhaust all the memory on
the testbed.
9 CASE STUDY
When the port number is leaked, an attacker can infer whether the
victim client is communicating with the server (either during the
three way handshake or in ESTABLISHED state). This leaks the
victim user’s privacy. Side-channels 1, 3, 4, 5, 9 can leak port number
information, and can therefore be used to achieve this attack. In the
previous section, we discussed how such an attack can be launched.
We now construct a real attack to demonstrate the impact of the
corresponding side-channels found by SCENT.
As an exemplar, we pick side-channel 1 (as shown in Figure 7),
and evaluate it in terms of metrics such as success rate and the time
to succeed. In our experiment, we used a Ubuntu 14.04 host on a