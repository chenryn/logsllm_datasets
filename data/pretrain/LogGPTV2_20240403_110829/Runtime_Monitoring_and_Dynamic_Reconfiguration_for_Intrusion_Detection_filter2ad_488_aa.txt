title:Runtime Monitoring and Dynamic Reconfiguration for Intrusion Detection
Systems
author:Martin Reh&apos;ak and
Eugen Staab and
Volker Fusenig and
Michal Pechoucek and
Martin Grill and
Jan Stiborek and
Karel Bartos and
Thomas Engel
Runtime Monitoring and Dynamic Reconﬁguration for
Intrusion Detection Systems
Martin Reh´ak1, Eugen Staab2, Volker Fusenig2, Michal Pˇechouˇcek1, Martin Grill3,1,
Jan Stiborek1, Karel Bartoˇs3,1, and Thomas Engel2
1 Department of Cybernetics, Czech Technical University in Prague
{rehak,pechoucek,grill,stiborek,bartos}@agents.felk.cvut.cz
2 Faculty of Science, Technology and Communication, University of Luxembourg
{eugen.staab,volker.fusenig}@uni.lu
3 CESNET, z. s. p. o., Prague, Czech Republic
Abstract. Our work proposes a generic architecture for runtime monitoring and
optimization of IDS based on the challenge insertion. The challenges, known in-
stances of malicious or legitimate behavior, are inserted into the network trafﬁc
represented by NetFlow records, processed with the current trafﬁc and the sys-
tem’s response to the challenges is used to determine its effectiveness and to
ﬁne-tune its parameters. The insertion of challenges is based on the threat models
expressed as attack trees with attached risk/loss values. The use of threat model
allows the system to measure the expected undetected loss and to improve its
performance with respect to the relevant threats, as we have veriﬁed in the exper-
iments performed on live network trafﬁc.
1 Introduction
One of the principal problems of the intrusion detection systems based on the anomaly
detection [1] principles is their error rate, both in terms of false negatives (undetected
attacks) and false positives, i.e. legitimate trafﬁc labeled as malicious. This problem is
ampliﬁed by the fact that the sensitivity (and consequently the error rate) varies dy-
namically as a function of the background trafﬁc. For example, an attack that would be
easily discovered in the lower nighttime trafﬁc will pass undetected during the day, on
the system with identical settings. In this work, we address the problem of correct IDS
monitoring and dynamic reconﬁguration, in order to provide the operators with:
– an estimate of system sensitivity/error rate, given the current network trafﬁc and a
threat model, and
– autonomous system reconﬁguration, based on the system monitoring and the threat
model.
In order to perform these tasks, we use the concept of challenges [2] (or fault injection)
from the ﬁeld of autonomic computing, which allows us to measure the response of the
system with respect to a small subset of challenges, known instances of malicious or
legitimate behavior, inserted into the trafﬁc observed on the network. The response of
the system and its individual components to the inserted challenges is used to determine
E. Kirda, S. Jha, and D. Balzarotti (Eds.): RAID 2009, LNCS 5758, pp. 61–80, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009
62
M. Reh´ak et al.
(cid:1)(cid:2)(cid:3)(cid:4)(cid:4)(cid:5)(cid:6)(cid:7)(cid:5)(cid:8)(cid:9)(cid:10)
(cid:18)(cid:19)(cid:20)(cid:21)(cid:21)(cid:10)(cid:2)(cid:22)(cid:10)(cid:6)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:4)(cid:5)(cid:6)(cid:7)(cid:5)
(cid:11)(cid:5)(cid:4)(cid:5)(cid:12)(cid:13)(cid:14)(cid:15)(cid:6)
(cid:16)(cid:5)(cid:12)(cid:15)(cid:6)(cid:17)(cid:14)(cid:7)(cid:18)(cid:19)(cid:3)(cid:13)(cid:14)(cid:15)(cid:6)
(cid:15)(cid:10)(cid:3)(cid:16)(cid:8)(cid:4)(cid:17)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:2)
(cid:9)(cid:10)(cid:3)(cid:10)(cid:11)(cid:3)(cid:7)(cid:8)(cid:2)
(cid:12)(cid:13)(cid:6)(cid:3)(cid:10)(cid:14)
(cid:20)(cid:15)(cid:6)(cid:14)(cid:13)(cid:15)(cid:19)(cid:14)(cid:6)(cid:7)
(cid:21)(cid:18)(cid:13)(cid:22)(cid:18)(cid:13)
(cid:23)(cid:5)(cid:3)(cid:24)(cid:5)(cid:3)
Fig. 1. Adaptation process overview
its current error rate in terms of estimated ratio of false positives/false negatives (see
Fig. 1). It is also used to adapt the system behavior and to select and/or create optimal
system settings.
This generic concept is veriﬁed by its integration with the CAMNEP intrusion de-
tection system [3][4], which is based on a multi-stage combination of several network
behavior analysis algorithms processing the NetFlow [5] data. In Section 2, we brieﬂy
discuss the relevant properties of the CAMNEP system, which was augmented with
the processes described in this paper. Then, we present the self-adaptive architecture
integrated with the underlying system and discuss the crucial elements of the architec-
ture (Section 3), such as dynamic classiﬁer selection and optimization of number of
challenges and their composition. These sections describe the core contribution of this
work.
2 CAMNEP System
The self-optimization techniques presented in this paper were integrated with the CAM-
NEP network intrusion detection system [3], based on the Network Behavior Analysis
(NBA) approach [6]. This system processes NetFlow/IPFIX data provided by routers
or other network equipment and uses this information to identify malicious trafﬁc by
means of collaborative, multi-algorithm anomaly detection. The system uses the multi-
algorithm and multi-stage approach to optimize the error rate, while not compromising
the performance of the system. The self-monitoring and self-adaptation techniques are
very relevant in this context, as they allow to improve the error rate with only a minimal
and controllable impact on its efﬁciency.
The NetFlow network trafﬁc data is structured in records, and each record describes
one ﬂow. A ﬂow can be described as an unidirectional component of TCP connection
(or its UDP/ICMP equivalent) and contains all packets with the same source IP, desti-
nation IP, source and destination port and protocol (TCP/UDP/ICMP). A ﬂow record
contains this basic information, as well as other information, such as the number of
packets/bytes transferred, duration and TCP ﬂags encountered in the packets of the
ﬂow. The ﬂow records are aggregated over a predeﬁned observation period (typically
1-5 minutes). When the observation period elapses, the data is read out for analysis, and
a new observation period begins.
Runtime Monitoring and Dynamic Reconﬁguration for Intrusion Detection Systems
63
The system contains two principal classes of classifying agents, which are able to
evaluate the received trafﬁc:
Detection agents (agents A and B in Fig. 2) analyze raw network ﬂows by their anomaly
detection algorithms, exchange the anomalies between them and use the aggregated
anomalies to build and update the long-term anomaly associated with the abstract traf-
ﬁc classes built by each agent. These trafﬁc classes describe various behaviors, as they
can be distinguished based on the features used by the anomaly detection methods in-
tegrated into the system. Each detection agent uses one of the ﬁve anomaly detection
methods listed herein. Each of the methods works with a different trafﬁc model based on
a speciﬁc combination of aggregate trafﬁc features, such as: (i) entropies of ﬂow char-
acteristics for individual source IP addresses [7], (ii) deviation of ﬂow entropies from
the PCA-based prediction model of individual sources [8], (iii) deviation of trafﬁc vol-
umes from the PCA-based prediction for individual major sources [9], (iv) rapid surges
in the number of ﬂows with given characteristics from the individual sources [10] and
(v) ratios between the number of destination addresses and port numbers for individual
sources [11].
All detection agents map the same ﬂows, together with the shared evaluation of these
events, the aggregated immediate anomaly of these events determined by their anomaly
detection algorithms, into the trafﬁc clusters built using different features/metrics, thus
building the aggregate anomaly hypothesis based on different premises. The aggregated
anomalies associated with the individual trafﬁc classes are built and maintained using
the classic trust modeling techniques (not to be confused with the way trust is used
in this work). The detection agents evaluate the anomaly of each network ﬂow on the
whole [0,1] interval, and the output of the detection agents is integrated by the aggrega-
tion agents.
Aggregation agents α1 from the set A = {α1, . . . , αg} represent the various aggrega-
tion operators used to build the joint conclusion regarding the normality/anomaly of the
ﬂows from the individual opinions provided by the detection agents. Each agent uses a
distinct averaging operator (based on order-weighted averaging [12] or simple weighted
averaging) to perform the Rgdet → R transformation from the gdet-dimensional space
to a single real value, thus deﬁning one composite system output that integrates the
results of several detection agents. The aggregation agents also dynamically determine
the threshold values used to transform the continuous aggregated anomaly value in the
[0, 1] interval into the crisp normal/anomalous assessment for each ﬂow. The value of
the threshold is either relative (i.e. leftmost part of the distribution) or absolute, based
on the evaluation of the agent’s response to challenges.
The detection and aggregation agents annotate the individual ﬂows ϕ with a contin-
uous anomaly/normality value in the [0, 1] interval, with the value 1 corresponding to
perfectly normal events and the value 0 to completely anomalous ones. This continuous
anomaly value describes an agent’s opinion regarding the anomaly of the event, and
the agents apply adaptive or predeﬁned thresholds to split the [0, 1] interval into the
normal and anomalous classes. The threshold applied (and dynamically maintained) by
the aggregation agents divides the ﬂows into two classes: normal and anomalous. The
anomalous ﬂows are those whose anomaly falls below the threshold, while the normal
64
M. Reh´ak et al.
Fig. 2. Adaptation process in the CAMNEP system
ﬂows are those, whose anomaly is above the threshold. This distinction allows us to
introduce the components of the error rate. False Positives (FP) are the legitimate ﬂows
classiﬁed as anomalous, while the False Negatives (FN) are the malicious ﬂows clas-
siﬁed as normal. Most standalone NBA methods suffer from a very high rate of false
positives, which makes them unpractical for deployment. The static multi-stage pro-
cess of the original CAMNEP system already removes a large part of false positives,
while not increasing the rate of false negatives, and the goal of the self-optimization
techniques is to further improve the effectiveness of the system.
3 IDS Monitoring Architecture
The monitoring and adaptation components of the CAMNEP system implement the
high-level functional schema introduced in Fig. 1. The reconﬁguration action (as shown
in Fig. 1) is the identiﬁcation of the optimal anomaly aggregation function that achieves
the best separation between the legitimate and malicious challenges. Assuming that
these challenges are representative of the trafﬁc in the network and the expected attacks,
such aggregation should also optimize the performance against the actual threats in the
current network trafﬁc. The adaptation process also provides the user with the estimates
of system detection effectiveness against the threats deﬁned in the threat model, as it
presents the effectiveness values for the currently selected aggregation function.
Runtime Monitoring and Dynamic Reconﬁguration for Intrusion Detection Systems
65
The background trafﬁc is one of the adaptation process indirect inputs, as it inﬂu-
ences the performance of the individual anomaly detection algorithms. As the network
trafﬁc is highly unpredictable, it is very difﬁcult to predict which aggregation function
will be chosen, especially given the fact that the challenges are selected from the DB
using a stochastic process with a pseudo-random generator unknown to a potential at-
tacker. The attacker therefore faces a dynamic IDS system that unpredictably switches
its detection proﬁle between several different proﬁles with utility (i.e. detection per-
formance) values close to the optimum, and has to operate in a manner which would
evade any of these proﬁles. This unpredictability, together with the additional robust-
ness achieved by the use of multiple algorithms, makes the IDS evasion a much more
difﬁcult task than simply avoiding a single intrusion detection method[13].
The self-adaptation process (detailed in Fig. 2) is based on the insertion of challenges
into the background of network ﬂow data observed by the system. The challenges are
represented as sets of NetFlow records, corresponding to classiﬁed incidents observed
in the past. These records are generated by short lived, challenge speciﬁc challenge
agents and are mixed with the background trafﬁc, so that they cannot be distinguished
from the background by the detection/aggregation agents. They are processed together
with the rest of the trafﬁc, used to update the anomaly detection mechanism data and
trust models of individual detection agents and are evaluated with the rest of the trafﬁc.
Once the processing is completed, the challenge ﬂows are re-identiﬁed by their respec-
tive challenge agents, removed from the user output and the anomaly attributed to these
ﬂows by individual aggregation agents is used to evaluate these agents and to select the
optimal output agent for the current network conditions.
There are two broad types of challenges. The malicious challenges correspond to
known attack types, while the legitimate challenges represent known instances of legit-
imate events that tend to be misclassiﬁed as anomalous. We further divide the malicious
challenges into broad classes (denoted AC1, . . . , ACk, . . . ) characterized by the type
of the attack, such as ﬁngerprinting/vertical scan, horizontal scan, password brute forc-
ing, etc. These classes are used to make the connection between the threat models in
Section 4.1 and the challenge selection. With respect to each of these attack classes,
we characterize each aggregation agent by a probability distribution, empirically esti-
mated from the continuous anomaly values attributed to the challenges from this class,
as we can see in Fig. 3. We also deﬁne a single additional distribution for all legitimate
challenges.
We assume that the anomaly values of both the legitimate and all types of malicious
challenges deﬁne normal distributions, with the parameters ¯xk and σk
x for the k-th class
ACk of malicious challenges and ¯y and σy for the legitimate ones1. The distance be-
tween the estimated mean values of both distributions (¯xk and ¯y), normalized with
respect to the values σk
x and σy represents the quality of the aggregation agent with
respect to a given attack class. The effectiveness of the agent, deﬁned as an ability to
distinguish between the legitimate events and the attacks is deﬁned as a weighted aver-
age of the effectiveness with respect to individual classes and will be estimated by the
1 Normality of both distributions is not difﬁcult to achieve, provided that the attack classes
are properly deﬁned and that the challenge samples in these classes are well selected, i.e.
comparable in terms of size and other parameters.
66
M. Reh´ak et al.
10000
9000
8000
7000
6000
5000
4000
3000
2000
1000
s
t
n
e
v
e
f
o
r
e
b
m
u
N
0
0
0.1
0.2
0.3
Anomaly distribution of traffic
Anomaly distribution of true positive challenges
Anomaly distribution of false positive challenges
Goal
Attack A1
Subgoal
Subsubgoal
Attack A2
0.7
0.8
0.9
1
Attack A3
Attack A4
0.4
0.5
Anomaly/Normality
0.6
Fig. 3. Distribution of challenges on the back-
ground of the anomalies attributed to the trafﬁc
from one trafﬁc observation interval. The distri-
bution of anomaly of the malicious challenges
(from one class) is on the left side of the graph,
while the legitimate events are on the right.
Fig. 4. Example Structure of an Attack Tree
trust modeling approach introduced in Sect. 5. In order to perform the above-described
self-adaptation process, we need to address three important issues:
– ofﬂine selection of appropriate challenges and estimation of their relative impor-
tance (Sections 4 and 4.3),
– dynamic selection of the optimal aggregation agent to be used as a system output
(Section 5), and
– dynamic determination of the optimal number of challenges.
4 Threat-Based Approach to Challenge Selection
In this section, we will present a method for challenge selection based on explicit threat
modeling. We deﬁne a set T = {T1, . . . , Tm} of relevant threats as identiﬁed by the
network administrator. Each threat is described by an attack tree, which speciﬁes the
adversary’s attacks necessary to realize the threat. For each threat Ti, the system ad-
ministrator has speciﬁed the expected damage D(Ti), which would be caused should
the attacker realize the threat. Our system uses challenges to evaluate its internal com-
ponents in terms of accuracy and selects the most accurate component. Each challenge
tests for a speciﬁc class of attacks. Therefore, the detection of threats can be directed
by prioritizing those challenges that test for the most damaging threats.
In the following, we shortly review the concept of attack trees (Sect. 4.1) and show
how they can be formulated in propositional calculus (Sect. 4.2). The latter allows us
to minimize attack trees, and so bring them into an expedient form for further process-