Although Nativeguard [47] is not constrained by the type of
libraries and provides a library-level enforcement with app
modiﬁcation, it cannot provide ﬁne-grained policies at the level
of distinct functionalities that are tied to speciﬁc methods. Our
work offers expressive policies and can deal with cases where
a single library is used for legitimate and illegitimate purposes
at the same time. Other recent works have proposed new sys-
tems that extend the granularity of previous approaches [48],
[49]. A number of techniques require OS support and solve
the problem on privilege and permission levels. Adsplit [50]
isolates ad processes from user activities with distinct UID
to serve different permissions to the processes, Aframe [51]
isolates processes with iframe displays and compartmentalizes
ad permissions and Swirls [52] focuses on data protection
through encapsulation across different app contexts.
On-network enforcement: Early efforts aiming at en-
forcing policies on the network rely on solutions that are
transparent to both the protected and remote endpoints [53].
Later works propose to use mechanisms for tagging data as
it ﬂows through the network stack [54]. This allows to add
more semantics to the packages originating the communica-
tion and enable more complex enforcement on the network.
Dymo [55] injects a process’ identity label to network packets
for enforcing which software packages to be permitted on
users’ machines. Hond et al. [32] proposed a SDN-based
programmable BYOD system that can provide app-speciﬁc
policy enforcement on the enterprise network. One major
problem common to all current works performing on-network
enforcement is that they lack on expressiveness to build ﬁne-
grained enforcement systems, which relates to the granularity
of the information embedded in the network package (i.e.,
embedding either the process or app identiﬁer). As opposed
to our work, we embed contextual information from the soft-
ware component operating the network connection. For ﬁner
granularity in inspection phase, Shebaro’s work [56] inspects
uses device location as context, however it revokes/grants app
permissions as a policy enforcement mechanism and lacks
enforcement on app functions. While Hong et al. [32] provide
larger expressiveness than previous works,
their approach
requires important changes in the network architecture of a
corporation such as extending already existing SDN frame-
works. Similarly, Poise [57] also rely on SDN controllers while
inspecting context for network-enforcement while periodically
broadcasting context. Our work addresses these issues by
augmenting the resulting network trafﬁc with key contextual
information on every packet header, which is used to build
expressive policies that are enforced at the corporate network
level without relying on SDN. Backes et al. [58] leverages
the well structured class hierarchy and method signatures of
ad libraries for ﬁngerprinting, but modiﬁes the class structures
during ad blocking efforts. PrivacyGuard [59] uses a localized
VPN-based platform to intercept network trafﬁc of apps and
ﬁlter them based on taint analysis of data leaking apps.
Previous studies have also characterized applications’ be-
havior on requesting dangerous permissions, accessing and
sending sensitive information over the network [60] and iden-
tiﬁed a set of commonly used libraries with keyword matching
and ad component detection [22], which provided us with the
insights to determine high level policies in BORDERPATROL.
IX. CONCLUSIONS
In this paper, we presented a novel ﬁne-grained policy
enforcement system for Bring Your Own Device (BYOD)
enabled corporate networks. Our approach distinguishes it-
self with the feature of blocking packets originating from
undesirable application functionalities while leaving remaining
functions operational. We then built BORDERPATROL, a proto-
type system that implements this approach, presented realistic
use cases in a BYOD context, and analyzed 2,000 apps from
Google PlayStore. Finally, we evaluated the performance over-
head of our prototype. Our results show that BORDERPATROL
is effective in enforcing policies with negligible overhead.
ACKNOWLEDGEMENTS
This work was partially funded by ONR under grants
N00014-17-1-2541 and N00014-17-1-2011. We would like to
thank the anonymous reviewers and our shepherd Kaustubh
Joshi for their insightful feedback and help in improving the
ﬁnal version of our paper.
470
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] Samsung, “Samsung Knox for Android.” https://www.samsungknox.
com/en/knox-features/android, 2018.
[2] Google, “Android Device Management for Enterprises.” https://www.
android.com/enterprise/management/, 2018.
“Apple
running
[3] J. Chen,
tablet prototypes possibly identiﬁed by web
analytics,
https://gizmodo.com/
iphone-like
5456004/apple-tablet-prototypes-possibly-identiﬁed-by-web-analytics\
\-running-iphone-like-os-32, 2010.
3.2.”
[4] Yahoo, “Flurry Analytics.” https://developer.yahoo.com/ﬂurry/, 2018.
[5] Dataviz,
“Docs To Go Android App.” http://www.dataviz.com/
os
dtg-android, 2018.
[6] Dropbox, “Dropbox Inc. App.” https://play.google.com/store/apps/
details?id=com.dropbox.android, 2018.
[7] EU, “General Data Protection Regulation.” https://ec.europa.eu/info/law/
law-topic/data-protection/reform/rules-business-and-organisations en,
2018.
[8] IETF, “RFC 791: Internet Program Protocol Speciﬁcation.” https://tools.
ietf.org/html/rfc791, 1981.
[9] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma,
and W. Shen, “Hypervision across worlds: Real-time kernel protection
from the ARM TrustZone secure world,” in Proceedings of the 2014
ACM SIGSAC Conference on Computer and Communications Security,
pp. 90–102, ACM, 2014.
[10] Samsung, “KNOX Root of Trust.” https://kp-cdn.samsungknox.com/
bb91024cad9080904523821f727b9593.pdf, 2016.
[11] IETF, “RFC 7126: Recommendations on Filtering of IPv4 Packets
Containing IPv4 Options.” https://tools.ietf.org/html/rfc7126, 2014.
[12] JuniperNetworks,
“Understanding
Using
connaissance
juniper.net/documentation/en US/junos/topics/concept/
reconnaissance-deterrence-network-reconnaissance-understanding.html,
2017.
Options.”
IP
[13] B. Gruver, “dexlib2 library.” https://github.com/JesusFreke/smali/tree/
Network
Re-
https://www.
[14] rovo89, “Xposed Framework API.” http://api.xposed.info/reference/
“NetﬁlterQueue.”
https://pypi.python.org/pypi/NetﬁlterQueue,
master/dexlib2, 2017.
packages.html, 2017.
[15] PyPI,
2017.
[16] SecDev, “Scapy.” http://www.secdev.org/projects/scapy/, 2017.
[17] RabbitMQ, “RabbitMQ Messaging Protocol.” https://www.rabbitmq.
com/, 2018.
[18] QEMU, “QEMU.” https://www.qemu.org/, 2018.
[19] Android, “ADB Monkey UI Exerciser.” https://developer.android.com/
studio/test/monkey.html, 2017.
[20] N. Viennot, E. Garcia, and J. Nieh, “A measurement study of Google
Play,” vol. 42, no. 1, pp. 221–233, 2014.
[21] Apache, “Apache HTTP client library org.apache.http.client.”
https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/,
2018.
[22] L. Li, T. F. Bissyand´e, J. Klein, and Y. Le Traon, “An investigation into
the use of common libraries in Android apps,” in Software Analysis,
Evolution, and Reengineering (SANER), 2016 IEEE 23rd International
Conference on, vol. 1, pp. 403–414, IEEE, 2016.
[23] Facebook,
“Graph
API.”
https://developers.facebook.com/docs/
[24] SolCalendar, “SolCalendar app.” https://play.google.com/store/apps/
details?id=net.daum.android.solcalendar, 2016.
[25] Box, “Box App.” https://play.google.com/store/apps/details?id=com.box.
graph-api/, 2018.
android, 2018.
[26] SimpleHTTPServer, “Python Simple HTTP Server package.” https:
//docs.python.org/2/library/simplehttpserver.html, 2018.
[27] NIST, “CVE-2016-2402: OkHttp certiﬁcate pinner bypass.” https://nvd.
nist.gov/vuln/detail/CVE-2016-2402, 2016.
[28] M. Conti, V. T. N. Nguyen, and B. Crispo, “Crepe: Context-related
policy enforcement for android.,” in ISC, vol. 10, pp. 331–345, Springer,
2010.
[29] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner, “Addroid: Privilege
separation for applications and advertisers in Android,” in Proceedings
of the 7th ACM Symposium on Information, Computer and Communi-
cations Security, pp. 71–72, Acm, 2012.
[30] US-CERT, “Complete Mediation.” https://www.us-cert.gov/bsi/articles/
knowledge/principles/complete-mediation, 2005.
[31] Samsung,
“Samsung
KNOX
container-wide
VPN.”
https:
//docs.samsungknox.com/knox-platform-for-enterprise/admin-guide/
knox-workspace-vpn.htm, 2018.
[32] S. Hong, R. Baykov, L. Xu, S. Nadimpalli, and G. Gu, “Towards SDN-
deﬁned programmable BYOD (Bring Your Own Device) security.,” in
Network and Distributed System Security Symposium, 2016.
[33] Statista,
Play
number-of-available-applications-in-the-google-play-store/, 2018.
available
the Google
https://www.statista.com/statistics/266210/
applications
“Number
Store.”
of
in
[34] A. Continella, Y. Fratantonio, M. Lindorfer, A. Puccetti, A. Zand,
C. Kruegel, and G. Vigna, “Obfuscation-resilient privacy leak detection
for mobile apps through differential analysis,” in Proceedings of the
ISOC Network and Distributed System Security Symposium (NDSS),
pp. 1–16, 2017.
[35] J. Ren, M. Lindorfer, D. J. Dubois, A. Rao, D. Choffnes, and N. Vallina-
Rodriguez, “Bug ﬁxes, improvements,... and privacy leaks,” in Network
and Distributed System Security Symposium, 2018.
[36] G. Russello, A. B. Jimenez, H. Naderi, and W. van der Mark, “Firedroid:
Hardening security in almost-stock Android,” in Proceedings of the 29th
Annual Computer Security Applications Conference, pp. 319–328, ACM,
2013.
[37] X. Wang, K. Sun, Y. Wang, and J. Jing, “Deepdroid: Dynamically
enforcing enterprise policy on android devices.,” in NDSS, 2015.
[38] A. Bianchi, Y. Fratantonio, C. Kruegel, and G. Vigna, “Njas: Sandboxing
unmodiﬁed applications in non-rooted devices running stock android,”
in Proceedings of the 5th Annual ACM CCS Workshop on Security and
Privacy in Smartphones and Mobile Devices, pp. 27–38, ACM, 2015.
[39] M. Zhang and H. Yin, “Efﬁcient, context-aware privacy leakage con-
ﬁnement for Android applications without ﬁrmware modding,” in Pro-
ceedings of the 9th ACM symposium on Information, computer and
communications security, pp. 259–270, ACM, 2014.
[40] Samsung, “KNOX supported devices.” https://www.samsungknox.com/
[41] SEAP,
en/knox-platform/supported-devices, 2018.
custom ROM compatibility.”
samsung.com/forum-topic/once-i-install-knox-customization-rom-\
\it-possible-upgrade-newer-versions-android-ota, 2015.
“Android
https://seap.
[42] Frida, “Dynamic instrumentation toolkit
for developers,
reverse-
engineers, and security researchers..” https://www.frida.re/, 2018.
[43] V. F. Taylor and I. Martinovic, “To update or not to update: Insights
from a two-year study of Android app evolution,” in Proceedings of
the 2017 ACM on Asia Conference on Computer and Communications
Security, pp. 45–57, ACM, 2017.
[44] Google,
“ADM Logging.”
https://developer.android.com/work/dpc/
logging, 2018.
[45] Samsung,
“KNOX:
Network
platform
analytics.”
https://seap.samsung.com/html-docs/android/Content/
network-platform-analytics-reference-isv.htm, 2018.
[46] R. Xu, H. Sa¨ıdi, and R. J. Anderson, “Aurasium: Practical policy
enforcement for android applications.,” in USENIX Security Symposium,
vol. 2012, 2012.
[47] M. Sun and G. Tan, “Nativeguard: Protecting android applications from
third-party native libraries,” in Proceedings of the 2014 ACM conference
on Security and privacy in wireless & mobile networks, pp. 165–176,
ACM, 2014.
[48] J. Zhan, Q. Zhou, X. Gu, Y. Wang, and Y. Niu, “Splitting third-party
libraries privileges from android apps,” in Australasian Conference on
Information Security and Privacy, pp. 80–94, Springer, 2017.
[49] F. Wang, Y. Zhang, K. Wang, P. Liu, and W. Wang, “Stay in your
cage! a sound sandbox for third-party libraries on android,” in European
Symposium on Research in Computer Security, pp. 458–476, Springer,
2016.
[50] S. Shekhar, M. Dietz, and D. S. Wallach, “Adsplit: Separating smart-
phone advertising from applications.,” in USENIX Security Symposium,
vol. 2012, 2012.
[51] X. Zhang, A. Ahlawat, and W. Du, “Aframe: Isolating advertisements
from mobile applications in android,” in Proceedings of the 29th Annual
Computer Security Applications Conference, pp. 9–18, ACM, 2013.
[52] G. Salles-Loustau, L. Garcia, K. Joshi, and S. Zonouz, “Don’t just
BYOD, bring-your-own-app too! Protection via virtual micro security
perimeters,” in Dependable Systems and Networks (DSN), 2016 46th
Annual IEEE/IFIP International Conference on, pp. 526–537, IEEE,
2016.
471
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
[53] A. D. Keromytis and J. L. Wright, “Transparent network security policy
enforcement.,” in USENIX Annual Technical Conference, FREENIX
Track, pp. 215–226, 2000.
[54] A. D. Keromytis, “Tagging data in the network stack: mbuf tags,” 2003.
[55] B. Gilbert, R. Kemmerer, C. Kruegel, and G. Vigna, “Dymo: Tracking
dynamic code identity,” in International Workshop on Recent Advances
in Intrusion Detection, pp. 21–40, Springer, 2011.
[56] B. Shebaro, O. Oluwatimi, and E. Bertino, “Context-based access control
systems for mobile devices,” IEEE Transactions on Dependable and
Secure Computing, vol. 12, no. 2, pp. 150–163, 2015.
[57] A. Morrison, L. Xue, A. Chen, and X. Luo, “Enforcing context-aware
BYOD policies with in-network security,” in 10th USENIX Workshop
on Hot Topics in Cloud Computing (HotCloud 18), 2018.
[58] “Seamless in-app ad blocking on stock A,”
[59] Y. Song and U. Hengartner, “Privacyguard: A VPN-based platform
to detect
information leakage on Android devices,” in Proceedings
of the 5th Annual ACM CCS Workshop on Security and Privacy in
Smartphones and Mobile Devices, pp. 15–26, ACM, 2015.
[60] AppCensus, “AppCensus Analysis Database.” https://appcensus.mobi/,
2017.
472
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply.