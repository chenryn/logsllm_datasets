### Fine-Grained Policy Enforcement in Corporate Networks

#### NativeGuard and Other Approaches
While NativeGuard [47] is not limited by the type of libraries and provides library-level enforcement through application modification, it lacks the ability to enforce fine-grained policies at the level of specific functionalities tied to individual methods. Our work, on the other hand, offers more expressive policies and can handle scenarios where a single library is used for both legitimate and illegitimate purposes simultaneously. Recent studies have proposed systems that extend the granularity of previous approaches [48], [49]. Some techniques require operating system (OS) support and address issues at the privilege and permission levels. For example, Adsplit [50] isolates ad processes from user activities using distinct UIDs to serve different permissions, while Aframe [51] isolates processes with iframe displays and compartmentalizes ad permissions. Swirls [52] focuses on data protection through encapsulation across different app contexts.

#### On-Network Enforcement
Early efforts to enforce policies on the network relied on solutions transparent to both protected and remote endpoints [53]. Later works introduced mechanisms for tagging data as it flows through the network stack [54], allowing for more complex enforcement. Dymo [55] injects a process's identity label into network packets to control which software packages are permitted on users' machines. Hond et al. [32] proposed an SDN-based programmable BYOD system that can provide app-specific policy enforcement on enterprise networks. A common issue with current on-network enforcement approaches is their lack of expressiveness in building fine-grained enforcement systems, which is related to the granularity of information embedded in network packets (e.g., embedding either the process or app identifier). In contrast, our approach embeds contextual information from the software component operating the network connection, providing finer granularity during the inspection phase. Shebaro’s work [56] uses device location as context for inspection but only revokes or grants app permissions, lacking enforcement on specific app functions. While Hong et al. [32] offer greater expressiveness than previous works, their approach requires significant changes to the network architecture, such as extending existing SDN frameworks. Similarly, Poise [57] relies on SDN controllers for inspecting context and periodically broadcasting it. Our work addresses these issues by augmenting network traffic with key contextual information in every packet header, enabling the creation of expressive policies without relying on SDN. Backes et al. [58] leverage the well-structured class hierarchy and method signatures of ad libraries for fingerprinting but modify class structures during ad blocking. PrivacyGuard [59] uses a localized VPN-based platform to intercept and filter network traffic based on taint analysis of data-leaking apps.

#### Previous Studies
Previous studies have characterized applications' behavior in requesting dangerous permissions and accessing and sending sensitive information over the network [60]. These studies also identified commonly used libraries through keyword matching and ad component detection [22], providing insights for determining high-level policies in BORDERPATROL.

### Conclusions
In this paper, we presented a novel fine-grained policy enforcement system for Bring Your Own Device (BYOD) enabled corporate networks. Our approach uniquely blocks packets originating from undesirable application functionalities while keeping the remaining functions operational. We developed BORDERPATROL, a prototype system that implements this approach, and demonstrated realistic use cases in a BYOD context. We analyzed 2,000 apps from the Google Play Store and evaluated the performance overhead of our prototype. Our results show that BORDERPATROL is effective in enforcing policies with negligible overhead.

### Acknowledgements
This work was partially funded by ONR under grants N00014-17-1-2541 and N00014-17-1-2011. We would like to thank the anonymous reviewers and our shepherd Kaustubh Joshi for their insightful feedback and help in improving the final version of our paper.

### References
[1] Samsung, “Samsung Knox for Android.” https://www.samsungknox.com/en/knox-features/android, 2018.
...
[60] AppCensus, “AppCensus Analysis Database.” https://appcensus.mobi/, 2017.