(cid:5)P, m0, p0, Il, O0(cid:6) (cid:2)
∗ (cid:5)cwq, mwq, pwq, Il, Owq(cid:6)
∗ (cid:5)skip, m f,l, p f,l, Il, O f,l(cid:6) .
(cid:2)
l
(cid:6)
Because cwq must start with a statement of the form
input x from i, we know that p f,l(i) > pwq(i).
(cid:8), O
(cid:8)(cid:6) ,
(cid:8), p
(cid:8), Il
(cid:8) =l
On the other hand, there is no local execution state at
(cid:8)
in L f or wq(i, n) for any (i, n). Therefore,
security level l
global execution rule (2) from Figure 7 must have
(cid:6)
been applied to a local execution state of the form
skip, m
(cid:8). But then again Lemma 5 tells us that
(cid:8)(cid:7)
(cid:8), p
(cid:8), O0(cid:6) (cid:2)
∗ (cid:5)skip, m
(cid:5)P, m0, p0, Il
(cid:8) = I|
(cid:8). Because of noninterference and because
with Il
l
(cid:8) Il and I =l
(cid:8) =l
(cid:8) p and p =l p f,l,
(cid:8) Il, we know that p
Il
(cid:8)
(i) = p(i) = p f,l(i) > pwq(i). However, Lemma 1
so p
(i) = r f (i) and r f (i) ≤ pwq(i), which is a
(cid:8)
tells us that p
contradiction.
3) Correct I/O: All that remains to prove is that r f = p
and O f = O. Because L f and wq(i, n) are empty for all
(i, n), global semantic rule (2) must have been applied
(cid:7)
to an execution of the form
l for any level
l ∈ L. Lemma 5 then tells us that
(cid:5)P, m0, p0, Il, O0(cid:6) (cid:2)
∗ (cid:5)skip, ml, pl, Il, Ol(cid:6) ,
skip, ml, pl
where Il = I|
l and Ol(o) = O f (o) for all o such that
σout(o) = l. Because P is noninterferent and Il =l I, we
have that Ol =l O and pl =l p. We know from Lemma
1 that r f (i) = pl(i) = p(i) for all i such that σin(i) =
l. Because the above holds for any l, the theorem is
proven.
V. Experimental Behaviour
In order to get a better understanding of the practical
behaviour of secure multi-execution, we performed an
experiment. We implemented a model browser using
the Mozilla Spidermonkey Javascript engine [10], and
tested it on the set of benchmarks used by the develop-
ers of another major Javascript engine (Google Chrome
V8) [11]. In this section, we discuss the results.
A. A model browser using secure multi-execution
Implementing secure multi-execution in a model
browser does not require any modiﬁcations to the
Javascript engine internals. Instead, several instances
of the engine need to be constructed, and all input/out-
put operations need to be modiﬁed according to the
appropriate rules from Figure 6 and 7.
We have done this exercise using the Mozilla Spi-
dermonkey Javascript engine. We exposed model in-
put/output functions on two security levels (“hi” and
“lo”). We have implemented the modiﬁed secure
multi-execution semantics for I/O operations using
the Mozilla NSPR library of concurrency primitives.
Each I/O function contains an artiﬁcial 10 milli-seconds
“sleep” call, simulating I/O latency. Two scheduling
118
1 for (var i = 0; i < 100; ++i) {
var test = 0;
for (var j = 0; j < 10000; ++j) {
2
3
4
5
6
7
8
9
10
11
12
13
14
test += j;
}
if (i % 10 == 0) {
var hi_in = hi_input();
var lo_in = lo_input();
lo_output("#" + i + ". lo_in: ’"
+ lo_in + "’. hi_in is: ’"
+ hi_in + "’");
hi_output("#" + i + ". hi_in: ’"
+ hi_in + "’. lo_in is: ’"
+ lo_in +"’");
}
15
16 }
Figure 8.
including administrative benchmark-related code).
Source code for the additional IO benchmark (not
strategies were implemented, one implementing a sim-
ple serial scheduling of the diﬀerent executions, start-
ing with the lo one. The other scheduling strategy
executed both executions in parallel, while indicating
to the OS that the “lo” execution should be priori-
tised. For comparison, we have also built a standard
Javascript engine, implementing the I/O functions in
a standard way, and only executing a Javascript pro-
gram a single time. All concurrency operations were
removed in this last implementation.
B. An Experiment
For our experiment, we have worked with the
Google Chrome V8 Benchmark suite. This suite is
constructed by the developers of the Google Chrome
V8 Javascript engine in order to compare their engine
to others. The suite contains a set of 7 benchmarks
(Richards, DeltaBlue, Crypto, RayTrace, EarleyBoyer,
RegExp, Splay), some explicitly focusing on certain
components of the Javascript engine (such as the
garbage collector in Splay or the regular expression
engine in RegExp), some more general. These bench-
marks were modiﬁed in two ways. First, we removed
calls to the load function, instead concatenating all
relevant ﬁles in a single ﬁle. Second, we modiﬁed
the benchmarking code to execute each benchmark 5
times, instead of stopping after 1 second has passed.
Furthermore, we have added a benchmark called
IO, simulating a program performing a large amount
of I/O operations on channels at diﬀerent security
levels. The source code for this benchmark is shown
in Figure 8.
Normal Execution
Serial Multi-Execution
Parallel Multi-Execution
Execution Time
c
r
y
d
elta
e
a
rle
r
a
ytr
r
e
g
blu
y-b
a
c
e
e
x
p
ric
h
s
pla
y
a
r
d
s
p
to
io
e
o
y
e
r
(a) Execution Time (Percentage of normal).
Memory Usage
c
r
y
d
elta
e
a
rle
r
a
ytr
r
e
g
blu
y-b
a
c
e
e
x
p
ric
h
s
pla
y
a
r
d
s
p
to
io
e
o
y
e
r
200%
150%
100%
50%
0%
200%
150%
100%
50%
0%
(b) Memory Usage (Percentage of normal).
Figure 9. Experimental Results.
C. Results
In Figure 9, we show graphs of our measurements
for execution time and memory usage of the three
Javascript executors described above, for each of the
benchmarks. The tests were run on a recent dual-
core computer with a suﬃcient amount of RAM 1.
We deﬁne execution time as elapsed wall clock time
as measured by the Ubuntu 7.10 time utility. Memory
usage was measured in a separate run of the programs
instrumented using the Valgrind Massif tool [17], and
is deﬁned as the amount of heap memory allocated
through malloc and similar functions.
The results allow us to make certain important
observations, both for the parallel and serial multi-
1CPU: Intel Core 2 Duo P8600 2.4 GHz, Amount of RAM: 2GB.
119
execution. Serial multi-execution has only a limited
impact on memory usage. This could have been ex-
pected, because the high security level execution is
only started when the low security one has completely
terminated. On the other hand, serial multi-execution
increases execution time by a factor of two or more.
This is clearly also what would be expected for this
situation. For the I/O benchmark, the added execution
time is limited, thanks to a phenomenon we discuss
further below.
For parallel multi-execution, the situation is more
or less reversed with respect to serial multi-execution.
Memory usage increases by a factor between 50% and
100%. Two instances of the program are continuously
running in parallel, each with their own copy of the
internal state of the program. The increase in execution
time is rather limited, ranging between 2% and 25%.
Both executions execute in parallel on the two cores of
the CPU.
When we ﬁrst ran these benchmarks, we had not
anticipated the surprisingly good results for the IO
benchmark. It is counterintuitive that executing a pro-
gram twice can actually decrease total execution time.
This phenomenon can be attributed to a better han-
dling of I/O latency by the parallel runs of the program
(recall that we have simulated I/O latency by adding
a 10ms sleep in each I/O operation). For the example
in Figure 8, one should imagine that a single program
performing all four I/O operations serially is replaced
by two programs, each performing only the two I/O
operations on its security level, and progressing in
parallel on separate cores of the CPU (reusing an I/O
result from a lower execution does not produce any
latency). For this benchmark, secure multi-execution
in eﬀect performs an automatic parallelisation, based
on the assumption of noninterference. Any application
performing I/O operations at diﬀerent security levels
serially, will beneﬁt from this eﬀect, although it will
of course be more limited than in this artiﬁcial bench-
mark.
D. Discussion
We think the results in Figure 9 show that secure
multi-execution is not only of theoretical signiﬁcance,
but is also viable in real-life browser environments.
Especially parallel multi-execution seems to provide
a good compromise on modern consumer computer
systems where memory is often no longer the bottle-
neck and multi-core CPUs are common. We think these
results indicate an interesting direction for further
research.
Note also that we did not perform any optimisa-
tion in our benchmarks. One technique which looks
promising in this respect is program slicing [18]. An
120
execution of a program at a security level l could
be optimised by slicing the program for a slicing
criterion consisting of all input and output statements
at security level l, and the variables they depend on.
Depending on the structure of the dependency rela-
tions in the program, this could lead to a considerable
increase in eﬃciency.
The source code for this experiment is available
online [19].
VI. Discussion
A. Secure Multi-Execution in a Real Browser
In Section V we discussed how the technique can
be implemented in a model browser. In order to im-
plement it in a real browser, support needs to be
added for some additional concepts. In this section,
we discuss some such concepts, and outline some
proposed solutions for supporting them. We do not
provide full details and further research into this topic
is needed.
One concept we have not modelled in our formal
presentation are browser callbacks. At certain moments
in time, the browser will call certain Javascript func-
tions to allow the program to react to certain events.
For example, “document.onload” event handlers will
be called after the HTML page has ﬁnished loading, to
allow Javascript programs to perform some initialisa-
tion. Browser callbacks can be encoded in our model
language by adding an event loop at the end of a
program P, looping on an input from a INextEvent input
channel. On this input channel, the default value vdefault
would correspond to an empty event. By placing event
sources from more than one channel in the event loop,
a policy could be encoded where not all callbacks are
associated to the same security level.
This formal encoding of browser callbacks corre-
sponds to an implementation where callbacks are ex-
ecuted only in executions at security level l or higher,
with l the security level assigned to the relevant event.
Typically, a browser’s “document.onload” event would
be associated to a lower security level than an “el-
ement.onkeypress” event. Note ﬁnally, that by also
modelling an event when leaving the page, event-
driven web applications can still be considered as
terminating.
Another
important
feature to support
the
browser’s DOM tree. The DOM tree can be described
as the complete set of interfaces which a browser
exposes to Javascript programs. It is a tree structure
consisting of DOM nodes. Certain DOM nodes are
intended to be called as functions, or to be read from
and assigned as variables. Some represent parts of
the current HTML document. DOM nodes can also be
added or deleted etc. Nodes have names and can be
is
referred to using top-down paths of the form “docu-
ment.body.ﬁrstDiv”.
For implementing support for the DOM tree in an
implementation of secure multi-execution, we need to
distinguish diﬀerent types of interaction with the DOM
tree. First of all, certain function calls and DOM node
property assignments will trigger side eﬀects in the
outside world. For example, setting the URL of an
HTML img element may cause an HTTP request to
be made to get the new image. Adding an HTML
div element with some text to document.body will
add text in the user-visible document. These types of
interactions have to be modelled using a separate input
channel for every possible list of arguments to the
function or assignment. It would be useful to support
that for a single node, not all of these input channels
are assigned the same security level. For example,
when setting the URL of a HTML img element, the
standard same origin policy (see e.g. Johns [12]) could be
used to determine whether the assigned URL is trusted
or not.
Interactions with the DOM tree not producing exter-
nal side eﬀects can be implemented in one of two ways.
The distinction comes down to the question whether
the DOM tree is modelled as part of a Javascript pro-
gram’s state or as part of the outside world. The latter
alternative means mapping every possible interaction