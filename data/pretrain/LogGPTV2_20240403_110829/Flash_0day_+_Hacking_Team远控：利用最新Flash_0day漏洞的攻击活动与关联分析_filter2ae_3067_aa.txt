# Flash 0day + Hacking Team远控：利用最新Flash 0day漏洞的攻击活动与关联分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 背景
360威胁情报中心在2018年11月29日捕获到两例使用Flash 0day漏洞配合微软Office
Word文档发起的APT攻击案例，攻击目标疑似乌克兰。这是360威胁情报中心本年度第二次发现在野0day漏洞攻击。攻击者将包含Flash
0day漏洞的Word诱饵文档发送给目标，一旦用户打开该Word文档便会触发漏洞并执行后续的木马程序，从而导致电脑被控制。360威胁情报中心在确认漏洞以后第一时间通知了厂商Adobe，Adobe在今日发布的安全通告中致谢了360威胁情报中心。
Adobe反馈确认漏洞存在并公开致谢
整个漏洞攻击过程非常巧妙：攻击者将Flash
0day漏洞利用文件插入到Word诱饵文档中，并将诱饵文档和一个图片格式的压缩包（JPG+RAR）打包在一个RAR压缩包中发送给目标。目标用户解压压缩包后打开Word文档触发Flash
0day漏洞利用，漏洞利用代码会将同目录下的JPG图片（同时也是一个RAR压缩包）内压缩保存的木马程序解压执行，通过该利用技巧可以躲避大部分杀毒软件的查杀。360威胁情报中心通过对木马样本进行详细分析，发现本次使用的木马程序为Hacking
Team 2015年泄露的远程控制软件的升级版！相关数字攻击武器与Hacking Team有很强的关联性，且使用相同数字签名的Hacking
Team木马最早出现在2018年8月。
由于此漏洞及相应的攻击代码极有可能被黑产和其他APT团伙改造以后利用来执行大规模的攻击，构成现实的威胁，因此，360威胁情报中心提醒用户采取应对措施。
## 事件时间线
时间
|
内容  
---|---  
2018年11月29日
|
360威胁情报中心发现定向攻击样本线索  
2018年11月30日
|
发现并确认Flash 0day漏洞的存在并上报Adobe  
2018年12月03日
|
厂商Adobe确认漏洞的存在  
2018年12月05日
|
360威胁情报中心发布分析报告  
## 相关漏洞概要
漏洞名称
|
Adobe Flash Player远程代码执行漏洞  
---|---  
威胁类型
|
远程代码执行  
威胁等级
|
高  
漏洞ID
|
CVE-2018-15982  
利用场景
|
攻击者通过网页下载、电子邮件、即时通讯等渠道向受害者发送恶意构造的Office文件诱使其打开处理，可能触发漏洞在用户系统上执行任意指令获取控制。  
受影响系统及应用版本
|
Adobe Flash Player（31.0.0.153及更早的版本）  
不受影响影响系统及应用版本
|
Adobe Flash Player 32.0.0.101（修复后的最新版本）  
修复及升级地址
|
https://get.adobe.com/flashplayer/  
## 样本概况
从捕获到的样本相关信息推测判断这是一起针对乌克兰地区的APT攻击。样本于11月29日被上传到VirusTotal以后的几天内只有很少的杀毒软件能够检出，
360威胁情报中心通过细致的分析发现了其中包含的0day漏洞利用。
被捕获的其中一个Word文档在VirusTotal上的查杀情况如下：
## 攻击过程分析
通过对样本执行过程的跟踪记录，我们还原的样本整体执行流程如下：
包含Flash 0day的恶意文档整体执行流程
### 诱饵文档和图片格式的压缩包
攻击者疑似首先向相关人员发送了一个压缩包文件，该压缩包含一个利用Flash
0day漏洞的Word文档和一张看起来有正常内容的JPG图片，并诱骗受害者解压后打开Word文档：
而scan042.jpg图片实际上是一个JPG图片格式的RAR压缩包，文件头部具有JPG文件头特征，而内部包含一个RAR压缩包。由于RAR识别文件格式的宽松特性，所以该文件既可以被当做JPG图片解析，也可以当做RAR压缩包处理：
JPEG文件头
内置RAR压缩包
诱饵文档为俄语内容，是一份工作人员的调查问卷，打开后会提示是否播放内置的Falsh，一旦用户允许播放Flash，便会触发0day漏洞攻击：
### Flash 0day漏洞对象
该诱饵文档在页眉中插入了一个Flash 0day漏洞利用对象：
提取的Flash 0day漏洞利用文件如下：
Flash文件中包含的ShellCode：
### ShellCode
Flash
0day漏洞利用成功后执行的ShellCode会动态获取函数地址，随后调用RtlCaptureContext获得当前的栈信息，然后从栈中搜索0xDEC0ADDE、0xFFEFCDAB标志，此标志后的数据为CreateProcess函数需要使用的参数，最后调用CreateProcess函数创建进程执行命令：
动态获取函数地址：
搜索CreateProcess函数需要使用的参数：
调用CreateProcess函数执行命令：
### 通过Flash 0day漏洞执行命令
漏洞利用成功后执行的ShellCode最终会执行以下命令：
    cmd.exe /c set path=%ProgramFiles(x86)%\WinRAR;C:\Program Files\WinRAR; && cd /d %~dp0 & rar.exe e -o+ -r -inul *.rar scan042.jpg & rar.exe e -o+ -r -inul scan042.jpg backup.exe & backup.exe
该命令行的最终目的是将当前文档路径下的scan042.jpg文件使用WinRAR解压后并执行其中的backup.exe，从而完成对目标用户电脑的控制：
## Flash 0day漏洞分析
360威胁情报中心对该漏洞产生的原因及利用方法进行了详细分析，过程如下：
### 漏洞分析 – 释放后重用漏洞（UAF）
反编译提取的漏洞SWF文件如下所示，Exploit中的代码没有经过任何混淆：
经过分析可以发现，漏洞和今年年初Group 123组织使用的Flash 0day CVE-2018-4878十分类似，CVE-2018-4878
是由于Flash om.adobe.tvsdk包中的DRMManager导致，而该漏洞却和com.adobe.tvsdk中的Metadata有关。
SWF样本一开始定义了三个Vector（主要用于抢占释放的内存空间，其中Var15，Var16分别在32位和64位版本中使用）：
进入Var17函数后，该函数一开始进行了一些常规的SPRAY，然后申明了一个名为Metadata的对象。Metadata类似于一个map：
Metadata为Flash提供的SDK中的类，其支持的方法如下所示：
漏洞触发的关键代码如下，通过setObject向Metadata中存储ByteArray对象，并设置对应的key：
然后调用Var19()，该函数会导致Flash中GC垃圾回收器调用，从而使导致Meatdata被释放：
随后调用的keySet会根据设置的key返回对应的Array，并赋值给_local_6，setObject函数的定义如下所示：
KeySet函数如下所示：
Metadata中的array被释放后，此处直接通过Var14遍历赋值抢占对应的内存，抢占的对象为Class5：
Class5定义如下所示：
最后遍历_local_6，找到对应被释放之后被Class5抢占的对象，判断的标准是Class5中的24，之后通过对象在内存中的不同来判断运行的系统是32位还是64位。而再次调用Var19函数将导致之前的Class5对象内存再次被释放，由于Var14这个Vector中保存了对该Class5对象的引用，最终根据系统版本位数进入对应的利用流程：
进入函数Var56后，由于之前的Var14 Vector中的某个Class5对象已经释放，此处同样通过给Var15
Vector遍历赋值来抢占这个释放掉的Class5对象，此处使用的是Class3对象：