ing into consideration of all those security decisions. To
relax mandatory assumption in a secure way, we took a
conservative approach which intersects (i.e., apply AND
operator) all those security decisions. Thus, only if all
security namespaces that were made aware of the opera-
tion allow an operation will it be allowed by the system.
Finally, we added a component named Policy Engine
that detects and identiﬁes policy conﬂicts among secu-
rity namespaces at policy load time. Policy conﬂicts
result in different security decisions at runtime, where
an operation allowed by one security namespace is de-
nied by another. Since a security namespace cannot (and
should not) inspect security states of another, debugging
the cause of the denial becomes a problem. This is par-
ticularly problematic for the container cloud case since
the container owners do not want containerized applica-
tions to encounter any unexpected runtime resource ac-
cess errors. Therefore we designed the policy engine to
detect and identify policy conﬂicts at policy load time
and inform the namespace owner the potential conﬂicts.
The policy owner may decide to revise her security pol-
icy to avoid conﬂicts, or continue to use the system but
be aware of the potential runtime denials, or change to a
new system where there is no conﬂicts.
5 Operation Router
The Operation Router identiﬁes the set of security
namespaces that may have an opinion about an opera-
tion and routes the operation to those security names-
paces. To decide which security namespace may have
an opinion about an operation, we leverage a simple in-
sight: a security namespace may have an opinion about
an operation if by not routing the operation to the secu-
rity namespace, the two security assumptions, global and
mandatory, might be broken for the security namespace.
Since an operation can be written as an authorization tu-
ple (s, o, op), we discuss from subject’s and object’s per-
spective separately.
5.1 A Subject’s Perspective
Security framework makes an implicit assumption about
its globalness: it controls all subjects on a system that
are stemmed from the very ﬁrst subject that it sees. For
native system, this means all subjects forked from init
(i.e., PID 1). For a security namespace, this means all
the subjects forked from the ﬁrst subject of the security
namespace. The attack example shown in Figure 3 oc-
curs due to that it breaks this implicit assumption. P1 is
a descendant of P. However, by assigning security con-
trol of P1 to a new security namespace, security names-
pace NSNative no longer conﬁnes P1, therefore breaking
the implicit global assumption of NSNative.
Therefore, a security namespace would have an opin-
ion about an operation if, by removing the operation, the
implicit global assumption of the security namespace is
broken. To achieve autonomous security control, a sub-
ject is under direct control of the security namespace that
it is associated with. However, at the same time, since the
subject stems from other subjects that may be associated
with other security namespaces, those security names-
paces also implicitly assume control of the subject.
If
an operation involving the subject is not routed to those
security namespaces, their global assumptions are bro-
ken therefore compromising their security. As a result,
the Operation Router needs to account for the subject’s
perspective by not only route an operation to the security
namespace that the subject is associated with, but also
all security namespaces that the direct ancestors of the
subject are associated with.
5.2 An Object’s Perspective
Security policy is often a whitelist, enumerating allowed
operations from subjects over objects. The manda-
tory assumption of a security framework implies that,
other than those allowed operations, no other operations
should be performed over the objects2. In other words, a
security namespace implicitly assumes a complete (and
autonomous) control over the objects that it may access.
The attack example 2 shown in Section 3.2 occurs due to
that it breaks this mandatory assumption. In the attack,
security namespace NS1 assumes high integrity of ﬁle f
by ensuring that the ﬁle is read only to all its subjects.
However, due to the ﬁle is also accessible to another
security namespace NS2, NS2 may allow its subjects to
write to f in arbitrary way. Therefore, when subjects
from NS1 access the ﬁle, security of NS1 is compromised
without NS1 is being aware of.
Due to the assumption of complete control over ob-
jects, a security namespace may have an opinion about
an operation even if the subject of the operation is not
under its control. Only in this way can a security names-
pace ensure that there are no unexpected operations over
the objects that its subjects may ever access. As a result,
theoretically, the Operation Router needs to account for
the object’s perspective by routing an operation to all se-
curity namespaces whose subjects may ever access the
object of the operation to ensure that all their security
2Mandatory assumption also implies that subjects should not per-
form any additional operations that are not allowed by the policy. But
it is already covered by the subject’s perspective.
USENIX Association
27th USENIX Security Symposium    1429
expectations are met.
To decide if an object may ever be accessed by sub-
jects of a security namespace,
the Operation Router
leverages the resource visibility deﬁned by the resource
namespaces (e.g., mount, network and etc.). The re-
source namespaces deﬁne the visibility of subjects to ob-
jects. As long as an object is visible to subjects of a se-
curity namespace, it may be accessed by those subjects.
5.3 Shared Objects and Authority
Since security namespaces implicitly assume complete
control over objects that they may access, ideally each
security namespace is coupled with its own resource
namespaces therefore having its own isolated sets of ob-
jects. However, in practice, certain objects can be ac-
cessed by multiple security namespaces. For example,
the /proc and /sys ﬁlesystems and the objects on
them are often shared among different containers on a
host. Such sharing may lead to two practical issues.
First, due to the whitelist nature of security policy, a se-
curity namespace allows only its own operations over the
object and naturally denies operations from other secu-
rity namespaces that share access to the object. This re-
sults in an unusable system. Second, if the Operation
Router routes one security namespace’s operation to an-
other security namespace due to that they share access to
an object, it may become a privacy breach. For example,
a container may not want its operation over /proc to be
known to another container.
To address this practical concern, we have to adjust
policy language of existing security frameworks to make
the implicit mandatory assumption explicit. We intro-
duce two new decorators to the policy language, author-
ity and external. In a security policy, if a security names-
pace declares authority over an object, its policy over the
object becomes mandatory—all the operations over the
object, either from subjects associated with the security
namespace or other security namespaces, will be routed
to the security namespace for mediation. In contrast, if a
security namespace does not have authority declared for
an object in its security policy, the policy over the object
will only be locally effective, meaning that the security
namespace will not be able to control how subjects from
other security namespaces access the object. The goal
of the authority decorator is to let security namespaces
explicitly declare their mandatory assumption.
The external decorator is used along with the authority
decorator. When a security namespace declares author-
ity over an object, it may deﬁne security policies for sub-
jects that are invisible to the security namespace (i.e., as-
sociated with other security namespaces). Such invisible
subjects are decorated with keyword external in the secu-
rity policy. A security namespace will assign access per-
missions to external decorated subjects just like its own
Figure 5: Security namespace graph.
subjects, but all external decorated subjects will have the
same permissions because they are indistinguishable to
the security namespace. For example, when protecting
a read-only ﬁle using a lattice policy, a security names-
pace can assign invisible subjects with integrity label {a}
and the ﬁle with integrity label {a, b} to ensure read-
onlyness. However, label {a} will be universal for all
the invisible subjects of the security namespace, because
from the security namespace’s perspective, those sub-
jects are invisible therefore indistinguishable.
To prevent a security namespace from arbitrarily
declaring authority therefore launching denial of service
attacks to other security namespaces, the ability to de-
clare authority is tightly controlled by the system. We
use a capability-like model where the ability to declare
authority over an object is treated like a capability. When
an object is created, the security namespace that creates
the object is granted the capability. It may use the ca-
pability, by declaring the authority in its security policy,
or delegate the capability to other security namespaces.
In practice, the delegation often happens between parent
and child security namespaces.
5.4 Routing Algorithm
Combining the two perspectives and the practical con-
straint, we can then deﬁne a routing algorithm for the Op-
eration Router that meets our goal: given an operation,
all security namespaces that may have an opinion about
an operation are made aware of the operation. The algo-
rithm is constructed around two data structures, namely
a security namespace graph and an object authority table
which are maintained and updated in the kernel while
new security namespaces are being created and security
policies are being loaded.
A security namespace graph is a graph that main-
tains the  and  mappings. It has two types of vertices as
shown in Figure 5. One type of vertices are the subjects
and another type of vertices are the security namespaces.
An undirected edge connects the two. Between secu-
rity namespace vertices, there is a directed edge, pointing
1430    27th USENIX Security Symposium
USENIX Association
P0P1P2P3NSnativeNS1NS2subject s and object o, security namespace graph G, object
Input:
authority table T
Output: set of security namespaces Φ
1: Φ ←native
(cid:46) Native is the ancestor for any security namespace
2: n ←CURRENT(s, G) (cid:46) Get the namespace that s is associated with
3: while n (cid:54)= native do
(cid:46) Recursively add all n’s ancestors
Φ ← Φ∪ n
4:
n ←GET PARENT(n, G)
5:
6: Φ ← Φ∪AUTHORITY(o, T )
(cid:46) Get namespaces that declared
authority over o
7: return Φ
Figure 6: An algorithm for routing an operation to
security namespaces who may have an opinion about
the operation.
from the child to its direct parent3. The security names-
pace graph captures the subject’s perspective when the
Operation Router routes an operation.
Another data structure is the object authority table.
An object authority table maintains the mapping between
an object to the corresponding security namespaces that
have the capability to declare authority over the object. It
also maintains the information of whether or not the se-
curity namespace actually declared the authority in its se-
curity policy. The object authority table is updated when
a new object (e.g., inode) is created within the kernel and
when new authority delegation happens. The object au-
thority table helps capture the object’s perspective under
the practical constraint when the Operation Router routes
and operation.
Using these two data structures, we deﬁne the routing
algorithm as shown in Figure 6. The algorithm takes as
input the subject and object of an operation, and produces
a set of security namespaces that need to be made aware
of the operation. At the high level, the algorithm works
as the follows: it ﬁrst recursively add the current security
namespace that the subject runs in and all its ancestors
security namespaces (down to the native) into the output
set. Then it ﬁnds all the security namespaces that hold
authority over the object and adds them to the output set.
6 Policy Engine
The goal of Policy Engine is to detect policy conﬂicts
at policy load time. Policy conﬂicts would result in dif-
ferent security decisions, where an operation allowed by
a security namespace is denied by another. Such denial
often cannot be debugged at runtime, as security names-
paces are isolated from each other. This may affect the
practical usability of the security namespace abstraction,
considering a containerized application can fail unex-
pectedly. To address this concern, our insight is to move
3The parent and child relationship is deﬁned with respect to the
subjects. If subjects of a security namespace are forked from subjects
of another security namespace, then the two security namespace has a
parent and child relationship.
Figure 7: Four types of policy conﬂicts. Existing and
new security namespaces are separated by the dashed
line. Conﬂicting policies are marked in red.
the conﬂict detection to policy load time and inform re-
spective parties of the potential conﬂicts. The conﬂicting
party may revise her security policy to avoid conﬂicts, or
continue using the system but be aware of the potential
conﬂicts, or abort using the system as the system cannot
meet her expectations. The Policy Engine detects two
types of conﬂicts: DoS conﬂicts and expectation con-
ﬂicts. We discuss them separately in this section.
6.1 DoS Conﬂicts
When a security namespace loads its security policy, if
its subjects might be denied of performing an operation
by other security namespaces on the system, we call it
denial of service conﬂicts (DoS conﬂicts). The name
comes from the fact that the operation will be eventu-
ally denied (after intersecting all security decisions) even
though policy of the security namespace explicitly allows
the operation.
There are two types of DoS conﬂicts, corresponding
to the subject’s and object’s perspective of the operation
routing. The ﬁrst type is the ancestor-descendant con-
ﬂict, where a descendant security namespace’s policy vi-
olates its ancestors’, as shown in Figure 7(a). Recall from
Section 5.1, a subject is under control of its own secu-
rity namespace and all its ancestors. Thus a DoS conﬂict
may arise if the descendant loads a policy that allows an
operation but its ancestors would deny it. The second
type of conﬂict is the global-local conﬂict, where a secu-
rity namespace’s security policy violates an authoritative
one, as shown in Figure 7(b).
In this case, a security
namespace loads a policy that allows an operation over
an object (i.e., local), but the operation would be denied
by other security namespaces that hold authority over the
object (i.e., global).
The Policy Engine detects DoS conﬂicts using a con-
ﬂict detection algorithm, as shown in Figure 8. At a high
USENIX Association
27th USENIX Security Symposium    1431
SNSpNSc( Policy—>Allow )( Policy—>Deny )SNS1NS2( Policy—>Allow )( Authority)( Policy—>Deny )SNS1( Policy—>Allow )NS2SNS1NS2( Declare Authoritywithout capability)( Policy—>Allow )( Authority)( Policy—>Deny )(a) Parent-Child Conﬂict(b) Global-Local Conﬂict(c) Lack of Authority(d) Environment does not meet expectation considered
Input: set of existing security policies S, new security policy s
Output: set of conﬂicting rules Φ
1: Φ ← /0
2: S(cid:48) ←ROUTING ALG(S)
3: Po ←PERMISSIONS(S(cid:48))
4: Pn ←PERMISSIONS(s)
5: if Pn (cid:54)⊆ Po then
6:
7: return Φ
Φ ←CONFLICTING RULES(Po, Pn)
(cid:46) Set of policies that need to be