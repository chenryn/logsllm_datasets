# 03 案例篇：如何处理Page Cache难以回收导致的系统负载过高问题

大家好，我是邵亚方。今天我们将探讨在生产环境中因Page Cache管理不当而引发的系统负载（load）过高的问题。相信不少人在工作中遇到过类似的情况：系统响应迟缓、命令执行缓慢；应用程序的响应时间（RT）显著增加或出现剧烈波动。这些问题通常伴随着系统负载的急剧上升。

根据我的观察，这类问题主要有以下三种情况：
1. 直接内存回收导致的高负载。
2. 系统中积累过多脏页引发的高负载。
3. NUMA策略配置错误造成的高负载。

这些问题看似简单，但如果对其背后的原因理解不够深入，则会变得非常棘手，并且错误的配置还可能带来负面效果。因此，本节课我们将逐一分析这三种情形，帮助大家更好地理解和解决此类问题。对于那些对故障排查感兴趣的读者，请不要着急，在第5讲中，我将详细介绍如何分析负载过高的问题。

## 直接内存回收引起的负载过高

直接内存回收是指在进程上下文同步进行的内存回收过程。当进程申请内存时，如果当前可用内存不足，系统就会启动同步内存回收以释放更多空间。这一过程可能会消耗大量时间，从而导致后续操作被阻塞，进而引起长时间延迟和CPU使用率升高，最终导致系统负载激增。

为简化说明，这里用一张图来展示整个流程：

![](https://static001.geekbang.org/resource/image/fe84eb2bd4956bbbdd5b0259df8c9400.jpg)

从图中可以看出，首先尝试通过后台异步方式回收内存（图中标记为蓝色的部分），该步骤不会造成任何延迟。然而，一旦后台回收无法跟上内存分配的速度，系统便会转而采用同步阻塞式回收（红色和粉色标记部分），这就是导致高负载的主要原因。

针对这种情况，一个有效的解决方案是尽早触发后台回收机制，避免应用程序进入直接内存回收阶段。具体实现方法如下：

### 后台回收原理
![](https://static001.geekbang.org/resource/image/44d471fdae7376eb13e6e6bfc70b3172.jpg)

当系统内存水位低于`watermark low`时，内核将唤醒`kswapd`线程来进行后台回收，直到达到`watermark high`为止。

### 解决方案
可以通过增大`min_free_kbytes`参数值来提前触发后台回收。例如，在拥有128G以上物理内存的系统上设置`min_free_kbytes=4194304`（即4GB）是一个合理的经验值。不过需要注意的是，这个值与总物理内存之间并没有严格的对应关系，调整时应采取逐步递增的方法并密切监控`sar -B`输出中的`pgscand`字段是否仍有非零值出现。此外，即便设置了较大的`min_free_kbytes`值，仍有可能存在`pgscand`不为零的情形，这通常与内存碎片有关。

对于运行较旧版本内核（如CentOS-6对应的2.6.32版）的系统，可以考虑启用`extra_free_kbytes`选项作为替代方案。虽然此功能在新版本内核中已被废弃，但由于许多老旧设备仍在使用这些版本，因此仍然值得了解其工作原理。

总之，通过适当调整内存水位可以在一定程度上缓解直接内存回收带来的负面影响，但同时也意味着一定程度上的资源浪费。因此，在做出决定之前，需要权衡应用程序对延迟敏感度与内存利用率之间的平衡点。

## 脏页积压过多导致的负载过高

接下来讨论由于脏页数量过多而导致系统负载升高的问题。当直接内存回收过程中遇到大量待写入磁盘的数据页时，特别是当目标存储介质速度较慢（如HDD或某些网络存储设备）时，将会产生极大的延迟。此时，不仅正在进行写回操作的进程会被阻塞，其他依赖于这些数据的应用程序也会受到影响，进一步推高整体负载。

解决该类问题的关键在于合理控制脏页的数量。用户可通过`sar -r`命令查看系统中脏页的具体数值，并据此调整相关参数如`dirty_background_bytes`、`dirty_ratio`等，使其保持在一个适宜范围内。同样地，这种调整也需谨慎行事，既要防止脏页堆积过多引发性能瓶颈，也要避免过于频繁地刷新数据到磁盘从而降低I/O效率。

## NUMA策略配置不当引发的负载过高

最后一种常见情景是由NUMA架构下节点间内存访问策略不当所引起的高负载现象。例如，开启了`zone_reclaim_mode`选项后，即使其他节点尚有空闲内存可用，系统仍会在本地节点上强行回收页面缓存，从而增加了不必要的开销。鉴于多数现代应用对NUMA亲和性要求不高，建议将其关闭以减少潜在风险。

通过`numactl --hardware`命令可以获取服务器的NUMA拓扑信息，并据此评估是否存在跨节点访问的问题。如果确认存在此类状况，则应将`vm.zone_reclaim_mode`设为0，以禁止不必要的节点内部回收行为。

### 总结
综上所述，我们介绍了几种常见的由Page Cache管理不当而引起的系统负载过高问题及其应对策略。希望各位能够从中获得启发，在面对类似挑战时不再感到迷茫。当然，除了上述措施外，定期审视系统的各项配置项也是非常重要的，因为恰当的设置往往能够在很大程度上提升整体性能表现。如果你有任何想法或者实践心得，欢迎在评论区留言分享！感谢阅读，期待下次再见。