          // Smis can be stored with any elements kind.
        } else if (values_all_numbers) {
          elements_kind = GetMoreGeneralElementsKind(
              elements_kind, IsHoleyElementsKind(elements_kind)
                                 ? HOLEY_DOUBLE_ELEMENTS
                                 : PACKED_DOUBLE_ELEMENTS);
        } else if (values_any_nonnumber) {
          elements_kind = GetMoreGeneralElementsKind(
              elements_kind, IsHoleyElementsKind(elements_kind) ? HOLEY_ELEMENTS
                                                                : PACKED_ELEMENTS);
        } else if (!can_inline_call) {
          // We have some crazy combination of types for the {values} where
          // there's no clear decision on the elements kind statically. And
          // we don't have a protection against deoptimization loops for the
          // checks that are introduced in the call to ReduceNewArray, so
          // we cannot inline this invocation of the Array constructor here.
          return NoChange();
        }
        return ReduceNewArray(node, values, *initial_map, elements_kind, allocation,
                              slack_tracking_prediction);
从分析中可以看出，该标记将影响`Array(1)`这个函数在JIT编译时是否会被内联优化。
####  IR图分析
首先，我们的测试代码如下，需要知道的一点是`Array.prototype.map`内部会调用`JSCreateArray`来创建新数组存放结果
    //将can_inline_array_constructor设置为false
    Array(2**30);
    function opt() {
       var a = [1,2,3];
       var b = a.map((value,index) => {
          return value;
       });
       return b;
    }
    for (var i=0;iLoadField(AccessBuilder::ForJSArrayLength(kind)), receiver,
           effect, control);
    +  // If the array length >= kMaxFastArrayLength, then CreateArray
    +  // will create a dictionary. We should deopt in this case, and make sure
    +  // not to attempt inlining again.
    +  original_length = effect = graph()->NewNode(
    +      simplified()->CheckBounds(p.feedback()), original_length,
    +      jsgraph()->Constant(JSArray::kMaxFastArrayLength), effect, control);
    +
       // Even though {JSCreateArray} is not marked as {kNoThrow}, we can elide the
       // exceptional projections because it cannot throw with the given parameters.
       Node* a = control = effect = graph()->NewNode(
该patch用于修复漏洞，patch位于`src/compiler/js-call-reducer.cc`文件中的`JSCallReducer::ReduceArrayMap`函数，该函数是对`Array.prototype.map`函数进行优化的，patch中主要增加了一个对`源数组的长度`进行检查，检查其是否大于`kMaxFastArrayLength`，因为添加的是一个`CheckBounds`节点，所以如果大于的话将`deoptimization
bailout`从而不使用其生成的JIT代码。  
我们来分析一下代码
      Node* original_length = effect = graph()->NewNode(
          simplified()->LoadField(AccessBuilder::ForJSArrayLength(kind)), receiver,
          effect, control);
      // 根据original_length，调用JSCreateArray创建一个新数组
      Node* a = control = effect = graph()->NewNode(
          javascript()->CreateArray(1, MaybeHandle()),
          array_constructor, array_constructor, original_length, context,
          outer_frame_state, effect, control);
      Node* checkpoint_params[] = {receiver, fncallback, this_arg,
                                   a,        k,          original_length};
      const int stack_parameters = arraysize(checkpoint_params);
      // 检查map的回调函数是否可用，如果可以，就进行调用
      Node* check_frame_state = CreateJavaScriptBuiltinContinuationFrameState(
          jsgraph(), shared, Builtins::kArrayMapLoopLazyDeoptContinuation,
          node->InputAt(0), context, &checkpoint_params[0], stack_parameters,
          outer_frame_state, ContinuationFrameStateMode::LAZY);
      Node* check_fail = nullptr;
      Node* check_throw = nullptr;
      WireInCallbackIsCallableCheck(fncallback, context, check_frame_state, effect,
                                    &control, &check_fail, &check_throw);
      // 调用回调函数生成映射值
      Node* vloop = k = WireInLoopStart(k, &control, &effect);
      Node *loop = control, *eloop = effect;
      checkpoint_params[4] = k;
      Node* continue_test =
          graph()->NewNode(simplified()->NumberLessThan(), k, original_length);
      Node* continue_branch = graph()->NewNode(common()->Branch(BranchHint::kNone),
                                               continue_test, control);
      Node* if_true = graph()->NewNode(common()->IfTrue(), continue_branch);
      Node* if_false = graph()->NewNode(common()->IfFalse(), continue_branch);
      control = if_true;
      Node* frame_state = CreateJavaScriptBuiltinContinuationFrameState(
          jsgraph(), shared, Builtins::kArrayMapLoopEagerDeoptContinuation,
          node->InputAt(0), context, &checkpoint_params[0], stack_parameters,
          outer_frame_state, ContinuationFrameStateMode::EAGER);
      effect =
          graph()->NewNode(common()->Checkpoint(), frame_state, effect, control);
      // Make sure the map hasn't changed during the iteration
      effect =
          graph()->NewNode(simplified()->CheckMaps(CheckMapsFlag::kNone,
                                                   receiver_maps, p.feedback()),
                           receiver, effect, control);
      Node* element =
          SafeLoadElement(kind, receiver, control, &effect, &k, p.feedback());
      Node* next_k =
          graph()->NewNode(simplified()->NumberAdd(), k, jsgraph()->OneConstant());
      Node* hole_true = nullptr;
      Node* hole_false = nullptr;
      Node* effect_true = effect;
      if (IsHoleyElementsKind(kind)) {
        // 跳过无值的空洞
        Node* check;
        if (IsDoubleElementsKind(kind)) {
          check = graph()->NewNode(simplified()->NumberIsFloat64Hole(), element);
        } else {
          check = graph()->NewNode(simplified()->ReferenceEqual(), element,
                                   jsgraph()->TheHoleConstant());
        }
        Node* branch =
            graph()->NewNode(common()->Branch(BranchHint::kFalse), check, control);
        hole_true = graph()->NewNode(common()->IfTrue(), branch);
        hole_false = graph()->NewNode(common()->IfFalse(), branch);
        control = hole_false;
        // The contract is that we don't leak "the hole" into "user JavaScript",
        // so we must rename the {element} here to explicitly exclude "the hole"
        // from the type of {element}.
        element = effect = graph()->NewNode(
            common()->TypeGuard(Type::NonInternal()), element, effect, control);
      }
      // This frame state is dealt with by hand in
      // ArrayMapLoopLazyDeoptContinuation.
      frame_state = CreateJavaScriptBuiltinContinuationFrameState(
          jsgraph(), shared, Builtins::kArrayMapLoopLazyDeoptContinuation,
          node->InputAt(0), context, &checkpoint_params[0], stack_parameters,
          outer_frame_state, ContinuationFrameStateMode::LAZY);
      Node* callback_value = control = effect = graph()->NewNode(
          javascript()->Call(5, p.frequency()), fncallback, this_arg, element, k,
          receiver, context, frame_state, effect, control);
      // Rewire potential exception edges.
      Node* on_exception = nullptr;
      if (NodeProperties::IsExceptionalCall(node, &on_exception)) {
        RewirePostCallbackExceptionEdges(check_throw, on_exception, effect,
                                         &check_fail, &control);
      }
      // The array {a} should be HOLEY_SMI_ELEMENTS because we'd only come into this
      // loop if the input array length is non-zero, and "new Array({x > 0})" always
      // produces a HOLEY array.
      MapRef holey_double_map =
          native_context().GetInitialJSArrayMap(HOLEY_DOUBLE_ELEMENTS);
      MapRef holey_map = native_context().GetInitialJSArrayMap(HOLEY_ELEMENTS);
      //将值存入数组
      effect = graph()->NewNode(simplified()->TransitionAndStoreElement(
                                    holey_double_map.object(), holey_map.object()),
                                a, k, callback_value, effect, control);
      if (IsHoleyElementsKind(kind)) {
        Node* after_call_and_store_control = control;
        Node* after_call_and_store_effect = effect;
        control = hole_true;
        effect = effect_true;
        control = graph()->NewNode(common()->Merge(2), control,
                                   after_call_and_store_control);
        effect = graph()->NewNode(common()->EffectPhi(2), effect,
                                  after_call_and_store_effect, control);
      }
      WireInLoopEnd(loop, eloop, vloop, next_k, control, effect);
      control = if_false;
      effect = eloop;
      // Wire up the branch for the case when IsCallable fails for the callback.
      // Since {check_throw} is an unconditional throw, it's impossible to
      // return a successful completion. Therefore, we simply connect the successful
      // completion to the graph end.
      Node* throw_node =
          graph()->NewNode(common()->Throw(), check_throw, check_fail);
      NodeProperties::MergeControlToEnd(graph(), common(), throw_node);
      ReplaceWithValue(node, a, effect, control);
      return Replace(a);
    }
以上代码看似没有什么问题，但忽略了`JSCreateArray`的一个特性，如果要申请的大小大于某个阈值（`0x2000000`），那么其返回的对象，其`Element`不再是数组类型，而是`Dictionary`类型，测试代码
    var a = Array(0x2000001);
    %DebugPrint(a);
    DebugPrint: 0x19c022c0dbf1: [JSArray]
     - map: 0x3427e398a9f9  [FastProperties]
     - prototype: 0x1e11fad11081 
     - elements: 0x19c022c0dc11  [DICTIONARY_ELEMENTS]
     - length: 33554433
     - properties: 0x342395d80c21  {
        #length: 0x3538bdb001a9  (const accessor descriptor)
     }
     - elements: 0x19c022c0dc11  {