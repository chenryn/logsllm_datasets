properties.
We measured the number of constraints Passe inferred for
each application (Fig. 7). Additionally, we characterized
higher-level policies by inspecting constraints by hand,
discovering that Passe successfully Ô¨Ånds 96% of the 105
possible application policies. Because we characterized these
policies by hand, we cannot eliminate the possibility that we
incorrectly characterized or left out policies.
D. Fetch-before-Check Problems
It is important to understand the scenarios in which Passe
can miss an application policy. In all of the applications tested,
Passe missed four application policies (out of 105 total poli-
cies): one in each of the simplewiki, django-articles,
django-profiles, and the django-forum applications. In
all four cases, the application code fetched a data object
before evaluating a permission check. The simplewiki
application, for example, performed read permission checks
only after fetching wiki pages from the database. While this
behavior poses no conÔ¨Ådentiality problem if the application
is never compromised, it is clearly not enforceable by Passe.
This breaks Passe‚Äôs assumption that the normal behavior
of the system does not leak information. (Still, such an
implementation can be dangerous from a security perspective:
143
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
Even when not compromised, the application fetches data
even when permission is denied, which may expose the
database to a denial-of-service attack if the fetched content
may be sizable.)
This behavior can be quickly remedied, however. We Ô¨Åxed
Passe‚Äôs missed inferences by moving the permission checks
to precede the data queries. In each of these applications,
these changes required modifying fewer than 20 lines of
code.
E. Case Studies
Social News Platform: social-news is a Django
application which provides the functionality of a social news
service like Hacker News or Reddit. Users can submit stories
to one of many user-created topics and each of these stories
supports a comment section. Users vote an item up or down,
and the Ô¨Ånal count of votes determines an item‚Äôs score. A
recommendation system then uses these votes to suggest
other stories which a user might like.
The social-news application contains three queries
which need to be modiÔ¨Åed for the application to run
with Passe. The application constructs these queries using
string replacement to insert arguments rather than using
SQL argument passing. This is known to be a less safe
programming practice, as it can expose applications to SQL
injection attacks. However, in Passe, such bugs cause an
application to fail safely, as Passe will simply deny the
constructed queries which it does not recognize. In order
for the application to run correctly, 5 lines of code were
modiÔ¨Åed so that query arguments were passed correctly.
With these changes, Passe correctly Ô¨Ånds and enforces 17
policies for the application. Most of these are data integrity
policies. For example, only the author of a post is authorized
to change the content of that post. However, the post‚Äôs score is
an aggregation of other users‚Äô votes and each user is allowed
to contribute only one vote to this score. Passe captures
this by constraining the queries which log the votes, and
the queries which tally those votes. Constraints are applied
on the up-vote and down-vote views. These views issue
an insertion query which puts a new row into a link vote
table, or an update query which changes the direction of the
vote. Passe ensures that these queries are associated with the
current user, and a database uniqueness constraint ensures that
only one row exists per user. The application then updates the
score Ô¨Åeld of the news item by issuing a COUNT query and
a subsequent UPDATE query. Passe ensures that the updated
score value is exactly the result of the associated count query.
CMS Platform: django-articles, one of the appli-
cations we tested on Passe, provides a simple CMS platform
that allows users to create and manage a blog. New articles
can be added with a web interface, and it supports multiple
authors, article groups, and static pages.
This CMS application, like many Django applications,
includes and relies on the django-admin module. This
module provides a full-featured interface for modifying,
adding, and deleting models in any application. To support
any signiÔ¨Åcant set of Django applications, Passe must support
the admin module, and it does. Passe is able to infer strong
constraints for this module. The admin module makes calls
to Django‚Äôs permissions library, and Passe infers control-Ô¨Çow
constraints based on those calls. In the case of the CMS
platform, the Passe proxy requires that a view present a token
possessing the ‚ÄúArticle.add‚Äù permission to add a new article
to the database.
Passe additionally enforces integrity constraints on queries
creating and modifying blog posts. In particular, Passe
requires that a new post‚Äôs author matches the current user
and that the content of that article matches the user‚Äôs request
variables. Passe ensures that a user is allowed to post articles
by checking that user‚Äôs coarse permission set.
Web Forum: We also tested a simple forum library
django-forum under Passe. This application allows devel-
opers to run an online forum, which supports user accounts,
user groups, and multiple forums with display permissions.
To support creating new groups and forums, the application
uses the default django-admin interface.
django-forum supports linking particular forums to user
groups, such that a given forum is hidden to and cannot be
modiÔ¨Åed by users outside of that group. In the application,
this access control is implemented by (i) retrieving the set
of groups for the current user, (ii) issuing queries both to
fetch those forums with a matching group and those with
a public (null) group, and (iii) fetching all threads to those
forums. Note that the application never explicitly declares
the policy that users should only be able to see threads in
their groups; it is only implicit in the application‚Äôs execution.
Passe makes this policy explicit, and it is enforced by the
database proxy as a data-Ô¨Çow dependency (Figure 8).
The django-forum application also provides an example
of a control-Ô¨Çow constraint. Before adding discussion threads
to a forum, a view checks whether the current user has access
to the forum. This check involves a SQL query which fetches
the set of allowable users, and then, in Python, the view
checks whether the current user is in that set. If the user
has access, the view fetches the appropriate forum‚Äôs ID, and
uses this ID as an argument for creating a new thread.
In this example, the Ô¨Årst query is a control-Ô¨Çow dependency.
Later queries do not have arguments reÔ¨Çecting its return
values, and thus these three queries do not form a data-
Ô¨Çow dependency. However, the Passe analyzer correctly
determines that the Ô¨Årst query, along with the current user,
has tainted the control-Ô¨Çow, and infers a constraint that the
current user must be contained within the set of allowable
users for the second and third queries to be executed.
144
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
SQL0:
SELECT forum ... WHERE group in user. groups
and user.id == y
DATA -FLOW CONSTRAINT : y = (current_user )
SQL1
SELECT forum ... WHERE group == NULL
SQL2:
SELECT thread ... WHERE id == x
DATA -FLOW CONSTRAINT : x = (SQL0.ID OR SQL1.ID)


	












Figure 8: django-forum executes three SQL statements to retrieve the
accessible threads for the current user. SQL2 is restricted to only return
threads from forums discovered in SQL1 or SQL0. These assertions chain
these queries together, enforcing their data-Ô¨Çow relationship.


 
  

 	 
  
 

  
 
  
 
  
 
  
 




















F. Common Web Vulnerabilities and Their Effects on Passe
Though Passe protects against more general exploits,
it is important to understand how various common web
vulnerabilities are relevant to Passe and its protections.
SQL Injection. For the purposes of Passe, SQL Injection
attacks are mitigated by the use of Django, which strongly
encourages developers to issue queries using separate query
strings and query arguments. For applications which do not
use this argument passing method, Passe will prevent these
from causing SQL injection vulnerabilities. This is because
Passe‚Äôs database proxy expects that the only parts of a query
allowed to change are the arguments to the SQL query. If
the query changes from string manipulation rather than SQL
argument passing, then the query will no longer be recognized
as the "same" query witnessed during training, and Passe‚Äôs
proxy will reject the query. This requires that the developer
change their application and adopt the preferred approach.
Cross-Site Request Forgery. Django mitigates CSRF
attacks by requiring forms to carry CSRF tokens, which
are used to check that requests came from a legitimate web
request. If an attacker compromises a view, they can always
forgo this protection for that particular view. Worse, however,
this attacker may be able to steal CSRF tokens and use them
for other views. To mitigate this attack, we can associate
CSRF tokens with particular views, and thus prevent a view
compromise from affecting other views.
Click Jacking. An attacker may attempt to load web pages
secured by Passe in a HTML frame and maliciously access
the page using Javascript. In order to prevent this attack
both from external sites, and from an internal view which an
attacker has compromised, Passe adds the X-Frame-Options
header to all outgoing responses. This prevents the web page
from being displayed inside of a frame.
Figure 9: Request latency to access home page of applications. Error bars
indicate the 90th and 10th percentiles. The black line represents the number
of queries each view issues per request.
























	



 


 	 
  
 
  

  
 
  
 
  
 
  
 















Figure 10: Mean throughput of applications running in Passe and Django
over Ô¨Åve trials (error bars show stddev). Each trial involves 8K requests. The
black line represents the number of queries each view issues per request.
and Passe do not require many of the features of Apache,
lighter-weight servers such as Gunicorn may be used. Our
test server had 2 Intel Xeon E5620 CPUs, with 4 cores
each clocked at 2.40GHz. Because Passe‚Äôs database proxy
pools database connections, in order to fairly compare the
throughput with plain Django, the plain Django version
used pgpool for connection pooling. (Without pgpool, Passe
outperformed vanilla Django in throughput measurements.)
In order to understand Passe‚Äôs performance on real
applications, we examine performance on the case study
applications we detailed earlier. Further, to explore the base
overhead Passe imposes on simple applications, we developed
a benchmark application that immediately renders a response
from memory without using the database.
A. Latency and Throughput
VIII. PERFORMANCE EVALUATIONS
To evaluate the performance of Passe, we ran three
applications in Django and Passe, measuring the time to
fetch each application‚Äôs home page. Our testing system
used Gunicorn 0.15 to dispatch web requests through WSGI,
PostgreSQL 8.4 as the backing database, Python 2.7, and
Ubuntu 11.04. Gunicorn is the default Python HTTP server on
popular hosting platforms such as Heroku. Because Django
We measured latency of requests by repeatedly fetching
application pages with a single user on the JMeter benchmark-
ing platform. Figure 9 plots the latencies of 1000 requests.
While Passe‚Äôs latency overhead of 5-13 ms is not insigniÔ¨Åcant,
applications and service providers often target much larger
end-to-end latencies, e.g., Amazon cites 300 ms as their
desired 99.9% latency for requests [19]. In comparison,
Passe‚Äôs overhead is not an excessive burden.
145
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
(cid:28)(cid:29)(cid:20)(cid:21)(cid:30)(cid:10)
(cid:31)(cid:20)(cid:15)(cid:15)(cid:19)(cid:1)(cid:32)(cid:33)(cid:18)(cid:19)
(cid:31)(cid:20)(cid:15)(cid:15)(cid:19)(cid:1)(cid:34)(cid:21)(cid:33)(cid:19)(cid:11)(cid:1)(cid:35)(cid:10)(cid:20)(cid:33)
(cid:27)
(cid:26)
(cid:23)
(cid:25)
(cid:1)
(cid:24)