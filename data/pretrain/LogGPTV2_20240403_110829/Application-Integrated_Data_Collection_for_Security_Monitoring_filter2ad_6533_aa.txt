title:Application-Integrated Data Collection for Security Monitoring
author:Magnus Almgren and
Ulf Lindqvist
Application-Integrated Data Collection for
Security Monitoring(cid:1)
Magnus Almgren and Ulf Lindqvist
System Design Laboratory, SRI International
333 Ravenswood Ave, Menlo Park CA 94025, USA
{almgren,ulf}@sdl.sri.com
Abstract. This paper describes a new approach to collecting real-time
transaction information from a server application and forwarding
the data to an intrusion detection system. While the few existing
application-based intrusion detection systems tend to read log ﬁles, the
proposed application-integrated approach uses a module coupled with
the application to extract the desired information. The paper describes
the advantages of this approach in general, and how it complements
traditional network-based and host-based data collection methods. The
most compelling beneﬁt is the ability to monitor transactions that
are encrypted when transported to the application and therefore not
visible to network traﬃc monitors. Further beneﬁts include full insight
into how the application interprets the transaction, and data collection
that is independent of network line speed. To evaluate the proposed
approach, we designed and implemented a data-collection module for
the Apache Web server. Our experiments showed that the required
implementation eﬀort was moderate, that existing communication and
analysis components could be used without incurring adaptation costs,
and that the performance impact on the Web server is tolerable.
Keywords: Intrusion detection, application, application-integrated,
module, Web server, Apache.
1 Introduction
Intrusion detection systems (IDSs) can be categorized with respect to several
diﬀerent dimensions, of which the commonly used (but somewhat oversimpliﬁed)
dichotomy between misuse detection and anomaly detection is one example.
Another dimension for categorization is the type of event data analyzed by the
IDS. An IDS that monitors traﬃc ﬂowing in a network is usually called network
based, while an IDS that analyzes data produced locally at a host is often referred
to as host based.
(cid:1) The work described here is currently funded by DARPA/ATO under contract num-
ber F30602-99-C-1049 and contract number F30602-98-C-0059. The views herein
are those of the author(s) and do not necessarily reﬂect the views of the supporting
agency.
W. Lee, L. M´e, and A. Wespi (Eds.): RAID 2001, LNCS 2212, pp. 22–36, 2001.
c(cid:1) Springer-Verlag Berlin Heidelberg 2001
Application-Integrated Data Collection for Security Monitoring
23
We subdivide the host-based category further, depending on the abstraction
level at which data is collected. Most existing host-based systems gather audit
data at the operating system (OS) system-call level, but an IDS could get its
data from higher as well as lower abstraction levels. Below the OS level, we
could, for example, look at the executed processor instructions. Above the OS
level, we could collect data from service applications such as database manage-
ment systems, Web servers or e-mail daemons, or from end-user applications. As
diﬀerent types of security violations manifest themselves on diﬀerent levels in a
system, one could argue that it is important for the IDS to collect data at the
most meaningful abstraction level(s) for the event in question. It should be kept
in mind that independent of the type of data collected, it can be sent to any
type of analysis engine (e.g., signature based, model based, probabilistic).
In this paper, we focus on collection of data produced by applications (above
the OS level) and refer to an IDS analyzing such data as application based. Al-
though the concept of application-based IDS is not new, there is a striking ab-
sence of commercial IDSs for applications other than ﬁrewalls [6]. The approach
presented in this paper shows how the data collection for an application-based
IDS can be integrated with the monitored application.
The remainder of this paper is organized as follows. Section 2 discusses lim-
itations of network-based and host-based IDSs, respectively. In Section 3, we
present our application-integrated approach, and discuss its advantages and how
it complements the other methods. Section 4 describes an implementation for a
Web server to validate our reasoning. In Section 5, we examine the performance
characteristics of the implementation. Section 6 describes related work, while
ideas for future work are outlined in Section 7. Our conclusions are summarized
in Section 8.
2 Background
Many researchers have recognized that there is no single “silver bullet” ap-
proach to automatic detection of security violations. By combining and inte-
grating complementary approaches, better attack space coverage and accuracy
can be achieved. In this section, we look at some speciﬁc problems with the
network-based and host-based approaches, respectively.
2.1 Network-Based Data Collection
The popularity of Ethernet technology paved the way for network-based IDSs.
When traditional broadcast Ethernet is used, a whole cluster of computers can
be monitored from a dedicated machine that listens to all the traﬃc. As no
changes in the infrastructure are required, and there is no performance penalty,
most free and commercial IDSs use this approach. The system can be completely
hidden by having a network card that listens to the network but never transmits
any traﬃc itself. However, by decoupling the system from the actual hosts it
supervises, we lose valuable information.
24
M. Almgren and U. Lindqvist
First, probably the most serious problem with the network-based approach
is encrypted traﬃc, which in eﬀect makes the network monitor blind to many
attacks. Today, encryption is typically used to protect the most sensitive data,
and there are indications that encryption will become more ubiquitous in the
near future, making today’s network-based monitors ineﬀective.1
Second, the IDS can be deceived in several ways. Most Internet standards
in the form of RFCs carefully deﬁne valid protocol syntax, but do not describe
in detail how the application should behave with deviant data. To be accu-
rate, the IDS needs to model how the application interprets the operations, but
this is almost an impossible task without receiving feedback from the applica-
tion. Minor diﬀerences in operations play a major role in how they are inter-
preted. For example, consider a user requesting a certain Web page, by sending
http://www.someHost.com/dir1\file1 (note the backslash character). If the
receiving Web server is Microsoft-IIS/5.0 under Microsoft Windows, the server
looks for the ﬁle file1 in the directory dir1. However, if the server is Apache
version 1.3.6 under Unix, the server looks for a ﬁle named dir1\file1 in the root
directory. Even if an IDS could model the diﬀerent popular servers, it cannot
account for every implementation diﬀerence in every version of these. This prob-
lem is not limited to application-level protocols, but as Ptacek and Newsham [9]
describe, the same goes for lower-level protocols.
Third, eﬀorts to increase bandwidth in networks pose serious problems for
network-based IDSs. Higher line speed is in itself a diﬃculty, and switching
(unicast) technology ruins the possibility to monitor multiple hosts from a sin-
gle listening point. Some IDS developers try to address this problem by placing
a network data collection unit on every host. That solves this problem while in-
troducing others, which are similar to the problems faced by host-based analysis.
2.2 Host-Based Data Collection
The host-based approach addresses some of the problems described above, with
the primary advantage being access to other types of information. As it is in-
stalled on a host, it can monitor system resources as well as look at operating
system audit trails or application logs. It is also independent of the network
speed as it monitors only a single host. However, the system administrator now
needs to install a number of monitors instead of just one, thus incurring more
administrative overhead. Also, the user could experience a performance penalty
as the monitor is on the same host as the application.
Furthermore, most monitors on the OS level cannot detect attacks directed
at the lower network protocol levels because network information typically does
1 There are some ways a network-based IDS could read encrypted traﬃc. For example,
it could act as a proxy with the encrypted channel being only to the IDS (or a similar
proxy), thus introducing unnecessary overhead in the form of extra programs that
need to be supervised and also exposure of data before it reaches its ﬁnal destination.
The network monitor can also be given the private key of the server, increasing the
exposure of the key and forcing the network monitor to be able to keep track of user
sessions and their associated keys.
Application-Integrated Data Collection for Security Monitoring
25
not become available in the audit event stream until it has reached the higher
protocol levels. See [3,4] for an approach to include network data in OS audit
data.
An application-based monitor in the traditional sense (such as the one de-
scribed in [1]) reads data from log ﬁles or other similar sources. By the time the
information is written to the log, the application has completed the operation in
question and thus this monitor cannot be preemptive. The information available
is often also limited to a summary of the last transaction. For example, a Web
request in the Common Logﬁle Format (CLF) is
10.0.1.2 - - [02/Jun/1999:13:41:37 -0700] "GET /a.html
HTTP/1.0" 404 194
Without going into the meaning of the diﬀerent ﬁelds, the following recounts
the scenario: The host with address 10.0.1.2 asked for the document a.html,
which at that time did not exist. The server sent back a response containing 194
bytes.
The log entry does not contain all the information an IDS needs for its
analysis. Were the headers too long or otherwise malformed? How long did it
take to process the request? How did the server parse the request? What local
ﬁle did the request get translated into?
In some applications, logging can be customized and contain much more
information. Nevertheless, we have not yet seen a system where all internal
information needed to understand the interpretation of an operation is available
for logging. Furthermore, by turning on all log facilities, we increase the risk of
running out of storage space for the logs and incurring performance degradation.
3 Application-Integrated Data Collection
As we have shown in the previous section, there are problems associated with
both network-based and host-based approaches. Some of these can be solved
by collecting data directly from the single critical application that we want to
monitor. In this section, we present the general principles of this approach, while
Section 4 describes a prototype implementation for monitoring Web servers.
3.1 Rationale
Today’s network structure within organizations makes a few applications critical.
These need to be available around the clock from the outside of the organization;
they are sensitive to attacks but seldom suﬃciently protected. Examples include
Web servers, e-mail servers, FTP servers, and database systems.
To minimize security concerns, most such critical applications run on dedi-
cated machines and are protected by ﬁrewalls. Typically, no other application is
running on these machines. If remote login is allowed, it is very restricted (such
as only ssh). Thus, the malicious user must go through the channels of the critical
application to subvert the host. By having the IDS monitor the inner workings
26
M. Almgren and U. Lindqvist
of the application, analyzing the data at the same time as the application inter-
prets it, we have a chance of detecting malicious operations and perhaps even
stopping them before their execution. However, for us to successfully integrate a
monitor into the application, the application must provide an interface. Some ap-
plications provide an API and, as the advantage with an application-integrated
monitor becomes clear, we hope that more vendors will provide such interfaces.
Other venues for integration are found in the open-source movement.
3.2 Advantages
Access to unencrypted information. In almost all cases, data must be ac-
cessible inside the application in unencrypted form for meaningful processing,
even if it is encrypted in lower layers. Consequently, the unencrypted data is also
accessible to an application-integrated data collection module. This is a major
advantage compared to a network-based IDS. Moreover, it should be noted that
because encryption is used for the most sensitive data, the functions handling
that data are probably among the most interesting from an attacker’s point of
view and therefore important to monitor.
Network speed is not an issue. The module is part of the application, and
takes part in the normal processing cycle when analyzing operations. Thus, the
limiting factor is the application speed rather than the network speed. For ex-
ample, if the original application can accept a certain number of connections
per second, the application equipped with the module must be able to perform
equally well. Care must be taken so that the module does not become a bot-
tleneck and does not consume too many of the host’s resources. We discuss our
solution to this problem in detail in the next section.
More information available. Being part of the application, the module can
access local information that is never written to a log ﬁle, including interme-
diate results when interpreting operations. It can monitor how long it takes to
execute a speciﬁc operation, to detect possible denial-of-service (DoS) attacks.
Furthermore, we expect an application-integrated monitor to generate fewer false
alarms, as it does not have to guess the interpretation and outcomes of malicious
operations. For example, a module in a Web server can see the entire HTTP re-
quest, including headers. It knows which ﬁle within the local ﬁle system the
request was mapped to, and even without parsing the conﬁguration ﬁle of the
Web server, it can determine if this ﬁle will be handled as a CGI program (not
otherwise visible in either network traﬃc or log ﬁles).
True session reconstruction. Information of interest to an IDS often concerns