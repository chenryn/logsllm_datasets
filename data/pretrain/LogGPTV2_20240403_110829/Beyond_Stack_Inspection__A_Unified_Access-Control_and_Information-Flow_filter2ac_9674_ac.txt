Here, C1 is executed with initial program counter pc that
reﬂects the control dependence [16]. write oracle is ap-
plied to the branch not taken, and taint is used to shrink
the frames of values of potentially-updated variables and
heap locations using the frame of the branch condition. An
example showing the usage of the write oracle and taint
functions is discussed in Section 2.3.
The remaining rules are similar and can be found in
Figure 6. As remarked earlier, we do not allow ob-
servable branching on frames of expressions, since this
would introduce a new storage channel.
Thus, noth-
ing like write oracle/taint is needed in the semantics of
test R for E .
2.3 Example
For brevity, let us augment the set of commands with
D (s, h). Now consider
skip, with semantics (skip, s, h) ⇓S
the evaluation of the code
var l , x , y : int; var c : bool; in
l : = x; if c then l : = y else skip
in a stores , where s(pc) = P, s(x) = R0[0], s(y) =R 1[1],
and s(c) =R [true]. Since this code is simple imper-
ative, we elide the heap h in the semantics. We have
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007(l : = x , s) ⇓S
D s1, where s1 = [s | l (cid:3)→ P ∩ S ∩ R0[0]].
The evaluation of (if c then l : = y else skip, s1) yields
the store s(cid:2)
in the following manner:
s0 = [s1 | pc (cid:3)→ P ∩ R]
D R[true]
s(cid:2) = [s0 | l (cid:3)→ P ∩ S ∩ R ∩ R1[1]]
(c, s1) ⇓S
(l : = y, s0) ⇓S
D s(cid:2)
s(cid:2) = taint(P ∩ R, ∅, s(cid:2))
(if c then l : = y else skip, s1) ⇓S
∅ = write oracle(skip, s1)
D [s(cid:2) | pc (cid:3)→ P]
On the other hand, consider the evaluation of the same
code in a store t where t(pc) =P (cid:2)
0[0], t(y) =
1[1], and t(c) = R(cid:2)[false]. We have (l : = x , t) ⇓S
R(cid:2)
D t1,
where t1 = [t | l (cid:3)→ P(cid:2) ∩ S ∩ R(cid:2)
0[0]]. The evaluation of
(if c then l : = y else skip, t1) yields the store t(cid:2)
in the
following manner:
, t(x) =R (cid:2)
D R(cid:2)[false]
D t0
t(cid:2) = taint(P(cid:2) ∩ R(cid:2),{l}, t0)
(c, t1) ⇓S
(skip, t0) ⇓S
(if c then l : = y else skip, s1) ⇓S
t0 = [t1 | pc (cid:3)→ P(cid:2) ∩ R(cid:2)]
{l} = write oracle(l : = y, t1)
D [t(cid:2) | pc (cid:3)→ P(cid:2)]
Note that, as a result of applying the taint function, t(cid:2)(l) =
P(cid:2) ∩ R(cid:2) ∩ S ∩ R(cid:2)
0[0].
3 Noninterference
The idea of our information-ﬂow policy is that sections
of code guarded (immediately dominated) by test calls are
sensitive and thus should also be guarded by permission
checks for the values read in these sections of code. In static
labeling, an observer at some level L is assumed to read
only the parts of state with integrity label at most L, that is,
trustworthy for the observer. Here, the observer is expected
to check permissions on values it reads. This motivates the
main deﬁnitions of indistinguishability that are used to de-
ﬁne noninterference, which is the semantic interpretation of
the information-ﬂow policy.
This section proves two main results: Theorem 3.4 estab-
lishes that all programs are noninterferent in a nonstandard
sense: given any two initial states that agree on variables
and records that are trustable (with frames containing some
set Q of permissions required by an observer), then the ﬁ-
nal states agree on the values that are trustable for Q. The-
orem 3.5 connects this property with a standard notion of
noninterference [19], by considering programs that include
explicit permission checks.
For simplicity, in this version of the paper, the results
in this section are formalized without the heap. Note that,
except for the choice of fresh references in the semantics
of ref, the language is deterministic. In the full paper, we
assume an arbitrary deterministic allocator and track allo-
cation behavior using renamings as in [6]. This lets us use
a notion of noninterference suitable for deterministic sys-
tems.
Deﬁnition 1 (Q-indistinguishability, ∼Q) States s and t
are Q-indistinguishable for an observer with permission set
Q, written s ∼Q t, iff for all R, R(cid:2), v , v(cid:2)
and all variables
x (other than pc) the following is true:
if s(x) = R[v] and t(x) = R(cid:2)[v(cid:2)],
then R ⊇ Q ∧ R(cid:2) ⊇ Q ⇒ v = v(cid:2).
Lemma 3.1 gives a sense in which indistinguishability is
preserved by expressions (analogous to the simple security
property, or “read conﬁnement” [6]). Its proof is a straight-
forward induction on ⇓S
D .
Lemma 3.1 If s ∼Q t, (E , s) ⇓S
R(cid:2)[v(cid:2)], then R ⊇ Q ∧ R(cid:2) ⊇ Q ⇒ v = v(cid:2)
D R[v], and (E , t) ⇓S
D
.
Two additional technical results are needed. Because
taint only reduces frames, we get the following lemma us-
ing the deﬁnition of ∼Q :
Lemma 3.2 If s ∼Q t and s0 = taint(R, V , s), then
s0 ∼Q t for any R, V . Symmetrically, if s ∼Q t and
t0 = taint(R, V , t), then s ∼Q t0.
Since the semantics tracks control dependence in vari-
able pc and uses pc in the semantics of variable (and ﬁeld)
writes, we get the following lemma:
Lemma 3.3 Suppose (C , s) ⇓R
s(x), that is, x is written by C .
P ⊆ s(pc).
S t and t(x) differs from
If t(x) =P [v], then
.
, (C , s) ⇓S
D t, and (C , s(cid:2)) ⇓S
In the following sense, every program is noninterferent!
D t(cid:2)
Theorem 3.4 If s ∼Q s(cid:2)
then t ∼Q t(cid:2)
Proof: The proof is by induction on ⇓S
D . We give just the
case where C is if E then C1 else C2. As in the se-
mantics, let (E , s) ⇓S
D R(cid:2)[b(cid:2)]. Let
s0 = [s | pc (cid:3)→ s(pc)∩R] and s(cid:2)
0 = [s(cid:2) | pc (cid:3)→ s(cid:2)(pc)∩R(cid:2)].
We have two subcases depending on whether or not the two
runs take the same branch:
D R[b] and (E , s(cid:2)) ⇓S
,
D t(cid:2)
0) ⇓S
we have s0 ∼Q s(cid:2)
1. The same branch is taken. Without loss of generality,
let the branch taken be C1. Let (C1, s0) ⇓S
D t1 and
1. By Deﬁnition 1 and hypothesis s ∼Q
(C1, s(cid:2)
0, so by induction on ⇓S
s(cid:2)
D for C1
we have t1 ∼Q t(cid:2)
1. Let V = write oracle(C2, s0) and
let V (cid:2) = write oracle(C2, s(cid:2)
0). Thus, by semantics,
t = taint(s(pc) ∩ R, V , t1) and t(cid:2) = taint(s(cid:2)(pc) ∩
1). From t1 ∼Q t(cid:2)
R(cid:2), V (cid:2), t(cid:2)
1, using Lemma 3.2, we get
1, and using Lemma 3.2 again, we get t ∼Q t(cid:2)
t ∼Q t(cid:2)
.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007D t(cid:2)
0) ⇓S
2. Different branches are taken. Without loss of general-
ity, let b = true and let b(cid:2) = false. Let (C1, s0) ⇓S
D t1
and (C2, s(cid:2)
1. Let V = write oracle(C2, s0)
and let V (cid:2) = write oracle(C1, s(cid:2)
0). Thus, by seman-
tics, the ﬁnal states are t = taint(s(pc) ∩ R, V , t1)
and t(cid:2) = taint(s(cid:2)(pc) ∩ R(cid:2), V (cid:2), t(cid:2)
1). To show t ∼Q t(cid:2)
,
consider any x and let t(x) = P[v] and t(cid:2)(x) =
P(cid:2)[v(cid:2)].
If t(x) =s (x) and t(cid:2)(x) =s (cid:2)(x) then the
Q-indistinguishibility condition holds from hypothe-
sis s ∼Q s(cid:2)
. It remains to consider two cases: either
t(x) differs from s(x) or t(cid:2)(x) differs from s(cid:2)(x).
These cases are symmetric so, without loss of gener-
ality, suppose t(x) differs from s(x). Thus, x was up-
dated by C1, so t(x) =P [v] for some P , v with P ⊆
s(pc)∩ R (owing to semantics and Lemma 3.3 applied
to (C1, s0) ⇓S
D t1). Note that we have either Q (cid:8)⊆ R
or Q (cid:8)⊆ R(cid:2)
since otherwise, by Lemma 3.1, both runs
would have taken the same branch. If Q (cid:8)⊆ R, then
Q (cid:8)⊆ P (because P ⊆ s(pc) ∩ R), so the antecedent
for Q-indistinguishability of x is falsiﬁed and we are
done. Otherwise, Q (cid:8)⊆ R(cid:2)
. Now, since x is updated by
C1 from s0, by assumption on write oracle we have
x ∈ V (cid:2)
and thus, by assumption about taint, we have
P(cid:2) ⊆ s(cid:2)(pc)∩R(cid:2)
, so Q (cid:8)⊆ P(cid:2)
and again the antecedent
for Q-indistinguishability of x is falsiﬁed. This con-
cludes the proof of t ∼Q t(cid:2)
2
.
Finally, we connect Theorem 3.4 with the standard no-
tion of noninterference [19] for policies that are speciﬁed
by labeling input and output channels with ﬁxed levels, and
such that inputs labeled as untrusted do not inﬂuence out-
puts labeled as trusted.
Without loss of generality, consider a main program of
the form
K ; in R[test R for w; C ; test R for w]
where w is one of the global variables. We interpret this to
specify an implicit information-ﬂow policy ι wherein w is
trusted and the other variables are not. For this policy, the
interesting observer level is R.
We say that two states s, t are ι-indistinguishable pro-
vided that s(w) =t (w), and for all other variables x , the
frames of s(x) and t(x) do not contain R. We say s and
t are weakly ι-indistinguishable if they agree on the value
of w though not necessarily its frame: s(w) =P [v] and
t(w) = P(cid:2)(v(cid:2)) with v = v(cid:2)
). (There is no condition on
other frames.)
two ι-indistinguishable
Theorem 3.5 Consider
initial
states s, t. If s1 is the ﬁnal state from running the program
on s and t1 is the ﬁnal state from running the program on
t, then s1 is weakly ι-indistinguishable from t1.
That is, if there is no access error when the ﬁnal test is per-
formed, then w has not been inﬂuenced by untrusted inputs.
Proof: If the initial test R for w fails in one of the compu-
tations there is nothing to prove. If it succeeds in both com-
putations then we have s ∼R t. Let s1 and t1 be the states
after executing C . By Theorem 3.4 we have s1 ∼R t1.
Let s1(w) = P[v] and t1(w) = P(cid:2)[v(cid:2)]. If the ﬁnal tests
test R for w both succeed then by semantics we have
P ⊇ R and P(cid:2) ⊇ R. Thus, by deﬁnition of ∼R we have
v = v(cid:2)
as was to be proved.
2
4 Case Study
Section 1 presented examples of Java programs for
which SBAC was shown to be too permissive and HBAC
too restrictive. This section revisits those examples, show-
ing that IBAC performs as expected by enforcing the
information-ﬂow policy extracted from the access-control
policy. Additionally, this section covers examples from
production-level Java code, demonstrating the need for
IBAC when enabling security on Java code.
For simplicity, the language that we deﬁned in Section 2
to introduce IBAC only dealt with global variables. In this
section, to model Java more closely, we allow the language
to have local variables too; just like a global variable, each
local variable is mapped to a framed value. Additionally,
we assume that a command of the form B b = new B(),
which allocates and constructs a new object of type B, and
assigns it to variable b, causes that object to be framed by
s(pc) ∩ S ∩ R, where S is the set of the static permissions
of the code performing the allocation and R is the set of
permissions that the access-control policy grants to class B.
A similar approach is taken when the type of the assigned
value is primitive, with the understanding that, in that case,
R = All.
4.1 Revisiting the Running Examples
For the example of Figure 1, according to the semantics
of Section 2.2, we have the following:
• Initially, s(pc) = All.
• The body of A.main is executed with static permis-
sions R1 and dynamic permissions R1.
• The object of type B pointed to by b in A.main is
framed with All ∩ R1 ∩ R2 = ∅.
• The String object "password.txt" allocated in
m1 is framed with All ∩ R2 ∩ R3 = ∅.
• The String object assigned to fileName in
A.main is framed with All ∩ R1 ∩ ∅ = ∅.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007• The FileOutputStream object pointed to by f in
A.main is framed with All ∩ R1 ∩ R3 = R1.
• The
• The String object pointed to by the name parameter
in the FileOutputStream.(String)
constructor is framed with All ∩ R1 ∩ ∅ = ∅.
the
in
con-
FileOutputStream.(String)
structor and pointed to by file is framed with
∅ ∩ R3 ∩ R3 = ∅ since now the program counter is
control-dependent on the String object pointed to
by name, so s(pc) = ∅.
allocated
object
File
• The String object pointed to by name in
the
FileOutputStream.(File,
boolean) constructor is framed with ∅ since it is
the return value of file.getPath, and this method
returns exactly the object pointed to by fileName
in A.main. Moreover, the value of name is control-
dependent on the File object pointed to by file,
which implies that s(pc) = ∅.
• The value of
the boolean parameter append
the FileOutputStream.(File,
with
constructor
framed
is
in
boolean)
All ∩ R3 ∩ All = All.
• The
FileOutputStream.(String)
constructor body is executed with static permissions
R3 and dynamic permissions R1 ∩ R3 = R1.
• The
FileOutputStream.(String,
boolean) constructor body is
executed with
static permissions R3 and dynamic permissions
R1 ∩ R3 =R 1.
The execution of
structor
boolean) performs the following operations:
the IBAC test command in con-
FileOutputStream.(String,
1. Verify that the set D of the dynamic permissions as-
sociated with the current stack contains the singleton
R = {FilePermission "passwords.txt",
"write"}. This test succeeds because D = R1 ⊃