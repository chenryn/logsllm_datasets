effective UI exploration catering to varied applications and
incorporating different techniques (Section VIII). An effective
UI explorer will offer high coverage (of the UI, which may
also translates to code coverage) while avoiding redundant
exploration. For our work, we used the heuristics and algorithms
that we had developed earlier in AppsPlayground [6]. We brieﬂy
describe these next.
UI exploration generally involves extracting features (the
widget hierarchy) from the displayed UI and iteratively con-
structing a model or a state machine of the application’s UI
organization, i.e., how different windows and widgets are
connected together. A black-box (or grey-box) technique, such
as AppsPlayground, may apply heuristics to identify which
windows and widgets are identical to prevent redundant explo-
ration of these elements. Window equivalence is determined by
the activity class name (an activity is a code-level artifact
in Android that describes one screen or window). Widget
equivalence is determined by various features such as any
associated text, the position of the widget on the screen, and
the position in the UI hierarchy. In order to prevent long,
redundant exploration, thresholds are used to prune the model
search.
2) Handling Webviews: While studying advertisements, we
faced a signiﬁcant challenge: most of the in-app advertisements
are implemented as customizations of Webviews (these are
special widgets that render Web content, i.e., HTML, JavaScript,
and CSS). Webviews and some custom widgets are opaque in
the UI hierarchy obtained from the system, i.e., the UI rendered
inside them cannot be observed in the native UI hierarchy and
thus interaction with them will be limited. To the best of our
knowledge, previous research has not proposed a satisfactory
solution to this problem.
Certain open source projects, such as Selendroid [7], may
be used to obtain some information about the internals of the
Webview. We developed code around Selendroid to interact
with Webviews. However, our experience was that it is difﬁcult
to use the information provided from Webviews to trigger
advertisements. Advertisements often include speciﬁc buttons
(actually decorated links) that should be clicked to trigger the
ads. They may also present other features such as those relating
to users’ preferences, but which are irrelevant for our purposes.
The relevant links cannot easily be distinguished from the
irrelevant ones. Often times the click-able link is represented
by images instead of text. If we click the irrelevant links, ads
may not get triggered, resulting in low click-through rates.
Fig. 1. Overview of measurement methodology
In order to overcome this issue of essentially ﬂat (i.e., with
no hierarchical structure in the UI debug interfaces provided by
Android) Webviews, we apply computer graphics techniques
in order to detect buttons and widgets as a human would see
them. Algorithm 1 presents the detection algorithm.
Algorithm 1 Button detection algorithm
1. Perform edge detection on the view’s image
2. Find contours in the image
3. Ignore the non-convex contours or those with very small
area
4. Compute the bounding boxes of all remaining contours
The ﬁrst step, edge detection, is the technique of identifying
sharp changes in an image. Fundamentally, it works by detecting
discontinuities in image brightness. We speciﬁcally use the
Canny edge detection algorithm, a classical, yet generally well-
performing edge detection algorithm. In the second step we
compute contours of images, using the computed edges, to
obtain object boundaries. Since buttons typically have a convex
shape and a large enough area so that a user can easily tap
on them, we ignore non-convex contours and those with a
small area within a threshold parameter. Numerous contours
such as those arising out of text or the non-convex or open
contours in embedded images are eliminated in this step. For
the remaining contours, we compute the bounding boxes, or
the smallest rectangles that would contain those contours. This
step is simply to identify a central point where a tap can be
made to simulate a button click.
The resulting bounding boxes signify the buttons that would
be visible to a human being. We have not performed a thorough
evaluation of the accuracy of our technique but the results are
good in the cases we have examined. Figure 2 presents some
cases related to ads as well as other views. We note that this
technique depends only on computer graphics algorithms, is
completely black box as it does not even need to extract the UI
hierarchy from the system. It can therefore be generally used
for any widget whose internals are opaque to the UI hierarchy
extraction.
In a small comparison with Selendroid-based implemen-
tation, we found that on a total of 968 applications, the
Fig. 2. Examples of detecting buttons with bounding boxes. The bounding
boxes are depicted as red rectangles. The top two ﬁgures contain the whole
screen while the bottom ﬁgure is just an ad. Note the detection of buttons.
Algorithm 1-based implementation uncovered 525 links while
the Selendroid-based implementation uncovered 100 web links.
We note that our Selendroid-based implementation has scope
for possibly signiﬁcant improvement (as it is currently based
on simple heuristics). However, given the better performance
of graphics-based implementation, we decided to employ this
technique only in our large-scale deployment.
B. Detection
As the links are triggered, they may be saved for further
analysis and detection of malicious activity such as spreading
malware or scam. We would like to capture the links, their
redirection chains, and their landing pages. The links, redirec-
tion chains, and the content of the landing pages may then be
further analyzed using various methods.
4
http://mdsp.avazutracking.net/tracking/redirect.php?bid_id=8425..&ids=BMjgzfjI1..&_m=%07
publisher_name%06%07ad_size%06320x50%07campaign_id%0625265%07carrier%06%07category%06IAB7%07
country%06..%07exchange%06axonix%07media%06app%07os%06android&ext=
http://track.trkthatpaper.org/path/lp.php?trvid=10439&trvx=f3ea3ff0&clickid=XVm..&pub_name=
{publisher_name}&ad_size=320x50&camp_id=25265&carrier={carrier}&iab_category=IAB7&country=..&
exchange=axonix&media=app&os=android
http://com-00-usa5.com/lps/thrive/android/hp/win/us/congrats_blacksmrt/index.php?isback=1&backid1
=10451&backid2=90ca7507&sxid=b2f..&tzt=..&devicename=&mycmpid=10439&iphone_o=2199&ipad_o=2198&
os=android&isp=..&country=US&clk=fln&trkcity=..&clickid=X..Q&pub_name=%7Bpublisher_name%7D&
ad_size=320x50&camp_id=25265&carrier=%7Bcarrier%7D&iab_category=IAB7&exchange=axonix&media=app
http://track.trkthatpaper.org/path/lp.php?trvid=10608&trvx=2721e17a&clk_ip={clk_ip}&clk_campid=
{clk_campid}&clk_country={clk_country}&clk_device={clk_device}&clk_scr=480x800&clk_tch=true&
clk_campname={clk_campname}&clk_tzt=0&clk_code=fln
http://com-00-usa5.com/lps/thrive/android/hp/sweeps/us/iphone-winner/index_ipad.php?isback=1&
backid1=10451&backid2=90ca7507&sxid=377..&tzt=..&devicename=&mycmpid=10608&os=Android&
devicemodel=Android+4.2&devicetype=mobile&isp=..
Fig. 3. An example redirection chain. Lengthy query parameters and those that are could reveal authors’ identity (through location/ISP) have been redacted. This
example chain is also useful in understanding the case study presented in Section VI-B.
a) Redirection chains: Advertisements redirect from
one link to another until they ﬁnally arrive at the landing page.
As discussed earlier, the redirection may be a result of ad
syndication and auction or may even be performed within an
ad network itself or by the advertisers themselves. An example
redirection chain of length ﬁve is shown in Figure 3. Redirection
chains may also be observed in non-ad links. Redirection
may be performed using several techniques, including HTTP
301/302 status headers, HTML meta tags, and at the JavaScript
level. Furthermore, we found that certain ad networks such as
Google ads apparently use time-based checks in order to reduce
possibility of click fraud. The result of this is that the links
must be launched in real-time to obtain redirection messages.
In order to ensure that our approach accurately follows the
redirection chain regardless of the redirection technique used,
we use an instrumented web browser to follow the chain, just as
a real user would. We implemented a custom browser that runs
inside the virtualized execution environment so that the ads are
loaded completely realistically inside the browser allowing full
capture of the redirection chains. Our browser implementation
is based on the Webview provided in Android. With Javascript
enabled and a few other options tweaked, it behaves completely
like a web browser. We additionally hook onto the relevant parts
to log every URL (including redirected ones) that is loaded in
it while freely allowing any redirections to occur.
b) Landing pages: Landing pages, or the ﬁnal URLs in
redirection chains, in Android may contain links that may lead
to application downloads. Malicious landing pages may lure the
users into downloading trojan applications. We load the landing
pages in a browser conﬁgured with a realistic user agent and
window size corresponding to a mobile device, so that the
browser appears to be the Chrome browser on Android. We
then collect all links from the landing page and click each to see
if any ﬁles are downloaded. Simulating clicks on pages loaded
in a browser ensures that links are found and clicked properly
in the presence of Javascript-based events. The downloaded
ﬁles are analyzed further as below.
c) File and URL scanning: The collected URLs and
ﬁles may be analyzed in various ways for maliciousness. In
this paper, rather than developing our own analysis, we used
results from URL blacklists and antiviruses from VirusTotal.
VirusTotal aggregates results from over 50 blacklists and a
similar number of antiviruses. Each URL collected, either the
landing page or any other URL involved in the redirection chain,
is scanned through URL blacklists provided by VirusTotal. This
includes blacklists such as Google Safebrowsing, Websense
Threatseeker, PhishTank, and others. Files that are collected as a
result of downloads from the landing pages are scanned through
the antiviruses provided on VirusTotal. Antivirus systems and
blacklists are known to have false positives. In order to minimize
the impact of this, we use agreement among antiviruses to
reduce the false positive rate: we say a URL or a ﬁle is malicious
only if it is ﬂagged by at least three different blacklists or
antiviruses.
C. Provenance
Once a malicious event is detected, it is necessary to make
the right attributions to the parties involved so that these parties
can be held responsible and proper action may be taken. In
our system, we use two aspects as part of provenance.
•
•
Redirection chain. The redirection chain, which is
already captured as part of the detection component.
The redirection chain can be used to identify how the
ﬁnal landing page was reached: if the landing page
contains something malicious, the parties owning the
URLs leading up to the landing URL can be identiﬁed.
Code-level elements. The application itself may include
code from multiple parties such as the primary appli-
cation developer as well as ad libraries from a variety
of ad networks. In order to launch one application
from another, Android uses what are called intents.
URLs may be opened by applications in the system’s
web browser by submitting intents to the system with
speciﬁc parameters. We modify the system to log
speciﬁc intents that are indicative of URL launches
together with which part of the code (the Java class
within which the launching code lies) that submitted
the intent. This allows us to determine which code
with an application launched the malicious URL.
It is important to identify the owners of the code classes
captured as part of provenance: do they belong to the application
5
developer or an ad library, and if they belong to an ad library,
which one is it? In order to assist us in doing this, we therefore
perform the one-time task of identifying prevalent ad libraries
and their associated ad networks.
D. Ad Library Identiﬁcation
Applications that monetize with advertisements typically
partner with ad networks and embed code called ad libraries
from them in order to display and manage advertisements. Our
goal is to comprehensively identify ad networks that participate
in the Android ecosystem and their associated ad libraries.
Such an identiﬁcation is important for automatically classifying
if a malicious activity is a result of an advertisement or is
the responsibility of the application developer. Some simple
domain knowledge, such as which ad networks are there in the
market, may not provide a comprehensive list we are looking
for. We instead resorted to two systematic approaches to do
this identiﬁcation based on the ad libraries embedded in the
code.
a) Approach 1: We exploit the fact that one ad network
will likely be used by many applications and thus common
ad library code will be found in all applications using an
ad network. The native programming platform for Android
applications is Java and Java packages provide mechanisms to
organize related code in namespaces. Ad libraries themselves
have packages that can serve as their identifying signatures.
In our ﬁrst approach, we collected packages from all appli-
cations in our dataset and created a package hierarchy together
with the frequency of occurrence of each package. We sorted
the packages and then manually searched the most frequent
packages to identify ad libraries. For example, after sorting,
packages such as com.facebook and com.google.ads
appear at the top. Then we identiﬁed the nature of each
package, i.e., whether it constituted an ad library, based on
either prior knowledge or manually searching information about
that package on the Web.
b) Approach 2: The previous approach became cum-
bersome when we reached frequencies of a few hundred
because many non-ad packages also had such frequencies. Our
alternative approach allows for comprehensive identiﬁcation of
ad libraries without depending on the frequency of occurrence
of those ad libraries. Our second approach relies on the
fact that the main application functionality is only loosely
coupled with the functionality of ad libraries. Thus, we use
the technique described by Zhou et al. [8] to detect loosely
coupled components in the applications. The coupling is actually
measured in terms of characteristics such as ﬁeld references,
method references, and class inheritances across classes. Ideally,
all the packages of one ad library will be grouped into one
component. In reality, this does not always happen and it may
also happen that classes that should have been in different
components end up in the same components. However, the
errors are tolerable and can be manually analyzed.
The manual analysis is further eased by employing a
clustering technique described as follows. We create a set
of Android APIs called in an application component. This set
of APIs forms a signature for the component. We map these
APIs to integers to enable efﬁcient set computations. Based on
this, ad library instances with the same version have matching
API sets. For different versions, the sets will be similar but not
identical. We run this analysis on components extracted from
all applications and then use the Jaccard distance to compute
dissimilarity between API sets. If it is below a certain threshold
(we used 0.2), we place the components in the same cluster.
Thus packages of different ad libraries end up in different
clusters, and then clusters can be easily mapped to ad libraries.
c) Results: Using the two approaches, we were able to
identify 201 ad networks in our dataset. To our knowledge,
this is the highest number of ad networks identiﬁed. Some
ad networks have ad libraries with several package names.
For example, com.vpon.adon and com.vpadn belong to
the same network. We combine such instances together to be
represented as a single ad network. More notably, Google’s
Admob and DoubleClick platforms are both represented as
Google ads.
Note that our approach to use package names to identify ad
libraries is contingent upon the assumption that ad library
packages are not obfuscated. This is true for most cases
that we know of: the top-level packages work quite well to
identify most ad libraries. However, Airpush is one known
ad network that obfuscates its ad libraries such that they
are no longer identiﬁable with package names [9]. While
applying our second approach, which is immune to lexico-
graphic obfuscations, we also detected obfuscated Airpush
packages, all ending up in a few clusters. The clusters have
the non-obfuscated package com.airpush.android as well as
obfuscated ones like com.cRDpXgdA.kHmZYqsQ70374 and
com.enVVWAar.CJxTGNEL99769.
IV.
IMPLEMENTATION
We implemented most of our system in Python. For
UI exploration, we make use of the source code of the
AppsPlayground tool [10]. However, the existing version of