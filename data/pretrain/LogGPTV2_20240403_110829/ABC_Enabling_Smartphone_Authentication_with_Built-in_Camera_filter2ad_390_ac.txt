the user to photograph a freshly generated QR code. After
verifying the QR code and the ﬁngerprint contained in the
received image, this scheme further conducts the triangle test to
detect the ﬁngerprint forgery attack, as shown in Algorithm 1.
The veriﬁer ﬁrst extracts the query image’s noise residue W(q).
For each history image’s noise residue W(i), it then calculates
the similarity η between W(q) and W(i). An η higher than a
threshold suggests that I(q) is a forged image fabricated with
W(i). The accuracy of this detection mechanism depends on
the completeness of the history image set.
the ﬁngerprint forgery attack,
Although the triangle test addresses the vulnerability
against
it has the following
drawbacks: 1) This scheme can not guarantee real-time au-
thentication. Since the veriﬁer needs to test the whole history
image set, the response time may increase dramatically as the
size of the image set increases. 2) It brings a huge burden to
the user and the veriﬁer. To maintain an up-to-date history
image set for the smartphone,
the user has to notify the
veriﬁer whenever they publish new pictures. 3) It is difﬁcult
to guarantee the completeness of the history image set. An
incomplete history image set will make the detection result
unreliable. 4) Collecting all the history images of a user might
create privacy issues.
C. Full Fledged Authentication Protocol
Overcoming the drawbacks in the two baseline schemes
requires a reliable and real-time detection mechanism against
ﬁngerprint forgery attacks. ABC detects the forgery attack
through tracking the ﬁngerprint of the adversary’s smartphone.
This ﬁngerprint in question is introduced during the challenge
response stage where the adversary captures the challenge
QR code with their own smartphone. Since this ﬁngerprint
of the attacking smartphone is preserved in forged images, its
existence implies a ﬁngerprint forgery attack. ABC requires
a smartphone to upload two freshly captured images. If these
images are forged by an adversary, their noise residues will
contain both the victim device’s ﬁngerprint and the adversary’s
Full ﬂedged authentication protocol. Registration: the user uploads
Fig. 7.
an arbitrary image captured by her smartphone. Authentication: the veriﬁer
enforces the user to capture two consecutive images shown on its interface.
Algorithm 2 Forgery Detection
F2 function ForgeryDetection ( ˆK(c), I1(c), I2(c))
1.
2.
3.
4.
5.
6.
W1(c) ← F (I1(c))
W2(c) ← F (I2(c))
δ ← P CE(W1(c), W2(c)) − P CE(W1(c), ˆK(c)))
If (δ > threshold) then
Reject.
end if
end function
for i in [1,2] do
Algorithm 3 Removal Detection
F4 function RemovalDetection(I1(c), I2(c))
1.
2.
3.
4.
5.
6.
7.
8.
ˆIi(c) ← Subsample(Ii(c))
ˆWi(c) ← F (ˆIi(c))
Γi ← ith probe signal
if P CE( ˆWi(c), Γi) < threshold then
Reject.
end if
end for
end function
Fig. 8. Attack detection ﬂow: since the user has conﬁrmed the information
of the ongoing transaction, the veriﬁer needs only to detect replay attack and
ﬁngerprint forgery attack.
camera ﬁngerprint. This renders their similarity value signiﬁ-
cantly higher than a normal value.
Since a camera ﬁngerprint can be removed with a denoising
ﬁlter,
the adversary can forge images containing only the
victim device’s ﬁngerprint. ABC detects ﬁngerprint removal by
embedding each challenge with a probe signal that can survive
photographing but not ﬁngerprint removal and checking the
existence of the probe signal in the received images.
Using the above detection mechanisms as building blocks,
we now present the full ﬂedged ABC protocol (Fig. 7). Its
registration phase is the same as the one in Basic Scheme I,
which collects only one reference image from the user. The
authentication phase is as follows:
Step 1. The veriﬁer generates two different QR codes
encoded with a transaction abstract, a time stamp and a
random string. Each QR code is embedded with independent
white Gaussian noise Γi, the variance of which is 5. The
challenging scenes with QR codes can be represented as
Ii(s) = QR(stri, Ti) + Γi, i = 1, 2. The veriﬁer displays
the two QR codes on its interface in a sequence.
Step 2. The user captures I1(s) and I2(s), and uploads
captured images to the veriﬁer through the wireless channel.
Step 3. Upon receiving the images uploaded by the user,
the veriﬁer performs the actions shown in Fig. 8 to identify
the user’s smartphone:
7
Image content matching. Detects the challenging QR code
in the received images. This can easily be achieved with off-
the-shelf QR code scanning tools.
Fingerprint matching. Detects the target smartphone’s cam-
era ﬁngerprint K(c) in the received images by correlating the
noise residue of each received image to the noise residue of
the reference image.
Forgery detection. Detects the adversary’s camera ﬁnger-
print K(a) in the received images. As shown in Algorithm
the veriﬁer extracts the noise residues Wi(c) of each
2,
received image Ii(c) and calculates their similarity values
P CE(W1(c), W2(c)). If these images are forged by the adver-
sary, both W1(c) and W2(c) will contain K(a) and K(c), which
will make P CE(W1(c), W2(c)) signiﬁcantly higher than the
normal similarity value P CE(W1(c), ˆK(c)).
Removal detection. Detects the added white Gaussian noise
in the received images. As shown in Algorithm 3, the
Γi
veriﬁer ﬁrst subsamples each received image Ii(c) and obtains
ˆIi(c). With an appropriate subsampling method, ˆIi(c) should
contain the embedded probe signal Γi. The veriﬁer then
calculates the similarity value between Γi and the noise residue
of ˆIi(c). If Ii(c) has gone through a ﬁngerprint removal process,
due to Γi’s sensitivity to ﬁngerprint removal, the similarity
value will be lower than a threshold.
V. SECURITY ANALYSIS
In this section, we analyze the security of the ABC protocol
by examining its resistance against the replay attack, man in
the middle attack and ﬁngerprint forgery attack.
A. Replay Attack
An adversary may attempt
to impersonate a legitimate
smartphone by fraudulently replaying a captured image token
that is previously sent to the veriﬁer. Since this image token
is indeed photographed by the legitimate smartphone, without
appropriate detection mechanisms, it will pass the authentica-
tion system.
To detect replayed images, ABC challenges the user to
photograph a freshly generated QR code, in which a random
string and a time stamp are encoded. The random string
ensures that the presented QR code is hard to predict and
the time stamp ensures that each QR code will be used only
once for each user. In this way, the veriﬁer can detect replay
attack through checking the existence of the presented QR
code in the received image. The reliability of this liveness
detection mechanism is mainly determined by the entropy of
the presented challenge. For QR codes, even the lowest QR
code version can generate 5.7× 1045 different images [2]. It is
hardly possible for an adversary to predict the QR code to be
requested in a future authentication process. Therefore, ABC
has strong resistance against the replay attack.
B. Man in the Middle Attack
An adversary may attempt to lure a legitimate user to
authorize a malicious request through modifying the com-
munication between the user and the veriﬁer. The attacking
process is as follows: 1) The legitimate user initiates her
request on the veriﬁer’s interface. 2) The adversary (e.g., a
malicious terminal) intercepts the user’s request and sends the
veriﬁer a malicious one. 3) The veriﬁer’s server sends a freshly
generated QR code to the interface and challenges the user to
capture it. 4) The user captures and uploads the image using
her smartphone. Since the smartphone presented by the user
is indeed the legitimate one, the captured image sure will pass
the authentication process. However, the transaction authorized
by this smartphone is not the one requested by the user.
To address this attack, ABC further embeds an abstract of
the ongoing transaction into the challenging QR code. During
the authentication process, the user will be required to capture
the challenging QR code and to verify the information of the
transaction. With this design, an adversary conducting man in
the middle attack will have two options after receiving the
challenging QR code (step 3): 1) Display it on the screen and
ask the user to capture it. In this case, the user will terminate
the authentication as the transaction encoded in the QR code is
different from the one she requested. 2) Fabricate and display
a forged QR code, in which an abstract of the user’s original
transaction in encoded. In this way, the user will conﬁrm the
transaction and photograph the QR code shown on the screen.
However, since the QR code shown on the screen is different
from the one generated by the veriﬁer, the captured image
token will not pass image content matching. In both cases, the
adversary’s transaction will not be authorized.
C. Fingerprint Forgery Attack
An adversary may impersonate a legitimate smartphone
through fabricating images that contain the challenging QR
code and the target smartphone’s ﬁngerprint. Two forgery
strategies could be used: 1) directly inject the victim’s camera
ﬁngerprint into an image captured by the adversarial device; 2)
remove the adversary’s camera ﬁngerprint from the captured
image before the injection process.
(a) iPhone 6
(b) Galaxy Note 5
Fig. 9.
PCE for forgery detection. PCE1 measures the correlation between
one tested image and the reference ﬁngerprint. PCE2 measures the correlation
between two tested images.
1) Forgery Strategy I: This forgery process works as fol-
lows: 1) derive two reference ﬁngerprints from two different
sets of images captured by the victim device; 2) photograph
the challenging QR codes with another smartphone of the
same model; 3) embed each captured image with a different
reference ﬁngerprint. Images fabricated in this way consist of
the challenging QR code, the victim’s camera ﬁngerprint K(c)
and the adversary’s camera ﬁngerprint K(a), along with other
random noise components.
In order to detect this attack, our protocol adopts a forgery
detection mechanism that can detect the existence of K(a).
Based on the observation that forged images sharing K(a)
will have a signiﬁcant higher correlation value than legitimate
images, our protocol enforces the user to capture two challeng-
ing QR codes with the same device, and uses the correlation
between the captured images to detect this forgery attack.
The reliability of the detection mechanism above lies in
the signiﬁcance of the correlation caused by K(a). To prove
the effectiveness of this mechanism, we also look at the worst
case scenario where all tested images are captured in an indoor
environment. As will be shown in section VI, images captured
in this environment has the weakest ﬁngerprint. We tested two
image sets collected from Amazon Mechanical Turk and our
own device:
•
•
iPhone set: 6,000 images taken by 30 different iPhone
6. The resolution is 2448 × 3264.
Samsung set: 10,000 images taken by 10 different
Galaxy Note 5. The resolution is 2048 × 1152.
For both image sets, we construct two kinds of image pairs
for comparison: 1) Normal image pair: two images taken by
the same camera, i.e., with the same K(c). 2) Forged image
pair: two forged images with the same K(c) and K(a). All
forged image pairs are fabricated through Forgery Strategy I.
For the iPhone set, we constructed 400 forged image pairs and
450 normal image pairs. For the Samsung set, we constructed
1600 forged image pairs and 1400 normal image pairs.
For each tested image pair, we calculate two similarity
values. P CE1 = P CE(W1(c), ˆK(c)) is the similarity value
between one tested image’s noise residue and the target smart-
phone’s reference ﬁngerprint. P CE2 = P CE(W1(c), W2(c))
is the similarity value between tested images’ noise residues.
Since P CE2 is positively correlated to P CE1 for both kinds
8
(a) Normal iPhone 6 image pair
(b) Forged iPhone 6 image pair
(c) Normal Galaxy Note 5 image
pair
(d) Forged Galaxy Note 5 image
pair
Fig. 10. Distribution of PCE2-PCE1. For normal image pairs, PCE1 and PCE2 both measure the correlation between two legitimate images. The distribution
of PCE2-PCE1 is roughly a zero mean Gaussian. For forged image pairs. PCE2 measures the correlation between two forged images sharing both the target
smartphone’s ﬁngerprint and a foreign smartphone’s. The foreign smartphone’s ﬁngerprint makes PCE2 signiﬁcantly higher than PCE1.
PCE1 increases, the difference between PCE2 and PCE1 grows
rapidly. If the veriﬁer can increase the intensity of ambient light
and raise the threshold for ﬁngerprint matching, even images
with weak K(a) will not pass the forgery detection mechanism.
2) Forgery Strategy II: In this strategy, the adversary tries
to defeat the forgery detection mechanism through removing
his own ﬁngerprint from forged images. The forgery process
works as follows: 1) derive two reference ﬁngerprints from
two different sets of images from the victim; 2) photograph the
challenging QR codes and remove the adversary’s ﬁngerprint
from the captured image; 3) embed each obtained image with
a different ﬁngerprint of the victim. The constructed image
consists of the challenging QR code,
the victim’s camera
ﬁngerprint, and other random noise component. This strategy
may defeat our mechanism for defeating Forgery Strategy I.
ABC defeats this attack by detecting ﬁngerprint removal.
Fingerprint removal can be achieved in two ways: 1) ﬁlter the
captured image with the adaptive PRNU denoising technique
[29], [21]; 2) reconstruct an image containing the presented
QR code. Since both removal strategies remove all noise com-
ponents, we use a probe signal to detect ﬁngerprint removal.
The probe signal is semi-fragile: 1) robust against camera-
screen channel distortion to ensure that it will be preserved
in legitimate image tokens. 2) sensitive against ﬁngerprint
removal to ensure that the ﬁngerprint removal process will
change it. During the authentication process, the veriﬁer embed
this probe signal Γ into the QR code to be captured by the user.
In this way, ﬁngerprint removal can be detected by checking
the existence of this signal in the received image.
The reliability of this detection mechanism lies in the semi-
fragility of the probe signal.
Sensitivity: The probe signal in ABC is of the same type as
a camera ﬁngerprint, i.e., white Gaussian noise with a variance
of 3 to 5. With this design, the probe signal has an inherent
sensitivity against adaptive PRNU denoising. Any ﬁltering
method that can remove the adversary’s ﬁngerprint will also
remove the probe signal. For the second removal strategy, since
the probe signal is unknown, the adversary cannot construct
an image containing the probe signal without introducing their
own camera ﬁngerprint into a captured image.
Robustness: Camera-screen channel distortion may lead to
an information loss in the high frequency band [28], [24].
Fig. 11.
Forgery detection. True positive rate measures the percentage of
forged images which are correctly identiﬁed. False positive rate measures the
percentage of legitimate images that are identiﬁed as forged ones.
of image pairs, as shown in Fig. 9, we use the difference
between P CE1 and P CE2 to differentiate normal images
from forged ones. The distribution of the obtained difference
is shown in Fig. 10.
ABC uses thresholding to detect ﬁngerprint forgery attack.
It counts an image pair as a forged one if the difference
between P CE2 and P CE1 is above a threshold, and vice