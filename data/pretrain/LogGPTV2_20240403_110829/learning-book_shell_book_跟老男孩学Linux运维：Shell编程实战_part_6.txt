[oldboygoldboy -]sunset UszR
Aoqpto
[oldboyoldboy -]s echo sUSER
---
## Page 48
3跟老男孩学Linux运维：Shell编程实战
#<==此处为输出的空行
可以看到变量的内容显示为空。
环境变量的知识小结：
口变量名通常要大写。
口变量可以在自身的Shell及子Shell中使用。
口常用export来定义环境变量。
口执行env默认可以显示所有的环境变量名称及对应的值。
口书写crond定时任务时要注意，脚本要用到的环境变量最好先在所执行的Shell
脚本中重新定义。
口如果希望环境变量永久生效，则可以将其放在用户环境变量文件或全局环境变量
文件里。
3.2.3环境变量初始化与对应文件的生效顺序
在登录Linux系统并启动一个bashshell时，默认情况下bash会在若干个文件中查
找环境变量的设置。这些文件可统称为系统环境文件。bash检查的环境变量文件的情况
取决于系统运行Shell的方式。系统运行Shell的方式一般有3种：
1）通过系统用户登录后默认运行的Shell。
2）非登录交互式运行Shell。
3）执行脚本运行非交互式Shell。
当用户登录Linux系统时，Shell会作为
fetcprofile—bash_profle操作bash
登录Shell启动。此时的登录Shell加载环境
变量的顺序如图3-1所示。
/etc/profile.d/*.sh)-
/etc/bashro
用户登录系统后首先会加载/etc/profile
全局环境变量文件，这是Linux系统上默认的
(caclysccnfgi18n)
Shell主环境变量文件。系统上每个用户登录图3-1登录Shell读取环境变量文件的流程
都会加载这个文件。
当加载完/etc/profile文件后，才会执行/etc/profile.d目录下的脚本文件，这个目录
下的脚本文件有很多，例如：系统的字符集设置（/etc/sysconfig/il8n）等，在后文开发跳
板机案例里，我们也把脚本的起始加载放到这个目录下，以便用户登录后即刻运行脚本。
之后开始运行SHOME/.bash_profile（用户环境变量文件），在这个文件中，又会去
找SHOME/.bashrc（用户环境变量文件），如果有，则执行，如果没有，则不执行。在
SHOME/.bashrc文件中又会去找/etc/bashrc（全局环境变量文件），如果有，则执行，如
---
## Page 49
第3章Shel变量的核心基础知识与实践3
果没有，则不执行。
入密码的登录及远程SSH连接情况），那么这种非登录Shell只会加载SHOME/.bashrc
（用户环境变量文件），并会去找/etc/bashrc（全局环境变量文件）。因此如果希望在非登
录Shell下也可读到设置的环境变量等内容，就需要将变量设定等写入SHOME/.bashrc
或者/etc/bashrc，而j不是SHOME/.bash_profile或/etc/profile。
3.3普通变量
3.3.1定义本地变量
本地变量在用户当前Shell生存期的脚本中使用。例如，本地变量oldboy的取值为
bingbing，这个值只在用户当前Shell生存期中有意义。如果在Shell中启动另一个进程
或退出，那么变量oldboy的值将会无效。
1.普通变量定义
为普通变量的定义赋值，一般有以下3种写法：
变量名=value
<==赋值时不加引号
变量名='value'
<==赋值时加单引号
变量名-value”
#<==赋值时加双引号
2.在Shell中定义变量名及为变量内容赋值的要求
变量名一般是由字母、数字、下划线组成的，可以以字母或下划线开头，例如：
oldboy、oldboy123、oldboy_training。
变量的内容可以用单引号或双引号引起来，也可不加引号，但是这三者的含义是不
同的，具体参见后文说明。
3.普通变量的定义及输出的示例
范例3-4：采用不同的方式对普通变量进行定义，并一一打印输出。
b='192.168.1.2
a=192.168.1.2
C=*192.168.1.2*
echo'a=Sa*
echo *b=sb*
echo 'c=s（c).
提示：
1）$变量名表示输出变量，可以用$c和$（c}两种用法。
2）请在命令行实践以上内容，然后看一看返回的结果有何不同。
---
## Page 50
32跟老男孩学Linux运维：Shell编程实战
思考：在命令行Shell下输人以上内容后会输出什么结果呢？请在看答案之前，先
想一想上面a、b、c变量值的输出各是什么，最好自己实践一下。
答案：
a=192.168.1.2
b=192.168.1.2
c=192.168.1.2
可见，将连续的普通字符串的内容赋值给变量，不管用不用引号，或者不管用什么
引号，它的内容是什么，打印变量时就会输出什么。
范例3-5：接着上述范例的结果，再在Linux命令行下继续输人如下内容，想一想
a、b、c的输出又各是什么结果？
a=192.168.1.2-$a
b='192.168.1.2-$a*
c=*192.168.1.2-$a*
.=.o
echo 'b=Sb*
.()s=D.oy
提示：建议先思考结果是什么，然后再在命令行实践以上内容，看看和思考的结果
有何不同。
参考答案：
a=192.168.1.2-192.168.1.2
b=192.168.1.2-$a
c192.168.1.2-192.168.1.2-192.168.1.2
4.变量定义的基本技巧总结
这里以范例3-5为例：
a=192.168.1.2-Sa
第一种定义a变量的方式是不加任何引号直接定义变量的内容，当内容为简单连续
的数字、字符串、路径名时，可以这样用，例如：a-1，b-oldboy等。不加引号时，值
里有变量的会被解析后再输出，上述变量定义中因为Sa的值被解析为192.168.1.2（范
例3-3执行的影响），因此新的a值就是192.168.1.2-192.168.1.2。
b='192.168.1.2-$a
第二种定义b变量的方式是通过单引号定义。这种定义方式的特点是：输出变量
内容时单引号里是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也
---
## Page 51
第3章Shel变量的核心基础知识与实践3
会把它们原样输出。这种方式比较适合于定义显示纯字符串的情况，即不希望解析变
量、命令等的场景，因此，对于这里的b的值，定义时看到的是什么就输出什么，即
192.168.1.2-Sa。
C=*192.168.1.2-$a*
第三种定义c变量的方式是通过双引号定义变量。这种定义方式的特点是：输出变
量内容时引号里的变量及命令会经过解析后再输出内容，而不是把双引号中的变量名及
命令（命令需要反引起来）原样输出。这种方式比较适合于字符串中附带有变量及命令
且想将其解析后再输出的变量定义。
老男孩经验：
数字内容的变量定义可以不加引号，其他没有特别要求的字符串等定义最好都加上
双引号，如果真的需要原样输出就加单引号，定义变量加双引号是最常见的使用场景。
5.把一个命令的结果作为变量的内容赋值的方法
对需要获取命令结果的变量内容赋值的常见方法有两种：
变量名=18
<==把命令用反引号引起来，不推荐使用这种方法，因为容易和单引号渠涌
变量书=S（18）
<==把命令用S（）括起来，推券使用这种方法
范例3-6：用两种方法把命令的结果赋值给变量。
[oldboy8o1dboy -]$ 1s
[oldboyeo1dboy-]$ CMD=²1s
test.sh
[oldboyeoldboy -]$ echo $CMD
<==其中为键盘上Tab键上面的即个键输出的字特
[o1dboy@o1dboy -]$ CMD1=$ (pud)
test.sh
[oldboyeo1dboy -1$ echo $CHD1
/home/01dboy
<u=打印当前用户所在的目录
提示：生产场景中把命令的结果作为变量的内容进行赋值的方法在脚本开发时很
常见。
范例3-7：按天打包网站的站点目录程序，生成不同的文件名（此为企业实战案例）。
[rootθo1dboy8cripts]#CMD=S（date+eF）<==将当前日期（格式为2016-09-10）赋
给CMD变量
[rooteoldboy scripts]echo SCMD
#<==输出变量的值
2016-09-10
[root8oldboy scripts]echo S（date+eF].taz.gz<==直接输出时间命令的结果
---
## Page 52
34跟老男孩学Linux运维：Shell编程实战
2016-09-10.tar.gz
2016-09-10.tar.gz
[root8oldboy scripts]# tar zcf etc_S(date +tF).tar.gz /etc
#<==将时间作为压缩包名打包
tar：从成员名中型除开头的“/”
tar：从硬连接目标中删除开头的“/”
[root8oldboy 8cripts]1s-1etc_2016-09-10.tar.gz<u=打包结果，包名申包含
-rw-r--r--1 root root 9700163 9月10 18:39 etc_2016-09-10.tar.gz
[rootθo1dboy scripts]# H=$ (uname -n)
#<==获取主机书并赋恒给H变量
[rooteoldboy scripts]# echo SH
oldboy
[root@oldboy script8]tar zcf SH.tar.gz/etc/services<==将主机名作为压缩包名
tar：从成员名中删除开头的“/”
打包文件
[root9oldboy scripts]# 1s -1oldboy.tar.gz
<==打包结果，包名中包含有主机名
-rw-r--r--1root root 127303 9月10 18:40 o1dboy.tar.gz
局部（普通）变量定义及赋值的经验小结
常规普通变量定义：
口若变量内容为连续的数字或字符串，赋值时，变量内容两边可以不加引号，例如
a=123。
变量的内容很多时，如果有空格且希望解析内容中的变量，就加双引号，例如a=”/
etc/rc.localSUSER"，此时输出变量会对内容中的SUSER进行解析然后再输出。
口希望原样输出变量中的内容时就用单引号引起内容进行赋值，例如：a="SUSER”。
希望变量的内容是命令的解析结果的定义及赋值如下：
口要使用反引号将赋值的命令括起来，例如：a=ls：或者用SO括起来，例如：
a=S(1s)。
变量的输出方法如下：
使用“S变量名”即可输出变量的内容，常用“echoS变量名”的方式，也可用
printf代替ccho输出更复杂的格式内容。
变量定义的技巧及注意事项：
口注意命令变量内容前后的字符”（此字符为键盘Tab键上面的那个反引号，不是
单引号），例如：“CMD="1s”。
口在变量名前加S可以取得该变量的值，使用echo或printf命令可以显示变量的
值，SA和S{A}的写法不同，但效果是一样的。
用echo等命令输出变量的时候，也可用单引号、双引号、反引号，例如：ccho
SA、ccho"SA"、ccho"SA'，它们的用法和前面变量内容定义的总结是一致的。
---
## Page 53
第3章Shell变量的核心基础加识与实践签
口Sdbname_tname，当变量后面连接有其他字符的时候，必须给变量加上大括号
{，例如：Sdbname_tname 就要改成S{dbname}_tname。
有关上述变量问题输出的小故事
故事1：老男孩正在给面授班讲课，发了一段内容，结果引起群里网络班学员的
强烈反应，下面是对话内容。
老男孩（31333741）12:42:54
金庸新著
XXX-学员12:43:39
老师，金庸又写啥小说了？#<==看到了吧，这引起了误解
老男孩（31333741）12:42:54
这是一本小说，作者为金庸新，而非金庸，但是给读者造成的感觉是（金庸}
新著。
Sdbname_tname变量就类似于这个金唐新著，会引起歧义，因此要改成
S{dbname}_tname，Shell 就会认为只有dbname是变量了。
老男孩（31333741）12:44:45
如果真的是金庸新著，就要像这样用大括号分隔开，S（金庸）新著。
故事2：老男孩运维班20期的李同学在他媳妇看电视剧时发现了这个金庸新著，
于是他将电视剧停下来，还截图发给了我。
唐新著天子心经
可见形象的比喻学习对学生的影响非常深远！养成将所有字符串变量用大括号括
起来的习惯，在编程时将会减少很多问题。不过老男孩也并不是一直都这么做，因为
多输入内容会造成效率不高，但是金唐新著的问题确实要多注意。
3.3.2变量定义及变量输出说明
有关Shell变量定义、赋值及变量输出加单引号、双引号、反引号与不加引号的简
---
## Page 54
3跟老男孩学Linux运维：Shel编程实战
要说明见表3-2。
表3-2单引号、双引号、反引号与不加引号的知识说明
名称
解释
台w
所见即所得，即输出时会将单引号内的所有内容都原样输出，或者措述为单引号里面看到的是什
么就会输出什么，这称为强引用
双引号
输出双引号内的所有内容：如果内容中有命令（要反引下）、变量、特殊转义符等，会先把变量、
（默认）
命令、转义字符解析出结果，然后再输出最终内容，推荐使用，这称为调引用
赋值时，如果变量内容中有空格，则会造成赋值不完整。面在输出内容时，会将含有空格的字符
串视为一个整体来输出；如果内容中有命令（要反引下）、变量等，则会先把变量、命令解析出结
无引号
果，然后输出最终内容；如果字符串中带有空格等特殊字符，则有可能无法完整地输出，因此需要
改加双引号。一般连续的字符申、数字、路径等可以不加任何引号进行赋值和输出，不过最好是用
双引号替代无引号的情况，特别是对变量慰值时
反引号
一般用于引用命令，执行的时候命令会被执行，相当于$O，赋值和输出都要用”将命令引起来
提示：这里仅为LinuxShell下的结论，对于awk语言会有点特别，有关情况下文
会有测试讲解。
老男孩的建议：
口在脚本中定义普通字符串变量时，应尽量把变量的内容用双引号括起来。
口单纯数字的变量内容可以不加引号。
口希望变量的内容原样输出时需要加单引号。
以下是单引号、双引号与不加引号的实战演示。
范例3-8：对由反引号引起来的date命令或S（date）进行测试。
[rootoldboy-]echotoday is date
today lsdate
<单到号引起内容时，你看到什么就会显示什么
[rootgoldboy-]echotoday isdate
today1sdate<-单引号引起内容时，你看到什么就会显示什么，内容中有命令时即使通过
及引号引起来也没有用
[rootoldboy-]echo*today is date*
[rootoldboy -]echo*today 1sdate
today is date
today is Sun Sep 11 15:12:30 cST2016
<对输出内容加双引号时，如果显面是变量或用反引号引起来的命令，则会先把变量或命令解析成
具体内容再显示
[root@oldboy-]#echo'todayiss（date)
#<=S（）的功能和反引号相网
today is Sun Sep 11 15:12:30 CST 2016
[rooteoldboy -]+echo today i8S（date)
<导空格的内容不加引号，同样可以正确
地输出，但不建议这么做
---
## Page 55
today isSun Sep 11 15:12:30 CST2016
<==对于连续的字符串等内容输出一般可以不加引号，但加发引号比较保险，所以推尊使用。
范例3-9：变量定义后，在调用变量输出打印时加引号测试。
[rooteoldboy-] oLDBOY=testchar8
<==创建一个不带引号的变量并赋值。
[rooteoldboy -]echo SOLDBOY
<==不加引号，显示变量解析后的内容。
testchars
[rooteoldboy-]echo'sOLDBOY
<加单别号，显示变量本身。
$OLDBOY
[rootaoldboy-]echo*soLDBOY*
#<==加取引号，显示变量内容，引号内可以
是变量、字符串等。
testchars
范例3-10：使用三剑客命令中的grep过滤字符串时给过滤的内容加引号。
[rootθoldboy~]#cat grep.1og
<==待测试的内容。
testchars
[rooteoldboy-]grepSoLDBOYgrep.1og<=将sOLDBOY签析为结果后进行过。
oldboy
testchars
[root@oldboy-]grep SOLDBOYgrep.1og<==将sOLDBOY繁析为结果后进行过滤，同
双引号的情况，但不建议这样使用，没有特殊需要时应一律加双引号。
testchars
范例3-11：使用awk调用Shell中的变量，分别针对加引号、不加引号等情况进行测试。
首先在给Shell中的变量赋值时不加任何引号，这里使用awk输出测试结果。
[rootθo1dboy-]#ETr-123
<=定义变量ETT并赋值123，没加引号。