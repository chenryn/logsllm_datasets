VAvB”"moVe/from16vAA,vBBBB”"moVe/16vAAAA,vBBBB”
Dalvik指令集通过””后缀来表示不同的类型，常见的类型有
---
## Page 829
CTF特训营：技术详解、解题方法与
24.1.4指令特点8
829/1144
规类型的字节码，而32位的字节码没有后缀。
下面就来介绍几个经常用到的指令。
1.返回指令
常见的返回指令有return-void、returnvAA、return-widevAA
returm-objectvAA，返回指令是函数结尾时运行的最后一条指令，将
向调用者返回指定值（也可能返回空）。需要注意的是，所有函数最
后调用的指令都必须是返回指令，如果没有返回值也必须调用retum
void，否则编译会不通过。
2.方法调用指令
方法调用指令的模板是“invoke-kind{vA，vB，vC}，method”和
"invode-kind/range{vAAAA.vBBBB},method"，其中参数写在方法名
之前，这两种指令的区别就是后面的指令可以使用范围表示参数
Kind可设置为virtual表示调用实例的虚方法，super表示调用实例
的父类方法，direct表示调用实例的直接方法，static表示调用实例的
静态方法，interface表示调用实例的接口方法。
方法调用的返回值必须使用“move-resultl-”类指令来获取，例
---
## Page 830
CTF特训营：技术详解、解题方法与.
24.1.4指令特点
830/1144
如上面代码中的move-result-objectvo
3.跳转指令
跳转指令是我们修改代码时经常遇到的指令，常见的有“goto
"if-testvA，vB，cond”"if-testzvAA,cond”等，其中的test可以取“eq”
"ne”“ge”等值，与x86汇编类似。
有了这些知识储备，上面的BakSmali反汇编代码应该很容易就能
看懂了。Dalvik指令集在网上都有公开的资料，可以非常方便地查到
指令集的知识不是本章的重点，这里不再详述。
---
## Page 831
CTF特训营：技术详解、解题方法与
24.2静态分析
831/1144
24.2静态分析
逆向APK程序的第一步就是对APK文件进行反编译，生成
BakSmali格式的代码或者直接生成Java代码，随后才能读懂程序逻
辑，分析可能的攻击面，最终找出可能的出题点，进而解出题目。
本节将介绍Dalvik层的静态分析方法，以及与之配合的几款优秀
工具。
---
## Page 832
CTF特训营：技术详解、解题方法与
24.2.1使用Apktool反编译APK程序832/1144
24.2.1使用Apktool反编译APK程序
Apktool是一款优秀的APK文件反编译工具，能够将APK文件解压
缩，并且将其中的DEx文件转化为BakSmali代码，将resources.arsc
文件转化为XML等可阅读格式，是反编译APK文件的首选工具。此外
Apktool还整合了Smali和BakSmaliApktool工具，支持对修改之后的
BakSmali代码进行重新打包并签名，因此也是破解Android程序最常
用到的工具。
Apktool是开源软件，官方网站位于https://ibotpeaches.github.io/
Apktool。Apktool是跨平台工具，同时也支持Windows/macOS/Linux
系统；Apktool需要Java的支持，且Java版本需要大于1.7。读者可以
按照以下步骤自己编译一个最新版的Apktool：
$gitclonehttps://github.com/iBotPeaches/Apktool.git
ScdApktool
SgradlewbuildshadowJar
#编译生成的jar文件位于brut.apktool/apktool-cli/build/ibs/中
同样也可以直接下载运行编译好的发行版本（可以访问https://
ibotpeaches.github.io/Apktool/install，按照其说明下载安装最新版的
---
## Page 833
CTF特训营：技术详解、解题方法与
24.2.1使用Apktool反编译APK程序
833/1144
Apktool），不过这里还是建议能够自己编译，因为如果目标APK针对
Apktool做了混淆，那么编译好的发行版是没有符号的，因此会无法
定位到被混淆的位置。
安装完成后，可以使用“-version”参数查看Apktool的版本，如
果成功回显则表示安装成功，例如
$apktool-version
2.2.0
Apktool使用过程中常用的编译和反编译功能命令如下，可以运
反编译APK文件：apktool d[ecode][options]
编译APK文件：apktoolb[uild][options]
接下来使用一个具体的实例来讲解。有一个app-debug.apk文件
首先在命令行下进入APK文件所在的目录，然后输入命令“apktoold
app-debug.apk"，Apktool就会开始解析APK文件，输出部分信息后
反编译之后的内容会存入同自录下的同名文件夹中，具体如下：
apktooldapp-debug.apk
I: Using Apktool 2.2.0 on app-debug.apk
---
## Page 834
CTF特训营：技术详解、解题方法与
24.2.1使用Apktool反编译APK程序
834/1144
I: Loading resource table...
I:DecodingAndroidManifest.xml withresources..
I: Loading resource table from file:/Users/user/Library/apktool/framework/1.apk
I:Regular manifest package...
I:Decoding file-resources...
I: Decoding values */*XMLs...
I: Baksmaling classes.dex..
I:Copying assets and libs...
I: Copying unknown files...
I: Copying original files...
进入同目录下的app-debug目录，目录结构如下：
S tree-L1
AndroidManifest.xml
apktool.yml
original
res
smali
其中，AndroidManifest.xml文件为APK中的AndroidManifest.xmll
文件解析之后的可读格式，apktool.yml文件保存着Apktool工具在反编
译过程中使用的相关信息，original自录保存看APK文件中原始的
AndroidManifest.xml文件和META-INF目录，res目录包含了APK中使
用的各种资源文件，smali自录就是Apktool将DEX文件反编译后的
BakSmali反汇编代码。
之前APK文件直接通过zip解压后还有一个resources.arsc文件
---
## Page 835
CTF特训营：技术详解、解题方法与
24.2.1使用Apktool反编译APK程序
835/1144
里面存放着APK中所用资源的名字、ID、类型等关联信息，该文件去
哪了呢？原来，Apktool将resources.arsc文件解密为多个xML文件存
放到res/values/目录下了，具体如下：
Streeres/values
res/values
— attrs.xml
bools.xml
colors.xml
drawables.xml
ids.xml
integers.xml
public.xml
strings.xml
styles.xml
其中，比较重要的是public.xml文件。这个文件中存放着Android
程序中所使用的ID与类型、变量名的对应关系，当我们在阅读代码的
时，只需要到public.xml中查找该ID所对应的变量类型和变量名，再
到相应的XML文件中（例如strings.xml）查找相应的值即可。
AndroidManifest.xml文件存放了该APK的相关属性，做过Android
开发的读者应该了解这个文件。AndroidManifest.xml是每个APK中必
需的文件。它位于整个项目的根目录，描述了APK中需要向外暴露的
---
## Page 836
CTF特训营：技术详解、解题方法与
24.2.1使用Apktool反编译APK程序
836/1144
组件（例如Activity、Service等），声明它们各自的实现类，声明主程
序的入口类，声明所需权限等。
我们拿到一个APK文件，反编译后查看的第一个文件一般都是
AndroidManifest.xml。一般情况下，首先要查看该APK包含几个
Activity，随后找到该APK的启动Activity：随后查看一下Application组
件中是否含有android：name参数，该参数所指向的Activity会在启动
Activity实例化之前初始化，有一些题目会将部分关键代码放在这个类
中；此外还要留意一下该APK有没有定义其他组件，例如Service、
Receiver等，它们可能会用来实现不同进程的RPC调用；关注一下该
APK所需的权限，寻找可能的攻击面等
如下所示的是一个简单的AndroidManifest.xml
package=com.xx.sample.myapplication">
cactivity
android:name=".MainActivity"
android:label="@string/app_name”
android:theme=@style/AppTheme.NoActionBar”>
---
## Page 837
CTF特训营：技术详解、解题方法与
24.2.1使用Apktool反编译APK程序
837/1144
本例中，该APK中只包含了一个Activity，其完整路径是
com.xx.sample.myapplication.MainActivity，同时这个Activity也是该
APK的启动Activity。Activity中若包含
和
属性，即为启动
Activity，一个APK中只能有一个Activity。
随后，就可以去smali目录中修改了，smali目录是按照Java的目
录格式设置的，能够比较容易地找到目标代码。
修改完成后，返回上层目录，使用apktoolbapp-debug编译出新
的APK。在未指定输出目录的情况下，Apktool会将编译后的APK放在
反编译后的dist目录下：
$ apktool b app-debug
I:Using Apktool 2.2.0
I:Checking whether sources has changed.
I:Checking whether resourceshas changed..
I: Building apk fil..
---
## Page 838
CTF特训营：技术详解、解题方法与
24.2.1使用Apktool反编译APK程序
838/1144
I:Copying unknown files/dir..
Streeapp-debug/dist
app-debug/dist
app-debug.apk
此时编译完成后的APK还不能安装，因为它还没有签名，我们可
以使用GoogleAndroid源码库（AOSP）提供的签名工具对它进行签
名。
首先，下载编译签名程序signapk.jar，可以从地址https://
android.googlesource.com/platform/build/+/master/tools/signapk/src/
com/android/signapk/SignApk.java处下载并用javac编译。
随后我们需要生成自己的签名文件，这里可以选择使用openssl
生成签名文件，遵循如下步骤：
openssl genrsa -out tmpkey.pem 4096
openssl req-new-key tmpkey.pem-out tmprequest.pem
 nowedaydu yuis-wedsnbdu u-6 sep-bn-x ssuedo
pem
openssl pkcs8 -topk8 -outform DER -in tmpkey.pem -inform PEM -out mykey.pk8 -
nocrypt
weddun w
这里的mykey.pem是公钥证书，mykey.pk8是私钥文件。
此外，我们也可以使用Android源码库中提供的测试用签名文件
---
## Page 839
CTF特训营：技术详解、解题方法与
24.2.1使用Apktool反编译APK程序
839/1144
testkey.pk8和testkey.x509.pem（下载地址（需要梯子）为https:/l
android.googlesource.com/platform/build/+/master/target/product/
security/）。随后就可以签名了，命令如下：
app-debug/dist/signed.apk
签名完成之后就可以装到手机里运行了。
---
## Page 840
CTF特训营：技术详解、解题方法与
24.2.2使用dex2jar生成jar文件840/1144
24.2.2使用dex2jar生成jar文件
使用Apktool工真可以反编译出APK文件中的BakSmali代码，但
是BakSmali代码毕竟还是比较底层的代码，理解起来比较困难，那么，
有没有什么办法能够直接将APK文件反编译成Java代码呢？答案是有
的，那就是使用dex2jar工具包
dex2jar，顾名思义，就是将DEx文件转换为Jar文件，除此之外
还包含很多其他功能。dex2jar是并源工具，源码可以直接从
GitHub（https://github.com/pxb1988/dex2jar）上克隆下来，然后切换
到dex2jar自录，运行”/gradlewbuild”命令，稍等片刻编译出最新
版的dex2jar。
编译后的程序位于dex-tools/build/distributions/目录下，该目录下
会生成两个压缩包，类似于dex-tools-2.1-SNAPSHOT.zip和dex
tools-2.1-SNAPSHOT.tar。随意挑选其中一个文件，解压到任意目录
并且将解压后的目录加入系统的环境变量中，就可以正常使用
dex2jar了
dex2jar中最常用的功能就是将APK安装包中的DEX文件转化为
---
## Page 841
CTF特训营：技术详解、解题方法与
24.2.2使用dex2jar生成jar文件
841/1144
Jar文件，命令很简单，使用d2j-dex2jar.shfilename，即可在同目录
下生成同名的Jar文件，如何查看这个Jar文件将在24.2.3节介绍。
dex2jar工具包中还包含了其他多个有用的工具。
d2j-apk-sign：可以为APK签名的小工具，该工具将使用dex2jar
工具包的签名文件进行签名，可以替代24.2.1节中使用SignApk工具
签名的方法。
d2j-baksmali：可以将APK安装包中的DEx文件转化为BakSmali
代码，作用与24.2.1节Apktool的部分功能相似。
d2j-smali:可以将BakSmali代码编译回DEX文件。
d2j-dex2smali:可以将DEx文件转化为BakSmali代码。
d2j-dex-recompute-checksum：可以重新计算DEx文件校验和的
小工具，有时候我们直接修改DEX文件后，可以用这个小工具重新计
算校验和。
还有一些其他工具，有兴趣的读者可以使用“-h”参数查看各个
小工真的真体功能。
---
## Page 842
CTF特训营：技术详解、解题方法与
24.2.3使用jd-gui查看反编译的lava代码
842/1144
24.2.3使用jd-gui查看反编译的Java代码
24.2.2节中我们提取了Jar文件，那么如何利用Jar文件查看Java
代码呢？这里我们可以使用jd-gui工真来实现Jar文件的反编译
jd-gui是开源软件，读者可以从GitHub上（https://github.com/
java-decompiler/jid-gui）直接将其克隆下来，切换到jd-gui的目录，运
行“./gradlewbuild”命令，稍等片刻即可编译出最新版的jd-gui。
编译完成后的jd-gui程序位于build/libs目录下，文件名类似于jd-
gui-1.4.0.jar，将jd-gui-1.4.0.jar复制到自己喜欢的路径，使用命令
java-jarjd-gui-1.4.0.jar即可运行。
运行界面如图24-1所示，直接将Jar文件拖入，即可反编译查看
Java代码。
---
## Page 843
CTF特训营：技术详解、解题方法与
24.2.3使用jd-gui查看反编译的lava代码
843/1144
File
Edit Navigation
Search Help
ndroid.support.design.widget;
internal
android.os.Bundle:
ndreid.app.Dialog
ort andraid,suazert,x?,azn.AesC
 AppBarLayout.class
BottomSheetBehavior
omSheetDialog.class
.cla
xtends AnpCompatDialogfragrent
public iatog onCreateiatog(Bunele para
heetDial
return sew BottonSheetDialog(getContext(),getThene(1);
CellapsingTextHelper.cla
Cell
ingToolbarLayout
DrawableUtils.class
Floa
FloatingActionButtonEcla
acla:
 FloatingActionButtonlcs.c
Floati
HeaderBehavior.class
Floati
HeaderScrollingViewB
 NavigationView.class
MathUtils.class
 ShadowDrawableiWrapper
图24-1JD-GUI布局
---
## Page 844
CTF特训营：技术详解、解题方法与
24.2.4使用FernFlower反编译Jar文件844/1144
24.2.4使用FernFlower反编译Jar文件
有时候，我们使用jd-gui反编译Jar文件时，有的类或者方法会反
编译失败，这是由于Java代码过于复杂等原因造成的jd-gui无法正常
反编译，这时，我们可以使用另一款工具FermFlower来反编译Jar文
件。
FermFlower工具由JetBrains公司开发，该公司也开发出很多知名