Therefore, in order to ensure separation-of-duty when re-
quired, there is a need to deﬁne additional constraints to
prevent a user from being assigned to more than one role
type. This will be discussed in section 3.3.
3.2. Authorisation and Obligation Policies
Authorisation policies are speciﬁed in the doctrine to
grant participants access to services and permissions to use
resources, while obligation policies facilitate security man-
agement of the community. These policies are based on
Ponder [10] and they are grouped according to the role type
speciﬁcations. Hence, this is similar to the role-based ac-
cess control (RBAC) model [28, 11]. An authorisation pol-
icy deﬁnes what actions a subject role is permitted to in-
voke on a target object. It protects the target objects from
unauthorised actions and this policy is enforced at the tar-
get. An obligation policy speciﬁes the actions that must be
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
performed by the subject role when an event occurs [10].
The proposed framework groups all authorisation and
obligation policies according to the subject role, i.e., the
rights and duties of that role within the community.
In
mobile networks, users who provide services are expected
to enforce the authorisation policies and all service requests
are then granted based on these policies. This implies that
all service providers must be able to interpret the policies
and subsequently enforce them [23].
The obligation
policies are perceived as duties of the users to manage
the security of their corresponding services as well as
the community as a whole.
In general, they are used to
facilitate the management and adaptation of the community
to changes in its membership or context.
inst role NormalUser {
inst auth+ listenMusicAuth {
Target NormalUser, PremiumUser;
Action listen(); }
inst auth+ readNewsAuth {
Target NewsServer;
Action read(); }
}
Consider for example the composite policy illustrated
above, it speciﬁes that the role normal user is authorised to
listen to songs (music ﬁles) shared by other normal users
and premium users, it can also read news provided by the
news server.
inst role PremiumUser {
inst auth+ downloadMusicAuth {
Target PremiumUser;
Action download(); }
inst auth+ listenMusicAuth { ... }
inst auth+ readNewsAuth { ... }
inst oblig maliciousDownloadAction {
3*maliciousDownload;
On
Action disable() → log() → notif y(); }
}
Similarly, the composite policy for the premium user
comprises three authorisation and one obligation policies.
The authorisation policies specify that a premium user can
download music ﬁles from other premium users as well as
tune in live, i.e. listen to songs provided by other normal
user and premium user. The same access privilege is given
to read news. The obligation policy speciﬁes that when the
system detects that there are three consecutive malicious at-
tempts to download the user’s shared music ﬁles, the user
must disable the ﬁle shares, log all the unauthorised ac-
cess details, and subsequently notif y other members of the
community. (→ indicates that the actions are executed se-
quentially).
3.3. Constraint Speciﬁcations
Based on a doctrine, a community can be instantiated
when a group of users who satisfy the URA policies wishes
to engage in an ad-hoc collaboration. However, prior to
the instantiation of the community, certain security require-
ments must be fulﬁlled. The doctrine provides the ﬂexibility
to specify constraints that express the security requirements
of the community. These constraints are evaluated when the
community is ﬁrst instantiated and whenever the member-
ship changes.
Three types of constraints can be speciﬁed: separation-
of-duty (SoD), cardinality and community establishment.
SoD constraints ensure that a user is not assigned to two
or more conﬂicting roles at the same time in the commu-
nity. The purpose of SoD rules is to prevent one user from
doing all parts of a task that should require two or more
users, in order to prevent collusion or fraud [17]. The car-
dinality constraint restricts the number of role instances in
the community as well as the total number of participants,
while the community establishment constraint is a deﬁni-
tion of conditions on the instantiation of a community. It
ensures amongst others that the indispensable roles and ser-
vices are available prior to the establishment of the commu-
nity, and deﬁnes the minimum number of instances for each
role type. In essence, a community can only be instantiated
when the required role types have been instantiated.
For example, a community establishment constraint can
be speciﬁed as there must exist at least two normal users
prior to the establishment of the community.
Scom establishment = {|normal user| ≥ 2}
3.4. Trusted Key Speciﬁcations
The issuer of the doctrine can include the public-keys of
the relevant CAs and AAs in the doctrine. These public-
keys are required by the participants when verifying each
other’s credentials, e.g. public-key or SPKI/SDSI [27] cer-
tiﬁcates. Essentially, the issuer knows which public-keys
of the CAs are needed for the URA policies, hence it can
asserts the authenticity of these public-keys by including
them as trusted key speciﬁcations in the doctrine. This is
necessary because in most cases, it is unlikely that every
participant maintains the public-keys of all potential issuers
and due to the lack of a continuous online connection to
the ﬁxed network infrastructure, these authorities cannot
be reached at all times. Thus, it is difﬁcult to verify the
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
participant’s credentials without the public-key of creden-
tial issuers. However, this implies that participants have to
trust the issuer to provide accurate information regarding
the public-keys that are needed to check URA policies.
In the scenario described in section 3, in order to ver-
ify the URA policies, one would need the public-keys of
iTunes, napster, and AOL. These public-keys can be in-
cluded in the doctrine as trusted key speciﬁcations.
T K = {P ubiT unes, P ubnapster, P ubAOL}
The doctrine is encoded using XML in order to provide
interoperability between various mobile devices. The hash
of the doctrine is used as its identiﬁer, so that any changes to
the doctrine can be detected. All doctrines are signed using
XMLSignature [3].
4. Deployment and Enforcement Architecture
Having deﬁned the policy speciﬁcations for the ad-hoc
community, this section brieﬂy discusses the assumptions in
the deployment model, the process of creating and dissem-
inating the doctrine, the process of bootstrapping a com-
munity and the management of community membership in
terms of participants joining and leaving the community.
4.1. Assumptions
A community doctrine deﬁnes the rights and duties of
the participants as well as what behaviour a user can expect
from other participants in the community, so all participants
need to be aware of the doctrine, (i.e., have a copy of the
doctrine).
The devices of participants can have heterogeneous ca-
pabilities ranging from laptops, to PDAs and low powered
sensors. Since some devices will not be able to perform
complex cryptographic operations, it is useful to distinguish
between high-capability devices that can be used to perform
coordination tasks and the other devices. High-end devices
will need to perform computationally intensive tasks on be-
half of the other devices that must trust them to perform
these tasks. As previously discussed, this trust is not unrea-
sonable for two reasons: First, because without it the com-
munity would not be formed (or at least not with any form
of security) and second because these devices have satisﬁed
the URA policies.
We assume that there is an underlying routing infrastruc-
ture that supports the relay of data packets in an ad-hoc
network. Ad-hoc routing is still an active research area,
and many routing algorithms have been proposed [24, 16].
Some of them have been extensively tested in simulations.
Every participant maintains its own attribute certiﬁcates
and key pair that must be stored in a secure keystore.
Doctrines for the instantiation of a particular type of
community can be issued by any organisation or any in-
dividual, e.g., in a smart home scenario, a user can issue
a doctrine to interconnect mobile devices at home. Doc-
trines can be disseminated through broadcast messages or
made available on websites. Generally, their content is not
expected to be conﬁdential although their integrity must be
preserved. However, users willing to join a community gov-
erned by a particular doctrine may need to trust the issuer of
that doctrine with respect to the accuracy of the certiﬁcation
and attribute authority’s public-keys the doctrine comprises.
It is entirely at the user’s discretion whether to request join-
ing a community governed by a particular doctrine or not.
In most cases, users will have deﬁned a set of preferences in
terms of the communities that they wish their devices to join
spontaneously. Such preferences are speciﬁed as Boolean
expressions on the attributes of the doctrine (including the
privileges and obligations of the role the user would wish to
play, trust in the issuer of the doctrine, and current context).
4.2. Bootstrapping a Community
When mobile users come into proximity of each other,
they can set up an ad-hoc community. One of the users with
a device of high CPU capability (a laptop or PDA), uco,
can initiate the bootstrapping of the community, by broad-
casting a (cid:1)REQUEST(cid:2) message. The request must contain
the doctrine and credentials of uco. When other users re-
ceive the request, they evaluate the doctrine against their
preferences and decide whether they would like to accept it.
They also have to authenticate uco and check that its cre-
dentials satisfy the URA policy for the role it proposes to
fulﬁl. Subsequently, they send a (cid:1)REPLY(cid:2), which contains
their respective credentials to uco if they want to participate.
For all the replies received, uco checks the credentials to
ensure that they satisfy the URA policies in the doctrine.
Then, uco evaluates the constraint speciﬁcations of the doc-
trine, to ensure that SoD, cardinality and community estab-
lishment constraints are satisﬁed. All admitted users are
then assigned a node id based on the time of admission and
a membership list is created for the community. This list
is then broadcast to all participants in a (cid:1)MEMBERSHIP(cid:2)
message and uco automatically becomes the coordinator of
the community. The community is thus created. Through-
out the lifetime of the community, the coordinator is respon-
sible for enforcing the URA policies, evaluating constraints,
maintaining the membership list and responding to admis-
sion requests. Thus, only devices with high CPU capabili-
ties can be selected to act as coordinator.
The use of a single coordinator may be controversial as it
introduces a central point of failure and also a vulnerability
if the coordinator is malicious and/or compromised. How-
ever, the alternative, i.e., that every participant performs all
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
of the veriﬁcations, leads to numerous redundant compu-
tations (veriﬁcations of credentials and of constraints) and
also excludes from the community all devices that do not
have the computational capabilities to do it. Furthermore,
to evaluate the community constraints, the information re-
garding the size of the community is needed and up-to-date
membership information must be maintained. Replicating
the coordinator requires strong consistency of membership
lists. Although ISIS [4, 5] and other traditional group man-
agement systems [26, 20, 2] as well as virtual synchrony [6]
deﬁned an approach to maintain the consistency of mem-
bership lists, they are not suitable for ad-hoc devices that
have scarce resources, because they impose signiﬁcant com-
munication overheads among the coordinators. Hence, the
simplest way is to have a coordinator that maintains weak
consistency of the membership list by periodically broad-
casting it to all participants.
Note that the unavailability of the coordinator does not
entirely prevent the community from functioning. The main
role of the coordinator is to maintain the membership of
the community and verify credentials and constraints for
new members. Thus, if the coordinator becomes unavail-
able, new participants cannot be added to the community.
However, existing participants can continue their interac-
tions within the current community membership without in-
terruption. A compromised coordinator is a more serious
threat as it can admit rogue participants to the community.
The only way to detect this is if the rogue participants vio-
late the policies and the other participants detect this.
4.3. Joining the Community
A new user, unew periodically discovers new commu-
It automatically requests to join
nities in the vicinity.
the discovered communities that use doctrines conforming
to its preferences. This is achieved by sending a (cid:1)JOIN
REQUEST(cid:2) to the coordinator of that community, which
contains unew’s credentials and the role, ru that it wishes to
join as.
Upon receipt of the join request, the coordinator checks
that unew’s credentials satisfy the URA policies and checks
that the admittance of unew does not violate the cardinal-
ity constraints. If unew requests to join the community in
more than one role, the coordinator must also ensure that
SoD constraints are not violated. A node id is then as-
signed to the admitted user and the coordinator sends a
(cid:1)JOIN REPLY(cid:2) to unew. Subsequently, the membership list
is updated and broadcast to all participants.
4.4. Service Access and Subsequent Interactions
Access to services provided by participants is regulated