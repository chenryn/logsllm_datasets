r
r
s
s
s
h
h
h
a
a
a
r
r
r
e
e
e
.
.
.
R
R
RR
e
e
e
m
m
m
o
o
o
v
v
v
e
e
e
s
s
s
i
i
i
g
g
g
n
n
n
e
e
e
r
r
r
i
i
i
n
n
n
f
f
f
o
o
o
r
r
r
m
m
m
a
a
a
t
t
t
i
i
i
o
o
o
n
n
n
f
f
f
r
r
r
o
o
o
m
m
m
s
s
s
i
i
i
g
g
g
n
n
n
a
a
a
t
t
t
u
u
u
r
r
r
e
e
e
o
o
o
b
b
b
j
j
j
e
e
e
c
c
c
t
t
t
.
.
.
Figure 6. A certiﬁed document. The Price per share was manipulated using
a sneaky signature which overwrites the price with $100,000,000. The PDF
viewer displays this signature in UI-Layer 2. By manipulating the signature
object, the signer information can be removed.
this case, the victim opening the ﬁle can get suspicious and
refuse to accept the document, even though the certiﬁcation is
valid.
Improving the Stealthiness of SSA. To circumvent
this
limitation, we found a bypass to hide this information in UI-
Layer 2. Thus, the victim is not able to determine the attacker’s
manipulations (see Figure 6). Basically, we have three tasks to
improve the attack execution: 1) hide the signature information
in the signature panel on UI-Layer 2 , 2) skip the validation of
attacker’s signature, and 3) make the signature ﬁeld read-only
to make it indistinguishable from the text content. To solve
all tasks, we need to adjust one object – the one responsible
for the appearance of the signature. It contains three relevant
parameters: /P, /V, and /Ff. The /P is a reference to the
page where signature should be displayed. We found out
that if this reference is not valid, the signature disappears
from the signature panel on UI-Layer 2, but the malicious
content is still shown on the page. A signature added to a
PDF document is usually veriﬁed by processing its referenced
signature data. If the stored cryptographic values are correct
and the document is not manipulated within the signed area,
the signature is technically valid. The /V parameter references
the signature value which needs to be validated. We found out
that if this reference is also invalid, the signature validation
is skipped. Finally, we set the parameter /Ff to 1 which
means that the content is read-only. If a certiﬁed document is
opened in a common PDF application, signatures can only be
added to free signature ﬁelds provided by the certiﬁer. Adding
empty signature ﬁelds is normally no longer possible within
the application. However, the speciﬁcation does not prohibit
adding empty signature ﬁelds to a certiﬁed document. By using
frameworks like Apache PDFBox2, empty signature ﬁelds can
be placed anywhere in the document and ﬁlled with arbitrary
content.
C. Limitations of EAA and SSA
Both attacks can be detected by searching for a speciﬁc text
which is hidden behind the annotation or the signature. The
editor signals that a searched term is found but the user is
unable to see it. Another limitation could occur dependent
of the UI Layer. In the default conﬁguration, most PDF
applications do not show the applied annotations on UI-Layer
1. The evil annotations are also not shown on UI-Layer 2.
Nevertheless, it should be mentioned that the UI Layer of some
PDF applications can be conﬁgured to show all UI Layers after
opening a PDF document.
D. It’s Not a Bug, It’s a Feature
We classiﬁed EAA and SSA as vulnerabilities in the PDF
speciﬁcation. Considering the fact that the person certifying
the document could know that additional signatures and anno-
tations might be added to the document, the risks caused by
these attacks should be known and accepted by all involved
entities. However, our attacks reveal that signatures and anno-
tations can 1) be customized to appear as a normal text/images
above the signed content, 2) they can be indistinguishable from
the original content, and 3) their indications can be hidden
from UI Layers. Only 3) requires application implementation
issues. Studying the PDF speciﬁcation and guidelines regard-
ing the validation of certiﬁed documents, we did not ﬁnd
any security considerations mentioning the potential risks and
summarizing the best practices. This leads to the assumption
that the risks mentioned in this paper have been overlooked
and need to be addressed on speciﬁcation and implementation
level.
E. Permission Mismatch
Besides the speciﬁcation, PDF applications can also im-
plement the basic veriﬁcation of the permissions of certiﬁed
documents wrongly. These issues enable prohibited changes.
We determine two permission mismatches according to the
allowed changes described in Table I:
• The adding of annotations and signatures is allowed
regardless of the permission level P1 / P2.
• Annotations are allowed to be added starting at permis-
sion level P2.
Faulty Permission Veriﬁcation. As already described, the
EAA and SSA attack classes require certain permission levels
with regard to document certiﬁcation. However, this restriction
requires the correct implementation of the permission levels
within the individual PDF implementations. If an application
does not check the set permissions P1 and P2 at all, or not
2https://pdfbox.apache.org/
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:12 UTC from IEEE Xplore.  Restrictions apply. 
81492
completely, the attack classes can be successfully executed
even at lower permission levels. Editing functions within the
PDF applications can be easily outsmarted, for example, to add
annotations to PDFs with permission levels lower than P3. For
this purpose, it is sufﬁcient to manually adjust the permission
level P1 or P2 of a certiﬁed document to P3 using a text
editor. Of course, this initially breaks the certiﬁcation, since
this corresponds to a change in the signed area. However, the
invalid certiﬁcation state is, in practice, no reason for the PDF
application to prevent functions such as adding annotations
or signatures. Now that an annotation has been added to the
document, the permission level can be manually reset to the
original value P1 or P2. The signed area now corresponds
to the initial state again and the certiﬁcation is valid from a
cryptographic point of view. The annotation is now outside the
signed area within an Incremental Update. If a PDF application
does not check when opening the PDF whether the attached
Incremental Updates are allowed within the initial permission
level, the execution of the attack classes EAA and SSA on a
lower permission level is possible.
VI. METHODOLOGY: AUTOMATIC VIEWER ANALYSIS
WITH PDF TESTER
During our research, we created 45 attack vectors in certiﬁed
documents. Each vector must be tested on each of the 26
viewer applications using the black box analysis method. The
sheer number of resulting test cases clearly indicated, that a
fully automated evaluation system is inevitable. To automate
the creation and evaluation process, we developed the analysis
tool PDF Tester. PDF Tester’s workﬂow is depicted in Ap-
pendix C. PDF Tester’s functionality can be divided into two
tasks: (1) the creation of the application’s screenshot, including
the certiﬁcation validation status and (2) the evaluation of the
attack vector according to the screenshot’s validation status.
We implemented two approaches for this purpose: a pixel-
based and a text recognition approach.
Screenshot Creation. The screenshot creation is used to doc-
ument manipulation effects in the individual PDF application.
The user enters the paths to the PDF ﬁles and PDF applications
in PDF Tester. PDF Tester automates the opening of PDF
documents in different PDF applications and automatically
takes a screenshot that includes UI-Layer 1.
Screenshot Evaluation: Pixel-based. The screenshot eval-
uation compares all created screenshots on a pixel
level.
It needs a reference image (i.e.,
the ground truth) of the
unmanipulated PDF document. The PDF Tester estimates the
difference between the exploit screenshots and the reference.
If the difference is close to zero, the tested PDF has a valid
certiﬁcation and thus, the manipulations did not invalidate
the certiﬁcation. The pixel-base approach is very fast, but it
requires a uniform image template and offers no ﬂexibility
in the form and design of the content. All screenshots must
have the exact same resolution. Offsets, for example, due to
a window movement, or opening of sub-menus, are causing
issues.
Screenshot Evaluation: Text-based. To analyze screenshots
that do not have the properties for a direct pixel comparison,
we implemented text recognition. For this purpose, we use the
Tesseract Optical Character Recognition (OCR) engine. The
screenshots to be analyzed and the terms to be searched for in
them serve as input. PDF Tester extracts the entire text from
the image ﬁles and compares it with provided search terms.
This approach is slower than the pixel-based one, but it can
be used to circumvent its limitations.
VII. EVALUATION
In this section, we describe the results of our analysis. We
created 45 certiﬁed documents during our research and tested
26 applications. The results are shown in Table IV.
A. Test Environment
To create and evaluate the certiﬁed documents, we used a
three-stage test environment, divided into systems for certiﬁ-
cation, manipulation, and validation. The certiﬁer’s system is
based on Windows 10 and uses Adobe Acrobat to create and
certify the PDF documents. Based on their respective market
shares [41, 42], this selection makes the best combination
regarding a real-world scenario. The attacker’s system uses
the same software combination as the certiﬁer’s system. The
victim’s system splits up into systems with Windows 10,
macOS Catalina, and Ubuntu 18.04.4 as a Linux derivative.
The private keys used for certiﬁcation are only available on
the certiﬁcation system.
B. Tested Applications
that not all
To analyze the handling of different PDF applications
on regularly certiﬁed documents, we developed four sample
documents. We found out
tested applications
could handle certiﬁed documents correctly. The Master PDF
Editor application did not show a single certiﬁed document
as valid under macOS. PDF Studio 2019 in the Standard and
Pro variants (i.e., Windows, macOS, and Linux) changed the
certiﬁcation status to unknown if any subsequent changes were
added. Since this was also the case for permitted changes, such
as the addition of annotations in P3 or further signatures in
P2, we were unable to make a statement about the certiﬁcation
status. Since an evaluation for Master PDF Editor (macOS)
and PDF Studio 2019 was not possible due to the fuzzy
implementation concerning certiﬁed documents, this applica-
tion was excluded from further consideration. We additionally
observed limited support for certiﬁed documents in PDF Editor
6 Pro and PDFelement Pro under macOS; a valid veriﬁcation
of the certiﬁcation was only possible for documents without
additional signatures.
C. Results
We evaluated all 26 PDF applications on each of the
three UI Layers against EAA and SSA attacks. We used two
different types of exploits for this purpose: 1) exploits that
are compliant to the PDF speciﬁcation and 2) exploits that
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:12 UTC from IEEE Xplore.  Restrictions apply. 
91493
Application
Version
OS
Adobe Acrobat Reader DC
Adobe Acrobat Pro 2017
Expert PDF 14
Foxit PhantomPDF
Foxit Reader
LibreOfﬁce Draw
Master PDF Editor
Nitro Pro
Nitro Reader
PDF Architect
PDF Editor 6 Pro
PDFelement Pro
PDF-XChange Editor
Perfect PDF 8 Reader
Perfect PDF 10 Premium
Power PDF Standard
Soda PDF Desktop
Adobe Acrobat Reader DC
Adobe Acrobat Pro 2017
Foxit PhantomPDF
Foxit Reader
PDF Editor 6 Pro
PDFelement Pro
LibreOfﬁce Draw
2020.009.20074
2017.011.30171
14.0.28.3456
9.7.1.29511
9.7.1.29511
6.4.2.2
5.4.38
13.13.2.242
5.5.9.2
7.1.14.4969
6.5.0.3929
7.5.1.4782
8.0 (Build 336.0)
8.0.3.5
10.0.0.1
3.10.6687
11.2.46.6035
2020.009.20074
2017.011.30171
3.4.0.1012
3.4.0.1012
6.5.0.3929
7.5.9.2925.5460
6.4.2.2
s
w
o
d
n
i
W
S
O
c
a
m
(cid:2)
(cid:2)
(cid:4)(cid:3)
(cid:2)
(cid:2)
(cid:4)(cid:3)
(cid:2)
(cid:2)
(cid:2)