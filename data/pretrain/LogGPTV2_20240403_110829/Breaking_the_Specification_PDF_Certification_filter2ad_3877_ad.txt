### Share and Remove Signer Information from Signature Object

**Figure 6. A Certified Document.** The price per share was manipulated using a sneaky signature, which overwrites the price with $100,000,000. The PDF viewer displays this signature in UI-Layer 2. By manipulating the signature object, the signer information can be removed. In this case, the victim opening the file may become suspicious and refuse to accept the document, even though the certification is valid.

### Improving the Stealthiness of SSA

To circumvent this limitation, we discovered a method to hide this information in UI-Layer 2, making it impossible for the victim to detect the attacker's manipulations (see Figure 6). To improve the attack execution, we need to address three tasks:
1. Hide the signature information in the signature panel on UI-Layer 2.
2. Skip the validation of the attacker’s signature.
3. Make the signature field read-only to blend it with the text content.

To achieve these tasks, we need to adjust one specific object responsible for the appearance of the signature. This object contains three relevant parameters: `/P`, `/V`, and `/Ff`.

- **/P**: A reference to the page where the signature should be displayed. If this reference is invalid, the signature disappears from the signature panel on UI-Layer 2, but the malicious content remains visible on the page.
- **/V**: References the signature value that needs to be validated. If this reference is also invalid, the signature validation is skipped.
- **/Ff**: Set to 1, making the content read-only. In a certified document, signatures can only be added to free signature fields provided by the certifier. However, the specification does not prohibit adding empty signature fields to a certified document. Using frameworks like Apache PDFBox2, empty signature fields can be placed anywhere in the document and filled with arbitrary content.

### Limitations of EAA and SSA

Both attacks can be detected by searching for specific text hidden behind the annotation or the signature. The editor signals that a searched term is found, but the user cannot see it. Another limitation is related to the UI Layer. In the default configuration, most PDF applications do not show the applied annotations on UI-Layer 1, and the evil annotations are also not shown on UI-Layer 2. However, some PDF applications can be configured to show all UI Layers after opening a PDF document.

### It’s Not a Bug, It’s a Feature

We classified EAA and SSA as vulnerabilities in the PDF specification. Given that the person certifying the document might be aware that additional signatures and annotations could be added, the risks caused by these attacks should be known and accepted by all involved entities. Our attacks reveal that signatures and annotations can:
1. Be customized to appear as normal text/images above the signed content.
2. Be indistinguishable from the original content.
3. Have their indications hidden from UI Layers. Only the third point requires application implementation issues.

Studying the PDF specification and guidelines regarding the validation of certified documents, we did not find any security considerations mentioning the potential risks and summarizing best practices. This suggests that these risks have been overlooked and need to be addressed at both the specification and implementation levels.

### Permission Mismatch

In addition to the specification, PDF applications can also implement the basic verification of the permissions of certified documents incorrectly. These issues enable prohibited changes. We identified two permission mismatches according to the allowed changes described in Table I:
- Adding annotations and signatures is allowed regardless of the permission level P1 / P2.
- Annotations are allowed to be added starting at permission level P2.

**Faulty Permission Verification:** As described, the EAA and SSA attack classes require certain permission levels with regard to document certification. However, if an application does not check the set permissions P1 and P2, or does so incompletely, the attack classes can be executed even at lower permission levels. Editing functions within the PDF applications can be easily bypassed, for example, to add annotations to PDFs with permission levels lower than P3. For this purpose, it is sufficient to manually adjust the permission level P1 or P2 of a certified document to P3 using a text editor. This initially breaks the certification, but the invalid certification state does not prevent functions such as adding annotations or signatures. After adding the annotation, the permission level can be reset to the original value P1 or P2. The signed area now corresponds to the initial state, and the certification is valid cryptographically. The annotation is now outside the signed area within an Incremental Update. If a PDF application does not check whether the attached Incremental Updates are allowed within the initial permission level when opening the PDF, the execution of the attack classes EAA and SSA on a lower permission level is possible.

### Methodology: Automatic Viewer Analysis with PDF Tester

During our research, we created 45 attack vectors in certified documents. Each vector must be tested on each of the 26 viewer applications using the black box analysis method. The number of resulting test cases clearly indicated the need for a fully automated evaluation system. To automate the creation and evaluation process, we developed the analysis tool PDF Tester. PDF Tester’s workflow is depicted in Appendix C. Its functionality can be divided into two tasks:
1. Creation of the application’s screenshot, including the certification validation status.
2. Evaluation of the attack vector based on the screenshot’s validation status.

We implemented two approaches for this purpose: a pixel-based and a text recognition approach.

**Screenshot Creation:** This is used to document manipulation effects in individual PDF applications. The user enters the paths to the PDF files and PDF applications in PDF Tester. PDF Tester automates the opening of PDF documents in different PDF applications and automatically takes a screenshot that includes UI-Layer 1.

**Screenshot Evaluation: Pixel-based:** This compares all created screenshots on a pixel level. It needs a reference image (i.e., the ground truth) of the unmanipulated PDF document. PDF Tester estimates the difference between the exploit screenshots and the reference. If the difference is close to zero, the tested PDF has a valid certification, and thus, the manipulations did not invalidate the certification. The pixel-based approach is very fast but requires a uniform image template and offers no flexibility in the form and design of the content. All screenshots must have the exact same resolution. Offsets, due to window movement or sub-menu openings, can cause issues.

**Screenshot Evaluation: Text-based:** To analyze screenshots that do not have the properties for direct pixel comparison, we implemented text recognition using the Tesseract Optical Character Recognition (OCR) engine. The screenshots to be analyzed and the terms to be searched for serve as input. PDF Tester extracts the entire text from the image files and compares it with provided search terms. This approach is slower than the pixel-based one but can be used to circumvent its limitations.

### Evaluation

In this section, we describe the results of our analysis. We created 45 certified documents during our research and tested 26 applications. The results are shown in Table IV.

**Test Environment:**
To create and evaluate the certified documents, we used a three-stage test environment, divided into systems for certification, manipulation, and validation. The certifier’s system is based on Windows 10 and uses Adobe Acrobat to create and certify the PDF documents. Based on their respective market shares [41, 42], this selection makes the best combination regarding a real-world scenario. The attacker’s system uses the same software combination as the certifier’s system. The victim’s system splits up into systems with Windows 10, macOS Catalina, and Ubuntu 18.04.4 as a Linux derivative. The private keys used for certification are only available on the certification system.

**Tested Applications:**
To analyze the handling of different PDF applications on regularly certified documents, we developed four sample documents. We found that not all tested applications could handle certified documents correctly. For example, Master PDF Editor did not show a single certified document as valid under macOS. PDF Studio 2019 in the Standard and Pro variants (i.e., Windows, macOS, and Linux) changed the certification status to unknown if any subsequent changes were added. Since this was also the case for permitted changes, such as the addition of annotations in P3 or further signatures in P2, we were unable to make a statement about the certification status. Due to the fuzzy implementation concerning certified documents, Master PDF Editor (macOS) and PDF Studio 2019 were excluded from further consideration. We also observed limited support for certified documents in PDF Editor 6 Pro and PDFelement Pro under macOS; a valid verification of the certification was only possible for documents without additional signatures.

**Results:**
We evaluated all 26 PDF applications on each of the three UI Layers against EAA and SSA attacks. We used two different types of exploits for this purpose:
1. Exploits that are compliant with the PDF specification.
2. Exploits that are not compliant with the PDF specification.

The detailed results are summarized in Table IV.