28
Chapter 2 Technology Background
2:(18) r1 = map[id:158]
18 11 00 00 9e 00 00 00 00 00 00 00 00 00 00 00
4: (bf) r2 = r10
bf a2 00 00 00 00 00 00
[..]
The BPF instruction opcodes are explained in Appendix E.
There is also a v1 sua1 modifier, which emits control flow graph information in DOT format,
for visualization by external software. For example, using GraphViz and its dot(1) directed graph
tool [20]:
20p*euopouerotq d1
0:push
rbp
m0V
$0x38, rsp
\rsp, 1rbp
4:
sub
bo :
sub
$0x28,trbp
f:
m.0v
rbx, 0x0 (rbp)
13:
m0V
[dqxs] gx0*E[x]
17:mov
r14, 0x10 (9rbp)
Ib:
mOv
1f1
r15, 0x18 (1rbp)
xor
teax, $eax
21:
mOV
(dqzs)0zxo *xex)
25:
m.0V
0x70 1rdi) , 3cdi
 struct request *req = ctx->d1
29:mov
rdi, =0x8 (9rbp)
 tsp = bpf_nap_1cokup_ales ( (vo:d *)bpf_pseudo_cd (1, -1) , sreq| 
2d:movabs $0xffff96e680ab0000, $edi
37:
3a: add
m0V
rbp, lrs1
soxfrrrrrrrrrrrrrre, szs1
 tsp = bpf_nap_lookup_elen.I (void *)bpf_pseudo_fd11, -1) , 5reg] 
3e: callq oxfffrffffc39a49c1
[..]
As shown earlier, the presence of BTF for this program allows bpftool(8) to include the source
lines; otherwise, they would not be present.
bpftool btf
bpftool(8) can also dump BTF IDs. For example, BTF ID 5 is for the BCC block I/O done program:
 bpftool btf dunp id 5
[1]PTR * (anon) * type_id=0
[2]  TYPEDEF *u64* type_1d=3
[3] TYPEDsF *_u64* type_id=4
[4] INT *long long unsigned int* size=8 bits_offset=0 nx_blts=64 encoding= (none)
[5] Fuvc_pRoro * (anon) * ret_type_id=2 vlen=4
'pkt* type_id=1
*off* type_id=2
---
## Page 67
OE
Chapter 2 Technology Background
‘bofs′ type_id=2
=pdk,zs0,
[6]Fuxc *bpf_dext_pkt* type_id=5
[7] FUHc_PR0ro * [anon] * ret_type_1d=0 vlen=5
‘pkt′ type_id=1
off* type_id=2
bofs′ type_id=2
=pdk,zs0,
val* type_id=2
L=pted/ ,axdeurpgdq, oana [81
0T=pTadK ,43pduTn, asosaxL [61
[10] INT *long unslgned Lnt* slze=8 blts_offset=0 nz_bit.s=64 encoding= (none)
[...]
thread_info* type_id=348 bits_offset=0
state' type_ld=349 bit.s_offset=128
stack* type_id=1 bits_offset=192
usage* type_1d=350 bit.s_offset=256
flags* type_id=28 bits_offset=288
..-]
This output shows that BTF includes type and struct information.
2.3.5Viewing BPF Instructions:bpftrace
z qgm os op teo aoengdq  qm suoonnsu 4d8 arua ue (s)dunpd3 a[LM
+ bpftrace =r biolatency .bt
Attaching 4 pzobes...
Progzan ID: 677
Bytecode:
0: (bf) r6 = ε1
Dt6z = [x (cα] ↑
[ = (↓ 0[x) [ 9[n]  (q9] 1
3: (b7) r1 = 1635021632
[ = (g-0x) ( cn] (∈9]
20002 - [x 4cs
[3 = [9[ 0↑x] [< F9n]  (q] 19
7: (b7) r1 = 0
[3 = (7- 0ta) (￥ en)  (∈) 18
9: (18) x7 = Dxfffr96e697298800
11: (85) cal1 bpf_get_smp_processor_idf8
12 1just realized I should have made t  for consistency.
---
## Page 68
2.3 Extended BPF (eBPF)
31
12: (bf) r4 = r10
13: (07) z4 += -16
14: (bf) r1 = rf
15: (bf) r2 = rT
16: (bf) r3 = r0
17: (b7) r5 = 15
18: (85) cal1 bpf_perf_event_outputf25
19: (b7) r0 = 0
20 : (95) exit
[..-]
This output will also be printed if there is a bpftrace internal error. If you develop bpftrace
internals, you may find it easy to run afoul of the BPF verifier, and have a program rejected by the
kernel. At that point, these instructions will be printed out, and you will need to study them to
determine the cause and develop the fix.
Most people will never encounter a bpftrace or BCC internal error and never see BPF instructions.
If you do encounter such an issue, please file a ticket with the bpftrace or BCC projects, or
consider contributing a fix yourself.
2.3.6BPF API
To provide a better understanding of BPF capabilities, the following sections summarize selected
parts of the extended BPF API, from include/uapi/linux/bpf.h in Linux 4.20,
BPF Helper Functions
A BPF program cannot call arbitrary kernel functions. To accomplish certain tasks with this limitation,
*helper” functions that BPF can call have been provided. Selected functions are shown in Table 2-2.
Table 2-2  Selected BPF Helper Functions
BPF Helper Function
Description
bpf_map_lookup_elem(map, key)
Finds a key in a map and returms its value (pointer).
bpf_map_update_elem(map, key, value,
fax fq pajpalas Ague aun jo anjen aui sajepdn
flags)
bpf_map_delete_elem(map, key)
Deletes the entry selected by key from the map.
bpf_probe_read(dst, size, src)
Safely reads size bytes from address src and stores in dst.
(swxg
Returns the time since boot, in nanoseconds.
bpf_trace_printk(fmt, fmt_size, .)
A debugging helper that writes to TraceFS trace(_pipe).
bpf_get_current_pid_tgid()
Returns a u64 containing the current TGID (what user space
calls the PID) in the upper bits and the current PID (what
user space calls the kemel thread ID) in the lower bits.
bpf_get_current_comm(buf, buf_size)
Copies the task name to the buffer.
bpf_perf_event_output(ctx, map,
Writes data to the perf_event ring buffers; this is used for
data, size)
per-event output
---
## Page 69
32
Chapter 2 Technology Background
BPF Helper Funetion
Description
bpf_get_stackid(ctx, map, flags)
Fetches a user or kermel stack trace and retuns an
identifier.
bpf_get_current_task()
Returns the current task struct, This contains many
Jao o syul pue ssaooud Sujuunu aun noqe sllerap
structs containing system state. Note that these are all
considered an unstable API.
bpf_probe_read_str(dst, size, ptr)
Copies a NULL terminated string from an unsafe pointer to
the destination, Imited by size (including the NULL byte).
bpf_perf_event_read_value(map,
Reads a perf_event counter and stores it in the buf. This
flags, buf, size)
is a way to read PMCs during a BPF program.
()dno8ouaunoa8dq
Returns the current cgroup ID.
bpf_spin_lock(lock),
Concurrency control for network programs.
bpf_spin_unlock(lock)
Some of these helper functions are shown in the earlier bpftool(8) ×1ated output, and bpftrace
ndno 
The term current in these descriptions refers to the currently running threadthe thread that is
currently on-CPU.
Note that the include/uapi/linux/bpf.h file often provides detailed documentation for these
helpers. Here is an excerpt from bpf_get_stackid():
* int bpf_get_stackid(struct pt_reg *ctx, struct bpf_map *msp, uf4 flags)
Description
Malk a user or a kernel stack and return its id. To achieve
thls, the helper needs *ctx*, which Ls a pointer to the context
on which the tracing progran is executed, and a pointer to a
*nap* of tyPe **BPF_SAP_TYPE_STACK_TRACE**,
The last argument, *flags*, holds the nunber of stack frames to
skip (fron 0 to 255), masked with
**BPF_F_SKIP_FIELD_MASK**, The next bits can be used to set
a conbination of the folloving flagst
**BPF_F_USER_STACK**
Collect a user space stack instead of a kernel stack.
**BPF_F_FAST_STACK_CMP**
Compaze atacks by hash only.
**BPF_F_REUSS_STACKID**
If tvo different stacks hash into the sane *stackid*,
discard the old one.
---
## Page 70
2.3  Extended BPF (eBPF)
33
The stack id retrieved is a 32 bit long integer hanile vhich
can be furthez conbined vith other data (including other stack
ids) and used as a key into maps. This can be useful for
ndo-gro xo stqdexb euetg se qons] sqdeab go Aaetaen e Botaexeue6
 (2@eB
[ . - - ]
These files can be browsed online from any site that hosts the Linux source, for example:
https:/github.com/torvalds/linux/blob/master/include/uapi/inux/bpf.h.
 uau pauap-aemos sog pso ateeae soong rdau ao sue are aa
current version of Linux (5.2) has 98 helper functions.
bpf_probe_read()
dd o pasa s! Idg u ssaooe rouan zadpu sueodun penoed est Opearsqod gdq
registers and the stack (and BPF maps via helpers). Arbitrary memory (such as other kernel
memory outside of BPF) must be read via bpf_probe_read(), which performs safety checks and
disables page faults to ensure that the readls do not cause faults from probe context (which could
cause kernel problems).
Apart from reading kernel memory, this helper is also used to read user-space memory into
kernel space. How this works depends on the architecture: On x86_64, the user and kernel
address ranges do not overlap, so the mode can be determined by the adldress. This is not the
it is anticipated that additional helpers will be required, such as bpf_probe_read_kernel() and
case for other architectures, such as SPARC [21], and for BPF to support these other architectures
bpf_probe_read_user(0.13
BPF Syscall Commands
Table 2-3 shows selected BPF actions that user space can invoke.
Table 2-3 Selected BPF syscall Commands
bpf_cmd
Description
BPF_MAP_CREATE
Creates a BPF map: a flexible storage object that can be used as
a key/value hash table (associative array).
BPF_MAP_L0OKUP_ELEM
Looks up an element via a key.
BPF_MAP_UPDATE_ELEM
 Updates an element, given a key.
BPF_MAP_DELETE_ELEM
Deletes an element, given a key.
BPF_MAP_GET_NEXT_KEY
Iterates over all keys in a map.
BPF_PROG_LOAD
Verifies and loads a BPF program.
BPF_PROG_ATTACH
Attaches a BPF program to an event.
BPF_PROG_DETACH
Detaches a BPF program from an event.
BPF_OBJ_PIN
Creates a BPF object instance in / sys/fs/bpf.
13 This need was raised by David S. Miler at LSPMM 2019.
---
## Page 71
34
Chapter 2 Technology Background
These actions are passed as the first argument to the bpf(2) syscall. You can see them in action
by using strace(1). For example, inspecting the bpf(2) syscalls made when running the BCC
execsnoop(8) tool:
strace -ebpf execsnoop
value_size=4, nax_entries=B, map_flags=0, 1nner_map_fd=0, .--1, 72) = 3
opf (BPF_MAP_CREATE, (nsp_tYPe=BPE_MAP_TYFE_PERF_EVENT_ARRAY, key_s1ze=4,
bpf (BPF_PROG_LOAD, (prog_type=BPF_PROG_TrPE_KFROBE, insn_cn.t=513,
insns=0x7E31c0a89000, 11cense=*GPL*, 1og_leve1=0, 1og_s1ze=0, 1og_buf=0,
kern_version=266002, prog_f1ags=0, .--1, 72) = 4
bpf (BPF_PROG_LOAB,_ (prog_type=BPF_PROG_TYPE_KPOBE, 1nsn_cn t=60,
kerm_vezsion=266002, prog_flags=0, ---1, 721 = 5
insns=0x7f31c0a8b7d0, 1icense=*GPL*, 1og_lerel=0, log_size=0, 1og_buf=0,
FCOMM
FID
PPID  RET ARGS
bpf (BPF_MAP_0PDATE_sLEM, (map_fd=3, key=0x7f31baB1eB80, value=0x7r31ba81e910,
flags=BPF_ANY), 72) = 0
bpf (BPF_MAP_UPDATE_ELEN
(map_fd=3, key=0x7r31ba81e910, value=0x7r31ba81e880,
flags=BPF_ANY), 72) = 0
[..-]
Actions are highlighted in bold in this output. Note that I normally avoid using strace(1) as its
it here because it already has translation mappings for the bpf(2) syscall, turning numbers into
current ptrace( implementation can greatly slow the target process—by over 100-fold [22]. I used
readable strings (e.g., *BPF_PROG_LOAD°).
BPF Program Types
Different BPF program types specify the type of events that the BPF program attaches to, and the
arguments for the events. The main program types used for BPF tracing programs are shown in
Table 2-4.
Table 2-4  BPF Tracing Program Types
bpf_prog_type
Description
BPF_PROG_TYPE_KPROBE
For kprobes and uprobes
BPF_PROG_TYPE_TRACEPOINT
For tracepoints
BPF_PROG_TYPE_PERF_EVENT
For perf_events, including PMCs
BPF_PROG_TYPE_RAW_TRACEPOINT
For tracepoints, without argument processing
The earlier strace(1) output included two BPF_PROG_LOAD calls of type BPF_PROG_TYPE_
KPROBE, as that version of execsnoop(8) is using a kprobe and a kretprobe for instrumenting the
beginning and end of execve).
There are more program types in bpf.h for networking and other purposes, including those shown
in Table 2-5.
---
## Page 72
2.3 Extended BPF (eBPF)
35
Table 2-5 Selected Other BPF Program Types
bpf_progtype
Description
BPF_PROG_TYPE_SOCKET_FILTER
For attaching to sockets, the original BPF use case
BPF_PROG_TYPE_SCHED_CLS
For traffic control classification
BPF_PROG_TYPE_XDP
For eXpress Data Path programs
BPF_PROG_TYPE_CGROUP_SKB
For cgroup packet (skb) filters
BPF Map Types
BPF map types, some of which are listed in Table 2-6, define different types of maps.
Table 2-6Selected BPF Map Types
bpf_map_type
Description
BPF_MAP_TYPE_HASH
A hash-table map: key/value pairs
BPF_MAP_TYPE_ARRAY
An array of elements
BPF_MAP_TYPE_PERF_EVENT_ARRAY
An interface to the perf_event ring buffers for emitting
trace records to user space
BPF_MAP_TYPE_PERCPU_HASH
A faster hash table maintained on a per-CPU basis
BPF_MAP_TYPE_PERCPU_ARRAY
A faster array maintained on a per-CPU basis
BPF_MAP_TYPE_STACK_TRACE
Storage for stack traces, indexed by stack IDs
BPF_MAP_TYPE_STACK
Storage for stack traces
ARRAY, which was used by execsnoop(8) for passing events to user space for printing.
The earlier strace(1) output included a BPF_MAP_CREATE of type BPF_MAP_TYPE_PERF_EVENT_
sasodmd jepads 1og ugdq u sadkq deu asou ueu are asatL
2.3.7 BPF Concurrency Controls
BPF lacked concurrency controls until Linux 5.1, when spin lock helpers were added. (However, 
they are not yet available for use in tracing programs.) With tracing, parallel threads can look up
and update BPF map fields in parallel, causing corruption where one thread overwrites the update
from another. This is also known as the “lost update” problem where concurrent reads and writes
overlap, causing lost updates. The tracing front ends, BCC and bpftrace, use the per-CPU hash and
CPU to use, preventing parallel threads from updating a shared location. A map that counts
array map types where possible to avoid this corruption. They create instances for each logical
events, for example, can be updated as a per-CPU map, and then the per-CPU values can be
combined when needed for the total count.
---
## Page 73
36
Chapter 2 Technology Background
As a specific example, this bpftrace one-liner uses a per-CPU hash for counting
.1()qunco = B 1 peezsga:x, 8- ooexagdg ydqe- 8oeaas 
bpf (BPF_MAP_CREATE, (nsp_type=BPF_MAP_TYPB_PERCPU_HASB, key_size=8, ralue_size=B,
nax_enteles=128, nap_flags=0, 1nner_nap_fd=0), 72) = 3
[...]