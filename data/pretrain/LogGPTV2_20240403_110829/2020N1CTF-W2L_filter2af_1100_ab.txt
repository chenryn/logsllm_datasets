    static int packet_set_ring(struct sock *sk, union tpacket_req_u *req_u,
            int closing, int tx_ring)
    {
            ...
            err = -EINVAL;
            if (unlikely((int)req->tp_block_size tp_block_size)))
                goto out;
            min_frame_size = po->tp_hdrlen + po->tp_reserve;
            if (po->tp_version >= TPACKET_V3 &&
                req->tp_block_size req3.tp_sizeof_priv) + min_frame_size)
                goto out;
            if (unlikely(req->tp_frame_size tp_frame_size & (TPACKET_ALIGNMENT - 1)))
                goto out;
            rb->frames_per_block = req->tp_block_size / req->tp_frame_size;
            if (unlikely(rb->frames_per_block == 0))
                goto out;
            if (unlikely(rb->frames_per_block > UINT_MAX / req->tp_block_nr))
                goto out;
            if (unlikely((rb->frames_per_block * req->tp_block_nr) !=
                        req->tp_frame_nr))
                goto out;
            ...
    }
然后，分配环形缓冲区块：
    //v5.9/source/net/packet/af_packet.c
    static int packet_set_ring(struct sock *sk, union tpacket_req_u *req_u,
            int closing, int tx_ring)
    {
            ...
            err = -ENOMEM;
            order = get_order(req->tp_block_size);
            pg_vec = alloc_pg_vec(req, order);
            if (unlikely(!pg_vec))
                goto out;
            ...
    }
应该注意的是，`alloc_pg_vec()`使用内核页面分配器分配块：
    //v5.9/source/net/packet/af_packet.c
    static char *alloc_one_pg_vec_page(unsigned long order)
    {
    ...
        buffer = (char *) __get_free_pages(gfp_flags, order);
        if (buffer)
            return buffer;
    ...
    }
    static struct pgv *alloc_pg_vec(struct tpacket_req *req, int order)
    {
    ...
        for (i = 0; i tp_version) {
            case TPACKET_V3:
                /* Block transmit is not supported yet */
                if (!tx_ring) {
                    init_prb_bdqc(po, rb, pg_vec, req_u);
                } else {
                    struct tpacket_req3 *req3 = &req_u->req3;
                    if (req3->tp_retire_blk_tov ||
                        req3->tp_sizeof_priv ||
                        req3->tp_feature_req_word) {
                        err = -EINVAL;
                        goto out_free_pg_vec;
                    }
                }
                break;
            ...
    }
`init_prb_bdqc()`函数将提供的环形缓冲区参数复制到环形缓冲区结构的`prb_bdqc`字段，基于它们计算其他一些参数，设置块超时计时器并调用`prb_open_block()`初始化第一个块：
    //v5.9/source/net/packet/af_packet.c
    static void init_prb_bdqc(struct packet_sock *po,
                struct packet_ring_buffer *rb,
                struct pgv *pg_vec,
                union tpacket_req_u *req_u)
    {
        struct tpacket_kbdq_core *p1 = GET_PBDQC_FROM_RB(rb);
        struct tpacket_block_desc *pbd;
        ...
        pbd = (struct tpacket_block_desc *)pg_vec[0].buffer;
        p1->pkblk_start    = pg_vec[0].buffer;
        p1->kblk_size = req_u->req3.tp_block_size;
        ...
        p1->blk_sizeof_priv = req_u->req3.tp_sizeof_priv;
        rwlock_init(&p1->blk_fill_in_prog_lock);
        p1->max_frame_len = p1->kblk_size - BLK_PLUS_PRIV(p1->blk_sizeof_priv);
        prb_init_ft_ops(p1, req_u);
        prb_setup_retire_blk_timer(po);
        prb_open_block(p1, pbd);
    }
`prb_open_block()`函数所做的事情是将`tpacket_kbdq_core`结构的`nxt_offset`字段设置为指向每个块的私有区域之后：
    //v5.9/source/net/packet/af_packet.c
    /*
     * Side effect of opening a block:
     * 1) prb_queue is thawed.
     * 2) retire_blk_timer is refreshed.
     */
    static void prb_open_block(struct tpacket_kbdq_core *pkc1,
        struct tpacket_block_desc *pbd1)
    {
        ...
        pkc1->pkblk_start = (char *)pbd1;
        pkc1->nxt_offset = pkc1->pkblk_start + BLK_PLUS_PRIV(pkc1->blk_sizeof_priv);
        ...
    }
####  封包接收
每当接收到新数据包时，内核都应将其保存到环形缓冲区中。
这里的关键功能是`__packet_lookup_frame_in_block()`，它可以执行以下操作：
  1. 检查当前活动块是否有足够的空间容纳数据包。
  2. 如果是，则将数据包保存到当前块并返回。
  3. 如果不是，则分派下一个块并将数据包保存在那里。
    //v5.9/source/net/packet/af_packet.c
    /* Assumes caller has the sk->rx_queue.lock */
    static void *__packet_lookup_frame_in_block(struct packet_sock *po,
                            struct sk_buff *skb,
                            unsigned int len
                            )
    {
        struct tpacket_kbdq_core *pkc;
        struct tpacket_block_desc *pbd;
        char *curr, *end;
        pkc = GET_PBDQC_FROM_RB(&po->rx_ring);
        pbd = GET_CURR_PBLOCK_DESC_FROM_CORE(pkc);
        ...
        curr = pkc->nxt_offset;
        pkc->skb = skb;
        end = (char *)pbd + pkc->kblk_size;
        /* first try the current block */
        if (curr+TOTAL_PKT_LEN_INCL_ALIGN(len) tp_block_size req3.tp_sizeof_priv) + min_frame_size)
    ---    >             (int)(req->tp_block_size -    >               BLK_PLUS_PRIV(req_u->req3.tp_sizeof_priv)) 
req3.tp_sizeof_priv`设置了较高的位，则将表达式转换为int会导致大的正值而不是负的值：
    A = req->tp_block_size = 4096 = 0x1000
    B = req_u->req3.tp_sizeof_priv = (1  0
当将`req_u-> req3.tp_sizeof_priv`复制到`init_prb_bdqc()`中的`p1->
blk_sizeof_priv`（请参见上面的代码段）中时，它将被限制在两个较低的字节上，因为后者的类型是无符号的。
因此，该漏洞基本上可以绕过所有检查，将`tpacket_kbdq_core`结构的`blk_sizeof_priv`设置为任意值。
如果在源码 `net/packet/af_packet.c`中搜索查找使用`blk_sizeof_priv`的位置，则会发现在以下两个地方都在使用它。
第一个位于`init_prb_bdqc()`中，然后立即对其进行分配以设置`max_frame_len`。
`p1->max_frame_len`的值表示可以保存到块中的最大帧大小。
由于可以控制`p1->blk_sizeof_priv`，因此可以使`BLK_PLUS_PRIV(p1-> blk_sizeof_priv)`大于`p1->
kblk_size`。 这将导致`p1->max_frame_len`具有很大的值，大于块的大小。
这可以在将帧复制到块中时绕过大小检查，从而导致内核堆越界写入。
第二个位于`prb_open_block()`，它将初始化一个块。 `pkc1->
nxt_offset`表示地址，内核将在接收到新数据包后在其中写入新地址。 内核无意覆盖块头和每个块的私有数据，因此它使该地址指向它们之后。
由于控制`blk_sizeof_priv`，因此可以控制`nxt_offset`的最低两个字节。 这可以控制越界写入的偏移量。
## 漏洞利用
###  设置沙盒
由于进程必须在控制其网络名称空间的用户名称空间中具有`CAP_NET_RAW`功能，在编译内核阶段开启`CONFIG_USER_NS=y`
    void setup_sandbox() {
            int real_uid = getuid();
            int real_gid = getgid();
            //取消共享用户名称空间，以便将调用进程移到新的用户名称空间中，
            //该名称空间不会与任何先前存在的进程共享。 
            //就像由clone（2）使用CLONE_NEWUSER标志创建的子进程一样，