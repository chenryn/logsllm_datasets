title:SNARKBlock: Federated Anonymous Blocklisting from Hidden Common Input
Aggregate Proofs
author:Michael Rosenberg and
Mary Maller and
Ian Miers
2022 IEEE Symposium on Security and Privacy (SP)
SNARKBlock: Federated Anonymous
Blocklisting from Hidden Common Input
Aggregate Proofs
Michael Rosenberg∗
Mary Maller
Ian Miers
Department of Computer Science,
University of Maryland
PI:EMAIL
Ethereum Foundation
PI:EMAIL
Department of Computer Science,
University of Maryland
PI:EMAIL
policy [Fac]) and the linking of disparate pseudonymous
identities within and across platforms. Tying users’ online
speech to a centralized identity provider poses major
problems for the decentralized web and user privacy, and
can have a chilling effect on free speech.
Providing both privacy and moderation is a challenge:
a user posting anonymously on a forum presents two
problems to the forum operator, termed service provider:
access control and revocation. First, because the user’s
identity is unknown at post submission, the service
provider cannot verify that the user is authorized to post
(i.e., isn’t blocked). Second, because the user’s identity is
not linked to the post, and posts are not linked together,
the service provider cannot revoke the user’s posting
permissions (i.e., block the user) if their current post
violates forum policies. Linking posts together raises
privacy concerns that may be undesirable on a single
forum and are intolerable if applied across the web.
A. Zero-knowledge proofs of blocklist non-membership
BLAC [TAKS10] introduces the ﬁrst solution to anony-
mous blocklisting without a trusted third party. It provides
users with long-term identities and allows them to prove,
in zero-knowledge, that they are not on a blocklist.
The approach introduced by BLAC, which we formal-
ize as a zero-knowledge blocklist (ZKBL), is conceptually
simple. A user’s identity is a random PRF key k
signed by an identity provider to ensure Sybil resistance.
Anonymous comments and posts are associated with a
tag tag := Prfk(nonce). A blocklist L consists of tuples
(tag, nonce) from offending posts. A user attests that
they are not blocked by presenting a fresh (tag, nonce)
pair and a zero-knowledge proof that 1) tag is com-
puted correctly; 2) k is signed by a valid party; and
3) none of the blocklisted tags were generated by k,
i.e., ∀(tag(cid:48), nonce(cid:48)) ∈ L : Prfk(nonce(cid:48)) (cid:54)= tag(cid:48). A user is
blocked by placing an offending (tag, nonce) pair on L .
6
5
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
Abstract—Zero-knowledge blocklists allow cross-platform
blocking of users but, counter-intuitively, do not link users
identities inter- or intra-platform, or to the fact they were
blocked. Unfortunately, existing approaches (Tsang et al.
’10) require that servers do work linear in the size of the
blocklist for each veriﬁcation of a non-membership proof.
We design and implement SNARKBLOCK, a new protocol
for zero-knowledge blocklisting with server-side veriﬁcation
that is logarithmic in the size of the blocklist. SNARKBLOCK
is also the ﬁrst approach to support ad-hoc, federated
blocklisting: websites can mix and match their own blocklists
from other blocklists and dynamically choose which identity
providers they trust.
Our core technical advance, of separate interest, is the
HICIAP zero-knowledge proof system, which addresses
a common problem in privacy-preserving protocols: us-
ing zero-knowledge proofs for repeated but unlinakble
interactions. Rerandomzing a Groth16 proof achieves
unlinkability without the need to recompute the proof
for every interaction. But this technique does not apply
to applications where each interaction includes multiple
Groth16 proofs over a common hidden input (e.g., the
user’s identity). Here, the best known approach is to
commit to the hidden input and feed it to each proof, but
this creates a persistent identiﬁer, forcing recomputation.
HICIAP resolves this problem by aggregating n Groth16
proofs into one O(logn)-sized, O(logn)-veriﬁcation time
proof which also shows that the input proofs share a
hidden input. Because HICIAP is zero-knowledge, repeated
shows of the same aggregate or an updated aggregate are
unlinkable even though the underlying Groth16 proofs are
never recomputed.
2
2
0
2
I. INTRODUCTION
Moderation is a powerful tool for combating online
harassment, trolling and spam messages. But banning an
account on one platform has an obvious problem: it leaves
the user free to post under other accounts and on other
platforms. As a result, moderation tends towards stronger
centralized identity providers (e.g., Facebook’s real-name
∗Work supported by a National Defense Science and Engineering
Graduate (NDSEG) Fellowship.
© 2022, Michael Rosenberg. Under license to IEEE.
DOI 10.1109/SP46214.2022.00075
948
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
At its core, a ZKBL is a specialized zero-knowledge
proof on the PRF evaluation, tag inequalities, and identity
signature. Both security and privacy depend, mainly,
on the zero-knowledge proof. This gives ZKBLs their
main advantage: because the proofs are over arbitrary
ban lists,
the system is ad-hoc. We do not need a
central party to coordinate bans as in [BCD+17], [CL02],
[LLX07], [VB20], or worse, a trusted third party who
can deanonymize users [Cha85], [Cv91], [BMW03]. If
ZKBLs also support private federated identity, this is a
major advantage for deployment.
B. Existing ZKBLs are impractical for both clients and
servers
the
current
approach
Unfortunately,
for
ZKBLs [TAKS10] requires the server to do linear
work in the size of the blocklist when verifying a
non-membership attestation. If the size of the blocklist
and the number of attestations per second is proportional
to the number of total users, then the service-provider’s
workload grows quadratically as their site scales. This
is costly under normal circumstances and can be a
major denial of service vector if an attacker can make
concurrent posts or obtain Sybil accounts that are later
banned.
Almost as problematically, proof sizes are also linear
in the size of the blocklist. At 144B per list entry, a
single non-membership proof for a 4M-entry blocklist
would require a client to upload 549MiB of data over a
residential or mobile connection.
C. Our contribution
We design, implement, and benchmark SNARKBLOCK,
a protocol for zero-knowledge blocklists which improves
on the state of the art by offering log-sized proofs and
log-time veriﬁcation.
Beyond improved performance for ZKBLs, SNARK-
BLOCK makes ZKBLs fully ad-hoc and resolves a privacy
and organization problem with deployment. While ban
lists can be operated by anyone, ZKBLs—like any
ban system, anonymous or not—require Sybil-resistant
identities. Existing ZKBLs assume a single trusted issuer
for credentials. In reality, the existence of different issuers
will lead to fragmentation of user’s identities and also ban
lists, reducing anonymity sets and hindering adoption.
SNARKBLOCK removes the need for a single cen-
tralized identity provider by allowing service providers
to dynamically pick the identity providers that they
support. This avoids coordination concerns and allows
different providers to adopt different levels of Sybil
resistance ranging from CAPTCHAs, to cryptocurrency
payment, to real-world identity veriﬁcation. Crucially,
during attestation, the service provider learns only that
the user’s identity was issued by some party in their
accepted identity provider set.
The core of SNARKBLOCK is a new type of zero-
knowledge proof, called HIdden Common Input Ag-
gregate Proofs, or HICIAP (pronounced “high-chop”).
HICIAP is a zero-knowledge proof that aggregates n
Groth16 [Gro16] proofs (of the same underlying circuit)
into a single O(logn)-sized proof, and shows that the
aggregated proofs all verify and all share a common
input which is not revealed to the veriﬁer. It is also
possible to link multiple HICIAP proofs, showing in
zero-knowledge that their hidden common inputs are all
equal. SNARKBLOCK uses HICIAP to aggregate chunk
proofs—Groth16 proofs of non-membership in equally
sized non-overlapping portions of the blocklist.
HICIAP addresses a common problem when using
zkSNARKs in privacy-preserving protocols like SNARK-
BLOCK: repeated interactions can require costly proof
recomputations to ensure unlinkability. When presenting
a single Groth16 proof, the proof can be rerandomized
between interactions, achieving anonymity without recom-
putaton. Unfortunately, when presenting multiple proofs
about a common hidden input—e.g., adding proofs about
subsequent state changes—we must recompute all proofs
since the state-of-the-art approach is to commit to the
hidden input and have all proofs be made with respect
to that public commitment. Since the commitment is a
persistent identiﬁer, it and all proofs relying on it must
be recomputed to achieve anonymity. HICIAP resolves
this by supporting zero-knowledge aggregation of proofs
with a common hidden input.
II. INTUITION FOR A ZKBL CONSTRUCTION
Zero-knowledge Succinct Non-interactive Arguments
of Knowledge (zkSNARKs), appear to offer a path
to ZKBLs with fast veriﬁcation, but
limitations on
prover performance—a common problem for nearly all
zkSNARKs—make this challenging. This is clear when
one examines the costs of using Groth16, a zkSNARK
scheme with notably fast veriﬁcation times.
Existing zkSNARKs can only handle pieces of a block-
list. Producing a zero-knowledge proof of knowledge
is, fundamentally, at least linear in the size of the input,
i.e., the blocklist. But for Groth16 and other zkSNARKs,