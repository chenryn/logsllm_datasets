现在一切都配置好了，我们只需要通过以下命令在副本上启动复制
`start slave;`
或者从 MySQL 8.0.23 开始，
`start replica;`
复制是否成功运行，我们可以通过运行以下命令来确定
`show slave status\G`
或者从 MySQL 8.0.23 开始，
`show replica status\G`
```sh
mysql> show replica status\G
*************************** 1\. row ***************************
             Replica_IO_State: Waiting for master to send event
                  Source_Host: 
                  Source_User: repl_user
                  Source_Port: 
                Connect_Retry: 60
              Source_Log_File: mysql-bin.000001
          Read_Source_Log_Pos: 852
               Relay_Log_File: mysql-relay-bin.000002
                Relay_Log_Pos: 1067
        Relay_Source_Log_File: mysql-bin.000001
           Replica_IO_Running: Yes
          Replica_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Source_Log_Pos: 852
              Relay_Log_Space: 1283
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Source_SSL_Allowed: No
           Source_SSL_CA_File:
           Source_SSL_CA_Path:
              Source_SSL_Cert:
            Source_SSL_Cipher:
               Source_SSL_Key:
        Seconds_Behind_Source: 0
Source_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Source_Server_Id: 1
                  Source_UUID: e17d0920-d00e-11eb-a3e6-000d3aa00f87
             Source_Info_File: mysql.slave_master_info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
    Replica_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Source_Retry_Count: 86400
                  Source_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Source_SSL_Crl:
           Source_SSL_Crlpath:
           Retrieved_Gtid_Set: e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-3
            Executed_Gtid_Set: e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-3
                Auto_Position: 1
         Replicate_Rewrite_DB:
                 Channel_Name:
           Source_TLS_Version:
       Source_public_key_path:
        Get_Source_public_key: 0
            Network_Namespace:
1 row in set (0.00 sec) 
```
一些参数解释如下
*   **Relay_Source_Log_File** -副本当前正在读取的主服务器的文件
*   **Execute_Source_Log_Pos** -对于上述文件，副本当前从哪个位置读取。当使用基于 binlog 的复制时，这两个参数至关重要。
*   **副本 IO 运行** -副本 IO 线程是否运行
*   **副本 _SQL_Running** -副本的 SQL 线程是否正在运行
*   **Seconds_Behind_Source** -在主服务器上执行语句和在副本服务器上执行语句的时间差。这表明有多少复制延迟。
*   **源 _UUID** -主要主机的 UUID
*   **Retrieved_Gtid_Set** -要执行的副本从主要主机获取的 Gtid。
*   **Executed_Gtid_Set** -在副本上执行的 Gtid。如果副本同步，则该设置在整个集群中保持不变。
*   **Auto_Position** -它指示复制品自动获取下一个 GTID
**为已经设置好的集群创建一个副本**
上一节中讨论的步骤讨论了在两台新主机上设置复制。当我们必须为已经在为应用提供服务的主机设置复制副本时，将使用主主机的备份，或者为复制副本创建新的备份(仅当它提供的流量较少时才应这样做)，或者使用最近创建的备份。
如果 MySQL 主服务器上的数据库很小，建议小于 100G，那么可以使用 mysqldump 和以下选项进行备份。
`mysqldump -uroot -p -hhost_ip -P3306 --all-databases --single-transaction --master-data=1 > primary_host.bkp`
*   `--single-transaction` -该选项在进行备份之前启动事务，以确保事务的一致性。由于事务相互隔离，因此不会有其他写入影响备份。
*   `--master-data` -如果希望设置基于 binlog 的复制，则需要此选项。它包括二进制日志文件和日志文件在备份文件中的位置。
当 GTID 模式被启用并且 **mysqldump** 被执行时，它包括被执行用于在备份位置之后启动副本的 GTID。mysqldump 输出文件的内容如下
![GTID info in mysqldump](img/c94d4fa4a0498afd49aa44f8b9e45417.png "GTID info in mysqldump")
建议在恢复之前对这些进行注释，否则它们可能会引发错误。此外，使用 master-data=2 将自动注释 master_log_file 行。
同样，当使用 **xtrabackup** 对主机进行备份时，文件 *xtrabckup_info* file 包含 binlog 文件和文件位置的信息，以及 GTID 执行集。
```sh
server_version = 8.0.25
start_time = 2021-06-22 03:45:17
end_time = 2021-06-22 03:45:20
lock_time = 0
binlog_pos = filename 'mysql-bin.000007', position '196', GTID of the last change 'e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-5'
innodb_from_lsn = 0
innodb_to_lsn = 18153149
partial = N
incremental = N
format = file
compressed = N
encrypted = N 
```
现在，在所需的主机上设置 MySQL 服务器后，恢复从上述任何一种方法获得的备份。如果计划的方式是基于二进制日志的复制，则在以下命令中使用二进制日志文件和位置信息
```sh
change Replication Source to 
source_host = ‘primary_ip’,
source_port = 3306,
source_user = ‘repl_user’,
source_password = ‘xxxxx’,
source_log_file = ‘mysql-bin.000007’,
source_log_pos = ‘196’; 
```
如果需要通过 GITDs 设置复制，那么运行下面的命令告诉副本关于已经执行的 GTIDs。在副本主机上，运行以下命令
```sh
reset master;
set global gtid_purged = ‘e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-5’
change replication source to
source_host = ‘primary_ip’,
source_port = 3306,
source_user = ‘repl_user’,
source_password = ‘xxxxx’,
source_auto_position = 1 
```
reset master 命令将二进制日志的位置重置为初始位置。如果主机是新安装的 MySQL，可以跳过它，但我们恢复了一个备份，所以它是必要的。gtid_purged 全局变量让副本知道已经执行的 gtid，以便复制可以在那之后开始。然后在 change source 命令中，我们将 auto-position 设置为 1，这将自动获取下一个 GTID 以继续。
#### 进一步阅读
*   [复制的更多应用](https://dev.mysql.com/doc/refman/8.0/en/replication-solutions.html)
*   [使用 MySQL Orchestrator 实现自动故障转移](https://github.com/openark/orchestrator/tree/master/docs)