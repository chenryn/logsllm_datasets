# 漏洞分析：CVE-2017-9765——深入解析影响数百万IoT设备的安全漏洞（含演示视频）

**译文声明**
本文为翻译文章，原文来自senr.io。具体内容及含义以原文为准。
  
**译者信息**
- 译者1：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
- 译者2：[童话](http://bobao.360.cn/member/contribute?uid=2782911444)
- 预估稿费：200 RMB
- 投稿方式：发送邮件至linwei#360.cn 或 登录网页版在线投稿

## 一、引言
在另一篇[文章](http://blog.senr.io/blog/devils-ivy-flaw-in-widely-used-third-party-code-impacts-millions)中，我们初步介绍了Devil’s Ivy漏洞的整体情况及其广泛的影响范围。本文将从技术角度详细剖析该漏洞的具体细节。

自去年起，我们开始对远程配置服务的安全性进行深入研究。在此过程中，我们不仅发现了多个[安全漏洞](http://blog.senr.io/blog/cve-2017-9466-why-is-my-router-blinking-morse-code)，还意识到这些漏洞对大量[用户](http://blog.senr.io/blog/400000-publicly-available-iot-devices-vulnerable-to-single-flaw)构成了威胁。通过持续关注此类服务中的常见漏洞模式，当接触到M3004设备时，我们自然而然地对其进行了详尽检查。首先，我们枚举了M3004的开放端口，并仔细审查了处理输入数据的相关代码段。期间，我们发现了一个名为wsd的服务，它使用了由[gSOAP](https://www.genivia.com/dev.html)提供的第三方库。借助IDA Pro逆向工程工具，我们进一步检查了负责将输入写入栈缓冲区的部分代码，并最终定位到了一个关键漏洞。

如图所示，在IDA Pro中正在分析某函数：
![图1. IDA Pro中正在分析的某个函数](图1链接)

作为一款安防摄像头，M3004在其80端口上提供了一个ONVIF服务。若向该服务发送POST请求，则会触发存在缺陷的代码执行路径。为了验证这一漏洞的存在，我们利用设备内置的gdbserver工具，通过Web界面启用了SSH接口，从而能够远程调试相关服务并观察其内部运行机制。我们在栈上设置了断点，当溢出数据覆盖掉保存在栈上的返回指针时，程序崩溃，这证实了漏洞的存在。接下来的任务是实现目标设备上的代码执行功能。

尽管我们在写入栈数据时没有遇到字节长度限制，但要成功执行任意代码仍然面临挑战。此外，设备还具备过滤机制，要求所有传输的数据值均需大于31。为此，我们采用了ROP (Return Oriented Programming) 技术，将特定地址写入栈中，强制程序执行位于libc中的代码片段，以此绕过对栈上代码执行的限制条件。通过这种方式，我们得以分配可执行内存空间，复制shellcode至其中，并引导程序跳转至此处执行。虽然所用地址中的数值必须大于31，给我们带来了一定程度上的约束，但我们依然实现了预期的目标。

一旦达到上述阶段，我们便可以编写符合要求的shellcode（确保所有值均大于31），进而开启一个新的监听端口，允许远程用户连接到设备的命令行界面。此时，我们已成功利用Devil’s Ivy (CVE-2017-9765) 获取了代码执行权限。然而，由于Axis实施了某些安全措施，在M3004上仅能以非特权用户身份访问shell环境。即便如此，我们仍能够执行部分通常只有特权用户才能操作的ONVIF指令，例如恢复出厂设置、控制摄像头移动以及重启设备等。

读者可以选择继续阅读下文的技术细节说明，或者直接跳至文章末尾观看演示视频。

## 二、获取设备访问权限
我们首先从Axis官方网站下载了M3004设备的最新固件版本。尽管网站要求注册账户后方可下载文件，但实际上并未严格验证用户身份是否真实有效。于是，我们虚构了一个名为Nate Johnson的人物形象，并提供了有效的电子邮箱地址，顺利完成了固件下载过程。接着，我们使用binwalk工具和Jefferson提取器（专用于JFFS2文件系统）解压了固件包，获得了完整的文件系统与Linux内核镜像。

如下图展示了binwalk的输出结果：
![图2. binwalk的输出结果](图2链接)

随后，我们运用[nmap](http://en.wikipedia.org/wiki/nmap)扫描了摄像头的开放端口，结果显示1900(upnp)、3702(ws-discover) 和 5353(mdns) 端口处于开放状态。通过对文件系统的进一步分析，我们确定ws-discover协议与处理SOAP消息的wsd服务紧密相关。wsd服务依赖于libsoap.so库（来源于Genivia公司的gSOAP产品），用以解析接收到的SOAP报文。通过对负责将输入数据写入栈缓冲区的代码进行细致审查，并结合IDA Pro手动追踪数据流向，我们仅耗时一天便在汇编代码层面找到了这个漏洞。

如图所示，从libsoap.so导入的数据流：
![图3. 从libsoap.so中导入的数据](图3链接)

## 三、漏洞代码解析
我们注意到在`soap_get()`函数中有一段代码负责将输入数据写入大小为0x40字节的栈缓冲区。这段代码会在循环中查找“?”结束符或指定终止字符，直至找到为止才会退出循环；然而，它并未对实际写入缓冲区的字节数量加以校验。

如下图所示，`soap_get()`函数中存在问题的代码片段：
![图4. soap_get()中存在漏洞的代码](图4链接)

图中R11充当计数器角色，其初始值等于栈缓冲区容量；R7指向栈缓冲区本身；而R12则表示从网络接收的单个字节。如果R11变为负值，函数将跳过写入栈的操作但仍继续调用`j_soap_getchar()`读取后续数据。因此，只要向wsd服务发送足够多的数据，就能够令计数器重新恢复正值，从而突破0x40字节的限制，继续向栈中写入额外内容。整个过程可能需要几分钟时间，但由于没有数量上限并且借助netcat工具很容易完成。经过计算得知，我们需要发送约0x8000000字节才能使计数器回正，再追加0x40字节填满固定大小的栈缓冲区，最后还需发送0x30字节来覆盖返回地址。

我们向位于80端口上的“onvif/device_service”服务发送了一个POST请求，从而触碰到了该漏洞。为了发送总计0x80000070字节的数据，我们创建了一个文本文件，开头为“POST /onvif/device_service”，紧接着新的一行以“<?”标识SOAP消息头部，剩余部分则填充随机数据。通过以下命令利用netcat发送此文件：

```bash
nc [camera_ip] 80 < postpwn.txt
```

为进一步确认漏洞是否存在，此时服务已停止响应。根据Axis官方支持文档指引，我们通过ssh接口成功连接到了摄像头。设备自带Web服务器，我们进入高级菜单页面修改/etc/ocnf.d/ssh配置文件启用ssh功能。重启摄像头后，我们使用默认用户名密码登录ssh界面。之后发现摄像头预先安装了gdbserver，故而在本地计算机上利用ARM架构编译的gdb观察到服务确实在处理我们的溢出数据时发生了崩溃现象。

如图所示，wsd服务崩溃现场：
![图5. wsd发生崩溃](图5链接)

从截图可以看出，此刻wsd服务已经崩溃，寄存器R4-R11以及当前PC值均被放置于栈上，且已被我们提供的输入数据完全覆盖。

## 四、实现代码执行
下一步面临的挑战是如何获得代码执行能力，因为栈区域并不具有执行权限。不同于近期研究过的其他设备，这里传入的数据并未存储在任何可执行堆区段，增加了破解难度。

幸运的是，我们可以自由地将多个字节写入栈中，而且libc库处于静态位置。我们决定构建一条基于libc代码片段的ROP链来达成目的。需要注意的是，所有地址都不能包含小于0x20、0x3F或0xFF的字节。低于0x20的值会被替换成0x20，而0x3F和0xFF则分别代表字符串结尾标志。幸好libc的位置固定不变，使得我们可以充分利用其丰富的代码资源。

我们手动搜索合适的ROP地址，利用IDA Pro及其正则表达式功能进行筛选。我们将构造好的ROP链附加到大文本文件末尾，并编写脚本检测是否有非法字符。总共花费了几天时间才稳定下来形成包含19个地址的长链。首先调用`pvalloc()`分配页对齐内存缓冲区，然后使用`strcpy()`将shellcode从低层栈拷贝过去。接着调用`mprotect()`标记该区域为可执行状态，最后跳转至新分配的内存块开始执行shellcode。

令人惊讶的是，编写受限范围内的shellcode成为最棘手的问题之一。起初尝试绑定套接字以便让远程用户连接shell。鉴于可用字符集有限，我们首先采用XOR编码大部分shellcode代码，然后在受限区域对其进行解码。ARM处理器缓存指令和数据，可以通过ISB或MCR指令清除。尽管网上有通过修改MCR指令清空指令流水线的例子，但在我们的测试中并未奏效。我们也了解到，在某些芯片上，由于处理器只缓存顺序指令，因此可以直接分支到自己的代码。但同样未见成效。探索其他可能性还需要花费更多时间。

对于编写受限制的shellcode，我们主要依赖于能够在libc中执行代码的能力。我们在代码中设置好参数，然后调用libc函数完成所需的系统调用。例如，要发起socket系统调用，我们编写了如下代码片段：

```c
// 示例代码片段
```

基于以上方法，我们最终通过利用Devil's Ivy漏洞获得了对摄像头的代码执行权限和交互式shell。尽管其他设备可能会以root用户身份运行gSOAP服务，但在这个具体案例中，wsd服务仅授予非root用户的访问权限。尽管如此，我们仍能够执行一些原本仅限root权限用户使用的ONVIF规范命令。权限设置存储在摄像头的文本文件中，wsd用户对该文件拥有写权限。

例如，可以通过以下命令修改权限设置文件：
```bash
sed -i 's/SystemReboot=8/SystemReboot=f/' access_policy
```

关闭连接后，导致wsd服务重启并重新加载`access_policy`文件，此时即可发送`SystemReboot`命令重启摄像头。攻击者可能会反复重启摄像头或更改其网络配置，以阻止监控视频流的正常访问。

下面是Axis M3004安防摄像机上Devil's Ivy漏洞的演示视频，更多详细信息请访问我们的博客。

**演示视频链接**

---

希望优化后的文本更加清晰、连贯和专业。如有进一步需求，请随时告知！