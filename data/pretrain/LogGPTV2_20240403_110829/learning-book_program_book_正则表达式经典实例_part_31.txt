var match = null;
while (match = regex.exec(subject)){
//Don't let browsers such as Firefox get stuck in an infinite loop
if (match.index == regex.lastIndex) regex.lastIndex++;
//Here you can process the match stored in the match variable
}
使用正则表达式编程
www.TopSage.com
---
## Page 166
表达式上进行循环：
var regex=/\d+/g;
var match = null;
while (match = regex.exec(subject)）{
//Here you can process the match stored in the match variable
{
PHP
preg_match_al1('/\d+/`，$subject， $result, PREG_PATTERN_ORDER);
for （$i=0;$i<count($result[o]);$i++）{
Matched text =$result[o][$i];
}
Perl
while($subject =~m/\d+/g）{
#matched text = $&
Python
如果你只打算使用同一个正则表达式处理少量字符串，可以使用如下的全局函数：
for matchobj in re.finditer(r"\d+",subject):
Here you can process the match stored in the matchobj variable
要想重复使用同一个正则表达式，就需要使用一个编译好的对象：
reobj = re.compile(r"\d+")
for matchobj in reobj.finditer(subject):
#Here you can process the match stored in the matchobj variable
Ruby
subject.scan(/\d+/)(1match1
）
讨论
.NET
实例3.7中讲解了如何使用Regex类的成员函数MatchO来获取字符串中的第一个正则
表达式匹配。为了能够遍历该字符串中的所有匹配，我们还是需要调用MatchO函数来
获取第一个匹配的详细信息。MatchO函数会返回Match类的一个实例，我们会把它保
150
第3童
www.TopSage.com
---
## Page 167
存到变量matchResult中。如果matchResult对象的Success属性的内容是true，那么就
会进入循环。
在循环的开始，你可以使用Match类的属性来处理第一个匹配的详细信息。在实例3.7
中已经介绍了Value属性，实例3.8中介绍了Index和Length两个属性，而在实例3.9
中介绍了Groups集合。
处理完第一个匹配之后，用matchResult变量调用NextMatchO成员函数。
Match.NextMatchO会返回Match类的个实例，这和Regex.MatchO是一样的。新返回
的实例中保存的是第二个匹配的详细信息。
我们把matchResult.NextMatchO的结果赋值给同一个matchResult变量，这样做可以比
较容易实现对所有匹配的遍历。然后需要再次检查matchResult.Success的值来看
NextMatchO是否又找到了一个匹配。当NextMatchO失败的时候，它依然会返回-一个
Match对象，但是它的Success属性会被设为false。通过只使用一个matchResult变量，
我们可以把最初的检查与在调用NextMatchO之后的检查都放到一个while循环语句中。
调用NextMatchO并不会改变用来调用它的Match对象。如果你愿意的话，可以把每个
正则表达式匹配对应的Match对象都保存起来。
NextMatchO方法不接受任何参数。它会使用与你传递给Regex.MatchO方法一样的正则
表达式和目标字符串。Match对象中会保存到正则表达式和目标字符串的引用。
即使你的自标字符事中包含大量的正则匹配，也可以使用静态的Regex.MatchO调用。
Regex.MatchO会只编译你的正则表达式一次，而返回的Match对象中会保存到编译好
的正则表达式的引l用。即使你使用静态的Regex.MatchO调用，Match.MatchAgainO也会
使用Match对象指向的前面编译好的正则表达式。只有当你想要重复调用Regex.MatchO
的情形下，例如要在多个字符串之上使用同一个正则表达式，才需要对Regex类进行
实例化。
Java
在Java中很容易就可以遍历字符串中的所有匹配。只需要在一个while循环中调用实
例3.7中介绍过的findO方法。每次调用findO都会得到一个新的Matcher对象，并且更
新关于匹配的详细信息和下一次匹配尝试的开始位置。
JavaScript
在你开始之前，必须保证要放到循环中去的正则表达式中使用了/g标志。实例3.4中讲
解了这个标志。当regexp=∧d+/g时，while（regexp.execO)会找到目标字符串中的所有
数字。如果regexp=∧d+/，那么while（regexp.exec()会反复找到字符串中的第一个数字，
直到你的脚本崩溃，或是被浏览器强行终止。
使用正则表达式编程151
www.TopSage.com
---
## Page 168
需要注意的是while（∧d+/g.execO）（在--个含有/g的字面正则表达式之上进行循环）也
可能会陷人同样的无限循环之中，至少在某些特定的JavaScript实现中会是如此，这是
因为在while循环每次重复时正则表达式都会被重新进行编译。当正则表达式被重新编
译时，匹配尝试的开始位置也会被重置为字符串的起始位置。因此应当把正则表达式
在循环外赋给一个变量，然后要确保它只会被编译一次。
实例3.8和3.9中解释了regexp.exec0返回的对象。不管是否在循环中调用execO，这
个对象总是一样的。接着你就可以随意操作这个对象。
/g产生的唯一效果是它会在你每次调用execO的时候，更新regexp对象的lastIndex属
性值。在本实例的第二个JavaScript解答中可以看到，即使当你使用一个字面正则表达
式时也会如此。当下一次再调用execO的时候，匹配尝试会从lastIndex开始。如果你赋
给lastIndex一个新的值，那么匹配尝试就会从指定的位置开始执行。
然而，这也是lastlndex带来的一个很大问题。如果你认真阅读过ECMA-262v3标准，
其中会要求execO把lastIndex设置为本次匹配之后的第-个字符。这意味着即使匹配
的长度为0，下一次匹配也会从刚刚找到的匹配位置继续开始，这样就会造成一个无限
循环。
在这种情形下，如果上一次匹配的长度为0，那么本书中讨论的所有正则表达式引擎（除
了JavaScript）都会自动调整下一个匹配尝试到字符串中的下一个字符开始。在Intermet
Explorer的实现中，如果匹配长度为0，那么lastlndex就会被加1。这也就是为什么在
实例3.7中提到不能使用lastIndex来决定匹配的截止位置，因为在IntermetExplorer中
会得到错误的值。
然而，Firefox的开发人员则严格按照要求实现了ECMA-262v3标准，虽然这也就意味
着regexp.execO可能会陷人一个无限循环中。这种结果并不是不可能出现的。例如，你
可以使用re=/.*S/gm;while（re.execO)来遍历一个多行字符串中的所有行，而如果该
字符串中包含一个空行，Firefox就会死在那里。
一种解决方案是如果execO函数没有自动增加lastIndex的值，你可以在自已的代码中添
加这样的功能。本实例中的第一个JavaScript解答就是这样做的。如果你不确定，那么
可以简单地把这一行代码粘贴进去就可以了。
当使用string.replaceO（实例3.14），或者使用string.match0来查找所有匹配（实例3.10）
的时候，并不会遇到同样的问题。这是因为对于这两个在内部使用lastIndex的方法，
在ECMA-262v3标准中明确说明了lastIndex遇到长度为0的匹配时必须加1。
PHP
preg_matchO函数会接受一个可选的第5个参数，指定在字符串中匹配尝试应当开始的
位置。在第二次调用preg_matchO的时候，你可以修改实例3.8把$matchstart+
152第3章
www.TopSage.com
---
## Page 169
$matchlength作为第5个参数传递过去，这样就可以找到字符串中的第二个匹配；接着
可以在第三次及以后的匹配中反复这样做，直到preg_matchO返回0为止。实例3.18
中使用了这个方法。
除了需要为每次匹配尝试添加额外代码来计算起始位置之外，反复调用preg_matchO
还存在效率不高的问题，因为我们无法把一个编译过的正则表达式保存到一个变量中。
在每次调用时，preg_matchO必须都去到缓存中查找编译好的正则表达式。
另外一种更容易也更高效的解答是，按照上一个实例中讲解的方法调用preg_match
all0，然后对包含匹配结果的数组进行遍历。
Peri
实例3.4中讲到，要想让你的正则表达式在自标字符事中查找多余一个匹配，你就需要
添加/g修饰符。如果在一个标量上下文中使用全局正则表达式，那么它会从上一次匹
配结束的地方开始寻找下一个匹配。在这个实例中，while语句提供了一个标量上下文。
在while循环中可以使用所有的特殊变量，例如$&（参考实例3.7中的讲解）。
Python
re模块中的finditerO函数会返回一个选代器，你可以用它来找到正则表达式的所有匹
配。把正则表达式作为第一个参数，目标字符串作为第二个参数。你还可以把正则表
达式选项作为可选的第三个参数。
re.finditerO函数会调用re.compileO，然后用编号的正则表达式对象调用finditerO方法。
这个方法只需要一个必需参数，也就是目标字符串。
finditerO方法还接受两个re.finditerO不支持的可选参数。在目标字符串之后，可以传
递一个字符串中的字符位置，作为finditerO应当开始搜索的位置。如果你不提供这个
参数，那么迭代器就会处理整个目标字符串。如果你指定了一个起始位置，那么还可
以指定一个结束位置。如果没有指定一个结束位置，那么搜索就会一直执行到字符串
结束。
Ruby
String类中的scanO方法接受一个正则表达式作为唯一的参数，并会遍历目标字符串中
的所有正则表达式匹配。当使用一个block来调用它时，你可以处理每一一个找到的匹配。
如果你的正则表达式中不包括任何捕获分组，那么可以在block中说明一个选代器变
量。这个变量会得到包含正则表达式匹配到的文本的一个字符串。
如果你的正则表达式中包含了一个或多个捕获分组，那么就需要为每个分组建立一个
变量。第一个变量会得到第一个捕获分组匹配到的文本构成的字符串，第二个变量会
得到第二个捕获分组，以此类推。然而整体正则匹配却不会被放到任何变量中。如果
使用正则表达式编程153
www.TopSage.com
---
## Page 170
你也想得到整体匹配，那么就需要把整个正则表达式也放到一个捕获分组中去。
subject.scan(/(a)(b)(c)/){1a, b,cl
#a,b,and c hold the text matched by the three capturing groups
）
如果你声明的变量个数少于正则表达式中包含的捕获分组的数量，那么就只能访问到
你提供了变量的捕获分组。如果所给的变量个数多出了捕获分组的数量，那么多余的
变量会被设为nil。
如果只列出了一个选代器变量，而你的正则表达式中包含一个或多个捕获分组，那么
这个变量会得到的是一个字符串的数组。这个数组中会包含每个捕获分组得到的字符
串。如果只存在一个捕获分组，那么这个数组就只会包含一个元素：
subject.scan(/(a)(b)(c)/) (labc1
abc[0], abc[1], and abc[2] hold the text
#matched by the three capturing groups
参见
实例3.7、3.8、3.10和3.12。
3.12在过程代码中对匹配结果进行验证
问题描述
上，从而可以获取所有的正则匹配列表。在这个实例中，你想要获得的匹配列表需要
满足一些在正则表达式无法（很容易地）表示的标准。例如，在获取一个幸运数字的
列表时，你只想保留那些是13倍数的整数。
解决方案
#
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
StringCollection resultList = new StringCollection();
Match matchResult = Regex.Match(subjectString,@"\d+");
while (matchResult.Success) {
if (int.Parse(matchResult.Value)  13 == 0)(
resultList.Add(matchResult.Value) ;
matchResult = matchResult.NextMatch();
154第3章
www.TopSage.com
---
## Page 171
如果想要把同-个正则表达式应用于大量的字符串，那么就需要构造一个Regex对象：
StringCollection resultList = new StringCollection();
Regex regexObj = new Regex(@"\d+");
matchResult = regexObj.Match(subjectString);
while (matchResult.Success) (
if (int.Parse(matchResult.Value) $ 13 == 0)(
resultList.Add(matchResult.Value);
matchResult = matchResult.NextMatch();
VB.NET
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
Dim ResultList = New StringCollection
While MatchResult.Success
If Integer.Parse(MatchResult.Value) Mod 13 = 0 Then
ResultList,Add (MatchResult.Value)
End If
MatchResult = MatchResult.NextMatch
End While
如果想要把同-个正则表达式应用于大量的字符串，那么就需要构造一个Regex对象：
Dim ResultList = New StringCollection
Dim RegexObj As New Regex("\d+")
Dim MatchResult = RegexObj.Match(SubjectString)
While MatchResult.Success
If Integer.Parse(MatchResult.Value) Mod 13 = 0 Then
ResultList.Add (MatchResult.Value)
EndIf
MatchResult = MatchResult.NextMatch