Chapter 6. The xnu Kernel Page 5 of 137
Container Classes
OSBoolean A class for Boolean values.
OSData A class for managing byte arrays.
OSNumber A class for numeric values.
OSString A class for managing strings.
OSSymbol A class for representing unique string values.
OSSerialize A class used by the container classes to serialize their instance data.
OSUnserializeXML A class that recreates a container object from its serialized instance
data in an XML buffer.
Table 66 lists some contents of the libsa/ directory. Section 2.4.5 provides an overview of libsa's
functionality.
Table 66. Primary Contents of the libsa/Directory
File Description
libsa/bootstrap.cpp Constructor and destructor functions for libsa.
libsa/bsearch.c, Functions for binary searching, directed graphs, and heap
libsa/dgraph.c, sortused for supporting kernel extension loading.
libsa/sort.c
libsa/c++rem3.c Symbol remangler for code compiled with version 2.95 of
the GNU C++ compilerinvoked during symbol table
parsing when a Mach-O object file (typically a kernel
extension) is mapped.
libsa/catalogue.cpp I/O Catalog routines, such as those for accessing and
manipulating kernel extension dictionaries, accessing
mkext caches, and recording boot-time kernel extensions
into dictionaries.
libsa/kext.cpp, The core of libsa's functionality: routines for resolving
libsa/kld_patch.c, kernel extension dependencies, retrieving kernel
libsa/kmod.cpp, extension versions, loading kernel extensions, patching
libsa/load.c vtables, etc.
libsa/malloc.c Simple implementations of malloc() and realloc().
libsa/mkext.c Routines for LZSS compression/decompression, and for
computing 32-bit Adler checksums.
libsa/strrchr.c, String functions.
libsa/strstr.c
libsa/vers_rsrc.c Routines for parsing and generating version strings.
Recall from Chapter 2 that the libsa stand-alone library is used only for loading kernel extensions
during system startup. In a typical booting scenario, when the kernel extension daemon (kextd) is
started, it sends a kIOCatalogRemoveKernelLinker message to the I/O Catalog in the kernel. This
message notifies the I/O Catalog that kextd is ready to handle the loading of kernel extensions from
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 6 of 137
user space. Moreover, the message triggers the I/O Catalog to invoke destructors for the kernel's
__KLD segment and to deallocate it. The __KLD segment contains libsa's code. The kernel's
__LINKEDIT segment is also deallocated.
Section 2.4.1 provides an overview of the functionality implemented in the Mach portion of xnu.
Table 67 lists the important components of the osfmk/ directory.
Table 67. Primary Contents of the osfmk/Directory
Directory or File Description
osfmk/UserNotification/ Kernel portion of the Kernel User Notification Center
(KUNC) mechanism, which can be used by software
running in the kernel to execute user-space programs and
to display notices or alert messages.
The /usr/libexec/kuncd daemon is the user-space
agent that processes such requests from the kernel.
osfmk/console/i386/ VGA text console, x86 serial console.
osfmk/console/iso_font.c Data for the ISO Latin-1 font.
osfmk/console/panic_dialog.c Panic user-interface routines, including routines for
drawing, managing, and testing the panic dialog.
osfmk/console/panic_image.c Pixel data for the default panic imagean 8-bit, 472x255
image.
osfmk/console/panic_ui/ Panic image files and utilities to convert them into a
kernel-usable format.
osfmk/console/ppc/ Fast video scrolling, PowerPC serial console.
osfmk/console/rendered_numbers.c Pixel data for hexadecimal digits 0 through F and the
colon character.
osfmk/console/video_console.c Hardware-independent portion of the video console.
osfmk/ddb/ Built-in kernel debugger.
osfmk/default_pager/ Default pager, including the back-end for managing swap
files.
osfmk/device/ Mach support for the I/O Kit, including device
representation through Mach ports. The I/O Kit master
port is also set here.
osfmk/ipc/ The core of Mach's IPC facility implementation.
osfmk/kdp/ A kernel debugging protocol called KDP that uses a
TFTP-like UDP-based transfer mechanism.
osfmk/kern/ The core Mach kernel: implementations of abstractions
such as processors, processor sets, tasks, threads, memory
allocation, and timers. IPC interfaces are also
implemented here.
osfmk/mach/ Mach headers and MIG definition files.
osfmk/mach-o/ Functions for accessing Mach-O headers.
osfmk/mach_debug/
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 7 of 137
Mach debugging headers and MIG definition files.
osfmk/machine/ Headers that are wrappers for machine-dependent
headers.
osfmk/ppc/ PowerPC-specific code: machine startup, exception
vectors, trap handling, low-level context-switching code,
low-level memory management, diagnostic calls, Classic
support functions, machine-dependent debugger
components, virtual machine monitor, kernel components
for Apple's CHUD Tools, etc.
osfmk/profiling/ Kernel profiling support, which must be explicitly
compiled in. The kgmon utility is used to control the
profiling mechanism: It can stop or start the collection of
kernel profiling data, dump the contents of the profile
buffers, reset all the profile buffers, and retrieve specific
named values from the kernel.
osfmk/sys/ Miscellaneous headers.
osfmk/vm/ Mach virtual memory subsystem, including the in-kernel
shared memory server.
Section 2.4.6 provides an overview of the functionality of the Platform Expert. Table 68 lists the
important components of the pexpert/ directory.
Table 68. Primary Contents of the pexpert/ Directory
Directory or File Description
pexpert/gen/bootargs.c Boot-argument parsing routines.
pexpert/gen/device_tree.c Routines for accessing device tree entries and their properties.
pexpert/gen/pe_gen.c Miscellaneous functions, including an 8-bit color lookup table
used during bootstrapping.
pexpert/i386/ Machine identification, debugging output support, keyboard
driver, generic interrupt handler, polled-mode serial port driver,
and other platform-dependent routines such as for reading the
timestamp counter, setting and clearing interrupts, generating a
fake device tree, etc.
pexpert/pexpert/ Miscellaneous platform headers, including those containing
image data for the rotating gearwheel image shown at startup to
indicate boot progress.
pexpert/ppc/ Machine identification, debugging output support, clock speed
determination by running timed loops, timebase value retrieval,
and other platform functions.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 8 of 137
6.2. Mach
Let us briefly review our discussion of Mach from Chapters 1 and 2. Mach was designed as a
communications-oriented operating system kernel with full multiprocessing support. Various types of
operating systems could be built upon Mach. It aimed to be a microkernel in which traditional
operating system services such as file systems, I/O, memory managers, networking stacks, and even
operating system personalities were meant to reside in user space, with a clean logical and modular
separation between them and the kernel. In practice, releases of Mach prior to release 3 had
monolithic implementations. Release 3a project started at Carnegie Mellon University and continued
by the Open Software Foundationwas the first true microkernel version of Mach: BSD ran as a user-
space task in this version.
The Mach portions of xnu were originally based on Open Group's Mach Mk 7.3 system, which in turn
was based on Mach 3. xnu's Mach contains enhancements from MkLinux and work done on Mach at
the University of Utah. Examples of the latter include the migrating thread model, wherein the thread
abstraction is further decoupled into an execution context and a schedulable thread of control with an
associated chain of contexts.
xnu Is Not a Microkernel
All kernel components reside in a single kernel address space in Mac OS X. Although the
kernel is modular and extensible, it is still monolithic. Nevertheless, note that the kernel
closely works with a few user-space daemons such as dynamic_pager, kextd, and
kuncd.
In this chapter, we will discuss basic Mach concepts and programming abstractions. We will look at
some of these concepts in more detail in the next three chapters in the context of process
management, memory management, and interprocess communication (IPC).
In this book, Mach-related programming examples are presented to demonstrate the internal working
of certain aspects of Mac OS X. However, Apple does not support the direct use of most Mach-level
APIs by third-party programs. Consequently, you are advised against using such APIs in software you
distribute.
6.2.1. Kernel Fundamentals
Mach provides a virtual machine interface to higher layers by abstracting system hardwarea scenario
that is common among many operating systems. The core Mach kernel is designed to be simple and
extensible: It provides an IPC mechanism that is the building block for many services offered by the
kernel. In particular, Mach's IPC features are unified with its virtual memory subsystem, which leads
to various optimizations and simplifications.
The 4.4BSD virtual memory system was based on the Mach 2.0 virtual memory system, with updates
from newer versions of Mach.
Mach has five basic abstractions from a programmer's standpoint:
Task
Thread
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 9 of 137
Port
Message
Memory object
Besides providing the basic kernel abstractions, Mach represents various other hardware and software
resources as port objects, allowing manipulation of such resources through its IPC mechanism. For
example, Mach represents the overall computer system as a host object, a single physical CPU as a
processor object, and one or more groups of CPUs in a multiprocessor system as processor set
objects.
6.2.1.1. Tasks and Threads
Mach divides the traditional Unix abstraction of a process into two parts: a task and a thread. As we
will see in Chapter 7, the terms thread and process have context-specific connotations in the Mac OS
X user space, depending on the environment. Within the kernel, a BSD process, which is analogous to
a traditional Unix process, is a data structure with a one-to-one mapping with a Mach task. A Mach
task has the following key features.
It is an execution environment and a static entity. A task does not executethat is, it performs no
computationby itself. It provides a framework within which other entities (threads) execute.
It is the basic unit of resource allocation and can be thought of as a resource container. A task
contains a collection of resources such as access to processors, paged virtual address space
(virtual memory), IPC space, exception handlers, credentials, file descriptors, protection state,
signal management state, and statistics. Note that a task's resources include Unix items too,
which on Mac OS X are contained in a task through its one-to-one association with a BSD
process structure.
It represents the protection boundary of a program. One task cannot access another task's
resources unless the former has obtained explicit access using some well-defined interface.
A thread is the actual executing entity in Machit is a point of control flow in a task. It has the
following features.
It executes within the context of a task, representing an independent program countera stream
of instructionswithin the task. A thread is also the fundamental schedulable entity, with
associated scheduling priority and attributes. Each thread is scheduled preemptively and
independently of other threads, whether they are in the same task or in any other task.
The code that a thread executes resides within the address space of its task.
Each task may contain zero or more threads, but each thread belongs to exactly one task. A task
with no threadsalthough legitimatecannot run.
All threads within a task share all the task's resources. In particular, since all threads share the
same memory, a thread can overwrite another thread's memory within the same task, without
requiring any additional privileges. Since there may be several concurrently executing threads
in one task, threads within a task must cooperate.
A thread may have its own exception handlers.
Each thread has its own computation state, which includes processor registers, a program
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 10 of 137
counter, and a stack. Note that while a thread's stack is designated as private, it resides in the
same address space as other threads within the same task. As noted earlier, threads within a task
can access each other's stacks if they choose to.
A thread uses a kernel stack for handling system calls. A kernel stack's size is 16KB.
To sum up, a task is passive, owns resources, and is a basic unit of protection. Threads within a task
are active, execute instructions, and are basic units of control flow.
A single-threaded traditional Unix process is analogous to a Mach task with only one thread, whereas
a multithreaded Unix process is analogous to a Mach task with many threads.
A task is considerably more expensive to create or destroy than a thread.
Whereas every thread has a containing task, a Mach task is not related to its creating task, unlike Unix
processes. However, the kernel maintains process-level parent-child relationships in the BSD process
structures. Nevertheless, we may consider a task that creates another task to be the parent task and the
newly created task to be the child task. During creation, the child inherits certain aspects of the parent,
such as registered ports, exception and bootstrap ports, audit and security tokens, shared mapping
regions, and the processor set. Note that if the parent's processor set has been marked inactive, the
child is assigned to the default processor set.
The Kernel Task
As we saw in our discussion of kernel startup in Chapter 5, the kernel uses the task and
thread abstractions to divide its functionality into various execution flows. The kernel
uses a single taskthe kernel taskwith multiple threads that perform kernel operations such
as scheduling, thread reaping, callout management, paging, and Unix exception handling.
Thus, xnu is a monolithic kernel containing markedly different components such as
Mach, BSD, and the I/O Kit, all running as groups of threads in a single task in the same
address space.
Once a task is created, anyone with a valid task identifier (and thus the appropriate rights to a Mach
IPC port) can perform operations on the task. A task can send its identifier to other tasks in an IPC
message, if it so desires.
6.2.1.2. Ports
A Mach port is a multifaceted abstraction. It is a kernel-protected unidirectional IPC channel, a
capability, and a name. Traditionally in Mach, a port is implemented as a message queue with a finite
length.
Besides Mach ports, Mac OS X provides many other types of IPC mechanisms, both within the kernel
and in user space. Examples of such mechanisms include POSIX and System V IPC, multiple
notification mechanisms, descriptor passing, and Apple Events. We will examine several IPC
mechanisms in Chapter 9.
The port abstraction, along with associated operations (the most fundamental being send and receive),
is the basis for communication in Mach. A port has kernel-managed capabilitiesor rightsassociated
with it. A task must hold the appropriate rights to manipulate a port. For example, rights determine
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 11 of 137
which task can send messages to a given port or which task may receive messages destined for it.
Several tasks can have send rights to a particular port, but only one task can hold receive rights to a
given port.
In the object-oriented sense, a port is an object reference. Various abstractions in Mach, including
data structures and services, are represented by ports. In this sense, a port acts as a protected access
provider to a system resource. You access objects such as tasks, threads, or memory objects[1]
through their respective ports. For example, each task has a task port that represents that task in calls
to the kernel. Similarly, a thread's point of control is accessible to user programs through a thread
port. Any such access requires a port capability, which is the right to send or receive messages to that
port, or rather, to the object the port represents. In particular, you perform operations on an object by
sending messages to one of its ports.[2] The object holding receive rights to the port can then receive
the message, process it, and possibly perform an operation requested in the message. The following
are two examples of this mechanism.
[1] With the exception of virtual memory, all Mach system resources are accessed
through ports.
[2] Objects may have multiple ports representing different types of functionality or access
level. For example, a privileged resource may have a control port accessible only to the
superuser and an information port accessible to all users.
A window manager can represent each window it manages by a port. Its client tasks can
perform window operations by sending messages to the appropriate window ports. The window
manager task receives and processes these operations.
Each task, and each thread within the task, has an exception port. An error handler can register
one of its ports as a thread's exception port. When an exception occurs, a message will be sent
to this port. The handler can receive and process this message. Similarly, a debugger can
register one of its ports as the task's exception port. Thereafter, unless a thread has explicitly
registered its own thread exception port, exceptions in all of the task's threads will be
communicated to the debugger.
Since a port is a per-task resource, all threads within a task automatically have access to the task's
ports. A task can allow other tasks to access one or more of its ports. It does so by passing port rights
in IPC messages to other tasks. Moreover, a thread can access a port only if the port is known to the
containing taskthere is no global, system-wide port namespace.
Several ports may be grouped together in a port set. All ports in a set share the same queue. Although
there still is a single receiver, each message contains an identifier for the specific port within the port
set on which the message was received. This functionality is similar to the Unix select() system
call.
Network-Transparent Ports
Mach ports were designed to be network transparent, allowing tasks on network-
connected machines to communicate with each other without worrying about where other
tasks were located. A network message server (netmsgserver) was typically used in
such scenarios as a trusted intermediary. Tasks could advertise their services by checking