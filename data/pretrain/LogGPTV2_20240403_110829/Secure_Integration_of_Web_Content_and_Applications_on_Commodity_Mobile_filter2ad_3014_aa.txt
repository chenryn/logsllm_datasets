title:Secure Integration of Web Content and Applications on Commodity Mobile
Operating Systems
author:Drew Davidson and
Yaohui Chen and
Franklin George and
Long Lu and
Somesh Jha
Secure Integration of Web Content and Applications on
Commodity Mobile Operating Systems
Drew Davidson
University of Wisconsin
Yaohui Chen
Stony Brook University
Franklin George
Stony Brook University
Long Lu
Stony Brook University
Somesh Jha
University of Wisconsin
ABSTRACT
A majority of today’s mobile apps integrate web content
of various kinds. Unfortunately, the interactions between
app code and web content expose new attack vectors: a
malicious app can subvert its embedded web content to steal
user secrets; on the other hand, malicious web content can
use the privileges of its embedding app to exﬁltrate sensitive
information such as the user’s location and contacts.
In this paper, we discuss security weaknesses of the in-
terface between app code and web content through attacks,
then introduce defenses that can be deployed without mod-
ifying the OS. Our defenses feature WIREframe, a service
that securely embeds and renders external web content in
Android apps, and in turn, prevents attacks between em-
bedded web and host apps. WIREframe fully mediates the
interface between app code and embedded web content. Un-
like the existing web-embedding mechanisms, WIREframe
allows both apps and embedded web content to deﬁne sim-
ple access policies to protect their own resources. These
policies recognize ﬁne-grained security principals, such as
origins, and control all interactions between apps and the
web. We also introduce WIRE (Web Isolation Rewriting
Engine), an o✏ine app rewriting tool that allows app users
to inject WIREframe protections into existing apps. Our
evaluation, based on 7166 popular apps and 20 specially se-
lected apps, shows these techniques work on complex apps
and incur acceptable end-to-end performance overhead.
1.
INTRODUCTION
A common app design paradigm is to embed web content
directly in an app’s UI. Apps that follow this paradigm,
which we call web-embedding apps, combine the advantages
of both the mobile web and native apps: web content is
highly portable across platforms, and native app code can
leverage the full power of the device. Unfortunately, these
apps also introduce unique attack vectors in the interactions
between web content and app code.
(cid:49)(cid:70)(cid:83)(cid:78)(cid:74)(cid:84)(cid:84)(cid:74)(cid:80)(cid:79)(cid:1)(cid:85)(cid:80)(cid:1)(cid:78)(cid:66)(cid:76)(cid:70)(cid:1)(cid:69)(cid:74)(cid:72)(cid:74)(cid:85)(cid:66)(cid:77)(cid:1)(cid:80)(cid:83)(cid:1)(cid:73)(cid:66)(cid:83)(cid:69)(cid:1)(cid:68)(cid:80)(cid:81)(cid:74)(cid:70)(cid:84)(cid:1)(cid:80)(cid:71)(cid:1)(cid:66)(cid:77)(cid:77)(cid:1)(cid:80)(cid:83)(cid:1)(cid:81)(cid:66)(cid:83)(cid:85)(cid:1)(cid:80)(cid:71)(cid:1)(cid:85)(cid:73)(cid:74)(cid:84)(cid:1)(cid:88)(cid:80)(cid:83)(cid:76)(cid:1)(cid:71)(cid:80)(cid:83)(cid:1)(cid:81)(cid:70)(cid:83)(cid:84)(cid:80)(cid:79)(cid:66)(cid:77)(cid:1)
(cid:80)(cid:83)(cid:1)(cid:68)(cid:77)(cid:66)(cid:84)(cid:84)(cid:83)(cid:80)(cid:80)(cid:78)(cid:1)(cid:86)(cid:84)(cid:70)(cid:1)(cid:74)(cid:84)(cid:1)(cid:72)(cid:83)(cid:66)(cid:79)(cid:85)(cid:70)(cid:69)(cid:1)(cid:88)(cid:74)(cid:85)(cid:73)(cid:80)(cid:86)(cid:85)(cid:1)(cid:71)(cid:70)(cid:70)(cid:1)(cid:81)(cid:83)(cid:80)(cid:87)(cid:74)(cid:69)(cid:70)(cid:69)(cid:1)(cid:85)(cid:73)(cid:66)(cid:85)(cid:1)(cid:68)(cid:80)(cid:81)(cid:74)(cid:70)(cid:84)(cid:1)(cid:66)(cid:83)(cid:70)(cid:1)(cid:79)(cid:80)(cid:85)(cid:1)(cid:78)(cid:66)(cid:69)(cid:70)(cid:1)(cid:80)(cid:83)(cid:1)
(cid:69)(cid:74)(cid:84)(cid:85)(cid:83)(cid:74)(cid:67)(cid:86)(cid:85)(cid:70)(cid:69)(cid:1)(cid:71)(cid:80)(cid:83)(cid:1)(cid:81)(cid:83)(cid:80)(cid:71)(cid:74)(cid:85)(cid:1)(cid:80)(cid:83)(cid:1)(cid:68)(cid:80)(cid:78)(cid:78)(cid:70)(cid:83)(cid:68)(cid:74)(cid:66)(cid:77)(cid:1)(cid:66)(cid:69)(cid:87)(cid:66)(cid:79)(cid:85)(cid:66)(cid:72)(cid:70)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:85)(cid:73)(cid:66)(cid:85)(cid:1)(cid:68)(cid:80)(cid:81)(cid:74)(cid:70)(cid:84)(cid:1)(cid:67)(cid:70)(cid:66)(cid:83)(cid:1)(cid:85)(cid:73)(cid:74)(cid:84)(cid:1)(cid:79)(cid:80)(cid:85)(cid:74)(cid:68)(cid:70)(cid:1)
(cid:66)(cid:79)(cid:69)(cid:1)(cid:85)(cid:73)(cid:70)(cid:1)(cid:71)(cid:86)(cid:77)(cid:77)(cid:1)(cid:68)(cid:74)(cid:85)(cid:66)(cid:85)(cid:74)(cid:80)(cid:79)(cid:1)(cid:80)(cid:79)(cid:1)(cid:85)(cid:73)(cid:70)(cid:1)(cid:71)(cid:74)(cid:83)(cid:84)(cid:85)(cid:1)(cid:81)(cid:66)(cid:72)(cid:70)(cid:15)(cid:1)(cid:36)(cid:80)(cid:81)(cid:90)(cid:83)(cid:74)(cid:72)(cid:73)(cid:85)(cid:84)(cid:1)(cid:71)(cid:80)(cid:83)(cid:1)(cid:68)(cid:80)(cid:78)(cid:81)(cid:80)(cid:79)(cid:70)(cid:79)(cid:85)(cid:84)(cid:1)(cid:80)(cid:71)(cid:1)(cid:85)(cid:73)(cid:74)(cid:84)(cid:1)(cid:88)(cid:80)(cid:83)(cid:76)(cid:1)
(cid:80)(cid:88)(cid:79)(cid:70)(cid:69)(cid:1)(cid:67)(cid:90)(cid:1)(cid:80)(cid:85)(cid:73)(cid:70)(cid:83)(cid:84)(cid:1)(cid:85)(cid:73)(cid:66)(cid:79)(cid:1)(cid:85)(cid:73)(cid:70)(cid:1)(cid:66)(cid:86)(cid:85)(cid:73)(cid:80)(cid:83)(cid:9)(cid:84)(cid:10)(cid:1)(cid:78)(cid:86)(cid:84)(cid:85)(cid:1)(cid:67)(cid:70)(cid:1)(cid:73)(cid:80)(cid:79)(cid:80)(cid:83)(cid:70)(cid:69)(cid:15)(cid:1)(cid:34)(cid:67)(cid:84)(cid:85)(cid:83)(cid:66)(cid:68)(cid:85)(cid:74)(cid:79)(cid:72)(cid:1)(cid:88)(cid:74)(cid:85)(cid:73)(cid:1)(cid:68)(cid:83)(cid:70)(cid:69)(cid:74)(cid:85)(cid:1)(cid:74)(cid:84)(cid:1)
(cid:81)(cid:70)(cid:83)(cid:78)(cid:74)(cid:85)(cid:85)(cid:70)(cid:69)(cid:15)(cid:1)(cid:53)(cid:80)(cid:1)(cid:68)(cid:80)(cid:81)(cid:90)(cid:1)(cid:80)(cid:85)(cid:73)(cid:70)(cid:83)(cid:88)(cid:74)(cid:84)(cid:70)(cid:13)(cid:1)(cid:80)(cid:83)(cid:1)(cid:83)(cid:70)(cid:81)(cid:86)(cid:67)(cid:77)(cid:74)(cid:84)(cid:73)(cid:13)(cid:1)(cid:85)(cid:80)(cid:1)(cid:81)(cid:80)(cid:84)(cid:85)(cid:1)(cid:80)(cid:79)(cid:1)(cid:84)(cid:70)(cid:83)(cid:87)(cid:70)(cid:83)(cid:84)(cid:1)(cid:80)(cid:83)(cid:1)(cid:85)(cid:80)(cid:1)(cid:83)(cid:70)(cid:69)(cid:74)(cid:84)(cid:85)(cid:83)(cid:74)(cid:67)(cid:86)(cid:85)(cid:70)(cid:1)
(cid:85)(cid:80)(cid:1)(cid:77)(cid:74)(cid:84)(cid:85)(cid:84)(cid:13)(cid:1)(cid:83)(cid:70)(cid:82)(cid:86)(cid:74)(cid:83)(cid:70)(cid:84)(cid:1)(cid:81)(cid:83)(cid:74)(cid:80)(cid:83)(cid:1)(cid:84)(cid:81)(cid:70)(cid:68)(cid:74)(cid:71)(cid:74)(cid:68)(cid:1)(cid:81)(cid:70)(cid:83)(cid:78)(cid:74)(cid:84)(cid:84)(cid:74)(cid:80)(cid:79)(cid:1)(cid:66)(cid:79)(cid:69)(cid:16)(cid:80)(cid:83)(cid:1)(cid:66)(cid:1)(cid:71)(cid:70)(cid:70)(cid:15)(cid:1)(cid:51)(cid:70)(cid:82)(cid:86)(cid:70)(cid:84)(cid:85)(cid:81)(cid:70)(cid:83)(cid:78)(cid:74)(cid:84)(cid:84)(cid:74)(cid:80)(cid:79)(cid:84)(cid:1)(cid:71)(cid:83)(cid:80)(cid:78)(cid:1)
(cid:49)(cid:70)(cid:83)(cid:78)(cid:74)(cid:84)(cid:84)(cid:74)(cid:80)(cid:79)(cid:84)(cid:33)(cid:66)(cid:68)(cid:78)(cid:15)(cid:80)(cid:83)(cid:72)(cid:15)
(cid:34)(cid:52)(cid:42)(cid:34)(cid:1)(cid:36)(cid:36)(cid:52)(cid:1)(cid:104)(cid:18)(cid:24)(cid:13)(cid:1)(cid:34)(cid:81)(cid:83)(cid:74)(cid:77)(cid:1)(cid:17)(cid:19)(cid:1)(cid:14)(cid:1)(cid:17)(cid:23)(cid:13)(cid:1)(cid:19)(cid:17)(cid:18)(cid:24)(cid:13)(cid:1)(cid:34)(cid:67)(cid:86)(cid:1)(cid:37)(cid:73)(cid:66)(cid:67)(cid:74)(cid:13)(cid:1)(cid:54)(cid:79)(cid:74)(cid:85)(cid:70)(cid:69)(cid:1)(cid:34)(cid:83)(cid:66)(cid:67)(cid:1)(cid:38)(cid:78)(cid:74)(cid:83)(cid:66)(cid:85)(cid:70)(cid:84)
(cid:36)(cid:80)(cid:81)(cid:90)(cid:83)(cid:74)(cid:72)(cid:73)(cid:85)(cid:1)(cid:74)(cid:84)(cid:1)(cid:73)(cid:70)(cid:77)(cid:69)(cid:1)(cid:67)(cid:90)(cid:1)(cid:85)(cid:73)(cid:70)(cid:1)(cid:80)(cid:88)(cid:79)(cid:70)(cid:83)(cid:16)(cid:66)(cid:86)(cid:85)(cid:73)(cid:80)(cid:83)(cid:9)(cid:84)(cid:10)(cid:15)(cid:1)(cid:49)(cid:86)(cid:67)(cid:77)(cid:74)(cid:68)(cid:66)(cid:85)(cid:74)(cid:80)(cid:79)(cid:1)(cid:83)(cid:74)(cid:72)(cid:73)(cid:85)(cid:84)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:69)(cid:1)(cid:85)(cid:80)(cid:34)(cid:36)(cid:46)(cid:15)
(cid:34)(cid:36)(cid:46)(cid:1)(cid:26)(cid:24)(cid:25)(cid:14)(cid:18)(cid:14)(cid:21)(cid:22)(cid:17)(cid:20)(cid:14)(cid:21)(cid:26)(cid:21)(cid:21)(cid:14)(cid:21)(cid:16)(cid:18)(cid:24)(cid:16)(cid:17)(cid:21)(cid:121)(cid:5)(cid:18)(cid:22)(cid:15)(cid:17)(cid:17)
(cid:37)(cid:48)(cid:42)(cid:27)(cid:1)(cid:73)(cid:85)(cid:85)(cid:81)(cid:27)(cid:16)(cid:16)(cid:69)(cid:89)(cid:15)(cid:69)(cid:80)(cid:74)(cid:15)(cid:80)(cid:83)(cid:72)(cid:16)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:21)(cid:22)(cid:16)(cid:20)(cid:17)(cid:22)(cid:19)(cid:26)(cid:24)(cid:20)(cid:15)(cid:20)(cid:17)(cid:22)(cid:19)(cid:26)(cid:26)(cid:25)
All major mobile platforms o↵er web-embedding support.
The WebView class in Android and UIWebView/WKWebView
class in iOS are UI widgets that display remote web ele-
ments or entire web pages natively within an app.1 Web
content and the embedding app can programmatically ma-
nipulate each other’s data and behavior via the so-called
app-web bridge APIs. For instance, an app can program-
matically conﬁgure embedded WebViews and inject scripts.
Conversely, JavaScript loaded in an WebView may call ex-
ported app code to access local resources, such as the ﬁle
system, the camera, or GPS.
The popularity of web-embedding apps makes the app-
web bridge an attractive target for attacks from both sides: a
malicious app may seek to subvert or leak sensitive web con-
tent (i.e., app-to-web attacks); malicious web content may
attempt to misuse the app’s permissions and local resources
(i.e., web-to-app attacks). Both types of attacks are increas-
ingly observed in reality [27, 21].
Malicious apps can embed and manipulate web content
from sensitive domains. Well-established web security poli-
cies, such as the same-origin policy (SOP), are not enforced
upon app-web interactions, largely due to the simplistic se-
curity design of WebView, which presumes apps always own
embedded web content. As a result, web-embedding apps
can easily disturb or spy on third-party web services, such
as single sign-on (SSO) and in-app payment. Furthermore,
apps can undermine inter-frame sandboxing by retrieving
scripts from one page and injecting them into another. This
means that a malicious app is not restricted by the SOP and
can introspect on sensitive, third-party web content.
Conversely, malicious web content embedded in benign
apps can abuse the app’s resources. The permissions granted
to an app are implicitly inherited by its embedded web con-
tent: the privileges meant for a trusted domain are univer-
sally available to sub-frames or elements loaded from un-
trusted domains in the WebView, allowing malicious web
content from one domain to leverage permissions intended
for a di↵erent domain. Moreover, the app-web bridge allows
app developers to make portions of their app code invoca-
ble by JavaScript loaded in WebViews. This feature greatly
facilitates web content’s access to local data and resources
such as the GPS location of the device. Unfortunately, this
access is not restricted to a given origin. Therefore, develop-
ers are often forced to ignore attacks, such as those reported
in [16, 27], in favor of adding app functionalities.
1Though we focus on the security of Android WebViews, we believe
that our observations and techniques are applicable to iOS.
652
Despite their variety, the above attacks in both directions
share a common root cause: Web content providers and app
developers have distinct security requirements that current
web-embedding mechanisms are incapable of distinguishing
or enforcing. For instance, app developers have no means
of controlling which web origins can use what app data and
code via the app-web bridge—they can only choose to fully
expose app interfaces to WebView or not at all (and thereby
give up app features). Similarly, web service providers can-
not express their needs for isolating their sensitive web con-
tent from apps or allow only limited access, and often have
to sacriﬁce security and privacy for mobile integration.
In this paper, we introduce a novel approach to enabling
ﬁne-grained, policy-driven security for the app-web bridge.
Our approach is trustworthy to both apps and web content
providers. It protects both sides from attacks launched by
the other side. It is applicable, without OS changes or device
rooting, to both current and previous generations app-web
bridges. The contributions of our work are as follow:
• We formulate a system of dynamic access policies that
allows both apps and web content to protect them-
selves from each other while maintaining the beneﬁts
of integrating apps and the web. We provide complete
mediation between apps and their embedded web con-
tent. We create a technique called origin tagging to
establish articulated security principals for app-web in-
teractions.
• We implement a static/dynamic hybrid system to de-
ploy our protection mechanisms without modifying the
operating system or requiring the cooperation of devel-
opers. Our evaluation using 7166 popular apps shows
that this system is compatible with existing apps and
e↵ective in enhancing the security of web-embedding
apps while incurring minimal overhead.
The two components of our hybrid system are (1) a run-
time component built as a regular stand-alone app, called
WIREframe, serving as a trustworthy provider of secure,
isolated WebViews, and (2) a static, o✏ine app rewriting
component called WIRE (Web Isolation Rewriting Engine).
Web-embedding apps use WIREframe to render their em-
bedded web content in decoupled, mediated WebView in-
stances. WIREframe allows app developers, app users, and
web content providers to deﬁne their own dynamic access
policies, which protect their respective resources. WIRE-
frame’s policy enforcement recognizes ﬁne-grained security
principals (e.g., web origins and app identities) and controls
all app-web interactions. WIRE automates the adoption of
WIREframe in existing apps by statically rewriting an app
before installation. Each WebView in the app is replaced by
a mediated WebView instance in WIREframe. In addition
to separating the app from its WebView, this also separates
the individual WebViews in the same app.
Previous works have proposed mitigations to several re-
lated attacks. They isolate malicious ads in apps [10, 20,
26, 33] or protect embedded web logins [5, 15, 25]. Although
e↵ective against their focused attacks, these solutions can-
not be generalized to defeat other types of attacks between
embedded web and apps. A recent work [29] retroﬁts origin-
based security to WebViews. Although a signiﬁcant step
towards securing the app-web bridge, it concerns only web-
to-app attacks and requires deployment support from OS
or device vendors. Compared with these works, our solution
generally prevents attacks on both directions of the app-web
bridge, requires no OS modiﬁcation or replacement of We-
bView, and enables ﬁne-grained and policy-driven security
trusted by both web providers and app developers.
The rest of our paper is organized as follows: In § 2, we in-
troduce our threat model, discuss the security limitations of
current WebView, and present example attacks. In § 3, we
outline the designs of WIREframe and WIRE, followed by
their technical details in § 4. We provide a security analysis
of our system in § 6 and evaluate our prototype implemen-
tation of WIREframe and WIRE in § 7. We compare our
system with related work in § 8, and conclude in § 10. The
interested reader may ﬁnd algorithmic details and future
work in Appendix A and B, respectively.
2. EXAMPLE ATTACKS AND ANALYSIS
2.1 Threat Model
Our system adopts a threat model that considers two sep-
arate classes of attacks exploiting the current WebView de-
sign:
App-to-Web Attacks: an app may spy on or manipulate
embedded web content sourced from a third-party provider.
In this case, the app, which controls the WebView, is the
attacker; the embedded web content (and its provider) is
the victim. To perform the attack, the malicious app may
use the WebView inspection APIs or directly manipulate
the WebView’s data in memory. Moreover, the malicious
app may employ obfuscation techniques, including reﬂection
and native code, to obscure its (ab)use of the WebView.
Web-to-App Attacks: an embedded web page from a
third-party may attack its host app.
In contrast to the
previous class of attacks, the content embedded in a We-
bView (and its provider) is the attacker; the app that hosts
the WebView is the victim. In such attacks, the malicious
web content may exploit any web-facing interfaces exposed
by the WebView and the host app, including the exported
Java methods. However, the malicious web content is not
expected to exploit arbitrary code execution vulnerabilities
in the WebView. These vulnerabilities are rare and out of
the scope of this work, which addresses the insecure design
of WebView rather than implementation bugs.
We note that attacks in which an adversary controls both
web content and app code simultaneously are out of the
scope of this work.
2.2 Attack Scenarios
SSO Credential Stealing
To illustrate the types of attacks that fall under our threat
model, we introduce three representative examples. We use
these examples to discuss the security limitations of Web-
View and the app-web bridge that enable the exploits.
2.2.1
As one instance of an app-to-web attack, we implemented
a malicious web-embedding RSS reader app, WebRSS. RSS
readers are widely used on Android, with popular apps such
as Feedly and Flipboard boasting hundreds of thousands
of installs. WebRSS requires no permissions besides the
INTERNET permission, which allows the app to access the
network and is necessary for a legitimate RSS reader.
Like many account-based apps, WebRSS allows users to
authenticate themselves using a third-party SSO service.
SSO allows users to forgo the creation of a separate user-
653
Figure 1: Workﬂow of an attack on an SSO client, as represented by the example app WebRSS. The app waits for the SSO dialog
to appear in the WebView, then scrapes the username and password from the WebView via introspection, either through reﬂection or
injected JavaScript.
name and password combination for each account that they
maintain. SSO services are popular precisely because they
identify users without directly exposing secret credentials.
Instead, users authenticate (by entering a username and
password) to a dialog (inside a WebView) controlled by the
SSO provider. Upon a successful login, the service passes an
opaque authentication token back to the app, which attests
to the user’s identity without revealing credentials.
However, a malicious app like WebRSS can indirectly
obtain user credentials by injecting JavaScript into the au-
thentication WebView to scrape the username and password
from the text ﬁelds, even when the password ﬁeld is blinded.
Figure 1 illustrates the workﬂow of this attack at a high level.
WebRSS goes through three steps in the attack (relevant
snippets of code from WebRSS are shown in Figure 2):
Construct WebView: The ﬁrst step, shown in Figure 2(a),
builds a WebView to load the authentication dialog. Note
that the app code enables JavaScript on the WebView and
interacts with a real SSO library, in this case LinkedIn. From
the perspective of the library, no malicious behavior occurs
as the app code is allowed to call getRequestToken() to get
the opaque SSO token.
Attach JavaScript Bridge: Figure 2(b) shows the app
code that will exﬁltrate the user credentials. For the pur-
pose of demonstration, this code outputs the username and
password to a log ﬁle, but could send the values to an adver-
sary over the internet using the permissions already granted
to the app for legitimate RSS functionality.
Inject JavaScript Code: To complete the attack, the ma-
licious app registers for a callback when the authentication
dialog is loaded, as shown in Figure 2(c). When the call-
back is ﬁred, the app injects the JavaScript code on Lines
9-15, which is stored as a string as part of the app. The
script scrapes the credentials from the dialog and passes it
to the code of Figure 2(b) through the app-web bridge. The
JavaScript can extract the contents of the password ﬁeld
(Line 12) even though it is blinded (i.e. it displays a series
of dots on-screen rather than the literal characters of user
input). The characters of the username and password are
exﬁltrated when the user clicks the “Allow Access” button.
The use of a WebView in WebRSS also enables a web-
to-app attack. Consider an iframe containing third-party
content (e.g., an ad banner outside of the SSO provider’s
domain) on the user login page or the redirection page fol-
lowing a successful login. Although the same-origin policy
prevents the third-party website from viewing web data from
the SSO provider’s domain, the third-party iframe can in-
voke, without restrictions, the Java interfaces exported by
the local app and the SSO library. This includes sensitive
interfaces solely intended for the web login (e.g., for retriev-
ing user location or login history data). Without breaking
any web or app security policy, the malicious iframe can
read sensitive data intended for the ﬁrst-party site using the
app-web bridge.
2.2.2 Local Storage Inference
A powerful web-to-app attack involves web content loaded
in WebView stealing content from the host app. Most re-
cently, Son et al observed several such attacks, including in-
stances where web content infers the existence of local ﬁles
and may read the contents of such ﬁles [27]. Such attacks
have a severe privacy impact. Son et al found cases in which
the host app contained information on the user’s medica-
tions, dating gender preference, social circle, and identity.
The host app may contain credentials used to authenticate
the user, allowing malicious web content to breach the user’s
security. The attack relies on speciﬁc conﬁguration of the
WebView. However, Son et al found that such conﬁguration
is required and used in legitimate circumstances. Unfor-
tunately, the current design of WebView and the app-web
bridge cannot allow apps to selectively expose local resources
to web content based its origins or trust levels. When an app
needs to permit any trusted web content to access local ﬁles
or other resources, the same level of access is given to all
web content despite their origins.
2.2.3 User Impersonation
Another abuse of the app-web bridge is for a malicious
app to trick an embedded WebView and impersonate a user
through JavaScript actions. Websites are largely defenseless
against such actions: even if they require users to manually
input credentials and prevent malicious credential stealing
(e.g., through a use of a properly salted and encrypted pass-
word with every login), a malicious app can simply wait
for the credentials to be input and then send surreptitious
requests to the authenticated page in the guise of the user.
Such attacks are not just realistic but likely. For in-
stance, attackers often repackage popular websites’ o cial
companion apps, which are usually thin wrappers around
WebViews. The rogue companion apps can stealthily im-
personate users, which is di cult for web servers or average
users to detect. Furthermore, apps that allow for general-