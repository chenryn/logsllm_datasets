communications enable the inference of the input. Of course, 
the  effectiveness  of  such  an  inference  depends  on  the 
reduction  factors  (cid:302)  and  (cid:533).  To  get  a  sense  about  (cid:302),  we 
1 This functionality has no cache effect, so the traffic is always observed on 
the network. We will discuss in Section I.A.2) that the cache effect would 
not fundamentally salvage the auto-suggestion leak even if it existed. 
196
collected the 26 x-values when typing “a” to “z” as the first 
character  in  the  input  box  under  the  Conditions  tab.  The 
values are in the range of [273,519], i.e., density=0.11. All 
the values are distinct, except the letters “h” and “m”, which 
produce  the  same  x  value.  Similarly,  we  collected  the  x-
values when entering “a” .. “z” posterior to an “a”. Only 20 
such combinations brings in non-empty suggestion lists (the 
others  are  invalid),  and  their  x-values  appear  within  the 
range  of  [204,515],  i.e.,  density=0.064.  These  tests  show 
that the reduction factor (cid:302) is significant. 
The factor (cid:533), representing the information leaks caused 
by  the  follow-up  state  transitions,  further  helps  reduce  the 
ambiguity set of the input. For example, the letters “h” and 
“m”, when entered as the first letter in the text box, cannot 
be differentiated by the eavesdropper immediately, as  they 
all produce identical web flows. However, we collected the 
x-values for “ha” to “hz” and “ma” to “mz”. Among these 
52 strings, only 20 are valid. All x-values are distinct except 
“ha”  and  “ma”.  The  x-value  range  is  [213,434],  i.e., 
density=0.090. Therefore, by observing the web flow of the 
second  keystroke,  the  first  letter  “h”  and  “m”  can  be 
effectively disambiguated (except “ha” and “ma”).  
After  entering  some  letters,  the  user  can  select  a 
suggestion and click the “Add” button to submit the request. 
The web flow we observed is (x(cid:206), (cid:205)580, (cid:205)53±1), which 
also contributes to the reduction power. For example, the x-
values of the ten suggested items for the input “head” fall in 
[1185, 1283] with the density 0.10, and no collision.  
Under  the  tabs  other  than  “Conditions”,  we  made  the 
similar observations, which indicate that the user has almost 
no secret when entering her records through typing.   
Input  by  mouse  selecting  –  a  caveat  of  hierarchical 
organization of user choices. Alternatively, the user can use 
mouse clicks to add a record: through choosing a tab, then a 
character  in  the  alphabetical  list  (26  letters  and  the  link 
marked as “0-9”), and finally the “Add” link of an item (see 
Figure 2). This selection is essentially a stateful navigation 
on  a  tree-hierarchy.  This  design  significantly  lowers  the 
entropy  of  the  user  input,  and  in  the  meantime  makes  the 
application states clearly identifiable.  
Let  us  again  use  Conditions  as  an  example. 
OnlineHealthA  has  2670  conditions,  which  are  grouped  by 
their  initial  characters:  for  example,  the  list  in  Figure  2 
consists  of  the  Conditions  starting  with  W  because  W  has 
been  clicked.  We  collected  the  response  size  x  when 
clicking every character. The range of x is [226, 5876], i.e., 
density=0.0046.  It  is  trivial  to  identify  the  initial  character 
the user clicks.  
Figure  3  describes  how  the  2670  conditions  are 
distributed among the characters. For each character, the bar 
shows the number of conditions whose names start with the 
character. We also show the density of the conditions under 
each character, e.g., A=2.50, J=0.08, etc. Many letters have 
their  densities  around  or  below  1.  Even  the  highest  one  is 
only 2.5. Given the total number of conditions being 2670, 
even  the  2.5  density  offers  the  attacker  1068×  (i.e.,1068-
time) reduction power.  
300
250
200
150
100
50
0
0
5
.
2
=
A
8
1
.
1
=
B
3
1
.
2
=
C
8
9
.
0
=
D
0
0
.
1
=
E
2
8
.
0
=
F
6
7
.
0
=
G
4
3
.
1
=
H
3
7
.
0
=
I
8
0
.
0
=
J
3
2
.
0
=
K
7
9
.
0
=
L
1
4
.
1
=
M
5
6
.
0
=
N
5
5
.
0
=
O
5
0
.
2
=
P
3
0
.
0
=
Q
2
7
.
0
=
R
6
5
.
1
=
S
4
1
.
1
=
T
7
3
.
0
=
U
6
5
.
0
=
V
7
1
.
0
=
W
3
0
.
0
=
X
6
0
.
0
=
Y
9
0
.
0
=
Z
0
.
1
=
9
-
0
Figure 3: Number of Conditions under each character 
On  the  tabs  other  than  Conditions,  we  observed  the 
similar  traffic  patterns,  indicating  that  they  are  similarly 
subject to the side-channel attack. 
2)   “Find a Doctor”  
Another  useful  feature  of  OnlineHealthA  is  “find  a 
doctor”, as shown in Figure 4. By choosing a specialty from 
the drop-down list and entering a city name (or a zipcode), 
the user searches the database of OnlineHealthA to get a list 
of doctors matching her desired specialty.  
Specialty
Figure 4: "Find a doctor" feature 
City or zipcode
We assume that a patient tends to find doctors near her 
current geographical location. Therefore the input of “city or 
zipcode”  is  guessable  based  on  her  IP  address.  When  the 
“search” button is clicked, the web flow vector is (1507(cid:206), 
270±10(cid:206),  (cid:205)582±1,  (cid:205)x).  Selection  from  the  drop-down 
list  gives  a  very-low-entropy  input:  there  are  only  94 
specialties. We tested all the specialties in “south bend, IN”, 
and  found  that  x  was  within  [596,  1660],  i.e.,  density  = 
0.089, and every specialty is uniquely identifiable.   
B.  OnlineTaxA  
We studied OnlineTaxA, the online version of one of 
the most widely used applications for preparing the United 
States’ tax documents (a.k.a. tax returns) for individuals and 
businesses. They are accessible through HTTPS exclusively. 
We found that the web applications leak a large amount of 
user  information,  such  as  family  income,  whether  the  user 
paid big medical bills, etc. The family income is particularly 
sensitive as discussed earlier.  
1)  Background 
The  U.S.  taxpayers  pay  annual  taxes  –  by  April  15th, 
they  file  the  tax  returns  for  the  previous  year  in  order  to 
claim back the money over-withheld by the government or 
pay the government any owed tax. The tax returns are a set 
of  standard  forms  designed  by  the  government.  The  total 
number  of  different  forms 
is  very  big.  Fortunately, 
depending on one’s specific tax situation, she only needs to 
work  on  a  subset  of  the  forms.  Although  the  tax  laws 
explain  which  forms  to  file,  it  requires  considerable  brain 
power to understand the laws and accomplish the necessary 
calculations to make tax-return claims right.  
OnlineTaxA is a tax-preparation application designed as 
a  wizard  that  essentially  implements  the  tax  laws  as  an 
“algorithm”.  It  asks  the  user  simple  questions,  and  tailors 
the  future  questions  based  on  the  user’s  earlier  answers. 
When the user finishes the conversation, OnlineTaxA has all 
the information for preparing required tax forms. Also, it is 
intelligent  enough  to  find  hundreds  of  tax  deductions  and 
tax credits to make the user’s tax as low as possible. 
2)  Workflow of the Tax Calculation 
The tax calculation has a clear workflow: it starts with 
basic  personal  information,  followed  by  the  calculation  of 
federal taxes, then the state taxes. Figure 5 shows the main 
modules  of  OnlineTaxA.  Sub-modules  under  the  Federal 
Taxes module are also shown in the figure.  
Tax preparation
Personal info
Federal Taxes
State Taxes
Print & File
Income
Deductions & Credits
Others
Figure 5: Main modules of OnlineTaxA and sub-modules of Federal Taxes 
In  the  Personal  Info  module,  the  user  enters  the  basic 
information  about  her  family,  e.g.,  the  information  about 
spouse  and  children.  She  also  needs  to  select  one  of  five 
filing  statuses  (to  be  explained  later).  These  statuses 
profoundly affect the logic of the tax calculation.  
After  the  Personal  Info  module  is  completed,  the  user 
starts to work on Federal Taxes. As shown in Figure 5, there 
are three sections: Income for reporting all types of incomes; 
Deductions & Credits for deducing the tax due according to 
available tax laws, and other tax situations.   
investments,  etc.  Based  on 
The income information includes many categories, such 
as  salaries, 
income 
information  and  the  number  of  family  members  (a.k.a. 
exemptions), the Adjusted Gross Income (AGI) is calculated. 
AGI  represents  the  family’s  actual  income  standing,  and 
thus is the basis for many tax calculations. 
3)  Leaking Private Information 
the 
The  attacker  can  easily  learn  certain  basic  facts  from 
analyzing  the  application’s  traffic.  For  example,  Figure  6 
depicts the application’s decision logic for the filing status.  
The  state-transitions  can  be  easily  identified  from  the  web 
flows of the application, as the web pages are very different.   
Choose a filing 
status
(1)
(2)
(4)
(3)
Claim an 
exemption 
for spouse?
Spouse 