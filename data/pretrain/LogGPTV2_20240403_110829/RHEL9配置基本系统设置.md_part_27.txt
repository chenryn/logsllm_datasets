:::
使用这个步骤通过中间服务器（也称为跳过主机）将本地系统连接到远程服务器。
::: itemizedlist
**先决条件**
-   跳过主机接受来自本地系统的 SSH 连接。
-   远程服务器只接受来自跳过主机的 SSH 连接。
:::
::: orderedlist
**流程**
1.  通过编辑本地系统中的 `~/.ssh/config`{.literal}
    文件来定义跳板主机，例如：
    ``` screen
    Host jump-server1
      HostName jump1.example.com
    ```
    ::: itemizedlist
    -   `Host`{.literal} 参数定义您可以在 `ssh`{.literal}
        命令中使用的主机的名称或别名。该值可以匹配真实的主机名，但也可以是任意字符串。
    -   `HostName`{.literal} 参数设置跳过主机的实际主机名或 IP 地址。
    :::
2.  使用 `ProxyJump`{.literal}
    指令将远程服务器跳板配置添加到本地系统上的 `~/.ssh/config`{.literal}
    文件中，例如：
    ``` screen
    Host remote-server
      HostName remote1.example.com
      ProxyJump jump-server1
    ```
3.  使用您的本地系统通过跳过服务器连接到远程服务器：
    ``` screen
    $ ssh remote-server
    ```
    如果省略了配置步骤 1 和 2，则上一命令等同于
    `ssh -J skip-server1 remote-server`{.literal} 命令。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以指定更多的跳板服务器，您也可以在提供其完整主机名时跳过在配置文件中添加主机定义，例如：
``` screen
$ ssh -J jump1.example.com,jump2.example.com,jump3.example.com remote1.example.com
```
如果跳板服务器上的用户名或 SSH
端口与远程服务器上的用户名和端口不同，请只修改上一命令中的主机名表示法，例如：
``` screen
$ ssh -J PI:EMAIL:75,PI:EMAIL:75,PI:EMAIL:75 PI:EMAIL:220
```
:::
::: itemizedlist
**其他资源**
-   `ssh_config(5)`{.literal} 和 `ssh(1)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#connecting-to-remote-machines-with-ssh-keys-using-ssh-agent_assembly_using-secure-communications-between-two-systems-with-openssh}通过 ssh-agent ，使用 SSH 密钥连接到远程机器 {.title}
:::
为了避免在每次发起 SSH 连接时输入密语，您可以使用 `ssh-agent`{.literal}
工具缓存 SSH 私钥。确保私钥和密语安全。
::: itemizedlist
**先决条件**
-   您有一个运行 SSH 守护进程的远程主机，并且可通过网络访问。
-   您知道登录到远程主机的 IP 地址或者主机名以及凭证。
-   您已用密码生成了 SSH 密钥对，并将公钥传送到远程机器。
:::
如需更多信息，请参阅 [生成 SSH
密钥对](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/securing_networks/assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks#generating-ssh-key-pairs_assembly_using-secure-communications-between-two-systems-with-openssh){.link}。
::: orderedlist
**流程**
1.  可选：验证您可以使用密钥向远程主机进行身份验证：
    ::: orderedlist
    1.  使用 SSH 连接到远程主机：
        ``` screen
        $ ssh example.user1@198.51.100.1 hostname
        ```
    2.  输入您在创建密钥时设定的密码短语以授予对私钥的访问权限。
        ``` screen
        $ ssh example.user1@198.51.100.1 hostname
         host.example.com
        ```
    :::
2.  启动 `ssh-agent`{.literal}。
    ``` screen
    $ eval $(ssh-agent)
    Agent pid 20062
    ```
3.  将密钥添加到 `ssh-agent`{.literal}。
    ``` screen
    $ ssh-add ~/.ssh/id_rsa
    Enter passphrase for ~/.ssh/id_rsa:
    Identity added: ~/.ssh/id_rsa (PI:EMAIL)
    ```
:::
::: itemizedlist
**验证**
-   可选：使用 SSH 登录主机机器。
    ``` screen
    $ ssh example.user1@198.51.100.1
    Last login: Mon Sep 14 12:56:37 2020
    ```
    请注意您不必输入密码短语。
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings.html#_additional_resources_11}其他资源 {.title}
:::
::: itemizedlist
-   `sshd(8)`{.literal}、`ssh(1)`{.literal}、`scp(1)`{.literal}、`sftp(1)`{.literal}、`ssh-keygen(1)`{.literal}、`ssh-copy-id(1)`{.literal}、`ssh_config(5)`{.literal}、`ssh_config(5)`{.literal}、`update-crypto-policies(8)`{.literal}
    和 `crypto-policies(7)`{.literal} 手册页
-   [OpenSSH 主页](http://www.openssh.com/){.link}
-   [为使用非标准配置的应用程序和服务配置
    SELinux](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/using_selinux/configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux){.link}
-   [使用 firewalld
    控制网络流量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_firewalls_and_packet_filters/using-and-configuring-firewalld_firewall-packet-filters#controlling-network-traffic-using-firewalld_using-and-configuring-firewalld){.link}
:::
:::
:::
[]{#assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings.html#assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings}第 32 章 配置远程日志记录解决方案 {.title}
:::
要确保在日志记录服务器中集中记录来自环境中各种机器的日志，您可以将
[**Rsyslog**]{.strong}
应用程序配置为将适合客户端系统中特定条件的日志记录到服务器。
::: section
::: titlepage
# []{#assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings.html#the-rsyslog-logging-service_assembly_configuring-a-remote-logging-solution}Rsyslog 日志记录服务 {.title}
:::
Rsyslog 应用程序与 `systemd-journald`{.literal} 服务相结合，在 Red Hat
Enterprise Linux 中提供了本地和远程记录支持。`rsyslogd`{.literal}
守护进程持续读取 `systemd-journald`{.literal} 服务收到的
`syslog`{.literal} 消息。`rsyslogd`{.literal} 过滤这些
`syslog`{.literal} 事件并记录到 `rsyslog`{.literal}
日志文件，或者根据其配置将它们转发到其他服务。
`rsyslogd`{.literal}
守护进程还提供扩展的过滤、加密受保护的转发消息、输入和输出模块，并支持使用
TCP 和 UDP 协议进行传输。
在 `/etc/rsyslog.conf`{.literal} 中，是 `rsyslog`{.literal}
的主要配置文件，您可以根据 `rsyslogd`{.literal}
处理消息来指定规则。通常，您可以通过其来源和主题（设施）和紧急情况（优先级）对消息进行分类，然后分配在消息适合这些条件时应执行的操作。
在 `/etc/rsyslog.conf`{.literal} 中，您还可以看到 `rsyslogd`{.literal}
维护的日志文件列表。大多数日志文件位于 `/var/log/`{.literal}
目录中。`httpd`{.literal} 和 `samba`{.literal}
等一些应用将其日志文件存储在 `/var/log/`{.literal} 中的子目录中。
::: itemizedlist
**其它资源**
-   `rsyslogd(8)`{.literal} 和 `rsyslog.conf(5)`{.literal} man page。
-   安装了 `rsyslog-doc`{.literal} 软件包（位于
    `file:///usr/share/doc/rsyslog/html/index.html`{.literal} 的文档）
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings.html#installing-rsyslog-documentation_assembly_configuring-a-remote-logging-solution}安装 Rsyslog 文档 {.title}
:::
Rsyslog 应用程序在
[https://www.rsyslog.com/doc/](https://www.rsyslog.com/doc/){.link}
上提供了广泛的在线文档，但您也可以在本地安装 `rsyslog-doc`{.literal}
文档软件包。
::: itemizedlist
**先决条件**
-   您已在系统中激活了 `AppStream`{.literal} 软件仓库。
-   您有权使用 `sudo`{.literal} 安装新软件包。
:::
::: itemizedlist
**流程**
-   安装 `rsyslog-doc`{.literal} 软件包：
    ``` screen
    # dnf install rsyslog-doc
    ```
:::
::: itemizedlist
**验证**
-   在您选择的浏览器中打开
    `file:///usr/share/doc/rsyslog/html/index.html`{.literal}
    文件，例如：
    ``` screen
    $ firefox file:///usr/share/doc/rsyslog/html/index.html &
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-a-remote-logging-solution_configuring-basic-system-settings.html#configuring-a-server-for-remote-logging-over-tcp_assembly_configuring-a-remote-logging-solution}通过 TCP 配置服务器进行远程记录 {.title}
:::
Rsyslog
应用程序可让您运行日志服务器并配置各个系统将其日志文件发送到日志记录服务器。要通过
TCP
使用远程日志，请同时配置服务器和客户端。服务器收集和分析由一个或多个客户端系统发送的日志。
使用 Rsyslog
应用程序，您可以维护一个集中的日志系统，该系统可通过网络将日志消息转发到服务器。为了避免服务器不可用时消息丢失，您可以为转发操作配置操作队列。这样，无法发送的消息将存储在本地，直到服务器再次可访问为止。请注意，此类队列无法针对使用
UDP 协议的连接配置。
`omfwd`{.literal} 插件通过 UDP 或 TCP 提供转发。默认协议是
UDP。由于插件内置在内，因此不必加载它。
默认情况下，`rsyslog`{.literal} 使用端口 `514`{.literal} 上的 TCP。
::: itemizedlist
**先决条件**
-   rsyslog 已安装在服务器系统上。
-   您以 `root`{.literal} 身份登录到服务器中。
-   使用 `semanage`{.literal} 命令，为可选步骤安装
    `policycoreutils-python-utils`{.literal} 软件包。
-   `firewalld`{.literal} 服务在运行。
:::
::: orderedlist
**流程**
1.  可选：要将不同的端口用于 `rsyslog`{.literal} 流量，在端口中添加
    `syslogd_port_t`{.literal} SELinux 类型。例如，启用端口
    `30514`{.literal} ：
    ``` screen
    # semanage port -a -t syslogd_port_t -p tcp 30514
    ```
2.  可选：要使用不同的端口用于 `rsyslog`{.literal} 流量，将
    `firewalld`{.literal} 配置为允许该端口上传入的 `rsyslog`{.literal}
    流量。例如，允许端口 `30514`{.literal} 上的 TCP 流量：
    ``` screen
    # firewall-cmd --zone= --permanent --add-port=30514/tcp
    success
    # firewall-cmd --reload
    ```
3.  在 `/etc/rsyslog.d/`{.literal}
    目录中创建一个新文件（例如，`remotelog.conf`{.literal}），并插入以下内容：
    ``` screen
    # Define templates before the rules that use them
    # Per-Host templates for remote systems
    template(name="TmplAuthpriv" type="list") {
        constant(value="/var/log/remote/auth/")
        property(name="hostname")
        constant(value="/")
        property(name="programname" SecurePath="replace")
        constant(value=".log")
        }
    template(name="TmplMsg" type="list") {
        constant(value="/var/log/remote/msg/")
        property(name="hostname")
        constant(value="/")
        property(name="programname" SecurePath="replace")
        constant(value=".log")
        }
    # Provides TCP syslog reception
    module(load="imtcp")
    # Adding this ruleset to process remote messages
    ruleset(name="remote1"){
         authpriv.*   action(type="omfile" DynaFile="TmplAuthpriv")
          *.info;mail.none;authpriv.none;cron.none
    action(type="omfile" DynaFile="TmplMsg")
    }
    input(type="imtcp" port="30514" ruleset="remote1")
    ```
4.  将更改保存到 `/etc/rsyslog.d/remotelog.conf`{.literal} 文件。
5.  测试 `/etc/rsyslog.conf`{.literal} 文件的语法：
    ``` screen
    # rsyslogd -N 1
    rsyslogd: version 8.1911.0-2.el8, config validation run (level 1), master config /etc/rsyslog.conf
    rsyslogd: End of config validation run. Bye.
    ```
6.  确保 `rsyslog`{.literal} 服务在日志记录服务器中运行并启用：
    ``` screen
    # systemctl status rsyslog
    ```
7.  重新启动 `rsyslog`{.literal} 服务。
    ``` screen
    # systemctl restart rsyslog
    ```
8.  可选：如果没有启用 `rsyslog`{.literal}，请确保 `rsyslog`{.literal}
    服务在重启后自动启动：
    ``` screen
    # systemctl enable rsyslog
    ```
:::
您的日志服务器现在已配置为从您环境中的其他系统接收和存储日志文件。
::: itemizedlist
**其他资源**