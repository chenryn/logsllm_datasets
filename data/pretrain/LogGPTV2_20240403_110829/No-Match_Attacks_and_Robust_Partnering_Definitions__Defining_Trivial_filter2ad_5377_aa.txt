title:No-Match Attacks and Robust Partnering Definitions: Defining Trivial
Attacks for Security Protocols is Not Trivial
author:Yong Li and
Sven Sch&quot;age
No-Match Attacks and Robust Partnering
Definitions – Defining Trivial Attacks for
Security Protocols is Not Trivial
Yong Li
Germany
Huawei Technologies Düsseldorf
PI:EMAIL
Sven Schäge
Ruhr-Universität Bochum
Germany
PI:EMAIL
ABSTRACT
An essential cornerstone of the definition of security for key ex-
change protocols is the notion of partnering. The de-facto standard
definition of partnering is that of (partial) matching conversations
(MC), which essentially states that two processes are partnered if
every message sent by the first is actually received by the second
and vice versa. We show that proving security under MC-based def-
initions is error-prone. To this end, we introduce no-match attacks,
a new class of attacks that renders many existing security proofs
invalid. We show that no-match attacks are often hard to avoid in
MC-based security definitions without a) modifications of the orig-
inal protocol or b) resorting to the use of cryptographic primitives
with special properties. Finally, we show several ways to thwart
no-match attacks. Most notably and as one of our major contribu-
tions, we provide a conceptually new definition of partnering that
circumvents the problems of a MC-based partnering notion while
preserving all its advantages. Our new notion of partnering not only
makes security definitions for key exchange model practice much
more closely. In contrast to many other security notions of key ex-
change it also adheres to the high standards of good cryptographic
definitions: it is general, supports cryptographic intuition, allows
for efficient falsification, and provides a fundamental composition
property that MC-based notions lack.
CCS CONCEPTS
• Security and privacy → Security requirements; Security
protocols;
KEYWORDS
protocols, definitions, partnering, no-match, original key
1 INTRODUCTION
Authenticated key exchange (AKE) protocols are among the most
important building blocks of secure network protocols. Intuitively,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134006
they allow a party A (Alice) to authenticate a communication part-
ner B (Bob) and securely establish a common session key with B
(and vice versa). Most security models for AKE try to model that
an adversary can observe or initiate several executions of the pro-
tocol at the same party. Usually, each party is therefore modeled as
having several oracles – processes that all have access to the same
long-term key of that party but otherwise independently execute
the protocol. The combination of two oracles that communicate
with each other according to the protocol specification defines a
(protocol) session.1
Informally, the basic requirements for security are that if an ora-
cle of A communicates with one of B, no adversary can distinguish
the session key computed by A’s oracle from a random value with-
out corrupting A’s or B’s secret values (i.e. their long-term keys,
secret session states, or directly their session keys). This property is
commonly referred to as key indistinguishability while (in this con-
text) A’s oracle is usually termed the Test-oracle – technically, the
adversary sends a special Test-query to Alice’s oracle and receives
back the real session key of that oracle or a random key.
In the security game, the adversary can choose the Test-oracle
among the set of all oracles that have computed a session key so-far
while having access to generous queries that grant her access to the
secret states of oracles of unrelated sessions. The important overall
rationale behind the security model is that in a concurrent setting,
leakage of session-dependent parameters should not compromise
the security of unrelated sessions.
For the definition of security, the precise specification of what
defines related – or more commonly called partnered – oracles is of
utmost importance (and all our examples below provide convincing
evidence for this). This is because all security models for key ex-
change allow the adversary to request the session keys of unrelated
oracles (i.e. not partnered to the Test-oracle) only, usually via a
so-called Reveal query. The rationale behind this restriction is that
oracles partnered to the Test-oracle are assumed to share the same
session key. And of course, the revealed session key of the partner
oracle could directly be used to break key indistinguishability. This
makes the notion of partnering an essential tool for defining trivial
attacks in key exchange protocols.
In general, the adversary may also ask for the secret long-term
keys of all parties different from A and B by sending a Corrupt-
query to one of their oracles. However, in stronger formalizations
of security for key exchange protocols [15, 29, 35–37], for example
1Note that at this point we make use of the terminology of the original Bellare-Rogaway
model [6]. Canetti-Krawczyk like models use a different terminology [17], in particular
they use the term session to refer what BR-like models call oracle.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1343when also modeling key compromise impersonation (KCI) attacks or
perfect forward secrecy (PFS), a Corrupt-query may also be queried
to the oracles of A and B (even to the Test-oracle).
Finally, some security models like [37] also allow the adversary
to obtain the ephemeral secret keys that are computed by the or-
acles in the protocol run. This is usually realized via a so-called
EphemeralKey-query (or a RevealState-query like in [31]).
Existing Definitions of Partnering and Session Identifiers.
The de-facto standard definition for partnering is based on the
notion of (partial) matching conversations. Essentially, two oracles
have matching conversations if every message2 that has been sent
by the first oracle has actually been received by the second (with-
out any modifications on transit) and vice versa. Matching con-
versations are explicitly used in many widespread security models
like the original Bellare-Rogaway model [6], the extended Canetti-
Krawczyk eCK model by LaMacchia, Lauter, and Mityagin [37], the
CK+ model that was introduced by Krawczyk in the analysis of
HMQV [35], and the recent security model for authenticated and
confidential channel establishment (ACCE) by Jager, Kohlar, Schäge,
and Schwenk [29].3 Partial matching conversations are defined in
the same way as matching conversations except that they do not
cover the entire message transcript but only a part of it. Which mes-
sages exactly belong to the relevant partial matching conversation
is highly protocol-dependent. Using partial matching conversations
as opposed to plain matching conversations has several conceptual
disadvantages, the most important being its lack of general applica-
bility. In particular, while matching conversations can be used to
formalize trivial attacks for any key exchange protocol, the defini-
tion of partial matching conversations is protocol-specific. Strictly
speaking, this makes the entire security definition protocol-specific
as well and comparisons among security protocols much harder.
Another common partnering concept relies on so-called session
identifiers. Essentially, it requires that each oracle is assigned with
a string that is referred to as its session identifier. Moreover, it
postulates that oracles are partnered if and only if they share the
same session identifier. Session identifiers can be based on (partial)
matching conversations (and often are). To this end, one can define
that the session identifier of an oracle consists of the list of all
messages sent and received by that oracle. In this way, two ora-
cles have the same session identifier (are partnered) iff they have
matching conversations. However, session identifiers are much
more general as they can also include, besides (partial) transcripts,
other values including (secret) state values held by the oracles and
parties. Protocol analyses that use this concept need to first define
the session identifier concretely. This definition is usually highly
protocol-specific.
In the literature, one alternative to session identifiers based on
protocol information is to use session identifiers that are generated
prior to the protocol execution, so-called external session iden-
tifiers4. Protocols for computing such session identifiers usually
2To achieve a general definition that is applicable to any key exchange protocol,
messages are always interpreted as binary strings in the natural way.
3We remark that although the concrete technical formalizations of matching conver-
sations given in these works may differ, they essentially model the same property.
4We note that the terminology is ambiguous. In fact some papers use ’external’ session
identifiers just as place-holders for any fitting definition of session identifiers. In these
context, external session identifiers do not have to be pre-specified. The advantage
consist of an exchange of random nonces among the parties, as
for example in [3]. However, despite being general this definition
is problematic in many scenarios. Most importantly, it does not
model cryptographic practice; for efficiency reasons key exchange
protocols usually do not allow for an extra phase that is used for
the sole purpose of deriving session identifiers.
Finally, there is another way of formalizing that two oracles are
partnered which was introduced by Bellare and Rogaway in 1995 [7].
It simply assumes the existence of a so-called partnering function.
However, as argued by Bellare, Pointcheval, and Rogaway in [5],
the definition allows for unintuitive partnering functions. There-
fore partnering functions are not widespread in the cryptographic
literature.
In the literature, one can also find other partnering definitions
which, however, are not widely used. One example is a definition
proposed by Kobara, Shin, Strefler [33] in 2009. Essentially, the
definition requires that two oracles are partnered if they have the
same key and no other (third) oracle shares that same key. This
definition has the highly counter-intuitive5 feature that whether
two oracles are partnered with each other is dependent on the
existence or non-existence of some other oracle.
Desirable Properties of Partnering Definitions. Some of the
existing partnering concepts have grave conceptual disadvantages.
Essentially, they do not provide an appropriate level of abstraction
that is suitable for a cryptographic analysis as we would like to
argue in more detail.
In particular, most of the concepts are too general and require
protocol-dependent concretizations (partial matching conversa-
tions, session identifiers, partnering functions). These concretiza-
tions often differ considerably. This has several drawbacks.
1) In key exchange protocols all definitions of partnering are
used to define the same intuitive security property, key indistin-
guishability. This is different from for example security definitions
of public key encryption where chosen ciphertext security, for ex-
ample, refers to cryptographic systems which offer considerably
more security guarantees than chosen plaintext secure ones. In
light of this, it seems rather unnatural that key exchange protocols
may have different security definitions although they aim to meet
the same security requirements.
2) One of the most crucial problems of partnering definitions
that need to be concretized protocol-wisely is that for each con-
cretization the actual overall security of the protocol may vary
greatly (although the rest of the security model is kept fixed). This
is because the concrete formulation of partnering has a critical
effect on the actual security guarantees provided by a provably
secure protocol. For example, one can easily propose partnering
definitions under which practically weak or even insecure proto-
cols admit a proof of security. It is highly counter-intuitive and
unsound to deem such a protocol as secure as protocols under tra-
ditional, strong notions of partnering. In Section 4.3 we provide a
brief example.
is that one can refer to protocols in general and independent of their specification of
session identifiers. We note that, typically, these papers use matching conversations
as the default instantiations of session identifiers in practical settings.
5Support of cryptographic intuition is a highly valued feature of definitions in cryp-
tography as [5] showed when deciding against the use of the notion in [7].
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA13443) Fixing the security definition (and in particular the partnering
definition) allows to treat key exchange protocols in an abstract
way. In this way they can be used as generic building blocks (in
a black-box way) in more complex protocols and give rise to new
constructions. Protocol-specific definitions of partnering violate
this approach.
4) Moreover, we would like to stress that it is problematic to not
specify a single concrete partnering definition at all in the security
model. In particular, there are several theoretical and conceptual dis-
advantages to simply requiring that there exists some appropriate,
concrete partnering definition. Crucially, such an approach does
not allow for simple falsification of the protocol’s security. More
concretely, an attack on a protocol does only violate a security proof
if it actually holds for all partnering definitions, because the proof
only states that there exists an appropriate partnering notion. Such
an approach is highly impractical and violates cryptographic intu-
ition. A security proof should always fix all circumstances it holds
under – ultimately to allow for a simple verification of when it does
not hold. Also it shifts the amount of work from the security proof
to the attacker. In classical models it is rather simple to describe
a successful attack because an attack only has to violate a single
concrete security definition. For unspecified partnering definitions,
an attack has to show (or rather to prove) that it is valid against
all possible (even highly unreasonable) definitions of partnering.
Showing this is usually much more difficult than specifying an
attack against a fixed definition. We stress that similar problems
still occur also when the security definition is slightly more con-
crete, for example if it requires that there exists a suitable partial
matching transcript. Similar to before, to rule out the security of
a protocol one has to show it for all possible definitions. Finally,
simply requiring that an appropriate partnering definition exists
in essence amounts to introducing a primitive-specific additional
assumption (that one would rather prefer to avoid). In contrast to
classical security reduction this is not an assumption that helps
to deduce the security of a cryptographic scheme but rather an
assumption to argue on the realizability of the security notion. We
do not know anything about the plausibility of such an assumption
in general.
5) There are even more (and similarly important) benefits when
settling on a fixed partnering definition than the comparability
of protocols: importantly, it allows for better comparability of se-
curity models. With a fixed partnering definition we may much
more easily deduce implications between different security models.
This allows to reveal fundamental connections between important
cryptographic models and pave the way for improved security
definitions.
6) Finally, defining and relying for each new protocol on a special-
ized security definition (that is specifically crafted for that protocol)
is arguably more error-prone than using a general definition that
is verified once and for all.
Considering these arguments, it is worthwhile to restrict the
class of concrete partnering definitions to allow for a broad compa-
rability of protocols and models among each other and for simple
falsification. In fact these features are the prime benefits of matching
conversations and the reason for its widespread adoption. How-
ever, on the other hand matching conversations are too restrictive.
In particular, they deem protocols insecure which cryptographic
intuition would not consider problematic at all. More concretely,
(partial) matching conversations suffer from a lack of the following
properties.
7) A partnering definition as part of a cryptographic security
definition should be abstract and applicable to all ‘reasonable’ in-
stantiations of the considered primitive/protocol class. A concrete
partnering definition that is based on a specific partial transcript of
some protocol however can in general not be used for the analysis
of other protocols.
8) An important property a partnering definition (or more gener-
ally a security model) should provide, is a basic form of composabil-
ity. More precisely, it should for example support cryptographers’
best practice to first extract the cryptographic core of real-world
protocols and then analyze that core in a formal model. Importantly,
there should be no obstacle for the obtained results to be meaning-
ful for the real-world implementation. Matching conversations do
not support this approach as the validity of any result is formally
dependent on the existence of unrelated administrative information
(as detailed in Section 4.5 and Appendix C).
9) A partnering definition should support cryptographic intu-
ition. In particular, it is highly counter-intuitive that the overall
security of some cryptographic scheme is formally violated if en-
tirely unrelated (random) messages are added to the message flow