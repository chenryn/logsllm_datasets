END;  
$$ language plpgsql;  
```  
处理 :   
先把密码修改回来,  
```  
digoal=# alter role digoal encrypted password 'DIGOAL321';  
ALTER ROLE  
```  
然后使用以下SQL进行处理 :   
注意一次只处理一条, 因为远端和本地未使用跨库事务. 只能一条一条来. 直到sync_err_rec 表没记录为止.  
处理顺序按照create_time 排序, 所以create_time 使用了timestamp without time zone类型以及clock_timestamp()进行插入, 精确到秒后面6位. 基本能满足唯一且顺序需求.  
下一篇BLOG将针对deal_sync_err_rec函数进行优化, 改成批量处理.  
```  
digoal=> select deal_sync_err_rec(dst_server,dst_query,id) from   
digoal-> (select dst_server,dst_query,id from sync_err_rec order by create_time limit 1) t;  
 deal_sync_err_rec   
-------------------  
 t  
(1 row)  
digoal=> select deal_sync_err_rec(dst_server,dst_query,id) from   
(select dst_server,dst_query,id from sync_err_rec order by create_time limit 1) t;  
 deal_sync_err_rec   
-------------------  
 t  
(1 row)  
digoal=> select deal_sync_err_rec(dst_server,dst_query,id) from   
(select dst_server,dst_query,id from sync_err_rec order by create_time limit 1) t;  
 deal_sync_err_rec   
-------------------  
(0 rows)  
```  
查看修复后的目标站点数据 :   
```  
digoal=> select * from rmt_test ;  
 id |  info  |     create_time     |     modify_time       
----+--------+---------------------+---------------------  
  2 | DIGOAL | 2012-08-31 15:40:29 | 2012-08-31 15:40:29  
(1 row)  
```  
与源站数据一致.  
```  
digoal=> select * from loc_test ;  
 id |  info  |     create_time     |     modify_time       
----+--------+---------------------+---------------------  
  2 | DIGOAL | 2012-08-31 15:40:29 | 2012-08-31 15:40:29  
(1 row)  
```  
# 小结  
1\. 本文所举的例子都是一对一的复制, 如果要实现一对多个目标站点, 只要增加触发器即可. 本文不再举例.  
如 :   
新增触发器函数 :  
```  
CREATE OR REPLACE FUNCTION f_sync_loc_test1()  
略去内容....  
end;  
$BODY$;  
```  
新增触发器 :   
```  
CREATE TRIGGER loc_test_sync_dml1 AFTER DELETE or UPDATE or INSERT ON loc_test FOR EACH ROW EXECUTE PROCEDURE f_sync_loc_test1();  
CREATE TRIGGER loc_test_sync_truncate1 AFTER TRUNCATE ON loc_test FOR EACH STATEMENT EXECUTE PROCEDURE f_sync_loc_test1();  
```  
2\. CREATE SERVER里面用到的option来自如下 :   
src/backend/tcop/postgres.c  
```  
        /*  
         * Parse command-line options.  CAUTION: keep this in sync with  
         * postmaster/postmaster.c (the option sets should not conflict) and with  
         * the common help() function in main/main.c.  
         */  
postgres --help  
-c NAME=VALUE      set run-time parameter  
```  
3\. 初始化操作(原始数据同步)需要避免有其他会话修改源表. 可以考虑使用 lock table in exclusive mode ;  
4\. 如果要针对列或者行级别的过滤, 只需要调整触发器即可.  
5\. 触发器函数参数传递不是通过普通的函数参数传递, 而是通过以下数据结构.  
src/include/commands/trigger.h   
```  
typedef struct TriggerData  
{  
        NodeTag         type;  
        TriggerEvent tg_event;  
        Relation        tg_relation;  
        HeapTuple       tg_trigtuple;  
        HeapTuple       tg_newtuple;  
        Trigger    *tg_trigger;  
        Buffer          tg_trigtuplebuf;  
        Buffer          tg_newtuplebuf;  
} TriggerData;  
```  
先写到这里, 下次再讲multi-master复制. 感兴趣的朋友也可以自己写一个玩玩.  
也要利用application_name.  
下一篇讲(deal_sync_err_rec的优化以及multi master replication) :   
http://blog.163.com/digoal@126/blog/static/1638770402012731944439/  
6\. 最近由于项目组需求, 开发了一个可以用作多表使用的通用触发器函数如下 :   
http://blog.163.com/digoal@126/blog/static/163877040201321125220134/  
值请使用quote_literal来解析, 本文的例子中OLD,NEW暂未修改, 请使用时自行修改或参考上文.  
## 注意  
1\. 本文前面所写触发器存在严重漏洞, 当数据复制遇到错误时, 将记录到错误表, 后续正常的数据可远程执行, 从而导致错误数据和正常数据在本地执行顺序和远端执行顺序不一致.  
解决办法请参见下一篇BLOG末尾部分. (一旦遇到错误, 则后续的操作不再直接提交到远端, 而是统统记录到错误表)  
http://blog.163.com/digoal@126/blog/static/1638770402012731944439/  
2\. pg_user_mappings回收public权限后, 使用普通用户执行pg_dump可能会报错:  
需要使用超级用户执行pg_dump .  
```  
pg_dump -F p -f ./1.sql -t loc_test -h 127.0.0.1 -U local local  
pg_dump: SQL command failed  
pg_dump: Error message from server: ERROR:  permission denied for relation pg_user_mappings  
pg_dump: The command was: SELECT usename, array_to_string(ARRAY(SELECT option_name || ' ' || quote_literal(option_value) FROM pg_options_to_table(umoptions)), ', ') AS umoptions  
FROM pg_user_mappings WHERE srvid = 164409694  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")