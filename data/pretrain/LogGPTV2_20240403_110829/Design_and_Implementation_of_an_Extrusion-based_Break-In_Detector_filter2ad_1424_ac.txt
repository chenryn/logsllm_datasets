Dupper
are dependent on computer speed and user pattern. Thus,
they should be selected on a per-user base. We can also
see that the performance of taking the 90th percentile is
not acceptable and the improvement from taking the 95th
percentile to the 99th percentile is small. Therefore, the pa-
rameters can be selected by choosing some value in the 95th
percentile according to user’s preference. For conservative
users, we should choose smaller values. The percentiles can
be obtained by training BINDER over a period of virus-free
time. Without training, these parameters can also be chosen
based on user’s preference. Dupper
and Dupper
new can take
prev can take
values between 10 and 60 seconds, while Dupper
values between 600 and 3600 seconds. Note that Dupper
can be greater than Dupper
new because the reaction time from a
user input or data arrival event to a connection request event
is dependent on the instant running condition of a computer.
old
old
5.2.2 False Positives
Table 3. Break›down of false alarms accord›
ing to causes.
User
A
B
C
D
E
F
Inter-Process Whitelist Collection
Total
2
4
1
0
1
0
1
1
0
1
1
1
0
0
0
1
1
1
3
5
1
2
3
2
By choosing parameters correctly, we expect to achieve
minimal false alarms. From Table 2 we can see that there
are at most (cid:2)ve false alarms for each computer by choosing
the 99th percentile. The false positive rate is 0.03%. We
manually check these remaining false alarms and (cid:2)nd that
they are caused by one of the three reasons:
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Table 2. Parameter selection for Dold, Dnew and Dprev
95% (s)
99% (s)
90% (s)
User Dold Dnew Dprev
142
A
B
64
28
C
213
D
539
E
F
80
18
15
14
16
19
14
11
12
14
81
12
8
# of FAs Dold Dnew Dprev
752
260
134
715
541
265
15
23
20
3
5
10
33
28
25
33
32
27
15
21
15
81
14
13
# of FAs Dold Dnew Dprev
4973
3329
2272
4611
4216
3633
21
22
33
81
90
31
79
79
74
85
93
79
5
7
5
3
4
5
# of FAs
3
5
1
2
3
2
(cid:15) Incomplete information of inter-process event sharing.
For example, four of the (cid:2)ve false alarms of User B
are caused by this. We observe that PowerPoint calls
IE to connect to the same IP address while the parent
process of the PowerPoint process is Windows shell.
We hypothesize this is due to the usage of Windows
API ShellExecute.
(cid:15) Incomplete whitelisting. For example, connections
made by Windows Application Layer Gateway Service
are treated as extrusions.
(cid:15) Incomplete trace collection. BINDER was acciden-
tally turned off by user in the middle of trace collec-
tion. Users were given the control of turning on/off
BINDER in case they think BINDER is responsible
for bad performance, etc.
A break-down of the false alarms is shown in Table 3.
We can see that a better-engineered BINDER can elimi-
nate false alarms associated with the Whitelist and Collec-
tion columns in Table 3, resulting in much lower false posi-
tives. By extending BINDER to consider more inter-process
communications than those between parent-child processes,
we can decrease the false alarms associated with the Inter-
Process column.
5.2.3 False Negatives
In the real world experiments, among the six computers,
one was infected by the adware Gator [24] and CNSMIN
[12] and another one was infected by the adware Gator and
Spydeleter [23].
In particular, the second computer was
compromised by Spydeleter when BINDER was running.
BINDER successfully detected the adware Gator and CNS-
MIN because they do not have any user input in history. In
the following, we demonstrate how BINDER detected the
break-in of Spydeleter right after it compromised the victim
computer.
In Figure 1, we show a stripped list of events logged
during the break-in of the adware Spydeleter. Note that
all IP addresses are anonymized. Two related processes
not shown in the list are a process of explorer.exe with
PID 240 and a process of svchost.exe with PID 960.
After IE is opened, a user connects to a site with IP
12.34.56.78. The web page has code to exploit a vulner-
ability in mshta.exe which processes .HTA (cid:2)les. After
mshta.exe is infected by the malicious .HTA (cid:2)le that is
downloaded from 87.65.43.21, it starts a series of processes
of ntvdm.exe which provides an environment for a 16-bit
process to execute on a 32-bit platform. Then, a process of
ntvdm.exe starts a process of ftp.exe which makes a con-
nection request to 44.33.22.11.
Since the prototype of BINDER does not have complete
information for verifying if a connection is triggered ac-
cording to the inter-process rule (see Section 3), the connec-
tion made by mshta.exe is detected as an extrusion. This is
because its parent process is svchost.exe rather than iex-
plore.exe, though it is the latter process that triggers its
creation. If BINDER had complete information for inter-
process event sharing, it would detect the connection re-
quest made by ftp.exe as an extrusion. This is because both
the process of ftp.exe and its parent process of ntvdm.exe
does not have any user input or data arrival event in its
history. So Dold, Dnew and Dprev for the connection re-
quest made by ftp.exe do not exist. This connection is used
to download malicious code. Therefore, BINDER’s detec-
tion plus some appropriate actions could have stopped the
adware from infecting the computer. Note that the three
parameters of Dupper
prev do not affect
BINDER’s detection of Spydeleter here.
new and Dupper
, Dupper
old
5.3 Controlled Testbed Experiments
The number of break-ins in our real world experiments is
very limited. To evaluate BINDER’s performance on false
negatives, we need to test BINDER with more real world
malware in a controlled testbed. In this section, we describe
our controlled testbed and present experimental results on
22 email worms and the worm Blaster.
5.3.1 Controlled Testbed
The key challenge here is to repeat break-ins as real as pos-
sible but without unwanted damages. We tackle this prob-
lem by building a controlled testbed using the Click mod-
ular router [8] and VMWare Workstation [29]. We choose
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
1 10/02/2004 14:40:10, PID=2368, PPID=240, NAME="C:\...\iexplore.exe" (process start)
2 10/02/2004 14:40:15, PID=2368 (user input)
3 10/02/2004 14:40:24, PID=2368 (user input)
4 10/02/2004 14:40:24, PID=2368, LPORT=1054, RIP=12.34.56.78, RPORT=80 (connection request)
5 10/02/2004 14:40:24, PID=2368, LPORT=1054, RIP=12.34.56.78, RPORT=80 (data arrival)
6 10/02/2004 14:40:28, PID=2552, PPID=960, NAME="C:\...\mshta.exe" (process start)
7 10/02/2004 14:40:29, PID=2552, LPORT=1066, RIP=87.65.43.21, RPORT=80 (connection request)
7 10/02/2004 14:40:29, PID=2552, LPORT=1066, RIP=87.65.43.21, RPORT=80 (data arrival)
......
......
......
8 10/02/2004 14:40:34, PID=2896, PPID=2552, NAME="C:\...\ntvdm.exe" (process start)
9 10/02/2004 14:40:35, PID=2988, PPID=2896, NAME="C:\...\ ftp.exe" (process start)
10 10/02/2004 14:40:35, PID=2988, LPORT=1068, RIP=44.33.22.11, RPORT=21 (connection request)
Figure 1. A stripped list of events logged during the break›in of adware Spydeleter.
Click for its powerful modules [9] for Network Address and
Port Translation (NAPT). In addition, we implement a con-
tainment module in Click which can pass, redirect or drop
outbound connections according to prede(cid:2)ned policies. The
advantage of using VMWare is that we can discard an in-
fected system and get a new one just by copying a few (cid:2)les.
VMWare also provides host-only private networks.
In the testbed, we have two Linux hosts running
VMWare Workstation. On the (cid:2)rst host, we have a Win-
dows virtual machine (VM) in a host-only private network.
This VM is used for executing malicious code attached in
email worms. The Click router on this host includes a con-
tainment module and a NAPT module. The containment
policy on this router is: (1) allow DNS traf(cid:2)c pass through;
(2) redirects all SMTP traf(cid:2)c (to port 25) to another Linux
host. The second Linux host has a Linux VM running the
eXtremail server [3] in a host-only private network. The
email server is con(cid:2)gured to accept all relay requests. The
Click router on this host also has a NAPT module that guar-
antees the email server can only receive inbound SMTP
connections. Thus, all malicious emails are contained in
the email server. This controlled testbed enables us to re-
peat the whole break-in and propagation process of email
worms.
5.3.2 Experiments with Email Worms
We obtained email worms from two sources. First, we
set up our own email server and published an email ad-
dress to USENET groups. This resulted in the email worm
W32.Swen.A@mm [26] being sent to us. Second, we were
fortunate to convince the system administrators of our de-
partment email server to give us 1843 (cid:2)ltered virus email
attachments which were collected over the week starting
on October 7th, 2004. We used Symantec Norton An-
tivirus [25] to scan these attachments and recognized 27
unique email worms. Among them, we used 21 email
worms because the rest of them were encrypted with a pass-
word. Thus, we tested 22 different real world email worms.
For each email worm, we manually start it on the Win-
dows virtual machine that has a (cid:2)le of 10 real email ad-
dresses used by authors, let it run for 10 minutes (with user
input in history), and then restart the virtual machine to run
another 10 minutes (without user input in history). We ana-
lyze BINDER’s performance using the traces collected dur-
ing the two 10 minute periods. We choose 10 minutes be-
cause they are long enough for email worms to scan hard
disk, (cid:2)nd email addresses, and send malicious emails to
them.
Our results show that BINDER successfully detects
break-ins of all 22 email worms in the second 10 minute
period by capturing the very (cid:2)rst malicious outbound con-