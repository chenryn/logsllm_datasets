### Dupper Parameters and Performance

Dupper parameters are dependent on both the speed of the computer and the user's behavior. Therefore, these parameters should be selected on a per-user basis. Our analysis shows that using the 90th percentile for parameter selection is not acceptable, and the improvement from the 95th to the 99th percentile is marginal. Consequently, parameters can be chosen based on a value within the 95th percentile, according to the user's preference. For more conservative users, smaller values should be selected.

The percentiles can be obtained by training BINDER over a period when the system is free of viruses. If training is not possible, parameters can still be chosen based on user preference. The values for Dupper_prev can range between 10 and 60 seconds, while Dupper_old can range between 600 and 3600 seconds. It is important to note that Dupper_new can be greater than Dupper_old because the reaction time from a user input or data arrival event to a connection request event is dependent on the instantaneous running condition of the computer.

### 5.2.2 False Positives

**Table 3: Breakdown of False Alarms According to Causes**

| User | A | B | C | D | E | F |
| --- | --- | --- | --- | --- | --- | --- |
| Inter-Process Whitelist Collection | 2 | 4 | 1 | 0 | 1 | 0 |
| Total | 1 | 1 | 0 | 1 | 1 | 0 |
|  | 0 | 0 | 0 | 1 | 1 | 1 |
|  | 3 | 5 | 1 | 2 | 3 | 2 |

By selecting parameters correctly, we aim to minimize false alarms. Table 2 indicates that choosing the 99th percentile results in at most five false alarms per computer, with a false positive rate of 0.03%. We manually reviewed these remaining false alarms and found they were caused by one of three reasons:

1. **Incomplete Information of Inter-Process Event Sharing**: For example, four out of the five false alarms for User B were due to this. We observed that PowerPoint calls IE to connect to the same IP address, while the parent process of PowerPoint is the Windows shell. This is likely due to the use of the Windows API ShellExecute.
2. **Incomplete Whitelisting**: Connections made by the Windows Application Layer Gateway Service were incorrectly treated as extrusions.
3. **Incomplete Trace Collection**: BINDER was accidentally turned off by the user during trace collection. Users have the option to turn BINDER on or off if they believe it is causing performance issues.

A breakdown of the false alarms is shown in Table 3. A better-engineered BINDER could eliminate false alarms associated with the Whitelist and Collection columns, resulting in significantly lower false positives. By extending BINDER to consider more inter-process communications beyond just parent-child processes, we can further reduce false alarms in the Inter-Process column.

### 5.2.3 False Negatives

In our real-world experiments, among six computers, one was infected by the adware Gator [24] and CNSMIN [12], and another was infected by Gator and Spydeleter [23]. Specifically, the second computer was compromised by Spydeleter while BINDER was running. BINDER successfully detected Gator and CNSMIN because they had no user input history. Below, we demonstrate how BINDER detected the break-in of Spydeleter immediately after it compromised the victim computer.

**Figure 1: Stripped List of Events During the Break-in of Adware Spydeleter**

1. 10/02/2004 14:40:10, PID=2368, PPID=240, NAME="C:\...\iexplore.exe" (process start)
2. 10/02/2004 14:40:15, PID=2368 (user input)
3. 10/02/2004 14:40:24, PID=2368 (user input)
4. 10/02/2004 14:40:24, PID=2368, LPORT=1054, RIP=12.34.56.78, RPORT=80 (connection request)
5. 10/02/2004 14:40:24, PID=2368, LPORT=1054, RIP=12.34.56.78, RPORT=80 (data arrival)
6. 10/02/2004 14:40:28, PID=2552, PPID=960, NAME="C:\...\mshta.exe" (process start)
7. 10/02/2004 14:40:29, PID=2552, LPORT=1066, RIP=87.65.43.21, RPORT=80 (connection request)
8. 10/02/2004 14:40:29, PID=2552, LPORT=1066, RIP=87.65.43.21, RPORT=80 (data arrival)
9. 10/02/2004 14:40:34, PID=2896, PPID=2552, NAME="C:\...\ntvdm.exe" (process start)
10. 10/02/2004 14:40:35, PID=2988, PPID=2896, NAME="C:\...\ftp.exe" (process start)
11. 10/02/2004 14:40:35, PID=2988, LPORT=1068, RIP=44.33.22.11, RPORT=21 (connection request)

After IE is opened, a user connects to a site with IP 12.34.56.78. The web page contains code to exploit a vulnerability in mshta.exe, which processes .HTA files. After mshta.exe is infected by the malicious .HTA file downloaded from 87.65.43.21, it starts a series of ntvdm.exe processes, which provide an environment for a 16-bit process to execute on a 32-bit platform. One of these ntvdm.exe processes then starts ftp.exe, which makes a connection request to 44.33.22.11.

Since the prototype of BINDER lacks complete information for verifying if a connection is triggered according to the inter-process rule (see Section 3), the connection made by mshta.exe is detected as an extrusion. This is because its parent process is svchost.exe rather than iexplore.exe, even though iexplore.exe triggered its creation. If BINDER had complete information for inter-process event sharing, it would detect the connection request made by ftp.exe as an extrusion. This is because both ftp.exe and its parent process, ntvdm.exe, do not have any user input or data arrival events in their history. Thus, Dold, Dnew, and Dprev for the connection request made by ftp.exe do not exist. This connection is used to download malicious code. Therefore, BINDER’s detection, combined with appropriate actions, could have prevented the adware from infecting the computer. Note that the three parameters Dupper_prev, Dupper_new, and Dupper_old do not affect BINDER’s detection of Spydeleter in this case.

### 5.3 Controlled Testbed Experiments

The number of break-ins in our real-world experiments is limited. To evaluate BINDER’s performance on false negatives, we conducted tests with more real-world malware in a controlled testbed. In this section, we describe our testbed and present experimental results for 22 email worms and the Blaster worm.

#### 5.3.1 Controlled Testbed

The key challenge is to simulate break-ins as realistically as possible without causing unwanted damage. We addressed this by building a controlled testbed using the Click modular router [8] and VMWare Workstation [29]. The Click router includes modules for Network Address and Port Translation (NAPT) and a containment module that can pass, redirect, or drop outbound connections based on predefined policies. VMWare allows us to discard an infected system and get a new one by copying a few files, and it provides host-only private networks.

In the testbed, we have two Linux hosts running VMWare Workstation. On the first host, we have a Windows virtual machine (VM) in a host-only private network, used for executing malicious code attached in email worms. The Click router on this host includes a containment module and a NAPT module. The containment policy is:
1. Allow DNS traffic to pass through.
2. Redirect all SMTP traffic (to port 25) to another Linux host.

The second Linux host has a Linux VM running the eXtremail server [3] in a host-only private network. The email server is configured to accept all relay requests. The Click router on this host also has a NAPT module that ensures the email server can only receive inbound SMTP connections. This setup allows us to repeat the entire break-in and propagation process of email worms.

#### 5.3.2 Experiments with Email Worms

We obtained email worms from two sources:
1. Setting up our own email server and publishing an email address to USENET groups, which resulted in receiving the W32.Swen.A@mm [26] email worm.
2. Convincing the system administrators of our department email server to provide 1843 filtered virus email attachments collected over a week starting on October 7th, 2004. Using Symantec Norton Antivirus [25], we identified 27 unique email worms, of which we used 21 (the rest were encrypted with a password).

For each email worm, we manually started it on the Windows virtual machine, which had a file containing 10 real email addresses used by the authors. We let it run for 10 minutes (with user input history) and then restarted the virtual machine to run another 10 minutes (without user input history). We analyzed BINDER’s performance using the traces collected during these two 10-minute periods. We chose 10 minutes because it is sufficient for email worms to scan the hard disk, find email addresses, and send malicious emails.

Our results show that BINDER successfully detected break-ins of all 22 email worms in the second 10-minute period by capturing the very first malicious outbound connection.