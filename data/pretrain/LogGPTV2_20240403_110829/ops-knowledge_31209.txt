User: Deploy a containerized application using Docker-compose and set environment variables and volume mappings
Assistant: To deploy a containerized application using Docker-compose, you need to define a service in a docker-compose.yml file, and set configuration items such as mirroring, environment variables, and volume mapping in the service. Here is an example of a basic docker-compose.yml file: ``` version: "3.9" services: web: image: nginx:latest environment: - ENV_VAR_1=value1 - ENV_VAR_2=value2 ports: - "8080:80" volumes: - ./nginx.conf:/etc/nginx/nginx.conf:ro - ./html:/usr/share/nginx/html ``` In the example, a service named "web" is defined, using the official nginx Mirror and map the local folders ("./nginx.conf" and "./html") to the relevant directories inside the container. Also, two environment variables (ENV_VAR_1 and ENV_VAR_2) are set in the service. Among them, ports are used to map the port in the container to the host (here, port 80 in the container is mapped to port 8080 on the host), and volumes are used to map the local folder to the relevant directory in the container. In this way, we can save the data in the container on the host to avoid data loss after the container logs off. To use Docker-compose to start the service, just enter the directory where the docker-compose.yml file is located in the terminal and execute the following command: ``` docker-compose up -d ``` Among them, "-d" means to run in the background mode to start the service. After a successful start, you can view the running container with the following command: ``` docker ps ```