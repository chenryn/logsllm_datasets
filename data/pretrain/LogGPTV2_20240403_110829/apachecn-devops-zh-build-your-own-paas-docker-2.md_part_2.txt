# upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress
RUN curl -o wordpress.tar.gz -SL https://wordpress.org/wordpress-${WORDPRESS_UPSTREAM_VERSION}.tar.gz \
 && echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c - \
 && tar -xzf wordpress.tar.gz -C /usr/src/ \
 && rm wordpress.tar.gz
COPY docker-entrypoint.sh /entrypoint.sh
# grr, ENTRYPOINT resets CMD now
ENTRYPOINT ["/entrypoint.sh"]
CMD ["apache2-foreground"]
```
好了，我们看到它建立在 Debian 喘息之上，并安装了 Apache2、PHP5 和其他一些东西。之后设置一堆环境变量，然后下载 WordPress。
我们看到几行以命令`COPY`开始。这意味着文件随 Docker 映像一起运送，并在启动时复制到容器内部。WordPress 映像附带的`docker-apache.conf`文件是这样的:
```
 DocumentRoot /var/www/html
 AllowOverride all
# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
```
前一行代码告诉 Apache 在哪里查找文件。
`docker-entrypoint.sh`文件呢？
`ENTRYPOINT`关键字告诉 Docker 守护程序，如果没有指定其他内容，则每当容器运行时，都应该执行该文件。就好像整个容器是一个可执行文件。
如果我们看一下这个文件中的内容，我们会发现它基本上建立了到 MySQL 数据库的连接，并配置了`.htaccess`和 WordPress:
```
#!/bin/bash
set -e
if [ -z "$MYSQL_PORT_3306_TCP" ]; then
 echo >&2 'error: missing MYSQL_PORT_3306_TCP environment variable'
 echo >&2 '  Did you forget to --link some_mysql_container:mysql ?'
 exit 1
fi
```
首先要做的是检查用户是否为 MySQL 连接设置了环境变量。如果没有，则退出并向`STDERR`写入一些信息。
为什么不你试试看你能不能触发写**错误的 MySQL 错误:丢失 MYSQL_PORT_3306_TCP 环境变量**到`STDERR`，如下:
```
docker run –-name some-wordpress –d wordpress
```
![Exploring published images](img/00021.jpeg)
`--name some-wordpress`命令给容器命名，所以我们以后可以用这个名字引用它。此外，`–d`参数告诉容器以分离模式运行，这意味着它不再从我们启动它的地方监听命令。最后一个`wordpress`参数是我们要运行的 Docker 映像的名称。
如果我们检查新容器的日志，我们将看到屏幕截图显示的内容:预期的错误消息。
让我们运行一个 MySQL 容器，看看我们是否能让它工作。导航到[https://registry.hub.docker.com/_/mysql/](https://registry.hub.docker.com/_/mysql/)，以便访问 docker 注册中心的官方 MySQL docker 存储库。这里声明，为了启动一个 MySQL 实例，我们需要在 shell 中调用**docker run-name some-MySQL-e MYSQL _ ROOT _ PASSWORD = my secret PASSWORD-d MySQL**。既然我们现在做这个是为了教育目的，我们就不用选择强根用户密码了。在下载了一些相关的映像之后，当我们执行`docker ps`时，我们应该能够看到我们的运行容器。如果有，运行`docker logs some-mysql`查看安装日志，如下图所示:
![Exploring published images](img/00022.jpeg)
很好，现在我们有了一个运行的 MySQL 容器，这是启动 WordPress 实例所需要的。让我们用 MySQL 链接启动一个新的 WordPress 实例:
```
docker run --name some-wordpress --link some-mysql:mysql –p 80 -d wordpress
```
`--link`参数通过注入到`some-wordpress`容器的环境变量来暴露`some-mysql`容器的环境变量、接口和暴露的端口。
为了打开可从外部到达的端口，端口 80 通过`–p 80`参数暴露。
如果你从守护进程收到一条错误消息说**错误响应:冲突，这个名字已经被分配给 a11c101cacaf。**，您必须删除(或重命名)该容器才能再次将`some-wordpress`分配给容器。你需要给新的容器一个新的名字或者删除旧的(失败的)WordPress 容器。调用`docker rm some-wordpress`使用所需名称删除旧容器。
当容器运行时，调用`docker ps`命令，找出我们的哪个端口被分配给容器的私有端口 80。
我们可以查看容器列表中的端口列，也可以调用`docker port some-wordpress 80`显式查找，如下所示:
![Exploring published images](img/00023.jpeg)
我的情况是港口 **49155** 。
在你的网络浏览器中输入你的 Docker hosts 的 **ip:port** ，看看你是否能到达。如果你在运行 Windows 或 OS X 的本地计算机上，你可以通过调用`boot2docker ip`找到你的 Docker IP。如果你在本地的 Linux 上， **127.0.0.1** 应该没问题。
我在亚马逊 EC2 上做这个，所以我必须去 EC2 管理控制台获取我的公共 IP 或公共 DNS。
将您的网络浏览器指向`http://yourip:yourport`(在我的例子中为`http://myamazon-dns.com:49155`)，您应该会看到:
![Exploring published images](img/00024.jpeg)
### 注
默认的亚马逊 AWS 安全策略是阻止默认的 Docker 公共端口，所以我们必须在 EC2 仪表盘的**安全组**部分更改这个。如何操作请参见【第 1 章、*安装 Docker、*中的【亚马逊 EC2 上的*Docker*部分。
太棒了，它起作用了！
# 总结
Docker 映像可以被看作是容器的只读模板，指定容器启动时应该安装、复制、配置和公开什么。
我们了解了更多关于如何与 Docker 守护程序和单个 Docker 容器交互以读取日志、复制文件和导出完整文件系统的信息。
Docker hub 被引入，我们查看了官方 WordPress Docker 映像由什么组成，以及他们如何在 Dockerfile 以及某种程度上在`ENTRYPOINT`文件中配置操作系统。
我们下载并运行了按预期失败的 WordPress 映像，并通过将所需的 MySQL 容器链接到它来修复它。
在下一章中，我们将创建一个 Docker 文件，并将 Docker 映像发布到 Docker 注册中心，这样我们就有办法将定制的 Docker 映像发送到我们决定放置 PaaS 的任何地方。