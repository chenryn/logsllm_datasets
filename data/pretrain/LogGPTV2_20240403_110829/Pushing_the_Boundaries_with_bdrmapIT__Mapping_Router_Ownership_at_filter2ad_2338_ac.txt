the AS set L(I R1,b2) contains ASA and ASC.
second link. Finally, we label IR7 E←→ d since IR8 responds with an
Echo Reply, whose source address in this case happened to be an
off-path address, i.e., an interface not used to receive the incoming
traceroute probe packets.
4.3 Assign Origin AS Sets to IRs
When we create a link, IRi ↔ j, where i and j have different origin
ASes, it is not immediately clear if IRi is operated by ASi or ASj.
Making that inference often requires analyzing the AS relationship
between ASi and ASj, so we add the origin AS of interface i to
the link’s origin AS set, LI Ri, j. Each origin AS set is specific to a
link between an IR, in this case the IR containing the interface i,
and a subsequent interface j. Keeping the origin AS set specific to
link IRi ↔ j, instead of creating a single origin AS set for j, helps
prevent incorrect inferences in the event j ever appears as a third-
party address. At the completion of this phase, LI Ri, j contains all
origin ASes of the IRi’s interfaces seen immediately prior to j in a
traceroute. In figure 5, L(I R1,b1) contains ASA since segment a1 − b1
crosses ASA. while L(I R1,b2) contains both ASA and ASC since those
ASes are crossed by the path segments a2 − b2 and c − b2.
We use the origin AS set to reason about all of the potential AS
relationships between an IR and a subsequent interface’s origin AS.
For example, if an origin AS set contains {ASA, ASB}, and c has
origin AS ASC, then we expect at least one of {ASA, ASB} to have a
relationship with ASC, or that a hidden AS exists between the ASes
in the origin AS set and ASC.
Origin AS sets illustrate a primary challenge of synthesizing
the bdrmap and MAP-IT approaches. Specifically, neither previous
approach had to worry about choosing among multiple origin ASes
60
IR1a ASA IR2b ASB NIR4 c1 ASC IR7 c2 ASC NIR8 d ASD ? E Mecho replyTTL expiredTTL expiredTTL expired            IR1              a1 ASA c ASC      IR2       b1 ASB      IR3        b2 ASB a2 ASA L(IR1,b2)={ASA,ASC}L(IR1,b1)={ASA}IMC ’18, October 31-November 2, 2018, Boston, MA, USA
A. Marder et al.
Figure 6: Traceroute with source address a1 and destination
address d. ASD is the destination AS and c’s IR3 only appears
at the end of our traceroutes. We can use ASD to help deter-
mine IR3’s operating AS.
for a given router in the graph; MAP-IT did not even consider routers,
and bdrmap only mapped the borders of a single, known origin AS.
4.4 Assign Destination ASes to IRs
To correctly label routers found only at the end of traceroute (§6.1.1),
we build a destination AS set for each IR. This destination AS set
contains the origin ASes of the traceroute destination addresses
that resulted in a reply from at least one of the IR’s interfaces.
We first compile destination AS sets for each interface. In Fig. 6,
we add ASD to the destination AS sets for a2, b, and c. The lone
exception is when a traceroute ends in an Echo Reply, in which
case we do not record the destination AS for the last IR. In this case
the destination AS adds no value, since it is always the same as the
interface’s origin AS, owing to the fact that the source address of
an echo reply is simply the destination address probed.
We aggregate the destination AS sets for each interface on an
IR into a single destination AS set for that IR. The possibility of
prefix reallocation by ISPs [23] complicates this aggregation process.
To detect likely reallocated prefixes, we look for interfaces with
exactly two destination ASes, where one of the ASes matches the
interface’s origin AS, and the other AS has a customer cone of at
most five ASes. This restriction on the customer cone size ensures
we capture ASes who are small enough to likely receive reallocated
prefixes from their provider. When these two ASes have no BGP-
observable relationship, we assume that the relationship between
them is missing due to prefix aggregation, which occurs when
the provider aggregates the reallocated prefix into its own BGP
announcements. If so, we remove the destination AS with the largest
customer cone, which we infer to be the reallocating provider. After
removing reallocated provider ASes, the IR destination AS set is
simply the union of its interface destination AS sets.
Figure 7: Using paths from Figure 2, IR2 was seen by paths
going to ASB so its destination AS set is {ASB}. Since ASB
matches the origin AS of interface b1, IR2 is annotated with
ASB. IR3 was seen by paths going to both ASD and ASE so its
destination set includes both. ASD has a relationship with
ASB so IR3 is annotated with ASD.
5.1 When the Destination AS Set is empty
Since we do not use echo replies to build the destination AS set
(§4.4), when all interfaces on an IR are only seen in echo replies,
the destination AS set will be empty. We have only the origin AS
set to reason about the IR. In the February 2018 ITDK, 73.3% of
last hop IRs have an empty destination AS set. We do not know of
any techniques for improving the mappings for these IRs without
additional probing.
If one or more ASes in the origin AS set has a relationship with
all other ASes in the set, we select that AS. In the event of a tie, we
select the AS with the smallest customer cone, inferring that AS
to be a customer of the other ASes. Otherwise, we look for an AS
not in the origin AS set that has a relationship to all ASes in the
set, and infer that AS to be connected to the other ASes. Finally,
we select the AS with the most interface AS mappings in the set,
breaking ties by selecting the AS that has the smallest customer
cone.
5.2 When the Destination AS Set is not empty
Destination ASes for an IR enable greater accuracy than relying
on the IR’s interfaces alone, because destination ASes can provide
topological constraints that inform router ownership. The order in
which we describe the different cases is both the order in which
they appear in the algorithm (Alg. 1), and their frequency order in
our datasets.
5 PHASE 2: ANNOTATE LAST HOPS
In many datasets, the vast majority of IRs (≈ 98% in CAIDA’s Feb-
ruary 2018 ITDK [6]) have no outgoing links, caused by several
factors: the IR was the destination or last reachable hop on a path
probed by traceroute; or intermediate nodes rate-limited, blocked,
or dropped ICMP responses. Phase 2 uses the destination AS sets
compiled in the previous phase to annotate each IR, without out-
going links, with their operating AS regardless of the reason. The
intuition behind this phase is to find a single AS with a known AS
relationship with the IR’s other origin ASes. The following heuris-
tics first derive a list of acceptable candidates, then infer the best
among them.
Algorithm 1 Annotating Last Hop Router, ir
1: D ← destinationASes[ir]
2: O ← {i ∈ ir | i.asn}
3: if |O ∩ D| = 1 then return the single AS
4: Dr el ← { d ∈ D | ∃o ∈ O : hasRelationship(d, o) }
5: if |Dr el | > 0 then
return max
6:
d ∈Dr el
7: a ← min
coneSize[asn]
asn∈D
8: C ← customers of any o ∈ O
9: if |providers[a] ∩ C| = 1 then return the single AS
10: return a
|customerCone[d] ∩ D|
61
dst src        IR2 b ASB IR1a2 ASA IR3 c ASC a1 ASA d ASD             IR1              a1 ASA c ASC      IR2     ASB b1 ASB      IR3     ASD b2 ASB a2 ASA dst:{ASD,ASE}dst:{ASB}Pushing the Boundaries with bdrmapIT
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Overlapping ASes (line 3): As we visit each IR, we first select
the ASes in common between the origin and destination AS sets.
When there is only one overlapping AS, we infer that AS to operate
the router. In case there are multiple overlapping ASes, we select
the AS with the smallest customer cone, assuming this AS is using
a reallocated prefix from the larger AS.
Relationship Between Origins and Destinations (lines 4-6):
If there are no overlapping ASes, we next look for destination ASes
that have a relationship with any of the origin ASes. If there is only
a single AS, we use it as the AS annotation. If there are multiple, we
use the AS with the largest customer cone, inferring it is a transit
provider for the others. In fig 7, the relationship between interface
b2’s ASB and ASD in IR3’s destination justifies annotating IR3 with
ASD.
No Relationship ASes (lines 7-10): The final case is when there
is no AS relationship between any destination and origin ASes.
Initially, we look for an AS between the origins and destinations,
specifically looking for ASes that are both a provider to at least one
destination AS, and also a customer of at least one origin AS. If we
find exactly one such AS, we annotate the IR with it. Otherwise,
we select the destination AS with the smallest customer cone.
6 PHASE 3: GRAPH REFINEMENT
The graph refinement loop has two steps. The first step iterates
over the IRs, using their outgoing links to annotate IRs with their
operating AS (§6.1). The second step relies on IR annotations to
update the AS annotation of each interface with the interconnecting
AS (the other side of the link) (§6.2).
Prior to entering the graph refinement loop, bdrmapIT initial-
izes all interface annotations with the origin AS of the interface.
Throughout iterations of the graph refinement loop, annotations
propagate across the graph, enabling bdrmapIT to refine the anno-
tations, improving its accuracy (§6.3). We iterate until we reach a
repeated state, i.e., when all of the annotations at the end of one
iterations are the same as the annotations at the end of a previous
iteration.
6.1 Annotate IRs
The first phase of refinement is to annotate all IRs with an AS
(Alg. 2). Intuitively, we use the current AS annotations of the IRs
and interfaces to determine the most frequently appearing AS for an
IR’s set of subsequent interfaces, similar to MAP-IT’s approach. We
also leverage adapted bdrmap heuristics and framing assumptions
to apply exceptions and tiebreakers.
First, we sum the votes of subsequent interfaces (§6.1.1). We
assume that typically, the AS with the most votes, representing the
largest number of links from an IR, is the IR operator. Next, we
change votes if we encounter a reallocated prefix (§6.1.2). We then
check if the votes match one of our exception conditions (§6.1.3) that
violate the assumptions of our majority-vote annotation technique.
If the votes do not match any exception condition, we give each
IR interface a vote, using its origin AS, and select the AS with the
highest number of votes, breaking ties if necessary (§6.1.4). Finally,
we check for a hidden AS in §6.1.5, possibly replacing the selected
AS with a hidden AS. bdrmapIT uses the final AS selection as the
IR’s AS annotation.
increment(V[a])
a ← IRLinkHeuristics(ir , j)
if a != NULL then
∀o ∈ Sir, j : add o to M[a]
Algorithm 2 Annotating IR, ir
1: V : counter for AS votes
2: M: map of ir origin ASes to subsequent ASes
3: for all interface j ∈ subseqent[ir] do
4:
5:
6:
7:
8: Fix reallocated prefixes
9: for all i ∈ ir .interfaces do increment(V[i.as])
10: Look for exception cases
11: R ← ir .origins ∪ {v ∈ V | ∃o ∈ M[v] : rel(o, v)}
12: if R != ir .origins then return max
v ∈R
13: a ← max
v ∈V
14: return Look for hidden AS between M[a] and a
V[v]
V[v]
▷ §6.1.1
▷ §6.1.2
▷ §6.1.3
▷ §6.1.4
▷ §6.1.4
6.1.1 Apply Link Vote Heuristics. The first step is to count the link
votes based on three heuristics represented in Alg. 3. As explained
in §4.2, when computing the link votes for an IR, we only use the
N←→ links, relying on E←→ and M←→ links only when they are the only
links available. This step begins by checking for the three cases
(line 2-8, detailed next) in which we do not use the AS annotation
on the interface as the vote. Usually, none of these cases apply, and
we rely on the interface’s annotation (line 9).
coneSize[a]
Algorithm 3 IRLinkHeuristics(ir , j)
1: if j.as ∈ Lir, j then return j.as
2: if j ∈ IXP addresses then return max
a∈Lir , j
3: ASj ← annotation[j.ir]
4: if ASj is unannounced then return NULL
5: if j is unannounced then return ASj
6: if j.asn (cid:44) ASj ∧ ∃a ∈ Lir, j : hasRel(a, ASj) then
D ← the set of destination ASes for link Eir, j
if j.asn (cid:60) D then return ASj
7:
8:
9: return annotation[j]
IXP Address (line 2): When ir’s subsequent interface j is an IXP
public peering address, we instead use the AS in Lir, j (the origin
AS set for interfaces on ir seen prior to j in a traceroute) with
the largest customer cone; this AS is likely the top of the transit
hierarchy. This choice reflects conventional assumptions [17] that
in general AS paths are valley-free, contain at most one peering
link, and that networks do not forward packets from a provider to
a peer. Since we have a strong indication that i is used for a public
peering link, we try to identify the likely transit provider AS among
the origin ASes of the ir interfaces.
Unannounced Addresses (line 5): After ensuring the subse-
quent interface address does not match a prefix in our IXP dataset,
we check if the address fails to match any prefix in BGP announce-
ments or RIR delegations, which we call unannounced addresses.
In the datasets used in §7, this occurs for 0.1% of the interface
62
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
A. Marder et al.
Figure 8: Annotating IRs with unannounced interface ad-
dresses. IR4 was annotated by the last hop heuristic. In the
first iteration of the graph refinement loop IR2 and IR3 are
annotated with ASX , enabling the annotation of IR1.
Figure 9: Interface c is potentially a third-party address be-
cause its origin ASC, its IR’s annotation ASB, and the ASes
{ASA} in LI R1,c are all different.
addresses. While the empty origin AS for the subsequent inter-
face provides no value, we can instead give a vote to its IR’s AS
annotation.
There are two ways that IRs with unannounced interface ad-
dresses receive annotations, either using destination ASes in §5 or
using subsequent ASes in this step. In this heuristic, we are con-
cerned with IRs that have a link to a subsequent interface with an
unannounced address, in which case we give a vote to the IR’s AS
annotation. Due to the iterative nature of the graph refinement loop,
using the AS annotation of the subsequent interface’s IR enables us
to annotate IRs with links to unannounced addresses, even when