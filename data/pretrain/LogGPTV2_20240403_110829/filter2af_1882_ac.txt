`https://github.com/MikeMcl/bignumber.js/blob/master/CHANGELOG.md`
## 1.11. 规则依赖于时间和状态存在危险性
### 1.11.1. 风险：低危
影响性：中，可利用性：低
### 1.11.2. 标识
NCC-EF-Clef-012
### 1.11.3. 分类
配置
### 1.11.4. 位置
  * cmd/clef/rules.md
### 1.11.5. 影响
存在改变`Clef`状态和时间访问的攻击。如果成功安装，它们将允许攻击者恢复`Clef`规则使用的状态或改变`Clef`所看到和使用的时间。这最终可能允许有权访问`Clef`接口的攻击者移除规则上的某些限制。
    var windowstart = new Date().getTime() - window;
攻击者存在不同的方式来影响设备运行时间而不是系统上的root用户：
  1. 如果在日期程序中设置了`CAP_SYS_TIME` 功能，则任何用户都可以更改时间。
  2. 如果攻击者在网络中具有特权中间位置，她可以攻击NTP协议以改变设备的时间。
此外，为了在执行规则之间保持状态，Clef保留加密的键值存储（jsStorage）。特定攻击可能允许攻击者改变此状态并删除一些限制（例如，如果布尔值设置为阻止进一步的交易事务，则恢复状态将允许交易事务再次流动）：
  1. 如果攻击者具有对计算机的物理访问权限，则可以将其重新设置为以前的快照。
  2. 如果攻击者拥有`jsStorage`的文件权限，她可以记录更改并将文件还原到以前的某个时间点。
这些攻击可能允许攻击者阻止某些规则正常工作，或者更糟糕的是，攻击者直接访问Clef的API，让钱包中的金钱流失。
### 1.11.6. 修复建议
这一发现强调了运行Clef的系统的安全性至关重要。应根据涉及的程度，为不同类型的用户提供不同的建议。可以编写不同的威胁模型，记录Clef防范和不防范的内容。最终，很难防御来自强大对手的这些类型的高度针对性的攻击，它们应该超出Clef的威胁模型。
### 1.11.7. 参考资料
cmd/clef/rules.md
`http://man7.org/linux/man-pages/man7/capabilities.7.html`
`https://www.cs.bu.edu/~goldbe/NTPattack.html`
## 1.12. 通过格式错误的导入密钥拒绝服务
### 1.12.1. 风险：低危
影响性：中，可利用性：低
### 1.12.2. 标识
NCC-EF-Clef-013
### 1.12.3. 分类
数据验证
### 1.12.4. 位置
  * accounts/keystore/keystore_passphrase.go
### 1.12.5. 影响
一个可以访问API或拥有特权中间人位置的攻击者，可能会制造恶意导入请求或篡改它们，以便在不提醒用户的情况下使应用程序崩溃或更改导入的密钥。
### 1.12.6. 描述
`Clef`
的API公开了一种“导入”方法，允许请求导入已有的帐户。此导入方法接受一个加密密钥作为参数，必须以特定格式格式化。`Clef`接受两种不同的加密方法格式：版本1和版本3。处理密钥导入的大多数代码都假定请求传递的参数是可信的，这可能是因为在实践中，无法编写规则来处理此方法——用户必须手动接受导入请求。以下代码路径都存在问题：
1）导入私钥。
导入流程最终调用`crypto.ToECDSAUnsafe()`方法，如所示，“如果盲目地将二进制blob转换为私钥。它们几乎不会被使用，除非您确定输入的有效性并且避免由于错误的原编码而导致错误（0前缀会被截断）”。
2）JSON解析。
JSON对象中的几个字段，在没有事先检查它们是否存在的情况下进行恢复操作。用于恢复KDF参数的`getKDFKey()`函数不会将空内容映射视为`cryptoJSON.KDFParams`，如果给定一个，则会崩溃。此外，一般以整数作为KDF对象的字段，但即使给定字符串，它也没有进行判断。
3）KDF参数。
可以通过向密钥导出函数提供极大的参数导致拒绝服务，这将迫使程序计算无法进行的加密操作。
4）经过身份验证的加密。
在尝试对导入的密钥进行解密之前，密钥库将验证密文的完整性，以便检测来自中间攻击者的任何篡改。此完整性检查不包括IV，并且不会在恒定时间内完成。这可能允许攻击者篡改IV，使得用户解密错误的私钥，并且没有Clef给出的任何警报（即使恢复的“地址”不同于在请求中作为参数传递的“地址”字段）。
5）解密。
导入器的版本1将使用`AES-CBC`来解密接收到的密钥，特别是低级`CryptBlocks`函数，将多个`blocksize`作为参数。否则，该功能将会出现`panic`报错。
### 1.12.7. 复现步骤
将 Clef 程序的 RPC 接口暴露在 `localhost:8550`，然后在命令行窗口执行下面的命令，可以观察到 Clef 程序奔溃。
    curl -i -H "Content-Type: application/json" -X POST \
    --data '{"jsonrpc":"2.0","method":"account_import", \
    "params":[{"version":"1","address":"string", \
    "id":"string","crypto":{"cipher":"","ciphertext":"", \
    "cipherparams":{"iv":""},"kdf":"", \
    "kdfparams":{},"mac":""}}],"id":67}' http://localhost:8550/
下面的 payloads 也能够导致程序奔溃。
    {"version":"1","address":"string","id":"string","crypto": \
    {"cipher":"","ciphertext":"","cipherparams":{"iv":""},"kdf":"", \
    "kdfparams":{"salt":"","dklen":"","n":"","r":"","p":"","c":"", \
    "prf":""},"mac":""}}
    {"version":"1","address":"string","id":"string","crypto": \
    {"cipher":"","ciphertext":"01","cipherparams":{"iv":""}, \
    "kdf":"pbkdf2","kdfparams": \
    {"salt":"","dklen":5,"n":5,"r":5,"p":5,"c":5, \
    "prf":"hmac-sha256"}, \
    "mac":"32f2f344a0bdf0434df8d3c3fd2afd043c1a26b969bb7c448abd67a4af27ae03"}}
### 1.12.8. 修复建议
在文档中详细说明导入API必须只接收可信任的和通过验证的输入。 此外，还要解决这一发现中强调的问题。
此外，请考虑从Clef的API中删除Import方法。
## 1.13. 加密的密钥库完整性检查不完整
### 1.13.1. 风险：低危
影响性：低，可利用性：低
### 1.13.2. 标识
NCC-EF-Clef-014
### 1.13.3. 分类
密钥存储
### 1.13.4. 位置
  * accounts/keystore/keystore_passphrase.go
### 1.13.5. 影响
攻击者可以篡改钱包备份，而不会提醒用户，在尝试使用钱包密钥之前，用户不会意识到攻击。
### 1.13.6. 描述
`Go-Ethereum`的密钥库包具有导出的`EncryptKey()`方法，能够以加密形式存储钱包。此加密使用从用户已知的密码短语派生的密钥。作为完整性检查的一种方法，为了确保加密密钥的备份没有被篡改，密钥库通过密文计算消息认证码（MAC），如下所示：
    // EncryptKey encrypts a key using the specified scrypt parameters into a json
    // blob that can be decrypted later on.
    func EncryptKey(key *Key, auth string, scryptN, scryptP int) ([]byte, error) {
        // ...
        derivedKey, err := scrypt.Key(authArray, salt, scryptN, scryptR, scryptP, scryptDKLen)
        // ...
        iv := make([]byte, aes.BlockSize) // 16
        if _, err := io.ReadFull(rand.Reader, iv); err != nil {
            panic("reading from crypto/rand failed: " + err.Error())
        }
        cipherText, err := aesCTRXOR(encryptKey, keyBytes, iv)
        // ...
        mac := crypto.Keccak256(derivedKey[16:32], cipherText)
此完整性检查不包括加密/解密过程的重要部分，允许攻击者在不必修改密文的情况下篡改它。由于加密的内容具有高熵，因此不能执行强攻击。
### 1.13.7. 修复建议
使用经过身份验证的密码，如`AES-GCM`，它将加密与完整性检查编译为单个算法。
## 1.14. UI混合了无关和特定允许的数据
### 1.14.1. 风险：建议
影响性：不确定，可利用性：不确定
### 1.14.2. 标识
NCC-EF-Clef-006
### 1.14.3. 分类
数据有效性
### 1.14.4. 位置
  * signer/core/cliui.go
### 1.14.5. 影响
攻击者可以通过在 Clef UI 中显示攻击者控制的信息来对用户进行网络攻击。
### 1.14.6. 描述
当`Clef`通过其公开的API接收请求时，元数据将显示给负责处理它的用户。此元数据包括的各种字段均与IP地址，用户代理，来源等签名内容无关。在`signer/core/cliui.go`中有6个通过调用`showMetadata()`来调用此功能。其中一些字段可能会被轻微篡改，并可能提供错误的理解，因为用户可能过分依赖它们而不是重要的字段。
Clef将接受以下“恶意”请求（使用Go代码示例注释编造的JSON）。
    curl http://localhost:8550/ \
        -i -H "Content-Type: application/json" \
        -X POST --data '{...}' \
        -A "indicates INVALID CHECKSUM IS EXPECTED" \
        -H "Origin: NCC Group requires IMMEDIATE APPROVAL per direction of J Smith"
Clef 将向用户显示以下信息
    --------- Transaction request-------------    to: 0x07a565b7ed7d7a678680a4c162885bedbb695fe0
    WARNING: Invalid checksum on to-address!
    from: 0x82A2A876D39022B3019932D30Cd9c97ad5616813 [chksum ok]
    value: 16 wei
    gas: 0x333 (819)
    gasprice: 291 wei
    nonce: 0x0 (0)
    data: 0x4401a6e40000000000000000000000000000000000000000000000000000...012
    Transaction validation:
      * WARNING : Invalid checksum on to-address
      * Info : safeSend(address: 0x0000000000000000000000000000000000000012)
    Request context:
            127.0.0.1:40802 -> HTTP/1.1 -> localhost:8550
            User-Agent: indicates INVALID CHECKSUM IS EXPECTED
            Origin: NCC Group requires IMMEDIATE APPROVAL per direction of J Smith
    -------------------------------------------    Approve? [y/N]:
    >
如目前所示，元数据对合法请求几乎没有好处，却可能促进非法请求。天真的用户可能会将无关的请求数据视为取代上述真实警告并错误地批准此交易。
### 1.14.7. 复现步骤
如果没有明确的描述和警告，请不要在特定于审批的数据旁边显示请求元数据。 要么明确标记所显示的类别，并警告不能依赖请求数据，要么只删除所有请求数据。
### 1.14.8. 修复建议
如果没有明确的描述和警告，请不要在特定允许的数据旁边显示请求元数据。要么明确标记所显示的类别，并警告不能依赖请求数据，要么只删除所有请求数据。
### 1.14.9. 客户反馈
在显示由API的外部调用者提供的元数据之前添加了另一条消息：github.com/holiman/go-ethereum/commit/c6d7644e5a5bd0fe23c7f060a390112115515cab
## 1.4. 附录
### 1.4.1. 声明
我们努力提供准确的翻译，可能有些部分不太准确，部分内容不太重要并没有进行翻译，如有需要请参见原文。
### 1.4.2. 原文地址