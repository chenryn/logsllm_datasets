## PostgreSQL Oracle 兼容性 - WITHIN GROUP (sql standard ordered set aggregate functions)  
### 作者                                       
digoal                               
### 日期                                                                                                   
2013-08-01                              
### 标签                                
PostgreSQL , within group , oracle 兼容性     
----                                                                                                
## 背景                        
WITHIN GROUP 可以认为是PostgreSQL 聚合函数的功能性扩展.  Oracle 对此支持比较完善. PostgreSQL 9.4 新增了这个功能.  
本文末尾对Oracle的用法做了详细的介绍和举例说明 :   
对聚合或者自定义聚合函数不了解到朋友可以先参考以下文章 :   
[《Postgres-XC customized aggregate introduction》](../201305/20130502_01.md)    
[《PostgreSQL aggregate function customize》](../201212/20121218_02.md)    
[《performance tuning about multi-rows query aggregated to single-row query》](../201212/20121217_01.md)    
本文将要提到的这个PostgreSQL within group功能补丁实现方法如下 :   
```  
This is our current work-in-progress patch for WITHIN GROUP.  
What mostly works:  
  - percentile_cont(float8) within group (order by float8)  
  - percentile_cont(float8) within group (order by interval)  
  - percentile_disc(float8) within group (order by float8)  
What doesn't work:  
  - supporting other types in percentile_disc (want polymorphism to  
    work first)  
  - no commands yet to add new ordered set functions (want to nail  
    down the catalog representation first)  
  - no hypothetical set functions yet (need to resolve the above two  
    points first)  
  - some rough edges  
  - probably some bugs  
  - docs  
Implementation details:  
For execution, we repurpose the existing aggregate-orderby mechanics.  
Given func(directargs) WITHIN GROUP (ORDER BY args), we process the  
(ORDER BY args) into a tuplesort in the same way currently done for  
agg(args ORDER BY args). Rather than using a transfn, we then call the  
finalfn as finalfn(directargs), providing an API by which the finalfn  
can access the tuplesort. (This is somewhat inspired by the window  
function API, but unfortunately has nothing in common with it in terms  
of requirements, so we couldn't just reuse it.)  
-- 上面的片段介绍有点问题, 应该是常规调用func(directargs) WITHIN GROUP (ORDER BY args)  
-- 最后再调用finalfn(directargs)  
func(p1,p2,...) WITHIN GROUP (ORDER BY q1,q2,...) is represented in the  
catalog with two pg_proc rows:  
func(p1,p2,...,q1,q2,...)  (proisagg=true)  
func_final(p1,p2,...)  
with the usual pg_aggregate row linking them, though aggtransfn is set  
to InvalidOid (as is aggtranstype) and an additional flag indicates  
that this is an ordered set function.  
(This representation is inadequate for a number of reasons; it does not  
handle polymorphism well and would require special-case coding for  
hypothetical set functions, which we have not yet tackled. See our other  
post.)  
```  
函数 :   
```  
digoal=# select oid,* from pg_proc where proname='percentile_disc';  
-[ RECORD 1 ]---+----------------  
oid             | 3931  
proname         | percentile_disc  
pronamespace    | 11  
proowner        | 10  
prolang         | 12  
procost         | 1  
prorows         | 0  
provariadic     | 0  
protransform    | -  
proisagg        | t  
proiswindow     | f  
prosecdef       | f  
proleakproof    | f  
proisstrict     | t  
proretset       | f  
provolatile     | i  
pronargs        | 2  
pronargdefaults | 0  
prorettype      | 701  
proargtypes     | 701 701  
proallargtypes  |   
proargmodes     |   
proargnames     |   
proargdefaults  |   
prosrc          | aggregate_dummy  
probin          |   
proconfig       |   
proacl          |   
digoal=# select * from pg_aggregate where aggfnoid=3931;  
-[ RECORD 1 ]---+----------------------  
aggfnoid        | percentile_disc  
aggtransfn      | -  
aggfinalfn      | percentile_disc_final  
aggsortop       | 0  
aggtranstype    | 0  
aggisordsetfunc | t  
agginitval      |   
digoal=# \df PERCENTILE_cont  
                                      List of functions  
   Schema   |      Name       | Result data type |        Argument data types         | Type   
------------+-----------------+------------------+------------------------------------+------  
 pg_catalog | percentile_cont | double precision | double precision, double precision | agg  
```  
聚合函数PERCENTILE_cont参数为2个双精, 分别表示func(directargs) WITHIN GROUP (ORDER BY args)里的directargs和args.  
finalfn为percentile_disc_final一个双精.表示directargs.  
```  
digoal=# \df percentile_disc_final  
                                  List of functions  
   Schema   |         Name          | Result data type | Argument data types |  Type    
------------+-----------------------+------------------+---------------------+--------  
 pg_catalog | percentile_disc_final | double precision | double precision    | normal  
(1 row)  
```  
补丁测试 :   
```  
[root@db-172-16-3-33 pg94]# cd postgresql-10a509d  
[root@db-172-16-3-33 postgresql-10a509d]# patch -p1  psql  
psql (9.4devel)  
Type "help" for help.  
digoal=# CREATE TABLE aggtest ( a     int2, b       float4);  
digoal=# copy aggtest from '/home/pg94/postgresql-10a509d/src/test/regress/data/agg.data';  
COPY 4  
digoal=# CREATE TABLE tenk1 (                                                               
        unique1         int4,  
        unique2         int4,  
        two                     int4,  
        four            int4,  
        ten                     int4,  
        twenty          int4,  
        hundred         int4,  
        thousand        int4,  
        twothousand     int4,  
        fivethous       int4,  
        tenthous        int4,  
        odd                     int4,  
        even            int4,  
        stringu1        name,  
        stringu2        name,  
        string4         name  
);  
digoal=# copy tenk1 from '/home/pg94/postgresql-10a509d/src/test/regress/data/tenk.data';  
COPY 10000  
select p, percentile_cont(p order by p) within group (order by x::float8)   
        from generate_series(1,5) x, (values (0::float8),(0.1),(0.25),(0.4),(0.5),(0.6),(0.75),(0.9),(1)) v(p)   
        group by p order by x;  
ERROR:  Cannot have multiple ORDER BY clauses with WITHIN GROUP  
LINE 1: select p, percentile_cont(p order by p) within group (order ...  
                                                ^  
select p, sum() within group (order by x::float8)   
        from generate_series(1,5) x,   
        (values (0::float8),(0.1),(0.25),(0.4),(0.5),(0.6),(0.75),(0.9),(1)) v(p) group by p order by p;  
ERROR:  sum(double precision) is not an ordered set function  
select p, percentile_cont(p,p) from generate_series(1,5) x,   
        (values (0::float8),(0.1),(0.25),(0.4),(0.5),(0.6),(0.75),(0.9),(1)) v(p) group by p order by p;  
ERROR:  Ordered set function specified, but WITHIN GROUP not present  
LINE 1: select p, percentile_cont(p,p) from generate_series(1,5) x,   
                  ^  
select percentile_cont(0.5) within group (order by b) from aggtest;  
 percentile_cont    
------------------  
 53.4485001564026  
(1 row)  
select percentile_cont(0.5) within group (order by b),sum(b) from aggtest;  
 percentile_cont  |   sum     
------------------+---------  
 53.4485001564026 | 431.773  
(1 row)  
select percentile_cont(0.5) within group (order by thousand) from tenk1;  
 percentile_cont   
-----------------  
           499.5  
(1 row)  
select percentile_disc(0.5) within group (order by thousand) from tenk1;  
 percentile_disc   
-----------------  
             499  
```  
下面在对比Oracle和PostgreSQL中的percentile_disc和percentile_cont; 结果一致.  
Oracle测试在本文参考部分.  
PostgreSQL测试如下 :   
```  
digoal=# create table test (id numeric);  
CREATE TABLE  
digoal=# insert into test values  (1.1),(2.2),(3.3),(4.4),(5.5),(6.6),(null);  
INSERT 0 7  
digoal=# select * from test;  
 id    
-----  
 1.1  
 2.2  
 3.3  
 4.4  
 5.5  
 6.6  
(7 rows)  
digoal=# select PERCENTILE_cont(0.5) within group (order by id) from test;  
 percentile_cont   
-----------------  
            3.85  
(1 row)  
digoal=# insert into test select 6.6 from generate_series(1,8);  
INSERT 0 8  
digoal=# select PERCENTILE_disc(.285714286) within group (order by id) from test;  
 percentile_disc   
-----------------  
             5.5  
(1 row)  
digoal=# select PERCENTILE_disc(.285714285) within group (order by id) from test;  
 percentile_disc   
-----------------  
             4.4  
(1 row)  
```  
## 参考  
[《Postgres-XC customized aggregate introduction》](../201305/20130502_01.md)    
[《PostgreSQL aggregate function customize》](../201212/20121218_02.md)    
[《performance tuning about multi-rows query aggregated to single-row query》](../201212/20121217_01.md)    
http://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL  
Oracle? Database SQL Language Reference 11g Release 2 (11.2)  
http://docs.oracle.com/cd/E11882_01/server.112/e26088/functions003.htm#i89203  
### oracle within group  
Aggregate Functions :   
```  
CUME_DIST, DENSE_RANK, LISTAGG, PERCENT_RANK,   
PERCENTILE_CONT, PERCENTILE_DISC, RANK ...  
```  
Oracle MEDIAN function, 用来获取一组数据中排序后得到的中间值. 举例如下 :   
```  
SQL> create table test(id numeric(8,3));  
SQL> insert into test values (1.1);  
SQL> insert into test values (2.2);  
SQL> insert into test values (3.3);  
SQL> insert into test values (4.4);  
SQL> insert into test values (5.5);  