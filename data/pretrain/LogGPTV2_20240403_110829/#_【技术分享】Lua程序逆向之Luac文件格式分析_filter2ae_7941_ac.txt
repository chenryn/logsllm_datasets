    local string str = "world";
    local string str2 = "hello " + str + "!n";
**010 Editor** 模板中的宏有限制，并不能解析那些需要展开后替换符号的宏，只支持那些能够直接计算的宏。如下面的BITRK与ISK宏：
    #define SIZE_B9
    #define BITRK(1  LUA_DATATYPE {
        LUA_TNIL=     0,
        LUA_TBOOLEAN=  1,
        LUA_TLIGHTUSERDATA =  2,
        LUA_TNUMBER=     3,
        LUA_TSTRING=     4,
        LUA_TTABLE=     5,
        LUA_TFUNCTION=     6,
        LUA_TUSERDATA=     7,
        LUA_TTHREAD=     8,
        LUA_NUMTAGS     =    9,
    };
**010 Editor** 模板中支持调用常见的C语言库函数，如 **strlen** ()、 **strcat** ()、 **print** ()、
**sprintf** ()、 **strstr** ()，不同的是，函数名上有些差别，这些可调用的函数在 **010 Editor**
模板中首字母是大写的，因此，在调用时，它们分别是 **Strlen** ()、 **Strcat** ()、 **Print** ()、
**Sprintf** ()、 **Strstr** ()。更多支持的字符串操作的函数可以查看 **010 Editor** 的帮助文档“String
Functions”小节，除了“String Functions”外，还有“I/O Functions”、“Math Functions”、“Tool
Functions”、“Interface Functions”等函数可供模板代码使用。
接下来看下代码结构部分， **010 Editor** 模板支持C语言中的for/while/dowhile等循环语句，这些语句可以用来组成到 **010
Editor** 模板的函数与代码块中。一点细微的差别是 **010 Editor**
模板的返回类型只能是上面介绍过的基础类型，不支持自定义类型与数组结构，这就给实际编写代码带来了一些麻烦，遇到这种函数场景时，就需要考虑更改代码的结构了。
**编写luac.bt文件格式模板**
****
了解了 **010 Editor**
模板语法后，就可以开始编写Luac.bt模板文件了。编写模板前，需要找好一个Luac文件，然后边写边测试，生成一个Luac文件很简单，可以编写好hello.lua后，执行下面的命令生成hello.luac：
    $ luac -o ./hello.luac ./hello.lua
生成好Luac文件后，就是编写一个个结构体进行测试，这是纯体力活了。 **luadec**
提供了一个ChunkSpy52.lua，可以使用它打印Luac的文件格式内容，可以参考它的输出进行Luac.bt的编写工作，实际上我也是这么做的。
首先是 **GlobalHeader** ，它的定义可以这样写：
    typedef struct {
        uint32 signature ;   //".lua"
        uchar version ;
        uchar format ;
        uchar endian ;
        uchar size_int ;
        uchar size_size_t ;
        uchar size_Instruction ;
        uchar size_lua_Number ;
        uchar lua_num_valid ;
        if (version == 0x52) {
            uchar luac_tail[0x6] ;
        }
    } GlobalHeader;
这种定义的方式与前面介绍的 **LocVar** 一样，具体就不展开讨论了。下面主要讨论编写过程中遇到的问题与难点。
首先是输出与ChunkSpy52.lua一样的function
level，也就是函数的嵌套级别，定义结构体时可以传递参数，这一点是C语言不具备的，但这个功能非常实用，可以用来传递定义结构时的信息，如这里的function
level就用到了该特性。这是Protos的定义：
    typedef struct(string level) {
        uint32 sizep ;
        local uint32 sz = sizep;
        local uint32 i = 0;
        local string s_level;
        while (sz-- > 0) {
            SPrintf(s_level, "%s_%d", level, i++);
            Proto proto(s_level);
        };
    } Protos ;
为结构体加上一个 **string** 类型的 **level** 参数，初始时传值“0”，然后往下传递时，为传递的值累加一，这样就做到了function
level的输出。
然后是 **Constant** 常量信息的获取，由于TValue支持多种数据的类型，因此在处理上需要分别进行处理，这里参考了 **luadec**
的实现，不过在细节上还是比较麻烦。 **luadec** 使用 **DecompileConstant** ()方法实现，它的代码片断如下：
    ···
    char* DecompileConstant(const Proto* f, int i) {
        const TValue* o = &f->k[i];
    switch (ttype(o)) {
    case LUA_TBOOLEAN:
    return strdup(bvalue(o)?"true":"false");
    case LUA_TNIL:
    return strdup("nil");
    #if LUA_VERSION_NUM == 501 || LUA_VERSION_NUM == 502
    case LUA_TNUMBER:
    {
    char* ret = (char*)calloc(128, sizeof(char));
    sprintf(ret, LUA_NUMBER_FMT, nvalue(o));
    return ret;
    }
    case LUA_TSTRING:
            return DecompileString(o);
    default:
    return strdup("Unknown_Type_Error");
    }
    }
    ···
**bvalue** 与 **nvalue**
是Lua提供的两个宏，这在编写模板时不能直接使用，需要自己实现，由于宏的嵌套较多，实际测试时编写了C语言代码展开它的实现，如 **nvalue**
展开后的实现为：
    ((((((o))->tt_) == ((3 | (1 value_).i)))) : (((o)->value_).n))));
于是编写替换代码number2str函数，实现如下：
    string number2str(TValue &o) {
        local string ret;
        local string fmt;
        if (get_inst_sz() == 4) {
            fmt = "(=%.7g)";
        } else if (get_inst_sz() == 8) {
            fmt = "(=%.14g)";
        } else {
            Warning("error inst size.n");
        }
        local int tt = o.value_.val.tt_;
        //Printf("tt:%xn", tt);
        local lua_Integer i = o.value_.i;
        local lua_Number n = o.value_.n;
        SPrintf(ret, "%.14g", ((tt == (3 | (1  。