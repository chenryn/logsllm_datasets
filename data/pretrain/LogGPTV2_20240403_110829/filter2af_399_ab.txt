        movl    $0, -8(%rbp)
        movl    %edi, -4(%rbp)
        movq    %rsi, -16(%rbp)
        movabsq $.L.str, %rdi
        callq   puts
        movabsq $.L.str.1, %rdi
        callq   puts
        leaq    -48(%rbp), %rsi
        xorl    %edi, %edi
        movl    $31, %edx
        callq   read
        movabsq $.L.str.2, %rdi
        movb    $0, %al
        callq   printf
        xorl    %eax, %eax
        addq    $48, %rsp
        popq    %rbp
        .cfi_def_cfa %rsp, 8
        retq
    .Lfunc_end0:
        .size   main, .Lfunc_end0-main
        .cfi_endproc
                                            # -- End function
        .type   .L.str,@object          # @.str
        .section    .rodata.str1.1,"aMS",@progbits,1
    .L.str:
        .asciz  "hello world"
        .size   .L.str, 12
        .type   .L.str.1,@object        # @.str.1
    .L.str.1:
        .asciz  "plz input your name"
        .size   .L.str.1, 20
        .type   .L.str.2,@object        # @.str.2
    .L.str.2:
        .asciz  "biubiubiu"
        .size   .L.str.2, 10
        .ident  "Ubuntu clang version 12.0.0-3ubuntu1~20.04.5"
        .section    ".note.GNU-stack","",@progbits
## 编写第一个LLVM Pass
通过前面的知识之后，现在可以尝试编写“hello
world”的pass，下面是[官方](https://llvm.org/docs/WritingAnLLVMPass.html)的示例
    #include "llvm/Pass.h"
    #include "llvm/IR/Function.h"
    #include "llvm/Support/raw_ostream.h"
    #include "llvm/IR/LegacyPassManager.h"
    #include "llvm/Transforms/IPO/PassManagerBuilder.h"
    using namespace llvm;
    namespace {
    struct Hello : public FunctionPass {
      static char ID;
      Hello() : FunctionPass(ID) {}
      bool runOnFunction(Function &F) override {
        errs()  X("hello", "Hello World Pass",
                                 false /* Only looks at CFG */,
                                 false /* Analysis Pass */);
    static RegisterStandardPasses Y(
        PassManagerBuilder::EP_EarlyAsPossible,
        [](const PassManagerBuilder &Builder,
           legacy::PassManagerBase &PM) { PM.add(new Hello()); });
先声明pass本身，然后声明了一个`Hello`类，它是FunctionPass的子类。稍后将详细描述不同的内置pass子类，但是现在知道FunctionPass一次对一个函数进行操作。
然后声明了LLVM用于标识pass的pass标识符。 这允许LLVM避免使用昂贵的C ++运行时信息，如下
    static char ID;
    Hello() : FunctionPass(ID) {}
然后声明了一个runOnFunction方法，它覆盖了从FunctionPass继承的抽象虚方法。
这是我们应该做的事情，所以我们只用每个函数的名称打印出我们的消息。代码如下
    bool runOnFunction(Function &F) override {
        errs()  X("hello", "Hello World Pass",
                                 false /* Only looks at CFG */,
                                 false /* Analysis Pass */);
如果我们想将通道注册为现有管道的一个步骤，则提供了一些扩展点，例如`PassManagerBuilder::EP_EarlyAsPossible`在任何优化之前应用我们的通道，或者`PassManagerBuilder::EP_FullLinkTimeOptimizationLast`
在链接时间优化之后应用它。代码如下
    static llvm::RegisterStandardPasses Y(
        llvm::PassManagerBuilder::EP_EarlyAsPossible,
        [](const llvm::PassManagerBuilder &Builder,
           llvm::legacy::PassManagerBase &PM) { PM.add(new Hello()); });
现在需要将这个Pass编译成模块，使用如下命令即可
    clang-12 `llvm-config --cxxflags` -Wl,-znodelete -fno-rtti -fPIC -shared Hello.cpp -o LLVMHello.so `llvm-config --ldflags`
现在应该会看到LLVMHello.so这个文件，通过官方文档可知需要使用以下命令
    opt -load LLVMHello.so -hello test.ll
这里的 -hello由Hello.cpp中的`static RegisterPass X`参数决定
但是笔者这里报了一个错`Error opening 'LLVMHello.so': LLVMHello.so: cannot open shared
object file: No such file or
directory`，这是因为linux无法在默认地址找到LLVMHello.so，解决很简单`sudo cp LLVMHello.so /lib`
成功输出test.c所有函数名称
## 对第一个LLVM Pass逆向分析
刚刚生成了LLVMHello.so这个pass文件，比赛题和上面也一样，会重写`FunctionPass`类中的`runOnFunction`函数，所以我们对上面的示例程序进行逆向分析，看一下虚表位置这样方便比赛的时候确定每个函数的位置
跟进RegisterPass
发现调用了callDefaultCtor进行对象创建，跟进它
给Hello对象分配了0x20个空间，跟进Hello
看到虚表了，直接跟进
`runOnFunction`函数位于虚表中的最后一个位置，因为runOnFunction函数被我们重写了，所以它指向的是我们自定义的那个函数，比赛题的漏洞基本就是这个，所以在做LLVM
Pass pwn的时候定位函数的位置可以从虚表入手
## 总结
收获很大，从编译过程到LLVM，加固了计算机底层的一些知识，知道了LLVM PASS PWN该怎么入手，以前看到LLVM PASS
PWN的时候都不知道怎么运行（XD），这里第一篇就结束了，后面笔者会继续更新
## Reference