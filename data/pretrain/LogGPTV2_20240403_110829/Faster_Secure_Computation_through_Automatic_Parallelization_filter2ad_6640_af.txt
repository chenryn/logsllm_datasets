4
8
none
1
2
4
none
1
2
4
none
1
2
4
BioMatch
time[s] S
2.559 1.000
2.624 0.975
2.556 1.001
1.384 1.849
1.524 1.679
1.472 1.738
1.396 1.833
0.795 3.219
0.996 2.569
0.830 3.083
0.818 3.128
0.652 3.925
0.676 3.786
0.629 4.068
0.636 4.024
κ = 80
MExp
time[s] S
1.423 1.000
1.287 1.106
1.285 1.107
0.734 1.939
0.686 2.074
0.699 2.036
0.654 2.176
0.395 3.603
0.426 3.340
0.336 4.235
0.329 4.325
0.298 4.775
0.239 5.954
0.204 6.975
0.233 6.107
MVMul
time[s] S
0.192 1.000
0.206 0.932
0.208 0.923
0.103 1.864
0.126 1.524
0.132 1.455
0.124 1.548
0.057 3.368
0.084 2.286
0.085 2.259
0.081 2.370
0.045 4.267
0.072 2.667
0.077 2.494
0.070 2.743
BioMatch
time[s] S
2.712 1.000
2.781 0.975
2.707 1.002
1.497 1.812
1.535 1.767
1.516 1.789
1.465 1.851
0.937 2.894
1.041 2.605
0.874 3.103
0.856 3.168
0.872 3.110
0.947 2.864
0.861 3.150
0.871 3.114
κ = 128
MExp
time[s] S
1.485 1.000
1.370 1.084
1.386 1.071
0.780 1.904
0.699 2.124
0.726 2.045
0.693 2.143
0.450 3.300
0.452 3.285
0.356 4.171
0.341 4.355
0.364 4.080
0.303 4.901
0.342 4.342
0.337 4.407
MVMul
time[s] S
0.199 1.000
0.215 0.926
0.218 0.913
0.108 1.844
0.134 1.485
0.137 1.453
0.131 1.519
0.064 3.088
0.087 2.287
0.088 2.261
0.084 2.369
0.048 4.189
0.080 2.488
0.075 2.653
0.073 2.726
Transferring roles
0.231s
0.076s
0.031s
0.257s
0.082s
0.031s
Table 4: Evaluation of IPP in a LAN setting. Column IPP speciﬁes the number of threads used per core for load balancing. The
total protocol run-time is measured in seconds and the speed-up in comparison with CGP is presented in column S. Marked in bold
are settings, where IPP leads to performance gains. The time spent on the transferring roles protocol is presented in the last row.
a single core. The results of this experiment are illus-
trated in Table 5. IPP leads to signiﬁcant speed-ups of
BioMatch and MExp, showing the successful exploita-
tion of bi-directional data transfers. MVMul shows lim-
ited performance gains because the time spent on the
newly introduced communication rounds for the trans-
ferring roles protocol becomes signiﬁcant. Summariz-
ing, IPP can be very useful for TPC in bandwidth limited
environments.
BioMatch
raw 45.02±0.49s
IPP
29.94±0.31s
S
raw 30.34±0.62s
19.13±0.47s
IPP
S
1.50
1.58
MExp
24.13±0.21s
16.05±0.12s
1.50
14.56±0.21s
11.16±0.32s
1.30
MVMul
4.83±0.05s
4.66 ±0.35s
1.03
4.31±0.23s
3.84±0.12s
1.12
κ = 128
κ = 80
Table 5: Evaluation of IPP on a single core with limitted net-
working capabilities. Measured is the total protocol runtime,
when sequentially (raw) computing and with IPP (IPP). Fur-
thermore, the speed-up (S) between the two measurements is
calculated.
approach shows a more efﬁcient parallelization, given
parallel decomposable applications. In contrast to pre-
vious work, a complete compile chain, which takes C
code as input and automatically compiles parallel cir-
cuits, supports the practicability of our parallelization
scheme. Moreover, we proposed the idea of IPP to
achieve a symmetric workload distribution between two
computing parties. With this technique, IPP achieves
speed-ups through parallelization, even when using a sin-
gle physical core. Concluding, in this work we presented
an efﬁcient, versatile and practical parallelization scheme
for Yao’s garbled circuits.
Further work includes the investigation of different
parallel compilation targets for ParCC, such as the GMW
protocol or RAM based secure computation frameworks.
Also worthwhile for future investigations is the compila-
tion of circuits optimized for FGP. Likewise, the applica-
tion of IPP to other protocols is of interest.
8 Acknowledgements
7 Conclusion and Future Work
TPC based on Yao’s garbled circuits protocol can greatly
beneﬁt from automatic parallelization. The FGP ap-
proach can be efﬁcient for some circuits, yet its scala-
bility highly depends on the circuit’s width. The CGP
We thank David Evans and all anonymous reviewers for
their very helpful and constructive comments. This work
has been co-funded by the German Federal Ministry of
Education and Research (BMBF) within EC SPRIDE,
by the DFG as part of project S5 within the CRC 1119
CROSSING, and by the Hessian LOEWE excellence ini-
tiative within CASED.
USENIX Association  
24th USENIX Security Symposium  545
15
References
[1] AMINI, M., CREUSILLET, B., EVEN, S., KERYELL, R., GOU-
BIER, O., GUELTON, S., MCMAHON, J. O., PASQUIER, F.-X.,
P ´EAN, G., AND VILLALON, P. Par4All: From Convex Array Re-
gions to Heterogeneous Computing. In Workshop on Polyhedral
Compilation Techniques (2012).
[2] ASHAROV, G., LINDELL, Y., SCHNEIDER, T., AND ZOHNER,
M. More efﬁcient oblivious transfer and extensions for faster
secure computation. In ACM Conference on Computer and Com-
munications Security CCS (2013).
[3] BARNI, M., BERNASCHI, M., LAZZERETTI, R., PIGNATA, T.,
AND SABELLICO, A. Parallel Implementation of GC-Based
MPC Protocols in the Semi-Honest Setting.
In Data Privacy
Management and Autonomous Spontaneous Security. 2014.
[4] BEAVER, D., MICALI, S., AND ROGAWAY, P. The Round Com-
In ACM Symposium on Theory of
plexity of Secure Protocols.
Computing STOC (1990).
[5] BELLARE, M., HOANG, V. T., KEELVEEDHI, S., AND ROG-
In
AWAY, P. Efﬁcient garbling from a ﬁxed-key blockcipher.
IEEE Symposium on Security and Privacy S&P (2013).
[6] BONDHUGULA, U., HARTONO, A., RAMANUJAM, J., AND SA-
DAYAPPAN, P. A practical automatic polyhedral parallelizer and
locality optimizer. ACM SIGPLAN Notices 43, 6 (2008).
[7] DAGUM, L., AND MENON, R. OpenMP: an industry standard
API for shared-memory programming. IEEE Computational Sci-
ence and Engineering 5, 1 (1998).
[8] DEMMLER, D., SCHNEIDER, T., AND ZOHNER, M. ABY A
Framework for Efﬁcient Mixed-Protocol Secure Two-Party Com-
putation. Network and Distributed System Security NDSS (2015).
[9] ERKIN, Z., FRANZ, M., GUAJARDO, J., KATZENBEISSER, S.,
LAGENDIJK, I., AND TOFT, T. Privacy-preserving face recogni-
tion. In Privacy Enhancing Technologies PETS (2009).
[10] FRANZ, M., HOLZER, A., KATZENBEISSER, S., SCHALL-
HART, C., AND VEITH, H. CBMC-GC: An ANSI C compiler
for secure two-party computations. In Compiler Construction CC
(2014).
[11] FREDERIKSEN, T. K., JAKOBSEN, T. P., AND NIELSEN, J. B.
Faster maliciously secure two-party computation using the GPU.
In Security and Cryptography for Networks SCN. 2014.
[12] HAZAY, C., AND LINDELL, Y. Efﬁcient secure two-party proto-
cols. Information Security and Cryptography. Springer, Heidel-
berg (2010).
[13] HENECKA, W., AND SCHNEIDER, T. Faster secure two-party
computation with less memory. In ACM Conference on Computer
and Communications Security ASIACCS (2013).
[14] HOLZER, A., FRANZ, M., KATZENBEISSER, S., AND VEITH,
H. Secure Two-Party Computations in ANSI C. In ACM Confer-
ence on Computer and Communications Security CCS (2012).
[15] HUANG, Y., EVANS, D., KATZ, J., AND MALKA, L. Faster Se-
cure Two-Party Computation Using Garbled Circuits. In USENIX
Security Symposium (2011).
[16] HUANG, Y., KATZ, J., AND EVANS, D. Quid-pro-quo-tocols:
In
Strengthening semi-honest protocols with dual execution.
IEEE Symposium on Security and Privacy S&P (2012).
[17] HUSTED, N., MYERS, S., SHELAT, A., AND GRUBBS, P. GPU
and CPU parallelization of honest-but-curious secure two-party
computation. In Annual Computer Security Applications Confer-
ence ACSAC (2013).
[18] ISHAI, Y., KILIAN, J., NISSIM, K., AND PETRANK, E. Extend-
In Advances in Cryptology
ing Oblivious Transfer Efﬁciently.
CRYPTO. Springer, 2003.
[19] JARECKI, S., AND SHMATIKOV, V. Efﬁcient Two-Party Secure
Computation on Committed Inputs. In Advances in Cryptology
EUROCRYPT, vol. 4515. Springer, 2007.
[20] KERSCHBAUM, F., SCHNEIDER, T., AND SCHR ¨OPFER, A. Au-
tomatic protocol selection in secure two-party computations. In
Applied Cryptography and Network Security ACNS (2014).
[21] KOLESNIKOV, V., AND SCHNEIDER, T. Improved garbled cir-
cuit: Free XOR gates and applications. In International Confer-
ence on Automata, Languages and Programming ICALP. 2008.
[22] KREUTER, B., MOOD, B., SHELAT, A., AND BUTLER, K. PCF:
A Portable Circuit Format for Scalable Two-Party Secure Com-
putation. In USENIX Security Symposium (2013).
[23] KREUTER, B., SHELAT, A., AND SHEN, C. Billion-Gate Se-
cure Computation with Malicious Adversaries. USENIX Security
Symposium (2012).
[24] LINDELL, Y., AND PINKAS, B. An efﬁcient protocol for secure
two-party computation in the presence of malicious adversaries.
In Advances in Cryptology EUROCRYPT. 2007.
[25] LINDELL, Y., AND PINKAS, B. A proof of security of yao’s
protocol for two-party computation. Journal of Cryptology 22, 2
(2009).
[26] MALEWICZ, G., AUSTERN, M. H., BIK, A. J. C., DEHNERT,
J. C., HORN, I., LEISER, N., AND CZAJKOWSKI, G. Pregel: a
system for large-scale graph processing. In ACM Conference on
Management of Data SIGMOD (2010).
[27] MALKHI, D., NISAN, N., PINKAS, B., AND SELLA, Y.
Fairplay-Secure Two-Party Computation System. In USENIX Se-
curity Symposium (2004).
[28] MCCREARY, C., AND GILL, H. Efﬁcient Exploitation of Con-
currency Using Graph Decomposition. In International Confer-
ence on Parallel Processing ICPP (1990).
[29] MOHASSEL, P., AND FRANKLIN, M. Efﬁciency tradeoffs for
In Public Key Cryptography
malicious two-party computation.
PKC. 2006.
[30] NAYAK, K., WANG, X. S., IOANNIDIS, S., WEINSBERG, U.,
TAFT, N., AND SHI, E. GraphSC: Parallel Secure Computation
Made Easy. In IEEE Symposium on Security and Privacy S&P
(2015).
[31] PINKAS, B., SCHNEIDER, T., SMART, N. P., AND WILLIAMS,
S. C. Secure two-party computation is practical. Advances in
Cryptology ASIACRYPT (2009).
[32] POUCHET, L.-N. Polyhedral Compiler Collection (PoCC), 2012.
[33] REGEV, O. On lattices, learning with errors, random linear codes,
and cryptography. Journal of the ACM 56, 6 (2009).
[34] YAO, A. C. Protocols for secure computations. In Symposium on
Foundations of Computer Science SFCS (1982).
[35] YAO, A. C. How to generate and exchange secrets. In Symposium
on Foundations of Computer Science SFCS (1986).
[36] ZAHUR, S., ROSULEK, M., AND EVANS, D. Two halves make
a whole. Advances in Cryptology - EUROCRYPT (2015).
[37] ZHANG, Y., STEELE, A., AND BLANTON, M. PICCO: A
general-purpose compiler for private distributed computation. In
ACM Conference on Computer and Communications Security
CCS (2013).
546  24th USENIX Security Symposium 
USENIX Association
16