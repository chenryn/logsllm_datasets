### Mergesort with Concurrent Computation

```c
void mergesort(int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        mergesort(l, m);
        mergesort(m + 1, r);

        for (int i = (r - l + 1) >> 1; i > 0; i = i >> 1) {
            for (int j = 0; j < r - l + 1 - i; j++) {
                int k = l + j;
                if (A[k] > A[k + i]) {
                    int temp = A[k];
                    A[k] = A[k + i];
                    A[k + i] = temp;
                }
            }
        }
    }
}
```

**Figure 5: Mergesort program using concurrent computation (differences from the basic program).**

### Main Function and Input Handling

```c
public int main() {
    int M;
    smcinput(M, 1, 1);

    private int A[M], B[M];
    private int dist = 0;

    smcinput(A, 1, M);
    smcinput(B, 1, M);

    for (int i = 0; i < M; i++) {
        if (A[i] != B[i]) {
            dist++;
        }
    }

    smcoutput(dist, 1);
    return 0;
}
```

**Figure 7: Hamming distance program using concurrent computation.**

### Levenshtein Distance Calculation

The Levenshtein distance between two strings is computed by filling a matrix where each cell at position (i, j) is the minimum of three distances: from cells (i-1, j), (i, j-1), and (i-1, j-1), plus the result of comparing characters at positions i and j. The optimized version processes all cells on a diagonal in parallel, resulting in 2m - 3 rounds to compute the minimum function.

### Fingerprint Matching

The fingerprint matching program compares one minutia of fingerprint A to all minutiae of fingerprint B. Among those that match (i.e., within a close Euclidean distance and small angle), the one with the closest distance is chosen. The chosen minutia in fingerprint B is marked as no longer available. This process is repeated for all other minutiae of fingerprint A, ignoring minutiae marked as no longer available. The output is the number of minutiae marked as having a mate in the other fingerprint. The optimized version runs all distance and orientation comparisons for a minutia in fingerprint A in parallel, using a tree with log m rounds of comparisons for m-minutia fingerprints.

### Performance Comparison

For comparison, we provide performance data for the secure two-party computation compiler from [29] and Sharemind [10]. The former is a general-purpose compiler for ANSI C for the two-party setting, and it is informative to compare the performance of programs produced using this compiler. In Table 2, we list runtimes for similar programs when available, as reported in [29]. Sharemind is a framework that allows a program written in SecreC to be compiled into a secure distributed implementation for three computational parties. It is well-optimized but has limitations, such as no support for if-statements with private conditions. We chose Sharemind for its speed, as other tools like FairplayMP and VIFF result in slower performance. We ran Sharemind experiments in the same setups as our LAN and WAN experiments.

From Table 2, it is clear that despite using more computational parties and highly interactive techniques, the performance of programs compiled using PICCO compares very favorably to those compiled using the two-party approach of [29]. The largest difference observed is by more than three orders of magnitude for some LAN experiments. The performance of programs executed through Sharemind is also slower than with PICCO, especially for simple programs on a LAN. In our Sharemind experiments, we were unable to match the performance reported in [11], despite extensive use of available optimization mechanisms. Additionally, we experienced a large four-fold reduction in execution time of arithmetic operations programs by replacing operations of the form `a = a + a` with `b = a + a`, where `a` and `b` are vectors. This could be due to excessive logging, which we were unable to disable. We conclude that Sharemind is optimized for massively-parallel computation with low amortized cost per operation, but not for general-purpose computation where sequential execution is common. Sharemind is likely to outperform PICCO when a large number of homogeneous operations are to be run in parallel, but we expect our tool to result in lower execution time for general-purpose functionalities.

### Impact of Varying Computational Parties

To investigate the impact of varying the number of computational parties on performance, we conducted additional experiments. The programs chosen are unoptimized 1000 arithmetic operations, optimized 1000 arithmetic operations, and 32-element mergesort, providing insights into the performance of plain multiplications, batch multiplications, and a combination of batch and multi-threaded implementations, respectively. For multiplication, each computational party transmits n-1 messages and performs Lagrange interpolation, which in the most general form involves quadratic computation. On a LAN, this contributes substantially to the overall time, and [25] reports that the growth in multiplication time can be best described by the function \( f(n) = 0.009n^2 + 0.006n + 0.799 \). However, in the semi-honest setting, all parties send their data as prescribed, and the set of available shares is known. This means that Lagrange coefficients used during interpolation can be precomputed, resulting in linear computation time. Furthermore, we reconstruct only the free coefficient of the polynomial that encodes the secret, giving us that the work a computational party performs for a single interactive operation is linear in n, but the total volume of communication placed on the network is quadratic in n. Our LAN results (using a new set of machines) are given in Figure 8, where optimized arithmetic operations' time is scaled up by a factor of 20. We observe linear or slightly higher than linear growth in n.

### Conclusions

The goal of this work is to enable secure execution of general-purpose programs in not fully trusted environments. Toward this goal, we introduce PICCO — a suite of programs for compiling a user program written in an extension of C with variables that need to be protected marked as private, into its secure distributed implementation, and running it in a distributed setting. Our implementation uses techniques based on secret sharing with several optimizations to improve runtime, resulting in efficient secure execution suitable for sizeable computations in various settings.

### Acknowledgments

We are grateful to Ethan Blanton for valuable suggestions on the design of the compiler, Dan Bogdanov for help with Sharemind experiments, and anonymous reviewers for their feedback. This work was supported in part by grants CNS-1319090 and CNS-1223699 from the National Science Foundation and FA9550-13-1-0066 from the Air Force Office of Scientific Research. We also acknowledge the NSF-sponsored Global Environment for Network Innovations (GENI) test bed, which allowed us to run WAN experiments.

### References

[1] Bison – GNU parser generator. http://www.gnu.org/software/bison.
[2] Boost C++ libraries. http://www.boost.org.
[3] flex: The Fast Lexical Analyzer. http://flex.sourceforge.net.
[4] GENI: Global environment for network innovations. http://www.geni.net.
[5] GMP – The GNU Multiple Precision Arithmetic Library. http://gmplib.org.
[6] OpenSSL: The open source toolkit for SSL/TLS. http://www.openssl.org.
[7] M. Aliasgari, M. Blanton, Y. Zhang, and A. Steele. Secure computation on floating point numbers. In NDSS, 2013.
[8] A. Ben-David, N. Nisan, and B. Pinkas. FairplayMP: A system for secure multi-party computation. In CCS, 2008.
[9] M. Blanton. Empirical evaluation of secure two-party computation models. Technical Report TR 2005-58, CERIAS, Purdue University, 2005.
[10] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: A framework for fast privacy-preserving computations. In ESORICS, pages 192–206, 2008.
[11] D. Bogdanov, M. Niitsoo, T. Toft, and J. Willemson. High-performance secure multi-party computation for data mining applications. IJIS, 11(6):403–418, 2012.
[12] J. Boyar and R. Peralta. A new combinational logic minimization technique with applications to cryptology. In Symposium on Experimental Algorithms, 2010.
[13] J. Boyar and R. Peralta. A small depth-16 circuit for the AES S-box. In Information Security and Privacy Research, pages 287–298, 2012.
[14] M. Burkhart, M. Strasser, D. Many, and X. Dimitropoulos. SEPIA: Privacy-preserving aggregation of multi-domain network events and statistics. In USENIX Security Symposium, pages 223–240, 2010.
[15] R. Canetti. Security and composition of multiparty cryptographic protocols. Journal of Cryptology, 13(1):143–202, 2000.
[16] O. Catrina and S. de Hoogh. Improved primitives for secure multiparty integer computation. In Security and Cryptography for Networks (SCN), pages 182–199, 2010.
[17] O. Catrina and A. Saxena. Secure computation with fixed-point numbers. In FC, pages 35–50, 2010.
[18] R. Cramer, I. Damgård, and Y. Ishai. Share conversion, pseudorandom secret-sharing and applications to secure computation. In TCC, pages 342–362, 2005.
[19] I. Damgård, M. Geisler, and M. Krøigård. Asynchronous multiparty computation: Theory and implementation. In PKC, pages 160–179, 2009.
[20] I. Damgård and M. Keller. Secure multiparty AES. In FC, pages 367–374, 2010.
[21] I. Damgård, M. Keller, E. Larraia, C. Miles, and N. Smart. Implementing AES via an actively/covertly secure dishonest-majority MPC protocol. IACR Cryptology ePrint Archive Report 2012/262, 2012.
[22] I. Damgård and J. Nielsen. Scalable and unconditionally secure multiparty computation. In CRYPTO, 2007.
[23] V. Dimakopoulos, E. Leontiadis, and G. Tzoumas. A portable C compiler for OpenMP V.2.0. In European Workshop on OpenMP (EWOMP), pages 5–11, 2003.
[24] M. Frigo, C. Leiserson, and K. Randall. The implementation of the Cilk-5 multithreaded language. In PLDI, pages 212–223, 1998.
[25] M. Geisler. Cryptographic protocols: Theory and implementation. PhD thesis, Aarhus University, 2010.
[26] R. Gennaro, M. Rabin, and T. Rabin. Simplified VSS and fast-track multiparty computations with applications to threshold cryptography. In PODC, pages 101–111, 1998.
[27] O. Goldreich. Towards a theory of software protection and simulation by oblivious RAMs. In STOC, 1987.
[28] W. Henecka, S. Kogl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. TASTY: Tool for Automating Secure Two-partY computations. In CCS, pages 451–462, 2010.
[29] A. Holzer, M. Franz, S. Katzenbeisser, and H. Veith. Secure two-party computations in ANSI C. In CCS, 2012.
[30] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation using garbled circuits. In USENIX Security Symposium, 2011.
[31] R. Jagomägis. SecreC: A privacy-aware programming language with applications in data mining. Master’s thesis, University of Tartu, 2010.
[32] F. Kerschbaum. Automatically optimizing secure computation. In CCS, pages 703–714, 2011.
[33] J. Launchbury, I. Diatchki, T. DuBuisson, and A. Adams-Moran. Efficient lookup-table protocol in secure multiparty computation. In ICFP, pages 189–200, 2012.
[34] S. Laur, R. Talviste, and J. Willemson. From oblivious AES to efficient and secure database join in the multiparty setting. In ACNS, pages 84–101, 2013.
[35] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay – a secure two-party computation system. In USENIX Security Symposium, pages 287–302, 2004.
[36] B. Pinkas, T. Schneider, N. Smart, and S. Williams. Secure two-party computation is practical. In ASIACRYPT, 2009.
[37] A. Schroepfer, F. Kerschbaum, and G. Mueller. L1 – An intermediate language for mixed-protocol secure computation. In COMPSAC, pages 298–307, 2011.
[38] A. Shamir. How to share a secret. Communications of the ACM, 22(11):612–613, 1979.