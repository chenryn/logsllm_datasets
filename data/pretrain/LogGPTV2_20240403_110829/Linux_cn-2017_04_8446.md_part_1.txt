---
author: Nick Humrich
category: 观点
comments_data:
- date: '2017-04-26 01:11:11'
  message: linux中国翻译的文章排版很好，不过我想问一下会不会有版权问题？
  postip: 183.221.23.178
  username: 来自四川成都的 Chrome 58.0|GNU/Linux 用户
- date: '2017-04-26 09:35:22'
  message: python大法好
  postip: 202.107.194.180
  username: 来自浙江杭州的 Chrome 57.0|Windows 10 用户
- date: '2017-04-26 11:15:19'
  message: python 这类依靠解释器运行的程序。也不是没有不足，比如在一个低内存的系统（大概）一百多 MB，用 yum 更新一下，你就会发现在此期间磁盘
    IO 显著升高。
  postip: 118.122.120.11
  username: 来自四川成都的 Chrome 57.0|GNU/Linux 用户
- date: '2017-04-26 14:50:06'
  message: 看来你没有get都本文说阐述的重点：效率与瓶颈。综合考虑当前环境，拿到最优解。
  postip: 180.168.102.86
  username: 来自上海的 Firefox 49.0|Windows 10 用户
- date: '2017-04-26 15:30:18'
  message: 我专业用C++的，不过这几年下来发现，有必要在业务效率上多考虑，不必在代码局部性能上太过花时间。所以我也在考虑Python，或者Perl，打算用做一个随手的工具，快速响应需求。
  postip: 218.18.171.4
  username: 来自广东深圳的 Chrome 56.0|Windows 7 用户
- date: '2017-04-28 10:04:24'
  message: 手动点赞&nbsp;&nbsp;但是目前国内很少有企业会这么想
  postip: 119.2.6.24
  username: 来自北京的 Chrome 51.0|Windows 7 用户
- date: '2017-04-29 16:11:50'
  message: python是世界上最好的语言。。。
  postip: 111.43.240.181
  username: Ghjoker [Firefox 45.0|GNU/Linux]
- date: '2017-08-02 16:39:43'
  message: "基本赞同文章中的这个观点\r\n\r\n然而现实是，“最重要的资源”还需要其它一些资源：比如说“自信”，而且使用PYTHON对于一些人而言还需要学习成本，还有想要熟悉它的类库也需要成本。而这些要也许已经熟悉了某种不那么高效率的东西，但是已经转不过来了"
  postip: 61.133.215.190
  username: 来自宁夏银川的 Chrome 59.0|Windows 7 用户
- date: '2017-09-30 17:17:11'
  message: 你想成为大家的目标吗？
  postip: 114.112.193.30
  username: 来自北京的 Chrome 61.0|Windows 10 用户
- date: '2017-09-30 17:18:36'
  message: 这里是开源社区
  postip: 114.112.193.30
  username: 来自北京的 Chrome 61.0|Windows 10 用户
count:
  commentnum: 10
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 15412
date: '2017-04-25 11:14:00'
editorchoice: true
excerpt: "优化你最贵的资源。那就是你，而不是计算机。\r\n选择一种语言/框架/架构来帮助你快速开发（比如 Python）。不要仅仅因为某些技术的快而选择它们。\r\n当你遇到性能问题时，请找到瓶颈所在。\r\n你的瓶颈很可能不是
  CPU 或者 Python 本身。\r\n如果 Python 成为你的瓶颈（你已经优化过你的算法），那么可以转向热门的 Cython 或者 C。\r\n尽情享受可以快速做完事情的乐趣。"
fromurl: https://medium.com/hacker-daily/yes-python-is-slow-and-i-dont-care-13763980b5a1
id: 8446
islctt: true
largepic: /data/attachment/album/201704/25/111213ojm89mmzzsmappkf.jpg
permalink: /article-8446-1.html
pic: /data/attachment/album/201704/25/111213ojm89mmzzsmappkf.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: "优化你最贵的资源。那就是你，而不是计算机。\r\n选择一种语言/框架/架构来帮助你快速开发（比如 Python）。不要仅仅因为某些技术的快而选择它们。\r\n当你遇到性能问题时，请找到瓶颈所在。\r\n你的瓶颈很可能不是
  CPU 或者 Python 本身。\r\n如果 Python 成为你的瓶颈（你已经优化过你的算法），那么可以转向热门的 Cython 或者 C。\r\n尽情享受可以快速做完事情的乐趣。"
tags:
- Python
- 性能
thumb: false
title: Python 是慢，但我无所谓
titlepic: true
translator: zhousiyu325
updated: '2017-04-25 11:14:00'
---
> 
> 为牺牲性能追求生产率而呐喊
> 
> 
> 
![](/data/attachment/album/201704/25/111213ojm89mmzzsmappkf.jpg)
让我从关于 Python 中的 asyncio 这个标准库的讨论中休息一会，谈谈我最近正在思考的一些东西：Python 的速度。对不了解我的人说明一下，我是一个 Python 的粉丝，而且我在我能想到的所有地方都积极地使用 Python。人们对 Python 最大的抱怨之一就是它的速度比较慢，有些人甚至拒绝尝试使用 Python，因为它比其他语言速度慢。这里说说为什么我认为应该尝试使用 Python，尽管它是有点慢。
### 速度不再重要
过去的情形是，程序需要花费很长的时间来运行，CPU 比较贵，内存也很贵。程序的运行时间是一个很重要的指标。计算机非常的昂贵，计算机运行所需要的电也是相当贵的。对这些资源进行优化是因为一个永恒的商业法则：
> 
> 优化你最贵的资源。
> 
> 
> 
在过去，最贵的资源是计算机的运行时间。这就是导致计算机科学致力于研究不同算法的效率的原因。然而，这已经不再是正确的，因为现在硅芯片很便宜，确实很便宜。运行时间不再是你最贵的资源。公司最贵的资源现在是它的员工时间。或者换句话说，就是你。把事情做完比把它变快更加重要。实际上，这是相当的重要，我将把它再次放在这里，仿佛它是一个引文一样（给那些只是粗略浏览的人）:
> 
> 把事情做完比快速地做事更加重要。
> 
> 
> 
你可能会说：“我的公司在意速度，我开发一个 web 应用程序，那么所有的响应时间必须少于 x 毫秒。”或者，“我们失去了客户，因为他们认为我们的 app 运行太慢了。”我并不是想说速度一点也不重要，我只是想说速度不再是最重要的东西；它不再是你最贵的资源。
### 速度是唯一重要的东西
当你在编程的背景下说 *速度* 时，你通常是说性能，也就是 CPU 周期。当你的 CEO 在编程的背景下说 *速度* 时，他指的是业务速度，最重要的指标是产品上市的时间。基本上，你的产品/web 程序是多么的快并不重要。它是用什么语言写的也不重要。甚至它需要花费多少钱也不重要。在一天结束时，让你的公司存活下来或者死去的唯一事物就是产品上市时间。我不只是说创业公司的想法 -- 你开始赚钱需要花费多久，更多的是“从想法到客户手中”的时间期限。企业能够存活下来的唯一方法就是比你的竞争对手更快地创新。如果在你的产品上市之前，你的竞争对手已经提前上市了，那么你想出了多少好的主意也将不再重要。你必须第一个上市，或者至少能跟上。一但你放慢了脚步，你就输了。
> 
> 企业能够存活下来的唯一方法就是比你的竞争对手更快地创新。
> 
> 
> 
#### 一个微服务的案例
像 Amazon、Google 和 Netflix 这样的公司明白快速前进的重要性。他们创建了一个业务系统，可以使用这个系统迅速地前进和快速的创新。微服务是针对他们的问题的解决方案。这篇文章不谈你是否应该使用微服务，但是至少要理解为什么 Amazon 和 Google 认为他们应该使用微服务。
微服务本来就很慢。微服务的主要概念是用网络调用来打破边界。这意味着你正在把使用的函数调用（几个 cpu 周期）转变为一个网络调用。没有什么比这更影响性能了。和 CPU 相比较，网络调用真的很慢。但是这些大公司仍然选择使用微服务。我所知道的架构里面没有比微服务还要慢的了。微服务最大的弊端就是它的性能，但是最大的长处就是上市的时间。通过在较小的项目和代码库上建立团队，一个公司能够以更快的速度进行迭代和创新。这恰恰表明了，非常大的公司也很在意上市时间，而不仅仅只是只有创业公司。
#### CPU 不是你的瓶颈
如果你在写一个网络应用程序，如 web 服务器，很有可能的情况会是，CPU 时间并不是你的程序的瓶颈。当你的 web 服务器处理一个请求时，可能会进行几次网络调用，例如到数据库，或者像 Redis 这样的缓存服务器。虽然这些服务本身可能比较快速，但是对它们的网络调用却很慢。[这里有一篇很好的关于特定操作的速度差异的博客文章](https://blog.codinghorror.com/the-infinite-space-between-words/)。在这篇文章里，作者把 CPU 周期时间缩放到更容易理解的人类时间。如果一个单独的 CPU 周期等同于 **1 秒**，那么一个从 California 到 New York 的网络调用将相当于 **4 年**。那就说明了网络调用是多少的慢。按一些粗略估计，我们可以假设在同一数据中心内的普通网络调用大约需要 3 毫秒。这相当于我们“人类比例” **3 个月**。现在假设你的程序是高 CPU 密集型，这需要 100000 个 CPU 周期来对单一调用进行响应。这相当于刚刚超过 **1 天**。现在让我们假设你使用的是一种要慢 5 倍的语言，这将需要大约 **5 天**。很好，将那与我们 3 个月的网络调用时间相比，4 天的差异就显得并不是很重要了。如果有人为了一个包裹不得不至少等待 3 个月，我不认为额外的 4 天对他们来说真的很重要。
上面所说的终极意思是，尽管 Python 速度慢，但是这并不重要。语言的速度（或者 CPU 时间）几乎从来不是问题。实际上谷歌曾经就这一概念做过一个研究，[并且他们就此发表过一篇论文](https://static.googleusercontent.com/media/research.google.com/en//archive/sawzall-sciprog.pdf)。那篇论文论述了设计高吞吐量的系统。在结论里，他们说到：
> 
> 在高吞吐量的环境中使用解释性语言似乎是矛盾的，但是我们已经发现 CPU 时间几乎不是限制因素；语言的表达性是指，大多数程序是源程序，同时它们的大多数时间花费在 I/O 读写和本机的运行时代码上。而且，解释性语言无论是在语言层面的轻松实验还是在允许我们在很多机器上探索分布计算的方法都是很有帮助的，
> 
> 
> 
再次强调：
> 
> CPU 时间几乎不是限制因素。