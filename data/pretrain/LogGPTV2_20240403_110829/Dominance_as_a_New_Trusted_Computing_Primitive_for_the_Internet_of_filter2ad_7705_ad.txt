### Watchdog Timer (eAWDT) Implementation

We implemented the enhanced watchdog timer (eAWDT) using a separate STMicroelectronics Nucleo-L053R8 (NL053R8) board, which features a 32 MHz STM32L053R8 MCU (ARM Cortex-M0+). The STM32L053R8 costs less than $3 in volume. We chose the NL053R8 board to simplify our implementation. The hardware cost could be further reduced to less than $1 by integrating a cryptographic co-processor, such as the Microchip ATECC608A (for nonce generation and signature verification), with an 8-bit microcontroller, such as the Microchip ATtiny412 (for control logic and UART communication).

#### Software Implementation

We used approximately 200 lines of C code to implement the three functions of the AWDT interface: `AWDT_Init`, `AWDT_GetNonce`, and `AWDT_PutTicket`. Additionally, we included a 3,600-line crypto library for the signature check on the `DeferralTicket`. The main board communicates with these functions over the UART interface.

- **`AWDT_Init`**: Sets the initial counter value and initiates a periodic timer interrupt (triggered every 1 second) that executes a callback function to decrement and check the counter value. When the value reaches zero, it signals one of the general-purpose input/output (GPIO) pins on the NL053R8 board. This pin should be connected to the reset pin of the main board to trigger an external reset. The eAWDT then resets itself by executing `SYSRESETREQ`.
- **`AWDT_GetNonce`**: Uses the NL053R8’s true random number generator (TRNG) to generate cryptographically secure nonce values.

The simplicity of the AWDT interface provides strong protection against attacks from the main board and vice versa.

### Software AWDT

As an alternative to the eAWDT, we implemented the AWDT in software running in TrustZone on the HBE and the CM3, using the Memory Protection Unit (MPU) on the NL476RG. This software implementation relies on runtime isolation. Since the AWDT contains no secrets, it does not require confidentiality and is not subject to known side-channel or speculative execution attacks.

Our software implementation uses minor variants of the 200 lines of C code running on the eAWDT. On processors that support TrustZone, we implemented the AWDT code as a pseudo trusted application (PTA) on OP-TEE in TrustZone. The code programs an existing, regular timer whose control registers can only be accessed from within TrustZone. On the NL476RG, which lacks TrustZone support, we used the MPU to isolate our AWDT implementation.

### SolidRun HummingBoard Edge (HBE)

The HBE features an NXP i.MX6Quad (ARM Cortex-A9) quad-core processor running at 1 GHz. This processor supports various security features, including protected key storage, a cryptographic accelerator, ARM TrustZone, a TRNG, and a secure real-time clock. The board also includes a gigabit Ethernet controller, 2 GB of DRAM, and an 8 GB Embedded Multi-Media Card (eMMC).

We integrated our boot code into the U-BOOT Secondary Program Loader (SPL). The SPL initializes the hardware to the point where full U-BOOT can run. For the HBE, the SPL turns on DRAM and processor caches, loads the full U-BOOT binary from eMMC into DRAM, and transfers control to it. We inserted the CIDER boot code into the SPL after hardware initialization but before loading the U-BOOT binary. This approach freed us from writing device-specific initialization code and provided a basic runtime environment and an MMC storage driver.

#### Networking

For convenience, we built the recovery module out of a stripped-down version of U-BOOT. U-BOOT contains a driver for the i.MX6 Ethernet controller and a simple networking stack, which we augmented to support TCP with a patch. We removed all unnecessary U-BOOT components.

#### RWLatch Protected Key Storage

The Cryptographic Acceleration and Assurance Module (CAAM) of the HBE’s MCU (i.MX6) provides confidentiality and integrity protection for critical data blobs with a key accessible only by the CAAM. Access to the key is controlled by a RWLatch. The PRIBLOB bits in the Security Configuration Register (SCGFR) must be 0 for the key to be readable. Software can set the bits to 1 at any time, and once set to 1, they will retain this value until the next reset. We use this mechanism to protect the device private key. At each boot, the CAAM decrypts the private key for CIDER, and the gated boot sets the PRIBLOB bits to 1, disabling access until the next reset.

#### WRLatch Protected Code and Data Storage

The eMMC standard supports power-on write protection, allowing software to make parts of storage read-only until the next reset. All storage of the eMMC device can be write-protected in 8 MB granularity. However, the HBE does not tightly couple the eMMC reset to the processor reset. Instead, it allows the eMMC reset pin to be controlled by software via GPIO. We solved this problem using the SECURE_WP_MODE feature of the eMMC 5.1 standard, which locks power-on write protection so that resets do not remove it. The lock and unlock commands are authenticated with a secret number. At installation time, CIDER sets this number and keeps an encrypted copy (using the RWLatch). When setting power-on write protection, CIDER issues the lock command to the eMMC device to guard against spurious resets. When needed, CIDER removes the power-on write protections by issuing the unlock command and resetting the eMMC device via GPIO.

#### Authenticated Watchdog Timer

We connected our eAWDT board to the mikroBus interface on the HBE. The eAWDT's reset wire is connected to the reset pin (RST_n) of the mikroBus. The HBE exposes UART2 through the mikroBus, which we connect to the eAWDT's UART interface.

#### Firmware Support

We added CIDER support to Windows 10 IoT Core and Debian firmware by including an application that communicates with the AWDT and obtains `BootTickets` and `DeferralTickets`. The application is periodically woken up at the desired `DeferralTicket` fetch interval. It calls `AWDT_GetNonce` on the eAWDT, requests a `DeferralTicket` from the hub, and calls `AWDT_PutTicket`. The application runs as part of the untrusted firmware and is not part of the CIDER TCB. The Windows IoT version is a Universal Windows Platform (UWP) application consisting of 750 lines of C# code, while the Debian version is a Posix application comprising about 1,100 lines of C code. In both cases, the majority of the code supports network communication with the hub.

### Raspberry Pi Compute Module 3 (CM3)

The CM3 board features the Broadcom BCM2837 architecture, including an ARM Cortex-A53 quad-core CPU running at 1.2 GHz and 1 GB DRAM. It also has a 4 GB eMMC storage device and a TRNG, but lacks a RWLatch. As with the HBE, we integrated the CIDER boot code into the U-BOOT SPL.

#### Networking

The CM3 has no built-in networking hardware, so we connected a USB Ethernet Adapter (around $1.5) to it. We reused the networking code from the HBE implementation, except for a different NIC driver.

#### RWLatch Protected Key Storage

The CM3 lacks a RWLatch. To address this, we purchased an OPTIGA SLB 9670 chip, which supports the TPM 2.0 specification, at an extra cost of $2.09. We connected it to the CM3 IO board through GPIO pins. We used the internal non-volatile storage of the TPM to host the device private key and used the `TPM2_NV_ReadLock` and `TPM2_NV_WriteLock` commands to implement the RWLatch over the internal storage of the TPM. Other TPM 2.0 chips, such as the AT97SC* series from Microchip, can be as cheap as $0.85 per chip.

#### WRLatch Protected Code and Data Storage

We used the power-on write protection feature of the eMMC device. Unfortunately, the CM3 does not connect the eMMC’s reset pin RST_n to any reset signal; instead, RST_n is permanently connected to a pull-up resistor. This results in power-on write protection staying on even after a reset. We solved this problem by soldering a wire to RST_n and connecting it to the CM3 IO Board’s RUN pin to share the same external reset signal.

#### Authenticated Watchdog Timer

The CM3 IO Board exposes 54 GPIO pins. We programmed GPIO 40 and 41 to carry the UART’s transmit (Tx) and receive (Rx) signals and connected the corresponding wires of the eAWDT. We also connected the eAWDT’s reset wire to the IO Board’s RUN pin, allowing the eAWDT to reset both the processor and the eMMC device.

#### Firmware Support

We added CIDER support to both Raspbian and Buildroot-based firmware by including the same ticket fetching application we had used for Debian on the HBE.

### STMicroelectronics Nucleo-L476RG (NL476RG)

The NL476RG board features an STM32L476RG MCU (based on ARM Cortex-M4) running at 80 MHz with 1,024 kB flash memory and 128 kB SRAM, as well as a TRNG. Since U-BOOT does not run on the NL476RG board, we wrote CIDER as a bare-metal application. We modified the NL476RG’s linker script to physically separate the flash memory regions for CIDER and the firmware, and flashed them independently.

#### Networking

Since the NL476RG board has no networking hardware, we connected an ESP8266 ESP-12E Wi-Fi module (around $1) to the board via the UART interface. The module includes a stand-alone networking stack that supports TCP/IP.

#### RWLatch Protected Key, Code, and Data Storage

We used the STM32L476RG MCU’s firewall feature as a RWLatch. The firewall blocks all access to specific address ranges until the next reset. Right before transferring control to the firmware, CIDER configures the firewall to block all access to the flash memory segment storing its secret keys, code, and data. Any CIDER data that need to be read by the firmware (e.g., the boot-nonce) are copied to unprotected storage before the firewall is enabled. Any attempt to access the protected region results in a device reset.

#### Authenticated Watchdog Timer

The NL476RG provides 47 GPIO pins. We chose PA9 and PA10, which can be used for UART Tx and Rx, respectively, and connected them to the eAWDT. The NL476RG also has a pin (NRST) to receive an external reset signal; we connected this pin to the eAWDT’s reset wire.

#### Firmware Support

Lacking an operating system, we inserted the ticket fetching code directly into the target applications and registered a timer interrupt handler to periodically execute the code. The code mirrors largely that of the Debian application.

### Security Analysis

In this section, we analyze the software TCB of CIDER, enumerating its components and describing the techniques used to secure it. We focus on the HBE variant of the CIDER implementation.

#### Summary of the Software TCB

The CIDER implementation consists of three discrete modules: the boot module, the recovery module, and the AWDT. Each module contains the same formally verified cryptographic library. Table I lists the main components of each module.

- **Boot Module**: Includes the core part of CIDER gated boot, device initialization code, and device drivers from the U-BOOT SPL.
- **Recovery Module**: Encapsulates the U-BOOT networking stack augmented with TCP and the HBE NIC driver. It also contains the U-BOOT MMC storage driver and a small amount of CIDER control logic for managing the interaction with the hub, including DICE attestation.
- **AWDT**: Consists of code implementing the AWDT control logic and low-level code for accessing the UART and the TRNG.

#### Defending the Software TCB

To ensure device availability, we added a storage driver, a networking stack, and device-dependent low-level initialization code to our TCB. These components add a substantial amount of code to CIDER. Many existing works on trusted computing exclude this code from their TCB by making availability a non-goal. In such settings, a modest amount of cryptography and protocol code (e.g., SSL, encrypted disks) are sufficient to protect the confidentiality and integrity of data sent to untrusted storage and network devices. No attempt is made to ensure that these devices are functioning.

Rather than attempting to make the entire software TCB bug-free, we focused on securing the TCB through isolation in time, firewalling, and formal verification. Table I summarizes the line counts and defense mechanisms for each component.