metadata:
  name: ns-with-no-quota
spec: {}
---
apiVersion: v1
kind: Namespace
metadata:
  name: ns-with-quota
spec: {}
---
kind: ResourceQuota
apiVersion: v1
metadata:
  name: memory-quota
  namespace: ns-with-quota
spec:
  hard:
    requests.memory: 1G
    limits.memory: 1G
```
一个时刻后，数据应该在 OPA 数据库中，准备查询。
重要说明
GateWay 服务帐户拥有对集群中所有内容的读取权限。这包括机密物品。小心您在网守缓存中复制的内容，因为减压阀策略中没有安全控制。如果不小心，您的策略很容易记录机密对象数据。此外，确保控制谁有权访问`gatekeeper-system`名称空间。任何获得服务帐户令牌的人都可以使用它来读取集群中的任何数据。
## 嘲讽测试数据
为了自动测试我们的策略，我们需要创建测试数据。在前面的例子中，我们使用了注入到`input`变量中的数据。缓存数据存储在`data`变量中。具体来说，为了访问我们的资源配额，我们需要访问`data.inventory.namespace["ns-with-quota"]["v1"]["ResourceQuota"]["memory-quota"]`。这是您在 GateWay 中查询来自减压阀的数据的标准方式。就像我们处理输入一样，我们可以通过创建一个数据对象来注入这个数据的模拟版本。以下是我们的 JSON 的外观:
```
{
    "inventory": {
        "namespace":{
            "ns-with-no-quota" : {},
            "ns-with-quota":{
                "v1":{
                    "ResourceQuota": {
                        "memory-quota":{
                                "kind": "ResourceQuota",
                                "apiVersion": "v1",
                                "metadata": {
                                    "name": "memory-quota",
                                    "namespace": "ns-with-quota"
                                },
                                "spec": {
                                    "hard": {
                                    "requests.memory": "1G",
                                    "limits.memory": "1G"
                                    }}}}}}}}}
```
当您查看`chapter11/enforce-memory-request/rego/enforcememory_test.rego`时，您会看到测试以之前的文档作为我们的控制数据。这让我们可以用 GateWay 中存在的数据测试我们的策略，而不必在集群中部署我们的代码。
## 构建和部署我们的策略
就像之前一样，在编写策略之前，我们已经编写了测试用例。接下来，我们将检查我们的策略:
```
package k8senforcememoryrequests
violation[{"msg": msg, "details": {}}] {
  invalidMemoryRequests
  msg := "No memory requests specified"
}
invalidMemoryRequests {
    data.
      inventory
      .namespace
      [input.review.object.metadata.namespace]
      ["v1"]
      ["ResourceQuota"]   
    containers := input.review.object.spec.containers
    ok_containers = [ok_container | 
      containers[j].resources.requests.memory ; 
      ok_container = containers[j]  ]
    count(containers) != count(ok_containers)
}
```
这段代码看起来应该很熟悉。它遵循与我们早期策略相似的模式。第一个规则`violation`是网守的标准报告规则。第二个规则是我们在哪里测试我们的`Pod`。如果指定的`Pod`的命名空间不包含`ResourceQuota`对象，第一行将失败并退出。下一行装载`Pod`的所有容器。在此之后，使用一个组合来构造一个指定了内存请求的容器列表。最后，只有当兼容容器的数量与容器的总数不匹配时，该规则才会成功。如果`invalidMemoryRequests`成功，这意味着一个或多个容器没有指定内存请求。这将强制设置`msg`和`violation`以通知用户该问题。
要部署，请将`chapter11/enforce-memory-request/yaml/gatekeeper-policy-template.yaml`和`chapter11/enforce-memory-request/yaml/gatekeeper-policy.yaml`添加到集群中。为了测试这一点，在我们的`ns-with-quota`和`ns-with-no-quota`名称空间中创建一个没有内存请求的`Pod`:
![Figure 11.7 – Creating pods without memory requests ](img/Fig_11.7_B15514.jpg)
图 11.7–创建没有内存请求的容器
第一次在`ns-with-quota`命名空间中创建`Pod`的尝试失败了，因为我们的`require-memory-requests`策略拒绝了它，因为`ns-with-quota`中有一个`ResourceQuota`。第二次尝试成功，因为它运行在没有`ResourceQuota`的命名空间中。
这一章的大部分时间都花在了撰写策略上。OPA 的最终用例将集中于使用 GateWay 的预构建策略来替换 Pod 安全策略。
# 使用 OPA 实现 Pod 安全策略
在 [*第 10 章*](10.html#_idTextAnchor260)*创建 Pod 安全策略*中，我们讨论了 Kubernetes 斯现有的 Pod 安全策略实现永远不会变成“GA”的事实。使用 Kubernetes 实现的替代方法之一是使用 OPA 和 gateway 来实现相同的策略，但是是在 OPA 中，而不是在 API 服务器上。这个过程的工作方式与 Kubernetes 实现的标准不同，但是使用它可以使您的集群更加独立于供应商，并且不太容易受到 Kubernetes 的 Pod 安全策略随后发生的变化的影响。
网守的策略全部发布在[https://github . com/open-policy-agent/网守/tree/master/library/pod-security-policy](https://github.com/open-policy-agent/gatekeeper/tree/master/library/pod-security-policy)。它们被构建为一系列`ConstraintTemplate`对象和示例约束。Pod 安全策略的这种方法在策略的实现方式上有一些特殊的差异。
第一个主要区别是，使用 GateWay 时，您必须声明 Pod 定义中的所有内容，以便 GateWay 可以进行审核。这对于 Pod 安全策略来说是不必要的，因为 Kubernetes 会改变 Pod 定义以符合策略。为了说明这一点，请看我们的 KinD 集群中的`openunison`命名空间中的`openunison-operator`、`Deployment`。没有宣布`runAsUser`。现在看看实际的吊舱定义，你会看到`runAsUser`被设置为`1`。网守版本 3 还不能支持 Pod 突变，所以为了保证`Deployment`或者`Pod`有`runAsUser`设置，单独的突变网钩需要相应的设置`runAsUser`属性。
Kubernetes 标准策略实现和使用 GateWay 之间的下一个主要区别是如何为 Pod 分配策略。Kubernetes 标准实现使用了 RBAC 的组合，利用提交者的账户信息和`Pod`的`serviceAccount`以及`Pod`请求的功能来确定使用哪个策略。当分配策略时，这会导致一些意想不到的结果。相反，GateWay 使用名称空间和标签选择器提供了与 GateWay 实现的任何其他约束相同的匹配标准。
例如，要使用特权约束运行 Pod，可以使用特定的`labelSelector`创建约束。然后，当提交 Pod 时，该标签需要在`Pod`上，以便网守知道如何应用它。这使得将策略明确应用于 T2 变得更加容易。它没有包括如何强制资源的标签。你可能不希望有人给自己的`Pod`贴上特权的标签。
最后，GateWay 的策略库被分解，而不是成为一个对象的一部分。为了应用强制执行在特定用户范围内运行的非特权容器的策略，您需要两个单独的策略约束实现和两个单独的约束。
在撰写本文时，您无法复制我们在 [*第 10 章*](10.html#_idTextAnchor260)*创建 Pod 安全策略*中构建的内容，除非进行大量的额外工作。GateWay 项目的目标是在未来达到这一点。更完整的解决方案仍然是 Kubernetes 中 Pod 安全策略的标准实现。
# 总结
在本章中，我们探讨了如何使用网守作为动态准入控制器，在 Kubernetes 内置的 RBAC 功能之上提供额外的授权策略。我们研究了 GateWay 和 OPA 的架构。最后，我们学习了如何在减压阀构建、部署和测试策略。
扩展 Kubernetes 的策略可以增强集群的安全性，并增强集群上运行的工作负载的完整性。通过应用连续审计，使用 GateWay 还可以帮助捕获以前遗漏的策略违规。使用这些功能将为您的集群提供更强大的基础。
本章重点讨论是否推出`Pod`。在下一章中，我们将学习如何跟踪`Pods`一旦激活后正在做什么。
# 问题
1.  Are OPA and GateKeeper the same thing?
    A.是的。
    B.没有。
2.  How is Rego code stored in GateKeeper?
    A.它被存储为被观看的`ConfigMap`对象。
    B.减压阀必须被安装到吊舱。
    C.减压阀需要作为机密物品储存。
    D.减压阀被保存为`ConstraintTemplate`。
3.  How do you test Rego policies?
    A.生产中
    B.使用直接内置于 OPA 中的自动化框架
    C.首先编译成网页组件
4.  In Rego, how do you write a `for` loop?
    A.你不需要；减压阀将确定迭代步骤。
    B.通过使用`for all`语法。
    C.通过在循环中初始化计数器。
    D.减压阀没有环路。
5.  What is the best way to debug Rego policies?
    A.使用集成开发环境连接到集群中的网守容器。
    B.在生产中。
    C.向代码中添加跟踪函数，并用`-v`运行`opa test`命令查看执行跟踪。
    D.包括`System.out`语句。
6.  Constraints all need to be hardcoded.
    A.没错。
    B.假的。
7.  GateKeeper can replace Pod security policies.
    A.没错。
    B.假的。