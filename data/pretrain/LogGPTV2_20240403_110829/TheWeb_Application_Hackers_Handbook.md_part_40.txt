forms the following query:
SELECT author,title,year FROM books WHERE publisher = ‘Wiley’ and
published=1
This query causes the database to check every row within the books table,
extract each of the records where the publisher column has the value Wiley and
published has the value 1, and return the set of all these records. The application
then processes this record set and presents it to the user within an HTML page.
In this query, the words to the left of the equals sign are SQL keywords and
the names of tables and columns within the database. This portion of the query
was constructed by the programmer when the application was created. The
expression Wiley is supplied by the user, and its signifi cance is as an item of
data. String data in SQL queries must be encapsulated within single quotation
marks to separate it from the rest of the query.
Now, consider what happens when a user searches for all books published
by O’Reilly. This causes the application to perform the following query:
SELECT author,title,year FROM books WHERE publisher = ‘O’Reilly’ and
published=1
cc0099..iinndddd 229922 88//1199//22001111 1122::0099::2299 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 293
Chapter 9 n Attacking Data Stores 293
In this case, the query interpreter reaches the string data in the same way as
before. It parses this data, which is encapsulated within single quotation marks,
and obtains the value O. It then encounters the expression Reilly’, which is not
valid SQL syntax, and therefore generates an error:
Incorrect syntax near ‘Reilly’.
Server: Msg 105, Level 15, State 1, Line 1
Unclosed quotation mark before the character string ‘
When an application behaves in this way, it is wide open to SQL injection.
An attacker can supply input containing a quotation mark to terminate the
string he controls. Then he can write arbitrary SQL to modify the query that
the developer intended the application to execute. In this situation, for example,
the attacker can modify the query to return every book in the retailer’s catalog
by entering this search term:
Wiley’ OR 1=1--
This causes the application to perform the following query:
SELECT author,title,year FROM books WHERE publisher = ‘Wiley’ OR
1=1--’ and published=1
This modifi es the WHERE clause of the developer’s query to add a second
condition. The database checks every row in the books table and extracts
each record where the publisher column has the value Wiley or where 1 is
equal to 1. Because 1 always equals 1, the database returns every record in
the books table.
The double hyphen in the attacker’s input is a meaningful expression in SQL
that tells the query interpreter that the remainder of the line is a comment and
should be ignored. This trick is extremely useful in some SQL injection attacks,
because it enables you to ignore the remainder of the query created by the
application developer. In the example, the application encapsulates the user-
supplied string in single quotation marks. Because the attacker has terminated
the string he controls and injected some additional SQL, he needs to handle the
trailing quotation mark to avoid a syntax error, as in the O’Reilly example. He
achieves this by adding a double hyphen, causing the remainder of the query
to be treated as a comment. In MySQL, you need to include a space after the
double hyphen, or use a hash character to specify a comment.
The original query also controlled access to only published books, because
it specifi ed and published=1. By injecting the comment sequence, the attacker
has gained unauthorized access by returning details of all books, published or
otherwise.
cc0099..iinndddd 229933 88//1199//22001111 1122::0099::2299 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 294
294 Chapter 9 n Attacking Data Stores
TIP In some situations, an alternative way to handle the trailing quotation
mark without using the comment symbol is to “balance the quotes.” You fi n-
ish the injected input with an item of string data that requires a trailing quote
to encapsulate it. For example, entering the search term:
Wiley’ OR ‘a’ = ‘a
results in the query:
SELECT author,title,year FROM books WHERE publisher = ‘Wiley’ OR
‘a’=’a’ and published=1
This is perfectly valid and achieves the same result as the 1 = 1 attack to
return all books published by Wiley, regardless of whether they have been
published.
This example shows how application logic can be bypassed, allowing an access
control fl aw in which the attacker can view all books, not just books match-
ing the allowed fi lter (showing published books). However, we will describe
shortly how SQL injection fl aws like this can be used to extract arbitrary data
from different database tables and to escalate privileges within the database
and the database server. For this reason, any SQL injection vulnerability should
be regarded as extremely serious, regardless of its precise context within the
application’s functionality.
Injecting into Different Statement Types
The SQL language contains a number of verbs that may appear at the beginning
of statements. Because it is the most commonly used verb, the majority of SQL
injection vulnerabilities arise within SELECT statements. Indeed, discussions
about SQL injection often give the impression that the vulnerability occurs only
in connection with SELECT statements, because the examples used are all of this
type. However, SQL injection fl aws can exist within any type of statement. You
need to be aware of some important considerations in relation to each.
Of course, when you are interacting with a remote application, it usually is
not possible to know in advance what type of statement a given item of user
input will be processed by. However, you can usually make an educated guess
based on the type of application function you are dealing with. The most com-
mon types of SQL statements and their uses are described here.
SELECT Statements
SELECT statements are used to retrieve information from the database. They are
frequently employed in functions where the application returns information in
response to user actions, such as browsing a product catalog, viewing a user’s
cc0099..iinndddd 229944 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 295
Chapter 9 n Attacking Data Stores 295
profi le, or performing a search. They are also often used in login functions where
user-supplied information is checked against data retrieved from a database.
As in the previous examples, the entry point for SQL injection attacks normally
is the query’s WHERE clause. User-supplied items are passed to the database to
control the scope of the query’s results. Because the WHERE clause is usually the
fi nal component of a SELECT statement, this enables the attacker to use the com-
ment symbol to truncate the query to the end of his input without invalidating
the syntax of the overall query.
Occasionally, SQL injection vulnerabilities occur that affect other parts of the
SELECT query, such as the ORDER BY clause or the names of tables and columns.
TRY IT!
http://mdsec.net/addressbook/32/
INSERT Statements
INSERT statements are used to create a new row of data within a table. They are
commonly used when an application adds a new entry to an audit log, creates
a new user account, or generates a new order.
For example, an application may allow users to self-register, specifying their
own username and password, and may then insert the details into the users
table with the following statement:
INSERT INTO users (username, password, ID, privs) VALUES (‘daf’,
‘secret’, 2248, 1)
If the username or password fi eld is vulnerable to SQL injection, an attacker can
insert arbitrary data into the table, including his own values for ID and privs.
However, to do so he must ensure that the remainder of the VALUES clause is
completed gracefully. In particular, it must contain the correct number of data
items of the correct types. For example, injecting into the username fi eld, the
attacker can supply the following:
foo’, ‘bar’, 9999, 0)--
This creates an account with an ID of 9999 and privs of 0. Assuming that the
privs fi eld is used to determine account privileges, this may enable the attacker
to create an administrative user.
In some situations, when working completely blind, injecting into an INSERT
statement may enable an attacker to extract string data from the application. For
example, the attacker could grab the version string of the database and insert
this into a fi eld within his own user profi le, which can be displayed back to his
browser in the normal way.
cc0099..iinndddd 229955 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 296
296 Chapter 9 n Attacking Data Stores
TIP When attempting to inject into an INSERT statement, you may not know
in advance how many parameters are required, or what their types are. In the
preceding situation, you can keep adding fi elds to the VALUES clause until the
desired user account is actually created. For example, when injecting into the
username fi eld, you could submit the following:
foo’)--
foo’, 1)--
foo’, 1, 1)--
foo’, 1, 1, 1)--
Because most databases implicitly cast an integer to a string, an integer
value can be used at each position. In this case the result is an account with
a username of foo and a password of 1, regardless of which order the other
fi elds are in.
If you fi nd that the value 1 is still rejected, you can try the value 2000,
which many databases also implicitly cast to date-based data types.
When you have determined the correct number of fi elds following the injec-
tion point, on MS-SQL you can add a second arbitrary query and use one of
the inference-based techniques described later in this chapter.
In Oracle, a subselect query can be issued within an insert query. This
subselect query can cause a success or failure of the main query, using the
inference-based techniques described later.
TRY IT!
http://mdsec.net/addressbook/12/
UPDATE Statements
UPDATE statements are used to modify one or more existing rows of data within
a table. They are often used in functions where a user changes the value of data
that already exists — for example, updating her contact information, changing
her password, or changing the quantity on a line of an order.
A typical UPDATE statement works much like an INSERT statement, except that
it usually contains a WHERE clause to tell the database which rows of the table to
update. For example, when a user changes her password, the application might
perform the following query:
UPDATE users SET password=’newsecret’ WHERE user = ‘marcus’ and password
= ‘secret’
This query in effect verifi es whether the user’s existing password is correct
and, if so, updates it with the new value. If the function is vulnerable to SQL
cc0099..iinndddd 229966 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 297
Chapter 9 n Attacking Data Stores 297
injection, an attacker can bypass the existing password check and update the
password of the admin user by entering the following username:
admin’--
NOTE Probing for SQL injection vulnerabilities in a remote application
is always potentially dangerous, because you have no way of knowing in
advance quite what action the application will perform using your crafted
input. In particular, modifying the WHERE clause in an UPDATE statement can
cause changes to be made throughout a critical table of the database. For
example, if the attack just described had instead supplied the username:
admin’ or 1=1--
this would cause the application to execute the query:
UPDATE users SET password=’newsecret’ WHERE user = ‘admin’ or
1=1
This resets the value of every user’s password, because 1 always equals 1!
Be aware that this risk exists even when you attack an application func-
tion that does not appear to update any existing data, such as the main login.
There have been cases where, following a successful login, the application
performs various UPDATE queries using the supplied username. This means
that any attack on the WHERE clause may be replicated in these other state-
ments, potentially wreaking havoc within the profi les of all application users.
You should ensure that the application owner accepts these unavoidable risks
before attempting to probe for or exploit any SQL injection fl aws. You should
also strongly encourage the owner to perform a full database backup before
you begin testing.
TRY IT!
http://mdsec.net/addressbook/27/
DELETE Statements
DELETE statements are used to delete one or more rows of data within a table,
such as when users remove an item from their shopping basket or delete a
delivery address from their personal details.
As with UPDATE statements, a WHERE clause normally is used to tell the data-
base which rows of the table to update. User-supplied data is most likely to be
incorporated into this clause. Subverting the intended WHERE clause can have
cc0099..iinndddd 229977 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 298
298 Chapter 9 n Attacking Data Stores
far-reaching effects, so the same caution described for UPDATE statements applies
to this attack.
Finding SQL Injection Bugs
In the most obvious cases, a SQL injection fl aw may be discovered and conclu-
sively verifi ed by supplying a single item of unexpected input to the application.
In other cases, bugs may be extremely subtle and may be diffi cult to distinguish
from other categories of vulnerability or from benign anomalies that do not
present a security threat. Nevertheless, you can carry out various steps in an
ordered way to reliably verify the majority of SQL injection fl aws.
NOTE In your application mapping exercises (see Chapter 4), you should have
identifi ed instances where the application appears to be accessing a back-end
database. All of these need to be probed for SQL injection fl aws. In fact, abso-
lutely any item of data submitted to the server may be passed to database
functions in ways that are not evident from the user’s perspective and may be
handled in an unsafe manner. Therefore, you need to probe every such item
for SQL injection vulnerabilities. This includes all URL parameters, cookies,
items of POST data, and HTTP headers. In all cases, a vulnerability may exist in
the handling of both the name and value of the relevant parameter.
TIP When you are probing for SQL injection vulnerabilities, be sure to walk
through to completion any multistage processes in which you submit crafted
input. Applications frequently gather a collection of data across several
requests, and they persist this to the database only after the complete set has
been gathered. In this situation, you will miss many SQL injection vulnerabili-
ties if you only submit crafted data within each individual request and monitor
the application’s response to that request.
Injecting into String Data
When user-supplied string data is incorporated into a SQL query, it is encap-
sulated within single quotation marks. To exploit any SQL injection fl aw, you
need to break out of these quotation marks.
HACK STEPS
1. Submit a single quotation mark as the item of data you are targeting.
Observe whether an error occurs, or whether the result differs from the
original in any other way. If a detailed database error message is received,
consult the “SQL Syntax and Error Reference” section of this chapter to
understand its meaning.
cc0099..iinndddd 229988 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 299
Chapter 9 n Attacking Data Stores 299
2. If an error or other divergent behavior was observed, submit two single
quotation marks together. Databases use two single quotation marks as
an escape sequence to represent a literal single quote, so the sequence is
interpreted as data within the quoted string rather than the closing string
terminator. If this input causes the error or anomalous behavior to disap-
pear, the application is probably vulnerable to SQL injection.
3. As a further verification that a bug is present, you can use SQL concat-
enator characters to construct a string that is equivalent to some benign
input. If the application handles your crafted input in the same way as it
does the corresponding benign input, it is likely to be vulnerable. Each
type of database uses different methods for string concatenation. The
following examples can be injected to construct input that is equivalent to
FOO in a vulnerable application:
n Oracle: ‘||’FOO
n MS-SQL: ‘+’FOO
n MySQL: ‘ ‘FOO (note the space between the two quotes)
TIP One way of confi rming that the application is interacting with a back-
end database is to submit the SQL wildcard character % in a given parameter.
For example, submitting this in a search fi eld often returns a large number of
results, indicating that the input is being passed into a SQL query. Of course,
this does not necessarily indicate that the application is vulnerable — only that
you should probe further to identify any actual fl aws.
TIP While looking for SQL injection using a single quote, keep an eye
out for any JavaScript errors occurring when your browser processes the
returned page. It is fairly common for user-supplied input to be returned
within JavaScript, and an unsanitized single quote will cause an error in the
JavaScript interpreter, just as it does in the SQL interpreter. The ability to
inject arbitrary JavaScript into responses allows cross-site scripting attacks, as
described in Chapter 12.
Injecting into Numeric Data
When user-supplied numeric data is incorporated into a SQL query, the applica-
tion may still handle this as string data by encapsulating it within single quotation
marks. Therefore, you should always follow the steps described previously for string
data. In most cases, however, numeric data is passed directly to the database in
numeric form and therefore is not placed within single quotation marks. If none
of the previous tests points toward the presence of a vulnerability, you can take
some other specifi c steps in relation to numeric data.
cc0099..iinndddd 229999 88//1199//22001111 1122::0099::3300 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 300
300 Chapter 9 n Attacking Data Stores
HACK STEPS
1. Try supplying a simple mathematical expression that is equivalent to the
original numeric value. For example, if the original value is 2, try submit-
ting 1+1 or 3-1. If the application responds in the same way, it may be
vulnerable.
2. The preceding test is most reliable in cases where you have confirmed