况，response-digest值的计算方式与Authorization首部的request-
digest类似，A2为：
A2 = ":" digest-uri-value
当qop="auth-int"时，A2为：
A2 = ":" digest-uri-value ":" H(entity-body)
其中digest-uri-value是请求的Authorization首部中uri指令的值。
cnonce和nc值一定要与此报文所响应的客户端请求中的相应值相同。如果指定
了qop="auth "或者qop="auth-int"，就必须提供rspauth指令
cnonce cnonce值一定要与此报文所响应的客户端请求中的相应值一样。如果指定了
qop="auth "或qop="auth-int"，就必须提供cnonce指令
nc nc值一定要与此报文所响应的客户端请求中的相应值一样。如果指定了
qop="auth "或qop="auth-int"，就必须提供nc指令
 未来可以通过这条指令进行扩展。所有不识别的指令都要忽略掉
F.4 参考代码
下列代码实现了RFC 2617中H(A1)、H(A2)、request-digest和response-digest的计
算。它使用了RFC 1321中的MD5实现。
摘要认证 ｜ 611
F.4.1 文件digcalc.h
#define HASHLEN 16
typedef char HASH[HASHLEN];
#define HASHHEXLEN 32
typedef char HASHHEX[HASHHEXLEN+1];
577 #define IN
#define OUT
/* calculate H(A1) as per HTTP Digest spec */
void DigestCalcHA1(
IN char * pszAlg,
IN char * pszUserName,
IN char * pszRealm,
IN char * pszPassword,
IN char * pszNonce,
IN char * pszCNonce,
OUT HASHHEX SessionKey
);
/* calculate request-digest/response-digest as per HTTP Digest spec */
void DigestCalcResponse(
IN HASHHEX HA1, /* H(A1) */
IN char * pszNonce, /* nonce from server */
IN char * pszNonceCount, /* 8 hex digits */
IN char * pszCNonce, /* client nonce */
IN char * pszQop, /* qop-value: "", "auth", "auth-int" */
IN char * pszMethod, /* method from the request */
IN char * pszDigestUri, /* requested URL */
IN HASHHEX HEntity, /* H(entity body) if qop="auth-int" */
OUT HASHHEX Response /* request-digest or response-digest */
);
F.4.2 文件“digcalc.c”
#include 
#include 
#include 
#include "digcalc.h"
void CvtHex(
IN HASH Bin,
OUT HASHHEX Hex
)
{
unsigned short i;
unsigned char j;
for (i = 0; i > 4) & 0xf;
if (j 
#include "digcalc.h"
void main(int argc, char ** argv) {
char * pszNonce = "dcd98b7102dd2f0e8b11d0f600bfb0c093";
char * pszCNonce = "0a4f113b";
char * pszUser = "Mufasa";
char * pszRealm = "PI:EMAIL";
char * pszPass = "Circle Of Life";
char * pszAlg = "md5";
char szNonceCount[9] = "00000001";
char * pszMethod = "GET";
char * pszQop = "auth";
char * pszURI = "/dir/index.html";
HASHHEX HA1;
HASHHEX HA2 = "";
HASHHEX Response;
DigestCalcHA1(pszAlg, pszUser, pszRealm, pszPass,
pszNonce, pszCNonce, HA1);
DigestCalcResponse(HA1, pszNonce, szNonceCount, pszCNonce, pszQop,
579 pszMethod, pszURI, HA2, Response);
printf("Response = %s\n", Response); ~
580 };
614 ｜ 附录F
附录G
语言标记
615
语言标记是一些短小的标准字符串，用来命名所使用的语言——比如，fr（法语）
和en-GB（英式英语）。每个标记都由一个或多个称为子标记的部分组成，中间由连
字符分隔。16.4节曾详细介绍了语言标记。
本附录总结了语言标记的规则、标准化的标记以及注册信息。包含下列参考资料：
• G.1节总结了第一个（主）子标记所用规则；
• G.2节总结了第二个子标记所用规则；
• 表G-1显示了已在IANA注册的语言标记；
• 表G-2列出了ISO 639语言代码；
• 表G-3列出了ISO 3166国家代码。
G.1 第一个子标记所用规则
如果第一个子标记为：
• 2个字符长，是ISO 6391和639-1标准的语言代码；
• 3个字符长，是ISO 639-22标准中列出的语言代码；
• 字母“i”，语言标记就是在IANA中显式注册过的语言标记；
• 字母“x”，语言标记就是私有的、非标准的扩展子标记。
581 表G-2总结了ISO 639和639-2的名称。
G.2 第二个子标记所用规则
如果第二个子标记为：
• 2个字符长，就是ISO 31663定义的国家/地区码；
• 3～8个字符长，是已在IANA注册过的语言标记；
• 1个字符长，就是非法的。
表G-3总结了ISO 3166国家代码。
注1：参见ISO标准639，“Codes for the representation of names of languages”。
注2： 参见ISO 639-2，“Codes for the representation of names of languages—Part 2: Alpha-3 code”（语言名表
示码——第2部分：Alpha-3代码）。
注3：ISO 3166将国家代码AA、QM-QZ、XA-XZ和ZZ保留作为用户分配的代码。不能用它们来构造语
言标记。
616 ｜ 附录G