tering the lookahead at each position in the string where it begins a match artempt. If
the character at that position is not in the Thai script (i.e.,  lookaround matches, too. As the engine exits the lookaround, it restores
the match-in-progress. In this case, that's the zero-length match before the character
just found to be Thai. Next up is  is not inside
a lookaround, it consumes the character, and we have found our Thai digit.
Lookaround is atomic
When the regular expression engine exits a lookaround group, it discards the text
matched by the lookaround. Because the text is discarded, any backrracking positions
remembered by altermation or quantifiers inside the lookaround are also discarded.
This effectively makes lookahead and lookbehind atomic. Recipe 2.14 explains atomic
groups in detail.
In most situations, the atomic nature of lookaround is irrelevant. A lookaround is
merely an assertion to check whether the regex inside the lookaround matches or fails
jo ued ue sumsuoo jou saop 1 se sueaaau st qone ues t sta suaap fueu mo
the subject text.
The atomic nature comes into play only when you use capturing groups inside look-
ahead (and lookbehind, if your regex flavor allows you to). While the lookahead does
not consume any text, the regex engine will remember which part of the text was
matched by any capturing groups inside the lookahead. If the lookahead is at the end
of the regex, you will indeed end up with capturing groups that match text not matched
2.16 Test for a Match Without Adding It to the Overall Match | 87
---
## Page 104
by the regular expression itself. If the lookahead is in the middle of the regex, you can
end up with capturing groups that match overlapping parts of the subject text.
The only situation in which the atomic nature of lookaround can alter the overall regex
match is when you use a backreference outside the lookaround to a capruring group
created inside the lookaround. Consider this regular expression:
(?=(\d+))\w+\1
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
At first glance, you may think that this regex would match 123x12. \d+ would caprure
12 into the first capturing group, then  is attempted at the start of the string. It eats up 123x12. ^1
which references 123, fails at the end of the string.  o o8 o suosd uxpexpeq ay ou stq augua xaau au
the way, and the lookaround forced  to give up its backtracking positions. The
match attempt fails.
AlternativetoLookbehind
\K\w+(?=)
Regex options: Case insensitive
Regexflavers: PCRE 7.2, Perl 5.10
Perl 5.10, PCRE 7.2, and later versions, provide an alternative mechanism to lookbe-
hind using  will not be included
in the overall match result. Text matched by capturing groups before the  finds rwo matches in the string aaa. The first match attempt at the
Start of the sring fails, because the regex engine cannot find an a while looking back.
The match attempt starting between the first and second a is successful. Looking back
the regex engine sees the first a in the string, which satisfies the lookbehind. The second
a intheregexthen matches the second in the string. The third match artemptstarting
berween the second and third a is also successful. Looking back the second a in the
string satisfies the lookbehind. The regex then matches the third a. The final match
attempt at the end of the string also fails. Looking back the third a in the string does
satisfy the lookbehind. But there are no characters left in the string for the second ca)
in the regex to match.
of the string succeeds. The first a in the regex matches the first a in the string.  will find the exact same matches as the capturing group in the regex a(a) . You
cannot use \K to match the same part of the string more than once. With lookbehind,
you can. You can use  pa no JI 1ap e s! pue aduss ieq ou u qoq si eq saoeeu aus
p{Nd)\Ka) you’d be matching a Thai character followed by a digit followed by an a,
but returning only the a as the match. Again, this is no different from matching all three
characters with )(\w+)(?=)
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Instead of using lookbehind, we used a capturing group for the opening tag ), We
also placed the part of the match we're interested in, the \w+, into a capruring group.
xa8au [ezaao aq1 fu.ang 5t es A o uoissaudxa nensa s!u kdde nof uau/
match will be cat. The first capturing group will hold sb>, and the second, cat.
If the requirement is to match only cat (the word between the  tags) because you
want to extract only that from the text, you can reach that goal by simply storing the
text matched by the second capuring group instead of the overall regex.
between the tags,simply use a backreference to the first capruring group to reinsert the
If the requirement is that you want to do a search-and-replace, replacing only the word
opening tag into the replacement text. In this case, you don’t really need the capturing
group, asthe opening tagis always the same But when it's variable,the capturing group
reinserts exactly what was matched. Recipe 2.21 explains this in detail.
Finally, if you really want to simulate lookbehind, you can do so with rwo regular
expressions. First, search for your regex without the lookbehind. When it matches,
copy the part of the subject text before the match into a new string variable. Do the test
you did inside the lookbehind with a second regex, appending an end-of-string anchor
(\z or )/;
var lookbehind = /s/;
if (match = mainregexp.exec(*My cat 1s furry")) {
// Found a word before a closing tag 
var potentialmatch = match[0];
var leftContext = match.input, substring(o, match .index);
1f (lookbehind,exec(leftContext)){
// Lookbehind matched:
}else (
// potentialnatch occurs between a pair of  tags
// Lookbehind failed: potentialmatch is no good
{
}else {
// Unable to find a word before a closing tag 
90 | Chapter2: Basic RegularExpression Skils
---
## Page 107
See Also
Recipes 5.5, 5.6, and 7.10 solve some real-world problems using lookaround.
2.17Match OneofTwoAlternativesBasedonaCondition
Problem
Create a regular expression that matches a comma-delimited list of the words one,
to, and three. Each word can occur any number of times in the list, and the words
can occur in any order, but each word must appear at least once.
Solution
b(?:(?:(one)1(tao)1(three))(？:, 1\b)){3,}(?(1)1(?!))(?(2)1(?!))(?(3)1(?!))
Regex options: None
Regexflavers: .NET, PCRE, Perl, Python
Java, JavaScript, and Ruby do not support conditionals. When programming in these
languages (or any other language), you can use the regular expression without the con-
ditionals, and write some extra code to check if each of the thrce capruring groups
matched something.
\b(?: (?: (one) 1(tuo) I (three))(?:, 1\b)){3,}
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
.NET, PCRE, Perl, and Python support conditionals using numbered capturing groups.
(?(1)then|else) is a conditional that checks whether the first capruring group has
already matched something, If it has, the regex engine attempts to march then). If the
capturing group has not participated in the match attempt thus far, the  part is
The parentheses, question mark, and vertical bar are all part of the syntax for the con-
ditional. They don't have their usual meaning. You can use any kind of regular expres-
altermation for one of the parts, you have to use a group to keep it together. Only one
sion for the  part. The empty regex always finds
a zero-length match. The solution for this recipe uses three conditionals that have an
empty then part. Ifthe capruring group paricipated, the conditional smply matches.
An empty negative lookahead, (?1)>, filsthe else part. Since the empty regex always
matches, a negative lookahead containing the empty regex always fails. Thus, the con-
2.17 Match One of Twe Altermatives Based on a Condition | 91
---
## Page 108
ditional  checks whether the named capturing group name
participated in the match attempt thus far. Perl 5.10 and later also support named
conditionals. But Perl requires angle brackets or quotes around the name, as in )then|else) or.
If the subject text starts with an a, this is caprured in the first capruring group. If not,
the first capturing group does not participate in thematch attempt at all. Itis important
that the question mark is outside the capturing group because this makes the whole
group optional. If there is no a, the group is repeated zero times, and never gets the
chance to capture anything at all. It can't caprure a zero-length string.
Ifyou use (a?),the group always participates in the match attemp. There’s no quan-
tifier after the group, so it is reeated exactly once. The group willeither caprure ar
capture nothing
Regardless of whether ca) was matched, the next token is cb>, The conditional is next
If the capturing group participated in the match attemp, even if it capured the zero-
length string (not possible here), ) will be attempted. If not, d will be attempted.
In English, (a) ?b(?(1)c|d) > either matches ab followed by , or matches b followed by
d.
With .NET, PCRE, and Perl, but not with Python, conditionals can also use look-
around.  part is attempted. Since lookaround is zero-width, the  part is attempted. If the positive lookahead fails, the alternation
kicks in. The negative lookahead then does the same test. The negative
lookahead succeeds when if- fails, which is already guaranteed because
(?=if)> failed. Thus, selse: is artempted. Placing the lookahead in a
conditional saves time, as the conditional attempts  or the Unicode escape \u0020> or  instead.
To match a tab, use ^t. For line breaks, use \r\n> (Windows) or  (Unix/Linux/
OS X).
Free-spacing mode does not change anything inside character classes. A character class
is a single token. Any whitespace characters or hashes inside character classes are literal
characters that are added to the character class. You cannot break up character classes
to comment their parts.
Java has free-spacing character classes
Regular expressions wouldn’t live up to their reputation unless at least one flavor was
incompatible with the others. In this case, Java is the odd one out
In Java, character classes are not parsed as single tokens. If you tum on free-spacing
mode, Java ignores whitespace in character classes, and hashes inside character classes
do start comments. This means you cannot use [ ] and [#] to match these charac-
ters literally. Use  instead.
94 I Chapter 2: Basic Regular Expression Skils