# 梨子带你刷burpsuite靶场系列之高级漏洞篇 - OAuth2.0认证漏洞专题
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 本系列介绍
>
> PortSwigger是信息安全从业者必备工具burpsuite的发行商，作为网络空间安全的领导者，他们为信息安全初学者提供了一个在线的网络安全学院(也称练兵场)，在讲解相关漏洞的同时还配套了相关的在线靶场供初学者练习，本系列旨在以梨子这个初学者视角出发对学习该学院内容及靶场练习进行全程记录并为其他初学者提供学习参考，希望能对初学者们有所帮助。
## 梨子有话说
>
> 梨子也算是Web安全初学者，所以本系列文章中难免出现各种各样的低级错误，还请各位见谅，梨子创作本系列文章的初衷是觉得现在大部分的材料对漏洞原理的讲解都是模棱两可的，很多初学者看了很久依然是一知半解的，故希望本系列能够帮助初学者快速地掌握漏洞原理。
## 高级漏洞篇介绍
> 相对于服务器端漏洞篇和客户端漏洞篇，高级漏洞篇需要更深入的知识以及更复杂的利用手段，该篇也是梨子的全程学习记录，力求把漏洞原理及利用等讲的通俗易懂。
## 高级漏洞篇 – OAuth2.0认证漏洞专题
###  什么是OAuth？
OAuth是一种常用的授权框架，它使网站和应用程序能够请求对另一个应用程序上的用户帐户进行有限访问。值得注意的是，OAuth允许用户授予此访问权限，而无需将其登录凭据暴露给请求的应用程序。这意味着用户可以选择他们想要共享的数据，而不必将其帐户的完全控制权交给第三方。基本的OAuth过程广泛用于集成第三方功能，这些功能需要访问用户帐户中的某些数据。例如，应用程序可能使用OAuth请求访问电子邮件联系人列表，以便它可以建议人们联系。但是，同样的机制也用于提供第三方认证服务，允许用户使用他们在不同网站上的帐户登录。  
尽管OAuth 2.0是当前标准，但一些网站仍然使用旧版1a。 OAuth 2.0 是从头开始编写的，而不是直接从OAuth
1.0开发的。所以两者非常不同。后文中所有的OAuth均特指OAuth2.0
###  OAuth2.0是如何运行的？
OAuth2.0设计初衷是在应用之间共享特定数据的访问权限，它通过在三个不同方，客户端应用程序、资源所有者、OAuth服务提供者之间定义一系列交互来运作
  * 客户端应用程序(想要访问用户数据的网站或Web应用程序)
  * 资源所有者(客户端应用程序想要访问数据的所有者)
  * OAuth服务提供者(控制用户数据和访问权限的网站或应用程序，它们提供用于与授权服务器和资源服务器进行交互的API来支持OAuth)
可以使用多种不同的方法来实现实际的OAuth流程，这些方法统称为OAuth流或授权类型，burp主要讲解其中的授权码和隐式授权，这两种授权类型包括以下几个阶段
  * 客户端应用程序请求访问用户数据的子集，指定它们要使用的授权类型以及想要哪一种权限
  * 提示用户登录OAuth服务，并询问他们是否同意请求的访问权限
  * 客户端应用程序接收一个唯一的访问令牌(Access Token)，它可以证明它们拥有所请求数据的访问权限
  * 客户端应用程序使用该令牌(Token)调用API，从资源服务器中获取相关数据
## OAuth授权类型(grant type)
这是OAuth必须了解的重要概念。
###  什么是授权类型？
授权类型确定OAuth流程中涉及的确切步骤顺序，授予类型还会影响客户端应用程序在每个阶段与OAuth服务的通信方式，包括访问令牌的发送方式，所以，授权类型也被称为OAuth流，在客户端应用程序开始流程之前必须配置OAuth服务为特定的授权类型，并将要使用的授权类型包含在初始授权请求中，而且每种授权类型都是处于不同的复杂性和安全性考虑的，burp主要介绍常见的授权码和隐式两个类型
###  OAuth范围(scope)
任何OAuth授权类型，客户端应用程序都需要指定要访问的数据和要进行的操作类型，并将这些信息包含在发送给OAuth服务的请求中的参数scope中，经常使用标准化的OpenID
Connect作用域来进行认证
###  授权码流
客户端应用程序和OAuth服务首先通过浏览器的重定向来交换一系列HTTP请求，一启动这个授权流程，此时会询问用户是否同意访问，如果同意则向客户端发放授权码，然后客户端与OAuth服务交换这个码来接收访问令牌，它可以用于调用API来获取相关的用户数据，这个交换过程全程是经过安全的，预置的服务器端到服务器端的通道进行的，所以该过程对于最终用户是透明的，当客户端应用程序首次向OAuth服务注册时就会建立这个安全通道，此时还会生成一个client_secret，用于在发送服务端到服务端请求时用client_secret对客户端应用程序进行认证，因为最敏感的数据不经过浏览器发送，所以这种授权类型某种程度上是最安全的，为了更直观地理解这个过程，burp给出一个序列图
下面我们具体介绍每一步的内容
**1.授权请求**
客户端应用程序向OAuth服务的/authorization端点发送请求以获取指定用户数据的访问权限，该请求通常包含如下查询参数
  * client_id(强制参数，包含客户端应用程序的唯一标识符)
  * redirect_uri(将授权码发送到客户端应用程序时浏览器会被重定向到其指定的URI 也被称为回调URI或回调端点，该参数使用频率很高)
  * response_type(指定客户端应用程序期望的响应类型，对于授权码授权类型，其值应该为code)
  * scope(指定客户端应用程序要访问用户数据的哪个子集，其值可以是OAuth提供程序设置的自定义值，也可以是OpenID Connect规范定义的标准化范围)
  * state(与客户端应用程序的当前会话相关的唯一的不可预测的值，该参数还充当客户端应用程序CSRF令牌的形式)
授权请求示例如下
    GET /authorization?client_id=12345&redirect_uri=https://client-app.com/callback&response_type=code&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1
    Host: oauth-authorization-server.com
**2.用户登录并处理请求**
授权服务器收到初始请求后会将用户重定向到登录页面，该页面会提示他们登录OAuth提供程序的账户，通常为社交账号，然后会向用户提供客户端应用程序要访问的数据列表，用户可以选择是否同意此访问，值得注意的是一旦用户同意了访问的范围，在会话有效期内会自动完成该步骤
**3.授权码发放**
如果用户同意请求的访问，浏览器就会被重定向到redirect_uri指定的callback端点，其值有时也可与state参数值相同，像这样
    GET /callback?code=a1b2c3d4e5f6g7h8&state=ae13d489bd00e3c24 HTTP/1.1
    Host: client-app.com
**4.访问令牌请求**
客户端应用程序收到授权码以后需要将其兑换为访问令牌，客户端应用程序会向OAuth服务发送POST请求/token端点，全程是在透明通道中进行的，该请求除了client_id和code参数还要有client_secret和grant_type，client_secret由OAuth服务注册时分配，用于对客户端应用程序进行身份验证，grant_type告知端点客户端应用程序使用哪种授权类型，很明显，此时应为authorization_code，像这样
    POST /token HTTP/1.1
    Host: oauth-authorization-server.com
    …
    client_id=12345&client_secret=SECRET&redirect_uri=https://client-app.com/callback&grant_type=authorization_code&code=a1b2c3d4e5f6g7h8
**5.访问令牌发放**
OAuth服务验证由客户端应用程序发过来的访问令牌请求，验证通过以后会向其发放其请求范围内的访问令牌，像这样
    {
      "access_token": "z0y9x8w7v6u5",
      "token_type": "Bearer",
      "expires_in": 3600,
      "scope": "openid profile",
      …
    }
**6.API调用**
客户端应用程序接收到访问令牌以后就可以通过API调用OAuth服务的/userinfo端点，调用请求中会包含一个有token_type和access_token的Authorization请求头字段以表明其拥有访问权限，像这样
    GET /userinfo HTTP/1.1
    Host: oauth-resource-server.com
    Authorization: Bearer z0y9x8w7v6u5
**7.资源发放**
OAuth接收到API调用请求时会验证其中的access_token，确认其是否有效并且是否与所请求客户端应用程序匹配，通过验证后返回所请求的资源，像这样
    {
      "username":"carlos",
      "email":"PI:EMAIL",
      …
    }
###  隐式流
隐式就简单多了，客户端应用程序在用户同意后就能接收到由OAuth服务发放的访问令牌，跳过了用授权码兑换访问令牌的过程，所以相对应的，这种授权类型的安全性会大打折扣，而且全程都是经过浏览器的，风险太大了，所以该授权类型更适合单页应用程序和本机桌面应用程序，同样的burp也提供了一个很直观的序列图
下面我们详细介绍每一步
**1.授权请求**
与授权码流不同的是必须要将参数response_type设置为token，像这样
    GET /authorization?client_id=12345&redirect_uri=https://client-app.com/callback&response_type=token&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1
    Host: oauth-authorization-server.com
**2.用户登录并处理请求**
该阶段与授权码流相同
**3.访问令牌发放**
虽然OAuth服务会重定向到redirect_uri指定的授权请求，但是它会将访问令牌和其他相关数据拼接到URL中发回，客户端应用程序需要利用脚本对其进行提取并存储，像这样
    GET /callback#access_token=z0y9x8w7v6u5&token_type=Bearer&expires_in=5000&scope=openid%20profile&state=ae13d489bd00e3c24 HTTP/1.1
    Host: client-app.com
**4.API调用**
客户端应用程序在提取到token_type和access_token后就使用相同的方式向/userinfo端点发出请求，不过这个过程也是经过浏览器，像这样
    GET /userinfo HTTP/1.1
    Host: oauth-resource-server.com
    Authorization: Bearer z0y9x8w7v6u5
**5.资源发放**
资源服务器验证令牌的有效性以及其是否属于所请求的客户端应用程序，如果通过验证，则返回所请求的数据，像这样
    {