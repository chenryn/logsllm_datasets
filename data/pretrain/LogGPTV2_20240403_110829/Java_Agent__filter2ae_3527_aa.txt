# Java Agent 从入门到内存马
## 入门
### 介绍
注意：这里只是简短的介绍一下，想要详细了解，请看参考资料。
> 在JDK1.5以后，javaagent是一种能够在不影响正常编译的情况下，修改字节码。
>
>
> java作为一种强类型的语言，不通过编译就不能够进行jar包的生成。而有了javaagent技术，就可以在字节码这个层面对类和方法进行修改。同时，也可以把javaagent理解成一种代码注入的方式。但是这种注入比起spring的aop更加的优美。
Java agent的使用方式有两种：
  * 实现`premain`方法，在JVM启动前加载。
  * 实现`agentmain`方法，在JVM启动后加载。
`premain`和`agentmain`函数声明如下，拥有`Instrumentation inst`参数的方法 **优先级更高** ：
    public static void agentmain(String agentArgs, Instrumentation inst) {
        ...
    }
    public static void agentmain(String agentArgs) {
        ...
    }
    public static void premain(String agentArgs, Instrumentation inst) {
        ...
    }
    public static void premain(String agentArgs) {
        ...
    }
第一个参数`String agentArgs`就是Java agent的参数。
第二个参数`Instrumentaion inst`相当重要，会在之后的进阶内容中提到。
### premain
要做一个简单的`premain`需要以下几个步骤：
  1. 创建新项目，项目结构为：
        agent
    ├── agent.iml
    ├── pom.xml
    └── src
        ├── main
        │   ├── java
        │   └── resources
        └── test
            └── java
  2. 创建一个类（这里为`com.shiroha.demo.PreDemo`），并且实现`premain`方法。
        package com.shiroha.demo;
    import java.lang.instrument.Instrumentation;
    public class PreDemo {
        public static void premain(String args, Instrumentation inst) throws Exception{
            for (int i = 0; i  `Artifacts` -> `JAR` -> `From modules with
dependencies`。
默认的配置就行。
选择`Build` -> `Build Artifacts` -> `Build`。
之后产生`out/artifacts/agent_jar/agent.jar`：
        └── out
        └── artifacts
            └── agent_jar
                └── agent.jar
  5. 使用`-javaagent:agent.jar`参数执行`hello.jar`，结果如下。
可以发现在`hello.jar`输出`hello world`之前就执行了`com.shiroha.demo.PreDemo$premain`方法。
当使用这种方法的时候，整个流程大致如下图所示：
然而这种方法存在一定的局限性——
**只能在启动时使用`-javaagent`参数指定**。在实际环境中，目标的JVM通常都是已经启动的状态，无法预先加载premain。相比之下，agentmain更加实用。
### agentmain
写一个`agentmain`和`premain`差不多，只需要在`META-INF/MANIFEST.MF`中加入`Agent-Class:`即可。
    Manifest-Version: 1.0
    Premain-Class: com.shiroha.demo.PreDemo
    Agent-Class: com.shiroha.demo.AgentDemo
不同的是，这种方法不是通过JVM启动前的参数来指定的，官方为了实现启动后加载，提供了`Attach API`。Attach API 很简单，只有 2
个主要的类，都在 `com.sun.tools.attach` 包里面。着重关注的是`VitualMachine`这个类。
#### VirtualMachine
字面意义表示一个Java 虚拟机，也就是程序需要监控的目标虚拟机，提供了获取系统信息、 `loadAgent`，`Attach` 和 `Detach`
等方法，可以实现的功能可以说非常之强大 。该类允许我们通过给attach方法传入一个jvm的pid(进程id)，远程连接到jvm上
。代理类注入操作只是它众多功能中的一个，通过`loadAgent`方法向jvm注册一个代理程序agent，在该agent的代理程序中会得到一个`Instrumentation`实例。
具体的用法看一下官方给的例子大概就理解了：
    // com.sun.tools.attach.VirtualMachine
    // 下面的示例演示如何使用VirtualMachine:
            // attach to target VM
            VirtualMachine vm = VirtualMachine.attach("2177");  
            // start management agent
            Properties props = new Properties();
            props.put("com.sun.management.jmxremote.port", "5000");
            vm.startManagementAgent(props);
            // detach
            vm.detach();
    // 在此示例中，我们附加到由进程标识符2177标识的Java虚拟机。然后，使用提供的参数在目标进程中启动JMX管理代理。最后，客户端从目标VM分离。
下面列几个这个类提供的方法：
    public abstract class VirtualMachine {
        // 获得当前所有的JVM列表
        public static List list() { ... }
        // 根据pid连接到JVM
        public static VirtualMachine attach(String id) { ... }
        // 断开连接
        public abstract void detach() {}
        // 加载agent，agentmain方法靠的就是这个方法
        public void loadAgent(String agent) { ... }
    }
根据提供的api，可以写出一个`attacher`，代码如下：
    import com.sun.tools.attach.AgentInitializationException;
    import com.sun.tools.attach.AgentLoadException;
    import com.sun.tools.attach.AttachNotSupportedException;
    import com.sun.tools.attach.VirtualMachine;
    import java.io.IOException;
    public class AgentMain {
        public static void main(String[] args) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException {
            String id = args[0];
            String jarName = args[1];
            System.out.println("id ==> " + id);
            System.out.println("jarName ==> " + jarName);
            VirtualMachine virtualMachine = VirtualMachine.attach(id);
            virtualMachine.loadAgent(jarName);
            virtualMachine.detach();
            System.out.println("ends");
        }
    }
过程非常简单：通过pid attach到目标JVM -> 加载agent -> 解除连接。
现在来测试一下agentmain：
    package com.shiroha.demo;
    import java.lang.instrument.Instrumentation;
    public class AgentDemo {
        public static void agentmain(String agentArgs, Instrumentation inst) {
            for (int i = 0; i ... classes) throws UnmodifiableClassException;
        // 判断目标类是否能够修改。
        boolean isModifiableClass(Class theClass);
        // 获取目标已经加载的类。
        @SuppressWarnings("rawtypes")
        Class[] getAllLoadedClasses();
        ......
    }
由于知识点过多和篇幅限制，只先介绍`getAllLoadedClasses`和`isModifiableClasses`。
看名字都知道：
  * `getAllLoadedClasses`：获取所有已经加载的类。
  * `isModifiableClasses`：判断某个类是否能被修改。
修改之前写的agentmain：
    package com.shiroha.demo;
    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.lang.instrument.Instrumentation;
    public class AgentDemo {
        public static void agentmain(String agentArgs, Instrumentation inst) throws IOException {
            Class[] classes = inst.getAllLoadedClasses();
            FileOutputStream fileOutputStream = new FileOutputStream(new File("/tmp/classesInfo"));
            for (Class aClass : classes) {
                String result = "class ==> " + aClass.getName() + "\n\t" + "Modifiable ==> " + (inst.isModifiableClass(aClass) ? "true" : "false") + "\n";
                fileOutputStream.write(result.getBytes());
            }
            fileOutputStream.close();
        }
    }
重新attach到某个JVM，在`/tmp/classesInfo`文件中有如下信息：
    class ==> java.lang.invoke.LambdaForm$MH/0x0000000800f06c40             
        Modifiable ==> false
    class ==> java.lang.invoke.LambdaForm$DMH/0x0000000800f06840                
        Modifiable ==> false
    class ==> java.lang.invoke.LambdaForm$DMH/0x0000000800f07440                
        Modifiable ==> false
    class ==> java.lang.invoke.LambdaForm$DMH/0x0000000800f07040                
        Modifiable ==> false
    class ==> jdk.internal.reflect.GeneratedConstructorAccessor29               
        Modifiable ==> true
    ........
得到了目标JVM上所有已经加载的类，并且知道了这些类能否被修改。
接下来来讲讲如何使用`addTransformer()`和`retransformClasses()`来篡改Class的字节码。
首先看一下这两个方法的声明：
    public interface Instrumentation {
        // 增加一个 Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。
        void addTransformer(ClassFileTransformer transformer);
        // 删除一个类转换器
        boolean removeTransformer(ClassFileTransformer transformer);
        // 在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。
        void retransformClasses(Class... classes) throws UnmodifiableClassException;
        ......
    }
在`addTransformer()`方法中，有一个参数`ClassFileTransformer
transformer`。这个参数将帮助我们完成字节码的修改工作。
## ClassFileTransformer
这是一个接口，它提供了一个`transform`方法：
    public interface ClassFileTransformer {
        default byte[]
        transform(  ClassLoader         loader,
                    String              className,
                    Class            classBeingRedefined,
                    ProtectionDomain    protectionDomain,
                    byte[]              classfileBuffer) {
            ....
        }
    }
这个接口的功能在注释中写道（经过翻译）：
    // 代理使用addTransformer方法注册此接口的实现，以便在加载，重新定义或重新转换类时调用转换器的transform方法。该实现应覆盖此处定义的转换方法之一。在Java虚拟机定义类之前，将调用变压器。
    // 有两种转换器，由Instrumentation.addTransformer（ClassFileTransformer，boolean）的canRetransform参数确定：
    // 与canRetransform一起添加的具有重转换能力的转换器为true
    // 与canRetransform一起添加为false或在Instrumentation.addTransformer（ClassFileTransformer）处添加的无法重新转换的转换器
    // 在addTransformer中注册了转换器后，将为每个新的类定义和每个类重新定义调用该转换器。具有重转换功能的转换器也将在每个类的重转换上被调用。使用ClassLoader.defineClass或其本机等效项来请求新的类定义。使用Instrumentation.redefineClasses或其本机等效项进行类重新定义的请求。使用Instrumentation.retransformClasses或其本机等效项进行类重新转换的请求。在验证或应用类文件字节之前，将在处理请求期间调用转换器。如果有多个转换器，则通过链接转换调用来构成转换。也就是说，一次转换所返回的字节数组成为转换的输入（通过classfileBuffer参数）。
简单概括一下：
  1. 使用`Instrumentation.addTransformer()`来加载一个转换器。
  2. 转换器的返回结果（`transform()`方法的返回值）将成为转换后的字节码。
  3. 对于没有加载的类，会使用`ClassLoader.defineClass()`定义它；对于已经加载的类，会使用`ClassLoader.redefineClasses()`重新定义，并配合`Instrumentation.retransformClasses`进行转换。
现在已经知道了怎样能修改Class的字节码，具体的做法还需要用到另一个工具——`javassist`。
## javassist
### javassist 简介
> Javassist (JAVA programming ASSISTant) 是在 Java 中编辑字节码的类库;它使 Java
> 程序能够在运行时定义一个新类, 并在 JVM 加载时修改类文件。
>
>
> 我们常用到的动态特性主要是反射，在运行时查找对象属性、方法，修改作用域，通过方法名称调用方法等。在线的应用不会频繁使用反射，因为反射的性能开销较大。其实还有一种和反射一样强大的特性，但是开销却很低，它就是Javassit。
>
> 与其他类似的字节码编辑器不同, Javassist 提供了两个级别的 API: 源级别和字节码级别。 如果用户使用源级 API, 他们可以编辑类文件,
> 而不知道 Java 字节码的规格。 整个 API 只用 Java 语言的词汇来设计。 您甚至可以以源文本的形式指定插入的字节码; Javassist
> 在运行中编译它。 另一方面, 字节码级 API 允许用户直接编辑类文件作为其他编辑器。
由于我们的目的只是修改某个类的某个方法，所以下面只介绍这一部分，更多的信息可以参考下面的参考资料。
### ClassPool
这个类是`javassist`的核心组件之一。
来看一下官方对他的介绍：
>
> `ClassPool`是`CtClass`对象的容器。`CtClass`对象必须从该对象获得。如果`get()`在此对象上调用，则它将搜索表示的各种源`ClassPath`
> 以查找类文件，然后创建一个`CtClass`表示该类文件的对象。创建的对象将返回给调用者。
简单来说，这就是个容器，存放的是`CtClass`对象。
获得方法： `ClassPool cp = ClassPool.getDefault();`。通过 `ClassPool.getDefault()` 获取的
`ClassPool` 使用 JVM 的类搜索路径。 **如果程序运行在 JBoss 或者 Tomcat 等 Web 服务器上，ClassPool
可能无法找到用户的类** ，因为 Web 服务器使用多个类加载器作为系统类加载器。在这种情况下， **ClassPool 必须添加额外的类搜索路径** 。
`cp.insertClassPath(new ClassClassPath());`
### CtClass
可以把它理解成加强版的`Class`对象，需要从`ClassPool`中获得。
获得方法：`CtClass cc = cp.get(ClassName)`。
### CtMethod
同理，可以理解成加强版的`Method`对象。
获得方法：`CtMethod m = cc.getDeclaredMethod(MethodName)`。