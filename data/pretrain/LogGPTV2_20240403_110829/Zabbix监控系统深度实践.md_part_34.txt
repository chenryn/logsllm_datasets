PPTV时我们是通过修改代码来解决的。
的方法。在Zabbix 1.8中，“get nextid”是一个非常大的 bug，会造成非常大的性能问题，在
有的方法都会调用zbxdb/db.c中对应的方法。
当数据库出问题时，能够重试SQL，直到数据库恢复。
zbxdbhigh/db.c 中的人口。比如 DBbegin 调用的就是DBtn_operaion（zbx_db_begin），为的就是
19999999999999”这样的条件，就可以限定是在 nodeid为1的Child服务器上执行。
Zabbix监控系统深度实践
（19）DBadd_condition_alloc：生成 SQL的查询条件。
（18）DBget_nextid：Zabbix 每一个对象都有自己的id，DBget_nextid 就是生成这个唯一id
（6）DBbegin：事务开始，调用zbxdb/db.c中的 zbx_db_begin。在 zbxdbhigh/db.c 中几乎所
（20）zbx_host_string：根据 hostid查询 Host。
（7）DBcommit：事务提交。
（5）DBtxn_operation：当数据库出问题时，处理运行的SQL。这个方法会作为所有
（2）DBis_node_id：判断是否为某个Child服务器的id。
（17）DBdyn_escape_like_patterm：调用zbxdb/db.c 相应方法。
（16）DBdyn_escape_string_len：调用 zbxdb/db.c 相应方法。
（15）DBdyn_escape_string：调用zbxdb/db.c 相应方法。
（13)DBselectN:执行 select语句,并且返回最前面的N条数据。对于MySQL即使用“limit"
（12 )DBselect:和 DBselectL_once不同的是,DBselect碰到数据库问题时会在循环中 sleep重试。
（11）DBselect_once：执行 select 语句，只执行一次，即使数据库报错，也只执行一次。
（10）_zbx_DBexecute：执行 SQL。
（9）DBend：事务结束，如果执行成功则调用DBcommit，如果失败则调用DBrllback。
（8）DBrollback：事务回滚。
（4）DBinit：初始化数据库，调用了zbxdb/db.c中的zbx_db_init。
（3）DBconnect：连接数据库，调用了zbxdb/db.c中的连接功能，这里增加了日志的输出。
---
## Page 288
db.c，都是调用这里的封装方法。
都是基于 zbxdb/db.c实现了更加具体的数据库操作。Zabbix的其他代码，不会直接调用 zbxdb/
给出可以使用的例子。
keyo
上面就是zbxdbhigh/db.c中主要的方法。除了db.c外，还有几个文件和db.c的功能是类似的，
（33）get_nodeid_by_id：根据 nodeid 获取源id。
（31）DBget_inventory_field_len：根据 inventory_link 返回 host 的 inventory 的长度。
（30）DBget_inventory_field：根据 inventory_link 返回 host 的 inventory 的名字。
（29）DBsqlid_ins：构建id的 insert 语句。
（28）DBget_unique_hostname_by_sample:当输入参数的 hostname已经在数据库存在的时候,
（27）DBexecute_overflowed_sql：当 SQL长度超过限制时，将 SQL拆开执行。
（26）DBproxy_register_host：针对Proxy 的自动注册 Host。
（25）DBregister_host：自动注册Host，生成Event。
（24）DBsqlid_cmp：生成比对id的语句，形如“=123"。
（23）zbx_user_string：根据 userid 查询user 的 name、surname、aliaso
（22）zbx_host_key_string_by_item：根据 Item 对象返回这个 Item属于的 Host 和 Item 的
（21）zbx_host_key_string：根据 hostid 查询属于这个 Host 的 Items 的 key。
第18章Zabbix和数据库交互详解
·273·
---
## Page 289
·274@
个工作的，内容如下。
会检查数据库版本，如果必要的话，就会自动升级数据库。而Zabbix 前端则会暂时停止工作。
Zabbix 2.2开始，这一步已经集成在Zabbix server启动的进程中。当Zabbix server启动时，进程
数据库提供了 patch 文件。在启动 Zabbix server 之前，先要使用它来更改数据库结构。而从
19.1数据库自动升级
了Zabbix2.2的新功能，本书也会基于这个顺序进行介绍。
在性能方面也有非常大的改进（nextid算法改进）。在Zabbix 的官方博客中，分11个方面介绍
Zabbix2.2新功能介绍
第19章
19.1.1检查数据库版本
Zabbix 在升级之前肯定要判断是否需要升级数据库，在数据库中，dbversion 表就是来做这
之前的Zabbix升级，需要对数据库打 patch。比如在升级Zabbix 2.0的时候，就针对不同
mysql> select
按下来就一起看一下Zabbix server进程在自动升级数据库过程中的步骤。
在笔者使用Zabbix的时候，版本是1.8.8。迈人2.0版本后，从前端到后端都有了很大的改变
mandatory | optional
from dbversion;
---
## Page 290
表的时候，会给一个初始的数据库版本，在升级过程中，则会不断根据操作来更新数据库版本。
直接说明结果。
什么样的逻辑来组织数据。
库方面的变动，Zabbix会在操作后更新“optional”字段，从而告诉Zabbix前端目前应该使用
择是否进行操作。
后小版本兼容性的变动，
Zabbix 2.0。
升级数据库。
存在这一个配置，就会认为当前是在使用Zabbix 2.0。接着就会添加“dbversion”表，并开始
19.1.2
dbversion一共有两个步骤：一个是创建dbversion表，一个是数据库升级。在创建dbversion
我们来分析下 sre/libs/zbxdbupgrade/dbupgrade.c中的代码，这里就不把分析过程写下来了，
“server_check_interval”是Zabbix 2.0独有的一个字段，如果有这个字段，那么肯定就是
static int
首先看看创建dbversion表的过程，代码如下。
Zabbix在大版本中，对于数据库的schema是不允许有大的变动的，只会做一些不影响前
如果没有这张表，那么就会检查config表中有没有“server_check_interval”这一行。如果
const ZBX_TABLE
2020000丨2020000
mandatory和optional字段
{"dbversion"，"",0,
+一
{"optional", "o",
("mandatory", "O", NULL, NULL, O, ZBX_TYPE_INT, ZBX _NOTNULL, O},
+--------
DBcreate_dbversion_table (void)
，比如索引方面的调整等。在以前，对于这些小的变动，由用户自己选
table=
，NULL，NULL，O，ZBX_TYPE_INT,
第19章Zabbix2.2新功能介绍
ZBX_NOTNULL，O)，
275°
---
## Page 291
●276°
？FAIL:SUCCEED;
数据库的2020000还差了很多，因此在dbuupgrade.c中，又会有如下的操作。
Zabbix监控系统深度实践
下面是调用这些patch的地方。
DBPATCH_START（）
这个方法叫做DBpatch_2010197，即代表了这个2011097的操作，像这样的操作还有很多。
#endif
#else
#ifdef HAVE_ORACLE
static int
其中ZBX_FIRST_DB_VERSION为2010000，是最初始的数据库版本号，它距离我们目前
optional）values（%d,%d)",
/*version,duplicates flag,mandatory flag */
return SUCCEED;
return ret;
DBend（ret）;
if（SUCCEED
DBbegin（）;
int
if（zBx_DB_OK > DBexecute（"insert into dbversion（mandatory
：
ret;
ret = FAIL;
ZBX_FIRST_DB_VERSION,
DBpatch_2010197(void)
)== (ret = DBcreate_table (&table)))
(NULL}
ZBX_FIRST_DB_VERSION))
---
## Page 292
继续进行升级操作。
退出并且执行一些修复操作。当Zabbix server重新启动的时候，会根据dbversion表中的数据，
本号了。
19.1.3
从日志里能看到每一个升级数据库的步骤。如果其中任何一步报错，那么 Zabbix server 会
databaseupgrade fully completed
completed100%of databaseupgrade
completed 15% of database upgrade
completed 7% of database upgrade
required mandatory version: 02010021
current database version（mandatory/optional):02010008/02010008
当 Zabbix server在进行数据库升级的时候，在日志中会有下面类似的内容。
最后一步就是版本号为2020000的操作，所以我们在数据库中看到的就是2020000这个版
completed84%of databaseupgrade
completed.
completed
completed
completed
completed
completed
completed
completed
starting automaticdatabaseupgrade
DBPATCH_ADD(2020000,0,1)
DBPATCH_ADD (2010003, 0,
DBPATCH_ADD (2010002,
DBPATCH_ADD(2010001,
数据库升级过程
76%of
69号
61%
53%of
46%of
38%
30%
23%ofdatabaseupgrade
of
of
of
of
databaseupgrade
database upgrade
databaseupgrade
databaseupgrade
databaseupgrade
databaseupgrade
databaseupgrade
0，
0
1）
#
第19章Zabbix2.2新功能介绍
·277
---
## Page 293
278°
“ZABBIX_DB_VERSION”是在 include/defines.inc.php 中定义的，如下。
database.
dbversiondv'));
那么前端界面会显示如图19-1所示的数据。
Zabbix监控系统深度实践
19.1.4
:define（'ZABBIX_DB_VERSION'
代码中可以看到判断数据库版本的逻辑“Yversion['mandatory]!=ZABBIX_DB_VERSION"
public function checkDbVersion(） (
如果前端和数据库中的 mandatory字段数据不符合（optional 忽略）,或者不存在dbversion 表，
比如Zabbix 2.2的前端中，在include/classes/db/DbBackend.php中的代码如下。
return true;
$version['mandatory'],$version['optional'], ZABBIX_DB_VERSION));
if (Sversion['mandatory'] != ZABBIX_DB_VERSION)
sversion
if（!$this->checkDbVersionTable(){
前端提示
Current database version (mandatory/optional): %d/%d. Required
return false;
mandatory version:%d.Contact your system administrator.'
Sthis->setError(_s('The frontend does
return false;
Databaseerror:The frontend does not match Zabbix database.Current databaseversion(mandatory/
Zabbix21.0
DBfetch(DBselect('SELECT dv.mandatory,dv.optional FROM
图19-1
2020000）
notmatchZabbix
---
## Page 294
设置如图19-2所示。
重试难道不是必须的吗？其实对于为什么Zabbix在以前版本是没有重试机制，笔者也存在疑惑
成功，特别是在中国。在Zabbix 2.2中，Web 监控增加了重试机制，大家可能会很奇怪：这个
可以使用宏来定义URL。比如上一段中提到的例子，把URL写成http://(HOST.HOST)就行了。
如果对这些机器有添加或者减少，就要去维护Web监控的URL。
http://HOSTNAME_1到http:/HOSTNAME_10，那么以前就需要在Web监控中添加10个监控。
务于一个应用，服务器名字分别为HOSTNAME_1到HOSTNAME_10，它们对外服务的URL为
Host，这对于维护是非常困难的。比如监控的 URL 和某个hostname 有关，如果有 10台机器服
19.2
19.2.2
19.2.1Web监控Template化
我们在访问网络，或者进行curl检查的时候，经常会因为各种各样的网络问题造成访问不
在Zabbix2.2中，Web监控就像Item一样，是绑定在Host上的，而且在配置监控的时候
图中的“Retries”设置，最多能重试10次。
而且，在Zabbix 2.2之前，一个Web scenario一定要和一个Application关联，现在也不需要了
在 Zabbix2.2版本之前，Web监控都绑定在一个特殊的Host上，即不是我们能看见的某个
Web监控
Web监控重试机制
Scenaio
Authentication
SeveConeOeteCance
Apliation
Steps
Fariables
WEB
p.61(X11Linx686:Uen）P
图19-2
第19章Zabbix2.2新功能介绍
279
---
## Page 295
·280°
所示。
试各个地区对于CDN的访问情况，是很难完成的。
执行的Web监控全部生效，而不能只对某一个Web监控生效。所以针对我们的例子，用来测
务器上设置 http_proxy环境变量：
机房，然后去请求URL，就可以得到这个数据了。
比如，我们要看各个地区对一个URL的访问情况，就可以使用HTTP代理到各个地区的IDO
需要经过某个代理去监控一个URL。Squid或者类似的经常用作CDN的监控就需要这样的功能。
Zabbix监控系统深度实践
19.2.3
为了解决这个问题，Zabbix2.2针对每一个URL监控都可以设置使用的代理，如图19-3
这样做最大的缺点就是这个设置是全局性的，是针对所有ZabbixServer或者ZabbixProxy
http_proxy=http://host_name:3278
在 Zabbix中，Web URL 监控使用 libcurl，即在 Zabbix Server 或者Zabbix Proxy 的 Linux 服
HTTP代理大家应该比较熟悉了，我们常用的“Proxy SwitchSharp”就是这种。在监控中
使用HTTP代理
Update interval (in sec)
Scenano
Authentication
Newapplication
HTTPpronyht/lsermamepassword@praxy.example.comporil
Application
Steps
Enabled 
Variables
AgentLynx2.8.7rel.1
Retries
Host OpenStreetMap
WEB
1
None
120
图19-3
---
## Page 296
变量 sid。使用虽简单，但也有需要注意的地方，具体如下。
就可以了。
看看如何进行类似的操作。
具接口的监控也是需要类似sid的东西，购物的接口需要有具体的某个物品的变量。下面我们
接口调用等。它们的特点就是需要使用页面中的一些内容作为下一步监控的变量，比如聊天工
道每一个步骤是否是正常的。除了上面说的邮箱服务，可能还有聊天工具的接口、购物的多个
需求就束手无策了，因为 sid 是根据 login 的返回值来设定的。
继续访问query和logout 接口。我们的需求就是要监控这三个 API的访问情况。
19.2.4URL监控中使用页面内容作为变量
操作很简单，在Variables 里使用正则表达式来抓取 sid：(sid)=regex:” sid”:”（[0-9a-z] )"
如果没有子组或者没有匹配到任何东西，那么Web scenario这一步将会失败。
（2）如果有多个子组，那么会使用第一个匹配到的子组。
（1）正则表达式至少要有一个子组。
“regex”告诉Zabbix，后面跟着的这串是一个正则表达式，然后将匹配得到的内容赋值个
这样的需求有很多，因为，Web监控的精髓就是模仿用户的一次完整访问链，从而可以知
在Zabbix2.2之前，在URL监控的Variables中只能写一些固定的变量，如果碰到这样的
（4）大小写敏感。
（3）支持跨行匹配。
在第一步的login后，会获取一个JSON一
(3）http:/localhost/logout?sid=XXX
( 2） http://ocalhost/query?sid=XXX