title:gem5-Approxilyzer: An Open-Source Tool for Application-Level Soft
Error Analysis
author:Radha Venkatagiri and
Khalique Ahmed and
Abdulrahman Mahmoud and
Sasa Misailovic and
Darko Marinov and
Christopher W. Fletcher and
Sarita V. Adve
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
gem5-Approxilyzer: An Open-Source Tool for
Application-Level Soft Error Analysis
Radha Venkatagiri*, Khalique Ahmed*, Abdulrahman Mahmoud,
Sasa Misailovic, Darko Marinov, Christopher W. Fletcher, Sarita V. Adve
{venktgr2, kahmed10, amahmou2, misailo, marinov, cwﬂetch, sadve}@illinois.edu
University of Illinois at Urbana-Champaign, USA
Abstract—Modern systems are increasingly susceptible to soft
errors in the ﬁeld and traditional redundancy-based mitigation
techniques are too expensive to protect against all errors. Recent
techniques, such as approximate computing and various low-cost
resilience mechanisms,
inaccuracy in
program output for better energy, performance, and resiliency
overhead. A fundamental requirement for realizing the full
potential of these techniques is a thorough understanding of
how applications react to errors.
intelligently trade off
Approxilyzer is a state-of-the-art tool that enables an accurate,
efﬁcient, and comprehensive analysis of how errors in almost
all dynamic instructions in a program’s execution affect the
quality of the ﬁnal program output. While useful, its adoption
is limited by its implementation using the proprietary Simics
infrastructure and the SPARC ISA.
We present gem5-Approxilyzer, a re-implementation of
Approxilyzer using the open-source gem5 simulator. gem5-
Approxilyzer can be extended to different ISAs, starting with
x86 in this work. We show that gem5-Approxilyzer is both
efﬁcient (up to two orders of magnitude reduction in error
injections over a na¨ıve campaign) and accurate (average 92%
for our experiments) in predicting the program’s output quality
in the presence of errors. We also compare the error proﬁles of
ﬁve workloads under x86 and SPARC to further motivate the
need for a tool like gem5-Approxilyzer.
I. INTRODUCTION
The end of conventional technology scaling has led to two
recent trends that consider incorrect outputs. First, the emergent
ﬁeld of approximate computing [1]–[4] considers a deliberate,
but controlled, relaxation of correctness for better performance
or energy. Second,
to hardware
reliability [5] and the high costs of traditional resiliency
solutions have led to signiﬁcant research in alternative low-cost,
but less-than-perfect, solutions that let some hardware errors
escape as (user-tolerable) output corruptions [6]–[13].
the increasing threat
The common underlying theme of both methods is to
improve system efﬁciency by accommodating controlled
errors (deliberate approximations or unintentional hardware
errors). Such computing paradigms have the potential
to
signiﬁcantly change how we design hardware and software (as
current systems are designed for exact computations). Their
*The ﬁrst two authors led this work with equal contributions.
This material is based upon work supported by NSF Grant No. CCF-1320941,
CCF-1421503, CCF-1703637, and CCF-1725734; and by the Applications
Driving Architectures (ADA) Research Center, a JUMP Center co-sponsored
by SRC and DARPA.
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00033
214
widespread adoption, however, requires an understanding of
how errors in computation affect the outcome of the execution.
In this work, we focus on software-driven solutions and we use
error analysis to mean the process of characterizing the effects
of a given set of errors on the execution and ﬁnal output of
a given piece of software. Error injection – where an error is
deliberately injected in the execution of a given workload to
observe its effect – is a widely used error analysis technique.
A na¨ıve error analysis would perform an error-injection
campaign that injects errors in the executions of all applications
of interest, in every possible execution cycle, using all error
models of interest. Each erroneous execution would be
monitored for anomalous behaviour and any output produced
would be examined for possible corruption. Such a na¨ıve
campaign would provide a highly accurate error analysis but
would be impractical. More practical solutions (both with and
without error injections) have been proposed in the literature [2],
[4], [14]–[24] with varying degrees of accuracy (guarantees
on output quality), generality (applicable to any application),
comprehensiveness (estimating all possible errors in execution),
and automation (placing no undue burden on programmer,
such as code annotations to identify error-tolerant regions).
Our recent tool called Approxilyzer [25] (which builds on our
previous tool called Relyzer [26]) has furthered the state-of-the-
art in error analysis by providing the impact (execution anoma-
lies and output quality) of single-bit transient errors on every
operand register bit in virtually every dynamic instruction in a
program execution. It uses a hybrid technique of program anal-
ysis and error injections to perform this comprehensive analysis
with high accuracy while performing relatively few error injec-
tions. Furthermore, Approxilyzer can analyze general-purpose
applications while placing minimal burden on the programmer.
Approxilyzer’s unique features enable new avenues of
research, but limitations in its current implementation hinder its
usability. The tool currently relies on Wind River Simics [27],
a proprietary full-system simulator. The current implementation
is also designed to handle only applications compiled for the
SPARC ISA. The restrictions imposed from both the simulator
and ISA make a wide adoption of the tool challenging.
The main contribution of this paper is the development
of gem5-Approxilyzer, an open-source1 implementation of
Approxilyzer that enables support for more ISAs, beginning
with x86 in this work. We build our new tool using the open-
1https://github.com/rsimgroup/gem5-Approxilyzer
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:56:27 UTC from IEEE Xplore.  Restrictions apply. 
source gem5 simulator [28] which facilitates (with relative
ease) the future inclusion of more ISAs into the tool. Building
gem5-Approxilyzer required signiﬁcant engineering effort to
support x86 error analysis on gem5. Approxilyzer’s original
implementation for SPARC assumes constant register size and
instruction encoding length, which is not the case for x86.
is
to
the ﬁrst
This work
show Approxilyzer’s
effectiveness/accuracy with a different ISA, namely x86. We
show that our x86 implementation is effective in reducing
the number of error injections required by up to two orders
of magnitude over a na¨ıve campaign and predicts the impact
of errors on the program’s output quality with high accuracy
(>92% on average and up to 99.9% for some applications).
We also compare the comprehensive error proﬁles of our
workloads under the two ISAs — SPARC and x86. We show
that the error proﬁles of the same application can be rather
different under different architectures, which in turn can require
customized resiliency and approximation solutions. This result
further motivates the need for open-source tools such as gem5-
Approxilyzer that can enable such comparisons and aid in build-
ing better solutions and exploring new avenues of research.
II. (GEM5-)APPROXILYZER OVERVIEW
is
an
implementation
gem5-Approxilyzer
of
Approxilyzer [25] using the open-source gem5 simulator.
Hence, its interface, high-level design and techniques are the
same as those described in prior work [25], [26]. This section
provides a brief overview of the objectives, user interface, and
techniques for Approxilyzer and hence, for gem5-Approxilyzer.
A. High-Level Objective
The goal of gem5-Approxilyzer is to characterize the impact
of any single-bit transient error in a program’s execution
with high accuracy. The different ways in which an error can
impact execution are described in Section II-B. We use the
term error site(s) to refer to speciﬁc points in the application’s
execution where an error could be encountered. The error
model we use is single-bit transient errors in architectural
registers. Hence, we use error site to refer to a speciﬁc bit in
a speciﬁc operand register in a speciﬁc dynamic instruction.
gem5-Approxilyzer uses program analysis to systematically
analyze all error sites in the program and carefully picks
a small subset to perform selective error injections. gem5-
Approxilyzer employs error-pruning techniques (Section II-D)
to prune errors that need no detailed study by either predicting
their outcomes or showing them equivalent to other errors.
Thus, it can perform fewer error injections than a na¨ıve
error injection campaign while maintaining high accuracy in
predicting the impact of almost all errors in the program.
B. Inputs and Outputs of gem5-Approxilyzer
Figure 1 shows the inputs and outputs of gem5-Approxilyzer.
gem5-Approxilyzer takes as inputs (1) an application, (2)
inputs to the application, and (3) quality metrics to quantify
the deviation of the erroneous output from the error-free
program output. As an optional input, users can specify a
quality threshold that quantiﬁes the maximum acceptable
degradation in output quality.
215
End-to-end Quality Metric
(domain-specific)
+
+
d
ddddddddddddddddd
mmmmmmmmmmmmm
mmmm
mmmmmm
m
difie
difiefiefiefiefiefieffiefiefiefiefiief ef
dddiifffifii
ddidiffff
dio
dio
dio
dio
dio
didio
did
dio
d
d
o
o
o
ooo
o
oooo
o
m
m
mm
m
m
m
m
m
mm
m
m
m
g r ar a
g r ar a
g r a
g r a
g r aa
g r a
g r a
g r a
g r a
gg r a
g r a
g r aa
g rg r a
gg r ar aa
g r a
g
P rP r o
P r o
P r o
P r or o
P r o
P rP r o
P r oo
P r o
PPPP
n
n
n
n
nnn
n
n
n
n
n
n
n
n
n
n
n
n
n