EDS: Exploitation Detection System 
By Amr Thabet 
Q-CERT 
About The Author 
v Amr Thabet (@Amr_Thabet) 
v Malware Researcher at Q-CERT 
v The Author of: 
§  Security Research and Development 
Framework (SRDF) 
§  Pokas x86 Emulator 
v Wrote a Malware Analysis Paper for 
Stuxnet 
Company  Logo 
Introduction 
v Now the APT Attack become the major 
threat 
v Bypasses all defenses 
v Standards and Policies doesn’t work 
v Bypasses IDS, IPS, Firewalls .. etc 
Company  Logo 
Introduction 
v The Attacker uses: 
§  Client-side attacks and exploits 
§  Spear-phishing attacks 
v Uses undetectable malwares 
v Uses HTTP and HTTPs 
v Attack the servers from the infected 
clients 
Company  Logo 
Introduction 
v The Next Security Technology is the : 
“Exploitation Detection Systems” 
v EDS is only way to stop Attacks from 
behind 
v Stop Attacks from Client-Side 
v Stop successful exploitation for a 0-day 
Company  Logo 
Company  Logo 
Improvements in Defense 
Security 
Technology 
Improvements 
EDS 
IDS 
Firewall 
Antivirus 
Introduction 
v The Talk today is about: 
§  EDS as a concept and next technology 
§  EDS: the new tool that I created 
§  The Development of EDS 
§  SRDF Framework (adv J )  
v I will try to explain everything for who 
don’t know about Exploits … etc 
Company  Logo 
Company  Logo 
Contents 
Development and Future work 
Monitoring System 
Mitigations in Depth 
The Design of EDS 
Motivation and Goals 
Goals 
v Stop Exploitation for new 0-days 
v Works with Memory Corruption 
Exploits 
v Detect Compromised Processes 
v Prevent and/or Alert of Exploited 
Processes 
Company  Logo 
Memory Corruption Vulnerabilities 
v Simply write data in 
places you are not 
intended to write on it 
v Like:  
§  Pointers 
§  Return addresses 
v Change how the 
application behave  
v Check: 
www.corelan.be  
Company  Logo 
Antivirus vs EDS 
v EDS is not signature based 
v EDS doesn’t detect malware 
v EDS main goal to stop exploitation 
v EDS is memory based  
v EDS searches for evidence of Memory 
corruption and indication of 
compromise 
Company  Logo 
Previous Work 
v Compile-Time Solutions: 
§  Takes Long time to affect 
§  Always there’s exceptions 
v Current Run-time Solutions: 
§  Only One Layer of Defense 
§  On-Off Mitigations 
§  No detection of this layer was bypassed or not 
§  A fight between false positives and false 
negatives 
Company  Logo 
What’s New? 
v Co-operative Mitigations 
v Based on Scoring System 
v Prevention and Alerting Infected 
processes 
v Additional layer with Monitoring 
System 
Company  Logo 
Design of EDS 
Company  Logo 
Design of EDS 
v Payload Detection: 
§  Shellcode Detection 
§  ROP Chain Detection 
v Security Mitigations For Stack: 
§  ROP Detection 
v Security Mitigation For Heap: 
§  Heap Overflow 
§  Heap Spray 
§  Use After Free 
Company  Logo 
Design of EDS 
v Scoring System: 
§  Based On Payload Detection and Security 
Mitigations 
§  Scoring Based on Payload, Attack Vector and 
The Process abnormal behavior 
Company  Logo 
Design of EDS 
v Monitoring System: 
§  Searches for Evidence of Exploitation 
§  Detect bypassed Mitigations 
§  Alert the Administrators to Take Action 
§  Looking at the previous EDS reports for this 
process 
Company  Logo 
Mitigation In Depth: Payload 
v Increase the score of suspiciously 
v Detect suspicious inputs and tries for 
exploitation. 
v Divided Into: 
§  Shellcode Detection 
§  ROP Chain Detection 
Company  Logo 
What’s Shellcode? 
v It is simply a portable native code 
v Sent as a bunch of bytes in a user input 
v Do a specific action when the 
processor executes it 
v The attacker modify the return address 
to point to it. 
Company  Logo 
What’s Shellcode? 
v It gets its place in memory 
v Then it gets the kernel32  
DLL place in memory 
v Get windows functions  
(APIs) from it 
v And then … ATTACK 
v Check: 
v http://www.codeproject.com/Articles/
325776/The-Art-of-Win32-Shellcoding 
Company  Logo 
What’s Shellcode 
v Some shellcodes shouldn’t have null 
bytes (sent as string) 
v Some are encrypted 
v There’s a loop to decrypt it 
v Some are in ascii 
v Some doesn’t include loop but many 
pushes (to be in ascii) 
Company  Logo 
Shellcode Detection 
v Goals: 
§  Very fast shellcode detector 
§  Very hard to bypass … min false negative 
§  Low false positive 
Company  Logo 
Shellcode Detector 
v Static Shellcode Detector 
v Divided into 3 phases: 
§  Indication of Possible Shellcode (GetPC … 
etc) 
§  Filter by invalid or privileged Instructions 
§  Filter by Flow Analysis 
Company  Logo 
Indication of Possible Shellcode 
v Search for Loops  
§  Jump to previous 
§  Call to previous (Call Delta) 
§  Loop Instruction  
Company  Logo 
Indication of Possible Shellcode 
v High rate of pushes end with flow 
redirection 
v Search for fstenv followed with at least 
5 valid instructions after it 
Company  Logo 
Skip Invalid Instructions 
v We skip all invalid instructions. 
v We skip all privileged instructions like: 
IN, OUT, INT, INTO, IRETD, WAIT, 
LOCK, HLT … etc 
v  Skip Instructions with unknown 
Behavior like: 
JP, AAM, AAD, AAA, DAA, SALC, XLAT, SAHF, 
LAHF, LES, DES, 
Company  Logo 
Flow Analysis 
v Check on ESP Modifications through 
loops 
§  If there’s many pushes with no pops in loops 
v Check on Compares and Jccs in th 
code  
§  Search for Jcc without compare or similar 
before it. 
v Check on % of Nulls and Null-Free 
Company  Logo 
Shellcode Statistics 
Company  Logo 
v Scan per page 
v False Positives in range 4% Infected 
Pages 
v All of these samples are legitimate  
File	
  Type	
Total	
  No	
  of	
  Pages	
Infected	
  Pages	
Presentage	
Pcap	
381	
40	
2%	
Pcap	
11120	
543	
4%	
Wmv	
104444	
4463	
4%	
Shellcode Statistics 
v It detects all Metasploit Shellcodes 
v Detects all working shellcodes in 
Shellstorm (win32 – ASLR Bypass) 
v Detected Encoded Shellcodes by 
metasploit Encoders 
v Manual Evasion is possible 
Company  Logo 
What’s ROP Chain 
v Very small code in a 
legitimate dll 
v End with “ret” instruction 
v Attackers uses a series  
of it  
v All of them together = a 
working shellcode  
v Used to bypass DEP 
Company  Logo 
ROP Chain Detection 
v It’s a very simple ROP Detection 
v Search for Return with these criteria: 
§  the address is inside an executable page in a 
module 
§  the return address not following a call 
§  Followed by ret or equivalent instructions in 
the next 16 bytes 
§  Not Following series of (0xCC) 
Company  Logo 
Stack Mitigations 
v We detect ROP Attacks 
v The Mitigation is named “Wrong 
Module Switching” 
v We detect SEH Overwrite 
v We scan for Leaked ROP chains (which 
not overwritten) 
Company  Logo 
ROP Attack Vector 
v ROP are used to bypass DEP 
v They mostly ret to VirtualProtect API 
v Make the shellcode’s memory 
executable 
v Or calls to another windows APIs  