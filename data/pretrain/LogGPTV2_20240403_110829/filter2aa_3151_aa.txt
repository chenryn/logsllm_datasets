# Exploitation Detection System (EDS)
## By Amr Thabet, Q-CERT

### About the Author
- **Amr Thabet** (@Amr_Thabet)
  - Malware Researcher at Q-CERT
  - Author of:
    - Security Research and Development Framework (SRDF)
    - Pokas x86 Emulator
  - Wrote a malware analysis paper on Stuxnet

### Introduction
Advanced Persistent Threats (APTs) have become a major security concern. These attacks often bypass traditional defenses such as Intrusion Detection Systems (IDS), Intrusion Prevention Systems (IPS), and firewalls. Standard security policies are often ineffective against APTs.

#### Attack Vectors
- **Client-side attacks and exploits**
- **Spear-phishing attacks**
- **Undetectable malware**
- **HTTP and HTTPS-based attacks**
- **Server attacks from infected clients**

### The Next Generation in Security: Exploitation Detection Systems (EDS)
EDS is a new technology designed to address these challenges by:
- Detecting and stopping client-side attacks
- Preventing the exploitation of zero-day vulnerabilities
- Identifying and mitigating memory corruption exploits

### Improvements in Defense
| Security Technology | Improvements |
|---------------------|--------------|
| EDS                 | Stops client-side attacks, detects zero-day exploits, memory-based detection |
| IDS                 | Network traffic monitoring, signature-based detection |
| Firewall            | Network perimeter defense, rule-based filtering |
| Antivirus           | File-based detection, signature and heuristic scanning |

### Overview of the Talk
Today's discussion will cover:
- **EDS as a concept and next-generation technology**
- **Introduction to the EDS tool I developed**
- **The development process of EDS**
- **SRDF Framework (Advanced Version)**
- **An explanation for those unfamiliar with exploits and related concepts**

### Contents
1. Motivation and Goals
2. Memory Corruption Vulnerabilities
3. Antivirus vs. EDS
4. Previous Work
5. What’s New?
6. Design of EDS
7. Mitigation in Depth: Payload
8. Shellcode and ROP Chain Detection
9. Stack and Heap Mitigations
10. Monitoring System
11. Future Work

### Motivation and Goals
- **Stop the exploitation of new zero-day vulnerabilities**
- **Detect and mitigate memory corruption exploits**
- **Identify and alert on compromised processes**
- **Prevent or alert on exploited processes**

### Memory Corruption Vulnerabilities
Memory corruption vulnerabilities occur when an attacker writes data to unauthorized memory locations, such as pointers or return addresses, altering the application's behavior. For more details, visit [www.corelan.be](http://www.corelan.be).

### Antivirus vs. EDS
- **EDS is not signature-based and does not detect malware directly.**
- **EDS focuses on stopping exploitation through memory-based detection.**
- **EDS searches for evidence of memory corruption and indications of compromise.**

### Previous Work
- **Compile-Time Solutions:**
  - Takes a long time to implement
  - Often has exceptions
- **Current Run-time Solutions:**
  - Provide only one layer of defense
  - Offer on-off mitigations
  - Lack detection capabilities to determine if a layer has been bypassed
  - Struggle with balancing false positives and false negatives

### What’s New?
- **Co-operative Mitigations:**
  - Based on a scoring system
  - Provides prevention and alerting for infected processes
  - Adds an additional layer with a monitoring system

### Design of EDS
#### Payload Detection
- **Shellcode Detection**
- **ROP Chain Detection**

#### Security Mitigations
- **Stack:**
  - ROP Detection
- **Heap:**
  - Heap Overflow
  - Heap Spray
  - Use After Free

#### Scoring System
- **Based on payload detection and security mitigations**
- **Scores based on payload, attack vector, and process abnormal behavior**

#### Monitoring System
- **Searches for evidence of exploitation**
- **Detects bypassed mitigations**
- **Alerts administrators to take action**
- **Reviews previous EDS reports for the process**

### Mitigation in Depth: Payload
- **Increase the score for suspicious activities**
- **Detect suspicious inputs and attempts at exploitation**
- **Divided into:**
  - **Shellcode Detection**
  - **ROP Chain Detection**

### What is Shellcode?
- **Portable native code sent as a string of bytes in user input**
- **Executes a specific action when the processor runs it**
- **Attacker modifies the return address to point to the shellcode**
- **For more details, visit [The Art of Win32 Shellcoding](http://www.codeproject.com/Articles/325776/The-Art-of-Win32-Shellcoding)**

### Shellcode Characteristics
- **Some shellcodes avoid null bytes (sent as strings)**
- **Some are encrypted and include a decryption loop**
- **Some are in ASCII format**
- **Some do not include loops but use many push instructions to be in ASCII**

### Shellcode Detection
- **Goals:**
  - Fast detection
  - Hard to bypass with minimal false negatives
  - Low false positives

- **Static Shellcode Detector:**
  - **Phase 1: Indication of Possible Shellcode (e.g., GetPC, loops)**
  - **Phase 2: Filter by invalid or privileged instructions**
  - **Phase 3: Filter by flow analysis**

#### Indication of Possible Shellcode
- **Search for loops, jumps, and call deltas**
- **High rate of pushes followed by flow redirection**
- **Search for `fstenv` followed by valid instructions**

#### Skip Invalid Instructions
- **Skip all invalid and privileged instructions (e.g., IN, OUT, INT, INTO, IRETD, WAIT, LOCK, HLT)**
- **Skip instructions with unknown behavior (e.g., JP, AAM, AAD, AAA, DAA, SALC, XLAT, SAHF, LAHF, LES, DES)**

#### Flow Analysis
- **Check for ESP modifications in loops (e.g., many pushes with no pops)**
- **Check for compares and conditional jumps (Jccs) without preceding comparisons**
- **Check the percentage of nulls and null-free sequences**

### Shellcode Statistics
- **Scan per page**
- **False positives range from 2% to 4% in infected pages**
- **Detects all Metasploit shellcodes and working shellcodes in Shellstorm (win32 – ASLR Bypass)**
- **Detects encoded shellcodes by Metasploit encoders**
- **Manual evasion is possible**

### What is a ROP Chain?
- **Small code snippets in legitimate DLLs ending with a `ret` instruction**
- **Attackers use a series of these snippets to create a working shellcode**
- **Used to bypass Data Execution Prevention (DEP)**

### ROP Chain Detection
- **Simple ROP detection:**
  - **Address inside an executable page in a module**
  - **Return address not following a call**
  - **Followed by `ret` or equivalent instructions in the next 16 bytes**
  - **Not following a series of `0xCC` (int3) instructions**

### Stack Mitigations
- **Detect ROP attacks using "Wrong Module Switching"**
- **Detect Structured Exception Handler (SEH) overwrites**
- **Scan for leaked ROP chains that have not been overwritten**

### ROP Attack Vector
- **ROP chains used to bypass DEP**
- **Often return to `VirtualProtect` API to make shellcode memory executable**
- **Or call other Windows APIs to achieve the desired effect**

This document provides a comprehensive overview of the Exploitation Detection System (EDS) and its role in modern cybersecurity.