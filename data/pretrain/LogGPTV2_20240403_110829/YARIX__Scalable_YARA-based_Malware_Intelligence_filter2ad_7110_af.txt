以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

1. **Automated Generation of Code-based YARA Rules.**
   * 《网络犯罪与数字调查杂志》, 2019.
   * DOI: 10.18464/CYBIN.V5I1.24.

2. **Binlin Cheng, Jiang Ming, Jianmin Fu, Guojun Peng, Ting Chen, Xiaosong Zhang, and Jean-Yves Marion.**
   * 《迈向大规模Windows恶意软件分析：通用二进制解包与性能提升》
   * 《计算机与通信安全会议论文集》, 2018.
   * DOI: 10.1145/3243734.3243771.

3. **CrowdStrike.**
   * 《威胁行为者介绍：APT和对手群体列表》, 2019.
   * 最后访问日期：2020年6月19日.
   * URL: <https://www.crowdstrike.com/blog/meet-the-adversaries/>

4. **Doug Cutting and Jan Pedersen.**
   * 《动态倒排索引维护的优化》
   * 《国际信息检索研究与发展会议论文集》, 1990.
   * DOI: 10.1145/96749.98245.

5. **Omid E. David and Nathan S. Netanyahu.**
   * 《DeepSign：基于深度学习的自动恶意软件签名生成与分类》
   * 《国际神经网络联合会议》, 2015.
   * DOI: 10.1109/IJCNN.2015.7280815.

6. **Jeffrey Dean.**
   * 《构建大规模信息检索系统的挑战：特邀演讲》
   * 《国际网络搜索与数据挖掘会议论文集》, 2009.
   * DOI: 10.1145/1498759.1498761.

7. **Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke Lee.**
   * 《Ether：通过硬件虚拟化扩展进行恶意软件分析》
   * 《计算机与通信安全会议论文集》, 2008.
   * DOI: 10.1145/1455770.1455779.

8. **FireEye.**
   * 《高级持续性威胁组织》, 2020.
   * 最后访问日期：2020年6月19日.
   * URL: <https://www.fireeye.com/current-threats/apt-groups.html>

9. **Jaromír Hořejší.**
   * 《Retefe银行木马的演变》, 2016.
   * 最后访问日期：2020年6月19日.
   * URL: <https://blog.avast.com/the-evolution-of-the-retefe-banking-trojan>

10. **Xin Hu, Tzi-cker Chiueh, and Kang G. Shin.**
    * 《使用函数调用图的大规模恶意软件索引》
    * 《计算机与通信安全会议论文集》, 2009.
    * DOI: 10.1145/1653662.1653736.

11. **Xin Hu, Kang G. Shin, Sandeep Bhatkar, and Kent Griffin.**
    * 《MutantX-S：基于静态特征的可扩展恶意软件聚类》
    * 《USENIX年度技术会议论文集》, 2013.

12. **Jiyong Jang, David Brumley, and Shobha Venkataraman.**
    * 《BitShred：用于可扩展分类和语义分析的恶意软件特征哈希》
    * 《计算机与通信安全会议论文集》, 2011.
    * DOI: 10.1145/2046707.2046742.

13. **Wesley Jin, Charles Hines, Cory Cohen, and Priya Narasimhan.**
    * 《用于二进制文件的可扩展搜索索引》
    * 《国际恶意和不需要的软件会议论文集》, 2012.
    * DOI: 10.1109/MALWARE.2012.6461014.

14. **Kaspersky.**
    * 《针对性网络攻击日志》, 2018.
    * 最后访问日期：2020年6月19日.
    * URL: <https://apt.securelist.com/#!/threats/>

15. **Kaspersky.**
    * 《Klara》, 2020.
    * URL: <https://github.com/KasperskyLab/klara>

16. **Amin Kharaz, Sajjad Arshad, Collin Mulliner, William Robertson, and Engin Kirda.**
    * 《UNVEIL：一种大规模自动化检测勒索软件的方法》
    * 《USENIX安全研讨会论文集》, 2016.

17. **Dhilung Kirat, Lakshmanan Nataraj, Giovanni Vigna, and B. S. Manjunath.**
    * 《SigMal：基于静态信号处理的恶意软件分类》
    * 《年度计算机安全应用会议论文集》, 2013.
    * DOI: 10.1145/2523649.2523682.

18. **Dhilung Kirat and Giovanni Vigna.**
    * 《MalGene：自动提取恶意软件分析规避签名》
    * 《计算机与通信安全会议论文集》, 2015.
    * DOI: 10.1145/2810103.2813642.

19. **Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pablo G. Bringas.**
    * 《SoK：深度打包器检查：运行时打包器复杂性的纵向研究》
    * 《安全与隐私研讨会论文集》, 2015.
    * DOI: 10.1109/SP.2015.46.

20. **Jianguo Wang, Chunbin Lin, Yannis Papakonstantinou, and Steven Swanson.**
    * 《位图压缩与倒排列表压缩的实验研究》
    * 《国际数据管理会议论文集》, 2017.
    * DOI: 10.1145/3035918.3064007.

21. **Carsten Willems, Thorsten Holz, and Felix Freiling.**
    * 《使用CWSandbox进行自动动态恶意软件分析》
    * 《IEEE安全与隐私杂志》, 2007.
    * DOI: 10.1109/MSP.2007.45.

22. **Hao Yan, Shuai Ding, and Torsten Suel.**
    * 《倒排索引压缩与查询处理中的文档顺序优化》
    * 《国际万维网会议论文集》, 2009.
    * DOI: 10.1145/1526709.1526764.

23. **YaraRules.**
    * 《YaraRules项目》, 2018.
    * 最后访问日期：2020年6月19日.
    * URL: <https://yararules.com>

24. **Lun-Pin Yuan, Wenjun Hu, Ting Yu, Peng Liu, and Sencun Zhu.**
    * 《针对Android零日恶意软件的大规模狩猎》
    * 《国际攻击、入侵与防御研讨会论文集》, 2019.

25. **Ziyun Zhu and Tudor Dumitras.**
    * 《FeatureSmith：通过挖掘安全文献自动工程化特征以进行恶意软件检测》
    * 《计算机与通信安全会议论文集》, 2016.
    * DOI: 10.1145/2976749.2978304.

26. **Marcin Zukowski, Sandor Heman, Niels Nes, and Peter Boncz.**
    * 《超标量RAM-CPU缓存压缩》
    * 《国际数据工程会议论文集》, 2006.
    * DOI: 10.1109/ICDE.2006.150.

27. **Lastline.**
    * 《PlugX恶意软件分析》, 2013.
    * 最后访问日期：2020年6月19日.
    * URL: <https://www.lastline.com/labsblog/an-analysis-of-plugx-malware/>

28. **D. Lemire and L. Boytsov.**
    * 《通过向量化每秒解码数十亿整数》
    * 《软件：实践与经验》, 45(1):1–29, 2013年5月.
    * DOI: 10.1002/spe.2203.

29. **Malpedia.**
    * 《SnatchLoader》, 2019.
    * 最后访问日期：2020年6月19日.
    * URL: <https://malpedia.caad.fkie.fraunhofer.de/details/win.snatch_loader>

30. **Malpedia.**
    * 《SmokeLoader》, 2020.
    * 最后访问日期：2020年6月19日.
    * URL: <https://malpedia.caad.fkie.fraunhofer.de/details/win.smokeloader>

31. **Andrei Mihalca and Ciprian Oprișa.**
    * 《在恶意软件集合中进行全面内容搜索》
    * 《IOSec 2018》, 2019.
    * DOI: 10.1007/978-3-030-12085-6_12.

32. **Andrei Mihalca, Ciprian Oprisa, and Rodica Potolea.**
    * 《在大规模集合中搜索恶意代码》
    * 《国际自动化、质量与测试机器人会议论文集》, 2020.
    * DOI: 10.1109/AQTR49680.2020.9129948.

33. **Roberto Perdisci, Davide Ariu, and Giorgio Giacinto.**
    * 《基于HTTP的恶意软件细粒度行为聚类》
    * 《计算机网络》, 2013.
    * DOI: 10.1016/j.comnet.2012.06.022.

34. **Daniel Plohmann, Martin Clauß, Steffen Enders, and Elmar Padilla.**
    * 《Malpedia：协作努力整理恶意软件全景》
    * 《网络犯罪与数字调查杂志》, 2017.
    * DOI: 10.18464/CYBIN.V3I1.17.

35. **Christian Rossow, Christian J. Dietrich, Chris Grier, Christian Kreibich, Vern Paxson, Norbert Pohlmann, Herbert Bos, and Maarten van Steen.**
    * 《设计恶意软件实验的谨慎做法：现状与展望》
    * 《安全与隐私研讨会论文集》, 2012.
    * DOI: 10.1109/SP.2012.14.

36. **Shanhu Shang, Ning Zheng, Jian Xu, Ming Xu, and Haiping Zhang.**
    * 《通过函数调用图相似性检测恶意软件变种》
    * 《国际恶意和不需要的软件会议论文集》, 2010.
    * DOI: 10.1109/MALWARE.2010.5665787.

---

**附录A：更大数据集的外推**

给定一个包含N个文件ID中的k个文件ID的发布列表和P个组，该发布列表中预期占用的组数由以下公式给出：
\[ \left(1 - \left(1 - \frac{1}{P}\right)^k\right) P \]

请注意，公式（4）略有不准确，因为它没有考虑实际分组过程中使用的不同质数P。然而，这个问题是次要的，因为最小和最大组模数之间的差异相对于P来说变得可以忽略不计。

为了考虑增量编码，我们估计成对差值的分布来近似预期的编码成本。例如，如果我们使用7位编码，我们可以用8位编码1到\(2^7 - 1 = 127\)（包括）之间的差值，用16位编码\(2^7\)到\(2^{2 \cdot 7} - 1\)之间的差值，依此类推。我们需要知道这些范围内的预期差值数量。形式上，这可以通过以下方式解决：设一个包含N个样本的索引的发布列表包含l个文件ID，即：
\[ 0 \leq f_0 < f_1 < \ldots < f_{l-1} < N \]
进一步设 \(\delta_i = f_{i+1} - f_i\) 对于 \(0 \leq i < l - 1\) 是将要编码的成对差值。这些成对差值的分布，即某个固定差值 \(\delta \in [1, N - 1]\) 的概率为：
\[ \text{Pr}(\delta_i = \delta) = \frac{\binom{N - \delta}{l - 1}}{\binom{N}{l}} \]

由于公式（5）与i无关，并且有 \(l - 1\) 个成对差值，因此 \(\delta_i = \delta\) 的预期数量为 \((l - 1) \text{Pr}(\delta_i = \delta)\)。这可以用来计算1到某个上限k之间的预期差值数量：
\[ R(l, k) = \sum_{\delta=1}^{k} (l - 1) \text{Pr}(\delta_i = \delta) \]
\[ = (l - 1) \left(1 - \frac{(N - k)! (N - l)!}{N! (N - k - l)!}\right) \]
\[ = (l - 1) \left(1 - \prod_{i=1}^{a} \frac{N - (a + b - i)}{N - (a - i)}\right) \]
其中 \(a = \min(k, l)\) 和 \(b = \max(k, l)\)。现在可以使用 \(R(l, k)\) 来估算成本。例如，可以使用8位编码 \(R(l, 2^7 - 1)\) 个成对差值，使用16位编码 \(R(l, 2^{2 \cdot 7} - 1) - R(l, 2^7 - 1)\) 个成对差值。

**图8：不同组数的磁盘足迹（N = 2^32 个索引样本，∅ = 未压缩，G = 分组，δ = 增量编码，G + δ = 分组 + 增量编码）。越低越好。**

最后，我们将公式（8）和公式（4）应用于预期的发布列表大小分布。为此，我们外推了图10所示的累积分布函数。也就是说，如果有y个大小为x的发布列表，则对于kN个样本，将有y个大小为kx的发布列表。我们通过将其应用于10^6个样本来估计32M个样本，验证了这种外推是合理的。

这种外推的结果如图8和图9所示，分别是图6和图7的对应图，外推到N = 2^32个样本。组数和分组阈值也相应地进行了外推。如前所述，未压缩足迹的相对开销没有变化。增量编码足迹也没有变化。单独分组的足迹大得多，例如，对于2^26个组，其足迹为158.36%，而图6中2^16个组的足迹为92.8%。这是因为更大的组数意味着更宽的组ID，即存储2x个组需要x位。有趣的是，通过应用增量编码，磁盘足迹减少了约9%。对于选择2^26个组的情况，分组加增量编码的相对磁盘足迹为87.65%。同样，图9显示了不同τ值下的足迹。选择τ = 10^7时，2^26个组的足迹为93.71%。

**图9：不同组数和不同分组阈值的磁盘足迹（N = 2^32 个索引样本）。所有实验中均使用了G + δ + τ。越低越好。**

**图10：N = 32M 个索引样本的发布列表条目数量的累积分布函数摘录。**

---

希望这些修改能帮助你更好地表达你的内容。如果有任何进一步的需求，请告诉我！