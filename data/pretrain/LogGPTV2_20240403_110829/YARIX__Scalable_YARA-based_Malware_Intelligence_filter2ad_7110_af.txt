Automated Generation of Code-based YARA Rules. The
Journal on Cybercrime & Digital Investigations, 2019.
doi:10.18464/CYBIN.V5I1.24.
[9] Binlin Cheng, Jiang Ming, Jianmin Fu, Guojun Peng,
Ting Chen, Xiaosong Zhang, and Jean-Yves Marion.
Towards Paving the Way for Large-Scale Windows Mal-
ware Analysis: Generic Binary Unpacking with Orders-
of-Magnitude Performance Boost. In Proceedings of the
Conference on Computer and Communications Security
(CCS), 2018. doi:10.1145/3243734.3243771.
[10] CrowdStrike. Meet The Threat Actors: List of APTs
and Adversary Groups, 2019. Last accessed at: June 19,
2020. URL: https://www.crowdstrike.com/blog/
meet-the-adversaries/.
[11] Doug Cutting and Jan Pedersen. Optimization for Dy-
namic Inverted Index Maintenance. In Proceedings of
the Annual International Conference on Research and
Development in Information Retrieval (SIGIR), 1990.
doi:10.1145/96749.98245.
[12] Omid E. David and Nathan S. Netanyahu. Deep-
Sign: Deep learning for automatic malware signature
In International Joint
generation and classiﬁcation.
Conference on Neural Networks (IJCNN), 2015. doi:
10.1109/ijcnn.2015.7280815.
[13] Jeffrey Dean. Challenges in Building Large-scale In-
formation Retrieval Systems: Invited Talk. In Proceed-
ings of the International Conference on Web Search and
Data Mining (WDSM), 2009. doi:10.1145/1498759.
1498761.
[14] Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke
Lee. Ether: Malware Analysis via Hardware Virtualiza-
tion Extensions. In Proceedings of the Conference on
Computer and Communications Security (CCS), 2008.
doi:10.1145/1455770.1455779.
[15] FireEye. Advanced Persistent Threat Groups, 2020.
Last accessed at: June 19, 2020. URL: https://www.
fireeye.com/current-threats/apt-groups.html.
[16] Jaromír Hoˇrejší.
The evolution of the Retefe
June
banking Trojan, 2016.
19, 2020.
URL:
https://blog.avast.com/
the-evolution-of-the-retefe-banking-trojan.
Last accessed at:
[17] Xin Hu, Tzi cker Chiueh, and Kang G. Shin. Large-
Scale Malware Indexing Using Function-Call Graphs.
In Proceedings of the Conference on Computer and
Communications Security (CCS), 2009. doi:10.1145/
1653662.1653736.
[18] Xin Hu, Kang G. Shin, Sandeep Bhatkar, and Kent Grif-
ﬁn. MutantX-S: Scalable Malware Clustering Based on
Static Features. In Proceedings of the USENIX Annual
Technical Conference (USENIX ATC), 2013.
[19] Jiyong Jang, David Brumley, and Shobha Venkataraman.
BitShred: Feature Hashing Malware for Scalable Triage
and Semantic Analysis. In Proceedings of the Confer-
ence on Computer and Communications Security (CCS),
2011. doi:10.1145/2046707.2046742.
[20] Wesley Jin, Charles Hines, Cory Cohen, and Priya
Narasimhan. A Scalable Search Index for Binary Files.
In Proceedings of the International Conference on Ma-
licious and Unwanted Software (MALWARE), 2012.
doi:10.1109/malware.2012.6461014.
[21] Kaspersky. Targeted cyberattacks logbook, 2018. Last
accessed at: June 19, 2020. URL: https://apt.
securelist.com/#!/threats/.
[22] Kaspersky. Klara, 2020. URL: https://github.com/
KasperskyLab/klara.
[23] Amin Kharaz, Sajjad Arshad, Collin Mulliner, William
Robertson, and Engin Kirda. UNVEIL: A Large-
Scale, Automated Approach to Detecting Ransomware.
In Proceedings of the USENIX Security Symposium
(USENIX Security), 2016.
[24] Dhilung Kirat, Lakshmanan Nataraj, Giovanni Vigna,
and B. S. Manjunath. SigMal: A Static Signal Process-
ing Based Malware Triage. In Proceedings of the Annual
Computer Security Applications Conference (ACSAC),
2013. doi:10.1145/2523649.2523682.
USENIX Association
30th USENIX Security Symposium    3555
[25] Dhilung Kirat and Giovanni Vigna. MalGene: Auto-
matic Extraction of Malware Analysis Evasion Sig-
In Proceedings of the Conference on Com-
nature.
puter and Communications Security (CCS), 2015. doi:
10.1145/2810103.2813642.
[36] Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos,
and Pablo G. Bringas. SoK: Deep Packer Inspection:
A Longitudinal Study of the Complexity of Run-Time
Packers. In Proceedings of the Symposium on Security
and Privacy (S&P), 2015. doi:10.1109/sp.2015.46.
[37] Jianguo Wang, Chunbin Lin, Yannis Papakonstantinou,
and Steven Swanson. An Experimental Study of Bitmap
Compression vs. Inverted List Compression. In Proceed-
ings of the International Conference on Management
of Data (SIGMOD), 2017.
doi:10.1145/3035918.
3064007.
[38] Carsten Willems, Thorsten Holz, and Felix Freiling. To-
ward Automated Dynamic Malware Analysis Using
IEEE Security and Privacy Magazine,
CWSandbox.
2007. doi:10.1109/msp.2007.45.
[39] Hao Yan, Shuai Ding, and Torsten Suel. Inverted In-
dex Compression and Query Processing with Optimized
In Proceedings of the Interna-
Document Ordering.
tional Conference on World Wide Web (WWW), 2009.
doi:10.1145/1526709.1526764.
[40] YaraRules. YaraRules Project, 2018. Last accessed at:
June 19, 2020. URL: https://yararules.com.
[41] Lun-Pin Yuan, Wenjun Hu, Ting Yu, Peng Liu, and Sen-
cun Zhu. Towards Large-Scale Hunting for Android
Negative-Day Malware. In Proceedings of the Interna-
tional Symposium on Research in Attacks, Intrusions,
and Defenses (RAID), 2019.
[42] Ziyun Zhu and Tudor Dumitras. FeatureSmith: Auto-
matically Engineering Features for Malware Detection
by Mining the Security Literature. In Proceedings of the
Conference on Computer and Communications Security
(CCS), 2016. doi:10.1145/2976749.2978304.
[43] Marcin Zukowski, Sandor Heman, Niels Nes, and Pe-
ter Boncz. Super-Scalar RAM-CPU Cache Compres-
sion. In International Conference on Data Engineering
(ICDE), 2006. doi:10.1109/icde.2006.150.
[26] Lastline.
An Analysis of PlugX Malware,
Last
19, 2020.
https://www.lastline.com/labsblog/
2013.
URL:
an-analysis-of-plugx-malware/.
accessed at:
June
[27] D. Lemire and L. Boytsov. Decoding billions of integers
per second through vectorization. Software: Practice
and Experience, 45(1):1–29, may 2013. doi:10.1002/
spe.2203.
[28] Malpedia. SnatchLoader, 2019. Last accessed at:
June 19, 2020. URL: https://malpedia.caad.fkie.
fraunhofer.de/details/win.snatch_loader.
[29] Malpedia. SmokeLoader, 2020. Last accessed at:
June 19, 2020. URL: https://malpedia.caad.fkie.
fraunhofer.de/details/win.smokeloader.
[30] Andrei Mihalca and Ciprian Opri¸sa. Full Content Search
in Malware Collections. In IOSec 2018, 2019. doi:
10.1007/978-3-030-12085-6_12.
[31] Andrei Mihalca, Ciprian Oprisa, and Rodica Potolea.
Hunting for Malware Code in Massive Collections.
In International Conference on Automation, Quality
and Testing, Robotics (AQTR), 2020. doi:10.1109/
aqtr49680.2020.9129948.
[32] Roberto Perdisci, Davide Ariu, and Giorgio Giacinto.
Scalable ﬁne-grained behavioral clustering of HTTP-
based malware. Computer Networks, 2013. doi:10.
1016/j.comnet.2012.06.022.
[33] Daniel Plohmann, Martin Clauß, Steffen Enders, and
Elmar Padilla. Malpedia: A Collaborative Effort to
Inventorize the Malware Landscape. The Journal on
Cybercrime & Digital Investigations, 2017. doi:10.
18464/CYBIN.V3I1.17.
[34] Christian Rossow, Christian J. Dietrich, Chris Grier,
Christian Kreibich, Vern Paxson, Norbert Pohlmann,
Herbert Bos, and Maarten van Steen. Prudent Practices
for Designing Malware Experiments: Status Quo and
Outlook. In Proceedings of the Symposium on Security
and Privacy (S&P), 2012. doi:10.1109/sp.2012.14.
[35] Shanhu Shang, Ning Zheng, Jian Xu, Ming Xu, and
Haiping Zhang. Detecting Malware Variants via
Function-call Graph Similarity. In Proceedings of the
International Conference on Malicious and Unwanted
Software (MALWARE), 2010. doi:10.1109/malware.
2010.5665787.
3556    30th USENIX Security Symposium
USENIX Association
A Extrapolation to Larger Datasets
Given a posting list of k out of N ﬁle IDs and P number of
groups, the expected number of occupied groups within that
posting list is given by:
(cid:19)k
(cid:18)
1− 1
P
P− P
(4)
Note that Equation (4) is slightly inaccurate as it does not
account for the different prime numbers P that are actually
used during grouping. This problem is minor, however, as the
difference between the smallest and the largest group modulus
becomes negligibly small relative to P.
Then, to account for delta encoding, we estimate the distri-
bution of the pairwise differences to approximate the expected
encoding costs. For example, if we use 7-bit encoding, we
can encode the differences between 1 and 27 − 1 = 127 (in-
clusive) with 8 bits, the differences between 27 and 22·7 − 1
with 16 bits, and so on. We only need to know how many
differences we expect in these ranges. Formally, this can be
tackled as follows: Let a (sorted) posting list of an index
over N samples consist of (cid:96) ﬁle IDs between 0 and N, i.e.:
0 ≤ f0 < f1 < . . . < f(cid:96)−1 < N. Furthermore, let δi = fi+1− fi
for 0 ≤ i < l − 1 be the pairwise differences that will be en-
coded. The distribution of those pairwise differences, i.e.,
the probability that some δi equals some ﬁxed difference
δ ∈ [1,N − 1] is given by:
(cid:0)N−δ
(cid:1)
(cid:1) .
(cid:0)N
(cid:96)−1
(cid:96)
Pr(δi = δ) =
(5)
Given that Equation (5) is independent of i and that there are
(cid:96)−1 pairwise differences, the expected number of δi such that
δi = δ is (l − 1)Pr(δi = δ). This can be used to compute the
expected number of deltas between 1 and some upper limit k:
R((cid:96),k) =
=
k
((cid:96)− 1)Pr(δi = δ)
∑
δ=1
(1− (cid:96))(N − k)!(N − (cid:96))!
N!(N − k− (cid:96))!
(cid:32)
1− a
∏
i=1
+ (cid:96)− 1
N − (a + b− i)
N − (a− i)
= ((cid:96)− 1)
(6)
(7)
(8)
(cid:33)
,
where a = min(k, (cid:96)) and b = max(k, (cid:96)). Now, R((cid:96),k) can be
used to estimate the costs. For example, there will be R((cid:96),27−
1) pairwise differences that can be encoded with 8 bits and
R((cid:96),22·7 − 1)− R((cid:96),27 − 1) that can be encoded with 16 bits
using 7-bit encoding.
Figure 8: Disk footprint for different number of groups for
N = 232 indexed samples (∅ = uncompressed, G = with group-
ing, δ = with delta encoding, G + δ = with grouping + delta
encoding). Lower is better.
Finally, we apply Equation (8) and Equation (4) on the
expected distribution of posting list sizes. To do so, we extrap-
olate the distribution shown in the CDF in Figure 10. That is,
if we have y posting lists of size x for N samples, then we will
have y posting lists of size kx for kN samples. We veriﬁed that
this extrapolation is reasonable by applying it to 106 samples
to estimate 32M samples.
The results of this extrapolation are depicted in Figure 8 and
Figure 9, which are the counterparts of Figure 6 and Figure 7,
respectively, extrapolated to N = 232 samples. The number
of groups and the grouping thresholds are also extrapolated
accordingly. As previously stated, the relative overhead of the
uncompressed footprint does not change. The delta encoding
footprint also does not change. The footprint of grouping
alone is much larger, e.g., 158.36% for 226 groups compared
to the 92.8% for 216 groups in Figure 6. This is because of
the fact that larger number of groups implies wider group IDs,
i.e., storing 2x groups requires x bit per group. Interestingly,
this is overcompensated by applying delta encoding, as it
decreases the disk footprint by about 9% compared to the
case of N = 32M samples. Regarding grouping plus delta
encoding, the relative disk footprint of choosing 226 groups
yields a relative disk footprint of 87.65%. The same trend
can be witnessed in Figure 9 which plots the footprint for
different values of τ. Choosing τ = 107 yields a footprint of
93.71% for 226 groups.
USENIX Association
30th USENIX Security Symposium    3557
Figure 9: Disk footprint for different number of groups and
different grouping thresholds for N = 232 indexed samples.
In all experiments G + δ + τ was used. Lower is better.
Figure 10: Excerpt from the CDF for the number of posting
list entries for N = 32M indexed samples.
3558    30th USENIX Security Symposium
USENIX Association