maintenance event
that does not require a system
outage. The phase II implementation of a CPU hot
plug capability discussed above is an example of a
class 3 maintenance event. Other examples include
hot swappable power modules, etc.
Our experience at Sun Microsystems has shown that
all maintenance events can be easily mapped into the
three categories defined above. We believe that this is
true of other Unix and Windows class computers as well.
3.2 Benchmark Test
in
load
understand
direct
induced maintenance event
to
and
The purpose of the benchmark test is to categorize the
system hardware components into the three maintenance
classes defined in section 3.1. Before we describe the
proposed benchmark test, an overview of the typical steps
of a hardware fault
is
necessary
proposed
order
maintenance
simulation method.
Computer system hardware is designed to be repaired in
Field Replaceable Units (FRUs) which are modules
that can be replaced as a whole. An example of an FRU
is a memory module or a disk drive. Whenever an FRU
in a computer system fails and regardless of how the
FRU fails, the entire unit is replaced. Typically, the failed
FRU is then returned to the repair center of the computer
vendor where it
is analyzed for root cause, repaired, and
then restocked as a spare.
the
A fault-induced maintenance event can be easily
simulated by replacing an FRU as if the FRU had failed.
Since there is a fixed (and thus manageable) number of
FRUs in a given system, it is entirely possible to perform
a simulation on all the FRUs in the system under study
and examine how the system handles the replacement of
each FRU. Based on the result of the testing, the FRUs
can be categorized into one of three maintenance classes
defined in the previous section. In reality, the number of
test cases can be reduced to a number that is significantly
less than the total number of FRUs in the system under
test due to the fact that a system usually handles FRUs of
the same type in an identical manner. For example, a
system with five power supply modules does not need to
test
the replacement of each and every power supply
module because the result of these tests will be the same,
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:11 UTC from IEEE Xplore.  Restrictions apply. 
thereby requiring only one test. On the other hand, for
cases where FRU replacement for a given type is location
dependent, multiple tests are required for that FRU type,
one for each replacement procedure.
FRU location
dependency information can be found in system service
manuals which provide
for
replacing FRUs  in the event of an FRU failure.
detailed instructions
load is
Hence, our proposed maintenance
the
replacement of all the FRU types in a system using this
direct simulation method. One or more tests need to be
performed for each FRU type depending on the absence
or presence of location dependency of the FRU type.
Since the FRU replacement procedure
is entirely
dependent on system hardware and operating system, this
maintenance simulation test can be performed on an idle
system or on a system running a workload. 
Unlike the case of fault injection where a sample test is
performed,
the proposed test provides a complete
coverage of the system FRUs. Representativeness of
maintenance load is not an issue since the test covers the
complete set of hardware maintenance activities for the
system. Furthermore, although the service procedure for
replacing a particular FRU may not be identical on two
different systems, the system's handling of this type of
maintenance events is directly comparable, as in the
replacing of a power supply,
IO controller card, or
processor module. Therefore portability is also not an
issue, since the simulation is done based on the service
procedure of the system under test.
3.3 Maintenance Event Quantification
is
the determination of
hardware maintenance
A key component of the benchmark proposed in this
paper
the percentage of
maintenance events in each maintenance class. There is a
logical solution to this problem. Within the context of
fault-induced
the
percentage of maintenance events in a given maintenance
class can be calculated as the ratio of the total failure rate
of FRUs in the given maintenance class to the total failure
rate of the system. Once the FRUs have been categorized
into the three maintenance classes, it is straightforward to
calculate the combined FRU failure rates in each of the
maintenance classes. The total failure rate of the system is
the sum of the failure rates of all the FRUs in the system.
events,
We propose to use the Telcordia332 standard to
estimate FRU failure rates since it provides a consistent
measure of hardware failure rates. The consistency in
failure rate estimation is critical, otherwise benchmark
results of different products cannot be compared to one
another. On the other hand, the absolute accuracy of FRU
failure rate estimation is not important since we are only
concerned with the relative frequency of
failures in a
given maintenance class. Not only is Telcordia332 an
open, vendor neutral, and widely adopted industry
standard, it also allows vendors to calculate the failure
rate for a system under development. It is important that
the benchmark not depend on field data since it often
takes time to collect
field data. Furthermore, data
collection processes are often deployed in uncontrolled
environments by vendors,
thus creating problems for
comparing benchmark results.
3.4 Benchmark Metric
The proposed robustness benchmark has a lower and
an upper bound. The best case robustness scenario
corresponds to all the FRUs in a system falling into (the
non-disruptive) maintenance class 3. In this case, every
FRU can be replaced and the new FRUs can be integrated
into the system, while the system is running, without
incurring any system outage. The worst case robustness
scenario corresponds to all the FRUs in a system falling
into (the fully-disruptive) maintenance class 1. In this
case, any time a hardware replacement is performed on
the system, the system must be completely shut down
during the entire service period. Most computer servers
today, especially mid-range and high-end servers, have
FRUs in all three maintenance classes, and the question at
hand reduces to the derivation of a robustness score to
represent the overall system robustness for fault induced
hardware maintenance events.
We propose to grade robustness on a scale of 1 to 100,
with 1 representing the worst score and 100 the best
score. For maintenance class i, we assign a numeric
value called the Maintenance Class Factor (MCFi) to
represent the robustness score of that maintenance class.
Higher MCF values imply better robustness. For general
purpose computers, such as Unix based systems, we use
the following values: MCF1=1, MCF2=10, MCF3=100.
These values represent the large disparity in downtimes
for
the different classes of maintenance. Class 1
maintenance tends to result in an outage that is in the
range of several hours, whereas the outage duration
associated with a class 2 maintenance is
typically
measured in minutes or tens-of-minutes. The MCF values
are designed to reflect the fact that class 3 maintenance
has an order-of-magnitude better availability than class 2
maintenance, which in turn, yields an order-of-magnitude
better availability than  class 1 maintenance.
We define a benchmark metric, MRB-A , where MRB
stands for Maintenance Robustness Benchmark and “-A”
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:11 UTC from IEEE Xplore.  Restrictions apply. 
indicates that the benchmark measures a particular class
of maintenance events, namely fault induced hardware
maintenance events. This naming scheme is similar to
the one used by TPC [10] where each TPC-x benchmark
measures performance of a certain type of workload. The
MRB-A is calculated as the weighted average of the MCFi
with the weighting factor being the percentage of
maintenance events in a given maintenance class. Let
PMCi (Percentage in Maintenance Class) refer to the
percentage of maintenance events in class i. MRB-A is
calculated using the following formula:
MRB A  MCF i  PMCi where i=1,2,3
MRB-A = 100 is the perfect robustness score. It means
that all hardware FRUs can be replaced while the system
is running without causing a system outage. We introduce
the term Maintenance Tolerant Computer to refer to
such a system hardware. Maintenance tolerance is the
property that preserves delivery of correct service in the
presence of active maintenance events. This definition
mirrors the definition of fault tolerance given in [1]. In a
completely maintenance tolerant computer, all system
components (hardware or software) can be repaired,
replaced, or upgraded, and configuration changes can be
performed without causing a system outage. On the other
extreme,
it means that any time a
hardware service is performed on the system, the system
must be completely shut down during the entire service
period.
if MRB-A = 1,
4. An Example
We have implemented this benchmark on two Sun
Unix servers, referred to as System A and System B in
this paper.
Both systems are four-way entry-level
systems targeting the web hosting and department server
markets. System B is a follow-on product to System A
and was released three years after System A, so System B
has higher CPU performance, higher memory capacity
and storage capacity, as well as more Reliability,
Availability and Serviceability (RAS) features. However,
other than these differences in their performance and
RAS capabilities, these two systems are similar in terms
of their designs and configurations. 
Tables 1 and 2 provide a list of FRUs for System A
and System B respectively. Since there is no location
dependency for any of the FRUs in these systems, we
group FRUs by FRU type. For simplicity, only the major
system FRUs are included in this example. For both these
tables, column 1 gives the name of each FRU type, and
column 2 lists the maintenance classification of each FRU
type. Since FRU replacement
the most
frequently performed tasks by a company's service
organization,
the step by step procedures for FRU
replacement are well documented in product service
manuals. In this example, the maintenance classification
of the FRUs is done based on the information provided in
these service manuals. For the purpose of illustrating an
implementation of this benchmark through an example,
we feel
the information provided in the service
manual is sufficient for the maintenance classification of
is one of
that
FRU Name
Main Logic Board
CPU Module 
Memory Module
Fan (CPU)
Fan (disk)
CD Drive
PCI (fast ethernet)
PCI (graphic)
Power Supply
Disk Drive
Maintenance
Class
Failure
Rate (FITs)
Total Failure
Quantity
Rate
1
1
1
1
1
1
1
1
3
3
7500
5000
500
5000
5000
1000
3000
2000
5000
1250
1
4
64
3
3
1
1
1
3
6
7500
20000
32000
15000
15000
1000
3000
2000
15000
7500
Table 1: System A FRU List and Maintenance Classes
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:11 UTC from IEEE Xplore.  Restrictions apply. 
FRU Name
Main Logic Board
Memory Module
DVD Drive
CPU Module
Power Supply
Fan Tray 1
Fan Tray 2
Fan Tray 3
Disk Drive
PCI (Gbit ethernet)
PCI (graphic)
Maintenance
Class
Failure
Rate (FITs)
Total Failure
Quantity
Rate
1
1
1
2