### Server Certificate Not Authorized for Server Authentication

When a server certificate is not authorized for server authentication, certain SSL/TLS libraries may still accept it. Specifically, PolarSSL, GnuTLS, CyaSSL, and MatrixSSL do not check the extended key usage (EKU) extension. If a certificate has a key usage that allows all operations but an EKU that restricts its use to TLS client authentication (or any purpose other than server authentication), these libraries will still accept the certificate for server authentication.

### Other Discrepancies in Extension Checks

#### Unknown Critical Extensions
According to SSL/TLS standards, if an implementation encounters an unknown critical extension, it must reject the certificate. However, GnuTLS, CyaSSL, and MatrixSSL accept certificates with unknown critical extensions.

#### Malformed Extension Values
If a certificate contains a known non-critical extension with a syntactically well-formed ASN.1 value that is not valid for that extension, OpenSSL, GnuTLS, CyaSSL, and MatrixSSL will accept it. In contrast, other libraries and all major browsers will reject such a certificate.

#### Inconsistencies in the Definition of Self-Signed Certificates
Self-issued certificates are CA certificates where the issuer and subject are the same. However, given a certificate with the same issuer and subject but also a valid chain of trust, GnuTLS and MatrixSSL will accept it, even though this is unusual.

#### Inconsistencies in the Authority Key Identifier (AKI)
The AKI extension differentiates between multiple certificates from the same issuer. If a certificate issued by a CA named A has an AKI pointing to a certificate with a subject name B, some libraries will reject it, while others will accept it.

### Severity of Errors
- **Critical Error (I)**: This implies that the connection is insecure and must be reported to the user.
- **Common, Low-Risk Error (E)**: This is a more common and less severe error.

### Serial Number Field
- If the serial number field is absent, GnuTLS accepts the certificate.
- If the serial number field is present but does not match the issuer’s serial number, GnuTLS rejects the certificate.

### Cryptlib and Certificate Verification
We planned to include cryptlib in our testing but discovered that it does not verify certificate chains. The following code snippet from `session/ssl_cli.c` illustrates this:

```c
/* If certificate verification hasn’t been disabled, make sure that
   the server’s certificate verifies */
if (!(verifyFlags & SSL_PFLAG_DISABLE_CERTVERIFY)) {
    /* This is still too risky to enable by default
       because most users outside of web browsing
       don’t go for the commercial CA racket */
}
return(CRYPT_OK);
```

### Security Problems in Error Reporting

Rejection of an invalid certificate should trigger a warning to the user. Different errors have different security implications:
- **Recently Expired Certificate**: This might indicate a negligent system administrator but does not necessarily mean the connection is insecure. Users often ignore these warnings.
- **Invalid Issuer**: This means the server cannot be authenticated, and the connection is vulnerable to man-in-the-middle attacks.
- **Hostname Mismatch**: The user can inspect both names and decide whether to proceed. For example, if the hostname is a subdomain of the common name in the certificate, the user might consider it a minor misconfiguration.

To test how SSL/TLS implementations report certificate errors, we performed differential testing on leaf certificates with various combinations of:
- **Expired (E)**: Current time is later than the `notAfter` timestamp.
- **Bad Issuer (I)**: No valid chain of trust from the certificate's issuer to a trusted root CA.
- **Bad Name (N)**: Neither the common name nor the subject alternative name matches the server's hostname.

### Results of Error Code Testing
Table VI shows the results of these tests. Most SSL/TLS implementations and web browsers return only one error code even if the certificate is invalid for multiple reasons. Some browsers choose to report the less severe reason, hiding a severe security problem under a low-risk warning.

For example, if a malicious Wi-Fi access point presents a self-signed, recently expired certificate for `gmail.com` to a user of Safari 7 or Chrome 30 (on Linux), the only error warning the user will see is "Expired certificate." Many users will click through this low-risk warning, even though the server has been spoofed.

### Related Problems
- **Weak Key Warnings**: When presented with a certificate containing a 512-bit RSA key, Firefox and Chrome accept it, while Opera warns that the key is weak. If the certificate is invalid, Opera still produces the same "Weak Key" warning, masking other problems like an invalid issuer.
- **Firefox Behavior**: If Firefox encounters two certificates issued by the same CA with the same serial number, it shows an error message describing the problem. This message masks all other warnings, but the user cannot override it, making this behavior safe.

### Other Checks

#### Weak Cryptographic Hash Functions
Digital signatures on SSL/TLS certificates can use various cryptographic hash functions. Table VII shows that only NSS, GnuTLS, and Chrome reject MD5 certificates, which are vulnerable to prefix-collision attacks.

#### Short Keys
Table VIII shows that most tested implementations support short keys (512 bits for RSA) and unusual key sizes (1023 bits).

#### Additional Checks
Table IX summarizes which SSL/TLS libraries perform additional checks, such as Certification Revocation Lists (CRL), subject alternative name, and hostname. The latter check is crucial for security against man-in-the-middle attacks but is often delegated to higher-level applications.

### Conclusion
The inconsistencies and vulnerabilities in SSL/TLS implementations highlight the need for more rigorous and consistent certificate validation. Developers and users should be aware of these issues to ensure secure connections.