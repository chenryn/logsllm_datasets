Server certiﬁcate not authorized for server authentication.
PolarSSL, gnuTLS, CyaSSL and MatrixSSL do not check the
extended key usage extension. Given a certiﬁcate with key
usage that allows all operations and extended key usage that
only allows it to be used for TLS client authentication (or any
purpose other than server authentication), these libraries accept
the certiﬁcate for server authentication.
E. Other discrepancies in extension checks
Unknown critical extensions. If an SSL/TLS implementation
does not recognize an extension that is marked as critical, it
must reject the certiﬁcate. GnuTLS, CyaSSL, and MatrixSSL
accept certiﬁcates with unknown critical extensions.
Malformed extension values. Given a certiﬁcate with a known
non-critical extension whose value is syntactically well-formed
ASN.1 but not a valid value for that extension, OpenSSL,
GnuTLS, CyaSSL, and MatrixSSL accept it, while the other
libraries and all browsers reject it.
Inconsistencies in the deﬁnition of self-signed. Self-issued
certiﬁcates are CA certiﬁcates in which the issuer and subject
are the same entity [69]. Nevertheless, given a (very odd)
certiﬁcate whose subject is the same as issuer but that also
has a valid chain of trust, GnuTLS and MatrixSSL accept it.
Inconsistencies between the certiﬁcate’s Authority Key Iden-
tiﬁer and its issuer. The Authority Key Identiﬁer (AKI)
extension differentiates between multiple certiﬁcates of the
125
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:03 UTC from IEEE Xplore.  Restrictions apply. 
same issuer. When an AKI is present in a certiﬁcate issued
by CA whose name is A, but the AKI points to a certiﬁcate
whose subject name is B, some libraries reject, others accept.
I is the most severe error. It implies that the connection is
insecure and must be reported to the user. On the other hand,
E is a common, relatively low-risk error.
If the serial number ﬁeld is absent
then
GnuTLS accepts. But if this ﬁeld is present and does not match
the issuer’s serial number, then GnuTLS rejects.
in the AKI,
F. “Users. . . don’t go for the commercial CA racket”
We planned to include cryptlib in our testing, but then
discovered that it does not verify certiﬁcate chains. We let the
following code snippet, taken from session/ssl_cli.c, speak
for itself (there is no code inside the if block):
the
/* If certificate verification hasn’t been disabled
, make sure that
server’s certificate verifies */
if( !( verifyFlags & SSL_PFLAG_DISABLE_CERTVERIFY )
)
{
/* This is still too risky to enable by default
because most users outside of web browsing
don’t go for the commercial CA racket */
}
return( CRYPT_OK );
G. Security problems in error reporting
Rejection of an invalid certiﬁcate is not the end of the
story. Web browsers and other interactive applications generate
a warning based on the reason for rejection, show this warning
to the user, and, in many cases, allow the user to override the
dialog and proceed.
Different errors have different security implications. A re-
cently expired, but otherwise valid certiﬁcate may be evidence
of a sloppy system administrator who forgot to install a new
certiﬁcate, but does not imply that the SSL/TLS connection
will be insecure. “Expired certiﬁcate” warnings are sufﬁciently
common that users have learned to ignore them and browser
developers are even advised to suppress them [1].
If, on the other hand, the certiﬁcate issuer is not valid, this
means that the server cannot be authenticated and the con-
nection is not secure against man-in-the-middle attacks. If the
server’s hostname does not match the subject of the certiﬁcate,
the user may inspect both names and decide whether to proceed
or not. For example, if the hostname (e.g., bar.foo.com) is
a subdomain of the common name in the certiﬁcate (e.g.,
foo.com), the user may chalk the discrepancy up to a minor
misconﬁguration and proceed.
To test whether SSL/TLS implementations report certiﬁcate
testing on leaf
errors correctly, we performed differential
certiﬁcates with all combinations of the following:
timestamp in the certiﬁcate.
• Expired (E): Current
time is later than the notAfter
• Bad issuer (I): There is no valid chain of trust from the
• Bad name (N): Neither the common name, nor the sub-
ject alternative name in the certiﬁcate match the server’s
hostname.
certiﬁcate’s issuer to a trusted root CA.
Table VI shows the results. For these tests, we extended
our client suite with common Web browsers, since they are
directly responsible for interpreting the reasons for certiﬁcate
rejection and presenting error warnings to human users.
Most SSL/TLS implementations and Web browsers return
only one error code even if the certiﬁcate is invalid for multiple
reasons. What is especially worrisome is that some browsers
choose to report the less severe reason. In effect, they hide a
severe security problem under a low-risk warning. These
cases are highlighted in bold in Table VI.
For example, if a network attacker—say, a malicious Wi-
Fi access point—presents a self-signed, very recently expired
certiﬁcate for gmail.com or any other important domain to
a user of Safari 7 or Chrome 30 (on Linux), the only error
warning the user will see is “Expired certiﬁcate.” 1 Many
users will click through this low-risk warning—even though
authentication has failed and the server has been spoofed!
This vulnerability is generic in all NSS-based applications:
if the certiﬁcate is expired, that’s the only reported error code
regardless of any other problems with the certiﬁcate.
A related problem (not reﬂected in Table VI) is caused
by “Weak Key” warnings. When presented with a certiﬁcate
containing a 512-bit RSA key, Firefox and Chrome accept it,
while Opera warns that the key is weak. If the certiﬁcate is
invalid, Opera still produces the same “Weak Key” warning,
masking other problems with the certiﬁcate, e.g., invalid issuer.
The other warnings are available in the details tab of the error
dialog, assuming Opera users know to look there.
Finally, if Firefox encounters two certs issued by the same
it shows an error
CA that have the same serial number,
message describing the problem. This message masks all other
warnings, but there is no way for the user to override it and
proceed, so this behavior is safe.
H. Other checks
Weak cryptographic hash functions. Digital signatures on
SSL/TLS certiﬁcates can use a variety of cryptographic hash
(aka message digest) functions. As Table VII shows, only
NSS, GnuTLS, and Chrome reject MD5 certiﬁcates, which
are known to be vulnerable to preﬁx-collision attacks [77].
Short keys. Table VIII shows that virtually all tested imple-
mentations support short keys (512 bits for RSA) and unusual
key sizes (1023 bits, chosen because it occurs 87 times in our
certiﬁcate corpus).
Additional checks. Table IX summarizes which SSL/TLS
libraries perform additional checks, such as Certiﬁcation Re-
vocation Lists (CRL), subject alternative name, and hostname.
The latter check is critically important for security against
man-in-the-middle attacks [31], but often delegated by libraries
to higher-level applications.
1As this paper was being prepared,
the same bug was reported in
http://news.netcraft.com/archives/2013/10/16/us-government-aiding-spying-
against-itself.html
126
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:03 UTC from IEEE Xplore.  Restrictions apply. 
TABLE VI: Error code(s) returned by Web browsers and SSL/TLS libraries for certiﬁcates with various combinations of Bad
Issuer (I), Expired (E), and Bad Name (N). Security vulnerabilities are highlighted in bold.
Certs
Firefox 20
E
I
IE
IN
IEN
N
NE
E
I
IE
IN
IEN
N
NE
Chrome 30
(Linux)
E
I
E
I
N
N
N
Opera 12
(Linux)
E
I
I#
I#
I#
N
E#
Opera 20
(Mac)
!E
!I
*
!I
*
+
!E
Safari 7
!E
!I
!E
!I
!E
!N
!E
Chrome 30
(Mac)
E
I
*
I
*
N
N
IE 10
OpenSSL
PolarSSL
GnuTLS
CyaSSL MatrixSSL
NSS
E
I
*
IN
*
N
NE
E
I
I
I-
I-
-
E-
E
I
I
I-
IE-
-
**-
E
I
IE
I-
**-
-
E-
E
I
**
I-
**-
-
E-
E
**
**
*-
**-
-
E-
E
I
E-
I-
E-
-
E-
* is a generic “invalid certiﬁcate” warning without a speciﬁc error message; the user cannot override this warning
+ is a generic “invalid certiﬁcate” warning without a speciﬁc error message; the user can override this warning
** is a generic “invalid certiﬁcate” error code
# all errors are shown after the user clicks the details tab
! shows a generic error message ﬁrst; the reported error is shown after user clicks the details button
- the hostname check was not enabled for any of the tested clients
TABLE VII: Support for cryptographic hash algorithms in certiﬁcate signatures
Algorithm
SHA-1
SHA-256
SHA-512
MD2
MD4
MD5
OpenSSL
accept
accept
accept
reject
reject
accept
PolarSSL
accept
accept
accept
reject
reject
accept
GnuTLS
accept
accept
accept
reject
reject
reject (w)
CyaSSL
accept
accept
reject (u)
reject
reject
accept
reject (u) : reject because hash function is unknown
reject (w) : reject because hash function is weak
reject (d) : reject under default settings
MatrixSSL
accept
reject (u)
reject (u)
reject
reject
accept
NSS
accept
accept
accept
reject
reject
reject (w)
OpenJDK
accept
accept
accept
reject
reject (d)
accept
BouncyCastle
accept
accept
accept
reject
reject
accept
Chrome
accept
accept
accept
reject
reject
reject (w)
Firefox WebKit
accept
accept
accept
accept
accept
accept
reject
reject
reject
reject
accept
accept
Opera
accept
accept
accept
reject
reject
accept
TABLE VIII: Support for short keys and unusual key sizes
Key size