title:ARBITRAR: User-Guided API Misuse Detection
author:Ziyang Li and
Aravind Machiry and
Binghong Chen and
Mayur Naik and
Ke Wang and
Le Song
0
9
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
ARBITRAR: User-Guided API Misuse Detection
Ziyang Li∗, Aravind Machiry†, Binghong Chen‡, Mayur Naik∗, Ke Wang§, and Le Song‡
∗University of Pennsylvania †Purdue University ‡Georgia Institute of Technology §Visa Research
{liby99@seas, mhnaik@cis}.upenn.edu, {binghong@, lsong@cc.}gatech.edu
PI:EMAIL, PI:EMAIL
Abstract—Software APIs exhibit rich diversity and complexity
which not only renders them a common source of programming
errors but also hinders program analysis tools for checking
them. Such tools either expect a precise API speciﬁcation, which
requires program analysis expertise, or presume that correct API
usages follow simple idioms that can be automatically mined
from code, which suffers from poor accuracy. We propose a new
approach that allows regular programmers to ﬁnd API misuses.
Our approach interacts with the user to classify valid and invalid
usages of each target API method. It minimizes user burden by
employing an active learning algorithm that ranks API usages by
their likelihood of being invalid. We implemented our approach
in a tool called ARBITRAR for C/C++ programs, and applied it to
check the uses of 18 API methods in 21 large real-world programs,
including OpenSSL and Linux Kernel. Within just 3 rounds of
user interaction on average per API method, ARBITRAR found
40 new bugs, with patches accepted for 18 of them. Moreover,
ARBITRAR ﬁnds all known bugs reported by a state-of-the-art
tool APISAN in a benchmark suite comprising 92 bugs with a
false positive rate of only 51.5% compared to APISAN’s 87.9%.
I. INTRODUCTION
Modern software is composed of APIs. They provide a
modular interface encapsulating rich semantic information,
rendering them challenging to use in practice. According to a
recent study [25], 17% of bugs stem from API misuses. These
misuses can have serious security impact [18], [27], [46].
Various program analysis techniques have been proposed
to check API misuses. However, API misuse errors still
remain widespread [35], [70]. Existing tools for checking API
misuses can be broadly classiﬁed into two categories. The ﬁrst
category comprises tools that check for violations of given
API speciﬁcations, such as IMChecker [24], Semmle [19], and
Sys [8]. The effectiveness of these tools depends on the quality
of the speciﬁcations. However, writing precise speciﬁcations
requires program analysis expertise, making it challenging even
for experienced users. Moreover, these speciﬁcations must be
written in Domain Speciﬁc Languages (DSLs) that vary with
tools, e.g., Yaml for IMChecker, CodeQL for Semmle, and
LLVM IR and Lisp for Sys, which further burden users.
The second category of tools, such as APISAN [69] and
JADET [63], presume that correct API usages follow simple id-
ioms which can be automatically mined from code. Speciﬁcally,
given a large corpus of code using the API, the majority usage
pattern is considered as the valid usage, and all deviations from
it are regarded as misuses. These tools presume the availability
of a large corpus of code using the API and that the majority
of its uses are valid. Unfortunately, these two assumptions
may not always hold, especially for less commonly used but
critical APIs. Furthermore, as shown by recent work [25],
these approaches fail to capture common API usage patterns.
Additionally, state-of-the-art tools such as APISAN result in
many false alarms when there are multiple valid usage patterns
of an API.
In general, automatically detecting valid API usage patterns
is hard [31], especially without sufﬁcient usage examples. On
the other hand, it is unlikely that developers are able and
willing to write precise API speciﬁcations. However, given
a program path representing an API usage, developers can
easily determine the validity of the usage. In other words,
distinguishing between a real and a false API misuse requires
far less effort. Consider the snippet of code in Listing 1 with two
calls to the target API png_destroy_write_struct, on Lines
6 and 13. The corresponding program paths (i.e., sequences
of instructions or traces), denoted by P @6 and P @12, consist
of Line 1, 2, 3, 4, 6; and 1, 2, 3, 4, 12 respectively. When
presented with the two traces, developers with knowledge
of png_destroy_write_struct can recognize that P @6 is valid
and P @12 is invalid. Can we use this feedback to create
effective API misuse checkers?
There are four challenges to realize this objective:
1) Efﬁcient trace generation: Given a target API within a
codebase, we need a mechanism to efﬁciently generate all
paths or traces to all call-sites of the API. Furthermore, we
need a way to reduce each trace, as not all instructions are
relevant to an invocation of the API (e.g., those denoted by
ellipses at Line 10 in Listing 1).
2) Generic trace representation: Unlike other approaches such
as APISAN, which only works for APIs with simple usage
patterns [25], we seek a generic method to represent a trace
that is capable of handling all classes of APIs with varying
complexities and with multiple valid usages.
3) Real-time user interaction: Irrespective of the size and
complexity of the traces or the API’s semantics, we need
to learn from user feedback quickly and be responsive, i.e.,
respond to user feedback in a short time span.
4) Accurate alarm identiﬁcation: We must accurately identify
API usages that are most likely to be buggy so that users can
conﬁrm an API misuse within a few rounds of interaction.
The longer this process draws out, the less likely users are
to stay engaged, resulting in a rather low utility of this
approach in practice.
In this paper, we present ARBITRAR, an interactive tool
for ﬁnding API misuse bugs based on Maximum Discrepancy
© 2021, Ziyang Li. Under license to IEEE.
DOI 10.1109/SP40001.2021.00090
1400
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:07 UTC from IEEE Xplore.  Restrictions apply. 
Kernel Density Estimation (MD-KDE), a novel active learning
methodology. Unlike existing approaches, ARBITRAR requires
neither the API’s speciﬁcation nor a large code corpus with
majority valid uses. Given a target API method to be checked
within a codebase, ARBITRAR uses under-constrained symbolic
execution [51] to generate inter-procedural program traces
for all call-sites to the API method. We minimize traces by
backward slicing from the API call-site. These optimized traces
are converted into a set of feature vectors. Finally, we use MD-
KDE on such vectorized traces to detect those representing the
invalid usages of the API. Speciﬁcally, in each round of MD-
KDE, a trace of the API usage with the highest probability of
being invalid is presented to the user.
We evaluate ARBITRAR by applying it to check the uses
of 18 target API methods in 21 C/C++ programs, including
security-critical codebases like OpenSSL and Linux Kernel.
ARBITRAR discovered 40 new bugs, out of which 18 were
reported, conﬁrmed, and patched. In addition, we demonstrate
that ARBITRAR is highly efﬁcient, taking only 3 rounds of
user interaction to discover an API misuse on average. We
also conduct a head-to-head comparison between ARBITRAR
and APISAN, a state-of-the-art API misuse detector. On a
benchmark suite comprising 92 bugs, ARBITRAR ﬁnds all
known bugs reported by APISAN with a signiﬁcantly lower
false positive rate of 51.5% than APISAN’s 87.9%.
We summarize the contributions of our work:
• We present ARBITRAR, a user-guided API misuse detection
tool that is precise (i.e., yields low false positive rates),
efﬁcient (i.e., requires few rounds of user interaction), and
scalable (i.e., ﬁnds bugs in large-scale codebases).
• We propose MD-KDE, a novel active learning algorithm
based on kernel density estimation. In particular, MD-KDE
picks an unlabeled trace of an API usage that achieves the
maximum discrepancy in estimated probability from the
correct usage traces of the API.
• We perform an extensive evaluation of ARBITRAR. When
applied to check uses of 18 API methods within 21 C/C++
programs, ARBITRAR found 40 new bugs in 3 rounds of
user interaction on average per API method.
• The source code of ARBITRAR is made publicly available
at https://github.com/petablox/arbitrar.
II. MOTIVATION
In this section, we motivate our approach with an erroneous
usage of png_destroy_write_struct found by ARBITRAR.
This API takes two arguments, each as a pointer to a pointer,
ﬁrst to a png structure (png_ptr_ptr) and second to an info
structure (info_ptr_ptr) as shown below:
void png_destroy_write_struct(
png_structpp png_ptr_ptr, png_infopp info_ptr_ptr);
This function is used to free the memory associated with
the png structure (png_ptr_ptr), which holds information
for writing a PNG ﬁle, and the associated info structure
(info_ptr_ptr). The info_ptr_ptr can be NULL in which case
only the png structure will be freed.
png_ptr = png_create_write_struct(...);
if (png_ptr == NULL) return(2);
info_ptr = png_create_info_struct(png_ptr);
if (info_ptr == NULL) {
1
2
3
4
5
6
7
8
9
10
11
12 (cid:13)png_destroy_write_struct(&png_ptr, (png_infopp)NULL);
}
...
// Invalid usage resulting in memory leak.
// The second argument should be &info_ptr.
// Valid usage
¸png_destroy_write_struct(&png_ptr, NULL);
return(2);
Listing 1: Example showing valid (¸) and invalid usages ((cid:13)) of
png_destroy_write_struct as found by ARBITRAR.
Consider the code in Listing 1 that creates png_ptr at
Line 1 and the associated info_ptr at Line 3. If the
creation of info_ptr fails (i.e., info_ptr == NULL evalu-
ates to true at Line 4),
the png_ptr is freed by call-
ing png_destroy_write_struct at Line 6, where NULL is
passed as the argument for info_ptr_ptr.
The Bug: If the creation of both png_ptr and info_ptr
succeeds,
i.e., both png_ptr == NULL at Line 2 and
info_ptr == NULL at Line 4 evaluate to false, then it is
expected that both pointers will be released in the end.
However, at Line 12, the function png_destroy_write_struct
is incorrectly called with &png_ptr and NULL but supposed to
be called with &png_ptr and &info_ptr. This causes leakage of
the memory allocated to the info_ptr and could have security
implications such as Denial-of-Service [15].
it
We examine what
takes for the two state-of-the-art
tools — Semmle (adopting a manual approach based on API
speciﬁcations) and APISAN (adopting an automated approach
based on anomaly detection) — to ﬁnd the bug in Listing 1.
A. Semmle
Semmle ﬁnds bugs using manually written semantic patterns.
To isolate this bug, we need to write a pattern that at least
captures the following:
a) The presence of png_destroy_write_struct(&X, NULL),
denoted by C1.
b) The existence of a non-NULL info_ptr, the second argument
of C1, meaning, there exists a call Y = png_create_info_
struct(X), denoted by C2, and Y == NULL is false.
c) The existence of a path from C2 to C1, speciﬁcally, Y, the
return value of C2 is passed as the second argument to C1.
It took a graduate student adept at logic programming and
experienced in analyzing security bugs two hours to write a
pattern for this task in CodeQL. The query itself consists of
40 lines and involves Semmle library calls to data-ﬂow and
control-ﬂow analysis. The majority of time was spent in the
edit-run-debug loop where the user was constantly suppressing
false positives by adding new predicates. In the end, this checker
is able to isolate the bug among 18 usages across 4 projects,
although it is worth noting that it still fails to capture the full
speciﬁcation of the API1. When misuses of an API manifest
1The source code of this checker is provided in Appendix 5.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1401
infeasible to enumerate all program paths on large real-world
software such as the Linux Kernel because of path explosion
and engineering limitations. We overcome this problem by
performing under-constrained symbolic execution [51] on the
contexts around target API calls.
1) Finding Execution Contexts: We use execution context
(s) to deﬁne the entry point and scope for under-constrained
symbolic execution. This is controlled by a parameter called
context-depth (d) which represents the maximum distance from
a call site k of the target API method. Formally, we deﬁne
execution context (s) to be a pair s = (g, ϕ), where g is the
entry point function and ϕ = {g1, ..., gn} is the scope— a set
of functions that are allowed to be explored. Given (i) a call site
k of the target API method in a function f; (ii) call graph G of
the program; and (iii) context-depth d, we compute the set of
execution contexts (Sk) by following the steps in Algorithm 1.
We ﬁrst perform reverse breadth ﬁrst search (ReverseBFS)
on G from f to ﬁnd all the functions (F ) within distance d
(Line 3). Then for each function g in F , we ﬁnd all the
reachable functions (ϕg) in G within depth 2 ∗ d using BFS
(Line 5). Note that on Line 6, we remove the target API method
from each computed scope because we only wish to check how
it is used, not how it is implemented. The set of all (g, ϕg)