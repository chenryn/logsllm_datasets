---
author: Dave Cheney
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 1783
date: '2023-11-15 15:48:58'
editorchoice: false
excerpt: 今天的帖子来自于最近的 Go 语言的一次小测试
fromurl: https://dave.cheney.net/2021/01/05/a-few-bytes-here-a-few-there-pretty-soon-youre-talking-real-memory
id: 16381
islctt: true
largepic: /data/attachment/album/202311/15/154636bhoqwdrdxczdhzxg.png
permalink: /article-16381-1.html
pic: /data/attachment/album/202311/15/154636bhoqwdrdxczdhzxg.png.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 今天的帖子来自于最近的 Go 语言的一次小测试
tags:
- Go
- 内存
thumb: false
title: 这儿几个字节，那里几个字节，我们说的是真正的内存
titlepic: true
translator: Drwhooooo
updated: '2023-11-15 15:48:58'
---
![](/data/attachment/album/202311/15/154636bhoqwdrdxczdhzxg.png)
今天的帖子来自于最近的 Go 语言的一次小测试，观察下面的测试基础片段    [1] ：
```
func BenchmarkSortStrings(b *testing.B) {
        s := []string{"heart", "lungs", "brain", "kidneys", "pancreas"}
        b.ReportAllocs()
        for i := 0; i    [2] 
在 Go 语言伪代码中，一个接口可能是这样的：
```
type interface struct {
        // the ordinal number for the type of the value
        // assigned to the interface 
        type uintptr
        // (usually) a pointer to the value assigned to
        // the interface
        data uintptr
}
```
`interface.data` 可以容纳一个机器字（在大多数情况下为 8 个字节），但一个 `[]string` 却需要 24 个字节：一个字用于指向切片的底层数组；一个字用于存储切片的长度；另一个字用于存储底层数组的剩余容量。那么，Go 是如何将 24 个字节装入个 8 个字节的呢？通过编程中最古老的技巧，即间接引用。一个 `[]string`，即 `s`，需要 24 个字节；但 `*[]string` —— 即指向字符串切片的指针，只需要 8 个字节。
### 逃逸到堆
为了让示例更加明确，以下是重新编写的基准测试，不使用 `sort.Strings` 辅助函数：
```
func BenchmarkSortStrings(b *testing.B) {
        s := []string{"heart", "lungs", "brain", "kidneys", "pancreas"}
        b.ReportAllocs()
        for i := 0; i    [3]  我们现在有这么一种情况：出现一个持有指向 `ss` 的指针的接口值。它指向哪里？还有 `ss` 存储在哪个内存位置？
似乎 `ss` 被移动到了堆上，这也同时导致了基准测试报告中的分配：
```
Total:    296.01MB   296.01MB (flat, cum) 99.66%
      8            .          .           func BenchmarkSortStrings(b *testing.B) { 
      9            .          .           	s := []string{"heart", "lungs", "brain", "kidneys", "pancreas"} 
     10            .          .           	b.ReportAllocs() 
     11            .          .           	for i := 0; i < b.N; i++ { 
     12            .          .           		var ss sort.StringSlice = s 
     13     296.01MB   296.01MB           		var si sort.Interface = ss // allocation 
     14            .          .           		sort.Sort(si) 