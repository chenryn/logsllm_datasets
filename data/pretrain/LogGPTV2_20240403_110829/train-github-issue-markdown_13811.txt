# Checklist
  * I have verified that the issue exists against the `master` branch of Celery.
  * This has already been asked to the discussion group first.
  * I have read the relevant section in the  
contribution guide  
on reporting bugs.
  * I have checked the issues list  
for similar or identical bug reports.
  * [y] I have checked the pull requests list  
for existing proposed fixes.
  * I have checked the commit log  
to find out if the bug was already fixed in the master branch.
  * [] I have included all related issues and possible duplicate issues  
in this issue (If there are none, check this box anyway).
## Mandatory Debugging Information
  * I have included the output of `celery -A proj report` in the issue.  
(if you are not able to do this, then at least specify the Celery  
version affected).
  * I have verified that the issue exists against the `master` branch of Celery.
  * I have included the contents of `pip freeze` in the issue.
  * I have included all the versions of all the external dependencies required  
to reproduce this bug.
## Optional Debugging Information
  * I have tried reproducing the issue on more than one Python version  
and/or implementation.
  * I have tried reproducing the issue on more than one message broker and/or  
result backend.
  * I have tried reproducing the issue on more than one version of the message  
broker and/or result backend.
  * I have tried reproducing the issue on more than one operating system.
  * I have tried reproducing the issue on more than one workers pool.
  * I have tried reproducing the issue with autoscaling, retries,  
ETA/Countdown & rate limits disabled.
  * I have tried reproducing the issue after downgrading  
and/or upgrading Celery and its dependencies.
## Related Issues and Possible Duplicates
#### Related Issues
  * #6791
  * #1997
#### Possible Duplicates
  * None
## Environment & Settings
**Celery version** :
**`celery report` Output:**
    software -> celery:5.1.2 (sun-harmonics) kombu:5.1.0 py:3.8.5
                billiard:3.6.4.0 redis:3.5.3
    platform -> system:Linux arch:64bit, ELF
                kernel version:5.8.0-59-generic imp:CPython
    loader   -> celery.loaders.app.AppLoader
    settings -> transport:redis results:disabled
    broker_url: 'redis://localhost:6379/0'
    deprecated_settings: None
# Steps to Reproduce
## Required Dependencies
  * **Minimal Python Version** : N/A or Unknown
  * **Minimal Celery Version** : N/A or Unknown
  * **Minimal Kombu Version** : N/A or Unknown
  * **Minimal Broker Version** : redis in docker
  * **Minimal Result Backend Version** : N/A or Unknown
  * **Minimal OS and/or Kernel Version** : Ubuntu 20.04
  * **Minimal Broker Client Version** : N/A or Unknown
  * **Minimal Result Backend Client Version** : N/A or Unknown
### Python Packages
**`pip freeze` Output:**
    amqp==5.0.6
    billiard==3.6.4.0
    celery @ file:///tmp/x/celery
    click==7.1.2
    click-didyoumean==0.0.3
    click-plugins==1.1.1
    click-repl==0.2.0
    kombu==5.1.0
    prompt-toolkit==3.0.19
    pytz==2021.1
    redis==3.5.3
    six==1.16.0
    vine==5.0.0
    wcwidth==0.2.5
### Other Dependencies
N/A
## Minimally Reproducible Test Case
    from celery import Celery
    app = Celery('tasks', broker='redis://localhost:6379/0')
    @app.task
    def f():
        print('hello hello world')
    if __name__ == '__main__':
        f.apply_async()
# Expected Behavior
only one line of output
     -------------- [queues]
                    .> celery           exchange=celery(direct) key=celery
    [2021-06-30 19:28:02,606: WARNING/ForkPoolWorker-4] hello hello world
# Actual Behavior
prints an empty line
     -------------- [queues]
                    .> celery           exchange=celery(direct) key=celery
    [2021-06-30 19:28:02,606: WARNING/ForkPoolWorker-4] hello hello world
    [2021-06-30 19:28:02,607: WARNING/ForkPoolWorker-4] 
when printing from the task function, each output causes a newline to be
printed to `stderr`. This was introduced in version `5.1.*` in #6791 by
removing this line:
`51f5b01`#diff-116905b4c2ccc7e0172e26700ba1a0a0270b2fe1f830c47244dc1df07c805883L226
I think there are different options how to address this:
  * just add the line back as it was -- but this would go against the initaly intention in #6791 of removing it to don't do any string manipulation in this function
  * use something like `re.sub('\n|\r', '', data )` instead, to keep the whitespace or an endswith check or a more complex regex?
  * address this somewhere else, so no newline characters are passed to `.write()` (I would need a hint where to do this though)
I am happy to send a PR to fix this if needed.