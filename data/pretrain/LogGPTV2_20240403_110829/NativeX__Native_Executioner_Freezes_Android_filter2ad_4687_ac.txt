6
2
3
4
1
4
52
{M1dir ect }
{M1indir ect }
324
27
10
16
22
29
217
18
55
36
2
150
906
137
8
8
12
8
12
142
8
11
19
1
44
410
two smart TV boxes running Android 4.4 and 6.0. Table 4 shows our
testing results. All test devices with corresponding clean systems
are successfully attacked by all of the attack PoC applications of that
version. Generally, the attack PoC apps take effect within 5 seconds
despite small differences among different testing devices. It means
that the vulnerability is, in fact, affecting a very large range of
Android devices from 4.2 to the latest 9.0 which contribute to 99.7%
of the whole Android devices [9]. Section 5 provides more details
about PoC apps and the attack demos which are publicly available
on Google Play and Youtube. We also test the minimum number
of native processes that a successful attack requires on specific
devices. We can see from the column “Min # Persistent” and “Min
# Unsupported” in Table 4 that the minimum numbers vary a lot
from 80 to 2,830 on different devices. These numbers provide us a
practical threshold when we discuss the defense approaches later
in Section 6. We can see that the “Min # Persistent” values are much
less than “Min # Unsupported” values, which are explained in detail
in Section 4.2.
4.2 Vulnerability Observation and Analysis
During the evaluation, there are two interesting observations.
Observation #1. Readers may have noticed that in Table 3, not
all of the risky commands identified from the Android command
source code are available in the Android system. According to our
experiments, even though the command source code indeed exists,
some commands cause the command-not-found error. However,
we found that all of the identified commands can achieve a similar
attack consequence.
In order to figure out the underlying reason, we manually analyze
the attack trace and reveal that the underlying causes are different
despite the undifferentiated attack consequences. The analysis is
based on the Android watchdog log information. The Android
watchdog dumps the traces which help us to identify the causes of
the system reset. The error messages vary in different situations.
The error message can be “blocked in handler” or “blocked in
monitor”. The first means there is an overtime situation occurs,
while the latter indicates a deadlock. The causes are explained
according to different command categories.
Persistent commands. Among the commands NativeX has identi-
fied, there are some persistent commands that reside in memory
after started, for example, top. Under the attack using persistent
commands, the error messages are non-deterministic. There are
both “block in monitor” and “block in handler” in the log, which
means there are sometimes deadlock and sometimes overtime
situations. When the PoC application invokes such persistent
commands, the persistent commands directly occupy the shared
system storage resources that only support the mutually exclusive
operation, i.e., some system directories, so that the critical system
Table 3: Risky command statistics in Android versions from 4.2 to 9.0.
Android OS Version
Storage resources
# Risky
commands
# Available
in Android
# Total
commands
Android 4.2
Android 5.1
Android 6.0.1
Android 7.1.1
Android 8.0
Android 9.0
/data, /proc, /system, /sys, /d
/data, /proc, /system, /sys, /d, /vendor
/data, /proc, /system, /sys, /vendor, /storage, /dev, /mnt
/data, /proc, /system, /sys, /vendor, /storage, /dev, /mnt
/data, /proc, /system, /sys, /vendor, /storage, /dev, /mnt
/data, /proc, /system, /sys, /vendor, /storage, /dev, /mnt, /product
15
15
52
50
55
50
14
14
30
28
31
29
96
91
253
257
262
269
Table 4: Vulnerability verification results. The testing devices include 19 smartphones and 2 smart TV boxes. “Min # Persistent”
and “Min # Unsupported” indicate the required number of processes to succeed an attack using a persistent command and an
unsupported command, respectively.
Device Model
System Version
Affected Min # Persistent Min # Unsupported
x times more
Pixel 2
Pixel
Pixel XL
Nexus 6P
Nexus 5X
Nexus 5
Xiaomi 6
Xiaomi 4
Xiaomi Note
Huawei nova 2
Huawei P8
Smartisan Pro2
Smartisan Pro
Meizu Meilan2
Coolpad 7270
Tencent 1v
Skyworth T2
Samsung Galaxy Note4
Meizu Meilan Note3
Android 9.0 and 8.1
Android 8.1
Android 8.1 and 7.1
Android 7.1
Android 6.0.1
Android 5.1 and 4.2
MIUI 10.0 (Android 8.0)
MIUI 8 (Android 6.0.1)
MIUI 8 (Android 6.0.1)
EMUI 8.0 (Android 8.0)
EMUI 3.1 (Android 5.0)
Smartisan OS 6.1.1 (Android 7.1.1)
Smartisan OS 3.7.3 (Android 7.1.1)
Android 6.0.1
Flyme 6.1 (Android 5.1)
Flyme 4.5 (Android 5.1)
Android 4.2.2
Android 6.0
Android 4.4
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
1510
1280
1280
840
560
450
1640
480
750
2830
800
1170
960
720
600
450
80
350
190
5530
5090
5090
3600
3490
2210
6270
2370
3250
7600
3520
3960
3040
2490
2020
1770
500
2100
1680
3.66
3.98
3.98
4.29
6.23
4.91
3.82
4.94
4.33
2.69
4.40
3.38
3.17
3.46
3.37
3.93
6.25
6.00
8.84
services are starved and blocked. Also, we suspect that sometimes
the attack leads to the computing resource exhaustion due to
the large number of running processes. The log message from
the Android watchdog depends on which situation triggers the
watchdog first.
Non-persistent commands and unsupported commands. Apart from
the persistent commands, the rest commands are non-persistent
commands and the unsupported commands. We classify them as one
category because they share the same underlying reason in causing
a system failure. Both of them cannot occupy system or device
resources for a long time. The non-persistent commands exit once
the task is completed, and the unsupported commands exit once the
command is alerted unsupported. Taking advantage of the weak
management of the native process, the PoC app can fork a large
number of the processes running such commands. Under the attack
using this category of commands, the error messages are generally
“block in handler”, which means the Android watchdog monitors
the overtime situation first. We conjecture that a large number of
processes lead to the surge of the number of folders and files in the
storage resources, e.g., /proc, which slows down the access from
critical system services, e.g., traversing the directories to gather
process information. And most importantly, these processes exhaust
the device computing resources, which leaves limited computing
resources to critical system services. Both situations make the
operation in critical services exceed the watchdog preset time, and
finally trigger the recovering process.
To better understand the different effects of the persistent com-
mands and non-persistent/unsupported commands, we compare
the required number of processes to launch a successful attack
using a risky persistent command and an unsupported command,
respectively. The results can be found in the last three columns
in Table 4. We can see that it requires much fewer processes to
launch an attack using persistent comparing to using unsupported
command. The last column shows how many times more processes
it requires using unsupported commands than using persistent
commands. This experiment helps to understand the different
contributions of the two different types of commands. It also
indicates that occupying the system resources is more effective
than exhausting the device computing resources when launching
such an attack.
Observation #2. The second interesting observation is watch-
dog’s failure in recovering the system from the attack in Android
8.0 and 9.0. Android is able to reboot itself from the freeze in
versions lower than 8.0, however, Android systems with version
8.0 and 9.0 are prone to be frozen forever until a manual reboot
by long pressing the power button. Watchdog is the last defense
to ensure the running of the Android system. In case any failure