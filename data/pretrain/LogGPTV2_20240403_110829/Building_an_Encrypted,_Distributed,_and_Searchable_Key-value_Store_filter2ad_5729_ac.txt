derlying values by matched or close histograms [26]. While
in Construction II, the label P (Ka, R||C) does not disclose
the above information for both data access and data relo-
cation. From the perspective of security, we adopt Con-
struction II in our system prototype, and based on which,
we present two basic APIs later for the secure access of the
encrypted KV store.
3.1.3 Extensions to Other Data Models
In addition to column-oriented data, our system can also
extend to other data models by mapping them to a set of
KV pairs just like the recent development on NoSQL data
stores called multi-model databases [13, 14, 17]. Here, we
use two other common types of data as examples, i.e., graph
data and document data.
On the support of graph data: For the graphs, they
are essentially structured data. As an example, a social
graph is used to represent the user connections in social
network applications. In general, the social connections of
each user are stored in the form of adjacency list: adj(u) =
{u1,··· , um}, where u is the user id, and {u1,··· , um} are
the ids of the user’s friends. To map adj(u) to KV pairs, we
resort to a self-incremental counter c. The KV pairs for the
user u are constructed as:
{(cid:104)G(P (Ku, u), c), Enc(Kc, uc)(cid:105)}m
Ku and Kc are the private keys, and c is increased from
1 to m. To fetch the adjacency list, the client generates
P (Ku, u) for the dispatcher. Then the dispatcher computes
and routes G(P (K, u), c) by increasing c incrementally until
the label does not exist in the encrypted KV store.
On the support of document data: For the documents,
they are objects associated with a unique document id Fid.
We store them as id and document pairs, if the size of doc-
ument does not exceed the size limit of data values, i.e.,
(P (Kid, Fid, Enc(KF , F )), where Kid and KF are the pri-
vate keys, and F is the document. If the document is too
large, it is required to be split into smaller chunks with mod-
erate sizes. Given a document F = {f1,··· , fm} with m
chunks of the same size (the last one is padded if needed),
the KV pairs to the document are constructed as:
{(cid:104)G(P (Kid, Fid)), c), Enc(KF , fc)(cid:105)}m
Kid and KF are the private keys, and c is increased from 1 to
m. To retrieve the document, the client sends P (Kid, Fid) to
the dispatcher. The encrypted chunks are fetched by com-
puting G(P (Kid, Fid), c) with the incremental c. After all
the chunks are returned, they are decrypted and concate-
nated as a complete ﬁle at the client.
3.1.4 Basic Requests for Encrypted Key-value Stores
In our system, two basic APIs Put and Get are provided
to support retrieval and update on a single encrypted data
value. Implementing Put and Get has two requirements. One
is to demand our system to keep data conﬁdential during
each request. The other is to require the requests to main-
tain consistency across data replicas if the nodes encounter
accidental failure. The implementation of Put and Get is
presented in Algorithm 1 and Algorithm 2 respectively. For
551Algorithm 3: Build encrypted local indexes
Function: Build(K, R, C, V)
Data: Private key: K; Row name set: R; Column
attribute set: C; Data values:V.
Result: Encrypted index: I.
begin
I : {I1,··· , In} ← init(); // init index of n nodes
for i = 1 to n do
KC ← H(K, i);
for C = C1,··· , C|C| do
init counters c for C : {c1 ← 1,··· , cn ← 1};
for ∀v ∈ V associated with C do
l∗ ← P (Ka, R||C), where R ∈ R;
i ← route(l∗);
choose Ii ∈ I, ci ∈ c for node i;
t1 ← F1(KC , 1||C), t2 ← F2(KC , 2||C);
α ← G1(t1, ci);
β ← G2(t2, ci) ⊕ l∗;
insert(α, β);
ci + +;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
a given request, the client generates the pseudo-random la-
bel P (Ka, R||C), and then sends it to the dispatcher for
request routing. With the label, the dispatcher locates the
node from the consistent hash ring. By using the same label,
the target node will ﬁnd the encrypted value.
The reliability and availability in distributed systems are
ensured by replication. In our prototype, we follow the gen-
eral approach used by DynamoDB [11] such that the data
replicas reside at the next r nodes clockwise to the ﬁrst cho-
sen node, where r is the number of replicas. To ensure the
consistency between them, we adopt the quorum-based pro-
tocol [36] to implement the two APIs, which is widely used
in distributed systems. The protocol complies with the rule
such that Nr + Nw > N , where Nr is the number of nodes
with replicas that perform Get successfully, and Nw is the
number of nodes with replicas that perform Put successfully.
We note that the replicas are identical for each encrypted
value in current design. In this paper, the adversary is as-
sumed to be passive, who will not modify or delete the data
maliciously. Thus, revealing the equality of replicas seems
to be harmless to the data conﬁdentiality. In future, we will
explore secure replication schemes via secret sharing or en-
coding techniques [2, 24] to hide the equality of replicas and
achieve stronger data protection.
3.2 Encrypted Local Indexes
To support secure and eﬃcient queries over encrypted
data, our system needs a general framework which can
support various encrypted indexing techniques. Given en-
crypted secondary attributes, the matched encrypted data
values should be pulled out from the index without harming
the data conﬁdentiality. As the instantiation for column-
oriented data, we aim to support secure search queries on
column attributes. In our context, the basic design consid-
erations include space eﬃciency, query eﬃciency, and index
scalability. Accordingly, we explore symmetric-key based in-
dexes which are studied thoroughly in searchable symmet-
ric encryption (SSE) [5, 6, 10, 19]. The SSE-based indexes
achieve sublinear search time with controlled information
leakage. Yet, most of them are neither space eﬃcient nor
scalable for very large scale datasets. Thus, we are inter-
ested in the design with optimal space complexity and good
scalability [5].
As prior SSE-based indexes are not designed for dis-
tributed systems, they do not speciﬁcally consider the lo-
cality of the data and the index. Even if they can be ap-
plied, painful communication overhead will be introduced
since the data and the index are accessed on diﬀerent nodes.
Besides, they hardly scale in an incremental way. When
the volume of data exceeds the index size, it is inevitable
to rebuild the entire index. Instead, we propose to design a
framework that support known constructions of encrypted
indexes. And the objective is to build encrypted local in-
dexes for secure queries over distributed and encrypted data,
which is already shown practical in NoSQL systems [11, 25].
Encrypted local index construction: For the column-
oriented data model, our system indexes the data with same
column attributes.
In general, such column index can be
treated as an invert index, where the attributes and the as-
sociated values are stored in a list. Considering the locality
of data and index, we integrate the proposed secure data
partition algorithm to design a group of fully distributed lo-
cal indexes. Each node is enabled to query the encrypted
local index for its own encrypted data. As mentioned, we
adopt the SSE index construction in [5] for space eﬃciency
and easy implementation. In particular, this encrypted in-
dex is essentially an encrypted dictionary, so the KV store
can be directly treated as the underlying data structure for
the index. The implementation overhead is minimized.
The building procedure of the encrypted index is pre-
sented in Algorithm 3. We also transform the column in-
dex into the encrypted KV pairs. Here, R and C are the
sets of the row names and the column attributes respec-
tively. the token α is generated via PRF on the inputs of
a column attribute C and a local counter ci for node i, i.e.,
α = G1(t1, c), where t1 = F1(KC , 1||C), and β is a masked
label l∗ of the encrypted data values, i.e., β = G2(t2, ci)⊕l∗,
where t2 = F2(KC , 2||C). We note that the building process
is suitable for such a case that when one party wants to
import a large number of new data into our system. Al-
ternatively, the client can compute α and β individually for
each newly inserted data. From the construction, the index
space complexity achieves optimal, i.e., O(n), where n is the
number of indexed data values.
Remarks: The proposed encrypted local indexes are read-
ily built for various types of attributes in other data models.
For example, the metadata in document data are treated
as the attributes to access the data in speciﬁc ﬁelds of doc-
uments. Moreover, secure keyword search can be further
enabled within the encrypted data with matched attributes.
For reliability, the index can be periodically dumped into
the KV store. Besides, it can be synchronized in background
threads across replication nodes for availability and consis-
tency just like the plaintext systems [23].
Secure Query Operation
3.2.1
With the encrypted local indexes, the encrypted data val-
ues for a given attribute can eﬃciently be accessed. The se-
cure query operation is presented in Algorithm 4. The client
ﬁrst generates secure tokens {t1, t2}n for total n nodes. After
the tokens are received, the local index is enumerated, i.e.,
computing α via G1(t1, ci) to get β, and then unmasking β
552Algorithm 4: Secure Query on a given attribute
Function: Query(K, C)
Data: Private key: K; Queried column attribute: C.
Result: Result encrypted values:Vr.
begin
client:
for i = 1 to n do
KC ← H(K, i);
t1 ← F1(KC , 1||C), t2 ← F2(KC , 2||C);
send {t1, t2}n to the dispatcher;
for node = 1,··· , n do
ci ← 1;
α ← G1(t1, ci);
while ﬁnd (α) (cid:54)= ⊥ do
β ← f ind(α);
l∗ ← β ⊕ G2(t2, ci);
v∗ ← get(l∗);
Add v∗ to Vr;
ci + +;
α ← G1(t1, ci);
12
3
4
5
6
7
8
9
10
11
12
13
14
15
via XORing G2(t2, ci) to have the label l∗. Based on l∗, the
encrypted value v∗ is sent back to the client. By considering
data locality, each local index is processed in parallel.
Next, we will show how our proposed framework for lo-
cal indexes can further support secure rich queries such as
count, range, and aggregation on the encrypted data. As the
framework integrates the secure data partition algorithm, all
the latest secure query designs will easily be incorporated to
realize various encrypted local indexes with the ability of
parallel processing.
On the support of equality check: For the queries on
equality checking and counting, one can use deterministic
encryption (DET) which preserves the equality of the un-
derlying values. To improve the security, one can apply ran-
domized encryption on the DET ciphertext [32]. But this
approach requires the decryption of the queried column for
equality check. As a result, the equality of DET ciphertext
is revealed as long as the column is queried.
To achieve better security, we propose a token matching
based approach, where the token securely encodes the in-
dexed data value. Such design only discloses the equality
of the underlying values for a given query value. Explic-
itly, we append another token γ = G3(t3, ci) to β, where
t3 = F3(KC , 3||C||v). And the counter ci ensures that γ
is diﬀerent for the data with same underlying values. As a
result, another token t3 will be generated for each node to
conduct equality checking, i.e., computing γ = G3(t3, ci) for
the check. Due to the deterministic property of PRF, only
if the underlying values are equal, γ will be matched. The
equality of other encrypted values is not disclosed.
On the support of other rich queries: To further sup-
port rich operators and functions, we can apply property-
preserved encryption and homomorphic encryption, similar
to prior private databases such as CryptDB [32]. We empha-
size that our proposed local index framework can fully lever-
age the ability of parallel processing in distributed systems;
that is, each node independently performs the computation
on its local encrypted values.
For range queries, one may adopt order-preserving encryp-
tion [3] or order-preserving index techniques [31]. Here, we
use the order-preserving encoding technique proposed in [31]
as an example. In this design, a tree based index is proposed,
where the order of the data value is encoded. This index can
be represented as the order and ciphertext pairs to be stored
in our KV store. The ciphertext here is a masked addressing
label of an encrypted data value. Likewise, based on the se-
cure data partition algorithm, each node can support secure
range queries on its own encrypted data.
For the aggregation query on encrypted data with
matched attributes, Paillier encryption [28] will be used for
data value encryption. Then each node will leverage our
proposed local index and conduct the query operation to
enumerate and aggregate the encrypted values. If the total
number of nodes is small, the intermediate results can be
directly sent back to the client for ﬁnalization. Otherwise,
the intermediate results can also be aggregated at some ded-
icated nodes for further reduction and ﬁnalization.
Remarks: The proposed framework of encrypted local in-
dexes requires the client to generate tokens for each node.
Thus, the number of tokens scales linearly with the number
of the nodes. If we adopt the existing SSE-based index as