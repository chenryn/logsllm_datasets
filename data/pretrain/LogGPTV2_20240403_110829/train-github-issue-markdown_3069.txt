## Bug Report
**Current Behavior**  
When setting a value to an object using a dynamic + numeric key  
The key is converted to a string (expected)  
When I then use destructuring to receive the value it works using the numeric
key  
When I also take the `...rest` of the object  
Then I expect the rest not to contain the previously destructured key
BUT the key is still present in the rest
**Input Code**  
REPL link (See console)
    const key = 2;
    const state = { [key]: 'foo', bar: 'baz' };
    const { [key]: pluck, ...rest } = state;
    const { [String(key)]: pluck2, ...rest2 } = state;
    console.assert(
      typeof Object.keys(state)[0] === 'string',
      `Expected ${Object.keys(state)[0]} to be a string`
    )
    console.assert(
      pluck === pluck2,
      `Expected ${pluck} to be ${pluck2}`
    )
    // This fails:
    console.assert(
      Object.keys(rest).length === Object.keys(rest2).length,
      `Expected ${JSON.stringify(rest)} to equal ${JSON.stringify(rest2)}`
    )
**Expected behavior/code**
  1. The destructured key should not be contained in rest even if a numeric key is used for destructuring
  2. The assertions in above code should not throw when code is transpiled with babel and evaluated
**Babel Configuration (.babelrc, package.json, cli command)**
    {
      "presets": ["preset-stage-3"]
    }
**Environment**
  * Babel version(s): `v6.26.0` (REPL), `v7.2.2` (my machine)
  * Node/npm version: Node 11.4.0/npm 6.4.1
  * OS: MacOS 10.14.1
  * Monorepo: ü§∑‚Äç‚ôÇÔ∏è
  * How you are using Babel: loader
**Additional context/Screenshots**  
Works as expected in Chrome + Firefox Console