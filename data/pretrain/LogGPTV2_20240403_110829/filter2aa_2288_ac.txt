{
command.append(" -b ").append(buffer);
} else { throw new IOException("Requested device does not exist."); }
process = Runtime.getRuntime().exec(command.toString());
input = process.getInputStream();
reader = new BufferedReader(new InputStreamReader(input));
}
...
}
LOGMONITOR
public class LogMonitor {
...
private void monitor(LogSource source)
{
while (running)
{
String data = source.nextEntry();
List matches = this.filter.matches(data);
if (matches.isEmpty() == false)
{
trackEntry(source.getFacility(), data, matches);
}
}
   }
...
}
MONITOR SERVICE
public class LogMonitorService extends Service {
...
   public void onCreate() {
   ...
     this.monitor = new LogMonitor();
     for (String buffer : LogSource.ALLDEVICES)
     {
      ...
monitor.addSource(new LogcatDevice(buffer));
      ...
     }
   ...
   }
   public int onStartCommand(Intent intent, int flags, int startId) {
        return START_STICKY;
   }
}
SERVER
• Rails server supplies C&C and processes device data
• Supplies per-device policies
• Receives logs meeting policies
• Provides an interface to explore logs from multiple devices
• Extracts and post-processes log data
POLICIES, ETC.
• Threw out a few random keywords (insert, update, delete, intent, 
content, http, etc.)
• Picked a couple of pieces of data to toss around
• Setup initial expressions and started pushing data through devices.
DB_SAMPLE
• Logs the ﬁrst 64 characters of a sampling of queries
• Sample rate is based on query execution time
I/db_sample( 342): [/data/data/com.android.providers.media/
databases/external-115b1495.db,SELECT _id, _data, 
date_modified FROM audio,41,,9]
CONTENT_SAMPLE
• Similar to db_sample, but applies to content provider 
operations
I/content_query_sample( 1327): [content://com.android.contacts/
phone_lookup/%2B1415XXXXXXX,_id/lookup,,,386,,78]
• GET_TASKS
• DUMP
I/ActivityManager(   84): Starting activity: Intent { act=android.intent.action.MAIN cat=
[android.intent.category.LAUNCHER] ﬂg=0x10200000 cmp=com.infonow.bofa/
com.infonow.android.activity.RootActivity }
I/DEBUG   (   31): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
I/DEBUG   (   31): Build ﬁngerprint: 'generic/google_sdk/generic/:2.2/FRF42/36942:eng/test-
keys'
I/DEBUG   (   31): pid: 59, tid: 190  >>> system_server  { 
        :key => 'MY_API_KEY', :base => 10, 
        :mcc => mcc, :mnc => mnc, :lac => lac, :cellid => cellid
    })
    return response["position"]
  end
end
D/WeatherClockWidget(   114):  Query Weather data by Latitude: 
37.779874, Longitude: -122.397273
V/GpsLocationProvider(   89): reportLocation lat: 37.78005123138428 
long: -122.39708304405212 timestamp: 1280180485000
V/libgps  (   89): lat: 37.780051, long: -122.397083
D/libgps  ( 1020): GpsInterface_inject_location( 37.780187, 
-122.397607, 56.000 )
ACCESS_FINE_LOCATION
WITH READ_LOGS
A STORY ... ABOUT 3 GUYS
HEADING DOWN 101 ...
TO SFO
AND HEAD TO VEGAS ...
ARRIVING AT MCCARRAN ...
TAKE A CAB ACROSS TOWN ...
TO CAESAR’S PALACE
TO DEFCON 18
THE ULTIMATE PERMISSION
Yes, We’re Talking About Root
# id
uid=0(root) gid=0(root)
THE ULTIMATE PERMISSION
• Phones ship locked down
• Everyone wants to use their phone to it’s full potential
• Communities surrounding the rooting of phones have formed
• Third party ROM’s available to users now
HOW DOES ONE GET ROOT?
• Android uses a Linux kernel (duh)
• Lookup old kernel vulns and see if they work!
• 1.5 (Cupcake) using 2.6.27 kernel
• 1.6 (Donut), 2.0, 2.1(Eclair) using 2.6.29
• 2.2 (Froyo) using 2.6.32
• 3.0 (Gingerbread) will use 2.6.33/34 (Q4/2010)
HOW DOES ONE GET ROOT?
• Old/unpatched libraries!
• suid binaries with vulns
• Pretty much any traditional way since this is Linux
CASE STUDY
• Similar to libudev vuln (CVE-2009-1185). Discovered by 
Sebastian Krahmer
• Patched in Android 4 days after exploit published 
• Failed check of NETLINK message origin 
(Did it come from the kernel? Or did a user send it?...)
•  Who was vulnerable to this?...
http://android.git.kernel.org/?p=platform/system/core.git;a=commit;h=5f5d5c8cef10f28950fa108a8bd86d55f11b7ef4
uevent origin vuln
CASE STUDY
• Rewrote exploit to run as JNI code from the APK
(With zero permissions!)
uevent origin vuln
CASE STUDY
• Rewrote exploit to run as JNI code from the APK
(With zero permissions!)
• Every ﬂagship phone...
uevent origin vuln
CASE STUDY
• Rewrote exploit to run as JNI code from the APK
(With zero permissions!)
• Every ﬂagship phone...
• ...Of every major carrier in the US
uevent origin vuln
CASE STUDY
• Rewrote exploit to run as JNI code from the APK
(With zero permissions!)
• Every ﬂagship phone...
• ...Of every major carrier in the US
• Oops.
uevent origin vuln
THE ROOTING PROBLEM
• People want their phones rooted
• Rooting is being viewed as a vehicle for modding
• Ignoring the large pink elephant – security issues
• Unwilling to make details public for fear of OEM ﬁxing bug
• Leaves everyone with major vulnerabilities
WHY ARE PEOPLE ROOTING
• Modding phones
• Patching process is slow; users want access to latest and 
greatest releases
• Tethering (Free additional features)
WHAT CAN YOU DO?
• Don’t assume lack of permissions means data is private
• Does the app really need READ_LOG permissions? 
(Probably not)
• Keep your phone patched up to date
Users
WHAT CAN  YOU DO?
• Users are trusting you with access to their private data
• Be careful what you do with that...
• Be paranoid about what you log
• If others don’t need to access your components, enforce an 
access permission
Developers
WHAT CAN YOU DO?
• See developer advice
• Set a good example for other developers!
• Why should they care if they leak private info if you are 
already doing it too?
• Please patch your libraries/kernels
OEMs
QUESTIONS?
Come see us in Track 1 Q/A room!
REFERENCES
• SDK Reference Docs
http://developer.android.com/reference/packages.html
• Jon Oberheide - Google’s Android Platform (CanSecWest 2009)
http://jon.oberheide.org/ﬁles/cansecwest09-android.pdf
• Jesse Burns - Exploratory Android Surgery (BlackHat USA 2009)
https://www.isecpartners.com/ﬁles/iSEC_Android_Exploratory_Blackhat_2009.pdf
• CVE-2009-1185 - https://bugzilla.redhat.com/show_bug.cgi?id=495051
• http://c-skills.blogspot.com/2010/07/android-trickery.html