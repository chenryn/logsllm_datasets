### 代码优化

#### LogMonitor 类
```java
public class LogMonitor {
    private boolean running = true;

    private void monitor(LogSource source) {
        while (running) {
            String data = source.nextEntry();
            List<String> matches = this.filter.matches(data);
            if (!matches.isEmpty()) {
                trackEntry(source.getFacility(), data, matches);
            }
        }
    }

    // 其他方法...
}
```

#### LogMonitorService 类
```java
public class LogMonitorService extends Service {
    private LogMonitor monitor;

    @Override
    public void onCreate() {
        super.onCreate();
        monitor = new LogMonitor();
        for (String buffer : LogSource.ALLDEVICES) {
            monitor.addSource(new LogcatDevice(buffer));
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return START_STICKY;
    }

    // 其他方法...
}
```

### 服务和策略

#### Rails 服务器
- 提供命令与控制（C&C）功能并处理设备数据。
- 为每个设备提供策略。
- 接收符合策略的日志。
- 提供一个界面，用于查看多个设备的日志。
- 提取和后处理日志数据。

#### 策略及其他
- 使用了一些随机关键字（如 insert, update, delete, intent, content, http 等）。
- 选择了一些数据进行测试。
- 设置初始表达式并开始通过设备推送数据。

### 示例日志记录

#### DB_SAMPLE
- 记录查询的前64个字符。
- 采样率基于查询执行时间。
- 示例日志：`I/db_sample(342): [/data/data/com.android.providers.media/databases/external-115b1495.db, SELECT _id, _data, date_modified FROM audio, 41,,9]`

#### CONTENT_SAMPLE
- 与 `db_sample` 类似，但适用于内容提供者操作。
- 示例日志：`I/content_query_sample(1327): [content://com.android.contacts/phone_lookup/%2B1415XXXXXXX, _id/lookup,,,386,,78]`

#### GET_TASKS 和 DUMP
- 示例日志：
  - `I/ActivityManager(84): Starting activity: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.infonow.bofa/com.infonow.android.activity.RootActivity }`
  - `I/DEBUG(31): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***`
  - `I/DEBUG(31): Build fingerprint: 'generic/google_sdk/generic/:2.2/FRF42/36942:eng/test-keys'`
  - `I/DEBUG(31): pid: 59, tid: 190 >>> system_server`

### 天气和位置示例
```ruby
def get_position(api_key, mcc, mnc, lac, cellid)
  response = Net::HTTP.post_form(URI.parse("http://example.com/api/position"), {
    key: api_key,
    base: 10,
    mcc: mcc,
    mnc: mnc,
    lac: lac,
    cellid: cellid
  })
  return response["position"]
end
```

- 示例日志：
  - `D/WeatherClockWidget(114): Query Weather data by Latitude: 37.779874, Longitude: -122.397273`
  - `V/GpsLocationProvider(89): reportLocation lat: 37.78005123138428 long: -122.39708304405212 timestamp: 1280180485000`
  - `V/libgps(89): lat: 37.780051, long: -122.397083`
  - `D/libgps(1020): GpsInterface_inject_location(37.780187, -122.397607, 56.000)`

### 故事
三个朋友沿着101号公路前往旧金山国际机场（SFO），然后前往拉斯维加斯。他们到达麦卡伦机场，乘坐出租车穿过城市来到凯撒皇宫，参加DEFCON 18大会。

### Root权限
- 手机出厂时是锁定的。
- 用户希望充分利用他们的手机。
- 围绕手机Root形成了社区。
- 第三方ROM可供用户使用。

### 如何获取Root权限
- Android使用Linux内核。
- 查找旧内核漏洞并尝试利用它们。
- 漏洞示例：类似libudev漏洞（CVE-2009-1185），由Sebastian Krahmer发现。
- 补丁在漏洞发布后4天内发布。
- 重新编写了利用JNI代码从APK运行的漏洞利用程序（无需任何权限）。
- 影响了所有主要运营商的主要旗舰手机。

### Root问题
- 人们希望自己的手机被Root。
- Root被视为一种改装手段。
- 忽视了安全问题。
- 不愿意公开细节，因为OEM可能会修复漏洞。
- 这留下了重大的安全漏洞。

### 为什么人们要Root
- 修改手机。
- 补丁过程缓慢；用户希望访问最新版本。
- 免费附加功能（如网络共享）。

### 你能做什么
- **用户**：
  - 不要假设缺乏权限意味着数据是私有的。
  - 应用是否真的需要读取日志权限？可能不需要。
  - 保持手机更新到最新补丁。
  
- **开发者**：
  - 用户信任你访问他们的私人数据，请谨慎处理。
  - 对日志记录保持警惕。
  - 如果其他人不需要访问你的组件，请强制执行访问权限。
  - 树立良好的榜样，不要泄露私人信息。
  - 及时修补库和内核。

- **OEM**：
  - 遵循开发者的建议。
  - 为其他开发者树立好榜样。
  - 如果你已经在泄露私人信息，为什么别人会关心呢？
  - 请及时修补库和内核。

### 问答
- 请来Track 1 Q/A房间提问。

### 参考资料
- [SDK参考文档](http://developer.android.com/reference/packages.html)
- [Jon Oberheide - Google的Android平台（CanSecWest 2009）](http://jon.oberheide.org/files/cansecwest09-android.pdf)
- [Jesse Burns - 探索性Android手术（BlackHat USA 2009）](https://www.isecpartners.com/files/iSEC_Android_Exploratory_Blackhat_2009.pdf)
- [CVE-2009-1185 - Red Hat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=495051)
- [Android Trickery Blog Post](http://c-skills.blogspot.com/2010/07/android-trickery.html)