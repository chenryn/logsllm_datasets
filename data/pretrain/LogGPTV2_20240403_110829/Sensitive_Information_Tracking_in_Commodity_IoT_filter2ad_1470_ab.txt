cies of all ﬁelds deﬁned in the state and atomicState
objects. We label ﬁelds in those two objects with a new
taint label “state variable” and perform taint tracking. For
instance, the taintedVar variable in Listing 1 is labeled
with the state-variable taint by SAINT.
Call by Reﬂection. The Groovy language supports pro-
gramming by reﬂection (using the GString feature) [38],
which allows a method to be invoked by providing its
name as a string. For example, a method foo() can be
invoked by declaring a string name="foo" and thereafter
called by reﬂection through $name; see Listing 1 (Lines
10–19) for another example. This can be exploited if an at-
Figure 5: Taint tracking under backward ﬂow analysis.
the worklist and ﬁnds a deﬁnition for id on the ICFG; it
adds identiﬁers on the right-hand side of the deﬁnition
to the worklist; furthermore, the dependence between id
and the right-hand side identiﬁers are recorded in dep.
For ease of presentation, the algorithm treats parameter
passing in a function call as inter-procedural deﬁnitions.
To illustrate, we use the code in Fig. 5 as an exam-
ple. There is a sink call at place 1 . So the worklist
is initialized to be ((23:phone), (23:t)); for illustration,
we use line numbers instead of node information to la-
bel identiﬁers. Then, because of the function call at 2 ,
(16:temp cel) is added to the worklist and the depen-
dence (23:t, 16:[temp cel]) is recorded in dep. With
similar computation, the ﬁnal output dependence relation
for the example is as follows:
(23:t, 16:[temp cel]), (16:temp cel, 15:[temp, thld]),
(15:temp, 14:[ther.latestValue])
With the dependence relation computed and information
about taint sources, SAINT can easily construct a set of
possible data-leak paths from sources to sinks. For the
example, since the threshold value thld is a user-input
value (Lines 4 and 5 in Fig. 5), we get the following
possible data-leak path: 5:thld to 16:temp cel to 23:t.
In the next step, SAINT prunes infeasible data-leak
paths using path- and context-sensitivity. For a path, it
collects the evaluation results of the predicates at condi-
tional branches and checks whether the conjunction of
those predicates (i.e., the path condition) is always false;
if so, the path is infeasible and discarded(cid:63). For instance,
if a path goes through two conditional branches and the
ﬁrst branch evaluates x > 1 to true and the second eval-
uates x  c); thus,
SAINT implemented its simple custom checker for path
conditions. Furthermore, SAINT throws away paths that
do not match function calls and returns (using depth-one
call-site sensitivity). At the end of the pruning process,
we get a set of feasible paths from taint sources to sinks.
4.2.2 SmartThings Idiosyncrasies
Our initial prototype implementation of SAINT was based
on the taint tracking approach we discussed. However,
SmartThings platform has a number of idiosyncrasies that
(cid:63)Similar to how symbolic execution prunes paths via path conditions.
USENIX Association
27th USENIX Security Symposium    1693
preferences	{				section(“Select	thermostat	device”)	{					input	“ther”,	"capability.thermostat”}			section(“threshold	value”){				input	“thld”,	“number”}		}		def	initialize()	{			subscribe(app,	appHandler)	}		def	appHandler(evt)	{			f()	}	def	f(){			temp=ther.latestValue("temperature")			temp_cel=convert	(temp)	+	thld			bar(temp_cel)	}		def	convert(t){			return((t-32)*5)/9)	}		def	bar(t){			ther.setHeatingSetpoint(t)				sendSMS(phone,	“set	to	${t}”)			}	134251:	2:	3:	4:	5:	6:		7:	8:	9:		10:	11:	12:		13:	14:	15:	16:	17:		18:	19:	20:				21:	22:	23:	24:		Figure 6: Our SAINT data ﬂow analysis tool designed for IoT apps. The left region is the analysis frame, and the right region is the
output of an example IoT app for a speciﬁc data ﬂow evaluation.
tacker can control the string used in call by reﬂection [10],
e.g., if the code has name=httpGet(URL) and the URL
is read from an external server. While SmartThings does
not recommend using reﬂective calls, our study found that
ten apps in our corpus use this feature (see Sec. 5). To
handle calls by reﬂection, SAINT’s call graph construction
adds all methods in an app as possible call targets, as a
safe over-approximation. For the example in Listing 1,
SAINT adds both foo() and bar() methods to the targets
of the call by reﬂection in the call graph.
Web-service Applications. A web-service SmartThings
app allows external entities to access smart devices and
manage those devices. Such apps declare mappings re-
lating endpoints, HTTP operations, and callback meth-
ods. Listing 1 (Lines 20–33) presents a code snippet of a
real web-service app. The /switches endpoint handles
an HTTP GET request that returns the state information
of conﬁgured switches by calling the listSwitches()
method; the /switches/:command endpoint handles
a PUT request that invokes the updateSwitches()
method to turn on or off the switches. The ﬁrst prototype
of SAINT did not ﬂag the web-service apps for leaking
sensitive data. However, our manual investigation showed
that the web-service apps respond to HTTP GET, PUT,
POST, and DELETE requests from external services and
may leak sensitive data. To correct this, we modiﬁed the
taint-tracking algorithm to analyze what call back meth-
ods are declared through the mappings declaration key-
word [42]. Sensitive data leaked through those call back
methods are then ﬂagged by SAINT.
Closures and Groovy-Speciﬁc Operations. The
Kohsuke sandbox enforced in SmartThings allows for
closures and other Groovy-speciﬁc operations such
as array insertions via 	$plugName	[Device	InformaAon]	Data	Flow	Path	2:	sendSms	-->	state.msg	[State	Variable]	Data	Flow	Path	3:	SendPush-->	state.msg	[State	Variable]		Finding	#1:	PotenAal	leak	of	State	Variable:		msg		Finding	#2:	PotenAal	leak	of	Device	InformaAon:	plugName	Finding	#3:	Recipient	is	deﬁned	by	user	Finding	#4:	Content	of	the	message	is	deﬁned	by	developer	Analysis	Result	Stacktrace	IoT	Test	Suite	Ofﬁcial† Third party
Taint Sources
Taint Sinks
App functionality
Convenience
Security and Safety
Personal Care
Home Automation
Entertainment
Smart Transport
Total
† Ten ofﬁcial apps and one third-party app do not request permission to devices, yet SmartThings platform explicitly grants access to device
information such as hub ID and manufacturer name (not shown).
Device State Device Info† Location User Inputs State Var.
43.4%
31.0%
60.0%
52.8%
60.0%
66.7%
51.9%
37.9%
50.0%
55.6%
70.0%
66.7%
Internet Messaging
25.5%
3.4%
20.0%
8.3%
20.0%
33.3%
43.4%
86.2%
70.0%
40.3%
10.0%
66.7%
97.2%
100%
90.0%
100%
100%
100%
96.2%
100%
90.0%
98.6%
90.0%
100%
87.7%
100%
60.0%
77.8%
70.0%
100%
Nr.
80
19
10
48
10
1
168
Nr.
26
10
0
24
0
2
62
Table 1: Applications grouped by permissions to taint sources and sinks. App functionality shows the diversity of studied apps.
SAINT’s taint analysis also uses Groovy AST visitors.
It extends the ASTBrowser class implemented in the
Groovy Swing console, which allows a user to enter and
run Groovy scripts [13]. The implementation hooks into
the IR of an app in the console and dumps information
to the TreeNodeMaker class; the information includes
an AST node’s children, parent, and all properties built
at the pre-deﬁned compilation phase. This allows us to
acquire the full AST including the resolved classes, static
imports, the scope of variables, method calls, and inter-
faces accessed in an app. SAINT then uses Groovy visitors
to traverse IR’s ICFG and performs taint tracking on it.
Output of SAINT. Fig. 6 presents the screenshot of
SAINT’s analysis result on a sample app. A warning report
by SAINT contains the following information: (1) full data
ﬂow paths between taint sources and sinks, (2) the taint
labels of sensitive data, and (3) taint sink information,
including the hostname or URL, and contact information.
5 Application Study
This section reports our experience of applying SAINT
on SmartThings apps to analyze how 230 IoT apps use
privacy-sensitive data. Our study shows that approxi-
mately two-thirds of apps access a variety of sensitive
sources, and 138 of them send sensitive data to taint sinks
including the Internet and messaging channels. We also
introduce an IoT-speciﬁc test suite called IOTBENCH [20].
The test suite includes 19 hand-crafted malicious apps that
are designed to evaluate taint analysis tools such as SAINT.
We next present our taint analysis results by focusing on
several research questions:
RQ1 What are the potential taint sources whose data can
be leaked? And, what are the potential taint sinks
that can leak data? (Sec 5.1)
RQ2 What is the impact of implicit ﬂow tracking on false
RQ3 What is the accuracy of SAINT on IOTBENCH apps?
positives? (Sec. 5.2)
(Sec. 5.3)
Experimental Setup. In late 2017, we obtained 168 ofﬁ-
cial apps from the SmartThings GitHub repository [39]
and 62 community-contributed third-party apps from the
ofﬁcial SmartThings community forum [37]. Table 1 cate-
gorizes the apps along with their requested permissions at
install time. We determined the functionality of an app by
checking its category in the SmartThings online store and
also the deﬁnition block in the app’s source code imple-
mented by its developer. For instance, the “entertainment”
category includes an app to control a device’s speaker
volume. We studied each app by downloading the source
code and running an analysis with SAINT. The ofﬁcial
and third-party apps grant access to 49 and 37 “different”
device types, respectively. The analyzed apps often imple-
ment SmartThings and Groovy-speciﬁc properties. Out
of 168 ofﬁcial apps, SAINT ﬂags nine apps using call by
reﬂection, 74 declaring state variables, 37 implementing
closures, and 23 using the OAuth2 protocol; out of 62
third-party apps, the results are one, 34, nine, and six,
respectively. SAINT identiﬁes when sensitive information
is leaked via the internet and messaging services.
Performance. We assess the performance of SAINT on
230 apps. It took less than 16 minutes to analyze all apps.
The experiment was performed on a laptop computer with
a 2.6GHz 2-core Intel i5 processor and 8GB RAM, using
Oracle’s Java Runtime 1.8 (64 bit) in its default settings.
The average run-time for an app was 23±5 seconds.
5.1 Data Flow Analysis
In this subsection, we report experimental results of track-
ing explicit “sensitive” data ﬂows by SAINT in IoT apps
(implicit ﬂows are considered in Sec. 5.2). Table 2 sum-
marizes data ﬂows via Internet and messaging services
reported by SAINT. It ﬂagged 92 out of 168 ofﬁcial, and
46 out of 62 third-party apps have data ﬂows from taint
sources to taint sinks. We manually checked the data
ﬂows and veriﬁed that all reported ones are true posi-
tives. The manual checking process was straightforward
to perform since the SmartThings apps are comparatively
smaller than the apps found in other domains such as mo-
bile phone apps. Finally, although user inputs and state
variables may over-approximate sources of sensitive in-
formation, during manual checking, we made sure the
reported data ﬂows do include sensitive data.
SAINT labels each piece of ﬂow information with the
sink interface, the remote hostname, the URL if the sink
USENIX Association
27th USENIX Security Symposium    1695
Apps
Ofﬁcial
Third-party
Total
Nr.
92
46
138
Internet
24 (26.1%)
10 (21.7%)
34 (24.6%)
Messaging
63 (68.5%)
36 (78.3%)
99 (71.8%)
Both
5 (5.4%)
0 (0%)
5 (3.6%)
Table 2: Number of apps sending sensitive information through
Internet and Messaging taint sinks.
Figure 7: Percentages of apps sending sensitive data for speciﬁc
kinds of taint sources. The absolute numbers of apps are also
presented after the # symbol.
is the Internet, and contact information if the sink is a
messaging service. In Table 2, the Internet column lists
the number of apps that include only the taint source of
the Internet. The Messaging column lists the number of
apps that include only the taint source of some messaging
service. 71.8% of the analyzed apps are conﬁgured to send
an SMS message or a push notiﬁcation. As shown in the
table, 47.2% more apps include taint source in messaging
services than the Internet. Finally, the Both column lists
the number of apps (3.6% of apps) that includes a taint
source through both the Internet and messaging services.
Taint Source Analysis. Fig. 7 shows the percentages of
apps that have sensitive data ﬂows of a speciﬁc kind of
taint sources. To measure this, we used sensitive data’s
taint labels provided by SAINT, which precisely describe
what sources the data comes from. More than half of
the apps send user inputs, device states, and device in-
formation. Approximately, one-ninth of the apps expose
location information and values in state variables. We
found that 64 out of 92 ofﬁcial apps and 30 out of 46
third-party apps send multiple kinds of data (e.g., both
device state and location information).
To better characterize the taint sources, we present the
types of taint sources ﬂagged by SAINT for apps that
sends data in Table 3. There are 92 ofﬁcial apps that send
sensitive data, marked with “O1” to “O92”, and 46 third-
party apps that send sensitive data, marked with “T1” to
“T46”. Out of 92 ofﬁcial apps, 28 apps (O1-O28) send
one single kind of sensitive data, 16 apps (O29-O44) send
two kinds of sensitive data, and the remaining 48 apps
(O45-O92) send more than two and at most four kinds
of sensitive data. Similar results are also identiﬁed for
third-party apps. Our investigation suggests that apps at
the top of the Table 3 implement simpler tasks such as
managing motion-activated light switches; the apps at
Table 3: Data ﬂow behavior of each ofﬁcial (O1-O92) and third-
party (T1-T46) app. 43.2% of the ofﬁcial and 25.8% of the
third-party apps do not send sensitive data (not shown).
the bottom tend to manage and control more devices to
perform complex tasks such as automating many devices
in a smart home. However, data ﬂows depend on the
functionality of the apps. For instance, a security and
safety app managing few devices may send more types of
sensitive data than an app designed for convenience that
manages many devices.
In general, we found that there is no close relationship
between the number of devices an app manages and the
number of sensitive data ﬂows. Fig. 8 shows the number
of apps for each combination of device numbers and num-
bers of data ﬂows. As an example, there are two apps that
1696    27th USENIX Security Symposium
USENIX Association
0102030405060708090100%AppsDevice stateDevice info.User inputLocationState variable1.2.1.3.3.2.4.4.5.#57#29#28#4#34#765.Offical apps#60#10#9Third-party apps#123.4.5.2.1.1			2				3		4			5	O1													O47													T1											O2													O48													T2											O3													O49													T3											O4													O50													T4											O5													O51													T5											O6													O52													T6											O7													O53													T7											O8													O54													T8											O9													O55													T9											O10													O56													T10											O11													O57													T11											O12													O58													T12											O13													O59													T13											O14													O60													T14											O15													O61													T15											O16													O62													T16											O17													O63													T17											O18													O64													T18											O19													O65													T19											O20													O66													T20											O21													O67													T21											O22													O68													T22											O23													O69													T23											O24													O70													T24											O25													O71													T25											O26													O72													T26											O27													O73													T27											O28													O74													T28											O29													O75													T29											O30													O76													T30											O31													O77													T31											O32													O78													T32											O33													O79													T33											O34													O80													T34											O35													O81													T35											O36													O82													T36											O37													O83													T37											O38													O84													T38											O39													O85													T39											O40													O86													T40											O41													O87													T41											O42													O88													T42											O43													O89													T43											O44													O90													T44											O45													O91													T45											O46													O92													T46											O	=	Oﬃcial	app	T	=	Third-party	app	1	=	Device	State				2	=	Device	InformaDon	3	=	User	Input				4	=	LocaDon				5	=	State	variable							1			2			3			4			5	1			2			3			4			5	Figure 8: The number of devices vs. the number of data ﬂows
based on taint labels in ofﬁcial (O) and third-party (T) apps. The
numbers in the grids show the frequency of the apps.
manage seven devices and have four data ﬂows. As shown
in the ﬁgure, 15 ofﬁcial apps with a single device have
three data ﬂows, while an app with 16 devices has a single
data ﬂow. Similar results hold for third-party apps. Out of
46 third-party apps, 16 apps (T1-T16) have a single data
ﬂow, and the remaining 30 apps (T17-T46) have two to
four data ﬂows.
Taint Sink Analysis. For a data ﬂow, SAINT reports the
interface name and the recipient (contact information, re-
mote hostname or URL) deﬁned in a taint sink. We use
this information to analyze the number of different (a)
sink interfaces and (b) recipients deﬁned in each app. For
(a), we consider apps that invoke the same sink interface
such as sendSMS() multiple times a single data ﬂow, yet
sendNotification() is considered a different interface
from sendSMS(). We note that for taint sink analysis we
have a more reﬁned notion of sinks than just distinguish-
ing between the Internet and the messaging services; in
particular, we consider 11 Internet and seven messaging
interfaces deﬁned in SmartThings (see Appendix C). For
(b), we report the number of different recipients in invo-
cations of sink interfaces used in an app.
A vast majority of apps contain data ﬂows through ei-
ther a push notiﬁcation or an SMS message or makes a
few external requests to integrate external devices with
SmartThings. Fig. 9a presents the CDF of the different
sinks deﬁned in ofﬁcial and third-party apps. Approxi-
mately, 90% of the ofﬁcial apps contain at most four, and
90% of the third-party apps contain at most three different
invocations of sink interfaces (including apps that do not
invoke sink interfaces). We also study the recipients at
each taint sink reported in an app by SAINT. We ﬁrst get
the contact information for messaging, and hostname and
URL for the Internet sinks. We then collect different con-
tact addresses and URL paths to determine the recipients.
Fig. 9b shows the CDF of the number of recipients deﬁned
in apps. The vast majority of apps involve a few recipi-
ents; they typically send SMS and push notiﬁcations to
recipients. Approximately, 90% of the ofﬁcial apps have
less than three sink recipients, and 90% of the third-party
apps deﬁne at most two different recipients (including
apps that do not implement taint sinks). A large number
of recipients observed in ofﬁcial apps respond to external
HTTP requests. For instance, a web-service app connects
(a)
(b)
Figure 9: Cumulative Distribution Function (CDF) of the num-
ber of different (a) sink interfaces and (b) recipients (contact
information, remote hostname or URL) identiﬁed by SAINT.
to a user’s devices, accesses their events and commands,
and uses their state information to perform actions, and an
app allows users to stream their device events to a remote
server for data analysis and visualization. This leads to
using a variety of taint sinks and URLs to access and
manage various devices.
Recipient and Content Analysis.When a piece of data
is transmitted to a sink, SAINT reports information about
who deﬁnes the recipient and content of the data. The
recipient refers to who receives the message in a mes-
saging service or who is the destination in Internet com-
munication. The content refers to the message used in
a messaging service or the parameter of a request (e.g.,
HTTP GET or PUT) used in Internet communication. For
instance, a call to sendSMS() requires a phone number as
the recipient and a message to that recipient. We extended
SAINT to output whether the recipient and the content of
a sink-interface call are speciﬁed by a user at install time,
by a developer via some hard-coded string in an app’s
source code, or by an external entity such as a remote
server (in this case, a remote server sends the recipient
information, and then the app sends sensitive data to the
recipient). The knowledge about who deﬁnes the recipient
and content of data to a sink call enables a reﬁned under-
standing of data ﬂow. In particular, this helps identify if
the recipient is authorized by a user, if sensitive data is
sent to a legitimate or malicious external server, and if the
app conforms to its functionality.
Table 4 presents the number of times a user, a developer,
or an external party speciﬁes the recipient and the content
used in a data ﬂow. The messaging rows of the table
tell that, in ofﬁcial apps, users specify recipients 154
times, while contents are speciﬁed by users ﬁve times
and 149 times by developers; for third-party apps, users
deﬁne recipients 67 times, while message contents are
speciﬁed by users ﬁve times, and 63 times by developers.
In contrast, message contents are often hard-coded in the
apps by developers. Table 4 shows a different story for
Internet-sink calls. In this case, recipients and contents are
often speciﬁed by developers and external services. An
app in which recipients and contents of Internet-sink call
are speciﬁed by external services is often a web-service
app. As detailed in Sec. 4.2.2, web-service apps expose
USENIX Association
27th USENIX Security Symposium    1697
Number	of	devices	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	Number	of	data	ﬂows	4	O			2	4					1																																									1	T			6									1	2																																																																																													3	O	3	15	13	3			2	1	1					1	1																															T			7	4					1	1									1																																																																																							2	O	1	7	5	2			1																																											T			4	1																													1																	1																																																									1	O	2	15	1	1	4	1	1	1					1											1																					T	1	7	1					1											3																													3	0246800.10.20.30.40.50.60.70.80.91CDFOfficial appsThird-party appsNumber of different exfiltrations010203000.10.20.30.40.50.60.70.80.91CDFOfficial appsThird-party appsNumber of different recipientsTaint sink analysis
Recipient deﬁned by
Content deﬁned by
User Developer External User Developer External
Taint Sinks Apps
154
Messaging Ofﬁcial
Third-party 67
Ofﬁcial
2
Third-party 0
149
63
54
13
0
0
48
13
0
0
40
12
0
0
44
12
5
4
0
0
Internet
Table 4: Recipient and content analysis of data ﬂows.
endpoints and respond to requests from external services.
These apps allow external services to access and manage
devices. Additionally, in some apps, developers hard-code
the recipients and contents of Internet communications to
send information to external remote servers.
Summary. Our study of 168 ofﬁcial and 62 third-party
SmartThings IoT apps shows the effectiveness of SAINT
in accurately detecting sensitive data ﬂows. SAINT ﬂagged
92 out of 168 ofﬁcial apps, and 46 out of 62 third-party
apps transmit at least one kind of sensitive data over a
sink-interface call. We analyzed reported data’s taint la-
bels provided by SAINT, which precisely describe the data
source. Using this information, we found that half of the
analyzed apps transmit at least three kinds of sensitive
data. We used sink interface names and recipients to ana-
lyze the number of different Internet and messaging inter-
faces and recipients in an app. Approximately, two-thirds
of the apps deﬁne at most two separate sink interfaces
and recipients. Moreover, we extended our analysis to
identify whether the recipient and the content of a sink-
interface call are speciﬁed by a user, a developer, or an
external entity. All recipients of messaging-service calls
are deﬁned by users, and approximately nine-tenths of
message contents are deﬁned by developers. For Internet
sinks, nine-tenths of the Internet recipients and contents
are speciﬁed by developers or external servers.
5.2
We repeated our experiments by turning on both explicit
and implicit ﬂows tracking. Approximately two-thirds
of the apps invoke some sink interface that is control-
dependent on sensitive tests. However and somewhat sur-
prisingly, there are only six extra warnings produced when
turning on implicit ﬂows. The reason we found is that
most of those sink calls already leak data through explicit
ﬂows. For example, in one app, x gets the state of a de-
vice x=currentState("device") and, when a user is
present, x is sent out via an SMS message; even though
there is an implicit ﬂow (because sending the message
depends on whether the user is present), there is also an
explicit ﬂow as the device information is sent out. The
six extra warnings are all about sending out hard-coded
strings: “Your mail has arrived!”, “Your ride is here!”, “No
one has fed the dog”, “Remember to take your medicine”,
“Potential intruder detected”, and “Gun case has moved!”.
These messages contain information in themselves and
are sent conditionally upon sensitive information; there-
fore, we believe information is indeed leaked in these
Implicit Flows
IoTBench
cases. We note that turning on implicit ﬂow tracking in-
creases the tracking overhead as more identiﬁers need
to be tracked; however, based on the results, turning on
implicit ﬂow tracking on SmartThings IoT apps does not
lead to an unmanageable number of false positives.
5.3
We introduce an IoT-speciﬁc test suite, IOTBENCH [20],
an open repository for evaluating information leakage in
IoT apps. We designed our test suite similar to those de-
signed for mobile systems [5, 9] and the smart grid [25];
they have been widely adopted by the security community.
IOTBENCH currently includes 19 hand-crafted malicious
SmartThings apps that contain data leaks. Sixteen apps
have a single data leak, and three have multiple data leaks;
a total of 27 data leaks via either Internet and messag-
ing service sinks. We crafted the IOTBENCH apps based
on ofﬁcial and third-party apps. They include data leaks
whose accurate identiﬁcation through program analysis
would require solving problems including multiple entry
points, state variables, call by reﬂection, and ﬁeld sen-
sitivity. Each app in IOTBENCH also comes with ground
truth of what data leaks are in the app; this is provided
as comment blocks in the app’s source code. IOTBENCH
can be used to evaluate both static and dynamic taint
analysis tools designed for SmartThings apps; it enables
assessing a tool’s accuracy and effectiveness through the
ground truths included in the suite. We present three ex-
ample SmartThings apps and their privacy violations in
Appendix B. We made IOTBENCH publicly available:
https://github.com/IoTBench.
SAINT results on IOTBENCH. We next report the results
of using SAINT on 19 IOTBENCH apps. In the discussion,
we will use app IDs deﬁned in Table 3 in Appendix B.
SAINT produces false warnings for two apps that use call
by reﬂection (Apps 6 and 7). These two apps invoke a
method via a string. SAINT over-approximates the call
graph by allowing the method invocation to target all
methods in the app. Since one of the methods leaks the
state of a door (locked or unlocked) to a malicious URL
and the mode of a user (away or home) to a hard-coded
phone number, SAINT produces warnings. However, it
turns out that the data-leaking method would not be called
by the reﬂective calls in those two apps. This pattern did
not appear in the 230 real IoT apps we discussed earlier.
SAINT did not report leaks for two apps that leak data via
side channels (Apps 18 and 19). For example, in one app,
a device operates in a speciﬁc pattern to leak information.
As our threat model states, data leaks via side channels
are out of the scope of SAINT and are not detected.
6 Limitations and Discussion
SAINT leaves detecting implicit ﬂows optional. Even
though our evaluation results on SmartThings apps show
that tracking implicit ﬂows does not lead to over-tainting
1698    27th USENIX Security Symposium
USENIX Association
and false positives, whether this holds on apps of other
IoT platforms and domains would need further investi-
gation. Another limitation is SAINT’s treatment of call
by reﬂection. As discussed in Sec. 4, it constructs an im-
precise call graph that allows a call by reﬂection target
any method. This increases the number of methods to be
analyzed and may lead to over-tainting. We plan to ex-
plore string analysis to statically identify possible values
of strings and reﬁne the target sets of calls by reﬂection.
SAINT treats all user inputs and state variables as taint
sources even though some of those may not contain sensi-
tive information. However, this has not led to false pos-
itives in our experiments. Another limitation is about
sensitive strings. An app may hardcode a string such as
“Remember to take your Viagra in the cabinet” and send
the string out. Though the string contains sensitive infor-
mation, SAINT does not report a warning (unless there is
an implicit ﬂow and implicit ﬂow tracking is turned on).
Determining whether hard-coded strings contain sensitive
information may need user help or language processing.
Finally, SAINT’s implementation and evaluation are
purely based on the SmartThings programming platform
designed for home automation. There are other IoT do-
mains suitable for studying sensitive data ﬂows, such as
FarmBeats for agriculture [43], HealthSaaS for health-
care [16], and KaaIoT for the automobile [22]. We plan
to extend SAINT’s algorithms designed for SmartThings
to these platforms and identify sensitive data ﬂows.
7 Related Work
There has been an increasing amount of recent research ex-
ploring IoT security. These works centered on the security
of emerging IoT programming platforms and IoT devices.
For example, Fernandes et al. [10] identiﬁed design ﬂaws
in permission controls of SmartThings home apps and re-
vealed the severe consequences of over-privileged devices.
In another paper, Xu et al. [45] surveyed the security prob-
lems on IoT hardware design. Other efforts have explored
vulnerability analysis within speciﬁc IoT devices [28, 17].
These works have found that apps can be easily exploited
to gain unauthorized access to control devices and leak
sensitive information of users and devices.
Many of previous efforts on taint analysis focus on the
mobile-phone platform [9, 48, 15, 7, 5, 12]. These tech-
niques are designed to address domain-speciﬁc challenges
such as designing on-demand algorithms for context and
object sensitivity. Several efforts on IoT analysis have
focused on the security and correctness of IoT programs
using a range of analyses. To restrict the usage of sen-
sitive data, FlowFence [11, 32] enforces sensitive data
ﬂow control via opaciﬁed computation. ContexIoT [21]
is a permission-based system that provides contextual in-
tegrity for IoT programs at runtime. ProvThings [44] cap-
tures system-level provenance through security-sensitive
SmartThings APIs and leverages it for forensic recon-
struction of a chain of events after an attack. In contrast,
to our best knowledge, SAINT is the ﬁrst system that pre-
cisely detects sensitive data ﬂows in IoT apps by carefully
identifying a complete set of taint sources and sinks, ade-
quately modeling IoT-speciﬁc challenges, and addressing
platform- and language- speciﬁc problems.
8 Conclusions
One of the central challenges of existing IoT is the lack
of visibility into the use of data by applications. In this
paper, we presented SAINT(cid:63), a novel static taint analy-
sis tool that identiﬁes sensitive data ﬂows in IoT apps.
SAINT translates IoT app source code into an intermediate
representation that models the app’s lifecycle–including
program entry points, user inputs, events, and actions.
Thereafter we perform efﬁcient static analysis tracking in-
formation ﬂow from sensitive sources to sink outputs. We
evaluated SAINT in two studies; a horizontal SmartThings
market study validating SAINT and assessing current mar-
ket practices, and a second study on our novel IOTBENCH
app corpus. These studies demonstrated that our approach
can efﬁciently identify taint sources and sinks and that
most market apps currently contain sensitive data ﬂows.
SAINT represents a potentially important step forward
in IoT analysis, but further work is required. In future
work, we will expand our analysis to support more plat-
forms as well as reﬁne our analysis for more complex
and subtle properties. At a higher level, we will extend
the kinds of analysis provided by the online systems and
therein provide a suite of tools for developers and re-
searchers to evaluate implementations and study the com-
plex interactions between users and the IoT devices that
they use to enhance their lives. Lastly, we will expand the
IOTBENCH app suite. In particular, we are studying the
space of privacy violations reported in academic papers,
community forums, and from security reports, and will
reproduce unique ﬂow vectors in sample applications.
9 Acknowledgments
Research was sponsored by the Army Research Labora-
tory and was accomplished under Cooperative Agreement
Number W911NF-13-2-0045 (ARL Cyber Security CRA)
and the National Science Foundation Grant No. CNS-
1564105. This work is also partially supported by the US
National Science Foundation (Awards: NSF-CAREER-
CNS-1453647, NSF-1663051) and Florida Center for Cy-
bersecurity (FC2)’s CBP (Award#: AWD000000007773).
The views and conclusions contained in this document
are those of the authors and should not be interpreted
as representing the ofﬁcial policies, either expressed or
implied, of the Army Research Laboratory or the U.S.