page can only receive the parameters that they have
hard-coded in the embedding HTML page and thus in
many cases do not perform input validation within the
Flash application itself.
2.4 Execution context of SWF ﬁles
In the previous section, we brieﬂy examined the two ways
that a SWF ﬁle can be loaded by a browser (using special
HTML tags or a direct reference). While in both cases,
the Flash Player loads the SWF ﬁle and starts executing it,
there is a very important diﬀerence in the way that the two
Flash applications interact with the surrounding page when
the Flash applications requests the execution of JavaScript
code from the browser.
The allowScriptAccess [2] runtime parameter arbitrates
the access a Flash application has to the embedding page.
There are three possible values: ‘always’, ‘sameDomain’ and
‘never’, with ‘sameDomain’ being the default. This value
has the eﬀect that access is only allowed when both the
SWF application and the embedding page are from the same
domain.
When an SWF ﬁle is embedded using the embed tag, and
Flash requests the execution of JavaScript code from the
browser, the code will execute within the origin of the em-
bedding site, assuming a suitable value for the allowScript-
Access parameter. That is, if a SWF ﬁle hosted on the
web server of foo.com is embedded in an HTML page on
bar.com, the origin of the Flash-originating JavaScript is
now bar.com. The origin is deﬁned using the domain name,
application layer protocol, and port number of the HTML
document embedding the SWF.
If however, bar.com loads the SWF ﬁle of foo.com us-
ing an , the browser creates an empty HTML page
around the Flash application and any JavaScript initiated
from the application will retain the origin of foo.com. Ad-
ditionally, since the default value for allowScriptAccess is
‘sameDomain’, this means that the Flash application will
be able to access data in the same origin as foo.com.
2.5 XSS in Flash

movie ‘ ad . swf ’ {
button 42 {
on ( release ) {
getURL ( _root . clickTag , ‘ _blank ’) ;
}
}
}


Figure 2: ActionScript 2.0 source code of an exam-
ple vulnerable Flash application
Consider a Flash advertising banner of which the Action-
Script 2.0 source code is listed in Figure 2. The banner
includes a button which, when clicked and released, triggers
the execution of the getURL() function. The getURL(url,
target) directs the browser to load a URL in the given tar-
get window.
In this example, the URL is obtained from
the variable clickTag in the global scope, and loaded into
a new window (_blank). When used legitimately, the ban-
ner is located on http://company.com/ad.swf and is em-
bedded on one of company.com’s web pages. The value of
the clickTag variable is provided by the embedding page
using the FlashVars directive and, in our example, sup-
pose that it would redirect the clicking user to e.g. http:
//company.com/new_product.html.
As described in earlier sections, a SWF ﬁle can be directly
referenced and any GET parameters will be provided to the
Flash application itself, exactly as in the FlashVars case.
Thus, if the banner was directly requested through http://
company.com/ad.swf?clickTag=http://www.evil.com, the
clickTag variable would now hold the value http://www.
evil.com instead of the value intended by company.com.
This behavior could be abused by attackers in order to send
malicious requests with the correct Referrer header towards
Web applications that use Referrer checking as a means of
protection against CSRF attacks [34]. While this is deﬁ-
can be separated in three sequential steps: static analysis,
attack URL construction and automated interaction. The
high-level idea behind each of these steps of this approach
is explained in more detail in the following subsections.
3.1 Static analysis
In this ﬁrst step, potentially exploitable variables (PEVs)
are automatically discovered in a given SWF ﬁle. PEVs are
variables which are utilized in commonly misused Action-
Script API calls and are initialized using user-input. This
step requires a static analysis of the ActionScript byte-code
embedded in the given SWF ﬁle.
Embedded ActionScript byte-code in an SWF ﬁle can not
easily be read and understood by a human, giving a false
sense of security to Flash developers who think their code
can not be recovered. In reality, several free and commer-
cial SWF decompilers exist that can reconstruct the Action-
Script source code with very high accuracy.
Be it either through decompilation and source code analy-
sis, or static analysis of the ActionScript byte-code, a list of
potentially exploitable variables is extracted from the SWF
ﬁle. The variables in this list will be used as attack vectors
in later steps of FlashOver.
3.2 Attack URL construction
In this second step, an actual attack on the Flash applica-
tion is prepared by crafting the attack URL that an attacker
would give to a victim and trick him into navigating to it.
In an actual XSS attack the attacker would try to execute
JavaScript in the security context of a target domain us-
ing the victim’s credentials for that domain. While the at-
tacker’s injected JavaScript would perform something unde-
sirable for the victim, FlashOver uses the injected JavaScript
code to log that the attack was successful.
The results of FlashOver will ultimately be used by Flash
application developers to track down vulnerabilities in their
code and ﬁx them. Therefore it is essential that the results
provide as much useful data as possible. There are three
essential pieces of information that must be recorded to be
able to reconstruct a successful attack: the entry point (i.e.
Flash application that was exploited), the attack vector (i.e.
the exploitable variable used to inject code) and the payload
(i.e. the injected JavaScript code).
These three pieces of information are encoded in the at-
tack URL. The SWF ﬁle being attacked can be identiﬁed
by a unique identiﬁer swfid. For each variable var of the
potentially exploitable variables, as identiﬁed in the static
analysis step, a payload value of payload-type type is gen-
erated. This payload contains JavaScript code that, when
executed by the targeted Flash application, will log the tuple
(swfid, var, type). From any tuple (swfid, var, type)
that shows up in the logs, the entry point, attack vector and
payload can be reconstructed and can be used to identify
the exact vulnerability of the Flash application.
3.3 Automated interaction
In the third step of the FlashOver process, the previously
crafted attack URLs are used to truly attack the Flash appli-
cation being examined. In a real-world scenario, the attacker
would give the attack URL to a victim and trick the vic-
tim into interacting with the given Flash application. Since
FlashOver tries to match the scenario as close to reality
as possible, an automated process must interact with the
Figure 3: Advertising Banner on apple.com vulner-
able to Cross-site Scripting through Flash
nitely a misuse scenario, the vulnerable code unfortunately
allows for a much greater abuse. Instead of providing a web-
site URL as the value for clickTag, an attacker could pro-
vide a JavaScript URL, such as javascript:alert(‘XSS’).
A JavaScript URL is a URL that causes the browser to ex-
ecute the speciﬁed JavaScript code in the context of the
current-page (alert(‘XSS’) in our aforementioned exam-
ple) instead of making a remote request, as is the case in
HTTP(S) URLs.
In this scenario, when that banner is
clicked, the user’s browser will execute attacker-supplied
JavaScript code instead of redirecting the user.
All an attacker needs to do in order to exploit this vul-
nerability, is to lure a victim into visiting a website which
loads the vulnerable SWF ﬁle in an iframe and insert a
javascript: URL containing malicious JavaScript code into
the query string of the SWF ﬁle URL. Since the SWF ﬁle is
loaded in an iframe, it will retain the origin of company.com
and thus when the user clicks on the banner, the JavaScript
code will execute in the context of company.com instead of
the attacker’s site. This will allow the malicious JavaScript
code to access, among other things, the user’s cookies for
company.com and steal his session identiﬁers. If a click on
the vulnerable Flash banner is required to trigger the execu-
tion of the injected JavaScript, the user can be tricked into
clicking the banner, either using social engineering or click-
jacking techniques [7]. In cases where the vulnerable code is
triggered after a predetermined amount of time, all that the
attacker needs to do is to make sure to keep the user on his
malicious site for the appropriate amount of time.
While the example ActionScript in Figure 2 appears to
be a contrived one, many websites unfortunately have simi-
larly vulnerable banners. Figure 3 shows a banner hosted on
apple.com2 which does not perform input validation within
its ActionScript code and is thus vulnerable to XSS.
3. FLASHOVER APPROACH
The goal of FlashOver is to automatically discover XSS
vulnerabilities in Flash applications, as opposed to the man-
ual code review illustrated in Section 2.5. Logically, FlashOver
2We discovered this vulnerable SWF ﬁle through our ex-
periment described in Section 5, and we also responsibly
informed Apple about this vulnerability, see Section 5.3
Flash application and by doing so, trigger the execution of
the JavaScript payload encoded in the attack URL.
Interaction can mean a lot of things. Flash applications
can respond to keyboard events, mouse events and even more
esoteric events from e.g. a built-in tilt sensor. The set of
input events that trigger actions in a Flash application de-
pends on the Flash application itself. For good results, the
automated interaction process should try to cover as much
as possible in an intelligent way.
4. FLASHOVER PROTOTYPE
The description of the general FlashOver approach in Sec-
tion 3 omits implementation details, because each of the
steps in FlashOver can be implemented in a number of ways
with varying degrees of thoroughness. We purposefully chose
to implement a minimalistic version of FlashOver to inves-
tigate the level of eﬀort and skill required by an attacker to
automatically detect XSS vulnerabilities in SWF ﬁles.
Our FlashOver prototype is schematically illustrated in
Figure 4. The following subsections discuss the implemen-
tation details of each step in our FlashOver prototype.
To reduce the complexity of our prototype, we opted for
a simple regular-expression extraction of the PEVs instead
of using more complicated analysis methods. Using this
method, the resulting ActionScript source code is searched
for patterns indicating potentially exploitable variables.
• getURL(re,...)
• loadMovie(re,...)
• .load(re,...)
• .call(re,...)
• loadClip(re,...)
• _root.re
• getRemote(#,re,...)
• .addCallback(#,#,re)
• .sendAndload(re,...)
• loadvariables(re,...)
• URLRequest(re,...)
where the regular expression to match a variable name re
= ‘[a-zA-Z$_][a-zA-Z0-9$_]*’ and ‘#’ denotes a “don’t
care” parameter.
Figure 5: The regular expressions, in pseudo-form,
used in our FlashOver prototype to match the names
of potentially exploitable variables
The regular expressions used in our prototype are listed
in pseudo-form in Figure 5. For each of these regular ex-
pressions, re indicates where the name of a potentially ex-
ploitable variable could appear in a function call in the
ActionScript source code. The regular expression used to
match variable names is synthesized from the variable nam-
ing rules deﬁned by Adobe: “The ﬁrst character of an identi-
ﬁer must be a letter, underscore ( ), or dollar sign ($). Each
subsequent character can be a number, letter, underscore, or
dollar sign” [1]. The ﬁrst regular expression (_root.re) in-
dicates that a variable in the global address space is used,
while the other regular expressions match function calls for
sensitive functions that could lead to XSS.
4.2 Attack URL construction
Figure 4: Schematic overview of our FlashOver pro-
totype: During static analysis, the SWF ﬁle is de-
compiled and regular expressions uncover potentially
exploitable variables (PEVs) from the ActionScript
source-code. These PEVs are inserted into injec-
tion templates in the attack URL construction step.
The attack URLs are loaded in a real browser in
the automated interaction step, resulting in a list of
discovered XSS vulnerabilities.
4.1 Static analysis
This ﬁrst step in the FlashOver process requires static
analysis of the SWF ﬁle. We chose to decompile the SWF
ﬁle and then perform a simple static analysis on the resulting
ActionScript source code.
There are many SWF decompilers, but not all of them
support ActionScript 3.0. Choosing a decompiler, such as
the freely available flare [24], that does not support the lat-
est version of ActionScript, would mean that there would be
a blind-spot in our analysis. For that reason, we chose a com-
mercial decompiler with support for ActionScript 3.0 [35].
Figure 6: Construction process of an attack URL for
http://target.tld/ad.swf with swﬁd ABCDEF, injection
template id 1 and variable abc with id 2
Based on the variable names identiﬁed in the previous
step, attack URLs are constructed that, when the attack
payload is triggered, will report in what way the given SWF
ﬁle is vulnerable to XSS.
Exploitable variables can be used in ActionScript in a
number of diﬀerent ways. Through our review of JavaScript
injection techniques, we identiﬁed a non-exhaustive list of
getURL(var )
id Example occurrence of var
0
1
2
3