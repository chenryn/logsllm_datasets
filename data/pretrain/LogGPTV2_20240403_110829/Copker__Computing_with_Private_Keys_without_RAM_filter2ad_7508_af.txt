and CPU cache is amongst the most secure type of storage
that could be utilized by CPU. When an attacker is capable of
effectively monitoring the hardware at transistor-level, it is ex-
tremely difﬁcult to maintain a secure computing environment.
DMA-based attacks [8, 9, 47] are launched from peripher-
als and are capable of bypassing all the protection mechanisms
imposed by the OS. Copker is not designed to withstand this
attack. A recent work, BARM [46] monitors bus activity by the
performance monitoring units (PMUs) in Intel x86 platform, to
detect the abnormal memory access DMA-based attacks from
peripherals.
Finally, the joint test action group (JTAG) interface is often
used by hardware engineers to debug the chip. The entire
state of the CPU can be extracted using the JTAG interface.
However, commercial x86 CPUs rarely export JTAG ports [1].
VII. RELATED WORK
Keeping cryptographic keys safe in computer systems is a
great challenge, especially when memory is entirely accessible
to physical security attackers. AESSE [37], TRESOR [38] and
Amnesia [45] improve full disk encryption by storing AES
keys in CPU registers, to counter the physical memory attacks
such as cold-boot attack [23] and DMA-based attacks [9, 47],
both of which bypass the protections of OS completely and
enable attackers to access all contents of RAM. These CPU-
bound solutions (including Copker) defeat cold-boot attacks
effectively, but TRESOR-HUNT [8] shows that they are still
vulnerable to DMA-based attacks that actively read and write
values to memory on running computer systems. BARM [46],
on the other hand, demonstrated a way to detect DMA-based
attacks independent of the OS. This work prevents the DMA-
based attacks, which are not addressed by Copker.
To protect cryptographic keys against memory-disclosure
attacks due to software vulnerabilities [22, 33], K. Harrison
and S. Xu [24] suggests only one copy of keys to be kept in
memory, and the x86 SSE XMM registers are used to store
a 1024-bit RSA private key [40] without the CRT speed-up.
PRIME [21], an independently developed approach that was
published slightly before Copker, implemented 2048-bit RSA
using advanced vector extensions (AVX) [34]. The private
key is either symmetrically encrypted in RAM or decrypted
only with registers. Some well-chosen intermediate values are
stored in RAM, but they would not leak any sensitive informa-
tion. However, CRT is not enabled due to the limited size of
registers, as a result, the decryption/signing operations become
less efﬁcient without CRT. In fact, the “one-copy” principle
is (followed and) strengthened in both Copker and PRIME:
one copy of keys only during computations; otherwise, all
private keys are encrypted in memory by another AES key
stored in debug registers only. Compared with PRIME, Copker
shows better extendability:
the large size of cache allows
longer private keys and more efﬁcient algorithms, such as CRT-
enabled RSA.
White-box cryptography [15] tries to hide a ﬁxed secret key
in software binaries, even if the binaries are publicly available,
e.g., white-box AES and DES implementations [14, 15]. How-
ever, these solutions result in greatly decreased efﬁciency and
do not work effectively for asymmetric algorithms. Our work
shows an alternative approach to protect long cryptographic
keys, when the machine may be under physical attacks.
The side-channel attack [7, 12] is another threat to crypto-
graphic systems. Firstly, cache-timing attacks [7, 11, 41] are
ineffective to Copker, because all cryptographic computations
are performed in caches. Note that current AES timing attacks
are cache-based [7, 11]. By using CPU AES-NI extension, the
AES implementation of TRESOR [38] is free of timing attacks.
AES-NI extension is not used in our prototype because Intel
Core2 Q8200 doesn’t support it. It would be easy to use AES-
NI extension in Copker if it is available. Preventing timing
attacks will be one of our future work, such as enabling RSA
blinding [12] against the attacks to private keys [2].
The cache-as-RAM (CAR) mechanism [35] is employed in
most BIOSes, to support stack before the RAM is initialized.
To some extent, Copker integrates CAR and TRESOR: cache
is used as RAM against cold-boot attacks, and a system-wide
AES key is stored in registers as TRESOR to support dynamic
multiple private keys. However, straightforward integration is
not enough: the execution environment of Copker is more
complex than BIOSes and Copker provides cryptographic
computing services not only for trusted kernel-mode tasks as
TRESOR, but also for untrusted user-mode tasks in Linux.
Employing the CAR mechanism, CARMA [53] established a
trusted computing base (TCB) with a minimal set of hardware
components (i.e., only the CPU),
to prevent attacks from
compromised hardware.
FrozenCache proposed by J. Pabel [39] is the ﬁrst attempt
to use CAR to mitigate the threat of cold-boot attacks to
full disk encryption. This concept is easy to understand, but
“the devil is in the details” [29]. FrozenCache only stores
the AES key (and its round keys) in caches when a user
explicitly actives the frozen mode; otherwise, the cryptographic
algorithm is still implemented in RAM and the secret key is
also in RAM. That is, FrozenCache uses caches as “pure”
storage only, while caches are used in Copker as memory to
perform private key operations concurrently with other tasks.
Besides, it frozes AES key in the cache by letting the whole
CPU enter the no-ﬁll mode to prevent the sensitive information
from being ﬂushed into RAM, which is very different from
Copker. Therefore, it is very slow for the computer to recover
from the frozen mode and harms user experience [39].
VIII. CONCLUSION AND FUTURE WORK
Physical attacks on the main memory (RAM) allow at-
tackers, who have physical access to the computer, to extract
13
RAM contents without any system privilege. Conventional
implementations of asymmetric cryptographic algorithms are
vulnerable to such attacks, as plain-text private keys are stored
in RAM. In this paper, we present Copker, a programming
framework for computing with private keys without using
RAM. Copker uses CPU caches as RAM to store all private
keys and intermediate results, and ensures that sensitive in-
formation does not enter RAM. Therefore, Copker is secure
against physical attacks on main memory, such as the cold-
boot attack.
In Copker, to prevent the sensitive information from ap-
pearing on the front side bus and then into RAM: (a) a
secure environment is designed to store all variables in decryp-
tion/signing, (b) this environment is placed at reserved memory
space, (c) the cache-ﬁll mode is carefully conﬁgured and the
contents of cache is elaborately manipulated to ensure the
environment is in caches only, (d) the private key operations
are performed in the environment, within atomic section to
avoid being disrupted by concurrent programs, and (e) this
environment is completely erased before the reserved space
is released. To minimize the performance impact, Copker
occupies a limited number of caches only when it is computing
with private keys. We implement Cokper, and design a method
to verify that the sensitive information is kept in cache only
and is never ﬂushed to RAM. Experiment results show that
Copker achieves the security goals with good performance and
acceptable impact on other programs.
Copker demonstrates a general framework to implement
cryptographic algorithms against cold-boot attack and other
hardware attacks. In the future, we plan to encapsulate it as
an easy-to-use cryptographic module, and to support more
algorithms. The large size of cache is capable to support longer
private keys and more complicated cryptographic algorithms.
Moreover, Copker allows the algorithm to be implemented
with high-level programming languages, which makes it easier
to extend to other cryptographic algorithms. Last but not least,
a random number generater that is immune to cold-boot attacks
will be needed, e.g., ECDSA requires secret random numbers
to sign messages. It can be implemented by hardware (e.g., the
rdrand instruction available in Intel Ivy Bridge processors),
or a deterministic random bit generator (DRBG) [4], whose
sensitive information is also conﬁned in caches.
ACKNOWLEDGEMENT
Le Guan, Jingqiang Lin and Jiwu Jing were partially
supported by the National 973 Program of China under award
No. 2013CB338001 and the Strategy Pilot Project of Chinese
Academy of Sciences under award No. XDA06010702.
REFERENCES
[1] M. Anderson, “Using a JTAG in Linux driver
debugging,” in CE Embedded Linux Conference, 2008.
[2] C. Arnaud and P.-A. Fouque, “Timing attack against
protected RSA-CRT implementation used in PolarSSL,”
in RSA Conference Cryptographers’ Track, 2013, pp.
18–33.
[3] E. Barker, W. Barker, W. Burr, W. Polk, and M. Smid,
“Special publication 800-57 recommendation for key
management - part 1: General (revised),” National
Institute of Standards and Technology, Tech. Rep., 2006.
14
[4] E. Barker and J. Kelsey, “Recommendation for random
number generation using deterministic random bit
generators,” National Institute of Standards and
Technology, Tech. Rep., 2012.
[5] C. Baumann, B. Beckert, H. Blasum, and T. Bormer,
“Formal veriﬁcation of a microkernel used in
dependable software systems,” in 28th International
Conference on Computer Safety, Reliability and
Security, 2009, pp. 187–200.
[6] M. Bellare, A. Desai, D. Pointcheval, and P. Rogaway,
“Relations among notions of security for public-key
encryption schemes,” in Advances in Cryptology -
Crypto, 1998, pp. 26–45.
[7] D. Bernstein, “Cache-timing attacks on AES,” 2005.
[8] E.-O. Blass and W. Robertson, “TRESOR-HUNT:
Attacking CPU-bound encryption,” in 28th Annual
Computer Security Applications Conference, 2012, pp.
71–78.
[9] B. Bock, “Firewire-based physical security attacks on
Windows 7, EFS and BitLocker,” Secure Business
Austria Research Lab, Tech. Rep., 2009.
[10] D. Boneh, “Twenty years of attacks on the RSA
cryptosystem,” Notices of the AMS, vol. 46, no. 2, pp.
203–213, 1999.
[11] J. Bonneau and I. Mironov, “Cache-collision timing
attacks against AES,” in 8th Workshop on
Cryptographic Hardware and Embedded Systems, 2006,
pp. 201–215.
[12] D. Brumley and D. Boneh, “Remote timing attacks are
practical,” Computer Networks, vol. 48, no. 5, pp.
701–716, 2005.
[13] B. Cao and L. Shen, “A survey of VoIP: Now and
future,” ISGRIN Research Lab, University of Houston,
Tech. Rep., 2011.
[14] S. Chow, P. Eisen, H. Johnson, and P. van Oorschot, “A
white-box DES implementation for DRM applications,”
in 2nd ACM Workshop on Digital Rights Management,
2002, pp. 1–15.
[15] ——, “White-box cryptography and an AES
implementation,” in 9th International Workshop on
Selected Areas in Cryptography, 2002, pp. 250–270.
[16] T. Dierks and E. Rescorla, “IETF RFC 5246: The
transport layer security (TLS) protocol,” 2008.
[17] R. Dingledine, N. Mathewson, and P. Syverson, “Tor:
The second-generation onion router,” in 13th USENIX
Security Symposium, 2004, pp. 303–320.
[18] U. Drepper, “What every programmer should know
about memory,” Red Hat, Inc, Tech. Rep., 2007.
[19] A. Freier, P. Karlton, and P. Kocher, “IETF RFC 6101:
The secure sockets layer (SSL) protocol version 3.0,”
2011.
[20] S. Garﬁnkel, PGP: Pretty Good Privacy. O’Reilly
Media, 1994.
[21] B. Garmany and T. M¨uller, “PRIME: Private RSA
Infrastructure for Memory-less Encryption,” in 29th
Annual Computer Security Applications Conference,
2013.
[22] G. Guninski, “Linux kernel 2.6 fun, Windoze is a joke,”
2005, http://www.guninski.com.
[23] J. Halderman, S. Schoen, N. Heninger, W. Clarkson,
W. Paul, J. Calandrino, A. Feldman, J. Appelbaum, and
E. Felten, “Lest we remember: Cold boot attacks on
encryption securely outside RAM,” in 20th USENIX
Security Symposium, 2011, pp. 17–32.
[39] J. Pabel, “Frozencache: Mitigating cold-boot attacks for
full-disk-encryption software,” in 27th Chaos
Communication Congress, 2010.
[40] T. Parker and S. Xu, “A method for safekeeping
cryptographic keys from memory disclosure attacks,” in
1st International Conference on Trusted Systems, 2010,
pp. 39–59.
[41] C. Percival, “Cache missing for fun and proﬁt,” BSD
Conference, 2005.
[42] B. Ramsdell and S. Turner, “IETF RFC 5751:
Secure/multipurpose Internet mail extensions (S/MIME)
version 3.2 message speciﬁcation,” 2010.
[43] E. Rescorla, “IETF RFC 2818: HTTP over TLS,” 2000.
[44] R. Rivest, A. Shamir, and L. Adleman, “A method for
obtaining digital signatures and public-key
cryptosystems,” Communications of the ACM, vol. 21,
no. 2, pp. 120–126, 1978.
[45] P. Simmons, “Security through Amnesia: A
software-based solution to the cold boot attack on disk
encryption,” in 27th Annual Computer Security
Applications Conference, 2011, pp. 73–82.
[46] P. Stewin, “A primitive for revealing stealthy
peripheral-based attacks on the computing platform’s
main memory,” in 16th International Symposium on
Research in Attacks, Intrusions and Defenses, 2013.
[47] P. Stewin and I. Bystrov, “Understanding DMA
malware,” in 9th Conference on Detection of Intrusions
and Malware & Vulnerability Assessment, 2013, pp.
21–41.
[48] SysBench, http://sysbench.sourceforge.net.
[49] The Apache Software Foundation, “Apache HTTP
server benchmarking tool,” http://www.apache.org.
[50] The Kernelbook Project, “The Linux kernel,”
http://kernelbook.sourceforge.net.
[51] The OpenSSL Project, “OpenSSL cryptographic
library,” http://www.openssl.org.
[52] The polarSSL Project, https://polarssl.org.
[53] A. Vasudevan, J. McCune, J. Newsome, A. Perrig, and
L. van Doorn, “CARMA: A hardware tamper-resistant
isolated execution environment on commodity x86
platforms,” in 7th ACM Symposium on Information,
Computer and Communications Security, 2012, pp.
48–52.
encryption keys,” in 17th USENIX Security Symposium,
2008, pp. 45–60.
[24] K. Harrison and S. Xu, “Protecting cryptographic keys
from memory disclosure attacks,” in 37th Annual
IEEE/IFIP International Conference on Dependable
Systems and Networks, 2007, pp. 137–143.
[25] Hewlett-Packard Corporation, Intel Corporation,
Microsoft Corporation, Phoenix Technologies Ltd., and
Toshiba Corporation, “Advanced conﬁguration and
power interface speciﬁcation,” 2006.
[26] Intel Corporation, “Intel 64 and IA-32 architectures
optimization reference manual.”
[27] ——, “Intel 64 and IA-32 architectures software
developer’s manual.”
[28] J. Jonsson and B. Kaliski, “Public-key cryptography
standards (PKCS#1): RSA cryptography speciﬁcations
version 2.1,” RSA Laboratories, Tech. Rep., 2003.
[29] M. Kabay and J. Pabel, “Cold boot attacks: The frozen
cache approach,” 2009, http://www.mekabay.com.
[30] B. Kaliski, “TWIRL and RSA key size,” RSA
Laboratories, Tech. Rep., 2003.
[31] G. Klein, K. Elphinstone, G. Heiser, J. Andronick,
D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt,
R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and
S. Winwood, “seL4: Formal veriﬁcation of an OS
kernel,” in 22nd ACM Symposium on Operating Systems
Principles, 2009, pp. 207–220.
[32] C. Koc, “High-speed RSA implementation,” RSA
Laboratories, Tech. Rep., 1994.
[33] M. Lafon and R. Francoise, “CAN-2005-0400:
Information leak in the Linux kernel ext2
implementation,” 2005, http://www.securiteam.com.
[34] C. Lomont, “Introduction to Intel advanced vector
extensions,” Intel Corporation, Tech. Rep., 2011.
[35] Y. Lu, L.-T. Lo, G. Watson, and R. Minnich, “CAR:
Using cache as RAM in LinuxBIOS,” 2006.
[36] P. Montgomery, “Modular multiplication without trial
division,” Mathematics of Computation, vol. 44, no.
170, pp. 519–521, 1985.
[37] T. Muller, A. Dewald, and F. Freiling, “AESSE: A
cold-boot resistant implementation of AES,” in 3rd
European Workshop on System Security, 2010, pp.
42–47.
[38] T. M¨uller, F. Freiling, and A. Dewald, “TRESOR runs
15