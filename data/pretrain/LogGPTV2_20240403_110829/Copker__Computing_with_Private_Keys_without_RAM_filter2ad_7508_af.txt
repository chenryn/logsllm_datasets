### CPU Cache Security and Vulnerabilities

The CPU cache is among the most secure types of storage that can be utilized by the CPU. When an attacker has the capability to monitor the hardware at the transistor level, maintaining a secure computing environment becomes extremely challenging. DMA-based attacks [8, 9, 47] originate from peripherals and can bypass all protection mechanisms imposed by the operating system (OS). Copker is not designed to withstand such attacks. A recent work, BARM [46], uses performance monitoring units (PMUs) in the Intel x86 platform to detect abnormal memory access patterns indicative of DMA-based attacks from peripherals.

Additionally, the Joint Test Action Group (JTAG) interface, often used by hardware engineers for chip debugging, can extract the entire state of the CPU. However, commercial x86 CPUs rarely export JTAG ports [1].

### Related Work

Ensuring the security of cryptographic keys in computer systems is a significant challenge, especially when memory is fully accessible to physical security attackers. AESSE [37], TRESOR [38], and Amnesia [45] enhance full disk encryption by storing AES keys in CPU registers to counter physical memory attacks, such as cold-boot attacks [23] and DMA-based attacks [9, 47]. These attacks completely bypass OS protections, allowing attackers to access all contents of RAM. While these CPU-bound solutions, including Copker, effectively defeat cold-boot attacks, TRESOR-HUNT [8] demonstrates that they remain vulnerable to DMA-based attacks that actively read and write values to memory on running systems. BARM [46] provides a method to detect DMA-based attacks independently of the OS, addressing a gap not covered by Copker.

To protect cryptographic keys against memory-disclosure attacks due to software vulnerabilities [22, 33], K. Harrison and S. Xu [24] propose keeping only one copy of keys in memory, using x86 SSE XMM registers to store a 1024-bit RSA private key [40] without CRT speed-up. PRIME [21], another approach, implements 2048-bit RSA using Advanced Vector Extensions (AVX) [34]. The private key is either symmetrically encrypted in RAM or decrypted only with registers. Some intermediate values are stored in RAM but do not leak sensitive information. However, CRT is not enabled due to the limited size of registers, making decryption/signing operations less efficient. Both Copker and PRIME follow the "one-copy" principle: keys are kept in memory only during computations; otherwise, they are encrypted in memory by an AES key stored in debug registers. Copker's larger cache size allows for longer private keys and more efficient algorithms, such as CRT-enabled RSA.

White-box cryptography [15] aims to hide a fixed secret key in software binaries, even if the binaries are publicly available. However, this approach significantly reduces efficiency and is less effective for asymmetric algorithms. Our work presents an alternative method to protect long cryptographic keys under potential physical attacks.

Side-channel attacks [7, 12] pose another threat to cryptographic systems. Cache-timing attacks [7, 11, 41] are ineffective against Copker because all cryptographic computations are performed in caches. Current AES timing attacks are cache-based [7, 11], and TRESOR [38] uses the CPU AES-NI extension to avoid timing attacks. Although our prototype does not use AES-NI (as it is not supported by the Intel Core2 Q8200), incorporating AES-NI would be straightforward. Future work will include preventing timing attacks, such as enabling RSA blinding [12].

The cache-as-RAM (CAR) mechanism [35] is employed in most BIOSes to support stack operations before RAM is initialized. Copker integrates CAR and TRESOR: using cache as RAM against cold-boot attacks and storing a system-wide AES key in registers. However, Copker's execution environment is more complex than BIOSes, providing cryptographic services for both trusted kernel-mode and untrusted user-mode tasks in Linux. CARMA [53] establishes a trusted computing base (TCB) with minimal hardware components to prevent attacks from compromised hardware.

FrozenCache, proposed by J. Pabel [39], is the first attempt to use CAR to mitigate cold-boot attacks on full disk encryption. It stores the AES key in caches when the frozen mode is activated, but the algorithm is still implemented in RAM. FrozenCache uses caches purely for storage, while Copker uses them for concurrent private key operations. FrozenCache also freezes the AES key in the cache by entering no-fill mode, which is different from Copker. This results in slow recovery from the frozen mode, negatively impacting user experience [39].

### Conclusion and Future Work

Physical attacks on main memory (RAM) allow attackers with physical access to extract RAM contents without system privileges. Conventional implementations of asymmetric cryptographic algorithms are vulnerable to such attacks because plaintext private keys are stored in RAM. In this paper, we present Copker, a programming framework that performs cryptographic computations without using RAM. Copker uses CPU caches to store all private keys and intermediate results, ensuring that sensitive information never enters RAM. Thus, Copker is secure against physical attacks on main memory, such as cold-boot attacks.

In Copker, to prevent sensitive information from appearing on the front-side bus and then into RAM:
- A secure environment is designed to store all variables in decryption/signing.
- This environment is placed in reserved memory space.
- The cache-fill mode is carefully configured, and cache contents are manipulated to ensure the environment remains in caches.
- Private key operations are performed within atomic sections to avoid disruption by concurrent programs.
- The environment is completely erased before the reserved space is released.

To minimize performance impact, Copker occupies a limited number of caches only during private key computations. We have implemented Copker and designed a method to verify that sensitive information is kept in cache and never flushed to RAM. Experimental results show that Copker achieves its security goals with good performance and minimal impact on other programs.

Copker provides a general framework for implementing cryptographic algorithms resistant to cold-boot and other hardware attacks. Future work includes encapsulating Copker as an easy-to-use cryptographic module, supporting more algorithms, and developing a random number generator immune to cold-boot attacks, such as ECDSA, which requires secret random numbers for signing messages. This can be achieved using hardware (e.g., the rdrand instruction in Intel Ivy Bridge processors) or a deterministic random bit generator (DRBG) [4], with sensitive information confined in caches.

### Acknowledgements

Le Guan, Jingqiang Lin, and Jiwu Jing were partially supported by the National 973 Program of China under award No. 2013CB338001 and the Strategy Pilot Project of the Chinese Academy of Sciences under award No. XDA06010702.

### References

[1] M. Anderson, “Using a JTAG in Linux driver debugging,” in CE Embedded Linux Conference, 2008.

[2] C. Arnaud and P.-A. Fouque, “Timing attack against protected RSA-CRT implementation used in PolarSSL,” in RSA Conference Cryptographers’ Track, 2013, pp. 18–33.

[3] E. Barker, W. Barker, W. Burr, W. Polk, and M. Smid, “Special publication 800-57 recommendation for key management - part 1: General (revised),” National Institute of Standards and Technology, Tech. Rep., 2006.

[4] E. Barker and J. Kelsey, “Recommendation for random number generation using deterministic random bit generators,” National Institute of Standards and Technology, Tech. Rep., 2012.

[5] C. Baumann, B. Beckert, H. Blasum, and T. Bormer, “Formal verification of a microkernel used in dependable software systems,” in 28th International Conference on Computer Safety, Reliability and Security, 2009, pp. 187–200.

[6] M. Bellare, A. Desai, D. Pointcheval, and P. Rogaway, “Relations among notions of security for public-key encryption schemes,” in Advances in Cryptology - Crypto, 1998, pp. 26–45.

[7] D. Bernstein, “Cache-timing attacks on AES,” 2005.

[8] E.-O. Blass and W. Robertson, “TRESOR-HUNT: Attacking CPU-bound encryption,” in 28th Annual Computer Security Applications Conference, 2012, pp. 71–78.

[9] B. Bock, “Firewire-based physical security attacks on Windows 7, EFS and BitLocker,” Secure Business Austria Research Lab, Tech. Rep., 2009.

[10] D. Boneh, “Twenty years of attacks on the RSA cryptosystem,” Notices of the AMS, vol. 46, no. 2, pp. 203–213, 1999.

[11] J. Bonneau and I. Mironov, “Cache-collision timing attacks against AES,” in 8th Workshop on Cryptographic Hardware and Embedded Systems, 2006, pp. 201–215.

[12] D. Brumley and D. Boneh, “Remote timing attacks are practical,” Computer Networks, vol. 48, no. 5, pp. 701–716, 2005.

[13] B. Cao and L. Shen, “A survey of VoIP: Now and future,” ISGRIN Research Lab, University of Houston, Tech. Rep., 2011.

[14] S. Chow, P. Eisen, H. Johnson, and P. van Oorschot, “A white-box DES implementation for DRM applications,” in 2nd ACM Workshop on Digital Rights Management, 2002, pp. 1–15.

[15] ——, “White-box cryptography and an AES implementation,” in 9th International Workshop on Selected Areas in Cryptography, 2002, pp. 250–270.

[16] T. Dierks and E. Rescorla, “IETF RFC 5246: The transport layer security (TLS) protocol,” 2008.

[17] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The second-generation onion router,” in 13th USENIX Security Symposium, 2004, pp. 303–320.

[18] U. Drepper, “What every programmer should know about memory,” Red Hat, Inc, Tech. Rep., 2007.

[19] A. Freier, P. Karlton, and P. Kocher, “IETF RFC 6101: The secure sockets layer (SSL) protocol version 3.0,” 2011.

[20] S. Garfinkel, PGP: Pretty Good Privacy. O’Reilly Media, 1994.

[21] B. Garmany and T. Müller, “PRIME: Private RSA Infrastructure for Memory-less Encryption,” in 29th Annual Computer Security Applications Conference, 2013.

[22] G. Guninski, “Linux kernel 2.6 fun, Windoze is a joke,” 2005, http://www.guninski.com.

[23] J. Halderman, S. Schoen, N. Heninger, W. Clarkson, W. Paul, J. Calandrino, A. Feldman, J. Appelbaum, and E. Felten, “Lest we remember: Cold boot attacks on encryption keys,” in 17th USENIX Security Symposium, 2008, pp. 45–60.

[24] K. Harrison and S. Xu, “Protecting cryptographic keys from memory disclosure attacks,” in 37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, 2007, pp. 137–143.

[25] Hewlett-Packard Corporation, Intel Corporation, Microsoft Corporation, Phoenix Technologies Ltd., and Toshiba Corporation, “Advanced configuration and power interface specification,” 2006.

[26] Intel Corporation, “Intel 64 and IA-32 architectures optimization reference manual.”

[27] ——, “Intel 64 and IA-32 architectures software developer’s manual.”

[28] J. Jonsson and B. Kaliski, “Public-key cryptography standards (PKCS#1): RSA cryptography specifications version 2.1,” RSA Laboratories, Tech. Rep., 2003.

[29] M. Kabay and J. Pabel, “Cold boot attacks: The frozen cache approach,” 2009, http://www.mekabay.com.

[30] B. Kaliski, “TWIRL and RSA key size,” RSA Laboratories, Tech. Rep., 2003.

[31] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood, “seL4: Formal verification of an OS kernel,” in 22nd ACM Symposium on Operating Systems Principles, 2009, pp. 207–220.

[32] C. Koc, “High-speed RSA implementation,” RSA Laboratories, Tech. Rep., 1994.

[33] M. Lafon and R. Francoise, “CAN-2005-0400: Information leak in the Linux kernel ext2 implementation,” 2005, http://www.securiteam.com.

[34] C. Lomont, “Introduction to Intel advanced vector extensions,” Intel Corporation, Tech. Rep., 2011.

[35] Y. Lu, L.-T. Lo, G. Watson, and R. Minnich, “CAR: Using cache as RAM in LinuxBIOS,” 2006.

[36] P. Montgomery, “Modular multiplication without trial division,” Mathematics of Computation, vol. 44, no. 170, pp. 519–521, 1985.

[37] T. Müller, A. Dewald, and F. Freiling, “AESSE: A cold-boot resistant implementation of AES,” in 3rd European Workshop on System Security, 2010, pp. 42–47.

[38] T. Müller, F. Freiling, and A. Dewald, “TRESOR runs in the CPU,” in 28th Annual Computer Security Applications Conference, 2012, pp. 71–78.

[39] J. Pabel, “Frozencache: Mitigating cold-boot attacks for full-disk-encryption software,” in 27th Chaos Communication Congress, 2010.

[40] T. Parker and S. Xu, “A method for safekeeping cryptographic keys from memory disclosure attacks,” in 1st International Conference on Trusted Systems, 2010, pp. 39–59.

[41] C. Percival, “Cache missing for fun and profit,” BSD Conference, 2005.

[42] B. Ramsdell and S. Turner, “IETF RFC 5751: Secure/multipurpose Internet mail extensions (S/MIME) version 3.2 message specification,” 2010.

[43] E. Rescorla, “IETF RFC 2818: HTTP over TLS,” 2000.

[44] R. Rivest, A. Shamir, and L. Adleman, “A method for obtaining digital signatures and public-key cryptosystems,” Communications of the ACM, vol. 21, no. 2, pp. 120–126, 1978.

[45] P. Simmons, “Security through Amnesia: A software-based solution to the cold boot attack on disk encryption,” in 27th Annual Computer Security Applications Conference, 2011, pp. 73–82.

[46] P. Stewin, “A primitive for revealing stealthy peripheral-based attacks on the computing platform’s main memory,” in 16th International Symposium on Research in Attacks, Intrusions and Defenses, 2013.

[47] P. Stewin and I. Bystrov, “Understanding DMA malware,” in 9th Conference on Detection of Intrusions and Malware & Vulnerability Assessment, 2013, pp. 21–41.

[48] SysBench, http://sysbench.sourceforge.net.

[49] The Apache Software Foundation, “Apache HTTP server benchmarking tool,” http://www.apache.org.

[50] The Kernelbook Project, “The Linux kernel,” http://kernelbook.sourceforge.net.

[51] The OpenSSL Project, “OpenSSL cryptographic library,” http://www.openssl.org.

[52] The polarSSL Project, https://polarssl.org.

[53] A. Vasudevan, J. McCune, J. Newsome, A. Perrig, and L. van Doorn, “CARMA: A hardware tamper-resistant isolated execution environment on commodity x86 platforms,” in 7th ACM Symposium on Information, Computer and Communications Security, 2012, pp. 48–52.