### Programmable Networking

The emergence of programmable networking has led to numerous innovative applications in the network data plane [14, 16, 18–20, 24–26, 28, 31, 36, 39, 49–51]. One particularly promising direction is programmable packet scheduling [29, 47], which contrasts with traditional fixed-function packet scheduling [11, 21, 27, 44, 48]. Programmable packet scheduling in the data plane is a relatively new concept. Following the introduction of PIFO [47] and UPS [29], several solutions have been proposed that combine new abstractions, algorithms, and queue structures [38, 42, 43, 45]. However, many of these solutions require new hardware designs. SP-PIFO [3] recently demonstrated that efficient programmable packet scheduling can be approximated using existing devices with as few as eight queues. In this paper, we show that AIFO can closely approximate PIFO with just one queue.

### Priority-Based Scheduling

Priority-based scheduling is a classic scheduling discipline [41] often used in networking to minimize the average completion time of flows [6, 7, 15, 17] and coflows [8, 9] in both clairvoyant (where the size is known a priori) and non-clairvoyant (where the size is unknown) scenarios. In non-clairvoyant scenarios, most solutions revert to classic methods such as Multi-level Feedback Queues (MLFQ) [10] and its continuous approximations [33, 37]. Programmable packet scheduling uses the concept of ranks, which are similar to priorities but more flexible, as they can be defined based on user requirements. This flexibility allows for the support of a wide variety of packet scheduling algorithms tailored to different objectives [47].

### Active Queue Management (AQM)

Active Queue Management (AQM) works in conjunction with packet scheduling algorithms by probabilistically dropping packets to prevent congestion. AQM is simple and widely implemented in most switches (e.g., RED [12]). Various AQM variations aim to improve fairness [34, 35] and provide bounded worst-case packet queuing delay [32]. Unlike traditional AQM proposals, AIFO proactively drops packets based on their relative ranks rather than randomly.

### Conclusion

We present AIFO, a novel approach to programmable packet scheduling that utilizes only a single FIFO queue. AIFO computes a rank quantile for incoming packets and decides whether to admit them based on the rank quantile and the current queue length. We have built a prototype of AIFO on programmable switches. Our simulations and testbed experiments demonstrate that AIFO delivers high performance and closely approximates PIFO. Additionally, we provide a theoretical proof that AIFO provides bounded performance relative to PIFO. We believe AIFO is a promising solution for achieving programmable packet scheduling with minimal hardware resource consumption—using as few as a single FIFO queue.

### Ethics

This work does not raise any ethical issues.

### Acknowledgments

We thank our shepherd George Varghese and the anonymous reviewers for their valuable feedback on this paper. Xin Jin (PI:EMAIL) is the corresponding author. Xin Jin is with the Key Laboratory of High Confidence Software Technologies (Peking University), Ministry of Education. This work is supported in part by NSF grants CCF-1652257, CNS-1813487, CNS-1845853, and CCF-1918757, Project 2020BD007 from PKU-Baidu Fund, ONR Award N00014-18-1-2364, and the Lifelong Learning Machines program from DARPA/MTO.

### References

[1] 2017. Netbench. http://github.com/ndal-eth/.

[2] 2018. Intel Data Plane Development Kit (DPDK). http://dpdk.org/.

[3] Albert Gran Alcoz, Alexander Dietmüller, and Laurent Vanbever. 2020. SP-PIFO: Approximating Push-In First-Out Behaviors using Strict-Priority Queues. In USENIX NSDI.

[4] Mohammad Alizadeh, Albert Greenberg, David A Maltz, Jitendra Padhye, Parveen Patel, Balaji Prabhakar, Sudipta Sengupta, and Murari Sridharan. 2011. Data Center TCP (DCTCP). In ACM SIGCOMM.

[5] Mohammad Alizadeh, Abdul Kabbani, Tom Edsall, Balaji Prabhakar, Amin Vahdat, and Masato Yasuda. 2012. Less is more: Trading a little bandwidth for ultra-low latency in the data center. In USENIX NSDI.

[6] Mohammad Alizadeh, Shuang Yang, Milad Sharif, Sachin Katti, Nick McKeown, Balaji Prabhakar, and Scott Shenker. 2013. pfabric: Minimal near-optimal data-center transport. ACM SIGCOMM Computer Communication Review 43, 4 (2013), 435–446.

[7] Wei Bai, Li Chen, Kai Chen, Dongsu Han, Chen Tian, and Hao Wang. 2015. Information-Agnostic Flow Scheduling for Commodity Data Centers. In USENIX NSDI.

[8] Mosharaf Chowdhury and Ion Stoica. 2015. Efficient Coflow Scheduling Without Prior Knowledge. In ACM SIGCOMM.

[9] Mosharaf Chowdhury, Yuan Zhong, and Ion Stoica. 2014. Efficient coflow scheduling with Varys. In ACM SIGCOMM.

[10] Fernando J Corbató, Marjorie Merwin-Daggett, and Robert C Daley. 1962. An experimental time-sharing system. In Spring Joint Computer Conference. 335–344.

[11] Alan Demers, Srinivasan Keshav, and Scott Shenker. 1989. Analysis and Simulation of a Fair Queueing Algorithm. SIGCOMM CCR (August 1989).

[12] Sally Floyd and Van Jacobson. 1993. Random Early Detection Gateways for Congestion Avoidance. IEEE/ACM Transactions on Networking 1, 4 (1993), 397–1413.

[13] Pawan Goyal, Harrick M Vin, and Haichen Cheng. 1997. Start-time fair queueing: A scheduling algorithm for integrated services packet switching networks. IEEE/ACM Transactions on Networking 5, 5 (1997), 690–704.

[14] Arpit Gupta, Rob Harrison, Marco Canini, Nick Feamster, Jennifer Rexford, and Walter Willinger. 2018. Sonata: Query-driven streaming network telemetry. In ACM SIGCOMM.

[15] Chi-Yao Hong, Matthew Caesar, and P Godfrey. 2012. Finishing flows quickly with preemptive scheduling. In ACM SIGCOMM.

[16] Kuo-Feng Hsu, Ryan Beckett, Ang Chen, Jennifer Rexford, Praveen Tammana, and David Walker. 2020. Contra: A programmable system for performance-aware routing. In USENIX NSDI.

[17] Shuihai Hu, Wei Bai, Gaoxiong Zeng, Zilong Wang, Baochen Qiao, Kai Chen, Kun Tan, and Yi Wang. 2020. Aeolus: A building block for proactive transport in datacenters. In ACM SIGCOMM.

[18] Nikita Ivkin, Zhuolong Yu, Vladimir Braverman, and Xin Jin. 2019. Qpipe: Quantiles sketch fully in the data plane. In ACM CoNEXT.

[19] Xin Jin, Xiaozhou Li, Haoyu Zhang, Nate Foster, Jeongkeun Lee, Robert Soulé, Changhoon Kim, and Ion Stoica. 2018. NetChain: Scale-Free Sub-RTT Coordination. In USENIX NSDI.

[20] Xin Jin, Xiaozhou Li, Haoyu Zhang, Robert Soulé, Jeongkeun Lee, Nate Foster, Changhoon Kim, and Ion Stoica. 2017. NetCache: Balancing Key-Value Stores with Fast In-Network Caching. In ACM SOSP.

[21] Srinivasan Keshav. 1991. On the efficient implementation of fair queueing. Internetworking: Research and Experience (September 1991).

[22] Gautam Kumar, Nandita Dukkipati, Keon Jang, Hassan MG Wassel, Xian Wu, Behnam Montazeri, Yaogong Wang, Kevin Springborn, Christopher Alfeld, Michael Ryan, David Wetherall, and Amin Vahdat. 2020. Swift: Delay is simple and effective for congestion control in the datacenter. In ACM SIGCOMM.

[23] Joseph Y-T Leung. 1989. A new algorithm for scheduling periodic, real-time tasks. Algorithmica 4, 1 (1989), 209–219.

[24] Jialin Li, Ellis Michael, and Dan R. K. Ports. 2017. Eris: Coordination-Free Consistent Transactions Using In-Network Concurrency Control. In ACM SOSP.

[25] Jialin Li, Ellis Michael, Naveen Kr. Sharma, Adriana Szekeres, and Dan R.K. Ports. 2016. Just say NO to Paxos overhead: Replacing consensus with network ordering. In USENIX OSDI.

[26] Zaoxing Liu, Zhihao Bai, Zhenming Liu, Xiaozhou Li, Changhoon Kim, Vladimir Braverman, Xin Jin, and Ion Stoica. 2019. DistCache: Provable Load Balancing for Large-Scale Storage Systems with Distributed Caching. In USENIX FAST.

[27] Paul E McKenney. 1990. Stochastic Fairness Queueing. In IEEE INFOCOM.

[28] Rui Miao, Hongyi Zeng, Changhoon Kim, Jeongkeun Lee, and Minlan Yu. 2017. Silkroad: Making stateful layer-4 load balancing fast and cheap using switching ASICs. In ACM SIGCOMM.

[29] Radhika Mittal, Rachit Agarwal, Sylvia Ratnasamy, and Scott Shenker. 2016. Universal packet scheduling. In USENIX NSDI.

[30] Radhika Mittal, Vinh The Lam, Nandita Dukkipati, Emily Blem, Hassan Wassel, Monia Ghobadi, Amin Vahdat, Yaogong Wang, David Wetherall, and David Zats. 2015. TIMELY: RTT-based congestion control for the datacenter. SIGCOMM CCR (August 2015).

[31] Srinivas Narayana, Anirudh Sivaraman, Vikram Nathan, Prateesh Goyal, Venkat Arun, Mohammad Alizadeh, Vimalkumar Jeyakumar, and Changhoon Kim. 2017. Language-Directed Hardware Design for Network Performance Monitoring. In ACM SIGCOMM.

[32] Kathleen Nichols and Van Jacobson. 2012. Controlling Queue Delay: A modern AQM is just one piece of the solution to bufferbloat. In ACM Queue.

[33] Misja Nuyens and Adam Wierman. 2008. The Foreground–Background queue: A survey. Performance Evaluation 65, 3 (2008), 286–307.

[34] Rong Pan, Lee Breslau, Balaji Prabhakar, and Scott Shenker. 2003. Approximate Fairness through Differential Dropping. In ACM SIGCOMM.

[35] Rong Pan, Balaji Prabhakar, and Konstantinos Psounis. 2000. CHOKe: A stateless active queue management scheme for approximating fair bandwidth allocation. In IEEE INFOCOM.

[36] Dan R. K. Ports, Jialin Li, Vincent Liu, Naveen Kr. Sharma, and Arvind Krishnamurthy. 2015. Designing Distributed Systems Using Approximate Synchrony in Data Center Networks. In USENIX NSDI.

[37] Idris A Rai, Guillaume Urvoy-Keller, and Ernst W Biersack. 2003. Analysis of LAS scheduling for job size distributions with high variance. ACM SIGMETRICS Performance Evaluation Review 31, 1 (2003), 218–228.

[38] Ahmed Saeed, Yimeng Zhao, Nandita Dukkipati, Ellen Zegura, Mostafa Ammar, Khaled Harras, and Amin Vahdat. 2019. Eiffel: Efficient and flexible software packet scheduling. In USENIX NSDI.

[39] Amedeo Sapio, Marco Canini, Chen-Yu Ho, Jacob Nelson, Panos Kalnis, Changhoon Kim, Arvind Krishnamurthy, Masoud Moshref, Dan Ports, and Peter Richtarik. 2021. Scaling Distributed Machine Learning with In-Network Aggregation. In USENIX NSDI.

[40] Hanrijanto Sariowan, Rene L Cruz, and George C Polyzos. 1999. SCED: A generalized scheduling policy for guaranteeing quality-of-service. IEEE/ACM Transactions on Networking 7, 5 (1999), 669–684.

[41] Linus E Schrage and Louis W Miller. 1966. The queue M/G/1 with the shortest remaining processing time discipline. Operations Research 14, 4 (1966), 670–684.

[42] Naveen Kr Sharma, Ming Liu, Kishore Atreya, and Arvind Krishnamurthy. 2018. Approximating fair queueing on reconfigurable switches. In USENIX NSDI.

[43] Naveen Kr Sharma, Chenxingyu Zhao, Ming Liu, Pravein G Kannan, Changhoon Kim, Arvind Krishnamurthy, and Anirudh Sivaraman. 2020. Programmable calendar queues for high-speed packet scheduling. In USENIX NSDI.

[44] Madhavapeddi Shreedhar and George Varghese. 1995. Efficient fair queueing using deficit round robin. In ACM SIGCOMM.

[45] Vishal Shrivastav. 2019. Fast, scalable, and programmable packet scheduler in hardware. In ACM SIGCOMM.

[46] Anirudh Sivaraman, Alvin Cheung, Mihai Budiu, Changhoon Kim, Mohammad Alizadeh, Hari Balakrishnan, George Varghese, Nick McKeown, and Steve Licking. 2016. Packet transactions: High-level programming for line-rate switches. In ACM SIGCOMM.

[47] Anirudh Sivaraman, Suvinay Subramanian, Mohammad Alizadeh, Sharad Chole, Shang-Tse Chuang, Anurag Agrawal, Hari Balakrishnan, Tom Edsall, Sachin Katti, and Nick McKeown. 2016. Programmable packet scheduling at line rate. In ACM SIGCOMM.

[48] Ion Stoica, Scott Shenker, and Hui Zhang. 1998. Core-stateless fair queueing: Achieving approximately fair bandwidth allocations in high speed networks. In ACM SIGCOMM.

[49] Zhuolong Yu, Jingfeng Wu, Vladimir Braverman, Ion Stoica, and Xin Jin. 2021. Twenty Years After: Hierarchical Core-Stateless Fair Queueing. In USENIX NSDI.

[50] Zhuolong Yu, Yiwen Zhang, Vladimir Braverman, Mosharaf Chowdhury, and Xin Jin. 2020. Netlock: Fast, centralized lock management using programmable switches. In ACM SIGCOMM.

[51] Hang Zhu, Zhihao Bai, Jialin Li, Ellis Michael, Dan Ports, Ion Stoica, and Xin Jin. 2019. Harmonia: Near-Linear Scalability for Replicated Storage with In-Network Conflict Detection. In Proceedings of the VLDB Endowment.

### Appendices

Appendices are supporting material that has not been peer-reviewed.

### Proof of Theorem 1

**Proof.** We ignore the constraint \( c \leq KC \) as it is covered by the constraint \( W \). For FIFO, every packet is treated equally based on the first-arrival, first-admission principle, so their incoming rate is proportional to their sending rate. Let us assume the incoming rates of each type of packet to be \( k\lambda_1, k\lambda_2, \ldots, k\lambda_n \). At the stationary state, the total incoming rate of the queue equals its total outgoing rate \( \gamma \), i.e., \( k\lambda_1 + k\lambda_2 + \cdots + k\lambda_n = \gamma \), which implies \( k = \frac{\gamma}{\sum_{j=1}^n \lambda_j} \). Thus, for packet \( i \), its incoming and outgoing rate is \( k\lambda_i = \frac{\gamma \lambda_i}{\sum_{j=1}^n \lambda_j} \).

For PIFO, note that packets are admitted according to their priority, with high-priority packets always admitted ahead of low-priority packets. Recall that \( \sum_{i=1}^n \lambda_i > \gamma \), i.e., the total sending rate is greater than the allowed outgoing rate. When the system reaches its stationary state, there exists a threshold \( n^* := \min \{ i \mid \lambda_1 + \cdots + \lambda_i \geq \gamma \} \), such that for \( i > n^* \), packet \( i \) can no longer be admitted since the system is already stationary and its priority is below the admitted ones, thus the incoming/outgoing rate is zero.

For AIFO, given a queue length \( c \), the algorithm decides an admission priority threshold \( n(c) = 1 \).