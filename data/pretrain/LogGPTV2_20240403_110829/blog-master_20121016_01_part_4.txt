open("pg_xlog/000000010000000000000022", O_RDWR) = 5  
write(5, "f\320\2\0\1\0\0\0\0\0\0\0\0\0\0\210\355\377_O\305\277^O\0\0\0\4\0 \0\0"..., 245760) = 245760  
fdatasync(5)                            = 0  
....write..  
close(5)                                = 0  
open("pg_xlog/000000010000000000000023", O_RDWR) = 5  
write(5, "f\320\3\0\1\0\0\0\0\0\0\0\0\0\0\214\355\377_O\305\277^O\0\0\0\4\0 \0\0"..., 344064) = 344064  
fdatasync(5)                            = 0  
....write..  
close(5)                                = 0  
open("pg_xlog/000000010000000000000024", O_RDWR) = -1 ENOENT (No such file or directory)  
unlink("pg_xlog/xlogtemp.21951")        = -1 ENOENT (No such file or directory)  
open("pg_xlog/xlogtemp.21951", O_RDWR|O_CREAT|O_EXCL, 0600) = 5  
write(5, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 8192) = 8192  
... 省略多行同样的初始化xlog文件的操作.  
fsync(5)                                = 0  
close(5)                                = 0  
stat("pg_xlog/000000010000000000000024", 0x7fff4b204c30) = -1 ENOENT (No such file or directory)  
link("pg_xlog/xlogtemp.21951", "pg_xlog/000000010000000000000024") = 0  
unlink("pg_xlog/xlogtemp.21951")        = 0  
open("pg_xlog/000000010000000000000024", O_RDWR) = 5  
write(5, "f\320\2\0\1\0\0\0\0\0\0\0\0\0\0\220\355\377_O\305\277^O\0\0\0\4\0 \0\0"..., 303104) = 303104  
fdatasync(5)                            = 0  
....write.....  
......   
close(5)                                = 0  
open("pg_xlog/000000010000000000000028", O_RDWR) = -1 ENOENT (No such file or directory)  
unlink("pg_xlog/xlogtemp.21951")        = -1 ENOENT (No such file or directory)  
open("pg_xlog/xlogtemp.21951", O_RDWR|O_CREAT|O_EXCL, 0600) = 5  
write(5, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 8192) = 8192  
............  
stat("pg_xlog/000000010000000000000028", 0x7fff4b204c30) = -1 ENOENT (No such file or directory)  
link("pg_xlog/xlogtemp.21951", "pg_xlog/000000010000000000000028") = 0  
unlink("pg_xlog/xlogtemp.21951")        = 0  
open("pg_xlog/000000010000000000000028", O_RDWR) = 5  
write(5, "f\320\2\0\1\0\0\0\0\0\0\0\0\0\0\240\355\377_O\305\277^O\0\0\0\4\0 \0\0"..., 311296) = 311296  
fdatasync(5)                            = 0  
```  
跟踪backend process :  
```  
postgres@db-172-16-3-40-> strace -p 26479   
# 仅当commit时backend process进程会对xlog进行写操作  
Process 26479 attached - interrupt to quit  
recvfrom(7, "Q\0\0\0\fcommit;\0", 8192, 0, NULL, NULL) = 13  
fadvise64(38, 0, 0, POSIX_FADV_DONTNEED) = 0  
close(38)                               = 0  
open("pg_xlog/000000010000000000000028", O_RDWR) = 38  
lseek(38, 56131584, SEEK_SET)           = 56131584  
write(38, "f\320\1\0\1\0\0\0\0\0\0\0\0\200X\243\"\0\0\0\177\6\0\0\2331\0\0\"B\0\0"..., 8192) = 8192  
fdatasync(38)                           = 0  
sendto(6, "\2\0\0\0\210\2\0\0\2331\0\0\6\0\0\0\1\0\0\0\0\0\0\0\33B\0\0\0\0\0\0"..., 648, 0, NULL, 0) = 648  
sendto(7, "C\0\0\0\vCOMMIT\0Z\0\0\0\5I", 18, 0, NULL, 0) = 18  
[root@db-172-16-3-40 fd]# cd /proc/26479/fd  
[root@db-172-16-3-40 fd]# ll 38  
lrwx------ 1 postgres postgres 64 Oct 16 09:09 38 -> /pgdata/digoal/1921/data01/pg_xlog/000000010000000000000028  
```  
因此在使用流复制的primary-standby环境中, standby可以迅速的接收到主节点已经fsync到disk的xlog信息. 取决于wal buffer是否满, 或者系统中有commit. 那么主节点上fsync到磁盘的xlog信息将被sender process(每10ms或者每次commit后被唤醒)发送给standby 的receiver process.  
## 参考  
1\. Use pageinspect EXTENSION view PostgreSQL Page's raw infomation  
http://blog.163.com/digoal@126/blog/static/16387704020114273265960/  
2\. http://www.postgresql.org/docs/9.2/static/pageinspect.html  
3\. http://www.postgresql.org/docs/9.2/static/runtime-config-wal.html#RUNTIME-CONFIG-WAL-SETTINGS  
4\. USE GDB debug postgres  
http://blog.163.com/digoal@126/blog/static/163877040201252605924116/  
5\. t_infomask标示 :   
htup.h  
```  
00158 /*  
00159  * information stored in t_infomask:  
00160  */  
00161 #define HEAP_HASNULL            0x0001  /* has null attribute(s) */  
00162 #define HEAP_HASVARWIDTH        0x0002  /* has variable-width attribute(s) */  
00163 #define HEAP_HASEXTERNAL        0x0004  /* has external stored attribute(s) */  
00164 #define HEAP_HASOID             0x0008  /* has an object-id field */  
00165 /* bit 0x0010 is available */  
00166 #define HEAP_COMBOCID           0x0020  /* t_cid is a combo cid */  
00167 #define HEAP_XMAX_EXCL_LOCK     0x0040  /* xmax is exclusive locker */  
00168 #define HEAP_XMAX_SHARED_LOCK   0x0080  /* xmax is shared locker */  
00169 /* if either LOCK bit is set, xmax hasn't deleted the tuple, only locked it */  
00170 #define HEAP_IS_LOCKED  (HEAP_XMAX_EXCL_LOCK | HEAP_XMAX_SHARED_LOCK)  
00171 #define HEAP_XMIN_COMMITTED     0x0100  /* t_xmin committed */  
00172 #define HEAP_XMIN_INVALID       0x0200  /* t_xmin invalid/aborted */  
00173 #define HEAP_XMAX_COMMITTED     0x0400  /* t_xmax committed */  
00174 #define HEAP_XMAX_INVALID       0x0800  /* t_xmax invalid/aborted */  
00175 #define HEAP_XMAX_IS_MULTI      0x1000  /* t_xmax is a MultiXactId */  
00176 #define HEAP_UPDATED            0x2000  /* this is UPDATEd version of row */  
00177 #define HEAP_MOVED_OFF          0x4000  /* moved to another place by pre-9.0  
00178                                          * VACUUM FULL; kept for binary  
00179                                          * upgrade support */  
00180 #define HEAP_MOVED_IN           0x8000  /* moved from another place by pre-9.0  
00181                                          * VACUUM FULL; kept for binary  
00182                                          * upgrade support */  
00183 #define HEAP_MOVED (HEAP_MOVED_OFF | HEAP_MOVED_IN)  
00184   
00185 #define HEAP_XACT_MASK          0xFFE0  /* visibility-related bits */  
```  
6\. wal buffer :   
```  
wal_buffers (integer)  
The amount of shared memory used for WAL data that has not yet been written to disk.   
The default setting of -1 selects a size equal to 1/32nd (about 3%) of shared_buffers,   
but not less than 64kB nor more than the size of one WAL segment, typically 16MB.   
This value can be set manually if the automatic choice is too large or too small,   
but any positive value less than 32kB will be treated as 32kB. This parameter can only be set at server start.  
The contents of the WAL buffers are written out to disk at every transaction commit, so extremely large values are unlikely to provide a significant benefit.   
However, setting this value to at least a few megabytes can improve write performance on a busy server where many clients are committing at once.   
The auto-tuning selected by the default setting of -1 should give reasonable results in most cases.  
Increasing this parameter might cause PostgreSQL to request more System V shared memory than your operating system's default configuration allows.   
See Section 17.4.1 for information on how to adjust those parameters, if necessary.  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")