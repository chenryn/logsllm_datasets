---
## Page 291
a colon if the second capruring group participated in the match. The conditionals have
no alternative, which means they will match nothing at all (but still succeed) when the
second capruring group did not participate in the match.  do the same using named capture.
Only some flavors support conditionals. If conditionals are not available, the only sol
ution is to use alternation to spell out the rwo altermatives with and without delimiters.
The disadvantage of this solution is that it results in wo capruring groups for each part
of the date and time. Only one of the rwo sets of capturing groups will participate in
the match. Code that uses this regex will have to check both groups.
See Also
This chapter has several other recipes for matching dates and times. Recipes 4.4 and
4.5 show how to validate traditional date formats. Recipe 4.6 shows how to validate
traditional time formats.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains
altermation. Recipe 2.9 explains grouping. Recipe 2.10 explains backreferences.
adau sudx I'7 droay snona ue pu suedxo II'7 adioa
Recipe 2.17 explains conditionals.
4.8LimitInputtoAlphanumericCharacters
Problem
Your application requires that users limit their responses to one or more alphanumeric
English characters (letters AZ and az, and digits 09).
Solution
With regular expressions at your disposal, the solution is dead simple. A character class
can set up the allowed range of characters. With an added quantifier that repeats the
character class one or more times, and anchors that bind the match to the start and end
of the string, you're good to go.
Regular expression
^[A-Z0-9]+$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Ruby example
1f subject =~ /^[A-Z0-9]+$/1
puts "Subject is alphanunerica
4.8 Limit Input to Alphanumeric Characters | 275
---
## Page 292
else
puts "Subject is not alphanumeric*
end
Follow Recipe 3.6 to add this regex to your code in other programming languages.
Recipe 3.4 shows how to set regular expression options, including the *case insensitive*
modifier used here.
Discussion
Let’s look at the four pieces of this regular expression one at a time?
# Assert position at the beginning of the string.
[A-Zo-9] # Match a character fron A to Z or from o to 9
# between one and unlimited times.
# Assert position at the end of the string-
Regex options: Case insensitive, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
The  apply only to the immediately preceding element,
limiting the number of characters that can be matched by patterns that include more
than a single token requires a different approach.
As explained in Recipe 2.16, lookaheads (and their counterpart, lookbehinds) are a
special kind of asserion that,like ^) and $, match a position within the subject sring
and do not consume any characters. Lookaheads can be either positive or negative,
which means they can check if a pattern follows or does not follow the current position
Suuuaaq au 1e pasn aq ueo *d(.-=)> se uaam peaqexoo asrsod v qpieu au u
of the pattern to ensure that the string is within the target length range. The remainder
of the regex can then validate the desired pattern without worrying about text length.
Here’s a simple example:
(?=.{1,10}$).*
Regexoptions: Dot matches line breaks
Regexflarer: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
^(?=[\5}s]{1,10}s)[1s\s]*
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
It is important that the $ anchor appears inside the lokahead because the maximum
length test works only if we ensure that there are no more characters after we’ve reached
the limit. Because the lookahead at the beginning of the regex enforces the lengrh range,
the following pattern can then apply any additional validation rules. In this case, the
pattern ,* (or [S\s]* in the version that adds native JavaScript support) is used to
simply match the entire subject text with no added constraints.
The first regex uses the “dot matches line breaks” option so that it wil work correctly
when your subject string contains line breaks. See Recipe 3.4 for details about how to
apply this modifier with your programming language. Standard JavaScript without
XRegExp doesn’t have a “dot matches line breaks? option, so the second regex uses a
character class that matches any character. See "Any character including line
breaks" on page 39 for more information.
Limit the number of nonwhitespace characters
The following regex matches any string that contains berween 10 and 100 nonwhite-
space characters:
^s*(?:\S\s*){10,100)$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
280 | Chapter 4: Validation and Formatting
---
## Page 297
By default, \s> in .NET, JavaScript, Perl, and Python 3.x matches all Unicode white-
space, and \5) matches everything else. In Java, PCRE, Python 2.x, and Ruby,  matches everything else. In Python 2.x, you
creating the regex. In Java 7, you can make \s> match all Unicode whitespace by pass-
can make  match all Unicode whitespace by passing the UNIcooE or U flag when
ing the UNIcooE_CHARACTER_CLASS flag. Developers using Java 4 to 6, PCRE, and Ruby
1.9 who want to avoid having any Unicode whitespace count against their character
limit can switch to the following version of the regex that takes advantage of Unicode
categories (described in Recipe 2.7):
[\p{Z}\s]*(？:[^p{(z}\s][p{Z}\s]*)(10,100)$
Regex options: None
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Ruby 1.9
PCRE must be compiled with UTF-8 support for this to work. In PHP, turm on UTF-8
support with the /u parterm modifier.
This latter regex combines the Unicode \p{Z} Separator property with the s) short-
hand for whitespace. That’s because the characters matched by  is always Unicode-based.
If you want to count words that contain non-ASClI lerters and numbers, the following
regexes provide this capability for additional regex flavors:
[^\p{L}\p{M)\pNd}\p{Pc}]*(？: [ is needed berween <\w) and <\) (or <[<p{L}\p(M}\p{Nd}\p{Pc}] and [^
saupeu AIea dno8 aq go uoadau qe ieq amsua o ([{(2d)d(pn}d\,(}d(1}d
an entire word. Without the word boundary, a single repetition would be allowed to
match any part of a word, with subsequent repetitions matching additional pieces.
The third version of the regex (which adds support for XRegExp, PCRE, and Ruby 1.9)