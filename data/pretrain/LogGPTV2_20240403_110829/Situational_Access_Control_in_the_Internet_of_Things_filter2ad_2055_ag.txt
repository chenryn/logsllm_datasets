### Equally Dangerous: OAuth 2.0 Prompts and Overprivileging in IFTTT

Users of IFTTT, which interacts with many other services, frequently encounter multiple OAuth 2.0 prompts with confusing semantics. To reduce the number of these prompts, IFTTT eagerly requests access to all APIs of a web service channel once the user activates a single recipe that uses any of them. This approach often leads to overprivileging, as noted by Fernandes et al. [31]. For example, if a user activates a recipe that requires access to any Facebook channel, even a read-only one, IFTTT will request extensive permissions, including the right to post to the user’s page.

### A.3 App-Service Interaction: Samsung’s SmartThings API

**Subjects:** SmartThings apps, known as SmartApps, are collections of event handlers written in Groovy. These apps are distributed through a curated app market and typically run on the Samsung cloud service. Some can run offline on the SmartThings hub, and this capability is expected to be expanded [65].

**Objects:** SmartApps control smart devices compatible with the SmartThings service, usually connected to the SmartThings hub. The access-control system protects the interactions between apps (subjects) and device APIs (objects).

**Access-Control Policies:** Apps control devices using "skills," which are collections of commands and attribute values exposed by devices. Many skills are defined in the API and are highly specific, unlike broader Android permissions. For instance, the "dishwasher mode" skill allows getting and setting operation modes for the dishwasher (e.g., Home, Away, Night). Some skills are similar to OCF resource types (see Section A.1).

**Policy Creation:** SmartApps declare the skills they require, and SmartThings devices declare the skills they implement. When installing a SmartApp, the user is prompted to assign devices implementing the required skills. Access rights are determined via device assignment, not by the skills requested. This design often results in overprivileging, as noted by Fernandes et al. [28].

**Access-Control Enforcement:** The Groovy runtime environment on the SmartThings cloud platform checks resource-access operations against app skills.

**Situational Constraints:** SmartThings tracks three specific situations through modes: Home, Away, and Night. These modes are described as "behavioral filters." Users can configure apps to run only in specific modes, and apps can change their behavior according to modes. Mode changes are highly configurable using routines, which are user-defined automation rules with triggers and actions (similar to IFTTT rules). A common configuration is to switch the Home/Away mode based on the device's location and set the Night mode based on the time of day. Users can add custom modes, but developers cannot. Modes are mutually exclusive and thus not suitable for tracking multiple non-exclusive situations.

### A.4 Channel-Recipe Interactions (IFTTT)

**Structure and Access Control:** In IFTTT, recipes are subjects, and actions are objects. Access-control policies are implicitly defined by recipe functionality, meaning every recipe can access its attached actions (subject to situational constraints). Policy creation involves activating recipes.

**Situational Constraints:** Recipes can perform potentially dangerous actions, such as disarming an alarm or tweeting on behalf of the user, but they only execute if activated by their triggers. Triggers define the conditions for executing recipe actions. Each recipe is limited to one situational constraint defined by its trigger and two optional constraints: notifications and recipe filters. Notifications alert users when a recipe runs, while filters can prevent the action from executing based on situational factors like time of day or trigger-firing events.

### B. IFTTT Survey

**Collected Data:** We implemented a crawler to extract IFTTT recipes, actions, and triggers, similar to Ur et al. [70] and Surbatovich et al. [66]. As of January 5th, 2018, we extracted 13,619 recipes from 571 curated recipe collections. Our analysis excludes the "notify me about new recipes for this service" recipe, which exists for every service.

**Top 10 Most Utilized Triggers and Actions:**
- **Triggers (by recipes):** Amazon Alexa, DO Button, Location, Date and Time, YouTube, Google Assistant, etc.
- **Actions (by recipes):** Send a notification, Add row to spreadsheet, Send an email, Post a tweet, etc.
- **Triggers (by users):** DO Button, Instagram, Amazon Alexa, Location, Feed, DO Note, etc.
- **Actions (by users):** Send a notification, Send an email, Add row to spreadsheet, Quick add event, Post a tweet, etc.

**Home/Away Trigger:** Location-based triggers are among the most common, used by over 500 apps and 3 million users. The "location" trigger uses the user's phone to determine the area they are in. Manual examination of 100 randomly chosen apps revealed that most use location to determine if the user is at home, gym, work, or vacation.

### C. ESO Examples

**User is Away (using GPS and Presence Sensors):** This ESO uses phone geolocation and presence sensors (Nest and SmartThings) to detect home presence. Users install an Android app and configure their location and sensors. The ESO uses both geofencing and presence-sensor data to determine if the user is away.

**Notify User via Push Notifications:** This ESO sends a push notification whenever an access occurs. Users install an Android app, and the ESO always returns "active."

**Notify User via Push Notifications and Smart Lights:** This ESO sends a push notification and blinks smart lights. Users install an Android app and a SmartThings app. The ESO logs the access and always returns "active."

### D. OAuth 2.0

**Access Delegation Flows:** OAuth 2.0 involves the user, a user agent (e.g., browser, app), and the subject and object services. The flow begins with a request from the user-agent to the subject service, followed by redirection to the object service. The object service obtains authorization, redirects back to the subject service, and passes the access token. Optionally, a refresh token can be granted.

**Example: Adding a Nest Cam Alexa Skill:** A user who wants to enable the "Nest Cam" Alexa skill installs it from the Amazon website. If the token is not already available, an OAuth 2.0 flow is initiated. The Nest service authenticates the user and prompts for approval. If approved, the user is redirected back to continue configuring the skill.

**On-Demand Permissioning:** OAuth 2.0 is popular due to its ease of use for users and developers. Delegation flows can be nested seamlessly in any subject service flow where the user is involved. User approval and permission semantics are not standardized, but typically involve displaying a form to request permission, including a description and URL for identification.