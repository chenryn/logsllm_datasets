    Speed: 1000 Mbps
    Duplex: full
    Link Failure Count: 0
    Permanent HW addr: 00:53:00:59:da:b7
    Slave queue ID: 0
    Slave Interface: wlp61s0
    MII Status: up
    Speed: Unknown
    Duplex: Unknown
    Link Failure Count: 2
    Permanent HW addr: 00:53:00:b3:22:ba
    Slave queue ID: 0
    ```
:::
::: itemizedlist
**其它资源**
-   [配置以太网连接](#configuring-an-ethernet-connection_configuring-and-managing-networking.html "第 6 章 配置以太网连接"){.link}
-   [管理 Wi-Fi
    连接](#managing-wi-fi-connections_configuring-and-managing-networking.html "第 7 章 管理 Wi-Fi 连接"){.link}
-   [配置网络绑定](#configuring-network-bonding_configuring-and-managing-networking.html "第 12 章 配置网络绑定"){.link}
:::
:::
:::
[]{#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking}第 13 章 设置 WireGuard VPN {.title}
:::
WireGuard 是一个在 Linux 内核中运行的高性能 VPN
解决方案。它使用现代加密机制，并且比许多其他 VPN
解决方案更容易配置。另外，WireGuard
的小代码库降低了安全攻击的攻击面，因此提高安全性。对于身份验证和加密，WireGuard
使用类似于 SSH 的键。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
WireGuard
只作为技术预览提供。红帽产品服务级别协议（SLA）不支持技术预览功能，且其功能可能并不完善，因此红帽不建议在生产环境中使用它们。这些预览可让用户早期访问将来的产品功能，让用户在开发过程中测试并提供反馈意见。
如需有关
[技术预览功能支持范围](https://access.redhat.com/support/offerings/techpreview){.link}
的信息，请参阅红帽客户门户网站中的技术预览功能支持范围。
:::
要设置 WireGuard
VPN，您必须完成以下步骤。您可以使用不同的选项来执行每个步骤：[为 VPN
中的每个主机创建公钥和私钥](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_creating-private-and-public-keys-to-be-used-in-wireguard-connections_assembly_setting-up-a-wireguard-vpn "创建在 WireGuard 连接中使用的私钥和公钥"){.link}。
::: orderedlist
1.  使用
    [nmcli](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-a-wireguard-using-nmcli_assembly_setting-up-a-wireguard-vpn "使用 nmcli 配置 WireGuard 服务器"){.link}、[nmtui](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-a-wireguard-server-using-nmtui_assembly_setting-up-a-wireguard-vpn "使用 nmtui 配置 WireGuard 服务器"){.link}、[nmn-connection-editor
    或 wg-
    quick](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-a-wireguard-server-using-nm-connection-editor_assembly_setting-up-a-wireguard-vpn "使用 nm-connection-editor 配置 WireGuard 服务器"){.link}
    服务来配置 WireGuard 服务器。
2.  [使用命令行](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-firewalld-on-a-wireguard-server-using-the-command-line_assembly_setting-up-a-wireguard-vpn "使用命令行在 WireGuard 服务器中配置 firewalld"){.link}
    或
    [图形界面](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-firewalld-on-a-wireguard-server-using-the-graphical-interface_assembly_setting-up-a-wireguard-vpn "使用图形界面在 WireGuard 服务器中配置 firewalld"){.link}，在
    WireGuard 服务器上配置 firewalld。
3.  使用
    [nmcli](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-a-wireguard-client-using-nmcli_assembly_setting-up-a-wireguard-vpn "使用 nmcli 配置 WireGuard 客户端"){.link}、[nm-connection-editor](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-a-wireguard-client-using-nm-connection-editor_assembly_setting-up-a-wireguard-vpn "使用 nm-connection-editor 配置 WireGuard 客户端"){.link}
    或
    [wg-quick](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-a-wireguard-client-using-the-wg-quick-service_assembly_setting-up-a-wireguard-vpn "使用 wg-quick 服务配置 WireGuard 客户端"){.link}
    服务来配置 WireGuard 客户端。
:::
请注意，WireGuard 仅在网络层（层 3）上运行。因此，您无法使用
DHCP，且必须为服务器和客户端上的隧道设备分配静态 IP 地址或 IPv6
本地链接地址。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
只有在禁用 RHEL 中的 Federal Information Processing
Standard(FIPS)模式时，才能使用 WireGuard。
:::
请注意，参与 WireGuard VPN 的所有主机都是同级的。本文档中，使用术语
`客户端（client）`{.literal}代表建立连接的主机;并使用术语`服务器（server）`{.literal}代表带有固定主机名或
IP 地址的主机，客户端会连接到这个主机或通过这个主机路由所有流量。
::: section
::: titlepage
# []{#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#ref_protocols-and-primitives-used-by-wireguard_assembly_setting-up-a-wireguard-vpn}WireGuard 使用的协议和原语 {.title}
:::
WireGuard 使用以下协议和原语：
::: itemizedlist
-   ChaCha20 用于通过 Poly1305 进行身份验证，使用带有关联数据(AEAD)的
    Authenticated Encryption，如
    [RFC7539](https://tools.ietf.org/html/rfc7539){.link} 所述
-   Curve25519 用于 Elliptic-curve Diffie-Hellman(ECDH)密钥交换
-   用于哈希和密钥哈希的 BLAKE2s，如
    [RFC7693](https://tools.ietf.org/html/rfc7693){.link}所述
-   用于哈希表键的 SipHash24
-   用于密钥派生的 HKDF，如
    [RFC5869](https://tools.ietf.org/html/rfc5869){.link}所述
:::
:::
::: section
::: titlepage
# []{#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#con_how-wireguard-uses-tunnel-ip-addresses-public-keys-and-remote-endpoints_assembly_setting-up-a-wireguard-vpn}WireGuard 如何使用隧道 IP 地址、公钥和远程端点 {.title}
:::
当 WireGuard 将网络数据包发送到对等点时：
::: orderedlist
1.  WireGuard 从数据包读取目标 IP，并将其与本地配置中允许的 IP
    地址列表进行比较。如果未找到 peer，WireGuard 会丢弃数据包。
2.  如果 peer 有效，WireGuard 使用对等的公钥对数据包进行加密。
3.  发送主机查找主机的最新互联网 IP 地址，并将加密数据包发送到此地址。
:::
当 WireGuard 接收数据包时：
::: orderedlist
1.  WireGuard 使用远程主机的私钥解密数据包。
2.  WireGuard 从数据包读取内部源地址，并在本地主机上对等点的设置中查询
    IP 地址是否配置。如果源 IP 位于允许列表中，WireGuard
    会接受数据包。如果 IP 地址不在列表中，WireGuard 会丢弃数据包。
:::
公钥和允许的 IP 地址的关联被称为
`Cryptokey Routing Table`{.literal}。这意味着，当发送数据包时，IP
地址列表的行为与路由表相似，在接收数据包时作为一种访问控制列表。
:::
::: section
::: titlepage
# []{#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#con_using-a-wireguard-client-behind-nat-and-firewalls_assembly_setting-up-a-wireguard-vpn}使用 NAT 和防火墙后面的 WireGuard 客户端 {.title}
:::
WireGuard 使用 UDP
协议，只有在对等点发送数据包时才会传输数据。路由器上的有状态防火墙和网络地址转换(NAT)可跟踪连接，以启用
NAT 或防火墙接收数据包的对等点。
为保持连接处于活动状态，WireGuard 支持
`persistent keepalives`{.literal}。这意味着您可以设置一个间隔，其中
WireGuard 发送 keepalive 数据包。默认情况下，禁用持久的 keep-alive
功能来减少网络流量。如果您在带有 NAT
的网络中使用客户端，或者防火墙在一定时间不活动状态后关闭连接，在客户端上启用此功能。
:::
::: section
::: titlepage
# []{#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_creating-private-and-public-keys-to-be-used-in-wireguard-connections_assembly_setting-up-a-wireguard-vpn}创建在 WireGuard 连接中使用的私钥和公钥 {.title}
:::
WireGuard 使用 base64 编码的私钥和公钥来互相验证主机。因此，您必须在参与
WireGuard VPN 的每个主机上创建密钥。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
对于安全连接，请为每个主机创建不同的密钥，并确保只使用远程 WireGuard
主机共享公钥。不要使用本文档中使用的示例键。
:::
::: orderedlist
**步骤**
1.  安装 `wireguard-tools`{.literal} 软件包：
    ``` literallayout
    # dnf install wireguard-tools
    ```
2.  为主机创建私钥和对应的公钥：
    ``` literallayout
    # wg genkey | tee /etc/wireguard/$HOSTNAME.private.key | wg pubkey > /etc/wireguard/$HOSTNAME.public.key
    ```
    您需要密钥文件的内容，而不是文件本身。但是，红帽建议在将来需要记住密钥时保留文件。
3.  在密钥文件中设置安全权限：
    ``` literallayout
    # chmod 600 /etc/wireguard/$HOSTNAME.private.key /etc/wireguard/$HOSTNAME.public.key
    ```
4.  显示私钥：
    ``` literallayout
    # cat /etc/wireguard/$HOSTNAME.private.key
    YFAnE0psgIdiAF7XR4abxiwVRnlMfeltxu10s/c4JXg=
    ```
    您需要私钥在本地主机上配置 WireGuard 连接。不要共享私钥。
5.  显示公钥：
    ``` literallayout
    # cat /etc/wireguard/$HOSTNAME.public.key
    UtjqCJ57DeAscYKRfp7cFGiQqdONRn69u249Fa4O6BE=
    ```
    您需要公钥在远程主机上配置 WireGuard 连接。
:::
::: itemizedlist
**其他资源**
-   `wg(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-a-wireguard-using-nmcli_assembly_setting-up-a-wireguard-vpn}使用 nmcli 配置 WireGuard 服务器 {.title}
:::
您可以通过在 NetworkManager 中创建连接配置集来配置 WireGuard
服务器。使用此方法让 NetworkManager 管理 WireGuard 连接。
此流程假设以下设置：
::: itemizedlist
-   server：
    ::: itemizedlist
    -   Private key:
        `YFAnE0psgIdiAF7XR4abxiwVRnlMfeltxu10s/c4JXg=`{.literal}
    -   Tunnel IPv4 address: `192.0.2.1/24`{.literal}
    -   Tunnel IPv6 address: `2001:db8:1::1/32`{.literal}
    :::
-   Client:
    ::: itemizedlist
    -   Public key:
        `bnwfQcC8/g2i4vvEqcRUM2e6Hi3Nskk6G9t4r26nFVM=`{.literal}
    -   隧道 IPv4 地址： `192.0.2.2/24`{.literal}
    -   Tunnel IPv6 address: `2001:db8:1::2/32`{.literal}
    :::
:::
::: itemizedlist
**先决条件**
-   您已为服务器和客户端生成了公钥和私钥。
-   您知道以下信息：
    ::: itemizedlist
    -   服务器的私钥
    -   客户端的静态隧道 IP 地址和子网掩码
    -   客户端的公钥
    -   服务器的静态隧道 IP 地址和子网掩码
    :::
:::
::: orderedlist
**步骤**
1.  添加 NetworkManager WireGuard 连接配置集：
    ``` literallayout
    # nmcli connection add type wireguard con-name server-wg0 ifname wg0 autoconnect no
    ```
    这个命令会创建一个名为 `server-wg0`{.literal}
    的配置集，并为其分配虚拟接口
    `wg0`{.literal}。要防止连接在添加没有最终配置的情况下自动启动，请禁用
    `autoconnect`{.literal} 参数。
2.  设置服务器的隧道 IPv4 地址和子网掩码：
    ``` literallayout
    # nmcli connection modify server-wg0 ipv4.method manual ipv4.addresses 192.0.2.1/24
    ```
3.  设置服务器的隧道 IPv6 地址和子网掩码：
    ``` literallayout
    # nmcli connection modify server-wg0 ipv6.method manual ipv6.addresses 2001:db8:1::1/32
    ```
4.  将服务器的私钥添加到连接配置集中：
    ``` literallayout
    # nmcli connection modify server-wg0 wireguard.private-key "YFAnE0psgIdiAF7XR4abxiwVRnlMfeltxu10s/c4JXg="
    ```
5.  为传入的 WireGuard 连接设定端口：
    ``` literallayout
    # nmcli connection modify server-wg0 wireguard.listen-port 51820
    ```
    在主机上始终设置固定端口号，接收传入的 WireGuard
    连接。如果您没有设置端口，WireGuard 每次激活 `wg0`{.literal}
    接口时会使用一个随机的空闲端口。
6.  为您要允许与此服务器通信的每个客户端添加对等配置。您必须手动添加这些设置，因为
    `nmcli`{.literal} 实用程序不支持设置对应的连接属性。
    ::: orderedlist
    1.  编辑
        `/etc/NetworkManager/system-connections/server-wg0.nmconnection`{.literal}
        文件，并附加：
        ``` literallayout
        [wireguard-peer.bnwfQcC8/g2i4vvEqcRUM2e6Hi3Nskk6G9t4r26nFVM=]
        allowed-ips=192.0.2.2;2001:db8:1::2;
        ```
        ::: itemizedlist
        -   `[wireguard-peer.]`{.literal}
            条目定义了客户端的对等部分，部分名称包含客户端的公钥。
        -   `allowed-ips`{.literal}
            参数设置允许向这个服务器发送数据的客户端的隧道 IP 地址。
            为每个客户端添加一个部分。
        :::
    2.  重新载入 `server-wg0`{.literal} 连接配置集：
        ``` literallayout
        # nmcli connection load /etc/NetworkManager/system-connections/server-wg0.nmconnection
        ```
    :::
7.  可选：将连接配置为自动启动，请输入：
    ``` literallayout
    # nmcli connection modify server-wg0 autoconnect yes
    ```
8.  重新激活 `server-wg0`{.literal} 连接：
    ``` literallayout
    # nmcli connection up server-wg0
    ```
:::
::: itemizedlist
**后续步骤**
-   [在 WireGuard 服务器 上配置 firewalld
    服务](#assembly_setting-up-a-wireguard-vpn_configuring-and-managing-networking.html#proc_configuring-firewalld-on-a-wireguard-server-using-the-command-line_assembly_setting-up-a-wireguard-vpn "使用命令行在 WireGuard 服务器中配置 firewalld"){.link}。
:::
::: orderedlist
**验证**