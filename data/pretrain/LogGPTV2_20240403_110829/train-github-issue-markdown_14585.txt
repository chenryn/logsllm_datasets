### Scenario

In this scenario, we are using Deno to run, test, and compile TypeScript files with different permission settings. The commands are as follows:

1. **Testing with Specific Permissions:**
   ```sh
   $ deno test --allow-read=${pem_hello} ./hello.ts
   $ deno test --allow-read=${pem_world} ./world.ts
   ```

2. **Testing with Wildcard Permissions:**
   ```sh
   $ deno test -A
   ```

3. **Running with Specific Permissions:**
   ```sh
   $ deno run --allow-read=${perm_hello} ./hello.ts
   $ deno run --allow-read=${perm_hello} ./world.ts
   ```

4. **Compiling with Specific Permissions:**
   ```sh
   $ deno compile --allow-read=${perm_hello} ./hello.ts
   $ deno compile --allow-read=${perm_world} ./world.ts
   ```

### Feature: `deno.jsonc` Configuration

To manage permissions more effectively, you can use a `deno.jsonc` configuration file. Here is an example of how you can define permissions in the `deno.jsonc` file:

```json
{
  "permissions": {
    "read": [
      "${pem_hello}",
      "${pem_world}"
    ]
  }
}
```

With this configuration, you can simplify your commands by omitting the permission flags, as they will be applied based on the `deno.jsonc` file:

1. **Testing:**
   ```sh
   $ deno test
   ```

2. **Running:**
   ```sh
   $ deno run ./hello.ts
   $ deno run ./world.ts
   ```

3. **Compiling:**
   ```sh
   $ deno compile ./hello.ts
   $ deno compile ./world.ts
   ```

### Type Definitions

For clarity, here are the type definitions used in the `deno.jsonc` configuration:

- **Perm**: A record that defines the permissions.
- **PermId**: An identifier for the permission, which can be an `ImportMapId`, `PlaceHolderImportId`, or `WhatwgImportId`.

By using the `deno.jsonc` configuration, you can streamline your workflow and ensure consistent permission settings across your Deno commands.