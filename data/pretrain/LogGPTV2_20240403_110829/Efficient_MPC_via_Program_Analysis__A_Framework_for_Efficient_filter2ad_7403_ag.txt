500
1
100
ADD B 2083 151
77
9
Y 1476
A 908
134 2088 1706
468
10
66 1473
3 897
AND B 1372
Y 1462
EQ B 1838
Y 1457
GE B 2134
Y 1487
GT B 2026
Y 1463
LE B 2018
Y 1468
LT
B 2136
Y 1479
34
50
37
52
92
74
69
54
72
54
93
74
MUL B 5831 1992
Y 2812 1139
A 3057
20
MUX B 1405
Y 1474
NE B 1855
Y 1452
OR B 1381
Y 1463
26
61
38
52
44
61
SHL B 2511 370
Y 1797 260
SHR B 2521 379
Y 1775 258
SUB B 4449
Y 1490
A 910
XOR B 925
Y 1398
72
70
4
17
40
A2B
A2Y
B2A
B2Y
Y2A
Y2B
1772 138
1690 134
1439
1536
1967
1463
39
65
56
44
30 1369
50 1461
33 1863
49 1454
87 2145
71 1485
67 2020
51 1466
67 2016
52 1467
43
504
50
394
907
642
577
649
512
405
88 2141 1094
72 1470 1094
1963 5811 12212
1114 2118 13553
40
17 3136
24 1409
59 1459
32 1851
49 1465
41 1393
58 1459
37
433
51
482
53
526
369 2493 3235
249 1776 4413
375 2492 3762
253 1785 3811
63 4513
67 1477
3 915
17 923
39 1394
101
635
10
23
214
130 1758 1815
129 1705 1250
37 1444
60 1519
52 1977
42 1460
85
527
342
221
22
500
1484
801
3
276
937
249
772
999
1111
855
990
709
739
1020
1083
12117
11867
197
24
763
271
718
259
776
3336
3807
3517
3680
330
766
3
16
537
1520
1753
440
893
710
583
latency=500us) vs. WAN (i.e., bandwidth=40mbps, burst=1mbps, latency=40ms). The target machine for
cost calculation is a virtual machine with a single 3.2GHz core with 4GB of RAM. The collected results are
shown in Table 2.
The above cost table demonstrates the standard cost trends reported in the literature: Amortized oper-
ations are less costly (per operation) than unamortized one, the Yao-based protocol performs better than
Boolean (GMW) in most cases, and Arithmetic performs better when amortized. However, a closer look re-
veals a cacophony which calls for a re-examination of how cost are computed throughout the mixed protocol
selection literature: The costs for unamortized, or slightly-amortized operations are similar in (simulated)
LAN and WAN. This is not surprising if one takes into account that: (1) the simulated WAN is eﬀectively
a less powerful LAN (i.e., issues resulting from using diﬀerent routing protocols do not appear in such sim-
ulations); and (2) since there is no other traﬃc ﬂowing thought the simulated network, the two networks
perform very similarly in low-load scenarios.
The ﬁrst issue can be mitigated by running the experiments over actual networks, but solving the second
issue is tricky: One might be tempted to decrease the capacity (or, equivalently, increase the ﬂow) of the
simulated network. This will indeed make saturation take eﬀect even with low traﬃc and create a cost
diﬀerence in WAN vs LAN. However, this may still not capture the actual cost of operations, since this
cost depends on what protocol traﬃc is circulated, e.g., if an operation OP2 follows a parallel batch of a
communication-intensive operation OP1, then it might be better to compute OP2 with a protocol which is
more computation-intensive but less-communication intensive. Although it does not aﬀect our theory, we
view cost measurement as an important open problem for this line of work.
Importantly, the trends observed in [DSZ15; B¨us+18] that dominate protocol assignment, are present in
our cost measurements as well. As a result, our toolchain computes consistent protocol assignments with
previous works, as discussed in the following section.
7.4 Evaluation of the Implementation
In this section we describe the results of running our OPA solver. We run the solver on benchmarks from
HyCC[B¨us+18] (https://gitlab.com/securityengineering/HyCC) 10 and ABY[DSZ15], as well as a cou-
ple of new ones that we constructed for these experiments. We compare the outcome of our solver to the
assignments proposed in HyCC[B¨us+18] and ABY[DSZ15]. The results are summarized in Table 1.
In the following, we discuss the outcome of each of the benchmarks in Table 3 and, wherever feasible,
conﬁrm that our OPA solver demonstrates the expected behavior.
1) GCD This is the running example from this paper. Alice and Bob compute the GCD of their inputs.
This protocol entails no parallelization (i.e., no amortization). Since cost of sequential operations in πY is
the least, the IP outputs that assignment.
2) Biometric Matching A server holds a database S containing m n-dimensional tuples, and the client
holds an n-dimensional query C. The parties compute the tuple in the database with the minimal euclidean