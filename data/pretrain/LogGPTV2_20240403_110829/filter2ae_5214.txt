# 灵活，安全，带DNS安全扩展的SSH协议
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
如果我的博客你每期都读过的话，那么你对使用类似SSH的小工具就不会感到陌生，尤其是SSH和OpenSSH，他们无处不在，同时也最受欢迎。
可能你已经足够小心了，在通信过程中只是用公钥或是私钥，来防止自己的主机遭到字典式的攻击。如果你那样做了，你就会发现为了要配置访问到一台新的主机，就需要复制一份那台主机的公钥（通常是写入磁盘的）。当你有很多主机的时候，管理这些主机的密钥可以说是非常痛苦的，尤其是当你又要对其中一个密钥进行更新时，你可能近乎崩溃。但如果DNSSEC（DNSSEC：DNS安全扩展，由IETF提供的一系列DNS安全认证的的机制）能够帮到你呢？
6.2版本的OpenSSH有一项功能，即：允许远程主机通过既定方式来获取公钥，而不再是通过在`~/.ssh/`目录下的authorized_keys文件中获取公钥。比如，你可以收集到一组想要访问单个服务器（如：LDAP服务器）的用户密钥，并且在用户用公钥尝试登录时，你就可以利用主机的查询功能对每一个公钥进行验证，从而安全管理网络。这样做的优点是：可以大量减少每个主机上的授权密钥文件数量；缺点是：必须要信任这些进行主机检索的源公钥文件。在一个私有网络上的LDAP服务器也许是可以使用的（正常运行时），但它的主机却在云端工作，这看起来就不具有实际的可操作性了。
此时，DNSSEC就显示出它的优势了。一旦有了DNSSEC，在上述的情况中，我们就可以验证来自DNS服务器发出的响应，安全地将公钥存储在DNS记录中。
举个例子来说，我们正在管理一个域名叫example.com的网络，同时给Alice和Bob分配端口，让他们能够进入域名为foo，bar，baz的网域中。我们将他们各自的公钥以alice_pubkey.example.com和bob_pubkey.example.com的名字存储在一个txt文档中。这些记录属于哪个域并不重要，重要的是他们的名字必须完全正确。但我在看来，其实我们只有一个域，从而对我们构建整个局域网就提出了要求：
1.主机上的OpenSSH版本必须是6.2或者更高；
2.每个PC都必须有DNSSEC验证解析器。（我们将会用unbound-host）
3.Alice和Bob的公钥长度要低于256字节（采用ECDSA算法算出的或Ed25519码算出的也可以）
4.在example.com上设置的DNSSEC必须正确。
Alice和Bob的生成密钥为
foo:~$ ssh-keygen -t ecdsa
或者是：
foo:~$ ssh-keygen -t ed25519
接下来按照说明来做。他们会提供一个有效密码（有效密码当然是非空的），随后他们就会发给我们（或其他管理example.com这一网域的管理员）公钥文件，文件是下面这个样子：
ssh-ed25519 AAAAC3N…VY4A= alice@foo
我们可以将文件中的字段alice@foo删掉，在example.com中用alice_pubkey作为文档名来创建一个txt文档。然后，检索公钥就变得很简单了：
foo:~$ unbound-host -t TXT alice_pubkey.example.com alice_pubkey.example.com
has TXT record “ssh-ed25519 AAAAC3N…”
输入-v，解析器unbound-host会告诉我们该签名是否属实。
foo:~$ unbound-host -v -t TXT alice_pubkey.example.com
alice_pubkey.example.com has TXT record “ssh-ed25519 AAAAC…” (insecure)
输入-D,它就会对签名进行检查：
foo:~$ unbound-host –D -v -t TXT alice_pubkey.example.com
alice_pubkey.example.com has TXT record “ssh-ed25519 AAAAC3N…” (secure)
如果记录不存在，它会显示为：
foo:~$ unbound-host –D -v -t TXT charlie_pubkey.example.com
charlie_pubkey.example.com has no TXT record (secure)
注意，没有记录时，由于也要改为“安全”。
之后就是准备解析输出信息。根据sshd用户手册的说明：sshd在执行时，需要一个特定的获取公钥的用户运行程序。下面就是权限分离最好的实践证明。我们建立一个叫做pubkeygrab的用户，并在foo，bar，和baz三个域中分别建立账户。建立这些账户只是出于网络需要，它们并没有更多的权限。
foo:~$ useradd -m -d / **var** / **empty** -s /sbin/nologin pubkeygrab
然后创建脚本pubkeygrab.sh，并把它保存在三台PC上。显然，我们要设定权限：只有超级用户才可以修改该脚本。
foo:~$ cat /usr/local/bin/pubkeygrab.sh **#!/bin/sh** USER=$1
/usr/sbin/unbound-host -v -D -t TXT ${USER}_pubkey.example.com \ |
/usr/bin/grep -v "no TXT record" \ | /usr/bin/grep ' (secure)' \ |
/usr/bin/sed 's/.* "(.*)" (secure)/1/'
到此，我相信，关于我的代码风格或是shell脚本的效率问题，很多读者都有话想说，那就留给你们自己发挥吧。我之所以这样写，就是为了要提醒读者关注，在这个过程中都采用了哪些步骤，而不是注意其他的东西。
1.检索一个txt记录，如果检索失败，则不输出。
2.如果unbound-host不能确认记录是否为DNSSEC所验证，则不输出。
3.如果上述步骤都成功的话，它会弃掉文本，而只返回公钥。
4.系统本身不会去做任何复杂的事，因为复杂性就是网络安全所面对的一个敌人。（这也就是我与别人交流时所提出的一种观点。）
5.系统适用于存储多个记录。
我可以肯定的是，你一定会在你的程序编写过程中做到上述这5条。同时一定要做到，只有你想调试网络时，才让它们运行。保证系统在以下情况中不会输出任何值，才能证实你的网络是安全的：
1.用户与用户记录不匹配；
2.记录没有被验证过；
3.根文件路径(/var/unbound/root.key)的拷贝无效.
如果读者还能找到更多的实例，我将会给你的博客文章加分。
到此，你们应该了解了上述的警告了，还要再加一个：
`/etc/ssh/sshd_config`on `foo`, `bar`and `baz`:
AuthorizedKeysCommand /usr/ **local** /bin/pubkeygrab.sh
AuthorizedKeysCommandUser pubkeygrab
重启ssshd，同时检查在每台pc上是否还有alice和bob两个用户存在。上述过程也是用于所有的现存用户。现在你来到Cloud
Flare账户中，进入域名为example.com的网络，创建两个名为alice pubkey和Bob
pubkey的txt文档。粘贴各自的公钥字段，不久之后，你就会发现Alice和Bob可以登录了。之后，再用Charlie试一次。如果出现，Alice和Bob可以登录，而Charlie登录失败的话，那么恭喜你，你已经把Cloud
Flare变成一个SSH的PKI(公钥基础结构)了。
如果删除这些txt记录，那么对于Alice和Bob的访问就会被撤销，同时一旦这些txt记录的TTL（IP协议包中的一个值,它告诉网络,数据包在网络中的时间是否太长而应被丢弃）过期了，他们也就无法登录了。然而，请注意，当pubkeygrab.sh该脚本的输出为空时，sshd就会弹出“返回AuthorizedKeysFile文件”这个选项，来重新找到一个公共密钥。若Alice和Bob想搞鬼，在你删除了他们用户记录之后，还想留有权限来登录该网络，他们只需要在你禁用公钥保存文件之前，将公钥复制到该文件中，就能实现他们的目的。如果你不想此类事情发生的话，那么你就要确保取消他们读写文件的权限。
$ > ~alice/.ssh/authorized_keys _# empties the file_ $ chown root
~alice/.ssh/authorized_keys $ chmod 600 ~alice/.ssh/authorized_keys
我希望，通过这篇文章你们能体会到DNSSEC的有趣之处。关于这个话题，近期我还会有更多的发现，请继续关注吧