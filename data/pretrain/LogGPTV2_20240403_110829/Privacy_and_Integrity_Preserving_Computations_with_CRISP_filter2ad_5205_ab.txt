of the data even in a post-quantum adversarial setting, and the
service provider’s utility should be retained by ensuring the
integrity of the processed data. The above objectives should
be achieved by limiting the impact on already deployed in-
frastructures, thus, by requiring only minimal changes to the
data source’s operational process. More formally, the desired
properties are: (a) Utility: Both user and service provider are
able to obtain the correct result of a public computation on the
user’s private data; (b) Privacy: The service provider does not
learn anything more than the output of the computation on the
user’s private data; and (c) Integrity: The service provider is
ensured that the computation is executed on non-corrupted
data certiﬁed by the data source.
3 Preliminaries
We introduce the cryptographic primitives used in Section 4
to instantiate CRISP. In the remainder of this paper, let a ← χ
denote that a is sampled from a distribution χ; a vector be
denoted by a boldface letter, e.g., x, with x[i] its i-th element
and xT its transpose. For a complex number z ∈ C, we denote
by ¯z its conjugate. Moreover, let (cid:107) denote the concatenation
USENIX Association
30th USENIX Security Symposium    2113
operation, IIIn the identity matrix of size n, and 000k a vector of
k zeros.
3.1 Approximate Homomorphic Encryption
Homomorphic encryption is a particular type of encryption
that enables computations to be executed directly on cipher-
texts. The most recent and practical homomorphic schemes
rely on the hardness of the Ring Learning with Errors (RLWE)
problem which states that, given a polynomial ring Rq, for a
secret polynomial s, it is computationally hard for an adver-
sary to distinguish between (a,a· s + e) and (a,b), where e
is a short polynomial sampled from a noise distribution, and
a,b are polynomials uniformly sampled over Rq.
Cheon et al. recently introduced the CKKS cryptosys-
tem [35] (improved in [33]), an efﬁcient and versatile leveled
homomorphic scheme for approximate arithmetic operations.
An approximate homomorphic encryption scheme enables
the execution of approximate additions and multiplications
on ciphertexts without requiring decryption. It uses an iso-
morphism between complex vectors and the plaintext space
Rq=Zq[X]/(X N+1), where q is a large modulus, and N is a
power-of-two integer. The decryption of a ciphertext yields
the input plaintext in Rq with a small error. This small error
can be seen as an approximation in ﬁxed-point arithmetic.
In CKKS, given a ring isomorphism between CN/2 and
R[X]/(X N+1), a complex vector zzz∈CN/2 can be encoded
into a polynomial m denoted by a vector m of its coefﬁ-
N ( ¯UUU T·zzz+UUU T·¯zzz), where UUU
cients {m0, . . .,mN−1}∈RN as m= 1
denotes the (N/2)×N Vandermonde matrix generated by the
2N-th root of unity ζ j=e5 jπi/N. This transformation is ex-
tended to Rq by a quantization. Then, considering a maxi-
mum number of levels L, a ring modulus q=∏L−1
i=0 qi is chosen
with {qi} a set of number theoretic transform (NTT)-friendly
primes such that ∀i∈[0,L− 1], qi=1 mod 2N.
Let χerr,χenc, and χkey, be three sets of small distributions
over Rq. Then, for an encoded plaintext m ∈ Rq, the scheme
works as follows:
KeyGen(λ,N,L,q): for a security parameter λ and a number
of levels L, generate ssskkk=(1,s) with s ← χkey, pppkkk=(b,a) with
a←Rq, b=− a· s + e mod q, and e←χerr. Additional keys
which are useful for the homomorphic computations (i.e.,
rotation, evaluation keys, etc.) are denoted by eeevvvkkk. We refer
the reader to [59] for further details.
Encryption(m, pppkkk): for r0 ← χenc and e0,e1 ← χerr, output
cccttt=(ct0,ct1)=r0 · pppkkk + (m + e0,e1) mod q.
Decryption(ssskkk,cccttt): Output ˆm=(cid:104)cccttt,ssskkk(cid:105) mod ql, where (cid:104)·,·(cid:105)
denotes the canonical scalar product in Rql and l the current
level of the ciphertext.
For brevity, we denote the above three operations as
KeyGen(λ,N,q), Encpppkkk(m), and Decssskkk(cccttt), respectively. The
scheme’s parameters are chosen according to the security
level required (see [28]) to protect the inputs and privacy.
3.2 BDOP Commitment
Baum et al. [15] proposed the BDOP commitment scheme,
that enables us to prove in zero-knowledge certain properties
of the committed values to a veriﬁer. Based on lattices, this
scheme also builds on a polynomial ring Rq=Zq/(X N+1),
with the notable exception that q is a prime that satisﬁes
q=2d+1 mod 4d, for some power-of-two d smaller than N.
BDOP is based on the hardness assumption of the module
Short Integer Solution (SIS) and module Learning with Error
(LWE) [70] to ensure its binding and hiding properties. We
refer the reader to [15] for more details. For a secret message
vector mmm∈R lc
q , and for a commitment with parameters (n,k),
two public rectangular matrices AAA(cid:48)
2, of size n×(k−n)
and lc×(k−n−lc) respectively, are created by uniformly sam-
pling their coefﬁcients from Rq. To commit the message mmm,
we sample rrrc←S k
β is the set of elements in Rq with
l∞-norm at most β and bounded degree, and compute
β, where S k
1 and AAA(cid:48)
(cid:19)
(cid:18)c1
(cid:18)AAA1
(cid:19)
· rrrc +
1] and AAA2=[000lc×n(cid:107)IIIlc(cid:107)AAA(cid:48)
2].
AAA2
c2
=
(cid:18)000n
(cid:19)
mmm
,
BDOP(mmm,rrrc)=
with AAA1=[IIIn(cid:107)AAA(cid:48)
The BDOP commitment scheme can be used, with a Σ-
protocol, to provide a bound proof : proof that a committed
value is in a bounded range [14]. The main rationale behind
this is to prove in zero-knowledge that the committed value
plus a small value has a small norm. Given a commitment
ccc=BDOP(mmm,rrrc), the prover computes a commitment for a
vector of small values µµµ as ttt=BDOP(µµµ,ρρρ) and commits to
this commitment in an auxiliary commitment caux=Caux(ttt).
The veriﬁer selects a challenge d ∈ {0,1} and sends it to the
prover who veriﬁes its small norm and eventually opens caux.
The prover also opens ttt +d·ccc to zzz=µµµ+d·mmm and rrrz=ρρρ+d·rrrc.
Upon reception, the veriﬁer checks that BDOP(zzz,rrrz)=ttt +d·ccc
and that the norms are small. The protocol is repeated to
increase soundness and can be made non-interactive using the
Fiat-Shamir heuristic.
3.3 Zero-Knowledge Circuit Evaluation
Zero-knowledge circuit evaluation (ZKCE) protocols enable
a user to prove the knowledge of an input that yields a public
output on an arithmetic or Boolean circuit that implements
a speciﬁc public function [29, 55]. A circuit is deﬁned as
a series of gates connected by wires. Based on the multi-
party computation (MPC) in-the-head approach from Ishai
et al. [64], ZKCE techniques emulate players and create a
decomposition of the circuit. The secret is shared among the
emulated players, who evaluate the circuit in a MPC fashion
and commit to their respective states. The prover then reveals
the states of a subset of players depending on the veriﬁer’s
challenge. By inspecting the revealed states, the veriﬁer builds
conﬁdence in the prover’s knowledge.
In particular, ZKB++ [29] is a Σ-protocol for languages of
the type {y|∃x s.t. y=Φ(x)}, where Φ(·) is the representation
of the circuit. With randomized runs, the veriﬁer builds con-
2114    30th USENIX Security Symposium
USENIX Association
ﬁdence in the prover’s knowledge of the secret. The number
of iterations is determined according to the desired sound-
ness: For instance, to prove the knowledge of a message that
yields a speciﬁc SHA-256 digest, a security level of 128-bits
requires 219 iterations. The proof size is linked to the num-
ber of iterations but also to the number of gates that require
non-local computations (e.g., AND for Boolean circuits, mul-
tiplication for arithmetic ones). Compared to earlier work, i.e.,
ZKBoo [55], ZKB++ reduces the proof size by not sending
information that can be computed by the veriﬁer. The security
of ZKB++ is based on the quantum random oracle model.
Overall, it achieves the following properties: (a) 2-privacy,
opening two out of the three players’ views to the veriﬁer re-
veals no information regarding the secret input, (b) soundness,
a correct execution yields a valid witness with soundness error
linked to the number of iterations, and (c) completeness, an
honest execution of ZKB++ ensures a correct output.
4 Architecture
We now present our construction that enables computations on
third-party certiﬁed data in a privacy and integrity preserving
manner. It builds on (i) CKKS to encrypt the data and en-
able computations on it, and (ii) MPC-in-the-head and BDOP
commitments to simultaneously verify a custom circuit that
checks the integrity of the data and its correct encryption. Its
workﬂow is decomposed into ﬁve phases: collection, transfer,
veriﬁcation, computation, and release. (1) In the collection
phase, the user obtains data about herself or her activities
from the data source, along with a certiﬁcate that vouches
for its integrity and authenticity. (2) The user then encrypts
the data, generates a proof for correct encryption of the cer-
tiﬁed data, and sends it with the ciphertexts to the service
provider. (3) The service provider veriﬁes the proof in the
veriﬁcation phase. Then, (4) it performs the desired computa-
tions on it, and (5) communicates with the user to obtain the
corresponding result in the release phase.
4.1 Collection Phase
In this phase, the user (identiﬁed by her unique identiﬁer uid)
collects from the data source certiﬁed data about herself or
her activities. The data source certiﬁes each user’s data point
xxx using a digital signature σ(·) that relies on a cryptographic
hash function H(·) to ensure integrity. We opt for SHA-256
as the hash function due to its widespread use as an accepted
standard for hash functions [81]; our solution works with
any signature scheme building on it. For example, Bernstein
et al. [18] recently proposed a quantum-secure signature
scheme employing SHA-256. In more detail, the data source
generates a payload msg={nonce,uid,xxx} and sends to the
user a message M0 deﬁned by: M0={msg,σ(H(msg))}.
4.2 Transfer Phase
In this phase, the user protects her certiﬁed data points with
the CKKS homomorphic encryption scheme (see Section 3.1)
and generates a proof of correct protection. To this end,
CRISP employs a ZKCE approach to simultaneously prove
the integrity of the underlying data and its correct encryption,
i.e., to convince a service provider that the noises used for
encryption did not distort the plaintexts. In particular, the user
evaluates a tailored circuit C (depicted in Figure 2) that (i)
computes the encryption of the data with the CKKS scheme,
(ii) generates BDOP commitments to the noises used for en-
cryption, and (iii) produces the hash digests of the messages
signed by the data source to verify their integrity. For ease
of presentation, we describe the circuit that processes one
data point xxx. However, this can easily be extended to a vec-
tor ddd obtained from multiple data points {xxxi}. The circuit’s
structure is publicly known and its public parameters are the
encryption public information pppkkk,UUU,N, the matrices AAA1,AAA2
used in the BDOP commitment scheme and its parameter n,
and additional information such as the user’s identiﬁer. The
circuit’s private inputs are the user’s secret data point xxx and
nonce, the encryption private parameters r0, e0, and e1, and
the private parameters of the BDOP commitment scheme rrrc.
These inputs are arithmetically secret-shared among the three
simulated players, according to the ZKB++ protocol. The
outputs of the circuit are the ciphertext cccttt, the commitment
to the encryption noises CCCbdop=BDOP((r0,e0,e1)T ,rrrc), and
the digest of the message H(msg) signed by the data source.
CKKS and BDOP operate on slightly different polynomial
rings, as described in Section 3. Consequently, we extend
BDOP to the composite case where q is a product of NTT-
friendly primes. We relax the strong condition on the chal-
lenge space from [15] that all small norm polynomials in Rq
be invertible. This condition is required for additional zero
knowledge proofs that are not used in our construction. We
simply require that the challenge space of invertible elements
be large enough to ensure the binding property of the com-
mitment. In particular, considering that the divisors of zero
in Rq are equally distributed in a ball B of norm βc as in Rq,
the probability of having a non-invertible element when uni-
formly sampling from B is at most N·L
2l , where L is the number
of prime factors in q, each having at least l bits. As a result,
the number of invertible elements in B is lower-bounded by
|B|∗ (1− N·L
2l ), where |B|=(βc + 1)N is the cardinality of the
ball. Thus, by adequately choosing βc and the product of
primes, we create a sufﬁciently large challenge set of small-
norm invertible elements in Rq (e.g., > 2256). Moreover, we
note that our circuit requires computations to be executed on
the underlying arithmetic ring Zq used for the lattice-based
encryption and commitment schemes, as well as a Boolean
ring Z2 for the computation of the SHA-256 hash digests. We
also design a block that converts MPC-in-the-head arithmetic
shares of the input data of the circuit into Boolean ones.
Overall, our circuit C consists of four blocks, showed in Fig-
ure 2: encryption, commitment, conversion, and hash block.
Encryption Block. This block operates in the arithmetic ring
Zq and takes as inputs the vector of integers in Zq derived by
quantization from the plaintext xxx produced during the data
USENIX Association
30th USENIX Security Symposium    2115
Figure 2: Overview of the veriﬁcation circuit C . Its inputs are denoted by rectangles and its outputs by rounded rectangles.
collection phase (see Section 4.1), as well as the encryption
with private noise parameters r0, e0, and e1. It ﬁrst encodes the
secret input data to a polynomial m ∈ Rq before computing the
ciphertext cccttt=(ct0,ct1)=r0 · pppkkk + (m + e0,e1) mod q. This
step requires only afﬁne operations that can be computed
locally for each simulated player of ZKB++ protocol. The
encryption block is depicted in the middle part of Figure 2.
Commitment Block. This block also operates in the arith-
metic ring Zq; its inputs are the private parameters of the
encryption (i.e., r0, e0, and e1) and commitment (i.e., rrrc)
schemes. As the commitment scheme has the same external
structure as the encryption one, this block operates equiva-
lently and returns BDOP((r0,e0,e1)T ,rrrc), requiring only lo-
cal operations at each simulated player. An overview of the
commitment block is shown in the leftmost part of Figure 2.
Conversion Block. This block enables us to interface two
types of circuits that would otherwise be incompatible when
following a ZKCE approach. The main idea is to transform
an arithmetic secret sharing into a Boolean secret sharing in
the context of MPC-in-the-head. Let [x]B denote the Boolean
sharing of a value x and [x]A its arithmetic one. An arithmetic
additive secret sharing in Zq splits x into three sub-secrets
x0, x1, and x2 such that x=x0+x1+x2 mod q. Let xk
i , be the
k-th bit of the arithmetic sharing of the secret x for player i. A
Boolean sharing [x]B cannot be directly translated from [x]A as
the latter does not account for the carry when adding different
bits. Considering that the modulus q can be represented by |q|