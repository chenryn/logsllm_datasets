Enc(P P, id, m) algorithm, then the Dec(SKid, id, c) will
output m with overwhelming probability.
The INDr-sID-CPA security for HIBE schemes and the
PRIV1-IND-sID security [8] for D-HIBE schemes can be de-
ﬁned respectively as follows:
Definition 1. Let A be a PPT adversary attacking the
HIBE scheme, the advantage of adversary A is deﬁned as
Advindr-sid-cpa
HIBE,A
(cid:44)
(id∗) ← A, (P P, msk) ← Gen(1n);
(m0, m1) ← AO(P P ); b $←− {0, 1};
c∗ ← Enc(P P, mb, id∗); b(cid:48) = AO(c∗)
 − 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
2
where O denotes that A can make query on identity id which
is not a preﬁx of id∗ by calling Extract algorithm. We say a
HIBE scheme of depth d is selective secure if for any INDr-
sID-CPA adversaries A there is Advindr-sid-cpa
(H)IBE,A ≤ negl(λ).
Definition 2. Let A be a PPT adversary attacking the
D-HIBE scheme for any x-sources M, the advantage of A
is deﬁned as Advpriv1-ind-sid
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)Pr
b = b(cid:48) :
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)Pr
D-HIBE,A (cid:44)
(id∗) ← A, (P P, msk) ← Gen(1n);
(m0, m1) ← AO(P P,M); b $←− {0, 1};
c∗ ← Enc(P P, mb, id∗); b(cid:48) = AO(c∗)
 − 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
2
where O denotes that A can make query on identity id
which is not a preﬁx of id∗ by calling Extract algorith-
b = b(cid:48) :
908m. We say a D-HIBE scheme of depth d is selective se-
cure, if for any PRIV1-IND-sID PPT adversaries A there
is Advpriv1-ind-sid
Recall that a random variable S over {0, 1}n is called a
x = poly(λ)-source if it has eﬃcient entropy H∞(S) ≥ x.
D-HIBE,A ≤ negl(λ).
The adaptive identity security experiment is deﬁned when
A can issue private key queries before A announces a chal-
lenge identity id∗ to the simulator S. The restriction is that
A cannot issue a private key query for an identity that is a
preﬁx of id∗. The notion of INDr-ID-CPA and PRIV1-IND-
ID can be deﬁned using the modiﬁed experiment as in above
deﬁnition 1 and 2 respectively.
2.2 The Learning with Rounding Problem
The learning with rounding (LWR) problem was ﬁrst pro-
posed by Banerjee, Peikert and Rosen in [4] for constructing
pseudorandom functions. Let n, m, 2  0, n, m, q > 2mpB,
and if there is an algorithm B such that
|PrA,s[B(A,(cid:98)Ats(cid:99)p) = 1] − PrA,u[B(A,(cid:98)u(cid:99)p) = 1]| ≥ 
q
, s ← {0, 1}n and u $←− Zm
where A $←− Zn×m
q , there exists
an algorithm L that runs in time polynomial in n, m, the
number of divisors of q, and the running time of B such that
|PrA,s[L(A, Ats + e) = s] ≥ (
1

4qm
− 2n
pm )2 ·
(1 + 2Bp/q)m
for any error distribution e that is B-bounded and balanced
in each coordinate. A distribution χ supported over the in-
tegers is called B-bounded if Pre←χ[(cid:107)e(cid:107) ≥ B] ≤ 2−Ω(m) and
we can let B >
√
n.
Remark: 1. If q is a prime, the secret s can be chosen
any distribution over Zn
q . In our work we set the distribu-
tion on secret s be any distribution which satisﬁes H∞(s) ≥
x ≥ t log q + ω(log n), assuming the LWEt,n,q problem for
x-source secret is hard; 2. If q is not prime, then we set the
q = {s ∈ Zn
secret s uniformly chosen from Zn∗
q , where Zn∗
q :
gcd(s1, ..., sn, q) = 1}. The condition s ∈ Zn∗
is satisﬁed for
at least 1 − O(1/2n) fraction of secret s ∈ Zn
q .
2.3 Some Algorithms
q
In this section we describe some algorithms that will be
used in our work.
Lemma 1
( [11]). Given any integer n, q ≥ 2, m ≈
2n log q, there exists an algorithm GenTrap(1n, 1m, q) that
outputs a parity-check matrix A ∈ Zn×m
and a trapdoor X
with a tag H such that the distribution of A is statistically
q
close to the uniform. With the trapdoor we can construct a
short basis TA for lattice Λ⊥
q (A) and the parameter satisﬁes
s1(X) ≤ 1.6(cid:112)n log q and (cid:107)(cid:103)TA(cid:107) ≤ 3.8(cid:112)n log q
and a parameter σ ≥ (cid:107)(cid:103)TA(cid:107)·ω(
overwhelming probability such that (cid:107)(cid:103)T(cid:48)
RandBasis(TA, σ) outputs a new basis T(cid:48)
q (A)
log m), there is an algorithm
q (A) with
m,
( [7]). Given a basis TA for lattice Λ⊥
A(cid:107) ≤ σ · √
A of Λ⊥
A(cid:107),(cid:107)T(cid:48)
Lemma 2
√
where the distribution of T(cid:48)
A does not depend on TA.
Similar with [2] in the basis delegation mechanism, we
require that low norm matrix R is invertible over Zq where
each column of R is low norm vector. In the following paper,
q ,σR )m, shortly Dm×m, as the distribu-
we denote the (DZm
tion of matrix R, where σR =
log m). Then we
will recall two main algorithms [2] that were used to delegate
the basis without increasing the dimension of lattice.
√
n log q·ω(
√
q
Lemma 3
with a basis TA for lattice Λ⊥
( [2]). Let m ≥ 2n log q and q > 2 be an in-
teger. Given the matrix R sampled from distribution Dm×m,
parameter σ > (cid:107)(cid:103)TA(cid:107) · σR · √
a matrix A ∈ Zn×m
q (A) and
m · ω(log3/2 m), there exist-
s an algorithm BasisDel(A, R, TA, σ) outputs a basis TB
for the lattice Λ⊥
B = AR−1. The basis TB satisﬁes (cid:107)TB(cid:107) ≤ σ · √
q (B) with overwhelming probability, where
m. Then
fying (cid:107)(cid:101)T(cid:107) ≤ σ/ω(
TB is distributed statistically close to distribution RandBa-
sis (T, σ) where T is any basis of lattice Λ⊥
q (AR−1) satis-
Dm×m then the bound on σ degrades to σ > (cid:107)(cid:103)TA(cid:107) · (σR ·
Remark: If R is a product of (cid:96) matrices sampled from
√
m · ω(
√
log m))(cid:96) · ω(log m).
√
log m).
Lemma 4
( [2]). Let m ≥ 2n log q and q > 2. For
all but at most q−n fraction of rank n matrices A ∈ Zn×m
the algorithm SampleRwithBasis(A) outputs a matrix R
∈ Zm×m sampled from a distribution statistically close to
Dm×m. The generated short basis TB for Λ⊥
q (B) satisﬁes
√
log m) with overwhelming probability.
(cid:107)(cid:103)TB(cid:107) ≤ σR/ω(
q
Next, when given any short basis for a lattice rather than
a trapdoor [11], we will introduce an algorithm for inverting
the LWR instances.
Lemma 5. For any n ≥ 1, q ≥ 2, enough large m ≥
O(n log q), given a matrix A ∈ Zn×m
and a short basis
TA = {t1, .., tm} ∈ Zm×mfor lattice Λ⊥
q (A) with (cid:107)TA(cid:107) ≤
p such that c = (cid:98)Ats(cid:99)p, there
p/(2
exists an algorithm LWRInvert2(TA, A, c) that can output
s with overwhelming probability.
m), some vector c ∈ Zm
√
q
Proof. When given m LWR samples (A, c = (cid:98)Ats(cid:99)p),
we ﬁrstly do the following transformation: c(cid:48) = (cid:100)(q/p)· c(cid:101) =
(cid:100)(q/p)((p/q)Ats + e(cid:48))(cid:101) = Ats + e, where e(cid:48) ∈ (−1, 0]m and
e ∈ (−q/p, 0]m. With the basis TA for lattice Λ⊥
q (A), then
A· e = Tt
we have c(cid:48)(cid:48) = Tt
Ae mod q. For
each coordinate of c(cid:48)(cid:48), we have (cid:107)c(cid:48)(cid:48)(cid:107)∞ = maxm
i=1{(cid:107)(cid:104)ti, e(cid:105)(cid:107)} ≤
√
(cid:107)TA(cid:107) · √
m),
then we have (cid:107)c(cid:48)(cid:48)(cid:107)∞ ≤ q/2. Therefore, c(cid:48)(cid:48) = Tt
Ae and we
can recover e. Then with Gaussian elimination we can re-
cover the secret s from c(cid:48) − e = Ats mod q.
mq/p. With the condition that (cid:107)TA(cid:107) ≤ p/(2
A· Ats + Tt
A· c(cid:48) = Tt
9093. OUR LWR-BASED SCHEMES
In this section, we use the technique in [2] to construct
our HIBE and D-HIBE schemes in random oracle model.
Similar with [2], we also use a hash function H: {0, 1}∗ →
Zm×m to map the identity id to a matrix in Zm×m. We
require that the output H(id) is distributed according to
Dm×m over the choice of the random oracle H.
3.1 A HIBE scheme with Random Oracles
In this section, we describe our HIBE scheme of depth d
that is adaptive secure in the random oracle model. The
algorithm of our HIBE scheme is described as follows:
KeyGen(1λ)→ (PP, msk ): The algorithm calls Gen-
Trap(1n, 1m, q) to sample an uniformly random ma-
trix A ∈ Zn×m
q (A) and
chooses a matrix A1 uniformly from Zn×m
. Then the
q
public key PP and master key msk are
with a short basis TA for Λ⊥
q
PP := (A, A1); msk := (TA)
Derive(PP, msk, id(cid:96)+1, SKid(cid:96) ) → SKid(cid:96)+1 : Given