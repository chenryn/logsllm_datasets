surement. For a typical link with 0.70 transmission probability, we
see deviations that range from 0.01 to 0.30.
Figure 2(a) shows the average number of recipients of a trans-
mission as a CDF over each of the nodes in the testbed.
In our
testbed, the bitrate has little impact for 802.11b encodings (1, 2,
5.5, and 11 Mbps): we see that the curves for each of these speeds
are very similar.
In contrast, 802.11g encodings show markedly
smaller reception ranges in general, and signiﬁcantly different re-
ception rates at the high end (i.e., 54, 48, 36 Mbps). For example,
switching between 54 and 48 Mbps adds one additional recipient
to the median node, while dropping all the way down to 14 Mbps
adds four additional receivers on average, and up to ten in the best
case. The lower rates on the other hand, perform almost identically
to each other. Thus, it seems likely that decreasing the bitrate to
increasing overhearing opportunities may be a fruitful tradeoff in
many cases.
387a signiﬁcant impact on the set of forwarder nodes that will receive
the batch fragment. Indeed, it appears even for 802.11g the same
can be said for most speeds—all but the highest three, in fact, when
transmitting at the highest power in our test bed. In other words,
each transmitter can disregard the presence (or absence) of over-
hearing, and focus on the natural goal of selecting the bitrate that
minimizes the remaining expected transmission time (ETT) of the
batch fragment to its ultimate destination.
Happily, this is the same goal in traditional routing: Roofnet’s
Srcr routing protocol [4] selects a shortest path in terms of ETT
presuming each node transmits to the next hop at its optimal bitrate.
In fact, ExOR uses ETT2 to determine the priority order of the for-
warding list, so it will automatically incorporate any improvements
due to bitrate selection into its forwarding algorithm. Extending
the notation of Chachulski et al. [8], let ǫr
ij denote the the expected
loss probability when node i transmits to note j at rate r. If we de-
note the time taken to transmit a packet at rate r as T (r) (a constant
value regardless of the nodes in question), we can write
ET T r
ij =
T (r)
1 − ǫr
ij
.
Because ExOR only transmits packets for a single destination in
any given batch, a node can consider each batch fragment transmis-
sion independently. In particular, for a batch fragment originating
at s destined to node d, forwarding node i selects the bitrate as fol-
lows. Assume node j is the next hop on the optimal Srcr-computed
route from i to d. (Note that, due to overhearing, i may not have
been on the original Srcr route from s to d.) Then, i selects a bitrate
r that minimizes ET T r
ij:
r(i, j) = arg min
ij«
r∈Ratesi „ T (r)
1 − ǫr
(1)
where Ratesj is the set of bitrates available at node i.
4.2 Variable reception range
Modern systems typically use 802.11a/b/g radios, however,
which have a direct correlation between transmission rate and aver-
age reception range. Thus, it is important to consider the potential
impact of decreased overhearing opportunities when choosing an
appropriate bitrate. We propose a rate-selection algorithm called
modrate that jointly optimizes next-hop throughput and overhear-
ing prevalence. Said another way, instead of trying to optimize for
the expected single (Srcr) path as above, the rate instead is selected
to minimize the expected transmission time over all useful paths
including those that arise from overhearing.
In ExOR, a packet could be received at multiple destinations,
but will be processed ﬁrst by the destination with lowest ET T to
the destination; to ease discussion we order all nodes in terms of
their ETT to d, s ≥ i > j ≥ d = 0, Now, rather than adjusting
the bitrate in view of just the next Srcr hop, we seek to consider
the bitrate in view of the furthest (i.e., closest to d) recipient. If
we deﬁne ρr
ij as probability that the furthest recipient of the packet
sent from i at rate r will be j, we can compute the optimal bitrate
r∗ as
r∗(i) = arg min
r∈Ratesi  Xj<i
T (r)
ρr
ij !
(2)
How could we calculate ρr
ij? One way is to assume that all trans-
mission probabilities are independent, a frequent assumption in the
2ExOR actually uses ETX, but when every node in the network
uses the same bitrate, ETT and ETX are equivalent.
Figure 3: ALIX network map. All nodes are located on the
third ﬂoor.
3.3 ALIX testbed
Due to the poor connectivity of the Jigsaw nodes when used in
the 5 GHz band, we also employ a separate, 10-node testbed of
ALIX nodes from PC Engines using 802.11a radios. The ALIX
nodes were distributed around the third ﬂoor of the building as
shown in Figure 3. Figure 2(b) repeats the same survey experiment
as before, except on the ALIX testbed. The results are qualitatively
similar (which is expected given that 802.11a and 802.11g use iden-
tical modulation schemes) although the absolute number of nodes
receiving a single transmission is much lower due to the smaller
size of the testbed, and there is far greater separation between the
three high 802.11a speeds and the remaining ones.
We can vary the connectivity of the ALIX testbed by altering the
transmit power. Figures 4(a) and 4(b) compare the transmission
range of 24 and 54 Mbit link speeds across a range of channel pow-
ers. We conduct most of our experiments at power level 30, but
return to explore the implications of higher powers in Section 6.5.
4. MODRATE
Existing batch-based opportunistic routing algorithms use a sin-
gle, ﬁxed rate for all nodes in the network—1 Mbps in the original
ExOR work, and 11 Mbps for MORE (although Chachulski et al.
also publish results for ExOR at 11 Mbps)—and defer issues of bi-
trate selection to future work [6, 8]. Here, we consider how one
might select more efﬁcient bitrates to improve throughput when
possible. We begin by considering the case of an 802.11b network,
as used in previous work, and then present modrate, an approach
better suited for modern, 802.11a/b/g networks.
4.1 Fixed range
From the previous section, we see that all of the 802.11b rates
provide approximately the same range in our testbeds, so if we
consider an 802.11b-only transmitter, it likely sufﬁces to select the
bitrate for each node independently—as in traditional routing algo-
rithms [5]—since the transmitting node’s choice is unlikely to have
388 100
 80
 60
 40
 20
s
e
d
o
n
f
o
F
D
C
 0
 0
Pwr 5
Pwr 10
Pwr 15
Pwr 20
Pwr 30
Pwr 40
Pwr 50
Pwr 60
 1
 2
 3
 4
 5
 6
 7
Expected # of recipients
(a) 24 MBit/sec
 100
 80
 60
 40
 20
s
e
d
o
n
f
o
F
D
C
 0
 0
Pwr 5
Pwr 10
Pwr 15
Pwr 20
Pwr 30
Pwr 40
Pwr 50
Pwr 60
 0.5
 1
 1.5
 2
 2.5
 3
Expected # of recipients
(b) 54 MBit/sec
Figure 4: Expected number of recipients as a function of transmit power, ALIX network.
literature [8, 18]. Then, we just need to calculate the probability
that a transmission would be received by j and not by any k < j:
ρr
ij = (1 − ǫr
ij)Yk<j
ǫr
ik.
An alternative method is to not rely on independence, and instead
measure probability of reception for all possible sets of receivers.
Then, ρr
ij can be computed directly. We adopt the latter approach
in our evaluation.
5. EVALUATION
This section explores the performance of various forms of rate
control by comparing them to unmodiﬁed ExOR, as well as tradi-
tional, single-path routing and the MORE network coding scheme.
5.1 Testbed setup
To facilitate controlled experimentation, we conduct our initial
tests on the 10-node ALIX testbed described earlier; we consider
the performance of the Jigsaw testbed in Section 7. We drive the ex-
periments with a centralized controller that has wired connectivity
to each node in the network. We begin experiments by collecting
the transmission probability data as described in Section 3.2 in or-
der to produce appropriate routing and speed information, which
we calculate using the set of algorithms from Section 4. This in-
formation is then communicated to the stations; thus, the stations
themselves do not run any routing code, ensuring that all protocols
operate with the same routes.
When conducting experiments comparing various protocols,
we run all the protocols under test in sequence at each pair of
source/destination nodes, before moving to the next pair. By doing
so, we roughly equalize any impact of out-of-date delivery proba-
bilities. Additionally, for long-running experiments, we update our
estimates of the transmission probabilities and re-calculate routes
every twenty minutes.
In order to facilitate direct comparisons, our experimental
methodology largely follows those of the original ExOR [6] and
MORE [8] papers, although with several slight differences. For
each source/destination pair, we transfer a 1.5-megabyte ﬁle, con-
sisting of 10 batches of 100 packets, each containing 1,500 bytes
(c.f. 1,024 in the original ExOR paper) of payload. As is cus-
tomary, we do not implement traditional routing of the ﬁnal 10%;
instead, we stop and report the throughput when the destination has
received 90% of the packets in each batch. Thus, our experiments
result in ten separate transmission times, each corresponding to the
successful reception of at least 90% of a 150-KB ﬁle chunk.
5.1.1 Traditional routing
As a baseline, we measure the throughput of traditional, single-
path routing that employs both link-layer and end-to-end acknowl-
edgments to ensure reliable delivery. In order to evaluate the most
prevalent scenario in today’s wireless networks—TCP data being
sent over a single, rate-adapting path—we implement a simple Srcr
forwarder. Our Srcr forwarder uses the link probabilities calculated
by our measurement procedure and selects routes using a modiﬁed
ETT metric that accounts for asymmetric links [1]. We assume that
ACKs are always sent at the lowest speed for the 802.11 protocol in
use (1 or 6 Mbps). This is a Click-based system which forwards all
packets between two hosts along a predeﬁned path, as provided by
the experiment controller. We use the regular Linux 2.4 kernel TCP
stack without modiﬁcations, and the ttcp application to measure
the time it takes to transfer 1 megabyte of data. We refer to this
mechanism in all of our results as ’trad-TCP.’
A multi-hop route might have both large latency and high losses.
Those factors will interfere with TCP and prevent the window from
becoming too large. Thus, non-TCP data transfer speciﬁcally opti-
mized for the routing protocol will show better performance.
5.1.2 ExOR implementation
We were unable to obtain the original ExOR implementation, so
were forced to reimplement it. Because we are unsure whether we
were able to faithfully replicate the exact behavior of the transmis-
sion timer, we instead implement a scheduling “oracle” within the
control server: Once a forwarding node is done transmitting a batch
fragment, it notiﬁes the control server over the wired network. The
server then notiﬁes the next node in the batch’s forwarding list to
begin transmission. Should that node not have any remaining pack-
ets to send, it may send a set of empty packets to propagate the
batch map; regardless, it notiﬁes the server when ﬁnished. Com-
munication with the scheduling oracle takes time, so each station
keeps track of how long it spent transmitting the batch fragment.
Once the batch is successfully received at the destination, all round
times are added together to get the actual transmission time without
oracle communication overhead.
389%
,
s
e
t
u
o
r
f
o
F
D
C
%
,
s
e
t
u
o
r
f
o
F
D
C
 100
 80
 60
 40
 20
 0
 100
 80
 60
 40
 20
 0
6 Mbps
24 Mbps
36 Mbps
48 Mbps
Auto (ExOR)
 0
 500  1000  1500  2000  2500  3000  3500  4000
Kbytes/sec
(a) ExOR
6 Mbps
24 Mbps
36 Mbps
48 Mbps
Auto (MORE)
 0
 500  1000  1500  2000  2500  3000  3500  4000
Kbytes/sec
(b) MORE
Figure 5: Throughput of ExOR and MORE with automatic and
various ﬁxed rate selections. ALIX network with full power.
5.1.3 MORE module
We implement the MORE algorithm using the publicly available
MORE source code. Since the implementation is completely sep-
arate from our ExOR code base, it does not use our experiment
controller to calculate routes. Instead, we pass the reception prob-
abilities from our surveys directly to the MORE implementation.
All stations transmit simultaneously, without a central schedule (so
it does not leverage our oracle scheduler, either), meaning that long
paths could either perform better (due to spatial reuse) or worse
(due to hidden terminal problems) than ExOR.
It
is worth noting that MORE is substantially more CPU-
intensive than any of the other protocols we evaluate. Even with
data calculations disabled (i.e., only innovativeness veriﬁcation was
done), it still required more CPU power than the Jigsaw testbed can
provide. Thus, we report MORE results only for the ALIX testbed.
5.2 Overhearing-oblivious rate selection
To begin, we consider the performance of ExOR as originally
described by Biswas and Morris [6]. In particular, we assume that
all nodes in the network use a single, ﬁxed speed. Figure 2(b) sug-
gests that the performance in the ALIX testbed with bit rates less
than 24 Mbps are likely to be gated by link speeds rather than re-
ception rates. Increasing speed beyond 24 Mbps, however, seems
likely to markedly decrease the degree of connectivity in the net-
work, potentially harming performance.
Figure 5(a) plots the performance of four ﬁxed speeds, 6, 24,
36, and 48 Mbps on the ALIX testbed when all nodes transmit at
maximum (60) power, roughly equivalent to 18 dBm. Recall that
throughput is the total number of bytes delivered over 10 indepen-
dent batches divided by the cumulative time required. For all of the
graphs in this section, we report on the performance of 40 randomly
selected node pairs among the 100 possible combinations. We bias
the 40 routes to include longer-hop paths if possible, as one-hop
paths tend to be uninteresting. None of our paths are longer than
four hops. To select the 40 random paths, we ﬁrst select up to 10
paths of each length—four, three, two, and one hops—and then ﬁll
in the remainder with randomly selected paths if we do not have
enough of a particular length.
While performance generally improves with higher link speeds,
the network becomes disconnected at 48 Mbps and no route exists
for 11 of the selected route pairs; this phenomenon is even more
pronounced at 54 Mbps. The globally optimal rate will obviously
vary from network to network, and likely even over time. Instead,
we see that an automatic rate assignment that selects the locally op-
timal speed for each link (neglecting overhearing potential) as spec-
iﬁed in Equation 1 generally outperforms any ﬁxed speed selection.
We refer to this enhanced, automatic-rate-assignment ExOR imple-
mentation as ’ExOR’ in all subsequent graphs.
Figure 5(b) shows the results a similar experiment for the MORE
protocol. As originally described, MORE uses a single, ﬁxed link
speed for all nodes in the network. The publicly available imple-
mentation, however, selects a link-local optimal speed based upon
the ETX metric in a manner similar to Equation 1 [7]. We use this
improved MORE implementation in the remainder of the paper,
and refer to it in the graphs as simply ’MORE.’
5.3 Modrate
We now consider the additional performance gains from consid-
ering the impact of link rates on overhearing opportunities. In par-
ticular, we enhance ExOR with the modrate algorithm described in
Equation 2 and conduct a second experiment on the ALIX testbed
at a power level of 30.
5.3.1 An example route
Figure 6(a) diagrams one particular route where modrate dra-
matically changes the forwarding behavior. The top portion shows
a two-hop Srcr route from alix3 to alix1 that uses alix8 as an inter-
mediary when nodes transmit at full power; alix3 transmits at 54
Mbps, while alix8 selects 36 Mbps. In addition to link speed, each
node is annotated with the number of packets it transmits (O) and
receives (I). The links are labeled with both the number of pack-
ets successfully transferred as well as the experimental and pre-
dicted (by the survey) reception rate. The middle portion shows
how ExOR uses the route, leveraging overhearing by node alix6
to assist with packets on the second hop. In one particular batch,
alix6 overhears all of the packets transmitted by alix8, and is able
to deliver 247 of them to alix1, saving retransmissions.
Finally, the bottom portion of the ﬁgure shows how modrate en-
hances overhearing by decreasing the transmission speeds of alix3
(from 54 to 36 Mbps). By doing so, it introduces three new over-
hearing opportunities: First, the destination is able to directly re-
ceive packets approximately 8% of the time. Second, alix4 and
alix6, which are closer to the destination than alix8, are now able
to overhear transmissions. In fact, between the two of these nodes,
they are able to forward all of the packets to the destination, freeing
the original intermediate hop, alix8, from forwarding any packets
at all in this particular batch.
3905.3.2 Network-wide performance
Figure 7(a) plots throughput in the same fashion as Figure 5,
comparing against ExOR, MORE, and traditional routing. De-
spite some signiﬁcant changes in speed selections,
the overall
difference in performance between ExOR and modrate is slight.
Figure 7(b) accentuates the differences by plotting the per-route
throughput normalized to that of ExOR; a positive difference means
that the performance is better than ExOR, and negative implies less
throughput.
In theory, the performance of modrate should be strictly better
than ExOR, but some variance is to be expected in practice due
to time-varying delivery probabilities, and has been reported many
times in the literature [8, 21]. In this experiment, modrate manages
to equal or best the link-local scheme on all but 10% of the routes,
and is rarely more than 10% worse. In this conﬁguration, modrate
provides limited beneﬁt for the vast majority of routes, but brings
signiﬁcant improvement in around 15% of paths. This is easily
explained by observing that modrate degenerates to the link-local
scheme in the case of one-hop routes; even for longer routes, mod-
rate and ExOR select identical rates 62% of the time. It is impossi-
ble to tell from the CDFs, however, precisely which routes are see-
ing improvement. Figure 8 presents 15 representative routes sorted
according to their length and performance under traditional rout-
ing. Error bars report the standard deviation of the 10 constituent
batches. We see that modrate provides performance increases in
many of the two- and three-hop cases, but—as expected—none of
the one-hop paths. Interestingly, MORE outperforms both schemes
in 9 cases, but underperforms in the remainder, failing completely
in two cases.
6. OVERHEARING’S ROLE
While modrate functions as expected, we were initially surprised
by its modest gains given the dramatic differences in reception
ranges shown in Figure 2. In particular, modrate is often able to sig-
niﬁcantly increase overhearing opportunities as shown in Figure 6,
yet throughput gains are limited. Attempting to “debug” this situ-
ation leads to the second major contribution of our work, namely
uncovering the reasons behind ExOR and MORE’s performance.