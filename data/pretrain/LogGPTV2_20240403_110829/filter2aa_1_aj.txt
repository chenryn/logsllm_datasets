     HTTP request
    . There are different types of HTTP requests, and the two most common are GET and POST. By convention, GET requests retrieve data from the server, while POST requests submit data to it. Other common HTTP methods include OPTIONS, used to request permitted HTTP methods for a given URL; PUT, used to update a resource; and DELETE, used to delete a resource.
    当您的浏览器想要与服务器进行交互时，它会向服务器发送一个HTTP请求。有不同类型的HTTP请求，其中最常见的是GET和POST。按照惯例，GET请求从服务器检索数据，而POST请求将数据提交到服务器。其他常见的HTTP方法包括 OPTIONS，用于请求给定URL的允许HTTP方法; PUT，用于更新资源; DELETE，用于删除资源。
    Here is an example GET request that asks the server for the home page of
     www.google.com
    :
    这是一个示例GET请求，它请求服务器获取www.google.com的主页：
GET / HTTP/1.1
Host: www.google.com
User-Agent: Mozilla/5.0
Accept: text/html,application/xhtml+xml,application/xml
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Connection: close
    Let’s walk through the structure of this request, since you’ll be seeing a lot of these in this book. All HTTP requests are composed of a request line, request headers, and an optional request body. The preceding example contains only the request line and headers.
    让我们一起来看看这个请求的结构，因为在这本书中你将看到很多类似的请求。所有的HTTP请求都由一个请求行、请求头和一个可选的请求体组成。前面的例子只包含了请求行和头信息。
    The
     request line
    is the first line of the HTTP request. It specifies the request method, the requested URL, and the version of HTTP used. Here, you can see that the client is sending an HTTP GET request to the home page of
     www.google.com
    using HTTP version 1.1.
    请求行是HTTP请求的第一行。它指定了请求方法，所请求的URL和HTTP使用的版本。在这里，你可以看到客户端正在使用HTTP版本1.1向www.google.com的主页发送HTTP GET请求。
    The rest of the lines are HTTP
     request headers
    . These are used to pass additional information about the request to the server. This allows the server to customize results sent to the client. In the preceding example, the
     Host
    header specifies the hostname of the request. The
     User-Agent
    header contains the operating system and software version of the requesting software, such as the user’s web browser.
    The
     Accept
    ,
     Accept-Language
    , and
     Accept-Encoding
    headers tell the server which format the responses should be in. And the
     Connection
    header tells the server whether the network connection should stay open after the server responds.
    其余的行是HTTP请求头。它们用于向服务器传递有关请求的其他信息。这使服务器能够自定义发送到客户端的结果。在上面的示例中，Host头指定请求的主机名。User-Agent头包含请求软件的操作系统和软件版本，例如用户的Web浏览器。Accept，Accept-Language和Accept-Encoding头告诉服务器响应应该采用哪种格式。而Connection头告诉服务器，在服务器响应后，网络连接是否应保持打开状态。
    You might see a few other common headers in requests. The
     Cookie
    header is used to send cookies from the client to the server. The
     Referer
    header specifies the address of the previous web page that linked to the current page. And the
     Authorization
    header contains credentials to authenticate a user to a server.
    您可能会在请求中看到一些其他常见的标题。 Cookie标题用于从客户端向服务器发送cookie。 Referer标题指定链接到当前页面的上一个网页的地址。而Authorization标题包含凭证，用于将用户身份验证到服务器。
    After the server receives the request, it will try to fulfill it. The server will return all the resources used to construct your web page by using
     HTTP responses
    . An HTTP response contains multiple things: an HTTP status code to indicate whether the request succeeded; HTTP headers, which are
    bits of information that browsers and servers use to communicate with each other about authentication, content format, and security policies; and the HTTP response body, or the actual web content that you requested. The web content could include HTML code, CSS style sheets, JavaScript code, images, and more.
    服务器收到请求后会尝试满足它。服务器将通过使用HTTP响应返回构建您的网页所用的所有资源。HTTP响应包含多个元素：HTTP状态代码用于指示请求是否成功；HTTP头，是浏览器和服务器之间用于通信的信息片段，包括认证、内容格式和安全策略等；以及HTTP响应体，即您请求的实际网页内容。网页内容可能包括HTML代码、CSS样式表、JavaScript代码、图像等。
    Here is an example of an HTTP response:
    这里是一个HTTP响应的例子：
1 HTTP/1.1 200 OK
2 Date: Tue, 31 Aug 2021 17:38:14 GMT
[...]
3 Content-Type: text/html; charset=UTF-8
4 Server: gws
5 Content-Length: 190532
[...]
Google
[...]
    Notice the
     200 OK
    message on the first line
     1
    . This is the status code. An HTTP status code in the 200 range indicates a successful request. A status code in the 300 range indicates a redirect to another page, whereas the 400 range indicates an error on the client’s part, like a request for a nonexistent page. The 500 range means that the server itself ran into an error.
    注意第一行的200 OK消息。这是状态码。 200系列的HTTP状态码表示请求成功。 300系列的状态码表示重定向到另一页，而400系列表示客户端出现错误，例如请求不存在的页面。 500系列表示服务器本身遇到错误。
    As a bug bounty hunter, you should always keep an eye on these status codes, because they can tell you a lot about how the server is operating. For example, a status code of 403 means that the resource is forbidden to you. This might mean that sensitive data is hidden on the page that you could reach if you can bypass the access controls.
    作为一个赏金猎人，你应该经常关注这些状态代码，因为它们可以告诉你服务器的运作情况。例如，403状态代码表示该资源对你是禁止的。这可能意味着页面上隐藏了敏感数据，只要你能够绕过访问控制，就能够访问到这些数据。
    The next few lines separated by a colon (
     :
    ) in the response are the HTTP response headers. They allow the server to pass additional information about the response to the client. In this case, you can see that the time of the response was
     Tue, 31 Aug 2021 17:38:14 GMT
     2
    . The
     Content-Type
    header indicates the file type of the response body. In this case, The
     Content-Type
    of this page is
     text/html
     3
    . The server version is Google Web Server (
     gws
    )
     4
    , and the
     Content-Length
    is 190,532 bytes
     5
    . Usually, additional response headers will specify the content’s format, language, and security policies.
    响应中由冒号（:）分隔的下几行是HTTP响应头。它们允许服务器将有关响应的附加信息传递给客户端。在这种情况下，您可以看到响应的时间为Tue，31 Aug 2021 17: 38: 14 GMT 2. Content-Type头指示响应正文的文件类型。在这种情况下，此页面的Content-Type为text / html。服务器版本为Google Web Server（gws）4，Content-Length为190，532字节。通常，其他响应标头将指定内容的格式，语言和安全策略。
    In addition to these, you might encounter a few other common response headers. The
     Set-Cookie
    header is sent by the server to the client to set a cookie. The
     Location
    header indicates the URL to which to redirect the page. The
     Access-Control-Allow-Origin
    header indicates which origins can access the page’s content. (We will talk about this more in
     Chapter 19
    .)
     Content-Security-Policy
    controls the origin of the resources the browser is allowed to load, while the
     X-Frame-Options
    header indicates whether the page can be loaded within an iframe (discussed further in
     Chapter 8
    ).
    除了这些，你可能会遇到一些其他常见的响应头。服务器向客户端发送 Set-Cookie 标头来设置 cookie。Location 标头指示要重定向页面的 URL。Access-Control-Allow-Origin 标头指示哪些来源可以访问页面的内容。（我们将在第19章中更详细地讨论此问题。）Content-Security-Policy 控制浏览器允许加载哪些资源的来源，而 X-Frame-Options 标头指示页面是否可以在 iframe 中加载（将在第8章进一步讨论）。
    The data after the blank line is the response body. It contains the actual content of the web page, such as the HTML and JavaScript code. Once your browser receives all the information needed to construct the web page, it will render everything for you.
    空行后的数据是响应体。它包含网页的实际内容，如HTML和JavaScript代码。一旦您的浏览器接收到构建网页所需的所有信息，它将为您呈现所有内容。
    Internet Security Controls
    Now that you have a high-level understanding of how information is communicated over the internet, let’s dive into some fundamental security controls that protect it from attackers. To hunt for bugs effectively, you will often need to come up with creative ways to bypass these controls, so you’ll first need to understand how they work.
    现在，您已经对互联网上如何传输信息有了高层次的理解，让我们深入了解一些基本的安全控制，以保护它免受攻击者的攻击。为了有效地搜寻漏洞，您通常需要想出创造性的方法来绕过这些控制，因此您首先需要了解它们是如何工作的。
    Content Encoding
    Data transferred in HTTP requests and responses isn’t always transmitted in the form of plain old text. Websites often encode their messages in different ways to prevent data corruption.
    HTTP请求和响应中传输的数据并非始终以纯文本形式传输。为了防止数据损坏，网站通常以不同的方式编码它们的消息。
    Data encoding is used as a way to transfer binary data reliably across machines that have limited support for different content types. Characters used for encoding are common characters not used as controlled characters in internet protocols. So when you encode content using common encoding schemes, you can be confident that your data is going to arrive at its destination uncorrupted. In contrast, when you transfer your data in its original state, the data might be screwed up when internet protocols misinterpret special characters in the message.
    数据编码用作一种可靠地在支持不同内容类型有限的机器之间传输二进制数据的方式。用于编码的字符是在互联网协议中不做控制字符使用的常见字符。因此，当您使用常见编码方案编码内容时，您可以确信数据将不会损坏地到达目的地。相比之下，当您以原始状态传输数据时，当互联网协议误解消息中的特殊字符时，数据可能会被损坏。
     Base64 encoding
    is one of the most common ways of encoding data. It’s often used to transport images and encrypted information within web messages. This is the base64-encoded version of the string
     "Content Encoding"
    :
    Base64编码是编码数据最常用的方式之一。它经常用于在网络消息中传输图像和加密信息。这是字符串“Content Encoding”的Base64编码版本：
Q29udGVudCBFbmNvZGluZw==
    Base64 encoding’s character set includes the uppercase alphabet characters A to Z, the lowercase alphabet characters a to z, the number characters 0 to 9, the characters + and /, and finally, the = character for padding.
     Base64url
     encoding
    is a modified version of base64 used for the URL format. It’s similar to base64, but uses different non-alphanumeric characters and omits padding.
    Base64编码的字符集包括大写字母A到Z，小写字母a到z，数字0到9，字符+和/，最后，=字符用于填充。 Base64url编码是用于URL格式的修改版本的base64。它类似于base64，但使用不同的非字母数字字符并省略填充。
    Another popular encoding method is hex encoding.
     Hexadecimal encoding
    , or
     hex,
    is a way of representing characters in a base-16 format, where characters range from 0 to F. Hex encoding takes up more space and is less efficient than base64 but provides for a more human-readable encoded string. This is the hex-encoded version of the string
     "Content Encoding"
    ; you can see that it takes up more characters than its base64 counterpart:
    另一种流行的编码方法是十六进制编码。十六进制编码（或简称为hex）是一种将字符以基础16格式表示的方式，其中字符范围从0到F。十六进制编码占用更多的空间，效率比base64低，但提供更易读的编码字符串。这是字符串“内容编码”的十六进制编码版本; 您可以看到它比其base64对应项占用更多的字符：
436f6e74656e7420456e636f64696e67
     URL encoding
    is a way of converting characters into a format that is more easily transmitted over the internet. Each character in a URL-encoded string can be represented by its designated hex number preceded by a % symbol. See Wikipedia for more information about URL encoding:
     https://en.wikipedia.org/wiki/Percent-encoding
     .
    URL编码是将字符转换为更便于在互联网上传输的格式的一种方式。 URL编码字符串中的每个字符都可以用其指定的十六进制数字表示，前面加上一个%符号。有关URL编码的更多信息，请参见维基百科：https://en.wikipedia.org/wiki/Percent-encoding。
    For example, the word
     localhost
    can be represented with its URL-encoded equivalent,
     %6c%6f%63%61%6c%68%6f%73%74
    . You can calculate a hostname’s
    URL-encoded equivalent by using a URL calculator like URL Decode and Encode (
     https://www.urlencoder.org/
    ).
    例如，单词“localhost”可以用其URL编码的等效值“%6c%6f%63%61%6c%68%6f%73%74”表示。您可以使用URL计算器（如URL解码和编码器https://www.urlencoder.org/）计算主机名的URL编码等效值。
    We’ll cover a couple of additional types of character encoding—octal encoding and dword encoding—when we discuss SSRFs in
     Chapter 13
    . When you see encoded content while investigating a site, always try to decode it to discover what the website is trying to communicate. You can use Burp Suite’s decoder to decode encoded content. We’ll cover how to do this in the next chapter. Alternatively, you can use CyberChef (
     https://gchq.github.io/CyberChef/
    ) to decode both base64 content and other types of encoded content.
    在第13章讨论SSRF时，我们将介绍几种附加的字符编码方式——八进制编码和双字编码。在调查网站时，如果看到编码的内容，一定要尝试解码，以发现网站试图传达的信息。可以使用Burp Suite的解码器来解码编码的内容。我们将在下一章中讲解如何解码。另外，也可以使用CyberChef（https://gchq.github.io/CyberChef/）来解码base64内容和其他类型的编码内容。
    Servers sometimes also
     encrypt
    their content before transmission. This keeps the data private between the client and server and prevents anyone who intercepts the traffic from eavesdropping on the messages.
    服务器有时会在传输之前对内容进行加密。这一举措可以保护客户端和服务器间的数据隐私，防止任何拦截流量的人窃听信息。
    Session Management and HTTP Cookies
    Why is it that you don’t have to re-log in every time you close your email tab? It’s because the website remembers your session.
     Session management
    is a process that allows the server to handle multiple requests from the same user without asking the user to log in again.
    为什么关闭电子邮件选项卡后，您不必重新登录？这是因为该网站会记住您的会话。会话管理是一个过程，使服务器能够处理来自同一用户的多个请求，而无需要求用户再次登录。
    Websites maintain a session for each logged-in user, and a new session starts when you log in to the website (
     Figure 3-4
    ). The server will assign an associated
     session ID
    for your browser that serves as proof of your identity. The session ID is usually a long and unpredictable sequence designed to be unguessable. When you log out, the server ends the session and revokes the session ID. The website might also end sessions periodically if you don’t manually log out.
    网站为每个登录的用户维护一个会话，当您登录网站时开始一个新会话（图3-4）。服务器会为您的浏览器分配一个关联的会话ID，作为您身份的证明。会话ID通常是一个长而不可预测的序列，设计为难以猜测。当您登出时，服务器会结束会话并撤销会话ID。如果您不手动退出，则网站可能会定期结束会话。
       Figure 3-4
      : After you log in, the server creates a session for you and issues a session ID, which uniquely identifies a session.
      图3-4: 登录后，服务器为您创建一个会话并发放一个会话ID，该ID唯一标识一个会话。
    Most websites use cookies to communicate session information in HTTP requests.
     HTTP cookies
    are small pieces of data that web servers send to your browser. When you log in to a site, the server creates a session for you and sends the session ID to your browser as a cookie. After receiving a cookie, your browser stores it and includes it in every request to the same server (
     Figure 3-5
    ).
    大多数网站使用Cookie在HTTP请求中传递会话信息。HTTP Cookie是Web服务器发送到浏览器的小数据片段。当您登录网站时，服务器会为您创建一个会话，并将会话ID作为Cookie发送到您的浏览器。收到Cookie后，您的浏览器会存储它，并在每次向同一服务器发送请求时包含它（图3-5）。
    That’s how the server knows it’s you! After the cookie for the session is generated, the server will track it and use it to validate your identity. Finally,
    when you log out, the server will invalidate the session cookie so that it cannot be used again. The next time you log in, the server will create a new session and a new associated session cookie for you.
    那就是服务器知道你是谁的方式！生成会话 cookie 后，服务器将跟踪并使用它来验证你的身份。最后，当你退出时，服务器将使会话 cookie 无效，以防止它被再次使用。下次你登录时，服务器将为你创建一个新的会话和一个新的相关会话 cookie。
       Figure 3-5
      : Your session ID correlates with session information that is stored on the server.
      图3-5：您的会话ID与存储在服务器上的会话信息相关联。
    Token-Based Authentication
    In session-based authentication, the server stores your information and uses a corresponding session ID to validate your identity, whereas a