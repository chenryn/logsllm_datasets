18
1
3
3
13
18
14
17
13
9
9
1
2
4
14
17
16
13
15
10
8
Syscall alignment
1
1
1
1
2
3
6
26
21
38
Feature set BinSim
1
1
1
1
2
4
11
24
19
36
1
1
2
3
3
4
16
27
16
27
the execution differences. Weakest precondition (WP)
calculation is ﬁrstly explored by Dijkstra [20] for formal
program veriﬁcation. Brumley et al. [8] compare WP to
identify deviations in different binary implementations
for the purpose of error detection and ﬁngerprint genera-
tion. Ansuman et al. [4] calculate WP along the dynamic
slicing to diagnose the root of an observable program er-
ror. BinSim’s dynamic slicing and WP calculation are
inspired by Ansuman et al.’s work. However, we cus-
tomize our dynamic slicing algorithm to operate at the
obfuscated binaries, which is more tricky than working
on source code or benign programs. Another difference
is we perform equivalence checking for WP while they
do implication checking.
The most related backward slicing method to BinSim
is Coogan et al.’s work [19]. We both attempt to identify
the relevant instructions that affect system call arguments
in an obfuscated execution trace, and the idea of value
based slicing and tracking control dependency is similar.
However, BinSim is different from Coogan et al.’s work
in a number of ways. First, Coogan et al.’s approach is
designed only for virtualization obfuscation. To evaluate
the accuracy of backward slicing, they compare the x86
instruction slicing pairs by the syntax of the opcode (e.g.,
mov, add, and lea). It is quite easy to generate a syntac-
tically different trace through instruction-level obfusca-
tion [51]. Furthermore, the commercial virtualization ob-
fuscators [52, 69] have already integrated code mutation
functionality. Therefore, Coogan et al.’s approach has
less resilience to other obfuscation methods. Second, we
utilize taint analysis to identify virtualization bytecode
dispatcher while Coogan et al. apply different heuristics.
Third, Coogan et al. do not handle cryptographic func-
tions. They state that the encryption/decryption routine
could cripple their analysis. Fourth, Coogan et al. eval-
uate their method on only six tiny programs; while Bin-
Sim goes through an extensive evaluation. Last, but not
the least, after the sub-traces or sliced segments are con-
structed, Coogan et al. compare them syntactically while
BinSim uses weakest precondition to compare them se-
mantically.
7.2 Binary Difﬁng
Hunting binary code difference have been widely ap-
plied in software security. BinDiff [23] and Darun-
Grim [50] compare two functions via the maximal con-
trol ﬂow subgraph isomorphism and match the similar
basic blocks with heuristics. BinSlayer [7] improves
BinDiff by matching bipartite graphs. dicovRE [22] ex-
tracts a set of syntactical features to speed up control
ﬂow subgraph isomorphism. These approaches gear to-
ward fast matching similar binary patches, but they are
brittle to defeat the sophisticated obfuscation methods.
Another line of work captures semantic equivalence be-
tween executables. BinHunt [25] ﬁrst leverages symbolic
execution and theorem proving to match the basic blocks
with the same semantics. BinJuice [37] extracts the se-
mantic abstraction for basic blocks. Expos´e [49] com-
bines function-level syntactic heuristics with semantics
detection. iBinHunt [43] is an inter-procedural path diff-
ing tool and relies on multi-tag taint analysis to reduce
possible basic block matches. Pewny et al. [54] adopt
basic block semantic representation sampling to search
cross-architecture bugs. As we have demonstrated, these
tools suffer from the so called “block-centric” limita-
tion.
In contrast, BinSim can ﬁnd equivalent instruc-
tion sequences across the basic block boundary. Egele
et al. [21] proposed blanket execution to match similar
functions in binaries using dynamic testing. However,
blanket execution requires a precise function scope iden-
tiﬁcation, which is not always feasible for obfuscated bi-
nary code [42].
7.3 Malware Dynamic Analysis
Malware dynamic analysis techniques are characterized
by analyzing the effects that the program brings to the
operating system. Compared with static analysis, dy-
namic analysis is less vulnerable to various code ob-
fuscation methods [48]. Christodorescu et al. [14] pro-
posed to use data-ﬂow dependencies among system calls
as malware speciﬁcations, which are hard to be circum-
266    26th USENIX Security Symposium
USENIX Association
vented by random system calls injection. Since then,
there has been a signiﬁcant amount of work on dynamic
malware analysis, e.g., malware clustering [6, 28] and
detection [3, 12]. However, dynamic-only approaches
may disregard the conditional equivalence or the sub-
tle differences that do not affect system call arguments.
Therefore, BinSim’s hybrid approach is much more ac-
curate.
In addition, dynamic slicing is also actively
employed by various malware analysis tasks. The no-
table examples include an efﬁcient malware behavior-
based detection that executes the extracted slice to match
malicious behavior [36], extracting kernel malware be-
havior [38], generating vaccines for malware immuniza-
tion [76], and identifying malware dormant functional-
ity [18]. However, all these malware analysis tasks adopt
the standard dynamic slicing algorithms [1, 80], which
are not designed for tracking the data and control depen-
dencies in a highly obfuscated binary, e.g., virtualization-
obfuscated malware. As we have demonstrated in Sec-
tion 4.2, performing dynamic slicing on an obfuscated
binary is challenging. Therefore, our method is beneﬁ-
cial and complementary to existing malware defense.
8 Conclusion
We present a hybrid method combining dynamic analysis
and symbolic execution to compare two binary execution
traces for the purpose of detecting their ﬁne-grained re-
lations. We propose a new concept called System Call
Sliced Segments and rely on their Equivalence Checking
to detect ﬁne-grained semantics similarity. By integrat-
ing system call alignment, enhanced dynamic slicing,
symbolic execution, and theorem proving, our method
compares the semantics of instruction segments that im-
pact on the observable behaviors. Compared to existing
semantics-based binary difﬁng methods, our approach
can capture the similarities, or differences, across ba-
sic blocks and infer whether two programs’ behaviors
are conditionally equivalent. Our comparative evalua-
tion demonstrates BinSim is a compelling complement
to software security analysis tasks.
9 Acknowledgments
We thank the Usenix Security anonymous reviewers and
Michael Bailey for their valuable feedback. This re-
search was supported in part by the National Science
Foundation (NSF) under grants CCF-1320605 and CNS-
1652790, and the Ofﬁce of Naval Research (ONR) under
grants N00014-16-1-2265 and N00014-16-1-2912. Jiang
Ming was also supported by the University of Texas Sys-
tem STARs Program.
References
[1] AGRAWAL, H., AND HORGAN, J. R. Dynamic program slicing.
ACM SIGPLAN Notices 25, 6 (1990), 246–256.
[2] ALLIEVI, A., UNTERBRINK, H., AND MERCER, W. Cryp-
toWall 4 - the evolution continues. Cisco White Paper, 2016 May.
[3] BABI ´C, D., REYNAUD, D., AND SONG, D. Malware analysis
In Proceedings of the 23rd Int.
with tree automata inference.
Conference on Computer Aided Veriﬁcation (CAV’11) (2011).
[4] BANERJEE, A., ROYCHOUDHURY, A., HARLIE, J. A., AND
LIANG, Z. Golden implementation driven software debugging.
In Proceedings of the Eighteenth ACM SIGSOFT International
Symposium on Foundations of Software Engineering (FSE’10)
(2010).
[5] BAO, T., BURKET, J., WOO, M., TURNER, R., AND BRUM-
LEY, D. ByteWeight: Learning to recognize functions in binary
code. In Proceedings of the 23rd USENIX Conference on Security
Symposium (2014).
[6] BAYER, U., COMPARETTI, P. M., HLAUSCHEK, C., KRUEGEL,
C., AND KIRDA, E. Scalable, behavior based malware cluster-
ing. In Proceedings of the Network and Distributed System Secu-
rity Symposium (NDSS’09) (2009).
[7] BOURQUIN, M., KING, A., AND ROBBINS, E. BinSlayer: Ac-
curate comparison of binary executables. In Proceedings of the
2nd ACM SIGPLAN Program Protection and Reverse Engineer-
ing Workshop (PPREW ’13) (2013).
[8] BRUMLEY, D., CABALLERO, J., LIANG, Z., NEWSOME, J.,
AND SONG, D. Towards automatic discovery of deviations in
binary implementations with applications to error detection and
ﬁngerprint generation. In Proceedings of the 16th USENIX Secu-
rity Symposium (2007).
[9] BRUMLEY, D., POOSANKAM, P., SONG, D., AND ZHENG,
J. Automatic patch-based exploit generation is possible: Tech-
niques and implications. In Proceedings of the 2008 IEEE Sym-
posimu on Security and Privacy (S&P’08) (2008).
[10] CABALLERO, J., MCCAMANT, S., BARTH, A., AND SONG, D.
Extracting models of security-sensitive operations using string-
enhanced white-box exploration on binaries. Tech. rep., EECS
Department, University of California, Berkeley, March 2009.
[11] CABALLERO, J., POOSANKAM, P., MCCAMANT, S., BABI ´C,
Input generation via decomposition and
D., AND SONG, D.
In Proceedings of the
re-stitching: Finding bugs in malware.
17th ACM Conference on Computer and Communications Secu-
rity (CCS’10) (2010).
[12] CANALI, D., LANZI, A., BALZAROTTI, D., KRUEGEL, C.,
CHRISTODORESCU, M., AND KIRDA, E. A quantitative study
of accuracy in system call-based malware detection. In Proceed-
ings of the 2012 International Symposium on Software Testing
and Analysis (ISSTA’12) (2012).
[13] CHANDRAMOHAN, M., XUE, Y., XU, Z., LIU, Y., CHO, C. Y.,
AND KUAN, T. H. B. BinGo: Cross-architecture cross-os bi-
nary search. In Proceedings of the 2016 ACM SIGSOFT Inter-
national Symposium on the Foundations of Software Engineering
(FSE’16) (2016).
[14] CHRISTODORESCU, M., JHA, S., AND KRUEGEL, C. Mining
In Proceedings of the the
speciﬁcations of malicious behavior.
6th joint meeting of the European software engineering confer-
ence and the ACM SIGSOFT symposium on the foundations of
software engineering (2007).
[15] CHRISTODORESCU, M., JHA, S., SESHIA, S. A., SONG, D.,
AND BRYANT, R. E. Semantics-aware malware detection.
In
Proceedings of the 2005 IEEE Symposium on Security and Pri-
vacy (S&P’05) (2005).
USENIX Association
26th USENIX Security Symposium    267
[16] COLLBERG, C. The tigress c diversiﬁer/obfuscator. http://
tigress.cs.arizona.edu/, last reviewed, 02/16/2017.
[17] COLLBERG, C., THOMBORSON, C., AND LOW, D. A taxon-
omy of obfuscating transformations. Tech. rep., The University
of Auckland, 1997.
[18] COMPARETTI, P. M., SALVANESCHI, G., KIRDA, E., KOL-
BITSCH, C., KRUEGEL, C., AND ZANERO, S. Identifying dor-
mant functionality in malware programs. In Proceedings of the
2010 IEEE Symposium on Security and Privacy (S&P’10) (2010).
[19] COOGAN, K., LU, G., AND DEBRAY, S. Deobfuscation of
In Proceedings of the 18th
virtualization-obfuscated software.
ACM Conference on Computer and Communications Security
(CCS’11) (2011).
[20] DIJKSTRA, E. W. A Discipline of Programming, 1st ed. Prentice
Hall PTR, 1997.
[21] EGELE, M., WOO, M., CHAPMAN, P., AND BRUMLEY, D.
Blanket Execution: Dynamic similarity testing for program bi-
In 23rd USENIX Security Symposium
naries and components.
(USENIX Security’14) (2014).
[22] ESCHWEILER, S., YAKDAN, K., AND GERHARDS-PADILLA,
E. discovRE: Efﬁcient cross-architecture identiﬁcation of bugs
in binary code. In Proceedings of the 23nd Annual Network and
Distributed System Security Symposium (NDSS’16) (2016).
[23] FLAKE, H. Structural comparison of executable objects.
In
Proceedings of the 2004 GI International Conference on De-
tection of Intrusions & Malware, and Vulnerability Assessment
(DIMVA’04) (2004).
[24] GANESH, V., AND DILL, D. L. A decision procedure for bit-
vectors and arrays. In Proceedings of the 2007 International Con-
ference in Computer Aided Veriﬁcation (CAV’07) (2007).
[25] GAO, D., REITER, M. K., AND SONG, D. BinHunt: Auto-
matically ﬁnding semantic differences in binary programs.
In
Poceedings of the 10th International Conference on Information
and Communications Security (ICICS’08) (2008).
[26] GODEFROID, P., LEVIN, M. Y., AND MOLNAR, D. Auto-
mated whitebox fuzz testing. In Proceedings of the 15th Annual
Network and Distributed System Security Symposium (NDSS’08)
(2008).
[27] GR ¨OBERT, F., WILLEMS, C., AND HOLZ, T. Automated iden-
tiﬁcation of cryptographic primitives in binary programs.
In
Proceedings of the 14th International Conference on Recent Ad-
vances in Intrusion Detection (RAID’11) (2011).
[28] JANG, J., BRUMLEY, D., AND VENKATARAMAN, S. BitShred:
feature hashing malware for scalable triage and semantic analy-
sis. In Proceedings of the 18th ACM conference on Computer and
communications security (CCS’11) (2011).
[29] JOHNSON, N. M., CABALLERO, J., CHEN, K. Z., MCCA-
MANT, S., POOSANKAM, P., REYNAUD, D., AND SONG, D.
Differential Slicing: Identifying causal execution differences for
security applications. In Proceedings of the 2011 IEEE Sympo-
sium on Security and Privacy (S&P’11) (2011).
[30] KANG, M. G., POOSANKAM, P., AND YIN, H. Renovo: A
In Proceedings
hidden code extractor for packed executables.
of the 2007 ACM Workshop on Recurring Malcode (WORM ’07)
(2007).
[31] KAWAGUCHI, M., LAHIRI, S. K., AND REBELO, H. Condi-
tional Equivalence. Tech. Rep. MSR-TR-2010-119, Microsoft
Research, 2010.
[32] KHARRAZ, A., ARSHAD, S., MULLINER, C., ROBERTSON,
W. K., AND KIRDA, E. UNVEIL: A large-scale, automated
In Proceedings of the 25th
approach to detecting ransomware.
USENIX Conference on Security Symposium (2016).
[33] KHARRAZ, A., ROBERTSON, W., BALZAROTTI, D., BILGE,
L., AND KIRDA, E. Cutting the Gordian Knot: A Look Under
the Hood of Ransomware Attacks. In Proceedings of the 12th In-
ternational Conference on Detection of Intrusions and Malware
& Vulnerability Assessment (DIMVA’15) (2015).
[34] KIRAT, D., AND VIGNA, G. MalGene: Automatic extraction of
malware analysis evasion signature. In Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Se-
curity (CCS’15) (2015).
[35] KIRAT, D., VIGNA, G., AND KRUEGEL, C. BareCloud: Bare-
metal analysis-based evasive malware detection. In Proceedings
of the 23rd USENIX Conference on Security Symposium (2014).
[36] KOLBITSCH, C., COMPARETTI, P. M., KRUEGEL, C., KIRDA,
E., ZHOU, X., AND WANG, X. Effective and efﬁcient malware
In Proceedings of the 18th USENIX
detection at the end host.
Security Symposium (2009).
[37] LAKHOTIA, A., PREDA, M. D., AND GIACOBAZZI, R. Fast lo-
cation of similar code fragments using semantic ’juice’. In Pro-
ceedings of the 2nd ACM SIGPLAN Program Protection and Re-
verse Engineering Workshop (PPREW’13) (2013).
[38] LANZI, A., SHARIF, M., AND LEE, W. K-Tracer: A system
In Proceedings of the
for extracting kernel malware behavior.
16th Annual Network and Distributed System Security Sympo-
sium (NDSS09) (2009).
[39] LINDORFER, M., DI FEDERICO, A., MAGGI, F., COM-
PARETTI, P. M., AND ZANERO, S. Lines of malicious code:
In Proceedings
Insights into the malicious software industry.
of the 28th Annual Computer Security Applications Conference