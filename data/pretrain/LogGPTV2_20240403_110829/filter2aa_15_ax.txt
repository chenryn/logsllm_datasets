$screct_key
）；
      $str = trim
（
$str
）；
      $str = $this->addPKCS7Padding
（
$str
）；
      $iv = mcrypt_create_iv
（
mcrypt_get_iv_size
（
MCRYPT_RIJNDAEL_128
，
MCRYPT_MODE_ECB
），
MCRYPT_RAND
）；
      $encrypt_str =  mcrypt_encrypt
（
MCRYPT_RIJNDAEL_128
，
$screct_key
，
$str
，
MCRYPT_MODE_ECB
，
$iv
）；
      return base64_encode
（
$encrypt_str
）；
  }
  /**
   *
解密方法
   * @param string $str
   * @return string
   */
  function decrypt
（
$str
）
{
      //AES
，
128 ECB
模式加密数据
      $screct_key = $this->_secrect_key
；
      $str = base64_decode
（
$str
）；
      $screct_key = base64_decode
（
$screct_key
）；
      $iv = mcrypt_create_iv
（
mcrypt_get_iv_size
（
MCRYPT_RIJNDAEL_128
，
MCRYPT_MODE_ECB
），
MCRYPT_RAND
）；
      $encrypt_str =  mcrypt_decrypt
（
MCRYPT_RIJNDAEL_128
，
$screct_key
，
$str
，
MCRYPT_MODE_ECB
，
$iv
）；
      $encrypt_str = trim
（
$encrypt_str
）；
      $encrypt_str = $this->stripPKSC7Padding
（
$encrypt_str
）；
      return $encrypt_str
；
  }
  /**
   *
填充算法
   * @param string $source
   * @return string
   */
  function addPKCS7Padding
（
$source
）
{
      $source = trim
（
$source
）；
      $block = mcrypt_get_block_size
（
'rijndael-128'
，
'ecb'
）；
      $pad = $block -
（
strlen
（
$source
）
% $block
）；
      if
（
$pad "
；
$encrypt_card=$rep->encrypt
（
$input
）；
echo "
加密：
".$encrypt_card.""
；
echo "
解密：
".$rep->decrypt
（
$rep->encrypt
（
$input
））；
我们来看看使用它加解密后的效果，如图10-3所示。
图 10-3
10.2 非对称加密
非对称加密与对称加密不一样的地方在于，非对称加密算法有两个密钥，分别为公钥和私钥，它的安全性比对称加密更好，公钥用来加密，私钥用来解密，如果用公钥对数据进行加密，只有用对应的私钥才能解密，两个密钥不一致，所以叫非对称加密。
它的使用流程原理如图10-4所示。
图 10-4
RSA加密
RSA公钥加密算法在1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出，RSA正是他们三人的姓氏开头字母拼接。RSA是目前公认最有影响力的加密算法，不过并不是不可破解的，在短密钥的情况下，基于现在越来越强大的云计算，也存在被爆破的可能。早在1999年，就有花了五个月时间在一台有3.2G中央内存的Cray C916计算机上成功分解RSA-155（512位）。
RSA的最大问题在于加解密速度慢，整个运算过程相对要消耗不少时间，不过这一些问题在今后计算资源横向扩展的条件下，也不是很大的问题。
我们来测试一下PHP下的RSA加解密，如果希望简单一点，PHP上可以使用phpseclib，下载地址
http://phpseclib.sourceforge.net/
 ，不需要配置即可直接使用，首先下载phpseclib，文件结构如图10-5所示。
图 10-5
然后生成密钥，代码如下：
createKey
（））；
echo "$privatekey$publickey"
；
生成密钥后，我们来看看加解密代码：
loadKey
（
$PUBLIC_KEY
）；
//
载入公钥
$plaintext = 'phpsec'
；
$rsa->setEncryptionMode
（
CRYPT_RSA_ENCRYPTION_PKCS1
）；
$ciphertext = $rsa->encrypt
（
$plaintext
）；
$rsa->loadKey
（
$PRIVATE_KEY
）；
//
载入私钥
echo $ciphertext.''.''.''
；
echo $rsa->decrypt
（
$ciphertext
）；
可以看到$rsa->encrypt（$plaintext）；函数用来加密，最终用$rsa->decrypt（$ciphertext）来解密并输出明文字符串“phpsec”，效果如图10-6所示。
图 10-6
第一行的乱码就是加密后的“phpsec”，通常保存的时候还会用Base64转码一下才好。
10.3 单向加密
之前我们介绍的加密算法都是双向的，也就是加密后可以再逆向算出明文数据，而在加密算法里面，还有单向加密，也就是不可逆算法，常见的有MD系列（md4、md5）和sha1等。因为存在不可逆的性质，所以这类哈希算法通常用来保存密码和做数字签名，不过因为相同的字符串的哈希值是一样的，所以存在碰撞的问题，目前全球公开的最大MD5解密库cmd5.com号称有24万亿条数据，解密率全球第一，笔者在实际应用中也感受到普通人常用的密码破解成功率也在90%以上。
MD5/sha1加密
MD5是目前使用最多的密码存储加密算法，几乎95%以上的网站都在使用MD5算法，MD5分为16位和32位，实际上它们的安全性并没有什么不一样的地方。根据实际经验来看，用单纯MD5（不加salt）来存储用户密码是非常不安全的，提供MD5解密的网站随处可见，如cmd5.com、xmd5.com，等等。
在PHP中进行MD5计算很简单，PHP提供了md5（）函数，只要传入一个字符串即可返回加密后的结果。
同样，sha1加密也被部分网站用来保存密码，它比MD5更长，足足有40位，支持sha1解密的网站相对较少，碰撞的数据量也相对较少，所以实际中它的“安全性”比MD5更好。我们来看看它的使用方法，代码如下：
'
；
echo 'phpsec sha1
：
'.sha1
（
'phpsec'
）；
执行结果如图10-7所示。
图 10-7
第11章 业务功能安全设计
要打造安全的应用程序，要从业务功能的设计开始，只有功能设计得足够安全，编写代码的时候才会少出现一些漏洞，特别是逻辑漏洞。所以设计一个安全功能尤为重要。下面我们将对功能安全的痛点进行分析，这些功能包括验证码、用户登录、用户注册、密码找回、资料操作、投票、积分、抽奖、充值支付、私信反馈、文件管理、数据库管理以及命令执行等，对经常出现的漏洞以及利用方式进行详细的分析，再给出详细的安全设计应该注意的地方。这一部分内容对于项目设计人员和研发人员来说更有价值。
11.1 验证码
验证码可以解决很多业务安全问题，比如撞库、垃圾注册，等等，可谓防御业务风险必备神器。验证码有图片验证码、滑动验证码、短信/邮箱/电话、二维码等分类，而据保守估计起码有80%以上的验证码是存在可以爆破和简单识别的问题，设计一个有效的验证码尤为重要。
11.1.1 验证码绕过
图片验证码是目前见得比较多的，各种各样的图片验证码形式也比较多和奇葩，有中文、英文、字母数字和看图识物，等等，简单列举一下，如图11-1~图11-3所示。
图 11-1
图 11-2
图 11-3
不得不吐槽一下，一些验证码为了避免机器识别，已经被逼得设计成人类都认不出来了，业务和体验设计与安全是有一点矛与盾的，所以从业务角度考虑，我们还是能找到很多绕过这些验证码的方法，我们来一起看看。
1.不刷新直接绕过
Web页面登录等操作的验证码能够多次使用的原因是后端程序在接收一次请求后，并没有主动刷新验证码，部分比较大的业务使用了负载均衡，验证码跟Session绑定在一起，为了能够保证验证码能够正常使用，所以会把验证码明文或者加密后放在Cookie或者POST数据包里面，所以每次只要同一个数据包里面的两个验证码对上了即可绕过。
2.暴力破解
注册或者找回密码等敏感操作时的手机或者邮箱验证码能够爆破，主要是因为程序没有设置验证码错误次数和超时，导致能够不断进行尝试。
3.机器识别
机器识别验证码对于不同的验证码类型有不同的手段，最常见的是图片验证码的机器识别，这类识别有两种情况：一种是针对不是实时生成的验证码，已经生成了部分的验证码在服务器端保存，前端直接加载验证。这类是最好绕过的，只要把全部的验证码文件保存回来，做一个图片MD5库，然后利用的时候直接匹配服务器端返回的图片MD5即可识别。另外一种是动态生成的验证码，这类需要做一些图片文字识别或者语音识别，当初有一个笑话讲的是Google出的语音识别系统干掉了自家的语言验证码。国内也有专门提供这种服务的公司，比如云速，如图11-4所示。
4.打码平台
这类打码平台大多数后端是使用廉价的人工资源在打，比如学生什么的，国内比较有名的像打码兔（damatu1.com）、Q赚（qqearn.com），等等，让我们来看一个任务佣金表就知道成本有多低，如图11-5所示。
经过上面的分析，我们大致可以知道怎样设计一个强壮的验证码，主要有以下几点：
1）最重要的是，要设置验证码错误次数，比如一个验证码只能错误一次，这就避免了暴力破解的问题。
2）不把验证码放到HTML页面或者Cookie中。
3）验证码要设置只能请求一次，请求一次后不管错误与否都在后端程序强制刷新。
图 11-4
图 11-5
4）短信或者邮件验证码必须要6位以上字母和数字混合，图片或者语音验证码需要加强混淆干扰，比如图片文字变形，增加干扰斑点等。语音验证码增加背景噪声。