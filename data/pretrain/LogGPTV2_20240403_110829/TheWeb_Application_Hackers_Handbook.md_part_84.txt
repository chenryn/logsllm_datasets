Stuttard c17.indd V2 - 08/10/2011 Page 649
Chapter 17 n Attacking Application Architecture 649
n If different tiers are inadequately segregated, you may be able to lever-
age a defect within one tier to directly undercut the security protections
implemented at another tier.
n Having achieved a limited compromise of one tier, you may be able to
directly attack the infrastructure supporting other tiers and therefore
extend your compromise to those tiers.
We will examine these attacks in more detail.
Exploiting Trust Relationships Between Tiers
Different tiers of an application may trust one another to behave in particular
ways. When the application is functioning as normal, these assumptions may
be valid. However, in anomalous conditions or when under active attack, they
may break down. In this situation, you may be able to exploit these trust relation-
ships to advance an attack from one tier to another, increasing the signifi cance
of the security breach.
One common trust relationship that exists in many enterprise applications is
that the application tier has sole responsibility for managing user access. This
tier handles authentication and session management and implements all logic
that determines whether a particular request should be granted. If the applica-
tion tier decides to grant a request, it issues the relevant commands to other
tiers to carry out the requested actions. Those other tiers trust the application
tier to carry out access control checks properly, and therefore they honor all
commands they receive from the application tier.
This type of trust relationship effectively exacerbates many of the common
web vulnerabilities examined in earlier chapters. When a SQL injection fl aw
exists, it can often be exploited to access all data the application owns. Even if
the application does not access the database as DBA, it typically uses a single
account that can read and update all the application’s data. The database tier
effectively trusts the application tier to properly control access to its data.
In a similar way, application components often run using powerful operating
system accounts that have permission to carry out sensitive actions and access
key fi les. In this confi guration, the operating system layer effectively trusts
the relevant application tiers to not perform undesirable actions. If an attacker
fi nds a command injection fl aw, he can often fully compromise the underlying
operating system supporting the compromised application tier.
Trust relationships between tiers can also lead to other problems. If program-
ming errors exist within one application tier, these may lead to anomalous
behavior in other tiers. For example, the race condition described in Chapter 11
causes the back-end database to serve up account information belonging to the
wrong user. Furthermore, when administrators are investigating an unexpected
event or security breach, audit logs within trusting tiers normally are insuf-
fi cient to fully understand what has occurred, because they simply identify the
cc1177..iinndddd 664499 88//1199//22001111 1122::1177::1155 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 650
650 Chapter 17 n Attacking Application Architecture
trusted tier as the agent of the event. For example, following a SQL injection
attack, database logs may record every query injected by the attacker. But to
determine the user responsible, you must cross-reference these events with
entries in the logs of the application tier, which may or may not be adequate to
identify the perpetrator.
Subverting Other Tiers
If different tiers of the application are inadequately segregated, an attacker who
compromises one tier may be able to directly undercut the security protections
implemented at another tier to perform actions or access data that that tier is
responsible for controlling.
This kind of vulnerability often arises in situations where several different
tiers are implemented on the same physical computer. This architectural con-
fi guration is common practice in situations where cost is a key factor.
Accessing Decryption Algorithms
Many applications encrypt sensitive user data to minimize the impact of appli-
cation compromise, often to meet regulatory or compliance requirements such
as PCI. Although passwords can be salted and hashed to ensure that they can-
not be determined even if the data store is compromised, a different approach
is needed for data where the application needs to recover the corresponding
plaintext value. The most common examples of this are a user’s security ques-
tions (which may be verifi ed interactively with a help desk) and payment card
information (which is needed to process payments). To achieve this, a two-way
encryption algorithm is employed. A typical fl aw when using encryption is that
a logical separation is not obtained between encryption keys and the encrypted
data. A simple fl awed separation when encryption is introduced into an exist-
ing environment is to locate the algorithm and associated keys within the data
tier, which avoids impacting the rest of the code. But if the data tier were ever
compromised, for example via a SQL injection attack, locating and executing
the decryption function would be a simple step for an attacker.
NOTE Regardless of the encryption process, if the application is able to
decrypt information, and the application becomes fully compromised, an
attacker can always fi nd a logical route to the decryption algorithm.
Using File Read Access to Extract MySQL Data
Many small applications use a LAMP server (a single computer running the
open source software Linux, Apache, MySQL, and PHP). In this architecture,
cc1177..iinndddd 665500 88//1199//22001111 1122::1177::1155 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 651
Chapter 17 n Attacking Application Architecture 651
a fi le disclosure vulnerability within the web application tier, which on its
own may not represent a critical defect, can result in unrestricted access to all
application data. This is true because MySQL data is stored in human-readable
fi les that the web application process is often authorized to read. Even if the
database implements strict access control over its data, and the application uses
a range of different low-privileged accounts to connect to the database, these
protections may be entirely undercut if an attacker can gain direct access to the
data held within the database tier.
For example, the application shown in Figure 17-1 allows users to choose a
skin to customize their experience. This involves selecting a cascading style
sheets (CSS) fi le, which the application presents to the user for review.
Figure 17-1: An application containing a function to view a selected file
If this function contains a path traversal vulnerability (see Chapter 10), an
attacker can exploit this to gain direct access to arbitrary data held within the
MySQL database. This allows him to undercut the controls implemented within
the database tier. Figure 17-2 shows a successful attack retrieving the usernames
and password hashes from the MySQL user table.
cc1177..iinndddd 665511 88//1199//22001111 1122::1177::1155 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 652
652 Chapter 17 n Attacking Application Architecture
Figure 17-2: An attack that undercuts the database tier to retrieve arbitrary data
TIP If an attacker has fi le-write access, he can try to write to the applica-
tion’s confi guration, or write to a hosted virtual directory to get command
execution. See the nslookup example in Chapter 10.
Using Local File Inclusion to Execute Commands
Most languages contain a function that allows a local fi le to be included within
the current script. The ability for an attacker to specify any fi le on the fi lesystem
is undeniably a high-risk issue. Such a fi le could be the /etc/passwd fi le or a
confi guration fi le containing a password. In these cases the risk of information
disclosure is obvious, but the attacker cannot necessarily escalate the attack to
further compromise the system (unlike with remote fi le inclusion, as described
in Chapter 10). However, it may still be possible for an attacker to execute com-
mands by including a fi le whose contents he partially controls, as a result of
other application or platform features.
Consider an application that takes user input within the country parameter
in the following URL:
http://eis/mdsecportal/prefs/preference_2?country=en-gb
cc1177..iinndddd 665522 88//1199//22001111 1122::1177::1155 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 653
Chapter 17 n Attacking Application Architecture 653
A user can modify the country parameter to include arbitrary fi les. One
possible attack might be to request URLs containing script commands so that
these are written to the web server log fi le and then include this log fi le using
the local fi le inclusion behavior.
An interesting method exploiting an architectural quirk in PHP is that PHP
session variables are written to fi le in cleartext, named using the session token.
For example, the fi le:
/var/lib/php5/sess_9ceed0645151b31a494f4e52dabd0ed7
may contain the following content, which includes a user-confi gured nickname:
logged_in|i:1;id|s:2:”24”;username|s:11:”manicsprout”;nickname|s:22:
“msp”;privilege|s:1:”1”;
An attacker may be able to exploit this behavior by fi rst setting his nickname
to , as shown in Figure 17-3. He can then include his
session fi le to cause the id command to be executed using the following URL,
as shown in Figure 17-4:
http://eis/mdsecportal/prefs/preference_2.php?country=../../../../../../
../../var/lib/php5/sess_9ceed0645151b31a494f4e52dabd0ed7%00
Figure 17-3: Configuring a nickname containing server-executable script code
cc1177..iinndddd 665533 88//1199//22001111 1122::1177::1166 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 654
654 Chapter 17 n Attacking Application Architecture
Figure 17-4: Executing the session file containing the malicious nickname via the
local file inclusion function
HACK STEPS
1. As described throughout this book, for any vulnerability you iden-
tify within the application, think imaginatively about how this can be
exploited to achieve your objectives. Countless successful hacks against
web applications begin from a vulnerability that is intrinsically limited
in its impact. By exploiting trust relationships and undercutting controls
implemented elsewhere within the application, it may be possible to
leverage a seemingly minor defect to carry out a serious breach.
2. If you succeed in performing arbitrary command execution on any compo-
nent of the application, and you can initiate network connections to other
hosts, consider ways of directly attacking other elements of the applica-
tion’s infrastructure at the network and operating system layers to expand
the scope of your compromise.
Securing Tiered Architectures
If carefully implemented, a multitiered architecture can considerably enhance
an application’s security, because it localizes the impact of a successful attack.
In the basic LAMP confi guration described previously, in which all compo-
nents run on a single computer, the compromise of any tier is likely to lead
to complete compromise of the application. In a more secure architecture, the
compromise of one tier may result in partial control over an application’s data
and processing, but it may be more limited in its impact and perhaps contained
to the affected tier.
Minimize Trust Relationships
As far as possible, each tier should implement its own controls to defend against
unauthorized actions and should not trust other application components to
cc1177..iinndddd 665544 88//1199//22001111 1122::1177::1166 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 655
Chapter 17 n Attacking Application Architecture 655
prevent security breaches that the tier itself can help block. Here are some
examples of this principle being applied to different tiers of the application:
n The application server tier can enforce role-based access control over specifi c
resources and URL paths. For example, the application server can verify
that any request for the /admin path was received from an administrative
user. Controls can also be imposed over different kinds of resources, such
as specifi c types of scripts and static resources. This mitigates the impact
of certain kinds of access control defects within the web application tier,
because users who are not authorized to access certain functionality will
have their request blocked before it reaches that tier.
n The database server tier can provide various accounts for use by the applica-
tion for different users and different actions. For example, actions on behalf
of unauthenticated users can be carried out with a low-privileged account
allowing read-only access to a restricted set of data. Different categories
of authenticated users can be assigned different database accounts, grant-
ing read-and-write access to different subsets of the application’s data, in
line with the user’s role. This mitigates the impact of many SQL injection
vulnerabilities, because a successful attack may result in no further access
than the user could legitimately obtain by using the application as intended.
n All application components can run using operating system accounts
that possess the least level of privileges required for normal operation.
This mitigates the impact of any command injection or fi le access fl aws
within these components. In a well-designed and fully hardened architec-
ture, vulnerabilities of this kind may provide an attacker with no useful
opportunities to access sensitive data or perform unauthorized actions.
Segregate Different Components
As far as possible, each tier should be segregated from interacting with other
tiers in unintended ways. Implementing this objective effectively may in some
cases require different components to run on different physical hosts. Here are
some examples of this principle being applied:
n Different tiers should not have read- or write-access to fi les used by other
tiers. For example, the application tier should not have any access to the
physical fi les used to store database data, and should only be able to
access this data in the intended manner using database queries with an
appropriate user account.
n Network-level access between different infrastructure components should
be fi ltered to permit only services with which different application tiers
are intended to communicate. For example, the server hosting the main
cc1177..iinndddd 665555 88//1199//22001111 1122::1177::1166 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 656
656 Chapter 17 n Attacking Application Architecture
application logic may be permitted to communicate with the database
server only via the port used to issue SQL queries. This precaution will
not prevent attacks that actually use this service to target the database
tier. But it will prevent infrastructure level attacks against the database
server, and it will contain any operating system level compromise from
reaching the organization’s wider network.
Apply Defense in Depth
Depending on the exact technologies in use, a variety of other protections can
be implemented within different components of the architecture to support the
objective of localizing the impact of a successful attack. Here are some examples
of these controls:
n All layers of the technology stack on every host should be security hardened,
in terms of both confi guration and vulnerability patching. If a server’s
operating system is insecure, an attacker exploiting a command injection
fl aw with a low-privileged account may be able to escalate privileges to
fully compromise the server. The attack may then propagate through the
network if other hosts have not been hardened. On the other hand, if the
underlying servers are secured, an attack may be fully contained within
one or more tiers of the application.
n Sensitive data persisted in any tier of the application should be encrypted
to prevent easy disclosure in the event that that tier is compromised. User
credentials and other sensitive information, such as credit card numbers,
should be stored in encrypted form within the database. Where available,
built-in protection mechanisms should be used to protect database cre-
dentials held on the web application tier. For example, in ASP.NET 2.0, an
encrypted database connection string can be stored in the web.config fi le.
Shared Hosting and Application Service Providers
Many organizations use external providers to help deliver their web applica-
tions to the public. These arrangements range from simple hosting services
in which an organization is given access to a web and/or database server, to
full-fl edged application service providers (ASPs) that actively maintain the
application on behalf of the organization. Arrangements of this kind are ideal
for small businesses that do not have the skills or resources to deploy their own
application, but they are also used by some high-profi le companies to deploy
specifi c applications.
Most providers of web and application hosting services have many custom-
ers and typically support multiple customers’ applications using the same
cc1177..iinndddd 665566 88//1199//22001111 1122::1177::1166 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 657
Chapter 17 n Attacking Application Architecture 657
infrastructure, or closely connected infrastructures. An organization that chooses
to use one of these services therefore must consider the following related threats:
n A malicious customer of the service provider may attempt to interfere
with the organization’s application and its data.
n An unwitting customer may deploy a vulnerable application that enables
malicious users to compromise the shared infrastructure and thereby
attack the organization’s application and its data.
Web sites hosted on shared systems are prime targets for script kiddies seek-
ing to deface as many web sites as possible, because compromising a single
shared host can often enable them to attack hundreds of apparently autonomous
web sites in a short period of time.
Virtual Hosting
In simple shared hosting arrangements, a web server may simply be confi gured
to support multiple virtual web sites with different domain names. This is
achieved via the Host header, which is mandatory in HTTP version 1.1. When
a browser issues an HTTP request, it includes a Host header containing the
domain name contained in the relevant URL and sends the request to the IP
address associated with that domain name. If multiple domain names resolve
to the same IP address, the server at this address can still determine which
web site the request is for. For example, Apache can be confi gured to support
multiple web sites using the following confi guration, which sets a different web
root directory for each virtually hosted site:
ServerName wahh-app1.com
DocumentRoot /www/app1
ServerName wahh-app2.com
DocumentRoot /www/app2
Shared Application Services
Many ASPs provide ready-made applications that can be adapted and customized
for use by their customers. This model is cost-effective in industries where large
numbers of businesses need to deploy highly functional and complex applications that
provide essentially the same functionality to their end users. By using the services
of an ASP, businesses can quickly acquire a suitably branded application without
incurring the large setup and maintenance costs that this would otherwise involve.
cc1177..iinndddd 665577 88//1199//22001111 1122::1177::1166 PPMM
Stuttard c17.indd V2 - 08/10/2011 Page 658
658 Chapter 17 n Attacking Application Architecture