178
8'8
180
附录AAWK总结
182
附录B部分习题答案
190
索引
205
---
## Page 6
前言
iii
计算机用户经常把大量的时间花费在简单，机械化的数据处理工作中一改变数据格式，验证数据的
有效性，搜索特定的数据项，求和，打印报表等，这些工作完全可以自动化地完成，但是如果每碰到一个这
样的任务，就用一门标准的编程语言（比如C或Pascal）写一个专用的程序来解决它，未免也太麻烦了，
Awk是一门特殊的编程语言，它可以非常方便处理上面提到的任务，经常只需要一两行便可搞定.
一个awk程序由一系列的模式和动作组成，这些模式与动作说明了在输入中搜索哪些数据，以及当符合
条件的数据被找到时，应该执行什么操作.Awk在输入文件集合中搜索与模式相匹配的输入行，当找到
一个匹配行时，便会执行对应的动作，通过字符串，数值，字段，变量，和数组元素的比较操作，再加上正
则表达式，利用这些组合，一个模式可以用来选择输入行，而动作可以对选中的行作任意的处理，描述动
作的语言看起来和C非常像，但是它不需要声明，并且字符串和数值都是内建的数据类型.
Awk自动地搜索输入文件，并把每一个输入行切分成字段.因为许多工作都是自动完成的一包括
输入，字段分割，存储管理，初始化一所以和侍统语言编写的程序比起来，awk程序会小得多.Awk最
常用的用途就是前面提到的那些工作，因为awk程序一般都很短，所以人们经常这样使用它：通过键盘
在命令行中输入程序代码（只有一两行），执行，然后把代码丢弃，实际上，awk是一个通用编程工具，许
多专用工具都可以用它来替代.
由于表达式和操作非常简使，所以用aWk来构造大型程序的原型就显得非常方便：先从简单的几行
开始，慢慢加以扩充，测试不同的设计方案，直到完成预期的目标，因为程序比较简短，所以很容易上手，
如果在开发的过程中想到了一个更好的方案，修改起来（甚至从头开始）也没那么麻烦，只要设计是正确
的，那么把awk程序翻译成其他语言也很方使.
iv
本书组织
本书的第一目标是告诉读者awk是什么，以及如何高效地使用它，第一章是一个快速入门教程，读
过几页之后，读者应该就有了足够的知识来开始写一些有用的awk程序，这一章中的例子非常简短，它
们都是awk的典型应用.
第二章对整个awk语言进行描述，虽然这一章也包含了许多例子，但是读起来就像手册一样枯爆，
所以在第一次阅读本章时，快速浏览即可，
本书的剩下几章包含了相当丰富的例子，这些例子主要用来展示awk的应用范围如何广泛，以及如
何高效地使用它.其中一些示例比较常规，另外一些虽然展示了某些编程思想，但并没有非常实际的用
途，还有一小部分例子仅仅是因为它们比较有趣。
第三章的重点是检索，转换，归约和数据验证一这些任务本来就是当初开发awk的目标，这一章
还讨论了如何处理多行记录，比如地址薄.
---
## Page 7
前言
Awk是管理小型个人数据库的优秀工具，第四章讨论如何从数据库中生成报表，以及如何为存储
在多个文件中的数据，构造一个简单的关系数据库系统和对应的查询语言，
Awk处理文本就像其他大多数语言处理数值一样方使，所以它经常被应用在文本处理领域.第五
章讨论如何使用awk来生成文本，以及协助文格的准备工作，这一章包含了一个索引生成程序，本书的
索引就是用它的增强版生成的.
第六章关于“小型语言”，小型语言指的是特定于某个领域的定制化语言，使用awk编写翻译器非
常方便，因为它的基本操作支持大部分的词汇和表格管理工作，这一章包含汇编程序，绘图程序，和几个
计算器程序。
Awk还可以用来演示算法，因为用awk写程序不需要声明，也不用担心内存管理，所以它不仅具有
伪代码的许多优点，而且是可运行的，第七讨论算法实验，包括测试与性能评价，算法包括几种排序算
法，最后以Unix程序make作为结束
第八章介绍awk的历史.除此之外，如果程序比较慢，或者条件比较苛刻，这一章还提出了几点建
议.
附录A总结了awk语言，附录B是部分习题的参考答案，
读者应该从第一章开始阅读，并尝试自己动手写程序，快速浏览第二章，重点关注汇总和表格，不
要陷入到细节当中，然后根据自己的兴趣，阅读后面的章节，这些章节之间都是互相独立的，所以不用在
意阅读顺序.
示例
示例覆盖了多个主题，但其中最重要的是向读者展示如何高效地使用awk.我们已经努力让书中的
例子覆盖尽可能多的构造，对关联数组和正则表达式有所侧重，因为它们是awk编程的主要特点，
第2个主题是展示awk丰富的功能.从数据库到芯片设计，从数值分析到图形图像，从编译器到系
统管理，从非编程人员的第一门语言到软件工程课的实现语言—都可以见到awk的身影，我们希望书
中的例子也能够让你有所启发，
第3个主题展示的是如何完成一些常见的计算操作，相关的例子包括关系型数据库，玩具计算机的
汇编程序和解释程序，绘图语言，awk子集的逼归下降语法分析器，基于make的文件更新程序等，在每
个案例中，都会有一个简短的程序，向读者展示操作过程中最核心的部分，以便快速理解和动手实践，
另外，我们还会向读者说明解决编程问题的一系列方法.Awk对快速原型开发方法支持得很好，另
外一种不太明显的策略是分而治之一把一件大任务分成几个小任务，每一个小任务集中解决问题的某
一方面，最后一种方法是开发一个用来生成其他程序的程序，通过开发小型语言，我们可以更加容易地
定义出良好的用户接口，以及更合理的实现方案，虽然前面提到的方法是在awk的环境中提出，但实际
上，它们都是非常通用的编程方法，每一位程序员都应该掌握.
书中所有的例子都是直接从文本中加以测试，这些文本都是以机器可读的形式呈现，我们已经尽力
让这些示例程序不含有有错误，但是我们既没有为它们添加特性，也没有用所有可能的无效数据对它们
进行测试：这些程序的目标主要是用来说明问题
---
## Page 8
前言
vii
AWK的演变
Awk最早由本书作者在1977年设计并实现，当时是作为实验的一部分，而这个实验是为了检查
Unix工具grep和sed是否可以像处理文本邵样处理数值.Awk的开发基于我们对正则表达式和可
编程编辑器的兴趣，虽然开发awk是为了写出非常简短的程序，但是它丰富的功能马上吸引了众多的用
户，而这些用户经常升发大型程序，这些大型程序需要awk提交更多的功能，因此在1985年，awk推出
了一个增加版
增强版增加的一个主要特性是允许用户定义自己的函数，其他的增强功能包括动态正则表达式一vi
带有文本替换和模式匹配功能；更丰富的内建函数与变量；新增的运算符和语句；从多个文件中读取输入
数据；命令行参数的支持，出错时的消息提示也得到了加强，第一章的例子只使用了原版awk的功能，
而后面的例子则用到了许多新增的特性。
本书的awk版本是UnixSystemVRelease 3.1的一部分，其源代码可以通过AT&T的Unix
SystemToolchest款件发行系统得到，请拨打1-201-522-6900，并以访客身份登录；如果是欧洲地区，
请联系位于伦敦的AT&TUnixEurope（44-1-567-7711);如果是远东地区，请联系位于东京的AT&T
Unix Pacific (81-3-431-3670)
因为awk在Unix系统中开发而成，所以它的某些功能只能在Unix系统使用，有几个例子使用了
这些和操作系统相关的功能，另外，我们还假设系统中提供了某些Unix实用工具，尤其是sort.除
了这些限制条件，awk应该能在多种平台中使用，尤其是它也能在MS-DOS中运行，更多的信息请咨询
Addison-Wesley.
Awk并不完美，它也有一些例外，遗漏，或者仅仅是一些不好的设计导致的，有时候它还会很慢，但
它同时也是一门功能丰富的语言，可以解决许多编程问题，希望读者能像我们一样，从awk中得到巨大
的帮助.
致谢
本书的写作过程得到了许多人的帮助，我们由裹地感谢他们，尤其是JonBentley，他的热情始
终鼓舞着我们.Jon为本书的创作提供了许多想法和程序，这些都来源于他长期使用和教授awk积
累下来的经验，他还认真地阅读了本书的部分草稿，另外，我们还要感谢DougMelIlroy，作为一名
出色的读者，他帮助我们改善了整本书的结构和内容.其他人还包括SusanAho,Jaap Akkerhuis，
Lorinda Cherry, Chris Fraser, Eric Grosse, Riccardo Gusella, Bob Herbst, Mark Kernighan, John
Linderman, Bob Martin, Howard Moscovitz, Gerard Schmitt, Don Swartwout, Howard Trickey,
Peter van Eijk, Chris Van Wyk, and Mihalis Yannakakis, 谢谢他们 的 帮助.
Alfred V. Aho
Brian W. Kernighan
Peter J. Weinberger
exist elsewhere.
---
## Page 9
第一章快速入门
Awk是一种使用方使且表现力很强的编程语言，它可以应用在多种不同的计算与数据处理任务中.
这一章是一个简短的教程，目的是为了能让读者尽可能快地写出自己的awk程序，第二章对整个awk
语言进行描述，剩下的章节展示了在多种不同的领域中，如何使用awk解决问题，在书中出现的例子，读
者应该会感到非常有用，有趣且具有指导作用.
1.1开始
实用的awk程序通常都很短，只有一两行.假设有一个文件，叫作emp.data，这个文件包含有名
字，每小时工资（以美元为单位），工作时长，每一行代表一个雇员的记录，就像这样
Beth
4 .00
0
Dan
3.75
0
Kathy4.00
10
Mark
5.00
20
Mary
5.50
22
Susie4.25
18
现在你想要打印每位雇员的名字以及他们的报酬（每小时工资乘以工作时长），而雇员的工作时长必须大
于零，这种类型的工作是awk的设计目标之一，所以会很简单，只要键入下面这一行即可：
awk'$3>0{print$1，$2*$3}'emp.data
该行命令告诉操作系统运行awk程序，被运行的程序用单引号包围起来，从输入文件emp.data获取2
数据，被单引号包围的部分是一个完整的awk程序.它由一个单独的模式-动作语句（patternn-action
statement)组成.模式$3>0扫描每一个输入行，如果该行的第三列（或者说字段（field）)大于零，则
动作
{print $1，$2 * $3 }
就会为每一个匹配行打印第一个字段，以及第二与第三个字段的乘积，
如果想知道哪些员工在偷懒，键入
awk′$3 ==0{print $1}'emp.data
模式S3==0匹配第三个字段为零的行，动作
{print $1}
---
## Page 10
第一章快速入门
2
打印该行的第一个字段
在阅读这本书时，请尝试运行并修改书中的程序，由于大多数程序都很简短，通过这种方式读者可以
快速理解awk的工作方式.在Unix系统中，可以这样运行上面提到的两个示例程序：
$awk'$3>0(print$1,$2*$3}'emp.data
Kathy 40
Mark 100
Mary 121
Susie 76.5
$ awk‘$3 == 0{print $1 }′ emp.data
Beth
Dan
$
行首的字符$是Shell的命令提示符，在其他机器上或许会不一样
AWK程序的结构
现在让我们回退一步，看一下到底发生了什么，在上面的命令行中，被单引号包围的部分是使用
awk语言编写的程序.本章的每一个awk程序都是由一个或多个模式一动作语句组成的序列：
pattern {action }
pattern(action }
awk的基本操作是在由输入行组成的序列中，陆续地扫描每一行，搜索可以被模式匹配（match）的行.
“匹配”的精确含义依赖于问题中的模式，比如，对于$3》0，意味着“条件为真”
3
每一个输入行轮流被每一个模式测试.每匹配一个模式，对应的动作（可能包含多个步骤）就会执行.
然后下一行被读取，匹配重新升始，这个过程会一起持续到所有的输入被读取完毕为止。
上面的程序是模式与动作的典型例子.程序
$3 == 0{print $1}
由一条单独的模式-动作语句组成：如果某行的第3个字段为0，郡么它的第1个字段就会被打印出来，
在一个模式一动作语句中，模式或动作可以省略其一，但不能两者同时被省略，如果一个模式没有
动作，例如
$3 == 0
会将每一个匹配行（也就是条件判断为真的行）打印出来，这个程序将文件emp.data中第3个字段为
0的两行打印出来：
Beth4.000
Dan3.75
如果只有动作而没有模式，例如
---
## Page 11
第一章快速入门
3
{ print $1 }
对于每一个输入行，动作（在这个例子里是打印第1个字段）都会被执行
因为模式与动作都是可选的，所以用花括号将动作包围起来，以便区分两者，
运行AWK程序
运行一个awk程序有多种方式.可以键入下面这种形式的命令
sapyndu, uoufoud,xme
这个命令对指定的输入文件的每一行，执行program.例如你可以键入
来打印文件file1与file2的每一行的第一个字段（条件是该行的第3个字段为0）
也可以在命令行上省略输入文件，只要键入
dod,
在这种情况下，awk会符program应用到你接下来在终端输入的内容上面，直到键入一个文件结束标志
(Unix系统是组合键control-d).下面是一个在Unix上运行的例子
4
$ awk'$3 == 0{ print $1 }′
Beth
4.00
Beth
Dan
3 . 75
0
Dan
Kathy
3.75
10
Kathy
3.75
0
Kathy
...
由awk打印的字符加粗显示
这种行为对测试awk程序来说非常方便：键入程序与数据，检查程序的输出，我们再次建议读者运
行并修改书中的程序.
注意到，命令行中的程序被单引号包圈，这个规定可以防止程序中的字符（例如S）被shell解释，也
可以让程序的长度多于一行
当程序的长度比较短时（只有几行），这种安排会比较方便.如果程序比较长，更好的做法是将它们放
在一个单独的文件中，如果文件名是progfile的话，运行时只要键入
awk -f progfile optional list of files
选项-f告诉awk从文件中提取程序.在progfile出现的地方可以是任意的文件名，
---
## Page 12
第一章快速入门
错误
如果你在awk程序犯了一个错误，awk会显示一个诊断信息.例如，如果打错了一个花括号，就像
这样
epd.1ud]0==.me
将会打印一条这样的消息
awk: syntax error at source line 1
context 1s
>>>1>><<<标记.“Bailingout”
意味着无法恢复，有时候可以得到更多的关于错误的信息，例如，错误信息报告了一个不匹配的花括号或
括号。
由于发生了语法错误，awk不会尝试执行这个程序，然而有些错误直到运行时才会检测到.例如，程
序尝试用0作除数，这时候awk会停止处理，接着报告输入行的行号，以及程序中尝试进行除法运算的
代码所在的行号
1.2简单的输出
5
本章的余下部分包含了一系列简短并且典型的awk程序，这些程序都是对文件emp.data进行处
理，我们会简单地介绍这些程序是怎么工作的，但这些例子主要用于阐述有用的操作，这些操作很客易用
awk完成，包括打印字段，选择输入，以及变换数据，我们不会展现awk所能做的所有事情，也不会对细
节作过多的解释，但是闭读完这一章，读者将有能力利用awk完成相当数量的工作，而且会发现阅读后
面的章节变得更加容易
我们只将程序的主体显示出来，而不是完整的命令行，在每一种情况下，程序或者可以被包围在一对
单引号中，作为awk命令的第一个参数来运行，也可以将其放入一个文件中，通过带有-f选项的awk
命令来运行。
awk的数据只有两种类型：数值与由字符组成的字符事.文件emp.data是很典型的待处理数据，
它既含有单词，也包括数值，且字段之间通过制表符或空格分隔。
awk从它的输入中每次读取一行，将行分解为一个个的字段（默认将字段看作是非空白字符组成的
序列）.当前输入行的第一个字段叫作$1，第二个是S2，依次类推，一整行记为$0.每行的字段数有可能
不一样.
通常情况下，我们需要做的是打印每一行的部分或全部字段，也可能会做一些计算，这一节中的所有
程序都是这种形式.
---
## Page 13
第一章快速入门
b
打印每一行
如果一个动作没有模式，对于每一个输入行，该动作都会被执行.语句print会打印每一个当前输
入行，所以程序
{print }
会将它所有的输入打印到标准输出。因为S0表示一整行，所以程序
{ print $0 }
完成同样的工作
打印某些字段