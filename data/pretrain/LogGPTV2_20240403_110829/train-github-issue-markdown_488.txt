 **TypeScript Version:**
nightly (1.9.0-dev.20160303)
**Code**
    interface Foo {
        foo( key: string ): string;
        foo( keys: string[] ): string[];
    }
    declare var foo: Foo;
    declare const bar: string|string[];
    const baz = foo.foo( bar );
**Expected behavior:**  
The code is valid and compiles without warning, because interface `Foo`
contains a signature for a method `foo` corresponding to each type in the
union `string|string[]`. The `foo` method can accept a parameter list of
`string`, and it can also accept a parameter list of `string[]`, therefore an
argument list of `string|string[]` is satisfiable.
I would expect the return type for `foo.foo` invoked in this faction to be the
type union of the return types of all matching signatures (so
`string|string[]`). This code produces the same error even if all matching
signatures have the same return type.
**Actual behavior:**  
`Argument of type 'string | string[]' is not assignable to parameter of type
'string[]' Type 'string' is not assignable to type 'string[]'.`