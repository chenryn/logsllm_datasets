Awk patterns are good for selecting interesting lines from the input for
further processing. Since a pattern without an action prints all lines matching
the pattern, many awk programs consist of nothing more than a single pattern.
This section gives some examplcs of useful patterns.
Selection by Comparison
This program uses a comparison pattern to selcct the records of employees
who earn $5.00 or more per hour, that is, lines in which the second field is
greater than or cqual to 5:
$2 >= 5
It sclects these lines from emp . data:
Mark
5.00
20
Mary
5.50
22
Selection by Computation
The program
s2。$3>50 {printf（"s%.2f for %s\n",$2·s3,$1) }
prints the pay of those employees whose total pay exceeds S50:
$100.00 for Mark
$121.00 for Mary
$76.50 for Susie
SelectionbyTextContent
or phrases. This program prints all lines in which the first field is Susie:
$1 o "Susie"
The operator == tests for equality. You can also look for text containing any of
This program prints allines that contain Susie anywhere:
a set of letters, words, and phrases by using patterns called regular expressions.
---
## Page 21
10
AN AWK TUTORIAL
CHAPTER 1
/Susie/
The output is this line:
Su8ie4.25
18
Regular expressions can be used to specify much more elaborate patterns; Sec-
tion 2.1 contains a full discussion.
Combinations of Patterns
Patterns can be combined with parentheses and the logical operators &&, 11,
and 1, which stand for AND, OR, and NOT. The program
$2 >= 4 11 $3 >= 20
prints those lines where $2 is at least 4 or $3 is at least 20:
4.00
Kathy
4.00
10
Mark
Kxen
5.00
5.50
20
22
Susie
4.25
Lines that satisfy both conditions are printed only once. Contrast this with the
following program, which consists of two patterns:
$2 >= 4
$3 >= 20
This program prints an input line twice if it satisfies both conditions:
Beth
4.00
Kathy
4.00
。
5.00
10
Mark
20
Mark
Mary
5.50
5.00
20
Mary
5.50
4.25
22
Susie
18
Note that the program
1($2 10
（print so，
$3 60
If there are no errors, there's no output.
BEGiN and END
The special pattern BEGIN matches before the first line of the first input file
is read, and END matches after the last line of the last file has been processed.
This program uses BEGIN to print a heading:
BEGIN ( print “NAME
RATE
HOURs";print ""}
(print)
The output is:
NAME
RATE
HOURS
Dan
4.00
3.75
0
Kathy
4.00
5.00
10
Mark
20
Mary
Susie
4.25
5.50
22
18
You can put several statements on a single line if you separate them by semi
colons. Notice that print "" prints a blank line, quite different from just
plain print, which prints the current input line.
1.5 Computing withAwK
An action is a sequence of statements separated by newlines or semicolons.
You have already seen examples in which the action was a single print state-
ment. This section provides examples of statements for performing simple
builtinvariables like NF,but you can create your ownvariables for performing
numeric and string computations. In these statements you can use not only the
calculations, storing data, and the like. In awk, user-created variables are not
declared.
Counting
This program uses a variable emp to count employees who have worked more
than 15 hours:
---
## Page 23
12AN AWK TUTORIAL
CHAPTER 1
$3 >15 (enp= emp + 1 )
For every line in which the third field exceeds 15, the previous value of emp is
incremented by 1. With emp . data as input, this program yields:
3 employees worked more than 15 hours
Awk variables used as numbers begin life with the value O, so we didn’t need to
initialize emp.
Computing Sums and Averages
To count the number of employees, we can use the built-in variable NR
which holds the number of lines read so far; its value at the end of all input is
the total number of lines read.
END (print NR,“enployees”}
s indino s
6 enployees
Here is a program that uses NR to compute the average pay:
{pay =pay +$2+$3 }
END{ print NR,“employees°
print "average pay is",pay/NR
print "total pay is”,_pay
The first action accumulates the total pay for all employees. The END action
prints
total pay is 337.5
6 enployees
average pay 1s 56.25
Clearly, printf could be used to produce neater output. There's also a poten-
tial error: in the unlikely case that NR is zero, the program will attempt to
divide by zero and thus will generate an error message.
Handling Text
One of the strengths of awk is its ability to handle strings of characters as
conveniently as most languages handle numbers. Awk variables can hold strings
of characters as well as numbers. This program finds the employee who is paid
the most per hour:
$2>maxrate（maxrate=$2;maxemp=s1）
It prints
---
## Page 24
SECTION 1.5
COMPUTING WITH AWK 13
highest hourly rate: 5.50 for Mary
In this program the variable maxrate holds a numeric value, while the variable
maxemp holds a string. (If there are several employees who all make the same
maximum pay, this program finds only the first.)
String Concatenation
New strings may be created by combining old ones; this operation is called
concatenation.The program
(nanes =names s1 *")
END ( print nanes )
and a blank to the previous value in the variable names. The value of names
is printed by the END action:
Beth Dan Kathy Mark Mary Susie
The concatenation operation is represented in an awk program by writing string
values one after the other. At every input line, the first statement in the pro-
gram concatenates three strings: the previous value of names, the first field,
and a blank; it then assigns the resulting string to names. Thus, after all input
lines have been read, names contains a single string consisting of the names of
all the employees, each followed by a blank. Variables used to store strings
begin life holding the null string (that is, the string containing no characters), so
in this program names did not need to be explicitly initialized.
Printing the Last Input Line
Although NR retains its value in an END action, s0 does not. The program
{last = s0 }
END ( print last }
is one way to print the last input line:
Susie4.25
18
Bullt-in Functions
We have already seen that awk provides built-in variables that maintain fre-
quently used quantities like the number of fields and the input line number.
Similarly. there are built-in functions for computing other useful values.
Besides arithmetic functions for square roots, logarithms, random numbers, and
the like, there are also functions that manipulate text. One of these is length,
which counts the number of characters in a string. For example, this program
computes the length of each person’s name:
---
## Page 25
14
AN AWK TUTORIAL
CHAPTER 1
(print s1，length(s1) )
The result:
Beth 4
Kathy 5
Dan3
Mark 4
Mary4
Susie 5
Counting Lines,Words, and Characters
This program uses length, NF, and NR to count the number of lines, words,
and characters in the input. For convenience, we'll treat each field as a word.
（nc =nc +1ength（$0)+1
&N + RU = AU
END ( print NR,"1ines,",nv,*words,",nc,“characters”}
The file emp.data has
6 1ines,18 words,77 characters
We have added one for the newline character at the end of each input line,
since $0 doesn’t include it.
1.6Control-FlowStatements
Awk provides an if-else statement for making decisions and several state-
ments for writing loops, all modeled on those found in the C programming
language. They can only be used in actions.
If-Else Statement
The following program computes the total and average pay of employecs
making more than S6.00 an hour. It uses an if to defend against division by
zero in computing the average pay.
$2 > 6（n =n +1;pay = pay +$2+$3 }
END
（if（n>0)
print n,“employees, total pay is”,pay,
"average pay is", pay/n
else
The output for emp. data is:
---
## Page 26
I NOLS
CONTROL-FLOW STATEMENTS
15
no enployees are paid more than $6/hour
In the if-else statement, the condition following the if is evaluated. If it is
true, the first print statement is performed. Otherwise, the second print
statement is performed.Note that we can continue a long statement over
several lines by breaking it after a comma.
While Statement
A while statement has a condition and a body. The statements in the body
are performed repeatedly while the condition is true. This program shows how
the value of an amount of money invested at a particular interest rate grows
over a number of years, using the formula value = amounr (1 + rate)rs
interest1- compute conpound interest
input:
amount rate years
output: conpounded value at the end of each year
f = 1
while (i  0){
print 1ine[1]
1 = 1 - 1
With emp. data, the output is
Susie
4.25
5.50
18
Mary
Mark
5.00
20
22
Kathy
Dan
3.75
4.00
10
4.00
0
Beth
---
## Page 28
SECTION 1.8
A HANDFUL OF USEFUL ONE-LINERS 17
Here is the same example with a for statement:
# reverse - print input in reverse order by line
{1ine[NR]= $0}renenber each input line
END ( for (i = NR; i > 0; i = i - 1)
print 1ine[1]
1.8 A Handful of Useful “One-liners”
Although awk can be used to write programs of some complexity, many use-
ful programs are not much more complicated than what we've seen so far. Here
is a collection of short programs that you might find handy and/or instructive.
Most are variations on material already covered.
1. Print the total number of input lines:
END ( print NR )
2. Print the tenth input line:
NR == 10
3. Print the last field of every input line:
(print sNF }
4. Print the last field of the last input line:
(field=$NF)
END ( print field }
5. Print every input line with more than four fields:
NF > 4
6. Print every input line in which the last field is more than 4:
SNF > 4
7. Print the total number of fields in all input lines:
END ( print nf }
(nf =nf +NF }
8. Print the total number of lines that contain Beth:
/Beth/(nlines =nlines +1}
END
(print nlines }
---
## Page 29
18
AN AWK TUTORIAL
CHAPTER 1
9. Print the largest first field and the line that contains it (assumes some
$ 1 is positive):
s1 >max (max = $1; maxline = $0 }
END
(print max,maxline }
10. Print every line that has at least one field:
NF > 0
11. Print every line longer than 80 characters:
length($0)> 80
12. Print the number of fields in every line followed by the line itself:
(print NF, $0 }
13. Print the first two fields, in opposite order, of every line:
{print $2,$1 }
14. Exchange the first two fields of every line and then print the line:
(temp = $1; $1=$2;$2= temp; print }
15. Print every line with the first field replaced by the line number:
{ $1 = NR; print }
16. Print every line after erasing the second field:
（$2 ="";print )
17. Print in reverse order the fields of every line:
(for （1 = NF; 1 > 0;1 = i - 1) printf(“%s ",$i)
printf("\n")
18. Print the sums of the fields of every line:
(gun = 0
for (i = 1; i <= NF; 1 = i + 1) sum = sum + $i
print sun
19. Add up all fields in all lines and print the sum:
{ for (1 = 1; i <= NF; 1 = 1 + 1) sum = sum + $i }
END ( print sum }
20. Print every line after replacing each field by its absolute value:
(for (i = 1; i <= NF; i = i + 1) if ($i < 0) $i = -$i
print
---
## Page 30
SECTION 1.9
WHAT NEXT?
19
1.9WhatNext?
You have now seen the essentials of awk. Each program in this chapter has
becn a sequence of pattern-action statements.Awk tests every input line
against the patterns, and when a pattern matches, performs the corresponding
include computation and formatted printing. Besides reading through your