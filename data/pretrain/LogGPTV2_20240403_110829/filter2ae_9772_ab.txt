了解了这些前置知识后再看POC就明白漏洞通告中的filename在哪了，就是我们上传的文件名。  
我们看到文件名:
    filename="t';id;echo '1_"
双引号之内的就是文件名，t';id;echo
'1_，熟悉的单引号，说明了filename会被写到''之中，注意到filename最后还有一个_,经测试之后，发现去掉_的话命令就无法执行成功，说明需要_来起一个引导作用。  
根据以上分析，最终确定了漏洞的发生点在上方所给截图的system调用中，接下来继续分析sub_13450函数  
先看三个函数:
    NAME
    cgiGetFiles - Returns a list of CGI file variables
    char **cgiGetFiles (s_cgi *parms);
    DESCRIPTION
    This routine returns a NULL terminated array of names of CGI file variables that are available.
    RETURN VALUE
    On success a NULL terminated array of strings is returned. The last element is set to NULL. If an error occurred or if no files variables are available NULL is returned.
    cgiGetFiles函数返回值为一个数组指针，最后一个元素会被设置为NULL
    NAME
    cgiGetFile - Return information of a CGI file variable
    s_file *cgiGetFile (s_cgi *parms, const char *name);
    DESCRIPTION
    This routine returns a pointer to a datastructure associated with the value of a CGI file variable. The pointer must not be freed.
    The s_file structure is declared as follows:
    typedef struct file_s {
        char   *name,
               *type,
               *filename,
               *tmpfile;
    } s_file;
    cgiGetFile函数返回值为s_file类型的指针
    NAME
    cgiEscape - HTML escape certain characters in a string
    char *cgiEscape (char *string);
    DESCRIPTION
    This function returns a pointer to a sanitised string. It converts  into HTML entities so that the result can be displayed without any danger of cross-site scripting in a browser. The result may be passed to free(3) after use. This routine is meant to be called before any user provided strings are returned to the browser.
    RETURN VALUE
    cgiEscape() returns a pointer to the sanitised string or NULL in case of error.
    cgiEscape函数就是防止xss攻击，将转换成html实体，返回一个字符串指针
首先先用cgiGetFiles获得一个文件数组指针，然后进入一个循环，使用cgiGetFile获取s_file类型的指针  
接着使用cgiEscape将filename进行html转义(filename位于s
_file结构体中的第三个，在32位机器下，char*类型的长度为4字节，因此+8就是filename的位置)，再从中寻找\_
，如果可以找到，就进入if代码块，之后就是将html转义之后的filename和/data/%s/%s/拼接，最后再和mkdir
-p命令拼接，所以最终形成的命令就是如下所示:
    mkdir -p /data/cvm/files/''
漏洞分析完毕，来实际测试一下:  
另外，在测试中发现传输数据的content-type不是必要的:  
这个漏洞也是一个未认证的命令执行。  
最后我们再看到1.5.1.2版本的固件是如何修复这个漏洞的:  
简单粗暴，直接过滤filename的值。
3.CVE-2020-19664  
漏洞通告:
    DrayTek Vigor2960 1.5.1 allows remote command execution via shell metacharacters in a toLogin2FA action to mainfunction.cgi.
根据描述，漏洞发生在toLogin2FA 动作中，通过字符串定位到对应函数:  
首先获取环境变量，HTTP_COOKIE、REMOTE_ADDR、HTTP_HOST，接着以HTTP_COOKIE作为参数传入sub_12864函数，跟进查看:  
如果参数1即HTTP_COOKIE的值存在的话就进入if代码块，假如我们是未认证用户，那么HTTP_COOKIE自然没有，直接返回-10。  
然后将sub_12864函数的返回值，也就是-10拷贝到dest中，接着将dest和HTTP_HOST作为参数一并传入sub_273B0函数，跟进查看:  
将a2，a3和/sbin/auth_check.sh
Interface拼接，其中a2为-10，a3为HTTP_HOST的值，然后将拼接完后的命令传入run_command函数，实现命令执行。  
但遗憾的是按照这个思路我无法实现命令执行，可能是思路不对。为了弄清楚到底是哪里出了问题，我选择对比固件查看不同点。  
目前最新固件版本为1.5.1.2，所以我使用1.5.1.1和1.5.1.2的固件进行对比，查看哪里进行了修复  
由于bindiff不支持高版本IDA，所以我使用[diaphora](https://github.com/joxeankoret/diaphora
"diaphora")这个IDA插件来进行比较，首先用IDA打开1.5.1.1版本的manfunction.cgi  
在IDA中选择File->Script file,然后选择diaphora.py，会弹出一个框:  
然后点击确定，会生成一个sqlite数据库文件  
再用IDA打开1.5.1.2版本的manfunction.cgi，打开diaphora.py  
在diff against那里选择1.5.1.1版本的sqlite数据文件  
最终会生成这样的页面:  
Ratio表示两个函数的相似度，我们从中找到toLogin2FA 动作要执行的函数:  
diff pseudo-code可以查看伪代码对比:  
对比很清晰，左边的是1.5.1.2的伪代码，右边的是1.5.1.1的，新版本对HTTP_COOKIE处理函数进行了修改:  
如果HTTP_COOKIE的值为空，那么经过处理后传入run_command的第二个则为NULL。  
但我依然不清楚该如何利用该漏洞，很可惜。  
根据这个[GitHub仓库](https://github.com/minghangshen/bug_poc
"GitHub仓库")描述的，我的大致方向应该是没问题的，如果有知道如何利用的师傅希望能告知，这里主要是说明一下我的一个思路。
4.CVE-2020-14993  
漏洞通告
    A stack-based buffer overflow on DrayTek Vigor2960, Vigor3900, and Vigor300B devices before 1.5.1.1 allows remote attackers to execute arbitrary code via the formuserphonenumber parameter in an authusersms action to mainfunction.cgi.
在1.5.1.1版本中，formuserphonenumber参数存在栈溢出  
通过字符串定位到函数:  
获取到formuserphonenumber的值，然后直接拷贝到栈上:  
确定了v31的大小之后就可以溢出了，并且经测试之后，vigor2960是没有开启ASLR和NX的，所以可以直接ret2shellcode，动态调试确定下来栈地址之后就能直接利用了。  
这个函数在authusersms动作中，利用起来比较麻烦，需要认证，可以看看这篇[文章](https://nosec.org/home/detail/4631.html
"文章")，在这里就不进行利用了。
5.总结  
draytek其实爆出来的漏洞不止这些，不过大都是认证后的，最危险的还是CVE-2020-8515和CVE-2020-15415这两个不需要认证的漏洞。  
公网上draytek的数量还是很大的，仅仅只是vigor2960就存在两万多条IP。  
6.参考链接  