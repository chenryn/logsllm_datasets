}
// Adjust trace table size, if not within minimum/maximum limits
if (trcWork.traceSize  256)
trcWork.traceSize = 256; // Can be at most 256 pages
// Convert from number of pages to number of bytes
trcWork.traceSize = trcWork.traceSize * 4096;
...
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 119 of 137
Later during the system startup, pmap_bootstrap() [osfmk/ppc/pmap.c] reserves physical memory
for the trace table.
// osfmk/ppc/pmap.c
void
pmap_bootstrap(uint64_t memsize, vm_offset_t *first_avail, unsigned int kmapsize)
{
...
trcWork.traceCurr = (unsigned int)addr; // set first trace slot to use
trcWork.traceStart = (unsigned int)addr; // set start of trace table
trcWork.traceEnd = (unsigned int)addr + trcWork.traceSize; // set end
...
}
As we noted earlier, low tracing is performed through the CutTrace() system call, a firmware call
that is also an ultra-fast trapit is handled in osfmk/ppc/lowmem_vectors.s (in fact, before any other
ultra-fast trap). The firmware call interface provides a stub, dbgTrace() [osfmk/ppc/Firmware.s],
to call CutTrace().
; osfmk/ppc/Firmware.s
;
; dbgTrace(traceID, item1, item2, item3, item4)
;
.align 5
.globl EXT(dbgTrace)
LEXT(dbgTrace)
mr r2,r3 ; trace ID
mr r3,r4 ; item1
lis r0,HIGH_ADDR(CutTrace) ; top half of firmware call number
mr r4,r5 ; item2
mr r5,r6 ; item3
ori r0,r0,LOW_ADDR(CutTrace) ; bottom half
mr r6,r7 ; item4
sc ; invoke the system call
blr ; done
Various portions of the kernel add low-trace records either by calling dbgTrace() or by directly
invoking the CutTrace() system call. In the latter case, the trace identifier is passed in GPR2. Figure
649 shows an example of kernel code creating a low-trace record.
Figure 649. An example of low-trace record generation by kernel code
// osfmk/ipc/ipc_kmsg.c
mach_msg_return_t
ipc_kmsg_get(mach_vm_address_t msg_addr,
mach_msg_size_t size,
ipc_kmsg_t *kmsgp)
{
...
#ifdef ppc
if (trcWork.traceMask)
dbgTrace(0x1100,
(unsigned int)kmsg->ikm_header->msgh_id,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 120 of 137
(unsigned int)kmsg->ikm_header->msgh_remote_port,
(unsigned int)kmsg->ikm_header->msgh_local_port,
0);
#endif
...
}
A low-trace record is a structure of type LowTraceRecord, which is declared in
osfmk/ppc/low_trace.h. Information contained in a LowTraceRecord structure includes the
following:
Processor number
Exception code
Upper and lower parts of the Timebase Register
Contents of the following registers: CR, DSISR, SRR0, SRR1, DAR, LR, CTR, and GPRs 0
through 6
Save area
A convenient way to view low-trace records is through the built-in kernel debugger KDB, whose lt
command formats and displays these records.
db{0}> lt 0
...
00ADEA80 0 00000002 FD6D0959 - 0C00
DAR/DSR/CR: 00000000A000201C 40000000 84024A92
SRR0/SRR1 00000000000D6D00 1000000000001030
LR/CTR 00000000000D61F4 00000000000344A8
R0/R1/R2 FFFFFFFF80000000 000000001759BD00 0000000000004400
R3/R4/R5 0000000002626E60 000000000002CD38 0000000001E5791C
R6/sv/rsv 000000002FD78780 0000000000000000 00000000
...
6.9. Virtual Machine Monitor
The Mac OS X kernel (PowerPC) implements a virtual machine monitor (VMM) facility, which a
user-space program can use to dynamically create and manipulate virtual machine (VM) contexts.
Each VM instance has its own processor state and address space, both of which are controlled by the
VMM. A program executing in a VM is referred to as a guest. The facility is primarily implemented
in the vmachmon.h, vmachmon.c, and vmachmon_asm.s files within the osfmk/ppc/ directory. The
files osfmk/ppc/hw_vm.s and osfmk/ppc/hw_exception.s also contain support code for the VMM
facility.
Let us revisit Figure 68, in which we saw that a thread's machine-dependent statethe machine_thread
structure [osfmk/ppc/thread.h]contains pointers to VMM control table (vmmCntrlTable) and
VMM control table entry (vmmCntrlEntry) structures. vmmCntrlTable is non-NULL for a thread that
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 121 of 137
is using the VMM facility. When the thread is running a VM, its vmmCntrlEntry points to the current
emulation context but is NULL otherwise. Figure 650 shows these data structures.
Figure 650. Control data structures for the VMM facility
// osfmk/ppc/vmachmon.h
#define kVmmMaxContexts 32
...
typedef struct vmmCntrlEntry {
unsigned int vmmFlags; // Assorted control flags
unsigned int vmmXAFlgs; // Extended Architecture (XA) flags
// Address of context communication area
vmm_state_page_t *vmmContextKern; // Kernel virtual address
ppnum_t vmmContextPhys; // Physical address
vmm_state_page_t *vmmContextUser; // User virtual address
facility_context vmmFacCtx; // Header for VMX and FP contexts
pmap_t vmmPmap; // Last dispatched pmap
uint64_t vmmTimer; // Last set timer value (0 if unset)
unsigned int vmmFAMintercept; // FAM intercepted exceptions
} vmmCntrlEntry;
typedef struct vmmCntrlTable {
unsigned int vmmGFlags; // Global flags
addr64_t vmmLastMap; // Last vaddr mapping mode
// An entry for each possible VMM context
vmmCntrlEntry vmmc[kVmmMaxContexts];
pmap_t vmmAdsp[kVmmMaxContexts]; // Guest address space maps
} vmmCntrlTable;
...
For each VM, the VMM allocates a page of memory for holding the VM's context communications
area, which is accessed both as a vmm_comm_page_t structure and a vmm_state_page_t structurethe
former embeds the latter.
// osfmk/ppc/vmachmon.h
typedef struct vmm_comm_page_t {
union {
vmm_state_page_t vmcpState; // Reserve area for state
unsigned int vmcpPad[768]; // Reserve state for 3/4 page state area
} vmcpfirst;
unsigned int vmcpComm[256]; // Last 1024 bytes used as a communications
// area in a function-specific manner
} vmm_comm_page_t;
...
A VM's processor state is stored in a vmm_processor_state_t structure within a vmm_state_page_t
structure. A vmm_processor_state_t includes the processor's general-purpose, floating-point,
vector, and special-purpose registers. Note that the vmcpComm field of the vmm_comm_page_t structure
is used as a general-purpose communications buffer by several VMM functions. For example, the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 122 of 137
vmm_map_list function, which maps a list of pages into a guest address space, reads the list of pages
as a sequence of { host virtual address, guest virtual address } pairs from vmcpComm.
6.9.1. Features
The specific features provided by the VMM facility on a system depend on the host processor and the
facility's version. The following are examples of VMM features.
 kVmmFeature_LittleEndian The VMM supports a VM to be run in little-endian mode. This
feature is available only on PowerPC processors that implement the optional little-endian
facility. Therefore, it is unavailable on G5-based systems.
 kVmmFeature_Stop The VMM supports stopping and resuming VMs.
 kVmmFeature_ExtendedMapping The VMM supports extended protection modes for address
space mappings.
 kVmmFeature_ListMapping The VMM supports mapping a list of pages into and unmapping a
list of pages from guest address spaces.
 kVmmFeature_FastAssist The VMM supports an optimization called fast assist mode (FAM).
In this mode, the ultra-fast-path VMM system calls are valid. As noted in Table 615, the calls
are handled by vmm_ufp() [osfmk/ppc/vmachmon_asm.s], which ensures that the incoming
system call number is within the range of calls designated as FAM calls (kVmmResumeGuest
tHRough kVmmSetGuestRegister).
 kVmmFeature_XA The VMM supports getting and setting extended architecture (XA) flags in
the control table entry of each VM context controlled by it.
 kVmmFeature_SixtyFourBit The VMM provides 64-bit support on 64-bit host processors.
 kVmmFeature_MultAddrSpace The VMM allows multiple address spaces, with each address
space capable of handling the maximum virtual address supported by the host processor. A
guest VM may be launched using any one address space.
6.9.2. Using the VMM Facility
The VMM facility exports its functionality through routines such as those for initializing a VM
context (vmm_init_context), releasing a VM context (vmm_tear_down_context), and mapping a
page from the host address space to a guest address space (vmm_map_page). Most of these routines do
not have corresponding stubs in a user-space library; they are accessed using a dispatcher routine
(vmm_dispatch), which does have a user-space stub. When the C library is compiled, it picks up
assembly stubs for Mach trapsincluding VMM-related trapsfrom header files such as
 and .
$ nm -oj /usr/lib/libSystem.dylib | grep -i vmm
/usr/lib/libSystem.dylib:mach_traps.So:_vmm_dispatch
/usr/lib/libSystem.dylib:mach_traps.So:_vmm_get_features
/usr/lib/libSystem.dylib:mach_traps.So:_vmm_get_version
/usr/lib/libSystem.dylib:mach_traps.So:_vmm_init_context
/usr/lib/libSystem.dylib:mach_traps.So:_vmm_stop_vm
The vmm_dispatch() system call allows all exported VMM routines to be invoked from user space.
The index of the desired routine is passed as the first argument to vmm_dispatch(), followed by
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 123 of 137
arguments specific to that function. Here is an example of what using the VMM facility looks like.
// Get VMM version
version = vmm_dispatch(kVmmGetVersion);
...
// Get VMM features to know what we may or may not use
features = vmm_dispatch(kVmmGetFeatures);
// Allocate page-aligned memory for use with the VMM/VMs
kr = vm_allocate(myTask, &vmmCommPage, pageSize, TRUE);
...
kr = vm_allocate(...);
...
// Initialize a new VM context
kr = vmm_dispatch(kVmmInitContext, version, vmmCommPage);
// Set up the VM's initial processor state
...
// Map pages, or page lists, into the VM's address space
// Actual pages to map are in a separate "communication" page
kr = vmm_dispatch(kVmmMapList, vmmIndex, nPages, is64bit);
// Launch the VM
// Mapping a page and setting the VM running can be combined
kr = vmm_dispatch(kVmmMapExecute, vmmIndex, aPage, vAddress, protectionBits);
// Handle things when control comes back to the VMM
...
// Stop and resume the VM
...
// Tear down the VM context
kr = vmm_dispatch(kVmmTearDownContext, vmmIndex);
6.9.3. Example: Running Code in a Virtual Machine
Let us now look at a real programming example of using the VMM facility. In our program,
vmachmon32, we will perform the following sequence of steps.
 Retrieve the VMM version and feature set supported by the kernel using vmm_get_version()
and vmm_get_features(), respectively.
 Allocate page-aligned memory using Mach's vm_allocate() memory allocation function.
Specifically, we will allocate a page for the VM's state, a page for the VM's stack, and a page
for the VM's text (code).
Set the VM's program counter to the beginning of the text page.
Set the VM's stack pointer to the end of the stack page, while taking the Red Zone into account.
Populate the text page either with a handcrafted sequence of instructions or with machine code
for a function that calculates the factorial of its argument. We will obtain the function's
machine code by statically compiling its C source.
Map the stack page and the text page into the VM's address space.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 124 of 137
Set the VM running. When the VM runs out of code to execute, we will ensure that it returns to
the VMM by making the final instruction that it executes illegal.
Moreover, we will print the contents of several VM registers at the end of the program, which will
allow us to see the result of the code that the VM ran. You can run full-fledged programs (including
operating systems)rather than primitive codewithin a VM provided the resources needed for the
program to run are made available in the VM's address space.
Figure 651 shows the source for vmachmon32. It is liberally annotated with comments, including
further description of using the VMM facility.
Figure 651. A program to run machine code within a VM using the VMM facility
// vmachmon32.c
// Mac OS X Virtual Machine Monitor (Vmm) facility demonstration
#define PROGNAME "vmachmon32"
#include 
#include 
#include 
#include 
#include 
#include 
#ifndef _VMACHMON32_KLUDGE_
// We need to include xnu/osfmk/ppc/vmachmon.h, which includes several other
// kernel headers and is not really meant for inclusion in user programs.
// We perform the following kludges to include vmachmon.h to be able to
// compile this program:
//
// 1. Provide dummy forward declarations for data types that vmachmon.h
// needs, but we will not actually use.
// 2. Copy vmachmon.h to the current directory from the kernel source tree.
// 3. Remove or comment out "#include " from vmachmon.h.
//
struct savearea; // kludge #1
typedef int ReturnHandler; // kludge #1
typedef int pmap_t; // kludge #1
typedef int facility_context; // kludge #1
#include "vmachmon.h" // kludge #2
#endif
#define OUT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error("*** " msg ":" , kr); goto out; }
// vmm_dispatch() is a PowerPC-only system call that allows us to invoke
// functions residing in the Vmm dispatch table. In general, Vmm routines
// are available to user space, but the C library (or another library) does
// not contain stubs to call them. Thus, we must go through vmm_dispatch(),
// using the index of the function to call as the first parameter in GPR3.
//
// Since vmachmon.h contains the kernel prototype of vmm_dispatch(), which
// is not what we want, we will declare our own function pointer and set
// it to the stub available in the C library.
//
typedef kern_return_t (* vmm_dispatch_func_t)(int, ...);
vmm_dispatch_func_t my_vmm_dispatch;
// Convenience data structure for pretty-printing Vmm features
struct VmmFeature {
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 125 of 137
int32_t mask;
char *name;
} VmmFeatures[] = {
{ kVmmFeature_LittleEndian, "LittleEndian" },
{ kVmmFeature_Stop, "Stop" },
{ kVmmFeature_ExtendedMapping, "ExtendedMapping" },
{ kVmmFeature_ListMapping, "ListMapping" },