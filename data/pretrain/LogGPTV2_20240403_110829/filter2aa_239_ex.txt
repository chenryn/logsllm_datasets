图30-10中的第一个按钮使用了SolidColorBrush，顾名思义，这支画笔使用纯色。全
部区域用同一种颜色绘制。
把Background特性设置为定义纯色的字符串，就可以定义纯色。使用
BrushValueSerializer把该字符串转换为一个SolidColorBrush元素（代码文件Brushes[WPF |
UWP]/Main[Window | Page].xaml）。
    Solid Color
当然，通过设置Background子元素把SolidColorBrush元素添加为它的内容（代码文件
BrushesDemo/ MainWindow.xaml），也可以得到同样的效果。应用程序中的第一个按钮使
用十六进制值用作纯背景色：
30.5.2 LinearGradientBrush
对于平滑的颜色变化，可以使用LinearGradientBrush，如图30-10的第二个按钮所示。
这个画笔定义了StartPoint和EndPoint属性。使用这些属性可以为线性渐变指定2D坐标。默
认的渐变方向是从（0,0）到（1,1）的对角线。定义其他值可以给渐变指定不同的方向。
例如，StartPoint指定为（0,0）, 
EndPoint指定为（0,1），就得到了一个垂直渐变。
StartPoint不变，EndPoint值指定为（1,0），就得到了一个水平渐变。
通过该画笔的内容，可以用GradientStop元素定义指定偏移位置的颜色值。在各个偏
移位置之间，颜色是平滑过渡的（代码文件Brushes[WPF 
| 
UWP]/ 
Main[Window 
|
Page].xaml）。
30.5.3 ImageBrush
要把图像加载到画笔中，可以使用ImageBrush元素。通过这个元素，显示
ImageSource属性定义的图像。图像可以在文件系统中访问，或从程序集的资源中访问。
在代码示例中，添加文件系统中的图像（代码文件Brushes[WPF | UWP]/Main[Window |
Page].xaml）：
30.5.4 WebViewBrush
只能用于UWP应用程序的一个强大画笔是WebViewBrush。这个画笔使用WebView的
内容作为画笔。
使用WebView控件，可以使用应用程序分布的一个本地HTML文件，并使用ms-appx-
web作为前缀，如示例代码所示（代码文件BrushesUWP/MainPage.xaml）：
除了使用应用程序分布的文件之外，还可以上网使用http://检索HTML文件。使用ms-
appdata:/ / /前缀时，可以使用本地文件系统中的文件。
WebViewBrush通过SourceName属性引用WebView：
WebViewBrush在加载XAML时绘制。如果WebView那时没有加载源，画笔就需要重
绘。所以WebView定义了LoadCompleted事件。利用与该事件相关联的事件处理程序，调
用Redraw方法来重绘WebViewBrush，把WebView的Visibility属性设置为Collapsed。如果
WebView控件从一开始就是折叠的，画笔就不会显示HTML内容（代码文件BrushesUWP /
MainPage.xaml.cs）：
    private void OnWebViewCompleted(object sender, NavigationEventArgs e)
    {
      webViewBrush.Redraw();
      webView1.Visibility = Visibility.Collapsed;
    }
30.5.5 只用于WPF的画笔
前一节讨论的WebViewBrush只能用于UWP应用程序，下面介绍只能用于WPF的画
笔。以下描述的所有画笔都只能用于WPF。图30-11显示了只用于WPF的画笔
RadialGradientBrush、DrawingBrush和VisualBrush（两次）。下面从RadialGradientBrush开
始。
图30-11
1. RadialGradientBrush
RadialGradientBrush类似于LinearGradientBrush，因为它可以定义一组颜色，获得渐变
效果。使用RadialGradientBrush可以以放射方式产生平滑的颜色渐变。在图30-11中，最左
边的元素Path使用了RadialGradientBrush。该画笔定义了从GradientOrigin点开始的颜色
（代码文件BrushesWPF/MainWindow.xaml）。
2. DrawingBrush
DrawingBrush可以定义用画笔绘制的图形。图30-11中的按钮带有Content 
value
Drawing Brush内容，它使用DrawingBrush定义了背景。这个画笔利用了GeometryDrawing
元素。GeometryDrawing又使用了两个SolidColorBrush元素：一个红色，一个蓝色。红色
画笔作为背景，蓝色画笔用于钢笔，得到geometry元素周围的笔触。GeometryDrawing的
内容由PathGeometry定义，PathGeometry参见本章前面所讨论的“几何图像”部分（代码文
件BrushesWPF/MainWindow.xaml）：
                  Blue
3. VisualBrush
VisualBrush可以在画笔中使用其他XAML元素。下面示例（代码文件
BrushesWPF/MainWindow.xaml）给Visual属性添加一个StackPanel，其中包含Rectangle和
Button元素。图30-11中左边的第3个元素包含一个矩形和一个按钮。
可以给VisualBrush添加任意UIElement。一个例子是可以使用MediaElement播放视
频：
在VisualBrush中，还可以创建反射等有趣的效果。这里显示的按钮（图30-11中的最
右边）包含一个StackPanel，它包含一个播放视频的MediaElement和一个Border。Border边
框包含一个用VisualBrush填充的矩形。这支画笔定义了一个不透明值和一个变换。把
Visual属性绑定到Border元素上。变换通过设置VisualBrush的RelativeTransform属性来完
成。这个变换使用了相对坐标。把ScaleY设置为-1，完成Y方向上的反射。
TranslateTransform在Y方向上移动变换，从而使反射效果位于原始对象的下面。
  注意： 这里使用的数据绑定和Binding元素详见第31章。
在后台代码中，按钮的单击事件处理程序启动视频（代码文件
BrushesWPF/MainWindow.xaml.cs）：
    private void OnMediaButtonClick(object sender, RoutedEventArgs e)
    {
      media1.Position = TimeSpan.FromSeconds(0);
      media1.Play();
    }
结果如图30-12所示。
图30-12
30.6 样式和资源
设置XAML元素的FontSize和Background属性，就可以定义XAML元素的外观，如
Button元素所示（代码文件StylesAndResources[WPF 
| 
UWP]/Main[Window 
|
Page].xaml）：
除了定义每个元素的外观之外，还可以定义用资源存储的样式。为了完全定制控件的
外观，可以使用模板，再把它们存储到资源中。
30.6.1 样式
控件的Style属性可以赋予附带Setter的Style元素。Setter元素定义Property和Value属
性，并给目标元素设置指定的属性和值。下例设置Background、FontSize、FontWeight和
Margin属性。把Style设置为TargetType 
Button，以便直接访问Button的属性（代码文件
StylesAndResources[WPF |UWP]/Main[Window | Page].xaml）。
直接通过Button元素设置Style对样式的共享没有什么帮助。样式可以放在资源中。在
资源中，可以把样式赋予指定的元素，把一个样式赋予某一类型的所有元素，或者为该样
式使用一个键。要把样式赋予某一类型的所有元素，可使用Style的TargetType属性，将样
式赋予一个按钮。要定义需要引用的样式，必须设置x:Key：
在样例应用程序中，在页面或窗口中全局定义的样式放在UWP应用程序的
中，或者WPF的中。
在下面的XAML代码中，第一个按钮没有用元素属性定义样式，而是使用为Button类
型定义的样式。对于下一个按钮，把Style属性用StaticResource标记扩展设置为
{StaticResource ButtonStyle}，而ButtonStyle指定了前面定义的样式资源的键值，所以该按
钮的背景为红色，前景是白色。
除了把按钮的Background设置为单个值之外，还可以将Background属性设置为定义了
渐变色的LinearGradientBrush，如下所示：
本例中下一个按钮的样式采用青色的线性渐变效果：
    <Button Width="200" Content="Fancy button style"