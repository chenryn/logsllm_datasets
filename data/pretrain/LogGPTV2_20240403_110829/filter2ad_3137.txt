# Title: MANIAC: A Man-Machine Collaborative System for Classifying Malware Author Groups

## Authors
- Eujeanne Kim, Hanyang University, Seoul, Republic of Korea
- Sung-Jun Park, Hanyang University, Seoul, Republic of Korea
- Seokwoo Choi, The Attached Institute of ETRI, Daejeon, Republic of Korea
- Dong-Kyu Chae*, Hanyang University, Seoul, Republic of Korea
- Sang-Wook Kim*, Hanyang University, Seoul, Republic of Korea

*Co-corresponding authors

## Abstract
In this demonstration, we present MANIAC, a man-machine collaborative system designed for the classification of malware author groups. This system is developed to counteract the proliferation of new malwares by groups that share source code and employ evasive techniques such as polymorphism and metamorphism. MANIAC allows users to intervene in the model's classification process, particularly in cases of high uncertainty. It also provides effective interfaces and visualizations to maximize classification accuracy with minimal human effort.

## CCS Concepts
- Human-centered computing → Visualization systems and tools
- Security and privacy → Software and application security

## Keywords
Malware authors, malware classification, interactive classification

## ACM Reference Format
Eujeanne Kim, Sung-Jun Park, Seokwoo Choi, Dong-Kyu Chae, and Sang-Wook Kim. 2021. MANIAC: A Man-Machine Collaborative System for Classifying Malware Author Groups. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485355

## 1. Introduction
Recent years have seen a significant increase in malware attacks, causing substantial damage to home users, businesses, and governments. Notably, many of these attacks are orchestrated by groups of malware authors, such as Advanced Persistent Threat (APT) groups, who follow orders from specific countries [9, 11]. These groups often share and modify source code to create new malwares, making it easier to evade existing anti-malware systems [9].

To address this threat, we developed MANIAC, a web-based system that combines machine learning and human expertise to classify malware author groups. MANIAC provides a graphical user interface (GUI) for users to upload and analyze their malwares, and it includes features that allow users to participate in the classification process. The system is particularly useful for cybersecurity professionals with domain knowledge about malware. MANIAC offers several key advantages over existing tools:
1. It focuses on identifying malware author groups.
2. It enables user intervention to reduce misclassification.
3. It provides informative visualizations to enhance user understanding and reduce labor.

## 2. Classification Server
The classification server in MANIAC performs two main tasks: analyzing and embedding uploaded malwares, and classifying them based on these embeddings. After users upload binary files, the server conducts both static and dynamic analyses to extract features. Static features include imports, exports, printable strings, and function chunks [4], while dynamic features include system API calls, network requests, filesystem addresses, registry keys, and Mutex names [6].

Each malware is represented as a set of feature values, and the server learns embeddings using a training set and the uploaded malwares. The goal is to place malwares with similar characteristics close to each other in a shared latent space. This is achieved by constructing a bipartite graph and applying the DeepWalk model [10] to learn embeddings.

For classification, the server finds the nearest neighbor of each uploaded malware in the latent space and assigns the corresponding author group label. If the prediction is not confident, the server flags it as "ambiguous." Confidence is measured by evaluating the distance between the target malware and its nearest neighbors within and across author groups. Ambiguous cases are marked and presented to users for manual classification.

## 3. Demonstration Scenarios
Figure 1 shows a screenshot of MANIAC. Users can upload malware binaries via the "File" button (A). The server then analyzes and classifies the malwares, and the results are displayed in the left panel (C). Each row represents a malware, with columns indicating the case type, nearest neighbor, and predicted label. Ambiguous cases are highlighted, and users can manually classify them by selecting the appropriate button (G).

Users can also view visualized information in various forms (F), such as box plots, violin plots, and scatter plots, to aid in the classification process. The visualization helps users make informed decisions quickly, even for ambiguous cases. For example, if the nearest neighbor of an ambiguous case is an outlier, the user can compare distances to other nearest neighbors to determine the correct author group.

## 4. Performance Evaluation
To evaluate MANIAC's effectiveness, we conducted a leave-one-out cross-validation with three human experts. Each expert used MANIAC to classify one malware from a dataset of 1,941 samples, with the rest serving as the training set. The majority vote of the experts was also tested. Table 1 shows the macro-F1 and micro-F1 scores, demonstrating that MANIAC, when combined with human expertise, achieves significantly higher accuracy compared to standalone MANIAC.

## 5. Acknowledgments
This work was supported by the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No. 2020-0-01373, Artificial Intelligence Graduate School Program (Hanyang University)). It was also supported by the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIT) (No. NRF-2020R1A2B5B03001960 and No. 2018R1A5A7059549).

## References
[1] D. Bilar. 2007. Opcodes as predictor for malware. International Journal of Electronic Security and Digital Forensics 1, 2 (2007), 156–168.
[2] D.-K. Chae et al. 2013. Software plagiarism detection: a graph-based approach. In ACM CIKM. 1577–1580.
[3] S. Chakkaravarthy, D. Sangeetha, and V. Vaidehi. 2019. A Survey on malware analysis and mitigation techniques. Computer Science Review 32 (2019), 1–23.
[4] G. Costantini, P. Ferrara, and A. Cortesi. 2011. Static analysis of string values. In International Conference on Formal Engineering Methods. 505–521.
[5] F. M. Dekking et al. 2005. A Modern Introduction to Probability and Statistics: Understanding why and how. Springer Science & Business Media.
[6] M. Egele et al. 2008. A survey on automated dynamic malware-analysis techniques and tools. ACM computing surveys (CSUR) 44, 2 (2008), 1–42.
[7] A. Grégio et al. 2011. Behavioral analysis of malicious code through network traffic and system call monitoring. 8059 (2011), 80590O.
[8] Jiawei Han, Jian Pei, and Micheline Kamber. 2011. Data mining: concepts and techniques. Elsevier.
[9] J. Hong et al. 2019. Malware classification for identifying author groups: a graph-based approach. In ACM RACS. 169–174.
[10] B. Perozzi, R. Al-Rfou, and S. Skiena. 2014. Deepwalk: Online learning of social representations. In ACM SIGKDD. 701–710.
[11] D. Plohmann et al. 2017. Malpedia: a collaborative effort to inventorize the malware landscape. Proceedings of the Botconf (2017).