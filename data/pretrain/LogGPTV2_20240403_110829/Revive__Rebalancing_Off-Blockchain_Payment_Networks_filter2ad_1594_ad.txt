channels to the rebalancing with an added cost per dispute that
increases logarithmically in the number of involved channels. This
is due to the use of merkle trees when constructing the rebalancing
commitment. In case of dispute, the information required to be
evaluated on-chain is comprised of participant signatures, and a
merkle tree based proof of membership of a transaction in the
transaction set. The merkle tree of transaction sets would grow
in height logarithmically [20] as more transactions are added, and
thus the proof of membership would grow marginally longer. Per
Ethereum’s implementation we estimate that the state update cost
would grow by approximately 4,400 gas units per one level of height
increase in the transaction set merkle tree.
5.2.3 Linear Program Scalability. Linear Program Solvers are
highly e(cid:28)cient in practice. Even though some of their underlying
algorithms may have exponential complexity in the worst-case,
they were shown to converge in expected polynomial time of the
number of variables [24]. However, as e(cid:28)cient as these solvers
are in practice, there is no absolutely guaranteed time by which
they will terminate. As the problem size grows, the expected time
towards reaching a solution increases. For this reason, users of
Revive must be mindful of the underlying limitations, since the
linear programming model is the core of (cid:27)nding a satisfying set of
rebalancing transactions. Even when implemented over an under-
lying blockchain, or similar system, which has perfectly reliable
participants and inexpensive on-chain dispute resolution, scaling
the rebalancing instance to a signi(cid:27)cantly large number of payment
channels, more than tens of thousands, may come at the cost of a
very long time expenditure until the leader can generate a rebal-
ancing, at least on an average desktop computer. For this reason
we suggest that the linear program instances be concerned with
no more than a thousand payment channels, if not a few hundred,
if such a demand were to arise and if the underlying blockchain
would economically permit it (recall how dispute costs scale). If it is
indeed found necessary to scale beyond that, then the participants
should be split across several rebalancing instances, as at that scale
the di(cid:29)erences in optimality between global and local rebalances,
as explained in 3.5, should be trivially inconsequential compared
to the performance costs.
Besides our linear programming solution, other rebalancing ob-
jectives with more complex considerations could be explored. How-
ever, if the constraints become too complex, a non-linear solver
might be required, which could render the process ine(cid:28)cient, or less
scalable. We leave the exploration of further rebalancing objectives
for future work.
6 PROOF OF CONCEPT IMPLEMENTATION
To complement our protocol speci(cid:27)cation, we provide a working
proof of concept, implemented in Python. The POC contains scripts
that create a test blockchain network and some participants using
the pyethereum library, on top of which our protocol is simulated.
We also demonstrate how the mathematical model solutions can be
translated into rebalancing transactions compatible with a modi(cid:27)ed
version of the Sprites payment channel. The full source code can
be found in [25].
6.1 Modi(cid:27)ed Sprites Payment Channel
The (cid:27)rst component of our implementation is a modi(cid:27)ed version
of the Sprites [7] payment channel. Our modi(cid:27)cations include two
new features that are required for our protocol to proceed, and one
additional security (cid:27)x. In this section, we refer to the two source
(cid:27)les written in the Solidity smart contract language, su(cid:28)xed by
’.sol’.
6.1.1 Rebalance Challenge Contract. The contract de(cid:27)ned in
’challenge.sol’ (cf. Appendix 9.2) provides three main functionalities.
The (cid:27)rst of which is the ability to issue a subsidized availability
challenge against a rebalancing instance. The issuer of the challenge
must deposit an amount of funds that is proportional to the size
of the rebalancing instance in order to pay for another party to
respond to the challenge. While this is an optional design choice,
we determined the subsidization of the challenge to be the best
course of action since it prohibits a malicious participant from
issuing fake challenges with the intention of forcing one of the
other nodes to pay to respond to it. Instead, now only in the case of
a malicious leader would someone need to issue a challenge if the
full signature set is not made available. The second feature is the
ability to permanently settle the availability and correctness of a
rebalancing instance. This allows the instance to be used to update
the on-chain state of any involved payment channel, closes any
open challenges against it, and prohibits any future challenges from
being issued. The third feature is a simple check that allows any
other smart contract, such as a payment channel contract, to verify
whether a rebalancing instance has been veri(cid:27)ed for availability
and correctness.
6.1.2 Rebalance State Update. Because the two parties respon-
sible for a payment channel may not cooperatively sign the new
state resulting from a valid rebalancing, the payment channel needs
to be augmented so that it can accept a valid rebalancing, with full
signatures, as a state update. In ’channel.sol’ (cf. Appendix 9.2), we
added a new functionality to the Sprites payment channel contract
that allows a payment channel state to be updated on-chain after it
has been veri(cid:27)ed in the rebalancing contract. After validation of
the rebalancing instance, providing the signature of the counter-
party in a payment channel on that instance, and the rebalancing
transaction particular to the payment channel being updated, our
modi(cid:27)ed contract accepts the new balances as the latest state.
6.1.3
State Security Fix. One (cid:27)nal modi(cid:27)cation we made was
the addition of the payment channel contract address to the state of
the payment channel. The Sprites channel was constructed to accept
an update state sent by one party if that party could provide the
signature of the counter-party on that state. However, the state only
contained a round number and balance information, but nothing
that ties the state to one particular instance of a payment channel.
Therefore, if a party were involved in multiple payment channels,
their signature on the state of one of those channels could be used
to update another channel as long as the on-chain deposits were
not overdrawn by the update.
6.2 Simulation Cases
We present simulations of two di(cid:29)erent scenarios of mishaps that
may occur in practice, and how to respond to them within the
speci(cid:27)cation of the protocol while protecting user funds from being
stolen.
Setup. The simulations are initialized to re(cid:30)ect the example pre-
sented in Figure 2, where three participants can use Revive to
rebalance their payment channels, such that the end goal of each
participant is two channels with 50 credits in their favor, rather
than one with 100 and the other with 0.
6.2.1 On-chain Update. In this case, referred to as test ’simu-
lation_scenario_1’, the protocol produces a valid rebalancing that
is signed by everyone, and the signature set is made available to
all participants for enforcement. However, none of the participants
choose to collaboratively sign the individual transactions within the
rebalancing that are relevant to their payment channels. Therefore,
they all resort to publishing and validating the rebalancing instance
on-chain, and then using it to enforce a state update on their re-
spective payment channel. This case was designed to highlight
the e(cid:29)ect o(cid:29)-chain collaborative updates have on cutting expected
running costs of the protocol.
6.2.2 Availability Challenge. In ’simulation_scenario_2’, the full
signature set is made unavailable for one of the participants. While
a more mature implementation should include a means by which
any participant can reach out to any other in order to request the
full signature set if they have it, we simply highlight here that
even in case one participant was isolated, they can still insure their
funds. The isolated participant proceeds to issue the availability
challenge using the on-chain contract after having submitted their
signature on the rebalancing instance and not getting a response.
The main point that is highlighted here is that all honest parties are
incentivized to answer the challenge, because it is subsidized, and
in case the challenge expires the enforcement of their rebalancing
transactions are voided if they have not yet locked in the transac-
tions. We postulate that as long as there remains one honest party
with one payment channel with incoming funds not collaboratively
(cid:27)nalized, then it is in their best interest to answer the posted chal-
lenge in order to secure their funds. This example also stresses that
no two honest parties should collaboratively (cid:27)nalize a rebalancing
transaction on their payment channel unless both have knowledge
of the full signature set.
A simulation of our model’s e(cid:29)ects over pre-existing transac-
tion data from other sources would have further demonstrated its
practicality. Unfortunately, we are limited in how much we can
predict about the internal routing structures that would surface
in real routing networks due to a lack of data from their relative
novelty. Validating the simulation would therefore present a major
obstacle.
6.3 Model Solution Interpretation
In order to demonstrate how solutions to the mathematical models
we have provided can be translated into practical transactions, in
our case for the Sprites payment channel, we present an explanation
of the de(cid:27)nitions found in the ’linprog.py’ python (cid:27)le. The de(cid:27)ni-
tion of ’linear_program_solution_to_transactions’ is su(cid:28)cient to
translate the set of payment channel balance changes to a bundle of
equivalent directional transactions. The conversion is quite straight-
forward. If δu,v is positive then, as previously mentioned, funds
should be transferred from u to v. In case of our sprites adaptation,
we need to decrease the credits value of u, and increase that of v, in
order to portray a transfer from u to v. The converse takes place if
δv,u is negative.
7 RELATED WORK
In this section we survey related work.
Blockchain Satoshi Nakamoto presented with the invention of
Bitcoin in the year 2008 [10], the (cid:27)rst open and decentralized
blockchain. Many alternative follow up blockchains have emerged
since then, for example Ethereum [17] which allows to express a
richer transaction language through smart contracts. Other propos-
als, such as zcash [26] and Monero [27] have built up on Bitcoin
to enhance the transaction privacy. Bonneau et al. [28] provide an
excellent holistic overview of cryptocurrencies and related work in
the (cid:27)eld. With the emergence of smart contracts and more expres-
sive transaction languages, it was shown that smart contracts have
severe security vulnerabilities [29]. Luu et al. [30] provide a sym-
bolic execution tool for current Ethereum smart contract developers
to verify their code. Schnorr signatures[23] have been recently sug-
gested as a possible addition to Bitcoin[31]. This scheme allows
the aggregation of multiple signatures into one which is veri(cid:27)able
against an aggregate of the relevant public keys in a single step.
O(cid:29)-Chain Payment Networks: Several o(cid:29)-chain payment solu-
tions have been proposed and can be divided into two categories.
The (cid:27)rst category relies on blockchain based time locks (e.g. by
Decker et al. [14]). The channel starts with a commitment transac-
tion which for example lasts for 10 days. The subsequent commit-
ment transaction will then last 9 days, and can thus be spent before
the (cid:27)rst transaction. The second category of payment channels re-
lies on punishment, i.e. if one party misbehaves, the other party can
claim all funds of the channel. One instance of this payment chan-
nel is the Lightning Network[6]. The Lightning Network relies on
Bitcoin, while the Raiden Network[8] is currently in development
for the Ethereum blockchain. Existing payment channels are still
in early development and therefore allow for several improvement
proposals. Sprites [7], inspired by Lightning and Raiden aims to
minimize the worst-case collateral costs of indirect o(cid:29)-chain pay-
ments. Flare [9] is another proposal to optimize the search process
of (cid:27)nding a payment route. Bolt [32] provides di(cid:29)erent construc-
tions that allow for privacy preserving o(cid:29)-chain payment channels.
BitcoinJ, a lightweight Bitcoin client implementation, also supports
micropayment channels [33].
Linear programming: Essentially, a mathematical programming
model aims to represent a practical problem using numerical vari-
ables and parameters. While parameters are numbers that are
known, or set, by the decision maker, the values of variables are
to be determined in the process of solving the program. In a linear
program, a mathematical model may have linear (in)equality con-
straints that bound the possible values of the program variables.
Moreover, there can also be a linear objective function which should
be optimized for [34].
Linear Program Example: A simple linear program example is
the following. Maximize: F(x, y) = 2x − 3y Subject to:
(1) 120 ≤ x ≤ 210
(2) 70 ≤ y ≤ 190
(3) 250 ≤ x + y
Solution: Max F(x, y) = 210 at (x, y) = (210, 70)
Linear programming has been a cornerstone of mathematical op-
timization problems since the introduction of the Simplex method
by Dantzig in 1947 [34]. Even though its theoretical worse-case
performance is exponential in the problem size, it has been found
to be greatly e(cid:28)cient in practice, and has been widely adopted in
numerous industrial (cid:27)elds [24]. Interest developed into why an
algorithm with very expensive worst-case performance costs was
very successful and e(cid:28)cient in practice. The work presented in [24]
analyzes the expected performance of the Simplex method in what
is dubbed a smoothed analysis framework, and provides insight
as to why the algorithm is quite successful despite its worst-case
complexity. Further works aimed to develop linear program solv-
ing methods that have better worst-case guarantees than those of
Simplex. In 1978 Khachivan presented the (cid:27)rst polynomial time
algorithm for solving linear programs [35], which achieved a worst
case convergence time polynomial in the number of bits needed to
represent the linear program. Despite its lower theoretical complex-
ity compared to Simplex, the Ellipsoid method performed worse
in practice [24]. In the early 1980s, the interior point method was
introduced by Karmakar [36]. It is also guaranteed to converge in
time polynomial in the linear problem size, but its practical perfor-
mance has been on par with, and sometimes superior to, that of the
simplex method [24].
8 CONCLUSION
Decentralized blockchain ledgers that rely on miners to process
transactions incentivize those miners with a reward for their con-
tributions towards advancing the state of the global ledger. With
the advent of o(cid:29)-chain payment networks, transaction processing
will mostly be concerned with enacting changes to multiple private
o(cid:29)-chain ledgers instead. We have designed the Revive protocol
to maintain the equilibrium of the balances that intermediaries in
a payment network keep among each other. Under ideal circum-
stances, this maintenance would come at no cost to the participants.
This decreases undesirably long routing in case some of the pay-
ment channels in the network start attaining skewed balances.
The core design of Revive can be adapted to a decentralized
ledger environment that allows the enforcement of one transaction,
or lack thereof, to a(cid:29)ect the enforcement of another. While we have
found Ethereum, and Sprites, to be suitable environments in which
to practically demonstrate Revive, we encourage the adaptation
of the protocol to other viable candidates. Our general method for
generating a set of rebalancing transaction is based on solving a
linear program. For the purpose of shifting the payment channel
balances of Revive participants towards equilibrium, we have pro-
vided an automatic way for establishing the required rebalancing
objectives.
O(cid:29)-chain payment routing networks exhibit many challenges
in terms of performance and scalability. For this reason we have
provided a set of guidelines on how to safely adopt Revive in a prac-
tical manner while minimizing exposure to potential performance
penalties.
ACKNOWLEDGEMENTS
This work was partly supported by the Zurich Information Security
& Privacy Center.
REFERENCES
[1] Arthur Gervais, Ghassan O Karame, Karl Wüst, Vasileios Glykantzis, Hubert
Ritzdorf, and Srdjan Capkun. On the security and performance of proof of work
blockchains. In Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security, pages 3–16. ACM, 2016.
[2] Loi Luu, Viswesh Narayanan, Kunal Baweja, Chaodong Zheng, Seth Gilbert, and
Prateek Saxena. Scp: A computationally-scalable byzantine consensus protocol
for blockchains. IACR Cryptology ePrint Archive, 2015:1168, 2015.
[3] Eleftherios Kokoris Kogias, Philipp Jovanovic, Nicolas Gailly, Ismail Kho(cid:28), Linus
Gasser, and Bryan Ford. Enhancing bitcoin security and performance with strong
consistency via collective signing. In 25th USENIX Security Symposium (USENIX
Security 16), pages 279–296. USENIX Association, 2016.
Ittay Eyal, Adem Efe Gencer, Emin Gun Sirer, and Robbert Van Renesse. Bitcoin-
ng: A scalable blockchain protocol. In 13th USENIX Symposium on Networked
Systems Design and Implementation (NSDI 16), pages 45–59. USENIX Association,
2016.
[5] Rafael Pass and Elaine Shi. Hybrid consensus: E(cid:28)cient consensus in the permis-
[4]
sionless model, 2016.
Joseph Poon and Thaddeus Dryja. The bitcoin lightning network: Scalable
o(cid:29)-chain instant payments, 2015.
[7] Andrew Miller, Iddo Bentov, Ranjit Kumaresan, and Patrick McCorry. Sprites:
Payment channels that go faster than lightning. arXiv preprint arXiv:1702.05812,
2017.
[8] Raiden network. http://raiden.network/.
[9] Pavel Prihodko, Slava Zhigulin, Mykola Sahno, Aleksei Ostrovskiy, and Olaoluwa
[6]
Osuntokun. Flare: An approach to routing in lightning network. 2016.
[10] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system, 2008.
[11] Cynthia Dwork and Moni Naor. Pricing via Processing or Combatting Junk Mail,
pages 139–147. Springer Berlin Heidelberg, Berlin, Heidelberg, 1993.
[12] Adam Back. Hashcash - a denial of service counter-measure. Technical report,
2002.
[13] Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe Gencer, Ari Juels, Ahmed
Kosba, Andrew Miller, Prateek Saxena, Elaine Shi, Emin Gün Sirer, et al. On
scaling decentralized blockchains. In International Conference on Financial Cryp-
tography and Data Security, pages 106–125. Springer, 2016.
[14] Christian Decker and Roger Wattenhofer. A fast and scalable payment network
with bitcoin duplex micropayment channels. In Symposium on Self-Stabilizing
Systems, pages 3–18. Springer, 2015.
[15] Bip 68. https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki.
[16] Bip 112. https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki.
[17] Gavin Wood. Ethereum: A secure decentralised generalised transaction ledger.
Ethereum Project Yellow Paper, 2014.
Jameson Lopp. Lightning’s balancing act: Challenges face bitcoin’s scalabil-
ity savior. http://www.coindesk.com/lightning-technical-challenges-bitcoin-
scalability/.
[19] Rsk bitcoin powered smartcontracts.
[20] Ralph C. Merkle. A Digital Signature Based on a Conventional Encryption Function,
pages 369–378. Springer Berlin Heidelberg, Berlin, Heidelberg, 1988.
[21] H.A. Eiselt and C.L. Sandblom. Linear Programming and its Applications. Springer
[18]
Berlin Heidelberg, 2007.
[22] Vitalik Buterin. Ethereum: A next-generation smart contract and decentralized
application platform. URL https://github. com/ethereum/wiki/wiki/% 5BEnglish%
5D-White-Paper, 2014.
[23] C. P. Schnorr. E(cid:28)cient signature generation by smart cards. J. Cryptol., 4(3):161–
174, January 1991.
[24] Daniel A Spielman and Shang-Hua Teng. Smoothed analysis of algorithms:
Why the simplex algorithm usually takes polynomial time. Journal of the ACM
(JACM), 51(3):385–463, 2004.