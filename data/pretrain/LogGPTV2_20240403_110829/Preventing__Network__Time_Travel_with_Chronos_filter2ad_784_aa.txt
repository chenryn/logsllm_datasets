title:Preventing (Network) Time Travel with Chronos
author:Omer Deutsch and
Neta Rozen Schiff and
Danny Dolev and
Michael Schapira
Preventing (Network) Time Travel with Chronos
Omer Deutsch, Neta Rozen Schiff, Danny Dolev, Michael Schapira
School of Computer Science and Engineering, The Hebrew University of Jerusalem
PI:EMAIL, PI:EMAIL,PI:EMAIL, PI:EMAIL
Abstract—The Network Time Protocol (NTP) synchronizes
time across computer systems over the Internet. Unfortunately,
NTP is highly vulnerable to “time shifting attacks”, in which
the attacker’s goal is to shift forward/backward the local time
at an NTP client. NTP’s security vulnerabilities have severe
implications for time-sensitive applications and for security mech-
anisms, including TLS certiﬁcates, DNS and DNSSEC, RPKI,
Kerberos, BitCoin, and beyond. While technically NTP supports
cryptographic authentication, it is very rarely used in practice
and, worse yet, timeshifting attacks on NTP are possible even if
all NTP communications are encrypted and authenticated.
We present Chronos, a new NTP client that achieves good
synchronization even in the presence of powerful attackers
who are in direct control of a large number of NTP servers.
Importantly, Chronos is backwards compatible with legacy NTP
and involves no changes whatsoever to NTP servers. Chronos
leverages ideas from distributed computing literature on clock
synchronization in the presence of adversarial (Byzantine) be-
havior. A Chronos client iteratively “crowdsources” time queries
across multiple NTP servers and applies a provably secure
algorithm for eliminating “suspicious” responses and averaging
over the remaining responses. Chronos is carefully engineered
to minimize communication overhead so as to avoid overloading
NTP servers.
We evaluate Chronos’ security and network efﬁciency guar-
antees via a combination of theoretical analyses and experiments
with a prototype implementation. Our results indicate that to
succeed in shifting time at a Chronos client by over 100ms from
the UTC, even a powerful man-in-the-middle attacker requires
over 20 years of effort in expectation.
I.
INTRODUCTION
A. NTP is Insecure
The Network Time Protocol (NTP) is the default protocol
for synchronizing computer systems across the Internet and is
ubiquitously deployed. Many applications, including security
protocols and mechanisms such as TLS certiﬁcates, DNS
(and DNSSEC), BGP security mechanisms (namely, RPKI),
Kerberos, HTTP Strict Transport Security (HSTS), ﬁnancial
applications, and more, crucially rely on NTP for correctness
and safety [9], [17], [18], [23].
However, similarly to other core components of the In-
ternet’s fragile infrastructure (e.g., TCP/IP, BGP, DNS), NTP
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2018 
18-21  February  2018,  San  Diego,  CA,  USA
ISBN  1-891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23231
www.ndss-symposium.org
was designed many decades ago and without security in mind.
NTP’s design thus reﬂects the need to achieve correctness in
the presence of inaccurate clocks (“falsetickers” [33]), assumed
to be fairly rare, as opposed to designated attacks by powerful
adversaries. Consequently, NTP is alarmingly vulnerable to
attacks, ranging from time shifting attacks that stealthily shift
clocks on victim clients to denial-of-service attacks [24].
In a nutshell, NTP is based on a client-server architecture:
an NTP-client periodically selects servers to sync to from a
pool of servers. Selecting servers from the pool involves these
servers passing a sequence of “tests” intended to establish their
reliability and accuracy. The NTP client syncs its internal clock
to the clock reading from these servers via an algorithm that
mitigates the effects of variability in network latency.
Unfortunatey, man-in-the-middle attackers capable of in-
tercepting trafﬁc between a client and server (for instance,
through BGP hijacking [13], [39], DNS hijacking [10], [16],
[19]) can wreak havoc on time synchronization [3], [26].
Worse yet, even an off-path attacker incapable of observing
NTP trafﬁc can launch devastating attacks on the protocol by
exploiting weaknesses in NTP’s implementation [26].
Recently introduced patches to NTP’s implementation
eliminate/mitigate some off-path attacks and implementation
ﬂaws, yet attackers capable of manipulating client-server com-
munications are deemed simply “too strong for NTP, because
a man-in-the-middle attacker can always bias time synchro-
nization by dropping or delaying packets.” [27].
Importantly, while the cure to some of NTP’s ailments
may lie in encrypting NTP trafﬁc between clients and servers,
even ubiquitous encryption and authentication is insufﬁcient
for protecting NTP time synchronization from an attacker
capable merely of delaying and replaying packets. (In addition,
this mode of operation is very rare in practice [26] and faces
signiﬁcant challenges to global adoption.)
B. Introducing Chronos
We present Chronos, an NTP client engineered to protect
from timeshifting attacks. Chronos is engineered to achieve
three desiderata:
•
•
Provable security guarantees even against very
powerful man-in-the-middle attackers. Speciﬁcally,
Chronos is designed to protect even against attackers
capable of compromising a large number of (even
authenticated!) NTP servers.
Backwards-compatibility with today’s NTP servers.
Chronos is designed to be readily deployable and,
in particular, involves software changes to the NTP
client side only and no changes whatsoever to NTP’s
message format or to NTP servers.
•
Low computational and communication overhead.
Today’s NTP involves fairly little client-server com-
munication. Overloading NTP servers can result in
slower response times and, as a result, degraded
synchronization. Chronos is thus engineered to avoid
excessive overhead on both the clients and the servers.
Chronos’ design leverages ideas from the rich body of
literature in distributed computing theory in the presence
of Byzantine attackers. Synchronizing clocks in distributed
systems in the presence of faulty and malicious parties has
been central to distributed computing research from its very
early days [6], [15], [20], [44]. Chronos adapts ideas from
this body of research, which typically assumes a relatively
small group of computational nodes, to the context of large-
scale, NTP-compatible time-synchronization across the global
Internet.
A Chronos-client periodically queries small subsets of
large pool of NTP-servers to solicit timing information and
then applies a theory-informed algorithm for removing outliers
and averaging over the remaining responses. We prove that
this fairly low-overhead crowdsourcing scheme guarantees that
the internal clock of each Chronos client remain close (time-
wise) to the universal time (UTC), and that the clocks of any
two Chronos-clients remain close to each other, even if the
attacker controls a fairly large fraction of the NTP servers.
Thus, Chronos provides meaningful security guarantees for
adopters even under very partial deployment.
We evaluate Chronos’ correctness, security, and network
efﬁciency via a combination of theoretical and empirical
analyses with a prototype implementation.
both extensive theoretical analysis and empirical anal-
yses of a prototype implementation of Chronos on
Amazon AWS (EC2) machines in 6 different regions
in the USA and Europe. Our results indicate that to
succeed in shifting time at a Chronos client by even
a small amount (e.g., 100ms), even a powerful man-
in-the-middle attacker requires many years of effort
(e.g., over 20 years in expectation).
• Outlining directions for future research. We view
Chronos as a ﬁrst step towards securing NTP from
man-in-the-middle attacks. We leave the reader with
interesting research directions regarding how Chronos
can be extended and regarding applications of our
ideas to other time-synchronization contexts.
D. Organization
We provide a high-level overview of NTP and discuss some
of NTP’s security vulnerabilities in Section II-B. We present
Chronos’ design in Section III-B and analyze its security
guarantees in Section IV. We report on empirical analyses
using a prototype implementation of Chronos, and on how
these can be used to guide parameter value assignments in
Chronos in Section V. Section VI presents related work. We
conclude and discuss interesting directions for future research
in Section VII.
II. NTP: OVERVIEW AND VULNERABILITIES
We present below a high-level overview of NTP’s archi-
tecture. To simplify exposition, many technical details are
omitted (e.g., the notion of NTP strata, delay computation, and
more). The reader is referred to [1], [31], [32] for a thorough
exposition. After presenting NTP’s architecture, we discuss
NTP’s notorious security vulnerabilities.
C. Our Contributions
A. NTP Overview
We make the following main contributions:
•
Identifying key elements in NTP’s architecture that
render it vulnerable to man-in-the-middle attacks.
We highlight two crucial aspects of today’s NTP archi-
tecture (and today’s implementations) that make NTP
clients particularly subsceptible to man-in-the-middle
attackers: (1) the (typical) reliance on small sets of
servers, and (2) utilizing (a variant of) Marzullos’
algorithm [28]–[30] for selecting the servers to sync
to.
•
•
Designing Chronos. We present Chronos, a new NTP-
compatible client carefully engineered to strike a good
balance between security and deployability. Chronos’
design revisits and replaces elements in the NTP client
architecture that give rise to NTP’s vulnerabilities to
man-in-the-middle attacks (as outlined above). We
grapple with algorithmic and operational issues in-
volved in accomplishing this objective.
Evaluating Chronos from both a theoretical per-
spective and an empirical perspective. We study
Chronos’ security guarantees and overhead through
NTP’s basic client-server architecture consists of two main
consecutive steps: (1) the poll process, in which the NTP client
exchanges messages with NTP servers so as to gather time
samples (and other parameters such as per server delay), and
(2) selecting the “best” time samples, and updating the local
clock accordingly. Next a high-level overview of these steps, as
captured by today’s implementation of NTP [31], is presented.
See [1], [32] for more details.
Poll process. Under NTP, the client periodically exchanges
messages with a set of NTP servers Q so as to attain clock
readings from each server in Q. See Figure 1(a) for an
illustration. The set of servers Q,
termed here the client-
associated server pool, is typically determined via a DNS
query to pool.ntp.org and consists of NTP servers that are
“close” to the client. The client samples the time at each server
in Q by sending an NTP time query to the server and receiving
an NTP response. Through this interaction, the client obtains
4 distinct timestamps per query:
T1: the local time at the client upon sending the query.
T2: the local time at the server upon receiving the
query.
•
•
2
samples are then combined into a single average time value.
In the event that the computed time value is “far” from the
current local time (i.e., the current local time is “stale”), the
local time is updated to reﬂect the new time value.
B. NTP’s Security Vulnerabilities
NTP, similarly to other Internet protocols from the same
era (e.g., BGP, TCP, DNS), was designed at a time when the
Internet was comprised of only trusted parties and security was
not a concern. NTP’s design thus reﬂects the need to achieve
correctness in the presence of faulty (slow/fast) clocks, not of
designated attacks [21], [24].
truechimers,
Indeed, as asserted by Mills [33], a key design assump-
tion was that
i.e., servers that maintain time
accuracy, are numerous, whereas “falsetickers” are rare and,
moreover, widely distributed across the measurement space.
Consequently, NTP remains extremely vulnerable to different
types of attacks.
Attackers in the NTP context can be categorized into two
main classes: (1) off-path attackers, who cannot observe (let
alone tamper with) the trafﬁc between the NTP client and NTP
servers, and (2) man-in-the-middle (MitM) attackers, who can
eavesdrop on and manipulate trafﬁc from client to server and
vice versa. MitM attackers might be positioned on the path
from NTP client to server (for instance, through BGP hijacking
[13], [39] or DNS hijacking [10], [16], [19]), or even be in
direct control of NTP servers.
Off-path attackers. Recent studies [24], [25] demonstrate
the ability of off-path attackers to launch denial-of-service
(DoS) attacks and also shift
the client
by exploiting weaknesses in NTP’s implementation (e.g., via
spoofed Kiss-o’-Death packets). Recently introduced patches
to NTP’s implementation eliminate/mitigate some of these
vulnerabilities.
the local
time at
MitM attackers. What about MitM attackers? While some
forms of MitM attacks on NTP can be thwarted [24], NTP
is essentially defenseless against MitM attackers capable of
dropping, delaying, and tampering with live NTP trafﬁc [35],
[37], [41]. Indeed, as articulated in [27]: “... the MiTM model
is too strong for NTP, because a MiTM can always bias time
synchronization by dropping or delaying packets.
While NTP supports cryptographic authentication [9], [43],
even perfect, globally deployed authentication will not prevent
a MitM attacker from shifting time through packet delays, and
also leave NTP exposed to attackers who manage to gain con-
trol of (authenticated) NTP servers. (We note that in practice
NTP trafﬁc is very rarely authenticated anyway, as a result of
a cumbersome key-distribution mechanism, weaknesses in the
Autokey protocol for public-key authentication, and more [14],
[37], [40].)
C. Why is NTP So Vulnerable to MitM Attacks?
To enhance NTP’s security against MitM attackers we
must ﬁrst identify the elements in today’s NTP architecture
(and standard implementations) that underly its vulnerability
to such attackers. We point out two such factors: (1) (typical)
3
(a) Client-server message exchange
(b) Measuring Offset in NTP
Figure 1: NTP’s poll process
•
•
T3: the local time at the server upon sending the
response.
T4: the local time at the client upon receiving the
response.
These timestamps are then used to compute the offset θ =
2 ((T2 − T1) + (T3 − T4)) [24], [38], which is intended to
1
capture the difference between the local time at the client and
the local time at the server. The client gathers several time
samples from each server in the server pool and computes,
for each sample, the associated offsets. See Figure 1(b) for an
illustration.
Selecting the “best” time samples. After gathering several
time values (and measuring offsets) from each server on the
list Q, the client applies a 5-step algorithm to compute a new