# Preventing (Network) Time Travel with Chronos

**Authors:**
- Omer Deutsch
- Neta Rozen Schiff
- Danny Dolev
- Michael Schapira

**Affiliation:**
School of Computer Science and Engineering, The Hebrew University of Jerusalem

**Contact:**
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL

## Abstract
The Network Time Protocol (NTP) is widely used to synchronize time across computer systems over the Internet. However, NTP is highly vulnerable to "time shifting attacks," where an attacker aims to shift the local time at an NTP client forward or backward. These vulnerabilities have severe implications for time-sensitive applications and security mechanisms, including TLS certificates, DNS and DNSSEC, RPKI, Kerberos, and Bitcoin. Although NTP supports cryptographic authentication, it is rarely used in practice, and even if all NTP communications are encrypted and authenticated, time-shifting attacks remain possible.

We introduce Chronos, a new NTP client that maintains good synchronization even in the presence of powerful attackers who control a large number of NTP servers. Chronos is backward-compatible with existing NTP servers and requires no changes to their configuration. It leverages concepts from distributed computing literature on clock synchronization in the presence of adversarial (Byzantine) behavior. A Chronos client iteratively queries multiple NTP servers, applies a provably secure algorithm to eliminate suspicious responses, and averages the remaining responses. Chronos is designed to minimize communication overhead to avoid overloading NTP servers.

Our evaluation, combining theoretical analyses and experimental results with a prototype implementation, shows that a powerful man-in-the-middle attacker would need over 20 years of effort to shift the time at a Chronos client by more than 100ms from UTC.

## 1. Introduction

### 1.1 NTP is Insecure
The Network Time Protocol (NTP) is the default protocol for synchronizing computer systems across the Internet and is ubiquitously deployed. Many applications, including security protocols like TLS certificates, DNS (and DNSSEC), BGP security mechanisms (RPKI), Kerberos, and financial applications, rely on NTP for correctness and safety. However, NTP was designed decades ago without considering security, making it vulnerable to various attacks, including time-shifting and denial-of-service attacks.

NTP operates on a client-server architecture, where an NTP client periodically selects servers from a pool to synchronize its internal clock. This selection process involves tests to establish the reliability and accuracy of the servers. Unfortunately, man-in-the-middle (MitM) attackers can intercept and manipulate traffic between the client and server, leading to significant disruptions in time synchronization. Even off-path attackers, who cannot observe NTP traffic, can exploit implementation weaknesses to launch devastating attacks.

Recent patches to NTP's implementation mitigate some off-path attacks but are insufficient against MitM attackers, who can delay and replay packets, rendering encryption and authentication ineffective.

### 1.2 Introducing Chronos
Chronos is a new NTP client designed to protect against time-shifting attacks. It achieves three key objectives:
- **Provable Security:** Chronos provides strong security guarantees even against powerful MitM attackers, including those who can compromise a large number of NTP servers.
- **Backward Compatibility:** Chronos is compatible with existing NTP servers and requires no changes to their configuration. It only involves software changes on the client side.
- **Low Overhead:** Chronos minimizes computational and communication overhead to avoid overloading NTP servers.

Chronos leverages ideas from distributed computing theory, particularly in the context of Byzantine fault tolerance. It periodically queries small subsets of a large pool of NTP servers, eliminates outliers, and averages the remaining responses. We prove that this approach ensures that the internal clock of each Chronos client remains close to UTC and that the clocks of any two Chronos clients remain synchronized, even if a large fraction of the NTP servers are controlled by an attacker.

### 1.3 Our Contributions
- **Identifying Vulnerabilities:** We highlight key elements in NTP's architecture that make it susceptible to MitM attacks, such as reliance on small sets of servers and the use of Marzullo's algorithm for server selection.
- **Designing Chronos:** We present the design of Chronos, which addresses these vulnerabilities while maintaining compatibility with existing NTP infrastructure.
- **Evaluating Chronos:** We evaluate Chronos through both theoretical analysis and empirical studies using a prototype implementation. Our results show that a powerful MitM attacker would need over 20 years of effort to shift the time at a Chronos client by more than 100ms from UTC.

### 1.4 Organization
- **Section II:** Provides an overview of NTP and discusses its security vulnerabilities.
- **Section III:** Presents the design of Chronos and analyzes its security guarantees.
- **Section IV:** Reports on empirical analyses using a prototype implementation of Chronos.
- **Section V:** Discusses related work.
- **Section VI:** Concludes and outlines directions for future research.

## 2. NTP: Overview and Vulnerabilities

### 2.1 NTP Overview
NTP's basic client-server architecture consists of two main steps:
1. **Poll Process:** The NTP client periodically exchanges messages with a set of NTP servers to gather time samples and other parameters.
2. **Selecting the Best Time Samples:** The client then selects the best time samples and updates its local clock accordingly.

During the poll process, the client obtains four distinct timestamps per query:
- **T1:** The local time at the client upon sending the query.
- **T2:** The local time at the server upon receiving the query.
- **T3:** The local time at the server upon sending the response.
- **T4:** The local time at the client upon receiving the response.

These timestamps are used to compute the offset \(\theta = \frac{1}{2} \left( (T2 - T1) + (T3 - T4) \right)\), which captures the difference between the local time at the client and the server. The client gathers several time samples from each server and computes the associated offsets.

### 2.2 NTP’s Security Vulnerabilities
NTP, like other Internet protocols from the same era, was designed when the Internet consisted of trusted parties and security was not a concern. NTP's design assumes that accurate servers (truechimers) are numerous, while faulty clocks (falsetickers) are rare and widely distributed. This assumption makes NTP highly vulnerable to attacks, particularly from MitM attackers who can intercept and manipulate traffic.

- **Off-Path Attackers:** Can launch DoS attacks and shift the client's local time by exploiting implementation weaknesses.
- **MitM Attackers:** Can eavesdrop on and manipulate traffic, making NTP essentially defenseless against them. Even cryptographic authentication does not prevent MitM attackers from shifting time through packet delays.

### 2.3 Why is NTP So Vulnerable to MitM Attacks?
To enhance NTP's security against MitM attackers, we must identify the underlying factors in NTP's architecture and standard implementations. Two key factors are:
- **Reliance on Small Sets of Servers:** NTP clients typically rely on a small set of servers, making it easier for an attacker to control a significant portion of the servers.
- **Use of Marzullo’s Algorithm:** This algorithm for selecting the best time samples is susceptible to manipulation by an attacker.

## 3. Design of Chronos

### 3.1 Key Features
Chronos is designed to address the vulnerabilities in NTP while maintaining backward compatibility with existing NTP servers. Its key features include:
- **Provable Security:** Chronos uses a provably secure algorithm to eliminate suspicious responses and average the remaining ones, ensuring robust time synchronization even in the presence of powerful attackers.
- **Backward Compatibility:** No changes are required to NTP servers or message formats. Only the NTP client software needs to be updated.
- **Low Overhead:** Chronos minimizes communication overhead to avoid overloading NTP servers.

### 3.2 Algorithm
A Chronos client periodically queries small subsets of a large pool of NTP servers, collects timing information, and applies a theory-informed algorithm to remove outliers and average the remaining responses. This process ensures that the internal clock of each Chronos client remains close to UTC and that the clocks of any two Chronos clients remain synchronized.

## 4. Security Analysis

### 4.1 Theoretical Analysis
We provide a theoretical analysis of Chronos' security guarantees, proving that it can withstand attacks from powerful MitM attackers who control a large fraction of NTP servers.

### 4.2 Empirical Analysis
We conduct empirical analyses using a prototype implementation of Chronos on Amazon AWS (EC2) machines in six different regions in the USA and Europe. Our results show that a powerful MitM attacker would need over 20 years of effort to shift the time at a Chronos client by more than 100ms from UTC.

## 5. Related Work

### 5.1 Previous Approaches
Previous approaches to securing NTP have focused on patching implementation flaws and introducing cryptographic authentication. However, these solutions are insufficient against MitM attackers who can delay and replay packets.

### 5.2 Comparison with Chronos
Chronos offers a more comprehensive solution by addressing the fundamental vulnerabilities in NTP's architecture and providing strong security guarantees even in the presence of powerful attackers.

## 6. Conclusion and Future Work

### 6.1 Conclusion
Chronos is a new NTP client that provides strong security guarantees against time-shifting attacks while maintaining backward compatibility with existing NTP servers. Our theoretical and empirical analyses demonstrate its effectiveness in protecting against powerful MitM attackers.

### 6.2 Future Work
Future research could explore extending Chronos to other time-synchronization contexts and further enhancing its security and efficiency.