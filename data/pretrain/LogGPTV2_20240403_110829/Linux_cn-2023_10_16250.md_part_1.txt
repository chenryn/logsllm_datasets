---
author: Andreas Hartmann
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 2419
date: '2023-10-03 11:13:00'
editorchoice: false
excerpt: 在本文中，我们探索了 Btrfs 子卷，它们像是 Btrfs 文件系统内部的独立的 Btrfs 文件系统。
fromurl: https://fedoramagazine.org/working-with-btrfs-subvolumes/
id: 16250
islctt: true
largepic: /data/attachment/album/202310/03/111308vdhzh3ddwwjdmyw0.jpg
permalink: /article-16250-1.html
pic: /data/attachment/album/202310/03/111308vdhzh3ddwwjdmyw0.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 16189
- displayorder: 0
  raid: 16287
reviewer: wxy
selector: lujun9972
summary: 在本文中，我们探索了 Btrfs 子卷，它们像是 Btrfs 文件系统内部的独立的 Btrfs 文件系统。
tags:
- Btrfs
thumb: false
title: Btrfs 详解：子卷
titlepic: true
translator: A2ureStone
updated: '2023-10-03 11:13:00'
---
![](/data/attachment/album/202310/03/111308vdhzh3ddwwjdmyw0.jpg)
这篇文章是《Btrfs 详解》系列文章中的一篇。从 Fedora Linux 33 开始，Btrfs 就是 Fedora Workstation 和 Fedora Silverblue 的默认文件系统。
以防你忘记，这是系列文章中的前一篇：[Btrfs 详解：基础概念](/article-16189-1.html)。
### 简介
 子卷   Subvolume  允许将一个 Btrfs 文件系统划分成多个独立的子文件系统。这意味着你可以从 Btrfs 文件系统挂载子卷，就好像它们是独立的文件系统。除此之外，例如，你还可以通过  限额组   qgroup （我们将在本系列的另一篇文章里介绍）定义子卷能够占据的最大空间，或者用子卷去包含或排除快照中的文件（我们会后面的文章中会讲到）。自 Fedora Linux 33 后每个 Fedora Workstation 和 Fedora Silverblue 默认安装过程中会利用子卷。在这篇文章中我们会介绍它是如何工作的。
下面你会找到很多关于子卷的例子。如果你想跟着操作，你必须拥有访问某些 Btrfs 文件系统的权限和 root 权限。你可以通过下面命令来验证你的 `/home/` 目录是否是 Btrfs 。
```
$ findmnt -no FSTYPE /home
btrfs
```
这个命令会输出你 `/home/` 目录的文件系统名。如果它是 btrfs，那就可以了。让我们创建一个新的目录去做实验：
```
$ mkdir ~/btrfs-subvolume-test
$ cd ~/btrfs-subvolume-test
```
在下面的文本中，你会看到很多像上面显示的那样的命令输出框。请在阅读/比较命令输出时请记住，**框中的内容在行末会被换行**。这使得识别跨多行的长行变得困难，降低了可读性。如果有疑问，试着调整浏览器窗口的大小，看看文本的变化!
### 创建和使用子卷
我们可以通过以下命令创建一个 Btrfs 子卷：
```
$ sudo btrfs subvolume create first
Create subvolume './first'
```
当我们检查当前目录，我们可以看到现在有一个名为 `first` 的新目录。注意到下面输出的第一个字符 `d`：
```
$ ls -l
total 0
drwxr-xr-x. 1 root root 0 Oct 15 18:09 first
```
我们可以像常规目录一样操作它：我们可以重命名它，移动它，在里面创建新文件和目录，等等。注意到目录属于 root，所以我们必须以 root 身份去做这些事情。
如果它表现和看起来就像个目录，那我们如何知道这是不是一个 Btrfs 子卷呢？我们可以使用 `btrfs` 工具去列出所有子卷：
```
$ sudo btrfs subvolume list .
ID 256 gen 30 top level 5 path home
ID 257 gen 30 top level 5 path root
ID 258 gen 25 top level 257 path root/var/lib/machines
ID 259 gen 29 top level 256 path hartan/btrfs-subvolume-test/first
```
如果你安装的是最新的 Fedora Linux，且未修改过，你很可能会看到和上面一样的输出。我们会在之后检查 `home` 和 `root` ，还有全部数字的含义。现在，我们看到在我们指定的路径下有一个子卷。我们可以将输出限制在我们当前位置下面的子卷：
```
$ sudo btrfs subvolume list -o .
ID 259 gen 29 top level 256 path home/hartan/btrfs-subvolume-test/first
```
让我们重命名子卷：
```
$ sudo mv first second
$ sudo btrfs subvolume list -o .
ID 259 gen 29 top level 256 path home/hartan/btrfs-subvolume-test/second
```
我们还可以嵌套子卷：
```
$ sudo btrfs subvolume create second/third
Create subvolume 'second/third'
$ sudo btrfs subvolume list .
ID 256 gen 34 top level 5 path home
ID 257 gen 37 top level 5 path root
ID 258 gen 25 top level 257 path root/var/lib/machines
ID 259 gen 37 top level 256 path hartan/btrfs-subvolume-test/second
ID 260 gen 37 top level 259 path hartan/btrfs-subvolume-test/second/third
```
我们也可以移除子卷，就像移除目录一样：
```
$ sudo rm -r second/third
```
或者通过特殊的 Btrfs 命令：
```
$ sudo btrfs subvolume delete second
Delete subvolume (no-commit): '/home/hartan/btrfs-subvolume-test/second'
```
### 像单独的文件系统一样操作子卷
前面的简介里说 Btrfs 子卷就好像单独的文件系统。这意味着我们可以挂载子卷并且传递一些挂载选项给它。我们先创建一个小的目录结构去更好的理解发生了什么：
```
$ mkdir -p a a/1 a/1/b
$ sudo btrfs subvolume create a/2
Create subvolume 'a/2'
$ sudo touch a/1/c a/1/b/d a/2/e
```
这就是目录结构的样子：
```
$ tree
.
└── a
    ├── 1
    │   ├── b
    │   │   └── d
    │   └── c
    └── 2
        └── e
4 directories, 3 files
```
验证现在这里有一个新的 Btrfs 子卷：
```
$ sudo btrfs subvolume list -o .
ID 261 gen 41 top level 256 path home/hartan/btrfs-subvolume-test/a/2
```
为了挂载子卷，我们必须知道 Btrfs 子卷所在的块设备路径。下面的命令会告诉我们：
```
$ findmnt -vno SOURCE /home/
/dev/vda3
```
现在我们挂载子卷。确保你将参数替换成你 PC 上的：
```
$ sudo mount -o subvol=home/hartan/btrfs-subvolume-test/a/2 /dev/vda3 a/1/b
```
观察到我们使用 `-o` 参数去提供额外的选项去挂载程序。在这里我们告诉它挂载在设备 `/dev/vda3` 上 btrfs 文件系统里名为 `home/hartan/btrfs-subvolume-test/a/2` 的子卷。这是 Btrfs 特有的选项，在其他文件系统里没有的。
我们可以看到目录结构变化了：
```
$ tree
.
└── a
    ├── 1
    │   ├── b
    │   │   └── e
    │   └── c
    └── 2
        └── e
4 directories, 3 files
```
现在文件 `e` 出现了两次， `d` 不见了。我们现在可以用两个不同的路径访问相同的 Btrfs 子卷。在一个路径的所有变化会被立刻反应在其他的位置：
```
$ sudo touch a/1/b/x
$ ls -lA a/2
total 0
-rw-r--r--. 1 root root 0 Oct 15 18:14 e
-rw-r--r--. 1 root root 0 Oct 15 18:16 x