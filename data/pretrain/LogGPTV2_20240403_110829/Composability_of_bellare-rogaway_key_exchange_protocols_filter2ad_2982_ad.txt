(Session matching algorithm). A
session matching algorithm M : {0, 1}∗ → {0, 1}∗ for a key
exchange protocol ke is an eﬃcient algorithm such that the
following holds for any adversary A playing against GBR:
After each response of the key exchange game, the algorithm
M is given an ordered list of all queries and responses made
between A and GBR,D, along with the public parameters of
the system. Algorithm M then outputs sets LSIDpartner and
LSIDsingle such that, for the current state (LSID, SST, LST,
EST, MST) of the game, the sets LSIDpartner, LSIDsingle al-
ways satisfy the predicate Ppartner(LSID, SST, LST, EST, MST,
LSIDpartner, LSIDsingle).
We remark that the idea of a session matching algorithm
has already appeared in diﬀerent forms in the literature.
As mentioned above, in the original paper [4] the notion of
matching conversations via the communication transcripts
57(and their order) supports a straightforward session match-
ing algorithm. In [5] Bellare and Rogaway introduce a part-
ner function which resembles our notion of a session match-
ing algorithm, but their function does not need to be eﬃ-
ciently computable. Finally, in [3] the authors require the
session identiﬁers, deﬁning essentially the partners, to be
given to the adversary upon acceptance of a session, again
yielding a session matching algorithm straightforwardly. As
we show in the full version, a weak form of session matching
algorithm is in fact necessary to ensure secure composition.
4. SYMMETRIC-KEY PROTOCOLS
We now introduce the class of symmetric key protocols.
They use a symmetric session key which is shared between
pairs of sessions, i.e. these are the protocols that run after a
key agreement protocol has completed. Games for symmet-
ric key protocols allow the adversary to initialise sessions,
causing the game to generate a new session key. The adver-
sary can partner two sessions, so that they share the same
key. Finally the adversary may choose session keys, and ini-
tialise sessions with its chosen key. The latter forces any
model to cope with sessions where the key is known to the
adversary. For example an adversary should not be con-
sidered to have broken the security requirement if it does so
against a session for which it has chosen the key. Potentially,
the adversary has access to additional queries which depend
on the precise requirements of the protocol being modeled.
As for all protocols a symmetric key protocol π = (kg, ξ)
consists of a randomized key generation algorithm and pro-
tocol algorithm. We write Dkg as the distribution of keys
output from the key generation algorithm. The key genera-
tion algorithm of π is used to generate the session keys.
We consider arbitrary protocols π and so the security re-
quirements depend on the protocol being analysed. We now
provide the minimum requirements of games for symmetric
key protocols.
Game execution state. The game execution state EST
is not required for the execution of a symmetric key proto-
col and so is assumed to be undeﬁned for the duration of
execution.
Session state. The session state for symmetric key proto-
cols consists of two variables:
κ ∈ {0, 1}∗ ∪ {⊥}: This is the symmetric session key for the
protocol.
sinfo ∈ {0, 1}∗ ∪ {⊥}: This is any additional session state re-
quired for speciﬁc symmetric key protocols.
Local session state. The local session state for symmet-
ric key protocols consists of two variables.
ψ ∈ {secret, known}: This denotes whether a key is “known” by
the adversary.
lst ∈ {0, 1}∗ ∪ {⊥}: This contains any other local session state
required to model the security required of a symmetric key pro-
tocol.
setupE(LSID, kg, 1η):
For each lsid ∈ LSID
set SST(lsid) ← (⊥,⊥)
Return (SST,⊥)
InitS(lsid):
SST(cid:48) ← SST
Run κ ← kg(1η)
SST(cid:48)(lsid) ← (κ,⊥)
Return
(SST(cid:48), LST, EST, MST), okay
InitP(lsid1, lsid2):
SST(cid:48) ← SST and LST(cid:48) ← LST
SST(cid:48)(lsid2) ← (SST(lsid1).κ,⊥)
LST(cid:48)(lsid2).ψ ← LST(lsid1).ψ
Return (SST(cid:48), LST(cid:48), EST, MST), okay
InitK(lsid, κ):
SST(cid:48) ← SST and LST(cid:48) ← LST
SST(cid:48)(lsid) ← (κ,⊥)
LST(cid:48)(lsid).ψ ← known
Return (SST(cid:48), LST(cid:48), EST, MST), okay
Figure 8: Execution state setup algorithm for symmetric
key protocols and initialisation queries for symmetric key
protocol games.
as other details of model state and local session state are
unknown due to the generic nature of our model, we do not
specify the setupG algorithm here.
Queries. There are a minimum of four queries available to
the adversary in symmetric protocol games. The Send query
is available and behaves as described previously. There are
three queries to allow the adversary to initialise sessions.
The ﬁrst, InitS, causes the game to generate a new session
key using the key generation algorithm. The second, InitP,
partners two sessions by keying the second session with the
key of the ﬁrst one. The third, InitK, allows the adversary to
choose a key, which is then used as the session key. This ﬁnal
method of initialisation sets the value of ψ for the current
session to known.
These diﬀerent initialisation methods correspond to what
can happen in situations where protocols are composed with
key exchange: Sometimes, keys known to the adversary are
used in the protocol, so that this needs to be reﬂected in
the syntax. Also, initialisation of two parties never happens
simultaneously as parties accept keys one after the other.
Now, formally the initialisation queries are given in Figure 8.
Additionally to the output okay, the game is allowed to out-
put further information.
Sanity checks are required for the Send, InitS, InitP and
InitK queries. The Valid condition for Send checks the ses-
sion key κ has been initialised to some value and can be used.
This is the minimum check required and may be augmented
for speciﬁc games. The checks for initialisation queries en-
sure that one cannot change the keys for sessions already
initialised with a session key. Also when performing the
InitP query a check is made that the ﬁrst session already has
a session key.
Predicate. The predicate for the symmetric key protocol
game depends on the security model required for the proto-
col π. However we note it may be necessary for the predicate
to take into account the value of ψ in the local session state.
We typically denote the game of the protocol π as Gπ. The
advantage of an adversary against a symmetric key protocol
may depend on some constant ∆ (typically 0 for computa-
tional games or 1/2 for decisional games) and we deﬁne the
advantage by
AdvGπ
π,A(1η) =
ExpGπ
π,A(1η) = 1
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
(cid:12)(cid:12)(cid:12) .
(cid:105) − ∆
Setup. The setupE algorithm to initialise the session states
simply sets all initial values to be undeﬁned, running as given
in Figure 8. The setupG algorithm is required to initialise
the model state and local session state. The value of ψ in the
local session state must be set to secret initially. However
We say that the protocol π is secure with respect to Gπ
if the advantage AdvGπ
π,A(1η) is a negligible function in the
security parameter for all PPT adversaries A.
We remark that, at a superﬁcial glance, the session match-
ing algorithm for the key exchange protocol seems to impose
some restrictions on the communication privacy or anonymity
58for the symmetric key protocol. This, however, is not true,
as session matching for key exchange does not refer to the
actual usage of the derived keys in the subsequent protocol.
In particular, the symmetric key protocol and its security
game may well cover anonymity-related properties such as
the key-hiding property [14, 1], i.e. which of two keys has
been used to encrypt messages.
Single session game. Usually, game based notions of pro-
tocol security require one to consider multiple sessions exe-
cuted concurrently in order to draw conclusions about the
security of the scheme. Notice that when diﬀerent sessions
of the protocol depend only on independent, eﬃciently sam-
plable states, then it may be possible to reduce the security
of the many session scenario to that of a single session. This
greatly simpliﬁes the analysis of the protocol and thus allows
one to conclude security of the composed protocol more eas-
ily.
In symmetric key protocol games, all unknown keys are
independent. Thus, in many cases one is able to analyse only
the security of a single pair of sessions and, provided this
is secure, may conclude the standard multi-session scenario
is secure. For example, consider an authenticated channel.
An adversary is required to cause any one session to accept
some invalid (non-authenticated) message. It is clear, any
adversary who is able to do this when there are multiple,
concurrently executing sessions, will be able to achieve the
same goal when there is only a single run of the protocol
being executed. We note that for key exchange protocols,
individual runs are not independent due to the session keys
depending upon the shared long term asymmetric keys in
some way.
The single session game is a symmetric key game where
the adversary is allowed to query at most one InitS query
and one InitP query, i.e.
the adversary is given access to
at most one pair of “honest” sessions. The Valid predicate
is modiﬁed to restrict the number of InitS and InitP queries.
We denote this game by Gπ−1. Note that any (multi-session)
symmetric key game Gπ has a single session version Gπ−1.
A symmetric key game is called single session reducible if
its (multi-session) security can be reduced to the security of
the corresponding single session game.
Definition 5
(Single-Session Reducibility). A se-
curity game Gπ is single session reducible if for any PPT
adversary A against Gπ where AdvGπ
π,A(1η) is non-negligible,
then there exists a PPT adversary B against Gπ−1 such that
AdvGπ−1
π,B (1η) is non-negligible.
We stress again that single-session reducibility is not a
prerequisite for our general composition theorem to work.
This class of protocols only supports a simpler analysis.
In the full version we treat necessary conditions for single
session reducibility. We show that the game of authenticated
channels satisﬁes this condition. Hence, a single session se-
cure authenticated channel remains secure when putting the
protocol into a multi-session setting where the symmetric
key generation of the protocol is replaced by a BR-secure
key exchange protocol.
5. DEFINING COMPOSITION
In this section we discuss the composition of key exchange
protocols with symmetric key protocols. The composition of
a key exchange protocol and symmetric key protocol is as
ξke;π(((pki, ski), pkj, sid, κke, γ, sinfoke, κπ, sinfoπ), msg):
If γ (cid:54)= accepted then //Hand message to key exchange
ke), response)
ke, γ(cid:48), sinfo(cid:48)
Run (((pki, ski), pkj, sid(cid:48), κ(cid:48)
← ξke(((pki, ski), pkj, sid, κke, γ, sinfoke), msg)
If γ(cid:48) = accepted then set κπ := κke
π, sinfo(cid:48)
(κ(cid:48)
Run ((κ(cid:48)
(sid(cid:48), κ(cid:48)
π) ← (κπ, sinfoπ)
π, sinfo(cid:48)
ke, γ(cid:48), sinfo(cid:48)
If γ = accepted then //Pass message to symmetric protocol
π), response) ← ξπ((κπ, sinfoπ), msg)
ke) ← (sid, κke, γ, sinfoke)
ke, κ(cid:48)
Return (((pki, ski), pkj, sid(cid:48), κ(cid:48)
ke, γ(cid:48), sst(cid:48)
π, sst(cid:48)
π), response)
Figure 9: Algorithm for composed protocol, using ξke
and ξπ.
expected: Intuitively, once a session of the key exchange is
successfully ﬁnished, the derived key is used to initialise and
run a session of the symmetric key protocol. Secondly, we
deﬁne security for the resulting composition.
5.1 Syntax of composed protocols
Given the key exchange protocol ke = (kgke, ξke) and the
symmetric key protocol π = (kgπ, ξπ) we write the composed
protocol as ke; π = (kgke;π, ξke;π). The key generation algo-
rithm of the composed protocol generates the (long-term)
keys for the key exchange protocol, so we set kgke;π = kgke.
We now detail the construction of the composed protocol’s
algorithm, namely ξke;π.
Composed algorithm. Recall, a session of the key ex-
change protocol (resp. symmetric key protocol) executes by
running the algorithm ξke (resp. ξπ). We describe a com-
posed algorithm ξke;π, which, for each session, ﬁrst runs using
ξke, and upon a session key being accepted, then runs using
ξπ. To decide which sub-algorithm to call, the composed
algorithm ξke;π examines the value γ. If the key exchange
session has not yet accepted (γ (cid:54)= accepted) it calls ξke, other-
wise it calls ξπ. In either case, ξke;π passes only the required
variables, and updates the variables of the composed game
in a consistent way. Formally, the composed algorithm ξke;π
is deﬁned in Figure 9.
5.2 Syntax of composed games
The composed game, denoted Gke;π, allows the adversary
to simultaneously interact with multiple sessions of the com-
posed protocol; some of these sessions may be executing
the key exchange, while others are executing the symmet-
ric key protocol. Note that the adversary’s goal within the
composed game is to “break” the security of the symmetric
key protocol and not the key exchange protocol. We write
Adv
Gke;π
ke;π,A(1η) for its advantage.
We construct the composed game Gke;π using the internal
state and queries of the games for key exchange and sym-
metric key protocols. Given the partnering game Gsid for the
key exchange game and Gπ for the symmetric key protocol
we use an index notation to distinguish between the states of
the diﬀerent games, e.g. SSTke (resp. SSTπ) for the session
state of the key exchange partnering game (resp. symmetric
key protocol game).
Game state. The composed game contains all the internal
state of the key exchange and symmetric protocol games.
The session state function for the composed game SSTke;π
is deﬁned as the pair of key exchange session state, SSTke,
and symmetric key protocol state, SSTπ. Thus, SSTke;π :=
(SSTke, SSTπ), i.e. for all lsid ∈ LSID, SSTke;π(lsid):= (SSTke