common barriers to automation and how to circumvent them. Many applications
employ defensive session-handling mechanisms that terminate sessions, use
ephemeral anti-CSRF tokens, or use multistage processes to update application
state. Some new tools are described for handling these mechanisms, which let
you continue using automated testing techniques. A new section examines
CAPTCHA controls and some common vulnerabilities that can often be exploited
to circumvent them.
Chapter 15, “Exploiting Information Disclosure,” contains new sections about
XSS in error messages and exploiting decryption oracles.
Chapter 16, “Attacking Native Compiled Applications,” has not been updated.
Chapter 17, “Attacking Application Architecture,” has a new section about
vulnerabilities that arise in cloud-based architectures, and updated examples
of exploiting architecture weaknesses.
Chapter 18, “Attacking the Application Server,” contains several new examples
of interesting vulnerabilities in application servers and platforms, including Jetty,
the JMX management console, ASP.NET, Apple iDisk server, Ruby WEBrick web
server, and Java web server. It also has a new section on practical approaches
to circumventing web application fi rewalls.
Chapter 19, “Finding Vulnerabilities in Source Code,” has not been updated.
Chapter 20, “A Web Application Hacker’s Toolkit,” has been updated with
details on the latest features of proxy-based tool suites. It contains new sections
on how to proxy the traffi c of non-proxy-aware clients and how to eliminate SSL
errors in browsers and other clients caused by the use of an intercepting proxy.
This chapter contains a detailed description of the work fl ow that is typically
employed when you test using a proxy-based tool suite. It also has a new dis-
cussion about current web vulnerability scanners and the optimal approaches
to using these in different situations.
Chapter 21, “A Web Application Hacker’s Methodology,” has been updated
to refl ect the new methodology steps described throughout the book.
Tools You Will Need
This book is strongly geared toward hands-on techniques you can use to attack
web applications. After reading the book, you will understand the specifi cs of
each individual task, what it involves technically, and why it helps you detect
and exploit vulnerabilities. The book is emphatically not about downloading
a tool, pointing it at a target application, and believing what the tool’s output
tells you about the state of the application’s security.
ffllaasstt..iinndddd xxxxxxiiii 88//1199//22001111 1122::2233::0088 PPMM
Stuttard fl ast.indd V2 - 08/10/2011 Page xxxiii
Introduction xxxiii
That said, you will fi nd several tools useful, and sometimes indispensable,
when performing the tasks and techniques we describe. All of these are avail-
able on the Internet. We recommend that you download and experiment with
each tool as you read about it.
What’s on the Website
The companion website for this book at http://mdsec.net/wahh,which you can
also link to from www/wiley.com/go/webhacker2e, contains several resources
that you will fi nd useful in the course of mastering the techniques we describe
and using them to attack actual applications. In particular, the website contains
access to the following:
n Source code for some of the scripts we present in the book
n A list of current links to all the tools and other resources discussed in
the book
n A handy checklist of the tasks involved in attacking a typical application
n Answers to the questions posed at the end of each chapter
n Hundreds of interactive vulnerability labs that are used in examples
throughout this book and that are available on a subscription basis to
help you develop and refi ne your skills
Bring It On
Web application security remains a fun and thriving subject. We enjoyed writ-
ing this book as much as we continue to enjoy hacking into web applications
on a daily basis. We hope that you will also take pleasure from learning about
the different techniques we describe and how you can defend against them.
Before going any further, we should mention an important caveat. In most
countries, attacking computer systems without the owner’s permission is against
the law. The majority of the techniques we describe are illegal if carried out
without consent.
The authors are professional penetration testers who routinely attack web
applications on behalf of clients to help them improve their security. In recent
years, numerous security professionals and others have acquired criminal
records — and ended their careers — by experimenting on or actively attack-
ing computer systems without permission. We urge you to use the information
contained in this book only for lawful purposes.
ffllaasstt..iinndddd xxxxxxiiiiii 88//1199//22001111 1122::2233::0088 PPMM
Stuttard fl ast.indd V2 - 08/10/2011 Page xxxiv
ffllaasstt..iinndddd xxxxxxiivv 88//1199//22001111 1122::2233::0088 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 1
CHAPTER
1
Web Application (In)security
There is no doubt that web application security is a current and newsworthy
subject. For all concerned, the stakes are high: for businesses that derive increas-
ing revenue from Internet commerce, for users who trust web applications with
sensitive information, and for criminals who can make big money by stealing
payment details or compromising bank accounts. Reputation plays a critical role.
Few people want to do business with an insecure website, so few organizations
want to disclose details about their own security vulnerabilities or breaches.
Hence, it is not a trivial task to obtain reliable information about the state of
web application security today.
This chapter takes a brief look at how web applications have evolved and the
many benefi ts they provide. We present some metrics about vulnerabilities in
current web applications, drawn from the authors’ direct experience, demon-
strating that the majority of applications are far from secure. We describe the
core security problem facing web applications — that users can supply arbitrary
input — and the various factors that contribute to their weak security posture.
Finally, we describe the latest trends in web application security and how these
may be expected to develop in the near future.
1
cc0011..iinndddd 11 88//1199//22001111 1122::0022::0022 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 2
2 Chapter 1 n Web Application (In)security
The Evolution of Web Applications
In the early days of the Internet, the World Wide Web consisted only of web
sites. These were essentially information repositories containing static docu-
ments. Web browsers were invented as a means of retrieving and displaying
those documents, as shown in Figure 1-1. The fl ow of interesting information
was one-way, from server to browser. Most sites did not authenticate users,
because there was no need to. Each user was treated in the same way and was
presented with the same information. Any security threats arising from host-
ing a website were related largely to vulnerabilities in web server software (of
which there were many). If an attacker compromised a web server, he usually
would not gain access to any sensitive information, because the information
held on the server was already open to public view. Rather, an attacker typically
would modify the fi les on the server to deface the web site’s contents or use the
server’s storage and bandwidth to distribute “warez.”
Figure 1-1: A traditional website containing static information
Today, the World Wide Web is almost unrecognizable from its earlier form.
The majority of sites on the web are in fact applications (see Figure 1-2). They
are highly functional and rely on two-way fl ow of information between the
server and browser. They support registration and login, fi nancial transactions,
cc0011..iinndddd 22 88//1199//22001111 1122::0022::0022 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 3
Chapter 1 n Web Application (In)security 3
search, and the authoring of content by users. The content presented to users
is generated dynamically on the fl y and is often tailored to each specifi c user.
Much of the information processed is private and highly sensitive. Security,
therefore, is a big issue. No one wants to use a web application if he believes
his information will be disclosed to unauthorized parties.
Figure 1-2: A typical web application
Web applications bring with them new and signifi cant security threats. Each
application is different and may contain unique vulnerabilities. Most applica-
tions are developed in-house — many by developers who have only a partial
understanding of the security problems that may arise in the code they are
producing. To deliver their core functionality, web applications normally require
connectivity to internal computer systems that contain highly sensitive data and
that can perform powerful business functions. Fifteen years ago, if you wanted
to make a funds transfer, you visited your bank, and the teller performed the
transfer for you; today, you can visit a web application and perform the transfer
yourself. An attacker who compromises a web application may be able to steal
personal information, carry out fi nancial fraud, and perform malicious actions
against other users.
cc0011..iinndddd 33 88//1199//22001111 1122::0022::0022 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 4
4 Chapter 1 n Web Application (In)security
Common Web Application Functions
Web applications have been created to perform practically every useful function
you could possibly implement online. Here are some web application functions
that have risen to prominence in recent years:
n Shopping (Amazon)
n Social networking (Facebook)
n Banking (Citibank)
n Web search (Google)
n Auctions (eBay)
n Gambling (Betfair)
n Web logs (Blogger)
n Web mail (Gmail)
n Interactive information (Wikipedia)
Applications that are accessed using a computer browser increasingly overlap
with mobile applications that are accessed using a smartphone or tablet. Most
mobile applications employ either a browser or a customized client that uses
HTTP-based APIs to communicate with the server. Application functions and
data typically are shared between the various interfaces that the application
exposes to different user platforms.
In addition to the public Internet, web applications have been widely adopted
inside organizations to support key business functions. Many of these provide
access to highly sensitive data and functionality:
n HR applications allowing users to access payroll information, give and
receive performance feedback, and manage recruitment and disciplinary
procedures.
n Administrative interfaces to key infrastructure such as web and mail
servers, user workstations, and virtual machine administration.
n Collaboration software used for sharing documents, managing work-
fl ow and projects, and tracking issues. These types of functionality often
involve critical security and governance issues, and organizations often
rely completely on the controls built into their web applications.
n Business applications such as enterprise resource planning (ERP) software,
which previously were accessed using a proprietary thick-client applica-
tion, can now be accessed using a web browser.
cc0011..iinndddd 44 88//1199//22001111 1122::0022::0033 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 5
Chapter 1 n Web Application (In)security 5
n Software services such as e-mail, which originally required a separate
e-mail client, can now be accessed via web interfaces such as Outlook
Web Access.
n Traditional desktop offi ce applications such as word processors and spread-
sheets have been migrated to web applications through services such as
Google Apps and Microsoft Offi ce Live.
In all these examples, what are perceived as “internal” applications are increas-
ingly being hosted externally as organizations move to outside service providers
to cut costs. In these so-called cloud solutions, business-critical functionality
and data are opened to a wider range of potential attackers, and organizations
are increasingly reliant on the integrity of security defenses that are outside of
their control.
The time is fast approaching when the only client software that most com-
puter users will need is a web browser. A diverse range of functions will have
been implemented using a shared set of protocols and technologies, and in so
doing will have inherited a distinctive range of common security vulnerabilities.
Benefi ts of Web Applications
It is not diffi cult to see why web applications have enjoyed such a dramatic rise
to prominence. Several technical factors have worked alongside the obvious
commercial incentives to drive the revolution that has occurred in how we use
the Internet:
n HTTP, the core communications protocol used to access the World Wide
Web, is lightweight and connectionless. This provides resilience in the
event of communication errors and avoids the need for the server to
hold open a network connection to every user, as was the case in many
legacy client/server applications. HTTP can also be proxied and tunneled
over other protocols, allowing for secure communication in any network
confi guration.
n Every web user already has a browser installed on his computer and
mobile device. Web applications deploy their user interface dynamically
to the browser, avoiding the need to distribute and manage separate
client software, as was the case with pre-web applications. Changes to
the interface need to be implemented only once, on the server, and take
effect immediately.
n Today’s browsers are highly functional, enabling rich and satisfying
user interfaces to be built. Web interfaces use standard navigational and
cc0011..iinndddd 55 88//1199//22001111 1122::0022::0033 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 6
6 Chapter 1 n Web Application (In)security
input controls that are immediately familiar to users, avoiding the need
to learn how each individual application functions. Client-side scripting
enables applications to push part of their processing to the client side, and
browsers’ capabilities can be extended in arbitrary ways using browser
extension technologies where necessary.
n The core technologies and languages used to develop web applications are
relatively simple. A wide range of platforms and development tools are
available to facilitate the development of powerful applications by relative
beginners, and a large quantity of open source code and other resources
is available for incorporation into custom-built applications.
Web Application Security
As with any new class of technology, web applications have brought with them
a new range of security vulnerabilities. The set of most commonly encountered
defects has evolved somewhat over time. New attacks have been conceived
that were not considered when existing applications were developed. Some
problems have become less prevalent as awareness of them has increased. New
technologies have been developed that have introduced new possibilities for
exploitation. Some categories of fl aws have largely gone away as the result of
changes made to web browser software.
The most serious attacks against web applications are those that expose
sensitive data or gain unrestricted access to the back-end systems on which
the application is running. High-profi le compromises of this kind continue
to occur frequently. For many organizations, however, any attack that causes
system downtime is a critical event. Application-level denial-of-service attacks
can be used to achieve the same results as traditional resource exhaustion
attacks against infrastructure. However, they are often used with more subtle
techniques and objectives. They may be used to disrupt a particular user or
service to gain a competitive edge against peers in the realms of fi nancial trad-
ing, gaming, online bidding, and ticket reservations.
Throughout this evolution, compromises of prominent web applications have
remained in the news. There is no sense that a corner has been turned and that
these security problems are on the wane. By some measure, web application
security is today the most signifi cant battleground between attackers and those
with computer resources and data to defend, and it is likely to remain so for
the foreseeable future.
cc0011..iinndddd 66 88//1199//22001111 1122::0022::0033 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 7
Chapter 1 n Web Application (In)security 7
“This Site Is Secure”
There is a widespread awareness that security is an issue for web applications.
Consult the FAQ page of a typical application, and you will be reassured that
it is in fact secure.
Most applications state that they are secure because they use SSL. For example:
This site is absolutely secure. It has been designed to use 128-bit Secure Socket
Layer (SSL) technology to prevent unauthorized users from viewing any of your
information. You may use this site with peace of mind that your data is safe with us.
Users are often urged to verify the site’s certifi cate, admire the advanced
cryptographic protocols in use, and, on this basis, trust it with their personal
information.
Increasingly, organizations also cite their compliance with Payment Card
Industry (PCI) standards to reassure users that they are secure. For example:
We take security very seriously. Our web site is scanned daily to ensure that we
remain PCI compliant and safe from hackers. You can see the date of the latest scan
on the logo below, and you are guaranteed that our web site is safe to use.
In fact, the majority of web applications are insecure, despite the widespread
usage of SSL technology and the adoption of regular PCI scanning. The authors
of this book have tested hundreds of web applications in recent years. Figure 1-3
shows what percentage of applications tested during 2007 and 2011 were found
to be affected by some common categories of vulnerability:
n Broken authentication (62%) — This category of vulnerability encom-
passes various defects within the application’s login mechanism, which
may enable an attacker to guess weak passwords, launch a brute-force
attack, or bypass the login.
n Broken access controls (71%) — This involves cases where the application
fails to properly protect access to its data and functionality, potentially
enabling an attacker to view other users’ sensitive data held on the server
or carry out privileged actions.
n SQL injection (32%) — This vulnerability enables an attacker to submit
crafted input to interfere with the application’s interaction with back-end
databases. An attacker may be able to retrieve arbitrary data from the
application, interfere with its logic, or execute commands on the database
server itself.
cc0011..iinndddd 77 88//1199//22001111 1122::0022::0033 PPMM
Stuttard c01.indd V2 - 07/07/2011 Page 8
8 Chapter 1 n Web Application (In)security
n Cross-site scripting (94%) — This vulnerability enables an attacker to