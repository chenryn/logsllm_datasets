个而终止的话,那么尾声部分还是有机会运行，并返回一个值以代替终止子句所提供的默认值的。
认的返回值，哪怕是它们没有导致循环终止。尽管如此，如果循环不是因为这些终止测试中的一
从循环中返回，不但跳过任何连续的循环子句而且还跳过尾声部分。它们还为整个循环提供了默
环的尾声部分。这在是否跳出循环的判断难以用一个简单的while或until子句来表达时是有
个循环子句，因此它可以用在一个do子句的Lisp形式中的任何地方。它也会导致立即跳转到循
真时停止循环。
结束循环。while子句在测试形式首次为假时终止循环；相反地，until子句在测试形式首次为
递到尾声部分，并跳过循环体的其余部分。尾声部分随后会返回一个值或是做任何想做的事情来
环。它们的区别在于，如果终止循环的话需要什么条件以及如何决定。
是由终止子句while、until、always、never和thereis来提供的。它们全都遵循相同的模式:
些用来汇聚值的通用模式那样，也存在用来决定何时终止循环的通用模式。在LOOP中这些模式
知道do子句里的return子句、RETURN或RETURN-FROM形式可以立即终止循环。但正如存在一
22.12
中查到匹配某些特征的项。你可以像下面这样使用一对嵌套的循环来找到它：
是第一个子句。举一个简单的例子，假设lists是一个列表的列表，而你想要在这些嵌套的列表
NIL)，那么循环将被立即终止，并返回NIL。如果循环可以一直运行直到完成，那么就会提供默
子句仅返回布尔值，因此在你需要用一个循环表达式来构成谓词时，它们将是最有用的。你可以
你可以使用循环关键字named为LooP命名。如果一个named子句出现在一个循环中，那么它必须
认值T。
用的。
250
另外三个子句即always、never和thereis，采用极端偏执的方式来终止循环。它们立即
另一个温和的终止形式是由LOOP-FINISH宏所提供的。这是一个正规的Lisp形式，并非一
举个例子，如果你想要测试一个列表numbers中的所有数都是偶数，可以写成这样:
循环关键字while和until代表了“温和的”终止子句。当它们决定终止循环时，控制会传
尽管for和repeat子句提供了控制循环次数的方法，但有时你需要更早地中断循环。你已经
五种子句都会在每次通过选代时对test-form求值，然后基于得到的值来决定是否终止循
loop-keyword test-form
(loop named outer for list in lists do 
终止测试
(1oop for 
第22章高阶LOOP
(return-from outer item))))
item
www.TopSage.com
ing-for-p item}
---
## Page 268
的顺序执行任何有条件或无条件的执行、汇聚或终止测试子句。如果循环中的任何子句终止了循
任何子句组合在一起：
22.13小结
那么循环就会终止并返回该值。如果循环得以运行到完成，那么thereis子句会提供默认值NIL。
解。除此之外，用不用它就完全取决于你了。
环，那么循环体的其余部分将被跳过，然后整个循环可能在运行了尾声部分以后返回。
② 关于LOOP，我尚未讨论过的一个方面是用来声明循环变量类型的语法。当然，我也还没有讨论过LOOP之外的类
①一些Common Lisp实现允许你交替使用主体子句和for子句，但这在严格来讲是未定义的，并且另一些实现会拒
这基本上就是所有的内容了。?本书后面的代码中将频繁用到LOOP，因此有必要对它多些了
现在你已经看到了LOOP功能的所有主要特性。只要你遵循下列规则就可以将我所讨论过的
有了这些基础，就可以进人本书其余部分的实践性章节了。首先是编写一个垃圾过滤器。
当循环在迭代时，循环体被执行的方式是首先步进那些迭代控制变量，然后以出现在循环中
绝这样的循环。
口执行由任何finally子句（尾声部分）所提供的形式，以它们出现在循环中的顺序来执行.
口迭代，同时按照下面一段文字所描述的过程来执行循环体的代码。
口执行由任何initially子句（序言部分）所提供的形式，以它们出现在循环中的顺序来
口初始化所有由with或for子句声明的局部变量，以及由汇聚子句创建的隐含局部变量。
LOOP宏将展开成完成下列操作的代码：
口以任何finally子句结束。
口然后是主体子句：有条件和无条件的执行、汇聚和终止测试。
口在named子句后面是所有的initially、with、for和repeat子句。
如果有named子句的话，它必须是第-个子句。
Tin ( ((reuo d-xeuo-athtp) siaraua "gapoqe ssoioe 1euo roy doo)
(loop for char across "abc123" thereis (digit-char-p char)) → 1
(if (loop for n in numbers never (oddp n))
下面是等价的另一种写法：
(if (loop for n in numbers always (evenp n))
手册。
型声明。我将在第32章里谈及这个一般主题。对于它们与LooP配合使用的细节，请参考你所喜爱的Common Lisp
执行。
提供初始值的形式按照它们在循环中出现的顺序进行求值。
www.TopSage.com
22.13小结
251
---
## Page 269
COM.GIGAMONKEYS.PATHNAMES包:
我使用了包名COM.GIGAMONKEYS.SPAM，这个包同时用到标准COMMON-LISP包和来自第15章的
而是会把精力集中在对新邮件进行分类以及训练过滤器上。
23.1垃圾邮件过滤器的核心
频率组合成一个整体上的可能性。
件还是正常邮件。他把这个方法称为贝叶斯（Bayesian）过滤，这种统计技术可以将个别词汇的
圾邮件和正常邮件中的频率，然后基于该频率分析新邮件中的单词，从而计算出该邮件是垃圾邮
件，通过统计哪些词出现在哪一类邮件中来做到这点。这个过滤器将持续跟踪特定单词出现在垃
我想在这件事上花尽可能少的时间。
时间试图编写这样一个基于规则的过滤器，并最终意识到这是-一个非常折磨人的任务。
如果正文的一行中有三个或更多词是全部大写的，那么它可能是垃圾邮件。Graham花了几个月
多数垃圾邮件过滤器都基于手工编写的规则：如果标题中带有×××，那么它可能是垃圾邮件；
这个应用比较大，因此有必要定义一个包来避免名字冲突。在从本书网站下载到的源代码中，
②关于Graham所描述的技术是否真的是“贝叶斯”一直以来有些不同的看法。不过这个名字已经广为流传并成为谈
为了避免站在垃圾邮件发送者的角度来思考，Graham决定尝试从非垃圾邮件中区分垃圾邮
为了找出垃圾邮件的每一个特点，你必须站在垃圾邮件发送者的角度来思考。而且坦白地说
①此文可从http://www.paulgraham.com/spam.html找到，也收录在Hackers & Painters:Big Ideas from the Computer Age
在本章里，你将实现一个垃圾邮件过滤引擎的核心。我们不会编写完整的垃圾邮件过滤程序
（O'Reilly，2004）一书中。
任何含有这个应用程序代码的文件都应当以下面这行开始：
论垃圾邮件过滤时“统计”的代名词。
002年，PaulGraham在把Viaweb卖给Yahoo之后腾出一些时间写了《一个处理垃圾邮件的
-lisp :com.gigamonkeys.pathnames))
实践：垃圾邮件过滤器
www.TopSage.com
---
## Page 270
该类带有三个槽。
中出现的次数。为方便地将这些数据与单词本身保存在一起，可以定义一个类word-feature，
特征是出现在文本中的单词。对于每个单词，需要跟踪它在垃圾邮件中出现的次数和在正常邮件
一类。在这三个函数中，classification是最简单的。可以假设score在邮件为垃圾邮件时返
出一个值，该值随后通过函数classification分成三类—垃圾邮件、有用信息或不确定中的
很简单，可以通过后面要编写的其他函数来定义它。
受一封邮件的文本作为参数并将该邮件分类成垃圾邮件、有用信息或不确定。实现这个基本函数
中这将使提示符从CL-USER>变成SPAM>，像下面这样：
回
一个接近1的值，对正常邮件返回接近0的值，而在不确定时返回接近0.5的值。
①尽管如此，并不推荐你使用一个以com.gigamonkeys开头的包来分发该应用，因为你并不控制那个域。
(defclassword-feature()
函数extract-features也几乎是一样直接，尽管它需要更多一些的代码。目前你所提取的
因此你可以像下面这样实现classification：
从里向外，分类邮件的第一步是从文本中提取出特征词并传递给score函数。score将计算
(defun classification (score)
(defun classify(text)
定义了包以后，就可以开始实际的编码工作了。你要实现的主函数有一个简单的任务一
SPAM>
#
还可以通过在REPL中输入相同的形式来切换到这个包，从而测试你所编写的函数。在SLIME
(defparameter*max-ham-score*.4)
(in-package:com.gigamonkeys.spam)
(classification (score (extract-features text))))
(（word
(cond
:initarg :ham-count
(ham-count
:documentation "Number of spams we have seen this feature in.")
:initform0
:accessor spam-count
spam-count
:documentation "The word this feature represents.")
:accessor word
:initarg :word
(t'unsure)))
（>=
（中。
stream-variable被绑定到一个流，可以向其中打印你想要的任何东西。打印到该流中的任何东
其中的objeCt参数是一个求值到被打印对象的表达式。在PRINT-UNREADABLE-OBJECT主体中，
个宏PRINT-UNREADABLE-OBJECT.
feature上的PRINr-OBJEcr方法。为了让这样的方法实现起来更简单，Common Lisp提供了一
OBJEcT来实现的。因此，为了改变word-feature的打印方式，你只需定义一个特化在word-
以更清晰地打印出word-feature对象。第17章提到过，所有对象的打印都是由广义函数pRINT-
②PRINT-UNREADABLE-OBJECT也会在打印控制变量*PRINT-READABLY*为真时报错。这样，一个完全由PRINT-
① 使用PRINT-UNREADABLE-OBJECT的主要原因是，在某人试图可读地打印你的对象时，它会负责报一个适当的
现在有了跟踪单独特征的方式，几乎可以开始实现score了。但首先你需要编写用来训练垃
通过关键字参数tYPe和identity，PRINT-UNREADABLE-OBJECT还可以让你包含对象的类
错误，例如在使用FORMAT指令～S时。
再在REPL中测试extract-features时，可以更清楚地看到那些被提取出的特征。
(print-unreadable-object (object stream-variable &key type identity)
正如你所看到的，打印任意对象的默认方法输出的信息太简单。对于这个程序来说，最好可
(defmethod print-object ((object word-feature) stream)
 o  1  - 
OBJECT.
UNREADABLE-OBJECT形式组成的PRINT-OBJECT方法将正确实现遵守*PRINT-READABLY*协议的PRINT-
#)
#<WORD-FEATURE
body-form*)
训练过滤器