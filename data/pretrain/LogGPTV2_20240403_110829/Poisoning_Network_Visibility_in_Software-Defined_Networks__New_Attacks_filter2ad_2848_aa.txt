# Poisoning Network Visibility in Software-Defined Networks: New Attacks and Countermeasures

**Authors:** Sungmin Hong, Lei Xu, Haopei Wang, Guofei Gu

**Affiliations:**
- **Sungmin Hong**, SUCCESS Lab, Texas A&M University
- **Lei Xu**, SUCCESS Lab, Texas A&M University
- **Haopei Wang**, SUCCESS Lab, Texas A&M University
- **Guofei Gu**, SUCCESS Lab, Texas A&M University

**Contact Information:**
- **PI Email:** [EMAIL]

---

## Abstract

Software-Defined Networking (SDN) is a new networking paradigm that grants a controller and its applications comprehensive network visibility and flexible programmability, enabling innovations in network protocols and applications. One of the core advantages of SDN is its logically centralized control plane, which provides holistic network visibility, a foundation many SDN applications rely on. For the first time, we propose new attack vectors unique to SDN that challenge this foundation. These attacks are conceptually similar to spoofing attacks in traditional networks (e.g., ARP poisoning), but they exploit unique vulnerabilities specific to SDN. Successful attacks can poison the network topology information, leading to serious hijacking, denial of service, or man-in-the-middle attacks. Our study shows that all major SDN controllers (e.g., Floodlight, OpenDaylight, Beacon, and POX) are vulnerable to these Network Topology Poisoning Attacks. We then investigate mitigation methods and present TopoGuard, a new security extension for SDN controllers that provides automatic and real-time detection of such attacks. Our evaluation with a prototype implementation of TopoGuard in the Floodlight controller demonstrates that it effectively secures network topology while introducing minimal impact on normal operations.

---

## 1. Introduction

Software-Defined Networking (SDN) has emerged as a new network paradigm that innovates the traditional network infrastructure by separating the control plane from the data plane, providing holistic network visibility and flexible programmability. The SDN controller acts as the brain of the network, allowing users to design and control the network using their own applications. SDN, particularly its popular realization, OpenFlow, has been increasingly employed in both academic and real-world production networks, ranging from campus network innovation to cloud network virtualization and datacenter network optimization.

Given the critical role of the controller in the SDN architecture, any serious vulnerability in its design or implementation can lead to significant disruptions or even complete control by attackers. Several approaches to SDN security have been proposed, such as FortNOX, FRESCO, FlowVisor, VeriFlow, and AvantGuard. However, these approaches primarily focus on network/rule consistency, authorization, conflict resolution, app development, or network resource consumption, rather than fundamental vulnerabilities within OpenFlow controllers.

In this paper, we study the network topology services and applications of mainstream OpenFlow controllers and identify several new vulnerabilities that an attacker can exploit to poison the network topology information. The entire network-wide visibility is a key innovation of SDN compared to legacy networking technologies. If the fundamental network topology information is poisoned, all dependent network services will be affected, causing catastrophic problems. For example, routing services inside the OpenFlow controller can be manipulated to create black hole routes or man-in-the-middle attacks. We uncover new security loopholes in the Host Tracking Service and Link Discovery Service of OpenFlow controllers and introduce two Network Topology Poisoning Attacks: Host Location Hijacking Attack and Link Fabrication Attack. Our study shows that all major open-source SDN controllers (Floodlight, OpenIRIS, OpenDayLight, Beacon, Maestro, NOX, POX, and Ryu) are affected, raising serious concerns about the deployment and future of SDN.

To mitigate these attacks, we investigate possible defense strategies. We note that static configuration is not a viable solution due to the tedious and error-prone manual effort required and the dynamic nature of SDN. To balance security and usability, we propose TopoGuard, a new security extension for existing OpenFlow controllers that provides automatic and real-time detection of network topology exploitation. TopoGuard uses SDN-specific features to check preconditions and postconditions, verifying the legitimacy of host migration and switch port properties to prevent Host Location Hijacking and Link Fabrication Attacks.

In summary, our paper makes the following contributions:
- We perform the first security analysis of the SDN/OpenFlow Topology Management Service, discovering new vulnerabilities in the Device Tracking Service and Link Discovery Service of eight current mainstream SDN/OpenFlow controllers.
- We propose Network Topology Poisoning Attacks that exploit these vulnerabilities and demonstrate their feasibility in both Mininet emulation and a hardware SDN testbed.
- We investigate defense strategies and propose automatic mitigation approaches against Network Topology Poisoning Attacks, along with a prototype defense system, TopoGuard, implemented in Floodlight and extendable to other controllers. Our evaluation shows that TopoGuard imposes only a negligible performance overhead.

The rest of the paper is organized as follows: Section 2 provides background information on SDN/OpenFlow and its Topology Management Service. Section 3 describes the vulnerabilities in existing SDN Topology Management Services and presents the Network Topology Poisoning Attacks. Section 4 investigates defense strategies against these attacks. Section 5 details the design and implementation of TopoGuard, along with its effectiveness and performance evaluation. Section 6 discusses potential issues and limitations. Section 7 reviews related work on SDN/OpenFlow security and similar attacks. Section 8 concludes the paper.

---

## 2. Background

### 2.1 SDN/OpenFlow Background

**Basic Operation of SDN:**
Software-Defined Networking (SDN) is a programmable network framework that decouples the control plane from the data plane. An SDN application in the control plane generates complex network functions such as computing routing paths, monitoring network behavior, and managing access control. The data plane handles hardware-level packet processing based on high-level policies from the control plane. SDN enables users to design and distribute innovative flow handling and network control algorithms, adding intelligence and flexibility to the control plane. OpenFlow, a leading reference implementation of SDN, defines the communication protocol between the control plane and the data plane. An OpenFlow switch establishes a TCP connection (with TLS/SSL options) to the OpenFlow controller before exchanging symmetric/asynchronous OpenFlow messages. When a new packet arrives at an OpenFlow switch, the switch checks if the packet matches any existing flow rules. If a match is found, the switch processes the packet based on the highest-priority rule. Otherwise, the switch sends a Packet-In message to the OpenFlow controller, which decides the appropriate action. The controller either issues a Packet-Out message for one-time processing or instructs the switch to install new flow rules via a Flow-Mod message. Additionally, any change in switch port status triggers a Port-Status message to the controller.

**Operational Distinctions Between SDN and Legacy Networks:**
SDN/OpenFlow introduces several innovations compared to legacy networks. Table 1 highlights some key distinctions relevant to this paper:

| **Distinction** | **OpenFlow Networks** | **Legacy Networks** |
|-----------------|-----------------------|---------------------|
| **Source MAC Address** | Unchanged when passing through OpenFlow switches | Changed when passing through layer 3 devices |
| **Control Message Authentication** | Between OpenFlow switches and controllers | Among layer 3 devices |
| **Spanning Tree Implementation** | Centralized calculation based on topology | Distributed computation using BPDUs |

### 2.2 Unique Topology Management in OpenFlow Controllers

Topology management in SDN is unique due to the logically centralized network controller. The OpenFlow controller maintains topology information and provides it to upper-layer services and applications, facilitating network management and programmability. Both core controller components and SDN applications are tightly coupled with the topology information, making it critical for the overall operation of the network.

**Topology Management Components:**
1. **Switch Discovery:** When an OpenFlow switch connects to the controller, its information is stored for future management.
2. **Host Discovery:** When a switch receives a packet from a host and no matching flow entry is found, a Packet-In message is sent to the controller, which learns the host's location.
3. **Internal Link Discovery:** The controller uses the OpenFlow Discovery Protocol (OFDP) to discover internal links (switch-to-switch links).

**Host Tracking Service:**
The Host Tracking Service (HTS) in the OpenFlow controller maintains a Host Profile to track the location of hosts. This service is crucial for managing network dynamics, such as the frequent migration of virtual machines in data centers. The HTS dynamically updates Host Profiles by probing Packet-In messages and handling host events (JOIN and MOVE). During JOIN, the controller learns the initial location of a host. During MOVE, the controller updates the Host Profile when a host changes its location.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the research, ensuring that the content is well-organized and easy to follow.