title:Poisoning Network Visibility in Software-Defined Networks: New Attacks
and Countermeasures
author:Sungmin Hong and
Lei Xu and
Haopei Wang and
Guofei Gu
Poisoning Network Visibility in Software-Deﬁned
Networks: New Attacks and Countermeasures
Sungmin Hong*
SUCCESS Lab
Texas A&M University
PI:EMAIL
Lei Xu*
SUCCESS Lab
Haopei Wang
SUCCESS Lab
Guofei Gu
SUCCESS Lab
Texas A&M University
PI:EMAIL
Texas A&M University
PI:EMAIL
Texas A&M University
PI:EMAIL
Abstract—Software-Deﬁned Networking (SDN) is a new net-
working paradigm that grants a controller and its applications
an omnipotent power to have holistic network visibility and
ﬂexible network programmability, thus enabling new innovations
in network protocols and applications. One of the core advantages
of SDN is its logically centralized control plane to provide the
entire network visibility, on which many SDN applications rely.
For the ﬁrst time in the literature, we propose new attack vectors
unique to SDN that seriously challenge this foundation. Our new
attacks are somewhat similar in spirit to spooﬁng attacks in legacy
networks (e.g., ARP poisoning attack), however with signiﬁcant
differences in exploiting unique vulnerabilities how current SDN
operates differently from legacy networks. The successful at-
tacks can effectively poison the network topology information,
a fundamental building block for core SDN components and
topology-aware SDN applications. With the poisoned network
visibility, the upper-layer OpenFlow controller services/apps may
be totally misled, leading to serious hijacking, denial of service
or man-in-the-middle attacks. According to our study, all current
major SDN controllers we ﬁnd in the market (e.g., Floodlight,
OpenDaylight, Beacon, and POX) are affected,
i.e., they are
subject to the Network Topology Poisoning Attacks. We then
investigate the mitigation methods against the Network Topology
Poisoning Attacks and present TopoGuard, a new security exten-
sion to SDN controllers, which provides automatic and real-time
detection of Network Topology Poisoning Attacks. Our evaluation
on a prototype implementation of TopoGuard in the Floodlight
controller shows that the defense solution can effectively secure
network topology while introducing only a minor impact on
normal operations of OpenFlow controllers.
I.
INTRODUCTION
Software-Deﬁned Networking (SDN) has emerged as a
new network paradigm to innovate the ossiﬁed network in-
frastructure by separating the control plane from the data plane
(e.g., switches), as well as providing holistic network visibility
and ﬂexible programmability. As the brain of the network, a
SDN controller grants users a great tool to design and control
* The ﬁrst two authors contribute equally to the paper.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23283
the network using their own applications atop the controller’s
core services. Not only in academic environments, but also
in real-world production networks, SDN, particularly its pop-
ular realization OpenFlow1, has been increasingly employed.
Many application scenarios have been studied and deployed
since then, ranging from campus network innovation to cloud
network virtualization and datacenter network optimization.
Since the controller is the core of the SDN architecture, if
the OpenFlow controller suffers from any serious vulnerability
in its design/implementation,
the entire network would be
thrown into chaos, or even totally under the control of attack-
ers. To date, several approaches to SDN security have been
proposed. FortNOX [27] solves the rule conﬂicts that violate
existing security policies, and provides role-based authoriza-
tion and security constraint enforcement
in the controller
kernel. FRESCO [30] provides a composable programming
framework to facilitate fast development of SDN security
apps. FlowVisor [28] provides isolation of different network
slices and VeriFlow [19] veriﬁes network-wide correctness by
checking the forwarding graph representation derived from
ﬂow modiﬁcation messages. AvantGuard [31] provides se-
curity protection against data-to-control-plane saturation at-
tacks. However, these approaches have primarily concentrated
on network/rule consistency/authorization, conﬂict resolution,
app developing, or network resource consumption/scalability,
not on the fundamental vulnerabilities inside OpenFlow con-
trollers.
In this paper, we study network topology services/apps
of the mainstream OpenFlow controllers and identify several
new vulnerabilities that an attacker can exploit to poison the
network topology information in OpenFlow networks. The
whole network-wide visibility is one of the key innovations
provided by SDN compared to legacy networking technologies.
As a fundamental building block for network management, the
topology information is adopted to most controller core ser-
vices and upper-layer apps, e.g., those related to packet routing,
mobility tracking, and network virtualization and optimization.
However, if such fundamental network topology information is
poisoned, all the dependent network services will become im-
mediately affected, causing catastrophic problems. For exam-
ple, the routing services/apps inside the OpenFlow controller
1In this paper, we may use SDN and OpenFlow interchangeably.
can be manipulated to incur a black hole route or man-in-the-
middle attack. In this paper, we uncover new security loopholes
existing in current Host Tracking Service and Link Discovery
Service in OpenFlow controllers. Furthermore, We introduce
two Network Topology Poisoning Attacks, i.e., Host Location
Hijacking Attack and Link Fabrication Attack. Upon the ex-
ploitation of the Host Tracking Service, an attacker can hijack
the location of a network server to phish its service subscribers.
By poisoning the Link Discovery Service, an adversary can
inject false links to create a black-hole route or launch a
man-in-the-middle attack to eavesdrop/manipulate messages
in the network. Our new attacks share some similarities in
spirit to traditional spooﬁng attacks in legacy networks (e.g.,
ARP Poisoning Attack), however with signiﬁcant differences
in exploiting unique SDN vulnerabilities. According to our
study, all current major open source SDN controllers in the
market (i.e., Floodlight, OpenIRIS, OpenDayLight, Beacon,
Maestro, NOX, POX and Ryu) are affected. This raises a
serious alarm because these vulnerabilities could signiﬁcantly
impact the deployment of current SDN networks and greatly
hurt the future of SDN.
In order to mitigate such attacks, we investigate possible
defense strategies. We note that it is difﬁcult to simply use
static conﬁguration to solve the problem (similar to using static
ARP entry for hosts or the port security feature for switches
[2] to solve ARP poisoning attacks), because it requires
tedious and error-prone manual effort and is not suitable for
handling network dynamics, which is a valuable innovation
of SDN. To better balance the security and usability, in this
paper, we propose TopoGuard, a new security extension to the
existing OpenFlow controllers to provide automatic and real-
time detection of network topology exploitation. By utilizing
SDN-speciﬁc features, TopoGuard checks precondition and
postcondition to verify the legitimacy of host migration and
switch port property to prevent the Host Location Hijacking
Attack and the Link Fabrication Attack.
In short, our paper makes the following contributions:
• We perform the ﬁrst
security analysis on the
SDN/OpenFlow Topology Management Service. In
particular, we have discovered new vulnerabilities
in the Device Tracking Service and Link Discovery
Service in eight current mainstream SDN/OpenFlow
controllers.
• We propose Network Topology Poisoning Attacks
the vulnerabilities we have found. We
to exploit
demonstrate the feasibility of those attacks both in the
Mininet emulation environment and a hardware SDN
testbed.
• We investigate the defense space and propose auto-
matic mitigation approaches against Network Topol-
ogy Poisoning Attacks, along with a prototype defense
system, TopoGuard, currently implemented in Flood-
light, but could be easily extended to other controllers.
Our evaluation shows that TopoGuard imposes only a
negligible performance overhead.
The rest of the paper is organized as follows: Section II
provides background information about the SDN/OpenFlow
and its Topology Management Service. Section III describes
vulnerabilities in existing SDN Topology Management Service
and presents the Network Topology Poisoning Attacks. Section
IV investigates the defense strategies against Network Topol-
ogy Poisoning Attacks. Section V proposes our design and
implementation of TopoGuard along with its effectiveness and
performance evaluation. Section VI discusses possible issues
and limitations. Section VII reviews related work about current
security research in the SDN/OpenFlow area and similar
attacks in the literature. Section VIII concludes this paper.
II. BACKGROUND
In
this
section, we
to
SDN/OpenFlow and its Topology Management Services
implemented in the existing OpenFlow controllers.
introduction
provide
an
A. SDN/OpenFlow Background
The Basic Operation of SDN. Software-Deﬁned Network-
ing (SDN) is a new programmable network framework that
decouples the control plane from the data plane. An SDN
application in the control plane generates complicated net-
work functions such as computing a routing path, monitoring
network behavior, and managing network access control. The
data plane handles hardware level network packet processing
based on high level policies from the control plane. SDN
enables users to design and distribute innovative ﬂow handling
and network control algorithms conveniently, and add much
more intelligence and ﬂexibility to the control plane. We
can implement new control functions or protocols just as
writing a normal application (analogous to writing an app for
smartphone/Android OS). OpenFlow, as a leading reference
implementation of SDN, deﬁnes the communication protocol
between the control plane and the data plane. An OpenFlow
switch must establish a TCP connection (with an option
of TLS/SSL) to the OpenFlow controller before exchanging
symmetric/asynchronous OpenFlow messages. When a new
packet comes into an OpenFlow switch, the switch checks if
the packet matches any existing ﬂow rules. If so, the switch
will process the packet based on the matching rule with
the highest priority. Otherwise, the switch sends a Packet-
In OpenFlow message to the OpenFlow controller to ask for
proper actions according to network policies speciﬁed in the
SDN apps. Once the speciﬁc decision is made, the OpenFlow
controller either issues a Packet-Out message for the one-time
packet processing or instructs the OpenFlow switch to install
new ﬂow rules by sending a Flow-Mod message. In addition,
whenever any change on a switch port is detected, a Port-Status
OpenFlow message must be sent to the controller.
Operational Distinctions Between SDN and Legacy
Networks. SDN/OpenFlow introduces many networking in-
novations, as described in its latest speciﬁcation [4]. In this
2
Distinctions
Source MAC Address
Control Message Authentication
Spanning Tree Implementation
OpenFlow Networks
Legacy Networks
Unchanged when passing the OpenFlow switches
Between the OpenFlow switches and controllers
Centralized calculation based on topology
Changed when passing layer 3 devices
Among layer 3 devices
In a distributed manner
TABLE I: The Distinctions Between Legacy Networks and OpenFlow Networks Highlighted in This Paper
paper, we do not emphasize all of those details between the
OpenFlow networks and the legacy networks. Instead, we only
list some distinctions relevant to the context of this paper,
as shown in Table I, which are helpful to explain the idea
of this paper. First, the legacy layer 3 devices (e.g., routers)
rewrite the layer 2 identity (i.e., source MAC address) of a
packet when forwarding it, however the normal behavior of an
OpenFlow switch is to keep the layer 2 identity unchanged.2
For example, the legacy layer 3 devices enforce Proxy ARP
[7] (i.e., they reply ARP requests intended for destination
hosts) by ”falsifying” the layer 2 identity inside ARP replies;
the OpenFlow controller, nevertheless, provides ARP proxy
without manipulating ARP replies due to its global view of
host
the Control
Message Authentication is among layer 3 devices; however, in
the OpenFlow networks, the Control Message Authentication
is enforced between switches and controllers because of the
separation of the control plane and the data plane. Third,
unlike legacy networks that utilize BPDUs (Bridge Protocol
Data Units) to compute Spanning Tree Protocol (STP) in a
distributed manner,
the OpenFlow controller is capable of
centralized calculation of Spanning Tree based on the topology
view.
information. Second,
in legacy networks,
B. Unique Topology Management in OpenFlow Controllers
Different from legacy networks, topology management is
unique in SDN networks due to the newly added, logically
centralized network controller. In order to facilitate network
management and programmability, the OpenFlow controller
maintains topology information and provides such visibility to
upper services/apps, as shown in Figure 1. More importantly,
not only all controllers use the same topology discovery
mechanism, but also both core controller components and SDN
applications are tightly coupled with the topology information.
The more OpenFlow applications are developed, the more
critical dependencies would affect the whole components in
the controller.
Generally, in an SDN/OpenFlow network, topology man-
agement includes three parts: (1) switch discovery, (2) host dis-
covery, (3) internal link (i.e., switch-to-switch link) discovery.
The switch discovery does not require any additional protocol
since when an OpenFlow switch establishes a connection to
the OpenFlow controller, the switch information should be
stored in the OpenFlow controller for future management.
2The OpenFlow switches can manipulate packet headers by using the
Set-Field action if the application needs to do so. However, Set-Field is
typically optional for the OpenFlow switch implementations to increase their
functionalities.
3
Fig. 1: Service Dependencies among Layered Controller
Components
When a switch receives any packet from a host and it does not
match any ﬂow entry in the ﬂow table, a Packet-In message
encapsulating the packet is sent to the OpenFlow controller.
The OpenFlow controller then learns the information about
the host and its location (i.e.,
the corresponding attached
switch port) from the message. For internal link discovery,
the OpenFlow controller herein utilizes OpenFlow Discovery
Protocol (OFDP). In this paper, we mainly focus on the
Host Tracking Service and Link Discovery Service inside the
OpenFlow controller.
Host Tracking Service. Inside an OpenFlow controller,
Host Proﬁle is maintained to track the location of a host. There
are signiﬁcant advantages for Host Tracking. For example,
in a data center, it is tedious and error-prone to manually
maintain the locations of virtual machines due to their fre-
quent migration. Also, as demonstrated in [3], the OpenFlow
controller with host location tracking can provide seamless
handoff among different access points. In this regard, the Host
Tracking Service (HTS) in the controller is to provide an easy
way to guarantee ﬂexible network dynamics by dynamically
probing Packet-In messages and updating Host Proﬁles.
Let us take a close look at how an OpenFlow controller
tracks dynamics of host devices. In an OpenFlow network, the
OpenFlow controller reactively listens to Packet-In messages
to maintain Host Proﬁle. During this procedure, the OpenFlow
controller mainly handles two relevant host events (i.e., JOIN
and MOVE). The scenario for the ﬁrst event is that, when the
Switch	
  Update	
  Status	
  Host	
  Tracking	