It is possible to replace the default panic picture either by recompiling the kernel with another picture or by dynamically loading a new picture
through a sysctl interface. Moreover, the kernel also allows the panic user interface to be tested without inducing an actual panic. An image to
be used as the panic picture must be converted either to a C structure that can be compiled into the kernel or to a kernel-loadable file. The
genimage.c and qtif2kraw.c files in osfmk/console/panic_ui/ contain sources for utilities that convert an uncompressed QuickTime RAW
image file into a C structure and a loadable RAW file, respectively. Arbitrary image formats can be converted to QuickTime RAWa .qtif
fileusing QuickTime facilities, among other tools. Figure 515 shows an example of replacing the kernel's default panic image by loading a new
one from user space.
Figure 515. Loading a replacement panic user interface image into the kernel
$ sips -g all image.qtif
...
typeIdentifier: com.apple.quicktime-image
format: qtif
...
bitsPerSample: 8
hasAlpha: no
space: RGB
profile: Generic RGB Profile
$ qtif2kraw -i image.qtif -o image.kraw
Verifying image file...
Image info: width: 640 height: 480 depth: 8...
Converting image file to 8 bit raw...
Converted 307200 pixels...
Found 307200 color matches in CLUT...
Encoding image file...
Writing to binary panic dialog file image.kraw, which is suitable for loading into
kernel...
$ cat load_panic_image.c
// load_panic_image.c
#define PROGNAME "load_panic_image"
#include 
#include 
#include 
#include 
#include 
#include 
#include 
int
main(int argc, char **argv)
{
int ret, fd;
char *buf;
size_t oldlen = 0, newlen;
struct stat sb;
int mib[3] = { CTL_KERN, KERN_PANICINFO, KERN_PANICINFO_IMAGE };
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
if (stat(argv[1], &sb) 
#include 
#include 
#define KERN_PANICINFO_TEST (KERN_PANICINFO_IMAGE + 2)
int
main(void)
{
int ret;
size_t oldnewlen = 0;
int mib[3] = { CTL_KERN, KERN_PANICINFO, KERN_PANICINFO_TEST };
ret = sysctl(mib, 3, NULL, (void *)&oldnewlen, NULL, oldnewlen);
exit(ret);
}
Next, PE_init_iokit() calls vc_progress_initialize() [osfmk/console/video_console.c] to initialize the rotating gearwheel boot-
progress indicator. The image for the wheel is 32x32 pixels in size. It animates at 24 frames per second. Image data for the animation frames
resides in pexpert/pexpert/GearImage.h. The kernel calls vc_progress_set() [osfmk/console/video_console.c] to toggle the
animation on or off. When enabled, it arranges for vc_progress_task() [osfmk/console/video_console.c] to be scheduled to run via a
callout.
PE_init_ioikit() finally calls StartIOKit() [iokit/Kernel/IOStartIOKit.cpp], passing it pointers to the device tree's root and the boot
arguments.
StartIOKit() calls IOLibInit() [iokit/Kernel/IOLib.c] to initialize the I/O Kit's basic runtime environment. IOLibInit() creates a
submap of the kernel map for use as the I/O Kit pageable space map. The size of this allocation is kIOPageableMapSize (96MB). A structure of
type gIOKitPageableSpace and a queue of contiguous malloc entries are also initialized. The IOMallocContiguous()
[iokit/Kernel/IOLib.c] function uses the latter.
StartIOKit() calls OSlibkernInit() [libkern/c++/OSRuntime.cpp] to initialize the I/O Kit C++ runtime environment. OSlibkernInit()
calls getmachheaders() [osfmk/mach-o/mach_header.c] to fetch the address of the link-editor-defined _mh_execute_header symbol as the
first element of an array of mach_header structures. The address so retrieved is set as the starting address of the libkern library's kmod_info
structure [osfmk/mach/kmod.h].
While linking a Mach-O file, the link editor defines a symbol called _MH_EXECUTE_SYM, which is defined to be the string
"__mh_execute_header". This symbol, which appears only in a Mach-O executable, is the address of the Mach header in the executable.
Moreover, the symbol is absolute and is not part of any section.
OSlibkernInit() then provides a pointer to the kmod_info structure as an argument to OSRuntimeInitializeCPP()
[libkern/c++/OSRuntime.cpp], which scans all segments listed in the kernel's Mach header, looking for sections named __constructor.
Upon finding such sections, it invokes the constructors. If it fails, it calls OSRuntimeUnloadCPPForSegment()
[libkern/c++/OSRuntime.cpp], which looks for sections named __destructor in the segment and invokes the corresponding destructors.
$ otool -l /mach_kernel
...
Section
sectname __constructor
segname __TEXT
addr 0x0035c858
size 0x000000f4
offset 3467352
align 2^2 (4)
reloff 0
nreloc 0
flags 0x00000000
reserved1 0
reserved2 0
Section
sectname __destructor
segname __TEXT
addr 0x0035c94c
size 0x000000f0
offset 3467596
align 2^2 (4)
reloff 0
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 30 of 59
nreloc 0
flags 0x00000000
reserved1 0
reserved2 0
...
Kernel extensions explicitly declare their dependencies on other kernel components,[24] which may be other kernel extensions, or abstract
"extensions" such as the Mach component, the BSD component, the I/O Kit, and so on. StartIOKit() fabricates kmod_info structures for such
fictitious extensions, examples of which include the following ones defined by the gIOKernelMods string in iokit/KernelConfigTables.cpp:
[24] We will look at details of kernel extensions in Chapter 10.
const char *gIOKernelKmods =
"{"
"'com.apple.kernel' = '';"
"'com.apple.kpi.bsd' = '';"
"'com.apple.kpi.iokit' = '';"
"'com.apple.kpi.libkern' = '';"
"'com.apple.kpi.mach' = '';"
"'com.apple.kpi.unsupported' = '';"
"'com.apple.iokit.IONVRAMFamily' = '';"
"'com.apple.driver.AppleNMI' = '';"
"'com.apple.iokit.IOSystemManagementFamily' = '';"
"'com.apple.iokit.ApplePlatformFamily' = '';"
"'com.apple.kernel.6.0' = '7.9.9';"
"'com.apple.kernel.bsd' = '7.9.9';"
"'com.apple.kernel.iokit' = '7.9.9';"
"'com.apple.kernel.libkern' = '7.9.9';"
"'com.apple.kernel.mach' = '7.9.9';"
"}";
The gIOKernelMods string represents a serialized data structure consisting of key-value pairs (i.e., an OSDictionary). StartIOKit()
unserializes it to iterate over the list of fictitious extensions.
The fictitious extensions (also called pseudo-extensions) are implemented as plug-ins within the System kernel extension (System.kext), which
contains no executable code for any of the extensionseach plug-in extension contains an information property list file (Info.plist), a version
property list file (version.plist), and for some extensions, a Mach-O object file containing only a table of exported symbols.
StartIOKit() initializes the IORegistry class by calling IORegistryEntry::initialize() [iokit/Kernel/IORegistryEntry.cpp], which
returns a pointer to the root of the I/O Registry. It also initializes the IOService, IOCatalogue, IOUserClient, and IOMemoryDescriptor
classes by calling their initialize() methods, which allocate and set up locks, queues, and other class-specific data structures.
StartIOKit() calls IOKitDiagnostics::diagnostics() [iokit/Kernel/IOKitDebug.cpp] to instantiate the IOKitDiagnostics class,
which provides I/O Kit debugging functionality such as the ability to print dumps of I/O Kit planes[25] and memory. A serialized version of this
class resides in the I/O Registry as the IOKitDiagnostics property.
[25] We will discuss I/O Kit planes and several other aspects of the I/O Kit in Chapter 10.
Finally, StartIOKit() instantiates the IOPlatformExpertDevice class [iokit/Kernel/IOPlatformExpert.cpp]. The resultant instance is
the I/O Kit's root nub, which is then initialized by a call to the initWithArgs() method, followed by a call to the attach() method.
initWithArgs() creates and initializes a new IOWorkLoop object for the Platform Expert. It also saves the arguments it received as the root
nub's IOPlatformArgs property.
// iokit/Kernel/IOPlatformExpert.cpp
bool
IOPlatformExpertDevice::initWithArgs(void *dtTop, void *p2, void *p3, void *p4)
{
IORegistryEntry *dt = 0;
void *argsData[4];
bool ok;
if (dtTop && (dt = IODeviceTreeAlloc(dtTop)))
ok = super::init(dt, gIODTplane);
else
ok = super::init();
if (!ok)
return false;
workLoop = IOWorkLoop::workLoop();
if (!workLoop)
return false;
argsData[ 0 ] = dtTop;
argsData[ 1 ] = p2;
argsData[ 2 ] = p3;
argsData[ 3 ] = p4;
setProperty("IOPlatformArgs", (void *)argsData, sizeof(argsData));
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 31 of 59
return true;
}
...
Note that the IOPlatformExpertDevice class inherits from IOService, which inherits from IORegistryEntry. The latter implements the
setProperty() method.
StartIOKit() calls the recordStartupExtensions() [iokit/Kernel/IOCatalogue.cpp] method of the IOCatalogue class instance to build
dictionaries for the startup extensions put into memory by BootX. The dictionaries are recorded in a startup extensions dictionary. The recording
is performed by calling the function pointed to by the record_startup_extensions_function pointer, which points to the
recordStartupExtensions() function implemented in libsa/catalogue.cpp. The resultant dictionary has the following format:
{
"plist" = /* extension's Info.plist file as an OSDictionary */
"code" = /* extension's executable file as an OSData */
}
StartIOKit() finally calls the root nub's registerService() method, which is implemented in the IOService class. Consequently, the I/O
Kit matching process starts as the root nub is published for matching.
5.7. BSD Initialization
As we saw in Figure 511, before becoming the pageout daemon, the kernel bootstrap thread calls bsd_init() [bsd/kern/bsd_init.c], which
initializes the BSD portion of the Mac OS X kernel and eventually passes control to user space. Figure 517 shows bsd_init()'s sequence of
actions.
Figure 517. BSD initialization
[View full size image]
5.7.1. Miscellaneous BSD Initialization (Part 1)
bsd_init() allocates the kernel funnel using funnel_alloc() [bsd/kern/thread.c]. It then acquires the kernel funnel. Although the funnel
mechanism is deprecated in Mac OS X 10.4, it is still present for backward compatibility.[26]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 32 of 59
[26] We will look at funnels in Chapter 9.
bsd_init() next prints the well-known BSD copyright message, which is defined in bsd/kern/bsd_init.c.
char copyright[] =
"Copyright (c) 1982, 1986, 1989, 1991, 1993\n\t"
"The Regents of the University of California. "
"All rights reserved.\n\n";
kmeminit() [bsd/kern/kern_malloc.c] initializes the BSD-specific kernel memory allocator. This allocator designates each type of memory
with a numerical value, where "type" represents the purpose of the memory as specified by the caller. Some types have their own Mach
allocator zones from which that type of memory is allocated. Other types either share another type's Mach zone or use an appropriate power-of-
2-sized kalloc zone.
parse_bsd_args() [bsd/kern/bsd_init.c] retrieves BSD-related arguments from the boot command line. Some of these arguments affect
allocation sizes of certain BSD data structures, whereas the others are eventually forwarded to the "init" program started by the kernel.
kauth_init() [bsd/kern/kern_authorization.c] initializes the kauth centralized authorization subsystem. It initializes its constituent
modules by calling kauth_cred_init() [bsd/kern/kern_credential.c], kauth_identity_init() [bsd/kern/kern_credential.c],
kauth_groups_init() [bsd/kern/kern_credential.c], kauth_scope_init() [bsd/kern/kern_authorization.c], and
kauth_resolver_init() [bsd/kern/kern_credential.c].
procinit() [bsd/kern/kern_proc.c] initializes the following global process-related data structures: the list of all processes (allproc); the
list of zombie processes (zombproc); and hash tables for process identifiers (pidhashtbl), process groups (pgrphashtbl), and user identifiers
(uihashtbl).
bsd_init() then initializes various aspects of process 0. Unlike subsequent processes, the data structures of process 0such as structures related
to its credentials, open files, accounting, statistics, process limits, and signal actionsare statically allocated and never freed. Moreover, process 0
is handcraftedbsd_init() associates it with the already existent kernel task (kernel_task). Its name is explicitly set to kernel_task, and its
process ID is set to 0. It is placed at the head of the allproc list. The chgproccnt() [bsd/kern/kern_proc.c] function is called to increment
the count of processes owned by root (user ID 0).
Prior to Mac OS X 10.4, bsd_init() also allocates the network funnel, which is not used in 10.4.
bsd_init() allocates a submap from the kernel map to use for BSD-related pageable memory. The size of this map is BSD_PAGABLE_MAP_SIZE
(defined to be 8MB in bsd/kern/bsd_init.c). The map is used by execve() [bsd/kern/kern_exec.c] to allocate a buffer into which it
copies in (from user space) the first argument of execve()that is, the path, which is used in the kernel's working set caching mechanism and for
supporting the launching of .app applications. bsd_init() also initializes the execve() semaphore, which is used while allocating and freeing
space for saved arguments.
bsd_init() calls bsd_bufferinit() [bsd/dev/unix_startup.c], which calls bsd_startupearly() [bsd/dev/unix_startup.c]. The latter
allocates a submap of the kernel map and then allocates kernel memory into this map using the kernel object (kernel_object).
bsd_startupearly() also computes the values of parameters related to buffer management for networking and cluster I/O, making additional
adjustments unless the machine's physical memory is less than 64MB. For example, it attempts to scale the values of tcp_sendspace and
tcp_recvspace, the default send and receive window sizes for TCP, respectively, up to a maximum.
bsd_bufferinit() allocates another submap (mb_map) of the kernel map that is used for allocating mbuf clusters. This map's size is the product
of nmbclusters and MCLBYTES, which are initialized to 2048 and 512, respectively, in bsd/ppc/param.h but may be adjusted during kernel
startup. Finally, bsd_bufferinit() calls bufinit() [bsd/vfs/vfs_bio.c] to initialize file system buffers and related data structures.
bufinit() also initializes bcleanbuf_thread [bsd/vfs/vfs_bio.c], the buffer laundry thread, which removes buffers from the queue
containing buffers that need cleaning and performs asynchronous blocking write operations with their contents. This initialization allows the
BSD layer to read disk labels. Moreover, bufinit() calls bufzoneinit() [bsd/vfs/vfs_bio.c] to initialize the zone for buffer headers
(buf_hdr_zone).
IOKitResetTime() [iokit/Kernel/IOStartIOKit.cpp] calls IOService::waitForService() [iokit/Kernel/IOService.cpp] to wait for
the IORTC (real-time clock) and IONVRAM (Open Firmware nonvolatile memory) services to be matched and published. It then calls
clock_initialize_calendar() [osfmk/ppc/rtclock.c] to initialize the calendar clock based on the platform clock.
5.7.2. File System Initialization
At this point, bsd_init() starts file-system-related initialization. It calls ubc_init() [bsd/kern/ubc_subr.c] to initialize the zone
(ubc_info_zone) for the unified buffer cache (UBC), which unifies buffering of vnodes with virtual memory (Mach VM objects, specifically).
The zone has 10,000 elements, the size of each being the size of the ubc_info structure [bsd/sys/ubc.h].
bsd_init() then calls vfsinit() [bsd/vfs/vfs_init.c], which initializes the vnode structures and each built-in file system type. The
specific actions performed by vfs_init() include the following.
 It allocates various file system locksfor example, the lock for the list of mounted file systems.
 It sets the console user to have the user ID 0. The console user, whose identity is used for access purposes, is the owner of files and
directories whose on-disk permissions are ignored. Typically, the console user is the currently logged-in user.
 It calls vntblinit() [bsd/vfs/vfs_subr.c] to initialize the lists of free vnodes (vnode_free_list), inactive vnodes
(vnode_inactive_list), and mounted file systems (mountlist). It also initializes the vnodetarget variable, which represents the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh90B0.htm 20.08.2007
Chapter 5. Kernel and User-Level Startup Page 33 of 59
number of vnodes the kernel expects to get back from the inactive vnode list and VM object cache. When the number of free vnodes falls
below VNODE_FREE_MIN (defined to be 300 in bsd/vfs/vfs_subr.c), vnreclaim() [bsd/vfs/vfs_subr.c] is called to reclaim
somedesirably vnodetargetvnodes from the inactive list and the VM object cache. vntblinit() calls adjust_vm_object_cache()
[osfmk/vm/vm_object.c] to scale the size of the VM object cache to accommodate the number of vnodes the kernel wants to cache,
which is the difference between desiredvnodes and VNODE_FREE_MIN. The formula for computing desiredvnodes is defined in
bsd/conf/param.c.
 It calls vfs_event_init() [bsd/vfs/vfs_subr.c] to initialize a list of knote structures [bsd/sys/event.h] that will be used for the
file system event mechanism.
 It calls nchinit() [bsd/vfs/vfs_cache.c] to initialize data structures used for vnode name cachingfor example, a hash table of strings
and a table of 32-bit checksum remainders.
 It calls journal_init() [bsd/vfs/vfs_journal.c] to initialize locks used by the VFS journaling mechanism.
 It calls vfs_op_init() [bsd/vfs/vfs_init.c], which initializes known vnode operations vectors by setting them to NULL. vfs_op_init
() calculates the number of operations that exist by counting the contents of the vfs_op_descs table, which is defined in
bsd/vfs/vnode_if.c. This is followed by a call to vfs_opv_init() [bsd/vfs/vfs_init.c], which allocates and populates the
operations vectors.[27]
[27] We will look at details of these data structures in Chapter 11.
 It iterates over the static list (vfsconf) of defined file system types and invokes each file system's initialization functionthat is, the
vfs_init() member of the vfc_vfsops field of the vfsconf structure.
 It calls vnode_authorize_init() [bsd/vfs/vfs_subr.c], which registers the vnode scopeKAUTH_SCOPE_VNODE, defined to be the string
"com.apple.kauth.vnode"with the kauth authorization mechanism.[28] This scope is used for all authorizations within the VFS layer.
The listener callback function for the scope is vnode_authorize_callback() [bsd/vfs/vfs_subr.c].
[28] We will look at details of this mechanism in Chapter 11.
5.7.3. Miscellaneous BSD Initialization (Part 2)
bsd_init() calls mbinit() [bsd/kern/uipc_mbuf.c] to initialize mbufs, the memory buffers typically used by the networking subsystem.
mbinit() allocates memory and initializes locks, statistics, reference counts, and so on. It also calls IOMapperIOVMAlloc()
[iokit/Kernel/IOMapper.cpp], which determines whether the system-wide I/O bus mapper exists and, if it does, registers the number of