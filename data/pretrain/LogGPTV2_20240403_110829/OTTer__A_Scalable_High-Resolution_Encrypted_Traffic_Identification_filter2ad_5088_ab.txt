kept.
320
E. Papadogiannaki et al.
(ADB) version 1.0.39 and Wireshark 2.4.2. Due to toolset limitations, we did
not include Apple devices in our study.
OTT Application Events. We chose four of the most widely used OTT
Android applications to evaluate our methodology: (i) WhatsApp, (ii) Skype,
(iii) Facebook Messenger and (iv) Viber2. Since these applications are mainly
used for communication purposes, we focused on identifying (i) outgoing chat
messages, (ii) voice and (iii) video calls through the encrypted network traﬃc.
Of course, our work can be extended to support other OTT application events,
such as media exchange (e.g. photo sharing), as well as iOS devices.
Overall, we collected a set of over 350 samples3. Each individual sample
simulates either an exchange of an arbitrary number of outgoing messages (mes-
saging), or a single voice or video call using one of the aforementioned OTT
applications. Then, for each sample we collected (i) a network packet trace,
(ii) a ﬁle with the information of every TCP socket that was open during the
traﬃc capture and the process information that created it, (iii) a screen record-
ing and (iv) a ﬁle with the device’s system logs reported by the Android ADB
tool, named logcat. Each sample contains only a single application event type
(e.g. sample0: Skype/messaging).
To validate, we compare the detected application events to the device’s sys-
tem logs that are included in the logcat output and screen recordings. Using
the logcat ﬁle and the screen recording we are able to cross-check the reported
events with the actual ones. Logcat is a command-line tool that dumps a log of
the device’s system messages. We extracted information such as audio hardware
on/oﬀ, camera on/oﬀ and incoming chat messages. Unfortunately, we were not
able to identify a system event that matches an outgoing chat message. Thus,
we had to use the screen recordings to inspect the actual time of an outgoing
chat message departure, as well as the quantity of the outgoing messages.
3.3 Accuracy Evaluation
Hit Rate. Table 3 shows the resulting true positive (TP) rates. Each
sample contains only a single within-application event type (e.g. sample0:
Skype/messaging, sample1: WhatsApp/voice). When a signature reports a
within-application event (messaging: 0 or 1, voice: 0 or 1, video: 0 or 1), then
we compare it to the actual event of the application. If the event is correctly
reported, then the TP counter is increased. Otherwise, we have a false positive
(FP).
The TP rate of our methodology individually for each event is (i) 93% for out-
going chat message, (ii) 86% for voice and (iii) 84% for video calls. The slightly
2 Through the dataset collection we make use of diﬀerent application versions per
application. This allows us to verify the generalisation ability and scalability of our
methodology.
3 These samples were generated using dummy accounts and non-personal mobile
devices.
OTTer: A Scalable High-Resolution Encrypted Traﬃc Identiﬁcation Engine
321
lower TP rate for voice and video calls, is due to a trade-oﬀ with FPs4. We dis-
covered that, for all applications under investigation except Viber, video-related
ﬂows included voice-related ﬂows as well, and, thus, a video event includes also a
voice event. On the other hand, our signatures for Viber voice and video events
do not follow this trend as they are not complementary to each other. Thus, we
can reach the interesting conclusion, that the core implementation of the Viber
application is diﬀerent from all the other applications under investigation.
Table 3. TP rates of our methodology. The percentages presented are extracted
through the comparison of the results of our methodology to the actual ground-truth
dataset.
Application
Messaging Voice Video
Facebook messenger
Skype
Viber
WhatsApp
83%
88%
100%
100%
96% 96%
100% 75%
54% 88%
92% 75%
False Discovery Rate. In addition to true positives, another metric necessary
for the evaluation of our methodology is the false positive rate for each appli-
cation event. Reporting mobile application events using only encrypted network
traﬃc can be considered risky since no easy cross-validation can be made. It is
not only signiﬁcant to correctly report the existence of events, but also to not
mistakenly report absent events as existent. Table 4 shows the false discovery
rates of event reporting using our signatures5. False discovery rates are always
below 8%.
The choice of signature can signiﬁcantly aﬀect the trade-oﬀ between true
positive and false discovery rates. Having a relaxed signature deﬁnition leads to
almost intact TP rates, with the cost of high false positives. Similarly, a more
strict signature deﬁnition gives satisfactory TP rates, keeping the false positives
low. We settled on signature deﬁnitions that result in hit rates over 84% and
false discovery rates below 8%.
Granularity of Messaging Event Reporting. Using our signatures for mes-
saging reporting we achieve a total hit rate of 93%—again, compared to our
ground truth data collection. This rate covers the correct identiﬁcation of the
existence of messaging events (i.e. outgoing text messages) within a mobile OTT
application. Moving to a more ﬁne-grained granularity, we are able not only to
show that there is messaging activity within a network traﬃc trace, but also to
4 In the following section, we discuss about how the signature formation aﬀects the
balance between TP and FP rates.
5 False discovery rate can be calculated as F DR = F P/(T P + F P ).
322
E. Papadogiannaki et al.
Table 4. This table presents the false discovery rates of our methodology. The “Mes-
saging FDR” column shows the percentages of erroneous messaging reporting in voice
or video samples. Respectively, “Voice/video FDR” column shows the percentages of
erroneous voice/video reporting in messaging samples.
Application
Messaging FDR Voice/video FDR
Facebook messenger 0%
Skype
Viber
WhatsApp
5.5%
1%
8%
1%
4.2%
2%
0.6%
accurately report when an outgoing text message is sent, and count the number
of text messages sent during a messaging session, something we demonstrate in
Sect. 5.
4 Implementation and Performance
In this section, we discuss and evaluate an implementation of our proposed pat-
tern language.
4.1 Eﬃcient Automaton
We implemented a data structure to eﬃciently match packet trains in a stream-
ing fashion against sets of patterns. It is inspired by string searching algorithms
such as Aho-Corasick [5] but instead of characters, it operates on packet sizes
represented as 16-bit integers.
The Aho-Corasick algorithm is a string searching algorithm that locates ele-
ments of a ﬁnite set of strings within an input text. It matches all strings simul-
taneously, so its complexity does not depend on the size of the searched set. It
works by constructing an automaton executing transitions for each character of
the input text. To adapt the algorithm for matching packet trains, we replaced
the 8-bit characters with 16-bit packet sizes.
The algorithm constructs a ﬁnite state machine that resembles a trie with
additional “failure” links between the internal nodes. These failure links are
followed when there is no other matching transition and allow for fast transitions
to other branches of the trie that share a common preﬁx, without the need for
backtracking using earlier inputs. This allows for interleaving a large number
of concurrent searches, such as in the case of network connections, because the
state of the matcher can be preserved across input data observed at diﬀerent
points in time by storing a pointer to the current state of the automaton with
the state maintained for each connection. Otherwise, backtracking would require
us to maintain expensive per-ﬂow state for previously-seen packet sizes.
For additional performance, a Deterministic Finite Automaton (DFA) can be
built by unrolling the failure links in advance and adding appropriate transitions
OTTer: A Scalable High-Resolution Encrypted Traﬃc Identiﬁcation Engine
323
to map each failure directly to an appropriate node without the need to follow
multiple failure links at runtime. Expanding the automaton in this way did not
provide an advantage in our case where the automaton is executed for each packet
size as opposed to each byte when searching for substrings, and where the length
and number of patterns is much less than typical substring-based rulesets, so we
opted for the more compact data structure where the failure links are followed
at runtime. For a very large number of patterns, however, this optimization may
be worthwhile.
We implemented packet-size repetitions with a range m − n as required by
our pattern language by expanding them to n − m + 1 separate patterns. To
implement packet ranges, we attempted at ﬁrst to expand them into multiple
individual 16-bit characters, leading to excessively large automata in the pres-
ence of wide packet size ranges, such as 100-200{3} which would expand to
1003 distinct sequences. To avoid this we use ranges instead of individual 16-bit
characters for the arcs of the automaton. To simplify the implementation, we
preprocess the expressions to collect possibly overlapping ranges used in them
and extract a set of non-overlapping ranges that we use as the alphabet for
the automaton constructed. For example, rule 152-156{1,5}, 150-600 contains
two overlapping ranges, 152-156 and 150-600, which are expanded to an alphabet
of three non-overlapping ranges: 150-151, 152-156, and 157-600. Subsequently,
the repetitions in this example are expanded as shown in Fig. 2.
152-156,150-151
152-156,152-156
152-156,157-600
152-156,152-156,150-151
152-156,152-156,152-156
152-156,152-156,157-600
152-156,152-156,152-156,150-151
152-156,152-156,152-156,152-156
152-156,152-156,152-156,157-600
152-156,152-156,152-156,152-156,150-151
152-156,152-156,152-156,152-156,152-156
152-156,152-156,152-156,152-156,157-600
152-156,152-156,152-156,152-156,152-156,150-151
152-156,152-156,152-156,152-156,152-156,152-156
152-156,152-156,152-156,152-156,152-156,157-600
Fig. 2. Illustration of the complete expansion of rule 152-156{1,5}, 150-600 into a
set of simple sequences of non-overlapping ranges. An alphabet of size three is used,
each character corresponding to the range 150-151, 152-156, or 157-600.
4.2 DPI Engine Integration
We integrated the pattern matching data structure with our proprietary DPI
engine [7] that uses an extensible signature language by implementing a plu-
gin to add a new condition, that we called packet train. The signature language
324
E. Papadogiannaki et al.
uses an event-condition-action model. The DPI engine raises diﬀerent events to
which sets of conditions and actions can be associated with. The conditions and
actions are implemented as plugins, and are free to interpret their arguments
and construct the necessary state objects that are evaluated on each event. The
rule engine itself handles the logic of the ruleset as a whole, and the plugins are
consulted for individual conditions. Each condition plugin declares the pieces of
information that it requires (such as payload or ﬂow-tuple information) and the
rule engine ensures that the respective conditions are only used in combination
with events that provide the required information. One such event is the packet
event, which contains information about packet payload and therefore packet
size, that we make use of in our extension. Other events include connection,
which is raised by the connection tracker. Information can be communicated
across events by means of tags stored in the connection state, assigned by an
action called tag and checked by a condition also called tag. These can be used
to chain together rules triggered on distinct events, for example a rule could
match a substring in a certiﬁcate to detect the application and tag the connec-
tion, while later the tag can be used in the rule that uses the packet train
condition to avoid evaluating ﬂows from irrelevant applications.
Figure 3 illustrates a rule example. The conditions are evaluated as a con-
junction. Disjunctions can be expressed using multiple rules, or (if the condition
itself supports it, such as ours), with a list of arguments (Fig. 4). The exten-
sion API provides hooks for populating individual condition arguments into a
shared object that is consulted once per event and communicates back to the rule
engine any matching rules. This facilitates conditions performing simultaneous
matching such as those based on Aho-Corasick or hash-tables.
facebook_video:
event: packet
conditions: