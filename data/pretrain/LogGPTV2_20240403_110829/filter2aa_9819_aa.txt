---
title: Swift
date: 2023-02-28 14:50:01
background: bg-[#eb4e38]
tags:
    - Apple
    - iOS
    - iPadOS
categories:
    - Programming
intro: |
    This cheat sheet provides examples of using Swift that cover basic Swift knowledge, control flow etc.
plugins:
    - copyCode
---
Getting Started
---
### Variable {.row-span-2}
```swift
var score = 0  // Variable
let pi = 3.14  // Constant
var greeting = "Hello"
var numberOfToys = 8
var isMorning = true
var numberOfToys: Int = 8
numberOfToys += 1
print(numberOfToys)
// prints "9"
```
### Type annotations
```swift
var greeting: String = "Hello"
var numberOfToys: Int = 8
var isMorning: Bool = true
var price: Double = 8.99
```
### Arithmetic operators {.row-span-3}
- `+` Add
- `-` Subtraction
- `*` Multiplication
- `/` Division
- `%` Remainder
{.cols-2 .marker-none}
----
```swift
var x = 0
x = 4 + 2 // x is now 6
x = 4 - 2 // x is now 2
x = 4 * 2 // x is now 8
x = 4 / 2 // x is now 2
x = 4 % 2 // x is now 0
```
----
- `+=` Adds and assigns sums
- `-=` subtract and assign the difference
- `*=` Multiplication and assignment
- `/=` Divide and assign quotient
- `%=` Divide and assign remainder
{.marker-none}
#### Compound Assignment Operators
```swift
var numberOfDogs = 100
numberOfDogs += 1
print("There are \(numberOfDogs) Dalmatians!")
// print: There are 101 Dalmatians!
```
### String interpolation
```swift
var apples = 6
print("I have \(apples) apples!")
// print: I have 6 apples!
```
### Multi-line string
```swift
let myLongString = """
Swift?
This is my favorite language!
Yeah!
"""
```
### Code Comments
```swift
// This line represents a comment in Swift.
/*
This is all commented out.
None will run!
*/
```
### Form a tuple {.col-span-2}
```swift
let player = ("Maya", 5, 150)
print(player) // ("Maya", 5, 150)
print("\(player.0): level \(player.1), \(player.2) pts") // Maya: level 5, 150 pts
```
### Decompose tuple
```swift
let player = (name: "Maya", level: 5)
let (currentName, curLevel) = player
print("\(currentName): level \(curLevel)")
// print: Maya: level 5
```
### Special comment syntax (MARK)
```swift
// MARK: -view settings
```
`MARK` can be used to display comments in the column
### Special comment syntax (TODO)
```swift
// TODO: update logic to accommodate data changes
```
`TODO` is used to display reminders of things that need to be done
### Special Comment Syntax (FIXME)
```swift
// FIXME: Fix buggy behavior when making changes to existing entries
```
`FIXME` is used to display reminders about things that need to be fixed
Variable
----
### Variable declaration
Variables are declared with `var`:
```swift
var greeting = "Hello"
var numberOfToys = 8
var isMorning = true
```
For clarity, variable declarations can contain type annotations:
```swift
var greeting: String = "Hello"
var numberOfToys: Int = 8
var isMorning: Bool = true
```
Variables are mutable. Their values be changed:
```swift
var numberOfToys: Int = 8
numberOfToys += 1
print(numberOfToys)
// print "9"
```
### Constants
Constants are declared with `let`:
```swift
let greeting = "Hello"
let numberOfToys = 8
let isMorning = true
```
For clarity, constant declarations can contain type annotations:
```swift
let greeting: String = "Hello"
let numberOfToys: Int = 8
let isMorning: Bool = true
```
Constants are immutable. Their values be changed:
```swift
let numberOfToys: Int = 8
numberOfToys += 1
// Error: numberOfToys is immutable
```
### Computed variables (get and set) {.row-span-3}
```swift
import Foundation
let df = DateFormatter()
df.dateFormat = "d MMMM yyyy"
guard var birth = df.date(from: "5 June 1999") else {
    print("Date is not valid")
    return
}
var age: Int {
    Calendar.current
        .dateComponents([.year],
                        from: birth,
                        to: Date()).year!
}
print(age) // 23
guard let birth2 = df.date(from: "5 June 2002") else {
    print("Date is not valid")
    return
}
birth = birth2
print(age) // 20
```
In the example below, distanceInFeet has a `getter` and a `setter`. Because of the `setter`, the `getter` requires the keyword `get`:
```swift
var distanceInMeters: Float = 100
var distanceInFeet: Float {
  get {
    distanceInMeters *3.28
  }
  set(newDistance) {
    distanceInMeters = newDistance /3.28
  }
}
print(distanceInMeters) // 100.0
print(distanceInFeet)   // 328.0
distanceInFeet = 250
print(distanceInMeters) // 76.21951
print(distanceInFeet)   // 250.0
distanceInMeters = 800
print(distanceInMeters) // 800.0
print(distanceInFeet)   // 2624.0
```
### willSet {.row-span-2}
```swift
var distance = 5 {
  willSet {
    print("The distance will be set")
  }
}
distance = 10 // print: distance will be set
```
The new value can be accessed in `willSet`:
```swift
var distance = 5 {
  willSet(newDistance) {
    print("The distance will be set \(newDistance)")
  }
}
distance = 10 // print: distance will be set to 10
```
`willSet` can be used to execute some code before setting the variable value
### didSet
```swift
var distance = 5 {
  didSet {
    print("The distance is set to \(distance)")
    print("Its old value is: \(oldValue)")
  }
}
distance = 10 // print: distance will be set to 10
              // print: its old value is: 5
```
### willSet and didSet
```swift
var distance = 5 {
  willSet(newDistance) {
    print("The distance will be set to \(newDistance)")
  }
  didSet {
    print("The distance is set to \(distance)")
    print("Its old value is: \(oldValue)")
  }
}
distance = 10
```
Conditions
---
### if statement
```swift
var halloween = true
if halloween {
  print("Trick or treat!")
}
// print: Trick or treat!
if 5 > 3 {
  print("5 is greater than 3")
} else {
  print("5 is not more than 3")
}
// output: "5 is greater than 3"
```
### else statement
```swift
var turbulence = false
if turbulence {
  print("Please sit down.")
} else {
  print("You are free to move around.")
}
// print: You are free to move around.
```
### else if statement
```swift
var weather = "rainy"
if weather == "sunny" {
  print("Get some sunscreen")
} else if weather == "rainy" {
  print("Take an umbrella")
} else if weather == "snowing" {
  print("Put on your snow boots")
} else {
  print("Invalid weather")
}
// print: take an umbrella
```
### Comparison Operators
```swift
5 > 1      // true
6 = 3     // false
3 `  greater than
-`=` greater than or equal to
-`==` is equal to
-`!=` is not equal to {.style-round cols-2}
### Ternary conditional operator
```swift
var driverLicense = true
driverLicense
    ? print("driver seat") : print("passenger seat")
// print: driver's seat
```
### switch statement
```swift
var secondaryColor = "green"
switch secondaryColor {
  case "orange":
    print("A mixture of red and yellow")
  case "purple":
    print("A mix of red and blue")
  default:
    print("This may not be a secondary color")
}
// print: mix of blue and yellow
```
### switch statement: interval matching
```swift
let year = 1905
var artPeriod: String
switch year {
  case 1860...1885:
    artPeriod = "Impressionism"
  case 1886...1910:
    artPeriod = "Post-Impressionism"
  default:
    artPeriod = "Unknown"
}
// print: post-impressionism
```
### switch statement: composite case
```swift
let service = "Seamless"
switch service {
case "Uber", "Lyft":
    print("travel")
  case "DoorDash", "Seamless", "GrubHub":
    print("Restaurant delivery")
  case "Instacart", "FreshDirect":
    print("Grocery Delivery")
  default:
    print("Unknown service")
}
// print: restaurant takeaway
```
### switch statement: where clause
```swift
let num = 7
switch num {
  case let x where x % 2 == 0:
    print("\(num) is even")
  case let x where x % 2 == 1:
    print("\(num) odd number")
  default:
    print("\(num) is invalid")
}
// print: 7 odd
```
### Logical Operators
```swift
!true  // false
!false //true
```
### Logical Operators &&
```swift
true && true   // true
true && false  // false
false && true  // false
false && false // false
```
### Logical operators ||
```swift
true || true   // true
true || false  // true
false || true  // true
false || false // false
```
### Combined Logical Operators
```swift
!false && true || false // true
```
`!false && true` first evaluates and returns `true` Then, the expression, `true` || `false` evaluates and returns the final result `true`
```swift
false || true && false // false
```
`true && false` first evaluates to return `false` Then, the expression, `false` || `false` evaluates and returns the final result `false`
### Control the order of execution
```swift
// without parentheses:
true || true && false || false
//----> true
// with brackets:
(true || true) && (false || false)
//----> false
```
### Simple guards
```swift
func greet(name: String?) {
  guard let unwrapped = name else {
    print("Hello guest!")
    return
  }
  print("Hello \(unwrapped)!")
}
greet(name: "Asma") // output: Hello Asma!
greet(name: nil)    // output: Hello guest!
```
cycle
----
### scope
```swift
let zeroToThree = 0...3
//zeroToThree: 0, 1, 2, 3
```
### stride() function
```swift
for oddNum in stride(from: 1, to: 5, by: 2) {
  print(oddNum)
}
// print: 1
// print: 3
```
### for-in loop
```swift
for char in "hehe" {
  print(char)
}
// print: h
// print: e
// print: h
// print: e
```
### continue keyword
```swift
for num in 0...5 {
  if num % 2 == 0 {
    continue
  }
  print(num)
}
// print: 1
// print: 3
// print: 5
```
The `continue` keyword will force the loop to continue for the next iteration
### break keyword
```swift
for char in "supercalifragilistic" {
if char == "c" {
    break
  }
  print(char)
}
// print: s
// print: u
// print: p
// print: e
// print: r
```
### Use underscores
```swift
for _ in 1...3 {
  print("Ole")
}
// print: Ole
// print: Ole
// print: Ole
```
### while loop
```swift
var counter = 1
var stopNum = Int. random(in: 1...10)
while counter ()
print(team)
// print: [] 
```
### Populate the collection
```swift
var vowels: Set = ["a", "e", "i", "o","u"]
```
To create a set filled with values, use the `Set` keyword before the assignment operator.
### .insert()
```swift
var cookieJar: Set = [
  "Chocolate Chip",
  "Oatmeal Raisin"
]
// add a new element
cookieJar.insert("Peanut Butter Chip")
```
### .remove() and .removeAll() methods
```swift
var oddNumbers: Set = [1, 2, 3, 5]
// remove existing element
oddNumbers.remove(2)
// remove all elements
oddNumbers.removeAll()
```
### .contains()
```swift
var names: Set = ["Rosa", "Doug", "Waldo"]
print(names.contains("Lola")) // print: false
if names.contains("Waldo"){
  print("There's Waldo!")
} else {
  print("Where's Waldo?")
}
// print: There's Waldo!
```
### Iterate over a collection
```swift
var recipe: Set = ["Egg", "Flour", "Sugar"]
for ingredient in recipe {
  print ("Include \(ingredient) in the recipe")