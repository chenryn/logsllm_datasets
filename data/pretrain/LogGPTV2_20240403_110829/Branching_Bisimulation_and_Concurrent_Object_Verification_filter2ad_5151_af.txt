### Verification of Linearizability and Progress Properties Using Branching Bisimulation

#### Introduction
The verification of linearizability in concurrent systems is a critical task, often approached through various techniques. Most existing methods are based on rely-guarantee reasoning [20], [30], [31], [41] or the establishment of simulation relations [4], [5], [27]. These approaches typically require the manual identification of linearization points, which can be complex and non-trivial. For instance, Liang et al. [20] propose a program logic tailored for rely-guarantee reasoning to verify intricate algorithms. However, this method is limited to specific types of linearization points, making it inapplicable to more challenging algorithms [6], [18].

Our approach leverages divergence stuttering/branching bisimulation equivalences from concurrency theory [32], [38] to verify concurrent objects. This method, first proposed in 2014 [39], does not require identifying linearization points and can be applied to a wide range of non-blocking algorithms. For finite-state systems, off-the-shelf model checkers can be effectively utilized, providing a mechanism to detect concurrency bugs such as violations of linearizability and lock-freedom.

#### Related Work
Model checking methods for verifying linearizability have been proposed in several studies [2], [3], [23], [36]. Liu et al. [23] formalize linearizability as trace refinement and use partial-order and symmetry reduction techniques to mitigate the state explosion problem. Their experiments, however, are limited to simple data structures like counters and registers, and their proposed relation is not suitable for checking divergence. Our work, on the other hand, has successfully modeled and verified various practical algorithms, ensuring both linearizability and lock-freedom efficiently.

Cerny et al. [3] use method automata to verify the linearizability of concurrent linked-list implementations, but this approach is restricted to two concurrent threads. An experience report with the SPIN model checker [36] introduces an automated procedure for verifying linearizability, but it relies on manually annotated linearization points. Other works, such as [2], [42], employ stateless model checking for concurrent programs. Specifically, [2] presents Line-Up, an automated linearizability checker based on the CHESS model checker. Our work, using branching bisimulation techniques, can capture the effects of intricate executions in fine-grained concurrent programs, where linear-time analysis is insufficient.

To the best of our knowledge, all existing algorithms (e.g., [14]) require the entire state space to perform branching bisimulation minimization. For progress properties, recent work [12], [21], [22] proposes refinement techniques with termination preservation, distinguishing divergence from finite traces. However, these refinement-based notions struggle to precisely preserve progress properties for systems without divergence or return actions. In contrast, our theoretical results using divergence-sensitive branching bisimulation can check a large class of progress properties expressible in CTL* (including LTL) without the next operator. Our experiments have successfully treated 11 non-blocking algorithms (finite instances) and identified a lock-freedom violation in the revised stack [10].

#### Conclusion
In this paper, we exploit branching bisimulation, denoted by (≈), to prove linearizability and progress properties of concurrent data structures. A concurrent object Δ is linearizable with respect to a linearizable specification Θsp if their quotients under ≈ are in a trace refinement relation. Unlike competitive techniques, this result is independent of the type of linearization points. If the abstract and concrete objects are divergence-sensitive branching bisimilar, then the progress properties of the simpler abstract object carry over to the concrete object. This allows lock-freedom (and other progress properties expressible in the next-free fragment of CTL*) to be checked on the abstract program. Our approach can be fully automated for finite-state systems, and we have conducted experiments on 14 popular concurrent data structures, yielding promising results. The ability to obtain counterexamples automatically is a significant advantage.

#### Future Work
Due to the precision of branching bisimulation in characterizing state equivalence, it has the potential to analyze complex non-blocking executions. We have shown that the MS lock-free queue can be easily analyzed using this equivalence notion. In future work, we will further investigate the application of branching bisimulation to the analysis of concurrent data structures.

#### Acknowledgments
This research was conducted while the first author was at RWTH Aachen University (2013-2015) and supported by the Alexander von Humboldt Foundation. The work was also funded in part by the CDZ project CAP (GZ1023) and NSFC under grant 61100063. We thank the CONVECS team for their support in CADP, Qiaowen Jia for revising the model of the HSY stack, and anonymous referees for their valuable suggestions. The first author also thanks Hongfei Fu for feedback and Wendelin Serwe for assistance during the experiments.

#### References
[References listed as in the original text]

---

This version of the text is more structured, clear, and professional, with a coherent flow and improved readability.