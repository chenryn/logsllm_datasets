return 0;
* Take section information from ELF file as input
* and compute entry_offset, program_size (code + data).
*/
...
char *base = OpenSGX_loader("hello.sgx",
binary_size,
section_offset,
program_size);
tcs_t *tcs = init_enclave(base,
entry,
program_size,
"hello.conf");
sgx_enter(tcs, exception_handler);
1 /* hello.c */
2 #include 
3
4 void enclave_main()
5 {
6
7
8
9 }
char *hello = "hello sgx!\n";
sgx_enclave_write(hello, sgx_strlen(hello));
sgx_exit(NULL);
1 $ opensgx -k
2 > generate sign.key
3 $ opensgx -c hello.c
4 > generate hello.sgx executable
5 $ opensgx -s hello.sgx --key sign.key
6 > generate hello.conf
7 $ opensgx hello.sgx hello.conf
8 hello sgx!
Fig. 2: Example code snippet: “hello sgx!”
wrap the assembly code for each SGX instruction. It
is
worthwhile to mention that there are two types of instructions
in Intel SGX depending on the required privilege: user privilege
for ENCLU leaf instructions and super privilege for ENCLS leaf
instructions (see Figure 1). Accordingly, user-level instructions
are accessible to a user-level library, called sgxlib (see §IV-D),
and super-level instructions are only accessible by the OS
emulation layer of OpenSGX (see §IV-B).
To be clear, we currently do not support instructions for
debugging (e.g., EDBGRD). However, as OpenSGX is a software
emulator, it provides a better debugging interface (e.g., reading
or writing enclave memory regions) and greater flexibility. Also,
OpenSGX does not implement paging (e.g., features related
to maintaining page tables), as it utilizes user-level dynamic
translation. This design decision is intentional; otherwise,
OpenSGX users must install a custom operating system to run
an enclave program, making it cumbersome and inconvenient.
Enclave Page Cache (EPC). OpenSGX takes advantage
of QEMU’s user-mode emulation for EPC management. To
emulate EPC, we set aside a contiguous memory region
that represents the physical EPC available in the system,
the same address space of the emulated process. In Intel
SGX, the EPC region is configurable via BIOS at boot time
by using the Processor Reserved Memory (PRM) [21, 22].
Similarly, to reserve an EPC area in the QEMU user-mode,
5
OpenSGX introduces a custom bootstrapping mechanism. Upon
the initialization of an enclave program, the host program
invokes a special system call, namely sgx_init(), that allocates
and initializes the system-wide EPC pages. The sgx_init()
system call first reserves a memory region (a contiguous virtual
address space) for EPC and then notifies the reserved region
to the QEMU via a special instruction. At runtime, the QEMU
instruction translator enforces the access permission of the
memory region allocated for EPC pages.
To be precise, a significant difference between the OpenSGX
emulation and the Intel SGX hardware is that, while Intel SGX
keeps track of the permission of EPC pages via MMU (physical
address), OpenSGX mimics the behavior of such enforcement
at the user space (virtual address).
EPC access protection. To protect the memory of enclaves
(isolation), OpenSGX needs to ensure that an enclave accesses
only its own EPC pages and normal processes never access the
enclave memory. To enforce such memory accesses, OpenSGX
interposes every single memory access and checks the execution
context (e.g., enclave or non-enclave) and the corresponding
access permission. Specifically, OpenSGX instruments all
memory accesses by checking the memory operands of all
x86 instructions. Also, for access control to individual EPC
pages, OpenSGX maintains their access permissions and the
owner enclave in a CPU-specific data structure, called Enclave
Page Cache Map (EPCM), following the Intel SGX [21, 22][Ch.
1.5.1].
OpenSGX defines two kinds of memory accesses: enclave
accesses that are initiated by an enclave program and non-
enclave accesses that are equivalent to traditional memory
accesses [21, 22][Ch. 2.3]. However, regardless of CPU modes
(i.e., enclave mode or not), all memory accesses should be
coordinated by an underlying memory management unit (e.g.,
permissions in the page table entries), which means an enclave
program and its host application will share a process’ linear
address.
Depending on the entity (from enclave or host code) and
the type of memory region (either enclave or host data), Intel
SGX decides whether to approve the requested memory access
or not [36]. Memory accesses to own data or code are always
permitted (e.g., enclave code → its data or host code → its
data); however, memory accesses to another enclave’s code
are strictly prohibited. Note that memory accesses from an
enclave to its host’s data or code are permitted [36][Figure
2]. OpenSGX leverages this to set aside a shared memory for
communication between enclaves and their host programs (e.g.,
trampoline), as explained in §IV-D.
EPC encryption. OpenSGX is not
intended to run en-
clave programs under strong adversarial models; the TCB of
OpenSGX includes its emulation layer, host operating system,
and hardware, unlike Intel SGX, which can provide a strong
protection of running enclaves with a single trust, the CPU.
Accordingly, OpenSGX does not perform encryption for every
single memory operation, but rather simply restricts the memory
accesses to the EPC region because this relaxation does not
affect the functional correctness of OpenSGX.
However, OpenSGX as a baseline platform can be easily
extended to implement various types of Memory Encryption
Engines (MEE) or exploratory encryption schemes for research.
Furthermore, combined with the precise cache tracking provided
0x0000enclave_main()CodeEPC1DataEPC20x1000"hello sgx\n"Entry point: SigStruct: ....Packaged Enclave Programby QEMU, one can quantitatively measure and compare the
performance of potential encryption schemes. For example,
AES CTR Encryption or MAC algorithms described in the
Intel SGX Workshop [24] can be easily implemented and
their performance impact can be studied in a well-controlled
environment.
Data structures and SGX processor key. To accurately em-
ulate Intel SGX, OpenSGX implements critical data structures
described in the Intel SGX specifications from Intel, including
SGX Enclave Control Structure (SECS), Enclave Signature
Structure (SIGSTRUCT), Thread Control Structure (TCS), and
Enclave Page Cache Map (EPCM) inside the emulator as
additional states for the CPU (see Table II). Finally, OpenSGX
provides a configurable SGX processor key, which is a unique
key that Intel SGX provisions to each processor. SGX processor
key serves as the root of the key hierarchy that is used to
generate keys, including launch key, report key, provision key,
and seal key. Note that Intel SGX uses a group signature
scheme (EPID [9]) for attestation and verification to prevent
an SGX-equipped platform from being uniquely identified. In
our current implementation, we use a public signature scheme
(RSA) as a proof-of-concept and leave the adoption of an
EPID-like infrastructure as future work.
B. OS Emulation Layer
Intel SGX does not work out-of-box for end-users. It
requires an intimate assistance from operating systems to
properly launch an enclave program. In OpenSGX, instead
of requiring users to use a specific type of operating system
or relying on a custom implementation, we expose an OS-
neutral interface by implementing an underlying emulation layer
that executes the privileged SGX instructions. The OpenSGX
OS emulation layer implements a set of new system calls
for enclaves, described in Table III. The OS emulation layer
provides three major services for enclave programming: 1)
enclave initialization, 2) EPC page translation, and 3) dynamic
EPC page allocation. In addition, OpenSGX implements two
additional system call interfaces to bootstrap the emulated
hardware and to fetch the internal report generated with the
performance profiler.
Bootstrapping. sys_init() performs the bootstrapping pro-
cess as described in §IV-A. After bootstrapping,
the OS
emulation layer obtains a contiguous chunk of EPC and its
physical address. Then, we can use the EPC region to initialize
an enclave. Note that the EPC access is controlled by OpenSGX
QEMU, and thus is only visible to QEMU. The OS must map
EPC pages to an enclave using appropriate instructions before
an enclave can access EPC pages.
Enclave initialization. OpenSGX initializes an enclave with
four SGX instructions, namely ECREATE, EADD, EEXTEND, and
EINIT. A new system call, sys_create_enclave(), is imple-
mented to initiate, extend, and measure an enclave program, and
requires privileged SGX instructions. ECREATE first creates an
empty enclave by allocating the number of requested EPC pages
(specified in n_of_pages) and initiates the measurement of
the new enclave. Starting from base_address, which indicates
the starting address of code and data memory, EADD loads all
pages in this source memory to the allocated EPC pages in
sequence. Whenever a new EPC page is added, EEXTEND needs
to be executed to correctly measure the page content, and it
extends the measurement registers of the initializing enclave.
6
Finally, EINIT completes the enclave measurement and the
initialization process. sig and token are used to verify the
enclave measurement, representing SIGSTRUCT and EINITTOKEN
respectively. sig contains a pre-computed enclave measurement,
a signature over the data structure using a private key (usually
signed by developer), and also the corresponding public key that
represents the certified issuer. During EINIT, the pre-computed
enclave measurement is first verified by using the signature and
the public key. Then, OpenSGX compares the pre-computed
measurement with the final measurement. If two measurements
are equal, the enclave becomes ready to securely execute the
enclave code in isolation.
To support multiple enclaves concurrently, OpenSGX main-
tains a per-enclave structure that describes the execution context
of each enclave; for example, an enclave id, contents of TCS,
and stack size are stored, similar to task_struct in Linux. The
structure also contains debugging information and performance
counters (e.g., the number of leaf commands executed), leaving
rooms for future extensions for research.
EPC page translation. For convenience, the OS emulation
layer of OpenSGX pretends to identically map the virtual
address of EPC pages to the physical memory space, similar
to the direct-mapped regions in the Linux kernel. This design
decision simplifies the implementation of the emulated OS and
helps researchers using OpenSGX to conceptually distinguish
physical and virtual addresses in their projects.
Dynamic EPC page allocation. The Intel SGX revision
2 [5, 22] provides a mechanism to dynamically expand
the enclave memory by using EAUG and EACCEPT. Based on
these two instructions, OpenSGX provides sys_add_epc() to
dynamically allocate additional EPC pages for the enclave that
requires more memory. When an enclave needs a new EPC
page, the emulated OS allocates a free EPC page via EAUG.
Then the enclave should invoke EACCEPT to accept the new
page to its own enclave region. In fact, EACCEPT embodies a
few interesting checks that play a key role in thwarting the
Iago attack, which is descried in §IV-D.
Performance monitor. When an enclave is created, OpenSGX
keeps track of the new enclave by assigning a custom identifier
(keid) in the emulated OS and a descriptor. For the given
keid, the enclave descriptor collects stat/profiling information
including statistics and enclave-specific metadata (e.g., SECS and
TCS). A host application later can query the collected profiling
information through sys_stat_enclave().
System call emulation. The OS emulation layer is imple-
mented as a user space library that OpenSGX programs can
link to. Thus, we emulate the system call interface using the
function calls that follow the convention implemented in the
compiler, instead of using the conventional system call interface.
When a system call is invoked inside an enclave, a context
switch occurs by first storing the context of the enclave inside
a specially reversed region inside the EPC, called State Save
Area (SSA). Then, we exit the enclave and context switch to
the kernel. After the kernel’s execution of the system call, it
returns back to the enclave to restore its context and verifies the
kernel’s return value inside the enclave. sgxlib, described in
§IV-D, automatically performs these tasks during the invocation
of sys_add_epc().
Instruction
bool sys_sgx_init()
int sys_init_enclave(
void *base_address,
unsigned int n_of_pages,
tcs_t tcs,
sigstruct_t *sig,
einittoken_t *token)
unsigned long sys_add_epc(
int keid)
int sys_stat_enclave(
int keid,
keid_t *stat)
Description
Allocates EPC, sets cpusvn, and initializes sgx and custom data structures in QEMU side.
Allocates, adds, measures EPC pages, and initialize OS-specific structures.
Starting address of code/data pages, a linear address
The number of total pages to be loaded
Thread control structure address used for entering enclave, a linear address
Information about the enclave from the enclave signer
Token for verifying that the enclave is permitted to launch
Leaf commands: ECREATE, EADD, EEXTEND, EINIT
Allocates a new EPC page to the running enclave.
Enclave id
Leaf commands: EAUG
Obtains the enclave stats: such as eid, #encls, #enclu calls, allocated stack/heap, perf etc.
Enclave id
Container of stat information of enclave
TABLE III: List of system calls that OpenSGX newly introduced to the kernel in order to coordinate enclave programs. In Intel SGX, the
operating system should be in charge of authorization, fairness, and execution of the requested enclave program in order to fully take advantages
of the OpenSGX-compatible hardware. We introduced four different system calls (not specified in Intel SGX) and explored the possibility of
deploying a subsystem to support Intel SGX in the commodity operation system such as Linux.
C. OpenSGX Toolchain, Compilation and Loader
OpenSGX provides a toolchain, called opensgx, that auto-
mates the building process of an enclave program. Figure 2
shows an example of how developers can use opensgx to
generate an OpenSGX-aware binary (a .sgx file) that contains
code and data for enclave programs, as well as a configuration
file (a .conf file) that contains required keys and measurement
for SIGSTRUCT and EINITTOKEN data structures.
Compilation. One key feature of opensgx is that it generates
a binary that can be easily relocated to EPC. According to the
SGX specification, EADD instruction loads code and data into
EPC by direct memory copying, which implicitly assumes that
developers take care of program relocation by themselves. To
ease the developers’ efforts in handling program relocation,
OpenSGX provides a build script to automatically tweak the
compilation options to make the enclave code and data easily
relocatable at runtime. More specifically, OpenSGX provides
a custom linker script that specifies the locations of all code
and data (including initialized, uninitialized, and global data
sections) properly onto the enclave address space.
After the compilation with opensgx, the final enclave binary
will include a set of pre-defined symbols (e.g., enclave_main()
that describes the entry point of the enclave code) and embed
sgxlib as a separate section. For more involved source code,
developers can provide a custom linker script that specifies
the code (.enc_text) and data (.enc_data) sections to be
included in the enclave. As an optimization, OpenSGX can
avoid additional relocation of both sections by statically linking
all symbols at compile time.
Loader. OpenSGX loader determines the memory layout
of code, data, stack, and heap sections, and necessary data
structures on the EPC region during the initialization of an
enclave. Similar to a typical loader, the OpenSGX loader
obtains the information of code and data sections (i.e., offset
and size of .enc_text and .enc_data sections) and the program
base address from corresponding ELF files. The required
enclave size and the memory layout are determined based
on code and data size, memory configuration (we set default
heap and stack size and allow developers to easily adjust),
and other necessary data structures (see Figure 3). Then, the
OpenSGX loader forwards the memory layout information to
Fig. 3: Loading process performed by OpenSGX loader. First,
.enc_text and .enc_data sections are loaded in to host memory.
OpenSGX loader then forwards two sections along with stack, heap,
and other necessary data structures to EPC via sys_create_enclave().