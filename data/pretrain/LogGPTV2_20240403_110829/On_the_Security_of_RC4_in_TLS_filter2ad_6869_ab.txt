1.3 Paper Organisation
Section 2 provides further background on the RC4
stream cipher and the TLS Record Protocol. Section 3
summarises weaknesses in RC4 that we exploit in our at-
tacks. Section 4 describes our two plaintext recovery at-
tacks on RC4. We evaluate the attacks in Section 5, with
our main focus there being on TLS. Finally, Section 6
discusses countermeasures to our attacks, and concludes
with a recap of the main issues raised by our work.
2 Further Background
2.1 The RC4 Stream Cipher
The stream cipher RC4, originally designed by Ron
Rivest, became public in 1994 and found application in a
wide variety of cryptosystems; well-known examples in-
clude SSL/TLS, WEP [1], WPA [2], and some Kerberos-
related encryption modes [14]. RC4 has a remark-
ably short description and is extremely fast when imple-
mented in software. However, these advantages come
at the price of lowered security: several weaknesses have
been identiﬁed in RC4 [12, 11, 17, 16, 15, 23, 25, 24, 26],
some of them being conﬁrmed and exploited in the cur-
rent paper.
Technically, RC4 consists of two algorithms: a key
scheduling algorithm (KSA) and a pseudo-random gen-
eration algorithm (PRGA), which are speciﬁed in Fig-
ure 1. The KSA takes as input a key K, typically a byte-
array of length between 5 and 32 (i.e., 40 to 256 bits), and
produces the initial internal state st0 = (i, j,S), where S
is the canonical representation of a permutation on the set
Algorithm 1: RC4
scheduling (KSA)
key
Algorithm 2: RC4 keystream
generator (PRGA)
input : key K of l bytes
output: internal state st0
begin
for i = 0 to 255 do
S[i] ← i
j ← 0
for i = 0 to 255 do
j ←j +S[i]+K[i mod l]
swap(S[i],S[j])
i, j ← 0
st0 ← (i, j,S)
return st0
input : internal state str
output: keystream byte Zr+1
internal state str+1
begin
parse (i, j,S) ← str
i ← i + 1
j ← j + S[i]
swap(S[i],S[j])
Zr+1 ← S[S[i] + S[j]]
str+1 ← (i, j,S)
return (Zr+1, str+1)
Figure 1: Algorithms implementing the RC4 stream ci-
pher. All additions are performed modulo 256.
[0,255] as an array of bytes, and i, j are indices into this
array. The PRGA will, given an internal state str, output
‘the next’ keystream byte Zr+1, together with the updated
internal state str+1. Particularly interesting to note is the
fact that updated index j is computed in dependence on
current i, j, and S, while i is just a counter (modulo 256).
2.2 The TLS Record Protocol
We describe in detail the cryptographic operation of the
TLS Record Protocol in the case that RC4 is selected as
the encryption method.
Data to be protected by TLS is received from the ap-
plication and may be fragmented and compressed before
further processing. An individual record R (viewed as
a sequence of bytes) is then processed as follows. The
sender maintains an 8-byte sequence number SQN which
is incremented for each record sent, and forms a 5-byte
ﬁeld HDR consisting of a 2-byte version ﬁeld, a 1-byte
type ﬁeld, and a 2-byte length ﬁeld. It then calculates
an HMAC over the string HDR||SQN||R; let T denote the
resulting tag.
For RC4 encryption, record and tag are concate-
nated to create the plaintext P = R||T . This plaintext
is then xored in a byte-by-byte fashion using the RC4
keystream, i.e., the ciphertext bytes are computed as
Cr = Pr ⊕ Zr
for r = 1,2,3, . . .
,
where Pr are the individual bytes of P, and Zr are the RC4
keystream bytes. The data transmitted over the wire then
has the form
HDR||C ,
where C is the concatenation of the bytes Cr.
The RC4 algorithm itself is initialised at the start of
each TLS connection, using a 128 bit encryption key K.
This key K is computed with a hash-function-based key
308  22nd USENIX Security Symposium 
USENIX Association
4
derivation function from the TLS master secret that is es-
tablished during the TLS Handshake Protocol. In more
detail, the key K may be established either via a full TLS
Handshake or via TLS session resumption. In a full TLS
Handshake, a total of 4 communication round-trips are
needed, and usually some public key cryptographic op-
erations are required of both client and server. A full
TLS Handshake run establishes a new TLS session and
a new TLS master secret from which all other keys, in-
cluding RC4 key K, are derived. TLS session resumption
involves a lightweight version of the TLS Handshake
Protocol being run to establish a new connection within
an existing session: essentially, an exchange of nonces
takes place, followed by an exchange of Finished mes-
sages; no public key cryptographic operations are in-
volved. The keys for the new connection, including K,
are derived from the existing master secret and the new
nonces. Given the design of the key derivation process,
it is reasonable to model K as being uniformly random in
the different sessions/connections.
The initialisation of RC4 in TLS is the standard one
for this algorithm. Notably, none of the initial keystream
bytes is discarded when RC4 is used in TLS, despite
these bytes having known weaknesses. Note also that
the ﬁrst record sent under the protection of RC4 for each
session or connection will be a Finished message, typ-
ically of length 36 bytes, consisting of a Handshake Pro-
tocol header, a PRF output, and a MAC on that output.
This is typically 36 bytes in size. This record will not
be targeted in our attacks, since it is not constant across
multiple sessions.
The decryption process reverses this sequence of
steps, but its details are not germane to our attacks.
For TLS, any error arising during decryption should be
treated as fatal, meaning an (encrypted) error message
is sent to the sender and the session terminated with all
keys and other cryptographic material being disposed of.
This gives an attacker a convenient method to cause a
session to be terminated and force new encryption and
MAC keys to be set up. Another method is to somehow
induce the client or server to initiate session resumption.
3 Biases in the RC4 Keystream
In this section, we summarise known biases in the RC4
keystream, and report new biases that we have observed
experimentally.
3.1 Single-byte Biases
The ﬁrst signiﬁcant bias in the RC4 keystream was ob-
served by Mantin and Shamir in [17]. Their main result
can be stated as:
Result 1. [17, Thm 1] The probability that Z2, the sec-
ond byte of keystream output by RC4, is equal to 0x00
is approximately 1/128 (where the probability is taken
over the random choice of the key).
Since this result concerns only the second byte of the
keystream, and this byte is always used to encrypt a
Finished message in TLS, we are unable to exploit it
in our attacks. More recently, the following result was
obtained by Sen Gupta et al. in [23] as a reﬁnement of an
earlier result of Maitra et al. [15]:
Result 2. [23, Thm 14 and Cor 3] For 3 ≤ r ≤ 255, the
probability that Zr, the r-th byte of keystream output by
RC4, is equal to 0x00 is
Pr(Zr = 0x00) =
1
256
+
cr
2562 ,
where the probability is taken over the random choice of
the key, c3 = 0.351089, and c4,c5 . . . ,c 255 is a decreasing
sequence with terms that are bounded as follows:
0.242811 ≤ cr ≤ 1.337057.
In other words, bytes 3 to 255 of the keystream have
a bias towards 0x00 of approximately 1/216. This re-
sult was experimentally veriﬁed in [23] and found to be
highly accurate (see Figure 11 of that paper). The bi-
ases here are substantially smaller than those observed in
Result 1.
Additionally, Sen Gupta et al. [23] have identiﬁed a
key-length-dependent bias in RC4 keystreams. Speciﬁ-
cally, [23, Theorem 5] shows that when the key-length
is (cid:28) bytes, then byte Z(cid:28) is biased towards value 256− (cid:28),
with the bias always being greater than 1/216. For RC4
in TLS, we have (cid:28) = 16.
Experimentally, we have observed additional biases in
the RC4 keystream that do not yet have a theoretical ex-
planation. As an example, Figure 2 shows the empir-
ical distribution for the RC4 keystream bytes Z16, Z32
and Z50, calculated over 244 independent, random 128-bit
keys. For Z16, we have 3 main biases: the bias towards
0x00, the very dominant key-length-dependent bias to-
wards 0xF0 (decimal 240) from [23], and a new bias to-
wards 0x10 (decimal 16). For Z32, we also have 3 main
biases: the bias towards 0x00, a large, new bias towards
0xE0 (decimal 224), and a new bias towards 0x20 (dec-
imal 32). For Z50, there are signiﬁcant biases towards
byte values 0x00 and 0x32 (decimal 50), as well as an
upward trend in probability as the byte value increases.
Individual inspection of ciphertext distributions at all
positions 1 ≤ r ≤ 256 reveals two new signiﬁcant bi-
ases that occur with speciﬁc regularities: a bias towards
value r for all r, and a bias towards value 256− r at po-
sitions r that are multiples of (key-length) 16; note that
USENIX Association  
22nd USENIX Security Symposium  309
5
0.00406%
0.00404%
0.00402%
0.004%
0.00398%
0.00396%
0.00394%
0.00392%
0.0039%
0.00388%
0.00402%
0.004%
0.00398%
0.00396%
0.00394%
0.00392%
0.0039%
0.00388%
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
110%
120%
130%
140%
150%
160%
170%
180%
190%
200%
210%
220%
230%
240%
250%
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
110%
120%
130%
140%
150%
160%
170%
180%
190%
200%
210%
220%
230%
240%
250%
0.00405&
0.00403&
0.00401&
0.00399&
0.00397&
0.00395&
0.00393&
0.00391&
0.00389&
0&
10&
20&
30&
40&
50&
60&
70&
80&
90&
100&
110&
120&
130&
140&
150&
160&
170&
180&
190&
200&
210&
220&
230&
240&
250&
0.003922&
0.00392&
0.003918&
0.003916&
0.003914&
0.003912&
0.00391&
0.003908&
0.003906&
0.003904&
0.003902&
0&
10&
20&
30&
40&
50&
60&
70&
80&
90&
100&
110&
120&
130&
140&
150&
160&
170&
180&
190&
200&
210&
220&
230&