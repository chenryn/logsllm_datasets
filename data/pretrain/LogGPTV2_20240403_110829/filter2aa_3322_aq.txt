PoC和EXP的概念仅有细微的差别，前者用于验证，后者则是直接
利用。自主编写PoC或EXP，要比直接使用第三方编写的漏洞利用工具
或成熟的漏洞利用代码困难得多。但对于很多没有已知利用代码的漏
洞或0day漏洞，自主编写PoC或EXP就显得非常重要了。
此外，针对不同的目标或在不同的系统环境中，编写PoC或EXP的
难度也不同。针对Web应用和智能硬件/IoT设备等，编写PoC或EXP相对
容易，属于进阶能力；而针对操作系统或安全设备编写PoC或EXP则更
加困难，属于高阶能力。
（4）社工钓鱼
社工钓鱼，既是实战攻防演练中经常使用的作战手法，也是黑产
团伙或黑客组织最常使用的攻击方式。在很多情况下，攻击人要比攻
击系统容易得多。社工钓鱼的方法和手段多种多样。在实战攻防演练
中，最为常用，也是最为实用的技能主要有四种：开源情报搜集、社
工库搜集、鱼叉邮件和社交钓鱼。其中，前两个属于情报搜集能力，
而后两个则属于攻防互动能力。
1）开源情报搜集。开源情报搜集能力是指在公开的互联网信息平
台上合法搜集目标机构的关键情报信息的能力。例如，新闻媒体、技
术社区、企业官网、客户资源平台等公开信息分享平台都是开源情报
搜集的重要渠道。蓝队可以通过开源情报搜集，获取诸如企业员工内
部邮箱、联系方式、企业架构、供应链名录、产品代码等关键情报信
息。这些信息都可以为进一步的攻击提供支撑。
开源情报搜集是蓝队首要的情报搜集方式，其关键在于要从海量
网络信息中找到并筛选出有价值的情报信息组合。通常情况下，单一
渠道公开的机构信息大多没有什么敏感性和保密性，价值有限，但如
果将不同渠道的多源信息组合起来，就能够形成非常有价值的情报信
息。当然，不排除某些机构会不慎将内部敏感信息泄露在互联网平台
上。蓝队在互联网平台上直接找到机构内部开发代码，找到账号密码
本的情况也并不少见。
2）社工库搜集。社工库搜集能力是指针对特定目标机构社工库信
息的搜集能力。
所谓社工库，通常是指含有大量用户敏感信息的数据库或数据
包。用户敏感信息包括但不限于账号、密码、姓名、身份证号、电话
号码、人脸信息、指纹信息、行为信息等。由于这些信息非常有助于
攻击方针对特定目标设计有针对性的社会工程学陷阱，因此将这些信
息集合起来的数据包或数据库就被称为社会工程学库，简称社工库。
社工库是地下黑产或暗网上交易的重要标的物。不过，在实战攻
防演练中，蓝队所使用的社工库资源必须兼顾合法性问题，这就比黑
产团伙建立社工库的难度要大得多。
3）鱼叉邮件。鱼叉邮件能力是指通过制作和投递鱼叉邮件，实现
对机构内部特定人员有效欺骗的一种社工能力。
鱼叉邮件是针对特定组织机构内部特定人员的定向邮件欺诈行
为，目的是窃取机密数据或系统权限。鱼叉邮件有多种形式，可以将
木马程序作为邮件的附件发送给特定的攻击目标，也可以构造特殊
的、有针对性的邮件内容诱使目标人回复或点击钓鱼网站。鱼叉邮件
主要针对的是安全意识或安全能力不足的机构内部员工。不过，某些
设计精妙的鱼叉邮件，即便是有经验的安全人员也难以识别。
4）社交钓鱼。社交钓鱼一般建立在使人决断产生认知偏差的基础
上，也是网络诈骗活动的主要方法，但在以往的实战攻防演练中还很
少使用。随着防守方能力的不断提升，直接进行技术突破的难度越来
越大，针对鱼叉邮件也有了很多比较有效的监测方法，于是近两年社
交钓鱼方法的使用越来越多了。
4.2.3 高阶能力
高阶能力主要包括系统层漏洞利用与防护、系统层漏洞挖掘、身
份隐藏、内网渗透、掌握CPU指令集、高级安全工具、编写PoC或EXP等
高级利用以及团队协作八大类。
1. 系统层漏洞利用与防护
为应对各种各样的网络攻击，操作系统内部有很多底层的安全机
制。而每一种安全机制，都对应了一定形式的网络攻击方法。对于蓝
队人员来说，学习和掌握底层的系统安全机制，发现程序或系统中安
全机制设计的缺陷或漏洞，是实现高水平网络攻击的重要基础。实战
攻防演练中，最实用且最常用的系统层安全机制有以下7种。
1）SafeSEH。SafeSEH是Windows操作系统的一种安全机制，专门
用于防止异常处理函数被篡改。在程序调用异常处理函数之前，
SafeSEH会对要调用的异常处理函数进行一系列的有效性校验。如果发
现异常处理函数不可靠或存在安全风险，应立即终止异常处理函数的
调用。如果SafeSEH机制设计不完善或存在缺欠，就有可能被攻击者利
用、欺骗或绕过。当系统遭到攻击时，程序运行就会出现异常，并触
发异常处理函数。而要使攻击能够继续进行，攻击者就常常需要伪造
或篡改系统异常处理函数，使系统无法感知到异常的发生。
蓝队的SafeSEH能力是指掌握SafeSEH的技术原理，能够发现程序
或系统中SafeSEH机制的设计缺陷，并加以利用实施攻击的能力。
2）DEP。DEP（Data Execution Protection，数据执行保护）的
作用是防止数据页内的数据被当作可执行代码执行，引发安全风险。
从计算机内存的角度看，对数据和代码的处理并没有明确区分，只不
过在系统的调度下，CPU会对于不同内存区域中的不同数据进行不一样
的计算而已。这就使得系统在处理某些经过攻击者精心构造的数据
时，会误将其中的一部分“特殊数据”当作可执行代码执行，从而触
发恶意命令的执行。而DEP机制设计的重要目的就是防止这种问题的发
生；如果DEP机制设计不完善或存在缺欠，就有可能被攻击者所利用、
欺骗或绕过。
蓝队的DEP能力是指掌握DEP的技术原理，能够发现程序或系统中
DEP机制的设计缺陷，并加以利用实施攻击的能力。
3）PIE。PIE（Position-Independent Executable，地址无关可
执行文件）与PIC（Position-Independent Code，地址无关代码）含
义基本相同，是Linux或Android系统中动态链接库的一种实现技术。
蓝队的PIE能力是指掌握PIE的技术原理，能够发现程序或系统中
PIE机制的设计缺陷，并加以利用实施攻击的能力。
4）NX。NX（No-eXecute，不可执行）是DEP技术中的一种，作用
是防止溢出攻击中，溢出的数据被当作可执行代码执行。NX的基本原
理是将数据所在内存页标识为不可执行，当操作系统读到这段溢出数
据时，就会抛出异常，而非执行恶意指令。如果NX机制设计不完善或
存在缺欠，就可以被攻击者利用并发动溢出攻击。
蓝队的NX能力是指掌握NX的技术原理，能够发现程序或系统中NX
机制的设计缺陷，并加以利用实施攻击的能力。
5）ASLR。ASLR（Address Space Layout Randomization，地址空
间随机化）是一种操作系统用来抵御缓冲区溢出攻击的内存保护机
制。这种技术使得系统上运行的进程的内存地址无法预测，使与这些
进程有关的漏洞变得更加难以利用。
蓝队的ASLR能力是指掌握ASLR的技术原理，能够发现程序或系统
中ASLR机制的设计缺陷，并加以利用实施攻击的能力。
6）SEHOP。SEHOP是Structured Exception Handler Overwrite
Protection的缩写，意为结构化异常处理覆盖保护。其中，结构化异
常处理是指按照一定的控制结构或逻辑结构对程序进行异常处理的一
种方法。如果结构化异常处理链表上的某一个或多个节点被攻击者精
心构造的数据所覆盖，就可能导致程序的执行流程被控制，这就是SEH
攻击。而SEHOP就是Windows操作系统中针对这种攻击给出的一种安全
防护方案。
蓝队的SEHOP能力是指蓝队掌握SEHOP的技术原理，能够发现程序
或系统中SEHOP机制的设计缺陷，并加以利用实施攻击的能力。
7）GS。GS意为缓冲区安全性检查，是Windows缓冲区的安全监测
机制，用于防止缓冲区溢出攻击。缓冲区溢出是指当计算机向缓冲区
内填充数据位数时，填充的数据超过了缓冲区本身的容量，溢出的数
据就会覆盖合法数据。理想的情况是：程序会检查数据长度，并且不
允许输入超过缓冲区长度的字符。但是很多程序会假设数据长度总是
与所分配的储存空间相匹配，这就埋下了缓冲区溢出隐患，即缓冲区
溢出漏洞。GS的作用就是通过对缓冲区数据进行各种校验，防止缓冲
区溢出攻击的发生。
蓝队的GS能力是指蓝队掌握GS的技术原理，能够发现程序或系统
中GS机制的设计缺陷，并加以利用实施攻击的能力。
2. 系统层漏洞挖掘
系统层漏洞的挖掘需要很多相对高级的漏洞挖掘方法。从实战角
度看，以下6种挖掘方法最为实用：代码跟踪、动态调试、Fuzzing技
术、补丁对比、软件逆向静态分析、系统安全机制分析。
1）代码跟踪。代码跟踪是指通过自动化分析工具和人工审查结合
的方式，对程序源代码逐条进行检查分析，发现其中的错误信息、安
全隐患和规范性缺陷，以及由这些问题引发的安全漏洞，并提供代码
修订措施和建议。
2）动态调试。动态调试原指程序作者利用集成环境自带的调试器
跟踪程序的运行，来协助解决程序中的错误。不过，对于蓝队来说，
动态调试通常是指这样一种分析方法：使用动态调试器（如OllyDbg、
x64Dbg等），为可执行程序设置断点，通过监测目标程序在断点处的
输入/输出及运行状态等信息，来反向推测程序的代码结构、运行机制
及处理流程等，进而发现目标程序中的设计缺陷或安全漏洞。
3）Fuzzing技术。Fuzzing技术是一种基于黑盒（或灰盒）的测试
技术，通过自动化生成并执行大量的随机测试用例来触发程序或系统
异常，进而发现产品或协议的未知缺陷或漏洞。
4）补丁对比。每一个安全补丁都会对应一个或多个安全漏洞。通
过对补丁文件的分析，往往可以还原出相应漏洞的原理或机制。而利
用还原出来的漏洞，就可以对尚未打上相关补丁的程序或系统实施有
效攻击。而补丁对比是实战环境下，补丁分析的一种常用的、有效的
方式。补丁对比是指对原始文件和补丁文件分别进行反汇编，然后对
反汇编后的文件做比较找出其中的差异，从而发现潜在漏洞的一种安
全分析方法。
5）程序逆向静态分析。程序逆向静态分析是指对程序实施逆向工
程，之后对反编译的源码或二进制代码文件进行分析，进而发现设计
缺陷或安全漏洞的一种安全分析方法。
对于开放源代码的程序，通过检测程序中不符合安全规则的文件
结构、命名规则、函数、堆栈指针等，就可以发现程序中存在的安全
缺陷。被分析目标没有附带源程序时，就需要对程序进行逆向工程，