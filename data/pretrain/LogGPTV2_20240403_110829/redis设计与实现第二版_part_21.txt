[5085]
!1 修改数
time_t seconds;
1/记录了保存条件的数组
!.··
设置保存条件
11秒数
30010
1 03 Sep 17:09:49.563 * Background saving terminated with success
03
Sep 17:09:49.522
Sep
Sep
17:09:49.522
：DB
saved
on disk
---
## Page 127
lastsave 属性，说明如下：
令修改了多少次数据库，dirty计数器的值就增加多少。
lastsave 属性：
10.2.2
dirty 计数器的值为 123，表示服务器在上次保存之后，
 dirty 计数器记录距离上一次成功执行 SAVE 命令或者 BGSAVE 命令之后，服务器
除了 saveparams 数组之外，服务器状态还维持着一个 dirty 计数器，以及一个
那么程序会将 dirty 计数器的值增加 3。
又例如，如果我们向一个集合键增加三个新元素：
那么程序会将 dirty 计数器的值增加 1。
例如，如果我们为一个字符串键设置值：
当服务器成功执行一个数据库修改命令之后，程序就会对dirty 计数器进行更新：命
struct redisServer (
lastsave 属性是一个 UNIX 时间戳，记录了服务器上一次成功执行 SAVE 命令或
(integer) 3
redis> SADD database Redis MongoDB MariaDB
者BGSAVE命令的时间。
新等操作)。
对数据库状态（服务器中的所有数据库）进行了多少次修改（包括写人、删除、更
//上一次执行保存的时间
1/修改计数器
dirty 计数器和 lastsave 属性
long long dirty;
saveparams
redisServer
图 10-6 
saveparams [0]
changes
seconds
900
服务器状态中的保存条件
[ saveparams [1]
changes
seconds
300
10
saveparams [2]
changes
seconds
10000
图10-7服务器状态示例
60
第10章RDB持久化·123
13782980
redisserver
---
## Page 128
124·第二部分单机数据库的实现
10 次修改—已经被满足。
执行一次 BGSAVE 命令，因为 saveparams 数组的第二个保存条件一
那么服务器就会执行 BGSAVE 命令。
条件是否已经满足，如果满足的话，就执行BGSAVE命令。
数用于对正在运行的服务器进行维护，它的其中一项工作就是检查 save 选项所设置的保存
10.2.3
那么当时间来到1378271101，也即是1378270800的301秒之后，服务器将自动
Redis 的服务器周期性操作函数 serverCron 默认每隔 100 毫秒就会执行一次，该函
举个例子，如果 Redis 服务器的当前状态如图 10-8 所示。
程序会遍历并检查 saveparams 数组中的所有保存条件，只要有任意一个条件被满足，
def serverCron():
以下伪代码展示了serverCron 函数检查保存条件的过程：
1astsave属性则记录了服务器上次执行保存操作的时间1378270800（2013年9
月4 日零时)。
对数据库状态共进行了123 次修改。
for saveparam in server.saveparams:
#遍历所有保存条件
检查保存条件是否满足
暑如果数据库状态的修改次数超过条件所设暨的次数
save_interval = unixtime_now() - server.lastsave
#计算距离上次执行保存操作有多少秒
139859880
 saveparams
redisServer
save_interval > saveparam.seconds:
BGSAVE()
dirty
saveparams [0] saveparams [1] saveparams [2]
changes
图10-8
服务器状态
changes
changes
 seconds
60
—300秒之内有至少
---
## Page 129
文件结构图都遵循这一规则。
字串‘R"、‘E'、‘D"、'I'、
示变量和数据。本章展示的所有 RDB 文件结构图都遵循这一规则。
注意
字符。通过这五个字符，程序可以在载人文件时，快速检查所载人的文件是否RDB文件。
节，我们将对 RDB 文件本身进行介绍，并详细说明文件各个部分的结构和意义。
行间隔性数据保存的实现原理。
其中 dirty计数器已经被重置为 0，而lastsave 属性也被更新为1378271106。
"REDIS"符号代表‘R"、‘E'、‘D'、‘I'、‘S’五个字符，而不是带‘\O'结尾符号的C
10.3
db_version 长度为 4字节，它的值是一个字符串表示的整数，这个整数记录了 RDB
RDB文件的最开头是 REDIS 部分，这个部分的长度为5字节，保存着“REDIS”五个
因为RDB文件保存的是二进制数据，而不是C字符串，为了简便起见，我们用
为了方便区分变量、数据、常量，图10-10中用全大写单词标示常量，用全小写单词标
图10-10展示了一个完整RDB文件所包含的各个部分。
在本章之前的内容中，我们介绍了Redis 服务器保存和载人 RDB 文件的方法，在这一
以上就是 Redis 服务器根据 save 选项所设置的保存条件，自动执行 BGSAVE 命令，进
假设BGSAVE 在执行5 秒之后完成，那么图10-8所示的服务器状态将更新为图10-9,
RDB 文件结构
1378591Y86
redisServer
saveparams
dirty
REDIsdb_version|databasesEoFcheck_sum
图 10-9执行 BGSAVE 之后的服务器状态
、'S'、‘\O’。本章介绍的所有内容，以及展示的所有RDB
saveparams[0]  saveparams[1] saveparams[2]
图 10-10RDB 文件结构
changes
seconds
900
changes
seconds
300
10000
changes
seconds
第10章RDB持久化·125
---
## Page 130
126第二部分单机数据库的实现
pairs 三个部分，如图 10-13 所示。
database 3 则代表3 号数据库中的所有键值对数据。
10-12 所示的 RDB 文件，图中的 database0代表0号数据库中的所有键值对数据，而
10.3.1
是文件的校验和。
databases 为空，所以版本号之后直接跟着EOF 常量，最后的6265312314761917404
"REDIS"表示这是一个RDB文件，之后的"0006"表示这是第六版的RDB文件，因为
对比，以此来检查 RDB 文件是否有出错或者损坏的情况出现。
在载人 RDB 文件时，会将载入数据所计算出的校验和与 check_sum所记录的校验和进行
过对REDIS、db_version、databases、EOF 四个部分的内容进行计算得出的。服务器
到这个值的时候，它知道所有数据库的所有键值对都已经载人完毕了。
文件的结构。
文件的版本号，比如"0006”就代表RDB文件的版本为第六版。本章只介绍第六版RDB
每个非空数据库在 RDB 文件中都可以保存为 SELECTDB、db_number、keY_value_
例如，如果服务器的0号数据库和3号数据库非空，那么服务器将创建一个如图
作为例子，图10-11展示了一个 databases 部分为空的 RDB 文件：文件开头的
check_sum 是一个 8字节长的无符号整数，保存着一个校验和，这个校验和是程序通
SELECTDB 常量的长度为1字节，当读人程序遇到这个值的时候，它知道接下来要读
一个 RDB 文件的databases 部分可以保存任意多个非空数据库。
EOF 常量的长度为1 字节，这个常量标志着 RDB 文件正文内容的结束，当读人程序遇
databases 部分包含着零个或任意多个数据库，以及各个数据库中的键值对数据：
口如果服务器的数据库状态为非空（有至少一个数据库非空），那么这个部分也为非空
口如果服务器的数据库状态为空（所有数据库都是空的），那么这个部分也为空，长度
根据数据库所保存键值对的数量、类型和内容不同，这个部分的长度也会有所不同。
为0字节。
 databases 部分
REDIs db_version database 0 database 3EOF check_sum
"REDIS"
SELECTDB  db_number
图10-12带有两个非空数据库的RDB文件示例
图 10-11databases 部分为空的 RDB 文件
图10-13RDB文件中的数据库结构
"0006"EoF
key_value_pairs
6265312314761917404
---
## Page 131
key和value 分别保存了键值对的键对象和值对象：
文件中的键值对数据时，程序会根据 TYPE 的值来决定如何读人和解释value 的数据。
所示。
键值对带有过期时间的话，那么键值对的过期时间也会被保存在内。
10.3.2 key_value_pairs 部分
件中包含了0号数据库和3号数据库。
据库的结构。
间，那么过期时间也会和键值对保存在一起。根据键值对的数量、类型、内容以及是否有过
据读人的数据库号码进行数据库切换，使得之后读人的键值对可以载人到正确的数据库中。
节、2字节或者5字节。当程序读人 db_number 部分之后，服务器会调用 SELECT命令，根
人的将是一个数据库号码。
不带过期时间的键值对在 RDB 文件中由 TYPE、key、Value 三部分组成，如图 10-16
RDB 文件中的每个 key_value_pairs 部分都保存了一个或以上数量的键值对，如果
另外，图10-15 则展示了一个完整的 RDB 文件，文
key_value_pairs 部分保存了数据库中的所有键值对数据，如果键值对带有过期时
db_number 保存着一个数据库号码，根据号码的大小不同，这个部分的长度可以是1字
TYPE 记录了value 的类型，长度为1字节，值可以是以下常量的其中一个:
作为例子，图10-14展示了RDB文件中，0号数
口根据 TYPE 类型的不同，以及保存内容长度的不同，保存value 的结构和长度也会
其中 key 总是一个字符串对象，它的编码方式和 REDIS_RDB_TYPE_STRING类型
以上列出的每个 TYPE 常量都代表了一种对象类型或者底层编码，当服务器读人 RDB
口
 REDIS_RDB_TYPE_STRING
口
口
口
口
REDISdb_versionSELECTDBOpairsSELECTDB
√
有所不同，本节稍后会详细说明每种 TYPE类型的value 结构保存方式。
的value一样。根据内容长度的不同，key的长度也会有所不同。
REDIS_RDB_TYPE_HASH_ZIPLIST
 REDIS_RDB_TYPE_ZSET_ZIPLIST
REDIS_RDB_TYPE_SET_INTSET
REDIS_RDB_TYPE_LIST_ZIPLIST
 REDIS_RDB_TYPE_HASH
 REDIS_RDB_TYPE_ZSET
REDIS_RDB_TYPE_SET
REDIS_RDB_TYPE_LIST
图10-15RDB文件中的数据库结构示例
3pairsEoFcheck_sum
SELEcTDBOkey_value_pairs
图10-16不带过期时间的键值对
图 10-14数据库结构示例
TYPEkeyvalue
第10章RDB持久化·127
---
## Page 132
128·第二部分单机数据库的实现
（bit）、16 位或者 32 位来保存整数值 integer。
超过32位的整数，这种编码的对象将以图10-20所示的结构保存。
对象，字符串对象的编码可以是 REDIS_ENCODING_INT 或者 REDIS_ENCODING_RAW。
可以去回顾一下。
结构。
的 TYPE 记录，根据类型的不同，value 部分的结构、长度也会有所不同。
10.3.3 value 的编码
值对，其中键的过期时间为1388556000000（2014年1月1日零时）。
间的字符串键值对。
EXPIRETIME_MS 和 ms，它们的意义如下：
不带过期时间的键值对的 TYPE、key、Value 三个部分的意义完全相同，至于新增的
其中，ENCODING 的值可 以 是 REDIS_RDB_ENC_INT8、REDIS_RDB_ENC_INT16
在接下来的各个小节中，我们将分别介绍各种不同类型的值对象在RDB文件中的保存
RDB 文件中的每个 value 部分都保存了一个值对象，每个值对象的类型都由与之对应
如果字符串对象的编码为 REDIS_ENCODING_INT，那么说明对象中保存的是长度不
本节接下来说到的各种 REDIS_ENCODING_*编码曾经在第8章中介绍过，如果忘记了
如果 TYPE 的值为 REDIS_RDB_TYPE_STRING，那么value 保存的就是一个字符串
图 10-19展示了—个带有过期时间的集合键
1.字符串对象
作为例子，图10-18展示了一个没有过期时
口 ms 是-一个 8字节长的带符号整数，记录着一个以毫秒为单位的 UNIX 时间戳，这个
口EXPIRETIME_MS 常量的长度为 1字节，它告知读入程序，接下来要读人的将是-
带有过期时间的键值对中的 TYPE、key、value三个部分的意义，和前面介绍的
带有过期时间的键值对在 RDB文件中的结构如图10-17 所示。
时间戳就是键值对的过期时间。
个以毫秒为单位的过期时间。
EXPIRETIME_MS1388S56000000REDIS_RDB_TYPE_SETkeyValue
EXPIRETIME_MSmsTYPE keyvalue
图10-19带有过期时间的集合键值对示例
图10-17带有过期时间的键值对
图10-18无过期时间的字符串键值对示例
REDIS RDB_TYPE_STRING key value
---
## Page 133
形式打印出来的字节。
压缩之后的长度为6，
"hello"。
compressed_string 记录的则是被压缩之后的字符串。
len 记录的是字符串被压缩之后的长度，而origin_len 记录的是字符串原来的长度，
len 和 compressed_string 三部分，对字符串进行解压缩：其中 compressed_
de）压缩过了，读人程序在碰到这个常量时，会根据之后的compressed_len、origin_
来保存该字符串。
值的长度。对于压缩后的字符串，RDB 程序会以图 10-23 所示的结构
保存该字符串。
关闭了 RDB 文件压缩功能，那么 RDB 程序总以无压缩的方式保存字符串值。
符串值，根据字符串长度的不同，有压缩和不压缩两种方法来保存这个字符串：
在 RDB 文件中保存的结构将如图10-21所示。
图10-25 展示了一个压缩后的字符串示例，从图中可以看出，字符串原本的长度为 21，
图10-24展示了一个保存无压缩字符串的例子，其中字符串的长度为5，字符串的值为
其中，string 部分保存了字符串值本身，而len 保存了字符串
其中，REDIS_RDB_ENC_LZF 常量标志着字符串已经被 LZF 算法（http:/liblzf.plan9.
对于没有被压缩的字符串，RDB 程序会以图 10-22所示的结构来
具体信息可以参考 redis.conf 文件中关于rdbcompression 选项的说明。
以上两个条件是在假设服务器打开了 RDB 文件压缩功能的情况下进行的，如果服务器
口如果字符串的长度大于20字节，那么这个字符串会被压缩之后再保存。
如果字符串的长度小于等于20字节，那么这个字符串会直接被原样保存。
如果字符串对象的编码为 REDIS_ENCODING_RAW，那么说明对象所保存的是一个字
图10-20INT编码字符申对象的保存结构
举个例子，如果字符串对象中保存的是可以用8位来保存的整数123，那么这个对象
图10-24无压缩的字符串
REDIS_RDB_ENC_LZF
5"hello"
ENCODINGinteger
压缩之后的字符串内容为"?aa？？？"，其中？代表的是无法用字符串
图10-23
 compressed_len
压缩后字符串的保存结构
REDIS_RDB_ENC_LZF
图10-25
origin_len compressed_string
图10-21用8位来保存整数的例子
REDIS_RDB_ENC_INT8123
压缩后的字符串
21