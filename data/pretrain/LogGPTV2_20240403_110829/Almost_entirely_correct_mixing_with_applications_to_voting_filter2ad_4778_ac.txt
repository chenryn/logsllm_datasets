simplicity, we assume that mi ∈ /. User Ui encrypts
mi and posts the resulting ciphertext (gr, mi · yr) to
the mix net’s bulletin board. Users must also prove
knowledge of mi (see section 2.1)
• The mix servers agree on a security parameter α > 0,
where α is a small integer (say, α ≤ 5). Higher values
of α provide a stronger guarantee of correct mixing
but oﬀer less privacy to the users. We examine this
trade-oﬀ in detail in the next section.
Re-randomization and Mixing.
The ﬁrst mix server reads users’ input ciphertexts from the
bulletin board, re-randomizes the ciphertexts, and writes
them back to the bulletin board in random order. One by
one all other mix servers perform the same operation. The
output written to the bulletin board by one mix server be-
comes the input to the next mix server, until each server has
performed the following mix step exactly once:
1. Mix server Mj reads as inputs n ElGamal ciphertexts
Ci = (gri , mi · yri ) from the bulletin board.
2. Mj re-randomizes these ciphertexts to produce C(cid:48)
i =
(gr(cid:48)
i , m(cid:48)
i · yr(cid:48)
i )
3. Mj outputs these new ciphertexts to the bulletin board
in random order: C(cid:48)
ϕj (i), where ϕj is a random permu-
tation on n elements chosen by mix server Mj. Mix
server Mj is required to remember the permutation ϕj
and the re-randomization factors r(cid:48)
i until the veriﬁca-
tion step which we describe next is complete. The per-
mutation ϕj and the re-randomization factors should
of course be kept secret.
Veriﬁcation.
Mix servers are not allowed to abort at any time during
the veriﬁcation. A mix server that does abort is accused of
cheating.
Before veriﬁcation starts, all servers jointly generate a ran-
dom string r which will be used to generate random chal-
lenges. The string r is generated as follows. Each mix server
Mj selects a random string rj and commits to rj using a
non-malleable commitment scheme [8]. After all commit-
ments are received, they are opened. The random string r
is computed as r = ⊕jrj.
Next, each server in turn must prove that it re-randomized
and mixed the ciphertexts correctly. The following 6 steps
are repeated individually for each server. The veriﬁcation
step for server Mj proceeds as follows. As above, let Ci =
(gri , mi · yri ) for 1 ≤ i ≤ n denote the input ciphertexts
(We omit the subscript j in the
received by server Mj.
notation of Ci for clarity). Let C(cid:48)
ϕj (i) be the set of outputs,
where C(cid:48)
i , m(cid:48)
i = (gr(cid:48)
i · yr(cid:48)
i ).
1. We ﬁrst verify that all C(cid:48)
i are properly formatted, i.e.
i consists of a pair (s, t) ∈ /2. Observe that
every C(cid:48)
this can be done eﬃciently. If / is a subgroup of ∗
p,
the computational cost to verify that an element be-
longs to / is one exponentiation, but the veriﬁcation
for all C(cid:48)
i can be batched (see [4]), resulting in a cost
of a single exponentiation to verify all C(cid:48)
i. If / is the
group of points of an elliptic curve over .p of prime
order q, the computational cost to verify that a point
is on the curve is one squaring and one cubing.
i=1 m(cid:48)
i.
2. Using the Chaum-Pedersen protocol (proposition 4.2),
mix server Mj proves that3n
i=1 mi =3n
3. All mix servers collaborate to generate α sets S1, . . . , Sα,
where each set Si is a subset of {1, . . . , n}. The sets
Si are generated independently of one another in the
following manner. Every index 1 ≤ k ≤ n is included
in Si independently at random with probability 1/2.
The randomness is derived from the random string r
generated jointly by all servers at the beginning of the
veriﬁcation step. We examine in more detail how to
generate the subsets Si at the end of this section.
4. The sets S1, . . . , Sα are given to mix server Mj.
5. Mix server Mj must produce α subsets S(cid:48)
α of
{1, . . . , n} such that for all 1 ≤ i ≤ α |Si| = |S(cid:48)
i|
k. This product equality
1, . . . , S(cid:48)
m(cid:48)
is proved using the Chaum-Pedersen protocol.
and3k∈Si
mk = 3k∈S(cid:48)
i
6. If the mix server fails in step 5, it is accused of cheating.
The decryption servers are then called upon to inspect
the transcript of the veriﬁcation (steps 3, 4 and 5) on
the bulletin board.
If cheating is conﬁrmed by the
decryption servers, the cheating mix server is banned
from any future mixing. In this case, the remaining
honest servers restart the whole mixing from the be-
ginning using the original ciphertext inputs posted by
users to the bulletin board.
Decryption.
The mix network proceeds to the decryption step only if
the veriﬁcation step did not expose any cheating servers. A
quorum of decryption servers jointly performs a threshold
72decryption of the ﬁnal output ciphertexts, and provides a
zero-knowledge proof of correctness for decryption.
6.3 Robustness
Perfectly-correct proof. If a proof that the mix net op-
erated perfectly correctly is required, we may run a slower
perfectly-correct veriﬁcation step, such as for example that
proposed by Neﬀ [20]. The cost of this additional veriﬁca-
tion is not included in the analysis of our new mix net.
This completes the description of our new mix net. We
end this section with a description of how to generate the
sets S1, . . . , Sα in step 3 of the veriﬁcation phase.
Optimization for the generation of challenges.
Recall that we denote by r the randomness jointly gener-
ated by all the servers before the veriﬁcation started. Let
h : {0, 1}∗ → {0, 1}160 be a hash function. In our security
analysis, we model h as a random oracle. Let B be the
content of the bulletin board just before the sets Si are gen-
erated (i.e. everything that has been posted to the bulletin
board up to that point). We use the master randomness
r and the string B together with the hash function h to
generate the sets S1, . . . , Sα using the following rule: index
k ∈ {1, . . . , n} is included in Si for mix server Mj if and
only if the least signiﬁcant bit of h(r||B||j||i||k) is 1, where
|| denotes string concatenation.
6. PROPERTIES
In this section, we examine the properties of our new mix
net in terms of soundness, eﬃciency, robustness, privacy,
correctness and ﬁnally universal veriﬁability.
6.1 Soundness
Proposition 6.1. (Soundness) Our mix net is sound,
in the sense that a server who does not deviate from the
protocol cannot fail the veriﬁcation step.
Proof. A mix net who submits S(cid:48) = ϕj(S) can not fail
the veriﬁcation test. Recall from proposition 2.1 that our
adversarial model allows the adversary to control at most
all but one of the mix servers, and up to a minority of de-
cryption servers. The involvement of the decryption servers
when cheating is alleged (step 6 of the veriﬁcation) guaran-
tees soundness since a majority of them is honest. (Were it
not for decryption servers, a majority of cheating mix servers
could evict a minority of honest mix servers.)

6.2 Efﬁciency
Proposition 6.2. (Eﬃciency) The cost of mixing n
items is 2n exponentiations per mix server. The cost of
proving that the mixing is almost entirely correct is 2α(2k−
1) exponentiations per mix server and the cost of decrypting
n outputs is (2 + 4k)n, where k is the total number of mix
servers.
As discussed in section 3, our mix has the lowest total
computational overhead to mix n inputs. In particular the
number of exponentiations required to prove that mixing has
been done correctly is a constant independent of the number
of inputs.
Proposition 6.3. (Robustness) Like any re-encryption
mix network, our construction produces an output as long as
a quorum of decryption servers is available to proceed with
the decryption phase.
6.4 Privacy
Proposition 6.4. (Privacy) Every input is hidden among
n/2α outputs on average.
Proof. In the veriﬁcation step, each mix server must re-
veal the image by his secret permutation of α sets S1, . . . , Sα,
each of size on average n/2. Every input belongs either to
Si or to the complement of Si, and thus the corresponding
output belongs either to the image of Si or to the image
of the complement of Si. The intersection of the images of
α sets Si (or their complements) is on average of size n/2α. 
This is the minimum privacy guaranteed by our mix net-
work, given that we consider an adversarial model in which
all but one of the mix servers may be controlled by the ad-
versary. If we adopt a weaker adversarial model and assume
that a majority of mix servers are honest, we can adapt the
techniques of [18] to our mix network to guarantee perfect
privacy for all the inputs with overwhelming probability.
6.5 Correctness
Proposition 6.5. (Almost Entirely Correct Mixing)
If the set of outputs produced by a mix server is not a per-
mutation of the inputs, then cheating will be detected with
probability 1 − (5/8)α, or the discrete logarithm problem in
/ can be solved in polynomial time.
The proof of almost entirely correct mixing is fairly in-
volved and is given in the next section. Let us consider a
concrete example. Consider an election with 160, 000 bal-
lots. A security parameter α = 6 guarantees that every
individual ballot is hidden among 2, 500 others. By propo-
sition 6.5, the probability that the output set computed by
the mix network is a permutation of the inputs is more than
94%.
6.6 Universal Veriﬁability
Our mix oﬀers no guarantee of universal veriﬁability. We
have already noted that a slower proof of perfect correctness
should be executed in parallel with our proof and we assume
that universal veriﬁability, if required, will come from that
slower proof. We note that while it is important that the
results of the election be available instantly (with our proof),
it is acceptable to wait longer (a day) for a proof of universal
veriﬁability (with another, slower proof).
7. PROOF OF CORRECTNESS (PROPOSI-
TION 6.5)
In this section we prove Proposition 6.5 (almost entirely
correct mixing). Throughout this section, we let / be a
group of prime order q and q = {0, . . . , q − 1}.
Theorem 7.1. Let 0  k the set V (cid:48) ∪ {vi} is lin-
early dependent and therefore we can ﬁnd c(i)
in
(cid:54)= 0.
q such that c(i)
If the equality c(i)
j uj = 0 also holds, then
ui = M · vi. Therefore, by the assumption of the lemma,
there exists (cid:96) > k such that c((cid:96))
j vj = 0 but
j uj (cid:54)= 0. The algorithm works by build-
c((cid:96))
ing the vectors (c(i)
k ) for i = k + 1, . . . , n + 1 and
outputting the ﬁrst one satisfying the requirement of the

lemma.
0 vi +2k
0 ui +2k