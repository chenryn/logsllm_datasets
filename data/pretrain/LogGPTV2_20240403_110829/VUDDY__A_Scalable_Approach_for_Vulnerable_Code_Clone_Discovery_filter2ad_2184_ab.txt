line breaks, and carriage returns, and then computes the MD5
hash value of each preprocessed ﬁle. It creates a hash table
in which the hash values and corresponding ﬁles constitute
keys and values, respectively. The overlapping hash values are
regarded as ﬁle clones. In contrast to DECKARD, FCFinder
demonstrates extensive scalability. It detected 915 K ﬁle clones
from FreeBSD ports collection, which contains over 7 K soft-
ware projects, and required 17.16 hours to complete its work.
This extended scalability results from their design choice to
adopt ﬁle-level granularity. However, for the same reason, their
approach is not resilient to minor or major changes within ﬁles.
5) Hybrid granularity: Some techniques leverage a com-
bination of various approaches. VulPecker [31] is a system
for automatically checking vulnerability containment. It char-
acterizes a vulnerability with a predeﬁned set of features, then
selects one of the existing code-similarity algorithms (e.g.,
[12], [18], [24]) which is optimal for the type of vulnerable
code fragment. As it takes advantage of a variety of algorithms,
it could detect 40 vulnerabilities which are not registered in the
National Vulnerability Database (NVD). However, it required
508.11 seconds to check the existence of CVE-2014-8547 in
project Libav 10.1 (0.5 MLoC), which makes it improper to
be used against massive open source projects.
III. PROBLEM AND GOAL STATEMENT
A. Problem formulation
C program). Let V ⊆ F, and T ⊆ F be a set of vulnerable
functions, and a set of target functions, respectively. Then, a
clone detector C is a function of the type:
C : F → {0, 1}
which takes a program and returns 1 (i.e., vulnerable) or 0.
Deﬁnition 1 (Completeness). A clone detector C is complete
with respect to V and T iﬀ
∀f ∈ T : f ∈ V ⇒ C(f ) = 1.
2) Abstract clone detector: Now, we denote the set of
abstract functions by ˆF, which is generated from F by applying
an abstraction function α:
α : F → ˆF
such that α is deterministic for ∀f, f
(cid:2) ∈ F:
(cid:2) ⇒ α(f ) = α(f
(cid:2)).
f = f
(4)
With V ⊆ F being a set of vulnerable functions, we can
deﬁne the abstract clone detector ˆC : F → {0, 1} in terms of
the abstraction function α:
ˆCV (f ) ≡ ∃f
(cid:2) ∈ V : α(f
(cid:2)) = α(f )
Obviously, the abstract clone detector ˆC is complete:
(1)
(2)
(3)
(5)
(6)
∀f ∈ F : f ∈ V ⇒ ˆC(f ) = 1.
B. Goals
The goals of this research are as follows:
1) Designing a clone detector C that satisﬁes completeness.
2) Designing an abstraction function α and associated ab-
stract clone detector ˆC, which is effective in detecting
Type-1 and Type-2 code clones of known vulnerabilities.
With a given vulnerable function f, ˆC should detect its
(cid:2)) = 1. This implies
abstract clones f
that ˆC completely detects exact clones of vulnerability, as
well as clones in which variable names, identiﬁers, data types,
comments, and whitespace are modiﬁed.
(cid:2), such that ˆC(f ) = ˆC(f
Type-3 and Type-4 code clones have characteristics which
make us exclude them from the scope of our abstract clone
detector ˆC. Most importantly, Type-3 and Type-4 code clones
can be subjective to the loss of syntactic information which
are crucial for a vulnerability to be triggered, because security
vulnerabilities are often very sensitive to the constants and the
order of statements. For example, vulnerability that leverages
race condition in the keyctl_read_key function in securi-
ty/keys/keyctl.c of the Linux kernel before 4.3.4 (CVE-2015-
7550) was ﬁxed by merely changing the order of statements
within the function1. This incident implies that if the order
information is lost after abstraction, the vulnerable condition
is lost as well. Moreover, constants, referring to ﬁxed values
that do not change during the execution of a program, are key
elements in many types of vulnerabilities. Intuitively, even a
1) Clone detector: First, we deﬁne a clone detector. For-
mally, let F be the set of all functions in a program (e.g., a
1See commit b4a1b4f5047e4f54e194681125c74c0aa64d637d in the Linux
kernel source tree.
598
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:17 UTC from IEEE Xplore.  Restrictions apply. 
(cid:51)(cid:53)(cid:40)(cid:51)(cid:53)(cid:50)(cid:38)(cid:40)(cid:54)(cid:54)(cid:44)(cid:49)(cid:42)
(cid:38)(cid:47)(cid:50)(cid:49)(cid:40)(cid:3)(cid:39)(cid:40)(cid:55)(cid:40)(cid:38)(cid:55)(cid:44)(cid:50)(cid:49)
(cid:51)(cid:85)(cid:82)(cid:74)(cid:85)(cid:68)(cid:80)
(cid:54)(cid:20)(cid:17)(cid:3)(cid:41)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:85)(cid:72)(cid:87)(cid:85)(cid:76)(cid:72)(cid:89)(cid:68)(cid:79)
(cid:41)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:86)
(cid:54)(cid:21)(cid:17)(cid:3)(cid:36)(cid:69)(cid:86)(cid:87)(cid:85)(cid:68)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:68)(cid:81)(cid:71)(cid:3)(cid:81)(cid:82)(cid:85)(cid:80)(cid:68)(cid:79)(cid:76)(cid:93)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:51)(cid:85)(cid:72)(cid:83)(cid:85)(cid:82)(cid:70)(cid:72)(cid:86)(cid:86)(cid:72)(cid:71)
(cid:73)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:86)
(cid:54)(cid:22)(cid:17)(cid:3)(cid:41)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:83)(cid:85)(cid:76)(cid:81)(cid:87)
(cid:74)(cid:72)(cid:81)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:41)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:83)(cid:85)(cid:76)(cid:81)(cid:87)(cid:3)
(cid:71)(cid:76)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:68)(cid:85)(cid:92)
(cid:41)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:83)(cid:85)(cid:76)(cid:81)(cid:87)
(cid:71)(cid:76)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:68)(cid:85)(cid:92)
(cid:82)(cid:73)(cid:3)(cid:89)(cid:88)(cid:79)(cid:81)(cid:72)(cid:85)(cid:68)(cid:69)(cid:76)(cid:79)(cid:76)(cid:87)(cid:76)(cid:72)(cid:86)
(cid:41)(cid:76)(cid:81)(cid:74)(cid:72)(cid:85)(cid:83)(cid:85)(cid:76)(cid:81)(cid:87)(cid:3)
(cid:71)(cid:76)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:68)(cid:85)(cid:92)
(cid:82)(cid:73)(cid:3)(cid:87)(cid:68)(cid:85)(cid:74)(cid:72)(cid:87)(cid:3)
(cid:83)(cid:85)(cid:82)(cid:74)(cid:85)(cid:68)(cid:80)(cid:86)
(cid:54)(cid:23)(cid:17)(cid:3)(cid:46)(cid:72)(cid:92)
(cid:79)(cid:82)(cid:82)(cid:78)(cid:88)(cid:83)
(cid:73)(cid:82)(cid:88)(cid:81)(cid:71)
(cid:54)(cid:24)(cid:17)(cid:3)(cid:43)(cid:68)(cid:86)(cid:75)
(cid:79)(cid:82)(cid:82)(cid:78)(cid:88)(cid:83)
(cid:73)(cid:82)(cid:88)(cid:81)(cid:71)
(cid:53)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:3)(cid:70)(cid:79)(cid:82)(cid:81)(cid:72)
Fig. 1: Two stages of VUDDY: preprocessing and clone
detection.
slight modiﬁcation of the value of constants, (e.g., assigning 0
instead of 1 for a ﬂag variable which is later used for initiating
an input sanitation sequence) may suppress a vulnerability, or
rather introduce a new vulnerability. For example, the denial-
of-service (DoS) ﬂaw (CVE-2012-0876) in the Expat XML
parser (xmlparse.c) [32] is patched by changing the constant
value 0 in the problematic function, hash(), into a salt
variable. In that sense, if the abstraction function α does not
preserve constants, it will not be able to preserve vulnerability
and cause false positive.
IV. THE PROPOSED METHOD: VUDDY
In this section, we describe the main ideas and principles
behind VUDDY (VUlnerable coDe clone DiscoverY), which
is a scalable approach to code clone detection that can be
seamlessly applied to the massive OSS pool.
Based on the aforementioned goals, we propose two-stage
modeling of VUDDY: preprocessing and clone detection. The
preprocessing stage includes three substeps:
S1. Function retrieval
S2. Abstraction and normalization
S3. Fingerprint generation
Then in the clone detection stage, VUDDY conducts:
S4. Key lookup
S5. Hash lookup
Fig. 1 illustrates the overall stages and substeps of VUDDY.
Once preprocessing is complete,
the resulting ﬁngerprint
dictionary can be permanently reused, unless some portion
of the program is changed. In addition, if a user speciﬁes
the changed portion, only the difference can be applied to
the ﬁngerprint in a very short time, rather than having to
completely regenerate the ﬁngerprint. This efﬁcient design
enables VUDDY to perform real-time clone detection.
A. Preprocessing
S1. Function retrieval: VUDDY begins by retrieving
functions from a given program by using a robust parser.
VUDDY then performs a syntax analysis to identify formal
parameters, data types in use, local variables, and function
calls. This supplementary information is used in the next stage:
abstraction and normalization.
S2. Abstraction and normalization: In this stage, an
abstraction and normalization feature is offered. Blindly gen-
erating a ﬁngerprint with an original function will lead to
the omission of renamed (Type-2) clones, and cause false
negatives. Thus, we establish abstraction rules to transform
the function body strings before generating its ﬁngerprint.
We fashioned four levels of abstraction which makes our
approach resilient to common code modiﬁcations, while pre-
serving vulnerability. Fig. 2 shows the transformation of a
sample function at varying abstraction levels. Here, higher
levels of abstraction include subordinate levels.
• Level 0: No abstraction. Do not abstract the code, for
detecting exact (Type-1) clones.
• Level 1: Formal parameter abstraction. Gather formal
parameters from the arguments of the function header,
and replace every occurrence of the parameter variables
inside the body with a symbol FPARAM. Then, the code
clones that modify the parameter names are captured.
• Level 2: Local variable abstraction. Replace all local
variables that appear in the body of a function with
a symbol LVAR. From this level onwards, VUDDY is
tolerant to modiﬁcations of the names of variables in
copy-pasted functions, which is a common practice.
• Level 3: Data type abstraction. Replace the data types
with a symbol DTYPE. The data types include not only
standard C data types, and qualiﬁers, but also user-
deﬁned types. However, modiﬁers (e.g., unsigned) are not
replaced because for certain types of vulnerabilities, the
signedness of a variable matters. After level 3 abstrac-
tion, code clones of which the variable types have been
changed (e.g., “int” to “static int”) can be detected.
• Level 4: Function call abstraction. Replace the name
of every called function with a symbol FUNCCALL.
Researchers have pointed out
that function calls and
shared APIs are typical causes of recurring vulnerabilities
[12], [27], [33]. This procedure is necessary for detecting
cloned functions with similar API usage.
With the abstraction scheme, VUDDY completely detects
Type-2 vulnerable code clones. Cases in which abstraction is
highly effective and critical for detecting vulnerable clones are
introduced in section IX.
The abstracted function body is then normalized by remov-
ing the comments, whitespaces, tabs, and line feed characters,
and by converting all characters into lowercase. This guar-
antees that the performance, especially the detection accu-
racy, of VUDDY is not affected by syntactically meaningless
modiﬁcations. For example,
if a function is inlined after
cloning, or if comments in a function are greatly changed, code
normalization still enables VUDDY to detect the function.
S3. Fingerprint generation: VUDDY generates ﬁnger-
prints for the retrieved function bodies that are abstracted and
normalized. A ﬁngerprint of a function is represented as a
599
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:17 UTC from IEEE Xplore.  Restrictions apply. 
Level 0: No abstraction.
void avg (float arr[], int len) {
static float sum = 0;
unsigned int i;
for (i = 0; i < len; i++);
sum += arr[i];
printf("%f %d",sum/len,validate(sum));
}
Level 1: Formal parameter abstraction.
void avg (float FPARAM[], int FPARAM) {
static float sum = 0;
unsigned int i;
for (i = 0; i < FPARAM; i++)
sum += FPARAM[i];
printf("%f %d",sum/FPARAM,validate(sum);
}
Level 2: Local variable name abstraction.
void avg (float FPARAM[], int FPARAM) {
static float LVAR = 0;
unsigned int LVAR;
for (LVAR = 0; LVAR < FPARAM; LVAR++)
LVAR += FPARAM[LVAR];
printf("%f %d",LVAR/FPARAM,validate(LVAR));
}
Level 3: Data type abstraction.
void avg (float FPARAM[], int FPARAM) {
DTYPE LVAR = 0;
unsigned DTYPE LVAR;
for (LVAR = 0; LVAR < FPARAM; LVAR++)
LVAR += FPARAM[LVAR];
1
2
3
4
5
6
7
1
2
3
4
5
6
7
1
2
3
4
5
6
7
1
2
3
4
5
6
7
}
printf("%f %d",LVAR/FPARAM,validate(LVAR));
}
Level 4: Function call abstraction.
void avg (float FPARAM[], int FPARAM) {
LVAR += FPARAM[LVAR];
FUNCCALL("%f %d",LVAR/FPARAM,FUNCCALL(LVAR));
DTYPE LVAR = 0;
unsigned DTYPE LVAR;
for (LVAR = 0; LVAR < FPARAM; LVAR)
1
2
3
4
5
6
7
Fig. 2: Level-by-level application of abstraction schemes on a
sample function.
2-tuple. The length of the normalized function body string
becomes one element, and the hash value of the string becomes
the other. Fig. 3 shows the ﬁngerprinting of example functions.
After ﬁngerprinting, VUDDY stores the tuples in a dictio-
nary that maps keys to values, where the length values (i.e.,
the ﬁrst element of a tuple) are keys, and the hash values that
share the same key are mapped to each key. Fig. 4 shows how
the example functions of Fig. 3 are classiﬁed and stored in a
dictionary.
In the dictionary shown in Fig. 4, the two functions in Fig. 3
(sum and increment) are classiﬁed under the same integer
key, because the length of their abstracted and normalized
bodies are identical as 20. The ﬁngerprint of the other function
(printer) is assigned to another key, 23, in the dictionary. In
practice, we ignore functions of which the lengths are shorter
than 50, to prevent VUDDY from identifying short functions
as clones. Intuitively, short functions are hardly vulnerable by
themselves. Further discussion on a proper threshold setting
is provided in subsection V-A.
B. Clone detection
VUDDY detects code clones between two programs, by
performing at most two membership tests for each prepro-
600
Original:
Preprocessed:
Length:
Hash value:
Fingerprint:
Original:
return a + b;
int sum (int a, int b) {
}
returnfparam+fparam;
20
c94d99100e084297ddbf383830f655d1
{20, c94d99100e084297ddbf383830f655d1}
void increment () {
int num = 80;
num++; /* no return val */
Preprocessed:
Length:
Hash value:
Fingerprint:
Original:
}
dtypelvar=80;lvar++;
20
d6e77882a5c55c67f45f5fd84e1d616b
{20, d6e77882a5c55c67f45f5fd84e1d616b}
void printer (char* src) {
}
Preprocessed:
funccall("%s",fparam);
Length:
23
Hash value:
9a45e4a15c928699afe867e97fe839d0
{23, 9a45e4a15c928699afe867e97fe839d0}
Fingerprint:
Fig. 3: Example functions and corresponding ﬁngerprints.
20: {
printf("%s", src);
‘c94d99100e084297ddbf383830f655d1’,
‘d6e77882a5c55c67f45f5fd84e1d616b’
}
23: {
}
‘9a45e4a15c928699afe867e97fe839d0’
Fig. 4: A dictionary that stores the ﬁngerprints of the example
functions. A set containing two hash values is mapped to the
key 20, which is the length value, and another set is mapped
to the key 23.
cessed, length-classiﬁed ﬁngerprint dictionary: a key lookup,
and a subsequent hash lookup. This approach is based on the
fact that two identical functions are required to have the same
lengths after abstraction and normalization, even if variables
are renamed and comments are changed.
S4. Key lookup: VUDDY performs the ﬁrst membership
testing, by iterating over every key in a source dictionary, and
looking for the existence of the key (i.e., the length of the