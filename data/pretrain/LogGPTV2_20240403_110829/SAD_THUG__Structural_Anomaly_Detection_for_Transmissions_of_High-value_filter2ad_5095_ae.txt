### 7. Limitations

While our evaluation in Section 6 demonstrates the effectiveness of our approach in detecting embedded messages that alter the structure of JPEG or PNG files, it is not designed to detect embeddings within the encoded image data. Consequently, if an attacker chooses to embed messages in the image data stored in a file, our method will not be able to detect this. A number of existing approaches do attempt to detect such embeddings (see Section 8). In terms of detecting structural embeddings, SAD THUG significantly outperforms the only previous method that attempted to solve this problem.

#### 7.1 File Type Limitations
Our prototype may be evaded by using a file type that it currently does not support. However, there are several mitigating factors:
- **Agnostic Approach**: Our method is agnostic to file types, and the prototype parser can be extended to parse the structure of additional file types.
- **Frequency of File Types**: An Application-Level Gateway (ALG) typically observes more images than other file types. For example, web application firewalls (WAFs) often see many more image files than HTML documents, as each HTML document usually references multiple image files. PDF, DOC, or XLS files, while important, generally make up a smaller fraction of a website's content. Therefore, WAFs may use more computationally intensive methods, such as on-the-fly conversion into image files, or require user interaction for these file types.

#### 7.2 Training Data Dependence
Like all supervised machine learning-based approaches, the effectiveness of our method depends on the training data set. If the training data is not representative of the benign data observed during the classification phase, it may increase the false positive rate. For instance, some programs, like image optimizers, write files with unusual structures. If such files are not included in the training data, SAD THUG may classify them as anomalies. However, due to its generalization properties, this can usually be remedied by adding a small number of curated files from that software to the training data.

#### 7.3 Vulnerability to Poisoning Attacks
SAD THUG, like other supervised machine learning-based approaches, is somewhat vulnerable to poisoning attacks. If an attacker manages to inject a large number of files into the target's training data set, it could affect the resulting automaton. The attacker might try to create transitions in the automaton that would accept the structural anomalies created by their approach. In Section 9.2, we discuss potential future work to mitigate this threat.

#### 7.4 Bypass Strategies
An attacker could also make informed guesses about the target's automaton and parameterization to devise a strategy to bypass SAD THUG. Such a strategy might involve adding a few bytes to each variable-length segment in a file, potentially at the cost of the file's compatibility with common decoders. Even if an attacker successfully implements a method to bypass SAD THUG, they would only be able to transfer a small number of bytes per file compared to the arbitrary number of bytes possible with structural embedding.

### 8. Related Work

In this section, we provide a brief overview of related work, focusing on three areas: legitimate use of steganography for censorship circumvention, other approaches for detecting malware or its communications in similar settings, and methods for detecting steganographic message exchanges, particularly with respect to structural embedding methods.

#### 8.1 Legitimate Use of Steganography
Several systems have been proposed for bypassing censorship systems that act like an ALG in our threat model. While SAD THUG was designed to prevent unwanted communications from malware, the problems are related. Approaches designed to circumvent censorship could be employed to bypass legitimate restrictions, and methods like SAD THUG could be used to detect attempts to circumvent censorship. Systems such as Collage [18], MIAB [32], and Infranet [22] use stegosystems to hide messages in JPEG image data, which are not affected by SAD THUG. Other systems, like SkypeMorph [40] and StegoTorus [57], hide data in voice-over-IP traffic or HTTP headers, JavaScript, PDF, or SWF files, which are also unaffected by SAD THUG. TapDance [58] requires TLS connections, which may not be applicable if the ALG conducts man-in-the-middle attacks against TLS connections.

#### 8.2 Malware Detection Approaches
Bartos et al. [13] analyze HTTP proxy log files, but their method cannot distinguish data exfiltration attacks using image files from legitimate transfers. Rahbarinia et al. [50], Stringhini et al. [56], and Kwon et al. [35] focus on exploit kits that use redirect chains, but these methods are limited to the infection phase and cannot detect C&C interactions using hidden messages in image files. SpyProxy [42] detects successful exploitation attempts but not steganographic methods. Taylor et al. use honeyclients, but sandbox-based approaches are resource-intensive and subject to evasion techniques. BotMiner [26] and PSI [60] integrate existing network-based detection methods but do not detect the attacks SAD THUG is designed to detect.

#### 8.3 Steganography Detection Methods
Provos and Honeyman [48, 47, 49] published methods for detecting steganography in JPEG files, focusing on DCT coefficient distribution. Stegdetect [48] uses specialized χ² tests but fails to detect embeddings using other methods. Our evaluation shows that Stegdetect has a higher false positive rate (5.26% on average) compared to SAD THUG (0.68% for JPEG and 1.12% for PNG). Andriotis et al. [11] use Benford's law, Barbier et al. [12] use a training set to derive probability densities, and Cogranne et al. [21] use advanced techniques to detect anomalies in DCT coefficients. These methods do not consider information hidden in the structure of image files, which SAD THUG effectively detects.

### 9. Conclusions and Future Work

#### 9.1 Conclusions
In this paper, we presented SAD THUG, an approach for detecting structural anomalies in image files caused by hiding messages. It derives an abstract model of legitimate container file structures from a training set and classifies new files as benign or malicious. SAD THUG achieved perfect classification across all cross-validation datasets for eight methods and performed well for the remaining sets, with a mean false positive rate of 0.68% for JPEG and 1.12% for PNG files. This makes SAD THUG a highly effective solution to a significant problem faced by computer users and administrators.

#### 9.2 Future Work
Currently, SAD THUG is limited to common embedding methods that change the structure but not the image data in JPEG and PNG files. Future malware may use DCT coefficient-based steganography or abuse PNG image data. Our approach should be integrated with methods that can detect embeddings in image data for comprehensive detection. Additionally, we observed that a significant fraction of image files referenced by popular websites contain additional bytes behind their image data, which affects SAD THUG's ability to detect certain embedding methods. To mitigate this, we could remove residual data in the training set and files delivered to systems, harden the training data by excluding files from sites that allow user uploads, and use weighted counts to limit the influence of individual files or sources on the automaton.

### 10. Acknowledgments

We express our gratitude to the many individuals who supported this work. Special thanks to Daniel Plohmann of Fraunhofer FKIE for his profound knowledge and willingness to share insights, Matthew Smith of the University of Bonn for key improvements to our evaluation, Elmar Padilla of Fraunhofer FKIE for comments on an earlier version, and the anonymous reviewers for their valuable feedback.

### References

[1] W32.duqu: The precursor to the next Stuxnet version 1.4. Tech. rep., Symantec, 2011.
[2] Zberp banking trojan: A hybrid of Carberp and Zeus. EmsiSoft, 2014.
[3] Home routers under attack via malvertising on Windows. Proofpoint, 2014.