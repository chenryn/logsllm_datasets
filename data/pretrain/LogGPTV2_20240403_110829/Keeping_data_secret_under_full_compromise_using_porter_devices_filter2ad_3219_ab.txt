lustrate relevant parts of the solution space.
In the Ephemerizer
system [28] and its application to ﬁle deletion [29], a physically
separate, trusted machine, the Ephemerizer, generates and stores
the keys used to encrypt and decrypt the data. Users interact with
the Ephemerizer in order to retrieve the encryption or decryption
keys. A potentially large number of users, for example a company’s
employees, use the same (logical) key generator and storage.
The authors of Vanish [21] propose using a de-centralized key
storage based on peer-to-peer networks and DHTs. In their system,
the sender picks a random encryption key, splits it using secret shar-
ing, and stores the key shares in a DHT network from where the
receiver can retrieve them as long as they exist. Due to the natural
churn in such networks, the keys are eventually deleted.
Solution Dimensions. We identify four properties of key storage
devices: (i) storage type, (ii) access options, (iii) level of guaran-
tees for key management, and (iv) scalability. In the remainder of
this section we explain these properties and show in Table 1 how
they apply to the approaches above and to our solution.
(i) Storage type. The storage may be centralized (e. g., a re-
mote server [28]), or distributed [21]; distributed storage requires
key sharing. While deletion on a centralized storage is a well-
Ephemerizer [28]
centralized/shared
by the storage server
deterministic
both S and R
Storage type
Key generation
Key deletion
Access to K
Scalability
over an open network over an open network
limited (secondary
scales (special-purpose)
with many users)
over open/trusted networks
scales (special-purpose or secon-
dary with few users per storage)
Vanish [21]
Our solution (Section 4)
distributed/shared
by S
probabilistic
both S and R
personal
by S and R or by R
deterministic
R (or S)
Table 1: Dimensions of the key storage and their instantiation by different solutions. Our solution allows access to the encryption key K by
R but can easily be extended to enable access also by S on a separate storage (belonging to S).
deﬁned operation, providing guarantees on the deletion of (sufﬁ-
ciently many) key shares on distributed storage is challenging.
(ii) Access. The storage may be personal or shared. Personal
storage allows exclusive access by either S or R. The access to
personal storage may be based on public or secure channels; an
example for the latter are independent storage units within a user’s
device. Shared storage (e.g., a network server) permits multiple
parties to store and retrieve data. We do not consider storage that
only S and R can access because it is a special case that could
be used to directly transfer time-limited data. The communication
channels to access shared storage are typically public. Since the
key must be stored in plaintext on shared storage2, it may allow
attackers to collect data before the expiration time and use it later
to access the data. The attack [36] on Vanish is an example of this.
(iii) Guarantees on key management. Any key storage must
store and manage keys and delete them in a timely way. We dis-
tinguish between deterministic and probabilistic key deletion. In
contrast to probabilistic key deletion, deterministic key deletion
provides guarantees on the times when keys will be deleted; it is
typically harder to achieve on complex or distributed systems (e. g.,
network servers) than on simple, monolithic devices.
(iv) Scalability. The storage should provide functionality for a
large number of users without substantially degraded performance.
We distinguish special-purpose storage that can be designed to scale
well with the number of users (e. g., [28]) and secondary storage
that fulﬁlls different primary purposes and, additionally, provides
key management.
In the latter case, the primary functions may
degrade with the additional key management functionality of the
storage; in this case, the scalability is limited.
4. OUR SOLUTION
4.1 Solution Overview
As motivated in Section 3, the sender encrypts the time-limited
data prior to transmission. The encryption key is established on a
per-message basis between S and R using an authenticated Difﬁe-
Hellman (DH) key establishment protocol. In our solution, we re-
locate the encryption keys to an autonomous porter device under
the receiver’s control (we do not use a central server because it re-
quires the users’ trust and creates a single point of failure). The
porter device will independently delete keys once the expiration
time of the messages encrypted using those keys is reached. Given
that the porter possesses the sole copy of this encryption key at the
expiration time and the porter will delete keys when they expire,
this approach prevents data access by any party after te + ∆max.
2If the decryption key K was encrypted, this would bring us back to
the original problem: how and where to store the key. Asymmetric
encryption with R’s long-term public key would not resist a full-
compromise attack after te + ∆max.
A porter-based approach requires elaboration to provide authen-
ticity and forward-secrecy for the connections from the sender to
the receiver and between the receiver and the porter. This requires
carefully managing multiple short-term keys. In security applica-
tions, e. g., off-the-record messaging [3, 11], short-term keys are
created on demand and deleted immediately after the data encryp-
tion and decryption. Deleting the decryption key after the data
transmission is, however, not a solution in our scenario: we must
ensure data inaccessibility after the expiration time te +∆max even
if the sender’s message is not received before te + ∆max (see Sec-
tion 3).
4.2 Forward Secrecy under Full Compromise
We introduce the notion of forward forward secrecy under full
compromise and explain why we need it. Forward secrecy means
that the compromise of the principals’ long-term private keys does
not compromise past session keys [18, 27]. Our system requires
forward secrecy not only under the compromise of long-term keys
but also under full compromise (as deﬁned in Section 2.3) after the
expiration time. Given this extended notion of compromise, we
similarly extend the deﬁnition of forward secrecy.
Deﬁnition 3. A protocol is forward-secret under full compro-
mise with respect to time-limited data m if the full compromise
of the involved principals and their devices after the data expiration
time does not compromise the secrecy of m.
Forward secrecy under full compromise is a stronger property than
(standard) forward secrecy because it also accounts for the prin-
cipals’ internal states after the expiration time. As a consequence,
time-critical data and the respective encryption keys must be erased
from the principal’s devices such that they are nonexistent at the ex-
piration time. Key and data deletion must be part of any protocol
that provides forward secrecy under full compromise. A second
essential component concerns those parts of the protocol that in-
volve session keys, which we call subprotocols, e. g., for key es-
tablishment. Forward secrecy under full compromise requires that
all subprotocols used to establish session keys for data encryption
provide forward secrecy.
4.3 Protocol
We now present the main idea of our protocols. We focus on
the case where the receiver uses the key storage (rather than the
sender). Figure 2 provides a protocol sketch that we will later in-
stantiate with concrete solutions. All delete commands are secure
deletions. We consider the following four protocol phases:
1. Key establishment: The sender S deﬁnes the data lifetime
te and agrees with the receiver R on the mid-term key K (or
a key pair where K is the decryption key). R initiates the
safe storage of K along with te on the porter P and deletes
S (sender)
(delete K)
delete m
channel 1
Phase 1
Key establishment
& assignment of
expiration time te
Phase 2
Transmission of encryp-
ted time-limited data m
?
t
R (receiver)
channel 2
Phase 1
P (porter)
K, te
Key storage
delete K
...
decrypt m
delete K, m
K, te
Phase 3
Key retrieval
Phase 4 (ongoing):
At te: delete K, te
?
t
Figure 2: Protocol sketch. The basic building blocks are commands for explicit, secure deletion and forward-secret subprotocols during the
communication phases (Phases 1–3).
its own copy of K.3 If the key establishment involves key
contributions from the principals, the ephemeral private keys
are deleted right after the key establishment.
2. Communication/storage: S transmits the data m, encrypted
using key K, and then deletes both the plaintext and K.
3. Data access: Upon receiving the encrypted data, R attempts
to retrieve K from P in order to decrypt m. After successful
data access, R deletes both the plaintext m and K. This
phase may occur multiple times.
4. Key management/deletion: In parallel with phases 1–3, P
permanently deletes keys from its storage once they expire.
Our solution involves three kinds of keys for different time inter-
vals:
1. a mid-term encryption key K (or key pair) for encrypting and
decrypting time-limited data,
2. long-term authentication keys used to authenticate the mes-
sages, and
3. short-term (ephemeral) session keys to provide secrecy of the
communication between the principals and to the porter.
The notion of a mid-term key is non-standard but is appropriate
for our key K, which must exist during the data’s lifetime and is
permanently erased thereafter.
Encryption using mid-term keys can be based on symmetric or
public-key cryptography. We will provide examples of both in
Section 4.4. The examples also differ in the assumptions on the
communication channels underlying the protocols. We require two
channels: one between the sender and the receiver for data trans-
mission and key-establishment and a second channel between the
receiver and the porter for key storage and retrieval. We introduce
two common channel types in the following; based on the available
channels, different subprotocols will provide forward-secrecy.
Physically secure channel: A physically secure (PS) channel pro-
vides conﬁdentiality and authenticity without cryptographic
measures. An example of such a channel is a shielded wire
that connects the receiver’s motherboard to a trusted hard-
ware module. Due to the physical security of the communi-
cation, forward secrecy is trivially achieved because no long-
term or short-term keys are involved in the communication.
Dolev-Yao channel: A Dolev-Yao (DY) channel is subject to at-
tacks under the Dolev-Yao attacker model, involving eaves-
dropping, message corruption, insertion, and blocking (eras-
ing). An example of a DY channel is a wireless (e. g., Blue-
tooth) connection between two devices.
The standard way to achieve forward secrecy on a Dolev-Yao chan-
nel is to establish ephemeral encryption keys, typically by using an
authenticated DH protocol [12], and to discard them after their use.
In this case, the ephemeral DH public keys grS and grR are ex-
changed and stored only during the key establishment. They are
destroyed thereafter along with the private keys rS and rR. The
established key K = grS rR = grRrS is the encryption key.
4.4 Protocol Instances
[M ]K and [M ]−1
We now present two instances of the protocol sketch of Figure 2,
shown in Figures 3 and 4. The two protocols differ in how they
achieve forward secrecy on the communication channels between
S, R, and P .
We use the following notation:
K denote the
symmetric encryption and decryption of a message M with key K.
AS(M ) denotes that message M is authenticated by principal S
(described below). Communication is expressed as S M /
/ R,
meaning that S transmits message M to receiver R. The tupling of
multiple data items in a message is denoted by “,”. For DH key es-
tablishment, g denotes the public generator of the group used, rS is
the ephemeral private key of principal S, and grS is S’s ephemeral
public key; the use of the modulus (mod n) is implicit.
4.4.1 Protocol 1
Protocol 1 (Figure 3) is designed to be used when S, R, and P
communicate over DY channels. In this scenario, P may, e. g., be a
mobile phone that belongs to R. Protocol 1 uses symmetric encryp-
tion to transmit the time-limited data m. The protocol is initiated by
S, who starts a DH key establishment with R. R then establishes
another ephemeral DH key L with the porter device P and uses
it to send K encrypted to P . Later, after receiving the encrypted
time-limited data from S, R establishes a new ephemeral key L(cid:48)
with P and uses L(cid:48) to retrieve K. For each subsequent retrieval of
the encryption key K, a new ephemeral key is established.
The DH key exchanges of Protocol 1 follow the standard two-
way ISO-9798-3 protocol [23].4 We do not require a third message
for key conﬁrmation in which the sender returns both ephemeral
public keys to the receiver to conﬁrm that it possesses the same key.
Under our attacker model, the receiver is not compromised before
it sends its DH key contribution (when te expires, both parties abort
the protocol).
The following components are essential to Protocol 1:
3In our protocols, R stores and retrieves the key.
protocol, S may also store the key on a porter of its own.
In a different
4The standard also speciﬁes a random index i into a universal hash
function family H in message 2, so that the shared key computed
is K = Hi(grS rR ). We do not use this.
S (sender)
pick rS
compute grS
K = grRrS
delete rS
m, [m]K
delete m, K
DY channel 1
R (receiver)
AS (1,grS ,te) /
AR(5,grS ,grR ,te)
AS (6,[m,6.1]K ,te)/
R
pick r(cid:48)
R; compute gr(cid:48)
pick rR; compute grR
K = grS rR , L = grP r(cid:48)
R
delete K, L, rR, r(cid:48)
R
...
R
R, compute gr∗
pick r∗
L(cid:48) = gr∗
P r∗
R , delete r∗
K = [K]−1
L(cid:48) , delete L(cid:48)
m = [m]−1
K , delete K
After usage: delete m
R