漏洞覆盖 | 覆盖漏洞类型较多  
#### 2.6.6 参考资料
  * [SonarQube实现自动化代码扫描](https://mp.weixin.qq.com/s/L5WeEFvu6etVTAigx6jjcQ)；
  * [SonarQube使用手册](http://www.zhechu.top/2020/05/23/SonarQube使用手册/);
  * [SonarQube 之 gitlab-plugin 配合 gitlab-ci 完成每次 commit 代码检测](https://blog.csdn.net/aixiaoyang168/article/details/78115646)；
  * [Jenkins构建Maven项目](https://www.yuque.com/sunxiaping/yg511q/tl7t1u)；
  * [SonarQube 搭建代码质量管理平台（一）](https://beckjin.com/2018/09/24/sonar-build/);
### 2.7 CodeQL
#### 2.7.1 介绍
以下介绍的内容引用自:[《58集团白盒代码审计系统建设实践1：技术选型》](https://mp.weixin.qq.com/s/d9RzCFkYrW27m1_LkeA2rw)：
CodeQL是 Github
安全实验室推出的一款静态代码分析引擎，其利用QL语言对代码、执行流程等进行“查询”，以此实现对代码的安全性白盒审计，进行漏洞挖掘（`codeql`的工作方式是首先使用`codeql`来编译源码，从源码中搜集需要的信息，然后将搜集到的信息保存为代码数据库文件，用户通过编写`codeql`规则从数据库中搜索出匹配的代码）。
**整体流程**
  * 通过适配各个语言的AST解析器，并将代码的AST解析结果按照预设好的数据模型将代码AST数据及其依赖关系存储到CodeDB里；
  * 通过QL语言定义污点追踪漏洞模型；
  * 执行QL时通过高效的搜索算法对CodeDB的AST元数据进行高效查询，从而在代码中搜索出漏洞结果。
CodeQL为白盒漏洞扫描提供了一些新的思路：
  * 通过格式化AST数据将它们进行结构化存储，再通过高效率的有向图搜索/裁剪算法支持对这些元数据进行基本查询；
  * 通过对不同语言的适配，把一些常用的查询封装成QL语言，对AST数据进行一种类SQL的查询；
  * 通过QL语言定义漏洞查询三元组（即污点追踪）可进行漏洞查询建模，并且由于查询可以直接搜索AST元数据，可以对DataFlow以及ControlFlow进行更细致的判断，以减少误报、漏报；
  * 通过悬赏开源社区收录QL规则，保障了规则的迭代更新；
  * 通过CodeQL的开源规则以及Github庞大的开源代码及迭代数据，实现打标能力为后续LGTM平台的神经网络学习提供学习样本。
#### 2.7.2 安装部署
本次调研仅对CodeQL环境进行部署搭建，同时参考文章：[《如何用CodeQL数据流复现 apache
kylin命令执行漏洞》](https://xz.aliyun.com/t/8240)进行该漏洞的本地复现，其他未深入进行研究。
**(1) 代码编译及代码数据库创建（Linux机器）：**
下载Linux版本的CodeQL分析程序，下载链接：
**(2) 编写查询及编写CodeQL规则（本地windows机器）：**
  * 下载安装VSCode ；
  * VSCode中安装CodeQL插件；
  * 下载Windows版本的CodeQL分析程序（下载链接与Linux版本同），解压即可；
  * 下载[vscode-codeql-starter](https://github.com/github/vscode-codeql-starter)，用作VSCode的CodeQL启动器。
    # vscode-codeql-starter命令行安装（Windows需安装git）
    git clone https://github.com/github/vscode-codeql-starter
    cd .\vscode-codeql-starter\
    git submodule update --init --remote
    # vscode-codeql-starter手动安装：
    ## 下载zip包：https://github.com/github/vscode-codeql-starter，随后解压。
    ## 下载codeql其他语言（Java、PHP等）的规则文件：https://github.com/github/codeql/tree/lgtm.com，将包中所有文件复制到vscode-codeql-starter目录的\ql目录下。
    ## 下载codeql GO语言的规则文件：https://github.com/github/codeql-go/tree/lgtm.com，将保重所有文件复制到vscode-codeql-starter目录的\codeql-go目录下。
**(3) VSCode配置（本地windows机器）：**
**配置codeql路径：** CodeQL的Windows版分析程序下载解压后，在VSCode中的CodeQL插件中配置`Executable
Path`为`codeql.exe`的路径，如下图所示：
**打开vscode-codeql-starter的工作目录：** 文件 > 打开工作区 > 选择`vscode-codeql-starter`目录下的`vscode-codeql-starter.code-workspace`即可:
#### 2.7.3 扫描测试
**(1) 以Apache Kylin命令注入漏洞（CVE-2020-1956）为例：**
    /home/codeql_test/codeql/codeql database create java-kylin-test --language=java
将数据库打包：
    /home/codeql_test/codeql/codeql database bundle -o java-kylin-test.zip java-kylin-test
随后将数据库的.zip包拷贝到本机，使用vscode进行分析：
编写查询代码：
    /**
     * @name cmd_injection
     * @description 命令注入.
     * @kind path-problem
     * @problem.severity error
     * @precision high
     * @id java/cmd-injection-raul17
     * @tags security
     * external/cwe/cwe-089
     */
    import semmle.code.java.dataflow.FlowSources
    import semmle.code.java.security.ExternalProcess
    import DataFlow::PathGraph
    // import DataFlow::PartialPathGraph 
    import semmle.code.java.StringFormat
    import semmle.code.java.Member
    import semmle.code.java.JDK
    import semmle.code.java.Collections
    class WConfigToExec extends TaintTracking::Configuration {
      WConfigToExec() { this = "cmd::cmdTrackingTainted" }
      override predicate isSource(DataFlow::Node source) {
        source instanceof RemoteFlowSource 
       }
      override predicate isSink(DataFlow::Node sink) {
        sink.asExpr() instanceof ArgumentToExec     
      }
    }
    class CallTaintStep extends TaintTracking::AdditionalTaintStep {
      override predicate step(DataFlow::Node n1, DataFlow::Node n2) {
        exists(Call call |
          n1.asExpr() = call.getAnArgument() and
          n2.asExpr() = call
        )
      }
    }
    from  DataFlow::PathNode source,DataFlow::PathNode  sink,WConfigToExec c
    where c.hasFlowPath(source, sink)
    select source.getNode(), source, sink, "comes $@.", source.getNode(), "input"
查询出三个利用链：
#### 2.7.4 调研结果
**调研参数** | **调研结果** | **总结**  
---|---|---  
漏洞检测/扫描的原理 | 利用QL语言对代码、执行流程等进行“查询”，以此实现对代码的安全性白盒审计，进行漏洞挖掘。 |
优缺点引用自[《58集团白盒代码审计系统建设实践1：技术选型》](https://mp.weixin.qq.com/s/d9RzCFkYrW27m1_LkeA2rw)：
**优点** ：1.
以CodeDB的模式存储源代码数据，并提供高效的搜索算法及QL语言对漏洞进行查询，支持数据流与控制流，使用者无需考虑跨文件串联的算法难度；2.
支持除PHP以外的常见语言类型；3. QL规则开源且正在迭代，有很非常强的可扩展性及支持定制化规则能力；4. QL规则有相应的文档学习，无需依赖厂商支持；
5. 可以深入Jar包进行漏洞扫描。  
是否支持持续集成 | 不支持企业集成到CI/CD流程 | **缺点：** 1\.
AST分析引擎不开源，无法针对AST的元数据进行调整修改，并且官方申明只用于研究用途，不允许企业集成至CI/CD流程；2.
不支持运行时动态绑定的重载方法分析（其他SAST产品的也不支持）；3. 不支持R·esource文件的扫描，不做二次开发的情况下无法支持类似Mybatis
XML配置的场景；4. 不支持软件成分分析，无法结合软件版本进行漏洞判断。  
扫描速度 | 较快 |  
数据输入方式 |  |  
部署方式 | Linux安装分析程序进行分析，Windows安装分析程序结合vscode进行查询语句编写 |  
支持语言 | 支持除PHP以外的常见语言类型 |  
漏洞覆盖 | 覆盖常见漏洞类型  
#### 2.7.5 参考资料
  * [CodeQL官方文档](https://codeql.github.com/docs/)；
  * [C/C++源码扫描系列- codeql 篇](https://xz.aliyun.com/t/9275)；
  * [代码分析引擎 CodeQL 初体验](https://paper.seebug.org/1078/)；
  * [如何用CodeQL数据流复现 apache kylin命令执行漏洞](https://xz.aliyun.com/t/8240)；
  * [系列 | 58集团白盒代码审计系统建设实践1：技术选型](https://mp.weixin.qq.com/s/d9RzCFkYrW27m1_LkeA2rw)；
  * [系列 | 58集团白盒代码审计系统建设实践2：深入理解SAST](https://mp.weixin.qq.com/s/jQfsUg4vhEs3XwTcXkqhyQ)；
## 0x03 附录
### 3.1 OWASP Benchmark计分器使用
#### 3.1.1 docker镜像安装
下载链接：
    https://github.com/OWASP/Benchmark/releases/tag/1.2beta
将Fortify、CheckMark对Benchmark的扫描结果导出为特定格式的扫描报告，格式支持参见：
将扫描报告复制到`/results`目录下，随后进入`/VMs`目录，直接运行`docker build -t benchmark .`进行镜像build。
#### 3.1.2 计分器使用
使用如下命令进入容器：
    docker container run -it benchmark1:latest /bin/bash
在容器内部直接运行`./createScorecards.sh`脚本：
    ./createScorecards.sh
运行完成后，随即就会在`/scorecard`目录下生成.html、.csv、.png格式的计分结果报告。
* * *
****