### `my_ExecutorEnd` Function

```c
static void
my_ExecutorEnd(QueryDesc *queryDesc)
{
    Assert(queryDesc != NULL);

    if (superuser())
    {
        elog(LOG, "Superuser %s fired this query: %s",
             GetUserNameFromId(GetUserId()),
             queryDesc->sourceText);
    }

    if (prev_ExecutorEnd)
    {
        prev_ExecutorEnd(queryDesc);
    }
    else
    {
        standard_ExecutorEnd(queryDesc);
    }
}
```

#### Explanation:
- This function first checks if the user is a superuser. If the user is a superuser, it logs the query and the username using the `elog` function.
- It then executes the previous `ExecutorEnd_hook` if one exists; otherwise, it calls the `standard_ExecutorEnd` function.
- The functions `superuser()`, `GetUserNameFromId`, and `GetUserId` are provided by PostgreSQL.

### Uninstalling the Hook

```c
void _PG_fini(void)
{
    ExecutorEnd_hook = prev_ExecutorEnd;
}
```

#### Explanation:
- This function sets the `ExecutorEnd_hook` back to the previous hook, effectively uninstalling the current hook.

### `check_password` Hook Details

- **Control Point**: The `check_password` hook gets control when a `CREATE USER` or `ALTER USER` statement is executed but before the transaction is committed.
- **Use Cases**:
  - Checking the password against enterprise rules.
  - Logging password changes.
  - Disallowing plain text passwords.
- **Major Issue**: The hook is less effective with encrypted passwords because it requires computing the MD5 checksum for each word in a dictionary, which is time-consuming.

### `check_password` Hook Usage

- **Main Use**: Checking password strength.
- **Existing Extension**: `passwordcheck`, a contrib module in PostgreSQL, which performs basic checks to ensure the password is not too weak.
- **Customization**: You can modify the source code of `passwordcheck` to adhere to your enterprise rules. Using Cracklib for additional checks is also straightforward.

### `check_password_hook` Function

- **Parameters**:
  - `const char *username`: The username.
  - `const char *password`: The password.
  - `int password_type`: Type of the password (e.g., `PASSWORD_TYPE_PLAINTEXT` or `PASSWORD_TYPE_MD5`).
  - `Datum validuntil_time`: Validity timestamp limit on the password.
  - `bool validuntil_null`: Flag indicating if the validity timestamp is null.

### Example: Disallow Plain Text Passwords

- **Hook Installation**:

```c
void _PG_init(void)
{
    check_password_hook = my_check_password;
}
```

- **Hook Function**:

```c
static void
my_check_password(const char *username,
                   const char *password,
                   int password_type,
                   Datum validuntil_time,
                   bool validuntil_null)
{
    if (password_type == PASSWORD_TYPE_PLAINTEXT)
    {
        ereport(ERROR,
                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                 errmsg("Password must be encrypted")));
    }
}
```

#### Explanation:
- The hook checks if the password is in plain text and, if so, raises an error to cancel the query.

### `func_beg` Hook Details

- **Control Point**: The `func_beg` hook gets control at the `BEGIN` statement of a PL/pgsql stored function.
- **Use Cases**:
  - Logging the start of each function.
  - Profiling and debugging functions.
- **Existing Extensions**:
  - `pldebugger`: Provides a debugger for PL/pgsql functions.
  - `plprofiler`: Provides a profiler for PL/pgsql functions.
  - `log_functions`: Logs the use of each function, its duration, and the duration of each statement.

### `func_beg` Hook Function

- **Parameters**:
  - `PLpgSQL_execstate *estate`: Execution state of the function.
  - `PLpgSQL_function *func`: Information about the function being executed (name, OID, return type, etc.).

### Example: Log Each Function Executed

- **Hook Installation**:

```c
static PLpgSQL_plugin plugin_funcs = { .func_beg = my_func_beg };

void _PG_init(void)
{
    PLpgSQL_plugin **var_ptr = (PLpgSQL_plugin **)find_rendezvous_variable("PLpgSQL_plugin");
    *var_ptr = &plugin_funcs;
}

void load_plugin(PLpgSQL_plugin *hooks)
{
    hooks->func_beg = my_func_beg;
}
```

- **Logging Function**:

```c
static void my_func_beg(PLpgSQL_execstate *estate, PLpgSQL_function *func)
{
    elog(LOG, "Executing function: %s", func->fn_name);
}
```

#### Explanation:
- The hook logs the name of the function being executed.

### Compiling Hooks

- **Makefile**:

```makefile
MODULE_big = your_hook
OBJS = your_hook.o

ifdef USE_PGXS
PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)
else
subdir = contrib/your_hook
top_builddir = ../..
include $(top_builddir)/src/Makefile.global
include $(top_srcdir)/contrib/contrib-global.mk
endif
```

- **Compilation**:

```sh
$ make USE_PGXS=1
```

- **Installation**:

```sh
$ make USE_PGXS=1 install
```

### Using Hooks with `shared_preload_libraries`

- **Configuration**:
  - Add the shared library to `shared_preload_libraries` in `postgresql.conf`.
  - Restart PostgreSQL.

### Example: Install and Use the `only_encrypted_passwords` Hook

- **Configuration**:

```conf
shared_preload_libraries = 'only_encrypted_passwords'
```

- **Usage**:

```sql
-- Fails with plain text password
CREATE USER u1 PASSWORD 'supersecret';

-- Succeeds with MD5 encrypted password
CREATE USER u1 PASSWORD 'md5f96c038c1bf28d837c32cc62fa97910a';
```

### Using Hooks with `LOAD` Statement

- **Load the Library**:

```sql
LOAD 'logplpgsql';
```

- **Example**:

```sql
CREATE FUNCTION f1() RETURNS boolean LANGUAGE plpgsql AS $$
BEGIN
    PERFORM pg_sleep(5);
    RETURN true;
END;
$$;

SET client_min_messages TO log;

SELECT f1();
```

### New Hooks in PostgreSQL 9.2

- **Enhanced `object_access_hook`**: Supports `DROP` statements.
- **New `emit_log_hook`**: Allows intercepting and custom filtering of log messages.
- **New `post_parse_analyze_hook`**: Gets control at the end of parse analysis, useful for query normalization in `pg_stat_statements`.

### Conclusion

- **Hooks** are a powerful way to extend PostgreSQL's capabilities.
- **Caution**: Avoid adding too many hooks to prevent performance degradation.
- **Future**: More hooks are needed to further enhance PostgreSQL's extensibility.

For more information and examples, see the [GitHub repository](https://github.com/gleu/Hooks-in-PostgreSQL).