if pre.Next == nil {
return head
cur := pre.Next
for i := 0; i  end {
tree = append(tree, nil)
return tree
left，right := []*TreeNode{}， []*TreeNode{}
for i := start; i  min && isvalidbst(root.Left, min, v) &&
isvalidbst(root.Right, v,max)
//解法二，把BST按照左中右的顺序输出到数组中，如果是BST，则数组中的数字是从小到大有序的，
如果出现逆序就不是BST
func isvalidBsTl(root *TreeNode) bool {
arr = []int{}
inorder(root, &arr)
for i := l; i = arr[i]{
return false
return true
func inorder(root *TreeNode, arr *[]int) {
if root == nil {
return
inorder(root.Left, arr)
*arr = append(*arr, root.val)
inorder(root.Right, arr)
---
## Page 217
99.RecoverBinarySearchTree
题目
asu Aq paddems aue (isa) aan youeas Aeuiq e jo suawala om
Recover the tree without changing its structure.
Example 1:
Input: [1,3,nu11,nu11,2]
1
2
Output: [3,1,nu11,nu11,2]
3
Example 2:
Input: [3,1, 4,nu11,nu11, 2]
3
/
1
4
2
Output: [2,1,4,nu11,nu11,3]
2
/
1
4
/
3
Followup:
●A solution using O(n) space is pretty straight forward.
● Could you devise a constant space solution?
---
## Page 218
题目大意
二叉搜索树中的两个节点被错误地交换。请在不改变其结构的情况下，恢复这棵树。
解题思路
·在二叉搜索树中，有2个结点的值出错了，要求修复这两个结点。
·这一题按照先根遍历1次就可以找到这两个出问题的结点，因为先访问根节点，然后左孩子，右
孩子。用先根遍历二叉搜索树的时候，根结点比左子树都要大，根结点比右子树都要小。所以左子
树比根结点大的话，就是出现了乱序；根节点比右子树大的话，就是出现了乱序。遍历过程中在左子树
中如果出现了前一次遍历的结点的值大于此次根节点的值，这就出现了出错结点了，记录下来。继
续遍历直到找到第二个这样的结点。最后交换这两个结点的时候，只是交换他们的值就可以了，而
不是交换这两个结点相应的指针指向。
代码
package leetcode
* Definition for a binary tree node.
type TreeNode struct {
Valint
Left *TreeNode
Right *TreeNode
*/
func recoverTree(root *TreeNode) {
var prev,targetl, target2 *TreeNode
targetl, target2 = inorderTraverse(root, prev, targetl, target2)
if targetl l= nil && target2 != nil{
targetl.val, target2.val = target2.val, targetl.val
func inorderTraverse(root， prev,targetl,target2 *TreeNode) (*TreeNode,
*TreeNode，*TreeNode){
if root == nil {
return prev, targetl, target2
prev, targetl, target2 = inorderTraverse(root.Left, prev, targetl, target2)
if prev != nil && prev.val > root.val {
if targetl == nil {
targetl = prev
target2 = root
---
## Page 219
prev = root
prev, targetl, target2 = inorderTraverse(root.Right, prev, targetl, target2)
return prev,targetl,target2
100.SameTree
题目
Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have
the same value.
Example 1:
Input:
1
/
2
3
2
3
[1,2,3],
[1,2,3]
Output: true
Example 2:
Input:
/
[1,2],
[1,nu11,2]
output: false
Example 3:
---
## Page 220
Input:
1
/
/
2
1
1
[1,2,1],
[1,1,2]
output: false