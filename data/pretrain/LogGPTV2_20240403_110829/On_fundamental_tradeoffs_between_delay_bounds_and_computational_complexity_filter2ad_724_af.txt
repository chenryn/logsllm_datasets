27.
end /* for */
28.
29.
................
end {for}
for i:= (cid:18)2(n + 1)(Kna + 1)(cid:19)+1 to n begin
binary insertion of Ti into the list Ti−(cid:6)
/* binary insertion into a ‘‘window’’ of size (cid:18)2(n + 1)(Kna + 1)(cid:19) */
√
2(n+1)(Kna +1)(cid:7),··· , Ti−1 according to lengths
same as in Fig.
4 ................
Figure 7: Algorithm III for L-Membership Test.
Here Lmax,i is the maximum size of a packet in session i
and ri is the service rate guaranteed to session i. For (8) to
hold, it should be true that the link is not over-subscribed,
i=1 ri ≤ r. Note in (8) that the ﬁrst term in RHS is
i.e., n
the GPS-relative delay bound in both W F Q and W F 2Q.
One important property of the latency bound Θi, shown
in [15] is that it can be viewed as the worst-case delay seen
by a session i packet arriving into an empty session i queue.
It has been shown in [15] that the latency bound is fur-
ther connected to the end-to-end delay bound of session i,
denoted as DN
i , by the following inequality:
N
i ≤ σi
D
ri
+
N
X
j=1
j
i
Θ
(9)
Here N is the number of nodes (routers) that traﬃc in ses-
j
sion i traverses and Θ
i is the latency bound of session i in
j’th scheduler. Also, traﬃc in session i is leaky-bucket con-
strained and σi is the size of the leaky bucket. This result
is strong and important since diﬀerent routers on the path
may use diﬀerent LR schedulers, but (9) still holds in this
heterogeneous setting.
We show,
in the following theorem, that under a spe-
cial CBFS condition called CBF S+, providing tight GPS-
relative delay bound is equivalent to providing tight latency
bound in any LR scheduler.
In CBF S+, the j’th packet
(j ≥ 2) in session i arrives just at the time the (j-1)’th
packet ﬁnishes service under the GPS scheduler. In other
words, each packet in session i arrives just in time to satisfy
the CBFS condition. The following theorem is one major
step in connecting our complexity results to the complexity
of providing tight end-to-end delay bounds.
Theorem 6. Under the CBF S+ condition, an LR sched-
uler is able to guarantee a GPS-relative delay bound of B for
all packets, if and only if, for all Lmax,i > 0, it guarantees
a latency bound of B +
for session i.
Lmax,i
ri
Proof. (if part): Given any packet p, let p
be the very
ﬁrst packet of the session i busy period where p is in. Let W
be the total amount of session i traﬃc that arrive between
included). Note that if p arrives to see
p and p
an empty queue i, then p and p
are the same packet. Let
(p and p
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
ri
ri
Lmax,i+W
 > 0 be a constant. Suppose p
arrives at time τ . Then
according to (7), p must ﬁnish service at the time t = τ +
B +
+  since by time t the server must have
accomplished ri(t − τ − B − Lmax,i
+ ) = W + ri > W
amount of service. This includes the service of p since W is
the total session i traﬃc between p and p
. Now under the
CBFS condition, the GPS virtual ﬁnish time of the packet p
will be no smaller than τ + W
ri . So the GPS-relative delay of
the packet p will be no larger than t−τ − W
ri +.
By making Lmax,i and  arbitrarily close to 0+, we get the
GPS-relative delay bound of B. Note that we only need the
CBFS condition (instead of CBF S+) in this part.
ri =B +
Lmax,i
(cid:4)
(only if part): Suppose that a packet p of size l arrives
at time τ to see an empty session i queue. Then under the
CBF S+ condition, τ is exactly the time that its previous
packet ﬁnishes service in GPS. So the virtual ﬁnish time of p
is exactly τ + l
ri , since its GPS virtual start time is τ . Since
its GPS relative delay is no more than B, it must ﬁnish
service by the time τ + l
+ B. So the latency of p is at
ri
Lmax,i
most l
ri
+ B ≤ B +
ri
.
Remark: We have just shown that, under the CBFS
condition, an LR scheduler that provides a tight latency
bound also provides a tight GPS-relative delay bound (the
“if” part). This in general (without CBFS) is not true: LR
schedulers such as F F Q [14], V C [20], and W F 2Q+ [3] all
provide a tight latency bound of Lmax
, but it can
be shown that none of them can provide O(1) or even O(na)
(0  0 is Ω(log2n).
r +
Lmax,i
ri
290Proof. Combine Theorem 1, 2, and 3, and the “if part”
of Theorem 6.
The implications of this corollary are profound. Note that
for all schedulers on the path to be LR servers with tight
delay bounds is a suﬃcient rather than necessary condition
for achieving tight overall end-to-end delay bounds. There-
fore, Corollary 1 does not establish in full generality the
complexity lower bounds for achieving tight end-to-end de-
lay bounds. However, there is substantial evidence [15] that
this is a “fairly tight” suﬃcient condition, as most exist-
ing scheduling algorithms that can collectively achieve tight
end-to-end delay bounds are LR servers. Corollary 1 essen-
tially states that such lower bounds hold if the end-to-end
delay bounds are established through “good” LR servers7.
Finally, we identify one open problem that we feel very
likely to be solvable and its solution can be a very exciting
result, stated as Conjecture 2 below. Note that Conjecture
2 is strictly weaker than Conjecture 1, as it can be shown
that the latter implies the former.
Conjecture 2. The complexity lower bound for an LR
scheduler (introduced in [15]) to achieve a tight latency bound
of O(1) Lmax
is Ω(log2n) per packet, under the de-
cision tree model that allows linear tests.
r +
Lmax,i
ri
Remark: F F Q, V C, and W F 2Q+ all achieve this la-
tency bound at the complexity of O(log2n) per packet, with-
out the restriction of the CBFS condition. If this conjecture
is true, it implies that these algorithms are asymptotically
optimal for this purpose, which is an exciting result! Note
that Corollary 1 proves this complexity lower bound under
the weaker model that allows only comparisons among in-
puts.
6. CONCLUSIONS
In this work, we clarify, extend and solve an open problem
concerning the computational complexity for packet schedul-
ing algorithms to achieve tight delay bounds. To the best of
our knowledge, this is the ﬁrst major step in establishing the
complexity lower bounds for packet scheduling algorithms.
Our three major results can be summarized as follows:
1. We prove that Ω(log2n) is indeed the per packet com-
plexity lower bound to guarantee O(1) GPS-relative
delay (excluding the cost of tracking GPS time), if a
scheduling algorithm is only allowed to compare among
inputs (equivalently among GPS virtual ﬁnish times)
in its decision tree. Moreover, we prove that the com-
plexity lower bound remains the same even if the GPS-
relative delay bound is relaxed to O(na) for 0 < a < 1,
thus establishing the complete “tradeoﬀ curve”.
2. We are able to extend our complexity results to a much
stronger computational model: a decision tree that
allows linear tests. However, this comes at the cost
of having to enforce a slightly stronger type of delay
(disadvantage delay) in the same asymptotic amount
(O(na), 0 ≤ a < 1). Nevertheless, we show that the
overall results remain stronger.
7One possible way not to use such “good” LR servers to
establish tight end-to-end delay bounds may be to use dy-
namic packet state (DPS) (introduced ﬁrst in SCORE [16])
to convey scheduling state information from one scheduler
to another.
r
Lmax,i
3. We show that in a Latency Rate (LR) [15] scheduler,
providing a tight GPS-relative delay bound of naLmax
(0 ≤ a < 1) is equivalent to providing a tight la-
tency bound of naLmax
, under the CBF S+
condition. This allows us to conclude that the per
packet complexity to guarantee naLmax
la-
tency bound using only comparisons among inputs is
Ω(log2n). This, to a certain extent, connects the com-
plexity lower bounds for guaranteeing tight GPS-relative
delay bounds in a single scheduler to the complexity
that is needed to guarantee end-to-end delay bounds.
Lmax,i
+
ri
r
+
ri
r
7. ACKNOWLEDGMENTS
We thank Dr. Chuanxiong Guo for helpful discussions
with the ﬁrst author. We thank Prof. George Varghese
for encouraging the ﬁrst author to work on this important
problem. We thank Dr. Scott Shenker, the shepherd of
this paper, Prof. Ellen Zegura, Prof. Yechezkel Zalcstein,
Mr. Shashidhar Merugu and anonymous referees for their
insightful comments and suggestions that help improve the
quality and accessibility of the paper.
8. REFERENCES
[1] A. Aho, J. Hopcroft, and J. Ullman. The Design and
Analysis of Computer Algorithms. Addison-Wesley,
1973.
[2] J. Bennett and H. Zhang. W F 2Q: worst-case fair
weighted fair queuing. In IEEE INFOCOM’96, Mar.
1996.
[3] J. Bennett and H. Zhang. Hierarchical packet fair
queuing algorithms. IEEE/ACM Transactions on
Networking, 5(5):675–689, 1997.
[4] A. Demers, S. Keshav, and S. Shenker. Analysis and
simulation of a fair queuing algorithm.
Internetworking: Research and Experience, pages 3–26,
1990. Also in Proceedings of ACM SIGCOMM’89.
[5] D. Dobkin and R. Lipton. A lower bound of 1
2 n2 on
linear search programs for the knapsack problem. J.
Comput. Syst. Sci., 16:413–417, 1978.
[6] M. Fredman and B. Weide. On the complexity of
computing of measure of S[ai, bi]. Communications of
the ACM, 21(7), July 1978.
[7] A. Greenberg and N. Madras. How fair is fair
queuing? Journal of the ACM, 39(3):568–598, 1992.
Also in Proc. of Performance 1990.
[8] C. Guo. SSR: an o(1) time complexity packet
scheduler for ﬂows in multi-service packet networks. In
Proc. of Sigcomm’01, Sept. 2001.
[9] F. Heide. A polynomial linear search algorithm for the
n-dimensional knapsack problem. J. of the ACM,
31:668–676, 1984.
[10] M. Katevenis, S. Sidiropoulos, and C. Courcoubetis.
Weighed round-robin cell multiplexing in
general-purpose ATM switch chip. IEEE Journal on
Selected Areas in Communications, 9:1265–1279, Oct.
1991.
[11] D. Knuth. The Art of Computer Programming, Sorting
and Searching (Volume 3). Addison-Wesley, 1998.
291[12] A. Parekh and R. Gallager. A generalized processor
sharing approach to ﬂow control in integrated services
networks: the single node case. IEEE/ACM
Transaction on Networking, 1(3):344–357, June 1993.
[13] M. Shreedhar and G. Varghese. Eﬃcient fair queuing
using deﬁcit round robin. In Proc. of ACM
SIGCOMM’95, pages 231–242, Aug. 1995.
[14] D. Stiliadis and A. Varma. Design and analysis of
frame-based fair queuing: A new traﬃc scheduling
algorithm for packet switched networks. In Proc. of
ACM Sigmetrics’96, pages 104–115, May 1996.
[15] D. Stiliadis and A. Varma. Latency-rate servers: a
general model for analysis of traﬃc scheduling
algorithms. In Proc. of Infocom’96, Mar. 1996.
[16] I. Stoica and H. Zhang. Providing guaranteed services
without per ﬂow management. In Proc. of ACM
SIGCOMM, Sept. 1999.
[17] J. Turner. New directions in communications (or
which way to the information age?). IEEE
Communications Magazine, 24:8–15, Oct. 1986.
[18] G. Yuval. Finding nearest neighbors. Information
Processing Letters, 5(3):63–65, Aug. 1976.
[19] H. Zhang. Service disciplines for guaranteed
performance service in packet switching networks.
Proceedings of the IEEE, 83(10), Oct. 1995.
[20] L. Zhang. Virtualclock: a new traﬃc control algorithm
for packet switching networks. ACM Transactions on
Computer Systems, 9:101–124, May 1991.
292