### Responses from App Developers

#### Snapchat's Response
Snapchat’s security team considers the issue more of a defense-in-depth concern rather than a discrete security vulnerability within the app itself. According to their program rules, they generally do not accept reports that solely indicate a lack of a possible security defense. While they appreciate the suggestions, they do not believe the issue poses a significant enough risk to warrant a priority fix. Therefore, the report will be closed as "Informative." They expressed appreciation for the effort and encouraged continued reporting of security issues in the future.

#### LinkedIn's Response
LinkedIn’s security team provided a more positive response compared to Facebook and Snapchat. They acknowledged the detailed report and expressed gratitude. The team regularly reviews incoming reports to identify opportunities to improve member experience and safe interactions on the platform. They noted the reported items and included them for consideration in future roadmaps. They appreciated the detail and effort put into the research and report.

#### Responses from Chinese IT Companies
We also received responses from several large Chinese IT companies, including Tencent (developers of QQ, WeChat, and QQ Mail), Alibaba (developers of Alipay), ByteDance (developers of Toutiao), Sina (developers of Weibo), NetEase (developers of 163 Mail), and Baidu. Most of these companies did not take our security reports seriously. Tencent indicated that it was a known problem, while Sina simply closed the reports without explanation. The only exception was ByteDance, whose security team responded that they follow “industry standards” but will report the issue to their product team.

These responses suggest that app developers generally downplay usability security concerns related to In-App Browsing Interfaces (IABIs).

### Secure IABI Design Principles

In this section, we propose a set of secure IABI design principles and corresponding code-level implementations to help mitigate risky IABIs and guide future designs. We provide examples in Android, and iOS developers can use corresponding counterparts in iOS.

#### Recommendations
1. **Use Chrome Custom Tabs (CCT) and SFSafariViewController (SF)**
   - CCT and SF performed well in our tests, except for Test T8.
   - Implementation guides: [CCT][3] and [SF][4].
   - Compared to building one’s own IABI, CCT/SF are easy to incorporate with little effort, achieving outstanding security design and optimized loading speed.

#### Limitations of CCT and SF
- **CCT**: Fails to provide an extra prompt to alert users when entering passwords on the web page. It offers only basic customization options, which may not meet deeper customization needs.
- **Availability**: Chrome (and therefore CCT) is not available in some regions, such as mainland China.

### Proposed IABI Design Principles

For developers who need their own IABI implementation, we propose the following design principles, divided into three parts: before opening the URL, on page display, and on page navigation.

#### 1. Before Opening the URL
- **Display the Complete URL and Indicators**: Display the complete URL and corresponding indicators of URL schemes. The indicator should be more intuitive and eye-catching than the title and favicon.
- **Avoid Pre-loading Information**: Do not display any extra pre-loading information (e.g., favicon and title) unless the URL can be trusted.

#### 2. On Page Displaying
- **Display Full URL in Address Bar**: Show the full URL in the address bar to indicate the page origin. Use `WebView.getURL()` or event handlers like `onPageFinished` to get the current URL.
- **HTTP and HTTPS Indicators**: Display HTTP and HTTPS indicators, which are intuitive for users to identify insecure web pages. Override the `onPageFinished` method to achieve this.
- **Handle Lock Emoji in Title**: 
  - Replace the lock emoji with text to avoid misinterpretation as an HTTPS indicator.
  - Disallow emojis in the title.
  - Avoid displaying the title.
- **Handle Long Subdomain Names**:
  - Provide scrolling capability for end users to read the complete domain name.
  - Prioritize the display of the domain name over the subdomain name.

#### 3. On Page Navigating
- **Additional Warning for Password Entry**: Show an additional warning regardless of whether the page is HTTP or HTTPS.
- **Detect Input Boxes**: Use JavaScript to detect password and username input boxes and provide a corresponding prompt.
- **Handle Certificate Errors**:
  - Show a prompt informing users about SSL errors.
  - Provide an option to continue opening the URL in a covert manner, similar to CCT, which shows the continue option after clicking the "Advanced" button.

### Discussion

#### Threats to Validity and Limitations
- **User Study**: Our usability problems were not verified in a user study, leading to a lack of direct confirmation of our findings.
- **Ratings**: Our evaluations, particularly the setting of various ratings, are based on previous work and W3C guidelines. These settings are subjective and not unique.
- **Dataset**: We tested only 25 mobile apps, but these are among the most popular and widely used apps containing IABIs.
- **Automatic Testing**: Manual testing limits scalability. Automatic testing is non-trivial due to the specific behaviors required and the challenges in locating and analyzing HTTP/HTTPS indicators.

### Conclusion
Our proposed design principles aim to enhance the security and usability of IABIs. Future work could include a user study to validate the effectiveness of these principles and further improvements in automatic testing methods.