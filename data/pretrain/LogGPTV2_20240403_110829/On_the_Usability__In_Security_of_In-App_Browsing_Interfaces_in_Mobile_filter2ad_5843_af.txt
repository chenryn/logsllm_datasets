depth issue, rather than a discrete security vulnerability in Snapchat
itself. Per our program rules, we generally don’t accept issues pertain-
ing to ‘Reports solely indicating a lack of a possible security defense’.
While we appreciate your suggestions here, we don’t feel that this
poses a severe enough risk to warrant a priority fix, and as such we’ll
be closing this report as Informative. We do appreciate your efforts
here, and we hope you’ll continue reporting security issues to us in
the future.”
LinkedIn’s response. Compared to Facebook and Snapchat, the
response from LinkedIn’s security team is more positive. Specifically,
they consider patching it in the future versions of the LinkedIn app:
“Thank you for your detailed email and report, we appreciate it. We
regularly review incoming reports to identify opportunities to improve
our member experience and their safe interactions on the platform.
We have taken note of these items and included it for consideration in
our future roadmaps. Once again, we appreciate the detail and effort
that went into this research & report.”
Some Chinese IT companies’ responses. We also received re-
sponses from a few large Chinese IT companies, including Tencent
(developing QQ, WeChat, and QQ Mail apps), Alibaba (developing
Alipay), ByteDance (developing Toutiao), Sina (developing Weibo),
NetEase (developing 163 Mail), and Baidu. Most of them did not
take our security reports seriously — either indicating that it was a
known problem (by Tencent) or simply closed our reports without
an explanation (by Sina). The only exception goes to ByteDance,
whose security team responded that they just followed “the indus-
try’s standard” but will report this issue to their product team.
All these responses suggest a play down from app developers
when it comes to IABI usability security concerns.
6 SECURE IABI DESIGN PRINCIPLES
In this section, we propose a set of secure IABI design principles
and corresponding code-level implementations in this section to
help mitigate risky IABIs and guide future designs. Here we provide
implemenations in Android as examples, and iOS developers can
use corresponding counterparts in iOS.
Firstly, we recommend the use of Chrome Custom Tabs and
SFSafariViewController for their good performance in our tests
presented in this paper except for T8. The implementation guides
are CCT [3] and SF [4]. Comparing to building one’s own IABI,
CCT/SF are easy to incorporate with little effort while achieving
outstanding security design and optimized loading speed.
However, CCT and SF also have their limitations. CCT failed to
provide an extra prompt to alert users when entering passwords on
the web page. And they can only provide some basic customization
options while developers may need deeper customization to fit in
with their apps. In some region, Chrome (and therefore CCT) is not
available, e.g., in the mainland China market.
RAID’21,October6–8,2021,SanSebastian,SpainZichengZhang,DaoyuanWu,LixiangLi,andDebinGaoIABIsasNEUTRAL.Foralltestedapps,wefindthatonlytheappsusingSFhavesuchperformance.BAD.TheotherappsscoreBADinT8,includingWeChatwhichisalsodevelopedbyTencentbuttheydonotshowanywarningsinthistest.Uponfurtherinvestigation,wefindthatthisanti-fraudtipwhichisusedbytheothertwoappscanberemovedinWeChatifthedomainnameisregisteredonthedeveloperplatformofWeChat.Somaybesomedevelopershaveregisteredthisdomainnameonthatplatformsothepromptisremoved.iOS.iOSappstheirwithownIABIimplementationbehavethesameastheirAndroidversionsinthistest.Takeawayin§4.4:MostofthetestedIABIsdonotprovidespe-cificwarningstoremindusersoftheriskofinputtingpass-wordsduringnavigatingaloginpage,regardlessitusesHTTPorHTTPS.EvenCCT/SFdoesnotperformwellinthisteszhoumot.5APPDEVELOPERS’RESPONSESTounderstanddevelopers’reactiononourfindingsandtopoten-tiallyprovideourrecommendationsonfixingsevereIABIissues,weissuedsecurityreportstoallaffectedappsincludingWeChat,FBMessenger,QQ,Snapchat,Instagram(fixedaswereported),Weibo,163Mail,QQMail,Alipay,LinkedIn,Toutiao,andBaidu,throughtheirbugbountyprogramsorsecuritycontactemails3.Mostoftheappsacknowledgedourfindingsandagreedwithourassessment,butrefusedtorecognizethemasvulnerabilities,i.e.,theyconsiderthereportedissuesoutofthescopeoftheirbugbountyprograms.Byanalyzingtheirresponsesindetailasfollows,wefindthatde-velopers’willingnessandreadinesstofixusabilitysecurityissuesareratherlowcomparedtofixingtechnicalvulnerabilities,whichisapuzzleinusabilitysecurityresearch.Facebook’sresponse.WhiletheFacebookappperformswellinnearlyallthetests,theothertwoappsfromthesamecompany,namelyFBMessengerandInstagram,didnotusethesameIABIdesignandfailedinourtestsT3∼T4andT6∼T8(see§4).Whenwepreparedthesecurityreportsforthesetwoappson4February2021,wefoundthatthelatestversionofInstagramhadchangeditsIABIdesigntodisplayalockiconandanexclamationmarktoindicatetheHTTPSandHTTPpages,respectively.Thissuggeststhattheyalsonoticedthisproblem(beforeourreporting)andmadeanimprovement.Therefore,wefocusontheresponsetoourreportstoFBMessenger.TherearetwokeypointsintheresponsegivenbytheFacebooksecurityteam.First,theyappreciatedourreportbutsaidthatourre-portdoesnotqualifyfortheirbugbountyprogramduetothesocialengineeringnatureofourreportedattacks.Second,theyalreadyhaveaURLdetectionsystemcalledLinkshim,whichcoulddetectpotentiallymaliciousURLsandthusdefendagainstIABIattacks.WhileweagreethatthereportedIABIusabilityissueswouldnotcausethesamesecurityconsequencesasinthetechnicalWebViewvulnerabilities(e.g.,[16,19,26,27,30]),theusabilityweaknessesinFBMessenger’sIABIswedemonstratedin§4definitelygiveattack-ersampleroomstosuccessfullylaunchphishingattacks.Moreover,3AppsusingCCT/SFaregenerallysecure;soweskipthem.WefailedtolocateanyfeedbackchannelforKakaoTalkandZhihuandthereforehavetoskipthemaswell.itisapuzzletoseethatdifferentappsdevelopedbythesamecom-panymakevastlydifferentsecuritydecisionsforseeminglythesamecomponent.Snapchat’sresponse.ComparedwithFacebook,thesecurityteamofSnapchatismoreconcernedonIABIs’usabilitysecurityissueswiththefollowingresponse(despitethatapriorityfixwouldnotbeissuedassimilartoFBMessenger):“Whilethisattackscenarioisquiteinteresting,wewouldconsiderthistobemoreofadefense-in-depthissue,ratherthanadiscretesecurityvulnerabilityinSnapchatitself.Perourprogramrules,wegenerallydon’tacceptissuespertain-ingto‘Reportssolelyindicatingalackofapossiblesecuritydefense’.Whileweappreciateyoursuggestionshere,wedon’tfeelthatthisposesasevereenoughrisktowarrantapriorityfix,andassuchwe’llbeclosingthisreportasInformative.Wedoappreciateyoureffortshere,andwehopeyou’llcontinuereportingsecurityissuestousinthefuture.”LinkedIn’sresponse.ComparedtoFacebookandSnapchat,theresponsefromLinkedIn’ssecurityteamismorepositive.Specifically,theyconsiderpatchingitinthefutureversionsoftheLinkedInapp:“Thankyouforyourdetailedemailandreport,weappreciateit.Weregularlyreviewincomingreportstoidentifyopportunitiestoimproveourmemberexperienceandtheirsafeinteractionsontheplatform.Wehavetakennoteoftheseitemsandincludeditforconsiderationinourfutureroadmaps.Onceagain,weappreciatethedetailandeffortthatwentintothisresearch&report.”SomeChineseITcompanies’responses.Wealsoreceivedre-sponsesfromafewlargeChineseITcompanies,includingTencent(developingQQ,WeChat,andQQMailapps),Alibaba(developingAlipay),ByteDance(developingToutiao),Sina(developingWeibo),NetEase(developing163Mail),andBaidu.Mostofthemdidnottakeoursecurityreportsseriously—eitherindicatingthatitwasaknownproblem(byTencent)orsimplyclosedourreportswithoutanexplanation(bySina).TheonlyexceptiongoestoByteDance,whosesecurityteamrespondedthattheyjustfollowed“theindus-try’sstandard”butwillreportthisissuetotheirproductteam.AlltheseresponsessuggestaplaydownfromappdeveloperswhenitcomestoIABIusabilitysecurityconcerns.6SECUREIABIDESIGNPRINCIPLESInthissection,weproposeasetofsecureIABIdesignprinciplesandcorrespondingcode-levelimplementationsinthissectiontohelpmitigateriskyIABIsandguidefuturedesigns.HereweprovideimplemenationsinAndroidasexamples,andiOSdeveloperscanusecorrespondingcounterpartsiniOS.Firstly,werecommendtheuseofChromeCustomTabsandSFSafariViewControllerfortheirgoodperformanceinourtestspresentedinthispaperexceptforT8.TheimplementationguidesareCCT[3]andSF[4].Comparingtobuildingone’sownIABI,CCT/SFareeasytoincorporatewithlittleeffortwhileachievingoutstandingsecuritydesignandoptimizedloadingspeed.However,CCTandSFalsohavetheirlimitations.CCTfailedtoprovideanextraprompttoalertuserswhenenteringpasswordsonthewebpage.Andtheycanonlyprovidesomebasiccustomizationoptionswhiledevelopersmayneeddeepercustomizationtofitinwiththeirapps.Insomeregion,Chrome(andthereforeCCT)isnotavailable,e.g.,inthemainlandChinamarket.395On the Usability (In)Security of In-App Browsing Interfaces in Mobile Apps
RAID ’21, October 6–8, 2021, San Sebastian, Spain
Considering these shortcomings of CCT/SF, we propose the
following IABI design principles for those developers who need
their own IABI implementation. We devide them into three parts:
design principles before opening the URL, on page displaysing and
on page navigating. Considering these shortcomings of CCT/SF,
we propose the following IABI design principles for developers
who need their own IABI implemenation. We devide them into
three parts: design principles before opening the URL, on page
displaysing, and on page navigating.
(1) Before Opening the URL: In the chatting, posting, email
UI and other possible UI that display the clickable URL, IABIs:
(a) SHOULD display the complete URL and correspond-
ing indicators of URL schemes. It would be GOOD that
the indicator be more intuitive and eye-catching than title
and favicon.
(b) SHOULD NOT display any extra pre-loading infor-
mation (e.g., favicion and title), unless that URL can be
trusted.
(2) On Page Displaying. After the user taps the URL, develop-
ers could adopt the following five principles to better avoid
the potential usability security issues on page displaying:
(a) SHOULD display the full URL in the address bar to
show the page origin. Developers can get the URL of
the current page through WebView.getURL() or the ar-
guments in the event handlers of WebViewClient (e.g.,
onPageFinished, shown in Listing 1).
(b) SHOULD display the HTTP and HTTPS indicators,
which are intuitive for users to identify insecure web pages,
potentially in conjunction with the scheme text in the URL.
To this end, developers can override the onPageFinished
method [7]. Here we provide a simple example in Listing 1.
(d) SHOULD handle the lock emoji in the title with extra
care by:
(i) Replacing it with the text to avoid misinterpreting as
the HTTPS indicator; or
(ii) Disallowing emoji; or
(iii) Avoiding displaying the title.
Developers can override the onPageFinished method, ob-
tain the title of the web page by WebView.getTitle(),
and detect the emoji code in the title. For example, the
Unicode of the lock emoji is U+1F512. Another choice is to
disallow all the unicode in the title. We do not recommend
it as it will greatly damage the user experience.
(e) SHOULD handle the long subdomain name with ex-
tra care. by:
(i) Providing scrolling capability for end uses to read the
complete domain name; or
(ii) Prioritizing the display of domain name over subdomain
name.
To scroll the TextView (displaying the URL/domain name)in
Android apps, developers can set its attribute in the layout
xml file:
To Prioritize the domain name, developers can set the
attribute to:
android:ellipsize=‘‘marquee’’.
android:ellipsize=‘‘start’’.
(3) On Page Navigating. When the user tries to enter the pass-
word or other sensitive information in an web page, IABIs:
(a) SHOULD show an additional warning regardless of
HTTPS or HTTP pages. Case 2 in Figure 9 is a good ex-
ample.
To detect the input box of the password and username, de-
velopers can utilize the interaction between the Java and
JavaScript code, i.e., using WebView.loadUrl() to execute
JavaScript code to detect the ‘password’ type within the
web page and give a corresponding prompt. An example
is shown in Listing 2.
(c) SHOULD NOT directly open URLs with certificate er-
rors.
(i) Show a prompt, like a dialog box or a special page, which
informs end users about SSL errors.
(ii) Provide end users with the option to continue open-
ing the URL in a covert manner, e.g., as in CCT which
only shows the continue option after clicking on the
“Advanced button” (Case 2 in Figure 7).
To handle the certificate errors in the WebView, developers
can override the event handler WebViewClient.onReceiv-
edSslError [8], and show a dialog to inform the user
about the error.
7 DISCUSSION
In this section, we discuss threats to the validity of our study and
limitations. Specifically, the major threats are that we did not con-
duct a user study to evaluate IABIs and our ratings are subjective
assessments solely based on designs of the apps’ user interfaces
and corresponding logic. Additionally, we discuss our limitations
on the lack of a large dataset, automatic testing, and evaluation of
the IABI design principles.
User study. The usability problems mentioned in this paper are
not verified in a study with end users, resulting in the lack of direct
OntheUsability(In)SecurityofIn-AppBrowsingInterfacesinMobileAppsRAID’21,October6–8,2021,SanSebastian,SpainConsideringtheseshortcomingsofCCT/SF,weproposethefollowingIABIdesignprinciplesforthosedeveloperswhoneedtheirownIABIimplementation.Wedevidethemintothreeparts:designprinciplesbeforeopeningtheURL,onpagedisplaysingandonpagenavigating.ConsideringtheseshortcomingsofCCT/SF,weproposethefollowingIABIdesignprinciplesfordeveloperswhoneedtheirownIABIimplemenation.Wedevidethemintothreeparts:designprinciplesbeforeopeningtheURL,onpagedisplaysing,andonpagenavigating.1.BeforeOpeningtheURL:Inthechatting,posting,emailUIandotherpossibleUIthatdisplaytheclickableURL,IABIs:a)SHOULDdisplaythecompleteURLandcorrespondingindicatorsofURLschemes.ItwouldbeGOODthattheindicatorbemoreintuitiveandeye-catchingthantitleandfavicon.b)SHOULDNOTdisplayanyextrapre-loadinginforma-tion(e.g.,favicionandtitle),unlessthatURLcanbetrusted.2.OnPageDisplaying.AftertheusertapstheURL,developerscouldadoptthefollowingfiveprinciplestobetteravoidthepotentialusabilitysecurityissuesonpagedisplaying:a)SHOULDdisplaythefullURLintheaddressbartoshowthepageorigin.DeveloperscangettheURLofthecur-rentpagethroughWebView.getURL()ortheargumentsintheeventhandlersofWebViewClient(e.g.,onPageFinished,showninListing1).b)SHOULDdisplaytheHTTPandHTTPSindicators,whichareintuitiveforuserstoidentifyinsecurewebpages,po-tentiallyinconjunctionwiththeschemetextintheURL.Tothisend,developerscanoverridetheonPageFinishedmethod[7].HereweprovideasimpleexampleinListing1.1publicvoidonPageFinished(WebViewview,Stringurl){2...3//Displayurlonthetitlebar.4addressBar.setText(url);5//obtainthescheme6Stringscheme=URL(url).getProtocol();7if(scheme.equals("https")){8/∗DisplaytheHTTPSindicator∗/9}else{10/∗Displaytheinsecureindicator∗/11}12...13}Listing1:DisplaytheURLandindicators.c)SHOULDNOTdirectlyopenURLswithcertificateer-rors.a.Showaprompt,likeadialogboxoraspecialpage,whichinformsendusersaboutSSLerrors.b.ProvideenduserswiththeoptiontocontinueopeningtheURLinacovertmanner,e.g.,asinCCTwhichonlyshowsthecontinueoptionafterclickingonthe“Advancedbutton”(Case2inFigure7).TohandlethecertificateerrorsintheWebView,developerscanoverridetheeventhandlerWebViewClient.onReceiv-edSslError[8],andshowadialogtoinformtheuserabouttheerror.d)SHOULDhandlethelockemojiinthetitlewithextracareby:a.ReplacingitwiththetexttoavoidmisinterpretingastheHTTPSindicator;orb.Disallowingemoji;orc.Avoidingdisplayingthetitle.DeveloperscanoverridetheonPageFinishedmethod,ob-tainthetitleofthewebpagebyWebView.getTitle(),anddetecttheemojicodeinthetitle.Forexample,theUnicodeofthelockemojiisU+1F512.Anotherchoiceistodisallowalltheunicodeinthetitle.Wedonotrecommenditasitwillgreatlydamagetheuserexperience.e)SHOULDhandlethelongsubdomainnamewithextracare.by:a.Providingscrollingcapabilityforendusestoreadthecompletedomainname;orb.Prioritizingthedisplayofdomainnameoversubdo-mainname.ToscrolltheTextView(displayingtheURL/domainname)inAndroidapps,developerscansetitsattributeinthelayoutxmlfile:android:ellipsize=‘‘marquee’’.ToPrioritizethedomainname,developerscansettheat-tributeto:android:ellipsize=‘‘start’’.3.OnPageNavigating.Whentheusertriestoenterthepasswordorothersensitiveinformationinanwebpage,IABIs:a)SHOULDshowanadditionalwarningregardlessofHTTPSorHTTPpages.Case2inFigure9isagoodexample.Todetecttheinputboxofthepasswordandusername,de-veloperscanutilizetheinteractionbetweentheJavaandJavaScriptcode,i.e.,usingWebView.loadUrl()toexecuteJavaScriptcodetodetectthe‘password’typewithinthewebpageandgiveacorrespondingprompt.AnexampleisshowninListing2.1webView.loadUrl(2"javascript:(function(){"+3"varobjs=document.getElementsByTagName(\"input\");"4+"for(vari=0;i<objs.length;i++)"+"{"5+"vartype=objs[i].getAttribute(\"type\");"6+"if(type==\"password\"){"7+"objs[i].onfocus=function(){"8+"PROMPT_TO_ENTERING_PASSWORD"9+"}"10+"}"11+"}"12+"})()");Listing2:Displayapromptwhenenteringpasswords.7DISCUSSIONInthissection,wediscussthreatstothevalidityofourstudyandlimitations.Specifically,themajorthreatsarethatwedidnotcon-ductauserstudytoevaluateIABIsandourratingsaresubjectiveassessmentssolelybasedondesignsoftheapps’userinterfacesandcorrespondinglogic.Additionally,wediscussourlimitationsonthelackofalargedataset,automatictesting,andevaluationoftheIABIdesignprinciples.Userstudy.Theusabilityproblemsmentionedinthispaperarenotverifiedinastudywithendusers,resultinginthelackofdirectconfirmationofourfindings.Forexample,inT6,wedidnottestwhetheranenduserisactuallymisledbythefakelockemojiinthetitle,eventhoughanexpertanalysisontheapp’suserinterfaceOntheUsability(In)SecurityofIn-AppBrowsingInterfacesinMobileAppsRAID’21,October6–8,2021,SanSebastian,SpainConsideringtheseshortcomingsofCCT/SF,weproposethefollowingIABIdesignprinciplesforthosedeveloperswhoneedtheirownIABIimplementation.Wedevidethemintothreeparts:designprinciplesbeforeopeningtheURL,onpagedisplaysingandonpagenavigating.ConsideringtheseshortcomingsofCCT/SF,weproposethefollowingIABIdesignprinciplesfordeveloperswhoneedtheirownIABIimplemenation.Wedevidethemintothreeparts:designprinciplesbeforeopeningtheURL,onpagedisplaysing,andonpagenavigating.1.BeforeOpeningtheURL:Inthechatting,posting,emailUIandotherpossibleUIthatdisplaytheclickableURL,IABIs:a)SHOULDdisplaythecompleteURLandcorrespondingindicatorsofURLschemes.ItwouldbeGOODthattheindicatorbemoreintuitiveandeye-catchingthantitleandfavicon.b)SHOULDNOTdisplayanyextrapre-loadinginforma-tion(e.g.,favicionandtitle),unlessthatURLcanbetrusted.2.OnPageDisplaying.AftertheusertapstheURL,developerscouldadoptthefollowingfiveprinciplestobetteravoidthepotentialusabilitysecurityissuesonpagedisplaying:a)SHOULDdisplaythefullURLintheaddressbartoshowthepageorigin.DeveloperscangettheURLofthecur-rentpagethroughWebView.getURL()ortheargumentsintheeventhandlersofWebViewClient(e.g.,onPageFinished,showninListing1).b)SHOULDdisplaytheHTTPandHTTPSindicators,whichareintuitiveforuserstoidentifyinsecurewebpages,po-tentiallyinconjunctionwiththeschemetextintheURL.Tothisend,developerscanoverridetheonPageFinishedmethod[7].HereweprovideasimpleexampleinListing1.1publicvoidonPageFinished(WebViewview,Stringurl){2...3//Displayurlonthetitlebar.4addressBar.setText(url);5//obtainthescheme6Stringscheme=URL(url).getProtocol();7if(scheme.equals("https")){8/∗DisplaytheHTTPSindicator∗/9}else{10/∗Displaytheinsecureindicator∗/11}12...13}Listing1:DisplaytheURLandindicators.c)SHOULDNOTdirectlyopenURLswithcertificateer-rors.a.Showaprompt,likeadialogboxoraspecialpage,whichinformsendusersaboutSSLerrors.b.ProvideenduserswiththeoptiontocontinueopeningtheURLinacovertmanner,e.g.,asinCCTwhichonlyshowsthecontinueoptionafterclickingonthe“Advancedbutton”(Case2inFigure7).TohandlethecertificateerrorsintheWebView,developerscanoverridetheeventhandlerWebViewClient.onReceiv-edSslError[8],andshowadialogtoinformtheuserabouttheerror.d)SHOULDhandlethelockemojiinthetitlewithextracareby:a.ReplacingitwiththetexttoavoidmisinterpretingastheHTTPSindicator;orb.Disallowingemoji;orc.Avoidingdisplayingthetitle.DeveloperscanoverridetheonPageFinishedmethod,ob-tainthetitleofthewebpagebyWebView.getTitle(),anddetecttheemojicodeinthetitle.Forexample,theUnicodeofthelockemojiisU+1F512.Anotherchoiceistodisallowalltheunicodeinthetitle.Wedonotrecommenditasitwillgreatlydamagetheuserexperience.e)SHOULDhandlethelongsubdomainnamewithextracare.by:a.Providingscrollingcapabilityforendusestoreadthecompletedomainname;orb.Prioritizingthedisplayofdomainnameoversubdo-mainname.ToscrolltheTextView(displayingtheURL/domainname)inAndroidapps,developerscansetitsattributeinthelayoutxmlfile:android:ellipsize=‘‘marquee’’.ToPrioritizethedomainname,developerscansettheat-tributeto:android:ellipsize=‘‘start’’.3.OnPageNavigating.Whentheusertriestoenterthepasswordorothersensitiveinformationinanwebpage,IABIs:a)SHOULDshowanadditionalwarningregardlessofHTTPSorHTTPpages.Case2inFigure9isagoodexample.Todetecttheinputboxofthepasswordandusername,de-veloperscanutilizetheinteractionbetweentheJavaandJavaScriptcode,i.e.,usingWebView.loadUrl()toexecuteJavaScriptcodetodetectthe‘password’typewithinthewebpageandgiveacorrespondingprompt.AnexampleisshowninListing2.1webView.loadUrl(2"javascript:(function(){"+3"varobjs=document.getElementsByTagName(\"input\");"4+"for(vari=0;i<objs.length;i++)"+"{"5+"vartype=objs[i].getAttribute(\"type\");"6+"if(type==\"password\"){"7+"objs[i].onfocus=function(){"8+"PROMPT_TO_ENTERING_PASSWORD"9+"}"10+"}"11+"}"12+"})()");Listing2:Displayapromptwhenenteringpasswords.7DISCUSSIONInthissection,wediscussthreatstothevalidityofourstudyandlimitations.Specifically,themajorthreatsarethatwedidnotcon-ductauserstudytoevaluateIABIsandourratingsaresubjectiveassessmentssolelybasedondesignsoftheapps’userinterfacesandcorrespondinglogic.Additionally,wediscussourlimitationsonthelackofalargedataset,automatictesting,andevaluationoftheIABIdesignprinciples.Userstudy.Theusabilityproblemsmentionedinthispaperarenotverifiedinastudywithendusers,resultinginthelackofdirectconfirmationofourfindings.Forexample,inT6,wedidnottestwhetheranenduserisactuallymisledbythefakelockemojiinthetitle,eventhoughanexpertanalysisontheapp’suserinterface396RAID ’21, October 6–8, 2021, San Sebastian, Spain
Zicheng Zhang, Daoyuan Wu, Lixiang Li, and Debin Gao
confirmation of our findings. For example, in T6, we did not test
whether an end user is actually misled by the fake lock emoji in
the title, even though an expert analysis on the app’s user interface
strongly suggests the possibility. A possible extension of this work
is to design an IABI app practicing GOOD IABI principles and
compare end user reactions with those from popular apps tested in
this paper.
Ratings. Our evaluations, in particular, the setting of various
ratings, are based on previous work [9–11] and World Wide Web
(W3C) guidelines on mobile browsers [6]. We believe that some of
these settings are subjective assessments and do not advocate the
uniqueness of such settings.
Dataset. We conducted tests only on a relatively small dataset
with 25 mobile apps. However, these apps are all the most popular
ones containing IABIs and are used in daily life. Therefore, we be-
lieve that they capture IABIs’ representative behaviors experienced
by end users. It is worth noting that we do not consider the apps
that do not have IABIs, such as Whatsapp and Signal, because they
jump to default browsers when opening a web page.
Towards automatic testing. Our manual testing limits the scal-
ability of this paper. Here we explain briefly why an automatic
testing is non-trivial with either dynamic or static approaches.
Unlike existing work on generic dynamic analysis of mobile apps,
our analysis of IABI behavior requires triggering specific behavior
of mobile apps. This typically mandates signing up an account with
each app and triggering the processing of specific URLs, which is,
to say the least, non-trivial. For example, we cannot find a unified
(dynamic) way of precisely locating the (all) chat UI of each app.
Static analysis also encounters specific challenges, e.g., locating
the HTTP and HTTPS indicators, which typically do not present
themselves as layout files but images. Therefore, it is non-trivial to
perform backward tracing to find the relationship between these
indicators and the web pages.