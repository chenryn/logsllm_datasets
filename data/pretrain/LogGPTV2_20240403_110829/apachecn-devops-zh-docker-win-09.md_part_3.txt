容器的行为也是如此。外部用户可以浏览到主机上的端口`80`，流量由容器处理。在主机上，可以运行`docker container inspect`查看 IP 地址，直接去容器。Docker 网络、卷和群集模式等功能对 Hyper-V 容器的工作方式相同。
Hyper-V 容器的扩展隔离提供了额外的安全性。没有共享内核，因此即使内核漏洞允许容器应用访问主机，主机也只是一个运行在自己内核中的瘦虚拟机层。该内核上没有运行其他进程或容器，因此攻击者无法危害其他工作负载。
Hyper-V 容器有额外的开销，因为内核是分开的。它们的启动时间通常较慢，默认情况下，它们会对内存和 CPU 进行限制，从而在内核级别限制容器不能超过的资源。在某些情况下，这种权衡是值得的。在多租户情况下，假设对每个工作负载都不信任，扩展隔离可能是一种有用的防御措施。
Licensing is different for Hyper-V containers. Normal Windows Server containers are licensed at the host level, so you need a license for each server, and then you can run as many containers as you like. Hyper-V containers each have their own kernel, and there are licensing levels that restrict the number of containers you can run on each host.
# 使用安全的 Docker 映像保护应用
我已经介绍了在运行时保护容器的许多方面，但是 Docker 平台提供了在运行任何容器之前就开始的深度安全性。您可以通过保护打包应用的映像来开始保护应用。
# 构建最小映像
攻击者不太可能危及您的应用并获得对容器的访问，但是如果发生这种情况，您应该构建您的映像来减轻损害。建立一个最小的形象是关键。理想的 Docker 映像应该只包含应用及其运行所需的依赖项。
这对于 Windows 应用来说比 Linux 应用更难实现。Linux 应用的 Docker 映像可以使用最少的发行版作为基础，只在上面打包应用二进制文件。该映像的攻击面非常小。即使攻击者获得了对容器的访问权限，他们也会发现自己处于一个功能非常少的操作系统中。
相比之下，使用 Windows Server Core 的 Docker 映像的基础是功能齐全的操作系统。最小的替代方案是纳米服务器，它的视窗应用编程接口大大减少，甚至没有安装 PowerShell，这消除了一个可能被利用的大功能集。理论上，您可以删除功能、禁用 Windows 服务，甚至删除 Dockerfile 中的 Windows 二进制文件，以限制最终映像的功能。但是，您需要进行大量测试，以确保您的应用能够在您定制的 Windows 版本中正确运行。
Docker's recognition for experts and community leaders is the Captain's program. Docker Captains are like Microsoft MVPs, and Stefan Scherer is both a Captain and an MVP. Stefan has done some promising work by looking at reducing Windows image size by creating images with an empty filesystem and adding a minimal set of Windows binaries.
您不能轻易限制基本 Windows 映像的功能，但可以限制您在上面添加的内容。只要有可能，您应该只添加您的应用内容和最少的应用运行时，这样攻击者就不能修改应用。一些编程语言比其他语言对此有更好的支持，例如:
*   Go 应用可以编译为本机二进制文件，因此您只需要在 Docker 映像中打包可执行文件，而不需要完整的 Go 运行时。
*   .NET Core 应用可以作为程序集发布，所以您只需要打包.NET Core 运行时来执行它们，而不是完整的.NET 核心软件开发工具包。
*   .NET 框架应用需要匹配.NET Framework 安装在容器映像中，但您仍然可以最小化打包的应用内容。您应该在发布模式下编译应用，并确保不打包调试文件。
*   Node.js 使用 V8 作为解释器和编译器，因此，要在 Docker 中运行应用，映像需要安装完整的 Node.js 运行时，并且需要打包应用的完整源代码。
您将受到应用栈支持的限制，但目标是最小的映像。如果您的应用将在纳米服务器上运行，它肯定比视窗服务器核心更好。满了.NET 应用不在纳米服务器上运行，但是.NET Standard 正在快速发展，因此将您的应用移植到它可能是一个可行的选择.NET Core，然后可以在 Nano 服务器上运行。
当您在 Docker 中运行应用时，您使用的单元是容器，并且您使用 Docker 来管理和监视它。底层操作系统不会影响您与容器的交互方式，因此拥有最低限度的操作系统不会限制您对应用的操作。
# 安全扫描
最小的 Docker 映像仍可能包含已知漏洞的软件。Docker 映像使用标准的开放格式，这意味着可以可靠地构建工具来导航和检查映像层。一个工具是 Docker 安全扫描，它检查 Docker 映像中的软件是否存在漏洞。
Docker 安全扫描查看映像、应用依赖项、应用框架甚至操作系统中的所有二进制文件。针对多个**常见漏洞和漏洞利用** ( **CVE** )数据库检查每个二进制文件，寻找已知漏洞。如果发现任何问题，Docker 会报告详细信息。
Docker 安全扫描可在 Docker Hub 上用于官方存储库，在 Docker 可信注册表上用于您自己的私有注册表。这些系统的网络界面显示每次扫描的输出。像 Alpine Linux 这样的最小映像可以完全没有漏洞:
![](img/9f1d7121-06c6-4dcf-baa3-ab74a483095f.png)
官方的 NATS 映像有一个 Nano Server 2016 变体，您可以看到该映像中有一个漏洞:
![](img/ecb59cef-aa94-407c-85a5-92798a94e8c8.png)
在存在漏洞的地方，您可以深入查看哪些二进制文件被标记，以及哪些文件链接到描述漏洞的 CVE 数据库。就`nats:nanoserver`映像而言，封装在 Nano Server 基础映像中的 zlib 和 SQLite 版本存在漏洞。
这些扫描结果来自 Docker Hub 上的官方映像。Docker Enterprise 也在 DTR 提供安全扫描，您可以按需运行手动扫描，或者配置对存储库的任何推送来触发扫描。我已经为 NerdDinner web 应用创建了一个存储库，它被配置为在每次映像推送时进行扫描:
![](img/41764876-a665-4d54-b05c-9c8d25b49bf1.png)
Access to this repository is based on the same security setup from [Chapter 8](08.html), *Administering and Monitoring Dockerized Solutions*, with the **nerd-dinner** organization and the **Nerd Dinner Ops** team. DTR uses the same authorization as UCP, so you build organizations and teams once in Docker Enterprise and you can use them to secure images and runtime resources. The user **elton** is in the **Nerd Dinner Ops** team, with read-write access to the **nerd-dinner-web** repository, which means access to push and pull images.
当我将映像推送到这个存储库时，Docker Trusted Registry 将开始安全扫描，从而识别映像每一层中的所有二进制文件，并在 CVE 数据库中检查它们是否存在已知漏洞。NerdDinner web 应用基于微软的 ASP.NET 映像，在撰写本文时，该映像中的组件存在已知漏洞:
![](img/8e898f88-e3e4-420f-b52a-84e193d4f88a.png)
`System.Net.Http`中的问题只在 ASP.NET 核心应用中可利用，所以我可以自信地说它们不是我的问题.NET 框架应用。虽然`Microsoft.AspNet.Mvc` **跨站点脚本** ( **XSS** )问题确实适用，但我想了解更多关于该漏洞的信息，并在我的 CI 流程中添加测试，以确认攻击者无法通过我的应用利用该漏洞。
这些漏洞不在我在 Dockerfile 中添加的库中——它们在基本映像中，实际上是 ASP.NET 和 ASP.NET 核心的一部分。这与在容器中运行无关。如果您在任何版本的 Windows 上运行从 2.0 到 5.1 的任何版本的 ASP.NET MVC，那么您的生产系统中有这个 XSS 漏洞，但是您可能不知道。
当您在映像中发现漏洞时，您可以准确地看到它们的位置，并决定如何减轻它们。如果您有一个自动化测试套件，可以放心地使用它来验证您的应用在没有二进制文件的情况下仍然可以工作，那么您可以尝试完全删除二进制文件。或者，您可以决定没有从应用到易受攻击代码的路径，并保持映像原样，添加测试以确保没有方法利用该漏洞。
无论您如何管理它，知道应用栈中存在漏洞都是非常有用的。Docker 安全扫描可以在每次推送时工作，因此如果新版本引入了漏洞，您可以立即获得反馈。它还链接到 UCP，因此您可以从管理界面看到您运行的容器的映像中是否存在漏洞。
# 管理窗口更新
为 Docker 映像管理应用栈更新的过程也适用于 Windows 更新。您不会连接到正在运行的容器来更新它使用的 Node.js 版本，也不会运行 Windows Update。
微软为 Windows 发布了一套安全补丁和其他修补程序，通常是每月一次的 Windows 更新。同时，他们在 Docker Hub 和 Microsoft Container Registry 上发布新版本的 Windows Server Core 和 Nano Server 基础映像以及任何相关映像。映像标签中的版本号与 Windows 版本的修补程序号匹配。
在 Dockerfile 的`FROM`指令中明确说明要使用的 Windows 版本，并使用您安装的任何依赖项的特定版本，这是一个很好的做法。这使得您的 Dockerfile 具有确定性——将来任何时候您构建它时，您都会得到相同的映像，结果是所有的二进制文件都是相同的。
指定 Windows 版本还可以清楚地了解如何为已归档的应用管理 Windows 更新。. NET Framework 应用的 Dockerfile 可能是这样开始的:
```
FROM mcr.microsoft.com/windows/servercore:1809_KB4471332
```
这将映像固定到更新为`KB4471332`的 Windows Server 2019。这是一个可搜索的知识库标识，告诉您这是 2018 年 12 月的 Windows 更新。随着新的 Windows 基本映像的发布，您可以通过更改`FROM`指令中的标签并重建映像来更新您的应用，在这种情况下，您可以使用发布版`KB4480116`，这是 2019 年 1 月的更新:
```
FROM mcr.microsoft.com/windows/servercore:1809_KB4480116
```
我将在[第 10 章](10.html)、*中介绍自动化构建和部署，用 Docker* 为持续部署管道提供动力。有了好的配置项/光盘管道，您可以用新的窗口版本重建您的映像，并运行所有测试来确认更新不会影响任何功能。然后，通过使用`docker stack deploy`或`docker service update`，指定应用映像的新版本，您可以在不停机的情况下向所有正在运行的应用推出更新。整个过程可以自动化，所以信息技术管理员在周二补丁上的痛苦随着 Docker 消失了。
# 保护与 DTR 的软件供应链
DTR 是 Docker 扩展 EE 产品的第二部分。(我在[第 8 章](08.html)、*管理和监控备审解决方案中介绍了**通用控制平面** ( **UCP** )。* ) DTR 是一家私人 Docker 注册中心，为 Docker 平台的整体安全故事增加了一个重要部分:安全的软件供应链。
您可以使用 DTR 对 Docker 映像进行数字签名，而 DTR 允许您配置谁可以推送和拉取映像，从而安全地存储用户应用于映像的所有数字签名。它还与 UCP 合作，实现**内容信任**。借助 Docker 内容信任，您可以设置集群，使其仅运行特定用户或团队签名的映像中的容器。
这是一个强大的功能，满足了许多受监管行业的审计要求。可能会要求公司证明在生产中运行的软件实际上是由 SCM 中的代码构建的。没有软件供应链，这是很难做到的；你不得不依靠手工过程和文档记录。使用 Docker，您可以在平台上实现它，并通过自动化流程满足审核要求。
# 存储库和用户
DTR 使用与 UCP 相同的认证模式，因此您可以使用您的**Active Directory**(**AD**)帐户登录，也可以使用在 UCP 创建的帐户。DTR 对来自 UCP 的组织、团队和用户使用相同的授权模型，但是权限是分开的。用户可以对 DTR 的映像存储库和 UCP 从这些映像运行的服务拥有完全不同的访问权限。
DTR 授权模型的某些部分类似于 Docker Hub。用户可以拥有公共或私有存储库，这些存储库以他们的用户名作为前缀。管理员可以创建组织，组织存储库可以设置对用户和团队的访问权限，并具有良好的控制级别。
我在[第 4 章](04.html)、*与 Docker 注册表*共享映像中介绍了映像注册表和存储库。存储库的全名包含注册表主机、所有者和存储库名称。我已经使用 Docker 认证基础架构在 Azure 中建立了 Docker 企业集群。我创建了一个名为`elton`的用户，他们拥有一个私有存储库:
![](img/016f0d1b-a23f-4268-b118-5a272601c40e.png)