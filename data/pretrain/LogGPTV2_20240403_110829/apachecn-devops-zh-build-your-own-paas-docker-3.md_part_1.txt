# 三、创建我们的第一个平台即服务映像
现在，您可以编写自己的 Docker 文件，将它们发布到 Docker 注册表中心，并为它们创建容器。在本章中，您将:
*   在别人的基础上建立自己的形象
*   在你的 GitHub 帐户中托管你的 Dockerfiles
*   在 Docker 注册表中心发布映像
# WordPress 映像
对于这个项目，我们将使用官方的 WordPress Docker 映像作为基础，它的 web 服务器是 Apache2。
### 注
如果您计划托管流量很大的网站，我建议使用基于 Nginx 的映像，而不是 Apache2 作为 web 服务器。我已经非常成功地用 Nginx 和 memcached 插件 WP-FFPC 运行了 WordPress 网站。设置起来可能有点棘手，这就是为什么它不在本书的讨论范围之内。
首先，让我们运行一个 MySQL 容器和一个 WordPress 容器，并链接到它们，看看会发生什么:
```
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -d mysql
docker run --name some-wordpress --link some-mysql:mysql -d -p 80 wordpress
```
`–p 80`选项告诉 Docker 将私有端口`80`暴露给外部世界。要找出哪个公共端口绑定到私有端口`80`，运行`docker ps`命令并查看端口列或调用`docker port ` `80`命令。
截图如下所示:
![The WordPress image](img/00025.jpeg)
在我的案例中，公共港口是 **49154** 。在你的网页浏览器中以`http://public_ip:public_port`的形式输入完整的网址。我在亚马逊 EC2 实例上做这个。我得到了一个公共领域，在我的例子中是`http://ec2-54-187-234-27.us-west-2.compute.amazonaws.com:49154`。
屏幕截图显示如下:
![The WordPress image](img/00026.jpeg)
WordPress 安装页面欢迎我们，这意味着 WordPress 和 MySQL 容器工作正常。
# 从默认值转移
现在，我们在 Apache2 上运行了默认安装的 WordPress。一些 WordPress 插件要求你对网络服务器的配置进行修改。我们如何做到这一点？如果我们想编辑 WordPress 目录中的一些文件，该怎么办？
我们需要做的第一件事是获得我们自己的官方 WordPress 存储库的副本，这样我们就可以探索 Dockerfile 了。用于获取存储库的当前网址是[https://github.com/docker-library/wordpress](https://github.com/docker-library/wordpress)。从 Docker 注册表中心的 WordPress repo 页面点击此链接。
您可以克隆、分叉或下载 Docker 映像的源代码。你怎么得到它并不重要，因为我们以后不会用它了。此图片用于测试和探索目的。我用我的 EC2 实例来做这件事。
![Moving from the defaults](img/00027.jpeg)
在任何文本编辑器中打开文件以查看其内容。如果你——和我一样——正在使用终端，可以使用`vi apache/Dockerfile`在`vi`文件编辑器中打开。官方 WordPress 映像的当前 Dockerfile 如下所示:
```
FROM php:5.6-apache
RUN a2enmod rewrite
# install the PHP extensions we need
RUN apt-get update && apt-get install -y libpng12-dev libjpeg-dev && rm -rf /var/lib/apt/lists/* \
 && docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr \
 && docker-php-ext-install gd
RUN docker-php-ext-install mysqli
VOLUME /var/www/html
ENV WORDPRESS_VERSION 4.1.1
ENV WORDPRESS_UPSTREAM_VERSION 4.1.1
ENV WORDPRESS_SHA1 15d38fe6c73121a20e63ccd8070153b89b2de6a9
# upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress
RUN curl -o wordpress.tar.gz -SL https://wordpress.org/wordpress-${WORDPRESS_UPSTREAM_VERSION}.tar.gz \
 && echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c - \
 && tar -xzf wordpress.tar.gz -C /usr/src/ \
 && rm wordpress.tar.gz
COPY docker-entrypoint.sh /entrypoint.sh
# grr, ENTRYPOINT resets CMD now
ENTRYPOINT ["/entrypoint.sh"]
CMD ["apache2-foreground"]
```
此图片以`php:5.6-apache`图片为基础，下载提取 WordPress 4.1 到`/usr/src/wordpress`。然后添加一个`ENTRYPOINT`并在前台启动 Apache2。
# 我们的目标
为了使这个 WordPress 映像不仅仅用于演示目的，我们需要以三种方式修改 Dockerfile。我们的目标如下:
*   准备 Apache 进行缓存(通过 WP 超级缓存插件)
*   提高 PHP 和 Apache2 中的上传限制
*   安装两个插件:WP 超级缓存和 WP 邮件 SMTP
## 准备缓存
通过 WP 超级缓存获取网站缓存需要执行两个小步骤——我们需要启用 Apache2 中的`mod_headers`和`mod_expires`模块。
在 Dockerfile 的第 5 行，可以看到`RUN a2enmod rewrite`。`a2enmod`命令启用 Apache2 中的模块，通过`a2dismod`命令禁用模块。启用我们想要的模块就像将它们附加到那一行一样简单:
```
RUN a2enmod rewrite expires headers
```
我们进行这些编辑，建立一个新的映像，看看会发生什么。构建这些映像需要很长时间，因为 PHP 是从源代码构建的。我们要找的是表明我们的模块已启用的行。在构建过程中，它们只会出现几秒钟。
您可以通过执行以下操作从 Dockerfile 启动构建:
```
docker build –t mod-wp .
```
`–t mod-wp`命令将我们新映像的名称设置为`mod-wp`。
截图如下图:
![Preparing for caching](img/00028.jpeg)
构建应该在没有任何错误的情况下贯穿整个过程，然后缓存插件的准备工作就完成了。
## 提高上传限制
默认上传大小被 PHP 限制为 2 MB。这个限制太低了，尤其是因为用手机写博客很受欢迎，手机照片或视频的大小通常比这个大。我想有直接在我的博客上传视频的选项，它们可以高达 32 MB。
要提高这个限制，我们需要改变 PHP 配置文件中两个参数的限制:`upload_max_filesize`和`post_max_size`。
查看 php:5.6-Apache 镜像，这是 WordPress 镜像的基础镜像，Dockerfile 我们看到它运行 Debian，PHP 配置文件应该在`/usr/local/etc/php/conf.d/`目录下。这意味着，如果我们向该目录添加一个文件，它应该被读入并解析。
### 注
PHP 5.6 的 Dockerfile 可以在[https://github . com/docker-library/PHP/blob/master/5.6/docker file](https://github.com/docker-library/php/blob/master/5.6/Dockerfile)找到。
为了验证上传限制是否像之前说的那么低，我启动并安装了一个未修改的 WordPress 容器。然后我点击了**添加新媒体**按钮。
![Raising the upload limit](img/00029.jpeg)
上面说上传限制是 2 MB。
让我们在配置目录中添加一个名为`upload-limit.ini`的配置文件，并将这两个参数添加到文件中。
这些命令应该都在一行中，它们被添加到我们的 Dockerfile 中，就在我们在准备 Apache 进行缓存时修改的行的正上方:
```
RUN touch /usr/local/etc/php/conf.d/upload-limit.ini \
 && echo "upload_max_filesize = 32M" >> /usr/local/etc/php/conf.d/upload-limit.ini \
 && echo "post_max_size = 32M" >> /usr/local/etc/php/conf.d/upload-limit.ini
#Paste above this line.
RUN a2enmod rewrite expires headers
```
再次，构建映像以确保不产生错误。如果出现映像名称已经存在的错误，您可以使用`docker rmi mod-wp`命令删除旧映像或将名称更改为`mod-wp:latest`，这会将映像的标签更新为`latest`。
当构建完成时，我们从新的映像中运行一个新的容器来检查 WordPress 管理界面所说的内容。我们可以用我们的新映像运行一个容器，如下所示:
```
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -d mysql
docker run --name some-wordpress --link some-mysql:mysql -d -p 80 mod-wp:latest
```
![Raising the upload limit](img/00030.jpeg)
我们现在可以看到我们可以上传更大的文件。只是为了验证一下，如果上传大于 2 MB 的文件，就证明限制提高了。
## 插件安装
在这里，我们将下载并安装两个插件，我们希望在我们所有未来的 WordPress 网站。这些插件的所有任务将在入口点文件中完成，因为我们必须在 WordPress 安装中编辑一些文件。
第一个插件是 WP 超级缓存。我们之前为此准备了 Apache2，现在是时候使用它了。有了这个插件，我们的网站将运行得更快，对主机的资源需求也更少。
第二个插件是 WP Mail SMTP，在它的帮助下 WordPress 可以发送外发的电子邮件。该容器不包括(也不应该包括)邮件服务器。有了这个插件，我们可以让 WordPress 通过外部 SMTP (Gmail、你的互联网服务提供商或其他任何东西)发送电子邮件。
### 注
尽管我已经托管和管理我自己的邮件服务器几年了，但保持它的最新状态以及管理垃圾邮件过滤器和冗余是一件麻烦的事情。我们最好把它留给专家。
所有插件将通过 CURL 下载，通过解压打开。CURL 已经安装好了，但是解压不是，所以我们必须把它添加到我们的 Dockerfile 中，靠近运行`apt-get install`命令的顶部:
```
RUN apt-get update && apt-get install -y unzip rsync && rm -r /var/lib/apt/lists/*
```
如果我们不这样做，我们将在构建过程中收到错误消息。
由于有两个插件我们必须下载、提取和激活，我们将在`docker-entrypoint.sh`文件中创建一个函数。
这个功能将进入 Wordpress 的插件网站，寻找最新版本插件的下载网址。它将下载并解压到我们 Wordpress 安装的插件文件夹中: