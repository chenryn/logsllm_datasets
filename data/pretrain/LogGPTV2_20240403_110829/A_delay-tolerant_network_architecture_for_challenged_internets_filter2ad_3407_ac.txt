above 
in  various  network
architectures  and  provide  a  store-and-forward  gateway
function between them when a node physically touches two or
more dissimilar networks.  For example, within the Internet the
overlay may operate over TCP/IP,  for deep space links it may
provide  a  gateway  service  to  CFDP  [5],  and  in  delay-tolerant
sensor/actuator  networks  it  may  provide  interconnection  with
some  yet-to-be-standardized  sensor  transport  protocol.    Each
of  these  networking  environments  have  their  own  specialized
protocol  stacks  and  naming  semantics  developed  for  their
particular  application  domain.    Achieving  interoperability
between  them  is  accomplished  by  special  DTN  gateways
located at their interconnection points.
4.1 Regions and DTN  Gateways
The  DTN  architecture  includes  the  concepts  of  regions  and
DTN gateways, as illustrated in Figure 1.  In this example, four
regions are illustrated (A, B, C, D).  Region B includes a DTN
gateway  resident  on  a  commuter  bus1  that  cycles  between
DTN  gateways  3  and  5.    Region  D  includes  a  low-earth-
orbiting  satellite  link  (LEO)  that  also  provides  periodic
connectivity  (albeit  perhaps  more  regular  than  the  bus  which
may be subject to vehicular congestion or other delays).
Region boundaries are used as interconnection points between
dissimilar  network  protocol  and  addressing  families.    More
formally,  two  nodes  are  in  the  same  region  if  they  can
communicate  without  using  DTN  gateways  (generally  using
existing protocols local to the containing region).  We expect a
small  number  of  region  types    (e.g.  Internet-like,  ad-hoc
mobile,  periodic  disconnected,  etc.)  may  evolve  and  each
1 Utilizing  a  bus  as  a  data  router  is  not  purely  hypothetical.    In
some  parts  of  the  world  it  is  a  more  economically  viable  and
reliable  method  for  transporting  data  if  high  delays  can  be
tolerated.  See http://www.daknet.net or http://www.dtnrg.org.
instance  of  the  same  type  will  implement  a  similar  stack  of
underlying protocols.  DTN gateways  correspond to both the
Metanet “waypoint” concept in [22] and also to the definition
of  gateways  described  in  the  original  ARPANET  design  [4].
The  waypoint  concept  describes  a  point  through  which  data
must  pass  in  order  to  gain  entry  to  a  region.    This  point  can
serve  as  a  basis  for  both  translation  (between  region-specific
encodings) as well as a point to enforce policy and control.
the 
transport 
A DTN gateway spanning two regions consists logically of two
“halves,” each half in one of the adjacent regions above their
corresponding  transport  protocols,  analogous  to  ARPANET-
style  gateways  structured  above  specific  link  layer  protocols.
In  operating  above 
layer,  however,  DTN
gateways  differ  from  ARPANET  gateways  and  are  instead
focused  on  reliable  message  routing  instead  of  best-effort
packet  switching.    DTN  gateways  are  responsible  for  storing
messages  in  nonvolatile  storage  when  reliable  delivery  is
transports  by
required  and  mapping  between  differing 
resolving  globally-significant  name 
tuples 
locally-
resolvable names for traffic destined internally to an adjacent
region  (see  following  section).    They  also  may  perform
authentication and access control checks on arriving traffic to
ensure forwarding is to be allowed.
to 
4.2 Name Tuples
For  routing  of  DTN  messages,  we  elect  to  use  identifiers  for
objects or groups of objects called name tuples comprising two
variable length portions.  In Figure 1, the DTN name tuple(s)
for each end-point and each router “half” is illustrated in curly
braces  in  the  form  {Region  Name,  Entity  Name}.    The  first
portion  is  a  globally-unique,  hierarchically  structured  region
name.  It is interpreted by DTN gateways to find the path(s) to
one or more DTN gateways at the edge of the specified region.
It is populated into DTN forwarding tables either statically (by
a  network  administrator),  or  by  one  or  more  dynamic  DTN-
layer routing protocols (which could be computed centrally for
a region, for example). A region name’s hierarchical structure
provides  the  ability  to  reduce  the  size  of  DTN  forwarding
tables in a fashion similar to the Internet’s route aggregation in
CIDR  [6],  yet  allows  for  additional  flexibility  due  to  the
variable-length  substrings  allowed  between  the  hierarchy
delimiters.  Note that despite their similar appearance to DNS
names,  region  names  need  not  necessarily  be  resolved  to  any
form of address or resolved in a distributed hierarchy as DNS
names are.
The  second  portion  identifies  a  name  resolvable  within  the
specified region and need not be unique outside the region.  As
illustrated  in  the  figure,  it  may  be  of  arbitrary  structure  and
may  contain  special  symbols  resolvable  in  only  the  origin  or
destination  regions.    In  the  case  of  the  Internet,  for  example,
we could have the following tuple:
{internet.icann.int,  “http://www.ietf.org/oview.html”}
to 
This  tuple  would  refer  to  the  Internet  region  (in  some  yet-to-
be-defined  region  hierarchy),  along  with  an  Internet-specific
local identifier (in this case, a Universal Resource Identifier or
URI; see [13] for more details). As a message transits across a
(potentially  long  and  heterogeneous)  collection  of  regions,
only  its  region  identifier  is  used  for  routing.    Upon  reaching
the edge of the destination region, the entity name information
is  locally-interpreted,  and  translated  if  necessary,  into  a
protocol-standard  name  (or  address)  appropriate 
the
containing region.  This method of resolving names results in a
form of late binding for tuples in which only the portion of the
tuple immediately needed for message forwarding (the region
portion)  is  used  by  DTN  gateways.    By  not  imposing  any
particular fixed structure on the second portion of a tuple, any
reasonable naming scheme can be easily accommodated, even
unusual ones (e.g. treating only sensor aggregates as endpoints
as in [11]).  The concept of late binding has been used in other
systems.    For  example  in  [21],  it  is  used  primarily  for
supporting  anycast  where  a  location-independent  service
discovery operation is desired.
Late  binding  of  tuples  in  DTN  differs  from  the  DNS-style
Internet naming and addressing scheme which requires one or
more  DNS  transactions  to  complete  prior  to  the  start  of    an
Internet  end-to-end  conversation.    For  challenged  networks,
the  need  to  consult  a  name-to-address  mapping  that  may  be
resident only in the destination region seems impractical given
potentially large end-to-end delays.
The  choice  of  adopting  names  rather  than  addresses  as  the
basis for labeling participants in the end-to-end routing scheme
derives from an observation of recent trends in the operation of
the Internet.  The Internet design makes frequent reference to
resource  sharing  as  enabled  by  a  (distributed)  interprocess
control  mechanism.    Addresses  are  used  for  routing  and  for
referring  to  a  computational  resource  (i.e.  server  endpoint),
and naming is added to make the addressing easier for humans.
Today’s  Internet  includes  objects  such  as  search  engines  and
page  caches  which  are  used  extensively.    In  many  cases,  a
name  (in  the  form  of  a  URI  or  URL  web  address)  effectively
refers  to  a  query  for  data  rather  than  identification  of  a
particular end-system computational resource that provides it.
4.3 A Postal Class of Service
The  notion  of  a  challenged  network  inherently  implies  a
limitation  on  various  resources. 
  Priority-based  resource
allocation is therefore important to adopt in the overall model,
but  care  must  be  taken  to  avoid  so  burdensome  a  class  of
service  architecture  as  to  have  it  be  unimplementable  or
confusing  to  users.    The  approach  taken  here  is  to  adopt  a
subset  of  the  types  of  services  provided  by  the  US  Postal
Service.  This system has evolved to meet the needs of millions
of  users  exchanging  non-interactive  traffic  and  has  the  added
benefit of already being reasonably familiar to most users.  As
such, 
it  seems  a  highly  compelling  starting  point  for
considering the classes of service to be offered by a primarily
non-interactive networking architecture. 
Over its roughly 230 year history, the Post Office Department
(and the modern US Postal System of the last half-century) has
developed  a  remarkable  class  of  service  offering  associated
with the seemingly straightforward service of mail delivery.  In
addition to the basic delivery categories of first-class, priority,
express  mail,  parcel  post  and  “bound  printed  matter,”  a  large
variety  of  special  delivery  options  are  available.    As  anyone
who  has  utilized  these  special  delivery  operations  can  attest,
some  combinations  of  options  are  not  supported,  whereas
others  have  mutual  interdependence.    The  complexity  of  this
system seems too great as a basis for a network class of service
offering, as several of the options are not directly applicable to
a  data  network  (e.g.  air  delivery)  or  are  tied  to  financial
considerations  that  are  considered  to  be  out  of  scope  for  the
DTN design (e.g. insurance).  Yet the postal classes of service
are compelling due to their familiarity and long history.  In a
distilled  form,  therefore,  the  following  core  postal  services
seem  to  be  attractive  due  to  their  coarse  granularity  and
intuitive  character:  low,  ordinary,  and  high  priority  delivery;
notifications  of  mailing,  delivery  to  the  receiver  (return
receipt),  and  route  taken  (delivery  record).    The  model  is
extended  with  the  option  of  reliable  delivery  (somewhat  akin
to  careful  handling),  and  messages  requiring  this  service  are
handled  somewhat  differently  by  the  routing  system  in  that
they  require  persistent  storage  and  a  custody  transfer  at  each
routing hop (see below, Part 4.5).
toward 
their  destinations. 
4.4 Path Selection and Scheduling
The DTN architecture is targeted at networks where an end-to-
end routing path cannot be assumed to exist.  Rather, routes are
comprised  of  a  cascade  of 
time-dependent  contacts
(communication  opportunities)  used  to  move  messages  from
their  origins 
  Contacts  are
parameterized  by  their  start  and  end  times  (relative  to  the
source),  capacity,  latency,  endpoints,  and  direction. 
  In
addition,  a  measure  of  a  contact’s  predictability  can  help  to
choose  next-hop  forwarders  for  message  routing  as  well  as
select  the  next  message  to  be  sent.    The  predictability  of  a
route  exists  on  a  continuum  ranging  from  completely
predictable  (e.g.  wired  connection  or  a  periodic  connection
whose  phase  and  frequency  are  well-known)  to  completely
unpredicted  (an  “opportunistic”  contact  in  which  a  mobile
message  router  has  come  into  communication  range  with
another  DTN  node).    Note  that  the  measure  of  a  contact’s
predictability is sensitive to its direction.  For example, a dial-
up  connection  may  be  completely  predictable  from  the
initiator’s  point  of  view  while  being  completely  unpredicted
from the callee’s point of view.
The particular details of path selection and message scheduling
are  expected  to  be  heavily  influenced  by  region-specific
routing protocols and algorithms.  At this relatively early stage
of DTN development, several challenging problems have been
identified:  determination of the existence and predictability of
contacts,  obtaining  knowledge  of 
the  state  of  pending
messages given assumptions of high delay, and the problem of
efficiently  assigning  messages  to  contacts  and  determining
their  transmission  order.    While  very  simple  (e.g.  greedy)
heuristics  for  these  problems  can  be  implemented  without
excessive  problems,  each 
issue  represents  a  significant
challenge and remains as future work.  A linear programming
formulation of the (idealized) routing/scheduling problem with
contacts has been described recently in [1].
4.5 Custody Transfer and Reliability 
The  DTN  architecture  includes  two  distinct  types  of  message
routing nodes:  persistent (P) and non-persistent (NP).  P nodes
are  assumed  to  contain  nontrivial  amounts  of  persistent
message  store,  and  NP  nodes  might  not.    Unless  they  are
unable  or  unwilling  to  store  a  particular  message,  P  nodes
generally participate in custody transfer using the appropriate
transport  protocol(s)  of  the  containing  region.    A  custody
transfer refers to the acknowledged delivery of a message from
one  DTN  hop  to  the  next  and  the  corresponding  passing  of
reliable  delivery  responsibility.    Custody  transfer  is  akin  to
delegating responsibility for delivering postal mail to a person
or service that promises (or contracts) to do so.
The custody transfer concept is fundamental to the architecture
in  order  to  combat  potentially  high  loss  rates  and  to  relieve
potentially  resource-poor  end  nodes  from  responsibilities
related  to  maintaining  end-to-end  connection  state. 
  In
particular, end-nodes do not ordinarily need to keep a copy of
data that has been custodially transferred to a DTN next hop.
For  end  nodes  insisting  on  an  end-to-end  acknowledgment,  a
D T N
Application
DTN library + RPC
R
P
C
S
e
r
v
e
r
D T N  (Bundle) G a teway
Scheduling and Message Forwarding