### Security Assessment in Real Database Installations

#### Introduction
Each database installation represents a unique scenario, necessitating a set of generic tests to evaluate and measure security effectively. The results from these tests should not be used to compare different DBMSs directly.

#### General Steps for Security Assessment

1. **Identify Data Criticality Levels:**
   - Determine the maximum data criticality level required for each table.
   - Derive the appropriate security class that the DBMS should meet (refer to Table 1).
   - Conduct a detailed analysis of each table based on the nature of the stored data.

2. **Verify Available Security Mechanisms:**
   - Check which security mechanisms listed in Table 1 are provided by the DBMS.
   - This can be done through a detailed review of the DBMS administration manuals or based on field experience.
   - Ensure that the identified mechanisms meet specific requirements and are correctly configured.

3. **Analyze Configuration:**
   - Identify database users and the user who owns each table.
   - Determine system privileges granted to each user.
   - Identify the set of users with access privileges to each table (object privileges).

4. **Perform Security Tests:**
   - Execute tests for each security mechanism identified in step 2.
   - Perform these tests cautiously as they are conducted on live systems.
   - Use the tests in Table 7 to verify which security requirements in Table 2 are met, and determine the security class and SRF metric for the system.

#### Test Cases

**User Authentication and Password Management:**

1. **Create Users:**
   - Create the users `Owner`, `Client`, `PubMan`, and `OrderMan` with different passwords for each.
   
2. **Access Control:**
   - Confirm that it is not possible to access the file/table where usernames/passwords are stored.
   - If necessary, grant the `create session` privilege to each user.

3. **Password Encryption:**
   - Use a network scanner to confirm that passwords are encrypted during communication between clients and the server.
   - Using a DBA user, read the passwords from the file/table and confirm they are different from the original ones, indicating encryption.

4. **External Authentication:**
   - For each external authentication mechanism (e.g., operating system, Kerberos), create the same users with different passwords.
   - Confirm password encryption in communication between the DBMS and the authentication server.
   - Using an OS admin user, read the stored passwords and confirm they are different from the originals, indicating encryption.

**System and Object Privileges:**

1. **Implement System Privileges:**
   - Implement the system privileges schema defined in Table 5.
   - Create the tables defined by the data model in Figure 1.
   - Implement the object privileges schema defined in Table 4.

2. **Privilege Verification:**
   - Confirm that `Owner` cannot grant the `alter session` privilege to `Client`.
   - Confirm that `PubMan` cannot authorize `Client` to insert records into the `item` table.
   - Verify that `Owner`, `Client`, `PubMan`, and `OrderMan` cannot perform administrative tasks like creating or dropping users.
   - Ensure that these users cannot access the data dictionary.

**Data Encryption and Performance:**

1. **Data Communication Encryption:**
   - Insert some records into the `ADDRESS` table.
   - For each available encryption method, use a network scanner to confirm that the data transferred between the server and clients is not understandable.

2. **Performance Testing:**
   - Insert 100,000 records into the `CUSTOMER` table.
     - Measure the time to select all records without encryption.
     - For each encryption method, measure the selection time and calculate the overhead.
   - Insert 10 records into the `USER` table using each encryption mechanism.
     - Select all records and confirm the data is not understandable.
   - Implement a SQL script to insert 100,000 records into the `CREDIT_CARD` table:
     - Without encryption, measure the execution time.
     - With each encryption method, measure the execution time and calculate the overhead.
   - Implement a program to select 100,000 records from the `CREDIT_CARD` table:
     - Without encryption, measure the execution time.
     - With each encryption method, measure the execution time and calculate the overhead.

**Auditing:**

1. **Activate Auditing:**
   - Using a DBA user, activate auditing.
   - Using `OrderMan`, select all records from the `CREDIT_CARD` table.
   - Obtain the list of users who accessed the `CREDIT_CARD` table and confirm that `OrderMan` is included.

**Conclusion:**
- The proposed steps and test cases provide a comprehensive framework for assessing the security of real database installations.
- These tests help in verifying the effectiveness of security mechanisms and identifying areas for improvement.

---

This optimized version provides a clear and structured approach to the security assessment process, ensuring that each step and test case is well-defined and easy to follow.