title:HILTI: an Abstract Execution Environment for Deep, Stateful Network
Traffic Analysis
author:Robin Sommer and
Matthias Vallentin and
Lorenzo De Carli and
Vern Paxson
HILTI: An Abstract Execution Environment for
Deep, Stateful Network Trafﬁc Analysis
Robin Sommer
PI:EMAIL
ICSI / LBNL
Matthias Vallentin
UC Berkeley
PI:EMAIL
Lorenzo De Carli
University of
Wisconsin-Madison
PI:EMAIL
Vern Paxson
ICSI / UC Berkeley
PI:EMAIL
ABSTRACT
When developing networking systems such as ﬁrewalls, routers,
and intrusion detection systems, one faces a striking gap between
the ease with which one can often describe a desired analysis in
high-level terms, and the tremendous amount of low-level imple-
mentation details that one must still grapple with to come to a ro-
bust solution. We present HILTI, a platform that bridges this divide
by providing to application developers much of the low-level func-
tionality, without tying it to a speciﬁc analysis structure. HILTI
consists of two parts: (i) an abstract machine model that we tai-
lor speciﬁcally to the networking domain, directly supporting the
ﬁeld’s common abstractions and idioms in its instruction set; and
(ii) a compilation strategy for turning programs written for the ab-
stract machine into optimized, natively executable code. We have
developed a prototype of the HILTI compiler toolchain that fully
implements the design’s functionality, and ported exemplars of net-
working applications to the HILTI model to demonstrate the apt-
ness of its abstractions. Our evaluation of HILTI’s functionality
and performance conﬁrms its potential to become a powerful plat-
form for future application development.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Se-
curity and protection; C.2.3 [Computer-Communication Net-
works]: Network Operations—Network monitoring
General Terms
Measurement; Security
Keywords
Real-time monitoring; deep packet inspection; intrusion detection
1.
INTRODUCTION
Deep, stateful network packet inspection represents a crucial
building block for applications that analyze network trafﬁc. How-
ever, when developing systems such as ﬁrewalls, routers, and net-
work intrusion detection systems (NIDS), one faces a striking gap
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’14, November 5–7, 2014, Vancouver, BC, Canada.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3213-2/14/11 ...$15.00.
http://dx.doi.org/10.1145/2663716.2663735.
between the ease with which one can often describe the desired
analysis in high-level terms (“search for this pattern in HTTP re-
quests”), and the tremendous amount of low-level implementation
details that one must still grapple with to come to an efﬁcient and
robust implementation. When applications reconstruct a network’s
high-level picture from zillions of packets, they must not only oper-
ate efﬁciently to achieve line-rate performance under real-time con-
straints, but also deal securely with a stream of untrusted input that
requires conservative fail-safe processing. Despite such implemen-
tation challenges, our community sees little reuse of existing, well-
proven functionality across applications. While individual projects
invest signiﬁcant resources into optimizing their particular imple-
mentation, new efforts can rarely leverage the accumulated experi-
ence that such systems have garnered through years of deployment.
Not only do they end up building much of same functionality from
scratch each time, but they also tend to fall into the same pitfalls
that others had to master before.
In this work we set out to overcome this situation. We present
a novel platform for building network trafﬁc analysis applications
that provides much of the standard low-level functionality without
tying it to a speciﬁc analysis structure. Our system consists of two
parts: (i) an abstract machine model that we tailor speciﬁcally to
the networking domain, directly supporting the ﬁeld’s common ab-
stractions and idioms in its instruction set; and (ii) a compilation
strategy for turning programs written for the abstract machine into
optimized, natively executable code. Our abstract machine model
has at its core a high-level intermediary language for trafﬁc inspec-
tion (HILTI) that provides rich data structures, powerful control
ﬂow primitives, extensive concurrency support, a secure memory
model protecting against unintended control and data ﬂows, and
potential for domain-speciﬁc optimizations that include transpar-
ent integration of non-standard hardware capabilities. Conceptu-
ally, HILTI provides a middle-layer situated between the operating
system and a host application, operating invisibly to the applica-
tion’s end-users who do not directly interact with it. An applica-
tion leverages HILTI by compiling its analysis/functionality from
its own high-level description (like a ﬁrewall’s rules or a NIDS’s
signature set) into HILTI code. HILTI’s compiler then translates it
further down into native code.
We have developed a prototype of the HILTI compiler toolchain
that fully supports all of the design’s functionality, and we have
ported a set of example networking applications to the HILTI ma-
chine model that demonstrate the aptness of its abstractions, includ-
ing the BinPAC protocol parser generator [36] and Bro’s scripting
language [37]. Even though performance does not yet represent a
particular focus of the prototype’s code generator, our evaluation
with real-world network trafﬁc shows that already the compiled
code executes with generally similar performance as native imple-
461Figure 1: Building blocks of network trafﬁc applications and how HILTI supports them.
mentations, with the potential to signiﬁcantly outperform them in
the future as we further optimize the toolchain. We are releasing
both HILTI and our example applications as open-source software
to the community [6].
As one of HILTI’s overarching objectives we aim to build a plat-
form that integrates much of the knowledge that the networking
community has collected over decades into a single framework for
applications to build upon. While in this work we focus on the low-
level machine model, we envision HILTI to eventually ship with
an extensive library of reusable higher-level components, such as
packet reassemblers, session tables with built-in state management,
and parsers for speciﬁc protocols. By providing both the means
to implement such components as well as the glue for their inte-
gration, HILTI can allow application developers to focus on their
core functionality, relieving them from low-level technical work
that others have previously implemented.
We structure the remainder of this paper as follows. We motivate
our work in §2 by examining the potential for sharing functionality
across networking applications. We present HILTI’s design in §3
and showcase four example applications in §4. We discuss our im-
plementation in §5, and then evaluate HILTI in §6. We discuss
some broader aspects in §7, and summarize related work in §8. We
conclude in §9.
2. SHARING FUNCTIONALITY
routers,
switches,
stateful ﬁrewalls,
Internally, different types of networking applications—packet
ﬁlters,
intrusion detec-
tion systems, network-level proxies, and even OS-level packet
processing—all exhibit a similar structure that builds on a com-
mon set of domain-speciﬁc idioms and components.1 Implement-
ing such standard functionality is not rocket science. However,
experiences with developing robust and efﬁcient monitoring sys-
tems reveal that coming to correct and memory-safe code quickly
proves challenging—much more than one might intuitively expect.
It is, hence, unfortunate that in contrast to other domains, where
communities have developed a trove of reusable standard func-
tionality (e.g., HPC or cryptography), we ﬁnd little sharing across
networking systems—not even in the open-source world. We ex-
amined the code of three open-source networking applications of
different types: iptables (ﬁrewall), Snort (NIDS), and XORP (soft-
ware router). All three implement their own versions of standard
data structures with state management, support for asynchronous
1To simplify terminology, throughout our discussion we use the
term “networking application” to refer to a system that processes
network packets directly in wire format. We generally do not con-
sider other applications that use higher-level interfaces, such as
Unix sockets. While these could beneﬁt from HILTI as well, they
tend to have different characteristics that exceed the scope here.
execution, logic for discerning IPv4 and IPv6 addresses, and proto-
col inspection. We also compared the source code of the three ma-
jor open-source NIDS implementations (Bro, Snort, and Suricata),
and we found neither any signiﬁcant code reuse across these sys-
tems, nor leveraging of much third-party functionality. libpcap
and libz are the only external libraries to which they all link. In
addition, Snort and Suricata both leverage PCRE for regular ex-
pression matching, while Bro implements its own engine. Indeed,
in a panel discussion at RAID 2011 all three projects acknowledged
the lack of code reuse, attributing it to low-level issues concerning
program structures and data ﬂows.
From our source code analysis we identify a number of com-
mon building blocks for networking applications, as illustrated in
Figure 1:
Domain-speciﬁc Data Types. Networking applications use a
set of domain-speciﬁc data types for expressing their analysis, such
as IP addresses, transport-layer ports, network preﬁxes, and time.
HILTI’s abstract machine model provides these as ﬁrst-class types.
State Management. Most applications require long-lived state,
as they correlate information across packet and session bound-
aries. However, managing that state in real-time requires effec-
tive expiration strategies [16]. HILTI provides container types with
built-in state management, and timers to schedule processing asyn-
chronously into the future, e.g., for customized cleanup tasks or
time-driven logic.
Concurrent Analysis. High-volume network trafﬁc exhibits
an enormous degree of inherent parallelism [38], and applications
need to multiplex their analyses across potentially tens of thou-
sands of data ﬂows, either inside a single thread or parallelized
across multiple CPUs. High-performance applications employ the
latter only sparingly today, as it remains challenging to parallelize
stateful analysis efﬁciently across threads while maintaining lin-
ear scaling with the workload size. HILTI supports both forms of
parallelism by (i) enabling transparent incremental processing, and
(ii) providing a concurrency model that employs cooperative mul-
titasking to supply applications with a large number of lightweight
threads with well-deﬁned semantics.
Real-time Performance. With 10 Gbps links now standard even
in medium-sized environments, applications deal with enormous
packet volumes in real-time. In addition to supporting parallel pro-
cessing, HILTI compiles analyses into native executables with the
potential for extensive domain-speciﬁc code optimization.
Robust & Secure Execution. Networking applications process
untrusted input: attackers might attempt to mislead a system, and—
more mundanely— real-world trafﬁc contains plenty “crud” [37]
not conforming to any RFC. While writing robust C code remains
notoriously difﬁcult, HILTI’s abstract machine model provides a
contained, well-deﬁned, and statically typed environment that, for
example, prevents code injection attacks.
Domain-speciﬁc data typesState managementConcurrent analysisReal-time performanceRobust executionHigh-level componentsBuilt-in ﬁrst-class networking typesContainers with state management supportAsynchronous and timer-driven executionDomain-speciﬁc concurrency modelIncremental processingCompilation to native codeExtensive optimization potentialContained execution environmentStatic type systemPlatform for building reusable functionalityHILTI EnvironmentTrafﬁc Analysis Building Blocks462Figure 2: Workﬂow for using HILTI.
# cat hello.hlt
module Main
import Hilti
void run() { # Default entry point for execution.
call Hilti::print("Hello, World!")
}
# hilti-build hello.hlt -o a.out && ./a.out
Hello, World!
Figure 3: Building a simple HILTI program.
High-level Standard Components. HILTI facilitates reuse of
higher-level functionality across applications by providing both
(i) a lingua franca for expressing their internals, and (ii) exten-
sive interfaces for integration and customization across both host
applications and other HILTI-based components.
3. HILTI ABSTRACT MACHINE MODEL
The heart of HILTI consists of an abstract machine model that
we tailor to network trafﬁc analysis. In the following we discuss
HILTI’s design in more detail. For brevity we will use the name
HILTI for both the abstract machine model itself as well as for the
framework that implements it, i.e., the compiler toolchain and run-
time library.
3.1 Workﬂow
Figure 2 shows the overall workﬂow when using HILTI. A host
application leverages HILTI for providing its functionality. Typ-
ically, the host application has a user-supplied analysis speciﬁca-
tion that it wants to instantiate; e.g., the set of ﬁltering rules for a
ﬁrewall, or the set of signatures for a NIDS. The application pro-
vides a custom analysis compiler that translates its speciﬁcations
into HILTI machine code, either in the form of text ﬁles or, more
conveniently, as an in-memory AST representation it creates via
a corresponding C++ API that HILTI provides. In either case the
HILTI compiler then compiles that input into bitcode for LLVM (the
Low-Level Virtual Machine [30]), which we leverage for all target-
speciﬁc code generation. The HILTI compiler also generates a set
of C stubs for the host application to interface with the resulting
code. Finally, LLVM combines compiled code, stubs, runtime li-
brary, and the host application into a single unit of native machine
code for execution, either statically or just-in-time at startup (JIT).
Our prototype includes two tools, hiltic and hilti-build,
which employ this workﬂow to compile HILTI code into native
objects and executables, respectively. Figure 3 shows an example
compiling a trivial HILTI program into a static binary. Alterna-
tively, hiltic can JIT-execute the source directly.
Generally, there are two ways to structure a host application.
First, the HILTI code can be the main entry point to the execu-
tion, with the application providing additional functionality via fur-
ther C-level functions called out to as necessary as if using an ex-
ternal library; Figure 3 demonstrates this model by deﬁning the
Main::run() as the entry point. Alternatively, the host appli-
cation itself can drive execution and leverage HILTI-based func-
tionality by calling the generated C stubs on demand (e.g., a NIDS
might feed payload into a HILTI-based protocol parser; see §4).
3.2 Execution Model
Syntax. To keep the syntax simple we model HILTI’s in-
struction set after register-based assembler languages. A pro-
gram consists of a series of instructions of the general form
 =    , with target/-
operands omitted where not needed. In addition, there exist prim-
itives to deﬁne functions, custom data types, and local and thread-
local variables (but no truly global; see below). By convention,
mnemonics have the form ., where
the same prefix indicates a related set of functionality; Table 1
summarizes the available groups. For data types in particular,
 refers to the type and the ﬁrst operand to the manip-
ulated instance, e.g., list.append l 42, appends the integer
42 to the speciﬁed list l. In total HILTI currently offers about 200
instructions (counting instructions overloaded by their argument
types only once). Generally, we deliberately limit syntactic ﬂex-
ibility to better support compiler transformations because HILTI
mainly acts as compiler target, and not a language that users write
code for directly.
Rich Data Types. While being parsimonious with syntax, we
equip HILTI with a rich set of high-level data types relevant to the
networking domain. First, HILTI features standard atomic types
such as integers, character sequences (with separate types for Uni-
code strings and raw bytes), ﬂoating-point, bitsets, enums, and stat-
ically typed tuples. In addition, HILTI comes with domain-speciﬁc
types such as IP addresses (transparently supporting both IPv4 and
IPv6), CIDR-style subnet masks, transport-layer ports, and times-
tamp / time interval types with nanosecond resolution. All these
types provide crucial context for type checking, optimization, and
data ﬂow/dependency analyses. Second, HILTI offers a set of high-
level container types (lists, vectors, sets, maps) that come with
built-in support for state management that automatically expires
elements according to a given policy. Iterators, along with over-
loaded operators, provide type-safe generic access to container ele-
ments. Further domain-speciﬁc types include overlays for dissect-
ing packet headers into their components; channels for transfer-
ring objects between threads; classiﬁers for performing ACL-style
Application CoreAnalysis CompilerAnalysis SpeciﬁcationHILTI Machine CodeRuntime LibraryHILTI CompilerLLVM BitcodeLLVM Compiler/LinkerNative Machine CodeHILTI Machine EnvironmentLLVM ToolchainHost ApplicationC Interface Stubs463packet classiﬁcation; regular expressions supporting incremental
matching and simultaneous matching of multiple expressions; in-
put sources for accessing external input (e.g., network interfaces
and trace ﬁles); timer managers for maintaining multiple indepen-
dent notions of time [43]; and ﬁles for interacting with the ﬁle sys-
tem.
Memory Model. HILTI’s memory model is statically type-safe,
with containers, iterators, and references parameterized by type. A
new instruction makes dynamic allocations explicit. The HILTI
runtime automatically garbage-collects objects that have become
no longer accessible.
Control Flow and Concurrency. For ﬂexible control ﬂow,
HILTI provides timers to schedule function calls to the future; clo-
sures for capturing function calls; exceptions for robust error han-