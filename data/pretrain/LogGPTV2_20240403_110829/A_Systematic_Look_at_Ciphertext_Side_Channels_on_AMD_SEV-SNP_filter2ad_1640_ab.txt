the VM’s memory pages are always stored in encrypted form,
and the VM encryption keys are guarded by the AMD-SP.
SEV adopts a 128-bit AES encryption with the XOR-Encrypt-
XOR (XEX) encryption mode, which incorporates a physical
address-speciﬁc tweak such that
the same plaintext yields
different ciphertexts for each memory location. However, for
a ﬁxed address, an identical plaintext always yields the same
ciphertext.
Nested Page Tables (NPT) and the page fault controlled
channel. When SEV is enabled, the address translation be-
tween the VM’s guest physical addresses and the host physical
addresses is managed by the hypervisor with the help of a
NPT, which is a two-layer page table consisting of a Guest
Page Table (GPT) and a Nested Page Table (NPT). The GPT
is managed inside the guest VM and thus protected by the VM
encryption key. The NPT is solely managed by the hypervisor.
As shown in prior work [24], [30], [35], the hypervisor can
leverage the control over the NPT to intercept the execution of
the guest with page granularity. To achieve this, the hypervisor
can unset the Present bit (P bit) in the NPT. The next time
the VM tries to access the corresponding guest physical page,
a nested page fault (NPF) will be generated, revealing the
addresses of the access and the causes.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:55:46 UTC from IEEE Xplore.  Restrictions apply. 
2338
SEV extensions. Two extensions of SEV have been introduced
by AMD to add additional security protections since SEV’s
ﬁrst release in 2016.
The second generation of SEV is called SEV-ES (Encrypted
State) [21], which was ﬁrst introduced in 2017. SEV-ES adds
additional protection for CPU registers. Prior to SEV-ES,
CPU registers were stored unencrypted in the Virtual Ma-
chine Control Block (VMCB) during world switches from the
VM to the hypervisor (VMEXIT). In SEV-ES, the hardware
automatically encrypts the registers in a designated Virtual
Machine Save Area (VMSA) along with additional integrity
protection. In addition, a guest-host communication protocol
was introduced for instructions that need to expose regis-
ters to the hypervisor (e.g., CPUID, RDMSR, etc.). A VMM
Communication handler (#VC handler) inside the guest VM
assists the instruction emulation. Speciﬁcally, the #VC handler
intercepts those instructions with the help of hardware, passes
necessary register values to a shared area called Guest-Host
Communication Block (GHCB), triggers a special VMEXIT
by the VMGEXIT instruction, and reads the resulting register
values from the GHCB afterwards.
The third generation of SEV is called SEV-SNP (Secure
Nested Paging) [4], which was released in 2020. As a re-
sponse to attacks which used remapping or modiﬁcation of
guest memory in order to inject code into the VM [35], a
structure called Reverse Map Table (RMP) was introduced.
It maintains a second translation of host physical addresses
to guest physical addresses as well as keeps track of the
ownership of memory pages, and thus, prevents the hypervisor
from modifying or remapping the guest VM’s private memory.
Most of the existing attacks against SEV and SEV-ES can be
mitigated by SEV-SNP (Section VIII).
B. Ciphertext Attacks against SEV-SNP
Ciphertext attacks against SEV-SNP were ﬁrst introduced
by Li et al.
in CIPHERLEAKS [26]. The work exploited
leakage caused by the ciphertext of the registers inside the
VMSA. Speciﬁcally, by inspecting the ciphertext stored in
the VMSA during VMEXITs, an attacker could (1) infer the
execution state of a known binary inside the guest VM, and
(2) build a ciphertext-plaintext mapping for certain registers.
For example, the ciphertext of the RAX register could reveal
the return value of function calls. Since the ciphertext was
deterministic, functions that returned the same value produced
an identical ciphertext for the RAX register inside the VMSA,
which is sufﬁcient for the attacker to distinguish secret-related
data content and steal secrets from an application using the
OpenSSL library.
In response to that attack, AMD added additional random-
ization when encrypting and saving register values into the
VMSA during VMEXITs [6]. Thus,
the ciphertext of the
register state is now completely different even if the register
values inside CPU did not change between two VMEXITs,
which fully mitigates the CIPHERLEAKS attacks.
C. Off-chip Attacks
Off-chip attacks are usually classiﬁed into stolen DIMM at-
tacks and bus snooping attacks. Stolen DIMM attacks directly
grab data from the Non-Volatile Memory (NVM) or perform
cold boot attacks on volatile memory [32]. Bus snooping
attacks target the data transmission between two components
of the computer (e.g., CPU and DRAM). These attacks involve
both data eavesdropping and even data altering [12].
Off-chip attacks are also considered as one of the potential
attacks in a TEE’s threat model [4]. While the plaintext
is protected inside the chip and can hardly be inspected,
all data outside the CPU might be inspected, either on the
external memory buses or on the NVM. TEEs like Intel SGX
and AMD SEV protect data outside the CPU by an in-chip
memory encryption engine. While it is widely accepted that
attacks by monitoring the data bus ﬂow can be thwarted by
memory encryption [33], researchers move their attention to
the unencrypted address bus [12]. Recent results [23], [31]
showed that an attacker could recover some data by monitoring
memory address patterns. For those attacks, an interposer is
needed to be installed on the DIMM socket. The interposer
can duplicate signals on the memory bus and pass the data to
a signal analyzer on the ﬂy with CPU cycle granularity.
D. Operating System Context Switch
Under x86 64, there are four different privilege levels that
can be used to implement a hierarchy in the software [3, Sec.
4.9.1]. Under Linux, ring 0 is used to run the kernel, while
ring 3 is used to run user space applications. When a privilege
level change occurs, e.g. due to an interrupt or exception,
the CPU automatically switches to a separate stack and ﬁlls
it with some information about the previous software. The
stacks are conﬁgured in the Task State Segment (TSS). The
register values, however, remain unchanged and are not stored
by a hardware mechanism [3, Sec. 12.2.5]. Under Linux, one
TSS per CPU is used, meaning that each CPU has its own
set of stacks. Most Interruptd/Exception handlers use TSS
managed as an entry point to intialy store the register values,
before eventually copying them to the so-called thread stack.
The thread stack is part of the Process Control Block (PCB,
also called task_struct in Linux), a data structure that
bundles all information related to a process/thread. The saved
registers are referred to as the pt_regs structure, which
simply consists of the register values stored next to each other.
Note that in other scenarios a context switch is also used
to describe a switch between different processes and threads.
In this work, we always refer to the aforementioned privilege
level change if not stated otherwise.
III. A GENERIC CIPHERTEXT SIDE CHANNEL
In this section, we are going to show that the ciphertext-
based attack demonstrated in the CIPHERLEAKS paper is not
limited to the VMSA register storage mechanism of SEV-
SNP, but applies to any deterministically encrypted memory.
We deﬁne a generic attacker model and show two primitives
that allow the attacker to infer memory contents and runtime
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:55:46 UTC from IEEE Xplore.  Restrictions apply. 
3339
behavior of any application which relies on deterministically
encrypted memory for protecting the conﬁdentiality.
A. Attacker Model
We consider the standard threat model of conﬁdential VM:
The attacker has both software and physical access to the
system, i.e., they have unrestricted administrator capabilities
and can physically access the machine. The conﬁdential VM
shields the VM’s secrets from the attacker by encrypting the
memory consumed by the user’s application, using a deter-
ministic memory encryption scheme with an address-based
tweak, such that the ciphertext depends on the encryption key,
the plaintext and the current physical address. Speciﬁcally, we
target SEV-SNP, which also prevents the attacker from remap-
ping memory containing ciphertext to other physical addresses,
denies them write access to any encrypted memory, but leaves
the attacker the ability to read ciphertext by software.
B. Attack Primitives
We suggest two general methods for exploiting deterministic
memory encryption: A dictionary attack and a collision attack.
Dictionary attack. A dictionary attack is applicable when a
secret-dependent variable features a small, predictable value
range with a ﬁxed memory address. In this case, the attacker
can build a dictionary of ciphertext-plaintext mappings for
this variable and selectively recover the plaintext. This is a
generalization of the approach taken in the CIPHERLEAKS
attack, where the authors learned ciphertext mappings for the
registers stored in the VMSA.
Contrary to CIPHERLEAKS, the dictionary attack targets
arbitrary memory locations and variable types. Two exam-
ples about recovering ECDSA key using stack variables
(Section V-A), or registers stored during a context switch
(Section IV) are presented. While this attack is quite powerful,
it is restricted by the number of possible plaintexts for a
given encryption block, since the attacker cannot tell which
part of the plaintext has changed when observing a new
ciphertext. If the targeted variable shares an encryption block
with other variables which get new values frequently (e.g., a
loop counter), the number of possible plaintexts becomes too
large to efﬁciently build a mapping, as is illustrated in Figure 1.
We use this fact in Section VI-B to propose a countermeasure
which appends random nonces to small variables.
Collision attack. A collision attack transfers the concept of
secret dependent code execution to memory writes. In secret-
dependent branching, the attacker exploits that the targeted
algorithm executes a certain code region depending on spe-
ciﬁc values of a secret value (e.g., an if statement checking
key bits). By observing the access pattern to the respective
code chunks, the attacker can learn the secret. A common
countermeasure is so-called constant-time code, i.e. code that
always exhibits the same control ﬂow and memory accesses,
independent of the secret. This is usually achieved by convert-
ing secret-dependent branch decisions into ﬁxed expressions,
which compute all possible results of a given operation and
Figure 1: Encryption block conﬁgurations with different ex-
ploitability by the dictionary attack. In the ﬁrst scenario (a),
most of the block’s plaintext
is constant, with the secret
being the only variable. Thus, the attacker can build a one-
to-one mapping of ciphertexts to secrets. In (b), the block
also contains a loop counter i, so there are many different
ciphertexts mapping to the same secret. If the attacker can
always observe the secret for a speciﬁc ﬁxed value of i, they
may still be able to build a dictionary, as this is equivalent to
scenario (a). In the last scenario (c), the secret is followed by a
random nonce which is regenerated before spilling secret to the
memory. This prevents the attacker from creating a dictionary,
as he never observes the same ciphertext twice.
then use a mask to pick the desired one. One such primitive is
the constant time swap CSWAP (Algorithm 1), which is used
for example by the Montgomery ladder: CSWAP takes two
variables a and b and a (secret) decision bit c. If the bit is
set, the values of a and b are swapped; if the bit is cleared,
a and b remain unchanged. The depicted code gadget always
executes the same amount of instructions in the same order,
and always accesses the same memory addresses, making it
resistant against microarchitectural side-channel attacks.
But, if the attacker is able to observe whether the values
of a or b change, they can immediately learn the decision bit
ci. The collision attack again exploits the fact that ciphertext
blocks are deterministic. However, contrary to the dictionary
attack, the attacker does not aim to learn the direct map-
ping of ciphertexts to actual plaintext values, but they only
check whether certain ciphertexts repeat or change. Going
even further, if the attacker knows that a memory write was
executed (e.g., through a control ﬂow side-channel), but they
do not see any ciphertext change, they learn that the instruction
wrote the same value as was present in memory before. Given
knowledge of the executed program, they may use this to infer
more information other than the traditional control ﬂow.
IV. LEAKAGE DUE TO CONTEXT SWITCH
We now take the dictionary attack primitive from Section III
and show how it can be used for extracting register values from
a VM running with SEV-SNP. After CIPHERLEAKS, AMD
published a ﬁrmware patch which added protection to the
VMSA area [6]. However, the VM-hypervisor world switch
is not the only occasion where the entire register state is
written to memory. When moving from user space to kernel
space (e.g., after an interrupt or an exception), the Linux
kernel pushes all register values of the user program onto
the stack, and then copies those into the PCB of the current
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:55:46 UTC from IEEE Xplore.  Restrictions apply. 
4340
128-bitEncryptionBlocks-SecretnonceiiSecret--Secret-(a)(b)(c)UnchangedChangeableAlgorithm 1 Constant time swap
Require: Byte arrays a, b of same length and decision bit c
1: procedure CSWAP(a, b, c)
(cid:46) 0 − 1 underﬂows to 0xﬀ
2:
3:
4:
5:
6:
7:
8:
9: end procedure
x ← a[i] ⊕ b[i]
x ← x & mask
a[i] ← a[i] ⊕ x
b[i] ← b[i] ⊕ x
mask ← 0 − c
for i = 0 to i = length(a) do
end for
thread, such that the exception handler can access the register
values through the pt_regs structure. The PCB address is
ﬁxed per-thread, allowing an attacker to build a dictionary
of register values by causing repeated interrupts within the
VM and observing the resulting ciphertexts. We show how an
attacker can use nested page faults to indirectly trigger internal
user-kernel context switches and use the learned register
values to attack the constant-time ECDSA implementation of
OpenSSL. Given their source code, similar attacks should also
be applicable in WolfSSL, GnuTLS, OpenSSH, and libgcrypt.
A. Leaking Register Values via Context Switches
Forcing context switches in the VM. SEV-SNP restricts the
hypervisor’s ability to inject interrupts and exceptions into the
VM, so we will show how a malicious hypervisor can work
around this limitation by forcing the VM to pause at a certain
execution point until a “natural” internal context switch is
triggered, which should also be detectable by the hypervisor.
First, the hypervisor interrupts the targeted application at
certain execution points by using the well-known page fault
controlled channel, that allows the attacker to force a NPF
when the VM tries to access or execute a given page. However,
the NPF itself does not lead to a context switch inside the
VM, as it is immediately intercepted by the hypervisor. To
do so, the hypervisor now simply waits for a short amount
of time and then resumes the VM without handling the
NPF. As a result, the attacker can trap the execution of the
targeted program and the victim application cannot resume its
execution. After a short amount of waiting time, a time-driven
internal context switch will be performed by the guest OS,
which updates the victim application’s register values in main
memory (pt_regs).
Even though the internal context switch is out of the
hypervisor’s control, we show that the VM-host interaction
mechanism adopted by SEV can work as an indicator of
a ﬁnished context switch. Speciﬁcally, we observed that
the guest VM has frequent interaction with the hypervisor
through reading and writing hypervisor-managed registers of
the Advanced Programmable Interrupt Controller (APIC), like
IA32_X2APIC_TMR1, which are used for scheduling and
timekeeping. These RDMSR and WRMSR accesses result in a
special exception called #VC exception inside the VM, as they
(a) #VC handler
(b) VMPL0 emulation
Figure 2: Workﬂow of how #VC exceptions are handled. Red
arrows represent a context switch between processes.
require the VM to share registers with the hypervisor. The #VC
exception handler inside the VM then calls VMGEXIT after
putting the necessary register values into the GHCB (shown
in Figure 2a). As the #VC exception is handled in VM’s kernel
space, a VMGEXIT also indicates a user-kernel context switch.
Thus, the hypervisor simply waits for a VMGEXIT with the
appropriate exit code, as an indicator of updated registers’
ciphertext in pt_regs. We analyze the necessary pause time
for triggering a VMGEXIT in Section IV-D.
Other than the traditional #VC handler mechanism, SEV-
SNP has another option to adopt a more secure VM-host
communication mechanism that moves the APIC emulation
into the trust domain of the guest VM. As shown in Figure 2b,
the VM is divided into multiple Virtual Machine Privilege