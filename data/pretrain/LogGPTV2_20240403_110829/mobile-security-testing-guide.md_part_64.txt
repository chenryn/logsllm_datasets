UIWebView
$ rabin2 -zz ./WheresMyBrowser | egrep "UIWebView$"
489 0x0002fee9 0x10002fee9 9 10 (5.__TEXT.__cstring) ascii UIWebView
896 0x0003c813 0x0003c813 24 25 () ascii @_OBJC_CLASS_$_UIWebView
1754 0x00059599 0x00059599 23 24 () ascii _OBJC_CLASS_$_UIWebView
WKWebView
$ rabin2 -zz ./WheresMyBrowser | egrep "WKWebView$"
490 0x0002fef3 0x10002fef3 9 10 (5.__TEXT.__cstring) ascii WKWebView
625 0x00031670 0x100031670 17 18 (5.__TEXT.__cstring) ascii unwindToWKWebView
904 0x0003c960 0x0003c960 24 25 () ascii @_OBJC_CLASS_$_WKWebView
1757 0x000595e4 0x000595e4 23 24 () ascii _OBJC_CLASS_$_WKWebView
Alternatively you can also search for known methods of these WebView classes. For example, search for the method
used to initialize a WKWebView ( init(frame:configuration:) ):
$ rabin2 -zzq ./WheresMyBrowser | egrep "WKWebView.*frame"
0x5c3ac 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC
0x5d97a 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO
0x6b5d5 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC
0x6c3fa 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO
You can also demangle it:
$ xcrun swift-demangle __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO
---> @nonobjc __C.WKWebView.init(frame: __C_Synthesized.CGRect,
configuration: __C.WKWebViewConfiguration) -> __C.WKWebView
Testing JavaScript Configuration
First of all, rememeber that JavaScript cannot be disabled for UIWebVIews .
For WKWebView s, as a best practice, JavaScript should be disabled unless it is explicitly required. To verify that
JavaScript was properly disabled search the project for usages of WKPreferences and ensure that the
javaScriptEnabled property is set to false :
let webPreferences = WKPreferences()
webPreferences.javaScriptEnabled = false
If only having the compiled binary you can search for this in it:
$ rabin2 -zz ./WheresMyBrowser | grep -i "javascriptenabled"
391 0x0002f2c7 0x10002f2c7 17 18 (4.__TEXT.__objc_methname) ascii javaScriptEnabled
392 0x0002f2d9 0x10002f2d9 21 22 (4.__TEXT.__objc_methname) ascii setJavaScriptEnabled:
If user scripts were defined, they will continue running as the javaScriptEnabled property won't affect them. See
WKUserContentController and WKUserScript for more information on injecting user scripts to WKWebViews.
Testing for Mixed Content
In contrast to UIWebView s, when using WKWebView s it is possible to detect mixed content (HTTP content loaded from
a HTTPS page). By using the method hasOnlySecureContent it can be verified whether all resources on the page have
been loaded through securely encrypted connections. This example from [#THIEL] (see page 159 and 160) uses this
469
iOS Platform APIs
to ensure that only content loaded via HTTPS is shown to the user, otherwise an alert is displayed telling the user that
mixed content was detected.
In the compiled binary:
$ rabin2 -zz ./WheresMyBrowser | grep -i "hasonlysecurecontent"
# nothing found
In this case, the app does not make use of this.
In addition, if you have the original source code or the IPA, you can inspect the embedded HTML files and verify that
they do not include mixed content. Search for http:// in the source and inside tag attributes, but remember that this
might give false positives as, for example, finding an anchor tag  that includes a http:// inside its href
attribute does not always present a mixed content issue. Learn more about mixed content in Google's Web
Developers guide.
Dynamic Analysis
For the dynamic analysis we will address the same points from the static analysis.
Enumerating WebView instances
Checking if JavaScript is enabled
Verifying that only secure content is allowed
It is possible to identify WebViews and obtain all their properties on runtime by performing dynamic instrumentation.
This is very useful when you don't have the original source code.
For the following examples, we will keep using the "Where's My Browser?" app and Frida REPL.
Enumerating WebView Instances
Once you've identified a WebView in the app, you may inspect the heap in order to find instances of one or several of
the WebViews that we have seen above.
For example, if you use Frida you can do so by inspecting the heap via "ObjC.choose()"
ObjC.choose(ObjC.classes['UIWebView'], {
onMatch: function (ui) {
console.log('onMatch: ', ui);
console.log('URL: ', ui.request().toString());
},
onComplete: function () {
console.log('done for UIWebView!');
}
});
ObjC.choose(ObjC.classes['WKWebView'], {
onMatch: function (wk) {
console.log('onMatch: ', wk);
console.log('URL: ', wk.URL().toString());
},
onComplete: function () {
console.log('done for WKWebView!');
}
});
ObjC.choose(ObjC.classes['SFSafariViewController'], {
onMatch: function (sf) {
console.log('onMatch: ', sf);
},
470
iOS Platform APIs
onComplete: function () {
console.log('done for SFSafariViewController!');
}
});
For the UIWebView and WKWebView WebViews we also print the assotiated URL for the sake of completion.
In order to ensure that you will be able to find the instances of the WebViwes in the heap, be sure to first navigate to
the WebView you've found. Once there, run the code above, e.g. by copying into the Frida REPL:
$ frida -U com.authenticationfailure.WheresMyBrowser
# copy the code and wait ...
onMatch: >
URL:  {
URL: file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/
Library/UIWebView/scenario1.html, Method GET, Headers {
Accept = (
"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
);
"Upgrade-Insecure-Requests" = (
1
);
"User-Agent" = (
"Mozilla/5.0 (iPhone; CPU iPhone ... AppleWebKit/604.3.5 (KHTML, like Gecko) Mobile/..."
);
} }
Now we quit with q and open another WebView ( WKWebView in this case). It also gets detected if we repeat the
previous steps:
$ frida -U com.authenticationfailure.WheresMyBrowser
# copy the code and wait ...
onMatch: >
URL: file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/
Library/WKWebView/scenario1.html
We will extend this example in the following sections in order to get more information from the WebViews. We
recommend to store this code to a file, e.g. webviews_inspector.js and run it like this:
$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js
Checking if JavaScript is Enabled
Remember that if a UIWebView is being used, JavaScript is enabled by default and there's no possibility to disable it.
For WKWebView , you should verify if JavaScript is enabled. Use javaScriptEnabled from WKPreferences for this.
Extend the previous script with the following line:
ObjC.choose(ObjC.classes['WKWebView'], {
onMatch: function (wk) {
console.log('onMatch: ', wk);
console.log('javaScriptEnabled:', wk.configuration().preferences().javaScriptEnabled());
//...
}
});
471
iOS Platform APIs
The output shows now that, in fact, JavaScript is enabled:
$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js
onMatch: >
javaScriptEnabled: true
Verifying that Only Secure Content is Allowed
UIWebView 's do not provide a method for this. However, you may inspect if the system enables the "Upgrade-
Insecure-Requests" CSP (Content Security Policy) directive by calling the request method of each UIWebView
instance ("Upgrade-Insecure-Requests" should be available starting on iOS 10 which included a new version of
WebKit, the browser engine powering the iOS WebViews). See an example in the previous section "Enumerating
WebView Instances".
For WKWebView 's, you may call the method hasOnlySecureContent for each of the WKWebView s found in the heap.
Remember to do so once the WebView has loaded.
Extend the previous script with the following line:
ObjC.choose(ObjC.classes['WKWebView'], {
onMatch: function (wk) {
console.log('onMatch: ', wk);
console.log('hasOnlySecureContent: ', wk.hasOnlySecureContent().toString());
//...
}
});
The output shows that some of the resources on the page have been loaded through insecure connections:
$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js
onMatch: >
hasOnlySecureContent: false
Testing WebView Protocol Handlers (MSTG-PLATFORM-6)
Overview
Several default schemes are available that are being interpreted in a WebView on iOS, for example:
http(s)://
file://
tel://
WebViews can load remote content from an endpoint, but they can also load local content from the app data directory.
If the local content is loaded, the user shouldn't be able to influence the filename or the path used to load the file, and
users shouldn't be able to edit the loaded file.
Use the following best practices as defensive-in-depth measures:
Create a whitelist that defines local and remote web pages and URL schemes that are allowed to be loaded.
Create checksums of the local HTML/JavaScript files and check them while the app is starting up. Minify
472
iOS Platform APIs
JavaScript files "Minification (programming)") to make them harder to read.
Static Analysis
Testing how WebViews are loaded
Testing WebView file access
Checking telephone number detection
Testing How WebViews are Loaded
If a WebView is loading content from the app data directory, users should not be able to change the filename or path
from which the file is loaded, and they shouldn't be able to edit the loaded file.
This presents an issue especially in UIWebView s loading untrusted content via the deprecated methods
loadHTMLString:baseURL: or loadData:MIMEType:textEncodingName:baseURL: and setting the baseURL parameter to
nil or to a file: or applewebdata: URL schemes. In this case, in order to prevent unauthorized access to local
files, the best option is to set it instead to about:blank . However, the recommendation is to avoid the use of
UIWebView s and switch to WKWebView s instead.
Here's an example of a vulnerable UIWebView from "Where's My Browser?":
let scenario2HtmlPath = Bundle.main.url(forResource: "web/UIWebView/scenario2.html", withExtension: nil)
do {
let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)
uiWebView.loadHTMLString(scenario2Html, baseURL: nil)
} catch {}
The page loads resources from the internet using HTTP, enabling a potential MITM to exfiltrate secrets contained in
local files, e.g. in shared preferences.
When working with WKWebView s, Apple recommends using
loadHTMLString:baseURL: / loadData:MIMEType:textEncodingName:baseURL: to load local HTML files and loadRequest:
for web content. Typically, the local files are loaded in combination with methods including, among others:
pathForResource:ofType: , URLForResource:withExtension: or init(contentsOf:encoding:) .
Search the source code for the mentioned methods and inspect their parameters.
Example in Objective-C:
- (void)viewDidLoad
{
[super viewDidLoad];
WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];
self.webView = [[WKWebView alloc] initWithFrame:CGRectMake(10, 20,
CGRectGetWidth([UIScreen mainScreen].bounds) - 20,
CGRectGetHeight([UIScreen mainScreen].bounds) - 84) configuration:configuration];
self.webView.navigationDelegate = self;
[self.view addSubview:self.webView];
NSString *filePath = [[NSBundle mainBundle] pathForResource:@"example_file" ofType:@"html"];
NSString *html = [NSString stringWithContentsOfFile:filePath
encoding:NSUTF8StringEncoding error:nil];
[self.webView loadHTMLString:html baseURL:[NSBundle mainBundle].resourceURL];
}
Example in Swift from "Where's My Browser?":
473
iOS Platform APIs
let scenario2HtmlPath = Bundle.main.url(forResource: "web/WKWebView/scenario2.html", withExtension: nil)
do {
let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)
wkWebView.loadHTMLString(scenario2Html, baseURL: nil)
} catch {}
If only having the compiled binary, you can also search for these methods, e.g.:
$ rabin2 -zz ./WheresMyBrowser | grep -i "loadHTMLString"
231 0x0002df6c 24 (4.__TEXT.__objc_methname) ascii loadHTMLString:baseURL:
In a case like this, it is recommended to perform dynamic analysis to ensure that this is in fact being used and from
which kind of WebView. The baseURL parameter here doesn't present an issue as it will be set to "null" but could be
an issue if not set properly when using a UIWebView . See "Checking How WebViews are Loaded" for an example
about this.
In addition, you should also verify if the app is using the method loadFileURL:allowingReadAccessToURL: . Its first
parameter is URL and contains the URL to be loaded in the WebView, its second parameter
allowingReadAccessToURL may contain a single file or a directory. If containing a single file, that file will be available to
the WebView. However, if it contains a directory, all files on that directory will be made available to the WebView.
Therefore, it is worth inspecting this and in case it is a directory, verifying that no sensitive data can be found inside it.
Example in Swift from "Where's My Browser?":
var scenario1Url = FileManager.default.urls(for: .libraryDirectory, in: .userDomainMask)[0]
scenario1Url = scenario1Url.appendingPathComponent("WKWebView/scenario1.html")
wkWebView.loadFileURL(scenario1Url, allowingReadAccessTo: scenario1Url)
In this case, the parameter allowingReadAccessToURL contains a single file "WKWebView/scenario1.html", meaning
that the WebView has exclusively access to that file.
In the compiled binary:
$ rabin2 -zz ./WheresMyBrowser | grep -i "loadFileURL"
237 0x0002dff1 37 (4.__TEXT.__objc_methname) ascii loadFileURL:allowingReadAccessToURL:
Testing WebView File Access
If you have found a UIWebView being used, then the following applies:
The file:// scheme is always enabled.
File access from file:// URLs is always enabled.
Universal access from file:// URLs is always enabled.
Regarding WKWebView s:
The file:// scheme is also always enabled and it cannot be disabled.
It disables file access from file:// URLs by default but it can be enabled.
The following WebView properties can be used to configure file access:
allowFileAccessFromFileURLs ( WKPreferences , false by default): it enables JavaScript running in the context of
a file:// scheme URL to access content from other file:// scheme URLs.
allowUniversalAccessFromFileURLs ( WKWebViewConfiguration , false by default): it enables JavaScript running in
the context of a file:// scheme URL to access content from any origin.
For example, it is possible to set the undocumented property allowFileAccessFromFileURLs by doing this:
474
iOS Platform APIs
Objective-C:
[webView.configuration.preferences setValue:@YES forKey:@"allowFileAccessFromFileURLs"];
Swift:
webView.configuration.preferences.setValue(true, forKey: "allowFileAccessFromFileURLs")
If one or more of the above properties are activated, you should determine whether they are really necessary for the
app to work properly.
Checking Telephone Number Detection
In Safari on iOS, telephone number detection is on by default. However, you might want to turn it off if your HTML
page contains numbers that can be interpreted as phone numbers, but are not phone numbers, or to prevent the DOM
document from being modified when parsed by the browser. To turn off telephone number detection in Safari on iOS,
use the format-detection meta tag (  ). An example of this
can be found here. Phone links should be then used (e.g. 1-408-555-5555 ) to
explicitly create a link.
Dynamic Analysis
If it's possible to load local files via a WebView, the app might be vulnerable to directory traversal attacks. This would
allow access to all files within the sandbox or even to escape the sandbox with full access to the file system (if the
device is jailbroken). It should therefore be verified if a user can change the filename or path from which the file is
loaded, and they shouldn't be able to edit the loaded file.
To simulate an attack, you may inject your own JavaScript into the WebView with an interception proxy or simply by
using dynamic instrumentation. Attempt to access local storage and any native methods and properties that might be
exposed to the JavaScript context.
In a real-world scenario, JavaScript can only be injected through a permanent backend Cross-Site Scripting
vulnerability or a MITM attack. See the OWASP XSS cheat sheet and the chapter "Testing Network Communication"
for more information.
For what concerns this section we will learn about:
Checking how WebViews are loaded
Determining WebView file access
Checking How WebViews are Loaded
As we have seen above in "Testing How WebViews are Loaded", if "scenario 2" of the WKWebViews is loaded, the