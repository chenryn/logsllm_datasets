title:Adaptive encrypted traffic fingerprinting with bi-directional dependence
author:Khaled Al-Naami and
Swarup Chandra and
Ahmad M. Mustafa and
Latifur Khan and
Zhiqiang Lin and
Kevin W. Hamlen and
Bhavani M. Thuraisingham
Adaptive Encrypted Trafﬁc Fingerprinting With Bi-Directional Dependence
Khaled Al-Naami, Swarup Chandra, Ahmad Mustafa, Latifur Khan, Zhiqiang Lin,
Kevin Hamlen, and Bhavani Thuraisingham
Computer Science Department
The University of Texas at Dallas
Richardson, TX, 75080
{khaled.al-naami, swarup.chandra, ahmad.mustafa, lkhan, zhiqiang.lin,
hamlen, bhavani.thuraisingham}@utdallas.edu
Abstract
Recently, network trafﬁc analysis has been increasingly used in various
applications including security, targeted advertisements, and network
management. However, data encryption performed on network trafﬁc
poses a challenge to these analysis techniques. In this paper, we present
a novel method to extract characteristics from encrypted trafﬁc by
utilizing data dependencies that occur over sequential transmissions of
network packets. Furthermore, we explore the temporal nature of
encrypted trafﬁc and introduce an adaptive model that considers changes
in data content over time. We evaluate our analysis on two packet
encrypted applications: website ﬁngerprinting and mobile application
(app) ﬁngerprinting. Our evaluation shows how the proposed approach
outperforms previous works especially in the open-world scenario and
when defense mechanisms are considered.
1.
INTRODUCTION
With a tremendous growth in the number of Internet users over the
past decade, network trafﬁc analysis has gained signiﬁcant interest
in both academia and industry. Applications such as personalized
marketing [22] and trafﬁc engineering [30,31] have spurred the demand
for tracking online activities of users [24]. For example, by tracking
the websites accessed by a particular user, related products may be
advertised. Unfortunately, online users have fallen victim to adversaries
who use such tracking mechanisms for malicious activities by passively
monitoring network trafﬁc. As a result, encryption technologies
such as SSL/TLS are used extensively to hide data in network trafﬁc
from unauthorized access. In addition to data encryption, end-node
network identiﬁers (e.g. IP addresses) may also be hidden from external
adversaries using technologies such as Tor [14], to anonymize the user.
Recent studies [7,36] on trafﬁc analysis have focused on identifying
characteristic patterns in network trafﬁc that reveal the behavior of an
end-node, thereby de-anonymizing the network. Essentially, pattern
recognition techniques are employed over features extracted from
encrypted network trafﬁc passively captured at the user’s end. This
behavior identiﬁcation process of an end-node (i.e. either a service
accessed by the user, or an application at the user’s end involved in the
network trafﬁc) is called Trafﬁc Fingerprinting.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
© 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991123
Website Server
end-node
App Server
end-node
Tor 
anonymity 
network
Cloud
Service
Provider
User
Attacker
Figure 1: Illustration of website and app ﬁngerprinting
In this paper, we focus on the following two applications (illustrated
in Figure 1) whose primary goal is to perform trafﬁc ﬁngerprinting to
identify an end-node generating encrypted trafﬁc. Here, a man-in-
the-middle (i.e., network administrator, ISP, government agency, etc)
captures encrypted network trafﬁc passively at the user’s end.
Website Fingerprinting. This application involves identifying the
webpage (end-node) accessed by a user who actively hides online
activities using an anonymity network such as Tor. Knowledge of
the user’s online activities may be useful in applications such as
targeted advertisements, tracking terrorist activities, checking for
DRM violations, etc. On the contrary, it violates the user’s online
privacy. Destination IP addresses obtained from encrypted trafﬁc in this
setting cannot be used for webpage identiﬁcation since they would be
encapsulated by the encryption scheme. Fingerprinting over such
encrypted data for identiﬁcation of webpage (or website) is widely
known as Website Fingerprinting [25]. We denote this as WFIN.
App Fingerprinting. Unlike websites, smartphone apps access the
Internet by connecting to remote services that provide necessary data for
their operation. Examples of such services include advertisements, 3rd
party libraries, and other API-based services. Applications, such as ad
relevance, network bandwidth management, and app recommendations,
may require the knowledge of apps running on a particular device in
order to improve user experience. On the other hand, an adversarial
view of such knowledge may lead to initiation of targeted attacks [39]
involving known vulnerabilities in apps. While apps do not hide
the destination IP addresses, they may access multiple overlapping
destinations. For example, two apps may access the same 3rd-party
library while utilizing the service in a distinct manner. For a man-in-the-
middle observing network trafﬁc, identifying the two apps on the same
device is hard when relying only on the IP addresses. However, the
apps may have distinct network trafﬁc patterns useful for discrimination.
We call the identiﬁcation of apps on a device, using their encrypted
network trafﬁc patterns, App Fingerprinting, denoted by AFIN.
177
A fundamental challenge in performing trafﬁc ﬁngerprinting over
encrypted data is the identiﬁcation of characteristic features, which are
often used in machine learning classiﬁers. In particular, encrypted trafﬁc
consists of network packets that carry application data along with other
control messages depending on the communication protocol. In general,
a protocol such as TCP limits the size of each packet. Moreover, each
packet incurs a ﬁnite transmission time depending on the network path
followed from its source to its destination. When a man-in-the-middle
passively captures a sequence of packets ﬂowing at the user’s end, the
packet size, time-stamp, and direction can be observed to form a set of
features. As the goal of ﬁngerprinting is to determine end-node patterns,
one must consider a sequence of network packets in the captured trafﬁc
generated during a communication session involving the end-node
under investigation. We call this sequence of packets a trace.
Over time, the captured network trafﬁc may contain multiple traces
associated with a set of end-nodes with different sessions initiated by
the same user. In this setting, feature extraction is performed over
each trace by combining features of each of its packets in a suitable
manner [6,7,21,25,27,36]. Most existing techniques combine features
by assuming independence between subsequent transmissions [6,27].
Therefore, relationship between packets in a TCP session, occurring
consecutively in opposite directions (viz., uplinks from user to server, or
downlinks from server to user), are ignored. A relationship between
these packets may exist due to control messages resulting from the
current data transmission.
Another major challenge in trafﬁc ﬁngerprinting is the changes
of behavioral patterns in network trafﬁc over time, due to changes
in the end-node content. While trafﬁc ﬁngerprinting can be seen as
a continuous process with a man-in-the-middle observing network
trafﬁc perpetually, a classiﬁcation model trained initially captures
patterns in network trafﬁc available at that particular time. However,
trafﬁc patterns may evolve over time, changing their distinguishing
characteristics. Since these changes are not reﬂected in the classiﬁer, its
performance degrades while classifying newer data. A recent study in
WFIN observed this temporal behavior [23]. Yet, this remains an open
challenge.
In this paper, we introduce BIND (ﬁngerprinting with BI-directioNal
Dependence), a new set of features from encrypted network trafﬁc, that
incorporates feature relationships between consecutive sets of packets
in opposite directions. These features are used in conjunction with other
independent features to enrich discriminating factors of end-nodes
during pattern recognition. Furthermore, we propose a technique
for adapting the classiﬁer to temporal changes in data patterns while
ﬁngerprinting over a long period of time. Our approach continuously
monitors the classiﬁer performance on the training data. When the
accuracy drops below a predeﬁned threshold, we replace the classiﬁer
with another one trained on the latest data. We call this ADABIND
(ADAptive ﬁngerprinting with BI-directioNal Dependence). The
summary of our contributions is as follows.
• We propose a new feature extraction method, called BIND,
for ﬁngerprinting encrypted trafﬁc to identify an end-node. In
particular, we consider relationships among sequences of packets
in opposite directions.
• We propose a method, called ADABIND, in which the machine
learning classiﬁer adapts to the changes in behavioral patterns
that occur when ﬁngerprinting over a long period of time. We
continuously monitor classiﬁer performance, and re-train it in an
online fashion.
• We evaluate the proposed methods over two applications, namely
website ﬁngerprinting (WFIN) and app ﬁngerprinting (AFIN). We
perform AFIN over encrypted trafﬁc, which has not been explored
in existing studies. Moreover, we use a variety of datasets for
178
both WFIN and AFIN while employing defense mechanisms to
show the effectiveness of the proposed approaches especially in
the open-world settings.
The rest of the paper is organized as follows. In Section 2, we present
relevant background information and related studies in WFIN and
AFIN. We present BIND and ADABIND in Section 3. The empirical
evaluation including datasets, experiments, and results are detailed in
Section 4. Finally, we discuss certain limitations and future work in
Section 5 and conclude the paper in Section 6.
2. BACKGROUND
In this section, we present relevant existing studies in trafﬁc analysis,
particularly in WFIN and AFIN.
2.1 Website Fingerprinting
The online activity of a user accessing websites can be hidden
using anonymity networks such as Tor [14]. Tor provides a low
latency encrypted connectivity to the Internet, while anonymizing the
connections via a process called pipeline randomization. A circuit
of three relay nodes is formed within the Tor network, composed
of an entry node, an exit node, and a randomly selected relay node.
Circuit connections are reestablished approximately after every 10
minutes of usage [2]. Fingerprinting under this setting is hard due to
the decoupling of user request with end-node (i.e., web server) response.
Nevertheless, this challenging problem of WFIN has gained popularity
in the research community with numerous studies [6,7,21,25,27,36]
proposing techniques to perform ﬁngerprinting, and also to defend
against it. The inductive assumption is that each website has a unique
pattern in which data is transmitted from its server to the user’s browser.
Moreover, each website content is unique. Using this assumption, the
website ﬁngerprinting scenario, generally perceived as an attack against
user’s privacy, employs a statistical model to predict the website name
associated with a given trace. Whereas, a defense mechanism explores
methodologies to reduce the effectiveness of such models capable of
performing an attack.
2.1.1 Attack
The primary form of attack is to train a classiﬁer using traces
collected from different websites, where each trace is represented as a
set of independent features. Information present in network packets
associated with each trace is summarized to form a histogram feature
vector, where the features include packet length (size) and direction
(as used in [25]). In addition, Panchenko et al. [28] introduced a
set of features extracted from a combination of packets known as
Size Markers or Bursts. A burst is a sequence of consecutive packets
transmitted along the same direction (uplink or downlink). Features
such as burst sizes are computed by summing the length of each packet
within a burst. These, along with other features such as unique packet
sizes, HTML markers, and percentage of incoming and outgoing
packets, form the feature vector for a trace. Dyer et al. [17] also used
bandwidth and website upload time as features.
A recent work by Panchenko et al. [27] proposes a sampling process
on aggregated features of packets to generate overall trace features.
Importantly, Cai et al. [7] obtained high classiﬁcation accuracy by
selecting features that involve packet ordering, where the cumulative
sum of packet sizes at a given time in each direction is considered.
This feature set was also conﬁrmed to provide improved classiﬁcation
accuracy in [36]. It indicates that features capturing relationships
among packets in a trace are effective in distinguishing different
websites (or end-nodes). In our paper, we focus on extracting such
capability from traces in a novel fashion by capturing relationships
between consecutive bursts in opposite directions.
While these features are used to train a classiﬁer, e.g. Naïve
Bayes [17] and Support Vector Machine (SVM) [28], studies have
identiﬁed two major settings under which website ﬁngerprinting can be
performed. First, the user is assumed to access only a small set of
known websites. This restriction simpliﬁes the training process since
the attacker can train a model in a supervised manner by considering
traces only from those websites. This form of classiﬁcation is known as
closed-world. However, such a constraint is not valid in general as a
user can have unrestricted access to a large number of websites. In this
case, training a classiﬁer by collecting trace samples from all websites
to perform multi-class classiﬁcation is unrealistic. Therefore, an
adversary is assumed to monitor access to a small set of websites called
the monitored set. The objective is to predict whether a user accesses
one of these monitored websites or not. This binary classiﬁcation
setting is called open-world. Wang et al. [36] propose a feature
weighting algorithm to train a k-Nearest Neighbor (k-NN) classiﬁer
in the open-world setting. They utilize a subset of traces from the
monitored websites to learn feature weights which are used to improve
classiﬁcation. In this paper, we evaluate our proposed feature extraction
approach on both these settings. Particularly for the open-world case,
we utilize the feature weighting method proposed in [36] to perform a
comparative study of feature extraction techniques.
A study by Juarez et at. [23] observes and evaluates various
assumptions made in previous studies regarding WFIN. These include
page load parsing by an adversary, background noise, sequential
browsing behavior of a user, replicability, and staleness in training data
with time, among others. While recent studies [18,38] have addressed
each of these issues by relaxing appropriate assumptions, the issue of
replicability still remains an open challenge. Wang et al. [38] attempt to
address the issue of staleness in training data over time within their
k-NN model [36] speciﬁc to open-world. They score the training
data consisting of traces based on model performance of 20 nearest
neighbors. However, this methodology cannot be generalized, i.e., it is
not applicable if one uses a classiﬁer other than k-NN. Moreover, it
is also not applicable to the closed-world setting. In this paper, we
introduce a generic method to update the classiﬁer model in WFIN and
AFIN over long periods of time.
2.1.2 Defense
Since a successful attack depends on the characteristic network
packet features used to train a model, defenses against WFIN involve
disguising these features to reduce distinguishing patterns in network
traces. Such defense mechanisms vary from padding packets with extra
bytes, to morphing the website packet length distribution such that
it appears to come from another target distribution (i.e., a different
website) [17]. In packet padding, each packet size in the trace is
increased to a certain value depending on the padding method used.
These methods include Pad-to-MTU [17], Direct Target Sampling
(DTS), and Trafﬁc Morphing (TM) [40].
Pad-to-MTU pads each packet to the maximum size limit in TCP
protocol (Maximum Transmission Unit or MTU). With all packet sizes
equal, the use of the packet length feature for obtaining deterministic
patterns might be less effective. However, this method is not widely
used in practice as it increases network latency and incurs high overhead
when most of the packets in a trace are of length less than MTU.
Nevertheless, early studies [25] showed that attacks with a considerable
success are possible even when defenses like packet padding are used.
This led to a study in [40] that introduced more sophisticated
distribution-based padding methods such as DTS and TM. In DTS,
using random sampling, the distribution of the packet length in a
trace belonging to a website is made to appear similar to the packet
length distribution of another website. This requires less overhead than
Pad-to-MTU. TM further improves DTS by using a cost minimization
function between two websites to minimize packet padding, while
179
maximizing similarity between them. In our study, we evaluate BIND
by applying these padding techniques to packets while performing the
closed-world settings in website ﬁngerprinting.
In the case of open-world setting, Dyer et al. [17] introduced a
defense mechanism, called Buffered Fixed Length Obfuscator (or
BuFLO), that not only uses packet padding, but also modiﬁes packet
timing information by sending packets in ﬁxed intervals. Cai et
al. [6] improved BuFLO and introduced a lighter defense mechanism,
called Tamaraw, which considers different time intervals for uplink
and downlink packets in the open-world setting. We utilize these
mechanisms in the open-world setting to evaluate BIND.
2.2 App Fingerprinting
An increase in popularity of smartphone applications has attracted
researchers to study the issues of user privacy and data security in apps
developed by third-party developers [35]. In particular, many studies
have proposed methods to perform trafﬁc analysis while a user uses an
app. Dai et al. [12] ﬁrst proposed a method to identify an app by using
the request-response mechanisms of API calls found in HTTP packets.
They perform UI fuzzing on apps whose network packets are captured
using an emulator. Similarly, [26] proposes a method to ﬁngerprint
apps using comprehensive trafﬁc observations. These studies perform
app identiﬁcation (or ﬁngerprinting) using only HTTP trafﬁc. Such
methods cannot be applied on HTTPS trafﬁc since the packet content is
encrypted and not readily available.
Studies on performing trafﬁc analysis over HTTPS app network trafﬁc
explore varied applications including smartphone ﬁngerprinting [33],
user action identiﬁcation [9,10], user location tracking [3], and
app identiﬁcation [26]. They use packet features such as packet
length, timing information, and other statistics to build classiﬁers for
identiﬁcation (or prediction). Note that this is similar to the WFIN
setting mentioned in §2.1. Recently, a study [34] performed AFIN using
both HTTP and HTTPS data. They use features such as burst statistics
and network ﬂows. Here, a ﬂow is a set of network packets belonging to
the same TCP session. They train a random forest classiﬁer (ensemble
of weak learners) and a support vector machine (SVM) using features
extracted from network trafﬁc of about 110 apps from the Google play
store. Evaluation of their method is similar to the closed-world setting
of WFIN, where network trafﬁc from apps considered for training and
testing the model belong to a closed set, i.e., the user has access to only
a ﬁnite known set of apps. The method resulted in an overall accuracy
of 86.9% using random forest, and 42.4% using SVM. These results
are based on a small dataset of apps which may have both HTTP and
HTTPS trafﬁc. Furthermore, they only show a closed-world setting.
However, with a large number of apps present on various app stores,
these results may not reﬂect a realistic scenario of the open-world
setting in AFIN.
Similar to that of WFIN, the open-world setting in AFIN assumes
that the man-in-the-middle monitors the use of a small set of apps
called the monitored set. The goal is to determine whether a user is
running an app that belongs to this set. In our evaluation, we use our
proposed technique for trafﬁc analysis on a larger dataset of apps
that only use HTTPS for connecting to remote services. Contrary to
WFIN where the network is anonymized, apps do not use an anonymity
network. However, the effect of anonymization is similar to that of
WFIN. In WFIN, anonymization results in removal of destination
website identiﬁers (i.e., IP address). In AFIN, apps connect to multiple
remote hosts deriving remote services from them. However, multiple
apps may connect to the same host. A mere list of hosts or IP addresses
is not sufﬁcient to deterministically identify an app. This property
effectively anonymizes such apps with respect to the network. We
therefore rely on trafﬁc analysis to perform AFIN. In this paper, we