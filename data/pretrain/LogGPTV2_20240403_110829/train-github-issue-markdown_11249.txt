### System info
  * Playwright Version: v1.30.0
  * Operating System: Windows
  * Browser: Chrome
  * Other info:
### Source code
  * I provided exact source code that allows reproducing the issue locally.
I am using playwright to control the browser. The tests are written using
mocha.
        let resolve: () => void;
        let reject: (err: unknown) => void;
        const promise = new Promise((res, rej) => {
          resolve = res;
          reject = rej;
        });
        const browserProcess = spawn(
          `Start-Process chrome -ArgumentList "--process-per-site --remote-debugging-port=9222"`,
          { shell: 'powershell.exe' }
        );
        browserProcess.on('error', err => reject(err));
        browserProcess.on('spawn', () => resolve());
        await promise;
        await new Promise((res) => setTimeout(res, 10_000));
        browser = await chromium.connectOverCDP('http://127.0.0.1:9222', { timeout: 100_000 /* 100s */ });
        context = browser.contexts()[0];
The code above
  * starts an instance of Chrome using Powershell,
  * then playwright connects that browser over CDP.
Justification: A process outside the test code starts a browser, and intend to
control that browser instance using playwright. When I `launch` a browser
instance using playwright, then this instance won't be used by that process
when it starts navigating to a link.
This works when there are no existing instances of Chrome.
**Steps**
  * Start a chrome instance normally.
  * Run the given above.
  * The connection over CDP is refused.
**Expected**
The connection over CDP is established to the second browser instance opened
via the test code.
**Actual**
The connection is refused, when there is an existing instance of Chrome
running.
**Additional note**
The `timeout` property in `connectOverCDP` options does not seem to work. I
needed to devise an additional waiting strategy with `await new Promise((res)
=> setTimeout(res, 10_000));`.