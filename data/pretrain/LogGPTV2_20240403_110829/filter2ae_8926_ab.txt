Strike的灯塔，我们有反向端口转发的功能。在WPAD中毒攻击期间，我们可以将受害者的浏览器指向我们的“代理”，这只是网络中的一个反向隧道，我们的C2服务器。然后，使用SOCKS转发隧道，我们可以将浏览流量推回到环境中，以接收除了篡改包之外的WSUS更新操作。
## 毒药
一旦隧道准备好了，最后是攻击的时候了。首先，我配置我的恶意有效载荷并启动WSUSpectProxy。WSUSpectProxy接收在其payload.ini文件中定义的自定义负载（如下所示）。像研究人员在白皮书中推荐的那样，我使用PsExec.exe和一个命令行参数。在我的情况下，我使用参数启动powershell.exe运行“net
user”和“net localgroup”来添加一个后门用户“bob”。
现在是时候使用多个标志来启动Invoke-Inveigh来定义我们希望脚本使用的一些设置了：
`-IP &lt;IP OF POISON VICTIM&gt;：设置绑定原始套接字的IP`
`-NBNS Y：设置启用NBNS欺骗`
`-LLMNR Y：设置启用LLMNR欺骗`
`-HTTP Y：打开HTTP服务器，以提供WPAD.dat文件`
`-SMB N：不要做任何类型的SMB中继攻击`
`-StatusOutput Y：设置启用打印状态输出`
`-Tool 2：将设置配置为在某个工具中运行此设置。Empire的设置可以很好的和Cobalt Strike工作`
`-SpooferIPsReply &lt;TARGET IP&gt;：目标或CSV目录的IP列表`
`-WPADAuth匿名：不要弹出WPAD的信用框`
`-WPADIp &lt;ProxyHost&gt;：运行rportfwd命令的中毒主机的IP`
`-WPADPort 8080：rportfwd命令的端口`
该命令将针对目标主机执行WPAD中毒攻击，并提供一个WPAD.dat，将目标浏览器指向我们已经出站的端口转发隧道。该端口将在8080端口上返回我们的C2服务器。
## MITM更新
一旦满足MITM条件，更新请求就会被拦截，我的恶意软件包就会被传递给客户端。由于更新至关重要，因此可能会被执行，添加本地用户并允许我们横向传播。
免责声明：将本地用户添加到系统可能会提示，但是可以使用更好的做法，并使演示更容易一些。我建议改进启动方式，启动一个只有内存的代理（可能使用PowerShell）…但我会让你弄清楚的。
不错！我们现在可以访问并且可以使用新添加的用户部署灯塔代理。
## 修复漏洞
有许多缺陷可以使得这个攻击能够成功，它们应该在任何网络中被修复。这些问题已经确定了很长时间，但是我仍然认为在这个链条中滥用的错误配置缺乏意识和控制。除了防止漏洞的控制之外，SOC和CIRT还可以通过多种方式来检测网络和复杂攻击者发生的恶意活动，重点检测是有必要的。
## WPAD控制/修复
要修复WPAD错误配置，DNS A或CNAME记录应该添加到名称为“wpad”的内部DNS服务器中，以防止主机进入执行MDNS /
LLMNR广播的步骤。此外，如果不需要该功能，则可以通过GPO取消选中自动设置。
## WSUS修复
任何更新软件包或软件应始终通过安全连接部署（至少为SSL）。有许多项目专注于通过网络传输的后门软件和应用程序…许多坏人使用这种技术来获得初始访问和横向传播。对于WSUS具体来说，我发现这个站点有助于配置正确的设置：
## 检测
预防控制是一个期望较少的方法，但是随着组织的成熟度的增长，通过[安全控制](http://www.leeholmes.com/blog/2014/12/08/maslows-hierarchy-of-security-controls/)的[层次结构](http://www.leeholmes.com/blog/2014/12/08/maslows-hierarchy-of-security-controls/)，审计和取证能力是必须的。随着组织转向[假设违约](https://azure.microsoft.com/en-us/blog/red-teaming-using-cutting-edge-threat-simulation-to-harden-the-microsoft-enterprise-cloud/)心态，他们将重点放在预防上，同时也引入了对检测和响应的巨大需求。有几个主题可以从上面的攻击链中抽象出来，以提醒可疑活动。
## PowerShell v5
PowerShell
v4和v5引入了许多蓝军应该理解的功能。我在这里提到他们特别是因为我在我的攻击链中使用了Inveigh.ps1，但与底层技术的检测并不直接相关，只是武器化向量。有[一篇文章](https://blogs.msdn.microsoft.com/powershell/2015/06/09/powershell-the-blue-team/)总结了大部分有用的功能。任何正在努力改进网络检测的人都应该寻找并引入功能来对抗PowerShell攻击。PowerShell攻击正在上升，不久之后就不会有任何的事情了。
## 事件日志
事件日志在大型企业中转发可能很困难。集中收集和收集这些日志所获得的价值不能低估，在我看来，这是完全值得的。在这种攻击链的情况下，似乎添加到集合中的最佳日志是c：
windows
windowsupdate.log文件。如果你没有收集，则具有“WindowsUpdateClient”和17或19的ID的系统事件日志将显示你下载/安装的更新的名称。比较主机上的日志将允许你选择仅在所选主机上发生的边缘事件（恶意更新）。
在这种情况下，DNS日志的集合也是有用的。假设企业组织怀疑通过禁用WPAD正确地修复了WPAD中毒攻击，如果将恶意的或新的工作站引入环境而无需控制或当前工作站已禁用控制，则会警告并观察WPAD的失败率。
## WMI事件订阅
我们的团队是WMI在防守上的用途的巨大支持者。你可能已经看到Matt Graeber
[最近的一些tweets](https://twitter.com/mattifestation/status/685880133438148608)
，例如，他提供的WMI签名，将提供围绕事件值得监控的警报。ATD的Hunt能力主管Jared
Atkinson开发了一种名为Uproot的工具，它[实际上](https://github.com/Invoke-IR/Uproot)是一种基于代理主机的IDS，使用了WMI事件订阅。
在我们的例子中，可以在“HKEY_USERS  Software Microsoft Windows CurrentVersion
Internet Settings
Wpad”下的网络配置文件子键内的值更改创建WMI事件过滤器的时间。此外，你可以对签名的文件创建或修改wpad.dat文件，该文件暂时放在“ Local Microsoft Windows Temporary Internet Files Content.IE5”中。
如果你有兴趣，请查看[Uproot](https://github.com/Invoke-IR/Uproot)和[WmiEvent](https://github.com/Invoke-IR/WmiEvent)，并将其作为练习的机会。
## 结论
虽然我在这篇文章中没有引入任何新的工具，但我的目标是将几个好的工具拼接在一起，展示一个有趣的攻击链，并鼓励创造性的技术。此外，我希望能够引起大家对在大型企业环境中常见的一些错误配置的重视。
本文翻译自：[​http://www.sixdub.net/?p=623](http://www.sixdub.net/?p=623)，如若转载，请注明来源于嘶吼：