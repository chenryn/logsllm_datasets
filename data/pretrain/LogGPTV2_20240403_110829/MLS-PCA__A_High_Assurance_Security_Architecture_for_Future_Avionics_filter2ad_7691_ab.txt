management,  sensor  processing, 
control,
and  display
processing. Collectively, the high-level language software
for these functions is multiple millions of source lines of
code (SLOC), and rising with new developments.
communications  processing, 
control  management,
For the past 30  years,  computer  hardware  logic  per 
chip has  been  growing  exponentially,  doubling  every  18 
months. First formulated as Moore’s Law, the forecast in
2002  is  for  the  exponential  growth  to continue with 12
logic  doublings  by  2020  (212   =  4,000  X),  our  target
timeframe [18]. The security challenge will be to build a 
high  assurance  MLS  system  from  the  expected  array  of
400,000  processors.  We  will  be  in  an era of logic –
Figure 4. MLS-PCA Example Network
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply. 
An  AAP  is  hosted  on  its  own  processor.  There  is  no 
need to share the processor and its resources with another 
AAP. There is no need for a complex resource manager or 
Operating  System.  A  simple  network  protocol  stack  and 
loader  is  sufficient.  Domains  and  domain  management, 
e.g.,  context  saving,  context  switching,  are  unnecessary. 
Memory  management  and  sharing  are  eliminated  as  well 
as  process  scheduling.  The  absence  of  these  features 
permits  simpler  hardware  and  CPU  architectures,  perfect 
for  high  density,  multiple  processor  chips  now  coming 
online,  i.e.,  DARPA  PCA. And  the  greatest  benefit  for 
security  is  the  dedication  of  each  processor  to  a  single 
security level, that of its loaded AAP process.   
A  small  example  of  a  MLS-PCA  secure  network  is 
shown  in  Figure  4.  Note  the  pairing  of  each  AAP-EPE, 
including the NSE-EPE pair in bottom center of figure. 
5.  MLS-PCA Functional Model 
Avionics  components  are  usually  well  defined  by  the 
mission and include air vehicle controls, navigation, (e.g., 
Global  Positioning  Satellite,  GPS),  inertial,  targeting, 
sensor  (e.g.,  Infra  Red,  IR,  radar),  weapons  control, 
payload  stores,  communications,  safety,  and  other 
systems.  Ground  support  functions  include  maintenance 
and  logistics,  mission  planning,  mission  analysis,  and 
training among others. These support functions affect the 
avionics  configuration.  Mission  planning  determines 
flight  plan,  weapons,  radio  frequencies,  crypto  keys, 
weather, targets, etc. Plans so formulated are embodied in 
software  programs  and  databases  that  are  dynamically 
loaded  into  the  air  vehicle  just  before  takeoff  by  some 
Portable  Memory  Device  (PMD)  carried  by  the  pilot  or 
crew.
5.1  Avionics Application Process, AAP 
includes 
The  avionics  development 
infrastructure 
components  –  processors,  busses,  communications 
devices, etc. – under control of the appropriate application 
software  processes.  We  define 
these  as  Avionics 
Application  Processes,  AAPs.  Traditionally,  AAPs  are 
integrated  into  one  large  system  operating  at  the  system 
high classification of the vehicle, e.g., Top Secret Special 
Access  Required  (TS-SAR).  MLS-PCA  will  require 
different  thinking  on  the  part  of  avionics  developers. 
Functions will be classified individually at the single level 
of the highest data processed, often less than system high. 
Thus  AAPs  are  the  untrusted  “subjects”  of  the  Bell-
LaPadula access control policy model [20], and will be at 
a variety of security levels, mostly Unclassified or Secret. 
Mission planning will select the required software for the 
mission, and construct a table – the access matrix – of the 
AAPs,  which  will  specify  their  security  levels,  the  data 
and  devices,  i.e.,  the  “objects,”  they  can  access,  and  the 
type  of  access  permitted,  i.e.,  their  read,  write,  append, 
and execute permissions.  Furthermore, mission planning 
will  define  the  avionics  system  configuration  of  network 
addresses,  process 
initial 
cryptographic keys. This classified data is protected from 
theft,  unauthorized  modification,  and  disclosure  by 
encrypting  the  PMD  for  its  journey  from  the  classified 
mission-planning  center  to  the  classified  air  vehicle  and 
back again after the mission with mission results. 
ids,  authenticators,  and 
 An  AAP  is  considered  a  homogenous  process  at  a 
single security level. In reality, it may be many processes, 
but packaged for MLS-PCA as a single process. For real-
time systems, an AAP traditionally is scheduled to run at 
a  precise  time  interval  by  an  event  trigger,  or  by  a  call 
from another AAP. For MLS-PCA, the AAP will own its 
processor  exclusively  and  need  not  be  scheduled.  It  will 
always run, but only produce results when events dictate. 
When  necessary,  an  AAP  will  interact  with  another 
authorized    (by  the  access  matrix)  AAP.  MLS-PCA  will 
establish  a  cryptographically  “trusted  connection” 
between  the  two  AAPs.    Multiple  AAPs  can  share  a 
trusted  connection  as  part  of  a  “coalition.”  AAP  trusted 
connections could last the entire mission, and often will in 
the  well-defined  world  of  avionics.  Finally,  the  trusted 
connection  can  extend  beyond  the  boundary  of  the 
avionics  “box,”  or 
the  air  vehicle  when  properly 
configured. The trusted connection is only limited by the 
communications and imagination of the system developer. 
5.2  Encryption Processing Element, EPE 
Each AAP will be protected by an “attached” front-end 
guard  element,  the  EPE.  The  EPE  guards  the  attached 
process  by  performing  message  encryption/decryption  of 
all  IPC  traffic.  There  is  no  bypass  of  the  EPE.  This  is  a 
security constraint on the architecture, the guarantee that a 
cryptographic  computing  element 
front  ends  each 
computational  element.  An  EPE  may  be  a  software 
element  or  encryption  hardware.  There  can  be  thousands 
of EPEs at any given time. An EPE does additional tasks 
related  to  protecting  keys  as  a  way  of  enforcing  security 
policy.  For  example,  all  keys  are  distributed  “wrapped,” 
i.e.,  encrypted.  The  EPE  must  unwrap  keys  to  use  them. 
The wrapper key must be distributed in an “out of band” 
procedure,  possibly  carried  in  a  physical  “ignition”  key 
generated  by  mission  planning,  and  inserted  into  an 
avionics  port  by  the  pilot,  or  built  into  each  EPE 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply. 
processor’s  nonvolatile  memory  by  mission  control.  The 
choice is mission dictated and hardware configured. 
In  summary,  each  AAP  has  one  EPE.  The  EPE  is  the 
only  access  between  the  AAP  and  the  communications 
network  and  functions  as  a  gateway  to  ensure  that 
messages  can  be  sent  only  to  authorized  recipients  and 
that all messages are encrypted. 
5.3  Network Security Element, NSE 
all 
for 
and 
internal 
element 
The  NSE  distributes  encryption  keys  to  the  EPEs, 
enforcing  access  control  of  communication  paths,  i.e., 
permissions between AAP pairs. The NSE is the security 
policy 
external 
communication,  permitting  the  avionics  interoperability 
with  external  battlefield  assets.  Within  the  control  of  the 
NSE  is  an  access  matrix  of  authorized  permissions  for 
each AAP. The permissions are stored as a database, with 
a  unique  key  corresponding  to  each  dimension  of  the 
security policy. For example, there can be a key for each 
security  level  and  each  compartment  of  the  Mandatory 
Access  Control  (MAC)  security  lattice.  There  can  be  a 
common  key  for  each  user  (uid)  or  process  (pid)  in  a 
coalition, or a key for each AAP pair allowed to connect 
as part of Discretionary Access Control (DAC). There can 
be keys for each mission function, and there can be one-
time  session  keys  for  each  newly  created 
trusted 
connection. NSE creates a trusted connection, by sending 
a session key to the attached EPEs. That session key is the 
XORed  result  of  all  the  policy  keys  –  the  MAC,  DAC, 
and  other  keys  –  for  the  connection  based  on  the 
maximum authorized permission of the paired application 
processes.  The  NSE  access  matrix  is  authorized  and 
established  by  mission  planning  and  transported  to  the 
avionics system on a PMD at mission initiation. Dynamic 
updates  are  permitted  by  authorized  roles  in  the mission, 
e.g., pilot, and/or ground control. 
are 
between 
established 
At  mission  initialization,  system  required  trusted 
connections 
security 
infrastructure  elements  –  NSE,  EPE  (cf.  Section  5.6.2). 
They exist to allow the NSE to distribute keys securely to 
EPEs. Information regarding AAPs is required for setting 
the  NSE  access  database  at  mission  initialization.  A 
human  role  is  defined  by  associating  a  user  (uid)  with  a 
process  (pid)  in  the  access  control  matrix.  For  each  pid 
and  uid  there  is  a  set  of  credentials  that  defines  the 
security  permissions,  the  coalitions,  and  the  roles  played 
by  all  entities.  There  is  a  need  for  Identification  and 
are 
Authorization 
established.  The  NSE  will  perform 
task 
inasmuch  as  it  already  has  the  I&A  data  from  mission 
planning.  The  NSE  can  be  implemented  as  a  set  of 
connections 
the  I&A 
(I&A)  whenever 
distributed  processes  executing  on  multiple  processors 
within  the  avionics  architecture  for  redundancy  and 
performance, similar to any of the avionics applications. 
5.4  Security Policy Enforced by Encryption 
The  enforcement  mechanism  of  the  MLS-PCA  model 
is  the  allocation  of  an  encryption  key  for  the  trusted 
connection between two AAPs – the session key, Ksession.
The NSE computes the session key for each open request 
by  an  AAP  to  access  another,  based  on  the  applicable 
security  policy.  Typically,  there  are  multiple  applicable 
policies – MAC, DAC, and Mission.  
MLS-PCA  treats  AAPs  as  untrusted  subjects,  and 
treats  trusted  connections  (TCs)  as  the  security  objects. 
TCs  are  simplex  (unidirectional),  i.e.,  AAPi can  write 
messages  to  AAPj  (who  reads  messages  from  the 
connection).  If  AAPj  wishes  to  respond  to  AAPi,  AAPj
must  open  a  separate  simplex  connection  to  AAPi.  Most 
dialogs  between  AAPs  will  be  “duplex”  by  creating  two 
simplex  connections.  Simplex  connections  allow  blind 
write-up, or Append, e.g., AAPi may write to AAPj, when 
the security level SLj >= SLi (dominates). 
Mandatory  Access Control, MAC, is the classic DOD 
policy  of  a  subject’s  clearance  dominating  an  object’s 
classification.  This  is  best  realized  in  the  Bell-LaPadula 
[20] policy. MLS-PCA uses Bell-LaPadula and labels all 
subjects  and  objects.  There  is  a  MAC  key,  for  each 
classification  level,  Ksl,  and  each  security  compartment, 
Kcomp .
Discretionary  Access  Control,  DAC,  further  limits 
subject-object access. DAC is like a “wiring diagram” of 
mission  functions  (AAPs).  DAC  is  conceptualized  as  a 
matrix of subjects vs. objects, with a matrix cell’s content 
containing the DAC encryption key, Kd. The DAC matrix 
is sparsely populated because the AAPs tend to cluster by 
function. For avionics purposes, a coalition is a collection 
of subjects who meet the requisite MAC requirements and 
are members of a community of interest of the MLS-PCA 
model.  These  subjects  create  a  multi-party 
trusted 
connection by joining a coalition and leaving the coalition 
as  necessary.  MLS-PCA  effects  a  coalition  by  treating 
coalitions  as  objects  in  the  DAC  matrix  and  creating  a 
common key Kcoal used by all coalition subjects. For each 
subject in a coalition, its coalition key, Kcoal, is contained 
in  the  DAC  matrix  coalition  cell.  Thus,  DAC  policy  key 
Kdac is defined as Kdac = (Kd or Kcoal ), i.e., either the DAC 
key or the coalition key for a given object. 
The MLS-PCA model is applicable to a wide family of 
in  a  dynamic  battle  space 
avionics  applications 
environment.  Missions  can  cover  surveillance,  targeting, 
shooter,  and  communications.  MLS-PCA  takes  the  view 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply. 
that  an  avionics  mission  is  composed  of  a  set  of  AAPs 
that constitute the mission functionality. The mission can 
then be represented by the DAC policy above. For multi-
mission scenarios we need another (3rd) dimension to the 
DAC  matrix  that  shows  the  DAC  connectivity  for  each 
mission, i.e., another layer in the DAC matrix. 
Overall then, the MLS-PCA security policy is reflected 
in the following: 
Ksession = Ksl (cid:133)  Kcomp 
where, Kdac = (Kd or Kcoal ) (cid:133) (cid:1167)Kmission     
and (cid:133) is XOR 
(cid:133) Kdac
2 ;
This scheme provides great flexibility in MLS-PCA to 
match  security  policy  to  the  needs  of  the  avionics 
application.  Most  missions  are  static  with  fixed  AAP 
communication  patterns  as  one  might  find 
in  an 
autonomous Unpopulated Air Vehicle (UAV).  In such a 
static environment, we might do away with the NSE and 
have access policy keys pre-placed during initialization at 
the EPEs by mission control. 
5.5  Crypto Issues 
The MLS-PCA model is silent on how the encryption 
function  is  mechanized  –  in  software  or  hardware.  It  is 
only  concerned  that  it  be  correct,  always  invoked,  and 
always bound to its AAP. It is the “reference monitor” for 
the architecture [2]. 
The model is also silent on the encryption algorithm to 
be  employed.  We  only  assume  it  will  have  management 
features  compatible  with  DOD  Type  I  and  Type  II 
encryption,  and  commercial  algorithms  such  as  Triple 
Data  Encryption  Standard  (DES),  and  the  Advanced 
Encryption  Standard  (AES).  Choice  will  be  made  at  the 
time of specific application. We do specify a Public Key 
Infrastructure  (PKI)  scheme  for  secure  key  distribution 
during system boot (cf. Section 5.6). Key management is 
intimately  tied  to  security  policy  as  discussed  in  Section 
5.4.
Every  secure  system  must  have  a  means  of  revoking 
access upon discovering hostile, or runaway behavior of a 
subject.  This  means  revoking  a  trusted  connection 
immediately. Revocation is achieved by erasing the guilty 