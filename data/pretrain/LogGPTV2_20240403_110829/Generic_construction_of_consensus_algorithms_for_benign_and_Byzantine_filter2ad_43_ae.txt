allow the con­
I and the condition 
at line 4 of Algorithm 
2 
dition at line 31 of Algorithm 
to hold. 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
350 
DSN 2010: Riitti et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:58:22 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
and Algorithm 
tiation. Depending 
predicate 
coordinator-
(coordin
3 with TD =  In+b+ll 
as a FLV instan­
on the implementation 
ator-based or coordinator-f
of the Pcons 
ree), we get 
of MQB. 
based or coordinator-free 
variants 
5.3 Class 3 - Paxos and PBFT 
and PBFT, 
We discuss 
Paxos as part of class 3 (rather 
than as part of 
between  Paxos 
class 2) to show the similarities 
namely that the selection round for Paxos and PBFT are de­
rived from 
are algorithms 
sensus (state machine 
stantiation 
of a single 
the "core" of these algorit
the optimization
mentioned 
the FLV function for class 3. Paxos and PBFT 
of con­
replication). We consider here the in­
instance of consensus that represents 
incorporate 
p, ¢) and validators 
hms. Both algorithms 
to Selector(
that solves a sequence 
of instances 
in Section 3.1. 
s related 
for the 
is designed 
n > 5b to 
is expressed 
b Byzantine 
of "proposers", "acceptors" and "learners". 
fault model (f =  0) and requires 
faults. The algorithm 
FaB Paxos [16] FaB Paxos algorithm 
Byzantine 
tolerate 
in the context 
For simplicity, in our framework, 
are 
expressed without 
considering 
these roles. We  get FaB 
Paxos algorithm from Algorithm 
the follow­
1 by applying 
FLAG = *, 
ing parametrization: TD =  I(n + 3b + 1)/2l, 
always II, and Algorithm 
Selector(
5 as an 
2 with TD = 
instantiation 
I(n + 3b + 1)/2l)· 
of FLV function (Algorithm 
p, ¢) returning 
consensus algorithms 
We now compare the instantiated 
version 
of FaB Paxos 
condition 
hms. However, 
have (minor) 
Since TD =  l(n+3b+l)/2l, 
it 
is the same in both 
of the two al­
original 
FaB 
lied when n - b messages 
algorithm. 
deciding 
the selection 
condition 
differences. With the 
with the original 
is easy to see that the 
algorit
gorithms 
Paxos, the selection rule  is  app
are received. In that case, a value v is selected if it 
at least I (n - b + 1) /2l times in the set of received 
mes­
sages; 
if 
is smaller than n - b, FaB 
a number of received 
Paxos will not select 
while Algorithm 
select 
Algorithm 
Paxos algorithm. 
messages 
any value, 
5 may still 
the instantiation 
of the original 
line 3. In this sense, 
can be selected. 
improvement 
1 is a (small) 
13 Therefore, 
any value 
otherwise 
a value by 
of 
FaB 
appears 
The original FaB Paxos algorithm 
uses a coordinator­
of the Pcons predicate, 
based implementation 
signed messages [17]. By using the coordinator-free 
of Pcons [2], we can obtain 
signature-free 
coordinat
or-free 
implementation 
based on 
and 
and signature-free 
of FaB Paxos. 
variant 
1 with TD =  I(n + 3b + 1)/2l 
Algorithm 5 FLV for class 
1: correctVotes,,+-
2: if IcorrectVotespl 
3:  return v s. t. v E correct 
4: else if I M;; I > n - b -
5:  return? 
6: else 
7:  return null 
{v:I{(v,-,-)EM}I> n-;-l} 
=  1 then 
1 then 
Votes,> 
5.2 Class 2 - MQB 
MQB is our new Byzantine consensus 
algorithm 
that re­
variable 
quires n > 4b. Compared to PBFT, it has the advantage 
historyp, 
not to need the (unbounded) 
n > 4b instead of n > 3b (for PBFT). We 
of requiring 
get MQB from Algorithm 
tion:14 TD =  In+b+ll, FLAG = ¢, Selector(
p,¢) = II 
a value v 
13Note that the condition 
1 with the following 
at line I of Algorithm 
at the cost 
5 for selecting 
parametriza­
For example, 
smaller 
requires 
algorithm. 
least 4 messages 
while Algorithm 
14See footnote 
2. 
of line 4 of Algorithm 
to be received 
number of messages 
equal to v to be received 
5 requires 
12, here with reference 
when n =  7 and b =  1, FaB Paxos requires 
(at least i(n-b+ 1)/2l (=  4), 
(more than n--l (=  2». 
to line 5 of Algorithm 
3 messages 
than in the original 
3 instead 
at 
Algorithm 6 FLV for class 3 with b =  0, TD =  I l 
1: possible 
V otes" 
, ts' , -) E M;' : vote 
I =  1 then 
Votes 
(v,-,-) 
I > lJ 
E possible 
ts, -) E M : 
=  vote' 
+-{ (vote, 
V ts > ts'} 
I {( vote' 
Votes 
2: if I pos sible 
3:  return v s.t. 
4: else if IM I > lJ then 
5:  return? 
6: else 
7:  return J.-
only (b = 0) and 
Paxos [11] Paxos assumes benign faults 
n > 2f.  We get Paxos from 
requires 
1 with the 
parametrization:15 TD =  Int1l, FLAG = ¢, 
following 
p, ¢) implementing 
Selector(
leader election, and Algo­
rithm 6 as a FLV instantiation. 
Algorithm 
With only benign faults, 
the instantiation 
of the function 
4. First, 
We now explain how to get Al­
FLV can be simplified. 
gorithm 6 from Algorithm 
any message (vote, 
( vote, ts) E history. 
the same as the set 
set correctVotesp 
is not needed in the FLV function, and by extension, the 
variable 
that 
has the following property
V otesp is 
which means that the 
possibleVotesp, 
is not needed. It follows that history 
ts, history) 
Therefore, 
we can observe 
: 
is not needed in the consensus algorithm. 
the set correct 
historyp 
6. 
This 
in the be­
y property 
Because the unanimit
is not relevant 
4 can be removed. 
4 into lines 4-5 
nign case, lines 8-9 of Algorithm 
allows us to merge lines 5-11 of Algorithm 
of Algorithm 
PBFT [4] PBFT is designed 
and requires 
the following 
Selector(
tion. To get the instantiation 
we have set n = 3b + 1, as in PBFT. 
faults (f =  0) 
n > 3b. We get PBFT from Algorithm 
1 with 
parametrization: TD = 2b + 1, FLAG = ¢, 
p, ¢) =  II and Algorithm 
as close as possible 
for Byzantine 
to PBFT, 
7 as a FLV instantia­
15See footnote 
2. 
of line 4 of Algorithm 
12, here with reference 
to line 7 of Algorithm 
4 instead 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
351 
DSN 2010: ROtti et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:58:22 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
 ts'} I > 2b 
2: correctVotesp   1 or 
I {(vote,ts,- )  E i1: ts =  o} I > 2b then 
) E i1: (vote,ts) E historY'} 1  > b }  
6:  return? 
7: else 
8:  return null 
We explain now how to get Algorithm 
7 from Algo­
7 Conclusion 
algorithm 
a generic 
presented 
consensus 
of these parameters 
with TD, FLAG, Selector 
The paper  has 
parameterized 
stantiation 
classes 
sus algorithms 
As future work, we plan to develop a framework around our 
generic 
led us to distinguish 
(into which  known 
. 
fit), and to identify the 
three 
consen­
new MQB algorithm
of consensus 
algorithms 
algorithm
and FLV. In­
. 
Acknowledgements: We would like to thank Fatemeh 
Borran, Martin Rutle, Segio Mena and Nuno Santos for 
their comments on an earlier 
version of the paper. 
y property, 
References 
nt simplifica
rithm 4. PBFT does not consider the unanimit
which allows a significa
4. 
y property, 
lines 8-9 of Al­
Indeed, 
Then, we  can merge the con­
gorithm 
ditions of line 5 and line 7 of Algorithm 4 into line 5 of 
Algorithm 
without 
the unanimit
4 can be removed. 
7. 
tion of Algorithm 
PBFT uses a coordinator
that does not require 
predicate 
using the coordinator-free 
get a coordinator-free 
variant 
of PBFT. 
-based implementati
on of Pcons 
signed messages [17]. By 
on of Pcons [2], we 
implementati
[ 1 ]  M. Ben-Or. Another  advantage 
of free choice: Completely 
asynchronous 
agreement protocols. In PODC, 1 98 3 .  
[2] F. Borran and A. Schiper. 
A Leader-free Byzantine Consen­
sus Algorithm. 
To appear in ICDCN, 201 0 .  
[ 3 ]  M. Castro. Practical 
Byzantine fault-tolera
nce. PhD thesis. 
Technical report, 
MIT, 2000. 
[4] M. Castro and B .  Liskov. Practical 
byzantine 
fault tolerance 
and proactive 
recovery. 
ACMTCS, 2002. 
[S] T. D. Chandra and S. Toueg. Unreliable 
failure detectors 
for 
6 Randomized consensus 
algorithms 
reliable 
distributed systems. JACM, 1 996. 
[6] B .  Charron-Bost and  A. Schiper. The Heard-Of model: 
systems with benign failures. Dis­
computing in distributed 
tributed 
Computing, 22(1 ):49-7 1 ,  2009. 
Algorithm I can be adapted 
to support 
randomized 
con­
s. The first modification is the introduction 
on. In the context of binary consensus 
(ini­
sensus 
algorithm
of randomizati
tial value 
with probability OS'. This allows all correct 
repeating 
same value with 
0 or I ), line I I  is replaced with " selectp := I or 0 
by 
round, to select 
the 
the execution of the selection 
processes, 
probability I .  
[7] C. Dwork, N. Lynch, and L. Stockmeyer. 
Consensus in the 
presence of partial synchrony. 
JACM, 1 98 8 .  
[ 8 ]  M. J. Fischer, 
N. A. Lynch, and M .  S .  Paterson. Impossibil­
ity of distributed 
1 985. 
consensus with 
one faulty process. JACM, 
[9] R. Guerraoui and M .  Raynal. The Information 
Structure 
of 
Indulgent 
IEEE Trans. o n  Computers, 2004. 
[ 1 0] R. Guerraoui and M. Raynal. The Alpha of Indulgent 
Con­
Consensus. 
A second modification 
i s  needed, 
which i s  related 
t o  the 
s. This as­
assumption of these algorithm
to hold in every round r instead of 
channel" 
can be expressed by the following communication 
that is required 
Pcons and Pgood :  
"reliable 
sumption 
predicate 
predicates 
P rel (r) == I::/p E C : I {m E Jl; : m i= ..l }  I  n - b - f. 
protocols need a slightly 
Therefore, 
differ­
: for any set iI'; with n - b - f 
messages from correct 
FLV must return a value different from null. 
ent FLV-liveness property
messages (instead of any set with  all 
processes), 
Note  that 
Algorithm 4. In other words, we can easily 
consensus 
gorithm. We belie
algorithms 
of class 3. 
transform 
algorithm of class I or 2 into a randomized 
2 and 3 ensure this property, 
but not 
any 
al­
randomized 
ve that this is 
Algorithms 
The instantiati
ons of Ben-Or's binary consensus 
algo­
rithms [ I ]  from Algorithm I can be found in [19]. 
not possible for consensus 
sensus. The Computer Journal, 2006. 
[ II ]  L. Lamport. The part-time 
parliament. 
ACM Transactions 
on Computer Systems, 1 6(2) :133- 1 69 ,  May 1 998. 
[ 1 2] L. Lamport, R. Shostak,  and 
M. Pease. The Byzantine gen­
erals problem. ACM Trans. Program. Lang. Syst., 1 982. 
[ 1 3] B .  Lampson. The abcd' s  of pax os. In PODC, 200 1 .  
[ 1 4] H .  C .  Li, A .  Clement, A .  S .  Aiyer, and L .  Alvisi. The pax os 
register. 
In SRDS, 2007. 
[ I S]  D. Malkhi and M. K. Reiter. Byzantine quorum systems. 
Distributed 
Computing, 1 998. 
[ 1 6] J.-P. Martin and L. Alvisi. Fast Byzantine consensus. 
TDSC, 
2006. 
[ 1 7] Z. Milosevic, 
M. Hutle, and A. Schiper. 
with Weak Interactive 
Unifying Byzantine 
Consistency. 
consensus algorithms 
To appear in OPOOIS 2009. 
[ 1 8] A. Mostefaoui, S .  Raj sbaum, and M. Raynal.  A versatile 
and 
modular consensus 
protocol. In DSN, 2002. 
[ 1 9] O. RUtti, Z. Milosevic, 
tion of consensus 
Technical Report LSR-REPORT-2009-00S, EPFL-IC, 2009. 
algorithm 
and A. Schiper. Generic construc­
for benign and Byzantine faults. 
[20] Y. J. Song,  R. 
van  Renesse, F. B. Schneider, 
and D. Dolev. 
The building 
blocks of consensus. 
In ICDCN, 2008. 
978-1-4244-7501-8/10/$26.00 
©201 0 IEEE 
352 
DSN 2010: RUtti et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:58:22 UTC from IEEE Xplore.  Restrictions apply.