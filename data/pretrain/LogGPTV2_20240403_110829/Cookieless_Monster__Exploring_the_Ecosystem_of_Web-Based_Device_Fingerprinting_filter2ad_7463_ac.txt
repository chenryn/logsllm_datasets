which contain personal and possibly ﬁnancial information.
These sites are usually interested in identifying fraudulent
activities and the hijacking of user accounts. The Adult/Ma-
ture category seems to make the most use of ﬁngerprinting
as was the case with the Alexa top 10,000 sites.
The top two categories are also the ones that were the least
expected. 163 websites were identiﬁed as malicious, such as
using exploits for vulnerable browsers, conducting phishing
attacks or extracting private data from users, whereas 1,063
sites were categorized as “Spam” by the two categorizing
engines. By visiting some sites belonging to these categories,
we noticed that many of them are parked webpages, i.e., they
do not hold any content except advertising the availability
of the domain name, and thus do not currently include
ﬁngerprinting code. We were however able to locate many
“quiz/survey” sites that are, at the time of this writing,
including ﬁngerprinting code from one of the three studied
companies. Visitors of these sites are greeted with a “Con-
gratulations” message, which informs them that they have
won and asks them to proceed to receive their prize. At some
547
later step, these sites extract a user’s personal details and try
to subscribe the user to expensive mobile services.
While our data-set is inherently skewed towards “mali-
ciousness” due to its source, it is important to point out that
all of these sites were found to include, at some point in time,
ﬁngerprinting code provided by the three studied providers.
This observation, coupled with the fact that for all three
companies, an interested client must set an appointment
with a sales representative in order to acquire ﬁngerprinting
services, point to the possibility of ﬁngerprinting companies
working together with sites of dubious nature, possibly
for the expansion of their ﬁngerprint databases and the
acquisition of more user data.
IV. FINGERPRINTING THE BEHAVIOR OF SPECIAL
OBJECTS
In Section II, we studied how commercial companies per-
form their ﬁngerprinting and created a taxonomy of ﬁnger-
printable information accessible through a user’s browser. In
Table I, one can notice that, while ﬁngerprinting companies
go to great lengths to discover information about a browser’s
plugins and the machine hosting the browser, they mostly
rely on the browser to willingly reveal its true identity (as
revealed through the navigator.userAgent property
and the User-Agent HTTP header). A browser’s user-agent
is an important part of a system’s ﬁngerprint [18], and thus
it may seem reasonable to assume that if users modify these
default values, they will increase their privacy by hiding
more effectively from these companies.
In this section, however, we demonstrate how fragile the
browser ecosystem is against ﬁngerprinting. Fundamental
design choices and differences between browser types are
used in an effort to show how difﬁcult it can be to limit
the exposure of a browser to ﬁngerprinting. Even different
versions of the same browser can have differences in the
scripting environment that identify the browser’s real family,
version, and, occasionally, even the operating system. In
the rest of this section we describe several novel browser-
identifying techniques that: a) can complement current ﬁn-
gerprinting, and b) are difﬁcult to eliminate given the current
architecture of web browsers.
A. Experimental Fingerprinting Setup
Our novel ﬁngerprinting techniques focus on the special,
browser-populated JavaScript objects; more precisely, the
navigator and screen objects. Contrary to objects
created and queried by a page’s JavaScript code, these ob-
jects contain vendor- and environment-speciﬁc methods and
properties, and are thus the best candidates for uncovering
vendor-speciﬁc behaviors.
To identify differences between browser-vendors and to
explore whether these differences are consistent among
installations of the same browser on multiple systems, we
constructed a ﬁngerprinting script that performed a series of
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
“everyday” operations on these two special objects (such
as adding a new property to an object, or modifying an
existing one) and reported the results to a server. In this
and the following section, we describe the operations of our
ﬁngerprinting script and our results. Our constructed page
included a JavaScript program that performed the following
operations:
1) Enumerated the navigator and screen object,
i.e., request the listing of all properties of the afore-
mentioned objects.
2) Enumerated the navigator object again, to ensure
that the order of enumeration does not change.
3) Created a custom object, populated it, and enumerated
it. A custom, JavaScript-created object, allows us to
compare the behavior of browser-populated objects
(such as navigator) with the behavior of “classic”
JavaScript objects.
4) Attempted to delete a property of the navigator
object, the screen object, and the custom object.
5) Add the possibly-deleted properties back to their ob-
jects.
8) Attempt
objects.
9) Attempt
6) Attempted to modify an existing property of the
navigator and screen objects.
7) If Object.defineProperty is implemented in
the current browser, utilize it to make an existing
property in the navigator, screen, and custom
object non-enumerable.
to delete the navigator and screen
to assign new custom objects
navigator and screen variable names.
to the
At each step, the objects involved were re-enumerated,
and the resulting data was Base64-encoded and sent to our
server for later processing. Thus, at the server side, we
could detect whether a property was deleted or modiﬁed, by
comparing the results of the original enumeration with the
current one. The enumeration of each object was conducted
through code that made use of the prop in obj construct, to
avoid forcing a speciﬁc order of enumeration of the objects,
allowing the engine to list object properties in the way of
its choosing.
B. Results
By sharing the link to our ﬁngerprinting site with friends
and colleagues, we were able, within a week, to gather
data from 68 different browsers installations, of popular
browsers on all modern operating systems. While our data
is small in comparison to previous studies [11], [12], we
are not using it to draw conclusions that have statistical
relevance but rather, as explained in the following sections,
to ﬁnd deviations between browsers and to establish the
consistency of these deviations. We were able to identify the
following novel ways of distinguishing between browsers:
from the ﬁrst
Order of enumeration: Through the analysis of the
three steps of our ﬁngerprinting
output
algorithm (Sec. IV-A), we discovered that
the order of
property-enumeration of special browser objects, like the
navigator and screen objects, is consistently different
between browser families, versions of each browser, and,
in some cases, among deployments of the same version on
different operating systems. While in the rest of this section
we focus to the navigator object, the same principles
apply to the screen object.
Our analysis was conducted in the following manner.
After grouping the navigator objects and their enumer-
ated properties based on browser families, we located the
navigator object with the least number of properties.
This version was consistently belonging to the oldest version
of a browser, since newer versions add new properties
which correspond to new browser features, such as the
navigator.doNotTrack property in the newer versions
of Mozilla Firefox. The order of the properties of this
object, became our baseline to which we compared the
navigator objects of all subsequent versions of the same
browser family. To account for ordering changes due to the
introduction of new properties in the navigator object,
we simply excluded all properties that were not part of
our original baseline object, without however changing the
relative order of the rest of the properties. For instance,
assume an ordered set of features B, where B0 = {a, b,
c, d} and B1 = {a, b, e, c, d, f}. B1 has two new elements
in comparison with B0, namely e and f which, however,
can be removed from the set without disrupting the relative
order of the rest. For every browser version within the same
browser-family, we compared the navigator object to the
baseline, by ﬁrst recording and removing new features and
then noting whether the order of the remaining features was
different from the order of the baseline.
The results of this procedure are summarized in Table II.
For each browser family, we compare the ordering of the
navigator object among up to ﬁve different versions.
The most current version is denoted as Vc. The ﬁrst ob-
servation is that
in almost 20 versions of browsers, no
two were ever sharing the same order of properties in the
navigator object. This feature by itself, is sufﬁcient to
categorize a browser to its correct family, regardless of
any property-spooﬁng that the browser may be employing.
Second, all browsers except Chrome maintain the ordering
of navigator elements between versions. Even when new
properties were introduced, these do not alter the relative
order of all other properties. For instance, even though the
newest version of Mozilla Firefox (Vc) has 7 extra features
when compared to the oldest version (Vc-4), if we ignore
these features then the ordering is the same with the original
ordering (W).
Google Chrome was the only browser that did not exhibit
this behavior. By analyzing our dataset, we discovered that
548
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
Browser
Mozilla Firefox W
Microsoft IE
Opera
Google Chrome
Vc-4
-
Y
Z
Vc
Vc-3
W+1 W+4 W+5 W+7
X+1
-
Y+1
Y+5
Z(cid:2)(cid:2)(cid:2)+1
Z
Vc-1
X
Y+3
Z(cid:2)(cid:2)+1
Vc-2
X
Y+1
Z(cid:2)+1
DIFFERENCES IN THE ORDER OF N A V I G A T O R OBJECTS BETWEEN
Table II
VERSIONS OF THE SAME BROWSER
Chrome not only changed the order between subsequent
versions of the browser, but also between deployments of the
same browser on different operating systems. For instance,
Google Chrome v.20.0.1132.57 installed on Mac OSX has
a different order of elements than the same version installed
on a Linux operating system. In Table II, we compare the
order of properties of the navigator object when the
underlying OS is Windows XP. While this changing order
may initially appear to be less-problematic than the stable
order of other browsers, in reality, the different orderings can
be leveraged to detect a speciﬁc version of Google Chrome,
and, in addition, the operating system on which the browser
is running.
Overall, we discovered that
the property ordering of
special objects, such as the navigator object, is consistent
among runs of the same browser and runs of the same
version of browsers on different operating systems. Con-
trastingly, the order of properties of a custom script-created
object (Step 3 in Section IV-A) was identical among all the
studied browsers even though, according to the ECMAScript
speciﬁcation, objects are unordered collections of proper-
ties [28] and thus the exact ordering can be implementation-
speciﬁc. More precisely, the property ordering of the custom
objects was always the same with the order of property
creation.
In general, the browser-speciﬁc, distinct property ordering
of special objects can be directly used to create models of
browsers and, thus, unmask the real identity of a browser.
Our ﬁndings are in par with the “order-matters” observation
made by previous research: Mayer discovered that the list of
plugins as reported by browsers was ordered based on the
installation time of each individual plugin [11]. Eckersley
noticed that the list of fonts, as reported by Adobe Flash
and Sun’s Java VM, remained stable across visits of the
same user [12].
Unique features: During the ﬁrst browser wars in
the mid-90s, browser vendors were constantly adding new
features to their products, with the hope that developers
would start using them. As a result, users would have to use a
speciﬁc browser, effectively creating a browser lock-in [29].
The features ranged from new HTML tags to embedded
scripting languages and third-party plugins. Signs of this
“browser battle” are still visible in the contents of the user-
Browser
Mozilla Firefox
Google Chrome
Opera
Microsoft IE
Unique methods & properties
screen.mozBrightness
screen.mozEnabled
navigator.mozSms
+ 10
navigator.webkitStartActivity
navigator.getStorageUpdates
navigator.browserLanguage
navigator.getUserMedia
screen.logicalXDPI
screen.fontSmoothingEnabled
navigator.appMinorVersion
+11
UNIQUE METHODS AND PROPERTIES OF THE N A V I G A T O R AND S C R E E N
OBJECTS OF THE FOUR MAJOR BROWSER-FAMILIES
Table III
agent string of modern browsers [30].
Today, even though the HTML standard is governed by
the W3C committee and JavaScript by Ecma International,
browser vendors still add new features that do not be-
long to any speciﬁc standard. While these features can
be leveraged by web developers to provide users with a
richer experience, they can also be used to differentiate
a browser from another. Using the data gathered by our
ﬁngerprinting script, we isolated features that were available
in only one family of browsers, but not in any other. These
unique features are summarized in Table III. All browser
families had at least two such features that were not shared
by any other browser. In many cases, the names of the
new features were starting with a vendor-speciﬁc preﬁx,
such as screen.mozBrightness for Mozilla Firefox
and navigator.msDoNotTrack for Microsoft Internet
Explorer. This is because browser-vendors are typically
allowed to use preﬁxes for features not belonging to a
standard or not yet standardized [31]. In the context of
ﬁngerprinting, a script can query for the presence or absence
of these unique features (e.g., typeof screen.mozBrightness
!= “undeﬁned”) to be certain of the identity of any given
browser.
An interesting sidenote is that
these unique features
can be used to expose the real version of Mozilla Firefox
is using the Torbutton
browser, even when the user
extension. Torbutton
replaces
the navigator and
screen objects with its own versions, spooﬁng the
values of certain properties, so as to protect the privacy of
the user [32]. We installed Torbutton on Mozilla Firefox
version 14 and, by enumerating the navigator object, we
observed that, among others, the Torbutton had replaced the
navigator.userAgent property with the equivalent
of Mozilla Firefox version 10, and it was claiming that
our platform was Windows instead of Linux. At the same
time, however,
that
Mozilla introduced in versions 11 to 14 of Firefox (such as
navigator.mozBattery and navigator.mozSms)
special Firefox-speciﬁc properties
549
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
were still available in the navigator object. These
found
discrepancies, combined with other weaknesses
in less
thorough user-agent-spooﬁng extensions
(see
Section V), can uncover not only that the user is trying to
hide, but also that she is using Torbutton to do so.
Mutability of special objects:
In the two previous
sections, we discussed the ability to exploit the enumeration-
order and unique features of browsers for ﬁngerprinting. In
this section, we investigate whether each browser treats the
navigator and screen objects like regular JavaScript
objects. More precisely, we investigate whether these objects
are mutable,
i.e., whether a script can delete a speciﬁc
property from them, replace a property with a new one, or
delete the whole object. By comparing the outputs of steps
four to nine from our ﬁngerprinting algorithm, we made the
following observations.
Among the four browser families, only Google Chrome
allows a script to delete a property from the navigator
object. In all other cases, while the “delete” call returns
successfully and no exceptions are thrown, the properties
remain present
in the special object. When our script
attempted to modify the value of a property of navigator,
Google Chrome and Opera allowed it, while Mozilla Firefox
and Internet Explorer ignored the request. In the same way,
these two families were the only ones allowing a script
to reassign navigator and screen to new objects.
Interestingly, no browser allowed the script
to simply
delete the navigator or screen object. Finally, Mozilla
Firefox behaved in a unique way when requested to make a
certain property of the navigator object non-enumerable.
Speciﬁcally,
instead of just hiding the property, Firefox
behaved as if it had actually deleted it, i.e., it was no longer
accessible even when requested by name.
Evolution of functionality: Recently, we have seen
a tremendous innovation in Web technologies. The com-