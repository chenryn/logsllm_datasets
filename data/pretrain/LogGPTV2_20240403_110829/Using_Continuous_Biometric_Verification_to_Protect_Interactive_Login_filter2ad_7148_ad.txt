Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:41 UTC from IEEE Xplore.  Restrictions apply. 
interactive session if it is in progress, or the session id of
the next interactive session if none is in progress. Line 6
tests whether the progress belongs to the current interac-
tive session and if it does, its activity is controlled. Other-
wise, it may belong to a prior interactive session (line 15)
in which case it is frozen. A utility program similar to ps
can conceivably be written that examines every task_stru-
ct and sends a signal to each process whose session id cor-
responds to a prior interactive session. This would clean out
frozen processes belonging to an earlier interactive session
that will never be executed.
Lines 8-11 specify that critical [2] system calls be
frozen, non-critical ones be left free while the remaining
ones be delayed. The delay value is an exponential function
of how far the current probability estimate of user presence
is from some suitable threshold.
(cid:71)
(cid:68)
(cid:72)
(cid:75)
(cid:85)
(cid:72)
(cid:89)
(cid:50)
(cid:56)
(cid:51)
(cid:38)
(cid:8)
(cid:3)
(cid:3)
(cid:23)
(cid:22)(cid:17)(cid:24)
(cid:22)
(cid:21)(cid:17)(cid:24)
(cid:21)
(cid:20)(cid:17)(cid:24)
(cid:20)
(cid:19)(cid:17)(cid:24)
(cid:19)
(cid:71)
(cid:68)
(cid:72)
(cid:85)
(cid:72)
(cid:87)
(cid:76)
(cid:85)
(cid:90)
(cid:87)
(cid:68)
(cid:87)
(cid:86)
(cid:87)
(cid:68)
(cid:87)
(cid:86)
(cid:73)
(cid:79)
(cid:79)
(cid:68)
(cid:70)
(cid:86)
(cid:92)
(cid:54)
(cid:79)
(cid:72)
(cid:86)
(cid:82)
(cid:70)
(cid:18)
(cid:81)
(cid:72)
(cid:83)
(cid:82)
(cid:54)(cid:92)(cid:86)(cid:87)(cid:72)(cid:80)(cid:3)(cid:38)(cid:68)(cid:79)(cid:79)
(cid:10)
(cid:86)
(cid:71)
(cid:73)
(cid:3)
(cid:81)
(cid:82)
(cid:3)
(cid:87)
(cid:70)
(cid:72)
(cid:72)
(cid:86)
(cid:79)
(cid:87)
(cid:76)
(cid:91)
(cid:72)
(cid:14)
(cid:78)
(cid:85)
(cid:82)
(cid:73)
(cid:72)
(cid:89)
(cid:70)
(cid:72)
(cid:91)
(cid:72)
(cid:14)
(cid:78)
(cid:85)
(cid:82)
(cid:73)
(a) Micro benchmarks
without contauth veriﬁcation
with contauth veriﬁcation
Real
276
346
User
258
263
Sys
16
17
Overhead (cid:25) 25%
(b) Macro benchmarks
Figure 9. Performance benchmarks.
When Psafe exceeds Tsafe, all frozen processes in the cur-
rent interactive session are “unfrozen”, and delayed pro-
cesses are made runnable. This is practically important and
affects system usability because if the user looks away from
the camera and does not have his ﬁnger against the mouse,
the system may start delaying his processes. But as soon as
a good sample is obtained, the system ought not to penal-
ize processes that are currently being delayed and wait until
their duration of delay has ended. Because the exponential
function can produce very large delay values as Psafe ! 0;
to ensure a rapid recovery once the monitor regains conﬁ-
dence in user presence, the driver issues a wakeup call to
all processes that were delayed.
6. Performance
We describe results of both micro and macro benchmarks.
6.1. Micro benchmarks
To assess the performance impact of our Linux kernel
changes, we ran the lmbench [9] suite to determine the
overhead introduced in the system call path. The results
are shown in Figure 9.
The percent overhead on the y-axis is the percent in-
crease in time for executing a system call with our modiﬁ-
cations for stopping and delaying processes when compared
with a standard 2.4.26 Linux kernel that can be downloaded
from www.kernel.org. The overhead is dependent on the
system call exercised. The overhead is as low as :4% for the
fork+execve combination to a 3:75% overhead for read. We
believe this to be acceptable.
6.2. Macro benchmarks
For macro benchmark tests we assessed the performance
impact on compiling the Linux (2.4.26) kernel. The com-
pilation generates about 1200 object ﬁles. We chose the
Linux kernel compilation because it pollutes the cache and
its processor utilization is signiﬁcant. The face biometric is
sampled twice per second while the ﬁngerprint biometric is
sampled once in two seconds. The numbers in Figure 9 are
averages over three runs. The overhead is about 25% for
our operating environment.
7. Usability
A standard metric for assessing the usability of a biomet-
ric is its FRR. In our system, false rejects result in process
delays, so one way to measure usability is the delay that or-
dinary tasks suffer in their time-to-completion. If the over-
head (reﬂected as delay) introduced by the normal use of
biometrics is x% (see Section 6), then we are interested in
determining how much further ordinary tasks are delayed
under normal use of the system. We ran some simple op-
erations that ordinary users might perform in their use of a
computer to assess this difference.
1. ls -R /usr/src/linux-2.4.26 results in a “real” time
overhead of 36%, about an 11% increase.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:41 UTC from IEEE Xplore.  Restrictions apply. 
2. ls -R /usr/local results in a “real” time overhead of
37%.
3. grep -R  /usr/src/linux-2.4.26 results in a
“real” time overhead of 44%.
All times are averages of 5 runs. So the impact on usability
of using the system in practice is an extra 10-20% degra-
dation. While the biometric veriﬁcation can conceivably be
ofﬂoaded to extra hardware, the delays resulting from FRR
errors cannot.
For our operating environment, our security goals seem
to be met although that is a qualitative judgment at this
point. We have tried to switch users suddenly and execute
rm /tmp/foo, but the system freezes before the command
is fully typed. A caveat is that key strokes by the imposter
may not be delivered to the application (shell) but only be-
cause it is not executing. When the correct user comes back,
these key strokes would be delivered and damaging action
performed. To be totally secure, the tty/pty driver or the
X server must somehow be made to discard all user input
when a process is delayed or frozen.
8. Conclusion and Future Work
We believe that the reactive system that we set out to build
works reasonably well at this point. Biometric veriﬁcation
is the main bottleneck in the computation and we are look-
ing into how to ofﬂoad that into an FPGA-based implemen-
tation. We are also investigating how to derive a mathemat-
ical basis for computing the “sweet spot” of the system that
maximizes a utility function, such as U (u) + S(s) given the
various parameters of the system. u is the raw fractional
delay overhead in using the system and U ((cid:1)) maps it to a
utility value. Similarly s is a security metric, e.g., the FAR
of the system, and S((cid:1)) maps it to a utility value. u and s
in turn are functions of the biometric modalities, their ROC
curves, the number of samples used for each biometric de-
cision, and the multi-modality fusion method.
The thrust of this paper is less towards biometrics per se,
although our multi-modal combination technique is new;
rather it is about how to integrate biometrics as a useful
general abstraction into the operating system so that all pro-
cesses can gain from it, with the aim of enhancing the se-
curity of the system. Now that newer biometric devices are
commonly appearing that can permit passive biometrics to
be integrated into normal computer use, such abstractions
can be useful to investigate at a lower layer so that computer
response can be provided in a more general and encompass-
ing manner.
Acknowledgements
This work was funded by the National University of Singa-
pore, project no. R-252-146-112. The anonymous review-
ers gave excellent feedback that has helped improve the pre-
sentation of the paper.
References
[1] A. Altinok and M. Turk. Temporal Integration for Contin-
uous Multimodal Biometrics. Proceedings of the Workshop
on Multimodal User Authentication, December 2003.
[2] M. Bernaschi, E. Gabrielli, and L. V. Mancini. REMUS:
A Security-Enhanced Operating System. ACM Transactions
on Information and System Security, 5(1):36–61, 2002.
[3] N. Crook. The kdm Handbook. Available at http://docs.k-
de.org/en/3.1/kdebase/kdm/.
[4] D. E. Denning. An Intrusion-Detection Model. IEEE Trans-
actions on Software Engineering, 13(2), February 1987.
[5] R. Duda, P. Hart, and D. Stork. Pattern Classiﬁcation, 2nd
edition. John Wiley and Sons, 2000.
[6] J. Kittler, M. Hatef, R. P. W. Duin, and J. Matas. On combin-
ing classiﬁers. IEEE Trans. on PAMI, 20(3):226–239, Mar.
1998.
[7] G. N. Lambert. A comparative study of system response
time on program developer productivity. IBM Systems Jour-
nal, 23(1):36–43, 1984.
[8] R. Love. Linux Kernel Development. SAMS, 2003.
[9] L. McVoy and C. Staelin. lmbench: Portable Tools for Per-
formance Analysis. USENIX 1996 Annual Technical Con-
ference, January 1996.
[10] A. G. Morgan. The Linux-PAM System Administrators’
Guide. Documentation distributed with Linux-PAM. Avail-
able at http://www.kernel.org/pub/linux/libs/pam/pre/lib-
rary/.
[11] C. P. Pﬂeeger. Security in Computing. Prentice Hall, 2nd
edition, 1996.
[12] N. Provos. Improving Host Security with System Call Poli-
cies. 12th USENIX Security Symposium, August 2003.
[13] A. Ross and A. K. Jain. Information fusion in biometrics.
Pattern Recognition Letters, 24(13):2115–2125, 2003.
[14] T. Sim, R. Sukthankar, M. Mullin, and S. Baluja. Memory-
based Face Recognition for Visitor Identiﬁcation.
In Pro-
ceedings of the IEEE International Conference on Automatic
Face and Gesture Recognition, 2000.
[15] S. B. Solutions. Secugen optimouse iii. http://www.secug-
en.com/products/po.htm.
[16] A. Somayaji. Operating System Stability and Security
through Process Homeostasis. PhD thesis, University of
New Mexico, Department of Computer Science, July 2002.
[17] The Linux Kernel Archives. http://www.kernel.org/.
[18] P. Viola and M. Jones. Robust real-time object detection.
International Journal of Computer Vision, 2002.
[19] S. Zhang, R. Janakiraman, T. Sim, and S. Kumar. Continu-
ous Veriﬁcation Using Multimodal Biometrics. InThe 2nd
International Conference on Biometrics, 2006.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:41 UTC from IEEE Xplore.  Restrictions apply.