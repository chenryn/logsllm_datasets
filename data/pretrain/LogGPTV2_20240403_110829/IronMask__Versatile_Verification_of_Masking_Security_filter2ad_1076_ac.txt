### Tuple and Gaussian Elimination

To perfectly simulate a tuple, it is necessary to have access to all the input shares involved in the remaining expressions. The function `shares(.)` simply extracts the indices of these input shares.

### Lemma 1: Input Shares for Simulating Probes

**Lemma 1.** Let \( G \) be an \( n \)-share gadget. Let \( \mathbf{P} = (p_1, \ldots, p_d) \) be a tuple of probes on \( G \). Let \( S \in K^{d \times \rho} \) be the matrix such that
\[ S = (\mathbf{s}_{p_1} \mid \mathbf{s}_{p_2} \mid \cdots \mid \mathbf{s}_{p_d}) \]
where each \( \mathbf{s}_{p_i} \) is a column vector of \( S \). Let \( S' \) be the row-reduced form of the matrix \( S \) such that
\[ S' = \begin{pmatrix}
I_{d-m} & 0 \\
0 & 0
\end{pmatrix} \]
up to some permutations on the rows, with \( N \) being an invertible matrix in \( K^{d \times d} \). Define \( \mathbf{P}' = N \cdot \mathbf{P} = (p'_1, \ldots, p'_m, p'_{m+1}, \ldots, p'_d) \).

Then, the set of input shares necessary to simulate the probes in \( \mathbf{P} \) is given by \( \text{shares}(p'_1, \ldots, p'_m) \).

**Sketch of Proof.** The proof follows the arguments from Theorem 3.1 in [11] and Theorem 3.2 in [12]. Since \( N \) is invertible, we can perfectly simulate the probes in \( \mathbf{P} \) by simulating the probes in \( \mathbf{P}' \). Each algebraic expression in \( (p'_{m+1}, \ldots, p'_d) \) contains a random value that does not appear in any other expression. We can thus perfectly simulate \( (p'_{m+1}, \ldots, p'_d) \) by generating \( d - m \) uniform random values without needing any input shares. The remaining expressions \( (p'_1, \ldots, p'_m) \) contain no random values and are of the form \( p'_i = f_p(\mathbf{x}_1, \ldots, \mathbf{x}_m) \). To perfectly simulate each of them, we need the input shares involved in each \( f_p(\mathbf{x}_1, \ldots, \mathbf{x}_m) \), which are indexed by \( \text{shares}(p'_1, \ldots, p'_m) \).

Using the input shares \( (\mathbf{x}_1|I_1, \ldots, \mathbf{x}_m|I_m) \), we can perfectly simulate \( (p'_1, \ldots, p'_m) \) and thus perfectly simulate all algebraic expressions in \( \mathbf{P}' \), leading to a perfect simulation of the probes in \( \mathbf{P} \).

### Application to SIS Evaluation

Lemma 1 provides a method to evaluate the function SIS (Simulatable Input Shares) for LR-gadgets. The set of probes \( \mathbf{P} \) in the lemma must be defined as the union of \( \mathbf{P} \) and \( \mathbf{y}|O \) in an evaluation of SIS. An evaluation of SIS consists of a row reduction on the matrix of random dependencies \( S \), followed by applying the function `shares(.)` on the obtained expressions without random values. The output of SIS is the set of input shares necessary for a perfect simulation of all the probes.

### Characterization of Gadgets with Non-Linear Randomness

#### NLR-Gadgets

In this section, we extend the algebraic characterization for LR-gadgets to NLR-gadgets, which perform non-linear operations on input shares mixed with randomness. An NLR-gadget is an \( \ell \)-to-\( m \) gadget \( G : (\mathbf{x}_1, \ldots, \mathbf{x}_\ell) \mapsto (\mathbf{y}_1, \ldots, \mathbf{y}_m) \) with the output of the form:
\[ (\mathbf{y}_1, \ldots, \mathbf{y}_m) := F(R_1(\mathbf{x}_1, \mathbf{r}_1), \ldots, R_\ell(\mathbf{x}_\ell, \mathbf{r}_\ell)), \mathbf{r}_{\ell+1} \]
where \( F \) is any arithmetic circuit, the \( R_i \) are linear arithmetic circuits, and the \( \mathbf{r}_i \) are vectors of random values uniformly drawn from \( K^{\rho_i} \). We assume \( F \) computes a homogeneous multi-linear form.

For clarity, we describe the verification method for 2-input gadgets; the extension to \( \ell \) inputs is straightforward. Thus, we present NLR-gadgets as 2-to-\( m \) gadgets \( G : (\mathbf{x}_1, \mathbf{x}_2) \mapsto (\mathbf{y}_1, \ldots, \mathbf{y}_m) \) with the output of the form:
\[ (\mathbf{y}_1, \ldots, \mathbf{y}_m) := F(R_1(\mathbf{x}_1, \mathbf{r}_1), R_2(\mathbf{x}_2, \mathbf{r}_2)), \mathbf{r}_3 \]

This characterization covers a wide majority of multiplication gadgets, including those described in [30], [13], [16], and [20].

#### Verification Technique for NLR-Gadgets

The verification technique for NLR-gadgets involves several iterations of the verification process for LR-gadgets used in Lemma 1. Suppose we have a tuple of probes \( \mathbf{P} = (p_1, \ldots, p_k, p_{k+1}, \ldots, p_d) \) where \( (p_1, \ldots, p_k) \) are of the form \( p_i = f_p(\mathbf{z}_1, \mathbf{z}_2) + \mathbf{r}_3 \) and \( (p_{k+1}, \ldots, p_d) \) are of the form \( p_i = \mathbf{s}_p^T \mathbf{z}_i + \mathbf{r}_i \).

1. **Gaussian Elimination on Probes:**
   - Apply Gaussian elimination on the probes \( (p_1, \ldots, p_k) \) with respect to the vector of randoms \( \mathbf{r}_3 \).
   - Construct the matrix \( S_3 = (\mathbf{s}_{p_1} \mid \cdots \mid \mathbf{s}_{p_k}) \) and let \( N_3 \) be the permutation matrix such that \( S_3' = N_3 \cdot S_3 \) is the row-reduced form.
   - Derive the new tuple \( \mathbf{P}' = N_3 \cdot \mathbf{P} = (p'_1, \ldots, p'_k, p'_{k+1}, \ldots, p'_d) \).

2. **Factorization and New Tuples:**
   - For each \( p'_i = f_p(\mathbf{z}_1, \mathbf{z}_2) \), factor the expression with respect to \( (\mathbf{x}_1 || \mathbf{r}_1) \) and construct a new tuple \( \mathbf{P}_2 \).
   - Repeat the factorization for \( (\mathbf{x}_2 || \mathbf{r}_2) \) and construct a new tuple \( \mathbf{P}_1 \).

3. **Gaussian Elimination on New Tuples:**
   - Apply Gaussian elimination on \( \mathbf{P}_1 \) with respect to \( (\mathbf{x}_1, \mathbf{r}_1) \) and on \( \mathbf{P}_2 \) with respect to \( (\mathbf{x}_2, \mathbf{r}_2) \).
   - Obtain the sets of input shares \( I_1 \) and \( I_2 \) that are necessary and sufficient for a perfect simulation of \( \mathbf{P}_1 \) and \( \mathbf{P}_2 \), respectively.

4. **Conclusion:**
   - The sets \( I_1 \) and \( I_2 \) are the necessary and sufficient sets of input shares for a perfect simulation of \( \mathbf{P} \).

**Lemma 2.** Let \( G \) be a 2-input \( n \)-share NLR-gadget. Let \( \mathbf{P} = (p_1, \ldots, p_d) \) be a tuple of probes on \( G \). Let \( \mathbf{P}_1 \) and \( \mathbf{P}_2 \) be the tuples of linear expressions with respect to \( (\mathbf{x}_1, \mathbf{r}_1) \) and \( (\mathbf{x}_2, \mathbf{r}_2) \) obtained by the above method. The sets \( I_1 \) and \( I_2 \) obtained by applying the method of Lemma 1 on \( \mathbf{P}_1 \) and \( \mathbf{P}_2 \) are the sets of input shares necessary and sufficient to simulate \( \mathbf{P} \).

The verification method introduced above describes the procedure of the function SIS in the case of NLR-gadgets to determine the simulatability of a set of probes.