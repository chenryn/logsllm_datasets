tuple (which is equivalent to perfectly simulating the tuple
given before Gaussian elimination), there is no choice but to
have access to all of the input shares that are involved in the
remaining expressions, which is why shares(.) simply extracts
the indices of these input shares.
Lemma 1. Let G be an n-share gadget. Let (cid:2)P = (p1, . . . , pd)
be a tuple of probes on G. Let S ∈ K
d×ρ be the matrix such
that
S = ((cid:2)sp1
| (cid:2)sp2
| ··· | (cid:2)spd )
(i.e. each (cid:2)spi is a column vector of S) and let S
reduced form of the matrix S such that S
(cid:6)
is of the form
(cid:6)
be the row
(cid:8)
(cid:9)
(cid:6)
S
=
0m,d−m 0m,R−d+m
Id−m
S
(cid:6)(cid:6)
up to some permutations on the rows with S
N is an invertible matrix in K
d×d. Let (cid:2)P
(cid:6)
(cid:6)
= N · S where
be deﬁned as
(cid:6)
(cid:2)P
= N · (cid:2)P = (p
(cid:6)
1, . . . , p
(cid:6)
(cid:6)
m+1, . . . , p
m, p
(cid:6)
d) .
(cid:6)
m).
(cid:6)
1, . . . , p
Then, the set of input shares necessary to simulate the probes
in (cid:2)P is shares(p
Sketch of proof. The proof of the result follows the proof of
Theorem 3.1 from [11] and Theorem 3.2 of [12]. It is shown
in the latter that we can perfectly simulate the probes in (cid:2)P
(cid:6), since the matrix N
by perfectly simulating all probes in (cid:2)P
−1 · (cid:2)P
(cid:6). Then, to
is invertible and we can obtain (cid:2)P from N
(cid:6), we observe from
perfectly simulate probes in the tuple (cid:2)P
(cid:6)
(cid:6)
(cid:6) that each algebraic expression in the tuple (p
S
m+1, . . . , p
d)
contains a random value that does not appear in any other
(cid:6). We can thus perfectly simulate
algebraic expression in (cid:2)P
d) by generating d − m uniform random values
(cid:6)
(p
(cid:6)
m+1, . . . , p
5
146
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
without the need of any input shares. The remaining algebraic
(cid:6)
(cid:6)
m) contain no random values and are all
expressions (p
1, . . . , p
i ((cid:2)x1, . . . , (cid:2)xm) for i ∈ [m]. Hence, to per-
(cid:6)
of the form p
i = fp(cid:2)
fectly simulate each of them we need (and only need) the input
shares which are involved in each fp(cid:2)
i ((cid:2)x1, . . . , (cid:2)xm), namely the
(cid:6)
inputs shares indexed by (I1, . . . , I(cid:2)) := shares(p
m).
Using the input shares ((cid:2)x1|I1 , . . . , (cid:2)x(cid:2)|I(cid:2) ) we can perfectly
(cid:6)
simulate (p
m) and thus perfectly simulate all algebraic
(cid:6), from which we get a perfect simulation of
expressions in (cid:2)P
the probes in (cid:2)P .
(cid:6)
1, . . . , p
(cid:6)
1, . . . , p
Lemma 1 actually provides a way to evaluate the function
SIS in the case of LR-gadgets. Note that the set of probes
(cid:2)P in the lemma must be deﬁned as the union of (cid:2)P and
(cid:2)y|O in an evaluation of SISG( (cid:2)P , O) (while used to deﬁne
security notions, SIS is based on two arguments to differ-
entiate probes on internal wires and probes on output shares
whereas this distinction is not used in the evaluation process
of Lemma 1). According to the above lemma, an evaluation
of SIS simply consists of a row reduction on the matrix of the
random dependencies (S), after which the function shares(.)
is used on the obtained expressions without random values
(cid:6)
(cid:2)) in the lemma). The output of SIS is then
(i.e. (p
exactly the output of shares(.), which is the set of input shares
necessary for a perfect simulation of all the probes. We show
in Section IV how this technique is efﬁciently implemented in
our veriﬁcation tool.
(cid:6)
1, . . . , p
B. Characterization of Gadgets with Non-Linear Randomness
In this section, we extend the algebraic characterization
for LR-gadgets of Section III-A to NLR-gadgets, i.e. gad-
gets performing non-linear operations on input shares mixed
with randomness. An NLR-gadgets is an (cid:3)-to-m gadget G :
((cid:2)x1, . . . , (cid:2)x(cid:2)) (cid:8)→ ((cid:2)y1, . . . , (cid:2)ym) with the output of the form:
(cid:4)
F (R1((cid:2)x1, (cid:2)r1), . . . , R(cid:2)((cid:2)x(cid:2), (cid:2)r(cid:2))), (cid:2)r(cid:2)+1
((cid:2)y1, . . . , (cid:2)ym) := R(cid:2)+1
(cid:3)
where F is any arithmetic circuit, the Ri are linear arithmetic
circuits and the (cid:2)ri are vectors of random values uniformly
ρi. We further assume that F computes a
drawn from K
homogeneous multi-linear form, namely F ((cid:2)z1, . . . , (cid:2)z(cid:2)) is a
sum of degree-(cid:3) monomials, each of which being a product
containing exactly one coordinate from each (cid:2)zi.
For the sake of clarity, we describe the veriﬁcation method
for the particular case of 2-input gadgets; the extension to (cid:3)
inputs is straightforward. We thus present NLR-gadgets as 2-
to-m gadgets G : ((cid:2)x1, (cid:2)x2) (cid:8)→ ((cid:2)y1, . . . , (cid:2)ym) with the output of
the form:
(cid:3)
(cid:4)
((cid:2)y1, . . . , (cid:2)ym) := R3
F (R1((cid:2)x1, (cid:2)r1), R2((cid:2)x2, (cid:2)r2)), (cid:2)r3
This characterization notably covers a wide majority (if not
the totality) of multiplication gadgets. It covers in particular
multiplication gadgets which ﬁrst start by refreshing one of
(resp. each of) their inputs before performing sharewise prod-
ucts that are ﬁnally recombined into the output sharing (with
additional randomness). Such multiplication gadgets have been
recently described in [30], [13], [16], [20].
6
147
T
3 · (cid:2)sp
Any probe on such an NLR-gadget is either a probe on the
inner circuits Ri((cid:2)xi, (cid:2)ri) and is of the form:
i · (cid:2)sp
i · (cid:2)wp + (cid:2)r
(6)
for i ∈ {1, 2} (since the Ri are linear arithmetic circuits) with
(cid:2)wp ∈ K
ρi, or is a probe on the outer circuits and is
of the form:
n, (cid:2)sp ∈ K
p = (cid:2)x
T
T
p = fp( (cid:2)z1, (cid:2)z2) + (cid:2)r
(7)
where (cid:2)zi := Ri((cid:2)xi, (cid:2)ri) for i ∈ {1, 2} with (cid:2)sp ∈ K
ρ3, and for
n)2 → K. We show hereafter
some arithmetic function fp : (K
that we can still obtain an efﬁcient and complete evaluation
of SIS for those gadgets, which in turn yields an efﬁcient
veriﬁcation of the considered security notions.
The veriﬁcation technique for NLR-gadgets essentially con-
sists in several iterations of the veriﬁcation process for LR-
gadgets used in Lemma 1. The steps of the technique are
as follows. Suppose that we have a tuple of probes (cid:2)P =
(p1, . . . , pk, pk+1, . . . , pd) where (p1, . . . , pk) are all of the
form (7) while (pk+1, . . . , pd) are all of the form (6).
(cid:6)
(cid:6)
1, . . . , p
(cid:6)
(cid:6)
m, p
m+1, . . . , p
1) First, we apply the Gaussian elimination technique of
Section III-A on the probes (p1, . . . , pk) with respect to
the vector of randoms (cid:2)r3. This is possible since all of
these probes respect the form (5) w.r.t. inputs ( (cid:2)z1, (cid:2)z2)
|
| (cid:2)sp2
and randomness (cid:2)r3. Speciﬁcally, let S3 := ((cid:2)sp1
··· | (cid:2)spk ), with (cid:2)spi deﬁned from (7), and let N3 the
3 = N3 · S3 is the row re-
(cid:6)
permutation matrix such that S
duced form of S3 (see Lemma 1). From this, we get a new
:= N3· (cid:2)P = (p
(cid:6)
(cid:6)
derived tuple (cid:2)P
k)
1, . . . , p
and we know from Lemma 1 that each of the expression
(cid:6)
(cid:6)
in (p
k) can be perfectly simulated by simply
m+1, . . . , p
generating k−m uniform random values. Thus, we end up
(cid:6)
with (p
m), which we need to perfectly simulate,
and where each of the p
i ( (cid:2)z1, (cid:2)z2) with
no random values from (cid:2)r3, along with the remaining
probes (pk+1, . . . , pd). We then construct the new tuple
(cid:6)
(cid:6)(cid:6)
to simulate (cid:2)P
m, pk+1, . . . , pd), which we
(cid:6)(cid:6)
(cid:6)(cid:6)
rewrite as (cid:2)P
m+d−k). Thus, in order to
perfectly simulate the tuple of probes (cid:2)P , we need to
(cid:6)(cid:6).
perfectly simulate the probes in (cid:2)P
We stress at this stage that each algebraic expression
(cid:6)(cid:6)
(cid:6)(cid:6) is either of the form p
(cid:6)(cid:6)
in (cid:2)P
i ( (cid:2)z1, (cid:2)z2) with
i = fp(cid:2)(cid:2)
p
i
i a homogeneous bilinear form (this is of the ﬁrst m
fp(cid:2)(cid:2)
coordinates resulting from Gaussian elimination) or of the
form (6) (i.e. the probes on R1 or R2 that are not affected
by the previous Gaussian elimination since they do not
contain any randoms from (cid:2)r3).
(cid:6)
i is of the form fp(cid:2)
(cid:6)
1, . . . , p
(cid:6)(cid:6)
1 , . . . , p
= (p
= (p
in (cid:2)P
2) For each p
i ( (cid:2)z1, (cid:2)z2), we
factor its algebraic expression with respect to the vector
of values ((cid:2)x1||(cid:2)r1). In other terms, we rewrite each p
(cid:6)(cid:6)
i as
(cid:6)(cid:6) of the form p
(cid:6)(cid:6)
i = fp(cid:2)(cid:2)
(cid:6)(cid:6)
i
i = ((cid:2)x1||(cid:2)r1)
(cid:6)(cid:6)
T · (cid:2)hp(cid:2)(cid:2)
p
i
(8)
i
where (cid:2)hp(cid:2)(cid:2)
is a tuple of n + ρ1 algebraic expressions of
the form (6) w.r.t. ((cid:2)x2, (cid:2)r2). We then construct a new tuple
(cid:14) ··· (cid:14) (cid:2)hp(cid:2)(cid:2)
(cid:2)P2 := ((cid:2)hp(cid:2)(cid:2)
m) to which we append all the
1
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
expressions p
from R2).
(cid:6)(cid:6)
i of the form (6) w.r.t. ((cid:2)x2, (cid:2)r2) (i.e. probes
3) We perform the same procedure as in the last step but
(cid:6)(cid:6)
this time factoring each p
i =
i ( (cid:2)z1, (cid:2)z2) with respect to ((cid:2)x2||(cid:2)r2), rewriting each p
(cid:6)(cid:6)
fp(cid:2)(cid:2)
i
as
(cid:6)(cid:6) of the form p
in (cid:2)P
(cid:6)(cid:6)
i
i = ((cid:2)x2||(cid:2)r2)
(cid:6)(cid:6)
T · (cid:2)gp(cid:2)(cid:2)
p
i
(9)
1
m ) where the coordinates of the (cid:2)gp(cid:2)(cid:2)
From those expressions we deﬁne a new tuple (cid:2)P1 :=
(cid:14) ··· (cid:14) (cid:2)gp(cid:2)(cid:2)
i ’s are
((cid:2)gp(cid:2)(cid:2)
of the form (6) w.r.t. ((cid:2)x1, (cid:2)r1), to which we append all the
(cid:6)(cid:6)
expressions p
i of the form (6) w.r.t. ((cid:2)x1, (cid:2)r1) (i.e. probes
from R1).
4) Recall from the ﬁrst step that perfectly simulating (cid:2)P
(cid:6)(cid:6). We will prove later
amounts to perfectly simulating (cid:2)P
in this section that the input shares from (cid:2)x1 and (cid:2)x2
that are necessary and sufﬁcient to produce a perfect
(cid:6)(cid:6) are the same as the ones for a perfect
simulation of (cid:2)P
simulation of (cid:2)P1, (cid:2)P2 constructed in the last two steps.
Observe that all probes in (cid:2)P1, (cid:2)P2 respect the form (6),
which is a special case of (5). Hence, we separately
apply the Gaussian elimination technique of Lemma 1
on (cid:2)P1 with respect to ((cid:2)x1, (cid:2)r1), and on (cid:2)P2 with respect
to ((cid:2)x2, (cid:2)r2). This provides us with the sets of input shares
I1 on (cid:2)x1 and I2 on (cid:2)x2 that are respectively necessary
and sufﬁcient
to produce a perfect simulation of the
expressions in (cid:2)P1 and (cid:2)P2. These sets are therefore output
as the necessary and sufﬁcient sets of input shares for a
perfect simulation of (cid:2)P .
We state in the following lemma that the above veriﬁcation
method is complete (the proof is in appendix).
Lemma 2. Let G be a 2-input n-share NLR-gadget. Let (cid:2)P =
(p1, . . . , pd) be a tuple of probes on G. Let (cid:2)P1, (cid:2)P2 be the
tuples of linear expressions w.r.t. ((cid:2)x1, (cid:2)r1) and ((cid:2)x2, (cid:2)r2) obtained
by applying the above method. The sets I1, I2 obtained by
applying the method of Lemma 1 on (cid:2)P1 with respect to ((cid:2)x1, (cid:2)r1)
and separately on (cid:2)P2 with respect to ((cid:2)x2, (cid:2)r2) are the sets of
input shares necessary and sufﬁcient to simulate (cid:2)P .
The veriﬁcation method introduced above actually describes
the procedure of the function SIS in the case of NLR-
gadgets to determine the simulatability of a set of probes