or BGP network command to restrict the redistribution to a
speciﬁc subset of routes. The redistribute command has
protocol-speciﬁc options. For example, in the depicted exam-
ple, the metric-type command is speciﬁc to OSPF, which
mandates the routes to be advertised as “external type 1”. A
route can be injected into OSPF as either an external type 1 or
an external type 2 route. The two types differ in the way their
costs will be calculated as they propagate inside the OSPF rout-
ing instance. The cost of a type 1 route will be dynamic, with
the costs of the internal links added to the metric value assigned
at the time of redistribution. In contrast, the cost of a type 2
route remains ﬁxed regardless how many internal links it con-
tains. In addition, a type 1 route is always preferred to a type 2
route.
3. The default-metric command (line 13) allows operators to
conﬁgure a new default metric value for all route redistributions
to a routing process. In addition, the metric option (line 14)
may be used to override this default metric value for redistribu-
tion from a particular source. In the example, routes from the
RIP routing process are injected into the OSPF process with an
initial OSPF cost of 200 instead of the default value of 100.
In summary, the AD parameter (in route selection) and the met-
rics of newly redistributed routes (for route redistribution) are mainly
set to arbitrary constant values, independently of the route’s origi-
nal attributes. As a result, information related to the initial routes
(e.g., relative preference) may be lost potentially leading to persis-
tent forwarding loops, permanent route oscillations and other unac-
ceptable outcomes [22, 23].
3. A THEORY FOR MULTI-INSTANCE
ROUTING
Although a considerable body of research has been devoted to
the correctness of routing, most prior work concentrated on the be-
haviors of one speciﬁc routing protocol (e.g., RIP, OSPF, or BGP)
at a time. In contrast, this section presents a general framework to
study routing properties across multiple routing protocol instances.
Inspired by the seminal work of Grifﬁn and Sobrinho on Metarout-
ing [28, 29, 17], the proposed theory models routing protocols as
algebras. Such an abstraction allows us to leave out the myriad of
algorithmic details of different routing protocols and focus on cru-
cial correctness requirements such as convergence and loop free-
dom. Furthermore, general results which are applicable to both
existing and future routing protocols may be obtained from the the-
ory.
Section 3.1 provides a brief overview of the most relevant results
on routing algebras. Then, Section 3.2 introduces the new notion
of conversion functions to model the interactions between routing
algebras and extend the focused analysis to a network with multiple
routing protocol instances.
221(a)
u
(b)
u
n
λ
m
σ
v
v
n + m
λ    σ
w
w
Figure 3: Illustration of similarity between (a) “classic” short-
est path, and (b) routing algebra.
3.1 Background: Routing algebras
The relation (cid:22), being a total pre-order over Σ, satisﬁes the fol-
Routing algebras can be viewed as an abstraction and general-
ization of shortest path routing [7, 13, 15, 14, 17]. As illustrated
in Figure 3 [17], each route has a signature (σ ∈ Σ) to model its
relative precedence, and the notion of link weights is generalized
to policy labels. When a route with signature σ is extended over a
link (“u - v” in this example), with policy label λ ∈ L, the route’s
new signature becomes (λ ⊕ σ) ∈ Σ. In other words, a signature
represents the set of a route’s attributes, a label represents the set of
routing policies when a route is propagated over a given link, and
⊕ symbolizes the application of the routing policies to a route.
More formally, an algebra A is deﬁned by a tuple (L, Σ, φ, ⊕, (cid:22))
[28, 29, 17] with φ being a special signature indicating a prohibited
path. ⊕ is a mapping from L × Σ into Σ. The relation (cid:22) is called
a preference relation and creates a total pre-order over Σ. It allows
routers to rank routes from A: If two routes have signatures α and
β, (α, β ∈ Σ) and α (cid:22) β, the route with signature α is preferred to
the one with signature β. If α (cid:22) β and β (cid:22) α, then we say that α
and β are equally prefered (noted α ∼ β). Prohibited paths – paths
with signature φ – are not further extended and ∀σ ∈ Σ \ {φ},
σ ≺ φ.
lowing properties:
(Reﬂexivity) ∀σ ∈ Σ, σ (cid:22) σ.
(Transitivity) ∀σ1, σ2, σ3 ∈ Σ,
(Totality) ∀σ1, σ2 ∈ Σ, σ1 (cid:22) σ2 or σ2 (cid:22) σ1.
The relation (cid:22) is not necessarily antisymmetric, i.e., for σ1, σ2 in
Σ, σ1 (cid:22) σ2 and σ2 (cid:22) σ1 do not imply σ1 = σ2. This relaxation
allows us to enlargen the scope of covered routing protocols. In par-
ticular, the framework can include path vectoring routing protocols.
To illustrate it, we assume that a signature σ consists of a sequence
of identiﬁers (e.g., router identiﬁers or BGP Autonomous System
Numbers), and σ1 (cid:22) σ2 if σ1 has a shorter sequence of identiﬁers
than σ2: For example, (27, 36, 45) (cid:22) (117, 234, 54, 810). We note
that (10, 20, 30) (cid:22) (50, 30, 80) and (50, 30, 80) (cid:22) (10, 20, 30) but
(10, 20, 30) 6= (50, 30, 80). This operation is similar to the BGP
AS PATH.
To serve as an example of a routing algebra, the RIP routing
protocol can be modeled by the following one: L = {1, 2, . . . ,
16}, Σ = {1, 2, . . . , 16}, φ = 16, “(cid:22)” = “≤”, and ⊕ deﬁned as
λ ⊕ σ = min(λ + σ, φ). Each hop in a path is assigned a conﬁg-
urable hop count which can take any value from 1 to 16. When a
router receives a routing update, it adds its hop count to the metric
value, and routes with hop count of 16 or more are prohibited and
not propagated. In this speciﬁc case, L = Σ. However, this may
not always be the case. As another example of routing algebras,
if σ1 (cid:22) σ2 and σ2 (cid:22) σ3, then σ1 (cid:22) σ3.
SM I ⊕ is assoc.
Vectoring X
Link-state with Dijkstra’s alg. X X
X
Table 1: Sufﬁcient conditions for correctness of routing.
a routing protocol that selects the path with maximum available
bandwidth can be modeled with (⊕, (cid:22)) = (min, ≥).
We consider m routing instances {1, . . . , m}. We denote r.i
the routing process of routing instance i hosted at router r. Each
routing instance i is represented by a distinct ﬁnite algebra Ai =
(Li, Σi, φi,⊕i, (cid:22)i). We model each adjacency between two routers
by a distinct edge between them. In the rest of this paper, we may
loosely use the terms routing algebras, routing instances and rout-
ing processes interchangeably depending on the context.
Previous papers by Sobrinho [28, 29] have identiﬁed sufﬁcient
conditions for routing correctness for both vectoring and link state
routing protocols. These properties are summarized in Table 1 [17].
First, a routing algebra Ai satisﬁes the Strict Monotonicity (or sim-
ply SM) property if the following condition holds:
(SM) ∀l ∈ Li, ∀σ ∈ Σi \ {φi}, σ ≺i (l ⊕i σ).
Simply put, SM requires that the preference of any route strictly
decreases each time it is propagated by a router. SM by itself is
a sufﬁcient condition for routing correctness for a vectoring proto-
col [29]. For link-state protocols, additional properties are needed.
In particular, a routing algebra Ai satisﬁes the isotonicity (I) prop-
erty1 if both of the following conditions hold:
(Left-Isotonicity) ∀l ∈ Li, ∀σ1, σ2 ∈ Σi,
if σ1 (cid:22)i σ2, then l ⊕i σ1 (cid:22)i l ⊕i σ2.
(Right-Isotonicity) ∀σ1, σ2, σ3 ∈ Σi,
if σ1 (cid:22)i σ2, then σ1 ⊕i σ3 (cid:22)i σ2 ⊕i σ3.
Isotonicity means that the preference order between two routes
is preserved when they both are prepended by, or extended over,
a common link. As shown in Table 1, both I and SM are needed
to ensure the correctness of a link-state protocol. In addition, left-
isotonicity is a sufﬁcient condition to guarantee optimal paths for
vectoring routing algebras, and a stronger condition of full iso-
tonicity is sufﬁcient for link-state algebras to have the same prop-
erty [28].
Prior work used this elegant framework to analyze BGP and de-
sign new routing protocols through composition of routing algebras
that are simple and conform to the sufﬁcient conditions for correct-
ness. However, the framework only applies to a network with a
single routing protocol instance, i.e., every router in that network
must run a single, identical routing protocol. The next section ex-
tends the framework to routing across multiple routing instances.
3.2 Conversion functions
We observe that at the heart of inter-routing-process route selec-
tion and route redistribution procedures are two types of necessary
routing metric conversions. For route selection, metric conversions
are required to establish a common ground to compare routes from
different routing processes. For route redistribution, metric con-
versions are effectively performed when assigning metric values
to redistributed routes in the target routing processes. For exam-
ple, the current route redistribution procedure resets the metrics of
newly redistributed routes to constant values, either by default or
as speciﬁed by operators. Such redistribution can be represented
by constant conversion functions.
1We adopt the terminology proposed in [28, 29] herein. Other
works have used the terms monotonicity and nondecreasing in
place of isotonicity and monotonicity, respectively.
222Σ1
Σ2
Σi
...      ...
Σn
Updates from peer processes
r
Φi−>0 () Φ0−>i ()
Σ0
Figure 4: Illustration of the relations between the individual
routing instance signature spaces {Σ1, Σ2, ..., Σm} and the uni-
versal metric space Σ0.
Therefore, we propose to extend the routing algebra framework
as follows. We treat each routing instance as a separate routing al-
gebra, and model the interactions between these routing protocol
instances with a set of metric conversion functions between rout-
ing algebras. To be more scalable, we conceptualize the metric
conversions between routing algebras as indirect, via a hypotheti-
cal common algebra with a universal metric (signature) space, as
shown in Figure 4. We deﬁne the connections between each alge-
bra Ai and the common algebra with a pair of conversion functions
Φi→0() and Φ0→i().
To illustrate the utility of these conversion functions in com-
paring routes from different routing instances, consider a router
r that receives routes through k distinct routing processes (r.1,
r.2, ... r.k).
(See Figure 5.) Each routing process r.i selects
its best route according to a routing process speciﬁc ranking al-
gorithm, and presents its most preferred route to the inter-routing
process route selection algorithm. We note σi the signature of the
best route from routing process r.i. The signatures of these best
routes (σ1, σ2, ..., σk ) presented by the k routing processes be-
long to different signature domains, and as such, cannot be directly
compared. They must ﬁrst be converted, through the conversion
functions Φ1→0(), Φ2→0(),..., Φk→0(), into the common univer-
sal metric space. Then, with the signatures being in the same unit,
a best route among all the presented routes can be selected and
installed in the router’s Forwarding Information Base (FIB) for for-
warding purposes.
Each routing instance i may connect with other routing instances
via multiple border routers. In the general case, a routing instance
may use different conversion functions at different border routers.
For example, the current inter-routing-process route selection pro-
cedure allows operators to override the default administrative dis-
tances of the routing processes for each router. To represent this
per-router behavior, we make the router r an argument of the con-
version function Φi→0(). As such, Φi→0() maps elements from R
× Σi into Σ0 where R represents the set of border routers in the
network, and Σ0 the universal metric space.
To further motivate the use of conversion functions to abstract
the exchange of routing information across routing instances, con-
sider Figure 6 where a route is propagated from router A to B, then
to C, and ﬁnally back to A. Observe that there are two types of
route propagation: (1) routes may be propagated between routing
processes of a same routing instance, and (2) routes may be re-
distributed between different routing processes (and thus different
routing instances) on a same router.
(1) Route propagation within each routing instance i can be fully
modeled by the routing algebra operators (i.e., ⊕i) for the rout-
ing instance [17]. In Figure 6, when B.RIP receives a route
from A.RIP with hop-count σ1, and B.RIP re-advertises the
route over the link with weight of λ2, the route has a new signa-
ture σ2 = λ2 ⊕RIP σ1 = λ2 + σ1.
(2) To explain route propagation across routing instance boundaries,
r.1
Σ1
Φ1−>0(r,
σ1)
Σ0
r.2
Σ2
r.i
Σi
r.k
Σk
Φi−>0 (r,
σi )
Φk−>0(r,
σ )k
Universal Metric Space
Forwarding Information Base
Figure 5: Ranking of routes received from different routing
instances at a router. Each instance’s process selects its most
preferred route using an instance speciﬁc ranking algorithm
and offers only its best route to the inter-routing-process route
selection, which must rely on the conversion functions to map
the signatures of all offered routes into a common metric space
before ranking them.
suppose that the RIP route with signature σ2(∈ ΣRIP ) is re-
distributed from the RIP routing process into the EIGRP rout-
ing process at the border router C. The operation ⊕EIGRP will
deﬁne the signature while the route is being advertised in the
EIGRP routing instance. However, while ⊕EIGRP maps ele-
ments of LEIGRP × ΣEIGRP into ΣEIGRP , σ2 is from ΣRIP .
We need to convert the signature from ΣRIP into ΣEIGRP
through the application of two conversion functions:
Φ0→EIGRP (r, ΦRIP →0(r, σ2)). As such, the propagation of
routes between routing instances at a border router can be seen
as over a virtual inter-routing-process link labeled with conver-
sion functions, and the new signature is well deﬁned.
More formally, let A0 = (L0, Σ0, φ0, ⊕0, (cid:22)0) denote the com-
mon algebra, where Σ0 represents the domain of signatures in the
universal metric space, and the relation (cid:22)0 is a total pre-order
over Σ0. For brevity, let L = L1 ∪ L2 ∪ ... ∪ Lm, and Σ =
Σ1 ∪ Σ2 ∪ ... ∪ Σm.
Deﬁnition 1: Each algebra Ai (i ∈ [1, m]) is associated with two
conversion functions:
1) Φi→0(): R × Σi → Σ0
2) Φ0→i(): R × Σ0 → Σi
Deﬁnition 2: The binary relation (cid:22)r over Σ is deﬁned as:
∀ r ∈ R, ∀α, β ∈ Σ,
∃i, j ∈ [1, m] such that α ∈ Σi, β ∈ Σj, then
Φi→0(r, α) (cid:22)0 Φj→0(r, β)
α (cid:22)r β
The relation (cid:22)r allows router r to rank any set of routes. If two
candidate routes are from the same routing process (r.i), the rout-
ing instance speciﬁc best path selection algorithm ((cid:22)i) determines
the best route. If routes are from different routing processes, their
signatures are ﬁrst converted into the universal metric space using
their respective conversion functions, and the total pre-order (cid:22)0
over Σ0 deﬁnes their ranking at router r.
if i = j
else
def
=  α (cid:22)i β
Deﬁnition 3: The operator ⊕r : L × Σ → Σ is deﬁned as:
∀ r ∈ R, ∀λ ∈ L, ∀σ ∈ Σ,
∃j, i ∈ [1, m] such that λ ∈ Lj , σ ∈ Σi, then
223λ3
Φ0−>EIGRP (C, ΦRIP−>0 (C,
C
σ2))

    

    

    

    

    

    
RIP
EIGRP
OSPF 100
C
D
E