you’ve seen what a message in SMS-DELIVER format looks like, this format is
described in detail as we dissect this example.
The fi rst byte is the length of the SMSC information, in this case 7 octets (bytes).
These 7 octets (91947106004034) are further split. Of these, the fi rst byte is the
type of address of the SMSC, in this case 91, which means an international phone
number. The remaining digits make up the actual SMSC number, +491760000443.
Notice that each byte is nibble reversed. The next octet, 04, is the message header
fl ags. The least signifi cant two bits of this octet being zero indicate it is an SMS-
DELIVER message. The one bit that is set indicates there are more messages to
send. One other important bit discussed later in the “Using User Data Header
Information” section is the UDHI bit, which is not set in this example.
cc0066..iinndddd 116655 44//1166//22001122 55::4455::2233 PPMM
166 Chapter 6 n Fuzzing iOS Applications
Next up is the address of the sender. Like the address of the SMSC, these
octets consist of a length, a type, and the data, as follows:
0D 91 947196466656F8
The difference is that the length is calculated as the number of semi-octets
minus 3. A semi-octet can be thought of as a nibble (4 bits) if the data is consid-
ered as hexadecimal (0x94, 0x71, 0x96,...), or as a “character” in the ASCII
representation (“491769...”).
The next byte is the protocol identifi er (TP-PID). This byte has various mean-
ings depending on the bits that are set. Normally, this will be 00, which means
that the protocol can be determined based on the address. The next byte is the
data coding scheme (TP-DCS). This fi eld indicates how the data of the SMS
message is encoded. This includes whether the data is compressed, uses a 7-,
8-, or 16-bit alphabet, and also if the data is used as an indicator of some type
(like voicemail). In this case, it is 00, which means the data is an uncompressed,
7-bit alert and should be displayed immediately.
The next 7 bytes are the timestamp of the message (TP-SCTS). The fi rst byte
is the year, the next the month, and so on. Each byte is nibble swapped. In this
case, the message was sent some time on January 28, 2009.
The next byte is the user data length, (TP-UDL). Because the TP-DCS fi eld
indicated 7-bit data, this is the number of septets of data that will follow. The
remaining bytes are the 7-bit data for the message.
In this case, the bytes E8329BFD4697D9EC377D decode to hellohellot.
Table 6-1 summarizes what you’ve seen so far.
Table 6-1: PDU Information
SIZE F IELD
1 byte Length - SMSC
1 byte Type - SMSC
Variable Data – SMSC
1 byte DELIVER
1 byte Length – Sender
1 byte Type – Sender
Variable Data – Sender
1 byte TP-PID
1 byte TP-DCS
7 bytes TP-SCTS
1 byte TP-UDL
Variable TP-UD
cc0066..iinndddd 116666 44//1166//22001122 55::4455::2233 PPMM
Chapter 6 n Fuzzing iOS Applications 167
Using PDUspy
When exploring the world of PDU data, one of the most useful tools available
is PDUspy (www.nobbi.com/pduspy.html). Unfortunately, this tool is only for
Windows. It is indispensable when creating and checking PDUs. See Figure 6-7
for the PDU you analyzed in the previous section dissected by PDUspy.
Figure 6.7: PDUspy dissecting a PDU
You simply enter the PDU in the fi eld, with the settings as in the picture, and
PDSspy will decode the PDU, even as the PDU is being entered! This tool is use-
ful for checking that any test cases generated for SMS fuzzing are more or less
legitimate, or at least as expected. It is also extremely useful for analyzing a PDU
that has caused a crash. It will normally point out the fi elds that are incorrect,
which should lead you to the root cause of the problem. Interestingly, some of
the iOS SMS bugs from the past that are discussed later manifest themselves
as exceptions in PDUspy (which it, ironically, handles).
Using User Data Header Information
The previous example was the simplest type of SMS message available. More
complicated formats exist, as hinted in the description of the TP-DCS fi eld.
The User Data Header (UDH) provides a means to send control information as
opposed to just data for an alert. A fl ag in the DELIVER fi eld of an SMS message
indicates the presence of this type of data.
cc0066..iinndddd 116677 44//1166//22001122 55::4455::2233 PPMM
168 Chapter 6 n Fuzzing iOS Applications
Here is an example of a UDH:
050003000301
This UDH data sits in the general-purpose data fi eld of the SMS message,
that is, in the TP-UD fi eld. The UDH begins with a single byte that specifi es
the number of bytes in the UDH. This fi eld is called the UDHL, and in the
preceding example is 05. This fi eld is followed by one or more elements. Each
of these headers uses a typical type-length-value (TLV) syntax. That is, the
fi rst byte is the type of element. This byte is abbreviated IEI for Information
Element Identifi er. The next byte is the Information Element Data Length,
IEDL. The last is the actual data of the element, the Information Element
Data (IED). In this example, the type is 00, the length is 03, and the data is
000301. The UDH can be followed with arbitrary data. The breakdown is
shown in Table 6-2.
Table 6-2: UDH Breakdown
SIZE FIELD EXAMPLE BYTES
1 byte UDHL 05
1 byte IEI 00
1 byte IEDL 03
Variable IED 00 03 01
Working with Concatenated Messages
Looking closer at this example, an IEI of 00 means this is a concatenated message
with an 8-bit reference number. This type of element is used to send SMS messages
that are longer than the maximum 160 bytes. It allows for longer messages to
be broken apart, placed in multiple SMS messages, and reassembled by the
receiver. The fi rst byte of the IED is the message reference number. This is just
some unique number that is used to differentiate in the event that the receiver
is receiving more than one concatenated message at a given time. The second
byte indicates how many total messages are in this session. The last byte is
which message in the session this message happens to be. In the example, the
reference number is 00, and there are 03 total messages, of which this one is the
fi rst (the counting here is not zero-based but begins with the number 1). Using
message concatenation, it is theoretically possible to send an SMS consisting
of 255 parts, each containing 154 bytes of data for a total size of around 40,000
bytes for this message.
cc0066..iinndddd 116688 44//1166//22001122 55::4455::2233 PPMM
Chapter 6 n Fuzzing iOS Applications 169
Using Other Types of UDH Data
iOS can handle a number of different IEI values, as shown in Figure 6-8.
Figure 6.8: Reversing the function that is responsible for IEI values
Here, the CommCenter binary has been reverse-engineered using IDA Pro.
This function, among other things, operates on the IEI of an SMS containing
a UDH. If you look at this function in detail, you will see that the iPhone can
handle the following values of IEI: 0, 1, 4, 5, 0x22, 0x24, 0x25. This is
useful information when fuzzing:
n 00 — Concatenated short message, 8-bit reference number
n 01 — Special SMS message indicator (voice-mail)
cc0066..iinndddd 116699 44//1166//22001122 55::4455::2233 PPMM
170 Chapter 6 n Fuzzing iOS Applications
n 04 — Application port addressing 8-bit
n 05 — Application port addressing 16-bit
n 22 — Alternate reply address
n 24, 25 — Reserved
*List taken from Mobile messaging technologies and services: SMS, EMS, MMS by Gwenael Le Bodic
One of these types of UDH elements occurs when a voicemail is available.
An IEI of 01 indicates this. The typical UDH data for such an event looks like
0401020020. Here the UDHL is 04, the IEI is 01, the IEDL is 02, and the IED is
0020. This indicates 0x20 voicemail messages are available. This is a nice way
to possibly annoy your friends if you can send raw SMS data to them.
Another use of UDH is to send data to particularly registered applications.
Much like the way TCP has ports and certain applications may bind to these
ports, applications may listen for data on particular UDH ports. Here the UDH
data may look like 06050400000000 followed by whatever data is intended
for the application. In this example, the UDHL is 06 and the IEI is 05, which
means application port addressing using 16-bit ports. Next is 04 for IEDL fol-
lowed by the port number information, which is 0000 for the source port and
0000 for the destination port in this example. Any application-specifi c data
would then follow.
Another use in iOS for UDH data in SMS messages is for visual voicemail.
When a visual voicemail arrives, an SMS message arrives with a URL on where
to go pick it up. This URL resolves only on the carrier network, and if you give
it a URL on the Internet, it attempts to go to it (through the carrier network) but
the carrier network doesn’t allow the full three-way handshake. Regardless,
this URL is another thing to try to fuzz. A visual voicemail message is sent
from UDH port number 0000 to port 5499 and the text is of the URL. The URL
takes a form similar to this:
allntxacds12.attwireless.net:5400?f=0&v=400&m=XXXXXXX&p=&s=5433&
t=4:XXXXXXX:A:IndyAP36:ms01:client:46173
where the XXXXXXX is the phone number, which I’ve removed in the hope that
AT&T doesn’t shut down my account.
Now that you’ve seen a sample of the types of SMS data that will be consumed
by iOS, you should be dying to begin fuzzing this data and seeing if you can
fi nd some nice remote server-side bugs.
Generation-Based Fuzzing with Sulley
The fuzzing examples earlier in this chapter used mutation-based fuzzing. For
that, legitimate data is randomly mutated and sent into the application. This is
especially useful when the protocol is unknown (in which case there is no other
cc0066..iinndddd 117700 44//1166//22001122 55::4455::2233 PPMM
Chapter 6 n Fuzzing iOS Applications 171
choice) or when you have vast numbers of starting inputs from which to start.
For example, when fuzzing .ppt fi les, it is not diffi cult to download thousands
of these fi les from the Internet from which to apply the mutations. This is not the
case with SMS messages. You might be able to fi nd a handful of distinct, valid
classes of SMS messages. However, this is probably not enough to do thorough
fuzzing. For this particular target, you need to use a more focused method of
fuzzing: generation-based fuzzing.
Generation-based fuzzing constructs the test cases from a specifi cation and
intelligently builds the inputs. You’ve already seen the way SMS messages are
constructed. You only have to translate this knowledge into code to generate
the test cases. For this, you can utilize the Sulley fuzzing framework.
Sulley allows for methods to represent exactly the kinds of data that compose
SMS messages. It also provides methods for sending the data and monitoring
the data. In this case, you ignore these extra capabilities and instead only utilize
the test case generation capabilities of Sulley.
Much like SPIKE (www.blackhat.com/presentations/bh-usa-02/
bh-us-02-aitel-spike.ppt), one of the fi rst generation-based fuzzers, Sulley
uses a block-based approach to data representation. Jump right in and see if you
can represent an SMSC address using the primitives provided by Sulley. Recall
that for this, the fi rst byte is a length, followed by a type, and then the data for
the address. For the fi rst byte, you need the s_size primitive. This primitive,
when not being fuzzed, will correctly hold the length of the block to which it
corresponds. Thus, even with an overly long data fi eld, the SMSC address will
be syntactically correct. This is where protocol knowledge can be useful. If you
were just inserting bytes at random, the program might quickly reject the SMS
message as invalid because the lengths would be wrong. The s_size primitive can
be called with many optional arguments. You’ll need the following arguments:
n format — This is the way that the output is formatted. Possible values are
string, binary, and oct. You want oct or octets. Code to handle octets
was added to Sulley especially for SMS fuzzing.
n length — This is how many bytes of which this length fi eld consists, in
this case 1.
n math — This is how the length value to be output is computed from the
actual length of the block. In this case, the output will be the length of text
corresponding to a hexadecimal representation of some bytes. In other
words, the number of bytes in this block (the value you want for this byte)
is half the actual string length of the block (each “byte” is really two ASCII
characters). You represent this by setting math to the value lambda x: x/2.
n fuzzable — This value tells whether this fi eld should be fuzzed. It is
useful when debugging the Sulley fi le to set this to False and then turn
it to True when you are ready to actually fuzz.
cc0066..iinndddd 117711 44//1166//22001122 55::4455::2233 PPMM
172 Chapter 6 n Fuzzing iOS Applications
Putting all these arguments together, you arrive at the following line for the
fi rst byte of the SMSC address:
s_size(“smsc_number”, format=”oct”, length=1, math=lambda x: x/2)
You indicate which bytes are to be included in this length calculation by
putting them in a Sulley block. This block doesn’t necessarily have to appear
anywhere near where the corresponding s_size primitive lies. However, in
this case, the block directly follows the location of the s_size. The Sulley code
now looks like this:
s_size(“smsc_number”, format=”oct”, length=1, math=lambda x: x/2)
if s_block_start(“smsc_number”):
...
s_block_end()
Because there can be multiple s_size primitives and blocks, you establish the
connection by using the same string for the s_size and the block. Next up is the
type of number. This is one byte of data and so you use the s_byte primitive.
This primitive has similar optional arguments available as s_size did. You also
use the name option to name the fi eld, just to aid in the readability of the fi le:
s_byte(0x91, format=”oct”, name=”typeofaddress”)
The fi rst (and only non-optional) argument is the default value of this fi eld.
Sulley works by fuzzing the fi rst fuzzable fi eld to be fuzzed. While it is iterating
through all the values it wants to try for that fi eld, all the other fi elds are untouched
and remain at their default value. So, in this case, when the typeofaddress byte
is not being fuzzed, it will always be 91. This has the consequence that Sulley
can never fi nd so-called 2x2 vulnerabilities, those that require two fi elds to be
mutated at the same time.
The fi nal fi eld of the SMSC address is the actual phone number. You could
choose to represent this as a series of s_bytes; however, the length of an s_byte
is always one, even when fuzzing. If you want to allow for this fi eld to have dif-
ferent lengths, you need to instead use the s_string primitive. When fuzzing,
this primitive is replaced with many different strings of various sizes. There are
a couple of issues with this. For one, PDU data must also consist of hexadecimal
ASCII values. You communicate this to Sulley by enclosing it in a block and
using the optional encoder fi eld:
if s_block_start(“SMSC_data”, encoder=eight_bit_encoder):
s_string(“\x94\x71\x06\x00\x40\x34”, max_len = 256,
fuzzable=True)
s_block_end()
Here, eight_bit_encoder is a user-provided function that takes a string and
returns a string. In this case, it is:
cc0066..iinndddd 117722 44//1166//22001122 55::4455::2244 PPMM
Chapter 6 n Fuzzing iOS Applications 173
def eight_bit_encoder(string):
ret = ‘’
strlen = len(string)
for i in range(0,strlen):
temp = “%02x” % ord(string[i])
ret += temp.upper()
return ret
This function takes arbitrary strings and writes them in the desired form. The
only other element that you may have noticed is the max_len option. Sulley’s
fuzzing library contains some strings that are extremely long, sometimes thou-
sands of bytes long. Because the thing being fuzzed can be at most 160 bytes
in length, it doesn’t make sense to generate extremely long test cases. max_len
indicates the maximum-length string that can be used while fuzzing.
The following is a Sulley protocol fi le for fuzzing all the fi elds of an 8-bit
encoded SMS message. For more examples of Sulley SMS fi les, please see www
.mulliner.org/security/sms/feed/bh.tar.gz. These include different encod-
ing types, as well as examples of different UDH information elements.
def eight_bit_encoder(string):
ret = ‘’
strlen = len(string)
for i in range(0,strlen):
temp = “%02x” % ord(string[i])
ret += temp.upper()
return ret
s_initialize(”query”)
s_size(”SMSC_number”, format=”oct”, length=1, math=lambda x: x/2)
if s_block_start(”SMSC_number”):
s_byte(0x91, format=”oct”, name=”typeofaddress”)
if s_block_start(”SMSC_data”, encoder=eight_bit_encoder):
s_string(”\x94\x71\x06\x00\x40\x34”, max_len =
256)
s_block_end()
s_block_end()
s_byte(0x04, format=”oct”, name=”octetofsmsdeliver”)
s_size(”from_number”, format=”oct”, length=1, math=lambda x: x-3)
if s_block_start(”from_number”):
s_byte(0x91, format=”oct”, name=”typeofaddress_from”)
if s_block_start(”abyte2”, encoder=eight_bit_encoder):
s_string(”\x94\x71\x96\x46\x66\x56\xf8”, max_len =
256)
s_block_end()
cc0066..iinndddd 117733 44//1166//22001122 55::4455::2244 PPMM