# NAT66的优点、缺点及不足
##### 译文声明
本文是翻译文章，文章原作者 mcilloni，文章来源：mcilloni.ovh
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
很多人对一些技术持有强烈的看法，NAT（以及NAPT）技术正是其中之一。IPv4的地址空间非常小，只有32位。刚开始时计算机的数量非常少，但随着全世界计算机规模大幅增长，这个地址空间已经捉襟见肘。此时NAT及NAPT技术应运而生，可以避免IPv4地址继续分裂，是一种取巧但又非常实用的解决办法。
目前IPv4协议早已大大超出原先设想的范围，该协议已是现代互联网环境中的基本组成部分，这个网络规模极其庞大，是IPv4协议无法承受之重。是时候让IPv4退隐江湖，轮到尚存争议但能解决问题的IPv6上场了。IPv6具有128位的地址空间，足以应付这种规模的网络。
那么，在新的互联网中，端到端原则已经重新回归，成为主要原则之一，此时NAT应该扮演什么角色呢？
## 二、尴尬境地
然而似乎NAT很难有立足之地，IETF一直不推荐人们使用NAT66（NAT这个词在IPv6上已经被占用）。这么做并非无中生有，多年以来，由于NAT网关的存在，本来应该为无状态（stateless）、无连接（connectionless）的IP协议已经变成了一种临时的“有状态（stateful）”、面向连接（connection-oriented）的协议，这主要是因为大量的设备需要接入互联网而不得已为之。
这种地址转换能给我们带来一种虚假的安全感。我已经听过许多人表达过这样一种看法：“从内部网络安全角度来看，NAT是必不可少的一环（然而事实并非如此）”。
IPv6地址空间非常庞大，运营商可以给客户分配足够多的`/64`地址。我始终无法找到NAT66的价值所在：我觉得NAT66从技术上讲根本就是一潭死水，处于本末倒置状态，是先有了答案，再去寻找适配这个答案的问题，很容易被他人滥用。
当然，由于某些托管服务的存在，这种技术仍有发挥的空间。
## 三、应用场景
前一阵子我非常高兴，因为我的VPS提供商宣布他们开始支持IPv6网络，这样一来我就可以在这台VPS上为VPN用户提供IPv6接入方式，不必再去使用Hurrican
Electric以及SixXS之类的隧道转换服务，避免产生不必要的延迟。
幸福的时光总是那么短暂，不久后我发现虽然这个运营商拿到了完整的`/32`地址空间（即2^{96}个IP），但他们还是决定只给VPS客户分配一个`/128`地址。
再强调一下： **只有1个地址** 。
由于IPv6的连接特性是我配置OpenVPN时迫切需要的一种特性，这让我感到万分悲伤。因此我基本上只剩下两种选择：
1、获取免费的`/64`Hurricane Electric隧道，为VPN用户分配IPv6地址。
2、不得已使用NAT66解决方案。
毫无疑问，Hurrican Electric是最正统的一种选择：这是一种免费服务，可以提供`/64`地址，并且设置起来也非常方便。
这里最主要的问题就是延迟问题，两层隧道的存在（VPN -> 6to4 ->
IPv6互联网）会增加一些延迟，并且默认情况下IPv6源IP地址会比IPv4地址优先级更高，因此，如果你拥有一个IPv6公有地址反而会带来一些延迟，这有点令人难以接受。如果我们能找到对IPv6以及IPv4都可以接受的RTT（Round-Trip Time，往返时延）那再好不过。
出于这几方面考虑，我带着一丝愧疚，不得已选择了第二种方案。
## 四、如何配置
设置NAT的过程中通常需要选择一个保留的可路由的私有IP地址范围，以避免内部网络结构与其他网络路由规则相冲突（当然，如果出现多重错误配置依然可能发生冲突）。
IETF在2005年通过ULA（Unique Local
Addresses，本地唯一地址）规范，定义了与`10.0.0.0/8`、`172.16.0.0/12`以及`192.168.0.0/16`对应的IPv6地址。这个RFC中定义了唯一的且不能在公网上路由的`fc00::/7`地址，用来定义本地子网，这类地址不需要使用`2000::/3`来保证地址唯一性（`2000::/3`为全球单播地址（Global
Unicast
Addresses，GUA），也是暂时为互联网分配的地址）。目前该地址范围内实际上只定义了`fd00::/8`，这足以应付私有网络所需要的所有地址。
下一步就是配置OpenVPN，使其能够按我们所需为客户端分配ULA地址，在配置文件末尾添加如下几行：
    server-ipv6 fd00::1:8:0/112
    push "route-ipv6 2000::/3"
由于OpenVPN只接受从`/64`到`/112`的掩码长度，因此我为UDP服务器挑选了`fd00::1:8:0/112`地址，为TCP服务器挑选了`fd00::1:9:0/112`地址。
我也希望能通过NAT转发访问互联网的流量，因此还需要指导服务器在客户端连接时向其推送默认路由。
    $ ping fd00::1:8:1
    PING fd00::1:8:1(fd00::1:8:1) 56 data bytes
    64 bytes from fd00::1:8:1: icmp_seq=1 ttl=64 time=40.7 ms
现在客户端与服务器之间已经可以通过本地地址相互ping通对方，但依然无法访问外部网络。
因此，我需要继续配置内核，以转发IPv6报文。具体方法是使用`sysctl`或者在`sysctl.conf`中设置`net.ipv6.conf.all.forwarding
= 1`选项（从这里开始，下文使用的都是Linux环境）。
    # cat /etc/sysctl.d/30-ipforward.conf 
    net.ipv4.ip_forward=1
    net.ipv6.conf.default.forwarding=1
    net.ipv6.conf.all.forwarding=1
    # sysctl -p /etc/sysctl.d/30-ipforward.conf
现在，最后一个步骤就是设置NAT66，我们可以通过Linux的包过滤器（packet filter）提供的stateful防火墙来完成这个任务。
我个人比较喜欢使用新一点的`nftables`来取代`{ip,ip6,arp,eth}tables`，因为这个工具更加灵活，更便于理解（但网上相关的文档比较少，这一点不是特别方便，我希望Linux能像OpenBSD那样提供完备的pf文档）。
如果你使用的是`ip6tables`，不妨继续使用这种方法，完全没必要勉强自己将现有的规则集迁移到`nft`中。
我在`nftables.conf`中添加了许多规则，以使NAT66能够正常工作，部分规则摘抄如下。出于完整性考虑，我同时也保留了IPv4规则。
_注意：记得将MY_EXTERNAL_IPV相关地址修改为你自己的IPv4/6地址。_
    table inet filter {
      [...]
      chain forward {
        type filter hook forward priority 0;
        # allow established/related connections                                                                                                                                                                                                 
        ct state {established, related} accept
        # early drop of invalid connections                                                                                                                                                                                                     
        ct state invalid drop
        # Allow packets to be forwarded from the VPNs to the outer world
        ip saddr 10.0.0.0/8 iifname "tun*" oifname eth0 accept
        # Using fd00::1:0:0/96 allows to match for
        # every fd00::1:xxxx:0/112 I set up
        ip6 saddr fd00::1:0:0/96 iifname "tun*" oifname eth0 accept
      }
      [...]
    }
    # IPv4 NAT table