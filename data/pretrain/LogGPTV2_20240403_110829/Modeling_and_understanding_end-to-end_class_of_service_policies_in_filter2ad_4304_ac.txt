for a (cid:3)ow (typically by using ACLs). Second, a ruleset permits a
broader range of actions than simple permit/deny. Third, a ruleset
can have an output action that transforms an input and forwards it
to another ruleset. We note however that only the root ruleset is al-
lowed to have an output action that transforms the input (cid:150) the other
rulesets in the hierarchy are restricted to having simple outputs.
More formally, a ruleset is represented as a table F that maps
an input N-tuple (cid:3)ow f to an output action. Each column j in the
table is associated with either a basic (cid:2)eld value (e.g., source IP) of
the input (cid:3)ow f (denoted by vj(f )), or another ruleset Fj , which
is itself represented as another mapping table. Let varsF = fjj
column j is associated with a basic input (cid:2)eldg. For j 2 varsF ,
the cell Fij speci(cid:2)es a match expression. The match expression
can include wildcards, and ranges of values just like for standard
ACLs. For j 62 varsF the cell Fij contains a subset of possible
outputs that could be produced by ruleset Fj . In addition, for each
row i, an output action act(i) gives the output of this row. Given
an input (cid:3)ow f we evaluate a ruleset by recursively evaluating the
Fj for each j 62 varsF . Flow f is said to match a row i if and only
if it matches every cell in row i. The output of table F given an
srcIP
srcPort
destIP
destPort
protocol
192.168.1.0/24
*
*
*
*
*
192.168.1.0/24
*
*
*
*
*
*
*
*
(a) VOICE
output
permit
permit
deny
VOICE
permit
*
*
*
INTERACTIVE-
VIDEO
dscp
output
*
permit
*
*
*
*
46
*
ok
ok
ok
no
(b) REALTIME
REALTIME
CRITICAL-
DATA
ROUTING
ok
*
*
*
*
*
ok
ok
ok
*
*
ok
*
*
*
OTHER-
CRITICAL-
DATA
output
*
*
ok
*
*
P1
P2
P3
P4
P5
(c) WAN-EGRESS-POLICER-QUEUE (Policer)
REALTIME
CRITICAL-
DATA
output
ok
*
*
*
ok
*
Q1
Q2
Q3
(d) WAN-EGRESS-POLICER-QUEUE
(Queue)
Figure 7: Recursive ruleset representation of CoS con(cid:2)guration in
Fig. 3. Columns in italics refer to rulesets which are not shown.
input (cid:3)ow f , denoted F (f ), is de(cid:2)ned as the output action for the
row with the smallest index i that matches f , i.e., the action for the
(cid:2)rst-matching row is taken. If no match is found until the end of
the table, a special output empty is associated with the (cid:3)ow.
Example: Fig. 7 shows how the example con(cid:2)guration pre-
sented in Fig. 3 can be depicted using two recursive hierarchies
of rulesets. Fig. 3 has two CoS policy blocks describing the polic-
ing rules (lines 7-17) and queueing rules (lines 18-28). Each of
these blocks corresponds to a root ruleset as shown in Fig. 7(c)
and Fig. 7(d), respectively. Each ACL can be represented as a leaf
ruleset, while con(cid:2)guration constructs such as class-map corre-
spond to intermediate rulesets. For instance, Fig. 7(a) and 7(b)
respectively show the ruleset representation of the ACL VOICE
and the class-map REALTIME. Intermediate and root rulesets are
expressed in terms of other rulesets lower in the hierarchy. For
instance, consider Fig. 7(b). The (cid:2)rst two columns refer to the out-
puts of the rulesets VOICE and INTERACTIVE-VIDEO. The (cid:2)rst
row is matched as long as the ruleset VOICE produces an output
of permit. The second row is matched for (cid:3)ows not matching the
ruleset VOICE, but matching the ruleset INTERACTIVE-VIDEO.
The remaining rows are matched in a similar fashion. Likewise, in
Fig. 7(c), each column refers to the output of the ruleset indicated,
and the output action of each row corresponds to a policing rule to
be invoked. For example, the policing rule P2 (line 12 in Fig. 3) is
invoked only if both the CRITICAL-DATA and ROUTING rulesets
are matched, and the REALTIME ruleset is not matched.
3.3 Flat representation of rulesets
The representation of a ruleset as de(cid:2)ned in §3.2 is recursive in
that it may depend on other rulesets. While this recursive repre-
sentation is easily derivable from the con(cid:2)gurations, we require a
non-recursive, (cid:3)at representation for composing multiple rulesets.
The (cid:3)at representation of a ruleset F consists of a set of unique
output actions falg, and an associated subset S(F; al) including
all inputs (simply abbreviated as Sl when the context is clear), for
which action al is triggered. The subsets are non-overlapping (e.g.,
l 6= l0 =) Sl \ Sl0 = ;). Note that the non-overlapping property
makes the ordering of the actions irrelevant.
We now present expressions that can construct the (cid:3)at represen-
tation of a ruleset from its recursive representation using set oper-
ations. Let M (F; k) denote the set of (cid:3)ows that match row k of
ruleset F . Let F M (F; k) denote the set of (cid:3)ows that match row k
of function F and none prior to it. We can de(cid:2)ne S(F; A) to be the
set of (cid:3)ows for which the function F produces an output action A.
Then,
S(F; A) = [8k;act(k)=AF M (F; k)
(1a)
F M (F; k) = \k(cid:0)1
(1b)
M (F; k) = \j62varsF S(Fj ; Fkj ) \j2varsF ff jvj (f ) 2 Fkj g (1c)
i=1 (:M (F; i)) \ M (F; k)
223M
P
dscp=40|(P4,n/a,Q)
srcIP(cid:144)1.2.2.0/24|(M4,set dscp=40,P)
srcIP(cid:143)1.2.2.0/24|(M1,set dscp=10,P)
dscp=10&C|(P1,set dscp=10,Q)
dscp=10&NC|(P1,n/a,drop)
drop
(a)
(b)
(c)
M˘P
srcIP(cid:144)1.2.2.0/24|(M4˘P4,set dscp=40,Q)
srcIP(cid:144)1.2.2.0/24&C|(M1˘P1,set dscp=10,Q)
srcIP(cid:144)1.2.2.0/24&NC|(M1˘P1,set dscp=10,drop)
drop
M˘P˘Q
srcIP(cid:144)1.2.2.0/24|(M4˘P4˘Q4,set dscp=40,done)
srcIP(cid:144)1.2.2.0/24&C|(M1˘P1˘Q1,set dscp=10,done)
srcIP(cid:144)1.2.2.0/24&NC|(M1˘P1˘Q1,set dscp=10,drop)
Q
dscp=10|(Q1,n/a,done)
dscpz10|(Q4,n/a,done)
done
Q
dscp=10|(Q1,n/a,done)
dscpz10|(Q4,n/a,done)
done
done
drop
Figure 8: Example of composing a tree of rulesets. Sl and al are
separated by "j". C and NC respectively denote conformant and non-
conformant (cid:3)ows.
3.4 Composing rulesets
Once each CoS policy block (e.g., marking, policing, queuing)
of each device (e.g., CER, PER) is expressed using a (cid:3)at ruleset
representation, these rulesets can be composed into a single rule-
set that captures the end-to-end CoS policies. There are two key
considerations when composing rulesets. First, an output action
may change the input (cid:3)ow, e.g., the marking action, which sets the
DSCP bits to some speci(cid:2)c value. Second, some action may change
the path of the (cid:3)ow. For example, a policing policy may choose to
drop non-conformant traf(cid:2)c while allowing conformant traf(cid:2)c to
continue on the path. This leads us to the following formulation.
An end-to-end policy can be described by a tree of nodes with each
node of the tree having a ruleset. Each unique output action in a
ruleset is a triplet (tag; func; next), where tag is a sequence
of string tags recording output actions encountered so far, func is
a mapping of the input (e.g., setting the DSCP bits), and next is
a reference to another node. Note that next can also be an empty
reference (cid:150) in this case, the semantic is that the (cid:3)ow stops here. All
leaf nodes have a single triplet with an empty next for all incom-
ing (cid:3)ows. An input (cid:3)ow starts at the root of the tree and will then
get forwarded to the next node until reaching a leaf node. Two
types of leaf nodes drop and done exist to respectively signal the
discard of the (cid:3)ow and the end of the path traversed by the (cid:3)ow.
The func, if exists, transforms the input at each ruleset, and the
end-to-end treatment received by the (cid:3)ow is the concatenation of
all the tags on the path.
We can now more formally describe the composition steps needed
to collapse a tree of rulesets. Given a node n and a child node n0,
we combine them by replacing the ruleset in node n0 with a com-
bined ruleset and redirect any node that previously referred to n
to now refer to n0.
In particular, let S and S0 be the (cid:3)at repre-
sentations for the rulesets in nodes n and n0, respectively. We can
derive the (cid:3)at representation of the combined ruleset (denoted by
S00) by using a cross-product construction with S and S0, where
we replace the (cid:3)ows in S belonging to triplets having next = n0
with (cid:3)ows in S0 using the func mapping, and leave the other (cid:3)ows
in S unchanged. More formally, we de(cid:2)ne the set of (cid:3)ows S00
associated with the combined action al!l0 in S00 as follows:
l!l0
l!l0 = ff jf 2 Sland al(f ) 2 S0
S00
al!l0 = (tagl ! tagl0 ; funcl0 (cid:14) funcl; nextl0 )
l0 g
(2a)
(2b)
Note that if S00
l!l0 is empty, we just delete it from S00.
End-to-end 
router path
Auxiliary Information
(e.g., Routing Table, 
Flow Conformance)
Router
Configs
Section 3.2
Recursive Ruleset
Representation
Section 3.3
Flat Ruleset
Representation
Preprocessing
Query Processing
Input Flow
Specification
(in ACL form)
Section 3.4
Composing
Rulesets
End-to-end 
treatment of 
input flows
End-to-end 
router path
Auxiliary Information
(e.g., Forwarding Tables, 
Flow Conformance)
Figure 9: Overview of CoS query tool.
With ruleset composition, any tree can be (cid:3)attened into a single
node representation. Thus, we can derive the sequence of tags that
explain the per-ruleset treatment of a set Sl of (cid:3)ows along the path,
the funcl(Sl) will describe how the (cid:3)ows are transformed at the
end of the path. By examining the path of tags, design patterns and
any misbehavior can be easily discovered.
Example: Fig. 8(a) shows an example tree of (cid:3)at rulesets including
marking (M), policing (P) and queueing (Q) policies. Each output
action is stored in a tag (e.g., M1 contains the marking action set
dscp=10). For the M ruleset, any (cid:3)ow not from 1.2.2.0/24 sub-
net is marked with DSCP of 40, and any (cid:3)ow from 1.2.2.0/24 is
marked with DSCP of 10. The P ruleset examines the DSCP value
of (cid:3)ows output from the M ruleset and performs the corresponding
output action. Note that for (cid:3)ows marked with DSCP of 10, non-
conformant traf(cid:2)c is dropped, which is modeled with next point-
ing to a drop node. For (cid:3)ows marked with DSCP 40, no action is
taken. The rules for the Q ruleset are simple: (cid:3)ows marked with
DSCP of 10 goes into Q1 queue, and (cid:3)ows with all other DSCP
values goes into the Q4 queue. Flows leaving the Q ruleset enter
a done node, indicating that the end of the path is reached and the
end-to-end treatments of the (cid:3)ows can be reported. Fig. 8(b) and
Fig. 8(c) respectively show the rulesets after composing the M and
P rulesets, and after composing the M, P, and Q rulesets.
4. A TOOL FOR QUERYING COS TREAT-
MENTS OF FLOWSETS
Based on our model in §3, we have designed and implemented a