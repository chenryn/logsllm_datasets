HKEcho@深蓝实验室重保天佑战队
# 前言
    本文部分知识点来源于互联网，在此感谢各位师傅！新手上路，各位师傅多多指点。
# 一、项目简介
    RuoYi 是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Apache Shiro、MyBatis、Thymeleaf、Bootstrap），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、通知公告等。在线定时任务配置；支持集群，支持多数据源，支持分布式事务。
**内置功能模块**
  1. 用户管理：用户是系统操作者，该功能主要完成系统用户配置。
  2. 部门管理：配置系统组织机构（公司、部门、小组），树结构展现支持数据权限。
  3. 岗位管理：配置系统用户所属担任职务。
  4. 菜单管理：配置系统菜单，操作权限，按钮权限标识等。
  5. 角色管理：角色菜单权限分配、设置角色按机构进行数据范围权限划分。
  6. 字典管理：对系统中经常使用的一些较为固定的数据进行维护。
  7. 参数管理：对系统动态配置常用参数。
  8. 通知公告：系统通知公告信息发布维护。
  9. 操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。
  10. 登录日志：系统登录日志记录查询包含登录异常。
  11. 在线用户：当前系统中活跃用户状态监控。
  12. 定时任务：在线（添加、修改、删除)任务调度包含执行结果日志。
  13. 代码生成：前后端代码的生成（java、html、xml、sql）支持CRUD下载 。
  14. 系统接口：根据业务代码自动生成相关的api接口文档。
  15. 服务监控：监视当前系统CPU、内存、磁盘、堆栈等相关信息。
  16. 缓存监控：对系统的缓存查询，删除、清空等操作。
  17. 在线构建器：拖动表单元素生成相应的HTML代码。
  18. 连接池监视：监视当前系统数据库连接池状态，可进行分析SQL找出系统性能瓶颈。
# 二、环境搭建
JDK >= 1.8 (推荐1.8版本)  
Mysql >= 5.7.0 (推荐5.7版本)  
Maven >= 3.0  
若依后台管理系统V4.2  
**1、导入数据库**
    create datavase ry; 创建名为ry的数据库
    use ry; 切换使用ry数据库
    source C:/Users/27721/Desktop/RuoYi-v4.2/RuoYi-v4.2/sql/ry_20200323.sql
    source C:/Users/27721/Desktop/RuoYi-v4.2/RuoYi-v4.2/sql/quartz.sql
**2、修改 src\main\resources\application-druid.yml 配置文件中数据库账号密码。**
# 三、漏洞挖掘之代码审计
## 1、第三方组件漏洞审计
本项目使用Maven构建的。因此我们直接看pom.xml文件引入了哪些组件。通过IDEA打  
开该若依，发现本项目采用了多模块方式。因此每个模块下都会有一个pom.xml，项目  
最外层的pom.xml为父POM。我们可以通过 pom.xml 或者 External Libraries 来  
确定引入组件的版本，具体整理如下：
组件名称 | 组件版本 | 是否存在漏洞  
---|---|---  
shiro | 1.4.2 | 存在  
thymeleaf | 2.0.0 | 存在  
druid | 1.1.14 | 不存在  
mybatis | 1.3.2 | 不存在  
bitwalker | 1.19 | 不存在  
kaptcha | 2.3.2 | 不存在  
swagger | 2.9.2 | 不存在  
pagehelper | 1.2.5 | 不存在  
fastjson | 1.2.60 | 存在  
oshi | 3.9.1 | 不存在  
commons.io | 2.5 | 存在  
commons.fileupload | 1.3.3 | 不存在  
poi | 3.17 | 存在  
velocity | 1.7 | 存在  
snakeyaml | 1.23 | 存在  
通过版本号进行初步判断后，我们还需再进一步验证。
### 1.1、从Shiro密钥硬编码到反序列化漏洞
**Shiro密钥硬编码**  
通过查看pom.xml文件，我们了解到本套项目使用了Shiro组件。我们进一步查看Shiro配置文件时，发现了Shiro密钥硬编码写在了代码文件中。代码位于
    RuoYi-v4.2\ruoyi-framework\src\main\java\com\ruoyi\framework\config\ShiroConfig.java
可以直接通过搜索关键字setCipherKey或CookieRememberMeManager，来看看密钥是否硬编码在了代码中，第331行。如下图所示：  
**Shiro反序列化漏洞**  
Apache
Shiro框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过对相关信息进行序列化，然后使用aes加密，最后在使用base64编码处理形成的。在调用反序列化时未进行任何过滤，导致可以触发远程代码执行漏洞。  
由于AES加解密的秘钥被硬编码在代码中，这意味着有权访问源代码的任何人都知道默认加密密钥是什么，因此，攻击者可以创建一个恶意对象并对其进行序列化，编码，然后将其作为cookie发送，然后Shiro将解码并反序列化，从而导致恶意代码执行。  
通过查看pom.xml文件我们确定了Shiro版本为1.4.2。Shiro
1.4.2版本对于Shiro反序列化来说是个分水岭。由于CVE-2019-12422漏洞的出现，也就是Shiro Padding Oracle
Attack漏洞。Shiro在1.4.2版本开始，由AES-CBC加密模式改为了AES-GCM。所以我们在做漏洞验证时，要将payload改成AES-GCM加密模式。  
**漏洞验证**  
既然已经得到了密钥为“fCq+/xW488hMTCD+cmJ3aQ==”，那这里就直接用工具打一波试试啦，试不出来再审代码。  
### 1.2、Thymeleaf组件漏洞
到Thymeleaf组件版本为 2.0.0 ，该版本存在SSTI（模板注入）漏洞。  
关于什么是Thymeleaf，推荐学习这篇文章：  
**常用payload**
    __$%7BT(java.lang.Runtime).getRuntime().exec(%22id%22)%7D__::.x
    http://127.0.0.1:8080/doc/;/__$%7BT%20(java.lang.Runtime).getRuntime().exec(%22whoami%22)%7D__::main.x
**1、打回显内存马**  
两篇相关的文章，具体关键要素如下：  
改良 SPEL 执行 Java 字节码的 Payload
    解决BCEL/js引擎兼容性问题
    解决base64在不同版本jdk的兼容问题
    可多次运行同类名字节码
    解决可能导致的ClassNotFound问题
最终 Payload ：
    #{T(org.springframework.cglib.core.ReflectUtils).defineClass('Memshell',T(org.springframework.util.Base64Utils).decodeFromString('yv66vgAAA....'),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject()}
**2、Spring 层内存马**  
c0ny1师傅所写的内存马见，大体的逻辑就是利用
HandlerMapping 注册一个映射关系，通过映射关系让 HandlerAdapter 执行到内存马，最后返回一个
HandlerResultHandler 可以处理的结果类型。c0ny1师傅的内存马中HandlerMapping
选用了RequestMappingHandlerMapping，然后RequestMappingHandlerMapping 的获取使用的方式是从 SPEL
的上下文的 bean 中获取，具体见文章内容。最终的结果就是得到了一个 @RequestMapping("/*") 等效的内存马。  
但由于这道题里面并没有用 Spring cloud gateway 组件，所以原代码中利用
org.springframework.web.reactive.HandlerMapping 来注册 registerHandlerMethod
就会报错找不到对应的类。  
**3、registerMapping 注册 registerMapping**  
在 spring 4.0 及以后，可以使用 registerMapping 直接注册 requestMapping ，这是最直接的一种方式。  
registerMapping 的原型函数如下
    public void registerMapping(T mapping, Object handler, Method method) {
            if (this.logger.isTraceEnabled()) {
                this.logger.trace("Register \"" + mapping + "\" to " + method.toGenericString());
            }
            this.mappingRegistry.register(mapping, handler, method);
        }
将我们执行命令的方法注册进去即可，也就是：
    registerMapping.invoke(requestMappingHandlerMapping, requestMappingInfo, new SpringRequestMappingMemshell(), executeCommand);
#### 1.2.1、什么是SSTI（模板注入）漏洞
参考文章：  
Server-Side Template Injection简称SSTI，也就是服务器端模板注入。  
所谓的模板即为 模板引擎 。  
本项目使用的Thymeleaf是众多模板引擎之一。还有其他Java常用的模板引擎，如：  
velocity，freemarker，jade等等。  
模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板加上用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。  
模板注入（SSTI）漏洞成因，是因为服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web
应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell
等问题。
#### 1.2.2、Thymeleaf模板注入漏洞简介
Thymeleaf模板注入形成原因，简单来说，在Thymeleaf模板文件中使用th:fragment、 ， th:text
这类标签属性包含的内容会被渲染处理。并且在Thymeleaf渲染过程中使用 ${...} 或其他表达式中时内容会被Thymeleaf
EL引擎执行。因此我们将攻击语句插入到 ${...} 表达式中，会触发Thymeleaf模板注入漏洞。  
如果带有 @ResponseBody 注解和 @RestController 注解则不能触发模板注入漏洞。因为@ResponseBody 和