    资源服务 ->> 客户端: 返回资源
```
无状态，既是优点 也是缺点 虽然可以进行无状态服务节点水平扩展 但在某些业务场景下 实现某些功能还是优点困难
为了解决无状态带来难以让令牌失效的问题，有一些办法：
1. 引入统一秘钥管理，每个用户都有自己的秘钥，一旦想要失效令牌，就可以通过重新生成秘钥的方式来进行
2. 只考虑用户修改密码失效令牌的情况，则可以通过直接用用户的密码当秘钥
- 缺点：令牌长度较长，这就意味着传输会有问题，某些服务器对Header是有限制的
#### 组成
- 头部
```json
{"typ":"JWT","alg":"HS256"} // 经过base64加密后：eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
```
- 载荷
  - 标准中注册的声明
  - 公共的声明
    - iss（Issuer）：签发人。
    - exp（Expiration Time）：令牌过期时间。
    - sub（Subject）：主题。
    - aud （Audience）：令牌受众。
    - nbf （Not Before）：令牌生效时间。
    - iat （Issued At）：令牌签发时间。
    - jti （JWT ID）：令牌编号
  - 私有的声明
```json
{"sub":"1234567890","name":"John Doe","admin":true} // eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9
```
- 签证
```
header (base64后的)
payload (base64后的)
使用secret对header以及payload进行一个签名
```
>secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用 来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去
#### JJWT
- 依赖
```xml
    io.jsonwebtoken
    jjwt
    0.9.1
```
- 构建
```java
JwtBuilder jwtBuilder = Jwts.builder()
        .setId("jntm")
        .setSubject("cxk")
        .setIssuedAt(new Date())
        .signWith(SignatureAlgorithm.HS256,"1234")
        .claim("role","admin")
        .setExpiration(new Date(System.currentTimeMillis()+300));
System.out.println(jwtBuilder.compact());
```
- 解析
```java
Claims body = Jwts.parser().setSigningKey("1234")
        .parseClaimsJws("jwt")
        .getBody();
System.out.println(body.getId()+"|"+body.getSubject()+"|"+body.getIssuedAt());
```
### OpenID
## 保密
保密是有成本的，追求越高的安全等级，就要付出越多的工作量与算力消耗
### 客户端加密
客户端加密并非是为了传输安全 传输安全应该由诸如HTTPS等的机制来进行保障 更多地 客户端加密是为了避免明文传输到服务端后造成的安全问题
### 密码加密与存储
#### 加密
1. 客户端对自己的密码取摘要：
```js
const passwd = 123456
const client_hash = MD5(passwd)
```
2. 得到摘要后进行加盐：
```js
client_hash = MD5(client_hash + salt)
```
为了应对彩虹表类的暴力破解，摘要函数可以使用慢哈希函数 也就是执行时间可以调节的函数（比如Bcrypt）
3. 为了防止服务端被脱库，服务端再使用一个盐：
```java
String salt = randomSalt();
String serverHash = SHA256(client_hash + salt)
addToDB(serverHash, salt)
```
#### 验证
1. 客户端加密还是同上，进行加盐哈希
```js
client_hash = MD5(MD5(passwd) + salt)
```
2. 服务端接收到client_hash 后，对其加盐哈希，判断是否与存储的一致：
```java
compare(server_hash, SHA256(client_hash + server_salt))
```
#### Bcrypt
> bcrypt会使用一个加盐的流程以防御彩虹表攻击，同时bcrypt还是适应性函数，它可以借由增加迭代之次数来抵御日益增进的电脑运算能力透过暴力法破解
![Bcrypt组成](/assets/202331392952.webp)
- 每次加密都会产生一个随机的salt跟密文进行哈希并拼接到最终的结果中
- 验证时需要salt加密文同时进行运算才能进行验证
## 开放平台设计
> 在互联网时代，把网站的服务封装成一系列计算机易识别的数据接口开放出去，供第三方开发者使用，这种行为就叫做Open API，提供开放API的平台本身就被称为开放平台
- 使用加签名方式，防止篡改数据
- 使用HTTPS加密传输
- 搭建OAuth2.0认证授权
- 使用令牌方式
- 搭建网关实现黑名单和白名单
### 参数传递安全
后端服务器传递参数，返回token给前端，前端通过token请求另外一台服务器
### 接口版本控制
- RPC接口：代码发包
- HTTP接口：Path、Header
使用网关分发不同版本请求
### SpringCloudOAuth2
#### 授权服务端
- 依赖
```xml
    org.springframework.boot
    spring-boot-starter-web
    org.springframework.boot
    spring-boot-starter-security
    org.springframework.cloud
    spring-cloud-starter-oauth2
```
- 配置
```java
@Configuration
@EnableAuthorizationServer
public class AuthorizationServerConfig  extends AuthorizationServerConfigurerAdapter {
    // accessToken有效期
    private int accessTokenValiditySeconds = 7200; // 两小时
    // 添加商户信息
    @Override
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
        // withClient appid
        clients.inMemory().withClient("client_1")
                .redirectUris("http://www.baidu.com")
                .secret(passwordEncoder().encode("123456"))
                .authorizedGrantTypes("password","client_credentials","refresh_token","authorization_code").scopes("all").accessTokenValiditySeconds(accessTokenValiditySeconds);
    }
    // 设置token类型
    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
        endpoints.authenticationManager(authenticationManager()).allowedTokenEndpointRequestMethods(HttpMethod.GET,
                HttpMethod.POST);
    }
    @Override
    public void configure(AuthorizationServerSecurityConfigurer oauthServer) {
        // 允许表单认证
        oauthServer.allowFormAuthenticationForClients();
        // 允许check_token访问
        oauthServer.checkTokenAccess("permitAll()");
    }
    @Bean
    AuthenticationManager authenticationManager() {
        return authentication -> daoAuhthenticationProvider().authenticate(authentication);
    }
    @Bean
    public AuthenticationProvider daoAuhthenticationProvider() {
        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
        daoAuthenticationProvider.setUserDetailsService(userDetailsService());
        daoAuthenticationProvider.setHideUserNotFoundExceptions(false);
        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());
        return daoAuthenticationProvider;
    }
    // 设置添加用户信息,正常应该从数据库中读取
    @Bean
    UserDetailsService userDetailsService() {
        InMemoryUserDetailsManager userDetailsService = new InMemoryUserDetailsManager();
        userDetailsService.createUser(User.withUsername("user_1").password(passwordEncoder().encode("123456"))
                .authorities("ROLE_USER").build());
        userDetailsService.createUser(User.withUsername("user_2").password(passwordEncoder().encode("123456"))
                .authorities("ROLE_USER").build());
        return userDetailsService;
    }
    @Bean
    PasswordEncoder passwordEncoder() {
        // 加密方式
        return new BCryptPasswordEncoder();
    }
}
@Component
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    // 授权中心管理器
    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }
    // 拦截所有请求,使用httpBasic方式登陆
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/**").fullyAuthenticated().and().httpBasic();
    }
}
```
通过 获取code
根据code获取获取access_token
#### 资源端
- 依赖同授权服务端
- 配置
```yml
security:
  oauth2:
    resource:
      ####从认证授权中心上验证token
      tokenInfoUri: http://localhost:9000/oauth/check_token
      preferTokenInfo: true
    client:
      accessTokenUri: http://localhost:9000/oauth/token
      userAuthorizationUri: http://localhost:9000/oauth/authorize
      ###appid
      clientId: client_1
      ###appSecret
      clientSecret: 123456
```
```java
@Configuration
@EnableResourceServer
public class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {
    @Override
    public void configure(HttpSecurity http) throws Exception {
        // 对 api 请求进行拦截
        http.authorizeRequests().antMatchers("/api").authenticated();
    }
}
```
```java
@EnableOAuth2Sso
```