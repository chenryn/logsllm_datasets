number of w-bit words and that arithmetic, logic, read and
write operations can all be done in O(1) time. We denote by
|x|w the word-length of an item x; that is, |x|w = |x|2/w.
Here, we assume that w = Ω(log k).
Document collections. Let W be a keyword space. A
document collection D = (D1, . . . , Dn) over W consists of
n documents, each of which is a subset of W. We denote
by D the space of all document collections over W. We
assume each document D ∈ D has a unique identiﬁer that
is independent from its contents. For ease of exposition, we
assume these identiﬁers are the integers 1 through n and that
they are assigned to documents uniformly at random. For ease
of exposition, it will be helpful to consider the following
functions. The identiﬁer function id : D → [n] that maps a
document Di to its identiﬁer i. The function D : W → 2D
that maps a keyword w to the documents that contain it. The
identiﬁers function ids : W → 2[n] that maps a keyword w to
the identiﬁers of the documents that contain it. We refer to the
word-length of a document |D|w as its volume.
dataset by (cid:101)D and assume it is a subset of the client’s document
Throughout this work, we denote the adversary’s known
collection D chosen uniformly at random.
Structured ESAs. A static structured encrypted search
algorithm ESA = (Setup, Search) consists of two efﬁcient
algorithms. Setup takes as input a security parameter 1k and a
document collection D = (D1, . . . , Dn) and outputs a secret
key K and an encrypted data collection (EDB, ct1, . . . , ctn).
Search is a two-party protocol between a client and a server.
The client inputs its secret key K and a keyword w and the
server inputs an encrypted collection (EDB, ct1, . . . , ctn). The
client receives a set of encrypted documents {cti}i∈ids(w) and
the server receives ⊥. Structured ESAs are constructed using
structured encryption (STE) [18] and, in particular, using a
multi-map or dictionary encryption schemes. We now describe
two examples BSL and OPQ which we further detail
in
Appendix A.
Given a document collection, BSL ﬁrst generates a multi-
map (also known as an inverted index) that maps each keyword
to the identiﬁers of the documents that contain the keyword.
This structure is then encrypted using a response-revealing
multi-map encryption scheme [19], [18], [42], [41], [17], [10],
[3], while the documents are encrypted using a symmetric-
key encryption scheme. This scheme has optimal search and
storage complexities. We refer the reader to [3] for the most
recent construction.
The OPQ construction ﬁrst generates a multi-map that
maps each keyword to the documents that contain it—as
opposed to the identiﬁers of the documents that contain it.
The multi-map is then encrypted using a response-hiding
multi-map encryption scheme. While the underlying idea is
straightforward, as far as we know, this scheme is new and has
never appeared in prior work. It has a better leakage proﬁle
than BSL, has the same query complexity but incurs additional
storage overhead since entire documents can be replicated
instead of just identiﬁers.
Oblivious ESAs. ESAs can also be designed using
ORAM. The simplest approach is similar to the structured ESA
construction described above but where EDB is replaced with
an oblivious RAM ORAM that stores a search structure (e.g., a
multi-map). The Search algorithm then executes the structure’s
query algorithm and replaces each read operation with a call
to the ORAM’s access protocol. We describe some examples
of oblivious ESA constructions in Appendix A, and provide a
high level overview below.
Given a document collection, SMI creates a multi-map that
maps each keyword to the identiﬁers of the documents that
contain it. This multi-map is then stored and managed in an
ORAM (or stored in a custom oblivious multi-map structure
[74]), while the documents are encrypted using a symmetric-
key encryption scheme. This construction has a better leakage
proﬁle than BSL but is less efﬁcient than both BSL and OPQ.
In particular, the oblivious structure incurs a logarithmic multi-
plicative overhead in communication complexity and multiple
rounds of interaction.
FLL is similar in that it stores a similar multi-map in an
ORAM but, unlike SMI, it also stores blocks of the documents
in a mutli-map that is itself stored in an ORAM. This solution
5
has a better leakage proﬁle than all the schemes above but
also incurs a logarithmic multiplicative overhead and multiple
rounds of communication.
Modeling leakage. Each ESA operation is associated
with leakage which itself can be composed of multiple leakage
patterns. The collection of all these leakage patterns forms
the scheme’s leakage proﬁle. Leakage patterns are (families
of) functions over the various spaces associated with the
underlying data collection. For concreteness, we recall some
well-known leakage patterns:
• the query equality pattern is the function family qeq =
{qeqk,t}k,t∈N with qeqk,t : Dk × Wt
k → {0, 1}t×t such
that qeqk,t(D, w1, . . . , wt) = M, where M is a binary t×
t matrix such that M [i, j] = 1 if wi = wj and M [i, j] = 0
if wi (cid:54)= wj. The query equality pattern is referred to as
the search pattern in the SSE literature;
• the identiﬁer pattern is the function family rid =
{ridk,t}k,t∈N with ridk,t
k → [2[n]]t such
: Dk × Wt
that ridk,t
identiﬁer pattern is referred to as the access pattern in the
SSE literature;
• the response length pattern is the function family rlen =
k → N such that
{rlenk,t}k,t∈N with rlenk,t : Dk × Wt
the function family vol =
(cid:19)
(cid:18)
volk,t(D, w1, . . . , wt) =
• the total volume pattern is the function family tvol =
rlenk,t(D, w1, . . . , wt) =(cid:0)#D(w1), . . . , #D(wt)(cid:1);
(cid:19)
(cid:1) = (ids(w1), . . . , ids(wt)). The
• the volume pattern is
(cid:18)(cid:18)
{volk,t}k,t∈N with volk,t : Dk × Wt
(cid:0)D, w1, . . . , wt
k → Nt such that
D∈D(w1)
|D|w
|D|w
(cid:19)
, . . . ,
.
{tvolk,t}k,t∈N with tvolk,t : Dk × Wt
D∈D(wt)
(cid:19)
k → Nt such that
(cid:88)
|D|w
.
D∈D(wt)
|D|w, . . . ,
(cid:18) (cid:88)
D∈D(w1)
tvolk,t(D, w1, . . . , wt) =
and
and
deﬁnition that is parameterized with a speciﬁc leakage proﬁle.
Leakage-parameterized deﬁnitions for persistent adversaries
were given in [19], [18] and for snapshot adversaries in [3]. 5
We recall these deﬁnitions here informally and refer the reader
to [19], [18], [3] for the formal deﬁnitions.
Deﬁnition II.1 (Security vs. persistent adversary (Informal)).
(cid:1) be a leakage proﬁle. An
Let Λ =(cid:0)LS,LQ
(cid:1) =(cid:0)patt1, patt2
encrypted search algorithm ESA is Λ-secure if there exists
a PPT simulator that, given patt1(D) for an adversarially-
chosen document collection D and patt2(D, q1, . . . , qt) for
adaptively-chosen queries qi, can simulate the view of any
PPT adversary. Here, the view includes the encrypted data
collection and the transcript of the queries.
Known leakage proﬁles. There are many ways to design
ESAs and each one provides a tradeoff between leakage and
efﬁciency. Here, we summarize some of the most common
leakage proﬁles and refer the reader to Appendix A for an
overview of how these proﬁles can be achieved (and their
cost). For ease of exposition, we will ignore setup leakage in
this work and just denote it by (cid:63). This is justiﬁed since none
of our attacks rely on it and, moreover, there are no known
attacks that leverage it. As we show in Appendix A, there are
structured ESAs with leakage proﬁles,
ΛBSL = (LS,LQ) =(cid:0)(cid:63),(cid:0)qeq, rid, vol(cid:1)(cid:1)
ΛOPQ = (LS,LQ) =(cid:0)(cid:63),(cid:0)qeq, tvol(cid:1)(cid:1),
ΛSMI = (LS,LQ) =(cid:0)(cid:63),(cid:0)rlen, rid, vol(cid:1)(cid:1)
ΛFLL = (LS,LQ) =(cid:0)(cid:63),(cid:0)rlen, tvol(cid:1)(cid:1).
and oblivious ESAs with leakage proﬁles,
Each operation of an ESA (e.g., setup, query) generates
leakage which is the direct product of one or more leakage
patterns.
We say that a leakage pattern is atomic if it reveals
information about each individual matching document. For
example, rid and vol are atomic whereas tvol is not. We say
that a leakage pattern is volumetric if it reveals size infor-
mation about the matching documents. For example, vol and
tvol are volumetric. Attacks that rely on volumetric leakage
are particularly interesting because they apply to almost all
constructions, including ORAM-based constructions.4
Security.
In encrypted search we consider persistent
and snapshot adversaries. A persistent adversary receives: (1)
the encrypted data; and (2) the transcripts of the interaction
between the client and the server when a query is made.
A snapshot adversary, on the other hand, only receives the
encrypted data after a query has been executed.
The security of ESAs can be formalized using “leakage-
parameterized” deﬁnitions following [19], [18]. In this frame-
work, a construction is proven secure with respect to a security
4Note that different schemes have different
leakage proﬁles but, until
recently, all known constructions leaked one of the patterns described above.
The total volume pattern in particular is very difﬁcult to suppress and is leaked
by all known constructions except for the constructions recently proposed in
[44].
6
Adversarial model. As discussed in Section I, we
consider two kinds of attacks each of which is carried out
by different adversaries. Known-data attacks (i.e., leakage-
abuse attacks) are carried out by a passive adversary that:
(1) observes all query operations and therefore sees the query
leakage; (2) knows a fraction of the client’s data; and (3)
knows the universe of keywords from which the queries are
drawn. Chosen-data attacks (i.e., injection attacks) are carried
out by an active adversary that can add arbitrary documents
either adaptively (i.e., as a function of previously-observed
search results and/or leakage) or non-adaptively.6
III. VOLUMETRIC KNOWN-DATA ATTACKS
In this section we present four new known-data attacks,
three of which are volumetric. The ﬁrst is volume analysis
which exploits the total volume pattern tvol. The second attack
is selective volume analysis which exploits the total volume
and response length patterns (tvol, rlen). The last
two are
concrete instantiations of an attack framework we refer to
as subgraph attacks. The ﬁrst instantiation, the volumetric
5Even though parameterized deﬁnitions were introduced in the context
of SSE and STE, they can be (and have been) applied to other primitives,
including to FHE-, PPE-, ORAM- and FE-based solutions.
6Note that for chosen-data attacks, one assumes a trivial client that accepts
all injected documents without any ﬁltering.
subgraph attack, exploits the volume pattern vol. The second
instantiation, the identiﬁer subgraph attack exploits the iden-
tiﬁer pattern rid.
Remark on queries vs. keywords. For ease of exposi-
tion, we will use the term query when referring to a keyword
that is unknown to the attacker. In particular, given leakage
patt(D, q1, . . . , qt) on a sequence of t queries, the adversary’s
goal will be to match each query qi to a keyword w ∈ W.
A. Volume Analysis
Volume analysis exploits the total volume pattern. It can
be viewed as a volume-based analogue of frequency analysis.
Given the total volume pattern, it maps every unknown query
to the keyword in the known dataset that has the closest total
volume. The intuition here is that keywords usually belong to
documents with different volumes so the sum of these volumes
can be used as a unique signature for a keyword.
Volume analysis takes as auxiliary input a known dataset
(cid:101)D and as leakage
where vi = (cid:80)
tvol(D, q1, . . . , qt) = (v1, . . . , vt)
D∈D(qi) |D|w. The attack then maps the ith
query qi to the keyword w ∈ W that has the closest known
volume to vi. More precisely, the attack maps qi to
(cid:26)
(cid:27)
argmaxw∈W
where f is the function
f (w) : f (w) ≤ vi
,
(cid:88)
(cid:101)D∈(cid:101)D(w)
|(cid:101)D|w,
f (w) =
that maps each keyword to its known volume. The pseudo-code
of the attack appears in the full version of this work.
Efﬁciency. The attack runs in O(t · #W) time.
In the full version of this work, we provide an extension of
the volume analysis attack we call selective volume analysis.
It exploits the response length pattern in addition to the total
volume pattern.
B. Subgraph Attacks
In this section, we present our subgraph attack framework.
Overview. Contrary to previous attacks, our subgraph
attacks exploit leakage patterns that reveal information on each
matching document. This includes the volume pattern and
the response identity pattern and we refer to the information
revealed about a document as its handle. At a high level, the
attack models the leakage pattern and the known dataset as
bi-partite graphs. For the leakage graph, the top vertices are
queries and the bottom vertices are handles, e.g., the document
identiﬁers or the volumes. An edge is added between a query
and a handle if and only if the handle is part of that query’s
observed leakage. For the known-data graph, the top vertices
are keywords and the bottom vertices are handles again, e.g.,
the document identiﬁers or volumes. Similarly, an edge exists
between a keyword and a handle if and only if the handle
corresponds to the keyword, e.g., if the document contains
the keyword or if the keyword has that volume. Note that
7
the bottom vertices are the same in both graphs. The attack
can be thought of as a subgraph mapping problem in which
the adversary’s goal is to map the known-data graph into the
leakage graph by leveraging the edge distribution of the graphs.
As an example, if in each graph there is only one top vertex
that is adjacent to a given set of bottom vertices, then it is