作者：[Shaolin@DEVCORE](https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200/ "Shaolin@DEVCORE")  
English Version：[《Sandstorm Security
Review》](https://devco.re/blog/2018/01/26/Sandstorm-Security-Review-CVE-2017-6200-en/ "《Sandstorm Security Review》")
#### 前言
2017 年初，我们有个渗透测试专案，专案的标的架构在 [Sandstorm](https://sandstorm.io/ "Sandstorm")
之上。Sandstorm 是一款 Web 平台，使用者可以轻易的在该平台安装各种 Web App（如
WordPress、GitLab…），该平台最大的特色在于这些 App 都是在沙箱中执行。因此，即使我们测试中找到多项 App
弱点，也无法对平台本身造成威胁。
为了让弱点效益最大化，我们将一部分精力转移到研究 Sandstorm 原始码，目的是跳脱 App
的沙箱环境看有没有机会影响整台伺服器。最后，我们找到了几个少见且有趣的弱点，并申请 CVE 编号如下：
  * 阻断服务攻击（Denial of Service），CVE-2017-6198
  * 绕过授权模式（Bypassing Authorization Schema），CVE-2017-6199
  * 不安全的直接存取物件（Insecure Direct Object References），CVE-2017-6200
  * 服务端请求伪造（Server-Side Request Forgery），CVE-2017-6201
#### 漏洞细节
##### CVE-2017-6198
这是一个消耗系统资源造成的 DoS。起因是 Sandstorm 并未完善限制每个 App 所能使用的资源，在
`src/sandstorm/supervisor.c++` 仅限制了每个程序能够打开的最多档案数，相关程式码如下：
    void SupervisorMain::setResourceLimits() {
      struct rlimit limit;
      memset(&limit, 0, sizeof(limit));
      limit.rlim_cur = 1024;
      limit.rlim_max = 4096;
      KJ_SYSCALL(setrlimit(RLIMIT_NOFILE, &limit));
    }
Ref: 
由于 supervisor 未限制子程序数量以及未限制储存空间用量，因此攻击者只要让 App 不断执行 fork（通常称为 Fork
Bomb）或是大量使用硬碟空间，就会造成伺服器资源不足而中断服务。
##### CVE-2017-6199
通常 Sandstorm 会设定特定组织成员才能拥有特殊的权限，而系统预设的组织成员判断方式是检查使用者 email
中“@”符号最后的字串是否在白名单内，相关程式码如下：
    if (identity.services.email.email.toLowerCase().split("@").pop() === emailDomain) {
        return true;
    }
Ref: 
因此，当攻击者填入的 email 为 `PI:EMAIL,PI:EMAIL`，系统便会将攻击者视为 `aaa.bbb` 组织的使用者。
这项攻击得以成功还有另外一个关键点，发生在 Sandstorm 登入的一个特色上。使用 Sandstorm 服务不需要设定密码，使用者每次欲登入时填入
email，系统便会发送一组每次皆不同的随机密码作为登入使用。上述的例子之所以能够成功，就是因为系统将
`PI:EMAIL,PI:EMAIL` 视为一个 aaa.bbb 网域的使用者，而随机密码会发送到 `PI:EMAIL` 以及
`PI:EMAIL` 两个不同信箱中，只要可以收到密码就可以登入使用服务。
直接案例说明：
1.在 Sandstorm 限定只有用 `aaa.bbb` 网域才可以登入。
2.登入处 email 栏位填入 `PI:EMAIL,PI:EMAIL`。（注：email 栏位在前端有用 HTML5
Validation，但后端并无检查 email 是否合法）
3.在 PI:EMAIL 信箱收到随机密码。
4.成功登入，PI:EMAIL,PI:EMAIL 被视为一个使用者，且为 aaa.bbb 组织成员！
在我们的渗透测试中，标的网站是允许认证的网域使用者自行安装 App
的。因此透过这项绕过弱点，攻击者可以再搭配本篇其他漏洞（CVE-2017-6198、CVE-2017-6200、CVE-2017-6201）做更进一步的攻击。
##### CVE-2017-6200
这是一个有趣的弱点，总共组合了两个验证上的小疏忽才能达成攻击！ 在 Sandstorm 中每个 Grain（Sandstorm
container，简单来说就是一个 App 沙箱）的拥有者都可以下载该 App 的备份资料，但由于打包流程中存在两个弱点，因此攻击者可以打包沙箱外伺服器的
`/etc` 和 `/run` 下的档案。发生的问题如下：
  1. 打包的流程隐藏了 `/var`、`/proc`、`/etc` 等敏感目录，却没有隐藏 `/etc.host` 及 `/run.host` 这两个目录。这两个目录分别是伺服器下 `/etc` 和 `/run` 的别名，是较后期的功能。
  2. 系统会将欲打包的合法档案整理出来透过标准输入介面传给 zip 打包，而判断档案和档案间的区隔是靠换行符号(`\n`)。因此，当档名中出现换行符号，可以插入非法的路径档名借由 zip 打包。程式虽然有检查档名是否存在换行符，却疏忽了检查目录名。
Ref: 
综合上述两个弱点，攻击者只要在沙箱内建立一个目录 `/var/exp\n/etc.host/passwd\n`，就可以透过下载备份的功能取得含有伺服器
`/etc/passwd` 档案的备份档。
实际情境截图：
1.先在 Grain 里新建目录 `/var/exp\n/etc.host/passwd\n`，并用 Grain Backup 的功能下载备份档。
2.解开备份档后在 `etc.host` 目录下看到沙箱外伺服器的 `/etc/passwd`
##### CVE-2017-6201
这是经典的 SSRF（Server-Side Request Forgery）问题，在 Sandstorm 安装 App
流程没有限制安装来源，攻击者提供一个安装 URL 就能让伺服器存取该位置。该问题发生在
`https://[target]/install/xxxChangeItEveryTimexxx?url=http://127.0.0.1:22/`，这个范例连结得以确认伺服器的
22 port 是否开启。
（Parse Error，代表伺服器 22 port 开启）
#### 后续
在提交弱点后，Sandstorm 官方非常迅速修正了弱点，并且发表了一篇文章：
在这次渗透经验中，我们认为 Sandstorm 是一款安全、有出色防御机制的平台。主要原因取决于它的一个核心设计理念：就是假设使用者安装的 App
都是恶意的。以这样的前提出发去保护核心系统的安全，建立起来的防御机制自然是全面且完善的。除了伺服器本身的保护，一些常见的客户端攻击（例如：XSS、CSRF）也透过
Sandstorm 特殊的随机 hostname 等机制保护的很好。因此攻击者很难从 App 本身去破坏伺服器，也很难透过攻击客户端去提升使用者的权限。
尽管是如此优秀的平台，仍旧会因一些小地方疏忽导致攻击者有机可乘。这次发现弱点的地方多半在于 library
的误用和新功能的撰写没有考虑到旧有防御架构。这在其他专案也是常见的问题，借机也提醒开发者在开发新功能时应做全面的安全检视，以避免防御落差所导致的弱点。
* * *