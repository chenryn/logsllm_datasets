| WebLogic安全漏洞 | CVE-2020-2967 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic安全漏洞 | CVE-2020-14588 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic安全漏洞 | CVE-2020-14589 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 中危 |  
| WebLogic远程代码执行漏洞 | CVE-2020-14687 | WebLogic 12.2.1.3.0WebLogic
12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic安全漏洞 | CVE-2020-14622 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 低危 |  
| WebLogic安全漏洞 | CVE-2020-2966 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0 | 低危 |  
| WebLogic远程代码执行漏洞 | CVE-2020-14625 | WebLogic 12.2.1.3.0WebLogic
12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic安全漏洞 | CVE-2020-14572 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0 | 中危 |  
| WebLogic安全漏洞 | CVE-2020-14652 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 中危 |  
| WebLogic远程代码执行漏洞 | CVE-2020-14645 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic安全漏洞 | CVE-2020-14557 | WebLogic 12.1.3.0.0WebLogic
12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 中危 |  
| WebLogic远程代码执行漏洞 | CVE-2020-14644 | WebLogic 12.2.1.3.0WebLogic
12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic远程代码执行漏洞 | CVE-2020-14841 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic远程代码执行漏洞 | CVE-2020-14825 | WebLogic 12.2.1.3.0WebLogic
12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic远程代码执行漏洞 | CVE-2020-14859 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic安全漏洞 | CVE-2020-14757 | WebLogic 12.2.1.3.0 | 中危 |  
| WebLogic安全漏洞 | CVE-2020-14820 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 中危 |  
| WebLogic安全漏洞 | CVE-2020-14883 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |  
| WebLogic远程代码执行漏洞 | CVE-2020-14882 | WebLogic 10.3.6.0.0WebLogic
12.1.3.0.0WebLogic 12.2.1.3.0WebLogic 12.2.1.4.0WebLogic 14.1.1.0.0 | 高危 |
上述表中记录的漏洞是2020年Oracle官方披露的WebLogic漏洞，攻击者通过向服务器发送精心构造恶意序列化数据，当服务器进行反序列化，解析序列化数据时，触发Java反序列化漏洞，造成执行任意代码。  
比起2020年之前的漏洞，2020年新增了IIOP协议的JAVA反序列化利用方式，也增加了Coherence组件中Extractor系列漏洞。这两类漏洞的出现也体现了黑名单防御机制的局限性。
**2020年之后，可能依旧会出现利用其他WebLogic内部组件构造新的gadget进行漏洞利用。**
**定制化业务依旧是最常见被攻破的目标**
回顾全年数据，在被抽样的企业所对应的基础数据中，涉及200+定制化业务系统，漏洞安全威胁数量达数百个。其中，高风险系统占比高达61.3%！中风险与低风险系统占比基本持平。  
从漏洞类型来看，信息泄漏漏洞和业务逻辑漏洞是出现频率最高的漏洞类型，占到全年Web漏洞总数的41.9%；此外XSS、未授权访问漏洞分别占比7.9%和6.3%。  
信息泄露漏洞、业务逻辑漏洞（包含但不仅限于暴力破解、用户名穷举、任意密码重置、任意用户\企业注册、验证码固定、图形码可重复利用、支付\退款逻辑漏洞）、弱口令，在本次调研分别占比24.4%、17.4%、11.4%，属于高发漏洞类型，但受业务系统的重要程度、部署位置等影响，危害等级没有明显规律。企业在日常管理中，仍需加强巡检，结合定期漏洞扫描和必要的渗透测试及时发现修补此类漏洞。  
从漏洞严重维度来看，严重与高危漏洞占比高达41%，中危漏洞占比21%，其中漏洞造成严重影响的依旧是SQL注入、命令注入和代码注入漏洞。  
SQL注入即通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。攻击者利用SQL注入漏洞，可以获取数据库中的多种信息(例如：管理员后台密码)，从而脱取数据库中内容(脱库)。在特别情况下，还可以修改数据库内容或者插入内容到数据库，如果数据库权限分配存在问题，或者数据库本身存在缺陷，那么攻击者可以通过SQL注入漏洞直接获取Webshell或者服务器系统权限。在本次抽样调查中，有87.5%的SQL注入漏洞被判定为高危。
**近几年安全水平整体有较大的提升，总体上SQL注入漏洞发生频率有所减少，本次抽样中占比4.3%，虽此漏洞数量呈下降趋势，但还是一个有力杀器，各企业仍需加以重视。**  
命令注入是一种攻击，其目标是通过易受攻击的应用程序在主机操作系统上执行任意命令。在此攻击中，攻击者提供的操作系统命令通常以易受攻击的应用程序的权限执行。成功利用此漏洞会造成：执行未经授权的代码或命令；DoS：崩溃，退出或重新启动；读取/修改文件或目录；读取应用数据；修改申请数据等。代码注入是用户通过提交执行命令，由于服务器对用户的输入没有过滤或者过滤不严导致非预期的代码被执行。命令注入成功和代码注入成功都可能导致数据完整性丧失、机密性丧失，因为注入的代码数据始终与数据调用或写入有关。此外，代码注入通常可以导致执行任意代码。代码注入与命令注入的不同之处在于，攻击者仅受注入语言本身的功能的限制。如果攻击者能够将PHP代码注入到应用程序中并执行该代码，则它们仅受PHP能力的限制。命令注入包括利用现有代码来执行命令，通常是在shell上下文中执行。代码注入和命令注入类漏洞一旦出现，大概率危害重大，在此次抽样调查的数据中，89.5%的代码注入和命令注入漏洞被判定为高危漏洞，73.7%为公开已知漏洞，三四年过去，MS17-010仍然受到攻击者青睐，在本次调查样本中仍有一席之地。
**好在近年对于那些威胁程度较高的漏洞类型，安全人员已将其控制在较低出现频率，代码注入和命令注入仅占比2.5%。**
**深信服千里目安全实验室建议，除必要的渗透测试外，企业还应该定期整理资产，同时提升员工安全意识
，将安全即将变成一种文化，不管是在开发还是在日常办公都需具备较强的安全意识。 关注最新安全动态，及时更新相关系统，修复相关漏洞。**
### 2.APT视角下的漏洞威胁
漏洞是发起APT攻击的重要武器之一，本节要从漏洞角度阐述漏洞在APT攻击各阶段的作用及漏洞利用趋势，为研究APT攻击提供更好的洞察。  
2020年度深信服千里目安全实验室监测到的热门APT组织使用的热门漏洞约33个，涉及网络设备漏洞、系统漏洞、文件漏洞、浏览器漏洞、数据库漏洞、应用程序漏洞、邮件服务器漏洞等7种类型，关联APT组织11个。  
2020年度，深信服千里目安全实验室监测到的热门APT组织主要在APT攻击的初始打点（Initial Access）阶段和权限提升（Privilege
Escalation）阶段利用漏洞开展攻击，具体利用情况总结概述如下：  
（1）在初始打点（Initial
Access）阶段利用的漏洞包括：CVE-2019-11510、CVE-2019-19781、CVE-2020-5902、CVE-2019-10149、CVE-2020-2021、CVE-2020-1631、CVE-2019-1652、CVE-2019-1653、CVE-2020-10189、CVE-2020-8218、CVE-2018-13379、CVE-2019-1579、CVE-2020-15505、CVE-2020-5135、CVE-2020-0688、CVE-2019-2390、CVE-2019-6110、CVE-2019-6109、CVE-2018-20685、CVE-2019-1367、CVE-2020-1380、CVE-2020-0674、CVE-2020-0968、CVE-2019-17026、CVE-2017-11882、CVE-2017-0261、CVE-2017-0199、CVE-2018-0798及CVE-2012-0158等29个漏洞。本阶段内利用漏洞开展攻击的技术对应于MITRE
ATT&CK技巧编号：T1190、T1566.001及T1566.003；  
（2）在权限提升（Privilege
Escalation）阶段利用的漏洞包括：CVE-2020-0986、CVE-2019-0808、CVE-2016-7255及CVE-2020-1472等4个。本阶段内利用漏洞开展攻击的技术对应于MITRE
ATT&CK技巧编号为T1068。  
漏洞在APT攻击中的具体使用情况  
（1）初始打点（Initial Access）阶段  
在初始打点（Initial
Access）阶段，APT攻击者主要利用面向互联网的基础设施中遗留的一些漏洞进行攻击，以此获取对系统的初始访问权限，主要采用的攻击技术包括Exploit
Public-Facing Application和External Remote Services[MITRE ATT&CK]。  
综合各方面的信息，本年度内APT攻击者在初始打点（Initial Access）阶段利用漏洞的情况简要汇总如下表所示。  
| 战术 | 漏洞编号 | 漏洞类型 | 攻击策略 | APT组织 |  
| --------- | -------------- | -------------- | ------------------------------| -------------- |  
| T1190 | CVE-2019-11510 | 网络设备漏洞 | 攻击公开暴露应用并植入后门 | Pioneer Kitten |  
| T1190 | CVE-2019-19781 | 网络设备漏洞 | 攻击公开暴露应用并植入后门 | Pioneer Kitten |  
| T1190 | CVE-2020-5902 | 网络设备漏洞 | 攻击公开暴露应用并植入后门 | Pioneer Kitten |  