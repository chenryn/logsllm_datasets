the network and instead keeps them secret, until the remain-
ing network ﬁnds new blocks. This strategy is captured in
the state machine shown in Figure 8.
The state machine depicts the adversary’s view on the
current state of the selﬁsh mining attack.
In state 0, A
and the network have the same view of the currently longest
blockchain. A controls a fraction α of the computing power
in the network, and is therefore likely to mine a block with
probability α. With probability 1 − α, the network ﬁnds and
publishes a block, leading to state 0. Once A, however, ﬁnds
a block, she keeps it secret from the network and state 1 is
reached. Moving on, diﬀerent cases can arise.
First, the network can ﬁnd a competing block BN with
probability 1 − α, moving the state to 0′. In this case, A
has an incentive to spread his single secret block BA in the
network as fast as possible, such that a fraction γ of the
network continues mining on BA. Namely, γ is the fraction
of the network that received BA before BN . Subsequently,
three cases arise: (i) A ﬁnds a block with probability α, (ii)
the network ﬁnds a block by building upon BA with proba-
bility (1 − α)γ, or (iii) the network ﬁnds a block building on
BN , with probability (1 − α)(1 − γ). For A, these three cases
generate two, one and zero block rewards, respectively.
Second, A can ﬁnd a second block and also keep it secret,
moving to state 2. Reaching state 2 guarantees A at least
two block rewards. If the network ﬁnds a block (transition
from 2 → 0 with probability 1 − α), A can publish the two
secret blocks, generate the longest chain and earn two block
rewards. A keeps additional blocks secret moving to states
further right and publishes these blocks individually while
moving left in the state machine whenever the network ﬁnds
a block.
Beyond Selﬁsh Mining.
To deter this misbehavior, Eyal and Sirer [15] propose the
following countermeasure. When a miner is aware of two
competing blocks, the miner should propagate both blocks
and select a random block to mine on. This solution does not
take into account the case where an adversary can selectively
deny miners from receiving a particular block—as conﬁrmed
by our results.
Even worse, by preventing the delivery of blocks to a frac-
tion of the network, an adversary can create multiple virtual
partitions in the network—each mining on diﬀerent blocks.
As we show below, this grants the adversary with an addi-
tional advantage in the selﬁsh mining scenario. Notice that
...
1-α
2
...
1-α
(1-P)(1-α)
21
P:
1-P:
0
1'
α
1-α
α
3
...
α
1-α
31
P:
1-P:
0
1'
...
α
(1-P)(1-α)
P(1-α)
...
P(1-α)
22
    P²:
P(1-P):
    1-P: 
0
1''
1'
P²(1-α)
...
32
    P²:
P(1-P):
    1-P: 
0
1''
1'
...
α
P²(1-α)
...
α
...
...
Figure 9: Extending Eyal and Sirer’s state machine
to capture the case where a selﬁsh miner can deny
the delivery of recently mined blocks to a fraction P
of the network.
miners can make use of additional relay networks in order to
receive blocks and transactions faster than the oﬃcial P2P
network can provide [6]11. For instance, Matt Corallo’s relay
network [6] is optimized to transmit blocks and transactions
as fast as possible, and is designed as a fallback mechanism
for the oﬃcial P2P network. Namely, Corallo’s relay net-
work does not follow the inv and getdata protocol of the
oﬃcial P2P network, but instead directly relays blocks and
transactions. Clearly, miners which rely on an additional
relay network will immediately receive information about
blocks and transactions. In what follows, we show that the
advantage of an attacker is considerable in selﬁsh mining as-
suming that a fraction 1 − P of the miners is connected to
the additional relay network.
To this end, we extend the state machine from Eyal and
Sirer by modeling the fact that A can deny the delivery
of blocks to a fraction of the mining power. The modiﬁed
state machine is depicted in Figure 9. Let’s assume that the
adversary currently reached state 3, representing 3 secret
blocks. With probability 1 − α the honest network ﬁnds a
block B1′ , resulting in state change to state 21. A manages
to deny the delivery of this block to a fraction P of the
network, and consequently, only a fraction 1 − P has learned
about the new block B1′ . Three states arise: (i) the fraction
1 − P ﬁnds a block (with probability (1 − P )(1 − α)) and
A publishes his remaining 2 secret blocks, resulting in state
0; (ii) A ﬁnds a block with probability α (resulting in state
31), or (iii) the fraction P which has not yet seen block B1′
ﬁnds with probability P (1 − α) a block resulting in state
22. All other cases follow the same principle; A virtually
partitions the miners by denying the delivery of new blocks
to other honest miners. This strengthens the selﬁsh mining
game as it leads to even more wasted computations by the
honest miners.
Based on the state machine of Figure 9, we measure the
revenue of the adversary in comparison with ﬁndings of [15].
For this purpose, we simulate both state machines; in each
11Note that some of the largest mining pools do not make
use of the relay network [4].
7001.0
0.8
0.6
0.4
0.2
e
u
n
e
v
e
r
l
o
o
p
e
v
i
t
a
l
e
R
0.0
0.0
P = 0.250, consec. denied blocks = 2
P = 0.500, consec. denied blocks = 2
P = 0.500, consec. denied blocks = 5
Honest mining
Network control
γ = 0.00 [Eyal]
γ = 1.00 [Eyal]
0.1
0.2
0.3
0.4
0.5
Pool size
Figure 10: Relative revenue gain of selﬁsh miners
with and without the delaying of block information.
For our simulations, we assume γ = 0 and always
perform better than [15].
state, our simulator chooses the next state by generating the
probability distribution of the possible transitions according
to the given parameters. We performed up to 1,000,000
iterations for both state machines and per data point of
Figure 10. Here, we assume that A is able to deny the
delivery of 2 and 5 consecutive blocks with probabilities 0.5
and 0.25, respectively. This assumption conforms with our
ﬁndings in Section 4. To compute the revenue, we adapt the
scheme from [15]; we refer the readers to Appendix A for
more details on the adopted revenue estimation.
Our results (cf. Figure 10) show that the 33% bound ad-
vertised by Eyal and Sirer can be considerably lowered. For
instance, an adversary which succeeds in denying the de-
livery of 2 consecutive blocks from 50% of the network will
proﬁt from selﬁsh mining if he controls 26.5% of the comput-
ing power in the network. This adversary eﬀectively controls
the Bitcoin mining network given only 35% of the actual
computing power—even if 50% of the miners leverage an ad-
ditional relay network to receive transactions/blocks. Even
worse, our results show that an adversary (with P = 0.5
and 5 consecutively denied blocks) which commands less than
34% of the computing power in the network can eﬀectively
sustain the longest block chain and therefore control the en-
tire network.
5.2 Double-Spending
In what follows, we show how an adversary can lever-
age our ﬁndings to double-spend (i) fast payments in which
the corresponding transactions have not yet been included
in any block of the main blockchain (also referred to as
zero-conﬁrmation transactions) [8], and (ii) 1-conﬁrmation
transactions, i.e., transactions which have been already con-
ﬁrmed in one Bitcoin block in the main blockchain. No-
tice that zero-conﬁrmation and one-conﬁrmation transac-
tions are common to handle payments in which the time
between exchange of the currency and goods is short.
Here, we assume that the adversary A creates two trans-
actions Td and Tl sharing the same input coins. Td is a
transaction whose output addresses are owned by A, while
4. Send Tl
Vendor
Figure 11: Circumventing the double-spend relay
protection of Bitcoin XT.
the outputs of Tl are owned by a vendor V. Similar to [8],
the goal of A is to convince V to accept Tl, acquire service
from V, while ensuring that Td is conﬁrmed by miners and
included in the main blockchain.
Double-Spending of Zero-Conﬁrmation Transactions.
Zero-conﬁrmation transactions are essential for the oper-
ation of several businesses. Recall that Bitcoin blocks are
generated within 10 minutes on average which prevents the
daily operation of businesses where the exchange between
the currency and the service is short (e.g. in the order of few
minutes). In light of the double-spending analysis in [20], an
enhanced version of Bitcoin, referred to as Bitcoin XT [7],
currently broadcasts the ﬁrst double-spend transaction in
the network. This allows a vendor to observe any double-
spending attempt for an upcoming payment, and to conse-
quently deny the processing of a fast payment. By Febru-
ary 2015, almost 16 full nodes in the Bitcoin network had
adopted the double-spend relay protection of Bitcoin XT.
Motivated by our ﬁndings, we show in what follows that
the protection of Bitcoin XT is not eﬀective in preventing
double-spending attacks of fast payments. We also show
that an adversary can perform double-spending attacks—without
the risk of loosing money.
To do so, the adversary ﬁrst sends an inv message adver-
tising Td to V; this prevents V from receiving Td from the
network—in spite of the protection embedded in Bitcoin XT.
A subsequently broadcasts Td in the network, and sends Tl
to V shortly after (cf. Figure 11). From the viewpoint of V,
Tl does not conﬂict with any other transaction, and there-
fore the trade can be concluded. Although other nodes in
the network can observe the two conﬂicting transactions, Td
and Tl, and issue the corresponding warnings, V cannot re-
ceive Td from its neighbors, and is therefore unable to detect
this attack. Shortly after, the ﬁrst observed transaction in
the network (i.e. Td) is typically included in the blockchain.
A can further prevent nodes in the network from detecting
the attack, as follows. Similar to before, A issues Td in the
network, while denying its delivery to V (e.g. for a 20 minute
period). As soon as Td is conﬁrmed in a block Bd, A directly
prevents the delivery of Bd to V by sending the latter an inv
advertising Bd (cf. Section 3.2). This ensures that V does
not receive Bd from the network for at least 20 minutes.
In the meantime, A sends Tl to V which will broadcast it
in the network. Because Bitcoin XT, however, only relays
conﬂicting transactions from the memory pool, a pool of
not yet conﬁrmed transactions, Tl is not considered double-
spent. Tl, nonetheless, is considered a conﬂicting transaction
w.r.t. the already conﬁrmed Td, and therefore is not relayed
in the network.
In this way, A does not bear any risk of
701loosing her money since Td was already included in a block
and will likely be accepted by most nodes in the network.
We empirically conﬁrm our analysis using a testbed com-
prising of three Bitcoin nodes emulating a vendor V, the
adversary A and a Bitcoin XT node12. All three nodes main-
tain a direct TCP connection in order to exchange Bitcoin
transactions. We performed the aforementioned double-spending
attack a number of times; our results conﬁrm that although
the Bitcoin XT node attempts to broadcast Td, V does not
receive Td. This clearly shows that the protection of Bitcoin
XT cannot deter double-spending.
Double-Spending of 1-Conﬁrmation Transactions.
Notice that if A is connected directly to a (honest) miner
M, then A can also attempt to double-spend a transac-
tion Tl which has already been conﬁrmed by one block Bl
in the blockchain.
In this case, the only means for A to
double-spend Tl would be to include the double-spending
transaction Td in a fork of the blockchain. Recall that forks
frequently occur in the Bitcoin network [13], and are re-
solved automatically by choosing the longest fork chain. If
the blockchain fork, which contains Td, eventually emerges
as the longest fork, Td will be accepted by the majority of
the peers in the network and double-spending is successful,
since V can no longer redeem Tl.
To double-spend Tl, A connects directly to both V and
M in order to prevent the delivery of Td to both prior to
broadcasting it in the network. As mentioned earlier, this
ensures that V and M do not receive Td, but the rest of the
network receives and mine for blocks which conﬁrm Td. A
then sends Tl to M, with the aim that M conﬁrms Tl in a
block.
With some probability, the Bitcoin network eventually in-
cludes Td in block Bd. Because Bd contains the double-
spend transaction Td, A has to again prevent Bd from being
received by V and M. Later on, if M ﬁnds and broadcasts
a block Bl, then Bl will be accepted by V since the latter
does not receive any conﬂicting transaction Td nor conﬂict-
ing block Bd. This process is summarized in Figure 12.
Here, we assume that M does not control a large fraction of
the computing power—otherwise Bl will be likely included
in the main blockchain. Notice that A can collude with M
(or can mine for blocks by herself) to further increase the
success probability of the attack.
5.3 Denial of Service
Delaying information propagation in a P2P-based crypto-
currency network such as Bitcoin can be very damaging as
it results in the delay of processing payments. Our ﬁndings
clearly suggest that e.g., Denial of Service (DoS) attacks
on Bitcoin can be made more easily realizable by exploit-
ing the object request management of Bitcoin. That is, an
adversary that controls a number of nodes in the network
(and establishes connections with many Bitcoin nodes) can
eﬀectively prevent the dissemination of information, such as
blocks and transactions, in the entire network.
Notice that there are approximately 6000 reachable Bit-
coin nodes in the network13. A resource-constrained adver-
sary can simply connect to all these nodes and deny them
the delivery of transactions and blocks.
12We employ the same setup as visualized in Figure 11, but
replace the Bitcoin network with the Bitcoin XT node.
13Available from: https://getaddr.bitnodes.io/
l
Vendor
Figure 12: The adversary A performs double-
spending of a 1-conﬁrmation transaction against a
vendor, by leveraging the computing power of a
weak miner. Td corresponds to the double-spending,
and Tl to the legitimate transaction.
Given an average block generation time g, and a timeout
of 20 minutes per block (cf. Section 3.2), we estimate the
number n of required inv messages to prevent the delivery
of consecutive blocks during time t:
n(t) =
l t
g m−1
Xi=1
(cid:24) t − g · i
20
(cid:25)
(1)
In addition, A needs to ﬁll and maintain the open con-
nection slots of V. To prevent the delivery of blocks to all
6000 reachable full Bitcoin nodes, A needs to maintain ap-
proximately 450,000 active Bitcoin TCP connections14 and
transmit about 101 · 6000 ≈ 600KB of inv messages per
block. During time t, every node requires moreover n(t) inv
messages. Assuming that A can operate 10000 connections
per node15, A requires approximately 45 nodes for attempt-
ing to constantly prevent block information propagation in
the Bitcoin network.
Notice that by denying the delivery of blocks from full
Bitcoin nodes, A implicitly prevents the reception of these
blocks by the various lightweight Bitcoin clients16.
This analysis complements the work of [19] and shows that
A can deny the delivery of blocks from the entire network
using almost 45 nodes, and by transmitting only 600 KB per
denied block for every 20 minute delay.
6. COUNTERMEASURES
14Assuming all 6000 Bitcoin nodes accept no more than
125 connections and maintain on average 50 connections.
Clearly, some Bitcoin nodes accept signiﬁcantly more than
125 connections (1500 or more).
15To limit the amount of information received from these
10,000 nodes, A can outsource a Bloom ﬁlter (similar to ex-
isting lightweight clients [18]) which match a small fraction
of transactions in the system. By doing so, A reserves his
bandwidth to perform his DoS attack.
16Lightweight Bitcoin clients (e.g. SPV nodes) do not vali-
date nor maintain the full blockchain, and therefore get their
information from a subset of the reachable Bitcoin nodes.
Users typically prefer operating SPV clients, because they
require signiﬁcantly less processing power and disk storage.
702Based on our ﬁndings, we discuss and explore possible
avenues for enhancing the security of Bitcoin without dete-
riorating its scalability.