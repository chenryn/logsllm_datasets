−∥S · c∥2
2σ
2
cosh
(cid:18)
(cid:34)
exp
(cid:35)
1
2 Ey1,y2
(cid:34)
(cid:35)
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
(cid:33)
2 ρσ(∥y∥2) + 1
1
b=1
2 ρσ(∥y − 2Sc∥2)
ρσ(∥y − Sc∥2)
ρσ(∥y∥2)ρσ(∥y − Sc∥2)
2 ρσ(∥y∥2) + 1
1
2 ρσ(∥y − 2Sc∥2)
1
2
y
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
(cid:33)
.
ρσ(∥z + Sc∥2)ρσ(∥z∥2)
ρσ(∥z + Sc∥2) + ρσ(∥z − Sc∥2)
(cid:19)
bliss
sc
p
:= Ey1,y2,b[(z1, z2, c) rejected | c] =
· Ey1,y2,b
(cid:34)
1
M
ρσ(∥z∥2)
2 ρσ(∥z − Sc∥2) + 1
1
=
1
M
· Ey1,y2,b
=
1
M
·
=
=
1
Mρσ(Zm) ·
Mρσ(Zm)·
1
y
+
1
2
2 ρσ(∥y + 2Sc∥2) +
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
2 ρσ(∥z + Sc∥2)
1
2 Ey1,y2
ρσ(∥y + Sc∥2)
2 ρσ(∥y∥2) + 1
1
2 ρσ(∥y + 2Sc∥2)
ρσ(∥y∥2)ρσ(∥y + Sc∥2)
2 ρσ(∥y∥2) + 1
1
b=0
(cid:35)
(cid:34)
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
(cid:32)
(cid:32) 

Mρσ(Zm) ·
Mρσ(Zm) ·
ρσ(∥z − Sc∥2)ρσ(∥z∥2)
ρσ(∥z1 − Sc∥2)ρσ(∥z1∥2)
z2=y−Sc
ρσ(∥z − Sc∥2) + ρσ(∥z + Sc∥2) +
ρσ(∥z∥2) =
.
ρσ(∥z2 + Sc∥2)ρσ(∥z2∥2)
ρσ(∥z2 + Sc∥2) + ρσ(∥z2 − Sc∥2)
ρσ(∥z1 − Sc∥2) + ρσ(∥z1 + Sc∥2) +
1
M
z1=y+Sc
1
1
(cid:18)
z
z
bliss
sc =
p
=
The summation domain for z1 and z2 is the same, so,
From Proposition 3.2, together with the security of the rejection sampling, we can deduce that
our implementation achieves CT-EUF-CMA security.
Theorem 3.3. The CT-EUF-CMA security of our implementation in the random oracle model tightly
reduces to the standard EUF-CMA security of BLISS.
Proof. There are three hybrids to this security argument.
First, by Proposition 3.2, we can replace the CT-EUF-CMA security game by a game in which the
signing oracle simply returns pairs (σ , ℓ) where the value ℓ is the number of execution the main
signing loop when generating the signature σ.
Then, in a second hybrid, we replace the approximate discrete Gaussian distributions for y1, y2
and the approximate values of the rejection probabilities computed by our implementation by the
exact values. The Rényi divergence estimates of Section 4.1 below prove that the advantage of an
adversary in distinguishing this hybrid from the previous one is negligible.
Finally, since the ring-valued hash function H in Figure 2 (or at least the XOF it uses internally)
is modeled as a random oracle, one can easily show that the value ℓ exactly follows a geometric
distribution of parameter 1/M, where M is the constant appearing in Step 8 of Figure 2. This is
20
T′ ←(cid:0)NetworkSort(T1)|...|NetworkSort(Tn)(cid:1)
(vk)0≤k ≤n ← (j=κ
return Nκ(S) =j=κ
j=0 T′[k, j])0≤k ≤n
j=0 v’[j]
1: function Nκ(S)
T ← St · S
2:
3:
4:
5:
6:
7: end function
v’ ← NetworkSort(v)
Fig. 12. Computation of Nκ .
▷ where Ti are the columns of T
already noted in the original BLISS paper [16, Lemma 2.1], and follows from a general result of
Lyubashevsky [31, Lemma 4.7]. Since the constant M is public, there is zero difference in advantage
with another game in which the value ℓ is removed from oracle replies. But that game is exactly
the standard EUF-CMA security experiment for BLISS.
□
3.2.4 Making key generation constant-time. As we have noted, our implementation of the key
generation algorithm of Figure 1 is not actually constant time. However, there are no major obstacle
in making it constant time if desired. In this paragraph, we briefly describe how this can be done.
There are mainly three steps in key generation that are not trivially constant time: the sampling
of the sparse polynomials f and g in Step 1; the computation of the value Nκ(S) in Step 4; and the
ring division in Step 5. Note on the other hand that the rejection sampling in and of itself is not
problematic, because any secret generated at that point is discarded if rejection happens; therefore,
the number of rejections leaks no secret information per se.
To implement the sampling of f and g in constant time, one possible approach is to use the same
algorithm as the one we described in Section 3.1.3 above for ring-valued hashing. Since the number
of coefficients is larger in this case, the approach is not highly efficient, but it is not a serious issue
for key generation.
Regarding the ring division, we implement it by computing the NTT of f , and inverting the NTT
coefficients modulo q in Montgomery representation. The only change that needs to be done to
make it constant time is to use a constant time version of the modular inversion, as described e.g.
by Bos [7].
Finally, the more subtle problem is to obtain a constant time implementation of the computation
As explained in [16, Sec. 4.1], one possible approach to carry out that computation is to construct
T ∈ Zn×n = ST · S, sort its columns, sum the κ largest values of each line, sort the resulting vector
and sum its κ largest components. All these operations are naturally constant-time, except for the
sorting steps. To make sure that these sorts implemented in constant time as well, we suggest to
rely on a data-oblivious sorting algorithm, such as a sorting network. The resulting constant-time
implementation is presented in Figure 12.
1 − 1/(cid:0)M exp(− ∥Sc∥2
4 REJECTION SAMPLING WITH POLYNOMIAL APPROXIMATIONS
In the BLISS signing algorithm of Figure 2, candidate signatures (z, c) are rejected with probability
)(cid:1). As this probability depends on the secret S, we aim at giving
a constant time implementation of this rejection step. This construction relies on a polynomial
2σ 2 ) · cosh( ⟨z,Sc⟩
σ 2
21
of:
Nκ(S) = max
I ⊂{1, ...,n}
#I =κ
J ⊂{1, ...,n}
max
#J =κ
(cid:16)
i∈I
(cid:17)(cid:17) where T = ST · S,
Ti, j
(cid:16)
j∈J
1: Compute
such that
x1 ∈ I1 :=
(cid:21)
(cid:20)
2
2 , 0
− σ
α
(cid:20)
−2B2σ
α
2B2σ
α
,
(cid:21)
and x2 ∈ I2 :=
x1 = ∥Sc∥2 − σ
α
2
2 and x2 = 2⟨z, Sc⟩
[0, 1]2
2: Generate a pair (u1, u2) of fixed-precision numbers uniformly at random in
3: Let a = 1 if u1 ≤ exp( x1
4: Let b = 1 if cosh( x2
5: Return a ∧ b
2σ 2 ) · u2 ≤ 1, and b = 0 otherwise
2σ 2 ), and a = 0 otherwise
Fig. 13. The BLISS rejection sampling.
2σ 2 ) and cosh( ⟨z,Sc⟩
σ 2
approximation to compute the transcendental terms exp(− ∥Sc∥2
as explained in Section 3 above.
) in constant time,
More precisely, in view of the rejection sampling algorithm described in Figure 13, our goal is to
first determine the number of bits of precision on the various values involved we need to ensure
security, and to then construct polynomial approximations of exp and cosh that make it possible to
evaluate the transcendental expression in Steps 3 and 4 to that level of precision, in constant time,
using only integer arithmetic. As discussed previously, this construction is carried out using a novel
approach based on a Sobolev norm, which is Euclidean and hence allows us to use lattice reduction
techniques to obtain approximations of our chosen shape easily.
In the following, we first recall the recent results based on Rényi divergence that we use to
evaluate the quality of our approximations. Afterwards, we aim at deriving a polynomial that
approximates the exponential, and then the hyperbolic cosine.
4.1 Rényi Divergence
In [35], Prest introduces an inequality that evaluates the security gap between two cryptographic
schemes that query an ideal distribution D and an approximate distribution D′ using Rényi
divergence.
Definition 4.1 (Rényi Divergence). Let P, Q be two distributions such that Supp(P) ⊆ Supp(Q).
For a ∈ (1, +∞), we define the Rényi divergence of order a by
P(x)a

Ra(P, Q) =(cid:169)(cid:173)(cid:171)
x ∈Supp(P)
Q(x)a−1(cid:170)(cid:174)(cid:172)
1
a−1
.
In addition, we define the Rényi divergence of order +∞ by
P(x)
Q(x) .
R∞(P, Q) = max
x ∈Supp(P)
According to [35], by taking a = 2 · λ where λ is the security parameter of the cryptosystem
using D; the following inequation ensures that the use of the approximate distribution D′ provides
at least λ − 1 bits of security.
(2)
The integer qD denotes the maximum number of queries to the distributions.
R2·λ(D||D′) ≤ 1 +
1
4qD .
22
Number of queries. NIST suggested qs = 264 maximum signature queries for post-quantum stan-
dardization. In the BLISS signing algorithm, the Bernoulli distribution with exponential parameter is
called once per attempt at generating a Gaussian sample, which is repeated a small number of times
(≤ 2 on average) due to rejection in Gaussian sampling, 2n times to generate all the coefficients
of y1, y2, and M times overall where M is the repetition rate of the signature scheme. Therefore,
the expected number of calls qD to the Bernoulli distribution as part of Gaussian sampling when
generation qs signatures is bounded as qD ≤ 2M · 2n · qs ≤ 278 for BLISS–I. Note on the other
hand that the final rejection sampling is only called M < 2 times per signatures on average, so the