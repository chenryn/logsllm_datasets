ﬁes setting up the spoof site.
3 Solutions
A number of tests can be used to distinguish spoof
pages from honest pages. We present the tests we im-
plemented and evaluated in three groups: stateless meth-
ods that determine whether a downloaded page is suspi-
cious, stateful methods that evaluate a downloaded page
in light of previous user activity, and methods that eval-
uate outgoing html post data. Our browser plug-in ap-
plies these tests to all downloaded pages and combines
the results using a scoring mechanism described below.
The total spoof index of a page determines whether the
plug-in alerts the user and determines the severity and
type of alert. Since pop-up warnings are intrusive and
annoying, we attempt to warn the user through a passive
toolbar indicator in most situations. A user checkbox
can eliminate all pop-ups if desired.
We note that server-side methods, such as tracking
server image requests, may also be effective in identi-
fying spoof sites. However, the focus of this paper is on
client-side browser solutions. In section 6, we comment
on some ways that server-side modiﬁcations may make
our client-side methods more reliable and effective.
3.1 Scoring
Given a downloaded web page and some browser state
as input, our plug-in applies tests T1, . . . , Tn, with test
Ti producing a number Pi in the range [0, 1]. By con-
vention, Pi = 1 indicates that the page is likely to be a
spoof and Pi = 0 indicates the opposite. Most of our
tests return either 0 or 1, but some can return a value
between 0 and 1.
We combine the test results into a total spoof score,
T SS, using a standard aggregation function:
(cid:80)n
(cid:80)n
(cid:80)n
T SS(page) =
+
+
+ . . .
i=1 wiPi
i,j=1 wi,jPiPj
i,j,k=1 wi,j,kPiPjPk
The w’s are preset weights selected to minimize the false
alarm rate. Note that most of the w’s are set to zero so
that the actual number of terms in the expression is rel-
atively small. This approach of applying multiple tests
and combining the results using a scoring mechanism is
4
commonly used in intrusion detection systems and spam
ﬁlters [Din03].
The scoring function not only sums individual tests,
but also sums products of pairs, triples, and larger sub-
sets of tests. The reason for product terms is that when
certain combinations of events occur the likelihood of
the page being a spoof increases dramatically. For exam-
ple, if a company logo appears on an unauthorized page
and the page contains password and creditcard ﬁelds, the
page is very likely to be a spoof. Consequently, the term
corresponding to the product of these three tests is given
substantial weight.
3.2 Stateless page evaluation
We begin by describing a collection of tests that work
by examining the current page only.
Url check There are various methods that attackers
can use to produce misleading urls. For example, an
@ in a url causes the string to the left to be disregarded,
with the string on the right treated as the actual url for
retrieving the page. Combined with the limited size of
the browser address bar, this makes it possible to write
urls that appear legitimate within the address bar, but
actually cause the browser to retrieve a page from an ar-
bitrary site.
Image check Spoof sites usually contain images taken
from the honest site. For example, the eBay logo ap-
pears on spoofed eBay pages to give the user the im-
pression that they are communicating with eBay. If the
eBay logo appears on a login page unrelated to eBay,
that page is suspicious. The same applies to other iden-
tiﬁably eBay-speciﬁc images such as banners and but-
tons. We note that corporate logos often legitimately ap-
pear on many e-commerce sites (e.g., the Amazon logo
appears on sites that sell products through Amazon) and
therefore we only count this test for pages that ask for
private user input.
In order to apply this check in a stateless way, the
SpoofGuard plug-in is supplied with a ﬁxed database of
images and their associated domains. Since attackers
generally do not have email lists for customers of spe-
ciﬁc sites, they must try to spoof sites that are used by a
signiﬁcant fraction of web users. Thus SpoofGuard can
be useful even if we only account for relatively small
number of frequently spoofed domains such as eBay,
PayPal, AOL, and so on. When the browser downloads
a login page all images on the page are compared to im-
ages in the SpoofGuard database. The spoof-score for
the page is increased if a match is found but the page’s
domain is not a valid domain for the image.
What if the spoof page contains a slight modiﬁcation
of the real image? The image comparison test might fail
to detect the spoof. Fortunately, as noted earlier, attack-
ers often directly copy or link to images on the honest
site. Nevertheless, we defend against small image mod-
iﬁcation by storing an image hash rather than the ac-
tual image. Image hashing refers to a hashing algorithm
that produces the same hash for similar images. While
present technology does not provide ideal image hashes,
there has been some progress in this area [VKJM00]. In
our case, image hashing can be strengthened by asking
e-commerce sites to use images that are especially well
suited for image hashing. For example, in many cases
we could use optical character recognition (OCR) as the
image hashing algorithm. An added beneﬁt of image
hashing is that storing an image hash rather than the full
image reduces plug-in storage requirements. We discuss
other aspects of this test in Section 5.3.
Link check The links contained within a page are ex-
amined. The link check fails for a page if at least one-
fourth of the links fail the url check described above.
Password check Pages that request a password merit
closer scrutiny than pages that do not.
If a page re-
quests a password (or other sensitive information), we
also check whether https is used and, if so, whether the
certiﬁcate check succeeded or failed.
3.3 Stateful page evaluation
In stateful page evaluation, the browser history ﬁle
and additional history stored by SpoofGuard are used to
evaluate the referring page. Since it is important to min-
imize the number of false alarms, SpoofGuard does not
issue any warnings for visiting a site that is in the user’s
history ﬁle. The rationale for this is that if the user is
warned the ﬁrst time, and decides to proceed, the user is
assumed to have sufﬁcient reason to trust the site.
Domain check If the domain of a page closely resem-
bles a standard or previously visited domain, the page
may be part of a spoof. Although crude, we currently
compare domains by Hamming (edit) distance. For ex-
ample efrade.com will raise the domain check if
etrade.com is in the ﬁle of commonly spoofed sites
or in the user history. Clearly, it is possible to improve
our comparison algorithm by studying the way people
are fooled; this is a signiﬁcant direction for future work.
A related issue is that some businesses outsource some
of their web operations to contractors with different do-
main names. This poses an interesting challenge that
we believe can be addressed. However, outsourced web
activity leads to false alarms in the current version of
SpoofGuard.
Referring page When a user follows a link,
the
browser maintains a record of the referring page. Since
the typical web spooﬁng attack begins with an email
message, a referring page from a web site where the user
may have been reading email (such as Hotmail) raises
the level of suspicion. One complication associated with
Hotmail, for example, is that Hotmail uses numeric IP
addresses instead of symbolic host names. Therefore,
when a user clicks on a link in a Hotmail message, the
browser provides a numeric IP address to SpoofGuard
as the referring page. In this situation, SpoofGuard uses
reverse DNS to ﬁnd the domain name associated with a
numeric address, allowing us to identify Hotmail as the
referring site.
Image-domain associations The image check de-
scribed above (in section 3.2) relies on a database as-
sociating images such as corporate logos with domains.
The initial static database can be assembled using a web
crawler or other tool, or it can be augmented using an in-
dividual’s browsing history. An early version of Spoof-
Guard used a ﬁxed database; the current SpoofGuard
implementation uses a hashed image history ﬁle.
3.4 Evaluating post data
Evaluating post data is a critical part of any client-side
defense against web-spooﬁng attacks, since the point
of any defense is to prevent malicious sites from gain-
ing conﬁdential information from an honest web user.
When a user ﬁlls in form data, SpoofGuard intercepts
and checks the html post data, allowing the actual post
to proceed only if the spoof index is below the user-
speciﬁc threshold for posts. If a user conﬁnes pop-up
warnings to posts only, then the user will never be inter-
rupted when reading web pages, only (possibly) when
ﬁlling in forms. Note, however, that even if no warnings
are generated on pages leading up to the spoof form, the
page checks described above are used, in combination
with analysis of the post data, to determine the spoof
index associated with an html post.
Outgoing password check SpoofGuard maintains a
database of (cid:104)domain, user name, password(cid:105) triples. If
the user reuses a password on a new domain,
this
trips the password check. To avoid the possibility of
leaking sensitive information, the stored passwords are
hashed using SHA-1 and the comparison is performed
on hashed values.
Interaction with image check In our spoof index cal-
culation, the image check interacts with the outgoing
password check non-linearly. For example, if a user en-
ters her E*Trade user name and password to a site that is
5
not at etrade.com, this raise the spoof index a certain
amount (determined in part by user-selected weights).
The spoof index is raised multiplicatively higher if the
site also contains the E*Trade logo.
Check of all post data There are several ways that
a web page might request a password. For example, a
clever spoof site might use an image of the word “pass-
word” instead of html text to request the user’s pass-
word. To protect against this form of spoof attack, all
outgoing data in an html post can be hashed and checked
against a database of passwords and other information
deemed sensitive. In this way, we can still detect pass-
word leakage, even if the spoof page does not contain
the text “password.”
Exception for search engines Since a user may enter
any data into a search engine, SpoofGuard is not suspi-
cious of known search engines at known domains.
It
is also possible to ignore data posted into a “search”
or “ﬁnd” ﬁeld in an arbitrary page. This allows for
shopping sites, for example, that allow a customer to
search the catalog by keyword or product name. Of
course, good password practice would prevent an intel-
ligent user from using a product name or other English
word as an important password, rendering this exception
unnecessary.
4 SpoofGuard architecture
SpoofGuard is an Internet Explorer browser helper
object, or “plug-in.” A browser helper object is a COM
it runs
component that is loaded when IE starts up;
in the same memory context as the browser.
In gen-
eral, a browser helper object may perform any action
on IE windows and modules, including manipulating the
browser menu and toolbar, detecting and responding to
browser events, and creating additional windows.
SpoofGuard accesses the Internet Explorer history ﬁle
and uses three additional ﬁles stored in the user proﬁle
directory. One is a read-only ﬁle of host names of email
sites such as Hotmail and Yahoo!Mail, used in the re-
ferring page check. The other two ﬁles are the ﬁle of
hashed password history (domain, user name, and pass-
word) and the ﬁle of hashed image history. SpoofGuard
can use reverse DNS to ﬁnd domain names for numeric
IP addresses, but does not otherwise send or receive any
information on the network. The browser history ﬁle
can be reset using a browser dialog box and the addi-
tional SpoofGuard histories can be reset using a button
on the SpoofGuard conﬁguration panel.
4.1 Plug-in interface and access to browser
data
SpoofGuard consists of a COM component that ex-
tends IDeskband, an interface that causes IE to load
SpoofGuard as a registered toolbar, and a few other
modules that run in response to actions of the toolbar
component. SpoofGuard is written in Visual C++, and
uses both Windows Template Library (WTL) 7.0 and
Microsoft Foundation Class Library (MFC). Two Spoof-
Guard window classes implement the CWindowImpl
interface to deﬁne the appearance and user interaction
of the toolbar. The interaction between the main mod-
ules, described below, is shown in Figure 1.
• WarnBar: This is a COM component that houses
the SpoofGuard toolbar. All site evaluations and
post data checks are carried out here.
• ReﬂectionWnd: This CWindowImpl class imple-
ments a transparent window that sits on top of the
toolbar and reﬂects user messages (e.g. mouse
clicks) to UWToolBar. WarnBar requests Reﬂec-
tionWnd to pop-up a warning message when the
user tries to send sensitive information to a suspi-
cious server.
• UWToolBar: This CWindowImpl class deﬁnes the
appearance of the toolbar. UWToolBar stores the
user settings (e.g. check index, threshold, etc.) dur-
ing runtime. WarnBar requests UWToolBar for
these settings to determine the trafﬁc lights color
and the warning messages that appear in the Cur-
rent Page Status dialog. User settings are stored in
the registry when SpoofGuard closes.
• ConﬁgDlg opens an Options window when the
user clicks the Options button. UWToolBar up-
dates the user settings based on the result that Con-
ﬁgDlg returns when the window terminates.
• DomainDlg opens the Current Page Status window
when the user clicks on the trafﬁc light icon. It con-
tains the warning messages speciﬁc to the current
page.
Browser data and events When Internet Explorer
it calls the SetSite method in the IOb-
launches,
jectWithSite interface to initialize WarnBar. WarnBar
receives a pointer to the web browser object, and passes
the object to the ReﬂectionWnd and UWToolBar, al-
lowing SpoofGuard to constantly check the browser
contents during execution. Internet Explorer’s DWeb-
BrowserEvents2 class exports BeforeNavigate2 and
DocumentComplete event handlers, which are both
implemented in WarnBar class. A BeforeNavigate2
event occurs before navigation. This gives WarnBar the
url that the browser is attempting to navigate to, the out-
going post, and a chance to cancel the navigation. The
6
Figure 1. SpoofGuard architecture
7
ReflectionWndConfigDlgDomainDlgWarnBarUWToolBarSends user messages (e.g. button click)Sends current user settings (e.g. weight values, alert level)Requests a pop up warning if WarnBarshowsthat a site’s total alert value is higher than the user’s threshold.Requests Options window (user settings) to pop up.Requests Current Page Status window to pop up.Figure 2. SpoofGuard toolbar
url check using the history list, the domain name check,
the email referring page check and post data check are
carried out after a BeforeNavigate2 event. A Docu-
mentComplete event occurs when a web site ﬁnishes
loading completely. The image check, link check, and
password check are carried out after a DocumentCom-
plete event.
4.2 User interface
The SpoofGuard toolbar is shown in Figure 2. The
options button can be used to conﬁgure the tool, while
the trafﬁc light (green, yellow, or red) provides an in-
dication to the user about the current page. Clicking
on the trafﬁc light also pops up additional information
about the current page. When the spoof rating is above
the user-speciﬁed threshold, SpoofGuard will pop-up an
additional warning window that requires user consent to
send user web form input (or other http post data) out to
a web site.
The conﬁguration pop-up, shown in Figure 3, lets the
user select a spoof rating threshold, and set independent
weights and sensitivity levels for the domain name, url,
link, password, and image checks. The user may also
disable pop-ups, set history cache, enable image hash