.i errno
is
.i not
set.
.\" .sh versions
.\" available already in glibc 2.0, possibly earlier
.sh conforming to
this function is not specified by posix or the c standards.
a similar function exists on many system v derivatives,
but the range of values for
.ir param
varies across systems.
the svid defined options
.br m_mxfast ,
.br m_nlblks ,
.br m_grain ,
and
.br m_keep ,
but only the first of these is implemented in glibc.
.\" .sh notes
.sh bugs
specifying an invalid value for
.i param
does not generate an error.
.pp
a calculation error within the glibc implementation means that
a call of the form:
.\" fixme . this looks buggy:
.\" setting the m_mxfast limit rounds up:    (s + size_sz) & ~malloc_align_mask)
.\" malloc requests are rounded up:
.\"    (req) + size_sz + malloc_align_mask) & ~malloc_align_mask
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=12129
.pp
.in +4n
.ex
mallopt(m_mxfast, n)
.ee
.in
.pp
does not result in fastbins being employed for all allocations of size up to
.ir n .
to ensure desired results,
.i n
should be rounded up to the next multiple greater than or equal to
.ir (2k+1)*sizeof(size_t) ,
where
.i k
is an integer.
.\" bins are multiples of 2 * sizeof(size_t) + sizeof(size_t)
.pp
if
.br mallopt ()
is used to set
.br m_perturb ,
then, as expected, the bytes of allocated memory are initialized
to the complement of the byte in
.ir value ,
and when that memory is freed,
the bytes of the region are initialized to the byte specified in
.ir value .
however, there is an
.ri off-by- sizeof(size_t)
error in the implementation:
.\" fixme . http://sources.redhat.com/bugzilla/show_bug.cgi?id=12140
instead of initializing precisely the block of memory
being freed by the call
.ir free(p) ,
the block starting at
.i p+sizeof(size_t)
is initialized.
.sh examples
the program below demonstrates the use of
.br m_check_action .
if the program is supplied with an (integer) command-line argument,
then that argument is used to set the
.br m_check_action
parameter.
the program then allocates a block of memory,
and frees it twice (an error).
.pp
the following shell session shows what happens when we run this program
under glibc, with the default value for
.br m_check_action :
.pp
.in +4n
.ex
$ \fb./a.out\fp
main(): returned from first free() call
*** glibc detected *** ./a.out: double free or corruption (top): 0x09d30008 ***
======= backtrace: =========
/lib/libc.so.6(+0x6c501)[0x523501]
/lib/libc.so.6(+0x6dd70)[0x524d70]
/lib/libc.so.6(cfree+0x6d)[0x527e5d]
\&./a.out[0x80485db]
/lib/libc.so.6(__libc_start_main+0xe7)[0x4cdce7]
\&./a.out[0x8048471]
======= memory map: ========
001e4000\-001fe000 r\-xp 00000000 08:06 1083555    /lib/libgcc_s.so.1
001fe000\-001ff000 r\-\-p 00019000 08:06 1083555    /lib/libgcc_s.so.1
[some lines omitted]
b7814000\-b7817000 rw\-p 00000000 00:00 0
bff53000\-bff74000 rw\-p 00000000 00:00 0          [stack]
aborted (core dumped)
.ee
.in
.pp
the following runs show the results when employing other values for
.br m_check_action :
.pp
.in +4n
.ex
$ \fb./a.out 1\fp             # diagnose error and continue
main(): returned from first free() call
*** glibc detected *** ./a.out: double free or corruption (top): 0x09cbe008 ***
main(): returned from second free() call
$ \fb./a.out 2\fp             # abort without error message
main(): returned from first free() call
aborted (core dumped)
$ \fb./a.out 0\fp             # ignore error and continue
main(): returned from first free() call
main(): returned from second free() call
.ee
.in
.pp
the next run shows how to set the same parameter using the
.b malloc_check_
environment variable:
.pp
.in +4n
.ex
$ \fbmalloc_check_=1 ./a.out\fp
main(): returned from first free() call
*** glibc detected *** ./a.out: free(): invalid pointer: 0x092c2008 ***
main(): returned from second free() call
.ee
.in
.ss program source
\&
.ex
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    char *p;
    if (argc > 1) {
        if (mallopt(m_check_action, atoi(argv[1])) != 1) {
            fprintf(stderr, "mallopt() failed");
            exit(exit_failure);
        }
    }
    p = malloc(1000);
    if (p == null) {
        fprintf(stderr, "malloc() failed");
        exit(exit_failure);
    }
    free(p);
    printf("main(): returned from first free() call\en");
    free(p);
    printf("main(): returned from second free() call\en");
    exit(exit_success);
}
.ee
.sh see also
.ad l
.nh
.br mmap (2),
.br sbrk (2),
.br mallinfo (3),
.br malloc (3),
.br malloc_hook (3),
.br malloc_info (3),
.br malloc_stats (3),
.br malloc_trim (3),
.br mcheck (3),
.br mtrace (3),
.br posix_memalign (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/fenv.3
.\" copyright (c) 2000 andries brouwer (PI:EMAIL)
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th getpass 3  2021-03-22 "linux" "linux programmer's manual"
.sh name
getpass \- get a password
.sh synopsis
.nf
.b #include 
.pp
.bi "char *getpass(const char *" prompt );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getpass ():
.nf
    since glibc 2.2.2:
        _xopen_source && ! (_posix_c_source >= 200112l)
            || /* glibc since 2.19: */ _default_source
            || /* glibc 
in case it is smaller than 8, and can in any case be obtained using
.ir sysconf(_sc_pass_max) .
however, posix.2 withdraws the constants
.b pass_max
and
.br _sc_pass_max ,
and the function
.br getpass ().
.\" libc4 and libc5 have never supported
.\" .b pass_max
.\" or
.\" .br _sc_pass_max .
the glibc version accepts
.b _sc_pass_max
and returns
.b bufsiz
(e.g., 8192).
.sh bugs
the calling process should zero the password as soon as possible to avoid
leaving the cleartext password visible in the process's address space.
.sh see also
.br crypt (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/openpty.3
.so man3/rpc.3
.so man3/inet.3
.so man3/argz_add.3
.\" copyright (c) 2020 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th pidfd_getfd 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
pidfd_getfd \- obtain a duplicate of another process's file descriptor
.sh synopsis
.nf
.br "#include " "      /* definition of " sys_* " constants */"
.b #include 
.pp
.bi "int syscall(sys_pidfd_getfd, int " pidfd ", int " targetfd ,
.bi "            unsigned int " flags );
.fi
.pp
.ir note :
glibc provides no wrapper for
.br pidfd_getfd (),
necessitating the use of
.br syscall (2).
.sh description
the
.br pidfd_getfd ()
system call allocates a new file descriptor in the calling process.
this new file descriptor is a duplicate of an existing file descriptor,
.ir targetfd ,
in the process referred to by the pid file descriptor
.ir pidfd .
.pp
the duplicate file descriptor refers to the same open file description (see
.br open (2))
as the original file descriptor in the process referred to by
.ir pidfd .
the two file descriptors thus share file status flags and file offset.
furthermore, operations on the underlying file object
(for example, assigning an address to a socket object using
.br bind (2))
can equally be performed via the duplicate file descriptor.
.pp
the close-on-exec flag
.rb ( fd_cloexec ;
see
.br fcntl (2))
is set on the file descriptor returned by
.br pidfd_getfd ().
.pp
the
.i flags
argument is reserved for future use.
currently, it must be specified as 0.
.pp
permission to duplicate another process's file descriptor
is governed by a ptrace access mode
.b ptrace_mode_attach_realcreds
check (see
.br ptrace (2)).
.sh return value
on success,
.br pidfd_getfd ()
returns a file descriptor (a nonnegative integer).
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
.i pidfd
is not a valid pid file descriptor.
.tp
.b ebadf
.i targetfd
is not an open file descriptor in the process referred to by
.ir pidfd .
.tp
.b einval
.i flags
is not 0.
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached
(see the description of
.br rlimit_nofile
in
.br getrlimit (2)).
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.b eperm
the calling process did not have
.b ptrace_mode_attach_realcreds
permissions (see
.br ptrace (2))
over the process referred to by
.ir pidfd .
.tp
.b esrch
the process referred to by
.i pidfd
does not exist
(i.e., it has terminated and been waited on).
.sh versions
.br pidfd_getfd ()
first appeared in linux 5.6.
.\" commit 8649c322f75c96e7ced2fec201e123b2b073bf09
.sh conforming to
.br pidfd_getfd ()
is linux specific.
.sh notes
for a description of pid file descriptors, see
.br pidfd_open (2).
.pp
the effect of
.br pidfd_getfd ()
is similar to the use of
.br scm_rights
messages described in
.br unix (7),
but differs in the following respects:
.ip \(bu 2
in order to pass a file descriptor using an
.br scm_rights
message,
the two processes must first establish a unix domain socket connection.
.ip \(bu
the use of
.br scm_rights
requires cooperation on the part of the process whose
file descriptor is being copied.
by contrast, no such cooperation is necessary when using
.br pidfd_getfd ().
.ip \(bu
the ability to use
.br pidfd_getfd ()
is restricted by a
.br ptrace_mode_attach_realcreds
ptrace  access  mode check.
.sh see also
.br clone3 (2),
.br dup (2),
.br kcmp (2),
.br pidfd_open (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or