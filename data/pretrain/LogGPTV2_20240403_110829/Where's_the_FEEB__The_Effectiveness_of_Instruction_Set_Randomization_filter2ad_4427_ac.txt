the locations where we place the 0xffff.
For target applications for which popping 65,535 bytes
from the stack does not cause a crash, we can use
another type of elimination. After we guess enough
bytes, we use a jump instruction to eliminate incorrect
masks. We place a jump instruction with its offset
encrypted using one of the apparently correct guessed
masks. The jump instruction when the mask is correct
will cause a jump to a memory location where a near
return is placed.
Once we have determined six or more masks, we can
take advantage of additional injected instructions to
further minimize the likelihood of false positives and
improve guessing efficiency. These techniques are
similar for both the return and jump attacks, and are
described in Section 3.3.
3.2 Jump Attack
Because it
involves guessing a 2-byte key and the
distinguishing behavior is less particular,
the jump
attack is more prone to false positives than the return
attack. Fortunately, the structure of the x86 instruction
set can be used to take advantage of the false positives
to improve the key search efficiency.
There are four possible reasons the apparently correct
behavior is observed for a jump attack guess:
1. The correct key was guessed and the injected
instruction decrypted to a jump with offset -2.
2. The injected guess decrypted to some other in-
struction which produces an infinite loop.
3. The injected instruction decrypted to a harmless
instruction, and some subsequently executed
instruction produces an infinite loop.
4. The injected guess caused the server to crash,
but because of network lag or server load, it still
took longer
threshold the
attacker uses to identify infinite loops.
than the timeout
USENIX Association
14th USENIX Security Symposium
151
We can avoid case 4 by setting the timeout threshold
high enough, but this presents a tradeoff between attack
speed and likelihood of a false positive. A more
sophisticated attack would dynamically adjust
the
timeout threshold. Since case 4 is likely to occur for
many guesses and will not occur repeatedly for the
same guess, case 4 is usually distinguishable from the
other three cases and the attacker can increase the
timeout threshold as necessary.
From a single guess, there is no way to distinguish
between case 1 (a correct guess) and cases 2 and 3.
However, by using the results from multiple guesses, it
is possible to distinguish the correct guesses in nearly
all instances.
there are two kinds of false
For the second case,
the opcode decrypted
positives
to consider:
correctly to 0xeb, but the offset decrypted to some
value other than -2 which produced an infinite loop; or
(2) the opcode decrypted to some other control flow
instruction that produces an infinite loop.  
(1)
An example of the first kind of false positive is when
the offset decrypts to -4 and the instruction at offset -4
is a harmless two-byte instruction. This is not a big
problem, since, as we presented in Section 2.3, except
for when we are guessing the first two bytes we are
encrypting the offset with a known mask.  When it does
occur in the first two bytes, the attacker has several
possibilities. One is to ignore this last byte and use
only the memory locations above it. Another possibility
is to launch different versions of the injected attack
code, one for each possibly correct mask. Sometimes it
would be faster to launch four versions of the attack
code, one of which will succeed, than to determine a
single correct mask at the bottom location. 
The second case, where the opcode is incorrect, is more
interesting. The prevalence of these false positives,
and the structure of the x86 instruction set, can be used
to reduce the number of guesses needed. The other
two-byte instructions that could produce infinite loops
are the near conditional jumps. Like the unconditional
jump instruction, the first byte specifies the opcode and
the second one the relative offset. There are sixteen
conditional jump instructions with opcodes between
0x70 and 0x7f. For example, opcode 0x7a is the JP
(jump if parity) instruction, and 0x7b is the JNP (jump
if not parity) instruction. Regardless of the state of the
process, exactly one of
those two instructions is
guaranteed to jump. Conveniently, all the opcodes
between 0x70 and 0x7f satisfy this complementary
property. Thus, for any machine state, exactly 8 of the
instructions with opcodes between 0x70 and 0x7f will
jump, producing the infinite loop behavior if the mask
for the offset operand is correctly guessed. When we
find several masks sharing the same high four bits of
the first byte that all produce infinite loops, we can be
almost certain that those four bits correspond to 0x7.  
significant bit
We can take further advantage of the instruction set
structure by observing that if we try both guesses for
the least
in the opcode, we are
guaranteed that one of the two guesses will produce the
infinite loop behavior if the first four bits of the guess
two
opcode
complementary conditional jump instructions, one of
them will produce the infinite loop behavior; it doesnâ€™t
matter what the other three bits are, since all of the
conditional jump opcodes have the same property.
if we guess
are 0x7.
That
is,
This observation can be used to substantially reduce the
number of attempts needed.
Instead of needing up to
256 guesses to try all possible masks for the opcode
byte, we only need 32 guesses (0x00, 0x10, 0x20, ...,
0xf0, 0x01, 0x11,...,0xf1) to try both possibilities for the
least significant bit with all possible masks for the first
four bits. Those 32 guesses always find one of the
taken conditional jump instructions. Hence, the maxi-
mum number of attempts needed to find the first
infinite loop (starting with no known masks) is 213 (25
guesses for the opcode K 28 guesses for the offset).
When the offset is encrypted with a known mask (that
is, after the first two byte masks have been determined),
at most 32 attempts are needed to find the first infinite
loop. The expected number of guesses to find the first
infinite loop is approximately 15.75 since we can find it
by either guessing a taken conditional jump instruction
or the unconditional jump. (This analytical result is
approximate since it depends on the assumption that
each conditional jump is taken half the time. Since the
actual probability of each conditional jump being taken
depends on the execution state, the actual value here
will vary slightly.)  
After finding the first infinite loop producing guess, we
need additional attempts to determine the correct mask.
The most likely case (15/16ths of the time), is that we
guessed a taken conditional jump instruction. If this is
the case, we know the first four bits unmask to 0x7, but
do not know the second four bits. To find the correct
mask, we XOR the guess with 0x7 V 0xe and guess all
possible values of the second four bits until an infinite
loop is produced. This means we have found the 0xeb
opcode and know the mask. Thus, we expect to find
the correct mask with 8 guesses. The other 1/16th of the
152
14th USENIX Security Symposium
USENIX Association
the
first
is
guess
loop-producing
the
time,
unconditional jump instruction. We expect to find two
infinite loops within first four attempts.
If we find
them, we know we guessed the correct mask; otherwise
we continue. We expect on average to use 15.75
guesses to find the first infinite loop and 7.75 guesses
to determine the correct mask. Hence, after acquiring
the first two key bytes, we expect to acquire each
additional key byte using less than 24 guesses on
average, while creating two infinite loops on the server.
In rare circumstances, the first infinite loop encount-
ered could be caused by something other than guessing
an unconditional or conditional jump instruction. One
possibility is the loop instruction. The loop instruction
can appear to be an infinite loop since it keeps jumping
as long as the value in the ecx register is non-zero.
When ecx initially contains a high value the loop in-
struction can loop enough times to exceed the timeout
for recognizing an infinite loop. There are several
possible solutions: wait
long enough to distinguish
between the jump and the loop, find a vulnerability in a
place where ecx has a low value (an attacker may be
able to control the input in such a way to guarantee
this), or
to use additional attempts with different
instructions to distinguish between the loop and jump
opcodes. For simplicity, we used the second option: in
our constructed server, the ecx register has a small
value before the vulnerability.
The other possibility is the injected code decrypts to a
sequence of harmless instructions followed by a loop-
producing instruction.
This is not as much of a
problem as it is with the return attack since the proba-
bility of two random bytes decrypting to a loop-pro-
ducing instruction is much lower than the probability of
a single random byte decrypting to a return instruction.
Further, when it does occur, the structure of the condi-
tional jumps in the instruction set makes it easy to
eliminate incorrect mask guesses. The probability of
encountering an infinite loop by executing random
instructions was found by Barrantes, et al. to be only
0.02% [3]. However, since we are not guessing
randomly but using structured guesses, the probability
of creating infinite loops is somewhat higher.
In the
first step of
the attack we generate all possible
combinations for first two bytes. An infinite loop is
created by an incorrect guess when first byte decrypts
to a harmless one-byte instruction, and the second byte
decrypts to a conditional or unconditional jump instruc-
tion, and the third byte decrypts to a small negative
value.
In this case both -2 and -3 will create infinite
loops. To avoid false positives and increased load on
infinite loop, we
the server, after we find the first
change the sign bit of the third byte. This changes the
value to a positive one.
If the loop was created by an
incorrect mask, when we verify the mask with
conditional jumps and fail to find the expected infinite
loops we can conclude the mask guess is incorrect.
3.3 Extended Attack
The techniques described so far are adequate for
obtaining a small number of key bytes.
For ISR
implementations that use a short repeated key, such as
[12], obtaining a few key bytes is enough to inject
arbitrarily long worm code. For ISR implementations
that use a long key, however, an attacker may need to
acquire thousands of key byte masks before having
enough space to inject the malicious code. Acquiring a
large number of key bytes with the jump attack is
especially problematic since attempts leave processes
running infinite loops running on the server. After ac-
quiring several key bytes this way, the server becomes
so sluggish it becomes difficult to distinguish guess
attempts that produce crashes from those that produce
infinite loops.  
Once we have learned a few masks, we can improve the
attack efficiency by putting known instructions in these
positions. With the jump attack, once we have guessed
four bytes using short jumps, we change the guessed
instruction to a near jump (0xe9). Near jump is a 5-
byte instruction that takes a 4-byte offset as its operand.
This is long enough to contain an offset that makes the
execution jump back to the original return address.
Hence, we no longer need to create infinite loops on the
server to recognize a correct guess: we recognize the
correct guess when the server behaves normally,
instead of crashing.
When the server has the properties required by the
return attack, we will encounter false positives for the
near jump guessed caused by a relative call (0xe8).
Since the opcode differers from the near jump opcode
in only one bit, we are not able to reliably distinguish
between the two instructions using harmless instruc-
tions. Instead, we keep both possible masks under con-
sideration until the next position is guessed, and then
identify the correct mask by trying each guess for the
offset mask. At worst, we need four times as many
attempts because it
there are two
positions with two possible masks in the offset bytes.
Despite requiring more attempts,
this approach is
preferable to the short jump guessing since it reduces
the load on the server created by infinite loops.
is possible that
USENIX Association
14th USENIX Security Symposium
153
...
short jump (0xeb)
offset
0xcd
...
0xcd
near jump (0xe9)
offset
offset
offset
offset
0xcd
...
0xcd
overwritten return address
Figure 5.  Extended attack.
Once we have acquired eight masks, we switch to the
extended attack illustrated in Figure 5. The extended
attack requires a maximum of 32 attempts per byte, and
expected number of 23.5. The idea is to use a short
jump instruction to guess the encryption key for current
location with an offset
to a
known mask location where we place a long jump
instruction whose target is the original return address.
The long jump instruction is a relative jump with a 32
bit offset. Hence, we need to acquire four additional
mask bytes before we can use the extended attack with
the jump attack.  
transfers control
that
To eliminate false positives, we inject bytes that corre-
instruction in the subsequent
spond to an interrupt
already guessed positions.
Interrupt is a two-byte in-
struction (0xcd imm8). The second byte is the interrupt
vector number. When the guessed instruction decrypts
to a harmless instruction, the next instruction executed
will be 0xcdcd (INT 0xcd) which causes a program
crash. The only value acceptable for the interrupt
vector number in user mode when running on a Linux
platform is 0x80 [5]. The key is to place enough 0xcd
bytes in the region such that when the first instruction
decrypts to some harmless non-jump instruction (which
could be more than one byte), the next instruction to
execute is always an illegal
interrupt. Once we have
room for six 0xcd bytes, we encounter no false
positives.  
If any of the masks in this region are 0xcd, we cannot
place a 0xcd byte at that location since injecting the
necessary instruction which would require injecting a
null byte. In this case, we place an opcode corres-
ponding to a two-byte instruction (we use AND, but any
instruction would work). The 0xcd will be the second
byte of the two-byte instruction. After the two-byte
instruction it will find a 0xcd which causes a crash.
The most important advantage of this approach is that
the only cases when the server sends the expected
response are when (1) the first instruction executed is a
taken unconditional jump; or (2) the first instruction
executed is a conditional jump where the condition is
true. With the return attack there is a third case: the
first
This
possibility can be eliminated using the techniques
described in Section 3.1.  
instruction executed is a near
return.
The other advantage of this attack is that it does not
need to create infinite loops on the server. Once we
have enough mask bytes to inject a long jump
instruction, we can distinguish correct guesses without
putting the server in an infinite loop.
Instead, the
attacker is able to recognize a correct guess when it
receives the expected response from the server.
it directly.
(for example,
the malicious code is small
4. Deployment
If
the
Sapphire worm was 376 bytes [9]), we can acquire
enough key bytes to inject
This is
reasonable if we are attacking a single ISR-protected
machine using this approach and can run our attack
client code on a machine we control to obtain enough
key bytes to inject the malicious code.
If the attacker
wants to propagate a worm on a network of ISR-
protected servers, however, the worm code needs to
contain all the code for implementing the incremental
key attack also. This may require acquiring more key
bytes
system
administrator noticing the suspicious behavior and re-
randomizing the server. Since the ISR-breaking code is
inherently complex, even if the malicious payload is
small many thousands of key bytes would be needed to
inject the worm code.