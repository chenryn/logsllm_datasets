θ denotes  the  phase  of  the  connection  and  acks  denotes  the 
number of new acks received under current cwnd. θ controls the 
general  TCP  behavior.  θ  ∈ {Slow  Start(SS),  Additive 
Increase(AI),  Loss  Recovery(LR),  TimeOut(TO)}.  According  to 
different θ values, the sender’s states are classified into 4 subsets. 
Figure 3 shows transitions among them. 
AI  
Fast 
Retran
Slow 
Start 
Time
Out 
Figure 3  State transitions between subsets of M 
The  non-deterministic  model  M  models  the  sender’s  internal 
state  transition  behavior  by  allowing  multiple  possible  state 
transitions from a same state upon a same input in order to solve 
the  problem  caused  by  the  inexact  knowledge  of  the  sender’s 
algorithm, sender’s implicit parameters, and sender’s output. This 
is illustrated in Figure 4. This graph shows partial state transitions 
of  M  when  cwnd  ≤  4.  Circles  in  Figure  4  represent  SS  states; 
squares represent AI states; the numbers in them denote the cwnd 
value.  Two  dashed  ellipses  are  the  LR  subset  and  TO  subset. 
Transitions from LR to SS and AI are not drawn in order to keep 
the  figure  clear.  In  this  graph,  state □3  is  a  AI  state.  Usually □3  
will  shift  to  □4  when  the  sender  receives  3  new  acknowledge 
packets, otherwise it stays in □3 . But some TCP implementations 
may require that the sender receive 4 new acks for □3  to shift to 
□4 .  M  solves  this  problem  by  allowing □3  to  generate  two  new 
states,  □3 and  □4 ,  when  receiving  3  new  ack  packets.  Other 
problems such as the implicit sender buffer are solved in a similar 
way. 
2 
2 
1 
TO 
3 
3 
FR 
4 
4 
Figure 4  Sketch map of state transitions in M when cwnd  ≤  4 
2.2  Channel Model 
Data packet Dj is triggered by ack Ak. The receiver sent Ak at 
TAk, and Dj arrives at the receiver at TDj, the delay ta'j = TDj – 
TAk. ta'j is composed of three delays, the network delay(Dackk) of 
Ak from receiver to sender, the server transaction delay(Dtransj) 
between the arrival of Ak and the departure of Dj, and the network  
delay(Ddataj) of Dj from sender to receiver: 
ta'j  = Dackk + Dtransj + Ddataj 
We ignore server transaction delay, because it is usually much 
smaller than the other two: 
ta'j  ≅  Dackk + Ddataj .  
(1)  
Channel model is used to describe the statistical characteristics 
of  ta'j  sequence.  Now  consider  two  continuous-time  stochastic 
processes:  Let  Da(t)  denote  the  virtual  delay  from  receiver  to 
sender of an ack packet sent at time t (similar to the concept of 
virtual waiting time in [8]). Let Dd(t) denote the virtual delay from 
sender  to  receiver  of  a  data  packet  sent  at  t,  then  (1)  can  be 
rewritten as: 
ta'j = Da(TAk) + Dd(TAk + Da(TAk) + Dtransj). 
Sequence {ta'j | j = 0, 1, …, l -1 , l } is a stochastic process, it is 
the  sum  of  values  of  Da(t)  and  Dd(t)  sampled  at  time  TAk  and 
(TAk+Dack(TAk)+Dtransj) respectively. 
Here, we suppose {ta'j } has a simple form: 
ta
′ =
j
m η
j
+
, 
(2) 
where  m  is  the  mean  value, ηj  is  independent  identical  random 
variable  with  mean  0  and  standard  deviation  σ.  In  strict  sense, 
using  (2)  to  model  {ta'j}  process  is  not  correct.  Correlations 
between  adjacent  ta'j  cannot  be  reflected  in  (2).  The  reason  to 
adopt (2) is because based on this model, we can derive recursive 
estimation algorithms  (3)(4)  using  predictive  error  identification 
estimation method in [10]. (3)(4) are similar to the computations 
of SRTT and VARRTT, which are proposed in [7] and are widely 
used  in  TCP  sender  to  dynamically  estimate  RTT  of  the 
connection. 2 
m
j
(1
= −
m
α −
j
1
)
1
+
ta
′
j
σ σ α
2
=
+
1
−
j
j
(|
ta
′
j
−
m
j
1
−
|
−
σ
j
1
−
)
(3) 
(4) 
Due to the strong correlation between ta values of TCP back-to-
back data packets, the channel model actually models another {tak} 
sequence: 
{
kta , k = 0, 1, …, N -1 , N } 
where k is the kth ack packet, 
packets Dj trigger by Ak, s 
kta is the average of all ta'j of data 
tak = 
J
J
1
+ ∑
1
=
0
l
ta
j
+
l
′
. 
(5) 
(6) 
The model of {tak} is 
and the recursive estimation algorithms for (m, σ) are 
m η=
k
ta
k
+
, 
m
k
m
(1
)
+
= −
α −
k
1
1
ta m
(|
−
k
+
k
ta
k
|
σ
−
k
)
k
k
1
−
1
−
1
−
=
σ σ α
2
(7) 
α1,  α2  are  the  step  sizes.  According  to  the  changing  rate  of  the 
channel, their values are usually between 1/8~1/4. 
2.3  Maximum-likelihood Estimation 
In 2.1, by comparing the trace to M, we have a set Θ. In 2.2, we 
have a channel model. In this section, we discuss how to select a 
Ψi in Θ that is most likely to be the actual path Ψ. 
For every possible transition path Ψi ={S1
i},  each  Sk
SN
determines a tak
i, … , Sk
i  determines  a  corresponding  pair  rk
i. The {ta}i sequence for path Ψi is 
i, … taN
{ta}i ={ta1
i, … tak
i, tak+1
i, ta2
i, S2
i}. 
i, Sk+1
i, … 
i,  which 
We can calculate the likelihood value P({ta}i) for every sequence 
{ta}i,  if  we  know  the  probability  density  function  of  tak—fk(t). 
From  the  aspect  of  satisfying  TCP  rules,  every  path Ψi  in  Θ  is 
equally  possible,  we  cannot  judge  which  one  is  more  possible. 
However,  the  likelihood  values  P({ta}i)  of  these  paths  are 
different. Larger likelihood value P({ta}i) means larger possibility 
in  sense  of  ta  process.  So,  based  on  certain  channel  model 
assumption, we select the {ta}i with the largest likelihood value 
and its counterpart Ψi as our estimation result: 
,  
arg max ({ } )
i
P ta
ψ =
i
{
ψ
i
}
for every possible 
iψ ∈ Θ . 
According  to  channel  model  (5),  tak  are  independent  from  each 
other, so, 
P({ta}i) = f(ta1
i)×f(ta2
i)×…×f(taN
i) 
2 The author in [9] had a different explanation of SRTT algorithm. 
λ(tak
i) = 
i
kta m
−
2
)
−
log 2
πσ
L({ta}i) = 
ta m
−
i
k
2
)
−
log 2
πσ
N
−
1 (
2
σ
1 (
∑
2
σ=
1
1 (
2
σ
−
−
i)
k
L({ta}i) = log P({ta}i) = 
N
∑
1
=
i) = L(Sk-1
k
N
∑
k
1
=
taλ
i
k
(
)