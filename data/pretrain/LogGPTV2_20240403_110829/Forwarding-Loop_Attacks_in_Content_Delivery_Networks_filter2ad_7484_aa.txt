title:Forwarding-Loop Attacks in Content Delivery Networks
author:Jianjun Chen and
Xiaofeng Zheng and
Hai-Xin Duan and
Jinjin Liang and
Jian Jiang and
Kang Li and
Tao Wan and
Vern Paxson
Forwarding-Loop Attacks in Content Delivery
Networks
Jianjun Chen∗†‡, Jian Jiang§, Xiaofeng Zheng∗†‡, Haixin Duan†‡¶,
Jinjin Liang∗†‡, Kang Li(cid:107), Tao Wan∗∗, Vern Paxson§¶,
{chenjj13, zhengxf12, liangjj09}@mails.tsinghua.edu.cn, PI:EMAIL
∗Department of Computer Science and Technology, Tsinghua University
†Institute for Network Science and Cyberspace, Tsinghua University
‡Tsinghua National Laboratory for Information Science and Technology
§University of California, Berkeley PI:EMAIL
¶International Computer Science Institute PI:EMAIL
(cid:107)Department of Computer Science, University of Georgia PI:EMAIL
∗∗Huawei Canada PI:EMAIL
Abstract—We describe how malicious customers can attack
the availability of Content Delivery Networks (CDNs) by creating
forwarding loops inside one CDN or across multiple CDNs. Such
forwarding loops cause one request to be processed repeatedly or
even indeﬁnitely, resulting in undesired resource consumption and
potential Denial-of-Service attacks. To evaluate the practicality
of such forwarding-loop attacks, we examined 16 popular CDN
providers and found all of them are vulnerable to some form of
such attacks. While some CDNs appear to be aware of this threat
and have adopted speciﬁc forwarding-loop detection mechanisms,
we discovered that they can all be bypassed with new attack tech-
niques. Although conceptually simple, a comprehensive defense
requires collaboration among all CDNs. Given that hurdle, we
also discuss other mitigations that individual CDN can implement
immediately. At a higher level, our work underscores the hazards
that can arise when a networked system provides users with
control over forwarding, particularly in a context that lacks a
single point of administrative control.
I.
INTRODUCTION
Content Delivery Networks (CDNs) are widely used in the
Internet to improve the performance, scalability and security
of websites. A CDN enhances performance for its customers’
websites by redirecting web requests from browsers to ge-
ographically distributed CDN surrogate nodes. A surrogate
serves the content directly if cached, or forwards requests to the
origin site otherwise. To improve availability, surrogates absorb
distributed denial-of-service (DDoS) attacks by distributing the
attack trafﬁc across many data centers. Some CDN providers
also provide WAF (Web Application Firewall) services to
normalize trafﬁc and ﬁlter intrusions to their customer’s web
sites.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23442
In this work we present “forwarding-loop” attacks, which
allow malicious CDN customers to attack CDN availability
by creating looping requests within a single CDN or across
multiple CDNs. Forwarding-loop attacks allow attackers to
massively consume CDN resources by building up a large
number of requests (or responses) circling between CDN
nodes. The impact can become more severe in the (common)
case where attackers can manipulate DNS records to dynami-
cally control a loop’s IP-level routing on a ﬁne-grained basis.
Although many CDN providers have internal mechanisms
(such as appending custom HTTP headers like CloudFlare’s
CF-Connecting-IP [19]) to detect repeated requests when
they circle back, we ﬁnd that an attacker can bypass such
defense mechanisms by using features offered by some
other CDNs to ﬁlter HTTP headers. Our experiments with
16 commercial CDNs show that all of them are vulnerable
to forwarding-loop attacks, even with their existing defense
mechanisms.
We also examine the threat of stealthy forwarding-loop
attacks. In the Dam Flooding Attack, an attacker secretly
and gradually accumulates a large number of pending CDN
requests over a lengthy period (hours). They then trigger a huge
volume of cascading trafﬁc by suddenly providing bandwidth-
consuming responses and controlling all responses to arrive
simultaneously. Worse, we ﬁnd that internal CDN features—
such as automatic server probing (Azure China), forwarding
retries (Akamai and CloudFront), and proactive decompression
of gzip’d responses (Akamai, Baidu and CloudFlare)—can
amplify the DoS effect of forwarding-loop attacks and further
exacerbate the load on the CDN.
Overall, we make the following contributions:
1) We describe forwarding-loop attacks that broadly
threaten CDN providers. Our study shows that the
ampliﬁcation attacks are severe and can consume
a huge volume of resources in commercial CDNs
at low cost. The attacks can potentially undermine
the security provided by CDNs, which are usually
considered robust against DoS attacks.
2) We performed controlled tests on 16 popular CDN
providers to verify the practicality of such attacks.
Although some CDN providers implemented defense
mechanisms for mitigating forwarding loops, we
show that those defenses can be bypassed.
3) We present the Dam Flooding attack, a highly dam-
aging type of forwarding-loop attack.
4) We propose four approaches to preventing or mit-
igating forwarding-loop attacks, and discuss their
advantages and limitations.
We organize the rest of this paper as follows. Section II
describes CDN operation, especially forwarding and ﬁltering
techniques. In Section III we present various forwarding-
loop attacks and analyze the factors affecting them. We also
described our experiments to construct loops within and across
CDNs, and the “Dam Flooding” attack leveraging streaming
HTTP responses. We discuss possible defenses to prevent or
mitigate forwarding-loop attacks in Section IV and related
research regarding forwarding loops and CDN security in
Section V. We conclude in Section VI.
II. BACKGROUND
CDNs are distributed systems with large numbers of servers
deployed across the Internet. Initially created to improve
website performance and scalability, many CDNs also provide
security features such as DDoS protection and Web Appli-
cation Firewalls (WAFs) for websites. CDNs have evolved
to become important Internet infrastructure. For example, the
leading CDN provider Akamai claims that it alone delivers
15–30% of all Web trafﬁc [1].
Web access involving a CDN includes two steps: ﬁrst,
a user’s request is directed to a CDN server geographically
close to the user; second, the CDN server obtains the content
for the responding to the request. The ﬁrst step is called
request routing [2]. Commonly used request-routing techniques
include URL rewriting and DNS-based request routing [2].
URL rewriting requires website owners to change website
URLs to use CDN-assigned subdomains that resolve to CDN
servers. DNS-based request routing instead works by chang-
ing the DNS resolution of website domains, either directly
mapping to CDN server IP addresses, or using CNAMEs to
chain to CDN subdomains. These request-routing techniques
usually determine the selection of edge (entry) server, but
users can also override a CDN’s selection by directly con-
necting to a desired edge server using its IP address rather
than hostname [22]. Users can obtain CDN IP addresses
by resolving CDN subdomains via public platforms such as
PlanetLab [20]. We veriﬁed that this technique for overriding
a CDN’s selection works for all CDNs in our study.
The second step, i.e., how the CDN server obtains the
requested content, also has two different modes: push and pull.
In the push mode, website owners upload their content to the
CDN’s servers in advance. In the pull mode, the CDN server
works as a reverse proxy with caching. It ﬁrstly tries to respond
from the local cache. In the case of a cache miss, it forwards
the request to the original website to retrieve the content. Most
CDNs support both modes. The vulnerability we examine in
this paper only occurs when using pull mode. In pull mode, the
cache hit ratio becomes an important indicator for measuring
2
Fig. 1. Normal CDN forwarding behavior.
a CDN’s performance. The higher the ratio, the more requests
that the CDN answers out of its cache, signiﬁcantly reducing
response latency and as well as the load imposed on the origin
website. However, a user can force requests to come from the
origin website instead of the CDN’s cache. First, adding a
no-cache request header will make the CDN re-validate the
response from the origin server [6]. Second, POST requests
usually will write through to the origin server [7], [16]. In
addition, most CDNs provide ways for customers to conﬁgure
the CDN to not cache certain URLs.
Typical commercial CDNs usually have massive bandwidth
and computational resources distributed around the Internet,
making them much more resilient to DDoS attacks than most
of websites. DDoS trafﬁc targeting a CDN-protected website
will be directed to CDN servers distributed across data centers
with ample bandwidth, and then absorbed or blocked before
arriving the original website. Indeed, capacity for mitigating
DDoS attacks has become a “selling point” for today’s com-
mercial CDNs.
Many CDNs also provide an additional security service
called content ﬁltering, or WAF. A WAF applies a set of
rules to each HTTP request and response. Generally, these
rules cover common attacks such as cross-site scripting (XSS)
and SQL injection. By customizing WAF rules, customers can
have their CDNs examine HTTP requests and ﬁlter out some
suspicious trafﬁc before it reaches the origin website.
III. FORWARDING-LOOP ATTACKS
Malicious customers of CDNs can deliberately manipulate
the forwarding process (in the pull mode) to create forwarding
loops inside CDNs. Forwarding loops can cause CDNs to
process one client request repetitively or even indeﬁnitely. The
consequent ampliﬁcation effect allows malicious customers to
launch, with little resources and cost, resource-consuming DoS
attacks against CDNs.
In general, as shown in Figure 1, before a CDN node
forwards an HTTP request from a client, it checks the Host
header of the request to look up any customer-speciﬁed for-
warding destination. The node then connects to the forwarding
destination and relays the request. In the benign case, the
forwarding destination returns a response that is further relayed
by the CDN node to the client. However,
if an attacker
intentionally conﬁgures the forwarding destination to point to
another CDN node, the forwarding process can continue, and
might eventually form a loop. Figure 2 illustrates a conceptual
view of a forwarding loop between three CDN nodes. Note
that the three nodes could be distributed either within a single
CDN or across different CDNs.
We have identiﬁed four approaches to create forwarding
loops: 1) self loop, which loops within a single CDN node;
RequestForwardingexample.comServer IPWeb Site(example.com)BrowserCDN NodeHTTP GET/POSThttp://example.comHTTP GET/POSThttp://example.comwithout strong customer identity veriﬁcation (except Alibaba
and Tencent, per Section III-G). We then measured various
aspects of the CDNs using our testing accounts. This approach
enables us to measure 16 popular CDNs around the world. We
found all of them vulnerable to some form of forwarding-loop
attacks. Table I presents the 16 CDNs and their vulnerability to
the four types of attack. While most CDNs can defend against
the ﬁrst attack, little more than half can defend against the
second, and none can defeat the last two.
We chose to measure the 16 CDNs that provide free or
free-trial accounts without strong identify veriﬁcation to em-
phasize the fact that forwarding-loop attacks can be launched
anonymously and with little cost. Rigorous customer authen-
tication can help raise the bar, but
it does not sufﬁce to
prevent forwarding-loop attacks. We further discuss the issue
of anonymity and cost in Section III-G.
As we will present in detail, the root cause of forwarding-
loop attacks is that CDN customers have ﬂexible control
over their forwarding conﬁguration, and CDNs lack sufﬁcient
defensive mechanisms to ensure that these conﬁgurations—
especially across multiple customers or multiple CDNs—will
not cause requests to be processed repeatedly. The fact that
CDN customers can override edge-server selection of CDNs
(as explained in Section II) further enables forwarding-loops
attacks on any CDN public IP address or data center that
an attacker seeks to target. Moreover, we identiﬁed a number
of factors that affect the efﬁcacy of forwarding-loop attacks.
In the following sections, we ﬁrst discuss how these factors
interact with forwarding-loop attacks and vary across CDN
implementations. We then present detailed mechanisms for
the four attacks, along with measurements and experiments
to assess them.
A. Factors affecting Forwarding Loops
Modiﬁcation of the Host header. The Host header of a
request plays a key role in the forwarding process, as well as in
forwarding-loop creation. A necessary condition for a request
to create a forwarding loop is that all involved CDN nodes
must forward the request in such a way that the successor node
treats it as a benign request, and continues the forwarding.
Whether the successor node accepts the forwarded request
depends on the Host header. We can classify forwarding loops
into two categories based on whether the Host header changes
during the forwarding loop. Figure 2 shows the ﬁrst category:
a request is issued for the original domain of the website, and
when forwarded by a CDN node, its Host header does not
change, thus not affecting acceptance and further forwarding
of the forwarded request.
Another type of forwarding loop has a changing Host
header. Our measurements show that CDN nodes can change
the Host header to reﬂect the forwarding destination, depend-
ing on the request-routing mechanism and the form of the
forwarding destination. Table II presents detailed results. We
note that forwarding loops are feasible as long as all involved
nodes keep a valid domain name in the Host header, but can
be prevented by simply modifying the Host header to an IP
address, because we ﬁnd that no CDN accepts requests with an
IP address in the Host header. As shown in Table II, this case
only occurs at KeyCDN and MaxCDN when the request is
Fig. 2. A conceptual view of a CDN forwarding loop created by manipulating
forwarding conﬁguration: see Section III-B through Section III-E for the
detailed mechanisms for constructing forwarding loops.
TABLE I.
VULNERABILITY OF THE MEASURED CDNS TO FOUR TYPES
OF FORWARDING-LOOP ATTACKS. (“Likely” refers to inference from indirect
evidence.)
Self-Loop
Intra-CDN
Inter-CDN
loop
loop
Dam Flooding
Akamai
Alibaba
Azure (China)
Baidu
CDN77
CDNlion
CDN.net
CDNsun
CloudFlare
CloudFront
Fastly
Incapsula
KeyCDN
Level3
MaxCDN
Tencent

Likely
Likely
























