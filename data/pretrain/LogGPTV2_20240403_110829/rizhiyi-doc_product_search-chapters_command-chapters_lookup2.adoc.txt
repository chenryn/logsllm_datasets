=== lookup2
摘要：
    使用lookup2命令可以添加自定义字段。通过在指定脚本存放路径下(默认为：/data/rizhiyi/spldata/lookup/script)添加相关的配置文件以及python处理数据文件即可添加自定义字段。
语法：
    lookup2  *
必要参数：
* script-name
** 语法
** 描述
    需要关联的script-name
可选参数：
* param-options
** 语法
** 参数
*** outputfields
**** 语法
    outputfields (,)*
**** 描述
    结果过滤字段，结果中只包含指定的字段
配置文件以及python文件描述：
* 配置文件：
** 文件名：
    lookup_external.cfg(必须为该名称，否则将读取不到配置)
** 文件内容：
*** 示例配置文件：
    lookup_script_names = ["external_script"]
    // lookup_scripts config
    lookup_scripts {
        external_script {
            external_file = "external_script.py"
            input_fields = "appname,tag"
            join_fields = "appname,tag"
            output_fields = "appname,tag,appnametag"
      }
    }
*** 说明：
    1. lookup_script_names：用于指定当前所有的python脚本名称
    2. lookup_scripts：用于写入每个script-name的配置信息
    3. external_script：代表script-name的名称，即为lookup2之后使用的script-name名称，内部是该脚本对应的相关配置信息
        a. external_file：用于指定该script-name对应的python文件名称
        b. input_fields：用于指定该python文件的输入字段(输入字段顺序严格按照该顺序输入数据)
        c. join_fields：用于指定该python文件输出结果与上一个命令的结果进行join时所使用的字段
        d. output_fields：用于指定该python文件输出字段(需严格保证输出字段顺序),可以通过冒号(:)分隔符来指定输出字段类型，如：timestamp:long等，目前支持的类型有 long,double,boolean,默认为字符串。
* Python脚本：
** 文件名：
    需要与配置文件中external_file的名称保持一致
** 文件内容：
    将输入的数据经过处理之后生成新的数据并且返回。
** 协议：
    无头的csv协议。输入以及输出严格按照配置文件的输入输出顺序
** 示例：
    #!/usr/bin/env python
    import csv
    import sys
    def main():
        infile = sys.stdin
        outfile = sys.stdout
        r = csv.reader(infile)
        w = csv.writer(outfile)
        for result in r:
            if result:
                result.append(result[0]+result[1])
                w.writerow(result)
    main()
[NOTE]
====
* lookup2的脚本默认存放路径为：/data/rizhiyi/spldata/lookup/script，对应的配置项为lookup2.script_path，如果需要修改脚本存放路径则修改该配置项即可。
* 如果为多台spl集群则需要每台机器上都需要上传配置文件以及python脚本。
* python文件需要保证在处理同样的join fields的情况下输出统一的output fields
* join fields可以支持类型不同进行关联操作，如果在使用lookup2命令之前的数据类型是int，但是python返回的数据类型为string时，是可以关联成功并且返回结果的。
====
.示例
====
[source,bash]
* | lookup2 external_script outputfields appname,timestamp,appnametimestamp
该脚本传入appname以及timestamp两个字段值，将起组合的值拼接起来并生成一个新的字段为appnametimestamp。该脚本在配置文件中配置的对应访问名称为external_sccript。
配置文件为：
[[app-listing-1]]
[source,bash]
.lookup_external.cfg
----
    lookup_script_names = ["external_script"]
    // lookup_scripts config
    lookup_scripts {
        external_script {
            external_file = "external_script.py"
            input_fields = "appname,timestamp"
            join_fields = "appname,timestamp"
            output_fields = "appname,timestamp,appnametimestamp"
        }
    }
----
python文件为：
[[app-listing-2]]
[source,Python]
.external_script.py
----
#!/usr/bin/env python
import csv
import sys
def main():
    infile = sys.stdin
    outfile = sys.stdout
    r = csv.reader(infile)
    w = csv.writer(outfile)
    for result in r:
        if result:
            result.append(result[0]+result[1])
            w.writerow(result)
main()
----
image::images/Image-140318-041812.396.png[]
====