model, sequentially-aggregate signatures of Lu et al. [23] are
based on the Waters signatures, but it is not clear how to
get around the sequential restriction (even if synchronized
clocks are assumed.)
Building on HW Signatures. The more recent (stateful)
HW signatures do not aggregate well at ﬁrst blush. Re-
call that in that construction, the public key is of the form
(g, ga, u, v, d, w, z, h) where these are random generators of
a bilinear group G of prime order p and the secret key is
a. The signer keeps a counter s. To sign a message M ,
she increments s, chooses two random values r, t ∈ Zp and
outputs the signature σ = (σ1, σ2, r, s) where
σ1 = (uM vrd)a(w⌈lg(s)⌉zsh)t and σ2 = gt.
Veriﬁcation checks that
e(σ1, g) = e(ga, uM vrd) · e(σ2, w⌈lg(s)⌉zsh).
The uM vr value is a chameleon hash of M with randomness
r. Aggregating these signatures requires the compression or
coordination of the r values. It is not clear how to do this
without breaking the security (since in the proof the simu-
lator must be free to choose an r after seeing the message
that the adversary asks him to sign.)
Attempt One. Our ﬁrst observation is that, if we remove
the randomized chameleon hash, then we can elegantly ag-
gregate signatures with the same s value. Unfortunately,
the HW security proof is fundamentally dependent on this
chameleon hash. Absent this hash, the simulator must be
able to guess not only the time period s∗ that the adversary
will use in her forgery (only in the case that s∗ is “small”, the
proof handles “large” values of s∗ another way), but also the
message M which the adversary will query on during time
period s∗. Since the message space is exponentially large,
the simulator will fail to guess M with high probability.
Attempt Two. To solve this, we propose an alternative
technique that reduces an exponential message space to a
set of k polynomially-sized subspaces (each of size 2ℓ, for
some ℓ logarithmic in the security parameter). Our simula-
tor need only guess one message from one of these subspaces.
In practice, this requires that we divide our messages into
k ℓ-bit chunks. The public parameters are (g, u0, u1, . . . ,
uk, w, z, h), which all signers share, and public keys are pk i =
gai . A signature on message M = M1 . . . Mk during time
period s is of the form σ = (σ1, σ2, s) where
k
σ1 = (u0
Y
uMi
i
)a(w⌈lg(s)⌉zsh)t and σ2 = gt
i=1
and t is random. The signatures aggregate nicely (as we
show in Section 4), but are they provably secure?
i
Attempt Three. A natural idea is to focus on one uMi
part, which now has a small enough message space to guess
from, and treat it like an original HW signature (minus
the chameleon hash.) Unfortunately, our aggregate secu-
rity does not follow from the unforgeability of HW [18]. For
ℓ = 1, the adversary could ask for signature queries on the
binary messages 001, 010, 100 and then forge on the mes-
sage 000. Thus, no chunk (i.e., bit) of the forgery message
is “new”; meaning that no part of the aggregate forgery is
an HW forgery. Fortunately, we make a key observation:
the above scheme is not only existentially-unforgeable with
respect to adaptive chosen message attacks, but also with
respect to adaptive chosen state-message pair attacks, pro-
vided that each state is used only once. That is, it is hard
to produce a signature on any “new” (s, M ) pair, not just on
a new message M .
Final Solution. Our new proof strategy takes advantage
of this. We guess the time period s∗ that the adversary
475will use in her forgery (only in the case that s∗ is “small”;
we continue to handle “large” s∗ values as before) and then
guess (1) which message block β ∈ [1, k] will diﬀer between
the message queried during s∗ and the forgery message and
(2) the value of this ℓ-bit message chunk. We succeed in
our guess with non-negligible probability. Then, we can use
our guess to contrive values for the public parameters and
challenge public key which allow us to base our security on
CDH, while maintaining our ability to aggregate signatures
and handle those issues throughout the proof. We ﬁnally
note that although aspects of this construction seem super-
ﬁcially related to the signatures of Waters [29] (which do not
fully aggregate), our proof techniques are quite diﬀerent.
2. DEFINITIONS OF SECURITY
In an aggregate signature scheme, anyone given n signa-
tures on n messages from n users can aggregate all these
signatures into a single short signature. This aggregate sig-
nature (together with the n public keys and n messages)
can be publicly veriﬁed to convince anyone that user i au-
thenticated message i for i = 1 to n. This is also true for
synchronized aggregate signatures except that we assume all
signers have a synchronized clock and the following restric-
tions apply:
1. A signer can issue at most one signature per time pe-
riod and keeps state to ensure this.
2. Only signatures created during the same time period
can be aggregated.
Gentry and Ramzan [16] were the ﬁrst to consider this
“synchronized” setting in the context of aggregate signa-
tures.
In their model, they assumed that signatures were
issued using a special random tag w (which could not be
re-used) and that only signatures with the same tag could
be aggregated. They left open how signers coordinated their
choice of w. Here, we use what seems to us the most natural
coordination strategy– a synchronized clock.
Definition 2.1
(Synchronized Aggregation).
A
synchronized aggregate signature scheme is a tuple of six al-
gorithms (Setup, KeyGen, Sign, Verify, Aggregate, AggVerify)
such that
Setup(1λ) : the setup algorithm outputs public parameters
pp.2
KeyGen(1λ, pp) : the key generation algorithm outputs a
keypair (pk , sk ). Without loss of generality, we will
assume that pk and sk contain pp.
Sign(sk , M, s) : the signing algorithm takes in a secret key
sk , a message M , the current time period s, and pro-
duces a signature σ.
Verify(pk , M, σ) : the veriﬁcation algorithm takes in a pub-
lic key pk , a message M , and a purported signature σ,
and returns 1 if the signature is valid and 0 otherwise.
2In some schemes, pp may be empty. These parameters are
included to capture many practical scenarios where multiple
public keys are generated from the same algebraic group
(e.g., [11, 16, 6]).
Aggregate((pk 1, M1, σ1), . . . , (pk N , MN , σN )) : On input
a sequence of public keys (pk 1, . . . , pk N ), messages (M1,
. . . , MN ), and purported signatures (σ1, . . . , σN ), it out-
puts an aggregate signature σagg or error message ⊥.
AggVerify((pk 1, . . . , pk N ), (M1, . . . , MN ), σagg) : On in-
put a sequence of public keys (pk 1, . . . , pk N ) and mes-
sages (M1, . . . , MN ), and a purported aggregate signa-
ture σagg, the aggregate-veriﬁcation algorithm outputs
1 if σagg is a valid aggregate signature and 0 otherwise.
The correctness property states that the Verify and AggVerify
algorithms will always output 1 when run on correctly gen-
erated inputs.
Unforgeability.
We recall the deﬁnition of Boneh et al. [11], which ex-
tends the standard security notion of existential unforgeabil-
ity with respect to chosen-message attacks as formalized by
Goldwasser, Micali and Rivest [17], to the case of aggregate
signatures. It is deﬁned using the following game between a
challenger and an adversary A.
Setup: The challenger runs Setup(1λ) to obtain the pub-
lic parameters pp. It runs KeyGen(1λ, pp) a total of N
times to obtain the key pairs (pk 1, sk 1), . . . , (pk N , sk N ).
The adversary is sent (pk 1, (pk 2, sk 2), . . . , (pk N , sk N )),
which include pp.
Queries: Proceeding adaptively, for each time period 1 to
q, the adversary can request a signature on a mes-
sage of its choice under sk 1, provided that at most
one query is made per time period. The challenger re-
sponds to a query for Mi at time period si ∈ [1, q] as
Sign(sk 1, Mi, si).
Output: Eventually, the adversary outputs a response of
It wins
1, . . . , M ′
N ), σ).
the form ((pk 1, . . . , pk N ), (M ′
the game if:
1 is not any of M1, . . . , Mq; and
1. M ′
2. AggVerify((pk 1, . . . , pk N ), (M ′
1, . . . , M ′
N ), σ) = 1.
We deﬁne SigAdvA to be the probability that the adver-
sary A wins in the above game, taken over the coin tosses
made by A and the challenger.
Definition 2.2
(Unforgeability). A forger A (t, q,
N, ǫ)-breaks an N -user aggregate signature scheme if A runs
in time at most t, A makes at most q signature queries and
SigAdvA is at least ǫ. An aggregate signature is (t, q, N, ǫ)-
existentially unforgeable under an adaptive chosen message
attack if there is no forger that (t, q, N, ǫ)-breaks it.
Discussion.
In the unforgeability deﬁnition, without loss of generality,
we assume that the ﬁrst public key in the challenge list is the
challenge key pk 1. We also require that the non-challenge
public keys be chosen honestly instead of adversarially. Al-
ternatively, we can operate in the Knowledge of Secret Key
(KOSK) model, where users register their keys with a CA
and prove some necessary properties of the keys at that
time [4]. In our construction and its proof (as in [23]), the
adversary may choose her own public key (i.e., ga), if she
476can prove knowledge of the corresponding secret key (i.e.,
a).
In our proof, we assume there exists a public, honest
clock function clock(), but do not give the simulator control
over it. We also assume that the Setup algorithm is run by a
trusted party or realized via secure multiparty computation.
In the Section 4 construction, if a malicious party executes
Setup and knows the discrete logarithms of the ui values
base g, then she can forge messages.
Finally, we note that one might want to consider a (seem-
ingly) “stronger” deﬁnition, where we relax the nontriviality
condition of the unforgeability game to allow the forgery
message, M ′
1, to have been previously queried to the signing
oracle provided that it was not done during the same time
period used in the forgery. Observe that this “stronger” no-
tion can be achieved by any scheme satisfying our unforge-
ability deﬁnition by simply having the signer incorporate the
time period into each message.
3. ALGEBRAIC SETTING
Notation. For sets X, let x ← X denote selecting an el-
ement x ∈ X uniformly at random. For algorithms A, let
a ← A(y) denote that A output a when run on input y.
Bilinear Groups. Let G1, G2 and GT be groups of prime
order p. A bilinear map is an eﬃcient mapping e : G1 ×G2 →
GT which is both: (bilinear) for all g ∈ G, h ∈ G2 and
a, b ← Zp, e(ga, hb) = e(g, h)ab; and (non-degenerate) if g
generates G1 and h generates G2, then e(g, h) %= 1. This
is called an asymmetric bilinear map. For simplicity of no-
tation, we will present our constructions using symmetric
bilinear maps, where we treat G = G1 = G2, assuming eﬃ-
cient isomorphisms between them. All of our constructions
can operate in the less restrictive asymmetric setting, which
often allows smaller group sizes in practice. We make the
following assumption in a bilinear group.
Our sole complexity assumption is the standard CDH [13].
as
pp = (ℓ, k, p, G, g, u0, . . . , uk, w, z, h).
All parties have access to a function clock() that on no
input, returns the current time period.3
KeyGen(1λ, pp).
The key generation algorithm takes as input the parame-
ters pp and selects a random a ∈ Zp. It outputs the public
key as PK = (pp, ga) and the secret key as SK = (pp, a). It
also initializes sprev to be zero.
Sign(SK, M ∈ {0, 1}Z , s).
The message space is Z bits; to sign arbitrarily-long mes-
sages one could ﬁrst apply a collision-resistant hash func-
tion. We assume the signer is given the value s = clock() as
input to the algorithm. It keeps as internal state sprev de-
noting the last time period on which it issued a signature. If
sprev = s or s ≥ 2λ, then it aborts. Otherwise, it records the
current time period as sprev := s. Let M = M1M2 . . . Mk,
where each block Mi is ℓ bits. The signing algorithm selects
a random t ∈ Zp and then outputs a signature on M under
key SK and time period s as:
σ1 = (u0
k
Y
i=1
u
Mi
i
)a · (w⌈lg(s)⌉z
s
h)t
,
σ2 = g
t
,
s.
Verify(PK, M, σ = (σ1, σ2, s)).
The veriﬁcation algorithm ﬁrst makes sure that 0  2λ. Let Z ∈ O(λ) be the number of bits in the
message space. Let ℓ, k be two security parameters such
that ℓk = Z. This will logically divide the Z-bit message
space into k chunks of ℓ bits each. (As we discuss shortly, in
practice one might set λ = 80, use a collision-resistant hash
function to map arbitrarily-long strings into Z = 160 bits
and then set ℓ = 32 and k = 5.) It chooses random elements
g, u0, . . . , uk, w, z, h ∈ G. It outputs the public parameters
The aggregate signature is output as (γ1, γ2, s).
AggVerify((pk 1, . . . , pk N ), (M1, . . . , MN ), σ).
The veriﬁcation algorithm parses σ = (γ1, γ2, s) and checks
that 0 < s < 2λ.
If this is false, it rejects. Let Mi =
Mi,1Mi,2 . . . Mi,k, where each division is ℓ bits. The algo-
rithm extracts gai ∈ pk i, computes
V := e(
N
Y
i=1
ai , u0) ·
g
k
N
Y
e(
Y
j=1
i=1
aiMi,j , uj)
g