nothing about the key. In Section 4, we propose a new
server-aided MLE scheme DupLESSMLE which com-
bines a CE-type base with the OPRF protocol based on
RSA blind-signatures [20, 29, 30].
Thus, a client, to store a ﬁle M, will engage in the
RSA OPRF protocol with the KS to compute a message-
derived key K, then encrypt M with K to produce a ci-
phertext Cdata. The client’s secret key will be used to en-
crypt K to produce a key encapsulation ciphertext Ckey.
Both Ckey and Cdata are stored on the SS. Should two
clients encrypt the same ﬁle, then the message-derived
keys and, in turn, Cdata will be the same (the key encap-
sulation Ckey will differ, but this ciphertext is small). The
DupLESS client algorithms are described in Section 6
along with how DupLESS handles ﬁlenames and paths.
Building a system around DupLESSMLE requires
careful design in order to achieve high performance. Du-
pLESS uses at most one or two SS API calls per op-
eration.
(As we shall see, SS API calls can be slow.)
Because interacting with the KS is on the critical path
for storing ﬁles, DupLESS incorporates a fast client-to-
KS protocol that supports various rate-limiting strategies.
When the KS is overloaded or subjected to denial-of-
service attacks, DupLESS clients fall back to symmet-
ric encryption, ensuring availability. On the client side,
DupLESS introduces dedup heuristics (see Section 6)
to determine whether the ﬁle about to be stored on the
SS should be selected for deduplication, or processed
with randomized encryption. For example, very small
ﬁles or ﬁles considered particularly sensitive can be pre-
vented from deduplication. We use deterministic authen-
ticated encryption (DAE) [68] to protect, in a structure-
preserving way,
the path and ﬁlename associated to
stored ﬁles. Here we have several choices along an ef-
ﬁciency/security continuum. Our approach of preserving
folder structure leaks some information to the SS, but on
the other hand, enables direct use of the SS-provided API
for ﬁle search and moving folders.
DupLESS is designed for a simple SS API, but can be
adapted to settings in which block-oriented deduplica-
tion is used, and to complex network storage and backup
solutions that use NFS [62], CIFS [56] and the like, but
we do not consider these further.
In the following sections we go into greater detail on
the various parts of the DupLESS system, starting with
the cryptographic primitives in Section 4, then moving
on to describing KS design in Section 5, and then on to
the client algorithms in Section 6, followed by perfor-
mance and security in Sections 7 and 8 respectively.
4 Cryptographic Primitives
A one-time encryption scheme SE with key space {0, 1}k
is a pair of deterministic algorithms (E, D). Encryption
E on input a key K ∈ {0, 1}k and message M ∈ {0, 1}∗
outputs a ciphertext C. Decryption D takes a key and
a ciphertext and outputs a message. CTR mode using
AES with a ﬁxed IV is such a scheme. An authen-
ticated encryption (AE) scheme is pair of algorithms
AE = (EA, DA) [19, 67]. Encryption EA takes as in-
put a key K ∈ {0, 1}k, associated data D ∈ {0, 1}∗, and
message M ∈ {0, 1}∗ and outputs a ciphertext of size
|M| +τd, where τd is the ciphertext stretch (typically, 128
bits). Decryption DA is deterministic; it takes input a
key, associated data, and a ciphertext and outputs a mes-
sage or error symbol ⊥. When encryption is determinis-
tic, we call the scheme a deterministic authenticated en-
cryption (DAE) scheme [68]. We use the Encrypt-then-
MAC [19] scheme for AE and SIV mode [68] for DAE,
both with HMAC[SHA256] and CTR[AES].
Oblivious PRFs. A (veriﬁable) oblivious PRF (OPRF)
scheme [64] consists of ﬁve algorithms OPRF =
(Kg, EvC, EvS, Vf, Ev), the last two deterministic. Key
$← Kg outputs a public key pk which
generation (pk, sk)
can be distributed freely among several clients, and a
secret key sk, which remains with a single entity, the
server. The evaluation protocol runs as follows: on the
client-side, EvC starts with an input x and ends with out-
put y such that y = Ev(sk, x), while on the server-side,
EvS starts with secret key sk and ends without output.
Figure 1 gives an example. Veriﬁcation Vf (pk, x, y) re-
turns a boolean. Security requires that (1) when keys
are picked at random, Ev(sk, ·) outputs are indistinguish-
able from random strings to efﬁcient attackers without
pk, and (2) no efﬁcient attacker, given (pk, sk), can pro-
vide x, x′, y such that Vf (pk, x, y) =Vf (pk, x′, y) = true,
or Vf (pk, x, y) = true but Ev(sk, x) = y, or Vf (pk, x, y) =
false but Ev(sk, x) = y, except with negligible probabil-
ity. Moreover, in the OPRF protocol, the server learns
nothing about client inputs or resulting PRF outputs, and
the client learns nothing about sk.
Veriﬁable OPRF schemes can be built from deter-
ministic blind signatures [29]. The RSA-OPRF[G, H]
scheme based on RSA blind signatures [20, 30] is de-
scribed as follows. The public RSA exponent e is ﬁxed
as part of the scheme. Key generation Kg runs RSAKg
with input e to get N, d such that ed ≡ 1 mod φ(N), mod-
ulus N is the product of two distinct primes of roughly
equal length and N  N. When the client wants a key, say
for a ﬁle it is about to upload, the client will make use
of the KSReq interface, by sending an HTTPS POST
of the blinded hash value. Now, the KS checks request
validity, and performs rate-limiting measures which we
describe below. Then, the KS computes the signature
over the blinded hash value, and sends this back over the
established HTTPS channel.
OPRFv1 has the beneﬁt of extreme simplicity. With 20
lines of code (excluding rate limiting logic) in the form
of a Web-Server Gateway Interface (WSGI) Python mod-
ule, one can run the KS on top of most webservers. We
used Apache 2.0 in our implementation.
Unfortunately, while simple, this is a high latency so-
lution, as it requires four full round trips across the net-
work (1 for TCP handshake, 2 for the TLS handshake, 1
for the HTTP request) to perform KSReq. While sub-
second latency is not always critical (e.g., because of
poor SS performance or because the KS and clients share
a LAN), it will be critical in many settings, and so we
would like to do better.
UDP based. We therefore turn to OPRFv2, which re-
moves the slow per-request handshakes from the criti-
cal path of encryption. Here, the KSInit procedure starts
with a TLS handshake with mutual authentication, initi-
ated by a client. The KS responds immediately following
a valid handshake with the OPRF public key pk, a TLS
identiﬁer of a hash function H (by default SHA-256), a
random session identiﬁer S ∈ {0, 1}128, and a random
session key KS ∈ {0, 1}k (we set k = 128 in our imple-
mentations). We shave off one round trip from KSInit by
responding immediately, instead of waiting for an HTTP
message as in OPRFv1. The KS also associates a se-
quence number with this session, initialized to zero. In-
ternally the KS maintains two tables, one mapping ses-
sion identiﬁers with keys, and a second which keeps
track of sequence numbers. Each session lasts for a ﬁxed
time period (currently 20 minutes in our implementation)
and table entries are removed after the session expires.
The client caches pk, S and KS locally and initializes a
sequence number N = 0.
To make an OPRF request KSReq on a blinded value
X , the client ﬁrst increments the sequence number N ←
N + 1, then computes a MAC tag using its session key, as
T ← HMAC[H](KS, S  N  X ) and sends the concatena-
tion S  N  X  T to the KS in a single UDP packet. The
KS recovers S, N, X and T and looks up KS and NS. It
ensures that N > NS and checks correctness of the MAC
T . If the packet is malformed or if some check fails, then
the KS drops the packet without further action. If all the
checks pass, the KS sends the OPRF protocol response
in a single UDP packet.
The client waits for time tR after sending a KSReq
packet before triggering timeout behavior. In our imple-
mentation, this involves retrying the same request twice
more with time tR between the tries, incrementing the se-
quence number each time. After three attempts, the client
will try to initiate a new session, again timing out after
tR units. If this step fails, the client believes the KS to
be ofﬂine. This timeout behavior is based on DNS, and
following common parameters, we set tR = 1 second.
We implemented OPRFv2 in Python. It comes to 165
lines of code as indicated by the cloc utility, the bulk of
which is in fact the rate limiting logic discussed below.
Our current KS implementation is not yet optimized. For
example it spawns and kills a new thread for each con-
nection request (as opposed to keeping a pool of children
around, as in Apache). Nevertheless the implementation
is fully functional and performs well.
Rate limiting KS requests. We explore approaches for
per-client rate limiting.
In the ﬁrst approach, called
Bounded, the KS sets a bound q on the total number
of requests a client can make during a ﬁxed time inter-
val tE , called an epoch. Further queries by the client
will be ignored by the KS, until the end of the epoch.
Towards keeping the KS simple, a single timer controls
when epochs start and end, as opposed to separate timers
for each client that start when their client performs a ses-