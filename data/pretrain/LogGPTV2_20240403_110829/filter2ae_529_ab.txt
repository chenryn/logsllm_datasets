       uint256 public constant RANGESTART_3 = 11000001; 
       uint256 public constant RANGEEND_3 = 15000000;
       //Stage 4
       uint256 public constant PRICE_4 = 21068;  
       uint256 public constant FACTOR_4 = 800;
       uint256 public constant RANGESTART_4 = 15000001; 
       uint256 public constant RANGEEND_4 = 20000000;
       //Stage 5
       uint256 public constant PRICE_5 = 14818;  
       uint256 public constant FACTOR_5 = 1332;
       uint256 public constant RANGESTART_5 = 20000001; 
       uint256 public constant RANGEEND_5 = 30000000;
       //Stage 6
       uint256 public constant PRICE_6 = 7310;  
       uint256 public constant FACTOR_6 = 2700;
       uint256 public constant RANGESTART_6 = 30000001; 
       uint256 public constant RANGEEND_6 = 40000000;
       //Stage 7
       uint256 public constant PRICE_7 = 3607;  
       uint256 public constant FACTOR_7 = 5450;
       uint256 public constant RANGESTART_7 = 40000001; 
       uint256 public constant RANGEEND_7 = 50000000;
       //Stage 8
       uint256 public constant PRICE_8 = 1772;  
       uint256 public constant FACTOR_8 = 11000;
       uint256 public constant RANGESTART_8 = 50000001; 
       uint256 public constant RANGEEND_8 = 60000000;
       //Stage 9
       uint256 public constant PRICE_9 = 863;  
       uint256 public constant FACTOR_9 = 23200;
       uint256 public constant RANGESTART_9 = 60000001; 
       uint256 public constant RANGEEND_9 = 70000000;
       //Stage 10
       uint256 public constant PRICE_10 = 432;  
       uint256 public constant FACTOR_10 = 46000;
       uint256 public constant RANGESTART_10 = 70000001; 
       uint256 public constant RANGEEND_10 = 80000000;
       //Stage 11
       uint256 public constant PRICE_11 = 214;  
       uint256 public constant FACTOR_11 = 78000;
       uint256 public constant RANGESTART_11 = 80000001; 
       uint256 public constant RANGEEND_11 = 85000000;
而上述分组的变量赋值是用来为后面的不同情况做处理依据。而下面就是关键代码部分：
    function submitTokens(address recipient) payable {
            if (msg.value == 0) {
                throw;
            }
            //Permit buying only between 10/09/17 - 10/27/2017 and after 11/01/2017
            if((now > start && now  launch)
                {               
                    uint256 tokens = msg.value.mul(PRICE).div( 1 ether);
                    if(tokens.add(OVERALLSOLD) > MAXTOKENSOLD)
                        {
                        throw;
                        }
                    //Pre-Sale CAP 10,000,000 check
                    if(((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now start && now = RANGESTART_PRESALE && OVERALLSOLD spendToken && spendToken>=10)
            {
               if(spendToken>maxSpendToken) 
                   {
                       spendToken=maxSpendToken;
                   }
               UniCoinSize=UniCoinSize+spendToken;
               balances[msg.sender] = balances[msg.sender].sub(spendToken);
              //If first message or last message already expired set newest timestamp
              uint expireTimestamp=now;
              if(mQueue.length>0)
                {
                 if(mQueue[mQueue.length-1].expireTimestamp>now)
                    {
                    expireTimestamp = mQueue[mQueue.length-1].expireTimestamp;  // 如果上一个用户的显示时间还没有到，那么下一个用户从结束处开始
                    }
                }
当用户投食这个独角兽的时候，合约会将用户所发的话记录下来，并根据喂食的金额计算出相应的持续时间。之后根据目前队列中存在的消息时间而更新该用户的消息时间。
    mQueue.push(MessageQueue({
                       message: msg_from, 
                       from: name_from,
                       expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg
                       startTimestamp: expireTimestamp,
                       sender: msg.sender
                   }));
之后将相关变量存入队列中。下面是喂食函数：
    function feedUnicorn(uint spendToken) {
            if(balances[msg.sender]>spendToken)
                {
                UniCoinSize=UniCoinSize.add(spendToken);
                balances[msg.sender] = balances[msg.sender].sub(spendToken);
                }
         }
当传入spendToken后，判断用户余额是否充足，如果充足的话则改变独角兽的大小，并对余额更新。
### 四、分析
#### 1 漏洞分析
我们在审计合约的时候应该能够注意到合约编写人使用了安全函数来帮助处理溢出问题，然而当我们仔细研究代码的时候就能发现：
用于检查溢出的关键函数被注释掉了。也就意味着安全函数跟普通的加减法是没有区别的emmm。
所以我们回过头来在看代码：
在转账授权之后进行转账，存在了下溢漏洞。我们可以针对此使用两个账户进行恶意操作，以便达到账户溢出的效果。
然而这个合约的漏洞不仅限于此，经过我的审计后发现了更多的溢出点。例如：
这是转账函数，然而这个转账函数并没有进行余额检测就进行了转账。倘若我的用户没有这么多钱，其还是可以转账成功，并且使自己的余额溢出。而编写者应该是认为默认使用sub安全函数后就可以依靠安全函数的内容进行检查操作，然而他忽略了安全代码的关键部分被注释了这个问题。
#### 2 实验操作
首先我们部署合约：
切换用户：
之后模拟用户投入部分eth来换取一定token。传入1 ether得到如下token：
在该用户下调用`approve`函数赋予`0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db`转账`300001`的权利。
查看刚才的操作。
现在我们切换到`0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db`用户下，并进行漏洞转账操作。
`"0x14723a09acff6d2a60dcdf7aa4aff308fddc160c","0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db",
300001`。
此时查看`0x14723a09acff6d2a60dcdf7aa4aff308fddc160c`的余额：
由于下溢导致了溢出。此时达成了攻击目的。
而除了此处外，所有涉及到sub与add的函数均有可能出现类似的溢出漏洞，所以其余部分利用过程类似，这里就不在演示。
### 五、相关链接
  * DAPP官方网站：
  * 以太坊合约代码：
  * 游戏介绍：
**本稿为原创稿件，转载请标明出处。谢谢。**