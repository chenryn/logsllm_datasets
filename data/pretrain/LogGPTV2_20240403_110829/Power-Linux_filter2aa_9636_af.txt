```
访问 127.0.0.1:8161   用户名:admin 密码:admin
修改用户信息编辑 conf/jetty-realm.properties 即可
---
### Apache_httpd
> Apache HTTP Server 是 Apache 软体基金会的一个开放原始码的网页伺服器软体，可以在大多数电脑作业系统中运行。由于其跨平台和安全性，被广泛使用，是最流行的 Web 伺服器软体之一。
**官网**
- https://www.apache.org/
**安装**
```bash
yum install -y httpd
yum install -y mod_ssl openssl
```
**简单配置**
```vim
vim /etc/httpd/conf/httpd.conf
DocumentRoot "/var/www/html"
ServerName  xx.xx.xx.xx:80
# 设置 Web 服务器的主机名和监听端口
```
启服务
```vim
vim /var/www/html/index.html
Hello World!
```
```bash
service httpd restart
firewall-cmd --zone=public --add-service=http --permanent
firewall-cmd --reload
```
此时可以访问 ip/index.html
**虚拟主机**
配置虚拟主机文件
```vim
cp /usr/share/doc/httpd-*/httpd-vhosts.conf /etc/httpd/conf.d/virthost.conf
vim /etc/httpd/conf.d/virthost.conf
	ServerName  www.abc.com
  # 设置 Web 服务器的主机名和监听端口
	DocumentRoot "/data/web_data"
		Require all granted
Listen 192.168.1XX.33:443
	ServerName  www.abc.com
  # 设置 Web 服务器的主机名和监听端口
	DocumentRoot "/data/web_data"
	SSLEngine on
	SSLCertificateFile /etc/httpd/ssl/httpd.crt
	SSLCertificateKeyFile /etc/httpd/ssl/httpd.key
		Require all granted
```
```bash
mkdir -p /data/web_data
echo 'Hello World!' >/data/web_data/index.html
service httpd restart
firewall-cmd --zone=public --add-service=http --permanent
firewall-cmd --reload
```
**更多配置案例**
见 [httpd.md](./实验/httpd.md)
---
### Caddy
> Caddy 伺服器是一个开源的，使用 Golang 编写，支持 HTTP/2 的 Web 服务端。
> 注 : 在新版 caddy 中以下配置已经不兼容了,请参考官方文档 https://caddyserver.com/docs/getting-started
**官网**
- https://caddyserver.com/
**安装 Caddy**
```bash
# Debian, Ubuntu, Raspbian
sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo tee /etc/apt/trusted.gpg.d/caddy-stable.asc
curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
sudo apt update
sudo apt install caddy
# Fedora, RedHat, CentOS
dnf install 'dnf-command(copr)'
dnf copr enable @caddy/caddy
dnf install caddy
# RHEL/CentOS 7:
yum install yum-plugin-copr
yum copr enable @caddy/caddy
yum install caddy
```
**启动测试**
```bash
caddy run
curl localhost:2019/config/ | jq .
```
**配置文件**
```bash
chown -R root:www-data /usr/local/bin   # 设置目录数据权限
touch /usr/local/caddy/Caddyfile
echo -e ":80 {
	gzip
	root /usr/local/caddy/www/
}" > /usr/local/caddy/Caddyfile
mkdir /usr/local/caddy/www
echo "first" >> /usr/local/caddy/www/index.html
/etc/init.d/caddy start
# 如果启动失败可以看 Caddy 日志: tail -f /tmp/caddy.log
```
**反向代理**
做一个 ip 跳转
```bash
echo ":80 {
	gzip
	proxy / http://www.baidu.com
}" > /usr/local/caddy/Caddyfile
/etc/init.d/caddy start
```
**HTTPS**
为已经绑定域名的服务器自动从 Let’s Encrypt 生成和下载 HTTPS 证书,支持 HTTPS 协议访问,你只需要将绑定的 IP 换成 域名 即可
```bash
echo -e "xxx.com {
	gzip
    root /usr/local/bin/www
	tls PI:EMAIL  #你的邮箱
}" > /usr/local/caddy/Caddyfile
/etc/init.d/caddy start
```
---
### npm&Node
> npm 是 Node.js 预设的、以 JavaScript 编写的软体套件管理系统。
> Node.js 是能够在伺服器端运行 JavaScript 的开放原始码、跨平台 JavaScript 执行环境。
**官网**
- https://www.npmjs.com/
- https://nodejs.org
**包管理器方式**
- apt
  ```bash
  curl -sL https://deb.nodesource.com/setup_10.x | bash -  # 添加 Node.js PPA
  apt-get install -y nodejs npm
  ```
- yum
  ```bash
  yum install -y epel-release
  yum install -y nodejs npm
  ```
**源文件方式安装**
首先下载 NodeJS 的二进制文件,http://nodejs.org/download/ .在 Linux Binaries (.tar.gz) 行处根据自己系统的位数选择
```bash
# 解压到当前文件夹下运行
tar xvJf node-v12.17.0-linux-x64.tar
进入解压后的目录 bin 目录下,执行 ls 会看到两个文件 node,npm. 然后执行 ./node -v ,如果显示出 版本号说明我们下载的程序包是没有问题的.依次运行如下三条命令
cd node-v12.17.0-linux-x64/bin
ls
./node -v
```
因为 /home/node-v12.17.0-linux-x64/bin 这个目录是不在环境变量中的,所以只能到该目录下才能 node 的程序.如果在其他的目录下执行 node 命令的话 ,必须通过绝对路径访问才可以的
如果要在任意目录可以访问的话,需要将 node 所在的目录,添加 PATH 环境变量里面,或者通过软连接的形式将 node 和 npm 链接到系统默认的 PATH 目录下的一个
在终端执行 echo $PATH 可以获取 PATH 变量包含的内容,系统默认的 PATH 环境变量包括 /usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin: ,冒号为分隔符.所以我们可以将 node 和 npm 链接到 /usr/local/bin 目录下如下执行
```bash
ln -s /home/node-v12.17.0-linux-x64/bin/node /usr/local/bin/node
ln -s /home/node-v12.17.0-linux-x64/bin/npm /usr/local/bin/npm
```
**加速**
- [node&js](../../Plan/Misc-Plan.md#node&js)
**强制安装**
```bash
npm install --unsafe-perm=true --allow-root
```
**模块安装和卸载**
```bash
# 安装
npm i -g [xxx模块]
# clone 到本地安装
git clone https://github.com/xxx/[xxx模块]
cd [xxx模块]
npm i -g
# 卸载
npm uninstall [xxx模块]
```
**forever**
> forever 是一个简单的命令式 nodejs 的守护进程，能够启动，停止，重启 App 应用。forever 完全基于命令行操作，在forever进程之下，创建 node 的子进程，通过 monitor 监控 node 子进程的运行情况，一旦文件更新或进程挂掉，forever 会自动重启 node 服务器，确保应用正常运行。
```bash
npm install forever -g    # 全局安装
forever start app.js      # 启动
forever stop app.js       # 关闭
forever start -l forever.log -o out.log -e err.log app.js # 输出日志和错误
forever -w app.js         # 自动监控文件变化，文件修改保存之后自动重启app.js
forever -h                # 查看帮助
```
---
### Nexus
> Nexus 是一种 Maven 仓库管理软件用于搭建私服,私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。
**官网**
- https://www.sonatype.com/nexus-repository-oss
**安装**
- **JDK**
    ```bash
    tar xzf jdk-8u212-linux-x64.tar.gz
    ```
    ```vim
    vim /etc/profile
    export JAVA_HOME=/root/jdk1.8.0_212
    export PATH=$PATH:$JAVA_HOME/bin
    ```
    ```bash
    source /etc/profile
    java -version
    ```
- **Maven**
    ```bash
    tar xzf apache-maven-3.6.2-bin.tar.gz
    ```
    ```vim
    vim /etc/profile
    export MAVEN_HOME=/root/apache-maven-3.6.2
    export PATH=$PATH:$MAVEN_HOME/bin
    ```
    ```bash
    source /etc/profile
    mvn -version
    ```
- **Nexus**
    - 在官网下载 UNIX 安装包,上传至服务器,这里以 https://help.sonatype.com/repomanager2/download#Download-NexusRepositoryManager2OSS 2.14.14-01 为例
    ```bash
    tar -xf nexus-2.14.14-01-bundle.tar.gz -C /usr/local
    cd /usr/local/nexus-2.14.14-01/bin/
    export RUN_AS_USER=root
    ./nexus start
    firewall-cmd --add-port=8081/tcp --permanent
    firewall-cmd --reload
    ```
    ```bash
    curl http://127.0.0.1:8081/nexus/
    ```
    默认登录账号/密码为: admin/admin123
---
### Nginx
> Nginx 是非同步框架的网页伺服器，也可以用作反向代理、负载平衡器和 HTTP 缓存。
**官网**
- https://nginx.org/
**安装**
- **yum 安装**
  ```bash
  yum install -y nginx
  systemctl start nginx.service
  ```
- **Debian & Ubuntu 安装**
  ```bash
  apt update
  apt-get -y install nginx
  ```
- **源代码编译安装**
  自己下载好包 https://nginx.org/en/download.html ,传到服务器上,这里以 1.16.1 举例
  ```bash
  wget https://nginx.org/download/nginx-1.16.1.tar.gz
  tar -zxvf nginx-1.16.1.tar.gz
  cd nginx-1.16.1/
  ./configure
  make
  make install
  cd /usr/local/nginx/sbin
  ./nginx
  ```
  注:源代码安装你的默认目录在 /usr/local/nginx 下,配置文件在 conf/ 中,不要搞错了
**虚拟主机**
在 /etc/nginx/conf.d/ 目录下新建一个站点的配置文件,列如:test.com.conf
```vim
vim /etc/nginx/conf.d/test.com.conf
server {
        listen 80;
        server_name www.test.com test.com;
        root /usr/share/nginx/test.com;
        index index.html;
        location / {
        }
}
```
`nginx -t ` 检测文件是否有误
```bash
mkdir /usr/share/nginx/test.com
echo "hello world!" > /usr/share/nginx/test.com/index.html
firewall-cmd --permanent --zone=public --add-service=http
firewall-cmd --reload
systemctl start nginx.service
```
如果服务器网址没有注册,那么可以在本机电脑的 /etc/hosts 添加设置: `192.168.1.112   www.test.com test.com`
本地 curl 访问测试 `curl www.test.com`
**查看报错**
```
less /var/log/nginx/error.log
```
**更多配置案例**
见 [Nginx.md](./实验/Nginx.md)
---
### php-cli
**交互式 shell**
```bash
php -a
php > echo "hello";
hello
php > $x = 3;
php > $y = 2;
php > echo ($x + $y);
```
**运行 PHP 文件**
```bash
php -f test.php
```
**运行 web 服务器**
```bash
php -S 0.0.0.0:8080
```
---
### phpMyAdmin
**官网**
- https://www.phpmyadmin.net/
`建议搭配上面的 nginx+php 扩展笔记`
**创建数据库和一个用户**
```bash
yum install -y mariadb mariadb-server
systemctl start mariadb
systemctl enable mariadb
mysql_secure_installation
mysql -u root -p
# 创建一个专给 WordPress 存数据的数据库
MariaDB [(none)]> create database f8x_info;  # 最后的"f8x_info"为数据库名
# 创建用于 WordPress 对应用户
MariaDB [(none)]> create user f8x@localhost identified by 'password';  # "f8x"对应创建的用户,"password"内填写用户的密码
# 分别配置本地登录和远程登录权限
MariaDB [(none)]> grant all privileges on f8x_info.* to f8x@'localhost' identified by 'password';
MariaDB [(none)]> grant all privileges on f8x_info.* to f8x@'%' identified by 'password';
# 刷新权限