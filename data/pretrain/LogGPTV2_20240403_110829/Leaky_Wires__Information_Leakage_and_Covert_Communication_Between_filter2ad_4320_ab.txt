using an inconspicuous transmitter.
Finally, the same phenomenon can be exploited to watermark
circuits [5, 27], or introduce a no-contact debugging mechanism,
for instance to detect stuck signals, without altering routing.
3.2 Influencing Placement and Routing
A potential issue with pre-placed and pre-routed IP cores is that
they are specific to an FPGA generation (but can be used in dif-
ferent devices within the same family). As we show in Section 7.2,
however, the phenomenon we present persists across 3 generations
of Xilinx chips. As a result, an adversary can provide an IP gener-
ation wizard that provides different routing for different families,
and dynamically choose the placement of the IP cores. In fact, as
we show in Section 8, the location of the actual logic and wires is
not important, so the adversary merely needs to ensure that the
transmitter and the receiver use long wires which are adjacent.
If the adversary only pre-routes but does not pre-place his cores,
he can still succeed, even if he leaves the absolute placement of
his cores to the routing tools. Assume the FPGA has N long wires,
the transmitted signal can be recovered from w nearby wires, the
receiver uses R longs, and the transmitter uses T longs. Then, the
probability that at least one segment of the transmitter is adjacent
to a segment of the receiver is (R + T − 1) · w/N , assuming the
tools place the two cores at random. For the FPGA boards we have
used, N ≈ 8, 500 (equal to the number of CLBs) and w = 4, so with
R = T = 5, an adversary has a 0.42% chance of success. Since tools
do not pick locations at random or spread the logic, the probability
of success is higher in practice. The adversary can also increase this
probability by accessing relatively unique elements such as Block
RAM (BRAM), DSP blocks, or embedded processors on the FPGA
fabric. For example, the devices we used have less than 150 DSP
slices and 300 BRAM blocks, so accessing them reduces the number
of possible placements for the attacker’s cores.
Figure 2: Ring oscillator counts and 99% confidence intervals
for a setup where transmitter and receiver use 5 longs each.
The receiver is able to distinguish between signals using a
simple threshold, despite noise from the environment.
A more powerful adversary can instead subvert the compilation
tools themselves, which is a common threat model for FPGAs [10,
14]. Note that, as before, since the final netlist itself is often veri-
fied post-synthesis and -routing, the adversary still does not desire
to include additional logic in the design, but just affect the rout-
ing/placement of his malicious cores. Finally, in co-located multi-
user instances, the adversary is the user, so he can always choose
the location of his own cores, without the need to rely on the above.
4 CHANNEL OVERVIEW
Our channel exploits the fact that the delay of long wires depends
on the logical state of nearby wires, even when the signals they are
carrying are static. We find that when the transmitting wire carries
a 1, the delay of the nearby receiving wire is lower, which results
in a higher number of ring oscillator (RO) counts. This is a distinct
mechanism from prior research, which depends on the switching
activity of nearby circuits, which decreases RO frequency [12, 35],
as we also independently verify in Section 6.3.
This dependence on the logical state of the transmitter is shown
in Figure 2. The red dots and blue x’s are RO counts when the
transmitter wire carries a logical 1 or 0 respectively. The difference
between the counts when transmitting 1s and 0s is clear, even under
local fluctuations due to environmental and other conditions: even
when the absolute frequencies of the ring oscillator change, the
difference between the two frequencies remains the same.
In order to characterize the efficacy and quality of the communi-
cation channel in detail, we perform a number of experiments, the
setup of which is detailed in Section 5. We first show in Section 6
that the strength of the effect does not depend on the transmission
pattern, by measuring the effect of an alternating sequence of 0s and
1s, as well as that of long runs of 0s and 1s, and of pseudo-random
bits. We illustrate that even for fast-changing dynamic signals, an
eavesdropping attacker can obtain the fraction of 1s and 0s, i.e., the
Hamming weight on the transmitting wire.
We then show that longer measurement periods and overlaps
make it easier to distinguish between different bits in Section 7. The
0500100015002000Samplei2,208,2502,208,7502,209,2502,209,7502,210,2502,210,7502,211,250RingOscillatorCountci∆µ=1,279.84TransmittedValue10ASIACCS’18, June 4–8, 2018, Songdo, Korea
Ilias Giechaskiel, Kasper B. Rasmussen, and Ken Eguro
use the term transmitter for brevity and because in the controlled
experiments we choose the value on the long wire, but the conclu-
sions we draw are valid whether transmissions are intentional or
not. The receiving circuit also uses long wires that are adjacent to
the transmitter’s wire segments. To measure the delay of the re-
ceiver’s long wire segment(s), we include it as part of a three-stage
ring oscillator. As in [31], the oscillator contains one inverter (NOT
gate) and two buffer stages. The wire’s delay directly influences the
frequency of oscillation, which we estimate by feeding the output
of one of the RO stages to a counter in our measurement setup.
The receiver and the transmitter are initially on fixed locations
of the device, but we change the location in Section 8 to show that it
does not influence our measurements. We also change their lengths
in Section 7.2 to show that the effect becomes more pronounced
the longer the overlap is.
Figure 3: Experimental setup. Transmitter and receiver use
long wires to communicate, while the measurement setup
generates signals and measures their effects.
strength of the effect changes based on the receiver and transmitter
lengths, and this dependence exists across generations of devices,
but with a different magnitude. We also demonstrate that the abso-
lute location and orientation of the transmitter and receiver do not
change the magnitude of the effect in Section 8.
Finally, we show in Section 9 that the channel remains strong,
even if significant computation is happening elsewhere on the de-
vice simultaneously, showing that the channel can be used in a
realistic environment. We demonstrate that for the transmitted
information to be detectable, the transmitter and receiver wires
need to be adjacent, but where exactly and in what direction the
overlap occurs is not significant. This indicates that it may be dif-
ficult for designers to protect themselves from eavesdropping, or
detect intentional malicious transmissions.
Overall, we show that the channel is stable across FPGA gen-
erations, devices, and locations within a device. It is also high-
bandwidth, and can be used to implement both covert communi-
cations and eavesdropping attacks, without tapping into existing
signals, and with minimal resources, as we explain in Section 10.
5 EXPERIMENTAL SETUP
In order to test the properties identified in Section 4, we need to
determine the factors we wish to vary, keeping the rest of the setup
fixed. This distinction naturally divides our experimental setup into
two parts, as shown in Figure 3. The communication channel circuit
contains just the transmitter and the Ring Oscillator receiver. The
measurement half works independently of any specific channel
implementation, generating the transmitted signal, sampling the
RO counter, and transferring the data to a PC for analysis.
The bulk of our experiments are conducted on three Virtex 5
XUPV5-LX110T (ML509) evaluations boards. The boards include a
heatsink and a fan, but we do not otherwise control for temperature,
and we also do not modify the board in any way (e.g., by bypassing
the voltage regulator) in accordance with our threat model. Each
experiment is run on every device 5 times, collecting 2048 data
points per run, and results are reported at the 99% confidence level.
5.1 Transmitter and Receiver
To illustrate the information leakage, our setup employs a minimal
transmitting circuit: the transmitter consists of a buffer LUT that
drives one or more long-wire segments connected end-to-end. We
5.2 Measurement Setup
The measurement component generates the signals to be transmit-
ted and measures the RO frequency. A new trigger event is produced
every N = 2n clock ticks. At every trigger, the RO counter is read
and reset, and a new value is presented to the transmitter. For most
experiments, the signal generator simply alternates between 0s
and 1s, but we change the pattern in Section 6 to show the general-
ity of the channel.
The 100MHz system clock is driven by a Digital Clock Manager
(DCM) to ensure clock quality. For the majority of our experiments,
we fix n = 21 (corresponding to 221 clock ticks, or 21ms), but vary
n in Section 7.1 to explore the accuracy vs. time trade-offs. The
sampled data is transferred to a PC for analysis through Xilinx’s
ChipScope Integrated Logic Analyzer (ILA) core.
Unlike the circuit described above, the measurement logic is not
hand-placed or hand-routed, due to the large number of experi-
ments performed. Although the measurement logic could influence
the RO frequency [22], we repeat our experiments on multiple
locations, control for other patterns, and average over relatively
lengthy periods of time. Thus, we believe that any effects of the
measurement circuitry would influence the transmission of both
zeros and ones equally, a hypothesis we confirm in Section 9 by
observing that the channel is only affected by adjacent wires.
5.3 Relative Count Difference
When a clock of frequency fCLK is sampled every m ticks and a
ring oscillator of frequency fRO driving a counter measures c ticks,
then fRO/fCLK ≈ c/m, with an appropriate quantization error due
to the unsynchronized nature of the RO and the system clock. Thus,
RO − f 0
f 1
f 1
RO
RO
≈ C1 − C0
C1
(1)
where Ci and f i represent the count and respective frequency
when the transmitter has value i. As a result, the relative change
of frequency can be approximated just by the measured counts,
irrespective of the measurement and clock periods.
In the basic setup, the transmitter alternates between sending
zeros and ones. We denote the i-th sampled count as ci, so the
pair pi = (ci , ci−1) always corresponds to different transmitted
values. For the sake of notation clarity, we will assume that c2i +1
XLeaky Wires: Information Leakage and Covert Communication Between FPGA Long Wires ASIACCS’18, June 4–8, 2018, Songdo, Korea
Figure 4: Timing diagram for the various transmission patterns used in the experiments. We test patterns which remain
constant within a measurement period (Alternatinд, Lonд Runs, Random), and fast-changing patterns (Dynamic).
(a) Example run
(b) Comparison across devices
Figure 5: Effect of different static transmission patterns: (a) is a visualization of three different patterns: Alternatinд (left),
Lonд Runs (middle), and Random (right). (b) is a comparison across devices, with 99% confidence intervals. The magnitude of the
effect does not depend on the pattern used.
∆RCi = c2i +1 − c2i
c2i +1
corresponds to a transmitted 1 and we will be using the quantity
to indicate the relative frequency change between a transmitted one
and zero. ∆RC will denote the average of ∆RCi over all measure-
ment pairs i. We discuss different transmission patterns in Section 6
and how to exploit the measurements in Section 10.
6 TRANSMITTER PATTERNS
In this section we show that the phenomenon observed does not
fundamentally depend upon the pattern of transmissions, i.e., that
only the values carried by the wire during the period of measure-
ment matter, and not the values that precede or follow it. We first
show this for relatively constant signals (Section 6.1), and then
for highly dynamic ones (Section 6.2). Finally, we compare our re-
sults to those produced by switching activity, which is traditionally
discussed in the context of Hardware Trojan detection (Section 6.3).
6.1 Constant Signals
In the default setup, we use a slowly alternating signal, where the
transmitted value changes every sampling period. This pattern is
denoted by Alternatinд in Figure 4. In this experiment, the trans-
mitted value still remains constant within a given measurement
period, and we sample the ring oscillator at the same default rate
(every 21ms), but change how the signal generator chooses the next
value to be transmitted. The first additional pattern we test greatly
slows down the alternation speed of the transmitted signal. This
Lonд Runs pattern maintains the same value for 128 consecutive
triggers—in essence, testing the effects of long sequences of zeros
and ones. The second setup employs a Linear Feedback Shift Reg-
ister, which produces a pseudo-random pattern of zeros and ones,
and is denoted by Random in Figure 4.
The results of this test are shown in Figure 5, with a sample of
the data in Figure 5a, and a comparison across devices in Figure 5b.
The RO counts remain significantly higher when transmitting a
1 versus a 0, and the average count difference remains identical,
with almost no variability among the patterns. We deduce that the
pattern of transmission has no persistent effect on the delay of
nearby wires, allowing the channel to be used without having to
ensure a balanced distribution of transmitted values.
6.2 Dynamic Patterns
To show that the dominating factor in the observed phenomenon
is the duration for which the transmitter remains at a logical 1, and
not the switching activity of the circuit, we try various dynamic
patterns. As a result, even if a signal is not sufficiently long-lived,
the attacker can still deduce the signal’s Hamming Weight (HW),
and thus eavesdrop on signals he does not control. We explain in
Section 10.2 how to use this property to recover cryptographic keys
through repeated measurements.
The dynamic patterns used are denoted by Dynamic in the timing
diagram of Figure 4. During each sampling period, we loop the
d0d1d2d3d4d5ClockAlternatingLongRunsRandomDynamic025050002505000250500Samplei3,339,0003,339,5003,340,0003,340,5003,341,0003,341,5003,342,0003,342,500RingOscillatorCountci∆µ=1,202.19∆µ=1,278.85∆µ=1,233.50AlternatingLongRunsRandomTransmittedValue10Device0Device1Device202004006008001,0001,200AbsoluteCountDiﬀerence∆CTransmissionPatternAlternatingLongRunsRandomASIACCS’18, June 4–8, 2018, Songdo, Korea
Ilias Giechaskiel, Kasper B. Rasmussen, and Ken Eguro
Figure 6: Effect of dynamic switching activity using a long-