title:Chainspace: A Sharded Smart Contracts Platform
author:Mustafa Al-Bassam and
Alberto Sonnino and
Shehar Bano and
Dave Hrycyszyn and
George Danezis
Chainspace: A Sharded Smart Contracts Platform
Mustafa Al-Bassam∗, Alberto Sonnino∗, Shehar Bano∗, Dave Hrycyszyn† and George Danezis∗
∗ University College London, United Kingdom
† constructiveproof.com
Abstract—Chainspace is a decentralized infrastructure, known
as a distributed ledger, that supports user deﬁned smart contracts
and executes user-supplied transactions on their objects. The
correct execution of smart contract transactions is veriﬁable by
all. The system is scalable, by sharding state and the execution
of transactions, and using S-BAC, a distributed commit protocol,
to guarantee consistency. Chainspace is secure against subsets of
nodes trying to compromise its integrity or availability properties
through Byzantine Fault Tolerance (BFT), and extremely high-
auditability, non-repudiation and ‘blockchain’ techniques. Even
when BFT fails, auditing mechanisms are in place to trace mali-
cious participants. We present the design, rationale, and details
of Chainspace; we argue through evaluating an implementation
of the system about its scaling and other features; we illustrate a
number of privacy-friendly smart contracts for smart metering,
polling and banking and measure their performance.
I.
INTRODUCTION
Chainspace is a distributed ledger platform for high-integrity
and transparent processing of transactions within a decentral-
ized system. Unlike application speciﬁc distributed ledgers,
such as Bitcoin [Nak08] for a currency, or certiﬁcate trans-
parency [LLK13] for certiﬁcate veriﬁcation, Chainspace offers
extensibility though smart contracts, like Ethereum [Woo14].
However, users expose to Chainspace enough information
about contracts and transaction semantics, to provide higher
scalability through sharding across infrastructure nodes: our
modest testbed of 60 cores achieves 350 transactions per
second, as compared with a peak rate of less than 7 trans-
actions per second for Bitcoin over 6K full nodes. Etherium
currently processes 4 transactions per second, out of theoretical
maximum of 25. Furthermore, our platform is agnostic as to
the smart contract language, or identity infrastructure, and
supports privacy features through modern zero-knowledge
techniques [BCCG16, DGFK14].
Unlike other scalable but
‘permissioned’ smart con-
tract platforms, such as Hyperledger Fabric [Cac16] or
BigchainDB [MMM+16], Chainspace aims to be an ‘open’
system: it allows anyone to author a smart contract, anyone to
provide infrastructure on which smart contract code and state
runs, and any user to access calls to smart contracts. Further,
it provides ecosystem features, by allowing composition of
smart contracts from different authors. We integrate a value
7
1
0
2
g
u
A
2
1
]
R
C
.
s
c
[
1
v
8
7
7
3
0
.
8
0
7
1
:
v
i
X
r
a
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
system, named CSCoin, as a system smart contract to allow
for accounting between those parties.
However, the security model of Chainspace, is different
from traditional unpermissioned blockchains, that rely on proof-
of-work and global replication of state, such as Ethereum. In
Chainspace smart contract authors designate the parts of the
infrastructure that are trusted to maintain the integrity of their
contract—and only depend on their correctness, as well as the
correctness of contract sub-calls. This provides ﬁne grained
control of which part of the infrastructure need to be trusted on
a per-contract basis, and also allows for horizontal scalability.
This paper makes the following contributions:
•
It presents Chainspace, a system that can scale arbitrar-
ily as the number of nodes increase, tolerates byzantine
failures, and can be fully and publicly audited.
•
•
•
•
It presents a novel distributed atomic commit protocol,
called S-BAC, for sharding generic smart contract
transactions across multiple byzantine nodes, and
correctly coordinating those nodes to ensure safety,
liveness and security properties.
It introduces a distinction between parts of the smart
contract that execute a computation, and those that
check the computation and discusses how that dis-
tinction is key to supporting privacy-friendly smart-
contracts.
It provides a full implementation and evaluates the per-
formance of the byzantine distributed commit protocol,
S-BAC, on a real distributed set of nodes and under
varying transaction loads.
It presents a number of key system and applica-
tion smart contracts and evaluates their performance.
The contracts for privacy-friendly smart-metering and
privacy-friendly polls illustrate and validate support
for high-integrity and high-privacy applications.
Outline: Section II presents an overview of Chainspace;
Section III presents the client-facing application interface;
Section IV presents the design of internal data structures
guaranteeing integrity, the distributed architecture, the byzantine
commit protocols, and smart contract deﬁnition and composi-
tion. Section V argues the correctness and security; speciﬁc
smart contracts and their evaluations are presented in Section VI;
Section VII presents an evaluation of the core protocols and
smart contract performance; Section VIII presents limitation
and Section IX a comparison with related work; and Section X
concludes.
II. SYSTEM OVERVIEW
Chainspace allows applications developers to implement
distributed ledger applications by deﬁning and calling proce-
dures of smart contracts operating on controlled objects, and
abstracts the details of how the ledger works and scales. In this
section, we ﬁrst describe data model of Chainspace, followed
by an overview of the system design, its threat model and
security properties.
A. Data Model: Objects, Contracts, Transactions.
Chainspace applies aggressively the end-to-end princi-
ple [SRC84] in relying on untrusted end-user applications to
build transactions to be checked and executed. We describe
below key concepts within the Chainspace data model, that
developers need to grasp to use the system.
Objects are atoms that hold state in the Chainspace system.
We usually refer to an object through the letter o, and a set of
objects as o ∈ O. All objects have a cryptographically derived
unique identiﬁer used to unambiguously refer to the object, that
we denote id(o). Objects also have a type, denoted as type(o),
that determines the unique identiﬁer of the smart contract that
deﬁnes them, and a type name. In Chainspace object state is
immutable. Objects may be in two meta-states, either active or
inactive. Active objects are available to be operated on through
smart contract procedures, while inactive ones are retained for
the purposes of audit only.
Contracts are special types of objects, that contain exe-
cutable information on how other objects of types deﬁned by
the contract may be manipulated. They deﬁne a set of initial
objects that are created when the contract is ﬁrst created within
Chainspace. A contract c deﬁnes a namespace within which
types (denoted as types(c)) and a checker v for procedures
(denoted as proc(c)) are deﬁned.
A procedure, p, deﬁnes the logic by which a number of
objects, that may be inputs or references, are processed by some
logic and local parameters and local return values (denoted
as lpar and lret), to generate a number of object outputs.
Notionally, input objects, denoted as a vector (cid:126)w, represent
state that is invalidated by the procedure; references, denoted
as (cid:126)r represent state that is only read; and outputs are objects, or
(cid:126)x are created by the procedure. Some of the local parameters
or local returns may be secrets, and require conﬁdentiality. We
denote those as spar and sret respectively.
We denote the execution of such a procedure as:
c.p( (cid:126)w, (cid:126)r, lpar, spar) → (cid:126)x, lret, sret
(1)
for (cid:126)w, (cid:126)r, (cid:126)x ∈ O and p ∈ proc(c). We restrict the type of
all objects (inputs (cid:126)w, outputs (cid:126)x and references (cid:126)r) to have
types deﬁned by the same contract c as the procedure p
(formally: ∀o ∈ (cid:126)w∪(cid:126)x∪(cid:126)r.type(o) ∈ types(c)). However, public
locals (both lpar and lret) may refer to objects that are from
different contracts through their identiﬁers. We further require
a procedure that outputs an non empty set of objects (cid:126)x, to
also take as parameters a non-empty set of input objects (cid:126)w.
Transactions that create no outputs are allowed to just take
locals and references (cid:126)r.
c.v(p, (cid:126)w, (cid:126)r, lpar, (cid:126)x, lret, dep) → {true, false}
Associated with each smart contract c, we deﬁne a checker
denoted as v. Those checkers are pure functions (ie. determin-
istic, and have no side-effects), and return a Boolean value. A
checker v is deﬁned by a contract, and takes as parameters a
procedure p, as well as inputs, outputs, references and locals.
(2)
Note that checkers do not take any secret local parameters
(spar or sret). A checker for a smart contract returns true only
if there exist some secret parameters spar or sret, such that
an execution of the contract procedure p, with the parameters
passed to the checker alongside spar or sret, is possible as
deﬁned in Equation (1). The variable dep represent the context
in which the procedure is called: namely information about
other procedure executions. This supports composition, as we
discuss in detail in the next section.
We note that procedures, unlike checkers, do not have to
be pure functions, and may be randomized, keep state or have
side effects. A smart contract deﬁnes explicitly the checker c.v,
but does not have to deﬁne procedures per se. The Chainspace
system is oblivious to procedures, and relies merely on checkers.
Yet, applications may use procedures to create valid transactions.
The distinction between procedures and checkers—that do not
take secrets—is key to implementing privacy-friendly contracts.
Transactions represent the atomic application of one or
more valid procedures to active input objects, and possibly
some referenced objects, to create a number of new active
output objects. The design of Chainspace is user-centric, in
that a user client executes all the computations necessary to
determine the outputs of one or more procedures forming a
transaction, and provides enough evidence to the system to
check the validity of the execution and the new objects.
Once a transaction is accepted in the system it ‘consumes’
the input objects, that become inactive, and brings to life all new
output objects that start their life by being active. References
on the other hand must be active for the transaction to succeed,
and remain active once a transaction has been successfully
committed.
An client packages enough information about the execution
of those procedures to allow Chainspace to safely serialize its
execution, and atomically commit it only if all transactions are
valid according to relevant smart contract checkers.
B. System Design, Threat Model and Security Properties
We provide an overview of the system design, illustrated in
Figure 1. Chainspace is comprised of a network of infrastructure
nodes that manage valid objects, and ensure that only valid
transactions are committed. A key design goal is to achieve
scalability in terms of high transaction throughput and low
latency. To this end, nodes are organized into shards that manage
the state of objects, keep track of their validity, and record
transactions aborted or committed. Within each shard all honest
nodes ensure they consistently agree whether to accept or reject
a transaction: whether an object is active or inactive at any point,
and whether traces from contracts they know check. Across
shards, nodes must ensure that transactions are committed if
all shards are willing to commit the transaction, and rejected
(or aborted) if any shards decide to abort the transaction—due
to checkers returning false or objects being inactive. To satisfy
2
valid non-conﬂicting transactions will be executed
within the system. This includes resolving conﬂicts—in
terms of multiple transactions using the same objects—
ensuring the validity of the transactions, and also
making sure that all new objects are registered as active.
Ultimately, Chainspace transactions are accepted, and
the set of active objects changes, as if executed
sequentially—however, unlike other systems such as
Ethereum [Woo14], this is merely an abstraction and
high levels of concurrency are supported.
Encapsulation. The smart contract checking system
of Chainspace enforces strict isolation between smart
contracts and their state—thus prohibiting one smart
contract from directly interfering with objects from
other contracts. Under both the HS and DS threat
models. However, cross-contract calls are supported
but mediated by well deﬁned interfaces providing
encapsulation.
Non-repudiation. In case conﬂicting or otherwise
invalid transactions were to be accepted in honest
shards (in the case of the DS threat model), then
evidence exists to pinpoint the parties or shards in the
system that allowed the inconsistency to occur. Thus,
failures outside the HS threat model, are detectable; the
guildy parties may be banned; and appropriate off-line
recovery mechanisms could be deployed.
•
•
III. THE CHAINSPACE APPLICATION INTERFACE
Smart Contract developers in Chainspace register a smart
contract c into the distributed system managing Chainspace,
by deﬁning a checker for the contract and some initial objects.
Users may then submit transactions to operate on those objects
in ways allowed by the checkers. Transactions represent the
execution of one or more procedures from one or more smart
contracts. It is necessary for all inputs to all procedures within
the transaction to be active for a transaction to be executed
and produce any output objects.
Transactions are atomic: either all their procedures run, and
produce outputs, or none of them do. Transactions are also
consistent: in case two transactions are submitted to the system