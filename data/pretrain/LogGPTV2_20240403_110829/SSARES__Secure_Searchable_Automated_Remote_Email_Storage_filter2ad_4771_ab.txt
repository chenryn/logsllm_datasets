be calculated using this formula.
(1 − (1 − 1/m)))kn)k
where n is the number of records, or words, that are cur-
rently represented in the index.
3 SSARES Design
SSARES contains three major components that imple-
ment the storage protection and searching capabilities men-
tioned in Section 1. The ﬁrst two components handle the
encryption of newly arrived email as well as providing the
server-side mechanisms for searching the email archive.
The third component operates on the client side and han-
dles the composition and issuance of search requests to the
server.
The ﬁrst component, SSARES Email Production, em-
ploys RSA-style public key encryption to completely en-
crypt incoming email, and also extracts keywords from the
email to be encrypted using the PEKS public key. The re-
sult of the PEKS encryption is a secure searchable form of
each keyword, a “peks”, that can only be searched by the
client using their PEKS private key. Each keyword’s asso-
ciated peks is then appended to the completely encrypted
email in the form of a list, a “peks-list.” The output form of
the email, called an SSARES Email, is an encapsulation of
the completely encrypted original email and the peks-list in
a new email construct with a unique id associated with it.
The SSARES Email is then stored in a SSARES Mailbox to
be referenced for searches. The original email is removed
from the system and can no longer be accessed except by
the client using their RSA-style private key.
The client-side component, SSARES Query Production,
enables the user to create a “trapdoor,” an encrypted form of
a keyword that uses the PEKS private key. A trapdoor and
a peks can be securely compared to determine if there are
a match without revealing the underlying keyword. Each
trapdoor created represents one keyword the user wishes to
search for. The output of SSARES Query Production is a
SSARES Query, which is simply a list of trapdoors, and is
then sent to the server to be used in searching.
The last component, SSARES Search, runs on the server
side. Using the client’s search request, the SSARES Query,
and the client’s SSARES Mailbox, SSARES Search per-
forms PEKS testing, a comparison of the trapdoors in the
query to the peks list of each SSARES email in the mail-
box. All resulting matches are returned to the client, and
decrypted on the client side. Using PEKS, the server (or an
adversary that controls it) does not learn what the matched
keyword was. Figure 1(a) provides a visual representation
of how information, keys, and requests are distributed be-
tween client and server in the SSARES system.
(a) Diagram of SSARES System and Client, Server Interaction.
(b) Diagram of SSARES Email
and Search Query.
Figure 1. SSARES Design Diagrams
Even a small mailbox with 100 emails, containing 400
132132
keywords each, could require up to 40,000 peks to test on
each search, which would create signiﬁcant delays. To al-
leviate this overhead, we introduce a Bloom Filter with an
adjustable amount of error built in (we call this construct an
“error-prone ﬁlter”). More precisely, an error-prone ﬁlter
is a Bloom Filter with a high false-positive rate (25%) so
that it becomes difﬁcult to retrieve accurate results when an
attacker initiates a dictionary attack. Each SSARES email
produced has an associated error-prone ﬁlter and a peks-
list. The SSARES query has a list of error-less Bloom Fil-
ters, query ﬁlters, as well as the list of trapdoors. SSARES
Search ﬁrst checks each query ﬁlter against the error-prone
ﬁlter, and it eliminates 75% of the messages on average
(only if a match occurs are the trapdoors and peks-list used).
This approach allows SSARES to quickly ignore messages
unrelated to the user’s query. A visual description of the
resulting SSARES Query and Email is available in Fig-
ure 1(b).
A number of optimizations are meant to make SSARES
more practical in terms of search speeds. For example, us-
ing multiple peks-list per message, one for each message
part (To, From, Subject, etc.), allows more precise search-
ing by reducing the total number of peks to test. Also, we
use a technique we refer to as Alpha-Sorting, where each
peks has the ﬁrst character of the unencrypted keyword left
in the clear to be matched before testing an individual peks.
A SSARES Query would not only have a query-ﬁlter but
also the appropriate peks-list to test and the Alpha-Sorting
technique per keyword the user wishes to search for.
3.1 SSARES Component Design
We next examine SSARES’s key distribution and the de-
tails of what happens when the server receives new mail
(SSARES Email Production), when the user requests a
search (SSARES Query Production), and ﬁnally when the
server searches the email (SSARES Search).
Key Distribution The server has three sets of regis-
tered keys with the user. The ﬁrst is a standard RSA public
key, the second is the PEKS public key, and the third is
the Weil Pairing that is needed to perform PEKS operation.
The user’s keeps locally on their machine an RSA private
key and the PEKS private key.
SSARES Email Production When the server receives
email, it must convert it into a SSARES Email as discussed
above. This process takes place in two phases. The ﬁrst
phase parses the email for keywords. The parsing choices
made by SSARES are discussed in Section 4.1. The sec-
ond phase completely encrypts the message (headers, body,
and attachments), creates the error-prone ﬁlter, and gener-
ates the peks-lists, one per message part. It is during the sec-
ond phase that Alpha-Sorting techniques are implemented.
The completed SSARES Email format encapsulates the en-
crypted email as its body and the error-prone ﬁlter and peks-
lists as attachments. SSARES synthesizes headers; the only
meaningful headers are a unique message identiﬁer and the
date. The SSARES email is now ready for storage, and is
placed in the SSARES mailbox. After these two phases ﬁn-
ish, SSARES discards both the original unencrypted email
and the unencrypted keyword list, securely deleting them
from both memory and disk.
SSARES Query Production
To assist the user in
searching their email, the client-side search component cre-
ates a query ﬁlter and a trapdoor per keyword the client
wishes to search for. The client also speciﬁes which mes-
sage part to search in for each keyword. Query Produc-
tion then creates the trapdoor using the PEKS private key
and the query-ﬁlters. The resulting SSARES Query is then
sent to the server-side search component, which performs
the actual search. If the user wishes to search for multiple
keywords, a query ﬁlter and a trapdoor is produced per re-
quested keyword and the Alpha-Sorting technique is used
as well. In this case, the SSARES Query contains a query
ﬁlter list and a trapdoor list with Alpha-Sorting. SSARES
does not inject error into the query ﬁlters because doing so
would most probably cause the server-side error-prone ﬁl-
ters to not match the query. The potentially matching email
would then be erroneously ignored.
However, refraining from injecting error into query ﬁl-
ters offers an attacker the best opportunity to perform a dic-
tionary attack. If the attacker were able to successfully de-
duce the keyword used to create the ﬁlter, he can perform
a search and gain information about the encrypted email.
The worst case scenario occurs when a user searches for
one keyword. One ﬁlter and one trapdoor are produced, and
the attacker knows that the results of the dictionary attack
relates to this given trapdoor. Due to a random coefﬁcient
in the trapdoor encryption procedure, however, the attacker
cannot match the broken trapdoor to later trapdoor requests.
With multiple keyword searches, the attacker would not be
able to match a query ﬁlter to a speciﬁc trapdoor, but the
attacker can still replay a search and determine which mes-
sages (including more recently received ones) match the
SSARES Query.
SSARES Search The server receives the SSARES
query, performs a search of the SSARES mailbox, and re-
turns matching messages to the client. For each message in
the mailbox, the server ﬁrst checks to see if any of the query
ﬁlters matches the error-prone ﬁlter. On the ﬁrst match of
a query ﬁlter, the server next performs PEKS testing on the
appropriate peks-list matching the message part speciﬁed in
the query. Before each individual peks is tested, SSARES
Search ﬁrst checks the Alpha-Sorting component, and only
if there is a match does the search component test the peks
against the trapdoor. On the ﬁrst match of any of the trap-
doors, the email’s unique ID is added to return list. If none
of the trapdoors match any of the peks in the peks-list, then
the SSARES query does not match this email, and the algo-
rithm moves onto the next email in the SSARES mailbox. If
none of the query ﬁlters matched the error-prone ﬁlter, then
there is no need to perform the PEKS testing, and the algo-
rithm moves on to the next email. Once there are no more
emails to test in the SSARES mailbox, the server returns the
list of matched email’s unique IDs to the user.
Search speed depends on how many PEKS-encrypted
keywords must be tested, since this operation is the most
time-consuming. However, using the error-prone ﬁlter
has the potential to eliminate 75% of the messages, and
SSARES would only have to perform PEKS testing on 25%
of the messages (at most). This reduction does not im-
ply, however, that the search only tests 25% of the PEKS-
encrypted keywords on a search. Each email will have a
varied amount of keywords, and it could be the case that the
25% of email messages that do need to be checked consists
of a much larger percentage of the total PEKS-encrypted
keywords. To help combat this we implemented Alpha-
Sorting, but as will be shown, Alpha-Sorting alone does not
completely solve this problem.
4 Implementation
The SSARES implementation proceeded in two stages.
The ﬁrst stage focused on the construction of
two
command-line applications written in C. These applica-
tions perform PEKS operations and the Bloom Filter cre-
ation and testing. These applications provide a core library
that is invoked by the Python wrapper scripts written dur-
ing the second stage of development. The wrapper scripts
supervise email handling and parsing, provide input to the
command-line applications, construct the SSARES format-
ted emails and queries, and execute the search.
The PEKS application leverages the Stanford PBC li-
brary [12], a C package implementing various Identity
Based Encryption algorithms. Our PEKS application uses
the bilinear map function, which is the heart of the PEKS
encryption process. Using the PBC library, we created an
extension that performs PEKS operations (we refer to this
component as the PEKS library in the remainder of the pa-
per). It uses /dev/urandom for randomness, and SHA1
for hash operations (although we intend to use SHA256 in
the future). Our user-level application exposes the basic op-
erations of the PEKS library (key generation, trapdoor gen-
eration, PEKS generation, and PEKS testing).
We also developed a new Bloom Filter library. We chose
reasonable defaults for the conﬁguration settings exposed
by the library. The length of the ﬁlters is 200 bytes (1600
bits) and use 5 hash functions. The hashes are obtained
using SHA1SUM. We split the 20-byte digest into 5 parts.
Each 4-byte segment is interpreted as an unsigned integer
133133
modulo 1600 to get the desired range. The minimum er-
ror building was chosen to be 25%, as we already men-
tioned. The library accomplishes error building by adding
extra “words” to the Bloom Filter. A random word is gener-
ated by reading from /dev/urandom. After this noise is
added to the ﬁlter, the library computes the error using the
formula in Section 2.2. Once the ﬁlter error has reached or
surpassed the minimum error level, the algorithm halts.
We used this library to provide the core of our second
command-line application. This application works in three
stages: generate ﬁlter, generate query, and test. Generating
a ﬁlter requires a list of keywords as input, and outputs an
error-prone ﬁlter (for the minimum false-positive rate speci-
ﬁed). No error is built in when creating a query. Instead, the
application processes a list of keywords and outputs a sepa-
rate query ﬁlter per keyword. When testing, the application
receives a list of query ﬁlters and an error-prone ﬁlter. Upon
the ﬁrst match of any of the query ﬁlters, it returns and re-
ports a match. If all the query ﬁlters do not match, then the
application returns and reports no match.
4.1 SSARES Email and Query Production
With the Bloom Filter and PEKS applications serv-
ing as a foundation, we developed wrapper scripts in
Python. The scripts are designed to handle email and
command line input to the application. The ﬁrst script,
SSARES email parse.py, transforms a new email into
a SSARES email as described in Section 3. The script ex-
ecutes on the server and makes use of the RSA and PEKS
public keys. The script ﬁrst parses the email for keywords.
Keywords are taken from the To:, From:, Date:, and
Subject: headers. All words from the body of the
email are considered keywords, except for common words
of three letters or less. Attachment names are also consid-
ered keywords. Keywords are organized into ﬁelds depend-
ing on their position in the email, namely the section from
which they were extracted. A separate peks-list is created
for each ﬁeld. Doing so enables more speciﬁc searching and
can potentially reduce the number of PEKS testing needed
to complete a search.
It is also at this phase that Alpha-Sorting is implemented.
Within each peks-list, each individual PEKS will have the
ﬁrst letter of the unencrypted keyword exposed, so that dur-
ing testing, if the unencrypted letter does not match the cor-
responding letter provided in the query, there is no need to
perform the PEKS test. This must be done at this point in
the procedure because the original email and the keyword
lists are then purged from the system.
Only one error-prone ﬁlter is created per message, and it
contains the hashes of all the keywords in the message re-
gardless of their ﬁeld. This organization allows SSARES to
eliminate a message from a search with only one test of the
Bloom Filter. In contrast, if each ﬁeld has an error-prone
ﬁlter, the probability of having to perform PEKS testing in-
creases with each additional ﬁlter test. For example, with
four Bloom Filters to test per message (each having a min-
imum error of 25%) every message would on average have
at least one ﬁlter that matched, and thus at least one of the
attached peks-list would need to be tested. We avoid this