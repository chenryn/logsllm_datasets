200
400
600
800
1000
1200
1400
0
200
400
600
800
1000
1200
1400
1600
1800
Number of arrivals
Frequency (in hours)
Binwidth = 20
2000
4000
6000
8000
10000
12000
14000
16000
0
10
20
30
40
50
60
70
80
Number of arrivals
Frequency (in days)
Binwidth = 500
Figure 3: Frequency analysis of inputs
7
0
100
200
300
400
500
600
0
5000
10000
15000
0
2
4
6
8
10
12
arrivals
3D plot for Recipient Anonimity per round
delay
Recipient Anonimity
0
100
200
300
400
500
600
0
5000
10000
15000
0
2
4
6
8
10
12
arrivals
3D plot for Sender Anonimity per round
delay
Sender Anonimity
Figure 4: Recipient (left) and sender (right) anonymity for Mixmaster
5.2
Analysis of Mixmaster
We have simulated a Mixmaster node as explained in Section 4. Mixmaster is
a pool mix and processes messages in batches. The recipient anonymity of all
inputs of a round is the same. Equivalently, all outputs of a round have the
same sender anonymity value. In this section we show the results obtained in
our simulation.
In ﬁgure 4 we draw a point per round2, located in the space deﬁned by the
delay (amount of time the message spends on the mix), arrivals (number of
inputs received by the mix together with the message) and recipient anonymity
of the message. Figure 4 shows the same for sender anonymity.
The ﬁrst conclusion we come to when observing the ﬁgures is that there is a
lower bound to the anonymity of Mixmaster. It is worth noting that, so far, we
do not know any theoretical analysis of pool mixes able to predict the anonymity
it provides, and prior to this analysis there were no ﬁgures on the anonymity
that Mixmaster was actually providing. With this simulation, we can clearly
see that Mixmaster guarantees a minimum sender and recipient anonymity of
about 7. This means that the sender (recipient) of a message gets a minimum
anonymity equivalent to perfect indistinguishability among 27 = 128 senders
(recipients).
We can see that the minimum anonymity is provided when the traﬃc (ar-
rivals) is low.
As the traﬃc increases, anonymity increases, getting maxi-
mum values of about 10 (i.e., equivalent to perfect indistinguishability among
210 = 1024) senders or recipients. We also observe that the delay of the mes-
sages doesn’t take hight values, unless the traﬃc load getting to the mix is very
low.
In order to study the behaviour of the mix under diﬀerent traﬃc loads, we
have plotted values of delay and anonymity obtained in the simulation for the
2In pool mixes all messages of the same incoming round have the same recipient anonymity,
and all the messages of the same outgoing round have the same sender anonymity
8
0
0
50
100
150
200
250
300
350
400
450
500
Mixmaster: Delay values for rounds with low, medium and high traffic
Low Traffic
minutes of delay
0
0
50
100
150
200
250
300
350
400
450
500
Medium Traffic
0
0
50
100
150
200
250
300
350
400
450
500
High Traffic
Figure 5: Delay values for Mixmaster
rounds with few arrivals (low traﬃc), intermediate number of arrivals (medium
traﬃc) and many arrivals (high traﬃc).
We have selected the low, medium and high traﬃc taking into account the
data statistics of the arrival process:
Low traﬃc: all rounds where the number of arrivals was between the ﬁrst
and third quantile; hence 50 percent of the rounds are denoted as normal
traﬃc.
Medium traﬃc: all rounds where the number of arrivals was greater than the
third quantile but lower than the outlier bound.
High traﬃc: all rounds with outlier values for the incoming messages.
In ﬁgure 5 we show the minutes of delay of every message.
We can see
that the delay only takes high values when the traﬃc is low. The fact that
some messages appear as having a delay close to zero in the low traﬃc ﬁgure
is due to the fact that we have more samples, so there are messages that arrive
just before the ﬂushing and are forwarded immediately. In ﬁgure 6 we show
the recipient anonymity of every message (the sender anonymity presents very
similar characteristics). We can see that as the traﬃc increases, the anonymity
provided to the messages takes higher values.
5.3
Analysis of Reliable
The theoretical method proposed in [KEB98] that gives a probabilistic pre-
diction on the anonymity provided by Reliable is based on the assumption of
Poisson traﬃc. As we have seen, this assumption is deﬁnitely not correct for
mix traﬃc.
We have simulated a Reliable mix as explained in Section 4. Reliable is
a continuous (stop-and-go) mix. Reliable treats every message independently:
9
0
7
7.5
8
8.5
9
9.5
10
10.5
Low Traffic
Sender Anonymity
0
7
7.5
8
8.5
9
9.5
10
10.5
Medium Traffic
0
7
7.5
8
8.5
9
9.5
10
10.5
High Traffic
Figure 6: Anonymity values for Mixmaster
Figure 7: Correlation Delay-Anonymity for Reliable
when it gets a message it delays it a pre-determined amount of time (picked
from an exponential distribution) and then forwards it. We represent a star,
’*’, per message.
In ﬁgure 7 we present the sender and recipient anonymity provided by Re-
liable for the real stream of inputs we have considered. We can see that the
anonymity takes minimum values close to zero, which means that some of the
messages can be trivially traced by a passive attacker. The maximum values
of Reliable’s anonymity for this input are lower than Mixmaster’s maximums.
Figure 8 shows the correlation of sender and recipient anonymity. These values
are highly correlated (as in the case of Mixmaster). We can clearly see that
some of the messages get nearly no anonymity.
Figure 8: Correlation Sender-Recipient Anonymity for Reliable
10
5.4
Mixmaster vs. Reliable
As we have shown in the previous two sections, Mixmaster and Reliable have
very diﬀerent behaviours for the same traﬃc stream. Note that we have modiﬁed
the default (1 hour) mean delay of Reliable in order to make a fair comparison
between the two mixes (so the average delay of all messages is the same for the
two mixes).
Mixmaster priorizes the anonymity over the delay, and it provides a mini-
mum recipient (sender) anonymity of around 7, equivalent to perfect indistin-
guisability among 27 = 128 input (output) messages. When the traﬃc load
decreases, Mixmaster provides a larger latency in order to keep the anonymity
in high levels.
Reliable delays messages according to an exponential distribution, regardless
of the traﬃc load. This has an eﬀect in the anonymity, that will only have high
values when there is a high traﬃc load. When the traﬃc load decreases, the
anonymity provided by Reliable goes down to very low values. In some cases of
very low load, Reliable does not provide anonymity at all.
Our conclusion is that a continuous mix like Reliable is not appropriate to
provide anonymous services for applications that do not have real-time require-
ments (like email). A pool mix like Mixmaster should be used instead.
Continuous mixes like Reliable may be useful for real-time applications with
tight delay constraints (like web browsing). Nevertheless, in order to provide
acceptable levels of anonymity, the traﬃc load should be kept high.
6
Other factors which inﬂuence anonymity
We have evaluated the anonymity strength of the mixing algorithms imple-
mented in Mixmaster and Reliable. Additional factors have a direct impact on
the anonymity provided by the system. Concerns such as the security of the
underlying operating system, host server integrity, proper implementation of
the cryptographic functions provided by the remailer software, and likelihood of
administration mistakes all contribute to the overall anonymity these software
packages can provide. We assume that no active attacks against the software
occurred during the development or compilation process, though additional con-
cerns are present in that area [Tho84].
This paper does not aim to be an in-depth analysis of the full spectrum of
host-attacks against remailer nodes, Nevertheless, it is important to mention
some signiﬁcant diﬀerences between Reliable and Mixmaster which may aﬀect
their ability to provide adequate anonymity for their users.
6.1
Host server integrity
The security of an operating mix is dependent on the security of the underlying
host server. Many factors can impact the underlying system’s security. Some
considerations include shared access to the system by untrusted users, access
11
to key material on disk or in memory, and the ability to insert shims to attack
dynamically loaded libraries called by the remailer software.
Reliable is limited to operation on the Windows platform. Mixmaster is
portable, and has been known to run on a wide variety of operating systems.3
Host server security is ultimately the responsibility of the remailer operator.
6.2
UI Issues
In privacy application client, an intuitive user interface is essential in order to
ensure that the software is used consistently and correctly [Sas02]. A greater
level of skill can safely be assumed when designing privacy software which is
intended to be operated as a service, however. Most anonymity systems, in-
cluding mix-net implementations, do imply a signiﬁcant degree of complexity.
Due to the fact that the operation of a public Internet service involves the cor-
rect conﬁguration and maintenance of the host server, this necessary complexity
is acceptable as long as the operator’s skill level is suﬃcient. The level of skill
required to properly install, conﬁgure, and operate a mix-net node should not
exceed that required to properly install, conﬁgure, and operate the server itself.
The software packages we evaluated diﬀered with regard to their interface
complexity in a number of areas.
In general, Reliable has a greater ”ease of use” factor with respect to its
interface. Mixmaster automates many important tasks, such as adaptive dummy
generation, key rotation and key expiration announcement, and integrates more
easily with the host MTA 4. Reliable’s installation process is easier, but its build
process requires the use of third-party commercial applications and assumes
experience with Windows development, so most users will install a pre-compiled
binary. Compilation of Mixmaster is performed through a simple shell script.
At ﬁrst glance, it appears that Reliable will be easier for hobbyists to op-
erate than Mixmaster. However, Mixmaster’s diﬃculty does not rise above the
diﬃculty of maintaining a secure Internet-connected server, and thus has little
eﬀect on the overall security of a mix node deployment. Hobbyists unable to
maintain Mixmaster are equally unlikely to be able to secure their host server.
6.3
Programming language
While the most critical factor in the creation of secure code is the manner in
which it is written, some languages lend themselves to greater risk of exploitable
mistakes.
An inexperienced or unskilled programmer will always be able to
make an application insecure.
The choice of programming language merely
sets the bar for the required level of experience and ability necessary to develop
applications in that language safely. Thus, when evaluating the likelihood of the
3There have been instances of remailers based on the Mixmaster 3.0 codebase operating
on SunOS, Solaris, SunOS, AIX, Irix, BeOS, MacOS X, Windows NT (natively and through
the use of Cygwin), Windows 2000 (natively and through the use of Cygwin), Windows XP
(through the use of Cygwin), FreeBSD, NetBSD, OpenBSD, and multiple versions of Linux.
4Mail Transport Agent, e.g. sendmail or postﬁx
12
existence of exploitable code in an application, it is worthwhile to consider the