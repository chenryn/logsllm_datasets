### Introduction and Context

Several applications containing XLDH (Cross-Library Data Harvesting) libraries have been published on Google Play, indicating that these libraries have bypassed the app vetting processes of both Google Play and SDK vendors such as Facebook and Twitter. This suggests that XLDH represents a new and previously underappreciated threat. To evaluate the effectiveness of existing detection techniques, we used VirusTotal, which aggregates over 70 antivirus products, to scan all identified XLDH libraries. Surprisingly, none of the antivirus products in VirusTotal could detect any of the XLDH libraries, despite its known capability to detect harmful libraries from previous studies [50, 60, 64, 75].

### Technical Analysis

More than half of the XLDH libraries we discovered utilized Java reflection to call the target SDK, leveraging a generic Java function to implicitly invoke the target SDK API. Unlike regular Java code, which requires importing the target class (e.g., `import com.facebook.AccessToken`), the malicious library does not need to explicitly import the target class, making the cross-library interaction more evasive.

### Hidden Data Exfiltration Channels

In our analysis, we observed several techniques employed by XLDH libraries to make data-harvesting behaviors harder to detect:

1. **Dynamic Exfiltration Endpoints**:
   - Some XLDH libraries, such as `com:mobiburn`, fetch a remote configuration file at runtime. This file specifies the endpoint (a URL) to which data should be exfiltrated and the timing of the exfiltration. This dynamic approach helps evade domain blocklists and static vetting, as the server endpoint is not hardcoded. Additionally, a controlled exfiltration schedule allows adversaries to avoid detection during vetting periods.

2. **Data Exfiltration in Crash Reports**:
   - Another technique involves embedding exfiltrated data in crash reports. For example, the XLDH library `com:kongregate` appends harvested Facebook session tokens to its crash reports, which are then sent to the Internet.

3. **Data Encryption**:
   - We observed that some XLDH libraries, such as `com:mobiburn` and `com:umeng`, encrypt the data before sending it to the Internet. Specifically, `com:mobiburn` uses RSA encryption, while `com:umeng` uses AES. This encryption can render network-based privacy detection less effective, as tools like mitmproxy, which decrypt HTTPS traffic for inspection, may not be able to detect the encrypted data.

### Backend Server Endpoints

Our study uncovered a series of backend servers associated with XLDH libraries (see Table 10 in the Appendix). Using VirusTotal, we scanned all the backend server URLs, but none were flagged as malicious. While XLDH libraries typically exfiltrate data to their own domains, they also leverage reputable domains to receive data. For instance, `com:kongregate` appends data into its crash reports, which are then sent to Googleâ€™s Crashlytics, a platform for collecting crash information and analyzing stability issues. Similarly, `com:adience` sends data to a free web hosting service, `frwrd:me`.

### Distribution Channels

To understand the distribution channels of XLDH libraries, we analyzed their websites, news reports, and the code and harvested data of the libraries. The key distribution channels include:

1. **Pre-installed Libraries**:
   - XLDH libraries are often pre-installed in apps generated by free app-building services (e.g., AppsGeyser, Duksel). For example, 18% of the affected apps using `com:devtodev` were generated by Duksel, whose apps follow a similar package name pattern, such as `com:duksel:(nW*nw*)*free`.

2. **Embedding in Other Libraries/Services**:
   - XLDH libraries are also integrated into other popular libraries or services. For instance, AppsGeyser, a major free Android app builder, integrates XLDH libraries into the apps it creates. We found that `com:appsgeyser` appears 34% and 29% of the time with `com:onaudience` and `com:yandex`, respectively. This integration exposes users to the risk of exposing Facebook, Twitter, Google Advertising IDs, and device IDs.

3. **Offering App Monetization**:
   - XLDH vendors offer monetary incentives to app developers to integrate their libraries. For example, OneAudience offers $0.03 per app installation, and Mobiburn offers $0.015 per app installation. Some of these libraries, such as `com:oneaudience` and `com:mobiburn`, do not provide any additional functionalities to the apps except for data harvesting.

4. **Offering Appealing Functionalities**:
   - Some XLDH libraries, such as `com:sharesdk` and `com:umeng.socialize`, offer useful functionalities to app developers, including social media integration, analytics, crash reporting, push notifications, and in-app purchases. However, these libraries also perform XLDH activities behind the scenes.

### Discussion

#### Impacts on Privacy Regulations

Our study complements recent research on privacy compliance. Previous studies have assessed whether an app's data practices (e.g., data collection and sharing with third parties) are consistent with its privacy policy. These studies generally suggest that app vendors are at fault for not properly disclosing data sharing with third parties, leading to regulatory actions. Our work shows that app vendors can also be victims, as in-app data flows to malicious third parties via XLDH can be opaque. This has serious implications for privacy compliance regulations, and tools like XFinder can help both regulators and app vendors inspect in-app data practices.

#### Responsible Disclosure

We have reported the affected apps and XLDH libraries to app vendors and app stores (e.g., Facebook, Twitter, Google Play) since October 2019. Google has removed the affected apps from the Google Play Store or asked app owners to remove the libraries. Facebook and Twitter have taken legal action against the XLDH library providers.

#### Future Work

As discussed in Section 4, the automatic and sound detection of XLDH libraries is limited by current techniques for document analysis (Terms of Service, privacy policies) and program analysis (e.g., tracking complicated data flows, resolving reflection call targets). Reflection-based calls, widely used in XLDH activities, are more stealthy and difficult to detect than conventional calls. Improving the capability to resolve reflection calls will contribute to better detection and understanding of XLDH activities. Additionally, while this study focused on Android, XLDH is also feasible on iOS, which we plan to study in future work. We made a preliminary attempt by examining the iOS version of OneAudience and found similar XLDH behavior. We communicated these risks to Apple, who worked with us to analyze the iOS counterparts of the XLDH libraries and asked affected apps to remove the malicious libraries.

### Related Work

#### Study on Malicious Mobile SDKs

Previous studies have extensively explored the risks of malicious mobile SDKs, showing that they can collect sensitive user data, leading to significant privacy leaks. These studies have used both static and dynamic program analysis to measure the extent of the problem. The sensitive data studied include on-device data (e.g., IMEI, phone number, GPS coordinates) and user profiles (e.g., age, gender, preferences) from app servers. Prior research has proposed various fine-grained mechanisms to isolate third-party SDKs, but these mitigations are difficult to fully adopt due to deployment limitations. Recent studies have also examined malicious SDKs involved in ad-fraud schemes. Our study sheds light on a new type of privacy harvesting channel, XLDH, which is significantly different from previous studies in terms of the diversity of private data and the complexity of determining data sharing policies specific to individual SDKs. Our measurement covers 1.3 million apps, providing the most comprehensive understanding of the problem to date.

#### Text Analysis for Mobile Privacy

Our approach for identifying privacy non-compliance between cross-library invocations through their documentation (Terms of Service) follows a history of proposed text analysis techniques using NLP and machine learning. Topics within this range include identifying sensitive data items, their desired destinations, policy contradictions, and benign usage contexts. Tools like Whyper, Polisis, Maps, and PolicyLint have provided better understanding of privacy policies and their compliance with mobile app data practices. However, these works focus more on the privacy implications caused by app developers. Our research looks into the privacy compliance among different parties, requiring a more in-depth analysis of a broader range of privacy-related documents and more fine-grained rules.

### Conclusion

In this paper, we report the first systematic research on XLDH libraries targeting third-party SDKs to harvest private user data. Our study demonstrates the significant privacy and social impacts of this new threat and uncovers unique characteristics of XLDH libraries, such as their distribution channels and hidden data exfiltration methods. We discuss the limitations of our current tool and the future research needed for a more in-depth understanding of XLDH activities.

### Acknowledgements

Jice Wang, Jinwei Dong, and Yuqing Zhang are supported by the National Natural Science Foundation of China (U1836210) and CSC scholarships. The authors from Indiana University are supported in part by the Indiana University FRSP-SF and NSF grants CNS-1618493, 1801432, and 1838083.

### References

[1] Packet Capture. https://play.google.com/store/apps/details?id=app.greyshirts.sslcapture
[2] Aliyun - Resolve Conflicted UTDIDs. https://help.aliyun.com/knowledge_detail/59152.html
[3] Android App Storage. https://developer.android.com/training/data-storage
[4] Android Application Sandbox. https://source.android.com/security/app-sandbox