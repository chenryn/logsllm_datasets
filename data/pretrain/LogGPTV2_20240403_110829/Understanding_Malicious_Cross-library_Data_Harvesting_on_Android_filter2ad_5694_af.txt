apps were published on Google Play, which means the XLDH
libraries have bypassed the app vetting of the Google Play
and the victim SDK vendors (e.g., Facebook and Twitter, if
app review process exists). The result suggests that XLDH is
a new type of threat not well understood before. To further
assess whether existing techniques can detect XLDH libraries,
we leveraged VirusTotal [38], which aggregates more than 70
antivirus products, to scan all the XLDH libraries we found.
Interestingly, no single product in the VirusTotal can detect
any XLDH libraries we found; in contrast, VirusTotal was
known to be capable of detecting harmful libraries studied
in prior works [50, 60, 64, 75]. More than half of XLDH
libraries we found abused Java reﬂection to call the target
SDK (see Section 2), which leverages a generic Java func-
tion, to implicitly call the target SDK API. Further, unlike
regular code in Java that needs to import the target class (e.g.,
import com.facebook.AccessToken [10]), the malicious
library does not have to explicitly import the target class. This
makes the cross-library intention more evasive. Interestingly,
in our study, we also observe that XLDH libraries strategi-
cally hide the data exﬁltration channel to evade detection, as
elaborated below.
Hidden data exﬁltration channels. We manually analyzed
the decompiled code of XLDH libraries and observed some
other techniques they use, with which the data-harvesting
behaviors are harder to analyze:
(cid:15) Dynamic exﬁltration endpoints. In some XLDH libraries, we
observed the adversaries remotely control the data exﬁltration
process, where the endpoints to receive the data and the time
to exﬁltrate data are conﬁgured to be dynamic. More specif-
ically, at runtime, the XLDH library (e.g., com:mobiburn )
fetches a remote conﬁguration ﬁle, which speciﬁes the end-
point (a URL) that data should be exﬁltrated to, and when to
do so. Such a treatment helps XLDH library evade the do-
main blocklist based blocking, once its server endpoint is on
the blocklist and thereby blocked by local ﬁrewalls, ISP, etc.;
not hard-coding the malicious endpoint can also render static
vetting less effective. Furthermore, a dynamic, controlled ex-
ﬁltration schedule gives the adversaries better control to evade
detection, e.g., no exﬁltration during vetting.
(cid:15) Hidding data exﬁltration in crash reports. Another in-
Figure 8: Number of newly appearing and disappeared XLDH
libraries
Figure 9: XLDH ﬂows, where XLDH libraries (left) fetch
data from victim SDKs (right)
able source of private user data to the XLDH adversaries. In
our study, we observe the adversaries stealthily collect Face-
book token, WeChat token and LinkedIn token, which can
be used to access OSN-speciﬁc semantically-rich data. For
example, we observe com:oneaudience and com:mobiburn
stealthily access Facebook token and further leverage that to-
ken to fetch semantically-rich Facebook data, including Face-
book ID, Gender, Email, Pages likes, Followed groups, etc. In
particular, Facebook data, such as the pages likes, social, po-
4146    30th USENIX Security Symposium
USENIX Association
teresting observation is that XLDH libraries put the exﬁl-
trated data in crash reports. For instance, the XLDH library
com:kongregate appends the harvested Facebook session to-
ken in its crash report, and sends it out to the Internet.
(cid:15) Data encryption. We observed the XLDH libraries
(e.g., com:mobiburn and com:umeng) encrypted the data
before sending to the Internet: particularly, RSA used by
com:mobiburn and AES used by com:umeng for data encryp-
tion. This can render network-based privacy detection less
effective, e.g., [73], which used mitmproxy to decrypt HTTPS
trafﬁc for data leakage inspection.
Backend server endpoints. Our study uncovers a series of
backend servers of the XLDH libraries (see Table 10 in Ap-
pendix). We used VirusTotal to scan all of the backend server
URLs. However, none of them were ﬂagged as malicious. We
observe that while an XLDH library typically exﬁltrates data
to their own domain – which might be blocked by domain
blocklists [31, 36, 38] – XLDH developers also leverage rep-
utable domain to receive data. Speciﬁcally, the XLDH library
com:kongregate appends the data into its crash reports, and
thus, the data was sent to Google’s Crashlytics, a platform that
helps app developers collect crash information and analyze
stability issues [12]. Similarly, com:adience sent their data to
a free web hosting service frwrd:me.
5.4 XLDH Library Distribution Channels
Behind the popularity of XLDH libraries are the promotion
mechanisms that XLDH vendors take to attract app vendors.
To understand their promotion and distribution channels, we
searched the library websites, news reports, and analyzed the
code and harvested data of XLDH libraries, and summarize
their distribution channels as below.
(cid:15) Pre-installed libraries. As mentioned in Section 5.2, we
observe that XLDH libraries were widely pre-installed in
the apps, which were generated by free app building ser-
vices (e.g., appsgeyser [6], duksel [14]). For instance, 18%
of the affected apps of com:devtodev were generated by the
duksel [14], whose apps show similar package name pattern
“com:duksel:(nW*nw*)*free".
(cid:15) Embedding in other libraries/services. Another important
channel to distribute malicious libraries in real-world apps is
to be integrated by other popular libraries or services. As men-
tioned earlier, the vendor of com:appsgeyser, AppsGeyser, is
the biggest free Android app builder on the market [6] who
integrates XLDH libraries in the Android apps it created. In-
terestingly, we found that com:appsgeyser appears 34% and
29% of the time with com:onaudience and com:yandex, re-
spectively. Hence, the users of apps generated by AppsGeyser
face the risks of exposing Facebook and Twitter user data and
Google Advertising IDs and device IDs.
As
another example, we
found the XLDH li-
brary com:mobiburn included another XLDH library
com:onaudience. So any app integrates the former library
could silently include the latter, increasing the chance of
XLDH-library distributions. This was observed in 8 older
versions of com:mobiburn, released from April 11, 2018 to
June 17 2019 (v1.5.3 to v1.9.0). This might come out of the
collaboration relation between the XLDH developers.
(cid:15) Offering app monetization. Another important promo-
tion channel XLDH vendors take is to offer app vendors
monetary incentives to integrate the libraries. For example,
OneAudience offers app vendors 0.03 USD per app installa-
tion; Mobiburn offers 0.015 USD per app installation.
Among those libraries offering app monetization,
com:oneaudience and com:mobiburn do not provide any
functionalities to the apps, except for data harvesting. In-
terestingly, the app vendors may not fully understand the risk
such a library incurs in her app. For example, OneAudience
claims in its privacy policy (dated in February 19, 2019, and
accessed in our study in October, 2019) that it collects the
user’s device ID, operating system type, device make and
model, etc., which are albeit private but commonly consid-
ered acceptable if properly disclosed; however, behind the
scene, it collects a full spectrum of Facebook and Twitter data
via unauthorizedly using AccessToken.
(cid:15) Offering appealing functionalities. Some libraries
(com:sharesdk and com.umeng.socialize) offer app develop-
ers helpful functionalities, although behind the scene per-
forming XLDH. The functionalities they offer include in-
tegration with social media (e.g., single-sign on, posting to
Facebook/Twitter), analytics, crashreports, pushing messages,
in-app purchases, etc.
6 Discussion
Impacts to privacy regulations. Our study complements the
recent understandings to privacy compliance: a thread of re-
cent works [87][44] assessed whether an app’s data practice
(e.g., data collection and sharing with third-party) is con-
sistent with what is disclosed in its privacy policy (a.k.a.,
ﬂow-to-policy consistency analysis). These studies generally
suggested that app vendors are at fault by not properly dis-
closing the data sharing with third-parties (e.g., advertisers,
analytics providers, etc.), and correspondingly, app vendors
have been charged by regulatory agencies (e.g., FTC) [24]. To
complement these studies, our study shows that app vendors
can also be victims, since an in-app data ﬂow to a malicious
third-party by XLDH can be opaque to app vendors. In this re-
gard, our work has serious implications to privacy compliance
regulations; also, XFinder can be used by both regulators and
app vendors to inspect in-app data practice with third-parties.
Responsible disclosure. We have reported the affected apps
and XLDH libraries we found to the app vendors and app
store (e.g., Facebook, Twitter, Google Play store) and helped
them understand the threats since October, 2019. Google has
USENIX Association
30th USENIX Security Symposium    4147
removed the affected apps from the Google Play or asked the
app owners to remove those libraries. Facebook and Twitter
have taken legal actions against the XLDH library providers.
Future work. As discussed in Section 4, an automatic and
sound detection of XLDH libraries in the wild is limited, at
least in part, by today’s techniques for document analysis
(ToS, privacy polices) and program analysis (e.g., tracking
complicated data ﬂows, resolving reﬂection-call targets). Note
that, as we observed, reﬂection-based calls are widely used in
XLDH activities, likely because they are more stealthy and
difﬁcult to detect than conventional calls (developers may
also use reﬂection calls with less/none malicious motivations,
such as maintaining backward compatibility when the target
class may not exist [62]). Hence, better capability to resolve
reﬂection calls in the future may contribute to a more sound
detection of XLDH and more in-depth understanding of the
XLDH activities. Further, although we focused on Android
in this study, XLDH is completely feasible on iOS, which
we plan to study in the future work. We indeed made a pre-
liminary attempt by looking at the iOS version of an XLDH
library OneAudience, and found it has the same XLDH be-
havior as on Android (harvesting data from Facebook and
Twitter SDKs). We communicated XLDH risks to Apple in
late 2019, who worked with us to analyze the iOS counterparts
of XLDH libraries we found on Android and asked affected
apps to remove the malicious libraries.
7 Related Work
Study on malicious mobile SDKs. Prior studies such as ex-
tensively explored the risks of malicious mobile SDKs. In
particular, prior research showed that malicious SDKs could
collect users’ sensitive data from the host apps and mobile de-
vices, leading to serious privacy leakage due to their wide inte-
gration/adoption by popular mobile apps [53, 72, 78, 79, 81].
The problem has been studied through large-scale measure-
ments using both static [69] and dynamic [52, 72, 73] program
analysis. The sensitive data studied include on-device data
(e.g., IMEI, phone number, GPS coordinates), as well as user
proﬁles (e.g., age, gender, preferences) from app server [54,
69]. To mitigate the problems, prior research proposed differ-
ent ﬁne-grained mechanisms to isolate third-party SDKs [59,
76, 82, 83]. Unfortunately, these mitigates are hard to be fully
adopted by current ecosystem due to different deployment
limitations (e.g., requiring app code instrumentation [76, 82]
or human-crafted policies [83]). Recent studies also studied
malicious SDKs involved in the ad-fraud scheme, using tech-
niques like click injection and click ﬂooding [65]. Different
from prior research, our study sheds lights on a new type of pri-
vacy harvesting channel (i.e., the cross-library data harvesting)
which is signiﬁcantly different from prior studies in terms of
the diversity of the private data and complexity of in determin-
ing their data sharing policies (speciﬁc to individual SDKs). In
addition, our measurement covers 1.3M apps for a comprehen-
sive understanding of the problem in the wild, the largest scale
compared to all previous research for privacy leakage study.
Text analysis for mobile privacy. Our approach for identify-
ing privacy in-compliance between cross-library invocations
through their documentations (i.e, Terms-of-service) follows
a history of proposed text analysis over mobile apps, using a
mixed technique of NLP and machine learning. Topics within
this range include identifying sensitive data items [68, 69],
their desired destinations [87], policy contradictions [45] as
well as the the benign usage contexts [44, 51]. In terms of mo-
bile privacy compliance, Whyper [70] is among the ﬁrst to use
NLP techniques for automatically reasoning the permission
usage in mobile apps through text analysis from app descrip-
tions. Later, a thread of recent works [44, 57, 80, 87, 88] pro-
vide better understanding for the privacy policy and its compli-
ance with mobile app’s data practice. Speciﬁcally, Polisis [57]
proposes neural-network based classiﬁers to automatically an-
notating privacy policies with both high-level and ﬁne-grained
labels. Maps [87] performs large-scale measurement analysis
to identify those privacy leakage of mobile apps which are
not disclosed by their privacy policies. PolicyLint [45] inves-
tigates the internal contradictions of a given privacy policy, by
identifying and analyzing the data collection and sharing state-
ments at the sentence-level. However, these works are more
focused on the privacy implications caused by app developers.
Instead, our research look into the privacy compliance among
different parties. This recalls a more in-depth analysis over
a border range of privacy-related documents (i.e, Terms-of-
service of third-party libraries). The sensitive data considered
in our research among cross-library invocations rely on pars-
ing the ToS statement, rather than a pre-deﬁned list, as did in
previous studies [69, 87]. In addition, identify such privacy vi-
olations requires more ﬁne-grained rules (Section 3.2), which
is not addressed by previous research.
8 Conclusion
In our paper, we report the ﬁrst systematic research on XLDH
libraries aiming at third-party SDKs to harvest private user
data, based upon a suite of techniques that addresses the chal-
lenges in analyzing SDK ToSes to recover the semantics of
data sharing policies and evaluating apps to ﬁnd cross-library
interactions. Our study demonstrates the signiﬁcant privacy
and social impacts of this new threat. Our research further un-
covers a series of unique characteristics of the XLDH libraries,
such as their distribution channels, hidden data exﬁltration
channels. We discussed the limitations of our current tool
and the future research that is needed for a more in-depth
understanding of XLDH activities.
4148    30th USENIX Security Symposium
USENIX Association
Acknowledgement
Jice Wang, Jinwei Dong and Yuqing Zhang are supported
by National Natural Science Foundation of China U1836210
and CSC scholarship. The authors of Indiana University are
supported in part by Indiana University FRSP-SF and NSF
CNS-1618493, 1801432 and 1838083.
References
[1] Packet Capture.
details?id=app:greyshirts:sslcapture.
https://play:google:com/store/apps/
[2] Aliyun - resolve conﬂicted utdids.
knowledge_detail/59152:html.
https://help:aliyun:com/
[3] Android app storage. https://developer:android:com/training/
data-storage.
[4] Android application sandbox.
security/app-sandbox.
https://source:android:com/