produce short-distance entangled links, and then connect
them to form longer distance ones [19, 72] via an operation
known as entanglement swapping (see Figure 1). This pro-
cedure can be used iteratively to create entanglement along
long chains, where we remark that the swapping operations
can in principle be performed in parallel. From a resource
perspective, we note that to store entanglement, both nodes
need to store one qubit per entangled link. Proposals for
enabling quantum communication by forward communica-
tion using quantum error correction also exist, which avoid
entanglement swapping [71]. However, these have arguably
much more stringent requirements in terms of hardware,
putting them in a technologically more distant future: they
require the ability to create entangled states consisting of a
large number of photons (only 10 realized today [45]) and
densely placed repeater stations performing near perfect
operations [73].
Producing heralded entanglement does however allow
long-distance quantum communication without the need to
create entanglement consisting of many qubits. Here, the
3
Dahlberg, Skrzypczyk, et al.
details, see [7, 89, 101] and Section 4.4). Qubits can be sent
optically through standard optical fiber using a variety of pos-
sible encodings, such as polarization [10, 67], time-bin [18],
or absence and presence of a photon [22]. Such qubits can be
emitted from the devices in quantum nodes [13, 14, 87], but
in principle also transferred [59, 75, 87] from optical fiber
into the node’s local quantum memory. Present day quantum
memories have very limited lifetimes, making it highly desir-
able to avoid the exchange of additional control information
before the entanglement can be used.
We distinguish two classes of quantum nodes. One, which
we will call a controllable quantum node, offers the possi-
bility to perform controllable quantum operations as well
as storing qubits. Specifically, these nodes enable decision
making, e.g. which nodes to connect by entanglement swap-
ping. Such nodes can act as quantum repeaters and decision
making routers in the network (e.g. NV platform or other
quantum memories combined with auxiliary optics), and —
if they support the execution of gates and measurements —
function as end nodes [101] on which we run applications
(e.g. NV centre in diamond or Ion Traps). Others, which
we call automated quantum nodes, are typically only timing
controlled, i.e. they perform the same preprogrammed ac-
tion in each time step. Such nodes also support quantum
operations and measurements, but only those necessary to
perform their preprogrammed tasks. The latter is still very
useful, for example, to establish entanglement along a chain
of quantum repeaters performing the entanglement swap-
ping operations [19, 72] (see again Figure 1). In Section 4.4
we give a concrete example of such a timing controlled node.
3.3 Use Cases
We distinguish four use cases of a quantum network: one
related to producing long-distance entanglement, and three
that come from application demands. Since no quantum net-
work has been realized to date, we cannot gain insights from
actual usage behavior. Instead we must resort to properties
of application protocols known today. We desire flexibility
to serve all use cases, including supporting multiple applica-
tions at the same time.
Measure Directly (MD) Use Case: The first application use
case comes from application protocols that produce many
(≥ 104) pairs of entangled qubits sequentially, where both
qubits are immediately measured to produce classical cor-
relations. As such, no quantum memory is needed to store
the entanglement and it is not necessary to produce all en-
tangled pairs at the same time. It follows that applications
making use of this use case may tolerate fluctuating delays in
entanglement generation. Additionally, it is not essential to
deliver error free correlations obtained from entanglement
Figure 3: Heralded entanglement generation on the
NV platform. (a) NV centres are point defects in di-
amond with an electronic spin as a communication
qubit (purple) and carbon-13 nuclear spins as memory
qubits (yellow), realized in custom chips (b). (c) A trig-
ger produces entanglement between the communica-
tion qubits of A and B (diamonds) and two qubits (pho-
tons) traveling over fiber to the heralding station H. H
measures the photons by observing clicks in the left
or right detector giving the heralding signal s: [fail-
ure] (none or both click), [success,|Ψ+⟩] (left clicks),
[success,|Ψ−⟩] (right clicks). Success confirms one of
two types of entangled pairs |Ψ+⟩ or |Ψ−⟩ (wiggly pur-
ple line). H sends s to A and B (not pictured).
heralding signal (see Figure 3) provides a confirmation that
an entanglement generation attempt has succeeded. Such
heralding allows long-distance quantum communication
without exponential overheads [19], and without the need for
more complex resources [8, 22]. Creating long-distance links
between two controllable nodes by means of entanglement
swapping (Section 3.2), and executing complex applications
requires both nodes to know the state of their entangled
links (which qubits belong to which entangled link, and who
holds the other qubit of the entangled pair). As illustrated
in Figure 1, remote nodes ("B" in the figure) can change the
state of such entangled links ("A" and "C" in the figure). En-
tanglement is an inherently connected element at the lowest
physical level, whereas classical communications deal with
unidirectional forward communication that abstracts the no-
tion of a connection between a sender and receiver. In order
to make use of entanglement for a quantum network special
devices capable of producing entanglement and manipulat-
ing local qubits are required.
3.2 Quantum Network Devices
We focus on a high level summary of devices in a quantum
network without delving into detailed physics (for more
4
A Link Layer Protocol for Quantum Networks
to the application. Such applications will thus already antici-
pate error fluctuation across the many pairs. This contrasts
with classical networking where errors are often corrected
before the application layer. Examples of such applications
are QKD [40], secure identification [33] and other two-party
cryptographic protocols [4, 23, 34, 83, 102] at the prepare-
and-measure network stage [101], and device-independent
protocols at the entanglement network stage [101].
Create and Keep (CK) Use Case: The second application use
case stems from protocols that require genuine entanglement,
possibly even multiple entangled pairs to exist simultane-
ously. Here, we may wish to perform joint operations on
multiple qubits, and perform quantum gates that depend on
back and forth communication between two nodes while
keeping the qubits in local quantum storage. While more
applications can be realized with more qubits, this use case
differs substantially in that we want to create relatively few
(even just one) pairs, but want to store this entanglement.
Since we typically want these pairs to be available at the
same time, and memory lifetimes are short, we want to avoid
delay between producing consecutive pairs, which is superfi-
cially similar to constraints in real time classical traffic. Also
for CK, many applications can perform well with noisy en-
tangled links and the amount of noise forms a performance
metric (Section 4.2). Examples of such protocols lie in the
domain of sensing [46], metrology [63], and distributed sys-
tems [9, 36] which lie in the quantum memory network stage
and beyond [101].
Send Qubit (SQ) Use Case: While many application pro-
tocols known to date consume entanglement itself, some
— such as distributed quantum computing applications —
ask for the transmission of (unknown) qubits. This can be
realized using teleportation over any distance as long as en-
tanglement is confirmed between the sender and the receiver.
For the link layer, this does not differ from CK, where we
want to produce one entangled pair per qubit to be sent.
Network Layer (NL) Use Case:
In analogy to the classi-
cal notion of a link layer, we take the link layer to refer to
producing entanglement between neighboring nodes (see
Section 3.4). The network layer will be responsible for produc-
ing entanglement between more distant ones. While usage
behavior of quantum networks is unknown, it is expected
(due to technological limitations) that routing decisions, i.e.
how to form long-distance links from pairwise links, will
not be entirely dynamic. One potential approach would be
to first determine a path, and reserve it for some amount
of time such that pairwise entanglement can be produced.
Producing pairwise entanglement concurrently enables si-
multaneous entanglement swapping along the entire path
with minimal delay to combat limited memory lifetimes. For
this, the network layer needs to be capable of prioritizing
entanglement production between neighboring nodes.
3.4 Network Stack
Based on these considerations, we propose an initial func-
tional allocation of a quantum network stack (see Figure 2).
In analogy to classical networking, we refer to the lowest
element of the stack as the physical layer. This layer is real-
ized by the actual quantum hardware devices and physical
connections such as fibers. We take the physical layer to
contain no decision making elements (comparable to e.g. ISP
path tunneling architectures [77]) and keep no state about
the production of entanglement (or the transmissions of
qubits). The hardware at the physical layer is responsible
for timing synchronization and other synchronization, such
as laser phase stabilization [53], required to make attempts
to produce heralded entanglement (Section 4.4). A typical
realization of the physical layer involves two controllable
quantum nodes linked by a (chain of) automated quantum
nodes that attempt entanglement production in well defined
time slots.
The task of the link layer is then to turn the physical layer
making entanglement attempts into a robust entanglement
generation service, that can produce entanglement between
controllable quantum nodes connected by a (chain of) au-
tomated quantum nodes. Requests can be made by higher
layers to the link layer to produce entanglement, where ro-
bust means that the link layer endows the physical system
with additional guarantees: a request for entanglement gen-
eration will (eventually) be fulfilled or result in a time-out.
This can be achieved by instructing the physical layer to per-
form many attempts to produce entanglement until success.
Built on top of the link layer rests the network layer, which
is responsible for producing long-distance entanglement be-
tween nodes that are not connected directly or by automated
quantum nodes. This may be achieved by means of entan-
glement swapping, using the link layer to generate entangle-
ment between neighboring controllable nodes. In addition,
it contains an entanglement manager that keeps track of
entanglement in the network, and which may choose to pre-
generate entanglement to service later requests from higher
layers. It is possible that the network layer and entanglement
manager may eventually be separated.
A transport layer takes responsibility for transmitting
qubits deterministically (e.g. using teleportation). One may
question why this warrants a separate layer, rather than
a library. Use of a dedicated layer allows two nodes to pre-
share entanglement that is used as applications of the system
demand it. Here, entanglement is not assigned to one spe-
cific application (purpose ID, Section 4.1.1). This potentially
increases the throughput of qubit transmission via telepor-
tation as teleportation requires no additional connection
negotiation, but only forward communication from a sender
to the receiver. Implementing such functionality in a library
5
would incur delays in application behavior as entanglement
would need to be generated on-demand rather than supply-
ing it from pre-allocated resources.
4 LINK LAYER DESIGN
CONSIDERATIONS
4.1 Desired Service
The link layer offers a robust entanglement creation service
between a pair of controllable quantum nodes A and B that
are connected by a quantum link, which may include auto-
mated nodes along the way. This service allows higher layers
to operate independently of the underlying hardware plat-
form, depending only on high-level parameters capturing
the hardware capabilities.
4.1.1 Requesting entanglement. Our use cases bring spe-
cific requirements for such a service. Entanglement creation
can be initiated at either A or B by a CREATE request from
the higher layer with parameters:
(1) Remote node with whom entanglement generation is
desired if the node is connected directly to multiple
others.
(2) Type of request - create and keep (K), and create and
measure (M). The first type of request (K) stores en-
tanglement, addressing the use cases CK and NL (see
Section 3.3. The second (M) leads to immediate mea-
surement, supporting the use case MD. The reason
for distinguishing these two scenarios is twofold: first,
we will show later (Section 4.4 that a higher through-
put can for some implementations be achieved for M
than for K on the same system. Second, simple pho-
tonic quantum hardware without a quantum memory
and sophisticated processing capabilities [90] only sup-
ports the M mode of operation.
(3) Number of entangled pairs to be created. Allowing
the higher layer to request several pairs at once can
increase throughput by avoiding additional processing
delays due to increased inter-layer communication
(comparing to classical networks [96, Table 2]). It also
helps the CK use case where an application actually
needs several pairs concurrently.
(4) Atomic is a flag that assists the requirement from the
CK use case, by ensuring that the request must be
fulfilled as one, and all pairs be made available at the
same time.
(5) Consecutive is a flag indicating an OK is returned for
each pair made for a request (typical for NL use case).
Otherwise, an OK is sent only when the entire request
is completed (more common in application use cases).
(6) Waiting time, tmax can be used to indicate the maxi-
mum time that the higher layer is willing to wait for
Dahlberg, Skrzypczyk, et al.
completion of the request. This allows a general time-
out to be set, and enables the NL and CK use case to
specify strict requirements since the requested pairs
may no longer be desirable if they are delivered too
late.
(7) A purpose ID can be specified which allows the higher
layer to tag the entanglement for a specific purpose.
For an application use case, this purpose ID may be
considered analagous to a port number found in the
TCP/IP stack and including it in the CREATE request
allows both nodes to immediately pass the entangle-
ment to the right application to proceed with process-
ing at both ends without incurring further communi-
cation delays. A purpose ID is also useful to identify
entanglement created by the NL use case for a specific
long-distance path. We envision that an entanglement
manager who may decide to pre-generate entangle-
ment would use a special tag to indicate “ownership“
of the requested pairs. For the NL use case for example,
if the entanglement request does not correspond to a
pre-agreed path, then the remote node may refuse to
engage in entanglement generation. Finally, a purpose
ID enables rejection of generation by the remote node
based on scheduling or security policies, e.g. for NL
when no path is agreed upon.
(8) A priority that may be used by a scheduler. Here we
use only three priorities (use cases NL, MD and CK).
(9) Finally, we allow a specification of a purely quantum
parameter (refer to Appendix A), the desired minimum
fidelity, Fmin, of the entanglement [76]. Here, it is suf-
ficient to note that the fidelity 0 ≤ F ≤ 1 measures
the quality of entanglement, where a higher value of
F means higher entanglement quality. The ideal target
state has F = 1, while F ≥ 1/2 is often desirable [52].
The reason for allowing different Fmin instead of fixing one
for each hardware platform is that the same platform can
be used to produce higher or lower fidelity pairs, where a
higher fidelity pair costs more time to prepare. Examples of
this are the use of entanglement distillation [38, 60] where