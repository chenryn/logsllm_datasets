Q; ρ)
Figure 2: Forking algorithm ForkA. If ForkA aborts in
line 03, 05, 07, or 08, then it does so outputting ⊥.
3. COMMON DSA/ECDSA FRAMEWORK
We ﬁrst describe the abstract signature scheme GenDSA,
and then show that the standardized versions of DSA and
ECDSA can be obtained by instantiating the generic com-
ponents in the right way. Note that Brown [5] uses a similar
abstraction, but with a diﬀerent way to model the conver-
sion function.
Definition 6
(GenDSA framework). Let (G, g, q) be
a prime-order group, H : {0, 1}∗ → Zq be an (implicitly
keyed) hash function, and L be an integer. Deﬁne the con-
version function f = ψ ◦ Π ◦ ϕ : G∗ → Zq by its components
G∗ ϕ−→ {0, 1}L Π−→ [0 .. 2L − 1]
ψ−→ Zq ,
where ϕ and ψ are eﬃcient functions and Π is an eﬃcient
bijection. Then GenDSA is deﬁned by the algorithms of Fig-
ure 3.
The conversion function maps elements from group G to
ﬁeld Zq. The intuition behind its construction from com-
ponents ϕ, Π, ψ is that ϕ is an (injective) encoding function
that deterministically represents abstract group elements as
bit strings, ψ is an independent hash function that maps
integers from some range to elements of Zq, and Π is the
link in the middle, bridging the range of ϕ with the domain
of ψ. As computer implementations of G’s operations will
operate on bit string representations anyway, function ϕ will
often only exist implicitly. In principle, the linking compo-
nent Π is not required to fulﬁll any speciﬁc property and
both DSA and ECDSA instantiate it with function str2int L
(the canonic bijection between bit strings of length L and
integers in the range 0 .. 2L − 1). However, not surprisingly,
mandating speciﬁc properties of ϕ, ψ will be crucial for the
security analysis of GenDSA. Interestingly, as we will see,
the injectiveness of ϕ requested above can be traded for the
algebraic property of semi-injectiveness (cf. Deﬁnition 2).
Indeed, while DSA’s ϕ is injective, ECDSA’s ϕ is actually
only semi-injective.
Differences between (EC)DSA and GenDSA.
Before studying the components G, H, L, ϕ, Π, ψ of DSA
and ECDSA in detail, we discuss some diﬀerences between
the general structure of the standardized DSA/ECDSA ver-
sions and GenDSA. First, our version of the signing algo-
rithm has the option to abort without outputting a sig-
nature.
In contrast, signing with standardized DSA and
ECDSA never aborts and always outputs a valid signature.
Technically, the diﬀerence is that in standardized versions
1655q
KGen
00 x ←$ Z∗
01 X ← gx
02 sk := x
03 pk := X
04 Return (sk, pk)
Sign(x, m)
05 r ←$ Zq; R ← gr
06 If R = 1: Return ⊥
07 t ← f (R)
08 If t = 0: Return ⊥
09 h ← H(m)
10 u ← h + xt
11 If u = 0: Return ⊥
12 s ← u/r
13 Return (cid:104)s, t(cid:105)
Verify(X, m,(cid:104)s, t(cid:105))
14 If s = 0 ∨ t = 0:
Return 0
15
16 h ← H(m)
17 U ← ghX t
18 If U = 1: Return 0
19 R ← U 1/s
20 If f (R) (cid:54)= t:
Return 0
21
22 Return 1
Figure 3: GenDSA. In line 13, with (cid:104)·,·(cid:105) we denote any
ﬁxed encoding Zq × Zq → {0, 1}∗; correspondingly, in
Verify we assume that only signatures with s, t ∈ Zq
are considered.
the three “Return ⊥” statements of our Sign are replaced
with “Goto line 05” instructions. That is, eﬀectively, the
standardized DSA/ECDSA signing procedures iterate our
Sign algorithm until eventually succeeding with outputting
a pair (cid:104)s, t(cid:105). This change clearly does not aﬀect the secu-
rity assessment of the overall scheme. A second structural
diﬀerence between standardized DSA/ECDSA and our spec-
iﬁcation is that in the standards the last instruction of Sign
before returning the signature is to assert that s (cid:54)= 0∧ t (cid:54)= 0;
in our version these conditions are checked as early as pos-
sible. As a third change we note that the U = 1 abort con-
dition of line 18 is not present in DSA [11] (however, most
ECDSA speciﬁcations [19] assert that R (cid:54)= 1 after line 19,
which is equivalent to our condition). It is easy to check that
adding line 18 neither aﬀects the correctness nor the security
of DSA (see the full version for the worked out arguments).
3.1 Instantiations
DSA. We show how to instantiate G, H, L, ϕ, Π, ψ in order
to obtain the DSA signature scheme as standardized in [11,
Sec. 4] and [19] (modulo the diﬀerences already discussed).
As the prime-order group (G, g, q) a subgroup of the mul-
tiplicative group of a prime ﬁeld is used: For security pa-
rameters L ∈ {1024, 2048, 3072} and N ∈ {160, 224, 256}
(these are the values from [11]), two prime numbers p and q
and an element g ∈ Z∗
p are chosen such that p has bit-
length L, q has bit-length N , q | (p − 1), q2 (cid:45) (p − 1), and
ordp(g) = q. The group is then G := (cid:104)g(cid:105)p ⊆ Z∗
p. Fur-
ther, hash function H is constructed from any hash func-
tion of the SHA family speciﬁed in FIPS 180-4 that has
an output length of at least N bits: The construction is
H(m) := str2int N (sha(m)) mod q, where sha : {0, 1}∗ →
{0, 1}N stands for the N leftmost output bits of the cho-
sen hash function. As the conversion function f : G∗ → Zq
the mapping x (cid:55)→ x mod p mod q is used (assuming the rep-
resentation of G’s elements as numbers in [1 .. p − 1]).
In
the terms of Deﬁnition 6 this is achieved by letting function
ϕ : G∗ → {0, 1}L be the restriction of mapping [1 .. p − 1] →
{0, 1}L; x (cid:55)→ int2str L(x) to the domain G∗ (where int2str
is the canonic conversion of an integer to a bit string), deﬁn-
ing function Π : {0, 1}L → [0 .. 2L − 1] as x (cid:55)→ str2int L(x),
and deﬁning function ψ : [0 .. 2L − 1] → Zq such that x (cid:55)→
x mod q.
ECDSA. To obtain ECDSA, group G is instantiated with
a prime-order subgroup of the set of points of an elliptic
curve deﬁned over some ﬁnite ﬁeld. Speciﬁc such curves
over prime ﬁelds F = GF(p) and binary ﬁelds F = GF(2m)
are recommended by FIPS 186-4 [11]. For both types of
curves, the conversion function f : G∗ → Zq takes an elliptic
curve point (x, y) ∈ G∗ ⊆ F × F, understands x ∈ F as an
integer, and outputs the value x mod q. More precisely, if for
a prime curve L denotes the bit-length of p, and, for a binary
curve we have L = m and further fe2str : F → {0, 1}L is an
encoding of ﬁeld elements as bit strings of length L, then in
the terms of Deﬁnition 6 the function ϕ : G∗ → {0, 1}L is
implemented as the mapping (x, y) (cid:55)→ fe2str (x). Bijection
Π : {0, 1}L → [0 .. 2L − 1], function ψ : [0 .. 2L − 1] → Zq,
and hash function H are deﬁned as in DSA, i.e., per x (cid:55)→
str2int L(x) and x (cid:55)→ x mod q for the former two and the
latter based on a hash function of the SHA family.
Lemma 2. Let ϕ be deﬁned as in DSA and ECDSA, re-
p
spectively. Then ϕ is semi-injective (cf. Deﬁnition 2).
Proof. In the case of DSA, ϕ : G∗ → {0, 1}L is clearly
injective. To eﬃciently check if a given Z ∈ {0, 1}L has a
preimage in G∗ under ϕ, interpret Z as an element in Z∗
and accept it if Z (cid:54)= 1 and Z q = 1 mod p. This is a valid
membership test for G because q | (p − 1) but q2 (cid:45) (p − 1).
This establishes that ϕ as in DSA is semi-injective.
For elliptic curves over prime or binary ﬁelds, for each
x ∈ F there are at most two solutions y ∈ F such that
(x, y) is a point on the curve (at least for the Weierstrass
curves mandated by the ECDSA standards [19]). If there are
two such solutions then the corresponding points P = (x, y)
and Q = (x, y(cid:48)) are inverses of each other: P Q = 1 (we
assume multiplicative notation). Further, if there is only one
solution then the corresponding point P = (x, y) has order
two and is thus not an element of G (which is of prime order
and thus has no non-trivial subgroup). That is, in the case of
ECDSA ϕ is 2-to-1 and for all X, Y ∈ G∗ that collide under
ϕ we have either X = Y or XY = 1. Furthermore, for all
elliptic curves considered in the ECDSA standard, the range
of ϕ is eﬃciently decidable. Thus, ϕ is semi-injective.
4. SECURITY IN THE BRO MODEL
We establish that GenDSA signatures are unforgeable if
the DLP is hard in the underlying group, Π behaves like
a bijective random oracle, and certain standard model as-
sumptions on H, ψ, and ϕ are met. We split the proof
into two parts: In Section 4.1 we show that for GenDSA the
euf-cma notion is equivalent with the key-only notion (i.e.,
if one can forge GenDSA then one can do so without hav-
ing access to sample signatures), and in Section 4.2 we show
that any key-only forger can be used to break the DLP.
4.1 KO-unforgeability implies euf-cma
The following theorem says that if H is collision resis-
tant, then euf-cma unforgeability of GenDSA is implied by
key-only unforgeability, in the bijective random oracle model.
Theorem 1. Let ϕ be semi-injective. Let F be a forger
that (τ, Qs, QΠ, ε)-breaks euf-cma security of GenDSA. Then,
in the bijective random oracle model for Π, there exist a
forger F0 that (τ0, QΠ, ε0)-breaks the KO security of GenDSA
and an adversary that (τcr, εcr)-breaks the collision resistance
of H, where
ε ≤ ε0+εcr+
, τ0 = τ +O(Qs), τcr = τ +O(Qs).
3QQs
(q − 1)/2 − Q
Here, q denotes the group order, Qs denotes the maximum
number of signing queries of F, QΠ denotes the maximum
1656number of bijective random oracle queries of F and F0, and
Q = Qs + QΠ.
We remark that the security statement does not pose any
requirement on function ψ. Furthermore, it does not assume
the hardness of DLP in group G.
Proof. We write A := {0, 1}L and B := [0 .. 2L − 1]
throughout the proof, i.e., we have functions ϕ : G∗ → A,
Π : A → B, and ψ : B → Zq.
In the bijective random or-
acle model for Π, ﬁx a forger F against the euf-cma secu-
rity of GenDSA that runs in time at most τ and poses at
most Qs signature queries and QΠ bijective random ora-
cle queries (in the forward or reverse direction). Let Q =
Qs + QΠ. The concrete version of the CMA game from
Figure 1 with the GenDSA algorithms plugged in is given
as Game G0 in Figure 4 (excluding lines 18,19). Note
that access to bijective random oracle Π is provided via
oracles BRO and BRO−1. Our goal is to upper-bound
ε = Pr[CMAF ⇒ 1] = Pr[GF
0 ⇒ 1]. In line with Deﬁ-
nition 4 we assume that F does not output a forgery at-
tempt without having posed the corresponding Π query ﬁrst
(more precisely, if F outputs (m∗,(cid:104)s∗, t∗(cid:105)) and we let R∗ =
, then either BRO was queried on input
ϕ(R∗), or BRO−1 was queried such that ϕ(R∗) was the re-
sult; see the corresponding remark in line 27).
(cid:0)gH(m∗)X t∗(cid:1)1/s∗
q
Procedure Init
00 Pick Π : A → B
01 x ←$ Z∗
02 X ← gx
03 Return X
Procedure Sign(mi)
04 ri ←$ Zq; Ri ← gri
05 If Ri = 1: Return ⊥
06 αi ← ϕ(Ri)
07 βi ← Π(αi)
08 ti ← ψ(βi)
09 If ti = 0: Return ⊥
10 hi ← H(mi)
11 ui ← hi + xti
12 If ui = 0: Return ⊥
13 si ← ui/ri
14 L ← L∪{(mi,(cid:104)si, ti(cid:105))}
15 Return (cid:104)si, ti(cid:105)
Procedure BRO(α)
16 Return Π(α)
Procedure BRO−1(β)
17 Return Π−1(β)
Procedure Fin(m∗,(cid:104)s∗, t∗(cid:105))
18 For all (m,·) ∈ L, m (cid:54)= m∗: (G1)
If H(m) = H(m∗): Abort (G1)
19
20 If (m∗,·) ∈ L: Abort
21 If s∗ = 0 ∨ t∗ = 0: Abort
22 h∗ ← H(m∗)
23 U∗ ← gh∗
X t∗
24 If U∗ = 1: Abort
25 R∗ ← (U∗)1/s∗
26 α∗ ← ϕ(R∗)
27 β∗ ← Π(α∗) // was queried before
28 If ψ(β∗) (cid:54)= t∗: Abort
29 Stop with 1
G0 and G1: Game G0
Figure 4:
(excluding
lines 18,19) is the CMA game with the GenDSA al-
gorithms plugged in, in the bijective random ora-
cle model for Π. We make explicit the construction
f = ψ ◦ Π ◦ ϕ of the conversion function. Game G1
includes lines 18,19. We write ‘Abort’ as a shortcut
for ‘Stop with 0’.
0 ⇒ 1] ≤ Pr[GF
Game G1 in Figure 4 (including lines 18,19) is the mod-
iﬁcation of G0 in which forgeries obtained by ﬁnding a col-
lision of hash function H are not counted. By a standard
1 ⇒ 1] + εcr with an
argument we have Pr[GF
adversary that (τcr, εcr)-breaks the collision resistance of H,
where τcr = τ + O(Qs).
The intuition behind the overall proof is to use forger F
to construct a key-only forger F0 that has a similar forging
probability as F. More precisely, F0 shall invoke F, answer
all signing and bijective random oracle queries posed by F,
and ﬁnally forward F’s forgery to its own challenger. Signing
queries, as so often in proofs of unforgeability of signature