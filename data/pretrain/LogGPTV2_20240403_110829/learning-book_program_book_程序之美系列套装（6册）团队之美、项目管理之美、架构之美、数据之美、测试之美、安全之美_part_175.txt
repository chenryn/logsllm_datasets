我们选择使用NetKermnel作为这个架构的基础，因为它是面向资源的
架构的化身，具有双重许可证，允许用于并源和商业项目中。利用
不同的表示方式来实现各层之间的逻辑耦合的思想，被设计进了软
件架构中，提供了类似的灵活性、可伸缩性和简单性等好处。层和
层之间的联系是通过异步解析、逻辑名称来实现的。面向资源的架
构的这种深刻思想如图5-8所示。NetKernel是一个有趣的软件基础
设施，因为它在内部利用了资源逻辑相连的概念，所以HTTP逻辑
请求转成其他逻辑请求。这种架构在运行时软件环境中反映了Web
的特性。
981
---
## Page 983
传输
逻辑
逻辑
逻辑
请求
请求
请求
面向资源
面向资源
面向资源
的引擎
的引擎
的引擎
物理表现形式
物理表现形式
物理表现形式
图5-8：深层的面向资源的架构
外部URLhttp://purl.org/employee/briansletten通过通过地址重写被映
射到一段名为"访问者”（accessor）的程序l。访问者存在于模块
中，这些模块输出公开的URI定义，代表了它们负责响应的地址空
间。这里的方便之处在于，我们能够在模块的新版本中大幅度地改
变实现技术，同时只要修改重写规则，让它指向新的实现就可以
了。只要返回的是兼容的响应结果，客户端什么都不需要知道。我
们可以在现代的面向对象语言中利用接口近似实现这种灵活性，但
这还是要求我们在“物理上"耦合接口的定义。通过只包含逻辑的绑
定，我们虽然仍旧需要支持现有客户端的期望，但我们不再与任何
实现细节耦合在一起。我们不仅可以在Web上通过URI的通信时看到
这种价值，而且在本地运行的软件中也是这样。
在内部，我们使用与请求的方法类型相关联的"命令模式”5L来实现
访问者。HTTPGET方法被映射到GetResourceCommand方法，该方
法不保持状态。在收到请求时，我们从映射表中找到命令并向它发
出请求。REST的无状态风格确保了请求中已包含回答请求所需的
全部信息，所以我们不需要在命令实例中保持状态。我们可以在后
面的代码中通过上下文实例来访问请求的状态。这些代码对于Java
开发者来说显得很直白。我们在Java对象上调用方法，捕捉异常，
取得返回值。重要的是要注意IURAspect接口的使用。从本质上说，
我们不关心资源采取何种形式。它可以是一个DOM实例、一个
JDOM实例、一个字符串，或一个字节数组。从我们的目的来说，
这都不重要。基础设施会将它转换成一个字节流，再带上元数据，
作为请求的响应结果发出。如果我们希望基础设施支持特定的格
式，我们就会直接向它请求那种格式。这种声明式的、面向资源的
方式有助于大幅度减少用于操作数据的代码的数量，让我们能利用
正确的工具做正确的事情：
982
---
## Page 984
if (resStorage.resourceExists (context,uriResolver) )(
IURAspect
asp=resStorage.getResource (context,uriResolver) ;
//Filter the response if we have a filter
if (filter ! =null) (
asp=filter.filter (context,asp) ;
//Default response code of 200 is fine
IURRepresentation
rep=NKHelper.setResponseCode (context,asp, 200):
retValue=context.createResponseFrom (rep) ;
retValue.setCacheable () :
retValue.SetMimeType (NKHelper.MIME_XML) :
else{
IURRepresentation rep=NKHelper.setResponseCode (context,
+uriResolver.getDisplayName (path) ), 404) ;
retValue=context.createResponseFrom (rep) :
retValue.SetMimeType (NKHelper.MIME_TEXT) :
上
当GET请求发出后，大部分信息资源会返回200。显然，PURL超越
了这种行为，可以返回302、303、307、404等。如果我们看看
983
---
## Page 985
resStorage.getResource（）方法的面向PURL的实现，就会知道这种
的面向资源的趣事。
INKFRequest req=context.createSubRequest ("active: purl-
storage-query-purl") :
req.addArgument ("uri", uri) :
IURRepresentation res=context.issueSubRequest (req) ;
return context.transrept (res,IAspectXDA.class) ;
简而言之，我们通过"active：purl-storage-query-purl"这个URI发出一
个逻辑请求，带有“ffcpl：/purl/employee/briansletten"作为参数。忽
略掉这个不寻常的URI格式，这只是在NetKermnel中用于表示内部的
请求。我们不知道什么代码会被调用，以取得要求格式的PURL，
我们并不关心它。在面向资源的环境中，我们只需说：“响应这个
URI的程序将生成响应结果”。现在我们可以自由地在设计阶段先向
客户端提供一些静态文件，然后在构建阶段利用基于Hibermate映射
到关系数据库。我们可以通过重写对“active：purl-storage-query-
purl"这个URI的响应来实现这种转换。客户端代码不需要知道这种
区别。如果我们改变了PURL的解析方式，从本地持久层变为远程
获取，客户端代码也可以不必关心。这就是我们已经提到的好处，
在一个强大的软件环境中，面向资源的企业级计算的思想被具体化
了。
我们不仅用这种方式实现了层与层之间的松耦合，而且我们在这个
环境中也享受到了幂等的、无状态的请求所带来的好处。取得
PURL定义的早期代码片断逐渐在内部扁平化，变成了对“active：
purl-storage-query-purl+uri@ffcpl:/purl/employee/briansletten"这个
URI的异步请求。正如我们前面所讨论的，这变成了一个复合散列
键，代表了查询持久层而得到的结果。即使我们对调用的代码一无
所知，NetKernel仍然能够缓存这些结果。这就是我前面提到过的架
构上的记忆化。实际的过程稍稍有点差异，但在概念上，就是这样
的。如果其他人试图从内部或通过HTTPRESTful接口来解析同样的
PURL，我们就可以从缓存中拿出结果。尽管这一点可能不能打动
在Web页面上已经建立了缓存机制的人，但如果你再仔细想想，就
会发现这实际上是很令人佩服的。所有可能的URI请求都以这种方
984
---
## Page 986
式进行缓存，不论我们是打算从磁盘上读取文件、通过HTTP取得
文件、通过XSLT文件转换一份XML文档，或是将PI（圆周率）计算
到10000位小数。每次调用都得到逻辑的、无状态的、异步的结
果，每次结果都可能缓存起来。这种面向资源的架构方式让我们的
软件可伸缩、有效率、支持缓存，并且是通过统一的、逻辑的接口
来工作的。这导致了本质上更健壮、更灵活、可伸缩的架构，就像
Web一样，原因也是一样的。
[1]_http://purl.org
[2]此代码库构成非常成功的服务的基础
TinyURL(http://tinyurl.com）service.
[3]http://foaf-project.org
[4]
http://docs.1060.org/docs/3.3.0/book/gettingstarted/doc_intro_code_acce
ssor.html.
[5]_http://en.wikipedia.org/wiki/Command_pattern.
5.7结论
面向资源的架构方法很优雅地实现了一些折中。一方面，对于传统
的方法来说，这些方法可能看起来有些奇怪，而且没有尝试过。如
果人们关心自已的简历，就会希望停留在尝试过的、真正在使用的
方法。另一方面，对于那些研究过Web和它的基本组成模块的人来
说，它很有意义，代表了人们设想和实现过的最大、最成功的网络
软件架构。一方面，它要求一种完全不同的思考方式。另一方面，
它支持一种强大的机制，包装并复用已有的代码、服务和基础设
施，为它们提供逻辑命名接口，对所有形式的交互都不透露实现细
节。我们可以自由地调整服务器端的技术而不会影响原有的客户
端。随着时间的推移，我们可以为同样的数据提供新的结构形式支
持。我们可以迁移后端的实现，不会影响我们的客户。另外，这些
设计选择导致了伸缩性强、易于缓存、信息驱动的访问易控制、好
的法规兼容性等特点。
软件开发者通常不关心数据，他们关心算法、对象、服务和其他类
似的结构。对于J2EE、.NET和基于SOAP的架构，我们已经拥有一
些相当具体的推荐蓝图和技术。遗憾的是，大多数已有的蓝图没有
985
---
## Page 987
把信息作为一等公民。它们让我们局限于某些具体的绑定，使我们
难以在不影响已有客户端的情况下进行变更。这是我们沿用多年的
脚踏式水车，业务部门对此已感到疲倦。Web服务本应该是一种退
出策略，但不恰当的抽象和过于复杂的边界条件用例，使得整个过
程成为了对Web服务完全不满意的经历。现在是时候从以软件为中
心的架构中走出来，并始关注信息及其流动了。我们仍会利用我们
知道和喜爱的工具来编写软件，只是这些工具不会成为架构绑定的
焦点。
面向资源的方法在业务部门和支持它们的技术部门之间提供了引人
注目的桥梁。以信息为中心的视图和我们的各系统之间连接的方
式，为我们提供了真正的效率和业务价值主张。我们不需要根据供
应商们的伟大思想从头干起，我们可以从Web上学到有价值的经
验，了解它的架构方式引发的重要特征。架构是有人居住的雕塑，
我们不得不在一段时间内承受这些选择的影响。我们应该抓住机
会，让功能性、美和弹性渗入到架构之中，使我们在架构中的生活
变得更舒适。
第6章数据增长：Facebook平台的架构
DaveFetterman
原则与特性
结构
V功能多样性
V模块
概念完整性
V依赖关系
V修改独立性
进程
V自动传播
986
---
## Page 988
V数据访问
可构建性
V增长适应性
V增抵抗力