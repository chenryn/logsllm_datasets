only untainted registers are tainted), but a loss in performance
due to unnecessarily tainted registers.
Optimizing Performance via Caching. To prevent
this
potential performance loss, we propose an additional change to
the cache to reduce the impact of the taint over-approximation.
We introduce one additional bit of meta data per 64 bits to
7
the cache, i.e., 8 additional bits of meta data per 64 B cache
line. This allows us to store the register-taint
information
transparently in the cache. Note that this change does not
inﬂuence the architectural size of a cache line, as it only
extends the meta data that is already stored for each cache line.
Whenever a register is written to non-transient memory, the
taint bit of the register is stored in the corresponding cache line.
When reading from memory, the bit stored in the cache line has
precedence over the information from the TLB, i.e., the cache
overwrites the taint bit deﬁned by the memory mapping. The
information in the cache allows the hardware to temporarily
keep track of the taint information of a register if the register
value is moved to the stack. This happens, e.g., if register
values are spilled on the stack, exchanged via the stack, or
upon function calls.
Evicting the cache line corresponding to a register is
never a security issue. An evicted cache line only loses the
information that a register was not tainted. Thus, if the cache
line is evicted, the registers become automatically tainted.
1) Taint Control: Besides the automated tainting and un-
tainting of registers, ConTExT provides a privileged interface
to modify the taint of registers. This interface is necessary
for the operating system to save and restore taint values upon
context switches.
A straightforward solution would be to introduce new
instructions in the ISA. However, we try to keep the hardware
changes to a minimum, especially changes which are not
hidden in the microarchitecture. Hence, we propose instead
to use model-speciﬁc registers (MSR) to access the taint
information of registers.
Read/Write Taint. To read and write the current taint infor-
mation of all registers, we introduce an MSR IA32_TAINT.
The taint bit of every architectural register directly maps to
one bit of this MSR, which allows the operating system to
read and write all taint bits in a single operation. As there are
only 56 architectural registers (16 general purpose, 8 ﬂoating
point, 32 vector) which have to be tracked, one 64-bit MSR
is sufﬁcient to read or write all taint bits at once. While the
physical register ﬁle typically contains more registers, these
are not visible to the developer. Hence, the MSR only has to
provide access to the taint bits of the architectural registers.
Interrupt Handling. MSRs can only be accessed indirectly
using an instruction (i.e., rdmsr on x86), and require regis-
ters both to specify the MSR and as source and destination
operands. On an interrupt,
thing to save should
be the IA32_TAINT MSR, because it contains the taints
of the previous context. However, as registers must not be
clobbered in the interrupt routine, all the registers used in
the interrupt handler have to be saved ﬁrst. We resolve this
problem by automatically copying the IA32_TAINT to an
additional MSR, IA32_SHADOW_TAINT, on every interrupt.
This ensures that the taint of all registers is preserved before
any taint is potentially modiﬁed by a register operation in the
interrupt handler. The IA32_SHADOW_TAINT can then be
treated like any other register, e.g., the operating system can
save it into a kernel structure upon a context switch.
the ﬁrst
When returning from an interrupt, the CPU restores the val-
ues from IA32_SHADOW_TAINT to the register taint values.
Hence, with this mechanism, we ensure that an interrupt does
not inﬂuence the taint value of any register. This also works
for the unlikely event of nested interrupts, i.e., if an interrupt
is interrupted by a different interrupt. The only critical region
in such a case is if the ﬁrst interrupt has not yet locally saved
the IA32_SHADOW_TAINT MSR, and the second interrupt
overwrites the MSR. However, as long as within this critical
region (i.e., the time window between ﬁrst interrupt and second
interrupt) no register is untainted, there can be no leakage. In
Section III-C, we show that this situation can be avoided solely
in software.
C. Software Support
We propose changes to applications, compilers, and oper-
ating systems to leverage the hardware extensions introduced
in Section III-A and Section III-B. The idea is that instead
of annotating all branches that potentially lead to a secret-
dependent operation, application developers simply annotate
the secret variables in their applications directly. These anno-
tations are processed by the compiler and then forwarded to
the operating system to establish the correct memory mappings
(cf. Section III-A).
Compiler. The compiler parses the annotations of secrets.
Annotations are already implemented in modern compilers,
e.g., with __attribute__((annotate("secret")))
in clang. The secrets identiﬁed this way are allocated inside a
dedicated section of the binary. The compiler marks this sec-
tion as non-transient. The operating system maps this section
from the binary using a non-transient memory mapping.
Besides parsing the annotations, our modiﬁed compiler
ensures that it never spills data from registers marked as secret
into unprotected memory. Otherwise, an attacker could leak
the spilled secrets from memory. Still, it is unavoidable that
the compiler spills registers to the stack, e.g., to preserve
register contents over function calls. Furthermore, due to the
calling convention, some (possibly secret) values have to be
passed over the stack. Hence, we have to assume that the stack
contains secrets. As a consequence, the stack has to be mapped
using a non-transient memory mapping as well.
To reduce the performance impact of a non-transient stack,
we modify the compiler to only use the non-transient stack
if really necessary. This non-transient stack only contains
register spills, possibly function arguments, and return values.
All other values are stored at a different memory location, the
unprotected stack. This concept is similar to the SafeStack [52]
and our implementation even reuses parts of the SafeStack
infrastructure of modern compilers. The difference to SafeS-
tack, where only “unsafe” memory allocations (e.g., buffers)
are stored on the SafeStack, is that we move all variables
normally allocated on the stack to the unprotected stack. Thus,
for ConTExT, only the absolute minimum is stored on the non-
transient stack, e.g., return addresses. By only moving local
variables to the unprotected stack, and leaving return addresses
and function arguments on the stack, we do not break ABI
compatibility with existing binaries. Thus, a developer can still
use external libraries without recompiling them, and libraries
compiled for ConTExT can be used in ordinary unprotected
applications.
Moving local variables from the stack to a different mem-
ory location does not impact the runtime of the application and
8
1
2
3
4
5
6
7
8
9
10
11
pushall
rep xor rcx, rcx ; clear rcx, rep prefix keeps
taint
add rcx, IA32_TAINT
rdmsr ; taint in rax, rdx
[...]
popall
push rax, rcx, rdx
mov rcx, IA32_TAINT ; also updates
IA32_SHADOW_TAINT
wrmsr ; old taint in rax, rdx
pop rax, rcx, rdx
iret ; restores IA32_SHADOW_TAINT to registers
Listing 1: (Pseudo-)assembly for saving and restoring the taint
MSR without destroying the taint of any other register during
a context switch.
even gives additional protection against memory-corruption
attacks [52].
Operating System. For ConTExT, the operating system is
in charge of setting up non-transient memory mappings. As
the operating system parses the binary, it can directly set
up the non-transient memory mappings, which are marked
as such by the compiler. The operating system requires ad-
ditional small changes. The operating system has to save
and restore taint values on context switches. The hardware
already saves the current
taint value of all registers into
the IA32_SHADOW_TAINT MSR upon interrupts. Thus, the
operating system only has to read this register and save it
together with all other saved registers.
As interrupts can be interrupted by other interrupts, e.g.,
a normal
interrupt can be interrupted by a non-maskable
interrupt (NMI), there is a critical section between reading the
MSR and saving the result. If registers are untainted in this
section, a nested interrupt would lose the taint information as
it overwrites the IA32_SHADOW_TAINT MSR. However, if
registers are not untainted in this section, no taint information
can be lost. Hence, we have to initialize the registers required
to read the MSR in a way that does not destroy the taint. For
this purpose, we deﬁne that the rep preﬁx for arithmetic and
logical operations on registers preserves the taint. Section III-C
shows (pseudo-)assembly code, which prepares the registers
with the required immediate values. Generally, overwriting
a register with an immediate or by using an idiom, e.g.,
xor rax,rax, untaints the register. However, the rep preﬁx
prevents the untainting here.
In addition to the context switch, the operating system
has to ﬂush the cache when the content of a non-transient
memory location is initially loaded from the binary. This is
important as the initial data transfer to the memory page
is not done through the non-transient user-space mapping.
Thus, the operating system has to either disable the cache
before this operation or ﬂush the corresponding cache lines
afterwards. This functionality is already present in the x86
ISA and supported by modern operating systems. Thus, there
is no further change required.
IV.
IMPLEMENTATION OF CONTEXT
In this section, we present our implementation of both
ConTExT and ConTExT-light, which we use for the evaluation
(cf. Section V). As we cannot change real x86 hardware or
emulate the hardware changes required for ConTExT on com-
modity hardware, we opted for a hardware simulation of our
changes using a full-system emulator (cf. Section IV-A). While
this does not allow to measure performance by measuring the
runtime, it allows measuring performance in the number of
memory accesses, non-transient memory accesses, taint over-
approximations, etc., for real-world benchmarks.
For ConTExT-light, we present a method to partially emu-
late the non-transient memory mapping behavior on commod-
ity hardware by retroﬁtting uncacheable memory mappings.
Thus, in Section IV-B, we present an open-source proof-of-
concept implementation of ConTExT-light which can already
be used and evaluated on commodity hardware. As ConTExT-
light is running on a real modern CPU architecture, the results
are more tangible than a simulation-based evaluation. Hence,
the performance overhead is an over-approximation, and any
real hardware implementation is expected to be more efﬁcient
than ConTExT-light, as the CPU has to stall in fewer cases.
is not designed as a protection against
Meltdown-type attacks. Mitigating Meltdown-type attacks, in-
cluding MDS attacks,
to our work, and we
consider it out of scope.
ConTExT-light
is orthogonal
A. Hardware Simulation
We simulated ConTExT using the open-source x86-64
emulator Bochs [55] to get as close as possible to functionally
extending a real x86-64 processor with our features, non-
transient memory mappings (cf. Section III-A) as well as
secret tracking (cf. Section III-B). We incorporated hardware
and behavioral changes in our ConTExT-enabled Bochs.
For the hardware simulation, we considered alternatives,
such as the gem5 simulator [9] or an out-of-order RISC-V core.
However, gem5, as Bochs, is a software-based emulation, and
the overhead estimations from gem5 do not match the actual
overheads in practice, as layouting and microarchitectural
details have a huge inﬂuence on real hardware. Currently,
there is also no open-source implementation of a last-level
cache for RISC-V, and it would be difﬁcult to reason about
the performance overheads on x86 based on a RISC-V im-
plementation. Hence, we implement the behavioral changes
in Bochs to analyze the functionality and use ConTExT-light
on a real CPU to approximate the performance overhead (cf.
Section IV-B).
Hardware Changes. To support secret tracking, a few minor
hardware changes are required. Mostly, these are single bits
to track whether a register is non-transient. These bits are
required in every page-table entry, TLB entry, and register.
Furthermore, we introduce additional meta-data bits per cache
line to minimize the performance cost of register spills (cf.
Section III-B).
Page-Table Entry. To distinguish non-transient from nor-
mal memory mappings, we have to mark every memory
mapping accordingly in the PTE. For backward- and future-
compatibility, repurposing one of the ignored bits is the best
choice (cf. Section III-A). Furthermore, repurposing a bit
ensures that the change does not result in any runtime or
memory overhead. If this bit is set, we treat the memory
9
mapping as a region which may contain secrets. The developer
has to do that both for memory locations containing secrets,
as well as memory locations where secrets are (temporarily)
stored.
Translation Lookaside Buffer. For performance reasons,
modern CPUs cache page-table entries in the TLB. Conse-
quently, we need an additional non-transient bit in the TLB,
caching the bit of the page-table entry. In Bochs, caching of
page-table entries is also implemented as a TLB-like structure
allowing the simulated hardware to automatically transfer the
added bit from the PTE to the TLB. Thus, for cached page-
table entries, memory accesses use the cached non-transient
bit from the TLB.
Cache. Bochs only implements an instruction cache, but
no data cache, which plays a vital role in our design to
cache taint information (cf. Section III-B). Hence, we extended
Bochs with data-cache emulation by implementing an 8-way
(inclusive) last-level cache. As the exact eviction strategy is
unknown [31], we used LRU as a good approximation as it
has been used in Intel CPUs until Ivy Bridge [31]. In our
emulated cache, we added 8 taint bits as metadata per cache
line. Note that this change does not inﬂuence the architectural
size of the cache or a cache line. While this sounds like a
large amount of additional metadata, it amounts to less than
1.6 % increase of the size of the last-level cache. Considering
that every cache line already holds a large amount of meta-
data (e.g., physical tag, cache-coherency information, possibly
error-detection bits), these additional 8 bits of metadata do not
result in a large hardware overhead, and are fully backward
compatible.
Model-Speciﬁc Registers. As described in Section III-B, we
added two new MSRs to Bochs. Accesses to IA32_TAINT are