# 【技术分享】如何手动脱壳Locky自定义壳

##### 译文声明
本文为翻译文章，原文来源：安全客  
原文地址：[链接]  
译文仅供参考，具体内容及含义以原文为准。  
译者：[我来学英语](http://bobao.360.cn/member/contribute?uid=1264882569)  
预估稿费：130RMB  
投稿方式：发送邮件至linwei#360.cn 或 登录网页版在线投稿

**前言**
Locky是一款勒索软件，因其加密后的文件后缀为`.locky`而得名。与一般软件不同，Locky使用了自定义壳对代码进行保护，增加了对其进行静态分析的难度。本文将介绍一些小技巧，并演示如何手动脱壳Locky。

**手动脱壳Locky自定义壳**

我们将使用Ollydbg工具来演示如何对Locky进行脱壳。这个壳虽然相对简单，但仍需要一定的分析。你可以在[Hybrid-Analysis](https://www.hybrid-analysis.com/sample/49a48d4ff1b7973e55d5838f20107620ed808851231256bb94c85f6c80b8ebfc?environmentId=100)下载样本。

首先，我会使用PE静态分析工具（如[PortexAnalyzer](https://github.com/katjahahn/PortEx/tree/master/progs)）对样本进行初步检查。如果分析结果显示多个节具有高熵值（包括.rdata段），则表明该样本已加壳。查壳工具如die（[Detect It Easy](https://github.com/horsicq/Detect-It-Easy)）无法识别这种自定义壳，因为它们是专为恶意软件设计的。

Locky的加壳器有一个独特的特征，即在文件版本信息中添加“ **32-bit Edition** ”字样，其他信息每次都会变化。
```plaintext
StringFileInfo
---------------
language ID: 0x0409
code page: 0x04b0
CompanyName: Doubtsoftware.com 
FileDescription: Advanced Task Scheduler 32-bit Edition 
FileVersion: 4.1.0.612 
InternalName: #dvenced Task Scheduler 32-bit Edition 
LegalCopyright: Copyright © Southsoftware.com, 2002-2015 
OriginalFilename: Bifscheduler_edmin.exe 
ProductName: Advanced Task Scheduler 32-bit Edition 
ProductVersion: 4.1.0.612
```

此外，调试信息类型未知，因此Portex无法提供更多分析信息。
```plaintext
Debug Information
*****************
Time Date Stamp: Thu Dec 09 05:07:00 CET 2083
Type: 4102553603 (no description available)
```

通过十六进制编辑器搜索“RSDS”，可以找到一个看似随机的调试路径：
```plaintext
Z:as28cxkoaoazoozykzl0tjxw9y4cnijyc6mq3mvnt.pdb
```
尽管这些信息对脱壳帮助不大，但可以作为识别这种加壳器的特征。进一步的字符串和导入表检查也无明显帮助。

如果你拿到的是较早的样本，可以通过动态调试轻松识别出它是Locky。但如果样本较新或C&C服务器不再工作，它可能不会执行加密操作。

现在我们使用Ollydbg进行调试。请确保为虚拟机创建快照。程序加载后，按F8单步执行，注意不要跳过关键步骤。如果在某个call指令上不小心按了F8，会导致样本执行大量操作，这时需要重新加载样本。正确的方法是在call指令处按F7进入。

在地址0x402364处，你会看到代码正在写入.rdata段（地址0x417EE）。在此处设置断点并按F9继续运行，在数据窗口中观察.rdata段的内存位置，可以看到其解密过程。

跳转到.rdata段的jump命令位于地址0x4020F0。这里需要注意，push命令后紧跟ret相当于一个jump操作。ret命令会使你跳转到0x41577A。对比PortexAnalyzer生成的报告或Ollydbg的内存窗口，可以确认这是.rdata段的虚拟地址。

然而，我们的工作尚未完成。.rdata段中的解密代码仍然是加壳stub（用于解密加壳后的代码）。继续按F8跟踪这段代码，你会看到代码开始使用GetProcAddress收集常见DLL方法的地址，其中一个方法是RtlDecompressBuffer，该方法常用于脱壳操作。

调试到地址0x415B37时停下，在eax寄存器上右击选择反汇编器跟进。此时可以看到RtlDecompressBuffer方法的代码。在PUSH DWORD PTR [EBP + C]命令处设置断点，并在EDI寄存器上右击选择数据窗口跟进。初始状态下，数据窗口为空。按F8后，解密后的代码会出现在这部分内存中。

最后一步，打开内存窗口，选择这部分内存，右击选择保存到可执行文件。选择保存位置后，即可获得脱壳后的Locky二进制文件。你可以将其加载到十六进制编辑器中查看字符串，确认这是一个Locky样本。