Concurrency
8
Fig. 5: RSA Decryption Performance
Overall Performance at the Application Level. We then
evaluate the performance of Copker, when it is incorporated
with other programs. In particular, Copker is integrated into
the Apache web server as an RSA component. We measure
the throughput of the HTTPS server for varying numbers of
concurrent requests.
On the server side, Apache serves a 5 KB html web page
under HTTPS protocol with TLSv1.2 using AES128-SHA
cipher suite. The client runs on another computer in the 1 Gbps
LAN network with the server. We use ApacheBench [49] to
issue 10K requests for each approach with various numbers of
concurrent clients.
As shown in Figure 6, the expected upper limit of each
approach is shown in a solid line. These limits are taken from
the maximum value in Figure 5 for each approach. We can
see that all of the three approaches are very close to their
limits, when concurrency level reaches 200. However, Copker
increases slower than others. For example, when the concurrent
request number reaches 20, the modiﬁed PolarSSL achieved
94.4% of its full capability and the original PolarSSL achieved
91.9%. Meanwhile, Copker can only serve 89.15 requests per
second, which is only 73.1% of its maximum speed.
Impact on Concurrent Applications. As Copker forces other
cores in the same cache-sharing core set to enter the no-ﬁll
mode, the performance of other tasks on these cores may
be affected. We use the benchmarking utility SysBench [48]
to measure the impact, with a single RSA decryption thread
running at different densities. We run SysBench in its CPU
mode to do computing-intensive tasks. During the test, the
benchmark launches 4 threads to issue 10K requests. Each
10
d
n
o
c
e
s
r
e
p
s
t
s
e
u
q
e
R
 300
 250
 200
 150
 100
 50
 0
 0
Copker
Modified PolarSSL
Original PolarSSL
 20  40  60  80  100  120  140  160  180  200
Concurrency
Fig. 6: Apache Benchmark
request consists in calculation of prime numbers up to 30K.
The measured score is the average elapsed time for each
request. Note that when SysBench spends more time on the
task, it indicates that Copker brings higher impacts on the
concurrent applications.
In Figure 7, the baseline is measured in a clean environment
without any RSA decryption task. At the same decryption
frequency, the original PolarSSL performs the best among
the three. This is because the original PolarSSL spends less
time on each decryption, thereby can spares more computation
resources for benchmark tasks. Although Copker performs the
worst, the additional overhead is acceptable compared with the
original PolarSSL.
)
s
m
(
e
m
i
t
t
s
e
u
q
e
r
-
r
e
P
 7.5
 7
 6.5
 6
 5.5
 5
Copker
Modified PolarSSL
Original PolarSSL
Baseline
10
20
50
Decryption frequency(times/sec)
30
40
max
Fig. 7: Impact on Concurrent Applications
C. Discussions
As we have discussed, Copker occupies a CPU core during
its decryption/signing operations. In the Q8200 CPU, Copker
performs more than 120 decryptions (with 2048-bit RSA
key) per second, which is sufﬁcient for many cryptographic
applications. In the meantime, CPU cores that share L2 cache
11
with the Copker core is forced into no-ﬁll mode, so that
sensitive data in the cache is protected. However, such design
also introduces an unavoidable impact on the performance
of programs running on the other core, since caches cannot
be ﬁlled with new data during the computation. Performance
degradation becomes severe with newer CPUs, which have a
L3 cache shared by all cores. First, shared L3 cache prevents
Copker from concurrent operations, since two active Coker
threads are mutually exclusive on the L3 cache. Meanwhile,
all the other cores have to enter no-ﬁll mode, when a Copker
thread is running in active mode.
To mitigate the performance impact in certain applications,
we are designing an intelligent scheduling mechanism. The
basic idea is to add a hold mode to Copker. In the hold
mode, Copker collects and holds decryption/signing requests,
without performing the operations. Hence, cache lines are
not exclusively occupied, and other processes are expected
to operate as usual. At time interval t (approximately 0.5 to
2 seconds), Copker switches to active mode (possibly multi-
threaded) to process all the on-hold requests. As a result,
the performance of Copker can be improved by reducing the
frequency of switches between the active and suspend modes.
Meanwhile, it decreases the performance impact to the tasks
running on other cores by reducing the frequency of forcing
them into no-ﬁll mode. Note that this solution is only effective
in some application scenarios, in which decryption/signing
requests arrive at medium frequency, and a small delay could
be tolerated for such requests. We plan to further implement
this approach in our future work.
VI. SECURITY ANALYSIS
In Section III, we have shown that Copker conﬁnes kilo-
bytes of sensitive data in on-chip CPU caches, to defeat against
physical attacks, such as the cold-boot attack. Moreover, with
intensive experiments, we have validated that our implemen-
tation of Copker is correct and no sensitive information is
leaked to RAM, as shown in Section V-A. In this section, we
provide a theoretical analysis on Copker’s resistance against
various attacks, such as memory-based attacks, misuses of
existing kernel API, and issues with the implementations of
asymmetric cryptographic algorithms. We also present
the
remaining attacking surface, which includes some extremely
difﬁcult hardware attacks.
A. OS-Level Attacks
•
•
For Copker to operate securely, the following conditions
should be held. We will ﬁrstly discuss the validity of these
conditions, possible attacks and controls. We will then discuss
two special scenarios: OS crash, and ACPI states S3 and S4.
The Copker decryption/signing task cannot be inter-
rupted by other tasks;
The address space of Copker is not accessed by any
other process, when Copker runs in active mode, i.e.,
when Copker is computing with private key;
The cache of the computing task cannot be inﬂuenced
by other cores;
The memory of kernel space cannot be swapped into
the disk.
•
•
The ﬁrst condition is partly satisﬁed, since Copker disables
task scheduling and local interrupts, before performing pri-
vate key operations. However, processor-generated exceptions
(invalid opcode, segment not present, etc.) and non-maskable
interrupts (NMIs) cannot be disabled through software settings.
Processor-generated exceptions can be eliminated through
careful programming. On the other hand, NMIs are unavoid-
able. They are generated in two ways: (1) interprocessor inter-
rupts (IPIs) from advanced programmable interrupt controller
(APIC), and (2) external hardware failures. NMI IPIs are
widely used to implement software watchdogs to reboot the
machine, when the system is stuck. Meanwhile, an adversary
could easily trigger external hardware failures, for instance,
by overheating the CPU chip. Since NMIs are unavoidable,
we need to prevent adversaries from exploiting such NMIs
to access sensitive information in cache. That is, the NMI
handler needs to be modiﬁed to clean cacheCryptoEnv in
L1D cache immediately after NMI is triggered. Besides, the
registers have to be cleared too.
The second condition is mostly ensured with the operating
system. In the analysis, we distinguish attackers with different
privileges: (1) unprivileged attackers have no way to access
other’s memory, because Linux kernel enforces process iso-
lation. (2) Privileged attackers may have ways to execute or
even modify ring 0 functions – by inserting self-written kernel
modules, any code can be executed; by reading /dev/mem,
any memory in kernel space can be read. Copker should be
compiled without loadable kernel module (LKM) and KMEM
support to withstand such privileged attacks.
For the third condition, as we have patched the kernel to re-
strict wbinvd() and write_cr0() from being called when
Copker is running, neither unprivileged nor privileged attackers
could inﬂuence Copker’s cache. Finally, the last assumption
is immediately satisﬁed as the Linux kernel enforces an un-
swappable kernel space memory.
When OS crashes, the system kernel’s memory may be
dumped to the disk automatically. This feature is supported by
kernel’s crashdump (Kdump), which utilizes kexec to quickly
boot to a dump-capture kernel. As a result, sensitive data in
cacheCryptoEnv is ﬂushed out to the RAM and contained
in the dump, which will be stored on disk. An attacker may
take advantage of this system feature, to cause the kernel to
crash when Copker is running, by inducing system errors,
through either software or hardware. As a countermeasure,
kexec should not be compiled with kernel, to disallow crash
dumps.
Finally,
if ACPI
state S3 (suspend-to-RAM) or S4
(suspend-to-disk) [25] happens while Copker is in the active
mode, we need to ensure that sensitive data cannot be ﬂushed
into RAM. Before the ACPI calls (.prepare and .enter)4
are issued, the Linux kernel signals all user processes and some
kernel threads to call __refrigerator(), which puts the
caller into a frozen state [50]. Because this call has to wait
until Copker leaves the atomic section, nothing sensitive may
be written in the RAM or disk.
4These calls work in a way similar to BIOS functions.
12
B. Attacks directly on Copker
We ﬁrst consider the protection of the password and the
master key. Copker employs TRESOR to protect the master
key, hence, the master key in debug registers is immune to
cold-boot attacks and all analyses of TRESOR also apply
to the AES portion of Copker. In particular, during system
booting, the kernel (assumed safe) directly reads the password
from user, and then derives the master key. All the memory
traces during derivation are carefully cleaned, so that both
the password and the master key are safe against memory-
based attacks. In TRESOR, when the computer wakes up
from suspend mode,
the administrator has to type in the
password again to re-derive the master key (and to access the
encrypted hard disk), or he/she has to reboot the computer and
enter the password during OS boot-up. This gives attackers
more chances if they intend to launch keystroke-logger-based
attacks. Unlike TRESOR, we do not need to support master
key re-derivation in Copker. Since the AES key is not used to
encrypt the hard disk, the computer can still function without
the master key. However,
if Copker is needed to provide
private key services (signing or decryption), the unavailability
of the master key can be notiﬁed to users through an error
code. Meanwhile, the master key needs to be re-deviated by
rebooting the machine.
Next, we discuss the security of the asymmetric cryp-
tographic algorithm and its implementation in Copker. At
present, our prototype supports raw RSA private key de-
cryption, which is considered to have security breaches [10].
To defeat such attacks, we plan to implement the PKCS#1
standard [28], a provably secure RSA improvement. However,
our proof-of-concept prototype has already demonstrated the
advantage of computing without RAM, which is the essence
of Copker. Meanwhile, other asymmetric cryptosystems could
also be implemented in Copker, since the size of CPU cache
is capable to handle such operations.
The last issue is the category of side-channel attacks on the
implementations of cryptographic algorithms. Theoretically,
for a provably secure asymmetric cryptosystem, decryption or
signing operations do not leak any information on the private
keys [6]. Cache-timing attacks [41] utilize the fact that a spy
process running in parallel with the encryption/decryption pro-
cess (the victim process) can manipulate the shared cache, thus
inferring information by observing memory access timings of
the victim process. Copker is obviously immune to this type of
attacks, since the Copker process only accesses cache during
the computations, while no parallel process is allowed on the
cache. A recent work found a possible timing attack against
the RSA implementation in PolarSSL [2]. This issue was ﬁxed
in the most recent release of PolarSSL. Moreover, there are
many designs that are resilient to such side-channel attacks,
e.g., RSA-blinding [12]. These designs will be employed to
improve Copker in the future.
C. Attacks on Hardware
We consider the possibility that the attacker reboots the
computer with a malicious booting device (e.g. external USB
drive), aiming to image the cache content in a similar way to
cold-boot attacks. From the attacker’s perspective, if the cache
lines were not cleared after rebooting and the attacker knew
the physical address of the corresponding cache line, cache
content might have been captured immediately. However, such
attack does not work, since internal caches are invalid after
power-up or reset [27]. Even though data may remain in
cache (depending on the hardware features of the caches), read
operation would fetch data from RAM, thereby data in cache
is overwritten.
One possible way to fetch data in caches is to directly
read the status of transistors in the SRAM cell, or infer
the data by side channels, such as electromagnetic ﬁeld and
power consumption. However, although such attacks might be
effective to Copker, they are extremely difﬁcult in practice, if
not impossible. Theoretically, cryptographic algorithms cannot
function without using internal storage (e.g., memory, cache),