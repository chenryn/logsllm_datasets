subsystem to transfer control from the RMTN handler appli-
cation back to the application level protocol running on the
original remote server.
In short, the information contained in an RMTN-RDR message
enables the client to contact an appropriate helper (or helpers) for
the purpose of authorization via trust negotiation, and allows the re-
mote helper to determine which resource protection policy it should
use in the resulting trust negotiation session. The RMTN-RCP
message is used to encapsulate the state of the resulting trust ne-
gotiation, and allows the server to validate how and why the client
became authorized to access its service.
4.2 Basic RMTN
The basic form of our proposed RMTN protocol is illustrated
in Figure 1. This protocol begins when a client requests a policy-
protected resource from a server (message A). The server, recog-
nizing that the request is for a policy-protected resource, issues a
RMTN-RDR message to the client that designates (at least) one re-
mote helper that the client should use in order to off-load the hard
Figure 1: Basic RMTN protocol.
work from the server (message B). Based on the parameters in
the RMTN-RDR message, the client and helper enter into a trust
negotiation session in order to ﬁnd a set of the client’s credentials
that satisfy the resource access policy (messages C). Assuming a
satisfying set of credentials for the policy can be found, the helper
server generates a RMTN-RCP message for the client that encap-
sulates a digitally-signed, minimal representation of the protocol
state (message D).
The client can then present this receipt to the server (message
E). After verifying that the signature on the receipt was created by
an authorized helper and that the credentials presented by the client
match those identiﬁed in the receipt, the server can verify that the
credentials satisfy the policy implied by the client’s resource re-
quest and serve the resource (message F ). This is accomplished by
invoking a policy compliance checker on the policy protecting the
resource and the set of credentials provided by the client. This step
allows the server to “check the work” of the helper for correctness
without requiring the server to execute the entire protocol.
Client/Server Delay Trade-Offs. The response time gains
should be immediately realized in RMTN provided that the time
to perform TN is much greater than the time to serve the resource
originally requested. The time on the server to process a resource
request is O(Stn + Sr), where O(Stn) is the time to negoti-
ate trust with the client and O(Sr) is the time to serve the re-
source. The addition of a helper changes the response time to
O(Srdr + Htn + Crcp + Sr), where O(Srdr) is the time to
send the client the RMTN-RDR message, O(Htn) is the time to
negotiate trust on the helper and O(Crcp) is the time the client
takes in transmitting the receipt to the server. However, O(Htn)
occurs on the helper, so local processing resources on the server are
only O(Srdr + Crcp + Sr). And if we assume delivery time of
messages is negligible compared to TN or serving resources, then
the server is characterized by O(Sr).
Obviously, the response time the client sees is still limited by
O(Htn + Sr), but if the server has sufﬁcient work, and the time
to serve a resource is much less than the time to negotiate trust,
i.e., O(Sr) (cid:28) O(Stn), then the signiﬁcant amount of time not
spent in TN on the server can be used to process more requests—
the aggregation of clients reap the improved response time. This
expected load-balancing advantage is validated in Section 5.
A. Resource RequestE. RMTN-RCPF. ResourceHelperD. RMTN-RCPC. TN SessionB. RMTN-RDRClientServer(“Remote Helper”) shows the intuition behind RMTN: allowing the
server to focus on serving content can ensure that content is served
efﬁciently. In particular, RMTN allows server throughput to remain
comparable to the baseline case (i.e., “No TN”) even when serving
thousands of clients per minute.
6. RELATED WORK
Trust negotiation has been an active area of research within the
security community over the last several years. In addition to re-
search on foundational issues like languages for expressing resource
access policies (e.g., [5, 6, 14]) and logics for reasoning about the
outcomes of negotiations (e.g., [8,22]), a number of research groups
have developed trust negotiation implementations for the purposes
of experimentation [7, 13, 21]. Others have also looked at opti-
mizations to the trust negotiation process, though these optimiza-
tions are typically related to either the amount of information re-
vealed during or the efﬁciency of a single trust negotiation ses-
sion [7, 12, 16, 23]. In contrast, we focus on optimizing the way in
which a server handles many concurrent trust negotiation sessions.
In many ways, receipt-mode trust negotiation can be classiﬁed as
a load balancing mechanism. Several techniques for load balancing
appear in the domain of networking (e.g., [2, 3, 10]). In these solu-
tions, packets or network ﬂows are assigned to a pool of resources
to avoid overloading any particular resource, increasing the relia-
bility and throughput. To the best of our knowledge, load balancing
has not been previously applied within the realm of trust negotia-
tion. Naive replication of server-side credentials increases the like-
lihood of compromising the server’s long-term secrets; our RMTN
protocols avoid this problem by replicating short-lived proxy cer-
tiﬁcates that allow helper nodes to operate on the server’s behalf
without risking the safety of long-term secrets.
The crux of the RMTN protocol is its ability to allow servers
safely delegate the execution of a trust negotiation session to a set
of helper nodes. Outsourcing of security protocols has been consid-
ered within the context of cryptographic puzzles (e.g., [4, 11]) that
force clients to carry out an expensive computation prior to being
granted access to a server. To be effective, puzzles need to be inex-
pensive to generate and verify, yet hard to solve. Waters et al. [19]
show how puzzle generation can be ofﬂoaded to a so-called bastion
to reduce the computational burden at servers. Although similar in
spirit to RMTN, these puzzles are used to rate-limit requests rather
than authenticate users.
7. CONCLUSIONS AND FUTURE WORK
Trust negotiation has been proposed as an expressive means of
access control for open environments in which users and resources
may not have a priori established relationships. Despite its advan-
tages, the state management overheads associated with conducting
many trust negotiation sessions can be signiﬁcant. In this paper,
we proposed remote-mode trust negotiation (RMTN) as a means
of mitigating these costs. RMTN safely delegates the interactive
portions of the trust negotiation process to helper nodes that carry
out the trust negotiation process and generate third-party veriﬁable
receipts attesting to the outcomes of the processes. As a result,
resource servers need only to verify this receipt prior to serving
content, which is a lightweight process. We proposed the RMTN
protocol in this paper, experimentally veriﬁed that RMTN greatly
decreases server response time, and showed that the use of the pro-
tocol compromises neither the correctness of the trust negotiation
process nor the long-term credentials held by the resource server.
In the future, we hope to extend this work in two directions.
First, it would be beneﬁcial to carry out experiments that test the
Figure 2: Average request delay per webpage download with
and without trust negotiation enabled (log scale y-axis).
A Note on Initial Conﬁguration. Before either of the above
RMTN protocols can be used, the helper nodes deployed in the
system require certain conﬁguration information. Speciﬁcally, each
helper node needs (i) an identity certiﬁcate and signing key, (ii)
proxy certiﬁcates for each of the server attribute certiﬁcates that it
will have access to, and (iii) copies of the server policies that it
will be relied upon to enforce. While conﬁguring the long-lived
identity certiﬁcates for a helper node should happen in an ofﬂine
manner, the remainder of the conﬁguration can take place over a
private and authenticated channel (e.g., a TLS tunnel [9]) in an on-
demand manner. This type of on-the-ﬂy provisioning is typical in
the grid environments for which proxy certiﬁcates were originally
designed, and does not conﬂict with our security goals.
5. EXPERIMENTAL EVALUATION
Our RMTN evaluation infrastructure is comprised of ﬁve AMD
Opteron 1352 (1GHz) processor-based servers, and a single P5-
based host running Linux 2.6.9. One AMD server, running Apache
httpd 2.0.52, acts as the resource server; two AMD servers act as
trafﬁc generators; two AMD servers are used as RMTN helpers;
and the lower-end host acts as a simple client process used to mea-
sure system response times. We generate trafﬁc to our web server
that ramps up from 4k requests to 18k requests (average over 5
minute intervals). Our web server has HTML ﬁles of ≈ 300KB,
up to ≈ 700KB. One page is protected by an extremely simple
TrustBuilder2 policy (the policy requires nine credentials to be ex-
changed within two rounds, i.e., three TrustBuilder2 messages, dur-
ing trust negotiation prior to termination). A client session consists
of one access to a protected resource, and nine subsequent accesses
to unprotected resources.
To validate the performance of RMTN, four conﬁgurations were
tested measuring average response time (see Figure 2 and note the
log scale Y axis). “No TN” represents a baseline without trust ne-
gotiation, in which the response time is about 100ms, regardless of
the load (i.e., the server was not the bottleneck). “TN on Server” is
when the server itself executes trust negotiation causing delays of
up to two orders of magnitude on every page access (i.e., not just the
policy-protected page). “TN w/Naive Replication” initially shows
improvement, however, as the workload increases naive replication
begins to suffer similar to the “TN on Server”, not surprisingly. Fi-
nally, when trust negotiation is off-loaded to a remote helper node
 10 100 1000 10000 10000018k16k14k12k10k8k6k4k2kMillisecondsRequests per 5 min PeriodAverage Request Processing DelayNo TNTN on ServerTN w/Naive ReplicationRemote Helper[14] N. Li and J. Mitchell. RT: A role-based trust-management
framework. In Third DARPA Information Survivability
Conference and Exposition, Apr. 2003.
[15] W. Nejdl, D. Olmedilla, and M. Winslett. Peertrust:
Automated trust negotiation for peers on the semantic web.
In LDB Workshop on Secure Data Management (SDM),
volume 3178 of Lecture Notes in Computer Science, pages
118–132, 2004.
[16] T. Ryutov, L. Zhou, C. Neuman, T. Leithead, and K. E.
Seamons. Adaptive trust negotiation and access control. In
10th ACM Symposium on Access Control Models and
Technologies, June 2005.
[17] A. Squicciarini, E. Bertino, E. Ferrari, F. Paci, and
B. Thuraisingham. Pp-trust-x: A system for privacy
preserving trust negotiations, 2007.
[18] S. Tuecke, V. Welch, D. Engert, L. Pearlman, and
M. Thompson. Internet X.509 Public Key Infrastructure
(PKI) Proxy Certiﬁcate Proﬁle. RFC 3820 (Proposed
Standard), June 2004.
[19] B. Waters, A. Juels, J. A. Halderman, and E. W. Felten. New
client puzzle outsourcing techniques for DoS resistance. In
Proceedings of the 11th ACM Conference on Computer and
Communications Security, pages 246–256, Oct. 2004.
[20] W. H. Winsborough and N. Li. Automated trust negotiation.
In In DARPA Information Survivability Conference and
Exposition, volume I, pages 88–102. IEEE Press, 2000.
[21] M. Winslett, T. Yu, K. E. Seamons, A. Hess, J. Jacobson,
R. Jarvis, B. Smith, and L. Yu. Negotiating trust on the web.
IEEE Internet Computing, 6(6):30–37, Nov./Dec. 2002.
[22] M. Winslett, C. Zhang, and P. A. Bonatti. PeerAccess: A
logic for distributed authorization. In Proceedings of the 12th
ACM Conference on Computer and Communications
Security (CCS 2005), Nov. 2005.
[23] T. Yu, M. Winslett, and K. E. Seamons. Supporting
structured credentials and sensitive policies through
interoperable strategies in automated trust negotiation. ACM
Transaction on Information and System Security (TISSEC),
pages 1–42, February 2003.
utility of inexpensive platforms for RMTN. As the main drawback
of trust negotiation is its serial nature, rather than computational
or communication overheads, it seems reasonable to expect that
RMTN helpers can be much less powerful than resource servers.
The ability to leverage old or outdated hardware to respond dy-
namically to the changing access needs of an organization would
solidify RMTN’s utility over that of naive replication of resource
servers. Second, protocols that enable the resource server to syn-
chronize policies and proxy certiﬁcates with its helpers in an efﬁ-
cient manner need to be researched to allow servers to keep their
security environment consistent.
Acknowledgements. This research was supported in part by
the National Science Foundation under awards CCF–0916015, CNS–
1017229, CNS–0964295, CCF–0811295, and CNS–1012070.
8. REFERENCES
[1] Information technology - open systems interconnection - the
directory: Public-key and attribute certiﬁcate frameworks,
March 2000.
[2] Link aggregation (ieee 802.1ax), 2008.
http://ieeexplore.ieee.org/xpl/freeabs_
all.jsp?arnumber=4668665,.
[3] Y. Amir, R. Caudy, A. Munjal, T. Schlossnagle, and C. Tutu.
N-way fail-over infrastructure for reliable servers and
routers. In DSN, pages 403–, 2003.
[4] T. Aura, P. Nikander, and J. Leiwo. Dos-resistant
authentication with client puzzles. Cambridge Security
Protocols Workshop 2000, Apr. 2000.
[5] M. Y. Becker and P. Sewell. Cassandra: Distributed access
control policies with tunable expressiveness. In 5th IEEE
International Workshop on Policies for Distributed Systems
and Networks, 2004.
[6] E. Bertino, E. Ferrari, and A. C. Squicciarini. X -TNL: An
XML-based language for trust negotiations. In Proceedings
of the 4th IEEE International Workshop on Policies for
Distributed Systems and Networks (POLICY ’03), 2003.
[7] E. Bertino, E. Ferrari, and A. C. Squicciarini. Trust-x: A
peer-to-peer framework for trust establishment. IEEE
Transactions on Knowledge and Data Engineering,
16(7):827–842, 2004.
[8] P. Bonatti and P. Samarati. Regulating service access and
information release on the web. In 7th ACM Conference on
Computer and Communications Security, pages 134–143,
2000.
[9] T. Dierks and E. Rescorla. The Transport Layer Security
(TLS) Protocol Version 1.2, Aug. 2008.
[10] C. C. Fan. The raincore distributed session service for
networking elements.
[11] A. Juels and J. Brainard. Client puzzles: A cryptographic
countermeasure against connection depletion attacks.
Proceedings of NDSS ’99 (Networks and Distributed
Security Systems), pages 151–165, 1999.
[12] A. J. Lee and M. Winslett. Towards and efﬁcient and
language-agnostic compliance checker for trust negotiation
systems. In 3rd ACM Symposium on Information, Computer,
and Communication Security (ASIACCS ’08), Mar. 2008.
[13] A. J. Lee, M. Winslett, and K. J. Perano. Trustbuilder2: A
reconﬁgurable framework for trust negotiation. In Third IFIP
WG 11.11 International Conference on Trust Management
(IFIPTM 2009), June 2009.