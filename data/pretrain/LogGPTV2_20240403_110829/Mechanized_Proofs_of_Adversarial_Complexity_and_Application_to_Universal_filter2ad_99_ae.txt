of quantitative UC definitions such as the one we adopt. For this reason, as we show
below, we also do not need to keep the dummy adversary explicitly in the real world.
Protocol$\mathcal{F}$HybridParty 1Party nEnvironmentIOIOIdeal FunctionalityEnvironmentIOBACKDOORBACKDOORSIMULATORSession 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2550inherits an important property from the general UC framework:
that including an explicit adversary in the real world that colludes
with an arbitrary environment to break the protocol leads to an
equivalent definition to the one we have, which assumes an (im-
plicit) dummy adversary that just follows the instructions of the
adversarial environment. Moreover, in our setting with concrete
costs, this is equivalent to our execution model where the dummy
adversary is implicit.
Universal Composability. The fundamental theorem of Universal
Composability is stated in our EasyCrypt formalization as follows.
Theorem 5.2 (Universal Composability). For all ϵρ , ϵπ ∈ R
+,
all ideal functionalities f , F , all protocols ρ(f ) and π, such that the
IO interfaces of π and f (resp. ρ and F ) are of the same type, all cost
ρ(f ), F,csim(ρ)
restrictions csim(ρ), csim(π), and all simulators Sρ ∈ τ
sim
and Sπ ∈ τ
Advuc,Sπ
π,f ,csim(π)
sim
, we have:
csim(π), ˆcenv(π)(π, f ) ≤ ϵπ ⇒ Advuc,Sρ
⇒ Advuc
csim(ρ), ˆcenv(ρ)(ρ(f ), F) ≤ ϵρ
ˆcsim,cenv(ρ(π), F) ≤ ϵρ + ϵπ
where ˆcenv(π) accommodates an environment that internally uses
cenv resources and additionally runs ρ, ˆcsim corresponds to the cost of
composing Sπ and Sρ , ˆcenv(ρ) allows for an adversarial environment
built by composing Sπ with an environment in cenv.
This theorem establishes that any protocol ρ(f ) that UC-emulates
a functionality F when relying on an ideal sub-component f offers
the same level of security when it is instantiated with a protocol π
that UC-emulates f . The proof first shows that the simulator Sπ
that exists by hypothesis can be converted into a simulator that
justifies that ρ(π) UC-emulates ρ(f ): intuitively this new simulator
uses Sπ when interacting with the backdoors of f and just passes
along the environment’s interactions with the backdoors of ρ. This
part of the proof combines any successful environment Z against
the composed protocol into a successful environment that absorbs
ρ and breaks π. This justifies the cost restriction on cenv. Then,
we know by hypothesis that ρ(f ) UC emulates F , and the result
follows by applying the transitivity lemma, which also explains the
remaining cost restrictions.
Example: Composing key exchange with encryption. We conclude
this section with an example of the use of our framework and
general lemmas stated above for concrete protocols. Consider the
code snippets in Figure 10. On the left we show the inner structure
of a two-party protocol formalization (Diffie-Hellman) when one
assumes an ideal sub-component (in this case a bi-directional ideal
authenticated channel F2Auth exposing IO interface Pi.REAL.IO).
The full real-world configuration is obtained by applying a functor
CompRF that composes this protocol with F2Auth and exposes the
backdoors of both DHKE and F2Auth in a combined BACKDOORS
interface. The IO interface to this real-world protocol is simply
the input/output interface for both parties; parties take as input a
role (initiator/responder) and the identities of parties involved in
the protocol (type unit pkg); they output a session key when the
protocol completes.
The Initiator code is shown in Figure 11. On initialization it sam-
ples its ephemeral key pair and resets the derived key. When the
environment provides input, which includes the identities of the
parties that will take part in the key exchange, the ephemeral public
key is transmitted via one of the ideal authenticated channels. The
party then returns control to the environment (note that delivering
a message to the authenticated channel does not pass control to
the authenticated channel). When the environment calls step, the
initiator checks the incoming ideal channel to see if it received
a message. At any point the environment can check the initiator
output using output. The backdoor interface provides no information,
since all communications go through the authenticated channels.
The responder code is symmetric.
In the middle code-snippet of Figure 10 we give an example ideal
functionality for a simple one-shot unidirectional authenticated
channel; one party provides input with the party identities and
the message to transmit (type msg pkg), and the other party can
obtain the message if it calls outputs with matching identities (type
unit pkg.) The attacker can use the backdoor procedure to observe
the state of the channel, including the transmitted message and
the party identities and it can use the step procedure to control
when the message is delivered (the unlock operator changes the
state so that, if a message is buffered, then it is made available at the
output procedure) to the receiving party (get_message is checking
for identity consistency, which models authentication).
The example starts with a proof that the Diffie-Hellman protocol
on the left of Figure 10 UC-emulates the ideal functionality for
key exchange shown on the right of Figure 10 in a hybrid-real
world where the parties have access to authenticated channels. The
FKE functionality runs internally a state machine that waits for
both parties to provide input, and allows an adversary/simulator
interacting with its BACKDOORS interface to control when the
different parties obtain a fresh shared secret key. This result is
stated as follows; note the accounting of resources spent by the
combined Diffie-Hellman attacker, making it explicit that the DDH
assumption must be valid for such an attacker.
Lemma 5.3 (Security of DHKE). Fix cddh ∈ R
+ and let ϵDDH
be the maximum advantage of any DDH attacker against the group
over which we implement DHKE. Then, we have that
Advuc
csim(DHKE),cenv(DHKE)(DHKE(F2Auth), FKE) ≤ ϵDDH
where csim(DHKE) is the cost of a concrete simulator SDHKE that just
samples random group elements as the protocol messages and mimics
the states of the real-world parties and F2Auth; cenv(DHKE) must be such
that cddh accommodates the cost of an adversary that runs internally
the entire UC emulation experiment (including the environment) and
interpolates between the real and ideal worlds, depending on the
external DDH challenge.
The second result shows that the ideal functionality for key ex-
change can be combined with one-time-pad encryption to transform
a one-shot authenticated channel into a one-shot secure channel
that also guarantees confidentiality. Formally:
Lemma 5.4 (Security of OTP). Fix any cenv(OTP). Then we have
Advuc
csim(OTP),cenv(OTP)(OTP(FKE, FAuth), FSC) = 0
where csim(OTP) is the cost of a concrete simulator SOTP that just
samples a random string in place of the ciphertext and mimics the
states of the real-world parties, FKE and FAuth.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2551module (DHKE : RHO) (F2Auth: Pi.REAL.IO) = {
module Initiator = { · · · }
module Responder = { · · · }
proc init() : unit = { Initiator.init(); Responder.init(); }
proc inputs(r : role, p : unit pkg) : unit = {
if (r = I) { Initiator.inputs(p); }
else { Responder.inputs(p); } }
proc outputs(r : role) : group option = { · · · }
proc step(r : role) : unit = { · · · }
proc backdoor(r : role) : unit option = {
var rr;
if (r = I) { rr ← Initiator.backdoor(); }
else { rr ← Responder.backdoor(); }
return rr; }}.
module FAuth : PROTOCOL = {
var st : state
proc init() : unit = { st ← init_st; }
proc inputs(r : role, p : msg pkg) : unit = {
st ← set_msg st r p;
}
proc outputs(r : role, p : unit pkg) : msg option = {
return get_msg st r p;
}
proc step() : unit = {
st ← unblock st; }
proc backdoor() : leakage option = {
return leak st;
}}.
module FKE : PROTOCOL = {
var st : state
$←− gen; st ← init k; }
proc init() : unit = { k
proc inputs(r : role, p : unit pkg) : unit = {
st ← party_start st r p; }
return party_output st r; }
proc outputs(r : role) : key option = {
proc step() : unit = { st ← unblock st; }
proc backdoor() : leakage option = { return leak st; }}.
Figure 10: Examples of real-world (left) and ideal-world protocols (middle and right). Left: structure of a Diffie-Hellman pro-
tocol relying on FAuth for authenticated communication (one shot each way). Middle: ideal functionality for one-shot authen-
ticated channel FAuth. Right: ideal functionality for key exchange.
module Initiator = {
proc init() : unit = { st ← IInit; _x
proc inputs(_p : unit pkg) : unit = {
if (st = IInit) { p ← _p; Auth.inputs(Left (I, (snd p, rcv p, _X))); st ← ISent; }}
proc outputs() : group option = { return _K; }
proc step() : unit = {
$←− FDistr.dt; _X ← g^_x; _K ← None; }
if (st = ISent) {
_Y ← Auth.outputs(Right (R, (rcv p, snd p, ())));
if (_Y (cid:44) None) { _K ← Some (oget (getr (oget _Y)) ^ _x); st ← IDone; }
}}
proc backdoor() : unit option = { return None; }}.
Figure 11: Diffie-Hellman Initiator.
Here, FSC represents the secure channel ideal functionality, which
operates exactly as Fauth, but does not leak the transmitted mes-
sage; leakage includes only information on the state of the channel.
The protocol runs in a hybrid world where it has access to both
FKE and Fauth, uses the former to obtain a shared key between the
two parties, and then transmits the one-time-padded message using
Fauth. We apply our Universal Composability theorem to derive that
FKE can be replaced by the DHKE protocol, resulting in a protocol
that still UC-emulates the secure channel functionality. The final
theorem is stated as follows.
Theorem 5.5 (Security of OTP composed with DHKE). Fix
+ and let ϵDDH be the maximum advantage of any DDH
cddh ∈ R
attacker against the group over which we implement DHKE. Then
Advuc
csim,cenv(OTP(DHKE, FAuth), FSC) ≤ ϵDDH
where cenv is constrained so that cenv(DHKE) accommodates an en-
vironment that internally uses cenv resources and additionally runs
OTP, and csim corresponds to the cost of composing SOTP and SDHKE.
The crucial application of the complexity restrictions is visible in
the attacker against the DDH assumption, which now has a more
complex structure that results from the application of the composi-
tion theorem: for this application of composition to be meaningful,
it is crucial that the global environment is computationally bounded
(even though the OTP protocol is information-theoretically secure)
as a function of cddh, as otherwise the reduction to DDH would be
meaningless. Indeed, the class of DDH attackers must allow for the
extra resources required to run a simulation of OTP protocol in the
reduction. Note also that the execution time of the global simulator
is given by SOTP and SDHKE, which are very efficient; hence the
UC emulation result has a small simulation overhead [17, 18].
For the proof we used an auxiliary lemma, which is a special-
ization of the Universal Composability theorem for the case where
the hybrid functionality is the parallel composition of two ideal
functionalities and we apply the Universal Composability theorem
to instantiate only one of them.
Our formalization vs EasyUC. Our Diffie-Hellman example is an
alternative formalization of the example given by Canetti, Stoughton
and Varia [20] for the EasyUC framework. We borrow it because, as
in [20], it is a good toy example with which to validate and demon-
strate our formalization. This example is also convenient to show
that the approach in this paper and EasyUC in effect complement
each other. An important design goal of EasyUC is to follow the UC
execution model as closely as possible; this allows a more direct
translation of protocols and ideal functionalities.
In contrast, our goal is to take advantage of the EasyCrypt ma-
chinery to reduce proof effort and development size: our devel-
opment (including complexity) takes 2300 lines of code and it
includes general UC theorems that can be reused in future work;
this compares to 18K lines of code for EasyUC.9 The downside of
our approach is the impact in the way one specifies protocols and
ideal functionalities: message passing corresponds to procedure
calls, and these must adhere to the EasyCrypt tree-based procedure
call semantics. For example, we do not allow an execution envi-
ronment where a party communicates with an ideal functionality
arbitrarily without relying on the environment for scheduling; one
could of course formalize a message passing mechanism on top
of EasyCrypt as in [20] to allow for this, but this would then fall
out of the scope of our general composition theorems. Moreover,
9The count excludes general purpose libraries, but we should note that the exact
numbers are not important, as the size of a development varies significantly with style
of coding and the use of automation.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2552it would lead to larger developments and increased proof effort,
which would defeat our original purpose.
In short, one can think of the EasyUC approach as a front-end
for cryptographers, and our approach as a convenient back-end
for conducting the machine-checked proofs. We leave it as an in-
teresting direction for future work to develop a sound translation
between these two approaches to modeling UC for a representative
class of protocols such as those considered in [19]. Another interest-
ing direction for future work is to identify UC security proofs that
cannot be naturally expressed using our approach to formalizing
UC and to investigate how it can be extended to deal with these
examples.
6 RELATED WORK
Cost analysis. There is a very large body of work that uses pro-
gram logics for cost analysis of imperative programs. [29] uses
Hoare logic for proving upper bounds on execution time of de-
terministic programs. In the probabilistic setting, [25] uses a pre-
expectation calculus inspired from Kozen [26] and Morgan, McIver
and Seidel [28] to compute upper bounds on the expected cost of
probabilistic programs. In contrast, cryptography primarily consid-
ers worst-case execution times. In addition, there is a long line of
work on automating cost analysis, both for deterministic and for
probabilistic programs, see e.g. [1, 14, 22]. These techniques could
be helpful to alleviate users efforts, and connecting with tools that
support them is an important direction for future work.
Computer-aided cryptography. CryptoVerif [13] is an automated
tool for computational security proofs. CryptoVerif uses approxi-
mate equivalences to find (or check) cryptographic reductions, and
keeps track of the complexity of adversaries. Most other tools for
computational security proofs, including CertiCrypt [9], Founda-
tional Cryptography Framework [30], and CryptHOL [11], share
their foundations and overall approach with EasyCrypt. However,
these tools offer limited support for complexity reasoning and
they do not support the use of modules for defining cryptographic
schemes and notions. This is not a fundamental limitation, since
these tools are embedded in a general-purpose proof assistant. How-
ever, extending these tools to achieve similar effects as our type-
and-effect module system and program logic for complexity would
represent a significant endeavor.
Our module system is inspired from EasyCrypt [7, 10]. However,
the EasyCrypt module system lacks complexity restrictions, which
hampers the use of compositional approaches. Beyond EasyCrypt,
several other tools and approaches use structures similar to modules
for formalizing cryptographic schemes and their security. Compu-
tational Indistinguishability Logic (CIL) [6] rely on oracle systems,
which are very closely related to our modules. Interestingly, the
main judgment of CIL establishes the approximate equivalence of