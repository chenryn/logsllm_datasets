    return 0; 
}; 
运行的结果为： 
this is box. color=1, width=10, height=20, depth=30 
this is box. color=1, width=123, height=20, depth=30 
我们可以看到，封装只能够在编译阶段保护类的私有对象。虽然 C++编译器禁止外部代码直接访问那
些被明确屏蔽的内部对象，但是通过适当的 hack 技术，我们确实能够突破编译器的限制策略。 
51.1.4  多重继承 
多重继承，指的是一个类可以同时继承多个父类的字段和方法。 
我们还是写个简单的例子： 
#include  
class box 
{ 
    public: 
        int width, height, depth; 
        box() { }; 
        box(int width, int height, int depth) 
        { 
            this->width=width; 
            this->height=height; 
            this->depth=depth; 
        }; 
        void dump() 
        { 
            printf ("this is box. width=%d, height=%d, depth=%d\n", width, height, depth); 
        }; 
        int get_volume() 
        { 
            return width * height * depth; 
        }; 
}; 
class solid_object 
{ 
    public: 
        int density; 
        solid_object() { }; 
        solid_object(int density) 
        { 
            this->density=density; 
        }; 
        int get_density() 
        { 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
521 
            return density; 
        }; 
        void dump() 
        { 
            printf ("this is solid_object. density=%d\n", density); 
        }; 
}; 
class solid_box: box, solid_object 
{ 
    public: 
        solid_box (int width, int height, int depth, int density) 
        { 
            this->width=width; 
            this->height=height; 
            this->depth=depth; 
            this->density=density; 
        }; 
        void dump() 
        { 
            printf ("this is solid_box. width=%d, height=%d, depth=%d, density=%d\n", width,  
     height, depth, density); 
        }; 
        int get_weight() { return get_volume() * get_density(); }; 
}; 
int main() 
{ 
    box b(10, 20, 30); 
    solid_object so(100); 
    solid_box sb(10, 20, 30, 3); 
    b.dump(); 
    so.dump(); 
    sb.dump(); 
    printf ("%d\n", sb.get_weight()); 
    return 0; 
}; 
在启用其优化选项（/Ox 和/Ob0）后，我们使用 MSVC 编译上述程序，重点观察 box::dump()、
solid_object::dump()以及 solid_box::dump()这 3 个类成员函数。 
指令清单 51.12  带/Ob0 参数的 MSVC 2008 优化程序 
?dump@box@@QAEXXZ PROC ; box::dump, COMDAT 
; _this$ = ecx 
    mov   eax, DWORD PTR [ecx+8] 
    mov   edx, DWORD PTR [ecx+4] 
    push eax 
    mov   eax, DWORD PTR [ecx] 
    push edx 
    push eax 
; 'this is box. width=%d, height=%d, depth=%d', 0aH, 00H 
    push OFFSET ??_C@_0CM@DIKPHDFI@this?5is?5box?4?5width?$DN?$CFd?0?5height?$DN?$CFd@ 
    call _printf 
    add   esp, 16 
    ret   0 
?dump@box@@QAEXXZ ENDP ; box::dump 
指令清单 51.13  带/Ob0 参数的 MSVC 2008 优化程序 
?dump@solid_object@@QAEXXZ PROC ; solid_object::dump, COMDAT 
; _this$ = ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
522 
逆向工程权威指南（下册） 
    mov   eax, DWORD PTR [ecx] 
    push eax 
; 'this is solid_object. density=%d', 0aH 
    push OFFSET ??_C@_0CC@KICFJINL@this?5is?5solid_object?4?5density?$DN?$CFd@ 
    call _printf 
    add   esp, 8 
    ret   0 
?dump@solid_object@@QAEXXZ ENDP ; solid_object::dump 
指令清单 51.14  带/Ob0 参数的 MSVC 2008 优化程序 
?dump@solid_box@@QAEXXZ PROC ; solid_box::dump, COMDAT 
; _this$ = ecx 
    mov   eax, DWORD PTR [ecx+12] 
    mov   edx, DWORD PTR [ecx+8] 
    push eax 
    mov   eax, DWORD PTR [ecx+4] 
    mov   ecx, DWORD PTR [ecx] 
    push edx 
    push eax 
    push ecx 
; 'this is solid_box. width=%d, height=%d, depth=%d, density=%d', 0aH 
    push OFFSET ??_C@_0DO@HNCNIHNN@this?5is?5solid_box?4?5width?$DN?$CFd?0?5hei@ 
    call _printf 
    add   esp, 20 
    ret   0 
?dump@solid_box@@QAEXXZ ENDP ; solid_box::dump 
上述 3 个类对象的内存分布如下： 
① 类 box。如下表所示。 
offset 
description 
+0x0 
width 
+0x4 
height 
+0x8 
depth 
② 类 solid_object。如下表所示。 
offset 
description 
+0x0 
density 
③  类 solid_box，可以看成是以上两个类的联合体。如下表所示。 
offset 
description 
+0x0 
width 
+0x4 
height 
+0x8 
depth 
+0xC 
density 
以上图表采用了偏移量与对应变量的方式展现 3 个类对象的内存存储结构。图中一共出现了 4 个变量，
即长 width、高 height、宽 depth 以及密度 density。 
体积函数 get_volume()的代码如下所示。 
指令清单 51.15  带/Ob0 参数的 MSVC 2008 优化程序 
?get_volume@box@@QAEHXZ PROC ; box::get_volume, COMDAT 
; _this$ = ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
523 
    mov   eax, DWORD PTR [ecx+8] 
    imul eax, DWORD PTR [ecx+4] 
    imul eax, DWORD PTR [ecx] 
    ret   0 
?get_volume@box@@QAEHXZ ENDP ; box::get_volume 
密度函数 get_density()的代码如下所示。 
指令清单 51.16  带/Ob0 参数的 MSVC 2008 优化程序 
?get_density@solid_object@@QAEHXZ PROC ; solid_object::get_density, COMDAT 
; _this$ = ecx 
    mov eax, DWORD PTR [ecx] 
    ret 0 
?get_density@solid_object@@QAEHXZ ENDP ; solid_object::get_density 
最有意思的是 solod_box::get_weight()重量函数。 
指令清单 51.17  带/Ob0 参数的 MSVC 2008 优化程序 
?get_weight@solid_box@@QAEHXZ PROC ; solid_box::get_weight, COMDAT 
; _this$ = ecx 
    push esi 
    mov   esi, ecx 
    push edi 
    lea   ecx, DWORD PTR [esi+12] 
    call ?get_density@solid_object@@QAEHXZ ; solid_object::get_density 
    mov   ecx, esi 
    mov   edi, eax 
    call ?get_volume@box@@QAEHXZ ; box::get_volume 
    imul eax, edi 
    pop   edi 
    pop   esi 
    ret   0 
?get_weight@solid_box@@QAEHXZ ENDP ; solid_box::get_weight 
函数 get_weight()（计算重量）只调用了两个方法。在调用 get_volume()（计算体积）时，它传递了 this
指针。而在调用 get_density()（密度）函数时，它传递的地址是“this 指针＋12 个字节”。后面这个地址
对应的是 solid_box 类的 solid_object 字段。 
因此，solid_object::get_density()方法认为，它处理的是常规的 solid_object 类，而 box::get_volume()则
可以正常访问原有数据类型的 3 个变量，如同直接操作 box 类一样。 
因此，我们可以相信：继承了其他的、多个类而生成的类对象，在内存之中就是一种联合体型的数据
结构。它继承了原有父类的全部字段和方法。在这种继承类对象调用某个具体方法时，它传递的是与该方
法原有基类相对地址相应的 this 指针。 
51.1.5  虚拟方法 
我们再来看看一个简单点的例子： 
#include  
class object 
{ 
    public: 
        int color; 
        object() { }; 
        object (int color) { this->color=color; }; 
        virtual void dump() 
        { 
            printf ("color=%d\n", color); 
        }; 
}; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
524 
逆向工程权威指南（下册） 
class box : public object 
{ 
    private: 
        int width, height, depth; 
    public: 
        box(int color, int width, int height, int depth) 
        { 
            this->color=color; 
            this->width=width; 
            this->height=height; 
            this->depth=depth; 
        }; 
        void dump() 
        { 
            printf ("this is box. color=%d, width=%d, height=%d, depth=%d\n", color, width, height, depth); 
        }; 
}; 
class sphere : public object 
{ 
    private: 
        int radius; 
    public: 
        sphere(int color, int radius) 
        { 
            this->color=color; 
            this->radius=radius; 
        }; 
        void dump() 
        { 
            printf ("this is sphere. color=%d, radius=%d\n", color, radius); 
        }; 
}; 
int main() 
{ 
    box b(1, 10, 20, 30); 
    sphere s(2, 40); 
    object *o1=&b; 
    object *o2=&s; 
    o1->dump(); 
    o2->dump(); 
    return 0; 
}; 
类 object 定义一个虚拟函数 dump()，它被继承类 box 和 sphere 中的同名函数覆盖了。 
在调用虚拟函数时，编译器阶段可能无法确定对象的类型情况。当类中含有虚函数时，其基类的指针
就可以指向任何派生类的对象，这时就有可能不知道基类指针到底指向的是哪个对象的情况。这时就要根
据实时类型信息，确定应当调用的相应函数。  
在启用优化编译选项/Ox 和/Ob0 后，我们再用 MSVC 2008 编译主函数 main(): 
_s$ = -32 ; size = 12 
_b$ = -20 ; size = 20 
_main PROC 
    sub   esp, 32 
    push 30 
    push 20 
    push 10 
    push 1 
    lea   ecx, DWORD PTR _b$[esp+48] 
    call ??0box@@QAE@HHHH@Z ; box::box 
    push 40 
    push 2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
525 
    lea   ecx, DWORD PTR _s$[esp+40] 
    call ??0sphere@@QAE@HH@Z ; sphere::sphere 
    mov   eax, DWORD PTR _b$[esp+32] 
    mov   edx, DWORD PTR [eax] 
    lea   ecx, DWORD PTR _b$[esp+32] 
    call edx 
    mov   eax, DWORD PTR _s$[esp+32] 
    mov   edx, DWORD PTR [eax] 
    lea   ecx, DWORD PTR _s$[esp+32] 
    call edx 
    xor   eax, eax 
    add   esp, 32 
    ret   0 
_main ENDP 
指向 dump()函数的函数指针应当位于类对象 object 中的某个地方。我们在哪里去找新方法的函数地址
呢？它必定由构造函数定义： main()函数没用调用其他函数，因此这个指针肯定由构造函数定义。 
box 类实例的构造函数为： 
??_R0?AVbox@@@8 DD FLAT:??_7type_info@@6B@ ; box 'RTTI Type Descriptor' 
    DD     00H 
    DB     '.?AVbox@@', 00H 
??_R1A@?0A@EA@box@@8 DD FLAT:??_R0?AVbox@@@8 ; box::'RTTI Base Class Descriptor at (0,-1,0,64)' 
    DD     01H 
    DD     00H 
    DD     0ffffffffH 
    DD     00H 
    DD     040H 
    DD     FLAT:??_R3box@@8 
??_R2box@@8 DD     FLAT:??_R1A@?0A@EA@box@@8 ; box::'RTTI Base Class Array' 
    DD     FLAT:??_R1A@?0A@EA@object@@8 
??_R3box@@8 DD     00H ; box::'RTTI Class Hierarchy Descriptor' 
    DD     00H 
    DD     02H 
    DD     FLAT:??_R2box@@8 
??_R4box@@6B@ DD 00H ; box::'RTTI Complete Object Locator' 
    DD     00H 
    DD     00H 
    DD     FLAT:??_R0?AVbox@@@8 
    DD     FLAT:??_R3box@@8 
??_7box@@6B@ DD     FLAT:??_R4box@@6B@ ; box::`vftable' 
    DD     FLAT:?dump@box@@UAEXXZ 