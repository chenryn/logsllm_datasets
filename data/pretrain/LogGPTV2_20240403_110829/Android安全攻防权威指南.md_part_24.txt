v13. v14, 122
kMsg-BB90x14e 1
processUnLocktsg-BBe0x5e :
23(0000005e)const/4
v13, 1
25 (00000064) invoke-virtual
24(00000060)
move-object/from16
v0, v17
v0, v13,
Ljava/uti1/Vector;=>elenentAt (I)L{ava/1ang/0bject;
26(0000006a)
) move-result-object
v1
(29000000)2
check-cast
v1, Ljava/1ang/String:
const-string
v13,
v14,
apoofen.
invoke-interface
const-string
Landroid/content/SharedPreferences;->get.String (
(86000000)00
'6A
v13, v14,
Ljava/1ang/String: Ljava/1ang/String:)
Ljava/1ang/String:
31(0000007e)
move-result-object
v13
32 (00000080) invoke-viztual
v15, v1,
Lcom/yougetitback/androidapp1ication/
Ljava/1ang/String;)Ljava/lang/String:
SmsIntentReceiver;->EvaluateToken(
33 (0o000086) move-result-object
v13, v14, Ljava/1ang/String:
v14
34 (00000088) invoke-virtual
compareTo (Ljava/Lang/String:) I
35 (0c00008e) move-result
v13
36 (00000090) if-nez
v13, 95 [ processUnLocktsg-BB9
---
## Page 103
4.2案例分析：移动安全应用
87
0x94 processUnLockMsg-BB80x14e 1
processUnLockMsg-B8e0x94 :
37 （00000094)const-string
38（00000098) const-string
V13, 'SWIPEMIPE'
39(0000009c) invoke-static
v14,
v13, v14, Landroid/uti1/Log;-
‘recieved unlock message
>v (Ljava/1ang/String: Ljava/1ang/String:1I
40 (000000a2) invoke-static/zange v16,
Lcom/yougetitback/androidapp1ication/wipe/wipeContro1ler;
->stopipeService (Landroid/content/Context ; 1V
[processUnLockMsg-Bs80xa8]
 + 
这段代码消除掉了错误，输人Vector中第二个元素的值会被传递给EvaluateToken，面
返回值会被与共享配置文件中的tagcode键值进行比较，如果这两个值匹配，那么这个方法才
会像你之前看到的那样继续执行。看到这，你应该意识到你的短信必须是YGIB：U后跟一个空
格和tagcode值的格式。而在一个已经root的设备上，获取这个tagcode是非常简单的，直接
从文件系统中读取SuperheroPrefsFile文件即可。不过，还是让我们尝试一些动态分析方法，
看看能够有新的发现。
4.2.3动态分析
动态分析方法需要运行应用，通常会在插桩或监控的方式下进行，以获取关于应用行为更具
体的信息。这通常需要处理所有在运行过程中发生的行为，如检查应用在文件系统上的操作痕迹、
观察网络流量，以及监视进程行为等。动态分析方法对于验证一些假设和测试一些猜测是非常有
效的。
从动态分析方法的角度来看，最先要解决的问题是掌握用户与应用进行交互的过程。应用的
工作流是怎么样的？拥有哪些菜单、界面和设置面板？这些大多数可以通过静态分析来发掘出
来，例如，Activity就非常容易识别。然面深人分析每个功能的详细细节会非常耗时，通过与运
行的应用进行直接交互，经常会让分析变得简单一些。
如果你已经在应用启动时开启了1ogcat，那么在ActivityManager启动应用时，你就可以看
到一些熟悉的Activity名：
I/ActivityManager (245) : START (act=android.intent.action.MAIN
cat=[android.intent.category .LAUNcHER] flg=0x10200000
cmp=com.yougetitback.androidapplication.virgin.mobile/
I/ActivityManager(245): Start proc
com.yougetitback.androidapplication.ActivateSplashscreen u=0) from pid 449
com.yougetitback.androidapplication.virgin.mobile for activity
com.yougetitback.androidapplication.virgin.mobile/
com.yougetitback.androidapplication.ActivateSplashSereen:
pid=2252 uid=10080 gids=(1006, 3003, 1015, 1028)
首先，你看到一个主Activity（ActivateSplashScreen），可以通过Androguard 的
get_main_activity函数观察到图4-5所示的主界面。
---
## Page 104
88
第4章云计算的安全风险
ashe
agrer
图 4-5主界面/主 Activity
在应用中继续进行操作，没儿步之后，你就会看到要求输人PIN码与安全问题的界面，如图
4-6所示。提供这些信息之后，你可以在1ogcat中看到一些值得注意的输出结果。
D/YGIB Test( 2252): Context from-
I/RequestConfigurationService ( 2252) : RequestConfigurationService
>com yougetitback androidapplication, virgin.mobi1e
D/RBQUESTCONFIGURATIONSERVICE( 2252) 1 onStartComnand
11109369.35
I/ActivationAcknowledgeService ( 2252) : RequestConfigurationService
I/RequestConfigurationService( 22s2) : RequestConfigurationService
created!1!
I/PingService( 2252) : PingService created111
11ipeddo36
I/ActivationAcknovledgeService ( 2252) : RequestConfigurationService
D/PINGSERVICE( 2252) : onStartCoemand
stopped111
D/C2DMReceiver( 2252) : Action is con.google.android.c2dm.intent.
I/PingService( 2252) : RequestBtagService 8topped111
RBGISTRATION
act=com.google.android.c2dn.intent.RBGISTRATIoN f1g=0x10
pkg=com.yougetitback.androidapplication.virgin.mobile
cmp=com-youget.itback, androidapp
1ication,virgin,mobi1e/
com-yougetitback andzoidapplication,C2DeReceiver (has extras) )
(cmp=com.yougetitback andro1dapp1ication, virgin.mobi1e/
com.yougetitback.androidapplication.ModifyPinScreen u=0) from pid 2252
---
## Page 105
4.2案例分析：移动安全应用
89
1234
1234
图4-6PIN码输人和安全问题界面
很确定的是，日志中记录了许多服务启动和停止的调用（这些服务是你之前观察到的），以
及一些熟悉的Activity名字。进一步分析日志，你可以看到一个有趣的信息泄露问题。
D/update ( 2252) : 8erverUr1->https://virgin-yougetitback,com/
D/update ( 2252) : settingsUr1-->vaultUpdateSettings?
D/update ( 2252) : pa8sword->3f679195148a1960f66913d09e76fca8dd31dc96
D/update ( 2252) : tagCode->137223048617183
D/update ( 2252) : encodedxs1Data-
>$3cg3fm1t20vers1ont3d°1 .0*$20encoding&3d'UTF
$2fPin83ef3c2fSettings3ef3c82fConfig83e
8'93f#3e33cConfigt3et3cSettings3et3cPin#3e12343c
D/YGIB Test ( 2252) : con.getResponseCode () -->200
D/YGIB Test ( 2252): ur1String-
>https1//virgin-yougetitback, com/vaul tUpdateSettings7pword=
3f679195148a1960f66913d09e76fca8dd31dc96&tagid=137223048617183&type=S
D/YGIB Test ( 25121 : content->#3c93fxm1$20versione3d·1 . 0 $20encoding93d*
UrF8·e3fe3ee3cConfigg3e83cSettingst3et3cPint3e1234e3ct2fpin
3et3ct2fSettings3e83cg2fConfigg3e
甚至在应用工作流的最初几步里，就已经泄露出了会话和配置数据，其中包括你已经在静态
分析过程中看到过的tagcode。对应用的配置参数进行设置并存储，也会在日志缓冲区中导致类
似的详细输出。
D/update ( 2252) : serverUr1-->https:/ /virgin.yougetitback,com/
D/update( 2252): settingsUr1-->vaultUpdateSettings?
D/update ( 2252): password-->3f679195148a1960f66913d09e76fca8dd31de96
D/update ( 2252): tagCode-->137223048617183
D/update ( 2252): encodedxtm1Data-
---
## Page 106
90
第4章云计算的安全风险
>#3c3fxml$20version83d*1. 0*820encoding3d·Vrp-
83fe3et3cConfigg3e33cSettingg#3ef3cServerNo93e+447781482187$3c2fServerNo83eg
3cServerURL$3ehttp8:82f42fvirgin.yougetitback.com82f%3c82fServerURL$3ef3cBackup
MessageURLe3et3cFindURLA3eFindN3f43c$2fFindURL43e43cExtBackupURLA3eextContacteS
URLt3eContactsSave83f%3c2fBackupURL$3ef3cMessageURL83eca11MainETagUSA83fe3c号2f
avef3f$3c82fExtBackupURLA3ef3cRestoreURLe3erestorecontactse3fe3ce2fRestoreURLe3
ef3cCa11Centre83e+442033222955#3ct2fCa11Centre83ef3cCountryCode3eGB3c$2fCount
fca8dd31dc9683c82fURLPassworde3e83cRoamingLock83eoff83e2fRoamingLocke3ef3eSiml,
ryCodet3et3cPint3e1234t3ct2fPint3et3cURLPassword83e3f679195148a1960f66913d09e76
ntervale3d822082293eofft3c$2fAutolocke3e$3cCal1Patternlocke20OutsideCal1se3d%22
ockt3eont3ch2fsimLocks3et3cOff1ineLockt3eoffe3ch2t0tf1ineLockt3et3cAutolockt201
6$22$20Numca11st3dt226t22t3eon$3ct2fCa11PatternLock#3e$3cCountryLockt3eofft3c2
CountryLockt3et3ct2fSettingst3et3cCountryPrefixe3et3cPrefixt3e+44t3ct2fPrefix8
3et3c82fCountryPrefix33et3cIntPrefix83el3cInternationalPrefixt3e00e3ce2fInterna
tionalPrefixe3et3c42fIntPrefixe3et3ce2fConfig93e
如前所述，在Android4.1版本之前，这些信息对于具有READ_LOGS权限的应用是可访问的。
尽管这些泄漏信息可能对于截取特殊短信已经足够，但你还应该进一步深人了解这个应用是如何
运行的。为此，你可以使用一个名为AndBug的调试器。
AndBug连接到Java调试连线协议（JDWP）端点上，可以通过在应用的Manifest文件中显
式地标注 android:debuggable=true，让应用进程开放Android调试桥（ADB）端点，或者
将ro.debuggable属性设置为1（在出厂设备中该属性通常被设置为0）使得所有应用进程都
开放调试端点。除了检查Manifest文件，还可以运行adbjdwp来显示出可调试的进程PID。假
设目标进程是可调试的，你可以看到如下输出：
$ adb jdup
2252
使用grep命令来搜索与我们目标进程相关的PID，这行日志在之前显示的日志记录中也已
经看到。
$ adb she11 ps |grep 2252
com-yougetitback.androidapplication,virgin.mobile
60n
5
获取到这个信息之后，你可以将AndBug挂接到目标设备和进程上，来获得一个可交互的
shell。使用she11命令并指定目标进程PID。