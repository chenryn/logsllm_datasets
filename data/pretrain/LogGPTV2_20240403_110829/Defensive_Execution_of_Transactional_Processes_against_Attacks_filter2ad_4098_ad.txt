e
t
s
y
S
60
50
40
30
20
10
0
0
Experimental results
   linear
e
T
r
/
T
100
200
300
400
500
600
Throughput (transactions/second)
2
1.5
1
0.5
10
Attacking density 6%
Attacking density 24%
Attacking density 34%
15
20
25
30
35
40
IDS delay (seconds)
Figure 5. System load with a ﬁtting function
y2 = 0.066455x− 2.9864 and the norm of resid-
uals = 9.3156
Figure 7. The experimental results of recovery
time vs. executing time ( Tr
Te
).
Te
Td
Tr
∆t1
∆t2
Normal execution
Defensive execution
Figure 6. Time measurements of effective-
ness
actions found in each second divided by the throughput.
According to our experimental results, the attacking den-
sity has more signiﬁcant impact on Tr
. With higher at-
Te
tacking densities, e.g., 24% and 34%, The recovery time
Tr could be even longer than the original execution time Te.
Assume that n transactions can be executed in time Te
without defensive executions. The bottom part of the ﬁgure
shows the scenario of a defensive execution. To execute the
same number of user’s transactions as in Te, a longer time
Td > Te needs to be spent, because the defensive execution
has (1 + α)n transactions to execute, where α > 0. Since
the throughput will be higher in defensive executions, the
turnaround time of each transaction will increase accord-
ingly. Thus the total execution time Td will be longer.
In the ﬁgure, ∆t1 = Td − Te is the increased total process-
ing time caused by defensive execution. ∆t2 = Te + Tr − Td
is the reduced processing time gained by the defensive exe-
cution when attacks happen.
5.3 The effective upper bound of redundant
rate—β
We classify applications into two types according to
whether they are sensitive to the turnaround time of trans-
actions.
5.3.1
In the case of turnaround time insensitive appli-
cations
The ﬁrst type of applications is that the user’s applications
are not sensitive to the turnaround time while they are sen-
sitive to the throughput of the transactional processing sys-
tem. Such applications are processing systems for bank
transactions, daily business transactions, etc. We will show
that the value of ∆t1 can be ignored if we keep the system
working on the linear part of system load.
Given a throughput u of user’s transactions, the defen-
sive execution will increase the throughput to (1 + α)u. As
long as the system load is not saturated ( 0,
∆t1 can be determined by the following equation.
∆t1 = C1Te( f1((1 + α)C1)− f1(C1))
(16)
(cid:11) (1+α)C1
where f1(x) is the turnaround time function of throughput,
like the curve ﬁtting function in Figure 4. Equation 16 ex-
plains the time cost we paid for defensive executions.
For a given IDS delay and attacking density, r = Tr
Te
can
be measured as shown in Figure 7. To let the defensive
execution to be effective, we need to guarantee that
1(x)dx ≤ Tr = rTe
(cid:7)
(cid:11) (1+α)C1
∆t1 = C1Te
(17)
f
C1
Considering that the turnaround time function f1(x) is al-
ways incremental, thus
−1
1
+ f1(C1))− 1 = β
(18)
f
α≤ 1
C1
( r
C1
With the above inequation, we can get the effective upper
bound β.
For example, given f1(x) = 0.00062191x + 0.35454,
C1 = 100, and r = 1.6 (when the IDS delay is 15 seconds
and the attacking density is 34%), we can solve the inequa-
tion to get α≤ 1.49. Thus β = 1.49 is the effective upper
bound of redundant rate. Any larger redundant rate will
cause that the defensive executions take longer time then
the normal execution time plus recovery time.
Please note that we need to consider both types of appli-
cations for a real system. Assume that we get β1 when we
consider only the throughput as we did in Section 5.3.1, and
we get β2 when we consider the turnaround time, the ﬁnal
effective redundant rate should be min(β1,β2).
5.4 The accuracy of the IDS
No IDS system is perfectly accurate. False positive
alarms (false alarms on legitimate activities) and false nega-
tive alarms (where the IDS failed to identify intrusions) can
also affect the effectiveness of our techniques.
False positive alarms cause unnecessary branch cutting
and switching of execution paths, which counteracts all ben-
eﬁts generated by defensive executions. However, the sys-
tem incorporating our techniques just acts as a regular re-
covery system. It will not be worse. The users have to suffer
the recovery time.
False negative alarms can only be solved by the interven-
tion of administrators of the system. Since usually human
intervention takes longer time than the IDS, the branch cut-
ting will have been done. The user will not be beneﬁted
from our techniques.
In summary, in the worst case, an inaccurate IDS can
force our techniques to work as a regular recovery system.
6 Related work
= C1Te
C1
(cid:7)
1(x)dx
f
An Intrusion Detection System (IDS) [7] can detect in-
trusions. In a transactional processing system, the damages
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:44 UTC from IEEE Xplore.  Restrictions apply. 
9
directly caused by the attacker may be spread by executing
legitimate transactions without being detected by the IDS.
The IDS is unable to trace damage spreading and cannot
locate all damage to the system.
The checkpoint [8, 9] techniques also do not work for
efﬁcient attack recovery. A checkpoint rolls back the whole
transactional processes to a speciﬁc time. All work, includ-
ing both damaged transactions and clean transactions after
the speciﬁc time, will be lost, especially when the delay of
the IDS is very long. In addition, checkpoints introduce ex-
tra storage cost.
The failure handling of transactional process has been
discussed in recent work [4, 3, 12]. Failure handling occurs
when the transactional process are in progress. When the
IDS reports attacks, the malicious transactions usually have
been successfully executed. Failure handling is not appli-
cable because no failure occurred. Attack recovery is sup-
posed to remove the effects of malicious transactions after
they are committed..
Rollback recovery, e.g. [6, 2], is surveyed in [5]. It fo-
cuses on the relationship of message passing and considers
temporal sequences based on message passing. In the mes-
sage passing model, a process runs on a single site and er-
rors occur at the end of the process. A transactional process
usually runs on multiple sites and intrusions are detected at
the middle of the process. Further more, rollback recovery
handles errors while attack recovery handles intrusions. In
brief, we are working on a different model for a different
goal from theirs.
Previous work [1, 10, 14, 15] introduced different tech-
niques to trace damage spreading and repair the damage in
transactional processing systems. However, if attacks hap-
pen, all affected transactions will be rolled back (undone)
and redone.
Rolling back and re-executing damaged transactions in-
crease the response time of the system and may cause a sig-
niﬁcant processing delay. In such situations, the availabil-
ity of the system is compromised and the system suffers the
vulnerability of Denial of Service (DoS). Our technique can
reduces the recovery delay with reasonable cost.
7 Conclusion
In this paper, we described a defensive executing tech-
nique against transactional level attacks. The defensive ex-
ecution reduces the recovery delay by introducing extra ex-
ecuting cost if attacks happen. We also discussed the effec-
tiveness of our technique and discussed conditions to make
our technique to be more effective. Our work demonstrates
that defensive executions are desirable if users of a self-
healing transactional processing system prefer low process-
ing latency under attacks.
Acknowledgment
We thank Professor Pierangela Samarati for her valuable
and insightful comments. Our thanks also to the anonymous
reviewers. Their comments were very helpful and greatly
improved the quality of this paper. Peng Liu is partially
supported by NSF CCR-TC-0233324.
References
[1] P. Ammann, S. Jajodia, and P. Liu. Recovery from malicious
transactions. IEEE Transaction on Knowledge and Data En-
gineering, 14(5):1167–1185, 2002.
[2] Y. bing Lin and E. D. Lazowska. A study of time warp
rollback machanisms. ACM Transactions on Modeling and
Computer Simulations, 1(1):51–72, January 1991.
[3] Q. Chen and U. Dayal. Failure handling for transaction hi-
erarchies. In A. Gray and P.- ˚A. Larson, editors, Proceedings
of the Thirteenth International Conference on Data Engi-
neering, April 7-11, 1997 Birmingham U.K, pages 245–254.
IEEE Computer Society, 1997.
[4] J. Eder and W. Liebhart. Workﬂow recovery. In Conference
on Cooperative Information Systems, pages 124–134, 1996.
[5] E. N. M. Elnozahy, L. Alvisi, Y. min Wang, and D. B. John-
son. A survey of rollback-recovery protocols in message-
passing systems. ACM Computing Surveys, 34(3):375–408,
September 2002.
[6] D. R. Jefferson. Virtual time. ACM Transaction on Program-
ming Languages and Systems, 7(3):404–425, July 1985.
[7] W. Lee and S. J. Stolfo. A framework for constructing
features and models for intrusion detection systems. ACM
Transactions on Information and System Security, 3(4):227–
261, 2000.
[8] J.-L. Lin and M. H. Dunham.
A survey of dis-
tributed database checkpointing. Distributed and Parallel
Databases, 5(3):289–319, 1997.
[9] J.-L. Lin and M. H. Dunham. A low-cost checkpointing
technique for distributed databases. Distributed and Parallel
Databases, 10(3):241–268, 2001.
[10] P. Liu, S. Jajodia, and C. McCollum. Intrusion conﬁnement
by isolation in information systems. Journal of Computer
Security, 8(4):243–279, 2000.
[11] R. A. Sahner, K. S. Trivedi, and A. Puliaﬁto. Performance
and Reliability Analysis of Computer Systems. Kluwer Aca-
demic Publishers, Norwell, Massachusetts, USA, 1996.
[12] J. Tang and S.-Y. Hwang. A scheme to specify and imple-
ment ad-hoc recovery in workﬂow systems. Lecture Notes
in Computer Science, 1377:484–??, 1998.
[13] H. C. Tijms. Stochastic Models. Wiley series in probability
and mathematical statistics. John Wiley & Son, New York,
NY, USA, 1994.
[14] M. Yu, P. Liu, and W. Zang. Self-healing workﬂow sys-
tems under attacks.
In The 24th International Conference
on Distributed Computing Systems(ICDCS’04), pages 418–
425, 2004.
[15] M. Yu, P. Liu, and W. Zang. Multi-version based attack re-
covery of workﬂow. In The 19th Annual Computer Security
Applications Conference, pages 142–151, Dec. 2003.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:44 UTC from IEEE Xplore.  Restrictions apply. 
10