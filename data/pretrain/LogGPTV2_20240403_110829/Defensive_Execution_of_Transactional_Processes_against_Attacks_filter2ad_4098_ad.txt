# Defensive Execution Technique for Transactional Level Attacks

## Abstract
This paper introduces a defensive execution technique designed to mitigate the impact of transactional level attacks. By incurring additional execution costs, this method reduces recovery delay, thereby enhancing system resilience. The effectiveness of the proposed technique is evaluated under various attack densities and IDS (Intrusion Detection System) delays. We also discuss the conditions that optimize the effectiveness of our approach, demonstrating its suitability for self-healing transactional processing systems.

## 1. Introduction
In a transactional processing system, malicious transactions can cause significant damage, which traditional recovery methods often fail to address efficiently. This paper proposes a defensive execution technique that minimizes recovery time by introducing extra execution costs when attacks occur. We analyze the trade-offs between increased execution time and reduced recovery delay, and provide conditions for optimal performance.

## 2. Experimental Results
### 2.1 System Load Analysis
Figure 5 shows the system load with a fitting function \( y_2 = 0.066455x - 2.9864 \) and the norm of residuals \( = 9.3156 \). The throughput (transactions/second) is plotted against the number of transactions executed.

### 2.2 Recovery Time vs. Execution Time
Figure 7 illustrates the relationship between recovery time (\( T_r \)) and execution time (\( T_e \)). The figure includes different attacking densities (6%, 24%, and 34%) and IDS delays (10-40 seconds).

### 2.3 Time Measurements
Figure 6 provides a detailed breakdown of the time measurements involved:
- \( T_e \): Normal execution time.
- \( T_d \): Defensive execution time.
- \( T_r \): Recovery time.
- \( \Delta t_1 \): Increased total processing time due to defensive execution.
- \( \Delta t_2 \): Reduced processing time gained by defensive execution during attacks.

The attacking density significantly impacts \( T_r \). At higher densities (e.g., 24% and 34%), \( T_r \) can exceed \( T_e \). In defensive execution, the system processes \( (1 + \alpha)n \) transactions, where \( \alpha > 0 \), leading to an increased turnaround time and longer total execution time \( T_d \).

## 3. Effective Upper Bound of Redundant Rate (\( \beta \))
We classify applications into two types based on their sensitivity to turnaround time.

### 3.1 Turnaround Time Insensitive Applications
For applications insensitive to turnaround time but sensitive to throughput (e.g., bank transactions, daily business transactions), the value of \( \Delta t_1 \) can be ignored if the system operates within the linear part of the load curve.

Given a throughput \( u \) of user transactions, defensive execution increases the throughput to \( (1 + \alpha)u \). The increased processing time \( \Delta t_1 \) is given by:
\[ \Delta t_1 = C_1 T_e (f_1((1 + \alpha)C_1) - f_1(C_1)) \]
where \( f_1(x) \) is the turnaround time function of throughput, as shown in Figure 4.

To ensure the effectiveness of defensive execution:
\[ \int_{C_1}^{(1+\alpha)C_1} f_1(x) \, dx \leq T_r = r T_e \]

Considering \( f_1(x) \) is always incremental:
\[ \alpha \leq \frac{r}{f_1^{-1}(r C_1) + f_1(C_1) - 1} \]

For example, with \( f_1(x) = 0.00062191x + 0.35454 \), \( C_1 = 100 \), and \( r = 1.6 \) (IDS delay = 15 seconds, attacking density = 34%), we solve the inequality to get \( \alpha \leq 1.49 \). Thus, \( \beta = 1.49 \) is the effective upper bound of the redundant rate.

### 3.2 Turnaround Time Sensitive Applications
For applications sensitive to turnaround time, the final effective redundant rate should be the minimum of the rates derived from both types of applications:
\[ \beta = \min(\beta_1, \beta_2) \]

## 4. Impact of IDS Accuracy
False positive and false negative alarms can affect the effectiveness of our techniques:
- **False Positives**: Cause unnecessary branch cutting and switching, reducing benefits.
- **False Negatives**: Require human intervention, which is slower than the IDS, negating the benefits of our technique.

In the worst case, an inaccurate IDS may force our techniques to function as a regular recovery system.

## 5. Related Work
- **Intrusion Detection Systems (IDS)**: Detect intrusions but cannot trace damage spreading or locate all damage.
- **Checkpoint Techniques**: Roll back the entire process, losing both damaged and clean transactions, and introduce extra storage costs.
- **Failure Handling**: Not applicable as it occurs during the transactional process, and malicious transactions are usually already committed.
- **Rollback Recovery**: Focuses on message passing and temporal sequences, not suitable for distributed transactional processes.
- **Previous Work**: Introduces techniques to trace and repair damage, but rolling back and re-executing transactions increase response time and reduce availability.

## 6. Conclusion
This paper presents a defensive execution technique that reduces recovery delay by incurring extra execution costs during attacks. We evaluate the effectiveness of our technique and provide conditions for optimal performance. Our work demonstrates that defensive executions are desirable for users who prefer low processing latency under attacks.

## 7. Acknowledgment
We thank Professor Pierangela Samarati for her valuable comments and the anonymous reviewers for their constructive feedback. Peng Liu is partially supported by NSF CCR-TC-0233324.

## 8. References
[1] P. Ammann, S. Jajodia, and P. Liu. Recovery from malicious transactions. IEEE Transactions on Knowledge and Data Engineering, 14(5):1167–1185, 2002.
[2] Y. bing Lin and E. D. Lazowska. A study of time warp rollback mechanisms. ACM Transactions on Modeling and Computer Simulations, 1(1):51–72, January 1991.
[3] Q. Chen and U. Dayal. Failure handling for transaction hierarchies. In A. Gray and P.- ˚A. Larson, editors, Proceedings of the Thirteenth International Conference on Data Engineering, April 7-11, 1997 Birmingham U.K, pages 245–254. IEEE Computer Society, 1997.
[4] J. Eder and W. Liebhart. Workflow recovery. In Conference on Cooperative Information Systems, pages 124–134, 1996.
[5] E. N. M. Elnozahy, L. Alvisi, Y. min Wang, and D. B. Johnson. A survey of rollback-recovery protocols in message-passing systems. ACM Computing Surveys, 34(3):375–408, September 2002.
[6] D. R. Jefferson. Virtual time. ACM Transactions on Programming Languages and Systems, 7(3):404–425, July 1985.
[7] W. Lee and S. J. Stolfo. A framework for constructing features and models for intrusion detection systems. ACM Transactions on Information and System Security, 3(4):227–261, 2000.
[8] J.-L. Lin and M. H. Dunham. A survey of distributed database checkpointing. Distributed and Parallel Databases, 5(3):289–319, 1997.
[9] J.-L. Lin and M. H. Dunham. A low-cost checkpointing technique for distributed databases. Distributed and Parallel Databases, 10(3):241–268, 2001.
[10] P. Liu, S. Jajodia, and C. McCollum. Intrusion confinement by isolation in information systems. Journal of Computer Security, 8(4):243–279, 2000.
[11] R. A. Sahner, K. S. Trivedi, and A. Puliafito. Performance and Reliability Analysis of Computer Systems. Kluwer Academic Publishers, Norwell, Massachusetts, USA, 1996.
[12] J. Tang and S.-Y. Hwang. A scheme to specify and implement ad-hoc recovery in workflow systems. Lecture Notes in Computer Science, 1377:484–??, 1998.
[13] H. C. Tijms. Stochastic Models. Wiley series in probability and mathematical statistics. John Wiley & Son, New York, NY, USA, 1994.
[14] M. Yu, P. Liu, and W. Zang. Self-healing workflow systems under attacks. In The 24th International Conference on Distributed Computing Systems (ICDCS’04), pages 418–425, 2004.
[15] M. Yu, P. Liu, and W. Zang. Multi-version based attack recovery of workflow. In The 19th Annual Computer Security Applications Conference, pages 142–151, Dec. 2003.