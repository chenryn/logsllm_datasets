Hacking PostgreSQL
Stephen Frost
Crunchy Data
PI:EMAIL
PGConf.EU 2018
October 24, 2018
PostgreSQLSourceCode
HackingPostgreSQL
FinalCode
PostgreSQLSubsystems
HackingthePostgreSQLWay
Stephen Frost
Chief Technology Officer @ Crunchy Data
Committer, PostgreSQL
Major Contributor, PostgreSQL
PostgreSQL Infrastructure Team
Default roles
Row-Level Security in 9.5
Column-level privileges in 8.4
Implemented the roles system in 8.3
Contributions to PL/pgSQL, PostGIS
CrunchyData PGConf.EU2018 2/36
PostgreSQLSourceCode
HackingPostgreSQL
TopLevel
FinalCode
BackendCode
PostgreSQLSubsystems
HackingthePostgreSQLWay
Top Level Source Directory
Directory Description
config Config system for driving the build
contrib Source code for Contrib Modules, aka, Extensions
doc Documentation (SGML)
src/backend PostgreSQL Server (”Back-End”)
src/bin psql, pg dump, initdb, pg upgrade, etc (”Front-End”)
src/common Code common to the front and back ends
src/fe utils Code useful for multiple front-end utilities
src/include Header files for PG, mainly back-end
src/include/catalog Definition of the PostgreSQL catalog tables (pg catalog.* tables)
src/interfaces Interfaces to PG, including libpq, ECPG
src/pl Core Procedural Languages (plpgsql, plperl, plpython, tcl)
src/port Platform-specific hacks
src/test Regression tests
src/timezone Timezone code from IANA
src/tools Developer tools (including pgindent)
CrunchyData PGConf.EU2018 3/36
PostgreSQLSourceCode
HackingPostgreSQL
TopLevel
FinalCode
BackendCode
PostgreSQLSubsystems
HackingthePostgreSQLWay
Backend Code - Down the Rabbit Hole
Directory Description
access Methods for accessing different types of data (heap, btree indexes, gist/gin, etc).
bootstrap Routines for running PostgreSQL in ”bootstrap” mode (by initdb)
catalog Routines used for modifying objects in the PG Catalog (pg catalog.*)
commands User-level DDL/SQL commands (CREATE/ALTER, VACUUM/ANALYZE, COPY, etc)
executor Executor, runs queries after they have been planned/optimized
foreign Handles Foreign Data Wrappers, user mappings, etc
jit Provider independent Just-In-Time Compilation infrastructure
lib Code useful for multiple back-end components
libpq Backend code for talking the wire protocol
main main(), determines how the backend PG process is starting and starts right subsystem
nodes Generalized ”Node” structure in PG and functions to copy, compare, etc
optimizer Query optimizer, implements the costing system and generates a plan for the executor
parser Lexer and Grammar, how PG understands the queries you send it
partitioning Common code for declarative partitioning in PG
po Translations of backend messages to other languages
CrunchyData PGConf.EU2018 4/36
PostgreSQLSourceCode
HackingPostgreSQL
TopLevel
FinalCode
BackendCode
PostgreSQLSubsystems
HackingthePostgreSQLWay
Backend Code - Part 2
Directory Description
port Backend-specific platform-specific hacks
postmaster The ”main” PG process that always runs, answers requests, hands off connections
regex Henry Spencer’s regex library, also used by TCL, maintained more-or-less by PG now
replication Backend components to support replication, shipping WAL logs, reading them in, etc
rewrite Query rewrite engine, used with RULEs, also handles Row-Level Security
snowball Snowball stemming, used with full-text search
statistics Extended Statistics system (CREATE STATISTICS)
storage Storage layer, handles most direct file i/o, support for large objects, etc
tcop ”Traffic Cop”- this is what gets the actual queries, runs them, etc
tsearch Full-Text Search engine
utils Various back-end utility components, cacheing system, memory manager, etc
CrunchyData PGConf.EU2018 5/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
What do you want to change?
Is your idea a new backend command?
Or a new backslash command for psql?
Maybe an improvement to pgbench?
Looking for a way to improve performance?
Add a new authentication method?
Support another TLS/SSL/Encryption library?
Let’s chat about changing an existing backend command...
CrunchyData PGConf.EU2018 6/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
Hacking the backend
Where to start when thinking about hacking the backend?
Depends on your idea, but I prefer the grammar
Grammar drives a lot
Also one of the harder places to get agreeement
Where is the grammar? It’s in the parser.
CrunchyData PGConf.EU2018 7/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
What is a Parser?
Parser vs. Grammar
Parser consists of two pieces- the Lexer and the Grammar
Lexer determines how to tokenize the input
Grammar defines what tokens can be used with each other and how
While parsing, the grammar collects information about the command
Once a full command is parsed, a function is called from the grammar
CrunchyData PGConf.EU2018 8/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
Where is the parser?
The parser is in src/backend/parser
In that directory are:
scan.l - Lexer, handles tokenization
gram.y - Definition of the grammar
parse *.c - Specialized routines for parsing things
analyze.c - Tranforms raw parse tree into a Query
scansup.c - Support routines for the lexer
CrunchyData PGConf.EU2018 9/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
Modifying the grammar
The grammar is a set of ”productions” in gram.y
”main()” is the ”stmt” production
Lists the productions for all of the top-level commands
”—” is used to indicate ”this OR that”
stmt :
AlterEventTrigStmt
| AlterCollationStmt
| AlterDatabaseStmt
...
| CopyStmt
...
CrunchyData PGConf.EU2018 10/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
What about the COPY statement?
These are the top-level COPY productions
They refer to other productions though...
CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids
copy_from opt_program copy_file_name copy_delimiter opt_with copy_options
...
| COPY '(' PreparableStmt ')' TO opt_program copy_file_name opt_with copy_options
...
CrunchyData PGConf.EU2018 11/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
COPY productions
These are the other COPY productions
copy_from:
FROM { $$ = true; }
| TO { $$ = false; }
;
opt_program:
PROGRAM { $$ = true; }
| /* EMPTY */ { $$ = false; }
;
...
copy_file_name:
Sconst { $$ = $1; }
| STDIN { $$ = NULL; }
| STDOUT { $$ = NULL; }
;
copy_options: copy_opt_list { $$ = $1; }
| '(' copy_generic_opt_list ')' { $$ = $2; }
;
...
CrunchyData PGConf.EU2018 12/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
COPY productions
Multi-value productions look like this
copy_generic_opt_list:
copy_generic_opt_elem
{
$$ = list_make1($1);
}
| copy_generic_opt_list ',' copy_generic_opt_elem
{
$$ = lappend($1, $3);
}
;
copy_generic_opt_elem:
ColLabel copy_generic_opt_arg
{
$$ = makeDefElem($1, $2, @1);
}
;
copy_generic_opt_arg:
opt_boolean_or_string { $$ = (Node *) makeString($1); }
| NumericOnly { $$ = (Node *) $1; }
| '*' { $$ = (Node *) makeNode(A_Star); }
|Cru'n(c'hycDopayta_generic_opt_arg_list ')' PGC{on$f.$EU=2(0N18ode *) $2; } 13/36
| /* EMPTY */ { $$ = NULL; }
;
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
COPY productions
Note the C template code in the grammar
Compiled as part of the overall parser in gram.c
”$$” is ”this node”
”$1” is the whatever the first value resolves to
”$3” is the whatever the third value resolves to
copy_generic_opt_list:
copy_generic_opt_elem
{
$$ = list_make1($1);
}
| copy_generic_opt_list ',' copy_generic_opt_elem
{
$$ = lappend($1, $3);
}
;
CrunchyData PGConf.EU2018 14/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
COPY options list
Production of COPY options
copy_opt_item:
BINARY
{
$$ = makeDefElem("format", (Node *)makeString("binary"), @1);
}
| OIDS
{
$$ = makeDefElem("oids", (Node *)makeInteger(true), @1);
}
| FREEZE
{
$$ = makeDefElem("freeze", (Node *)makeInteger(true), @1);
}
...
CrunchyData PGConf.EU2018 15/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
Adding a new COPY option
Add to the copy opt item production
Modify the C template(s) as needed
Also need to update the list of tokens / key words, kwlist.h
Has to be added to unreserved keyword production
Always try to avoid adding any kind of reserved keyword
copy_opt_item:
BINARY
{
$$ = makeDefElem("format", (Node *)makeString("binary"), @1);
}
+ | COMPRESSED
+ {
+ $$ = makeDefElem("compressed", (Node *)makeInteger(true), @1);
+ }
| OIDS
{
$$ = makeDefElem("oids", (Node *)makeInteger(true), @1);
}
...
CrunchyData PGConf.EU2018 16/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
What about the code?
The code for COPY is in src/backend/commands/copy.c
COPY has a function to process the options given
Conveniently, this function is ProcessCopyOptions()
CopyStateData exists to keep track of the COPY operation
Not in a .h since only COPY uses it
When defining a structure in a .c, put it near the top
typedef struct CopyStateData
{
...
bool binary; /* binary format? */
bool oids; /* include OIDs? */
+ bool compressed; /* compressed file? */
bool freeze; /* freeze rows on loading? */
...
CrunchyData PGConf.EU2018 17/36
PostgreSQLSourceCode
HackingPostgreSQL FromanIdea..
FinalCode ParserChanges
PostgreSQLSubsystems CommandCodeChanges
HackingthePostgreSQLWay
What about the code?
Add in the code to handle the option passed in
ProcessCopyOptions(CopyState cstate,
...
}
+ else if (strcmp(defel->defname, "compressed") == 0)
+ {