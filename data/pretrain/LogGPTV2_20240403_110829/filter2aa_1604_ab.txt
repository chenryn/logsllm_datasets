F. UTF-8 Encoding 
1) UTF-8 Introduction 
UTF-8 encoding allows values larger than a single byte (0-
255) to be represented in a byte stream.  HTTP web servers 
use UTF-8 encoding to represent Unicode code points that are 
outside of the ASCII code point range (1 – 127). 
UTF-8 works by giving special meaning to the high-bits in a 
byte.   A UTF-8 two and three byte UTF-8 sequence is 
illustrated below: 
  110xxxxx 10xxxxxx      (two byte sequence) 
  1110xxxx 10xxxxxx 10xxxxxx (three byte sequence) 
The first byte in a UTF-8 sequence is the most important 
because it contains how many bytes are in the complete UTF-
8 sequence.  This is determined by counting the high bits up to 
the first zero.  In the two byte sequence example, the first byte 
contains two high bits set followed by a zero.  So this is 
indeed a two-byte UTF-8 sequence.  The rest of the bits after 
the zero in the first UTF-8 byte are bits in the final value to be 
computed. 
UTF-8 bytes following the initial byte all have the same 
format of setting the high bit followed by a zero.  Two bits are 
used to identify a UTF-8 byte, and six bits are used in 
computing the value. 
To encode UTF-8 in the URL, the UTF-8 sequence is 
escaped with a percent for each byte.  A UTF-8 encoded 
character is illustrated as, %C0%AF = ‘/’. 
2) Unicode Code Point Introduction 
UTF-8 encoding is used to encode Unicode code point 
values.  Code point values are usually contained in the range 
of 0 – 65535.  Any code point value above 127 uses UTF-8 
encoding in HTTP URLs. 
Unicode code point values from 0 – 127 map one to one 
with ASCII values.  That leaves about 65408 values to 
represent other characters in languages like Hungarian or 
Japanese. 
Usually these languages have their own Unicode code page 
that represents the characters that they need.  Unicode code 
point values are derived from Unicode code pages.  Each 
Unicode code page can have a unique set of values, so as 
Unicode code pages change so do the characters that a 
Unicode code point represent.  If the wrong code page is used 
to interpret Unicode code points, then the results are invalid.  
This is concept is very important in URL encoding as seen in 
the next section. 
3) Bringing the Evasion Together 
There are three characteristics of using UTF-8 encoding to 
represent Unicode code points that lend themselves to 
confusion among IDSs. 
The first characteristic is that UTF-8 can encode a single 
code point or ASCII value in more than one way.  This has 
been fixed in the current Unicode standard, but is still 
prevalent in web servers (excluding Apache).  For example, a 
capital letter A is encoded in a two byte UTF-8 sequence as: 
• 
%C1%81 (11000001 10000001 = 1000001 = ‘A’) 
The capital letter A can also be encoded in a three byte UTF-8 
sequence as: 
• 
%E0%81%81 ( 11100000 10000001 10000001 = 
1000001 = ‘A’) 
So, using UTF-8 to encode ASCII characters leads to many 
different representations. 
 The second characteristic is that some non-ASCII Unicode 
code points also map to ASCII characters.  For example, the 
Unicode code point 12001 could map to a capital letter A.  
The only way to know which code points map to ASCII 
characters is to either read the Unicode code map or test all 
the different Unicode code points against a server.  Currently, 
the only web server that is known to do this is the Microsoft 
IIS server. 
The third characteristic is related to the second 
characteristic.  If the Unicode code map is changed or is not 
known, then interpreted Unicode code points are invalid.  The 
reason this is important is because IIS web servers in China, 
Japan, Poland, etc. use different code pages, so if an IDS is 
not aware of which code page a web server is running then the 
URL decoding efforts of UTF-8 are invalid.  If an IDS is not 
configurable as to what Unicode code pages to run for 
particular servers, then any web server that does not run the 
code page that the IDS has knowledge of is evadable. 
G. UTF-8 Bare Byte Encoding 
UTF-8 bare byte encoding is the same as UTF-8 encoding, 
except that the UTF-8 byte sequence is not escaped with a 
percent.  The byte sequence is sent with the actual bytes.  If an 
A was sent across, it would be: 
• 
0xC1 0x81 = ‘A’ 
This type of encoding is only known to run on the Microsoft 
IIS server. 
H. Microsoft %U Encoding 
Microsoft %U encoding presents a different way to encode 
Unicode code point values up to 65535 (or two bytes).  The 
format is simple; %U precedes 4 hexadecimal nibble values 
4
that represent the Unicode code point value.  The format is 
illustrated as: 
• 
%UXXXX 
For example, a capital A could be encoded as: 
• 
%U0041 = ‘A’ 
This is encoding is supported by Microsoft IIS. 
I. Mismatch Encoding 
Mismatch encoding uses different encoding types to 
represent an ASCII character and is not a unique encoding by 
itself.  The mismatch encoding combines the various types of 
encoding to encode a single character. 
 For example, let’s encode a capital A using the Microsoft 
%U encoding method.  But since IIS will do a double decode 
on a URL, we can use some of the other methods to encode 
the %U method.  For instance, we can encode the U in the %U 
method with a normal hex encoding.  So a simple %U0041 
becomes %%550041.  We can then encode the 0041 in normal 
hex encoding, or we could pick another type of encoding. 
 Here’s a more complex encoding mismatch that works 
against an IIS server, try to figure out which ASCII character 
this encoding represents: 
• 
%U0025%550%303%37 
IV. INVALID PROTOCOL PARSING 
A. URL Evasion Using Request Pipelines 
The request pipeline evasion is a type of invalid protocol 
parsing evasion.  It obscures the URI by using the protocol 
characteristics of a request pipeline in version 1.1 of the 
HTTP protocol. 
The request pipeline standard allows a web client to send 
several requests within a single packet.  This is different and 
should not be confused with the HTTP keep alive header.  
Request pipelines send several requests all in one packet, 
whereas HTTP keep alive just keeps the TCP stream open for 
more requests. 
We use the request pipeline feature to embed several URLs 
in one packet.  Most IDSs will parse the first URL correctly, 
but fail to parse the other URLs.  This leaves an avenue for 
evasion, because the other URLs can now be trivially encoded 
and any content matches looking for malicious URLs will fail, 
because the IDS did not decode these other URLs. 
For example, the following payload uses request pipelining 
to evade URL detection: 
• 
GET / HTTP/1.1\r\nHost: \r\n\r\nGET /foobar.html 
\r\nHost: \r\n\r\nGET /cgi%2Dbin%2Fph%66 
HTTP/1.1\r\nHost: r\n 
B. Parameter Evasion using POST and Content-Encoding 
Another common HTTP protocol field that contains 
malicious data or attacks is the URL parameter field.  This is 
the field where most database and cgi type attacks occur, and 
most IDSs contain signatures to detect malicious parameter 
keys and values. 
A simple way to evade an IDS would be to encode the 
parameters as the URL is encoded.  But most IDSs already 
apply URL decoding methods to the parameter field as well. 
What we do is use a POST request to move the parameter 
field to the end of the HTTP request header section.  At this 
point, the parameter field is in plaintext and an IDS could 
easily pick out malicious content here.  Instead, we use the 
header option, Content-Encoding, to encode the parameter 
field in base64 encoding. 
At this point, the parameter field has been encoded in 
base64 and the request is sent across the wire.  Now the IDS 
not only needs to parse the POST request correctly, but it 
needs to decode the parameter field using base64 before 
inspecting the parameter field. 
If the IDS actually decoded the parameter field in a POST 
request with base64, the decoding effort would be very time 
consuming.  It would also lend itself to a DOS attack by 
sending lots of POST requests with large parameter fields that 
would need to be decoded. 
V. CONCLUSION 
Two general techniques are used in HTTP IDS evasions.  
These techniques are invalid protocol parsing and invalid 
protocol field encoding.  If an IDS is unaware of a type of 
HTTP protocol field encoding it cannot correctly decode the 
URL and evasions will occur.  This is the type of technique 
that the various encoding discussed used. 
If an IDS does not have adequate knowledge of the HTTP 
protocol, it can also be evaded.  The request pipeline and 
content encoding evasions uses this type of technique. 
By examining an IDS protocol decoder, most evasions can 
be generated with these two general techniques.   
APPENDIX 
A. URL Encoder Program 
A tool that illustrates these various decodings and 
obfuscations are available at www.idsresearch.org.   Both a 
Windows GUI application is available, along with a command 
line tool for *NIX and Windows. 
B. Unicode Code Page Mapper 
A tool that dumps the Unicode code pages and code points on 
a Microsoft system is available at www.idsresearch.org. 
ACKNOWLEDGMENT 
RFP and Bob Graham have really pioneered application 
layer IDS evasions.   Thanks guys.  I would also like to thank 
the Sourcefire research team for verifying a lot of this stuff, 
and in particular to Matt Watchinski. 
I’d also like to thank Marc Norton for letting me bounce 
some ideas of you, and especially for encapsulating the URL 
encoder technology into a really nice Win32 GUI. 
And a big thanks to Microsoft for keeping the art of IDS 
evasions alive and keeping me employed by not conforming to 
standards. 
5
REFERENCES 
[1] 
RFP.  (1999, Dec. 30).  “A look at whisker’s anti-IDS tactics”.  [Online].  
Available:  
http://www.wiretrip.net/rfp/pages/whitepapers/whiskerids.html 
[2] 
Author Unknown.  (2002, Jan. 13).  “How to obscure any URL”.  
[Online].  Available:  http://www.pc-help.org/obscure.htm 
[3] 
RFP.  (2000, Oct. 17).  “IIS %c1%1c remote command execution,” 
Win2k Security Advice Mailing List.  [Online].  Available:  
http://archives.neohapsis.com/archives/win2ksecadvice/2000-
q4/0037.html 
[4] 
E. Hacker.  (2001, Jan. 3).  IDS Evasion with Unicode.  SecurityFocus 
Infocus.  [Online].  Available:  
http://www.securityfocus.com/infocus/1232 
[5] 
R. Graham. (2000).  “SideStep: IDS evasion tool”.  [Online].  Available:  
http://www.robertgraham.com/tmp/sidestep.html 
Daniel J. Roelker is a software developer and IDS researcher at Sourcefire, 
Inc.  He was previously employed as a lead developer on the Dragon Network 
IDS at Enterasys, where he worked on the Dragon detection engine, 
application layer protocol decoders, and event correlation.  He has also 
worked at Johns Hopkins Applied Physics Laboratory with the Department of 
Defense in Information Operations.