## 知识扩展：为什么"多数派"选主算法通常采用奇数节点，而不是偶数节点呢？多数派选主算法的核心是少数服从多数，获得投票多的节点胜出。想象一下，如果现在采用偶数节点集群，当两个节点均获得一半投票时，到底应该选谁为主呢？答案是，在这种情况下，无法选出主，必须重新投票选举。但即使重新投票选举，两个节点拥有相同投票数的概率也会很大。因此，多数派选主算法通常采用奇数节点。这，也是大家通常看到 ZooKeeper、 etcd、Kubernetes等开源软件选主均采用奇数节点的一个关键原因。
## 总结今天，我首先与你讲述了什么是分布式选举，以及为什么需要分布式选举。然后，我和你介绍了实现分布式选举的3 种方法，即：Bully 算法、Raft 算法，以及 ZooKeeper 中的 ZAB算法，并通过实例与你展示了各类方法的选举流程。我将今天的主要内容总结为了如下所示的思维导图，来帮助你加深理解与记忆。![](Images/26cb2ca4403ebd0df6bd988f9bb71a63.png){savepage-src="https://static001.geekbang.org/resource/image/04/bd/04dfd1e4b8a1558fcbfa1bb8a9b077bd.png"}
## 思考题1.  分布式选举和一致性的关系是什么？2.  你是否见到过一个集群中存在双主的场景呢？我是聂鹏程，感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再会！![](Images/c191f391e2aab7575517a886bbd7a681.png){savepage-src="https://static001.geekbang.org/resource/image/a4/8c/a42a16601611a1a72599ecfca434508c.jpg"}
# 05 \| 分布式共识：存异求同你好，我是聂鹏程。今天，我来继续带你打卡分布式核心技术。首先，我们来回忆下上篇文章的分布式选举。分布式选举问题，是从多个节点中选出一个主节点，相关的选举方法几乎都有一个共同特点：每个节点都有选举权和被选举权。大部分选举方法采用多数策略，也就是说一个节点只有得到了大部分节点的同意或认可才能成为主节点，然后主节点向其他节点宣告主权。其实，这个选主过程就是一个分布式共识问题，因为每个节点在选出主节点之前都可以认为自己会成为主节点，也就是说集群节点"存异"；而通过选举的过程选出主节点，让所有的节点都认可该主节点，这叫"求同"。由此可见，**分布式共识的本质就是"存异求同"。**所以，**从本质上看，分布式选举问题，其实就是传统的分布式共识方法，主要是基于多数投票策略实现的。**基于多数投票策略的分布式选举方法，如果用于分布式在线记账一致性问题中，那么记账权通常会完全掌握到主节点的手里，这使得主节点非常容易造假，且存在性能瓶颈。因此，分布式选举不适用于分布式在线记账的一致性问题。在今天这篇文章中，我就带你了解另外一种用于解决分布式在线记账一致性问题的分布式共识技术。这里所说的分布式在线记账，是指在没有集中的发行方，也就是没有银行参与的情况下，任意一台接入互联网的电脑都能参与买卖，所有看到该交易的服务器都可以记录这笔交易，并且记录信息最终都是一致的，以保证交易的准确性。而如何保证交易的一致性，就是该场景下的分布式共识问题。``{=html}接下来，我们就一起学习下分布式共识技术吧。