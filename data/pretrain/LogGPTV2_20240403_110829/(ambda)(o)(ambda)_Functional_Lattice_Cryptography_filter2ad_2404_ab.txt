### 5.2.2 Generic Language Components
**Page 145**

- **Plaintext DSL**  
  **Page 148**

### 5.2.3
**Page 151**

- **BGV-style SHE in Λ∘𝜆**  
  **Page 151**

### 5.3 Ciphertext DSL
**Page 151**

- **Interpreters**  
  **Page 155**

### 5.4
- **Expression Size**  
  **Page 156**
- **Expression Duplicator**  
  **Page 157**
- **Pretty-printer**  
  **Page 159**
- **Logging Error Rates**  
  **Page 159**

### 5.5 Plaintext-to-Ciphertext Compiler
**Page 163**

- **Interface**  
  **Page 163**
- **Tracking Noise, Statically**  
  **Page 165**
- **Implementation**  
  **Page 168**

### 5.6 Future Work
**Page 170**

### Chapter 6: Fast Homomorphic Evaluation of Symmetric Key Primitives
**Page 172**

- **6.1 Homomorphic Evaluation of Symmetric-Key Primitives**  
  **Page 172**
  - **6.1.1 Homomorphic Evaluation of AES**  
    **Page 174**
  - **6.1.2 In Search of Efficient Alternatives**  
    **Page 175**
  - **6.1.3 Our Results**  
    **Page 176**
- **6.2 Homomorphic Computation of Ring Rounding**  
  **Page 178**
- **6.3 Rounding Circuit for Small Moduli**  
  **Page 180**
- **6.4 Homomorphic Computation of the BPR Weak PRF**  
  **Page 183**
  - **6.4.1 BPR Weak PRF**  
    **Page 183**
  - **6.4.2 PRF Instantiation**  
    **Page 184**
  - **6.4.3 Homomorphic Evaluation**  
    **Page 186**
- **6.5 Security of the PRF Instantiation**  
  **Page 187**
  - **6.5.1 Security of PRF**  
    **Page 187**
  - **6.5.2 Security of Homomorphic Evaluation**  
    **Page 190**
- **6.6 ALCHEMY Implementation**  
  **Page 191**
  - **6.6.1 Integer Rounding Circuit**  
    **Page 191**
  - **6.6.2 Ring Rounding**  
    **Page 193**
  - **6.6.3 BPR PRF**  
    **Page 193**
- **6.7 ALCHEMY Evaluation**  
  **Page 196**

### Chapter 7: Challenges for Ring-LWE
**Page 199**

- **7.1 Contributions**  
  **Page 201**
  - **7.1.1 Challenge Instantiations**  
    **Page 204**
  - **7.1.2 Other Related Work**  
    **Page 210**
  - **7.1.3 Organization**  
    **Page 212**
- **7.2 Cut-and-Choose Protocol**  
  **Page 212**
  - **7.2.1 Protocol Description and Properties**  
    **Page 213**
  - **7.2.2 Alternative Protocols**  
    **Page 216**
  - **7.2.3 Verifier and Error Bounds**  
    **Page 218**
- **7.3 Parameters**  
  **Page 221**
  - **7.3.1 Error Parameter**  
    **Page 221**
  - **7.3.2 Modulus**  
    **Page 224**
- **7.4 Hardness Estimates**  
  **Page 225**
  - **7.4.1 Ring-LWE/LWR as BDD**  
    **Page 226**
  - **7.4.2 Root-Hermite Factor**  
    **Page 229**
  - **7.4.3 BKZ Block Size**  
    **Page 230**
- **7.5 Implementation Notes**  
  **Page 231**

### References
**Page 247**

---

### LIST OF TABLES

- **Table 4.1**  
  Source lines of code for Λ∘𝜆 and HElib+NTL.  
  **Page 117**
- **Table 4.2**  
  Number of functions per argon grade: cyclomatic complexities of 1–5 earn an ‘A,’ 6–10 a ‘B,’ and 11 or more a ‘C.’  
  **Page 118**
- **Table 4.3**  
  Runtimes (in microseconds) for conversion between the powerful (P) and CRT (C) bases, and between the decoding (D) and powerful bases (P).  
  **Page 121**
- **Table 4.4**  
  Runtimes (in microseconds) for multiplication by 𝑔 in the powerful (P) and CRT (C) bases, division by 𝑔 in the powerful and decoding (D) bases.  
  **Page 121**
- **Table 4.5**  
  Runtimes (in microseconds) of twace and embed for UCyc.  
  **Page 122**
- **Table 4.6**  
  Runtimes (in milliseconds) for basic SHE functionality, including encrypt, decrypt, ciphertext multiplication.  
  **Page 122**
- **Table 4.7**  
  Runtimes (in milliseconds) for SHE noise and ciphertext management operations.  
  **Page 123**
- **Table 4.8**  
  Runtimes (in milliseconds) for ring tunneling.  
  **Page 124**
- **Table 6.1**  
  Performance comparison with prior homomorphic evaluations of AES [GHS12c; Che+13].  
  **Page 177**
- **Table 6.2**  
  Sequence of plaintext (PT) and ciphertext (CT) cyclotomic ring indices used for ring tunneling from 𝑅 = 𝒪128 to 𝑆 = 𝒪7,680.  
  **Page 190**
- **Table 7.1**  
  Hardness estimates for a selection of our continuous Ring-LWE challenges.  
  **Page 227**
- **Table 7.2**  
  Hardness estimates for a selection of our Ring-LWR challenges.  
  **Page 228**
- **Table 7.3**  
  Root-Hermite factor thresholds for our qualitative hardness estimates.  
  **Page 230**

---

### LIST OF FIGURES

- **Figure 3.1**  
  Representative methods from the Tensor class.  
  **Page 58**
- **Figure 3.2**  
  Representative functions for the Cyc data type.  
  **Page 83**
- **Figure 4.1**  
  Representative (and approximate) code from our implementation of an SHE scheme in Λ∘𝜆.  
  **Page 94**
- **Figure 4.2**  
  Comparison of ring hopping and ring tunneling from a ring 𝐻 to a ring 𝐻′.  
  **Page 97**
- **Figure 4.3**  
  Cyclomatic complexity (CC) of functions in Λ∘𝜆 and HElib+NTL.  
  **Page 119**
- **Figure 4.4**  
  A real-world example of hybrid plaintext/ciphertext rings that could be used to efficiently tunnel from 𝑅 = 𝒪128 to 𝑆 = 𝒪4,095.  
  **Page 124**
- **Figure 7.1**  
  The canonical embedding of: (in dark blue) the dual ideal 𝑅∨ of the 3rd cyclotomic ring 𝑅 = Z[𝜁3], (in light blue) its “decoding” Z-basis {𝑑0, 𝑑1}, and (in red) the continuous spherical Gaussian 𝐷𝑟 of parameter 𝑟 = √2.  
  **Page 207**

---

### SUMMARY

Lattice cryptography has many compelling features, such as security under worst-case hardness assumptions, apparent security against quantum attacks, efficiency, and parallelism, as well as powerful constructions like fully homomorphic encryption. While standard constructions like lattice-based key exchange are starting to be deployed in real-world scenarios, the most powerful lattice cryptosystems are still limited to research prototypes. This is partly due to the difficulty of implementing, instantiating, and using these schemes.

In this work, we present a collection of tools to facilitate broader use of lattice cryptography by improving accessibility and usability. The foundation of this work is Λ∘𝜆, a general-purpose software framework for lattice cryptography. The Λ∘𝜆 library has several features that distinguish it from prior implementations, including high-level abstractions for lattice operations, advanced functionality needed for applications like homomorphic encryption, and safe interfaces.

Many efficient lattice cryptosystems are based on the relatively new Learning With Errors over Rings (Ring-LWE) problem. To attract cryptanalytic effort and improve concrete security estimates for this widely used problem, we publish challenges for Ring-LWE and the related Learning With Rounding over Rings problem. Unlike challenges for other cryptographic problems like integer factorization, a dishonest challenger can make Ring-LWE challenges much harder to solve than properly generated ones. Thus, we propose and implement a non-interactive, publicly verifiable cut-and-choose protocol that provides reasonably convincing evidence that the challenges are properly generated.

Finally, we introduce ALCHEMY, a domain-specific language and compiler for homomorphic computations. In existing implementations of homomorphic encryption, users must manually represent a desired plaintext computation as a much more complex sequence of operations on ciphertexts. ALCHEMY automates most of the steps in this process, which dramatically reduces the expertise needed to use homomorphic encryption.

---

### CHAPTER 1: INTRODUCTION

The field of cryptography is concerned with all aspects of information security in the presence of an untrusted or malicious party. There are a host of cryptographic primitives such as hash functions, pseudo-random functions, public- and private-key encryption, and signature schemes, which can be used to solve particular problems in cryptography. At their core, all cryptographic primitives rely on a computationally intractable or "hard" problem. Typically, these problems are well-studied and believed to be computationally intractible, e.g., mathematical problems like factoring [RSA78; Rab79], quadratic residuocity [GM84], decoding error-correcting codes [McE78], and computing discrete logarithms [DH76]. Since Ajtai's seminal work in 1996 [Ajt04], cryptographers have additionally created primitives that derive their security from hard problems on lattices.

#### 1.1 Advantages of Lattice Cryptography

Lattice cryptography refers to a diverse set of cryptographic constructions that derive their security from hard problems on point lattices in R𝑛, i.e., a discrete additive subgroup of R𝑛. These objects have been studied since 1842 by the likes of Dirichlet and Minkowski [Ajt04]. Lattice cryptography has many features that make it a compelling alternative to number-theoretic cryptography. Among these are its apparent quantum security, its ability to have security from worst-case hardness assumptions, and powerful constructions like fully homomorphic encryption. We explore these advantages in more detail below.

- **Performance**: Early lattice cryptosystems [AD97; GGH97] were impractical due to large keys and ciphertexts. In particular, the [AD97] public-key encryption scheme had public keys of size ˜𝒪(𝑛4) and ciphertexts of size ˜𝒪(𝑛2), with similar runtimes for encryption and decryption, respectively. However, the NTRU public-key encryption scheme introduced by [HPS98] demonstrated how the use of algebraically structured lattices (corresponding to polynomial rings) can lead to very efficient cryptography using lattices. Efficiency was further improved with the introduction of the Learning with Errors (LWE) problem [Reg09]. These two improvements were eventually combined into the flexible and efficient Ring-LWE problem [LPR13b], which has been widely used in lattice cryptosystems. These efficient schemes are broadly known as ring-based cryptography.
- **Parallelism**: Most modern hardware supports some form of parallelism, e.g., via vector instruction sets, multiple cores, or graphics processing units (GPUs). Lattice cryptosystems are well-poised to take advantage of this hardware parallelism because lattice operations in R𝑛 can be performed in 𝒪(log 𝑛) or even 𝒪(1) parallel operations on 𝑛 processors. This has the potential to make expensive applications, like fully homomorphic encryption, usable in practice. Parallelism in lattice cryptography has only recently been explored using hardware vector instructions [Alk+16; Bou+17] and GPUs [Wan+12].
- **Quantum Security**: In some cryptographic applications (like message authentication), we only need to consider the current computational abilities of an adversary. With applications like encryption, however, we might require that an adversary who collects encrypted data today should not be able to read it for (say) the next 100 years. This means we must account for computational and algorithmic advances that may take place over that period, including the possibility that future attackers may have access to more powerful computational models that do not exist today. One such model that has been widely studied is the quantum computer. Considerable work has been done towards actually constructing a large-scale quantum computer. Furthermore, it appears that quantum computers offer additional computational power compared to classical devices. In particular, Peter Shor [Sho97] showed that cryptography relying on the intractibility of factoring large numbers or computing discrete logarithms would be insecure with mature quantum computing (though these problems are apparently secure against a classical adversary). Researchers have also tried to attack lattice problems with quantum algorithms, but have so far come up empty-handed. This gives lattice cryptography the distinguished property of having (apparent) quantum security, which has led to significant interest.