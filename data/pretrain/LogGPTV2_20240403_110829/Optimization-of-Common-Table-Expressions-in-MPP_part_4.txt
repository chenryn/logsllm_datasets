WHERE v1.p  1000
fullcostofexecutingtheexpressionisincurred,and
The query in Example 9 computes two different distinct ag-
2. AplaninwhichtheCTEexpressionisnotinlined,andhence
gregates on catalog sales. A possible MPP execution strat-
weonlyincurthecostofreadingtheCTEoutputs.
egy of a single distinct aggregate requires input to be hash-
Comparingthecostofthesetwoalternativeslocallyisincorrect, distributed based on the aggregate column. This enables effi-
however, because the second alternative also implicitly assumes cient identification of duplicates by sending identical values to
thatsomewhereelse, aCTEProducerexecutestheexpressionand the same node, and using multiple aggregation levels for de-
writestheresults.ThecostoftheCTEProducercannotbeaddedto duplication. However, when two (or more) different distinct ag-
gregatesarerequired(e.g.,COUNT(DISTINCT cs item sk),
thereadingcostoftheCTEConsumersincetheCTEProducercom-
AVG(DISTINCT cs qty)),thisstrategybecomeslessefficient,
putesandwritesdatathatcanbereadbymultipleconsumers,hence
itsoverheadisamortizedamongtheseconsumers. sinceeachaggregateentailsadistributiononadifferentcolumn.
As pointed out in [14], deciding on the best plan cannot take InOrca,arulethattransformsdifferentdistinctaggregatesintoa
placelocallyforeachCTEConsumer,buthastotakeintoaccount joinbetweenCTEConsumersisused,sothatwecomputetheinput
all consumers of the same CTE, as well as the corresponding to different aggregates only once. The join serves as a means to
CTEProducer. Unliketheapproachin[14],ourapproachdoesnot concatenatethetwoaggregatevaluesinoneresultingtuple. Fig-
requiretheadditionalworkofcomputingtheleastcommonances- ure12illustratestheinputandoutputofthistransformationrule.
torofallconsumersofthesameCTE,sincethisisalreadyknown;it Each CTEConsumer goes through a different Redistribute opera-
istheMemogroupwhichcontainsthecorrespondingCTEAnchor. torbasedononeaggregatecolumn. ThisallowstheMPPsystem
SincetheCTEProducerisattachedtotherestofthequeryviathe nodes to perform distinct aggregate computation in parallel. For
Sequence, any plan alternative which includes the CTEProducer morethantwodistinctaggregates,thejoinscanbecascaded.
(e.g.Figure3(b))hasitscostaccountedfor,regardlessofthenum- 8.2 CommonSubexpressionElimination
berofCTEConsumers.AplanwhichdoesnothaveaCTEProducer
InadditiontooptimizingquerieswithexplicitCTEs,ourframe-
(e.g. Figure3(a))doesnotincurthatextracost. Asaresult,com-
work can also be used to optimize queries with common subex-
putingthecostandcomparingtheplanshappensorganicallyasthe
pressionsthatarenotexplicitlydefinedasCTEs.Thisisknownas
differentplanalternativesareenumerated.
commonsubexpressionelimination.
8. CTE-BASEDOPTIMIZATIONS Example10. Considerthefollowingquery:
WediscusshowCTEsareimplicitlygeneratedbyOrcaasaway SELECT *
FROM (SELECT ibrand, count(*) as b
ofoptimizingqueriesthatmaynotincludeexplicitlydefinedCTEs.
FROM item GROUP BY ibrand HAVING count(*) > 10) t1,
We show how CTEs can be used for optimizing some relational (SELECT ibrand, count(*) as b
constructssuchasdistinctaggregates(Section8.1), andforcom- FROM item GROUP BY ibrand HAVING count(*) > 20) t2
monsubexpressionelimination(Section8.2). WHERE t1.ibrand <> t2.ibrand;
1712
GbAgg' Sequence, Algorithm2:CommonSubexpressionElimination
,COUNT(DISTINCT,cs_item_sk),
AVG(DISTINCT,cs_qty), CTEProducer(0), Join' 1 AlgorithmEliminateCommonSubexpressions()
Input :Expressionexprin
COUNT(cs_item_sk)' AVG(cs_qty)' Output:Expressionexprout
Gather' Gather' 2 M=DetectMatches(exprin);
3 foreach(m∈Ms.t.size(m)>1)do
cs_nS ee tl _e pct r' ofit,, Select' GbAgg(cs_item_sk), GbAgg(cs_qty) 4 exprp=anyexpression∈m;
>,1000,, cs_net_profit,, (level,2)' (level,2)' 5 p=createCTEProducerforexprp;
>,1000,, Redistribute(cs_item_sk), Redistribute(cs_qty), 6 m.id=p.id;
7 end
GbAgg(cs_item_sk), GbAgg(cs_qty) 8 exprout=InsertCTEConsumers(exprin,M);
TableScan' TableScan' (level,1)' (level,1)' 9 foreach(m∈Ms.t.m.used==true)do
(catalog_sales), (catalog_sales), CTEConsumer(0)' CTEConsumer(0)' 10 l=LCA(m.consumers,exprout);
(a)$Transforma,on$Input$ (b)$Output$Plan$ 11 exprout=insertCTEAnchor(m.id)abovelinexprout
12 end
Figure12:GeneratingCTEsforMultipleDistinctAggregates 13 returnexprout;
14 ProcedureInsertCTEConsumers()
Input :Expressionexprin,SetOfMatchesM
!"#$% 1/234"56)'40)3& 1/2-$)9"40)3& Output:Expressionexprout
15 if(∃m∈Ms.t.exprin∈m)then
&'(')*% &'(')*% !"#$% 16 m.used=true;
!"#$%&'&()& !"#$%&'&4)&
17 c=createCTEConsumer(m.id);
18 addctom.consumers;
+,-..% +,-..% +,-..% &'(')*% &'(')*% 19 returnc;
*+,-.$/& *+,-.$/& *+,-.$/& !"#$%&'&()& !"#$%&'&4)&
20 end
21 new children=newset;
/0,('&)0$% /0,('&)0$% /0,('&)0$% 1/21"$768'40)3%1/21"$768'40)3%
0*%123& 0*%123& 0*%123& 22 foreach(child∈exprin.children)do
23 new child=InsertCTEConsumers(child,M);
!"#$%&'()$'*+(',,-./,$ !0#$1.22./$'*+(',,-./,$+&33'4$.&5$-/5.$167$ 24 addnew childtonew children;
25 end
Figure13:Commonsubexpressionelimination 26 returnnewExpression(exprin.op,new children);
Figure 13(a) depicts the logical expression tree of this query. andfromadifferentprocess),buttheyneverrequirereadingfrom
Thequeryhasarepeatedcommonsubexpression,outlinedbythe aCTEProduceronanotherhost.
twodottedboxes. Algorithm2transformsaninputlogicalexpres- Beforequeryexecutionstarts,CTEConsumersareinstantiatedas
sion expr in into an equivalent expression expr out, where com- SharedScanoperators,andCTEProducersareinstantiatedasMate-
monsubexpressionsarereplacedwithCTEConsumers. Thealgo- rialize(Spool)orSortnodes(iftheCTEproducessortedresults).
rithmutilizesthefunctionDetectMatches()todetectidenti-