2
第 章
及 基础
Docker Kubernetes
上一章主要讲解了Kubernetes各种版本的安装方式，相信读者已经有了一套高可用Kubernetes
集群了，并且也对Kubernetes的架构和各种组件有了一些认识。本章主要讲解Docker和Kubernetes
的一些基本概念和简单操作，基于上一章搭建的集群来学习本章内容会让自己印象更加深刻。
基础
2.1 Docker
2.1.1 Docker 介绍
Docker是一个开源的软件项目，在Linux操作系统上，Docker提供了一个额外的软件抽象层
及操作系统层虚拟化的自动管理机制。Docker 运行名为“Container（容器）”的软件包，容器之
间彼此隔离，并捆绑了自己的应用程序、工具、库和配置文件。所有容器都由单个操作系统内核运
行，因此比虚拟机更轻量级。
Docker 利用 Linux 资源分离机制，例如 cgroups 及 Linux Namespace 来创建相互独立的容器
（Container），可以在单个Linux实体下运行，避免了启动一个虚拟机造成的额外负担。Linux核
心对Namespace（命名空间）的支持完全隔离了不同Namespace下的应用程序的“视野”（即作用
范围），包括进程树、网络、用户 ID 与挂载的文件系统等，而核心 cgroups 则提供了资源隔离，
包括CPU、存储器、Block I/O与网络。
2.1.2 Docker 基本命令
本节介绍Docker的一些常用命令，这些命令有助于读者排查和解决集群中的问题。
查看Docker版本。包括Docker版本号、API版本号、Git Commit、Go版本号等。
[root@K8S-master01 ~]# docker version
第2章 Docker及Kubernetes基础 | 53
Client:
Version: 17.09.1-ce
API version: 1.32
Go version: go1.8.3
Git commit: 19e2cf6
Built: Thu Dec 7 22:23:40 2017
OS/Arch: linux/amd64
Server:
Version: 17.09.1-ce
API version: 1.32 (minimum version 1.12)
Go version: go1.8.3
Git commit: 19e2cf6
Built: Thu Dec 7 22:25:03 2017
OS/Arch: linux/amd64
Experimental: false
显示Docker信息：
Containers: 22
Running: 21
Paused: 0
Stopped: 1
Images: 18
Server Version: 17.09.1-ce
Storage Driver: overlay2
Backing Filesystem: xfs
Supports d_type: true
Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
Volume: local
Network: bridge host macvlan null overlay
Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 06b9cb35161009dcb7123345749fef02f7cea8e0
runc version: 3f2f8b84a77f73d38244dd690525642a72156c64
init version: 949e6fa
Security Options:
seccomp
Profile: default
Kernel Version: 4.18.9-1.el7.elrepo.x86_64
Operating System: CentOS Linux 7 (Core)
OSType: linux
Architecture: x86_64
CPUs: 4
Total Memory: 3.848GiB
Name: K8S-master01
ID: HM66:LH4K:PNES:GFJX:TKNX:TLOH:WONE:KLHT:YRB3:3KAR:3WZJ:HYOX
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
54 | 再也不踩坑的Kubernetes实战指南
Debug Mode (server): false
Username: dotbalo
Registry: https://index.docker.io/v1/
Experimental: false
Insecure Registries:
127.0.0.0/8
Live Restore Enabled: false
查询镜像。OFFICIAL为OK的是官方镜像，默认搜索的是hub.docker.com。
[root@K8S-master01 ~]# docker search nginx
NAME DESCRIPTION
STARS OFFICIAL AUTOMATED
nginx Official build of Nginx.
10749 [OK]
jwilder/nginx-proxy Automated Nginx reverse
proxy for docker c... 1507 [OK]
richarvey/nginx-php-fpm Container running Nginx +
PHP-FPM capable ... 675 [OK]
jrcs/letsencrypt-nginx-proxy-companion LetsEncrypt container
to use with nginx as... 469 [OK]
webdevops/php-nginx Nginx with PHP-FPM
120 [OK]
kitematic/hello-world-nginx A light-weight nginx
container that demons... 119
zabbix/zabbix-web-nginx-mysql Zabbix frontend based on
Nginx web-server ... 86 [OK]
bitnami/nginx Bitnami nginx Docker Image
60 [OK]
linuxserver/nginx An Nginx container, brought
to you by Linu... 51
1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5
ubuntu-16-nginx-php-phpmyadmin-mysql-5 48
[OK]
tobi312/rpi-nginx NGINX on Raspberry Pi / armhf
23 [OK]
nginx/nginx-ingress NGINX Ingress Controller
for Kubernetes 15
blacklabelops/nginx Dockerized Nginx Reverse
Proxy Server. 12 [OK]
wodby/drupal-nginx Nginx for Drupal container
image 11 [OK]
centos/nginx-18-centos7 Platform for running nginx
1.8 or building... 10
nginxdemos/hello NGINX webserver that serves
a simple page ... 9 [OK]
webdevops/nginx Nginx container
8 [OK]
centos/nginx-112-centos7 Platform for running nginx
1.12 or buildin... 6
1science/nginx Nginx Docker images that
include Consul Te... 4 [OK]
travix/nginx NGinx reverse proxy
2 [OK]
mailu/nginx Mailu nginx frontend
第2章 Docker及Kubernetes基础 | 55
2 [OK]
pebbletech/nginx-proxy nginx-proxy sets up a
container running ng... 2 [OK]
toccoag/openshift-nginx Nginx reverse proxy for
Nice running on sa... 1 [OK]
ansibleplaybookbundle/nginx-apb An APB to deploy NGINX
0 [OK]
wodby/nginx Generic nginx
拉取/下载镜像。默认是hub.docker.com（docker.io）上面的镜像，如果拉取公司内部的镜像或
者其他仓库上的镜像，需要在镜像前面加上仓库的URL，如：
docker pull harbor.xxx.net/frontend:v1
拉取公网上的Nginx镜像：
# 把公网上的镜像拉取到本地服务器，不指定版本号为latest
[root@K8S-master01 ~]# docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
Digest:
sha256:b543f6d0983fbc25b9874e22f4fe257a567111da96fd1d8f1b44315f1236398c
Status: Image is up to date for nginx:latest
#拉取指定版本
[root@K8S-master01 ~]# docker pull nginx:1.15
1.15: Pulling from library/nginx
Digest:
sha256:b543f6d0983fbc25b9874e22f4fe257a567111da96fd1d8f1b44315f1236398c
Status: Downloaded newer image for nginx:1.15
推送镜像。把本地的镜像推送到公网仓库中，或者公司内部的仓库中。
默认登录和推送的是公网的镜像，如果需要推送到公司仓库或者其他仓库，只需要在镜像前
面使用tag并加上URL即可：
[root@K8S-master01 ~]# docker images | grep nginx-v2
nginx-v2 latest
3d9c6e44d3db 3 hours ago 109MB
[root@K8S-master01 ~]# docker tag nginx-v2 dotbalo/nginx-v2:test
[root@K8S-master01 ~]# docker images | grep nginx-v2
dotbalo/nginx-v2 test
3d9c6e44d3db 3 hours ago 109MB
nginx-v2 latest
3d9c6e44d3db 3 hours ago 109MB
[root@K8S-master01 ~]# docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't
have a Docker ID, head over to https://hub.docker.com to create one.
Username (dotbalo): dotbalo
Password:
Login Succeeded
[root@K8S-master01 ~]# docker push dotbalo/nginx-v2:test
The push refers to a repository [docker.io/dotbalo/nginx-v2]
2eaa7b5717a2: Mounted from dotbalo/nginx
a674e06ede38: Mounted from dotbalo/nginx
b7efe781401d: Mounted from dotbalo/nginx
56 | 再也不踩坑的Kubernetes实战指南
c9c2a3696080: Mounted from dotbalo/nginx
7b4e562e58dc: Mounted from dotbalo/nginx
test: digest:
sha256:5d749d2b10150426b510d2c3a05a99cf547c2ca1be382e1dbb2f90b68b6bea96 size:
1362
前台启动一个容器：
[root@DockerTestServer ~]# docker run -ti nginx bash
root@23bc7ccabb09:/#
后台启动：
[root@DockerTestServer ~]# docker run -tid nginx bash
1bcf5154d5c3a57d92a6796f526eac2cefd962aaca9cf4098689bfe830bb9e5e
端口映射。可以将本机的端口映射到容器的端口，比如将本机的 1111 端口映射到容器的 80
端口：
[root@DockerTestServer ~]# docker run -ti -p 1111:80 nginx bash
root@cd676d572188:/#
挂载卷。可以将本机的目录挂载到容器的指定目录，比如将hosts文件挂载到容器的hosts：
[root@DockerTestServer ~]# docker run -ti -p 1111:80 -v /etc/hosts:/etc/hosts
nginx bash
root@cd676d572188:/#
查看当前正在运行的容器：
[root@K8S-master01 K8S-ha-install]# docker ps
CONTAINER ID IMAGE
COMMAND CREATED STATUS PORTS
NAMES
862e82066496 94ec7e53edfc
"nginx -g 'daemon ..." 21 hours ago Up 21 hours
K8S_nginx_nginx-deployment-57895845b8-vb7bs_default_d0d254f8-1fb3-11e9-a9f2-00
0c293ad492_1
10bf838e18d0
registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 "/pause"
21 hours ago Up 21 hours
K8S_POD_nginx-deployment-57895845b8-vb7bs_default_d0d254f8-1fb3-11e9-a9f2-000c
293ad492_1
查看所有容器，包括已经退出的：
[root@K8S-master01 K8S-ha-install]# docker ps -a
查看正在运行的容器（即显示出容器的ID）：
[root@K8S-master01 K8S-ha-install]# docker ps -q
……
0d1a98b3c402
c1fd8ff1f7f2
86b1c069024b
……
查看所有容器的ID，包括已经退出的：
第2章 Docker及Kubernetes基础 | 57
[root@K8S-master01 K8S-ha-install]# docker ps -aq
……
17019738d93d
b3bb2a592dfb
e0637b76afe3
0b74e028d0ae
65a1b5e1e501
……
进入到一个后台运行的容器（即之前用-d命令参数来指定后台运行方式的容器）：
[root@K8S-master01 K8S-ha-install]# docker ps | tail -1
86b1c069024b nginx:latest
"nginx -g 'daemon ..." 4 days ago Up 21 hours 80/tcp,
0.0.0.0:16443->16443/tcp nginx-lb
[root@K8S-master01 K8S-ha-install]# docker exec -ti 86b1c069024b bash
root@nginx-lb:/#
拷贝文件。双向拷贝，可以将本机的文件拷贝到容器，反之亦然：
[root@K8S-master01 K8S-ha-install]# docker cp README.md
92aceec0dcdd327a709bf0ec83:/tmp
#exec也可直接执行容器命令
[root@K8S-master01 K8S-ha-install]# docker exec 92aceec0dcdd327a709bf0ec83 ls
/tmp/
README.md
删除已经退出的容器：
[root@K8S-master01 K8S-ha-install]# docker ps -a |grep Exited | tail -3
600e5da5c196 3cab8e1b9802
"etcd --advertise-..." 4 days ago Exited (137) 21 hours ago
K8S_etcd_etcd-K8S-master01_kube-system_c94bb8ceba1b924e6e3175228b168fe0_0
5a1848d923a1
registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 "/pause"
4 days ago Exited (0) 21 hours ago
K8S_POD_kube-scheduler-K8S-master01_kube-system_9c27268d8e3e5c14fa0160192a2c79
88_0
280fc86494f1
registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 "/pause"
4 days ago Exited (0) 21 hours ago
K8S_POD_etcd-K8S-master01_kube-system_c94bb8ceba1b924e6e3175228b168fe0_0
[root@K8S-master01 K8S-ha-install]# docker rm 600e5da5c196 5a1848d923a1
280fc86494f1
600e5da5c196
5a1848d923a1
280fc86494f1
[root@K8S-master01 K8S-ha-install]# docker ps -a |grep Exited | grep -E
"600e5da5c196|5a1848d923a1|280fc86494f1"
删除本机镜像。比如删除REPOSITORY为none的镜像：
[root@K8S-master01 K8S-ha-install]# docker images | grep none
 7ad745acca31 2 days ago 5.83MB
dotbalo/canary 
00f40cc9b7f6 2 days ago 5.83MB
dotbalo/canary 
58 | 再也不踩坑的Kubernetes实战指南
9b0f2f308931 2 days ago 5.83MB
 c3d2357e9cbd 2 days ago 4.41MB
dotbalo/nginx 
97c97cee03f9 3 days ago 109MB
[root@K8S-master01 K8S-ha-install]# docker rmi 7ad745acca31 00f40cc9b7f6
9b0f2f308931 c3d2357e9cbd 97c97cee03f9
Deleted:
sha256:7ad745acca31e3f753a3d50e45b7868e9a1aa177369757a9724bccf0654abcb2
Deleted:
sha256:0546dcf8a97e167875d6563ef7f02ddd8ad3fc0d5f5c064b41e1ce67369b7e06
Untagged:
dotbalo/canary@sha256:cdd99e578cb2cb8e84eaf2e077c2195a40948c9621d32004a9b5f4e8
2a408f4d
Deleted:
sha256:00f40cc9b7f6946f17a0eb4fef859aa4e898d3170f023171d0502f8b447353a6
Deleted:
sha256:7306c50196b5adc635e59152851dbb7fb2dc8782ecb217702849be26e3b1f2a5
Deleted:
sha256:6b4fe6af6a9cd0d567326e718b91fdd5aca3d39d32bd40bbdd372430be286e3f
Deleted:
sha256:b864518ff0e99c77046a58f6d82311c8eb64a88ed60bc28d8bd330137eddc024
Untagged:
dotbalo/canary@sha256:8edea17bdeb346d20f1e93d0d4bf340f42ee8c8373885aa388c536e1
a718c7e7
Deleted:
sha256:9b0f2f308931a88a5731955d58ae1226b5c147d8f372dae7c2250c0ff9854bf4
Deleted: