### 第2章 Docker及Kubernetes基础

#### 2.1 Docker

##### 2.1.1 Docker介绍
Docker是一个开源的软件项目，它在Linux操作系统上提供了一个额外的软件抽象层以及自动管理操作系统的虚拟化机制。Docker运行名为“容器”的软件包，这些容器彼此隔离，并捆绑了自己的应用程序、工具、库和配置文件。所有容器都由单一的操作系统内核运行，因此比传统的虚拟机更加轻量级。

Docker利用了Linux的资源分离机制，如cgroups和Linux Namespace，来创建相互独立的容器。这些容器可以在同一个Linux实例下运行，避免了启动一个完整虚拟机所带来的额外开销。Linux内核对Namespace的支持使得不同Namespace下的应用程序完全隔离，包括进程树、网络、用户ID和挂载的文件系统等。而cgroups则提供了资源隔离，包括CPU、内存、Block I/O和网络。

##### 2.1.2 Docker基本命令
本节将介绍一些常用的Docker命令，这些命令有助于读者排查和解决集群中的问题。

- **查看Docker版本**
  ```bash
  [root@K8S-master01 ~]# docker version
  Client:
  Version: 17.09.1-ce
  API version: 1.32
  Go version: go1.8.3
  Git commit: 19e2cf6
  Built: Thu Dec 7 22:23:40 2017
  OS/Arch: linux/amd64
  
  Server:
  Version: 17.09.1-ce
  API version: 1.32 (minimum version 1.12)
  Go version: go1.8.3
  Git commit: 19e2cf6
  Built: Thu Dec 7 22:25:03 2017
  OS/Arch: linux/amd64
  Experimental: false
  ```

- **显示Docker信息**
  ```bash
  [root@K8S-master01 ~]# docker info
  Containers: 22
  Running: 21
  Paused: 0
  Stopped: 1
  Images: 18
  ...
  ```

- **查询镜像**
  默认搜索的是`hub.docker.com`。
  ```bash
  [root@K8S-master01 ~]# docker search nginx
  NAME DESCRIPTION
  STARS OFFICIAL AUTOMATED
  nginx Official build of Nginx.
  10749 [OK]
  jwilder/nginx-proxy Automated Nginx reverse
  proxy for docker c... 1507 [OK]
  ...
  ```

- **拉取/下载镜像**
  默认从`hub.docker.com`（即`docker.io`）拉取镜像。如果需要拉取公司内部或其他仓库的镜像，需在镜像名称前加上仓库URL。
  ```bash
  # 拉取最新版本的Nginx镜像
  [root@K8S-master01 ~]# docker pull nginx
  Using default tag: latest
  latest: Pulling from library/nginx
  Digest: sha256:b543f6d0983fbc25b9874e22f4fe257a567111da96fd1d8f1b44315f1236398c
  Status: Image is up to date for nginx:latest

  # 拉取指定版本的Nginx镜像
  [root@K8S-master01 ~]# docker pull nginx:1.15
  1.15: Pulling from library/nginx
  Digest: sha256:b543f6d0983fbc25b9874e22f4fe257a567111da96fd1d8f1b44315f1236398c
  Status: Downloaded newer image for nginx:1.15
  ```

- **推送镜像**
  将本地镜像推送到公网仓库或公司内部仓库。默认推送至`hub.docker.com`，若需推送至其他仓库，需在镜像前使用`tag`并加上URL。
  ```bash
  [root@K8S-master01 ~]# docker images | grep nginx-v2
  nginx-v2 latest 3d9c6e44d3db 3 hours ago 109MB
  [root@K8S-master01 ~]# docker tag nginx-v2 dotbalo/nginx-v2:test
  [root@K8S-master01 ~]# docker images | grep nginx-v2
  dotbalo/nginx-v2 test 3d9c6e44d3db 3 hours ago 109MB
  nginx-v2 latest 3d9c6e44d3db 3 hours ago 109MB
  [root@K8S-master01 ~]# docker login
  Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
  Username (dotbalo): dotbalo
  Password:
  Login Succeeded
  [root@K8S-master01 ~]# docker push dotbalo/nginx-v2:test
  The push refers to a repository [docker.io/dotbalo/nginx-v2]
  2eaa7b5717a2: Mounted from dotbalo/nginx
  a674e06ede38: Mounted from dotbalo/nginx
  b7efe781401d: Mounted from dotbalo/nginx
  c9c2a3696080: Mounted from dotbalo/nginx
  7b4e562e58dc: Mounted from dotbalo/nginx
  test: digest: sha256:5d749d2b10150426b510d2c3a05a99cf547c2ca1be382e1dbb2f90b68b6bea96 size: 1362
  ```

- **前台启动一个容器**
  ```bash
  [root@DockerTestServer ~]# docker run -ti nginx bash
  root@23bc7ccabb09:/#
  ```

- **后台启动容器**
  ```bash
  [root@DockerTestServer ~]# docker run -tid nginx bash
  1bcf5154d5c3a57d92a6796f526eac2cefd962aaca9cf4098689bfe830bb9e5e
  ```

- **端口映射**
  可以将本机的端口映射到容器的端口，例如将本机的1111端口映射到容器的80端口。
  ```bash
  [root@DockerTestServer ~]# docker run -ti -p 1111:80 nginx bash
  root@cd676d572188:/#
  ```

- **挂载卷**
  可以将本机的目录挂载到容器的指定目录，例如将`/etc/hosts`文件挂载到容器的`/etc/hosts`。
  ```bash
  [root@DockerTestServer ~]# docker run -ti -p 1111:80 -v /etc/hosts:/etc/hosts nginx bash
  root@cd676d572188:/#
  ```

- **查看当前正在运行的容器**
  ```bash
  [root@K8S-master01 K8S-ha-install]# docker ps
  CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
  862e82066496 94ec7e53edfc "nginx -g 'daemon ..." 21 hours ago Up 21 hours K8S_nginx_nginx-deployment-57895845b8-vb7bs_default_d0d254f8-1fb3-11e9-a9f2-000c293ad492_1
  10bf838e18d0 registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 "/pause" 21 hours ago Up 21 hours K8S_POD_nginx-deployment-57895845b8-vb7bs_default_d0d254f8-1fb3-11e9-a9f2-000c293ad492_1
  ```

- **查看所有容器，包括已经退出的**
  ```bash
  [root@K8S-master01 K8S-ha-install]# docker ps -a
  ```

- **查看正在运行的容器（仅显示容器ID）**
  ```bash
  [root@K8S-master01 K8S-ha-install]# docker ps -q
  0d1a98b3c402
  c1fd8ff1f7f2
  86b1c069024b
  ```

- **查看所有容器的ID，包括已经退出的**
  ```bash
  [root@K8S-master01 K8S-ha-install]# docker ps -aq
  17019738d93d
  b3bb2a592dfb
  e0637b76afe3
  0b74e028d0ae
  65a1b5e1e501
  ```

- **进入后台运行的容器**
  ```bash
  [root@K8S-master01 K8S-ha-install]# docker ps | tail -1
  86b1c069024b nginx:latest "nginx -g 'daemon ..." 4 days ago Up 21 hours 80/tcp, 0.0.0.0:16443->16443/tcp nginx-lb
  [root@K8S-master01 K8S-ha-install]# docker exec -ti 86b1c069024b bash
  root@nginx-lb:/#
  ```

- **拷贝文件**
  双向拷贝，可以将本机的文件拷贝到容器，反之亦然。
  ```bash
  [root@K8S-master01 K8S-ha-install]# docker cp README.md 92aceec0dcdd327a709bf0ec83:/tmp
  [root@K8S-master01 K8S-ha-install]# docker exec 92aceec0dcdd327a709bf0ec83 ls /tmp/
  README.md
  ```

- **删除已退出的容器**
  ```bash
  [root@K8S-master01 K8S-ha-install]# docker ps -a | grep Exited | tail -3
  600e5da5c196 3cab8e1b9802 "etcd --advertise-..." 4 days ago Exited (137) 21 hours ago K8S_etcd_etcd-K8S-master01_kube-system_c94bb8ceba1b924e6e3175228b168fe0_0
  5a1848d923a1 registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 "/pause" 4 days ago Exited (0) 21 hours ago K8S_POD_kube-scheduler-K8S-master01_kube-system_9c27268d8e3e5c14fa0160192a2c7988_0
  280fc86494f1 registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 "/pause" 4 days ago Exited (0) 21 hours ago K8S_POD_etcd-K8S-master01_kube-system_c94bb8ceba1b924e6e3175228b168fe0_0
  [root@K8S-master01 K8S-ha-install]# docker rm 600e5da5c196 5a1848d923a1 280fc86494f1
  600e5da5c196
  5a1848d923a1
  280fc86494f1
  [root@K8S-master01 K8S-ha-install]# docker ps -a | grep Exited | grep -E "600e5da5c196|5a1848d923a1|280fc86494f1"
  ```

- **删除本机镜像**
  例如删除`REPOSITORY`为`none`的镜像。
  ```bash
  [root@K8S-master01 K8S-ha-install]# docker images | grep none
  7ad745acca31 2 days ago 5.83MB
  dotbalo/canary 00f40cc9b7f6 2 days ago 5.83MB
  9b0f2f308931 2 days ago 5.83MB
  c3d2357e9cbd 2 days ago 4.41MB
  dotbalo/nginx 97c97cee03f9 3 days ago 109MB
  [root@K8S-master01 K8S-ha-install]# docker rmi 7ad745acca31 00f40cc9b7f6 9b0f2f308931 c3d2357e9cbd 97c97cee03f9
  Deleted: sha256:7ad745acca31e3f753a3d50e45b7868e9a1aa177369757a9724bccf0654abcb2
  Deleted: sha256:0546dcf8a97e167875d6563ef7f02ddd8ad3fc0d5f5c064b41e1ce67369b7e06
  Untagged: dotbalo/canary@sha256:cdd99e578cb2cb8e84eaf2e077c2195a40948c9621d32004a9b5f4e82a408f4d
  Deleted: sha256:00f40cc9b7f6946f17a0eb4fef859aa4e898d3170f023171d0502f8b447353a6
  Deleted: sha256:7306c50196b5adc635e59152851dbb7fb2dc8782ecb217702849be26e3b1f2a5
  Deleted: sha256:6b4fe6af6a9cd0d567326e718b91fdd5aca3d39d32bd40bbdd372430be286e3f
  Deleted: sha256:b864518ff0e99c77046a58f6d82311c8eb64a88ed60bc28d8bd330137eddc024
  Untagged: dotbalo/canary@sha256:8edea17bdeb346d20f1e93d0d4bf340f42ee8c8373885aa388c536e1a718c7e7
  Deleted: sha256:9b0f2f308931a88a5731955d58ae1226b5c147d8f372dae7c2250c0ff9854bf4
  ```