n Authentication services
By far the most common authentication mechanism employed by web applica-
tions uses HTML forms to capture a username and password and submit these
to the application. This mechanism accounts for well over 90% of applications
you are likely to encounter on the Internet.
In more security-critical Internet applications, such as online banking, this
basic mechanism is often expanded into multiple stages, requiring the user to
submit additional credentials, such as a PIN or selected characters from a secret
word. HTML forms are still typically used to capture relevant data.
In the most security-critical applications, such as private banking for high-worth
individuals, it is common to encounter multifactor mechanisms using physical
tokens. These tokens typically produce a stream of one-time passcodes or per-
form a challenge-response function based on input specifi ed by the application.
As the cost of this technology falls over time, it is likely that more applications
will employ this kind of mechanism. However, many of these solutions do not
actually address the threats for which they were devised — primarily phishing
attacks and those employing client-side Trojans.
Some web applications employ client-side SSL certifi cates or cryptographic
mechanisms implemented within smartcards. Because of the overhead of adminis-
tering and distributing these items, they are typically used only in security-critical
cc0066..iinndddd 116600 88//1199//22001111 1122::0066::3377 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 161
Chapter 6 n Attacking Authentication 161
contexts where an application’s user base is small, such as web-based VPNs for
remote offi ce workers.
The HTTP-based authentication mechanisms (basic, digest, and Windows-
integrated) are rarely used on the Internet. They are much more commonly
encountered in intranet environments where an organization’s internal users
gain access to corporate applications by supplying their normal network or
domain credentials. The application then processes these credentials using one
of these technologies.
Third-party authentication services such as Microsoft Passport are occasion-
ally encountered, but at the present time they have not been adopted on any
signifi cant scale.
Most of the vulnerabilities and attacks that arise in relation to authentication
can be applied to any of the technologies mentioned. Because of the overwhelm-
ing dominance of HTML forms-based authentication, we will describe each
specifi c vulnerability and attack in that context. Where relevant, we will point
out any specifi c differences and attack methodologies that are relevant to the
other available technologies.
Design Flaws in Authentication Mechanisms
Authentication functionality is subject to more design weaknesses than any
other security mechanism commonly employed in web applications. Even
in the apparently simple, standard model where an application authenticates
users based on their username and password, shortcomings in the design of
this model can leave the application highly vulnerable to unauthorized access.
Bad Passwords
Many web applications employ no or minimal controls over the quality of users’
passwords. It is common to encounter applications that allow passwords that are:
n Very short or blank
n Common dictionary words or names
n The same as the username
n Still set to a default value
Figure 6-1 shows an example of weak password quality rules. End users typi-
cally display little awareness of security issues. Hence, it is highly likely that
an application that does not enforce strong password standards will contain a
large number of user accounts with weak passwords set. An attacker can easily
guess these account passwords, granting him or her unauthorized access to the
application.
cc0066..iinndddd 116611 88//1199//22001111 1122::0066::3377 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 162
162 Chapter 6 n Attacking Authentication
Figure 6-1: An application that enforces weak password quality rules
HACK STEPS
Attempt to discover any rules regarding password quality:
1. Review the website for any description of the rules.
2. If self-registration is possible, attempt to register several accounts with
different kinds of weak passwords to discover what rules are in place.
3. If you control a single account and password change is possible, attempt
to change your password to various weak values.
NOTE If password quality rules are enforced only through client-side con-
trols, this is not itself a security issue, because ordinary users will still be
protected. It is not normally a threat to an application’s security that a crafty
attacker can assign himself a weak password.
TRY IT!
http://mdsec.net/auth/217/
Brute-Forcible Login
Login functionality presents an open invitation for an attacker to try to guess
usernames and passwords and therefore gain unauthorized access to the appli-
cation. If the application allows an attacker to make repeated login attempts
cc0066..iinndddd 116622 88//1199//22001111 1122::0066::3377 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 163
Chapter 6 n Attacking Authentication 163
with different passwords until he guesses the correct one, it is highly vulnerable
even to an amateur attacker who manually enters some common usernames
and passwords into his browser.
Recent compromises of high-profi le sites have provided access to hundreds
of thousands of real-world passwords that were stored either in cleartext or
using brute-forcible hashes. Here are the most popular real-world passwords:
n password
n website name
n 12345678
n qwerty
n abc123
n 111111
n monkey
n 12345
n letmein
NOTE Administrative passwords may in fact be weaker than the password
policy allows. They may have been set before the policy was in force, or they
may have been set up through a different application or interface.
In this situation, any serious attacker will use automated techniques to attempt
to guess passwords, based on lengthy lists of common values. Given today’s
bandwidth and processing capabilities, it is possible to make thousands of login
attempts per minute from a standard PC and DSL connection. Even the most
robust passwords will eventually be broken in this scenario.
Various techniques and tools for using automation in this way are described
in detail in Chapter 14. Figure 6-2 shows a successful password-guessing attack
against a single account using Burp Intruder. The successful login attempt can be
clearly distinguished by the difference in the HTTP response code, the response
length, and the absence of the “login incorrect” message.
In some applications, client-side controls are employed in an attempt to
prevent password-guessing attacks. For example, an application may set a
cookie such as failedlogins=1 and increment it following each unsuccess-
ful attempt. When a certain threshold is reached, the server detects this in
the submitted cookie and refuses to process the login attempt. This kind
of client-side defense may prevent a manual attack from being launched
using only a browser, but it can, of course, be bypassed easily, as described in
Chapter 5.
cc0066..iinndddd 116633 88//1199//22001111 1122::0066::3377 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 164
164 Chapter 6 n Attacking Authentication
Figure 6-2: A successful password-guessing attack
A variation on the preceding vulnerability occurs when the failed login counter
is held within the current session. Although there may be no indication of this on
the client side, all the attacker needs to do is obtain a fresh session (for example, by
withholding his session cookie), and he can continue his password-guessing attack.
Finally, in some cases, the application locks out a targeted account after
a suitable number of failed logins. However, it responds to additional login
attempts with messages that indicate (or allow an attacker to infer) whether
the supplied password was correct. This means that an attacker can complete
his password-guessing attack even though the targeted account is locked out.
If the application automatically unlocks accounts after a certain delay, the
attacker simply needs to wait for this to occur and then log in as usual with
the discovered password.
HACK STEPS
1. Manually submit several bad login attempts for an account you control,
monitoring the error messages you receive.
2. After about 10 failed logins, if the application has not returned a message
about account lockout, attempt to log in correctly. If this succeeds, there
is probably no account lockout policy.
cc0066..iinndddd 116644 88//1199//22001111 1122::0066::3377 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 165
Chapter 6 n Attacking Authentication 165
3. If the account is locked out, try repeating the exercise using a different
account. This time, if the application issues any cookies, use each cookie
for only a single login attempt, and obtain a new cookie for each subse-
quent login attempt.
4. Also, if the account is locked out, see whether submitting the valid pass-
word causes any difference in the application’s behavior compared to an
invalid password. If so, you can continue a password-guessing attack even
if the account is locked out.
5. If you do not control any accounts, attempt to enumerate a valid user-
name (see the next section) and make several bad logins using this.
Monitor for any error messages about account lockout.
6. To mount a brute-force attack, first identify a difference in the applica-
tion’s behavior in response to successful and failed logins. You can use
this fact to discriminate between success and failure during the course of
the automated attack.
7. Obtain a list of enumerated or common usernames and a list of common
passwords. Use any information obtained about password quality rules to
tailor the password list so as to avoid superfluous test cases.
8. Use a suitable tool or a custom script to quickly generate login requests
using all permutations of these usernames and passwords. Monitor
the server’s responses to identify successful login attempts. Chapter 14
describes in detail various techniques and tools for performing custom-
ized attacks using automation.
9. If you are targeting several usernames at once, it is usually preferable
to perform this kind of brute-force attack in a breadth-first rather than
depth-first manner. This involves iterating through a list of passwords
(starting with the most common) and attempting each password in turn
on every username. This approach has two benefits. First, you discover
accounts with common passwords more quickly. Second, you are less
likely to trigger any account lockout defenses, because there is a time
delay between successive attempts using each individual account.
TRY IT!
http://mdsec.net/auth/16/
http://mdsec.net/auth/32/
http://mdsec.net/auth/46/
http://mdsec.net/auth/49/
cc0066..iinndddd 116655 88//1199//22001111 1122::0066::3377 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 166
166 Chapter 6 n Attacking Authentication
Verbose Failure Messages
A typical login form requires the user to enter two pieces of information — a
username and password. Some applications require several more, such as date
of birth, a memorable place, or a PIN.
When a login attempt fails, you can of course infer that at least one piece of
information was incorrect. However, if the application tells you which piece of
information was invalid, you can exploit this behavior to considerably diminish
the effectiveness of the login mechanism.
In the simplest case, where a login requires a username and password, an
application might respond to a failed login attempt by indicating whether the
reason for the failure was an unrecognized username or the wrong password,
as illustrated in Figure 6-3.
Figure 6-3: Verbose login failure messages indicating when a valid
username has been guessed
In this instance, you can use an automated attack to iterate through a large
list of common usernames to enumerate which ones are valid. Of course, user-
names normally are not considered a secret (they are not masked during login,
for instance). However, providing an easy means for an attacker to identify valid
usernames increases the likelihood that he will compromise the application
given enough time, skill, and effort. A list of enumerated usernames can be
used as the basis for various subsequent attacks, including password guessing,
attacks on user data or sessions, or social engineering.
In addition to the primary login function, username enumeration can arise
in other components of the authentication mechanism. In principle, any func-
tion where an actual or potential username is submitted can be leveraged for
this purpose. One location where username enumeration is commonly found
is the user registration function. If the application allows new users to register
and specify their own usernames, username enumeration is virtually impos-
sible to prevent if the application is to prevent duplicate usernames from being
registered. Other locations where username enumeration are sometimes found
cc0066..iinndddd 116666 88//1199//22001111 1122::0066::3377 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 167
Chapter 6 n Attacking Authentication 167
are the password change and forgotten password functions, as described later
in this chapter.
NOTE Many authentication mechanisms disclose usernames either implic-
itly or explicitly. In a web mail account, the username is often the e-mail
address, which is common knowledge by design. Many other sites expose
usernames within the application without considering the advantage this
grants to an attacker, or generate usernames in a way that can be predicted
(for example, user1842, user1843, and so on).
In more complex login mechanisms, where an application requires the user to
submit several pieces of information, or proceed through several stages, verbose
failure messages or other discriminators can enable an attacker to target each
stage of the login process in turn, increasing the likelihood that he will gain
unauthorized access.
NOTE This vulnerability may arise in more subtle ways than illustrated here.
Even if the error messages returned in response to a valid and invalid username
are superfi cially similar, there may be small differences between them that can
be used to enumerate valid usernames. For example, if multiple code paths
within the application return the “same” failure message, there may be minor
typographical differences between each instance of the message. In some cases,
the application’s responses may be identical on-screen but contain subtle differ-
ences hidden within the HTML source, such as comments or layout differences. If
no obvious means of enumerating usernames presents itself, you should perform
a close comparison of the application’s responses to valid and invalid usernames.
You can use the Comparer tool within Burp Suite to automatically analyze
and highlight the differences between two application responses, as shown
in Figure 6-4. This helps you quickly identify whether the username’s validity
results in any systematic difference in the application’s responses.
Figure 6-4: Identifying subtle differences in application responses using Burp Comparer
cc0066..iinndddd 116677 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 168
168 Chapter 6 n Attacking Authentication
HACK STEPS
1. If you already know one valid username (for example, an account you
control), submit one login using this username and an incorrect password,
and another login using a random username.
2. Record every detail of the server’s responses to each login attempt,
including the status code, any redirects, information displayed on-
screen, and any differences hidden in the HTML page source. Use your
intercepting proxy to maintain a full history of all traffic to and from the
server.
3. Attempt to discover any obvious or subtle differences in the server’s
responses to the two login attempts.
4. If this fails, repeat the exercise everywhere within the application where
a username can be submitted (for example, self-registration, password
change, and forgotten password).
5. If a difference is detected in the server’s responses to valid and invalid
usernames, obtain a list of common usernames. Use a custom script or
automated tool to quickly submit each username, and filter the responses
that signify that the username is valid (see Chapter 14).
6. Before commencing your enumeration exercise, verify whether the appli-
cation performs any account lockout after a certain number of failed login
attempts (see the preceding section). If so, it is desirable to design your
enumeration attack with this fact in mind. For example, if the application
will grant you only three failed login attempts with any given account, you
run the risk of “wasting” one of these for every username you discover
through automated enumeration. Therefore, when performing your enu-
meration attack, do not submit a far-fetched password with each login
attempt. Instead, submit either a single common password such as pass-
word1 or the username itself as the password. If password quality rules
are weak, it is highly likely that some of the attempted logins you perform
as part of your enumeration exercise will succeed and will disclose both
the username and password in a single hit. To set the password field to
be the same as the username, you can use the “battering ram” attack
mode in Burp Intruder to insert the same payload at multiple positions in
your login request.
Even if an application’s responses to login attempts containing valid and
invalid usernames are identical in every intrinsic respect, it may still be possible
to enumerate usernames based on the time taken for the application to respond
to the login request. Applications often perform very different back-end pro-
cessing on a login request, depending on whether it contains a valid username.
For example, when a valid username is submitted, the application may retrieve
user details from a back-end database, perform various processing on these
cc0066..iinndddd 116688 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 169
Chapter 6 n Attacking Authentication 169
details (for example, checking whether the account is expired), and then validate
the password (which may involve a resource-intensive hash algorithm) before
returning a generic message if the password is incorrect. The timing difference
between the two responses may be too subtle to detect when working with only
a browser, but an automated tool may be able to discriminate between them.