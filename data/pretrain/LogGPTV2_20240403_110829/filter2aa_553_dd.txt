14.3 定义结构变量
结构有两层含义。一层含义是“结构布局”，刚才已经讨论过了。结构布
局告诉编译器如何表示数据，但是它并未让编译器为数据分配空间。下一步
是创建一个结构变量，即是结构的另一层含义。程序中创建结构变量的一行
是:
struct book library;
编译器执行这行代码便创建了一个结构变量library。编译器使用book模
板为该变量分配空间：一个内含MAXTITL个元素的char数组、一个内含
MAXAUTL个元素的char数组和一个float类型的变量。这些存储空间都与一
个名称library结合在一起（见图14.1）。
在结构变量的声明中，struct book所起的作用相当于一般声明中的int或
float。例如，可以定义两个struct 
book类型的变量，或者甚至是指向struct
book类型结构的指针：
struct book doyle, panshin, * ptbook;
图14.1 一个结构的内存分配
结构变量doyle和panshin中都包含title、author和value部分。指针ptbook
1013
可以指向doyle、panshin或任何其他book类型的结构变量。从本质上看，
book结构声明创建了一个名为struct book的新类型。
就计算机而言，下面的声明：
struct book library;
是以下声明的简化：
struct book {
char title[MAXTITL];
char author[AXAUTL];
float value;
} library;  /* 声明的右右花括号后跟变量名*/
换言之，声明结构的过程和定义结构变量的过程可以组合成一个步骤。
如下所示，组合后的结构声明和结构变量定义不需要使用结构标记：
struct { /* 无结构标记 */
char title[MAXTITL];
char author[MAXAUTL];
float value;
} library;
然而，如果打算多次使用结构模板，就要使用带标记的形式；或者，使
用本章后面介绍的typedef。
这是定义结构变量的一个方面，在这个例子中，并未初始化结构变量。
1014
14.3.1 初始化结构
初始化变量和数组如下：
int count = 0;
int fibo[7] = {0,1,1,2,3,5,8};
结构变量是否也可以这样初始化？是的，可以。初始化一个结构变量
（ANSI之前，不能用自动变量初始化结构；ANSI之后可以用任意存储类
别）与初始化数组的语法类似：
struct book library = {
"The Pious Pirate and the Devious Damsel",
"Renee Vivotte",
1.95
};
简而言之，我们使用在一对花括号中括起来的初始化列表进行初始化，
各初始化项用逗号分隔。因此， title成员可以被初始化为一个字符串，value
成员可以被初始化为一个数字。为了让初始化项与结构中各成员的关联更加
明显，我们让每个成员的初始化项独占一行。这样做只是为了提高代码的可
读性，对编译器而言，只需要用逗号分隔各成员的初始化项即可。
注意 初始化结构和类别储存期
第12章中提到过，如果初始化静态存储期的变量（如，静态外部链接、
静态内部链接或静态无链接），必须使用常量值。这同样适用于结构。如果
初始化一个静态存储期的结构，初始化列表中的值必须是常量表达式。如果
是自动存储期，初始化列表中的值可以不是常量。
1015
14.3.2 访问结构成员
结构类似于一个“超级数组”，这个超级数组中，可以是一个元素为char
类型，下一个元素为forat类型，下一个元素为int数组。可以通过数组下标单
独访问数组中的各元素，那么，如何访问结构中的成员？使用结构成员运算
符——点（.）访问结构中的成员。例如，library.value即访问library的value
部分。可以像使用任何float类型变量那样使用library.value。与此类似，可以
像使用字符数组那样使用 library.title。因此，程序清单 14.1 中的程序中有
s_gets(library.title, MAXTITL);和scanf("%f", &library.value);这样的代码。
本质上，.title、.author和.value的作用相当于book结构的下标。
注意，虽然library是一个结构，但是library.value是一个float类型的变
量，可以像使用其他 float 类型变量那样使用它。例如，scanf("%f",...)需要一
个 float 类型变量的地址，而&library.float正好符合要求。.比&的优先级高，
因此这个表达式和&(library.float)一样。
如果还有一个相同类型的结构变量，可以用相同的方法：
struct book bill, newt;
s_gets(bill.title, MAXTITL);
s_gets(newt.title, MAXTITL);
.title 引用 book 结构的第 1 个成员。注意，程序清单 14.1 中的程序以两
种不同的格式打印了library结构变量中的内容。这说明可以自行决定如何使
用结构成员。
14.3.3 结构的初始化器
C99和C11为结构提供了指定初始化器（designated initializer）[1]，其语
法与数组的指定初始化器类似。但是，结构的指定初始化器使用点运算符和
成员名（而不是方括号和下标）标识特定的元素。例如，只初始化book结构
1016
的value成员，可以这样做：
struct book surprise = { .value = 10.99};
可以按照任意顺序使用指定初始化器：
struct book gift = { .value = 25.99,
.author = "James Broadfool",
.title = "Rue for the Toad"};
与数组类似，在指定初始化器后面的普通初始化器，为指定成员后面的
成员提供初始值。另外，对特定成员的最后一次赋值才是它实际获得的值。
例如，考虑下面的代码：
struct book gift= {.value = 18.90,
.author = "Philionna Pestle",
0.25};
赋给value的值是0.25，因为它在结构声明中紧跟在author成员之后。新
值0.25取代了之前的18.9。在学习了结构的基本知识后，可以进一步了解结
构的一些相关类型。
1017
14.4 结构数组
接下来，我们要把程序清单14.1的程序扩展成可以处理多本书。显然，
每本书的基本信息都可以用一个 book 类型的结构变量来表示。为描述两本
书，需要使用两个变量，以此类推。可以使用这一类型的结构数组来处理多
本书。在下一个程序中（程序清单 14.2）就创建了一个这样的数组。如果你
使用 Borland C/C++，请参阅本节后面的“Borland C和浮点数”。
结构和内存
manybook.c程序创建了一个内含100个结构变量的数组。由于该数组是
自动存储类别的对象，其中的信息被储存在栈（stack）中。如此大的数组需
要很大一块内存，这可能会导致一些问题。如果在运行时出现错误，可能抱
怨栈大小或栈溢出，你的编译器可能使用了一个默认大小的栈，这个栈对于
该例而言太小。要修正这个问题，可以使用编译器选项设置栈大小为
10000，以容纳这个结构数组；或者可以创建静态或外部数组（这样，编译
器就不会把数组放在栈中）；或者可以减小数组大小为16。为何不一开始就
使用较小的数组？这是为了让读者意识到栈大小的潜在问题，以便今后再遇
到类似的问题，可以自己处理好。
程序清单14.2 manybook.c程序
/* manybook.c -- 包含多本书的图书目录 */
#include 
#include 
char * s_gets(char * st, int n);
#define MAXTITL  40
#define MAXAUTL  40
1018
#define MAXBKS 100    /* 书籍的最大数量 */
struct book {      /* 简历 book 模板  */
char title[MAXTITL];
char author[MAXAUTL];
float value;
};
int main(void)
{
struct book library[MAXBKS];  /* book 类型结构的数组 */
int count = 0;
int index;
printf("Please enter the book title.\n");
printf("Press [enter] at the start of a line to stop.\n");
while (count  0)
{
printf("Here is the list of your books:\n");
for (index = 0; index 
double dummy = sin(0.0);
这段代码强制编译器载入浮点版本的scanf()。
首先，我们学习如何声明结构数组和如何访问数组中的结构成员。然
后，着重分析该程序的两个方面。
14.4.1 声明结构数组
声明结构数组和声明其他类型的数组类似。下面是一个声明结构数组的
例子：
struct book library[MAXBKS];
以上代码把library声明为一个内含MAXBKS个元素的数组。数组的每个
元素都是一个book类型的数组。因此，library[0]是第1个book类型的结构变
量，library[1]是第2个book类型的结构变量，以此类推。参看图14.2 可以帮
1023
助读者理解。数组名library本身不是结构名，它是一个数组名，该数组中的
每个元素都是struct book类型的结构变量。
图14.2 一个结构数组library[MAXBKS]
14.4.2 标识结构数组的成员
为了标识结构数组中的成员，可以采用访问单独结构的规则：在结构名
后面加一个点运算符，再在点运算符后面写上成员名。如下所示：
library[0].value /* 第1个数组元素与value 相关联 */
library[4].title /* 第5个数组元素与title 相关联 */
注意，数组下标紧跟在library后面，不是成员名后面：
library.value[2] // 错误
library[2].value // 正确
1024
使用library[2].value的原因是：library[2]是结构变量名，正如library[1]
是另一个变量名。
顺带一提，下面的表达式代表什么？
library[2].title[4]
这是library数组第3个结构变量（library[2]部分）中书名的第5个字符
（title[4]部分）。以程序清单14.2的输出为例，这个字符是e。该例指出，点
运算符右侧的下标作用于各个成员，点运算符左侧的下标作用与结构数组。
最后，总结一下：
library        // 一个book 结构的数组
library[2]       // 一个数组元素，该元素是book结构