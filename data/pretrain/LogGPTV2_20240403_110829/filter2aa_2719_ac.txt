  访客： 
  book 商品的数量： 
如果登录成功，使用 
$_SESSION["username"] 保存账号 
$_SESSION["password"] 保存密码 
#_SESSION["book"] 保存购买商品数目 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
登录以后显示 
开始攻击 
//attack.php 
"; 
echo "目标用户的 username 是：" . $_SESSION["username"] . ""; 
echo "目标用户的 password 是：" . $_SESSION["password"] . ""; 
// 将 book 的数量设置为 2000 
$_SESSION["book"] = 2000; 
?> 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
提交 http://localhost/attack.php?PHPSESSID=5a6kqe7cufhstuhcmhgr9nsg45 此 ID 为获取到
的客户 session id,刷新客户页面以后 
客户购买的商品变成了 2000 
session 固定攻击 
黑客可以使用把 session id 发给用户的方式，来完成攻击 
http://localhost/index.php?user=dodo&PHPSESSID=1234 把此链接发送给 dodo 这个用户显示 
然后攻击者再访问 http://localhost/attack.php?PHPSESSID=1234 后，客户页面刷新，发现 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
商品数量已经成了 2000 
防范方法 
1）定期更改 session id 
函数 bool session_regenerate_id([bool delete_old_session]) 
        delete_old_session 为 true，则删除旧的 session 文件；为 false，则保留旧的 session，默认
false，可选 
在 index.php 开头加上 
5）使用 URL 传递隐藏参数 
HTTP 响应拆分攻击 
HTTP 响应拆分是由于攻击者经过精心设计利用电子邮件或者链接，让目标用户利用一个请求产生两个响
应，前一个响应是服务器的响应，而后一个则是攻击者设计的响应。此攻击之所以会发生，是因为 WEB
程序将使用者的数据置于 HTTP 响应表头中，这些使用者的数据是有攻击者精心设计的。 
可能遭受 HTTP 请求响应拆分的函数包括以下几个： 
header();        setcookie();        session_id();        setrawcookie(); 
HTTP 响应拆分通常发生在： 
Location 表头：将使用者的数据写入重定向的 URL 地址内 
Set-Cookie 表头：将使用者的数据写入 cookies 内 
实例： 
请求 
GET /location.php?page=http://www.00aq.com HTTP/1.1↙ 
Host: localhost↙ 
↙ 
返回 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
HTTP/1.1 302 Found 
Date: Wed, 13 Jan 2010 03:44:24 GMT 
Server: Apache/2.2.8 (Win32) PHP/5.2.6 
X-Powered-By: PHP/5.2.6 
Location: http://www.00aq.com 
Content-Length: 0 
Keep-Alive: timeout=5, max=100 
Connection: Keep-Alive 
Content-Type: text/html 
访问下面的链接，会直接出现一个登陆窗口 
http://localhost/location.php?page=%0d%0aContent-Type:%20text/html%0d%0aHTTP/1.
1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%20158%
0d%0a%0d%0a帐
号%20密
码%20 
转换成可读字符串为： 
Content-Type: text/html 
HTTP/1.1 200 OK 
Content-Type: text/html 
Content-Length: 158 
帐号 密码  
一个 HTTP 请求产生了两个响应 
防范的方法： 
1）替换 CRLF 换行字符 
"", "\n"=>""))); 
?> 
2）使用最新版本的 PHP 
PHP 最新版中，已经不允许在 HTTP 表头内出现换行字符 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
隐藏 HTTP 响应表头 
apache 中 httpd.conf，选项 ServerTokens = Prod, ServerSignature = Off 
php 中 php.ini，选项 expose_php = Off 
PHP 漏洞全解(九)-文件上传漏洞 
一套 web 应用程序，一般都会提供文件上传的功能，方便来访者上传一些文件。 
下面是一个简单的文件上传表单 
php 的配置文件 php.ini，其中选项 upload_max_filesize 指定允许上传的文件大小，默认是 2M 
$_FILES 数组变量 
PHP 使用变量$_FILES 来上传文件，$_FILES 是一个数组。如果上传 test.txt，那么$_FILES 数组的内
容为： 
$FILES 
Array 
{ 
        [file] => Array 
        { 
                [name] => test.txt                //文件名称 
                [type] => text/plain                //MIME 类型 
                [tmp_name] => /tmp/php5D.tmp        //临时文件 
                [error] => 0                //错误信息 
                [size] => 536                //文件大小，单位字节 
        } 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
} 
如果上传文件按钮的 name 属性值为 file 
那么使用$_FILES['file']['name']来获得客户端上传文件名称，不包含路径。使用
$_FILES['file']['tmp_name']来获得服务端保存上传文件的临时文件路径 
存放上传文件的文件夹 
PHP 不会直接将上传文件放到网站根目录中，而是保存为一个临时文件，名称就是
$_FILES['file']['tmp_name']的值，开发者必须把这个临时文件复制到存放的网站文件夹中。 
$_FILES['file']['tmp_name']的值是由 PHP 设置的，与文件原始名称不一样，开发者必须使用
$_FILES['file']['name']来取得上传文件的原始名称。 
上传文件时的错误信息 
$_FILES['file']['error']变量用来保存上传文件时的错误信息，它的值如下： 
错误信息 
数值 
说    明 
UPLOAD_ERR_OK 
0 
没有错误 
UPLOAD_ERR_INI_SIZE 
1 
上传文件的大小超过 php.ini 的设置 
UPLOAD_ERR_FROM_SIZE 
2 
上传文件的大小超过 HTML 表单中 MAX_FILE_SIZE 的值 
UPLOAD_ERR_PARTIAL 
3 
只上传部分的文件 
UPLOAD_ERR_NO_FILE 
4 
没有文件上传 
文件上传漏洞 
如果提供给网站访问者上传图片的功能，那必须小心访问者上传的实际可能不是图片，而是可以指定的 PHP
程序。如果存放图片的目录是一个开放的文件夹，则入侵者就可以远程执行上传的 PHP 文件来进行攻击。 
下面是一个简单的文件上传例子： 
…… 
这个例子没有检验文件后缀，可以上传任意文件，很明显的上传漏洞