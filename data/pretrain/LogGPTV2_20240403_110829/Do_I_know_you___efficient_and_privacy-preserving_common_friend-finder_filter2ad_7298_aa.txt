# Title: Do I Know You? – Efficient and Privacy-Preserving Common Friend-Finder Protocols and Applications

## Authors:
- Marcin Nagy, Aalto University, Finland (marcin.nagy@aalto.fi)
- Alexandra Dmitrienko, Fraunhofer SIT/CASED, Germany (PI:EMAIL)
- Emiliano De Cristofaro, PARC (a Xerox Company), U.S.A. (PI:EMAIL)
- N. Asokan, University of Helsinki & Aalto University, Finland (PI:EMAIL)
- Ahmad-Reza Sadeghi, TU Darmstadt/CASED, Germany (PI:EMAIL)

## Abstract
The increasing popularity of Online Social Networks (OSNs) has created a need for secure and privacy-preserving methods to access and utilize social networking information. In many applications, users must make trust and access control decisions involving other users, often relying on the existence of common social relationships. This paper introduces the Common Friends service, a framework that enables two users to determine whether they share mutual friends while protecting the privacy of non-mutual friends and ensuring the authenticity of friendships. We present a generic construction that reduces the problem to secure computation of set intersection, using bearer capabilities to ensure the authenticity of announced friends. We then propose an efficient instantiation based on Bloom filters, which incurs a constant number of public-key operations and minimal communication overhead. Our software is designed to be easily integrated into various applications, such as enforcing access control based on social proximity. We demonstrate the practicality of our techniques by integrating the Common Friends service into an existing application for sharing Internet access, where users decide to share based on the presence of common friends.

## 1. Introduction
Online Social Networks (OSNs) play a crucial role in today's computing ecosystem, with social interactions increasingly used to enhance trust and usability in a wide range of applications. OSNs like Facebook serve as de-facto providers of online identities and are often used to verify user information. Many applications leverage OAuth and OpenID for authentication, while others connect to social network profiles to harvest data for various purposes, such as verifying self-reported information or detecting Sybil nodes.

In many scenarios, users need to make access control decisions involving other users, such as sharing rides, constructing distributed computing platforms, or making routing decisions for anonymous communications. The existence of common social relationships is a significant factor in these decisions. However, discovering common friends can compromise the privacy of both parties and their friends, as it may reveal sensitive information about the users' lifestyles and social attitudes.

To address these issues, this paper presents the design and implementation of the Common Friends service, a framework that allows two devices to determine whether their owners are friends or have mutual friends in a given social network, without revealing any information about non-common friends. We first introduce a generic construction that reduces the problem to secure computation of set intersection, ensuring the authenticity of claimed friends using bearer capabilities. We then propose an efficient instantiation based on Bloom filters, which only incurs a constant number of public-key operations and minimal communication overhead. Our framework provides a clear and usable interface for developers, enabling them to integrate Common Friends into their applications to support access control decisions based on social proximity. Finally, we integrate the Common Friends service into an existing application for sharing Internet access, where users decide to share based on the presence of common friends. A comprehensive experimental evaluation attests to the practicality of our techniques.

### 1.1 Securely Finding Common Friends
Our approach leverages Private Set Intersection (PSI), a cryptographic primitive that allows two parties to compute the intersection of their private sets without revealing any additional information. If we consider the lists of users' friends as unordered sets, PSI can be used to let users learn only the friends they share. Alternatively, if only the number of shared friends is needed, Private Set Intersection Cardinality (PSI-CA) can be used. However, PSI/PSI-CA does not prevent users from claiming non-existent friendships. To address this, we use bearer capabilities, which are time-limited, randomly generated tokens that represent proof of an existing friendship. Users distribute these capabilities to their friends via a secure channel, and possession of the capability serves as proof of an existing friendship. This approach ensures that input sets to the PSI protocol are high-entropy objects, making it impractical to enumerate. Consequently, we can instantiate PSI using a novel construction based on Bloom filters, which significantly reduces communication overhead and the number of modular exponentiations.

### 1.2 Contributions
This paper makes several contributions:
- The insight that when input sets include high-entropy items, more efficient PSI schemes can be designed than traditional PSI, and the concrete design of such a PSI scheme based on Bloom filters.
- A detailed description of the design and implementation of a framework that encapsulates the secure use of PSI protocols and bearer capabilities in the Common Friends scenario. Our implementations provide a clear interface for developers to easily integrate Common Friends into their applications and use social proximity to guide trust and access control decisions. As a proof-of-concept, we successfully integrate it with a tethering application for sharing connectivity.
- A performance evaluation that attests to the practicality of our solutions.

## 2. The Common Friends Service
In this section, we describe the Common Friends service. We first introduce the desired security properties and then present our generic system design, followed by an efficient instantiation based on Bloom filters. Finally, we discuss the security of our proposals.

### 2.1 Security Goals and Attacker Model
We define the secure common friend discovery functionality and the corresponding security goals. Our attacker model assumes honest-but-curious (semi-honest) adversaries, who follow protocol specifications but attempt to infer more information during or after protocol execution. We assume that legitimate participants will not disclose or share secret information.

#### Common Friends
The Common Friends service relies on a two-party protocol involving an "initiator" (I) and a "responder" (R), each inputting the list of their friends (f(IDI) and f(IDR), respectively). We rely on three protocol variants securely realizing three functionality variants, as shown in Table 1, and satisfying privacy and authenticity definitions discussed below.

| Protocol Variant | R’s Output | I’s Output |
|------------------|------------|------------|
| Basic            | f(IDI) ∩ f(IDR) | ⊥ |
| Cardinality-only | |f(IDI) ∩ f(IDR)| | ⊥ |
| Mutual Output    | f(IDI) ∩ f(IDR) | f(IDI) ∩ f(IDR) |

#### Initiator’s Privacy
Initiator's privacy is guaranteed if, for each possible pair of inputs (f(IDI), f(IDR)), the responder's view can be efficiently simulated on input: f(IDR) and either f(IDR) ∩ f(IDI) in the basic variant, or |f(IDR) ∩ f(IDI)| in the cardinality-only variant.

#### Responder’s Privacy
- **Basic and Cardinality-Only Variants:** Responder's privacy is guaranteed if no information is disclosed about its input, not even the number or identity of the common friends.
- **Mutual Output Variant:** Responder's privacy is defined similarly to initiator's privacy, i.e., the initiator's view should be efficiently simulated with only its inputs and outputs.

#### Authenticity
A user should not be able to falsely claim to have a common friend with the other party if there is no such common friend. This ensures that if one party controls access to a resource based on the existence of common friends, the other party cannot gain access by claiming non-existent friendships or inflating the number of common friends.

### 2.2 System Description
Table 2 summarizes the notation used throughout this paper. The system involves entities such as the server (S), initiator (I), and responder (R). Each entity has associated keys and data, including Diffie-Hellman (DH) public and private keys, session keys, and identifiers in the social network. Users upload capabilities (cU) to the server, and these capabilities are used in the PSI protocol to ensure the authenticity of friendships.

| Description | Notation |
|-------------|----------|
| Entities    | Server S, Initiator I, Responder R, Generic User U |
| Keys        | DH public key (PKU, PKI, PKR), DH private key (SKU, SKI, SKR), DH session key (KIR) |
| Data        | U’s identifier (IDU), Set of U’s friends (f(IDU)), Capability (cU), Friends and their capabilities (RU), Input sets to PSI (RI, RR) |

By combining PSI with bearer capabilities, the Common Friends service ensures both privacy and authenticity, providing a robust and efficient solution for secure common friend discovery.