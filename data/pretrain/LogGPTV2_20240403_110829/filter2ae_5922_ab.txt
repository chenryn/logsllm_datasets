        PDEV *ppdev_;
        ...
        HDC hdcNext_;    // HDC链表指针
        HDC hdcPrev_;
        ...
        DCLEVEL dclevel
        ...
    };
    typedef DC *PDC;
    class XDCOBJ /* dco */
    {
    public:
        PDC pdc;
        ...
    };
    typedef XDCOBJ   *PXDCOBJ;
    class DCOBJ : public XDCOBJ /* mdo */
    {
    public:
        DCOBJ()                { pdc = (PDC) NULL; }
        DCOBJ(HDC hdc)         { vLock(hdc); }
       ~DCOBJ()                { vUnlockNoNullSet(); }
    };
    typedef DCOBJ *PDCOBJ;
类之间的关系可以简化为下图：  
### 调试
#### free部分
在free部分需要把我们想要释放的内存空间释放，并让后面的use部分成功申请到这块内存空间。
调试环境：虚拟机windows 10 1607、物理机windows 10 2004
POC:
断点:
    bp win32kfull!NtGdiResetDC
    bp win32kfull!NtGdiResetDC+0xc1       "调用GreResetDCInternal函数"
    bp win32kfull!GreResetDCInternal+0x3a "调用DCOBJ构造函数"
    bp win32kfull!GreResetDCInternal+0x116 "调用_imp_hdcOpenDCW函数"
    bp win32kfull!GreResetDCInternal+0x136 "第二次DCOBJ"
    bp win32kfull!GreResetDCInternal+0x1b5 "调用DC对象函数指针"
    bp win32kfull!GreResetDCInternal+0x1d1 "调用HmgSwapLockedHandle函数"
    bp win32kfull!GreResetDCInternal+0x20d "调用_imp_bDeleteDCInternal函数"
    bp cve_2021_40449!hook_DrvEnablePDEV+0x12a "循环调用"
    bp win32kbase!PALMEMOBJ::bCreatePalette "调用win32kbase!PALMEMOBJ::bCreatePalette"
运行POC，断点`bp win32kfull!NtGdiResetDC`触发此时传入的句柄为`rcx=00000000092105f1`  
第一次调用`win32kfull!GreResetDCInternal` 时传入各个参数为`rcx=00000000092105f1`
`rdx=0000000000000000` `r8=ffffb101aadf2a44` 即第一个句柄值为`00000000092105f1`  
第一次调用构造函数，利用DC对象创建DCO对象，此时rbx存放DCO对象的地址，  
根据 **漏洞形成分析** 的计算公式，可以很方便的得到DC对象内的函数指针指向的函数的地址为：`ffffd548a1f10c30`
    1: kd> dq rax
    ffffb101`aadf29c0  ffffd50e`041fd010 00000000`00000001
    ffffb101`aadf29d0  00000268`6e766b20 000000d7`97aff680
    ffffb101`aadf29e0  00000000`00000000 00000000`092105f1
    ffffb101`aadf29f0  00000000`00000000 ffffd50e`041fb030
    ffffb101`aadf2a00  ffffb101`aadf2b80 ffffd548`a1f18fe6
    ffffb101`aadf2a10  00000000`00000001 00000000`00000000
    ffffb101`aadf2a20  ffffb101`aadf2a44 ffffd50e`041fb030
    ffffb101`aadf2a30  000000d7`97aff5d0 00000000`00000000
    // rbx存放了构造函数产生的DCO对象地址
    1: kd> dq rbx
    ffffd50e`041fd010  00000000`092105f1 80000001`00000000
    ffffd50e`041fd020  ffffd800`b45ad780 00000268`6e75ea10
    ffffd50e`041fd030  00100010`00000000 00000000`00000000
    ffffd50e`041fd040  ffffd50e`00052030 00000000`00000000
    ffffd50e`041fd050  ffffd800`b56f1260 00000009`1000a01f
    ffffd50e`041fd060  ffffd50e`041fd3d0 00000000`0088000b
    ffffd50e`041fd070  ffffd50e`000004f0 ffffd50e`00005d90
    ffffd50e`041fd080  00000001`00000000 00000000`00000000
    // ffffd50e`041fd010为rbx的值，此处ffffd50e`041fd010+0x30为PDC的地址，PDC指向DC对象即DC对象地址为ffffd50e`00052030
    // 计算公式 *(dco地址+0x30)=dc地址
    1: kd> dq ffffd50e`041fd010+0x30
    ffffd50e`041fd040  ffffd50e`00052030 00000000`00000000
    ffffd50e`041fd050  ffffd800`b56f1260 00000009`1000a01f
    ffffd50e`041fd060  ffffd50e`041fd3d0 00000000`0088000b
    ffffd50e`041fd070  ffffd50e`000004f0 ffffd50e`00005d90
    ffffd50e`041fd080  00000001`00000000 00000000`00000000
    ffffd50e`041fd090  00000000`00000000 00000000`00000000
    ffffd50e`041fd0a0  ffffd50e`00001a10 ffffd50e`00004cb0
    ffffd50e`041fd0b0  ffffd50e`000105f0 00000000`00000000
    // ffffd50e`00052030+0xad0处为DC对象的函数指针，该指针指向了一个函数 
    // 计算公式 *(dc地址 +0xad0)=函数地址
    1: kd> dq ffffd50e`00052030+0xad0
    ffffd50e`00052b00  ffffd548`a1f10c30 ffffd548`a1db18c0
    ffffd50e`00052b10  00000000`00000000 00000000`00000000
    ffffd50e`00052b20  00000000`00000000 ffffd548`a1f10930
    ffffd50e`00052b30  00000000`00000000 ffffd548`a1f11dc0
    ffffd50e`00052b40  ffffd548`a1f0e6b0 ffffd548`a1f11b00
    ffffd50e`00052b50  00000000`00000000 ffffd548`a1f0cd70
    ffffd50e`00052b60  ffffd548`a1f0d1f0 ffffd548`a1f112f0
    ffffd50e`00052b70  00000000`00000000 00000000`00000000
    // 以下为函数的汇编
    1: kd> u ffffd548`a1f10c30
    win32kfull!UMPDDrvResetPDEV:
    ffffd548`a1f10c30 48895c2418      mov     qword ptr [rsp+18h],rbx
    ffffd548`a1f10c35 4889742420      mov     qword ptr [rsp+20h],rsi
    ffffd548`a1f10c3a 57              push    rdi
    ffffd548`a1f10c3b 4883ec70        sub     rsp,70h
    ffffd548`a1f10c3f 488b05ba440800  mov     rax,qword ptr [win32kfull!_security_cookie (ffffd548`a1f95100)]
    ffffd548`a1f10c46 4833c4          xor     rax,rsp
    ffffd548`a1f10c49 4889442468      mov     qword ptr [rsp+68h],rax
    ffffd548`a1f10c4e 488bf9          mov     rdi,rcx
之后通过hdcOpenDCW函数调用用户模式的回调函数，在回调函数中再次调用ResetDC函数，此时传入的HDC和第一次调用ResetDC的是同一个句柄。
第二次调用`win32kfull!GreResetDCInternal` 时，传入同一个HDC句柄，即对应同一个DC对象。
    0: kd> t
    win32kfull!GreResetDCInternal:
    ffffd548`a1f03e58 488bc4          mov     rax,rsp
    1: kd> rrcx
    rcx=00000000092105f1
第二次调用DCOBJ构造函数时，由于传入的是同一个HDC句柄，所以HDC句柄引用次数+1，同时两次调用构造函数构造的对象关联到同一个DC对象。  
之后第二次调用win32kfull!_imp_hdcOpenDCW函数，在该函数内执行政策回调函数，win32kfull!imp_hdcOpenDCW返回一个HDC句柄值为`0000000003210041`，即创建了一个新的DC对象。之后通过新创建的DC对象创建DCO对象。  
在win32kfull!GreResetDCInternal后半段会调用win32kfull!_imp_HmgSwapLockedHandleContents交换第一个HDC句柄和第二次调用win32kfull!imp_hdcOpenDCW创建的HDC句柄。
调用win32kfull!_imp_HmgSwapLockedHandleContents之后两个句柄对应的DC内容为已经发生了交换
    // 以下内容为旧DC对象，但是句柄为新句柄
    1: kd> dq ffffd50e041fd010
    ffffd50e`041fd010  00000000`03210041 80000001`00000000
    ......
    1: kd> dq ffffd50e03fee010
    // 以下内容为新DC对象，但句柄为旧句柄
    ffffd50e`03fee010  00000000`092105f1 80000002`00000000
    ......
之后调用win32kfull!_imp_bDeleteDCInternal传入HDC句柄，该函数会释放HDC句柄对应的DC对象，而此时传入该函数的HDC句柄为第二次调用hdcOpenDCW函数返回的句柄，但之前交换过新旧句柄，所以实际上释放的是旧HDC句柄对应的DC对象。
之前计算函数指针的时候，我们知道DCO
+0x30是指向DC对象的指针，所以在调用win32kfull!_imp_bDeleteDCInternal函数之后，原DC对象的内存空间已经被释放，达成了use-after-free的第一步free。
> function pointer= _(_ (DCO +0x30)+0xad0)，其中DCO +0x30即指向DC对象的指针
    0: kd> dq ffffd50e041fd010+0x30 // 取DC对象地址
    ffffd50e`041fd040  ffffd50e`00052030 00000000`00000000
    ......
    0: kd> !pool ffffd50e`00052030 // DC对象的内存已被释放，大小为e30
    Pool page ffffd50e00052030 region is Paged session pool
    *ffffd50e00052000 size:  e30 previous size:    0  (Free ) *GDev
            Pooltag GDev : Gdi pdev
     ffffd50e00052e30 size:   10 previous size:  e30  (Free)       Free
     ffffd50e00052e40 size:  1c0 previous size:   10  (Allocated)  Usqu
之后只需要申请这块内存空间并构造，刚删除的时候，虽然DC对象已经被释放，但函数指针还是指向正确的函数地址，接下来就要申请空间，覆盖这块内存空间的函数指针的值即可。
    0: kd> dq ffffd50e041fd010+0x30     // 取DC对象地址
    ffffd50e`041fd040  ffffd50e`00052030 00000000`00000000
    0: kd> dq ffffd50e`00052030+0xad0   // 取DC对象内的函数指针
    ffffd50e`00052b00  ffffd548`a1f10c30 ffffd548`a1db18c0
    0: kd> u ffffd548`a1f10c30
    win32kfull!UMPDDrvResetPDEV:
    ffffd548`a1f10c30 48895c2418      mov     qword ptr [rsp+18h],rbx
    ffffd548`a1f10c35 4889742420      mov     qword ptr [rsp+20h],rsi
    ffffd548`a1f10c3a 57              push    rdi
    ffffd548`a1f10c3b 4883ec70        sub     rsp,70h
    ffffd548`a1f10c3f 488b05ba440800  mov     rax,qword ptr [win32kfull!_security_cookie (ffffd548`a1f95100)]
    ffffd548`a1f10c46 4833c4          xor     rax,rsp
    ffffd548`a1f10c49 4889442468      mov     qword ptr [rsp+68h],rax
    ffffd548`a1f10c4e 488bf9          mov     rdi,rcx
#### use 部分
注：此部分为第二次调试，所以句柄、内存地址和前部分不一样。
在poc里面会调用CreatePalette函数，该此函数会申请内核堆，
第一个句柄`rcx=0000000015213372`
    // 第一个DCO对象
    0: kd> dq rbx
    DBGHELP: SharedUserData - virtual symbol module
    ffff885e`847d2620  00000000`15213372 80000001`00000000
    ......
    // 第一个PDC 指向DC对象
    0: kd> dq ffff885e`847d2620+0x30
    ffff885e`847d2650  ffff885e`80063030 00000000`00000000
    ......
    // 第一个DC对象
    0: kd> dq ffff885e`80063030
    ffff885e`80063030  00000000`00000000 00000000`00000000
    ffff885e`80063040  00000000`00000000 ffff885e`80046010
    ffff885e`80063050  00000001`00000001 ffff885e`80063030
    ffff885e`80063060  00000000`00000000 00000000`00008180
    ffff885e`80063070  ffffb48d`a36b4e50 00000000`00000000
    ffff885e`80063080  00000000`00000000 00000000`00000000
    ffff885e`80063090  00000000`00000000 00000000`00000000
    ffff885e`800630a0  00000000`00000000 00000000`00000000
第二个句柄`rax=0000000001211b60`