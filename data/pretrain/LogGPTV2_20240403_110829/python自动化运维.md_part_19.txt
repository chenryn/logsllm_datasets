template： src=nginx2.conf dest=/etc/nginx/nginx.conf
notify：
- restart nginx
- name： ensure nginx is running
service： name=nginx state=started
【templates/nginx2.conf】
user nginx；
worker_processes {{ worker_processes }}；
{% if num_cpus == 2 %}
worker_cpu_affinity 01 10；
{% elif num_cpus == 4 %}
worker_cpu_affinity 1000 0100 0010 0001；
{% elif num_cpus >= 8 %}
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000；
{% else %}
worker_cpu_affinity 1000 0100 0010 0001；
{% endif %}
worker_rlimit_nofile {{ max_open_file }}；
……
具体web角色定义细节将不展开描述，可参考9.6节及common角色的说明。
（7）运行角色
#cd /home/test/ansible/playbooks/nginx
#ansible-playbook -i hosts site.yml -f 10
运行结果如图9-6与图9-7所示。
图9-6 ntp部署片段
图9-7 nginx部署片段
9.8 获取远程主机系统信息：Facts
Facts是一个非常有用的组件，类似于Saltstack的Grains功能，实现获取远程
主机的系统信息，包括主机名、IP地址、操作系统、分区信息、硬件信息等，可
以配合playbook实现更加个性化、灵活的功能需求，比如在httpd.conf模板中引
用Facts的主机名信息作为ServerName参数的值。通过运行ansible hostname-m
setup可获取Facts信息，例如，获取192.168.1.21的Facts信息需运行：ansible
192.168.1.21-m setup，结果如下：
192.168.1.21 | success >> {
"ansible_facts"： {
"ansible_all_ipv4_addresses"： [
"192.168.1.21"
]，
"ansible_all_ipv6_addresses"： [
"fe80：：250：56ff：fe28：632d"
]，
"ansible_architecture"： "x86_64"，
"ansible_bios_date"： "07/02/2012"，
"ansible_bios_version"： "6.00"，
"ansible_cmdline"： {
"KEYBOARDTYPE"： "pc"，
"KEYTABLE"： "us"，
"LANG"： "en_US.UTF-8"，
"SYSFONT"： "latarcyrheb-sun16"，
"quiet"： true，
"rd_NO_DM"： true，
"rd_NO_LUKS"： true，
"rd_NO_LVM"： true，
"rd_NO_MD"： true，
"rhgb"： true，
"ro"： true，
"root"： "UUID=b8d29324-57b2-4949-8402-7fd9ad64ac5a"
}，
……
在模板文件中这样引用Facts信息：
{{ ansible_devices.sda.model }}
{{ ansible_hostname }}
9.9 变量
在实际应用场景中，我们希望一些任务、配置根据设备性能的不同而产生差
异，比如使用本机CPU核数动态配置Nginx的worker_processes参数，可能有一组
主机的应用配置文件几乎相同，但略有不同的配置项可以引用变量。在Ansible
中使用变量的目的是方便处理系统之间的差异。
变量名的命名规则由字母、数字和下划线组合而成，变量必须以字母开头，
如“foo_port”是一个合法的变量，“foo5”也是可以的，“foo-port”、“foo port”、
“foo.port”和“12”都是非法的变量命名。在Inventory中定义变量见9.3.2节和9.3.3
节，在playbook定义变量见9.6节，建议回顾一下，加深记忆。
9.9.1 Jinja2过滤器
Jinja2是Python下一个广泛应用的模板引擎，它的设计思想类似于Django的模
板引擎，并扩展了其语法和一系列强大的功能，官网地址：
http://jinja.pocoo.org/。下面介绍一下Ansible使用Jinja2强大的过滤器（Filters）功
能。
使用格式：{{变量名|过滤方法}}。
下面是实现获取一个文件路径变量过滤出文件名的一个示例：
{{ path | basename }}
获取文件所处的目录名：
{{ path | dirname }}
下面为一个完整的示例，实现从“/etc/profile”中过滤出文件名“profile”，并输
出重定向到/tmp/testshell文件中。
---
- hosts： 192.168.1.21
vars：
filename： /etc/profile
tasks：
- name： "shell1"
shell： echo {{ filename | basename }} >> /tmp/testshell
更多的过滤方法见http://jinja.pocoo.org/docs/templates/#builtin-filters。
9.9.2 本地Facts
我们可以通过Facts来获取目标主机的系统信息，当这些信息还不能满足我们
的功能需求时，可以通过编写自定义的Facts模块来实现。当然，还有一个更简
单的实现方法，就是通过本地Facts来实现。只需在目标设备/etc/ansible/facts.d目
录定义JSON、INI或可执行文件的JSON输出，文件扩展名要求使用“.fact”，这些
文件都可以作为Ansible的本地Facts，例如，在目标设备192.168.1.21定义三个变
量，供以后playbook进行引用。
【/etc/ansible/facts.d/preferences.fact】
[general]
max_memory_size=32
max_user_processes=3730
open_files=65535
在主控端运行ansible 192.168.1.21-m setup-a"filter=ansible_local"可看到定义的
结果，返回结果如下：
192.168.1.21 | success >> {
"ansible_facts"： {
"ansible_local"： {
"preferences"： {
"general"： {
"max_memory_size"： "32"，
"max_user_processes"： "3730"，
"open_files"： "65535"
}
}
}
}，
"changed"： false
}
注意返回JSON的层次结构，preferences（facts文件名前缀）→general（INI
的节名）→key：value（INI的键与值），最后就可以在我们的模板或playbook中
通过以下方式进行调用：
{{ ansible_local.preferences.general. open_files }}
9.9.3 注册变量
变量的另一个用途是将一条命令的运行结果保存到变量中，供后面的
playbook使用。下面是一个简单的示例：
- hosts： web_servers
tasks：
- shell： /usr/bin/foo
register： foo_result
ignore_errors： True
- shell： /usr/bin/bar
when： foo_result.rc == 5
上述示例注册了一个foo_result变量，变量值为shell：/usr/bin/foo的运行结
果，ignore_errors：True为忽略错误。变量注册完成后，就可以在后面playbook
中使用了，当条件语句when：foo_result.rc==5成立时，shell：/usr/bin/bar命令才
会运行，其中foo_result.rc为返回/usr/bin/foo的resultcode（返回码）。图9-8返
回“rc=0”的返回码。
图9-8 命令执行结果
9.10 条件语句
有时候一个playbook的结果取决于一个变量，或者取决于上一个任务
（task）的执行结果值，在某些情况下，一个变量的值可以依赖于其他变量的
值，当然也会影响Ansible的执行过程。
下面主要介绍When声明。
有时候我们想跳过某些主机的执行步骤，比如符合特定版本的操作系统将不
安装某个软件包，或者磁盘空间爆满了将进行清理的步骤。在Ansible中很容易
做到这一点，通过When子句实现，其中将引用Jinja2表达式。下面是一个简单的
示例：
tasks：
- name： "shutdown Debian flavored systems"
command： /sbin/shutdown -t now
when： ansible_os_family == "Debian"
通过定义任务的Facts本地变量ansible_os_family（操作系统版本名称）是否
为Debian，结果将返回BOOL类型值，为True时将执行上一条语句
command：/sbin/shutdown-t now，为False时该条语句都不会触发。我们再看一
个示例，通过判断一条命令执行结果做不同分支的二级处理。
tasks：
- command： /bin/false
register： result
ignore_errors： True
- command： /bin/something
when： result|failed
- command： /bin/something_else
when： result|success
- command： /bin/still/something_else
when： result|skipped
“when：result|success”的意思为当变量result执行结果为成功状态时，将执
行/bin/something_else命令，其他同理，其中success为Ansible内部过滤器方法，
返回Ture代表命令运行成功。
9.11 循环
通常一个任务会做很多事情，如创建大量的用户、安装很多包，或重复轮询
特定的步骤，直到某种结果条件为止，Ansible为我们提供了此支持。下面是一
个简单的示例：
- name： add several users
user： name={{ item }} state=present groups=wheel
with_items：
- testuser1
- testuser2
这个示例实现了一个批量创建系统用户的功能，with_items会自动循环执行
上面的语句“user：name={{item}}state=present groups=wheel”，循环的次数为
with_items的元素个数，这里有2个元素，分别为testuser1、testuser2，会分别替
换{{item}}项。这个示例与下面的示例是等价的：
- name： add user testuser1
user： name=testuser1 state=present groups=wheel
- name： add user testuser2
user： name=testuser2 state=present groups=wheel
当然，元素也支持字典的形式，如下：
- name： add several users
user： name={{ item.name }} state=present groups={{ item.groups }}
with_items：
- { name： 'testuser1'， groups： 'wheel' }
- { name： 'testuser2'， groups： 'root' }
循环也支持列表（List）的形式，不过是通过with_flattened语句来实现的，
例如：
----
# file： roles/foo/vars/main.yml
packages_base：
- [ 'foo-package'， 'bar-package' ]
packages_apps：
- [ ['one-package'， 'two-package' ]]
- [ ['red-package']， ['blue-package']]
以上定义了两个列表变量，分别是需要安装的软件包名，以便后面进行如下
引用：
- name： flattened loop demo
yum： name={{ item }} state=installed
with_flattened：
- packages_base
- packages_apps
通过使用with_flattened语句循环引用定义好的列表变量。
9.12 示例讲解
官网提供的Haproxy+LAMP+Nagios经典示例，也是目前国内最常用的技术架
构，此案例访问地址为：https://github.com/ansible/ansible-
examples/tree/master/lamp_haproxy。下面将对该示例进行详细说明，内容覆盖前
面涉及的几乎所有知识点，起到温故的作用，同时作为对Ansible的总结内容。
下面介绍playbook的基本信息。
1.目录结构
示例playbook目录结构见图9-9。
图9-9 示例目录结构
2.设备环境说明
两台Web主机、1台数据库主机、1台负载均衡器主机、1台监控主机，hosts
配置如下：
【hosts】
[webservers]
web1
web2
[dbservers]
db1
[lbservers]
lb1
[monitoring]
nagios
3.palybook入口文件site.yml
需要注意的是base-apache角色，由于webservers及monitoring都需要部署
Apache环境，为提高复用性，将部署Apache独立成base-apache角色。
【Site.yml】
---
- hosts： all
roles：
- common
- hosts： dbservers
user： root
roles：
- db
- hosts： webservers
user： root
roles：
- base-apache
- web