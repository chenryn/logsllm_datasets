          - : 
#### 嵌入脚本区块执行远程代码
嵌入的脚本区块是专有的XSLT扩展，可以直接在XSLT文档中包含代码。在微软的实现中，可以包含C#代码。当文档被解析，远程服务器会编译然后执行代码。
下面的XSLT文档是一个POC，作用是列出当前目录下的所有文件。
      --- BEGIN COMMAND OUTPUT ---        
      --- END COMMAND OUTPUT ---    
首先我们在“xsl：stylesheet”标签中定义了两个新的XML前缀。第一个“xmlns：msxsl”用来启用Microsoft的专有扩展格式，第二个“xmlns：user”声明了“msxsl：script”脚本块实现的自定义用户扩展接口。
C#代码实现了execute()函数，用于执行"cmd.exe /c dir"命令并将结果以字符串形式返回。最后函数是在“xsl:value-of”标签中调用。
该转换的结果等同于命令"dir"执行的输出：
    --- BEGIN COMMAND OUTPUT ---             Volume in drive C has no label.
     Volume Serial Number is EC7C-74AD
     Directory of C:\Users\context\Documents\Visual Studio 2015\Projects\XsltConsole
    Application\XsltConsoleApplication\bin\Debug
    22/02/2017  15:19              .
    22/02/2017  15:19              ..
    22/02/2017  13:30               258 data.xml
    22/02/2017  14:48               233 external_transform.xslt
    22/02/2017  15:15                12 secretfruit.txt
    31/01/2017  13:45               154 secretfruit.xml
    22/02/2017  15:29               831 transform.xslt
    22/02/2017  13:49             7,168 XsltConsoleApplication.exe
    26/01/2017  15:42               189 XsltConsoleApplication.exe.config
    22/02/2017  13:49            11,776 XsltConsoleApplication.pdb
                   8 File(s)         20,621 bytes
                   2 Dir(s)   9,983,107,072 bytes free
      --- END COMMAND OUTPUT ---    
#### import和incldue曲线救国
import和include标签可用于组合多个XSLT文档。如果我们碰到了这么一种情况（只能在XSLT文档的中间部分注入字符），那么直接使用XXE攻击或者include脚本都是不可能的，因为这两种手法都要求注入点在文档的顶部。
攻击者通过将XSLT文档和外部文档组合来打破这种限制，import和incldue函数可以达到这样的效果。在加载外部文件时，整个文档将被解析。如果攻击者可以控制这个过程，那么他们可以使用XXE和在外部文件中使用内嵌脚本这两种攻击方式。
外部文件可能是之前上传到服务器上的文件，只要文件内容是XML格式那扩展名是什么就没关系了。当然外部文件也可能是攻击者服务器上的一个文件，通过URL来引用。
当“xsl:include”在其他地方使用时，“xsl:import”标签只能作为“xsl:stylesheet”标签的第一个子标签。
接着让我们使用之前的XSLT文档吧，假设我们只能在字符串“Your Company Name Here” 中进行注入：
        Your Company Name Here
        Fruits:
          - : 
在上面的转换中，我们想包含下面名为external_transform.xslt的外部文件。为了使事情简单化，外部转换只打印简要的信息；然而外部转换可以用之前提到过的任何攻击所代替（包括那些需要在文档顶部进行声明的攻击手法），比如内嵌的脚本区块在上述转换中不能直接注入。
         Hello from the external transformation
为了包含外部文档，我们需要注入如下标签：
然而，这存在一个问题：“xsl:include”
不能被“xsl:template”包含并且转换后的文件必须是格式良好的XML文档。所以我们的第一步是要闭合该标签“xsl:template”，接着添加“xsl:incldue”标签，这就能满足第一个要求了。为了获取到格式良好的XML文档，在“xsl:incldue”标签后我们需要再次打开“xsl:template”标签。
生成的攻击载荷如下：
在注入后，生成的XSLT文档看起来是这样的：
        Fruits:
          - : 
转换后将生成如下输出：
    Hello from the external transformation
和XXE、document()函数一样，import和include标签可以用来数据窃取和基本的端口扫描。
## XSLT----导致app易受攻击
在识别出XSLT漏洞后，编写能工作的exp是比较棘手的。
这有一部分是因为xml严格的语法要求，另一部分是因为应用程序的实现细节。
测试
所以我写了一个小型易受攻击的.Net控制台应用程序，可用于测试前面所提到的攻击。该应用是由.Net's System.Xml
实现的。带有注释的完整代码报告如下，可以通过Microsoft Visual
Studio来编译。代码和已经编译好的应用可以在这里[下载](https://github.com/ctxis/VulnerableXsltConsoleApplication)。
分割线
    using System;
    using System.Xml;
    using System.Xml.Xsl;
    namespace XsltConsoleApplication
    {
        class Program
        {
            /*
            This code contains serious vulnerabilities and is provided for training purposes only!
            DO NOT USE ANYWHERE FOR ANYTHING ELSE!!!
            */
            static void Main(string[] args)
            {
                Console.WriteLine("\n#####################################################################");
                Console.WriteLine("#                                                                   #");
                Console.WriteLine("# This is a Vulnerable-by-Design application to test XSLT Injection #");
                Console.WriteLine("#                                                                   #");
                Console.WriteLine("#####################################################################\n");
                Console.WriteLine("The application expects (in the current working directory):");
                Console.WriteLine(" - an XML file (data.xml) and\n - an XSLT style sheet (transform.xslt)\n");
                Console.WriteLine("===================================================================");
                String transformationXsltFileURI = "transform.xslt";
                String dataXMLFileURI = "data.xml";
                // Enable DTD processing to load external XML entities for both the XML and XSLT file
                XmlReaderSettings vulnerableXmlReaderSettings = new XmlReaderSettings();
                vulnerableXmlReaderSettings.DtdProcessing = DtdProcessing.Parse;
                vulnerableXmlReaderSettings.XmlResolver = new XmlUrlResolver();
                XmlReader vulnerableXsltReader = XmlReader.Create(transformationXsltFileURI, vulnerableXmlReaderSettings);
                XmlReader vulnerableXmlReader = XmlReader.Create(dataXMLFileURI, vulnerableXmlReaderSettings);
                XsltSettings vulnerableSettings = new XsltSettings();
                // Embedded script blocks and the document() function are NOT enabled by default
                vulnerableSettings.EnableDocumentFunction = true;
                vulnerableSettings.EnableScript = true;
                // A vulnerable settings class can also be created with:
                // vulnerableSettings = XsltSettings.TrustedXslt;
                XslCompiledTransform vulnerableTransformation = new XslCompiledTransform();
                // XmlUrlResolver is the default resolver for XML and XSLT and supports the file: and http: protocols
                XmlUrlResolver vulnerableResolver = new XmlUrlResolver();
                vulnerableTransformation.Load(vulnerableXsltReader, vulnerableSettings, vulnerableResolver);  
                XmlWriter output = new XmlTextWriter(Console.Out);
                // Run the transformation
                vulnerableTransformation.Transform(vulnerableXmlReader, output);   
            }
        }
    }
该应用需要data.xml和transformation.xslt文件在当前工作目录下。
## 推荐
如果你的应用使用了XSLT，通过下列引导你可以降低风险：
  * 尽可能避免使用用户提供的XSLT文档
  * 不要使用不受信任的输入去生成XSLT文档，比如拼接字符串。如果需要非静态值，则应将其包含在XML数据文件中，并且仅由XSLT文档引用
  * 明确禁止使用XSLT库实现的危险功能。查阅库的文档如何禁用XML外部实体、document()函数、import和include标签。确保嵌入脚本扩展是禁用的，同时其他允许读或写外部文件的专用扩展也被禁用了。
Emanuel Duss和Roland
Bischofberger写了一份文档，讲述了流行的XSLT库实现的功能和他们的默认配置。文档的34页包含了一张便捷比较表格，可以作为入手点。[点我下载PDF](https://www.owasp.org/images/a/ae/OWASP_Switzerland_Meeting_2015-06-17_XSLT_SSRF_ENG.pdf.)
## 总结和结论
XSLT是非常有用的工具，许多应用都用了，但它的问题并不那么为人所知。差的代码实践会引入漏洞，这可能会导致应用控制权的完全丧失和数据被窃取。本文致力于提高大家的意识，通过展示一些可能的攻击手法和引导建议来避免常见的实现上的问题。
[ 原文地址](https://www.contextis.com/blog/xslt-server-side-injection-attacks)