age is notably less than the leakage of the add operation
by Kamara et al. [20] or Naveed et al. [24] and diﬀerently
to their scheme ciphertexts for not previously searched key-
words remain semantically secure. Furthermore, this leakage
is already part of the most simple construction based on the
searchable encryption scheme by Song et al. [29] and it is also
not excluded in any of the other eﬃcient, dynamic searchable
encryption schemes [8, 19]. In our experiments using real-
world search terms, 84% of all keywords were never searched
for and hence remained semantically secure encrypted.
We also optionally maintain a history of previous search
tokens at the client, such that ciphertexts for previously
searched keywords are encrypted diﬀerently. We emphasize
that this choice is a pure performance optimization and the
history could just as well be kept at the service provider at a
higher update cost. Furthermore, should the client lose the
saved history, he can restore it from the index information
of the service provider. We further explain this choice in
Section 6.1.
Still, our construction is highly eﬃcient and provides prac-
tical performance. We implement our system and a search
in collection with 300.000 keywords and documents can be
performed in 70 ms on average. We require very little stor-
age overhead and only need to store 2 cryptographic hash
values per keyword and document. We provide the detailed
performance results in Section 7.
3. DEFINITIONS
The set of binary strings of length n is denoted as {0, 1}n,
the set of all ﬁnite binary strings is denoted as {0, 1}∗.
Given a binary string u, we denote len (u) as its bit length.
Given two binary strings u, v, the concatenation is written
as u||v. The notation [1, n] with n ∈ N denotes the integer
set {1, . . . , n}. We denote the output z of a (possibly proba-
bilistic) algorithm A as z ← A. Sampling uniformly random
from a set X is denoted as x ← X.
Throughout, λ will denote the security parameter. A
function f : N → R is negligible in x if for every positive
polynomial p(·) there exists a x0 such that for all x > x0,
f (x) < 1/p(·).
We assume each ﬁle f having a unique ﬁle identiﬁer ID(f ),
each ﬁle consists of words that is f = (w1, . . . , wlen(f )) with
wi ∈ {0, 1}∗. For a ﬁleset f we denote len (f) as the number
of ﬁles in f. Given a keyword w we write fw as the subset
of all ﬁles f that contain w. In addition, the set of all ﬁle
identiﬁers that contain this keyword w is denoted by Iw more
formally it is deﬁned as Iw = {ID(fi) : fi ∈ fw}.
As mentioned in Section 1, our scheme does not oﬀer an
operation for initial outsourcing a set of ﬁles but starts with
an empty search index γ. The service provider’s search in-
dex γ and collection of encrypted ﬁles c are updated by ﬁle
speciﬁc add tokens αf for ﬁle f and its encryption.
To perform a search query for keyword w, the client gen-
erates an deterministic search token τw that is handed to
the service provider. For simplicity of the exposition we as-
sume that all generated search tokens are given to the service
provider, i.e. if a search token has been created by the client
the service provider gains knowledge of it.
Finally, to delete a ﬁle f the client simply passes its ﬁle
identiﬁer ID(f ) to the service provider.
Definition 1
(SUISE). A securely updating index-based
searchable encryption scheme is a tuple of eight (possibly
probabilistic) polynomial-time algorithms SUISE = (Gen,
Enc, SearchToken, Search, AddToken, Add, Delete, Dec)
such that:
(K, γ, σ) ← Gen(1λ): is a probabilistic algorithm that
takes as input a security parameter λ and outputs a
secret key K, a (still empty) search index γ and a (still
empty) search history σ.
c ← Enc(K, f ): is a probabilistic algorithm that takes
as input a secret key K and a ﬁle f .
It outputs an
encrypted ﬁle c.
(σ′, τw) ← SearchToken(K, w, σ): is a (possibly proba-
bilistic) algorithm that takes as input a secret key K,
a keyword w and search history σ. It outputs a new
search history σ′ and a search token τw.
(Iw, γ ′) ← Search(τw, γ): is a deterministic algorithm
that takes as input a search token τw, a sequence of
encrypted ﬁles c and a search index γ. It outputs a
sequence of identiﬁers Iw and an updated search index
γ ′.
αf ← AddToken(K, f, σ): is a (possibly probabilistic)
algorithm that takes as input a secret key K, a ﬁle f
and a search history σ. It outputs an add token αf .
(c′, γ ′) ← Add(αf , c, c, γ):
is a deterministic algo-
rithm that takes as input an add token αf , an en-
crypted ﬁle c, a sequence of encrypted ﬁles c and a
search index γ . It outputs an updated search index γ ′
and an updated sequence of encrypted ﬁles c′.
(c′, γ ′) ← Delete(ID(f ), c, γ): is a deterministic algo-
rithm that takes as input an identiﬁer ID(f ) of the ﬁle
that shall be removed, a sequence of encrypted ﬁles c
and a search index γ. It outputs an updated sequence
of encrypted ﬁles c′ and an updated search index γ ′.
f ← Dec(K, c): is a deterministic algorithm that takes
as input an encrypted ﬁle c and a key K. It outputs
the decrypted ﬁle f .
In an ideal scenario, searchable encryption is implemented
in a way where the service provider learns absolutely nothing
about either the ﬁles or the search queries. As mentioned
in Section 2, there are methods to achieve this strict secu-
rity goals, but these come along with huge overhead. By
allowing the sever to learn particular information (e.g. the
access pattern) we can construct more eﬃcient searchable
encryption schemes. To address this small knowledge the
service provider gains, we follow the approach of [8, 11, 19,
20, 24] and use leakage functions. The additional knowledge
the provider gains by getting ciphertexts and (add or search)
tokens is deﬁned by these functions.
As noticed in [11], there is a diﬀerence between security
against adaptive chosen keyword attacks (CKA2) and non-
adaptive chosen keyword attacks (CKA 1), that must be
taken into account for security analyses. Security against
CKA2 guarantees security even when the client’s generated
query depend on results of previous queries and the search
index.
In contrast, security against CKA1 guarantees se-
curity only when all queries generated by the client are in-
dependent of previous queries and the search index. Our
construction achieves the stronger notion of CKA2 security,
that is modiﬁed in a way suggested by Kamara et al. in [20]
to ﬁt into the scenario of dynamic SSE.
Definition 2. Let SUISE = (Gen, Enc, SearchToken,
Search, AddToken, Add, Delete, Dec) be a securely updat-
ing index-based searchable encryption scheme. Consider the
following experiments with stateful attacker A, stateful sim-
ulator S and stateful leakage functions Lsearch, Ladd, Lencrypt.
A (λ) : the challenger runs Gen(1λ) to get the
RealSSE
tuple (K, γ, σ). The adversary A makes a polynomial
number of adaptive queries q ∈ {w, f1, f2} and for
each query q the challenger generates either a search
token τw ← SearchToken(K, w, σ), an add token αf ←
AddToken(K, f1, σ), or a ﬁle encryption c ← Enc(K, f2).
Finally, A returns a bit b that is output by the experi-
ment.
IdealSSE
A,S (λ) : the simulator sets up its internal envi-
ronment. The adversary A makes a polynomial num-
ber of adaptive queries q ∈ {w, f1, f2} and for each
query q the simulator is given the appropriate leakage
i.e. either given Lsearch(f, w), Ladd(f, f1) or Lencrypt(f2).
S returns the appropriate token fτw, fαf or a ciphertext
ec. Finally, A returns a bit b that is output by the ex-
periment.
We say SUISE is (Lsearch, Ladd, Lencrypt)-secure against adap-
tive dynamic chosen-keyword attacks if for all probabilis-
tic polynomial-time algorithms A there exists a probabilistic
polynomial-time simulator S so that advantage of A deﬁned
as
A (λ) = 1(cid:3) − Pr(cid:2)IdealSSE
A,S (λ) = 1(cid:3)(cid:12)(cid:12)
(cid:12)(cid:12)Pr(cid:2)RealSSE
is negligible in λ.
In Figure 1 we show the protocols between client and
server combining these algorithms into interaction patterns.
A dynamic searchable encryption scheme is called correct
if for all λ ∈ N, all keys K generated by Gen(1λ), and all
sequences of add, delete and search operations on search
index γ, every search operation returns the correct set of
ﬁles (except with negligible probability).
4.
IMPLEMENTATION
On a high level our construction works by learning the
index from the access pattern. Initially we maintain a reg-
ular index, i.e. for each document we store its (encrypted)
keywords. We denote this index γf . Once a keyword is
searched, we move all ﬁle identiﬁers to an inverted index for
Initial Setup
Client
Server
Search Files
Client
Server
Gen(1λ)
(K, γ, σ)
Add File
Delete File
Search Files
γ
. . .
. . .
SearchToken(K, w, σ)
(σ′, τw)
Dec(K, ci)i∈Iw
{fi}i∈Iw
τw
{ci}i∈Iw
Search(τw, γ)
(Iw, γ ′)
Add File
Client
Server
Delete File
Enc(K, f )
c
AddToken(K, f, σ)
αf
c, αf
Add(αf , c, c, γ)
(c′, γ ′)
Client
Server
ID(f )
Delete(ID(f ), c, γ)
(c′, γ ′)
Figure 1: Use of algorithms from Deﬁnition 1 for realizing the complete protocol.
the keyword, i.e. the keyword is now the key to the index.
The keyword is also encrypted; it is the search token. We
denote this index γw.
Clearly, we have to accomodate future updates for key-
words that have already been searched. These keywords –
and their corresponding ﬁle identiﬁers – have been moved to
the inverted index. Hence, an update needs to update the
inverted index, or we need to always search both indices,
completely ruining search time. In this section we present
the option to maintain the search history at the client. The
client checks whether a keyword has been searched and tells
the server to include it in the inverted index. This is a pure
performance optimization. We present the alternative op-
tion to maintain the search history on the server at a higher
update cost in Section 6.1.
For our implementation we use several data structures in-
cluding lists and (chained) hash tables. For list l we denote
len (l) for the number of elements in l and x ∈ l iﬀ value x is
stored in list l. Accessing the element at position i is written
as l[i]. A hash table T stores values v associated with keys
k, written as T [k] = v. We write v ∈ T if there is a key k so
that T [k] = v. For our implementation it is crucial that it is
feasible to access a value v with corresponding key k stored
in a hash table in constant time. If the values stored in the
hash table are lists, we call it a chained hash table.
Given an IND-CPA secure secret-key encryption scheme
SKE = (GIND-CPA, E IND-CPA, DIND-CPA), a pseudorandom
number generator G that outputs random numbers with
bit length λ and a pseudorandom functions F : {0, 1}λ ×
{0, 1}∗ → {0, 1}λ, and a random oracle H : {0, 1}λ×{0, 1}∗ →
{0, 1}λ we construct dynamic SSE scheme SUISE = (Gen,
Enc, SearchToken, Search, AddToken, Add, Delete, Dec) as
follows:
• (K, γ, σ) ← Gen(1λ): sample two λ-bit strings k1 ←
{0, 1}λ and k2 ← GIND-CPA(1λ).
In addition, create
two empty chained hash tables γf , γw and an empty
set σ. Output (K, γ, σ), with K = (k1, k2) and γ =
(γf , γw).
• c ← Enc(K, f ): parse key K = (k1, k2) and output
c = E IND-CPA
k2
(f ).
• (τw, σ′) ← SearchToken(K, w, σ): parse key K = (k1, k2)
calculate Fk1 (w) = τw set σ′ = σ ∪ {τw} and output
(τw, σ′).
• (Iw, γ ′) ← Search(τw, γ): parse search index γ = (γw, γf )
and check if there is an entry for τw in γw.
– If yes, then set Iw = γw[τw] and γ ′
– Otherwise create an empty list Iw and do for every
w = γw.
c ∈ γf :
1. for every ci ∈ c that is i ∈ [1, len (c)], set
ci = li||ri and check if Hτw (ri) = li. If yes
then insert ID(f ) that corresponds to c into
Iw.
Update γ ′
w by creating an entry γw[τw] = Iw
Output Iw and (an updated version of) γ ′ = (γ ′
w, γf ).
• αf ← AddToken(K, f, σ): parse K = (k1, k2). For ﬁle
f that consists of a sequence of words create a list f
of unique words f ⊇ f = (w1, . . . , wlen(f)). Generate
a sequence of pseudorandom values s1, . . . slen(f) with
PRNG G and create an empty list x. For every word
wi ∈ f do the following:
1. compute the corresponding search token τwi =
Fk1 (wi)
2. if this search token was used for a previous search:
if τwi ∈ σ, add τwi to x.
3. set ci = Hτwi (si)||si
Now sort c = (c1, . . . , clen(f)) in lexicographic order
and set αf = (ID(f ), c, x). Output αf .
• (c′, γ ′) ← Add(αf , c, c, γ): parse αf = (ID(f ), c, x),
γ = (γw, γf ) and set γf [ID(f )] = c. In addition, for
every xi ∈ x add ID(f ) to γw[xi]. Update the cipher-
texts c to c′ by adding c. Output c′ and the updated
version γ ′ = (γw, γf ).
• (c′, γ ′) ← Delete(ID(f ), c, γ): parse γ = (γw, γf ),
check for every list e saved in γw if ID(f ) ∈ e and
remove ID(f ) in this case from e. Remove ciphertext
c corresponding to ID(f ) from c and remove γf [ID(f )]
from γf . Output an updated set of encrypted ﬁles c
and an updated search index γ ′ = (γw, γf ).
• f ← Dec(K, c): parse K = (k1, k2) and output f =
DIND-CPA
k2
(c).
Our scheme provides correctness with all but negligible
probability. When we have a collision of H, Search out-
puts a false index Iw that is for two diﬀerent search to-
kens τ, τ ′ and two diﬀerent random numbers s, s′ we have
H(τ, s) = H(τ ′, s′). Since H is a random oracle with image
size {0, 1}λ, a collision occurs for N queries with probabil-
ity proportional to N 22−λ and therefore is negligible for N
polynomial in λ. Furthermore, these collisions result in false
positive answers for Iw and can be ﬁltered out by the client
repeating the search on all decrypted ﬁles with IDs contained
in Iw. Exactly the same argument holds for a collision of the
pseudorandom function F , that is generating two equivalent
search tokens for diﬀerent words.
5. SECURITY
As mentioned before, some operations leak particular in-
In detail, we use three
formation to the service provider.
leakage functions Lsearch, Ladd, Lencrypt deﬁned as follows:
Lsearch(f, w) = (ACCPt(w), ID(w))
Ladd(f, f ) = (ID(f ), len(cid:0)f(cid:1) , SRCH HISt(f ))
Lencrypt(f ) = len (f )
where ACCPt(w) is the access pattern at time t deﬁned
as set {ID(fi) : w ∈ fi and fi ∈ f}, f is the set of unique
words in ﬁle f , and SRCH HISt(f ) is the set of IDs of all
searched words until time t that also appear in f .
Since search tokens τ are deterministic, an attacker is able
to link generated search tokens with words, although she
does not know what the plain word is. This is denoted by
ID(w) in our leakage functions.
Now we are ready to proof the following theorem: