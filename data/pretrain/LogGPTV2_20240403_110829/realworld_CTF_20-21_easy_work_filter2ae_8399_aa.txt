# realworld CTF 20-21 easy_work
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 题目分析
###  1.1 安全措施
​ 解压fd.img文件得到vxwroks内核文件，通过分析可以发现，该内核文件为vxworks6.9，缺少符号表。
​ 未开启任何保护措施。
###  1.2 静态分析内核文件
​
发现特殊字符，经过初步判断此题应该是基于vxworks内核的私有协议分析题目，自定义该私有协议为PKT，通过与有符号表的vxworks6.9内核固件进行比对，发现该内核文件中缺失很多工具，导致无法直接获取shell接口。
​ 进入可以发现加密操作：
​ 经过逆向分析可以还原该部分函数过程：
    int parpare()
    {
      int result; // eax
      ip_addr = malloc(20u);
      memcpy(ip_addr, a192168251, 0xEu);            // 设置IP地址
      ip_len = (int)malloc(4u);
      *(_DWORD *)ip_len = 0x14;                     // 设置IP地址长度
      port = (int)malloc(4u);
      *(_WORD *)port = 0x1234;                      // 设置PORT
      BEAT = malloc(5u);
      strcpy((char *)BEAT, "beat");
      len_4 = (int)malloc(4u);
      *(_DWORD *)len_4 = 4;
      key_init = malloc(0x10u);
      memcpy(key_init, &Key_init, 0x10u);// 0x4d251f: init{ 01234567 89abcdef fedcba98 76543210}
      AES_init_ctx((int)&CTX, (int)key_init);
      password1 = malloc(0xFu);
      strcpy((char *)password1, "dorimifasolaxi");  // 设置IV
      dword_4E265C = (int)malloc(4u);
      result = dword_4E265C;
      *(_DWORD *)dword_4E265C = 15;
      return result;
    }
​ 经过分析可以发现该过程是初始化一些参数，包括设置ip地址，ip地址长度，端口号，秘钥参数，IV向量等参数。
​
进入接收数据包的函数，自定义命名为recv_pkt()函数，经过逆向比对分析可以还原该私有协议的交互过程，此PKT协议使用了vxworks独有的套接字zbuf，但是与socket套接字类似，只是参数使用和交互过程上有一些区别，后面会附上zbuf套接字的使用方法。
    int recv_pkt()
    {
      int RecvBuff; // [esp+18h] [ebp-60h] BYREF
      char ipaddr[18]; // [esp+1Eh] [ebp-5Ah] BYREF
      socklen_t sockAddrSize; // [esp+30h] [ebp-48h] BYREF
      caddr_t recvBuff; // [esp+34h] [ebp-44h] BYREF
      sockaddr clientAddr; // [esp+44h] [ebp-34h] BYREF
      struct sockaddr server_addr; // [esp+54h] [ebp-24h] BYREF
      int Recvlen; // [esp+64h] [ebp-14h] BYREF
      int Recvfd; // [esp+68h] [ebp-10h]
      int server_sockfd; // [esp+6Ch] [ebp-Ch]
      unsigned int encoded_crc32; // [esp+74h] [ebp-4h]
      sockAddrSize = 0x10;
      bzero(&server_addr, 0x10u);
      server_addr.sa_family = 0x210;                // AF_INET
      *(_WORD *)server_addr.sa_data = 53767;        // PORT
      *(_DWORD *)&server_addr.sa_data[2] = 0;       // ipaddr
      parpare();    //初始化参数
      server_sockfd = socket(2, 2, 0);//创建TCP流socket
      if ( server_sockfd != -1 )
      {
        if ( bind(server_sockfd, &server_addr, sockAddrSize) == -1 )//监听
        {
          perror(aBind);
          close(server_sockfd);
          return -1;
        }
        while ( 1 )
        {
          while ( 1 )
          {
            do
            {
              do
                Recvfd = zbufSockRecvfrom(server_sockfd, 0, &Recvlen, &clientAddr, (int)&sockAddrSize);   //接收远程数据包
              while ( !Recvfd );
            }
            while ( Recvlen  0xF && Recvlen  0 )
          {
            sub_40EB4C(Recvfd, 0, 0, Recvlen, (int)encrypt_message);
            encoded_crc32 = crc32(encoded_crc32, encrypt_message, Recvlen);//
            if ( recvBuff.encode_crc32 != encoded_crc32 )
              goto LABEL_11;
            memset((char *)(Recvlen + 0x504200), 0, 1);
            take_packet((int)encrypt_message, Recvlen, (int)&recvBuff);//数据包处理函数
          }
          else
          {
            printf("?");
          }
          zbufDelete(Recvfd);
        }
      }
      perror(s);
      return -1;
    }
​
经过分析该过程有一个加解密过程，发送的数据包需要经过CRC32加密并且校验通过才可以通过验证，真正处理数据包的函数为sub_40f735，此处命名为take_packet()函数，经过逆向分析可以得到如下过程。
    int __cdecl take_packet(int encrypt_message, unsigned __int16 RecvLen, int RecvBuff)
    {
      int v4; // [esp+10h] [ebp-18h]
      unsigned __int16 v5; // [esp+14h] [ebp-14h]
      char v6[8]; // [esp+18h] [ebp-10h] BYREF
      int v7; // [esp+20h] [ebp-8h]
      int v8; // [esp+24h] [ebp-4h]
      v5 = RecvLen;
      clock_gettime(0, v6);
      if ( *(_DWORD *)RecvBuff != 0x4B5C6D7E )      // magic校验
        return -3;
      if ( *(_BYTE *)(RecvBuff + 7) )     //数据包第7bit不为0,case2
      {
        if ( *(_BYTE *)(RecvBuff + 7) == 1 ) //数据包第7bit为1
        {
          if ( *(_BYTE *)(RecvBuff + 6) != 2 && *(_BYTE *)(RecvBuff + 6) != 1 && *(_BYTE *)(RecvBuff + 6) )    //数据包第6bit只能选2,1,0,case1
            return -2;
          xor_0x77(encrypt_message, RecvLen);//做异或
        }
        else
        {
          if ( *(_BYTE *)(RecvBuff + 7) != 2 )//数据包第7bit为2报错
            return -16;
          if ( *(_BYTE *)(RecvBuff + 6) != 3 && *(_BYTE *)(RecvBuff + 6) != 1 && *(_BYTE *)(RecvBuff + 6) )  //数据包第6bit只能选3,1,0，否则报错，case1
            return -2;
          AES_init_ctx_iv((AES_CTX *)&CTX, (int)IV);  //AES IV初始化
          stream_dec((AES_CTX *)&CTX, encrypt_message, RecvLen); //AES解密加密数据包
          v8 = check_mesage(encrypt_message, RecvLen);//解密后数据包数据校验
          if ( v8  0 )
                set_port((unsigned __int16)dest);
              ++i;
            }
          }
          free(dest);
          break;
        case 3:
          v13 = *(_DWORD *)message;
          tag = *(_WORD *)(message + 4);
          if ( v13 > 4 || recvlen_2 <= 6u || tag != recvlen_2 - 6 )
            return -37;
          switch ( v13 )
          {
            case 0u:
              set_ipaddr((void *)(message + 6), tag);//重新设置ip地址和大小，但是ip地址和ip_len长度没有限制
              break;
            case 1u:
              if ( tag != 2 )
                return -40;
              set_port(*(_WORD *)(message + 6));//重新设置端口号，大小两个字节
              break;
            case 2u:
              set_password((const char *)(message + 6), tag);//重新设置密码，长度没有限制
              break;
            case 3u:
              if ( tag != 16 )
                return -41;
              set_IV((void *)message); //设置IV
              break;
            case 4u:                                // beat
              set_BEAT((const char *)(message + 6), tag);//设置BEAT字符串，长度没有限制
              break;
          }
          break;
        case 1:
          if ( *(_DWORD *)dword_4E265C != recvlen_2 )
            return -33;
          if ( memcmp(message, (int)password1, recvlen_2) )
            return -34;
          send_pkt();//发送数据包
          break;
        default:
          printf("ping");
          return 0;
      }
      return v5;
    }
通过分析可以得到，在send_pkt函数中，有一个明显的栈溢出：
    int send_pkt()
    {
      int v1; // [esp+20h] [ebp-48h]
      char v2[18]; // [esp+26h] [ebp-42h] BYREF
      char dest[20]; // [esp+38h] [ebp-30h] BYREF
      struct sockaddr addr; // [esp+4Ch] [ebp-1Ch] BYREF
      int v5; // [esp+5Ch] [ebp-Ch]
      int fd; // [esp+60h] [ebp-8h]
      bzero(&addr, 0x10u);
      addr.sa_family = 0x210;
      *(_WORD *)addr.sa_data = (*(_WORD *)port << 8) | HIBYTE(*(_WORD *)port);
      memcpy(dest, ip_addr, *(_DWORD *)ip_len);//栈溢出，由于dest空间只有0x20字节，而ip_len长度没有限制，ip_addr控制可以由我们进行控制，造成任意长度栈溢出。
      inet_aton((int)ip_addr, &addr.sa_data[2]);
      v5 = socket(2, 2, 0);
      if ( v5 == -1 || (fd = socket(2, 1, 0), fd == -1) )
      {
        perror(s);
        v1 = -1;
      }
      else
      {
        connect(fd, &addr, 0x10u);
        if ( zbufSockBufSend(fd, (int)BEAT, *(_DWORD *)len_4, (int)sub_40EB47, 0, 0) == -1 )
        {
          perror(aZbufsockbufsen);
          close(fd);
          v1 = -1;
        }
        else
        {
          close(fd);
          sprintf_1(*(int *)&addr.sa_data[2], (int)v2);
          printf(
            "SEND BEAT TO (%s, port %d):\n",
            v2,
            (unsigned __int16)(*(_WORD *)addr.sa_data << 8) | (unsigned __int8)addr.sa_data[1]);
          if ( zbufSockBufSendto(v5, (int)BEAT, *(_DWORD *)len_4, (int)sub_40EB47, 0, 0, &addr, 0x10u) == -1 )
          {
            perror(aZbufsockbufsen);
            close(v5);
            v1 = -1;
          }
          else
          {
            close(v5);
            v1 = 0;