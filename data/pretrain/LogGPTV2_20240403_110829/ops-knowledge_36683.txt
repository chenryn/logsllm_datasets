User: How to use Python to write a script that can automatically monitor server status and send alarm emails?
Assistant: The following is a simple Python script that can automatically monitor server status and send alarm emails: ```python import psutil import smtplib from email.mime.text import MIMEText # Set email parameters SMTP_SERVER = 'smtp.gmail.com' SMTP_PORT = 587 SMTP_USERNAME = 'your-gmail-username' SMTP_PASSWORD = 'your-gmail-password' EMAIL_FROM = 'your-email-address' EMAIL_TO = 'recipient-email-address' EMAIL_SUBJECT = 'Server Status Report' # Define to get server CPU usage The function def get_cpu_usage(): cpu_usage = psutil.cpu_percent() return cpu_usage # Define the function to get the server memory usage def get_memory_usage(): memory_usage = psutil.virtual_memory().percent return memory_usage # Check the server status if get_cpu_usage() > 80 or get_memory_usage() > 80: # Send alarm email msg = MIMEText('Server CPU or memory usage is too high!') msg['Subject'] = EMAIL_SUBJECT msg['From'] = EMAIL_FROM msg['To'] = EMAIL_TO smtp_server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT) smtp_server.ehlo() smtp_server.starttls() smtp_server.login(SMTP_USERNAME, SMTP_PASSWORD) smtp_server.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string() ) smtp_server.quit()` `` The above code uses the psutil library to obtain and monitor the CPU and memory usage of the server. If it is detected that the usage rate exceeds the set threshold (80% here), an alarm email will be sent to the set recipient mailbox. Note that in order to be able to send emails, a valid SMTP server and corresponding username and password are required. This script can be set as a scheduled task, such as checking the server status every 5 minutes, and sending an alarm email when necessary.