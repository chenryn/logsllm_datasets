for instance, protocols may only support authentication when the reader has on-line access to the back-end
server, or conversely, may be suitable for reader-server batch communication. 2
In the following, we assume that we deal with a generic RFID protocol as in Fig. 1 that suffers from
lack of scalability of key-lookup. We also assume that the protocol must achieve privacy, since otherwise
scalability may be easily achieved by having the tag reveal its identi(cid:2)er to the server, thus allowing for
immediate key-lookup.
2In this case, the tag validation may be delayed until the next batch interaction (e.g., [Tsu06]), or may be immediate with
(limited) delegation by the back-end server to the reader [MSW06].
4
3.2 The Compiler
Let h((cid:1)) stand for a trapdoor one-way function, where the trapdoor t is known only to the back-end server
(the Veri(cid:2)er). We (cid:2)x the protocol in Fig. 1 to achieve key-lookup scalability by changing the form of the
tag’s response to
r; h(id; r0); f (k; c; r (cid:8) r0);
(1)
where f is as in Fig. 1, id is a tag identi(cid:2)er, r0 is a random nonce, selected from R = f0; 1gt uniformly at
random, and (cid:147)(cid:8)(cid:148) denotes bitwise xor. When receiving the above response (relayed by the READER), the
back-end server (the Veri(cid:2)er) can use its knowledge of the trapdoor to recover id. It may then apply the
steps of the (non-scalable) version of the protocol.
In order for the compiler to preserve the security properties of the original protocol, the function h((cid:1))
must satisfy some properties.
1. The probability ensembles fh(id1; r0)gr02f0;1gt and fh(id2; r0)gr02f0;1gt must be computationally
indistinguishable, for any pair of identities id1, id2. (To preserve unlinkable anonymity.)
2. The function h(id; (cid:1)) is one-way (i.e., in the variable r 0), for any choice of id. (To preserve transcript
integrity.)
The need for condition (1) should be obvious, as otherwise it allows for distinguishing between two
identities, breaking unlikable anonymity of the underlying protocol. Note that (1) does NOT imply (2),
because the identities are not known to the adversary. For instance, (1) is satis(cid:2)ed by the function g(id; r 0) =
(r0; (cid:17)(id; r0)), where (cid:17) is a PRF with key id. Now, for the necessity of condition (2), consider the following
attack when (2) does not hold: The adversary inverts h() to obtain the value r 0 in each of two sets of
2),
1) and V2 : r2, h(id2; r0
responses from (potentially distinct) tags: V1 : r1, h(id1; r0
2), constructing the response V : r3, h(id1; r0
2), with r3 = r0
2.
f (k2; c2; r2 (cid:8) r0
1 (cid:8) r2 (cid:8) r0
Then the adversary substitutes V2 by V : V will be accepted by the back-end server if id1 = id2, but only
with negligible probability if id1 6= id2. This violates the anonymity of the protocol, endowing the adversary
with an effective mechanism to link tag transcripts (through active attacks).
1), f (k1; c1; r1 (cid:8) r0
1), f (k2; c2; r2 (cid:8) r0
Under the assumptions above, we can show that the compiled protocol provides the same security guar-
antees as achieved by the initial protocol while guaranteeing constant key-lookup cost. In the following
we shall (cid:2)rst describe a lightweight implementation of a one-way trapdoor function (Section 3.3), and then
demonstrate the explicit ef(cid:2)ciencies (Section 3.4) and security guarantees (Section 3.5) achieved by the
compiler when applied to a family of protocols [BvLdM06, vLBdM07] that is secure under a very robust
security model (universal composability).
3.3 A Lightweight One-way Trapdoor Function
The greatest challenge in making the above compiler practical is to design very ef(cid:2)cient one-way trapdoor
functions with the required properties. First, we point out that since the RFID tags never need to perform
operations using the trapdoor(cid:151)from the perspective of a tag, h is simply a one-way function(cid:151)this asym-
metry can be exploited to obtain more ef(cid:2)cient schemes. There are several alternatives that could be used
to implement the function ef(cid:2)ciently. The most interesting approach uses a recent construction SQUASH
(from SQUaring haSH), proposed by Shamir in [Sha07], that shows how to implement modular squaring
(where the modulus N is reasonably large, say 1024 bits) while using just a few hundred gate-equivalents
(GEs) for computation and another several hundred GEs for read-only storage. Because only arithmetical
5
operations are used, this approach can be implemented very ef(cid:2)ciently, while from a security point of view
it is as hard as integer factorization [Sha07].
3.4 Applications and Implementations
The compiler can be applied to practically any anonymous RFID protocol to establish constant key-lookup.
In particular, to the lightweight RFID protocols O-TRAP and O-FRAP presented in [BvLdM06, vLBdM07],
for strong UC security with constant key-lookup. We next discuss ef(cid:2)ciency aspects of implementing the
protocols that result from application of the compiler to the O-TRAP scheme.
The authenticator f: In the O-TRAP/O-FRAP family of protocols, f is realized by a PRF, which in
practice can be implemented using a variety of well-known and constructions. Ef(cid:2)ciency vs. security trade-
offs in this architecture are easily achieved, as key-size and pseudo-randomness (estimated as the logarithm
of the PRF cycle) can be chosen to the granularity of individual bits. Here we discuss two implementation
strategies based on different PRF instantiations.
Using a well-known technique by Goldreich et. al. [GGM86], it is possible to build a PRF that makes a
call to a PRNG per bit of input processed. In turn, a very ef(cid:2)cient PRNG implementation can be achieved
using linear feedback shift registers, such as the self-shrinking generator [CKM94]. This results in a small
number of bit operations per input and output bits. The entire footprint of this implementation has been
estimated to require only 1435 logic gates (within 517 clock cycles and 64B memory), achieving 128-bit
security [LH06].
Block ciphers can similarly be used to implement PRFs through a number of standard constructions(cid:151)
their concrete security was analyzed in [BDJR97]. Recently, highly optimized implementations of the
Advanced Encryption Standard (AES) block cipher [DR02] have been achieved, and these are suitable
for RFID architectures [FWR05]. An RFID architecture using this implementation was proposed recently
by [FDW04], with footprint equal to 3400 GEs and mean current consumption equal to 8(cid:22)A, assuming a
clock rate of 100kHz, and within 1032 clock cycles.
The obfuscator h: The Rabin cryptosystem [Rab79] is a public-key encryption scheme that uses modular
squaring with composite modulus N, to encrypt data. The public key is N and the private key is the
factorization of N. In particular, if x is the plaintext then the ciphertext is y = x 2 mod N. To decrypt y
the factors of N are used: there are four quadratic residues of y, one of which is x. In Shamir’s adaptation,
modular squaring is replaced with integer squaring: h(x) = x 2 + kN, where k a random number less than
N [Sha07]. It is not dif(cid:2)cult to show that inverting h is as hard as factoring composite numbers [Sha07].
Let x = idjjr0. We need to compute h(x) = x2 + kN, for a 1024-bit wide N. The square x2 and the
product kN, are computed separately on-the-(cid:3)y, using a 128 bit register, and then combined (with carries
buffered for the next iteration). To evaluate individual bits of x 2 and kN, we convolute x with itself, and
k with N, using the 128 bit register, and invoke a PRNG to generate the bits of x and k on-the-(cid:3)y. 8
invocations will be needed. The cost of implementing h is then: (i) 512 NOT gates for read-only storage of
the 1024-bit modulus N and, (ii) a PRNG and buffers for the computations. Since f and h are computed
sequentially, we can re-use the PRNG and buffers of f. So the circuit complexity of h is < 1000 GEs.
Total cost of scheme. In total, assuming a PRG-based implementation of f, the cost is ’ 2500 GEs.
3.5 The Security Proof for the Compiler
In this section, we prove the result for the case where the generic challenge-response RFID protocol in
Fig. 1 realizes one-way authentication with strong (unlinkable) privacy in the UC framework. Our goal is to
show that the compiled protocol realizes the same security levels, while providing constant key-lookup cost.
6
This section should be viewed as a proof-sketch, as opposed to a fully formal proof; in particular, we are
informal in dealing with some aspects of the UC security formalization, e.g., omitting references to session
identi(cid:2)ers. Our interest is to convey the general ideas behind the proof, leaving rigorous analysis to the full
version of the paper, where we shall also consider cases when the original protocol achieves only weaker
guarantees, or only supports security in frameworks weaker than the UC model.
The UC framework de(cid:2)nes the security of a protocol (cid:25) in terms of the interactive indistinguishability
between real- and ideal-world simulations of executions of (cid:25) [Can95, Can00, Can01]. In the real-world exe-
cutions, honest parties are represented by probabilistic polynomial-time Turing (PPT) machines that execute
the protocol as speci(cid:2)ed and adversarial parties, also represented by PPTs, can deviate from the protocol in
an arbitrary fashion. The adversarial parties are controlled by a PPT adversary that has full knowledge of
their state, controls the communication channels of all parties (honest and adversarial), and interacts with
the environment in an arbitrary way, and in particular eavesdrops on communications. The ideal-world ex-
ecutions are controlled by an ideal functionality F, a trusted party that guarantees the correct execution of
the protocol(cid:151)in particular, F emulates all honest parties. The ideal-world adversary is controlled by F to
reproduce as faithfully as possible the behavior of the real adversary. We say that (cid:25) realizes F in the UC
framework, if no PPT environment Z can distinguish (with better than negligible probability) real- from
ideal-world protocol runs.
In our case (cid:25) is the compiled protocol, when the original protocol is of the form in Fig. 1, and achieves
UC anonymous authentication, as de(cid:2)ned for instance, in [vLBdM07]. In particular, F takes the following
actions in the idealized protocol executions:
(cid:15) Generates the challenges for honest READERs.
(cid:15) Receives challenges on behalf of honest TAGs, or from the adversary.
(cid:15) Generates responses on behalf of honest TAGs.
(cid:15) Decides which TAG responses are authentic on behalf of the Veri(cid:2)er.
Note that because we are assuming that the generic RFID protocol is UC secure, the function f ((cid:1); (cid:1); (cid:1)) is
pseudo-random, while h((cid:1); (cid:1)) satis(cid:2)es the conditions (1) and (2) in Section 3. To prove that (cid:25) is secure we
show that each behavior securely provided by F can also be achieved in the real-world through (cid:25). That is,
we simulate the operation of (cid:25) with access to F by the real-world operation of the protocol that does not
rely on F. We summarize the key features of (cid:25), that represent the real-world protocol runs:
(cid:15) The challenges of the Veri(cid:2)er are received through a READER.
(cid:15) The responses of the TAGs are mediated by a READER, that may be adversarial.
(cid:15) The adversary controls the adversarial READERs and may, modify or interrupt any channels at will(cid:151)but
cannot temper with the contents of the channels connecting honest READERs to the Veri(cid:2)er.
The main difference between the real- and ideal-world is that the values produced by F are generated as
truly random, as opposed to pseudo-random. More precisely, at the beginning of the simulation, F choses
a special identity id(cid:3) among the set of all possible identities. Later, whenever (cid:25) produces a response on
behalf of the tag with identity id, and on input the challenge c, the functionality F generates a random
value r, and checks if it has an entry (function value; id; c; (r; F )) in its database, for any F in the output
space of f. If so, F sets (cid:26)   (r; F ). If not, it selects a new value F at random (in the output space of f),
and sets (cid:26)   (r; F ), entering (f unction value; id; c; (cid:26)) into its database. It then selects H according to
the probabilistic ensemble fh(id(cid:3); (cid:1))g, and enters the record (identity; id; r; H) in its database. Finally, it
returns the values (cid:26); H as the tag’s response in the ideal-world.
A value (cid:26); H is authentic (against challenge c) if there is a record of it in the database; more precisely,
7
if there are entries (identity; id00; r00; H 00), and (function value; id0; c0; (r0; F 0)), with id00 = id0, r00 = r0,
H = H 00, c = c0, and (cid:26) = (r0; F 0). Observe that this speci(cid:2)cation of F makes several security guaran-
tees obvious: unforgeability, freedom from replays and substitutions, privacy (unlinkable anonymity), etc.
Indeed, violating such properties requires the adversary to guess randomly produced values.
Since the compiled protocol (cid:25) may fail in a variety of ways we must ensure that no combination of
such failures may enable the environment Z to distinguish between real and ideal protocol runs (with non-
negligible probability). Below we identify some signi(cid:2)cant ways that could cause the real and ideal-world
protocols to differ:
1. A match (valid response) occurs in the real-world, while in the ideal-world the match is unsuccessful.
2. A mismatch (invalid response) occurs in the real-world, while in the ideal-world the match is successful.
We get Case 1 when the adversary in the real-world is able to modify some values in the channels (via
re(cid:3)ection, reply, modi(cid:2)cation, modi(cid:2)cation, etc), forcing the Veri(cid:2)er to accept responses not produced by