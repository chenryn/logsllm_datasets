exec, although SELinux also allows domain changes to be
explicitly requested5. Compartmented Mode Workstations
(CMW) allows labels to “ﬂoat up” to higher levels rather
than deny access [5] and limits the amount they can ﬂoat up
by specifying the maximum level. LOMAC prevents core
ﬁlesystem components from being “infected” by untrusted
sources [16] by reducing a process’ permissions after read-
ing an untrusted source.
A project with similar goals to KernelSec was DTAC
which added constraints to the system to provide a more
dynamic TE [45, 44]. DTAC was the ﬁrst OS-based autho-
rization model which could represent dynamic separation of
duty.
4http://cr.yp.to/qmail
5http://www.nsa.gov/selinux/list-archive/0411/9712.cfm
5. Conclusion
Sandboxes have traditionally been used to attenuate the
privileges of executables and thereby implement least priv-
ileges, thus reducing the dangers posed by applications.
Sandboxes provide a one-way protection mechanism. Pro-
cesses inside a sandbox have very limited visibility outside
of the sandbox but the sandbox and its contents are visible
to processes external to it. Hence, a process outside a tra-
ditional sandbox could copy a ﬁle which was downloaded
from an untrusted source, after which the sandbox protec-
tions would be lost. This is desirable to allow a user to
incorporate these outside entities into her activities.
These ﬁles pose a danger to applications which later
read them. On the other hand, data produced internally
by trusted mechanisms should be given greater permissions
than those which originate from untrusted sources. Yet tra-
ditional sandboxes are oblivious to this distinction.
We introduce dynamic sandboxes, give a sample speciﬁ-
cation in LEAP, and describe their implementation in Ker-
nelSec, a kernel-level authorization model implemented in
the Linux Kernel. Using KernelSec we track (via labels)
those ﬁles which come from untrusted sources and using
the dynamic domain transitions of KernelSec, automatically
enter a dynamic sandbox when an interpreter reads an un-
trusted entity.
The mechanisms used in KernelSec to implement dy-
namic sandboxes are general purpose and policy neutral;
these mechanisms have uses other than for constructing
sandboxes. This generality is important in ﬁnding a com-
pact set of building blocks with which to protect systems.
The construction of effective mechanisms to provide the
authorization needed so that programs execute with least
permissions is not difﬁcult. But providing such mecha-
nisms with sufﬁciently low complexity that they are used,
and used correctly, is indeed challenging. We believe that
dynamic protections which adapt to the actions of the users
and suitable high-level speciﬁcations are keys for dramat-
ically reducing the complexity of using these protections,
and thus can usher in a new generation of authorization
models which strongly protects the system and its users.
Acknowledgements
Xpdf, thunderbird, and bash were ported by Saurabh
Abichandani and Shuxia Feng. We would like to thank
Saurabh Abichandani, Shuxia Feng, Jorge Hernandez-
Herrero for their helpful comments. We would also like
to thank the anonymous reviewers for their feedback.
References
[1] A. Acharya and M. Raje. MAPbox: Using parameterized
behavior classes to conﬁne untrusted applications. In Pro-
ceedings of the 9th USENIX Security Symposium, Denver,
Colorado, Aug. 2000. USENIX.
[5] J. L. Berger, J. Picciotto, J. P. L. Woodward, and P. T.
Cummings. Compartmented mode workstation: Prototype
IEEE Transactions on Software Engineering,
highlights.
16(6):608–618, 1990. Special Section on Security and Pri-
vacy.
[6] A. Berman, V. Bourassa, and E. Selberg. TRON: Process-
speciﬁc ﬁle protection for the UNIX operating system. In
Proceedings of the USENIX 1995 Technical Conference,
pages 165–175, New Orleans, LA, USA, Jan. 16–20 1995.
[7] K. Biba. Integrity considerations for secure computer sys-
tems. Technical Report TR-3153, MITRE Corp, Bedford,
MA, 1977.
[8] W. E. Boebert and R. Kain. A practical alternative to hierar-
chical integrity policies. In 8th National Computer Security
Conference, pages 18–27, 1985.
[9] D. Brumley and D. X. Song. Privtrans: Automatically parti-
tioning programs for privilege separation. In USENIX Secu-
rity Symposium, pages 57–72, 2004.
[2] L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and
S. A. Haghihat. Practical domain and type enforcement for
In Proc. IEEE Symp. Security and Privacy, pages
UNIX.
66–77, Oakland, CA, 1995.
[3] D. Balfanz and D. R. Simon. WindowBox: A simple secu-
rity model for the connected desktop. In Proceedings of the
4th USENIX Windows Systems Symposium (WSS-00), pages
37–48, Berkeley, CA, Aug. 3–4 2000. The USENIX Asso-
ciation.
[4] D. E. Bell and L. J. LaPadula. Secure computer systems:
Mathematical foundations and model. Technical Report
M74-244, Mitre Corporation, Bedford MA, 1973.
[10] H. Chen, D. Wagner, and D. Dean. Setuid demystiﬁed. In
Proc. of the USENIX Security Symposium. USENIX, 2002.
[11] C. Cowan, S. Beattie, G. Kroah-Hartman, C. Pu, P. Wagle,
and V. Gligor. Subdomain: Parsimonious security server. In
14th Systems Administration Conference (LISA 2000), pages
355–367, New Orleans, LA, 2000.
[12] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen.
In IEEE
A safety-oriented platform for web applications.
Symposium on Security and Privacy, pages 350–364. IEEE
Computer Society, 2006.
[13] J. Dike. User-mode Linux.
In USENIX, editor, Proceed-
ings of the 5th Annual Linux Showcase and Conference.
USENIX, Nov.5–10 2001.
[14] B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, I. Pratt,
A. Warﬁeld, P. Barham, and R. Neugebauer. Xen and the art
of virtualization. In In Proceedings of the ACM Symposium
on Operating Systems Principles, October 2003., 2003.
[15] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey,
D. Ziegler, E. Kohler, D. Mazi`eres, F. Kaashoek, and
R. Morris. Labels and event processes in the asbestos oper-
ating system. SIGOPS Oper. Syst. Rev., 39(5):17–30, 2005.
[16] T. Fraser. LOMAC–low water-mark mandatory access con-
trol for Linux. In Proc. of the USENIX Security Symposium,
Washington D.C., 1999.
[17] V. Ganapathy, T. Jaeger, and S. Jha. Retroﬁtting legacy
code for authorization policy enforcement. Technical Report
1544, University of Wisconsin–Madison, Computer Science
Department, nov 2005. Decscribes semi-automatic tech-
niques for retroﬁtting an X-server with a mechanism which
can.
[18] T. Garﬁnkel. Traps and pitfalls: Practical problems in in
system call interposition based security tools. In Proc. Net-
work and Distributed Systems Security Symposium, Febru-
ary 2003.
[19] T. Garﬁnkel, B. Pfaff, and M. Rosenblum. Ostia: A dele-
gating architecture for secure system call interposition. In
Proc. Network and Distributed Systems Security Sympo-
sium, February 2004.
[20] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A
secure environment for untrusted helper applications (con-
In Proc. of the USENIX Security
ﬁning the wily hacker).
Symposium, San Jose, Ca., 1996.
[21] S.
Ioannidis, S. M. Bellovin, and J. Smith.
Sub-
operating systems: A new approach to application se-
curity. http://www.research.att.com/ smb/papers/subos.ps,
Nov. 2001. draft, sandbox.
[22] K. Jain and R. Sekar. User-level infrastructure for system
call interposition: A platform for intrusion detection and
conﬁnement. In NDSS, 2000.
[23] K. Kahley, M. Radhakrishnan, and J. A. Solworth. Factoring
high level information ﬂow speciﬁcations into low level ac-
cess controls. In IEEE Workshop of Information Assurance,
Apr. 2006.
[24] P.-H. Kamp and R. N. M. Watson. Jails: Conﬁning the om-
nipotent root. In SANE 2000. NLUUG, 2000.
[25] G. S. Kc and A. D. Keromytis.
e-nexsh: Achieving an
effectively non-executable stack and heap via system-call
In ACSAC ’05: Proceedings of the 21st Annual
policing.
Computer Security Applications Conference, pages 286–
302, Washington, DC, USA, 2005. IEEE Computer Society.
[26] T. Khatiwala, R. Swaminathan, and V. N. Venkatakrish-
nan. Data sandboxing: A technique for enforcing conﬁden-
In ACSAC ’06: Proceedings of the 22nd
tiality policies.
Annual Computer Security Applications Conference, pages
223–234, Washington, DC, USA, 2006. IEEE Computer So-
ciety.
[27] A. Kurchuk and A. D. Keromytis. Recursive sandboxes: Ex-
In SEC, pages
tending systrace to empower applications.
473–488, 2004.
[28] W. Li, L. chung Lam, and T. cker Chiueh. How to automat-
ically and accurately sandbox microsoft iis. In ACSAC ’06:
Proceedings of the 22nd Annual Computer Security Appli-
cations Conference, pages 213–222, Washington, DC, USA,
2006. IEEE Computer Society.
[29] Z. Liang, V. N. Venkatakrishnan, and R. Sekar.
Isolated
program execution: An application transparent approach for
executing untrusted programs. In ACSAC, pages 182–191,
2003.
[30] A. C. Myers and B. Liskov. Protecting privacy using the de-
centralized label model. Software Engineering and Method-
ology, 9(4):410–442, 2000.
[31] D. S. Peterson, M. Bishop, and R. Pandey. A ﬂexible
containment mechanism for executing untrusted code.
In
USENIX, editor, Proc. of the USENIX Security Symposium,
pages 207–225, Berkeley, CA, USA, 2002. USENIX.
[32] N. Provos. Improving host security with system call poli-
cies. In Proceedings of the 12th USENIX Security Sympo-
sium, pages 257–272. USENIX, Aug. 2003.
[33] N. Provos, M. Friedl, and P. Honeyman. Preventing privi-
lege escalation. In Proceedings of the 12th USENIX Security
Symposium, pages 231–242. USENIX, Aug. 2003.
[34] M. Radhakrishnan and J. A. Solworth. Application secu-
rity support in the operating system kernel. In ACM Sym-
posium on InformAtion, Computer and Communications Se-
curity (AsiaCCS’06), pages 201–211, Taipei, Taiwan, Mar.
2006.
[35] D. Safford, M. Zohar, and R. Sailer. EVM, SLIM, IMA.
http://lwn.net/Articles/160126/, nov 2005.
[36] R. Sailer, T. Jaeger, E. Valdez, R. C´aceres, R. Perez,
S. Berger, J. L. Grifﬁn, and L. van Doorn. Building a MAC-
based security architecture for the Xen open-source hyper-
visor. In ACSAC, pages 276–285. IEEE Computer Society,
2005.
[37] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
IEEE Com-
Youman. Role-based access control models.
puter, 29(2):38–47, 1996.
[38] J. S. Shapiro and S. Weber. Verifying the EROS conﬁne-
In Proc. IEEE Symp. Security and Pri-
ment mechanism.
vacy, pages 166–176, 2000.
[39] S. Smalley, C. Vance, and W. Salamon.
Implementing
SELinux as a Linux security module. Report #01-043, NAI
Labs, Dec. 2001. Revised April 2002.
[40] J. A. Solworth. Approvability. In ACM Symposium on In-
formAtion, Computer and Communications Security (Asi-
aCCS’06), pages 231–242, Taipei, Taiwan, Mar. 2006.
[41] J. A. Solworth and R. H. Sloan. Decidable administrative
controls based on security properties, 2004. Available at
http://www.rites.uic.edu/ solworth/kernelSec.html.
[42] J. A. Solworth and R. H. Sloan. A layered design of discre-
tionary access controls with decidable properties. In Proc.
IEEE Symp. Security and Privacy, pages 56–67, 2004.
[43] J. A. Solworth and R. H. Sloan. Security property-based
administrative controls. In Proc. European Symp. Research
in Computer Security (ESORICS), volume 3139 of Lecture
Notes in Computer Science, pages 244–259. Springer, 2004.
[44] J. Tidswell and T. Jaeger. An access control model for sim-
plifying constraint expression. In Proc. ACM Conference on
Computer and Communications Security (CCS), pages 154–
163, 2000.
[45] J. F. Tidswell and T. Jaeger. Integrated constraints and in-
heritance in DTAC. In Proc. of the ACM Workshop on Role-
Based Access Controls (RBAC), pages 93–102, 2000.
[46] C. Waldspurger. Memory resource management in VMware
ESX server. In Fifth Symposium on Operating Systems De-
sign and Implementation, Dec. 2002.
[47] R. Watson. TrustedBSD: Adding trusted operating system
In USENIX Technical Conference,
features to FreeBSD.
Boston, MA, 2001.
[48] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-
Hartman. Linux Security Modules: General security support
for the Linux Kernel. In Proc. of the USENIX Security Sym-
posium, San Francisco, Ca., 2002.