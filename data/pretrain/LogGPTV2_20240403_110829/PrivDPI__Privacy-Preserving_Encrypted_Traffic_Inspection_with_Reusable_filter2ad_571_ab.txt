anyone but the session endpoints. There are two common
solutions to this challenge. The ﬁrst is to extend host based
ﬁrewalls to gain access to the data before being encrypted:
this can be implemented through integration with the host
operating system. We will refer to this solution as the client-
side ﬁrewall approach. The second solution, usually deployed
by large ﬁrms, is to operate a middlebox that serves as a
proxy between any internal user PC and any external web
server. The implementation of such a solution requires to
conﬁgure (trick) the user PCs to identify the proxy as the
server and establish an encrypted session with it rather than
with the server.
However, both the distributed ﬁrewall as well as the proxy
architecture expose the user data to 3rd parties, namely
the ﬁrewall producer, the proxy vendor or the network
operator, possibly violating the user privacy. In addition,
the inspection rules, which are the intellectual property of
security researchers or ﬁrms, might be extracted at the host
or the proxy, undermining their effectiveness and proﬁt.
B. SGX
Intel Software Guard Extensions (Intel SGX) [8], [15], [17],
[30] are new CPU instructions which allow applications to
manage private regions of code and data. That is, using SGX,
an application can run in a protected environment, the so-
called enclave, secure from malware or the inspection by the
computer administrators.
There is no need to encrypt the protected portion of an
application for distribution. Before the enclave is built, the
enclave code and data is free for inspection and analysis.
When the protected portion is loaded into an enclave, its code
and data is measured. An application can prove its identity
to a remote party and be securely provisioned with keys and
credentials. The application can also request an enclave and
platform speciﬁc key that it can use to protect keys and data
that it wishes to store outside the enclave. In addition to the
security properties, the enclave environment offers scalability
and performance associated with the execution on the main
CPU of an open platform.
IV. PRIVACY PRESERVING INSPECTION
This section shows that the design goals and requirements
derived above can actually be met, assuming the availability
of a trusted hardware. In particular, this section presents our
Privacy Preserving Inspection architecture, short PRI. PRI
allows the inspection, and if considered harmful, possibly
prevention, of encrypted trafﬁc while guaranteeing that no
information about the trafﬁc is leaked from the inspecting
device, and that inspection rules are not revealed to the
operator of the device nor the trafﬁc generator.
In a nutshell, the idea underlying PRI is to decouple
and separate the different roles (e.g., users, administrators,
Figure 1.
Setup of the PRI system components. The PRI process is
conﬁgured to inspect user trafﬁc according to security rules inserted by the
policy issuer. The process is secured and ensures conﬁdentiality of trafﬁc
and rules. Keys and rules are stored safely in the PRI storage.
security company) by deﬁning an interface between them and
supporting veriﬁcation. In order to achieve this deoupling,
PRI relies on a single device (such as Intel SGX or ARM
TEE) which decrypts trafﬁc from the users, applies the desired
security rules, and when needed raises alerts or drops the
trafﬁc, without leaking information about the user trafﬁc
nor the applied rules, to the roles which are not allowed to
have this information. Interestingly, a single trusted box is
sufﬁcient for PRI: no hardware modiﬁcations are required
on the user side. Moreover, an important aspect of PRI is
that the user side agent and the enclaved system can be
open-source: thus, the users and the research community
can and should verify its privacy preserving property. The
attestation allows the agent to verify that it communicating
with the veriﬁed system code.
A. Setting Up PRI
Let us ﬁrst discuss the setup of PRI (cf Figure 1). We
describe it for the enterprise intrusion detection scenario, but
it is easy to adapt it to ISP outsourcing scenarios. The PRI
system consists of the user’s communication device, e.g., a
personal computer (PC) (or smartphone, laptop, etc.) and the
PRI server which need to be set up as follows. On the user
side, we simply need to install a PRI agent at the encryption
layer of the OS or speciﬁc application (e.g., web browser).
The PRI agent is conﬁgured with a user key, kU , which is
securely transmitted (through attestation) to the enclaved PRI
system. In addition the agent is installed in a way that allow
it to gain the key, kS, of every encrypted session S, that
uses the encryption layer enabling it to securely send it to
the PRI system.
The setup also involves conﬁguring the PRI server with
the rules (also called the policy) that need to be checked
against the trafﬁc. Rules can be conﬁgured by multiple policy
issuers, each of them can connect securely to the PRI process,
validating its secure execution (attestation) and sending the
rules. As a result, the PRI process stores the rules in the
secured storage, to be used when a user trafﬁc needs to be
inspected.
Figure 2. The PRI system inpects user session using the key sent by the
agent. Matches are saved in a secured storage and alerts are sent to the
corporate SIM server about detected anomalies.
B. Operating PRI
Once the system has been set up, the registered users’
trafﬁc can be inspected. Inspection is carried in the following
steps, see also Figure 2.:
1) An encrypted session is established between the appli-
(unregistered)
cations of the user PC and an external
or internal PC.
2) The user PC connects to the PRI process (at the PRI
server), and sends to it the session key encripted by
the shared user key, i.e., [kS]kU .
3) The session trafﬁc is duplicated and processed by the
PRI process.
4) The session trafﬁc is decrypted, using the session key.
5) The session data (clear text) is inspected with the rules
conﬁgured in the system.
6) In case part of the data matches a rule, this part is
securely stored in the PRI storage and an alert (con-
taining the rule identiﬁer) is reported the corporate
Security Information Management (SIM) server.
Note that in case of misconﬁguration, or malicious activity
in the user PC that results in decryption failure at the PRI
system, a special alert is reported.
There exists another more subtle threat for the conﬁden-
tiality of the trafﬁc: even if the trafﬁc cannot be inspected,
the reported matches over trafﬁc leak information. In order
to prevent an attacker from abusing the security rules to learn
about private user data (e.g., matching every possible byte
or word), the PRI system allows each user to request the
parts of his or her trafﬁc which have been matched by the
inspecting device, and thus to learn about and detect the use
of abnormal matching rules. To ensure this, our system uses a
special viewer application which connects to the PRI process,
authenticates as the user and issues the request. As a result,
the PRI process retrieves the user’s matches from the secured
storage and sends them to the viewer app (cf Figure 3.).
In addition, the PRI system can securely inspect static (e.g.,
likelihood of match for common words) and dynamic (e.g.,
Figure 3. The PRI system includes a special viewer app which allows
users to verify that matching rules are not abused to violate conﬁdentiality
of their trafﬁc.
average number of hits per trafﬁc byte) properties of the
rules, thereby detecting abnormal rule sets. Also note that
inferring trafﬁc content from matches is practically difﬁcult
in the prevention operation mode of the PRI system, since
the user session is automatically dropped as a response to
the ﬁrst match.
The PRI system not only supports intrusion detection but
also intrusion prevention, see Figure 4: The main difference
from detection, is that for prevention, the outcome of the
inspection determines whether the session trafﬁc is forwarded
through the PRI system, or dropped (in case of a match).
C. A Note on Implementation
We started experimenting with an emulated software
version of the SGX framework. However, as the market
introduction of the actual secure hardware is delayed, our
prototype is simple and still contains untrusted parts. Nev-
ertheless, in the following, we report on some preliminary
insights.
On the user side, we need to extract encrypted session keys
and securely transfer them to the PRI server. This can be
performed in multiple ways. For example, at the application
level, applications can report their session keys (as browsers
support [30]) and a PRI agent then sends them to the PRI
server. Alternatively, applications can be extended (e.g., using
a browser plugin) to directly send their key to the PRI server.
A third approach is to modify encryption services offered
by the operating system, to send the used keys to the PRI
server.
On the server side, an inspection program needs to be
executed in an enclaved environment, using the reported
user session keys. We argue that adjusting existing IDS
systems to our needs requires minor code modiﬁcations: the
computations can be performed in user mode and the memory
consumption can be optimized, which should make it easy
Figure 4.
The PRI system can also be used for prevention, not only
detection. In this case, depending on the result of the inspection, it is
decided whether trafﬁc can be forwarded or should be dropped.
to enclave them. Today there exist several good open-source
IDSs such as Snort [27], Bro [21] and Suricata [28], which
we suggest to employ.
Given a selected existing open-source IDS system, we
propose the following high level design concepts for the
PRI server application: (1) The decryption of trafﬁc can be
handled by a new enclaved module that pushes the plain text
outcome to the enclaved and modiﬁed IDS system. (2) The
enclaved IDS system is reduced to only handle protocols
that are known to be encrypted (e.g., HTML), or to inspect
rules that need to be hidden, thereby reducing the memory
footprint which is limited in the enclaved environment. (3) In
parallel to the enclaved IDS, a standard (not enclaved) IDS
is operated for non-encrypted trafﬁc and with open-source
rules, utilizing the standard less restricted environment.
In our prototype, we attend to the problem of human
based data leakage, and focus on the decryption of common
webmail services. We noticed that this trafﬁc is mainly
composed of (encrypted) HTTP/2 [4] trafﬁc which uses
HPACK compression. This protocol is not supported by the
IDSs we examined, and therefore requires special adapters.
In general, the code of both the client and server side
of the PRI system should be fully open, allowing the
research community to examine them and verify their privacy
preservation properties. Combining the veriﬁcation of the
code with the attestation of the server by the client constitutes
the basis of the system trust.
V. USE CASES
We believe that the ideas underlying PRI can be interesting
in several contexts and beyond the standard enterprise
network security scenario we discussed in this paper so
far. In the following, three examples are discussed in more
detail. A comparison is given in Table I.
A. Enterprise Security and Insider Threats
Email and cloud services (e.g., Google Docs, storage, etc.)
are indispensable but introduce a risk for many organizations
Enterprise Security and Insiders Outsourced Security
Entities
Clients
PRI Operators
Rule Providers
employees
admins
admins + external
Use Case
enterprise
external
external
Anti-Terror Intelligence
civilians / web hosts
ISPs
governments
Table I
COMPARISON OF PRI USE CASES.
today. In particular, such services can be used by a malicious
insider to steal intellectual property or sensitive company
information. Indeed, insider attacks pose some unique chal-
lenges for security administrators. In general, it can be
challenging to conﬁgure an intrusion detection system and
deﬁne a good rule set to detect internal attacks: different users
should have access to and use many different services, servers,
and systems for their work. However, over the last years,
several interesting IDS-based solutions have been developed
to detect insider threats [7], e.g., searching for conﬁdential
documents and watermarks in private communications [26].
Our approach is directly applicable to these systems.
Even in scenarios where IDS-based systems may be
insufﬁcient, PRI can be attractive: PRI is also applicable
in more general security solutions, for example systems
which are based on machine learning or anomaly detection
of online or ofﬂine trafﬁc data, and which can consist of an
open-source engine and a possibly conﬁdential conﬁguration.
More concretely, advanced methods to detect insider attacks
usually consider a wider context when processing network
events, therefore requiring to store and query the entire event
history [16], and include machine learning algorithms [5]
(e.g., anomaly detection). Our design can be extended to
support these methods, by utilizing the secure storage to save
the events history and to execute the advanced inspection
as an enclaved process that analyzes the history instead of
the current trafﬁc. In these cases, our extended system also
allows to split the open source inspection engine from the
inspection rules, e.g., the big data queries or the machine
learning parameters and ﬁlters, while supporting very general
notions of privacy [20], [18], [19].
B. Network Outsourcing
Another use case arises in the context of network out-
sourcing: We currently witness the trend that enterprises
wish to outsource their cyber security logic or even the entire
network administration to an external company experienced
in this ﬁeld. Translating this scenario to our framework, the
enterprise (or any of its employees and their PCs) constitutes
the client, executing the PRI agent, and the external company
operates the PRI server, executing the enclaved (and open-
source) PRI software.