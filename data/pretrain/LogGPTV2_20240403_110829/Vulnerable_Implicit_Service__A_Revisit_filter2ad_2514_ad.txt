though this type occupies only 12.6% in “Old Apps”, it involves 23
di(cid:130)erent services, and 2 dynamic services whose “action” a(cid:138)ributes
are extracted from a received message, e.g., a received intent.
implicit service invocation might su(cid:130)er hijacking a(cid:138)acks when the
app’s tar❕etSdkV ersion is lower than 21, or else it will cause the
application to crash (i.e., DoS a(cid:138)acks). And most of the resolved
service invocations also su(cid:130)er a(cid:138)acks, since they are usually used
when the package names of the services are di(cid:129)cult to specify. Fig-
ure 7 shows that 100% and 94.34% resolved service invocations are
vulnerable in the “Old Apps” and “New Apps”, respectively. Among
the 53 resolved service invocations in the “New Apps”, only 3 are
not vulnerable, as they verify the package name when adopting the
results returned by queryIntentServices() and resolveService ().
Figure 6: Increment of Resolved Service Invocations.
Figure 7: Distribution of the Resolved Service Invocations
In addition, we observe that resolved service invocations are used
more frequently in the “New Apps”, and most of them are used
to determine the package name for the other third party services.
As shown in Figure 6, though the number of vulnerable service
invocations reduces from 643 to 112, the number of resolved ser-
vice invocations increases from 17 to 53, where 14 (82.35%) and 42
(79.2%) of the resolved service invocations are targeting at the other
third party services for “Old Apps” and “New Apps”, respectively.
When it is di(cid:129)cult to determine the package name for those ser-
vices, queryIntentServices() and resolveService() are called more
frequently to help obtain the matching package name automati-
cally, especially a(cid:137)er the implicit service invocation is forbidden.
Among the 53 resolved service invocations in “New Apps”, 14 are
converted from implicit service invocations in “Old Apps”, 8 are
residue resolved service invocations from “Old Apps”. In addition,
the number of service types involving resolved service invocations
increases from 4 to 17, and the number of involved applications
increases from 16 to 31.
4.3 Vulnerable Service Invocations In “New
Apps”
In this section, we discuss the remaining vulnerable service invo-
cations in the “New Apps”, including implicit service invocations
and vulnerable resolved service invocations. In total, 62 implicit
service invocations and 50 vulnerable resolved service invocations
are involved, and the a(cid:138)acks could be divided into two categories,
i.e., service hijacking a(cid:138)acks and denial of service a(cid:138)acks. (cid:140)e
Service Hijacking Attacks.
Implicit service invocations
are vulnerable to hijacking a(cid:138)ack when the application’s
tar❕etSdkV ersion is lower than 21. Resolved service invocations
are also vulnerable to hijacking a(cid:138)ack. Since the ranking rules of
queryIntentServices(), bindService() and startService() could be ma-
nipulated by the a(cid:138)ackers as described in Section 2.3. (cid:140)e statistics
data of the “New Apps” shows that it is still easy for an a(cid:138)acker to
launch the service hijacking a(cid:138)ack. Among the 1390 “New Apps”,
722 applications export 2058 services that contain at least one Intent
Filter, which may be started through implicit intent. 4.6% appli-
cations contain reachable implicit or resolved service invocation
codes. Among the 2058 exported services, only 685 services set
the priority a(cid:138)ributes in at least one Intent Filter, and only 72 ser-
vices set the category to Intent.CATEGORY DEFAULT. Also, among
the 685 services, 672 (98.1%) services set the priority value to -500
which is lower than the default value, and only 2 services set to the
highest value 1000.
We (cid:128)nd 57 service invocations in “New Apps” vulnerable to
service hijacking a(cid:138)acks, and 22 service types and 36 applications
are involved in these vulnerable service invocations. 38 of the 57
are implicit service invocations with the apps’ tar❕etSdkV ersion
lower than 21, and the remaining 19 are resolved service invoca-
tions, in which the developers simply bind/start the (cid:128)rst service
or all services returned by queryIntentServices(). In addition, we
(cid:128)nd another 31 resolved service invocations that can be hijacked if
queryIntentServices() API only returns one matching service that is
installed by the a(cid:138)acker. When more than one matching services
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1058Table 2: Sampled Service Hijacking Attacks in “New Apps”
AppName
jp.nav*
Involved Service
Consequence
com.iman*
com.tabta* Google In-App Purchase
com.pico*
mobi*
com.win* Samsung In-App Purchase
VPN Connecting
VPN Connecting
com.cis*
com.zen*
com.fox* Google Messages Transfer
com.syg*
Sensitive Info Leakage
e.g. bank accounts.
Installations
500,000,000 - 1000,000,000
100,000,000 - 500,000,000
1,000,000 - 5,000,000
500,000 - 1,000,000
1,000,000 - 5,000,000
Sensitive Info Leakage
e.g. VPN Login Credentials.
Same As Above
Sensitive Info Leakage
10,000,000 - 50,000,000
1,000,000 - 5,000,000
500,000 - 1,000,000
5,000,000 - 10,000,000
1,000,000 - 5,000,000
Triggerring Event
App Startup
App Startup
(First Time)
App Startup
(On Samsung Platform)
App Startup
User Login
App Startup
User Login
are returned, the application will either throw an exception or stop
starting/binding the service. Table 2 lists several sampled service
hijacking a(cid:138)acks in “New Apps”. For example, in-app purchasing
service is an important service that provides a simple interface for
sending in-app billing requests and managing in-app billing transac-
tions. Several popular applications might su(cid:130)er in-app purchasing
service hijacking a(cid:138)acks, so it may cause sensitive information
such as bank accounts being leaked. Hijacking the VPN connecting
services might cause leakage of sensitive information such as VPN
login credentials and data transferred through VPN. As a service
used to transfer data between mobile devices and servers, Google
Messages Transfer also su(cid:130)ers sensitive information leakage threat.
As shown in the column 4 of Table 2, since all these applications
are very popular in the Google Play Store, more than 500,000,000
users may be involved. (cid:140)e last column depicts when will these vul-
nerable invocations be triggered, and 5 of them could be triggered
when the applications start up.
In addition to the mentioned a(cid:138)acks in Table 2, all service hijack-
ing a(cid:138)acks will make it easier for the a(cid:138)ackers to launch the GUI
phishing a(cid:138)acks [9]. (cid:140)rough service hijacking, the a(cid:138)acks could
obtain the running state information of an application and could
then pop up the phishing user interface accordingly. For example,
a(cid:137)er an application named “de.a(cid:129)*” being hijacked, the a(cid:138)acker
could pop up a phishing login UI to steal user’s login credential.
Denial of Service Attacks. Since current implicit service for-
bidden policy enhances service security at the expense of sacri(cid:128)cing
service availability, it introduces a new type of denial of service
a(cid:138)acks. First, all direct implicit service invocations in the applica-
tions with tar❕etSdkV ersion higher than 21 may cause applications
crash. Second, when queryIntentServices() returns a list of more
than one services matching to the speci(cid:128)c implicit intent, we (cid:128)nd
that the developers have three choices to process the list which
make it vulnerable to DoS a(cid:138)acks. (cid:140)e (cid:128)rst one is simply throwing
an exception that lead to application crash. (cid:140)e second one is to
invoke bindService() or startService() with a null intent. (cid:140)e third
one is to stop invoking the service. When running on Android 5.0
and higher, the (cid:128)rst two choices will crash the app.
In total, we (cid:128)nd that 55 service invocations could cause DoS
a(cid:138)acks in the “New Apps”, where 28 applications are involved. In
addition, 53 invocations will cause application crash, and only 2
are choosing service ignorance. Among the 55 invocations, 24 are
caused by implicit service invocations, and other 31 are caused by
improper processing of the resolved service invocations. If invo-
cation of the service is triggered by entry point functions of an
exported component, such as onStart() of an exported Activity com-
ponent, the DoS a(cid:138)acks could be carried out through manipulating
another cra(cid:137)ed app. Otherwise, the DoS a(cid:138)acks could only be
triggered when users make speci(cid:128)c operations themselves in the
victim app, such as click a speci(cid:128)c user interface.
4.4 Reasons for Implicit Invocation Residue
As described in Section 4.2, one major reason for the residue vul-
nerable service invocations is the di(cid:129)culty on determining the
package names for the various third party services, which cause
more frequent usage of resolved service invocations in “New Apps”.
However, slow adoption of the forbidden policy is another impor-
tant reason for the residue vulnerable service invocations. For
example, 62 of the 112 vulnerable invocations are residue implicit
invoations, which include 28 Google services, 11 the same origin
services and 23 the other third party services. 79.03% residue ones
remain implicit since they are invoked through outdated SDKs or
the reuse of outdated sample codes, in which the services are in-
voked implicitly. (cid:140)ere are some SDKs in which the services are
invoked implicitly in the latest versions. In this section, we give
a detailed analysis on the implicit invocations to help understand
the main reasons for these residue invocations, especially the in-
vocations targeting at the third party services, including Google
and the other services, which occupy 82.26% of the total residue
implicit service invocations.
We (cid:128)nd that outdated SDKs and sample codes are two primary
reasons for the implicit invocations of Google services. Table 3
shows the 5 di(cid:130)erent services involved for the 28 Google service in-
vocations. (cid:140)e (cid:128)rst and last columns depict the “Action” a(cid:138)ributes
corresponding to the services and applications providing the
services, respectively. “Implicit Percentage” gives the percentage
of the implicit invocations among total ones for each service.
“Implicit Reason” shows the causes of the residue implicit service
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1059Table 3: Implicit Invocations of Google Services in “New Apps”.
Action
com.google.android.gms.*
com.android.vending.billing.-
MarketBillingService.*
com.android.vending.billing.-
InAppBillingService.*
com.android.vending.licensing.*
com.google.android.c2dm.*
Implicit Percentage
6.9%
50%
1.15%
54.55%
1.17%
Implicit Reason
Outdated SDKs
Misleading Sample Codes
Outdated Sample Codes
Outdated SDKs
Outdated SDKs
App Name
Google Play Services
Google Play Store
Google Play Store
Google Play Store
Google Services Framework
are
invocation of
service
“com.google.android.vending.licensing”
invocations. For example, the Google Play Services invoked
through actions “com.google.android.gms.*” are pervasively
used by Android Apps, which contain many important Google