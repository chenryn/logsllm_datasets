### Vulnerable Service Invocations in "Old Apps" and "New Apps"

#### Overview
In the "Old Apps," a specific type of service invocation, although only accounting for 12.6% of the total, involves 23 different services and 2 dynamic services. The "action" attributes of these dynamic services are extracted from received messages, such as intents. Implicit service invocations can be vulnerable to hijacking attacks if the app's `targetSdkVersion` is lower than 21, or they may cause the application to crash (DoS attacks). Resolved service invocations, which are often used when package names are difficult to specify, also face similar vulnerabilities.

- **Vulnerability in Resolved Service Invocations:**
  - In "Old Apps," 100% of resolved service invocations are vulnerable.
  - In "New Apps," 94.34% of resolved service invocations are vulnerable.
  - Among the 53 resolved service invocations in "New Apps," only 3 are not vulnerable because they verify the package name using `queryIntentServices()` and `resolveService()`.

- **Usage Frequency:**
  - Resolved service invocations are more frequent in "New Apps."
  - Most resolved service invocations are used to determine the package name for third-party services.
  - The number of resolved service invocations increased from 17 to 53, with 82.35% and 79.2% targeting third-party services in "Old Apps" and "New Apps," respectively.

- **Conversion and Increase:**
  - 14 of the 53 resolved service invocations in "New Apps" are converted from implicit service invocations in "Old Apps."
  - 8 are residue resolved service invocations from "Old Apps."
  - The number of service types involving resolved service invocations increased from 4 to 17.
  - The number of involved applications increased from 16 to 31.

#### Vulnerable Service Invocations in "New Apps"

This section discusses the remaining vulnerable service invocations in "New Apps," including both implicit and resolved service invocations. In total, 62 implicit service invocations and 50 vulnerable resolved service invocations are identified. Attacks can be categorized into service hijacking and denial of service (DoS) attacks.

- **Service Hijacking Attacks:**
  - **Implicit Service Invocations:** Vulnerable to hijacking attacks if the `targetSdkVersion` is lower than 21.
  - **Resolved Service Invocations:** Vulnerable due to manipulable ranking rules in `queryIntentServices()`, `bindService()`, and `startService()`.
  - **Statistics:**
    - 722 out of 1390 "New Apps" export 2058 services with at least one Intent Filter.
    - 4.6% of applications contain reachable implicit or resolved service invocation codes.
    - Only 685 services set priority attributes in at least one Intent Filter, and only 72 services set the category to `Intent.CATEGORY_DEFAULT`.
    - 672 out of 685 services set the priority value to -500, which is lower than the default value, and only 2 services set it to the highest value of 1000.

- **Sampled Service Hijacking Attacks:**
  - Table 2 lists several sampled service hijacking attacks in "New Apps," including in-app purchasing services, Google Messages Transfer, and VPN connecting services.
  - These attacks can lead to sensitive information leakage, such as bank account details and VPN login credentials.
  - Over 500,000,000 users may be affected, and many of these vulnerabilities can be triggered during app startup.

- **Denial of Service (DoS) Attacks:**
  - Direct implicit service invocations in apps with `targetSdkVersion` higher than 21 can cause crashes.
  - Developers have three choices when `queryIntentServices()` returns multiple matching services:
    1. Throw an exception, leading to a crash.
    2 - Invoke `bindService()` or `startService()` with a null intent.
    3. Stop invoking the service.
  - On Android 5.0 and higher, the first two choices will crash the app.
  - 55 service invocations can cause DoS attacks, affecting 28 applications.
  - 53 invocations will cause the app to crash, and only 2 choose to ignore the service.
  - 24 invocations are caused by implicit service invocations, and 31 are due to improper processing of resolved service invocations.

#### Reasons for Implicit Invocation Residue

- **Difficulty in Determining Package Names:**
  - One major reason for the residue of vulnerable service invocations is the difficulty in determining package names for various third-party services, leading to more frequent use of resolved service invocations in "New Apps."

- **Slow Adoption of Forbidden Policy:**
  - 62 of the 112 vulnerable invocations are residue implicit invocations, including 28 Google services, 11 same-origin services, and 23 other third-party services.
  - 79.03% of these remain implicit due to outdated SDKs or reuse of outdated sample codes.
  - Some SDKs still invoke services implicitly in their latest versions.

- **Detailed Analysis of Implicit Invocations:**
  - Outdated SDKs and sample codes are primary reasons for implicit invocations of Google services.
  - Table 3 shows the five different services involved in 28 Google service invocations, detailing the "Action" attributes, implicit percentages, and reasons for implicit invocations.

By understanding these vulnerabilities and their causes, developers can take steps to mitigate risks and enhance the security of their applications.