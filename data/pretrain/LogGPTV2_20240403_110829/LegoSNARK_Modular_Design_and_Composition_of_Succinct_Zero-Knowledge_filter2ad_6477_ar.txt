scheme, and CPeq is a zero-knowledge non-interactive argument for testing equality of commitments
for Com, then there is an interactive argument for the relation
VerCommit(ck, ct, t, ot) = 1 ∧ t =
(cid:88)
g(b)
b∈{0,1}µ
Moreover, we recall below the last two steps of Construction 2 in [ZGK+17b] (i.e., Construction
2 is the same as in our Figure 3 with the blue part replaced by the following steps):
1 : Common input: ct, g; P’s input: (t, ot)
2 : P : (c
µ) ← ComVal(ck, g(s)) ; π
∗
∗
µ, o
3 : P → V : c
∗
µ, o
4 : V : VerCommit(cvk, c
∗
µ, g(s), o
∗
µ, π
∗
µ)∧CPeq.VerProof(vk,(c
∗
∗
µ,comµ), π
∗
)
∗ ← CPeq.Prove(ck, (c
∗
µ, comµ), g(s), (o
∗
µ, ρµ))
59
For knowledge soundness, the idea of the proof is that for any adversary A against CPsc we can
create an adversary B against Construction 2 in [ZGK+17b].
1, c(cid:48)
Similarly to [ZGK+17b], we begin by observing that the commitments c1, c2 as well as all the
commitments comaj’s sent during the µ rounds are extractable. By extractability, for any successful
A there exists an extractor EA that, on the same input of A, outputs with all but negligible prob-
ability valid openings of all these commitments. Thus we deﬁne B as the adversary that executes
(A,EA), obtains g1, g2, reconstructs the polynomial g(S), and then keeps executing A until the end
of the protocol, forwarding its messages to its challenger. This is done until the last step where A
2, π∗. Notice that B also has the commitments comaj sent by A in step µ as well as their
sends c(cid:48)
openings extracted through EA. Thus, B can compute homomorphically the commitment comµ and
its opening.
With this knowledge, B executes the last two lines in Figure 3 (acting as the veriﬁer): if all
veriﬁcations pass and B has an opening of comµ to g(s), then it executes the lines 2–4 above and
sends (c∗
If all veriﬁcations pass but B has an opening of comµ to a value diﬀerent from g(s), then it must
be the case that A cheated in one of the proofs π1, π2, π∗. By the knowledge soundness of CPpoly
and CPprd this however occurs only with negligible probability.
µ, π∗) to its challenger.
µ, o∗
To show zero-knowledge, we build a simulator that can simulate the veriﬁer’s view without
knowing the prover’s input. Our simulator is the same as the one in [ZGK+17b] up to their step
(d). For step (e), we let our simulator additionally create commitments (c(cid:48)
2) to dummy values
and then run the ZK simulators of CPpoly and CPprd to simulate proofs (π1, π2, π∗). By the proof in
[ZGK+17b], the veriﬁer’s transcript except for the last message (c(cid:48)
2, π1, π2, π∗) is indistinguishable
from an honest one. The indistinguishability with respect to the last message follows immediately
(cid:3)
from the zero-knowledge CPpoly and CPprd.
1, c(cid:48)
1, c(cid:48)
F.2 Proof of Security of CPhad
Let Ahad be the adversary against CPhad that, on input (ck, eks, ekp) and interacting
Proof
with the random oracle H, returns a statement (cj)j∈[:3] and a proof π that veriﬁes correctly. For
any such Ahad we can deﬁne a non-interactive adversary A∗
had that additionally takes as input a
sequence of random values ri, for i = 1 to Q, such that ri is used to answer the i-th query of Ahad
to the random oracle H. For any Ahad making Q queries to H there exists an index i ∈ [0, Q] such
that the commitments (cj)j∈[:3] returned at the end of its execution were queried to H in the i-th
query (letting i = 0 being the case in which they were not asked at all). From the above adversary
A∗
had we can deﬁne Acom as the non-uniform adversary that on input (ck, eks, ekp, r1, . . . , ri−1)
runs Ahad (in the same way as A∗
had does) up to its i-th query H((cj)j∈[:3]) and returns (cj)j∈[:3].
By the extractability of the commitment, for Acom there exists an extractor Extcom that on the
same input of Acom outputs openings (˜uj)j∈[:3], (oj)j∈[:3]. We deﬁne the extractor Ehad to be the
one that runs Extcom and returns its output. Notice that by the extractability of PolyCom it holds
VerCommit(ck, cj, ˜uj, oj) for j = 0, 1, 2 with all but negligible probability.
Next, we need to argue that this adversary-extractor pair (Ahad,Ehad) has negligible probability
had we can deﬁne two adversaries Ap
of winning in the knowledge soundness experiment. From A∗
and Asc against CPpoly and CPsc respectively, and by using the knowledge soundness of the two CP-
b∈{0,1}µ (cid:101)eq(r, b) · ˜u1(b) · ˜u2(b) hold respectively with all but
SNARKs we have that for each of these adversaries there is a corresponding extractor that gives us
a value t such that ˜u0(r) = t and t =(cid:80)
negligible probability. Furthermore, the binding of PolyCom implies that the values and openings
60
for all the commitments (cj)j∈[:3], ct obtained using these extractors are all the same with all but
negligible probability (otherwise we could deﬁne a reduction against the binding of PolyCom).
0(X) =(cid:80)
b∈{0,1}µ (cid:101)eq(X, b) · ˜u1(b) · ˜u2(b); essentially ˜u∗
Since VerCommit(ck, cj, ˜uj, oj) for j = 0, 1, 2, the only way for the adversary to win is when
the relation Rhad is not satisﬁed. Since we have vectors in MLE form, the check of relation Rhad
can be equivalently written as ∀b ∈ {0, 1}µ : ˜u0(b) ?= ˜u1(b) · ˜u2(b). Let us deﬁne the polynomial
˜u∗
0(X) is the MLE of the vector that should
0(X) agrees with ˜u1(X) · ˜u2(X)
correctly verify the Rhad relation. In particular, by lemma 5.1, ˜u∗
0(X) (cid:54)= ˜u0(X). However,
on all boolean points. Thus, if the relation does not hold we must have ˜u∗
0(r) holds. Notice that from the construction of Ehad, the
from above we have that ˜u0(r) = ˜u∗
polynomials ˜u0(X), ˜u1(X), ˜u2(X) are independent from r (this is because the extractor Ecom that
returned this polynomial did not have r = ri among its inputs), and ˜u∗
0(X) is fully determined from
0(X) (cid:54)= ˜u0(X)∧ ˜u0(r) = ˜u∗
˜u1(X), ˜u2(X). Therefore, by the Schwartz-Zippel lemma, the event ˜u∗
0(r)
occurs with negligible probability over the random choice of r.
The zero-knowledge of CPhad relies on the hiding of PolyCom and the zero-knowledge of CPpoly
and CPsc. Building simulators Skg and Sprv for CPhad from the corresponding simulators for CPpoly
(cid:3)
and CPsc is fairly straightforward and is omitted here.
F.3 Proof of CPsfprm
Let Asfprm be the adversary against CPsfprm that, on input (ck, ekp) and interacting with
Proof
the random oracle H, returns a statement (φ, x, (cj)j∈[(cid:96)]) and a proof π that veriﬁes correctly. For
any such Asfprm we can deﬁne a non-interactive adversary A∗
sfprm that additionally takes as input
a sequence of random values (ri, si), for i = 1 to Q, such that (ri, si) are used to answer the i-th
query of Asfprm to the random oracle H. For any Asfprm making Q queries to H there exists an index
i ∈ [0, Q] such that for the relation statement (φ, x, (cj)j∈[(cid:96)]) returned at the end of its execution,
((cφ,j)j∈[0,(cid:96)], x, (cj)j∈[(cid:96)]) was queried to H in the i-th query (letting i = 0 being the case in which
they were not asked at all, and cφ,j be deterministically derived from φ). From the above adversary
sfprm we can deﬁne Acom as the non-uniform adversary that on input (ck, ekp, r1, s1, . . . , ri−1, si−1)
A∗
runs Asfprm (in the same way as A∗
sfprm does) up to its i-th query H((cφ,j)j∈[0,(cid:96)], x, (cj)j∈[(cid:96)]) and
returns (cj)j∈[(cid:96)]. By the extractability of the commitment, for Acom there exists an extractor Ecom
that on the same input of Acom outputs openings (˜uj)j∈[(cid:96)], (oj)j∈[(cid:96)]. We deﬁne the extractor Esfprm
to be the one that runs Ecom and returns its output. Notice that by the extractability of PolyCom
it holds VerCommit(ck, cj, ˜uj, oj) for j = 0, 1, 2 with all but negligible probability.
Next, we need to argue that this adversary-extractor pair (Asfprm,Esfprm) has negligible probabil-
ity of winning in the knowledge soundness experiment. Recall that we have VerCommit(ck, cj, ˜uj, oj)
for j ∈ [(cid:96)] and, by the linear homomorphic property of PolyCom, for all j ∈ [0, (cid:96)], c(cid:48)
j are
j := yj + r · φj − s · 1j respectively.
commitments to the MLE of y(cid:48)
Also, in order for the adversary to be successful it must be the case that the relation does not hold,
i.e., y is not a self-permutation according to φ. Notice that the vector y is independent of (r, s)
since it was returned by Ecom without having these values in its view. This allows us to argue that
with overwhelming probability over the choice of r it is the case that at least one of the entries
of y + r · φ is not in y + r · v. Moreover, when these vectors have diﬀerent entries the equation
i(yi + r · φ(i) − s) holds with negligible probability over the choice of s by the
i(yi + r · i − s) =(cid:81)
j := yj + r · vj − s · 1j and y(cid:48)(cid:48)
j and c(cid:48)(cid:48)
(cid:81)
Schwartz-Zippel lemma.
61
Hence we have that with all but negligible probability(cid:81)
i(yi + r · φ(i) − s),
which means that at one of the statements in the CPipd, CPprd or CPeq proofs is not correct. We
can reduce these cases to the knowledge soundness of CPipd, CPprd or CPeq using a fairly standard
reduction, in which from an adversary A∗
sfprm that falls into the above conditions (i.e., an (r, s) that
cause the above inequality) we build either an adversary Aipd against CPipd, or an adversary Aprd
against CPprd or an Aeq against CPeq.
The zero-knowledge of CPsfprm follows from the hiding of PolyCom (for creating dummy com-
(cid:3)
)j∈[0...(cid:96)]) and the zero-knowledge of all the underlying CP-SNARKs.
mitments (cz(cid:48)
i(yi + r · i − s) (cid:54)=(cid:81)
, cz(cid:48)(cid:48)
j
j
F.4 Proof of CPlin
Let Alin be the adversary against CPlin that, on input (ck, eks, ekp) and interacting with
Proof
the random oracles H1, H2, returns a statement (F , x, cu) and a proof π that veriﬁes correctly.
For any such Alin we can deﬁne a non-interactive adversary A∗
lin that additionally takes as input
a sequence of random values {ri}i, {σj}j, for i = 1 to Q1 and j = 1 to Q2, such that ri (resp.
σj) is used to answer the i-th (resp. j-th) query of Alin to the random oracle H1 (resp. H2). For
any Alin making Q1 queries to H1 there exists an index i ∈ [0, Q1] such that for the statement
(F , x, cu) returned at the end of its execution the i-th query to H1 (letting i = 0 being the case in
lin we can deﬁne Acom
which they were not asked at all) is (cF , x, cu). From the above adversary A∗
as the non-uniform adversary that on input (ck, eks, r1, . . . , ri−1) runs Alin (in the same way as A∗
lin
does) up to its i-th query H(cF , x, cu) and returns cu. By the extractability of the commitment, for
Acom there exists an extractor Ecom that on the same input of Acom outputs an opening ˜u, ou. We
deﬁne the extractor Elin to be the one that runs Extcom and returns its output. Notice that by the
extractability of PolyCom it holds VerCommit(ck, cu, ˜u, ou) with all but negligible probability.
Next, we need to argue that this adversary-extractor pair (Alin,Elin) has negligible probability
of winning in the knowledge soundness experiment. In a similar way as we argued extractability of
cu, we can show that it is possible to extract the polynomial g1 that correctly opens c1.
i.e., F · u (cid:54)= x. Considering MLEs, this means there is some a ∈ {0, 1}ν such that
Recall that the adversary is successful if the veriﬁcations pass and the relation does not hold,
This means that the following polynomial inequality holds:
(cid:88)
(cid:88)
˜x(a) (cid:54)=
b∈{0,1}µ
˜F (a, b)˜u(b).
˜x(R) (cid:54)=
˜F (R, b) · ˜u(b)
b∈{0,1}µ
First, we argue that with all but negligible probability over the choice of r we have t = ˜x(r) (cid:54)=
b∈{0,1}µ ˜F (r, b)˜u(b). Indeed, r is random and independent from x, ˜F , ˜u and the two polynomials
would be equal when evaluated on r with probability at most ν/|F| by Schwartz-Zippel. Thus we
(cid:80)
can continue the proof assuming that t (cid:54)=(cid:80)
b∈{0,1}µ ˜F (r, b) · ˜u(b).
Next, consider that for the extracted g1 there are two possible cases: (i) g1(S) = ˜F (r, S), and
(ii) g1(S) (cid:54)= ˜F (r, S).
If (i) occurs, then we can immediately build an adversary against the soundness of CPsc.
If (ii) occurs, consider two subcases: (ii.a) g1(σ) = ˜F (r, σ), and (ii.b) g1(σ) (cid:54)= ˜F (r, σ). However,
by Schwartz-Zippel (ii.a) occurs with negligible probability µ/|F| over the choice of σ. And if (ii.b)
62
occurs then it is possible to do a reduction to the soundness of CPpoly (since at least one of the
claims y∗ = g1(σ) or y∗ = ˜F (r, σ) is false).
(cid:3)
The zero-knowledge of CPlin follows immediate from the zero-knowledge of CPsc.
F.5 A CP-SNARK for Data-Parallel Computations
In this section we discuss how a CP-SNARK for relations Rpar and Rparjnt, and for the commitment
scheme PolyCom of [ZGK+17b] can be obtained by merging ideas from [ZGK+17b] and [WTs+18].
Such a merge of techniques was hinted possible in [WTs+18]. Here we give more details on how such
a scheme looks like. The main motivation of studying such a scheme is that the commitment part
of the proof (and similarly a factor of the veriﬁcation time) is O(log |w|), instead of O((cid:112)|w|).
An Abstract Version of Hyrax. Hyrax [WTs+18] is a zero-knowledge proof, based on discrete
log in the random oracle model that is based on the CMT protocol [CMT12]. Hyrax extends CMT,
which is particularly suited for circuits composed of parallel identical basic blocks, by supporting
non-determinism in zero-knowledge, as well as including other optimizations. Its basic structure
as an interactive protocol: (i) the prover creates a commitment cw to the witness w (a vector of
ﬁeld elements); (ii) the parties run a ZK variant of CMT (including optimizations from Giraﬀe++
[WJB+17]); (iii) the prover “links” together the outputs of steps (i) and (ii). For this, it must prove
that the MLE ˜w of the witness in cw evaluated on a random point qd is equal to another value y
committed in ζ.
In Figure 17 we formalize this structure via a generic use of a commitment scheme for polynomials
and a proof system for proving the correct evaluations of committed polynomials. For these two tools
we use the syntax formalized in Appendix F. We call this scheme Hyrax-Abstract. It is clear from the
security proof of [WTs+18] that one could rephrase their security statement so that Hyrax-Abstract
has witness extended emulation if PolyCom is an extractable commitment and CPpoly is a NIZK
argument of knowledge for polynomial evaluations.
Instantiating Hyrax-Abstract with PolyCom. We call Hyrax − PolyCom the instantiation of Hyrax-