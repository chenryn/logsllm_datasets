beneﬁt of existing approaches to speed-up the remarkably slow
simulation of implementation-level models. Accordingly, none
of them meets the aforementioned requirements.
This paper presents DAVOS (Dependability Assessment,
Veriﬁcation, Optimization, and Selection), an EDA toolkit that
seamlessly integrates dependability-driven processes into the
semi-custom design ﬂow. It provides an answer to most of
the aforementioned problems, by enabling the i) robustness
assessment and the identiﬁcation of dependability bottlenecks
in hardware designs, ii) veriﬁcation of deployed dependability-
related strategies, iii) dependability benchmarking (selection)
of alternative IP cores, EDA tools, and implementation tech-
nologies, from a performance, power, area, and dependability
(PPAD) perspective, and iv) design space exploration (DSE)
to tune the conﬁguration parameters of IP cores and EDA
tools for optimizing PPAD goals. The DAVOS EDA toolkit
supports all these scenarios while remaining interoperable with
existing standard HLDs and off-the-shelf EDA tools, including
synthesizers, placer, routers, and simulators.
The rest of this contribution introduces the architecture of
DAVOS in Section II, and illustrates its applicability through
the dependability assessment, benchmarking, and DSE scenar-
ios described in Sections III–V. Finally, Section VI discusses
its usefulness and applicability, and Section VII summarises
the main conclusions drawn from this work.
II. DAVOS TOOLKIT
The core of DAVOS is a set of custom modules that can
be launched from command line in any operating system
with the basic Python distribution installed. These modules
can be conﬁgured from dedicated custom XML ﬁles that
hierarchically describe the required data and/or conﬁguration
parameters. Interactive monitoring and data visualization ca-
pabilities are provided via a web interface. This section details
this architecture and how these modules work coordinately.
A. Architecture
The internal architecture of DAVOS, depicted in Fig. 1,
responds to the necessity of deﬁning a common interface to
323
make custom developed modules interoperable with standard
off-the-shelf EDA tools. Each of these modules provides the
following basic functionality.
1. Design of experiments: This module enables the deﬁ-
nition of all the required designs when different alternatives
are eligible. This could be the case of considering different
candidates IP cores/EDA tools, or of tuning the conﬁguration
parameters of selected IP cores/EDA tools. Full factorial
designs are generated for a reduced number of alternatives
(including just one). Otherwise, fractional factorial designs
(carefully chosen subset) [12] are proposed instead.
2. Implementation and PPA estimation: This is the core
module in charge of running the semi-custom design ﬂow
for each design and the selected implementation technology.
Performance, power, and area (PPA) attributes are computed
for each implementation. Different EDA tools can be assigned
to each of the implementation phases. This module is not
required when analysing just RTL models.
3. Fault injection and dependability estimation: This module
is at the heart of the process for estimating the dependability-
related attributes of each design. It relies on an integrated
simulation-based fault injection tool to run the model of the
system, at the desired abstraction level, and inject the selected
faults. Any commercial simulator can be used for this task.
This module can be omitted when focusing on PPA attributes.
4. Regression analysis: This module complements fractional
factorials designs of experiments by computing regression
models that can be used to estimate PPAD attributes for all the
alternatives in the design space. This process is supported by
statistical artifacts to ensure that valid estimations are obtained
from sampling a small fraction of the whole design space [12].
5. Decision support: Determining the best alternative for a
single goal is quite straightforward. However, when multiple
and conﬂicting goals must be taken into account, it is usually
desirable to employ mathematical approaches to support the
decision maker. This module supports the hierarchical analysis
of multiple goals under different application scenarios through
Multiple-Criteria Decision Making (MCDM) techniques [13].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:28:39 UTC from IEEE Xplore.  Restrictions apply. 
HDL model + workload
HDL model + workload
EDA parameters
EDA parameters
Design parameters
Design parameters
1. Design of experiments
1. Design of experiments
Synthesis
Synthesis
….
….
PlaceRoute
PlaceRoute
Implementation Flow
Implementation Flow
(chain of EDA tools)
(chain of EDA tools)
2. Implementation 
2. Implementation 
& PPA estimation
& PPA estimation
Implementation/PPA report 
Implementation/PPA report 
Performance, Power,
Performance, Power,
Area (PPA) estimation
Area (PPA) estimation
6. Data & Report 
6. Data & Report 
management
management
SQLite
SQLite
XML/SCV
XML/SCV
e
e
c
c
a
a
f
f
r
r
e
e
t
t
n
n
i
i
b
b
e
e
W
W
Monitoring
Monitoring
SBFI reports
SBFI reports
DSE reports
DSE reports
Queries
Queries
...
...
Fault dictionary
Fault dictionary
Factorial 
Factorial 
implementations
implementations
Grid (SGE)
Grid (SGE)
Matlab
Matlab
3. Fault injection &
3. Fault injection &
dependability estimation
dependability estimation
4. Regression analysis
4. Regression analysis
Implementation 
Implementation 
scenarios
scenarios
Regression 
Regression 
models
models
Dependability (D)
Dependability (D)
attributes
attributes
SBFI report
SBFI report
Factorial design,
Factorial design,
PPAD
PPAD
CUDA
CUDA
5. Decision support
5. Decision support
DSE report
DSE report
Optimized design/implementation
Optimized design/implementation
Fig. 1: DAVOS architecture displaying its main modules (in green), tools and results (in purple), and required inputs (in red)
6. Data and report management: This module collects the
data provided by the rest of modules and provides a web inter-
face for process monitoring, data querying and visualization.
By properly conﬁguring how these modules coordinate their
work, it is possible to support a wide range of performance-
and/or dependability-driven scenarios.
B. Control Flow
Coordinating the action of these custom modules and off-
the-shelf EDA tools to respond to legitimate application sce-
narios requires adapting the control ﬂow of DAVOS attending
to the speciﬁcs of such scenarios and tools. This need for
ﬂexibility and adaptation led to the deﬁnition of conﬁguration
ﬁles (in XML format) that must be customised according to
the desired control ﬂow. For instance, the excerpt displayed in
Fig. 2 generates all the required scripts to run the implemen-
tation module in association with the Xilinx ISE toolchain.
Each EDA tool or suite comprises a number of different
phases, each one with different conﬁguration parameters, that
should be consecutively executed to obtain the ﬁnal implemen-
tation of the design. Accordingly, the 
section of the conﬁguration ﬁle includes a  subsec-
tion for each one of the stages of that particular instance of
the semi-custom design ﬂow.
Each Phase includes the following attributes: name, used
as identiﬁer; next, which states the following phase to be
executed after that phase successfully ﬁnish; postcondition,
assertion that must be held true after ﬁnishing that phase,
like #FILEXIST#*ngc, *.syr that checks, for the Xilinx’s XST
synthesiser, that the netlist ﬁle (ngc extension) and the syn-
thesis report ﬁle (syr extension) exist; result handler, which
references a Python custom function in charge of processing
the information obtained from this phase and generate the
associated reports in the required format; and script builder,
which references a Python custom function that generates the
#config.xml: section for implementation flow
....
    ..........................................
......, BuildNetlist, Simulate, PowerAnalysis, ......
#Defines all vendor-specific functions referenced from config.xml
VendorSpecific.py 
#returns cmd script for input phase/config.options[ ]
def XilinxTK(phase, config):
    ..........................................
#retrieves resulting implementation properties from 
#Xilinx-specific reports: dict[Property]=Value
#Example: {'ClockPeriod' : 10.5, 'UTIL_LUT' : 3500,...}
def ProcessXilinxReports(phase, config):
Fig. 2: Excerpt from an example conﬁguration ﬁle controlling
the implementation of a design under Xilinx ISE toolchain
command line script required to execute the associated module
and/or tool as deﬁned in that subsection.
Additionally,
it can include any number of 
subsections, which deﬁne the default value for a given con-
ﬁguration parameter, and  subsections, which
iteratively tune the implementation constraints to ensure it
meets the desired requirements. For instance, the Constraint
subsection displayed in Fig. 2 aims at attaining an implemen-
tation with the highest possible clock frequency (minimum
324
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:28:39 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: Example application scenarios of DAVOS, detailing which modules and EDA tools take part in them
Scenarios
Verify that an in-house designed image processor is functionally correct
Verify that a third-party packet processor meets the desired PPA requirements
Find the most sensitive components to transient faults of the new integer unit architecture
Assess the coverage of a totally self-checking adder implemented on a Stratix 10 FPGA
Determine which of 3 synthesizers promises the best PPA trade-off for a
microcontroller implemented on a Spartan-7 FPGA for automotive applications
Determine which of 5 different signal processors will get the best PPAD trade-off
when implemented on an standard cell for a satellite
Get which conﬁguration of 25 different parameters of a given synthesizer gets the best
PPA trade-off for a communication microprocessor for smartphones
Get which microprocessor architecture (pipeline width, functional units, cache levels)
gets the best PPA trade-off and maximises the mission time for aerospace applications
Modules
EDA tools
n
o
i
t
a
t
n
e
m
e
l
p
m
I
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
n
o
i
t
c
e
j
n
i
t
l
u
a
F
(cid:2)
(cid:2)
(cid:2)
(cid:2)
t
r
o
p
p
u
s
n
o
i
s
i
c
e
D
n
o
i
s
s
e
r
g
e
R
s
i
s
y
l
a
n
a
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
n
o
i
t
a
t
n
e
m