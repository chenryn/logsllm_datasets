25th USENIX Security Symposium  699
11
Protocol
SMTP
POP3
IMAP
HTTPS
SMTPS
SMTP
IMAPS
POP3S
(Alexa Top 1M)
All certiﬁcate
Trusted certiﬁcates
Port
25
110
143
443
465
587
993
995
443
SSL/TLS
SSLv2
support
936 K (28%)
3,357 K
404 K (10%)
4,193 K
4,202 K
473 K (11%)
34,727 K 5,975 K (17%)
291 K (8%)
3,596 K
3,507 K
423 K (12%)
853 K (20%)
4,315 K
884 K (20%)
4,322 K
611 K
82 K (13%)
Vulnerable
key
1,666 K (50%)
1,764 K (42%)
1,759 K (42%)
11,444 K (33%)
1,439 K (40%)
1,464 K (42%)
1,835 K (43%)
1,919 K (44%)
152 K (25%)
SSL/TLS
SSLv2
support
190 K (18%)
1,083 K
230 K (13%)
1,787 K
1,781 K
223 K (13%)
17,490 K 1,749 K (10%)
40 K (2%)
1,641 K
1,657 K
133 K (8%)
260 K (14%)
1,909 K
304 K (15%)
1,974 K
456 K
38 K (8%)
Vulnerable
key
686 K (63%)
1,031 K (58%)
1,022 K (57%)
3,931 K (22%)
949 K (58%)
986 K (59%)
1,119 K (59%)
1,191 K (60%)
109 K (24%)
Table 4: Hosts vulnerable to general DROWN. We performed Internet-wide scans to measure the number of hosts
supporting SSLv2 on several different protocols. A host is vulnerable to DROWN if its public key is exposed anywhere
via SSLv2. Overall vulnerability to DROWN is much larger than support for SSLv2 due to widespread reuse of keys.
7 Measurements
We performed Internet-wide scans to analyze the number
of systems vulnerable to DROWN. A host is directly
vulnerable to general DROWN if it supports SSLv2. Sim-
ilarly, a host is directly vulnerable to special DROWN if
it supports SSLv2 and has the extra clear bug (which also
implies the leaky export bug). These directly vulnerable
hosts can be used as oracles to attack any other host with
the same key. Hosts that do not support SSLv2 are still
vulnerable to general or special DROWN if their RSA key
pair is exposed by any general or special DROWN oracle,
respectively. The oracles may be on an entirely different
host or port. Additionally, any host serving a browser-
trusted certificate is vulnerable to a special DROWN man-
in-the-middle if any name on the certificate appears on
any other certificate containing a key that is exposed by a
special DROWN oracle.
We used ZMap [16] to perform full IPv4 scans on
eight different ports during late January and February
2016. We examined port 443 (HTTPS), and common
email ports 25 (SMTP with STARTTLS), 110 (POP3
with STARTTLS), 143 (IMAP with STARTTLS), 465
(SMTPS), 587 (SMTP with STARTTLS), 993 (IMAPS),
and 995 (POP3S). For each open port, we attempted three
complete handshakes: one normal handshake with the
highest available SSL/TLS version; one SSLv2 handshake
requesting an export RC2 cipher suite; and one SSLv2
handshake with a non-export cipher and sixteen bytes of
plaintext key material sent during key exchange, which
we used to detect if a host has the extra clear bug.
We summarize our general DROWN results in Table 4.
The fraction of SSL/TLS hosts that directly supported
SSLv2 varied substantially across ports. 28% of SMTP
servers on port 25 supported SSLv2, likely due to the
opportunistic encryption model for email transit. Since
SMTP fails-open to plaintext, many servers are config-
ured with support for the largest possible set of protocol
versions and cipher suites, under the assumption that even
bad or obsolete encryption is better than plaintext [9]. The
other email ports ranged from 8% for SMTPS to 20% for
POP3S and IMAPS. We found 17% of all HTTPS servers,
and 10% of those with a browser-trusted certificate, are
directly vulnerable to general DROWN.
OpenSSL SSLv2 cipher suite selection bug. We dis-
covered that OpenSSL servers do not respect the cipher
suites advertised in the SSLv2 ServerHello message.
That is, a malicious client can select an arbitrary cipher
suite in the ClientMasterKey message, regardless of
the contents of the ServerHello, and force the use of
export cipher suites even if they are explicitly disabled in
the server configuration. To fully detect SSLv2 oracles,
we configured our scanner to ignore the ServerHello
cipher list. The cipher selection bug helps explain the
wide support for SSLv2—the protocol appeared disabled,
but non-standard clients could still complete handshakes.
Widespread public key reuse. Reuse of RSA key ma-
terial across hosts and certificates is widespread [21, 23].
Often this is benign: organizations may issue multiple
TLS certificates for distinct domains with the same public
key in order to simplify use of TLS acceleration hardware
and load balancing. However, there is also evidence that
system administrators may not entirely understand the
role of the public key in certificates. For example, in the
wake of the Heartbleed vulnerability, a substantial frac-
tion of compromised certificates were reissued with the
same public key [15]. The number of hosts vulnerable to
DROWN rises significantly when we take RSA key reuse
into account. For HTTPS, 17% of hosts are vulnerable
to general DROWN because they support both TLS and
SSLv2 on the HTTPS port, but 33% are vulnerable when
considering RSA keys used by another service.
700  25th USENIX Security Symposium 
USENIX Association
12
Protocol
Port
SSL/TLS
SMTP
POP3
IMAP
HTTPS
SMTPS
SMTP
IMAPS
POP3S
(Alexa Top 1M)
25
110
143
443
465
587
993
995
443
3,357 K
4,193 K
4,202 K
34,727 K
3,596 K
3,507 K
4,315 K
4,322 K
611 K
Any certiﬁcate
Special DROWN
oracles
855 K (25%)
397 K (9%)
457 K (11%)
4,029 K (12%)
334 K (9%)
345 K (10%)
892 K (21%)
897 K (21%)
22 K (4%)
Trusted certiﬁcates
Vulnerable
key
896 K (27%)
946 K (23%)
969 K (23%)
9,089 K (26%)
765 K (21%)
792 K (23%)
1,073 K (25%)
1,108 K (26%)
52 K (9%)
SSL/TLS
Vulnerable
key
305 K (28%)
1,083 K
485 K (27%)
1,787 K
1,781 K
498 K (30%)
17,490 K 2,523 K (14%)
430 K (26%)
1,641 K
1,657 K
482 K (29%)
602 K (32%)
1,909 K
641 K (32%)
1,974 K
456 K
33 K (7%)
Vulnerable
name
398 K (37%)
674 K (38%)
690 K (39%)
3,793 K (22%)
630 K (38%)
667 K (40%)
792 K (42%)
835 K (42%)
85 K (19%)
Table 5: Hosts vulnerable to special DROWN. A server is vulnerable to special DROWN if its key is exposed by a
host with the CVE-2016-0703 bug. Since the attack is fast enough to enable man-in-the-middle attacks, a server is also
vulnerable (to impersonation) if any name in its certificate is found in any trusted certificate with an exposed key.
Special DROWN. As shown in Table 5, 9.1 M HTTPS
servers (26%) are vulnerable to special DROWN, as
are 2.5 M HTTPS servers with browser-trusted certifi-
cates (14%). 66% as many HTTPS hosts are vulnera-
ble to special DROWN as to general DROWN (70% for
browser-trusted servers). While 2.7 M public keys are
vulnerable to general DROWN, only 1.1 M are vulnerable
to special DROWN (41% as many). Vulnerability among
Alexa Top Million domains is also lower, with only 9%
of domains vulnerable (7% for browser-trusted domains).
Since special DROWN enables active man-in-the-
middle attacks, any host serving a browser-trusted certifi-
cate with at least one name that appears on any certificate
with an RSA key exposed by a special DROWN oracle
is vulnerable to an impersonation attack. Extending our
search to account for certificates with shared names, we
find that 3.8 M (22%) hosts with browser-trusted certifi-
cates are vulnerable to man-in-the-middle attacks, as well
as 19% of the browser-trusted domains in the Alexa Top
Million.
8 Related work
TLS has had a long history of implementation flaws and
protocol attacks [2,3,7,14,15,35,38]. We discuss relevant
Bleichenbacher and cross-protocol attacks below.
Bleichenbacher’s attack. Bleichenbacher’s adaptive
chosen ciphertext attack against SSL was first published
in 1998 [8]. Several works have adapted his attack to
different scenarios [4, 25, 29]. The TLS standard explic-
itly introduces countermeasures against the attack [13],
but several modern implementations have been discov-
ered to be vulnerable to timing-attack variants in recent
years [34, 42]. These side-channel attacks are implemen-
tation failures and only apply when the attacker is co-
located with the victim.
Cross-protocol attacks. Jager et al. [26] showed that a
cross-protocol Bleichenbacher RSA padding oracle attack
is possible against the proposed TLS 1.3 standard, in spite
of the fact that TLS 1.3 does not include RSA key ex-
change, if server implementations use the same certificate
for previous versions of TLS and TLS 1.3. Wagner and
Schneier [41] developed a cross-cipher suite attack for
SSLv3, in which an attacker could reuse a signed server
key exchange message in a later exchange with a different
cipher suite. Mavrogiannopoulos et al. [32] developed a
cross-cipher suite attack allowing an attacker to use ellip-
tic curve Diffie-Hellman as prime field Diffie-Hellman.
Attacks on export-grade cryptography. Recently, the
FREAK [5] and Logjam [1] attacks allowed an active
attacker to downgrade a connection to export-grade RSA
and Diffie-Hellman, respectively. DROWN exploits