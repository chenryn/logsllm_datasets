The code for enumerating account address is as follows.
from veb3 import Web3
from ethereum.uti1s import privtoaddr
import sha3
my_ipc = Web3 . HTrpProvider (*https : / /ropsten. infura . io/v3/xoooox")
runweb3 = Welb3 (my_ipc)
dxop_index = (2) .to_bytes (32, *big*)
def run_account () :
salt = os.urandom (1o) .hex ()
vhile True :
c = 0
key = salt + str (x)
priv = sha3 .keccak_256 (key encode () ) . digest [1
if *7d7ee* in public:
public = privtoaddz (pziv) hex()
tap_v = int (pub1ic, 16)
addr = *0x" + sha3 .keccak_256 (tmp_v.to_bytes (32, "big")
+drop_index) .hexdigest ()
result = runveb3 .eth.getStorageAt (contract, addr)
if result [-1] == 0:
yield (*0x#+pub1ic, "0x"+pxiv.hex [1)
× += 1
First, it is necessary to register an account with infura to get the individual's RPC
address and interact with the ethereum blockchain via Web3. In the above account
generation function, it starts by randomly generating the salt variable, which is then
used in a loop to generate the private key, in order to reduce the probability of using
the same account with another participant. Note the following functions.
runweb3 .eth.getStorageAt (contract, addx)
The function is used to get the value of the specified address in the contract’s store,
contract is the address of the contract, and addr is the location of the “mapping
(address => bool) initialized” variable of the contract in the blockchain storage, so
its purpose is to detect whether the account number has claimed an airdrop. The
location of the smart contract'’s variable in the blockchain storage will be explained
---
## Page 626
614
8Smart Contract
in detail in the following chapters, but we will skip the calculation process here
for now.
 asn o si das ixau a m je aqunu uooe ue ajaua on aqe uoq ra
script to send a transaction to the smart contract to claim the airdrop and transfer the
balance to a special account address. The functions that implement this process are
split up and explained one by one below.
transaction_dict = (* from' :eb3 toChecksumAddress (main_account) ,
'to' :**,
gas′ :120000,
nonce' : None,
value * : 300000000000000 0,
data* ; **
addr = args [0]
priv = args [1]
myNonce = runweb3 . eth. getTransactionCount (Web3 . toChecksumAddress
(main_account))
transaction_dict [*nonce*] = myNonce
transaction_dict [*to*] = Web3 . toChecksumAddress (addr)
r = runweb3 .eth account .signTransaction (transaction_dict,
private_key)
:x1
runweb3 .eth.sendRawTransaction(r ,ravTransaction.hex ())
except Exception as e :
print (*errorl*, e)
print (arga)
return
while True :
result = runveb3 eth. getBalance (Web3 .toChecksumAddress (addr) )
if result > 0:
break
else:
time .sleep (1)
The above code snippet shows how to send a transaction using a script. A valid
transaction should have the following necessary elements.
① Several fields in transaction_dict that are essential for sending a transaction.
▪from  the sender of the transaction,
•to  the recipient of the transaction,
se jo sun Arao no Aed o Sum ano u jo unoe   ause
*gas  the maximum amount of gas you're willing to spend on a particular
transaction,
• nonce  the number of transactions sent by the sender
value  the amount of the transfer
• data  additional data, such as the opcode to create a contract or the parameters
to be passed when a function is invoked.
---
## Page 627
8.2 Examples of Smart Contract Topics in Ethereum
615
② Sign the transaction with the private key of the account that sending the
transaction.
③ Transactions after sending a signature to the blockchain.
Since we need to operate 200 accounts, so args is the account we need to operate in
the current iteration, transfer all the balance to main_account and private_key is the
private key of this account. The purpose of the above code is to transfer a certain
amount of ethereum to the account in the current iteration, because we need to pay
the gas to send the transactions, and the new accounts have no ethereum by default.
In order to finish these transactions, we need to get a certain amount of ethereum for
our main_account, because it is on the test network, we can use the link on Chrome’s
MetaMask plugin to get ethereal coins for free. Then use the ethereum on the
transactions.
transaction_dict2 = {' from' : None,
'to' : Keb3 . toChecksumAddress (constract) ,
'gas' : 102080,
'gasPxice' : 10000000000,
'nonce' : 0,
*value* : 0,
'data': "0xd25f82a0"
transaction_dict3 = {' fron' : None,
' to' : Web3 , toChecksumAddress (constract) ,
'gasPxice' : 10000000000,
gas' : 52080,
nonce' : 1,
'value' : 0,
'data′ : 10xa9059cbb0000x∞∞∞xx00000000000000003e81
transaction_dict2 [*from*] = Web3 toChecksumAddress (addz)
now_nouce = zunweb3 eth . getTransactionCount (Meb3 . toChecksumAddress
transaction_dict2 [*nonce*] = nov_nouce
(addz) )
r = runweb3.eth account .signTransaction (transaction_dict2, priv)
Ezy:
except &xception as @:
runweb3 eth. sendRawTransaction(r , ravTransaction.hex ())
print (args)
print (*error2*, e)
transaction_dict3 [*nonce*] = nou_nouce + 1
return
transaction_dict3 [*from*] = Web3 .toChecksumAddress (addr)
r = runweb3.eth account .signTransaction (transaction_dict3, priv)
:x1
runweb3 .eth. sendRawTransaction (r . ravTransaction.hex ())
except Exception as e:
print (*error3*, e, args)
print (azgs, *Done)
return
---
## Page 628
616
8Smart Contract
The above code is easy to understand if you have already understood the
previously described code snippets. First, send the transaction *transaction_dict2",
the value of data is Oxd25f82a0, which means to call the getAirdrop function of the
smart contract. The first 4 bytes of data represent the function called, which is the
first 4 bytes sha3 hash of the function name.
(1 sa6pxa* ( () do.xp.xpro6q) 9sye2oax* eqs >> sha3 .keccak_256 (b"transfer (address, uint256) *) .hexd1gest()
'a9059cbb2ab09eb219583f4a59a5d0623ade346d9
62bcd4e46b11da047c9049b'
After getting the free 1000 balance, we then callthe transfer function and transfer
the balance to the main account, the content of the data is 4 bytes of the function to
call + 32 bytes of the main account address + 32 bytes of the transfer balance. Repeat
the above process 200 times with different accounts, and the main account can also
receive a free airdrop, so that the balance of the master account is 201000, and you
can get the flag by calling the PayForFlag function.
8.2.2 Using Remix
In the above example, what if one can’t figure out the value of the data field? This is
where Remix can help. We can call a function once manually through Remix, get the
value of the data field in the log area, and then copy it to the script.
This section explains the use of Remix based on the 2018 HCTF ez2win. This
challenge
gives
the
address:
0x71feca5f0ff0123a60ef2871ba6a6e5d289942ef, we go to Etherscan to get the
source code for the smart contract and then follow the steps below.
1. Open Remix, create a new ez2win.sol, copy the source code to the edit box, and
start compiling (Fig. 8.1).
2. After registering an account with MetaMask, switch the network to Rposten Test
Network according to the challenge (Fig 8.2).
3. To get the ethereal coin needed to send the transaction, click “Buy”, and under
Test Faucet, click “Get Ether", and you will be redirected to a website to get an
ethereal coin (Fig. 8.3).
Then go back to Remix, click on the “Deploy & run transactions" tab, select
“Injected Web3" in “Environment", then select “D2GBToken" in the “Contract"
box below, fill in the “At Address" field with the contract address provided by the
challenge, and then click “"At Address" (Fig 8.4). We then will be able to invoke the
contract’s functions.
---
## Page 629
8.2 Examples of Smart Contract Topics in Ethereum
617
Fig, 8.1 Remix interface
Fig, 8.2 MetaMask
Main Ethereum Network
三
AcNetworks
The default network for Ether
transactions is Main Net.
Main Ethereum Network
Ropsten Test Network
OETH
Kovan Test Network
Fig, 8.3 Request 1 ether
from faucet
faucet
address 0x81b7e08165od15648506c89998a9cc8164397647
balance: 97988410.42 ether
reqvest 1 eher fom aucet
---
## Page 630
618
Smart Contract
Fig, 8.4 Deployed
contracts
DEPLOY &:RUN TRANSACTIONS
日
ENVIRONMENT
Injected Web3
2
(
ACCOUNT
0x33E..5F243 (0.3 ethe
8000000
VALUE
CONTRACT
D2GBToken - contracts/ggbank.sol
Publish to
OR
71feca510110123a50ef2871ba6a5e
In the contract code of this challenge, we can easily find out that our target is to
call the PayForFlag function to get the flag; the limit of this function is that we need
to have a balance of more than 10,00o,000 in the contract; the drop function allows
each user to get 10 free balance. In this challenge, we can still follow the idea of the
previous example, but the difference between the value of the airdrop and the value
required to get the flag is too large, so this solution is too costly and we need to run
the script for a long time, as a result we need to find another solution.
The interface of invoking functinos in Remix is shown in Fig. 8.5. The first five
functions are the public functions we can call, and below are some public variables.
Among the public functions, we can find the _transfer function.
---
## Page 631
8.2 Examples of Smart Contract Topics in Ethereum
619
Fig, 8.5 The interface of
invoking functinos in Remix
D2G8TOKEN AT 0X71F_S42EF(BLOCKCHA
transfer
address from, address to, uint25
approve
ddress spender, uint256 value
PayForflag
ring b64email
transfer
ddress to, uint256 value
transferfrom
ddress from, address to, uint25t
alrdropAmount
function _transfer (address fron, address to, uint256 value) {
require (value  admin addPeer (*enode : / /xxx#)
You can then wait for the local blockchain to connect to the remote, during which
you can generate a new account or import an existing one. In this challenge,
o ox aead o se azuo a Aq uig uxon e asn on pxse ae suded
their ethereum account.
---
## Page 633
8.2 Examples of Smart Contract Topics in Ethereum
621
> personal .newAccount ()
# Generate a nev account
# Import the private key
Passphrase: # Enter the account passvord
personal. importRavKey(*xxx*)
That flag for this challenge comprises two parts, while the first part of the flag
requires the player's account balance be greater than 0. The private chain does not
have the free ethereal coin pickup interface of the test network, but it can be mined
just like a normal blockchain.
# Start mining
> miner .start ()
To get the second part of the flag, we need to find the smart contract of the
challenge. There is no visual interface to a private chain, but we can write code in the
console to find all the transactions that exist inside the private chain.
> fox (var i=0 ; 1ceth.b1ockNumber; 1++) {
var block = eth.getB1ock (1) ;
if (block.txansactions.length 1= 0) {
console. 1og ("8lock with tx: * + block.transactions . toString () ) ;
Then look for the smart contract on this private chain through transactions. First, 
we check the transaction information.
> eth.getTransaction (*Transaction Address*)
Some of the fields of the transaction have been briefly described earlier and we
will describe in depth here.
Transactions can be divided into three types: transfers, creating smart contracts,
and invoking smart contracts.
1. transfers
When the *value" of the transaction is not zero, it can be considered a transfer, and
when *data" is empty, it can be considered a pure transfer.
There are eight kinds of transfer operations: personal account — personal
account, personal account — smart contract, personal account —→ smart contract
transfer and invoke smart contract, personal account  create smart contract and
transfer to smart contract, smart contract → personal account, smart contract 
smart contract, smart contract — smart contract transfer and invoke smart contract,
一
smart contract —→ create smart contract and transfer to smart contract. Where
personal  personal, personal → smart contract, smart contract  personal, smart
do sn and ae po s p
---
## Page 634
622
8  Smart Contracts
2. create smart contracts
When the "to" field of the transaction is empty, it’s a smart contract creation
operation. In these kinds of transactions, the “data” field is interpreted as opcode
and the return value is place in the code field of the contract. After the transaction to
create the contract is completed, the code field data can be retrieved by “eth.getCode
(contract address)"
The address of the contract is determined jointly by the account that created the
collide. The calculation rule is as follows.
public pure returns [address) [
function addressFrom (address _origin, uint _nonce)
if (_nonce == 0x00)
return address (keccak256 (byte (0xd6) , byte (0x94) , _origin, byte
(0x80) )) ;
if (_nonce );
if (_nonce 1;
if (_nonce > ;
return address (keccak256 (byte (0xda) , byte (0x94) , _origin, byte
(0x84) , uint32 (_nonce)> ;
3. Invoke smart contracts
When the address of to is the contract address and data exists, it can be considered a
call to a smart contract function.
How do we know if an account is a smart contract account or a personal account?
The difference between a personal account and a smart contract account is as
follows: first, a personal account has a private key and can send transactions,
while a smart contract cannot calculate the private key and cannot send transactions;
second, the code field of a personal account is empty, so it is almost impossible for
address==addressFrom(account number, Nonce)"), while the code segment of a
smart contract may or may not contain data (as long as the smart contract code is
created to return null).
We can't determine whether the private key exists in the account, so we can only
determine whether the account address is a smart contract address by the code