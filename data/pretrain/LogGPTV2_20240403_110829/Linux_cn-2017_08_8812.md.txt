---
author: Simon Brand
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 5953
date: '2017-08-26 17:55:00'
editorchoice: false
excerpt: 在这一部分，我们将进入实践，实现一些我们调试器后面会使用的 DWARF 原语。我们也会利用这个机会，使我们的调试器可以在命中一个断点时打印出当前的源码上下文。
fromurl: https://blog.tartanllama.xyz/c++/2017/04/24/writing-a-linux-debugger-source-signal/
id: 8812
islctt: true
largepic: /data/attachment/album/201708/26/175338u3rarihzal14s8sg.jpg
permalink: /article-8812-1.html
pic: /data/attachment/album/201708/26/175338u3rarihzal14s8sg.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 8719
- displayorder: 0
  raid: 8813
reviewer: ''
selector: ''
summary: 在这一部分，我们将进入实践，实现一些我们调试器后面会使用的 DWARF 原语。我们也会利用这个机会，使我们的调试器可以在命中一个断点时打印出当前的源码上下文。
tags:
- 调试器
thumb: false
title: 开发一个 Linux 调试器（五）：源码和信号
titlepic: true
translator: ictlyh
updated: '2017-08-26 17:55:00'
---
![](/data/attachment/album/201708/26/175338u3rarihzal14s8sg.jpg)
在上一部分我们学习了关于 DWARF 的信息，以及它如何被用于读取变量和将被执行的机器码与我们的高级语言的源码联系起来。在这一部分，我们将进入实践，实现一些我们调试器后面会使用的 DWARF 原语。我们也会利用这个机会，使我们的调试器可以在命中一个断点时打印出当前的源码上下文。
### 系列文章索引
随着后面文章的发布，这些链接会逐渐生效。
1. [准备环境](/article-8626-1.html)
2. [断点](/article-8645-1.html)
3. [寄存器和内存](/article-8663-1.html)
4. [Elves 和 dwarves](/article-8719-1.html)
5. [源码和信号](https://blog.tartanllama.xyz/c++/2017/04/24/writing-a-linux-debugger-source-signal/)
6. [源码级逐步执行](https://blog.tartanllama.xyz/c++/2017/05/06/writing-a-linux-debugger-dwarf-step/)
7. 源码级断点
8. 调用栈展开
9. 读取变量
10. 下一步
### 设置我们的 DWARF 解析器
正如我在这系列文章开始时备注的，我们会使用 [libelfin](https://github.com/TartanLlama/libelfin/tree/fbreg) 来处理我们的 DWARF 信息。希望你已经在[第一部分](/article-8626-1.html)设置好了这些，如果没有的话，现在做吧，确保你使用我仓库的 `fbreg` 分支。
一旦你构建好了 `libelfin`，就可以把它添加到我们的调试器。第一步是解析我们的 ELF 可执行程序并从中提取 DWARF 信息。使用 `libelfin` 可以轻易实现，只需要对`调试器`作以下更改：
```
class debugger {
public:
    debugger (std::string prog_name, pid_t pid)
         : m_prog_name{std::move(prog_name)}, m_pid{pid} {
        auto fd = open(m_prog_name.c_str(), O_RDONLY);
        m_elf = elf::elf{elf::create_mmap_loader(fd)};
        m_dwarf = dwarf::dwarf{dwarf::elf::create_loader(m_elf)};
    }
    //...
private:
    //...
    dwarf::dwarf m_dwarf;
    elf::elf m_elf;
};
```
我们使用了 `open` 而不是 `std::ifstream`，因为 elf 加载器需要传递一个 UNIX 文件描述符给 `mmap`，从而可以将文件映射到内存而不是每次读取一部分。
### 调试信息原语
下一步我们可以实现从程序计数器的值中提取行条目（line entry）以及函数 DWARF 信息条目（function DIE）的函数。我们从 `get_function_from_pc` 开始：
```
dwarf::die debugger::get_function_from_pc(uint64_t pc) {
    for (auto &cu : m_dwarf.compilation_units()) {
        if (die_pc_range(cu.root()).contains(pc)) {
            for (const auto& die : cu.root()) {
                if (die.tag == dwarf::DW_TAG::subprogram) {
                    if (die_pc_range(die).contains(pc)) {
                        return die;
                    }
                }
            }
        }
    }
    throw std::out_of_range{"Cannot find function"};
}
```
这里我采用了朴素的方法，迭代遍历编译单元直到找到一个包含程序计数器的，然后迭代遍历它的子节点直到我们找到相关函数（`DW_TAG_subprogram`）。正如我在上一篇中提到的，如果你想要的话你可以处理类似的成员函数或者内联等情况。
接下来是 `get_line_entry_from_pc`：
```
dwarf::line_table::iterator debugger::get_line_entry_from_pc(uint64_t pc) {
    for (auto &cu : m_dwarf.compilation_units()) {
        if (die_pc_range(cu.root()).contains(pc)) {
            auto &lt = cu.get_line_table();
            auto it = lt.find_address(pc);
            if (it == lt.end()) {
                throw std::out_of_range{"Cannot find line entry"};
            }
            else {
                return it;
            }
        }
    }
    throw std::out_of_range{"Cannot find line entry"};
}
```
同样，我们可以简单地找到正确的编译单元，然后查询行表获取相关的条目。
### 打印源码
当我们命中一个断点或者逐步执行我们的代码时，我们会想知道处于源码中的什么位置。
```
void debugger::print_source(const std::string& file_name, unsigned line, unsigned n_lines_context) {
    std::ifstream file {file_name};
    //获得一个所需行附近的窗口
    auto start_line = line  " : "  ");
    //输出行直到 end_line
    while (current_line  " : "  ");
        }
    }
    //输出换行确保恰当地清空了流
    std::cout file->path, line_entry->line);
        return;
    }
    //如果信号是由逐步执行发送的，这会被设置
    case TRAP_TRACE:
        return;
    default:
        std::cout 
作者：[TartanLlama](https://www.twitter.com/TartanLlama) 译者：[ictlyh](https://github.com/ictlyh) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出