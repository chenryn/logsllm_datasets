• Proxies are common, especially on port 80, and will strip
TCP options.
• If options are removed, don’t assume message boundaries
will be preserved.
• Some middleboxes are surprisingly fragile to out of order
packets.
Based on this information, we looked at whether three exten-
sions to TCP had made sensible choices. We found that for the
most part they had; in fact they were rather tightly constrained by
middlebox behaviors to the solutions they had chosen. Of the three
extensions we considered, TCP Long Option presents the greatest
cause for concern. In particular, it becomes quite easy with long
options to produce behavior that looks to a middlebox like inconsis-
tent retransmission due to the contents of extended options chang-
ing. Such inconsistent retransmission is demonstrably unsafe. If
TCP Long Option were to be deployed, it would require additional
constraints to avoid this problem.
Here are some guidelines for middlebox designers:
• Do not drop packets including new options: this makes de-
ploying new options very difﬁcult as it impacts performance.
Remove new options instead, if new functionality is not be
allowed.
• Resegmentation should only be enabled if new options are
not allowed to pass. Otherwise, TCP extensions wishing the
option to be strictly bound to the original segment will fail to
be deployed.
• Be consistent in the treatment of segments with new options:
if new options are allowed on the SYN, they should be al-
lowed both on the SYN/ACK and the data segments.
• Inconsistent retransmissions might happen for good reasons:
they should be allowed through whenever possible.
191Middleboxes currently deployed in the wild are relatively be-
nign from our measurements; all paths conformed to our ﬁrst three
recommendations. For example, none of them dropped segments
including new options. Resegmentation was only observed for full
TCP proxies that prohibit new extensions from being negotiated, or
on segments that do not contain options. Finally, when new options
got through in the initial exchange, they were also allowed in the
data segments.
In general, we note that it is tricky to implement stateful process-
ing of TCP segments in middleboxes that do not behave like full
proxies. For instance, some middleboxes gave no response when
they saw holes in the sequence number space, and one middlebox
reset the connection when they saw inconsistent retransmissions.
We urge middlebox designers to consider explicitly whether they
want to allow new TCP extensions when implementing certain func-
tionality. It is much better to stop new negotiation of new exten-
sions than to allow it through only to fail unexpectedly later. Failure
to do so seriously complicates the seemingly easy task of extend-
ing TCP; we have experienced this in our long running quest to
standardize MPTCP.
We continue our work to extend its coverage in both tests run
and networks examined. Long-term continuous measurements are
necessary to study the evolution of middleboxes and their effects
on the Internet; this paper only presents a snapshot. Recent work
has advocated using HTTP as the narrow waist of the future Inter-
net [25]. It would be interesting to conduct measurements to test
whether HTTP is allowed to evolve, or has itself already ossiﬁed.
7. ACKNOWLEDGMENTS
We especially want to thank the volunteers from all over the
world who ran our test code; without their help, we would have
been unable to gather these results. Data traces and tools used in
this paper are publicly available [8]. We also thank the anonymous
reviewers for their helpful feedback. Michio Honda was funded by
JSPS KAKENHI (21-5729). Costin Raiciu, Adam Greenhalgh and
Mark Handley were partially supported by the CHANGE project
funded by the European Commission in its Seventh Framework
programme.
8. REFERENCES
[1] M. Allman. On the Performance of Middleboxes. ACM IMC,
35(2):307–312, 2003.
[2] A. Bakre and B. Badrinath. I-TCP: Indirect TCP for Mobile
Hosts. In Proc. IEEE ICDCS, pages 136–143, 1995.
[3] H. Balakrishnan, S. Seshan, E. Amir, and R. Katz. Improving
TCP/IP Performance over Wireless Networks. In Proc. ACM
MOBICOM, pages 2–11, 1995.
[4] A. Bittau, D. Boneh, M. Hamburg, M. Handley, D. Mazieres,
and Q. Slack. Cryptographic protection of TCP Streams
(tcpcrypt). draft-bittau-tcp-crypt-00.txt, July 2010.
[5] A. Bittau, M. Hamburg, M. Handley, D. Mazieres, and
D. Boneh. The case for ubiquitous transport-level encryption.
In Proc. USENIX Security Symposium, Aug 2010.
[6] B. Carpenter and S. Brim. Middleboxes: Taxonomy and
Issues. RFC 3234, Feb. 2002.
[7] R. Chakravorty, S. Katti, J. Crowcroft, and I. Pratt. Flow
Aggregation for Enhanced TCP over Wide-Area Wireless. In
Proc. IEEE INFOCOM, pages 1754–1764, 2003.
[8] Dataset for Middlebox Measurement. URL http:
//web.sfc.wide.ad.jp/~micchie/mbox-dataset.html.
[9] W. Eddy and A. Langley. Extending the Space Available for
TCP Options. Internet Draft, Jul. 2008.
[10] R. Fonseca, G. Porter, R. Katz, S. Shenker, and I. Stoica. IP
options are not an option. Tech. Rep. UCB/EECS- 2005-24,
2005.
[11] A. Ford, C. Raiciu, M. Handley, S. Barre, and J. Iyengar.
Architectural guidelines for multipath TCP development.
RFC 6182, Mar. 2011.
[12] A. Ford, C. Raiciu, M. Handley, and O. Bonaventure. TCP
Extensions for Multipath Operation with Multiple
Addresses. Internet Draft, July. 2011.
[13] B. Ford, P. Srisuresh, and D. Kegel. Peer-to-Peer
Communication Across Network Address Translators.
USENIX ATC, 2005.
[14] F. Gont and A. Yourtchenko. On the Implementation of the
TCP Urgent Mechanism. RFC 6093, Jan. 2011.
[15] M. Handley, V. Paxson, and C. Kreibich. Network intrusion
detection: evasion, trafﬁc normalization, and end-to-end
protocol semantics. In Proc. USENIX Security Symposium,
2001.
[16] S. Hätönen, A. Nyrhinen, L. Eggert, S. Strowes, P. Sarolahti,
and M. Kojo. An Experimental Study of Home Gateway.
ACM IMC, pages 260–266, 2010.
[17] V. Jacobson, R. Braden, and D. Borman. TCP Extensions for
High Performance. RFC 1323, May. 1992.
[18] J.Border, M. Kojo, J. Griner, G. Montenegro, and Z. Shelby.
Performance Enhancing Proxies Intended to Mitigate
Link-Related Degradations. RFC 3135, Jun. 2001.
[19] Re: [tcpm] Extending the TCP option space - yet another
approach. http://www.ietf.org/mail-
archive/web/tcpm/current/msg06481.html.
[20] M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow. TCP
Selective Acknowledgment Options. RFC 2018, Oct. 1996.
[21] A. Medina, M. Allman, and S. Floyd. Measuring the
Evolution of Transport Protocols in the Internet. ACM CCR,
35(2):37–52, 2005.
[22] P. Srisuresh and M. Holdrege. IP Network Address
Translator (NAT) Terminology and Considerations. RFC
2663, Aug. 1999.
[23] J. Padhye and S. Floyd. On Inferring TCP Behavior. In ACM
SIGCOMM, pages 287–298, Oct. 2001.
[24] V. Paxson. End-to-End Internet Packet Dynamics. In Proc.
ACM SIGCOMM, pages 139–152, 1997.
[25] L. Popa, A. Ghodsi, and I. Stoica. HTTP as the Narrow Waist
of the Future Internet. In Proc. ACM Hotnets, 2010.
[26] S. Savage. Sting: a TCP-based Network Measurement Tool.
In USENIX USITS, 1999.
[27] S. Savage, N. Cardwell, D. Wetherall, and T. Anderson. TCP
Congestion Control with a Misbehaving Receiver. ACM
CCR, 29(5):71–78, 1999.
[28] R. Stewart, M. Ramalho, and et al. Stream Control
Transmission Protocol (SCTP) Partial Reliability Extension.
RFC 3758, May. 2004.
[29] D. Watson, M. Smart, G. R. Malan, and F. Jahanian. Protocol
Scrubbing: Network Security Through Transparent Flow
Modiﬁcation. IEEE/ACM ToN, 12(2):261–273, 2004.
[30] D. Wischik, C. Raiciu, A. Greenhalgh, and M. Handley.
Design, implementation and evaluation of congestion control
for multipath TCP. In Proc. USENIX NSDI, 2011.
192Summary Review Documentation for 
“Is it Still Possible to Extend TCP?” 
Authors: M. Honda, Y. Nishida, C. Raiciu, A. Greenhalgh, M. Handley, H. Tokuda 
Reviewer #1 
Strengths:	 Interesting,  timely  problem.  Pretty  thorough  and 
extensive measurement setup and analysis. Good tie-in to actual 
system/application implications!  
Weaknesses:  Maybe  a  bit  dry.  I  would  like  to  see  some  more 
details/insights on the measurement setup/process. 
Comments  to  Authors:  I  dont  have  anything  seriously  against 
this  paper.  This  is  a  relevant  and  timely  problem,  and  a  pretty 
thorough  study  with  a  set  of  good  implications  for  protocol 
designers. 
I  found  the  abstract  a  bit  jarring  --  understanding  how  tcp 
extensions would work in the wild is a valid and interesting study 
in  of  itself!  I  worry  that  you  may  throw  readers  off  with  the 
needless rant about Internet ossifications etc; I don’t see why you 
need a philsophical stance here. 
In Section 3.3, can you also comment about the diversity in ISPs 
in  your  dataset  rather  than  just  “access  network”;  from  the 
discussion  you  seem  to  count  each  “cafe”  as  an  access  network 
when in theory it’s the upstream ISP that could potentially be the 
cause of trouble. On a related note, it might also be interesting to 
see if the pathological cases you see (e.g., the 7 http proxies) have 
something in common w.r.t ISP?  
I would also like to hear about how you gathered volunteers for 
running  the  tool  --  just  friends,  released  on  a  website  and  the 
profile of people who are willing to try this (e.g., did they need to 
be proficient in python?) 
Also,  it  might  be  useful  to  create  a  high-level  taxonomy  of  the 
testing tool; right now it comes across as a series of corner cases 
you  came  up  with  for  the  specific  protocols  you  tested.  That  is 
perfectly  fine,  I  am  curious  if  there  was  a  systematic  way  in 
which you created these test cases? 
Reviewer #2 
Strengths: To my knowledge this is the first paper that reports a 
large  scale  systematic  measurement  study  on  the  impact  of 
middleboxes  on  TCP  options.  Very  clearly  defined  objective, 
systematic study, clear results, that others know how to use. 
Weaknesses:  I  do  not  have  a  specific  concern,  but  a  general 
feeling  that  I  wish  the  paper  could  have  gone  a  bit  deeper.  for 
example, besides the specific conclusion that “We conclude that it 
is still possible to extend TCP using TCP options, so long as the 
use  of  new  options  is  negotiated  in  the  SYN  exchange,  and  so 
long as fallback to regular TCP behavior is acceptable”, can we 
also learn something more general from this study? 
Comments to Authors: None.  
Reviewer #3 
Strengths:  Careful  experiments.  Solid  writing.  Good  discussion 
on implications. 
Weaknesses: Too few paths, 135 to be precise. To draw the level 
of conclusions that this paper does, it needs at least two orders of 
magnitude more paths. For e.g., if middlebox will do something 
bad  it  would  also  strip  out  TCP  options  is  a  key  insight  that  is 
used multiple times. It is unclear if this is universally true. 
Several of the implications and the tests are specific to multi-path 
TCP or TCP Crypt, rather than to all possible TCP extensions. It 
is OK to have some editorial bias and the more general insights 
are called out fairly well. However, this paper isn’t really about 
all possible extensions to TCP, so some care in articulation would 
help. 
Comments  to  Authors:  In  many  places  you  talk  about  how 
HTTP proxies hindering probing, but I don’t think you spell out 
the reason why anywhere... Is this a fundamental problem (guess 
not)  or  something  that  the  current  tool  wasn’t  geared  to 
circumvent. For example, it could carry the signaling between the 
initiator  and  responder  as  HTTP  payload.  I  thnk  the  lack  of 
properly formatted HTTP may be what is crimping the test here... 
There  is  also  some  confusion  as  to  which  way  connection 
initiations are happening. Does the remote script primarily serve 
as  a  client?  I  can’t  see  how  it  can  easily  act  as  a  server  due  to 
NATs and firewalls... 
You certainly need measurements from a lot more paths, one to 
two orders of magnitude more. 
Since only a few paths have middleboxes, it is highly likely that 
you  results  are  due  to  just  a  handful  of  middleboxes discovered 
along the observed paths; it is dangerous to generalize from such 
a small sample... 
The  tests  are  all  very  simple;  nothing  wrong  with  that;  but  the 
contribution is primarily in terms of what the tests reveal and the 
implications to future design. 
3.1, the tool need admin privs to use raw sockets... Not as simple 
as you make it out to be... 
3.3,  core  is  “mostly  dumb”...  net  neutrality  violations  mostly 
result in throttles but not any rewrititing/ policing? 
It  would  be  interesting  if  you  can  figure  out  _where_  along  the 
network path these middleboxes were found. 
3.3,  how  did  you  classify  clients;  as  HotSpot/Cellular/Univ? 
Human annotation or ISP names?  
Table  2,  too  few  samples,  esp:  the  interesting  ones  that  have 
middleboxes. 
1933.3, middlebox behavior, you blame inability to detect SYN/ACK 
option  stripping  on  to  the  statelessness  of  your  tool,  but  that 
doesn’t seem to be accurate. 
4.3, “We hope that these middleboxes are aware of SACK”... are 
they or are they not? Hoping doesn’t do... 
4.7,  the  main  trouble  is  that  simply  duplicating  options  onto  all 
segments, as TSO does isn’t enough in many cases... 
Reviewer #4 
Strengths: Detailed catalog of behavior “in-the-wild”. Relatively 
well thought out experiments, and some unexpected findings. 
Weaknesses: Writing is repetitive. A number of ‘problems’ were 
due  to  mis/aggresively  configured  HTTP  proxies  and  do  not 
reflect behavior of other TCP flows. 
Comments to Authors:  Is there a reason for the distribution of 
the  142  networks  in  the  paper?  They  are  not  representative  of 
Internet  traffic  volume,  and  it  is  not  clear  that  they  are 
representative of middlebox behavior.  
The  related  work  should  refer  to  the  TCP  Sidecar  paper  (IMC 
2006) which describes how active measurements can go through 
middleboxes.  
For the most part, the results are not surprising. Application layer 
gateways try to parse data and fail if they don’t see everything. 
Proxies/middleboxes  that  regenerate  sequence  numbers  don’t 
preserve options that refer to literal sequence numbers (much like 
FTP PORT command and NAT interaction). However, the paper 
is  valuable  in  that  it  provides  a  systematic  catalog  of  anecdotal 
behavior.  
The paper is repetitive, and the writing verbose. The information 
here can be fit into a very good seven page paper, as opposed to 
the loose fourteen pager that is presented. Section 4.5+ adds very 
litle that has not already been stated or could be put inline with 
the other results. The entire issue with the seven HTTP proxies is 
a red herring and could be mentioned once in a footnote.  
The  paper  is  also  very  difficult  to  follow  since  the  tables  are 
scattered  all  over,  making  it  difficult  to  refer  to  them  while 
reading the text. 
Reviewer #5 
Strengths:  An  extensive  study.  I  particularly  like  that  the  test 
traffic  is  controlled  at  both  ends  of  the  path  (by  having  clients 
voluntarily  download  and  run a test program) as it is much less 
limiting than client or server only approaches. Useful results that 
are  not  otherwise  known.  Anyone  seriously  looking  to  extend 
TCP will want to read this paper. 
Weaknesses:  The  paper  is  a  bit  ad  hoc.  The  questions  that  are 
asked about how middleboxes handle TCP are mostly driven by 
efforts to deploy a multipath TCP, which is both good (they are 
relevant questions!) and bad (as it causes them to focus heavily on 
sequence numbers and is unclear that they will cover the needs of 
other extensions that may come). The paper would benefit from 
being a bit more systematic in its exploration of the space. 
Comments to Authors:  Thanks for an interesting paper; I have 
relatively few comments.  
I think your paper will benefit from stepping back a bit to separate 
it from MTCP. What other aspects of middlebox behavior might 
be important for extensions? For example, are there games with 
flow  control?  What  about 
the  window  scale,  MSS,  and 
authentication  options,  etc.,  as  they  at  least  seem  worth  some 
study? One exercise you might attempt is to go through all known 
extensions and make a a table with the TCP header fields or other 
properties/invariants on which they depend for correct behavior.  
People  are  likely  to  read  your  paper  to get guidance on what is 
safe/unsafe.  Thus  you  might  provide  an  easily  accessible  and 
complete summary of the takeaways (that is more comprehensive 
and standalone than in the conclusion).  
I’d  also  be 
to  middlebox 
developers for what to do or not to do wrt unsupported options to 
maximize the ability for future extensions, i.e., how can we make 
the future better. Is this already done?  
Section 5 seems misnamed. It is really a set of three case studies 
of  how  TCP  extensions  should  work  with  TCP  options.  The  bit 
that I found odd here is that the extensions have been designed in 
light  of  what  was  known  about  middlebox  behavior  by  the 
authors. The presentation makes it sound like there are these new 
protocols that are to be assessed to see how they will interact with 
middleboxes -- and they are found to be mostly compatible. 
in  recommendations 
interested 
Response from the Authors 
First, we made the description on our dataset clearer; for example, 
how we collect data, and how we identified the venue.  
Second,  we  added  a  few  paragraphs  guiding  middlebox  design 
that will work together future TCP extensions.  
Third, we added a sentence describing how HTTP proxies behave 
on manually verified two paths. 
In addition to these update, we’ve polished the entire document to 
provide  more  precise  and  explicit  information.  Also,  we  added 
results of tests for Large Receive Offload (LRO) as supplemental 
information. 
194