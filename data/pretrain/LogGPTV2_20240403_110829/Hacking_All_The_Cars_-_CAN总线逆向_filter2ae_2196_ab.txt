###  CAN总线威胁
根据CAN总线的特性，我们则可以了解CAN面临的威胁：
  1. CAN总线通信是广播的方式，所以数据是可以被监听和获取的。
  2. CAN总线协议中ID代表报文优先级，协议中没有原始地址信息。也就是说任何人都可以伪造和发送虚假或恶意的报文。
另外拒绝服务攻击在CAN总线协议中也是存在的。但是我们主要是分析和逆向CAN总线。这里不做相关说明。
###  监听CAN流量
监听CAN流量有多种方法。首先请保证启动ICSim。
  1. can-utils 工具包监听 
        candump -l vcan0
输入该命令后会监听流量并以candump-YYYY-MM-DD_time.log格式的文件名保存到当前目录下。如candump-2020-06-22_103240.log。按ctrl+c停止监听。  
打开文件，数据格式如下：
        (1592836523.941032) vcan0 164#0000C01AA8000022
    (1592836523.941168) vcan0 17C#0000000010000003
    (1592836523.941285) vcan0 18E#00004D
    (1592836523.941387) vcan0 1CF#80050000000F
    (1592836523.941745) vcan0 1DC#0200000C
    (1592836523.943317) vcan0 183#0000000E0000100D
    (1592836523.943545) vcan0 143#6B6B00C2
括号内的是时间戳，vcan0为我们的虚拟can接口。后面的是ID和数据，ID和数据以#号分割。
也可以去掉-l选项，直接在屏幕上可以打印数据包。
candump是监听并记录原始数据，会有很多对我们无用的数据。can-utils工具包中还有一款可以根据仲裁ID进行分组显示，并对变化的数据以红色显示，它就是cansniffer。  
命令：
    cansniffer -c vcan0
cansniffer可以通过发送按键来过滤显示数据包。注意，当输入按键时，并不会在终端中显示，输入完成后按回车键（一定要记得按）。如下例子则是先关闭所有数据包显示（-000000），然后仅显示ID133和ID244的数据包。
    -000000
    +133
    +244
  1. Wireshark 监听  
wireshark功能简直太强大了，它也可以捕获CAN数据报文。打开wireshark，选择vcan0接口即可监听流量。info列中可以看到ID和数据。wireshark也是原始流量，并为进行去重。  
  2. Kayak监听 
    * 运行socketcand -i vcan0，socketcand可以挂接多个CAN设备，接口名使用逗号分割即可。
    * 然后切换到Kayak的bin目录下，运行./kayak。
    * 单击File菜单->new project(或者ctrl+n快捷键)，输入project名字。
    * 展开右下角connections窗口中的auto discovery，将下面的内容拖到新建的project中并输入一个名字。
    * 右键上一步中创建的bus，选择OPEN Raw View。
    * 单击工具栏中的play 按钮。开始捕获CAN总线流量。点击colorize可以对有变化的数据以不同颜色。同时还可以暂停和停止监听流量操作。  
candump和wireshark监听的流量都是原始流量，我们看到的数据非常多。而Kayak可以按照仲裁ID来进行分组显示，并对不同的
###  重放CAN流量
canplayer程序可以重放candump记录的流量内容。  
输入如下命令即可重放。
    canplayer -i candump的log文件
重放时，可以观察下ICSim仪表盘是否有变化。
对于CAN分析的工具不仅只有这几个，也可以多尝试其他网络上的工具。
## CAN消息逆向
在实战中，各个制造商和车型都有自己唯一的CAN数据包格式，而分析通信数据主要是目的是找到某个特定的信号，例如开车门锁，启动车等。通过上面监听数据，可以看到会有很多数据，这主要由于汽车本身会有很多设备会按照制定的间隔发送数据，这些数据可以称为噪音，这对分析某个具体动作带来麻烦。所以需要对CAN消息进行逆向分析。
###  二分法
  1. 首先通过candump监听数据。 
        candump -l vcan0
  2. 回到控制器界面，进行开门锁操作，然后在关闭车门锁。
  3. 停止监听数据。数据保存到执行`mv candump-2020-06-22_140718.log source` (文件名根据实际情况修改)
  4. 关车门锁操作，执行`canplayer -I source` 重放数据。确认车门锁是否开启。如果没有，请重复上面的步骤。
  5. 输入 `wc -l source` 命令查看文件行数。笔者这里结果为11407行。
  6. 输入 `split -l 6000 source c1` 将source文件分成两个文件。
  7. 使用canplayer重放两个分割后的文件，查看重放的哪个文件打开来车门锁。每次重放前都要执行 `canplayer -I source`。主要是保证每次重放分割的文件前车门锁是关闭的。
  8. 根据第6和7的步骤对包含重放命令的文件进行。这里要注意每次split命令分割的行数减少1倍。例如第二次执行的名为 `split -l 3000 c1aa c2` 。重放命令为 `canplayer -I c2aa`和`canplayer -I c2ab`。这样一直重复知道发现最终的数据包。
经过上面的重复，在13ab的文件中定位到来了ID值和发送的数据。使用 `cansend vcan0 19B#00000E000000`
进行验证。打开车门锁成功。
###  统计法
对于一些只有在进行操作时才会产生的动作，可以通过选择特定的次数，对其发送的次数进行筛选。
  1. 使用 `candump -l vcan0` 捕获数据包。
  2. 在控制器界面中操作5次车门锁操作。
  3. 停止candump。获得保存文件，这里为`candump-2020-06-22_151059.log`。
  4. 通过编写好的脚本，运行 `python3 can.py candump-2020-06-22_151059.log`获得结果
脚本很简单，主要就是遍历所有数据，对ID进行计数统计并显示最终结果，输入ID值可显示对应的数据内容。使用python
20行代码就可以搞定。大家可以自己编写下。
###  观察法
有了上面的一些经验积累后，借助可视化界面来对数据进行观察也可以逆向出其总线ID。  
按照上面启动Kayak的方法，启动监听数据。工具已经对ID进行来分组。将模拟器，控制器和Kayak放在同一个屏幕上。
在控制器界面按下左键，模拟器界面左转向灯闪了一下，观察Kayak界面数据变化，在左转向灯闪时（也就是按下左键时），看哪一个值变了又变会原值，并保持原值。最终定位ID值为188。
现在在进行另外一个例子，在汽车加速过程中，转速表是一直在上升。这就可以通过观察哪一个值是在持续上升的。这里通过控制器界面，按住上方向键，观察哪一个值是在持续增加的。最终定位ID值为244。
可以通过cansend来进行验证，是否成功。
当然除了使用Kayak外，也可以尝试cansniffer。
## ICSim难度设置
以上介绍的几种方法各有利弊，不能满足所有情况，实际的情况会非常复杂，需根据实际情况进行选择。  
对于CAN总线的分析，ICSim支持从0到3的4个级别，默认难度为1级，0为最简单，3是最难。还可以设置随机化的种子值。  
输入 `./icsim -r vcan0` 命令可以显示出随机的种子值。当然也可以使用 `./icsim -s 1419525411 vcan0`
来设置种子值，这样仿真器就可以选择不同的ID和目标字节位置了。  
输入 `./icsim -l 3 vcan0` 命令设置挑战难度。  
大家可以自行尝试增加难度来进行挑战。
## 总结
本文主要以ICSim模拟CAN总线数据，通过多种方式来对CAN总线进行逆向分析，重在方法和工具使用。部分内容并未过多提及，如果一旦拓展开来，需要写的内容实在太多。感兴趣的大家可自行进行深入学习和了解。如果在进行实车的分析和测试也要注意自身安全，提前做好计划和保障。
## 参考或引用来源
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 
  9. 
  10. 
  11. 
## 参考书籍或文档
  1. 《智能网联汽车安全》
  2. 《汽车黑客大曝光》
  3. 《Car Hacking: Accessing and Exploiting the CAN Bus Protocol》