title:Automatic Inference of Search Patterns for Taint-Style Vulnerabilities
author:Fabian Yamaguchi and
Alwin Maier and
Hugo Gascon and
Konrad Rieck
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Automatic Inference of Search Patterns
for Taint-Style Vulnerabilities
Fabian Yamaguchi, Alwin Maier, Hugo Gascon, and Konrad Rieck
University of G¨ottingen, Germany
Abstract—Taint-style vulnerabilities are a persistent problem
in software development, as the recently discovered “Heartbleed”
vulnerability strikingly illustrates. In this class of vulnerabil-
ities, attacker-controlled data is passed unsanitized from an
input source to a sensitive sink. While simple instances of this
vulnerability class can be detected automatically, more subtle
defects involving data ﬂow across several functions or project-
speciﬁc APIs are mainly discovered by manual auditing. Different
techniques have been proposed to accelerate this process by
searching for typical patterns of vulnerable code. However, all
of these approaches require a security expert to manually model
and specify appropriate patterns in practice.
In this paper, we propose a method for automatically inferring
search patterns for taint-style vulnerabilities in C code. Given a
security-sensitive sink, such as a memory function, our method
automatically identiﬁes corresponding source-sink systems and
constructs patterns that model the data ﬂow and sanitization in
these systems. The inferred patterns are expressed as traversals
in a code property graph and enable efﬁciently searching for
unsanitized data ﬂows—across several
functions as well as
with project-speciﬁc APIs. We demonstrate the efﬁcacy of this
approach in different experiments with 5 open-source projects.
The inferred search patterns reduce the amount of code to inspect
for ﬁnding known vulnerabilities by 94.9% and also enable us
to uncover 8 previously unknown vulnerabilities.
Index Terms—Vulnerabilities; Clustering; Graph Databases;
I. INTRODUCTION
The discovery and elimination of vulnerabilities in software
is a fundamental problem of computer security. Unfortunately,
even subtle defects, such as a single missing authorization
check or a slightly insufﬁcient sanitization of data can al-
ready lead to severe security vulnerabilities in software. The
necessity for development of more effective approaches for
the discovery of such vulnerabilities has been made strikingly
obvious by the recent “Heartbleed” vulnerability in the cryp-
tographic library OpenSSL [1] and the “Shellshock” vulnera-
bility in GNU Bash [2]. As programs are constantly modiﬁed
and the properties of the platforms they operate on change,
new vulnerabilities regularly emerge. In effect, vulnerability
discovery becomes an on-going process, requiring experts with
a deep understanding of the software in question and all the
technologies its security relies upon.
Due to the diversity of vulnerable programming practices,
security research has largely focused on detecting speciﬁc
types of vulnerabilities. For example, fuzz testing [e.g., 20, 53]
and symbolic execution [e.g., 49, 59] have been successfully
applied to ﬁnd memory corruption vulnerabilities, such as
buffer overﬂows, integer overﬂows and format string vulner-
abilities. In line with this research, a variety of approaches
for detection of web application vulnerabilities have been
proposed, for example for SQL injection ﬂaws [e.g., 10, 26],
cross-site scripting [e.g., 31, 48] and missing authorization
checks [19, 51]. More recently, several researchers have rec-
ognized that many common vulnerabilities in both, system
software and web applications, share an underlying theme
rooted in information ﬂow analysis: data propagates from an
attacker-controlled input source to a sensitive sink without
undergoing prior sanitization, a class of vulnerabilities referred
to as taint-style vulnerabilities [see 9, 10, 26, 63].
Different approaches have been devised that enable mining
for taint-style vulnerabilities using description languages that
allow dangerous programming patterns to be precisely en-
coded [30, 35, 63]. In theory, this idea bares the possibility to
construct a large database of patterns for known vulnerabilities
that can be easily matched against source code. Unfortunately,
similar to signature-based intrusion detection systems, con-
structing effective search patterns for vulnerabilities requires
a security expert to invest a considerable amount of manual
work. Starting from a security-sensitive sink, the expert needs
to identify related input sources, data ﬂows and corresponding
sanitizations checks, which often involves a profound under-
standing of project-speciﬁc functions and interfaces.
In this paper, we present a method for automatically in-
ferring search patterns for taint-style vulnerabilities from C
source code. Given a sensitive sink, such as a memory or
network function, our method automatically identiﬁes corre-
sponding source-sink systems in a code base, analyzes the
data ﬂow in these systems and generates search patterns that
reﬂect the characteristics of taint-style vulnerabilities. To this
end, we combine techniques from static program analysis and
unsupervised machine learning that enable us to construct
patterns that are usually identiﬁed by manual analysis and that
allow for pinpointing insufﬁcient sanitization, even if the data
ﬂow crosses several function boundaries and involves project-
speciﬁc APIs. Analysts can employ this method to generate
patterns for API functions known to commonly be associated
with vulnerabilities, as well as to ﬁnd instances of the same
vulnerability spread throughout the code base.
We implement our approach by extending the analysis plat-
form Joern1 to support interprocedural analysis and developing
a plugin for extracting and matching of search patterns, that
is, robust descriptions of syntax, control ﬂow and data ﬂow
that characterize a vulnerability. The platform is build on
1A Robust Code Analysis Platform for C/C++, http://mlsec.org/joern
© 2015, Fabian Yamaguchi. Under license to IEEE.
© 2015, Fabian Yamaguchi. Under license to IEEE.
DOI 10.1109/SP.2015.54
DOI 10.1109/SP.2015.54
797
797
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
top of an efﬁcient graph database and uses a so-called code
property graph [63] for representing the syntax, control ﬂow
and data ﬂow of source code. To leverage this representation,
we express the inferred search patterns as graph traversals,
which enables us to quickly pass through the graph and thereby
scan large software projects for occurrences of potential vul-
nerabilities within a few minutes.
We empirically evaluate our method’s ability to generate
search patterns for known vulnerabilities with 5 open-source
projects, showing that the amount of code to review can be
reduced by 94.9%. Moreover, we demonstrate the practical
merits of our method by discovering 8 previously unknown
vulnerabilities using only a few generated search patterns.
In summary, our contributions are the following.
• Extension of code property graphs. We extend the
recently presented code property graph [63] to include
information about statement precedence and enable
interprocedural analysis using graph database queries.
• Extraction of invocation patterns. We propose a novel
method for extracting patterns of invocations from source
code using clustering algorithms, including deﬁnitions
of arguments and the sanitization they undergo.
• Automatic inference of search patterns. Finally, we show
how invocation patterns can be translated into search
patterns in the form of graph traversals that enable
auditing large code bases.
The remainder of this paper is organized as follows: In
Section II we present the basics of taint-style vulnerabilities
and code property graphs. We then introduce our extension
of code property graphs in Section III. Our method for auto-
mated inference of search patterns is presented in Section IV
and evaluated in Section V. We discuss limitations of our
approach and related work in Section VI and VII, respectively.
Section VIII concludes the paper.
II. BACKGROUND
Vulnerability discovery is a classic topic of computer secu-
rity and consequently, many approaches have been presented,
focusing on various types of vulnerabilities and technologies.
In this section, we brieﬂy review approaches related to our
method. We begin by discussing the notion of taint-style
vulnerabilities in Section II-A, as these are the types of vul-
nerabilities we deal with throughout the paper. We proceed to
describe how these types of vulnerabilities can be discovered
using code property graphs in Section II-B, a representation
designed for pattern-based vulnerability discovery, which we
extend for interprocedural analysis.
A. Taint-Style Vulnerabilities
The term taint-style vulnerabilities has its roots in taint
analysis, a technique for tracing the propagation of data
through a program. One goal of taint analysis is to identify data
ﬂows from attacker-controlled sources to security-sensitive
sinks that do not undergo sanitization. This procedure requires
the deﬁnition of (a) appropriate sources, (b) corresponding
/* ssl/d1_both.c */
// [...]
int dtls1_process_heartbeat(SSL *s)
{
unsigned char *p = &s->s3->rrec.data[0], *pl;
unsigned short hbtype;
unsigned int payload;
unsigned int padding = 16; /* Use minimum padding */
/* Read type and payload length first */
hbtype = *p++;
n2s(p, payload);
if (1 + 2 + payload + 16 > s->s3->rrec.length)
return 0; /* silently discard per RFC 6520 sec.4*/
pl = p;
// [...]
if (hbtype == TLS1_HB_REQUEST){
unsigned char *buffer, *bp;
int r;
// [...]
buffer = OPENSSL_malloc(1 + 2 + payload + padding);
bp = buffer;
/* Enter response type, length and copy payload */
*bp++ = TLS1_HB_RESPONSE;
s2n(payload, bp);
memcpy(bp, pl, payload);
bp += payload;
/* Random padding */
RAND_pseudo_bytes(bp, padding);
r = dtls1_write_bytes(s, TLS1_RT_HEARTBEAT,buffer,
3 + payload + padding);
// [...]
if (r 
arg
arg
arg
p
payload
1+2+...
s->s3->...
bp
pl
payload
AST edges
CFG edges
PDG edges
Fig. 2: An excerpt of the code property graph for the “Heartbleed” bug. Data-ﬂow edges, control-ﬂow edges and syntax edges
are indicated by red, green, and blue color respectively.
another as well as how this ﬂow is controlled by conditions. As
a consequence, we base our method on code property graphs,
an intermediate representation of source code that combines
this information in a single structure and can be mined for
vulnerabilities using graph traversals.
B. Code Property Graphs
There exists a large variety of representations for program
code from the areas of software engineering and compiler
design. For example,
the structure of a program can be
described as a syntax tree, while the order in which the
program’s statements are executed is captured in a control-
ﬂow graph. Several of these standard representations can be
expressed as graphs and thus Yamaguchi et al. [63] propose to
mine for vulnerabilities using graph databases. The main idea
of their approach is to construct a so-called code property
graph, a joint representation of a program’s structure, control
ﬂow and data ﬂow in a property graph—the native storage
format of many graph databases. This joint representation
enables programming patterns to be encoded as queries for
graph databases, making it possible to mine large amounts of
code for instances of dangerous programming patterns, and
thus narrow in on vulnerabilities.
Formally, a property graph is an edge-labeled, attributed
multigraph [46]. In practice, this means that key-value pairs
can be attached to nodes and edges to store data. In addition,
edges can be labeled to express different types of relationships
in the graph. For example, for code analysis, nodes can
be created for different
language elements, such as calls,
predicates and arguments. These can then be connected by
labeled edges to represent execution order or data ﬂow.
The code property graph makes use of this versatile data
structure to combine three existing, well-understood program
representations:
the abstract syntax tree, which represents
how program constructs are nested, the control-ﬂow graph,
which exposes statement execution order, and ﬁnally, the pro-
gram dependence graph, which makes data-ﬂow and control-
dependencies explicit [see 3, 14]. Combining these repre-
sentations in a property graph is possible as all of these
representations contain designated nodes for each statement,