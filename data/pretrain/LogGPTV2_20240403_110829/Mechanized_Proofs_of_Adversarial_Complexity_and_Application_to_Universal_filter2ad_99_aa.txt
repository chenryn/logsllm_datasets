title:Mechanized Proofs of Adversarial Complexity and Application to Universal
Composability
author:Manuel Barbosa and
Gilles Barthe and
Benjamin Gr&apos;egoire and
Adrien Koutsos and
Pierre-Yves Strub
Mechanized Proofs of Adversarial Complexity and Application
to Universal Composability
University of Porto (FCUP) & INESC
MPI-SP & IMDEA Software Institute
Manuel Barbosa
TEC
Porto, Portugal
PI:EMAIL
Gilles Barthe
Bochum, Germany
PI:EMAIL
Benjamin Grégoire
Inria & Université Côte d’Azur
Sophia Antipolis, France
PI:EMAIL
Adrien Koutsos
Inria
Paris, France
PI:EMAIL
Pierre-Yves Strub
Institut Polytechnique de Paris
Palaiseau, France
PI:EMAIL
ABSTRACT
In this paper we enhance the EasyCrypt proof assistant to reason
about computational complexity of adversaries. The key technical
tool is a Hoare logic for reasoning about computational complexity
(execution time and oracle calls) of adversarial computations. Our
Hoare logic is built on top of the module system used by EasyCrypt
for modeling adversaries. We prove that our logic is sound w.r.t. the
semantics of EasyCrypt programs — we also provide full semantics
for the EasyCrypt module system, which was previously lacking.
We showcase (for the first time in EasyCrypt and in other compu-
ter-aided cryptographic tools) how our approach can express pre-
cise relationships between the probability of adversarial success
and their execution time. In particular, we can quantify existentially
over adversaries in a complexity class, and express general compo-
sition statements in simulation-based frameworks. Moreover, such
statements can be composed to derive standard concrete security
bounds for cryptographic constructions whose security is proved
in a modular way. As a main benefit of our approach, we revisit se-
curity proofs of some well-known cryptographic constructions and
we present a new formalization of Universal Composability (UC).
CCS CONCEPTS
• Theory of computation → Interactive proof systems; • Se-
curity and privacy → Logic and verification;
KEYWORDS
Verification of Cryptographic Primitives; Formal Methods; Interac-
tive Proof System; Complexity Analysis
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Copyright held by the owner/author(s). Publication rights licensed to the
Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484548
ACM Reference Format:
Manuel Barbosa, Gilles Barthe, Benjamin Grégoire, Adrien Koutsos, and Pierre-
Yves Strub. 2021. Mechanized Proofs of Adversarial Complexity and Appli-
cation to Universal Composability. In Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’21), November
15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
23 pages. https://doi.org/10.1145/3460120.3484548
1 INTRODUCTION
Cryptographic designs are typically supported by mathematical
proofs of security. Unfortunately, these proofs are error-prone and
subtle flaws can go unnoticed for many years, in spite of careful
and extensive scrutiny from experts. Therefore, it is desirable that
cryptographic proofs are formally verified using computer-aided
tools [24]. Over the last decades, many formalisms and tools have
been developed for mechanizing cryptographic proofs [4]. In this
paper we focus on the EasyCrypt proof assistant [7, 10], which
has been used to prove security of a diverse set of cryptographic
constructions in the computational model of cryptography [2, 3].
In this setting, cryptographic designs and their corresponding se-
curity notions are modeled as probabilistic programs. Moreover,
security proofs provide an upper bound on the probability that
an adversary breaks a cryptographic design, often assuming that
the attacker has limited resources that are insufficient to solve a
mathematical problem. While EasyCrypt excels at quantifying the
probability of adversarial success, it lacks support for keeping track
of the complexity of adversarial computations. This is a limitation
that is common to other tools in computer-aided cryptography,
and it means that manual inspection is required to check that the
formalized claims refer to probabilistic programs that fall in the
correct complexity classes. While this may be acceptable for very
simple constructions, for more intricate proofs it may be difficult to
interpret what a proved claim means in the cryptographic sense; in
particular, existing computer-aided tools cannot fully express the
subtleties that arise in compositional approaches such as Universal
Composability [17]. This is an important limitation, as composi-
tional approaches are ideally suited for proving security of complex
cryptographic designs involving many layers of simpler building
blocks. This work overcomes this limitation and showcases the ben-
efits of reasoning about computational complexity in EasyCrypt,
through three broad contributions.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2541Formal verification of complexity statements. We define a formal
system for specifying and proving complexity claims. Our formal
system is based on an expressive module system, which enriches
the existing EasyCrypt module system with declarations of memory
footprints (specifying what is read and written) and cost (specifying
which oracles can be called and how often). This richer module
system is the basis for modeling the cost of a program as a tuple.
The first component of the tuple represents the intrinsic cost of
the program, i.e. its cost in a model where oracle and adversary
calls are free. The remaining components of the tuple represent the
number of calls to oracles and adversaries. This style of modeling
is compatible with cryptographic practice and supports reasoning
compositionally about (open) programs.
Our formal system is built on top of the module system and takes
the form of a Hoare logic for proving complexity claims that upper
bound the cost of expressions and commands. Furthermore, an
embedding of the formal system into a higher-order logic provides
support for reductionist statements relating adversarial advantage
and execution cost, for instance:
∀A.∃B. advS(A) ≤ advH(B) + ϵ ∧ cost(B) ≤ cost(A) + δ
where typically ϵ and δ are polynomial expressions in the num-
ber of oracle calls. The above statement says that every adversary
A can be turned into an adversary B, with sensibly equivalent
resources, such that the advantage of A against a cryptographic
scheme S is upper bounded by the advantage of B against a hard-
ness assumption H. Note that the statement is only meaningful
because the cost of B is conditioned on the cost of A, as the ad-
vantage of an unbounded adversary is typically 1. The ability to
prove and instantiate such ∀∃-statements is essential for capturing
compositional reasoning principles.
We show correctness of our formal system w.r.t. an interpreta-
tion of programs. Our interpretation provides the first complete
semantics for the EasyCrypt module system, which was previously
lacking. This semantics is of independent interest and could be used
to prove soundness of the two program logics supported by Easy-
Crypt: a Relational Hoare Logic [9] and a Union Bound logic [8].
Implementation in the EasyCrypt proof assistant. We have im-
plemented our formal system as an extension to the EasyCrypt
proof assistant, which provides mechanisms for declaring the cost
of operators and for helping users derive the cost of expressions
and programs. Our implementation brings several contributions
of independent interest, including an improvement of the mem-
ory restriction system of EasyCrypt, and a library and automation
support to reason about extended integers that are used for reason-
ing about cost. For the latter we follow [32] and reduce formulae
about extended integers to integer formulae that can be sent to
SMT solvers. Another key step is to embed our Hoare logic for
cost into the ambient higher-order logic—similar to what is done
for the other program logics of EasyCrypt. This allows us to com-
bine judgments from different program logics, and it enhances
the expressiveness of the approach. Implementation-wise, this ex-
tension required to add or rewrite around 8 kLoC of EasyCrypt.
The implementation and examples (including those of the paper as
well as classic examples from the EasyCrypt distribution, including
Bellare and Rogaway BR93 Encryption, Hashed ElGamal encryp-
tion, Cramer-Shoup encryption, and hybrid arguments) are open
source [21].
Case study: Universal Composability. Universal Composability [16,
18] (UC) is a popular framework for reasoning about cryptographic
systems. Its central notion, called UC-emulation, formalizes when
a protocol π1 can safely replace a protocol π2. Informally, UC-
emulation imposes that there exists a simulator S capable of fooling
any environment Z by presenting to it a view that is fully con-
sistent with an interaction with π1, while it is in fact interacting
with S(π2). This intuition, however, must be formalized with tight
control over the capabilities of the environment and the simulator.
If this were not the case, the definition would make no sense: exis-
tential quantification over unrestricted simulators is too weak (it
is crucial for the compositional security semantics that simulators
use comparable resources to real-world attackers), whereas uni-
versal quantification over unrestricted environments results in a
definition that is too strong to be satisfied [16, 17]. Moreover, when
writing proofs in the UC setting, it is often necessary to consider
the joint resources of a sub-part of a complex system that involves a
mixture of concrete probabilistic algorithms and abstract adversar-
ial entities, when they are grouped together to build an attacker for
a reductionistic proof. In these cases, it is very hard to determine
by inspection whether the constructed adversaries are within the
complexity classes for which the underlying computational assump-
tions are assumed to hold. Therefore, tool support for complexity
claims is of particular importance with UC — conversely, UC is a
particularly challenging example for complexity claims.
Using our enriched implementation of EasyCrypt, we develop
a new fully mechanized formalization of UC—in contrast to [20],
which chooses to follow closely the classic execution model for UC,
our mechanization adopts a more EasyCrypt-friendly approach that
is closer to the simplified version of UC proposed by Canetti, Cohen
and Lindell in [19]; this is further discussed in Section 5. Our mech-
anization covers the core notions of UC, the classic composition
lemmas, transitivity and composability, which respectively state
that UC-emulation (as a binary relation between cryptographic
systems) is closed under transitivity and arbitrary adversarial con-
texts. As an illustrative application of our approach we revisit the
example used in [20], where modular proofs for Diffie-Hellman
key exchange and encryption over ideal authenticated channels are
composed to construct a UC secure channel.
Discussion. The possibility to quantify over adversary using
complexity claims introduces conceptual simplifications in layered
proofs by i. supporting compositional reasoning and ii. avoiding
the use of explicit cost accounting modeling. The downside is that
it also introduces some additional burden on users, who now must
prove complexity claims. However, we note that our extension does
not invalidate existing Easycrypt developments: complexity claims
are optional, existing proofs have been left unchanged, and their
type-checking remains as fast as before. Furthermore, it is possible
to layer the complexity claims on top of standard EasyCrypt proofs
that do not capture the complexity aspects – in effect, this is what
we did in our example. We have also provided rudimentary support
to automate proofs of complexity claims, and could enhance this
support even further by adopting ideas from cost analysis. We think
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2542that the current tool is significantly more usable and scalable than
prior versions without support for complexity reasoning.
To make this claim more concrete, let us consider the implications
of refactoring an existing EasyCrypt development and extend it
to take advantage of cost analysis for both dealing with query
counts and to include complexity claims. Removing the layer of
modular wrapping that explicitly keeps track of query counts leads
to more readable code, and has essentially no impact on the proofs.
However, when it comes to complexity claims, new specifications
and proof scripts must be added to the development. The new
specifications consist of the description of the cost model and the
declarations of the types of the various algorithms, which include
explicit cost expressions. The additional proof effort consists of
applying our logic to prove complexity claims and discharging
the relevant side-conditions. As a coarse metric on the additional
proof and specification efforts required, we consider the ratio of
the number of lines of codes related to the cost analysis over the
total number of lines. For the example presented in the next section,
this ratio is 117/495. For the Universal Composability example, the
ratio is 270/2300 for the concrete protocol and 791/1775 for the
general composition theorems. We also note that there is a large
body of work on automated complexity analysis, as mentioned in
the related work section, which might reduce this overhead.
ACKNOWLEDGMENTS
The research leading to these results has received funding the
French National Research Agency (ANR) under the project TECAP
ANR-17-CE39-0004-01.
This work is financed by National Funds through the FCT -
Fundação para a Ciência e a Tecnologia within project PTDC/CCI-
INF/31698/2017.
Work by Gilles Barthe was supported by the Office of Naval
Research (ONR) under project N00014-15-1-2750.
2 WARM UP EXAMPLE: PKE FROM A
ONE-WAY TRAPDOOR PERMUTATION
To illustrate our approach we will use a public-key encryption
(PKE) scheme proposed by [12] (BR93) that uses a one-way trapdoor
permutation and a hash function modeled as a random oracle (RO).
Intuitively, the RO is used to convert the message into a random
input for the trapdoor permutation so as to allow a reduction to
the one-wayness property. This proof strategy is used in BR93 and
many other schemes, including OAEP [12]. Figure 1 shows the code
of an inverter for the trapdoor permutation that is constructed from
an attacker against the encryption scheme.1 This inverter simulates
the single random oracle used by the encryption scheme for the
attacker and recovers the pre-image to y with essentially the same
probability as the attacker breaks the encryption scheme.
We first define module types for random oracles RO, schemes
Scheme, and adversaries Adv. The module type for random oracles
declares a single procedure o with cost ≤ to. The module type for
schemes declares three procedures for key generation, encryption,
and decryption, and is parameterized by a random oracle H. No cost
declaration is necessary. The module type for (chosen-plaintext)
1We use the following notation: $←− denotes a random sampling; || is bit-string concate-
nation; [] is the empty list; a :: l appends a to the list l.
module type RO = {
proc o (r:rand) : plaintext compl[intr : to]}.
module type Scheme (H: RO) = {
proc kg() : pkey ∗ skey
proc enc(pk:pkey, m:plaintext) : ciphertext
proc dec(sk:skey, c:ciphertext) : plaintext option}.
module type Adv (H: RO) = {
proc choose(p:pkey) : (plaintext ∗ plaintext) compl[intr : tc, H.o : kc]
proc guess(c:ciphertext) : bool compl[intr : tд, H.o : kд]}.
module (Inv : INV) (H : RO) (A:Adv) = {
var qs : rand list