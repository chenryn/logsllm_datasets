posed in this paper apply in the context of regular AJAX applica-
tions, to simplify the process of replication, RIPLEY capitalizes on
a recent trend towards distributing compilers such as Links [11],
Hilda [54], Hop [46], and Swift [7]. Distributing compilers allow
both the client and the server portion of the distributed application
to be developed together. We have closely integrated RIPLEY with
Volta [33, 36], a distributing compiler that splits .NET applications,
translating them into JavaScript as needed.
Integration with Volta signiﬁcantly simpliﬁes the process of code
replication because the entire application is given to the Volta com-
piler at compile time. Moreover, Volta provides a relatively nar-
row, standards-based API for DOM manipulation, freeing us from
worrying about accurately mimicking browser-speciﬁc peculiari-
ties within the replica. RIPLEY also integrates into the RPC in-
frastructure of Volta, making the process of communication be-
tween RIPLEY components across different application tiers con-
venient. However, the ideas of RIPLEY are fully applicable to Sil-
verlight [37], Flash [18], as well as regular AJAX applications.
Performance and scalability implications. Another challenge of
the RIPLEY approach is that it places an additional re-execution
burden on the server. This is reﬂected in the form of CPU and
memory overhead, as the replicas run on the server, as well as net-
work overhead because of the need to transmit events.
To reduce the CPU overhead, the re-execution takes place within
a client replica that runs in .NET on the server; because it is JIT-ed
and the IL is strongly typed, .NET is in many cases considerably
faster than JavaScript. While it is possible to run the replica within
a browser on the server, this is generally prohibitively expensive if
responsivenessintegrity of the computationWeb 2.0(AJAX/Silverlight/Flash)Web 1.0(PHP/JSP/CGI scripts)RIPLEY175automatically replicated on the server, ensuring that a malicious
client cannot bypass them. Replicating such checks also automati-
cally ensures that the client- and the server-side sanitization checks
are consistent with each other.
Basic assumptions. RIPLEY does not rely on the integrity of the
client computation. Just as with Web 1.0 applications, the basic
assumption throughout this paper is that anything executing on the
server tier is believed to be un-compromised and trusted, whereas
the client tier, including the browser itself, may be compromised.
In practice, tampering is typically performed by either manipulat-
ing HTTP requests or editing the code executing on the client; the
interested reader is referred to Hoffman and Sullivan [20] for more
details about speciﬁc AJAX vulnerabilities and exploits. Further-
more, the basic replication technology is part of our trusted comput-
ing base: we assume that the translation from .NET to JavaScript
provided by Volta is faithful.
Just as with a Web 1.0 application, the computation is performed
based on the user-provided input (captured as an event stream). If
the user is malicious and is deliberately manufacturing events, or
even if the browser or the underlying OS are compromised, RIP-
LEY is not going to provide worse (or better) integrity compared
to a fully server-side Web 1.0 application. Of course, completely
breaking the need for user input in the form of events for a Web 2.0
or form inputs for Web 1.0 application is impossible if the applica-
tion is to interact with the user at all.
Key goals and non-goals. The key focus of RIPLEY is to provide
assurance to application developers or deployers. The key property
of the RIPLEY model is that the execution that is trusted takes place
entirely on the server. The RIPLEY server and replica pair execute
based on the event stream received from the client. Ultimately,
we are concerned with preserving the integrity of persistent state
of the application, which might include database and ﬁle system
operations executed by the server.
The client-side component is only there to enhance the respon-
siveness of the application. It is possible for the client-side state to
deviate from the replica state; this may not be noticed until the next
RPC or ever, if that difference does not affect RPCs at all. However,
we are not concerned with preserving the client-state of a malicious
user. If we do not wish to detect malicious users, we might choose
to completely ignore RPCs we are receiving from the client in the
browser, relying instead on trusted, high-integrity values computed
by the replica.
RIPLEY does not eliminate the need for input sanitization, how-
ever, the ability to not worry about the placement of sanitizers il-
lustrates the convenience of the RIPLEY model: a sanitizer check
will be ﬁrst performed on the client and then re-executed within
the replica. So, for a benign user unintentionally supplying mal-
formed input, the check will fail quickly on the client. It is not our
goal to convince the user that a particular security policy is satis-
ﬁed within the application; this is the focus on much recent work in
language-based security [7, 8, 10]. Neither it is our focus to ensure
that the user is communicating with the right application or that the
browser or user machine are un-compromised. This can be accom-
plished through remote attestation methods [28]. Also, man-in-the
middle attacks can be addressed with SSL.
In summary, RIPLEY ensures that a distributed web application
behaves just like in the Web 1.0 case: user inputs are untrusted, but
the integrity of the server-side persistent state is guaranteed.
3. RIPLEY IMPLEMENTATION
This section focuses on the implementation details of RIPLEY.
In Section 3.1 we describe Volta, the distributing compiler we used
Figure 3: Tier-splitting in Volta: an application is split into
a server-side component S and a client-side component C.
The original .NET client-side component C is translated into
JavaScript C0 to be run within the browser.
in our implementation. Although RIPLEY does not have to rely
on Volta to work, integrating with Volta makes our approach con-
siderably cleaner. The techniques in RIPLEY are in fact suitable
for any distributed Web application written in JavaScript [12], Sil-
verlight [37], or Flash [18], once the client logic is mimicked on
the server with the help of a replication technology such as server-
side JavaScript. However, Volta allows us to both perform replica-
tion and restrict the expressiveness of the programming model to
limit some of the difﬁcult-to-replicate features; Section 5 provides
a more detailed discussion of replication issues.
The remainder of the section provides a deep dive into the RIP-
LEY implementation. Throughout this section the reader may ﬁnd
it helpful to refer to the following list of components, whose rela-
tionship is shown in Figure 1:
the web application server;
• The server-side component S running in a .NET CLR within
• The client-side component C0 running in JavaScript within
• The replica of the client-side component C running in a
the browser;
.NET CLR within the web application server.
RIPLEY is implemented as an optional extension to the Volta tier-
splitting process. This process takes the original application and
produces S and C, optionally translating C into C0 that runs in
JavaScript. Integrating with the Volta tier-splitter allows RIPLEY
to be implemented as several simple IL-to-IL bytecode rewriting
passes. We assume that the Volta translation (RPC introduction,
etc.) preserves the original application semantics. We also as-
sume that the emulator further described in Section 3.4 is going
to faithfully represent key portions of the client state such as the
DOM and cookies. Given enough assumptions about the original-
to-Volta program and Volta program-to-Ripley program mappings,
we can for example argue that if the server is connected to an ex-
ternal store, such as a SQL database, running a RIPLEY-protected
version of the application and a standalone version of the applica-
tion will result in the same queries sent to the database. Of course,
from the standpoint of the developer, enabling RIPLEY on an ex-
isting Volta application is as easy as ticking a checkbox in a Volta
project conﬁguration. In the rest of this section, we shall describe
each of the components above in detail.
3.1 Volta Background
While the RIPLEY approach can be used for general AJAX-based
Web applications, integrating with Volta provides a number of clear
advantages. As illustrated in Figure 3, the Volta compiler is a dis-
tributing compiler that takes a .NET application as input and tier-
splits it into a client and a server component by replacing appro-
priate cross-tier method calls with AJAX RPCs. Data is serialized
before being sent to the server and deserialized on the server once
received. A similar serialization-deserialization happens when the
server returns control to the client. The client-side component is
SC’SC176// a custom button handler
this.button.Click += delegate {
var name = this.userName.Value;
var pass = this.passWord.Value;
Login l = new Login();
l.attempt(name, pass);
}
(a) A typical button on-click handler
// our rewriter adds the following handler
this.button.Click += delegate {
// capture the event
HtmlEventArgs evt = this.Window.Event;
// read target object ID
var id = evt.__ObjectId;
// event type: keyboard, click, etc.
var type = evt.Type;
// extra event-specific data
var data = serializeData(evt);
// enqueue event for transfer
__ClientManager.
enqueueEvent(type, data, id);
}
Figure 4: (b) RIPLEY-generated handler for event interception.
translated into JavaScript for execution in an unmodiﬁed standards-
compliant browser [33, 36].
Volta allows the developer to declaratively deﬁne which por-
tion of the application runs on the server and which part on the
client with the help of class-level annotations. Tier-splitting is per-
formed subsequently as a .NET bytecode rewriting pass that reads
the placement annotations, introducing RPCs as needed. To imple-
ment RIPLEY, we have augmented the Volta tier-splitter to perform
additional rewriting steps described in Section 3. We have also
augmented the base Volta libraries to provide support for browser
emulation, as described in Section 3.4.
Volta simpliﬁes some of the emulation challenges: because the
Volta interface to the DOM is a relatively narrow, standards-based
API, we do not have to worry about faithfully reproducing browser
incompatibilities for every known browser in the emulator. More
speciﬁcally, Volta disallows free-form HTML manipulation, expos-
ing a well-typed DOM API that can be replicated on the server
without the need for an HTML renderer or JavaScript interpreter.
The alternative of checking the browser User-Agent string and
customizing emulator behavior based on that is possible, but re-
quires more implementation effort.
3.2 C0: Instrumenting the Client
Prior to being translated to JavaScript, the client binary C gener-
ated by the tier-splitter is rewritten to capture client-side user events
and send them to the server. Note that in the RIPLEY model, the
server is trusted; we assume that sending events to the server does
not violate the privacy of the user. If, for example, mouse click
coordinates are used as a source of randomness on the client to per-
form client-side data encryption, sending them to the server might
be undesirable, as it will undo the point of client-side encryption.
3.2.1 Event Handling
In RIPLEY, events are classiﬁed into two kinds — primitive
events and custom events. Primitive events include each key press
and mouse click event, regardless of whether the application actu-
ally has registered any handlers for them. Custom events are those
that the application has registered explicit handlers for. A typical
handler for a button click event is shown in Figure 4a. Clearly, it
is crucial to intercept these events on the client and relay them to
C for replay. Tracking primitive events helps maintain the state of
crucial elements such as text areas and radio buttons. For instance,
each keystroke a user types into an HTML form will produce a sep-
arate keyboard event that is intercepted by RIPLEY and transferred
to the replica. As an optimization, multiple keyboard events sent to
the same HTML element can be combined into a single meta-event.
Note that we do not handle all JavaScript events that occur on the
client; doing so would involve listening to all MouseMove events,
for example, which occur every time the user repositions the mouse
pointer. Clearly, this would be prohibitively expensive and gener-
ally unnecessary. Another reason is that our DOM emulation dis-
cussed in Section 3.4 is only an approximation of the real DOM
and does not maintain information about the mouse position, etc.
This seems sufﬁcient for applications we study in our experiments.
3.2.2 Event Interception
Primitive events are intercepted by registering a handler for each
on the HTML BODY element. Since in the HTML event model,
all events bubble up (or propagate) to the top-level document BODY
element, it is a convenient point to intercept them. To intercept
custom events, RIPLEY registers an extra handler shown in pseudo-
code in Figure 4b for each event of interest, via bytecode rewriting.
Note that we perform this rewriting at the .NET level, before the IL
is translated into JavaScript.
RIPLEY-generated event handlers enqueue details about the
event into an application-speciﬁc queue. In addition to the event
type (key press, key release, etc.), the serialized event details in-
clude the key code for keyboard-related events, mouse button in-
formation for mouse events, etc. Finally, the unique identiﬁer cor-
responding to the DOM object which raised this event is also sent
over, so that the event can be delivered to the corresponding DOM
object within the replica.
3.2.3 Event Transfer
To reduce the number of round trips to the server, which is likely
to become a bottleneck on high-latency connections, events are
asynchronously relayed to the server in batches. Figure 5a and 5b
show two scenarios of how events may be batched on the client
and transmitted to the server. There is a natural trade-off between
eager and lazy event transfer. As Figure 5a demonstrates, send-
ing events eagerly will result in excess of network usage, which
might be costly on a mobile connection, for instance, but will en-
sure speedy replication on the server. On the other hand, batching
events longer as in Figure 5b would result in minimal network us-
age, but will delay the integrity checking and resulting server up-
dates and responses.
To resolve this trade-off between responsiveness and network us-
age, we adopt a simple middle-path strategy. Events are batched
until the queue reaches the maximum size of a network packet, in
which case they are sent over immediately. Otherwise, whenever
there is a RPC call, all events in the queue are ﬂushed to the server.
3.3 S: Adding a Ripley Checker
RIPLEY modiﬁes the server binary S to receive and properly
handle events arriving from the client and relay them to the client
replica C for replay. Events are deserialized from the wire be-
fore being delivered to C. RIPLEY intercepts the RPCs that are
received from both the JavaScript client and the replica and records
them into audit logs, as shown in Figure 6. Note that checking is
only needed if we wish to actively detect malicious clients — other-
177Figure 5: Eager (a) and lazy (b) event transfer. Events e1 and e2 arrive one after another. In a, they are sent over to the server right
away. In b, they are queued-up and sent with the next RPC. While the overall completion time is later in the lazy case (as shown by
a red ﬁlled square), one network message vs. three messages is used.
ically linked libraries and maintains its copy of global data struc-
tures. Moreover, cross-APPDOMAIN communications are cheaper
than inter-process communication in general as they do not re-
quire a process context switch and APPDOMAINs can share certain
DLLs. We should point out that on a multi-core machine the RIP-
LEY replicas can be put on the extra cores, if those are currently
unused. In this architecture, it would also be desirable to co-locate
the client-side replica on the same core as the server thread it is
communicating with. We further address the question of server
scalability in the next section.
3.4 C: Emulator and the Client Replica
Figure 6: Audit logs from C and C0.
wise, the application can simply ignore RPCs m0 received from C0,
replying on m values instead, with the server integrity fully pre-
served.
By default, RIPLEY waits until it receives and compares RPCs
m and m0. Only when they are equivalent does the runtime relay
the RPC call to the application server code. The return response
from the server is again intercepted as a string at the HTTP level.