                   transform = originalImage;
                   return;
            }
        }
`transfrombit`方法，参数d基本就是读取第dbit的数据，根据之前的说明 Alpha
7是getRGB的数据的最高位，第31bit，根据getText方法可以知道Aplpha
7对应的transNum值为2，再看calcTrans的case2就是调用transfrombit(31)。
        private void transfrombit(int d)
        {
            transform = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_INT_RGB);
            for(int i=0;i>>d)&1)>0)//右移d个bit位，再取最低位，如果大于0表示对应Bit位为1，那么就设置对应像素值为0xffffff，也就是（255,255,255），对应白色，如果Bit位为0，则是设置为（0,0,0），对应为黑色
                       col=0xffffff;
                    transform.setRGB(i, j, col);
                 }
        }
## zsteg
跟进一下代码执行流程，了解各个参数的意义。
## 入口
程序执行流程的文件
/bin/zsteg
/lib/zsteg.rb run方法
/lib/zsteg/cli/cli.rb
run方法，这里会对参数解析，这里截取一些之后需要用到的参数，完整的自行看源码吧，解析完参数后，主要是最后的动态方法调用，[@actions](https://github.com/actions
"@actions")=[‘check’]，因此动态调用check方法
    def run
    @actions = []
    @options = {
     :verbose => 0,
     :limit => Checker::DEFAULT_LIMIT,
     :order => Checker::DEFAULT_ORDER
    }
    optparser = OptionParser.new do |opts|
     opts.banner = "Usage: zsteg [options] filename.png [param_string]"
     opts.separator ""
     opts.on("-c", "--channels X", /[rgba,1-8]+/,
             "channels (R/G/B/A) or any combination, comma separated",
             "valid values: r,g,b,a,rg,bgr,rgba,r3g2b3,..."
     ) do |x|
       @options[:channels] = x.split(',')
       # specifying channels on command line disables extra checks
       @options[:extra_checks] = false
     end
     opts.on("-b", "--bits N", "number of bits, single int value or '1,3,5' or range '1-8'",
             "advanced: specify individual bits like '00001110' or '0x88'"
     ) do |x|
       a = []
       x = '1-8' if x == 'all'
       x.split(',').each do |x1|
         if x1['-']
           t = x1.split('-')
           a  1 && @options[:verbose] >= 0
          puts if idx > 0
          puts "[.] #{fname}".green
        end
        next unless @img=load_image(@fname=fname)
        @actions.each do |action|
          if action.is_a?(Array)
            self.send(*action) if self.respond_to?(action.first)
          else
            self.send(action) if self.respond_to?(action)
          end
        end
      end
    rescue Errno::EPIPE
      # output interrupt, f.ex. when piping output to a 'head' command
      # prevents a 'Broken pipe -  (Errno::EPIPE)' message
    end
/lib/zsteg/cli/cli.rb check方法
    def check Checker.new(@img, @options).check end
/lib/zsteg/checker.rb
initialize方法，初始化一些成员变量，[@extractor](https://github.com/extractor
"@extractor")也是传入了图像数据的，通道判断了图片属性是否有alpha通道。
     def initialize image, params = {}
       [@params](https://github.com/params "@params") = params
       [@cache](https://github.com/cache "@cache") = {}; [@wastitles](https://github.com/wastitles "@wastitles") = Set.new
       [@image](https://github.com/image "@image") = image.is_a?(ZPNG::Image) ? image : ZPNG::Image.load(image)
       [@extractor](https://github.com/extractor "@extractor") = Extractor.new([@image](https://github.com/image "@image"), params)
       [@channels](https://github.com/channels "@channels") = params[:channels] ||
         if [@image](https://github.com/image "@image").alpha_used?
           %w'r g b a rgb bgr rgba abgr'
         else
           %w'r g b rgb bgr'
         end
       [@verbose](https://github.com/verbose "@verbose") = params[:verbose] || -2
       [@file_cmd](https://github.com/file_cmd "@file_cmd") = FileCmd.new
       [@results](https://github.com/results "@results") = []
       [@params](https://github.com/params "@params")[:bits]  ||= DEFAULT_BITS
       [@params](https://github.com/params "@params")[:order] ||= DEFAULT_ORDER
       [@params](https://github.com/params "@params")[:limit] ||= DEFAULT_LIMIT
       if [@params](https://github.com/params "@params")[:min_str_len]
         [@min_str_len](https://github.com/min_str_len "@min_str_len") = [@min_wholetext_len](https://github.com/min_wholetext_len "@min_wholetext_len") = [@params](https://github.com/params "@params")[:min_str_len]
       else
         [@min_str_len](https://github.com/min_str_len "@min_str_len") = DEFAULT_MIN_STR_LEN
         [@min_wholetext_len](https://github.com/min_wholetext_len "@min_wholetext_len") = [@min_str_len](https://github.com/min_str_len "@min_str_len") - 2
       end
       [@strings_re](https://github.com/strings_re "@strings_re") = /[x20-x7ernt]{#[@min_str_len](https://github.com/min_str_len "@min_str_len"),}/
       [@extra_checks](https://github.com/extra_checks "@extra_checks") = params.fetch(:extra_checks, DEFAULT_EXTRA_CHECKS)
     end
/lib/zsteg/checker.rb check方法,截取部分，会判断图片是否是bmp的，只有bmp的-o选项内才有b，如果设置为all也只是多了bY的选项，但是通过之后代码分析是可以by yb
Yb的。判断order中是否有b用的是正则，因此大小写一样。接着数据读取就到check_channels方法了。
    def check
      [@found_anything](https://github.com/found_anything "@found_anything") = false
      [@file_cmd](https://github.com/file_cmd "@file_cmd").start!
      if [@image](https://github.com/image "@image").format == :bmp
        case params[:order].to_s.downcase
        when /all/
          params[:order] = %w'bY xY xy yx XY YX Xy yX Yx'
        when /auto/
          params[:order] = %w'bY xY'
        end
      else
        case params[:order].to_s.downcase
        when /all/
          params[:order] = %w'xy yx XY YX Xy yX xY Yx'
        when /auto/
          params[:order] = 'xy'
        end
      end
      Array(params[:order]).uniq.each do |order|
        (params[:prime] == :all ? [false,true] : [params[:prime]]).each do |prime|
          Array(params[:bits]).uniq.each do |bits|
            p1 = [@params](https://github.com/params "@params").merge :bits => bits, :order => order, :prime => prime
            if order[/b/i]
              # byte iterator does not need channels
              check_channels nil, p1
            else
              channels.each{ |c| check_channels c, p1 }
            end
          end
        end
      end
      if [@found_anything](https://github.com/found_anything "@found_anything")
        print "r" + " "*20 + "r" if [@need_cr](https://github.com/need_cr "@need_cr")
      else
        puts "r[=] nothing :(" + " "*20 # line cleanup
      end
      if [@extra_checks](https://github.com/extra_checks "@extra_checks")
        Analyzer.new([@image](https://github.com/image "@image")).analyze!
      end
      # return everything found if this method was called from some code
      [@results](https://github.com/results "@results")
    ensure
      [@file_cmd](https://github.com/file_cmd "@file_cmd").stop!
    end
/lib/zsteg/checker.rb
check_channels方法，首先判断是否设置了bit_order，没设置则两个都测试，之后就是区分两种模式了，channels有值的，最后是去的color_extractor.rb，没有值的去的byte_extractor.rb。
color_extractor模式，还要判断channels指定的模式，是就rgb还是会单独指定每个通道读取多少Bit的。确定过每个像素读取多少bit，然后乘以总的像素点除以8确认读取字节数。
byte)extractor模式，nbits是-b参数指定的读取bit数，乘以一行的字节数，再乘以高/8。
`show_title title`输出当前模式
`data = [@extractor](https://github.com/extractor "@extractor").extract
p1`读取数据
        def check_channels channels, params
          unless params[:bit_order]
            check_channels(channels, params.merge(:bit_order => :lsb))
            check_channels(channels, params.merge(:bit_order => :msb))
            return
          end
          p1 = params.clone
          # number of bits
          # equals to params[:bits] if in range 1..8
          # otherwise equals to number of 1's, like 0b1000_0001
          nbits = p1[:bits]  0x100
                if params[:bits].to_s(2) =~ /(1{1,8})$/
                  # mask => number of bits
                  "b#{$1.size}"
                else
                  # mask
                  "b#{(params[:bits]&0xff).to_s(2)}"
                end
              else
                # number of bits
                "b#{params[:bits]}"
              end
            end
          title = [
            bits_tag,
            channels,
            params[:bit_order],
            params[:order],
            params[:prime] ? 'prime' : nil
          ].compact.join(',')
          return if @wastitles.include?(title)
          @wastitles << title
          show_title title
          p1[:title] = title
          data = @extractor.extract p1
          if p1[:invert]
            data.size.times{ |i| data.setbyte(i, data.getbyte(i)^0xff) }
          end
          @need_cr = !process_result(data, p1) # carriage return needed?
          @found_anything ||= !@need_cr
        end
/lib/zsteg/extractor.rb 根据-o选项中是否包含b选择不同模式
     def extract params = {}
       [@limit](https://github.com/limit "@limit") = params[:limit].to_i
       [@limit](https://github.com/limit "@limit") = 2**32 if [@limit](https://github.com/limit "@limit") <= 0
       if params[:order] =~ /b/i
         byte_extract params
       else
         color_extract params
       end
     end
在分类说明两个模式的时候，先将一个方法拿出来做个说明，bit_indexes
**bit_indexes**