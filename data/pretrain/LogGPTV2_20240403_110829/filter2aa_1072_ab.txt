This section describes functions used to initialize and manage the state of the History library
when you want to use the history functions in your program.
[Function]
void using_history (void)
Begin a session in which the history functions might be used. This initializes the
interactive variables.
[Function]
HISTORY_STATE * history_get_history_state (void)
Return a structure describing the current state of the input history.
[Function]
void history_set_history_state (HISTORY STATE *state)
Set the state of the history list according to state.
2.3.2 History List Management
These functions manage individual entries on the history list, or set parameters managing
the list itself.
[Function]
void add_history (const char *string)
Place string at the end of the history list. The associated data ﬁeld (if any) is set to
NULL.
[Function]
void add_history_time (const char *string)
Change the time stamp associated with the most recent history entry to string.
[Function]
HIST_ENTRY * remove_history (int which)
Remove history entry at oﬀset which from the history.
The removed element is
returned so you can free the line, data, and containing structure.
[Function]
histdata_t free_history_entry (HIST ENTRY *histent)
Free the history entry histent and any history library private data associated with it.
Returns the application-speciﬁc data so the caller can dispose of it.
[Function]
HIST_ENTRY * replace_history_entry (int which, const char *line,
histdata t data)
Make the history entry at oﬀset which have line and data. This returns the old entry
so the caller can dispose of any application-speciﬁc data. In the case of an invalid
which, a NULL pointer is returned.
Chapter 2: Programming with GNU History
6
[Function]
void clear_history (void)
Clear the history list by deleting all the entries.
[Function]
void stifle_history (int max)
Stiﬂe the history list, remembering only the last max entries.
[Function]
int unstifle_history (void)
Stop stiﬂing the history. This returns the previously-set maximum number of history
entries (as set by stifle_history()). The value is positive if the history was stiﬂed,
negative if it wasn’t.
[Function]
int history_is_stifled (void)
Returns non-zero if the history is stiﬂed, zero if it is not.
2.3.3 Information About the History List
These functions return information about the entire history list or individual list entries.
[Function]
HIST_ENTRY ** history_list (void)
Return a NULL terminated array of HIST_ENTRY * which is the current input history.
Element 0 of this list is the beginning of time. If there is no history, return NULL.
[Function]
int where_history (void)
Returns the oﬀset of the current history element.
[Function]
HIST_ENTRY * current_history (void)
Return the history entry at the current position, as determined by where_history().
If there is no entry there, return a NULL pointer.
[Function]
HIST_ENTRY * history_get (int oﬀset)
Return the history entry at position oﬀset, starting from history_base (see Sec-
tion 2.4 [History Variables], page 8). If there is no entry there, or if oﬀset is greater
than the history length, return a NULL pointer.
[Function]
time_t history_get_time (HIST ENTRY *entry)
Return the time stamp associated with the history entry entry.
[Function]
int history_total_bytes (void)
Return the number of bytes that the primary history entries are using. This function
returns the sum of the lengths of all the lines in the history.
2.3.4 Moving Around the History List
These functions allow the current index into the history list to be set or changed.
[Function]
int history_set_pos (int pos)
Set the current history oﬀset to pos, an absolute index into the list. Returns 1 on
success, 0 if pos is less than zero or greater than the number of history entries.
[Function]
HIST_ENTRY * previous_history (void)
Back up the current history oﬀset to the previous history entry, and return a pointer
to that entry. If there is no previous entry, return a NULL pointer.
Chapter 2: Programming with GNU History
7
[Function]
HIST_ENTRY * next_history (void)
Move the current history oﬀset forward to the next history entry, and return the a
pointer to that entry. If there is no next entry, return a NULL pointer.
2.3.5 Searching the History List
These functions allow searching of the history list for entries containing a speciﬁc string.
Searching may be performed both forward and backward from the current history position.
The search may be anchored, meaning that the string must match at the beginning of the
history entry.
[Function]
int history_search (const char *string, int direction)
Search the history for string, starting at the current history oﬀset. If direction is less
than 0, then the search is through previous entries, otherwise through subsequent
entries. If string is found, then the current history index is set to that history entry,
and the value returned is the oﬀset in the line of the entry where string was found.
Otherwise, nothing is changed, and a -1 is returned.
[Function]
int history_search_prefix (const char *string, int direction)
Search the history for string, starting at the current history oﬀset. The search is
anchored: matching lines must begin with string. If direction is less than 0, then the
search is through previous entries, otherwise through subsequent entries. If string is
found, then the current history index is set to that entry, and the return value is 0.
Otherwise, nothing is changed, and a -1 is returned.
[Function]
int history_search_pos (const char *string, int direction, int pos)
Search for string in the history list, starting at pos, an absolute index into the list.
If direction is negative, the search proceeds backward from pos, otherwise forward.
Returns the absolute index of the history element where string was found, or -1
otherwise.
2.3.6 Managing the History File
The History library can read the history from and write it to a ﬁle. This section documents
the functions for managing a history ﬁle.
[Function]
int read_history (const char *ﬁlename)
Add the contents of ﬁlename to the history list, a line at a time. If ﬁlename is NULL,
then read from ‘~/.history’. Returns 0 if successful, or errno if not.
[Function]
int read_history_range (const char *ﬁlename, int from, int to)
Read a range of lines from ﬁlename, adding them to the history list. Start reading at
line from and end at to. If from is zero, start at the beginning. If to is less than from,
then read until the end of the ﬁle. If ﬁlename is NULL, then read from ‘~/.history’.
Returns 0 if successful, or errno if not.
[Function]
int write_history (const char *ﬁlename)
Write the current history to ﬁlename, overwriting ﬁlename if necessary. If ﬁlename
is NULL, then write the history list to ‘~/.history’. Returns 0 on success, or errno
on a read or write error.
Chapter 2: Programming with GNU History
8
[Function]
int append_history (int nelements, const char *ﬁlename)
Append the last nelements of the history list to ﬁlename. If ﬁlename is NULL, then
append to ‘~/.history’. Returns 0 on success, or errno on a read or write error.
[Function]
int history_truncate_file (const char *ﬁlename, int nlines)
Truncate the history ﬁle ﬁlename, leaving only the last nlines lines. If ﬁlename is
NULL, then ‘~/.history’ is truncated. Returns 0 on success, or errno on failure.
2.3.7 History Expansion
These functions implement history expansion.
[Function]
int history_expand (char *string, char **output)
Expand string, placing the result into output, a pointer to a string (see Section 1.1
[History Interaction], page 1). Returns:
0
If no expansions took place (or, if the only change in the text was the
removal of escape characters preceding the history expansion character);
1
if expansions did take place;
-1
if there was an error in expansion;
2
if the returned line should be displayed, but not executed, as with the :p
modiﬁer (see Section 1.1.3 [Modiﬁers], page 2).
If an error ocurred in expansion, then output contains a descriptive error message.
[Function]
char * get_history_event (const char *string, int *cindex, int qchar)
Returns the text of the history event beginning at string + *cindex.
*cindex is
modiﬁed to point to after the event speciﬁer. At function entry, cindex points to the
index into string where the history event speciﬁcation begins. qchar is a character
that is allowed to end the event speciﬁcation in addition to the “normal” terminating
characters.
[Function]
char ** history_tokenize (const char *string)
Return an array of tokens parsed out of string, much as the shell might. The tokens
are split on the characters in the history word delimiters variable, and shell quoting
conventions are obeyed.
[Function]
char * history_arg_extract (int ﬁrst, int last, const char *string)
Extract a string segment consisting of the ﬁrst through last arguments present in
string. Arguments are split using history_tokenize.
2.4 History Variables
This section describes the externally-visible variables exported by the gnu History Library.
[Variable]
int history_base
The logical oﬀset of the ﬁrst entry in the history list.
[Variable]
int history_length
The number of entries currently stored in the history list.
Chapter 2: Programming with GNU History
9
[Variable]
int history_max_entries
The maximum number of history entries.
This must be changed using stifle_
history().
[Variable]
int history_write_timestamps
If non-zero, timestamps are written to the history ﬁle, so they can be preserved
between sessions. The default value is 0, meaning that timestamps are not saved.
[Variable]
char history_expansion_char
The character that introduces a history event. The default is ‘!’. Setting this to 0
inhibits history expansion.
[Variable]
char history_subst_char
The character that invokes word substitution if found at the start of a line. The
default is ‘^’.
[Variable]
char history_comment_char
During tokenization, if this character is seen as the ﬁrst character of a word, then
it and all subsequent characters up to a newline are ignored, suppressing history
expansion for the remainder of the line. This is disabled by default.
[Variable]
char * history_word_delimiters
The characters that separate tokens for history_tokenize(). The default value is "
\t\n()<>;&|".
[Variable]
char * history_search_delimiter_chars
The list of additional characters which can delimit a history search string, in addition
to space, TAB, ‘:’ and ‘?’ in the case of a substring search. The default is empty.
[Variable]
char * history_no_expand_chars
The list of characters which inhibit history expansion if found immediately following
history expansion char. The default is space, tab, newline, carriage return, and ‘=’.
[Variable]
int history_quotes_inhibit_expansion
If non-zero, single-quoted words are not scanned for the history expansion character.
The default value is 0.
[Variable]
rl_linebuf_func_t * history_inhibit_expansion_function
This should be set to the address of a function that takes two arguments: a char *
(string) and an int index into that string (i). It should return a non-zero value if the
history expansion starting at string[i] should not be performed; zero if the expansion
should be done. It is intended for use by applications like Bash that use the history
expansion character for additional purposes. By default, this variable is set to NULL.
2.5 History Programming Example
The following program demonstrates simple use of the gnu History Library.
#include 
#include 
main (argc, argv)
Chapter 2: Programming with GNU History