    public void getRemoteImage(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter("imageURL");
        try {
            URL u = new URL(url);
            URLConnection urlConnection = u.openConnection();
            BufferedInputStream in = new BufferedInputStream(urlConnection.getInputStream());
            List buffer = new ArrayList<>();
            int length = -1;
            while ((length = in.read()) != -1){
                buffer.add((byte) length);
            }
            in.close();
            byte[] image2 = new byte[buffer.size()];
            for (int i = 0; i 
> readResolve()函数在readObject()函数执行前执行，开发者可以通过对readResolve()函数进行过滤和验证，来增强程序的安全性。
Java反序列化的函数主要包括以下几种：
  1. ObjectInputStream.readObject()：从ObjectInputStream中读取对象并进行反序列化。
  2. ObjectOutputStream.writeObject()：将对象写入ObjectOutputStream并进行序列化。
  3. XMLDecoder.readObject()：从XMLDecoder中读取XML并进行反序列化。
  4. XMLEncoder.writeObject()：将对象写入XMLEncoder并进行序列化。
  5. JSONDeserializer.deserialize()：从JSON字符串中反序列化对象。
  6. Jackson ObjectMapper.readValue()：使用Jackson库从JSON字符串中反序列化对象。
在实现过程中，我直接使用`ObjectInputStream`完成该项演示。对象序列化字符串通过 Cookie 里面的 rememberMe
参数获取。再通过 readObject 实例化对象。  
代码来源：`com/pika/electricrat/serialize/SerializeServlet.java`
    public void serializeView(HttpServletRequest request, HttpServletResponse response){
        response.setContentType("text/plan;charset=utf-8");
        try {
            Cookie hasCookie = checkCookie(request);
            if (hasCookie != null){
                if (hasCookie.getValue().equals("deleteMe")){
                    response.getWriter().append("请更新 Cookie rememberMe 并进行请求。");
                    return;
                }
                byte[] decode = Base64.getDecoder().decode(hasCookie.getValue());
                ByteArrayInputStream bytes = new ByteArrayInputStream(decode);
                ObjectInputStream in = new ObjectInputStream(bytes);
                Object o = in.readObject();
                response.getWriter().append(((UserSerializeEntity)o).getRes());
                in.close();
            } else {
                response.getWriter().append("请携带 Cookie rememberMe 进行请求。");
            }
        } catch (Exception e){
            e.printStackTrace();
            response.setStatus(500);
        }
    }
为了达到 RCE 的效果，我先创建了一个类实现`Serializable`。  
代码来源：`com/pika/electricrat/serialize/po/UserSerializeEntity.java`
    public class UserSerializeEntity extends UserEntity implements Serializable {
        private String cmd;
        private String res;
        public String getCmd() {
            return cmd;
        }
        public void setCmd(String cmd) {
            this.cmd = cmd;
        }
        public String getRes() {
            return res;
        }
        public void setRes(String res) {
            this.res = res;
        }
        @Serial
        private void readObject(java.io.ObjectInputStream stream) throws Exception{
            stream.defaultReadObject();
            res = RceServlet.execCmd(cmd);
        }
    }
重写 readObject
让它在实例化的时候执行`RceServlet.execCmd`函数，这个函数是我自己编写用来执行命令的函数。这里图方便直接引用了。实际上应该自己写`Runtime.getRuntime().exec`，下面是`execCmd`方法的详细。  
代码来源：`com/pika/electricrat/rce/RceServlet.java`
    public static String execCmd(String cmd) throws IOException, InterruptedException {
        List bash_cmd = new ArrayList<>();
        bash_cmd.add("/bin/sh");
        bash_cmd.add("-c");
        bash_cmd.add(cmd);
        Process p = Runtime.getRuntime().exec(bash_cmd.toArray(new String[bash_cmd.size()]));
        InputStream is = p.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
        String line;
        StringBuilder text = new StringBuilder();
        while((line = reader.readLine())!= null){
            text.append(line).append("\n");
        }
        p.waitFor();
        is.close();
        reader.close();
        p.destroy();
        return text.toString();
    }
# 如何贡献代码和反馈问题
ElectricRat 是一个开源项目，欢迎开发者和用户一起参与贡献。如果您发现了问题或者有任何建议，可以通过以下方式反馈：
  * 在 GitHub 上提交 issue：
  * 通过电子邮件联系我：[PI:EMAIL](mailto:PI:EMAIL)
如果您想为 ElectricRat 贡献代码，可以通过以下方式参与：
  * Fork 仓库并创建新的分支；
  * 编写新的代码或者修复已知问题；
  * 提交 Pull Request。
# 结语
暂时写了这么多。不是所有事情都是在某一刻完结。后续如果有好的漏洞案例也会被添加进来。希望大家玩的开心的同时学到东西。无论该系统拿来试炼还是当轮子用都可以。  
最后感谢您使用 ElectricRat，如果您对 ElectricRat 有任何问题或者建议，欢迎随时联系我。