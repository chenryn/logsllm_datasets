**nginx**
nginx 的日志主要分为 `access.log`、`error.log` 两种，可通过查看 `nginx.conf` 文件来查找相关日志路径
- `/var/log/nginx/access.log` : 主要记录访问日志，记录访问客户端 ip 地址、访问时间、访问页面等信息。
- `/var/log/nginx/error.log` : 主要记录一些错误信息。
**tomcat**
tomcat 日志默认路径：在安装目录下的 logs 文件夹下
- 如果在安装中默认修改了日志存储位置，可在 `conf/logging.properties` 文件中查看
- `catalina.out` : 运行中的日志，主要记录运行中产生的一些信息，尤其是一些异常错误日志信息
- `catalina.Y-M-D.log` : 是 tomcat 自己运行的一些日志，这些日志还会输出到 `catalina.out`，但是应用向 console 输出的日志不会输出到 `catalina.{yyyy-MM-dd}.log`
- `host-manager.xx.log` : 管理日志
- `localhost.xx.log` : 程序异常没有被捕获的时候抛出的地方，Tomcat 下内部代码丢出的日志(jsp 页面内部错误的异常，`org.apache.jasper.runtime.HttpJspBase.service` 类丢出的，日志信息就在该文件!)应用初始化(listener,filter, servlet)未处理的异常最后被 tomcat 捕获而输出的日志，而这些未处理异常最终会导致应用无法启动。
- `manager.xx.log`
- `localhost_access_log` : 主要记录访问日志信息，记录访问的的时间、ip 地址等信息，也是应急中经常用到的日志信息
**weblogic**
weblogic 在安装结束后默认开启了日志记录功能，默认配置情况下，weblogic 会有3种日志，分别是 `accesslog`, `Server log` 和 `domain log`，WebLogic8.x 和 9 及以后的版本目录结构有所不同。
- `domain_name/servers/server_name/logs/`
- `$MW_HOME` 是 WebLogic 的安装目录
- `` 是域的实际名称，是在创建域的时候指定的
- `` 是 Server 的实际名称，是在创建 Server 的时候指定的
- `` 是 Admin Server 的实际名称，是在创建 Admin Server 的时候指定的。
WebLogic 9及以后版本：
- `domain log` : 主要记录了一个 domain 的运行情况，一个 domain 中的各个 weblogic server 可以把它们的一些信息（如：严重错误）发送到 AdminServer 上，AdminServer 把这些信息传递到 domain.log 上.
    ```
    $MW_HOME\user_projects\domains\\servers\\logs\.log
    ```
- `server log` : 主要用于服务器的一般日志记录，比如 weblogic 的启动、关闭、部署应用等相关记录，日志格式：依次为时间戳，严重程度，子系统，计算机名，服务器名，线程 ID.
    ```
    $MW_HOME\user_projects\domains\\servers\\logs\.log
    ```
- `access log` : 主要记录 http 请求，默认情况下日志记录处于启用状态，服务器将 http 请求保存在单独的日志文件中，日志主要记录了 http 请求请求 ip 地址、请求时间、访问页面、响应状态等信息.
    ```
    $MW_HOME\user_projects\domains\\servers\\logs\access.log
    ```
WebLogic 8.x版本:
- `access log`
    ```
    $MW_HOME\user_projects\domains\\\access.log
    ```
- `server log`
    ```
    $MW_HOME\user_projects\domains\\\.log
    ```
- `domain log`
    ```
    $MW_HOME\user_projects\domains\\.log
    ```
**jboss**
- LOG4J 配置默认 `Deploy/conf/` 如 `jboss/server/default/conf/jboss-log4j.xml`
### 常见web服务日志
**sonarqube**
- 日志文件
    - `sonarqube 默认生成的日志只保留7天`
        -这个看 `$SONARQUBE-HOME/conf/sonar.properties` 里的 `sonar.log.maxFiles` 配置
**gitlab**
- 相关文章
    - [企业安全之内部代码管理平台Gitlab下载及权限审计](https://mp.weixin.qq.com/s/mP2g3xnsuM-TwRjJ-z4e2Q)
- 常见目录
    - `/var/log/gitlab/`
    - `/home/gitlab/logs/`
- 日志文件
    - production.log： 该日志位于 gitlab-rails 中，其作用是记录 gitlab 的每次请求的具体信息，包括请求的 URL、ip 地址、请求类型、以及此次请求所涉及的具体代码、SQL 请求以及 SQL 请求消耗的时间。
    - application.log： 此日志文件位于 gitlab-rails 中，其作用是记录创建用户、创建项目、移动项目等日志。
    - githost.log： 此日志文件位于 gitlab-rails 中，此日志的作用是记录对 gitlab 服务器的错误请求日志。
    - sidekiq.log： 此日志文件位于 gitlab-rails 中，gitlab 中可能存在一些任务需要运行很长时间，因此会选择将这些任务在后台执行，sidekiq.log 文件就是用来记录这一类任务的处理信息，此日志文件是一个软连接文件。
    - gitlab-shell.log： 此日志文件位于 gitlab-shell 中，该日志文件的作用是记录执行 gitlab 命令以及为项目添加 ssh 权限的日志文件
        - 同步动作(git clone/fetch/pull)：command：gitaly-upload-pack
        - 推送操作(git push)：command：gitaly-receive-pack
    - unicorn_stderr.log： 此日志文件位于 unicorn，该日志文件的作用是记录 gitlab 的 web 服务器的相关记录。
    - `gitlab 默认 svlogd 生成的日志只保留30天`
- 使用控制台实时查看 logs
    ```bash
    # 查看所有的logs; 按 Ctrl-C 退出
    sudo gitlab-ctl tail
    # 拉取/var/log/gitlab下子目录的日志
    sudo gitlab-ctl tail gitlab-rails
    # 拉取某个指定的日志文件
    sudo gitlab-ctl tail nginx/gitlab_error.log
    ```
- https://docs.gitlab.com/omnibus/settings/logs.html
- gitlab 的 `[安全审计/审计事件]` 功能只有付费版才有
    - 本质上是对 audit_json.log 日志的读取
    - https://docs.gitlab.cn/jh/administration/audit_events.html
---
## 数据库取证
部分内容来自项目 [[theLSA/emergency-response-checklist](https://github.com/theLSA/emergency-response-checklist) 和 Tide 团队安全文章]
**misc**
- `mysql\lib\plugin` 目录的异常文件
- select * from mysql.func 的异常
- mssql 检查 xp_cmdshell 等存储过程
- 异常数据库登录
- 数据库用户弱口令
- 注意 mysqld 配置文件
---
### mysql
**mysql 日志**
- `/root/.mysql_history`
- 错误日志 `ErrorLog` : 记录 Mysql 运行过程中的 Error、Warning、Note 等信息，系统出错或者某条记录出问题可以查看 Error 日志，hostname.err
- 二进制日志 `Binary Log` ：包含一些事件，这些事件描述了数据库的改动，如建表、数据改动等，主要用于备份恢复、回滚操作等,记录修改数据或有可能引起数据改变的 mysql 语句，log_bin，默认在数据目录，如 mysql-bin.000001
    - 二进制日志 (binary log) 主要用于数据库恢复和主从复制, 以及审计 (audit) 操作。审计提供了一种用来追踪用户活动的办法。二进制日志记录了 MySQL 数据库的更新变化。二进制日志还记录了每个更新数据库语句的执行时间 。它不会显示没有修改的数据，只有通用查询日志才记录了所有的数据。二进制日志可以最大可能的恢复数据库，因为二进制日志包含备份后所有的更新。
    - 二进制日志不能直接用文本的方式打开, MySQL 提供了相应的查看工具: mysqlbinlog
        ```bash
        cd /var/lib/mysql
        ls
        mysqlbinlog -vv --base64-output=decode-rows xxx.xxx
        # 如果报错可以加上 --no-defaults
        ```
- 通用查询日志 `GenaralQuery Log` : 记录用户的所有操作,记录 mysql 的日常日志，包括查询、修改、更新等的每条 sql；默认关闭，general_log_file
    ```sql
    show variables like '%general%';        -- 查看log配置信息
    SET GLOBAL general_log = 'On';          -- 开启日志
    SET GLOBAL general_log_file = '/var/lib/mysql/mysql.log';  -- 指定日志文件路径
    ```
- 慢查询日志 `Slow QueryLog*` : 记录执行时间超过指定时间的查询语句，slow_query_log_file
- 事务日志：ib_logfile0
- mysql 相关命令
    ```sql
    status;
    show global variables like '%log%';
    show global variables like '%gene%';
    show master status;
    systemmore /mydata/data/stu18_slow.log;
    showbinary logs;
    showmaster logs;
    showbinlog events in 'mysql-bin.000011';
    show processlist;
    ```
- 更多 mysql 日志类型可参考 https://www.jianshu.com/p/db19a1d384bc
- 有哪些IP在爆破？
    ```bash
    grep  "Access denied" mysql.log |cut -d "'" -f4|uniq -c|sort -nr
    ```
- 爆破用户名字典都有哪些？
    ```bash
    grep  "Access denied" mysql.log |cut -d "'" -f2|uniq -c|sort -nr
    ```
**访问审计**
追踪是哪个用户执行的操作行为，就需要增加用户访问审计。
MySQL 的连接首先都是要通过 init-connect 初始化，然后连接到实例。利用这一点，通过在 init-connect 的时候记录下用户的 thread_id, 用户名和用户地址实现数据库的访问审计功能。
配置 init-connect 参数
```sql
show variables like 'init_connect%';
-- 创建审计用的库表
use db_monitor;
create table auditlog(thread_id int(11) DEFAULT NULL,
log_time datetime default null,
localname varchar(50) DEFAULT NULL,
matchname varchar(50) DEFAULT NULL,
key idx_log_time(log_time)
);
-- 动态调整 init-connect 参数，设置当前登录 ID, 当前登录时间，登录用户名
set global init_connect='insert into db_monitor.auditlog(thread_id,log_time,localname,matchname) values(connection_id(),now(),user(),current_user());';
-- 授予普通用户对 auditlog 表的 insert 权限
grant insert on db_monitor.auditlog to 'test'@'localhost';
```
在配置文件 /etc/my.cnf 中添加 init_connect 参数
```
init_connect='insert into db_monitor.auditlog(thread_id,log_time,localname,matchname) values(connection_id(),now(),user(),current_user());'
```
---
### mssql
**mssql 日志**
SQL Server 日志记录了完整的 SQL Server 数据库运行的状态信息，并以消息的形式记录系统级、应用级操作。
可以使用 SQL Server Management Studio 中的日志文件查看器来访问有关在以下日志中捕获的错误和事件的信息：
SQL Server Management Studio 连接 sqlserver 数据库，查看与常规 SQL Server 活动相关的日志。
登录到 SQL Server Management Studio，依次点击 管理--SQL Server 日志
- exec xp_readerrorlog
- object Explorer-Management-SQL Server logs-view-logs
- SQL Server 2008： R2\MSSQL10_50.MSSQLSERVER\MSSQL\Log\ERRORLOG
- 查询最近一次启动 sqlserver 时间：
    ```sql
    select sqlserver_start_time fromsys.dm_os_sys_info;
    ```
- 历史 sql 记录查询：SQLServer 并没有这样的实现，只有 `sys.dm_exec_query_stats` 缓存了一部分 (sql server 服务开启后执行的语句，某些不被缓存执行计划的语句并不记录)。
- Sqlserver 开启日志审计功能可参考 https://blog.51cto.com/gaowenlong/1908381
- xp_cmdshell 在 mssql2005 之后的版本中是默认禁止的，查看 xp_cmdshell 是否被启用。
    ```
    Exec master.dbo.xp_cmdshell 'whoami'
    ```
---
### Oracle
**Oracle 日志**
- 查看日志 : SQL> show parameter dump
- 查看 v$diag_info 系统视图 : SQL> select * from v$diag_info;
- 查询 bdump 参数，来找到 alert 日志位置 : show parameter background_dump_dest
Oracle 日志文件分为两种：重做日志文件（redo log file）、归档日志文件，其中重做日志文件主要记录了数据库的操作过程，可以在进行数据库恢复时，将重做日志文件在还原的数据库上进行执行，以达到数据库的最新状态。
Oracle 数据库默认只是对数据库的登录情况记录，但是不对数据库的查询记录统计，可通过 `show parameter audit`，查看审计功能是否开启，若 audit_sys_operations 值为 DB。
开启审计功能
```
alter system set audit_sys_operations=TRUEscope=spfile;
alter system set audit_trail=db,extendedscope=spfile;
```
重启实例即可,开启后会把审计内容记录到 sys 库的 `AUD$` 表中
数据库连接日志
```
cat /opt/oracle/diag/tnslsnr/localhost/listener/trace/listener.log
```