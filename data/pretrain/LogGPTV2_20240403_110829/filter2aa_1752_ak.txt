式操作。
MADV RANDOM
程将以的页。
MADV SEQUENTIAL 程的
页。
MADV WILLNEED
程将的页。
MADV DONTNEED
程内内的页。
内提示真的的实相的 POSIX 
提示的的。 2.6 内以方式进处理
MADV NORMAL
内进程的读。
MADV RANDOM
内读理读操作读小的。
MADV SEQUENTIAL 内读。
MADV WILLNEED
内将给的页读内存。
MADV DONTNEED
内给页相的
的同步写的页。对映射
新内存。
:
int ret;
ret = madvise (addr, len, MADV_SEQUENTIAL);
if (ret 
int posix_fadvise (int fd, off_t offset, off_t
len, int advice);
调 posix fadvise() 给出内文件 fd 的 [offset, offset + len) 内操作
提示。 len  0提示作间 [offset, length of file]。设
len  offset  0设文件。
advice 的 madvise() 。的以的:
POSIXFADV NORMAL
  程   给  文 件 的 给        
处理。
POSIX FADV RANDOM
程给内。
POSIX FADV SEQUENTIAL 程给内
。
POSIX FADV WILLNEED
程能。
POSIX FADV NOREUSE
程能给
。
POSIX FADV DONTNEED
程能给。
 madvise() 内对提示的处理同的实
同的 Linux 内的处理方式相同。内的处理方式:
POSIX FADV NORMAL
内的读。
POSIX FADV RANDOM
内读理读操作能的读
的。
POSIX FADV SEQUENTIAL 内读读读的。
POSIX FADV WILLNEED
内读将页读内存。
POSIX FADV NOREUSE
 POSIX FADV WILLNEED ;
内能将” ” 的
。 madvise 对的。
POSIX FADV DONTNEED
内存的。同
 madvise() 对。
以段内、的 fd 的文件
int ret;
– 115 –
 4 
文件 I/O
ret = posix_fadvise (fd, 0, 0, POSIX_FADV_RANDOM);
if (ret == -1)
perror (”posix_fadvise”);
4.4.1.1 返回值和错误码
调 0 -1设 errno 
EBADF
文件效。
EINVAL advice 效文件或设给
的文件。
4.4.2 readahead() 系统调用
posix fadvise()  2.6 内新的调。 readahead() 
以 posix fadvise()  POSIX FADV WILLNEED 时同的能。
同 posix fadvise() 的 readahead()  Linux 的
#include 
ssize_t readahead (int fd, off64_t offset, size_t
count);
readahead() 调将读 fd 示文件的 [offset, offset + count) 页存
。
4.4.2.1 返回值和错误码
调 0 -1设 errno 
EBADF
文件效
EINVAL 文件对的文件读。
4.4.3 “经济实用“的操作提示
内操作提示的效率以提。
对的 I/O 。处理的
的提示的上的提的。
 读    文 件 的    内  时进 程  以   设 
POSIX FADV WILLNEED 内文件读页存。 I/O 操作将
– 116 –
 4 
文件 I/O
异步进。文件时操作以即
。
相的读或写 (上的)进程
以设 POSIX FADV DONTNEED 内存的内。的操
作满页。进程页
的空间存的。对
的的将存。
  进 程   读    文 件 时设  POSIX FADV SEQUENTIAL  
内     读。相  的    进 程   自  将     文 件设 
POSIX FADV RANDOM内读的。
4.5 同 步 (Synchronized)，同 步 (Synchronous) 及 异 步 ( Asyn-
chronous) 操作
  :   synchronized  synchronous       同 步  
我们对同步的相的文原文。
Unix 操作同步 (synchronized)同步 (nonsynchronized)同
步 (synchronous)异步 (asynchronous) 时的
 ( synchronized  synchronous 间的小)。
同步 (synchronous) 写操作写内的。同
步（synchronous读操作写程空间的
的。相的异步 (asynchronous写操作空间时能
; 异步（asynchronous) 读操作备能。操
作操作以进。然的
操作以及的程。
同步的 (synchronized) 操作同步 (synchronous) 操作的更
更。同步的（synchronized写操作写上的
内的同步的。同步 (synchronized) 的读操作新的 (
能读)。
的同步（synchronous异步（asynchronous I/O 操作
件 (的存) 。同步 (synchronized) 异
步（asynchronized件 (写)。
– 117 –
 4 
文件 I/O
Unix
的
写
操
作
同
步
(synchronous)
同
步
的（nonsynchronized读操作同步 (synchronous) 同步的 (synchronized)。∗
对写操作上性的能的 4-1 示。
 4-1 写操作的同步性
Synchronized
Nonsynchronized
Synchronous
写操作写
。文件时
O SYNC 
方式。
写操作存内
。的
。
Asynchronous
写 操 作        
  。   操 作  
写。
写 操 作        
  。   操 作  
写内
。
读读操作同步的（synchronized。的
操作以同步（synchronous的以异步（asynchronous的
4-2 示。
 4-2 读操作的同步性
Synchronized
Synchronous
读操作新存提的。（
的。
Asynchronous
读操作。操作
新。
我们何写操作进同步 (synchronized)(设 O SYNC
 ) 何     I/O 操 作  同 步 的（synchronized（  fsync() 
friends。我们何读写（asynchronous异步。
4.5.1 异步 I/O
异步 (asynchronous)I/O 内的。 POSIX 1003.1-2003 
 aio 的 Linux 实 aio。 aio 提实异步
I/O 提以及时。
#include 
/* asynchronous I/O control block */
∗读操作写操作异步的 (nonsynchronized)内页
新的。页的上的新。
实上的操作同步的。的方式。
– 118 –
 4 
文件 I/O
struct aiocb {
int aio_filedes;
/* file
descriptor */
int aio_lio_opcode;
/* operation to
perform */
int aio_reqprio;
/* request
priority offset */
volatile void *aio_buf;
/* pointer to
buffer */
size_t aio_nbytes;
/* length of
operation */
struct sigevent aio_sigevent;
/* signal number
and value */
/* internal, private members follow... */
};
int aio_read (struct aiocb *aiocbp);
int aio_write (struct aiocb *aiocbp);
int aio_error (const struct aiocb *aiocbp);
int aio_return (struct aiocb *aiocbp);
int aio_cancel (int fd, struct aiocb *aiocbp);
int aio_fsync (int op, struct aiocb *aiocbp);
int aio_suspend (const struct aiocb * const
cblist[], int n, const struct timespec
*timeout);
4.5.1.1 基于线程的异步 I/O
Linux  O DIRECT 的文件上的 aio。设
O DIRECT 的文件上 aio我们自实。内的
我们能实异步 I/O实相的效。
我们将程的异步 I/O
• 实 I/O
• 离内的 I/O  I/O 提操作时。
– 119 –
 4 
文件 I/O
性能的。 I/O 操作出 I/O 超
的进程 I/O 。程的
处理 I/O 的方式。
的的方式程 (调将)。方
:
1. 程处理的 I/O。
2. 实将 I/O 操作工作的。
3. 的 I/O 相的 I/O 操作。工作
程的 I/O 提内们。
4. 操作的 (读的) 
。
5. 实的的 I/O 
操作。
 POSIX 的 aio 的相的程理的
。
4.6 I/O 调度器和 I/O 性能
的性能。
性能的 seek 操作的时程的
。操作以处理周 ( 1/3 ) 的
时单的 seek 操作 8 的时间
 cpu 周的 2500 。
的性能我们 I/O 操作
们将原效的。操作内实 I/O
调理 I/O 的离小。
I/O 调将的性能小。
4.6.1 磁盘寻址
理 I/O 调的工作。
 (cylinders) (heads) (section) 何方式方
式 CHS 。
、读写。以作 CD上
– 120 –
 4 
文件 I/O
作 CD。的 CD 上。
。
单上的程: 
。上。
上。上离
相同离的。的 (即的)。
单上的单。然上的
。。然
读写的上的的读写。
的操作的、。
将 /  / 的映射的 (理或设备
)更的映射的。操作以 (即
 (LBA)程的 CHS ∗。
自然的 CHS 的映射的: 理 n  n + 1 理上相的。
我们将的映射的。
文件存件。们操作自的操作单即 (时
作文件或)。的小理小的。
文件的映射或理。
4.6.2 调度器的功能
I/O 调实操作 (merging)  (sorting)。 (merg-
ing) 操作将或相的 I/O 的程。
读 5 读 6  7 上的。对 5  7
的操作。的 I/O 能 I/O 的。
 (sorting) 操作相对更的的
新的 I/O 。 I/O 操作 52 109 7 I/O 调
以 7 52 109 的进.  81
将 52  109 的间。 I/O 调然们的
调:7然 52然 81 109。
方式的离小。的 (
的进)以、性的方式。 I/O 操作
∗绝对上程上上的
– 121 –
 4 
文件 I/O
的进操作以 I/O 性能提。
4.6.3 改进读请求
读新的。的页存
时读读出能相的操
作。我们将性能读 (read latency)。
的程能时 I/O 。进同
步的将。我们读的文
件。程文件读然读段
文件读。然进程读文件。的
进的: 以。
写 (同步的) 的对写时间内
何 I/O 操作。空间程写操作性能的。写
操作读操作的时: 写操作的们
以内的。的 writes-starving-reads 。
 I/O 调以的对能的对
的。我们的子。新的
 50-60 间的 109 的将调。读的
能性能。以 I/O 调” ” 的
。
单的方 2.4 内 Linux 调∗方
的的新的。上以
对读的时读 (read latency)。
方单。 2.6 内 Linus 调
新的调。
4.6.3.1 Deadline I/O 调度器
Deadline I/O 调 2.4 调程及的调的
。 Linus 的 I/O 。的 I/O 
调的。 Deadline I/O 调进步进原
的调新的: 读 FIFO 写 FIFO 。的
∗Linus 以自的调。的
以。
– 122 –
 4 
文件 I/O
提时间。读 FIFO 读同写 FIFO
写。 FIFO 的设时间。读 FIFO 
的时间设 500 。写 5 。
新的 I/O 提然相
 (读或写) 的。的 I/O 。
的 (linus 调)以小
。
 FIFO 的超出的时间时 I/O 调
 I/O 调调 FIFO 的。 I/O 调程
处理的时间的。
方式 Deadline I/O 调 I/O 上。然能
时间调 I/O 时间调。
 Deadline I/O 调能提的的
时间。读更小的时间 writes-starving-reads 的
。
4.6.3.2 Anticipatory I/O 调度器
Deadline I/O 调。我们读
的。 Deadline I/O 调时读的的
时间或上时将然 I/O 调程处理
 I/O 。时。设然提读
的即将时间 I/O 调的
然处理。的能
件能的。小时的
处理读上以的。能
读处理的性能将的
提。的程调提的读 I/O 调
。
对的读时然出 – 读
程备提读时
I/O 调程处理的。时进
的操作: 读。存方 I/O 调对
– 123 –
 4 
文件 I/O
同的将提以的读
进。的时间的的。
anticipatory I/O 调的工作原理的。 Deadlne 
。读操作提 anticipatory I/O 调的
调。同 Deadline I/O 调的 anticipatory I/O 调
6 。程 6 内对同出读读