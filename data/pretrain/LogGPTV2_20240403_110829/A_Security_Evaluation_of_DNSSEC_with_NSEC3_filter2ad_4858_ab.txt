“RRSIG(DS) by .”
“com. DNSKEY”
“RRSIG(DNSKEY) by com.”
“example.com. DS”
“RRSIG(DS) by com.”
“example.com. DNSKEY”
“RRSIG(DNSKEY) by
example.com.”
“RRSIG(A) by example.com.”
Figure 1. DNS(SEC) name resolution sequence for query “www.example.com A?" resolving to IP address
“1.2.3.4". Authoritative RRSets are in plain text and glue RRSets are in italic. The stub resolver is not ex-
pected to handle DNSSEC RRs, so none are sent to it.
authoritative server for the .com zone. This query/response
pair occurs again between the recursive resolver and the
.com authoritative server, which leads to the resolver ob-
taining the address of the authoritative DNS server of ex-
ample.com. When the recursive resolver queries the author-
itative DNS server for example.com, it ﬁnally obtains an
answer to “www.example.com A?”, which it can then pass
back to DNS stub resolver on the user’s PC that initiated
this entire process.
To reduce DNS network trafﬁc, each DNS server caches
RRs to keep from issuing redundant requests. DNS replies
include the speciﬁed caching period (TTL) of a returned
RR, set by the authoritative zone. As an example, sup-
pose that the set of queries and responses in Figure 1 has
occurred recently, so that the TTL of caches records has
not yet expired. When another user of same local recur-
sive resolver requests “mail.example.com A?”, the local re-
solver will be able to bypass steps 2-5 due to caching and
directly query the “example.com.” authoritative server with
“mail.example.com A?”.
2.2 DNS Packet Format
We will now brieﬂy describe the DNS packet format
and transmission characteristics and subsequently discuss
“cache-poisoning” attacks on DNS, conducted via both
“man-in-the-middle” and “out-of-path” means.
The format of a DNS packet is illustrated in Figure 2
(DNSSEC packets are completely identical). DNS queries
and responses are usually contained in a single small packet,
less than 512 bytes, and are usually sent over UDP. This
makes it fairly simple for network attackers to spoof DNS
responses. The only protection that the DNS packet format
provides against spooﬁng is in the 16-bit TXID (transac-
tion ID) ﬁeld. A DNS resolver will accept as valid the ﬁrst
response packet containing a TXID matching the TXID of
an outstanding query. This creates a race condition for at-
tackers: their spoofed responses to the DNS resolver must
match an outstanding TXID before the actual response re-
turns.
2.3 Cache-Poisoning Attack
In a cache poisoning attack, the attacker spoofs a DNS re-
sponse packet so that a DNS resolver accepts and caches
data “poisoned” by the attacker, such as an A RR of a
valid owner name pointing at the IP address of an attack-
ing server. The resolver then provides this poisoned data
to the end user, redirecting common domain name requests
(such as www.google.com) away from the legitimate server
to attacking servers [17].
2.3.1 Man-in-the-Middle
Man-in-the-middle attackers are attackers who have read
and write access to network packets belonging to the victim.
In this scenario an attacker can overhear the queries made
by the local recursive resolver to the remote DNS zones and
inject faux replies from the remote zones. As DNS is un-
encrypted, it is trivial for the man-in-the-middle attacker to
copy the correct TXID to generate an acceptable spoofed
DNS reply, which will then poison the cache of the recur-
sive resolver.
User PCStub ResolverLocal RecursiveResolverRoot Zone(".")TLD Zone("com.")Zone for"example.com."12345678Figure 2. DNS and DNSSEC packet format. DO bit is in EDNS0 Header in Additional Section RR
2.3.2 Out-of-Path Attack
We will now discuss out-of-path DNS cache-poisoning at-
tacks, of which the recent work publicized by Dan Kamin-
sky [14] is the most infamous. In a Kaminsky attack, the
attacker does not require the ability to overhear the outgo-
ing DNS requests generated by the local recursive resolver.
Instead, the ingenuity of the Kaminsky attack involves in-
creasing the number of valid outstanding TXIDs, thus in-
creasing the probability that a randomly generated spoof
TXID will match an outstanding one.
The Kaminsky attack works with delegation responses
rather than authoritative answers.
The attacker issues
many DNS queries to a DNS recursive resolver for non-
existent names sharing a common sufﬁx zone, e.g. aN-
otExist.example.com, bNotExist.example.com, etc.
(The
queries may also be coerced from a user, for instance by
an attacker-crafted web page containing these names in
tags). This creates many valid outstanding TXIDs at
the recursive DNS resolver. Since all of these queries con-
tain a common sufﬁx zone (“example.com”), all responses
coming from the “.com” zone will include NS and A glue
records for the name server of “example.com”. The at-
tacker thus has many chances to poison the RRs for the “ex-
ample.com” name server at the resolver, by sending many
spoofed delegation responses (packet 5 from Figure 1) with
different TXIDs containing altered NS and A glue records.
Since the resolver will accept and cache the glue records
upon ﬁnding a match, this creates an instance of the “birth-
day problem” [10] from probability that can lead to success
after only seconds of attacking the 16-bit TXID ﬁeld. Af-
ter a successful match, the resolver will query the attacking
server to resolve any RRs with owner name ending in “ex-
ample.com”, essentially giving the attacker full control of
the “example.com” zone for users of this resolver. After
the successful attack, all users of a poisoned DNS resolver
that attempt to access “example.com” will be directed to a
server of the attacker’s choosing.
In order to address this vulnerability, Kaminsky worked
with DNS software vendors to randomize the UDP source
port of DNS queries [8, 12]; these random ports become
the destination ports for DNS response packets. This effec-
tively adds 10-11 bits of entropy for the attacker, making
the expected success time of an attack several tens of min-
utes rather than seconds. However, the mitigation does not
fundamentally prevent a spooﬁng packet success; it only
lowers the probability of such an event. This mitigation
also provides no defense against man-in-the-middle attack-
ers. Therefore, many researchers, including Kaminsky him-
self [8, 16], have been actively supporting DNSSEC as a
long-term solution to DNS security vulnerabilities, includ-
ing cache-poisoning.
3 DNSSEC Protocol
3.1 Stated Security Goals and Limitations
DNSSEC, as the name implies, consists of a set of secu-
rity extensions to the DNS protocol (see Table 2 for the
relevant RFCs). DNSSEC introduces additional security-
related resource records with each reply, for the purpose
of providing cryptographically signed integrity to the orig-
inal DNS resource records. This makes DNSSEC effective
against both types of cache-poisoning attacks described in
Section 2.3. DNSSEC does not guarantee delivery of re-
source records and does not provide integrity for unsigned
portions of packets. Its security goals are described in RFC
4033 as follows:
“The Domain Name System (DNS) security extensions pro-
vide origin authentication and integrity assurance services
for DNS data, including mechanisms for authenticated de-
nial of existence of DNS data.”
UDP Source Port01516232431UDP Dest PortUDP LengthUDP ChecksumTXIDQROpcodeRCODEUDP Source PortAATCRDRAZADCDQDCOUNTANCOUNTNSCOUNTARCOUNTUDPHeaderDNSHeaderTXID = Transaction IDQR = Query or ReplyOpcode = Typically 0 (QUERY) AA = Authoritative AnswerTC = TruncatedRD = Recursion DesiredRA = Recursion AvailableZ = Zero BitAD = Authenticated DataCD = Checking DisabledRCODE: 0 = No Error       2 = Server Failure or           Bogus DNSSEC dataDO = DNSSEC OK (in EDNS0 header) Question Section        Answer Section RRsAuthority Section RRs   Additional Section RRs DOIn RFC 4033, the authors explicitly distinguish DNSSEC
data (RR) security from channel security. DNSSEC pack-
ets, containing resource records carrying encoded-binary
cryptographic material, are typically carried in the clear
over UDP. Thus, the current paper is largely about the
implications of the DNSSEC design decision to provide
data (RR) security rather than channel security. We will
ﬁrst discuss the limitations of DNSSEC, and then consider
in turn the three component DNSSEC data integrity goals
from above: origin authentication, data integrity assurance,
and authenticated denial-of-existence, and detail how the
DNSSEC protocol attempts to reach these goals, even with
in-the-clear communications.
3.1.1 “Last-Hop” Limitations
RFC 4033 speciﬁcally states the “last-hop” between stub
resolver and recursive resolver (1 and 8 in Figure 1) may
be out-of-scope for DNSSEC, to be protected via DNS
channel security means such as SIG(0) [3] or TSIG [2].
This is because in anticipated DNSSEC deployment, cryp-
tographic signatures are expected to ﬂow from authoritative
servers only to local recursive resolvers, with stub resolvers
on end-user PCs not equipped to handle signature veriﬁca-
tion.
As our ﬁnite-state analysis is focused on the DNSSEC pro-
tocol, we consider last-hop security out-of-scope and des-
ignate the recursive resolver as the trusted end-point for
name resolution in the analysis. However, we emphasize
that the channel security of this last hop is critically im-
portant to end-to-end DNSSEC integrity. For example, the
recursive resolver marks the difference between two types
of responses to the stub resolver: veriﬁably secure answers
and insecure answers, with a single “Authenticated Data”
(AD) bit. Thus, attackers able to manipulate DNS replies
over this last hop may forge secure answers simply by set-
ting the AD bit. In usage scenarios where last-hop security
is absent, such as unencrypted wireless hotspots, DNSSEC
cannot guarantee domain-name lookup integrity to the end
user.
3.1.2 Interoperability with DNS Limitations
Under current speciﬁcations, any inter-operation with stan-
dard DNS zones exposes the end-user of a DNSSEC re-
cursive resolver to forgeable query results. When inter-
operating with a standard DNS zone, a DNSSEC recursive
resolver cannot verify the integrity of remote zone data due
to the lack of cryptographic signatures. For compatibil-
ity, the recursive resolver still returns any responses from
the zone to the stub resolver, but without setting the AD
security indicator bit. Thus, whenever a DNSSEC recur-
sive resolver must query a standard DNS zone, the recur-
sive resolver is forced to provide an answer without secu-
rity guarantees to the stub resolver. As of this writing, end-
user software accepts both secure and insecure results from
the stub resolver, without any user-interface elements to in-
dicate the security of the lookup result. Thus, the current
end-user cannot trust the security of DNS lookups even if a
DNSSEC recursive resolver with last-hop channel security
is utilized.
3.2 Origin Authentication
The need for origin authentication is possibly best under-
stood in the context of preventing cache-poisoning attacks.
As we described above, these attacks are possible because
the DNS recursive resolver will accept DNS data sent to
it by any computer connected to Internet (possibly with
a falsiﬁed source IP address) as long as the destination
port/TXID ﬁelds match. There is no mechanism within
DNS, aside from source IP address, that veriﬁes the data
originates from an authoritative server for a particular zone.
To solve this issue, DNSSEC provides a form of hierarchi-
cal public key infrastructure (PKI) which allows resolvers
to securely obtain the public key for a DNSSEC zone and
to use this for authenticating signed data belonging to the
zone.
DNSSEC introduces three new RRs to support this PKI:
DNSKEY, RRSIG (RR Signature), and DS (Delegation
The DNSKEY RR contains the binary-text-
Signer).
encoded public key along with relevant key parameters such
as the encryption algorithm used. The zone uses the corre-
sponding private key to sign all of the RRSets over which it
is authoritative. Each signature over an RRSet is recorded
in a RRSIG RR. The DS veriﬁcation RR contains a crypto-
graphic digest of a DNSKEY belonging to a child zone in
a delegation. The DS RR is considered under the author-
ity of the parent zone and can thus be signed by the parent
zone (with a corresponding RRSIG). It is returned by the
parent side of a delegation as an authenticated pointer to a
DNSKEY in the child zone. This [Parent DNSKEY signs→
Parent DS signs→ Child DNSKEY] sequence forms a link in
an extensible attestation chain that can impart trust to any
public key obtained via the chain, so long as the chain be-
gins at a trust anchor. In the DNSSEC PKI, a trust anchor
is any DNSKEY or DS RR conﬁrmed as trustworthy via
out-of-band means and conﬁgured in the resolver as trust-
worthy. With the recent announcement of root zone signing,
this is expected to be the root DNSKEY.
The operation of the DNSSEC PKI is illustrated in Figure 1,
which lists the DNSSEC packet contents for the name res-
olution “www.example.com A?”, for which the DNSKEY
of the “example.com.” zone are needed. Starting with the
DNSKEY of the root zone as the trust anchor, Reply 3 pro-
vides the DS to attest to the DNSKEYs of “com.”. Re-
ply 5 adds the DNSKEY of “com.” and the DS to attest to
the DNSKEY “example.com.”, which is provided by Reply
7.
3.2.1 Origin Authentication with Regular DNS
In order to inter-operate with non-SEC DNS implemen-
tations, DNSSEC must also provide for cases where a
DNSSEC zone has a non-DNSSEC parent or child zone.
In the insecure parent zone case, since the trust chain can-
not be established all the way back to the DNS root, either
the DNSKEY of the secure zone or a DS generated from the
DNSKEY must be manually conﬁgured as a trust anchor at
the recursive resolver. When there is no such manually con-
ﬁgured trust anchor, no attestation chain can impart trust to
the DNSKEY of the secure zone. In this case, no records
from the secure zone are veriﬁable by the recursive resolver
and all records ostensibly from the zone will passed on to
the stub resolver as an insecure answer.
In the case of an insecure child zone of a secure zone, an in-
secure delegation will be created with no DS record within
the secure zone pointing at the child zone.
3.3
Integrity Assurance
Given the hierarchical PKI provided by DNSSEC, it is
straightforward for a zone to provide “integrity assurance”
for its existent data. The zone signs all the RRSets over
which it is authoritative and transmits the RRSIG along with
the RRSet in its replies. For example, when responding to
the “www.example.com A?” query, the example.com au-
thoritative server will transmit both the A record and the
RRSIG containing the signature over the A record, as Re-
ply 7 in Figure 1 demonstrates.
DNSSEC allows a zone only to sign RRs over which it is
authoritative. This means that any glue records included in
a delegation response are unsigned, as illustrated in Replies
3 and 5 from Figure 1. As Bernstein has noted and as we
will explain, these glue records may be forged, causing the
local resolver to query an attacking server in its recursive
next step. We show in Section 3.7, however, that this redi-
rection does not add the capability for the network attacker
to inﬂuence to end result of name resolution.
3.4 Authenticated Denial of Existence
Thus far, we have discussed how DNSSEC provides in-
tegrity assurance for existent RRs. Authentication and in-
tegrity is also required for responses denying the existence
of any RRs matching a query: If authentication mechanisms
did not exist, for example, an attacker may be able to forge
a response packet denying the existence of an existent do-
main name and have this response cached at the local re-
solver for long periods, creating a directed denial-of-service
attack.
The initial DNSSEC scheme for “authenticated denial of
existence” creates RRs, named Next Secure (NSEC), that
list all of the existent RRs belonging to an owner name
within an authoritative zone, so that a resolver can ver-
ify the non-existence of an RR against the RR list of its
owner name. Each NSEC RR also contains the next existent
owner name in canonical form, so that the non-existence
of an owner name within a zone may be shown by re-
turning a covering NSEC, whose owner and next existent
names bracket the queried name. As an undesirable conse-
quence, the entire contents of a zone may be trivially enu-
merated by following NSEC records and making appropri-
ate queries.
The current scheme for hashed authenticated denial of ex-
istence, named NSEC3 [7], is nearly equivalent to NSEC
except that all owner names are cryptographically hashed
and not available in cleartext. The canonical order of exis-
tent names in NSEC3 is the hashed order. Under NSEC3,
zone enumeration of hashed names remains trivial, but the
attacker must expend computational resources in a dictio-
nary attack to learn the zone contents in cleartext. A single
salt string is also appended to each owner name, which if
kept unknown would increase the search space required for
dictionary attacks. However, NSEC3 strangely makes the
salt string available via a RR query, thus rendering it com-
pletely ineffectual. Thus, NSEC3 is still vulnerable to the
leakage of RR owner names after few days of computation
[11].
With NSEC, all owner names within the zone, including
names only associated with NS records used for delegation,
form the NSEC “next owner” chain. In NSEC3, such an
owner name may “opt-out” of the chain via a bit in the
NSEC3 RR. When the “opt-out” bit is set in an NSEC3
record, one or more unsigned delegations may exist with