:::
从区中删除源会关闭来自它的网络流量。
::: orderedlist
**流程**
1.  列出所需区的允许源：
    ``` literallayout
    # firewall-cmd --zone=zone-name --list-sources
    ```
2.  从区永久删除源：
    ``` literallayout
    # firewall-cmd --zone=zone-name --remove-source=
    ```
3.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#adding-a-source-port_using-zones-to-manage-incoming-traffic-depending-on-a-source}添加源端口 {.title}
:::
要启用基于源端口的流量排序，请使用 `--add-source-port`{.literal}
选项来指定源端口。您还可以将其与 `--add-source`{.literal}
选项结合使用，将流量限制在某个 IP 地址或 IP 范围。
::: itemizedlist
**步骤**
-   添加源端口：
    ``` literallayout
    # firewall-cmd --zone=zone-name --add-source-port=/
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#removing-a-source-port_using-zones-to-manage-incoming-traffic-depending-on-a-source}删除源端口 {.title}
:::
通过删除源端口，您可以根据原始端口禁用对流量排序。
::: itemizedlist
**流程**
-   要删除源端口：
    ``` literallayout
    # firewall-cmd --zone=zone-name --remove-source-port=/
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#using-zones-and-sources-to-allow-a-service-for-only-a-specific-domain_using-zones-to-manage-incoming-traffic-depending-on-a-source}使用区和源来允许一个服务只适用于一个特定的域 {.title}
:::
要允许特定网络的流量在机器上使用服务，请使用区和源。以下流程只允许来自
`192.0.2.0/24`{.literal} 网络的 HTTP 流量，而任何其他流量都被阻止。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
配置此场景时，请使用具有`默认`{.literal}目标的区。使用将目标设为
`ACCEPT`{.literal} 的区存在安全风险，因为对于来自
`192.0.2.0/24`{.literal} 的流量，所有网络连接都将被接受。
:::
::: orderedlist
**步骤**
1.  列出所有可用区：
    ``` literallayout
    # firewall-cmd --get-zones
    block dmz drop external home internal public trusted work
    ```
2.  将 IP 范围添加到 `internal`{.literal} 区，以将来自源的流量路由到区：
    ``` literallayout
    # firewall-cmd --zone=internal --add-source=192.0.2.0/24
    ```
3.  将`http`{.literal} 服务添加到 `internal`{.literal} 区中：
    ``` literallayout
    # firewall-cmd --zone=internal --add-service=http
    ```
4.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
:::
::: itemizedlist
**验证**
-   检查 `internal`{.literal}
    区是否处于活跃状态，以及该区中是否允许服务：
    ``` literallayout
    # firewall-cmd --zone=internal --list-all
    internal (active)
      target: default
      icmp-block-inversion: no
      interfaces:
      sources: 192.0.2.0/24
      services: cockpit dhcpv6-client mdns samba-client ssh http
      ...
    ```
:::
::: itemizedlist
**其他资源**
-   `firewalld.zones(5)`{.literal} 手册页
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#assembly_filtering-forwarded-traffic-between-zones_using-and-configuring-firewalld}在区域间过滤转发的流量 {.title}
:::
使用策略对象，用户可以对策略中需要类似权限的不同身份进行分组。您可以根据流量的方向应用策略。
策略对象功能在 firewalld 中提供转发和输出过滤。以下描述了使用 firewalld
来过滤不同区域之间的流量，以允许访问本地托管的虚拟机来连接主机。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#con_relationship-between-policy-objects-and-zones_assembly_filtering-forwarded-traffic-between-zones}策略对象和区域之间的关系 {.title}
:::
策略对象允许用户将 firewalld
的原语（如服务、端口和丰富的规则）附加到策略上。您可以将策略对象应用到以有状态和单向的方式在区域间传输的流量上。
``` literallayout
# firewall-cmd --permanent --new-policy myOutputPolicy
# firewall-cmd --permanent --policy myOutputPolicy --add-ingress-zone HOST
# firewall-cmd --permanent --policy myOutputPolicy --add-egress-zone ANY
```
`HOST`{.literal} 和 `ANY`{.literal} 是 ingress 和 egress
区域列表中使用的符号区域。
::: itemizedlist
-   `HOST`{.literal} 符号区域对于来自运行 firewalld
    的主机的流量，或具有到运行 firewalld 的主机的流量允许策略。
-   `ANY`{.literal}
    符号区对所有当前和将来的区域应用策略。`ANY`{.literal}
    符号区域充当所有区域的通配符。
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#proc_using-priorities-to-sort-policies_assembly_filtering-forwarded-traffic-between-zones}使用优先级对策略进行排序 {.title}
:::
多个策略可以应用到同一组流量，因此应使用优先级为可能应用的策略创建优先级顺序。
要设置优先级来对策略进行排序：
``` literallayout
# firewall-cmd --permanent --policy mypolicy --set-priority -500
```
在上例中，[*-500*]{.emphasis}
是较低的优先级值，但具有较高的优先级。因此，-500 将在 -100
之前执行。较高的优先级值优先于较低的优先级值。
以下规则适用于策略优先级：
::: itemizedlist
-   具有负优先级的策略在区域中的规则之前应用。
-   具有正优先级的策略在区域中的规则之后应用。
-   优先级 0 被保留，因此不能使用。
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#proc_using-policy-objects-to-filter-traffic-between-locally-hosted-vms-and-a-network-physically-connected-to-the-host_assembly_filtering-forwarded-traffic-between-zones}使用策略对象来过滤本地托管容器与主机物理连接的网络之间的流量 {.title}
:::
策略对象功能允许用户过滤其容器和虚拟机流量。
::: orderedlist
**步骤**
1.  创建新策略。
    ``` literallayout
    # firewall-cmd --permanent --new-policy podmanToHost
    ```
2.  阻止所有流量。
    ``` literallayout
    # firewall-cmd --permanent --policy podmanToHost --set-target REJECT
    # firewall-cmd --permanent --policy podmanToHost --add-service dhcp
    # firewall-cmd --permanent --policy podmanToHost --add-service dns
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    红帽建议您默认阻止到主机的所有流量，然后有选择地打开主机所需的服务。
    :::
3.  定义与策略一起使用的 ingress 区域。
    ``` literallayout
    # firewall-cmd --permanent --policy podmanToHost --add-ingress-zone podman
    ```
4.  定义与策略一起使用的 egress 区域。
    ``` literallayout
    # firewall-cmd --permanent --policy podmanToHost --add-egress-zone ANY
    ```
:::
::: itemizedlist
**验证**
-   验证关于策略的信息。
    ``` literallayout
    # firewall-cmd --info-policy podmanToHost
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#proc_setting-the-default-target-of-policy-objects_assembly_filtering-forwarded-traffic-between-zones}设置策略对象的默认目标 {.title}
:::
您可以为策略指定 \--set-target 选项。可用的目标如下：
::: itemizedlist
-   [**ACCEPT**]{.strong} - 接受数据包
-   [**DROP**]{.strong} - 丢弃不需要的数据包
-   [**REJECT**]{.strong} - 拒绝不需要的数据包，并带有 ICMP 回复
-   [**CONTINUE （默认）**]{.strong} -
    数据包将遵循以下策略和区域中的规则。
    ``` literallayout
    # firewall-cmd --permanent --policy mypolicy --set-target CONTINUE
    ```
:::
::: itemizedlist
**验证**
-   验证有关策略的信息
    ``` literallayout
    # firewall-cmd --info-policy mypolicy
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#assembly_configuring-nat-using-firewalld_using-and-configuring-firewalld}使用 firewalld 配置 NAT {.title}
:::
使用 `firewalld`{.literal}，您可以配置以下网络地址转换(NAT)类型：
::: itemizedlist
-   伪装
-   源 NAT（SNAT）
-   目标 NAT（DNAT）
-   重定向
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#the-different-nat-types-masquerading-source-nat-destination-nat-and-redirect_assembly_configuring-nat-using-firewalld}不同的 NAT 类型： masquerading、source NAT、destination NAT 和 redirect {.title}
:::
这些是不同的网络地址转换（NAT）类型：
::: variablelist
[伪装和源 NAT（SNAT）]{.term}
:   使用以上 NAT 类型之一更改数据包的源 IP
    地址。例如，互联网服务提供商不会路由私有 IP 范围，如
    `10.0.0.0/8`{.literal}。如果您在网络中使用私有 IP
    范围，并且用户应该能够访问 Internet
    上的服务器，请将这些范围内的数据包的源 IP 地址映射到公共 IP 地址。
    伪装和 SNAT 都非常相似。不同之处是：
    ::: itemizedlist
    -   伪装自动使用传出接口的 IP 地址。因此，如果传出接口使用了动态 IP
        地址，则使用伪装。
    -   SNAT 将数据包的源 IP 地址设置为指定的 IP
        地址，且不会动态查找传出接口的 IP 地址。因此，SNAT
        要比伪装更快。如果传出接口使用了固定 IP 地址，则使用 SNAT。
    :::