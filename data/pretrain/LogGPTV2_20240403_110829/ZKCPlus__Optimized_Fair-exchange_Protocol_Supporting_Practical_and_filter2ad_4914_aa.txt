title:ZKCPlus: Optimized Fair-exchange Protocol Supporting Practical and
Flexible Data Exchange
author:Yun Li and
Cun Ye and
Yuguang Hu and
Ivring Morpheus and
Yu Guo and
Chao Zhang and
Yupeng Zhang and
Zhipeng Sun and
Yiwen Lu and
Haodi Wang
ZKCPlus: Optimized Fair-exchange Protocol
Supporting Practical and Flexible Data Exchange
Yuguang Hu
SECBIT Labs
K-Orange/SECBIT Labs
Cun Ye
Yun Li
Tsinghua University
PI:EMAIL
PI:EMAIL
PI:EMAIL
Ivring Morpheus
SECBIT Labs
PI:EMAIL
Yupeng Zhang
Texas A&M University
PI:EMAIL
Yu Guo
SECBIT Labs
PI:EMAIL
Zhipeng Sun
SECBIT Labs
PI:EMAIL
Haodi Wang
Beijing Normal University
PI:EMAIL
Chao Zhang
Tsinghua University
PI:EMAIL
Yiwen Lu
SECBIT Labs
PI:EMAIL
Abstract
Devising a fair-exchange protocol for digital goods has been an
appealing line of research in the past decades. The Zero-Knowledge
Contingent Payment (ZKCP) protocol first achieves fair exchange
in a trustless manner with the aid of the Bitcoin network and zero-
knowledge proofs. However, it incurs setup issues and substantial
proving overhead, and has difficulties handling complicated valida-
tion of large-scale data.
In this paper, we propose an improved solution ZKCPlus for
practical and flexible fair exchange. ZKCPlus incorporates a new
commit-and-prove non-interactive zero-knowledge (CP-NIZK) ar-
gument of knowledge under standard discrete logarithmic assump-
tion, which is prover-efficient for data-parallel computations. With
this argument we avoid the setup issues of ZKCP and reduce seller‚Äôs
proving overhead, more importantly enable the protocol to handle
complicated data validations.
We have implemented a prototype of ZKCPlus and built several
applications atop it. We rework a ZKCP‚Äôs classic application of trad-
ing sudoku solutions, and ZKCPlus achieves 21-67√ó improvement
in seller efficiency than ZKCP, with only milliseconds of setup time
and 1 MB public parameters. In particular, our CP-NIZK argument
shows an order of magnitude higher proving efficiency than the
zkSNARK adopted by ZKCP. We also built a realistic application of
trading trained CNN models. For a 3-layer CNN containing 8,620 pa-
rameters, it takes less than 1 second to prove and verify an inference
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea.
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484558
computation, and also about 1 second to deliver the parameters,
which is very promising for practical use.
CCS Concepts
‚Ä¢ Security and privacy ‚Üí Cryptography.
Keywords
fair exchange; zero-knowledge argument; commit-and-prove
ACM Reference Format:
Yun Li, Cun Ye, Yuguang Hu, Ivring Morpheus, Yu Guo, Chao Zhang, Yu-
peng Zhang, Zhipeng Sun, Yiwen Lu, and Haodi Wang. 2021. ZKCPlus:
Optimized Fair-exchange Protocol Supporting Practical and Flexible Data
Exchange . In Proceedings of the 2021 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ‚Äô21), November 15‚Äì19, 2021, Vir-
tual Event, Republic of Korea. ACM, New York, NY, USA, 20 pages. https:
//doi.org/10.1145/3460120.3484558
1 Introduction
Building a fair protocol for exchanging digital goods has been
studied for a long time. It has been proved that strong fairness is
unattainable without the aid of trusted third parties [45]. In practice
these trusted parties are often centralized organizations, which
bring them all kinds of risks, including single point of failure [22],
user information misuse [20], etc.
The advent of blockchain offers new possibilities. In 2011, Gre-
gory Maxwell proposed the first blockchain-based fair exchange
solution, Zero-Knowledge Contingent Payment (ZKCP) [43]. By
incorporation of Bitcoin [44] network and zero-knowledge proofs,
it is able to achieve fair exchange of digital goods and currencies
in one atomic swap. In ZKCP, a buyer B wants to purchase from a
seller S a piece of digital good x which satisfies a particular predi-
cate ùúô(x) = 1. To this end, S first chooses a secret key k to encrypt
the data x using an encryption scheme Enc, i.e., z ‚Üê Enck(x). Next,
S constructs a ‚Äúhash lock‚Äù h = H(k) with a cryptographic hash
Session 11B: Zero Knowledge II CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea3002Table 1: Performance of ZKCP on a 16√ó16 sudoku solution
Size of proving key
Proving time
Verification time
Proof size
Circuit cost
Encryption
SHA256 hash
Solution validity
68 MB
10-20 s
40 ms
288 B
86.81%
10.23%
4.42%
function H, and a zero-knowledge proof ùúã for the NP statement
Enck(x) = z ‚àß ùúô(x) = 1 ‚àß H(k) = h.
Then S delivers (z, h, ùúã) to B. On verifying the proof, B submits
a hash-locked payment to the blockchain, saying that only the
one who discloses a correct key w.r.t. the hash h can redeem this
payment. S then reveals k and thus gets the payment from the
blockchain; B decrypts the ciphertext with k and recovers x. The
blockchain acts as an impartial arbiter, and the exchange ultimately
happens in S‚Äôs atomic action of revealing k.
As a seminal work, ZKCP demonstrates the great potential of
blockchains in replacing traditional trusted third parties, but it
also has some notable limitations. In 2016, the protocol was first
implemented for trading solutions to sudoku puzzles. The imple-
mentation adopts a simple stream cipher from SHA256, and uses
the Pinocchio/BCTV14 zkSNARK scheme [7, 46] for the underlying
zero-knowledge proofs. Table 1 presents the performance statistics
on a 16√ó16 sudoku solution from the ZKCP developers [8]. We have
three main observations from the statistics.
First, the trusted setup of the zkSNARK incurs security issues and
high overhead. The Pinocchio/BCTV14 zkSNARK requires a trusted
party to generate a common reference string (CRS), which con-
tradicts ZKCP‚Äôs very goal of eliminating trusted third parties. As
a circumvent, ZKCP entrusts the buyer to produce the CRS, but
this is proved to be insecure [13, 25] as it compromises the zero-
knowledge property. Moreover, the CRS is cumbersome that even
for a 16√ó16 sudoku solution which costs only 256 bytes, the size of
the proving key in the CRS reaches 68 MB.
Second, the system‚Äôs performance is limited by the seller‚Äôs proving
procedure. With Pinocchio/BCTV14 zkSNARK, for trading a 16√ó16
sudoku solution the verification time is only 40 ms, but the proving
time gets to 10-20 seconds. The bottleneck of the whole system lies
on the prover (seller) side. Besides, the proof succinctness is not
very helpful in ZKCP context, given that the sub-linear-size proof
ùúã is transferred off chain along with the linear-size ciphertext z. To
improve the overall performance of ZKCP, it‚Äôs critical to cut down
the seller‚Äôs proving overhead.
Third, it has difficulties validating complicated predicates on large-
scale data. In trading sudoku solutions, the predicate for solution
validity is very simple (as its related constraints amount to only
4.42% of the whole circuit, while the rest are for encryption and hash
lock). However in practice, predicates can be arbitrarily compli-
cated, possibly involving large-scale data-parallel computations or
interactive decision-making processes. A typical example is to trade
a trained neural network model in a Machine-Learning-as-a-Service
(MLaaS) scenario, where the predicate is that the model yields suf-
ficiently high accuracy on a test set chosen by the buyer, which
translates into multiple rounds of variable inference processes. As
previous work [41] evaluated, with Groth16 zkSNARK [32] (an op-
timization of Pinocchio/BCTV14 zkSNARK), the prover takes 45
minutes to prove for a single inference process of a 5-layer convo-
lutional neural network (CNN) LeNet-5 [39] with the setup time
up to 1.5 hours and CRS size up to 11 GB. Clearly it is impractical
for ZKCP to handle such predicates.
In this work we propose ZKCPlus, an extended version of ZKCP
which supports practical and flexible fair exchange of large-scale
digital goods. We make several major modifications to ZKCP to
address the aforementioned problems. Specifically, we replace the
Pinocchio/BCTV14 zkSNARK of ZKCP with prover-efficient commit-
and-prove non-interactive zero-knowledge (CP-NIZK) arguments of
knowledge, and design a CP-NIZK argument scheme optimized for
data-parallel computations based on the standard discrete logarith-
mic assumption. It replaces the costly and insecure trusted setup
of ZKCP with a lightweight public setup phase, and by incorpora-
tion of a circuit-friendly block cipher in a data-parallel encryption
mode (i.e., counter mode), it greatly reduces seller‚Äôs proving over-
head. With the commit-and-prove feature, we can further reduce
proving overhead by replacing the hash lock of ZKCP with a com-
mitment lock on the blockchains supporting commitment opening
like Ethereum [54] More importantly, utilizing CP-NIZK arguments‚Äô
powerful capability of composition [12, 14, 16], ZKCPlus can han-
dle excessively complicated predicates, especially those involving
large-scale data-parallel computations.
Our CP-NIZK argument for data-parallel computations builds on
the fact that all parallelized sub-circuits have exactly identical rank-
1 constraint systems, and thus the satisfiability of the whole circuit
can be reduced to a more concise relation which can be handled
with the techniques in [11, 31]. Concerning prover efficiency, our
construction is several times faster than Groth16 zkSNARK [32],
and comparable to the non-succinct version of SpartanDL [49].
The ZKCPlus protocol supports a broad class of applications. Be-
sides the toy application of ‚Äúpay to sudoku solution‚Äù demonstrated
by ZKCP, it also applies to more realistic scenarios, including (but
not limited to) tradings of convolutional neural networks, struc-
tured query results over databases, mathematical statistics and so
on. We have implemented the ZKCPlus protocol, built the applica-
tions, and evaluated their performances. For the ‚Äúpay to sudoku
solution‚Äù application, on an ordinary desktop computer, the seller
of ZKCP runs out of memory when the size of sudoku solution gets
larger than 49√ó49. As a contrast, ZKCPlus successfully handles all
solutions up to 256√ó256, and reduces the seller‚Äôs proving overhead
by 21-67√ó, with only milliseconds of setup time and about 1 MB
public parameters. Even under the same encryption scheme, our
CP-NIZK argument still shows an order of magnitude higher prover
efficiency than the zkSNARK adopted by ZKCP. In the ‚Äúpay to CNN
model‚Äù application where ZKCPlus is applied to trading trained
CNN models, the two parties can finish proving for an inference
process of a 3-layer CNN with 8,620 parameters in about 1 s, and
then finish delivering all these parameters within about 1 s as well.
The application scales up to deep CNNs; on the well-known 16-layer
VGG16 [50] model which contains about fifteen million parameters,
ZKCPlus yields a practically acceptable overhead, which highlights
a great advancement over ZKCP. We also build a ‚Äúpay to SQL query‚Äù
application for trading SQL query results on databases; the two
Session 11B: Zero Knowledge II CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea3003parities can finish trading all the results of a sub-string selection
over 100,000 records in several seconds.
In summary, we make the following contributions:
‚Ä¢ We propose ZKCPlus, an extended and optimized version of
ZKCP, which supports efficient and versatile fair-exchange appli-
cations on large-scale data. With a new prover-efficient CP-NIZK
argument of knowledge, ZKCPlus features light-weighted public
setup phase and low seller‚Äôs proving overhead, and is capable of
supporting very complicated predicates.
‚Ä¢ We build a prototype of ZKCPlus and develop several applica-
tions upon it, including a practical ‚Äúpay to CNN model‚Äù appli-
cation. Evaluations demonstrate the excellent performance of
ZKCPlus, vastly surpassing the original ZKCP in many aspects.
2 Preliminaries
2.1 Notations
Let G be a cyclic group of a prime order p, and Fp be the corre-
sponding scalar field. Vectors of length n over G and Fp are de-
$‚Üê Fp we mean uniformly
noted by Gn and Fn
sampling an element x from Fp. For a vector a ‚àà Fn
p and a scalar
c ‚àà Fp we write b = c ¬∑ a ‚àà Fn
p where b = (c ¬∑ a1, . . . , c ¬∑ an).
j‚àà[n] aj ¬∑ bj for inner product of a and b, and
a‚ó¶b = (a1¬∑b1, . . . , an¬∑bn) for Hadamard (entry-wise) product. Group
operations are written additively. For x ‚àà Fp and G ‚àà G, scalar
multiplication is denoted as x ¬∑ G, and multi-scalar multiplication
is written in vector inner product form as ‚ü®x, G‚ü©.
We write ‚ü®a, b‚ü© =
p respectively. By x
Let R be a polynomial-time decidable relation on the pair (s, w),
where s is an NP statement, and w is the witness. We write R(s, w) =
1 if relation R holds on (s, w), and R(s, w) = 0 otherwise. When
necessary, we write out R explicitly as
{public inputs; witness|relation}.
2.2 Commitments
A non-interactive commitment scheme is a tuple of algorithms
Com = (Setup, Commit, Check) which satisfies the notion of cor-
rectness, binding and hiding (formal definitions in Appendix A.2):
‚Ä¢ Setup(1ùúÜ) ‚Üí pp generates public parameter pp for the scheme
on input of security parameter ùúÜ;
‚Ä¢ Commit(pp, u) ‚Üí (c, r) takes message u in message space Mpp,
outputs its commitment c in commitment space Cpp and opening
randomness (blinder) r in randomness space Rpp;
‚Ä¢ Check(pp, c, u, r) ‚Üí b takes commitment c, message u, random-
ness r, and accepts (b = 1) or rejects (b = 0).
In this work, we mostly use the Pedersen commitment [47]
scheme. Combining the scalar and vector forms, for message space
p with n ‚â• 1, randomness space Rpp = Fp, and commitment
Mpp = Fn
space Cpp = G, the scheme runs as
‚Ä¢ Setup(1ùúÜ) ‚Üí pp randomly samples H
$‚Üê G, G $‚Üê Gn from a
group G whose order is implicitly dependent on the security
parameter, and outputs pp = (H, G);
‚Ä¢ For vector input v, Commit(pp, v) ‚Üí (V, ùúà) samples ùúà $‚Üê Fp,
and computes V = ‚ü®v, G‚ü© + ùúà ¬∑ H. When n = 1, the vector v
reduces to a scalar v, and V = v ¬∑ G + ùúà ¬∑ H;
‚Ä¢ For vector input v, Check(pp, V, v, ùúà) ‚Üí b outputs binary deci-
sion b = 1 iff V = ‚ü®v, G‚ü© + ùúà ¬∑ H. When n = 1, for scalar input v,
Check(pp, V, v, ùúà) ‚Üí b outputs b = 1 iff V = v ¬∑ U + ùúà ¬∑ H.
The scheme is correct, perfectly hiding and computationally bind-
ing under the discrete logarithm relation assumption defined in
Appendix A.1. In addition, the scheme is homomorphic as
Commit(pp, v1) + Commit(pp, v2) = Commit(pp, v1 + v2),
where the add operation + is define in G on the LHS and in Fp on
the RHS.
2.3 Zero-knowledge arguments of knowledge
For a polynomial-time decidable relation R and a statement s, a
zero-knowledge argument of knowledge allows prover P to demon-
strate to verifier V its knowledge of a witness w s.t. R(s, w) = 1,
and in the meanwhile reveal no information about w, except what
can be inferred from the statement s. For interactive P and V
both referring to a common reference string (CRS) ùúé generated
by a preliminary algorithm KeyGen, we denote their transcript as
tr ‚Üê ‚ü®P(ùúé, s, w),V(ùúé, s; ùúå)‚ü©, where ùúå denotes the verifier‚Äôs random-
ness. We write ‚ü®P(ùúé, s, w),V(ùúé, s; ùúå)‚ü© = b depending on whether
V accepts (b = 1) or rejects (b = 0).
We say the tuple Arg = (KeyGen, P,V) is an argument of knowl-
edge if it satisfies the notion of perfect completeness and compu-
tational witness-extended emulation. The argument Arg is said to
be public-coin if all messages sent by V are sampled uniformly at
random and independent of P‚Äôs messages. A public-coin Arg is
said to have special honest-verifier zero-knowledge if it is possible to
simulate the transcript for any set of challenges without accessing
the witness w. Formal definitions of these terms can be found in
Appendix A.3.
By Fiat-Shamir heuristic [24], an interactive public-coin zero-