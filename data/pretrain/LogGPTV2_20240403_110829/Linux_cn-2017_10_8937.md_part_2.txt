```
func draw(cells [][]*cell, window *glfw.Window, program uint32) {
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
    gl.UseProgram(program)
    for x := range cells {
        for _, c := range cells[x] {
            c.draw()
        }
    }
    glfw.PollEvents()
    window.SwapBuffers()
}
```
如你所见，我们循环每一个细胞，调用它的 `draw` 函数。如果运行这段代码，你能看到像下面这样的东西：
![Conway's Game of Life - 全部格子](/data/attachment/album/201710/07/223512fukkduvyxvxvj5d5.png)
这是你想看到的吗？我们做的是在格子里为每一行每一列创建了一个方块，然后给它上色，这就填满了整个面板！
注释掉 for 循环，我们就可以看到一个明显独立的细胞，像这样：
```
// for x := range cells {
//     for _, c := range cells[x] {
//         c.draw()
//     }
// }
cells[2][3].draw()
```
![Conway's Game of Life - 一个单独的细胞](/data/attachment/album/201710/07/223512yk5w3el05emzahzi.png)
这只绘制坐标在 `(X=2, Y=3)` 的格子。你可以看到，每一个独立的细胞占据着面板的一小块部分，并且负责绘制自己那部分空间。我们也能看到游戏面板有自己的原点，也就是坐标为 `(X=0, Y=0)` 的点，在窗口的左下方。这仅仅是我们的 `newCell` 函数计算位置的方式，也可以用右上角，右下角，左上角，中央，或者其它任何位置当作原点。
接着往下做，移除 `cells[2][3].draw()` 这一行，取消 for 循环的那部分注释，变成之前那样全部绘制的样子。
### 总结
好了，我们现在能用两个三角形画出一个正方形了，我们还有一个游戏的面板了！我们该为此自豪，目前为止我们已经接触到了很多零碎的内容，老实说，最难的部分还在前面等着我们！
在接下来的第三节，我们会实现游戏核心逻辑，看到很酷的东西！
### 回顾
这是这一部分教程中 `main.go` 文件的内容：
```
package main
import (
    "fmt"
    "log"
    "runtime"
    "strings"
    "github.com/go-gl/gl/v4.1-core/gl" // OR: github.com/go-gl/gl/v2.1/gl
    "github.com/go-gl/glfw/v3.2/glfw"
)
const (
    width  = 500
    height = 500
    vertexShaderSource = `
        #version 410
        in vec3 vp;
        void main() {
            gl_Position = vec4(vp, 1.0);
        }
    ` + "\x00"
    fragmentShaderSource = `
        #version 410
        out vec4 frag_colour;
        void main() {
            frag_colour = vec4(1, 1, 1, 1.0);
        }
    ` + "\x00"
    rows    = 10
    columns = 10
)
var (
    square = []float32{
        -0.5, 0.5, 0,
        -0.5, -0.5, 0,
        0.5, -0.5, 0,
        -0.5, 0.5, 0,
        0.5, 0.5, 0,
        0.5, -0.5, 0,
    }
)
type cell struct {
    drawable uint32
    x int
    y int
}
func main() {
    runtime.LockOSThread()
    window := initGlfw()
    defer glfw.Terminate()
    program := initOpenGL()
    cells := makeCells()
    for !window.ShouldClose() {
        draw(cells, window, program)
    }
}
func draw(cells [][]*cell, window *glfw.Window, program uint32) {
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
    gl.UseProgram(program)
    for x := range cells {
        for _, c := range cells[x] {
            c.draw()
        }
    }
    glfw.PollEvents()
    window.SwapBuffers()
}
func makeCells() [][]*cell {
    cells := make([][]*cell, rows, rows)
    for x := 0; x 
作者：[kylewbanks](https://twitter.com/kylewbanks) 译者：[GitFtuture](https://github.com/GitFuture) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出