1
2
1
18
8
18
8
7
18
18
18
18
18
8
18
8
18
1
11
18
8
18
8
6
3
18
18
8
18
49
1
8
7
Baseline
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
4592
6.2 Generalized Results
Table 4 shows that nginx is representative for all evaluated servers.
The fraction of tainted callsites is comparable, with the exception
that callsites in httpd are not controllable using segregated state;
httpd creates a new process for each connection, preventing our
history flushing attack. In all evaluated servers, attacker-controlled
callsites remain even under :Ptr write constraints.
Moreover, in all servers, a significant number of legal targets
remain even under the strongest dynamic target constraints (Live
:GOT), with the exception of a small number (the aforementioned
cases with httpd, and one case in memcached). The same is true
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1684Table 4: Summarized number of controllable callsites and targets for each server. Callsites: number of tainted (controllable)
callsites under varying write constraints. Targets (dynamic): total permissible targets (absolute) under each dynamic target
constraint. Targets (static): total permissible targets (median) under each static target constraint.
Server
nginx
lighttpd
httpd
redis
memcached
bind
Callsites
Write constraint
None
:CPtr
:Ptr
Segr
Segr & :Ptr
None
:CPtr
:Ptr
Segr
Segr & :Ptr
None
:CPtr
:Ptr
Segr
Segr & :Ptr
None
:CPtr
:Ptr
Segr
Segr & :Ptr
None
:CPtr
:Ptr
Segr
Segr & :Ptr
None
:CPtr
:Ptr
Segr
Segr & :Ptr
Tainted
35
13
8
2
1
12
7
2
8
2
33
27
13
0
0
14
11
11
2
2
8
3
3
1
0
43
40
39
1
1
Baseline
Live +page
Computed
Live
Targets (dynamic)
Live :GOT
4,592
2,336
786
767
708
4,450
1,867
497
474
409
6,113
3,835
2,002
1,985
1,928
0
0
0
0
0
0
0
0
0
0
5,381
2,311
771
612
546
4,326
2,420
0
0
752
0
738
0
7,693
2,829
1,028
1,010
391
0
918
Targets (static)
Safe src types
988
953
787
108
2
249
228
56
230
56
1,471
1,469
1,079
0
0
470
470
470
13
13
275
243
243
18
0
1,323
1,253
1,241
199
199
Bin types
1,952
1,952
1,952
1,571
1,571
1,686
1,512
1,187
1,686
1,187
3,464
3,464
3,408
0
0
2,253
2,253
2,253
1,227
1,227
2,314
1,624
1,624
2,105
0
2,762
2,762
2,762
1,936
1,936
Src types
201
193
160
5
2
50
37
6
39
6
310
302
139
0
0
219
219
219
11
11
35
7
7
18
0
393
383
371
20
20
for static target constraints; even under source-level type-based
target constraints, an attacker has multiple targets to choose from
(ranging from 2 to 393 targets) in each case where callsite corrup-
tion is possible. For several servers, including nginx, lighttpd,
redis, and bind, these results apply even to a segregated state
attack model with type-based target constraints.
These results show that Newton is capable of locating con-
trollable callsites and a choice of potential targets under even the
strongest defenses. Recall that these results assume a low-effort
attacker, sending only a single request to each server; thus, these
results are a lower-bound for the number of controllable callsites.
7 CONSTRUCTING ATTACKS WITH Newton
This section documents our experience using Newton to bypass
two advanced state-of-the-art defenses: CsCFI [16, 28, 44, 54, 67]
and CPI [43]. Our case studies are constructed in an architecture-
independent fashion: unlike traditional ROP, we operate on pro-
gram semantics. Thus, our results are generally applicable on dif-
ferent architectures, such as x86 and ARM. We specifically focus
our analysis on ideal implementations of CPI and CsCFI, given
that existing work has already discussed the general limitations of
CFI [13, 14, 23, 27, 32, 33] and leakage-resistant randomization [58].
7.1 CsCFI
In this case study, we target CsCFI on nginx. As described in §5,
to bypass CsCFI’s write constraint (Segr), we look for callsites con-
trollable from a segregated (connection-specific) state. We (1) open
a connection c1 to prepare its memory state, (2) flush the branch
history by sending n parallel requests over another connection c2
(disabling CsCFI’s protection), and finally (3) send a request over
connection c1 to divert control flow from a C1-controlled callsite.
As shown in Table 3, Newton provides us with two candidate
callsites to bypass CsCFI (those with the Segr column checked). We
select callsite 33 in the function ngx_http_write_filter:
chain = c->send_chain(c, r->out, limit);
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1685Here, c is a pointer to our connection state (ngx_connection_t),
which contains a code pointer called send_chain. Clearly, the con-
nection state and code pointers stored therein are isolated from
other connections. Other than send_chain and c itself (first argu-
ment), Newton also reports that the second r->out argument is
tainted and controllable from corrupted connection-specific state.
With manual inspection, we verified that (1) controlling the tar-
get and arguments with an arbitrary memory write to segregated
state allows request handling to complete without crashes, (2) we
also control the third argument by controlling the limit_rate
and limit_rate_after configuration variables and flipping a sin-
gle (uncovered) branch in the execution, and (3) execution contin-
ues correctly if the send_chain call is diverted to a different tar-
get returning a 0 value, allowing us to chain successful calls via
repeated interactions with the server.
Newton also provides us with a list of all the possible 4592
targets (no target constraints) for our selected callsite. We target
mprotect to escalate code reuse to a code corruption attack. This
function expects three arguments: (1) the start address of the af-
fected memory region, (2) the size of the region, and (3) the protec-
tion flags.
To select the start address, we overwrite the c pointer and re-
point it to a counterfeit object prepared with identical connection
state in a memory location of our choosing. To select the protec-
tion flags, we overwrite the limit_rate_after variable to ensure
the final limit computation has the PROT_READ|WRITE|EXEC bits
set in the lowest byte. To select the size, we need to redirect the
r->out pointer to a value of our choosing. However, it is chal-
lenging to enforce a small r->out pointer value, since the lower
part of the address space is not normally mapped. To address this
challenge, we aim for a large mprotect surface, spanning from
the heap (i.e., the controlled c pointer) all the way to libc code.
The latter is the next region in line in the address space, only sep-
arated from the heap by a single unmapped gap. To fill the gap,
we use a preliminary request to redirect control to libc’s malloc
without worrying about its argument—since this is a pointer, call-
ing malloc will result in a large allocation, adjacent to libc in our
setting.
At this point, we safely hijack our victim callsite to call mprotect
and make the (now larger) heap and the entire libc code read-
able, writeable, and executable. Once mprotect succeeds, we issue
another request to corrupt libc’s gettimeofday function with
our own shellcode. The shellcode runs when nginx processes the
next request, giving us arbitrary code execution. Figure 4 shows
an overview of the attack.
Evidently, even a state-of-the-art defense like CsCFI alone is
not sufficient to stop an attacker armed with dynamic analysis.
Instead, to limit the power of these attacks, we must carefully
combine context-sensitive CFI with traditional CFI or other de-
fenses. Note that state-of-the-art binary-level CFI policies based
on argument/return count matching (TypeArmor) cannot prevent