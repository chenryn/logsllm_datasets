








Fig. 3. Examples of Cyclic XOR-Based DSS
possible. The goal of 2) is to not provide information from
one or a few secrets’ reconstructions that can make it easy to
reveal the remaining secrets. The goal of 3) is to make the
probability that an adversary learns the true secret small, even
if a few secrets are reconstructed.
IV. CYCLIC XOR-BASED DSS
A major problem with the SIMPLE scheme described in
Section II is that some shares are present in many secrets while
other shares are present in only one secret. This imbalance can
be exploited by an attacker to learn information about which
shares are part of the true secret. In this section, we present
and analyze a family of schemes, which we call Cyclic XOR-
Based Deceptive Secret Sharing (or CYCLIC for short). With
CYCLIC, the number of secrets that a share is part of is nearly
identical for every share in the system. Furthermore, CYCLIC
has a parameter, which controls the amount of overlap between
different secrets that have common shares. Later analysis will
show that this parameter can be used to tune the storage
overhead and security of CYCLIC. At one extreme when
overlap is small, CYCLIC is similar to NAIVE with high
storage overhead but strong security.2 At the other extreme,
i.e. large overlap, CYCLIC is similar to SIMPLE with much
lower storage overhead but weaker security. In between the
extremes, CYCLIC provides a range of options that provide
both storage savings, as compared to NAIVE, and security
improvements relative to SIMPLE.
A. Description of CYCLIC Scheme
CYCLIC is based on (n, n) XOR secret sharing. Suppose
we need m secrets, where one is the real secret and m − 1
are fake secrets planted for deception purposes. The scheme is
illustrated with examples in Figure 3. We draw all shares on a
circle. A set of neighboring shares make up the shares of one
secret, as indicated by the oblong groupings. Note that some
shares belong to more than one grouping meaning those shares
are part of more than one secret. Note also that the number of
secrets which each share is a part of is nearly identical for all
shares. In the example on the left, each share is part of either
one or two different secrets. In the example on the right, most
shares are part of exactly two different secrets.
2How we measure security will be described later.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 
We now present CYCLIC in a more general fashion. We
denote the overlap between two neighboring groups on the
circle by r. In Figure 3, r = 1 for the example on the left and
r = 2 for the example on the right. Most secrets have exactly
r shares in common with the previous secret on the circle.
For certain values of m, n, and r, there are some secrets that
share fewer than r shares with the previous secret, as happens
in the example on the right-hand side of Figure 3.
The following describes a method to generate share values
in the CYCLIC scheme. For the ﬁrst secret, we generate n−1
random shares and one ﬁnal share to produce the proper secret.
Other secrets contain some shares that belong to the previous
secret on the circle and some new shares. For example, the
second secret uses the last r shares from the ﬁrst secret,
generates n − r − 1 shares randomly, and generates its nth
share so as to produce its secret value. This continues until
the generated number of secrets is approaching m. As can be
seen in the ﬁgure, some secrets on the end of the circle wrap
around and overlap with the ﬁrst secret. As long as these wrap-
around secrets have at least one share that is not in common
with any other secret, their wrap-around parts use the existing
shares from Secret 1 (see the example on the left of Figure 3).
In some cases, e.g. the example on the right of Figure 3, the
secrets that wrap around use some of the shares from the ﬁrst
secret, but generate one additional share at the same position
on the circle as one of the ﬁrst secret’s shares. In the example
on the right in Figure 3, note that Secret 6 has one share
outside the circle in the same position as one of Secret 1’s
shares. This new share takes the same position on the circle
as the corresponding share of Secret 1 and can be thought as a
second version of the original share. This share is necessary,
because all other shares of Secret 6 are pre-determined by
either Secret 5 or Secret 1. The new share is unique to Secret
6 and can be generated so as to produce the proper secret
value, despite all other shares being pre-determined.
Since the total number of shares is an important overhead
measure of a secret sharing scheme, we now analyze the
number of additional shares that are needed when wrapping
around. Since a “wrap-around secret” has r shares in common
with the previous secret and r shares in common with Secret
1, a new share at an existing position is needed if r + r ≥ n,
meaning that the existing shares would cover all the shares
of the wrap-around secret. So, the situation on the right of
Figure 3 occurs if and only if r ≥ n/2 (note that r < n/2
in the example on the left of Figure 3 while r = n/2 in the
example on the right). We denote the number of additional
shares by p. When r ≥ n/2, p is the number of secrets that
wrap around on the circle since one additional share is needed
for each such secret. Thus, in this case, p is equal to the
number of secrets that have their last n−r positions contained
in the positions of the ﬁrst secret, i.e. p = (cid:3) n
B. Overhead of CYCLIC Scheme
n−r(cid:4) − 1.
The overhead of a deceptive secret sharing scheme is
determined by the total number of shares that are used to secret
share a single object, including shares created for deception
445
purposes. The number of shares corresponds to the storage
blow-up, as compared to storing an object without secret
sharing and deception. The number of shares also indicates
the communication overhead of reading or writing an object.
This can be seen from Figure 2 since all shares are written
(read) each time an object is written (read). Here, we evaluate
the number of shares required by CYCLIC and we compare it
against the NAIVE and SIMPLE schemes mentioned earlier.
Given the number of shares making up each secret n, and
the overlap r, we can derive the total number of shares,
Nshare, used by the CYCLIC scheme. We start by counting
the number of share positions around the circle. Note that
each secret has r positions in common with both the secret
that follows it and the secret that precedes it. Thus, the total
number of share positions is m(n − r). There is one share
for each position on the circle and, when r ≥ n/2, there are
p additional shares, one for each wrap-around secret. Thus,
Nshare = m(n − r) + p = (n − r)m + (cid:3) n
n−r(cid:4) − 1. Note that
this formula is valid even when no additional shares are used,
because from the equation for p, we see that if r < n/2 and
no additional shares are needed, then p = 0.
We assume that m, which is the total number of secrets
(real and fake) for one object, is given as a parameter. This
parameter measures how deceptive the approach is, i.e. how
many fake secrets the true secret is hidden among. With a
given m, to reduce the number of shares with CYCLIC we
should increase the overlap r, since a larger overlap produces
a higher share re-use.
When r = 0, the formula for Nshare given above for
CYCLIC simpliﬁes to mn, which is the number of shares for
NAIVE (m secrets independently secret shared with n shares).
With r = n− 1, the formula simpliﬁes to m + n− 1, which is
the number of shares for SIMPLE (see Section II). Thus, the
number of shares with the two extreme overlaps, r = 0 and
r = n − 1 for CYCLIC, produce the same number of shares
as the NAIVE and SIMPLE schemes, respectively.
Figure 4 shows how the overhead of the CYCLIC scheme
varies with r, for different values of n and m. In Figure 4a,
we ﬁx n = 15 and vary m from 50 to 200. In Figure 4b, we
ﬁx m = 50 and vary n from 15 to 30. In both ﬁgures, r is
varied across its full range, i.e. from 0 to n− 1. From the two
ﬁgures, we see that when the overlap increases, the number
of shares decreases linearly. More importantly, depending on
the choice of r, the overhead of the CYCLIC scheme varies
from the highest possible, which is the same as NAIVE, to
the lowest, which is the same as SIMPLE. This provides the
ﬂexibility to vary the deceptive secret sharing scheme across
a wide range of overheads. In the next subsection, we will see
how this ﬂexibility can be used to produce tunable security.
C. Security of CYCLIC Scheme
As mentioned in Section III-B, we are interested both in
the amount of work an adversary must do to reconstruct one
secret and the amount of work required to reconstruct all
secrets given one secret has already been reconstructed. Next,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 4. Number of shares for CYCLIC scheme. We ﬁx n = 15 in (a), and
m = 50 in (b).
we evaluate these quantities for CYCLIC and compare them
against SIMPLE and NAIVE.
n
(cid:3)
(cid:2)
Nshare
1) Reconstructing a ﬁrst secret: As mentioned earlier, we
make a worst-case assumption that an adversary has access to
all shares of an object (both real and fake). We also do not
rely on security by obscurity, in that we assume an adversary
knows the parameters of the CYCLIC scheme, i.e. m, n, and
r. IfN comb all is the number of possible share combinations
that could make up a secret, Nshare is the total number of
shares, and n is the number of shares in one secret, then
Ncomb all =
. When constructing the ﬁrst secret, there
is no previous information to use, so the adversary can only try
different combinations of shares until one produces a correct
reconstruction. If an adversary picks combinations at random
to try in this manner, then the number of attempts required
to reconstruct the ﬁrst secret is a random variable. Thus, we
quantify the security of this step as the probability that an
adversary can reconstruct at least one secret within t attempts.
Note that, when an adversary tries a particular combination
of shares and fails to reconstruct a valid secret, they get very
little information that can help guide future attempts. This is
because it is still possible for any of the other combinations to
produce a valid secret and the probability of any combination
being correct
is affected very little by a single incorrect
attempt. Given this, we assume that the adversary’s strategy
before it has reconstructed any valid secret is to choose a
combination at random from all unattempted combinations.
Under this strategy, the probability of reconstructing at least
one secret in t attempts can be calculated as:
P (t) =P (at least one secret reconstructed within t attempts)
= 1 − tY
P (no secret reconstructed on ith attempt |
i=1
no secret reconstructed on all previous attempts)
= 1 − N − m
N
× . . . × N − m − t + 1
N − t + 1
(1)
446
Fig. 5. Number of attempts to reconstruct one secret with probability 0.1.
We ﬁx n = 15 in (a), and ﬁx m = 50 in (b). (log scale on y axes)
In the above analysis, N is used as a shorthand for Ncomb all.
A secure secret sharing scheme should guarantee that the
adversary has to make a large number of attempts to retrieve
one secret with even a small probability. We deﬁne N p
comb as
the minimum number of attempts an adversary has to make
to have a probability of at least p of reconstructing at least
one secret. In other words, N p
comb is the minimum t such that
P (t) ≥ p. A higher N p
comb means an adversary must work
harder to achieve a given probability of secret reconstruction.
Note that a larger Ncomb all will reduce the probability
to retrieve one secret and will, therefore, increase N p
comb.
N p
comb should be large enough to make the reconstruction
process impractical for the adversary. We compare the security
levels, quantiﬁed by N p
comb, of the three different schemes in
Figure 5. Figure 5a and 5b show the number of combinations
when p = 0.1 and m and n are varied, respectively. We can
see that NAIVE and CYCLIC always provide security levels
that are signiﬁcantly higher than SIMPLE.
From the results above, we can see that CYCLIC, with the
chosen overlaps, always provides better security than SIMPLE
and we know from Section IV-B that it has lower overhead
than NAIVE when the overlap is less than n−1. This illustrates
the trade-off between overhead and security possible with
CYCLIC. While SIMPLE has the lowest overhead, in some
cases, its security level can simply be too low. We give a
concrete example next to illustrate this.
Assume a powerful adversary has a thousand computational
nodes, each with a 5 GHz processor. Total computational
cycles for the adversary are 1.6 ∗ 1020 per year. We ignore
memory and disk I/O time, and just consider the XOR
operation, where each operation takes one clock cycle. For
a 256*256 B/W bitmap image and n = 15, reconstructing a
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 
attempts
time
no. shares
SIMPLE
1013
1 month
64
NAIVE
1030
1016years
750
CYCLIC 9
1024
108years
301
CYCLIC 13
1017
1000 years
106
COMPARISON OF DIFFERENT SECRET SHARING SCHEMES
TABLE I
secret requires 256∗ 256∗ (15− 1) ≈ 9∗ 105 XOR operations.
Then to guarantee that an adversary cannot reconstruct one
secret within one year with a probability of at
least 0.1,
9∗105 = 1.8 ∗ 1014
the scheme needs to provide at least 1.61023
possible combinations. For m = 50, the computation times
for SIMPLE, NAIVE, and CYCLIC under these assumptions
are shown in Table I (r = 9 and r = 13 for CYCLIC). For
SIMPLE, an adversary has a 1 in 10 chance to retrieve the
ﬁrst secret within a month, but an adversary would need many