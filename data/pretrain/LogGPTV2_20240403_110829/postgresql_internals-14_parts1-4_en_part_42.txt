startup_cost | total_cost
−−−−−−−−−−−−−−+−−−−−−−−−−−−
0.00 | 2.78
(1 row)
Parameterized Joins
Nowlet’sconsideramorecommonexamplethatdoesnotboildowntoaCartesian
product:
=> CREATE INDEX ON tickets(book_ref);
=> EXPLAIN SELECT *
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
WHERE t.book_ref = '03A76D';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=0.99..45.68 rows=6 width=136)
−> Index Scan using tickets_book_ref_idx on tickets t
(cost=0.43..12.46 rows=2 width=104)
Index Cond: (book_ref = '03A76D'::bpchar)
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(cost=0.56..16.58 rows=3 width=32)
Index Cond: (ticket_no = t.ticket_no)
(7 rows)
1 backend/optimizer/path/costsize.c,cost_rescanfunction
403
Chapter21 NestedLoop
HeretheNestedLoopnodetraversestherowsoftheouterset(tickets),andforeach
oftheserowsitsearchesforthecorrespondingrowsoftheinnerset(flights),pass-
ingtheticketnumber(t.ticket_no)totheconditionasaparameter.Whentheinner
node(IndexScan)iscalled,ithastodealwiththeconditionticket_no=constant.
Cardinalityestimation. Theplannerestimatesthatthefilterconditionbyabook-
ing number is satisfied by two rows of the outer set (rows=2), and each of these
rowsmatchesthreerowsoftheinnersetonaverage(rows=3).
Join selectivity is a fraction of the Cartesian product of the two sets that remains
afterthejoin. Itisobviousthatwemustexcludethoserowsofbothsetsthatcon-
tainvaluesinthejoinkeysincetheequalityconditionwillneverbesatisfied
forthem.
TheestimatedcardinalityequalsthecardinalityoftheCartesianproduct(thatis,
theproductofcardinalitiesofthetwosets)multipliedbytheselectivity.1
Heretheestimatedcardinalityofthefirst(outer)setistworows. Sincenocondi-
tionsareappliedtothesecond(inner)setexceptforthejoinconditionitself,the
cardinalityofthesecondsetistakenasthecardinalityoftheticket_flightstable.
Sincethejoinedtablesareconnectedbyaforeignkey,theselectivityestimation
reliesonthefactthateachrowofthechildtablehasexactlyonematchingrowin
theparenttable. Sotheselectivityistakenastheinverseofthesizeofthetable
referredtobytheforeignkey.2
Thus,forthecasewhentheticket_nocolumnscontainnovalues,theestima-
tionisasfollows:
=> SELECT round(2 * tf.reltuples * (1.0 / t.reltuples)) AS rows
FROM pg_class t, pg_class tf
WHERE t.relname = 'tickets'
AND tf.relname = 'ticket_flights';
rows
−−−−−−
6
(1 row)
1 backend/optimizer/path/costsize.c,calc_joinrel_size_estimatefunction
2 backend/optimizer/path/costsize.c,get_foreign_key_join_selectivityfunction
404
21.2 NestedLoopJoins
Clearly,tablescanbealsojoinedwithoutusingforeignkeys. Thentheselectivity
willbetakenastheestimatedselectivitiesoftheparticularjoinconditions.1
For the equi-join in this example, the generic formula for selectivity estimation
thatassumesuniformdistributionofvalueslooksasfollows:min 1 , 1 ,where
(nd nd )
1 2
nd andnd representthenumberofdistinctvaluesofthejoinkeyinthefirstand p.
1 2
secondset,respectively.2
Statisticsondistinctvaluesshowthatticketnumbersintheticketstableareunique
(whichisonlytobeexpected,astheticket_nocolumnistheprimarykey),andthe
ticket_flightshasaboutthreematchingrowsforeachticket:
=> SELECT t.n_distinct, tf.n_distinct
FROM pg_stats t, pg_stats tf
WHERE t.tablename = 'tickets' AND t.attname = 'ticket_no'
AND tf.tablename = 'ticket_flights' AND tf.attname = 'ticket_no';
n_distinct | n_distinct
−−−−−−−−−−−−+−−−−−−−−−−−−−
−1 | −0.30347472
(1 row)
Theresultwouldmatchtheestimationforthejoinwiththeforeignkey:
=> SELECT round(2 * tf.reltuples *
least(1.0/t.reltuples, 1.0/tf.reltuples/0.30347472)
) AS rows
FROM pg_class t, pg_class tf
WHERE t.relname = 'tickets' AND tf.relname = 'ticket_flights';
rows
−−−−−−
6
(1 row)
Theplannertriestorefinethisbaselineestimationwheneverpossible. Itcannot
usehistogramsatthemoment,butittakeslistsintoaccountifsuchstatistics p.
have been collected on the join key for both tables.3 The selectivity of the rows
thatappearinthelistcanbeestimatedmoreaccurately,andonlytheremaining
rowswillhavetorelyoncalculationsthatarebasedonuniformdistribution.
1 backend/optimizer/path/clausesel.c,clauselist_selectivityfunction
2 backend/utils/adt/selfuncs.c,eqjoinselfunction
3 backend/utils/adt/selfuncs.c,eqjoinselfunction
405
Chapter21 NestedLoop
Ingeneral,joinselectivityestimationislikelytobemoreaccurateiftheforeignkey
isdefined. Itisespeciallytrueforcompositejoinkeys,astheselectivityisoften
largelyunderestimatedinthiscase.
Usingthe command,youcanviewnotonlytheactualnumberof
rows,butalsothenumberoftimestheinnerloophasbeenexecuted:
=> EXPLAIN (analyze, timing off, summary off) SELECT *
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
WHERE t.book_ref = '03A76D';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=0.99..45.68 rows=6 width=136)
(actual rows=8 loops=1)
−> Index Scan using tickets_book_ref_idx on tickets t
(cost=0.43..12.46 rows=2 width=104) (actual rows=2 loops=1)
Index Cond: (book_ref = '03A76D'::bpchar)
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(cost=0.56..16.58 rows=3 width=32) (actual rows=4 loops=2)
Index Cond: (ticket_no = t.ticket_no)
(8 rows)
Theoutersetcontainstworows(actual rows=2);theestimationhasbeencorrect.
SotheIndexScannodewasexecutedtwice(loops=2),andeachtimeitselectedfour
rows on average (actual rows=4). Hence the total number of found rows: actual
rows=8.
Idonotshowtheexecutiontimeofeachstageoftheplan()fortheoutputtofit
thelimitedwidthofthepage;besides,onsomeplatformsanoutputwithtimingenabled
cansignificantlyslowdownqueryexecution. Butifwedidincludeit,Postgrewould
displayanaveragevalue,justlikefortherowcount.Togetthetotalexecutiontime,you
shouldmultiplythisvaluebythenumberofiterations(loops).
Costestimation. Thecostestimationformulahereisthesameasintheprevious
examples.
Let’srecallourqueryplan:
406
21.2 NestedLoopJoins
=> EXPLAIN SELECT *
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
WHERE t.book_ref = '03A76D';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=0.99..45.68 rows=6 width=136)
−> Index Scan using tickets_book_ref_idx on tickets t
(cost=0.43..12.46 rows=2 width=104)
Index Cond: (book_ref = '03A76D'::bpchar)
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(cost=0.56..16.58 rows=3 width=32)
Index Cond: (ticket_no = t.ticket_no)
(7 rows)
Inthiscase,thecostofeachsubsequentscanoftheinnersetisthesameasthat
ofthefirstscan.Soweultimatelygetthefollowingfigures:
=> SELECT 0.43 + 0.56 AS startup_cost,
round((
12.46 + 2 * 16.57 +
6 * current_setting('cpu_tuple_cost')::real
)::numeric, 2) AS total_cost;
startup_cost | total_cost
−−−−−−−−−−−−−−+−−−−−−−−−−−−
0.99 | 45.66
(1 row)
Caching Rows (Memoization) v.
Iftheinnersetisrepeatedlyscannedwiththesameparametervalues(thusgiving
thesameresults),itmayturnouttobebeneficialtocachetherowsofthisset.
SuchcachingisperformedbytheMemoize1node. BeingsimilartotheMaterialize
node,itisdesignedtohandleparameterizedjoinsandhasamuchmorecomplex
implementation:
1 backend/executor/nodeMemoize.c
407
Chapter21 NestedLoop
• The Materialize node simply materializes all the rows returned by its child
node,while Memoize ensures that the rows returned for different parameter
valuesarekeptseparately.
• Intheeventofanoverflow,theMaterializestoragestartsspillingrowstodisk,
while Memoize keeps all the rows in memory (there would otherwise be no
pointincaching).
HereisanexampleofaquerythatusesMemoize:
=> EXPLAIN SELECT *
FROM flights f
JOIN aircrafts_data a ON f.aircraft_code = a.aircraft_code
WHERE f.flight_no = 'PG0003';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=5.44..387.10 rows=113 width=135)
−> Bitmap Heap Scan on flights f
(cost=5.30..382.22 rows=113 width=63)
Recheck Cond: (flight_no = 'PG0003'::bpchar)
−> Bitmap Index Scan on flights_flight_no_scheduled_depart...
(cost=0.00..5.27 rows=113 width=0)
Index Cond: (flight_no = 'PG0003'::bpchar)
−> Memoize (cost=0.15..0.27 rows=1 width=72)
Cache Key: f.aircraft_code
Cache Mode: logical
−> Index Scan using aircrafts_pkey on aircrafts_data a
(cost=0.14..0.26 rows=1 width=72)
Index Cond: (aircraft_code = f.aircraft_code)
(13 rows)
4MB The size of the memory chunk used to store cached rows equals work_mem×
1.0 ×hash_mem_multiplier. Asimpliedbythesecondparameter’sname,cachedrows
arestoredinahashtable(withopenaddressing).1 Thehashkey(shownasCache
Keyintheplan)istheparametervalue(orseveralvaluesiftherearemorethanone
parameter).
Allthehashkeysareboundintoalist;oneofitsendsisconsideredcold(sinceit
containsthekeysthathavenotbeenusedforalongtime),whiletheotherishot
(itstoresrecentlyusedkeys).
1 include/lib/simplehash.h
408
21.2 NestedLoopJoins
IfacallontheMemoizenodeshowsthatthepassedparametervaluescorrespond
tothealreadycachedrows,theserowswillbepassedontotheparentnode(Nested
Loop)withoutcheckingthechildnode.Theusedhashkeyisthenmovedtothehot
endofthelist.
Ifthecachedoesnotcontaintherequiredrows,theMemoizenodepullsthemfrom
its child node, caches them, and passes them on to the node above. The corre-
spondinghashkeyalsobecomeshot.
Asnewdataisbeingcached,itcanfillalltheavailablememory.Tofreesomespace,
therowsthatcorrespondtocoldkeysgetevicted. Thisevictionalgorithmdiffers
fromtheoneusedinthebuffercachebutservesthesamepurpose. p.
Some parameter values may turn out to have so many matching rows that they
donotfitintotheallocatedmemorychunk,evenifalltheotherrowsarealready
evicted.Suchparametersareskipped—itmakesnosensetocacheonlysomeofthe
rowssincethenextcallwillstillhavetogetalltherowsfromthechildnode.
Costandcardinalityestimations. Thesecalculationsarequitesimilartowhatwe
havealreadyseenabove.WejusthavetobearinmindthatthecostoftheMemoize
nodeshownintheplanhasnothingtodowithitsactualcost: itissimplythecost
ofitschildnodeincreasedbythecpu_tuple_costvalue.1 0.01
WehavealreadycomeacrossasimilarsituationfortheMaterializenode: itscost
isonlycalculatedforsubsequentscans2andisnotreflectedintheplan.
Clearly,itonlymakessensetouseMemoizeifitischeaperthanitschildnode.The
costofeachsubsequentMemoizescandependsontheexpectedcacheaccesspro-
fileandthesizeofthememorychunkthatcanbeusedforcaching.Thecalculated
value is highly dependent on the accurate estimation of the number of distinct
parametervaluestobeusedinthescansoftheinnersetofrows.3 Basedonthis
number,youcanweightheprobabilitiesoftherowstobecachedandtobeevicted
fromthecache. Theexpectedhitsreducetheestimatedcost,whilepotentialevic-
tionsincreaseit.Wewillskipthedetailsofthesecalculationshere.
1 backend/optimizer/util/pathnode.c,create_memoize_pathfunction
2 backend/optimizer/path/costsize.c,cost_memoize_rescanfunction
3 backend/utils/adt/selfuncs.c,estimate_num_groupsfunction
409
Chapter21 NestedLoop
To figure out what is actually going on during query execution, we will use the
command,asusual:
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT * FROM flights f
JOIN aircrafts_data a ON f.aircraft_code = a.aircraft_code
WHERE f.flight_no = 'PG0003';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (actual rows=113 loops=1)
−> Bitmap Heap Scan on flights f
(actual rows=113 loops=1)
Recheck Cond: (flight_no = 'PG0003'::bpchar)
Heap Blocks: exact=2
−> Bitmap Index Scan on flights_flight_no_scheduled_depart...
(actual rows=113 loops=1)
Index Cond: (flight_no = 'PG0003'::bpchar)
−> Memoize (actual rows=1 loops=113)
Cache Key: f.aircraft_code
Cache Mode: logical
Hits: 112 Misses: 1 Evictions: 0 Overflows: 0 Memory
Usage: 1kB
−> Index Scan using aircrafts_pkey on aircrafts_data a
(actual rows=1 loops=1)
Index Cond: (aircraft_code = f.aircraft_code)
(16 rows)
Thisqueryselectstheflightsthatfollowthesamerouteandareperformedbyair-
craftofaparticulartype,soallthecallsontheMemoizenodeusethesamehash
key. The first row has to be fetched from the table (Misses: 1),but all the subse-
quentrowsarefoundinthecache(Hits: 112).Thewholeoperationtakesjustk
ofmemory.
Theothertwodisplayedvaluesarezero: theyrepresentthenumberofevictions
and the number of cache overflows when it was impossible to cache all the rows
related to a particular set of parameters. Large figures would indicate that the
allocated cache is too small, which might be caused by inaccurate estimation of
thenumberofdistinctparametervalues. ThentheuseoftheMemoizenodecan
turnouttobequiteexpensive. Intheextremecase,youcanforbidtheplannerto
on usecachingbyturningofftheenable_memoizeparameter.
410
21.2 NestedLoopJoins
Outer Joins
Thenestedloopjoincanbeusedtoperformtheleftouterjoin:
=> EXPLAIN SELECT *
FROM ticket_flights tf
LEFT JOIN boarding_passes bp ON bp.ticket_no = tf.ticket_no
AND bp.flight_id = tf.flight_id
WHERE tf.ticket_no = '0005434026720';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop Left Join (cost=1.12..33.35 rows=3 width=57)
Join Filter: ((bp.ticket_no = tf.ticket_no) AND (bp.flight_id =
tf.flight_id))
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(cost=0.56..16.58 rows=3 width=32)
Index Cond: (ticket_no = '0005434026720'::bpchar)
−> Materialize (cost=0.56..16.62 rows=3 width=25)
−> Index Scan using boarding_passes_pkey on boarding_passe...
(cost=0.56..16.61 rows=3 width=25)
Index Cond: (ticket_no = '0005434026720'::bpchar)
(10 rows)
HerethejoinoperationisrepresentedbytheNestedLoopLeftJoinnode.Theplan-
nerhaschosenanon-parameterizedjoinwithafilter: itperformsidenticalscans
oftheinnersetofrows(sothissetishiddenbehindtheMaterializenode)andre-
turnstherowsthatsatisfythefiltercondition(JoinFilter).