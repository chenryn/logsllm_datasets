root can switch on and off command latency measurement code in the
eata_dma driver.
with the \filockup\fp and \fiunlock\fp commands,
root can control bus lockups simulated by the scsi_debug driver.
.tp
.i /proc/self
this directory refers to the process accessing the
.i /proc
filesystem,
and is identical to the
.i /proc
directory named by the process id of the same process.
.tp
.i /proc/slabinfo
information about kernel caches.
see
.br slabinfo (5)
for details.
.tp
.i /proc/stat
kernel/system statistics.
varies with architecture.
common
entries include:
.rs
.tp
.i cpu  10132153 290696 3084719 46828483 16683 0 25195 0 175628 0
.tq
.i cpu0 1393280 32966 572056 13343292 6130 0 17875 0 23933 0
the amount of time, measured in units of
user_hz (1/100ths of a second on most architectures, use
.ir sysconf(_sc_clk_tck)
to obtain the right value),
.\" 1024 on alpha and ia64
that the system ("cpu" line) or the specific cpu ("cpu\fin\fr" line)
spent in various states:
.rs
.tp
.i user
(1) time spent in user mode.
.tp
.i nice
(2) time spent in user mode with low priority (nice).
.tp
.i system
(3) time spent in system mode.
.tp
.i idle
(4) time spent in the idle task.
.\" fixme . actually, the following info about the /proc/stat 'cpu' field
.\"       does not seem to be quite right (at least in 2.6.12 or 3.6):
.\"       the idle time in /proc/uptime does not quite match this value
this value should be user_hz times the
second entry in the
.i /proc/uptime
pseudo-file.
.tp
.ir iowait " (since linux 2.5.41)"
(5) time waiting for i/o to complete.
this value is not reliable, for the following reasons:
.\" see kernel commit 9c240d757658a3ae9968dd309e674c61f07c7f48
.rs
.ip 1. 3
the cpu will not wait for i/o to complete;
iowait is the time that a task is waiting for i/o to complete.
when a cpu goes into idle state for outstanding task i/o,
another task will be scheduled on this cpu.
.ip 2.
on a multi-core cpu,
the task waiting for i/o to complete is not running on any cpu,
so the iowait of each cpu is difficult to calculate.
.ip 3.
the value in this field may
.i decrease
in certain conditions.
.re
.tp
.ir irq " (since linux 2.6.0)"
.\" precisely: linux 2.6.0-test4
(6) time servicing interrupts.
.tp
.ir softirq " (since linux 2.6.0)"
.\" precisely: linux 2.6.0-test4
(7) time servicing softirqs.
.tp
.ir steal " (since linux 2.6.11)"
(8) stolen time, which is the time spent in other operating systems when
running in a virtualized environment
.tp
.ir guest " (since linux 2.6.24)"
(9) time spent running a virtual cpu for guest
operating systems under the control of the linux kernel.
.\" see changelog entry for 5e84cfde51cf303d368fcb48f22059f37b3872de
.tp
.ir guest_nice " (since linux 2.6.33)"
.\" commit ce0e7b28fb75cb003cfc8d0238613aaf1c55e797
(10) time spent running a niced guest (virtual cpu for guest
operating systems under the control of the linux kernel).
.re
.tp
\fipage 5741 1808\fp
the number of pages the system paged in and the number that were paged
out (from disk).
.tp
\fiswap 1 0\fp
the number of swap pages that have been brought in and out.
.tp
.\" fixme . the following is not the full picture for the 'intr' of
.\"       /proc/stat on 2.6:
\fiintr 1462898\fp
this line shows counts of interrupts serviced since boot time,
for each of the possible system interrupts.
the first column is the total of all interrupts serviced
including unnumbered architecture specific interrupts;
each subsequent column is the total for that particular numbered interrupt.
unnumbered interrupts are not shown, only summed into the total.
.tp
\fidisk_io: (2,0):(31,30,5764,1,2) (3,0):\fp...
(major,disk_idx):(noinfo, read_io_ops, blks_read, write_io_ops, blks_written)
.br
(linux 2.4 only)
.tp
\fictxt 115315\fp
the number of context switches that the system underwent.
.tp
\fibtime 769041601\fp
boot time, in seconds since the epoch, 1970-01-01 00:00:00 +0000 (utc).
.tp
\fiprocesses 86031\fp
number of forks since boot.
.tp
\fiprocs_running 6\fp
number of processes in runnable state.
(linux 2.5.45 onward.)
.tp
\fiprocs_blocked 2\fp
number of processes blocked waiting for i/o to complete.
(linux 2.5.45 onward.)
.tp
.i softirq 229245889 94 60001584 13619 5175704 2471304 28 51212741 59130143 0 51240672
.\" commit d3d64df21d3d0de675a0d3ffa7c10514f3644b30
this line shows the number of softirq for all cpus.
the first column is the total of all softirqs and
each subsequent column is the total for particular softirq.
(linux 2.6.31 onward.)
.re
.tp
.i /proc/swaps
swap areas in use.
see also
.br swapon (8).
.tp
.i /proc/sys
this directory (present since 1.3.57) contains a number of files
and subdirectories corresponding to kernel variables.
these variables can be read and in some cases modified using
the \fi/proc\fp filesystem, and the (deprecated)
.br sysctl (2)
system call.
.ip
string values may be terminated by either \(aq\e0\(aq or \(aq\en\(aq.
.ip
integer and long values may be written either in decimal or in
hexadecimal notation (e.g., 0x3fff).
when writing multiple integer or long values, these may be separated
by any of the following whitespace characters:
\(aq\ \(aq, \(aq\et\(aq, or \(aq\en\(aq.
using other separators leads to the error
.br einval .
.tp
.ir /proc/sys/abi " (since linux 2.4.10)"
this directory may contain files with application binary information.
.\" on some systems, it is not present.
see the linux kernel source file
.i documentation/sysctl/abi.txt
for more information.
.tp
.i /proc/sys/debug
this directory may be empty.
.tp
.i /proc/sys/dev
this directory contains device-specific information (e.g.,
.ir dev/cdrom/info ).
on
some systems, it may be empty.
.tp
.i /proc/sys/fs
this directory contains the files and subdirectories for kernel variables
related to filesystems.
.tp
.ir /proc/sys/fs/aio\-max\-nr " and " /proc/sys/fs/aio\-nr " (since linux 2.6.4)"
.i aio\-nr
is the running total of the number of events specified by
.br io_setup (2)
calls for all currently active aio contexts.
if
.i aio\-nr
reaches
.ir aio\-max\-nr ,
then
.br io_setup (2)
will fail with the error
.br eagain .
raising
.i aio\-max\-nr
does not result in the preallocation or resizing
of any kernel data structures.
.tp
.i /proc/sys/fs/binfmt_misc
documentation for files in this directory can be found
in the linux kernel source in the file
.ir documentation/admin\-guide/binfmt\-misc.rst
(or in
.ir documentation/binfmt_misc.txt
on older kernels).
.tp
.ir /proc/sys/fs/dentry\-state " (since linux 2.2)"
this file contains information about the status of the
directory cache (dcache).
the file contains six numbers,
.ir nr_dentry ", " nr_unused ", " age_limit " (age in seconds),"
.i want_pages
(pages requested by system) and two dummy values.
.rs
.ip * 2
.i nr_dentry
is the number of allocated dentries (dcache entries).
this field is unused in linux 2.2.
.ip *
.i nr_unused
is the number of unused dentries.
.ip *
.i age_limit
.\" looks like this is unused in kernels 2.2 to 2.6
is the age in seconds after which dcache entries
can be reclaimed when memory is short.
.ip *
.i want_pages
.\" looks like this is unused in kernels 2.2 to 2.6
is nonzero when the kernel has called shrink_dcache_pages() and the
dcache isn't pruned yet.
.re
.tp
.i /proc/sys/fs/dir\-notify\-enable
this file can be used to disable or enable the
.i dnotify
interface described in
.br fcntl (2)
on a system-wide basis.
a value of 0 in this file disables the interface,
and a value of 1 enables it.
.tp
.i /proc/sys/fs/dquot\-max
this file shows the maximum number of cached disk quota entries.
on some (2.4) systems, it is not present.
if the number of free cached disk quota entries is very low and
you have some awesome number of simultaneous system users,
you might want to raise the limit.
.tp
.i /proc/sys/fs/dquot\-nr
this file shows the number of allocated disk quota
entries and the number of free disk quota entries.
.tp
.ir /proc/sys/fs/epoll " (since linux 2.6.28)"
this directory contains the file
.ir max_user_watches ,
which can be used to limit the amount of kernel memory consumed by the
.i epoll
interface.
for further details, see
.br epoll (7).
.tp
.i /proc/sys/fs/file\-max
this file defines
a system-wide limit on the number of open files for all processes.
system calls that fail when encountering this limit fail with the error
.br enfile .
(see also
.br setrlimit (2),
which can be used by a process to set the per-process limit,
.br rlimit_nofile ,
on the number of files it may open.)
if you get lots
of error messages in the kernel log about running out of file handles
(open file descriptions)
(look for "vfs: file\-max limit  reached"),
try increasing this value:
.ip
.in +4n
.ex
echo 100000 > /proc/sys/fs/file\-max
.ee
.in
.ip
privileged processes
.rb ( cap_sys_admin )
can override the
.i file\-max
limit.
.tp
.i /proc/sys/fs/file\-nr
this (read-only) file contains three numbers:
the number of allocated file handles
(i.e., the number of open file descriptions; see
.br open (2));
the number of free file handles;
and the maximum number of file handles (i.e., the same value as
.ir /proc/sys/fs/file\-max ).
if the number of allocated file handles is close to the
maximum, you should consider increasing the maximum.
before linux 2.6,
the kernel allocated file handles dynamically,
but it didn't free them again.
instead the free file handles were kept in a list for reallocation;
the "free file handles" value indicates the size of that list.
a large number of free file handles indicates that there was
a past peak in the usage of open file handles.
since linux 2.6, the kernel does deallocate freed file handles,
and the "free file handles" value is always zero.
.tp
.ir /proc/sys/fs/inode\-max " (only present until linux 2.2)"
this file contains the maximum number of in-memory inodes.
this value should be 3\(en4 times larger
than the value in
.ir file\-max ,
since \fistdin\fp, \fistdout\fp
and network sockets also need an inode to handle them.
when you regularly run out of inodes, you need to increase this value.
.ip
starting with linux 2.4,
there is no longer a static limit on the number of inodes,
and this file is removed.
.tp
.i /proc/sys/fs/inode\-nr
this file contains the first two values from
.ir inode\-state .
.tp
.i /proc/sys/fs/inode\-state
this file
contains seven numbers:
.ir nr_inodes ,
.ir nr_free_inodes ,
.ir preshrink ,
and four dummy values (always zero).
.ip
.i nr_inodes
is the number of inodes the system has allocated.
.\" this can be slightly more than
.\" .i inode\-max
.\" because linux allocates them one page full at a time.
.i nr_free_inodes
represents the number of free inodes.
.ip
.i preshrink
is nonzero when the
.i nr_inodes
>
.i inode\-max
and the system needs to prune the inode list instead of allocating more;
since linux 2.4, this field is a dummy value (always zero).
.tp
.ir /proc/sys/fs/inotify " (since linux 2.6.13)"
this directory contains files
.ir max_queued_events ", " max_user_instances ", and " max_user_watches ,
that can be used to limit the amount of kernel memory consumed by the
.i inotify
interface.
for further details, see
.br inotify (7).
.tp
.i /proc/sys/fs/lease\-break\-time
this file specifies the grace period that the kernel grants to a process
holding a file lease
.rb ( fcntl (2))
after it has sent a signal to that process notifying it
that another process is waiting to open the file.
if the lease holder does not remove or downgrade the lease within
this grace period, the kernel forcibly breaks the lease.
.tp
.i /proc/sys/fs/leases\-enable
this file can be used to enable or disable file leases
.rb ( fcntl (2))
on a system-wide basis.
if this file contains the value 0, leases are disabled.
a nonzero value enables leases.
.tp
.ir /proc/sys/fs/mount\-max " (since linux 4.9)"
.\" commit d29216842a85c7970c536108e093963f02714498
the value in this file specifies the maximum number of mounts that may exist
in a mount namespace.
the default value in this file is 100,000.
.tp
.ir /proc/sys/fs/mqueue " (since linux 2.6.6)"
this directory contains files
.ir msg_max ", " msgsize_max ", and " queues_max ,
controlling the resources used by posix message queues.
see
.br mq_overview (7)
for details.
.tp
.ir /proc/sys/fs/nr_open " (since linux 2.6.25)"
.\" commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b
this file imposes a ceiling on the value to which the
.br rlimit_nofile
resource limit can be raised (see
.br getrlimit (2)).
this ceiling is enforced for both unprivileged and privileged process.
the default value in this file is 1048576.
(before linux 2.6.25, the ceiling for
.br rlimit_nofile
was hard-coded to the same value.)
.tp
.ir /proc/sys/fs/overflowgid " and " /proc/sys/fs/overflowuid
these files
allow you to change the value of the fixed uid and gid.
the default is 65534.
some filesystems support only 16-bit uids and gids, although in linux
uids and gids are 32 bits.
when one of these filesystems is mounted
with writes enabled, any uid or gid that would exceed 65535 is translated
to the overflow value before being written to disk.
.tp
.ir /proc/sys/fs/pipe\-max\-size " (since linux 2.6.35)"
see
.br pipe (7).
.tp
.ir /proc/sys/fs/pipe\-user\-pages\-hard " (since linux 4.5)"
see
.br pipe (7).
.tp
.ir /proc/sys/fs/pipe\-user\-pages\-soft " (since linux 4.5)"
see
.br pipe (7).
.tp
.ir /proc/sys/fs/protected_fifos " (since linux 4.19)"
the value in this file is/can be set to one of the following:
.rs
.tp 4
0
writing to fifos is unrestricted.
.tp
1
don't allow
.b o_creat
.br open (2)
on fifos that the caller doesn't own in world-writable sticky directories,
unless the fifo is owned by the owner of the directory.
.tp
2
as for the value 1,
but the restriction also applies to group-writable sticky directories.
.re
.ip
the intent of the above protections is to avoid unintentional writes to an
attacker-controlled fifo when a program expected to create a regular file.
.tp
.ir /proc/sys/fs/protected_hardlinks " (since linux 3.6)"
.\" commit 800179c9b8a1e796e441674776d11cd4c05d61d7
when the value in this file is 0,
no restrictions are placed on the creation of hard links
(i.e., this is the historical behavior before linux 3.6).
when the value in this file is 1,
a hard link can be created to a target file
only if one of the following conditions is true:
.rs
.ip * 3
the calling process has the
.br cap_fowner
capability in its user namespace
and the file uid has a mapping in the namespace.
.ip *
the filesystem uid of the process creating the link matches
the owner (uid) of the target file
(as described in
.br credentials (7),
a process's filesystem uid is normally the same as its effective uid).
.ip *
all of the following conditions are true:
.rs 4
.ip \(bu 3
the target is a regular file;
.ip \(bu
the target file does not have its set-user-id mode bit enabled;
.ip \(bu
the target file does not have both its set-group-id and
group-executable mode bits enabled; and
.ip \(bu
the caller has permission to read and write the target file
(either via the file's permissions mask or because it has
suitable capabilities).
.re
.re
.ip
the default value in this file is 0.
setting the value to 1
prevents a longstanding class of security issues caused by
hard-link-based time-of-check, time-of-use races,
most commonly seen in world-writable directories such as
.ir /tmp .
the common method of exploiting this flaw
is to cross privilege boundaries when following a given hard link
(i.e., a root process follows a hard link created by another user).
additionally, on systems without separated partitions,
this stops unauthorized users from "pinning" vulnerable set-user-id and
set-group-id files against being upgraded by
the administrator, or linking to special files.
.tp
.ir /proc/sys/fs/protected_regular " (since linux 4.19)"
the value in this file is/can be set to one of the following:
.rs
.tp 4
0
writing to regular files is unrestricted.
.tp
1
don't allow
.b o_creat
.br open (2)
on regular files that the caller doesn't own in
world-writable sticky directories,
unless the regular file is owned by the owner of the directory.
.tp
2
as for the value 1,
but the restriction also applies to group-writable sticky directories.
.re
.ip
the intent of the above protections is similar to
.ir protected_fifos ,
but allows an application to
avoid writes to an attacker-controlled regular file,
where the application expected to create one.
.tp
.ir /proc/sys/fs/protected_symlinks " (since linux 3.6)"
.\" commit 800179c9b8a1e796e441674776d11cd4c05d61d7
when the value in this file is 0,
no restrictions are placed on following symbolic links
(i.e., this is the historical behavior before linux 3.6).
when the value in this file is 1, symbolic links are followed only
in the following circumstances:
.rs
.ip * 3
the filesystem uid of the process following the link matches
the owner (uid) of the symbolic link
(as described in
.br credentials (7),
a process's filesystem uid is normally the same as its effective uid);
.ip *
the link is not in a sticky world-writable directory; or
.ip *
the symbolic link and its parent directory have the same owner (uid)
.re
.ip
a system call that fails to follow a symbolic link
because of the above restrictions returns the error