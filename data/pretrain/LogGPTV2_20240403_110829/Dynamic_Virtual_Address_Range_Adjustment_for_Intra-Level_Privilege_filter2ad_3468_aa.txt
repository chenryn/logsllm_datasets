title:Dynamic Virtual Address Range Adjustment for Intra-Level Privilege
Separation on ARM
author:Yeongpil Cho and
Donghyun Kwon and
Hayoon Yi and
Yunheung Paek
Dynamic Virtual Address Range Adjustment
for Intra-Level Privilege Separation on ARM
Yeongpil Cho, Donghyun Kown, Hayoon Yi, and Yunheung Paek
ECE and ISRC, Seoul National University
{ypcho, dhkwon, hyyi}@sor.snu.ac.kr, PI:EMAIL
Abstract—Privilege separation has long been considered as a
fundamental principle in software design to mitigate the potential
damage of a security attack. Much effort has been given to
develop various privilege separation schemes where a monolithic
OS or hypervisor is divided into two privilege domains where
one domain is logically more privileged than the other even
if both run at an identical processor privilege level. We say
that privilege separation is intra-level if it is implemented for
software of a certain privilege level without any involvement
or assistance of more privileged software. In general, realizing
intra-level privilege separation mandates developers to rely on
certain security features of the underlying hardware. So far,
such development efforts however have been much less focused
on ARM architectures than on the Intel x86 family mainly
because the architectural provision of ARM security features
was relatively insufﬁcient. Unlike on x86, as a result, there exists
no full intra-level scheme that can be universally applied to any
privilege level on ARM. However, as malware and attacks increase
against virtually every level of privileged software including
an OS, a hypervisor and even the highest privileged software
armored by TrustZone, we have been motivated to develop a
technique, named as Hilps, to realize true intra-level privilege
separation in all these levels of privileged software on ARM.
Pivotal to the success of Hilps is the support from a new hardware
feature of ARM’s latest 64-bit architecture, called TxSZ, which
we manipulate to elastically adjust the accessible virtual address
range for a program. In our experiments, we have applied Hilps
to retroﬁt the core software mechanisms for privilege separation
into existing system software and evaluated the performance of
the resulting system. According to the experimental results, the
system incurs on average just less than 1 % overhead; hence, we
conclude that Hilps is quite promising for practical use in real
deployments.
I.
INTRODUCTION
A variety of system software such as an operating system
(OS) and hypervisor has a monolithic design, which integrates
its core services into one huge code base, thereby encompass-
ing them all in a single address space and executing them in
the same processor privilege level (i.e., ring 0 and VMX-root
modes in Intel x86 or svc and hyp modes in ARM). Therefore,
bugs, errors and vulnerabilities residing in a fraction of system
software can be easily exploited to subvert other parts of or the
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23024
entire system [12], [21], [49]. Privilege separation stemming
from the work of Saltzer and Schroeder [33], [34] has been
considered as a fundamental principle in software design that
can mitigate such a security concern. To enforce this security
principle in the design, one intuitive scheme has been isolating
critical parts of system software inside another software with
higher privilege. However, there are several problems with this
scheme. First of all, it conﬂicts with the common tendency
that, in many cases, system software already runs with the
highest privilege level in the system. Also, the mandatory
involvement of more privileged software in its design usually
entails frequent switching between different privilege levels for
the security enforcement, which will become a deﬁnite cause
of the overall system performance degradation. Therefore, to
cure these problems, there has been active research on intra-
level schemes [15], [46], [4] whose aim is to enforce privilege
separation without any reliance on or involvement of other
privileged levels. In these schemes, system software is broken
into typically two domains: the inner and outer. Since these
domains are split from one monolithic body, they are running
in the same processor privilege level, but logically graded in a
way that the inner domain becomes more privileged than the
outer one. In most cases, the inner domain occupies just a small
fraction of the original system software, with (logically) higher
privilege, and owns exclusive control authority over sensitive
system resources, i.e., page tables and system control registers,
that are critical to security. Thus, as a trusted computing base,
the inner domain can defend the system software from being
subverted entirely even if the outer domain is under control of
attackers.
For protection of the inner domain, the ﬁrst requirement is
to guarantee that the memory region of one domain is isolated
from the other in the same privilege level. To efﬁciently and
completely fulﬁll this requirement for intra-level isolation, one
must somehow rely on a special hardware facility that can
apply different memory protection policies respectively to both
the domains even if they share the same privilege to access
the memory space. For memory protection, the conventional
hardware support from the memory management unit (MMU)
can no longer be expected because the MMU specializes
only in enforcing access permissions according to processor
privilege levels. In view of this observation, researchers, in
their efforts to develop intra-level isolation mechanisms, had to
ﬁnd alternative hardware facilities for memory protection. As
examples, there are several seminal studies [15], [46] that rely
on the write protection feature of the x86 family architecture
to implement their isolation mechanisms. The x86 processor
has a special bit, called the write-protection (WP) bit, which
is, in general, turned on or off in order to restrict or permit
write access to speciﬁc memory regions. In those studies, they
make use of the WP bit in a way that they modify page tables
to conﬁgure the memory regions for the inner domain to be
write-protected by the bit. Now when the bit is on, the outer
domain, even if it belongs to the same privilege level with
the inner domain, cannot tamper with the inner one. Along
with the isolation mechanism based on the WP bit, they have
also devised an additional mechanism to properly manipulate
the bit when the control switches between the two domains.
This domain switching mechanism works follows. When the
control is transferred to the inner domain, the bit is reset (WP
= 0), which subsequently allows the inner domain to perform
memory operations normally. After which, the bit will be set
on when the control returns back to the outer domain in order
to protect the inner domain again.
The greatest strength of the WP bit for privilege separation
is that it can provide the same write protection for virtually
all privilege levels and types of system software on the x86
processor. In modern software architectures, it is by no means
unusual for more than one levels of system software to coexist
in a system so as to provide versatile services for its users. The
most familiar case found in a real system would be that an OS
is installed together with a hypervisor. In these systems, as will
be discussed in Section II, the attackers aiming to manipulate
system resources and take over the control of a system have
been able to compromise each and every level of system
software. As a means to counteract such potential threats, the
WP bit serves by capitalizing on its all-across-level memory
protection capabilities. In fact, its versatile capabilities have
already been actively used by researchers to diversify their
intra-level privilege separation solutions for different levels of
privileged software on x86 machines like those for an OS [15]
and for a hypervisor [46].
Sadly on the other hand, such active research work has
not been conducted for ARM-based machines whose security
concerns are of utmost importance in today’s mobile market.
We ascribe this mainly to want of the ample architectural
provision of ARM’s security features for memory protection.
More speciﬁcally, ARM traditionally had no security hardware
functionally equivalent
to the WP bit. Partially because of
this, it was not until recently that some efforts to develop
privilege separation solutions for ARM are reported in the
literature [4]. But these solutions still have several limitations.
Most of all, they are not truly intra-level schemes. For instance,
when they design a privilege separation solution for the OS
on ARM, they need to depend on more privileged software
(i.e., a hypervisor). This is obviously for lack of due hardware
to support intra-level isolation in ARM devices, as described
above. This results in another limitation that their design to
mandate the reliance on the hypervisor in the solution for the
OS is no longer viable to solutions for the hypervisor itself or a
TrustZone secure OS. Not surprisingly, their existing solutions
are all targeting the normal OSes running on several variations
of ARM architectures. As malware and attacks on ARM
devices increase against virtually every level of privileged
software including not a normal OS but also a hypervisor
and even a secure OS armored by TrustZone, it is essential to
develop a powerful solution that can be used to fully enforce
privilege separation at the same time in any level or type of
software on the devices.
In this paper, we introduce a novel technique, named as
Hilps, to implement intra-level privilege separation in every
level of privileged software on ARM. At the center of Hilps,
there is a hardware ﬁeld, called TxSZ, which has been ﬁrst in-
troduced in ARM’s latest 64-bit architecture (a.k.a AArch64).
Particularly noteworthy is the fact that we could tailor TxSZ
to function for memory protection on ARM similarly to the
WP bit on x86. For general purpose, we manipulate the values
of TxSZ in order to expand or reduce the range of the
valid (or accessible) virtual address space dynamically. To
realize the two core mechanisms for privilege separation (i.e.,
intra-level isolation and domain switching), Hilps exploits this
hardware function of TxSZ for dynamic virtual address range
adjustment, as will be explained in Section IV. In short, for
intra-level isolation, Hilps initially allocates the inner domain
region separately from the memory region reachable from the
outer domain. Later when the outer domain takes execution
control, Hilps reduces the valid virtual address range so as to
leave out the inner domain region, effectively rendering the
inner domain unreadable from the outer domain. When the
control is transferred to the inner domain, the valid virtual
address range is expanded so as to cover the inner domain
region again, which will allow the inner domain to operate
normally with full access permissions on the entire memory
region for both the domains. The ultimate objective of Hilps is
to grant these domains asymmetric memory access permissions
such that the inner domain in effect becomes more privileged
than its counterpart. It is hereby worth empathizing that our
TxSZ-based mechanisms can be universally applied to system
software regardless of its privilege level. Therefore, we claim
that Hilps achieves full
intra-level privilege separation on
AArch64 at all privilege levels of system software.
To test the feasibility of Hilps for intra-level privilege sep-
aration, we have retroﬁtted both the TxSZ-based isolation and
domain switching mechanisms into existing system software
running on AArch64, as exhibited in Section IV. Now if devel-
opers want to deploy their security applications in our security-
enhanced system, they can deploy the applications simply in
a protected region of the inner domain. As a result, residing
in the secure execution environment, the applications would
safely handle their secure transactions or monitor the poten-
tially compromised outer domain. For our experiments, we
have implemented intra-level privilege separation in existing
system software running on the versatile express V2M-Juno
r1 platform [6]. Our experiments (see Section VI) reveal that
our TxSZ-based mechanisms for privilege separation are quite
efﬁcient in terms of performance, which we credit primarily to
the efﬁcacious memory protection support from the underlying
TxSZ hardware. The bare system, which is augmented just
with our privilege separation mechanisms and yet without any
installed security applications,
incurs on average less than
1 % overhead for the overall system. Of course, as more
security applications are installed, the overhead should increase
proportionally. However the experiments also show that
it
remains reasonably small with normal application loads.
The limitation of our TxSZ-based strategy for intra-level
privilege separation is that it cannot be applied to the tradi-
tional ARM 32-bit architecture since the TxSZ ﬁeld is newly
equipped in ARM’s latest 64-bit architecture. Nevertheless, we
still believe that this limitation does not signiﬁcantly devalue
the technical contributions of our research because from the
2
fact that AArch64 is rapidly becoming the norm for the newest
line of ARM processors, it is evident that our solution can be
applied to not only today’s but also tomorrow’s ARM-based
computing systems in the market. The technical contributions
that we claim in this paper are listed below.
•
•
•
•
An introduction of a novel technique, Hilps, that can
implement intra-level privilege separation on AArch64
in a variety of system software with different processor
privilege levels, such as a normal OS, a hypervisor and
a secure OS.
An intra-level isolation mechanism that protects the
inner domain from the outer domain by elastically
adjusting the virtual address range.
A light-weight mechanism that ensures secure switch-
ings between the inner and outer domains.
A complete realization of Hilps that demonstrates the
feasibility of our proposed isolation and switching
mechanisms for AArch64 machines.
II. THREAT MODEL AND RELATED WORK
In this section, we motivate the need for our approach. For
this, we begin by deﬁning the threat model, which shapes the
subsequent discussion on the comparison with related work.
A. Threat Model
1) System Software and Security Threats: ARM processors
have recently added two hardware extensions for the sake
of strengthening support for virtualization and security. The
virtualization extension enables to install and take advantage
of a hypervisor, which, as a mediator located between an
OS and the underlying hardware, facilitates the system to run
multiple OSes by controlling interactions passing through it.
The security extension, also known as TrustZone, partitions
system resources into two worlds:
the normal world and
the secure world. In the normal world, which corresponds
to a conventional execution environment, a normal OS and
hypervisor are installed to execute ordinary applications and
handle interactions with users. In the secure world, on the
other hand, a secure OS is installed to build a trusted execution
environment and to securely execute trusted applications that
deal with sensitive data.
In summary, different levels of system software, such as a
normal OS, hypervisor and secure OS, can coexist in ARM-
based systems. This enriches the functionality of the system,
but it also increases security risk as it introduces additional
attack surface. For example, to subvert the system, attackers
may try to compromise a normal OS, which has control au-
thority over system resources. However, in a coexistent system,
attackers could achieve the same objective by compromising a
hypervisor or a secure OS. Which would be far more fatal
because those types of system software run with a higher
privilege level than a normal OS. Unfortunately, ensuring the
security of system software is an arduous problem, considering
that even carefully designed code inevitably contains bugs and
vulnerabilities in proportion to its size [28], [10], [29]. In fact,
normal OSes have been known to have a number of vulnerabil-
ities [1] and other levels of system software are no exception.
Hypervisors have been examined to have vulnerabilities [2],
Fig. 1. CVE-2015-4422. An example vulnerability of the secure OS.
Fig. 2. Full intra-level privilege separation.
[23], and, recently, it was shown that even secure OSes can
be compromised by exploitable vulnerabilities [38], [31], [43],
[32].
For example, Figure 1 describes the pseudo-code of the
vulnerability, CVE-2015-4422 [38], that can be used to com-
promise the secure OS of the Huawei Hisilicon Kirin 925
processor. Note that, generally, a normal OS can communi-
cate with a secure OS through a narrow interface based on
the SMC (Secure Monitor Call) instruction. In the example
system,
the normal OS sends the secure OS a command
with the tag_TC_NS_SMC_CMD structure, which is allocated
in the normal OS. If the secure OS receives a command,
then it handles the command and returns a result
to the