        case 2:
            retVal = &((*reg).ebx)
        case 3:
            retVal = &((*reg).ecx)
        case 4:
            retVal = &((*reg).edx)
        }
        return retVal
    }
**exp**
    cipher =[[155, 170, 203, 245, 138, 200, 161, 137, 224, 165],
             [126, 16, 58, 13, 49, 117, 45, 126, 119, 100],
             [74, 43, 235, 172, 8, 132, 43, 36, 36, 175]]
    flag = ''
    key_1 = 0xFF
    key_2 = b'GOL@nD~!!!'
    for i in range(len(cipher[0]) - 1, 0, -1):
        cipher[0][i] = (cipher[0][i] + i) ^ cipher[0][i-1]
    cipher[0][0] ^= 0xFF
    flag += bytes(cipher[0]).decode()
    for i in range(len(cipher[1])): 
        flag += chr(cipher[1][i] ^ key_2[i])
    for i in cipher[2]: 
        flag += chr((i >> 5) | (i 
    );
    ui.ok.on("click",()=>{
        var result=[0x2e,0xde,0x94,0xc2,0x41,0x8f,0xe3,0xfa,0xfb,0x10,0x4f,0x96,0x64,0xbf,0x2d,0xe3,0x96,0xf1,0x6c,0xa1,0x6b,0xb6,0x9a,0x94,0xfb,0x70,0x3f,0x4b,0x4b,0x7e,0x35,0xc7,0x10,0x90,0x57,0xcb];
        shell("chmod 777 /data/data/com.telegram.messenger/files/project/D0g3.jpeg",true);
        shell("/data/data/com.telegram.messenger/files/project/D0g3.jpeg"+" "+ui.flag.text(),true);
        if(files.isFile("/sdcard/1A.txt")){
            var data=files.readBytes("/sdcard/1A.txt");
            for(var i=0;i
    #include 
    #include 
    #include 
    struct chacha_ctx {
      uint32_t input[16];
    };
    /* $OpenBSD: chacha.c,v 1.1 2013/11/21 00:45:44 djm Exp $ */
    typedef unsigned char u8;
    typedef unsigned int u32;
    typedef struct chacha_ctx chacha_ctx;
    #define U8C(v) (v##U)
    #define U32C(v) (v##U)
    #define U8V(v) ((u8)(v)&U8C(0xFF))
    #define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))
    #define ROTL32(v, n) (U32V((v) > (32 - (n))))
    #define U8TO32_LITTLE(p)                                                       \
      (((u32)((p)[0])) | ((u32)((p)[1]) > 8);                                                    \
        (p)[2] = U8V((v) >> 16);                                                   \
        (p)[3] = U8V((v) >> 24);                                                   \
      } while (0)
    #define ROTATE(v, c) (ROTL32(v, c))
    #define XOR(v, w) ((v) ^ (w))
    #define PLUS(v, w) (U32V((v) + (w)))
    #define PLUSONE(v) (PLUS((v), 1))
    #define QUARTERROUND(a, b, c, d)                                               \
      a = PLUS(a, b);                                                              \
      d = ROTATE(XOR(d, a), 16);                                                   \
      c = PLUS(c, d);                                                              \
      b = ROTATE(XOR(b, c), 12);                                                   \
      a = PLUS(a, b);                                                              \
      d = ROTATE(XOR(d, a), 8);                                                    \
      c = PLUS(c, d);                                                              \
      b = ROTATE(XOR(b, c), 7);
    static const char sigma[16] = "d0g3d0g3d0g3d0g3";
    static const char tau[16] = "expand 16-byte k";
    void chacha_keysetup(chacha_ctx *x, const u8 *k, u32 kbits) {
      const char *constants;
      x->input[4] = U8TO32_LITTLE(k + 0);
      x->input[5] = U8TO32_LITTLE(k + 4);
      x->input[6] = U8TO32_LITTLE(k + 8);
      x->input[7] = U8TO32_LITTLE(k + 12);
      if (kbits == 256) { /* recommended */
        k += 16;
        constants = sigma;
      } else { /* kbits == 128 */
        constants = tau;
      }
      x->input[8] = U8TO32_LITTLE(k + 0);
      x->input[9] = U8TO32_LITTLE(k + 4);
      x->input[10] = U8TO32_LITTLE(k + 8);
      x->input[11] = U8TO32_LITTLE(k + 12);
      x->input[0] = U8TO32_LITTLE(constants + 0);
      x->input[1] = U8TO32_LITTLE(constants + 4);
      x->input[2] = U8TO32_LITTLE(constants + 8);
      x->input[3] = U8TO32_LITTLE(constants + 12);
    }
    void chacha_ivsetup(chacha_ctx *x, const u8 *iv, const u8 *counter) {
      x->input[12] = counter == NULL ? 0 : U8TO32_LITTLE(counter + 0);
      x->input[13] = counter == NULL ? 0 : U8TO32_LITTLE(counter + 4);
      x->input[14] = U8TO32_LITTLE(iv + 0);
      x->input[15] = U8TO32_LITTLE(iv + 4);
    }
    void chacha_encrypt_bytes(chacha_ctx *x, const u8 *m, u8 *c, u32 bytes) {
      u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
      u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
      u8 *ctarget = NULL;
      u8 tmp[64];
      uint32_t i;
      if (!bytes)
        return;
      j0 = x->input[0];
      j1 = x->input[1];
      j2 = x->input[2];
      j3 = x->input[3];
      j4 = x->input[4];
      j5 = x->input[5];
      j6 = x->input[6];
      j7 = x->input[7];
      j8 = x->input[8];
      j9 = x->input[9];
      j10 = x->input[10];
      j11 = x->input[11];
      j12 = x->input[12];
      j13 = x->input[13];
      j14 = x->input[14];
      j15 = x->input[15];
      for (;;) {
        if (bytes  0; i -= 2) {
          QUARTERROUND(x0, x4, x8, x12)
          QUARTERROUND(x1, x5, x9, x13)
          QUARTERROUND(x2, x6, x10, x14)
          QUARTERROUND(x3, x7, x11, x15)
          QUARTERROUND(x0, x5, x10, x15)
          QUARTERROUND(x1, x6, x11, x12)
          QUARTERROUND(x2, x7, x8, x13)
          QUARTERROUND(x3, x4, x9, x14)
        }
        x0 = PLUS(x0, j0);
        x1 = PLUS(x1, j1);
        x2 = PLUS(x2, j2);
        x3 = PLUS(x3, j3);
        x4 = PLUS(x4, j4);
        x5 = PLUS(x5, j5);
        x6 = PLUS(x6, j6);
        x7 = PLUS(x7, j7);
        x8 = PLUS(x8, j8);
        x9 = PLUS(x9, j9);
        x10 = PLUS(x10, j10);
        x11 = PLUS(x11, j11);
        x12 = PLUS(x12, j12);
        x13 = PLUS(x13, j13);
        x14 = PLUS(x14, j14);
        x15 = PLUS(x15, j15);
        if (m != NULL) {
          x0 = XOR(x0, U8TO32_LITTLE(m + 0));
          x1 = XOR(x1, U8TO32_LITTLE(m + 4));
          x2 = XOR(x2, U8TO32_LITTLE(m + 8));
          x3 = XOR(x3, U8TO32_LITTLE(m + 12));
          x4 = XOR(x4, U8TO32_LITTLE(m + 16));
          x5 = XOR(x5, U8TO32_LITTLE(m + 20));
          x6 = XOR(x6, U8TO32_LITTLE(m + 24));
          x7 = XOR(x7, U8TO32_LITTLE(m + 28));
          x8 = XOR(x8, U8TO32_LITTLE(m + 32));
          x9 = XOR(x9, U8TO32_LITTLE(m + 36));
          x10 = XOR(x10, U8TO32_LITTLE(m + 40));
          x11 = XOR(x11, U8TO32_LITTLE(m + 44));
          x12 = XOR(x12, U8TO32_LITTLE(m + 48));
          x13 = XOR(x13, U8TO32_LITTLE(m + 52));
          x14 = XOR(x14, U8TO32_LITTLE(m + 56));
          x15 = XOR(x15, U8TO32_LITTLE(m + 60));
        }
        j12 = PLUSONE(j12);
        if (!j12) {
          j13 = PLUSONE(j13);
          /* stopping at 2^70 bytes per nonce is user's responsibility */
        }
        U32TO8_LITTLE(c + 0, x0);
        U32TO8_LITTLE(c + 4, x1);
        U32TO8_LITTLE(c + 8, x2);
        U32TO8_LITTLE(c + 12, x3);