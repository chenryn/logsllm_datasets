(allow ipc-posix-shm) ; Needed for POSIX shared memory
(allow file-read-data (regex “^/dev/random\$”))
(allow file-read-data file-write-data (regex “^/dev/console\$”))
; Needed for syslog early in the boot process
(allow file-read-data (regex “^/dev/autofs_nowait\$”))
; Used by CF to circumvent automount triggers
; Allow us to read and write our socket
(allow file-read* file-write* (regex
“^/private/var/run/mDNSResponder\$”))
; Allow us to read system version, settings, and other miscellaneous
necessary file system accesses
(allow file-read-data (regex
“^/usr/sbin(/mDNSResponder)?\$”)) ; Needed for
CFCopyVersionDictionary()
(allow file-read-data (regex “^/usr/share/icu/.*\$”))
(allow file-read-data (regex
“^/usr/share/zoneinfo/.*\$”))
(allow file-read-data (regex
“^/System/Library/CoreServices/SystemVersion.*\$”))
(allow file-read-data (regex
“^/Library/Preferences/SystemConfiguration/preferences\.plist\$”))
(allow file-read-data (regex
“^/Library/Preferences/(ByHost/)?\.GlobalPreferences.*\.plist\$”))
(allow file-read-data (regex
“^/Library/Preferences/com\.apple\.security.*\.plist\$”))
(allow file-read-data (regex
“^/Library/Preferences/com\.apple\.crypto\.plist\$”))
(allow file-read-data (regex
“^/Library/Security/Trust Settings/Admin\.plist\$”))
(allow file-read-data (regex
“^/System/Library/Preferences/com\.apple\.security.*\.plist\$”))
(allow file-read-data (regex
“^/System/Library/Preferences/com\.apple\.crypto\.plist\$”))
; Allow access to System Keychain
(allow file-read-data (regex
“^/System/Library/Security\$”))
(allow file-read-data (regex
“^/System/Library/Keychains/.*\$”))
(allow file-read-data (regex
9955336633cc0033..iinndddd 6666 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 67
“^/Library/Keychains/System\.keychain\$”))
; Our Module Directory Services cache
(allow file-read-data (regex “^/private/var/tmp/mds/”))
(allow file-read* file-write* (regex “^/private/var/tmp/mds/[0-
9]+(/|\$)”))
This code uses a deny-by-default policy. It does allow arbitrary network con-
nections to and from the application. The main restriction is that it carefully
controls which fi les can be read and written. Therefore, even if you could run
arbitrary code within the application, you couldn’t do many interesting things.
A similar sandbox exists for ntpd. These sandboxes (if implemented correctly)
effectively remove these applications from consideration by an attacker, or at
the very least, make exploitation much more challenging.
There is one caveat to the sandboxes. The sandbox prevents the program in
the sandbox and any of its children from doing anything interesting. It does
not prevent them from passing data to applications that are not in a sandbox.
This is one way it might be possible to escape from such a sandbox. Consider
the following scenario. A system advertises, via the Bonjour protocol, that a
new printer is available on the network. mDNSResponder notifi es CUPS (not in
a sandbox) to add the printer. If there is a vulnerability in the way CUPS adds
printers, you have just gotten access to a nonsandboxed application through
the mDNSResponder sandbox!
Taking all of this into consideration, if you’re looking for a server-side attack
against a stock install of Mac OS X, your best bet is probably something like
wireless drivers or a UDP-only attack against CUPS.
Before we conclude this discussion, please note that sometimes client pro-
grams open up ports which then become susceptible to remote attack, even
if the user doesn’t connect to the attacker. iTunes is an example of this. When
iTunes is launched, it listens on port 3689 (DAAP). This is the port iTunes uses
for sharing music fi les. The interesting thing is that iTunes opens and listens on
this port even if it is not confi gured for sharing music. The difference between
music sharing being on and being off is that when it is off, iTunes doesn’t do
much on that port. The following shows that with music sharing disabled, but
iTunes running, it still listens on a port.
$ lsof -P | grep iTunes | grep LISTEN
iTunes 7662 cmiller 17u IPv4 0x5e0da68 0t0 TCP *:3689
(LISTEN)
However, the following is an exchange between a DAAP client and this port
when music sharing is off.
GET /server-info HTTP/1.1
TE: deflate,gzip;q=0.3
9955336633cc0033..iinndddd 6677 11//2255//0099 44::4400::2255 PPMM
68 Part I ■ Mac OS X Basics
Keep-Alive: 300
Connection: Keep-Alive, TE
Host: localhost:3689
User-Agent: libwww-perl/5.813
HTTP/1.1 501 Not Implemented
Date: Thu, 28 Aug 2008 01:39:15 GMT
DAAP-Server: iTunes/7.7.1 (Mac OS X)
Content-Type: application/x-dmap-tagged
Content-Length: 0
In this case, iTunes returns a 501 error regardless of the input. However, it
still offers the possibility for an attacker to have the Mac remotely process some
data that relies only on the user having the iTunes process running.
Nonstandard Listening Processes
By accessing the Sharing pane in the System Preferences, users often turn on
other services; see Figure 3-1.
Figure 3-1: The Sharing pane indicates which services are running.
The fi rst option listed is DVD or CD Sharing. This option shares out the user’s
DVD or CD drive to the subnet. This service is advertised using Bonjour and
resides on some randomly chosen port.
$ dns-sd -B _odisk._tcp
Browsing for _odisk._tcp
9955336633cc0033..iinndddd 6688 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 69
Timestamp A/R Flags if Domain Service Type Instance Name
20:37:29.601 Add 3 9 local. _odisk._tcp. Charlie Miller’s
Computer
In this case, a look at netstat reveals that a new port has opened on 63378.
Following up with lsof, we can see what application has been spawned by acti-
vating this option in the Sharing pane.
$ sudo lsof | grep 53358
ODSAgent 40560 root 3u IPv6 0x3e78984 0t0 TCP *:53358
(LISTEN)
It is /System/Library/CoreServices/ODSAgent.app. This program basically
uses an HTTP-based protocol, but it does some authentication; see Figure 3-2.
Figure 3-2: The data from a packet capture of a remote disk being authenticated
The client grabs what appears to be a .dmg or .iso image, whose name was
provided by the server in the initial response. Within the data, you can see
things like names of directories and fi les; see Figure 3-3.
The next item from the Sharing pane is Screen Sharing. This simply opens a
VNC server on port 5900 and a Kerberos server on port 88. The Kerberos server
is the standard krb5kdc application and is opened by the operating system the
fi rst time it is needed. The VNC server is AppleVNCS. If you notice this running
on a Mac, you may want to look for bugs in it.
Next is the File Sharing option. This opens a server on port 548 (afpovertcp).
Looking at lsof, you see that launchd is listening on that port. That doesn’t tell
you much, though, because like inetd/xinetd, launchd hands off inbound con-
nections to another application.
9955336633cc0033..iinndddd 6699 11//2255//0099 44::4400::2255 PPMM
70 Part I ■ Mac OS X Basics
Figure 3-3: A disk image is retrieved.
To see what will be launched, look in the LaunchDaemons directory for
confi guration fi les containing the afpovertcp port.
$ cd /System/Library/LaunchDaemons/
$ grep -h -B 11 afpovertcp *
ProgramArguments
/usr/sbin/AppleFileServer
Sockets
Listener
Bonjour
SockServiceName
afpovertcp
You see that AppleFileServer is the application that will be launched.
$ /usr/sbin/AppleFileServer -v
afpserver-530.8.3
AppleFileServer speaks Apple Filing Protocol (AFP), which functions much
like the Network File System (NFS) protocol used by many UNIX systems, or
the Server Message Block (SMB)/Common Internet File System (CIFS) used by
Windows systems.
9955336633cc0033..iinndddd 7700 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 71
AppleFileServer has had bugs in the past (http://xforce.iss.net/xforce/
xfdb/16049) and probably has more bugs. If you fi nd it running on a target
computer, take a closer look.
The next check box is Printer Sharing, which opens many ports.
> launchd 1 root 56u IPv6 0t0 TCP *:515
(LISTEN)
> launchd 1 root 61u IPv4 0t0 TCP *:515
(LISTEN)
> launchd 1 root 93u IPv4 0t0 TCP *:139
(LISTEN)
> launchd 1 root 94u IPv4 0t0 TCP *:445
(LISTEN)
8a13,16
> cupsd 45270 root 7u IPv6 0t0 TCP
localhost:631 (LISTEN)
> cupsd 45270 root 8u IPv4 0t0 TCP
localhost:631 (LISTEN)
> cupsd 45270 root 10u IPv6 0t0 TCP *:631
(LISTEN)
> cupsd 45270 root 13u IPv4 0t0 TCP *:631
(LISTEN)
Launchd will launch /usr/libexec/cups/daemon/cups-lpd on port 515
(printer, and /user/sbin/smbd (netbios-ssn 139, microsoft-ds 445). CUPS will
now listen on the external interface. If the client is sharing a printer, the avail-
able attack surface becomes quite large.
The Web Sharing check box enables a standard Apache service on port 80.
The webroot for this installation is at /Library/WebServer/Documents and the
CGIs are in /Library/WebServer/CGI-Executables. By default, the CGI directory
is empty, so no help there for an attacker.
The Remote Login option is a standard OpenSSH handled by launchd. The
binary is at /usr/sbin/sshd. As of the writing of this book, the version string is
OpenSSH_4.7p1, OpenSSL 0.9.7l 28 Sep 2006.
The fi nal option we’ll discuss is Remote Apple Events. There are a few other
options available in the Sharing pane, but they are relatively obscure or benign.
Remote Apple Events enables the AEServer handled by launchd on port 3031
(eppc). This server allows remote users to run AppleScript programs on the
computer running the AEServer. For example, on another computer, start the
script editor (/Applications/AppleScript/Script Editor.app). Enter the following
into the editor:
set remoteMac to “eppc://user:PI:EMAIL”
using terms from application “Finder”
tell application “Finder” of machine B
get name of every disk
end
end
9955336633cc0033..iinndddd 7711 11//2255//0099 44::4400::2255 PPMM
72 Part I ■ Mac OS X Basics
When that code is executed, it will return the names of the disks from the
computer that is allowing remote Apple events. Note that this server does
require authentication. That doesn’t mean there couldn’t be a pre-authentication
bug, though!
Cutting into the Client Side
The attack surface when attacking Mac OS X clients is much larger than when
restricting yourself to the server side. Any application that accesses the Internet
is a potential target (as are many that don’t). Mac OS X is founded on the
principle that things should be easy for the user; they should just work. For an
attacker, this means the operating system is designed to handle a large number
of formats and protocols automatically. For example, Safari will view just about
any fi le format you can imagine. The key to determining the client-side attack
surface is to understand exactly what types of fi les and protocols each applica-
tion is willing to consume. And understanding that relies on understanding
the relationship between the applications and the fi les they process.
Each application has an Info.plist fi le that declares the known URL protocols,
extensions, MIME types, and fi le types the application can handle. In Mac OS
X, LaunchServices is responsible for determining what application is associ-
ated with a given fi le type or extension. An application will get registered with
LaunchServices whenever it is fi rst put on disk and its Info.plist fi le is processed.
Note that, typically, downloading an application from the Internet will present
the user with a warning, which prevents an attacker from automatically regis-
tering application associations without the user’s knowledge.
The prototypical client-side application is Safari, the default web browser in
Mac OS X. Look at its Info.plist fi le, which you can fi nd at /Applications/Safari.
app/Contents/Info.plist. What follows is the beginning of this fi le.
Application-Group
dot-mac
CFBundleDevelopmentRegion
English
CFBundleDocumentTypes
CFBundleTypeExtensions
css
9955336633cc0033..iinndddd 7722 11//2255//0099 44::4400::2255 PPMM
Chapter 3 ■ Attack Surface 73
CFBundleTypeIconFile
document.icns
CFBundleTypeMIMETypes
text/css
CFBundleTypeName
CSS style sheet
CFBundleTypeRole
Viewer
NSDocumentClass
BrowserDocument
CFBundleTypeExtensions
pdf
CFBundleTypeIconFile
document.icns
CFBundleTypeMIMETypes
application/pdf
CFBundleTypeName
PDF document
CFBundleTypeRole
Viewer
NSDocumentClass
BrowserDocument
The fi rst important key is CFBundleDocumentTypes. This indicates the types
of documents supported by the bundle. In this case it is an array of such types.
The fi rst is a CSS style sheet. This type of document has a fi le extension of .css
and a MIME type of text/css. Based on the CFBundleTypeRole, Safari is regis-
tered as a viewer of this type. The next entry in the array is a PDF document,
for which Safari is also a viewer.
The following list reveals what each key means in the CFBundleDocumentTypes
array.
CFBundleTypeExtensions: The fi le name extension for the fi le
CFBundleTypeIconFile: The icon in the bundle that Finder should associate
with the fi le type
CFBundleTypeMIMETypes: The MIME type for the fi le
CFBundleTypeName: The text that will be shown in Finder to describe
the fi le
9955336633cc0033..iinndddd 7733 11//2255//0099 44::4400::2255 PPMM
74 Part I ■ Mac OS X Basics
CFBundleTypeRole: Specifi es whether the program can open (Viewer),
open and save (Editor), or is simply a shell to another program
LSIsAppleDefaultForType: Specifi es whether the bundle should be the
default application for this type
As we mentioned earlier, LaunchServices compiles all of this application
information and stores it in a database. Querying this database, for example,
determines what application is launched when a fi le is double-clicked in a Finder
window. This database can be viewed by the lsregister program, as seen in the
following output.
$/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks