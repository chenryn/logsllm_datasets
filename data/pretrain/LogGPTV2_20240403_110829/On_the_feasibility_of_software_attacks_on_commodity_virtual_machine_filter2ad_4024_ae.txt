tion space accesses was discussed for USB UHCI [39] controllers
by Duﬂot et al. [40, 31]. The authors were able to manipulate the
secure level of OpenBSD and escalate root access in privileged do-
mains (e.g., Xen Dom0) from arbitrary guests by evading Intel VT-
x protection. Since Xen does not allow direct conﬁguration space
access any more [33], our PIO attacks were conﬁned inside the at-
tacker guest. We faced the same issues with KVM as well.
DMA attacks. The introduction of DMA opened the door to
a new set of attacks. By misusing DMA transactions either a na-
tive or a virtualized system can be compromised by reading/writing
arbitrary physical memory locations. A long list of DMA attacks
exists in the literature, based on USB On-The-Go controllers [41],
PCI cards [42, 43], or FireWire controllers [44, 45, 46, 47, 48].
Even though, most of these attacks were presented for native envi-
ronments, proof-of-concept codes for virtual environments exist as
well [10]. The main difference with our paper is that none of the
previous works examined the impact and limitations introduced by
existing DMA protection mechanisms (e.g., DMA remapping).
Interestingly, a DMA attack can also be launched by a code re-
siding on the northbridge [49, 14]. From one aspect, this higher
privileged code is advantageous for an attacker. However, mali-
cious DMA transactions are still ineffective on systems with DMA
remapping enabled (e.g., Intel VT-d is turned on).
Interrupt Attacks. Wojtczuk et al. [9] demonstrated that the
x86-64 architecture is vulnerable against Message Signalled Inter-
rupt (MSI) based attacks. Later, Müller et al. [50] pointed out a
similar interrupt attack on PowerPC. However, both of the attacks
worked only without an active interrupt remapping engine. The au-
thors showed that an attacker can force the generation of unmedi-
ated MSIs in these cases, allowing her to send speciﬁc interrupts
to the physical CPU. This attack even allowed Wojtczuk et al. [9]
to execute arbitrary code with VMM privileges in a given Xen in-
stallation. In contrast to that, our host-side NMI interrupt cannot
be blocked with currently available protection mechanisms (e.g.,
interrupt remapping engine) without limiting platform functionali-
ties. Also, we can launch our attack from fully-virtualized (HVM)
guests that are known to be more isolated than their paravirtualized
counterparts (e.g., because of the hardware-supported protection
ring for the VMM code).
Protection Evasion. While we focus on circumventing all the
hardware protection mechanisms currently available, other approa-
ches try to disable them. For example, an attacker can modify
hardware-level data structures (e.g., Interrupt Descriptor Table) or
conﬁguration tables (e.g., DMA remapping table) [51] to turn off
IOMMU. Another approach aims at making the illusion of a non-
parsable DMA remapping table. To achieve this, an attacker has to
set a zero length for such a table during boot time. Another class of
attacks aim at modifying the metadata exposed by I/O controllers
to mislead the IOMMU. One such an attack is described by Lone-
Sang et al. [13]. Here, the attackers could map two I/O devices into
the same physical memory range by impersonating a PCI Express
device with a legacy PCI device. This attack, however, requires
physical access to the victim machine.
We partially discuss a similar approach in Section 3, where we
presented a problem to circumvent the interrupt remapping engine
on KVM by updating a BIOS on a motherboard that originally does
not support this technology. In this way, an attacker could use a
passthrough device without the appropriate protections enabled.
Recently, an interrupt remapping source validation ﬂaw was re-
ported by the Xen security team (CVE-2013-1952). More pre-
cisely, MSI interrupts from bridge devices do not provide source
information, so the interrupt remapping table cannot check the orig-
314inator bridge. In this way, a VM that owns a bridge can inject arbi-
trary interrupts to the system via MSI interrupts.
8. CONCLUSIONS
In this paper, we presented and tested a wide range of pass-
through attacks on commodity VMMs. Some of them were already
publicly known while others were presented for the ﬁrst time in
this paper. To discover new vulnerabilities, we designed and imple-
mented an automatic fuzzer called PTFuzz. This tool successfully
detected various unexpected hardware behaviors while running on
commodity VMMs.
Our experiments showed that software patches (e.g., when the
device conﬁguration space is emulated) and robust hardware pro-
tections can indeed prevent all previously discovered attacks. No-
netheless, we demonstrated that the proper conﬁguration of these
protection mechanisms can be a daunting task. Unfortunately, VMMs
remain vulnerable to sophisticated attacks. In this paper, we discov-
ered and implemented an interrupt attack that leverages unexpected
hardware behaviour to circumvent all the existing protection mech-
anisms in commodity VMMs. To the best of our knowledge, this is
the ﬁrst attack that exhibits such a behaviour and to date it seems
that there is no easy way to prevent it on Intel platforms.
The fact that we discovered a major vulnerability as well as an
unexpected hardware behaviour in Intel platforms does not neces-
sarily mean that VMMs are threatened in the wild, but certainly
raises an alarm to cloud operators. We believe that our study can
help them to better understand the limitations of their current archi-
tectures to provide secure hardware virtualization and to prepare for
future attacks.
Acknowledgment
The research leading to these results was partially funded by the
European Union Seventh Framework Programme (contract N 257007)
and by the French National Research Agency through the MIDAS
project. We would also like to thank anonymous reviewers for their
valuable comments, Mariano Graziano for running certain experi-
ments with DMA attacks as well as Pipacs from PaX team, Olivér
Pintér and Hunger for their technical advices.
Special thank goes to Rafal Wojtczuk ,
Jan Beulich from Xen Security and Intel PSIRT for technical dis-
cussions and feedback on the interrupt attack. Additional thanks to
Csaba Krasznay from HP Hungary for providing extra machines to
thoroughly test the interupt attack.
9. REFERENCES
[1] Amazon EC2. http:/aws.amazon.com/.
[2] Google Compute Engine. https://cloud.google.
com/products/compute-engine/.
[3] Arvind Seshadri, Mark Luk, Ning Qu, and Adrian Perrig.
Secvisor: a tiny hypervisor to provide lifetime kernel code
integrity for commodity oses. In Proceedings of twenty-ﬁrst
ACM SIGOPS symposium on Operating systems principles,
SOSP ’07, pages 335–350, New York, NY, USA, 2007.
ACM.
[4] Zhi Wang and Xuxian Jiang. Hypersafe: A lightweight
approach to provide lifetime hypervisor control-ﬂow
integrity. In Proceedings of the 2010 IEEE Symposium on
Security and Privacy, SP ’10, pages 380–395, Washington,
DC, USA, 2010. IEEE Computer Society.
[5] Jonathan M. McCune, Yanlin Li, Ning Qu, Zongwei Zhou,
Anupam Datta, Virgil D. Gligor, and Adrian Perrig.
TrustVisor: Efﬁcient TCB Reduction and Attestation. In
IEEE Symposium on Security and Privacy, pages 143–158,
2010.
[6] Abel Gordon, Nadav Amit, Nadav Har’El, Muli Ben-Yehuda,
Alex Landau, Assaf Schuster, and Dan Tsafrir. ELI:
bare-metal performance for I/O virtualization. SIGARCH
Comput. Archit. News, 40(1):411–422, March 2012.
[7] Ahmed M. Azab, Peng Ning, Zhi Wang, Xuxian Jiang,
Xiaolan Zhang, and Nathan C. Skalsky. Hypersentry:
enabling stealthy in-context measurement of hypervisor
integrity. In Proceedings of the 17th ACM conference on
Computer and communications security, CCS ’10, pages
38–49, New York, NY, USA, 2010. ACM.
[8] Eric Keller, Jakub Szefer, Jennifer Rexford, and Ruby B.
Lee. Nohype: virtualized cloud infrastructure without the
virtualization. In Proceedings of the 37th annual
international symposium on Computer architecture, ISCA
’10, pages 350–361, New York, NY, USA, 2010. ACM.
Rabbit: Software attacks against Intel R(cid:13)VT-d technology,
April 2011.
[9] Rafal Wojtczuk and Joanna Rutkowska. Following the White
[10] Rafal Wojtczuk. Subverting the Xen Hypervisor - Xen
0wning Trilogy part I. Black Hat USA, aug 2008.
[11] Rafal Wojtczuk. Preventing and Detecting Xen Hypervisor
Subversions - Xen 0wning Trilogy part II. Black Hat USA,
aug 2008.
[12] Joanna Rutkowska and Alexander Tereshkin. Bluepilling the
Xen Hypervisor - Xen 0wning Trilogy part III. Black Hat
USA, aug 2008.
[13] Fernand Lone Sang, Eric Lacombe, Vincent Nicomette, and
Yves Deswarte. Exploiting an I/OMMU vulnerability.
MALWARE, 2010.
[14] Patrick Stewin and Iurii Bystrov. Understanding DMA
Malware. In Proceedings of the 9th Conference on Detection
of Intrusions and Malware & Vulnerability Assessment,
2012.
[15] AMD. AMD 64 Architecture Programmer’s Manual:
Volume 2: System Programming. AMD Pub. no. 24593 rev.
3.20, 2011.
[16] Intel. Intel R(cid:13) 64 and IA-32 Architectures Software
Developer’s Manual - Combined Volumes: 1, 2A, 2B, 2C,
3A, 3B and 3C, Aug 2012.
[17] Jiuxing Liu. Evaluating standard-based self-virtualizing
devices: A performance study on 10 GbE NICs with SR-IOV
support. In IEEE Int’l Parallel & Distributed Processing
Symp.
(IPDPS), pages 1–12, April 2010.
[18] Jiuxing Liu, Wei Huang, Bulent Abali, and Dhabaleswar K.
Panda. High performance VMM-bypass I/O in virtual
machines. In Proceedings of the annual conference on
USENIX ’06 Annual Technical Conference, ATEC ’06, pages
3–3, Berkeley, CA, USA, 2006. USENIX Association.
[19] Himanshu Raj and Karsten Schwan. High performance and
scalable I/O virtualization via self-virtualized devices. In
Proceedings of the 16th international symposium on High
performance distributed computing, HPDC ’07, pages
179–188, New York, NY, USA, 2007. ACM.
[20] P. Willmann, J. Shafer, D. Carr, A. Menon, S. Rixner, A.L.
Cox, and W. Zwaenepoel. Concurrent direct network access
for virtual machine monitors. In High Performance
Computer Architecture, 2007. HPCA 2007. IEEE 13th
International Symposium on, pages 306 –317, feb. 2007.
315[37] XSA-59 blog. http://www.gossamer-threads.
com/lists/xen/devel/318464?page=last.
[38] Gábor Pék, Levente Buttyán, and Boldizsár Bencsáth. A
survey of security issues in hardware virtualization. ACM
Comput. Surv., 45(3):40:1–40:34, July 2013.
[39] Intel. Universal Host Controller Interface (UHCI), Mar 1996.
[40] Loïc Duﬂot. Contribution à la sécurité des systèmes
d’exploitation et des microprocesseurs. In PhD thesis,
Universite de Paris, Oct 2007.
[41] David Maynor. 0wn3d by everything else - USB/PCMCIA
Issues. CanSecWest/core05, May 2005.
[42] Brian D. Carrier and Joe Grand. A hardware-based memory
acquisition procedure for digital investigations. Digital
Investigation, 2004.
[43] Christophe Devine and Guillaume Vissian. Compromission
physique par le bus PCI. In Proceedings of the 7th
Symposium sur la Sécurité des Technologies de l’Information
et des Communications, SSITC 2009, pages 169–193, June
2009.
[44] Damien Aumaitre. Voyage au coeur de la mémoire. In
Proceedings of the 6th Symposium sur la Sécurité des
Technologies de l’Information et des Communications,
SSITC 2008, pages 378–437, June 2008.
[45] Adam Boileau. Hit by a Bus: Physical Access Attacks with
Firewire. Ruxcon, 2006.
[46] Maximillian Dornseif. 0wned by an iPod. PacSec, 2004.
[47] Michael Becher, Maximillian Dornseif, and Christian N.
Klein. FireWire - all your memory are belong to us.
CanSecWest/core05, May 2005.
[48] Antonio Martinm. FireWire memory dump of a windows XP
computer: a forensic approach. Technical report, 2007.
[49] Alexander Tereshkin and Rafal Wojtczuk. Introducing Ring
-3 Rootkits. Black Hat USA, 2009.
[50] Kevin Müller, Daniel Münch, Ole Isfort, Michael Paulitsch,
and Georg Sigl. Decreasing system availability on an avionic
multicore processor using directly assigned pci express
devices. In EUROSEC 2013, Apr 2013. Prag.
[51] Rafal Wojtczuk, Joanna Rutkowska, and Alexander
Tereshkin. Another Way to Circumvent Intel Trusted
Execution Technology, December 2009.
[21] Ben-Ami Yassour, Muli Ben-Yehuda, and Orit Wasserman.
Direct device assignment for untrusted fully-virtualized
virtual machines. Technical report, 2008.
[22] Thomas Ball, Ella Bounimova, Byron Cook, Vladimir Levin,
Jakob Lichtenberg, Con McGarvey, Bohus Ondrusek,
Sriram K. Rajamani, and Abdullah Ustuner. Thorough static
analysis of device drivers. SIGOPS Oper. Syst. Rev.,
40(4):73–85, April 2006.
[23] Jorrit N. Herder, Herbert Bos, Ben Gras, Philip Homburg,
and Andrew S. Tanenbaum. Failure resilience for device
drivers. In Proceedings of the 37th Annual IEEE/IFIP
International Conference on Dependable Systems and
Networks, DSN ’07, pages 41–50, Washington, DC, USA,
2007. IEEE Computer Society.
[24] Joshua LeVasseur, Volkmar Uhlig, Jan Stoess, and Stefan
Götz. Unmodiﬁed device driver reuse and improved system
dependability via virtual machines. In Proceedings of the 6th
conference on Symposium on Opearting Systems Design &
Implementation - Volume 6, OSDI’04, pages 2–2, Berkeley,
CA, USA, 2004. USENIX Association.
[25] Dan Williams, Patrick Reynolds, Kevin Walsh, Emin Gün
Sirer, and Fred B. Schneider. Device driver safety through a
reference validation mechanism. In Proceedings of the 8th
USENIX conference on Operating systems design and
implementation, OSDI’08, pages 241–254, Berkeley, CA,
USA, 2008. USENIX Association.
[26] Intel. Intel R(cid:13) Virtualization Technology for Directed I/O.
Intel R(cid:13) Technology Journal, 10, August 2006.
[27] Intel. Intel R(cid:13) Virtualization Technology for Directed I/O,
Feb 2011.
[28] Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand, Tim
Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, and Andrew
Warﬁeld. Xen and the art of virtualization. In Proceedings of
the nineteenth ACM symposium on Operating systems
principles, SOSP ’03, pages 164–177, New York, NY, USA,
2003. ACM.
[29] Intel. Intel 6 Series Chipset and Intel C200 Series Chipset.
May 2011.
[30] Zongwei Zhou, Virgil D. Gligor, James Newsome, and
Jonathan M. McCune. Building veriﬁable trusted path on
commodity x86 computers. In Proceedings of the 2012 IEEE
Symposium on Security and Privacy, SP ’12, pages 616–630,
Washington, DC, USA, 2012. IEEE Computer Society.
[31] Loïc Duﬂot and Laurent Absil. Programmed I/O accesses: a
threat to Virtual Machine Monitors? PacSec, 2007.
[32] Intel. Intel Graphics Virtualization on KVM. KVM Forum,
Aug 2011.
[33] Emulation of PCI conﬁguration space access.
http://xenbits.xen.org/hg/xen-4.
2-testing.hg/rev/1ac2a314aa3c.
[34] Joanna Rutkowska. pciback: question about the permissive
ﬂag. XEN-devel mailing list, Available at
http://old-list-archives.xenproject.org/
archives/html/xen-devel/2010-07/
msg00257.html, July 2010.
[35] Sam Fleming. Accessing PCI Express* Conﬁguration
Registers Using Intel Chipsets. December 2008.
[36] Nadav Amit, Muli Ben-Yehuda, Dan Tsafrir, and Assaf
Schuster. vIOMMU: efﬁcient IOMMU emulation. In
Proceedings of the 2011 USENIX conference on USENIX
annual technical conference, USENIXATC’11, pages 6–6,
Berkeley, CA, USA, 2011. USENIX Association.
316