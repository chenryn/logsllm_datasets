---
author: Abhishek Prakash
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2627
date: '2023-08-23 11:37:25'
editorchoice: false
excerpt: 初学者们，让我们在这个大型的教程中来认识一下 Bash 脚本编程。
fromurl: https://itsfoss.com/bash-scripting-tutorial/
id: 16120
islctt: true
largepic: /data/attachment/album/202308/23/113613l034n4fu2zt8m40q.jpg
permalink: /article-16120-1.html
pic: /data/attachment/album/202308/23/113613l034n4fu2zt8m40q.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 初学者们，让我们在这个大型的教程中来认识一下 Bash 脚本编程。
tags:
- Bash
- 脚本
thumb: false
title: Bash 脚本编程入门
titlepic: true
translator: ChatGPT
updated: '2023-08-23 11:37:25'
---
![](/data/attachment/album/202308/23/113613l034n4fu2zt8m40q.jpg)
> 
> 初学者们，让我们在这个大型的教程中来认识一下 Bash 脚本编程。
> 
> 
> 
Shell 是 Linux 的核心部分，它允许你使用各种诸如 `cd`、`ls`、`cat` 等的命令与 Linux 内核进行交互。
Bash 是 Linux 上众多可用的 Shell 中的一个。这些 Shell 主要的语法基本相同，但并非完全一样。Bash 是目前最受欢迎的 Shell，并在大多数 Linux 发行版中被设为默认 Shell。
当你打开一个终端或 SSH 会话时，即使你无法真切地看到它，你其实已经在运行着一个 Shell。
![](/data/attachment/album/202308/23/113725wortgc6h5ccf1e4s.png)
当你输入一个命令，它会被 Shell 解释。如果命令和语法是正确的，它就会被执行，否则你会看到一个错误。
### 当你可以直接运行 Linux 命令时，为什么还需要 Bash 脚本？
你可以直接在终端输入命令，它们就会被执行。
```
$ echo "hello world"
hello world
```
并且，同样的操作也可以在脚本中进行：
```
$ cat >> script.sh
#!/bin/bash
echo "hello world"
$ bash script.sh
hello world
```
那么，为什么我们需要 Shell 脚本呢？因为你不必一遍又一遍地输入同一个命令，你只需运行 Shell 脚本即可。
此外，如果你的脚本中有复杂的逻辑，把所有的命令都输入到终端中可能并不是一个好主意。
例如，如果你输入下面的命令，它会奏效，但这并不容易理解。不断地输入相同的命令（甚至要在 Bash 历史记录中搜索）会造成困扰。
```
if [ $(whoami) = 'root' ]; then echo "root"; else echo "not root"; fi
```
相反，你可以把命令放进 shell 脚本中，这样就更容易理解并且可以轻松运行了：
```
#!/bin/bash
if [ $(whoami) = 'root' ]; then
    echo "You are root"
else
    echo "You are not root"
fi
```
这还是比较简单的情况。尝试想象一下，一个复杂的脚本可能有五十行或一百行！
### 你将会学到什么？
在这个 Bash 脚本教程中，有九个部分。你将会学到：
* 创建并运行你的第一个 Bash Shell 脚本
* 使用变量
* 在你的 Bash 脚本中传递参数和接受用户输入
* 进行数学计算
* 操作字符串
* 使用条件语句，例如 `if-else`
* 使用 `for`、`while` 和 `until` 循环
* 创建函数
> 
> ? 所有的部分都会给你一个简单的例子。如果你愿意，你可以通过访问每个部分的详细章节来更深入地学习。这些章节也都包含了实践练习。
> 
> 
> 
### 这个教程的目标读者是谁？
这个教程适合任何想要开始学习 Bash Shell 脚本的人。
如果你是一名学生，而你的课程里包括了 Shell 脚本，那么这个系列就是为你准备的。
如果你是一个常规的桌面 Linux 用户，这个系列将会帮助你理解在探索各种软件和修复问题时遇到的大多数 Shell 脚本。你也可以使用它来自动化一些常见的、重复的任务。
在这个 Bash 脚本教程结束时，你应该可以编写简单的 Bash 脚本。
> 
> ? 希望你已经拥有 Linux 命令行和编程语言的基础知识。
> 
> 
> 
如果你对 Linux 命令行完全不熟悉，我建议你先掌握基础知识。
> 
> **[19 个你应该知道的基础而重要的 Linux 终端技巧](https://itsfoss.com/basic-terminal-tips-ubuntu/)**
> 
> 
> 
你应该了解如何在命令行中进入特定的位置。为了做到这一点，你需要理解 Linux 文件系统中的路径是如何工作的。
> 
> **[Linux 中的绝对路径和相对路径有什么不同](https://linuxhandbook.com/absolute-vs-relative-path/)**
> 
> 
> 
接下来，这个教程系列会给你介绍目录导航和文件操作的基本知识。
> 
> **[终端基础：Linux 终端入门](/article-16104-1.html)**
> 
> 
> 
### 1、编写你的第一个 Bash Shell 脚本
创建一个名为 `hello.sh` 的新文件：
```
nano hello.sh
```
这将在终端中打开 nano 编辑器。在其中输入以下几行代码：
```
#!/bin/bash
echo "Hello World"
```
通过按 `Ctrl+X` 键可以保存并退出 nano 编辑器。
现在，你可以以以下方式运行 Bash Shell 脚本：
```
bash hello.sh
```
你应该可以看到以下的输出：
```
Hello World
```
另一种方式是首先赋予脚本执行权限：
```
chmod u+x hello.sh
```
然后这样运行它：
```
./hello.sh
```
> 
> ? 你也可以使用基于图形用户界面的文本编辑器来编写脚本。这可能更适合编写较长的脚本。然而，你需要切换到保存脚本的目录中才能运行它。
> 
> 
> 
恭喜！你刚刚运行了你的第一个 Bash 脚本。
> 
> **[Bash 基础知识系列 #1：创建并运行你的第一个 Bash Shell 脚本](/article-15921-1.html)**
> 
> 
> 
### 2、在 Bash 脚本中使用变量
变量的声明方式如下：
```
var=some_value
```
然后可以像这样访问变量：
```
$var
```
> 
> ? 在声明变量时，等号（`=`）前后不能有空格。
> 
> 
> 
我们通过添加一个变量来修改前面的脚本。
```
#!/bin/bash
message="Hello World"
echo $message
```
如果运行这个脚本，输出仍然会保持不变。
```
Hello World
```
> 
> **[Bash 基础知识系列 #2：在 Bash 中使用变量](/article-15991-1.html)**
> 
> 
> 
### 3、向 Bash 脚本传递参数
你可以在运行 Bash 脚本时以以下方式传递参数：
```
./my_script.sh arg1 arg2
```
在脚本中，你可以使用 `$1` 来代表第 1 个参数，用 `$2` 来代表第 2 个参数，以此类推。`$0` 是一个特殊变量，它代表正在运行的脚本的名字。
现在，创建一个新的 shell 脚本，命名为 `arguments.sh`，并向其中添加以下几行代码：
```
#!/bin/bash
echo "Script name is: $0"
echo "First argument is: $1"
echo "Second argument is: $2"
```
使其可执行并像这样运行它：
```
$ ./argument.sh abhishek prakash
Script name is: ./argument.sh
First argument is: abhishek
Second argument is: prakash
```
让我们快速看一下特殊变量：
| 特殊变量 | 描述 |
| --- | --- |
| `$0` | 脚本名称 |
| `$1`、`$2`...`$9` | 脚本参数 |
| `${n}` | 10 到 255 的脚本参数 |
| `$#` | 参数数量 |
| `$@` | 所有参数一起 |
| `$$` | 当前 shell 的进程 id |
| `$!` | 最后执行命令的进程 id |
| `$?` | 最后执行命令的退出状态 |
你也可以通过接受键盘输入使你的 Bash 脚本变得交互式。
为此，你必须使用 `read` 命令。你还可以使用 `read -p` 命令提示用户进行键盘输入，而不需要 `echo` 命令。
```
#!/bin/bash
echo "What is your name, stranger?"
read name
read -p "What's your full name, $name? " full_name
echo "Welcome, $full_name"
```
现在，如果你运行这个脚本，当系统提示你输入“参数”时，你必须输入。
```
$ ./argument.sh
What is your name, stranger?
abhishek
What's your full name, abhishek? abhishek prakash
Welcome, abhishek prakash
```
> 
> **[Bash 基础知识系列 #3：传递参数和接受用户输入](/article-16001-1.html)**
> 
> 
> 
### 4、执行算术运算
在 Bash Shell 中执行算术运算的语法是这样的：
```
$((arithmetic_operation))
```
下面是你可以在 Bash 中执行的算术运算的列表：
| 操作符 | 描述 |
| --- | --- |
| `+` | 加法 |
| `-` | 减法 |
| `*` | 乘法 |
| `/` | 整数除法（没有小数） |
| `%` | 模运算（只余） |
| `**` | 指数（a 的 b 次方） |
以下是在 Bash 脚本中进行加法和减法的示例：
```
#!/bin/bash
read -p "Enter first number: " num1
read -p "Enter second number: " num2
sum=$(($num1+$num2))
sub=$(($num1-$num2))
echo "The summation of $num1 and $num2 is $sum"
echo "The substraction of $num2 from $num1 is $sub"
```