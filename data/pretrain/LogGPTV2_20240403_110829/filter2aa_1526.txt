### Direct Memory Attack on the KERNEL
#### By: Ulf Frisk

### Rise of the Machines: Agenda
- **Objective**: Exploit and inject code into the kernels of Linux, Windows, and macOS using Direct Memory Access (DMA) techniques.
- **Capabilities**:
  - Dump memory at speeds exceeding 150MB/s.
  - Pull and push files.
  - Execute arbitrary code.
- **Project Type**: Open-source.
- **Hardware Requirement**: A $100 PCIe card.

### About Me: Ulf Frisk
- **Professional Background**: Penetration tester with a focus on online banking security.
- **Employment**: Financial sector in Stockholm, Sweden.
- **Education**: MSc in Computer Science and Engineering.
- **Special Interests**: Low-level Windows programming and DMA.
- **Learning Approach**: Hands-on projects involving x64 assembly and OS kernels.

### Disclaimer
- This presentation is given by me as an individual.
- My employer is not involved in any way.

### PCILeech
- **Components**:
  - PLX USB3380 Development Board.
  - Custom firmware.
  - Supporting software.
- **Specifications**:
  - PCIe interface.
  - USB3 connectivity.
  - Cost: $78.
  - No drivers required.
  - DMA speed: >150MB/s.
- **Firmware**:
  - Size: 46 bytes.
  - Key registers and identifiers are configured to mimic a Broadcom SD-card and Google Glass.

### PCI Express (PCIe)
- **Overview**:
  - High-speed serial expansion bus.
  - Packet-based, point-to-point communication.
  - Supports 1 to 16 lanes (x1, x4, x8, x16).
  - Hot pluggable.
  - Various form factors: Mini-PCIe, Express Card, Thunderbolt.
- **DMA Capabilities**:
  - Direct Memory Access, bypassing the CPU.
  - Works with physical addresses if IOMMU is not used.

### DMA â€“ Direct Memory Access
- **Key Points**:
  - Code executes in virtual address space.
  - PCIe DMA operates with physical (device) addresses.
  - PCIe devices can directly access memory if IOMMU is disabled.
  - VT-d (Intel Virtualization Technology for Directed I/O) can be enabled or disabled.

### Kernel Exploitation
- **Memory Access**:
  - Most computers have more than 4GB of memory.
  - Kernel modules (KMDs) can access all memory and execute code.
  - Use DMA to search for code signatures and patch kernel code.
  - Hijack the execution flow of kernel code.
- **Stages**:
  1. **Stage #1**: Hooked function.
  2. **Stage #2**: Free space in the kernel.
  3. **Stage #3**: Wait for DMA write, set up DMA buffer, and handle commands (memory read, write, execute, exit, create thread).

### Linux Kernel
- **Characteristics**:
  - Located in low memory.
  - Location depends on KASLR (Kernel Address Space Layout Randomization) slide.
- **Exploitation Steps**:
  1. Search for `vfs_read` (random hook function).
  2. Search for `kallsyms_lookup_name`.
  3. Write stage 2.
  4. Write stage 1.
  5. Wait for stage 2 to return the physical address of stage 3.

### Windows 10
- **Characteristics**:
  - Kernel located at the top of memory.
  - Problematic if more than 3.5 GB RAM is present.
  - Page table loaded below 4GB.
- **Exploitation Steps**:
  - Use CPU CR3 register to find PML4, PDPT, PD, and PT.
  - Search for "driver signature" and rewrite PTEs.
  - Insert and execute kernel module.
- **Security Features**:
  - Anti-DMA features not enabled by default.
  - Secure if virtualization-based security (Credential/Device Guard) is enabled.
  - Users may modify UEFI settings to circumvent protections.

### macOS Kernel
- **Characteristics**:
  - Located in low memory.
  - Enforces KEXT signing and System Integrity Protection.
  - Protected by VT-d (IOMMU).
- **Exploitation Steps**:
  1. Search for Mach-O kernel header.
  2. Search for `memcpy` (random hook function).
  3. Write stage 2.
  4. Write stage 1.
  5. Wait for stage 2 to return the physical address of stage 3.
- **Bypassing VT-d**:
  - Apple provides a method to disable VT-d for debugging purposes.

### Mitigations
- **Hardware**:
  - Disable DMA ports.
  - BIOS DMA port lock down and TPM change detection.
  - Firmware/BIOS password.
  - Pre-boot authentication.
- **Software**:
  - IOMMU / VT-d.
  - Windows 10 virtualization-based security.

### PCILeech: Use Cases
- **Awareness**: Full disk encryption is not invincible.
- **Forensics and Malware Analysis**.
- **Loading Unsigned Drivers**.
- **Penetration Testing**.
- **Law Enforcement**.
- **Ethical Considerations**: Do not use this tool for malicious purposes.

### PCILeech Specifications
- **Target Operating Systems**: 64-bit.
- **Supported OS**: Windows 7/10.
- **Memory Access**: Up to 4GB natively, all memory with kernel module assistance.
- **Code Execution**: Supported.
- **Kernel Modules**: Available for Linux, Windows, and macOS.
- **Development Environment**: C and ASM in Visual Studio.
- **Design**: Modular, allowing for custom signatures and kernel implants.

### Key Takeaways
- **Inexpensive Universal DMA Attacks**: Now possible.
- **Physical Access**: Still a critical issue; be aware of potential "Evil Maid" attacks.
- **Full Disk Encryption**: Not invincible.

### References
- **PCILeech**:
  - [GitHub Repository](https://github.com/ufrisk/pcileech)
- **SLOTSCREAMER**:
  - [GitHub Repository](https://github.com/NSAPlayset/SLOTSCREAMER)
  - [NSA Playset](http://www.nsaplayset.org/slotscreamer)
- **Inception**:
  - [GitHub Repository](https://github.com/carmaa/inception)
- **PLX Technologies USB3380 Data Book**

### Questions and Answers?
- Feel free to ask any questions you may have.