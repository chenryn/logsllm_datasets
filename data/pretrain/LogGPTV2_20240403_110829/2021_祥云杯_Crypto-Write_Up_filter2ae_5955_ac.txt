        return rk, encoder[1:], prefix
    def re_enc(rk, cipher):
        c, (E, V, s) = cipher
        E_ = pow(E, rk, p)
        V_ = pow(V, rk, p)
        s_ = s * rk % p
        return c, (E_, V_, s_)
    class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
        pass
    class EncHandler(SocketServer.BaseRequestHandler):
        def handle(self):
            self.request.sendall("Welcome to our netdisk system! Our system store only users' ciphertext\n")
            self.request.sendall("Now you can choose what you wanna do\n")
            self.request.sendall("1. generate your key\n2. start challenge\n2. get the ciphertext")
            pk_of_one_user, sk_of_one_user = key_gen(512)
            cipher = enc(flag, pk_of_one_user)
            pk, sk = key_gen(512)
            while 1:
                mul = 1
                self.request.sendall('Input your choice\n')
                self.request.sendall("choice>")
                choice = self.request.recv(16).strip()
                if choice == '1':
                    self.request.sendall('Please take good care of it!\n' + hex(pk) + ',' + hex(sk) + '\n')
                elif choice == '2':
                    group_list = [32, 64, 128, 256]
                    for group in group_list:
                        m = getrandbits(200)
                        plaintext = n2s(m)
                        cur_cipher = enc(plaintext, pk_of_one_user)
                        rk, encoder, prefix = rk_gen(sk_of_one_user, pk, group=group)
                        mul *= rk
                        mul %= p
                        new_cipher = re_enc(rk, cur_cipher)
                        self.request.sendall('The cipher shared to you\n' + str(new_cipher) + '\n')
                        self.request.sendall('prefix, encoder = ' + str((encoder, prefix.encode('hex'))) + '\n')
                        ans = self.request.recv(1024).strip()
                        if int(ans, 16) != m:
                            exit(1)
                    self.request.sendall('You are a clever boy! Now I can share you some other information!\n' + hex(mul) + '\n')
                elif choice == '3':
                    self.request.sendall(str(cipher) + '\n')
                    exit(1)
                else:
                    continue
    if __name__ == "__main__":
        HOST, PORT = "0.0.0.0", 1213
        server = ThreadedTCPServer((HOST, PORT), EncHandler)
        server.serve_forever()
还好，也就百来行，代码量不大，
我们以目标驱使，找到获取flag的地方，cipher = enc(flag, pk_of_one_user)
看到这个pk_of_one_user，
    def key_gen(nbits):
        s = getrandbits(nbits) % p
        while s.bit_length() ")
    sh.sendline("1")
    sh.recvuntil("Please take good care of it!\n")
    tmp = sh.recvuntil("\n")[:-1]
    #获取自己的pk和sk
    pk,sk = eval(tmp)
    B=[]
    sh.recvuntil("choice>")
    sh.sendline("2")
    for _ in range(4):
        sh.recvuntil("The cipher shared to you\n")
        tmp = sh.recvuntil("\n")[:-1]
        #获取到 re_enc(m) 后给的 c, (E_, V_, s_)
        c, (E_, V_, s_) = eval(tmp)
        sh.recvuntil("prefix, encoder = ")
        tmp = sh.recvuntil("\n")[:-1]
        #利用 encoder,prefix 获取r，从而得到dd
        encoder,prefix = eval(tmp)
        prefixx = prefix.decode('hex')
        prefix = int(prefix,16)
        x = -pow(prefix,sk,p)%p
        tmp=1
        for i in encoder[:-1]:
            tmp = (i-tmp*x)%p
        r = (encoder[-1] - tmp*x)%p
        prefix = n2s(pow(g, x * sk, p)).rjust(64, '\x00')
        dd = h2(prefixx + n2s(r).rjust(64, '\x00')) | 1
        B.append(dd)
        dd_ = inverse(dd,p-1)
        #有了dd，利用前面得到的c, E_ * V_ 解密m
        m = inverse(pow(E_*V_,dd_,p),p)*c % p
        sh.sendline(hex(m)[2:])
    sh.recvuntil("You are a clever boy! Now I can share you some other information!\n")
    tmp = sh.recvuntil("\n")[:-1]
    #拿着通关后给的mul，待会去开根
    mul = eval(tmp)
    sh.recvuntil("choice>")
    sh.sendline("3")
    tmp = sh.recvuntil("\n")[:-1]
    #获取flag密文相关的参数
    c, (E, V, s) = eval(tmp)
    #dd求逆乘以mul，把原来mul里的dd去掉，得到sk^4
    for i in B:
        mul = mul * inverse(i,p) % p
    sk_4 = mul 
    sh.interactive()
拿到 sk^4 后要开根，这里我切到sagemath去直接用nth_root了
    a,b = Mod(sk_4,p).nth_root(4,all=True)
    tmp = pow(int(E*V),int(a),int(p))
    m = c * inverse_mod(int(tmp),int(p)) % int(p)
    print(long_to_bytes(m))
    tmp = pow(int(E*V),int(b),int(p))
    m = c * inverse_mod(int(tmp),int(p)) % int(p)
    print(long_to_bytes(m))
    b'flag{504d0411-6707-469b-be31-9868200aca95}'
    b'\x9at\x03O\xbd;.\xb5\x97Tz$t2V\x9b\x92\xa8\x0c.O\x89V\x05\xbf\xb9\x0e\xfb\xfcRC\x8e\x948qB\xee\x92y\x02\xbf|\xf6Sq\x81\xdf;!\xd1\x9fmJ\xfb\x87#\xbb10\xa4t\xfd\xd4\x9a'
## 结语
​
整体来看，这次比赛的题目难度中等叭，第一题一把梭没啥好说的，第二题非预期的炼丹，也还行吧，赛后也没问着hint怎么用，不过第一次交互好像是用来获取lamda的，我直接用同态过check好像也是非预期了。第三题化二元方程为一元，然后二分（哦，求一下导可以知道后面是递增的所以能二分）去求一个大概解，也挺有意思的。不过最喜欢的还是最后一题，初看觉得整个代码的处理流程很冗长，但是一点点去将题目解析，将问题一点点规约下去，这种一点点拨开云雾见天日，守得云开见月明的感觉属实不错，而且难度也刚好在我的level，舒服了。