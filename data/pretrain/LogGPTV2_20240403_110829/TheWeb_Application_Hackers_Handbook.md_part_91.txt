Stuttard c19.indd V2 - 08/11/2011 Page 708
708 Chapter 19 n Finding Vulnerabilities in Source Code
checks whether the redirection URL contains a double slash (as in http://). If it
does, the script skips past the double slash to the fi rst single slash, thereby con-
verting it into a relative URL. However, the script then makes a fi nal call to the
unescape() function, which unpacks any URL-encoded characters. Performing
canonicalization after validation often leads to a vulnerability (see Chapter 2).
In this instance an attacker can cause a redirect to an arbitrary absolute URL
with the following query string:
?redir=http:%25252f%25252fwahh-attacker.com
OS Command Injection
Code that interfaces with external systems often contains signatures indicat-
ing code injection fl aws. In the following example, the message and address
parameters have been extracted from user-controllable form data and are passed
directly into a call to the UNIX system API:
void send_mail(const char *message, const char *addr)
{
char sendMailCmd[4096];
snprintf(sendMailCmd, 4096, “echo ‘%s’ | sendmail %s”, message, addr);
system(sendMailCmd);
return;
}
Backdoor Passwords
Unless they have been deliberately concealed by a malicious programmer,
backdoor passwords that have been used for testing or administrative purposes
usually stand out when you review credential validation logic. For example:
private UserProfile validateUser(String username, String password)
{
UserProfile up = getUserProfile(username);
if (checkCredentials(up, password) ||
“oculiomnium”.equals(password))
return up;
return null;
}
Other items that may be easily identifi ed in this way include unreferenced
functions and hidden debug parameters.
cc1199..iinndddd 770088 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 709
Chapter 19 n Finding Vulnerabilities in Source Code 709
Native Software Bugs
You should closely review any native code used by the application for classic
vulnerabilities that may be exploitable to execute arbitrary code.
Buffer Overfl ow Vulnerabilities
These typically employ one of the unchecked APIs for buffer manipulation, of
which there are many, including strcpy,strcat,memcpy, and sprintf, together
with their wide-char and other variants. An easy way to identify low-hanging
fruit within the codebase is to search for all uses of these APIs and verify
whether the source buffer is user-controllable. You also should verify whether
the code has explicitly ensured that the destination buffer is large enough to
accommodate the data being copied into it (because the API itself does not do so).
Vulnerable calls to unsafe APIs are often easy to identify. In the following
example, the user-controllable string pszName is copied into a fi xed-size stack-
based buffer without checking that the buffer is large enough to accommodate it:
BOOL CALLBACK CFiles::EnumNameProc(LPTSTR pszName)
{
char strFileName[MAX_PATH];
strcpy(strFileName, pszName);
...
}
Note that just because a safe alternative to an unchecked API is employed,
this is no guarantee that a buffer overfl ow will not occur. Sometimes, due to a
mistake or misunderstanding, a checked API is used in an unsafe manner, as
in the following “fi x” of the preceding vulnerability:
BOOL CALLBACK CFiles::EnumNameProc(LPTSTR pszName)
{
char strFileName[MAX_PATH];
strncpy(strFileName, pszName, strlen(pszName));
...
}
Therefore, a thorough code audit for buffer overfl ow vulnerabilities typically
entails a close line-by-line review of the entire codebase, tracing every operation
performed on user-controllable data.
Integer Vulnerabilities
These come in many forms and can be extremely subtle, but some instances are
easy to identify from signatures within the source code.
cc1199..iinndddd 770099 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 710
710 Chapter 19 n Finding Vulnerabilities in Source Code
Comparisons between signed and unsigned integers often lead to problems.
In the following “fi x” to the previous vulnerability, a signed integer (len) is
compared with an unsigned integer (sizeof(strFileName)). If the user can
engineer a situation where len has a negative value, this comparison will suc-
ceed, and the unchecked strcpy will still occur:
BOOL CALLBACK CFiles::EnumNameProc(LPTSTR pszName, int len)
{
char strFileName[MAX_PATH];
if (len < sizeof(strFileName))
strcpy(strFileName, pszName);
...
}
Format String Vulnerabilities
Typically you can identify these quickly by looking for uses of the printf and
FormatMessage families of functions where the format string parameter is not
hard-coded but is user-controllable. The following call to fprintf is an example:
void logAuthenticationAttempt(char* username);
{
char tmp[64];
snprintf(tmp, 64, “login attempt for: %s\n”, username);
tmp[63] = 0;
fprintf(g_logFile, tmp);
}
Source Code Comments
Many software vulnerabilities are actually documented within source code
comments. This often occurs because developers are aware that a particular
operation is unsafe, and they record a reminder to fi x the problem later, but
they never get around to doing so. In other cases, testing has identifi ed some
anomalous behavior within the application that was commented within the
code but never fully investigated. For example, the authors encountered the
following within an application’s production code:
cc1199..iinndddd 771100 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 711
Chapter 19 n Finding Vulnerabilities in Source Code 711
char buf[200]; // I hope this is big enough
...
strcpy(buf, userinput);
Searching a large codebase for comments indicating common problems is
frequently an effective source of low-hanging fruit. Here are some search terms
that have proven useful:
n bug
n problem
n bad
n hope
n todo
n fix
n overflow
n crash
n inject
n xss
n trust
The Java Platform
This section describes ways to acquire user-supplied input, ways to interact with
the user’s session, potentially dangerous APIs, and security-relevant confi gura-
tion options on the Java platform.
Identifying User-Supplied Data
Java applications acquire user-submitted input via the javax.servlet.http.
HttpServletRequest interface, which extends the javax.servlet.ServletRequest
interface. These two interfaces contain numerous APIs that web applications
can use to access user-supplied data. The APIs listed in Table 19-1 can be used
to obtain data from the user request.
cc1199..iinndddd 771111 88//1199//22001111 1122::1188::3344 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 712
712 Chapter 19 n Finding Vulnerabilities in Source Code
Table 19-1: APIs Used to Acquire User-Supplied Data on the Java Platform
API DESCRIPTION
getParameter Parameters within the URL query string and the body
of a POST request are stored as a map of String
getParameterNames
names to String values, which can be accessed
getParameterValues using these APIs.
getParameterMap
getQueryString Returns the entire query string contained within the
request and can be used as an alternative to the
getParameter APIs.
getHeader HTTP headers in the request are stored as a map
of String names to String values and can be
getHeaders
accessed using these APIs.
getHeaderNames
getRequestURI These APIs return the URL contained within the
request, including the query string.
getRequestURL
getCookies Returns an array of Cookie objects, which contain
details of the cookies received in the request, includ-
ing their names and values.
getRequestedSessionId Used as an alternative to getCookies in some
cases; returns the session ID value submitted within
the request.
getInputStream These APIs return different representations of the
raw request received from the client and there-
getReader
fore can be used to access any of the information
obtained by all the other APIs.
getMethod Returns the method used in the HTTP request.
getProtocol Returns the protocol used in the HTTP request.
getServerName Returns the value of the HTTP Host header.
getRemoteUser If the current user is authenticated, these APIs return
details of the user, including his login name. If users
getUserPrincipal
can choose their own username during self-registra-
tion, this may be a means of introducing malicious
input into the application’s processing.
Session Interaction
Java Platform applications use the javax.servlet.http.HttpSession interface
to store and retrieve information within the current session. Per-session storage
is a map of string names to object values. The APIs listed in Table 19-2 are used
to store and retrieve data within the session.
cc1199..iinndddd 771122 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 713
Chapter 19 n Finding Vulnerabilities in Source Code 713
Table 19-2: APIs Used to Interact with the User’s Session on the Java Platform
API DESCRIPTION
setAttribute Used to store data within the current session.
putValue
getAttribute Used to query data stored within the current session.
getValue
getAttributeNames
getValueNames
Potentially Dangerous APIs
This section describes some common Java APIs that can introduce security
vulnerabilities if used in an unsafe manner.
File Access
The main class used to access fi les and directories in Java is java.io.File.
From a security perspective, the most interesting uses of this class are calls to
its constructor, which may take a parent directory and fi lename, or simply a
pathname.
Whichever form of the constructor is used, path traversal vulnerabilities
may exist if user-controllable data is passed as the fi lename parameter without
checking for dot-dot-slash sequences. For example, the following code opens a
fi le in the root of the C:\ drive on Windows:
String userinput = “..\\boot.ini”;
File f = new File(“C:\\temp”, userinput);
The classes most commonly used for reading and writing fi le contents in
Java are:
n java.io.FileInputStream
n java.io.FileOutputStream
n java.io.FileReader
n java.io.FileWriter
These classes take a File object in their constructors or may open a fi le
themselves via a fi lename string, which may again introduce path traversal
vulnerabilities if user-controllable data is passed as this parameter. For example:
String userinput = “..\\boot.ini”;
FileInputStream fis = new FileInputStream(“C:\\temp\\” + userinput);
cc1199..iinndddd 771133 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 714
714 Chapter 19 n Finding Vulnerabilities in Source Code
Database Access
The following are the APIs most commonly used for executing an arbitrary
string as a SQL query:
n java.sql.Connection.createStatement
n java.sql.Statement.execute
n java.sql.Statement.executeQuery
If user-controllable input is part of the string being executed as a query, it is
probably vulnerable to SQL injection. For example:
String username = “admin’ or 1=1--”;
String password = “foo”;
Statement s = connection.createStatement();
s.executeQuery(“SELECT * FROM users WHERE username = “’ + username +
“’ AND password = “’ + password + “’”);
executes this unintended query:
SELECT * FROM users WHERE username = ‘admin’ or 1=1--’ AND password = ‘foo’
The following APIs are a more robust and secure alternative to the ones previ-
ously described. They allow an application to create a precompiled SQL statement
and set the value of its parameter placeholders in a secure and type-safe way:
n java.sql.Connection.prepareStatement
n java.sql.PreparedStatement.setString
n java.sql.PreparedStatement.setInt
n java.sql.PreparedStatement.setBoolean
n java.sql.PreparedStatement.setObject
n java.sql.PreparedStatement.execute
n java.sql.PreparedStatement.executeQuery
and so on.
If used as intended, these are not vulnerable to SQL injection. For example:
String username = “admin’ or 1=1--”;
String password = “foo”;
Statement s = connection.prepareStatement(
“SELECT * FROM users WHERE username = ? AND password = ?”);
s.setString(1, username);
s.setString(2, password);
s.executeQuery();
cc1199..iinndddd 771144 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 715
Chapter 19 n Finding Vulnerabilities in Source Code 715
results in a query that is equivalent to the following:
SELECT * FROM users WHERE username = ‘admin’’ or 1=1--’ AND
password = ‘foo’
Dynamic Code Execution
The Java language itself does not contain any mechanism for dynamic evaluation
of Java source code, although some implementations (notably within database
products) provide a facility to do this. If the application you are reviewing con-
structs any Java code on the fl y, you should understand how this is done and
determine whether any user-controllable data is being used in an unsafe way.
OS Command Execution
The following APIs are the means of executing external operating system com-
mands from within a Java application:
n java.lang.runtime.Runtime.getRuntime
n java.lang.runtime.Runtime.exec
If the user can fully control the string parameter passed to exec, the application
is almost certainly vulnerable to arbitrary command execution. For example,
the following causes the Windows calc program to run:
String userinput = “calc”;
Runtime.getRuntime.exec(userinput);
However, if the user controls only part of the string passed to exec, the appli-
cation may not be vulnerable. In the following example, the user-controllable
data is passed as command-line arguments to the notepad process, causing it
to attempt to load a document called | calc:
String userinput = “| calc”;
Runtime.getRuntime.exec(“notepad “ + userinput);
The exec API itself does not interpret shell metacharacters such as & and |,
so this attack fails.
Sometimes, controlling only part of the string passed to exec may still be
suffi cient for arbitrary command execution, as in the following subtly different
example (note the missing space after notepad):
String userinput = “\\..\\system32\\calc”;
Runtime.getRuntime().exec(“notepad” + userinput);
cc1199..iinndddd 771155 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 716