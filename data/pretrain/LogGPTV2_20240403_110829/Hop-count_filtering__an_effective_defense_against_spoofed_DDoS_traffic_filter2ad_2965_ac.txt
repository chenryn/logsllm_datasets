20
F
M
P
Real IP addresses
Forged IP addresses from zombie 1
Forged IP addresses from zombie 2
1
5
10
15
20
25
30
1
5
10
15
20
25
30
Hop-Count
Hop-Count
Figure 6: Hop-Count distribution of IP addresses with
a single ﬂooding source.
Figure 7: Hop-Count distribution of IP addresses with
two ﬂooding sources.
victim server. The range of randomized initial TTL values should be
a subset of [hz, Id + hz], where hz is the hop-count from the ﬂood-
ing source to the victim and Id is the default initial TTL value. The
starting point in this range should not be less than hz. Otherwise,
spoofed IP packets bearing TTLs smaller than hz will be discarded
before they reach the victim. The simplest method of generating ini-
tial TTLs at a single source is to use a uniform distribution. The ﬁnal
TTL values, Tv’s, seen at the victim are Ir − hz, where Ir represents
randomly-generated initial TTLs. Since hz is constant and Ir follows
a uniform distribution, Tv’s are also uniformly-distributed. Since the
victim derives the hop-count of a received IP packet based on its Tv
value, the perceived hop-count distribution of the spoofed source IP
address is uniformly-distributed.
Figure 8 illustrates the effect of randomized TTLs, where hz = 10.
We use a Gaussian curve with µ = 15 and σ = 3 to represent a typical
hop-count distribution (see Section 3.2) from real IP addresses to the
victim, and the box graph to represent the perceived hop-count dis-
tribution of spoofed IP addresses at the victim. The large overlap be-
tween the two graphs may appear to indicate that our ﬁltering mech-
anism is not effective. On the contrary, uniformly-distributed ran-
dom TTLs actually conceal fewer spoofed IP addresses from HCF.
For uniformly-distributed TTLs, each spoofed source IP address has
the probability 1/H of having the matching TTL value, where H is
the number of possible hop-counts. Consequently, for each possible
hop-count h, only αh/H fraction of IP addresses have correct TTL
values. Overall, assuming that the range of possible hop-counts is
[hi, h j] where i ≤ j and H = j− i + 1, the fraction of spoofed source
IP addresses that have correct TTL values, is given as:
¯Z =
αhi
H
+ . . . +
αh j
H
= 1
H
·
j∑
k=i
αhk
.
Note that we use ¯Z in place of 1−Z to simplify notation. In Figure 8,
the range of generated hop-counts is between 10 and 20, so H =
11. The summation will have a maximum value of 1 so ¯Z can be
at most 1/H = 8.5%, which is represented by the area under the
shorter Gaussian distribution in Figure 8. In this case, less than 10%
of spoofed packets go undetected by HCF.
In general, an attacker could generate initial TTLs within the range
[hm, hn], based on some known distribution, where the probability of
IP addresses with hop-count hk is phk .
If in the actual hop-count
distribution at the victim server, the fraction of the IP addresses that
have a hop-count of hk is αhk , then the fraction of the spoofed IP
packets that will not be caught by HCF is:
F
M
P
20
18
16
14
12
10
8
6
4
2
0
Real IP addresses
Forged IP addresses
Undetectable IP addresses
1
5
10
15
20
25
30
Hop-Count
Figure 8: Hop-Count distribution of IP addresses with a single
ﬂooding source, randomized TTL values.
¯Z =
n∑
k=m
αhk
· phk
.
In this case, ¯Z becomes ¯Z = ∑n
The term inside the summation simply states that only phk fraction
of IP addresses with hop-count hk can be spoofed with matching
TTL values. For instance, if an attacker is able to generate initial
TTLs based on the hop-count distribution at the victim, phk becomes
αhk .
. Based on the hop-
count distribution in Figure 8, we can again calculate ¯Z for m = 0
and n = 30 to be 9.4%, making this attack slightly more effective
than randomly-generating TTLs. Surprisingly, none of these “intel-
ligent” attacks are much more effective than the simple attacks in
Section 4.1.1.
k=m
α2
hk
5. CONSTRUCTION OF HCF TABLE
We have shown that HCF can remove nearly 90% of spoofed traf-
ﬁc with an accurate mapping between IP addresses and hop-counts.
Thus, building an accurate HCF table (i.e., IP2HC mapping table)
is critical to detecting the maximum number of spoofed IP pack-
ets. In this section, we detail our approach to constructing an HCF
table. Our objectives in building an HCF table are: (1) accurate
IP2HC mapping, (2) up-to-date IP2HC mapping, and (3) moderate
storage requirement. By clustering address preﬁxes based on hop-
counts, we can build accurate IP2HC mapping tables and maximize
HCF’s effectiveness without storing the hop-count for each IP ad-
dress. Moreover, we design a pollution-proof update procedure that
captures legitimate hop-count changes while foiling attackers’ at-
tempt to pollute HCF tables.
5.1 IP Address Aggregation
It is highly unlikely that an Internet server will receive legitimate
requests from all live IP addresses in the Internet. Also, the entire IP
address space is not fully utilized in the current Internet. By aggre-
gating IP address, we can reduce the space requirement of IP2HC
mapping signiﬁcantly. More importantly, IP address aggregation
covers those unseen IP addresses that are co-located with those IP
addresses that are already in an HCF table.
Grouping hosts according to the ﬁrst 24 bits of IP addresses is a
common aggregation method. However, hosts whose network pre-
ﬁxes are longer than 24 bits, may reside in different physical net-
works in spite of having the same ﬁrst 24 bits. Thus, these hosts are
not necessarily co-located and have identical hop-counts. To obtain
an accurate IP2HC mapping, we must reﬁne the 24-bit aggregation.
Instead of simply aggregating into 24-bit address preﬁxes, we further
divide IP addresses within each 24-bit preﬁx into smaller clusters
based on hop-counts. To understand whether this reﬁned cluster-
ing improves HCF over the simple 24-bit aggregation, we compare
the ﬁltering accuracies of HCF tables under both aggregations —
the simple 24-bit aggregation (without hop-count clustering) and the
24-bit aggregation with hop-count clustering.
For this accuracy experiment, we treat each traceroute gateway
(Section 3.2) as a “web server,” and its measured IP addresses as
clients to this web server. We build an HCF table based on the
set of client IP addresses at each web server and evaluate the ﬁl-
tering accuracy under each aggregation method. We assume that
the attacker knows the client IP addresses of each web server and
generates packets by randomly selecting source IP addresses among
legitimate client IP addresses. We further assume that the attacker
knows the general hop-count distribution and uses it to generate the
hop-count for each spoofed packet. This is the DDoS attack that the
most knowledgeable attacker can launch without learning the exact
IP2HC mapping, i.e., the best scenario for the attacker.
We deﬁne the ﬁltering accuracy of an HCF table to be the per-
centages of false positives and false negatives. False positives are
those legitimate client IP addresses that are incorrectly identiﬁed as
spoofed. False negatives are spoofed packets that go undetected by
HCF. Both should be minimized in order to achieve maximum ﬁl-
tering accuracy. We compute the percentage of false positives as the
number of client IP addresses identiﬁed as spoofed divided by the
total number of client IP addresses. We compute the percentage of
false negatives according to the calculation in Section 4.2.
5.1.1 Aggregation into 24-bit Address Preﬁxes
For each web server, we build an HCF table by grouping its IP ad-
dresses according to the ﬁrst 24 bits. We use the minimum hop-count
of all IP addresses inside a 24-bit network address as the hop-count
of the network. After the table is constructed, each IP address is con-
verted into a 24-bit address preﬁx, and the actual hop-count of the
IP address is compared to the one stored in the aggregate HCF table.
Since 24-bit aggregation does not preserve the correct hop-counts
for all IP addresses, we examine the performance of three types of
ﬁlters: “Strict Filtering,” “+1 Filtering,” and “+2 Filtering.” “Strict
Filtering” drops packets whose hop-counts do not match those stored
in the table. “+1 Filtering” drops packets whose hop-counts differ
by greater than 1 compared to those in the table, and “+2 Filtering”
drops packets whose hop-counts differ by greater than two.
We have shown in Section 4.2 that percentage of false negatives
is determined by the distribution of hop-counts. Aggregation of IP
e
g
a
t
n
e
c
r
e
P
e
v
i
t
i
s
o
P
e
s
a
F
l
25
20
15
10
5
0
5
32-bit Strict Filtering
24-bit Strict Filtering
24-bit +1 Filtering
24-bit +2 Filtering
24-bit Clustering Strict Filtering
10
15
20
25
30
False Negative Percentage
Figure 9: Accuracies of various ﬁlters. (Note that the points of
24-bit clustering ﬁltering overlap with those of 32-bit ﬁltering.)
addresses into 24-bit network addresses does not change the hop-
count distribution signiﬁcantly. Thus, the 24-bit strict ﬁltering yields
a similar percentage of false negatives for each web server to the case
of storing individual IP addresses (32-bit Strict Filtering in the ﬁg-
ure). On the other hand, percentage of false positives is signiﬁcantly
higher in the case of aggregation as expected. Figure 9 presents the
combined false positive and false negative results for the three ﬁlter-
ing schemes. The x-axis is the percentage of false negatives, and the
y-axis is the percentage of false positives. Each point in the ﬁgure
represents the pair of percentages for a single web server. For ex-
ample, under “24-bit Strict Filtering,” most web servers suffer about
10% of false positives, while only 5% of false negatives. As we relax
the ﬁltering criterion, false positives are halved while false negatives
approximately doubled. Clearly, tolerating packets with mismatch-
ing hop-counts requires to make a trade-off between percentage of
false positives and that of false negatives. Overall, +1 Filtering of-
fers a reasonable compromise between false negatives and false pos-
itives. Considering the impact of DDoS attacks without HCF, a small
percentage of false positives may be an acceptable price to pay.
In practice, 24-bit aggregation is straightforward to implement and
can offer fast lookup with an efﬁcient implementation. Assuming
a one-byte entry per network preﬁx for hop-count, the storage re-
quirement is 224 bytes or 16 MB. The memory requirement is mod-
est compared to contemporary servers which are typically equipped
with multi-gigabytes of memory. Under this setup, the lookup oper-
ation consists of computing a 24-bit address preﬁx from the source
IP address in each packet and indexing it into the HCF table to ﬁnd
the right hop-count value. For systems with limited memory, the ag-
gregation table can be implemented as a much smaller hash-table.
While 24-bit aggregation may not be the most accurate, at present it
is a good and deployable solution.
5.1.2 Aggregation with Hop-Count Clustering
Under 24-bit aggregation, the percentage of false negatives is still
high (≈15%) if false positives are to be kept reasonably small. Based
on hop-count, one can further divide IP addresses within each 24-bit
preﬁx into smaller clusters. By building a binary aggregation tree it-
eratively from individual IP addresses, we cluster IP addresses with
same hop-count together. The leaves of the tree represent the 256
(254 to be precise) possible IP addresses inside a 24-bit address pre-
ﬁx. In each iteration, we examine two sibling nodes and determine
whether we can aggregate IP addresses behind these two nodes. We
24/29  20
0/27
32/27
64/27
0/26
64/26
0/25
0/24
96/27
60/30  20
128/27
64/26  20
128/26
160/27
128/25
192/27
128/25 20
192/26
224/27
16  21
17  20
26  20
56  20
57  21
58  20
59  21
62  20
79  20
105 20
111 20
128 20
200 20
218 20
227 20
240 20
245 20
Figure 10: An example of hop-count clustering.
will aggregate the two nodes as long as they share a common hop-
count, or one of them is empty. If aggregate is possible, the parent
node will have the same hop-count as the children. We can thus ﬁnd
the largest possible aggregation for a given set of IP addresses. Fig-
ure 10 shows an example of clustering a set of IP addresses (with
the last octets shown) by their hop-counts using the aggregation tree
(showing the ﬁrst four levels). For example, the IP address range,
128 to 245, is aggregated into a 128/25 preﬁx with a hop-count of
20, and the three IP addresses, 79, 105, and 111 are aggregated into a
64/26 preﬁx with a hop-count of 20. However, we cannot aggregate
these two blocks further up the tree due to holes in the address space.
We are able to aggregate 11 of 17 IP addresses into four network