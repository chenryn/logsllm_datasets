tion and the instruction accesses memory regions represented by a
parameter-tree node, a data-dependence edge should be added be-
tween the instruction’s node and the parameter-tree node. Similarly,
nodes in an actual parameter tree at a function call site conceptually
represent potential reads/writes in the callee function; therefore,
data-dependence edges are also added between corresponding in-
struction nodes and nodes in actual parameter trees.
Computing inter-procedural dependence. With parameter trees,
inter-procedural dependence representation becomes trivial. For
each function call site, we just connect nodes in the actual parame-
ter trees to the corresponding formal parameter trees of the callee
function, using bidirectional flow edges.
We note that library function calls (e.g., calls to scanf, printf,
exit...) are represented as regular instruction nodes with depen-
dence edges added according to the library functions’ semantics.
Alternatively, we could treat library functions as ordinary functions
and represent them using PDGs based on their source code, but it
would substantially increase the PDG size.
4.4 PDG-Based Program Partitioning
PtrSplit’s partitioning algorithm takes the PDG of a program and
separates it into a sensitive partition with access to sensitive data
6
Session K3:  Program AnalysisCCS’17, October 30-November 3, 2017, Dallas, TX, USA2364set of sensitive functions and any global variable whose parameter-
tree representation contains sensitive nodes is put into the set of
sensitive global variables.
For the example PDG in Fig. 3, the node with label “*key:char”
is marked sensitive. As a result, the encrypt function is sensi-
tive because it has a node with an incoming data-dependence
edge from “*key:char”. Similarly, initkey is marked sensitive
(its PDG is not shown in Fig. 3). Then node “*ciphertext:char”
is marked sensitive because of an incoming data-dependence edge.
Consequently, main is marked sensitive (because of an edge from
“*ciphertext:char” to a node in main, not shown in Fig. 3). In
contrast, if node “*ciphertext:char” were marked declassified,
then main would not be marked sensitive.
5 SELECTIVE POINTER BOUNDS TRACKING
As discussed before, a core challenge in partitioning C/C++ pro-
grams is that pointers do not carry the bounds of the underlying
buffers, making marshalling/unmarshalling of pointer data a man-
ual and error-prone process. Bounds information is also critical for
another security application: spatial memory safety. There have
been many systems (e.g., [8, 9, 24, 25]) that track bounds informa-
tion as metadata on buffers or pointers and insert checks before
pointer operations to prevent out-of-bound buffer access. However,
systems that enforce spatial memory safety incur high performance
overhead; e.g., SoftBound’s performance overhead on the SPEC and
Olden benchmarks is 67% on average.
For marshalling and unmarshalling it is necessary to perform
only bounds tracking, but not bounds checking. That is, it is suffi-
cient to track the bounds of pointers without performing bounds
checking on pointer accesses; even if the insensitive partition had
an out-of-bound pointer, it would not be able to access the sensitive
data through the pointer as it is in a separate process. We further
observe that it is necessary to track the bounds of pointers that can
cross the boundary of partitions, but not the bounds of all point-
ers. Therefore, by performing only bounds tracking for a subset
of pointers, the performance overhead should be lower than those
systems that enforce spatial memory safety.
Based on this observation, we have designed a Selective Pointer
Bounds Tracking (SPBT) system, which (1) computes a set of Bounds-
Required (BR) pointers given a partitioning of the program, and (2)
instruments the program to track the bounds of those BR pointers.
Computing the set of bounds-required pointers. The algorithm
for computing the set of BR pointers is presented in Algorithm 2. It
operates on a PDG and takes as input a partitioning of the program,
in the form of two sets of functions F0 and F1, one for each partition.
The BR set is initialized with the set of pointers that are sent across
from one partition to the other partition; obviously, bounds infor-
mation are required for automatic marshalling and unmarshalling
of these pointers.
With a backward propagation process along the data-dependence
edges in the PDG, the algorithm further computes the set of pointers
whose values can flow transitively to the initial BR set. Such pointers
also need bounds information because, when a pointer p1’s value
flows to p2, the bounds of p2 is set according to the bounds of
p1; therefore, if p2 is sent over the partition boundary afterwards,
p1’s bounds need to be tracked as well. As an example, suppose
Algorithm 2 Compute a set of BR pointers
Input: G is the PDG for a program; F0 and F1 are two disjoint sets
of functions that cover the program
Output: P is the set of bounds-required pointers
BR ← ∅
for function f ∈ F0 ∪ F1 and call C ∈ f do
if (f ∈ Fi and C’s callees ∩ F1−i (cid:44) ∅) then
for node n in C’s parameter trees do
if n’s label is (id : t∗) then
BR ← BR ∪ {(n, id)}
worklist ← BR
while worklist is not empty do
(n, id) ← worklist.pop()
for data-dependence edge n′ → n with label id1 do
if alias(id, id1) then
for all pointer-typed id′ in n′ do
if (n′, id′) (cid:60) BR then
BR ← BR ∪ {(n′, id′)}
worklist ← worklist ∪ {(n′, id′)}
P ← {id | (n, id) ∈ BR}
p1 is the result of a memory allocation and its value flows to p2,
which is sent over the boundary; it is then necessary to create the
bounds information for p1 at the site of memory allocation and
then propagate the information from p1 to p2.
The algorithm tracks a set of pairs of nodes and identifiers in the
sensitive set, instead of a set of nodes. This improves the precision
of the algorithm. To illustrate, suppose the PDG has a node n for
instruction “p1 = p2 +i”, where p1 is a BR pointer and i is an integer.
The algorithm then puts (n, p2) into the BR set and performs further
processing along n’s incoming data-dependence edges; during this
processing, all edges with label i can be ignored. Such distinction
could not be made if the algorithm used a set of nodes in the BR
set.
SPBT instrumentation. PtrSplit’s SPBT instrumentation is based
on SoftBound [24], an LLVM-based code transformation for enforc-
ing spatial memory safety (another version also enforces temporal
memory safety). For each pointer, SoftBound keeps its base and
bound. Metadata is created for pointers at allocation sites. Meta-
data is propagated along with the propagation of pointer values,
for example, when pointers are passed during function calls. Fi-
nally, before load/store instructions, metadata is used to check for
memory-safety violations.
Our SPBT instrumentation removes memory-safety checking
before load/store instructions. Furthermore, at an allocation site, if
the returned pointer is not in the set of BR pointers (as computed
by Algorithm 2), SPBT removes instrumentation that records the
pointer’s base and bound metadata. Similarly, when pointer values
are propagated, if the involved pointers are not in the set of BR
pointers, the instrumentation that propagates metadata is removed.
7
Session K3:  Program AnalysisCCS’17, October 30-November 3, 2017, Dallas, TX, USA23656 TYPE BASED MARSHALLING AND
UNMARSHALLING
Since partitions are loaded into separate processes, some function
calls are turned into Remote Procedure Calls (RPCs). During an RPC,
arguments from the caller are marshalled into a data buffer and sent
to the callee, which unmarshalls the data buffer and recreates the
values for the parameters in the callee process. Data marshalling is
straightforward for values of most data types, including integers,
arrays of fixed sizes, and structs.
However, pointer types cause many troubles. First, C pointers do
not carry bounds information; so marshalling does not know the
sizes of underlying buffers and cannot marshall the buffers as a re-
sult. Second, it is possible to create recursive data structures such as
linked lists and arbitrary aliases when using pointers, which makes
marshalling/unmarshalling difficult. For instance, if the caller sends
a pointer that points to a circular linked list, after marshalling and
unmarshalling, a linked list with the same circularity and aliasing
should be recreated in the callee process.
Previous program-partitioning frameworks [5, 32] avoid the
pointer issue by asking programmers to write manual marshalling
and unmarshalling code when pointer data are involved. General
Interface Description Languages (IDLs) also do not provide a satis-
factory solution. For instance, the Microsoft COM IDL [4] requires
manual annotation about the size of a variable-sized array and also
annotation about aliasing when multiple pointers are involved. The
popular SWIG IDL [2] adopts the approach of opaque pointers: point-
ers are wrapped as opaque objects and are sent over the boundary
without copying the underlying buffers; whenever the callee do-
main needs to perform operations on those pointers, the control is
transferred back to the caller domain for the actual operations. The
opaque-pointer approach avoids the pointer issue, but it may lead to
frequent domain crossings; further, it may cause a security problem
if an untrusted partition can spoof opaque pointers to read arbi-
trary memory; some solution for opaque pointer integrity would be
needed. Finally, popular RPC libraries (e.g., Google’s gRPC [12] and
Oracle’s TI-RPC [27]) also do not provide good support for pointers
and require manual intervention.
Thanks to SPBT, all pointers that cross the partition boundary
in our system are equipped with bounds information, making it
possible to automatically marshall/unmarshall even pointer data.
Therefore, we propose the approach of type-based deep copy of
pointer data: a pointer value is marshalled along with the buffer
the pointer points to; if the buffer itself contains pointers, those
pointers are marshalled recursively; the callee process unmarshalls
the received data to recreate the pointer and the buffer, also in a
recursive way; furthermore, as we will discuss, our approach takes
care of circularity and aliasing in data.
Before proceeding, there are several points worth mentioning.
First, the deep-copying approach is type directed and relies on types
to identify pointers within data to be marshalled; consequently, if
an application performs a type cast on some data and the result type
hides pointers, some necessary data may not be deep copied. More
discussion about this (especially on void pointers) is in Section 8.
Another concern about deep copying is its efficiency, when a
large amount of data needs to be marshalled during deep copying.
However, our main focus in this paper is to enable any partition-
ing of an application, even if the partitioning creates the situation
of sending pointer data across the partitioning boundary. A good
partitioning algorithm would take efficiency of deep copying into
account when choosing among multiple partition choices and bal-
ance between efficiency and security; this will be an interesting
research direction.
We also mention that the deep copying approach is not the only
design choice. An alternative would be the opaque-pointer approach
we discussed before; however, it would create very frequent domain
crossings, which we would like to avoid. Another approach is to
set up a shared memory region between the two partitions for
communication; this could potentially eliminate some data copying.
However, this assumes a custom memory allocator or some level of
programmer cooperation so that relevant data is put into the shared
memory. For instance, if a linked list is sent across the boundary, all
nodes in the linked list have to be allocated in the shared memory.
This is a nontrivial assumption and requires either programmers to
transform their code or at least the support of automatic program
transformation.
6.1 Algorithm for Deep Copying
We next present a formal algorithm for type-based marshalling/un-
marshalling that performs deep copying of pointer data. We will
use the same set of types in Fig. 4 when presenting the algorithm.
In addition, the syntax for values is as follows:
Value v := n | struct {id1 = v1, . . . , idn = vn} | p(b,e)
A value can be an integer n, a struct value with field values inside,
or a pointer value of the form p(b,e). After SPBT, all pointers that
cross the boundary have bounds information in the form of (b, e),
where b is the beginning of the underlying buffer, e is the end of
the buffer, and the buffer size is e − b. A null pointer is encoded as
0(0,0) (that is, it points to an empty buffer).
Type-based marshalling. Fig. 7 presents a recursive algorithm
for encoding a value v of type t into a list of bytes. In the figure,
we use [ ] for an empty list, and l1 + l2 for the concatenation of two
lists. The algorithm assumes a list of utility functions, which are
explained in the caption.
The case when t = int is simple; just encode the type and the
integer. For a struct type, all field values and their types are encoded.
For a named type tn, the value is encoded according to the type
definition for tn as defined in the type map TM.
The case for a pointer type is challenging since the algorithm
has to deal with circularity caused by pointers. For that, the en-
code function also takes a parameter B, which remembers a list of
buffers (in the form of (b, e)) that have already been encoded; when
encoding a pointer that points to an already encoded buffer, there
is no need to encode the buffer again. If the buffer has not been
encoded, (b, e) is added to B and every element in the buffer is then
encoded recursively (with the help of function enc_bufB(b, e, t)).
A marshalling example. As an example, assume we need to
marshall a circular linked list of two nodes, shown in Fig. 8. Each
node is of type Node with two fields, one is type int and one Node∗;
each field is assumed to occupy four bytes. To marshall this data
8
Session K3:  Program AnalysisCCS’17, October 30-November 3, 2017, Dallas, TX, USA2366enc_typ(t) + enc_int(n)
enc_typ(t) + l1 + . . . + ln
encodeB(v, t) =
enc_bufB(b, e, t) =
enc_typ(t) + encodeB(v, TM(tn))
enc_typ(t) + enc_ptr(p(b,e)) + lbuf
(cid:26) [ ]
(cid:26) encodeB(v, t) + enc_bufB(b + size(t), e, t)
[ ]
if t = int and v = n
if t = struct {id1 : t1, . . . , idn : tn}
and v = struct {id1 = v1, . . . , idn = vn}
and li = encodeB(vi , ti) for i ∈ [1..n]
if t = tn
if t = t1 ∗ and v = p(b,e)
lbuf =
if (b, e) ∈ B
otherwise
enc_bufB∪{(b,e)}(b, e, t1)
if b + size(t) ≤ e and v = read_mem(b, t)
otherwise
Figure 7: Type-based marshalling. In the algorithm, we assume a set of basic utility functions: enc_typ(t) for encoding a type
into a list of bytes; enc_int(n) for encoding an integer; enc_ptr(p(b,e)) for encoding a pointer; size(t) for the size of values in type
t; read_mem(b, t) for reading a value of type t from memory at address b.
Figure 8: A two-node circular linked list.
structure, we make the following call:
encode∅(p1(p1,p1+8), Node∗)
This call encodes the p1 pointer as well as the buffer it points to;
the buffer contains the first node (viewed as an array of one node).
When encoding the buffer, because of the pointer inside the first
node, the encoder is recursively invoked as follows:
encode{(p1,p1+8)}(p2(p2,p2+8), Node∗)
This call encodes the p2 pointer and the second node. Since the sec-
ond node contains another pointer, the following call is triggered:
encode{(p1,p1+8),(p2,p2+8)}(p1(p1,p1+8), Node∗)
At this point, however, only the pointer is encoded, not the under-
lying buffer since it has already been encoded.
Typed-based unmarshalling. Fig. 9 presents the algorithm for
type-based unmarshalling. The decode function takes a list of bytes
and returns a value, a type, and the remaining list of bytes that
have not been decoded. The cases for integer types, struct types,
and named types are straightforward.
For a pointer type, the algorithm needs to remember the map
between buffers in the sender partition and buffers in the receiver
partition. This is why the decode function has an additional param-
eter M for remembering the map. There are two cases, for pointer
p(b,e) that is sent, if (b, e) is not recorded in M, then the receiver
has not allocated an corresponding buffer yet; in this case, a new
buffer is allocated and initialized by the dec_buf function. If (b, e)
has been recorded in M, then the corresponding buffer has already
been allocated and there is no need for reallocation. In both cases,
the returned pointer value uses the bounds information of the buffer
in the receiver and p is adjusted to be b′ + p − b to maintain the
offset between the pointer and the beginning of the buffer.
9