        }
    }
    // 应用程序页面启动。显示登录或注册的链接，
    // 并显示适当的主屏幕
    if (!strcmp (action, "begin")) {
        _show_home();
        exit-request
    // 开始创建新用户。询问电子邮件和密码，
    // 然后提交此表单时创建用户。
    } else if (!strcmp (action, "newuser")) {
        @Create New User
        @
        @
        @
        @
        @
        @
    // 验证用户发送到电子邮件的代码。代码必须匹配，从而验证电子邮件地址   
    } else if (!strcmp (action, "verify")) {
        input-param code
        input-param email
        // 获取基于电子邮件的验证令牌
        run-query @db_multitenant_SaaS = "select verify_token from users where email='%s'" output db_verify : email
            query-result db_verify to define db_verify
            // 将数据库中记录的令牌与用户提供的令牌进行比较
            if (!strcmp (code, db_verify)) {
                @Your email has been verifed. Please Login.
                // 如果匹配，更新用户信息以表明已验证。
                run-query @db_multitenant_SaaS no-loop = "update users set verified=1 where email='%s'" : email
                exit-request
            }
        end-query
        @Could not verify the code. Please try again.
        exit-request
    // 创建用户 —— 当用户使用电子邮件和密码提交表单以创建用户时运行    
    } else if (!strcmp (action, "createuser")) {
        input-param email
        input-param pwd
        // 创建散列（单向）密码
        hash-string pwd to define hashed_pwd
        // 生成随机的 5 位数字字符串验证代码
        random-string to define verify length 5 number
        // 创建用户：插入电子邮件、哈希密码、验证令牌。当前验证状态为 0，或未验证
        begin-transaction @db_multitenant_SaaS
        run-query @db_multitenant_SaaS no-loop = "insert into users (email, hashed_pwd, verified, verify_token, session) values ('%s', '%s', '0', '%s', '')" : email, hashed_pwd, verify affected-rows define arows error define err on-error-continue
        if (strcmp (err, "0") || arows != 1) {
            // 如果不能添加用户，则可能该用户不存在。不管怎样，我们都无法继续。
            login_or_signup();
            @User with this email already exists.
            rollback-transaction @db_multitenant_SaaS
        } else {
            // 创建带有验证码的电子邮件并将其发送给用户
            write-string define msg
                @From: PI:EMAIL
                @To: >
                @Subject: verify your account
                @
                @Your verification code is: >
            end-write-string
            exec-program "/usr/sbin/sendmail" args "-i", "-t" input msg status define st
            if (st != 0) {
                @Could not send email to >, code is >
                rollback-transaction @db_multitenant_SaaS
                exit-request
            }
            commit-transaction @db_multitenant_SaaS
            // 通知用户查看邮件并输入验证码
            @Please check your email and enter verification code here:
            @
            @
            @>">
            @
            @Verify
            @
        }
    // 这里在登录用户登出时运行    
    } else if (!strcmp (action, "logout")) {
        // 更新用户表以清除会话，即没有该用户登录
        if (rd->is_logged_in) {
            run-query @db_multitenant_SaaS = "update users set session='' where userId='%s'" : rd->sess_userId no-loop affected-rows define arows
            if (arows == 1) {
                rd->is_logged_in = false; // 提示用户未登录
                @You have been logged out.
            }
        }
        _show_home();
    // 登录：当用户输入用户名和密码时运行
    } else if (!strcmp (action, "login")) {
        input-param pwd
        input-param email
        // 创建单向散列，目的是与用户表进行比较 —— 密码**永远不会**被记录
        hash-string pwd to define hashed_pwd
        // 为会话 ID 创建一个随机的 30 位长的字符串
        random-string to rd->sess_id length 30
        // 检查用户名和哈希密码是否匹配
        run-query @db_multitenant_SaaS = "select userId from users where email='%s' and hashed_pwd='%s'" output sess_userId : email, hashed_pwd
            query-result sess_userId to rd->sess_userId
            // 如果匹配，使用会话 ID 更新用户表
            run-query @db_multitenant_SaaS no-loop = "update users set session='%s' where userId='%s'" : rd->sess_id, rd->sess_userId affected-rows define arows
            if (arows != 1) {
                @Could not create a session. Please try again. > 
                exit-request
            }
            // 设置“用户 ID”和“会话 ID”为 cookie。用户的浏览器将在每个请求中返回这些信息
            set-cookie "sess_userId" = rd->sess_userId
            set-cookie "sess_id" = rd->sess_id
            // 显示主页，确保会话是正确的，并设置标志
            _check_session();
            _show_home();
            exit-request
        end-query
        @Email or password are not correct. >
    // 登录界面，要求用户输入用户名和密码  
    } else if (!strcmp (action, "")) {
        login_or_signup();
        @Please Login:
        @
        @
        @
        @
        @Go
        @
    }
}
// 显示登录或注册链接
void login_or_signup() {
        @Login & & Sign Up
}
```
#### 通用应用程序（\_show\_home.vely）
借助本教程，你可以创建你想要的任何多租户 SaaS 应用程序。上面的多租户处理模块（`login.vely`）调用 `_show_home()` 函数，它可以容纳你的任何代码。这个示例代码展示了笔记应用程序，但它可以是任何内容。`_show_home()` 函数可以调用你想要的任何代码，它是一个通用的多租户应用程序插件：
```
#include "vely.h"
void _show_home() {
    notes();
    exit-request
}
```
#### 笔记应用程序（notes.vely）
该应用程序能够添加、列举以及删除任何给定的笔记：
```
#include "vely.h"
#include "login.h"
// 多租户云中的笔记应用程序
void notes () {
    // 获取全局请求数据
    reqdata *rd;
    get-req data to rd
    // 如果会话有效，显示登录或注册
    if (!rd->is_logged_in) {
        login_or_signup();
    }
    // 问候用户
    @Welcome to Notes!
    // 如果没有登出，退出 —— 这里确保对用户身份的安全验证
    if (!rd->is_logged_in) {
        exit-request
    }
    // 获取 URL 参数，告诉笔记要做什么
    input-param subreq
    // 显示笔记能够做什么操作（添加或列举笔记）
    @Add Note List Notes
    // 列举该用户的所有笔记
    if (!strcmp (subreq, "list")) {
        // **只**选取该用户的笔记
        run-query @db_multitenant_SaaS = "select dateOf, note, noteId from notes where userId='%s' order by dateOf desc" : rd->sess_userId output dateOf, note, noteId
            query-result dateOf to define dateOf
            query-result note to define note
            query-result noteId to define noteId
            // 使用快速缓存正则表达式将新行更改为
            match-regex "\n" in note replace-with "\n" result define with_breaks status define st cache
            if (st == 0) with_breaks = note; // 什么都没有发现/替换，只用原来的
            // 显示笔记
            @Date: > (delete note)
            @Note: >
            @
        end-query
    }
    // 要求删除笔记
    else if (!strcmp (subreq, "delete_note_ask")) {
        input-param note_id
        @Are you sure you want to delete a note? Use Back button to go back, or delete note now.
    }
    // 删除笔记
    else if (!strcmp (subreq, "delete_note")) {
        input-param note_id
        // 删除笔记
        run-query @db_multitenant_SaaS = "delete from notes where noteId='%s' and userId='%s'" : note_id, rd->sess_userId affected-rows define arows no-loop error define errnote
        // 告知用户状态
        if (arows == 1) {
            @Note deleted
        } else {
            @Could not delete note (>)
        }
    }
    // 添加笔记
    else if (!strcmp (subreq, "add_note")) {
        // 从 note 表单中获取 URL POST 数据
        input-param note
        // 在该用户的 ID 下插入笔记
        run-query @db_multitenant_SaaS = "insert into notes (dateOf, userId, note) values (now(), '%s', '%s')" : rd->sess_userId, note affected-rows define arows no-loop error define errnote
        // 告知用户状态
        if (arows == 1) {
            @Note added
        } else {
            @Could not add note (>)
        }
    }
    // 显示一个 HTML 表单来收集笔记，并将其发送回这里（使用 subreq="add_note" URL 参数）
    else if (!strcmp (subreq, "add")) {
        @Add New Note
        @
        @
        @
        @Create
        @
    }
}
```
### 具有 C 性能的 SaaS
Vely 语言使得 C 语言在你的网络应用程序中得到充分利用这件事成为可能。多租户 SaaS 应用程序便是从中受益的一个典型用例。
看一看参考代码示例，写一写代码，然后试试 Vely。
*（题图：DA/126624c8-1a47-481b-b149-92273e8e0f4f）*
---
via: 
作者：[Sergio Mijatovic](https://opensource.com/users/vely) 选题：[lkxed](https://github.com/lkxed) 译者：[Drwhooooo](https://github.com/Drwhooooo) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出