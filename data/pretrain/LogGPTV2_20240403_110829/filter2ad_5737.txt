# POSTER: A Framework for Phylogenetic Analysis in Mobile Environment

## Authors
- Fabio Martinelli, IIT-CNR, Pisa, Italy
- Francesco Mercaldo, IIT-CNR, Pisa, Italy
- Andrea Saracino, IIT-CNR, Pisa, Italy

## Abstract
To maximize the probability of successful attacks and reduce the likelihood of detection, malware developers create different versions of the same malicious payloads. Malware writers often generate new malicious code by modifying existing ones, introducing minor variations or applying obfuscation techniques that alter the code structure without changing its malicious functionality. Phylogenetic analysis is becoming increasingly important for malware analysts to understand the derivation of a malicious payload, allowing them to trace a derived piece of code back to its original, known originator. This poster describes a framework designed to infer and shape the phylogenetic tree of mobile malicious applications. The framework uses multi-level features with a rule-based machine learning algorithm to identify the antecedents and descendants of malicious samples.

## CCS Concepts
- Security and privacy → Malware and its mitigation; Mobile platform security

## Keywords
malware, phylogenesis, lineage, triage, security, Android

## ACM Reference Format
Fabio Martinelli, Francesco Mercaldo, and Andrea Saracino. 2018. POSTER: A Framework for Phylogenetic Analysis in Mobile Environment. In ASIA CCS '18: 2018 ACM Asia Conference on Computer and Communications Security, June 4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3196494.3201588

## 1 Introduction and Background
In recent years, the Android platform has increasingly been targeted by malicious payloads embedded within legitimate applications. These trojanized apps aim to leak private data or steal user money, either directly or indirectly. Currently, there are over one million malicious samples in circulation, with an exponential increase over the last five years. However, many of these new malware samples are not entirely novel but are instead derivations of pre-existing ones. Malware, like any software, evolves, and malware writers modify existing code in ways typical of the software engineering industry and open-source environments. They add new features to existing malware, generating multiple configurations of the same initial malware, with the goal of executing on different platforms or merging components from different malicious programs.

Phylogenetic analysis involves studying the similarities and differences in program structure to find relationships within groups of software, providing insights into new malware variants. Variant identification localizes malware samples that introduce an evolution relative to an existing malware. Identifying malware lineage and phylogeny can help in promptly addressing zero-day malware programs, which may be evolved versions of known malware. The main limitation of existing methods is that they extract features at a single level of program abstraction, making it possible for malware writers to evade detection by adopting obfuscation techniques at that specific level. Research has primarily focused on mobile malware detection and improving mobile security models, while phylogenetic analysis remains underexplored.

In this paper, we introduce a three-level framework capable of performing phylogenetic analysis using three different levels of program abstraction: (i) metadata, (ii) source, and (iii) runtime. Metadata and source analysis are performed statically, while runtime analysis requires the app to be executed in a controlled environment.

## 2 The Framework
### 2.1 Metadata
Android apps must request permissions to access sensitive user data and certain system resources. The list of required permissions is stored in the Manifest, an XML file in the root of the APK. We consider permission-related features as nominal: if a permission is invoked, the feature value is 1; otherwise, it is 0. Table 1 shows the considered permissions.

| Permission | Description |
|------------|-------------|
| CALL_PHONE | Allows an application to initiate a phone call. |
| READ_CALENDAR | Allows an application to read the user’s calendar data. |
| WRITE_CALENDAR | Allows an application to write the user’s calendar data. |
| CAMERA | Access the camera device. |
| READ_CONTACTS | Allows an application to read the user’s contacts data. |
| WRITE_CONTACTS | Allows an application to write the user’s contacts data. |
| GET_ACCOUNTS | Allows access to the list of accounts in the Accounts Service. |
| ACCESS_FINE_LOCATION | Allows an app to access precise location. |
| ACCESS_COARSE_LOCATION | Allows an app to access approximate location. |
| RECORD_AUDIO | Allows an application to record audio. |
| READ_PHONE_STATE | Allows read-only access to phone state, including the phone number of the device, current cellular network information, and the status of any ongoing calls. |

In addition to permissions, we consider the number of application downloads, the app rating, and the developer reputation (if available).

### 2.2 Source
To gather opcodes, we extract smali classes from the application under analysis. We use apktool to extract the .dex file, which is the compiled application file, and then disassemble it with the smali tool to obtain smali classes containing machine-level instructions. From these files, we compute the frequency of opcode 2-grams, which have been shown to be highly discriminative in distinguishing between legitimate and trusted applications.

Let \( O \) be the set of possible opcodes, and let \( O = \{O_1, O_2, \ldots, O_n\} \) be the set of n-grams (sequences of opcodes whose length is up to \( n \), with \( n = 2 \)). We denote \( f(a, o) \) as the frequency of the n-gram \( o \in O \) in the application \( a \). The feature vector \( \vec{f}(a) \in [0, 1]^{|O|} \) corresponding to \( a \) is given by \( \vec{f}(a) = (f(a, o_1), f(a, o_2), \ldots) \) with \( o_i \in O \).

### 2.3 Runtime
The dynamic analysis considers both global features (related to the device and operating system) and local features (specifically monitored apps). The Global Monitor monitors device and OS features at three levels: kernel (SysCall Monitor), user (User Activity Monitor), and application (Message Monitor). These features are monitored regardless of the specific app or system component generating them and are used to characterize the current behavior of the device. The Classifier component classifies these behaviors as genuine or malicious. The Per-App Monitor implements known behavioral patterns to monitor the actions of suspicious apps using a Signature-Based Detector. The User Interface & Prevention component includes a Prevention module that stops malicious actions and handles the removal of malicious apps through the User Interface (UI). The UI provides notifications to the user, including the evaluation of the risk score of newly downloaded apps, reporting of malicious apps, and asking the user whether to remove them.

### 2.4 Phylogenetic Analysis
To obtain the three-level feature vector, we use the BRIDEMAID platform, which extracts features at the metadata, static, and dynamic levels to identify Android malware classes with high accuracy. The phylogenetic analysis relies on rule-based machine learning algorithms. For each level of features, the framework generates a set of rules. The format of the rules is: IF (the sample under analysis exhibits a set of values for the features as described by the rule) THEN (the sample belongs to a specified class described by the rule).

For example, if a sample exhibits TRUE values for all rules belonging to the X family and only two rules belonging to the Y family, we can conclude that most of the code belongs to the X family but also contains behavior from the Y family. By correlating the date of the last build, we can confirm that the sample belongs to the X family for most of the code but also represents an evolution from the X family to the Y family.

## 3 Conclusion and Future Work
In this paper, we propose a framework to track the phylogenetic tree of Android malicious applications. It leverages three-level features obtained with the BRIDEMAID framework and rule-based machine learning algorithms. As future work, we plan to perform an extended characterization of malicious families through the rules gathered by the involved machine learning algorithms.

## Acknowledgment
This work was partially supported by the H2020 EU funded projects NeCS [GA #675320] and C3ISP [GA #700294].

## References
[1] Canfora, G., De Lorenzo, A., Medvet, E., Mercaldo, F., & Visaggio, C. A. (2015). Effectiveness of opcode n-grams for detection of multi-family Android malware. In Availability, Reliability and Security (ARES), 2015 10th International Conference on. IEEE, 333–340.
[2] Castrucci, A., Martinelli, F., Mori, P., & Roperti, F. (2008). Enhancing Java ME security support with resource usage monitoring. In International Conference on Information and Communications Security. Springer, 256–266.
[3] Cimitile, A., Martinelli, F., Mercaldo, F., Nardone, V., Santone, A., & Vaglini, G. (2017). Model checking for mobile Android malware evolution. In Formal Methods in Software Engineering (FormaliSE), 2017 IEEE/ACM 5th International FME Workshop on. IEEE, 24–30.
[4] Dragoni, N., Martinelli, F., Massacci, F., Mori, P., Schaefer, C., Walter, T., & Vetillard, E. (2008). Security-by-contract (SxC) for software and services of mobile systems. In SecPerU 2007. MIT Press, 49–54.
[5] Ferrante, A., Malek, M., Martinelli, F., Mercaldo, F., & Milosevic, J. (2017). Extinguishing ransomware—a hybrid approach to Android ransomware detection. In The 10th International Symposium on Foundations Practice of Security.
[6] Martinelli, F., Mercaldo, F., & Saracino, A. (2017). BRIDEMAID: An hybrid tool for accurate detection of Android malware. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security. ACM, 899–901.
[7] Martinelli, F., Mercaldo, F., Saracino, A., & Visaggio, C. A. (2016). I find your behavior disturbing: Static and dynamic app behavioral analysis for detection of Android malware. In Privacy, Security and Trust (PST), 2016 14th Annual Conference on. IEEE, 129–136.
[8] Zhou, Y., & Jiang, X. (2012). Dissecting Android malware: Characterization and evolution. In Security and Privacy (SP), 2012 IEEE Symposium on. IEEE, 95–109.