0
---
## Page 609
func updateMatrixDP(matrix [][]int) [][]int {
//解法三 DP
(matrix[row][col] = len(matrix) ll col = len(matrix[o]) ll 
／／不超过棋盘氛围，且va］要比matrix［row］［col］小
return matrix
for i := len(matrix) 
for i, row := range matrix {
dfsMatrix(matrix, row, col+l, matrix[row] [col]+1)
dfsMatrix(matrix, row+l, col, matrix[row] [col]+l)
dfsMatrix(matrix, row-1, col, matrix[row] [col]+1)
if val > 0 { 
for j := len(matrix[o]) - 1; j >= O; j-- 
 matrix[row][col] = val
for j, val := range row {
 return
matrix[i][j] = min(matrix[i][j], min(bottom, right)) 
if jo{
ifi>{ 
if val == 0 {
right, bottom := math.MaxIntl6, math.MaxInt16
left, top := math.MaxInt16, math.MaxInt16 
 right = matrix[i][j+l] + 1
 bottom = matrix[i+l][j] + 1
 continue
left = matrix[i][j-1] + 1 
 top = matrix[i-1][j] + 1 
continue
- l; i >= 0; i-- {
---
## Page 610
友，B是C的朋友，那么我们可以认为 A也是C的朋友。所谓的朋友圈，是指所有朋友的集合。
班上有N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是B 的朋
题目大意
Note:
Example 2: 
Example 1: 
have to output the total number of friend circles among all the students.
[j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you
indirect friends.
transitive in nature. For example, if A is a direct friend of B, and B is a directfriend of C, then A is 
There are N students in a class. Some of them are friends, while some are not. Their friendship is
题目
547. Friend Circles
 3. If M[ijj] = 1, then Mj]li] = 1. 
2. M[ij]li] = 1 for all students.
1. N is in range [1,200]. 
friend circle, so return 1.
so the Oth and 2nd students
students are direct friends,
Explanation:The Oth and 1st students are direct friends, the 1st and 2nd
Output: 1
[[1,1,0],
Input:
The 2nd student himself is in a friend circle. So return 2.
Explanation:The Oth and 1st students are direct friends, so they are in a 
[0,1,1]]
friend circle.
Output: 2
[[1,1,0],
[1,1,1],
[0,0,1]]
[1,1,0],
Input:
s are indirect friends. All of them are in the same
---
## Page 611
代码
解题思路
注意：
学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。
给定一个 N＊N 的矩阵 M，表示班级中学生之间的朋友关系。如果 M[i]j]=1，表示已知第i 个和j 个
func findcircleNum(M [][]int) int {
//解法一并查集
·给出一个二维矩阵，
func findCircleNuml(M [][]int) int {
//解法二FloodFillDFS暴力解法
import （
package leetcode
"github.com/halfrost/LeetCode-Go/template"
如果有 M[i]j] =1，则有 Mji] =1。
N 在[1,200]的范围内。
return uf.Totalcount()
for i := O; i  O { 
array[i]--
flag = !flag
if flag { 
 sum = sum + i - 10000
---
## Page 615
代码
解题思路
注意：
树结点之和的差的绝对值。空结点的的坡度是0。整个树的坡度就是其所有节点的坡度之和。
给定一个二叉树，计算整个树的坡度。
题目大意
Note:
Example:
The tilt of the whole tree is defined as the sum of all nodes' tilt.
 node values and the sum of all right subtree node values. Null node has tilt 0.
The tilt of a tree node is defined as the absolute difference between the sum of all left subtree 
Given a binary tree, return the tilt of the whole tree.
题目
package leetcode
·给出一棵树，计算每个节点的"倾斜度"累加和。“倾斜度"的定义是：左子树和右子树的节点值差值
2．坡度的值不会超过32位整数的范围。
1．任何子树的结点的和不会超过32位整数的范围。
1. The sum of node values in any subtree won't exceed the range of 32-bit integer.
Tilt of binary tree : 0 + 0 + 1 = 1
Tilt of node 1 : |2-3l = 1 
Tilt of node 3
Tilt of node 2
Explanation:
Output: 1 
Input:
节点值和右节点值的差值。这一点明白以后，这一题就是简单题了。
的绝对值。
的是左子树所有节点的值总和，和，右子树所有节点的值总和的差值。并不是只针对一个节点的左
这一题虽然是简单题，但是如果对题目中的"倾斜度"理解的不对，这一题就会出错。“倾斜度"计算
2
3
:0
0
一个树的节点的坡度定义即为，该节点左子树的结点之和和右子
---
## Page 616
Example 1: 
matrix; Otherwise, output the original matrix.
If the 'reshape' operation with given parameters is possible and legal, output the new reshaped 
row-traversing order as they were.
The reshaped matrix need to be filled with allthe elements of the original matrix in the same
crepresenting the row number and column number of the wanted reshaped matrix,
You're given a matrix represented by a two-dimensional array, and two positive integers r and 
one with different size but keep its original data.
In MATLAB, there is a very useful function called 'reshape, which can reshape a matrix into a new
题目
566. Reshape the Matrix
respectively.
func findTiltDFS(root *TreeNode, sum *int) int {
func findTilt(root *TreeNode) int 
import "math"
*sum += int(math.Abs(float64(left) - float64(right)))
right := findTiltDFS(root.Right, sum) 
if root == nil {
if root == nil {
 Definition for a binary tree node.
return root.val + left + right
left := findTiltDFS(root.Left, sum)
return sum
findTiltDFS(root, &sum)
sum := 0
 return 0
 return 0
Right *TreeNode
Left *TreeNode
Val int 
---
## Page 617
解题思路
可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。
构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。如果具有给定参数的reshape操作是
给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。
阵，但保留其原始数据。
在 MATLAB 中，有一个非常有用的函数reshape，它可以将一个矩阵重塑为另一个大小不同的新矩
题目大意
Note:
Example 2: 
·给一个二维数组和r，c，将这个二维数组"重塑"成行为r，列为 c。如果可以"重塑"，输出"重塑"以
 2. The given r and c are all positive.
·这题也是水题，按照题意模拟即可。
original matrix.
There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the
Explanation: 
[[1,2]
output:
r = 2, c = 4 
[[1,2],
nums =
Input:
matrix, fill it row by row by using the previous list.
The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4
Explanation:
[[1,2,3,4]]
output:
r = 1, c = 4
[3,4]]
[3,4]]
[3,4]]
[[1,2]
nums =
Input:
后的数组，如果不能"重塑”，输出原有数组。
重
---
## Page 618
 other words, one of the first string's permutations is the substring of the second string.
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In
 567. Permutation in String
题目
代码
func reshape(nums [][]int,r,c int) [][]int {
func canReshape(nums [][]int, r, c int) bool 
func matrixReshape(nums [][]int, r int, cint) [][]int {
package leetcode 
return newshape
rowIndex, colIndex := 0,0 
for index := range newshape {
newshape := make([][]int,
return false
if row*colume == r*c {
colume := len(nums[0])
row := len(nums) 
return nums
 newshape[index] = make([]int, c) 
 return true
 return reshape(nums, r, c)
for .
if colIndex == c {
colIndex++
newShape[rowIndex] [colIndex]= co]
rowIndex++
colIndex = 0
-, col := range row {
r）
---
## Page 619
代码
版。具体解题思路见第 438题。
这道题只需要判断是否存在，而不需要输出子串所在的下标起始位置。所以这道题是第 438 题的缩水 
这一题和第438 题，第3题，
解题思路
意字符的全排列组合。
在一个字符串重寻找子串出现的位置。子串可以是 Anagrams 形式存在的。Anagrams 是一个字符串任 
题目大意
Note:
Example 2: 
Example 1: 
1. The input strings only contain lower case letters.
func checkInclusion(sl string, s2 string) bool {
package leetcode
Output: False
Input:sl= "ab" s2 = "eidboaoo"
Explanation: s2 contains one permutation of sl ("ba").
Output:True
Input:sl = "ab" s2 = "eidbaooo"
if len(s2) == 0 Il len(s2) <len(s1) {
var freq [256]int 
for i := O; i < len(sl); i++ {
freq[sl[i]-'a']++
 return false
，第76 题，第567题类似，用的思想都是"滑动窗口"。