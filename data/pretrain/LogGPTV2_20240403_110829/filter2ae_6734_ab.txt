    func WrapTLSClientConn(c net.Conn, tlsConfig *tls.Config) (out net.Conn) {
        out = tls.Client(c, tlsConfig)
        return
    }
    func WrapTLSServerConn(c net.Conn, tlsConfig *tls.Config) (out net.Conn) {
        out = tls.Server(c, tlsConfig)
        return
    }
上面代码只是针对client主动发起连接，如果是listen的方式，代码有些许不同，在Accept()监听到连接后，需调用tls.Server来封装。  
测试代码
    if Args.TlsEnable {
        tlsConfig, err := transport.NewServerTLSConfig("", "", "")
        if err != nil {
            printer.Fail("[*] Error occured: %s", err.Error())
            conn.Close()
            continue
        }
        conn = net2.WrapTLSServerConn(conn, tlsConfig)
    }
​
有多处需要封装的，如下是所有位置  
​
​
修改后编译测试一波，可以看到与上面相比，流量全加密了  
当然调用了tls加密，付出的代价就是文件比原来大了1兆多。这个是没法避免的，因为不止是为了加密，后面做过cdn也是需要tls，所以这个步骤是必须的。  
​
# admin如何置于后台
这里做个小tips，因为基本admin会被放在vps上，而vps大多是选择linux，所以就涉及一个问题，admin是console交互式，ssh连接退出就会影响admin运行，所以需要用到screen。  
PS: screen不会直接把程序放到后台，而是先进入交互，手动置于后台。  
​
  1. 输入screen，会直接进入一个新的bash交互
  2. 执行admin，进入admin交互界面
        ./admin -l 9999
或者跳过第一步，直接再screen后台跟命令也行
        screen -S  ./admin -l 9999
​
  1. 切换到后台
        ctrl+ad
  2. 查看screen托管的隐藏进程
        screen -ls
  3. 从screen中切换到某进程的前台
        screen -r 3721
screen 进程树  
​
​
# 编码处理
stowaway还有一个功能，shell执行系统命令，但就如上面的图显示存在乱码，这是因为go里面，默认是utf8，而windows是gbk。  
​
方案一：  
在admin上修改  
shell在此处转换编码即可，或mgr.ShellManager.ShellMessChan发送处  
在这个只是处理了在admin上显示的问题，如果admin输入带中文，agent上把UTF-8当成GBK执行就会乱码，无法操作中文路径等等。  
​
​
方案二：  
在执行的agent上修改，这样就能控制输入转换成gbk，而发送给admin的从GBK转换成UTF-8，admin上显示既不会乱码，agent执行的时候也能正常解析中文路径。  
agent模块  
parser.go增加字符集参数，除了自动识别，也可以手动指定。  
如果没通过参数指定或者输入是错误字符集，则根据OS自动获取。  
    // charset parser
        autoCharset := false
        if Args.Charset == "" {
            autoCharset = true
        } else {
            for _, i := range charsetSlice {
                if Args.Charset == i {
                    goto manual
                }
            }
            autoCharset = true
            manual:
        }
        if autoCharset {
            switch utils.CheckSystem() {
            case 0x01:
                Args.Charset = "GBK"
                // cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true} // If you don't want the cmd window, remove "//"
            default:
                Args.Charset = "UTF-8"
            }
        }
agent/process/process.go  
然后在分发函数这，将选项传入处理函数，这里其实就参考第一个处理函数才决定使用options操作,所以可以在做一些改动前，看看之前是怎么实现的，这样保证代码设计一致性。  
agent/handler/shell.go  
admin传入命令转换成设定编码  
执行结果发送给admin前，将指定编码转换成UTF-8  
注意count即接收字节大小也需要改动，否则会出现丢字符串的情况。  
效果如下  
这个操作其实没那么重要处理，因为命令执行在代理工具里不应该有，会增加特征导致被杀，命令执行就交给更专业的C2来实现。  
​
这里只是实验性质的，用于后续其他处理函数需要做编码转换来做准备。  
PS:
编码转换包后面换成了官方提供的golang.org/x/text/encoding/simplifiedchinese，这个打包出来会比gcharset小很多。  
​
​
​
# 数据压缩
这个其实是想到frp也有这么一个功能，并且压缩数据对于传输来说很有意义，提高传输速度，尤其是一些大文件的传输。  
这个修改其实很简单。  
因为原来不是有一个数据加密吗，用AES对data进行加解密,而有了tls加密，这里的aes就无关紧要了，那么我们只需要替换这个加解密的位置，把数据从加解密变成解压缩就成了。  
​
定位到加密位置  
protocol/raw.go#ConstructData  
替换成gzip压缩  
解密位置  
protocol/raw.go#DeconstructData  
替换成gzip解压  
​
至于gzip的实现，很简单，调用内置库gzip即可。  
​
    func GzipCompress(src []byte) []byte {
        var in bytes.Buffer
        w := gzip.NewWriter(&in)
        w.Write(src)
        w.Close()
        return in.Bytes()
    }
    func GzipDecompress(src []byte) []byte {
        dst := make([]byte, 0)
        br := bytes.NewReader(src)
        gr, err := gzip.NewReader(br)
        if err != nil {
            return dst
        }
        defer gr.Close()
        tmp, err := ioutil.ReadAll(gr)
        if err != nil {
            return dst
        }
        dst = tmp
        return dst
    }
然后测试下压缩率  
ipconfig /all: 6410->1136 17.7%  
dir c:\windows\system32: 252599->51928 20.6%  
fscan.exe(16M): 16539136->5855251 35.4%  
​
测试压缩率还不错，总比没压缩的强上许多。  
PS: 这个压缩是不包含header字段的，当然这个字段撑死也就是几十字节，1K都不到，不影响的。
# 总结
stowaway作为一个专门为渗透设计的代理工具，有很多方便的功能，本次改造通过代码分析、短连接bug修复、流量全加密、数据压缩等各方面进行讲解，也进一步熟悉了这款工具的实现逻辑，也为后续重构打下基础。  
后续还会增加CDN穿透、多startnode功能、内联命令等等。