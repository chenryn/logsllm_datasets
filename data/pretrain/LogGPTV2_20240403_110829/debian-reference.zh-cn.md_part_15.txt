在Debian社群契约的第4条和第5条对这进行了明确的解释：
• 我们将优先考虑我们的用户及自由软件
– 我们由我们的用户及自由软件社群的需要所导向。我们将优先考虑他们的利益。我们将在多种计算环境中支持我
们的用户的操作需要。我们不反对在Debian系统上使用非自由软件，我们也不会尝试向创建和使用这部分软件的
用户索取费用。我们允许他人，在没有我们的资金的参与下，制造包括Debian以及商业软件的增值套件。为了达
成这些目标，我们将提供集成的、高质量的、100%自由的软件，而不附加任何可能阻止在这些方面使用的法律限
制。
• 哪些作品不符合我们的自由软件规范
– 我们知道，某些我们的用户需要使用不符合Debian自由软件指导方针的作品。我们为这些作品，在我们的档案库
中留出了”non-free”、”non-free-firmware”和”contrib”目录。在这些目录下的软件包，并不属于Debian
系统尽管它们已被配置成可以在Debian下使用。我们鼓励光盘制造商阅读这些目录下的软件的许可证，以判断他
们是否可以在光盘中发行这些软件。所以，尽管非自由软件并非Debian系统的一部分，我们仍支持它们的使用，
并且我们为非自由软件提供了公共资源(诸如我们的缺陷跟踪系统以及邮件列表)。Debian官方媒介可以包括固件，
固件不是Debian系统的一部分，这是一个例外，能够让Debian用于需要这些固件的硬件上。
注意
在目前的 Debian 社群契约（Debian Social Contract） 1.2 版本第 5 条条款的实际文本和上面的文本有稍微不同。
在不改变Debian社群契约实际内容下，这个文字调整让本用户文档在逻辑上保持一致。
Debian参考手册 43/233
用户应该了解使用non-free、non-free-firmware和contrib中的软件包所需要冒的风险：
• 使用类似的软件包会失去自由
• 失去Debian对软件包的支持（这些软件包无法访问源代码，Debian不能进行完全的支持。）
• 污染你100%自由的Debian系统
Debian自由软件指导方针为Debian设立了自由软件标准。Debian对软件包中的软件做了最广泛的解释，包含文档、固
件、图标和图形数据。这使得Debian的自由软件标准非常严格。
典型的non-free、non-free-firmware和contrib软件包包含了下列类型的自由分发的软件包：
• 在GNU Free Documentation License下的文档包，包含不变的部分，比如 GCC 和 Make 的。（大多数都可以在
non-free/doc找到.)
• 包含没有源代码的二进制数据的固件软件包，例如在第 9.10.5 节中作为non-free-firmware列出的软件包。（多
见于non-free-firmware/kernel部分。）
• 游戏和字体软件包，对商业使用和/或内容修改进行了限制。
请注意，non-free、non-free-firmware和contrib软件包的数量少于main软件包的2%。允许访问non-free、
non-free-firmware和contrib并不会模糊软件包的来源。使用aptitude(8)的全屏交互式界面可以提供完全
的可见性和完全的控制，可以让你决定安装来自某个部分的软件包，来使你的系统保持自由。
2.1.7 软件包依赖关系
Debian系统通过其控制文件字段中的版本化二进制依赖声明机制来提供一致的二进制软件包集合。下面有一些它们的
简单定义。
•“依赖”
– 绝对的依赖，所有在这里列出的软件包都必须同时或提前安装。
• ”预依赖”
– 类似于Depends，但列出的软件包必须提前完成安装。
• ”推荐”
– 这里表示一个强，但不是绝对的依赖关系。大多数用户不会想要这个包，除非在这里列出的所有包都已经安装。
• ”建议”
– 较弱的依赖。这个软件包的大多数用户可能会从安装所列的软件包中受益，但没有它们也可以有适当的功能。
• ”增强”
– 这里表明一个像建议的弱依赖关系，不装也没关系。
• ”破损”
– 表明一个软件包不兼容一些版本规范。一般的解决方法就是升级列出的所有软件包。
• ”冲突”
– 这表明了绝对的不兼容。为了安装这个软件包必须移除所有列出的软件包。
• ”替代”
– 这表明这个文件安装的文件会替代所列的软件包的文件。
• ”提供”
Debian参考手册 44/233
– 表明这个软件包会提供所列的软件包所有的文件和功能。
注意
请注意，同时将“Provides”、“Conflicts”和“Replaces”定义到一个虚拟的软件包是一个明智的配置。这确保了
在任何一个时间只能安装一个提供该虚拟包的真正软件包。
包含源代码依赖关系的官方定义位于thePolicyManual: Chapter7-Declaringrelationshipsbetweenpackages。
2.1.8 包管理的事件流
这是APT提供的软件包管理的简单事件流摘要。
• 更新（“apt update”、“aptitude update”或“apt-get update”）：
1. 从远程档案库获取档案库元数据
2. 重建和更新APT使用的本地元数据
• 升级（“apt upgrade”和“apt full-upgrade”，或“aptitude safe-upgrade”和“aptitude full-upgrade”，
或“apt-get upgrade”和“apt-get dist-upgrade”）：
1. 选择候选版本，它所安装的软件包通常都是最新的可用版本（例外参见第 2.7.7 节）
2. 解决软件包依赖关系
3. 如果候选版本与已安装的版本不同，会从远程档案库获取所选择的二进制软件包
4. 解包所获取的二进制软件包
5. 运行preinst脚本
6. 安装二进制文件
7. 运行postinst脚本
• 安装（“apt install ...”、“aptitude install ...”或者”apt-get install …”）：
1. 选择命令行中列出的包
2. 解决软件包依赖关系
3. 从远程服务器获取已选二进制包
4. 解包所获取的二进制软件包
5. 运行preinst脚本
6. 安装二进制文件
7. 运行postinst脚本
• 移除（”apt remove …”,“aptitude remove …”或“apt-get remove …”）：
1. 选择命令行中列出的包
2. 解决软件包依赖关系
3. 运行prerm脚本
4. 移除已安装的文件，除了配置文件
5. 运行postrm脚本
• 清除（”apt purge”,“aptitude purge …”或“apt-get purge …”）：
1. 选择命令行中列出的包
2. 解决软件包依赖关系
3. 运行prerm脚本
4. 移除已安装的文件，包含配置文件
5. 运行postrm脚本
这里，为了大局，我特意省略了技术细节。
Debian参考手册 45/233
2.1.9 对包管理问题的第一个回应
你应该阅读优良的官方文档。第一个阅读的文档是Debian特定的“/usr/share/doc/package_name/README.Debian”。
同时也应该查询“/usr/share/doc/package_name/”中的其它文档。如果你设置shell为第 1.4.2 节，输入下列
命令。
$ cd package_name
$ pager README.Debian
$ mc
你可能需要安装以“-doc”后缀命名的对应文档软件包来获取详细的信息。
如果你在使用一个特定的软件包时出现了问题，一定要首先检查Debianbug跟踪系统（BTS）网站。
网站 命令
Debianbug跟踪系统（BTS）的
sensible-browser ”https://bugs.debian.org/”
主页
软件包名称已知的bug报告 sensible-browser ”https://bugs.debian.org/package_name”
bug编号已知的bug报告 sensible-browser ”https://bugs.debian.org/bug_number”
Table2.5: 解决特定软件包问题的主要网站
使用Google搜索，在关键字中包含“site:debian.org”“，site:wiki.debian.org”“，site:lists.debian.org”
等等。
当你要发送一份bug报告时，请使用reportbug(1)命令。
2.1.10 如何挑选 Debian 软件包
当遇到2个以上的类似的软件包时，先前没有经过反复的尝试，你不知道安装哪一个的时候，应该用常识来判断。我
认为以下几点是首选的软件包应该具有的特征。
• 重要性：是>否
• 类型：main>contrib>non-free
• 优先级：需要>重要>标准>可选>额外
• 任务：在任务下有软件包的列表信息，例如“桌面环境”
• 软件包是被与之有依赖关系的软件包所选择的（例如gcc依赖gcc-10）
• 流行度：在投票或者安装指数上有着更高的分数
• 更新日志：维护者经常的更新
• BTS(缺陷跟踪系统):没有RC级别的缺陷（没有危险、重大严重的缺陷）
• BTS(缺陷跟踪系统):有维护者对缺陷报告反馈
• BTS(缺陷跟踪系统): 有着更多的近期修复的bug数目
• BTS(缺陷跟踪系统):遗留的非严重（non-wishlist）缺陷数量较少
Debian是一个使用分布式开发模式的志愿项目，它的档案库包含了许多不同关注点和不同质量的软件包。你必须做出
自己的选择。
Debian参考手册 46/233
2.1.11 怎样和不一致的要求协作
无论你决定使用哪个Debian系统套件，你仍然希望运行在那个套件里不存在的程序版本。即使你在其它Debian套件
里面，或者在其它非Debian的资源里面，找到这个程序的二进制软件包，它们的要求可能和你目前的Debian系统不
一致。
在第 2.7.7 节里描述的apt-pinning等技术，虽然你能够用它来调整软件包管理系统来安装这类不不同步的二进制软
件包，但这样的调整方法只有有限的使用场景，应为它们可能破坏那些程序和你的系统。
在单独安装这类不同步的软件包之前，你需要查找所有存在的和你目前Debian系统兼容的安全技术替代方案。
• 使用相应的沙盒化的上游二进制软件包来安装这样的程序（参见第 7.6 节）。
– 许多常见的GUI（图形用户界面）程序，比如LibreOffice和GNOME应用，会有Flatpak、Snap或AppImage软件
包存在。
• 建立一个chroot或类似的环境来在里面运行这样的程序（参见第 9.11 节）。
– CLI命令能够在和它兼容的chroot下轻松执行（参见第 9.11.4 节）。
– 不重启机器，能够轻松的尝试多个完整的桌面环境（参见第 9.11.5 节）。
• 自己构建需要的二进制软件包版本，和你目前Debian系统兼容。
– 这是一个不轻松的任务(参见第 2.7.13 节)。
2.2 基础软件包管理操作
在Debian系统中有许多基于APT的软件包管理工具可以在Debian系统上进行基于仓库的软件包管理操作。在这里，
我们将介绍3种基本的软件包管理工具：apt,apt-get/apt-cache和aptitude。
对于涉及软件包安装或更新软件包元数据的软件包管理操作，你必须有root权限。
2.2.1 apt vs. apt-get / apt-cache vs. aptitude
尽管aptitude是作者主要使用的一个非常好的可互动工具，但你应该知道下列警示：
• 不建议在新版本发布后在stableDebian系统上使用aptitude命令来进行跨版本的系统升级。
– 建议使用”apt full-upgrade”或“apt-get dist-upgrade”来进行这个操作。参见Bug#411280。
• aptitude命令有时候会为了 testing或unstableDebian系统升级清除大量软件包。
– 这个情况吓坏了许多的系统管理员。请不要惊慌。
– 这似乎大多数是由元软件包的依赖或推荐的软件包版本偏差造成的，例如gnome-core。
– 要解决这个问题，可以在 aptitude 命令菜单中选择“取消待执行的动作”，退出 aptitude，并使用“apt
full-upgrade”。
apt-get和apt-cache是最基础的基于APT的软件包管理工具。
• apt-get和apt-cache只提供命令行用户界面。
• apt-get是进行跨版本的主系统升级等操作的最合适工具。
• apt-get提供了一个强大的软件包依赖解析器。
• apt-get对硬件资源的要求不高。它消耗更少的内存并且运行速度更快。
• apt-cache提供了一个标准的正则表达式来搜索软件包名称和描述。
Debian参考手册 47/233
• apt-get和apt-cache可以使用/etc/apt/preferences来管理软件包的多个版本，但这非常繁琐。
apt命令是一个用于软件包管理的高级命令行界面。它基本上是apt-get、apt-cache和类似命令的一个封装，被
设计为针对终端用户交互的界面，它默认启用了某些适合交互式使用的选项。
• apt工具在用户使用apt install安装软件包时提供了一个友好的进度条。
• 在成功安装下载的软件包后，apt将默认删除缓存的.deb软件包。
提示
建议用户使用新的apt(8)命令用于交互式的使用场景，而在shell脚本中使用apt-get(8)和 apt-cache(8)命