title:Protecting Bare-Metal Embedded Systems with Privilege Overlays
author:Abraham A. Clements and
Naif Saleh Almakhdhub and
Khaled S. Saab and
Prashast Srivastava and
Jinkyu Koo and
Saurabh Bagchi and
Mathias Payer
2017 IEEE Symposium on Security and Privacy
Protecting Bare-metal Embedded Systems With
Privilege Overlays
Abraham A. Clements∗, Naif Saleh Almakhdhub†, Khaled S. Saab‡, Prashast Srivastava†,
Jinkyu Koo†, Saurabh Bagchi†, Mathias Payer†
∗Purdue University and Sandia National Laboratories, PI:EMAIL
†Purdue University, {nalmakhd, srivas41, kooj, sbagchi}@purdue.edu, PI:EMAIL
‡Georgia Institute of Technology, PI:EMAIL
Abstract—Embedded systems are ubiquitous in every aspect of
modern life. As the Internet of Thing expands, our dependence
on these systems increases. Many of these interconnected systems
are and will be low cost bare-metal systems, executing without an
operating system. Bare-metal systems rarely employ any security
protection mechanisms and their development assumptions (un-
restricted access to all memory and instructions), and constraints
(runtime, energy, and memory) makes applying protections
challenging.
To address these challenges we present EPOXY, an LLVM-
based embedded compiler. We apply a novel technique, called
privilege overlaying, wherein operations requiring privileged
execution are identiﬁed and only these operations execute in
privileged mode. This provides the foundation on which code-
integrity, adapted control-ﬂow hijacking defenses, and protec-
tions for sensitive IO are applied. We also design ﬁne-grained
randomization schemes, that work within the constraints of bare-
metal systems to provide further protection against control-ﬂow
and data corruption attacks.
These defenses prevent code injection attacks and ROP attacks
from scaling across large sets of devices. We evaluate the
performance of our combined defense mechanisms for a suite of
75 benchmarks and 3 real-world IoT applications. Our results for
the application case studies show that EPOXY has, on average,
a 1.8% increase in execution time and a 0.5% increase in energy
usage.
I. INTRODUCTION
Embedded devices are ubiquitous. With more than 9 billion
embedded processors in use today, the number of devices has
surpassed the number of humans. With the rise of the “Internet
of Things”, the number of embedded devices and their con-
nectivity is exploding. These “things” include Amazon’s Dash
button, utility smart meters, smart locks, and smart TVs. Many
of these devices are low cost with software running directly
on the hardware, known as “bare-metal systems”. In such
systems, the application runs as privileged low-level software
with direct access to the processor and peripherals, without
going through intervening operating system software layers.
These bare-metal systems satisfy strict runtime guarantees on
extremely constrained hardware platforms with few KBs of
memory, few MBs of Flash, and low CPU speed to minimize
power and cost constraints.
With increasing network connectivity ensuring the secu-
rity of these systems is critical [21, 51]. In 2016, hijacked
smart devices like CCTV cameras and digital video recorders
© 2017, Abraham A. Clements. Under license to IEEE.
DOI 10.1109/SP.2017.37
289
launched the largest distributed denial of service (DDoS)
attack to date [39]. The criticality of security for embedded
systems extends beyond smart things. Micro-controllers ex-
ecuting bare-metal software have been embedded so deeply
into systems that their existence is often overlooked, e.g.,
in network cards [26], hard drive controllers [57], and SD
memory cards [17]. We rely on these systems to provide secure
and reliable computation, communication, and data storage.
Yet, they are built with security paradigms that have been
obsolete for several decades.
Embedded systems largely lack protection against code
injection, control-ﬂow hijack, and data corruption attacks.
Desktop systems, as surveyed in [53], employ many defenses
against
these attacks such as: Data Execution Prevention
(DEP), stack protections (e.g., stack canaries [22], separate
return stacks [31], and SafeStack [40]), diversiﬁcation [49, 41],
ASLR, Control-Flow Integrity [9, 18], or Code-Pointer In-
tegrity (CPI) [40]. Consequently, attacks on desktop-class
systems became harder and often highly program dependent.
Achieving known security properties from desktop systems
on embedded systems poses fundamental design challenges.
First, a single program is responsible for hardware con-
ﬁguration, inputs, outputs, and application logic. Thus, the
program must be allowed to access all hardware resources
and to execute all
instructions (e.g., conﬁguring memory
permissions). This causes a fundamental tension with best
security practices which require restricting access to some
resources. Second, bare-metal systems have strict constraints
on runtime, energy usage, and memory usage. This requires all
protections to be lightweight across these dimensions. Third,
embedded systems are purpose-built devices. As such, they
have application-speciﬁc security needs. For example, an IO
register on one system may unlock a lock while on a different
system, it may control an LED used for debugging. Clearly the
former is a security-sensitive operation while the latter is not.
Such application-speciﬁc requirements should be supported
in a manner that does not require the developer to make
intrusive changes within her application code. Combined,
these challenges have meant that security protection for code
injection, control-ﬂow hijack, and data corruption attacks are
simply left out from bare-metal systems.
As an illustrative example, consider the application of DEP
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
to bare-metal systems. DEP, which enforces W ⊕ X on all
memory regions,
is applied on desktops using a Memory
Management Unit (MMU), which is not present on micro-
controllers. However, many modern micro-controllers have a
peripheral called the Memory Protection Unit (MPU) that can
enforce read, write, and execute permissions on regions of
the physical memory. At ﬁrst glance, it may appear that DEP
can be achieved in a straightforward manner through the use
of the MPU. Unfortunately, we ﬁnd that this is not the case:
the MPU protection can be easily disabled, because there is
no isolation of privileges. Thus, a vulnerability anywhere in
the program can write the MPU’s control register to disable
it. A testimony to the challenges of correctly using an MPU
are the struggles existing embedded OSs have in using it for
security protection, even for well-known protections such as
DEP. FreeRTOS [1], a popular operating system for low-end
micro-controllers, leaves its stacks and RAM to be writable
and executable. By FreeRTOS’s own admission, the MPU
port is seldom used and is not well maintained [3]. This was
evidenced by multiple releases in 2016 where MPU support
did not even compile [8, 2].
To address all of these challenges, we developed EPOXY
(Embedded Privilege Overlay on X hardware with Y software),
a compiler that brings both generic and system-speciﬁc protec-
tions to bare-metal applications. This compiler adds additional
passes to a traditional LLVM cross-compilation ﬂow, as shown
in Figure 1. These passes add protection against code injection,
control-ﬂow hijack and data corruption attacks, and direct
manipulation of IO. Central to our design is a lightweight
privilege overlay, which solves the dichotomy of allowing the
program developer to assume access to all instructions and
memory but restrict access at runtime. To do this, EPOXY
reduces execution privileges of the entire application. Then,
using static analysis, only instructions requiring elevated priv-
ileges are added to the privilege overlay to enable privileges
just prior to their execution. EPOXY draws its inputs from a
security conﬁguration ﬁle, thus decoupling the implementation
of security decisions from application design and achieves all
the security protections without any application code modiﬁca-
tion. Combined, these protections provide application-speciﬁc
security for bare-metal systems that are essential on modern
computers.
In adapting ﬁne-grained diversiﬁcation techniques [41],
EPOXY leverages unique aspects of bare-metal systems,
speciﬁcally all memory is dedicated to a single application and
the maximum memory requirements are determined a priori.
This enables the amount of unused memory to be calculated
and used to increase diversiﬁcation entropy. EPOXY then
adapts the protection of SafeStack [40], enabling strong stack
protection within the constraints of bare-metal systems.
Stdlib Src
App Src
HAL Src
GCC
`
Stdlib
Clang
LLVM 
Bitcode
LLVM Linker 
Plugin
GNU Linker
LLVM Linker 
Plugin
Passes
SafeStack
Diversification
Privilege 
Overlaying
Options
Bin
Backend
Linker Script
Fig. 1. The compilation work ﬂow for an application using EPOXY. Our
modiﬁcations are shown in shaded regions.
EPOXY on 75 benchmark applications and three representa-
tive IoT applications that each stress different sub-systems.
Our performance results for execution time, power usage,
and memory usage show that our techniques work within
the constraints of bare-metal applications. Overheads for the
benchmarks average 1.6% for runtime and 1.1% for energy.
For the IoT applications, the average overhead is 1.8% for
runtime, and 0.5% for energy. We evaluate the effectiveness
of our diversiﬁcation techniques, using a Return Oriented Pro-
gramming (ROP) compiler [52] that ﬁnds ROP-based exploits.
For our three IoT applications, using 1,000 different binaries
of each, no gadget survives across more than 107 binaries.
This implies that an adversary cannot reverse engineer a single
binary and create a ROP chain with a single gadget that scales
beyond a small fraction of devices.
In summary, this work: (1) identiﬁes the essential com-
ponents needed to apply proven security techniques to bare-
metal systems; (2) implements them as a transparent runtime
privilege overlay, without modifying existing source code;
(3) provides state-of-the-art protections (stack protections and
diversiﬁcation of code and data regions) for bare-metal sys-
tems within the strict requirements of run-time, memory size,
and power usage; (4) demonstrates that these techniques are
effective from a security standpoint on bare-metal systems.
Simply put, EPOXY brings bare-metal application security
forward several decades and applies protections essential for
today’s connected systems.
II. THREAT MODEL AND PLATFORM ASSUMPTIONS
We assume a remote attacker with knowledge of a generic
memory corruption vulnerability, i.e., the application running
on the embedded system itself is buggy but not malicious.
The goal of the attacker is to either achieve code execution
(e.g., injecting her own code, reusing existing code through
ROP or performing Data-oriented Programming [37]), corrupt
speciﬁc data, or directly manipulate security-critical outputs
of a system by sending data to speciﬁc IO pins. We assume
the attacker exploits a write-what-where vulnerability, i.e., one
which allows the attacker to write any data to any memory
location that she wants. The attacker may have obtained the
Our prototype implemenation of EPOXY supports the
ARMv7-M architecture, which includes the popular Cortex-
M3, Cortex-M4, and Cortex-M7 micro-controllers. Our tech-
niques are general and should be applicable to any micro-
controller that supports at
two modes of execution
(privileged and unprivileged) and has an MPU. We evaluate
least
290
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
vulnerability through a variety of means, e.g., source code
analysis, or reverse engineering the binary that runs on a
different device and identifying security ﬂaws in it.
We also assume that the attacker does not have access to
the speciﬁc instance of the (diversiﬁed) ﬁrmware running on
the target device. Our applied defenses provide foundational
protections, which are complementary to and assumed by,
many modern defenses such as, the memory disclosure pre-
vention work by Braden et. al. [15]. We do not protect against
attacks that replace the existing ﬁrmware with a compromised
ﬁrmware. Orthogonal techniques such as code signing should
be used to prevent this type of attack.
it
We make the following assumptions about the target system.
First,
is running a single bare-metal application, which
utilizes a single stack and has no restrictions on the memory
addresses, peripherals, or registers that it can access or instruc-
tions that it can execute. This is the standard mode of execution
of applications on bare-metal systems, e.g., is the case with
every single benchmark application and IoT application that
we use in the evaluation and that we surveyed from the vendors
of the ARM-equipped boards. Second, we require the micro-
controller to support at least two execution privilege levels,
and have a means to enforce access controls on memory for
these privilege levels. These access controls include marking
regions of memory as read, write, and/or execute. Typically, an
MPU provides this capability on a micro-controller. We looked
at over 100 Cortex-M3, M4, and M7 series micro-controllers
from ARM and an MPU was present on all but one. Micro-
controllers from other vendors, such as AVR32 from Atmel,
also have an MPU.
III. ARCHITECTURE BACKGROUND INFORMATION
This section presents architecture information that is needed
to understand the attack vectors and the defense mechanisms
in EPOXY. Bare-metal systems have low level access to hard-
ware; this enables an attacker, with a write-what-where vulner-
ability, to manipulate the system in ways that are unavailable
to applications on desktop systems. Defense strategies must
consider these attack avenues, and the constraints of hardware
available to mitigate threats. For speciﬁcity, we focus on
the ARMv7-M architecture which is implemented in ARM
Cortex-M(3,4,7) micro-controllers. The general techniques are
applicable to other architectures subject to the assumptions
laid out in Section II. We present key details of the ARMv7-
M architecture, full details are in the ARMv7-M Architecture
Reference Manual [11].
A. Memory Map
In our threat model, the attacker has a write-what-where
vulnerability that can be used to write to any memory address;
therefore, it is essential to understand the memory layout of the
system. Note that these systems use a single, uniﬁed memory
space. A representative memory map illustrating the different
memory regions is shown in Figure 2. At the very bottom of
memory is a region of aliased memory. When an access is
made to the aliased region, the access is fulﬁlled by accessing
Fig. 2. An example memory map showing the regions of memory commonly
available on an ARMv7-M architecture micro-controller. Note the cross
hatched areas have an address but no memory.
physical memory that is aliased, which could be in the Internal
RAM, Internal Flash, or External Memory. The alias itself
is speciﬁed through a hardware conﬁguration register. Thus,
memory mapped by the aliased region is addressable using
two addresses: its default address (e.g., the address of Internal
RAM, Internal Flash, or External Memory) and address of the
aliased region. This implies that a defender has to conﬁgure
identical permissions for the aliased memory region and the
actual memory region that it points to. A common peripheral
(usually a memory controller) contains a memory-mapped
register that sets the physical memory addressed by the aliased
region. A defender must protect both the register that controls
which memory is aliased, in addition to the physical and
aliased memory locations.
Moving up the address space we come to Internal Flash, this
is Flash memory that is located inside the micro-controller. On
ARMv7-M devices it ranges in size from a couple KB to a
couple MB. The program code and read only data are usually
stored here. If no permissions are enforced, an attacker may
directly manipulate code1. Address space layout randomization
is not applied in practice and the same binary is loaded on all
devices, which enables code reuse attacks like ROP. Above the
Flash is RAM which holds the heap, stack, and global data
(initialized data and uninitialized bss sections). Common sizes
range from 1KB to a couple hundred KB and it is usually
smaller than the Flash. By default this area is read, write,
and execute-enabled, making it vulnerable to code injection
attacks. Additionally, the stack employs no protection and thus
is vulnerable to stack smashing attacks which can overwrite
return addresses and hijack the control ﬂow of the application.
Located above the RAM are the peripherals. This area
is sparsely populated and consists of ﬁxed addresses which
control hardware peripherals. Peripherals include: General
Purpose Input and Output
(GPIO), serial communication
(UARTS), Ethernet controllers, cryptography accelerators, and
many others. Each peripheral is conﬁgured, and used by read-
ing and writing to speciﬁc memory addresses called memory-
mapped registers. For example, a smart lock application will
1In Flash a 1 may be changed to a 0 without erasing an entire block, parity
checks are also common to detect single bit ﬂips. This restricts the changes
that can directly be made to code; however, a wily attacker may still be able
to manipulate the code in a malicious way.
291
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
use an output pin of the micro-controller to actuate its locking
mechanism. In software this will show up as a write to a ﬁxed
address. An adversary can directly open the lock by writing
to the GPIO register using a write-what-where vulnerability,
bypassing any authentication mechanism in the application.
The second region from the top is reserved for external
memory and co-processors. This may include things like
external RAM or Flash. However, on many small embedded
systems nothing is present in this area. If used, it is sparsely
populated and the opportunities presented to an attacker are
system and program speciﬁc. The ﬁnal area is the System
Control Block (SCB). This is a set of memory-mapped regis-
ters deﬁned by ARM and present in every ARMv7-M micro-
controller. It controls the MPU conﬁguration, interrupt vector
location, system reset, and interrupt priorities. Since the SCB
contains the MPU conﬁguration registers, an attacker can
disable the MPU simply by writing a 0 to the lowest bit
of the MPU CTRL register located at address 0xE000ED94.
Similarly, the location of the interrupt vector table is set by
writing the VTOR register at 0xE000ED08. These indicate that
the SCB region is critical from a security standpoint.
B. Execution Privileges Modes
Like their x86 counterparts, ARMv7-M processors can exe-
cute in different privilege modes. However, they only support
two modes: privileged and unprivileged. In the current default
mode of operation, the entire application executes in privileged
mode, which means that all privileged instructions and all
memory accesses are allowed. Thus, we cannot indiscrimi-
nately reduce the privilege level of the application, for fear
of breaking the application’s functionality. Once privileges
are reduced the only way to elevate privileges is through
an exception. All exceptions execute in privileged mode and