 **Do you want to request a _feature_ or report a _bug_?**
Bug, perhaps just in documentation.
**What is the current behavior?**
The documentation for Refs and the DOM says:
> The ref attribute takes a callback function, and the callback will be
> executed immediately after the component is mounted or unmounted.
But if I create a stateful component like:
    class ScrollHelper extends React.PureComponent {
      componentDidMount() {
        console.log("ScrollHelper componentDidMount")
      }
      componentWillUnmount() {
        console.log("ScrollHelper componentWillUnmount")
      }
      render() {
        console.log("ScrollHelper render")
        return 
    }
and use it via ` console.log("ScrollHelper ref",
obj)}/>` within an app, I do not see the behavior documented, but rather the
following pattern of logs:
> // [first render]  
>  ScrollHelper render  
>  ScrollHelper componentDidMount  
>  ScrollHelper ref   
>  // [some data changes elsewhere in the app]  
>  ScrollHelper ref   
>  ScrollHelper render  
>  ScrollHelper ref   
>  // [some data changes elsewhere in the app, again…]  
>  ScrollHelper ref   
>  ScrollHelper render  
>  ScrollHelper ref   
>  // [some data changes causing the ScrollHelper to actually unmount]  
>  ScrollHelper ref   
>  ScrollHelper componentWillUnmount
**What is the expected behavior?**
According to the docs, I would expect my `refs` callback to be called exactly
**two** times during the events above — once (with the component) after the
"ScrollHelper componentDidMount" and once (with `null`) before the
"ScrollHelper componentWillUnmount". Instead it gets "reset" basically every
time the page is re-rendered — even though it's pretty clearly ending up with
the same component instance each time! (I verified this is true via some
additional code as well, but should be evident from the lack of additional
"componentDidMount" logs anyway.)
**Which versions of React, and which browser / OS are affected by this issue?
Did this work in previous versions of React?**
react@15.4.1, no idea what the behavior was earlier.