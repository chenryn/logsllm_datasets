the term “component” to refer to a maximally connected
subgraph. By deﬁnition, there must be an undirected path
from each node u to each other node v in a component. GCC
is the largest connected component in a traﬃc dispersion
graph. We will report this quantity as percentage of the
total number of nodes in the TDG. Intuitively we expect
densely connected TDG communities, as commonly found in
P2P protocols, DNS and network-gaming overlays, to have
a large connected component that concentrates the majority
(usually, >90%) of participating hosts. Such components are
in general not present in typical client server applications,
Figure 3: Rich Club Connectivity metric of a 300 sec DNS TDG
(WIDE trace). By contrast, the rich club connectivity of the AS-
Level Internet topology graph from Skitter (CAIDA).
tion intervals, which corresponds to an hour of monitored
traﬃc for each trace. The values in the table are averaged
over the 12 intervals and values in parenthesis provide the
standard deviation of each metric, and which is typically
small. The small standard deviations suggests that: (a) the
TDG properties seem very stable over the duration of ob-
servation, and (b) that 300 seconds is a reasonable interval
of observing the formation of TDGs. We now discuss the
diﬀerent graph metrics and their importance.
Average Degree: This metric is calculated by counting
both in-coming and out-going edges, hence is the degree of
a host if we ignore the directivity. Therefore, it indicates
the popularity of a host, i.e., how many distinct IP nodes a
host interacted over the observation interval. The average
degree is a ﬁrst approach into quantifying the coarseness of
a graph; graphs with high average degrees tend to be tightly
connected [8]. As expected, this metric is high in P2P TDGs.
Max Degree Ratio (MDR): MDR is the maximum de-
gree in the graph normalized by the number of nodes in the
graph minus one (i.e., the maximum possible degree of a node
in the graph). Intuitively, high MRD suggests the presence
(a) HTTP (client-server).
(b) DNS (client-server & P2P).
(c) WinMX (P2P).
Figure 4: Joint Degree Distribution(JDD): P (k1, k2) gives the probability of a randomly selected edge to connect nodes of degree k1 and
k2. Same-colored areas in the contours give regions where an edge is equal likely to exists. Dark colored region shows areas with the higher
concentration of edges (higher probability P ), and white color denotes regions with no edges. Data are from the OC48 trace.
such as HTTP (Table 2). Moreover, the total number of
such connected components is an important quantity as we
will see later.
Depth: For this metric, we consider the dynamic (tempo-
ral) nature of the graph, and we consider edges and nodes
in the order of ﬁrst appearance in an online fashion. We
attempt to capture the “spread” of the communication (e.g.,
u talks to v, then v talks to q etc.). For calculating depth,
the ﬁrst time we see a directed edge (u, v), if we have not
seen node u before we give it a depth of zero. If v is a new
node in the graph then depth(v) = depth(u)+1. The impor-
tance of this metric lies also in its ability to identify worm
propagation, which naturally leads to high depths [4].
Node Degree Distribution: The degree distribution of
any TDG can be represented by its corresponding marginal
in-degree and out-degree distributions.
In this work, we
use the degree distribution of the undirected graph in the
same way as we discussed for average degree. We present
data from the OC48 trace with similar ﬁndings for all other
traces. For each TDG, twelve distributions are generated,
one for each disjoint 300-second-long interval of the trace.
The empirical degree distributions of Fig. 2 indicate that:
(a) as with most Internet data [3], many TDGs (e.g., HTTP,
DNS, NetBIOS) exhibit highly skewed distributions, and
that (b) our measured quantities are stable over the intervals
of observation, since the empirical distributions from mul-
tiple disjoint intervals of the trace are very close together.
It is interesting to observe the distinct behavior of NetBIOS
where the majority of nodes have degree of one (nodes being
scanned, with only a single in-edge), compared to the degree
distributions of the other protocols.
In Fig. 2, the corresponding average degrees and their
standard deviations1 are: 2.48 with σ = 32.96 for HTTP,
4.83, with σ = 27.87 for DNS and 2.01 with σ = 29.57
for NetBIOS. For typical exponentially distributed data the
Coeﬃcient of Variation (CV (X) = pV ar(X)/E[X]) [3] is
close to 1, for large enough samples. However, the CV for
the HTTP, DNS and NetBIOS TDGs are 13.3, 5.8, 14.7 re-
spectively, indicating a signiﬁcant level of variation from the
average degree. These results are for the ﬁrst 300 secs of the
OC48 trace, with very similar ﬁndings for all other intervals.
Even though this is not a strict rule for all traces we investi-
1The Standard Deviation(σ) calculated here captures the
variability of the degrees found in a single TDG and is dif-
ferent than the σ of the average degree across multiple TDGs
as given in Table 2.
gated, the distributions of HTTP and DNS shown in Fig. 2
can be well described by a power law relationship of the
form P (X > x) = 1 − P (X ≤ x) ∼= c · x−α, with exponents
α = 1.10 for HTTP and α = 1.27 for DNS and goodness-
of-ﬁt R2 = 0.98, 0.99 respectively. For completeness, we
report that the CV for WinMX, eDonkey (TCP Port 4662)
and SMTP are 1.6, 1.8 and 3.5 respectively. Clearly, even
though not exponentially distributed, the degrees of the two
P2P protocols exhibit much smaller variability.
Rich Club Connectivity (RCC) metric: The rich club
connectivity is typically analyzed with the following proce-
dure [10]. We sort nodes in the order of decreasing degree
(x-axis in the plot) which we call the degree rank of the
node. Then, to calculate the connectivity at k, we consider
the group of nodes from rank 1 to rank k and we compute
the number of edges that exist between these nodes, over
the maximum possible number of edges between them (i.e.,
when they form a perfect clique). In Fig. 3, we plot the RCC
for a typical TDG from the ﬁrst 300 sec of the WIDE trace.
In contrast to many structured graphs with power-law de-
gree distributions, such as the AS-level Internet topology
(Fig. 3), in TDGs we have no clustering of highest degree
nodes. In other words, top ranked nodes (e.g., large DNS
servers) are not observed to exchange packets with each
other. We conﬁrmed this ﬁnding in a number of other TDGs
(e.g., for HTTP, SMTP, etc.) and with many other traces.
Some notable exceptions are few P2P protocol TDGs (e.g.,
Blubster P2P of Table 2) where high degree nodes are con-
nected. The above observations support our statement that
TDGs appear to be diﬀerent in this respect from many other
structured power-law graphs.
Joint Degree Distribution (JDD): JDD goes one step
further than the degree distribution and gives the probabil-
ity P (k1, k2) of a randomly selected edge to connect nodes
of degrees k1 and k2. Mahadevan et al. [8] emphasize the
ability of this metric to fully capture the characteristics of a
large family of graphs (e.g., the AS-Level Internet topology).
The JDD for three TDGs derived from the ﬁrst 300 sec in-
terval of the OC48 trace are shown in Fig. 4. The contour
plots have logarithmic x- and y-axis, as well as probabilities
P (k1, k2). High probabilities therefore appear as small val-
ues of | log10 P (k1, k2)|. While not all traces give identical
JDDs for the same edge ﬁlter, they lead to similar observa-
tions as shown here.
Fig. 4(a) graphically illustrates the JDD of a traditional
client-server application such as HTTP. As expected, the re-
gion with the higher concentration of edges (darker region)
is for low k2 with high k1 (and vice versa due to symmetry,
P (k1, k2) = P (k2, k1)). The concentration of edges gradu-
ally decreases as we jointly increase k1 and k2. The white
colored region at the top right corner indicates the zero prob-
ability of high degree nodes to be directly connected with
each other. This ﬁnding is also supported by the RCC met-
ric (Fig. 3). In general with TDGs, the majority of edges
connect nodes of high degree with nodes of low degree (i.e.,
dissasortive networks [10]). On the other hand, Fig. 4(c)
quantiﬁes what we originally observed in the P2P (WinMX)
visualization of Fig. 1(c), where average degree nodes are
connected with each other. This is shown with the darker
colors of the contour plot placed in the middle of the graph,
illustrating the prevalence of edges connecting “medium” de-
gree nodes. Not surprisingly, the DNS TDG (Fig. 4(b))
shows both signs of P2P (e.g., communication among some
DNS servers) as well as client-server interactions (i.e., low
degree clients connected with high degree DNS servers).
5. CONCLUSIONS AND FUTURE WORK
Two essential features in network monitoring tools dealing
with vast amounts of network data are aggregation and the
ability to spot patterns. TDGs represent a natural extension
of previous approaches that have aggregated at the packet,
ﬂow, and host levels by aggregating across nodes. The ag-
gregation across nodes also reveals patterns of social inter-
action across nodes that are speciﬁc to applications. These
interaction patterns or graph structures can then be used
to visually and quantitatively monitor existing applications
and potentially detect concealed applications and malcode.
Assuming that not many diverse application use the same
port number, port-based TDGs can be used in order to iden-
tify the type of application utilizing a given port. We en-
visage such a system working as follows. First, given any
type of edge ﬁlter (e.g., a port number) we ﬁrst construct
the TDG. Next, using graph metrics, we identify the nature
of the application on that port (e.g., if is a client-server,
peer-to-peer, or malware application). The ﬁlter selection
can be: (a) extracted automatically, triggered by an anoma-
lous behavior, such as a burst of traﬃc at some port, or by
a heavy hitter detection system (e.g., monitor the TDGs on
the ports with the most ﬂows, bytes, packets, etc.), or (b)
given a priori by the network administrator (e.g., monitor
the Web, Email, and DNS TDGs etc.). In the second sce-
nario, deviations from “normal” graph metrics can be used
to trigger an alarm.
Preliminary results show that simple visualizations includ-
ing the total number of connected components and the GCC
for various protocols, can be used to infer the nature of ap-
plications. For example, Fig. 5 shows a scatter plot for the
top ten most active ports (in number of ﬂows) for the OC48
trace. Interestingly the ports corresponding to well known
P2P applications (two ports for Soribada, one for WinMX
and two for eDonkey) show relatively small number of com-
ponents and one large GCC. In addition, it is encouraging
to see the stability in this metric since points corresponding
to multiple disjoint 300 sec intervals are clustered closely
together.
While this paper introduces the idea of TDGs as a poten-
tially promising network monitoring tool we fully realize that
much work needs to be done. Our future directions include
(a) designing eﬃcient algorithms and thresholds that can
be used to identify applications from a given TDG, (b) con-
trasting the behavior of TDGs when deployed at an access
link as well as at the central router of an enterprise network
(i.e., monitoring a large portion of the traﬃc), (c) exper-
imenting with diﬀerent edge ﬁlters, e.g., that capture the
frequency of an edge’s appearance (weight of the edge), (d)
deploying a working system that provides real-time TDGs
and traﬃc characterization at a live deployment.
Acknowledgments
The authors thank Flavio Bonomi and Ronak Desai, from
Cisco Systems, Inc., for their support throughout this work.
Finally, we would like to thank our anonymous reviewers for
their constructive comments and suggestions. Support for
this work was provided by a Cisco URP grant.
Figure 5: Scatter plot: Size of largest connected component
versus the number of connected components per destination-port
number for multiple intervals of the OC48 trace.
6. REFERENCES
[1] W. Aiello, C. Kalmanek, P. McDaniel, S. Sen,
O. Spatscheck, and J. Merwe. Analysis of Communities of
Interest in Data Networks. In Passive and Active
Measurement Conference (PAM), 2005.
[2] S. Cheung et al. The Design of GrIDS: A Graph-Based
Intrusion Detection System. UCD TR-CSE-99-2, 1999.
[3] M. Crovella and B. Krishnamurthy. Internet Measurement:
Infrastructure, Traﬃc and Applications.
John Wiley and Sons, Inc, 2006.
[4] D. Ellis, J. Aiken, A. McLeod, and D. Keppler.
Graph-based Worm Detection on Operational Enterprise
Networks. Technical Report MITRE Corporation, 2006.
[5] P. Haﬀner, S. Sen, O. Spatscheck, and D. Wang.
ACAS: Automated Construction of Application Signatures.
In ACM SIGCOMM MineNet Workshop, 2005.
[6] T. Karagiannis, K. Papagiannaki, and M. Faloutsos.
BLINC: Multi-level Traﬃc Classiﬁcation in the Dark.
In ACM SIGCOMM, 2005.
[7] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and
G. M. Voelker. Unexpected means of Protocol Inference.
In ACM Internet Measurement Conference (IMC), 2006.
[8] P. Mahadevan, D. Krioukov, K. Fall, and A. Vahdat.
Systematic Topology Analysis and Generation Using
Degree Correlations . In ACM SIGCOMM, 2006.
[9] A. Moore and D. Zuev. Internet Traﬃc Classiﬁcation using
Bayesian Analysis Techniques.
In ACM SIGMETRICS, 2005.
[10] M. Newman, A. Barabasi, and D. J. Watt. The Structure
and Dynamics of Networks. Princeton Press, 2006.
[11] G. Tan, M. Poletto, J. Guttag, and F .Kaashoek.
Role Classiﬁcation of Hosts Within Enterprise Networks
based on Connection Patterns.
In USENIX Annual Technical Conference, 2003.
[12] K. Xu, Z. Zhang, and S. Bhattacharyya. Proﬁling Internet
Backbone Traﬃc: Behavior Models and Applications.
In ACM SIGCOMM, 2005.
[13] H. Yu, M. Kaminsky, P. B. Gibbons, and A. Flaxman.
Sybilguard: Defending Against Sybil Attacks via Social
Networks. In ACM SIGCOMM, 2006.