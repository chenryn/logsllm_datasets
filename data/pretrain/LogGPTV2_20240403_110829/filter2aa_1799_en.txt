root
$O index
allocation
Filename
File 3
$OBJECT_ID
File 1
$OBJECT_ID
File 2
$OBJECT_ID
…
FIGURE 11-51 ObjId and OBJECT_ID relationships.
Quota tracking
NTFS stores quota information in the \Extend\Quota metadata file, which consists of the named 
index root attributes O and Q. Figure 11-52 shows the organization of these indexes. Just as NTFS 
assigns each security descriptor a unique internal security ID, NTFS assigns each user a unique user ID. 
When an administrator defines quota information for a user, NTFS allocates a user ID that corresponds 
to the user’s SID. In the O index, NTFS creates an entry that maps an SID to a user ID and sorts the 
index by SID; in the Q index, NTFS creates a quota control entry. A quota control entry contains the 
value of the user’s quota limits, as well as the amount of disk space the user consumes on the volume.
When an application creates a file or directory, NTFS obtains the application user’s SID and looks up 
the associated user ID in the O index. NTFS records the user ID in the new file or directory’s STANDARD_
INFORMATION attribute, which counts all disk space allocated to the file or directory against that user’s 
quota. Then NTFS looks up the quota entry in the Q index and determines whether the new allocation 
causes the user to exceed his or her warning or limit threshold. When a new allocation causes the user to 
682
CHAPTER 11
Caching and file systems
exceed a threshold, NTFS takes appropriate steps, such as logging an event to the System event log or 
not letting the user create the file or directory. As a file or directory changes size, NTFS updates the quota 
control entry associated with the user ID stored in the STANDARD_INFORMATION attribute. NTFS uses 
the NTFS generic B-tree indexing to efficiently correlate user IDs with account SIDs and, given a user ID, to 
efficiently look up a user’s quota control information.
SID taken from
application when a file
or directory is created
$O index
SID 0
User ID 0
SID 1
User ID 1
SID 2
User ID 2
User ID taken from a file’s
$STANDARD_INFORMATION
attribute during a file operation
$Q index
User ID 0
Quota entry for user 0
User ID 1
Quota entry for user 1
User ID 2
Quota entry for user 2
FIGURE 11-52 Quota indexing.
Consolidated security
NTFS has always supported security, which lets an administrator specify which users can and can’t access 
individual files and directories. NTFS optimizes disk utilization for security descriptors by using a central 
metadata file named Secure to store only one instance of each security descriptor on a volume.
The Secure file contains two index attributes—SDH (Security Descriptor Hash) and SII (Security 
ID Index)—and a data-stream attribute named SDS (Security Descriptor Stream), as Figure 11-53 
shows. NTFS assigns every unique security descriptor on a volume an internal NTFS security ID (not to 
be confused with a Windows SID, which uniquely identifies computers and user accounts) and hashes 
the security descriptor according to a simple hash algorithm. A hash is a potentially nonunique short-
hand representation of a descriptor. Entries in the SDH index map the security descriptor hashes to 
the security descriptor’s storage location within the SDS data attribute, and the SII index entries map 
NTFS security IDs to the security descriptor’s location in the SDS data attribute.
When you apply a security descriptor to a file or directory, NTFS obtains a hash of the descriptor and 
looks through the SDH index for a match. NTFS sorts the SDH index entries according to the hash of 
their corresponding security descriptor and stores the entries in a B-tree. If NTFS finds a match for the de-
scriptor in the SDH index, NTFS locates the offset of the entry’s security descriptor from the entry’s offset 
value and reads the security descriptor from the SDS attribute. If the hashes match but the security 
descriptors don’t, NTFS looks for another matching entry in the SDH index. When NTFS finds a precise 
match, the file or directory to which you’re applying the security descriptor can reference the existing 
security descriptor in the SDS attribute. NTFS makes the reference by reading the NTFS security identifier 
CHAPTER 11
Caching and file systems
683
from the SDH entry and storing it in the file or directory’s STANDARD_INFORMATION attribute. The 
NTFS STANDARD_INFORMATION attribute, which all files and directories have, stores basic information 
about a file, including its attributes, time stamp information, and security identifier.
Hash of a security
descriptor when a security
setting is applied to a
file or directory
$SDH index
Hash 1
$SDS offset
Hash 2
$SDS offset
Hash 0
$SDS offset
$SDS data stream
Security descriptor
0
Security descriptor
1
Security descriptor
2
ID taken from a file’s
$STANDARD_INFORMATION
attribute during a file or
directory security check
$SII index
NTFS security ID 0
$SDS offset
NTFS security ID 1
$SDS offset
NTFS security ID 2
$SDS offset
FIGURE 11-53 Secure indexing.
If NTFS doesn’t find in the SDH index an entry that has a security descriptor that matches the de-
scriptor you’re applying, the descriptor you’re applying is unique to the volume, and NTFS assigns the 
descriptor a new internal security ID. NTFS internal security IDs are 32-bit values, whereas SIDs are typi-
cally several times larger, so representing SIDs with NTFS security IDs saves space in the STANDARD_
INFORMATION attribute. NTFS then adds the security descriptor to the end of the SDS data attribute, 
and it adds to the SDH and SII indexes entries that reference the descriptor’s offset in the SDS data.
When an application attempts to open a file or directory, NTFS uses the SII index to look up the file 
or directory’s security descriptor. NTFS reads the file or directory’s internal security ID from the MFT 
entry’s STANDARD_INFORMATION attribute. It then uses the Secure file’s SII index to locate the ID’s 
entry in the SDS data attribute. The offset into the SDS attribute lets NTFS read the security descrip-
tor and complete the security check. NTFS stores the 32 most recently accessed security descriptors 
with their SII index entries in a cache so that it accesses the Secure file only when the SII isn’t cached.
NTFS doesn’t delete entries in the Secure file, even if no file or directory on a volume references the 
entry. Not deleting these entries doesn’t significantly decrease disk space because most volumes, even 
those used for long periods, have relatively few unique security descriptors.
NTFS’s use of generic B-tree indexing lets files and directories that have the same security settings 
efficiently share security descriptors. The SII index lets NTFS quickly look up a security descriptor in 
the Secure file while performing security checks, and the SDH index lets NTFS quickly determine 
whether a security descriptor being applied to a file or directory is already stored in the Secure file 
and can be shared.
684
CHAPTER 11
Caching and file systems
Reparse points
As described earlier in the chapter, a reparse point is a block of up to 16 KB of application-defined 
reparse data and a 32-bit reparse tag that are stored in the REPARSE_POINT attribute of a file or direc-
tory. Whenever an application creates or deletes a reparse point, NTFS updates the \Extend\Reparse 
metadata file, in which NTFS stores entries that identify the file record numbers of files and directories 
that contain reparse points. Storing the records in a central location enables NTFS to provide interfaces 
for applications to enumerate all a volume’s reparse points or just specific types of reparse points, such 
as mount points. The \Extend\Reparse file uses the generic B-tree indexing facility of NTFS by collat-
ing the file’s entries (in an index named R) by reparse point tags and file record numbers.
EXPERIMENT: Looking at different reparse points
A file or directory reparse point can contain any kind of arbitrary data. In this experiment, we use 
the built-in fsutil.exe tool to analyze the reparse point content of a symbolic link and of a Modern 
application’s AppExecutionAlias, similar to the experiment in Chapter 8. First you need to create a 
symbolic link:
C:\>mklink test_link.txt d:\Test.txt 
symbolic link created for test_link.txt > d:\Test.txt
Then you can use the fsutil reparsePoint query command to examine the reparse point content:
C:\>fsutil reparsePoint query test_link.txt 
Reparse Tag Value : 0xa000000c 
Tag value: Microsoft 
Tag value: Name Surrogate 
Tag value: Symbolic Link 
Reparse Data Length: 0x00000040 
Reparse Data: 
0000:  16 00 1e 00 00 00 16 00  00 00 00 00 64 00 3a 00  ............d.:. 
0010:  5c 00 54 00 65 00 73 00  74 00 2e 00 74 00 78 00  \.T.e.s.t...t.x. 
0020:  74 00 5c 00 3f 00 3f 00  5c 00 64 00 3a 00 5c 00  t.\.?.?.\.d.:.\. 
0030:  54 00 65 00 73 00 74 00  2e 00 74 00 78 00 74 00  T.e.s.t...t.x.t.
As expected, the content is a simple data structure (REPARSE_DATA_BUFFER, documented in 
Microsoft Docs), which contains the symbolic link target and the printed file name. You can even 
delete the reparse point by using fsutil reparsePoint delete command:
C:\>more test_link.txt 
This is a test file! 
C:\>fsutil reparsePoint delete test_link.txt 
C:\>more test_link.txt
EXPERIMENT: Looking at different reparse points
A file or directory reparse point can contain any kind of arbitrary data. In this experiment, we use 
the built-in fsutil.exe tool to analyze the reparse point content of a symbolic link and of a Modern 
application’s AppExecutionAlias, similar to the experiment in Chapter 8. First you need to create a 
symbolic link:
C:\>mklink test_link.txt d:\Test.txt
symbolic link created for test_link.txt > d:\Test.txt
Then you can use the fsutil reparsePoint query command to examine the reparse point content:
fsutil reparsePoint query command to examine the reparse point content:
fsutil reparsePoint query
C:\>fsutil reparsePoint query test_link.txt
Reparse Tag Value : 0xa000000c
Tag value: Microsoft
Tag value: Name Surrogate
Tag value: Symbolic Link
Reparse Data Length: 0x00000040
Reparse Data:
0000:  16 00 1e 00 00 00 16 00  00 00 00 00 64 00 3a 00  ............d.:.
0010:  5c 00 54 00 65 00 73 00  74 00 2e 00 74 00 78 00  \.T.e.s.t...t.x.
0020:  74 00 5c 00 3f 00 3f 00  5c 00 64 00 3a 00 5c 00  t.\.?.?.\.d.:.\.
0030:  54 00 65 00 73 00 74 00  2e 00 74 00 78 00 74 00  T.e.s.t...t.x.t.
As expected, the content is a simple data structure (REPARSE_DATA_BUFFER, documented in 
Microsoft Docs), which contains the symbolic link target and the printed file name. You can even 
delete the reparse point by using fsutil reparsePoint delete command:
C:\>more test_link.txt
This is a test file!
C:\>fsutil reparsePoint delete test_link.txt
C:\>more test_link.txt
CHAPTER 11
Caching and file systems
685
If you delete the reparse point, the file become a 0 bytes file. This is by design because the 
unnamed data stream (DATA) in the link file is empty. You can repeat the experiment with an 
AppExecutionAlias of an installed Modern application (in the following example, Spotify was used):
C:\>cd C:\Users\Andrea\AppData\Local\Microsoft\WindowsApps 
C:\Users\andrea\AppData\Local\Microsoft\WindowsApps>fsutil reparsePoint query Spotify.exe 
Reparse Tag Value : 0x8000001b 
Tag value: Microsoft 
Reparse Data Length: 0x00000178 
Reparse Data: 
0000:  03 00 00 00 53 00 70 00  6f 00 74 00 69 00 66 00  ....S.p.o.t.i.f. 
0010:  79 00 41 00 42 00 2e 00  53 00 70 00 6f 00 74 00  y.A.B...S.p.o.t. 
0020:  69 00 66 00 79 00 4d 00  75 00 73 00 69 00 63 00  i.f.y.M.u.s.i.c. 
0030:  5f 00 7a 00 70 00 64 00  6e 00 65 00 6b 00 64 00  _.z.p.d.n.e.k.d. 
0040:  72 00 7a 00 72 00 65 00  61 00 30 00 00 00 53 00  r.z.r.e.a.0...S 
0050:  70 00 6f 00 74 00 69 00  66 00 79 00 41 00 42 00  p.o.t.i.f.y.A.B. 
0060:  2e 00 53 00 70 00 6f 00  74 00 69 00 66 00 79 00  ..S.p.o.t.i.f.y. 
0070:  4d 00 75 00 73 00 69 00  63 00 5f 00 7a 00 70 00  M.u.s.i.c._.z.p. 
0080:  64 00 6e 00 65 00 6b 00  64 00 72 00 7a 00 72 00  d.n.e.k.d.r.z.r. 
0090:  65 00 61 00 30 00 21 00  53 00 70 00 6f 00 74 00  e.a.0.!.S.p.o.t. 
00a0:  69 00 66 00 79 00 00 00  43 00 3a 00 5c 00 50 00  i.f.y...C.:.\.P. 
00b0:  72 00 6f 00 67 00 72 00  61 00 6d 00 20 00 46 00  r.o.g.r.a.m. .F. 
00c0:  69 00 6c 00 65 00 73 00  5c 00 57 00 69 00 6e 00  i.l.e.s.\.W.i.n. 
00d0:  64 00 6f 00 77 00 73 00  41 00 70 00 70 00 73 00  d.o.w.s.A.p.p.s. 
00e0:  5c 00 53 00 70 00 6f 00  74 00 69 00 66 00 79 00  \.S.p.o.t.i.f.y. 
00f0:  41 00 42 00 2e 00 53 00  70 00 6f 00 74 00 69 00  A.B...S.p.o.t.i. 
0100:  66 00 79 00 4d 00 75 00  73 00 69 00 63 00 5f 00  f.y.M.u.s.i.c._. 
0110:  31 00 2e 00 39 00 34 00  2e 00 32 00 36 00 32 00  1...9.4...2.6.2. 
0120:  2e 00 30 00 5f 00 78 00  38 00 36 00 5f 00 5f 00  ..0._.x.8.6._._. 
0130:  7a 00 70 00 64 00 6e 00  65 00 6b 00 64 00 72 00  z.p.d.n.e.k.d.r. 
0140:  7a 00 72 00 65 00 61 00  30 00 5c 00 53 00 70 00  z.r.e.a.0.\.S.p. 
0150:  6f 00 74 00 69 00 66 00  79 00 4d 00 69 00 67 00  o.t.i.f.y.M.i.g. 
0160:  72 00 61 00 74 00 6f 00  72 00 2e 00 65 00 78 00  r.a.t.o.r...e.x. 
0170:  65 00 00 00 30 00 00 00                           e...0...
From the preceding output, we can see another kind of reparse point, the AppExecutionAlias, 
used by Modern applications. More information is available in Chapter 8.
Storage reserves and NTFS reservations
Windows Update and the Windows Setup application must be able to correctly apply important se-
curity updates, even when the system volume is almost full (they need to ensure that there is enough 
disk space). Windows 10 introduced Storage Reserves as a way to achieve this goal. Before we de-
scribe the Storage Reserves, it is necessary that you understand how NTFS reservations work and why 
they’re needed.
When the NTFS file system mounts a volume, it calculates the volume’s in-use and free space. No 
on-disk attributes exist for keeping track of these two counters; NTFS maintains and stores the Volume 
bitmap on disk, which represents the state of all the clusters in the volume. The NTFS mounting code 
scans the bitmap and counts the number of used clusters, which have their bit set to 1 in the bitmap, 
If you delete the reparse point, the file become a 0 bytes file. This is by design because the
unnamed data stream (DATA) in the link file is empty. You can repeat the experiment with an 
AppExecutionAlias of an installed Modern application (in the following example, Spotify was used):
C:\>cd C:\Users\Andrea\AppData\Local\Microsoft\WindowsApps
C:\Users\andrea\AppData\Local\Microsoft\WindowsApps>fsutil reparsePoint query Spotify.exe
Reparse Tag Value : 0x8000001b
Tag value: Microsoft
Reparse Data Length: 0x00000178
Reparse Data:
0000:  03 00 00 00 53 00 70 00  6f 00 74 00 69 00 66 00  ....S.p.o.t.i.f.
0010:  79 00 41 00 42 00 2e 00  53 00 70 00 6f 00 74 00  y.A.B...S.p.o.t.
0020:  69 00 66 00 79 00 4d 00  75 00 73 00 69 00 63 00  i.f.y.M.u.s.i.c.
0030:  5f 00 7a 00 70 00 64 00  6e 00 65 00 6b 00 64 00  _.z.p.d.n.e.k.d.
0040:  72 00 7a 00 72 00 65 00  61 00 30 00 00 00 53 00  r.z.r.e.a.0...S
0050:  70 00 6f 00 74 00 69 00  66 00 79 00 41 00 42 00  p.o.t.i.f.y.A.B.
0060:  2e 00 53 00 70 00 6f 00  74 00 69 00 66 00 79 00  ..S.p.o.t.i.f.y.
0070:  4d 00 75 00 73 00 69 00  63 00 5f 00 7a 00 70 00  M.u.s.i.c._.z.p.
0080:  64 00 6e 00 65 00 6b 00  64 00 72 00 7a 00 72 00  d.n.e.k.d.r.z.r.
0090:  65 00 61 00 30 00 21 00  53 00 70 00 6f 00 74 00  e.a.0.!.S.p.o.t.
00a0:  69 00 66 00 79 00 00 00  43 00 3a 00 5c 00 50 00  i.f.y...C.:.\.P.
00b0:  72 00 6f 00 67 00 72 00  61 00 6d 00 20 00 46 00  r.o.g.r.a.m. .F.
00c0:  69 00 6c 00 65 00 73 00  5c 00 57 00 69 00 6e 00  i.l.e.s.\.W.i.n.
00d0:  64 00 6f 00 77 00 73 00  41 00 70 00 70 00 73 00  d.o.w.s.A.p.p.s.
00e0:  5c 00 53 00 70 00 6f 00  74 00 69 00 66 00 79 00  \.S.p.o.t.i.f.y.
00f0:  41 00 42 00 2e 00 53 00  70 00 6f 00 74 00 69 00  A.B...S.p.o.t.i.
0100:  66 00 79 00 4d 00 75 00  73 00 69 00 63 00 5f 00  f.y.M.u.s.i.c._.
0110:  31 00 2e 00 39 00 34 00  2e 00 32 00 36 00 32 00  1...9.4...2.6.2.
0120:  2e 00 30 00 5f 00 78 00  38 00 36 00 5f 00 5f 00  ..0._.x.8.6._._.
0130:  7a 00 70 00 64 00 6e 00  65 00 6b 00 64 00 72 00  z.p.d.n.e.k.d.r.
0140:  7a 00 72 00 65 00 61 00  30 00 5c 00 53 00 70 00  z.r.e.a.0.\.S.p.
0150:  6f 00 74 00 69 00 66 00  79 00 4d 00 69 00 67 00  o.t.i.f.y.M.i.g.
0160:  72 00 61 00 74 00 6f 00  72 00 2e 00 65 00 78 00  r.a.t.o.r...e.x.
0170:  65 00 00 00 30 00 00 00                           e...0...
From the preceding output, we can see another kind of reparse point, the AppExecutionAlias, 
used by Modern applications. More information is available in Chapter 8.
686
CHAPTER 11
Caching and file systems
and, through a simple equation (total number of clusters of the volume minus the number of used 
ones), calculates the number of free clusters. The two calculated counters are stored in the volume con-
trol block (VCB) data structure, which represents the mounted volume and exists only in memory until 
the volume is dismounted.
During normal volume I/O activity, NTFS must maintain the total number of reserved clusters. This 
counter needs to exist for the following reasons:
I 
When writing to compressed and sparse files, the system must ensure that the entire file is
writable because an application that is operating on this kind of file could potentially store valid
uncompressed data on the entire file.
I 
The first time a writable image-backed section is created, the file system must reserve available
space for the entire section size, even if no physical space is still allocated in the volume.
I 
The USN Journal and TxF use the counter to ensure that there is space available for the USN log