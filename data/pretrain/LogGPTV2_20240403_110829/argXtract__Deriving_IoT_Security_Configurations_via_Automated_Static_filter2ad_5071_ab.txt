state-of-the-art disassemblers [32].
2The input disassembly is obtained via any existing disassembler and will very likely
feature the issues described in §2.
000272 b4 :
272 b4 : 4906
272 b6 : 4 a07
272 b8 : 4 b07
272 ba : 1 a9b
272 bc : dd03
272 be : 3 b04
272 c0 : 58 c8
272 c2 : 50 d0
272 c4 : dcfb
272 c6 : f002 f8c9
272 ca : f7ff ffb9
272 ce : 0000
272 d0 : 00042 c54
272 d4 : 20002 b28
272 d8 : 200031 d0
ldr r1 , [pc , #24] ;(272 d0 )
ldr r2 , [pc , #28] ;(272 d4 )
ldr r3 , [pc , #28] ;(272 d8 )
subs r3 , r3 , r2
ble .n 272 c6
subs r3 , #4
ldr r0 , [r1 , r3 ]
str r0 , [r2 , r3 ]
bgt .n 272 be
bl 2945 c 
bl 27240 
. short 0 x0000
. word 0 x00042c54
. word 0 x20002b28
. word 0 x200031d0
Figure 2: Identification of .data using Reset Handler.
located at 0x00000000 within the stripped binary [10]. Correspond-
ing interrupt handler code within the stripped binary is identified
by exploiting the fact that at least one interrupt handler is usually
the default handler, i.e., an endless loop or self-targeting branch.
argXtract examines the disassembly for self-targeting branches
and compares their addresses against VT addresses. If the final 3 hex
digits of a self-targeting branch and a VT address match, the offset is
computed as o f f set = vtAddress − sel f T arдetinдBranchAddress.
The binary disassembly is reloaded at the correct offset, to satisfy
Condition C3.
3.2 Data Identification
Stripped Cortex-M binaries do not contain section information.
Their disassembly therefore produces a block of instructions with a
.text (i.e., code) segment and often a .data segment, with no de-
marcation between the two and the .data segment misinterpreted
as code. The .text segment also has inline data, often misinter-
preted as code and resulting in value tracing errors.
The data identification component of argXtract uses informa-
tion from the Reset Handler, whose address is read from the VT, to
identify the location and correct starting address of the .data seg-
ment. It also identifies inline data using four primary sources: (i) PC-
relative memory-loads (e.g., ldr, ldrh), (ii) direct write-to-PC oper-
ations (iii) table branches (tbb, tbh), and (iv) compact switch table
helpers such as __ARM_common_switch8 and __gnu_thumb1
variants. These operations aid in satisfying Condition C2 (see §2).
We describe the data identification mechanism for each of these
sources in further detail below.
Identification of .data. The Reset Handler often contains
3.2.1
the final address of the .text segment as well as the start and end
addresses for the .data segment. This is present in the form of
consecutive memory-loads, where the first memory-load reads in
the address from which the .data segment starts and subsequent
memory-loads read the (actual) start and end addresses for the
.data segment. An example has been shown in Figure 2.
argXtract analyses instructions within the Reset Handler to
determine whether they match the required structure. If they do,
then the addresses starting after the final address of the .text seg-
ment and ending at the end of the file are marked as data, i.e., as the
.data segment. The addresses within the newly-identified .data
segment are also modified according to the information extracted
863ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Pallavi Sivakumaran and Jorge Blasco
1 a83c : 2 c17
1 a83e : d8fc
1 a840 : 4 ac7
1 a842 : 00 a3
1 a844 : 58 d3
1 a846 : 469 f
cmp
bhi .n
ldr
lsls
ldr
mov
r4 , #23
1 a83a
r2 , [pc , #796]
r3 , r4 , #2
r3 , [r2 , r3 ]
pc , r3
Figure 3: Example write-to-PC operation.
2894 a: 2 e08
2894 c: d219
2894 e: e8df f006
28952: 1 b181804
28956: 172 f2f22
2895 a: 8901
cmp
bcs .n
tbb
; data
; data
ldrh
r6 , #8
28982
[pc , r6 ]
r1 , [r0 , #8]
Figure 4: Example table branch structure.
18228:
bl
182 b0 
000182 b0 :
182 b0 :
182 b2 :
182 b4 :
182 b6 :
182 b8 :
182 ba :
182 bc :
182 be :
182 c0 :
182 c2 :
182 c4 :
182 c6 :
182 c8 :
182 ca :
182 cc :
182 ce :
182 d0 :
182 d2 :
push
cmp
blt .n
mov
subs
lsrs
movs
pop
mov
lsrs
lsrs
movs
subs
lsls
orrs
mov
pop
nop
; skips pop at 182 be
{r4 , lr }
r2 , #32
182 c0
r0 , r1
r2 , #32
r0 , r2
r1 , #0
{r4 , pc }
r3 , r1
r3 , r2
r0 , r2
r4 , #32
r2 , r4 , r2
r1 , r2
r0 , r1
r1 , r3
{r4 , pc }
from the Reset Handler. In the example in Figure 2, the memory-
loads at addresses 0x272b4 and 0x272b6 denote that the addresses
from 0x42c54 onward need to be reinterpreted as data, and need
to be re-addressed with addresses starting from 0x20002b28.
Identification of inline data via PC-relative memory-loads. A
3.2.2
memory-load that loads data from an address within the firmware
file will specify the source address relative to either the Program
Counter (PC) or a register. Register-relative loads may require
significant tracing in some cases. However, PC-relative loads are
straightforward to analyse. argXtract performs a linear scan for
PC-relative memory-loads, calculates the address from which data
is loaded and marks it as data, re-processing residual bytes as in-
structions where required.
Identification of inline data via write-to-PC operations. Direct
3.2.3
write-to-PC operations are sometimes used to accomplish code
branches. Figure 3 depicts an example. This operation loads a branch
address from an address within the firmware and writes the branch
address to the PC. The address from which the branch address is
loaded (i.e., the ldr source at 0x1a844, obtained in this example by
adding the contents of r2 and r3) must be interpreted as data, but is
misinterpreted as code within the disassembly of stripped binaries.
When a write-to-PC is encountered (at 0x1a846 in Figure 3), the
preceding integer comparison (0x1a83c) is identified and the range
of comparison values is determined using subsequent conditional
branches (0x1a83e). Instructions following the branch and until
the non-PC-relative memory-load (0x1a844) are executed for all
possible comparison values, to produce a range of addresses from
which the branch addresses are loaded. This range is marked as data.
The branch addresses are obtained by executing until the PC-write
instruction, and are used for function identification (§3.3).
Identification of inline data via table branches. Table branch
3.2.4
instructions (tbb, tbh) were introduced in the ARMv7-M architec-
ture to handle complex branching conditions. Figure 4 depicts a sam-
ple table branch instruction (at address 0x2894e). The instruction
is immediately followed by a branch table (0x28952 and 0x28956).
This table should be interpreted as data, but is misinterpreted by
disassemblers as code in the absence of debugging symbols.
In the case of table branch instructions, an index value is used
to index into the branch table. An integer comparison is performed
000182 d4 :
; not called within code
182 d4 :
ldrb
r2 , [r0 , #0]
Figure 5: Example assembly for function boundary
identification.
against the register containing this index value prior to the table
branch instruction. This provides an indication as to the size of the
branch table. In Figure 4, the comparison (0x2894c) and conditional
branch (0x2894a) indicate that the branch table has 8 entries. Be-
cause the table branch instruction in our example is tbb, the table
will consist of single-byte offsets (if the instruction had been tbh,
the table would contain halfword offsets). argXtract processes this
information and marks the 8 bytes from the PC onward as data.
Identification of inline data via compact switch helpers. Prior
3.2.5
to the introduction of table branch instructions, “helper” functions
were utilised to handle switch-case constructs. The GCC compiler
produces __gnu_thumb1 variants, while Keil produces __ARM_-
common_switch8. These helper functions have identifiable func-
tion prologues, and calls to the functions are followed by an index
table, similar to table branch instructions.
argXtract determines the locations of the helper functions and
applies function-specific processing to determine the size of the
index table. It also determines the addresses of resultant branches,
to be used by the function boundary identification module.
3.3 Function Boundary Identification
Function boundary identification is used within argXtract to en-
able function pattern matching and call execution path determina-
tion. The challenges involved in function boundary identification
have been widely studied. These include indirect function calls,
absence of specific function prologues, indeterminate location of
start instructions, absence of a clear exit point and presence of mul-
tiple exit points [90]. The presence of inline data within Cortex-M
disassembly, which may be misinterpreted as code, can further
complicate function boundary estimation [32].
argXtract’s function boundary identification is performed in
two stages. First, an initial set of high-certainty candidates for
function start addresses is generated by obtaining the addresses
of all interrupt handler functions from the Vector Table (i.e., each
interrupt handler is considered a separate function). Targets of
864argXtract: Automated Analysis of Stripped IoT Binaries
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
0 x18228 :
...
0 x182b0 :
0 x182b2 :
0 x182b4 :
0 x182b6 :
0 x182b8 :
0 x182ba :
0 x182bc :
0 x182be :
0 x182c0 :
0 x182c2 :
0 x182c4 :
0 x182c6 :
0 x182c8 :
0 x182ca :
0 x182cc :
0 x182ce :
0 x182d0 :
0 x182d2 :
0 x182d4 :
bl
0 x182b0
push
cmp
blt
mov
subs
lsrs
movs
pop
mov
lsrs
lsrs
movs
subs
lsls
orrs
mov
pop
nop
ldrb
{r4 , lr }
r2 , #0 x20
#0 x182c0
r0 , r1
r2 , #0 x20
r0 , r2
r1 , #0
{r4 , pc }
r3 , r1
r3 , r2
r0 , r2
r4 , #0 x20
r2 , r4 , r2
r1 , r2
r0 , r1
r1 , r3
{r4 , pc }
r2 , [ r0 ]
0 x18228 :
...
0x182b0:
0 x182b2 :