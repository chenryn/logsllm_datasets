### Optimization of the Text

#### Initial Setup and Computation
Initially, we can set \(\tilde{x} = x\). The result of a computation (here \(\tilde{z}\)) might exceed \(2^k - 1\). However, for our purposes, we only care about the lower \(k\) bits of \(\tilde{z}\), denoted as \(z\).

#### MACs and Vector OLE
In the SPDZ\(_{2k}\) protocol, MACs are obtained using vector OLE over rings. We describe the protocols in the \(F_{s,r}\)-hybrid model (refer to Figure 11). In Section 5.4, we detail how to instantiate this VOLE functionality.

To open a commitment \([x]\), the upper \(s\) bits of \(\tilde{x}\) need to be randomized by computing \([z] \leftarrow [x] + 2^k \cdot [r]\) with a random \(\tilde{r} \in_R \mathbb{Z}_{2^{k+s}}\). Then, \(\tilde{z}\) and \(M[z]\) are published, and the MAC equation (Equation (1)) is verified. Following [13, 31], we implement more efficient batched checks based on a random oracle in Protocol \(\Pi\) (Figure 14).

#### Functionality for vOLE
**Functionality for vOLE with key size \(s\) and message size \(r\):**

- **Init**: This method must be called first by the parties.
  - If \(V\) is honest, it samples \(\Delta \in_R \mathbb{Z}_{2^s}\) and sends \(\Delta\) to \(V\).
  - If \(V\) is corrupt, it receives \(\Delta \in \mathbb{Z}_{2^s}\) from \(S\).
  - \(\Delta\) is stored by the functionality.
  - All further Input queries are ignored.

- **Extend**: On input (Extend) from both parties, the functionality proceeds as follows:
  - If both parties are honest, sample \(x, K[x] \in_R \mathbb{Z}_{2^r}\) and compute \(M[x] \leftarrow \Delta \cdot x + K[x] \in_R \mathbb{Z}_{2^r}\).
  - If \(V\) is corrupted, it receives \(K[x] \in \mathbb{Z}_{2^r}\) from \(S\).
  - If \(P\) is corrupted, it receives \(x, M[x] \in \mathbb{Z}_{2^r}\) from \(S\) and computes \(K[x] \leftarrow M[x] - \Delta \cdot x \in \mathbb{Z}_{2^r}\).
  - \((x, M[x])\) is sent to \(P\) and \(K[x]\) is sent to \(V\).

**Figure 11:** Functionality for vOLE with key size \(s\) and message size \(r\). Based on \(F_{p,r}\) sVOLE from [31, Fig. 2].

#### Instantiation of \(F_{\mathbb{Z}_{2^k}}\)
In this section, we present two protocols, \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\) and \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-b}\), which instantiate the \(F_{\mathbb{Z}_{2^k}}\) functionality (Figure 15). These are adaptations of the Wolverine [31] and Mac'n'Cheese [4] protocols to the \(\mathbb{Z}_{2^k}\) setting and differ mainly in the implementation of the CheckMult method.

For CheckZero, we use the batched check from [13, 31] based on a random oracle \(H: \{0, 1\}^* \rightarrow \{0, 1\}^s\). First, the upper \(s\) bits (or the upper \(2s\) bits in \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-b}\)) of each value \([x_i]\) are randomized by computing \([y_i] \leftarrow [x_i] + 2^k \cdot [r_i]\) with random \(r_i\). Then, \(P\) sends the upper bits \(p_i\) of all \(\tilde{y}_i\) and a hash \(h := H(M[y_1], \ldots, M[y_n])\) to \(V\). Finally, \(V\) recomputes the MAC tags \(M[y_i]' \leftarrow \Delta \cdot 2^k \cdot p_i + K[y_i]\) and verifies that \(h = H(M[y_1]', \ldots, M[y_n]')\).

A previous version of this paper used a batched check described in SPDZ\(_{2k}\) [12] based on a random linear combination, which would have been more efficient. Unfortunately, due to a bug in their proof, this check is not sound, so we cannot use it here. A less efficient adaptation of the check could be used if one wants to avoid using a random oracle.

#### Multiplication Check in \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\)
\(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\) (Figures 12 & 13) adapts the bucketing approach from Wolverine [31]. Let \(C, B \in \mathbb{N}\) be the parameters of the bucketing scheme. To check that a collection of triples \(([a_i], [b_i], [c_i])_{i=1}^n\) satisfy a multiplicative relation, i.e., \(a_i \cdot b_i = c_i\) for \(i = 1, \ldots, n\), the prover creates a set of \(\ell := n \cdot B + C\) unchecked multiplication triples of commitments. After randomly permuting the \(\ell\) triples according to the verifier's choice, \(C\) triples are opened and checked by the verifier. The remaining \(nB\) triples are evenly distributed into \(n\) buckets. Each multiplication \((a_i \cdot b_i = c_i)\) is verified with the \(B\) triples of the corresponding bucket using a variant of Beaver's multiplication trick [5]. For the check to pass despite an invalid multiplication \(a_i \cdot b_i \neq c_i\), the adversary needs to corrupt exactly those triples that end up in the corresponding bucket for that multiplication.

#### Multiplication Check in \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-b}\)
For \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-b}\) (Figure 14), we adapt the multiplication check of Mac'n'Cheese [4], similar to the Wolverine [31] optimization for large fields and SPDZ-style [14] sacrificing of multiplication triples. The soundness of this type of check is based on the difficulty of finding a solution to a randomized equation. If a multiplicative relation does not hold, the adversary needs to guess a random field element to pass. Thus, the original scheme requires a large field to be sound. In the \(\mathbb{Z}_{2^k}\) setting, there are multiple obstacles to overcome:
- Support small values of \(k\) (e.g., \(k = 8\) or \(16\)).
- Deal with zero divisors, which complicate the check.
- Ensure the commitment scheme (Section 5.1) authenticates the lower \(k\) bits of \(\tilde{x}\) and prevents modifications of the upper bits.

We overcome these challenges by increasing the ring size from \(\mathbb{Z}_{2^{k+s}}\) to \(\mathbb{Z}_{2^{k+2s}}\), so the commitment scheme provides authenticity of values modulo \(2^{k+s}\). The additional \(s\) bits help avoid overflows when checking the correctness of multiplicative relations modulo \(2^k\) with an \(s\)-bit random challenge. Increasing the ring size leads to larger storage and communication requirements; the values \(\tilde{x}, M[x], K[x]\) now require \(k + 2s\) bits. We discuss the communication complexity of both variants in Section 6.1.1.

#### Proofs of Security
In this section, we formally state the security guarantees of our protocols and provide an overview of the corresponding proofs. Due to space limits, the complete proofs are given in Appendix E.

**Protocol \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\) (Part 1)**

- **Abort**: Each party can abort the protocol by sending the message (abort) to the other party and terminating the execution.
- **Init**: For (Init), the parties send (Init) to \(F_{s, k+s}\). \(V\) receives its global MAC key \(\Delta \in \mathbb{Z}_{2^s}\).
- **Random**: For (Random), the parties send (Extend) to \(F_{s, k+s}\) so that \(P\) receives \(M[r], r \in \mathbb{Z}_{2^{k+s}}\) and \(V\) receives \(K[r] \in \mathbb{Z}_{2^{k+s}}\) such that \(M[r] = \Delta \cdot r + K[r]\). This is denoted as \([r]\).
- **Affine Combination**: For \([z] \leftarrow \alpha_0 + \sum_{i=1}^n \alpha_i \cdot [x_i]\):
  - \(\tilde{z} \leftarrow \alpha_0 + \sum_{i=1}^n \alpha_i \cdot \tilde{x}_i\) (by \(P\)),
  - \(M[z] \leftarrow \sum_{i=1}^n \alpha_i \cdot M[x_i]\) (by \(P\)),
  - \(K[z] \leftarrow -\Delta \cdot \alpha_0 + \sum_{i=1}^n \alpha_i \cdot K[x_i]\) (by \(V\)).
- **CheckZero**: Let \(H: \{0, 1\}^* \rightarrow \{0, 1\}^s\) denote a random oracle. For (CheckZero, \([x_1], \ldots, [x_n]\)), the parties proceed as follows:
  1. If one of the \(x_i\) is not equal to 0, then \(P\) aborts.
  2. They run \([r_1], \ldots, [r_n] \leftarrow \text{Random()}\) and compute \([y_i] \leftarrow [x_i] + 2^k \cdot [r_i]\) for \(i = 1, \ldots, n\).
  3. \(P\) sends \(p_1, \ldots, p_n\) to \(V\) where \(p_i := (\tilde{y}_i - y_i)/2^k\) denotes the upper \(s\) bits of \(\tilde{y}_i\).
  4. \(P\) computes \(h \leftarrow H(M[y_1], \ldots, M[y_n])\) and sends \(h \in \{0, 1\}^{2\lambda}\) to the verifier.
  5. Finally, \(V\) computes \(M[y_i]' \leftarrow \Delta \cdot 2^k \cdot p_i + K[y_i] \in \mathbb{Z}_{2^{k+s}}\) and checks \(h = H(M[y_1]', \ldots, M[y_n]')\). If the equality holds, \(V\) outputs (success); otherwise, it aborts.
- **Input**: For (Input, \(x\)), where \(x \in \mathbb{Z}_{2^k}\) is known by \(P\), the parties first run \([r] \leftarrow \text{Random()}\). Then \(P\) sends \(\delta := x - r \mod 2^k\) to \(V\), and they compute \([x] \leftarrow [r] + \delta\).
- **Open**: For (Open, \([x_1], \ldots, [x_n]\)), \(P\) sends \(x_1, \ldots, x_n\) to \(V\), and they compute \([z_i] \leftarrow [x_i] - x_i\) for \(i = 1, \ldots, n\), followed by CheckZero\([z_1], \ldots, [z_n])\). The result of the latter is returned.

**Figure 12:** Protocol \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\) instantiating \(F_{\mathbb{Z}_{2^k}}\) using a Wolverine-like [31] multiplication check.

**Protocol \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\) (Part 2)**

- **MultiplicationCheck**: Let \(B, C \in \mathbb{N}\) be parameters of the protocol. On input (CheckMult, \([a_i], [b_i], [c_i])_{i=1}^n\), the parties proceed as follows:
  1. \(P\) aborts if \(a_i \cdot b_i \neq c_i \mod 2^k\) for some \(i = 1, \ldots, n\).
  2. Let \(\ell := n \cdot B + C\), and initialize \(lst \leftarrow \emptyset\).
  3. They compute \([x_i], [y_i])_{i=1}^\ell \leftarrow \text{Random()}\) so that \(P\) receives \((x_i, y_i)_{i=1}^\ell\).
  4. \(P\) computes \(z_i \leftarrow x_i \cdot y_i\) for \(i = 1, \ldots, \ell\), and they run \([z_i])_{i=1}^\ell \leftarrow \text{Input}(z_i)_{i=1}^\ell\).
  5. \(V\) samples a permutation \(\pi \in_R S_\ell\) and sends it to \(P\).
  6. They run \((x_{\pi(i)}, y_{\pi(i)}, z_{\pi(i)})_{i=1}^C \leftarrow \text{Open}([x_{\pi(i)}], [y_{\pi(i)}], [z_{\pi(i)}])_{i=1}^C\).
  7. \(V\) checks if \(x_{\pi(i)} \cdot y_{\pi(i)} = z_{\pi(i)}\) for \(i = 1, \ldots, C\), and aborts otherwise.
  8. For each \((a_j, b_j, c_j)\) with \(j = 1, \ldots, n\) and for each \((x_{\pi(k)}, y_{\pi(k)}, z_{\pi(k)})\) with \(k = C + (j-1) \cdot B + 1, \ldots, C + j \cdot B\), they compute:
     - \(d \leftarrow \text{Open}([a_j] - [x_{\pi(k)}], lst)\) and \(e \leftarrow \text{Open}([b_j] - [y_{\pi(k)}], lst)\).
     - \([w_k] \leftarrow [z_{\pi(k)}] - [c_j] + e \cdot [x_{\pi(k)}] + d \cdot [y_{\pi(k)}] + d \cdot e\).
  9. Finally, they run (CheckZero, \(lst, ([w_k])_{k=C+1}^\ell\)). If successful and the check in Step 7 also passed, \(V\) outputs (success) and aborts otherwise.

**Figure 13:** Protocol \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\) instantiating \(F_{\mathbb{Z}_{2^k}}\) using a Wolverine-like [31] multiplication check.

**Theorem 5.1:** The protocol \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\) (Figures 12 & 13) securely realizes the functionality \(F_{\mathbb{Z}_{2^k}}\). No environment can distinguish the real execution from a simulated one except with probability \(\epsilon \leq (q_{cz} + q_{cm}) \cdot 2^{-s+1} + q_{cm} \cdot \frac{nB+C}{(nB)^{-1}}\), where \(q_{cz}\) is the sum of calls to CheckZero and Open, and \(q_{cm}\) is the number of calls to CheckMult.

We prove the theorem in the UC model by constructing a simulator that generates a view indistinguishable from a real protocol execution. In the case of a corrupted verifier, the simulation is perfect. For a corrupted prover, the distinguishing advantage depends on the soundness properties of the CheckZero and CheckMult protocols in \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\). These are stated in the following two lemmata. The full proof of Theorem 5.1 is given in Appendix E.1.

**Lemma 5.2:** If \(P^*\) and \(V\) run the CheckZero protocol of \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\) with commitments \([x_1], \ldots, [x_n]\) and \(x_i \neq 0\) for some \(i \in \{1, \ldots, n\}\), then \(V\) outputs (success) with probability at most \(\epsilon_{cz} := 2^{-s+1}\). The CheckZero protocol is based on the batch check from [13, 31], and the proof of Lemma 5.2 is given in Appendix E.2.

**Protocol \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-b}\)**
Much of the protocol is identical to \(\Pi_{\mathbb{Z}_{2^k}}^{ComZK-a}\), although using \(F_{s, k+2s}\) (Figures 12 and 13) with the exception that the MACs are now computed differently.