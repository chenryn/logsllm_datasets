### Data and Operator Feedback

Operator F reported that our inferred convention was not precise, as it incorrectly clustered some customer interfaces. The training data had erroneously grouped these interfaces (false positives in the ITDK), and our algorithm had no opportunity to learn the correct convention. In contrast, Operator C confirmed that our convention was accurate but provided a second regex to filter hostnames assigned to customer interfaces. Our training data included 299 customer interface hostnames, with 298 correctly not matching our naming convention. The filter regex would have filtered the single stale hostname we classified as a false positive; however, we require a regex to filter at least three false positives from different routers for it to be included in the convention.

### Follow-Up Probing Results

Table 5 summarizes the results of follow-up probing to investigate incongruities with the ITDK. False negatives in the training data manifest as false positives in the evaluation, which are actually true positives.

| Training Set | Application Set |
|--------------|-----------------|
| **Good**     | 98 (27.7%)      | 112 (24.0%)    |
| **Promising**| 28 (17.3%)      | 85 (34.4%)     |
| **Unresponsive** | 6281 (75.1%)   | 6866 (45.1%)   |
| **True Negatives** | 429 (69.8%)   | 1217 (66.4%)   |

### Alias Resolution Gain

We applied the 800 naming conventions classified as good to the April 2019 ITDK. There were 18,208 routers with hostnames across these 800 suffixes. Applying the conventions to other router interfaces in the application set, we inferred an additional 19,136 routers, resulting in a 105% gain. Figure 13 shows the cumulative distribution function (CCDF) of the alias resolution gain per additional naming convention. Of the 800 conventions, 619 (77.4%) inferred additional aliases, while 181 (22.6%) provided no gain. The top 10 suffixes provided 41.7% of the gain, and an additional 90 conventions provided another 43.6% gain. The remaining 14.7% gain required applying 519 more conventions. These results highlight the benefits of our automated approach, as manually building regexes is labor-intensive and yields diminishing returns in the long tail.

### Evaluation of IPv4 Regexes against IPv6

Two ITDK datasets (August 2017 and January 2019) contain router-level graphs inferred using Speedtrap [16]. We applied the conventions classified as good for the IPv4 graph to the IPv6 graph. For August 2017, there were 107 suffixes in IPv6 with at least one training router, and our conventions predicted the clustering of hostnames for 86.3% of these suffixes with no false positives. For January 2019, there were 60 suffixes in IPv6 with at least one training router, and our conventions predicted the clustering of hostnames for 84.5% of these suffixes with no false positives.

Operator B (ยง7.1) assigned hostnames to IPv6-addressed router interfaces. Our training set for this network in IPv6 consisted of a single router. When we applied our IPv4 naming convention to their IPv6 router interface hostnames, we found 147 hostnames on 40 routers. The operator confirmed that they used a consistent naming convention across address types, and that IPv4 and IPv6 hostnames with the same extracted name belonged to the same router.

### Applying IPv4-Inferred Conventions to IPv6 Topology

For the January 2019 ITDK, there were 192 suffixes where our naming conventions applied, with 124 having no routers in the training set and only 416 routers in the set that did. After applying our naming conventions to the router interfaces in the application set, we inferred 3757 routers, a 9.0 multiplier, and nearly an order of magnitude more routers than we started with.

### Conclusion

We designed, implemented, evaluated, and validated a system that automatically learns to extract router names. Our algorithm builds naming conventions in phases, learning to build specificity into regexes. We publicly release our source code implementation as part of scamper [15] and our inferred conventions [17], allowing researchers to investigate IPv4 and IPv6 router-level congruity in the Internet. Using our system, we find 9.0 times more IPv6 routers and 105% more IPv4 routers than we started with, in applicable suffixes. Further, our conventions can guide follow-up probing to improve the accuracy of current Internet-scale alias resolution techniques and provide a sound basis for new learning systems that use hostnames to infer router ownership, link speeds, and roles of routers in the Internet ecosystem.

### Acknowledgments

We thank Robert Beverly for providing detailed feedback and compute resources during the development of our system, Young Hyun and Ken Keys for assistance with the ITDK, and the anonymous reviewers for their helpful comments. This work was supported by NSF CNS-1513283 and the Department of Homeland Security (DHS) Science and Technology Directorate, Cyber Security Division (DHS S&T/CSD) via contract number 70RSAT18CB0000013 and cooperative agreement FA8750-18-2-0049. This paper represents only the position of the authors.

### References

[References listed here as in the original text]

This version of the text is more structured and clearly presents the information, making it easier to follow and understand.