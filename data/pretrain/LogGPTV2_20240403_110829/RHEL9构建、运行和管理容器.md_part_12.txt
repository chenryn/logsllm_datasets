::: titlepage
# []{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html#con_adding-software-to-a-ubi-container-on-a-subscribed-host_assembly_adding-software-to-a-running-ubi-container}在订阅的主机上将软件添加到 UBI 容器中 {.title}
:::
如果您在注册和订阅的 RHEL 主机上运行 UBI 容器，会在标准 UBI 容器以及所有
UBI 软件仓库中启用 RHEL Base 和 AppStream 存储库。
::: itemizedlist
**其他资源**
-   [通用基础镜像(UBI)：镜像、存储库、软件包和源代码](https://access.redhat.com/articles/4238681){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html#proc_adding-software-in-a-standard-ubi-container_assembly_adding-software-to-a-running-ubi-container}在标准 UBI 容器中添加软件 {.title}
:::
要在标准 UBI 容器中添加软件，请禁用非 UBI dnf
存储库，以确保您构建的容器可以被重新分发。
::: orderedlist
**流程**
1.  拉取并运行 `registry.access.redhat.com/ubi8/ubi`{.literal} 镜像：
    ``` literallayout
    $ podman run -it --name myubi registry.access.redhat.com/ubi8/ubi
    ```
2.  将软件包添加到 `myubi`{.literal} 容器。
    ::: itemizedlist
    -   要添加在 UBI 存储库中的软件包，请禁用除 UBI 软件仓库以外的所有
        dnf 软件仓库。例如，要添加 `bzip2`{.literal} 软件包：
        ``` literallayout
        # dnf install --disablerepo=* --enablerepo=ubi-8-appstream --enablerepo=ubi-8-baseos bzip2
        ```
    -   要添加不在 UBI
        存储库中的软件包，请不要禁用任何存储库。例如，要添加
        `zsh`{.literal} 软件包：
        ``` literallayout
        # dnf install zsh
        ```
    -   要添加位于不同主机存储库中的软件包，请明确启用您需要的存储库。例如，要安装
        `codeready-builder-for-rhel-8-x86_64-rpms`{.literal} 存储库中的
        `python38-devel`{.literal} 软件包：
        ``` literallayout
        # dnf install --enablerepo=codeready-builder-for-rhel-8-x86_64-rpms  python38-devel
        ```
    :::
:::
::: orderedlist
**验证步骤**
1.  列出容器内所有启用的存储库：
    ``` literallayout
    # dnf repolist
    ```
2.  确保列出了所需的存储库。
3.  列出所有安装的软件包：
    ``` screen
    # rpm -qa
    ```
4.  确保列出了所需的软件包。
    ::: variablelist
    [注意]{.term}
    :   安装不在 Red Hat UBI 存储库中的红帽软件包可能会限制在订阅的 RHEL
        系统外分发容器的功能。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html#proc_adding-software-in-a-minimal-ubi-container_assembly_adding-software-to-a-running-ubi-container}在最小的 UBI 容器中添加软件 {.title}
:::
UBI dnf 软件仓库默认在 UBI Minimal 镜像中启用。
::: orderedlist
**流程**
1.  拉取并运行 `registry.access.redhat.com/ubi8/ubi-minimal`{.literal}
    镜像：
    ``` literallayout
    $ podman run -it --name myubimin registry.access.redhat.com/ubi8/ubi-minimal
    ```
2.  将软件包添加到 `myubimin`{.literal} 容器：
    ::: itemizedlist
    -   要添加 UBI 存储库中的软件包，请不要禁用任何存储库。例如，要添加
        `bzip2`{.literal} 软件包：
        ``` literallayout
        # microdnf install bzip2
        ```
    -   要添加位于不同主机存储库中的软件包，请明确启用您需要的存储库。例如，要安装
        `codeready-builder-for-rhel-8-x86_64-rpms`{.literal} 存储库中的
        `python38-devel`{.literal} 软件包：
        ``` literallayout
        # microdnf install --enablerepo=codeready-builder-for-rhel-8-x86_64-rpms  python38-devel
        ```
    :::
:::
::: orderedlist
**验证步骤**
1.  列出容器内所有启用的存储库：
    ``` screen
    # microdnf repolist
    ```
2.  确保列出了所需的存储库。
3.  列出所有安装的软件包：
    ``` screen
    # rpm -qa
    ```
4.  确保列出了所需的软件包。
    ::: variablelist
    [注意]{.term}
    :   安装不在 Red Hat UBI 存储库中的红帽软件包可能会限制在订阅的 RHEL
        系统外分发容器的功能。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html#proc_adding-software-to-a-ubi-container-on-a-unsubscribed-host_assembly_adding-software-to-a-running-ubi-container}将软件添加到未订阅的主机上的 UBI 容器中 {.title}
:::
在未订阅的 RHEL 系统上添加软件包时，您不必禁用任何存储库。
::: itemizedlist
**流程**
-   将软件包添加到基于 UBI 标准或 UBI init
    镜像的正在运行的容器中。不要禁用任何存储库。使用
    `podman run`{.literal} 命令运行容器，然后使用
    `dnf install`{.literal} 命令在容器内使用。
    ::: itemizedlist
    -   例如，要将 `bzip2`{.literal} 软件包添加到基于 UBI 标准的容器中：
        ``` literallayout
        $ podman run -it --name myubi registry.access.redhat.com/ubi8/ubi
        # dnf install bzip2
        ```
        ::: orderedlist
        1.  例如，要将 `bzip2`{.literal} 软件包添加到基于 UBI init
            的容器中：
            ``` literallayout
            $ podman run -it --name myubimin registry.access.redhat.com/ubi8/ubi-minimal
            # microdnf install bzip2
            ```
        :::
    :::
:::
::: orderedlist
**验证步骤**
1.  列出所有启用的存储库：
    ::: itemizedlist
    -   要列出基于 UBI 标准或 UBI init 镜像的容器中所有启用的存储库：
        ``` literallayout
        #  dnf repolist
        ```
    -   要列出基于 UBI 最小容器的容器中所有启用的存储库：
        ``` screen
        # microdnf repolist
        ```
    :::
2.  确保列出了所需的存储库。
3.  列出所有安装的软件包：
    ``` screen
    # rpm -qa
    ```
4.  确保列出了所需的软件包。
:::
:::
::: section
::: titlepage
# []{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html#proc_building-ubi-based-images_assembly_adding-software-to-a-running-ubi-container}构建基于 UBI 的镜像 {.title}
:::
您可以使用 Buildah 工具从 `Containerfile`{.literal} 创建基于 UBI 的 web
服务器容器。您必须禁用所有非UBI dnf
软件仓库，以确保您的镜像只包含可重新分发的红帽软件。
::: variablelist
[注意]{.term}
:   对于 UBI 最小镜像，使用 `microdnf`{.literal} 而不是使用
    `dnf`{.literal} ：
    ``` screen
    RUN microdnf update -y && rm -rf /var/cache/yum
    RUN microdnf install httpd -y && microdnf clean all
    ```
:::
::: orderedlist
**流程**
1.  创建 `Containerfile`{.literal} ：
    ``` literallayout
    FROM registry.access.redhat.com/ubi8/ubi
    USER root
    LABEL maintainer="John Doe"
    # Update image
    RUN dnf update --disablerepo=* --enablerepo=ubi-8-appstream --enablerepo=ubi-8-baseos -y && rm -rf /var/cache/yum
    RUN dnf install --disablerepo=* --enablerepo=ubi-8-appstream --enablerepo=ubi-8-baseos httpd -y && rm -rf /var/cache/yum
    # Add default Web page and expose port
    RUN echo "The Web Server is Running" > /var/www/html/index.html
    EXPOSE 80
    # Start the service
    CMD ["-D", "FOREGROUND"]
    ENTRYPOINT ["/usr/sbin/httpd"]
    ```
2.  构建容器镜像：
    ``` literallayout
    # buildah bud -t johndoe/webserver .
    STEP 1: FROM registry.access.redhat.com/ubi8/ubi:latest
    STEP 2: USER root
    STEP 3: LABEL maintainer="John Doe"
    STEP 4: RUN dnf update --disablerepo=* --enablerepo=ubi-8-appstream --enablerepo=ubi-8-baseos -y
    ...
    Writing manifest to image destination
    Storing signatures
    --> f9874f27050
    f9874f270500c255b950e751e53d37c6f8f6dba13425d42f30c2a8ef26b769f2
    ```
:::
::: orderedlist
**验证步骤**
1.  运行 web 服务器：
    ``` literallayout
    # podman run -d --name=myweb -p 80:80 johndoe/webserver
    bbe98c71d18720d966e4567949888dc4fb86eec7d304e785d5177168a5965f64
    ```
2.  测试 Web 服务器：
    ``` literallayout
    # curl http://localhost/index.html
    The Web Server is Running
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html#con_using-application-stream-runtime-images_assembly_adding-software-to-a-running-ubi-container}使用 Application Stream 运行时镜像 {.title}
:::
基于 [Application
Streams](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/installing_managing_and_removing_user-space_components/using-appstream_using-appstream#application-streams_using-appstream){.link}
的运行时镜像提供了一组容器镜像，您可以将它们用作容器构建的基础。
支持的运行时镜像有 Python、Ruby、s2-core、s2i-base、.NET
Core、PHP。[红帽容器目录](https://catalog.redhat.com/software/containers/search?p=1&product_listings_names=Red%20Hat%20Enterprise%20Linux%208&application_categories_list=Programming%20Languages%20%26%20Runtimes){.link}
中提供运行时镜像。
::: variablelist
[注意]{.term}
:   由于这些 UBI 镜像包含与旧镜像相同基本软件，因此您可以从 [使用 Red
    Hat Software Collections Container Images
    指南](https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html-single/using_red_hat_software_collections_container_images/index){.link}
    中了解这些镜像。
:::
::: itemizedlist
**其他资源**
-   [红帽容器目录](https://access.redhat.com/containers){.link}
-   [红帽容器镜像更新](https://access.redhat.com/articles/2208321){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html#proc_getting-ubi-container-image-source-code_assembly_adding-software-to-a-running-ubi-container}获取 UBI 容器镜像源代码 {.title}
:::
源代码以可下载容器镜像的形式提供给所有基于 UBI
的红帽镜像。虽然源容器镜像被打包为容器，但无法运行。要在您的系统上安装红帽源容器镜像，请使用
`skopeo`{.literal} 命令，而不是 `podman pull`{.literal} 命令。
源容器镜像根据其代表的二进制容器命名。例如,对于特定标准 RHEL UBI 8 容器
`registry.access.redhat.com/ubi8:8/1397`{.literal} 附加
`-source`{.literal}
以获取源容器镜像（`registry.access.redhat.com/ubi8:8/1397-source`{.literal}）。
::: orderedlist
**流程**
1.  使用 `skopeo copy`{.literal} 命令将源容器镜像复制到本地目录中：
    ``` literallayout
    $ skopeo copy \
    docker://registry.access.redhat.com/ubi8:8.1-397-source \
    dir:$HOME/TEST
    ...
    Copying blob 477bc8106765 done
    Copying blob c438818481d3 done
    ...
    Writing manifest to image destination
    Storing signatures
    ```
2.  使用 `skopeo inspect`{.literal} 命令检查源容器镜像：
    ``` literallayout
    $ skopeo inspect dir:$HOME/TEST
    {
        "Digest": "sha256:7ab721ef3305271bbb629a6db065c59bbeb87bc53e7cbf88e2953a1217ba7322",
        "RepoTags": [],
        "Created": "2020-02-11T12:14:18.612461174Z",
        "DockerVersion": "",
        "Labels": null,
        "Architecture": "amd64",
        "Os": "linux",
        "Layers": [
            "sha256:1ae73d938ab9f11718d0f6a4148eb07d38ac1c0a70b1d03e751de8bf3c2c87fa",
            "sha256:9fe966885cb8712c47efe5ecc2eaa0797a0d5ffb8b119c4bd4b400cc9e255421",
            "sha256:61b2527a4b836a4efbb82dfd449c0556c0f769570a6c02e112f88f8bbcd90166",
            ...
            "sha256:cc56c782b513e2bdd2cc2af77b69e13df4ab624ddb856c4d086206b46b9b9e5f",
            "sha256:dcf9396fdada4e6c1ce667b306b7f08a83c9e6b39d0955c481b8ea5b2a465b32",
            "sha256:feb6d2ae252402ea6a6fca8a158a7d32c7e4572db0e6e5a5eab15d4e0777951e"