// host_alarm.c
#include 
#include 
#include 
#include 
#include 
#define OUT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); goto out; }
// Structure for the IPC message we will receive from the clock
typedef struct msg_format_recv_s {
mach_msg_header_t header;
int data;
mach_msg_trailer_t trailer;
} msg_format_recv_t;
int
main()
{
kern_return_t kr;
clock_serv_t clk_system;
mach_timespec_t alarm_time;
clock_reply_t alarm_port;
struct timeval t1, t2;
msg_format_recv_t message;
mach_port_t mytask;
// The C library optimized this call by returning the task port's value
// that it caches in the mach_task_self_ variable
mytask = mach_task_self();
kr = host_get_clock_service(mach_host_self(), SYSTEM_CLOCK,
(clock_serv_t *)&clk_system);
OUT_ON_MACH_ERROR("host_get_clock_service", kr);
// Let us set the alarm to ring after 2.5 seconds
alarm_time.tv_sec = 2;
alarm_time.tv_nsec = 50000000;
// Allocate a port (specifically, get receive right for the new port)
// We will use this port to receive the alarm message from the clock
kr = mach_port_allocate(
mytask, // the task acquiring the port right
MACH_PORT_RIGHT_RECEIVE, // type of right
&alarm_port); // task's name for the port right
OUT_ON_MACH_ERROR("mach_port_allocate", kr);
gettimeofday(&t1, NULL);
// Set the alarm
kr = clock_alarm(clk_system, // the clock to use
TIME_RELATIVE, // how to interpret alarm time
alarm_time, // the alarm time
alarm_port); // this port will receive the alarm message
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 19 of 137
OUT_ON_MACH_ERROR("clock_alarm", kr);
printf("Current time %ld s + %d us\n"
"Setting alarm to ring after %d s + %d ns\n",
t1.tv_sec, t1.tv_usec, alarm_time.tv_sec, alarm_time.tv_nsec);
// Wait to receive the alarm message (we will block here)
kr = mach_msg(&(message.header), // the message buffer
MACH_RCV_MSG, // message option bits
0, // send size (we are receiving, so 0)
message.header.msgh_size,// receive limit
alarm_port, // receive right
MACH_MSG_TIMEOUT_NONE, // no timeout
MACH_PORT_NULL); // no timeout notification port
// We should have received an alarm message at this point
gettimeofday(&t2, NULL);
OUT_ON_MACH_ERROR("mach_msg", kr);
if (t2.tv_usec 
#include 
#include 
// Wrapper function with error checking
kern_return_t
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 20 of 137
do_host_statistics(host_name_port_t host,
host_flavor_t flavor,
host_info_t info,
mach_msg_type_number_t *count)
{
kern_return_t kr;
kr = host_statistics(host, // control port for the host
flavor, // type of statistics desired
(host_info_t)info, // out buffer
count); // in/out size of buffer
if (kr != KERN_SUCCESS) {
(void)mach_port_deallocate(mach_task_self(), host);
mach_error("host_info:", kr);
exit(1);
}
return kr;
}
int
main()
{
kern_return_t kr;
host_name_port_t host;
mach_msg_type_number_t count;
vm_size_t page_size;
host_load_info_data_t load_info;
host_cpu_load_info_data_t cpu_load_info;
vm_statistics_data_t vm_stat;
host = mach_host_self();
count = HOST_LOAD_INFO_COUNT;
// Get system loading statistics
kr = do_host_statistics(host, HOST_LOAD_INFO, (host_info_t)&load_info,
&count);
count = HOST_VM_INFO_COUNT;
// Get virtual memory statistics
kr = do_host_statistics(host, HOST_VM_INFO, (host_info_t)&vm_stat, &count);
count = HOST_CPU_LOAD_INFO_COUNT;
// Get CPU load statistics
kr = do_host_statistics(host, HOST_CPU_LOAD_INFO,
(host_info_t)&cpu_load_info, &count);
kr = host_page_size(host, &page_size);
printf("Host statistics:\n");
// (average # of runnable processes) / (# of CPUs)
printf("Host load statistics\n");
printf(" time period (sec) %5s%10s%10s\n", "5", "30", "60");
printf(" load average %10u%10u%10u\n", load_info.avenrun[0],
load_info.avenrun[1], load_info.avenrun[2]);
printf(" Mach factor %10u%10u%10u\n", load_info.mach_factor[0],
load_info.mach_factor[1], load_info.mach_factor[2]);
printf("\n");
printf("Cumulative CPU load statistics\n");
printf(" User state ticks = %u\n",
cpu_load_info.cpu_ticks[CPU_STATE_USER]);
printf(" System state ticks = %u\n",
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 21 of 137
cpu_load_info.cpu_ticks[CPU_STATE_SYSTEM]);
printf(" Nice state ticks = %u\n",
cpu_load_info.cpu_ticks[CPU_STATE_NICE]);
printf(" Idle state ticks = %u\n",
cpu_load_info.cpu_ticks[CPU_STATE_IDLE]);
printf("\n");
printf("Virtual memory statistics\n");
printf(" page size = %u bytes\n", page_size);
printf(" pages free = %u\n", vm_stat.free_count);
printf(" pages active = %u\n", vm_stat.active_count);
printf(" pages inactive = %u\n", vm_stat.inactive_count);
printf(" pages wired down = %u\n", vm_stat.wire_count);
printf(" zero fill pages = %u\n", vm_stat.zero_fill_count);
printf(" pages reactivated = %u\n", vm_stat.reactivations);
printf(" pageins = %u\n", vm_stat.pageins);
printf(" pageouts = %u\n", vm_stat.pageouts);
printf(" translation faults = %u\n", vm_stat.faults);
printf(" copy-on-write faults = %u\n", vm_stat.cow_faults);
printf(" object cache lookups = %u\n", vm_stat.lookups);
printf(" object cache hits = %u (hit rate %2.2f %%)\n", vm_stat.hits,
100 * (double)vm_stat.hits/(double)vm_stat.lookups);
exit(0);
}
$ gcc -Wall -o host_statistics host_statistics.c
$ ./host_statistics
Host statistics:
Host load statistics
time period (sec) 5 30 60
load average 276 233 70
Mach factor 1685 1589 1609
Cumulative CPU load statistics
User state ticks = 109098
System state ticks = 41056
Nice state ticks = 535
Idle state ticks = 1974855
Virtual memory statistics
page size = 4096 bytes
pages free = 434154
pages active = 70311
pages inactive = 236301
pages wired down = 45666
zero fill pages = 2266643
pages reactivated = 0
pageins = 55952
pageouts = 0
translation faults = 4549671
copy-on-write faults = 83912
object cache lookups = 36028
object cache hits = 19120 (hit rate 53.07 %)
6.4. Entering the Kernel
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 22 of 137
On a typical operating system, user processes are logically insulated from the kernel's memory by
using different processor execution modes. The Mac OS X kernel executes in a higher-privileged
mode (PowerPC OEA) than any user program (PowerPC UISA and VEA). Each user processthat is,
each Mach taskhas its own virtual address space. Similarly, the kernel has its own, distinct virtual
address space that does not occupy a subrange of the maximum possible address space of a user
process. Specifically, the Mac OS X kernel has a private 32-bit (4GB) virtual address space, and so
does each 32-bit user process. Similarly, a 64-bit user process also gets a private virtual address space
that is not subdivided into kernel and user parts.
Although the Mac OS X user and kernel virtual address spaces are not subdivisions of a single virtual
address space, the amounts of virtual memory usable within both are restricted due to conventional
mappings. For example, kernel addresses in the 32-bit kernel virtual address space lie between
0x1000 and 0xDFFFFFFF (3.5GB). Similarly, the amount of virtual memory a 32-bit user process can
use is significantly less than 4GB, since various system libraries are mapped by default into each user
address space. We will see specific examples of such mappings in Chapter 8.
We will refer to the kernel virtual address space simply as the kernel space. Moreover, even though
each user process has its own address space, we will often use the phrase the user space when the
specific process is not relevant. In this sense, we can think of all user processes as residing in the user
space. The following are some important characteristics of the kernel and user spaces.
The kernel space is inaccessible to user tasks. The kernel enforces this protection by using
memory management hardware to create a boundary between kernel-level and user-level code.
The user space is fully accessible to the kernel.
The kernel normally prevents one user task from modifying, or even accessing, another task's
memory. However, such protection is usually subject to task and system ownership. For
example, there exist kernel-provided mechanisms through which a task T1 can access the
address space of another task T2 if T1 is running with root privileges, or if T1 and T2 are both
owned by the same user. Tasks can also explicitly share memory with other tasks.
The user space cannot directly access hardware. However, it is possible to have user-space
device drivers that access hardware after mediation by the kernel.
Since the kernel mediates access to physical resources, a user program must exchange information
with the kernel to avail the kernel's services. Typical user-space execution requires exchange of both
control information and data. In such an exchange between a Mach task and the kernel, a thread
within the task transitions to kernel space from user space, transferring control to the kernel. After
handling the user thread's request, the kernel returns control back to the thread, allowing it to continue
normal execution. At other times, the kernel can acquire control even though the current thread was
not involved in the reason for the transferin fact, the transfer is often not explicitly requested by the
programmer. We refer to execution within the kernel and user spaces as being in the kernel mode and
the user mode, respectively.
A Modal Dialog
Technically, even the Mac OS X kernel mode can be thought of as consisting of two
submodes. The first mode refers to the environment in which the kernel's own threads
runthat is, the kernel task and its resources. The kernel task is a proper Mach task (it is
the first Mach task to be created) that runs several dozen kernel threads on a typical
system.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 23 of 137
The second mode refers to threads running in the kernel after they enter the kernel from
user space through a system callthat is, threads trap from user space into the kernel.
Kernel subsystems that need to be aware of the two modes may handle them differently.
6.4.1. Types of Control Transfer
Although such transfers of control are traditionally divided into categories based on the events that
caused them, at the PowerPC processor level, all categories are handled by the same exception
mechanism. Examples of events that can cause the processor to change execution mode include the
following:
External signals, such as from the interrupt controller hardware
Abnormal conditions encountered while executing an instruction
Expected system events such as rescheduling and page faults
Trace exceptions caused by deliberate enabling of single-stepping (setting the SE bit of the
MSR) or branch-tracing (setting the BE bit of the MSR)
Conditions internal to the processor, such as the detection of a parity error in the L1 D-cache
Execution of the system call instruction
Nevertheless, it is still useful to categorize control transfers in Mac OS X based on the events causing
them. Let us look at some broad categories.
6.4.1.1. External Hardware Interrupts
An external hardware interrupt is a transfer of control into the kernel that is typically initiated by a
hardware device to indicate an event. Such interrupts are signaled to the processor by the assertion of
the processor's external interrupt input signal, which causes an external interrupt exception in the
processor. External interrupts are asynchronous, and their occurrence is typically unrelated to the
currently executing thread. Note that external interrupts can be masked.
An example of an external interrupt is a storage device controller causing an interrupt to signal the
completion of an I/O request. On certain processors, such as the 970FX, a thermal exceptionused to
notify the processor of an abnormal conditionis signaled by the assertion of the thermal interrupt input
signal. In this case, even though the abnormal condition is internal to the processor, the source of the
interrupt is external.
6.4.1.2. Processor Traps
A processor trap is a transfer of control into the kernel that is initiated by the processor itself because
of some event that needs attention. Processor traps may be synchronous or asynchronous. Although
the conditions that cause traps could all be termed abnormal in that they are all exceptional (hence the
exception), it is helpful to subclassify them as expected (such as page faults) or unexpected (such as a
hardware failure). Other examples of reasons for traps include divide-by-zero errors, completion of a
traced instruction, illegal access to memory, and the execution of an illegal instruction.
6.4.1.3. Software Traps
The Mac OS X kernel implements a mechanism called asynchronous system traps (ASTs), wherein
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 24 of 137
one or more reason bits can be set by software for a processor or a thread. Each bit represents a
particular software trap. When a processor is about to return from an interrupt context, including
returns from system calls, it checks for these bits, and takes a trap if it finds one. The latter operation
involves executing the corresponding interrupt-handling code. A thread checks for such traps in many
cases when it is about to change its execution state, such as from being suspended to running. The
kernel's clock interrupt handler also periodically checks for ASTs. We categorize ASTs on Mac OS X
as software traps because they are both initiated and handled by software. Some AST