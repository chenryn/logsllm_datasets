the man behind the curtain. It provides the mapping that makes it possible to use the 
same API calls for local files, remote files, named pipes, mailslots, and WebDAV 
shares. The following sections cover some security-relevant elements of the 
redirector without the distraction of unnecessary details. 
Universal Naming Convention 
Universal Naming Convention (UNC) paths were mentioned briefly in Chapter 11(? 
[????.]). For networking purposes, a UNC path provides a standardized way of 
referencing files and devices across networked systems. UNC paths take the following 
form: 
\\server\share\path 
The server is simply the name of the system; depending on the environment, it can be 
a NETBIOS name, an IP address, or a qualified DNS name. Supplying a period (.) 
character for the server is an alias for the local system. The share is the exported 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
702 
name assigned to a directory or device on the remote system. Finally, the path is just 
the qualified path to a file. 
Session Credentials 
Chapter 11(? [????.]) discussed how user logon sessions are containers for tokens 
associated with a user logon, but this explanation can be expanded to include 
connections to remote systems. Connecting to any remote system generates a set of 
session credentials for that machine, and these credentials are stored in the logon 
session. A logon session can have at most one session credential for each remote 
system. 
To understand how this works, consider a connection to the remote share stuff on 
the host Bob; the UNC path for this share is \\Bob\stuff. You can map this share to the 
drive letter X with the following command: 
net use X: \\Bob\stuff 
Now any references to the X: drive are redirected to the stuff share on Bob. One thing 
you may notice about this command line is that no explicit credentials are passed for 
connecting to this share. The credentials are not passed explicitly because the OS 
passed the existing logon session credentials automatically. This implicit behavior is 
what saves you the trouble of reentering your password in an NT Domain or Active 
Directory environment. However, it can be the source of some issues when the 
remote system isn't in a trusted domain. 
Assume that you and Bob aren't in the same domain. This means Bob's computer has 
an account matching your user name and password, or he has enabled anonymous 
access for the share. So you poke around a bit and discover that Bob does in fact allow 
anonymous access to the share, but these credentials are insufficient to access the 
share's contents. Fortunately, Bob is a friend and you have an account on his 
computer. So you can simply run the following command to connect with the 
appropriate credentials: 
net use Y: \\Bob\stuff /user:Bob\Joe 
This command should allow you to log on to Bob's system as a local user named Joe; 
issuing this command then displays a prompt for Joe's password. Unfortunately, the 
password still won't work at this time. To see why, just issue a net use command with 
no arguments. You will see that the logon session still has your connection to Bob's 
computer from when you mapped the X: drive. Remember that Windows allows only 
one set of session credentials for a remote server from a logon session. The 
anonymous connection to X: already established a session, so you need to disconnect 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
703 
that existing session before you can log on as Joe. You can unmap the X: drive with 
the following command: 
net use X: /D 
After unmapping the X: drive, you can successfully establish a new connection to 
Bob's system. This example should demonstrate that a logon session can maintain 
only one set of session credentials per remote system. This restriction isn't just 
limited to file shares. It's a core part of the security model and applies to all network 
IPC mechanisms using built-in Windows authentication. 
SMB Relay Attack 
The previous section stated that Windows passes your credentials automatically when 
connecting to another system, but this isn't exactly true. In traditional Windows 
authentication, the server actually presents the client with a random challenge value. 
The client then responds with a message authentication code (MAC) incorporating the 
password hash and challenge value. This challenge sequence is how LAN Manager (LM) 
and NT LAN Manager (NTLM) authentication avoid presenting the password hash to a 
potentially malicious server. 
The downside to this authentication mechanism is that the server's identity is never 
verified. As a result, LM and NTLM authentication are vulnerable to a type of 
man-in-the-middle attack known as an SMB relay or SMB proxy attack. To exploit 
this vulnerability, an attacker causes a victim to establish a Server Message Block 
(SMB) connection to an attacker-controlled system. This could be done by e-mailing 
the victim a link to a UNC file path or through a variety of other means. The attacker 
then initiates a connection to a target system and acts as a proxy between the victim 
and the target. After the challenge exchange is completed, the attacker is connected 
to the target server with the victim's credentials. As an auditor, you need to be aware 
of situations in which an application can be coerced into connecting to untrusted 
machines, as it can expose the application's credentials to these attacks. 
Impersonation 
Impersonation is one of the components that might be most responsible for Windows 
popularity in enterprise environments. It allows credentials to be transferred 
automatically to processes in another session on the same machine or a different 
system. Impersonation is one of the foundational components of Windows single 
sign-on (SSO) capability. However, all the flexibility and convenience of this system 
does require devoting some extra care to its use. 
Impersonation plays a major role in implementing security for Remote Procedure Call 
(RPC) and Distributed Component Object Model (DCOM) services, Dynamic Data 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
704 
Exchange (DDE) client/servers, and named pipe client/servers. The functions of each 
of these IPC mechanisms are covered individually over the course of this chapter, but 
first you need to learn a few common aspects of impersonation that apply to all these 
IPC mechanisms. 
Impersonation Levels 
Impersonation levels allow a client to restrict the degree to which an IPC server can 
use the client's credentials. When these values are supplied, they provide a level of 
protection for the client; otherwise, the client might accidentally supply its credentials 
to a malicious server, allowing that server to access network resources on the client's 
behalf. Table 12-1 summarizes the impersonation levels from the Microsoft Developer 
Network (MSDN, msdn.microsoft.com). 
Table 12-1. Impersonation Levels 
Level 
Meaning 
SecurityAnonymous 
The server can't impersonate or identify the client. 
SecurityIdentification 
The server can verify the client's identity but can't 
impersonate the client. 
SecurityImpersonation The server can impersonate the client's security context on 
the local system. 
SecurityDelegation 
The server can impersonate the client's security context on 
remote systems. 
Where are these impersonation levels specified by the client? Usually, they appear as 
a parameter in IPC connection functions. The security implications of impersonation 
levels are best understood in the context of a specific IPC mechanism. So you will 
revisit impersonation levels throughout the chapter as each IPC mechanism is 
discussed. 
SeImpersonatePrivilege 
Impersonation issues provide opportunities for privilege escalation vulnerabilities, so 
Microsoft made a fundamental change in the way impersonation is handled. Windows 
Server 2003, Windows XP SP2, and Windows 2000 SP4 added 
SeImpersonatePrivilege, which is a required privilege for impersonating another user. 
A normal user doesn't have this privilege by default, although it's granted to the 
built-in service accounts. This change significantly reduces the chances of 
impersonation-based attacks in later versions of Windows. However, for code 
auditors, it's best to assume the application is deployed in an environment where 
normal users can perform impersonation. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
705 
7.8.3 Window Messaging 
Windows messaging is a bit confusing to people coming from other platforms, even 
earlier versions of Windows. The user interface (UI) is message driven; however, it's 
a poor choice for general-purpose IPC on modern Windows systems. This is in direct 
contrast to earlier versions of Windows, which used the message system to meet 
many IPC requirements. This change in approach is primarily because of the security 
issues associated with window messaging. 
Windows provides two types of securable GUI objects: window stations 
(WindowStation) and desktops (Desktop). Their architecture and caveats for their use 
are covered in the following sections. However, note that this security model doesn't 
extend to the actual Window objects. This distinction is important to make, as it helps 
you grasp the implicit vulnerability in a privileged process being exposed to 
potentially malicious input in the form of window messages. 
Window Stations Object 
The window station is the primary method of isolating GUI-based communication. It 
contains essential GUI information, including a private atom table (a shared collection 
of strings), a clipboard, windows, and one or more desktop objects. Each logon 
session is associated with a single window station, along with every process on a 
Windows system. Processes can be moved between window stations, assuming the 
associated tokens have adequate privileges. Windows provides a single window 
station for keyboard, mouse, and the primary display: Winsta0. It's referred to as the 
"interactive window station." Windows Terminal Services creates an additional 
Winsta0 for each connected terminal session. 
Each unique account associated with a running service has a separate window station, 
so all services running under the network service account share a single window 
station and desktop. Meanwhile, all services running under the local service account 
share a separate desktop and window station. The service window stations are named 
for the logon session identifier of the associated account. This means network 
services are on the Service-0x0-3e6$ window station, which corresponds to the 
hard-coded session identifier for the network service account. Meanwhile, local 
services are on the Service-0x0-3e5$ window station, which corresponds to the 
hard-coded session identifier for the local service account. Services that run in the 
context of other accounts are associated with similarly named window stations, 
although the session identifier is somewhat random. 
The discretionary access control list (DACL) on a window station is quite strict; it 
limits window station access to essentially the system account and the owning user. 
For services, the DACL is assigned when the window station is created for the service 
account. For Winsta0, an access control entry (ACE) for the user's security ID (SID) is 
added to the DACL at logon and removed at logoff. One interesting twist occurs when 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
706 
a process is started in a context other than the window station's owner, such as 
through the RunAs service. In this case, the ACL of the window station isn't modified; 
instead, the process inherits an open handle to the window station from the parent 
process. Therefore, communication is allowed without violating security 
requirements. 
The Desktop Object 
A desktop object is a securable UI object that functions as a display surface for 
attached threads; every thread on the system is associated with a single desktop. 
Desktops exist as objects inside a window station, and a window station can contain 
any number of Desktops, although there are only two common configurations: 
Winsta0 and service window stations. Winsta0 contains three desktop objects: default 
(the interactive user desktop), Winlogon (the logon screen desktop), and the screen 
saver. Service window stations typically have only a default desktop. 
The access control on a desktop determines which users can manipulate the display 
surface. Although it's important that attackers can't read a victim's screen arbitrarily, 
the standard DACL addresses this concern reasonably well. What a desktop doesn't 
handle is actually more interesting. That is, a desktop doesn't affect processing of 
window messages. A window is associated with a desktop at creation, but it's just a 
tag for display purposes. The actual messaging is handled via the window station, so 
you don't need to be very concerned with desktops in code auditing because they 
don't affect how input is processed. 
Window Messages 
Before you dig into the hazards of Windows messaging, you need some background 
on how everything works, especially if you've never programmed for Windows before. 
This section explains the basics of a windowed program. Readers already familiar with 
UI programming in Windows can choose to skip to the next section. UI windows 
receive events through the use of window messages that have the following 
structure: 
typedef struct { 
    HWND hwnd; 
    UINT message; 
    WPARAM wParam; 
    LPARAM lParam; 
    DWORD time; 
    POINT pt; 
} MSG, *PMSG; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
707 
The message member indicates the type of event the target window is being informed 
of. The wParam and lParam values specify additional information about the message. 
The interpretation of these fields depends on the type of message. Finally, the time 
parameter indicates when the message was posted, and the pt variable indicates the 
coordinates of the mouse at the time the message was posted. Most 
message-handling routines are concerned only with the message, wParam, and lParam 
members, which are passed as separate parameters instead of being part of a single 
MSG structure parameter. 
The OS delivers messages to windows in a first in, first out (FIFO) queue. These 
messages can be generated by system events, such as mouse movements or key 
presses. They can also be generated by other threads on the same desktop. Window 
messages control most aspects of the UI, including clipboard operations and the 
properties of a window. 
These are the four essential steps in creating a functional windowed application: 
1.  Creating a WindowProc() function to handle messages. 
2.  Defining a class that associates this WindowProc() to a window type. 
3.  Creating an instance of the Window class. 
4.  Creating a message-processing loop 
The first step in creating a window is to create the WindowProc() function, which 
handles all the messaging. The following code is a simple WindowProc() function that 
demonstrates the basic layout: 
int MainWindowProc(HWND hWnd, UINT iMsg, WPARAM wParam, 
                   LPARAM lParam) 
{ 
    switch(iMsg) 
    { 
    case WM_CREATE: // Initialize 
        return 0; 
    ... handle additional messages here ... 
    case WM_DESTROY: // Exit on WM_DESTROY 
        return PostQuitMessage( 0 ); 
    default: 
        return DefWindowProc(hWnd,iMsg,wParam,lParam); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
708 
    } 
} 
As you can see, this function is primarily just a switch statement for handling window 
messages passed via the iMsg parameter. This example shows processing for the 
WM_CREATE and WM_QUIT messages, although it doesn't do much with them. The default 
message handler, DefWindowProc(), does most of the heavy lifting. It's the default 
case in the switch statement that handles all system messages and other messages 
not explicitly handled by the application, which make up the bulk of the message 
traffic. 
Now that you understand a bit about the handler, you need to see how it's registered 
with the system. This registration is done with the RegisterClassEx() function, which 
associates a name with the handler in the context of a process. The following code is 
a simple function that registers the handler created in the previous example: 
BOOL InitClass(HINSTANCE hInst) 
{ 
    WNDCLASSEX wc; // Defines the class 
    ZeroMemory(&wc, sizeof(wnd)); 
    wc.hInstance = hInst; 
    wc.lpszClassName = "Main"; 
    wc.lpfnWndProc = ( WNDPROC ) MainWindowProc; 
    wc.cbSize = sizeof(WNDCLASSEX); 
    return RegisterClassEx( &wnd ); 
} 
After the handler is registered, the final two steps are to create the window and start 
the window's message pump, as shown in the following code: 
int APIENTRY WinMain( HINSTANCE hInst, HINSTANCE hPrev, LPSTR lpCmdLine, 
    int nCmdShow ) 
{ 
    WINDOW hwnd; 
    InitClass(hInst); 
    // Create a message-only window 
    hwnd = CreateWindow( "Main", "Main", 0, 0, 0, 0, 0, 
        0, 0, HWND_MESSAGE, 0 ); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
709 
    // This is the message pump 
    while( GetMessage( &msg, 0, 0, 0 ) 
        && GetMessage(&msg, (HWND) NULL, 0, 0) != -1) 
    { 
        TranslateMessage( &msg ); 
        DispatchMessage( &msg ); 
    } 
    return msg.wParam; 
} 
This example shows the standard window message pump. The GetMessage() call 
simply blocks until it receives a message. It's followed by the translateMessage() call, 
which queues up and translates a series of virtual key signals (from keyboard input) 
and sends them as a single character string. Finally, the DispatchMessage() call 
forwards the message on to the appropriate WindowProc(). 
The code passes the HWND_MESSAGE parameter to CreateWindow(), which creates a 
message-only window. This type of window is never displayed; it just exists so that a 
process can receive and handle window messages. This window type was chosen for 
two reasons. First, it's the shortest one, which keeps you from being distracted with 
unnecessary details. Second, and more important, this type of window is used by 
services that accept window message input. You should be familiar with this window 
type because it's associated with the kinds of applications attackers target. 
There's one final function to mention, which is SendMessage(): 
LRESULT SendMessage(HWND hWnd, UINT Msg, WPARAM wParam, 
                   LPARAM lParam ); 
This function doesn't matter when you're reviewing code, but you need to be familiar 
with it to understand exploits associated with window messages. This function simply 
accepts a handle to a window, a message ID, and two parameters that are interpreted 
differently, depending on the message type. You've already seen the WM_CREATE and 
WM_QUIT messages, and the WM_TIMER and WM_PASTE messages are explained in the next 
section. Note that any process with a handle to a window station can send messages 
to any other window on a desktop object within that window station. All that's needed 
is a simple call to SendMessage(). 
Shatter Attacks 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
710 
You might be wondering why the previous sections have gone through a whirlwind 
introduction to the Windows GUI. After all, the basic shatter attack was described in 
Chapter 2(? [????.]), "Design Review," so the concept should be clear. However, it's 
important to understand the extent of this issue. The Windows API ties a lot of 
functionality into a simple, unprotected, messaging architecture. Every aspect of the 
user interface is controlled by window messages, and the design of the API provides 
no method of restricting or verifying a message source. Of course, attackers must 
have access to a window station before they can send messages, but after they do, 
the potential for exploit can be fairly open ended. 
The original shatter attack exploited window message design by sending a WM_PASTE 
message to a privileged process with a message pump on the same window station. 
The WM_PASTE message allows attackers to place a buffer of shell code in the address 