pgbouncer=# show help;    
NOTICE:  Console usage    
DETAIL:      
        SHOW HELP|CONFIG|DATABASES|POOLS|CLIENTS|SERVERS|VERSION    
        SHOW FDS|SOCKETS|ACTIVE_SOCKETS|LISTS|MEM    
        SHOW DNS_HOSTS|DNS_ZONES    
        SHOW STATS|STATS_TOTALS|STATS_AVERAGES    
        SET key = arg    
        RELOAD    
        PAUSE []    
        RESUME []    
        DISABLE     
        ENABLE     
        KILL     
        SUSPEND    
        SHUTDOWN    
SHOW    
```    
3、连接示例    
```    
export PGPASSWORD=abc    
psql -h 127.0.0.1 -p 4001 -U test1 template1    
```    
### 短连接压测    
1、初始化数据    
```    
export PGPASSWORD=abc    
pgbench -i -s 100 -h 127.0.0.1 -p 4001 -U test1 postgres    
```    
2、使用连接池测试(qps : 11485)    
```    
pgbench -M extended -v -r -P 1 -S -C -c 112 -j 112 -T 120 -h 127.0.0.1 -p 4001 -U test1 postgres    
transaction type:     
scaling factor: 100    
query mode: extended    
number of clients: 112    
number of threads: 112    
duration: 120 s    
number of transactions actually processed: 1378270    
latency average = 3.704 ms    
latency stddev = 0.683 ms    
tps = 11485.135372 (including connections establishing)    
tps = 30075.154406 (excluding connections establishing)    
script statistics:    
 - statement latencies in milliseconds:    
         0.008  \set aid random(1, 100000 * :scale)    
         3.696  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;    
```    
3、不使用连接池测试(qps : 294)    
```    
pgbench -M extended -v -r -P 1 -S -C -c 112 -j 112 -T 120 -h 127.0.0.1 -p 1921 -U test1 postgres    
transaction type:     
scaling factor: 100    
query mode: extended    
number of clients: 112    
number of threads: 112    
duration: 120 s    
number of transactions actually processed: 35498    
latency average = 2.880 ms    
latency stddev = 7.096 ms    
tps = 294.256452 (including connections establishing)    
tps = 32220.172124 (excluding connections establishing)    
script statistics:    
 - statement latencies in milliseconds:    
         0.004  \set aid random(1, 100000 * :scale)    
         2.873  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;    
```    
### 大并发压测    
[《PostgreSQL pgbench 支持100万连接》](../201805/20180516_02.md)      
1、使用连接池测试(qps : 46948)    
```    
pgbench -M extended -v -r -P 1 -S -c 1000 -j 1000 -T 120 -h 127.0.0.1 -p 4001 -U test1 postgres    
transaction type:     
scaling factor: 100    
query mode: extended    
number of clients: 1000    
number of threads: 1000    
duration: 120 s    
number of transactions actually processed: 5635962    
latency average = 21.285 ms    
latency stddev = 0.911 ms    
tps = 46948.818229 (including connections establishing)    
tps = 46954.000336 (excluding connections establishing)    
script statistics:    
 - statement latencies in milliseconds:    
         0.002  \set aid random(1, 100000 * :scale)    
        21.283  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;    
```    
2、不使用连接池测试(qps : 162690)    
```    
pgbench -M prepared -v -r -P 1 -S -c 1000 -j 1000 -T 120 -h 127.0.0.1 -p 1921 -U test1 postgres    
transaction type:     
scaling factor: 100    
query mode: prepared    
number of clients: 1000    
number of threads: 1000    
duration: 120 s    
number of transactions actually processed: 19525930    
latency average = 5.996 ms    
latency stddev = 5.220 ms    
tps = 162690.344979 (including connections establishing)    
tps = 166416.141297 (excluding connections establishing)    
script statistics:    
 - statement latencies in milliseconds:    
         0.018  \set aid random(1, 100000 * :scale)    
         6.204  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;    
```    
## 建议架构lvs+pgbouncer  
![pic](20100511_03_pic_001.jpg)  
如果是阿里云的客户，可以使用ecs+slb服务。    
![pic](20100511_03_pic_002.jpg)    
## QUICK-START    
```    
       Basic setup and usage as following.    
       1. Create a pgbouncer.ini file.  Details in pgbouncer(5).  Simple example:    
             [databases]    
             template1 = host=127.0.0.1 port=5432 dbname=template1    
             [pgbouncer]    
             listen_port = 6543    
             listen_addr = 127.0.0.1    
             auth_type = md5    
             auth_file = users.txt    
             logfile = pgbouncer.log    
             pidfile = pgbouncer.pid    
             admin_users = someuser    
       2. Create users.txt file that contains users allowed in:    
             "someuser" "same_password_as_in_server"    
       3. Launch pgbouncer:    
             $ pgbouncer -d pgbouncer.ini    
       4. Have your application (or the psql client) connect to pgbouncer instead of directly to PostgreSQL server:    
             $ psql -p 6543 -U someuser template1    
       5. Manage pgbouncer by connecting to the special administration database pgbouncer and issuing show help; to begin:    
             $ psql -p 6543 -U someuser pgbouncer    
             pgbouncer=# show help;    
             NOTICE:  Console usage    
             DETAIL:    
               SHOW [HELP|CONFIG|DATABASES|FDS|POOLS|CLIENTS|SERVERS|SOCKETS|LISTS|VERSION]    
               SET key = arg    
               RELOAD    
               PAUSE    
               SUSPEND    
               RESUME    
               SHUTDOWN    
       6. If you made changes to the pgbouncer.ini file, you can reload it with:    
             pgbouncer=# RELOAD;    
```    
## 小结    
pgbouncer是一个轻量级的连接池，效率高。有效解决了高并发(上下文切换或锁冲突)，短连接(连接开销)场景的性能问题。       
建议用户活跃连接超过PostgreSQL实例实际CPU核数20倍(经验值，如果是select only业务，可以更多一些)时，使用pgbouncer缓解压力。配置连接池个数时，建议PB到PG的连接数为数据库实际CPU核数的2~4倍。        
对于长事务用户，可以单独配置其POOL（使用pgbouncer database alias配置，防止长事务，短事务连接干扰）       
目前pgbouncer的弊端：由于pgbouncer使用单进程模式，一个pgbouncer服务本身最多只能使用1核(本文测试可以看出，pgbouncer本身能处理的流量约5万qps)。要解决这个弊端，可以使用多个pgbouncer服务(再使用slb/lvs对pgbouncer做一下负载均衡)，或者可以使用数据库内核层面的连接池例如：        
[《阿里云 RDS PostgreSQL 高并发特性 vs 社区版本 (1.6万并发: 3倍吞吐，240倍响应速度)》](../201805/20180505_07.md)       
[《PostgresPro buildin pool(内置连接池)版本 原理与测试》](../201805/20180521_03.md)       
## 参考    
[《阿里云 RDS PostgreSQL 高并发特性 vs 社区版本 (1.6万并发: 3倍吞吐，240倍响应速度)》](../201805/20180505_07.md)      
[《PostgresPro buildin pool(内置连接池)版本 原理与测试》](../201805/20180521_03.md)      
[《PostgreSQL pgbench 支持100万连接》](../201805/20180516_02.md)      
[《Greenplum 连接池实践》](../201801/20180128_04.md)      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")