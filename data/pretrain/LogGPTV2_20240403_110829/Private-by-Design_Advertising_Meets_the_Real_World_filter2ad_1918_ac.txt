purpose of the auction must also be protected.
2.3 Related Work
Most of the work related to privacy preserving auctions revolves around cryp-
tographic protocols designed to protect privacy of the submitted bids. De-
pending on the underlying security model these proposals can be classiﬁed
into the following three categories.
In the ﬁrst category, there are protocols
that rely on computation that is distributed among auctioneers who jointly de-
termine the outcome of an auction using threshold multi-party computation
(e.g., [37, 41, 55, 40]). The second category of protocols introduces a semi-trusted
third party, aka an “auction issuer” or “auction authority”, in addition to the
auctioneer, and uses asymmetric multi-party computation technique, such as
Yao’s garbled circuit (e.g., [9, 12, 18, 44, 47]). Finally, protocols in the third cat-
egory allow bidders to cooperatively compute the auction outcome without re-
quiring on any trusted third party, instead they rely on the intractability of the
13
decisional Difﬁe-Hellman problem (e.g., [14, 15, 16]). The primary goal of all
these proposals, and many others not cited, is to keep bids and selling price se-
cret from the auctioneer and other auction participants. The problem that we
address is different. We are primarily concerned with protecting the user, not
the bidder (i.e., advertiser). Indeed the user does not exist in the prior work. In
any event, the high computational and communication complexity imposed by
aforementioned secure auction protocols make them impractical for our prob-
lem.
A large body of work in secure auctions [28, 45, 52, 48, 13, 51, 11] focuses on
veriﬁable auction integrity developing a number of novel cryptographic tech-
niques and distributed protocols. For example, VEX [11] proposes using hash-
chains to improve integrity in the context of online ad exchange. Unlike the
aforementioned work, our main target is ad networks, and our primary goal is
to preserve user privacy.
An alternative approach to embedding privacy in online auctions relies on
shifting the trust from an auctioneer to hardware, for example, to a hardware
implemented secure co-processor [50].
In other words, the auctioneer is re-
placed by a combination of hardware and software that can be trusted by all
the parties involved in the auction. The auction software (source and signed
executable) is published and can be veriﬁed by the participants. Remote au-
thentication is then used to ensure that the running software is not tampered
with. We believe that such hardware-oriented approach is complementary to
private auctions designs, and can be applied most effectively to implement a
variant of Rank-at-Third-Party (Section 3.2.3).
14
CHAPTER 3
DESIGNING ONLINE AD AUCTIONS
In this chapter, we broadly explore the design space proposing three solu-
tions for online ad auctions in private-by-design advertising, and then discuss
the pros and cons of these solutions.
3.1 Auction Goals
The privacy goals for the auction component of a private-by-design advertising
system are the same as described in Section 2.2: anonymity and unlinkability.
This section describes the goals of the auction itself.
The primary goal of the auction in a private-by-design advertising system is
to provide a second-price auction mechanism that achieves close-to-ideal rank-
ing of ads (i.e., in order of Bid⇥ClickProbability). For today’s tracking advertising
systems, leveraging the user proﬁle is straightforward, since the broker itself ac-
cumulates and maintains this information. In a private-by-design system, the
broker does not have user proﬁle information, but does have other information
that goes into the quality score Q. In other words, part of the information used
to produce Q is in the broker, and part is in the client. Therefore, we deﬁne a
user score U which directly reﬂects the effect of the user proﬁle, when matched
against an ad’s targeting information, on click probability. We deﬁne a second
quality score G, that reﬂects the remaining “global” information known to the
broker.
Speciﬁcally, this results in an ideal ranking and CPC of:
15
Rank ) B ⇥ G ⇥ U
CPC = Bn Gn ⇥ Un
Gc ⇥ Uc!
(3.1)
(3.2)
For example, U could be a positive real value greater or less than 1 that raises
or lowers the click probability proportionally to its effect on the click probability
deﬁned by G. Section 3.3 brieﬂy discusses how U may be computed. In particu-
lar, the bid B, quality score G, and user score U of an ad may change at any time.
Ideally, the ranking used when displaying ads to users is based on current val-
ues of B, G, and U. To keep auction overhead low, however, it may be necessary
to work with slightly out-of-date values for B, G, and U.
In current tracking advertising systems, the click normally takes place al-
most immediately after the view, and so CPC is normally computed shortly af-
ter the ranking. As a result, the parameters that go into determining the ranking
(B and Q) do not change much between ranking and CPC. In private-by-design
advertising systems, as explained later, some time may pass between when B
is set by the advertiser and when the ad is ranked, or between when an ad is
ranked and when CPC is calculated. Therefore, we set the following goals with
respect to ranking and CPC calculation:
• The B, G, and U used for CPC calculation are the same as the B, G, and U
used for ranking. Note in particular that if they are not the same, then it
is possible for instance for the CPC to be higher than the submitted bid of
the clicked ad.
16
• The delay between ranking and CPC calculation is small enough that the
churn in B, G, or U does not have a signiﬁcant impact on rankings, CPC
values, and broker revenue.
What exactly comprises user score U depends on the client proﬁler and can
vary from system to system. We can, however, classify user information into
three time frames. At the time frame of months or even years are user demo-
graphics like gender, location, language, age, salary, and so on. User interests
can also last years (e.g. coin collecting), but more typically last weeks (a new
car), days (a new pair of shoes), or minutes (a pizza). If we assume that match-
ing ads to the content of a web page or search page increases click probability,
then user score can change in seconds or less. For instance, a user might be
interested in tennis and music, but the user score for tennis ads may increase
while the user is looking at a tennis website, and vice versa for music ads.
We do not make any assumptions about the relative importance of B, G, or
U. An ideal auction design however must allow for this ﬂexibility.
Besides the basic goal of running an auction that leverages the user proﬁle
while prohibiting the broker from reconstructing it, there are a few additional
related goals that are important:
• to maintain the privacy offered to the advertisers themselves. In particular,
to prevent advertisers from learning each others bids and budgets.
• to maintain the level of click-fraud defense in current tracking systems.
• to minimize the overhead of the auction.
17
As will become apparent in subsequent sections, our designs do not perfectly
achieve all of these goals. Rather, our designs offer trade-offs between these
goals.
Note ﬁnally that it is possible that the value of U may correlate with the
probability that the user will buy the product or service being advertised as-
suming that the user has clicked. If this is the case, then the advertiser would
want to express multiple bids as a function of U, since different U’s would pro-
duce different revenues for the advertiser. We do not address this capability in
this thesis, but rather leave it for future work should it turn out to be important.
3.2 Detailed Designs
To run the auction speciﬁed in the previous section, the system computing the
ranking must have access to the bid B, the broker quality score G, and the user
score U. This means that either 1) B and G are sent to the client, 2) U is sent to
the broker, or 3) B, G, and U are all sent to a third party. These basic approaches
are explored in the following sections.
3.2.1 Rank-at-Client (RaC)
In this approach (see Figure 3.1), the following information is transmitted with
the ad to the client along with everything else required by the advertising sys-
tem (e.g. targeting information, not shown):
A: The ad ID.
18
Figure 3.1: Rank-at-Client. A is an ad ID unique to the ad. The subscripts
‘c’ and ‘n’ refer to the clicked ad and the next ranked ad respec-
tively. [x] denotes encryption of x. Messages between the client
and the broker pass through an anonymizing proxy (dashed
lines represent encrypted messages).
(B ⇥ G): A single value which is the product of (B ⇥ G).
[B, G]: The individual values B and G, encrypted with a symmetric key known
only to the broker.
When a collection of ads arrive at the client, it ranks all ads using (B ⇥ G ⇥
U). Note that in this case U is current, while (B ⇥ G) can be somewhat stale
If the user clicks on an ad, then the client
depending on the system delays.
computes the following values and transmits them to the broker:
Ac: The ad ID of the clicked ad.
((Bn ⇥ Gn) ⇥ (Un/Uc)): A single value which is the (Bn ⇥ Gn) product of the next-
ranked ad times the ratio (Un/Uc) of the user score of the next-ranked ad
Un and the user score of the clicked ad Uc.
[Bc,Gc]: The encrypted B and G for the clicked ad as received earlier from the
broker.
Upon reception of this message, the broker decrypts [Bc,Gc]. It uses Gc and
((Bn ⇥ Gn) ⇥ (Un/Uc)) to compute the CPC as shown in Equation 3.2. The broker
19
Clicks: Ac, ((Bn×Gn)×(Un/Uc)), [Bc,Gc]Ads: A, (B×G), [B,G]BrokerClientFigure 3.2: Rank-at-Broker. ID is an Ad ID unique to the combination of ad
and client. Solid lines represent clear-text messages forwarded
by the proxy.
also compares the resulting CPC with the decrypted Bc. If CPC > Bc, then the
broker knows that the client is engaged in click fraud, and the broker can ignore
the message. If CPC  Bc, then the broker can accept the message, although this
does not mean that the client is not engaged in click-fraud. Other mechanisms,
such as statistical analysis, must be used to detect it as is done today.
Variation: It may not be necessary to transmit the encrypted values [Bc,Gc].
This is because Bc and Gc can be looked-up using the ad ID Ac. The danger here
is that the looked-up values may be different from the Bc and Gc values used to
rank the ads. How different depends on the level of churn in B and G values,
which we found to be minimal in the Bing auction trace (Chapter 5). Therefore,
it may well sufﬁce to use looked-up values rather than values stored along with
the ad at the client. Note that this variation applies to RaB and RaT as well.
3.2.2 Rank-at-Broker (RaB)
One concern with RaC is that the value (B ⇥ G) exposes information about the
advertiser (see Section 4.1). This can be avoided if the ranking is done at the
20
Ads: ID, UAds: A, ID, [B×G], [B,G]BrokerClientAds: ID, RankClicks: Ac, [Bn×Gn], (Un/Uc), [Bc,Gc]broker as shown in Figure 3.2. The RaB scheme presented here is a substantially
improved version of the approach ﬁrst proposed in [33].
Along with the ad, the broker transmits the following to the client:
A: The ad ID.
ID: An identiﬁer unique to this speciﬁc delivery of this ad (among all other
deliveries). In other words, the same ad delivered to other clients would
have a different values of ID.
[B ⇥ G]: A single value which is the product of (B ⇥ G), encrypted with a sym-
metric key known only to the broker.
[B, G]: The values B and G, encrypted with a symmetric key known only to the
broker.
The client computes a user score U for each ad (in the absence of knowledge
of what web page the ad may be shown on). In order to obscure the user proﬁle,
the client assigns a random value for U for those ads for which the client has a
very low user score (for instance because the demographic does not match that
of the user).
Clients transmit the ID,U tuples to the broker via a proxy. These messages
are not encrypted. The proxy also remembers which IDs were received from
which clients.
For each received ID, the broker looks up the current values of B and G.
It then uses B, G, and U to rank each received ad among a large number of
recently received ads (say, those received over the last hour), and associates a
21
rank number Rank to each ad. Closely ranked ads may have the same ranking
number. The broker transmits the ID,Rank tuple back to the proxy.
The proxy looks up which client is associated with each ID, and forwards the
message on to the client. The client disregards the ads related to the low user
scores, and uses the remaining ranking for selecting ads to put in ad boxes.
When a user clicks on an ad, it transmits the following information to the
broker:
Ac: The ad ID of the clicked ad.
[Bn ⇥ Gn]: The encrypted (B ⇥ G) for the next-ranked ad received earlier.
(Un/Uc): A single value which is the ratio of the user score of the next-ranked
ad Un and the user score of the clicked ad Uc.
[Bc,Gc]: The encrypted B and G for the clicked ad received earlier.
Upon reception of this message, the broker decrypts [Bn ⇥ Gn] and [Bc,Gc]. It
uses Gc, (Bn ⇥ Gn), and (Un/Uc)) to compute the CPC as shown in Equation 3.2.
As with RaC, the broker also compares the resulting CPC with the decrypted Bc
for click fraud.
The proxy prevents the broker from learning the identity of the client whose
ads are being ranked. The per-client-per-ad unique ID prevents the proxy,
which does know the client identity (network address), from learning which
ad, and therefore what targeting information, is being referred to.
Even with the noise added to low user scores, we are concerned that the non-
noise user scores can be interpreted at the broker as a kind of ﬁngerprint over
22
Figure 3.3: Rank-at-Third-Party
the set of ads (i.e., ads targeted to men should have uniformly higher scores for
men, and lower scores for women). In this way, the broker could potentially
tease out the proﬁle of users.
3.2.3 Rank-at-Third-Party (RaT)
This approach (see Figure 3.3) is similar to RaB, but prevents the ﬁngerprinting
mentioned above. The main difference between RaT and RaB is that in RaT the
broker additionally sends the unique ad IDs and (B⇥G) products to a third party
system which is trusted not to collude with the broker. This information must
be delayed long enough that the third party system cannot use a timing attack to
correlate the values associated with a single user. This third party also receives
the user scores from the clients, and based on this information, ranks ads in the
same way the broker does in the RaB approach. Since, unlike the broker, it does
not know which ads were transmitted to the same client, it cannot ﬁngerprint
the clients.
23
Ads: ID, UAds: A, ID, [B×G], [B,G]BrokerClientAds: ID, RankClicks: Ac, [Bn×Gn], (Un/Uc), [Bc,Gc]Third PartyAds: ID, (B×G)Broker3.2.4 Homomorphic Encryption Variant (RaC, RaB, and RaT)
A variation on all three auction designs is to use homomorphic encryption (e.g.,
ElGamal [26]), which allows for multiplication operations on encrypted data.
This may be used to defend against certain attacks by the broker as described
in Sections 4.1 and 4.3. When a user clicks on an ad, the client encrypts (Un/Uc)
with the broker’s public key. In the case of RaC, it also encrypts (Bn ⇥ Gn) with
the broker’s public key. In the case of RaB and RaT, the broker provides the
encrypted [Bn ⇥ Gn], but using its public key instead of a symmetric key. For
all three schemes, the broker provides [1/Gc], again encrypted with the broker’s
public key. Using homomorphic property of the encryption, the client is able to
calculate:
[Bn ⇥ Gn] ⇥"Un
Uc# ⇥ [1/Gc] ="Bn Gn ⇥ Un
Gc ⇥ Uc!#
and transmit the resulting value in the click report. Upon receiving a click re-
port, broker decrypts the value to obtain the CPC. Although homomorphic en-
cryption is relatively expensive, there is no need to do the operation in real-time.
Rather, the client can do the operation when it has spare CPU cycles before
transmitting, and the broker can likewise run the operations later on as batch
processing.
3.3 Computing User Score
So far, we have assumed the existence of a user score U that, when multiplied
with the quality score G produces the expected click probability at the client for
a given ad. Because clicks are relatively rare, it may be difﬁcult to estimate U
at the client based purely on the click history of the client. Therefore, we re-
24
quire that the broker anonymously and unlinkably gathers detailed click statis-
tics from clients in order to improve click probability estimates at individual
clients. In what follows, we sketch out an approach.
There are a number of measurable attributes X = {x1, x2, ...xL} at the client
that may help in prediction of click probability. For instance, the level of inter-
est (high or low) in the ad’s product or service, the quality of the match between
the targeting and the user, the context of the webpage, as well as the user’s his-
toric CTR. The idea is that each client reports this information anonymously to
the broker for each ad that it views and clicks. These reports contain: {Ad-ID,
X, click}, where X is the values of the attributes, and ‘click’ indicates whether
or not the ad was clicked. Given this information from many clients, the broker
can determine the effect of the attributes on click probability, and convey this in-
formation to the client as a function f of the attributes such that U = f (X), along
with the ad. This allows the client to compute U by measuring the attributes
and plugging them into the provided function. As mentioned, U in RaC can be
computed at viewing time with the latest set of attributes without churn issues
since that is when the ranking takes place. The function f for a new ad can be
initially set to that of similar existing ads until enough data for the new ad is
gathered. The details of this are left as future work.
One concern is that the set of attribute values X is unique for a given user.
Several factors can mitigate this concern. First, the attributes may be fairly
coarse-grained, thus broadening the set of users to which they apply. Second,
some of the attributes may be hard to correlate using external knowledge, such
as the user’s CTR. Third, attributes like level of interest change from interest to
interest, and even within an interest over time, and therefore are hard to link to
25
the same user. Fourth, some attributes are not speciﬁc to the user, for instance
webpage context. Finally, the only information beyond the attribute values that
is leaked is the ad viewed. In particular, the user’s click-stream is not exposed.
We believe that it is reasonable to establish public policies that determine the
nature of the attributes in such a way that meaningful privacy is preserved.
26
CHAPTER 4
AUCTION ANALYSIS
This chapter analyzes the three types of auctions in terms of privacy, auction
quality, and potential attacks on the auction component.
4.1 Privacy Properties
In this section, we look at the information that is conveyed for the sake of the
auction between honest-but-curious players, and determine whether it consti-
tutes a privacy threat. In Section 4.3 we relax the assumption of honest-but-
curious players.
Broker analyzes (Un/Uc) (RaB and RaT)
In order to exploit this value to gather more information about the user proﬁle,
the broker would have to ﬁrst tease apart the values of Un and Uc, then use the
value combined with the ad targeting to reverse engineer the user proﬁle, and