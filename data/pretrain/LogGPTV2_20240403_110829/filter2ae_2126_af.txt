    类名 方法名 方法描述 污染参数索引
### 0x07 最终挖掘阶段-GadgetChainDiscovery
这个阶段，是gadgetinspector自动化挖掘gadget
chain的最终阶段，该阶段利用前面获取到的所有数据，从source到slink进行整合分析，最终判断slink，确定是否有效的gadget chain。
分析gadgetinspector.GadgetChainDiscovery#discover代码：
加载所有的方法数据以及继承实现关系数据
    Map methodMap = DataLoader.loadMethods();
            InheritanceMap inheritanceMap = InheritanceMap.load();
#### 重写方法的扫描
获取方法的所有实现，这是什么意思呢？因为java的继承特性，对于一个父类，它的方法实现，可以通过子孙类进行重写覆盖，为什么要这样做呢？因为多态特性，实现类只有运行时可确定，因此，需要对其所有重写实现都形成分析链，就能确保在非运行时，做到gadget
chain的挖掘
    Map> methodImplMap = InheritanceDeriver.getAllMethodImplementations(
                    inheritanceMap, methodMap);
分析InheritanceDeriver.getAllMethodImplementations代码：
  1. 获取类->方法集
    //遍历整合，得到每个类的所有方法实现，形成 类->实现的方法集 的映射
    Map> methodsByClass = new HashMap<>();
    for (MethodReference.Handle method : methodMap.keySet()) {
        ClassReference.Handle classReference = method.getClassReference();
        if (!methodsByClass.containsKey(classReference)) {
            Set methods = new HashSet<>();
            methods.add(method);
            methodsByClass.put(classReference, methods);
        } else {
            methodsByClass.get(classReference).add(method);
        }
    }
  1. 获取父类->子孙类集
    //遍历继承关系数据，形成 父类->子孙类集 的映射
    Map> subClassMap = new HashMap<>();
    for (Map.Entry> entry : inheritanceMap.entrySet()) {
        for (ClassReference.Handle parent : entry.getValue()) {
            if (!subClassMap.containsKey(parent)) {
                Set subClasses = new HashSet<>();
                subClasses.add(entry.getKey());
                subClassMap.put(parent, subClasses);
            } else {
                subClassMap.get(parent).add(entry.getKey());
            }
        }
    }
  1. 遍历每个方法，并通过查询方法类的子孙类的方法实现，确定重写方法，最后整合成 方法->重写的方法集 的映射集合，静态方法跳过，因为静态方法是不可被重写的
    Map> methodImplMap = new HashMap<>();
    for (MethodReference method : methodMap.values()) {
        // Static methods cannot be overriden
        if (method.isStatic()) {
            continue;
        }
        Set overridingMethods = new HashSet<>();
        Set subClasses = subClassMap.get(method.getClassReference());
        if (subClasses != null) {
            for (ClassReference.Handle subClass : subClasses) {
                // This class extends ours; see if it has a matching method
                Set subClassMethods = methodsByClass.get(subClass);
                if (subClassMethods != null) {
                    for (MethodReference.Handle subClassMethod : subClassMethods) {
                        if (subClassMethod.getName().equals(method.getName()) && subClassMethod.getDesc().equals(method.getDesc())) {
                            overridingMethods.add(subClassMethod);
                        }
                    }
                }
            }
        }
        if (overridingMethods.size() > 0) {
            methodImplMap.put(method.getHandle(), overridingMethods);
        }
    }
#### 保存方法重写数据
回到gadgetinspector.GadgetChainDiscovery#discover中，接着，对扫描到的重写方法数据进行保存
    try (Writer writer = Files.newBufferedWriter(Paths.get("methodimpl.dat"))) {
        for (Map.Entry> entry : methodImplMap.entrySet()) {
            writer.write(entry.getKey().getClassReference().getName());
            writer.write("\t");
            writer.write(entry.getKey().getName());
            writer.write("\t");
            writer.write(entry.getKey().getDesc());
            writer.write("\n");
            for (MethodReference.Handle method : entry.getValue()) {
                writer.write("\t");
                writer.write(method.getClassReference().getName());
                writer.write("\t");
                writer.write(method.getName());
                writer.write("\t");
                writer.write(method.getDesc());
                writer.write("\n");
            }
        }
    }
保存的数据格式：
    类名 方法名 方法描述
    \t重写方法的类名 方法名 方法描述
    \t重写方法的类名 方法名 方法描述
    \t重写方法的类名 方法名 方法描述
    \t重写方法的类名 方法名 方法描述
    类名 方法名 方法描述
    \t重写方法的类名 方法名 方法描述
    \t重写方法的类名 方法名 方法描述
#### 整合方法调用关联数据
在前面阶段中，扫描出来的方法调用参数关联数据，都是独立的，也就是说，例如：
    public class Main {
      private String name;
      public void main(String args) throws IOException {
        new A().method1(args, name);
        new A().method2(args, name);
      }
    }
    class A {
      public String method1(String param, String param2) {
        return param + param2;
      }
      public String method2(String param, String param2) {
        return param + param2;
      }
    }
形成的方法调用参数关联数据：
    Main (Ljava/lang/String;)V main A method1 (Ljava/lang/String;)Ljava/lang/String; 1 1
    Main (Ljava/lang/String;)V main A method2 (Ljava/lang/String;)Ljava/lang/String; 1 1
上面形成的数据是分为了两条独立的数据，在统一的分析中，不太利于分析，因此，对其进行了整合，因为对于这两条记录来说，其都是Main.main发起的方法调用
整合代码：
    Map> graphCallMap = new HashMap<>();
    for (GraphCall graphCall : DataLoader.loadData(Paths.get("callgraph.dat"), new GraphCall.Factory())) {
        MethodReference.Handle caller = graphCall.getCallerMethod();
        if (!graphCallMap.containsKey(caller)) {
            Set graphCalls = new HashSet<>();
            graphCalls.add(graphCall);
            graphCallMap.put(caller, graphCalls);
        } else {
            graphCallMap.get(caller).add(graphCall);
        }
    }
#### gadget chain的初始化
    Set exploredMethods = new HashSet<>();
    LinkedList methodsToExplore = new LinkedList<>();
    for (Source source : DataLoader.loadData(Paths.get("sources.dat"), new Source.Factory())) {
        GadgetChainLink srcLink = new GadgetChainLink(source.getSourceMethod(), source.getTaintedArgIndex());
        if (exploredMethods.contains(srcLink)) {
            continue;
        }
        methodsToExplore.add(new GadgetChain(Arrays.asList(srcLink)));
        exploredMethods.add(srcLink);
    }
上述代码中，加载了sources.dat文件的数据，这些数据我们前面分析过，都是利用链入口，在被反序列化的时候可被触发执行的方法
    private static class GadgetChainLink {
        private final MethodReference.Handle method;
        private final int taintedArgIndex;
        private GadgetChainLink(MethodReference.Handle method, int taintedArgIndex) {
            this.method = method;
            this.taintedArgIndex = taintedArgIndex;
        }
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            GadgetChainLink that = (GadgetChainLink) o;
            if (taintedArgIndex != that.taintedArgIndex) return false;
            return method != null ? method.equals(that.method) : that.method == null;
        }
        @Override
        public int hashCode() {
            int result = method != null ? method.hashCode() : 0;
            result = 31 * result + taintedArgIndex;
            return result;
        }
    }
最后形成gadget chain的初始化工作
#### 遍历初始化后的gadget chain集合
gadget chain取出，进行链可利用的判断
    GadgetChain chain = methodsToExplore.pop();
获取链的最后一个方法
    GadgetChainLink lastLink = chain.links.get(chain.links.size()-1);
获取最后一个方法调用到的所有方法
    Set methodCalls = graphCallMap.get(lastLink.method);
遍历调用到的方法，若方法不能被污染传递，则跳过
    for (GraphCall graphCall : methodCalls) {
        if (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex) {
            continue;
        }
        ...
    }
获取被调用方法的所有重写方法
    Set allImpls = implementationFinder.getImplementations(graphCall.getTargetMethod());
遍历所有重写方法，并加入链的最后一节，若已存在的链，为了避免死循环，因此会跳过
    for (MethodReference.Handle methodImpl : allImpls) {
    GadgetChainLink newLink = new GadgetChainLink(methodImpl, graphCall.getTargetArgIndex());
    if (exploredMethods.contains(newLink)) {
        continue;
    }
    GadgetChain newChain = new GadgetChain(chain, newLink);
判断是否到了slink，若已到，则表示这条链可用，并缓存到discoveredGadgets中，若还没到slink，则把newChain加到集合中，随着下一次循环到的时候，再次分析下一层的调用
    if (isSink(methodImpl, graphCall.getTargetArgIndex(), inheritanceMap)) {
        discoveredGadgets.add(newChain);
    } else {
        methodsToExplore.add(newChain);
        exploredMethods.add(newLink);
    }
slink的判断：
    private boolean isSink(MethodReference.Handle method, int argIndex, InheritanceMap inheritanceMap) {
        if (method.getClassReference().getName().equals("java/io/FileInputStream")
                && method.getName().equals("")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/io/FileOutputStream")
                && method.getName().equals("")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/nio/file/Files")
            && (method.getName().equals("newInputStream")
                || method.getName().equals("newOutputStream")
                || method.getName().equals("newBufferedReader")
                || method.getName().equals("newBufferedWriter"))) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/lang/Runtime")
                && method.getName().equals("exec")) {
            return true;
        }
        /*
        if (method.getClassReference().getName().equals("java/lang/Class")
                && method.getName().equals("forName")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/lang/Class")
                && method.getName().equals("getMethod")) {
            return true;
        }
        */
        // If we can invoke an arbitrary method, that's probably interesting (though this doesn't assert that we
        // can control its arguments). Conversely, if we can control the arguments to an invocation but not what
        // method is being invoked, we don't mark that as interesting.
        if (method.getClassReference().getName().equals("java/lang/reflect/Method")
                && method.getName().equals("invoke") && argIndex == 0) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/net/URLClassLoader")
                && method.getName().equals("newInstance")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/lang/System")
                && method.getName().equals("exit")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/lang/Shutdown")
                && method.getName().equals("exit")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/lang/Runtime")
                && method.getName().equals("exit")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/nio/file/Files")
                && method.getName().equals("newOutputStream")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/lang/ProcessBuilder")
                && method.getName().equals("") && argIndex > 0) {
            return true;
        }
        if (inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("java/lang/ClassLoader"))
                && method.getName().equals("")) {
            return true;
        }
        if (method.getClassReference().getName().equals("java/net/URL") && method.getName().equals("openStream")) {
            return true;
        }
        // Some groovy-specific sinks
        if (method.getClassReference().getName().equals("org/codehaus/groovy/runtime/InvokerHelper")
                && method.getName().equals("invokeMethod") && argIndex == 1) {
            return true;
        }
        if (inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("groovy/lang/MetaClass"))
                && Arrays.asList("invokeMethod", "invokeConstructor", "invokeStaticMethod").contains(method.getName())) {
            return true;
        }
        return false;
    }
至此，整个gadgetinspector的源码浅析就结束，祝大家阅读愉快，新年将至，提前说声新年快乐！