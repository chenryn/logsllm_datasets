### 以强化使用者的身份证明

某些高度机密的政府机构甚至会通过匹配指纹或视网膜毛细血管模式来确认个人身份。而一些形式的身份证明，例如名片，相对容易伪造，因此在职场交流之外的场景中，比如申请住房贷款时，它们可能不足以作为可靠的就业证明。

### 14.6.1 数字证书的主要内容

数字证书包含一组由官方“证书颁发机构”（CA）签发的信息。基本的数字证书通常包括以下内容：
- 对象名称（如人、服务器、组织等）；
- 有效期；
- 证书发布者（即谁为该证书担保）；
- 来自证书发布者的数字签名。

此外，数字证书还包括对象的公开密钥及其描述性信息。尽管任何人都可以创建一个数字证书，但只有获得认可的实体才能使用其私有密钥为证书信息提供担保并签发证书。图14-11展示了典型的数字证书结构。
```
证书格式版本号
证书序列号
证书签名算法
证书颁发者
数字签名
有效期
对象名称
对象的公开密钥
其他扩展信息
```

### 14.6.2 X.509 v3证书

目前并没有全球统一的数字证书标准。然而，大多数证书都遵循X.509 v3格式，这是一种标准化的方式，用于将证书信息规范至可解析字段中。表14-2列出了X.509证书中的主要字段及其描述。
| 字段 | 描述 |
| --- | --- |
| 版本 | 证书的X.509版本号，当前常用的是版本3 |
| 序列号 | CA生成的唯一整数，每个证书都有唯一的序列号 |
| 签名算法ID | 用于签名的加密算法，如“用RSA加密的MD2摘要” |
| 证书颁发者 | 以X.500格式表示的发布并签署证书的组织名称 |
| 有效期 | 证书的有效期，由起始日期和结束日期表示 |
| 对象名称 | 证书中描述的实体，如个人或组织，以X.500格式表示 |
| 对象的公开密钥信息 | 包括证书对象的公开密钥、使用的算法及附加参数 |
| 发布者唯一的ID（可选） | 可选的证书发布者唯一标识符，允许重用相同的发布者名称 |
| 对象唯一的ID（可选） | 可选的证书对象唯一标识符，允许重用相同的对象名称 |
| 扩展 | 可选的扩展字段集，用于版本3及更高版本。关键扩展必须被理解，否则证书会被拒绝。常见扩展包括：基本约束、对象与证书颁发机构的关系、证书策略、授予证书的策略、密钥的使用限制等 |

### 14.6.3 使用证书对服务器进行认证

当通过HTTPS建立安全Web事务时，现代浏览器会自动获取所连接服务器的数字证书。如果服务器没有证书，则安全连接将失败。服务器证书通常包含以下信息：
- Web站点的名称和主机名；
- Web站点的公开密钥；
- 签名颁发机构的名称；
- 来自签名颁发机构的签名。

浏览器收到证书后会检查签名颁发机构。如果该机构是权威的公共签名机构，浏览器可能已经预装了其公开密钥，从而可以验证签名。如果对签名颁发机构不熟悉，浏览器通常会提示用户是否信任该签名发布者。

### 14.7 HTTPS——详细说明

HTTPS是最常见的HTTP安全版本，广泛应用于所有主要的商业浏览器和服务器。它结合了对称、非对称和基于证书的加密技术，使得HTTPS既安全又灵活，易于在全球互联网上管理。HTTPS不仅加速了互联网应用程序的发展，也推动了基于Web的电子商务快速增长，并在广域网中分布式Web应用程序的安全管理方面发挥了重要作用。

#### 14.7.1 HTTPS概述

HTTPS是在安全传输层上发送的HTTP。在未加密的HTTP中，报文直接通过TCP传输；而在HTTPS中，报文先经过SSL/TLS安全层加密后再发送给TCP。我们通常用SSL来指代SSL或TLS协议。

#### 14.7.2 HTTPS方案

安全HTTP是可选的。请求Web资源时，URL方案前缀决定了是否使用安全协议：
- 非安全HTTP: `http://www.joes-hardware.com/index.html`
- 安全HTTPS: `https://cajun-shop.securesites.com/Merchant2/merchant.mv?Store_Code=AGCGS`

客户端根据URL方案决定连接到哪个端口：
- `http` 方案: 连接到服务器的80端口，并发送HTTP命令
- `https` 方案: 连接到服务器的443端口，与服务器握手并交换SSL安全参数，然后发送加密的HTTP命令

#### 14.7.3 建立安全传输

在未加密的HTTP中，客户端通过TCP连接到服务器的80端口，发送请求并接收响应，然后关闭连接。而在HTTPS中，过程更复杂：
1. 客户端打开到服务器443端口的连接。
2. 一旦建立TCP连接，客户端和服务器初始化SSL层，协商加密参数并交换密钥。
3. 握手完成后，SSL初始化完成，客户端可以将请求报文发送给安全层，进行加密后通过TCP传输。

#### 14.7.4 SSL握手

在发送加密的HTTP报文之前，客户端和服务器需要进行SSL握手，完成以下工作：
- 交换协议版本号；
- 选择双方都支持的密码套件；
- 认证双方的身份；
- 生成临时会话密钥，用于加密通信通道。

SSL握手的基本步骤如下：
1. 客户端发送可供选择的密码并请求证书。