Pin will instrument when a new instruction is executed in instruction-level
instrumentation. In other words, Pin can automate the instrumentations of dynami-
cally generated code, so you can use Pin to handle shelled programs.
---
## Page 420
406
5  Reverse Engineering
agplicatio
tosls svitches
nit9
toot
for MyPinTool oitput
rated vith senicolons that is searched for syebo?
[default0]
vill contain the pid
Fig, 5.104 pin64 usage
ht*,"1", "count instructions, basic blocks and th
Fig, 5.105 The definition of KnobOutputFile and KnobCount
Table 5.8 Pin-provided instrumentations
Instrumentations size
API
Timing of execution
Instruction-level
INS_AddlnstrumentFunction
When executing a new
instrumentations
instrumentation
Trace-level
TRACE_AddlnstrumentFunction
instrumentations
Image-level
IMG_AddlnstrumentFunction
When loading a new image
instrumentations
Routine-level
RTN_AddlnstrumentFunction
When executing a new
instrumentations
function
Trace-level instrumentation can be thought of as basic block level instrumenta-
tion, but Pin defines more basic blocks than are normally defined. Trace-level
instrumentations are called at the top of the basic block, and if a new basic block
(e.g., a branch) is generated during execution, a new trace is generated, which has the
same characteristics as the above instruction-level instrumentations and makes it
easier to handle dynamically generated code.
Image-level instrumentations and routine-level instrumentations depend on sym-
bol infommation and require a symbol analysis of the program by calling
Pin_InitSymbols before calling PIN_Init.
The Trace function is shown in Fig. 5.106; the TRACE_BblHead function gets
the head of the basic block of the current trace, traverses down through all the basic
---
## Page 421
5.7 Moderm Reverse Engineering Techniques
407
VoID Irace(TRACE trace,VoID *v)(
for (BBL bb1 = TRACE_Bb1Head(trace); 88L_Valid(bb1); bb1 = B8L_Next(bb1)) {
B8L_InsertCal1(bbl, IPOINT_seFORE, (AFUNPTR)Count8bl, IARG_uINT32,
BBL_NumIns (bb1), IARS_END);
Fig, 5.106 Trace function
Fig, 5.107 CountBbl
VOID CountBb1（UINT32 numInstInBb1)
function
bblCount++;
insCount += numInstInBb1;
1og. 1og
MyPinTool
analysis results:
Number of
instructions:1965508
4
Number of
basic blocks: 478369
5
Number of
threads:1
Fig, 5.108 log.log file
blocks using BBL_Next, and inserts the CountBbl function before the basic block is
executed. The number of all instructions and basic blocks will be counted before
each basic block is executed by calling the function (Fig. 5.107).
Therefore, it is posible to calculate the number of basic blocks and the number of
Pintool that records the number of instructions executed by the program, se Fig. 5.108.
instructions executed by the program by instrumenting the basic blocks to obtain a
This section explains the basic framework of Pintool, and more APIs are available
in Intel Pin's documentation at https:/software.intel. com/sites/landingpage/pintool/
docs/97619/Pin/html/index.html.
5.7.3.4  CTF Practice: Recording the Number of Executed Instructions
This section describes how to use this instruction counter to solve the CTF challenge.
The reverse challenge in CTF can be abstracted as that a given input string flag,
with the data embedded in the program. In the case that a change in some bytes in the
computed by some algorithm f to get the result enc, and then compare the result enc
flag will only affect some bytes in the enc, then one can consider dividing the flag
into multiple segments, brute-force attacking the input, and treating the algorithm f
---
## Page 422
408
5  Reverse Engineering
directly as a black box, without reverse it. To do the brute-force attack, one needs to
find some way to verify that a part of the current input is correct. Consider that when
comparing data to enc, whether it is a handwritten loop comparison or using a library
function such as memcmp, the more same bytes enc and data have, the more
instructions will be executed. Therefore, we can use the number of instructions
executed as a flag to verify that a part of the current input is correct.
For the reverse challenge, we can first use Pin to verify whether the current
program meets the above requirements.
The example for this section is Hgame 2018 week4 re1. Since the overhead of
trace-level instrumentation is less than that of instruction-level instrumentation, we
do not count the number of instructions executed by the program, but rather the
number of basic blocks executed by the program.
First, create a new project and configure the environment according to the MyPintool
example provided. The overall framework of the program is shown in Fig. 5.109.
Since we are only interested in the number of basic blocks executed by the
program itself while it is running, and not in the execution in the external DLL,
we need to use IMG_AddInstrumentFunction to record the start and end addresses of
the program image, see Fig. 5.110.
Then use TRACE_AddInstrumentFunction to perform trace-level instrumenta-
tion and decide whether to perform instrumentation based on the current address of
the trace, see Fig. 5.111.
The stub function only needs to record the number of basic blocks, see Fig. 5.112,
and finally, print the recorded data, see Fig. 5.113, where the result is output to stdout
for funther automation.
int main(int argc, char *argv[])
if (PIN_Init(argc, argv))
f()ogesn uanao
string fileName = KnobOutputFile.Value();
if（1filelame.empty(））（out =mew std::ofstream（fileName,c_str(）);）
ING_AddInstrumentFunction(InageLoad, 0);
TRACE_AddInstrumentFunction(bblTrace, 0);
PIN_AddFiniFunction(Finf, 0);
// Start the prognan, never returns
return 0;
Fig,. 5.109 The overall framework of the program
---
## Page 423
5.7 Modern Reverse Engineering Techniques
60
void imageload(ING img,void*v){
if （IMG_IsMainExecutable（img))(
imageBase = IMG_LowAddress(img);
imageEnd = IMG_HighAddress(img);
Fig, 5.110 imageLoad Code
VoID bblTrace(TRACE trace, voIo *v)
ADORINT addr ·TRACE_Address(trace);
if(addrinageEnd)(
retuen;
// Visit every basic block in the trace
for (88L bb1 = TRACE_sb1Head(trace); 88L_Va1id(bb1); bb1 = 8BL_iext(bb1))
BBL_InsertCal1(bb1, IPOINT_BEFORE, (AFUNPTR)Count8b1, IARG_END);
Fig, 5.111 bblTrace Code
Fig, 5.112 CountBbl Code
voID CountBb1()
bb1Count++;
VOID Fini（INT32 code，VOID *v)
out = &cout;
*out python3\python.exesolue-pya
chr:b'0
bbl:343 diff:343
IRSTUUUKY2E
bb1:343 diff:0
bb1:345 diff:2
bb1:343 diff:0
Fig, 5.116 The result of python script executed
You can then use Python to count the number of basic blocks executed, as shown
in Fig. 5.115
calc_bbl uses subprocess to get the number of basic blocks that the program
executes for the current Payload, and check_charset iterates through the charset and
outputs the result. The result of the run is shown in Fig. 5.116.
---
## Page 425
5.7 Modern Reverse Engineering Techniques
411
Fig, 5.117 Calculate flag
chr:b'S' bb1:2609 diff:0
check:
check:
check:
b'EFGHIJKE'
check:
check:
b'Zabcdof2"
hijklng'
check:
check:
check:
bb1:2712 diff:2712
chr:b'2bb1:2712diff:2712
Fig, 5.118 Verify the flag
C:\Users\plusls\Desktop>aaa\virtual_uaifu2.oxe
3z_un_u_cr4
Input yo
Neuer Giue Unago
When the input is 3, the number of basic blocks executed is different from the
other inputs, so consider using diff2 as a verification flag. The reason why the
above character set starts and ends with 0 is that if ° ↓ is the correct input, it is bound
to be wrong when the O is verified again later so that you can see the change of the
execution result and facilitate verification.
After automating this entire process, the flag is automatically calculated, see
Fig. 5.117, and the flag is entered into the program to verify that an error was
found, see Fig. 5.118.
Because some extra work is performed after the flag is validated correctly, the
difference in the number of basic blocks performed is not just 2. Analyzing the
results, we find that the letter b is probably the correct character, see Fig. 5.119.
Completing the flag and we can pass the verification, see Fig. 5.120.
5.7.3.5 CTF Practice: Recording Command Tracks
It is very difficult to analyze OLLVM directly because it obfuscates the control flow
of the program, but if you use Pin to record the basic blocks that the program has
executed, you can get the execution flow of the program, which will help us in the
reverse analysis.
The example in this section is the reverse of the Pediy CTF 2018 challenge:
Wailing Wall. After entering the main function, you are confronted with a wallin the
IDA flowchart, see Fig. 5.121.
We consider the use of Pin to instrument a basic block and record the flow of
execution of the basic block. First, create a new Pintool project based on MyPintool
---
## Page 426
412
5 Reverse Engineering
Fig, 5.119 Find the leter b
hr:b'E'
bb1:2712 diff:2712
bb1:2712
diff:2712
hr:b'a'
bb1:2712 diff:2712
obl:2712
diff:0
r:b*)
bb1:2712
bb1:2712
diff:0
:b'1
diff:0
hr:b'o
":b'8
bb1:2712
obl:2712
diff:0
diff:0
":b'h
2712
2712
diff:0
bl:
diff:0
bbl:2712 diff:0
":b'b
bb1:2712 diff:0
obl:2708diff:-4
P
bb1:2712
obl:2712
diff:0
diff:0
2712
diff:0
2712
diff:0
Fig, 5.128 Verify the flag
rs\plusls\De
fla9
sktop>asa\uirtua]_waifu2.exe
nput
_JOb
Fig, 5.121 IDA control flow graph
---
## Page 427
5.7 Moderm Reverse Engineering Techniques
1
o",,"specifyfile
T32> KnebLeft(INCB_MOce_wRITEoNCe, *pintoo1",
“r"，"","right"）;
"count", "1", "count instructions, basic blocks and threads in the application"))
Fig, 5.122 Pintool configure
UINT32 translateIP(ADoRINT ip){
return (UINT32)ip - ImageBase + KnobDefaultImageBase.Value();
vold InageLoad(ING img, void* v) {
if (IMG_IsRainExecutable(img){
ImageBase = DNG_LowAddress(ing);
Fig, 5.123 Instrumentation
and configure the environment. For configurability and optimized performance,
three configurable parameters are added to Pintool, as shown in Fig. 5.122.
Since ASLR is turmed on when the program runs, the base address will be
different from that in IDA, so it is necessary to pass the base address of the program
in IDA to produce logs that are easy to analyze. Considering that only the basic block
execution flow of the verification function needs to be logged, passing the bound-
and the performance loss.
aries of the function is needed to reduce both the number of addresses to be logged
To handle the
base address problem,youneedto call
IMG_AddlnstrumentFunction to perform instrumentation when the program image
is loaded, see Fig. 5.123, where translateIP converts the current address to the
address in IDA
This is followed by the most critical recording IP, see Fig. 5.124.
The myTrace function determines the IP of the current basic block, and if it is in 
the interval of the check function, it processes it in detail. (Considering the space,
only a collection of the addresses that have been executed is recorded here for
 oueuo ueo no us uonnsu  posau on pu no j asn unbasqns
code yourself.) This completes a simple IP recording Pintool. Compiling and
---
## Page 428
414
5  Reverse Engineering
set(string> stringSet;
void myTrace(ADoRINt ip) (
UINT32 tIP - translateIP(1p);
char tmp[1e24];
If (tIP >= KnobLeft.Value() && tIP< KnobRight,Value()) (
snprintf(tnp, sizeof(tnp),“%p°, tIP);
if (stringSet.find(s) == stringSet.end())(
string s(tnp);
stringset.insert(s);
*out << tnp << endl;
VOID bb1Trace(TRACE trace, voIo *v)(
for (BBL bb1 = TRACE_Bb1Head(trace); BBL_Valid(bb1); bb1 = B8L_Next(bb1)) (
SBL_InsertCal1(bo1, IPOINT_BEFORE, (AFUnPTR)myTrace, IARG_INST_PTR,
IARG_END);
Fig, 5.124 Record IP
看雪2018国庆题：双息之墙
FO
.0X
x23x45x67x350x
输入错误
Fig, 5.125 Run pin32
running it, the Pintool records the basic blocks that have been executed, see
Fig. 5.125. Note that out is an opened file stream and needed to be closed when
the execution is finished, or some of the information may be lost.
The log.log contains the recorded instruction sequence, see Fig. 5.126. Since the
address does not visualize which basic blocks have been executed, the IDA script
can be used to color the program’s basic blocks, marking those that have been
executed. Due to space limitations, we only give the core code for coloring the basic
blocks (see Fig. 5.127:; see the Appendix for the complete script). The results are
shown in Fig. 5.128.
Once we have the information about the executed basic blocks, we can easily
analyze the program algorithm. If you are familiar with IDAPython, you can also
color the basic blocks according to the number of times they have been executed.
---
## Page 429
5.7 Modern Reverse Engineering Techniques
415
Fig, 5.126 instruction
sequence
1og.1g
0x409ff0
0x40a003
0x40a0bb
0x40a0c0
0x40a0d7
0x40a0dc
0x40a0f3
0x40a0f8
9
0x40a10f
10
11
0x40a12b
0x40a114
12
23