# Stitching Numbers: Generating ROP Payloads from In-Memory Numbers

**Author:** Alex Moneger  
**Role:** Security Engineer  
**Date:** August 10, 2014  
**Confidentiality Notice:** Cisco Confidential

---

## Abstract
This document discusses the generation of Return-Oriented Programming (ROP) payloads using in-memory numbers. The focus is on automating the process and solving the coin change problem to generate ROP payloads. The research was conducted in the author's personal time and represents the author's opinions, not those of their employer.

## About the Author
- **Employment:** Security Engineer at Cisco Systems, Cloud Web Security Business Unit
- **Interests:** Bits and bytes
- **Disclaimer:** This work was done in the author’s personal time and reflects the author's opinions, not those of Cisco or its affiliates.

## Agenda
1. Brief ROP Overview
2. Automating ROP Payload Generation
3. Number Stitching
   - Goal
   - Finding Gadgets
   - Coin Change Problem
   - Pros, Cons, and Tooling
   - Future Work

## Introduction
The goal is to use gadgets generated by libc or compiler stubs, rather than binary ones, to generate ROP payloads using numbers found in memory. This involves solving the coin change problem to automatically generate the payloads and automate the payload generation process.

## ROP Overview
### Principle
- **Reusing Instructions:** Reuse instructions from the vulnerable binary.
- **Control Flow:** Use the stack pointer to control the flow.
- **Multi-Stage Process:**
  1. Build the payload in memory using gadgets.
  22. Transfer execution to the generated payload.
- **OS Protections:** Bypass modern OS protections, except for home routers, embedded systems, and IoT devices.

### Finding Instructions
- **Gadgets:** Useful instructions are identified as gadgets.
- **Disassembly:** Disassemble backwards from the "ret" instruction.
- **Tools:** Good tools are available for this purpose.
- **Number of Gadgets:** The number of gadgets depends on the target binary.

### Transferring Control to Payload
- **Payload Construction:** Once the payload is built in memory.
- **Stack Pivoting:** Redirect execution to a stack crafted by the attacker.
- **Useful Gadgets:**
  - `leave; ret`
  - `mov esp, addr; ret`
  - `add esp, value; ret`

## Automating Payload Generation
### Classic Approach
- **Finding Bytes:** Locate required bytes in memory.
- **Copying Bytes:** Copy them to a controlled stack.
- **Gadget Usage:**
  - Use a `mov` gadget (1, 2, or 4 bytes).
  - Use a copy function if available (e.g., `strcpy`, `memcpy`).

### Potential Problems
- **Availability of `mov` Gadget:** May require GOT dereferencing.
- **Byte Availability:** May need manual work to get missing bytes.

### Example
```bash
someone@something:~/somewhere$ sc="\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"
someone@something:~/somewhere$ ROPgadget abinary Bopcode "\x73\x68"
Gadgets information
============================================================
0x08048321: "\x73\x68"
someone@something:~/somewhere$ hexdump -C abinary.text | egrep -B color "73(\s)*68"
00000320  75 73 16 80 00 65 78 69  74 00 73 74 72 6e 63 6d  |us..exit.strncmp|
someone@something:~/somewhere$ hexdump -C hbinary5Bmem.txt | egrep -B color "68(\s)*2f"
someone@something:~/somewhere$
```

### Small Binaries
- **Limited Mov Gadgets:** Small binaries may lack many `mov` gadgets.
- **Null Byte Handling:** Manual work may be required for null bytes.

## Number Stitching
### Initial Problem
- **Exploitation Feasibility:** Can a "hello world" type vulnerability be exploited with:
  - RELRO
  - NX
  - ASLR
- **Payload Construction:** Can the ROP payload be built only from libc/compiler introduced stubs?

### Program Anatomy
- **Libc Static Functions:** At link time, `libc.so` is used, which both dynamically and statically links some functions.
- **Static Linking:** Some functions are statically linked, depending on compile options.

### Useful Gadgets
- **Control of Registers:** Control of `ebx` in profiling functions.
- **Stack Pivoting:** Use `leave;;` for stack pivoting.
- **Memory Writing:** Write to memory using `add [ebx+0x5d5b04c4] eax;;`.

### Shellcode to Numbers
- **Accumulating Values:** Use `add eax [ebxB0xb8a0008];` to add arbitrary memory to `eax`.
- **Dumping Values:** Use `add [ebx+0x5d5b04c4] eax;;` to write values to memory.

### Approach
- **Memory Selection:** Choose a spot in memory (e.g., `.data` section) to build a stack.
- **Shellcode Chunks:** Cut the shellcode into 4-byte chunks and interpret each chunk as an integer.
- **Monotonically Increasing Values:** Order the chunks and compute the differences to create a set of monotonically increasing values.

### Visual Chopping
- **Example:**
  - Shellcode: `\x04\x03\x02\x01 \x08\x07\x06\x05 \x0d\x0c\x0b\x0a`
  - Chunks: `0x01020304, 0x05060708, 0x0a0b0c0d`
  - Deltas: `0x04040404, 0x05050505, 0x0a0b0c0d - 0x05060708 = 0x05050505`
  - Monotonically Increasing: `0x01020304, 0x05060708, 0x0a0b0c0d`

### Reverse Process
- **Adding Deltas:** Add delta n with n+1 and dump that delta at the stack index.
- **Copying Shellcode:** Repeat the process to copy the shellcode to the stack.

### Example
1. Find the address of number `0x01020304` in memory.
2. Load that address into `ebx`.
3. Add memory to `reg`. `Eax` contains `0x01020304`.
4. Add `reg` to memory at index 3. Fake stack contains `\x04\x03\x02\x01`.
5. Find the address of number `0x04040404` in memory and load into `ebx`.
6. Add memory to `reg`. `Eax` contains `0x01020304 + 0x04040404 = 0x05060708`.
7. Add `reg` to memory. Fake stack contains `\x08\x07\x06\x05\x04\x03\x02\x01`.
8. Repeat the process.

### Problem
- **Finding Numbers in Memory:** It is challenging to find large numbers in memory.
- **Example:** Looking for `0x01020304` in the `.text` section.
  ```bash
  someone@something:~/somewhere$ gdb hw
  gdb-peda$ peda searchmem 0x01020304 .text
  Searching for '0x01020304' in: .text ranges
  Not found
  ```

### Conclusion
- **Stitching Numbers:** It is not easy to find large numbers in memory, but the process can be automated to stitch together smaller numbers to form the required shellcode.

---

**Copyright Notice:** © 2013-2014 Cisco and/or its affiliates. All rights reserved.