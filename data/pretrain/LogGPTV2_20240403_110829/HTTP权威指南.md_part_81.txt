UUID URI是很有用的。
参见draft-kindel-uuid-uri-00.txt
urn 持久的、与位置无关的URN 2141
vemmi 允许VEMMI（万用多媒体接口）客户端软件和VEMMI终端连接 2122
VEMMI兼容的服务。VEMMI是一种在线多媒体应用服务的国际
标准
videotex 允许videotex客户端软件或终端连接与ITU-T和ETSI videotex标
准兼容的videotex服务。
参见http://www.ics.uci.edu/pub/ietf/uri/draft-mavrakis-videotex-url-
spec-01.txt 503
view-source 网景的Navigator的源码查看器。这些view-source URL可以显示
用JavaScript生成的HTML
wais 广域信息服务——一种早期搜索引擎形式 1738
whois++ WHOIS++简单因特网目录协议的URL。 1835
参见http://martinh.net/wip/whois-url.txt
whodp WhoDP（Widely Hosted Object Data Protocol，广泛托管对象数据
协议）用于沟通大量动态、可重定位对象的当前位置和状态传递。
WhoDP程序通过“订阅”定位对象，接收与某对象有关的信息，
并“发布”这些信息，控制此对象的位置和可见状态
z39.50r，z39.50s Z39.50会话与检索URL。Z39.50是一种信息检索协议，不能很好 2056
地适用于主要为获取无状态数据而设计的检索模式。它将通用的
用户查询设计为面向会话的多步任务，服务器在继续处理任务之
前，会向客户端请求额外的参数，因此每一步任务都可能被临时
挂起 504
URI方案 ｜ 527
附录B
状态码
HTTP
529
附录Ｂ是HTTP状态码及其含义的快速参考。
B.1 状态码分类
HTTP状态码分为5类，如表B-1所示。
表B-1 状态码分类
总体范围 已定义范围 类 别
100~199 100~101 信息
200~299 200~206 成功
300~399 300~305 重定向
400~499 400~415 客户端错误
500~599 500~505 服务器错误
B.2 状态码
表B-2是HTTP/1.1规范定义的所有状态码的快速参考，表中概述了每种状态码及
其含义。3.4节曾详细地介绍了这些状态码及其用法。
表B-2 状态码
状态码 原因短语 含 义
100 Continue（继续） 收到了请求的起始部分，客户端应该继续请求
101 Switching Protocols（切换协议） 服务器正根据客户端的指示将协议切换成Update
首部列出的协议
200 OK 服务器已成功处理请求
201 Created（已创建） 对那些要服务器创建对象的请求来说，资源已创建
505 完毕
202 Accepted（已接受） 请求已接受，但服务器尚未处理
203 Non-Authoritative Information（非权 服务器已将事务成功处理，只是实体首部包含的信
威信息） 息不是来自原始服务器，而是来自资源的副本
204 No Content（没有内容） 响应报文包含一些首部和一个状态行，但不包含实
体的主体内容
205 Reset Content（重置内容） 另一个主要用于浏览器的代码。意思是浏览器应该
重置当前页面上所有的HTML表单
206 Partial Content（部分内容） 部分请求成功
530 ｜ 附录B
（续）
状态码 原因短语 含 义
300 Multiple Choices（多项选择） 客户端请求了实际指向多个资源的URL。这个代码
是和一个选项列表一起返回的，然后用户就可以选
择他希望使用的选项了
301 Moved Permanently（永久搬离） 请求的URL已移走。响应中应该包含一个Location
URL，说明资源现在所处的位置
302 Found（已找到） 与状态码301类似，但这里的搬离是临时的。客户
端应该用Location首部给出的URL对资源进行
临时定位
303 See Other（参见其他） 告诉客户端应该用另一个URL获取资源。这个新的
URL位于响应报文的Location首部
304 Not Modified（未修改） 客户端可以通过它们所包含的请求首部发起条件请
求。这个代码说明资源未发生过变化
305 Use Proxy（使用代理） 必须通过代理访问资源，代理的位置是在Location
首部中给出的
306 （未用） 这个状态码当前并未使用
307 Temporary Redirect（临时重定向） 和状态码301类似。但客户端应该用Location首部
给出的URL对资源进行临时定位
400 Bad request（坏请求） 告诉客户端它发送了一条异常请求
401 Unauthorized（未授权） 与适当的首部一起返回，在客户端获得资源访问权
之前，请它进行身份认证
402 Payment Required（要求付款） 当前此状态码并未使用，是为未来使用预留的
403 Forbidden（禁止） 服务器拒绝了请求
404 Not Found（未找到） 服务器无法找到所请求的URL
405 Method Not Allowed（不允许使用的 请求中有一个所请求的URI不支持的方法。响应中
方法） 应该包含一个Allow首部，以告知客户端所请求的
资源支持使用哪些方法
406 Not Acceptable（无法接受） 客户端可以指定一些参数来说明希望接受哪些类型
的实体。服务器没有资源与客户端可接受的URL相
匹配时可使用此代码
407 Proxy Authentication Required（ 要 和状态码401类似，但用于需要进行资源认证的代
求进行代理认证） 理服务器 506
408 Request Timeout（请求超时） 如果客户端完成其请求时花费的时间太长，服务器
可以回送这个状态码并关闭连接
409 Conflict（冲突） 发出的请求在资源上造成了一些冲突
HTTP状态码 ｜ 531
（续）
状态码 原因短语 含 义
410 Gone（消失了） 除了服务器曾持有这些资源之外，与状态码404类似
411 Length Required（要求长度指示） 服务器要求在请求报文中包含Content-Length
首部时会使用这个代码。发起的请求中若没有
Content-Length首部，服务器是不会接受此资源
请求的
412 Precondition Failed（先决条件失败） 如果客户端发起了一个条件请求，如果服务器无法
满足其中的某个条件，就返回这个响应码
413 Request Entity Too Large（请求实体 客户端发送的实体主体部分比服务器能够或者希望
太大） 处理的要大
414 Request URI Too Long（ 请 求URI 客户端发送的请求所携带的请求URL超过了服务器
太长） 能够或者希望处理的长度
415 Unsupported Media Type（不支持的 服务器无法理解或不支持客户端所发送的实体的内
媒体类型） 容类型
416 Requested Range Not Satisfiable（所 请求报文请求的是某范围内的指定资源，但那个范
请求的范围未得到满足） 围无效，或者未得到满足
417 Expectation Failed（无法满足期望） 请求的Expect首部包含了一个预期内容，但服务
器无法满足
500 Internal Server Error（内部服务器 服务器遇到了一个错误，使其无法为请求提供服务
错误）
501 Not Implemented（未实现） 服务器无法满足客户端请求的某个功能
502 Bad Gateway（网关故障） 作为代理或网关使用的服务器遇到了来自响应链中
上游的无效响应
503 Service Unavailable（未提供此服务） 服务器目前无法为请求提供服务，但过一段时间就
可以恢复服务
504 Gateway Timeout（网关超时） 与状态码408类似，但是响应来自网关或代理，此网
关或代理在等待另一台服务器的响应时出现了超时
505 HTTP Version Not Supported（不支 服务器收到的请求是以它不支持或不愿支持的协议
507 持的HTTP版本） 版本表示的
532 ｜ 附录B
附录C
首部参考
HTTP
533
回想起第一个HTTP版本——版本0.9，还是挺有趣的，因为它没有定义任何首部。
尽管这样肯定存在弊端，但不得不为其简洁的优雅而啧啧称奇。
好吧，回到现实中来。现在有很多的HTTP首部，有一些是规范中定义的，还有一
些是对规范的扩展。本附录提供了一些有关这些正式首部和扩展首部的背景知识，
你还可以将其作为本书各种首部的索引使用，说明了这些首部的概念和特性是在正
文的什么地方讨论的。这些首部大部分都很简单、直接，是它们之间或者与HTTP
其他特性之间的交互使得事情变得比较复杂。本附录为所列首部提供了一些背景知
识，并指导用户参阅书中详细讨论的对应章节。
本附录列出的首部是从HTTP规范、相关文档和我们自己使用HTTP报文和因特网
上各种服务器和客户端的经验中提取出来的。
这个列表远远称不上完备。Web中还有很多其他的扩展首部，更别说私有内部网
络中使用的那些首部了。尽管如此，我们已经使这个表尽可能地完整了。当前的
HTTP/1.1规范和官方首部及其规范描述参见RFC 2616。
Accept
客户端用Accept首部来通知服务器可以接受哪些媒体类型。Accept首部字段的值
是客户端可以使用的媒体类型列表。如果Web浏览器无法显示Web上所有的多媒
体对象类型，就可以在请求中包含Accept首部，这样浏览器就不会去下载它无法
使用的视频或其他对象类型了。
为了防止服务器有多种版本的媒体类型，还可以在Accept首部字段中包含一个质
量值（q值）列表，用以告知服务器它优选哪种媒体类型。有关内容协商和q值的
508 完整讨论参见第17章。
类型 请求首部
注释 “*”是个特殊值用来通配媒体类型。比如，“*/*”表示所有类型，
“image/*”表示所有的图片类型。
举例 Accept: text/*, image/*
Accept: text/*, image/gif, image/jpeg; q=1
Accept-Charset
客户端用Accept-Charset首部来通知服务器它可以接受哪些字符集或哪些是优选
字符集。这个请求首部的值是个字符集列表和所列字符集可能的质量值。当服务器
上有以多种可接受字符集表示的文档时，可以通过质量值告知服务器哪个字符集是
优选的。有关内容协商和q值的完整讨论参见第17章。
534 ｜ 附录C
类型 请求首部
注释 与Accept首部一样，“*”是个特殊字符。如果有“*”，就表示除了
显式地用值设置的字符集之外的所有字符集。如果没有“*”，那么值
字段中没有设置的所有字符集的q值都默认为零，这不包括字符集iso-
latin-1，它的默认值为1。
基本语法 Accept-Charset: 1# ((charset | "*") [";" "q" "="
qvalue])
举例 Accept-Charset: iso-latin-1
Accept-Encoding
客户端用Accept-Encoding首部来告知服务器它可以接受哪些编码方式。如果服
务器所持有的内容是经过编码的（可能是压缩过的），这个请求首部可以告诉服务器
客户端是否会接受它。第17章探讨了Accept-Encoding首部。
类型 请求首部
基本语法 Accept-Encoding: 1# ((content-coding | "*") [";" "q"
"=" qvalue])
举例 Accept-Encoding:1
Accept-Encoding:gzip
Accept-Encoding: compress;q=0.5,
gzip;q=1 509
Accept-Language
和其他Accept首部一样，客户端可以通过Accept-Language请求首部通知服务
器可接受或优选哪些语言（比如，内容所使用的自然语言）。第17章详尽介绍了
Accept-Language首部。
类型 请求首部
基本语法 Accept-Language: 1# (language-range [";" "q" "=" qvalue])
language-range = ((1*8ALPHA * ("-" 1*8ALPHA)) | "*")
举例 Accept-Language: en
Accept-Language: en;q=0.7, en-gb;q=0.5
注1： 这并不是印刷错误。它指的是身份编码——也就是未编码的内容。如果提供了空的Accept-
Encoding首部，就说明只能接受未编码的内容。
HTTP首部参考 ｜ 535
Accept-Ranges
Accept-Ranges首部与其他Accept首部不同——它是服务器使用的一种响应首
部，用来告知客户端它们是否接受请求资源的某个范围。如果这个首部有赋值的话，
这个值就说明了服务器允许对指定资源的哪个范围类型进行访问。
客户端可以在没有收到这个首部的情况下，对某资源发起范围请求。如果服务器不
支持对那个资源的范围请求，可以以适当的状态码进行响应2，将Accept-Ranges
的值设置为none。服务器可以为普通请求发送none值，这样客户端以后就不会发
起范围请求了。
第17章完整介绍了Accept-Ranges首部。