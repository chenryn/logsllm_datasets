### Proposed new feature or change:
    @jit(nopython=True)
    def slidingWindow(a,window):
    	'''
    	Make an ndarray with a sliding window of the first dimension(axis = 0)
    	Parameters
    	----------
    	a : array_like
    		Array to add sliding window to
    	window : int
    		Size of sliding window
    	Returns
    	-------
    	Array that is a view of the original array with a added dimension of size w.
    	'''
    	if window  a.shape[0]:
    		raise Exception('Arg: window cannot bigger than a.shape[0]')
    	shape = (a.shape[0] - window + 1,) + a.shape[1:] + (window,)
    	strides = a.strides + (a.strides[0],)
    	return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
    def TSPctlInterMean(m,d,p1,p2):
    	'''
    	TSMean for interval:[p1,p2] in past d dates 
    	p1/p2: in np.array([0.1,0.25,0.5,0.75,0.9])
    	'''
    	if m.dtype == 'bool':
    		raise Exception('Cannot be Bool!!!')
    	size = m.size
    	if size == 1:
    		raise Exception('Cannot be Scalar!!!')
    	rowNum,colNum = m.shape[0],m.shape[1]
    	if rowNum = PctMat1
    	indLogic2 = m_3d <= PctMat2
    	indLogic = np.logical_and(indLogic1,indLogic2)
    	#return indLogic
    	m_3d_slice = m_3d[indLogic]	#cannot keep dimension 
    	return bt.nanmean(m_3d_slice,axis=2)
`m1 = np.random.randn(300,3000)`  
`TSPctlInterMean(m1 ,21,0.2,0.7)` will raise Error!!!  
`m_3d_slice = m_3d[indLogic]` will be a vector  
how can I keep the same dimension with m_3d  
Thanks!!!