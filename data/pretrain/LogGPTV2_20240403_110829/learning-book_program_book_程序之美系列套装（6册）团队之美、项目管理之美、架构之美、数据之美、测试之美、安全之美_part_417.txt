但是也有一些队伍领导人并不合作。他们不愿意放松调度或者使用
生产率指标来弥补为了修补已确认的漏洞的时间增长需求。他们更
倾向于为创建功能而分配时间和预算，而不是为了改进他们的队伍
所编写代码的漏洞风险评分。事实上，队伍领导人自信地以为安全
漏洞并不是缺陷，它是可以推迟到未来的完善或未来的项目。Acme
通过两个重要的调整来处理这个问题。
CIO所作出的第一个关键决定是推翻之前的协议，取消了15%的生产
率指标，纯粹把它当成一种削减软件开发预算的方式，消除软件生
命周期所有阶段的某一层次的意外事件。我刚开始是害怕这个决定
的，因为它限制了我用来鼓励项目领导人确定和修正安全漏洞的杠
秆。但是，结果却证明这个决定实际上增加了大家对安全计划的遵
循性。通过静态分析测试成为开发队伍必须完成的任务，他们感觉
到了在软件生命周期的早期消除缺陷的需要，以避免它们的产品在
最后时刻由于这个原因而被退回。
第二个决定是实现一个详细的报告框架。在这个框架中，每个月都
把关键的性能度量指标（例如，每行代码出现一个高风险漏洞的比
2415
---
## Page 2417
例）由队伍领导人、经理和CIO共享。静态代码分析器所产生的漏洞
信息按照项目、资产和机构的层次进行总结，并由所有的利益承担
人共享。经过一段时间，并发领导人把注意力集中到会增加他们风
险评分的问题上，并实质性地与其他队伍展开竞争，以实现更好的
结果。这对CIO并没有什么损失，他将毫不犹豫地把开发领导人召集
到他的办公室，要求他们根据每月报告回答与SQL注人漏洞有关的
问题。
对安全控制的进一步抵制逐渐消失。尽管仍然有一些Acme开发人员
和队伍领导人相信安全控制是个负担，使他们束手束脚。但经过一
段时间之后，他们都接受了它们，把它们作为核心需求。
后来，Acme增加了由外部服务公司所运行的针对它的核心控制的动
态测试和人工渗透测试。这家公司花费了大量的时间把漏洞信息的
报告集成到一个模型中，与Acme的责任模型进行链接。这就在整个
机构的所有层次上增强了所需要的行为。最初由18位开发人员所组
成的核心队伍在一个为期三年的时间框架内增加到超过70人。我们
还创建了一个格式化过程，向队伍领导人提供某些被选中的开发人
员的性能反馈，帮助开发人员进行安全训练，并实现提开和轮转，
这对于他们的职业发展是非常有益的。
11.2.3把安全计划扩展到外包
到目前为止所描述的步骤是在Acme的主要开发点进行的，密切的监
视和个人接触可以增强对规则的学习。但是，有些开发是由外部服
务供应商进行的，他们不可能得到公司内部所具有的密切控制。因
此，Acme为外部开发设计了一些特定的控制。它们都基于一些核心
控制：
外部开发人员必须按照相同的核心控制（例如分析工具）把他们的
代码与Acme所开发的代码集成。
Acme对远程访问体系结构提出了一些标准，包括特定的控制。
·对开发环境的访问将受到Acme的监视和严格控制，限制对核心开发
服务器和工具的访问。
在这个软件安全计划的前儿年，由于使用成本低廉的外国承包人所
创建的富有吸引力的经济环境，Acme的海外开发数量有所增长。这
导致了新的安全问题的出现。例如，海外厂商的员工可能会访问超
2416
---
## Page 2418
出他们的项目需要的源代码。Acme增加了一些选择性的控制，监视
和限制对文件和开发服务器的访问。
11.3对现有的软件进行安全化
有了一个相对较为成熟的应用程序安全计划之后，Acme决定解决现
成的商业软件（简称COTS）的安全控制问题。和大多数公司一样
Acme在业务和工作站软件方面对外购软件的依赖性不断增加，我们
无法在软件实现之前进行对它们安全审查。
在Acme内部，很多人对于商业软件是否能够采用任何安全控制也存
在大量的怀疑态度。IT领导人很不情愿对任何诸如评估和选择软件
包这样需要增加包袱或时间的事情提供支持。Acme的业务领导人并
不确定软件公司在开发过程中对顾客的安全控制是如何作出反应
的。
但是，我热情地推动至少在部分商业软件应用程序中采用安全控
制。我认识到软件在商业基础设施中扮演了越来越重要的角色，并
且经济因素驱使Acme这样的公司越来越依赖于从商业软件开发商那
里购买现成软件。我相信，经过一段时间之后，很可能会出现与应
用程序的安全有关的规章要求。Acme需要未雨绸缪，提前采取安全
控制措施，以避免在面临新的规章制度时不及防。例如，2008年4
月，美国货币监理署（OCC）公布了它们所监管的金融服务公司在
软件安全需求方面的全面指导意见。这是美国第一个明确与软件安
全有关的全面规章要求。对于那些在软件安全方面还没有制订成熟
计划的公司而言，采纳和实现一个完全遵循OCC需求的安全计划是
件非常艰巨的任务。创建一个完全顺应性方案的成本是非常巨大
的，何况还有时间和资源方面的压力。另外，我们可以实现的任何
控制都表示对现状的巨大改进，因为目前没有办法确认使用外购软
件的安全风险，也无法对供应商施加影响。按照我的观点，商业软
件只不过是IT供应链中要求进行适当控制的一环而已。
当我向安全委员会描述了商业软件控制的概念时，他们进行了激烈
的辩论。他们最终同意在一个“概念可靠"的项目中尝试这个新过
程。我定义了这个项目的评估标准，并许诺把结果提交给委员会。
我认识到软件公司很可能会抵制这个新的需要，并且商业利益承担
人也很难接受软件交付上的额外延迟。因此，我想出了一个办法，
在作出购买决定之前首先与软件开发商进行协商，要求软件开发商
2417
---
## Page 2419
必须提供一些材料，证明对它们的软件开发过程施加了有效的安全
控制。
这个要求反映了Acme准备与其他请求向Acme获取类似信息的顾客所
共享的信息。Acme在软件开发生命周期的需求、设计、开发和测试
阶段都能拿出一点证明进行了安全控制的材料。图11-1显示了Acme
所要求的材料。图中的4个框分别表示常规的瀑布开发模型中的一个
核心阶段，由每个框顶部的一个标签所标识。每个框的底部列出了
我们所使用的漏洞检查工具和服务的类型。
简而言之，Acme列出了一个常规的软件开发过程以及用于质量控制
和安全检查的工具和服务类型，并要求开发商提供类似的信息。
图11-1Acme的安全控制，与显示给顾客的一样
另外，我决定在一家开发了一种二进制格式扫描代码的革新方法的
年轻公司测试我们的一个新服务。在本书中，我称之为Verify。这个
2418
---
## Page 2420
新方法并不需要访问源代码，这对于致力保护自己的知识产权的商
业软件开发商而言就扫清了一个重大障碍。Acme向它的供应商提供
了一种方法，只要使用Verify，就可以代替前面所提到的与4个开发
阶段有关的信息。如果开发商选择使用Verify，Acme就使用它扫描它
们的最新发行软件的二进制格式。软件开发商接收详细的扫描结
果，这样他们就可以根据风险以及风险的优先级进行漏洞的确认和
修补。然后，我可以根据Acme的需求影响它们的优先级。Verify服务
通过一个一致性的框架提供风险评分，这样Acme能够为每个软件产
品或每种软件产品建立某所需的风险评分。因此，被检测到的漏洞
的级别可以与其他软件产品、第三方所并发的应用程序以及Acme内
部所开发的系统进行比较。
我的概念可靠项目包括了三家中等大小的软件公司。其中两家开发
商抵制了提供安全控制证明的请求，极为勉强地同意了使用Verify服
务。第三家公司恰巧被另一家金融服务公司要求使用Verify服务作为
自己的开发商评估过程的组成部分。在Verify所发现的漏洞中，这家
软件开发商的实际评分要比它的竞争对手更低。但是，它还是被这
家金融服务公司选中了，因为它承诺解决这些漏洞并完善软件。这
家软件公司也使用了Verify，并通过一致的方式把这项服务集成到它
的安全控制中，最终提高了它的风险评分以及它的软件的顺应性。
其他几家公司，包括Acme，则要求这家软件公司提供漏洞汇总信
息。我们要求进行安全控制的这三家软件开发商的最终结果从总体
上说是积极的。其中两家公司对漏洞信息提供了良好的响应，并根
据这些结果对它们的修补工作的优先级进行了适当的安排。其中一
评估中实际上所得到的风险评分低于它的竞争对手，但这家开发商
对漏洞风险信息的响应非常积极和有效，因此还是得到了这笔生
意，并且它在后来提高了Acme所要求的风险评分。
Acme并不期望完美的风险评分，它更在意开发商证明自己随着时间
的发展能够改进它们的安全控制的意愿。
第三家开发商得到的漏洞评分相对较低，然后开始质疑这项二进制
扫描技术的准确性。这家公司在金融服务行业组织BITS所提出的公
共软件标准（CommonCriteriaforSoftware）进行了不少投资。这是
一种严格的文档实践，适用于劳动力密集的控制和漏洞，并且其价
值直接绑定到被审查的特定软件版本。Acme同意这家开发商用这个
标准作为安全控制的证明，但同时鼓励对方使用Verify。接下来与开
发商的对话提供了开发商环境内部对安全控制的有效评估，这使得
2419
---
## Page 2421
在Acme环境中采用这家开发商的产品可能导致的安全风险也得到了
更好的理解。
概念可靠项目证明了Acme提前一步为所有未来的业务应用程序的采
购实行安全需求所获得的足够成功。我分析了Acme当前所提供的桌
面应用程序的现有库存，并选择那些我们在延续年度许可之前应该
进行安全评估的产品。开发商管理办公室与每家开发商接触，解释
新的安全需求，并向它们提供满足这些需求的选择。
同样，Acme决定只把新的安全需求应用于外购软件的一部分一—业
务应用程序软件，通过渐进的方法提高软件的安全。这种软件一般
是基于Web的，具有最高的漏洞攻击风险。我们的计划是对安全评
估进行改进，直到我们觉得它是成熟的，然后把类似的需求应用于
Acme所购买的所有软件。
11.4分析：如何使世界上的软件更安全
软件，不管是商业采购的软件还是T机构内部开发的软件，都将渗
透到全球经济的核心基础设施中。今大，完全与软件无关的商业产
品或服务可以说是少之义少。我们所乘坐的飞机的设计、生产、操
作和维护流程均依赖于软件功能。我们每天离不开的食品、汽车和
其他商品也都离不开软件。但是，尽管对软件的依赖如此强烈，公
司和消费者对于通过控制安全漏洞创建适合软件的过程的理解还是
极为有限的。
11.4.1最好的软件开发人员创建了具有漏洞的代码
设计满足功能并且具有一致行为的软件始终是个巨大的挑战。大多
数软件开发人员都明白，不管他们的天赋有多高，还是没有办法在
软件的设计和开发过程中保证方无一失。
就安全而言，Acme明白设计和并发漏洞有限且风险很低的软件是非
常困难的。不管怎么说，我们自己已经开发了多年的软件。但是，
通过对软件开发过程的简单回顾，可以清楚地看到，执行代码审查
使软件开发人员能够在软件生命周期内确认和修正软件缺陷是极为
必要的。Acme相信软件代码在开发过程中必须像质量保证测试周期
一样测试安全漏洞，并采用多重控制。这个需求对于商业软件开发
人员、海外应用程序外包服务供应商和内部IT机构均适用。
2420
---
## Page 2422
最优秀的软件开发人员创建了功能最出色的软件，却可能由于代码
中的漏洞而导致受到攻击。软件并发人员在创建功能代码时往往非
常在行，但是恶意黑客在破坏应用程序时所采用的技巧是独特的，
很难教给软件开发人员。
幸运的是，工具和服务的改进使我们可以在软件开发生命周期的早
期检测到漏洞，并在修补成本急剧上升之前就对它们进行修补。
Acme所选择的分析工具提供了上下文敏感的帮助，它们除了确认需