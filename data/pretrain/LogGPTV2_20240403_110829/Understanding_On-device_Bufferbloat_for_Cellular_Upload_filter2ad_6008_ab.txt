### Traffic Volume
Figure 1 illustrates the distributions of download, upload, and overall traffic volume for user sessions. We only consider TCP/UDP payload sizes when calculating session sizes. In today's mobile traffic, downloads dominate, with an average size approximately one order of magnitude larger than uploads. Approximately 2.2% of user sessions involve more than 1MB of downlink data, while only 0.4% of sessions upload more than 1MB of data. Notably, video content accounts for about half of the total download traffic.

### Large Uploads and Downloads
**Figure 2: Flow Duration Distributions**
- **(a) Large Upload**
- **(b) Large Download**

**Figure 3: Flow Rate Distributions**
- **(a) UL vs. DL**
- **(b) Large Upload**

Despite the dominance of download traffic, the proportion of upload bytes is significant. Among the top 20% of user sessions (by total transferred bytes), the 25th, 50th, and 75th percentiles of upload traffic fractions are 9%, 20%, and 42%, respectively. Across all user sessions, these fractions are even higher, at 19%, 50%, and 57%. One user session even recorded an 11-minute upload with 226 MB of data. The increasing popularity of user-generated content suggests that the fraction of upload traffic will continue to grow. Wearable and IoT devices, with their extensive sensing capabilities, are likely to contribute even more to upload traffic compared to smartphones.

### Flow Duration
We use inter-packet arrival times to segment TCP flows, with a threshold of 1 second to eliminate idle periods. These segments are then classified into upload bursts (with only uplink TCP payload) and download bursts (with only downlink TCP payload). For each TCP flow, we define the upload duration as the total duration of all uplink bursts and the download duration as the total duration of all downlink bursts.

**Figure 2(a)** shows the upload durations for flows with large upload volumes (100KB to 1MB, 1MB to 10MB, and at least 10MB). As expected, larger flows tend to have longer durations. **Figure 2(b)** displays the download durations for flows with large download volumes, which exhibit similar qualitative distributions but are statistically shorter due to the higher downlink bandwidth.

### Flow Rate
We calculate the upload and download rates by dividing the total bytes of all upload or download bursts by their respective durations. Flows with durations shorter than 3 seconds are excluded as their rates are not meaningful. **Figure 3(a)** compares upload and download rates, showing that download is generally faster, primarily due to the higher channel rates in LTE networks. **Figure 3(b)** indicates that larger upload flows (greater than 1MB) tend to have higher rates. For flows uploading 1 to 10 MB, the 25th, 50th, and 75th percentiles of upload rates are 1.4Mbps, 2.4Mbps, and 3.8Mbps, respectively. For 10MB+ flows, the maximum achieved throughput is 12.8Mbps, supporting rich user-generated content.

### Flow Concurrency
We investigate the concurrency of TCP flows per user. **Figure 5** shows that for 28.2% of the time, there are at least two concurrent TCP connections performing either upload or download. This highlights the common occurrence of concurrent TCP transfers on mobile devices, motivating further study of the interactions between uplink and downlink traffic.

### RTT Dynamics
We analyze the Round-Trip Time (RTT) dynamics of cellular upload traffic. The RTT is measured using the timestamp difference between uplink TCP data packets and their corresponding ACK packets. Each user session is divided into one-second slots, and slots without uplink traffic or with significant download traffic (threshold: 5KB) are discarded to isolate the impact of concurrent downloads. For each slot, we compute the RTT increase \( I(s) \) as the mean difference between the measured RTT and the minimum RTT of the flow.

**Figure 4: Delay Distributions**
- **(a) RTT Increase of Upload**
- **(b) On-device Delay of Download**

### Summary
Overall, while download traffic remains dominant, upload traffic can still be substantial. The median upload speed for 10MB+ flows is 2.2Mbps, with a maximum of 12.8Mbps in LTE networks, enabling rich user-generated content. Large uploads tend to have higher RTTs, and upload traffic can also increase the RTT experienced by concurrent downloads. Multiple TCP flows often transfer data concurrently on mobile devices, leading to complex interactions that need further investigation.

### On-Device Queuing Delay of Upload Traffic
We conduct a thorough analysis of the latency characteristics for cellular upload traffic, finding that a significant fraction of the latency occurs on the end-host device rather than in the network. Specifically, large Qdisc and firmware buffers play major roles in causing excessive on-device delay, as detailed in the following sections.

#### Overall Delay Characterization
When a mobile device uploads data, packets traverse various buffers in the protocol stack, including TCP buffers, link-layer buffers (Linux queuing discipline), and radio firmware buffers. Each buffer can introduce queuing delays, leading to different RTT values depending on the measurement layer. We focus on three RTT measurements:

- **RTTB**: Network delay only.
- **RTTF**: Includes RTTB and firmware buffer delay.
- **RTTQ**: Includes RTTF and Qdisc buffer delay.

**Figure 7: Overall Latency Characterization for a Single TCP Upload Flow Under Two Network Conditions**
- **(a) Uplink BW 2Mbps**
- **(b) Uplink BW 8Mbps**

At the beginning of a TCP upload, RTTF increases steadily and quickly exceeds RTTB. For example, with an uplink bandwidth of 2Mbps (8Mbps), after 2MB (4MB) of data, RTTF reaches around 1.3s (330ms), while RTTB remains stable at around 50ms. RTTQ then exceeds RTTF and becomes twice as large after another 2MB of data. The absolute difference between RTTQ and RTTF can be as high as 3s and 680ms, respectively.

#### Root Cause of On-Device Queuing
We explore the root cause of excessive on-device queuing delay. **Figure 8** provides an overview of how outgoing TCP packets traverse the Linux kernel and radio chipset. An application invokes the `send()` system call, and the data is placed into the TCP buffer. In Linux, a packet is stored in the Qdisc buffer before being sent to the radio firmware.

**Figure 9: On-Device Queuing Delay on Diverse Devices and Cellular Carriers**

There is a strong correlation (around 0.86) between the queuing delay and the amount of traffic in the Qdisc. In LTE uplink, data is processed and queued in the RLC buffer, which is located in the cellular chipset firmware. The eNodeB uses Buffer Status Reports (BSR) to manage uplink scheduling, assigning resources based on BSR levels.

### Conclusion
Our analysis reveals that while download traffic dominates, upload traffic can be significant, with high upload speeds supporting rich user-generated content. Large uploads tend to have higher RTTs, and upload traffic can increase the RTT of concurrent downloads. The on-device queuing delay, particularly in Qdisc and firmware buffers, is a significant factor in overall latency. Further investigation into the interactions between uplink and downlink traffic and on-device buffer management is warranted.