589 
机数，就要对上述结果进行除法运算： 
public class HalfRandom 
{ 
        public static double f() 
        { 
                return Math.random()/2; 
        } 
}  
指令清单 54.8  常量池 
... 
   #2 = Methodref         
#18.#19    
// java/lang/Math.random:()D 
   #3 = Double             
2.0d 
... 
  #12 = Utf8  
()D 
... 
  #18 = Class   
#22   
// java/lang/Math 
  #19 = NameAndType   
#23:#12  
// random:()D 
  #22 = Utf8  
java/lang/Math 
  #23 = Utf8  
random 
  public static double f(); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=4, locals=0, args_size=0 
         0: invokestatic  #2   
// Method java/lang/Math.random:()D 
         3: ldc2_w  
#3   
// double 2.0d 
         6: ddiv 
         7: dreturn 
指令 invokestatic 调用函数 Math.random()，并将结果保存在栈顶 TOS。这个值随后被除以 2，最终成
为函数返回值。但是这些函数的名称是如何编码的？编译器使用了 Methodref 的表达方法把外部函数的信
息编排在常量池中。常量池里的相应数据声明了与被调用函数有关的类（Class）以及方法（NameAndType）
名称。Methodref 表达式的第一个字段（Fieldref 里的第一个值）是 Class 的索引号-＃18，这个索引号（实
际上是指针）对应着一个 Class 名称（依次查询#18、#22 号常量，可得到 java/lang/Math）。Methodref 表
达式的第二个字段（Fieldref 里的第二个值）是方法名称的索引号＃19，这个索引号对应着方法名称
NameAndType（依次查询#19、#23 号常量，可得到方法名称 random）。方法名称由 2 个索引号组成，
第一个索引号对应着外部函数名称，而第二个索引号对应着函数返回值的数据类型“()D”——双精度
浮点数。 
综合上述信息可知： 
① JVM 能检查数据类型的正确性。 
② JAVA 的反编译器能从已经编译好的类文件中恢复出其原来的数据类型。 
最后，我们来看一个经典的字符串显示例子：Hello, world! 
public class HelloWorld 
{ 
        public static void main(String[] args) 
        { 
                System.out.println("Hello, World"); 
        } 
}  
指令清单 54.9  常量池 
... 
   #2 = Fieldref  
#16.#17  
// java/lang/System.out:Ljava/io/PrintStream; 
   #3 = String   
#18   
// Hello, World 
   #4 = Methodref  
#19.#20  
// java/io/PrintStream.println:(Ljava/lang/String;)V 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
590 
逆向工程权威指南（下册） 
... 
  #16 = Class   
#23   
// java/lang/System 
  #17 = NameAndType   
#24:#25  
// out:Ljava/io/PrintStream; 
  #18 = Utf8  
Hello, World 
  #19 = Class   
#26   
// java/io/PrintStream 
  #20 = NameAndType   
#27:#28  
// println:(Ljava/lang/String;)V 
... 
  #23 = Utf8  
java/lang/System 
  #24 = Utf8  
out 
  #25 = Utf8  
Ljava/io/PrintStream; 
  #26 = Utf8  
java/io/PrintStream 
  #27 = Utf8  
println 
  #28 = Utf8  
(Ljava/lang/String;)V 
... 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
         0: getstatic  
#2   
   // Field java/lang/System.out:Ljava/io/PrintStream; 
         3: ldc   
#3   
   // String Hello, World 
         5: invokevirtual #4   
   // Method java/io/PrintStream.println:(Ljava/lang/String;)V 
         8: return 
偏移量为 3 的ldc指令从常量池中提取字符串Hello,World的指针，然后将其压入栈中。在Java中，这种
二级指针称为reference（引用），但是它的本质仍然还是指针或者地址
①
54.6  调用函数 beep()（蜂鸣器） 
。 
熟悉的指令 invokevirtual 从常量池中提取 println 函数的信息，然后调用该函数。我们已经知道，标准
库定义了许多版本的 println()函数，每个版本都处理的数据类型都各不相同。本例调用的 println()函数，肯
定是专门处理 string 型数据的那个版本。 
第一条指令 getstatic 的功能是什么呢？这个指令从对象 System.out 中提取引用指针的有关字段，
再把它压入栈。这个引用指针的作用与 println 方法的 this 指针相似。因此，从内部来讲，println 函
数的输入参数实际上是两个指针：①this 指针，也就是指向对象的指针；②字符串“Hello,World”的
地址。 
因此这并不矛盾：只有在 System.out 初始化为实例的时候，才能调用 println()方法。 
为了方便分析人员阅读， javap 把有关信息全部追加到了字节码的注释里了。 
这是一个最简单的调用（调用了无参数的两个函数），其功能就是发出蜂鸣声 beep： 
    public static void main(String[] args) 
    { 
            java.awt.Toolkit.getDefaultToolkit().beep(); 
    }; 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: invokestatic   #2  
// Method java/awt/Toolkit.getDefaultToolkit:()  
     Ljava/awt/Toolkit; 
         3: invokevirtual  #3  
// Method java/awt/Toolkit.beep:()V 
         6: return 
第一条指令是偏移量为 0 的 invokestatic 指令，它调用了 java.awt.Toolkit.getDefaultToolkit()函数。后者
的返回值是 Toolkit Class 类实例的引用指针。偏移量为 3 的 invokevirtual 指令调用这个类的 beep()函数。 
① 关于常规指针和引用指针的详细区别可以查阅本书的 51.3 节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
591 
54.7  线性同余随机数产生器（PRNG） 
我们再来看看 PRNG（Pseudo Random Numbers Generator）随机数产生器，其实我们已经在本书的第
20 章介绍过它的 C 语言代码了。 
public class LCG 
{ 
        public static int rand_state; 
        public void my_srand (int init) 
        { 
                rand_state=init; 
        } 
        public static int RNG_a=1664525; 
        public static int RNG_c=1013904223; 
        public int my_rand () 
        { 
                rand_state=rand_state*RNG_a; 
                rand_state=rand_state+RNG_c; 
                return rand_state & 0x7fff; 
        } 
} 
程序在启动之初就初始化了数个成员变量（Class Fields）。这是如何进行的呢？这就得借助 javap 查看
该类的构造函数： 
  static {}; 
    flags: ACC_STATIC 
    Code: 
      stack=1, locals=0, args_size=0 
         0: ldc   
#5   
// int 1664525 
         2: putstatic  
#3   
// Field RNG_a:I 
         5: ldc   
#6   
// int 1013904223 
         7: putstatic  
#4   
// Field RNG_c:I 
        10: return 
上述指令展示了变量的初始化过程。变量 RNG_a 和 RNG_c 分别占据参数槽的第三和第四存储单元。
而 putstatic 函数将有关常数存放在相应地址。 
函数 my_rand()将输入值保存在变量 rand_state 中： 
  public void my_srand(int); 
    flags: ACC_PUBLIC 
    Code: 
      stack=1, locals=2, args_size=2 
         0: iload_1 
         1: putstatic      #2  
// Field rand_state:I 
         4: return 
iload_1 指令提取输入变量，然后将其压入栈中。但是为什么此处是 iload_1 指令而不是读取第 0 个参
数的 iload_0 指令？这是由于该函数调用了类的成员变量，因此要用第 0 个参数传递 this 指针。依此类推，
函数的第二个参数槽用于传递成员变量、同时是隐性参数 rand_state，此后的 putstatic 指令把栈顶的数值肤
之道第二个参数槽、完成指定任务。 
现在我们来看看 my_rand()函数： 
  public int my_rand(); 
    flags: ACC_PUBLIC 
    Code: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
592 
逆向工程权威指南（下册） 
      stack=2, locals=1, args_size=1 
         0: getstatic  
#2   
// Field rand_state:I 
         3: getstatic  
#3   
// Field RNG_a:I 
         6: imul 
         7: putstatic  
#2   
// Field rand_state:I 
        10: getstatic  
#2   
// Field rand_state:I 
        13: getstatic  
#4   
// Field RNG_c:I 
        16: iadd 
        17: putstatic  
#2   
// Field rand_state:I 
        20: getstatic  
#2   
// Field rand_state:I 
        23: sipush  
32767 
        26: iand 
        27: ireturn 
这段代码分别提取类实例的各成员变量、进行各种运算，再使用 putstatic 指令更新 rand_state 的值。在
偏移量为 20 处，rand_state 的值会重新调入（此前的 putstatic 指令把它从栈里抛了出去）。虽然表面看来这
个程序的效率很低，但是 JVM 肯定能够进行充分的优化、足以弥补字节码的效率缺陷。 
54.8  条件转移 
我们来看一个简单的例子： 
public class abs 
{ 
        public static int abs(int a) 
        { 
                if (ab) 
                        return b; 
                return a; 
        } 
这个函数的字节码如下所示： 
  public static int min(int, int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
593 
      stack=2, locals=2, args_size=2 
         0: iload_0 
         1: iload_1 
         2: if_icmple  
7 
         5: iload_1 
         6: ireturn 
         7: iload_0 
         8: ireturn 
if_icmple 指令从栈中提取（pop）两个数值并将之进行比较。如果第二个操作数小于或等于第一个操
作数，那么它将跳转到偏移量为 7 的指令，否则继续执行下一条指令。 
若对上述程序进行调整，通过较大值函数 max()进行比较： 
        public static int max (int a, int b) 
        { 
                if (a>b) 
                        return a; 
                return b; 
        } 
那么字节码则会变为： 
  public static int max(int, int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=2, args_size=2 
         0: iload_0 
         1: iload_1 
         2: if_icmple  
7 
         5: iload_0 
         6: ireturn 
         7: iload_1 
         8: ireturn 
其实与刚才取较小值的程序基本相同，但是最后两个 iload 指令（在偏移量为 5 和 7 的位置上）位置对
换了一下。 
下面再看一个更复杂一些的例子： 
public class cond 
{ 
        public static void f(int i) 