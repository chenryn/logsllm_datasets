**作者：深信服千里目安全实验室**  
**相关阅读：  
1、[【Rootkit 系列研究】序章：悬顶的达摩克利斯之剑](https://paper.seebug.org/1867/ "【Rootkit
系列研究】序章：悬顶的达摩克利斯之剑")  
2、[【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁](https://paper.seebug.org/1868/
"【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁")  
3、[【Rootkit 系列研究】Linux平台的高隐匿、高持久化威胁](https://paper.seebug.org/1870/
"【Rootkit系列研究】Linux平台的高隐匿、高持久化威胁")  
4、[【Rootkit 系列研究】Rootkit检测技术发展现状](https://paper.seebug.org/1871/
"【Rootkit系列研究】Rootkit检测技术发展现状")  
5、[【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁（二）](https://paper.seebug.org/1872/
"【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁（二）")**
## 序言
APT，全称Advanced Persistent
Threat，又名高级持续性威胁，往往有地区或政治背景，以情报搜集、破坏、或经济利益为目的，攻击环节可能使用各类社工、打点和内网渗透以及0day漏洞利用，作为一种非对称的攻击手段，往往能为攻击组织背后的政治或经济实体带来意想不到的地缘、情报、经济甚至军事利益或战术优势。
APT攻击的检测、溯源与反制，往往代表了一个国家、一个组织最高级的网络安全实战能力。而如何应对APT攻击，减少所在组织或国家的情报损失，并提升网络安全优势，就成为头部网络安全企业必须考虑的问题。
从西方APT组织的攻击历史及已经泄露的网络武器看，高隐藏、高持久化(Low&Slow)是其关键特征，而 Rootkit 则是达成此目的的重要技术之一。
Rootkit 系列文章将围绕 Rootkit 的技术栈和运用场景，从攻防两个视角对其危害性和检测思路展开分析。
《序章：悬顶的达摩克利斯之剑》将着重介绍 Rootkit 技术发展历程、Rootkit背后的影子以及 Rootkit 检测基本思想，开启 Rootkit
系列篇章。
## 1.平静中暗藏危机
Rootkit 不是最常见的恶意软件类型。
根据 Bitdefender White Paper Rootkit CREAT3432[1]报告所述，Rootkit 占检测到的 **恶意软件总数不到
1%** 。
由于 Rootkit 开发的复杂性，Rootkit 并不经常使用。尽管操作系统中引入了针对 Rootkit 保护机制，但 Rootkit 仍然可以
**长期隐藏设备上，进行恶意活动** 。
因此 Rootkit 被业内公认是 **最难检测的隐藏手段** 。
**Rootkit 常常用于高质量的APT攻击** 。APT攻击具有较强的持续性特点，这需要建立在不被发现的基础之上，APT组织可以通过 Rootkit
在目标网络中潜伏几个月甚至几年之久， **长期监控并窃取庞大的情报数据** 。
**Rootkit 如同高悬在我们头顶的达摩克利斯之剑** ，平静祥和的背后，却是 **无尽的危险与杀机** 。
## 2.何为Rootkit
Rootkit 是一种特殊的程序(或一组程序)，通常与木马、后门等其他恶意程序结合使用。
Rootkit 主要任务是隐藏并长期驻留在感染机器上的从事各类恶意活动，达到 **高隐藏高持久化** 目的。
Rootkit 一般具有多种功能，例如：
**获得远程访问**
Rootkit 提供对操作系统的远程访问权限并具备检测规避能力。
**窃取数据**
大多数情况下，攻击者使用 Rootkit
窃取数据。黑客以个人或公司为目标，获取敏感个人信息数据，以进行相关黑产活动。APT组织针对特定目标，以从事间谍活动或金融犯罪活动。
**各类隐藏功能**
Rootkit 实现隐藏文件、进程、端口、网络连接、驱动、内核模块等功能，将自身和其他类型的恶意软件隐藏在设备中，使删除它们变得更加困难。
**创建“永久“的 root 权限后门**
一些 Rootkit 可以在设备中创建一个 root 权限的后门，攻击者可以通过发送精心构造的数据包来触发后门连接并控制设备。
**隐私监控**
使用 Rootkit，攻击者可以拦截网络流量、监控键盘击键、控制用户操作。
**劫持或关闭安全程序**
某些 Rootkit 可以将自己隐藏在设备的安全检测程序中，或者将其完全关闭 ，从而难以检测和删除恶意软件。
**根据 Rootkit 运行时权限级别划分分为：**
**（1）内核态Rootkit**
内核态 Rootkit 具有与操作系统相同的权限，在内核级别运行，通常作为设备驱动程序或可加载模块加载到目标设备中。
内核态 Rootkit 很难开发，因为源代码中的任何错误都会影响目标系统的稳定性，这将是发现恶意程序的最直接表现。
**（2）用户态 Rootkit**
用户态 Rootkit 以与大多数应用程序具有相同的运行权限。它们可以拦截系统调用并替换 API 或劫持应用程序返回的值，以获得对设备的控制。
用户态 Rootkit 所需的前置知识和复杂度，与内核态Rootkit相比更简单，更容易开发，因此常用于大范围攻击。
## 3.Rootkit 发展历久弥新
90年代初期，Rootkit 用于攻击 Unix 系统以获得最大权限并以 root 用户身份执行命令，因此得名。直到 1999 年，Greg
Hoglund在Phrack上首次发表了专门为Windows 操作系统设计的 NTRootkit[2]。后来，也出现了可用于攻击 macOS、Android
的 Rootkit。
Rootkit 技术 **由来已久** ，发展 **历久弥新** ，呈现从 **简单到复杂** 、 **高层向低层** 的演化趋势。
无论是哪种平台下的 Rootkit ，其技术演化的 **核心思想都是劫持** 。安全研究员围绕着 **劫持对象和劫持方式**
，产生出了非常多的底层Rootkit技术。
不同平台下的 Rootkit ，按照 **劫持对象** 和 **劫持技术** 复杂度的不同，可将 Rootkit 技术大致分为以下几种。
在Windows平台下：
  * 劫持指令执行流程
  * 直接修改内核对象
  * 内存视图伪装
  * 虚拟Rootkit
  * 硬件Rootkit
在 Linux 平台下：
  * 直接替换系统命令二进制程序
  * 修改LD_PRELOAD劫持共享库
  * 重定位目标文件注入
  * 劫持VDSO
  * 虚拟文件系统劫持
  * Kprobe
  * Netfillter Hook
  * 篡改派遣例程劫持系统调用
  * 设置函数蹦床劫持内核函数执行流程
  * 创建新的命名空间
如图 1所示，近二十年 Rootkit 演化发展时间轴(Rootkit开源或热门实例)。
图1 近二十年部分Rootkit出现时间轴
目前，技术是向更加底层的方向发展。然而，根据近十年 **已发现** 的 Rootkit 攻击事件，使用用户态Rootkit
却是一个趋势。例如，2010年以后，ZeroAccess Rootkit[3] 的开发人员已经转向使用用户态Rootkit。
近十年用户态 Rootkit 使用趋势上升可能由于以下几个原因：