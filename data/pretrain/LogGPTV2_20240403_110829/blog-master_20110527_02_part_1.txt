## Use pageinspect EXTENSION view PostgreSQL Page's raw infomation  
### 作者                                                                                     
digoal                                                                             
### 日期                                                                                                                                                 
2011-05-27                                                                           
### 标签                                                                              
PostgreSQL , pageinspect , dump block    
----                                                                                                                                              
## 背景                 
之前介绍过一个pg_filedump的外部命令，是用来查看PostgreSQL数据库存储底层的信息的。  
链接:  
http://blog.163.com/digoal@126/blog/static/163877040201142610215685/  
今天再介绍一个PostgreSQL的EXTENSION，也可以用来查看PostgreSQL数据库存储底层的东西。  
```  
digoal=> \c digoal postgres  
You are now connected to database "digoal" as user "postgres".  
digoal=# create extension pageinspect;  
CREATE EXTENSION  
Time: 4.259 ms  
digoal=# \c digoal digoal  
You are now connected to database "digoal" as user "digoal".  
digoal=> insert into tbl_user_info select generate_series(1,10000),'zhou','digoal','sky-mobi';  
INSERT 0 10000  
Time: 19.679 ms  
digoal=> select max(ctid) from tbl_user_info;  
   max     
---------  
 (73,72)  
(1 row)  
```  
74个PAGE  
注意只有超级用户可以执行,普通用户执行将报权限不足的错误。  
```  
digoal=>             select * from get_raw_page('tbl_user_info',0);  
ERROR:  must be superuser to use raw functions  
```  
获得一个PAGE的bytea内容，可以使用get_raw_page函数。bytea的输出可以是escape或hex模式。  
如  
```  
digoal=> \c digoal postgres  
You are now connected to database "digoal" as user "postgres".  
digoal=# set bytea_output='hex';  
SET  
digoal=# select * from get_raw_page('tbl_user_info',0);  
```  
返回结果类似如下  
此处省略N字  
```  
0000000550700000000000000000000000000000600040002091800060000000b7a686f750f6469676f616c13736b792d6d6f6269000000000000005507000000000  
00000000000000000000500040002091800050000000b7a686f750f6469676f616c13736b792d6d6f626900000000000000550700000000000000000000000000000  
400040002091800040000000b7a686f750f6469676f616c13736b792d6d6f62690000000000000055070000000000000000000000000000030004000209180003000  
0000b7a686f750f6469676f616c13736b792d6d6f626900000000000000550700000000000000000000000000000200040002091800020000000b7a686f750f64696  
76f616c13736b792d6d6f626900000000000000550700000000000000000000000000000100040002091800010000000b7a686f750f6469676f616c13736b792d6d6  
f626900000000000000  
(1 row)  
```  
修改输出格式后  
```  
digoal=# set bytea_output='escape';  
SET  
```  
结果类似如下  
```  
\000\002\011\030\000\011\000\000\000\013zhou\017digoal\023sky-mobi\000\000\000\000\000\000\000U\007\000\000\000\000\000\000\000\000\  
000\000\000\000\000\000\010\000\004\000\002\011\030\000\010\000\000\000\013zhou\017digoal\023sky-mobi\000\000\000\000\000\000\000U\0  
07\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\004\000\002\011\030\000\007\000\000\000\013zhou\017digoal\023sky-  
mobi\000\000\000\000\000\000\000U\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\004\000\002\011\030\000\006\00  
0\000\000\013zhou\017digoal\023sky-mobi\000\000\000\000\000\000\000U\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005  
\000\004\000\002\011\030\000\005\000\000\000\013zhou\017digoal\023sky-mobi\000\000\000\000\000\000\000U\007\000\000\000\000\000\000\  
000\000\000\000\000\000\000\000\004\000\004\000\002\011\030\000\004\000\000\000\013zhou\017digoal\023sky-mobi\000\000\000\000\000\00  
0\000U\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\004\000\002\011\030\000\003\000\000\000\013zhou\017digoal  
\023sky-mobi\000\000\000\000\000\000\000U\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\004\000\002\011\030\00  
0\002\000\000\000\013zhou\017digoal\023sky-mobi\000\000\000\000\000\000\000U\007\000\000\000\000\000\000\000\000\000\000\000\000\000  
\000\001\000\004\000\002\011\030\000\001\000\000\000\013zhou\017digoal\023sky-mobi\000\000\000\000\000\000\000  
```  
这里查询到得是一个MAIN PAGE的RAW内容。  
另外还可以查询fsm , vm page的内容。具体的数据结构描述可以参考源代码。  
另外还有几个函数如  
```  
get_raw_page(relname text, blkno int) returns bytea  
get_raw_page(relname text, fork text, blkno int) returns bytea  
```  
fork取值范围 main , fsm , vm  
查看一个PAGE的头部信息：（数据结构参考源代码）  
```  
digoal=# select * from page_header(get_raw_page('tbl_user_info',0));  
    lsn    | tli | flags | lower | upper | special | pagesize | version | prune_xid   
-----------+-----+-------+-------+-------+---------+----------+---------+-----------  
 0/E85E330 |   1 |     0 |   568 |   576 |    8192 |     8192 |       4 |         0  
(1 row)  
```  
0号page的lower和upper值之间剩余只有576-568=8字节 。一会我们看一下一条items+tuples的长度，已经超过8字节，因此0号PAGE不适合插入新行了。  
tli 表示时间线，这个一般用于RESETXLOG后或触发PROMOTE之后WAL时间线的分辨。用pg_controldata可以看到LIN的信息。  
如下：  
```  
postgres@db5-> pg_controldata   