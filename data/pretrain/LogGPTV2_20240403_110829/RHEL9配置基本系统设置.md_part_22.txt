    ``` screen
    $ echo 'umask octal_value' >> /home/username/.bashrc
    ```
    使用数值替换 [*octal_value*]{.emphasis}，并使用用户名替换
    [*username*]{.emphasis}。如需了解更多详细信息，请参阅 [User
    file-creation mode
    mask](#assembly_managing-file-permissions_configuring-basic-system-settings.html#user-file-creation-mode-mask_assembly_managing-file-permissions "用户 file-creation mode mask"){.link}。
:::
:::
::: section
::: titlepage
# []{#assembly_managing-the-umask_configuring-basic-system-settings.html#setting-default-home-directory-permissions_assembly_managing-the-umask}为新创建的主目录设置默认 UMASK {.title}
:::
您可以通过修改 `/etc/login.defs`{.literal}
文件来更改为新创建的用户主目录指定 [*UMASK*]{.emphasis} 的权限。
::: orderedlist
**流程**
1.  以 `root`{.literal} 用户身份，在您选择的编辑器中打开
    `/etc/login.defs`{.literal} 文件。
2.  修改以下部分以设置新的默认 [*UMASK*]{.emphasis}：
    ``` screen
    # The permission mask is initialized to this value. If not specified,
    # the permission mask will be initialized to 022.
    UMASK 077
    ```
    将默认数值（`077`{.literal}）替换为另一个数值。如需了解更多详细信息，请参阅
    [User file-creation mode
    mask](#assembly_managing-file-permissions_configuring-basic-system-settings.html#user-file-creation-mode-mask_assembly_managing-file-permissions "用户 file-creation mode mask"){.link}。
3.  保存更改并退出编辑器。
:::
:::
:::
[]{#assembly_managing-access-control-list_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#assembly_managing-access-control-list_configuring-basic-system-settings.html#assembly_managing-access-control-list_configuring-basic-system-settings}第 26 章 管理访问控制列表 {.title}
:::
每个文件和目录一次只能有一个用户所有者和一个组所有者。如果要授予用户权限来访问属于不同用户或组的特定文件或目录，同时保留其他文件和目录，您可以利用
Linux 访问控制列表(ACL)。
::: section
::: titlepage
# []{#assembly_managing-access-control-list_configuring-basic-system-settings.html#displaying-the-current-acl_assembly_managing-access-control-list}显示当前访问控制列表 {.title}
:::
您可以使用 `getfacl`{.literal} 实用程序显示当前的 ACL。
::: itemizedlist
**流程**
-   要显示特定文件或目录的当前 ACL，请使用：
    ``` screen
    $ getfacl file-name
    ```
    用文件或目录的名称替换 [*file-name*]{.emphasis}。
:::
:::
::: section
::: titlepage
# []{#assembly_managing-access-control-list_configuring-basic-system-settings.html#setting-the-acl_assembly_managing-access-control-list}设置访问控制列表 {.title}
:::
您可以使用 `setfacl`{.literal} 实用程序为文件或目录设置 ACL。
::: itemizedlist
**先决条件**
-   `root`{.literal} 访问权限。
:::
::: itemizedlist
**流程**
-   要为文件或目录设置 ACL，请使用：
:::
``` screen
# setfacl -m u:username:symbolic_value file-name
```
使用用户名替换 [*username*]{.emphasis}，使用符号值替换
[*symbolic_value*]{.emphasis}，使用文件或目录的名称替换
[*file-name*]{.emphasis}。详情请查看 `setfacl`{.literal} man page。
::: example
[]{#assembly_managing-access-control-list_configuring-basic-system-settings.html#idm140217696278560}
**例 26.1. 修改组项目的权限**
::: example-contents
以下示例描述了如何修改属于 `root`{.literal} 组的 `root`{.literal}
用户拥有的 `group-project`{.literal} 文件的权限， 以便使该文件：
::: itemizedlist
-   不能被任何人执行。
-   用户 `andrew`{.literal} 有 `rw-`{.literal} 权限。
-   用户 `susan`{.literal} 有 `---`{.literal} 权限。
-   其他用户具有 `r--`{.literal} 权限。
:::
::: title
**流程**
:::
``` screen
# setfacl -m u:andrew:rw- group-project
# setfacl -m u:susan:--- group-project
```
::: itemizedlist
**验证步骤**
-   要验证用户 `andrew`{.literal} 有 `rw-`{.literal} 权限，用户
    `susan`{.literal} 有 `---`{.literal} 权限，其他用户有
    `r--`{.literal} 权限，使用：
    ``` screen
    $ getfacl group-project
    ```
    输出会返回：
    ``` screen
    # file: group-project
    # owner: root
    # group: root
    user:andrew:rw-
    user:susan:---
    group::r--
    mask::rw-
    other::r--
    ```
:::
:::
:::
:::
:::
[]{#using-chrony-to-configure-ntp_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#using-chrony-to-configure-ntp_configuring-basic-system-settings.html#using-chrony-to-configure-ntp_configuring-basic-system-settings}第 27 章 使用 Chrony 套件配置 NTP {.title}
:::
因为许多原因，系统准确计时非常重要。例如在网络中，需要准确的数据包和日志的时间戳。在
Linux 系统中，`NTP`{.literal} 协议是由在用户空间运行的守护进程实现的。
用户空间守护进程更新内核中运行的系统时钟。系统时钟可以通过使用不同的时钟源来维护系统的时间。通常,
使用 [*时间戳计数器*]{.emphasis}（[**TSC**]{.strong}）。TSC 是一个 CPU
寄存器，它计算从上次重置的循环数。它非常快，分辨率很高，且不会被中断。
从 Red Hat Enterprise Linux 8 开始，`NTP`{.literal} 协议由
`chronyd`{.literal} 守护进程实现，它可从 `chrony`{.literal}
软件包的软件仓库中获得。
以下小节介绍了如何使用 [**[chrony]{.application}**]{.strong} 套件配置
NTP。
::: section
::: titlepage
# []{#using-chrony-to-configure-ntp_configuring-basic-system-settings.html#chrony-intro_using-chrony-to-configure-ntp}chrony 套件介绍 {.title}
:::
[**[chrony]{.application}**]{.strong} 是
`Network Time Protocol (NTP)`{.literal} 的实现。您可以使用
[**[chrony]{.application}**]{.strong}:
::: itemizedlist
-   将系统时钟与 `NTP`{.literal} 服务器同步
-   将系统时钟与参考时钟同步，如 GPS 接收器
-   将系统时钟与手动时间输入同步
-   作为 `NTPv4(RFC 5905)`{.literal} 服务器或 peer
    为网络中的其他计算机提供时间服务
:::
在多数条件下，[**[chrony]{.application}**]{.strong}
都会表现良好，包括时断时续的网络连接、有大量网络数据的网络、温度不稳定（普通计算机时钟对温度敏感）以及不持续运行或在虚拟机上运行的系统。
通过互联网镜像同步的两天机器之间的准确性通常在几毫秒之内，而对于 LAN
中的机器则为几十微秒。硬件时间戳或硬件参考时钟可能会提高两个与子微秒级同步的计算机之间的准确性。
[**[chrony]{.application}**]{.strong} 包括
`chronyd`{.literal}（一个在用户空间运行的守护进程）和
[**[chronyc]{.application}**]{.strong}（可用来监控 `chronyd`{.literal}
性能并在运行时更改各种操作参数的命令行程序）。
[**[chrony]{.application}**]{.strong} 守护进程（`chronyd`{.literal}）
可以由命令行工具 [**[chronyc]{.application}**]{.strong}
监控和控制。这个工具提供了一个命令提示，允许输入大量命令来查询
`chronyd`{.literal}
的当前状态并修改其配置。在默认情况下，`chronyd`{.literal} 只接受来自本地
[**[chronyc]{.application}**]{.strong}
实例的命令，但它也可以被配置为接受来自远程主机的监控命令。应该限制远程访问。
:::
::: section
::: titlepage
# []{#using-chrony-to-configure-ntp_configuring-basic-system-settings.html#proc_using-chronyc-to-control-chronyd_using-chrony-to-configure-ntp}使用 chronyc 来控制 chronyd {.title}
:::
这部分论述了如何使用 [**[chronyc]{.application}**]{.strong}
命令行工具控制 `chronyd`{.literal}。
::: orderedlist
**流程**
1.  要在互动模式中使用命令行工具 [**[chronyc]{.application}**]{.strong}
    来更改本地 `chronyd`{.literal}
    实例，以`根`{.literal}用户身份输入以下命令：
    ``` literallayout
    # chronyc
    ```
    如果要使用某些受限命令，[**[chronyc]{.application}**]{.strong}
    需要以 `root`{.literal} 运行。
    [**[chronyc]{.application}**]{.strong} 命令提示符如下所示：
    ``` literallayout
    chronyc>
    ```
2.  要列出所有命令，请键入 `help`{.literal}。
3.  另外，如果与以下命令一同调用，工具也可以在非互动命令模式中调用：
    ``` literallayout
    chronyc command
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
使用 [**[chronyc]{.application}**]{.strong}
所做的更改不具有持久性，它们会在 `chronyd`{.literal}
重启后丢失。要使更改有持久性，修改 `/etc/chrony.conf`{.literal}。
:::
:::
:::
[]{#using-chrony_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#using-chrony_configuring-basic-system-settings.html#using-chrony_configuring-basic-system-settings}第 28 章 使用 Chrony {.title}
:::
以下小节介绍了如何安装、启动和停止 `chronyd`{.literal}，以及如何检查
`chrony`{.literal} 是否同步。部分还介绍如何手动调整系统时钟。
::: section
::: titlepage
# []{#using-chrony_configuring-basic-system-settings.html#managing-chrony_using-chrony}管理 chrony {.title}
:::
以下流程描述了如何安装、启动、停止和检查 `chronyd`{.literal} 的状态。
::: orderedlist
**流程**
1.  [**[chrony]{.application}**]{.strong} 在 Red Hat Enterprise Linux
    被默认安装。以 `root`{.literal} 用户运行以下命令进行验证：
    ``` literallayout
    # dnf install chrony
    ```
    [**[chrony]{.application}**]{.strong} 守护进程的默认位置为
    `/usr/sbin/chronyd`{.literal}。命令行工具将安装到
    `/usr/bin/chronyc`{.literal}。
2.  运行以下命令检查 `chronyd`{.literal} 的状态：
    ``` literallayout
    $ systemctl status chronyd
    chronyd.service - NTP client/server
       Loaded: loaded (/usr/lib/systemd/system/chronyd.service; enabled)
       Active: active (running) since Wed 2013-06-12 22:23:16 CEST; 11h ago
    ```
3.  要启动 `chronyd`{.literal}，使用 `root`{.literal}
    用户身份运行以下命令：
    ``` literallayout
    # systemctl start chronyd
    ```
    要确保 `chronyd`{.literal} 在系统启动时自动启动，以 `root`{.literal}
    身份运行以下命令：
    ``` literallayout
    # systemctl enable chronyd
    ```
4.  要停止 `chronyd`{.literal}，以 `root`{.literal} 身份运行以下命令：
    ``` literallayout
    # systemctl stop chronyd
    ```
    要防止 `chronyd`{.literal} 在系统启动时自动启动，以 `root`{.literal}
    身份运行以下命令：
    ``` literallayout
    # systemctl disable chronyd
    ```
:::
:::
::: section
::: titlepage
# []{#using-chrony_configuring-basic-system-settings.html#checking-if-chrony-is-synchronized_using-chrony}检查是否同步 chrony {.title}
:::