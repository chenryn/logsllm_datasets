深度探索动态语言核心技术
#10
#10
#10
---
## Page 126
Python源码剖析
5.4
代码清单5-8
这个缓冲池才开始接纳被缓冲的PyDictObject对象（见代码清单5-8）。
机制是一样的。开始时，这个缓冲池里什么都没有，直到第一个PyDictobject被销毁时，
我们来看看PyDictObject对象的缓冲池：
[dictobject.c]
static int num_free_dictsa O;
statie PyDictobject
#deEine MAXFREEDICPS 80
[dictobject.c]
tatic void dict_dealloc(register dictobjeet*mp)
PyDictObject对象缓冲池
实际上，PyDictObject中使用的这个缓冲池机制与PyListObject中使用的缓冲池
前面我们提到，在PyDictobject的实现机制中，同样使用了缓冲池的技术。现在，
第5章Python中的Dict对象
17131：将被销毁的ByDictObject对象放入缓冲池
Py_ssize
最后插入元素对（14，14），结果如图5-9所示：
else
/7/121：释放从系统堆中申请的内存空间
for
mp->ob_type->tp_free（（PyobiecE*)mp);
（num_Eree
1
(ep
一深度探索动态语言核心技术
Py_DECREF(ep->me_key))
-11;
ma
#1
*ree_dicts[MAXFREEDICTS]:
table; fil
#2
图5-8插入与删除示例图之四
图5-9
#3#4
插入与删除示例图之五
41042434
10424
#7
14
#8
ep
#9
#10
---
## Page 127
5.5
冲池中取出使用，而不需要再重新创建：
ma_smalltable中的对象引用计数就可以了。
有从系统堆中申请，而是指向pyDietobject固有的ma_smalltabie，那么只需要调整
放这块内存空间，归还给系统堆。而如果被销毁的PyDictObject中的table实际上并没
果PyDictobject对象中ma_table维护的是从系统堆申请的内存空间，那么Python将释
某一特定的pyDictobject对象身上时，才会输出信息。这个PyDictobject对象当然是
由于Pyhon内部大量地使用ryDictobject，所以对insertaict的调用会非常频繁，成
实地观察Python运行时PyDictobject的一举一动了。
然，你也可以选用自已的特征串。如果在PyDictobject中找到了这个对象，则输出信息：
这个特征，在这里，我把它定义为PyDictObject包含“PR”的PyStringObject 对象，当
我们自己创建的对象，必须使它有区别于Python内部使用的PyDictObject对象的特征。
我们立刻就会被淹没在输出信息中。所以我们需要一套机制来确保当tnsertadict发生在
千上万的PyDictObject对象会排着长队来依次使用insertdict。如果只是简单地输出，
PyObject*PyDict_New(void)
[aictobject.c]
static void ShowDictobject(dictobject*dictobject)
Hack PyDictObject
我们首先来观察，在insertaict发生之后，PyDictobject对象中table的变化情况。
在创建新的PyDictobject对象时，如果在缓冲池中有可以使用的对象，则直接从缓
现在我们可以根据对ByDictObject的了解，在Python源代码中添加代码，动态而真
register dictobjeat*mp:
和PyListobject中缓冲池的机制一样，缓冲池中只保留了PyDictobject对象。如
//输出kay
dictentry*
nt
(num_free_dicts)(
Mp
Py
EMPIY_TO_MINSIZE(mP):
三free_dlcts(-
NewRefel
entry
ma
F111
dictobject->ma_Eable;
"num_free_diets];
Python源码剖析
5.5Hack PyDictObject
深度探索动态语言核心技术
97
---
## Page 128
Python源码剖析
8
insertdict(register dictobject
tatic void
*value)
printf("\n"):
printf("
第5章
foni
printE(
fong strHash;
++entry:
printf("vt"):
elae
Pyobject,
++entry:
printf("ve")
一深度探索动态语言核心技术
PyIntobject* intobdect
(key->ob_type)->tp_print(value.
prinE("NULL"）;
BrInEE("NOLL*）
Python中的Dict对象
elsel
dictobject-
key
(key->ob_type)->tp_print (key.
E(PyString_AsStning(key)1o]
elsei
ob_type)->hp_print(key,
>ma-table;
entry->me_value;
entry->me_value;:
++）
intobject->ob_ival)
(key-
strHash);
Pyobject *key,
>ob_type)->tp_name[0]
stdout,0):
stdout.
stdout,0）
long haah,Pyobject
0）日
---
## Page 129
码监控Python在执行时调用dict_dealioc的频度，
图5-10中的后两个结果显示了这个过程。
图5-10中的前两个结果显示了这个过程。
并再次插入17，显然，17应该出现在原来9的位置，
这两个数会产生冲突，9的hash结果为1，而17经过再次探测后，会获得hash结果为7。
下面我们观察Python自身对pyDictobject的使用情况，在dict_dealloc中添加代
对于pyDictObject对象，依次插入9和17，根据ryDictobject选用的hash策略，
然后我们将9删除，
ralue
yalue
>>d[17]=17
nsort
key.
key
dealloc dict:size0
>>print
dealloc
Healloc
dealloc
dealloc
dealloc
dealloc
dealloc
dealloc
dealloc
dealloc
dealloc
deallocdict：
dealloc
dealloc
>>i=1
]
则原来9的位置会出现一个dummy态的标识。接着将17删除，
图5-11Python执行时使用dict的情况
图5-10dict变动时table的变化情况
diet
dict
dict
dict
dict
dict
dict
5
hello world
size1
size0
size
size
size
size
size
size
size
静
size
NULL
静
静
num_free_dicts
num_free_dicts
num_free_dicts
num free_dicts
mum_free_dicts
num_free_dicts
mm_free_dicts
num_free_dicts
num_free_dicts
num_free_dicts
num_free_dicts
Python源码剖析
num_free_dicts
num_free_dicts
NULL
静
图5-11是监测结果：
而原来17的位置则是dummy标识。
NILNL
5.5
静
Hack PyDictObject
is
is
静
静
静
一深度探索动态语言核心技术
0
00
49
123
静
99
---
## Page 130
Python源码剖析
100
有我们自已创建的aict对象的销毁，所以打印出来的num_freeaicts的值变为了10和
的值都是9。后来aela1和dela2时，每次除了Pyhon虚拟机例行的14次销毁外，还
操作14次，最后也同样会剩下9个自由的aict对象，所以每次打印出来，num_free_aiots
其实在执行print语句的时候，同“=1”这样的赋值语句一样，同样会调用dea11oc
的值仍然都是9。直觉上来讲，它们对应的是应该是6和5才对。但是，看一看图5-11，
dicts值。监控结果见图5-12。有一点奇怪的是，在创建了d2和d3之后，num_free_dicts
缓冲池的重要性。
数都很少，所以只需要使用masmalltable就可以了。这里，也提醒我们pyDictobject
销毁如此庞大的aict群。当然，我们可以看到，这些ryDictobject对象中entry的个
过程的PyDictObject对象，所以在执行一个完整的Python源文件时，并不是每一行都会
的，所以最终缓冲池中的自由dict对象总是9个。这14个aict对象中有一些参与编译
会创建并销毁多达14个的PyDictObject对象。不过这14个dict中有一些是重新申请
是让我们惊讶不已，原来对于一个简简单单的赋值，一个简简单单的打印，Py山on内部都
所以我们也监控了缓冲池的使用，在aiot_print中添加代码，打印当前的num_free
我们前面已经说了，Python内部大量使用了PyDictobject对象，然而监测的结果还
第5章Python中的Dict对象
一深度探索动态语言核心技术
图5-12监控dict缓冲池
公灸
num free_dictsis：9
>>
deld2
printd1
del
=
eedicts is:10
d3
一
---
## Page 131
6.1
最简单的Python模拟
的骨架，同时，这也是我们深入Py山on虚拟机和运行时的起点。
此我们的SmallPyhon只能处理非常受限的表达式。虽然很简陋，但从中可以看到Python
就完全有能力实现一个真正的Pyhon了。
任何能力做出如此逼真的模拟。不过当我们跟随本书完成了Pyton源代码的探索之后，
节码的生成和执行等，在SmallPyhon中，我们都不会涉及，因为到目前为止，我们没有
PyDictobject对象来维护变量名到变量值的映射。
是我们在以后的章节中将要剖析的重点。在这里只是展示了其核心的思想一利用
而清晰地展示出Pyhon运行时的脉络。
拟程序，我们只实现了简单的功能，也没有引入对象缓冲池的机制。这一切都是为了简洁
object，与CPython不同的是，我们并没有实现像CPython那样复杂的机制，作为一个模
object对象，仅仅实现了加法运算和输出操作。同时编译的过程也被简化到了极致，因
为Small Python.
出一个最简单的Python。这一章的目的就是模拟出这样一个最简单的Python，我们把它称
Small Python
在SmallPyhon中，实际上还需要实现Python的运行时环境，Python的运行时环境
在SmallPython中，我们首先需要实现之前已经分析过的那些对象，比如PyInt
当然，在CPython中，还有许多其他的主题，比如Pyhon 源代码的编译，Python字
在Small Python中，我们仅仅实现了PyIntObject、PyStringObject及PyDict
在详细考察了Pyhon中最常用的儿个对象之后，我们现在完全可以利用这些对象做
Python源码剖析
-Small Python
一深度探索动态语言核心技术