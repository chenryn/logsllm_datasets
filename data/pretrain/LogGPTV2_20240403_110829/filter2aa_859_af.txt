源组件、第三方组件，组
件基本信息完整，直接依
赖关系正确，包含必要组
件扩展信息完整（如：核
心组件的开源知识产权信
息、关联漏洞信息）。
通过代码片段识别出的开
源组件、第三方组件，组
件基本信息完整，直接依
赖及间接依赖关系清晰，
包含重要的组件扩展信息
完整。
软件成分在不同透明程度下，都会构成一张软件成分信息集合组成的“软件成分清单”，
包括组成软件的所有组件名称、组件的信息、组件之间的关系以及层级关系。每一个软件，
都对应一个组成成分表，通过标准的数据格式存储、记录构成的基础信息，并根据这些存储
的数据唯一地识别出这些软件中的组件，溯源组件的来源与维护状态。
软件成分信息兼容 SBOM 标准，信息示例如下表：
022
软件供应链安全技术框架
表 3.2 软件成分信息
类型
组成项
描述
软件基本信息
软件名称
标识软件的实体名称
软件作者名称
软件责任人或团体名称
软件供应商名称
原始供应商名称
软件版本
供应商用于标识软件修改的版本标识符
软件列表、软件
包括开源许可证版权与开放标准、第三方授权信息等
时间戳
记录软件基本信息生成的日期和时间
软件信息签名（如校验哈希值） 保证软件信息真实性、完整性
唯一标识
用于标识软件或在软件成分清单数据库中查找的唯一标识符
软件间的关系
包含关系
如源代码与编译后二进制的包含关系，发布容器镜像与二进制的包含关
系等
依赖关系
包括代码显示依赖、包依赖、编译依赖、运行时依赖等
其他关系
其他关联关系
软件扩展信息
软件知识产权信息
包括开源许可证版权与开放标准、第三方授权信息等
关联漏洞信息
漏洞信息，如对应 CVE、CNVD、CNNVD 等
备注说明
二、软件供应链组成可评估能力
为应对供应链的威胁，保障自身的 IT 基础设施安全，企业需要构建软件成分清单来梳理
供应链产品，识别和管理关键软件供应商，在供应链的生命周期的各阶段通过安全评估控制
安全风险，削减供应链攻击带来的威胁。
1. 软件开发过程安全可评估
在软件的开发生命周期中，漏洞的引入不止有开发人员编写的源代码，还有所依赖的开
源组件、开发和构建工具等，依照软件的开发和构建过程，企业需要从如下方面建设开发过
程安全评估能力。
● 
开源组件引入安全管控
由于开发成本的优势，在项目中广泛使用开源组件已成为主流的开发方式，包括开发框架、
软件供应链安全技术白皮书
023
功能组件等，在系统开发过程中，应严格控制引入的开源组件风险，将已知漏洞摒除于软件
交付运行之前。
开源组件安全评估能力由软件成分分析（SCA）提供，在代码构建时，通过 SCA 工具对
项目的第三方组件依赖进行漏洞分析，由开发人员及时处理存在漏洞的组件。
● 
源代码漏洞管控
系统开发过程中，不规范的安全编码也会引入漏洞风险，如 SQL 语句拼接所导致的 SQL
注入漏洞。
为降低开发过程中源代码漏洞的产生，提升源代码安全质量，可使用 SAST（Static 
Application Security Testing，通常指静态源代码安全审计工具）在开发 IDE 工具和持续集成
过程中，对源代码进行安全扫描，或者使用 IAST（Interactive Application Security Testing，
通常指交互式安全测试工具）在系统运行时通过污点分析检出源代码漏洞。
2. 软件交付安全可评估
软件交付是开发商将成品完成封装，交付给下游用户，也是下游企业引入供应链产品的
起始点，作为供应商，除保证交付软件安全外，也应将软件成分清单一并交付给下游企业；
供应链下游企业在获得供应商的软件组件成分清单后，也可同步向其下游企业、最终用户提
供自己维护的软件组件成分表，那么最终用户就已经具备了依据安全通报、威胁情报监控等
第三方信息来分析、评估软件供应链安全的基本条件。
024
软件供应链安全技术框架
3. 软件运营安全可评估
供应链软件产品交付运行后，供应商应在产品的生命周期内提供安全保障服务，对产品
漏洞及时修复；最终用户也应根据供应商所提供的 SBOM 将供应链产品纳入企业资产管理，
定期对资产进行安全评估，结合漏洞预警，对受影响的产品进行加固和修复。
在实现技术上，对软件供应链组成的可评估能力与企业内部进行的安全开发治理有很多
相同之处。需要指出的是，软件供应链安全更关注整个软件生命周期中每个迭代或每个构建
涉及的不同组件、依赖关系的变化等特征，也同时关注整个系统的安全性评估状态。
三、可信任软件供应链
软件供应链安全的复杂性之一在于多级上下游安全问题的堆叠，很难依靠企业自身力量
完成整个链条的安全评估与把控，需要从监管层面加强供应链产品安全认证管理，提供企业
SBOM 托管和可信认证服务，与企业共同构建一个可信的软件供应链生态体系。
1. 向软件行业提供开放的、可信任的软件供应链关键数据（如软件成分信息、组件情报
信息）管理机制。
软件产品最终用户的软件供应链安全依赖与上下游企业与这个产品相关的组件信息的集
合，透明程度高的软件成分信息对软件供应链治理至关重要，但是对软件企业来说增加了产
品管理成本和安全风险。需要制定一套可信任的机制，既能鼓励软件企业参与软件供应链治
理的积极性，又要保证软件供应链基础信息的高质量，向最终用户提供可信任的软件供应链
评估核心数据。
2. 软件行业的供应链风险监控与管理方法。
企业需要监控软件产品及依赖的上游组件中是否存在高危组件，下游交付环节中使用软
件公开基础平台（如云计算平台）或网络基础设施是否出现问题，同时要管控开源软件的使用，
建立开源软件资产台账，持续监测和降低所使用开源软件的安全风险。但实际上，企业很难
监控上下游的供应链风险监控与管理情况，需要从监管层面对高危组件、软件公开基础平台、
网络基础设施、高风险开源软件进行监控，通过如黑白灰名单等机制提供给软件企业和软件
用户进行软件供应链风险监控、管理。
3. 向社会提供可信任的厂商软件供应链安全度量标准与认证体系
可信任的软件供应商，应从可信需求分析与设计、可信开发、可信测试、可信交付、生
命周期管理、开源及第三方管理、配置管理等不同维度进行评估。评估符合要求的企业应具
软件供应链安全技术白皮书
025
备良好的软件供应链安全评估与监控、验证能力，管理风险。
企业也需要完善供应链资产管理和安全检查，可借助知识图谱技术理清企业供应链依赖
关系，从而在监测到预警时能够从容应对。
四、软件供应链安全理念与安全评估的关系
软件供应链透明程度、软件供应链安全可评估能力、可信软件供应链的三个理念，与最
终用户能进行软件供应链安全检测与评估紧密相关，按：
1. 能对软件成分的安全性进行基础评估
上下游企业能向最终用户提供微透明程度的软件供应链成分信息查询能力。最终用户通
过第三方威胁情报监控，或主管部门发布的安全通告，能获得受影响组件信息。通过查询、
比对软件成分清单内的名称与版本信息，可以快速比对是否存在已知漏洞等安全问题。考虑
到最终用户需要维护软件的便利性与未来自动化检测的需求，软件成分清单应为机读格式。
2. 能对软件成分的安全性进行完整评估
透明程度高的软件成分清单（半透明程度及以上），能显著提升最终用户进行软件供应
链安全评估的准确性。对企业开展业务来说，知识产权等法律风险评估是必不可少。尤其对
于开展国际业务的用户来说，项目使用的开源项目及第三方组件是否遵循许可证要求，合法
地进行软件修改与重用，都存在着潜在法律风险。建立政府统一管理的情报库实现软件供应
链安全预警平台。
3. 能评估软件产品开发过程安全性
完整的供应链覆盖了从开发设计到交付实施再到用户使用的各个环节，牵扯到最终用户
和各级供应商，每个环节都有可能成为网络攻击的突破口，企业在引入供应链软件产品时需
要充分对其进行安全评估，以降低引入的风险；
依赖安全评估：通过 SCA 工具，结合供应商提供的 SBOM，对其依赖的第三方组件进行
风险评估，防范引入已知的漏洞和开源授权使用风险；
软件漏洞评估：根据供应商所提供的产品安全评估报告，包括但不限于 SAST、SCA、
DAST 和 IAST 等工具的扫描报告，确认交付产品时不存在未修复的中高风险漏洞。  
4. 能评估软件产品依赖开源软件的供应链安全性
企业管控开源安全，既包括直接依赖组件的漏洞，也包括间接依赖组件漏洞。随着软件
026
软件供应链安全技术框架
系统架构愈加复杂，所关联的开源组件之间的依赖关系也愈加复杂，一些多级依赖的组件漏
洞、运行时依赖的攻击面都容易被忽略。
开源软件生态当前已经丰富繁杂，监管层应针对开源软件进行风险监测与监控。安全是
一个长期持续且动态变化的过程，企业侧则需结合 SCA 建立自身开源资产台账进行开源软件
资产安全管理。其曝出漏洞或者发布补丁时，一方面使用评估检查工具对资产进行漏洞影响
排查，另一方面及时对受影响资产进行加固修复。