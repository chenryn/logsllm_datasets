SSTable文件构成（BloomFilter、index、data、static）
SSTable 文件有fileer（判断数据key是否存在，这里使用了BloomFilter提高效率），index（寻
找对应 column 值所在 data 文件位置）文件，data（存储真实数据）文件，static（存储和统计
column和row大小）文件。
16.1.9. 二级索引（对要索引的 value摘要，生成 RowKey）
在Cassandra中，数据都是以Key-value的形式保存的。
13/04/2018 Page 196 of 283
KeysIndex 所创建的二级索引也被保存在一张 ColumnFamily 中。在插入数据时，对需要进行索
引的value进行摘要，生成独一无二的key，将其作为RowKey保存在索引的ColumnFamily中；
同时在 RowKey 上添加一个 Column，将插入数据的 RowKey 作为 name 域的值，value 域则赋
空值，timestamp域则赋为插入数据的时间戳。
如果有相同的 value 被索引了，则会在索引 ColumnFamily 中相同的 RowKey 后再添加新的
Column。如果有新的 value 被索引，则会在索引 ColumnFamily 中添加新的 RowKey 以及对应
新的Column。
当对 value 进行查询时，只需计算该 value 的 RowKey，在索引 ColumnFamily 中的查找该
RowKey，对其Columns进行遍历就能得到该value所有数据的RowKey。
16.1.10. 数据读写
数据写入和更新（数据追加）
Cassandra 的设计思路与这些系统不同，无论是 insert 还是 remove 操作，都是在已有的数据后
面进行追加，而不修改已有的数据。这种设计称为 Log structured 存储，顾名思义就是系统中的
数据是以日志的形式存在的，所以只会将新的数据追加到已有数据的后面。Log structured 存储
系统有两个主要优点：
数据的写和删除效率极高
(cid:120) 传统的存储系统需要更新元信息和数据，因此磁盘的磁头需要反复移动，这是一个比较耗时
的操作，而 Log structured 的系统则是顺序写，可以充分利用文件系统的 cache，所以效率
很高。
错误恢复简单
(cid:120) 由于数据本身就是以日志形式保存，老的数据不会被覆盖，所以在设计 journal 的时候不需
要考虑 undo，简化了错误恢复。
读的复杂度高
(cid:120) 但是，Log structured 的存储系统也引入了一个重要的问题：读的复杂度和性能。理论上
说，读操作需要从后往前扫描数据，以找到某个记录的最新版本。相比传统的存储系统，这
是比较耗时的。
参考：https://blog.csdn.net/fs1360472174/article/details/55005335
数据删除（column 的墓碑）
如果一次删除操作在一个节点上失败了（总共 3 个节点，副本为 3， RF=3).整个删除操作仍然被
认为成功的（因为有两个节点应答成功，使用 CL.QUORUM 一致性）。接下来如果读发生在该节
点上就会变的不明确，因为结果返回是空，还是返回数据，没有办法确定哪一种是正确的。
13/04/2018 Page 197 of 283
Cassandra 总是认为返回数据是对的，那就会发生删除的数据又出现了的事情，这些数据可以叫”
僵尸”，并且他们的表现是不可预见的。
墓碑
删除一个 column 其实只是插入一个关于这个 column 的墓碑（tombstone），并不直接删除原
有的 column。该墓碑被作为对该 CF 的一次修改记录在 Memtable 和 SSTable 中。墓碑的内容
是删除请求被执行的时间，该时间是接受客户端请求的存储节点在执行该请求时的本地时间
（local delete time），称为本地删除时间。需要注意区分本地删除时间和时间戳，每个 CF 修改
记录都有一个时间戳，这个时间戳可以理解为该 column 的修改时间，是由客户端给定的。
垃圾回收compaction
由于被删除的 column 并不会立即被从磁盘中删除，所以系统占用的磁盘空间会越来越大，这就
需要有一种垃圾回收的机制，定期删除被标记了墓碑的 column。垃圾回收是在 compaction 的过
程中完成的。
数据读取（memtable+SStables）
为了满足读 cassandra 读取的数据是 memtable 中的数据和 SStables 中数据的合并结果。读取
SSTables 中的数据就是查找到具体的哪些的 SSTables 以及数据在这些 SSTables 中的偏移量
(SSTables是按主键排序后的数据块)。首先如果row cache enable了话，会检测缓存。缓存命中
直接返回数据，没有则查找Bloom filter，查找可能的SSTable。然后有一层Partition key cache，
找partition key的位置。如果有根据找到的partition去压缩偏移量映射表找具体的数据块。如果
缓存没有，则要经过Partition summary,Partition index去找partition key。然后经过压缩偏移
量映射表找具体的数据块。
1. 检查 memtable
2. 如果enabled了,检查row cache
3. 检查Bloom filter
4. 如果enable了,检查partition key 缓存
5. 如果在partition key缓存中找到了partition key,直接去compression offset 命中，如果没
有，检查 partition summary
6. 根据compression offset map找到数据位置
7. 从磁盘的SSTable中取出数据
13/04/2018 Page 198 of 283
行缓存和键缓存请求流程图
MemTable：如果 memtable 有目标分区数据，这个数据会被读出来并且和从 SSTables 中读出
来的数据进行合并。SSTable的数据访问如下面所示的步骤。
Row Cache（SSTables中频繁被访问的数据）
在 Cassandra2.2+，它们被存储在堆外内存，使用全新的实现避免造成垃圾回收对 JVM 造成压力。
存在在 row cache 的子集数据可以在特定的一段时间内配置一定大小的内存。row cache 使用
LRU(least-recently-userd)进行回收在申请内存。存储在row cache中的数据是SSTables中频繁
被访问的数据。存储到row cache中后，数据就可以被后续的查询访问。row cache不是写更新。
如果写某行了，这行的缓存就会失效，并且不会被继续缓存，直到这行被读到。类似的，如果一
个partition更新了，整个partition的cache都会被移除，但目标的数据在row cache中找不到，
就会去检查Bloom filter。
13/04/2018 Page 199 of 283
Bloom Filter（查找数据可能对应的SSTable）
首先，Cassandra 检查 Bloom filter 去发现哪个 SSTables 中有可能有请求的分区数据。Bloom
filter是存储在堆外内存。每个SSTable都有一个关联的Bloom filter。一个Bloom filter可以建
立一个 SSTable 没有包含的特定的分区数据。同样也可以找到分区数据存在 SSTable 中的可能性。
它可以加速查找partition key的查找过程。然而，因为Bloom filter是一个概率函数，所以可能
会得到错误的结果，并不是所有的 SSTables 都可以被 Bloom filter 识别出是否有数据。如果
Bloom filter不能够查找到SSTable，Cassandra会检查partition key cache。Bloom filter 大小
增长很适宜，每 10 亿数据 1~2GB。在极端情况下，可以一个分区一行。都可以很轻松的将数十
亿的entries存储在单个机器上。Bloom filter是可以调节的，如果你愿意用内存来换取性能。
Partition Key Cache（查找数据可能对应的Partition key）
partition key 缓存如果开启了，将partition index存储在堆外内存。key cache使用一小块可配
置大小的内存。在读的过程中，每个”hit”保存一个检索。如果在key cache中找到了partition
key。就直接到compression offset map中招对应的块。partition key cache热启动后工作的更
好，相比较冷启动，有很大的性能提升。如果一个节点上的内存非常受限制，可能的话，需要限
制保存在key cache中的partition key数目。如果一个在key cache中没有找到partition key。
就会去partition summary中去找。partition key cache 大小是可以配置的，意义就是存储在key
cache中的partition keys数目。
Partition Summary（内存中存储一些partition index的样本）
partition summary 是存储在堆外内存的结构，存储一些 partition index 的样本。如果一个
partition index 包含所有的 partition keys。鉴于一个 partition summary 从每 X 个 keys 中取
样，然后将每X个key map到index 文件中。例如，如果一个partition summary设置了20keys
进行取样。它就会存储 SSTable file 开始的一个 key,20th 个 key，以此类推。尽管并不知道
partition key 的具体位置，partition summary 可以缩短找到 partition 数据位置。当找到了
partition key 值可能的范围后，就会去找 partition index。通过配置取样频率，你可以用内存来
换取性能，当 partition summary 包含的数据越多，使用的内存越多。可以通过表定义的 index
interval 属性来改变样本频率。固定大小的内存可以通过 index_summary_capacity_in_mb 属性
来设置，默认是堆大小的5%。
Partition Index（磁盘中）
partition index 驻扎在磁盘中，索引所有 partition keys 和偏移量的映射。如果 partition
summary 已经查到partition keys的范围，现在的检索就是根据这个范围值来检索目标partition
key。需要进行单次检索和顺序读。根据找到的信息。然后去compression offset map中去找磁
盘中有这个数据的块。如果 partition index 必须要被检索，则需要检索两次磁盘去找到目标数据。
Compression offset map（磁盘中）
compression offset map存储磁盘数据准确位置的指针。存储在堆外内存，可以被partition key
cache或者partition index访问。一旦compression offset map识别出来磁盘中的数据位置，
就会从正确的SStable(s)中取出数据。查询就会收到结果集。
13/04/2018 Page 200 of 283
17. 设计模式
17.1.1. 设计原则
17.1.2. 工厂方法模式
17.1.3. 抽象工厂模式
17.1.4. 单例模式
17.1.5. 建造者模式
17.1.6. 原型模式
17.1.7. 适配器模式
17.1.8. 装饰器模式
17.1.9. 代理模式
17.1.10. 外观模式
17.1.11. 桥接模式
17.1.12. 组合模式
17.1.13. 享元模式
17.1.14. 策略模式
17.1.15. 模板方法模式
17.1.16. 观察者模式
17.1.17. 迭代子模式
17.1.18. 责任链模式
17.1.19. 命令模式
17.1.20. 备忘录模式
13/04/2018 Page 201 of 283
17.1.21. 状态模式
17.1.22. 访问者模式
17.1.23. 中介者模式
17.1.24. 解释器模式
13/04/2018 Page 202 of 283
18. 负载均衡
负载均衡 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带
宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。
18.1.1. 四层负载均衡 vs 七层负载均衡
18.1.1.1. 四层负载均衡（目标地址和端口交换）
主要通过报文中的目标地址和端口，再加上负载均衡设备设置的服务器选择方式，决定最终选择
的内部服务器。
以常见的TCP为例，负载均衡设备在接收到第一个来自客户端的SYN 请求时，即通过上述方式选
择一个最佳的服务器，并对报文中目标IP地址进行修改(改为后端服务器IP），直接转发给该服务
器。TCP的连接建立，即三次握手是客户端和服务器直接建立的，负载均衡设备只是起到一个类
似路由器的转发动作。在某些部署情况下，为保证服务器回包可以正确返回给负载均衡设备，在
转发报文的同时可能还会对报文原来的源地址进行修改。实现四层负载均衡的软件有：
F5：硬件负载均衡器，功能很好，但是成本很高。
lvs：重量级的四层负载软件。
nginx：轻量级的四层负载软件，带缓存功能，正则表达式较灵活。
haproxy：模拟四层转发，较灵活。
18.1.1.2. 七层负载均衡（内容交换）
所谓七层负载均衡，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容，
再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器。
13/04/2018 Page 203 of 283
七层应用负载的好处，是使得整个网络更智能化。例如访问一个网站的用户流量，可以通过七层
的方式，将对图片类的请求转发到特定的图片服务器并可以使用缓存技术；将对文字类的请求可
以转发到特定的文字服务器并可以使用压缩技术。实现七层负载均衡的软件有：
haproxy：天生负载均衡技能，全面支持七层代理，会话保持，标记，路径转移；
nginx：只在http协议和mail协议上功能比较好，性能与haproxy差不多；
apache：功能较差
Mysql proxy：功能尚可。
18.1.2. 负载均衡算法/策略
18.1.2.1. 轮循均衡（Round Robin）
每一次来自网络的请求轮流分配给内部中的服务器，从1至N然后重新开始。此种均衡算法适合
于服务器组中的所有服务器都有相同的软硬件配置并且平均服务请求相对均衡的情况。
18.1.2.2. 权重轮循均衡（Weighted Round Robin）
根据服务器的不同处理能力，给每个服务器分配不同的权值，使其能够接受相应权值数的服务请
求。例如：服务器A的权值被设计成1，B的权值是 3，C的权值是6，则服务器A、B、C将分
别接受到10%、30％、60％的服务请求。此种均衡算法能确保高性能的服务器得到更多的使用
率，避免低性能的服务器负载过重。