4Available at http://cs.wisc.edu/~wrharris/software/
difc
293policy for diagnostic purposes. The fact that Swim could
not instrument the MPM without manual changes should
not be interpreted as a failure on the part of Swim. On
the contrary, the fact that Swim could not instrument the
program indicated that the program had to be restructured
to allow for a correct instrumentation. Moreover, while the
original MPM implementation is approximately 15,000 lines,
Swim produced a minimal failing sub-program of only a few
hundred lines, consisting mostly of statements that spawn
processes and send or receive information between processes.
The sub-policy contained only the Secrecy assertion that
Worker processes must be isolated, and the Prot assertion
that each Worker process must be able to send information
to the Requester. By inspecting this sub-program and sub-
policy, it was signiﬁcantly easier to understand what manual
edits we needed to perform to allow for a correct instrumen-
tation. We manually added the underlined code in Fig. 1
to spawn proxy processes to mediate interprocess communi-
cation. We did not add any code that manipulated Flume
labels explicitly. We then fed Swim the version of the MPM
with proxies and the original policy, and Swim instrumented
it correctly.
FlumeWiki CGI and Untrusted Code Modules.
We applied Swim to FlumeWiki modules that launch pro-
cesses to service requests, producing a version of FlumeWiki
in which each process that services a request acts with ex-
actly the DIFC permissions of the user who makes the re-
quest. FlumeWiki [14] is based on the software package
MoinMoin Wiki [15], but has been extended to run on the
Flume operating system with enhanced security guarantees.
Similar to Apache, in FlumeWiki a launcher process receives
requests from users for generating CGI forms, running po-
tentially untrusted code, or interacting with the Wiki. The
launcher then spawns an untrusted Worker to service the re-
quest. However, whereas Apache should execute with no in-
formation ﬂowing from one Worker to another, in FlumeWiki
each Worker should be able to access exactly the ﬁles that
can be accessed by the user who issued the request. To ex-
press this policy and instrument FlumeWiki to satisfy it, we
used policies deﬁned over persistent principals (e.g., users).
The semantics of these policies and Swim’s technique for
generating code that satisﬁes them is analogous to how it
generates code to handle the policies of §3.2. We give further
details in [9, App. H]. We removed the existing DIFC code
from the modules of FlumeWiki that launch processes that
serve CGI forms or run untrusted code. We then applied
Swim to the uninstrumented program and policy. Swim
instrumented the program correctly, with Flume API calls
that were similar to the original, manually inserted calls to
the Flume API.
ClamAV Virus Scanner Module.
We applied Swim to ClamAV to automatically produce a
virus scanner that is guaranteed not to leak sensitive data
over a network or other output device, even if it is compro-
mised. ClamAV is a virus-detection tool that periodically
scans the ﬁles of a user, checking for the presence of viruses
by comparing the ﬁles against a database of virus signatures.
To function correctly, ClamAV must be trusted to read the
sensitive ﬁles of a user, yet a user may want assurance that
even if a process running ClamAV is compromised, it will not
be able to send sensitive data over a network connection.
Program Name
Apache (MPM)
FlumeWiki (CGI)
FlumeWiki (WC)
ClamAV (scanner)
OpenVPN
LoC
15,409
300
286
10,919
98,262
Time (s) Num. Inst.
49
46
34
117
51
2.302
0.183
0.096
1.374
7.912
Table 1: Performance of Swim.
write to the network and virus database.
Inspired by [23], we modeled a system running ClamAV
using the “scanner” module of ClamAV, a ﬁle containing
sensitive user data, a ﬁle acting as a user TTY, a proxy
between the scanner and the TTY, a ﬁle acting as a virus
database, a ﬁle acting as a network connection, a process
acting as a daemon that updates the virus database, and
a process that spawns the scanner and update daemon and
may set the labels of all processes and ﬁles. We then wrote
a policy of nine ﬂow assertions that speciﬁed that:
• The update daemon should always be able to read and
• The scanner should always be able to read the sensitive
• The scanner should never be able to send data directly
to the network or TTY device. However, it should
always be able to send data to the proxy, which should
always be able to communicate with the TTY device.
Swim automatically instrumented the model so that it sat-
isﬁes the policy. Although we only used Swim to instrument
one, arbitrarily chosen system conﬁguration, because Swim
is able to instrument systems very quickly, it could easily be
used to reinstrument a system as the conﬁguration of the
system changes.
user data and virus database.
OpenVPN.
We applied Swim to OpenVPN to automatically produce
a system that respects VPN isolation. OpenVPN is an open-
source VPN client. Because VPNs act as a bridge between
networks on both sides of a ﬁrewall, they represent a seri-
ous security risk [23]. A common desired policy for systems
running a VPN client is VPN isolation, which speciﬁes that
information should be not able to ﬂow from one side of a ﬁre-
wall to the other unless it passes through the VPN client.
We modeled a system running OpenVPN using the code
of the entire OpenVPN program, ﬁles modeling networks on
opposing sides of a ﬁrewall (Network1 and Network2), and
a process (init) that launches OpenVPN and may alter the
labels of the networks. We expressed VPN isolation for this
model as a set of six ﬂow assertions that speciﬁed that:
• Information should not ﬂow between Network1 and
• OpenVPN should always be able to read to and write
Network2 unless it ﬂows through OpenVPN.
from Network1 and Network2.
Swim automatically instrumented the model so that it sat-
isﬁes the policy. As in the case with ClamAV, we applied
Swim to one particular conﬁguration of a system running
OpenVPN, but Swim is fast enough that it can easily be
reapplied to a system running OpenVPN as the system’s
conﬁguration changes.
Our experience using Swim indicates that Swim is suﬃ-
ciently expressive to instrument real-world programs to sat-
isfy real-world policies. While the ﬂow assertions presented
in §3.2 are simple to state, they can be combined to express
294complex, realistic policies. While not all programs could be
instrumented to satisfy a desired policy without modiﬁca-
tion, when an instrumentation does exist, Swim was able to
ﬁnd it each time.
For each application, we measured the performance of
Swim. Results are given in Tab. 4. Col. “LoC” gives the
number of lines of code in the program modules given to
Swim. Col. “Time (s)” gives the time in seconds required
for Swim to instrument the program. Col. “Num.
Inst.”
gives the number of statements instrumented by Swim. The
results indicate that Swim is a practical technique: Swim
is able to instrument large, real-world program modules in
seconds. It is even fast enough to be integrated into the edit-
compile-run cycle of the software-development work cycle.
5. RELATED WORK
Multiple operating systems support DIFC, including As-
bestos [21], HiStar [23], and Flume [14]. These systems all
provide low-level mechanisms that allow an application pro-
grammer to implement an information-ﬂow policy. Swim
complements these systems. By running program instru-
mented automatically by Swim on on top of a DIFC operat-
ing system, a user obtains greater assurance of the end-to-
end information-ﬂow security of their application.
Our goals are shared by Efstathopoulos and Kohler [7],
who have also explored the idea of describing a policy as
declarations of allowed and prohibited information ﬂows, for
the Asbestos DIFC system. However, their work appears to
have some signiﬁcant limitations [7, Sec. 7] (emphasis ours):
.
.
. developers are expected to produce sen-
sible policy descriptions and our [instrumenter]
is currently unable to identify the conﬁgurations
that are impossible to implement using IFC. We
would like to formalize the characteristics of pol-
icy descriptions that cannot be mapped to valid
(and secure) label implementations so as to iden-
tify such cases and handle them accordingly (e.g.
produce helpful, diagnostic error messages).
Our work goes beyond that of Efstathopoulos and Kohler by
bringing more powerful formalisms to bear on the problem
– in particular,
• the use of a constraint solver to determine what labels
to use and where label-manipulation primitives should
be placed,
• unsatisﬁability as a formal criterion for when programs
and policies are impossible to implement using only
DIFC primitives.
We apply these formalisms to obtain multiple beneﬁts.
First, from an unsatisﬁable core of constraints, we can pro-
vide help in diagnosing failures by exhibiting the subpro-
gram of the original program and the subset of the policy
declarations that contributed constraints to the unsatisﬁable
core. Second, the technique of [7] relies on the “ﬂoating-
label” semantics of Asbestos, in which communications can
implicitly change the labels of processes. The work pre-
sented in [13] shows that a system with such a semantics en-
ables high-throughput leaks, while a system such as Flume,
in which labels are explicitly manipulated by each process,
is provably free of such leaks.
Harris et al. [10] apply a model checker for safety prop-
erties of concurrent programs to determine if a fully instru-
mented DIFC application satisﬁes a high-level information-
ﬂow policy. The present paper describes how to instrument
DIFC code automatically, given only an uninstrumented
program and a policy. Such code is correct by construc-
tion. Krohn and Tromer [13] use CSP to reason about the
Flume OS, not applications running atop Flume.
Resin [22] is a language runtime that allows a program-
mer to specify dataﬂow assertions, which are checked over
the state of the associated data before the data is allowed to
be sent from one system object to another. Resin allows for
arbitrary code to be run on certain events, but it does not
attempt to provide guarantees that an application satisﬁes a
high-level policy. In comparison, our policy language is less
expressive, but the code generated by our approach is cor-
rect by construction. Additionally, DIFC systems provide
certain guarantees that Resin does not match [22].
Several programming languages, such as Jif, provide type
systems based on security labels that allow the program-
mer to validate security properties of their code through
type-checking [17, 20]. Jif has been used to implement sev-
eral real-world applications with strong security guarantees
(e.g. [3, 5, 11]), but these programs are written from scratch
in Jif. Automatic techniques can partition a Jif web ap-
plication between its client and server [3]. Jif requires the
programmer to deﬁne a bounded set of principals, and pro-
vide annotations that specify which code objects should be
able to read and write data in terms of these principals. In
contrast, Swim can reason about policies that require an
unbounded set of principals to have diﬀerent access capa-
bilities. Furthermore, Swim automatically infers the set of
tags that represent the information-ﬂow capabilities of prin-
cipals, along with inferring the code that manipulates these
tags.
Aspect-oriented programming (AOP) breaks program
logic down into distinct parts (called concerns) [12]. AOP
deals with concerns (called crosscutting concerns) that span
multiple abstractions in a program. Logging exempliﬁes a
crosscutting concern because a logging strategy necessarily
aﬀects every single logged part of the system. An aspect
can alter the behavior of the base code (the non-aspect part
of a program) by applying advice (additional behavior) at
various join points (points in a program) speciﬁed in a quan-
tiﬁcation or query called a pointcut (that detects whether a
given join point matches). The process of adding additional
behavior to the base code is called aspect weaving.
At an abstract level, policy weaving is a special case of
aspect weaving for security. In this work, we describe tech-
niques that automate the entire process of aspect weaving for
security. Moreover, whereas conventional AOP systems use
syntactically-oriented mechanisms and allow aspect code to
be placed in a rather limited set of locations, our approach is
based on programming-language and policy semantics, and
allows policy-enforcement primitives to be placed in essen-
tially arbitrary locations. The policy-weaving techniques de-
scribed in the proposal can potentially be applied to other
crosscutting concerns, such as logging and failure handling,
to improve standard AOP.
6. CONCLUSION
Until now, the promise of DIFC operating systems has
been limited by the added burden that they place on appli-
cation programmers. We have presented a technique that
takes a DIFC-unaware application and an information-ﬂow
policy and automatically instruments the application to sat-
295isfy the policy, while respecting the functionality of the ap-
plication. Our technique thus greatly improves the appli-
cability of DIFC systems and the end-to-end reliability of
applications that run on such systems.
To date, we have worked with a very simple policy lan-
guage in which policies consist of Secrecy and Prot assertions.
Future work will explore more sophisticated policy languages
for a broader set of policy issues. We will also investigate
other approaches to handling inconsistent policies.
7. REFERENCES
[1] Apache. http://www.apache.org.
[2] S. D. Brookes, C. A. R. Hoare, and A. W. Roscoe. A
theory of communicating sequential processes. J.
ACM, 31(3):560–599, 1984.
[3] S. Chong, J. Liu, A. C. Myers, X. Qi, K. Vikram,
L. Zheng, and X. Zheng. Secure web applications via
automatic partitioning. In SOSP, 2007.
[4] ClamAV. http://www.clamav.net.
[5] M. R. Clarkson, S. Chong, and A. C. Myers. Civitas:
Toward a secure voting system. SP, 2008.
[6] B. Dutertre and L. de Moura. The Yices SMT solver.
http://yices.csl.sri.com/tool-paper.pdf, August
2006.
[7] P. Efstathopoulos and E. Kohler. Manageable
ﬁne-grained information ﬂow. SIGOPS Oper. Syst.
Rev., 42(4):301–313, 2008.
[8] V. Ganesh and D. Dill. A decision procesure for
bit-vectors and arrays. In CAV, 2007.
[9] W. R. Harris, S. Jha, and T. Reps. DIFC programs by
automatic instrumentation. http://cs.wisc.edu/
~wrharris/publications/tr-1673.pdf, 2010.
[10] W. R. Harris, N. A. Kidd, S. Chaki, S. Jha, and
T. Reps. Verifying information ﬂow control over
unbounded processes. In FM, 2009.
[11] B. Hicks, K. Ahmadizadeh, and P. McDaniel.
Understanding practical application development in
security-typed languages. In ACSAC, 2006.
[12] G. Kiczales, J. Lamping, A. Mendhekar, C. Maeda,
C. Lopes, J. Loingtier, and J. Irwin. Aspect-oriented
programming. In ECOOP, 1997.
[13] M. Krohn and E. Tromer. Noninterference for a
practical DIFC-based operating system. In SP, 2009.
[14] M. Krohn, A. Yip, M. Brodsky, N. Cliﬀer, M. F.
Kaashoek, E. Kohler, and R. Morris. Information ﬂow
control for standard OS abstractions. In SOSP, 2007.
[15] MoinMoin. The MoinMoin wiki engine, Dec. 2006.
[16] L. D. Moura and N. Bjørner. Z3: An eﬃcient SMT
solver. In TACAS, 2008.
[17] A. C. Myers and B. Liskov. A decentralized model for
information ﬂow control. In SOSP, 1997.
[18] G. C. Necula, S. McPeak, S. P. Rahul, and
W. Weimer. CIL: Intermediate language and tools for
analysis and transformation of C programs. In CC,
2002.
[19] OpenVPN. http://www.openvpn.net.
[20] N. Swamy, B. J. Corcoran, and M. Hicks. Fable: A
language for enforcing user-deﬁned security policies. In
SP, 2008.
[21] S. Vandebogart, P. Efstathopoulos, E. Kohler,
M. Krohn, C. Frey, D. Ziegler, F. Kaashoek,
R. Morris, and D. Mazi`eres. Labels and event
processes in the Asbestos operating system. ACM
Trans. Comput. Syst., 25(4):11, 2007.
[22] A. Yip, X. Wang, N. Zeldovich, and M. F. Kaashoek.
Improving application security with data ﬂow
assertions. In SOSP, 2009.
[23] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and
D. Mazi`eres. Making information ﬂow explicit in
HiStar. In OSDI, 2006.
296