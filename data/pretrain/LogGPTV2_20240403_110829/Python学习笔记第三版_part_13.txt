另⼀常见逻辑运算是条件表达式（conditional expression），类似功能在其他语⾔被称作
三元运算符（ternary operator）。
T if X else F : 当条件 X 为真时，返回 T，否则返回 F。等同 X ? T : F。
>>> "T" if 2 > 1 else "F" # 等同 2 > 1 ? T : F
'T'
>>> "T" if 2 >> 2 > 1 and "T" or "F" # 2 > 1 ? T : F
'T'
>>> 2 >> 2 >> 2 >> False or "F" # ② 返回真值 F。
'F'
2 >> 2 > 1 and "" or "F"
'F'
>>> 2 > 1 and "" # ① 返回最后操作数 “”。
''
>>> "" or "F" # ② 返回真值 F，与期望值 “” 不不符。
'F'
显然，当 T 和 F 是动态数据时，条件表达式更安全⼀些。
>>> "" if 2 > 1 else "F"
''
!118
学习笔记 . 第三版
逻辑运算符还常被⽤来简化默认值设置。
>>> x = None
>>> y = x or 100
>>> y
100
>>> x = None
>>> y = x and x * 2 or 100
>>> y
100
!119
学习笔记 . 第三版
4. 控制流
当我们⽤⾯向对象技术构建好了舞台和演员，剩下的就是⽤故事线串联起整个世界，让所
有成员都活过来。故事的每个场景都由⼀系列⽭盾冲突推动前⾏，不总是那么平淡悠闲。
其中有选择，有轮回，还需⼤魄⼒抽⾝事外。
4.1 选择
语法除 elif 缩写外，其他未见有何不同。多选择分⽀依次执⾏条件表达式，最终全部匹配
失败，或仅⼀条得以执⾏。
单 if 多分⽀，与多 if 语句意义和执⾏⽅式完全不同，注意区别。
def test(x):
if x > 0:
print("+")
elif x >> dis.dis(test)
2 0 LOAD_FAST 0 (x)
2 LOAD_CONST 1 (0)
4 COMPARE_OP 4 (>)
6 POP_JUMP_IF_FALSE 18 # 当前条件失败，转⼊入下⼀一分⽀支。
3 8 LOAD_GLOBAL 0 (print)
10 LOAD_CONST 2 ('+')
12 CALL_FUNCTION 1
14 POP_TOP
16 JUMP_FORWARD 26 (to 44) # 分⽀支执⾏行行后，⽴立即跳出整个 if 语句句块。
4 >> 18 LOAD_FAST 0 (x)
20 LOAD_CONST 1 (0)
22 COMPARE_OP 0 (> 44 LOAD_CONST 0 (None)
46 RETURN_VALUE
!120
学习笔记 . 第三版
对于 else 分⽀，通常建议代码前置作为默认实现。应尝试以重构或设计模式（⽐如多态）
来减少选择分⽀，减少缩进层次，避免将执⾏细节与框架流程混到⼀起。
在描述汽车换挡流程时，会说：“挂 R 档倒车”，并不会加⼊变速器和发动机如何⼯作等细节。因
流程和细节所处层次不同，混到⼀起，未免有主次不分之嫌。在阅读和研究代码时，更期望有简
单清晰的逻辑主线，让我们能快速了解整个过程，然后才是选择性深⼊细节。
def lenx(s):
n = -1
if s: n = len(s)
return n
def lenx(s):
if s: return len(s)
return -1
常见问题和建议：
• 将过长的分⽀代码重构为函数。相⽐细节，有意义的函数名更友好。
• 将复杂或过长的条件表达式重构为函数，更易阅读和维护。
• 代码块跨度太长（⽐如需要翻屏），极易造成缩进错误。
• 嵌套易造成缩进错误，且太多层次可读性不好，应当避免。
• 简单的选择语句，可⽤条件表达式或逻辑运算替代。
在逻辑流程中，⽤友好的名字遮蔽细节是极重要的。
对新⼿⽽⾔，过多的选择分⽀容易造成死代码（dead code）。可惜编译器对此漠不关⼼，
未做任何提⽰和消除（DCE, dead code elimination）处理，只能借助第三⽅检查⼯具。
def test(x):
if x > 0:
print("a")
elif x > 5: # 死代码，永远不不会被执⾏行行。
print("b")
>>> dis.dis(test)
!121
学习笔记 . 第三版
2 0 LOAD_FAST 0 (x)
2 LOAD_CONST 1 (0)
4 COMPARE_OP 4 (>)
6 POP_JUMP_IF_FALSE 18
...
4 >> 18 LOAD_FAST 0 (x) # 死代码分⽀支代码依然存在。
20 LOAD_CONST 3 (5)
22 COMPARE_OP 4 (>)
24 POP_JUMP_IF_FALSE 34
5 26 LOAD_GLOBAL 0 (print)
28 LOAD_CONST 4 ('b')
30 CALL_FUNCTION 1
32 POP_TOP
>> 34 LOAD_CONST 0 (None)
36 RETURN_VALUE
4.2 循环
循环语句分 while、for 两种，两者间并不存在替代关系。前者⽤于执⾏逻辑循环，⽽后者
则偏向对象内容迭代，或许改名 foreach 更易区分和理解。
>>> while n > 0: # 基于特定条件，循环执⾏行行指令。
print(n)
n -= 1
>>> for i in range(3): # 依次从可迭代对象中提取元素。
print(i)
迭代
遍历可迭代对象（iterate）时，可进⼀步执⾏序列解包。次序是先取迭代元素，随后对该
元素做解包操作。
>>> for a, b in [(1, 2), (3, 4)]:
print(a, b)
1 2
!122
学习笔记 . 第三版
3 4
类似下⾯的错误，纯属误解。
>>> for a, b in [1, 2]:
print(a, b)
TypeError: 'int' object is not iterable
如要实现传统 for 循环，可借助 enumerate 类型。它为迭代元素添加⾃增序号，如此解包
操作就可获取索引值。
迭代操作⽤ __next__ ⽅法返回元素，⽆需修改原对象，在此添加⼀个计数器即可。
默认起始序号为 0，可⽤参数⾃⾏设定。
>>> for i, x in enumerate([100, 200, 300]):
print(i, x)
0 100
1 200
2 300
如⽬标对象以函数返回，那么该函数仅调⽤⼀次。
>>> def data():
print("data")
return range(3)
>>> for i in data():
print(i)
data # 仅执⾏行行⼀一次。
0
1
2
>>> dis.dis(compile("for i in data(): print(i)", "", "exec"))
1 0 SETUP_LOOP 22 (to 24)
2 LOAD_NAME 0 (data)
4 CALL_FUNCTION 0 # 调⽤用 data 函数，将结果存储在堆栈。
!123
学习笔记 . 第三版
6 GET_ITER
>> 8 FOR_ITER 12 (to 22) # 开始迭代。
10 STORE_NAME 1 (i)
12 LOAD_NAME 2 (print)
14 LOAD_NAME 1 (i)
16 CALL_FUNCTION 1
18 POP_TOP
20 JUMP_ABSOLUTE 8 # 跳转到 8 继续迭代，⽽而⾮非调⽤用 data 函数。
>> 22 POP_BLOCK
>> 24 LOAD_CONST 0 (None)
26 RETURN_VALUE
可选分支
Python 循环语句与其他语⾔最⼤差别在于，它们可⾃选 else 分⽀，⽤于在循环正常结束后
执⾏额外操作。
正常结束是指循环没有被 break、return 中断。当然，循环体没被执⾏也属正常。
另外，执⾏ continue 是允许的，它不是中断。
>>> n = 3
>>> while n > 0:
print(n)
n -= 1
else:
print("over")
3
2
1
over
>>> n = 3
>>> while n > 0:
print("break:", n)
break # break 导致 else 不不会执⾏行行。
else:
print("over")
break: 3
>>> n = 0
!124
学习笔记 . 第三版
>>> while n > 0:
print(n)
break # 尽管有 break，但并未执⾏行行，也算正常结束。
else:
print("over")
over
该特性可⽤来处理⼀些默认⾏为，⽐如⽇志记录，重置缓冲区等。
def match(data, x):
tmp = data[:]
while tmp:
if x in tmp: return True # 找到后，以 return 中断循环。
tmp = tmp[1:]
else: # 没有中断，⾃自然是没找到。
print("log: not found")
return False
>>> match(range(3), 4)
log: not found
False
临时变量
循环语句并没有单独名字空间，其内部临时变量直接影响语句所在上下⽂。
def test():
while True:
x = 100
break
for i in range(10, 20):
pass
print(locals()) # x、i 实际使⽤用 test.locals 名字空间。
print(x, i)
>>> test()
!125
学习笔记 . 第三版
{'i': 19, 'x': 100}
100 19
跳转
Python 不⽀持 goto 和 label，想要在多层嵌套循环中跳转，稍稍有些⿇烦。最简单的做法
是设定跳转标志，并在相应位置检查。
def test():
stop = False
while True:
while True:
stop = True # 中断前设定跳出标志，供外循环判断。
break
if stop: break
或者，将内层循环重构为函数，基于返回值作出判断。
def test():
def inner(): # 内循环重构函数，以返回值作为跳转标志。
while True:
return False
return True
while True:
if not inner(): break
更激进的做法是抛出异常，可绕开循环语句和函数限制，在调⽤堆栈层⾯拦截捕获。当然，
这涉及函数调⽤和异常处理内容，后⽂另作详述。
⽹上有修改字节码插⼊跳转指令实现 goto 的⽅法，可供研究，不建议使⽤。
另定义多个异常，分别 raise 和 except，也算是变向实现 goto label 机制。
!126