        // etc.
      }
33.9.6 方向
OrientationSensor是最复杂的，它从加速计、陀螺仪和磁力计中获取值。所有这些值
放在一个四元数中，用Quaternion属性表示，或用旋转矩阵表示（RotationMatrix属性）。
试一试示例应用程序，看看这些值以及如何移动设备（代码文件
SensorSampleApp/ViewModels/OrientationViewModel.cs）：
        public static class OrientationSensorExtensions
        {
          public static string Output(this SensorQuaternion q) =>
            $"x {q.X} y {q.Y} z {q.Z} w {q.W}";
          public static string Ouput(this SensorRotationMatrix m) =>
            $"m11 {m.M11} m12 {m.M12} m13 {m.M13} " +
            $"m21 {m.M21} m22 {m.M22} m23 {m.M23} " +
            $"m31 {m.M31} m32 {m.M32} m33 {m.M33}";
        }
        public class OrientationViewModel: BindableBase
        {
          public void OnGetOrientation()
          {
            OrientationSensor sensor = OrientationSensor.GetDefault();
            if (sensor ! = null)
            {
            OrientationSensorReading reading = sensor.GetCurrentReading();
            OrientationInfo = $"Quaternion: {reading.Quaternion.Output()} " +
              $"Rotation: {reading.RotationMatrix.Ouput()} " +
              $"Yaw accuracy: {reading.YawAccuracy}";
            }
            else
            {
            OrientationInfo = "Compass not found";
            }
          }
          private string _orientationInfo;
          public string OrientationInfo
          {
            get { return _orientationInfo; }
            set { SetProperty(ref _orientationInfo, value); }
          }
          // etc.
        }
运行这个应用程序，可以看到如图33-16所示的传感器数据。
图33-16
33.9.7 Rolling Marble示例
为了查看传感器的值，而不仅仅是查看在TextBlock元素中显示的结果值，使用
Accelerometer建立一个简单的示例应用程序，它在屏幕上滚动一个钢珠。
钢珠用一个红色的椭圆表示。将一个Ellipse元素定位在Canvas元素内部，就可以用一
个附加的属性移动Ellipse（代码文件RollingMarble/MainPage.xaml）：
  注意： 附加的属性参见第29章，Canvas元素参见第34章。
MainPage的构造函数初始化Accelerometer，请求最小时间间隔的连续读数。为了确定
窗口的边界，在页面的LayoutUpdated事件中，把MaxX和MaxY设置为窗口的宽度和高度
（减去椭圆的尺寸）（代码文件RollingMarble/MainPage.xaml.cs）：
      public sealed partial class MainPage: Page
      {
        private Accelerometer _accelerometer;
        private double MinX = 0;
        private double MinY = 0;
        private double MaxX = 1000;
        private double MaxY = 600;
        private double currentX = 0;
        private double currentY = 0;
        public MainPage()
        {
          this.InitializeComponent();
          accelerometer = Accelerometer.GetDefault();
          accelerometer.ReportInterval = accelerometer.MinimumReportInterval;
          accelerometer.ReadingChanged += OnAccelerometerReading;
          this.DataContext = this;
          this.LayoutUpdated += (sender, e) =>
          {
          MaxX = this.ActualWidth-100;
          MaxY = this.ActualHeight-100;
          };
        }
从加速计中获得了每个值后，OnAccelerometerReading事件处理程序方法使椭圆在
Canvas元素内部移动。在设置值之前，根据窗口的边界检查它：
    private async void OnAccelerometerReading(Accelerometer sender,
      AccelerometerReadingChangedEventArgs args)
    {
      currentX += args.Reading.AccelerationX ＊ 80;
      if (currentX  MaxX) currentX = MaxX;
      currentY += -args.Reading.AccelerationY ＊ 80;
      if (currentY  MaxY) currentY = MaxY;
      await this.Dispatcher.RunAsync(CoreDispatcherPriority.High, () =>
        {
          Canvas.SetLeft(ell1, currentX);
          Canvas.SetTop(ell1, currentY);
        });
    }
现在运行应用程序，移动设备，获得钢珠滚动的效果，如图33-17所示。
图33-17
33.10 小结
本章介绍了编写UWP 
Windows应用程序的更多内容，讨论了生命周期与Windows桌
面应用程序的区别，以及如何响应Suspending事件。
与其他应用程序的交互是使用共享协定实现的。DataTransferManager用于给其他应用
程序提供HTML数据。实现“共享目标”协定，就可以接收其他应用程序的数据。
本章的另一个主要部分是几个设备，讨论了拍照和录制视频的相机、获取用户位置的
GeoLocator，以及使用不同的传感器获取设备的移动方式。
下一章继续介绍XAML技术，讨论如何使用WPF编写Windows桌面应用程序。
第34章
带WPF的Windows桌面应用程序
本章要点
● WPF控件
● 布局
● 触发器
● 菜单和功能区控件
● 使用Commanding进行输入处理
● 绑定到元素、对象、列表和XML的数据
● 值的转换和验证
● 使用TreeView显示层次数据
● 使用DataGrid显示和组合数据
● 使用CollectionView Source实时成型
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● Controls Sample
● Layout Sample
● Trigger Sample
● Books
● Multi Binding Sample
● Priority Binding Sample
● XML Binding Sample
● Validation Sample
● Formula-1
● Live Shaping
34.1 概述
第29章和第30章介绍了XAML的一些核心功能，本章继续在WPF中使用XAML，介绍
控件层次结构的一些重要方面，创建完整的应用程序，使用数据绑定和命令处理，以及
DataGrid控件。数据绑定是把.NET类中的数据提供给用户界面的一个重要概念，还允许用
户修改数据。WPF不仅允许绑定到简单的项或列表，还可以利用本章介绍的多绑定和优
先绑定功能，把一个UI属性绑定到类型可能不同的多个属性上。在数据绑定的过程中，
验证用户输入的数据也很重要。本章将学习数据验证的不同方式，包括.NET 
4.5新增的
INotifyDataErrorInfo接口。Commanding可以把UI的事件映射到代码上。与事件模型相
反，它更好地分隔开了XAML和代码，我们还将学习使用预定义的命令和创建定制的命
令。
TreeView和DataGrid控件是显示绑定数据的UI控件。TreeView控件可以在树型结构中
显示数据，其中数据根据用户的选择动态加载。通过DataGrid控件学习如何使用过滤、排
序和分组，以及.NET 
4.5的一个新增功能——实时成型，它可以实时改变排序或过滤选
项。
首先介绍菜单和功能区控件。功能区控件是.NET 4.5中新增的。
34.2 控件
可以对WPF使用上百个控件。下面把控件分为几组，在各小节中分别介绍。
34.2.1 简单控件
简单控件是没有Content属性的控件。例如，Button类可以包含任意形状或任意元素，
这对于简单控件没有问题。表34-1列出了简单控件及其功能。
表34-1
简单控件
说明
TextBox
TextBox控件用于显示简单的无格式文本
RichTextBox
RichTextBox控件通过FlowDocument类支持带格式的文本。
RichTextBox和TextBox派生自同一个基类TextBoxBase
Calendar
Calendar控件可以显示年份、月份或10年。用户可以选择一
个日期或日期范围
DatePicker
DatePicker控件会打开Calendar屏幕，供用户选择日期
PasswordBox
PasswordBox控件用于输入密码。这个控件有用于输入密码
的专用属性，例如，PasswordChar属性定义了在用户输入密
码时显示的字符，Password属性可以访问输入的密码。
PasswordChanged事件在修改密码时立即调用
ScrollBar
ScrollBar控件包含一个Thumb，用户可以从Thumb中选择一
个值。例如，如果文档在屏幕中放不下，就可以使用滚动
条。一些控件包含滚动条，如果内容过多，就显示滚动条
ProgressBar
使用ProgressBar控件，可以指示时间较长的操作的进度
Slider
使用Slider控件，用户可以移动Thumb，选择一个范围的
值。ScrollBar、ProgressBar和Slider派生自同一个基类
RangeBase
  注意： 尽管简单控件没有Content属性，但通过定义模板，完全可以定制这些
控件的外观。模板详见本章后面的内容。
34.2.2 内容控件
ContentControl有Content属性，利用Content属性，可以给控件添加任意内容。因为
Button类派生自基类ContentControl，所以可以在这个控件中添加任意内容。在上面的例子
中，在Button类中有一个Canvas控件。表34-2列出了内容控件。
表34-2
ContentControl控件
说明
Button
RepeatButton
ToggleButton
CheckBox
RadioButton
Button、RepeatButton、ToggleButton和
GridViewColumnHeader类派生自同一个基类ButtonBase。所
有这些按钮都响应Click事件。RepeatButton类会重复引发
Click事件，直到释放按钮为止。ToggleButton是CheckBox和
RadioButton的基类。这些按钮有开关状态。CheckBox可以
由用户选择和取消选择，RadioButton可以由用户选择。清
除RadioButton的选择必须通过编程方式实现
Label
Label类表示控件的文本标签。这个类也支持访问键，如菜
单命令
Frame
Frame控件支持导航。使用Navigate（）方法可以导航到一
个页面内容上。如果该内容是一个网页，就使用
WebBrowser控件来显示
ListBoxItem
ListBoxItem是ListBox控件中的一项
StatusBarItem
StatusBarItem是StatusBar控件中的一项
ScrollViewer
ScrollViewer控件是一个包含滚动条的内容控件，可以把任
意内容放入这个控件中，滚动条会在需要时显示
ToolTip
ToolTip创建一个弹出窗口，以显示控件的附加信息
UserControl
将UserControl类用作基类，可以为创建自定义控件提供一种
简单方式。但是，基类UserControl不支持模板
Window
Window类可以创建窗口和对话框。使用这个类，会获得一
个带有最小化/最大化/关闭按钮和系统菜单的框架。在显示
对话框时，可以使用ShowDialog（）方法，Show（）方法
会打开一个窗口
NavigationWindow
类NavigationWindow派生自Window类，支持内容导航
只有一个Frame控件包含在下面XAML代码的Window中。因为Source属性设置为
http://www.cninnovation.com，所以Frame控件导航到这个网站上，如图34-1所示（代码文
件ControlsSample/FramesWindow.xaml）。
图34-1
  注意： 第32章介绍了如何使用Frame类在页面之间导航。在WPF中，也可以
使用Frame类进行导航。
34.2.3 带标题的内容控件
带标题的内容控件派生自HeaderContentControl基类。HeaderContentControl类又派生
自基类ContentControl。HeaderContentControl类的Header属性定义了标题的内容，
HeaderTemplate属性可以对标题进行完全的定制。派生自基类HeaderContentControl的控件
如表34-3所示。
表34-3
HeaderContentControl
说明
Expander
使用Expander控件，可以创建一个带对话框的“高
级”模式，它在默认情况下不显示所有的信息，只
有用户展开它，才会显示更多的信息。在未展开模
式下，只显示标题信息；在展开模式下，显示内容
GroupBox
GroupBox控件提供了边框和标题来组合控件
TabItem
TabItem控件是TabControl类中的项。TabItem的
Header属性定义了标题的内容，这些内容用
TabControl的标签显示
Expander控件的简单用法如下面的例子所示。把Expander控件的Header属性设置为
Click for more。这个文本用于显示扩展。这个控件的内容只有在控件展开时才显示。图
34-2中的应用程序包含折叠的Expander控件，图34-3中的同一个应用程序包含展开的
Expander控件。代码如下（代码文件ControlsSample/ExpanderWindow.xaml）：
图34-2
图34-3
        Short information
            More information here!
  注意： 在展开Expander控件时，如果要修改该控件的标题文本，就可以创建
一个触发器。触发器详见本章后面的内容。
34.2.4 项控件
ItemsControl类包含一个可以用Items属性访问的数据项列表。派生自ItemsControl的类
如表34-4所示。
表34-4