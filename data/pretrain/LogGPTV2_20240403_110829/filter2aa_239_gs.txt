WebSampleApp/wwwroot/Hello.html），如下所示：
      Hello, ASP.NET with Static Files
现在，启动服务器后，从浏览器中向HTML文件发出请求，例如
http://localhost:5000/Hello.html。根据正在使用的配置，项目的端口号可能会有所不同。
  注意： 用ASP.NET MVC创建Web应用程序时，还需要了解HTML、CSS、
JavaScript和一些JavaScript库。本书的重点是C#和.NET，所以这些主题的内容非常少。
本书仅讨论使用ASP.NET MVC和Visual Studio时需要知道的最重要的任务。
40.5.1 使用JavaScript包管理器：npm
在Web应用程序中，通常需要一些JavaScript库。在Visual 
Studio 
2015推出之前，
JavaScript库可以用作NuGet包，类似于.NET程序集可以用作NuGet包。因为关于脚本库的
社区通常不使用NuGet服务器，所以他们不会创建NuGet包。Microsoft或对Microsoft友好
的社区需要完成额外的工作，才能为JavaScript库创建NuGet包。如果不使用NuGet，关于
JavaScript的社区就使用类似于NuGet的服务器功能。
Node 
Package 
Manager（npm）是一个JavaScript库的包管理器。它最初来自
Node.Js（用于服务器端开发的JavaScript库），带有服务器端脚本，非常强大。然而，越
来越多的客户端脚本库也可用于npm。
使用Visual Studio 2015，可以从项模板中添加NPM Configuration File，把npm添加到
项目中。添加项模板时，package.json文件会被添加到项目中：
    {
      "version": "1.0.0",
      "name": "ASP.NET",
      "private": "true",
      "devDependencies": {
      }
    }
在Visual Studio中打开该文件，可以看到编辑器中的npm标志，如图40-6所示。
图40-6
  注意： 只有单击Show All Files按钮，package.json文件在Solution Explorer中
才是可见的。
如果开始把JavaScript库添加到这个文件的devDependencies部分，在输入时就连接npm
服务器，以允许完成JavaScript库，并显示可用的版本号。在编辑器中选择版本号时，也
可以提供^和～前缀。没有前缀，就在服务器中检索所输入库的确切版本和精确的名称。
如果提供了^前缀，就检索具有主版本号的最新的库；如果提供了～前缀，就检索具有次
版本号的最新的库。
下面的package.json文件引用了几个gulp库和rimraf库。保存package.json文件时，从服
务器中加载npm包。在Solution Explorer中，可以看到Dependencies部分中npm加载的库。
Dependencies部分有一个npm子节点，其中显示了所有加载的库。
    {
      "version": "1.0.0",
      "name": "ASP.NET",
      "private": "true",
      "devDependencies": {
        "gulp": "3.9.0",
        "gulp-concat": "2.6.0",
        "gulp-cssmin": "0.1.7",
        "gulp-uglify": "1.2.0",
        "rimraf": "2.4.2"
      }
    }
这些引用的JavaScript库有什么好处？gulp是一个构建系统，参见40.5.2节。gulp-
concat连接JavaScript文件；gulp-cssmin压缩CSS文件；gulp-uglify压缩JavaScript文件；
rimraf允许删除层次结构中的文件。压缩会删除所有不必要的字符。
添加包后，可以在Solution Explorer的Dependencies部分使用npm节点轻松地更新或卸
载包。
40.5.2 用gulp构建
gulp是一个用于JavaScript的构建系统。npm可以与NuGet相媲美，而gulp可以与.NET
Development Utility（DNU）相媲美。JavaScript代码是解释性的；为什么需要构建系统和
JavaScript？对HTML、CSS和JavaScript执行许多操作后，才把这些文件放在服务器上。有
了构建系统，就可以把Syntactically Awesome Stylesheets （SASS）文件（带有脚本功能的
CSS）转换为CSS，可以缩小和压缩文件，可以启动脚本的单元测试，可以分析JavaScript
代码（例如使用JSHint）——可以执行很多有用的任务。
添加gulp与npm之后，可以使用Visual Studio项模板添加Gulp Configuration File。这个
模板创建下面的gulp文件（代码文件MVCSampleApp/gulpfile.js）：
    /＊
    This file is the main entry point for defining Gulp tasks and using Gulp plug
ins.
    Click here to learn more. http://go.microsoft.com/fwlink/? LinkId=518007
    ＊/
    var gulp = require('gulp');
    gulp.task('default', function () {
        // place code for your default task here
    });
带有gulp标志的编辑器如图40-7所示。
图40-7
现在给gulp文件添加一些任务。前几行定义了这个文件需要的库，并为脚本指定变
量。这里，使用通过npm添加的库。gulp.task函数创建了gulp任务，使用Visual Studio Task
Runner Explorer可以启动该任务：
    "use strict";
    var gulp = require("gulp"),
        rimraf = require("rimraf"),
        concat = require("gulp-concat"),
        cssmin = require("gulp-cssmin"),
        uglify = require("gulp-uglify")
    var paths = {
        webroot: "./wwwroot/"
    };
    paths.js = paths.webroot + "js/＊＊/＊.js";
    paths.minJs = paths.webroot + "js/＊＊/＊.min.js";
    paths.css = paths.webroot + "css/＊＊/＊.css";
    paths.minCss = paths.webroot + "css/＊＊/＊.min.css";
    paths.concatJsDest = paths.webroot + "js/site.min.js";
    paths.concatCssDest = paths.webroot + "css/site.min.css";
    gulp.task("clean:js", function (cb) {
        rimraf(paths.concatJsDest, cb);
    });
    gulp.task("clean:css", function (cb) {
        rimraf(paths.concatCssDest, cb);
    });
    gulp.task("clean", ["clean:js", "clean:css"]);
    gulp.task("min:js", function () {
        gulp.src([paths.js, "! " + paths.minJs], { base: "." })
          .pipe(concat(paths.concatJsDest))
          .pipe(uglify())
          .pipe(gulp.dest("."));
    });
    gulp.task("min:css", function () {
        gulp.src([paths.css, "! " + paths.minCss])
          .pipe(concat(paths.concatCssDest))
          .pipe(cssmin())
          .pipe(gulp.dest("."));
    });
    gulp.task("min", ["min:js", "min:css"]);
Visual Studio 2015为gulp文件提供了一个Task Runner Explorer（参见图40-8）。双击
一个任务，以启动它。也可以把gulp任务映射到Visual 
Studio命令上。这样，当打开项
目，构建之前或之后或者在Build菜单内选择Clean菜单项时，gulp任务会自动启动。
图40-8
  注意： Visual Studio支持的另一个JavaScript构建系统是Grunt。Grunt专注于
通过配置来构建，而gulp的重点是通过JavaScript代码来构建。
40.5.3 通过Bower使用客户端库
大多数客户端JavaScript库都可以通过Bower使用。Bower是一个像npm那样的包管理
器。npm项目用JavaScript库启动服务器端代码（尽管许多客户端脚本库也可以用于
npm），而Bower提供了成千上万的JavaScript客户端库。
使用项模板Bower Configuration File，可以把Bower添加到ASP.NET Web项目中。这
个模板添加了文件bower.json，如下所示：
    {
      "name": "ASP.NET",
      "private": true,
      "dependencies": {
      }
    }
向项目添加Bower也会添加.bowerrc文件，用来配置Bower。默认情况下，使用
directory设置时，脚本文件（以及脚本库附带的CSS和HTML文件）会被复制到
wwwroot/lib目录：
    {
      "directory": "wwwroot/lib"
    }
  注意： 与NPM类似，需要单击Show All Files按钮，才能在Solution Explorer
中看到与Bower相关的文件。
Visual Studio 2015对Bower有特殊的支持。图40-9显示了编辑器中的Bower标志。
图40-9
如果开始给bower.json文件添加脚本库，输入库的名称和版本号，就会启动智能感知
功能。与npm类似，保存文件时，从服务器中检索库，库在Dependencies文件夹中。因
为.bowerrc内的配置，脚本库中的文件被复制到wwwroot/lib文件夹（代码文件
MVCSampleApp/.bowerrc）：
    {
      "name": "ASP.NET",
      "private": true,
      "dependencies": {
        "bootstrap": "3.3.5",
        "jquery": "2.1.4",
        "jquery-validation": "1.14.0",
        "jquery-validation-unobtrusive": "3.2.5"
      }
    }
Bower包的管理也可以使用Manage Bower Packages工具完成，单击应用程序的上下文
菜单Manage Bower Packages就可以访问该工具。这个工具非常类似于NuGet包管理器；它
便于管理Bower包（参见图40-10）。
图40-10
现在基础设施已经就位，就该讨论HTTP请求和响应了。
40.6 请求和响应
客户端通过HTTP协议向服务器发出请求。这个请求用响应来回答。
请求包含发送给服务器的标题和（在许多情况下）请求体信息。服务器使用请求体信
息，基于客户端的需求定义不同的结果。下面看看可以从客户端读取的信息。
为了把HTML格式的输出返回到客户端，GetDiv方法会创建一个div元素，其中包含
span元素与传递的参数key和value（代码文件
WebSampleApp/RequestAndResponseSample.cs）：
    public static string GetDiv(string key, string value) =>
      $"{key}: {value}";
因为在以下示例中，这些HTML 
div和span标记需要包围字符串，所以创建扩展方
法，以包括此功能（代码文件WebSampleApp/HtmlExtensions.cs）：
    public static class HtmlExtensions
    {
      public static string Div(this string value) =>
        $"{value}";
      public static string Span(this string value) =>
        $"{value}";
    }
GetRequestInformation方法使用HttpRequest对象访问Scheme、Host、Path、
QueryString、Method和Protocol属性（代码文件
WebSampleApp/RequestAndResponseSample.cs）：
    public static string GetRequestInformation(HttpRequest request)
    {
      var sb = new StringBuilder();
      sb.Append(GetDiv("scheme", request.Scheme
));
      sb.Append(GetDiv("host", request.Host.
HasValue ? request.Host.Value :
        "no host"));
      sb.Append(GetDiv("path", request.Path
));
      sb.Append(GetDiv("query string", request.QueryString
.HasValue ?
        request.QueryString.Value : "no query string"));
      sb.Append(GetDiv("method", request.Method
));
      sb.Append(GetDiv("protocol", request.Protocol
));
      return sb.ToString();
    }
Startup类的Configure方法改为调用GetRequestInformation方法，并通过HttpContext的
Request属性传递HttpRequest。结果写入Response对象（代码文件WebSampleApp/Startup.
cs）：
    app.Run(async (context) =>
    {
      await context.Response.WriteAsync(
        RequestAndResponseSample.GetRequestInformation(context.Request));
    });
在Visual Studio中启动程序，得到以下信息：
    scheme:http
    host:localhost:5000
    path: /
    query string: no query string
    method: GET
    protocol: HTTP/1.1
给请求添加一条路径，例如http://localhost:5000/Index，得到路径值集：
    scheme:http
    host:localhost:5000
    path: /Index
    query string: no query string
    method: GET
    protocol: HTTP/1.1
添加一个查询字符串，如http://localhost:5000/Add? 
x=3&y=5，就会显示访问
QueryString属性的查询字符串：
    query string: ? x=3&y=5
在下面的代码片段中，使用HttpRequest的Path属性创建一个轻量级的自定义路由。根
据客户端设定的路径，调用不同的方法（代码文件WebSampleApp/Startup.cs）：
    app.Run(async (context) =>
    {
      string result = string.Empty;
      switch (context.Request.Path.Value.ToLower())
      {
        case "/header":
        result = RequestAndResponseSample.GetHeaderInformation(context.Request);
        break;
        case "/add":
        result = RequestAndResponseSample.QueryString(context.Request);
        break;
        case "/content":
        result = RequestAndResponseSample.Content(context.Request);
        break;
        case "/encoded":
        result = RequestAndResponseSample.ContentEncoded(context.Request);
        break;
        case "/form":
        result = RequestAndResponseSample.GetForm(context.Request);
        break;
        case "/writecookie":
        result = RequestAndResponseSample.WriteCookie(context.Response);
        break;
        case "/readcookie":
        result = RequestAndResponseSample.ReadCookie(context.Request);
        break;
        case "/json":
        result = RequestAndResponseSample.GetJson(context.Response);
        break;
        default:
        result = RequestAndResponseSample.GetRequestInformation(context.Request);
        break;
      }
      await context.Response.WriteAsync(result);
    });
以下各节实现了不同的方法来显示请求标题、查询字符串等。
40.6.1 请求标题
下面看看客户端在HTTP标题中发送的信息。为了访问HTTP标题信息，HttpRequest对
象定义了Headers属性。这是IHeaderDictionary类型，它包含以标题命名的字典和一个值的
字符串数组。使用这个信息，先前创建的GetDiv方法用于把div元素写入客户端（代码文
件WebSampleApp/RequestAndResponseSample.cs）：
    public static string GetHeaderInformation(HttpRequest request)
    {
      var sb = new StringBuilder();
      IHeaderDictionary headers = request.Headers;