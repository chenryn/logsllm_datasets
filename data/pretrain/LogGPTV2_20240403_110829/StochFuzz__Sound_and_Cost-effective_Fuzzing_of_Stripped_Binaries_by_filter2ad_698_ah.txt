one to communicate with when requesting an execution in-
stance. Additionally, for each rewritten binary, its original and
shadow spaces are both re-mmaped as shared memory with the
incremental rewriter. As such, during fuzzing, the incremental
and stochastic rewriting does not trigger any process set up
cost.
Safeguarding Non-crashing Rewriting Errors. During
fuzzing, AFL automatically monitors an input stability metric
which measures the consistency of observed traces [64]. That
is, if the subject program always behaves the same for the
same input data, the fuzzing stability earns a score of 100%.
A low score suggests low input consistency. This metric can
help STOCHFUZZ detect rewriting error which does not trigger
a crash but changes execution trace. Speciﬁcally, once this
Fig. 12: The number of total fuzzing executions in 24 hours
on RetroWrite’s fuzzing benchmarks
TABLE VI: Path Coverage on RetroWrite’s benchmarks
tcpdump Average
binutils bzip2 ﬁle libarchive libpng libtiff
Tools
RetroWrite
STOCHFUZZ
6200
6392
636
1416
29
29
2706
2384
977
928
969
969
3673
3344
2170
2209
metric becomes smaller than a given threshold, the rewriting
error localization procedure is triggered. As such, the sound-
ness guarantee of STOCHFUZZ can be stronger than the one
calculated in Section IV in practice. In our evaluation, we turn
it off to measure worst-case performance.
Handling Occluded Rewriting. Another practical challenge
is to handle the case in which hlt is mistakenly placed inside
a true instruction (e.g., replacing address 1 inside the true mov
instruction at 0 in Fig. 6). As such, the address which triggers
a crash may not be the address of the inserted hlt. Although
it is highly unlikely in practice, our crash analyzer could
not repair the error properly when it happens. To handle the
problem, we design a set of advanced rewriting rules, which
guarantees control ﬂow will be terminated at a set of pre-
selected addresses once an occluded instruction gets executed.
As such, we can infer there is an occluded rewriting error.
Speciﬁcally, for a given address a with Inst(a, c), we use the
following rules to rewrite it:
1) Check whether a is occluded with any control ﬂow
transfer instruction (starting at an earlier address). If so,
avoid replacing it;
2) Replace all addresses between a and am where am =
max({ai + ci | Inst(ai, ci) ∧ (ai < a < ai + ci)}),
meaning the maximum end address of an instruction
occluded with a.
As such, any execution that encounters an instruction oc-
cluded with some injected hlt must be terminated at an
address in Sc = {ai | Inst(ai, ci)∧(ai < a < ai+ci)}∪[a, am].
The proof of soundness is elided due to the space limitations.
D. Analysis and Rewriting Overhead on Google FTS.
Different from techniques leveraging hardware features
or dynamic translation, techniques based on static rewriting
incur analysis and rewriting cost. We further study such
overhead on the standard Google FTS for e9patch, ddisasm,
and STOCHFUZZ. Table VII shows the results (measured by
total CPU time). The second column shows the overhead of
e9patch. The third and fourth columns show the overhead
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:54 UTC from IEEE Xplore.  Restrictions apply. 
16674
121.8M21.8M175.4M65.3M29.9M224.0M24.5M121.4M45.7M178.1M75.8M26.9M218.3M24.9M0.0K50.0M100.0M150.0M200.0M250.0Mbinutilsbzip2filelibarchivelibpnglibtifftcpdumpRetroWrite (94.7M)StochFuzz (98.7M)TABLE VII: Analysis and Rewriting Overhead
Program
e9patch
ddisasm
ddisasm
STOCHFUZZ
default (-j48)
-j8
rewriting
prob. anly.
boringssl
c-ares
freetype2
guetzli
harfbuzz
json
lcms
libarchive
libjpeg-turbo
libpng
libssh
libxml2
llvm-libcxxabi
openssl-1.0.1f
openssl-1.0.2d
openssl-1.1.0c
openthread
pcre2
proj4
re2
sqlite
vorbis
woff2
wpantund
Average
-
0.02s
0.76s
0.38s
0.51s
0.10s
0.34s
0.51s
0.45s
0.13s
0.36s
2.03s
0.19s
-
-
-
0.70s
0.33s
0.42s
0.40s
1.02s
0.22s
0.49s
1.58s
0.55s
67h 43m 20s
0h 47m 22s
28h 57m 28s
8h 51m 19s
8h 02m 28s
4h 44m 48s
10h 39m 50s
11h 53m 49s
30h 16m 04s
3h 29m 24s
54h 03m 58s
23h 52m 25s
4h 33m 28s
83h 57m 03s
25h 05m 28s
117h 15m 42s
20h 24m 43s
26h 35m 04s
10h 43m 34s
17h 12m 33s
16h 49m 43s
16h 07m 57s
39h 09m 27s
33h 08m 02s
126.90s
1.17s
96.24s
76.05s
70.89s
12.93s
36.58s
61.67s
108.79s
10.87s
50.22s
188.59s
15.57s
209.57s
37.91s
354.86s
57.96s
481.04s
39.25s
41.62s
117.92s
32.29s
123.50s
176.65s
27h 41m 02s
105.38s
9.77s
0.05s
21.39s
5.47s
5.33s
1.30s
3.56s
4.09s
10.49s
1.48s
2.74s
19.86s
1.90s
22.95s
2.55s
31.57s
6.10s
4.38s
4.69s
4.60s
14.38s
2.26s
6.34s
14.55s
8.41s
67.35s
0.02s
91.59s
95.84s
64.17s
8.33s
13.19s
34.29
24.33s
3.54s
23.98s
177.20s
19.78s
153.62s
4.82s
229.91s
13.33s
24.38s
20.62s
84.82s
233.97s
12.61s
21.11s
579.94s
83.41s
of ddisasm using different reassembly ﬂags, and the last two
columns show the overhead of STOCHFUZZ which is broken
down to rewriting and probability analysis overhead. Note
that ddisasm uses all 48 cores by default. However, after
communicating with the developers, we were notiﬁed that
there are some parallelism issues with the default setting. As
such, running with -j8 (for using 8 cores) produces much better
results. E9patch does not distinguish code and data, as it as-
sumes exclusion of such interleavings. Hence, it has the lowest
cost. Although the aggregated overheads of STOCHFUZZ are
not trivial, they are amortized over the 24 hours period. Also
observe that STOCHFUZZ’s overhead is comparable to ddisasm
(-j8).
E. Evaluation on Google FTS with Intential Data Inlining
Table VIII presents the overall effectiveness results for the
experiment on Google FTS with intentional data inlining. The
numbers of inlined data bytes are presented in the second
column (i.e., data bytes in between two code sections), and
whether the binaries instrumented by e9patch, ddisasm, and
STOCHFUZZ can be successfully fuzzed are presented in the
next three columns, respectively. E9patch fails on 22 out of
the 24 programs, due to its assumption of no inlined data.
It succeeds on two programs because they do not contain
static data sections. Ddisasm fails on 21 programs due to
three reasons. Speciﬁcally, 1 denotes a recompilation error
that a byte value is larger than 256. It happens when ddisasm
mis-classiﬁes a data byte as an offset of two labels. Hence,
when instrumentation code is inserted, the offset increases,
making the data byte larger than 256. Symbol 2 denotes a
recompilation error that the target of a jump instruction is an
integer (instead of a symbol). It happens when ddisasm mis-
classiﬁes some data bytes as a jump instruction whose target
cannot be symbolized. Symbol 3 denotes that instrumentation
code crashes on seed inputs (due to some recompilation error).
3
# Inlined Data Bytes e9patch ddisasm STOCHFUZZ
TABLE VIII: Effectiveness on Google FTS w/ Intentional Data
Inlining
Program
boringssl
c-ares
freetype2
guetzli
harfbuzz
json
lcms
libarchive
libjpeg-turbo
libpng
libssh
libxml2
llvm-libcxxabi
openssl-1.0.1f
openssl-1.0.2d
openssl-1.1.0c
openthread
pcre2
proj4
re2
sqlite
vorbis
woff2
wpantund
263,539
7
91,960
18,543
63,061
0
22,576
55,698
79,329
9,054
141,943
128,007
0
169,787
43,796
369,397
32,691
95,763
30,978
35,336
35,467
59,986
494,994
89,203
