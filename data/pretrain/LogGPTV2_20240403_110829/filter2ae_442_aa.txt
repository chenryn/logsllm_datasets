**作者：Y4tacker  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## 写在前面
无意中看到ch1ng师傅的文章觉得很有趣，不得不感叹师傅太厉害了，但我一看那长篇的函数总觉得会有更骚的东西，所幸还真的有，借此机会就发出来一探究竟，同时也不得不感慨下RFC文档的妙处，当然本文针对的技术也仅仅只是在流量层面上waf的绕过
## 前置
这里简单说一下师傅的思路
部署与处理上传war的servlet是`org.apache.catalina.manager.HTMLManagerServlet`
在文件上传时最终会通过处理`org.apache.catalina.manager.HTMLManagerServlet#upload`
调用的是其子类实现类`org.apache.catalina.core.ApplicationPart#getSubmittedFileName`
这里获取filename的时候的处理很有趣
看到这段注释，发现在RFC 6266文档当中也提出这点
    Avoid including the "\" character in the quoted-string form of the filename parameter, as escaping is not implemented by some user agents, and "\" can be considered an illegal path character.
那么我们的tomcat是如何处理的嘞？这里它通过函数`HttpParser.unquote`去进行处理
    public static String unquote(String input) {
            if (input == null || input.length() ''}`,分别是编码，语言和待解码的字符串，同时这里还适配了对url编码的解码，也就是`fromHex`函数,具体代码如下，其实就是url解码
    private static byte[] fromHex(final String text) {
      final int shift = 4;
      final ByteArrayOutputStream out = new ByteArrayOutputStream(text.length());
      for (int i = 0; i  text.length() - 2) {
            break; // unterminated sequence
          }
          final byte b1 = HEX_DECODE[text.charAt(i++) & MASK];
          final byte b2 = HEX_DECODE[text.charAt(i++) & MASK];
          out.write((b1 '' 中间这位language可以随便写，代码里没有用到这个的处理
既然如此那么我们首先就可以排出掉utf-8，毕竟这个解码后就直接是明文，从Java标准库当中的charsets.jar可以看出，支持的编码有很多
同时通过简单的代码也可以输出
    Locale locale = Locale.getDefault();
    Map maps = Charset.availableCharsets();
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    for (Map.Entry entry : maps.entrySet()) {
      String key = entry.getKey();
      Charset value = entry.getValue();
      sb.append("\"" + key + "\",");
    }
    sb.deleteCharAt(sb.length() - 1);
    sb.append("}");
    System.out.println(sb.toString());
运行输出
    //res
    {"Big5","Big5-HKSCS","CESU-8","EUC-JP","EUC-KR","GB18030","GB2312","GBK","IBM-Thai","IBM00858","IBM01140","IBM01141","IBM01142","IBM01143","IBM01144","IBM01145","IBM01146","IBM01147","IBM01148","IBM01149","IBM037","IBM1026","IBM1047","IBM273","IBM277","IBM278","IBM280","IBM284","IBM285","IBM290","IBM297","IBM420","IBM424","IBM437","IBM500","IBM775","IBM850","IBM852","IBM855","IBM857","IBM860","IBM861","IBM862","IBM863","IBM864","IBM865","IBM866","IBM868","IBM869","IBM870","IBM871","IBM918","ISO-2022-CN","ISO-2022-JP","ISO-2022-JP-2","ISO-2022-KR","ISO-8859-1","ISO-8859-13","ISO-8859-15","ISO-8859-2","ISO-8859-3","ISO-8859-4","ISO-8859-5","ISO-8859-6","ISO-8859-7","ISO-8859-8","ISO-8859-9","JIS_X0201","JIS_X0212-1990","KOI8-R","KOI8-U","Shift_JIS","TIS-620","US-ASCII","UTF-16","UTF-16BE","UTF-16LE","UTF-32","UTF-32BE","UTF-32LE","UTF-8","windows-1250","windows-1251","windows-1252","windows-1253","windows-1254","windows-1255","windows-1256","windows-1257","windows-1258","windows-31j","x-Big5-HKSCS-2001","x-Big5-Solaris","x-COMPOUND_TEXT","x-euc-jp-linux","x-EUC-TW","x-eucJP-Open","x-IBM1006","x-IBM1025","x-IBM1046","x-IBM1097","x-IBM1098","x-IBM1112","x-IBM1122","x-IBM1123","x-IBM1124","x-IBM1166","x-IBM1364","x-IBM1381","x-IBM1383","x-IBM300","x-IBM33722","x-IBM737","x-IBM833","x-IBM834","x-IBM856","x-IBM874","x-IBM875","x-IBM921","x-IBM922","x-IBM930","x-IBM933","x-IBM935","x-IBM937","x-IBM939","x-IBM942","x-IBM942C","x-IBM943","x-IBM943C","x-IBM948","x-IBM949","x-IBM949C","x-IBM950","x-IBM964","x-IBM970","x-ISCII91","x-ISO-2022-CN-CNS","x-ISO-2022-CN-GB","x-iso-8859-11","x-JIS0208","x-JISAutoDetect","x-Johab","x-MacArabic","x-MacCentralEurope","x-MacCroatian","x-MacCyrillic","x-MacDingbat","x-MacGreek","x-MacHebrew","x-MacIceland","x-MacRoman","x-MacRomania","x-MacSymbol","x-MacThai","x-MacTurkish","x-MacUkraine","x-MS932_0213","x-MS950-HKSCS","x-MS950-HKSCS-XP","x-mswin-936","x-PCK","x-SJIS_0213","x-UTF-16LE-BOM","X-UTF-32BE-BOM","X-UTF-32LE-BOM","x-windows-50220","x-windows-50221","x-windows-874","x-windows-949","x-windows-950","x-windows-iso2022jp"}
这里作为演示我就随便选一个了`UTF-16BE`
同样的我们也可以进行套娃结合上面的`filename=""y\4.\w\arK"`改成`filename="UTF-16BE'Y4tacker'%00%22%00y%00%5C%004%00.%00%5C%00w%00%5C%00a%00r%00K"`
接下来处理点小加强，可以看到在这里分隔符无限加，而且加了??号的字符之后也会去除一个??号
因此我们最终可以得到如下payload，此时仅仅基于正则的waf规则就很有可能会失效
    ------WebKitFormBoundaryQKTY1MomsixvN8vX
    Content-Disposition: form-data*;;;;;;;;;;name*="UTF-16BE'Y4tacker'%00d%00e%00p%00l%00o%00y%00W%00a%00r";;;;;;;;filename*="UTF-16BE'Y4tacker'%00%22%00y%00%5C%004%00.%00%5C%00w%00%5C%00a%00r%00K"
    Content-Type: application/octet-stream
    123
    ------WebKitFormBoundaryQKTY1MomsixvN8vX--
可以看见成功上传
### 变形之parseQuotedToken
这里测试版本是Tomcat8.5.72，这里也不想再测其他版本差异了只是提供一种思路
在此基础上我发现还可以做一些新的东西，其实就是对`org.apache.tomcat.util.http.fileupload.ParameterParser#parse(char[],
int, int, char)`函数进行深入分析
在获取值的时候`paramValue = parseQuotedToken(new char[] {separator
});`，其实是按照分隔符`;`分割，因此我们不难想到前面的东西其实可以不用`"`进行包裹，在parseQuotedToken最后返回调用的是`return
getToken(true);`，这个函数也很简单就不必多解释
    private String getToken(final boolean quoted) {
            // Trim leading white spaces
            while ((i1  i1) && (Character.isWhitespace(chars[i2 - 1]))) {
                i2--;
            }
            // Strip away quotation marks if necessary
            if (quoted
                && ((i2 - i1) >= 2)
                && (chars[i1] == '"')
                && (chars[i2 - 1] == '"')) {
                i1++;
                i2--;
            }
            String result = null;
            if (i2 > i1) {
                result = new String(chars, i1, i2 - i1);
            }
            return result;