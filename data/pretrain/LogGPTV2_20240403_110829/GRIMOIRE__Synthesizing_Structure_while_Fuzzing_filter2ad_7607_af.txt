[63] YANG, X., CHEN, Y., EIDE, E., AND REGEHR, J. Finding and
understanding bugs in C compilers. In ACM SIGPLAN Notices (6
2011), vol. 46, ACM, pp. 283–294.
[64] YUN, I., LEE, S., XU, M., JANG, Y., AND KIM, T. QSYM: A
practical concolic execution engine tailored for hybrid fuzzing. In
USENIX Security Symposium (2018), pp. 745–761.
[65] ZALEWSKI, M. american fuzzy lop. http://lcamtuf.coredump.cx/
afl/.
[66] ZALEWSKI, M. Technical “whitepaper” for aﬂ-fuzz.
lcamtuf.coredump.cx/afl/technical_details.txt.
http://
[67] ZHAO, L., DUAN, Y., YIN, H., AND XUAN, J. Send hardest problems
my way: Probabilistic path prioritization for hybrid fuzzing. In Sympo-
sium on Network and Distributed System Security (NDSS) (2019).
[28] HAN, H., OH, D., AND CHA, S. K. CodeAlchemist: Semantics-
aware code generation to ﬁnd vulnerabilities in JavaScript engines.
In Symposium on Network and Distributed System Security (NDSS)
(2019).
[29] HELIN, A. A general-purpose fuzzer. https://github.com/aoh/
radamsa.
[30] HEX-RAYS. IDA pro. https://www.hex-rays.com/products/ida/.
[31] HIPP, D. R. SQLite. https://www.sqlite.org/index.html.
[32] HOCEVAR, S. zzuf. https://github.com/samhocevar/zzuf.
[33] HOLLER, C., HERZIG, K., AND ZELLER, A. Fuzzing with code
fragments. In USENIX Security Symposium (2012).
[34] HÖSCHELE, M., AND ZELLER, A. Mining input grammars from
dynamic taints. In Proceedings of the 31st IEEE/ACM International
Conference on Automated Software Engineering (2016).
[35] HSU, C.-C., WU, C.-Y., HSIAO, H.-C., AND HUANG, S.-K. IN-
STRIM: Lightweight instrumentation for coverage-guided fuzzing. In
Symposium on Network and Distributed System Security (NDSS), Work-
shop on Binary Analysis Research (2018).
[36] IERUSALIMSCHY, R., CELES, W., AND DE FIGUEIREDO, L. H. Lua.
https://www.lua.org/.
[37] JOHNSON, S. Yacc: Yet another compiler-compiler.
dinosaur.compilertools.net/yacc/.
http://
[38] JONES, E., OLIPHANT, T., AND PETERSON, P. Scipy: Open source
scientiﬁc tools for Python. http://www.scipy.org/, 2001–.
[39] LI, Y., CHEN, B., CHANDRAMOHAN, M., LIN, S.-W., LIU, Y., AND
TIU, A. Steelix: Program-state based binary fuzzing. In Joint Meeting
on Foundations of Software Engineering (2017).
[40] LLVM PROJECT. Clang: a C language family frontend for LLVM.
https://clang.llvm.org/.
[41] MATSUMOTO, Y. mruby. http://mruby.org/.
[42] MICROSOFT.
ChakraCore.
ChakraCore.
https://github.com/Microsoft/
[43] MOZILLA FOUNDATION / MOZILLA CORPORATION.
Spider-
Monkey. https://developer.mozilla.org/en-US/docs/Mozilla/
Projects/SpiderMonkey.
[44] NIEMETZ, A., PREINER, M., AND BIERE, A. Boolector 2.0 system
description. Journal on Satisﬁability, Boolean Modeling and Computa-
tion 9 (2015), 53–58.
[45] OPENRCE. Sulley: A pure-python fully automated and unattended
fuzzing framework. https://github.com/OpenRCE/sulley.
[46] PADHYE, R., LEMIEUX, C., SEN, K., PAPADAKIS, M., AND TRAON,
Y. L. Zest: Validity fuzzing and parametric generators for effective
random testing. arXiv preprint arXiv:1812.00078 (2018).
[47] PENG, H., SHOSHITAISHVILI, Y., AND PAYER, M. T-Fuzz: fuzzing
In IEEE Symposium on Security and
by program transformation.
Privacy (2018).
[48] PHAM, V.-T., BÖHME, M., SANTOSA, A. E., C ˘ACIULESCU, A. R.,
AND ROYCHOUDHURY, A. Smart greybox fuzzing, 2018.
[49] PYTHON SOFTWARE FOUNDATION.
www.python.org/.
Python.
https://
[50] RAWAT, S., JAIN, V., KUMAR, A., COJOCAR, L., GIUFFRIDA, C.,
AND BOS, H. VUzzer: Application-aware evolutionary fuzzing. In
Symposium on Network and Distributed System Security (NDSS) (Feb.
2017).
[51] REBERT, A., CHA, S. K., AVGERINOS, T., FOOTE, J. M., WARREN,
D., GRIECO, G., AND BRUMLEY, D. Optimizing seed selection for
fuzzing. In USENIX Security Symposium (2014).
[52] RUDERMAN, J. Introducing jsfunfuzz. http://www.squarefree.com/
2007/08/02/introducing-jsfunfuzz (2007).
USENIX Association
28th USENIX Security Symposium    2001
A Statistics on Basic Block Coverage
Table 7: Statistics on basic block coverage for tested fuzzers. In the column “Best Coverage”, we provide the highest number of basic blocks a run found and the
percentage relative to the number of basic blocks obtained from IDA Pro [30].
Target
Best Coverage (#BBS / %)
Fuzzer
Mean (%) Median (%) Median (#BBs)
Std
Deviation
mruby
20258 / 70.5%
TCC
PHP
9211 / 77.6%
46805 / 27.9%
Boolector
23207 / 33.1%
Lua
6205 / 64.1%
libxml
10437 / 13.2%
SQLite
22031 / 57.1%
NASM
10015 / 51.1%
GRIMOIRE
AFL
ANGORA
QSYM
REDQUEEN
GRIMOIRE
AFL
ANGORA
QSYM
REDQUEEN
GRIMOIRE
AFL
ANGORA
QSYM
REDQUEEN
GRIMOIRE
AFL
ANGORA
QSYM
REDQUEEN
GRIMOIRE
AFL
ANGORA
QSYM
REDQUEEN
GRIMOIRE
AFL
ANGORA
QSYM
REDQUEEN
GRIMOIRE
AFL
ANGORA
QSYM
REDQUEEN
GRIMOIRE
AFL
ANGORA
QSYM
REDQUEEN
66.1%
53.7%
53.3%
49.2%
45.9%
71.8%
11.8%
31.0%
11.9%
56.7%
20.8%
13.2%
12.1%
12.7%
14.5%
25.2%
14.0%
13.2%
13.7%
13.3%
54.4%
51.9%
59.9%
54.8%
44.5%
11.7%
11.1%
0.0%
10.8%
10.1%
48.6%
34.6%
33.1%
33.4%
32.3%
47.7%
43.2%
46.9%
42.1%
44.9%
66.6%
53.4%
53.8%
49.0%
46.4%
72.9%
11.8%
30.3%
11.8%
56.4%
21.2%
13.3%
12.2%
12.7%
14.5%
24.9%
14.0%
12.8%
14.0%
13.3%
55.2%
51.9%
60.1%
52.6%
44.4%
11.6%
11.2%
0.0%
10.8%
10.1%
46.8%
33.9%
34.2%
33.6%
32.6%
48.4%
43.0%
47.0%
42.6%
45.5%
19137
15355
15452
14084
13339
8647
1397
3600
1403
6695
35606
22323
20501
21276
24367
17461
9790
8986
9782
9305
5339
5016
5817
5091
4299
9190
8881
0
8598
7979
18064
13072
13218
12988
12599
9483
8442
9211
8357
8928
4.55
4.28
4.87
2.20
4.64
5.71
3.80
6.51
3.26
8.13
20.26
3.64
6.39
2.60
1.87
16.77
7.46
9.20
6.94
9.63
6.47
1.61
2.96
9.52
2.30
5.52
3.40
nan
2.36
3.72
9.25
10.02
12.12
10.91
4.77
7.58
1.68
5.27
4.72
4.21
Skewness Kurtosis
−0.54
−0.76
−0.27
0.14
−0.96
0.17
0.95
0.33
−0.98
0.05
−1.89
3.68
1.14
1.27
0.06
1.01
1.52
2.59
−1.93
0.03
−1.38
0.12
−0.96
−0.09
−0.58
−0.37
−1.11
0.22
−0.83
0.37
−0.65
0.51
−0.57
0.30
−0.17
0.79
−1.24
−0.39
−1.23
0.21
−0.73
0.20
−0.15
0.84
−1.39
0.05
−0.65
1.07
−1.19
−0.30
0.02
0.98
−0.39
−0.92
−3.00
0.00
1.45
0.95
−0.25
0.72
−0.72
0.80
−0.34
0.60
−1.05
−0.30
−0.33
−0.18
−0.21
0.18
−2.58
5.67
1.07
1.09
−1.19
0.06
−1.49
2.40
−0.89
−0.20
2002    28th USENIX Security Symposium
USENIX Association