以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[63] YANG, X., CHEN, Y., EIDE, E., AND REGEHR, J. (2011). Finding and Understanding Bugs in C Compilers. *ACM SIGPLAN Notices*, 46(6), 283–294.

[64] YUN, I., LEE, S., XU, M., JANG, Y., AND KIM, T. (2018). QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In *USENIX Security Symposium*, pp. 745–761.

[65] ZALEWSKI, M. American Fuzzy Lop. Retrieved from http://lcamtuf.coredump.cx/afl/

[66] ZALEWSKI, M. Technical “Whitepaper” for AFL-Fuzz. Retrieved from http://lcamtuf.coredump.cx/afl/technical_details.txt

[67] ZHAO, L., DUAN, Y., YIN, H., AND XUAN, J. (2019). Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing. In *Symposium on Network and Distributed System Security (NDSS)*.

[28] HAN, H., OH, D., AND CHA, S. K. (2019). CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines. In *Symposium on Network and Distributed System Security (NDSS)*.

[29] HELIN, A. A General-Purpose Fuzzer. Retrieved from https://github.com/aoh/radamsa

[30] HEX-RAYS. IDA Pro. Retrieved from https://www.hex-rays.com/products/ida/

[31] HIPP, D. R. SQLite. Retrieved from https://www.sqlite.org/index.html

[32] HOCEVAR, S. zzuf. Retrieved from https://github.com/samhocevar/zzuf

[33] HOLLER, C., HERZIG, K., AND ZELLER, A. (2012). Fuzzing with Code Fragments. In *USENIX Security Symposium*.

[34] HÖSCHELE, M., AND ZELLER, A. (2016). Mining Input Grammars from Dynamic Taints. In *Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering*.

[35] HSU, C.-C., WU, C.-Y., HSIAO, H.-C., AND HUANG, S.-K. (2018). INSTRIM: Lightweight Instrumentation for Coverage-Guided Fuzzing. In *Symposium on Network and Distributed System Security (NDSS), Workshop on Binary Analysis Research*.

[36] IERUSALIMSCHY, R., CELES, W., AND DE FIGUEIREDO, L. H. Lua. Retrieved from https://www.lua.org/

[37] JOHNSON, S. Yacc: Yet Another Compiler-Compiler. Retrieved from http://dinosaur.compilertools.net/yacc/

[38] JONES, E., OLIPHANT, T., AND PETERSON, P. (2001–). Scipy: Open Source Scientific Tools for Python. Retrieved from http://www.scipy.org/

[39] LI, Y., CHEN, B., CHANDRAMOHAN, M., LIN, S.-W., LIU, Y., AND TIU, A. (2017). Steelix: Program-State Based Binary Fuzzing. In *Joint Meeting on Foundations of Software Engineering*.

[40] LLVM PROJECT. Clang: A C Language Family Frontend for LLVM. Retrieved from https://clang.llvm.org/

[41] MATSUMOTO, Y. mruby. Retrieved from http://mruby.org/

[42] MICROSOFT. ChakraCore. Retrieved from https://github.com/Microsoft/ChakraCore

[43] MOZILLA FOUNDATION / MOZILLA CORPORATION. SpiderMonkey. Retrieved from https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey

[44] NIEMETZ, A., PREINER, M., AND BIERE, A. (2015). Boolector 2.0 System Description. *Journal on Satisfiability, Boolean Modeling and Computation*, 9, 53–58.

[45] OPENRCE. Sulley: A Pure-Python Fully Automated and Unattended Fuzzing Framework. Retrieved from https://github.com/OpenRCE/sulley

[46] PADHYE, R., LEMIEUX, C., SEN, K., PAPADAKIS, M., AND TRAON, Y. L. (2018). Zest: Validity Fuzzing and Parametric Generators for Effective Random Testing. arXiv preprint arXiv:1812.00078.

[47] PENG, H., SHOSHITAISHVILI, Y., AND PAYER, M. (2018). T-Fuzz: Fuzzing by Program Transformation. In *IEEE Symposium on Security and Privacy*.

[48] PHAM, V.-T., BÖHME, M., SANTOSA, A. E., CĂCIULESCU, A. R., AND ROYCHOUDHURY, A. (2018). Smart Greybox Fuzzing.

[49] PYTHON SOFTWARE FOUNDATION. Python. Retrieved from https://www.python.org/

[50] RAWAT, S., JAIN, V., KUMAR, A., COJOCAR, L., GIUFFRIDA, C., AND BOS, H. (2017). VUzzer: Application-Aware Evolutionary Fuzzing. In *Symposium on Network and Distributed System Security (NDSS)*.

[51] REBERT, A., CHA, S. K., AVGERINOS, T., FOOTE, J. M., WARREN, D., GRIECO, G., AND BRUMLEY, D. (2014). Optimizing Seed Selection for Fuzzing. In *USENIX Security Symposium*.

[52] RUDERMAN, J. (2007). Introducing jsfunfuzz. Retrieved from http://www.squarefree.com/2007/08/02/introducing-jsfunfuzz

### 表7：测试模糊器的基本块覆盖率统计

| 目标 | 最佳覆盖率（基本块数 / 百分比） | 模糊器 | 平均值 (%) | 中位数 (%) | 中位数 (#BBS) | 标准差 |
|------|---------------------------------|--------|------------|------------|---------------|--------|
| mruby | 20258 / 70.5%                   | TCC    | 66.1%      | 71.8%      | 19137         | 4.55   |
| PHP   | 9211 / 77.6%                    | Boolector | 53.7%      | 11.8%      | 15355         | 4.28   |
|      | 46805 / 27.9%                   |        |            |            |               |        |
| Lua   | 6205 / 64.1%                    | AFL    | 53.3%      | 31.0%      | 15452         | 4.87   |
| libxml| 10437 / 13.2%                   | ANGORA | 49.2%      | 11.9%      | 14084         | 2.20   |
| SQLite| 22031 / 57.1%                   | QSYM   | 45.9%      | 56.7%      | 13339         | 4.64   |
| NASM  | 10015 / 51.1%                   | REDQUEEN | 66.6%      | 11.8%      | 8647          | 5.71   |

注：表中列出了每个目标在不同模糊器下的最佳覆盖率、平均值、中位数和标准差。

---

希望这些改进对您有所帮助！如果还有其他需要优化的地方，请告诉我。