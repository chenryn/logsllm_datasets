    - All stopped containers
    - All networks not used by at least one container
    - All images without at least one container associated to them
    - All build cache
    Sometimes that's not enough, and your `/var/lib/docker` directory still weights
    more than it should. In those cases:
    - Stop the `docker` service.
    - Remove or move the data to another directory
    - Start the `docker` service.
    In order not to loose your persisted data, you need to configure your dockers to
    mount the data from a directory that's not within `/var/lib/docker`.
* New: [Download TS streams.](linux_snippets.md#download-ts-streams)
    Some sites give stream content with small `.ts` files that you can't download
    directly. Instead open the developer tools, reload the page and search for
    a request with extension `.m3u8`, that gives you the playlist of all the chunks
    of `.ts` files. Once you have that url you can use `yt-dlp` to download it.
### [qBittorrent](qbittorrent.md)
* New: Introduce qBittorrent.
    [qBittorrent](https://www.qbittorrent.org/) is [my chosen](torrents.md) client
    for [Bittorrent](https://en.wikipedia.org/wiki/BitTorrent).
    Some interesting sections added:
    * [Migration from other client](qbittorrent.md#Migration-from-other-client)
    * [Python interaction](qbittorrent.md#Python-interaction)
    * [Monitorization](qbittorrent.md#Monitorization)
    * [Automatic operation](qbittorrent.md#Automatic-operation)
### [aleph](rtorrent.md)
* New: Debug rtorrent docker problems.
* New: Introduce Aleph.
    [Aleph](https://github.com/alephdata/aleph) is a tool for indexing large amounts
    of both documents (PDF, Word, HTML) and structured (CSV, XLS, SQL) data for easy
    browsing and search. It is built with investigative reporting as a primary use
    case. Aleph allows cross-referencing mentions of well-known entities (such as
    people and companies) against watchlists, e.g. from prior research or public
    datasets.
* New: [Problems accessing redis locally.](aleph.md#problems-accessing-redis-locally)
    If you're with the VPN connected, turn it off.
* New: [PDB behaves weird.](aleph.md#pdb-behaves-weird)
    Sometimes you have two traces at the same time, so each time you run a PDB
    command it jumps from pdb trace. Quite confusing. Try to `c` the one you don't
    want so that you're left with the one you want. Or put the `pdb` trace in a
    conditional that only matches one of both threads.
### [Anki](anki.md)
* New: Introduce Anki.
    [Anki](https://apps.ankiweb.net/) is a program which makes remembering things
    easy. Because it's a lot more efficient than traditional study methods, you can
    either greatly decrease your time spent studying, or greatly increase the amount
    you learn.
    Anyone who needs to remember things in their daily life can benefit from Anki.
    Since it is content-agnostic and supports images, audio, videos and scientific
    markup (via LaTeX), the possibilities are endless.
* New: [Interacting with python.](anki.md#interacting-with-python)
    Although there are some python libraries:
    * [genanki](https://github.com/kerrickstaley/genanki)
    * [py-anki](https://pypi.org/project/py-anki/)
    I think the best way is to use [AnkiConnect](https://foosoft.net/projects/anki-connect/)
    The installation process is similar to other Anki plugins and can be accomplished in three steps:
    * Open the *Install Add-on* dialog by selecting *Tools | Add-ons | Get
        Add-ons...* in Anki.
    * Input `2055492159` into the text box labeled *Code* and press the *OK* button to
        proceed.
    * Restart Anki when prompted to do so in order to complete the installation of
        Anki-Connect.
    Anki must be kept running in the background in order for other applications to
    be able to use Anki-Connect. You can verify that Anki-Connect is running at any
    time by accessing `localhost:8765` in your browser. If the server is running, you
    will see the message Anki-Connect displayed in your browser window.
* New: [Use anki connect with python.](anki.md#usage)
### [ferdium](ferdium.md)
* New: Introduce ferdium.
    [Ferdium](https://ferdium.org) is a desktop application to have all your
    services in one place. It's similar to Rambox, Franz or Ferdi only that it's
    maintained by the community and respects your privacy.
### [finnix](finnix.md)
* New: Introduce finnix.
    [Finnix](https://www.finnix.org/) is a live Linux distribution specialized in
    the recovery, maintenance, testing of systems.
### [Github cli](gh.md)
* New: [Trigger a workflow run.](gh.md#trigger-a-workflow-run)
    To manually trigger a workflow you need to first configure it to allow
    [`workflow_dispatch`
    events](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch).
    ```yaml
    on:
        workflow_dispatch:
    ```
    Then you can trigger the workflow with `gh workflow run {{ workflow_name }}`,
    where you can get the `workflow_name` with `gh workflow list`
### [goaccess](goaccess.md)
* New: Introduce goaccess.
    [goaccess](https://goaccess.io/) is a fast terminal-based log analyzer.
    Its core idea is to quickly analyze and view web server statistics in real time
    without needing to use your browser (great if you want to do a quick analysis of
    your access log via SSH, or if you simply love working in the terminal).
    While the terminal output is the default output, it has the capability to
    generate a complete, self-contained real-time HTML report (great for analytics,
    monitoring and data visualization), as well as a JSON, and CSV report.
### [i3wm](i3wm.md)
* New: Introduce i3wm.
    [i3](https://i3wm.org/) is a tiling window manager.
* New: [Layout saving.](i3wm.md#layout-saving)
    Layout saving/restoring allows you to load a JSON layout file so that you can
    have a base layout to start working with after powering on your computer.
    First of all arrange the windows in the workspace, then you can save the layout
    of either a single workspace or an entire output:
    ```bash
    i3-save-tree --workspace "1: terminal" > ~/.i3/workspace-1.json
    ```
    You need to open the created file and remove the comments that match the desired
    windows under the `swallows` keys, so transform the next snippet:
    ```json
        ...
        "swallows": [
            {
            //  "class": "^URxvt$",
            //  "instance": "^irssi$"
            }
        ]
        ...
    ```
    Into:
    ```json
        ...
        "swallows": [
            {
                "class": "^URxvt$",
                "instance": "^irssi$"
            }
        ]
        ...
    ```
    Once is ready close all the windows of the workspace you want to restore (moving
    them away is not enough!).
    Then on a terminal you can restore the layout with:
    ```bash
    i3-msg 'workspace "1: terminal"; append_layout ~/.i3/workspace-1.json'
    ```
    !!! warning "It's important that you don't use a relative path"
        Even if you're in `~/.i3/` you have to use `i3-msg append_layout
        ~/.i3/workspace-1.json`.
    This command will create some fake windows (called placeholders) with the layout you had before, `i3`
    will then wait for you to create the windows that match the selection criteria.
    Once they are, it will put them in their respective placeholders.
    If you wish to create the layouts at startup you can add the next snippet to
    your i3 config.
    ```
    exec --no-startup-id "i3-msg 'workspace \"1: terminal\"; append_layout ~/.i3/workspace-1.json'"
    ```
### [ffmpeg](ffmpeg.md)
* New: [Convert VOB to mkv.](ffmpeg.md#convert-vob-to-mkv)
    * Unify your VOBs
        ```bash
        cat *.VOB > output.vob
        ```
    * Identify the streams
        ```bash
        ffmpeg -analyzeduration 100M -probesize 100M -i output.vob
        ```
        Select the streams that you are interested in, imagine that is 1, 3, 4,
        5 and 6.
    * Encoding
        ```bash
        ffmpeg \
          -analyzeduration 100M -probesize 100M \
          -i output.vob \
          -map 0:1 -map 0:3 -map 0:4 -map 0:5 -map 0:6 \
          -metadata:s:a:0 language=ita -metadata:s:a:0 title="Italian stereo" \
          -metadata:s:a:1 language=eng -metadata:s:a:1 title="English stereo" \
          -metadata:s:s:0 language=ita -metadata:s:s:0 title="Italian" \
          -metadata:s:s:1 language=eng -metadata:s:s:1 title="English" \
          -codec:v libx264 -crf 21 \
          -codec:a libmp3lame -qscale:a 2 \
          -codec:s copy \
          output.mkv
        ```
### [Khal](khal.md)
* New: Introduce khal.
    [`khal`](https://khal.readthedocs.io/en/latest/index.html) is a standards based
    Python CLI (console) calendar program, able to synchronize with [CalDAV](http://en.wikipedia.org/wiki/CalDAV) servers through
    [`vdirsyncer`](vdirsyncer.md).
    Features:
    * Can read and write events/icalendars to vdir, so [`vdirsyncer`](vdirsyncer.md)
        can be used to synchronize calendars with a variety of other programs, for
        example CalDAV servers.
    * Fast and easy way to add new events
    * `ikhal` (interactive `khal`) lets you browse and edit calendars and events.
    Limitations:
    * Only rudimentary support for creating and editing recursion rules
    * You cannot edit the timezones of events
* New: [Edit the events in a more pleasant way.](khal.md#edit-the-events-in-a-more-pleasant-way)
    The `ikhal` event editor is not comfortable for me. I usually only change the
    title or the start date and in the default interface you need to press many
    keystrokes to make it happen.
    A patch solution is to pass a custom script on the `EDITOR` environmental
    variable. Assuming you have [`questionary`](questionary.md) and [`ics`](ics.md)
    installed you can save the next snippet into an `edit_event` file in your
    `PATH`:
    ```python
    """Edit an ics calendar event."""
    import sys
    import questionary
    from ics import Calendar
    file = sys.argv[1]
    with open(file, "r") as fd:
        calendar = Calendar(fd.read())
    event = list(calendar.timeline)[0]
    event.name = questionary.text("Title: ", default=event.name).ask()
    start = questionary.text(
        "Start: ",
        default=f"{str(event.begin.hour).zfill(2)}:{str(event.begin.minute).zfill(2)}",
    ).ask()
    event.begin = event.begin.replace(
        hour=int(start.split(":")[0]), minute=int(start.split(":")[1])
    )
    with open(file, "w") as fd:
        fd.writelines(calendar.serialize_iter())
    ```
    Now if you open `ikhal` as `EDITOR=edit_event ikhal`, whenever you edit one
    event you'll get a better interface. Add to your `.zshrc` or `.bashrc`:
    ```bash
    alias ikhal='EDITOR=edit_event ikhal'
    ```
    The default keybinding for the edition is not very comfortable either, add the
    next snippet on your config:
    ```ini
    [keybindings]
    external_edit = e
    export = meta e
    ```
### [LUKS](luks.md)
* New: [Break a luks password.](luks.md#break-a-luks-password)
    You can use [`bruteforce-luks`](https://github.com/glv2/bruteforce-luks)
### [Pipx](pipx.md)
* New: Introduce pipx.
    [Pipx](https://pypa.github.io/pipx/) is a command line tool to install and run
    Python applications in isolated environments.
    Very useful not to pollute your user or device python environments.
    Install it with:
    ```bash
    pip install pipx
    ```
### [Profanity](profanity.md)
* New: Introduce profanity.
    [profanity](https://profanity-im.github.io/) is a console based XMPP client
    written in C using ncurses and libstrophe, inspired by Irssi.
### [Libreelec](libreelec.md)
* New: Introduce LibreElec.
    LibreElec is the lightweight distribution to run Kodi
### [Torrents](torrents.md)
* New: Compare the different torrent clients.
    [BitTorrent](https://en.wikipedia.org/wiki/BitTorrent) is a communication
    protocol for peer-to-peer file sharing (P2P), which enables users to distribute
    data and electronic files over the Internet in a decentralized manner.
    Each of us seeks something different for a torrent client, thus there is a wide
    set of software, you just need to find the one that's best for you. In my case
    I'm searching for a client that:
    - Scales well for many torrents
    - Is robust
    - Is maintained
    - Is popular
    - Is supported by the private trackers: Some torrent clients are banned by the
      tracker because they don't report correctly to the tracker when
      canceling/finishing a torrent session. If you use them then a few MB may not
      be counted towards the stats near the end, and torrents may still be listed in
      your profile for some time after you have closed the client. Each tracker has
      their list of allowed clients. Make sure to check them.
      Also, clients in alpha or beta versions should be avoided.
    - Can be easily monitored
    - Has a Python library or an API to interact with
    - Has clear and enough logs
    - Has RSS support
    - Has a pleasant UI
    - Supports categories
    - Can unpack content once it's downloaded
    - No ads
    - Easy to use behind a VPN with IP leakage protection.