---
author: Moshe Zadka
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2525
date: '2022-08-02 11:57:17'
editorchoice: false
excerpt: 学习为什么 Python 中的可观测性很重要，以及如何在你的软件开发生命周期中实现它。
fromurl: https://opensource.com/article/21/11/observability-python
id: 14889
islctt: true
largepic: /data/attachment/album/202208/02/115713cbml51nooltb21bx.jpg
permalink: /article-14889-1.html
pic: /data/attachment/album/202208/02/115713cbml51nooltb21bx.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 学习为什么 Python 中的可观测性很重要，以及如何在你的软件开发生命周期中实现它。
tags:
- Python
- 可观测性
thumb: false
title: Python 中可观测性的 7 个关键部分
titlepic: true
translator: Yufei-Yan
updated: '2022-08-02 11:57:17'
---
> 
> 学习为什么 Python 中的可观测性很重要，以及如何在你的软件开发生命周期中实现它。
> 
> 
> 
![](/data/attachment/album/202208/02/115713cbml51nooltb21bx.jpg "Searching for code")
你写的应用会执行很多代码，而且是以一种基本上看不到的方式执行。所以你是怎么知道：
* 代码是否在运行？
* 是不是在正常工作？
* 谁在使用它，如何使用？
可观测性是一种能力，可以通过查看数据来告诉你，你的代码在做什么。在这篇文章中，主要关注的问题是分布式系统中的服务器代码。并不是说客户端应用代码的可观测性不重要，只是说客户端往往不是用 Python 写的。也不是说可观测性对数据科学不重要，而是在数据科学领域的可观测性工具（大多是 Juptyter 和快速反馈）是不同的。
### 为什么可观测性很重要
所以，为什么可观测性重要呢？在软件开发生命周期（SDLC）中，可观测性是一个关键的部分。
交付一个应用不是结束，这只是一个新周期的开始。在这个周期中，第一个阶段是确认这个新版本运行正常。否则的话，很有可能需要回滚。哪些功能正常运行？哪些功能有细微的错误？你需要知道发生了什么，才能知道接下来要怎么做。这些东西有时候会以奇怪的方式不能正常运行。不管是天灾，还是底层基础设施的问题，或者应用进入了一种奇怪的状态，这些东西可能在任何时间以任何理由停止工作。
在标准 SDLC 之外，你需要知道一切都在运行中。如果没有，有办法知道是怎么不能运行的，这是非常关键的。
### 反馈
可观测性的第一部分是获得反馈。当代码给出它正在做什么的信息时，反馈可以在很多方面提供帮助。在模拟环境或测试环境中，反馈有助于发现问题，更重要的是，以更快的方式对它们进行分类。这可以改善在验证步骤中的工具和交流。
当进行 金丝雀部署   canary deployment 或更改特性标志时，你需要知道是否要继续，还是等更长时间，或者回滚，反馈就显得很重要了。
### 监控
有时候你怀疑有些东西不太对。也许是一个依赖服务有问题，或者是社交网站爆出了大量你的网站的问题。也许在相关的系统中有复杂的操作，然后你想确保你的系统能完美处理。在这些情况下，你就想把可观测性系统的数据整合到控制面板上。
当写一个应用的时候，这些控制面板需要是设计标准的一部分。只有当你的应用能把数据共享给这些控制面板，它们才会把这些数据显示出来。
### 警报
看控制面板超过 15 分钟就像看着油漆变干一样。任何人都不应该遭受这种折磨。对于这种任务，我们要有报警系统。报警系统将可观测性数据与预期数据进行对比，当它们不匹配的时候就发出通知。完全深入研究时间管理超出了本文的范围。然而，从两方面来说，可观测应用是 报警友好的   alert-friendly ：
* 它们有足够多，足够好的数据，发出的警报才是高质量的。
* 警报有足够的数据，或者接收者可以很容易的得到数据，这样有助于找到源头。
高质量警报有三个特点：
* 较少的错报：如果有警报，那一定是有问题了。
* 较少的漏报：如果有问题，那一定有警报触发。
* 及时性：警报会迅速发出以减少恢复时间。
这三个特点是互相有冲突的。你可以通过提高监测的标准来减少错误警报，代价是增加了漏报。你也可以通过降低监测的门槛来减少漏报，代价是增加错报。通过收集更多数据，你也可以同时减少错报和漏报，而代价是降低了及时性。
同时改善这三个参数就更难了。这就要求高质量的可观测性数据。更高质量的数据可以同时改善这三个特点。
### 日志
有的人喜欢嘲笑用打印来调试的方法。但是，在一个大多数软件都不在你本机运行的世界里，你所能做的只有打印调试。日志记录就是打印调试的一种形式。尽管它有很多缺点，但 Python 日志库提供了标准化的日志记录。更重要的是，它意味着你可以通过这些库去记录日志。
应用程序要负责配置日志的记录方式。讽刺地是，在应用程序对配置日志负责了多年以后，现在越来越不是这样了。在现代容器 编排   orchestration    环境中，现代应用程序记录标准错误和标准输出，并且信任     编排       orchestration          系统可以合理的处理日志。      
然而，你不应该依赖库，或者说，其他任何地方。如果你想让操作的人知道发生了什么，*使用日志，而不是打印*。
#### 日志级别
日志记录的一个最重要功能就是 *日志级别*。不同的日志级别可以让你合理的过滤并分流日志。但是这只有在日志级别保持一致的情况下才能做到。最后，你应该在整个应用程序中保持日志级别的一致性。
选择不兼容语义的库可以通过在应用层面的适当配置来追溯修复，这只需要通过使用 Python 中最重要的通用风格做到：`getLogger(__name-_)`。
大多数合理的库都会遵循这个约定。 过滤器   Filters 可以在日志对象发出之前就地修改它们。你可以给处理程序附加一个过滤器，这个处理程序会根据名称修改消息，使其具有合适的级别。