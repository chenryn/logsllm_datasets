Then move on to Domain 3.
1. You are performing a security audit for a customer. During the audit, you find several instances of users gaining
access to data without going through a formal access approval process. As part of the remediation, you recommend
establishing a formal access approval process. Which role should you list to approve policies that dictate which
users can gain access to data?
a. Data creator
b. Data processor
c. Data custodian
d. Data owner
e. System owner
2. Your organization has a goal to maximize the protection of organizational data. You need to recommend 3 methods
to minimize data remanence in the organization. Which 3 of the following methods should you recommend?
a. Formatting volumes
b. Overwriting of data
c. Data encryption
d. Degaussing
e. Physical destruction
3. You are preparing to build a hybrid cloud environment for your organization. Three vendors present their proposed
solution. Which methodology should your team use to select the best solution?
a. Standards selection
b. Standards deviation
c. Vendor screening
d. Vendor reviewing
28
Answers to Domain 2 Review Questions
1. Answer: D
Explanation: Each data owner is responsible for approving access to data that they own. This is typically handled
via approving data access policies that are then implemented by the operations team. As part of a formal access
approval process, a data owner should be the ultimate person responsible for the data access.
2. Answer: B, D, E
Explanation: When you perform a typical operating system deletion, the data remains on the media but the space
on the media is marked as available. Thus, the data is often recoverable. There are 3 established methods for
preventing data recovery: overwriting the data (sometimes referred to as a “secure deletion” or “wiping”),
degaussing with magnets and physical destruction.
Formatting a volume does not render data unrecoverable, and neither does data encryption (if somebody had the
decryption key, the data is at risk).
3. Answer: A
Explanation: In this scenario, your goal is to evaluate the solutions presented, not the vendors, so you should use
a standards selection process. This will enable the team to select the solution that best fits the organization’s needs.
While a vendor selection process is part of engaging with a vendor, this scenario specifically calls for the evaluation
of the solutions.
29
Domain 3. Security Architecture and
Engineering
This domain is more technical than some of the others. If you already work in a security engineering role, then you have an
advantage in this domain. If you don’t, allocate extra time to be sure you have a firm understanding of the topics. Note that
some of the concepts in this domain are foundational in nature, so you’ll find aspects of them throughout the other
domains.
3.1 Implement and manage engineering processes using secure design
principles
When managing projects or processes, you need to use proven principles to ensure you end up with a functional solution
that meets or exceed the requirements, stays within the budget, and does not introduce unnecessary risk to the
organization. The following are the high-level phases of a project:
 Idea or concept. You might want to create an app or a new web site, or deploy a new on-premises virtualized
infrastructure. At this stage, the priority is to stay at a high level, without details. You need to document what the
idea or concept will amount to. For example, you want to develop an app that will enable customers to schedule
appointments, manage their accounts and pay their bills.
 Requirements. It is important to document all the requirements from the various business units and stakeholders.
Establish both functional requirements (for example, the app will enable users to pay bills by taking a picture of
their credit card) and non-functional requirements (for example, the app must be PCI DSS compliant).
 Design. Next, establish a design to meet the requirements. A design cannot be completed without all requirements.
For example, to know how robust an infrastructure to design, you need to know how many users need to use the
system simultaneously. Part of the design phase must be focused around security. For example, you must account
for the principle of least privilege, fail-safe defaults and segregation of duties.
 Develop and implement in a non-production environment. In this phase, you create and deploy hardware,
software and code as applicable for your project into a non-production environment (typically a development
environment).
 Initial testing. Teams test the non-production implementation. The goal is to find and eliminate major bugs,
missing functionality and other issues. It is common to go back to the previous phase to make necessary changes.
Occasionally, you might have to even go back to the design phase.
 Implementation. Once all requirements have been met and the team is satisfied, you can move to a quality
assurance (QA) environment. There, you’ll repeat the “develop and implement” phase and the testing phase. Then
you will move the app or service to the production environment.
 Support. After you implement your solution, you must operationalize it. Support teams and escalation paths
should have been identified as part of the design.
There are many other phases, such as user training, communication and compliance testing. Remember that skipping any
of these steps reduces the chances of having a successful and secure solution.
30
3.2 Understand the fundamental concepts of security models
Security models enable people to access only the data classified for their clearance level. There are many models. We will
cover Bell-LaPadula and Biba, both of which use mathematical formulas. You don’t need to know the formulas or other
details for the exam, but you should be familiar with the models and their pros and cons.
 Bell-LaPadula. This model was established in 1973 for the United States Air Force. It focuses on confidentiality.
The goal is to ensure that information is exposed only to those with the right level of classification. For example, if
you have a Secret clearance, you can read data classified as Secret, but not Top Secret data. This model has a “no
read up” (users with a lower clearance cannot read data classified at a higher level) and a “no write down” (users
with a clearance higher than the data cannot modify that data) methodology. Notice that Bell-LaPadula doesn’t
address “write up,” which could enable a user with a lower clearance to write up to data classified at a higher level.
To address this complexity, this model is often enhanced with other models that focus on integrity. Another
downside to this model is that it doesn’t account for covert channels. A covert channel is a way of secretly sending
data across an existing connection. For example, you can send a single letter inside the IP identification header.
Sending a large message is slow. But often such communication isn’t monitored or caught.
 Biba. Released in 1977, this model was created to supplement Bell-LaPadula. Its focus is on integrity. The
methodology is “no read down” (for example, users with a Top Secret clearance can’t read data classified as Secret)
and “no write up” (for example, a user with a Secret clearance can’t write data to files classified as Top Secret). By
combining it with Bell-LaPadula, you get both confidentiality and integrity.
There are other models; for example, the Clark-Wilson model also focuses on integrity.
3.3 Select controls based upon systems security requirements
For this section of the exam, you should be familiar with the Common Criteria for Information Technology Security
Evaluation. The Common Criteria (CC) unifies older standards (CTCPEC, ITSEC and TCSEC) to provide a standard to evaluate
systems against. CC evaluations are focused on security-related systems and products. The important concepts for this
section are:
 To perform an evaluation, you need to select the target of evaluation (TOE). This might be a firewall or an antimalware app.
 The evaluation process will look at the protection profile (PP), which is a document that outlines the security needs.
A vendor might opt to use a specific protection profile for a particular solution.
 The evaluation process will look at the security target (ST), which identifies the security properties for the TOE. The
ST is usually published to customers and partners and available to internal staff.
 The evaluation will attempt to gauge the confidence level of a security feature. Security assurance requirements
(SARs) are documented and based on the development of the solution. Key actions during development and testing
should be captured along the way. An evaluation assurance level (EAL) is a numerical rating used to assess the rigor
of an evaluation. The scale is EAL 1 (cheap and easy) to EAL7 (expensive and complex).
31
3.4 Understand the security capabilities of information systems
This section focuses on the capabilities of specific computing components. Thus, it isn’t a section where hands-on
experience can give you an advantage. Some of these components are discussed in other sections, sometimes in more
detail. Ensure that you are familiar with all the information in this section. For any topic in this section that is new to you,
plan to dive deeper into the topic outside of this study guide.
 Memory protection. At any given time, a computing device might be running multiple applications and services.
Each one occupies a segment of memory. The goal of memory protection is to prevent one application or service
from impacting another application or service. There are two popular memory protection methods:
 Process isolation. Virtually all modern operating systems provide process isolation, which prevents one
process from impacting another process.
 Hardware segmentation. Hardware isolation is stricter than process isolation; the operating system maps
processes to dedicated memory locations.
 Virtualization. In virtualized environments, there are special considerations to maximize security. The goal is to
prevent attacks on the hypervisors and ensure that a compromise of one VM does not result in a compromise of
all VMs on the host. Many organizations choose to deploy their high-security VMs to dedicated high-security hosts.
In some cases, organizations have teams (such as the team responsible for identity and access management)
manage their own virtualization environment to minimize the chances of an internal attack.
 Trusted Platform Module. A Trusted Platform Module (TPM) is a cryptographic chip that is sometimes included
with a client computer or server. A TPM expands the capabilities of the computer by offering hardware-based
cryptographic operations. Many security products and encryption solutions require a TPM. For example, BitLocker
Drive Encryption (a built-in volume encryption solution) requires a TPM to maximize the security of the encryption.
 Interfaces. In this context, an interface is the method by which two or more systems communicate. For example,
when an LDAP client communicates with an LDAP directory server, it uses an interface. When a VPN client connects
to a VPN server, it uses an interface. For this section, you need to be aware of the security capabilities of interfaces.
There are a couple of common capabilities across most interfaces:
 Encryption. When you encrypt communications, a client and server can communicate privately without
exposing information over the network. For example, if you use encryption between two email servers,
then the SMTP transactions are encrypted and unavailable to attackers (compared to a default SMTP
transaction which takes place in plain text). In some cases, an interface (such as LDAP) provides a method
(such as LDAPS) for encrypting communication. When an interface doesn’t provide such a capability, then
IPsec or another encrypted transport mechanism can be used.
 Signing. You can also sign communication, whether or not you encrypt the data. Signing communications
tells the receiver, without a doubt, who the sender (client) is. This provides non-repudiation. In a highsecurity environment, you should strive to encrypt and sign all communications, though this isn’t always
feasible.
32
 Fault tolerance. Fault tolerance is a capability used to keep a system available. In the event of an attack (such as
a DoS attack), fault tolerance helps keep a system up and running. Complex attacks can target a system, knowing
that the fallback method is an older system or communication method that is susceptible to attack.
3.5 Assess and mitigate the vulnerabilities of security architectures, designs
and solution elements
This section represents the vulnerabilities present in a plethora of technologies in an environment. You should feel
comfortable reviewing an IT environment, spotting the vulnerabilities and proposing solutions to mitigate them. To do this,
you need to understand the types of vulnerabilities often present in an environment and be familiar with mitigation options.
 Client-based systems. Client computers are the most attacked entry point. An attacker tries to gain access to a
client computer, often through a phishing attack. Once a client computer is compromised, the attacker can launch
attacks from the client computer, where detection is more difficult compared to attacks originating from the
internet. Productivity software (word processors, spreadsheet applications) and browsers are constant sources of
vulnerabilities. Even fully patched client computers are at risk due to phishing and social engineering attacks. To
mitigate client-based issues, you should run a full suite of security software on each client computer, including antivirus, anti-malware, anti-spyware and a host-based firewall.
 Server-based systems. While attackers often target client computer initially, their goal is often gaining access to a
server, from which they can gain access to large amounts of data and potentially every other device on the network.
To mitigate the risk of server-based attacks (whether attacking a server or attacking from a server), you should
patch servers regularly — within days of new patches being released, and even sooner for patches for remote code
execution vulnerabilities. In addition, you should use a hardened operating system image for all server builds. Last,
you should use a host-based firewall to watch for suspicious traffic going to or from servers.
 Database systems. Databases often store a company’s most important and sensitive data, such as credit card
transactions, employees’ personally identifiable information, customer lists, and confidential supplier and pricing
information. Attackers, even those with low-level access to a database, might try to use inference and aggregation
to obtain confidential information. Attackers might also use valid database transactions to work through data using
data mining and data analytics.
 Cryptographic systems. The goal of a well-implemented cryptographic system is to make a compromise too timeconsuming (such as 5,000 years) or too expensive (such as millions of dollars). Each component has vulnerabilities:
 Software. Software is used to encrypt and decrypt data. It can be a standalone application with a graphical
interface, or software built into the operating system or other software. As with any software, there are
sometimes bugs or other issues, so regular patching is important.