                err_msg = "error occurred while starting new thread ('{0}')".format(str(ex)) 
                logger.critical(err_msg) 
                break 
            threads.append(thread) 
        # And wait for them to all finish 
        alive = True 
        while alive: 
            alive = False 
            for thread in threads: 
                if thread.is_alive(): 
                    alive = True 
                    time.sleep(0.1) 
    except KeyboardInterrupt as ex: 
        KB['continue'] = False 
        raise 
    except Exception as ex: 
        logger.error("thread {0}: {1}".format(threading.currentThread().getName(), str(ex))) 
        traceback.print_exc() 
    finally: 
        dataToStdout('\n') 
task_run 运行任务
 W13SCAN/lib/controller/controller.py#L70  
每个 task_run 就是从 KB["task_queue"] 中取task 
然后加锁 拿插件的execute 传入 req和rsp 
poc_module 是从注册的poc里深拷贝出来的 
 poc_module.execute(request, response)  
更新任务数量 完成数+1 任务数-1 
是每个线程就是一个消费者从  task_queue  队列中取任务执行
def task_run(): 
    while KB["continue"] or not KB["task_queue"].empty(): 
        poc_module_name, request, response = KB["task_queue"].get() 
        KB.lock.acquire() 
        KB.running += 1 
        if poc_module_name not in KB.running_plugins: 
            KB.running_plugins[poc_module_name] = 0 
        KB.running_plugins[poc_module_name] += 1 
        KB.lock.release() 
        printProgress() 
        poc_module = copy.deepcopy(KB["registered"][poc_module_name]) 
        poc_module.execute(request, response) 
        KB.lock.acquire() 
        KB.finished += 1 
        KB.running -= 1 
        KB.running_plugins[poc_module_name] -= 1 
        if KB.running_plugins[poc_module_name] == 0: 
            del KB.running_plugins[poc_module_name] 
        KB.lock.release() 
        printProgress() 
    printProgress() 
    # TODO 
    # set task delay 
printProgress 输出目前的扫描任务情况
输出目前的扫描任务情况
def printProgress(): 
    KB.lock.acquire() 
    if conf.debug: 
        # 查看当前正在运行的插件 
        KB.output.log(repr(KB.running_plugins)) 
    msg = '%d success | %d running | %d remaining | %s scanned in %.2f seconds' % ( 
        KB.output.count(), KB.running, KB.task_queue.qsize(), KB.finished, time.time() - KB.start_tim
    _ = '\r' + ' ' * (KB['console_width'][0] - len(msg)) + msg 
    dataToStdout(_) 
    KB.lock.release() 
之前我们看到主被动扫描都是只创建了一个任务  loader  那说明详细的任务创建应该是在这里的
loader插件 主动扫描的解析插件 插件入口
我们去找一下这个插件
 W13SCAN/scanners/loader.py 
可以看到描述
算是一个统一的入口插件 对请求响应解析 
从而调度更多的插件
我们上面看到 task_run  里是调用的  execute  方法
直接看loader是没有这个方法的 那么应该是继承自  PluginBase 
PluginBase 基础插件父类
 W13SCAN/lib/core/plugins.py 
execute 传入req rsp poc主要函数
可以看到execute是对audit的函数进行了一层包装 
根据  conf.retry  进程重试 
如果最后是未知的异常 收集平台信息和报错到 output 
这块信息再看issue的时候看到过 
通过函数  createGithubIssue  会把未知的异常推到w13scan的issue里 
路径在  W13SCAN/lib/core/common.py 
def execute(self, request: FakeReq, response: FakeResp): 
    self.target = '' 
    self.requests = request 
    self.response = response 
    output = None 
    try: 
        output = self.audit() 
    except NotImplementedError: 
        msg = 'Plugin: {0} not defined "{1} mode'.format(self.name, 'audit') 
        dataToStdout('\r' + msg + '\n\r') 
    except (ConnectTimeout, requests.exceptions.ReadTimeout, urllib3.exceptions.ReadTimeoutError, soc
        retry = conf.retry 
        while retry > 0: 
            msg = 'Plugin: {0} timeout, start it over.'.format(self.name) 
            if conf.debug: 
                dataToStdout('\r' + msg + '\n\r') 
            try: 
                output = self.audit() 
                break 
            except ( 
                    ConnectTimeout, requests.exceptions.ReadTimeout, urllib3.exceptions.ReadTimeoutEr
                    socket.timeout): 
                retry -= 1 
            except Exception: 
                return 
        else: 
            msg = "connect target '{0}' failed!".format(self.target) 
            # Share.dataToStdout('\r' + msg + '\n\r') 
    except HTTPError as e: 
        msg = 'Plugin: {0} HTTPError occurs, start it over.'.format(self.name) 
        # Share.dataToStdout('\r' + msg + '\n\r') 
    except ConnectionError: 
        msg = "connect target '{0}' failed!".format(self.target) 
        # Share.dataToStdout('\r' + msg + '\n\r') 
    except requests.exceptions.ChunkedEncodingError: 
        pass 
    except ConnectionResetError: 
        pass 
    except TooManyRedirects as e: 
        pass 
    except NewConnectionError as ex: 
        pass 
    except PoolError as ex: 
        pass 
    except UnicodeDecodeError: 
        # 这是由于request redirect没有处理编码问题，导致一些网站编码转换被报错,又不能hook其中的关键函数 
        # 暂时先pass这个错误 
        # refer：https://github.com/boy-hack/w13scan/labels/Requests%20UnicodeDecodeError 
        pass 
    except UnicodeError: 
        # https://github.com/w-digital-scanner/w13scan/issues/238 
paramsCombination 组合dict参数
,将相关类型参数组合成requests认识的,防止request将参数进行url转义 
把数据按类型与payload进行插入到数据里
        # bypass unicode奇葩错误 
        pass 
    except ( 
            requests.exceptions.InvalidURL, requests.exceptions.InvalidSchema,
            requests.exceptions.ContentDecodingError): 
        # 出现在跳转上的一个奇葩错误，一些网站会在收到敏感操作后跳转到不符合规范的网址，request跟进时就会抛出这
        # refer: https://github.com/boy-hack/w13scan/labels/requests.exceptions.InvalidURL 
        # 奇葩的ContentDecodingError 
        # refer:https://github.com/boy-hack/w13scan/issues?q=label%3Arequests.exceptions.ContentDecod
        pass 
    except KeyboardInterrupt: 
        raise 
    except Exception: 
        errMsg = "W13scan plugin traceback:\n" 
        errMsg += "Running version: {}\n".format(VERSION) 
        errMsg += "Python version: {}\n".format(sys.version.split()[0]) 
        errMsg += "Operating system: {}\n".format(platform.platform()) 
        if request: 
            errMsg += '\n\nrequest raw:\n' 
            errMsg += request.raw 
        excMsg = traceback.format_exc() 
        dataToStdout('\r' + errMsg + '\n\r') 
        dataToStdout('\r' + excMsg + '\n\r') 
        if createGithubIssue(errMsg, excMsg): 
            dataToStdout('\r' + "[x] a issue has reported" + '\n\r') 
    return output 
ResultObject 统一的结果类
返回的 result是  W13SCAN/lib/core/output.py#L119 
def paramsCombination(self, data: dict, place=PLACE.GET, payloads=[], hint=POST_HINT.NORMAL, urlsafe=
    """ 
    组合dict参数,将相关类型参数组合成requests认识的,防止request将参数进行url转义 
    :param data: 
    :param hint: 
    :return: payloads -> list 
    """ 
    result = []
    if place == PLACE.POST: 
        if hint == POST_HINT.NORMAL: 
            for key, value in data.items(): 
                new_data = copy.deepcopy(data) 
                for payload in payloads: 
                    new_data[key] = payload 
                    result.append((key, value, payload, new_data)) 
        elif hint == POST_HINT.JSON: 
            for payload in payloads:
                for new_data in updateJsonObjectFromStr(data, payload): 
                    result.append(('', '', payload, new_data)) 
    elif place == PLACE.GET: 
        for payload in payloads: 
            for key in data.keys(): 
                temp = "" 
                for k, v in data.items(): 
                    if k == key: 
                        temp += "{}={}{} ".format(k, quote(payload, safe=urlsafe), DEFAULT_GET_POST_D
                    else: 
                        temp += "{}={}{} ".format(k, quote(v, safe=urlsafe), DEFAULT_GET_POST_DELIMIT
                temp = temp.rstrip(DEFAULT_GET_POST_DELIMITER) 
                result.append((key, data[key], payload, temp)) 
    elif place == PLACE.COOKIE: 
        for payload in payloads: 
            for key in data.keys(): 
                temp = "" 
                for k, v in data.items(): 
                    if k == key: 
                        temp += "{}={}{}".format(k, quote(payload, safe=urlsafe), DEFAULT_COOKIE_DELI
                    else: 
                        temp += "{}={}{}".format(k, quote(v, safe=urlsafe), DEFAULT_COOKIE_DELIMITER)
                result.append((key, data[key], payload, temp)) 
    elif place == PLACE.URI: 
        uris = splitUrlPath(data, flag="") 
        for payload in payloads: 
            for uri in uris: 
                uri = uri.replace("", payload) 
                result.append(("", "", payload, uri)) 
    return result 
self.success 输出漏洞
def success(self, msg: ResultObject): 
    if isinstance(msg, ResultObject): 
        msg = msg.output() 
    elif isinstance(msg, dict): 
        pass 
    else: 
        raise PluginCheckError('self.success() not ResultObject') 
    KB.output.success(msg) 
class ResultObject(object): 
    def __init__(self, baseplugin): 
        self.name = baseplugin.name 
        self.path = baseplugin.path 
        self.url = ""  # 插件url 
        self.result = ""  # 插件返回结果 
        self.type = ""  # 漏洞类型 枚举 
        self.detail = collections.OrderedDict() 
    def init_info(self, url, result, vultype): 
        self.url = url 
        self.result = result 
        self.type = vultype 
    def add_detail(self, name: str, request: str, response: str, msg: str, param: str, value: str, po
        if name not in self.detail: 
            self.detail[name] = [] 
        self.detail[name].append({ 
            "request": request, 
            "response": response, 
            "msg": msg, 
            "basic": { 
                "param": param, 
                "value": value, 
                "position": position 
            } 
        }) 
    def output(self): 
        self.createtime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) 
        return { 
            "name": self.name, 
            "path": self.path, 
            "url": self.url, 
            "result": self.result, 
            "type": self.type, 
            "createtime": self.createtime, 
            "detail": self.detail 
        } 
loader audit loader插件最终执行的方法
解析url 获取请求的url后缀分类
然后使用指纹识别  m = mod.fingerprint(self.response.headers, self.response.text)  
然后推 一个扫描任务  PerFile 通用的检查模块  xss   sql注入   s2   shiro 等 针对参数级 
再推一个任务  PerServer   备份文件   错误页面 等 针对域名级 
分离出目录 然后每一个url目录都创建一个  PerFolder  任务  备份目录   phpinfo   源码泄露  等 针对url
主要的检查模块还是在  PerFile  目录下面 
这里分层这三个目录应该是仓库AWVS的方式来设计的 
下面就是audit的代码 
主要注意的是上述任务的创建都是通过  KB["spiderset"].add  的方式创建的 
会先对url进行泛化去重才进行任务的创建
def audit(self): 
    headers = self.requests.headers 
    url = self.requests.url 
    p = urlparse(url) 
    if not p.netloc: 
        return 
    for rule in conf.excludes: 
        if rule in p.netloc: 
            logger.info("Skip domain:{}".format(url)) 
            return 
    # fingerprint basic info 
    exi = self.requests.suffix.lower() 
    if exi == ".asp": 
        self.response.programing.append(WEB_PLATFORM.ASP) 
        self.response.os.append(OS.WINDOWS) 
    elif exi == ".aspx": 
        self.response.programing.append(WEB_PLATFORM.ASPX) 
        self.response.os.append(OS.WINDOWS) 
    elif exi == ".php": 
        self.response.programing.append(WEB_PLATFORM.PHP) 