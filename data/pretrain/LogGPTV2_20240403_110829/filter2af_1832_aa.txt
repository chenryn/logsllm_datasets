### 一、前言
在前文中，我们简单提及了“智能合约”的概念以及其安全属性。之后针对一些严重的事件展开合约安全的深入分析。在本文中，我们详细的介绍一下智能合约的概念，并且为大家讲述一些关于智能合约方面的攻击事例。并针对相关事例列举防御手段。
而我们知道智能合约的漏洞常存在于以太坊的Solidity中，所以本文中会有大量的合约代码分析。我也会为大家讲述相关合约分析流程。
**本文为原创稿件，如有疑问大家可以在下方留言。**
### 二、智能合约详述
#### 1 智能合约概念
智能合约是20世纪90年代被提出的一个概念。由于缺少可信的执行环境，所以智能合约并没有被应用到实际的产业中。自比特币诞生以后，人们逐渐认识到区块链是天生的可以为智能合约提供可信执行环境的平台。简单地说，智能合约是代码与数据的集合。其被部署在区块链的某个具体地址中。智能合约类似于区块链平台中的一个自动化机器人代理，它有自己的账户并可以在某些时间与事件的驱使下自动执行一些事情。例如可以传递信息、修改区块链状态等。
“智能合约”的程序不仅仅是一个可以自动执行的计算机程序，它可以对接收到的信息进行回应。作为一个系统必不可少的参与者，其可以接收和存储价值并向外部发送信息。以太坊的智能合约是以太坊特定的字节码，我们称为EVM字节码。
#### 2 智能合约编程语言
不同的区块链项目使用不同的程序语言作为其智能合约的编程语言。R3的Corda使用的是Java；HyperLedger
Fabric使用Java、Go开发其ChainCode链码。而根据大量的文献参考，我发现现在合约的问题多自以太坊的Solidity，所以我们在这里多讲述一下相关内容。
以太坊智能合约默认的编程语言是Solidity，智能合约的运行环境是以太坊虚拟机（EVM）。在报智能合约部署到以太坊网络之前需要先将智能合约编译成字节码，然后以交易的形式将智能合约的字节码发送到以太坊网络中，以太坊会为每一个智能合约创建一个合约账户并保存于此。
#### 3 DApp概念
DApp全程Decentralized
APP，是以太坊中基于智能合约应用的去中心化的应用程序。DApp的目标是让智能合约有一个友好的界面。DApp可以在以太以太坊节点交互的中心化服务器上运行，也可以在任意一个以太坊平等节点上运行。
然而DApp不能在普通的服务器上运行，其需要提交交易到区块链并且从区块链中提取重要数据。对于用户登录系统，用户很有可能被表示成一个“钱包”地址，而其他用户数据被保存到本地。
下面交代一下其流程：
  * 1用Solidity编写智能合约。
  * 2用solc编译器将合约编译为EVM字节码。
  * 3编译好的字节码发送到DApp前端。
  * 4前端将合约部署到区块链中。
  * 5区块链返回智能合约地址。
  * 6前端通过地址+ABI+nonce调用只能合约。
  * 7智能合约开始处理。
### 三、EVM虚拟机硬性限制安全
以太坊虚拟机（EVM）对于合约能够做的事情存在许多硬性的限制。为了平台安全的考虑，许多函数都有其潜在的内容，如果不了解其用法就盲目的使用有可能会带来十分严重的安全隐患。
#### 1 变量类型出错
例如在以太坊的Solidity中有unit8变量，而`uint8的存储范围为0 ~ 255，而int8的范围为-127 ~ 127。`而我们下面看一组代码：
    contract Baduse
    {
        address[] employees;
        function pay()
        {
            for(var i = 0 ; i  uint) bonuses;
        function pay()
        {
            for(uint i = 0 ; i < employees.length; i++)
            {
                address employee = employees[i];
                uint bonus = calculatebonus(employee);
                employee.send(bonus);