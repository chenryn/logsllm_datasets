title:A Black-Box Tracing Technique to Identify Causes of Least-Privilege
Incompatibilities
author:Shuo Chen and
John Dunagan and
Chad Verbowski and
Yi-Min Wang
A Black-Box Tracing Technique to Identify
Causes of Least-Privilege Incompatibilities
Shuo Chen
University of Illinois at Urbana-Champaign
PI:EMAIL
John Dunagan Chad Verbowski Yi-Min Wang
{jdunagan, chadv, ymwang}@microsoft.com
Microsoft Research
Abstract
Most Windows users run all the time with Admin privi-
leges. This signiﬁcantly increases the vulnerability of Win-
dows systems because the compromise of any user-level ap-
plication becomes a system compromise. To address this
problem, we present a novel tracing technique to identify
the causes of least-privilege incompatibilities (i.e., appli-
cation dependencies on Admin privileges). Our evalua-
tion on a number of real-world applications shows that our
tracing technique signiﬁcantly helps developers ﬁx least-
privilege incompatibilities, and can also help system admin-
istrators mitigate the impact of least-privilege incompatibil-
ities through local system policy changes.
1
Introduction
The principle of least-privilege is that software should run
only with the privileges necessary to accomplish the task
at hand. Much previous work has sought to build software
better conforming to this principle (e.g., [6, 18, 26]). Unfor-
tunately, adherence to the least-privilege principle on Win-
dows systems is quite low: Most users run all the time as
members of the Administrators group (“with Admin priv-
ileges”), similar to executing all commands as root on a
UNIX system. This increases the severity of security threats
faced by Windows users, because the compromise of any
user application becomes a system compromise. This threat
is both acute and widespread; attacks against user level
networking applications are common, and include spyware
[29, 33], self-propagating email [7], web browser exploits
[9, 10], and instant messaging (IM) client exploits [8].
Many Windows users run with Admin privileges because,
in fact, the applications they use require Admin privileges.
A Microsoft online article lists 188 such applications with
least-privilege incompatibilities [21]. Furthermore,
this
problem spans many user types: children that play Bob the
Builder; anyone ﬁling taxes with TurboTax; corporate em-
ployees that connect to their corporate network using Re-
mote Access Service; and developers that use Razzle to setup
their build environment.
In addition to causing individual applications to require
Admin privileges, least-privilege incompatibilities exert a
social pressure to run all applications with Admin privi-
leges. This social pressure exists for two reasons: First,
least-privilege incompatible applications often fail with
misleading error messages, so users without Admin privi-
leges spend signiﬁcantly more time troubleshooting; Sec-
ond, the number of least-privilege incompatible applica-
tions is sufﬁciently great that starting each one from a sepa-
rate account with Admin privileges, or setting up scripts to
do this semi-automatically, is a signiﬁcant inconvenience.
In this paper, we describe a tracing technique to iden-
tify the causes of least-privilege incompatibilities, making
it easier to ﬁx or mitigate them. Our technique is black-
box, i.e. it does not require source code.
Identifying the
causes of least-privilege incompatibilities enables two im-
portant scenarios:
(cid:127) Developers can ﬁx least-privilege incompatibilities
more easily. Developers face a number of challenges
in identifying and understanding least-privilege incom-
patibilities. In large software projects, developers must
often modify code written by others, where they have no
a priori insight into failing security checks. Additionally,
libraries and other software components commonly en-
capsulate system calls and are sometimes available only
in binary form, making failures more opaque. Simply
setting breakpoints often requires many iterations to
narrow down the source code line responsible for a single
least-privilege incompatibility.
In contrast, our tracing
technique allows a single test pass to produce a list of
all the least-privilege incompatibilities in the exercised
code paths, and to provide additional information beyond
source lines, such as object names, Access Control Lists
(ACLs), and call stacks (if symbol ﬁles are present). Our
evaluation suggests that this information signiﬁcantly
reduces the total
time required to ﬁx least-privilege
incompatibilities.
(cid:127) System administrators can mitigate some least-
privilege incompatibilities through system policy
changes. Making ACL changes so that applications can
run with reduced privilege is a well-known technique
[6, 23]. Our tracing technique enables faster identiﬁca-
tion of both the relevant ACLs and other causes of least-
privilege incompatibilities, such as missing named privi-
leges. Our evaluation suggests that this often allows sys-
tem administrators to modify the system policy so that
previously least-privilege incompatible applications can
be run without Admin privileges.
The use of tracing, a dynamic technique, implies a stan-
dard set of tradeoffs. Our tracing technique only iden-
tiﬁes least-privilege incompatibilities on exercised code
paths, and achieving good code coverage may require the
additional use of sophisticated test generation technology
[3, 16, 19]. Because tracing can miss least-privilege incom-
patibilities on unexercised code paths, it does not have per-
fect completeness. In Section 5, we discuss the reasons to
prefer tracing to static techniques, even though static tech-
niques can provide perfect completeness, for the particular
problem of identifying least-privilege incompatibilities.
Our evaluation on eight real-world applications demon-
strates the accuracy and usefulness of our tracing technique.
Because our technique does not require source code, we
were able to include in our evaluation third-party appli-
cations for which we only have binaries. To demonstrate
accuracy, we show that few logged security checks were
unrelated to least-privilege incompatibilities (good sound-
ness), and that bypassing the remaining logged checks al-
lows the application to run without Admin privileges (an
empirical test of completeness). To demonstrate usefulness,
we ﬁrst show that the number of security checks respon-
sible for least-privilege incompatibilities is small. Based
both on the traced least-privilege incompatibilities and con-
sultations with developers knowledgeable about the appli-
cations, we conclude that this information is a signiﬁcant
help in ﬁxing the incompatibilities.
The remainder of this paper is organized as follows: Sec-
tion 2 provides relevant background information on the
Windows Security Model. Section 3 describes our imple-
mentation. Section 4 presents our evaluation. Section 5
discusses related work. Section 6 concludes and discusses
our plans for future work.
2 Background on the Windows Security
Model
We describe the abstractions and mechanisms of the Win-
dows security model by comparison to the UNIX security
model. A Windows token represents the security context
of a user. Tokens are inherited by processes created by the
user. A token contains multiple Security IDs (SIDs), one
expressing the user’s identity, and the rest for groups that
the user belongs to, such as the Administrators group, or
the Backup Operators group. UNIX similarly attaches both
a user ID and a set of group IDs to a process. In order to
implement the setuid mechanism, UNIX adds another two
user IDs, so that at any point there is a real user ID, an ef-
fective user ID, and a saved user ID [11].
Windows does not support the notion of a setuid bit, and
Windows developers typically follow a different convention
in implementing privileged functionality. For example, in
UNIX, sendmail was historically installed with the setuid
bit so that an unprivileged user could invoke it, and the pro-
cess could then read and write to the mail spool, a protected
OS ﬁle.
In Windows, a developer would typically write
sendmail as a service (equivalent to a UNIX daemon), and
a user would interact with sendmail using Local Procedure
Call (LPC). One would implement the sendmail command-
line interface as a simple executable that sends the com-
mand line arguments to the service via LPC. The Windows
service model allows services to be started on demand, so
dormant services occupy no memory, just as in the UNIX
sendmail case.
A Windows token also contains a set of privileges (which
can be enabled or disabled), such as the SystemTime or
Shutdown privilege. These two privileges grant the abili-
ties, respectively, to change the system clock and to shut-
down the system. Conceptually, privileges are used to grant
abilities that do not apply to a particular object, while ac-
cesses to individual objects are regulated using Access Con-
trol Lists (ACLs). In contrast, UNIX typically uses groups
to implement named privileges. For example, membership
in the ﬂoppy group grants access to the ﬂoppy drive. To cre-
ate an equivalent to the SystemTime privilege in UNIX, one
might create a SystemTime group, create a ChangeSystem-
Time setuid executable, set its group to SystemTime, and
give it group-execute permission.
Windows and UNIX both support ACLs, but again, their
implementations are slightly different. UNIX ﬁle systems
typically associate each ﬁle with an owner and a group, and
store access rights for the owner, members of the group,
and all others. Windows ACLs can contain many  pairs, as in AFS (the Andrew File System). These
 pairs are used to grant one user the ability
to read and write the object, another user the ability only
to read the object, all members of another group the ability
to read the object, etc. ACLs in Windows can be attached
not only to ﬁles, but to any object accessible through a han-
dle, such as registry entries and semaphores. In UNIX, and
more so in Plan 9, access control is made uniform across re-
sources by exporting most resources through the ﬁle system
(e.g., /dev/audio).
2.1 Security Checking Functions
The interface to security checking in Windows is com-
plex. We identiﬁed a small set of security checking func-
tions to instrument, and we took several steps to assure our-
selves of their completeness: reading the Windows source
code, consulting a senior Windows architect, and examining
the kernel call stack at observed application failures. Based
on these steps and our success identifying least-privilege in-
compatibilities in the applications in our evaluation section,
we have good conﬁdence in the set of functions we identi-
ﬁed. Note that the complexity of security interfaces is not
unique to Windows; previous work has discussed the sub-
tleties of UNIX security interfaces[11, 14].
The ﬁve functions we identiﬁed, and their role in the se-
curity subsystem, are presented in Figure 1: the functions
themselves are circled, and the arrows denote function in-
puts and outputs. For the purpose of discussion, we have
changed the function names to make them more intelligi-
ble. Privilege-Check is used to check that privileges are
held and enabled in the token. Adjust-Privilege is used to
enable or disable privileges. Access-Check is used to check
whether a user has access to a particular object, as deter-
mined by its ACL. Reference-Object also performs access
checks; requests to read or write an object ﬂow through this
function, which checks the Handle Table to see whether the
ability to perform the operation was previously granted by
Access-Check when the handle to the object was created.
SID-Compare is used both internally by the security sub-
In particular, least-
system and directly by applications.
privilege incompatible applications often use SID-Compare
to fail early. The application checks if the user holds a
SID granting membership in the Administrators group, and
fails if not. Intercepting this direct application check was
necessary for us to determine the later (and more interest-
ing) set of checks causing least-privilege incompatibilities.
Of course, a developer attempting to ﬁx a least-privilege
incompatible application would ﬁnd removing this SID-
Compare check to be an obvious modiﬁcation.
3
Identifying Least-Privilege Incompatibili-
ties
We implemented our tracing technique for identifying
least-privilege incompatibilities by adding two components
to the Windows XP Service Pack 1 kernel, a Security Check
Monitor and Noise Filter and a Security Check Event Log-
ger. Because security checks are a tiny fraction of an un-
modiﬁed system’s performance, the overhead our compo-
nents added to each security check had a negligible effect
on overall system performance. To apply our technique, a
developer or system administrator starts the tracer, runs the
incompatible application with Admin privileges, and then
stops the tracer. While the tracer is running, the Security
Check Monitor and Noise Filter component applies a con-
servative noise ﬁltering algorithm to keep only those secu-
rity checks that might be responsible for least-privilege in-
compatibilities. The actual logging of these checks is done
the Security Check Event Logger component. After tracing,
we apply a separate log validation step, described in more
detail in Section 3.2. Figure 2 shows this workﬂow.
3.1 Security Check Monitoring and Noise Filter-
ing
We developed a simple noise ﬁltering algorithm speciﬁc
to identifying least-privilege incompatibilities motivated by
the following observation: large numbers of security checks
fail on running Windows systems without any noticeable
end-user impact. We speculate that these failed checks
come from applications and libraries attempting to acquire
object with rights they do not require for their proper func-
tioning, but we have not yet managed to investigated this.
Our noise ﬁltering algorithm identiﬁes calls that succeed
with Admin privileges and fail without them. This has no
false negatives, i.e., it does not eliminate any true least-
privilege incompatibilities from the log. It does not entirely
eliminate false positives: some applications attempt to ac-
quire objects with rights they do not need, falling back to
acquiring the object with fewer rights without any apparent
adverse effect.
Our noise ﬁltering algorithm assumes the user is running
the application with Admin privileges. In the security sub-
system, we intercept all security checks, and initially al-
low the check to pass through unmodiﬁed. If the check is
successful and the token contained membership in the Ad-
ministrators group, the noise ﬁlter temporarily removes this
membership from the token and performs a second check.
If this second check fails, the Security Check Event Logger
is called. Although our implementation only differentiates
between membership and non-membership in the Adminis-
trators group, it would be straightforward to conﬁgure the
component to handle other groups (e.g., the Backup Oper-
ators group). To convince ourselves that this approach had
merit, we performed a quick experiment, collecting three
2-hour traces during regular ofﬁce hours on one of our pri-
mary machines. The results of these traces are summarized
in Table 1.
In each of these traces, the set of security checks that
would be logged after applying our noise ﬁltering algorithm
(the column labeled Difference) is much smaller than the
total number of failed checks. The 2K-3K remaining failed
checks still constitute a conservative superset of the checks
corresponding to least-privilege incompatibilities. Though