l
o
n
o
i
t
c
a
r
F
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
s=1
s=2
s=4
 10
 100
 1000
Figure 14: Fraction of vulnerable hosts uninfected when
worm signature detected vs. q
, number of suspicious ﬂows
required to trigger signature detection.
s
e
r
u
t
i
a
n
g
S
c
i
f
i
c
e
p
s
n
U
f
o
r
e
b
m
u
N
 4
 3.5
 3
 2.5
 2
 1.5
 1
 0.5
 0
s=1
s=2
s=4
 10
 100
 1000
Figure 15: Number of unspeciﬁc signatures generated vs. q
,
number of suspicious ﬂows required to trigger signature de-
tection.
goal, of course, is for the system to generate zero unspeciﬁc
signatures, but to generate a worm signature before the worm
spreads too far. Our results show that for s = 2 and q = 15,
Autograph generates signatures that cause no false positives,
yet generates the signature for the novel worm before 2% of
vulnerable hosts become infected. Our point is not to argue
for these particular parameter values, but rather to show that
there exists a region of operation where the system meets our
stated design goals. More importantly, though, these results
show that an improved ﬂow classiﬁer improves Autograph—
as ﬂow classiﬁers beneﬁt from further research and improve,
Autograph can adopt these improvements to offer faster worm
signature generation with lower false positive rates.
6 Attacks and Limitations
We brieﬂy catalog a few attacks that one might mount against
Autograph, and limitations of the current system.
Overload. Autograph reassembles suspicious TCP ﬂows.
Flow reassembly is costly in state in comparison with pro-
cessing packets individually, but defeats the subterfuge of
fragmenting a worm’s payload across many small pack-
ets [11]. We note that the number of inbound ﬂows a moni-
tor observes may be large, in particular after a worm spreads
successfully. If Autograph tries to reassemble every incom-
ing suspicious ﬂow, it may be susceptible to DoS attack. We
note that Autograph treats all destination ports separately, and
thus parallelizes well across ports; a site could run multiple
instances of Autograph on separate hardware, and thus in-
crease its aggregate processing power, for ﬂow reassembly
and all other processing. Autograph may also sample suspi-
cious ﬂows when the number of suspicious ﬂows to process
exceeds some threshold; we intend to investigate this heuris-
tic in future.
scans
scans. Port
Source-address-spoofed port
from
spoofed IP source addresses are a peril for most IDSes. The
chief reason for monitoring port scans is to limit the damage
their originators can inﬂict, most often by ﬁltering packets
that originate from known port scanners. Such ﬁltering in-
vites attackers to spoof port scans from the IP addresses of
those whose trafﬁc they would like to block [11, 5]. Source-
spoofed port scans can be used to mount different attacks,
more speciﬁc to Autograph: the tattler mechanism must carry
report trafﬁc proportional to the number of port scanners. An
attacker could attempt to saturate tattler’s bandwidth limit
with spoofed scanner source addresses, and thus render tat-
tler useless in disseminating addresses of true port scanners.
A source-spooﬁng attacker could also cause a remote source’s
trafﬁc to be included by Autograph in signature generation.
Fortunately, a simple mechanism holds promise for ren-
dering both these attacks ineffective. Autograph classiﬁes an
inbound SYN destined for an unpopulated IP address or port
with no listening process as a port scan. To identify TCP port
scans from spoofed IP source addresses, an Autograph mon-
itor could respond to such inbound SYNs with a SYN/ACK,
provided the router and/or ﬁrewall on the monitored network
can be conﬁgured not to respond with an ICMP host or port
unreachable. If the originator of the connection responds with
an ACK with the appropriate sequence number, the source ad-
dress on the SYN could not have been spoofed. The monitor
may thus safely view all source addresses that send proper
ACK responses to SYN/ACKs as port scanners. Non-ACK
responses to these SYN/ACKs (RSTs or silence) can then be
ignored; i.e., the source address of the SYN is not recorded
as a port scanner. Note that while a non-source-spooﬁng port
scanner may choose not to respond with an ACK, any source
that hopes to complete a connection and successfully trans-
fer an infecting payload must respond with an ACK, and thus
identify itself as a port scanner. Jung et al. independently
propose this same technique in [5].
q
q
Hit-list scanning.
If a worm propagates using a hit list [18],
rather than by scanning IP addresses that may or may not
correspond to listening servers, Autograph’s port-scan-based
suspicious ﬂow classiﬁer will fail utterly to include that
worm’s payloads in signature generation. Identifying worm
ﬂows that propagate by hit lists is beyond the scope of this
paper. We are unaware at this writing of any published sys-
tem that detects such ﬂows; state-of-the-art malicious payload
gathering methods, such as honeypots, are similarly stymied
by hit-list propagation. Nevertheless, any future innovation
in the detection of ﬂows generated by hit-list-using worms
may be incorporated into Autograph, to augment or replace
the naive port-scan-based heuristic used in our prototype.
7 Related Work
Singh et al. [15] generate signatures for novel worms by mea-
suring packet content prevalence and address dispersion at
a single monitoring point. Their system, EarlyBird, avoids
the computational cost of ﬂow reassembly, but is suscepti-
ble to attacks that spread worm-speciﬁc byte patterns over
a sequence of short packets. Autograph instead incurs the
expense of ﬂow reassembly, but mitigates that expense by
ﬁrst identifying suspicious ﬂows, and thereafter performing
ﬂow reassembly and content analysis only on those ﬂows.
EarlyBird reverses these stages; it ﬁnds sub-packet content
strings ﬁrst, and applies techniques to ﬁlter out innocuous
content strings second. Autograph and EarlyBird both make
use of Rabin ﬁngerprints, though in different ways: Auto-
graph’s COPP technique uses them as did LBFS, to break
ﬂow payloads into non-overlapping, variable-length chunks
efﬁciently, based on payload content. EarlyBird uses them to
generate hashes of overlapping, ﬁxed-length chunks at every
byte offset in a packet efﬁciently. Singh et al. independently
describe using a white-list to disallow signatures that cause
false positives (described herein as a blacklist for signatures,
rather than a white-list for trafﬁc), and report examples of
false positives that are prevented with such a white-list [16].
Kreibich and Crowcroft [6] describe Honeycomb, a system
that gathers suspicious trafﬁc using a honeypot, and searches
for least common substrings in that trafﬁc to generate worm
signatures. Honeycomb relies on the inherent suspiciousness
of trafﬁc received by a honeypot to limit the trafﬁc consid-
ered for signature generation to truly suspicious ﬂows. This
approach to gathering suspicious trafﬁc is complementary to
that adopted in Autograph; we intend to investigate acquir-
ing suspicious ﬂows using honeypots for signature genera-
tion by Autograph in future. The evaluation of Honeycomb
assumes all trafﬁc received by a honeypot is suspicious; that
assumption may not always hold, in particular if attackers de-
liberately submit innocuous trafﬁc to the system. Autograph,
Honeycomb, and EarlyBird will face that threat as knowledge
of their deployment spreads; we believe vetting candidate sig-
natures for false positives among many distributed monitors
may help to combat it.
Provos [12] observes the complementary nature of honey-
pots and content-based signature generation; he suggests pro-
viding payloads gathered by honeyd to Honeycomb. We ob-
serve that Autograph would similarly beneﬁt from honeyd’s
captured payloads. Furthermore, if honeyd participated
in tattler, Autograph’s detection of suspicious IP addresses
would be sped, with less communication than that required
to transfer complete captured payloads from instances of
honeyd to instances of Autograph.
Yegneswaran et al. [23] corroborate the beneﬁt of dis-
tributed monitoring, both in speeding the accurate accumu-
lation of port scanners’ source IP addresses, and in speeding
the accurate determination of port scanning volume. Their
DOMINO system detects port scanners using active-sinks
(honeypots), both to generate source IP address blacklists for
use in address-based trafﬁc ﬁltering, and to detect an increase
in port scanning activity on a port with high conﬁdence. The
evaluation of DOMINO focuses on speed and accuracy in de-
termining port scan volume and port scanners’ IP addresses,
whereas our evaluation of Autograph focuses on speed and
accuracy in generating worm signatures, as inﬂuenced by the
speed and accuracy of worm payload accumulation.
Our work is the ﬁrst we know to evaluate the tradeoff be-
tween earliness of detection of a novel worm and generation
of signatures that cause false positives in content-based sig-
nature detection.
8 Conclusion and Future Work
In this paper, we present design criteria for an automated
worm signature detection system, and the design and eval-
uation of Autograph, a DMZ monitoring system that is a ﬁrst
step toward realizing them. Autograph uses a naive, port-
scan-based ﬂow classiﬁer to reduce the volume of trafﬁc on
which it performs content-prevalence analysis to generate sig-
natures. The system ranks content according to its preva-
lence, and only generates signatures as needed to cover its
pool of suspicious ﬂows; it therefore is designed to minimize
the number of signatures it generates. Our ofﬂine evaluation
of Autograph on real DMZ traces reveals that the system can
be tuned to generate sensitive and speciﬁc signature sets, that
exhibit high true positives, and low false positives. Our sim-
ulations of the propagation of a Code-RedI-v2 worm demon-
strate that by tattling to one another about port scanners they
overhear, distributed Autograph monitors can detect worms
earlier than isolated, individual Autograph monitors, and that
the bandwidth required to achieve this sharing of state is min-
imal. DMZ-trace-driven simulations of the introduction of a
novel worm show that a distributed deployment of 63 Auto-
graph monitors, despite using a naive ﬂow classiﬁer to iden-
tify suspicious trafﬁc, can detect a newly released Code-RedI-
v2-like worm’s signature before 2% of the vulnerable host
population becomes infected. Our collected results illuminate
the inherent tension between early generation of a worm’s
signature and generation of speciﬁc signatures.
Autograph is a young system. Several avenues bear further
investigation. We are currently evaluating a single Autograph
monitor’s performance in an online setting, where the sys-
tem generates signatures periodically using the most recent
suspicious ﬂow pool. Early results indicate that in a single
signature generation interval, this online system can produce
signatures for common HTTP worms, including Code-RedII
and Nimda, and that using a minimal blacklist, the generated
signatures can incur zero false positives. We will continue
this evaluation using more diverse traces and protocol (port)
workloads, to further validate these initial results. We look
forward to deploying Autograph distributedly, including tat-
tler, which has so far only been evaluated in simulation. Fi-
nally, we are keen to explore sharing information beyond port
scanners’ source IP addresses among monitors, in the interest
of ever-faster and ever-higher-quality signature generation.
Acknowledgments
We are grateful to Vern Paxson of ICSI and to Casey Hel-
frich and James Gurganus of Intel Research for providing the
DMZ traces used to evaluate Autograph. And to Adrian Per-
rig, Phil Gibbons, Robert Morris, Luigi Rizzo, and the anony-
mous reviewers, for insightful discussions and comments that
improved our work.
Notes
1Signatures may employ more complicated payload patterns, such as reg-
ular expressions. We restrict our attention to ﬁxed byte sequences.
2We include both poly- and metamorphism here; see Section 4.2.
3In future, worms may be designed to minimize the overlap in their suc-
cessive infection payloads; we consider such worms in Section 4.2.
4Note that an IP address may have sent trafﬁc before being identiﬁed as a
scanner; such trafﬁc will stored in the non-suspicious ﬂow pool. We include
only subsequently arriving trafﬁc in the suspicious ﬂow pool, in the interest
of simplicity, at the expense of potentially missing worm trafﬁc sent by the
scanner before our having detected it as such.
5Worms that propagate very slowly may only accumulate in sufﬁcient
volume to be detected by Autograph for long values of t.
6Note that each Autograph monitor may independently choose its break-
mark. Were the breakmark universal and well-known, worm authors might
try to tailor payloads to force COPP to choose block boundaries that mix
invariant payload bytes with changing payload bytes within a content block.
7We have since adopted a 16-byte COPP window in our implementation,
to make it harder for worm authors to construct payloads so as to force par-
ticular content block boundaries; results are quite similar for k = 16.
8In cases where a source address owner complains that his address is
advertised, the administrator of an Autograph monitor could conﬁgure Auto-
graph not to report addresses from the uncooperative address block.
9We have implemented blacklists at this writing, but omit a full evaluation
of them in the interest of brevity. Our experience has shown that blacklists
of even 2 to 6 disallowed signatures can signiﬁcantly reduce false positives
caused by misclassiﬁed innocuous ﬂows, for HTTP trafﬁc.
References
[1] CASTRO, M., DRUSCHEL, P., KERMARREC, A.-M., AND ROW-
STRON, A. Scribe: A Large-scale and Decentralized Application-level
Multicast Infrastructure. IEEE Journal on Selected Areas in Commu-
nication (JSAC) 20, 8 (Oct. 2002).
[2] CHRISTODORESCU, M., AND JHA, S. Static Analysis of Executa-
bles to Detect Malicious Patterns. In Proceedings of the 12th USENIX
Security Symposium (Aug. 2003).
[3] CISCO
SYSTEMS.
Network-Based Application Recogni-
http://www.cisco.com/univercd/cc/td/doc/
tion.
product/software/ios122/122newf%t/122t/122t8/
dtnbarad.htm.
[4] DSHIELD.ORG. DShield - Distributed Intrusion Detection System.
http://dshield.org.
[5] JUNG, J., PAXSON, V., BERGER, A. W., AND BALAKRISHNAN, H.
Fast Portscan Detection Using Sequential Hypothesis Testing. In Pro-
ceedings of the IEEE Symposium on Security and Privacy (May 2004).
[6] KREIBICH, C., AND CROWCROFT, J. Honeycomb—Creating Intru-
sion Detection Signatures Using Honeypots. In Proceedings of the 2nd
Workshop on Hot Topics in Networks (HotNets-II) (Nov. 2003).
[7] LEMOS, R. Counting the Cost of Slammer. CNET news.com. http:
//news.com.com/2100-1001-982955.html, Jan. 2003.
[8] MOORE, D., AND SHANNON, C. Code-Red: A Case Study on the
Spread and Victims of an Internet Worm. In Proceedings of the 2002
ACM SIGCOMM Internet Measurement Workshop (IMW 2002) (Nov.
2002).
[9] MOORE, D., SHANNON, C., VOELKER, G. M., AND SAVAGE, S.
Internet Quarantine: Requirements for Containing Self-Propagating
Code. In Proceedings of IEEE INFOCOM 2003 (Mar. 2003).
[10] MUTHITACHAROEN, A., CHEN, B., AND MAZI `ERES, D. A Low-
bandwidth Network File System.
In Proceedings of the 18th ACM
Symposium on Operating Systems Principles (SOSP 2001) (Oct. 2001).
[11] PAXSON, V. Bro: A System for Detecting Network Intruders in Real-
Time. Computer Networks 31, 23-24 (Dec. 1999).
[12] PROVOS, N. A Virtual Honeypot Framework. Tech. Rep. 03-1, CITI
(University of Michigan), Oct. 2003.
[13] RABIN, M. O. Fingerprinting by Random Polynomials. Tech. Rep.
TR-15-81, Center for Research in Computing Technology, Harvard
University, 1981.
[14] SCHULZRINNE, H., CASNER, S., FREDERICK, R., AND JACOBSON,
V. RFC 1889 - RTP: A Transport Protocol for Real-Time Applications,
Jan. 1996.
[15] SINGH, S., ESTAN, C., VARGHESE, G., AND SAVAGE, S. The Early-
Bird System for Real-time Detection of Unknown Worms. Tech. Rep.
CS2003-0761, UCSD, Aug. 2003.
[16] SINGH, S., ESTAN, C., VARGHESE, G., AND SAVAGE, S. Automated
Worm Fingerprinting. Unpublished draft, received May 2004.
[17] STANIFORD, S., HOAGLAND, J. A., AND MCALERNEY, J. M. Prac-
tical Automated Detection of Stealthy Portscans. Journal of Computer
Security 10, 1-2 (Jan. 2002).
[18] STANIFORD, S., PAXSON, V., AND WEAVER, N. How to 0wn the In-
ternet in Your Spare Time. In Proceedings of the 11th USENIX Security
Symposium (Aug. 2002).
[19] THE SNORT PROJECT. Snort, The Open-Source Network Intrusion
Detection System. http://www.snort.org/.
[20] UNIVERSITY OF OREGON. University of Oregon Route Views Project.
http://www.routeviews.org/.
[21] WEAVER, N. C. Warhol Worms: The Potential for Very Fast In-
ternet Plagues. http://www.cs.berkeley.edu/˜nweaver/
warhol.html.
[22] WU, J., VANGALA, S., GAO, L., AND KWIAT, K. An Effective Archi-
tecture and Algorithm for Detecting Worms with Various Scan Tech-
niques. In Proceedings of the Network and Distributed System Security
Symposium 2004 (NDSS 2004) (Feb. 2004).
[23] YEGNESWARAN, V., BARFORD, P., AND JHA, S. Global Intrusion
Detection in the DOMINO Overlay System. In Proceedings of Network
and Distributed System Security Symposium (NDSS 2004) (Feb. 2004).