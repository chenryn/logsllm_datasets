# 优化后的文本

## 图14：检测到蠕虫签名时未感染的脆弱主机比例与q的关系
- q: 触发签名检测所需的可疑流量数量
- s = 1, s = 2, s = 4
- 横轴: q (10, 100, 1000)
- 纵轴: 未感染的脆弱主机比例 (1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0)

## 图15：生成的非特定签名数量与q的关系
- q: 触发签名检测所需的可疑流量数量
- s = 1, s = 2, s = 4
- 横轴: q (10, 100, 1000)
- 纵轴: 非特定签名数量 (4, 3.5, 3, 2.5, 2, 1.5, 1, 0.5, 0)

我们的目标是使系统生成零个非特定签名，同时在蠕虫传播过广之前生成蠕虫签名。实验结果表明，当s = 2且q = 15时，Autograph生成的签名不会产生误报，并且在少于2%的脆弱主机被感染之前生成了新的蠕虫签名。我们并不是要论证这些特定参数值的优越性，而是展示存在一个操作区间，在此区间内系统能够满足我们的设计目标。更重要的是，这些结果表明改进流量分类器可以提升Autograph的表现——随着流量分类器研究的深入和改进，Autograph可以采纳这些改进以更快地生成蠕虫签名并降低误报率。

## 6 攻击与限制
我们简要列举了一些可能针对Autograph发起的攻击以及当前系统的局限性。

### 超载
Autograph重新组装可疑的TCP流。相比于单独处理每个数据包，流重组需要更多的状态资源，但可以防止通过多个小数据包分散蠕虫负载的欺骗行为 [11]。需要注意的是，监控器观察到的入站流数量可能非常大，特别是在蠕虫成功传播后。如果Autograph尝试重组每一个可疑的入站流，它可能会受到DoS攻击。值得注意的是，Autograph对所有目标端口分别处理，因此可以在端口之间很好地并行化；站点可以在不同的硬件上运行多个Autograph实例，从而增加其总的处理能力，包括流重组和其他处理任务。当需要处理的可疑流数量超过某个阈值时，Autograph也可以对可疑流进行采样；我们计划在未来对此启发式方法进行研究。

### 端口扫描
源地址欺骗的端口扫描对大多数IDS来说都是一个威胁。监测端口扫描的主要目的是限制其发起者的破坏能力，通常通过过滤来自已知端口扫描器的数据包来实现。这种过滤方式促使攻击者从他们希望阻止其流量的IP地址伪造端口扫描 [11, 5]。源地址欺骗的端口扫描可以用于发动多种攻击，特别是针对Autograph：报告机制必须根据端口扫描器的数量携带相应的报告流量。攻击者可以通过使用伪造的扫描器源地址来饱和报告机制的带宽限制，从而使报告机制无法有效地分发真实端口扫描器的地址。此外，源地址欺骗攻击者还可以导致远程源的流量被Autograph纳入签名生成过程。

幸运的是，一种简单的机制有望使这两种攻击无效。Autograph将发送到未分配IP地址或无监听进程端口的入站SYN分类为端口扫描。为了识别来自伪造IP源地址的TCP端口扫描，Autograph监控器可以响应这样的入站SYN以SYN/ACK，前提是受监控网络中的路由器和/或防火墙配置为不响应ICMP主机或端口不可达消息。如果连接发起者以适当的序列号响应ACK，则SYN上的源地址不能被伪造。因此，监控器可以安全地将所有正确响应SYN/ACK的源地址视为端口扫描器。对于这些SYN/ACK的非ACK响应（RST或静默）可以忽略；即，SYN的源地址不会被记录为端口扫描器。需要注意的是，虽然非源地址欺骗的端口扫描器可以选择不响应ACK，但任何希望完成连接并成功传输感染负载的源地址都必须响应ACK，从而自曝为端口扫描器。Jung等人在[5]中独立提出了同样的技术。

### 命中列表扫描
如果蠕虫通过命中列表传播 [18]，而不是通过扫描可能对应或不对应的监听服务器的IP地址，那么基于端口扫描的可疑流分类器将完全无法将该蠕虫的有效负载纳入签名生成。识别通过命中列表传播的蠕虫流超出了本文的范围。据我们所知，目前还没有任何已发表的系统能够检测此类流量；最先进的恶意负载收集方法，如蜜罐，也因命中列表传播而受到阻碍。然而，未来在检测由命中列表使用的蠕虫生成的流量方面的任何创新都可以整合到Autograph中，以增强或替换我们在原型中使用的基于端口扫描的简单启发式方法。

## 7 相关工作
Singh等人 [15] 通过在一个单一监控点测量数据包内容的普遍性和地址分散度来生成新蠕虫的签名。他们的系统EarlyBird避免了流量重组的计算成本，但容易受到将蠕虫特有字节模式分布在一系列短数据包中的攻击。相比之下，Autograph承担了流量重组的成本，但通过首先识别可疑流，然后仅对这些流执行流量重组和内容分析来缓解这一成本。EarlyBird则相反，它先找到子数据包内容字符串，然后应用技术过滤掉无害的内容字符串。Autograph和EarlyBird都使用了Rabin指纹，但方式不同：Autograph的COPP技术像LBFS一样使用它们，基于有效负载内容高效地将流负载分解成不重叠、变长的块。EarlyBird则使用它们在每个字节偏移处高效地生成重叠、固定长度块的哈希。Singh等人独立描述了使用白名单来禁止引起误报的签名（本文中描述为黑名单），并报告了使用这种白名单防止误报的例子 [16]。

Kreibich和Crowcroft [6] 描述了Honeycomb系统，该系统利用蜜罐收集可疑流量，并搜索其中最不常见的子串以生成蠕虫签名。Honeycomb依赖于蜜罐接收的流量固有的可疑性，将考虑用于签名生成的流量限制为真正的可疑流。这种收集可疑流量的方法与Autograph采用的方法互补；我们打算在未来研究使用蜜罐获取可疑流量以供Autograph生成签名。Honeycomb的评估假设蜜罐接收到的所有流量都是可疑的；这一假设可能并不总是成立，尤其是在攻击者故意向系统提交无害流量的情况下。随着对其部署知识的扩散，Autograph、Honeycomb和EarlyBird都将面临这一威胁；我们认为在许多分布式监控器中验证候选签名是否会引起误报可能有助于应对这一威胁。

Provos [12] 观察到蜜罐和基于内容的签名生成之间的互补性质；他建议将honeypot收集的有效负载提供给Honeycomb。我们观察到Autograph同样可以从honeypot捕获的有效负载中受益。此外，如果honeypot参与tattler，Autograph对可疑IP地址的检测速度将会加快，所需通信量也会减少。

Yegneswaran等人 [23] 证实了分布式监控的好处，既加速了准确积累端口扫描器源IP地址的速度，也加速了准确确定端口扫描量的速度。他们的DOMINO系统使用主动诱饵（蜜罐）检测端口扫描器，既用于生成基于地址的流量过滤黑名单，也用于高置信度地检测某个端口的端口扫描活动增加。DOMINO的评估重点在于确定端口扫描量和端口扫描器IP地址的速度和准确性，而我们对Autograph的评估则侧重于生成蠕虫签名的速度和准确性，这受到蠕虫负载积累速度和准确性的影响。

据我们所知，我们的工作首次评估了检测新蠕虫的时间与生成引起误报的签名之间的权衡。

## 8 结论与未来工作
在本文中，我们提出了自动蠕虫签名检测系统的设计标准，并介绍了Autograph的设计和评估，这是一个朝向实现这些标准迈出的第一步的DMZ监控系统。Autograph使用基于端口扫描的简单流量分类器来减少其执行内容普遍性分析以生成签名的流量量。系统根据内容的普遍性对其进行排名，并仅按需生成签名以覆盖其可疑流池；因此，它旨在最小化生成的签名数量。我们对Autograph在真实DMZ追踪数据上的离线评估表明，该系统可以调整以生成敏感且具体的签名集，表现出高的真阳性率和低的假阳性率。我们对Code-RedI-v2蠕虫传播的模拟显示，通过相互交流他们听到的端口扫描器信息，分布式Autograph监控器可以比孤立的单个Autograph监控器更早地检测到蠕虫，并且这种状态共享所需的带宽极小。基于DMZ追踪数据驱动的模拟表明，尽管使用了一个简单的流量分类器来识别可疑流量，但63个分布式Autograph监控器可以在不到2%的脆弱主机被感染之前检测到新发布的类似Code-RedI-v2蠕虫的签名。我们的收集结果揭示了早期生成蠕虫签名与生成具体签名之间的内在紧张关系。

Autograph是一个年轻的系统，有几个方向值得进一步研究。我们目前正在评估在线环境中单个Autograph监控器的性能，该系统定期使用最近的可疑流池生成签名。初步结果显示，在一个签名生成间隔内，该在线系统可以为常见的HTTP蠕虫（包括Code-RedII和Nimda）生成签名，并且使用最小的黑名单，生成的签名可以达到零误报。我们将继续使用更多样化的追踪数据和协议（端口）负载来进一步验证这些初步结果。我们期待部署分布式的Autograph，包括迄今为止仅在模拟中评估过的tattler。最后，我们渴望探索在监控器之间分享不仅仅是端口扫描器源IP地址的信息，以期实现更快、更高品质的签名生成。

## 致谢
我们感谢ICSI的Vern Paxson以及Intel Research的Casey Helfrich和James Gurganus提供了用于评估Autograph的DMZ追踪数据。我们还要感谢Adrian Perrig、Phil Gibbons、Robert Morris、Luigi Rizzo和匿名审稿人，他们的讨论和评论极大地改进了我们的工作。

## 注释
1. 签名可以使用更复杂的有效负载模式，例如正则表达式。我们在这里只关注固定的字节序列。
2. 我们在此包括多态性和变形。
3. 将来，蠕虫可能会被设计成最小化其连续感染有效负载的重叠；我们在第4.2节中讨论这类蠕虫。
4. 注意，一个IP地址可能在被识别为扫描器之前已经发送了流量；这些流量将存储在非可疑流池中。为了简化起见，我们只将随后到达的流量包含在可疑流池中，但这可能会导致错过扫描器在被检测为扫描器之前发送的蠕虫流量。
5. 传播非常慢的蠕虫可能只有在长时间内才能累积足够的体积以被Autograph检测到。
6. 请注意，每个Autograph监控器可以独立选择其断点。如果断点是全局且众所周知的，蠕虫作者可能会试图构造有效负载，以迫使COPP选择将不变的有效负载字节与变化的有效负载字节混合在同一内容块中的边界。
7. 自那时以来，我们在实现中采用了16字节的COPP窗口，以使蠕虫作者更难构造有效负载来强制特定的内容块边界；k = 16的结果非常相似。
8. 在源地址所有者抱怨其地址被通告的情况下，Autograph监控器的管理员可以配置Autograph不报告来自不合作地址块的地址。
9. 我们目前已经实现了黑名单，但由于篇幅限制，此处省略了完整的评估。我们的经验表明，即使2到6个不允许的签名黑名单也能显著减少由于错误分类的无害流量引起的误报，特别是在HTTP流量中。