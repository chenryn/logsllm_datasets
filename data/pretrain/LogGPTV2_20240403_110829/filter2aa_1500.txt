### Secure SDLC Practices in Smart Contracts Development

**Speaker: Pavlo Radchuk**  
**@rdchksec**  
**2018**

#### About the Speaker
- **AppSec Engineer with a Master's Degree**
- **Several years of experience**
- **Smart Contract Audit Team Lead**
- My team performs 7-10 audits per month.

#### Research and Analysis
- Conducting research on new techniques, vulnerabilities, and other relevant topics.
- Analyzing competitors' reports, which vary significantly.
- Gaining insights into the internal challenges and issues.

#### Current State of Smart Contract Audits
- Best practices exist for Ethereum Solidity, but not for EOS, NEO, NEM, etc.
- **Audit Problems:**
  - Lack of compliance (e.g., PCI DSS)
  - No certifications (e.g., OSCP)
  - Absence of industry-accepted standards and guidelines (e.g., OWASP testing guide)
  - An audit declaring a smart contract as secure does not guarantee its actual security.

Despite these drawbacks, an audit remains the best solution for smart contract security. However, audits alone are insufficient. 

#### What Can Help Improve Smart Contract Security?
- **SDLC (Software Development Lifecycle):** A process used in systems engineering, information systems, and software engineering to plan, create, test, and deploy an information system.
  - **Source:** [CMS.gov](https://www.cms.gov/Research-Statistics-Data-and-Systems/CMS-Information-Technology/XLC/Downloads/SelectingDevelopmentApproach.pdf)

#### Secure SDLC for Smart Contracts
- **Comparison with Web Development:**
  - **Web:**
    - Code runs on servers
    - Code can be changed
  - **Smart Contracts:**
    - Code runs on nodes
    - Code is immutable after deployment, but can be updated using proxies (e.g., zos for Solidity)

- **Development Process:**
  - Requirements
  - Programming
  - Testing
  - Deployment
  - Maintenance

- **Existing Resources:**
  - Web development has established guides, pentesting methodologies, and compliances.
  - Smart contracts have some informal best practices but lack formalized standards.

#### How to Build a Secure Smart Contract
- **SDLC Practices:**
  1. **Threat Assessment:**
     - Consider scenarios like losing the only copy of a private key, Ethereum being hacked, or a token/wallet being compromised.
     - Understand and manage risks through acceptance, mitigation, or transfer.
  2. **Security Requirements:**
     - Common bugs include the absence of security modifiers.
     - Define and document all security modifiers.
     - Example: [Unprotected.sol](https://github.com/trailofbits/not-so-smart-contracts/blob/master/unprotected_function/Unprotected.sol)
  3. **Developer Education:**
     - Educate developers about common vulnerabilities and attacks, such as reentrancy, unchecked math, timestamp dependence, and unchecked external calls.
  4. **Private Key Management:**
     - Use multisig wallets and define roles for operators and management accounts.
     - Ensure proper storage and usage of private keys.
  5. **QA Testing:**
     - Perform unit tests and other QA tests.
     - Implement fixes during development and use proxies and operators for deployed contracts.
     - Test against defined security requirements.
  6. **Security Testing:**
     - Conduct thorough security testing.
  7. **Compliance:**
     - Legal compliance (e.g., KYC for anti-money laundering).
     - Technical compliance (e.g., security requirements like PCI DSS).
     - Listing requirements (e.g., security audits).

#### Conclusion
- Web security SDLC practices are applicable to smart contracts.
- We are developing best practices and recommendations.
- Contact me if you want to participate in this effort.

#### Contacts
- **Twitter:** @rdchksec
- **WeChat:** @rdchksec
- **Email:** [PI:EMAIL]

---

This version of the text is more structured, clear, and professional, making it easier for the audience to follow and understand the key points.