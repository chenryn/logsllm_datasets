.i /proc/cmdline
arguments passed to the linux kernel at boot time.
often done via a boot manager such as
.br lilo (8)
or
.br grub (8).
.tp
.ir /proc/config.gz " (since linux 2.6)"
this file exposes the configuration options that were used
to build the currently running kernel,
in the same format as they would be shown in the
.i .config
file that resulted when configuring the kernel (using
.ir "make xconfig" ,
.ir "make config" ,
or similar).
the file contents are compressed; view or search them using
.br zcat (1)
and
.br zgrep (1).
as long as no changes have been made to the following file,
the contents of
.i /proc/config.gz
are the same as those provided by:
.ip
.in +4n
.ex
cat /lib/modules/$(uname \-r)/build/.config
.ee
.in
.ip
.i /proc/config.gz
is provided only if the kernel is configured with
.br config_ikconfig_proc .
.tp
.i /proc/crypto
a list of the ciphers provided by the kernel crypto api.
for details, see the kernel
.i "linux kernel crypto api"
documentation available under the kernel source directory
.i documentation/crypto/
.\" commit 3b72c814a8e8cd638e1ba0da4dfce501e9dff5af
(or
.i documentation/docbook
before 4.10;
the documentation can be built using a command such as
.ir "make htmldocs"
in the root directory of the kernel source tree).
.tp
.i /proc/cpuinfo
this is a collection of cpu and system architecture dependent items,
for each supported architecture a different list.
two common entries are \fiprocessor\fp which gives cpu number and
\fibogomips\fp; a system constant that is calculated
during kernel initialization.
smp machines have information for
each cpu.
the
.br lscpu (1)
command gathers its information from this file.
.tp
.i /proc/devices
text listing of major numbers and device groups.
this can be used by makedev scripts for consistency with the kernel.
.tp
.ir /proc/diskstats " (since linux 2.5.69)"
this file contains disk i/o statistics for each disk device.
see the linux kernel source file
.i documentation/iostats.txt
for further information.
.tp
.i /proc/dma
this is a list of the registered \fiisa\fp dma (direct memory access)
channels in use.
.tp
.i /proc/driver
empty subdirectory.
.tp
.i /proc/execdomains
list of the execution domains (abi personalities).
.tp
.i /proc/fb
frame buffer information when
.b config_fb
is defined during kernel compilation.
.tp
.i /proc/filesystems
a text listing of the filesystems which are supported by the kernel,
namely filesystems which were compiled into the kernel or whose kernel
modules are currently loaded.
(see also
.br filesystems (5).)
if a filesystem is marked with "nodev",
this means that it does not require a block device to be mounted
(e.g., virtual filesystem, network filesystem).
.ip
incidentally, this file may be used by
.br mount (8)
when no filesystem is specified and it didn't manage to determine the
filesystem type.
then filesystems contained in this file are tried
(excepted those that are marked with "nodev").
.tp
.i /proc/fs
.\" fixme much more needs to be said about /proc/fs
.\"
contains subdirectories that in turn contain files
with information about (certain) mounted filesystems.
.tp
.i /proc/ide
this directory
exists on systems with the ide bus.
there are directories for each ide channel and attached device.
files include:
.ip
.in +4n
.ex
cache              buffer size in kb
capacity           number of sectors
driver             driver version
geometry           physical and logical geometry
identify           in hexadecimal
media              media type
model              manufacturer\(aqs model number
settings           drive settings
smart_thresholds   ide disk management thresholds (in hex)
smart_values       ide disk management values (in hex)
.ee
.in
.ip
the
.br hdparm (8)
utility provides access to this information in a friendly format.
.tp
.i /proc/interrupts
this is used to record the number of interrupts per cpu per io device.
since linux 2.6.24,
for the i386 and x86-64 architectures, at least, this also includes
interrupts internal to the system (that is, not associated with a device
as such), such as nmi (nonmaskable interrupt), loc (local timer interrupt),
and for smp systems, tlb (tlb flush interrupt), res (rescheduling
interrupt), cal (remote function call interrupt), and possibly others.
very easy to read formatting, done in ascii.
.tp
.i /proc/iomem
i/o memory map in linux 2.4.
.tp
.i /proc/ioports
this is a list of currently registered input-output port regions that
are in use.
.tp
.ir /proc/kallsyms " (since linux 2.5.71)"
this holds the kernel exported symbol definitions used by the
.br modules (x)
tools to dynamically link and bind loadable modules.
in linux 2.5.47 and earlier, a similar file with slightly different syntax
was named
.ir ksyms .
.tp
.i /proc/kcore
this file represents the physical memory of the system and is stored
in the elf core file format.
with this pseudo-file, and an unstripped
kernel
.ri ( /usr/src/linux/vmlinux )
binary, gdb can be used to
examine the current state of any kernel data structures.
.ip
the total length of the file is the size of physical memory (ram) plus
4\ kib.
.tp
.ir /proc/keys " (since linux 2.6.10)"
see
.br keyrings (7).
.tp
.ir /proc/key\-users " (since linux 2.6.10)"
see
.br keyrings (7).
.tp
.i /proc/kmsg
this file can be used instead of the
.br syslog (2)
system call to read kernel messages.
a process must have superuser
privileges to read this file, and only one process should read this
file.
this file should not be read if a syslog process is running
which uses the
.br syslog (2)
system call facility to log kernel messages.
.ip
information in this file is retrieved with the
.br dmesg (1)
program.
.tp
.ir /proc/kpagecgroup " (since linux 4.3)"
.\" commit 80ae2fdceba8313b0433f899bdd9c6c463291a17
this file contains a 64-bit inode number of
the memory cgroup each page is charged to,
indexed by page frame number (see the discussion of
.ir /proc/[pid]/pagemap ).
.ip
the
.ir /proc/kpagecgroup
file is present only if the
.b config_memcg
kernel configuration option is enabled.
.tp
.ir /proc/kpagecount " (since linux 2.6.25)"
this file contains a 64-bit count of the number of
times each physical page frame is mapped,
indexed by page frame number (see the discussion of
.ir /proc/[pid]/pagemap ).
.ip
the
.ir /proc/kpagecount
file is present only if the
.b config_proc_page_monitor
kernel configuration option is enabled.
.tp
.ir /proc/kpageflags " (since linux 2.6.25)"
this file contains 64-bit masks corresponding to each physical page frame;
it is indexed by page frame number (see the discussion of
.ir /proc/[pid]/pagemap ).
the bits are as follows:
.ip
     0 - kpf_locked
     1 - kpf_error
     2 - kpf_referenced
     3 - kpf_uptodate
     4 - kpf_dirty
     5 - kpf_lru
     6 - kpf_active
     7 - kpf_slab
     8 - kpf_writeback
     9 - kpf_reclaim
    10 - kpf_buddy
    11 - kpf_mmap           (since linux 2.6.31)
    12 - kpf_anon           (since linux 2.6.31)
    13 - kpf_swapcache      (since linux 2.6.31)
    14 - kpf_swapbacked     (since linux 2.6.31)
    15 - kpf_compound_head  (since linux 2.6.31)
    16 - kpf_compound_tail  (since linux 2.6.31)
    17 - kpf_huge           (since linux 2.6.31)
    18 - kpf_unevictable    (since linux 2.6.31)
    19 - kpf_hwpoison       (since linux 2.6.31)
    20 - kpf_nopage         (since linux 2.6.31)
    21 - kpf_ksm            (since linux 2.6.32)
    22 - kpf_thp            (since linux 3.4)
    23 - kpf_balloon        (since linux 3.18)
.\" kpf_balloon: commit 09316c09dde33aae14f34489d9e3d243ec0d5938
    24 - kpf_zero_page      (since linux 4.0)
.\" kpf_zero_page: commit 56873f43abdcd574b25105867a990f067747b2f4
    25 - kpf_idle           (since linux 4.3)
.\" kpf_idle: commit f074a8f49eb87cde95ac9d040ad5e7ea4f029738
.ip
for further details on the meanings of these bits,
see the kernel source file
.ir documentation/admin\-guide/mm/pagemap.rst .
before kernel 2.6.29,
.\" commit ad3bdefe877afb47480418fdb05ecd42842de65e
.\" commit e07a4b9217d1e97d2f3a62b6b070efdc61212110
.br kpf_writeback ,
.br kpf_reclaim ,
.br kpf_buddy ,
and
.br kpf_locked
did not report correctly.
.ip
the
.ir /proc/kpageflags
file is present only if the
.b config_proc_page_monitor
kernel configuration option is enabled.
.tp
.ir /proc/ksyms " (linux 1.1.23\(en2.5.47)"
see
.ir /proc/kallsyms .
.tp
.i /proc/loadavg
the first three fields in this file are load average figures
giving the number of jobs in the run queue (state r)
or waiting for disk i/o (state d) averaged over 1, 5, and 15 minutes.
they are the same as the load average numbers given by
.br uptime (1)
and other programs.
the fourth field consists of two numbers separated by a slash (/).
the first of these is the number of currently runnable kernel
scheduling entities (processes, threads).
the value after the slash is the number of kernel scheduling entities
that currently exist on the system.
the fifth field is the pid of the process that was most
recently created on the system.
.tp
.i /proc/locks
this file shows current file locks
.rb ( flock "(2) and " fcntl (2))
and leases
.rb ( fcntl (2)).
.ip
an example of the content shown in this file is the following:
.ip
.in +4n
.ex
1: posix  advisory  read  5433 08:01:7864448 128 128
2: flock  advisory  write 2001 08:01:7864554 0 eof
3: flock  advisory  write 1568 00:2f:32388 0 eof
4: posix  advisory  write 699 00:16:28457 0 eof
5: posix  advisory  write 764 00:16:21448 0 0
6: posix  advisory  read  3548 08:01:7867240 1 1
7: posix  advisory  read  3548 08:01:7865567 1826 2335
8: ofdlck advisory  write \-1 08:01:8713209 128 191
.ee
.in
.ip
the fields shown in each line are as follows:
.rs
.ip (1) 4
the ordinal position of the lock in the list.
.ip (2)
the lock type.
values that may appear here include:
.rs
.tp
.b flock
this is a bsd file lock created using
.br flock (2).
.tp
.b ofdlck
this is an open file description (ofd) lock created using
.br fcntl (2).
.tp
.b posix
this is a posix byte-range lock created using
.br fcntl (2).
.re
.ip (3)
among the strings that can appear here are the following:
.rs
.tp
.b advisory
this is an advisory lock.
.tp
.b mandatory
this is a mandatory lock.
.re
.ip (4)
the type of lock.
values that can appear here are:
.rs
.tp
.b read
this is a posix or ofd read lock, or a bsd shared lock.
.tp
.b write
this is a posix or ofd write lock, or a bsd exclusive lock.
.re
.ip (5)
the pid of the process that owns the lock.
.ip
because ofd locks are not owned by a single process
(since multiple processes may have file descriptors that
refer to the same open file description),
the value \-1 is displayed in this field for ofd locks.
(before kernel 4.14,
.\" commit 9d5b86ac13c573795525ecac6ed2db39ab23e2a8
a bug meant that the pid of the process that
initially acquired the lock was displayed instead of the value \-1.)
.ip (6)
three colon-separated subfields that identify the major and minor device
id of the device containing the filesystem where the locked file resides,
followed by the inode number of the locked file.
.ip (7)
the byte offset of the first byte of the lock.
for bsd locks, this value is always 0.
.ip (8)
the byte offset of the last byte of the lock.
.b eof
in this field means that the lock extends to the end of the file.
for bsd locks, the value shown is always
.ir eof .
.re
.ip
since linux 4.9,
.\" commit d67fd44f697dff293d7cdc29af929241b669affe
the list of locks shown in
.i /proc/locks
is filtered to show just the locks for the processes in the pid
namespace (see
.br pid_namespaces (7))
for which the
.i /proc
filesystem was mounted.
(in the initial pid namespace,
there is no filtering of the records shown in this file.)
.ip
the
.br lslocks (8)
command provides a bit more information about each lock.
.tp
.ir /proc/malloc " (only up to and including linux 2.2)"
.\" it looks like this only ever did something back in 1.0 days
this file is present only if
.b config_debug_malloc
was defined during compilation.
.tp
.i /proc/meminfo
this file reports statistics about memory usage on the system.
it is used by
.br free (1)
to report the amount of free and used memory (both physical and swap)
on the system as well as the shared memory and buffers used by the
kernel.
each line of the file consists of a parameter name, followed by a colon,
the value of the parameter, and an option unit of measurement (e.g., "kb").
the list below describes the parameter names and
the format specifier required to read the field value.
except as noted below,
all of the fields have been present since at least linux 2.6.0.
some fields are displayed only if the kernel was configured
with various options; those dependencies are noted in the list.
.rs
.tp
.ir memtotal " %lu"
total usable ram (i.e., physical ram minus a few reserved
bits and the kernel binary code).
.tp
.ir memfree " %lu"
the sum of
.ir lowfree + highfree .
.tp
.ir memavailable " %lu (since linux 3.14)"
an estimate of how much memory is available for starting new
applications, without swapping.
.tp
.ir buffers " %lu"
relatively temporary storage for raw disk blocks that
shouldn't get tremendously large (20 mb or so).
.tp
.ir cached " %lu"
in-memory cache for files read from the disk (the page cache).
doesn't include
.ir swapcached .
.tp
.ir swapcached " %lu"
memory that once was swapped out, is swapped back in but
still also is in the swap file.
(if memory pressure is high, these pages
don't need to be swapped out again because they are already
in the swap file.
this saves i/o.)
.tp
.ir active " %lu"
memory that has been used more recently and usually not
reclaimed unless absolutely necessary.
.tp
.ir inactive " %lu"
memory which has been less recently used.
it is more eligible to be reclaimed for other purposes.
.tp
.ir active(anon) " %lu (since linux 2.6.28)"
[to be documented.]
.tp
.ir inactive(anon) " %lu (since linux 2.6.28)"
[to be documented.]
.tp
.ir active(file) " %lu (since linux 2.6.28)"
[to be documented.]
.tp
.ir inactive(file) " %lu (since linux 2.6.28)"
[to be documented.]
.tp
.ir unevictable " %lu (since linux 2.6.28)"
(from linux 2.6.28 to 2.6.30,
\fbconfig_unevictable_lru\fp was required.)
[to be documented.]
.tp
.ir mlocked " %lu (since linux 2.6.28)"
(from linux 2.6.28 to 2.6.30,
\fbconfig_unevictable_lru\fp was required.)
[to be documented.]
.tp
.ir hightotal " %lu"
(starting with linux 2.6.19, \fbconfig_highmem\fp is required.)
total amount of highmem.
highmem is all memory above \(ti860 mb of physical memory.
highmem areas are for use by user-space programs,
or for the page cache.
the kernel must use tricks to access
this memory, making it slower to access than lowmem.
.tp
.ir highfree " %lu"
(starting with linux 2.6.19, \fbconfig_highmem\fp is required.)
amount of free highmem.
.tp
.ir lowtotal " %lu"
(starting with linux 2.6.19, \fbconfig_highmem\fp is required.)
total amount of lowmem.
lowmem is memory which can be used for everything that
highmem can be used for, but it is also available for the
kernel's use for its own data structures.
among many other things,
it is where everything from
.i slab
is allocated.
bad things happen when you're out of lowmem.
.tp
.ir lowfree " %lu"
(starting with linux 2.6.19, \fbconfig_highmem\fp is required.)
amount of free lowmem.
.tp
.ir mmapcopy " %lu (since linux 2.6.29)"
.rb ( config_mmu
is required.)
[to be documented.]
.tp
.ir swaptotal " %lu"
total amount of swap space available.
.tp
.ir swapfree " %lu"
amount of swap space that is currently unused.
.tp
.ir dirty " %lu"
memory which is waiting to get written back to the disk.
.tp
.ir writeback " %lu"
memory which is actively being written back to the disk.
.tp
.ir anonpages " %lu (since linux 2.6.18)"
non-file backed pages mapped into user-space page tables.
.tp
.ir mapped " %lu"
files which have been mapped into memory (with
.br mmap (2)),
such as libraries.
.tp
.ir shmem " %lu (since linux 2.6.32)"
amount of memory consumed in
.br tmpfs (5)
filesystems.
.tp
.ir kreclaimable " %lu (since linux 4.20)"
kernel allocations that the kernel will attempt to reclaim
under memory pressure.
includes
.i sreclaimable
(below), and other direct allocations with a shrinker.
.tp
.ir slab " %lu"
in-kernel data structures cache.
(see
.br slabinfo (5).)
.tp
.ir sreclaimable " %lu (since linux 2.6.19)"
part of