A
0
4
[10]
-gcc_except_table PROGB17S
PROGBITS
080b99e8
996060
000010
00 KAT
00
A
0
0
[12]
[11]
.tbss
. tdata
NOBITS
080b99f8
0709f8
000018
00 WAT
4
PROGBITS
080b99f8
876060
000008
00
WA
4
[13]
.ctors
PROGBITS
080b9a00 070a00 00000c
00
WA
0
0
4
[15]
[14 ]
.dtors
PROGBITS
080b9a0c
009060
000004
00
WA
0
4
[16]
-jcr
.data.rel.ro
PROGBITS
080b9a10 070a10
00002e
00
WA
U
4
-got
080b9a3c
070a3c
000008
04
WA
0
4
[18]
[17]
-got.plt
PROGBITS
PROGBITS
080b9a60 070a60
080b9a44
070a44
00000
04
WA
0
0 32
4
[19]
.data
PROGBITS
001ad4
000720
00
00
WA
0
[20]
.bss
NOBITS
080ba180
071180
WA
0
0 32
[21]
_1ibc_freeres_pt
NOBITS
080bbc54
071180
071180
000014
PROGBITS
00000000
00
WA
. conment
U
[22]
.debug_aranges
PROGBITS
00000000
073f70 00005800
1
[24]
[23 ]
seueuqndBnqap*
PROGBITS
00000000 073fc8 000025 00
程序员的自我修养一
链接、装载与库
---
## Page 186
6.4进程虚存空间分布
163
[25]
debug_info
PROGBITS
00000000 073fed 0001ad 00
[26]
. debug_abbrev
PROGBITS
00000000 07419a 000066 00
Q
[62]
-debug_line
PROGBITS
00000000 074200 00013d 00
V
0
0
[28]
[29]
sebue."Bnqap'
debug_str
PROGBITS
00000000 07433d 0000bb 01
PROGBITS
00000000 0743f8 000048
KS
00
[30]
.shstrtab
STRTAB
00000000 074440000152 00
[31].symtab
SYMTAB
00000000 074abc 007ab0 10
[32].strtab
STRTAB
00000000 07c56c 006e68 00
868 26
Key to Flags:
w(write), A (alloc), x [executel,M (merge), S (strings)
0 (extra Os processing required) o (0s specific), p (processor specifie)
I (info), L (link order), G (groupl, × (unknown)
我们可以使用readelf命令米查看ELF的“Segment”。正如描述“Section”属性的结构
叫做段表，描述“Segment”的结构叫程序头（ProgramHeader），它描述了ELF文件该如
何被操作系统映射到进程的虚拟空间：
$readelf -1 SectionMapping.elf
B1f file type is Ex8C (Executable file)
Entry point 0x8048110
There are 5 program headers, 8tarting at offset 52
Progran Headers1
Type
Of fset
virtAddr
PhysAddr
FileSiz MenSiz Flg Align
LOAD
LOAD
0x000000 0x08048000 0x08048000 0x709e5 0x709e5 R E 0x1000
0x0000d40x080480d40x080480d4 0x00020 0x00020 R
NOTE
TLS
0x0709e8 0x080b99e8 0x080b99e8 0x00010 0x00028 R
0x4
0x4
GNU_STACK
0x0000000x000000000x000000000x000000x00000 RW
0x4
Section to Segment napping:
Segment Sections...
_1ibc_subfreeres _libc_atexit ,eh_frane -gcc_except_table
00
.note.ABI-tag .init .text
__libc_freeres_fn .fini ,rodata
_libc_freeres_ptre
01
.tdata ,ctors .dtors .jcr .data.rel.ro .got .got.plt .data .bss
02
-note.ABI-tag
03
.tdata ,tbss
04
我们可以看到，这个可执行文件中共有5个Segment。从装载的角度看，我们目前只关
心两个"LOAD“类型的Segment，因为只有它是需要被映射的，其他的诸如"NOTE”、“TLS”、
“GNU_STACK”都是在装载时起辅助作用的，我们在这里不详细展开。可以用图6-8米表
示“SectionMapping.elf”可执行文件的段与进程虚拟空间的映射关系。
由图6-8可以发现，“SectionMappingelf”被重新划分成了三个部分，有一些段被归入
可读可执行的，它们被统一映射到一个VMA0：另外一部分段是可读可写的，它们被映射
到了VMA1：还有一部分段在程序装载时没有被映射的，它们是一些包含调试信息和字符
串表等段，这些段在程序执行时没有用，所以不需要被映射，很明显，所有相同属性的
“Section”被归类到一个“Segment”，并且映射到同一个VMA。
程序员的自我修养一链接、装载与库
---
## Page 187
164
第6章可执行文件的装载与进程
所以总的来说，“Segment”和“Section”是从不同的角度来划分同一个ELF文件。这
个在ELF中被称为不同的视图（View），从“Section”的角度来看ELF文件就是链接视图
（Linking View），从“Scgment”的角度来看就是执行视图（Execution View）。当我们在谈
到ELF装载时，“段”专门指“Segment”：而在其他的情况下，“段”指的是“Section”。
.sirab
symtab
shstrtab
sobueBnqop
debug_str
debug_line
Operating
System
debug_info
debug_arange
libc_freeres_ptrs
.bss
data
go.pt
got
data.rel.ro
jor
.diors
User
ctors
Process
Dss
.ndata
gcc_axoept_table