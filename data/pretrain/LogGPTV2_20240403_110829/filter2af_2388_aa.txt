**译者：知道创宇404实验室翻译组**  
**原文链接：**
### 摘要：
Bitdefender的研究人员发现Interplanetary Storm Golang僵尸网络可以用作高度匿名的proxy-network-as-a-service和基于订阅的模型租用。攻击者精通使用Golang和开发实践，并且善于隐藏管理节点。Interplanetary
Storm还有一个复杂的、模块化的设备，该设备用来寻找新目标、推送和同步新版本恶意软件，对被感染者执行任意命令并与C2服务器通信公开web API。
我们估计僵尸网络的规模在9000台左右。绝大多数使用的是安卓系统，大约1%使用的是Linux。极少数的设备的操作系统是Windows，但它们似乎运行的是旧版本的恶意软件。在新的迭代中，IPStorm通过攻击基于Unix的系统（Linux、Android和Darwin）运行面向Internet的SSH服务器弱凭据或不安全的ADB服务器。从地理分布来看，这个僵尸网络似乎建立在亚洲，但是它遍布全球，受害者在巴西、乌克兰、美国、瑞典和加拿大等国家。
### 主要发现
  * 僵尸网络可能作为匿名代理网络租用
  * 可将受损设备用作代理
  * 僵尸网络遍布全球
  * 采用多层次订阅型模式进行租赁
  * 迄今已有100多个规范修订
  * 僵尸网络背后的基础设施
### 介绍
2019年6月，来自[Anomali](https://www.anomali.com/blog/the-interplanetary-storm-new-malware-in-wild-using-interplanetary-file-systems-ipfs-p2p-network
"Anomali")的研究人员首次报道了Interplanetary
Storm（IPStorm）。2020年5月，当这个僵尸网络攻击我们的SSH蜜罐时，我们发现了它。从那以后，该恶意软件一直在不断发展。
在其新的迭代中，IPStorm通过攻击基于Unix的系统（Linux、Android和Darwin）进行传播，这些系统运行面向互联网的SSH服务器，而这些SSH服务器具有弱凭据或不安全的ADB服务器。
它的功能包括为设备后门（运行shell命令）和生成恶意流量（扫描互联网和感染其他设备）。我们已经确定僵尸网络的主要目的是将被感染的设备放入代理服务器中，这是他们营利计划的一部分。具有这一目标的僵尸网络在过去已经出现过（例如：[dark_neunexus](https://labs.bitdefender.com/2020/04/new-dark_nexus-iot-botnet-puts-others-to-shame/
"dark_neunexus")、[ngiweb](https://blog.netlab.360.com/an-analysis-of-linux-ngioweb-botnet-en/ "ngiweb")、[Gwmndy](https://blog.netlab.360.com/some-fiberhome-routers-are-being-utilized-as-ssh-tunneling-proxy-nodes-2/
"Gwmndy")）。
### 时间线
IPStorm的发展可以分为三个阶段：
  * Major 0, Minor 0：Anomali去年报道，专门针对Windows
  * Major 0, Minor 1：今年出现（2020年5月），目标是Unix衍生系统
  * Major 0, Minor 2：最新进展（2020年9月），从publish-subscribe模式转换而来
在撰写本文时，最新版本是0.2.05a。
### Bot生命周期
Bot启动代码初始化IPFS节点并启动专用于Bot的每个子模块。它将恶意程序进程的oom_adj分数设置为-17，如果系统可用内存不足，这样可以确保不会被终止。然后，它确保只有一个恶意软件实例在设备上运行。任何匹配进程都将被终止，并且它的可执行文件已被删除。
一个2048位RSA密钥对产生，并存储在文件系统的可写路径中。此密钥属于IPFS节点并具有唯一标识。节点被实例化并启动引导进程，使IPFS网络中的其他节点可以访问它。与僵尸网络中其他对等方的连接是通过定期“announcing”自己来确保的，除此之外，它寻找发布相同公告的对等方（更多信息请参阅“P2P通信”部分）。
通过在IPFS上收集指纹信息，我们从info主题中检索到这样一个条目，示例如下（其中有些信息是为隐私而编辑的）：
     “T” : 1592892637,
     “HostID” : “Qmf4[________________redacted________________]”,
     “Version” : “0.1.81a”,
     “Platform” : “linux-arm7”,
     “SystemInfo” : {
     “GoOS” : “linux”,
     “Kernel” : “Linux”,
     “Core” : “4.19.97-v7+”,
     “Platform” : “unknown”,
     “OS” : “GNU/Linux”,
     “Hostname” : “raspbx”,
     “CPUs” : 4
     },
     “Uid” : “0”,
     “Gid” : “0”,
     “UserName” : “root”,
     “UserDisplayName” : “root”,
     “UserHomeDir” : “/root”,
     “IsAdmin” : true,
     “ExecutablePath” : “/usr/bin/storm”,
     “InstallationPath” : “/usr/bin/storm”,
     “ComputerID” : “”,
     “LocalIPs” : null,
     “ExternalIP” : “[redacted]”,
     “Processes” : null
    }
另一个周期的goroutine的任务是在Bot的新版本可用时执行更新。在这种情况下，更新后的文件写入文件系统，重新建立恶意软件的持久性并重新启动进程。
它的持久性取决于操作系统。
  * 在Linux上，它使用[开源守护程序包](https://github.com/takama/daemon "开源守护程序包")创建一个名为storm的服务
  * 在Android上，它以读写方式重新装载文件系统，并覆盖/system/bin/install-recovery.sh文件
  * 在Darwin上，没有实现持久性方法
### P2P通信
在进行对等点之间的通信时，IPStorm利用了libp2p over提供的多种机制IPFS:
  * topics
  * content routing (node discovery)
  * libp2p protocols
针对所有节点的消息使用不同的方法（版本更新、文件校验和、具有特殊角色节点的IDs）和用于特定节点的消息（扫描目标、代理请求、shell命令）。
在第一种方法中，消息发布在主题上，所有节点都订阅该主题并处理信息。在DDB（分布式数据库）的情况下，发布在主题上的消息用于在所有节点。虽然消息可能会因其在网络中的传播方式而无序，但是包含时间戳使每个节点只保留给定密钥的最新值。确保同行Bot可以使用时间戳进行适当的协调，它通过从一个公共列表中查询一个随机条目来更新它的时间NTP服务器。
第二种方法适用于扫描模块，例如：中央实体发出扫描命令，把目标分配给机器人。这是通过使用IPStorm特有的协议连接到每个Bot来实现的。
### 主题
主题是libp2p [Publish-Subscribe](https://docs.libp2p.io/concepts/publish-subscribe/ "Publish-Subscribe")模式实现的一部分。IPStorm使用以下主题：
从0.2.*版本开始，IPStorm放弃了这些主题，转而使用web API模块进行集中化设计。
### 协议
当一个对等点想要打开与另一个对等点的直接连接时，libp2p[协议](https://docs.libp2p.io/concepts/protocols/
"协议")就会发挥作用。源拨号指定多[地址](https://docs.libp2p.io/concepts/addressing/
"地址")和协议的目标对等方。协议用于标识在目标节点中调用哪个处理程序，目标节点只接受其支持的协议的连接。
IPStorm定义了一套自己的协议：
### 节点发现
libp2p提供的内容路由接口可用于对等发现。节点将自己公布为某些CID（内容ID）的提供者，同样地，搜索提供者，定位对等节点。这是通过[go-libp2p-kad-dht](https://github.com/libp2p/go-libp2p-kad-dht "go-libp2p-kad-dht")（routing.FindProviders）提供的接口直接与CIDs合作来实现的。[go-libp2p-discovery](https://github.com/libp2p/go-libp2p-discovery "go-libp2p-discovery")提供了另一种方法，使用可以转换为CIDs（routing.FindPeers,
routing.Advertise）的名称空间。
对于IPStorm使用的每种类型，我们列出：
### Relays
在0.1.43a和0.1.51a之间的某个点，IPStorm引入了对电路Relays的支持。这可能是为了提高NAT之后的节点的可达性，或者试图隐藏管理节点。在该功能实现后不久，大多数管理节点不再发布其IP地址，而是使用Relays电路。
例如，`qmeb3x55maokhzfzfysuhfgkzwaz3zftqcqz6qiaeqamo7a2`列出以下地址（除其他外）：
`/ip4/78.x.x.120/tcp/52202/p2p/QmVoDwmbfwSUPT3ds5ytWRwhoWZkzgE9qFHiYHfJQ5cAnm/p2pcircuit/p2p/Qmeb3X55MaoKhZfYsUHFgkZWAz3ZFtQCQz6qiaEqamo7a2`
这意味着78.x.x.120:52202处的节点（ID为QmVoDwmbfwSUPT3ds5ytWRwhoWZkzgE9qFHiYHfJQ5cAnm的storm节点）用作与Qmeb3X55MaoKhZfYsUHFgkZWAz3ZFtQCQz6qiaEqamo7a2建立连接。
自从版本0.1.85a以来，这个特性的使用已经减少了，大多数节点都列出了它们的外部IP。然而，一些节点仍然隐藏在中继后面，在某些情况下，中继不属于僵尸网络。另一方面，另一个短期的尝试就是用域来隐藏所涉及的管理节点IP地址。这些域是用[DNSPod](http://www.dnspod.com/docs/domains.html
"DNSPod")（域名注册服务）生成的，用于在DDB主题上作为代理后端播发的多个地址：
    /dns4/splendidobed.site/tcp/443/ipfs/QmViHGaXaG5JzbvH2Xs1Ro19fvoKG1KqpPGMYWLc4ckEAV
    /dns4/spenso.me/tcp/443/ipfs/QmViHGaXaG5JzbvH2Xs1Ro19fvoKG1KqpPGMYWLc4ckEAV
通过它们的配置，IPStorm节点可以同时使用中继器进行出站连接（EnableAutoRelay（））和节点充当中继跃点（EnableRelay(circuit.OptHop)）。如果想要使用IPStorm节点作为跃点，必须完成握手：
  * 使用/strelayp/1.0.0协议连接到继电器
  * 发送字符串“HSR”
  * 继电器应响应“+\n”
启用了此功能的节点（并非所有版本都是这样）在DDB上或使用特定的发现命名空间（更多内容请参阅“节点发现”部分）。
### Modules
IPStorm版本0.2.05a中的包：
    Packages:
    main
    storm/backshell
    storm/ddb
    storm/filetransfer
    storm/logging