可能没有必要更详细地探索 Papertrail。这是一种直观、易于使用且记录良好的服务。如果你选择使用它，我相信你会弄清楚细节的。目前，在我们开始探索替代方案之前，我们将删除 DaemonSet 和 ConfigMap。
```
 1  kubectl delete \
 2    -f logging/fluentd-papertrail.yml
```
接下来，我们将探讨云提供商提供的日志解决方案。请直接跳到 *GCP Stackdriver* 、 *AWS CloudWatch* 或 *Azure 日志分析*。如果您不使用这三个提供程序中的任何一个，您可以完全跳过它们，直接进入*通过弹性搜索、Fluentd 和 Kibana* 子章节探索集中日志记录。
# 将 GCP·斯塔克德里弗与 GKE 星团结合
如果您正在使用 GKE 集群，日志记录已经设置好了，尽管您可能不知道。默认情况下，每个 GKE 群集都默认带有一个 Fluentd DaemonSet，该 DaemonSet 配置为将日志转发到 GCP stack drive。它在`kube-system`命名空间中运行。
让我们描述一下 GKE 的 Fluentd DaemonSet，看看是否有我们可能找到的有用信息。
```
 1  kubectl -n kube-system \
 2    describe ds -l k8s-app=fluentd-gcp
```
输出限于相关部分，如下所示。
```
...
Pod Template:
  Labels:     k8s-app=fluentd-gcp
              kubernetes.io/cluster-service=true
              version=v3.1.0
...
  Containers:
   fluentd-gcp:
    Image: gcr.io/stackdriver-agents/stackdriver-logging-agent:0.3-1.5.34-1-k8s-1
    ...
```
我们可以看到，在其他产品中，DaemonSet 的 Pod 模板有标签`k8s-app=fluentd-gcp`。我们很快就需要它。另外，我们可以看到其中一个容器是基于`stackdriver-logging-agent`映像的。正如 Papertrail 扩展 Fluentd 一样，谷歌也做了同样的事情。
既然我们知道 Stackdriver 特定的 Fluentd 作为 DaemonSet 在我们的集群中运行，那么合乎逻辑的结论是，已经有一个用户界面可以用来浏览日志。
用户界面确实是可用的，但是在我们看到它运行之前，我们将输出 Fluentd 容器的日志，并验证一切都如预期的那样工作。
```
 1  kubectl -n kube-system \
 2    logs -l k8s-app=fluentd-gcp \
 3    -c fluentd-gcp
```
除非您已经启用了 Stackdriver 日志 API，否则输出应该至少包含一条类似于下面的消息。
```
...
18-12-12 21:36:41 +0000 [warn]: Dropping 1 log message(s) error="7:Stackdriver Logging API has not been used in project 152824630010 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/logging.googleapis.com/overview?project=152824630010 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry." error_code="7"
```
幸运的是，这个警告不仅告诉了我们问题是什么，还告诉了我们该怎么做。在您最喜欢的浏览器中打开日志条目中的链接，然后单击“启用”按钮。
现在我们启用了 Stackdriver 日志 API，Fluentd 将能够在那里发送日志条目。我们所要做的就是等待一两分钟，直到行动传播开来。
让我们看看 Stackdriver 用户界面。
```
 1  open "https://console.cloud.google.com/logs/viewer"
```
请在按标签或文本搜索栏中键入`random-logger`，并从下拉列表中选择 GKE 容器。
输出应该显示所有包含`random-logger`文本的日志。
![](img/6e1b7844-b066-4a75-8bf5-3e131aba34ff.png)
Figure 7-4: GCP Stackdriver logs screen
我们不会详细讨论如何使用 Stackdriver。这很简单，希望也很直观。所以，我会留给你更详细地探索它。重要的是，这与我们在 Papertrail 上所经历的非常相似。大多数差异都是表面的。
如果你用的是 GCP，斯塔克德里弗已经准备好等你了。因此，将其用于任何其他第三方解决方案可能是有意义的。Stackdriver 不仅包含来自集群的日志，还包含所有 GCP 服务(例如负载平衡器)的日志。这可能是两种解决方案的显著区别。这对斯塔克德里弗来说是一笔巨大的奖金。尽管如此，在做决定之前还是要检查一下价格。
# 将 AWS 云观察与 EKS 集群相结合
与 GKE 将伐木解决方案整合成一个集群不同，EKS 要求我们建立一个解决方案。它确实提供了 CloudWatch 服务，但是我们需要确保日志是从我们的集群运送到那里的。
就像以前一样，我们将使用 Fluentd 收集日志并将其发送到 CloudWatch。或者，更准确地说，我们将使用专门为 CloudWatch 构建的 Fluentd 标记。您可能已经知道，我们还需要一个允许 Fluentd 与 CloudWatch 通信的 IAM 策略。
总之，我们将要进行的设置将非常类似于我们使用 Papertrail 所做的设置，只是我们将在 CloudWatch 中存储日志，并且我们将不得不在创建 AWS 权限方面付出一些努力。
在我们继续之前，我将假设您还有在`eks-logging.sh`([https://Gist . github . com/vfarcic/a 783351 fc 9a 3637 a 291346 DD 4 BC 346 E7](https://gist.github.com/vfarcic/a783351fc9a3637a291346dd4bc346e7))Gist 中使用的环境变量`AWS_ACCESS_KEY_ID`、`AWS_SECRET_ACCESS_KEY`和`AWS_DEFAULT_REGION`。如果没有，请创建它们。
我们走吧。
我们需要创建一个新的 AWS **身份和访问管理**(**IAM**)([https://aws.amazon.com/iam/](https://aws.amazon.com/iam/))策略。为此，我们需要找到 IAM 的角色，为此，我们需要 IAM 概要文件。如果你对此感到困惑，知道你不是唯一一个可能会有所帮助。AWS 权限一点也不简单。然而，这不是本章的主题(也不是本书的主题)，所以我将假设至少对 IAM 的工作原理有一个基本的了解。
如果我们对创建 IAM 策略的路线进行逆向工程，我们首先需要的是概要文件。
```
 1  PROFILE=$(aws iam \
 2    list-instance-profiles \
 3    | jq -r \
 4    ".InstanceProfiles[]\
 5    .InstanceProfileName" \
 6    | grep eksctl-$NAME-nodegroup-0)
 7
 8  echo $PROFILE
```
输出应该类似于下面的输出。
```
eksctl-devops25-nodegroup-0-NodeInstanceProfile-SBTFOBLRAKJF
```
既然我们知道了概要文件，我们就可以用它来检索角色了。
```
 1  ROLE=$(aws iam get-instance-profile \
 2    --instance-profile-name $PROFILE \
 3    | jq -r ".InstanceProfile.Roles[] \
 4    | .RoleName")
 5
 6  echo $ROLE
```
有了这个角色，我们终于可以创建策略了。我已经创建了一个我们可以使用的，所以让我们快速看看它。
```
 1  cat logging/eks-logs-policy.json
```
输出如下。
```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
```
如你所见，这项策略没有什么特别之处。它定义了从我们的集群内部与`logs` (CloudWatch)交互所需的权限。
所以，让我们继续前进，创造它。
```