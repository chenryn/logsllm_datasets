used these features to classify a large corpus of 2,291,898
unique free Android apps. We collected these apps from the
Google Play Store between August 2015 and May 2017 using
a crawler. The crawler starts with a set of URL seeds and
subsequently follows the recommendation links to explore the
store. Our crawler revisits previously found apps once per day
and downloads them only if new versions are available. Our
analysis considered only the latest version of each app.
1) Features: We extracted unique features of application
generators using differential analysis between a baseline app5
and sample apps from each application generator. We then
manually reverse-engineered all sample apps and created a diff
between our baseline app and the sample apps based on the
components of a typical Android app. To create this diff, we
ﬁrst analyzed the composition of an Android app, and then
identiﬁed all parts that can be used to tell apart generated
apps and manually developed apps. Our analysis resulted in
the following four features (the latter two can be sub-classiﬁed,
totaling six distinct Fingerprinting Features, see Table 1):
App Package Names—The ﬁrst distinctive feature of apps
is the app package name. Package names are unique text
5We used the default Android IDE Android Studio to create a single-activity
“Hello World” Android app that did not include any external third-party library
636
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply. 
Table 1: Classiﬁcation and ﬁngerprinting of online services sorted by category and app count. For each AppGen, we found
multiple distinguishing ﬁngerprint features, but, in all cases, a single feature is already sufﬁcient to uniquely classify an
application generator.
Classiﬁcation
Fingerprinting Features
m
r
o
f
t
a
l
p
-
i
t
l
u
M
e
r
a
w
e
e
r
F
s
t
n
e
n
o
p
m
o
C
g
n
i
h
s
i
l
b
u
P
e
m
a
N
e
g
a
k
c
a
P
e
c
a
p
s
e
m
a
N
e
d
o
C
e
g
a
k
c
a
P
n
i
s
e
l
i
F
t
n
e
t
n
o
C
e
l
i
F
.
t
r
e
C
.
n
g
i
S
t
c
e
j
b
u
S
.
t
r
e
C
.
n
g
i
S
)
s
p
p
a
f
o
#
(
t
e
k
r
a
M
60,314
45,850
29,190
27,130
25,338
15,281
10,894
8,242
8,074
4,445
4,409
3,622
2,638
2,273
1,785
1,191
1,058
846
700
581
386
337
216
158
152
100
3
3
URL
http://seattleclouds.com/
http://www.andromo.com/
http://www.appsgeyser.com/
http://www.biznessapps.com/
http://appinventor.mit.edu/explore/
http://www.appyet.com/
http://www.como.com/
http://en.tobit.com/chayns
http://www.mobincube.com/
http://www.appypie.com/
http://www.appmachine.com/
http://www.goodbarber.com/
http://www.shoutem.com/
http://appyourself.net/
http://www.mippin.com/appfactory/
http://www.apps-builder.com/
http://appmakr.com/
https://appery.io/
http://www.appsbar.com/
http://mobileroadie.com/
http://www.appgyver.io
http://www.appconfector.de
http://rhomobile.com/
http://www.appsme.com/
http://www.apptitan.de/
http://www.applicationcraft.com/
http://www.paradiseapps.net/
http://eachscape.com/
Online Service
Seattle Cloud
Andromo
Apps Geyser
Biznessapps
Appinventor
AppYet
Como
Tobit Chayns
Mobincube
Appy Pie
Appmachine
Good Barber
Shoutem
App Yourself
Mippin App Factory
Apps Builder
Appmakr
appery.io
Apps Bar
Mobile Roadie
App Gyver
Appconfector
Rho Mobile Suite
Appsme
App Titan
Applicationcraft
Paradise Apps
Eachscape
= yes/applies; ;
= applies partly;
= no/does not apply
strings that are used by Google Play to unambiguously identify
apps. Application generators often use patterns for generated
apps that in turn can be used as a distinctive feature, e.g.,
com.Tobit.* or {com|net}.andromo.dev*.
Code Namespaces—Java code is organized in namespaces
and similar to package names, application generators may
use particular namespaces that we can leverage for our
classiﬁcation. Andromo apps,
include code
namespaces that contain the substring .andromo.dev or
the preﬁx com.andromo. A similar example are Tobit
Chayns apps, which include code namespaces with the pre-
ﬁx com.Tobit.android.slitte.Slitte. In contrast,
Apps Geyser apps include code namespaces with the preﬁx
com.w*, which is not suitable for classiﬁcation purposes due
to its ambiguity (see Section III-B2 for further details).
for example,
Signing Keys—Before uploading an app to Google Play,
APKs must be digitally signed. This is a security mechanism
to ensure that app updates are distributed by the same entity
(e.g., developer). A single key is often used to sign multiple
apps, e.g., Seattle Cloud uses a unique key to sign all its
apps. We can use this single-key pattern to ﬁngerprint the
application generator. Whenever application generators use
distinct keys, we can still use further information about
the certiﬁcate to ﬁngerprint the app, e.g., if all keys have
the same subject. AppYet apps, for instance, all share the
same certiﬁcate subject /C=CA /ST=ON /L=Oakville
/O=AppYet /CN=www.appyet.com.
Files—In addition to an app’s code, apps include a list of ﬁles
such as images, CSS, or conﬁguration ﬁles. These ﬁles can
be used for the classiﬁcation as well. For example, AppyPie
apps include the ﬁle appypie.xml in the assets/www
app folder. We moreover use ﬁle content for the classiﬁcation,
e.g., we identify AppsGeyser apps, by verifying whether
the elements  and 
of res/raw/configuration.xml contain the URL
appgeyser.com.
2) Methodology: We start our classiﬁcation by extracting
the aforementioned features from our set of sample apps.
We discovered that for each AppGen there are multiple
distinguishing features that allow to link the app back to its
generator. We further found that in all cases a single feature
637
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1: Download counts for all apps from the top 5 OAGs
using buckets provided by Google Play.
would already be sufﬁcient to unambiguously determine the
originating service. The overall classiﬁcation of application
generators with respect to their features is depicted in Table 1
in the “Fingerprinting Features” columns.
As an orthogonal investigation, we also ﬁngerprinted apps
that have not been created by means of application generators.
In this analysis, we considered the two major platforms for
Android app development: Eclipse ADT6—support ended in
August 2015—and Android Studio7. We manually investigated
apps developed with both IDEs similarly as described for ap-
plication generators. Our analysis revealed that Android Studio
apps can reliably be identiﬁed based on the ﬁles’ structure.
Apps developed and compiled with Android Studio include
a folder res/mipmap that stores launcher images. This
folder structure was introduced in Android Studio 1.18. Hence,
only apps developed with at least version 1.1 of Android