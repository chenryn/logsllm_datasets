title:Halting Password Puzzles: Hard-to-break Encryption from Human-memorable
Keys
author:Xavier Boyen
Halting Password Puzzles
Hard-to-break Encryption from Human-memorable Keys
XAVIER BOYEN
Voltage Security
PI:EMAIL
Abstract
We revisit the venerable question of “pure password”-
based key derivation and encryption, and expose security
weaknesses in current implementations that stem from
structural ﬂaws in Key Derivation Functions (KDF). We
advocate a fresh redesign, named Halting KDF (HKDF),
which we thoroughly motivate on these grounds:
1. By letting password owners choose the hash itera-
tion count, we gain operational ﬂexibility and eliminate
the rapid obsolescence faced by many existing schemes.
2. By throwing a Halting-Problem wrench in the
works of guessing that iteration count, we widen the se-
curity gap with any attacker to its theoretical optimum.
HKDFs are practical and universal:
3. By parallelizing the key derivation, we let legiti-
mate users exploit all the computational power they can
muster, which in turn further raises the bar for attackers.
they work with
any password, any hardware, and a minor change to
the user interface. As a demonstration, we offer real-
world implementations for the TrueCrypt and GnuPG
packages, and discuss their security beneﬁts in concrete
terms.
1
Introduction
For a variety of reasons, it is becoming increasingly de-
sirable for people leading an electronic lifestyle to attend
to a last bastion of privacy: a stronghold defended by
secret-key cryptography, and whose key exists only in
its guardian’s mind. To this end, we study how “pure
password”-based encryption can best withstand the most
dedicated ofﬂine dictionary attacks—regardless of pass-
word strength.
1.1 Human-memorable Secrets
Passwords. Passwords in computer security are the
purest form of secrets that can be kept in human memory,
independently of applications and infrastructures. They
can be typed quickly and discreetly on a variety of de-
vices, and remain effective in constrained environments
with basic input and no output capabilities. Not sur-
prisingly, passwords and passphrases have become the
method of choice for human authentication and mental
secret safekeeping, whether locally or remotely, in an on-
line or ofﬂine setting.
Passwords have the added beneﬁt to work on diminu-
tive portable keypads that never leave the user’s con-
trol, guaranteeing that the secret will not be intercepted
by a compromised terminal. User-owned and password-
activated commercial devices include the DigiPass [12]
for authorizing bank transactions, the CryptoCard [10]
for generating access tokens, and the ubiquitous cellular
phone which can be used for making payments via SMS
over the GSM network.
Nevertheless, the widespread use of passwords for se-
curing computer systems is often deplored by system ad-
ministrators, due to their low entropy and a propensity to
being forgotten unless written down, which in turn leads
to onerous policies that users deem too difﬁcult to fol-
low [43]. In this work, by contast, we seek not to change
people’s habits in signiﬁcant ways; rather, our goal is to
maximize security for passwords that are actually used,
no matter how weak these might be.
Alternatives. A number of alternatives have been sug-
gested to alleviate the limitations of passwords,
in-
cluding inkblots [39], visual recognition [29], client-
side puzzles [21, 11], interactive challenges [32], word
labyrinths [6], but any of them has yet to gain much trac-
tion.
Multi-factor authentication systems seek not to replace
passwords, but supplement them with a second or third
form of authentication, which could be a physical token
(e.g., SecurID [38]) or a biometric reading. These ap-
proaches are mostly effective in large organizations.
Compelling as these sophisticated proposals may be,
USENIX Association
16th USENIX Security Symposium
119
multi-factor authentication is no panacea, and the var-
ious mental alternatives to passwords tend to be slow,
complex, and error-prone, and depend on a particular
medium or infrastructure. For instance, mental puzzles
typically require multiple rounds of interaction to gather
enough entropy, and image recognition tasks will never
work without a display. Simple portable keypads are
pretty much out of the question. The usual criticisms
that have been levelled at passwords, such as low entropy
and poor cognitive retention, apply to these alternatives
as well.
1.2 Application Contexts
Online Uses.
In the online setting, the main use of
passwords is for remote user authentication. Password-
based Encrypted Key Exchange (EKE) [5] and Authenti-
cated Key Exchange (PAKE) [17] protocols enable high-
entropy session keys to be established between two or
more parties that hold a low-entropy shared secret, ide-
ally with mutual authentication. The threat model is the
online attack, conducted by an opponent who can ob-
serve and corrupt the lines of communication, and some-
times also the transient state of a subset of the partici-
pants, but without access to the long-term storage where
the password data are kept.
What makes the online setting favorable for password-
based authentication, is that participants can detect (in
zero knowledge) when an incorrect password is used, and
terminate the protocol without leaking information. The
attacker can always run a fresh instance of the protocol
for every candidate password, but many EKE and PAKE
protocols [20, 4, 8] achieve theoretically optimal secu-
rity by ensuring that no adversary can do better than this.
Online guessing is easy to detect in practice, and can be
defeated by locking out accounts with repeated failures.
Dealing with passwords in the pure online setting is in
that respect a mostly solved problem, and is the topic
of the ongoing IEEE 1363.2 standardization effort [19].
We will not discuss online passwords further.
Ofﬂine Uses.
In the ofﬂine setting, passwords are
mainly used for login and to encrypt data at rest in lo-
cal storage. Typical applications of password-based en-
cryption range from user-level encryption of PGP or
S/MIME private keys, to kernel-level enforcement of ac-
cess permissions, to hardware-level encryption of a lap-
top’s hard disk by a security chip or by the drive itself.
Despite their limitations, passwords tend to be prefer-
able to other types of credentials. Physical tokens able
to store large cryptographic keys are susceptible to theft
along with the laptop they are supposed to protect. Bio-
metrics are inherently noisy and must trade security for
reliability; they are also tied to a speciﬁc user and cannot
be revoked. Visual and other alternatives to passwords
are often complex and too demanding for low-level op-
eration or in embedded systems; at any rate they do not
have clear security beneﬁts over passwords.
The main threat faced by password-based encryption
is the ofﬂine dictionary attack. Unlike the online guess-
ing discussed earlier, in an ofﬂine attack the adversary
has access to the complete ciphertext and all relevant
information kept in storage—except the password—and
does not need the cooperation of remote parties to carry
out the attack. Tamper-resistant hardware may compli-
cate ciphertext acquisition, but, past that point, the adver-
sary is bound only by sheer computational power: this is
what makes low-entropy passwords so much more dam-
aging ofﬂine than online.
Password-based Encryption
1.3
Aside from the peril of dictionary attacks, passwords
are not usable natively as encryption keys, because they
are not properly distributed. Key Derivation Functions
(KDF) let us solve this.
Key Derivation. The goal is to create a uniform and
reproducible key from a password. The universally ac-
cepted practice is to mangle the password through a hash
function a number of times, after blending it with ran-
dom data called salt that is made public. The many hash
iterations serve to make ofﬂine dictionary attacks slower,
and the salt is to preclude using lookup tables as a short-
cut [18, 30, 3]. Virtually all KDFs follow this model;
however, it is not a panacea.
For ones, referring to the apparent futility of prevent-
ing (targeted) dictionary attacks, in the full version of
their recent CRYPTO ’06 paper, Canetti, Halevi, and
Steiner [9] lament:
[...] typical applications use a key-derivation-
function such as SHA1 repeated a few thou-
sand times to derive the key from the password,
in the hope of slowing down off-line dictionary
attacks. [...] Although helpful, this approach is
limited, as it entails an eternal cat-and-mouse
chase where the number of iterations of SHA1
continuously increases to match the increasing
computing powers of potential attackers.
Instead, these authors propose to treat the password as
a path in a maze of CAPTCHAs [42], whose (secret)
answers will provide the key. Alas, such augmented-
password schemes tend to be unwieldy; here, gigabytes
of CAPTCHAs must be pre-generated, and then retrieved
in secret, which relegates it to local storage (lest an of-
ﬂine dictionary attack on the access pattern reveal the
password).
120
16th USENIX Security Symposium
USENIX Association
In general, while it is true that secrets with visual or
interactive components are likely to hamper mechani-
cal enumeration, old-fashioned passwords will remain
faster, less conspicuous, and much more convenient for
humans to handle and recall. Still, the problem remains
to design a good KDF.
(i) let the user choose the amount of work he
or she deems appropriate for the task,
(ii) keep the choice secret from attackers (and
allow the user to forget it too),
(iii) and ensure that all user-side computing
power can be exploited.
recall
Iteration Count. To perceive the difﬁculty of KDF
design,
that Unix’ crypt() hashing for
/etc/passwd back in the seventies took a quarter of a
second [33] to perform two dozen iterations of the DES
cipher (with salt). The original PKCS#5 key derivation
standard from the early nineties [37] was content to use
a “positive number” of applications of MD2 or MD5,
but has since been updated [22] to recommend “at least
1000” iterations of MD5 or SHA1. This recommenda-
tion has been followed in the recent and well-regarded
TrueCrypt software [40], albeit perhaps on the edge,
with merely 2000 iterations of SHA1 or RIPEMD160,
or 1000 iterations of WHIRLPOOL. Unfortunately, these
numbers are set in stone in the TrueCrypt source code.
The
(string-to-key)
custom “s2k”
function of
GnuPG [15] is preset to hash a total of 65536 bytes
based on the password, which amounts to a few thou-
sand iterations of SHA1. Sadly, this number is once
again hardcoded without user override. At least, the
OPENPGP [7] format offers some ﬂexibility in that
regard, and GnuPG can be recompiled to hash up
to a maximum of 65011712 bytes, without breaking
compatibility with the ofﬁcial version. Still, even that
ostensibly large number appears pathetic by today’s
standards, as it takes only two seconds to digest those 65
million bytes on a 1.5 GHz laptop circa 2005.
1.4 The Problem, and Our Solution
The balancing act in KDF design is to choose a large
enough iteration count to frustrate a dictionary attack,
but not so large as to inconvenience the user. Any choice
made today is likely to prove wholly inadequate a few
years from now. Furthermore, this assessment should be
made in view of the lifespan and sensitivity of the plain-
text, as well as the estimated strength of the password—
two crucial tidbits of which only the actual user (and not
the system designer) is privy.
Security Maximization and User Programmability.
Given the constraints, the primary goal is to maximize—
by technical means—the “gap” between user inconve-
nience and the costs inﬂicted on attackers. Secondarily,
it is crucial—for policy and deeper reasons—that users
be free to vary the (secret) level of inconvenience they
are willing to accept on a case-by-case basis. In essence,
we:
We emphasize again that human-selected passwords tend
to be by far the weakest link in a typical cryptographic
chain [26], which is why we seek to squeeze as much
security from them as we can.
“Halting” Key Derivation Functions. HKDFs are the
practical embodiment of all the above requirements.
They consist of two algorithms, Prepare and Extract.
The principle is as follows:
• To create a random encryption key,
the user
launches a randomized algorithm HKDF.Prepare
on the password, lets it crunch for a while, and inter-
rupts it manually using the user interface, to obtain
an encryption key along with some public string to
be stored with the ciphertext.
• To recover the same key subsequently, the user ap-
plies a deterministic algorithm HKDF.Extract on
the password and the public string from the ﬁrst
phase. The algorithm halts spontaneously when it
recognizes that it has recovered the correct key, bar-
ring which it can be reset manually.
if
the user entered the correct password,
Thus,
HKDF.Extract will halt and output the correct key af-
ter roughly the same amount of time as the user had let
HKDF.Prepare run in the setup phase. However, if the
user entered a wrong password, at some point he or she
will ﬁnd that it is taking too long and will have the option
to stop the process manually in order to try again.
Notice that the public string causes the derived key to
be a randomized function of the password, and thus also
plays the role of “salt”. HKDFs can be used as drop-in
substitutes for regular KDFs, pending addition in the user
interface of a button for interrupting the computation in
progress.
HKDF Ramiﬁcations. The above idea is as simple as
it is powerful, though surprisingly it has not been inves-
tigated or implemented before. Ramiﬁcations are deep,
however:
1. (Stronger crypto) Two extra bits of security can be
reclaimed from any password.
A paradoxical result that we prove in this paper
is that, if the attacker does not know the iteration
count, and is then compelled to use a “dovetail”
search strategy with many restarts, then the attack
USENIX Association
16th USENIX Security Symposium
121
effort is multiplied by ∼ 4× (a 2-bit security gain),
at no cost to the user.
Intuitively, our design will force any game-theoretic
optimal brute-force attacker to overshoot the true it-
eration count when trying out wrong passwords. By
contrast, when the user enters the correct password,
the key derivation process will be halted as soon
as the programmed number of iterations is reached
(using some mechanism for detecting that this is the
case).
2. (Flexible policies) Long-term memorable pass-
words for key recovery become a possibility.
Sophisticated users should be able to choose any
password that they will remember in the long term,
even with low entropy, as long as they are used with
a large enough iteration count to keep brute-force
attackers at bay (at the cost of slowing down legiti-
mate uses correspondingly).
This opens the possibility of using multiple pass-
words of reciprocal strength and memorability: one
high-entropy password with a small iteration count
for fast everyday use; and a second, much more
memorable password for the long term, protected by
a very large iteration count, to be used as a backup
if the primary password is forgotten.
3. (Future prooﬁng) Password holders automatically
keep pace with password crackers.
Indeed, if every time a user’s password is changed,
the iteration count is selected to take some given
amount of time on the user’s machine, then the it-
eration count will automatically increase with any
hardware speed improvement. This will negate all
advantage that a brute-force attacker might gain
from computers becoming faster, if we make the
natural assumption that technological progress ben-
eﬁts password veriﬁers at the same rate as password
crackers.
4. (Resource maximization) User-side parallelism is
exploited to raise the cost of attacks.
Users care about (real) elapsed time; attackers about
cumulative CPU time. Independently of the idea of
hiding the iteration count, we design the key deriva-
tion to be parallelizable even for a single key. With
the popularization of multi-core PCs, users will then
be able to increase the total cost of key derivation
without increasing the observed elapsed time that
matters to them. The heightened total cost is how-
ever borne in full by the adversary, who gains noth-
ing by parallelizing “within” single passwords, as
opposed to “across” several ones.
These beneﬁts are complementary rather than indepen-
dent: for example, by accentuating the iteration unpre-
dictability, Properties 2 and 3 solidify the Property 1 se-
curity gains that ride on it. Property 4 is orthogonal, but
is equally crucial to our goal of making attacks maxi-
mally expensive.
User Acceptance. Aside from the technical arguments
we develop in the remaining of this paper, remains the
question of user acceptance. Although we cannot answer
this question in the name of others, it seems reasonable
to assume that acceptance should be easy.
The general principle of using deliberately expensive
cryptography in conjunction with passwords has become
standard, and is expected by users. The main commercial
operating systems even use login screens that frustrate
casual password guessing “by hand” using fake delays.
Although this theatre provides but illusory protection
against true ofﬂine attacks, it eloquently demonstrates
that users (or system provisioners) demand that penal-
ties be assessed for entering bad passwords. HKDFs ful-
ﬁl these expectations in a cryptographically sound way,
but in stark contrast to those commercial approaches,
HKDFs seek to empower users without burdening them,
for their beneﬁt.
1.5 Related Work
The ﬁrst deliberate use of expensive cryptographic oper-
ations to slow down brute-force attacks, in the crypt()
password hashing function on Unix systems, coincides
with the public availability of the DES cipher. Since