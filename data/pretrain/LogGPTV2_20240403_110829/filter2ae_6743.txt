# 对安卓 Bound Services 的攻击

#### 译文声明
本文为翻译文章，原文来源于360安全播报。译文仅供参考，具体内容及含义以原文为准。

在探索新的安卓设备时，我经常遇到暴露了 Binder 接口的服务，即所谓的“Bound Services”。与 Unbound Services 不同，我们不能仅通过 `am` 命令与这些服务交互；相反，我们需要创建一个安卓应用程序。即使有 Bound Services 的源代码，创建一个用于连接该服务的客户端也颇具挑战性，如果没有源码则更加困难。尽管许多博客和教程讨论了如何创建 Bound Services，但鲜有从攻击者角度讲解如何与其交互的文章。

在这篇文章中，我将创建一个暴露 Bound Services 的应用程序，并展示如何使用反编译后的 Smali 代码来理解这些服务。此外，我还将发布一个自动重建 AIDL 的工具。本文不会深入解释 Bound Services 的工作原理。

## 用 Java 创建 Bound Service

首先，我们将创建一个应用程序，并定义其暴露的 Bound Service 为 `com.jakev.boundserver`。这个 Bound Service 有一个名为 `exec()` 的方法，接受一个字符串命令并执行，然后返回输出结果（此功能仅供调试，请勿在实际应用中使用）。该项目的源码和 APK 可从本文末尾提供的链接下载。

我们将分三步创建 Bound Service：

1. 在 `AndroidManifest.xml` 中声明一个新的组件。
2. 创建 Android Interface Definition Language (AIDL) 接口。
3. 创建一个新的服务类，并实现 `onBind()` 方法。

### 步骤 1: 在 `AndroidManifest.xml` 中声明新组件

```xml
<service android:name=".ITestService" />
```

### 步骤 2: 创建 AIDL 接口

创建一个名为 `com.jakev.boundserver.aidl.TestInterface` 的 AIDL 接口。如前所述，我们的 `exec()` 方法接收一个 `String` 类型的参数，并返回一个 `String` 类型的结果。

```java
interface TestInterface {
    String exec(String command);
}
```

### 步骤 3: 创建服务类

创建一个名为 `com.jakev.boundserver.ITestService.java` 的服务类。我们需要实现 `onBind()` 方法，并返回上面创建的 `TestInterface` 接口的实例。

```java
public class ITestService extends Service {
    @Override
    public IBinder onBind(Intent intent) {
        return new TestInterface.Stub() {
            @Override
            public String exec(String command) throws RemoteException {
                // 执行命令并返回结果
                return executeCommand(command);
            }
        };
    }

    private String executeCommand(String command) {
        // 实现命令执行逻辑
        return "Command executed: " + command;
    }
}
```

## 探索服务 APK

假设我们找到了安装在设备上的 `com.jakev.boundserver` 应用程序，现在需要分析 `.ITestService` 服务。我们没有该应用程序的源代码，只有 APK 文件。我们可以从设备中提取该应用并使用 `apktool` 进行解压。

### 分析 `.ITestService` 服务类

首先查看位于 `smali/com/jakev/boundserver/ITestService.smali` 的 `.ITestService` 服务类。`onBind()` 方法很简单，可以看到它实例化了一个内部类 `ITestService$1` 并返回它。这对应于我们在源代码中看到的 `new TestInterface.Stub() { }`。

打开 `smali/com/jakev/boundserver/ITestService$1.smali`，可以看到它正在执行 `com.jakev.boundserver.aidl.TestInterface$Stub` 类。在虚拟方法部分，我们可以找到 `exec()` 方法的实际实现。作为逆向工程师，你可能会从这里入手，确定 `exec()` 方法的功能。

### 查看 AIDL 文件

现在有三个不同的类：`TestInterface.smali`、`TestInterface$Stub.smali` 和 `TestInterface$Stub$Proxy.smali`。这些类由 Android Studio 自动生成。以下是关键点：

- `TestInterface` 实现了 `android.os.IInterface`，包含所有 Binder 抽象方法的定义。
- `TestInterface$Stub` 实现了 `android.os.Binder`，包含存储为字段的 Binder 事务标识符，命名规则为 `TRANSACTION_{methodName}`。这些 ID 字段与使用 `service` 命令行程序调用服务时使用的相同。
- `TestInterface$Stub$Proxy` 类不实现或集成任何接口或方法，但它包含了每个 Binder 方法的返回类型和参数信息。

如果你想要列举一个新的应用程序的 Binder 接口和方法执行情况，可以使用以下搜索方法：

- 搜索 AIDL 类：
  ```sh
  grep -r "super.*IInterface" ./smali
  ```
- 搜索 AIDL 的实现：
  ```sh
  grep -r "super.*${AIDL class from above}" ./smali
  ```

利用这些信息，我们可以重建 AIDL 并将其添加到客户端程序中。你可以手动完成这一步，也可以使用我开发的 `GenerateAIDL.jar` 工具。该工具使用 DexLib2 库分析应用程序的 DEX 代码并输出 AIDL 文件，帮助你快速将 AIDL 文件添加到客户端。

## 攻击 Bound Services

现在我们将使用刚刚生成的 AIDL 文件创建一个名为 `com.jakev.serverclient` 的客户端，与 `.ITestService` 交互。为了简化工程，使其易于复用，我们将按以下步骤进行：

### 步骤 1: 导入 AIDL 文件

将生成的 AIDL 文件导入特定文件夹，并确保包名称正确。

### 步骤 2: 修改 `MainActivity` 类

基于之前创建的模板 `MainActivity` 类进行修改。首先导入 AIDL，然后添加一个名为 `service` 的对象。

```java
import com.jakev.boundserver.aidl.ITestService;

public class MainActivity extends AppCompatActivity {
    private ITestService service;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initService();
    }

    private void initService() {
        Intent intent = new Intent();
        intent.setClassName("com.jakev.boundserver", "com.jakev.boundserver.ITestService");
        bindService(intent, connection, Context.BIND_AUTO_CREATE);
    }

    private final ServiceConnection connection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName className, IBinder service) {
            ITestService testService = ITestService.Stub.asInterface(service);
            try {
                String result = testService.exec("id");
                Log.d("MainActivity", "Result: " + result);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void onServiceDisconnected(ComponentName className) {
            // 处理服务断开的情况
        }
    };
}
```

### 步骤 3: 运行客户端应用程序

创建、安装并运行客户端应用程序后，我们应该会在日志中看到 `id` 命令的输出。

## 总结

如果拥有足够的权限，攻击者可以像与其他组件交互一样与 Bound Services 交互。因此，重要的是要对你的应用程序进行彻底检查，确保只暴露必要的组件。对于执行敏感操作的组件（例如执行命令），必须确保它们具有正确的权限。

## 资源

- [Remote Service with AIDL File](http://stackoverflow.com/questions/15330233/remote-service-with-aidl-file-serviceconnection-never-called)
- [ServiceConnection](http://developer.android.com/reference/android/content/ServiceConnection.html)
- [Bound Services](http://developer.android.com/guide/components/bound-services.html)
- [AIDL](http://developer.android.com/guide/components/aidl.html)

## 下载

- TestBoundServer Studio Project
  - [源码](https://github.com/jakev/BoundServiceExamples/tree/master/TestBoundServer)
  - [APK](https://github.com/jakev/BoundServiceExamples/blob/master/bins/TestBoundServer-signed.apk)
- TemplateServiceClient Studio Project
  - [源码](https://github.com/jakev/BoundServiceExamples/tree/master/TemplateServiceClient)
  - [APK](https://github.com/jakev/BoundServiceExamples/blob/master/bins/TemplateServiceClient-signed.apk)
- GenerateAIDL.jar
  - [源码](https://github.com/jakev/GenerateAIDL)
  - [JAR](https://github.com/jakev/GenerateAIDL/blob/master/bin/GenerateAIDL-1.0.jar)