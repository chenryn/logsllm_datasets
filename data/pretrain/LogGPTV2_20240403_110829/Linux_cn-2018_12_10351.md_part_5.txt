### 中断规则

外部中断，也称为设备中断（IRQ），在系统中共有16个可能的IRQ，编号从0到15。IRQ号与中断描述符表（IDT）条目的映射并不是固定的。在`picirq.c`文件中的`pic_init`函数将IRQ 0-15映射到IDT条目`IRQ_OFFSET`至`IRQ_OFFSET+15`。

在`inc/trap.h`中，`IRQ_OFFSET`被定义为十进制32。因此，IDT条目32-47对应于IRQ 0-15。例如，时钟中断是IRQ 0，所以IDT[IRQ_OFFSET + 0]（即IDT[32]）包含了内核中时钟中断服务程序的地址。选择`IRQ_OFFSET`是为了避免处理器异常覆盖设备中断，因为这会引起混淆。（事实上，在早期运行MS-DOS的PC上，`IRQ_OFFSET`实际上是0，确实导致了硬件中断服务程序和处理器异常处理之间的混淆。）

在JOS中，相比xv6 Unix，我们做了一个重要的简化：当处于内核模式时，总是关闭外部设备中断（并且像xv6一样，当处于用户空间时再打开）。外部中断由`%eflags`寄存器的`FL_IF`标志位控制（参见`inc/mmu.h`）。当该标志位被设置时，外部中断被启用。尽管可以通过多种方式修改此标志位，但为了简化，我们仅通过保存和恢复进程的`%eflags`寄存器值来控制进入和离开用户模式时的中断状态。

当你在用户环境中时，确保`FL_IF`标志位被设置，以便出现中断时可以传递给处理器，并由你的中断代码进行处理。否则，中断将被屏蔽或忽略，直到重新启用为止。我们使用引导加载程序的第一个指令来屏蔽中断，并且到目前为止还没有重新启用它们。

**练习 13**：
- 修改`kern/trapentry.S`和`kern/trap.c`以初始化IDT中的相关条目，并为IRQ 0-15提供服务程序。
- 修改`kern/env.c`中的`env_alloc()`代码，以确保在用户环境中中断始终是开启的。
- 在`sched_halt()`中取消注释`sti`指令，以便空闲的CPU取消中断屏蔽。

此外，当调用硬件中断服务程序时，处理器不会推送错误代码。此时，你可能需要重新阅读[80386参考手册](https://pdos.csail.mit.edu/6.828/2018/labs/readings/i386/toc.htm)第9.2节或[IA-32 Intel架构软件开发者手册卷3](https://pdos.csail.mit.edu/6.828/2018/labs/readings/ia32/IA32-3A.pdf)第5.8节。

完成此练习后，如果你在内核上使用任意测试程序持续运行（例如`spin`），你应该会看到内核输出中捕获的硬件中断捕获帧。虽然中断已经在处理器上启用，但JOS还不能处理它们，因此你会看到当前运行的用户环境因每个中断而被销毁，并最终进入监视器。

### 处理时钟中断

在`user/spin`程序中，子环境首先运行并进入一个高速循环，内核无法取得CPU控制权。我们需要对硬件编程，定期产生时钟中断，强制将CPU控制权返还给内核，从而可以在内核中切换到另一个用户环境。

我们已经为你写好了对`lapic_init`和`pic_init`（来自`init.c`中的`i386_init`）的调用，用于设置时钟和中断控制器以生成中断。现在，你需要编写代码来处理这些中断。

**练习 14**：
- 修改内核的`trap_dispatch()`函数，以便在时钟中断发生时调用`sched_yield()`查找并运行另一个环境。

现在，你应该能够使用`user/spin`进行测试：父环境应fork出子环境，多次调用`sys_yield()`切换回父环境，最后优雅地终止子环境。

这是进行回归测试的好机会。确保你没有破坏实验的前面部分，并确保打开中断正常工作（例如`forktree`）。另外，尝试使用`make CPUS=2 target`在多个CPU上运行它。现在你应该能够通过`stresssched`测试。运行`make grade`确认你的得分应该是65分（总分为80分）。

### 进程间通信（IPC）

（严格来说，在JOS中这是“环境间通信”或“IEC”，但通常称为IPC，所以我们使用标准术语。）

我们一直专注于操作系统的隔离部分，这给人一种错觉，好像每个程序都有一个完整的机器为其服务。操作系统的一个重要服务是允许程序之间在需要时进行通信。让程序与其他程序交互可以使其功能更强大。Unix的管道模型就是一个经典的例子。

有许多种进程间通信模型，关于哪种模型最好的争论从未停止过。我们不参与这种争论，而是实现一个简单的IPC机制并尝试使用它。

#### JOS中的IPC

你将实现几个JOS内核系统调用，共同提供一个简单的进程间通信机制。具体来说，你将实现两个系统调用：`sys_ipc_recv`和`sys_ipc_try_send`。然后，你将实现两个库函数`ipc_recv`和`ipc_send`。

用户环境可以使用JOS的IPC机制向其他环境发送“消息”。这些消息由两部分组成：一个32位整数和可选的一个单页映射。允许环境在消息中传递页映射，提供了一种高效的方式来传输比单个32位整数更多的数据，并且也允许环境轻松地设置共享内存。

#### 发送和接收消息

一个环境通过调用`sys_ipc_recv`来接收消息。这个系统调用会取消对当前环境的调度，直到接收到消息才会再次运行。当一个环境正在等待接收消息时，任何其他环境都可以向其发送消息——不仅是一个特定的环境，也不仅是具有父子关系的环境。换句话说，你在Part A中实现的权限检查不适用于IPC，因为IPC系统调用经过精心设计，被认为是“安全的”：一个环境不能通过发送消息使另一个环境崩溃（除非目标环境本身存在漏洞）。

尝试发送一个值时，环境使用接收者的ID和要发送的值调用`sys_ipc_try_send`。如果指定的环境正在接收（已调用`sys_ipc_recv`但尚未收到值），则发送消息并返回0。否则，返回`-E_IPC_NOT_RECV`表示目标环境当前不想接收值。

在用户空间中，库函数`ipc_recv`将调用`sys_ipc_recv`，并在当前环境的`struct Env`中查找接收到的值的相关信息。

同样，库函数`ipc_send`将持续调用`sys_ipc_try_send`发送消息，直到成功为止。

#### 页转移

当环境使用有效的`dstva`参数（低于`UTOP`）调用`sys_ipc_recv`时，表明愿意接收一个页映射。如果发送方发送了一个页，则该页应映射到接收者地址空间的`dstva`处。如果接收者在`dstva`已有页映射，则现有映射将被取消。

当环境使用有效的`srcva`参数（低于`UTOP`）调用`sys_ipc_try_send`时，表示发送方希望以`perm`权限将当前映射在`srcva`处的页发送给接收方。IPC成功后，发送方在其地址空间中保留最初映射到`srcva`位置的页，而接收方也在其地址空间中的`dstva`处获得相同物理页的映射。最终结果是，该页成为发送方和接收方共享的页。

如果发送方和接收方都没有表示要转移页，则不会有任何页被转移。在任何IPC之后，内核将在接收方的`Env`结构上设置新的`env_ipc_perm`字段，以允许接收页，或者将其设置为0，表示不再接收。

#### 实现IPC

**练习 15**：
- 实现`kern/syscall.c`中的`sys_ipc_recv`和`sys_ipc_try_send`。在实现之前，请阅读它们的注释，因为它们需要协同工作。在这些函数中调用`envid2env`时，应将`checkperm`标志设置为0，这意味着允许任何环境向其他环境发送IPC消息，内核除了验证目标`envid`是否有效外，不做特别的权限检查。
- 然后实现`lib/ipc.c`中的`ipc_recv`和`ipc_send`函数。

使用`user/pingpong`和`user/primes`测试你的IPC机制。`user/primes`将为每个质数生成一个新环境，直到JOS耗尽环境为止。阅读`user/primes.c`可能会非常有趣，你可以看到所有的fork和IPC都在幕后进行。

**小挑战！**
- 为什么`ipc_send`需要循环调用？修改系统调用接口，使其不需要循环。确保你能处理多个环境同时尝试发送消息到一个环境的情况。
- 质数筛选是在大规模并发程序中传递消息的一个巧妙用法。阅读C. A. R. Hoare的《Communicating Sequential Processes》，Communications of the ACM 21(8) (August 1978)，666-667，并实现矩阵乘法示例。
- 控制消息传递的一个令人印象深刻的例子是Doug McIlroy的幂序列计算器，详细描述见[M. Douglas McIlroy，《Squinting at Power Series》，Software–Practice and Experience，20(7) (July 1990)，661-683](https://swtch.com/%7Ersc/thread/squint.pdf)。实现幂序列计算器并计算sin(x + x^3)的幂序列。
- 通过应用Liedtke的论文（[通过内核设计改善IPC性能](http://dl.acm.org/citation.cfm?id=168633)）中的一些技术或你想到的其他技巧，来提高JOS的IPC机制效率。为此，你可以随意修改内核的系统调用API，只要你的代码与我们的评级脚本兼容即可。

**Part C结束**。确保你通过了所有评级测试，并将你的小挑战答案写入`answers-lab4.txt`。在动手实验之前，使用`git status`和`git diff`检查你的更改，并使用`git add answers-lab4.txt`添加你的小挑战答案。完成后，使用`git commit -am 'my solutions to lab 4'`提交更改，然后`make handin`并关注其动向。

---
via: 
作者：[csail.mit](https://pdos.csail.mit.edu)  
选题：[lujun9972](https://github.com/lujun9972)  
译者：[qhwdw](https://github.com/qhwdw)  
校对：[wxy](https://github.com/wxy)  

本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出。