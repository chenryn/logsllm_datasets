title:SpecCFI: Mitigating Spectre Attacks using CFI Informed Speculation
author:Esmaeil Mohammadian Koruyeh and
Shirin Haji Amin Shirazi and
Khaled N. Khasawneh and
Chengyu Song and
Nael B. Abu-Ghazaleh
2020 IEEE Symposium on Security and Privacy
SPECCFI: Mitigating Spectre Attacks using CFI
Informed Speculation
Esmaeil Mohammadian Koruyeh∗, Shirin Haji Amin Shirazi∗,Khaled N. Khasawneh†,
∗
Chengyu Song∗ and Nael Abu-Ghazaleh∗
Computer Science and Engineering Department
{emoha004,shaji007,csong,naelag}@ucr.edu
University of California, Riverside
†
Electrical and Computer Engineering Department
George Mason University
{kkhasawn}@gmu.edu
Abstract—Spectre attacks and their many subsequent variants
are a new vulnerability class affecting modern CPUs. The attacks
rely on the ability to misguide speculative execution, generally
by exploiting the branch prediction structures, to execute a
vulnerable code sequence speculatively. In this paper, we propose
to use Control-Flow Integrity (CFI), a security technique used
to stop control-ﬂow hijacking attacks, on the committed path, to
prevent speculative control-ﬂow from being hijacked to launch
the most dangerous variants of the Spectre attacks (Spectre-
BTB and Spectre-RSB). Speciﬁcally, CFI attempts to constrain
the possible targets of an indirect branch to a set of legal
targets deﬁned by a pre-calculated control-ﬂow graph (CFG).
As CFI is being adopted by commodity software (e.g., Windows
and Android) and commodity hardware (e.g., Intel’s CET and
ARM’s BTI), the CFI information becomes readily available
through the hardware CFI extensions. With the CFI information,
we apply CFI principles to also constrain illegal control-ﬂow
during speculative execution. Speciﬁcally, our proposed defense,
SPECCFI, ensures that control ﬂow instructions target legal
destinations to constrain dangerous speculation on forward
control-ﬂow paths (indirect calls and branches). We augment this
protection with a precise speculation-aware hardware stack to
constrain speculation on backward control-ﬂow edges (returns).
We combine this solution with existing solutions against branch
target predictor attacks (Spectre-PHT) to close all known non-
vendor-speciﬁc Spectre vulnerabilities. We show that SPECCFI
results in small overheads both in terms of performance and
additional hardware complexity.
I. INTRODUCTION
The recent Spectre [43] attacks have demonstrated how
speculative execution can be exploited to enable disclosure of
secret data across isolation boundaries. Speciﬁcally, attackers
can misguide the processor to speculatively execute a read
instruction with an address under their control. Although the
speculatively read values are not visible to programs through
the architectural state, since the misspeculation effects are
eventually undone, they can be communicated out using a
covert channel. Since their introduction, a large number of
attacks following the same pattern (temporary read of sensi-
tive data through speculation, followed by disclosure of this
data through a covert channel (e.g., [32], [51])) have been
discovered which enable bypassing different permissions using
a number of different speculation triggers [10], [13], [27], [30],
[42], [45], [47], [61], [66], [70], [76]; it is clear that this is a
general class of vulnerability that requires deep rethinking of
processor architecture.
Since speculation is essential for the performance of modern
processors, to mitigate this threat without severely restricting
speculation, some solutions such as InvisiSpec [77] and Safe-
Spec [40] propose separating speculative data from committed
data. Such an approach, rather than attempting to limit specu-
lation, would isolate possible leakage. However, the principle
has to be applied to every micro-architectural structure (e.g.,
cache, TLB, DRAM row buffer), and it is unclear if this ap-
proach could prevent leakage through contention, for example,
using the functional unit port side-channel [7], [13], [52].
Another direction to mitigate this threat is to restrict spec-
ulation if a potentially dangerous gadget can be executed
speculatively. For example, Intel and AMD suggest insert-
ing serialization instructions like lfence to prevent loading
potentially secret data [6], [36]. Because blindly inserting
serialization instructions will have the same effect as disabling
speculation, thus severely reducing performance [34], a better
solution is to conditionally insert barriers. The MSVC C
compiler [49], oo7 [74], and Respectre [33] use static analysis
to identify dangerous gadgets and only insert lfence before
the identiﬁed gadgets. Context-Sensitive Fencing [67] dynam-
ically inserts serialization instructions when a load instruction
operates on untrusted data (address), but only for Spectre-PHT.
Our observation is that Spectre-like attacks rely on manip-
ulating the processors’ prediction structures (see Section II-A
for details) to coerce speculation to an attacker-chosen code
gadget. Therefore, these attacks can potentially be defeated
more efﬁciently by identifying and preventing erroneous spec-
ulation when the prediction structures produce a wrong pre-
diction. As a ﬁrst step towards this direction, we propose
SPECCFI, a lightweight solution to prevent the two most
dangerous Spectre variants: Spectre-BTB (v2) and Spectre-
RSB (v5). SPECCFI prevents these attacks by using control-
ﬂow integrity (CFI) principles to identify when a prediction is
likely erroneous and constrains speculation if it is.
In contrast
to traditional CFI, even hardware supported
proposals, whose purpose is to prevent illegal control ﬂow
© 2020, Esmaeil Mohammadian Koruyeh. Under license to IEEE.
DOI 10.1109/SP40000.2020.00033
39
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
within the primary architecturally visible control ﬂow of a
program, SPECCFI pushes CFI to the speculation level, where
it can be used to determine whether a speculative execution
path should be allowed or limited. Compared to existing
solutions against Spectre-BTB and Spectre-RSB, such as the
recent microcode update from Intel [36] and retpoline [69],
SPECCFI introduces less performance degradation as it still
allows correct speculation to proceed, while these existing
solutions blindly “disable” all indirect branch prediction.
We also like to argue that defenses against Spectre-BTB
and Spectre-RSB serve as the foundation for defense against
Spectre-PHT (v1) attacks. The reason is that serialization
instructions can be viewed as a special type of inline reference
monitor and, therefore, it is crucial to make sure that these
inserted barriers are never bypassed. However, without pro-
tections against Spectre-BTB (forward indirect branches) and
Spectre-RSB (returns), attackers can easily bypass the barriers
to carry out the attacks [13]. Furthermore, as demonstrated in
return-oriented programming [65], by jumping to the middle
of an x86 instruction, attackers can use unintended gadgets,
in our case speculatively, to launch attacks. For this reason,
we envision SPECCFI being combined with existing solutions
against v1 attacks [19], [55], [67] to provide comprehensive
protection against Spectre attacks.
The SPECCFI principle can leverage any CFI implemen-
tation (e.g., coarse-grained such as Intel’s CET [38], or ﬁne-
grained such as HAFIX [21]), with small differences in im-
plementation and leading to the enforcement of the respective
version of CFI. We present our baseline design for forward
edge protection in Section IV and backward edge protection
in Section V. We investigate two versions of SPECCFI:
SPECCFI-base that implements CFI only for speculation, and
SPECCFI-full that also supports CFI for the committed control
ﬂow (i.e. conventional goal of CFI). Section VII evaluates
performance and complexity of the design. We show that
SPECCFI-base eliminates dangerous misspeculation (where
the predicted target label does not match the destination),
without impacting performance.
SPECCFI-full incurs an additional small overhead, on par
with other hardware CFI implementations [20]–[22]. We also
analyze the implementation complexity and ﬁnd that
the
overhead is modest.
Although some software and hardware solutions have
started to appear to defend against this class of attacks, we
believe that our solution is elegant along with a number
of interesting properties. We believe that it also combines
well with other proposed defenses, such as SafeSpec [40]
and InvisSpec [77] which limit the speculative side effects
once misspeculation occurs, by limiting the opportunities for
harmful speculation. Section VIII compares SPECCFI to these
and other works.
In summary, the contributions of the paper include:
• We present a new defense against Spectre variants that
rely on polluting the BTB and RSB, by embedding CFI
principles into the branch prediction decisions.
• We analyze the security of the proposed designs showing
that it protects against all variants of Spectre-BTB (v2)
and Spectre-RSB (v5) attacks. Combined with solutions
such as context-sensitive fencing, we believe that we can
completely secure the system against Spectre attacks.
• We analyze the performance and complexity of SPECCFI,
showing that it leads to little overhead. Compared to a
defense that prevents speculation around indirect jumps,
indirect calls and returns, SPECCFI provides equivalent
security yet still avoids the large performance overheads.
The hardware complexity is also negligible.
II. BACKGROUND
This section overviews some background: branch predictor
structures in modern processors, Spectre attacks, and CFI.
A. Branch prediction and Spectre attacks
Branch prediction is a critical component of modern proces-
sors that support speculative out-of-order execution. When a
control ﬂow instruction (branch, call or return) is encountered,
the result of the instruction (e.g., whether or not a conditional
branch will be taken or what the target value is of an indirect
branch or a return) is generally not known at the front end
of the pipeline. As a result, to continue to ﬁll the pipeline
and utilize the available resources of the processor, branch
prediction is used.
PHT
BTB
tag
target
label
TN
T N
Predicted Direction
CFI Label(cid:2) Branch Address
RSB/SCS
LCP
return address
return address
0
1
Mux
S0
is_return
Predicted Target
Fig. 1: Branch Predictor Unit consists of three different pre-
dictors: (1) PHT for conditional branch direction; (2) BTB for
indirect branch addresses; and (3) RSB for return addresses.
Modern processors employ sophisticated predictors (shown
in Figure 1) which typically consist of three components:
• Direction predictor: is responsible for predicting the di-
rection of a conditional branch. Although a number of
implementations have been studied, modern predictors
typically implement a two-level context sensitive predic-
tor [27]. The ﬁrst level is a simple predictor that hashes
each branch address to a direction predictor (typically a 2-
bit saturating counter). This predictor is used either when
a branch is not being successfully predicted or when the
predictor has not been trained yet. When the predictor is
trained, it typically uses a second prediction algorithm,
often a variant of a gshare predictor [79], which uses the
global history of a branch in addition to its address to
hash to a direction predictor as before. The advantage is
that the same branch can have different predictions based
on the control ﬂow path used to reach it.
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
40
TABLE I: Spectre attack variants and their targeted branch
prediction components
Spectre
Spectre-PHT (v1) [43]
Spectre-PHT (v1.1) [42]
Spectre-BTB (v2) [43]
Spectre-RSB (v5) [45], [47]
Element exploited
Pattern History Table (PHT)
Pattern History Table (PHT)
Branch Target Buffer (BTB)
Return Stack Buffer (RSB)
• Target predictor: is used by indirect jump and indirect call
instructions which jump to an address held in a register
or a memory location, which is unknown at the front end
of the pipeline. This predictor typically uses the hash of
the branch address to index a cache holding the branch
targets called the branch target buffer (BTB). BTBs are
shared across threads on a virtual core: one value used by
a process could be used by another process whose branch
has a matching address in the BTB [28].
• The return address stack: Since returns are not well pre-
dicted using the BTB, and often follow strict call-return
semantics, their target is predicted using a return address
stack of ﬁxed size. When a call instruction executes,
the return address is pushed on this hardware stack; if
overﬂow happens, previous entries are overwritten [45].
When a return is encountered the top of the stack is
popped and used as the return target.
Spectre Attacks Spectre attacks exploit
the branch and
aliasing predictors to fool them to access unauthorized data
speculatively [13], [15], [30], [42], [43], [45], [47]. The main
properties that the attack exploits in speculative execution are:
(1) lazy permission checks on speculation: while instructions
are being executed speculatively, the processor will not check
the permissions until the commit stage; (2) Speculative in-
structions have unintended side-effects on micro-architectural
states even if they do not get committed; and (3) attackers can
deliberately mislead execution into attacker-intended gadgets
by mistraining branch predictors, and use the previous property
to leak sensitive information. Speciﬁcally, an attacker selected
gadget is executed speculatively to perform unauthorized ac-
cess and leak the value through a side-channel [10], [34], [43].
Based on the prediction structure being attacked, variants of
the Spectre attacks that are addressed in this work are shown
in Table I. Mitigations for other variants of the Spectre attacks
as well as variants of the Meltdown attack have been discussed
in detail by Canella et al. [15].
B. Control-ﬂow Integrity
Control-ﬂow integrity (CFI) [4], [57] is a state-of-the-art
solution to mitigate control-ﬂow hijacking attacks. In such
attacks, attackers corrupt/overwrite control data (i.e., data
that controls indirect control transfer, function pointers and
return addresses for instance ) to divert the victim program’s
execution to carry out attacker-chosen logic, for example, to
enable malware or open a backdoor. CFI prevents such attacks
by enforcing a basic safety property: software execution must
follow only legal paths within a control-ﬂow graph (CFG)
determined ahead of time [4]. Hence, a CFI mechanism always
consists of two components: one that computes the CFG of
the program and one that regulates the control transfer while
it is executing.
Constructing CFG. The security guarantee of a CFI mech-
anism directly depends on the accuracy of the CFG, which
can be constructed through static or dynamic analysis. Coarse-
grain CFI mechanisms [81], [82] generate the CFG using
static analysis: any address-taken function can be a legitimate
target for any indirect call; any address taken basic block can
be a legit target for any indirect jump; and the address of
the next instruction after any call can be a legit target for a
return. Although coarse-grained CFI can eliminate most illegal
control transfer targets, follow-up research has shown that
the CFG used is too permissive/inaccurate that it still allows
attacks [17], [29]. Fine-grained CFI solutions improve the
accuracy of the CFG by incorporating type information [53],
[58], [68], [72], [75]. Unfortunately, the CFG may still allow
illegal control transfers [16], [26]. More recently, researchers
have proposed utilizing run-time information to further im-
prove the precision of the CFG [24], [54], [71], which can
even achieve perfect accuracy [31] (i.e., one possible target
per indirect control transfer site).
Regulating control-ﬂow. Once the CFG is calculated, legit-
imate control transfers can be grouped into equivalence sets.
Within the same set, control-ﬂow can be transferred from any
source location (e.g., a call site or return site) to any target
location (e.g., target function or call site). By assigning each
equivalence set a unique ID/label, run-time control-ﬂow can
be regulated with a simple check—source label must match
destination label. Such checks can be implemented using either
software or hardware. Some hardware extensions only support
a single label [11], [38], [39] thus can only enforce coarse-
grained CFI. Others support multiple labels [20], [22] and ﬁne-
grained CFI. Some hardware extensions also include a shadow
stack to enforce unique return target [20], [21], [38], [39].
Adoption. Because of its effectiveness against control-ﬂow
hijacking attacks, CFI has been adopted by both commodity
software and hardware. Tice et al. [68] introduced forward-
edge CFI to LLVM and GCC in 2014. Android adopted this
implementation in 8.1 to protect its media stack and extended
the protection in Android 9 to more components and the
OS kernel. Microsoft introduced its own CFI implementation,
control-ﬂow guard in Visual Studio 2015 and has been uti-
lizing it to protect important OS components, including the
web browser. In Windows 10 (V1730), Microsoft extended
the protection to the OS kernel and hypervisor (Hyper-V). On
the hardware side, Intel introduced Control-ﬂow Enforcement
Technology (CET) [38] and ARM introduced a similar mech-
anism, Branch Target Indicators (BTI), in ARMv8.5-A [11].
III. SPECCFI SYSTEM MODEL
This section ﬁrst overviews the threat model we assume in
the paper. It also describes the extensions to the Instruction
Set Architecture (ISA) to support SPECCFI and the compiler
modiﬁcations to use them.
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
41
A. Threat Model
The main goal of SPECCFI is to prevent attackers from
launching branch target injection attacks (i.e., Spectre-BTB
and Spectre-RSB). We assume a strong local adversary model
with a shared BTB across different hardware threads (i.e.,
hyperthread) and protection domains (address space, privilege
level, and SGX enclaves). We assume the RSB is not shared
between hardware threads, consistent with existing CPU de-
signs, but it is shared between different protection domains.