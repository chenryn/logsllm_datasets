### Optimized Text

#### Java Method Tracing and Analysis Tools

The following methods were frequently called during the tracing process:

- `java/lang/AbstractStringBuilder.putString`
- `java/lang/AbstractStringBuilder.getCoder`
- `java/lang/String.getBytes`
- `java/lang/AbstractStringBuilder.append`
- `java/lang/Object.`
- `java/lang/AbstractStringBuilder.ensureCapacityInternal`
- `java/lang/String.isLatin1`
- `java/lang/StringBuilder.append`
- `jdk/internal/misc/Unsafe.putInt`
- `java/lang/System.arraycopy`
- `java/lang/String.length`
- `jdk/internal/misc/Unsafe.getInt`
- `java/lang/String.coder`

The most frequent method was `java/lang/String.coder()`, which was called 1,268,791 times.

This tracing is achieved using Java USDT probes with the `XX: +ExtendedDTraceProbes` option, which incurs a high performance cost. As previously mentioned, an application may run up to 10 times slower when this feature is enabled and instrumented.

#### BCC Command Line Usage

**javacalls [options] pid [interval]**

- **L**: Show method latency instead of call counts.
- **m**: Report method latency in milliseconds.

`javacalls(8)` is a wrapper for the `ucalls(8)` tool in BCC's `tools/lib` directory, supporting multiple languages.

**bpftrace Version:**

```bash
/usr/local/bin/bpftrace
BEGIN
printf("Tracing Java method calls. Ctrl-C to end.\n");
usdt:/.../libjvm.so:hotspot:method_entry
{
    @count[arg1, arg2, str(arg3, arg4)] = count();
}
```

The key to the map is two strings: the class and the method name. This tool requires `XX: +ExtendedDTraceProbes` and will incur a high performance cost. The full path to `libjvm.so` must be provided.

#### javaflow

**Command Line Usage:**

**javaflov [options] pid**

- **METHOD**: Only trace calls to methods with this prefix.

`javaflov(8)` is a BCC tool that shows the flow of Java method calls. It uses Java USDT probes with `XX: +ExtendedDTraceProbes`, which can significantly slow down the application. The tool may show "Possibly lost 9 samples" messages if it cannot keep up with the events.

#### javagc

**Command Line Usage:**

**javagc [options] pid [autogrow] [output]**

- **-m**: Report times in milliseconds.

`javagc(8)` is a BCC tool that shows JVM garbage collection events. It uses standard Java USDT probes and is a wrapper for the `ugc(8)` tool in BCC's `tools/lib` directory.

#### javaobjnew

**Command Line Usage:**

**javaobjnew [options] pid [interval]**

- **-C roP_count**: Show this many objects by count.
- **-S roP_size**: Show this many objects by size.

`javaobjnew(8)` is a BCC tool that counts Java object allocations. It uses Java USDT probes with `XX: +ExtendedDTraceProbes` and is a wrapper for the `uobjnew(8)` tool in BCC's `tools/lib` directory.

#### Java One-Liners

**BCC:**

- Count JNI events beginning with `jni_Call`:
  ```bash
  funccount '/.../libjvm.so:jni_Call*'
  ```

- Count Java method events:
  ```bash
  sudo bcc/tools/funccount /usr/lib/jvm/java-*/jre/lib/amd64/server/libjvm.so '*:::entry'
  ```

- Profile Java stack traces and thread names at 49 Hertz:
  ```bash
  sudo bcc/tools/profile -F 49 -p $(pgrep -f 'java') -a
  ```

**bpftrace:**

- Count JNI events beginning with `jni_Call`:
  ```bash
  bpftrace -e 'usdt:/.../libjvm.so:jni_Call* { @count[args->name] = count(); }'
  ```

- Count Java method events:
  ```bash
  bpftrace -e 'usdt:/.../libjvm.so:*:::entry { @count[args->class, args->method] = count(); }'
  ```

- Profile Java stack traces and thread names at 49 Hertz:
  ```bash
  bpftrace -e 'kprobe:schedule { @start[tid] = nsecs; } kretprobe:schedule { @ns = hist(nsecs - @start[tid]); delete(@start[tid]); }'
  ```

- Trace method compilation:
  ```bash
  bpftrace -e 'usdt:/.../libjvm.so:method__compile { printf("compiling: %s\n", str(args->name)); }'
  ```

- Trace class loads:
  ```bash
  bpftrace -e 'usdt:/.../libjvm.so:class__load { printf("loaded: %s\n", str(args->name)); }'
  ```

- Count object allocation (needs `ExtendedDTraceProbes`):
  ```bash
  bpftrace -e 'usdt:/.../libjvm.so:object__alloc { @count[str(args->class, args->method)] = count(); }'
  ```

### Bash Shell Tracing

Interpreted languages like Bash are typically much slower than compiled languages due to the way they execute each step of the target program. This makes them less common targets for performance analysis, as other languages are usually chosen for performance-sensitive workloads. BPF tracing can be used, but it is often more useful for troubleshooting program errors rather than finding performance improvements.

#### Preparing for Tracing

To prepare for tracing, I built the Bash software with the following steps:

```bash
CFLAGS=-fno-omit-frame-pointer ./configure
make
```

This preserves the frame pointer register, allowing for frame pointer-based stack walking during analysis. It also provides a Bash binary with local symbol tables, unlike `/bin/bash`, which has been stripped.

#### Sample Program

Here is a sample Bash program, `welcome.sh`:

```bash
#!/home/bgregg/Build/bash-4.4.18/bash
function welcome {
    echo "Hello, World!"
    echo "Hello, World!"
    echo "Hello, World!"
}
welcome
welcome
welcome
welcome
welcome
welcome
sleep 60
```

This script defines a `welcome` function, which is called seven times, resulting in 21 `echo` calls. These numbers are chosen to stand out from other activity while tracing.

#### Function Counts

Using `funccount(8)` from BCC, I traced internal Bash functions containing the string "func":

```bash
funccount '*p: /home/bgregg/Build/bash-4.4.18/bash: *func*'
```

While tracing, I ran the `welcome.sh` program, which called the `welcome` function seven times. The results showed seven calls to `restore_funcarray_state()` and `execute_function()`, with the latter being the most promising based on its name.

To find other calls starting with "execute_":

```bash
funccount '*p: /home/bgregg/Build/bash-4.4.18/bash: *execute_*'
```

This approach can be followed for other interpreted languages to determine how to trace them for the first time.