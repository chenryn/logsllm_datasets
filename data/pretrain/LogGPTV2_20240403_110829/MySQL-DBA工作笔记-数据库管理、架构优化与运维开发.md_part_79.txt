14.6.4
国MySQLDML恢复入口
对于 DML 闪回，我们可以借鉴行业的优秀解决方案，比如 binlog2sql或者 MyFlash 等.
MySQLDML恢复
下图14-24是一个 DML闪回的页面设计，我们可以根据时间点来得到相关的二进制
 对于业务来说，全库备份和增量恢复是无感的，但是如果业务出现了误操作，比如
·备份分为物理备份和逻辑备份，目前逻辑备份的使用存在问题，不够灵活；
1.备份恢复技术选型
备份恢复的前期工作是平台化对接的一个开始，在满足功能的前提下，能够基本实
OML起始日期
P地址
国MySQL实例明细信息
how10entries
国MySQL概要实例信息
MySQL实时信
备份恢复深度优化计划
DML闪回
mysqlbin.01190
MySQL恢复信
已开信
IP地址
231015854字节
boufepo
虚拟机类型
版本
GTID
数据目录
角色
图14-24
dataimys
得到DM语句
sqdata53
Master信息
版本
---
## Page 537
步自动搭建。
还需要更加灵活。
率较低，需要提高恢复效率。
个是数据提取接口。
份在从库端，需要充分利用 Binlog 备份配置数据。
．（4）恢复后数据库需要手动修改配置才可上线，如 GTID，bp size，serverid，主从同
（7）Binlog 备份需要定制和改进 Binlog2sql，目前的瓶颈在于 Python 解析 Binlog 效
（5）数据恢复后加入MHA的考虑。
（3）异机恢复脚本无法做到完全可控，补齐 Binlog 时时间过长，中间可能出现问题，
（2）恢复的关键节点日志无法展示。
（1）恢复时间可用，根据数据量和日志量，保证恢复控制在1个小时以内。
4.MySQL 恢复流程
（9）需要补充备份结果集的周期清理，通过灵活的配置来触发。
（8）Binlog2sql目前仅在MySQL5.7版本使用，需要补充适用在MySQL通用环境中。
（6）Binlog 和备份下沉至HDFS，和大数据对接两个接口，一个是数据推送接口，一
（5）备份看板数据需要丰富。
（4）支持单库单表备份。
（3）梳理已有的Binlog备份现状，查漏补缺，
（2）Binlog2sql 提取 Binlog日志还需到线上分析，无法从 Binlog server 中取出。
（1）备份时间可以做到时间窗口统一调度。
3.MySQL 备份流程
·逻辑备份工具不局限于 mysqldump，可以调研 mydumper，充分测试，以提高性能
·定制灵活的备份策略，数据量小（暂定小于10G)，使用逻辑备份+压缩，其他使
用逻辑备份来备份表结构，需要完善表结构恢复步骤，后续可以补充数据生命周
接入备份配置时，可以根据历史备份情况（比如时长，备份日志量）进行计算。
补充完善数据恢复的元数据设计；
理备份，其他业务包括测试环境、大容量环境都需要做好数据备份；
补充目前缺少的单点实例备份，目前暂定 Infobright，TokuDB 的从库暂不使用物
梳理目前遗漏的主从集群备份，为了减少主库压力，物理备份在从库端完成；
备份元信息和实例元信息需要统一存放；
备份恢复元数据
为目标。
期管理，通过对比获得数据属性变化明细；
用物理备份；
，思路和备份数据稽核一致，Binlog 备
第14章MySQL运维管理模块设计|515
---
## Page 538
516|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
的方式，我们可以不断地调整时间，得到不同的调度计划，再确认后再推送到系统端生效。
进行并行度的分配。
算法。
它不知道任务间的处理逻辑。所以这个思路来落实，那么我们就需要写一个简单的调度
的核心。
合理的，有的数据库大，有的小，按照个数来划分的意义不大，从本质上没有解决切分
面来处理，其实它是很无助的，因为它也不知道该怎么合理的划分，按照个数显然是不
100个任务需要分配和管理，调度就需要出手了，在调度层面的实现，如果暴露给系统层
一个问题了，如果管理这些任务，如果2点触发不够合适，那么几点触发合适，如果有
置成为Crontab，管理起来是比较臃肿的。
14.6.5
MySQL备份任务调度
单纯说调度算法是枯燥的，我们先看一个初步的效果，以历史备份时间来作为参考，
调度逻辑从某种程度来说，需要自己来定制，Celery 可以实现调度的任务处理，但是
Show10entries
度额口开始时间
要触发调度需要输入两个参数，
当然这些可以通过批量管理来实现，或者说是改进，接下来的问题便是管理层面的
对于 MySQL方向的调度需求我考虑了好久，总是感觉不够优雅，不够灵活。如果设
调度后的基本效果如下图14-26 所示。
（8）异机恢复的文件只能选择最近一个。
（7）恢复时长预测。
（6）对7天前数据恢复。
通过调度优化备份效率
任务名称
调度组个数
nysql
数据库类型
一个是起始时间，另外一个是并行度，类似下图14-25
开始任务编排
图14-25
1.1G
2.5M
备份结果集大小
调度任务组
1:0
任务开始时间
任务时长（秒）
---
## Page 539
行，整个过程就会完成任务的分发和修改，真正实现一键配置。
后，我们通过批量处理的方式推送到系统Contab 中，也可以直接使用调度器 Clery 来执
执行时间，有1:17、1:24和1:25三个后续的子任务。
始，执行了1040秒，额外加1分钟，则从1:18开始；第3组的任务也是从1:00开始，根据
秒，则后续的任务时间范围会额外加1分钟，会从1:19开始；第2组的任务也是从1:00开
一个就是时间调度的算法，即每个任务什么时候开始工作。
整体这样计算下来，Crontab 的任务执行时间就完全可以根据策略来定制了，定制之
图14-27是一个调度后的效果图，比如第1组的任务计划是1:00开始，执行时间是1110
这个过程涉及到两个算法，一个任务并行的调度算法，
®
®
调度任务组
备份IP地址
图14-27
3
三
1:19
任务开始时间
图14-26
备份端口号
Search:
X0NzsnolAd
任务时长（秒)
备份结巢绑大小
0
0
1110
，即每个任务如何分组；另外
第14章MySQL运维管理模块设计|517
调度任务组
8
任务开始时间
1110
任务时长(秒)
---
## Page 540
518丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
的维护，这个维护的过程中产生的数据变化都需要推送到指定的元数据属性中去，所以
前暂且把主从信息也纳入了最基本的集群信息，除此之外还有MHA、中间件等集群方案。
14.7.1
入大量的精力，做大量的测试和补充工作，要把这部分工作做好做扎实是很不容易的。
14.7
高可用管理是期望作为一个数据变更的统一入口，通过配置管理来完成高可用信息
高可用模块的建设属于运维系统建设中期的模块，属于系统稳定性的核心模块。需要投
根据这4个维度的信息进行业务场景的对接，高可用部分毫无疑问就是集群维度了，目
首先把元数据部分拆分为了主机、实例、集群和应用这4个维度。
我简单介绍下里面的一些细节信息。
对于高可用管理，我做了一个全景图，如下图14-28所示。
MySQL高可用模块设计
高可用管理
VIP信息
实例角色
实例
高可用集群巡检
高可用配置管理
高可用切换
节点状态检查脚本
图14-28
MySOL高可用管理
高可用集群信息
分布式集群
主从信息
集群
节点状态检查脚本
高可用管理节点配置
高可用看板
高可用部署
数据变更状态
应用
节点状态检查脚
---
## Page 541
个基础上借助于consul的域名高可用，那么 DBA 的高可用工作就完成了一大半。
很多前置工作做好，高可用在计划内是支持 switchover 模式的，如果这种模式可行，在这
而不是简单是一个摆设，等到问题发生之后再去弥补。
歇菜了，所以既然管理节点非常重要，我们就需要维护好它，让它的价值充分发挥出来，
位置工作的员工，没有人能够替代他的工作，那么他有一天生病了，那么整个项目都就
一的逻辑和接口，使用起来会更清晰。
开始了，这个数据变更的部分可以统一封装为一个API，逻辑的变化相对来说也是一个统
信息的。
一个元数据信息的变化会产生级联的数据变化，但是基准数据是来自于高可用集群配置
而在高可用管理中最酷的一件事情就是高可用切换管理了，这个过程需要在前期把
下图14-29是一个基本的高可用管理页面。
此外，高可用中对于高可用管理节点的维护是很容易被忽略的，就好比一个在关键
对于元数据中的集群配置信息而言，高可用信息仅作为查询所用，是不支持直接修改的。
用描述
下图14-30 是通过邮件的方式每天对高可用集群的状态做巡检，生成一个报告。
可以通过平台化的方式对高可用集群的启停、健康检查和切换做一站式的管理
34app3
这些数据都能够通过关联关系联动起来，那么数据的生命周期管理就有了一个好的
主库
检测报告：20190312093001
年3月12日
app2
app1
IS服务
分MySQL库
周二
06
09:3
4306
-
306
Slave信息
306
3036
Consul
图14-30
图14-29
VIP
业务明细
MHASSH切换标识
第14章MySQL运维管理模块设计|519
从库IP
Nomas
91
Noma
Norma
MHA切换
---
## Page 542
520|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
所示的方式进行管理和配置，这样对于一对多的环境来说，是比较便捷的。
14.7.3
据维度有主机、实例、集群、应用等，我们需要同步变更的是这几个维度的信息。
都应该“记录在案”。
的数据日志，这些日志是应该通过CMDB 能够查询到的，无论是主动还是被动的触发，
的同步。
整体会有如下图14-31所示的流程，相较于脚本化管理的最大不同就是对于CMDB 信息
14.7.2
（2）高可用切换后的信息同步，应该是一个流程化的同步过程，比如数据库的元数
在目录规划上，MHA默认是没有限制的，我们可以设定一个标准，按照如下图14-32
（1）通过高可用日志模块，在高可用巡检或者高可用切换的过程中，都会产生相应
对于高可用来说，最核心的功能就是高可用切换了，从 MHA 的方案来说，切换工作
在平台化管理中，对于高可用信息的管理主要是通过两个维度：
基于MHA平台化管理规划
高可用切换流程设计
图14-31
---
## Page 543
改造的同时还需要保证已有的逻辑不会出现意外，如下图14-34所示。
现，本来运行一套环境是OK的，但是再加入几套环境，原来的逻辑和方式就得全部改造，
如，就需要对已有的 MHA 做一些功能定制，自成一个体系。因为下面这种情况很可能出
简单清晰的，如果想深入就需要考虑很多细节，保证技术完全可控，如图14-33 所示。
常，那么这种情况就需要一些更全面的校验机制。所以 MHA 的测试如果较浅那还是比较
对于MHA 的部分，因为要接入的是大量的环境，如何在大批量的环境中能够管理自
因为有些场景是组合出现的，比如网络波动、sh 不可达等，但是已有的应用连接正
masterip.onlin_ change
master_ip_failover
mhaswithoverptrot
mha_failover_rptlst
sendreport
OX
scripts
switchover
X
VIP
MHA目录规划
图14-33
图14-32
MasterX
XHW
manager
X
第14章MySQL运维管理模块设计|521
app_mhamanager.log
stop_mha.sh
mha_monitor.sh
TCP/IP
---
## Page 544
522丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
的。整个环节的工作不是在中间件基础上完成，而是在各个分片节点上完成。
比如对于表test_log做表级别变更，那么维护该变更的代价和维护一个单表看起来是类似
14-35)，也是作为分布式管理的一个基本入口,接入的第一个功能就是实现变更的平台化，
而言，是尽可能避免做频繁的表变更的，在此共识之下我设计了一个初版的 demo（如图
器上，也可以理解是4个物理分片节点，16个逻辑分片节点。
test_log，我们把数据分成16份，那么就是16个分片，对于业务来说都是test_log，因为
14.8.1
些数据变更的时候，这个变更的代价就会很高，所以分布式管理是一个辅助的功能模块。
个分布式集群，对一个结构相对稳定的系统而言，分布式是很轻松的，但是如果存在一
缩的支持还是有限的。
相对是透明的，而且扩展性较好，这里说较好，是基于良好的架构设计，但对于弹性伸
14.8
对整个集群做数据变更管理的时候，
至于分布式管理的部分，主要思想是基于分片的逻辑设计，是基于中间件来管理整
MySQL 里面提到分布式，主要是指基于中间件的方案，中间件方案对于业务的使用
对一个已有的配置表增加一个字段，那么我们可能要考虑多个分片，比如一个表
MySQL 分布式管理设计
分布式管理
MHA Manager节点
元数据管理
自动化部署
自动化测试