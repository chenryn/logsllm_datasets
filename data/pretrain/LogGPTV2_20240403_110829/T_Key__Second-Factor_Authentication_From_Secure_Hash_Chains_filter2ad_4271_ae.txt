be a pair of algorithms that get oracle access to each of the functions
{hi}k
i =1, such that A0 outputs an advice string of length S bits, A1
makes at most T oracle queries, and
= h[1,k](m, x)(cid:105)
= ϵ .
Pr
h1, ...,hk ∈ℱM, N
m∈[M] x ∈[N]
Then,
(cid:104)
(cid:16)
h[1,k]
m, Ah(Ah
0 , h[1,k](m, x))(cid:17)
(cid:19)
≥ ˜Ω(ϵ3/2N).
(cid:18)
T
1 + S
M
We prove this theorem in Appendix B.
Optimality. We do not know whether the above loss in the de-
pendence on ϵ is optimal. It would be interesting to try to prove a
stronger version of the above bound by directly applying the tech-
niques of [23]. Even in the setting of constant ϵ, where one looks
for the optimal dependence between S,T and N , we do not know
of an attack matching the above bound for arbitrary intermediate
values of T and S (apart from the boundary scenarios T = N or
S = N
k ). Rainbow tables [49], which are the best generic attack to
√
invert random functions, give S
2T = N . Since a hash chain is not
a random function (it has many more collisions in expectation), the
expected performance of rainbow tables in our case is far from ob-
vious. For arbitrary (rather than random) functions, the best known
attacks [20] have higher complexity T S2 = qN 3, where q is the
collision probability of the function. Finding better attacks is an
interesting open question.
8.1 Security of T/Key against preprocessing
Within the context of T/Key, Theorem 8.2 leaves a couple of gaps
from our goal to make the salted T/Key scheme as secure against
attacks with preprocessing as it is secure against attacks without
preprocessing. First it has suboptimal dependence on the success
probability ϵ. Note that if one only wants to rule out attacks that
succeed with constant success probability (say 1/2 or 0.01), then this
gap is immaterial in terms of its impact on the security parameters.
Second, the theorem currently bounds the probability to invert the
entire hash chain, whereas to use it in Attack Game 4.5, one needs
to prove a stronger version in which the attacker can invert a chain
suffix of his choice. We leave these two gaps as two open problems.
9 RELATED WORK
For a discussion of the many weaknesses of static passwords, see [30].
One-time passwords were introduced by Lamport [38] and later
implemented as S/Key [27]. HOTP and TOTP were proposed in [47]
and [48], respectively. For a review and comparison of authentica-
tion schemes, see [10, 50]. Leveraging trusted handheld devices to
improve authentication security was discussed in [2] and [40]. Two-
factor authentication schemes were analyzed rigorously in [56],
12
which proposes a suite of efficient protocols with various usability
and security tradeoffs.
Online Two-Factor Authentication. A large body of work has
been devoted to the online setting, where one allows bidirectional
digital communication between the server and the second-factor
device [15, 22, 40, 55, 59]. In this setting, secrets on the server can
usually be avoided by using public-key cryptography. We especially
call the reader’s attention to the work of Shirvanian et al. [56], who
study multiple QR-based protocols. In one of their schemes, called
“LBD-QR-PIN,” the mobile device generates a key pair and sends
the public key to the server. Subsequently, on each authentication
attempt, the server generates a random 128-bit challenge, encrypts
it using the client’s public key, and sends it to the authenticating
device. The authenticating device encodes the challenge as a QR
code, which the user then scans using his mobile device. The mobile
device decrypts the challenge using its stored private key, computes
a short 6 digit hash of the challenge, and presents it to the user.
The user then enters this 6 digit code on the authenticating device,
which sends it to the server for verification. A big advantage of
this scheme lies in the fact that the messages that the client sends
are very short and can therefore easily be entered manually by the
user.
Hash Chains. For an overview of hash chains and their applica-
tions, see [13, 26, 31, 33]. In particular, Hu et al. [31] provide two
different constructions of one-way hash chains, the Sandwich-chain
and the Comb Skipchain, which enable faster verification. They
are less suited for our setting since skipping segments of the chain
requires the prover to provide the verifier with additional values
(which would result in longer passwords). Goyal [26] proposes a
reinitializable hash chain, a hash chain with the property that it can
be securely reinitialized when the root is reached. Finally, [13, 33]
discuss optimal time-memory tradeoffs for sequential hash chain
traversal. On the theoretical side, statistical properties of the com-
position of random functions were studied as early as [53] and
gained prominence in the context of population dynamics in the
work of Kingman [37]. The size of the image of a set under the
iterated application of a random function was studied by Flajo-
let and Odlyzko [21] and later in the context of rainbow tables in
[1, 49]. The size of the image of a set under compositions of indepen-
dent random functions was studied by Zubkov and Serov [70, 71],
who provide several useful tail bounds, some of which we use in
Appendix A.
Attacks with preprocessing. Time-space tradeoffs, which we use
as our model in Section 8, were introduced by Hellman [29] and
later rigorously studied by Fiat and Naor [20]. The lower bound
to invert a function in this model was shown by Yao [68] and,
subsequently, extended in [17, 18, 23, 63]. The work of Gennaro
and Trevisan [23] was particularly influential due to its introduction
of the “compression paradigm” for proving these kinds of lower
bounds. More attacks in this model were shown by Bernstein and
Lange [6].
10 CONCLUSIONS
We presented a new time-based offline one-time password scheme,
T/Key, that has no server secrets. Prior work either was not time-
based, as in S/Key, or required secrets to be stored on the server,
as in TOTP. We implemented T/Key as a mobile app and showed
it performs well, with sub-15 second setup time and sub-second
password generation and verification. To speed up the password
generation phase, we described a near-optimal algorithm for storing
checkpoints on the client, while limiting the amount of required
memory. We gave a formal security analysis of T/Key by proving a
lower bound on the time needed to break the scheme, which shows
it is as secure as the underlying hash function. We showed that by
using independent hash functions, as opposed to iterating the same
function, we obtain better hardness results and eliminate several
security vulnerabilities present in S/Key. Finally, we studied the
general question of hash chain security and proved a time-space
lower bound on the amount of work needed to invert a hash chain
in the random oracle model with preprocessing.
ACKNOWLEDGMENTS
We thank David Mazières for very helpful discussions about this
work. This work is supported by NSF, DARPA, a grant from ONR,
and the Simons Foundation. Opinions, findings, and conclusions
or recommendations expressed in this material are those of the
authors and do not necessarily reflect the views of DARPA.
A COLLISIONS IN RANDOM FUNCTIONS
We first need to investigate some statistical properties of composi-
tions of random functions. Starting with the work of Kingman [37],
the distribution of the image size(cid:12)(cid:12)h[1,k]([N])(cid:12)(cid:12), and specifically its
convergence rate to 1 ([16, 19]), was studied. In our setting, we are
more interested in the properties of h[1,k] for moderate values of k,
and specifically, we assume k = o
N
.
Lemma A.1. Let k, N ∈ N such that k = o
. Then,
(cid:17)
.
(cid:16)√
(cid:17)
(cid:16)√
(cid:19)
(cid:18) N
(cid:2)|h[1,k]([N])|(cid:3) = O
(cid:2)(cid:12)(cid:12)h[1,k]([N])(cid:12)(cid:12)/N(cid:3) .
E
N
k
E
h1, ...,hk
αk =
h1, ...,hk
Proof. A formal proof can be found in [70]. Here, we provide a
brief sketch of the argument. Let
Then,
αk +1 = E
hk +1
[|hk +1([αk N])|/N] .
The last expression can be interpreted as a simple occupancy prob-
lem of independently throwing αk N balls into N bins and reduces
to the probability that a bin is not empty:
αk +1 = 1 − (1 − 1/N)αk N .
For large N , we can make the approximation (1 − 1/N)N ≈ 1/e.
Substituting this gives
αk +1 = 1 − e
−αk
and Taylor expanding the resulting expression gives the following
approximation for the recursive relation:
αk +1 = 1 − (1 − αk + α2
k/2 − O(α3
k)) = αk − α2
k/2 + O(α3
k) .
Plugging-in the guess αk = 2/k + O(1/k3) into the right hand side
gives
αk +1 = 2/k − 2/k2 + O(1/k3) = 2(k − 1)/k2 + O(1/k3)
= 2/(k + 1) − 2/(k2(k + 1)) + O(1/k3) = 2/(k + 1) + O(1/k3)
and therefore
αk = 2/k + O(1/k3)
satisfies the recursive relation.
□
We also need to estimate the probability that any two points
in the domain collide under the hash function. We make use of
the following lemma, due to [70], and give a short proof here for
completeness.
Lemma A.2 ([70]). Let k, N ∈ N such that k = o
x, x′, x′′ ∈ [N] such that x (cid:44) x′ (cid:44) x′′. Then,
(cid:2)h[1,k](x) = h[1,k](x
(cid:2)h[1,k](x) = h[1,k](x
′)(cid:3) = k
− o
′) = h[1,k](x
N
N
, and let
(cid:17)
(cid:16) 1
′′)(cid:3) = k(3k − 1 + oN(1))
N
.
2N 2
Pr
h1, ...,hk
Pr
h1, ...,hk
(cid:16)√
(cid:17)
Proof. Observe that since h1, . . . , hk are independent, the ran-
dom variables h[1,i +1](x) and h[1,i +1](x′) are independent when
conditioned on h[1,i](x) (cid:44) h[1,i](x′). Using this fact gives
′)(cid:3)
′)(cid:12)(cid:12)h[1,i−1](x) (cid:44) h[1,i−1](x
′)(cid:3)
(cid:2)h[1,k](x) (cid:44) h[1,k](x
(cid:2)h[1,i](x) (cid:44) h[1,i](x
(cid:19)k
(cid:19)
(cid:18)
=
1 − 1
N
(cid:18)
Pr
hi
1 − 1
N
h1, ...,hk
Pr
k
k
i =1
i =1
=
=
and subsequently,
(cid:2)h[1,k](x) = h[1,k](x
(cid:19)(cid:19)
(cid:18) k2
1 − k
N
+ O
N 2
= k
N
(cid:18)
′)(cid:3) = 1 −
(cid:16) 1
− o
N
(cid:19)k
1 − 1
N
(cid:17)
.
(cid:18)
Pr
h1, ...,hk
= 1 −
To show the second statement of the lemma, we break down the
probability of a 3-collision between x, x′, x′′ by iterating through
the different levels in the hash chain where a collision between x
13
and x′ could occur. We have that
=
i =0
Pr(cid:2)h[1,k](x) = h[1,k](x′) = h[1,k](x′′)(cid:3)
= Pr(cid:2)h[1,k](x) = h[1,k](x′′)(cid:12)(cid:12)h[1,k](x) = h[1,k](x′)(cid:3) · Pr(cid:2)h[1,k](x) = h[1,k](x′)(cid:3)
(cid:18)
k−1
Pr(cid:2)h[1,k](x) = h[1,k](x′′)(cid:12)(cid:12)min(cid:8)i′ : h[1,i′](x) = h[1,i′](x′)(cid:9) = i + 1(cid:3)
· Pr(cid:2)min(cid:8)i′ : h[1,i′](x) = h[1,i′](x′)(cid:9) = i + 1(cid:3)(cid:19)
(cid:32)
(cid:18)
(cid:19)i · 1
k−1
(cid:18)
(cid:18)
(cid:18) 1
(cid:19)(cid:19)(cid:19)
k−1
(cid:18) 1
(cid:19)
(cid:18) i + k
k−1
(cid:19)k−i(cid:33)
(cid:18)
(cid:19)(cid:19)
(cid:18)
1 − k − i
N
= 3k2 − k
(cid:19)i ·
(cid:18) 1
(cid:18)
(cid:18) 1
(cid:19)(cid:19)
1 − 2
N
1 − 2i
N
1 − 1
N
1 − 1
N
1 − i
N
(cid:18) 1
· 1
N
(cid:19)(cid:19)
1 −
1 −
(cid:18)
+ o
+ o
+ o
i =0
i =0
N
N