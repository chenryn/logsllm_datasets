title:Precise Detection of Side-Channel Vulnerabilities using Quantitative
Cartesian Hoare Logic
author:Jia Chen and
Yu Feng and
Isil Dillig
Precise Detection of Side-Channel Vulnerabilities using
Quantitative Cartesian Hoare Logic
University of Texas at Austin
University of Texas at Austin
Jia Chen
Austin, Texas
PI:EMAIL
Yu Feng
Austin, Texas
PI:EMAIL
Isil Dillig
University of Texas at Austin
Austin, Texas
PI:EMAIL
ABSTRACT
This paper presents Themis, an end-to-end static analysis tool for
finding resource-usage side-channel vulnerabilities in Java appli-
cations. We introduce the notion of ϵ-bounded non-interference,
a variant and relaxation of Goguen and Meseguer’s well-known
non-interference principle. We then present Quantitative Cartesian
Hoare Logic (QCHL), a program logic for verifying ϵ-bounded non-
interference. Our tool, Themis, combines automated reasoning in
CHL with lightweight static taint analysis to improve scalability.
We evaluate Themis on well known Java applications and demon-
strate that Themis can find unknown side-channel vulnerabilities
in widely-used programs. We also show that Themis can verify
the absence of vulnerabilities in repaired versions of vulnerable
programs and that Themis compares favorably against Blazer, a
state-of-the-art static analysis tool for finding timing side channels
in Java applications.
CCS CONCEPTS
• Security and privacy → Logic and verification; Software se-
curity engineering; • Theory of computation → Automated
reasoning;
KEYWORDS
vulnerability detection; side channels; static analysis; verification
1 INTRODUCTION
Side channel attacks allow an adversary to infer security-sensitive
information of a system by observing its external behavior. For in-
stance, in the case of timing side channels, an attacker can learn prop-
erties of a secret (e.g., user’s password) by observing the time it takes
to perform some operation (e.g., password validation). Similarly,
compression side channel attacks allow adversaries to glean confi-
dential information merely by observing the size of the compressed
data (e.g., HTTP response). Numerous research papers and several
real-world exploits have shown that such side channel attacks are
both practical and harmful. For instance, side channels have been
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134058
used to infer confidential data involving user accounts [26, 38],
cryptographic keys [5, 19, 45], geographic locations [62], and medi-
cal data [22]. Recent work has shown that side channels can also
lead to information leakage in cyber-physical systems [23].
Side channel attacks are made possible due to the presence of
an underlying vulnerability in the system. For example, timing
attacks are feasible because the application exhibits different timing
characteristics based on some properties of the secret. In general,
the most robust defense against side-channel attacks is to eradicate
the underlying vulnerabilities by ensuring that the resource usage
of the program (time, space, power etc.) does not vary with respect
to the secret. Unfortunately, it can be challenging to write programs
in a way that follows this discipline, and side-channel vulnerabilities
continue to be uncovered on a regular basis in real-world security-
critical systems [5, 19, 36, 68].
Our goal in this paper is to help programmers develop side-
channel-free applications by automatically analyzing correlations
between variations in resource usage and differences in security-
sensitive data. In particular, given a program P and a “tolerable"
resource deviation ϵ, we would like to verify that the resource usage
of P does not vary by more than ϵ no matter what the value of the
secret. Following the terminology of Goguen and Meseguer [34],
we refer to this property as ϵ-bounded non-interference. Intuitively,
a program that violates ϵ-bounded non-interference for even large
values of ϵ exhibits significant secret-induced differences in re-
source usage.
The problem of verifying ϵ-bounded non-interference is chal-
lenging for at least two reasons: First, the property that we would
like to verify is an instance of a so-called 2-safety property [66] that
requires reasoning about all possible interactions between pairs of
program executions. Said differently, a witness to the violation of
ϵ-bounded interference consists of a pair of program runs on two
different secrets. Unlike standard safety properties that have been
well-studied in verification literature and for which many auto-
mated tools exist, checking 2-safety is known to be a much harder
problem. Furthermore, while checking 2-safety can in principle be
reduced to standard safety via so-called product construction [12, 14]
such a transformation either causes a blow-up in program size [12],
thereby resulting in scalability problems, or yields a program that
is practically very difficult to verify [14].
In this work, we solve these challenges by combining relatively
lightweight static taint analysis with more precise relational verifi-
cation techniques for reasoning about k-safety (i.e., properties that
concern interactions between k program runs). Specifically, our
approach first uses taint information to identify so-called hot spots,
which are program fragments that have the potential to exhibit
a secret-induced imbalance in resource usage. We then use much
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA875more precise relational reasoning techniques to automatically verify
that such hot spots do not violate ϵ-bounded non-interference.
At the core of our technique is a new program logic called Quan-
titative Cartesian Hoare Logic (QCHL) for verifying the ϵ-bounded
non-interference property. QCHL leverages recent advances in re-
lational verification by building on top of Cartesian Hoare Logic
(CHL) [65] for verifying k-safety properties. Specifically, QCHL al-
lows us to prove triples of the form ⟨ϕ⟩ S ⟨ψ⟩, where S is a program
fragment and ϕ,ψ are first-order formulas that relate the program’s
resource usage (e.g., execution time) between an arbitrary pair of
program runs. Starting with the precondition that two runs have
the same public input but different values of the secret, QCHL
proof rules allow us to prove that the difference in resource usage
is bounded from above by some (user-provided) constant ϵ. Similar
to CHL, our QCHL logic allows effective relational verification by
symbolically executing two copies of the program in lockstep. How-
ever, QCHL differs from CHL in that it reasons about the program’s
resource usage behavior and exploits domain-specific assumptions
to improve both analysis precision and scalability. Furthermore,
since the QCHL proof rules are deterministic (modulo an oracle for
finding loop invariants and proving standard Hoare triples), QCHL
immediately lends itself to a fully automated verification algorithm.
We have implemented our proposed solution as a tool called
Themis1, a static analyzer for detecting resource-related side-channels
in Java applications. To demonstrate its effectiveness, we evaluate
Themis by performing a series of experiments. First, we compare
Themis against Blazer [8], a state-of-the-art static analysis tool
for finding timing side channels in Java applications, and we show
that Themis compares favorably with Blazer, both in terms of ac-
curacy and running time. Second, we use Themis to analyze known
side-channel vulnerabilities in security-sensitive Java applications,
such as Tomcat and Spring-Security. We show that Themis can
identify the defects in the original vulnerable versions of these pro-
grams, and that Themis can verify the correctness of their repaired
versions. Finally, we run Themis on several real-world Java appli-
cations and demonstrate that Themis uncovers previously unknown
side-channel vulnerabilities in widely-used programs, such as the
Eclipse Jetty HTTP web server.
Contributions. In summary, this paper makes the following key
contributions:
• We propose the notion of ϵ-bounded non-interference, which
can be used to reason about secret-induced variations in the
application’s resource usage behavior.
• We present Quantitative Cartesian Hoare Logic (QCHL), a
variant of CHL that can be used to verify ϵ-bounded non-
interference.
• We show how to build a scalable, end-to-end side channel
detection tool by combining static taint analysis and QCHL.
• We implement our approach in a tool called Themis and
evaluate it on multiple security-critical Java applications. We
also compare Themis against Blazer, a state-of-the-art tim-
ing side channel detector for Java. Our results demonstrate
that Themis is precise, useful, and scalable.
1Themis is a Greek goddess for justice and balance, hence the name.
1
2
3
4
5
6
7
8
9
10
11
12
13
1
2
3
4
5
6
BigInteger modPow ( BigInteger base ,
BigInteger exponent , BigInteger modulus ) {
BigInteger s = BigInteger . valueOf (1) ;
// BigInteger r;
int width = exponent . bitLength () ;
for ( int i = 0; i " ]
Figure 2: Themis configuration file for Gabfeed.
• We use Themis to find previously unknown security vulner-
abilities in widely-used Java applications. Five of the vulner-
abilities uncovered by Themis were confirmed and fixed by
the developers in less than 24 hours.
Organization. The rest of this paper is organized as follows. We
start by giving an overview of Themis and explain our threat
model (Section 2). After formalizing the notion of ϵ-bounded non-
interference in Section 3, we then present our program logic, QCHL,
for verifying this 2-safety property (Section 4). We then describe
the design and implementation of Themis in Section 5 and present
the results of our evaluation in Section 6. The limitations of the
system as well as comparison against related work are discussed in
Sections 7 and 8.
2 OVERVIEW
In this section, we give an overview of our technique with the aid of
a motivating example and explain the threat model that we assume
throughout the paper.
2.1 Motivating Example
Suppose that Bob, a security analyst at a government agency, re-
ceives a Java web application called Gabfeed, which implements
a web forum that allows community members to post and search
messages2. In this context, both the user names and passwords are
considered confidential and are therefore encrypted before being
stored in the database. Bob’s task is to vet this application and ver-
ify that it does not contain timing side-channel vulnerabilities that
may compromise user name or password information. However,
2Gabfeed is one of the challenge problems from the DARPA STAC project. Please see
http://www.darpa.mil/program/space-time-analysis-for-cybersecurity for more details
about the STAC project.
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA876Gabfeed contains around 30,000 lines of application code (not in-
cluding any libraries); hence, manually searching for a vulnerability
in the application is akin to finding a needle in the haystack.
A security analyst like Bob can greatly benefit from Themis by
using it to automatically verify the absence of side-channel vulner-
abilities in the target application. To use Themis, Bob first identifies
application-specific confidential data (in this case, secretKey) and
annotates them as such in a Themis-specific configuration file, as
shown in Figure 2. In the same configuration file, Bob also tells
Themis the type of side channel to look for (in this case, timing) by
specifying the costModel field and provides a reasonable value of
ϵ, using the epsilon field. Here, Bob wants to be conservative and
initially sets the value of ϵ to zero.
Using the information provided by Bob in the configuration file,
Themis first performs static taint analysis to identify methods that
are dependent on confidential data. In this case, one of the methods
that access confidential data is modPow, shown in Figure 1. Specif-
ically, Themis determines that the second argument (exponent)
of modPow is tainted and marks it as a “hot spot” that should be
analyzed more precisely using relational verification techniques.
In the next phase, Themis uses its Quantitative Cartesian Hoare
Logic (QCHL) verifier to analyze modPow in more detail. Specifically,
the QCHL verifier considers two executions of modPow that have
the same values of base and modulus but that differ in the value
of exponent. In this case, the QCHL verifier fails to prove that
the resource usage of any such two runs is identical and therefore
issues a warning about a possible timing side channel in the modPow
procedure.
Next, Bob wonders whether the imbalance in resource usage is
large enough to be actually exploitable in practice. For this reason,
he plays around with different values of the bound ϵ, gradually
increasing it to larger and larger constants. In the case of timing
side channels, ϵ represents the difference in the executed number of
Java bytecode instructions. However, no matter what value of ϵ Bob
picks, Themis complains about a possible timing side channel. This
observation indeed makes sense because the difference in resource
usage is proportional to the secret and can therefore not be bounded
by a constant.
Bob now inspects the source code of modPow and realizes that a
possible vulnerability arises due to the resource imbalance in the
secret-dependent branch from line 8. To fix the vulnerability, Bob
adds the code from lines 4 and 10, with the goal of ensuring that the
timing behavior of the program is not dependent on exponent. To
confirm that his fix is valid, Bob now runs Themis one more time
and verifies that his repair eliminates the original vulnerability.
2.2 Threat Model
In this paper, we assume that an adversary can observe a program’s
total resource usage, such as timing, memory, and response size.
When measuring resource usage, we further assume that any varia-
tions are caused at the application software level. Hence, side chan-
nels caused by the microarchitecture such as cache contention [70]
and branch prediction [2] are out of the scope of this work. Physical
side channels (including power and electromagnetic radiation [31])
can, in principle, be handled by our our system as long as a precise
model of the corresponding resource usage is given. We assume
that the attacker is not able to observe anything else about the
program other than its resource usage.
One possible real-world setting in which the aforementioned
assumptions hold could be that the attacker and the victim are
connected through a network, and the victim runs a server or P2P
software that interacts with other machines through encrypted