图5-23 兑换成功
图5-24 订单信息
5.5.3 修复建议
建议商品金额不要在客户端传入，防止被篡改。如果确实需要在客户端传输金额，则
服务端在收到请求后必须检查商品价格和交易金额是否一致，或对支付金额做签名校验，
若不一致则阻止该交易。
5.6 竞争条件测试
5.6.1 测试原理和方法
竞争条件通常是在操作系统编程时会遇到的安全问题：当两个或多个进程试图在同一
时刻访问共享内存，或读写某些共享数据时，最后的竞争结果取决于线程执行的顺序（线
程运行时序），称为竞争条件（Race Conditions）。
在Web安全中，我们可以沿用这个概念，在服务端逻辑与数据库读写存在时序问题
时，就可能存在竞争条件漏洞，如图5-25所示。攻击者通常利用多线程并发请求，在数据
库中的余额字段更新之前，多次兑换积分或购买商品，从中获得利益。
图5-25 竞争条件漏洞
例如，如下PHP代码片段就存在此竞争条件漏洞。
5.6.2 测试过程
攻击者在提交订单时抓包，然后设置很多个线程重放此包。如图5-26所示，在众多请
求中，个别请求就有可能争取绕过金额、次数的判断，交易成功，攻击者从中获利。
图5-26 时间竞争测试流程
某网站退款提现时存在竞争条件漏洞。申请退款时，点了两次，生成了两单退款申
请，如图5-27所示。
图5-27 申请退款
同时余额变成了负数，如图5-28所示。
图5-28 账户余额
退款申请没有经过财务审核，直接收到两笔七千多元的退款，如图5-29所示。
图5-29 提现成功
5.6.3 修复建议
如图5-30所示，在处理订单、支付等关键业务时，使用悲观锁或乐观锁保证事务的
ACID特性（原子性、一致性、隔离性、持久性），并避免数据脏读（一个事务读取了另
一个事务未提交的数据），解决竞争条件和并发操作可能带来的相关业务问题。
图5-30 竞争条件漏洞修补
第6章 业务授权访问模块
6.1 非授权访问测试
6.1.1 测试原理和方法
非授权访问是指用户在没有通过认证授权的情况下能够直接访问需要通过认证才能访
问到的页面或文本信息。可以尝试在登录某网站前台或后台之后，将相关的页面链接复制
到其他浏览器或其他电脑上进行访问，观察是否能访问成功。
6.1.2 测试过程
攻击者登录某应用访问需要通过认证的页面，切换浏览器再次访问此页面，成功访问
则存在未授权访问漏洞，如图6-1所示。
图6-1 非授权访问测试流程图
以某网站交费充值为例。
步骤一：在IE浏览器中登录某网站进行交费，如图6-2所示。
图6-2 成功缴费截图
步骤二：复制交费成功的URL，在火狐浏览器里访问，成功访问，如图6-3所示。
图6-3 再次访问成功截图
6.1.3 修复建议
未授权访问可以理解为需要安全配置或权限认证的地址、授权页面存在缺陷，导致其
他用户可以直接访问，从而引发重要权限可被操作、数据库、网站目录等敏感信息泄露，
所以对未授权访问页面做Session认证，并对用户访问的每一个URL做身份鉴别，正确地
校验用户ID及Token等。
6.2 越权测试
6.2.1 测试原理和方法
越权一般分为水平越权和垂直越权，水平越权是指相同权限的不同用户可以互相访
问；垂直越权是指使用权限低的用户可以访问权限较高的用户。
水平越权测试方法主要是看能否通过A用户的操作影响B用户。
垂直越权测试方法的基本思路是低权限用户越权高权限用户的功能，比如普通用户可
使用管理员功能。
越权分类如图6-4所示。
图6-4
6.2.2 测试过程
6.2.2.1 水平越权测试
正常更改或查看A账户信息，抓包或者更改账户身份ID，成功查看同权限其他账户业
务信息，如图6-5所示。
以某网站后台为例，在核查任务编辑模块时，保存用户任务ID，如图6-6所示。
图6-5 水平权限测试流程图
图6-6 任务编辑模块
步骤一：保存任务并抓包，如图6-7所示。
图6-7 业务抓包
步骤二：可以看到请求中有taskHeader.taskId这个参数，也许这个参数是提交者的业
务ID，如果可以更改，能看到别的提交者（如果是同一权限的用户），则这里存在水平
越权的漏洞，现在利用爆破的方式自动更改taskHeader.taskId，如图6-8所示。
图6-8 更改业务ID
可以看到爆破自动更改taskHeader.taskId的值，响应状态为200，且响应长度也不一
样，查看响应包成功查看其他用户保存的核查任务，如图6-9所示。
图6-9 更改ID后查看同权限用户的业务信息
6.2.2.2 垂直越权测试
登录普通账户A，抓包或直接更改账户A身份ID为高权限C账户的ID，成功查看高权
限账户C的业务信息，如图6-10所示。
图6-10 垂直越权测试流程图
以某系统后台为例。
步骤一：通过手工猜解得出一个账号密码均为111的用户，成功登录，如图6-11所
示。
图6-11 成功登录系统
步骤二：通过查看得知超级管理员账号为admin。找到“修改密码”这一功能，将密码
改为789，单击“确定修改密码”后进行抓包，抓包后可以看到两个参数：uid和pwd，分别
表示用户名和密码。将参数uid的值由111改为admin，码保持789不变，如图6-12所示。
图6-12 更改数据包
步骤三：提交修改的数据包，提示密码修改成功，此时  admin  账号的密码已被改成
789，使用admin账号登录成功，如图6-13所示。
图6-13 高权限admin账户登录成功
6.2.3 修复建议
服务端需校验身份唯一性，自己的身份只能查看、修改、删除、添加自己的信息。
第7章 输入/输出模块测试
7.1 SQL注入测试
7.1.1 测试原理和方法
SQL注入就是通过把SQL命令插入Web表单提交或输入域名页面请求的查询字符串，
最终达到欺骗服务器执行恶意的SQL命令的目的。具体来说，它是利用现有应用程序，将
（恶意）SQL命令注入后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶
意）SQL  语句获取一个存在安全漏洞的网站上的数据库权限，而不是按照设计者的意图
去执行SQL语句。下面通过一个经典的万能密码登录案例深入浅出地介绍SQL注入漏洞。
SQL注入按照请求类型分为：GET型、POST型、Cookie注入型。GET与POST两种类
型的区别是由表单的提交方式决定的。按照数据类型可分为：数字型和字符型（数字也是
字符，严格地说就是一类，区别在于数字型不用闭合前面的SQL语句，而字符型需要闭
合）。测试方法分为报错型、延时型、盲注型、布尔型等。
数字型注入（一般存在于输入的参数为整数的情况下，如  ID、年龄等）测试方法如
下。
第一步：正常请求，查看页面。
第二步：在请求的参数后加and  1=1，如果可以添加执行，则和第一步的返回页面并
无差异。
第三步：在请求参数后加and  1=2，如果返回页面与第二步页面明显不同，或有所差
异，则断定存在数字型注入。
字符型注入（一般存在于接收的参数为字符串的情况下，如姓名、密码等）测试方法
如下。
第一步：正常请求查看页面（如查询admin用户信息，则返回admin用户的信息）。
第二步：在查询的参数后加’or  1=1（有时可以加--来注释后面的语句），加单引号的
目的是闭合前面的SQL语句并与后面的语句形成语法正确的SQL语句。如果可以添加并能
够执行，则返回除 admin 用户外所有用户的信息。这时可以判断存在字符型注入。
7.1.2 测试过程
攻击者确定疑似的数字型注入链接，按照数字型手工注入方式进行手工判断，若确定
存在漏洞后，可用手工注入方式查询数据或使用注入工具查询数据库数据，如图7-1所
示。
图7-1 数字型注入测试流程图
7.1.2.1 数字型注入
以网站http：//XXX.XXX.com/sydwzwb/zwxq.php？id=3974为例。
步骤一：正常访问，查看页面，如图7-2所示。
在参数后加单引号或者%27，即可在参数后构造SQL语句。由于SQL语句单引号是成
对出现的，添加单引号则SQL语句是错误的语句，不能被SQL解释器正常解析。访问报错
说明SQL语句执行了，如图7-3所示。
图7-2 正常访问页面
图7-3 添加单引号页面显示
步骤二：在ID参数后加and 1=1，查看页面，发现与第一步并无异样，如图7-4所示。
图7-4 添加and 1=1页面显示
步骤三：添加and 1=2，并查看页面，如图7-5所示。
图7-5 添加and 1=2页面显示
如果发现与第二步完全不同，则可以证明存在数字型注入，利用专门的SQL注入工具
（如sqlmap）可以拥有数据库增、删、改、查权限，甚至可以执行系统命令、上传后门文
件等。sqlmap 工具下载使用说明详见其官网 http：//sqlmap.org/，如图 7-6所示。
图7-6 用sqlmap跑数据
7.1.2.2 字符型注入
攻击者确定疑似的字符型注入链接，按照字符型手工注入方式进行手工判断，若确定
存在漏洞后，可用手工注入方式查询数据或使用注入工具查询数据库数据，如图7-7所
示。
图7-7 字符型注入测试流程图
以网站http：//xxx/Organ！loadOrgs.shtml为例。
步骤一：正常访问，抓包并查看页面，如图7-8所示。
图7-8 正常访问返回包情况
在参数后加单引号或者%27（由于  SQL  语句单引号是成对出现的，添加单引号则
SQL语句是错误的语句，不能被SQL解释器正常解析。访问报错说明SQL语句执行了），
即可在参数后构造SQL语句，如图7-9所示。
图7-9 添加单引号返回包情况
步骤二：添加’or‘1’=’1，查看页面，如图7-10所示。
图7-10 添加’or‘1’=’1返回包情况
不仅查询出10100095的信息，所有信息都可以查询到，用sqlmap可以进一步验证漏
洞，如图7-11所示。
图7-11 sqlmap注入成功
以上两种注入都是基于报错信息手工测试和工具注入，还有基于时间、盲注、布尔型
等的注入，在这就不一一举例了。
7.1.3 修复建议
每个提交信息的客户端页面、通过服务器端脚本（JSP、ASP、ASPX、PHP等）生成
的客户端页面、提交的表单（FORM）或发出的链接请求中包含的所有变量，必须对变量
的值进行检查，过滤其中包含的特殊字符，或对字符进行转义处理。特殊字符如下。
· SQL语句关键词：如and、or、select、declare、update、xp_cmdshell；
· SQL语句特殊符号：’、”、；等。
此外，Web  应用系统接入数据库服务器使用的用户不应为系统管理员，用户角色应
遵循最小权限原则。
7.2 XSS测试
7.2.1 测试原理和方法
跨站脚本漏洞是Web应用程序在将数据输出到网页的时候存在问题，导致恶意攻击者
可以往Web页面里插入恶意JavaScript、HTML代码，并将构造的恶意数据显示在页面的漏
洞中。攻击者一般利用此漏洞窃取或操纵客户会话和  Cookie，用于模仿合法用户，从而
使攻击者以该用户身份查看或变更用户记录以及执行事务。
跨站一般情况下主要分为存储型跨站、反射型跨站、DOM型跨站。存储型跨站脚本