| 0x00000d37 push rbp
| 0x00000d38 mov rbp, rsp
| 0x00000d3b sub rsp, 0x20
| 0x00000d3f lea rax, [0x00203070]
; [0x00203070] 存放 house_num
| 0x00000d46 mov eax, dword [rax]
| 0x00000d48 cmp eax, 3
| ,= 0x00000d63 mov edi, 0x10
| 0x00000d68 call sym.imp.malloc
; rax = malloc(0x10) 给 house struct 分配空间
| 0x00000d6d mov qword [local_10h], rax
; house 的地址放到 [local_10h]
| 0x00000d71 lea rdi, str.Length_of_name_:
; 0x1e4e ; "Length of name :"
| 0x00000d78 mov eax, 0
| 0x00000d7d call sym.imp.printf
; int printf(const char *format)
| 0x00000d82 mov eax, 0
| 0x00000d87 call sub.__read_chk_c65
; 读入 length
| 0x00000d8c mov dword [local_18h], eax
; length 放到 [local_18h]
| 0x00000d8f cmp dword [local_18h], 0x1000
; [0x1000:4]=0x2062058d
| ,= 0x00000d9f mov eax, dword [local_18h]
| 0x00000da2 mov rdi, rax
| 0x00000da5 call sym.imp.malloc
; rax = malloc(length) 给 name 分配空间
| 0x00000daa mov rdx, rax
; name 的地址放到 rdx
| 0x00000dad mov rax, qword [local_10h]
; 取出 house
| 0x00000db1 mov qword [rax + 8], rdx
; house->name = name
| 0x00000db5 mov rax, qword [local_10h]
| 0x00000db9 mov rax, qword [rax + 8]
; 取出 house->name
| 0x00000dbd test rax, rax
| ,=name 不为空时跳转
| | 0x00000dc2 lea rdi, str.Malloc_error
; 否则报错并退出
1329
6.1.24 pwn HITCONCTF2016 House_of_Orange
| | 0x00000dc9 call sym.imp.puts
; int puts(const char *s)
| | 0x00000dce mov edi, 1
| | 0x00000dd3 call sym.imp._exit
; void _exit(int status)
| | ; CODE XREF from 0x00000dc0 (sub.Too_many_house_d37)
| `-> 0x00000dd8 lea rdi, str.Name_:
; 0x1e70 ; "Name :"
| 0x00000ddf mov eax, 0
| 0x00000de4 call sym.imp.printf
; int printf(const char *format)
| 0x00000de9 mov rax, qword [local_10h]
| 0x00000ded mov rax, qword [rax + 8]
; 取出 house->name
| 0x00000df1 mov edx, dword [local_18h]
; 取出 length
| 0x00000df4 mov esi, edx
| 0x00000df6 mov rdi, rax
| 0x00000df9 call sub.read_c20
; 调用 read_c20(house->name, length) 读入 name
| 0x00000dfe mov esi, 8
| 0x00000e03 mov edi, 1
| 0x00000e08 call sym.imp.calloc
; rax = calloc(1, 8) 分配一个 8 bytes 的空间作为 orange str
uct
| 0x00000e0d mov qword [local_8h], rax
; orange 的地址放到 [local_8h]
| 0x00000e11 lea rdi, [0x00001e77]
; "Price of Orange:"
| 0x00000e18 mov eax, 0
| 0x00000e1d call sym.imp.printf
; int printf(const char *format)
| 0x00000e22 mov eax, 0
| 0x00000e27 call sub.__read_chk_c65
; 读入 price
| 0x00000e2c mov edx, eax
; price 赋值给 edx
| 0x00000e2e mov rax, qword [local_8h]
; 取出 orange
| 0x00000e32 mov dword [rax], edx
1330
6.1.24 pwn HITCONCTF2016 House_of_Orange
; orange->price = price
| 0x00000e34 mov eax, 0
| 0x00000e39 call sub._cc4
; 打印 color 菜单
| 0x00000e3e lea rdi, [0x00001e88]
; "Color of Orange:"
| 0x00000e45 mov eax, 0
| 0x00000e4a call sym.imp.printf
; int printf(const char *format)
| 0x00000e4f mov eax, 0
| 0x00000e54 call sub.__read_chk_c65
; 读入 color
| 0x00000e59 mov dword [local_14h], eax
; color 放到 [local_14h]
| 0x00000e5c cmp dword [local_14h], 0xddaa
; [0xddaa:4]=-1
| ,= 0x00000e71 lea rdi, str.No_such_color
; 0x1e99 ; "No such color"
| | | 0x00000e78 call sym.imp.puts
; int puts(const char *s)
| | | 0x00000e7d mov edi, 1
| | | 0x00000e82 call sym.imp._exit
; 当 color != 0xddaa && (color  7) 时退出程
序
| | | ; CODE XREF from 0x00000e63 (sub.Too_many_house_d37)
| | | ; CODE XREF from 0x00000e6f (sub.Too_many_house_d37)
| `-`-> 0x00000e87 cmp dword [local_14h], 0xddaa
; [0xddaa:4]=-1
| ,=color = color
| ,== 0x00000e9c mov eax, dword [local_14h]
; 取出 color
| | 0x00000e9f lea edx, [rax + 0x1e]
; edx = color + 0x1e
| | 0x00000ea2 mov rax, qword [local_8h]
; 取出 orange
| | 0x00000ea6 mov dword [rax + 4], edx
; orange->color = edx == color + 0x1e
| | ; CODE XREF from 0x00000e9a (sub.Too_many_house_d37)
| `--> 0x00000ea9 mov rax, qword [local_10h]
; 取出 house
| 0x00000ead mov rdx, qword [local_8h]
; 取出 orange
| 0x00000eb1 mov qword [rax], rdx
; house->org = orange
| 0x00000eb4 lea rax, [0x00203068]
| 0x00000ebb mov rdx, qword [local_10h]
| 0x00000ebf mov qword [rax], rdx
; 将 house 的地址放到 [0x00203068]
| 0x00000ec2 lea rax, [0x00203070]
| 0x00000ec9 mov eax, dword [rax]
| 0x00000ecb lea edx, [rax + 1]
; house_num += 1
| 0x00000ece lea rax, [0x00203070]
| 0x00000ed5 mov dword [rax], edx
| 0x00000ed7 lea rdi, str.Finish
; 0x1ea7 ; "Finish"
| 0x00000ede call sym.imp.puts
; int puts(const char *s)
| 0x00000ee3 nop
| 0x00000ee4 leave
\ 0x00000ee5 ret
通过对这段代码的分析可以得到两个结构体：
1332
6.1.24 pwn HITCONCTF2016 House_of_Orange
struct orange{
int price;
int color;
} orange;
struct house {
orange *org;
char *name;
} house;
Build 最多可以进行 4 次，整个过程有 2 个 malloc 和 1 个 calloc：
malloc(0x10) ：给 house struct 分配空间
malloc(length) ：给 name 分配空间，其中 length 来自用户输入，如果大
于 0x1000，则按照 0x1000 处理。
calloc(1, 8) ：给 orange struct 分配空间
那么我们再来看一下用于读入 name 的函数：
1333
6.1.24 pwn HITCONCTF2016 House_of_Orange
[0x00000af0]> pdf @ sub.read_c20
/ (fcn) sub.read_c20 69
| sub.read_c20 ();
| ; var int local_1ch @ rbp-0x1c
| ; var int local_18h @ rbp-0x18
| ; var int local_4h @ rbp-0x4
| ; var int local_0h @ rbp-0x0
| ; CALL XREF from 0x00000df9 (sub.Too_many_house_d37)
| ; CALL XREF from 0x00001119 (sub.You_can_t_upgrade_m
ore_7c)
| 0x00000c20 push rbp
| 0x00000c21 mov rbp, rsp
| 0x00000c24 sub rsp, 0x20
| 0x00000c28 mov qword [local_18h], rdi
| 0x00000c2c mov dword [local_1ch], esi
| 0x00000c2f mov edx, dword [local_1ch]
| 0x00000c32 mov rax, qword [local_18h]
| 0x00000c36 mov rsi, rax
| 0x00000c39 mov edi, 0
| 0x00000c3e call sym.imp.read
; 调用 read(0, house->name, length) 读入 name
| 0x00000c43 mov dword [local_4h], eax
| 0x00000c46 cmp dword [local_4h], 0
| ,= 0x00000c62 nop
| 0x00000c63 leave
\ 0x00000c64 ret
这个函数在读入 length 长度的字符串后，没有在末尾加上 \x00 截断，正如我们
上面看到的，可能导致信息泄露。
1334
6.1.24 pwn HITCONCTF2016 House_of_Orange
See the house
[0x00000af0]> pdf @ sub.Name_of_house_:__s_ee6
/ (fcn) sub.Name_of_house_:__s_ee6 406
| sub.Name_of_house_:__s_ee6 ();
| ; CALL XREF from 0x00001409 (main)
| 0x00000ee6 push rbp
| 0x00000ee7 mov rbp, rsp
| 0x00000eea lea rax, [0x00203068]
| 0x00000ef1 mov rax, qword [rax]
; 取出 house
| 0x00000ef4 test rax, rax
| ,=org
| | 0x00000f0a mov eax, dword [rax + 4]
; 取出 house->org->color，即 orange->color
| | 0x00000f0d cmp eax, 0xddaa
| ,==color 不等于 0xddaa 时跳转
| || 0x00000f18 lea rax, [0x00203068]
| || 0x00000f1f mov rax, qword [rax]
| || 0x00000f22 mov rax, qword [rax + 8]
; 取出 house->name
| || 0x00000f26 mov rsi, rax
| || 0x00000f29 lea rdi, str.Name_of_house_:__s
; 0x1eae ; "Name of house : %s\n"
| || 0x00000f30 mov eax, 0
| || 0x00000f35 call sym.imp.printf
; 打印 house->name
| || 0x00000f3a lea rax, [0x00203068]
| || 0x00000f41 mov rax, qword [rax]
| || 0x00000f44 mov rax, qword [rax]
| || 0x00000f47 mov eax, dword [rax]
; 取出 orange->price
1335
6.1.24 pwn HITCONCTF2016 House_of_Orange
| || 0x00000f49 mov esi, eax
| || 0x00000f4b lea rdi, str.Price_of_orange_:__d
; 0x1ec2 ; "Price of orange : %d\n"
| || 0x00000f52 mov eax, 0
| || 0x00000f57 call sym.imp.printf
; 打印 orange->price
| || 0x00000f5c call sym.imp.rand
; rand_num = rand() 生成一个随机数
| || 0x00000f61 mov edx, eax
| || 0x00000f63 mov eax, edx
| || 0x00000f65 sar eax, 0x1f
| || 0x00000f68 shr eax, 0x1d