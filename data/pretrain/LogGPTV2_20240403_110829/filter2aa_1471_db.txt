### ETW Access Rights and Security

#### TRACELOG_REGISTER_GUIDS
This function allows the user to register a provider, creating an `EtwRegistration` object backed by the `ETW_REG_ENTRY` data structure.

#### TRACELOG_JOIN_GROUP
This function allows the user to insert a manifest-based or tracelogging provider into a Providers group. This is part of the ETW traits, which are not covered in this book.

#### ETW Access Rights
Most ETW access rights are automatically granted to the SYSTEM account and members of the Administrators, Local Service, and Network Service groups. This implies that normal users are not allowed to interact with ETW unless an explicit session and provider security descriptor permits it. To address this, Windows includes the Performance Log Users group, designed to allow normal users to interact with ETW, especially for controlling trace sessions. While all ETW access rights are granted by the default security descriptor to the Performance Log Users group, Windows also supports the Performance Monitor Users group, which is designed only to receive or send notifications to the session notification provider. This group is intended to access system performance counters, enumerated by tools like Performance Monitor and Resource Monitor, but not to access full ETW events. These tools are described in the "Performance monitor and resource monitor" section of Chapter 1 in Part 1.

#### ETW Security Descriptors
As introduced in the "ETW Sessions" section, all ETW security descriptors are stored in the `HKLM\System\CurrentControlSet\Control\Wmi\Security` registry key in binary format. In ETW, anything represented by a GUID can be protected by a customized security descriptor. Applications typically manage ETW security using the `EventAccessControl` and `EventAccessQuery` APIs implemented in `Sechost.dll`, rather than directly interacting with the security descriptors stored in the registry.

### Experiment: Viewing the Default Security Descriptor of ETW Sessions
A kernel debugger can display the default security descriptor associated with ETW sessions that do not have a specific one. For this experiment, you need a Windows 10 machine with a kernel debugger attached and connected to a host system. Alternatively, you can use a local kernel debugger or LiveKd (downloadable from [Microsoft Sysinternals](https://docs.microsoft.com/en-us/sysinternals/downloads/livekd)). After configuring the correct symbols, you can dump the default security descriptor using the following command:
```plaintext
!sd poi(nt!EtwpDefaultTraceSecurityDescriptor)
```
The output should be similar to the following (truncated for brevity):
```plaintext
->Revision: 0x1
->Sbz1    : 0x0
->Control : 0x8004
            SE_DACL_PRESENT
            SE_SELF_RELATIVE
->Owner   : S-1-5-32-544
->Group   : S-1-5-32-544
->Dacl    :
->Dacl    : ->AclRevision: 0x2
->Dacl    : ->Sbz1       : 0x0
->Dacl    : ->AclSize    : 0xf0
->Dacl    : ->AceCount   : 0x9
->Dacl    : ->Sbz2       : 0x0
->Dacl    : ->Ace[0]: ->AceType: ACCESS_ALLOWED_ACE_TYPE
->Dacl    : ->Ace[0]: ->AceFlags: 0x0
->Dacl    : ->Ace[0]: ->AceSize: 0x14
->Dacl    : ->Ace[0]: ->Mask : 0x00001800
->Dacl    : ->Ace[0]: ->SID: S-1-1-0
...
```
You can use the `Psgetsid` tool (available at [Microsoft Sysinternals](https://docs.microsoft.com/en-us/sysinternals/downloads/psgetsid)) to translate the SIDs to human-readable names. From the output, you can see that all ETW access is granted to the SYSTEM (S-1-5-18), LOCAL SERVICE (S-1-5-19), NETWORK SERVICE (S-1-5-20), and Administrators (S-1-5-32-544) groups. The Performance Log Users group (S-1-5-32-559) has almost all ETW access, while the Performance Monitor Users group (S-1-5-32-558) has only the `WMIGUID_NOTIFICATION` access right granted by the session’s default security descriptor.

### Security Audit Logger
The Security Audit logger is an ETW session used by the Windows Event logger service (`wevtsvc.dll`) to listen for events generated by the Security Lsass Provider. The Security Lsass provider (identified by the `{54849625-5478-4994-a5ba-3e3b0328c30d}` GUID) can only be registered by the NT kernel at ETW initialization time and is never inserted into the global provider’s hash table. Only the Security audit logger and Autologgers configured with the `EnableSecurityProvider` registry value set to 1 can receive events from the Security Lsass Provider. When the `EtwStartAutoLogger` internal function encounters this value, it enables the `SECURITY_TRACE` flag on the associated ETW session, adding the session to the list of loggers that can receive Security audit events. This flag also ensures that user-mode applications cannot query, stop, flush, or control the session unless they are running as protected process light (at the antimalware, Windows, or WinTcb level).

### Secure Loggers
Classic (MOF) and WPP providers were not designed to support all the security features implemented for manifest-based and tracelogging providers. An Autologger or a generic ETW session can be created with the `EVENT_TRACE_SECURE_MODE` flag, marking the session as secure. A secure session ensures that it receives events only from trusted identities. The flag has two main effects:
- Prevents classic (MOF) and WPP providers from writing any event to the secure session.
- Requires the `TRACELOG_LOG_EVENT` access right, which should be granted by the session’s security descriptor to the controller application’s access token while enabling a provider to the secure session.

### Dynamic Tracing (DTrace)
Event Tracing for Windows (ETW) is a powerful tracing technology integrated into the OS, but it is static, meaning that the end user can only trace and log events generated by well-defined components. To overcome this limitation, the May 2019 Update of Windows 10 (19H1) introduced DTrace, a dynamic tracing facility. DTrace can be used by administrators on live systems to examine the behavior of both user programs and the operating system. DTrace is an open-source technology originally developed for Solaris and ported to several other operating systems, including Windows.

DTrace can dynamically trace parts of the operating system and user applications at specific locations called probes. Probes are specified in a script file using the D programming language. Support for probes is provided by kernel modules called providers. At the time of writing, Windows supports the following providers:
- **SYSCALL**: Traces OS system calls (both on entry and exit) invoked from user-mode applications and kernel-mode drivers.
- **FBT (Function Boundary Tracing)**: Traces the execution of individual functions in all modules running in the NT kernel.
- **PID (User-mode process tracing)**: Similar to FBT, but for tracing individual functions of a user-mode process and application.
- **ETW (Event Tracing for Windows)**: Attaches to manifest-based and TraceLogging events fired from the ETW engine.
- **PROFILE**: Provides probes associated with a time-based interrupt firing at fixed intervals.
- **DTRACE**: Built-in provider implicitly enabled in the DTrace engine.

### Experiment: Enabling DTrace and Listing Installed Providers
To enable and list the installed DTrace providers, follow these steps:
1. Enable DTrace by opening an administrative command prompt and typing:
   ```plaintext
   bcdedit /set dtrace ON
   ```
2. Download and install the DTrace package from [Microsoft Download Center](https://www.microsoft.com/download/details.aspx?id=100441).
3. Restart your computer and open an administrative command prompt.
4. Type the following commands:
   ```plaintext
   cd /d "C:\Program Files\DTrace"
   dtrace -l > providers.txt
   ```
5. Open the generated `providers.txt` file. If DTrace is successfully installed and enabled, a list of probes and providers (DTrace, syscall, and ETW) should be listed.

Probes are composed of an ID and a human-readable name, consisting of up to four parts:
- **Provider**: The name of the DTrace provider publishing the probe.
- **Module**: The name of the module in which the probe is located (for PID and ETW providers).
- **Function**: The name of the program function in which the probe is located.
- **Name**: The final component giving some idea of the probe’s semantic meaning.

For example, `syscall::NtQuerySystemInformation:entry` specifies a probe on the `NtQuerySystemInformation` function entry provided by the `syscall` provider.

### Internal Architecture of DTrace
In Windows 10 May 2020 Update (20H1), some DTrace components must be installed through an external package. Future versions of Windows may integrate DTrace completely into the OS image. DTrace in Windows consists of the following components:
- **DTrace.sys**: The DTrace extension driver executes actions associated with probes and stores results in a circular buffer.
- **DTrace.dll**: Encapsulates LibDTrace, which implements the D compiler, sends IOCTLs to the DTrace driver, and consumes the DTrace buffer.
- **DTrace.exe**: The entry point executable that dispatches commands to LibDTrace.

To start a dynamic trace, the user invokes `DTrace.exe` specifying a command or an external D script. The D compiler compiles the D script into DTrace Intermediate Format (DIF) bytecode, which is then executed by the DTrace driver. The DTrace driver implements all providers and evaluates each D clause, executing associated actions.

### DTrace Initialization
The initialization of DTrace in the Windows OS involves the setup and configuration of these components to enable dynamic tracing. Detailed information on the DIF bytecode and D script compilation can be found in the OpenDTrace Specification book.