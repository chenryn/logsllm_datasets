### A.6 Supplementary Material for Section 8

In the following, we assume that at least one participant in {G}C possesses a secret \( a \) in \( G \). The rule [C-Advertise] requires that secret names are fresh, ensuring that the same contract cannot be advertised more than once. This assumption does not affect expressiveness, as \( a \) need not be used in \( C \). In all our examples, we implicitly adhere to this condition.

#### Definitions and Notations

1. **Contract Compilation:**
   - Let \( \parallel i \in I \, A_i :? v_i @ x_i \)
   - Let \( C = \sum_{i=1}^m D_i \)
   - Let \( e_i = \text{Bout}(D_i) \)
   - Let \( T_i = \text{BD}(D_i, D_i, T_{\text{init}}, 0, v, \text{Part}_G, 0) \) for all \( i \in 1..m \)
   - Let \( \parallel i \in J \, B_i :! v'_i @ y_i \)
   - Let \( v = \sum_{i \in J} v'_i \)
   - Let \( \vec{x} = \prod_{i=1}^m f_v(e_i) \)
   - Let \( \parallel i \in K \, C_i : \text{secret } a_i \)

2. **Transaction Construction:**
   - Let \( \text{Badv}(\{G\}C) = T_{\text{init}} T_1 \cdots T_m \)
   - Let \( T_{\text{init}} \):
     - Input: \( i \mapsto \text{txout}(y_i) \)
     - Witness: \( \bot \)
     - Output: \( \lambda \vec{x}. \sum_{i=1}^m (e_i, v) \)
   - Let \( C = \sum_{i=1}^m D_i \)
   - Let \( e_i = \text{Bout}(D_i) \)
   - Let \( \vec{x} = \prod_{i=1}^m f_v(e_i) \)
   - Let \( I = \{z_1, \ldots, z_k\} \)
   - Let \( T_i = \text{BD}(D_i, D_i, T_C, 0, v, \text{Part}_G, 0) \) for all \( i \in 1..m \)
   - Let \( T_C \):
     - Input: \( 0 \mapsto (T, o), i \mapsto \text{txout}(z_i) \)
     - Output: \( \lambda \vec{x}. \sum_{i=1}^m (e_i, v) \)
     - Witness: \( 0 \mapsto \text{sig}_K(D_p, P), i \mapsto \text{sig}_K(\text{part}(z_i)) \)
   - Let \( \text{BC}(C, D_p, T, o, v, I, P, t) = T_C T_1 \cdots T_m \)

3. **Contract Terms:**
   - Let \( D \equiv A_1 : \cdots : A_n : \text{after } t_1 : \cdots : \text{after } t_k : \text{put } \vec{z} \& \text{reveal } \vec{a} \text{ if } p . C \vec{\sigma} \text{ fresh} \)
   - Let \( \text{Bout}(D) = \text{versig}_K(D, \text{Part}_G)(\vec{\sigma}) \)
   - Let \( D \equiv A_1 : \cdots : A_n : \text{after } t_1 : \cdots : \text{after } t_k : \text{put } \vec{z} \& \text{reveal } \vec{a} \text{ if } p . C \vec{a} = a_1 \cdots a_m \vec{\sigma}, b_1 \cdots b_m \text{ fresh} \)
   - Let \( \text{Bout}(D) = \text{versig}_K(D, \text{Part}_G)(\vec{\sigma}) \land B(p\{b_1/a_1\} \cdots \{b_m/a_m\}) \land \bigwedge_{i=1}^m H(b_i) = \text{sechash}(a_i) \land |b_i| \geq \eta \)

4. **Transaction Functions:**
   - Let \( D = \text{withdraw } A \)
   - Let \( \text{BD}(D, D_p, T, o, v, P, t) = \{ \text{in: } (T, o), \text{wit: } \text{sig}_K(D_p, P), \text{out: } (\lambda \sigma. \text{versig}_K(A)(\sigma), v), \text{absLock: } t \} \)
   - Let \( D = \text{put } \vec{z} \& \text{reveal } \vec{a} \text{ if } p . C \)
   - Let \( v' = v + \sum_{x \in \vec{z}} \text{val}(x) \)
   - Let \( \text{BD}(D, D_p, T, o, v, P, t) = \text{BC}(C, D_p, T, o, v', \vec{z}, P, t) \)
   - Let \( D = \text{split } \vec{v} \rightarrow \vec{C} \)
   - Let \( \text{BD}(D, D_p, T, o, v, P, t) = \text{Bpar}(\vec{C}, D_p, T, o, \vec{v}, P, t) \)
   - Let \( D = A : D' \)
   - Let \( \text{BD}(D, D_p, T, o, v, P, t) = \text{BD}(D', D_p, T, o, v, P \setminus \{A\}, t) \)
   - Let \( D = \text{after } t' : D' \)
   - Let \( \text{BD}(D, D_p, T, o, v, P, t) = \text{BD}(D', D_p, T, o, v, P, \max\{t, t'\}) \)

5. **Parallel Transactions:**
   - Let \( \vec{C} = C_1 \cdots C_n \)
   - Let \( \vec{v} = v_1 \cdots v_n \)
   - Let \( \vec{x} = \prod_{j=1}^{k_i} f_v(e_{i,j}) \)
   - Let \( \vec{C} = \sum_{j=1}^{k_i} D_{i,j} \)
   - Let \( e_{i,j} = \text{Bout}(D_{i,j}) \)
   - Let \( \text{Bpar}(\vec{C}, D_p, T, o, \vec{v}, P, t) = T_C (T_{i,j})_{i \in 1..n, j \in 1..k_i} \)
   - Let \( T_{i,j} = \text{BD}(D_{i,j}, D_{i,j}, T_C, i-1, v_i, \text{Part}_G, 0) \)

6. **Boolean Expressions:**
   - Let \( B(\text{true}) = \text{true} \)
   - Let \( B(p_1 \land p_2) = B(p_1) \land B(p_2) \)
   - Let \( B(N) = N \)
   - Let \( B(|a|) = |a| - \eta \)
   - Let \( B(\neg p) = \neg B(p) \)
   - Let \( B(e_1 \circ e_2) = B(e_1) \circ B(e_2) \)
   - Let \( B(e_1 \cdot e_2) = B(e_1) \cdot B(e_2) \)

#### Figures

**Figure 7: Compiling Contracts to Bitcoin Transactions**

- **Tinit:**
  - Input: \( 0 \mapsto (T_A, 0), 1 \mapsto (T_B, 0) \)
  - Witness: \( \bot \)
  - Output: \( (\lambda \sigma_A \sigma_B b. e_1 \lor e_2, v) \)

- **T′:**
  - Input: \( (T_{\text{init}}, 0) \)
  - Witness: \( \text{sig}_K(D_1, \{A, B\}) \)
  - Output: \( (\lambda \sigma_A \sigma_B. e', v) \)

- **T′_A:**
  - Input: \( (T', 0) \)
  - Witness: \( \text{sig}_K(\text{withdraw } A, \{A, B\}) \)
  - Output: \( (\lambda \sigma. \text{versig}_K(A)(\sigma), v) \)

- **T′_B:**
  - Input: \( (T_{\text{init}}, 0) \)
  - Witness: \( \text{sig}_K(D_2, \{A, B\}) \)
  - Output: \( (\lambda \sigma. \text{versig}_K(B)(\sigma), v) \)
  - Absolute Locktime: \( t \)

**Figure 8: Transactions Obtained by Compiling the Timed Commitment Contract**

- **Tinit:**
  - Input: \( 0 \mapsto (T_A, 0), 1 \mapsto (T_B, 0) \)
  - Witness: \( \bot \)
  - Output: \( (\lambda \sigma_A \sigma_B b. e_1 \lor e_2, v) \)

- **T′:**
  - Input: \( (T_{\text{init}}, 0) \)
  - Witness: \( \text{sig}_K(D_1, \{A, B\}) \)
  - Output: \( (\lambda \sigma_A \sigma_B. e', v) \)

- **T′_A:**
  - Input: \( (T', 0) \)
  - Witness: \( \text{sig}_K(\text{withdraw } A, \{A, B\}) \)
  - Output: \( (\lambda \sigma. \text{versig}_K(A)(\sigma), v) \)

- **T′_B:**
  - Input: \( (T_{\text{init}}, 0) \)
  - Witness: \( \text{sig}_K(D_2, \{A, B\}) \)
  - Output: \( (\lambda \sigma. \text{versig}_K(B)(\sigma), v) \)
  - Absolute Locktime: \( t \)

### Definition 20: Coherence

We inductively define the relation \( \text{coher}(R_s, R_c, r, \text{txout}, \text{sechash}, \kappa) \), where:
- \( R_s \) is a symbolic run,
- \( R_c \) is a computational run,
- \( r \) is a randomness source,
- \( \text{txout} \) is an injective function from names \( x \) (occurring in \( R_s \)) to transaction outputs \( (T, o) \) (where \( T \) occurs in \( R_c \)), respecting values,
- \( \text{sechash} \) is a mapping from secret names \( a \) (occurring in \( R_s \)) to bitstrings,
- \( \kappa \) maps triples \( (\{G\}C, D, A) \), where \( D \) is a subterm of \( C \), to public keys.

**Base Case:**
- \( \text{coher}(R_s, R_c, r, \text{txout}, \text{sechash}, \kappa) \) holds if all the following conditions hold:
  - \( R_s = \Gamma_0 | 0 \), with \( \Gamma_0 \) initial,
  - \( R_c = T_0 \cdots \) initial,
  - All the public keys in \( R_c \) are generated from \( r \) according to Definition 13,
  - \( \text{txout} \) maps exactly the \( x \) of \( \langle A, v \rangle_x \) in \( \Gamma_0 \) to an output in \( T_0 \) of value \( v_B \), and spendable with \( \hat{K}_A(r_A) \),
  - \( \text{dom sechash} = \emptyset \),
  - \( \text{dom } \kappa = \emptyset \).

**Inductive Case:**
- \( \text{coher}(\dot{R}_s \xrightarrow{\alpha} \Gamma | t, \dot{R}_c \xrightarrow{\lambda_c}, r, \text{txout}, \text{sechash}, \kappa) \) holds if \( \text{coher}(\dot{R}_s, \dot{R}_c, r, \text{txout}', \text{sechash}', \kappa') \) and one of the following cases applies:

1. **Advertisement:**
   - \( \alpha = \text{advertise}(\{G\}C) \), \( \lambda_c = A \to * : C \), where \( C \) is obtained by encoding \( \{G\}C \) as a bitstring, representing each \( x \) in it as the transaction output \( \text{txout}'(x) \).
   - Further, \( \text{txout}' = \text{txout} \), \( \text{sechash}' = \text{sechash} \), and \( \kappa' = \kappa \).

2. **Commitment:**
   - \( \alpha = A : \{G\}C, \Delta \), where:
     - For some \( B \), \( \dot{R}_c \) contains \( B \to * : C \),
     - \( C \) is obtained from \( \{G\}C \) and \( \text{txout}' \) as in Item 1.
     - For some \( B \), \( \lambda_c = B \to * : (C, \vec{h}, \vec{k}) \) (signed by \( A \)), where \( \vec{h} \) is a sequence comprising a bitstring \( h_i \) for each secret \( a_i \) in \( \Delta \), and \( \vec{k} \) is a sequence of keys produced by the stipulation protocol.
     - We require that \( \lambda_c \) is the first occurrence, in the run \( \dot{R}_c \), of such a message after \( C \).
     - If \( N_i \neq \bot \), we require that \( \dot{R}_c \) contains, for some \( B \), a query to the oracle \( B \to O : m_i \), such that \( |m_i| = \eta + N_i \).
     - Otherwise, if \( N_i = \bot \), we require that \( h_i \) does not occur as a reply from \( O \) to any query of length \( \geq \eta \).
     - No hash is reused: the \( h_i \) are pairwise distinct, and also distinct from \( \text{sechash}'(b) \) for any \( b \in \text{dom}(\text{sechash}') \).
     - \( \text{txout} = \text{txout}' \).
     - \( \text{sechash} \) extends \( \text{sechash}' \) so that for each secret \( a_i \), we have \( \text{sechash}(a_i) = h_i \).
     - If \( A \in \text{Hon} \), we define \( \kappa \) by extending \( \kappa' \) according to \( \vec{k} \), to record the public keys of all participants occurring in \( G \) for each subterm \( D \) of \( C \). If \( \kappa' \) already defines such keys, or \( A \notin \text{Hon} \), we let \( \kappa = \kappa' \).

3. **Deposit:**
   - \( \alpha = A : \{G\}C, x \), where:
     - \( \lambda_c = B \to * : m \) for some \( B \), where \( m \) is the signature of the transaction \( T_{\text{init}} \) of \( \text{Badv}(\{G\}C) \) relatively to the input \( x \) with \( \hat{K}_A(r_A) \).
     - The parameters of the compiler are set as follows: \( \text{part} \), \( \text{Part}_G \), and \( \text{val} \) are inferred from \( G \), we let \( \text{txout} = \text{txout}' \), \( \text{sechash} = \text{sechash}' \), \( K(D, B) = \kappa'(\{G\}C, D, B) \) for each \( B \), and \( D \) subterm of \( C \).
     - For some \( B \), we have \( B \to * : T_{\text{init}} \) occurring in \( \dot{R}_c \).
     - \( \lambda_c \) is the first occurrence in \( \dot{R}_c \) of a broadcast of \( m \) after \( T_{\text{init}} \).
     - \( \text{txout} = \text{txout}' \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).

4. **Initialization:**
   - \( \alpha = \text{init}(G, C) \), where:
     - \( \alpha \) consumes from \( \dot{R}_s \) the advertisement \( \{G\}C \) and its persistent deposits to produce \( \langle C, v \rangle_z \).
     - \( \lambda_c = T_{\text{init}} \) where \( T_{\text{init}} \) is the first transaction.

5. **Action:**
   - \( \alpha = A : x, D \), where:
     - \( \dot{R}_s \) contains \( \langle C', v \rangle_x \) with \( C' = D + \sum_{i} D_i \) in \( \text{Badv}(\{G\}C) \).
     - The needed compiler parameters are obtained as in Item 3.
     - \( \text{sechash} = \text{sechash}' \), \( \kappa = \kappa' \), and \( \text{txout} \) extends \( \text{txout}' \), mapping \( z \) to \( T_{\text{init}} \).

6. **Put Action:**
   - \( \alpha = \text{put}(\vec{x}, \vec{a}, y) \), where:
     - \( \vec{x} = x_1 \cdots x_k \).
     - In \( \Gamma \dot{R}_s \), the action \( \alpha \) consumes \( \langle D + C, v \rangle_y \) and the deposits \( \langle A_i, v_i \rangle_{x_i} \) to produce \( \langle C', v' \rangle_{y'} \), where \( D = \cdots : \text{put} \cdots \text{reveal} \cdots. C' \).
     - Let \( t \) be the maximum deadline in an "after" in front of \( D \).
     - In \( \dot{R}_s \), we find that \( \langle D + C, v \rangle_y \) has \( \{G\}C'' \) as its ancestor advertisement, for some \( G \) and \( C'' \).
     - \( \lambda_c = T \) where \( T \) is the first transaction of \( \text{BC}(C', D, T', o, v', \vec{x}, \text{Part}_G, t) \), where \( (T', o) = \text{txout}'(y) \).
     - The compiler parameters are obtained as in Item 3.
     - \( \text{txout} \) extends \( \text{txout}' \) so that \( y' \) is mapped to \( (T, 0) \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).

7. **Reveal Secret:**
   - \( \alpha = A : a \), where:
     - \( \lambda_c = B \to * : m \) from some \( B \) with \( |m| \geq \eta \).
     - \( \dot{R}_c = \cdots (B \to O : m)(O \to B : \text{sechash}'(a)) \cdots \), for some \( B \).
     - \( \text{txout} = \text{txout}' \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).
     - In \( \dot{R}_s \) we find an \( A : \{G\}C, \Delta \) action, with \( a \) in \( G \), with a corresponding broadcast in \( \dot{R}_c \) of \( m' = (C, \vec{h}, \vec{k}) \).
     - \( \lambda_c \) is the first broadcast of \( m \) in \( \dot{R}_c \) after the first broadcast of \( m' \).

8. **Split Action:**
   - \( \alpha = \text{split}(y) \), where:
     - In \( \dot{R}_s \), the action \( \alpha \) consumes \( \langle D + C, v \rangle_y \) to obtain \( \langle C_0, v_0 \rangle_{x_0} \cdots \langle C_k, v_k \rangle_{x_k} \) and \( \vec{C} = C_0 \cdots C_k \).
     - Let \( t \) be the maximum deadline in an "after" in front of \( D \).
     - In \( \dot{R}_s \), we find that \( \langle D + C, v \rangle_y \) has \( \{G\}C' \) as its ancestor advertisement.
     - \( \lambda_c = T \) where \( T \) is the first transaction of \( \text{Bpar}(\vec{C}, D, T', o, \text{Part}_G, t) \) where \( (T', o) = \text{txout}'(y) \).
     - The compiler parameters are obtained as for Item 3.
     - \( \text{txout} \) extends \( \text{txout}' \) mapping each \( x_i \) to \( (T, i) \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).

9. **Withdrawal:**
   - \( \alpha = \text{withdraw}(A, v, y) \), where:
     - In \( \dot{R}_s \), the action \( \alpha \) consumes \( \langle D + C, v \rangle_y \) to obtain \( \langle A, v \rangle_x \), where \( D = \cdots : \text{withdraw } A \).
     - In \( \dot{R}_s \), we find that \( \langle D + C, v \rangle_y \) has \( \{G\}C' \) as its ancestor advertisement.
     - \( \lambda_c = T \) where \( T \) is the first transaction of \( \text{BD}(D, D, T', o, v, \text{Part}_G, 0) \) where \( (T', o) = \text{txout}'(y) \).
     - The compiler parameters are obtained as for Item 3.
     - \( \text{txout} \) extends \( \text{txout}' \) mapping \( x \) to \( (T, 0) \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).

10. **Join:**
    - \( \alpha = \text{join}(x, y) \), where:
      - In \( \dot{R}_s \) the action \( \alpha \) spends \( \langle A, v \rangle_x \) and \( \langle A, v' \rangle_{x'} \) to obtain \( \langle A, v + v' \rangle_y \).
      - \( \lambda_c = T \) is a transaction having as inputs \( \text{txout}'(x) \) and \( \text{txout}'(x') \), and having one output of value \( v + v' \) redeemable with \( \hat{K}_A(r_A) \).
      - \( \text{txout} \) extends \( \text{txout}' \) mapping \( y \) to \( (T, 0) \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).

11. **Divide:**
    - \( \alpha = \text{divide}(x, v, v') \). Similar to Item 10.

12. **Transfer:**
    - \( \alpha = A : x, B \). Similar to Item 10.

13. **Donate:**
    - \( \alpha = \text{donate}(x, B) \). Similar to Item 11.

14. **Multi-Input Transfer:**
    - \( \alpha = A : \vec{y}, j \), where:
      - \( \vec{y} = y_1 \cdots y_k \).
      - In \( \dot{R}_s \) we find \( \langle B_i, v_i \rangle_{y_i} \) for \( i \in 1..k \), with \( B_j = A \).
      - In \( \dot{R}_c \) we find \( B \to * : T \) for some \( B \), \( T \), where \( T \) has as its inputs \( \text{txout}'(y_i) \) for \( i \in 1..k \), and possibly others not in \( \text{ran txout}' \).
      - \( \lambda_c = B \to * : m \) from some \( B \), \( m \) where \( m \) is a signature of \( T \) with \( \hat{K}_A(r_A) \), corresponding to the \( j \)-th input.
      - \( \lambda_c \) is the first broadcast of \( m \) in \( \dot{R}_c \) after the first broadcast of \( T \).
      - \( \lambda_c \) does not correspond to any of the other cases, i.e., there is no other symbolic action \( \alpha \) for which \( \dot{R}_s \xrightarrow{\alpha} \) would be coherent with \( \dot{R}_c \xrightarrow{\lambda_c} \).
      - \( \text{txout} = \text{txout}' \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).

15. **Destroy:**
    - \( \alpha = \text{destroy}(\vec{x}) \), where:
      - \( \vec{x} = x_1 \cdots x_k \).
      - In \( \dot{R}_s \), \( \alpha \) consumes \( \langle A_i, v_i \rangle_{x_i} \) to obtain \( 0 \).
      - \( \lambda_c = T \) from some \( T \) having as inputs \( \text{txout}'(x_1), \ldots, \text{txout}'(x_k) \), and possibly others not in \( \text{ran txout}' \).
      - \( \lambda_c \) does not correspond to any of the other cases, i.e., there is no other symbolic action \( \alpha \) for which \( \dot{R}_s \xrightarrow{\alpha} \) would be coherent with \( \dot{R}_c \xrightarrow{\lambda_c} \).
      - \( \text{txout} = \text{txout}' \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).

16. **Direct Match:**
    - \( \alpha = \delta = \lambda_c \), and \( \text{txout} = \text{txout}' \), \( \text{sechash} = \text{sechash}' \), and \( \kappa = \kappa' \).

**Inductive Case 2:**
- The predicate \( \text{coher}(R_s, R_c \xrightarrow{\lambda_c}, r, \text{txout}, \text{sechash}, \kappa) \) holds if \( \text{coher}(R_s, R_c, r, \text{txout}, \text{sechash}, \kappa) \), and one of the following cases applies:
  - \( \lambda_c = T \) where no input of \( T \) belongs to \( \text{ran txout} \).
  - \( \lambda_c = A \to O : m \) or \( \lambda_c = O \to A : m \), for some \( A \), \( m \).