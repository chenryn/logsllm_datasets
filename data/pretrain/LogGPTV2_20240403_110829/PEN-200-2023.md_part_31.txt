### JSON Web Token (JWT)
Source: [Wikipedia, 2022](https://en.wikipedia.org/wiki/JSON_Web_Token)

---

### Penetration Testing with Kali Linux
**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.**
Made in Morocco

#### Common Programming Mistakes in Web Applications
Programming errors are common when developing web applications that rely on custom APIs, often due to insufficient testing and a lack of adherence to secure coding best practices.

#### Manual API Assessment Using `curl`
So far, we have used `curl` to manually assess the target’s API to gain a better understanding of the traffic flow. However, this approach does not scale well as the number of APIs increases. Fortunately, we can replicate these steps using Burp Suite.

##### Example: Replicating Admin Login Attempt
1. **Append Proxy Configuration**: Add `--proxy 127.0.0.1:8080` to the `curl` command to route the request through Burp.
2. **Create New Request in Burp Repeater**: In Burp's Repeater tab, create a new empty request and fill it with the same data as before.
3. **Send and Verify Response**: Click the Send button and verify the incoming response in the right pane.

**Figure 108: Crafting a POST request in Burp for API testing**

**Figure 109: Inspecting the API response value**

By recreating the behavior within our proxy, we can store tested APIs in Burp's database for future investigation. After testing multiple APIs, we can navigate to the Target tab and Site Map to view the paths we have tested.

**Figure 110: Using the Site Map to organize API testing**

From the Site Map, we can track discovered APIs and forward any saved requests to the Repeater or Intruder for further testing.

In this Learning Unit, we explored how to debug web applications using the web browser console and network developer tools. We also learned about REST APIs, their role in web applications, and how to perform black-box penetration tests to identify and exploit weaknesses.

### Next Learning Unit: Cross-Site Scripting (XSS)
In the next Learning Unit, we will cover one of the most prevalent and significant vulnerabilities affecting web applications: Cross-Site Scripting (XSS).

#### Learning Objectives:
- Understand different types of XSS vulnerabilities.
- Exploit basic XSS vulnerabilities.
- Perform privilege escalation via XSS.

#### Data Sanitization and XSS
A well-defended web application must sanitize user input to remove or transform dangerous characters or strings. Unsanitized data can allow an attacker to inject and execute malicious code.

**Cross-Site Scripting (XSS)** is a vulnerability that exploits a user's trust in a website by dynamically injecting content into the page rendered by the user's browser. Once considered a low-risk vulnerability, XSS is now recognized as high-risk and widespread, allowing attackers to inject client-side scripts, such as JavaScript, into web pages visited by other users.

##### Types of XSS
XSS vulnerabilities can be categorized into two main classes: stored and reflected.

1. **Stored XSS (Persistent XSS)**
   - Occurs when the exploit payload is stored in a database or cached by a server.
   - The web application retrieves and displays this payload to all visitors.
   - Often found in forum software, comment sections, product reviews, and other areas where user content is stored and reviewed.

2. **Reflected XSS (Non-persistent XSS)**
   - The payload is included in a crafted request or link.
   - The web application places the value into the page content.
   - Only affects the person submitting the request or visiting the link.
   - Commonly found in search fields, results, and error messages.

Both stored and reflected XSS can manifest as client-side (browser) or server-side, and can also be DOM-based.

**DOM-based XSS** occurs within the page's Document Object Model (DOM). Browsers parse HTML content and generate an internal DOM representation. This type of XSS happens when the DOM is modified with user-controlled values, and can be stored or reflected.

**References:**
- [Data Validation (Wikipedia, 2022)](https://en.wikipedia.org/wiki/Data_validation)
- [XSS Attacks (OWASP Foundation, Inc, 2022)](https://owasp.org/www-community/attacks/xss/)
- [Persistent XSS (Wikipedia, 2022)](https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored))
- [Non-persistent XSS (Wikipedia, 2022)](https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected))
- [Server-side vs. DOM-based Vulnerabilities (Wikipedia, 2022)](https://en.wikipedia.org/wiki/Cross-site_scripting#Server-side_versus_DOM-based_vulnerabilities)
- [Introduction to DOM (Mozilla, 2022)](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction)

#### JavaScript Refresher
JavaScript is a high-level programming language essential for modern web applications. Modern browsers include a JavaScript engine that runs code within the browser.

**Example: Simple JavaScript Function**
```javascript
function multiplyValues(x, y) {
    return x * y;
}

let a = multiplyValues(3, 5);
console.log(a);
```

In this example, we define a function `multiplyValues` that takes two integer parameters and returns their product. We then call this function with the arguments `3` and `5`, and log the result to the console.

To test this code, open the developer tools in Firefox on the `about:blank` page and use the Console to execute the function.

**Figure 111: Testing the JavaScript Function in the Browser Console**

#### Identifying XSS Vulnerabilities
To find potential XSS entry points, examine web applications for input fields that accept unsanitized input and display it as output. Common special characters used for this purpose include:

- `"`
- `'`
- `{`
- `}`
- `;`

These characters are used in HTML and JavaScript to denote elements, strings, and statements. If the application does not remove or encode these characters, it may be vulnerable to XSS.

**References:**
- [HTML Element (Wikipedia, 2022)](https://en.wikipedia.org/wiki/HTML_element)
- [Character Encodings in HTML (Wikipedia, 2022)](https://en.wikipedia.org/wiki/Character_encodings_in_HTML#HTML_character_references)
- [Percent-encoding (Wikipedia, 2022)](https://en.wikipedia.org/wiki/Percent-encoding)
- [Script Element (Mozilla, 2022)](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script)

#### Basic XSS Demonstration
Let's demonstrate a basic XSS attack against the OffSec WordPress instance. The WordPress installation uses a plugin named "Visitors" that is vulnerable to stored XSS. The plugin logs visitor data, including IP, source, and User-Agent fields.

**Inspecting the Plugin Code**
The `database.php` file shows how data is stored in the WordPress database:

```php
function VST_save_record() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'VST_registros';
    VST_create_table_records();
    return $wpdb->insert(
        $table_name,
        array(
            'patch' => $_SERVER["REQUEST_URI"],
            'datetime' => current_time('mysql'),
            'useragent' => $_SERVER['HTTP_USER_AGENT'],
            'ip' => $_SERVER['HTTP_X_FORWARDED_FOR']
        )
    );
}
```

**Displaying Visitor Data**
The `start.php` file retrieves and displays the useragent record without sanitization:

```php
$i = count(VST_get_records($date_start, $date_finish));
foreach (VST_get_records($date_start, $date_finish) as $record) {
    echo '
    '.$i.'
    '.date_format(date_create($record->datetime), get_option("links_updated_date_format")).'
    '.$record->patch.' 
    '.$record->ip.'
    '.$record->useragent.'
    ';
    $i--;
}
```

**Performing the Attack**
1. **Configure Burp as a Proxy**: Disable Intercept and browse to `http://offsecwp/` using Firefox.
2. **Forward Request to Repeater**: Go to Burp Proxy > HTTP History, right-click the request, and select "Send to Repeater."
3. **Inject Payload**: Replace the default User-Agent value with a script tag that includes the `alert()` method, then send the request.

**Figure 112: Forwarding the request to the Repeater**

If the server responds with a 200 OK message, the payload is stored in the database. Log in to the admin console at `http://offsecwp/wp-login.php` using `admin/password` credentials and navigate to the Visitors plugin console at `http://offsecwp/wp-admin/admin.php?page=visitors-app%2Fadmin%2Fstart.php`. A pop-up banner showing the number 42 confirms the successful injection.

**Figure 113: Forwarding the request to the Repeater**

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.**
Made in Morocco