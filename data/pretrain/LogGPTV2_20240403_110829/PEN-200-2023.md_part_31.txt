357 (Wikipedia, 2022), https://en.wikipedia.org/wiki/JSON_Web_Token
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 230
Made in Morocco
Penetration Testing with Kali Linux
These kind of programming mistakes happen to various degrees when building web applications
that rely on custom APIs, often due to lack of testing and secure coding best practices.
So far we have relied on curl to manually assess the target’s API so that we could get a better
sense of the entire traffic flow.
This approach, however, will not properly scale whenever the number of APIs becomes
significant. Luckily, we can recreate all the above steps from within Burp.
As an example, let’s replicate the latest admin login attempt and send it to the proxy by appending
the –proxy 127.0.0.1:8080 to the command . Once done, from Burp’s Repeater tab, we can create
a new empty request and fill it with the same data as we did previously.
y
k
s
o
n
i
z
D
Figure 108: Crafting a POST request in Burp for API testing
Next, we’ll click on the Send button and verify the incoming response on the right pane.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 231
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
Figure 109: Inspecting the API response value
o
Great! We were able to recreate the same behavior within our proxy, which, among other
advantages, enables us to store any tested APIs in its database for later investigation.
n
Once we’ve tested a number of different APIs, we could navigate to the Target tab and then Site
map. We can then retrieve the entire map of the paths we have been testing so far.
i
z
D
Figure 110: Using the Site Map to organize API testing
From Burp’s Site map, we can track the API we discovered and forward any saved request to the
Repeater or Intruder for further testing.
In this Learning Unit, we explored how to debug web applications through the web browser
console and network developer tools. We then learned what REST APIs are, their role in web
applications, and how we can approach a black-box penetration test to find weaknesses and
abuse them.
In the next Learning Unit, we are going to learn about one of the most poplar and widespread
vulnerabilities that affects web applications, Cross-Site Scripting.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 232
Made in Morocco
Penetration Testing with Kali Linux
8.4 Cross-Site Scripting
This Learning Unit covers the following Learning Objectives:
• Understand Cross-Site Scripting vulnerability types
• Exploit basic Cross-Site Scripting
• Perform Privilege Escalation via Cross-Site Scripting
One of the most important features of a well-defended web application is data sanitization,358 a
process in which user input is processed so that all dangerous characters or strings are removed
or transformed. Unsanitized data allows an attacker to inject, and potentially execute, malicious
code.
Cross-Site Scripting (XSS)359 is a vulnerability that exploits a uyser’s trust in a website by
dynamically injecting content into the page rendered by the user’s browser.
Once thought to be a relatively low-risk vulnerability, XSS todkay is both high-risk and prevalent,
allowing attackers to inject client-side scripts, such as JavaScript, into web pages visited by other
users. s
8.4.1 Stored vs Reflected XSS Theory
o
XSS vulnerabilities can be grouped into two major classes: stored360 or reflected.361
n
Stored XSS attacks, also known as Persistent XSS, occur when the exploit payload is stored in a
database or otherwise cached by a server. The web application then retrieves this payload and
displays it to anyone who visits a vuilnerable page. A single Stored XSS vulnerability can therefore
attack all site users. Stored XSzS vulnerabilities often exist in forum software, especially in
comment sections, in product reviews, or wherever user content can be stored and reviewed
later.
D
Reflected XSS attacks usually include the payload in a crafted request or link. The web application
takes this value and places it into the page content. This XSS variant only attacks the person
submitting the request or visiting the link. Reflected XSS vulnerabilities can often occur in search
fields and results, as well as anywhere user input is included in error messages.
Either of these two vulnerability variants can manifest as client- (browser) or server-side; they can
also be DOM-based.
DOM-based XSS362 takes place solely within the page’s Document Object Model (DOM).363 While
we won’t cover too much detail for now, we should know that browsers parse a page’s HTML
content and then generate an internal DOM representation. This type of XSS occurs when a
page’s DOM is modified with user-controlled values. DOM-based XSS can be stored or reflected;
358 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Data_validation
359 (OWASP Foundation, Inc, 2022), https://owasp.org/www-community/attacks/xss/
360 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)
361 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected)
362 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Cross-site_scripting#Server-side_versus_DOM-based_vulnerabilities
363 (Mozilla, 2022), https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 233
Made in Morocco
Penetration Testing with Kali Linux
the key is that DOM-based XSS attacks occur when a browser parses the page’s content and
inserted JavaScript is executed.
No matter how the XSS payload is delivered and executed, the injected scripts run under the
context of the user visiting the affected page. This means that the user’s browser, not the web
application, executes the XSS payload. These attacks can be nevertheless significant, with
impacts including session hijacking, forced redirection to malicious pages, execution of local
applications as that user, or even trojanized web applications. In the following sections, we will
explore some of these attacks.
8.4.2 JavaScript Refresher
JavaScript is a high-level programming language that has become one of the main components
of modern web applications. All modern browsers include a JavaScript engine that runs
JavaScript code from within the browser itself. y
When a browser processes a server’s HTTP response containing HTML, the browser creates a
k
DOM tree and renders it. The DOM is comprised of all forms, inputs, images, etc. related to the
web page.
s
JavaScript’s role is to access and modify the page’s DOM, resulting in a more interactive user
experience. From an attacker’s perspective, this also means that if we can inject JavaScript code
o
into the application, we can access and modify the page’s DOM. With access to the DOM, we can
redirect login forms, extract passwords, and steal session cookies.
n
Like many other programming languages, JavaScript can combine a set of instructions into a
function.364
i
function multiplyValues(x,y) {z
return x * y;
}
D
let a = multiplyValues(3, 5)
console.log(a)
Listing 119 - Simple JavaScript Function
In Listing 119, we declared a function named multiplyValues on lines 1-3 that accepts two integer
values as parameters and returns their product.
On line 5, we invoke multiplyValues by passing two integer values, 3 and 5, as parameters, and
assigning the variable a to the value returned by the function.
When declaring the a variable, we don’t assign just any type to the variable, since JavaScript is a
loosely typed language.365 This means that the actual type of the a variable is inferred as a
Number type based on the type of the invoked function arguments, which are Number types. As a
last step, on line 6 we print the value of a to the console.
We can verify the above code by opening the developer tools in Firefox on the about:blank page to
avoid clutter originated by any extra loaded library.
364 (Mozilla, 2022), https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions
365 (Mozilla, 2022), https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 234
Made in Morocco
Penetration Testing with Kali Linux
C B k
Once the blank page is loaded, we’ll click on the Web Console from the Web Developer sub-menu
in the Firefox Menu or use the shortcut + + .
y
k
s
o
Figure 111: Testing the JavaScript Function in the Browser Console
n
From within the Console, we can execute our test function and retrieve the output.
Printing values to the browser’s console is another technique we can add to our debugging toolkit
i
that will be extremely useful when analyzing more complex JavaScript code.
z
8.4.3 Identifying XSS Vulnerabilities
D
We can find potential entry points for XSS by examining a web application and identifying input
fields (such as search fields) that accept unsanitized input, which is then displayed as output in
subsequent pages.
Once we identify an entry point, we can input special characters and observe the output to
determine if any of the special characters return unfiltered.
The most common special characters used for this purpose include:
 ' " { } ;
Listing 120 - Special characters for HTML and JavaScript
Let’s describe the purpose of these special characters. HTML uses “” to denote
elements,366 the various components that make up an HTML document. JavaScript uses “{” and
“}” in function declarations. Single (’) and double (") quotes are used to denote strings, and
semicolons (;) are used to mark the end of a statement.
If the application does not remove or encode these characters, it may be vulnerable to XSS
because the app interprets the characters as code, which in turn, enables additional code.
366 (Wikipedia, 2022), https://en.wikipedia.org/wiki/HTML_element
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 235
Made in Morocco
Penetration Testing with Kali Linux
While there are multiple types of encoding, the most common we’ll encounter in web applications
are HTML encoding367 and URL encoding.368 URL encoding, sometimes referred to as percent
encoding, is used to convert non-ASCII and reserved characters in URLs, such as converting a
space to “%20”.
HTML encoding (or character references) can be used to display characters that normally have
special meanings, like tag elements. For example, “” as part of the payload. If our input is being added
k
within an existing JavaScript tag, we might only need quotes and semicolons to add our own
code.
s
8.4.4 Basic XSS
o
Let’s demonstrate basic XSS with a simple attack against the OffSec WordPress instance. The
WordPress installation is running a plugin named Visitors that is vulnerable to stored XSS.370 The
plugin’s main feature is to log the website’ns visitor data, including the IP, source, and User-Agent
fields.
The source code for the plugin cian be downloaded from its website.371 If we inspect the
database.php file, we can verify hozw the data is stored inside the WordPress database:
function VST_save_record() {
D
global $wpdb;
$table_name = $wpdb->prefix . 'VST_registros';
VST_create_table_records();
return $wpdb->insert(
$table_name,
array(
'patch' => $_SERVER["REQUEST_URI"],
'datetime' => current_time( 'mysql' ),
'useragent' => $_SERVER['HTTP_USER_AGENT'],
'ip' => $_SERVER['HTTP_X_FORWARDED_FOR']
)
);
}
367 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Character_encodings_in_HTML#HTML_character_references
368 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Percent-encoding
369 (Mozilla, 2022), https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
370 (OffSec Services Limited. 2022), https://www.exploit-db.com/exploits/49972
371 (Mozilla, 2022), https://downloads.wordpress.org/plugin/visitors-app.0.3.zip
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 236
Made in Morocco
Penetration Testing with Kali Linux
Listing 121 - Inspecting Visitor Plugin Record Creation Function
This PHP function is responsible for parsing various HTTP request headers, including the User-
Agent, which is saved in the useragent record value.
Next, each time a WordPress administrator loads the Visitor plugin, the function will execute the
following portion of code from start.php:
$i=count(VST_get_records($date_start, $date_finish));
foreach(VST_get_records($date_start, $date_finish) as $record) {
echo '
'.$i.'
'.date_format(date_create($record->datetime),
get_option("links_updated_date_format")).'
'.$record->patch.' y
ip.'#ipresult">'.$record->ip.'
'.$record->useragent.' k
';
$i--;
s
}
Listing 122 - Inspecting Visitors Plugin Record Visualization Function
o
From the above code, we’ll notice that the useragent record value is retrieved from the database
and inserted plainly in the Table Data (td) HTML tag, without any sort of data sanitization.
n
As the User-Agent header is under user control, we could craft an XSS attack by inserting a script
tag invoking the alert() method to generate a pop-up message. Given the immediate visual
i
impact, this method is very commonly used to verify that an application is vulnerable to XSS.
z
Although we just pDerformed a white-box testing approach, we could have
discovered the same vulnerability by testing the plugin through black-box HTTP
header fuzzing.
With Burp configured as a proxy and Intercept disabled, we can start our attack by first browsing
to http://offsecwp/ using Firefox.
We’ll then go to Burp Proxy > HTTP History, right-click on the request, and select Send to Repeater.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 237
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
z
D
Figure 112: Forwarding the request to the Repeater
Moving to the Repeater tab, we can replace the default User-Agent value with the a script tag that
includes the alert method (), then send the request.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 238
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
Figure 113: Forwarding the request to the Repeater
o
If the server responds with a 200 OK message, we should be confident that our payload is now
stored in the WordPress database.
n
To verify this, let’s log in to the admin console at http://offsecwp/wp-login.php using the
admin/password credentials.
i
z
If we navigate to the Visitors plugin console at http://offsecwp/wp-
admin/admin.php?page=visitors-app%2Fadmin%2Fstart.php, we are greeted with a pop-up
banner showing the numbeDr 42, proving that our code injection worked.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 239
Made in Morocco