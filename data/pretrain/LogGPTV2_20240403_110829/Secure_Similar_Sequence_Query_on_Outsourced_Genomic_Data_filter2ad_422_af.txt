### 5.2 SSQ-II (with the Approximate Edit Distance)

The SEED protocol, as described earlier, is an iterative process, which can be challenging to optimize for performance. In SSQ-II, we leverage the approximate edit distance computation [3] (described in Section 2.1) to improve the performance of SSQ-I. For brevity, we will only present the changes made.

#### 5.2.1 Stage 1: Genomic Data Outsourcing

We assume there are \( \omega \) data owners, denoted as \( DO_1, \ldots, DO_\omega \). For \( DO_1 \), given a set of genomic sequences \( D_1 = (S_1, \ldots, S_{m_1}) \), the following steps are performed:

1. **Sequence Partitioning**: Use the `BreakToBlocks` algorithm to break each sequence into \( t \) blocks. For the set \( D_1 \), \( DO_1 \) sets the sequence \( S_i = (S_{i,1}, \ldots, S_{i,t}) = \text{BreakToBlocks}(S_i) \) for all \( i = 1, \ldots, m_1 \).
   - Note: The `BreakToBlocks` algorithm is a partitioning method for genomic data over plaintext. For more details, refer to [3].

2. **Distance Set Construction**: Compute the exact edit distance between \( u_{l,j} \) and \( S_{i,l} \). Construct a distance set \( L_1 \) where the element \( L_1[l, j, i] = \text{ED}(u_{l,j}, S_{i,l}) \) for \( 1 \leq l \leq t \), \( 1 \leq j \leq v_1 \), and \( 1 \leq i \leq m \).

3. **Data Sharing**: Partition all elements in \( D_1, T_1, \) and \( L_1 \) using the genomic sequence secret sharing method shown in Section 5.1.1, and then upload them to the servers.

4. **Repetition by Other Data Owners**: \( DO_2, \ldots, DO_w \) follow the same steps as \( DO_1 \). We assume all sequences have the same length, and the number of partitions for all sequences is \( t \).

After all data owners outsource their data, servers A and B aggregate these data to maintain a genomic database \( D \) jointly as follows:
\[ D = ((\langle D_1 \rangle, \ldots, \langle D_w \rangle)) = ((\langle S_1 \rangle, \ldots, \langle S_m \rangle)), \]
\[ T = ((\langle T_1 \rangle, \ldots, \langle T_w \rangle)), \]
\[ L = ((\langle L_1 \rangle, \ldots, \langle L_w \rangle)). \]
where \( m = \sum_{i=1}^{\omega} m_i \).

#### 5.2.2 Stage 2: Query Request Issuing

1. **Query Sequence Partitioning**: The query user breaks the query sequence \( Q \) into \( t \) blocks to get \( Q = (Q_1, \ldots, Q_t) \) using the `BreakToBlocks` algorithm.
2. **Query Data Sharing**: Partition \( Q \) to obtain \( \langle Q \rangle = (\langle Q_1 \rangle, \ldots, \langle Q_t \rangle) \).
3. **Query Submission**: The user sends \( \langle Q \rangle \) to the servers.

#### 5.2.3 Stage 3: Secure Query Execution

1. **Indicator Bits Computation**: When the servers receive the request from the user, they compute the shares of the indicator bits \( \chi_{l,j} \) using the SAGSC protocol.
2. **Approximate Edit Distance Calculation**: For each sequence \( S_i \in D_1 \), according to Equation 3, servers A and B can compute the approximate edit distance \( \langle d_i \rangle \) between \( Q \) and \( S_i \) (for \( 1 \leq i \leq m_1 \)) as follows:
   \[
   \langle d_i \rangle \approx \sum_{l=1}^{t} \sum_{j=1}^{v_1} \chi_{l,j} \cdot \text{ED}(u_{l,j}, S_{i,l}),
   \]
   where \( \text{ED}(u_{l,j}, S_{i,l}) \) is pre-computed by the data owner and sent to the servers for storage.
3. **Repetition for Other Sequences**: For sequences in \( \{D_2, \ldots, D_w\} \), servers A and B perform the same steps. After this, servers A and B hold \( \langle d_i \rangle \) (for \( 1 \leq i \leq m \)), and the remaining steps are the same as in SSQ-I.

#### 5.2.4 Stage 4: Result Recovery

This stage is the same as in SSQ-I.

### 6 Theoretical Analysis

In this section, we first analyze the security of the sub-protocols and our two SSQ protocols, and then present their computational complexity.

#### 6.1 Security Analysis

The security of the secure query protocols in SSQ-I and SSQ-II is assured by the following theorems:

**Theorem 6.1**: If the SSF, SEED protocols, and ADD-CMP are secure under the semi-honest adversaries model, then the secure query protocol in SSQ-I is secure under the semi-honest adversaries model.

**Theorem 6.2**: If the SSF, SAGSC protocols, and ADD-CMP are secure under the semi-honest adversaries model, then the secure query protocol in SSQ-II is secure under the semi-honest adversaries model.

To prove these theorems, we provide security proofs for our sub-protocols, including SSF, SBC, SMS, SEED, and SAGSC, and then use composition theory [15]. Detailed proofs and discussions can be found in Appendix B.

#### 6.2 Performance Analysis

We analyze the computational complexity of our protocols and show the results in Table 2. The detailed analysis can be found in Appendix C.

| Solutions | SSF/[26] | SBC/[26] | SMS/[26] | SEED | SAGSC | SSQ-I | SSQ-II |
|-----------|----------|----------|----------|------|-------|-------|--------|
| Enc       | 2n/4n    | 8/16     | 2n/3n    | 22n1n2 | -     | -     | -      |
| Dec       | 2n/n     | 8/4      | 2n/n     | 22n1n2 | -     | -     | -      |
| Mul       | n/2n     | 4/8      | n/3n     | 11n1n2 | -     | -     | -      |
| non-XOR gates | -        | 3(cid:2)/3(cid:2) + 3σ + 1 | 3(cid:2)(n − 1)/ (3(cid:2) + 3σ + 1)(n − 1) | 12(cid:2)n1n2 | 2(cid:2) − 1 | O(mn2) | O(mn2) | O(mn2) | O(n) | O(n) | O(n) | O(m(cid:2)(n2 + k)) | O(m(cid:2)(tv + k)) |

### 7 Experimental Evaluation

In this section, we evaluate the performance of our protocols. As there is no full implementation for secure SSQ on outsourced genomic data so far, we conduct two sets of experiments: in the first, we compare our sub-protocols with state-of-the-art protocols, and in the second, we implement our two SSQ schemes based on our sub-protocols and report the performance of SSQ-I and SSQ-II.

#### 7.1 Our Protocols vs. Previous Protocols

We compare our protocols with those in a previous work [26] over a real-world dataset. This work focuses on secure similarity computation for trajectory data and achieves similar functions as part of our protocols with a similar security level. For a fair comparison, we implement the SSF protocol without data packing technology [6]. We also set the public-key security parameter (i.e., the length of N) φ = 2048, and the symmetric security parameter κ = 128 for garbled circuits.

- **SSF Protocol Comparison**: Figure 3(a) shows the time cost in our protocol and the previous protocol [26] increases linearly with the length of sequences \( n \) (from 200 to 1000). The online time in our protocol has significant advantages, as it does not involve any time-consuming cryptographic operations.
- **SBC Protocol Comparison**: Figure 3(b) presents the time cost in the SBC protocol and the previous protocol [26] as the bit length of data \( \lambda \) increases. The time cost grows linearly with \( \lambda \), but the impact is limited. The online time cost is minimal because the SBC protocol mainly calls the SSF protocol and ADD-CMP circuit.
- **SMS Protocol Comparison**: Figure 3(c) shows the time cost in the SMS protocol and the previous protocol [26] increases at a linear speed as the number of data \( n \) increases. The online time is much less than that in the previous work.
- **SEED Protocol Comparison**: Figure 3(d) compares our SEED protocol with the advanced protocol in [9], which uses somewhat homomorphic encryption for exact edit distance computation. Our SEED protocol has about 50% performance improvement. For example, when \( n = 50 \), the online time is 740 seconds in SEED and 1885 seconds in [9].
- **SAGSC Protocol Comparison**: Figure 3(e) shows that the online time is much less than the offline time in the SAGSC protocol. The major operation is the computation of the EQ-ADD circuit, and the increase in sequence length \( n \) has a limited impact on the online time.

#### 7.2 The Performance of SSQ-I and SSQ-II

In our two schemes, the query execution stage includes edit distance computation and top-k result retrieval. We use the SEED protocol to compute the exact edit distance in SSQ-I. In SSQ-II, an approximate edit distance computation method is employed for efficiency. We customize genomic sequences of different lengths \( n \) (from 10 to 50) based on real-world data as a test dataset and set the block number \( t \) from 2 to 10 in SSQ-II. Table 3 reports the single edit distance computation time for both schemes. We only show the online time in this subsection.

| \( n \) | SSQ-I | SSQ-II |
|---------|-------|--------|
| 10      | 29.6s | 1.2s   |
| ...     | ...   | ...    |
| 50      | 740.3s | ...   |

Clearly, if the length of genomic sequences is large, SEED used by SSQ-I generates a significant amount of computing overhead (e.g., 740.3s when \( n = 50 \)).

Next, we evaluate the performance of SSQ-II in the online phase. We assume there are 500 genomic sequences with a length of 500, which are outsourced by two data owners, and the data size of each sequence is managed accordingly.