Competing Traﬃc
A common assumption made about cellular channels
is that since the cellular scheduler maintains separate
queues for each user, competing traﬃc ﬂows may not
aﬀect each other. We perform a simple experiment to
show that two competing ﬂows especially close to link
saturation can aﬀect each other despite queue isolation,
1Etisalat and Du are two cellular providers in the
United Arab Emirates (UAE) and they provide LTE
coverage in most parts of the major cities.
85.0585.1085.1585.2085.2585.30Time(s)3035404550Delay(ms)511resentative trace from our campus parking lot on a 3G
stationary downlink. We observe that even at 100 ms
windows there are dramatic ﬂuctuations in throughput
due to burst scheduling. This variability is persistent
and more evident at smaller timescales; if we zoom in to
individual packet arrivals we observe the unpredictable
variability previously illustrated in Figure 1 and Fig-
ure 2. To demonstrate that the channel is non-trivial
to predict, we experimented with simple predictors to
compare the predicted data with actual transmissions
on 3G and LTE downlink. We found that linear predic-
tors and k-step ahead predictors fail to track the high
variations of the channel. While one could experiment
with a variety of other predictors, the main result is that
standard prediction mechanisms are far from capturing
the bursty behavior of the channel despite the use of
very recent samples.
(a) 100 ms windows
(b) 20 ms windows
Figure 4: Data received on a 3G stationary downlink at
100 ms and 20 ms window sizes
4. THE VERUS PROTOCOL
Verus is an end-to-end congestion control protocol
designed for highly variable cellular channels that was
heavily inspired by our channel observations. Since
cellular channels are highly unpredictable, instead of
attempting to predict the cellular channel dynamics,
Verus uses delay variations to learn a delay proﬁle that
reﬂects the relationship between the network delay and
the amount of data that can be sent without causing
network congestion. Because contention and compet-
ing traﬃc impact performance, Verus takes into account
delay feedback from the network to give an indication
of contention and uses delay cues to constantly remain
(a) Burst size
(b) Burst inter-arrival time
Figure 2: Probability distributions 3G/LTE downlink
especially since these ﬂows still compete for the same ra-
dio resources. We consider two users competing at the
same cellular base station such that when both users
are active, their combined data rates are almost equal
to the 3G channel capacity. The ﬁrst user is constantly
receiving at a ﬁxed rate (1, 5, 10 Mbps) while the sec-
ond user is set to operate in ON/OFF periods of one
minute intervals receiving at 10 Mbps. Figure 3 shows
the packet delays for the ﬁrst user when the second user
is ON/OFF. We observe that during the non-competing
periods the average delay is low, but when the second
user is ON the average packet delay for the second user
increases, especially when the combined data rate ap-
proaches the channel capacity.
Figure 3: Impact of competing traﬃc on packet delay
over a 3G downlink for User 1 when User 2 is ON/OFF
Channel Unpredictability
To demonstrate that cellular channels are non-trivial to
predict, we used simple predictors to compare the mea-
sured data with the predicted data on a 3G downlink
with one user receiving at 10 Mbps. Figure 4 is one rep-
103104105106Size(bytes)10−510−410−310−210−1100PDFDu3GEtisalat3GDuLTEEtisalatLTE100101102103Time(ms)10−510−410−310−210−1100PDFDu3GEtisalat3GDuLTEEtisalatLTEUser11MbpsUser15MbpsUser110Mbps050100150200250Averagedelay(ms)User2isOFFUser2isON(10Mbps)2.02.22.42.62.83.0Time(min)050100150200250Throughput(kbps)2.02.22.42.62.83.0Time(min)01020304050607080Throughput(kbps)512in exploration mode rather than assume that delays are
self-inﬂicted. Finally, because channel ﬂuctuations oc-
cur at diﬀerent time-scales, Verus uses small ε steps to
track fast changes and delay proﬁle updates to track
slower changes.
Verus borrows a number of features from legacy TCP
variants, such as slow start and multiplicative decrease,
but changes the way it maintains the sending window.
Legacy TCP uses additive increase and increases the
congestion window (CWMD) size by 1/CWND, i.e. in-
creasing the congestion window by one packet when it
successfully received a full window. This process can be
slow. In contrast, Verus increases/decreases the sending
window at each ε ms epoch and adapts to the chang-
ing cellular channel by rapidly increasing the sending
window when the channel conditions allows for more
packets. Similarly, Verus seeks to reduce the sending
window even before packet losses whereas TCP can only
decrease the congestion window through an aggressive
multiplicative decrease after a loss.
The main goal of Verus is to avoid congestion by
maintaining an appropriate (sliding) sending window
W over a period equal to the estimated network Round
Trip Time (RTT). Verus does this by replacing the ad-
ditive increase with a series of small ε steps to adapt
quickly to channel ﬂuctuations. Within a sending win-
dow, Verus estimates how many packets need to be sent
to avoid congestion or packet loss over a smaller ε ms
epoch. At each epoch (in the absence of losses) Verus
either:
increments or decrements W using the delay
proﬁle as follows:
W (t + 1) = f (d(t) + δ(t))
(1)
where, W (t + 1) is the next sending window, f is the
delay proﬁle function with d(t) being the network delay,
and δ(t) is a delay increment or decrement value.
elements:
Verus builds a delay proﬁle using the following four
• Delay Estimator: estimates the network RTT
using delay measurements reported from the re-
ceiver’s acknowledgments
• Delay Proﬁler: tracks the relationship between
delay and sending window that does not cause net-
work congestion
• Window Estimator: estimates the sending win-
• Loss Handler: handles losses and adjusts the
dow using the estimated delay and delay proﬁle
sending window
Delay Estimator
The Delay Estimator is responsible for processing the
receiver’s acknowledgments and estimating the network
delay (estimated network RTT). It calculates the packet
round trip delay Dp,i for each packet by subtracting the
current time (i.e. ACK received time) from the packet
sent time; where p represents the packet number and i
represents the Verus epoch number.
The Delay Estimator keeps track of all received packet
delays within a Verus epoch and stores them in a vec-
tor (cid:126)Di. This vector contains all received delay values
Dp,i during that epoch. In order to track the (short-
term) channel history and to avoid abrupt changes, the
maximum delay Dmax,i received within that epoch is
weighted by an Exponential Weighted Moving Average
(EWMA) and calculated as:
Dmax,i = α · Dmax,i−1 + (1 − α) · max( (cid:126)Di)
with 0  R
elif ∆Di > 0
Dest,i + δ2
otherwise
(4)
where Dmin is the minimum delay experienced by Verus,
δ1 and δ2 are increment/decrement parameters, and R is
the maximum tolerable ratio between Dmax and Dmin.2
Verus then uses the delay estimate Dest,i+1 to ﬁnd the
corresponding sending window Wi+1 on the delay pro-
ﬁle (see Figure 5).
At the beginning of epoch i + 1, Verus calculates the
number of packets to send during this epoch. The num-
ber of packets to be sent within the next sending window
Wi+1 are calculated as follows:
Si+1 = max[0, (Wi+1 + 2−n
with n =(cid:6) RT T
ε
n−1 · Wi)]
(cid:7)
(5)
where Si+1 is the number of packets to send during the
epoch, Wi+1 is the estimated sending window for the
future, Wi is the current sending window at the end
of epoch i (i.e. the sending window at the time before
making the next epoch decision), and n is the number
of epochs per estimated network RTT.
Loss Handler
If Verus detects a packet loss or timeout, the sending
window is reduced and the new Wi+1 is multiplied by a
multiplicative reduction factor as:
Wi+1 = M · Wloss
(6)
2R is used to tune the protocol trade-oﬀ between delay
and throughput. We show in the evaluation section the
eﬀect of the value of R.
epoch i+1Last epoch’s standing window Wi Estimate Wi+1 from delay profileƐ ms epochSi+1514Verus’ slow start phase has two exit conditions:
• encountering a packet loss: this can be deduced
from acknowledgement sequence numbers
• the RTT delay exceeds the predeﬁned threshold:
this threshold is set as N x minimum delay (e.g.,
N=15)
During the course of operation, the delay proﬁle needs
to be updated and maintained over time to capture
channel changes. The delay proﬁle is updated as follows:
for every received acknowledgement at the sender, the
delay value of the point that corresponds to the send-
ing window of the acknowledged packet is updated with
the new RTT delay. This update is performed using an
Exponentially Weighted Moving Averaging (EWMA)
function to allow the delay proﬁle to evolve. Due to
the high computational eﬀort of the cubic spline inter-
polation, this calculation is not performed after every
acknowledgement, but instead at certain intervals. In
Section 5.3 we discuss reasonable update intervals in
more detail.
Figure 7b illustrates how the delay proﬁle may evolve
over time. For clarity, only every ﬁfth interpolation is
shown and we restricted the channel trace to 200 s. The
three curves of each color correspond to the same col-
ored region shown in the throughput graph in Figure 7a.
It can be observed that the delay proﬁle curve changes
over time with respect to the ﬂuctuations of the chan-
nel, i.e.
the smaller the available throughput is, the
steeper the delay proﬁle becomes.
(a) Channel trace for downlink
(b) Verus delay proﬁle evolution (excluding slow start)