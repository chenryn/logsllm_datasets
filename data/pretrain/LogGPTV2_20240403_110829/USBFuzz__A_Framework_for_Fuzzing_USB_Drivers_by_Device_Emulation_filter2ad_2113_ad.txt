attach/detach operations (added together) and the time used
in tests respectively. From Figure 7, the time used in these
attach/detach operations remains stable at about 0.22 second,
while the time used by tests varies from test to test, ranging
from 0.2 to more than 10 seconds.
Manual investigation on the test cases shows that the time
a test takes depends on the quality of input. If the input fails
the ﬁrst check on the sanity of the device descriptor, it ﬁn-
ishes very quickly. If the emulated device passes initial sanity
checks and is bound to a driver, the execution time of a test
depends on the driver implementation. Typically longer tests
trigger more complex code paths in device drivers. Figure 6
depicts the runtime distribution of tests generated by US-
BFuzz. It shows that about 11% of the generated tests last
longer than 2 seconds.
We also evaluated the overhead caused by the user mode
agent component. We measured the time used to run tests on
a base system with the user mode agent running and that with-
out user mode agent, a comparison shows that the difference
is roughly 0.01 second, which is negligible compared to the
overall test execution time.
Though the overhead of attach/detach operations is neg-
ligible for long tests, it accounts for about 50% of the total
execution time of short tests. As the emulated device is allo-
USENIX Association
29th USENIX Security Symposium    2569
Time (hour)exec/sec0123010203040Time (hour)exec/sec012301020304002468101214Test Time (second)0%20%40%60%80%100%Percentage(2.0, 88.5%)Figure 7: Execution Time Breakdown of 100 randomly chosen tests. The axes denote test number and execution time. Blue and
red bars represent time used in attaching/detaching the emulated device to the VM and the time spent in testing respectively.
cated/deallocated before/after the test in each iteration, this
overhead can be reduced by caching the emulated device and
performing only necessary initialization operations. We leave
this optimization as future work.
6.4 USBFuzz Flexibility
To demonstrate the beneﬁt of portability and ﬂexibility of
the USBFuzz framework, we performed two extended eval-
uations: (i) fuzzing FreeBSD, MacOS, and Windows; (ii)
focused fuzzing a USB webcam driver.
Fuzzing FreeBSD, MacOS, and Windows. Leveraging
the portability of a device emulation-based solution to feed
fuzzer-generated inputs to device drivers, we extended our
evaluation to FreeBSD 12 (the latest release), MacOS 10.15
Catalina (the latest release) and Windows (both version 8 and
10, with most recent security updates installed). After porting
the user mode agent and the device driver of the communica-
tion device we apply dumb fuzzing on these OSes.
Fuzzing drivers on these OSes is more challenging than the
Linux kernel due to the lack of support infrastructure. These
OSes support neither KASAN, other sanitizers, nor coverage-
based collection of executions. The lack of a memory-based
sanitizer means our fuzzer only discovers bugs that trigger
exceptions, and misses all bugs that silently corrupt memory.
Because we cannot collect coverage information, our fuzzer
cannot detect seeds that trigger new inputs.
To alleviate the second concern, the lack of coverage-
guided optimization, we experiment with cross-pollination.
To seed our dumb fuzzer, we reuse the inputs generated during
our Linux kernel fuzzing campaign.
USBFuzz found three bugs (two resulting unplanned restart
and one resulting system freeze) on MacOS, and four bugs
on Windows (resulting in a Blue Screen of Death, conﬁrmed
on both Window 8 and Windows 10) during the ﬁrst day
of evaluation. Additionally, one bug was found in a USB
Bluetooth dongle driver on FreeBSD in two weeks. In this bug,
the driver is trying to add an object to a ﬁnalized container.
Focused fuzzing on the LifeCam VX-800 driver. So far,
we let the fuzzer create emulated USB peripherals as part
of the input generation process. Here we want to show the
capability of USBFuzz of fuzzing focusing on a speciﬁc de-
vice. We extract the device and conﬁguration descriptor from
a real LifeCam VX-800 [34] webcam (with the lsusb [11]
utility) and let USBFuzz create a fake USB device based on
that information, enabling the Linux kernel to detect and bind
a video driver to it.
We extended the user mode agent to receive a picture
from the webcam with streamer [63]2 using the emulated
device. After fuzzing this targeted device for a few days
with randomly generated inputs, we found another bug in
the XHCI [68] driver of the Linux kernel. The buggy input
triggers an inﬁnite loop in the driver, in which the driver code
keeps allocating memory in each iteration until the system
runs out of memory.
USBFuzz Flexibility. The bugs found in the FreeBSD,
MacOS and Windows, and XHCI driver demonstrate the ad-
vantage of USBFuzz compared to syzkaller’s usb-fuzzer. As
the implementation of usb-fuzzer only depends on the Linux
kernel, it cannot be ported other OSes without a full reimple-
mentation. Moreover, as usb-fuzzer injects fuzzer-generated
inputs via a software host controller (dummy HCD [51]), it is
unable to trigger bugs in drivers of physical host controllers.
6.5 Case Study
In this section, we discuss a new bug USBFuzz discovered in
the USB core framework of the Linux kernel. In the USB
standard, to enable extensions, a device is allowed to de-
ﬁne other customized descriptors in addition to the stan-
dard descriptors. As the length of each descriptor varies, the
USB standard deﬁnes the ﬁrst two bytes of a descriptor to
represent the length and type of a descriptor (as shown by
usb_descriptor_header in Listing 3). All descriptors must
follow the same format. For example, an OTG (USB On-The-
2We execute the streamer -f jpeg -o output.jpeg command.
2570    29th USENIX Security Symposium
USENIX Association
024681012123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100Time (sec)Test NumberAttach/Detach TimeTest TimeGo, a recent extension which allows a USB device to act as a
host [69]) descriptor (shown as usb_otg_desciptor in List-
ing 3 ) has three bytes and thus a correct OTG descriptor must
start with a 0x03 byte.
Descriptors are read from the device, and therefore, can-
not be trusted and must be sanitized. In the Linux kernel,
__usb_get_extra_descriptor is one of the functions used
by the USB core driver to parse the customized descriptors.
Listing 3 shows that the code simply scans the data (buffer
argument) read from the device side. To match descriptors for
a given type (type argument) it returns the ﬁrst match.
When handling maliciously crafted descriptors, this im-
plementation is vulnerable. By providing a descriptor that
is shorter than its actual length, the attacker can trigger an
out-of-bounds memory access. E.g., a two byte (invalid) OTG
descriptor with the third byte missing will be accepted by
__usb_get_extra_descriptor and treated as valid. If the
missing ﬁeld is accessed (e.g., the read of bmAttributes at
line 30), an out-of-bounds memory access occurs.
Depending on how the missing ﬁelds are accessed, this
vulnerability may be exploited in different ways. For exam-
ple, reading the missing ﬁelds may allow information leak-
age. Similarly, writing to the missing ﬁelds corrupts memory,
enabling more involved exploits (e.g., denial-of-service or
code execution). Although our fuzzer only triggered an out-
of-bounds read, an out-of-bounds write may also be possible.
6.6 Fuzzing other peripheral interfaces
Peripheral interfaces represent a challenging attack surface.
USBFuzz is extensible to other peripheral interfaces sup-
ported by QEMU. To add support for a new peripheral in-
terface in USBFuzz, an analyst needs to: (i) implement a
fuzzing device for the interface and adapt its reading opera-
tions to forward fuzzer generated data to the driver under test;
(ii) adapt the fuzzer to start/stop a test by attaching/detaching
the new fuzzing device to the VM; and (iii) adapt the user
mode agent component to detect the end of tests based on the
kernel log.
The SD card [3] is an interface that is well supported by
QEMU and exposes a similar security threat as USB. SD cards
are common on many commodity PCs and embedded devices.
We extended USBFuzz to implement SD card driver fuzzing.
The implementation required few code changes: 1,000 LoC
to implement the fuzzing device, 10 LoC to adapt the fuzzer,
and 20 LoC to adapt the user-mode agent.
After adapting, we fuzzed the SD card interface for 72
hours. As the SD protocol is much simpler than USB (with
ﬁxed commands and lengths), and there are only a limited
number of drivers, we did not discover any bugs after running
several fuzzing campaigns on Linux and Windows.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
struct usb_descriptor_header {
__u8
__u8
bLength ;
bDescriptorType ;
} __attribute__ (( packed ));
struct usb_otg_descriptor {
__u8
__u8
__u8
bLength ;
bDescriptorType ;
bmAttributes ;
} __attribute__ (( packed ));
int __usb_get_extra_descriptor ( char * buffer ,
unsigned size , char type , void ** ptr ) {
struct usb_descriptor_header * header ;
while ( size >= sizeof ( struct
usb_descriptor_header )) {
header = ( struct usb_descriptor_header *)
buffer ;
if ( header -> bLength  bDescriptorType == type ) {
* ptr = header ;
return 0;
}
buffer += header -> bLength ;
size -= header -> bLength ;
}
return -1;
}
static int usb_enumerate_device_otg ( struct
usb_device * udev ) {
// ......
struct usb_otg_descriptor * desc = NULL ;
err = __usb_get_extra_descriptor ( udev ->
rawdescriptors [0] , le16_to_cpu ( udev -> config
[0]. desc . wTotalLength ) , USB_DT_OTG , ( void
**) & desc );
if ( err ||!( desc->bmAttributes
& USB_OTG_HNP ))
return 0;
// ......
}
Listing 3: Out-of-bounds vulnerability in the Linux USB core
framework. The two byte descriptor (0x02, USB_DT_OTG) is
accepted by __usb_get_extra_descriptor as three byte
usb_otg_descriptor. Triggering an out-of-bounds access
when the missing ﬁeld bmAttributes is accessed at line 30.
7 Related Work
In this section, we discuss related work that aims at secur-
ing/protecting host OS from malicious devices.
Defense Mechanisms. As an alternative to securing kernel
by ﬁnding and ﬁxing bugs, defense mechanisms stop active
exploitation. For example, Cinch [1] protects the kernel by
running the device drivers in an isolated virtualization en-
vironment, sandboxing potentially buggy kernel drivers and
sanitizing the interaction between kernel and driver. SUD [5]
protects the kernel from vulnerable device drivers by isolat-
ing the driver code in userspace processes and conﬁning its
interactions with the device using IOMMU. Rule-based au-
USENIX Association
29th USENIX Security Symposium    2571
Tools
TTWE
vUSBf
umap2
usb-fuzzer
USBFuzz
Cov Data Inj HD Dep





Device
Device
Device
API
Device





Portability





Table 4: A comparison of USBFuzz with related tools. The
“Cov” column shows support for coverage-guided fuzzing.
The “Data Inj” column indicates how data is injected to
drivers: through the device interface (Device) or a modiﬁed
API at a certain software layer (API). The “HD Dep” and
“Portability” columns denote hardware dependency and
portability across different platforms.
thorization policies (e.g., USBGuard [45]) or USB Firewalls
(e.g., LBM [59] and USBFILTER [60]) work by blocking
known malicious data packets from the device side.
Cinch [1] and SUD [5] rely heavily on hardware support
(e.g., virtualization and IOMMU modules). Though their ef-
fectiveness has been demonstrated, they are not used due to
their inherent limitations and complexities. Rule-based autho-
rization policies or USB Firewalls may either restrict access
to only known devices, or drop known malicious packets, thus
they can defend against known attacks but potentially miss
unknown attacks. These mitigations protect the target system
against exploitation but do not address the underlying vulner-
abilities. USBFuzz secures the target systems by discovering
vulnerabilities, allowing developers to ﬁx them.
Testing Device Drivers. We categorize existing device
driver fuzzing work along several dimensions: support for
coverage-guided fuzzing, how to inject fuzzed device data
into tested drivers, and hardware dependency and portability
across platforms. Support of coverage-guided fuzzing inﬂu-
ences the effectiveness of bug ﬁnding, and the approach to
inject device data into target drivers determines the portability.
Hardware dependency incurs additional hardware costs.
Table 4 summarizes related work. Tools such as TTWE [66]
and umap2 [18] depend on physical devices and do not
support coverage-guided fuzzing. While eliminating hard-
ware dependency through an emulated device interface for
data injection, vUSBf [49] does not support coverage-guided
fuzzing. usb-fuzzer [14] (a syzkaller [16] extension) supports
coverage-guided fuzzing, and passes the fuzzer generated
inputs to device drivers through extended system calls. How-
ever, its implementation depends on modiﬁcations to modules
(the gadgetfs [42] and dummy-hcd [51] modules) in the USB
stack of the Linux kernel, and is thus not portable. In contrast,
USBFuzz is portable across different platforms and integrates
coverage feedback (whenever the kernel exports it).
Sylvester Keil et al. proposed a fuzzer for WiFi drivers
based on an emulated device [24]. While they also emulate a
device, their system does not support coverage-guided fuzzing.
They focus on emulating the functions of a single WiFi chip
(the Atheros AR5212 [28]). As the hardware and ﬁrmware
are closed source, they reverse engineered the necessary com-
ponents. USBFuzz, in comparison, does not require reverse
engineering of ﬁrmware and supports all USB drivers in the
kernel. In concurrent work, PeriScope [50] proposes to ap-
ply coverage-guided fuzzing on WiFi drivers by modifying
DMA and MMIO APIs in the kernel. IoTFuzzer [7] targets
memory vulnerabilities in the ﬁrmware of IoT devices. These
tools either have additional dependencies on physical devices,
or cannot leverage coverage feedback to guide their fuzzing.
Additionally, the AVATAR [71] platform enables dynamic
analysis of drivers by orchestrating the execution of an emu-
lator with the real hardware.
Symbolic Execution. The S2E [8] platform adds selective
symbolic execution support to QEMU. Several tools extend
S2E to analyze device drivers by converting the data read from
the device side into symbolic values (e.g, SymDrive [47] and
DDT [30]). Potus [38] similarly uses symbolic execution to
inject faulty data into USB device drivers.
Like our approach, symbolic execution eliminates hardware
dependencies. However, it is limited by high overhead and
scalability due to path explosion and constraint solving cost.
Further, Potus is controlled by operations from userspace,
thus probe routines are out of scope. In contrast, USBFuzz
follows a dynamic approach, avoiding these limitations and
targets both probe routines and function routines.
8 Conclusion
The USB interface represents an attack surface, through which
software vulnerabilities in the host OS can be exploited. Ex-