  注意： new方法修饰符不应该故意用于隐藏基类的成员。这个修饰符的主要
目的是处理版本冲突，在修改派生类后，响应基类的变化。
4.3.4 调用方法的基类版本
C#有一种特殊的语法用于从派生类中调用方法的基类版本：base.
（）。例如，派生类Shape声明了Move（）方法，想要在派生类Rectangle
中调用它，以使用基类的实现代码。为了添加派生类中的功能，可以使用base调用它（代
码文件VirtualMethods / Shape.cs）：
    public class Shape
    {
      public virtual void Move(Position newPosition)
      {
        Position.X = newPosition.X;
        Position.Y = newPosition.Y;
        WriteLine($"moves to {Position}");
      }
      //. . . other members
    }
Move（）方法在Rectangle类中重写，把Rectangle一词添加到控制台。写出文本之
后，使用base关键字调用基类的方法（代码文件VirtualMethods / ConcreteShapes.cs）：
    public class Rectangle: Shape
    {
      public override void Move(Position newPosition)
      {
        Write("Rectangle ");
        base.Move(newPosition);
      }
      //. . . other members
    }
现在，矩形移动到一个新位置（代码文件VirtualMethods / Program.cs）：
    r.Move(new Position { X = 120, Y = 40 });
运行应用程序，输出是Rectangle和Shape类中Move（）方法的结果：
    Rectangle moves to X: 120, Y: 40
  注意： 使用base关键字，可以调用基类的任何方法——而不仅仅是已重写的
方法。
4.3.5 抽象类和抽象方法
C#允许把类和方法声明为abstract。抽象类不能实例化，而抽象方法不能直接实现，
必须在非抽象的派生类中重写。显然，抽象方法本身也是虚拟的（尽管也不需要提供
virtual关键字，实际上，如果提供了该关键字，就会产生一个语法错误）。如果类包含抽
象方法，则该类也是抽象的，也必须声明为抽象的。
下面把Shape类改为抽象类。因为其他类需要派生自这个类。新方法Resize声明为抽
象，因此它不能有在Shape类中的任何实现代码（代码文件VirtualMethods / Shape.cs）：
    public abstract
 class Shape
    {
      public abstract
 void Resize(int width, int height);  // abstract method
    }
从抽象基类中派生类型时，需要实现所有抽象成员。否则，编译器会报错：
    public class Ellipse : Shape
    {
      public override void Resize(int width, int height)
      {
        Size.Width = width;
        Size.Height = height;
      }
    }
当然，实现代码也可以如下面的例子所示。抛出类型NotImplementationException的异
常也是一种实现方式，在开发过程中，它通常只是一个临时的实现：
    public override void Resize(int width, int height)
    {
      throw new NotImplementedException();
    }
  注意： 异常详见第14章。
使用抽象的Shape类和派生的Ellipse类，可以声明Shape的一个变量。不能实例化它，
但是可以实例化Ellipse，并将其分配给Shape变量（代码文件VirtualMethods 
/
Program.cs）：
    Shape s1 = new Ellipse();
    DrawShape(s1);
4.3.6 密封类和密封方法
如果不应创建派生自某个自定义类的类，该自定义类就应密封。给类添加sealed修饰
符，就不允许创建该类的子类。密封一个方法，表示不能重写该方法。
    sealed
 class FinalClass
    {
      // etc
    }
    class DerivedClass: FinalClass      // wrong. Cannot derive from sealed class
.
    {
      // etc
    }
在把类或方法标记为sealed时，最可能的情形是：如果在库、类或自己编写的其他类
的操作中，类或方法是内部的，则任何尝试重写它的一些功能，都可能导致代码的不稳
定。例如，也许没有测试继承，就对继承的设计决策投资。如果是这样，最好把类标记为
sealed。
密封类有另一个原因。对于密封类，编译器知道不能派生类，因此用于虚拟方法的虚
拟表可以缩短或消除，以提高性能。string类是密封的。没有哪个应用程序不使用字符
串，最好使这种类型保持最佳性能。把类标记为sealed对编译器来说是一个很好的提示。
将一个方法声明为sealed的目的类似于一个类。方法可以是基类的重写方法，但是在
接下来的例子中，编译器知道，另一个类不能扩展这个方法的虚拟表；它在这里终止继
承。
    class MyClass: MyBaseClass
    {
      public sealed
 override void FinalMethod()
      {
        // implementation
      }
    }
    class DerivedClass: MyClass
    {
      public override void FinalMethod()  // wrong. Will give compilation error
      {
      }
    }
要在方法或属性上使用sealed关键字，必须先从基类上把它声明为要重写的方法或属
性。如果基类上不希望有重写的方法或属性，就不要把它声明为virtual。
4.3.7 派生类的构造函数
第3章介绍了单个类的构造函数是如何工作的。这样，就产生了一个有趣的问题，在
开始为层次结构中的类（这个类继承了其他也可能有自定义构造函数的类）定义自己的构
造函数时，会发生什么情况？
假定没有为任何类定义任何显式的构造函数，这样编译器就会为所有的类提供默认的
初始化构造函数，在后台会进行许多操作，但编译器可以很好地解决类的层次结构中的所
有问题，每个类中的每个字段都会初始化为对应的默认值。但在添加了一个我们自己的构
造函数后，就要通过派生类的层次结构高效地控制构造过程，因此必须确保构造过程顺利
进行，不要出现不能按照层次结构进行构造的问题。
为什么派生类会有某些特殊的问题？原因是在创建派生类的实例时，实际上会有多个
构造函数起作用。要实例化的类的构造函数本身不能初始化类，还必须调用基类中的构造
函数。这就是为什么要通过层次结构进行构造的原因。
在之前的Shape类型示例中，使用自动属性初始化器初始化属性：
    public class Shape
    {
      public Position Position { get; } = new Position();
      public Size Size { get; } = new Size();
    }
在幕后，编译器会给类创建一个默认的构造函数，把属性初始化器放在这个构造函数
中：
    public class Shape
    {
      public Shape()
      {
        Position = new Position();
        Size = new Size();
      }
      public Position Position { get; };
      public Size Size { get; };
    }
当然，实例化派生自Shape类的Rectangle类型，Rectangle需要Position和Size，因此在
构造派生对象时，调用基类的构造函数。
如果没有在默认构造函数中初始化成员，编译器会自动把引用类型初始化为null，值
类型初始化为0，布尔类型初始化为false。布尔类型是值类型，false与0是一样的，所以这
个规则也适用于布尔类型。
对于Ellipse类，如果基类定义了默认构造函数，只把所有成员初始化为其默认值，就
没有必要创建默认的构造函数。当然，仍可以提供一个构造函数，使用构造函数初始化
器，调用基构造函数：
    public class Ellipse : Shape
    {
      public Ellipse()
        : base()
      {
      }
    }
构造函数总是按照层次结构的顺序调用：先调用System.Object类的构造函数，再按照
层次结构由上向下进行，直到到达编译器要实例化的类为止。为了实例化Ellipse类型，先
调用Object构造函数，再调用Shape构造函数，最后调用Ellipse构造函数。这些构造函数都
处理它自己类中字段的初始化。
现在，改变Shape类的构造函数。不是对Size和Position属性进行默认的初始化，而是
在构造函数内赋值（代码文件InheritanceWithConstructors/Shape.cs）：
    public abstract class Shape
    {
      public Shape(int width, int height, int x, int y)
      {
        Size = new Size { Width = width, Height = height };
        Position = new Position { X = x, Y = y };
      }
      public Position Position { get; }
      public Size Size { get; }
    }
当删除默认构造函数，重新编译程序时，不能编译Ellipse和Rectangle类，因为编译器
不知道应该把什么值传递给基类唯一的非默认值构造函数。这里需要在派生类中创建一个
构造函数，用构造函数初始化器初始化基类构造函数（代码文件
InheritanceWithConstructors / ConcreteShapes.cs）：
    public Rectangle(int width, int height, int x, int y)
        : base(width, height, x, y)
    {
    }
把初始化代码放在构造函数块内太迟了，因为基类的构造函数在派生类的构造函数之
前调用。这就是为什么在构造函数块之前声明了一个构造函数初始化器。
如果希望允许使用默认的构造函数创建Rectangle对象，仍然可以这样做。如果基类的
构造函数没有默认的构造函数，也可以这样做，只需要在构造函数初始化器中为基类构造
函数指定值，如下所示。在接下来的代码片段中，使用了命名参数，否则很难区分传递的
width、height、x和y值。
    public Rectangle()
        : base(width: 0, height: 0, x: 0, y: 0)
    {
    }
  注意： 命名参数参见第3章。
这个过程非常简洁，设计也很合理。每个构造函数都负责处理相应变量的初始化。在
这个过程中，正确地实例化了类，以备使用。如果在为类编写自己的构造函数时遵循同样
的规则，就会发现，即便是最复杂的类也可以顺利地初始化，并且不会出现任何问题。
4.4 修饰符
前面已经遇到许多所谓的修饰符，即应用于类型或成员的关键字。修饰符可以指定方
法的可见性，如public或private；还可以指定一项的本质，如方法是virtual或abstract。C#
有许多访问修饰符，下面讨论完整的修饰符列表。
4.4.1 访问修饰符
表4-1中的修饰符确定了是否允许其他代码访问某一项。
表4-1
修饰符
应用于
说明
public
所有类型或成员
任何代码均可以访问该项
protected
类型和内嵌类型的所有成员
只有派生的类型能访问该项
internal
所有类型或成员
只能在包含它的程序集中访问该
项
private
类型和内嵌类型的所有成员
只能在它所属的类型中访问该项
protected
internal
类型和内嵌类型的所有成员
只能在包含它的程序集和派生类
型的任何代码中访问该项
  注意： public、protected和private是逻辑访问修饰符。internal是一个物理访问
修饰符，其边界是一个程序集。
注意，类型定义可以是内部或公有的，这取决于是否希望在包含类型的程序集外部访
问它：
    public class MyClass
    {
      // etc.
不能把类型定义为protected、private或protected internal，因为这些修饰符对于包含在
名称空间中的类型没有意义。因此这些修饰符只能应用于成员。但是，可以用这些修饰符
定义嵌套的类型（即，包含在其他类型中的类型），因为在这种情况下，类型也具有成员
的状态。于是，下面的代码是合法的：
    public class OuterClass
    {
      protected class InnerClass
      {
        // etc.
      }
      // etc.
    }
如果有嵌套的类型，则内部的类型总是可以访问外部类型的所有成员。所以，在上面
的代码中，InnerClass中的代码可以访问OuterClass的所有成员，甚至可以访问OuterClass
的私有成员。
4.4.2 其他修饰符
表4-2中的修饰符可以应用于类型的成员，而且有不同的用途。在应用于类型时，其
中的几个修饰符也是有意义的。
表4-2
修饰符
应用于
说明
new
函数成员
成员用相同的签名隐藏继承的成员
static
所有成员
成员不作用于类的具体实例，也称为类成
员，而不是实例成员
virtual
仅函数成员
成员可以由派生类重写
abstract
仅函数成员
虚拟成员定义了成员的签名，但没有提供
实现代码
override
仅函数成员
成员重写了继承的虚拟或抽象成员
sealed
类、方法和属性
对于类，不能继承自密封类。对于属性和
方法，成员重写已继承的虚拟成员，但任
何派生类中的任何成员都不能重写该成
员。该修饰符必须与override一起使用
extern
仅静态[DllImport]方法
成员在外部用另一种语言实现。这个关键
字的用法参见第5章
4.5 接口
如前所述，如果一个类派生自一个接口，声明这个类就会实现某些函数。并不是所有
的面向对象语言都支持接口，所以本节将详细介绍C#接口的实现。下面列出Microsoft预
定义的一个接口System.IDisposable的完整定义。IDisposable包含一个方法Dispose（），该
方法由类实现，用于清理代码：
    public interface IDisposable
    {
      void Dispose();
    }
上面的代码说明，声明接口在语法上与声明抽象类完全相同，但不允许提供接口中任
何成员的实现方式。一般情况下，接口只能包含方法、属性、索引器和事件的声明。
比较接口和抽象类：抽象类可以有实现代码或没有实现代码的抽象成员。然而，接口