somewhat selective witness group, whereas gossip provides
only retroactive protection dependent on active communication
but among a completely open group of participants.
IV. DESIGN VARIATIONS AND TRADEOFFS
While we expect the basic CoSi design described above to
be usable and suitable in many contexts, as the evaluation in
Section VI suggests, many improvements and design variations
are possible embodying different strengths and weaknesses.
We now brieﬂy sketch some of this design space, focusing on
signature veriﬁcation predicates, reducing the size of the cer-
tiﬁcates needed to verify collective signatures, and tolerating
unreliability in the network and/or witnesses.
A. Collective Signature Veriﬁcation Predicates
Because CoSi signatures explicitly document which wit-
nesses did and did not participate in signing, signature ver-
iﬁcation need not be based on a simple threshold, but can in
principle be an arbitrary predicate on subsets of witnesses. For
example, if the authority has reason to trust some witnesses
more than others, then signature veriﬁcation may be weighted
so that some witnesses count more than others toward the
threshold. To save signature space, the authority can treat itself
533533
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:54 UTC from IEEE Xplore.  Restrictions apply. 
as a special “witness,” aggregating its own signature with all
the others, but imposing the rule that its own participation is
mandatory for the collective signature to be accepted.
Witnesses might be divided into multiple groups with hierar-
chical expressions deﬁning their relationships. For example, a
global body of witnesses might be divided into geopolitical
regions (e.g., Five Eyes, Europe, etc.), each with different
witness group sizes and thresholds, such that a threshold
number of regions must in turn meet their respective internal
thresholds. Such a structure could protect the authority and
its users from compromise or denial-of-service even if some
regions contain many more witnesses than others and all
witnesses in any sub-threshold set of regions collude.
Finally, collective signature veriﬁcation might use different
predicates depending on veriﬁcation context. Consider a device
manufacturer desiring protection from possible government
coercion to produce secretly backdoored operating system
updates [48], [57]. The manufacturer may be averse to the
risk, however slight, that a sufﬁcient number of its witnesses
might become unavailable or collude to prevent the manu-
facturer from signing legitimate updates. The manufacturer
could design its devices to mitigate this risk by demanding a
high cosigning threshold (e.g., half) when verifying updates
downloaded automatically or installed while the device is
locked, but allowing updates with few or no cosignatures if the
user manually initiates the update with the device unlocked.
This way, in the hopefully unlikely event the manufacturer
becomes unable to meet the normal cosigning threshold due to
massive witness failure or misbehavior, the manufacturer can
instruct users to install the next update manually, and revise
its witness group as part of that update. More importantly, the
knowledge that the manufacturer has this fallback available
should deter any deliberate misbehavior by witnesses, e.g.,
extortion attempts, which would present only a minor incon-
venience to the manufacturer’s users while likely yielding a
public scandal and lawsuits against the misbehaving witnesses.
B. Reducing Authority Certiﬁcate Size with Key Trees
The basic CoSi design keeps collective signatures compact,
but requires that the authority’s well-known certiﬁcate – which
veriﬁers need to check collective signatures – include not
just the authority’s own public key but also a complete list
of the authority’s witnesses and their public keys. This large
certiﬁcate size is acceptable if it is distributed as part of a much
larger package anyway, e.g., embedded in a web browser’s
built-in root certiﬁcate store. Large certiﬁcates might be a
problem in other contexts, however: e.g., if they must be
embedded in intermediate certiﬁcates, DNSSEC [6] resource
records, or other objects that are frequently transmitted.
In an alternate design yielding different tradeoffs, the au-
thority’s certiﬁcate includes only the authority’s own public
key, the product of all witnesses’ public keys ˆX =
i Xi, and
a hash representing the root of a key tree: a Merkle tree [91]
whose leaf nodes contain the individual witnesses’ public
keys. The key tree hash in the authority’s certiﬁcate represents
(cid:2)
a universally-veriﬁable commitment to all witnesses’ public
keys, without the certiﬁcate actually containing them all.
During subsequent signing rounds, the CoSi leader includes
in each signature a list of the public keys of all missing or
present witnesses, whichever is shorter, along with Merkle
inclusion proofs for each proving their presence in the author-
ity’s key tree. To check a signature containing a list of present
witnesses, the veriﬁer simply multiplies the listed public keys
(after verifying their inclusion proofs). To check a signature
containing a list of missing witnesses, the veriﬁer multiplies
the aggregate ˆX of all witnesses’ public keys with the inverses
of the missing witnesses’ public keys: ˆX(cid:2)
j∈L X−1
= ˆX
In the hopefully common case in which all witnesses are
present during signing,
the signature is at minimum size,
containing only (c, ˆr0) and an empty list of missing witnesses.
As more witnesses go missing, however,
the size of the
signature including witness public keys and inclusion proofs
may grow to O(N ) size, or potentially even O(N log N ) if
each missing witness’s inclusion proof is stored separately
without sharing the storage of internal key tree nodes.
(cid:2)
.
j
C. Gracefully Tolerating Network Unreliability
While we expect authorities adopting CoSi to choose re-
liable witness servers run by reputable organizations, neither
the authority nor its witnesses can control the Internet connec-
tions between them. CoSi allows the authority to rebuild its
communication trees at any time to route around link failures,
but if network churn is too frequent or severe, a tree might
become unusable before it can be used even once.
One attractive solution to this problem is to adopt
the
binomial swap forest technique of San Ferm´ın [30], which is
readily applicable to CoSi. We ﬁrst assign all witnesses b-bit
binary labels. We then implement each of CoSi’s aggregation
rounds – i.e.,
its Commit and Response phases – with a
single run of San Ferm´ın’s dynamic aggregation protocol.
To aggregate commits or responses, each node communicates
with b other nodes in succession, building up its own aggregate
while simultaneously helping other nodes build theirs, such
that every participant ends up obtaining a complete aggregate.
At each swap step i from 0 to b − 1, each witness j
communicates with another witness k whose label differs at
bit i but is identical in all more-signiﬁcant bits. At step 0, each
even-numbered node swaps with its immediate odd-numbered
neighbor. During subsequent steps, however, each witness has
a choice of witnesses to swap with: e.g., in step 1 a node
labeled xx00 may swap with either xx10 or xx11. In these
swaps each witness combines the other witness’s aggregate
value from prior steps into its own aggregate, enabling both
communication partners to double the “coverage” of their
respective aggregates in each step, until every witness has
a complete aggregate. The authority may then pick up this
complete aggregate – i.e., the collective commit or response
in the case of CoSi – from any witness server.
Because each witness can dynamically choose its com-
munication partners in steps i > 0, witnesses can adapt
immediately to intermittent link failures without restarting the
534534
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:54 UTC from IEEE Xplore.  Restrictions apply. 
overall aggregation process, provided the witnesses themselves
do not fail. Tolerating high churn in the witnesses as well as
the network requires other techniques explored below.
D. Avoiding Signing Restarts on Witness Unreachability
A second-order availability risk in the basic CoSi design
is that multiple witnesses might become unavailable during
a single signing round – perhaps even intentionally as part
of a DoS attack by malicious witnesses – thereby forcing the
leader to restart the signing round multiple times in succession
without making progress. To address this risk we may prefer
if the leader could always complete each signing round, and
never have to restart, regardless of the witnesses’ behavior.
If during CoSi’s Commit phase some witness i ﬁnds one
of its immediate children j ∈ Ci unresponsive, i can adjust
its aggregate commit ˆVi to include only its own individual
commit Vi and the aggregate commits of its children who
are reachable, and pass the adjusted ˆVi to i’s parent along
with a list of unreachable witness(es). The signing round can
thus immediately take the missing witnesses into account and
continue without restarting. If a missing witness j is an interior
node in the spanning tree, then its parent i (or the leader) can
attempt to “bridge the gap” by contacting j’s children directly
to collect their portions of the aggregate commitment (and
their corresponding portions of the aggregate response later in
phase 4). Thus, the loss of an interior node in the spanning
tree need not entail the loss of its descendants’ cosignatures.
A more subtle challenge occurs when some witness j
participates in the Commit phase but goes ofﬂine before
the subsequent Response phase. In this case,
the missing
witness’s individual Schnorr commit Vj has been included
in the aggregate commit ˆV0 and used to form the collective
challenge c = H( ˆV0 (cid:3) S) with which all witnesses must
compute their collective responses. Thus, it is now too late
to change c, but without witness j the remaining witnesses
will be unable to produce an aggregate response ˆr0 matching
the aggregate commit ˆV0 that included j’s commit. Further,
breaking the dependency of c on ˆV0 – allowing the latter to
change in the Response phase without recomputing c – would
make the collective signature trivially forgeable.
We can resolve this dilemma by making the collective
challenge c depend not on just a single aggregate commit
ˆV0 of individual commits ˆVi but on all possible aggregate
commits ˆVW representing any subset of the witnesses W that
participated in the Commit phase. During the Commit phase,
these witnesses no longer merely aggregate their individual
Schnorr commits, but also include them in a Merkle tree
summarizing all individual commits. Each interior witness i
obtains from each of its children j ∈ Ci both j’s aggregate
commit ˆVj and the hash Hj representing a partial Merkle tree
summarizing all the individual commits of j’s descendants.
Then i computes its aggregate as before, ˆVi = Vi
ˆVj,
but also produces a larger Merkle commit tree whose hash
Hi contains both Vi as a direct leaf and all of i’s childrens’
Merkle commit trees Hj∈Ci as subtrees. The leader in this way
obtains a root hash H0 summarizing all witnesses’ individual
j∈Ci
(cid:2)
commitments, and computes the collective challenge to depend
on the root of this commit tree, c = H( ˆV0 (cid:3) H0 (cid:3) S).
Now,
in the hopefully common case that all witnesses
present in the Commit phase remain online through the Re-
sponse phase, the witnesses produce an aggregate response
ˆr0 as before, which matches the complete aggregate commit
ˆV0 appearing directly in the challenge. If witnesses disappear
after the Commit phase, however, the leader includes in its
signature the individual commits of the missing witnesses,
together with Merkle inclusion proofs demonstrating that those
individual commits were ﬁxed before the collective challenge
c was computed. The veriﬁer then multiplies the aggregate
commit ˆV0 with the inverses of the individual commits of the
missing witnesses, to produce an adjusted aggregate commit
0 and corresponding aggregate response ˆr(cid:2)
ˆV (cid:2)
0.
E. Extreme Witness Churn and Asynchronous Networks
Schnorr signatures are well-established and compatible with
current best practices for standard digital signatures, but
their Σ-protocol nature (commit, challenge, response) has
the drawback of requiring two communication round-trips
through a distributed structure – whether a simple tree or a
binomial swap forest – to aggregate a collective signature.
This requirement could be limiting in highly unstable or
asynchronous situations where any distributed structure built in
the ﬁrst round-trip might become unusable before the second.
BLS signatures [19] may offer an appealing alternative
cryptographic foundation for CoSi, requiring pairing-based
elliptic curves but avoiding the need for two communication
round-trips. In short, a BLS public key is Gx as usual, but
a BLS signature is simply H(M )x, where H(M ) is a hash
function mapping the message M to a pseudorandom point on
the appropriate curve. Signature veriﬁcation uses the pairing
operation to check that the same private key x was used
in the public key and the signature. BLS extends readily to
multisignatures, since an aggregate signature H(M )x1+...+xn
i=1 H(M )xi
is simply the product of individual signatures
and is veriﬁable against an aggregate public key Gx1+...+xn
computed in the same fashion as
i=1 Gxi.
(cid:2)n
(cid:2)n
Using BLS instead of Schnorr signatures, an authority can
produce a collective signature in a single round-trip through
a tree or binomial swap forest (Section IV-C), eliminating the
risk of a witness participating in the commit phase but dis-
appearing before the response phase (Section IV-D). Further,
BLS signatures may make CoSi usable in protocols designed
for asynchronous networks [25], [26], [109] by allowing
participants to aggregate signatures incrementally and make
use of them as soon as an appropriate threshold is reached:
e.g., typically f + 1 or 2f + 1 in asynchronous Byzantine
consensus protocols tolerating up to f faulty participants.
One key challenge in fully asynchronous synchronous ag-
gregation, where participants must dynamically adapt to arbi-
trary delay patterns, is that nodes must be able to combine
potentially overlapping aggregates without imposing regular
structures as used in San Ferm´ın. For example, nodes A and B
may communicate to form aggregate AB, nodes B and C then
535535
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:54 UTC from IEEE Xplore.  Restrictions apply. 
form aggregate BC, and ﬁnally nodes A and C must combine
aggregates AB with BC. Aggregating BLS signatures as usual
here will yield a collective signature H(M )xA+2xB +xC in
which B’s signature is effectively aggregated twice. There is
no readily apparent way to avoid such duplication, apart from
just keeping the individual signatures separate and giving up
the efﬁciency beneﬁts of incremental aggregation.
Such duplication may be tracked and compensated for,
however, by maintaining with each aggregate a vector of
coefﬁcients indicating the number of “copies” of each node’s
signature (possibly 0) represented in a given aggregate. Thus,
the aggregate AB2C from the above example would be repre-
sented by the curve point H(M )xA+2xB +xC and the coefﬁcient
vector v = [1, 2, 1]. The number of participants represented in
a given aggregate is simply the number of nonzero elements
in the coefﬁcient vector. Signature veriﬁcation uses the coef-
ﬁcient vector to compute the corresponding aggregate public
i=1 (Gxi )vi.
key against which to verify the signature, as
This approach has the downside of requiring O(N ) commu-
nication cost per aggregation step due to the need to transmit
the vector, and O(N ) computation cost to compute the correct
aggregate public key in signature veriﬁcation. Partly mitigating
these costs, however, the vector’s elements are small (e.g.,
one or two bytes) compared to full elliptic curve points
representing individual signatures, and group exponentiation
(scalar multiplication of curve points) with small non-secret
values can be made relatively inexpensive computationally.
(cid:2)n
V. PROTOTYPE IMPLEMENTATION
We have built and evaluated a working prototype witness
cosigning cothority,
implementing the basic CoSi protocol
described in Section III. The prototype also demonstrates
CoSi’s integration into two different authority applications: a
timestamp service, and a backward-compatible witness cosign-
ing extension to the Certiﬁcate Transparency log server.
The CoSi prototype is written in Go [61]; its primary imple-
mentation consists of 7600 lines of server code as measured by
CLOC [41]. The server also depends on a custom 21,000-line
Go library of advanced crypto primitives such as pluggable
elliptic curves, zero-knowledge proofs, and veriﬁable secret
sharing; our CoSi prototype relies heavily on this library but
does not use all its facilities. Both the CoSi prototype and the
crypto library are open source and available on GitHub:
https://github.com/dedis/cothority
The cothority prototype currently implements tree-based