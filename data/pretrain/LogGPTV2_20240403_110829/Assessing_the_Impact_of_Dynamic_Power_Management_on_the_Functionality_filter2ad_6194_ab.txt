### 3. Comparing the Functional Models

#### 3.1. Definition of DPM AET
We define the behavior and interactions for the trivial DPM (Dynamic Power Management) AET, which periodically shuts down the server even if it is busy:

```plaintext
ELEM_TYPE DPM_Type(void)
BEHAVIOR
DPM_Beh(void; void) = 
    . DPM_Beh()
INPUT_INTERACTIONS
void
OUTPUT_INTERACTIONS
UNI send_shutdown
```

In the second section of the Æmilia specification, we describe the system topology by declaring instances of the previously defined AETs:

```plaintext
ARCHI_TOPOLOGY
ARCHI_ELEM_INSTANCES
S : Server_Type();
RCS : Radio_Channel_Type();
RSC : Radio_Channel_Type();
C : Sync_Client_Type();
DPM : DPM_Type()

ARCHI_ATTACHMENTS
FROM C.send_rpc_packet TO RCS.get_packet;
FROM RCS.deliver_packet TO S.receive_rpc_packet;
FROM S.send_result_packet TO RSC.get_packet;
FROM RSC.deliver_packet TO C.receive_result_packet;
FROM DPM.send_shutdown TO S.receive_shutdown
END
```

The topology is as shown in Fig. 2.a), excluding the busy and idle triggers.

#### 3.2. Definition of Ideal Radio Channel AET
Next, we define the behavior and interactions for the ideal radio channel AET:

```plaintext
ELEM_TYPE Radio_Channel_Type(void)
BEHAVIOR
Radio_Channel(void; void) =
    . Radio_Channel()
INPUT_INTERACTIONS
UNI get_packet
OUTPUT_INTERACTIONS
UNI deliver_packet
```

#### 3.3. Definition of Blocking Client AET
We then define the behavior and interactions for the blocking client AET:

```plaintext
ELEM_TYPE Sync_Client_Type(void)
BEHAVIOR
Sync_Client(void; void) =
    . Sync_Client()
```

#### 3.4. Noninterference Analysis
The first model in our methodology describes the functional behavior of the system and is used to verify that the DPM is transparent, meaning its introduction does not influence the system's functional behavior as perceived by the client.

To assess the transparency of the DPM, we use a noninterference analysis approach based on equivalence checking. This approach views a system execution as an information flow and considers that a group of system users (high users) using certain commands is noninterfering with another group of system users (low users) if the actions of the high users have no effect on what the low users can see. This method has traditionally been used for security purposes to detect direct and indirect information flows that violate access policies.

In our methodology, noninterference analysis checks whether the DPM (high system component) interferes with the functional behavior of the system as observed by the client (low system component). The DPM's actions that modify the state of the power-manageable device are the only high actions, while all client actions are the low actions. Checking for noninterference involves verifying whether, from the client's perspective, the functional model of the system with the high actions hidden (i.e., DPM hidden) is weakly bisimulation equivalent to the functional model of the system with the high actions made impossible (i.e., DPM removed).

##### 3.4.1. Application to RPC
The simplified version of RPC described in Sect. 2.3 fails the noninterference check. When submitting the corresponding Æmilia specification to the security analyzer of TwoTowers, the outcome is negative, and the following modal logic formula is returned:

```plaintext
EXISTS_WEAK_TRANS(
LABEL(C.send_rpc_packet#RCS.get_packet);
REACHED_STATE_SAT(
NOT(EXISTS_WEAK_TRANS(
LABEL(RSC.deliver_packet#C.receive_result_packet);
REACHED_STATE_SAT(TRUE)
)
)
)
)
```

This formula indicates that the functional model of the simplified RPC with the high actions hidden admits a computation path where no result packet (RSC.deliver_packet) is returned to the client after it issues an RPC (C.send_rpc_packet with RCS.get_packet), whereas this path does not exist in the model where the high actions are prevented. The DPM is active in the former model and can shut down the server while processing an RPC, causing the client to wait indefinitely for a response.

To make the DPM transparent to the client, we need to:
1. Implement a timeout mechanism in the client to handle lost packets and server shutdowns.
2. Ensure the DPM does not shut down the server while it is busy by having the server inform the DPM about its state.

We modify the AETs in the Æmilia specification as follows:

```plaintext
ELEM_TYPE Server_Type(void)
BEHAVIOR
Idle_Server(void; void) =
    choice {
        . Busy_Server(),
        . Sleeping_Server()
    };
Busy_Server(void; void) =
    choice {
        . Responding_Server(),
        . Busy_Server()
    };
Responding_Server(void; void) =
    choice {
        . Idle_Server(),
        . Responding_Server()
    };
Sleeping_Server(void; void) =
    . Awaking_Server();
Awaking_Server(void; void) =
    choice {
        . Busy_Server(),
        . Awaking_Server()
    }
INPUT_INTERACTIONS
UNI receive_rpc_packet; receive_shutdown
OUTPUT_INTERACTIONS
UNI send_result_packet; notify_busy; notify_idle

ELEM_TYPE Radio_Channel_Type(void)
BEHAVIOR
Radio_Channel(void; void) =
    choice {
        . Radio_Channel(),
        . Radio_Channel()
    }
INPUT_INTERACTIONS
UNI get_packet
OUTPUT_INTERACTIONS
UNI deliver_packet

ELEM_TYPE Sync_Client_Type(void)
BEHAVIOR
Requesting_Client(void; void) =
    choice {
        . Waiting_Client(),
        . Requesting_Client()
    };
Waiting_Client(void; void) =
    choice {
        . Processing_Client(),
        . Resending_Client()
    };
Processing_Client(void; void) =
    choice {
        . Requesting_Client(),
        . Processing_Client()
    };
Resending_Client(void; void) =
    choice {
        . Waiting_Client(),
        . Processing_Client()
    }
INPUT_INTERACTIONS
UNI receive_result_packet
OUTPUT_INTERACTIONS
UNI send_rpc_packet

ELEM_TYPE DPM_Type(void)
BEHAVIOR
Enabled_DPM(void; void) =
    choice {
        . Disabled_DPM(),
        . Disabled_DPM()
    };
Disabled_DPM(void; void) =
    . Enabled_DPM()
INPUT_INTERACTIONS
UNI receive_busy_notice; receive_idle_notice
OUTPUT_INTERACTIONS
UNI send_shutdown

ARCHI_ATTACHMENTS
FROM S.notify_busy TO DPM.receive_busy_notice;
FROM S.notify_idle TO DPM.receive_idle_notice;
```

We have verified through the security analyzer of TwoTowers that the revised Æmilia specification of the RPC case study meets noninterference, ensuring the DPM does not interfere with the functional behavior of the system as perceived by the client.

### 4. Comparing the Markovian Models

The second model in our methodology is a Markovian model derived from the functional model by attaching exponentially distributed durations to its actions. Additional self-loop actions may be introduced to monitor residence in certain states.

The Markovian model is consistent with the functional model, with their underlying state spaces being isomorphic up to possible additional self-loops and action rates. If the functional model meets noninterference, the Markovian model also does.

In Æmilia, infinite rates with priority levels and weights can be expressed to model negligible timing activities. Immediate actions take precedence over exponentially timed actions, potentially altering the state space of the Markovian model. Therefore, noninterference analysis must be repeated on the Markovian model when immediate actions are involved.

The Markovian models with and without DPM can be solved using standard numerical techniques. Average performance measures related to power consumption and system efficiency can be expressed using reward structures. In Æmilia, these measures are expressed using an auxiliary specification language inspired by [3]. By combining the solutions of the Markovian models with and without DPM, along with the reward structures, we can assess the impact of introducing the DPM on system efficiency, aiming for a tradeoff between power consumption and service quality.

Due to space constraints, the detailed Æmilia specifications of the Markovian models for the two case studies are available at www.sti.uniurb.it/bernardo/twotowers/.

#### 4.1. Application to RPC
For evaluating the performance measures of interest for RPC, we provide the following parameter values for the Markovian models:
- Average server service time: 0.2 msec
- Average server awaking time: 3 msec
- Average packet propagation time: 0.8 msec
- Packet loss probability: 0.02
- Average client timeout: 5 msec

The results of the Markovian model analysis are summarized in the following figures and tables. Due to space constraints, the detailed Æmilia specifications and full results are available at the provided URL.

[Insert Figures and Tables Here]

### 3.2. Application to Streaming
Due to space constraints, we do not show the Æmilia specification of the functional model for the streaming case study, which satisfies noninterference and can be retrieved from the provided URL.

[Insert Figures and Tables Here]