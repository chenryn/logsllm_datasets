tor, the authority must compute the checksum natively
or simulated it in advance. If the entity calculates the
same checksum as the authority and returns it to the au-
thority quickly enough, the entity is considered genuine.
The maximum allowable time is determined by the
time it takes an “ideal simulator” to complete the task.
An ideal simulator is one that receives the checksum
code in advance, and can optimize the simulation code
to run fast on the native hardware for that particular case.
In the example given, Kennell and Jamieson report that
the 133MHz Pentium legitimate entity took 7.93 seconds
to complete the test, whereas the idealized simulator run-
ning on a 2.4GHz Pentium 4 took 10.72 seconds (35%
longer than native execution); the latter ﬁgure was used
Table 1: Processor-speciﬁc data included in the checksum. In addition to checksumming over kernel image byte
values, the checksum incorporates these pieces of processor speciﬁc data. The function used to incorporate the data
is unspeciﬁed in the original paper, so our attack preserves references to this data exactly.
Data source
Instruction TLB
Data TLB
Instruction cache
Data cache
Performance counter 1 Number of branches taken
Performance counter 2 Number of instructions executed
Description
ITLB miss count, physical page number
DTLB miss count, physical page number
Cache line contents (which line is unspeciﬁed)
Cache line contents (which line is unspeciﬁed)
as the cutoff time for a response. The unaided (non-
ideal) simulator required 18.53 seconds (134% longer).
Our attack below (Section 3) inserts malicious code,
computes the checksum correctly, and falls within the
cutoff of 35% (Section 4.1.1).
Since the operations of integer addition and exclusive-
or operate in different ﬁelds, the operation is nonlinear,
and therefore ex post facto ﬁxing up of the checksum is
difﬁcult. Any modiﬁcation must be done on the ﬂy, as
the checksum is being computed.
2.2 The Genuinity key agreement protocol
The Genuinity checksum primitive is incorporated into
a network key agreement protocol. At the end of a suc-
cessful completion of the protocol, the authority will
know that
1. The entity is running veriﬁed software on veriﬁed
hardware, and
2. The entity is the one who passed the test if the key
agreement succeeds.
The authority embeds its public key into the veriﬁed
space of the Genuinity test to prevent man-in the mid-
dle attacks.
E ! A The entity requests a challenge.
A ! E The authority accepts the request, and sends
the client a memory mapping to use during com-
putation of the checksum. The virtual-to-physical
page mappings are randomized, with many map-
pings pointing to the checksum code page. In par-
ticular, 2661 out of the 4096 total mappings pointed
to the physical code page. The code contains many
jumps to itself via alternate page mappings rather
than local, relative jumps. These biases toward the
code page are designed to make modiﬁcation of the
code more difﬁcult.
E ! A The entity notiﬁes the authority of acceptance
and installs the supplied memory mapping.
A ! E The authority
1. sends the challenge (public key for the re-
sponse and code for the checksum, both
signed by the authority’s key), and
2. starts the timer.
E ! A The entity calculates the checksum using the
initial memory map and the code that the authority
sent. The entity encrypts the checksum and a nonce
with the authority’s public key and sends them to
the authority.
A ! E The authority stops the timer and checks if the
checksum is correct. It sends either a qualiﬁcation
or rejection message to the entity.
E ! A The entity uses periodic samples from the hard-
ware cycle counter to generate as a symmetric ses-
sion key. The entity encrypts the session key and
a nonce with the authority’s public key and sends
them to the authority. The session key is never
transmitted over the network.
3 Speciﬁc attacks against Genuinity
Attack overview We describe a speciﬁc attack on the
Genuinity checksum primitive for the x86 architecture.
We focus on x86 because it is the only one for which the
algorithm is speciﬁed in in the original paper.
We were unable to obtain a copy of the code used in
the original Genuinity paper. Therefore, our attacks refer
to the published description of the algorithm; wherever
we have had to make assumptions, we have documented
them (see Table 2).
The premise of Genuinity is that if an entity passes
the test, then that entity is running an approved operat-
ing system kernel on approved hardware. If we can in-
sert a small amount of malicious code while still passing
the test, then we can gain complete control of the sys-
tem without being detected by the authority. In particu-
lar, once our modiﬁed checksum code succeeds, we have
subverted the trusted exit path, which normally contin-
ues execution of the kernel. Instead, we may load any
other kernel we wish, or send the session key to a third
party.
0
Chunk 1
...
0
Chunk 1
...
checksum
checksum
Chunk 22
imposter
start
imposter
checksum
0
4095
4095
Chunk 22
Chunk 1
...
Chunk 22
Lookup
Code
0
Figure 1: The original checksum code page, and the malicious checksum code page. The checksum code is
divided into 22 code chunks. The imposter checksum code page replicates the original code entirely, then adds of
imposter lookup code. The imposter lookup code checks each memory reference. If the address is in the imposter
region (between imposter start and the end of the page), the lookup code returns 0 as the byte value. For all
other memory references, the imposter lookup code returns the same value as the original lookup code.
4 Breaking Genuinity:
substitution at-
tacks
In this section, we describe two substitution attacks that
work against the current implementation of Genuinity.
The goal of a substitution attack is to modify the check-
sum code without modifying the checksum result. The
ﬁrst attack appends malicious code at the bottom of the
checksum page. The second attack does not rely on extra
space at the bottom of the checksum page.
4.1 The single page substitution attack
In the single page substitution attack, we append mali-
cious checksum code on the same physical page as the
original code; once it has computed the correct check-
sum, it can modify the machine’s memory at will. Al-
though the malicious code cannot initially be very large
in order for the attack to work, we need only substitute
enough to start loading arbitrary code.
This attack assumes there is extra space on the same
page of physical memory as the checksum code page.
We believe this is a reasonable assumption given Gen-
uinity’s description in the original paper; our own skele-
ton implementation of that algorithm consumed less than
two kilobytes of memory of the four kilobyte page. Fig-
ure 1 illustrates the code page layout.
Table 1 describes processor-speciﬁc information that
Genuinity uses to compute the checksum. The original
paper does not specify how the data is incorporated into
the checksum, but our attack is independent of the oper-
ation.
The checksum code is divided into 22 code chunks,
called nodes in the original paper. 16 of these chunks,
the memory chunks, choose a pseudorandom address in
memory and add the value of the byte at that address
to the checksum. The other 6 chunks incorporate the
processor-speciﬁc data sources (TLB miss count, cache
tags, etc.) described in Table 1. How the data is incorpo-
rated is not speciﬁed, so we preserve references to these
sources exactly.
According to the original Genuinity paper, the check-
sum code ﬁts into a single page in memory. Our imple-
mentation of the checksum code takes about 2KB, leav-
ing about 2KB free with a page size of 4KB. The kernel
used in the original Genuinity implementation is 2MB,
but the virtual memory space over which the checksum
is computed is 16MB since there are many-to-one map-
pings from virtual to physical pages. Since each page is
4KB, there are 4K virtual pages, but only 512 physical
pages. Of the virtual pages, 65% (2661) of these map to
the checksum code page, and about 3 virtual pages map
to each of the other pages. For the sake of analysis, we
assume the empty space on the checksum code page is
Table 2: Assumptions made about the Genuinity algorithm in the absence of speciﬁcation in the original paper.
Despite repeated requests of the original authors, we were unable to obtain a copy of the code for the Genuinity test.
Our assumptions are used to ﬁll in gaps in the published description.
Value/Behavior
Assumption
Layout of checksum code
Iterations of compute chunks
Operation to incorporate processor-speciﬁc data
Frequency of incorporation of processor-speciﬁc data
Which TLB entry or cache entry to examine
Code at top of page, rest zero-ﬁlled
16M iterations for each of 22 chunks
exclusive-or
6x for each iteration through 22 chunks
Unspeciﬁed (all values preserved in attack)
in the high memory of the page and is zero-ﬁlled. We
discuss alternatives to this in Section 4.3. Figure 1 is our
abstraction of the checksum code page.
The pseudocode representing the memory chunk is
memory_node:
addr = next_LFSR()
sum += memory[addr]
We rewrite the checksum code page maliciously. We
can leave the original checksum code intact, and add im-
poster checksum code in the zero-ﬁlled space (Figure 1).
To fool the authority into thinking we are running the
original code, we need to know whether or not the pseu-
dorandom address maps to the checksum code page. If
the address does map to the checksum code page, the
imposter checksum code must return the byte value from
the original code page.
imposter_memory_node:
addr = next_LFSR()
if (is_codepage (addr) &&
offset (addr) > imposter_start)
// Preserve data cache, TLB
temp = memory[addr]
// Add the original byte value
sum += 0
else
sum += memory[addr]
The difﬁculty lies in is codepage:
ideally a bit
vector would represent the virtual memory space, where
biti = 1 if virtual page i maps to the checksum code
page. However, since we cannot make any memory ref-
erences or use any variables without changing the data
cache (Table 1), we must encode this vector in instruc-
tions. The bit vector requires 4K bits, or 128 32-bit
words, to represent the page table. The vector is encoded
by a sequence of 128 code chunks, one for each word.
Each chunk loads one word of the vector into a regis-
ter. We use the page number of the address to calculate
the correct word of the bit vector, and jump to the cor-
responding code chunk. The chunk loads corresponding
immediate word of the vector into a register, and we test
the correct bit to see if the address is in the codepage.
is_codepage:
// $r0 = virtual page number
$r0 = addr >> 12
// $r1 = bit index within the word
$r1 = $r0 & 31
// $r0 = which word to jump to
$r0 = $r0 >> 5
// Jump to the corresponding chunk
jump ($r0*chunk_size) + chunk_base
chunk_base:
// Chunk 1
$r0 = immediate word1
goto end
// Chunk 2
$r0 = immediate word2
goto end
...
end:
/* Test bit $r1 of $r0 */
is_codepage = ($r0 & (1 << $r1))
Note that only two registers are used. Kennell and
Jamieson designed the Genuinity algorithm not to access
any data so as not to pollute the cache. It must therefore
reserve two or three registers for temporary values in cal-
culations. Our modiﬁcations do not need any additional
registers for temporaries, and so are largely independent
of the speciﬁcs of the Genuinity algorithm.
We have guaranteed that all memory reads will return
the values for the original codepage—all that remains is
to show that we can preserve the other invariants from
Table 1.
1. Instruction TLB. Since the imposter checksum
code resides on the same physical page as the orig-
inal code, and we have not changed any page table
entries, there are no changes to the ITLB. The miss
count and contents are unaffected.
2. Data TLB. The imposter checksum code performs
exactly the same memory loads as the original
code, so there are no changes to the DTLB.
3. Instruction cache. We preserve all cache entries.
Cache lines corresponding to the original code
never get loaded, so for accesses to them we sub-
stitute in the correct physical page number. This
number is unambiguous, since there is only one in-
struction code page (containing both the imposter
code and the original code).
4. Data cache. The imposter checksum code per-
forms exactly the same memory loads as the origi-
nal code, so there are no changes to the data cache.
5. Branch counter. On x86, there is an instruction to
disable performance counters, including the branch
counter. We can simply disable it before taking a
branch that is not present in the original code, and
re-enable it afterwards.
6. Instruction counter. As with the branch counter, it
is possible to disable the instruction counter. Since
we execute the same or more instructions per node,
by disabling and re-enabling the counter at the right
time, we can ensure that it holds the correct value
for the original checksum code.
4.1.1 Prototype implementation
We implemented a rough prototype of our attack as a
Linux loadable kernel module on a 1.5GHz Pentium 4
machine running the 2.4.20-28.9 Linux kernel. We did
not have ready access to a Pentium machine, the pro-
cessor used in the original paper. Using a kernel mod-
ule allowed us to avoid rebooting and to disable inter-
rupts as well as perform other privileged instructions
needed to implement the Genuinity algorithm. Unfortu-
nately, this approach made it impossible to remap the en-
tire memory space; we performed our test in a reserved
block of memory without remapping. Our implementa-
tion was in C with large blocks of inline assembly code
to perform machine-speciﬁc instructions and to imple-
ment the is codepage lookup function. Our imple-
mentation iterated 3000000 times over 16 memory reads
interleaved with the processor-speciﬁc code chunks.
We learned a number of lessons in reproducing the