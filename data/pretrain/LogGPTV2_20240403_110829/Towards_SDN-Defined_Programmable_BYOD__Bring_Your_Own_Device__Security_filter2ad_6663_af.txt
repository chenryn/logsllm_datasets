addition to simple blocking based policies we also evaluate
more sophisticated actions, such as trafﬁc redirection for the
purpose of security and network load management.
13
Fig. 19: Inner Network Communication Restriction
We demonstrate such capability at device-application level
by implementing a load balancer controller-application, called
netbal. In addition to supporting device trafﬁc routing, we
also leverage our ability to differentiate among application-
speciﬁc data ﬂows. In our scenario, we attempt to balance
the bandwidth utilization across two applications a and b,
regardless of their host devices. Because we have access to
network connection statistics at run time, netbal can make the
decision to reroute all trafﬁc originating from application a to a
different network end point. Another interesting application of
BYOD-enabled facilities is to use existing, dedicated, security
middle-boxes to inspect suspicious device/app activity when
necessary. To do so, we modify netbal to facilitate a different
type of network rerouting,
i.e., quarantine redirection. We
create a basic white-list of authorized applications (a,b,c) and
redirect all other application trafﬁc to a middle-box running
Snort for inspection.
V. LIMITATIONS AND DISCUSSION
Although PBS is able to provide dynamic ﬁne-grained
policy enforcement with low overhead impact
in BYOD
devices, there still remain hurdles in our current prototype
implementation. Here, we discuss those limitations and our
future work.
System Circumvention. Some malicious user activities
may intentionally seek company policy circumvention/vio-
lation. For example,
in order to gain access to otherwise
restricted services/accesses, a user could attempt to simply
turn off their context function such as GPS. PBS-DROID,
however, is aware of such context switch updates, in which
case the device can be quarantined until GPS function is
restored. Furthermore, although our system drops all packets
in case of loss of secure connection, a user may attempt to
turn off our system by killing its associated processes and the
kernel module. However, this requires a user to obtain root
privilege on the device. Furthermore, a user may attempt to
ignore company policies by utilizing a device with no PBS-
DROID installation or an existing work device tampered to
remove PBS-DROID. We note that our system can operate
in conjunction with existing complementary MDM solutions.
The network administrators can rely on many available MDM
systems [5], [8], [4] for the assurance that a device used in
the workplace is properly authenticated, equipped with the
proper software client, and vetted for operation in the network,
a common BYOD enterprise practice [7].
Portability. Portability is an important factor in achieving
the necessary coverage in a BYOD deployment, which may
be composed of a multitude of operating system versions
and mobile devices. In order to support multiple versions
of Android, our system requires a few minor modiﬁcations.
Unavoidably, tightly integrated Android components, such as
the Arbiter, may require some source code modiﬁcation to
support system/device speciﬁc information (e.g., PackageM-
anager, GPS, etc.). While PBS-DROID is an Android speciﬁc
implementation, our underlying design principle is portable
to other platforms. PBS-DROID can be extended to Linux,
Windows and Apple devices/machines with additional engi-
neering efforts. We acknowledge that not all BYOD devices
may support the full range of our context-based policies, e.g.,
devices that lack GPS capability will be limited in location-
based policy enforcement. In such a case our system may
utilize a more rudimentary location based check, e.g., grasping
information from the physical network connection of the
device, such as wireless access point or subnet information.
Protocol and Interface Coverage. First, our current im-
plementation of PBS-DROID only covers TCP network ﬂows.
While many Android applications utilize standard TCP net-
work communication, it is possible to circumvent our prototype
via other protocols such as UDP. We note that SDN/OpenFlow
does support both TCP and UDP, as well as ICMP. Extending
our system to provide more comprehensive protocol coverage
is not difﬁcult and merely needs more engineering effort,
which is a focus of our immediate future work. Second, as
noted in our design section we support both WiFi and 3G/4G
interfaces on the mobile device. There are, however, other
interfaces which an application may utilize for communication
such as Bluetooth and NFC (near ﬁeld communication). Our
intention is to achieve greater interface coverage in future
work, which couples with broader protocol support as not all
interfaces may utilize the TCP/IP network stack.
Scalability of Controller. We assume that a BYOD ap-
plication is working on a normal-size enterprise network since
the BYOD application running on top of a controller is treated
just as a normal SDN controller application. Our components
to handle enterprise policies on top of ﬂow management
incur not much performance overhead compared to normal
SDN applications running on a single controller. We note
that supporting large-scale enterprises is still an important
matter, which attributes to the scalability performance of
SDN controllers/networks. Existing research [14], [10], [28]
on SDN already shows promising results in reasonably large
enterprise/cloud/data-center networks.
SDN Attacks. Since PBS-DROID utilizes SDN concepts,
this might make it vulnerable to existing SDN attacks, such
as control plane saturation, which denies controller availability
[24]. An administrator, however, could mitigate such a threat
through the use of network policies which limit device-speciﬁc
network trafﬁc or temporarily block offending devices. Exist-
ing SDN security systems [22], [24], [20], [13], [11] can aid
in the protection of a PBS managed network. Thus, security
concerns on SDN-centric vulnerabilities are not the focus of
this paper.
VI. RELATED WORK
In this section, we review several relevant existing work.
Android Systems at Enterprise. Android Device Admin-
istration provides an API [2] which facilitates the creation
of stronger, security-aware Android applications. The API
provides a succinct number of static security functions, such
as limiting the minimum on device password length, disabling
the camera, and imposing shorter inactivity lock-out timers.
The static policies, however, fall short in addressing aforemen-
tioned issues, lacking the ability to provide reactive, or real-
time programmable policies or features. Android for Work [1]
and Samsung KNOX [6] provide a dedicated proﬁle/container
system which separates corporate data from personal data
on the users’ devices. These systems expose APIs to MDM
solutions, which combined present a uniﬁed management
framework/platform for IT admins. Yet their feature set is
limited in functionalities for dynamic, ﬁne-grained network
policy management, which is the focus of this work.
Some existing work [12], [9], [18], [27], [17] provides
device access restriction via policy enforcement. Operating at
kernel and application layer instead of network level, however,
these solutions do not provide access control to device-external
resources such as remote host communication. Despite using
policies, the above solutions do not support dynamic pro-
grammability, limiting their functionality to only passive static
policy enforcement. AirBag [26] uses a virtualization-based
approach to achieve isolation of trusted applications. This
solution can be extended to isolate personal apps from those
managed by the enterprise. Such approach is complementary
to PBS-DROID. Another recent work, DeepDroid [25], also
addresses the problem of BYOD policy enforcement in the
enterprise. By tracking the system APIs (system server, zy-
gote, binder transactions), DeepDroid can enforce app-context-
aware policies. However, DeepDroid is limited by static policy
conﬁguration, much like other previous work. Without the abil-
ity to offer a programmable management interface, DeepDroid
cannot account for scenarios which require reactive network
action, such as application-speciﬁc load balancing, quarantine
and context switch response in real time.
Lastly, meSDN [15] is another work which adopts the
concepts of SDN in the Android environment. The authors
solve a different problem where they use SDN in order to op-
timize interaction between cloud infrastructure and wirelessly
connected devices. They focus on WLAN virtualization by
moving app logic into the central controllers. Our solution is
broader in that we consider all network interfaces and data
ﬂowing through each of these interfaces. We also provide
context-aware policies and network access control in PBS-
DROID, which is not provided at all by meSDN.
SDN/OpenFlow Security. Insufﬁcient security consider-
ations in SDN/OpenFlow has led to an increased focus in
recent research. FRESCO [22] presents an OpenFlow security
application development framework which provides modu-
lar composable security services for application developers.
Avant-Guard [24] provides connection migration techniques to
solve the challenge of scalable control plane saturation attacks.
TopoGuard [13] is designed to solve new topology poisoning
vulnerabilities/attacks. SPHINX [11] provides a ﬂow-graph
model to detect various trafﬁc ﬂow related attacks in SDN.
14
FortNox [20]/SE-Floodlight [19] support role-based authoriza-
tion and security constraint enforcement in order to solve ﬂow
rule contradictions in real time, as well as providing several
other security protection at the control plane. Rosemary [23]
is a new security-oriented SDN controller which strengthens
the control plane. Different from all existing work, our paper
focuses on providing a network security policy enforcement
system for BYOD devices in enterprise networks.
VII. CONCLUSION
In this paper, we propose a new network security frame-
work for BYOD in enterprise networks,
i.e., PBS (Pro-
grammable BYOD Security). Motivated by the new concept
of Software-Deﬁned Networking (SDN), we provide an ap-
plication and network mobile devices management and policy
enforcement system PBS-DROID on the Android platform. We
achieve dynamic, ﬁne-grained network control of applications
on mobile devices. With PBS, administrators also beneﬁt
from the global network visibility and ﬁne-grained policy
programmability. We introduce PBS-DROID as a concrete
client
im-
posing much performance overhead, PBS-DROID can effec-
tively enforce the dynamic network access control policy with
consideration of users’ context information. We believe PBS
greatly complements existing security solutions and represents
a new direction for the important BYOD security domain.
implementation for Android platforms. Without
ACKNOWLEDGMENT
This material is based upon work supported in part by the
Air Force Ofﬁce of Scientiﬁc Research under FA-9550-13-1-
0077 and a Google Faculty Research award. Any opinions,
ﬁndings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect the views of AFOSR and Google.
REFERENCES
[1] Android for Work. https://www.google.com/work/android/.
[2] Device Administration.
http://developer.android.com/guide/topics/
admin/device-admin.html.
[3] MDM Comparison.
http://www.tomsitpro.com/articles/mdm-vendor-
comparison,2-681.html.
[4] Miradore. http://www.miradore.com/miradore-online/.
[5] Mobile Device Management.
http://en.wikipedia.org/wiki/
Mobiledevicemanagement.
[6] Samsung Enterprise.
http://www.samsung.com/us/business/samsung-
for-enterprise/index.html.
[7] Samsung KNOX.
http://www.samsung.com/global/business/mobile/
platform/mobile-platform/knox/.
[8] SPICEWORKS.
http://www.spiceworks.com/free-mobile-device-
management-mdm-software/.
[9] K. Z. Chen, N. Johnson, V. D’Silva, S. Dai, K. MacNamara, T. Magrino,
E. X. Wu, M. Rinard, and D. Song. Contextual policy enforcement in
android applications with permission event graphs. In NDSS, 2013.
[10] A. R. Curtis, J. C. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma,
and S. Banerjee. DevoFlow: Scaling Flow Management for High-
In Proceedings of ACM SIGCOMM 2011
Performance Networks.
Conference, August 2011.
[11] M. Dhawan, R. Poddar, K. Mahajan, and V. Mann. Sphinx: Detecting
In In proceedings of
security attacks in software-deﬁned networks.
the 22th Annual Network & Distributed System Security Conference
(NDSS’15), 2015.
15
[12] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone
application certiﬁcation. In Proceedings of the 16th ACM conference on
Computer and communications security, pages 235–245. ACM, 2009.
[13] S. Hong, L. Xu, and H. Wang ang G. Gu. Poisoning network visibility
in software-deﬁned networks: New attacks and countermeasures. In In
proceedings of the 22th Annual Network & Distributed System Security
Conference (NDSS’15), 2015.
[14] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski, M. Zhu,
R. Ramanathan, Y. Iwata, H. Inoue, T. Hama, and S. Shenker. Onix:
A Distributed Control Platform for Large-scale Production Networks.
In Proceedings of the 7th USENIX Symposium on Networked Systems
Design and Implementation (NSDI), 2010.
J. Lee, M. Uddin, J. Tourrilhes, S. Sen, S. Banerjee, M. Arndt, K. Kim,
and T. Nadeem. mesdn: Mobile extension of sdn. In Proceedings of
the Fifth International Workshop on Mobile Cloud Computing &#38;
Services, MCS ’14, pages 7–14, New York, NY, USA, 2014. ACM.
[15]
[16] Logicalis. BYOD ? Research ﬁndings. http://cxounplugged.com/2012/
11/ovum byod research-ﬁndings-released/.
[17] M. Nauman, S. Khan, M. Alam, and X. Zhang. Apex: Extending
android permission model and enforcement with user-deﬁned runtime
constraints. In ACM Symposium on Information, Computer and Com-
munications Security (ASIACCS). ACM, 2010.
[18] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. Semantically
rich application-centric security in android. Security and Communica-
tion Networks, 5(6):658–673, 2012.
[19] P. Porras, S. Cheung, M. Fong, K. Skinner, and V. Yegneswaran.
Securing the software-deﬁned network control layer. In In proceedings
of the 22th Annual Network & Distributed System Security Conference
(NDSS’15), 2015.
[20] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu. A
In Proceedings
security enforcement kernel for openﬂow networks.
of ACM SIGCOMM Workshop on Hot Topics in Software Deﬁned
Networking (HotSDN’12), August 2012.
[21] S. Shin and G. Gu. CloudWatcher: Network Security Monitoring
Using OpenFlow in Dynamic Cloud Networks (or: How to Provide
Security Monitoring as a Service in Clouds?). In Proceedings of the
7th Workshop on Secure Network Protocols (NPSec’ 12), co-located
with IEEE ICNP’ 12, October 2012.
[22] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson.
Fresco: Modular composable security services for software-deﬁned
networks. In Proceedings of the 20th Annual Network and Distributed
System Security Symposium (NDSS’13), February 2013.
[23] S. Shin, Y. Song, T. Lee, S. Lee, J. Chung, P. Porras, V. Yegneswaran,
J. Noh, and B. B. Kang. Rosemary: A robust, secure, and high-
In Proceedings of the 21th
performance network operating system.
ACM Conference on Computer and Communications Security (CCS),
2014.
[24] S. Shin, V. Yegneswaran, P. Porras, and G. Gu. Avant-guard: Scalable
and vigilant switch ﬂow management in software-deﬁned networks. In
Proceedings of the 20th ACM Conference on Computer and Communi-
cations Security (CCS), 2013.
[25] X. Wang, K. Sun, Y. Wang, and J. Jing. Deepdroid: Dynamically
enforcing enterprise policy on android devices. In 22nd Annual Network
and Distributed System Security Symposium, NDSS 2015, San Diego,
California, USA, February 8-11, 2014, 2015.
[26] C. Wu, Y. Zhou, K. Patel, Z. Liang, and X. Jiang. Airbag: Boosting
In Proceedings of the
smartphone resistance to malware infection.
21th Annual Network and Distributed System Security Symposium
(NDSS’14), 2014.
[27] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium: Practical policy enforce-
ment for android applications. In USENIX Security Symposium, pages
539–552, 2012.
[28] M. Yu, J. Rexford, M. J. Freedman, and J. Wang. Scalable Flow-Based
Networking with DIFANE. In Proceedings of ACM SIGCOMM 2010
Conference, August 2010.