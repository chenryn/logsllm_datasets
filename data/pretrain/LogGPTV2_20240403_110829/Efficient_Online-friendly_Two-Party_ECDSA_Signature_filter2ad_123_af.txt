### Security and Performance Analysis

Our implementation of OT-based 2ECDSA utilizes the Multiplication-to-Addition (MtA) protocol from [28] and is tested on the DKLS18 and DKLS19 protocols. The results for computation and communication during the signing process are summarized in Table 4. Our key generation phase has the same computational complexity as DKLS19.

#### Communication Efficiency
The offline communication cost of our scheme is 90.9 KB, which is approximately half the cost of DKLS19-20, demonstrating a significant improvement.

### Cost Comparison of Paillier-based Schemes

Table 3 provides a detailed comparison of the computational and communication costs for various Paillier-based schemes.

| Schemes         | Computation (ms) | Communication (KB) |
|-----------------|------------------|--------------------|
| LNR18 [26]      | 461              | 6.6                |
| GG18 [19]       | 1237             | 288                |
| CGGMP20 [6]     | 2037             | 32                 |
| 2ECDSA (Paillier)| 226              | 32                 |
| Lin17 [25] (Paillier-EC) | 34 | 768                |
| GG18 [19] (Paillier-EC) | 360 | 288                |
| 2ECDSA (Paillier-EC) | 141 | 32                 |

### Cost Comparison of OT-based Schemes

Table 4 compares the computational and communication costs for OT-based schemes.

| Schemes         | Computation (ms) | Communication (KB) |
|-----------------|------------------|--------------------|
| DKLS18 [15]     | 2.9              | 32                 |
| DKLS19 [16]     | 3.7              | 32                 |
| 2ECDSA (OT)     | 2.6              | 90.9               |

### Cost Comparison of CL-based Schemes

Table 5 compares the computational and communication costs for CL-based schemes.

| Schemes         | Computation (ms) | Communication (KB) |
|-----------------|------------------|--------------------|
| CCLST19 [7]     | 475              | 208                |
| CCLST20 [8]     | 3316             | 288                |
| YCX21 [33]      | 4550             | 288                |
| 2ECDSA (CL)     | 190              | 32                 |

### Key Generation Protocol for 2-out-of-n Access Structures

**Distributed Key Generation Phase: Keygen(G, ùëÉ, ùëû)**

Given the joint input (G, ùëÉ, ùëû):

1. **Phase 1:**
   - Each player \( P_i \) selects \( x_i \leftarrow \mathbb{Z}_q \) and computes \( X_i = x_i \cdot P \).
   - \( P_i \) also generates a zero-knowledge proof of knowledge (ZKPoK) of the discrete logarithm using \( x_i \).
   - \( P_i \) broadcasts a commitment to \( X_i \) and the corresponding ZKPoK.

2. **Phase 2:**
   - Upon receiving commitments from other parties, \( P_i \) decommits \( X_i \) and the corresponding ZKPoK.
   - \( P_i \) verifies all received commitments and ZKPoKs.

3. **Phase 3:**
   - Each party \( P_i \) runs a (2, n) Feldman-VSS [17] using his secret \( x_i \).
   - Specifically, let \(\{x_i^{(1)}, \ldots, x_i^{(n)}\}\) be the secret sharing of \( x_i \). \( P_i \) adds the private shares received from the Feldman-VSS to compute the final shared secret.
   - Note that \( V_i = v_i \cdot P \).

### Conclusion

We propose an online-friendly two-party 2ECDSA scheme with extremely fast online computation and a single execution of MtA in the offline phase. Our scheme can be efficiently instantiated using Paillier, CL encryptions, and oblivious transfer. Additionally, it can be extended to the more general case of 2-out-of-n. Future work will focus on improving full threshold ECDSA.

### Acknowledgments

We thank Xuyang Song and Xueli Wang for their help in the experiments. This work was supported by the National Natural Science Foundation of China (No. 62172412, No. 61972332), the National Key Research and Development Program of China (No. 2020YFB1807502), and the Research Grant Council of Hong Kong (GRF Project 15211120).

### References

[References listed here as in the original text]

---

This optimized version aims to provide a clearer, more structured, and professional presentation of the content.