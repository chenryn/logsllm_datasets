### 优化后的文本

#### 率和部署结果
测试通常在稀有的集成环境中进行，这往往需要数周时间来获取和配置。为了提高效率，我们需要一种解耦的架构，使小团队能够独立实施、测试并快速且安全地将代码部署到生产环境，从而增加和维持开发生产力，并改进部署结果。

#### 解耦的架构
SOA（面向服务架构）于1990年代提出，系统由根据限界上下文解耦的服务组成。这种架构允许服务独立更新至生产环境，而无需其他服务同时更新。特别重要的是，服务必须从共享数据库解耦（即使使用共享数据库服务，但不应有通用的Schemas）。限界上下文的概念在《领域驱动设计》一书中有所描述。开发人员应能够在不了解其他服务内部实现的情况下理解和更新服务代码。与其他服务的交互应完全通过API进行，避免共享数据结构、Schema或内部对象。良好划分的服务和清晰的接口使得测试变得更加容易。

#### Google App Engine Director
谷歌和亚马逊的面向服务架构展现了极高的灵活性和可扩展性，数以万计的小团队依然保持高生产率。保持团队规模较小（如“两个披萨”团队），遵循康威定律，根据期望的沟通模式设计团队边界，鼓励保持团队规模足够小，降低内部沟通成本，并确保团队领域范围明确。例如，亚马逊自2002年起从单体架构转型，采用小团队规则，通常每个团队5-10人。限制团队规模的好处包括：
- 团队对所负责的系统有清晰且共同的理解。
- 限制产品或服务的增长率，以维持共同理解。
- 下放权力，实现自治。
- 每个小团队尽可能自治，与管理层一起决定核心业务指标，并据此进行自主活动，最大化度量指标。
- 小团队速度快，不会陷入文书工作泥潭，每个团队负责特定的业务并完全负责其设计、构建、执行和监控，直接从业务用户获取反馈。
- 在失败影响不大的环境中，小团队是让员工获得领导经验的方式之一。
- 亚马逊的核心策略是将小团队的组织结构与面向服务架构相结合。

#### 案例：Target (2015)
案例研究表明，将运维集成到日常开发工作中有助于实现市场导向的结果。如果运维是集中式和职能导向的，服务于多个开发团队，则可能不利于目标达成，导致长前置时间、频繁调整优先级和较差的部署结果。

#### Big Fish Games (2013)
起初，Big Fish Games尝试将运维工程师和架构师嵌入开发团队，但由于缺乏足够的运维工程师支持众多团队，后来采用了Ops联络员机制。这些联络员作为业务关系经理，与产品管理层合作，熟悉产品路线图和业务需求，帮助产品团队明确运维路线。此外，他们还指派了专属的发布工程师，了解产品开发和测试的需求，帮助团队获取所需资源，确定自服务工具的优先级，并创建共享服务以提升开发生产力。

#### 共享服务
共享服务促进了标准化，提高了工程师的工作效率。Netflix强调：“人们可以依赖我们的工具，但重要的是他们不应依赖我们。”持续寻找已工作的内部工具链，将其扩展为集中化的工具，比重新设计更容易成功。

#### 运维工程师的角色
将运维工程师嵌入服务团队，与开发、测试和信息安全人员一起工作，创建工具和能力，改变工作方式。参加开发团队的仪式，如计划会议和每日站会。这种方式不仅有助于交叉培训，还能将运维知识转化为自动化代码。为每个服务团队指派运维联络员，以便更好地理解新功能及其构建原因，关注可运维性、可扩展性和可观测性。

#### Etsy案例
Etsy指定运维人员，要求他们理解新功能及其构建原因，参与监控和收集指标，评估与现有架构和模式的偏离情况，以及基础设施的需求和容量。功能发布计划中也包括运维人员，他们参加开发团队的仪式，如站会和回顾会。通过共享看板使运维工作可视化，清晰展示将代码转移到生产环境的过程，识别阻塞点并及时处理。

#### 第一部分：三种方法
DevOps及其产生的技术、架构和文化实践是许多哲学和管理运动的集合。精益运动（始于1980年代）强调价值流映射、看板板和全面生产维护，缩短前置时间以提高质量、客户满意度和员工幸福感。敏捷宣言（2001年）提倡轻量级软件开发流程，小批量增量发布，以及高度信任的管理模式。持续交付运动（2009年）基于持续构建、测试和集成，确保代码和基础设施始终处于可部署状态。丰田Kata（2009年）强调每日工作的持续改进，建立目标状态，设置周目标产出，并在日常工作中不断改进。

#### 敏捷、持续交付和三步工作法
价值流涵盖设计、生产和交付产品或服务所需的系列活动，包括信息和材料的双重流动。聚焦于创造平顺和流式的工作，减少在制品，避免返工，并根据全局目标持续优化。技术价值流同样适用于技术工作，将商业假设转换为技术辅助的服务，交付价值给用户。输入是商业目标和假设，从接受开发工作并加入到承诺的Backlog开始。典型的敏捷开发团队将需求转化为用户故事，开发代码并签入版本控制库，每个变更都经过集成和测试。只有当服务运行在生产环境中时才真正交付了价值，因此必须确保快速且无误地部署。

#### 前置时间和处理时间
前置时间从需求提出到需求满足的时间，处理时间则是从开始针对客户需求工作到完成的时间，不包括等待时间。缩短队列中的等待时间对于实现快速流动和缩短前置时间至关重要。常见场景如部署前置时间长达数月，特别是在大型复杂组织、紧耦合单体应用、稀有的集成测试环境以及很长的测试和生产环境lead time的情况下，高度依赖手工测试和多层审批流程。