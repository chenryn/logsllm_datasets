率和部署结果
测试在稀有的集成环境进⾏行行，经常需
要数周时间获取和配置
我们需要解耦的架构
让⼩小团队的开发⼈人员可以独⽴立实施、测
试、部署代码到⽣生产环境，安全且快速
增加和维持开发⽣生产率，改进部署结果
SOA架构（1990s提出）系统由根据
限界上下⽂文解耦的服务组成
解耦的架构意味着服务可以独⽴立更更新
⽣生产环境，不不需要其他服务更更新
重要的是，服务必须从共享数据库解
耦（即使共享数据库服务，但没有通
⽤用的Schemas）
限界上下⽂文是在领域驱动
设计⼀一书中描述
开发应该能够在不不知道其他服务内部
实现的情况下，理理解和更更新服务代码
与其他服务交互完全通过APIs，不不能共
享数据结构和Schema，或者内部对象
服务良好划分，接⼝口清晰，可以更更轻
松的进⾏行行测试
Google App Engine Director：⾕谷歌和亚⻢马逊⾯面向服务的架构拥有难以
置信的灵活和可扩展性，众多⼩小团队的数万开发依然及其有⽣生产率
保持团队⾜足够⼩小（2 pizza team）
康威定律律让我们根据期望的沟通模式设计团队边界，但也⿎鼓励保持团队
规模⾜足够⼩小，降低团队内沟通，⿎鼓励保持团队领域范围⾜足够⼩小和有界限
Amazon 2002年年从单体架构转型，使⽤用两个披萨的⼩小团队规则，通常5-10⼈人
限制团队规模的好处
团队有对所⼯工作的系统有清晰，共同的理理解
限制产品或服务的增⻓长率，为了了维持共同的理理解
下放权利利，实现⾃自治
每个2PT团队都尽可能⾃自治
团队Lead，跟管理理层⼀一起，决定团队所
负责的核⼼心业务指标，⽐比如适当的功能
指标作为团队实验的整体评估标准
然后团队能够⾃自治的活动，最⼤大化度量量指标
⼩小团队速度快，不不会陷⼊入⽂文案⼯工作泥泥潭，每个团队分配到
特定的业务并完全负责。团队范围固定，设计、构建、执
⾏行行和监控，开发和架构师可以直接从业务⽤用户获取反馈
在失败没有灾难性影响的环境中，
2PT是让员⼯工获得领导经验的⽅方式
Amazon的⼀一个核⼼心策略略是连接2PT
的组织结构与⾯面向服务架构
Case：API Enablement at Target (2015)
8. 将运维集成在⽇日常开发⼯工作中
我们的⽬目标是市场导向的结果，
⼩小团队快速和独⽴立交付价值
运维如果是中⼼心化和⾯面向职能的，服
务多个开发团队，对达成⽬目标不不利利
⻓长前置时间，持续的调整优先
级和升级，很差的部署结果
Case：Big Fish Games 2013
⼀一开始将运维⼯工程师和架构师嵌⼊入到开发团队
但是没有⾜足够的运维⼯工程师⽀支持众多团队
后来采⽤用Ops联络员机制
业务关系经理理
跟产品管理理层⼯工作
熟悉产品路路线和业务
是产品在运维内部的代表
帮助产品团队明确运维路路标
专属的发布⼯工程师
熟悉产品开发和测试对运维的需求
帮助他们获取所需
确定⾃自服务⼯工具优先级
创建共享服务，提升开发⽣生产率
共享的版本控制库，预置了了安全库
部署流⽔水线，⾃自动化运⾏行行代码质量量和安全检查
部署应⽤用到已知的就绪的环境，已经有监控⼯工具
共享服务促进了了标准化，让⼯工程师更更有效率
Netﬂix⾃自服务：“It’s okay for people to be 
dependent on our tools, but it’s important 
that they don’t become dependent on us.”
持续寻找已在⼯工作的内部⼯工具链，扩展为集中化让
每个⼈人可以使⽤用的，这样⽐比重新设计更更容易易成功
将运维⼯工程师嵌⼊入服务团队
与开发，测试和信息安全⼀一起⼯工作
创建⼯工具和能⼒力力，改变⼯工作⽅方式
参加开发团队仪式，如计划会、每⽇日站会
另外的好处：开发运维结对，可以交叉培
训，有助于转换运维知识到⾃自动化的代码
为每个服务团队指派运维联络员
Etsy： 指定运维，需要理理解
新功能及其构建原因
与可运维性、可扩展
性、可观测性相关内容
监控和收集指标
评判与背离之前架构和模式的正当性
基础设施的需求和容量量
功能发布计划
参加开发团队仪式
邀请运维到开发站会
信息辐射，进⾏行行中和已完成任务
更更好的计划和准备
邀请运维到开发回顾会
展示结果和学习结果，反馈到产品团队
示例例反馈
找到监控盲区，本迭代已经补全
部署困难，改进的思路路
某事很困难，不不要再这样进⾏行行了了
防⽕火墙规则问题，重新架构
运维的反馈让产品团队更更好理理解他们的决定对下游的影响
提醒每个⼈人，⽐比⽇日常⼯工作更更重要的是改进⽇日常⼯工作
通过共享看板让运维⼯工作可视化
清晰看到将代码转移到⽣生产环境的⼯工作
看到运维⼯工作被阻塞，需要升级处理理或改进的部分
Part I：The three ways
Introduction
DevOps及其产⽣生的技术、架构、⽂文化
实践，是很多哲学和管理理运动的集合
THE LEAN MOVEMENT（ 1980s）
Toyota Production System
Value Stream Mapping
Kanban Boards
Total Productive Maintenance
lead time是⾼高质量量、客户满意和员⼯工
愉悦的预测器器
缩短lead time的预测器器：⼩小批量量⼯工作
精益原则聚焦在如何通过系统思考为
⽤用户创造价值
THE AGILE MANIFESTO（2001）
轻量量级软件开发流程
⼩小批量量，增量量式的发布
⼩小的⾃自组织团队，⾼高度信任的管理理模型
AGILE INFRASTRUCTURE AND 
VELOCITY（2009）
10 Deploys per Day: Dev and Ops 
Cooperation at Flickr
Patrick：DevOpsDays⼤大会
DevOps⼀一词的由来
THE CONTINUOUS DELIVERY 
MOVEMENT（2009）
在持续构建，测试和集成的基础上
Jez Humble 与 David Farley扩展为：持续交付
Deployment pipeline
确保代码和基础设施⼀一直处
于可部署状态
所有签⼊入到trunk的代码可
以安全的部署到⽣生产环境
TOYOTA KATA（2009）
困惑：没有⼀一个学习丰⽥田精益实践的
组织能够复制丰⽥田⼯工⼚厂观察到的⾼高效
遗漏漏了了⼀一个最重要的实践：
improvement kata
每⽇日⼯工作的持续改进
建⽴立⽬目标状态
设置周⽬目标产出
在⽇日常⼯工作中持续改进
1. 敏敏捷，持续交付和三步⼯工作法
价值流 Value Stream
⽣生产制造的价值流
设计、⽣生产和交付产品或服务给⽤用户所需的
⼀一系列列活动，包括信息和材料料的双重流动
聚焦在创造平顺和流式的⼯工作
⼩小批量量
减少在制品
避免返⼯工
根据全局⽬目标持续优化
技术的价值流
在物理理过程中加快⼯工作流动的原则和模
式，同样适应于技术⼯工作
技术价值流：将商业假设转换为技术辅
助的服务，交付价值给⽤用户所需的流程
输⼊入是商业⽬目标和假设，从接受开发⼯工
作并加⼊入到承诺的Backlog中开始
典型的敏敏捷开发团队将需求转化为⽤用户故事，开发代
码并签⼊入到版本控制库，然后每个变更更被集成和测试
因为只有当服务运⾏行行在⽣生产环境时才交付了了价值，
所以必须确保不不仅快速交付，⽽而且部署没有产⽣生混
乱、服务中断和安全或合规性的失败
聚焦在缩短部署前置时间
关注的起点：⼯工程师将变更更签⼊入版本控制；终点：变更更成功运⾏行行在⽣生产环境，
提供价值给客户并收集有⽤用的反馈和监测
第⼀一段：设计和开发
类似于精益产品开发
⾼高度的易易变性和不不确定性
深度创新⼯工作，导致⾼高度易易变的处理理时间
第⼆二段：测试和运维
类似于精益⽣生产制造
需要创新和专业知识
可预测和机械性
以最⼩小的易易变性完成⼯工作产出
短的和可预测的前置时间
接近零缺陷
避免⼤大批量量⼯工作从设计/开发价值流，传递到
测试/运营价值流，如瀑布流程或⻓长功能分⽀支
我们的⽬目标是测试/运营与设计/开发同时进
⾏行行，确保快速流动和⾼高质量量
Lead Time vs. Processing Time
Lead Time
开始：需求提出
结束：需求被满⾜足
Process Time
开始：开始针对客户需求⼯工作
不不包含在队列列中等待的时间
处理理时间与前置时间的⽐比例例是重要的效率指标
达到快速流动和缩短前置时间的⽬目标，需要缩
短队列列中的等待时间
常⻅见场景：部署前置时间数⽉月
⼤大型，复杂组织
紧耦合，单体应⽤用
稀有的集成测试环境
很⻓长的测试和⽣生产环境lead time
⾼高度依赖⼿手⼯工测试
多个需要审批的流程