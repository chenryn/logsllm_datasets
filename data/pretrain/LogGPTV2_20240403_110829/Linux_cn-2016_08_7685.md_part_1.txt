---
author: Ruslan
category: 软件开发
comments_data:
- date: '2016-08-16 11:07:34'
  message: 这配图很不错。。。。
  postip: 121.34.99.3
  username: hello_linux [Chrome 46.0|Windows 7]
- date: '2016-08-18 02:33:57'
  message: 和这个类似主题的教程看过不少了，这算是其中很直观的一篇。
  postip: 113.139.121.125
  username: 来自陕西西安的 Safari 9.1|Mac 10.11 用户
- date: '2016-08-26 01:28:51'
  message: 受益匪浅
  postip: 123.120.24.65
  username: GNU [Baidu Spark 7.6|Windows 8]
count:
  commentnum: 3
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 9353
date: '2016-08-16 09:33:00'
editorchoice: true
excerpt: 你的 Web 服务器必须实现 WSGI 接口的服务器部分，而现代的 Python Web 框架均已实现了 WSGI 接口的框架部分，这使得你可以直接在
  Web 服务器中使用任意框架，而不需要更改任何服务器代码，以对特定的 Web 框架实现兼容。
fromurl: https://ruslanspivak.com/lsbaws-part2/
id: 7685
islctt: true
largepic: /data/attachment/album/201608/15/225543dvfgvgu5i21s5s3y.jpg
permalink: /article-7685-1.html
pic: /data/attachment/album/201608/15/225543dvfgvgu5i21s5s3y.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 7662
- displayorder: 0
  raid: 7847
reviewer: ''
selector: ''
summary: 你的 Web 服务器必须实现 WSGI 接口的服务器部分，而现代的 Python Web 框架均已实现了 WSGI 接口的框架部分，这使得你可以直接在
  Web 服务器中使用任意框架，而不需要更改任何服务器代码，以对特定的 Web 框架实现兼容。
tags:
- Web
- 服务器
- Python
thumb: false
title: 搭个 Web 服务器（二）
titlepic: true
translator: StdioA
updated: '2016-08-16 09:33:00'
---
在[第一部分](/article-7662-1.html)中，我提出了一个问题：“如何在你刚刚搭建起来的 Web 服务器上适配 Django, Flask 或 Pyramid 应用，而不用单独对 Web 服务器做做出改动以适应各种不同的 Web 框架呢？”我们可以从这一篇中找到答案。
![](/data/attachment/album/201608/15/225543dvfgvgu5i21s5s3y.jpg)
曾几何时，你所选择的 Python Web 框架会限制你所可选择的 Web 服务器，反之亦然。如果某个框架及服务器设计用来协同工作的，那么一切正常：
![](/data/attachment/album/201608/15/225600ojw49umhdpn4aewo.png)
但你可能正面对着（或者曾经面对过）尝试将一对无法适配的框架和服务器搭配在一起的问题：
![](/data/attachment/album/201608/15/225601j9av7y9ywxa05x5i.png)
基本上，你需要选择那些能够一起工作的框架和服务器，而不能选择你想用的那些。
所以，你该如何确保在不对 Web 服务器或框架的代码做任何更改的情况下，让你的 Web 服务器和多个不同的 Web 框架一同工作呢？这个问题的答案，就是 Python    Web 服务器网关接口    （    Web Server Gateway Interface    ） （缩写为 [WSGI](https://www.python.org/dev/peps/pep-0333/)，念做“wizgy”）。
![](/data/attachment/album/201608/15/225602vhub9wht9e8cbeiz.png)
WSGI 允许开发者互不干扰地选择 Web 框架及 Web 服务器的类型。现在，你可以真正将 Web 服务器及框架任意搭配，然后选出你最中意的那对组合。比如，你可以使用 [Django](https://www.djangoproject.com/)，[Flask](http://flask.pocoo.org/) 或者 [Pyramid](http://trypyramid.com/)，与 [Gunicorn](http://gunicorn.org/)，[Nginx/uWSGI](http://uwsgi-docs.readthedocs.org/) 或 [Waitress](http://waitress.readthedocs.org/) 进行结合。感谢 WSGI 同时对服务器与框架的支持，我们可以真正随意选择它们的搭配了。
![](/data/attachment/album/201608/15/225604wpler4o4pvlezrro.png)
所以，WSGI 就是我在第一部分中提出，又在本文开头重复了一遍的那个问题的答案。你的 Web 服务器必须实现 WSGI 接口的服务器部分，而现代的 Python Web 框架均已实现了 WSGI 接口的框架部分，这使得你可以直接在 Web 服务器中使用任意框架，而不需要更改任何服务器代码，以对特定的 Web 框架实现兼容。
现在，你已经知道 Web 服务器及 Web 框架对 WSGI 的支持使得你可以选择最合适的一对来使用，而且它也有利于服务器和框架的开发者，这样他们只需专注于其擅长的部分来进行开发，而不需要触及另一部分的代码。其它语言也拥有类似的接口，比如：Java 拥有 Servlet API，而 Ruby 拥有 Rack。
这些理论都不错，但是我打赌你在说：“Show me the code!” 那好，我们来看看下面这个很小的 WSGI 服务器实现：
```
### 使用 Python 2.7.9，在 Linux 及 Mac OS X 下测试通过
import socket
import StringIO
import sys
class WSGIServer(object):
    address_family = socket.AF_INET
    socket_type = socket.SOCK_STREAM
    request_queue_size = 1
    def __init__(self, server_address):
        ### 创建一个监听的套接字
        self.listen_socket = listen_socket = socket.socket(
            self.address_family,
            self.socket_type
        )
        ### 允许复用同一地址
        listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        ### 绑定地址
        listen_socket.bind(server_address)
        ### 激活套接字
        listen_socket.listen(self.request_queue_size)
        ### 获取主机的名称及端口
        host, port = self.listen_socket.getsockname()[:2]
        self.server_name = socket.getfqdn(host)
        self.server_port = port
        ### 返回由 Web 框架/应用设定的响应头部字段
        self.headers_set = []
    def set_app(self, application):
        self.application = application
    def serve_forever(self):
        listen_socket = self.listen_socket
        while True:
            ### 获取新的客户端连接
            self.client_connection, client_address = listen_socket.accept()
            ### 处理一条请求后关闭连接，然后循环等待另一个连接建立
            self.handle_one_request()
    def handle_one_request(self):
        self.request_data = request_data = self.client_connection.recv(1024)
        ### 以 'curl -v' 的风格输出格式化请求数据
        print(''.join(
            ' {line}\n'.format(line=line)
                for line in response.splitlines()
            ))
            self.client_connection.sendall(response)
        finally:
            self.client_connection.close()
SERVER_ADDRESS = (HOST, PORT) = '', 8888
def make_server(server_address, application):
    server = WSGIServer(server_address)
    server.set_app(application)
    return server
if __name__ == '__main__':
    if len(sys.argv) < 2:
        sys.exit('Provide a WSGI application object as module:callable')
    app_path = sys.argv[1]
    module, application = app_path.split(':')
    module = __import__(module)
    application = getattr(module, application)
    httpd = make_server(SERVER_ADDRESS, application)
    print('WSGIServer: Serving HTTP on port {port} ...\n'.format(port=PORT))
    httpd.serve_forever()
```
当然，这段代码要比第一部分的服务器代码长不少，但它仍然很短（只有不到 150 行），你可以轻松理解它，而不需要深究细节。上面的服务器代码还可以做更多——它可以用来运行一些你喜欢的框架写出的 Web 应用，可以是 Pyramid，Flask，Django 或其它 Python WSGI 框架。
不相信吗？自己来试试看吧。把以上的代码保存为 `webserver2.py`，或直接从 [Github](https://github.com/rspivak/lsbaws/blob/master/part2/webserver2.py) 上下载它。如果你打算不加任何参数而直接运行它，它会抱怨一句，然后退出。
```
$ python webserver2.py
Provide a WSGI application object as module:callable
```
它想做的其实是为你的 Web 应用服务，而这才是重头戏。为了运行这个服务器，你唯一需要的就是安装好 Python。不过，如果你希望运行 Pyramid，Flask 或 Django 应用，你还需要先安装那些框架。那我们把这三个都装上吧。我推荐的安装方式是通过 `virtualenv` 安装。按照以下几步来做，你就可以创建并激活一个虚拟环境，并在其中安装以上三个 Web 框架。
```
$ [sudo] pip install virtualenv
$ mkdir ~/envs
$ virtualenv ~/envs/lsbaws/
$ cd ~/envs/lsbaws/
$ ls
bin  include  lib
$ source bin/activate
(lsbaws) $ pip install pyramid
(lsbaws) $ pip install flask
(lsbaws) $ pip install django
```
现在，你需要创建一个 Web 应用。我们先从 Pyramid 开始吧。把以下代码保存为 `pyramidapp.py`，并与刚刚的 `webserver2.py` 放置在同一目录，或直接从 [Github](https://github.com/rspivak/lsbaws/blob/master/part2/pyramidapp.py) 下载该文件：
```
from pyramid.config import Configurator
from pyramid.response import Response
def hello_world(request):