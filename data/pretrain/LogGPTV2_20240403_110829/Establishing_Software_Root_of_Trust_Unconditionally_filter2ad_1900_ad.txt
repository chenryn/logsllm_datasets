1. Guess Hd,k,x(v). The adversary predicts Hd,k,x(v) inde-
$←− H and v; i.e., the prediction is a
pendent of nonce Hd,k,x
$←− H.
constant relative to the random choices made in Hd,k,x
Hence, the probability of adversary’s success in a one-time
evaluation within bounds (m, t) is 1
$←− H,
the adversary must execute a program which inputs at least one
$←− H, or a function
of the random choices y made by Hd,k,x
thereof; e.g., y ∈ {x, rj, 0 ≤ j  k, and from t = (6k − 4)6d to
ti = (6ki − 4)6di, di = |vi| − 1 > d, where |vi| is the
number of memory and special processor-register words. To
scale execution time ti for a constant ki (and hence mi), the
veriﬁer can increase di past constant |vi|−1 to whatever value
is required by transaction duration. In this case, indexing in vi
would require an additional mod |vi| instruction execution.
3) Concurrent-transaction order and duration: Let a sys-
tem comprise c devices with the smallest word size of w bits
and p  2w be a prime,
$←− Zq be the function index of family
|V | = q/2w, and a, b, c
Hw, where
Hw = {Ha,b,c(·) | wi ∈ [0, 2w), Ha,b,c(w|V |−1 . . . w0)
wi × ci) + b) mod q) mod 2w}
|V |−1(cid:80)
= ((a × (
i=0
is a family of almost universal hash functions, with collision
probability of 2−(w−1). The probability is computed over the
choices of Ha,b,c(·)
$←− Hw.
Theorem 8 (RoT Establishment). Let a veriﬁer estab-
lish a malware-free state of a c-device system in n proto-
col runs, as speciﬁed in Theorem 7. Then let the veriﬁer
load Hai,bi,ci (·)
$←− Hw on device i and check each result