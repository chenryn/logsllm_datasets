number of designated functions. These entry points, de-
termined by the contract creator, represent the API of the
contract. Once created, a contract executes autonomously;
it persists indeﬁnitely with even its creator unable to mod-
ify its code.2 Contract code executes in response to receipt
of a message from another contract or a transaction from
a non-contract (externally owned ) account, informally what
we call a wallet. Thus, contract execution is always initi-
ated by a transaction. Informally, a contract only executes
when “poked,” and poking progresses through a sequence of
entry points until no further message passing occurs (or a
shortfall in gas occurs, as explained below). The “poking”
model aside, as a simple abstraction, a smart contract may
be viewed as an autonomous agent on the blockchain.
Ethereum has its own associated cryptocurrency called
Ether. (At the time of writing, 1 Ether has a market value
of just under $15 U.S. [1].) To prevent DoS attacks, pre-
vent inadvertent inﬁnite looping within contracts, and gen-
erally control network resource expenditure, Ethereum al-
lows Ether-based purchase of a resource called gas to power
contracts. Every operation, including sending data, exe-
cuting computation, and storing data, has a ﬁxed gas cost.
Transactions include a parameter (GASLIMIT) specifying a
bound on the amount of gas expended by the computations
they initiate. When a function calls another function, it may
optionally specify a lower GASLIMIT for the child call which
expends gas from the same pool as the parent. Should a
function fail to complete due to a gas shortfall, it is aborted
and any state changes induced by the partial computation
are rolled back to their pre-call state; previous computations
on the call path, though, are retained and gas is still spent.
Along with a GASLIMIT, a transaction speciﬁes a GASPRICE,
the maximum amount in Ether that the transaction is will-
ing to pay per unit of gas. The transaction thus succeeds
only if the initiating account has a balance of GASLIMIT ×
2There is one exception: a special opcode suicide wipes
code from a contract account.
272GASPRICE Ether and GASPRICE is high enough to be accepted
by the system (miner).
As we discuss in Section 5.1, the management of gas is
critical to the availability of TC (and other Ethereum-based
services) in the face of malicious users.
Finally, we note that transactions in Ethereum are digi-
tally signed for a wallet using ECDSA on the curve Secp256k1
and the hash function SHA3-256.
3. ARCHITECTURE AND SECURITY MODEL
Town Crier includes three main components: The TC
Contract (CTC ), the Enclave (whose code is denoted by
progencl), and the Relay (R). The Enclave and Relay re-
side on the TC server, while the TC Contract resides on the
blockchain. We refer to a smart contract making use of the
Town Crier service as a requester or relying contract, which
we denote CU , and its (oﬀ-chain) owner as a client or user. A
data source, or source for short, is an online server (running
HTTPS) that provides data which TC draws on to compose
datagrams.
An architectural schematic of TC showing its interaction
with external entities is given in Figure 1.
Blockchain
TC Server
Data Source
TC Contract
CTC
RelayR
HTTPS
lots-o-
data.com
User Contract
CU
Enclave
(progencl)
Figure 1: Basic Town Crier architecture. Trusted
components are depicted in green.
The TC Contract CTC . The TC Contract is a smart
contract that acts as the blockchain front end for TC. It is
designed to present a simple API to a relying contract CU
for its requests to TC. CTC accepts datagram requests from
CU and returns corresponding datagrams from TC. Addi-
tionally, CTC manages TC’s monetary resources.
The Enclave. We refer to an instance of the TC code
running in an SGX enclave simply as the Enclave and de-
note the code itself by progencl. In TC, the Enclave ingests
and fulﬁlls datagram requests from the blockchain. To ob-
tain the data for inclusion in datagrams, it queries external
data sources, speciﬁcally HTTPS-enabled internet services.
It returns a datagram to a requesting contract CU as a dig-
itally signed blockchain message. Under our basic security
model for SGX, network functions aside, the Enclave runs
in complete isolation from an adversarial OS as well as other
process on the host.
The Relay R. As an SGX enclave process, the Enclave
lacks direct network access. Thus the Relay handles bidirec-
tional network traﬃc on behalf of the Enclave. Speciﬁcally,
the Relay provides network connectivity from the Enclave
to three diﬀerent types of entities:
1. The Blockchain (the Ethereum system): The Relay scrapes
the blockchain in order to monitor the state of CTC . In
this way, it performs implicit message passing from CTC
to the Enclave, as neither component itself has network
connectivity. Additionally, the Relay places messages
emitted from the Enclave (datagrams) on the blockchain.
2. Clients: The Relay runs a web server to handle oﬀ-chain
service requests from clients—speciﬁcally requests for En-
clave attestations. As we soon explain, an attestation
provides a unique public key for the Enclave instance to
the client and proves that the Enclave is executing cor-
rect code in an SGX enclave and that its clock is correct
in terms of absolute (wall-clock) time. A client that suc-
cessfully veriﬁes an attestation can then safely create a
relying contract CU that uses the TC.
3. Data sources: The Relay relays traﬃc between data sources
(HTTPS-enabled websites) and the Enclave.
The Relay is an ordinary user-space application. It does
not beneﬁt from integrity protection by SGX and thus, un-
like the Enclave, can be subverted by an adversarial OS on
the TC server to cause delays or failures. A key design aim of
TC, however, is that Relay should be unable to cause incor-
rect datagrams to be produced or users to lose fees paid to
TC for datagrams (although they may lose gas used to fuel
their requests). As we will show, in general the Relay can
only mount denial-of-service attacks against TC.
Security model. Here we give a brief overview of our secu-
rity model for TC, providing more details in later sections.
We assume the following:
• The TC Contract. CTC is globally visible on the blockchain
and its source code is published for clients. Thus we as-
sume that CTC behaves honestly.
• Data sources. We assume that clients trust the data sources
from which they obtain TC datagrams. We also assume
that these sources are stable, i.e., yield consistent data-
grams, during a requester’s speciﬁed time interval T . (Re-
quests are generally time-invariant, e.g., for a stock price
at a particular time.)
• Enclave security. We make three assumptions: (1) The
Enclave behaves honestly, i.e., progencl, whose source code
is published for clients, correctly executes the protocol;
(2) For an Enclave-generated keypair (skTC , pkTC ), the
private key skTC is known only to the Enclave; and (3)
The Enclave has an accurate (internal) real-time clock.
We explain below how we use SGX to achieve these prop-
erties.
• Blockchain communication. Transaction and message sources
are authenticable, i.e., a transaction m sent from wallet
WX (or message m from contract CX ) is identiﬁed by the
receiving account as originating from X. Transactions
and messages are integrity protected (as they are digitally
signed by the sender), but not conﬁdential.
• Network communication. The Relay (and other untrusted
components of the TC server) can tamper with or delay
communications to and from the Enclave. (As we explain
in our SGX security model, the Relay cannot otherwise
observe or alter the Enclave’s behavior.) Thus the Relay
is subsumed by an adversary that controls the network.
4. TC PROTOCOL OVERVIEW
We now outline the protocol of TC at a high level. The
basic structure is conceptually simple: a user contract CU
273requests a datagram from the TC Contract CTC , CTC for-
wards the request to the Enclave and then returns the re-
sponse to CU . There are many details, however, relating to
message contents and protection and the need to connect
the oﬀ-chain parts of TC with the blockchain.
First we give a brief overview of the protocol structure.
Then we enumerate the data ﬂows in TC. Finally, we present
the framework for modeling SGX as ideal functionalities in-
spired by the universal-composability (UC) framework.
4.1 Datagram Lifecycle
The lifecycle of a datagram may be brieﬂy summarized in
m2 =
(id, params)
m3 =
(id, params,
data)
TC Server
Enclave
(progencl)
(obtains data
from data source)
Blockchain
TC Contract
CTC
m1 =
(params,
callback)
m4 =
(data)
User Contract
CU
on the blockchain.
the following steps:
• Initiate request. CU sends a datagram request to CTC
• Monitor and relay. The Relay monitors CTC and relays
any incoming datagram request with parameters params
to the Enclave.
• Securely fetch feed. To process the request speciﬁed
in params, the Enclave contacts a data source via HTTPS
and obtains the requested datagram. It forwards the data-
gram via the Relay to CTC .
• Return datagram. CTC returns the datagram to CU .
We now make this data ﬂow more precise.
4.2 Data Flows
A datagram request by CU takes the form of a message
m1 = (params, callback) to CTC on the blockchain. params
speciﬁes the requested datagram, e.g., params := (url, spec, T ),
where url is the target data source, spec speciﬁes content of
a the datagram to be retrieved (e.g., a stock ticker at a
particular time), and T speciﬁes the delivery time for the
datagram (initiated by scraping of the data source). The
parameter callback in m1 indicates the entry point to which
the datagram is to be returned. While callback need not be
in CU , we assume it is for simplicity.
CTC generates a fresh unique id and forwards m2 = (id, params)
to the Enclave. In response it receives m3 = (id, params, data)
from the TC service, where data is the datagram (e.g., the
desired stock ticker price). CTC checks the consistency of
params on the request and response and, if they match, for-
wards data to the callback entry point in message m4.
For simplicity here, we assume that CU makes a one-time
datagram request. Thus it can trivially match m4 with m1.
Our full protocol contains an optimization by which CTC re-
turns id to CU after m1 as a consistent, trustworthy identiﬁer
for all data ﬂows. This enables straightforward handling of
multiple datagram requests from the same instance of CU .
Fig. 2 shows the data ﬂows involved in processing a data-
gram request. For simplicity, the ﬁgure omits the Relay,
which is only responsible for data passing.
Digital signatures are needed to authenticate messages,
such as m3, entering the blockchain from an external source.
We let (skTC , pkTC ) denote the private / public keypair as-
sociated with the Enclave for such message authentication.
For simplicity, Fig. 2 assumes that the Enclave can send
signed messages directly to CTC . We explain later how TC
uses a layer of indirection to sends m3 as a transaction via
an Ethereum wallet WTC .
Figure 2: Data ﬂows in datagram processing.
4.3 Use of SGX
Let progencl represent the code for Enclave, which we pre-
sume is trusted by all system participants. Our protocols in
TC rely on the ability of SGX to attest to execution of an
instance of progencl. To achieve this goal, we ﬁrst present
a model that abstracts away the details of SGX, helping to
simplify our protocol presentation and security proofs. We
also explain how we use the clock in SGX. Our discussion
draws on formalism for SGX from Shi et al. [34].
Formal model and notation. We adopt a formal abstrac-
tion of Intel SGX proposed by Shi et al. [34]. Following the
UC and GUC paradigms [15–17], Shi et al. propose to ab-
stract away the details of SGX implementation, and instead
view SGX as a third party trusted for both conﬁdentiality
and integrity. Speciﬁcally, we use a global UC functionality
Fsgx(Σsgx)[progencl,R] to denote (an instance of) an SGX
functionality parameterized by a (group) signature scheme
Σsgx. Here progencl denotes the SGX enclave program and
R the physical SGX host (which we assume for simplicity is
the same as that of the TC Relay). As described in Fig. 3,
upon initialization, Fsgx runs outp := progencl.Initialize()
and attests to the code of progencl as well as outp. Upon a
resume call with (id, params), Fsgx runs and outputs the re-
sult of progencl.Resume(id, params). Further formalism for
Fsgx is given in the appendix of the online version [39].
Fsgx[progencl,R]: abstraction for SGX
Hardcoded: sksgx
Assume: progencl has entry points Initialize and Resume
Initialize:
On receive (init) from R:
Let outp := progencl.Initalize()
// models EPID signature.
σatt := Σsgx.Sign(sksgx, (progencl, outp))
Output (outp, σatt)
Resume:
On receive (resume, id, params) from R:
Let outp := progencl.Resume(id, params)
Output outp
Figure 3: Formal abstraction for SGX execution
capturing a subset of SGX features suﬃcient for im-
plementation of TC.
274SGX Clock. As noted above, the trusted clock for SGX
provides only relative time with respect to a reference point.
To work around this, the Enclave is initialized with the
current wall-clock time provided by a trusted source (e.g.,
the Relay under a trust-on-ﬁrst-use model). In the current
implementation of TC, clients may, in real time, request
and verify a fresh timestamp—signed by the Enclave under
pkTC —via a web interface in the Relay. Thus, a client can
determine the absolute clock time of the Enclave to within
the round-trip time of its attestation request plus the at-
testation veriﬁcation time—hundreds of milliseconds in a
wide-area network. This high degree of accuracy is poten-
tially useful for some applications but only loose accuracy
is required for most. Ethereum targets a block interval of
12s and the clock serves in TC primarily to: (1) Schedule
connections to data sources and (2) To check TLS certiﬁ-
cates for expiration when establishing HTTPS connections.
For simplicity, we assume in our protocol speciﬁcations that
the Enclave clock provides accurate wall-clock time in the
canonical format of seconds since the Unix epoch January
1, 1970 00:00 UTC. Note that the trusted clock for SGX,
backed by Intel Manageability Engine [22], is resilient to
power outages and reboots [31].
We let clock() denote measurement of the SGX clock from
within the enclave, expressed as the current absolute (wall-
clock) time.
5. TWO KEY SECURITY PROPERTIES
Before presenting the TC protocol details, we discuss two
key security properties informing its design: gas sustainabil-
ity and TCB minimization in TC’s hybridized TCB model.
While we introduce them in this work, as we shall explain,
they are of broad and general applicability.
5.1 Gas Sustainability
As explained above, Ethereum’s fee model requires that
gas costs be paid by the user who initiates a transaction, in-
cluding all costs resulting from dependent calls. This means
that a service that initiates calls to Ethereum contracts must
spend money to execute those calls. Without careful design,
such services run the risk of malicious users (or protocol
bugs) draining ﬁnancial resources by triggering blockchain
calls for which the service’s fees will not be reimbursed. This
could cause ﬁnancial depletion and result in an application-
layer denial-of-service attack. It is thus critical for the avail-
ability of Ethereum-based services that they always be re-
imbursed for blockchain computation they initiate.
To ensure that a service is not vulnerable to such attacks,
we deﬁne gas sustainability, a new condition necessary for
the liveness of blockchain contract-based services. Gas sus-
tainability is a basic requirement for any self-perpetuating
Ethereum service. It can also generalize beyond Ethereum;