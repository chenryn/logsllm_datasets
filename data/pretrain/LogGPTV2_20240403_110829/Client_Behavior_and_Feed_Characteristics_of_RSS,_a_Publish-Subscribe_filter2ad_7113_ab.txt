are rare; they count for only 0.2% in total, and therefore
are not shown in the ﬁgure.
Feed Size
RSS feeds typically consist of Web content encapsulated in
XML format. Therefore, we expect the majority of RSS
feeds to have size close to most Web objects. This is con-
ﬁrmed by Figure 4, which plots the distribution of feed
size. The feed size is calculated as the average of all the
snapshots of the feed; the variance is very small for the
feed snapshots. More than 80% of the RSS feeds are rel-
atively small at less than 10KB. The minimum observed
feed size is 356 bytes, median is 5.8KB, and the average is
10KB. While, 99.9% of feeds are smaller than 100KB, the
feed size distribution is heavy tailed with the largest feed at
876,836 bytes (not shown in the graph).
Extremely large RSS feeds, however, are rare, unlike
some Web objects that can be of several megabytes or
more. The concise nature of RSS feeds is expected because
RSS is meant for the quick dissemination of news updates,
often only carrying links to the more elaborate news ar-
ticles. Moreover, the current architecture of RSS, where
clients need to fetch the whole feed for checking updates,
poses a high bandwidth load on content servers. This dis-
courages content providers from supporting large feeds and
biases towards small feed sizes.
40
30
50
Update Interval (Hours)
60
70
80
Figure 5: Distribution of First Update Intervals: 55% of feeds get
updated in an hour.
4.2 Update Characteristics
Updates are the main driving force of the RSS pub-sub sys-
tem. We examine the nature of RSS updates using the series
of hourly snapshots gathered through active polling. We
ensure that missing snapshots do not affect the calculations
of update interval by only counting the intervals between
valid updates; an update is valid only if there is a valid
snapshot preceding the update, and that preceding snap-
shot matches the last recorded update. In order to calcu-
late the update characteristics accurately, we ﬁltered out all
the feeds that have less than thirty snapshots leaving 68,266
feeds.
Update Rate
Figure 5 shows the distribution of update intervals of the
ﬁrst valid update. We see that feed update rates fall in
two extremes: they either update very frequently or very
rarely. More than 55% of feeds are updated in the ﬁrst
hour, while 25% of feeds did not see any updates during the
entire polling period. This result suggests that RSS read-
ers should use different polling periods for different feeds.
However, some RSS readers, e.g., Thunderbird 1.0, do not
support this feature currently.
Figure 6 shows the average update interval of RSS feeds,
calculated by averaging the valid update intervals measured
for each feed. We see that over 57% of the RSS feeds have
an average update interval under two hours. Since we gath-
ered snapshots by the hour, our data do not show updates
that happen within an hour. Nevertheless, we ﬁnd that RSS
feeds often change at a rapid rate and RSS readers need to
poll aggressively in order to detect updates quickly.
Update Size
We quantify update sizes using the minimum edit dis-
tance (“diff”) between two consecutive snapshots. Figure 7
shows the cumulative distribution of update sizes. 64% of
all updates involve no more than two lines of changes. The
average change in the number of lines is 16.7 (6.8% of feed
size) and the maximum is 16,542. The feed that changes
most is hosted by a weather service website that provides
weather forecast for many areas.
32
Internet Measurement Conference 2005
USENIX Association
)
%
(
F
D
C
100
80
60
40
20
0
0
0.45
0.4
0.35
0.3
0.25
0.2
0.15
0.1
0.05
)
r
H
e
/
t
a
d
p
U
(
e
t
a
R
e
t
a
d
p
U
10
20
30
40
50
60
70
80
0
0
20
Figure 8: Correlation Between Feed Size and Update Rate: There
is no noticeable correlation between feed size and update rate.
40
60
Feed Size (KBs)
80
100
Average Update Time (Hours)
Figure 6: Average Update Time: 57% of feeds have average update
interval of less than two hours, while 25% of feeds do not change for
more than three days.
)
%
(
F
D
C
100
80
60
40
20
0
0
50
100
150
200
Figure 7: Number of Changed Lines in Updates: 64% of updates
involve no more than two lines of change.
Update Size (Lines)
The major criticism against RSS has centered around its
scalability. The constant polling by clients poses a signiﬁ-
cant bandwidth challenge on RSS servers. There have been
many proposals for reducing the bandwidth consumption.
For instance, RSS 2.0 supports the TTL, SkipDays, and
SkipHours tags to advise the clients to choose an optimal
polling rate and to skip periods when no updates are avail-
able, such as weekends. But a better solution is to send
clients only the “delta,” that is, the portion of data that ac-
tually changes. Our measurement shows that the feed up-
dates only 6.8% of its content on average, which suggests
that this optimization can reduce bandwidth consumption
by as much as 93.2%.
Correlations between Feed Size and Updates
We explore the correlation between feed size and update
rates and sizes. Figure 8 shows the average number of up-
dates as a function of feed size. Though the data indicates
some peaks, there is no strong correlation between size and
update rate. We suspect that the peaks are due to commonly
used, frequently changing XML objects clustered around
certain sizes. However, there is a correlation between feed
size and update size, as can be seen in Figure 9. For most
feeds, the average update size grows as feed size increases.
For feeds smaller than 68KB (about 99% of the total), the
correlation coefﬁcient is 0.89. The curve becomes irregular
80
70
60
50
40
30
20
10
)
s
e
n
L
(
i
i
e
z
S
e
t
a
d
p
U
0
0
20
40
60
Feed Size (KBs)
80
100
Figure 9: Correlation between Feed Size and Update Size: The
amount of change during an update increases with the feed size.
after feed size increases more than 68KB due to the small
number of samples available.
4.3 Client Behavior
Finally, we analyze how clients use the RSS system from
the user activity trace we collected.
Polling Frequency
We divide the clients into two categories, namely auto and
manual, according to their polling behavior. Auto clients
poll feeds at a ﬁxed rate, usually by running RSS readers in
the background, while manual clients use RSS in the same
way as they browse the Web, that is, launch RSS readers
when they really want to read the news, and close the pro-
gram after reading it. We consider clients who poll a feed
for less than 3 times a day or with irregular polling inter-
vals as manual clients. We ﬁnd that 36% of clients in our
department fall in this category. For auto clients, who poll
at periodic intervals, we show the polling rate in Figure 10.
58% of them poll feeds hourly, suggesting that most users
are “lazy”, and do not change the default setting of their
RSS readers. A small number of aggressive clients poll as
often as every ten minutes.
Number of Subscriptions
Figure 11 shows the number of feeds subscribed by each
client in sorted order. This distribution also follows a Zipf
distribution with α parameter around 1.13. While most
USENIX Association
Internet Measurement Conference 2005  
33
6
5
7
Poll Interval (10min)
10
18
)
%
(
t
n
e
c
r
e
P
60
50
40
30
20
10
0
1
3
4
Figure 10: Polling Rate of Clients: About 58% of clients use the
default setting of one hour as the polling period.
1000
100
10
s
n
o
i
t
p
i
r
c
s
b
u
S
f
o
r
e
b
m
u
N
α=1.13
1
1
10
100
1000
Figure 11: Number of Subscriptions made by Clients: The number
of channels subscribed by clients follows a Zipf distribution.
Client Rank
clients subscribe to less than ﬁve feeds, there are several
clients that subscribe to more than 100 feeds.
5 Discussions and Conclusions
This paper presents a measurement study of RSS, a pub-
sub system for disseminating Web micronews. It provides
insights about how a pub-sub system is utilized in practice
and what issues need to be addressed while designing pub-
sub systems.
The main focus of our study is to analyze how feeds are
updated, a fundamental aspect of pub-sub systems. This
study shows that update rates of RSS feeds are distributed
in extremes; a majority of feeds (55%) update every hour,
while many feeds (25%) do not change for days together.
Hence, signiﬁcant bandwidth savings can be obtained by
using the optimal polling period for each feed instead of
a single common polling rate for all feeds. End users of
RSS, however, cannot be relied on to set the optimal polling
rate, as this study shows that clients predominantly do not
change the default settings of RSS readers. A better solu-
tion is for content providers to indicate when and at what
rate to poll a particular feed. The version 2.0 of RSS al-
ready provides support for customized polling, although
many readers are yet to support this feature.
Much of the bandwidth in RSS goes towards refetching
feeds in order to check for updates because the current RSS
architecture does not employ asynchronous notiﬁcations.
This study indicates that delta encoding is a major opportu-
nity for improving bandwidth usage in RSS, as updates are
often made only to a tiny portion of the content (about 7%
of the feed on average). Moreover, clients subscribed to
the same feed poll the content servers independently, im-
posing a high load on the servers of popular feeds. Re-
cently proposed systems [11, 10] use peer-to-peer overlays
for cooperative polling to alleviate load on the servers and
to provide faster updates. Such systems capable of asyn-
chronous update notiﬁcations seem to be a step in the right
direction.
Overall, this is the ﬁrst study of a widely deployed pub-
sub system performed during the early days of RSS. We
hope this study will help to understand, design, and evalu-
ate future pub-sub systems, and more studies with greater
depth will emerge as the popularity of RSS increases.
References
[1] Air Force Research Laboratory (AFRL/IF) JBI Team. Joint Bat-
tlespace Infosphere. http://www.rl.af.mil/programs/jbi/, 2005.
[2] Atom
Enabled.
Atom
Syndication
Format.
http://www.atomenabled.org/developers/syndication.
[3] L. Breslau, P. Cao, L. Fan, G. Phillips, and S. Shenker. Web Caching
and Zipf-like Distributions: Evidence and Implications. In Proc. of
IEEE International Conference on Computer Communications, New
York, NY, Mar. 1999.
[4] L. F. Cabrera, M. B. Jones, and M. Theimer. Herald: Achieving a
Global Event Notiﬁcation Service. In Proc. of the Workshop on Hot
Topics in Operating Systems, Elmau, Germany, May 2001.
[5] N. Carriero and D. Gelernter. Linda in Context. Communications of
the ACM, 32(4):444–458, Apr. 1989.
[6] A. Carzaniga, D. S. Rosenblum, and A. L. Wolf. Design and Evalu-
ation of a Wide-Area Event Notiﬁcation Service. ACM Transactions
on Computer Systems, 19(3):332–383, Aug. 2001.
[7] F. Douglis, A. Feldman, B. Krishnamurthy, and J. Mogul. Rate of
Change and Other Metrics: a Live Study of the World Wide Web. In
Proc. of USENIX Symposium on Internet Technologies and Systems,
Monterey, CA, Dec. 1997.
[8] B. Glade, R. Cooper, R. van Renesse, and K. Birman. Light-Weight
Process Groups in the ISIS System. Distributed Systems Engineer-
ing, 1(1):29–36, Sept. 1993.
[9] IBM.
TSpaces - Computer Science Research at Almaden.
http://www.almaden.ibm.com/cs/TSpaces/.
[10] V. Ramasubramanian, R. N. Murthy, and E. G. Sirer. Corona: A
High Performance Publish-Subscribe System for Web Micronews.
http://www.cs.cornell.edu/people/egs/beehive/corona.
[11] D. Sandler, A. Mislove, A. Post, and P. Druschel. FeedTree: Sharing
Web Micronews with Peer-to-Peer Event Notiﬁcation.
In Proc. of
International Workshop on Peer-to-Peer Systems, Ithaca, NY, Mar.
2005.
[12] R. Strom, G. Banavar, T. Chandra, M. Kaplan, K. Miller, B. Mukher-
jee, D. Sturman, and M. Ward. Gryphon: An Information Flow
Based Approach to Message Brokering.
In Proc. of International
Symposium on Software Reliability Engineering, Paderborn, Ger-
many, Nov. 1998.
[13] TIBCO.
TIBCO
Publish-Subscribe.
http://www.tibco.com/software/.
[14] UserLand.
RSS
2.0
Speciﬁcations.
http://blogs.law.harvard.edu/tech/rss, 2005.
[15] R. van Renesse, K. Birman, and W. Vogels. Astrolabe: A Robust and
Scalable Technology for Distributed System Monitoring, Manage-
ment, and Data Mining. ACM Transactions on Computer Systems,
21(2):164–206, May 2003.
34
Internet Measurement Conference 2005
USENIX Association