OracletoPostgreSQL
SQLSyntax
InformixtoPostgreSQL
StoredFunctionsand/orProcedures
MySQLtoPostgreSQL
ClientLibraries
MSSQLtoPostgreSQL
Encodings
Replicationand/orHighAvailability
Tools
Discussion
Morework
Things That Won’t Work Directly
CONNECT BY Try contrib/tablefunc or WITH RECURSIVE.
Materialized views Write your own wrapper.
Snapshots Write your own wrapper.
Database links Use contrib/dblink plus views or FDW.
Autonomous transactions Try dblink.
Synonyms Try views or wrapper or schema path.
Partitioning Write your own system.
JoeConway,MichaelMeskes PostgresOpen2011
DataTypes
Overview
DatabaseObjectTypes
OracletoPostgreSQL
SQLSyntax
InformixtoPostgreSQL
StoredFunctionsand/orProcedures
MySQLtoPostgreSQL
ClientLibraries
MSSQLtoPostgreSQL
Encodings
Replicationand/orHighAvailability
Tools
Discussion
Morework
Coincidence?
If you need help:
Oracle Ask Tom: http://asktom.oracle.com/
PostgreSQL Ask Tom: PI:EMAIL
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Datatype Mapping - Numeric Types
Numeric Datatypes in Informix are mostly compatible with
PostgreSQL datatypes
SERIAL present in PostgreSQL with different syntax
SMALLINT
INTEGER
FLOAT
SMALLFLOAT ⇒ REAL or FLOAT4
DECIMAL(p, s) ⇒ NUMERIC(p, s)
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Character datatypes
CHAR(n), NCHAR(n) ⇒ CHAR(n), CHARACTER(n)
VARCHAR(n,r), NVARCHAR(n,r), CHARACTER VARYING(n,r)
⇒ VARCHAR(n)
Variables length types can be larger than 255 bytes in
PostgreSQL
No minimal length specifier r in PostgreSQL
TEXT must be handled carefully: Informix allows arbitrary
encoded literals in such columns ⇒ encoding issues
LVARCHAR ⇒ TEXT or VARCHAR
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Binary datatypes
BYTE, BLOB, CBLOB ⇒ BYTEA
Handling different: PostgreSQL allows direct access to bytea
columns
Different output formats: bytea output
TEXT ⇒ BYTEA or TEXT
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Binary datatypes - Hints
1 Binary datatypes should be matched to BYTEA
2 Textual datatypes like TEXT must be carefully evaluated: they
might contain different encodings, which can’t be used with
PostgreSQL’s TEXT datatype
3 Handling of BYTEA is much easier in PostgreSQL
4 The old LOB interface in PostgreSQL should only be used
when values larger than one GByte must be stored.
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Complex datatypes
SET ⇒ array type, issues remain (e.g. uniqueness of
elements aren’t checked in PostgreSQL arrays)
Same with MULTISET, but it also allows duplicate entries in
Informix
LIST ⇒ ENUM or array type
ROW ⇒ composite types in PostgreSQL (CREATE TYPE)
No datatype inheritance in PostgreSQL (CREATE
TYPE...UNDER())
Generally, migrating such types require deep investigation how they
are used and implemented in the application.
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
User Defined Functions - SPL
SPL should be migrated to PL/PgSQL
Named Parameters and default parameters are supported
since PostgreSQL 9.0
Syntax differences in declarations, conditional statements
PROCEDURES with CALL have a different notion in PostgreSQL
Parameter declaration DEFINE must be moved into DECLARE
section.
LET variable assignments are done with :=.
Migrating cursor usage within a FOREACH statement
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Client Libraries
4GL ⇒ Aubit (http://aubit4gl.sourceforge.net)
ODBC (cid:88)
JDBC (cid:88)
ESQL/C ⇒ use ECPG
Lot of additions for compatibility.
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
ECPG
Mostly works out of the box
Compatibility modes: INFORMIX, INFORMIX SE
Parser
Runtime behaviour
Compatibility library
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Parser
EXEC SQL ⇒ $
EXEC SQL IFDEF|IFNDEF|ELSE|ELIF|ENDIF
EXEC SQL VAR
EXEC SQL TYPE
EXEC SQL CLOSE database
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Runtime
NULL handling: risnull(), rsetnull()
SQLDA handling
Data conversion
Error codes
Decimal type
JoeConway,MichaelMeskes PostgresOpen2011
Overview
OracletoPostgreSQL
InformixtoPostgreSQL DataTypes
MySQLtoPostgreSQL StoredFunctionsand/orProcedures
MSSQLtoPostgreSQL ClientLibraries
Replicationand/orHighAvailability
Discussion
Compatibility Library
ESQL/C Function Library ⇒ PGTypeslib
Decimal: decadd(), ...
Date: rdayofweek(), ...
Datetime: dtcurrent(), ...
Interval: intoasc(), ...
Misc: rupshift(), ...
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Resources
PostgreSQL Wiki:
http://wiki.postgresql.org/wiki/Converting_from_other_Databases_to_PostgreSQL#MySQL
mysqldump --compatible=postgresql
⇒ Equivalent to PIPES AS CONCAT, ANSI QUOTES,
IGNORE SPACE, NO KEY OPTIONS,
NO TABLE OPTIONS, NO FIELD OPTIONS
http://dev.mysql.com/doc/refman/5.1/en/server-sql-mode.html
MySQL built-in-function equivalents
http://okbob.blogspot.com/2009/08/mysql-functions-for-postgresql.html
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Cautions
Even when syntax matches, semantics can be different
MySQL behavior of out-of-range/overflow/bad values with
strict mode off
Semantics of familiar operators, e.g.
SELECT 10^3; --> 9 : In MySQL
SELECT 10^3; --> 1000 : In Postgres
SELECT ’1’ || ’0’; --> 1 : In MySQL
SELECT ’1’ || ’0’; --> ’10’: In Postgres
Therefore – test, test, test, ...
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
General
Too many combinations/types to cover exhaustively
Data type aliases make this worse
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Integers
MySQL: 1, 2, 3, 4, 8 byte signed/unsigned integers
⇒ TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT
MySQL: supports attributes display width and ZEROFILL
⇒ INT(4) ZEROFILL column would display 42 as 0042
Postgres: 2, 4, 8 byte signed integers, 1 byte ”char”
⇒ SMALLINT, INTEGER, BIGINT, ”char”
BIGINT UNSIGNED ⇒ NUMERIC or DOUBLE PRECISION
INT UNSIGNED and BIGINT ⇒ BIGINT
Everything else ⇒ INT
2 byte intergers and ”char” usually don’t save space
(alignment)
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Floating Point Numbers
MySQL: 4, 8 byte, signed/unsigned floating point types
⇒ FLOAT, DOUBLE
MySQL: supports attributes precision and scale
⇒ FLOAT(5,3) column would round 99.0009 as 99.001
Postgres: 4 and 8 byte signed floating point types
⇒ REAL, DOUBLE PRECISION
FLOAT ⇒ REAL
DOUBLE ⇒ DOUBLE PRECISION
MySQL UNSIGNED max value is same as signed
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Arbitrary Precision Numbers
MySQL: NUMERIC, DECIMAL
MySQL: supports attributes precision and scale
⇒ NUMERIC(5,3) column would round 99.0009 as 99.001
Postgres: NUMERIC
Postgres: supports attributes precision and scale
⇒ NUMERIC(5,3) column would round 99.0009 as 99.001
NUMERIC, DECIMAL ⇒ NUMERIC
PostgreSQL precision greater than MySQL so not
out-of-range concern
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Character
MySQL: CHAR, VARCHAR, TINYTEXT, TEXT,
MEDIUMTEXT, LONGTEXT
⇒ each has different max length
Postgres: CHAR, VARCHAR, TEXT
⇒ all have the same max length
CHAR, VARCHAR, TEXT ⇒ CHAR, VARCHAR, TEXT
LONGTEXT can exceed maximum length allowed in
PostgreSQL
MySQL TEXT types have index/sorting differences from
Postgres
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Date/Time
MySQL: DATETIME, DATE, TIMESTAMP, TIME, YEAR
Postgres: DATE, TIMESTAMP and TIME
(WITH/WITHOUT TIME ZONE), INTERVAL
DATETIME, TIMESTAMP ⇒ TIMESTAMP
DATE ⇒ DATE
TIME ⇒ TIME, INTERVAL
YEAR ⇒ no direct match
Generally Postgres types have more range
strict mode off/ALLOW INVALID DATES, expect errors
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
DATABASE
MySQL DATABASE similar to Postgres SCHEMA
If joining data across databases, Postgres SCHEMA best
choice
But be careful security differences in multi-tenant situations
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
USER, GRANT
MySQL USER similar to Postgres
Postgres GROUP/ROLE provide additional capability
Wildcard GRANTs ⇒ PL/pgSQL function
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
TABLE, VIEW, INDEX
Basic syntax OK
AUTO INCREMENT ⇒ SERIAL
Watch semantics of options
Devil is in the details
http://dev.mysql.com/doc/refman/5.1/en/create-table.html
http://dev.mysql.com/doc/refman/5.1/en/create-view.html
http://dev.mysql.com/doc/refman/5.1/en/create-index.html
http://www.postgresql.org/docs/9.0/interactive/sql-createtable.html
http://www.postgresql.org/docs/9.0/interactive/sql-createview.html
http://www.postgresql.org/docs/9.0/interactive/sql-createindex.html
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
EVENT
No PostgreSQL equivalent
Use cron
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
SERVER
FDW support expanded with PostgreSQL 9.1
MySQL and many others quickly becoming available
http://wiki.postgresql.org/wiki/Foreign_data_wrappers
Not sure about compatibility yet ...
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
TRIGGER
MySQL trigger contains executed SQL
PostgreSQL trigger refers to function
Otherwise basic syntax similar
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
General
Comments: # ⇒ -- or /* */
Literal Quoting: ’ or " ⇒ ’ or $$
String Comparison: case-insensitive ⇒ case-sensitive
Identifier Quoting: ‘ (backtick) ⇒ "
Identifier Comparison: case-insensitive ⇒ case-sensitive
http://en.wikibooks.org/wiki/Converting_MySQL_to_PostgreSQL
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
String Comparison
MySQL:
SELECT "a" = "A" AS t;
+---+
| t |
+---+
| 1 |
+---+
1 row in set (0.03 sec)
PostgreSQL:
SELECT ’a’ = ’A’ AS f, lower(’a’) = lower(’A’) as t;
f | t
---+---
f | t
(1 row)
-- also consider citext
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Identifier Comparison
MySQL:
CREATE TABLE Foo (id integer);
Query OK, 0 rows affected (0.13 sec)
CREATE TABLE foo (id integer);
Query OK, 0 rows affected (0.15 sec)
PostgreSQL:
CREATE TABLE Foo (id integer);
CREATE TABLE
CREATE TABLE foo (id integer);
ERROR: relation "foo" already exists
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes
MySQLtoPostgreSQL SQLSyntax
MSSQLtoPostgreSQL StoredFunctionsand/orProcedures
Replicationand/orHighAvailability ClientLibraries
Discussion Encodings
Example: Tables with Triggers
MySQL:
CREATE TABLE test1(a1 INT);
CREATE TABLE test2(a2 INT);
CREATE TABLE test3(a3 INT NOT NULL AUTO_INCREMENT PRIMARY KEY);
CREATE TABLE test4(
a4 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
b4 INT DEFAULT 0
);
PostgreSQL:
CREATE TABLE test1(a1 INT);
CREATE TABLE test2(a2 INT);
CREATE TABLE test3(a3 SERIAL PRIMARY KEY);
CREATE TABLE test4(
a4 SERIAL PRIMARY KEY,
b4 INT DEFAULT 0
);
FromMySQLmanual:http://dev.mysql.com/doc/refman/5.1/en/create-trigger.html
JoeConway,MichaelMeskes PostgresOpen2011
Overview General
OracletoPostgreSQL DataTypes
InformixtoPostgreSQL DatabaseObjectTypes