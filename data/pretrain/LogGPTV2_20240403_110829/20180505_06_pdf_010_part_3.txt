# Migrating Databases to PostgreSQL

## Overview
This document provides a comprehensive guide for migrating various database systems to PostgreSQL, including Oracle, Informix, MySQL, and MSSQL. It covers data types, SQL syntax, stored functions and procedures, client libraries, encodings, replication, high availability, and other key aspects.

## Data Type Mapping

### Numeric Types
- **Informix to PostgreSQL:**
  - `SERIAL` is present in PostgreSQL but with different syntax.
  - `SMALLINT`, `INTEGER`, `FLOAT` are directly compatible.
  - `SMALLFLOAT` in Informix maps to `REAL` or `FLOAT4` in PostgreSQL.
  - `DECIMAL(p, s)` in Informix maps to `NUMERIC(p, s)` in PostgreSQL.

### Character Datatypes
- **Informix to PostgreSQL:**
  - `CHAR(n)`, `NCHAR(n)` map to `CHAR(n)`, `CHARACTER(n)`.
  - `VARCHAR(n, r)`, `NVARCHAR(n, r)`, `CHARACTER VARYING(n, r)` map to `VARCHAR(n)`.
  - Variables length types can be larger than 255 bytes in PostgreSQL.
  - There is no minimal length specifier `r` in PostgreSQL.
  - `TEXT` must be handled carefully due to encoding issues.
  - `LVARCHAR` maps to `TEXT` or `VARCHAR`.

### Binary Datatypes
- **Informix to PostgreSQL:**
  - `BYTE`, `BLOB`, `CBLOB` map to `BYTEA`.
  - PostgreSQL allows direct access to `bytea` columns.
  - `TEXT` should be carefully evaluated and may map to `BYTEA` or `TEXT`.

### Complex Datatypes
- **Informix to PostgreSQL:**
  - `SET` can be mapped to an array type, but uniqueness of elements is not checked in PostgreSQL arrays.
  - `MULTISET` also allows duplicate entries in Informix.
  - `LIST` can be mapped to `ENUM` or an array type.
  - `ROW` maps to composite types in PostgreSQL (`CREATE TYPE`).
  - No datatype inheritance in PostgreSQL (`CREATE TYPE...UNDER()`).

## User Defined Functions - SPL
- **Informix to PostgreSQL:**
  - SPL should be migrated to PL/PgSQL.
  - Named parameters and default parameters are supported since PostgreSQL 9.0.
  - Syntax differences in declarations and conditional statements.
  - `PROCEDURES` with `CALL` have a different notion in PostgreSQL.
  - Parameter declaration `DEFINE` must be moved into the `DECLARE` section.
  - Variable assignments use `:=`.
  - Migrating cursor usage within a `FOREACH` statement.

## Client Libraries
- **Informix to PostgreSQL:**
  - 4GL: Aubit (http://aubit4gl.sourceforge.net)
  - ODBC: Supported
  - JDBC: Supported
  - ESQL/C: Use ECPG
  - Many additions for compatibility.

### ECPG
- **Informix to PostgreSQL:**
  - Mostly works out of the box.
  - Compatibility modes: INFORMIX, INFORMIX SE.
  - Parser and runtime behavior adjustments.
  - Compatibility library (ESQL/C Function Library ⇒ PGTypeslib).

## General Considerations
- **Syntax and Semantics:**
  - Even when syntax matches, semantics can differ.
  - Test, test, test!

### Integers
- **MySQL to PostgreSQL:**
  - MySQL supports 1, 2, 3, 4, 8 byte signed/unsigned integers.
  - Postgres supports 2, 4, 8 byte signed integers, and 1 byte "char".
  - `BIGINT UNSIGNED` maps to `NUMERIC` or `DOUBLE PRECISION`.
  - `INT UNSIGNED` and `BIGINT` map to `BIGINT`.
  - Everything else maps to `INT`.

### Floating Point Numbers
- **MySQL to PostgreSQL:**
  - MySQL supports 4, 8 byte, signed/unsigned floating point types.
  - Postgres supports 4 and 8 byte signed floating point types.
  - `FLOAT` maps to `REAL`.
  - `DOUBLE` maps to `DOUBLE PRECISION`.

### Arbitrary Precision Numbers
- **MySQL to PostgreSQL:**
  - `NUMERIC`, `DECIMAL` in MySQL map to `NUMERIC` in PostgreSQL.
  - Both support attributes precision and scale.

### Character
- **MySQL to PostgreSQL:**
  - `CHAR`, `VARCHAR`, `TINYTEXT`, `TEXT`, `MEDIUMTEXT`, `LONGTEXT` in MySQL map to `CHAR`, `VARCHAR`, `TEXT` in PostgreSQL.
  - `LONGTEXT` can exceed the maximum length allowed in PostgreSQL.
  - MySQL `TEXT` types have index/sorting differences from PostgreSQL.

### Date/Time
- **MySQL to PostgreSQL:**
  - `DATETIME`, `TIMESTAMP` map to `TIMESTAMP`.
  - `DATE` maps to `DATE`.
  - `TIME` maps to `TIME` or `INTERVAL`.
  - `YEAR` has no direct match in PostgreSQL.

### Database and Schema
- **MySQL to PostgreSQL:**
  - `DATABASE` in MySQL is similar to `SCHEMA` in PostgreSQL.
  - Be careful with security differences in multi-tenant situations.

### User and Grant
- **MySQL to PostgreSQL:**
  - `USER` in MySQL is similar to `USER` in PostgreSQL.
  - Postgres `GROUP`/`ROLE` provide additional capabilities.
  - Wildcard `GRANT`s can be handled with PL/pgSQL functions.

### Table, View, Index
- **MySQL to PostgreSQL:**
  - Basic syntax is generally OK.
  - `AUTO_INCREMENT` maps to `SERIAL`.
  - Watch for differences in options and details.

### Event
- **MySQL to PostgreSQL:**
  - No equivalent in PostgreSQL; use `cron`.

### Server
- **MySQL to PostgreSQL:**
  - FDW support expanded with PostgreSQL 9.1.
  - MySQL and many others are quickly becoming available.
  - Check compatibility on the PostgreSQL Wiki.

### Trigger
- **MySQL to PostgreSQL:**
  - MySQL triggers contain executed SQL, while PostgreSQL triggers refer to functions.
  - Basic syntax is similar.

### General
- **Comments:**
  - `#` in MySQL maps to `--` or `/* */` in PostgreSQL.
- **Literal Quoting:**
  - `'` or `"` in MySQL maps to `'` or `$$` in PostgreSQL.
- **String Comparison:**
  - Case-insensitive in MySQL maps to case-sensitive in PostgreSQL.
- **Identifier Quoting:**
  - Backtick `‘` in MySQL maps to double quotes `"` in PostgreSQL.
- **Identifier Comparison:**
  - Case-insensitive in MySQL maps to case-sensitive in PostgreSQL.

## Example: Tables with Triggers
- **MySQL:**
  ```sql
  CREATE TABLE test1(a1 INT);
  CREATE TABLE test2(a2 INT);
  CREATE TABLE test3(a3 INT NOT NULL AUTO_INCREMENT PRIMARY KEY);
  CREATE TABLE test4(
    a4 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    b4 INT DEFAULT 0
  );
  ```

- **PostgreSQL:**
  ```sql
  CREATE TABLE test1(a1 INT);
  CREATE TABLE test2(a2 INT);
  CREATE TABLE test3(a3 SERIAL PRIMARY KEY);
  CREATE TABLE test4(
    a4 SERIAL PRIMARY KEY,
    b4 INT DEFAULT 0
  );
  ```

## Resources
- PostgreSQL Wiki: [Converting from other Databases to PostgreSQL](http://wiki.postgresql.org/wiki/Converting_from_other_Databases_to_PostgreSQL#MySQL)
- MySQL Documentation: [Server SQL Mode](http://dev.mysql.com/doc/refman/5.1/en/server-sql-mode.html)
- MySQL Built-in Function Equivalents: [MySQL Functions for PostgreSQL](http://okbob.blogspot.com/2009/08/mysql-functions-for-postgresql.html)

**Presented by Joe Conway and Michael Meskes at PostgresOpen 2011.**