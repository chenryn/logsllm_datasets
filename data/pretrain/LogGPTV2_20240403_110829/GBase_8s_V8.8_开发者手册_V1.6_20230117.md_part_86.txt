employer.epno=18;
raiseinfo'employername:%,epno:%',employer.name,employer.epno;
--将一个record类型的变量赋值给另一个变量。employer1:=employer;
raiseinfo'employer1name:%,epno:%',employer1.name,employer1.epno;
南大通用数据技术股份有限公司
638
GBase 8s V8.8开发者手册
--将一个record类型变量赋值为NULL。employer1:=NULL;
raiseinfo'employer1name:%,epno:%',employer1.name,employer1.epno;
--获取record变量的默认值。
raiseinfo'employer2name:%,epno:%',employer2.name,employer2.epno;
--在for循环中使用record变量
foremployerinselectename,empnofromemp_recorderby1limit1loop
raiseinfo'employername:%,epno:%',employer.name,employer.epno;endloop;
--在selectinto 中使用record变量。
selectename,empno intoemployer2fromemp_recorderby1limit1; raiseinfo
'employername:%,epno:%',employer2.name,employer2.epno;
--在cursor中使用record变量。OPENC1;
FETCHC1INTOemployer2;
raiseinfo'employername:%,epno:%',employer2.name,employer2.epno;CLOSEC1;
RETURNemployer.name;END;
$$
LANGUAGEplpgsql;
--调用该函数。
gbase=#CALLregress_record('abc');
--删除函数。
gbase=#DROPFUNCTIONregress_record;
17.5声明语法
17.5.1 基本结构
17.5.1.1 结构
PL/SQL块中可以包含子块，子块可以位于PL/SQL中任何部分。PL/SQL块的结构如下：
 声明部分：声明PL/SQL用到的变量、类型、游标、局部的存储过程和函数。
DECLARE
南大通用数据技术股份有限公司
639
GBase 8s V8.8开发者手册
 不涉及变量声明时声明部分可以没有。
 对匿名块来说，没有变量声明部分时，可以省去DECLARE关键字。
 对存储过程来说，没有DECLARE， AS相当于DECLARE。即便没有变量声明的
部分，关键字AS也必须保留。
 执行部分：过程及SQL语句，程序的主要部分。必选。
BEGIN
 执行异常部分：错误处理。可选。
EXCEPTION
 结束
END;
/
 禁止在PL/SQL块中使用连续的Tab，连续的Tab可能会造成在使用gsql工具带“-
r”参数执行PL/SQL块时出现异常。
17.5.1.2 分类
PL/SQL块可以分为以下几类：
 匿名块：动态构造，只能执行一次。语法请参考图17-2。
 子程序：存储在数据库中的存储过程、函数、操作符和高级包等。当在数据库上建立好
后，可以在其他程序中调用它们。
17.5.2 匿名块
匿名块（AnonymousBlock）一般用于不频繁执行的脚本或不重复进行的活动。它们在
一个会话中执行，并不被存储。
南大通用数据技术股份有限公司
640
GBase 8s V8.8开发者手册
17.5.2.1 语法
匿名块的语法参见图17-2。
图 17-2anonymous_block::=语法
对以上语法图的解释如下：
 匿名块程序实施部分，以BEGIN 语句开始，以END语句停顿，以一个分号结束。输
入“/”按回车执行它。
 最后的结束符“/”必须独占一行，不能直接跟在END后面。
 声明部分包括变量定义、类型、游标定义等。
 最简单的匿名块不执行任何命令。但一定要在任意实施块里至少有一个语句，甚至是一
个NULL语句。
17.5.3 子程序
存储在数据库中的存储过程、函数、操作符和高级包等。当在数据库上建立好后，可以
在其他程序中调用它们。
17.6基本语句
在编写PL/SQL过程中，会定义一些变量，给变量赋值，调用其他存储过程等。介绍
PL/SQL中的基本语句，包括定义变量、赋值语句、调用语句以及返回语句。
说明
南大通用数据技术股份有限公司
641
GBase 8s V8.8开发者手册
尽量不要在存储过程中调用包含密码的SQL语句，因为存储在数据库中的存储过程文
本可能被其他有权限的用户看到导致密码信息被泄漏。如果存储过程中包含其他敏感信息也
需要配置存储过程的访问权限，保证敏感信息不会泄漏。
17.6.1 定义变量
介绍PL/SQL中变量的声明，以及该变量在代码中的作用域。
17.6.1.1 变量声明
变量声明语法请参见图1。
图 1declare_variable::=
对以上语法格式的解释如下：
 variable_name：变量名。
 type：变量类型。
 value：该变量的初始值（如果不给定初始值，则初始为NULL）。value也可以是
表达式。
示例
gbase=#DECLARE
emp_id INTEGER:=7788; --定义变量并赋值
BEGIN
emp_id:=5*7784; --变量赋值
END;
/
南大通用数据技术股份有限公司
642
GBase 8s V8.8开发者手册
变量类型除了支持基本类型，还可以是使用%TYPE和%ROWTYPE去声明一些与其他
表字段或表结构本身相关的变量。
%TYPE 属性
%TYPE主要用于声明某个与其他变量类型（例如，表中某列的类型）相同的变量。假
如我们想定义一个my_name变量，它的变量类型与employee的firstname类型相同，我们
可以通过如下定义：
my_nameemployee.firstname%TYPE
这样定义可以带来两个好处，首先，我们不用预先知道employee 表的firstname类型具
体是什么。其次，即使之后firstname类型有了变化，我们也不需要再次修改my_name的类
型。
TYPEemployee_recordisrecord(idINTEGER,firstnameVARCHAR2(20));
my_employeeemployee_record;
my_idmy_employee.id%TYPE;
my_id_copymy_id%TYPE;
%ROWTYPE 属性
%ROWTYPE属性主要用于对一组数据的类型声明，用于存储表中的一行数据或从游标
匹配的结果。假如，我们需要一组数据，该组数据的字段名称与字段类型都与employee表
相同。我们可以通过如下定义：
my_employeeemployee%ROWTYPE
同样可以使用在cursor上面，该组数据的字段名称与字段类型都与employee表相同（对
于PACKAGE中的cursor，可以省略%ROWTYPE）。%TYPE也可以引用cursor中某一列
的类型，我们可以通过如下定义：
cursorcurisselect*fromemployee;
my_employeecur%ROWTYPE
my_namecur.firstname%TYPE
南大通用数据技术股份有限公司
643
GBase 8s V8.8开发者手册
my_employee2cur-- 对于PACKAGE中定义的cursor，可以省略%ROWTYPE字段
须知： -%TYPE不支持引用复合类型或RECORD 类型变量的类型、RECORD
类型的某列类型、跨PACKAGE复合类型变量的某列类型、跨PACKAGEcursor变量的某列
类型等。 -%ROWTYPE不支持引用复合类型或RECORD类型变量的类型、跨PACKAGE
cursor的类型。
17.6.1.2 变量作用域
变量的作用域表示变量在代码块中的可访问性和可用性。只有在它的作用域内，变量才
有效。
 变量必须在declare部分声明，即必须建立BEGIN-END块。块结构也强制变量必
须先声明后使用，即变量在过程内有不同作用域、不同的生存期。
 同一变量可以在不同的作用域内定义多次，内层的定义会覆盖外层的定义。
 在外部块定义的变量，可以在嵌套块中使用。但外部块不能访问嵌套块中的变量。
17.6.2 赋值语句
17.6.2.1 语法
给变量赋值的语法请参见图1。
图 1assignment_value::=
对以上语法格式的解释如下：
 variable_name：变量名。
 value：可以是值或表达式。值value的类型需要和变量variable_name的类型兼容才能
正确赋值。
示例：
南大通用数据技术股份有限公司
644
GBase 8s V8.8开发者手册
gbase=#DECLARE
emp_id INTEGER:=7788;--赋值
BEGIN
emp_id:=5;--赋值
emp_id:=5*7784;
END;
/
17.6.2.2 嵌套赋值
给变量嵌套赋值的语法请参见图2。
图 2nested_assignment_value::=
对以上语法格式的解释如下：图2
 variable_name：变量名。
 col_name：列名。
 subscript：下标，针对数组变量使用，可以是值或表达式，类型必须为int。
 value：可以是值或表达式。值value的类型需要和变量variable_name的类型兼容
才能正确赋值。
示例：
gbase=#CREATETYPEo1as(aint,bint);
gbase=#DECLARE
南大通用数据技术股份有限公司
645
GBase 8s V8.8开发者手册
TYPEr1isVARRAY(10)ofo1;
emp_id r1;
BEGIN
emp_id(1).a:=5;--赋值
emp_id(1).b:=5*7784;
END;
/
 INTO 方式赋值仅支持对第一层列赋值，且不支持二维及以上数组；
 引用嵌套的列值时，若存在数组下标，目前仅支持在前三层列中只存在一个小括号
情况，建议使用方括号[]引用下标；
17.6.2.3 INTO/BULK COLLECT INTO
将存储过程内语句返回的值存储到变量内，BULKCOLLECTINTO允许将部分或全部
返回值暂存到数组内部。
示例：
gbase=#DECLARE
my_idinteger;
BEGIN
selectidintomy_idfromcustomerslimit1;-- 赋值
END;
/
gbase=#DECLARE
typeid_listisvarray(6)ofcustomers.id%type;
id_arrid_list;
南大通用数据技术股份有限公司
646
GBase 8s V8.8开发者手册
BEGIN
selectidbulkcollectintoid_arrfromcustomersorderbyidDESClimit20;-- 批量赋
值
END;
/
须知：BULKCOLLECTINTO 只支持批量赋值给数组。合理使用LIMIT字段避
免操作过量数据导致性能下降。
17.6.3 调用语句
17.6.3.1 语法
调用一个语句的语法请参见图1。
图 1call_clause::=
对以上语法格式的解释如下：
 procedure_name：存储过程名。
 parameter：存储过程的参数，可以没有或者有多个参数。
17.6.3.2 示例
--创建存储过程proc_staffs
gbase=#CREATEORREPLACEPROCEDUREproc_staffs
(
section NUMBER(6),
salary_sumoutNUMBER(8,2),
staffs_countoutINTEGER
)
南大通用数据技术股份有限公司
647
GBase 8s V8.8开发者手册
IS
BEGIN
SELECTsum(salary),count(*)INTOsalary_sum,staffs_countFROMhr.staffswhere
section_id=section;
END;
/
--调用存储过程proc_return.
gbase=#CALLproc_staffs(2,8,6);
--清除存储过程
gbase=#DROPPROCEDUREproc_staffs;
17.7动态语句
17.7.1 执行动态查询语句
介绍执行动态查询语句。GBase8s提供两种方式：使用EXECUTEIMMEDIATE、OPEN
FOR实现动态查询。前者通过动态执行SELECT语句，后者结合了游标的使用。当需要将
查询的结果保存在一个数据集用于提取时，可使用OPENFOR实现动态查询。
17.7.1.1 EXECUTE IMMEDIATE
语法图请参见图18-7。
图 18-7EXECUTEIMMEDIATEdynamic_select_clause::=
using_clause子句的语法图参见图18-8。
图 18-8using_clause::=
南大通用数据技术股份有限公司
648
GBase 8s V8.8开发者手册
对以上语法格式的解释如下：
 define_variable：用于指定存放单行查询结果的变量。
 USING IN bind_argument：用于指定存放传递给动态 SQL 值的变量，即在
dynamic_select_string中存在占位符时使用。
 USINGOUTbind_argument：用于指定存放动态SQL返回值的变量。
须知
 查询语句中，into和out不能同时存在；
 占位符命名以“:”开始，后面可跟数字、字符或字符串，与 USING 子句的
bind_argument一一对应；
 bind_argument只能是值、变量或表达式，不能是表名、列名、数据类型等数 据
库对象，即不支持使用bind_argument为动态SQL语句传递模式对象。如果存储过
程需要通过声明参数传递数据库对象来构造动态SQL语句（常见于执行DDL语句
时），建议采用连接运算符“||”拼接dynamic_select_clause；
 动态PL/SQL块允许出现重复的占位符，即相同占位符只能与USING子句的一个
bind_argument按位置对应。
17.7.1.2 OPEN FOR
动态查询语句还可以使用OPENFOR打开动态游标来执行。语法参见图18-9。