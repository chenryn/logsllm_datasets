    com.github.ulisesbocchio
    jasypt-maven-plugin
    3.0.3
```
在配置文件中加入加密需要使用的密码
```
jasypt.encryptor.password=test
```
同时，修改要加密的内容，用 DEC() 将待加密内容包裹起来，比如：
```
datasource.password=DEC(test.com)
```
使用 jasypt-maven-plugin 插件来给 DEC() 包裹的内容实现批量加密。
```
mvn jasypt:encrypt -Djasypt.encryptor.password=test
```
> 注意：这里 -Djasypt.encryptor.password 参数必须与配置文件中的一致，不然后面会解密失败。
执行之后，重新查看配置文件，可以看到，自动变成了
![](../../../../../../assets/img/Develop/Java/笔记/spring/springboot/配置文件/2.png)
其中，ENC() 跟 DEC() 一样都是 jasypt 提供的标识，分别用来标识括号内的是加密后的内容和待加密的内容。
如果当前配置文件已经都是 ENC() 内容了，那么我们可以通过下面的命令来解密配置文件，查看原始信息：
```
mvn jasypt:decrypt -Djasypt.encryptor.password=test
```
该操作不会修改配置文件，只会在控制台输出解密结果，比如：
![](../../../../../../assets/img/Develop/Java/笔记/spring/springboot/配置文件/3.png)
此时，我们的配置文件中的敏感信息已经被 ENC() 修饰了，再执行一下单元测试，不出意外的话，依然可以得到之前一样的结果：
![](../../../../../../assets/img/Develop/Java/笔记/spring/springboot/配置文件/4.png)
而此时，配置文件中已经是加密内容了，敏感信息得到了保护。
---
## 2.x 新特性
在Spring Boot 2.0中推出了Relaxed Binding 2.0，对原有的属性绑定功能做了非常多的改进以帮助我们更容易的在Spring应用中加载和读取配置信息。下面本文就来说说Spring Boot 2.0中对配置的改进。
### 配置文件绑定
**简单类型**
在Spring Boot 2.0中对配置属性加载的时候会除了像1.x版本时候那样移除特殊字符外，还会将配置均以全小写的方式进行匹配和加载。所以，下面的4种配置方式都是等价的：
properties格式：
```conf
spring.jpa.databaseplatform=mysql
spring.jpa.database-platform=mysql
spring.jpa.databasePlatform=mysql
spring.JPA.database_platform=mysql
```
yaml格式：
```yaml
spring:
  jpa:
    databaseplatform: mysql
    database-platform: mysql
    databasePlatform: mysql
    database_platform: mysql
```
推荐使用全小写配合-分隔符的方式来配置，比如: `spring.jpa.database-platform=mysql`
**List类型**
在properties文件中使用[]来定位列表类型，比如：
```conf
spring.my-example.url[0]=http://example.com
spring.my-example.url[1]=http://spring.io
```
也支持使用逗号分割的配置方式，上面与下面的配置是等价的：
```conf
spring.my-example.url=http://example.com,http://spring.io
```
而在yaml文件中使用可以使用如下配置：
```yaml
spring:
  my-example:
    url:
      - http://example.com
      - http://spring.io
```
也支持逗号分割的方式：
```yaml
spring:
  my-example:
    url: http://example.com, http://spring.io
```
注意：在Spring Boot 2.0中对于List类型的配置必须是连续的，不然会抛出UnboundConfigurationPropertiesException异常，所以如下配置是不允许的：
```
foo[0]=a
foo[2]=b
```
在Spring Boot 1.x中上述配置是可以的，foo[1]由于没有配置，它的值会是null
**Map类型**
Map类型在properties和yaml中的标准配置方式如下：
properties格式：
```conf
spring.my-example.foo=bar
spring.my-example.hello=world
```
yaml格式：
```yaml
spring:
  my-example:
    foo: bar
    hello: world
```
注意：如果Map类型的key包含非字母数字和-的字符，需要用[]括起来，比如：
```yaml
spring:
  my-example:
    '[foo.baz]': bar
```
### 环境属性绑定
**简单类型**
在环境变量中通过小写转换与 `.` 替换 `_` 来映射配置文件中的内容，比如：环境变量 `SPRING_JPA_DATABASEPLATFORM=mysql` 的配置会产生与在配置文件中设置 `spring.jpa.databaseplatform=mysql` 一样的效果。
**List类型**
由于环境变量中无法使用 `[` 和 `]` 符号，所以使用 `_` 来替代。任何由下划线包围的数字都会被认为是 `[]` 的数组形式。比如：
```conf
MY_FOO_1_ = my.foo[1]
MY_FOO_1_BAR = my.foo[1].bar
MY_FOO_1_2_ = my.foo[1][2]
```
另外，最后环境变量最后是以数字和下划线结尾的话，最后的下划线可以省略，比如上面例子中的第一条和第三条等价于下面的配置：
```conf
MY_FOO_1 = my.foo[1]
MY_FOO_1_2 = my.foo[1][2]
```
### 系统属性绑定
**简单类型**
系统属性与文件配置中的类似，都以移除特殊字符并转化小写后实现绑定，比如下面的命令行参数都会实现配置 spring.jpa.databaseplatform=mysql 的效果：
```
-Dspring.jpa.database-platform=mysql
-Dspring.jpa.databasePlatform=mysql
-Dspring.JPA.database_platform=mysql
```
**List类型**
系统属性的绑定也与文件属性的绑定类似，通过 `[]` 来标示，比如：
```
-D"spring.my-example.url[0]=http://example.com"
-D"spring.my-example.url[1]=http://spring.io"
```
同样的，他也支持逗号分割的方式，比如：
```
-Dspring.my-example.url=http://example.com,http://spring.io
```
### 属性的读取
上文介绍了 Spring Boot 2.0 中对属性绑定的内容，可以看到对于一个属性我们可以有多种不同的表达，但是如果我们要在 Spring 应用程序的 environment 中读取属性的时候，每个属性的唯一名称符合如下规则：
- 通过 `.` 分离各个元素
- 最后一个 `.` 将前缀与属性名称分开
- 必须是字母（a-z）和数字 (0-9)
- 必须是小写字母
- 用连字符 `-` 来分隔单词
- 唯一允许的其他字符是 `[` 和 `]`，用于 List 的索引
- 不能以数字开头
所以，如果我们要读取配置文件中 spring.jpa.database-platform 的配置，可以这样写：
```
this.environment.containsProperty("spring.jpa.database-platform")
```
而下面的方式是无法获取到 spring.jpa.database-platform 配置内容的：
```
this.environment.containsProperty("spring.jpa.databasePlatform")
```
注意：使用 @Value 获取配置内容的时候也需要这样的特点
### 全新的绑定API
在 Spring Boot 2.0 中增加了新的绑定 API 来帮助我们更容易的获取配置信息。
**例子一：简单类型**
假设在 propertes 配置中有这样一个配置：com.example.foo=bar
我们为它创建对应的配置类：
```java
@Data
@ConfigurationProperties(prefix = "com.example")
public class FooProperties {
    private String foo;
}
```
接下来，通过最新的 Binder 就可以这样来拿配置信息了：
```java
@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.run(Application.class, args);
        Binder binder = Binder.get(context.getEnvironment());
        // 绑定简单配置
        FooProperties foo = binder.bind("com.example", Bindable.of(FooProperties.class)).get();
        System.out.println(foo.getFoo());
    }
}
```
**例子二：List类型**
如果配置内容是 List 类型呢？比如：
```conf
com.example.post[0]=Why Spring Boot
com.example.post[1]=Why Spring Cloud
com.example.posts[0].title=Why Spring Boot
com.example.posts[0].content=It is perfect!
com.example.posts[1].title=Why Spring Cloud
com.example.posts[1].content=It is perfect too!
```
要获取这些配置依然很简单，可以这样实现：
```java
ApplicationContext context = SpringApplication.run(Application.class, args);
Binder binder = Binder.get(context.getEnvironment());
// 绑定List配置
List post = binder.bind("com.example.post", Bindable.listOf(String.class)).get();
System.out.println(post);
List posts = binder.bind("com.example.posts", Bindable.listOf(PostInfo.class)).get();
System.out.println(posts);
```
---
## Source & Reference
- [Spring Boot 2.x基础教程：配置文件详解](https://blog.didispace.com/spring-boot-learning-21-1-3/)
- [Spring Boot 2.x基础教程：配置元数据的应用](https://blog.didispace.com/spring-boot-learning-24-1-6/)
- [Spring Boot 2.x基础教程：加密配置中的敏感信息](https://blog.didispace.com/spring-boot-learning-2-1-5/)