2we assume here extractors can be applied to large alphabet,
if not, we can simply use the bit string representing C to be
the input to the extractor.
236have ciphertext size O(t2 log2 n
the collusion size is t = O(log n
 ), and the upper bound of
 /λ);
When κt2 ≥ 4t log n
 , we can choose (cid:96) = q = λt2, and
κ = Θ(λ). The resulting traitor deterring scheme will have
ciphertext size O(λt4) for any collusion size t.
To summarize, if we select the parameters in a way that
all the conditions above are satisﬁed, then the correctness
and security of the fuzzy locker for CFN code follows. Then
from the general construction, we can conclude that:
Corollary 3.3 Given PKE, there exists a TDS satisfying:
fully-collusion resilient, black-box traitor deterring w.r.t. to
any message distribution D that has min-entropy H∞(D) ≥
− log(δ − α), where δ is the correctness probability required
by the adversarial device and α is a non-negligible amount
signiﬁcantly smaller than δ. And it is with ciphertext size
O(log n
 /λ.
4. CONSTRUCTION FROM COMPARISON
 /λ; and O(t4λ), if t ≥ 4 log n
 /λ) when t ≤ 4 log n
PREDICATE ENCRYPTION
In this section, we will present our second technique of
constructing TDS’s based on comparison predicate encryp-
tion (CPE) with an exponentially large attribute space. We
ﬁrst give the general construction of TDS, then instantiate
the CPE from (optimized) bounded collusion functional en-
cryption. The resulting TDS exhibits better eﬃciency than
our CFN construction for larger traitor collusions.
4.1 TDS from CPE.
In a CPE, decryption succeeds only when v ≤ x, where
x, v are the attributes for the the ciphertext and the secret
key respectively. Moreover, besides standard security, it also
requires an attribute hiding property that no adversary A
can distinguish c0, c1 which have attributes x0, x1 (assuming
x0  p for all i =
1, . . . , t, then: | Pr[B(C) = m] − δ0| = negl(λ).
Lemma 4.3 If the underlying CFE is attribute hiding, and
two tracing ciphertexts C1, C2 are created using message m,
and pivots p1, p2 respectively, and for all i = 1, . . . , t, idi (cid:54)∈
[p1, p2), then: | Pr[B(C1) = m]− Pr[B(C2) = m]| = negl(λ).
Lemma 4.4 If the underlying CFE is attribute hiding, the
tracing ciphertext C is created using a message m randomly
sampled from D and a pivot p, and idi ≤ p for i = 1, . . . , t,
then | Pr[B(C) = m] − δ| = negl(λ).
when X = (cid:80) Xi, {Xi} are independent random variables
We then estimate the parameters n0, N for determining
whether B works. Following the Chernoﬀ bounds, Pr[X  (1 + ω)µ] ≤ e−ω2µ/3,
over {0, 1}, 0 < ω < 1, and µ = E(X). In this setting, Xi
is the event denoting when Rec feeds the i−th ciphertext
which encrypts a random message m sampled from D, the
box B returns the plaintext correctly. It follows that, if the
traitor indices are all smaller than the pivot, B works with
δ-correctness, Pr[Xi = 1] ≥ δ. After repeating N times, the
probability that at most n0 = (δ − α
2 )N correct answers are
returned by B is bounded by e−α2N/8. On the other hand,
if the traitor indices are all larger than the pivot, B works
with only probability δ − α. The probability that B returns
more than n0 correct answers is bounded by e−α2N/12.
Setting parameters N = α−2log2 λ, n0 = (δ − α
2 )N , less
than n0 correct answers means that there must be a traitor
index larger than the pivot; more than n0 correct answers
means there must be a traitor index smaller than the pivot.
Now we are ready to proceed to prove the theorem. We
can represent all users as leaves in a complete binary tree
indexed by {1, . . . , 2(cid:96)}; given this Rec moves a pivot per-
forming a binary search in this tree by selecting a sequence of
subtrees S0, S1, . . . in the following fashion: at move j ≥ 1,
the pivot pj deﬁnes the subtree Sj−1 as the subtree of the
complete binary tree that is rooted at a node v that has pj
as the index of the rightmost leaf of the left subtree of Sj−1.
Observe that S0 is the whole tree. We will prove by strong
induction that for all j ≥ 0, Sj contains a traitor. The base,
j = 0, is straightforward. Suppose that the statement is
true for S0, S1, . . . , Sj−1. We will prove for Sj.
Case 1. Suppose that Sj is a left subtree of Sj−1. This
means that there is a traitor with index at most pj (oth-
erwise, if all traitors had a bigger index, then by lemma
4.2 the pirate box would be unsuccessful and the recovering
algorithm would move to the right subtree of Sj−1). Now
suppose that none of the traitors belong to Sj and let u
be the largest index of a traitor that has index at most pj.
By the fact that u does not belong to Sj we know that at
least one of the subtrees S1, . . . , Sj−1 is a right subtree of
its containing parent subtree. Let Sk be such a subtree with
the largest k ≤ j − 1. Now note that when the recovering
algorithm used pivot pk (which lies in the center of subtree
Sk−1) it holds that: u ≤ pk. Observe that there is no traitor
with index in the set {pk + 1, . . . , pj}. Based on lemma 4.3
the decision of Rec when testing with pivot pj and pivot pk
should be the same (with overwhelming probability). This
leads to a contradiction as Rec moved to the right (resp.
left) when testing with index pk (resp. pj).
Similarly, we can argue for the case that Sj is a right
subtree of Sj−1. We can conclude that S(cid:96) is a single leaf
node and it also denotes a traitor.
4.2 Instantiations of CPE.
Next we will give concrete constructions of CPE support-
ing an exponentially large attribute space. We ﬁrst note
that, a straightforward instantiation can be obtained from
general functional encryption (FE) which can be constructed
using indistinguishability obfuscation (iO) [13]. The result-
ing TDS will have only a constant size ciphertext however
it will rely on assumptions related to multilinear maps [13].
We now present an instantiation from standard assump-
tions. Note that there exists a bounded collusion FE from
standard assumptions. In a TDS there is only a potentially
small (and in any case polynomially bounded) subset of users
that is colluding to produce a pirate box. We show how to
construct a CPE from bounded collusion FE.
Instantiation-I. General FE secure for a single key query
with succinct ciphertext was constructed in [14]. To am-
plify [14] to a q-query secure FE, one simply runs q indepen-
dent 1-query secure FE schemes in parallel. Each secret key
is generated using a diﬀerent master secret key (this step will
require that the authority maintains and updates a private
state to keep track of which master secret keys have been
used), while each master public key will be used to encrypt
the message resulting in a vector of q ciphertexts encrypting
the same message. Unfortunately using this scheme to in-
stantiate the CPE for a TDS would force q = n. To see this,
even if we choose q = n − 1, there exist a pair of users i, j
such that their secret keys are generated using a same mas-
ter secret key (say the k-th master secret key). When user
i, j are corrupted together, no security can be guaranteed for
the k-th 1-query secure FE instance, and the CPE scheme
cannot be shown secure. Thus the resulting TDS will have
ciphertext size O(n · poly(λ)) which is not preferable espe-
cially given that the collusion t might be much smaller than
n. We then show how to improve the ciphertext complexity.
Instantiation-II. A stateless q bounded FE was constructed
in [15] from a 1-query secure FE using techniques from se-
238ij =i1
cure computation, and their scheme guarantees security un-
der arbitrary collusion with size q, even if more keys are