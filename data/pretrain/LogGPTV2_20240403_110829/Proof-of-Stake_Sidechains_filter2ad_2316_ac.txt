persistence property.
Firewall: For all A ∈(cid:2)
property parametrized by u.
πA (merge ({L∪
i∈St Assets(Li),
i [t] : i ∈ St})) ∈ πSt (VA) .
Intuitively, the ﬁrewall property above gives the following
guarantee: If the security assumption of a particular sidechain
has been violated, we demand that the sequence of transactions
σ that appears in the still uncompromised ledgers is a valid
144
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
projection of some word from the asset validity language
onto these ledgers. This means that there exists a sequence of
transactions τ that could have happened on the compromised
ledgers, such that
it would “justify” the current state of
the uncompromised ledgers as a valid state. Of course, we
don’t know whether this sequence τ actually occurred on the
compromised ledger, however, given that this ledger itself no
longer provides any reliable state, this is the best guarantee
we can still offer to the uncompromised ledgers.
Looking ahead, when we deﬁne a particular validity lan-
guage for our concrete, fungible, constant-supply asset, we will
see that this property will translate into the mainchain main-
taining “limited liability” towards the sidechain: the amount of
money transferred back from the sidechain can never exceed
the amount of money that was previously moved towards the
sidechain, because no plausible history of sidechain transac-
tions can exist that would justify such a transfer.
IV. IMPLEMENTING PEGGED LEDGERS
We present a construction for pegged ledgers that is based
on Ouroboros PoS [18], but also applicable to other PoS
systems such as Snow White [5] and Algorand [24] (for a
discussion of such adaptations, see Appendix C). Our protocol
will implement a system of ledgers with pegging security
according to Deﬁnition 8 under an assumption on the relative
stake power of the adversary that will be detailed below.
The main challenge in implementing pegged ledgers is
to facilitate secure cross-chain transfers. We consider two
approaches to such transfers and refer to them as direct
observation or cross-chain certiﬁcation. Consider two pegged
ledgers L1 and L2. Direct observation of L1 means that every
node of L2 follows and validates L1; it is easy to see that this
enables transfers from L1 to L2. On the other hand, cross-
chain certiﬁcation of L2 means that L1 contains appropriate
cryptographic information sufﬁcient to validate data issued by
the nodes following L2. This allows transfers of assets from
L2, as long as they are certiﬁed, to be accepted by L1-nodes
without following L2. The choice between direct observation
and cross-chain certiﬁcation can be made independently for
each direction of transfers between L1 and L2, any of the 4
variants is possible (cf. Figure 1).
Another aspect of implementing pegged ledgers in the PoS
context is the choice of stake distribution that underlies the
PoS on each of the chains. We again consider two options,
which we call independent staking and merged staking. In
independent staking, blocks on say L1 are “produced by” coins
from L1 (in other words, the block-creating rights on L1 are
attributed based on the stake distribution recorded on L1 only).
In contrast, with merged staking, blocks on L1 are produced
either by coins on L1, or coins on L2 that have, via their
staking key, declared support of L1 (but otherwise remain on
L1); see Figure 1. Also here, all 4 combinations are possible.
In our construction we choose an exemplary conﬁguration
between two ledgers L1 and L2, so that direct observation is
applied to L1, cross-chain certiﬁcation to L2, independent-
staking in L1 and merged staking in L2. As a result, all
stakeholders in L2 also keep track of chain development on
L1 (and hence run a full node for L1) while the opposite is not
necessary, i.e., L1 stakeholders can be oblivious of transactions
and blocks being added to L2. This illustrates the two basic
possibilities of pegging and can be easily adapted to any other
of the conﬁgurations between two ledgers in Figure 1.
In order to reﬂect the asymmetry between the two chains
in our exemplary construction we will refer to L1 as the
“mainchain” MC, and to L2 as the “sidechain” SC. To
elaborate further on this concrete asymmetric use case, we
also fully specify how the sidechain can be initialized from
scratch, assuming that the mainchain already exists.
The pegging with the sidechain will be provided with
respect to a speciﬁc asset of MC that will be created on
MC. Note that MC as well as SC may carry additional assets
but for simplicity we will assume that staking and pegging is
accomplished only via this single primary asset.
The presentation of the construction is organized as follows.
First, in Section IV-A we introduce a novel cryptographic
primitive, ad-hoc threshold multisignature (ATMS), which is
the fundamental building block for cross-chain certiﬁcation.
Afterwards, in Section IV-C we use it as a black box to build
secure pegged ledgers with respect to concrete instantiations
of the functions merge and eﬀect and a validity language VA
for asset A given in Section IV-B. Finally, we discuss speciﬁc
instantiations of ATMS in Section V.
A. Ad-Hoc Threshold Multisignatures
We introduce a new primitive, ad-hoc threshold multisigna-
tures (ATMS), which borrow properties from multisignatures
and threshold signatures and are ad-hoc in the sense that
signers need to be selected on the ﬂy from an existing key
set. In Section IV-C we describe how ATMS are useful for
periodically updating the “anchor of trust” that the mainchain
parties have w.r.t. the sidechain they are not following.
ATMS are parametrized by a threshold t. On top of the
usual digital signatures functionality, ATMS also provide a
way to: (1) aggregate the public keys of a subset of these
parties into a single aggregate public key avk; (2) check that a
given avk was created using the right sequence of individual
public keys; and (3) aggregate t(cid:5) ≥ t individual signatures
from t(cid:5) of the parties into a single aggregate signature that
can then be veriﬁed using avk, which is impossible if less
than t individual signatures are used.
The deﬁnition of an ATMS is given below.
Deﬁnition 9. A t-ATMS is a tuple of algorithms Π =
(PGen, Gen, Sig, Ver, AKey, ACheck, ASig, AVer) where:
PGen(1κ) is the parameter generation algorithm that takes
the security parameter 1κ and returns system parame-
ters P.
Gen(P) is the key-generation algorithm that takes P and
produces a public/private key pair (vki, ski) for the party
invoking it.
Sig(ski, m) is the signature algorithm as in an ordinary
signature scheme: it takes a private key and a message
and produces a (so-called local) signature σ.
145
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: Deployment options for PoS Sidechains.
Ver(m, pki, σ) is the veriﬁcation algorithm that
takes a
public key, a message and a signature and returns true
or false.
AKey(VK) is the key aggregation algorithm that takes a
sequence of public keys VK and aggregates them into
an aggregate public key avk.
ACheck(VK, avk) is the aggregation-checking algorithm
that takes a public key sequence VK and an aggregate
public key avk and returns true or false, determining
whether VK were used to produce avk.
ASig (m,VK,(cid:16)(vk1, σ1),··· , (vkd, σd)(cid:17)) is the signature-
aggregation algorithm that takes a message m, a se-
quence of public keys VK and a sequence of d pairs
(cid:16)(vk1, σ1),··· , (vkd, σd)(cid:17) where each σi is a local sig-
nature on m veriﬁable by vki and each vki
is in a
distinct position within VK, ASig combines these into
a multisignature σ that can later be veriﬁed with respect
to the aggregate public key avk produced from VK (as
long as d ≥ t, see below).
AVer(m, avk, σ) is the aggregate-signature veriﬁcation al-
gorithm that takes a message m, an aggregate public key
avk, and a multisignature σ, and returns true or false.
Deﬁnition 10
(ATMS correctness). Let Π be a t-
ATMS scheme initialized with P ← PGen(1κ),
let
(vk1, sk1),··· , (vkn, skn) be a sequence of keys generated
via Gen(P),
let VK be a sequence containing (not nec-
essarily unique) keys from the above and avk be gen-
erated by invoking avk ← AKey(VK). Let m be any
message and let (cid:16)(vk1, σ1),··· , (vkd, σd)(cid:17) be any sequence
of key/signature pairs provided that d ≥ t and every
vki appears in a unique position in the sequence VK,
is generated as σi = Sig(ski, m). Let σ ←
where σi
ASig (m,VK,(cid:16)(vk1, σ1),··· , (vkd, σd)(cid:17)). The scheme Π is
correct if for every such message and sequence the following
hold:
1) Ver(m, vki, σi) is true for all i;
2) ACheck(VK, avk) is true;
3) AVer(m, avk, σ) is true.
We deﬁne the security of an ATMS in the deﬁnition below,
via a cryptographic game given in Algorithm 1.
Deﬁnition 11
(Security). A t-ATMS scheme Π =
(PGen, Gen, Sig, Ver, AKey, ACheck, ASig, AVer) is secure
for any PPT adversary A and any polynomial p
if
there
such that
Pr[ATMSΠ,A(κ, p(κ)) = 1] < negl(κ) .
some negligible
function negl
exists
Algorithm 1 The ATMS game
1: function ATMS(κ, p)
VK ← ;SK ← ; Qsig ← ∅; Qcor ← ∅
2:
P ← PGen(1κ)
3:
(m, σ, avk, keys) ← AOgen,Osig(·,·),Ocor(·) (P)
4:
q ← 0
5:
for vk in keys do
6:
7:
q ← q + 1
8:
9:
10:
11:
12: end function
13: function Ogen
if vk /∈ VK ∨ vk ∈ Qsig[m] ∪ Qcor then
end if
end for
return AVer(m, avk, σ)∧ACheck(keys, avk)∧q < t
(vk, sk) ← Gen(P)
14:
VK ← VK (cid:11) vk
15:
SK ← SK (cid:11) sk
16:
return vk
17:
18: end function
19: function Osig(i, m)
Qsig[m] ← Qsig[m] ∪ {VK[i]}
return Sig(SK[i], m)
20:
21:
22: end function
23: function Ocor(i)
Qcor ← Qcor ∪ {VK[i]}
return SK[i]
24:
25:
26: end function
It is straightforward to see that if Π is a secure ATMS,
then the tuple (PGen, Gen, Sig, Ver) is a EUF-CMA-secure
signature scheme.
Looking ahead, note that since the AKey algorithm is only
invoked with the public keys of the participants, it can be
invoked by anyone, not just the parties who hold the respective
secret keys, as long as the public portion of their keys is
published. Furthermore, notice that the above games allow the
adversary to generate more public/private key pairs of their
own and combine them at will.
Having deﬁned the ATMS primitive, we will now describe
a sidechain construction that uses it. Concrete instantiations
of the ATMS primitive are presented in Section V.
146
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
B. A Concrete Asset A
We now present an example of a simple fungible asset with
ﬁxed supply, which we denote A, and describe its validity
language VA. This will be the asset (and validity language)
considered in our construction and proof. While VA is simple
and natural, it allows us to exhibit the main features of our
security treatment and illustrate how it can be applied to more
complex languages such as those capable of capturing smart
contracts; we omit such extensions in this version. Note that
our language is account-based, but a UTXO-based validity
language can be considered in a similar manner.
1) Instantiating VA: The validity language VA for the
asset A considers two ledgers: the mainchain ledger L0 (cid:2)
MC and the sidechain ledger L1 (cid:2) SC. For this as-
set, every transaction tx ∈ TA has the form tx =
(txid, lid, (send, sAcc), (rec, rAcc), v, σ), where:
• txid is a transaction identiﬁer that prevents replay attacks.
We assume that txid contains sufﬁcient information to
identify lid by inspection and that this is part of syntactic
transaction validation.
• lid ∈ {0, 1} is the ledger index where the transaction
belongs.
• send ∈ {0, 1} is the index of the sender ledger Lsend
and sAcc is an account on this ledger, this is the sender
account. For simplicity, we assume that sAcc is the public
key of the account.
• rec ∈ {0, 1} is the index of the recipient ledger Lrec and
rAcc is an account (again represented by a public key)
on this ledger, this is the recipient account. We allow
either Lsend = Lrec, which denotes a local transaction,
or Lsend (cid:9)= Lrec, which denotes a remote transaction (i.e.,
a cross-ledger transfer).
• v is the amount to be transferred.
• σ is the signature of the sender, i.e. made with the private
key corresponding to the public key sAcc on the plaintext
(txid, (send, sAcc), (rec, rAcc), v).
The correctness of lid is enforced by the ledgers, i.e., for both
i ∈ {0, 1} the set TA,Li only contains transactions with lid =
i. Note that although we sometimes notationally distinguish
between an account and the public key that is associated with
it, for simplicity we will assume that these are either identical
or can always be derived from one another (this assumption
is not essential for our construction).
The membership-deciding algorithm for VA (detailed as
Algorithm 7 in Appendix B) processes the sequence of trans-
actions (tx1, tx2, . . . , txm) given to it as input in their order.
Assuming transactions are syntactically valid, the function
veriﬁes for each transaction txi the freshness of txid, validity
of the signature, and availability of sufﬁcient funds on the
sending account. For an intra-ledger transaction (i.e., one that
has send = rec), these are all the performed checks.
More interestingly, VA also allows for cross-ledger trans-
fers. Such transfers are expressed by a pair of transactions in
which send (cid:9)= rec. The ﬁrst transaction appears in lid = send,
while the second transaction appears in lid = rec. The two
transactions are identical except for this change in lid (this is
the only exception to the txid-freshness requirement). Every
receiving transaction has to be preceded by a matching sending
transaction. Cross-chain transactions have to, similarly to intra-
ledger transactions, conform to laws of balance conservation.
Note that VA does not require that every “sending” cross-
ledger transaction on the sender ledger is matched by a “re-
ceiving” transaction on the receiving ledger. Hence, if the asset
A is sent from ledger Lsend but has not yet arrived on Lrec then
validity for this asset is not violated. All the validity language
ensures is that appending the sidechain receive transaction to
the rec will eventually be a valid way to extend the receiving
ledger, as long as the sidechain send transaction has been
included in send.
transaction is a “receiving” transaction tx
2) Instantiating eﬀectLi→Lj : For the simple asset A out-
lined above, every cross-ledger transfer is a “sending” trans-
action tx with Llid = Lsend (cid:9)= Lrec appearing in Lsend, and
(cid:5) with
its effect
Llid = Lrec
is otherwise identical
= 1 − lid). Hence, we deﬁne
(except for the different lid
(cid:5) exactly for all these transactions and
eﬀectLsend→Lrec (tx) = tx
no other.
3) Instantiating merge(·): It is easy to construct a canonical
function merge(·) once we see its inputs not only as ledger
states (i.e., sequences of transactions) but we also exploit
the additional structure of the blockchains carrying those
ledgers. The canonical merge of the set of ledger states L
is the lexicographically minimum topologically sound merge,
in which transactions of ledger Li are compared favourably to
transactions in Lj if i < j. However, note that the construction
we provide below will work for any topologically sound merge
function.
(cid:9)= Lsend in Lrec that
(cid:5)
One can easily observe the following statement.
Proposition 1. The validity language VA is correct (according
to Deﬁnition 7) with respect to the merge function deﬁned
above.
C. The Sidechain Construction
We now describe the procedures for running a sidechain
in the conﬁguration outlined at the beginning of this section:
with independent staking on MC and merged staking on SC;
direct observation of MC and cross-chain certiﬁcation of SC.
We describe the sidechain’s creation, maintenance, and the
way assets can be transferred to it and back. The protocol we
describe below is quite complex, we hence choose to describe