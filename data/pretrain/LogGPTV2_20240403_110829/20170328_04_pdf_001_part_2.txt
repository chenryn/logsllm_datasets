### Standard for Managing Feature Tables, Geometry, and Spatial Reference Systems in SQL

This standard defines a schema for managing feature tables, geometry, and spatial reference system information in an SQL-implementation based on predefined data types. It does not define SQL functions for accessing, maintaining, or indexing geometry.

#### 1. Schema Overview
Figure 1 illustrates the schema for supporting feature tables, geometry, and spatial reference information using predefined data types.

- **GEOMETRY_COLUMNS Table**: Describes available feature tables and their geometry properties.
- **SPATIAL_REF_SYS Table**: Describes the coordinate systems and transformations for geometry.
- **FEATURE TABLE**: Stores a collection of features. Columns represent feature attributes, and rows represent individual features. The geometry of a feature is one of its attributes, implemented as a foreign key to a geometry table.
- **GEOMETRY TABLE**: Stores geometric objects, which can be implemented using either standard SQL numeric types or SQL binary types.

**Figure 1: Schema for Feature Tables Using Predefined Data Types**

Depending on the storage type specified in the GEOMETRY_COLUMNS table, a geometric object can be stored as an array of coordinate values or as a single binary value. In the former case, predefined SQL numeric types are used for the coordinates. In the latter case, the complete geometric object is stored in the Well-known Binary Representation (WKB) as a single value.

#### 2. Identification of Feature Tables and Geometry Columns
Feature tables and geometry columns are identified through the GEOMETRY_COLUMNS table. Each geometry column in the database has an entry in this table, containing:
- The identity of the feature table.
- The name of the geometry column.
- The spatial reference system ID (SRID).
- The type of geometry.
- The coordinate dimension.
- The identity of the geometry table that stores geometric objects.
- Information necessary to navigate the geometry table in the case of normalized geometry storage.

#### 3. Identification of Spatial Reference Systems
Every geometry column and geometric entity is associated with exactly one spatial reference system. The SPATIAL_REF_SYS table stores information on each spatial reference system, including:
- SRID (Spatial Reference System Identifier).
- AUTH_NAME (Authority Name).
- AUTH_SRID (Authority Specific Spatial Reference System Identifier).
- SRTEXT (Well-known Text description).

Interoperability between clients is achieved via the SRTEXT column, which stores the well-known text representation of the spatial reference system.

#### 4. Feature Tables
A feature is an abstraction of a real-world object. Feature attributes are columns in a feature table, and features are rows in the table. The geometry of a feature is one of its attributes, implemented as a foreign key to a geometry table. Relationships between features can be defined as foreign key references between feature tables.

#### 5. Geometry Tables
##### 5.1 Normalized Geometry Schema
The normalized geometry schema stores the coordinates of geometric objects as predefined SQL numeric types. Each geometric object is identified by a key (GID) and consists of one or more primitive elements ordered by an element sequence (ESEQ). Each primitive element is distributed over one or more rows in the geometry table, identified by a primitive type (ETYPE), and ordered by a sequence number (SEQ).

**Rules for Geometric Object Representation:**
- ETYPE designates the geometry type.
- Geometric objects may have multiple elements, identified by ESEQ.
- An element may be built up from multiple parts, identified by SEQ.
- Polygons may contain holes.
- Polygon rings must close when assembled from an ordered list of parts.
- Coordinate pairs that are not used are set to Nil.
- For geometric objects that continue onto an additional row, the last point of one row is equal to the first point of the next.
- There is no limit on the number of elements or rows in an element.

**Figure 2: Example of Geometry Table for Polygon Geometry Using SQL**

##### 5.2 Binary Geometry Schema
The binary geometry schema uses GID as a key and stores the geometric object using the Well-known Binary Representation (WKB). The geometry table includes the minimum bounding rectangle and the WKB for the geometric object, allowing the construction of spatial indexes without accessing the actual geometric object structure.

**Table 1: Example of Geometry Table for Polygon Geometry Using WKB**

##### 5.3 SQL/MM Geometry Schema
Geometric attributes of a feature may also be specified using an extension of SQL/MM.

#### 6. Text Annotations
##### 6.1 ANNOTATIONS Metadata Table
Each feature table/geometry column pair with associated annotation text entities is represented as a row in the ANNOTATIONS metadata table. The data stored for each annotation includes:
- The identity of the feature table containing the text column.
- The column in the feature table that contains the text entity key.
- A base scale for text placement.
- Optionally, a geometry column for an envelope representing the text.
- The identity of the text element table containing the geometry column.
- The column names in the text element table for text, location, leader line, and rendering data.
- Default values for text elements and rendering data.

**Base Scale for Text Placement:**
Text objects have a font size from the style. To enable annotation text, a mechanism is needed to define text in points but based on a specific map scale. This base scale is stored once in the metadata, and any point size values in the metadata or individual rows are relative to this value.

##### 6.2 Table or View Constructs for Structural Metadata
The following CREATE TABLE statement creates a structured table to describe how text is stored in a feature table. This should be either an actual metadata table or an updateable view.

```sql
CREATE TABLE ANNOTATION_TEXT_METADATA AS
{
    F_TABLE_CATALOG CHARACTER VARYING NOT NULL,
    F_TABLE_SCHEMA CHARACTER VARYING NOT NULL,
    F_TABLE_NAME CHARACTER VARYING NOT NULL,
    F_TEXT_KEY_COLUMN CHARACTER VARYING NOT NULL,
    F_TEXT_ENVELOPE_COLUMN CHARACTER VARYING NOT NULL,
    A_ELEMENT_TABLE_CATALOG CHARACTER VARYING NOT NULL,
    A_ELEMENT_TABLE_SCHEMA CHARACTER VARYING NOT NULL,
    A_ELEMENT_TABLE_NAME CHARACTER VARYING NOT NULL,
    A_ELEMENT_TEXT_KEY_COLUMN CHARACTER VARYING NOT NULL,
    A_ELEMENT_TEXT_SEQ_COLUMN CHARACTER VARYING NOT NULL,
    A_ELEMENT_TEXT_VALUE_COLUMN CHARACTER VARYING NOT NULL,
    A_ELEMENT_TEXT_LEADERLINE_COLUMN CHARACTER VARYING NOT NULL,
    A_ELEMENT_TEXT_LOCATION_COLUMN CHARACTER VARYING NOT NULL,
    A_ELEMENT_TEXT_ATTRIBUTES_COLUMN CHARACTER VARYING NOT NULL,
    A_MAP_BASE_SCALE NUMBER NOT NULL,
    A_TEXT_DEFAULT_EXPRESSION CHARACTER VARYING,
    A_TEXT_DEFAULT_ATTRIBUTES CHARACTER VARYING
}
```

##### 6.3 Field Description
Table 2 provides column definitions for the Annotation Text metadata.

| Column | Description |
|--------|-------------|
| F_TABLE_CATALOG, SCHEMA, NAME | Fully qualified name of the feature table containing the geometry column to be annotated. |
| F_TEXT_KEY_COLUMN, ENVELOPE_COLUMN | Names of the columns in the feature table that contain the key for the text and an envelope for the text. |
| A_ELEMENT_TABLE_CATALOG, SCHEMA, NAME | Fully qualified name of the text element table containing the text elements. |
| A_TEXT_ELEMENT_KEY_COLUMN, SEQ_COLUMN, VALUE_COLUMN, LEADERLINE_COLUMN, LOCATION_COLUMN, ATTRIBUTES_COLUMN | Names of the columns in the text element table that contain the key, sequence, value, leader line, location, and attributes for the text. |
| A_MAP_BASE_SCALE | Base scale for all size values in points. |
| A_TEXT_DEFAULT_EXPRESSION, ATTRIBUTES | Default values for the text elements and rendering data. |

#### 7. Use of Numeric Data Types
SQL implementations provide several numeric data types. The use of a numeric data type in examples is not binding. Any particular implementation may use alternative data types as long as casting operations do not lead to difficulties.

#### 8. Notes on SQL/CLI Access to Geometry Values Stored in Binary Form
SQL/CLI provides standard mechanisms to bind character, numeric, and binary data values. The WKB_GEOMETRY column in the geometry table is accessed in SQL/CLI as one of the binary SQL data types (SQL_BINARY, SQL_VARBINARY, or SQL_LONGVARBINARY).

#### 9. Architecture â€” SQL Implementation Using Geometry Types
##### 9.1 Overview
This standard defines a schema for managing feature tables, geometry, and spatial reference system information in an SQL-implementation with a geometry type extension.

**Figure 3: Schema for Feature Tables Using SQL with Geometry Types**

##### 9.2 Identification of Feature Tables and Geometry Columns
Feature tables and geometry columns are identified through the GEOMETRY_COLUMNS table. The data stored for each geometry column includes:
- The identity of the feature table.
- The name of the geometry column.
- The spatial reference system ID.
- The coordinate dimension.

The columns in the GEOMETRY_COLUMNS table for the SQL with Geometry Types environment are a subset of those defined for the SQL-implementation based on predefined data types.

##### 9.3 Identification of Spatial Reference Systems
Every geometry column is associated with a spatial reference system. The SPATIAL_REF_SYS table stores information on each spatial reference system, including SRID, AUTH_NAME, AUTH_SRID, and SRTEXT.

##### 9.4 Feature Tables
A feature is an abstraction of a real-world object. Feature attributes are columns in a feature table, and features are rows in the table. The geometry of a feature is stored in a geometry column whose type is drawn from a set of SQL geometry types.

##### 9.5 Background Information on SQL User-Defined Types
User-Defined Types (UDTs) extend the SQL type system. UDTs can be used to define column types for tables, allowing values stored in the columns to be instances of UDT. SQL functions can take UDT values as arguments and return UDT values as results. UDTs can be defined as subtypes of other UDTs, allowing instances of the subtype to be stored in columns where an instance of the supertype is expected.

##### 9.6 SQL Geometry Type Hierarchy
The SQL geometry types are organized into a type hierarchy, with the root type named Geometry. Subtypes include Point, Curve, Surface, and Geometry Collection. MultiPoint, MultiCurve, and MultiSurface are specific subtypes used to manage homogeneous collections of Points, Curves, and Surfaces.

**Figure 4: SQL Geometry Type Hierarchy**

- **0-dimensional Geometry Types**: Point and MultiPoint.
- **1-dimensional Geometry Types**: Curve and MultiCurve, with subclasses like LineString and LinearRing.
- **2-dimensional Geometry Types**: Surface and MultiSurface, with subclasses like Polygon and PolyhedralSurface.

This standard allows geometry types to be implemented as either pure value-based types or types that support persistent references.