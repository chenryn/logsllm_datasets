  -- 主键信息(注意位置vector数据9.0及以上版本是输出的逻辑顺序,删除列后将改变逻辑顺序; 9.0以前的版本是pg_attribute.attnum;)  
  -- v_pk_vector和v_pk_cnt, v_pk_attname_array通过以下SQL得到.  
  -- v_pk_cnt信息获取.  
  select array_length(conkey, 1) into v_pk_cnt from pg_constraint where conrelid=TG_RELID and contype='p';  
  -- v_pk_vector, v_pk_attname_array 信息获取.  
  if substring(version(),12,1) = '9' then  
    select string_agg(rn::text, ' ')::int2vector, array_agg(attname) into v_pk_vector, v_pk_attname_array from  
      (select row_number() over() AS rn, attnum, attname from pg_attribute where attnum>0 and not attisdropped and attrelid=TG_RELID) AS t        
      where attnum in                                                                                 
      (select unnest(conkey) from pg_constraint where conrelid=TG_RELID and contype='p');  
  elsif substring(version(),12,1) = '8' then  
    select string_agg(attnum::text, ' ')::int2vector, array_agg(attname) into v_pk_vector, v_pk_attname_array from pg_attribute   
      where attrelid=TG_RELID  
      and attnum in  
      (select unnest(conkey) from pg_constraint where conrelid=TG_RELID and contype='p');  
  else  
    -- 其他版本返回异常  
    raise exception 'PostgreSQL Version not 8 or 9.';  
  end if;  
  y := 0;  
  case TG_OP  
  when 'INSERT' then  
    -- 生成远程要执行的insert语句, id是这个表的主键. 如果是多列值的则需要得到按v_pk_vector顺序的text[], 考虑到兼容性不使用array的foreach循环  
    for i in select * from unnest(v_pk_attname_array) AS t(attname) loop  
      if y = 0 then  
        execute 'select array[('||quote_literal(NEW)||'::'||v_nsp_name||'.'||v_table_name||').'||i.attname||']::text[]' into v_pk_att_vals_array;  
      else  
        tmp_v_pk_att_vals_array := v_pk_att_vals_array;  
	execute 'select array_append($1, ('||quote_literal(NEW)||'::'||v_nsp_name||'.'||v_table_name||').'||i.attname||'::text)' into v_pk_att_vals_array using tmp_v_pk_att_vals_array;  
      end if;  
      y := y+1;  
    end loop;  
    select * into v_query from dblink_build_sql_insert(v_nsp_name||'.'||v_table_name, v_pk_vector, v_pk_cnt, v_pk_att_vals_array, v_pk_att_vals_array);  
  when 'DELETE' then  
    -- 生成远程要执行的delete语句, id是这个表的主键. 如果是多列值的则需要得到按v_pk_vector顺序的text[]  
    for i in select * from unnest(v_pk_attname_array) AS t(attname) loop  
      if y = 0 then  
        execute 'select array[('||quote_literal(OLD)||'::'||v_nsp_name||'.'||v_table_name||').'||i.attname||']::text[]' into v_pk_att_vals_array;  
      else  
        tmp_v_pk_att_vals_array := v_pk_att_vals_array;  
	execute 'select array_append($1, ('||quote_literal(OLD)||'::'||v_nsp_name||'.'||v_table_name||').'||i.attname||'::text)' into v_pk_att_vals_array using tmp_v_pk_att_vals_array;  
      end if;  
      y := y+1;  
    end loop;  
    select * into v_query from dblink_build_sql_delete(v_nsp_name||'.'||v_table_name, v_pk_vector, v_pk_cnt, v_pk_att_vals_array);  
  when 'UPDATE' then  
    -- 生成远程要执行的update语句, id是这个表的主键. 如果是多列值的则需要得到按v_pk_vector顺序的text[]  
    -- 这里没有使用dblink_build_sql_update来生成update语句, 因为主键也可能被更新. 所以只能拆成两部分.  
    for i in select * from unnest(v_pk_attname_array) AS t(attname) loop  
      if y = 0 then  
        execute 'select array[('||quote_literal(OLD)||'::'||v_nsp_name||'.'||v_table_name||').'||i.attname||']::text[]' into v_pk_att_vals_array;  
      else  
        tmp_v_pk_att_vals_array := v_pk_att_vals_array;  
	execute 'select array_append($1, ('||quote_literal(OLD)||'::'||v_nsp_name||'.'||v_table_name||').'||i.attname||'::text)' into v_pk_att_vals_array using tmp_v_pk_att_vals_array;  
      end if;  
      y := y+1;  
    end loop;  
    -- debug  
    -- raise notice '%', v_pk_att_vals_array;  
    select * into v_query_upd1 from dblink_build_sql_delete(v_nsp_name||'.'||v_table_name, v_pk_vector, v_pk_cnt, v_pk_att_vals_array);  
    -- 初始化  
    v_pk_att_vals_array := null;  
    for i in select * from unnest(v_pk_attname_array) AS t(attname) loop  
      if y = 0 then  
        execute 'select array[('||quote_literal(NEW)||'::'||v_nsp_name||'.'||v_table_name||').'||i.attname||']::text[]' into v_pk_att_vals_array;  
      else  
        tmp_v_pk_att_vals_array := v_pk_att_vals_array;  
	execute 'select array_append($1, ('||quote_literal(NEW)||'::'||v_nsp_name||'.'||v_table_name||').'||i.attname||'::text)' into v_pk_att_vals_array using tmp_v_pk_att_vals_array;  
      end if;  
      y := y+1;  
    end loop;  
    -- debug  
    -- raise notice '%', v_pk_att_vals_array;  
    select * into v_query_upd2 from dblink_build_sql_insert(v_nsp_name||'.'||v_table_name, v_pk_vector, v_pk_cnt, v_pk_att_vals_array, v_pk_att_vals_array);  
  when 'TRUNCATE' then  
    -- 生成远程要执行的truncate语句. 注意这里是truncate table only. 如果是子表, 可以在子表上继续减这样的触发器.  
    v_query := 'truncate table only '||v_table_name;  
  end case;  
  -- 将目标schema和目标表名替换现有表名.  
  case TG_OP  
  when 'UPDATE' then  
    v_dst_query_upd1 := regexp_replace(v_query_upd1, v_table_name, v_dst_nsp_name||'.'||v_dst_table_name, '');  
    v_dst_query_upd2 := regexp_replace(v_query_upd2, v_table_name, v_dst_nsp_name||'.'||v_dst_table_name, '');  
    v_dst_query := v_dst_query_upd1||';'||v_dst_query_upd2;  
  else  
    v_dst_query := regexp_replace(v_query, v_table_name, v_dst_nsp_name||'.'||v_dst_table_name, '');  
  end case;  
  -- debug  
  -- raise notice 'v_dst_query:%', v_dst_query;  
  -- 异步复制逻辑. 异步的情况下如果要做到绝对的远程执行顺序一致并且远程执行的SQL带有事务属性, 请使用londiste3.  
  if v_replica_mode = 'async' then  
    -- 防止远程SQL执行顺序错误的逻辑如下, 原因详见 http://blog.163.com/digoal@126/blog/static/1638770402012731944439/  
    -- 判断sync_err_rec是否被其他会话加RowExclusiveLock锁. 如果发现, 往sync_err_rec写入触发SQL,   
    -- 返回NULL. 不再继续调用dblink_exec(v_conn_name, v_dst_query, false)  
    perform 1 from pg_locks where   
      relation=(select oid from pg_class where relname='sync_err_rec')   
      and pid != pg_backend_pid()  
      and mode='RowExclusiveLock'  
      limit 1;  
    if found then  
      raise notice 'sync_err_rec in syncing, this sql will insert into sync_err_rec but not replica to remote now.';  
      insert into sync_err_rec (nsp_name, table_name, dst_server, dst_query, create_time)   
        values (v_nsp_name, v_table_name, v_dst_server, v_dst_query, clock_timestamp());  
      return null;  
    end if;  
    -- 判断sync_err_rec中是否有dst_server=v_dst_server的记录. 如果发现, 往sync_err_rec写入触发SQL,   
    -- 返回NULL. 不再继续调用dblink_exec(v_conn_name, v_dst_query, false)  
    perform 1 from sync_err_rec where dst_server=v_dst_server limit 1;  
    if found then  
      raise notice 'sync_err_rec has record with %, this sql will insert into sync_err_rec but not replica to remote now.', v_dst_server;  
      insert into sync_err_rec (nsp_name, table_name, dst_server, dst_query, create_time)   
        values (v_nsp_name, v_table_name, v_dst_server, v_dst_query, clock_timestamp());  
      return null;  
    -- 严格意义上来说这里应该加一个else raise; 报错; 原因是如果是并行的插入的话, 可能会出现前面的事务遇到问题插入了sync_err_rec并且还未提交,   
    -- 但是后面的事务没有发现sync_err_rec中的记录, 并且后面的事务又可以正常操作远程库的话, 那么就出现后面的事务在远程先执行, 前面的事务却写入了  
    -- sync_err_rec表的情况, 也就是本地和远端事务的执行顺序不一致.  
    end if;  
  end if;  
  -- 判断连接是否存在, 不存在则创建.  
  if ( dblink_get_connections() @> ('{'||v_conn_name||'}')::text[] ) then   
  else  
    select * into v_conn_status from dblink_connect(v_conn_name, v_dst_server);  
  end if;  
  -- 判断是同步复制还是异步复制  
  if v_replica_mode = 'sync' then  
    -- 同步复制, 远程执行错误将回滚本地事务.  
    select * into v_exec_status from dblink_exec(v_conn_name, v_dst_query, true);  
  elsif v_replica_mode = 'async' then  
    -- 异步复制, 远程执行错误不回滚事务, 只是返回ERROR字符串  
    select * into v_exec_status from dblink_exec(v_conn_name, v_dst_query, false);  
    if (v_exec_status = 'ERROR') then  
      insert into sync_err_rec (nsp_name, table_name, dst_server, dst_query, create_time)   
        values (v_nsp_name, v_table_name, v_dst_server, v_dst_query, clock_timestamp());  
    end if;  
  else  
    raise exception 'replica mode must sync or async.';  
  end if;  
  -- 复制完成, 返回.  
  return null;  
-- 连接异常捕获  
exception  
  WHEN SQLSTATE '08000'   
    or SQLSTATE '08003'   
    or SQLSTATE '08006'   
    or SQLSTATE '08001'   
    or SQLSTATE '08004'   
    or SQLSTATE '08007'   
    or SQLSTATE '08P01' THEN  
    if v_replica_mode = 'async' then  
      insert into sync_err_rec (nsp_name, table_name, dst_server, dst_query, create_time)   
        values (v_nsp_name, v_table_name, v_dst_server, v_dst_query, clock_timestamp());  
      raise notice 'CONNECTION EXCEPTION, remote SQL write to sync_err_rec';  
      return null;  
    elsif v_replica_mode = 'sync' then  
      raise;  
    else  
      raise exception 'replica mode must sync or async.';  
    end if;  
-- 其他异常不记录到sync_err_rec, 仅用于区分同步复制和异步复制.  
END;  
$BODY$ volatile;  
```  
## 同步复制测试  
在local库创建触发器 :   
```  
\c local local  
CREATE TRIGGER tg1 AFTER DELETE or UPDATE or INSERT ON loc_test FOR EACH ROW EXECUTE PROCEDURE f_sync_test('dst', 'remote', 'rmt_test', 'aaa_bbb_digoal', 'sync');  
CREATE TRIGGER tg2 AFTER TRUNCATE ON loc_test FOR EACH STATEMENT EXECUTE PROCEDURE f_sync_test('dst', 'remote', 'rmt_test', 'aaa_bbb_digoal', 'sync');  
```  
在remote库创建触发器 :   
```  
\c remote remote  
CREATE TRIGGER tg1 AFTER DELETE or UPDATE or INSERT ON rmt_test FOR EACH ROW EXECUTE PROCEDURE f_sync_test('dst', 'local', 'loc_test', 'aaa_bbb_digoal', 'sync');  
CREATE TRIGGER tg2 AFTER TRUNCATE ON rmt_test FOR EACH STATEMENT EXECUTE PROCEDURE f_sync_test('dst', 'local', 'loc_test', 'aaa_bbb_digoal', 'sync');  
```  
插入 :   
```  
local=> insert into loc_test select generate_series(1,10),'abc',now(),now();  
INSERT 0 10  
local=> select * from loc_test;  
 pk1 | pk2 |             info              |      crt_time       | mod_time   
-----+-----+-------------------------------+---------------------+----------  
   1 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   2 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   3 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   4 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   5 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   6 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   7 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   8 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   9 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
  10 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
(10 rows)  
local=> \c remote remote  
You are now connected to database "remote" as user "remote".  
remote=> select * from rmt_test ;  
 pk1 | pk2 |             info              |      crt_time       | mod_time   
-----+-----+-------------------------------+---------------------+----------  
   1 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   2 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   3 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   4 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   5 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   6 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   7 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   8 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   9 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
  10 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
(10 rows)  
remote=> insert into rmt_test select generate_series(11,12),'abc',now(),now();  
INSERT 0 2  
remote=> select * from rmt_test;  
 pk1 | pk2 |             info              |      crt_time       | mod_time   
-----+-----+-------------------------------+---------------------+----------  
   1 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   2 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   3 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   4 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   5 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   6 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   7 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   8 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   9 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
  10 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
  11 | abc | 2013-03-11 15:03:01.569531+08 | 2013-03-11 15:03:02 |   
  12 | abc | 2013-03-11 15:03:01.569531+08 | 2013-03-11 15:03:02 |   
(12 rows)  
remote=> \c local local  
You are now connected to database "local" as user "local".  
local=> select * from loc_test;  
 pk1 | pk2 |             info              |      crt_time       | mod_time   
-----+-----+-------------------------------+---------------------+----------  
   1 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   2 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   3 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   4 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   5 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   6 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   7 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   8 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
   9 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
  10 | abc | 2013-03-11 15:02:15.769929+08 | 2013-03-11 15:02:16 |   
  11 | abc | 2013-03-11 15:03:01.569531+08 | 2013-03-11 15:03:02 |   
  12 | abc | 2013-03-11 15:03:01.569531+08 | 2013-03-11 15:03:02 |   
(12 rows)  
```  
更新 :   
```  
local=> update loc_test set pk2='new' where pk1=1;  
UPDATE 1  
local=> select * from loc_test where pk1=1;  
 pk1 | pk2 |             info              |      crt_time       | mod_time   
-----+-----+-------------------------------+---------------------+----------  
   1 | new | 2013-03-11 15:20:12.791216+08 | 2013-03-11 15:20:13 |   
(1 row)  
local=> \c remote remote  
You are now connected to database "remote" as user "remote".  
remote=> select * from rmt_test where pk1=1;  