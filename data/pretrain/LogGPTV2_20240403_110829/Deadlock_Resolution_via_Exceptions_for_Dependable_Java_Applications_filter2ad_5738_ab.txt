denoted as DEADKNOT(p), may represent a nested moni-
tor deadlock or a circular deadlock [9]. In the case of a cir-
cular deadlock, because all elements in DEADKNOT(p) are
on a cycle consisting of L-edges only, the term DEADCY-
CLE(p) is used in the place of DEADKNOT(p). All nodes
in DEADCYCLE(p) represent deadlocked threads while a
general DEADKNOT(p) may contain false positives.
The possible false positives in DEADKNOT(p) are due
to the N-edges. If DELTA(Y,C,p) is 0 for all Y’s and C’s,
then there is no false positive in DEADKNOT(p), but some
genuine deadlocks cannot be reported via DEADKNOT(p);
otherwise, there can be false postives, e.g., thread X in
DEADKNOT(p) blocked on condition variable C is a false
positive if the node T(X) has some outgoing N-edges but
does not have an outgoing N-edge to a node representing a
thread that WILL produce a notiﬁcation for condition vari-
able C at some time point q>p. Positive DELTA values,
however, support detecting many genuine deadlocks in time
via DEADKNOT(p). The average interval up to time point
p during which thread Y does not produce a notiﬁcation for
condition variable C is a good candidate for DELTA(Y,C,p).
Such intervals can be calulated by an extended yet efﬁcient
proﬁler used by a just-in-time (JIT) compiler, and N-edges
based on positive DELTA values can be efﬁciently estab-
lished and destroyed at runtime.
It requires relatively little programming effort to ob-
tain an efﬁcient implementation of this deadlock detection
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:08:07 UTC from IEEE Xplore.  Restrictions apply. 
method, which integrates the blocked-group-based solution,
the timer-based solution and the knot detection solution. An
initial implementation of this method with the TIMEOUT
value being a parameter and with all DELTA values being 0
is discussed in section 5.
3. Deadlock exceptions and their handlers
In addition to a practical deadlock detection method,
practical and effective deadlock resolution requires abstrac-
tions for representing deadlocks and false positives, and
mechanisms for reporting and resolving deadlocks.
Deadlocks represent not only abnormal states but also
fatal errors: a thread cannot run any more if it is dead-
locked. Conceptually speaking, exceptions represent ab-
normal states. In practice, as part of its runtime support,
Java provides an exception handling mechanism to help
programmers write reliable and robust programs in a struc-
tured and controlled manner. Thus, it is natural to exploit
exceptions to support deadlock resolution.
In this section, I ﬁrst brieﬂy introduce how Java supports
exception handling, then present a design of exceptions for
encoding various deadlock states and discuss two types of
handlers for deadlock exceptions.
3.1. Exception handling in Java
Java exceptions are ﬁrst-class objects representing run-
time errors, and they contain rich information about the ex-
ception state for the sake of exception handling. Like other
types of objects, exceptions can be created, passed to meth-
ods as arguments, and garbage collected. Unlike other types
of objects, exceptions can be thrown by throw statements in
program code or by the JVM.
When exceptions are thrown, they are passed to their
handlers, the closest dynamically enclosing catch clauses
that can handle the thrown exceptions, unless the handlers
are unavailable. Catch clauses are associated to try blocks,
which represent code that needs to be protected against ex-
ceptions. There can be several catch clauses for a try block,
as long as they catch different types of exceptions.
Upon receiving an exception object, an exception han-
dler begins to execute.
If there is not an exception han-
dler for an exception, the method uncaughtException for the
thread group to which current thread belongs is invoked and
then the current thread exits. So Java exception handling is
thread-local in some sense.
Programmers can deﬁne their own exception classes by
extending the existing exception hierarchy.
Java excep-
tions are objects of the predeﬁned class Throwable or its
subclasses. RuntimeException is a subclass of Throwable.
Deadlock exceptions are deﬁned as new subclasses of Run-
timeException.
A
B
means that
B is a subclass
of A
RuntimeException
DeadLock
DeadEnd
 DeadKnot
DeadCycle
Figure 1. An exception hierarchy for dead-
locks
3.2. An exception hierarchy for deadlocks
Speciﬁcally, there are four deadlock exception classes,
and they form an exception hierarchy, as shown in
Figure 1. The DeadLock(DeadEnd, DeadKnot, Dead-
Cycle,
class models the collection of DEAD-
LOCK(p)(DEADEND(p), DEADKNOT(p), DEADCY-
CLE(p), resp.) for all p’s.
resp.)
no deadlock)
DeadLock has the following ﬁelds:
• The number of threads involved (special value: 0 for
• The group id of this deadlock (special value: -1 for not
• An encoding of an extended dependency graph for this
deadlock. More speciﬁcally, for each thread involved,
it contains:
applicable, 0 for the default group)
1. The thread object
2. Whether this thread has been delegated a dead-
lock exception
3. The type of the resource this thread is waiting for,
e.g., locks. Moreover, if instances of the resource
type can be missed, e.g., notiﬁcations, then
(a) Whether the thread has ever missed an in-
stance of the requested resource
(b) Whether the thread has ever received an in-
stance of the requested resource
4. The owners/producers of the resource this thread
is waiting for
The ﬁeld “number of threads involved” gives program-
mers an intuitive knowledge of how complex the deadlock
is. If the ﬁeld value is 0, then all deadlock resolvers, which
will be discussed in the next subsection, are blocked, and
they are the only non-daemon alive threads in the system.
The ﬁeld “group id of this deadlock” records the id of a
blocked group. Programmers can put related threads into a
group so that when all currently alive threads in this group
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:08:07 UTC from IEEE Xplore.  Restrictions apply. 
are blocked, a DeadLock exception is thrown if no instance
of a subclass is thrown. Such a group can be explicitly spec-
iﬁed by exploiting existing ThreadGroup APIs to create a
thread group with its name in the format of “Deadlock-
Group” followed by the group id, an integer no less than
1. Threads other than deadlock resolvers and not in any ex-
plicit group belong to the default group, whose id is 0. If
this ﬁeld value is -1, then this deadlock is not detected by
the blocked-group-based solution.
The encoding of an extended dependency graph provides
useful information for deadlock recovery and false positive
identiﬁcation. Delegation of a deadlock will be discussed in
the next subsection.
As subclasses of DeadLock, DeadEnd, DeadKnot and
DeadCycle inherit DeadLock’s ﬁelds. DeadEnd contains as
its own ﬁeld an array of length “the number of threads in-
volved”: for each possibly deadlocked thread, the average
interval during which it is not running is recorded as an ele-
ment in this array. This array, denoted as AV INTERVALS,
helps programmers determine the TIMEOUT value, as will
be shown in subsection 4.3.
As DeadCycle is a special case of DeadKnot, DeadCy-
cle is designed as a subclass of DeadCycle. Because a sub-
class instance contains more information than a superclass
instance, the JVM runtime always creates an instance of the
most speciﬁc exception class suitable for a detected dead-
lock. This principle prescribes the order of deadlock detec-
tion, which will be described in section 5.
A thrown deadlock exception, which represents a dead-
lock occurence (with possible false positives), is supposed
to be caught by a well-designed handler that can resolve the
deadlock occurence and identify the false positives. I dis-
cuss two types of deadlock exception handlers in the next
subsection.
3.3. Deadlock handlers: global v.s. local
Deadlock exception handlers can be written and installed
for an application thread that may deadlock. These dead-
lock handlers are classiﬁed as local deadlock handlers.
One approach to make use of local deadlock handlers is
to have the JVM runtime throw a deadlock exception to a
thread which would otherwise be about to deadlock. This
approach was partially implemented around Summer 2002,
and reported in [11]. As also pointed out by a reviewer,
local deadlock handlers can exploit threads’local states and
program semantics to perform ﬁne-grained recovery actions
like releasing a resource currently not under use and picking
up a possibly deadlock-free execution path.
Because it is hard to know beforehand which threads will
get involved in a deadlock in which order, in most cases lo-
cal deadlock handlers have to be written and installed for all
potentially deadlocked threads in order not to miss a dead-
lock exception. Furthermore, this time-consuming task is
even not always feasible in the presence of unchangeable
and invisible code.
To overcome the shortcomings of local deadlock han-
dlers, when a deadlock is detected, my current approach
always gets a deadlock exception thrown to one of two spe-
cial threads, which are referred to as deadlock resolvers
and which adopt some easy-to-follow programming con-
ventions. DeadEnd exceptions are thrown to one deadlock
resolver, denoted as TimerResolver; all deadlock exceptions
but DeadEnd are thrown to the other deadlock resolver, de-
noted as NoTimerResolver. When deadlock resolvers are
blocked and they are the only non-daemon alive threads in
the system, a DeadLock(DeadEnd, resp.) exception with
the value of the ﬁeld “the number of threads involved” be-
ing 0 is thrown to NoTimerResolver(TimerResolver, resp.).
To be deployed as a deadlock resolver, a thread should
belong to a thread group of the name “DeadlockResolver-
Group.” Moreover, TimerResolver should have “TimerRe-
solver” as its thread name, and NoTimerResolver should
have “NoTimerResolver” as its thread name. A program-
mer can deploy both, either, or neither of these two dead-
lock resolvers for a program.
Deadlock resolvers are set to have highest thread priority.
Both deadlock resolvers should be started before any other
threads, otherwise some deadlocks may be missed. Either
deadlock resolver should invoke join() for itself. NoTimer-
Resolver invokes join() for itself without a timeout value.
In regular programs under standard JVMs, an invocation of
join() for the current thread without a timeout value makes
the current thread blocked forever. However, in my imple-
mentation using a modiﬁed JVM that supports deadlock ex-
ceptions, when the JVM detects a potential deadlock occur-
rence other than a DEADEND(p) instance, it will awaken
up NoTimerResolver, create an instance of the most spe-
ciﬁc class for this deadlock occurrence, and throw a dead-
lock exception to NoTimerResolver. This creative use of
join() facilitates programming and implementation.
To use TimerResolver, programmers should set up the
TIMEOUT value for the timer by passing a timeout value
when TimerResolver invokes join() for itself. When the
time is out for join(), the JVM will run a piece of code to
check if there are threads waiting for some resources for a
time period no less than the timeout value. If such poten-
tially deadlocked threads are found, a DeadEnd exception is
thrown to TimerResolver. To use join() with a timeout value
in a loop in TimerResolver enables dynamically changing
the timeout value. Usually most code in both resolvers is
contained in a loop for the sake of continuous deadlock res-
olution. Such code contains exception handlers for dead-
lock exceptions, and the term global deadlock handlers is
used to refer to the deadlock exception handlers installed
for and executed by deadlock resolvers.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:08:07 UTC from IEEE Xplore.  Restrictions apply. 
Global deadlock handlers are suitable for performing
coarse-grained recovery actions such as killing a thread.
However, unlike local deadlock handlers, they are not able
to perform some ﬁne-grained recovery actions based on
deadlocked thread states. To exploit the beneﬁts of local
deadlock handlers, a deadlock resolver can pick up a pos-
sibly deadlocked thread with local deadlock handlers in-
stalled, and delegate the deadlock exception object to this
deadlocked thread. No new API is needed for delegation;
a deadlock resolver just invokes interrupt() for the thread
which the deadlock exception is to be delegated to. When
executing interrupt() for a deadlocked thread invoked by a
deadlock resolver, the JVM runtime will restore the dead-
locked thread to the state right before it got deadlocked and
then throw the current deadlock exception to it.
The two complementary deadlock handler types and
the four useful deadlock exception classes enable effective
deadlock recovery in programming practice. In the next sec-
tion, several examples are used to illustrate the utility of
deadlock exceptions and their handlers.
4. Deadlock exceptions in programming prac-
tice
Deadlock exceptions and their handlers can be used in
many ways. In this section, one example shows a common
usage of deadlock exceptions: to resolve deadlocks that oc-