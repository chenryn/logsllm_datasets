miners who attempt to withhold their proofs. In these simulations,
we do include Rules I and II from Section VIII-B. As a result,
attacking miners give up some of their rewards to honest miners.
mines until either she is able to assemble a block as the miner
of V1; or it is clear that the honest miners are more likely to
release a block without her withheld proof sets. In the latter
case, she disseminates her withheld proof sets, hoping that
some will be included in the proof package.
To thwart the attack, Bobtail includes two simple rules
(originally described in Section II-B).
• Rule I: it is considered honest behavior for miners to
prioritize inclusion of their own proofs when assembling
a block. As a result, no miner beneﬁts more from this
behavior than any other.
• Rule II: after prioritizing their own proof sets, if multiple
subsets of k proof sets can be used to assemble a block,
an honest miner will select proof sets from other miners in
the order that they were received locally over the network.
In other words, the proof sets of the withholding attacker are
likely left out if withheld too long.
We evaluated this attack using a Monte Carlo simulation, a
variation of the one used in earlier sections. Fig. 10 shows the
12
llllllllllllllllllllllllllllllllllllllll primarybonusesRule I only0.00.10.20.30.40.50.00.10.20.30.40.502468101214161820Mining powerCount per block (mean)llattackerhonestllllllllllllllllllllllllllllllllllllllllprimarybonusesRules I and II0.00.10.20.30.40.50.00.10.20.30.40.502468101214161820Mining powerCount per block (mean)llattackerhonestPROOF: Suppose that the attacker has hash rate x. If x ≤ 1
k ,
then clearly the attack can succeed no more often than once
k . According to
out of every k blocks. Next, suppose that x > 1
Lemma 5, in expectation, the attacker will mine fraction x of
the k proofs in each block. If the attacker generates the 1OS,
but also generates other proofs after it, then the others will
incur a bonus cost. This is because they would have received
bonus if the attacker released the block, but receive none when
he conducts a DoS attack. However, with probability 1
xk , the
attacker will generate the 1OS after generating all his other
proofs, in which case he would not have received any bonus
anyhow. This is the only way that a block can be subject to
DoS attack without incurring bonus cost. The attacker can
successfully DoS attack no more often than the frequency with
which he generates the 1OS, which occurs with probability x.
It follows that the total fraction of blocks upon which a DoS
attack can be inﬂicted without bonus cost is x
k .
xk = 1
2
Increase in inter-block time. Even when the block is withheld
by the attacker, eventually a proof lower than the attacker’s
lowest will be generated, whose owner will also be capable
of mining the block. Even when the attacker controls a large
fraction of the hash rate, the expected waiting time for this
lower proof is a low-order multiple of the typical block time.
THEOREM 5: Assume that target tk is tuned so that
the expected block time is T seconds. When the attacker
has up to 50% of the total hash rate, the expected time
for honest miners to replace the 1OS for a block subject
to DoS attack does not exceed 2T .
PROOF: Eq. 5 establishes that r = vh/S where S is the size
of the hash space, h is the expected number of hashes required
to mine a block, and v and r are (respectively) the expected
value and frequency with which the minimum hash is generated
during interval I. According to Theorem 7, X1 ∼ Expon(1/r)
is a random variable representing the number of intervals I
required to ﬁnd a proof low enough to assemble a block. If I
is one second, then blocks are expected after T intervals so
1 ∼ Expon(1/r∗) be a random
that E[X1] = T . Now let X∗
variable denoting the number of intervals required once the
attacker removes his portion of hash rate. If the attacker holds
50% of the total hash rate, then h∗ = h/2 and
E[X∗
1 ] =
1
r∗ =
S
v(h/2)
= 2
S
vh
= 2
1
r
= 2E[X1] = 2T.
Therefore, in expectation, honest miners are capable of replac-
ing a 1OS generated by the attacker in time equal to twice the
target block inter-arrival time T .
2
IX. LIMITATIONS
6(k2+k) = O(cid:0) 1
8k+4
(cid:1), but comes at the cost of a larger
Bobtail has limitations and disadvantages compared to
existing PoW systems. Bobtail’s reduction in variance decreases
with k by
block. Existing Bitcoin blocks consist of an 80 byte header and
body that contains the transaction set. In Bobtail, the header
H contains an additional 32-byte supporting proof s1. The
Bobtail body includes the transaction set T like Bitcoin, and
k
additionally, for each value of k > 1, the size of proof package
P is increased by one proof set consisting of four 32-byte
values. Similarly, the coinbase reward C increases by a 32-
byte address per k. The header must also be signed, which is
another 32-byte value. Hence, Bobtail blocks are approximately
128(k − 1) + 32k + 144 bytes not including the size of T ; for
example when k = 40, the header would be approximately
6.3KB. This overhead is small relative to the size of the block:
0.61% of Bitcoin’s 1 MB blocks, and 0.02% of Bitcoin Cash’s
32 MB blocks. Bobtail’s increased header size is signiﬁcant
for light-clients (e.g. [1, 2]), which validate only block headers,
but we note that these clients can discard headers once they
have been validated.
The additional information contained in Bobtail blocks
would add little additional overhead to block propagation
because redundant information can be propagated using the
Graphene protocol [38]. Graphene provides a compressed
representation of a block’s transactions, taking advantage of the
fact that transactions are typically propagated and stored at peers
ahead of the block. It can be applied to Bobtail advantageously
in two ways. First, Bobtail can improve Graphene compression
as follows. Whether the lowest proof set will ultimately become
V1 is unknown until a ﬁnal block is assembled. However, the
transactions of the lowest proof set at any given time can be
prioritized for propagation by peers, ensuring better Graphene
performance and faster block propagation. Second, the proof
sets contained in K can be numerous, but like transactions, they
are always propagated ahead of an assembled block. Graphene
can be applied to propagating K, where the proof sets take the
place of transactions in the protocol.
Although we have investigated numerous potential attack
vectors, our security analysis of Bobtail is not comprehensive.
It is likely that techniques similar to those employed by
Sapirshtein et al. [41], Gervais et al. [26], and Zhang et al. [44]
are required to achieve this end. We note that because these
works each use a Markov Decision Process (MDP) to model
block creation only, their results do not apply to Bobtail. In
other words, none of these works have a model that captures
the complexity of Bobtail’s proof creation and dissemination
process. Indeed, we have communicated directly with the
authors of [44], who have acknowledged that Bobtail was
not modeled in that recent work. A post-publication revision
of the aforementioned paper acknowledges this fact.4
X. RELATED WORK
Our approach is related to previous results in proof-of-
work, cryptographic puzzles, and improvements to blockchain
architectures.
Foundations of PoW. A large number of papers have explored
applications of proof-of-work (PoW). Dwork and Naor [19] ﬁrst
suggested PoW in 1992, applying it as a method to thwart spam
email. A number of subsequent works similarly applied PoW to
thwarting denial-of-service (DoS) attacks [4, 13, 15, 25, 27, 43].
Our approach can be adopted into many of these past works
to improve computational variance. Jakobsson and Juels [29]
and Jules and Brainerd [30] examine the security properties
of PoW protocols, and base their theorems on the average
4https://www.esat.kuleuven.be/cosic/publications/article-3005.pdf
13
work required; our approach would provide stronger guarantees
under their theorems since the variance is lower. Laurie and
Clayton [32] examine the practical limitations in deploying
PoW solutions in DoS scenarios. Douceur [18] noted in 2002
that proofs of work can mitigate Sybil attacks. Also in 2002,
Back [5] applied PoW to cryptocurrencies. Back noted the high
variance of computational PoW and regarded it as an open
problem. Nakamoto’s Bitcoin [35] built on these ideas.
Similar protocols. Bobtail is situated among a number of
related PoW protocols introduced in recent years, beginning
with the seminal Bitcoin whitepaper [35]. FruitChains [39]
is the most similar work to ours but lacks many of the
beneﬁts of our approach. Like Bobtail, FruitChains thwarts
withholding attacks that enable selﬁsh mining, and it also
reduces the variance of how often rewards are issued to
miners. Unlike Bobtail, FruitChains offers no reduction in
the variance of block times, and therefore does not mitigate
doublespend attacks. Bitcoin-NG [22] also offers low-variance
transaction announcements via PoW-based leader election.
However, because inter-leader time variance would still follow
an exponential distribution, unlike Bobtail, Bitcoin-NG does not
reduce doublespend or selﬁsh mining vulnerability. Furthermore,
unlike our approach, Bitcoin-NG sets up the elected leader as
a single point of failure and attack.
Leader election. In Bobtail, multiple miners collaborate to
generate the PoW required to mine a block. They do this by
submitting partial PoW, called proofs, to the network. Anyone
with hardware capable of generating proofs can participate, yet
only the miner who generates the lowest proof, the 1OS, can
determine the set of transactions in a block. In this sense, the
Bobtail mining process is a form of leader election whereby
miners propose blocks as they produce proofs and the lowest of
these proofs determines the leader whose proposal is accepted.
This form of leader election is similar to many existing PoW
systems including Bitcoin [35] and its derivatives except that,
in the latter, each proof is independently sufﬁcient to propose a
block and appoint a leader. All of these approaches contrast with
Bitcoin-NG [22], which ﬁrst elects a leader who then proposes
blocks after election until the next leader is elected. Finally,
we note that leader election in Bobtail contrasts sharply with
classic Byzantine Fault Tolerant (BFT) protocols [42]. Among
many other differences, BFT restricts the leader election pool
while Bobtail does not.
Broader impact. Our work is complementary to and improves
upon most any work that combines PoW with BFT [11, 16, 31].
Some blockchains are not based on computational proof of
work, and our solution does not apply to them. These include
proof-of-storage [34], proof-of-stake [6, 7], and blockless [10]
schemes. However, currently, almost all the wealth stored in
cryptocurrencies is in computational PoW blockchains that
our approach does apply to, including Bitcoin, Bitcoin Cash,
Litecoin, Ethereum, and Ethereum Classic.
Reducing variance. Much more limited is the work related
to reducing variance in random computational processes. In
2003, Abadi et al. [3] suggested memory-bound functions as a
better foundation for avoiding the variance in CPU resources
among users. Indeed, the ETHASH [20] PoW algorithm in
Ethereum [21] adopted a PoW function that requires more
memory than most ASICSs provide. In contrast, our goal is
to reduce the variance of the entire network’s time to solve
a PoW problem, and it is not to increase egalitarianism or
increase participation by eschewing specialized hardware. In
any case, our approach is applicable to ETHASH. Coelho [14]
proposes a PoW puzzle based on Merkle trees that requires
an exact number of steps and therefore has no computational
variance. Without variance, the same miner would always win,
and therefore the method is unsuitable for blockchains.
XI. CONCLUSION
We have designed and characterized a novel method of low-
variance blockchain mining called Bobtail. We have derived
expressions for the expectation and variance of the Bobtail
mining proof of work and its mining time for any value of k.
Using these expressions, we have shown that Bobtail reduces
variance in block inter-arrival time by a factor of O(1/k),
compared to using k = 1. We have also shown that forks are
inadvertently created by Bobtail miners no more often than
existing systems, and that dishonest miners receive signiﬁcantly
lower rewards due to minor protocol adjustments. Furthermore,
we have demonstrated that low-variance mining signiﬁcantly
reduces the effectiveness of doublespend and selﬁsh mining
attacks, and that our design thwarts withholding and denial-
of-service attacks. Finally we have introduced a policy for
miner coordination in Bobtail that keeps network trafﬁc to a
minimum.
ACKNOWLEDGMENT
The authors would like to thank David Thibodeau for his
careful review of this paper on multiple occasions as well as
the many helpful discussions we had with him.
REFERENCES
“Electrum Bitcoin Wallet,” https://electrum.org.
“Neutrino Bitcoin Cash Wallet,” https://neutrino.cash.
[1]
[2]
[3] M. Abadi, M. Burrows, M. Manasse, and T. Wobber, “Moderately
Internet Technol.,
[Online]. Available:
hard, memory-bound functions,” ACM Trans.
vol. 5, no. 2, pp. 299–327, May 2005.
http://doi.acm.org/10.1145/1064340.1064341
[4] T. Aura, P. Nikander, and J. Leiwo, “Dos-resistant authentication
with client puzzles,” in Revised Papers from the 8th International
Workshop on Security Protocols, 2001, pp. 170–177. [Online]. Available:
http://dl.acm.org/citation.cfm?id=647218.720854
[5] A. Back, “Hashcash - Amortizable Publicly Auditable Cost-Functions,”
2002. [Online]. Available: http://www.hashcash.org/papers/amortizable.
pdf
I. Bentov, A. Gabizon, and A. Mizrahi, “Cryptocurrencies without proof
of work,” in International Conference on Financial Cryptography and
Data Security. Springer, 2016, pp. 142–157.
I. Bentov, C. Lee, A. Mizrahi, and M. Rosenfeld, “Proof of Activity:
Extending Bitcoin’s Proof of Work via Proof of Stake [Extended
Abstract],” ACM SIGMETRICS Performance Evaluation Review, vol. 42,
no. 3, pp. 34–37, 2014.
“Bitcoin (BTC),” https://github.com/bitcoin/bitcoin.
[8]
[9] Bitcoin Unlimited, “Bitcoin cash implementation,” https://github.com/
[6]
[7]
BitcoinUnlimited/BitcoinUnlimited.
[10] X. Boyen, C. Carr, and T. Haines, “Blockchain-Free Cryptocurrencies: A
Framework for Truly Decentralised Fast Transactions,” Cryptology ePrint
Archive, Report 2016/871, Sept 2016, http://eprint.iacr.org/2016/871.
[11] V. Buterin and V. Grifﬁth, “Casper the friendly ﬁnality gadget,” https:
//arxiv.org/abs/1710.09437, Oct 2017.
14
[12] G. Casella and R. L. Berger, Statistical inference. Paciﬁc Grove,
CA: Brooks Cole, 2002. [Online]. Available: http://opac.inria.fr/record=
b1134456
[13] L. Chen and W. Mao, “An auditable metering scheme for web
advertisement applications,” Information Security, pp. 475–485, 2001.
[14] F. Coelho, “An (Almost) Constant-Effort Solution- Veriﬁcation Proof-
of-Work Protocol Based on Merkle Trees,” in Progress in Cryptology –
AFRICACRYPT, June 2008, pp. 80–93.
[15] D. Dean and A. Stubbleﬁeld, “Using client puzzles to protect tls,” in
Proc. Conference on USENIX Security Symposium, 2001. [Online].
Available: http://dl.acm.org/citation.cfm?id=1251327.1251328
[17]
[16] C. Decker, J. Seidel, and R. Wattenhofer, “Bitcoin Meets Strong Con-
sistency,” in Proc. International Conference on Distributed Computing
and Networking (ICDCN), January 2016.
J. A. D. Donet, C. P´erez-Sola, and J. Herrera-Joancomart´ı, “The
Bitcoin P2P Network,” in Proc. International conference on ﬁnancial
cryptography and data security, 2014.
J. Douceur, “The Sybil Attack,” in Proc. International Workshop on
Peer-to-Peer Systems (IPTPS), Mar. 2002.
[18]
[19] C. Dwork and M. Naor, “Pricing via processing or combatting junk
mail,” in Proc. Annual Intl. Cryptology Conference, 1992, pp. 139–147.
[20] ETHASH, https://github.com/ethereum/wiki/wiki/Ethash, Aug 3 2017.
[21]
[22]
“Ethereum Homestead Documentation,” http://ethdocs.org/en/latest/.
I. Eyal, A. E. Gencer, E. G. Sirer, and R. V. Renesse, “Bitcoin-NG:
A Scalable Blockchain Protocol,” in Proc. USENIX Symposium on
Networked Systems Design and Implementation, 2016, pp. 45–59.
I. Eyal and E. G. Sirer, “Majority is not Enough: Bitcoin Mining is
Vulnerable,” in Proc. International conference on ﬁnancial cryptography
and data security. Springer, 2014, pp. 436–454.
[24]
“Fast Internet Bitcoin Relay Engine (FIBRE),” http://bitcoinﬁbre.org/.
[25] M. Franklin and D. Malkhi, “Auditable metering with lightweight
[23]
security.” in Proc. Financial Cryptography, 1997, pp. 151–160.
[26] A. Gervais, G. O. Karame, K. W¨ust, V. Glykantzis, H. Ritzdorf, and
S. Capkun, “On the security and performance of proof of work block-
chains,” in Proc. ACM Conference on Computer and Communications
Security, 2016, pp. 3–16.
[27] B. Groza and B. Warinschi, “Cryptographic Puzzles and DoS Resilience,
Revisited,” Designs, Codes and Cryptography, vol. 73, no. 1, pp. 177–
207, Oct. 2014. [Online]. Available: http://dx.doi.org/10.1007/s10623-
013-9816-5
[28] E. Heilman, A. Kendler, A. Zohar, and S. Goldberg, “Eclipse Attacks on
Bitcoin’s Peer-to-Peer Network,” in Proc. USENIX Security Symposium,
2015, pp. 129–144.
[29] M. Jakobsson and A. Juels, “Proofs of Work and Bread Pudding