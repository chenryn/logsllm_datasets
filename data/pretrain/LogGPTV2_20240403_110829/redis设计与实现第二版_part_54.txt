因为本章介绍的操作涉及二进制位，为了清晰地展示各个位的值，本章会对SDS中
 buf 数组中的 buf[1］字节保存了 SDs 程序自动追加到值的末尾的空字符‘\0’。
buf 数组中的buf[O］字节保存了一字节长的位数组。
口 sdshdr.len 的值为 1，表示这个 sDs 保存了一个一字节长的位数组。
图 22-1展示了用 SDS 表示的，一字节长的位数组：
REDIS_STRING
redisobject
REDIS_STRING
redisobject
type
ptr
type
ptr
图22-2一字节长的位数组的SDS表示
sdshdr
图 22-1SDS 表示的位数组
free
len.
apusps
buf
free
buf
Ien
buf[0]110|111100]1|0
buf[0]buf[1]（空字符）
buf[1](空字符）
---
## Page 369
制位，并返回这个位的值。
字节的第几个二进制位。
组的哪个字节。
22.2
SETBIT命令的实现，详细的情况稍后在介绍SETBIT命令的实现原理时会说到。
3）根据 byte 值和 bit 值，在位数组 bitarray 中定位 offset 偏移量指定的二进
2）计算 bit-(ofset mod 8)+1，bit 值记录了 offset 偏移量指定的二进制位是 byte
2）（3 mod 8）+1 的值为 4。
1）[3÷8”的值为0。
将执行以下操作：
GETBIT  3
举个例子，对于图22-2所示的位数组来说，命令：
1）计算 byte= Lofset÷8”，byte 值记录了 offset 偏移量指定的二进制位保存在位数
GETBIT命令的执行过程如下：
GETBIT  
GETBIT命令用于返回位数组 bitarray在offset 偏移量上的二进制位的值：
口位数组由 buf 数组中的 buf [0]、buf [1]、buf[2］ 三个字节保存，和之前说明的
口 sdshdr.len 属性的值为 3，表示这个 SDs 保存了一个三字节长的位数组。
图22-3展示了另一个位数组示例：
GETBIT命令的实现
0101在buf数组中会被保存为1010010111000011 0000 1111。
一样，buf数组使用逆序来保存位数组：位数组11110000110000111010
REDIS_STRING
redisobject
type
ptr
图22-3三字节长的位数组的SDS表示
sdshdr
free
buf
len
o
buf[2]]
buf[1]1
buf[0]|1
。
buf[3]（空字符）
。
。
。
0
L
第22章二进制位数组365
1
1
---
## Page 370
366·第四部分独立功能的实现
将 SDS 的长度扩展为 len 字节，并将所有新扩展空间的二进制位的值设置为 0。
需要多少字节。
并向客户端返回二进制位被设置之前的旧值：
22.3
为0(1)。
3）计算 byte-Lofset÷8”，byte 值记录了off set 偏移量指定的二进制位保存在位数
2）检查bitarray键保存的位数组（也即是SDS）的长度是否小于len，如果是的话
SETBIT用于将位数组 bitarray 在offset 偏移量上的二进制位的值设置为 value,
1）计算 len=Lofset÷8”+1，len 值记录了保存 offset 偏移量指定的二进制位至少
以下是SETBIT命令的执行过程：
 SETBIT   
因为GETBIT命令执行的所有操作都可以在常数时间内完成，所以该命令的算法复杂度
命令的执行过程如图 22-5 所示。
4）向客户端返回二进制位的值0。
3）定位到 buf[1］ 字节上面，
2)（10 mod 8）+1 的值为 3。
1）[10÷8”的值为1。
将执行以下操作：
GETBIT  10
再举一个例子，对于图22-3所示的位数组来说，命令：
命令的执行过程如图 22-4所示。
4）向客户端返回二进制位的值1。
3）定位到buf[0］字节上面，然后取出该字节上的第4个二进制位（从左向右数）的值。
SETBIT命令的实现
2)返回第4个二进制位的值
2）返回第3 个二进制位的值
1）定位到buf[1]字节
1)定位到buf[0]字节
图 22-5查找并返回offset 为 10 的二进制位的过程
图22-4查找并返回offset为3的二进制位的过程
，然后取出该字节上的第3个二进制位的值。
buf[3]0
buf[2]
buf[1]
buf[0]10100101
buf[0] 10|110]010
buf[1]（空字符）
。
.1
。
01
。
11
。
。
1
L
---
## Page 371
进行扩展的例子。
22.3.2带扩展操作的 SETBIT 命令示例
位数组的样子。
oldvalue 变量，然后将二进制位的值设置为1。
值 2，说明偏移量为1的二进制位是 buf[0］字节的第2个二进制位。
buf[0］字节。
说明偏移量为1的二进制位位于
执行扩展操作。
SDS 的长度不小于1字节，无须
制位至少需要1字节长位数组。
1，这表示保存偏移量为1 的二进
22.3.1
为0(1)。
置为这个二进制位的值。
定的二进制位，首先将指定二进制位现在值保存在oldvalue 变量，然后将新值 value 设
byte 字节的第几个二进制位。
组的哪个字节。
前面展示的 SETBIT例子无须对位数组进行扩展，现在，让我们来看一个需要对位数组
5）定位到buf[0] 字节的第 2 个二进制位上面，将二进制位现在的值0 保存到
4）计算（1 mod 8）+1，得出
3）计算L1÷8”，得出值0,
2）检查位数组的长度，发现
4）计算 bit=（ofset mod 8）+l，bit 值记录了offset 偏移量指定的二进制位是
假设我们对图22-2所示的位数组执行命令：
5）根据 byte 值和 bit 值，在bitarray 键保存的位数组中定位offset 偏移量指
图 22-6展示了 SETBIT命令的执行过程，而图 22-7则展示了 SETBIT命令执行之后，
6）向客户端返回oldvalue 变量的值0。
1）计算L1÷8”+1，得出值
那么服务器将执行以下操作：
SETBIT  1 1
首先，如果我们对图22-2所示的位数组执行命令：
让我们通过观察一些SETBIT命令的执行例子来熟悉SETBIT命令的运行过程。
因为 SETBIT命令执行的所有操作都可以在常数时间内完成，所以该命令的时间复杂度
6）向客户端返回oldvalue变量的值。
SETBIT 命令的执行示例
1）定位到buf[0]字节
图 22-7SETBIT 命令执行之后的位数组
OTOOTTTTto]sna
图 22-6SETBIT命令的执行过程
buf[0]1
buf[1)(空字符）
2）
buf[1]（空字符）
特然
定位到buf[0]字节的第2个二进制位
1
第22章二进制位数组·367
---
## Page 372
368·第四部分独立功能的实现
数组原来已有的二进制位。
以直接在新扩展的二进制位中完成，而不必改动位
所以当程序对buf数组进行扩展之后，写人操作可
执行之后，位数组的样子。
进制位的过程，而图 22-10 则展示了 SETBIT命令
0 保存到oldvalue 变量，然后将
个二进制位，将二进制位现在的
是 buf［1］字节的第5个二进制位。
值 5，说明偏移量为12 的二进制位
buf［1］字节中。
说明偏移量为12的二进制位位于
22-8 所示。
buf 数组的实际长度为5 字节，如图
分配的1字节，扩展之后
加上为保存空字符而额外
2字节的未使用空间，再
策略会为 SDS 额外多分配
组，但 SDS 的空间预分配
序只要求2字节长的位数
为2字节。不过，尽管程
要求将位数组的长度扩展
2 字节要小，所以程序
执行命令所需的最小长！
在的长度为1字节，这
进行检查，得知位数组现
长的位数组。
进制位的值设置为 1。
3）计算12÷8”，
注意，因
5）定位到 buf[1］字节的第
4）计算（12 mod 8）+1，得出
2）对位数组的长度
6）向客户端返回oldvalue 变量的值 0。
1）计算L12÷8”+1，得出值2，这表示保存偏移量为12 的二进制位至少需要2字节
图22-9展示了SETBIT命令定位并设置指定二
那么服务器将执行以下操作：
SETBIT  12 1
因为 buf 数组使用逆序来保存位数组,
得出值1,
会
度
redisobject
值
5
ptr
1）定位到buf[1]字节
图 22-8扩展空间之后的位数组
sdshdr
buf[1] oo0]
buf[0]1
free
图 22-9SETBIT 命令的执行过程
图 22-10执行 SETBIT命令之后的位数组
buf[011
buf[4](未使用）
buf[3](未使用）
buf[2]（空字符）
buf[1]0
0tolotltotlojsna
。
1
buf[4］（未使用）
buf[3]（未使用）
buf[2]（空字符）
buf[4]（未使用）
buf[2]（空字符）
buf[3]（未使用）
。
1
。
1
。
。
Tolo1
o.
。
0
o
。
---
## Page 373
22.4
的整个过程。
命令目前的实现方式要复杂，并且移位带来的CPU时间消耗也会影响命令的执行速度。
buf 数组之后，程序都需要将位数组已有的位进行移动，然后才能执行写人操作，这比 SETBIT
图 22-11至图 22-14模拟了程序在buf 数组按书写顺序保存位数组的情况下，对位数组
而对于图22-16所示的位数组来说，BITCOUNT命令将返回12。
举个例子，对于图22-15所示的位数组来说，BITCOUNT命令将返回4。
BITCOUNT命令用于统计给定位数组中，
图22-11按书写顺序保存的位数组01001101
[ootltlolt [olgna
BITCOUNT 命令的实现
buf[0][o
图22-15BITCOUNT命令示例一
buf[1]（空字符）
buf[1]（空字符）
1
[o。
图 22-14设置指定二进制位的值
1
图 22-13移动已有的二进制位
1
0
buf[1]]0
buf[0]o0
buf[o]o00o0o0!
，值为1的二进制位的数量。
buf[1]
buf[0]1
buf[4]（未使用）
buf[3]（未使用）
buf[2]（空字符）
buf[2](空字符）
buf[1]
图 22-16BITCOUNT 命令示例二
buf[4]（未使用）
buf[3]（未使用）
[0lnq
1
lolo
图 22-12扩展之后的位数组
buf[3]（空字符）
To1
buf[2]（空字符）
。
buf[4]
buf[3]（未使用）
1
。
。
[1l0
。
。
。
0
。
(未使用