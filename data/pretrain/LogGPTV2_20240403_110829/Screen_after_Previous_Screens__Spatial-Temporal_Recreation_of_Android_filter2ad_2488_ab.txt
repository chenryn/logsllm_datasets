⊲ Register reanimation points with the IRE.
if C <: ViewParent then
10: InterleavedReexecutionEngine IRE
11: View Set V ← ∅
12: for Class C ∈ G (cid:31) Classes do
13:
14:
15:
16:
17:
18: View T ← SymbiontApp.getTopLevelView()
19: T .invalidate()
if not isSubView(C) then
IRE.beginOn(C.draw)
View Set views ← C.instances
V ← V ∪ views
⊲ Top-level Views.
⊲ Find top-level Views.
⊲ ‘<:’ denotes subtype.
⊲ Register drawing function.
⊲ Cause screen redraw command to be issued.
20: procedure CATCHREDRAWCOMMAND
⊲ Invoked when redraw command is issued.
21:
22:
23:
24:
25:
26:
for View view ∈ V do
T ← view ⊲ Override the Symbiont App’s top-level View.
⊲ Record largest subView ID.
largestID ← max
v∈view.subViews
deliverRedrawCommand()
v.getField(ID)
⊲ IRE handles re-execution of redrawing code.
Screen s ← T .copyGUIBuffer()
S.insert(largestID, s)
27: end procedure
Selective Reanimation. Once all top-level draw func-
tions are identiﬁed, RetroScope can begin selective rean-
imation of each. First, RetroScope invalidates the sym-
biont app’s current View (Line 19 of Algorithm 1). This
will cause Android to set up and issue a redraw com-
mand to the symbiont app along with a buffer to draw
into. However, RetroScope ﬁrst intercepts this command
and replaces the symbiont app’s top-level View with one
of the target app’s top-level Views identiﬁed previously
(Lines 20–27 in Algorithm 1). Note that RetroScope
does not distinguish between different instances of top-
level Views, it simply reissues redraw commands for ev-
ery previously identiﬁed top-level View instance, even if
duplicates exist.
Since the top-level Views of the symbiont app and the
target app are both default instances of (or inherit from)
the same Android View class, they are interchangeable
as far as the Android framework is concerned (both with
the same functionality). Now RetroScope can inject the
redraw command into the symbiont app which, upon re-
ceiving this command, will naturally invoke the target
app’s top-level draw function (previously marked for re-
animation).
This will trigger the IRE to begin logically interleav-
ing the draw function execution with the symbiont app’s
GUI drawing environment. Most importantly, this will
direct input code/data accesses (i.e., queries to the target
app’s Model) to the appropriate target app functions and
output code/data accesses (i.e., drawing of screens) to
the symbiont app’s running GUI framework. Upon suc-
cessful completion of each draw function reanimation,
RetroScope retrieves and stores the symbiont app’s (now
ﬁlled) screen buffer, switches the top-level View to an-
other marked target app View, and re-injects the redraw
command — reloading the memory image in between to
avoid side effects.
Finally, RetroScope reorders the redrawn screens to
match the temporal order in which they were displayed.
This is done via comparison of View ID ﬁelds in the tar-
get app’s Views (recovered from the memory image). A
View’s ID is an integer that identiﬁes a View. The ID
may not be unique, as some Views may alias others, but
it is always set from a monotonically increasing counter.
This yields the property that app screens can be ordered
temporally by comparing the largest ID among their sub-
Views. Intuitively, the most recently modiﬁed portion of
the screen (sub-View) will yield an increasingly large ID.
3.2
Interleaved Re-Execution Engine
o.* | Pass
o'.* | Pass
)
f
(
.
o
|
f
.
o
o
'
.
f
|
o
'
.
(
f
)
α
β
o'.f | Pass
o.m( ) | Pass
o'.m( ) | o'. (m)( )
o.m( ) | o. (m)( )
C
o
d
e
C
o
n
t
e
x
t
B
a
r
r
i
e
r
)
f
(
.
'
o
|
f
.
'
o
δ
γ
o
.
f
|
o
.
(
f
)
o.f | Pass
o'.m( ) | Pass
Figure 3: State Interleaving Finite Automata.
The key enabling technique behind RetroScope is its
IRE which logically interleaves the state of the target
app into the symbiont app just before it is needed by
the execution. To monitor and interleave the execu-
tion contexts, the IRE intercepts the execution of Java
byte-code instructions corresponding to function invoca-
tions, returns, and data accesses (i.e., instance/static ﬁeld
reads/writes). The IRE’s operation is similar to parsing
a lexical context-free grammar: The current byte-code
instruction (i.e., token) and the context of its operands
(e.g., new/old data) are matched to a state interleaving
USENIX Association  
25th USENIX Security Symposium  1141
ﬁnite automata (Figure 3), where each state transition de-
ﬁnes which runtime environment the IRE should present
to that instruction.
In RetroScope, state interleaving begins at the invoca-
tion of one of the marked top-level draw functions within
the target app. As a running example, Figure 4 shows
a snippet of a draw function’s code along with the live
memory space (containing both the symbiont app and the
target app’s execution environment).
IRE State Tracking.
For each byte code instruction,
the IRE tracks two pieces of information: (1) if the code
being executed is from the memory image (old code) or
from the symbiont app (new code) and (2) if the current
runtime information (i.e., loaded classes, object layouts,
etc.) originates from the memory image (old runtime) or
the symbiont app (new runtime). Based on that, the exe-
cution context may be in any of four possible states:
(new code, new runtime) = α
(new code, old runtime) = β
(old code, new runtime) = γ
(old code, old runtime) = δ
(1)
In Figure 4, we have denoted which state the IRE is in
before and after executing each line of code. For ease
of explanation, Figure 4 presents source code, but Retro-
Scope operates on byte-code instructions only. For ex-
ample, before executing Line 1, the IRE is in α because
no old code or data has been introduced yet. Likewise,
after Line 1, the IRE is in δ as the IRE is then execut-
ing the target app’s draw function (old code) within the
target app’s top-level View object (old runtime). How-
ever, note that the context of runtime data may not (and
often does not) match the context of the code: For exam-
ple, in Line 4, fetching the mDensity ﬁeld from the new
Canvas requires using the new runtime data but is being
performed by old code (resulting in state γ ).
Modeling State-Transitions.
In Figure 3, we gener-
alize the state-transition rule matching to two primitive
operations: Given an object o, state transitions may oc-
cur when accessing a ﬁeld f within o (o. f ) or when in-
voking a method m deﬁned by o (o.m()). Further, o may
be an object loaded from the target app’s memory im-
age or allocated by the target app’s code (i.e., interacting
with this object requires the old runtime data), thus we
denote such old objects as o′ in Figure 3. Note that our
discussion will follow Java’s object-oriented design, but
the transitions in Figure 3 are equally applicable to static
(i.e., o == NULL) execution.
The state transitions in Figure 3 are modeled as
a Mealy machine [29] with the input of each state-
transition being a matched operation and the output being
the corresponding state correction performed by the IRE.
These state corrections (i.e., transition outputs) fall into
three categories: (1) a transition from the new runtime
data to the old runtime data (the function θ ), (2) a tran-
sition from old to new runtime data (the function λ ), and
(3) no change in runtime data (“Pass”). For example, the
transition from α to δ is represented as:
α → δ : o′
.m() | o′
.θ (m)()
(2)
where the input to this transition is a match on o′
.m()
(invoking an old object’s method) and the output state
correction is to switch to the old runtime prior to invok-
ing the method (o′
.θ (m)()). This is exactly the IRE’s
transition before executing Line 1 in Figure 4 as the IRE
must switch to the old runtime prior to invoking the old
View object’s draw function to look up the method’s im-
plementation. Conversely, the transition from γ to α
is represented as:
γ → α : o.m() | Pass
(3)
because this transition occurs when a new object’s
method is invoked (o.m) but the IRE is already using
the new runtime data, thus no runtime data correction is
needed (i.e., “Pass”). This case is observed in Line 11 of
Figure 4. At the beginning of Line 11, the IRE is in state
γ due to the lookup of the new Canvas’s mDensity
ﬁeld on Line 4. Thus, the invocation of getClipBounds
on Line 11 does not require the runtime to change (a
“Pass” transition), but does change from old code to new.
Another important corrective action in Figure 3 is
whether or not a transition crosses the code context bar-
rier (i.e., a horizontal transition). Crossing the code con-
text barrier signiﬁes a switch between fetching new code
(from the symbiont app) to old code (from the memory
image) or vice versa. Although crossing the context bar-
rier alone does not require active correction by the IRE
(e.g., the old runtime’s method deﬁnitions will naturally
direct the execution to the old code), the IRE must note
that the change occurred.
Monitoring which context the code is fetched from
is essential for a number of runtime checks and correc-
tions that the IRE must perform. Firstly, objects allo-
cated while executing old code should use the class def-
initions from the target app (as the Android framework
classes may be vendor-customized or the class may be
deﬁned by the target app itself). Secondly, type compar-
isons (e.g., the Java instanceof operator) executed by
old code must consider both new and old classes but pre-
fer old classes. This is because new objects (which are
instances of classes loaded by the symbiont app’s run-
time) will be passed into old code functions — which
use the target app’s loaded classes that contain “old du-
plicates” of classes common to both executions (e.g., sys-
tem classes). The reverse is true for new code type com-
parisons. Lastly, exceptions thrown during interleaved
execution should be catchable by both old and new code.
1142  25th USENIX Security Symposium 
USENIX Association
Symbiont App Code
o.f data access
Symbiont App State
canvas:
mDensity
mWidth
mHeight
mBitmap
0
1080
1920
IRE State
Target App Code
1.  public void draw(Canvas canvas)
2.  {
…
int density = canvas.mDensity;
8.     if (density != Bitmap.DENSITY_NONE)
9.     {
10.       Rect bounds;
11.       canvas.getClipBounds(bounds);
4.
α
δ
γ
α
Target App State
View this:
mSliderColor 255
mSlideable
mCanSlide
1
mSlideable:
mTag
mViewFlags
mParent
0x0
64
1. public boolean getClipBounds(Rect bounds)
2. {
3.    …
4. }
Popped From IRE State Stack
Code Context Barrier Crosses
γ
δ
α
12.       Bounds.right = this.mSlideable.getRight();
13.       canvas.clipRect(bounds);
…
Figure 4: Example of Interleaved Re-Execution.
Interestingly, we ﬁnd a number of test cases in Section 4