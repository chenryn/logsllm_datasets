            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,  
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,  
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,  
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,  
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,  
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,  
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,  
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,  
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,  
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,  
        )  
        def inv_sub_bytes(s):  
            for i in range(4):  
                for j in range(4):  
                    s[i][j] = inv_s_box[s[i][j]]  
        def add_round_key(s, k):  
            for i in range(4):  
                for j in range(4):  
                    s[i][j] ^= k[i][j]  
        def inv_shift_rows(s):  
            s[0][1], s[1][1], s[2][1], s[3][1] = s[3][1], s[0][1], s[1][1], s[2][1]  
            s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]  
            s[0][3], s[1][3], s[2][3], s[3][3] = s[1][3], s[2][3], s[3][3], s[0][3]  
        xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)  
        def mix_single_column(a):  
            # see Sec 4.1.2 in The Design of Rijndael  
            t = a[0] ^ a[1] ^ a[2] ^ a[3]  
            u = a[0]  
            a[0] ^= t ^ xtime(a[0] ^ a[1])  
            a[1] ^= t ^ xtime(a[1] ^ a[2])  
            a[2] ^= t ^ xtime(a[2] ^ a[3])  
            a[3] ^= t ^ xtime(a[3] ^ u)  
        def mix_columns(s):  
            for i in range(4):  
                mix_single_column(s[i])  
        def inv_mix_columns(s):  
            # see Sec 4.1.3 in The Design of Rijndael  
            for i in range(4):  
                u = xtime(xtime(s[i][0] ^ s[i][2]))  
                v = xtime(xtime(s[i][1] ^ s[i][3]))  
                s[i][0] ^= u  
                s[i][1] ^= v  
                s[i][2] ^= u  
                s[i][3] ^= v  
            mix_columns(s)  
        def bytes2matrix(text):  
            """ Converts a 16-byte array into a 4x4 matrix.  """  
            return [list(text[i:i+4]) for i in range(0, len(text), 4)]  
        def matrix2bytes(matrix):  
            """ Converts a 4x4 matrix into a 16-byte array.  """  
            return bytes(sum(matrix, []))  
        def decrypt_block(ciphertext,key):  
            cipher_state = bytes2matrix(ciphertext)  
            key = bytes2matrix(key)  
            add_round_key(cipher_state, key)  
            inv_mix_columns(cipher_state)  
            inv_shift_rows(cipher_state)  
            inv_sub_bytes(cipher_state)  
            return matrix2bytes(cipher_state)  
        datas = ['D1E8FCB9AC4BDF4948BA54E26A282F9A', '7AEB61B0A637139CD0DCE7DBDB0636F7']  
        keys = ['31ED4989D15E4889E24883E4F0505449', 'C7C00007400048C7C19006400048C7C7', '48064000E8A7FFFFFFF4660F1F440000', 'B85710600055482D501060004883F80E', '4889E5761BB8000000004885C074115D', 'BF50106000FFE0660F1F840000000000', '5DC30F1F4000662E0F1F840000000000', 'BE50106000554881EE5010600048C1FE', '034889E54889F048C1E83F4801C648D1']  
        if __name__ == "__main__":  
            flag = ''  
            for i in range(2):  
                ciphertext = binascii.unhexlify(datas[i])  
                for j in range(3,-1,-1):  
                    key = binascii.unhexlify(keys[j+4*i])  
                    ciphertext = decrypt_block(ciphertext,key)  
                flag += ciphertext.decode("utf-8")  
            print(flag)
# crypto(队友解出)
## AzureRSA
这个题比较坑，最初的时候发现n1和n2有公因数，想和可以直接得到了p和q，然后得到(p-1)*(q-1),e一直，直接求d解密就好了，人生从此迈入顶峰……但是求出p和q之后发现e与φ(n)不互素，无法求d。题目详情：
    n1=0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723L
    e1=0xfae3aL
    c1=0x81523a330fb15125b6184e4461dadac7601340960840c5213b67a788c84aecfcdc3caf0bf3e27e4c95bb3c154db7055376981972b1565c22c100c47f3fa1dd2994e56090067b4e66f1c3905f9f780145cdf8d0fea88a45bae5113da37c8879c9cdb8ee9a55892bac3bae11fbbabcba0626163d0e2e12c04d99f4eeba5071cbeaL
    n2=0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63L
    e2=0x1f9eaeL
    c2=0x4d7ceaadf5e662ab2e0149a8d18a4777b4cd4a7712ab825cf913206c325e6abb88954ebc37b2bda19aed16c5938ac43f43966e96a86913129e38c853ecd4ebc89e806f823ffb802e3ddef0ac6c5ba078d3983393a91cd7a1b59660d47d2045c03ff529c341f3ed994235a68c57f8195f75d61fc8cac37e936d9a6b75c4bd2347L
    assert pow(flag,e1,n1)==c1
    assert pow(flag,e2,n2)==c2
    assert gcd(e1,(p1-1)*(q1-1))==14
    assert gcd(e2,(p2-1)*(q2-1))==14
遇到这种情况也还好，之前遇到过e与φ(n)不互素，且公因数是8的情况，但是用当时的脚本跑并没有跑出来，因为当时的那个数开8次方之后还是证书，但是这一次……开14次方开不出来，所以当时的脚本作废了。附上当时的脚本，说不定以后也能用上呢。
    #-*- coding:utf-8 -*-    # 当指数e和Phi(n)不互素时
    from Crypto.Util.number import *
    import sympy
    def gcd(a,b):
        if a < b:
            a,b = b,a
        while b != 0:
            tem = a % b
            a = b
            b = tem
        return a
    def invalidExponent(p,q,e,c):
        phiN = (p - 1) * (q - 1)
        n = p * q
        GCD = gcd(e, phiN)
        if (GCD == 1):
            return "Public exponent is valid....."
        d = inverse(e//GCD,phiN)
        c = pow(c, d, n)
        plaintext = sympy.root(c, GCD)
        plaintext = long_to_bytes(plaintext)
        return plaintext
    def main():
        p = xxx
        q = xxx
        e = xxx
        c = xxx
        plaintext = invalidExponent(p,q,e,c)
        print plaintext
    main()
最后在比赛方提示了两次的情况下，比赛完几分钟队友做出来了。当时提示中国剩余定理，只尝试了q乘p1和q乘p2，但是没有尝试p1*p2(此情况可解出flag)附上队友risker大佬的脚本，以及[博客](http://mmmmmmlei.cn)：  
结果：  
脚本如下：
    # -*- coding: utf-8 -*-    import gmpy2
    import libnum
    def GCRT(mi, ai):
        # mi,ai分别表示模数和取模后的值,都为列表结构
        assert (isinstance(mi, list) and isinstance(ai, list))
        curm, cura = mi[0], ai[0]
        for (m, a) in zip(mi[1:], ai[1:]):
            d = gmpy2.gcd(curm, m)
            c = a - cura
            assert (c % d == 0) #不成立则不存在解
            K = c / d * gmpy2.invert(curm / d, m / d)
            cura += curm * K
            curm = curm * m / d
        return (cura % curm, curm) #(解,最小公倍数)
    n1=0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723L
    e1=0xfae3aL
    c1=0x81523a330fb15125b6184e4461dadac7601340960840c5213b67a788c84aecfcdc3caf0bf3e27e4c95bb3c154db7055376981972b1565c22c100c47f3fa1dd2994e56090067b4e66f1c3905f9f780145cdf8d0fea88a45bae5113da37c8879c9cdb8ee9a55892bac3bae11fbbabcba0626163d0e2e12c04d99f4eeba5071cbeaL
    n2=0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63L
    e2=0x1f9eaeL
    c2=0x4d7ceaadf5e662ab2e0149a8d18a4777b4cd4a7712ab825cf913206c325e6abb88954ebc37b2bda19aed16c5938ac43f43966e96a86913129e38c853ecd4ebc89e806f823ffb802e3ddef0ac6c5ba078d3983393a91cd7a1b59660d47d2045c03ff529c341f3ed994235a68c57f8195f75d61fc8cac37e936d9a6b75c4bd2347L
    p1=gmpy2.gcd(n1,n2)