5
6
int
=16;
1
8
printf（"%d\n"，i）;
9
printf（"%x\n"，i）;
10
(gdb）break9
Breakpoint1at0x80483ea:file got.C,1ine 9.
然后运行程序。
(gdb)run
Startingprogram:/home/tk/BHD/got
16
Breakpoint 1，main（)at got.c:9
9
printf("%x\n"，i);
断点触发后，再次反汇编main函数，看看是否调用了同一个PLT地址。
(gdb) disassemble main
Dump of assembler code for function main:
0x080483c4:
push
ebp
0x080483c5:
mov
ebp,esp
0x080483c7
:
pue
esp,oxfffffffo
0x080483ca
:
sub
esp,0x20
0x080483cd
:
mov
DWORD PTR[eSp+0x1c],0x10
0x080483d5
:
mov
eax,0x80484d0
0x080483da
:
mov
edx,DWORD PTR[eSp+Ox1c]
0x080483de
:
mov
DWORD PTR [esp+0x4],edx
0x080483e2
:
mov
DWORD PTR[esp],eax
0x080483e5
:
call
0x80482fc
0x080483ea
:
mov
eax,0x80484d4
0x080483ef
:
mov
edx,DWORD PTR [eSp+Ox1c]
0x080483f3
:
mov
DWORD PTR[eSp+Ox4],edx
0x080483f7
:
mov
DWORD PTR[esp]，eax
0x080483fa
:
call
0x80482fc
0x080483ff
:
mov
eax,0x0
0x08048404
:
leave
0x08048405
:
ret
End of assembler dump.
确实调用了PLT中的同一个地址。
---
## Page 173
156附录A捉虫提示
(gdb）x/1i 0x80482fc
0x80482fc:jmp
DWORD PTR ds:0x80495d8
被调用的PLT人口仍I旧立即跳转到GOT。
(gdb)x/1x0x80495d8
0x80495d8:
oxb7ed21c0
但是这一次，printf()的GOT人口改变了，现在它直接指向libc中的printf()
函数。
(gdb）x/10i 0xb7ed21c0
0xb7ed21c0 :
push
ebp
oxb7ed21c1:
mov
ebp,esp
oxb7ed21c3:
push
ebx
0xb7ed21c4:
call
oxb7ea1aaf
oxb7ed21c9:
add
ebx,oxfae2b
0xb7ed21cf:
Sub
esp,oxc
oxb7ed21d2:
lea
eax,[ebp+oxc]
0xb7ed21d5:
mov
DWORD PTR[esp+0x8],eax
0xb7ed21d9:
mov
eax,DWORD PTR[ebp+Ox8]
oxb7ed21dc:mov
DWORD PTR[esp+0x4],eax
现在，如果我们改变printf()的GOT人口地址值，就可以在printf()被调用
时控制程序的执行流。
(gdb)setvariable*(ox80495d8)=0x41414141
（gdb)x/1x 0x80495d8
0X80495d8:
0x41414141
(gdb)continue
Continuing.
Programreceivedsignal SIGSEGV，Segmentation fault.
0x41414141 in??()
(gdb)info registers eip
eip
0x41414141
0x41414141
我们实现了对EIP的控制。真实世界中使用这种漏洞利用技术的例子见第4章。
要确定一个库函数的GOT地址，你可以像前面的例子那样使用调试器，也可
以使用objdump或readelf命令。
linux$ objdump -R got
got:
file format elf32-i386
DYNAMIC RELOCATION RECORDS
---
## Page 174
附录A捉虫提示157
OFFSET
TYPE
VALUE
080495C0R_386_GL0B_DAT
gmon_start
080495d0R_386_JUMP_SLOT
gmon_start
080495d4R_386_JUMP_SLOT
libc_start_main
080495d8R_386_JUMP_SL0T
printf
linux$ readelf -r got
Relocation section
'.rel.dyn'at offset ox27c contains1entries:
offset
Info
Type
Sym.Value
Sym.Name
080495c0
00000106 R_386_GL0B_DAT
00000000
_gmon_start
Relocation section
‘.rel.plt'atoffset 0x284contains3entries:
offset
Info
.Type
Sym.Value
Sym.Name
080495d0
00000107R_386_JUMP_SL0T
00000000
_gmon_start
080495d4
00000207
R_386_JUMP_SLOT
00000000
libc_start_main
080495d8
00000307R_386JUMP_SL0T
00000000
printf
附注
[1]ELF的介绍可参考TIS委员会的ToolInterfaceStandard（TIS）ExecutableandLinkingFormat
（ELF）Specification，Version1.2,1995,链接：http://refspecs.freestandards.org/elf/elf.pdf（短
址为http://bit.ly/z2c6qz）
---
## Page 175
B
调 试
本附录包含跟调试器和调试进程有关的各种信息。
B.1Solaris的Modular调试器（mdb）
以下表格列出了一些有用的mdb（SolarisModularDebugger）命令。完整的
可用命令列表见Solaris Modular Debugger GuideI。
B.1.1
启动和结束mdb
命
令
描
述
we18o.xd qpu
启动mdb开始调试program
mdb unix.
在内核崩溃dump文件上运行mdb（unix.和vmcore.文件通常可以在
vmcore.
目录/var/crash/中找到）
$q
退出调试器
B.1.2
通用命令
命
令
描述
::run arguments
运行被调试程序（指定参数arguments）。如果目标正在运行或是一
个内核文件，mdb可能会重启这个程序
---
## Page 176
附录B调
试159
B.1.3
断点
命
令
描
述
address::bp
在命令中给出的address位置处设置一个新的断点
$b
列出已设置断点信息
::delete number
移除之前设置的第number个断点
B.1.4
运行调试目标
命
描
述
:s
执行单条指令，会单步进人子函数
:e
执行单条指令，不会进人子函数
:C
继续执行
B.1.5
查看数据
命
令
描
述
address,
以指定格式format打印地址address处指定数量（count）的对象：具体格
count/format
式包括B（十六进制，1字节），X（十六进制，4字节），S（字符串）
B.1.6
信息查询命令
命
令
描述
$r
列出寄存器和寄存器值
$c
打印函数调用栈的回溯
address::dis
以机器指令形式转储address附近一段内存的内容
B.1.7
其他命令
命
令
描
述
::status
打印与当前目标相关的信息摘要
::msgbuf
显示消息缓冲区的内容，包括内核错误之前的所有控制台信息
B.2
Windows调试器（WinDbg）
以下表格列出了WinDbg的一些有用的调试命令。完整的可用命令列表可以
参考MarioHewardt和DanielPravat 所著的AdvancedWindowsDebugging一书或
WinDbg自带的文档。
---
## Page 177
160附录B调
试
B.2.1
启动和结束调试会话
命
令
描
述
FileOpen Executable...
点击File菜单的OpenExecutable来启动一个新的用户态进程并加以调试
File Attach to a Process...
点击File菜单的AttachtoaProcess来调试一个正在运行的用户态应用程序
q
结束调试会话
B.2.2
通用命令
命
令
描
述
g
开始或继续执行
B.2.3
断点
命
令
描
述
bp address
在命令中指定的address处设置一个新断点
b1
列出所有已设置断点的信息
bc breakpoint ID
移除breakpointID对应的已设置断点
B.2.4
运行调试目标
命
令
描述
t
执行单条指令或单行源代码，并（可选地）显示所有寄存器和标志