# 七夕—Go二进制文件逆向分析从基础到进阶——数据类型
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 书接前文，本文详细介绍 Go 二进制文件中的数据类型信息，如何定位并解析所有数据类型定义。
**传送门** ：
  1. [Go二进制文件逆向分析从基础到进阶——综述](https://www.anquanke.com/post/id/214940)
  2. [Go二进制文件逆向分析从基础到进阶——MetaInfo、函数符号和源码文件路径列表](https://www.anquanke.com/post/id/215419)
## 8\. types
###  8.1 简介
重温一下本系列第一篇《[Go二进制文件逆向分析从基础到进阶——综述](https://www.anquanke.com/post/id/214940)》文末介绍的
Go 语言中的数据类型。Go 在构建二进制文时把项目中所有数据类型信息也打包到二进制文件中，这些数据类型信息主要为 Go 语言中的 Stack
Trace、Type Reflection 和类型转换服务。Go 语言内置的标准数据类型如下：
而这些类型的底层实现，其实都基于一个底层的结构定义扩展组合而来：
如果只是一个没有绑定任何 Method 的 Basic Type ，那么用 **rtype** 的结构就可以简单表示。如果一个数据类型绑定了
Methods(这种数据类型也叫 **Uncommon Type** )，或者属于复杂的组合类型(Composite
Type)，那么就需要用扩展组合的方式来表示了。复杂类型的扩展组合方式可以简单描述为（虚线表示可选）：
这里以一个典型的 Struct 类型的数据结构为例，源码级表示为：
    // structType represents a struct type.
    type structType struct {
        rtype
        pkgPath name
        fields []structField // fields address, sorted by offset
    }
    type uncommonType struct {
        pkgPath nameOff // import path; empty for built-in types like int, string
        mcount uint16   // number of methods
        xcount uint16   // number of exported methods
        moff uint32     // offset from this uncommontype to [mcount]method
        _ uint32        // unused
    }
    type structField struct {
        name name           // name is always non-empty
        typ *rtype          // type of field
        offsetEmbed uintptr // byte offset of field 32 kB) are allocated straight from the heap.
    func mallocgc(size uintptr, typ *_type, needzero bool) unsafe.Pointer
在 IDAPro 中看到的调用 `runtime.newobject()` 函数的形式通常如下：
如此一来，就可以在 IDAPro 中遍历 `runtime.newobject()`
函数的交叉引用，然后在汇编指令中提取参数，就获取到了目标数据类型定义的地址。按照这个思路，就能一一定位到这些数据类型：
然而，这种方式存在一些问题。可以看到上面 `runtime.newobject()` 函数的交叉引用个数为 **2568** ，而在前文 《
**[Go二进制文件逆向分析从基础到进阶——MetaInfo、函数符号和源码文件路径列表](https://www.anquanke.com/post/id/215419)**
》 介绍的 **firstmoduledata** 结构中的 **typelinks** 的个数为 **0xA91(2705)** 。说明
`runtime.newobject()` 函数的交叉引用覆盖不全。漏了哪些呢？下图所示的用法是情况之一，即把某个类型指针当作参数传入一个函数：
####  8.2.2 遍历 firstmoduledata.typelinks
所以，通过遍历 `runtime.newobject()` 函数交叉引用的方式来遍历所有数据类型定义，不够完美。最好的方式，上面已经暗示了，是遍历
**firstmoduledata** 结构中的 **typelinks** 。
**[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的 **typelinks** 如下：
**typelinks** 中的数据，以 4-Bytes(uint32) 为单位，每个值代表一个相对于 `firstmoduledata.types`
起始地址的 **Offset** ，即 `firstmoduledata.types` 加上这个 **Offset** 值，就是相应的数据类型定义信息的
**地址** 。 **[go_parser](https://github.com/0xjiayu/go_parser)** 会把每个计算好的地址值，以
Comment 的形式打到每个 Offset 后面，双击 Comment 中的地址值，即可跳转到对应的数据类型定义的位置。
###  8.3 rtype 解析
上文已经阐述了 Go 二进制文件中所有 Type
信息如何组织、存放的，以及通过什么样的方式可以找到这些数据类型定义信息。接下来的问题就是，如何解析每一个找到的数据类型定义，从中提取有助于逆向分析的信息，并以友好的方式在
IDAPro 中展示出来。
####  8.3.1 rtype
前面提过多次 **rtype** ，可以表示最简单的数据类型(Common Basic Types)。 **rtype** 在源码中的定义如下：
    // Refer: https://golang.org/src/reflect/type.go
    type rtype struct {
        size       uintptr
        ptrdata    uintptr  // number of bytes in the type that can contain pointers
        hash       uint32   // hash of type; avoids computation in hash tables
        tflag      tflag    // extra type information flags
        align      uint8    // alignment of variable with this type
        fieldAlign uint8    // alignment of struct field with this type
        kind       uint8    // enumeration for C
        alg        *typeAlg // algorithm table
        gcdata     *byte    // garbage collection data
        str        nameOff  // string form
        ptrToThis  typeOff  // type for pointer to this type, may be zero
    }
还是以前面贴过的 `*x509.SystemRootsError` 这个类型为例：
**rtype** 中对逆向分析最有用的字段有以下几个：
  * **tflag** ：1 Byte(uint8)，当前类型的 flag；
  * **kind** ：1 Byte(uint8)，当前类型的底层类型代码；
  * **str** ：4 Bytes(uint32)，当前类型 name string 的偏移(相对于 **firstmoduledata.types** )
  * **ptrtothis** ：4 Bytes(uint32)，如果有另外的 **指针类型** 指向本类型，那么 **ptrtothis** 就是那个指针类型相对于 **firstmoduledata.types** 的偏移量；
**tflag** 可能的值有 3 个：
  * **star prefix** ：即 **nams string** 以星号 `*` 开头，如果 **tflag** 值与 **1** 按位与的结果不为 0，则该类型的 star prefix flag 为 True；
  * **named** ：即该类型是被显示命名的，或者是为标准类型拟了一个别名，如果 **tflag** 值与 **2** 按位与的结果不为零，则 named flag 为 True；
  * **Uncommon** ：该类型有绑定的 Methods，如果 **tflag** 的值与 **4** 按位与的结果不为零，则该类型为 Uncommon Type。
**kind** 是个 uint 类型的枚举变量，在
[src/reflect/type.go](https://golang.org/src/reflect/type.go) 中的定义的如下：
    // A Kind represents the specific kind of type that a Type represents.
    // The zero Kind is not a valid kind.
    type Kind uint
    const (
        Invalid Kind = iota
        Bool
        Int
        Int8
        Int16
        Int32
        Int64
        Uint
        Uint8
        Uint16
        Uint32
        Uint64
        Uintptr
        Float32
        Float64
        Complex64
        Complex128
        Array
        Chan
        Func
        Interface
        Map
        Ptr
        Slice
        String
        Struct
        UnsafePointer
    )
但是 Go 二进制文件中看到的 **rtype** 里 **kind** 字段的值，并不是跟上面的枚举值对应的，而是与一个 Kind
掩码进行按位与计算之后，才能与上面的枚举值对应。Go 语言中的 Kind 掩码定义如下：
    KIND_MASK           = (1 << 5) - 1
**name** 是一个 uint32 类型的值，代表一个相对于 **firstmoduledata.types** 的 **偏移量** ，这个偏移量加上
**firstmoduledata.types** 得出一个 **地址值** ，这个地址就是当前 **rtype** 的 **name**
信息所在的位置。不过这个 **name** 既不是以 `0x00` 结尾的 C-String，也不是以 Length 指定长度的一串字符，而是另外一个专门的
**type name** 结构体。
####  8.3.2 type name
先看一下 **[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的一个基础的 type
name：
一个 type name 基础数据，包含以下字段：
  * **flag** : 1 Byte(uint8)，可以标记本 type name 是否 **可导出** (首字母大写)，以及是否附带 **tag data** 或 **package path** ；
  * **length** : 2 Bytes(uint16)，2 个字节通过计算得出本 **type name** string 的长度
  * **name string** ： **length** 个 Bytes，就是最终的 type name string。
先介绍一下 2 Bytes 的 **type name** 的 Length 如何计算。 **type name** 的源码定义中的一段注释如下：
    The first byte of type name is a bit field containing:
        1<<0 the name is exported
        1<<1 tag data follows the name
        1<<2 pkgPath nameOff follows the name and tag
    The next two bytes are the type name string length:
        len := uint16(type_name_data[1])<<8 | uint16(type_name_data[2])
    Bytes [3:3+l] are the string data.
Length 计算方式也一目了然，如果用 IDAPython 来表示，就是：
    len = ((idc.Byte(type_name_addr + 1) & 0xFF << 8) | (idc.Byte(type_name_addr + 2) & 0xFF)) & 0xFFFF
**name flag** 的 3 种情况，与 **rtype tflag** 的 3 种情况类似，计算方式也相同，都是分别与 (1, 2, 4) 进行