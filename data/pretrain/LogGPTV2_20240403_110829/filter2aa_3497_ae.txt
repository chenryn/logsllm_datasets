||||||||||||||||||||
||||||||||||||||||||
advanced network capture techniques.)
Additionally, the protocol might use the destination address for its own purposes. For
example, the Host header in HyperText Transport Protocol (HTTP) can be used for
Virtual Host decisions, which might make a port-forwarded protocol work differently, or
not at all, from a redirected connection. Still, at least for HTTP, I will discuss a
workaround for this limitation in “Reverse HTTP Proxy” on page 32.
SOCKS Proxy
Think of a SOCKS proxy as a port-forwarding proxy on steroids. Not only does it forward
TCP connections to the desired network location, but all new connections start with a
simple handshake protocol that informs the proxy of the ultimate destination rather than
having it fixed. It can also support listening connections, which is important for protocols
like File Transfer Protocol (FTP) that need to open new local ports for the server to send
data to. Figure 2-9 provides an overview of SOCKS proxy.
Figure 2-9: Overview of SOCKS proxy
Three common variants of the protocol are currently in use—SOCKS 4, 4a, and 5—
and each has its own use. Version 4 is the most commonly supported version of the
protocol; however, it supports only IPv4 connections, and the destination address must be
specified as a 32-bit IP address. An update to version 4, version 4a allowed connections by
hostname (which is useful if you don’t have a DNS server that can resolve IP addresses).
Version 5 introduced hostname support, IPv6, UDP forwarding, and improved
authentication mechanisms; it is also the only one specified in an RFC (1928).
As an example, a client will send the request shown in Figure 2-10 to establish a
SOCKS connection to IP address 10.0.0.1 on port 12345. The USERNAME component is the
only method of authentication in SOCKS version 4 (not especially secure, I know). VER
represents the version number, which in this case is 4. CMD indicates it wants to connect out
(binding to an address is CMD 2), and the TCP port and address are specified in binary form.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 2-10: A SOCKS version 4 request
If the connection is successful, it will send back the appropriate response, as shown in
Figure 2-11. The RESP field indicates the status of the response; the TCP port and address
fields are only significant for binding requests. Then the connection becomes transparent
and the client and server directly negotiate with each other; the proxy server only acts to
forward traffic in either direction.
Figure 2-11: A SOCKS version 4 successful response
Simple Implementation
The Canape Core libraries have built-in support for SOCKS 4, 4a, and 5. Place Listing 2-
6 into a C# script file, changing LOCALPORT ➋ to the local TCP port you want to listen on for
the SOCKS proxy.
SocksProxy.csx
   // SocksProxy.csx – Simple SOCKS proxy
   // Expose methods like WriteLine and WritePackets
   using static System.Console;
   using static CANAPE.Cli.ConsoleUtils;
   // Create the SOCKS proxy template
➊ var template = new SocksProxyTemplate();
   template.LocalPort = ➋LOCALPORT;
   // Create proxy instance and start
   var service = template.Create();
   service.Start();
   WriteLine("Created {0}", service);
   WriteLine("Press Enter to exit...");
   ReadLine();
   service.Stop();
   // Dump packets
   var packets = service.Packets;
   WriteLine("Captured {0} packets:",
       packets.Count);
   WritePackets(packets);
Listing 2-6: A simple SOCKS proxy example
Listing 2-6 follows the same pattern established with the TCP port-forwarding proxy
||||||||||||||||||||
||||||||||||||||||||
in Listing 2-4. But in this case, the code at ➊ creates a SOCKS proxy template. The rest of
the code is exactly the same.
Redirecting Traffic to Proxy
To determine a way of pushing an application’s network traffic through a SOCKS proxy,
look in the application first. For example, when you open the proxy settings in Mozilla
Firefox, the dialog in Figure 2-12 appears. From there, you can configure Firefox to use a
SOCKS proxy.
Figure 2-12: Firefox proxy configuration
But sometimes SOCKS support is not immediately obvious. If you are testing a Java
Technet24
||||||||||||||||||||
||||||||||||||||||||
application, the Java Runtime accepts command line parameters that enable SOCKS
support for any outbound TCP connection. For example, consider the very simple Java
application in Listing 2-7, which connects to IP address 192.168.10.1 on port 5555.
SocketClient.java
// SocketClient.java – A simple Java TCP socket client
import java.io.PrintWriter;
import java.net.Socket;
public class SocketClient {
    public static void main(String[] args) {
        try {
            Socket s = new Socket("192.168.10.1", 5555);
            PrintWriter out = new PrintWriter(s.getOutputStream(), true);
            out.println("Hello World!");
            s.close();
        } catch(Exception e) {
        }
    }
}
Listing 2-7: A simple Java TCP client
When you run this compiled program normally, it would do as you expect. But if on the
command line you pass two special system properties, socksProxyHost and socksProxyPort, you
can specify a SOCKS proxy for any TCP connection:
java –DsocksProxyHost=localhost –DsocksProxyPort=1080 SocketClient
This will make the TCP connection through the SOCKS proxy on localhost port 1080.
Another place to look to determine how to push an application’s network traffic
through a SOCKS proxy is the OS’s default proxy. On macOS, navigate to System
Preferences ▸ Network ▸ Advanced ▸ Proxies. The dialog shown in Figure 2-13
appears. From here, you can configure a system-wide SOCKS proxy or general proxies for
other protocols. This won’t always work, but it’s an easy option worth trying out.
In addition, if the application just will not support a SOCKS proxy natively, certain
tools will add that function to arbitrary applications. These tools range from free and open
source tools, such as Dante (https://www.inet.no/dante/) on Linux, to commercial tools, such
as Proxifier (https://www.proxifier.com/), which runs on Windows and macOS. In one way
or another, they all inject into the application to add SOCKS support and modify the
operation of the socket functions.
||||||||||||||||||||
||||||||||||||||||||
Figure 2-13: A proxy configuration dialog on macOS
Advantages of a SOCKS Proxy
The clear advantage of using a SOCKS proxy, as opposed to using a simple port
forwarder, is that it should capture all TCP connections (and potentially some UDP if you
are using SOCKS version 5) that an application makes. This is an advantage as long as the
OS socket layer is wrapped to effectively push all connections through the proxy.
A SOCKS proxy also generally preserves the destination of the connection from the
point of view of the client application. Therefore, if a client application sends in-band data
that refers to its endpoint, then the endpoint will be what the server expects. However, this
does not preserve the source address. Some protocols, such as FTP, assume they can
request ports to be opened on the originating client. The SOCKS protocol provides a
facility for binding listening connections but adds to the complexity of the
implementation. This makes capture and analysis more difficult because you must consider
many different streams of data to and from a server.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Disadvantages of a SOCKS Proxy
The main disadvantage of SOCKS is that support can be inconsistent between applications
and platforms. The Windows system proxy supports only SOCKS version 4 proxies, which
means it will resolve only local hostnames. It does not support IPv6 and does not have a
robust authentication mechanism. Generally, you get better support by using a SOCKS
tool to add to an existing application, but this doesn’t always work well.
HTTP Proxies
HTTP powers the World Wide Web as well as a myriad of web services and RESTful
protocols. Figure 2-14 provides an overview of an HTTP proxy. The protocol can also be
co-opted as a transport mechanism for non-web protocols, such as Java’s Remote Method
Invocation (RMI) or Real Time Messaging Protocol (RTMP), because it can tunnel
though the most restrictive firewalls. It is important to understand how HTTP proxying
works in practice, because it will almost certainly be useful for protocol analysis, even if a
web service is not being tested. Existing web application–testing tools rarely do an ideal
job when HTTP is being used out of its original environment. Sometimes rolling your
own implementation of an HTTP proxy is the only solution.
Figure 2-14: Overview of an HTTP proxy
The two main types of HTTP proxy are the forwarding proxy and the reverse proxy.
Each has advantages and disadvantages for the prospective network protocol analyzer.
Forwarding an HTTP Proxy
The HTTP protocol is specified in RFC 1945 for version 1.0 and RFC 2616 for version
1.1; both versions provide a simple mechanism for proxying HTTP requests. For example,
HTTP 1.1 specifies that the first full line of a request, the request line, has the following
format:
||||||||||||||||||||
||||||||||||||||||||
➊GET ➋/image.jpg HTTP/1.1
The method ➊ specifies what to do in that request using familiar verbs, such as GET, POST,
and HEAD. In a proxy request, this does not change from a normal HTTP connection. The
path ➋ is where the proxy request gets interesting. As is shown, an absolute path indicates
the resource that the method will act upon. Importantly, the path can also be an absolute
Uniform Request Identifier (URI). By specifying an absolute URI, a proxy server can
establish a new connection to the destination, forwarding all traffic on and returning data
back to the client. The proxy can even manipulate the traffic, in a limited fashion, to add
authentication, hide version 1.0 servers from 1.1 clients, and add transfer compression
along with all manner of other things. However, this flexibility comes with a cost: the
proxy server must be able to process the HTTP traffic, which adds massive complexity.
For example, the following request line accesses an image resource on a remote server
through a proxy:
GET http://www.domain.com/image.jpg HTTP/1.1
You, the attentive reader, might have identified an issue with this approach to proxying
HTTP communication. Because the proxy must be able to access the underlying HTTP
protocol, what about HTTPS, which transports HTTP over an encrypted TLS
connection? You could break out the encrypted traffic; however, in a normal environment,
it is unlikely the HTTP client would trust whatever certificate you provided. Also, TLS is
intentionally designed to make it virtually impossible to use a man-in-the-middle attack
any other way. Fortunately, this was anticipated, and RFC 2817 provides two solutions: it
includes the ability to upgrade an HTTP connection to encryption (there is no need for
more details here), and more importantly for our purposes, it specifies the CONNECT HTTP
method for creating transparent, tunneled connections over HTTP proxies. As an
example, a web browser that wants to establish a proxy connection to an HTTPS site can
issue the following request to the proxy:
CONNECT www.domain.com:443 HTTP/1.1
If the proxy accepts this request, it will make a new TCP connection to the server. On
success, it should return the following response:
HTTP/1.1 200 Connection Established
The TCP connection to the proxy now becomes transparent, and the browser is able to
establish the negotiated TLS connection without the proxy getting in the way. Of course,
it’s worth noting that the proxy is unlikely to verify that TLS is actually being used on this
connection. It could be any protocol you like, and this fact is abused by some applications
to tunnel out their own binary protocols through HTTP proxies. For this reason, it’s
common to find deployments of HTTP proxies restricting the ports that can be tunneled
Technet24
||||||||||||||||||||
||||||||||||||||||||
to a very limited subset.
Simple Implementation
Once again, the Canape Core libraries include a simple implementation of an HTTP
proxy. Unfortunately, they don’t support the CONNECT method to create a transparent tunnel,
but it will suffice for demonstration purposes. Place Listing 2-8 into a C# script file,
changing LOCALPORT ➋ to the local TCP port you want to listen on.
HttpProxy.csx
   // HttpProxy.csx – Simple HTTP proxy
   // Expose methods like WriteLine and WritePackets
   using static System.Console;
   using static CANAPE.Cli.ConsoleUtils;
   // Create proxy template
➊ var template = new HttpProxyTemplate();
   template.LocalPort = ➋LOCALPORT;
   // Create proxy instance and start
   var service = template.Create();
   service.Start();
   WriteLine("Created {0}", service);
   WriteLine("Press Enter to exit...");
   ReadLine();
   service.Stop();
   // Dump packets
   var packets = service.Packets;
   WriteLine("Captured {0} packets:", packets.Count);
   WritePackets(packets);
Listing 2-8: A simple forward HTTP proxy example
Here we created a forward HTTP Proxy. The code at line ➊ is again only a slight
variation from the previous examples, creating an HTTP proxy template.
Redirecting Traffic to Proxy
As with SOCKS proxies, the first port of call will be the application. It’s rare for an
application that uses the HTTP protocol to not have some sort of proxy configuration. If
the application has no specific settings for HTTP proxy support, try the OS configuration,
which is in the same place as the SOCKS proxy configuration. For example, on Windows
you can access the system proxy settings by selecting Control Panel ▸ Internet Options ▸
Connections ▸ LAN Settings.
Many command line utilities on Unix-like systems, such as curl, wget, and apt, also
support setting HTTP proxy configuration through environment variables. If you set the
environment variable http_proxy to the URL for the HTTP proxy to use—for example,
http://localhost:3128—the application will use it. For secure traffic, you can also use
https_proxy. Some implementations allow special URL schemes, such as socks4://, to specify
||||||||||||||||||||
||||||||||||||||||||
that you want to use a SOCKS proxy.
Advantages of a Forwarding HTTP Proxy
The main advantage of a forwarding HTTP proxy is that if the application uses the
HTTP protocol exclusively, all it needs to do to add proxy support is to change the
absolute path in the Request Line to an absolute URI and send the data to a listening
proxy server. Also, only a few applications that use the HTTP protocol for transport do
not already support proxying.
Disadvantages of a Forwarding HTTP Proxy
The requirement of a forwarding HTTP proxy to implement a full HTTP parser to
handle the many idiosyncrasies of the protocol adds significant complexity; this complexity
might introduce processing issues or, in the worst case, security vulnerabilities. Also, the
addition of the proxy destination within the protocol means that it can be more difficult to
retrofit HTTP proxy support to an existing application through external techniques,
unless you convert connections to use the CONNECT method (which even works for
unencrypted HTTP).
Due to the complexities of handling a full HTTP 1.1 connection, it is common for
proxies to either disconnect clients after a single request or downgrade communications to
version 1.0 (which always closes the response connection after all data has been received).
This might break a higher-level protocol that expects to use version 1.1 or request
pipelining, which is the ability to have multiple requests in flight to improve performance or
state locality.
Reverse HTTP Proxy
Forwarding proxies are fairly common in environments where an internal client is
connecting to an outside network. They act as a security boundary, limiting outbound
traffic to a small subset of protocol types. (Let’s just ignore the potential security
implications of the CONNECT proxy for a moment.) But sometimes you might want to proxy
inbound connections, perhaps for load-balancing or security reasons (to prevent exposing
your servers directly to the outside world). However, a problem arises if you do this. You
have no control over the client. In fact, the client probably doesn’t even realize it’s
connecting to a proxy. This is where the reverse HTTP proxy comes in.
Instead of requiring the destination host to be specified in the request line, as with a
forwarding proxy, you can abuse the fact that all HTTP 1.1–compliant clients must send a
Host HTTP header in the request that specifies the original hostname used in the URI of
the request. (Note that HTTP 1.0 has no such requirement, but most clients using that
version will send the header anyway.) With the Host header information, you can infer the
original destination of the request, making a proxy connection to that server, as shown in
Technet24
||||||||||||||||||||
||||||||||||||||||||
Listing 2-9.
GET /image.jpg HTTP/1.1
User-Agent: Super Funky HTTP Client v1.0
Host: ➊www.domain.com
Accept: */*
Listing 2-9: An example HTTP request
Listing 2-9 shows a typical Host header ➊ where the HTTP request was to the URL
http://www.domain.com/image.jpg. The reverse proxy can easily take this information and
reuse it to construct the original destination. Again, because there is a requirement for
parsing the HTTP headers, it is more difficult to use for HTTPS traffic that is protected
by TLS. Fortunately, most TLS implementations take wildcard certificates where the
subject is in the form of *.domain.com or similar, which would match any subdomain of
domain.com.
Simple Implementation
Unsurprisingly, the Canape Core libraries include a built-in HTTP reverse proxy
implementation, which you can access by changing the template object to
HttpReverseProxyTemplate from HttpProxyTemplate. But for completeness, Listing 2-10
shows a simple implementation. Place the following code in a C# script file, changing
LOCALPORT ➊ to the local TCP port you want to listen on. If LOCALPORT is less than 1024 and
you’re running this on a Unix-style system, you’ll also need to run the script as root.
ReverseHttp
Proxy.csx
// ReverseHttpProxy.csx – Simple reverse HTTP proxy
// Expose methods like WriteLine and WritePackets
using static System.Console;
using static CANAPE.Cli.ConsoleUtils;
// Create proxy template
var template = new HttpReverseProxyTemplate();
template.LocalPort = ➊LOCALPORT;
// Create proxy instance and start
var service = template.Create();
service.Start();
WriteLine("Created {0}", service);
WriteLine("Press Enter to exit...");
ReadLine();
service.Stop();
// Dump packets
var packets = service.Packets;
WriteLine("Captured {0} packets:",
    packets.Count);
WritePackets(packets);
Listing 2-10: A simple reverse HTTP proxy example
||||||||||||||||||||
||||||||||||||||||||
Redirecting Traffic to Your Proxy
The approach to redirecting traffic to a reverse HTTP proxy is similar to that employed
for TCP port-forwarding, which is by redirecting the connection to the proxy. But there is
a big difference; you can’t just change the destination hostname. This would change the
Host header, shown in Listing 2-10. If you’re not careful, you could cause a proxy loop.1