├─rtkit-daemon.service
├─systemd-update-utmp-runlevel.service
└─multi-user.target
├─abrt-ccpp.service
.....（下面省略）.....
事实上就是多了上面列出来的这些服务而已～大多数都是图形界面帐号管理的功能，至于实际让用户可以登陆的服务，倒是那个
gdm.service 哩！ 如果你去瞧瞧 gdm.service 的内容，就会发现最重要的可执行文件是 /usr/sbin/gdm 喔！那就是让使用者可以利用图形界面登
陆的最重要服务啰！ 我们未来讲到 X 窗口界面时再来聊聊 gdm 这玩意儿喔！
到此为止，systemd 就已经完整的处理完毕，你可以使用图形界面或文字界面的方式来登陆系统，系统也顺利的开机完毕， 也能够将你
写入到 /etc/rc.d/rc.local 的脚本实际执行一次啰。那如果默认是图形界面 （graphical.target） 但是想要关掉而进入文字界面 （multi-
user.target） 呢？ 很简单啊！19.1.3小节就谈过了，使用“ systemctl isolate multi-user.target ”即可！如果使用“ init 3 ”呢？也是可以啦！ 只是系
统实际执行的还是“ systemctl isolate multi-user.target ”就是了！ ^_^
基本上， systemd 有自己的配置文件处理方式，不过为了相容于 systemV ，其实很多的服务脚本设置还是会读取位于 /etc/sysconfig/ 下
面的环境配置文件！ 下面我们就来谈谈几个常见的比较重要的配置文件啰！
关关于于模模块块：： /etc/modprobe.d/*.conf 及及 /etc/modules-load.d/*.conf
还记得我们在 sysinit.target 系统初始化 当中谈到的载入使用者自订模块的地方吗？其实有两个地方可以处理模块载入的问题，包括：
/etc/modules-load.d/*.conf：单纯要核心载入模块的位置；
/etc/modprobe.d/*.conf：可以加上模块参数的位置
基本上 systemd 已经帮我们将开机会用到的驱动程序全部载入了，因此这个部份你应该无须更动才对！不过， 如果你有某些特定的参
数要处理时，应该就得要在这里进行了。举例来说，我们在第十七章曾经谈过 vsftpd 这个服务对吧！ 而且当时将这个服务的端口更改到 555
这个号码上去了！那我们可能需要修改防火墙设置，其中一个针对 FTP 很重要的防火墙模块为 nf_conntrack_ftp， 因此，你可以将这个模块写
入到系统开机流程中，例如：
[root@study ~]# vim /etc/modules-load.d/vbird.conf
nf_conntrack_ftp
一个模块 （驱动程序） 写一行～然后，上述的模块基本上是针对默认 FTP 端口，亦即 port 21 所设置的，如果需要调整到 port 555 的
话， 得要外带参数才行！模块外加参数的设置方式得要写入到另一个地方喔！
[root@study ~]# vim /etc/modprobe.d/vbird.conf
options nf_conntrack_ftp ports=555
之后重新开机就能够顺利的载入并且处理好这个模块了。不过，如果你不想要开机测试，想现在处理呢？有个方式可以来进行看看：
[root@study ~]# lsmod | grep nf_conntrack_ftp
# 没东西！因为还没有载入这个模块！所以不会出现任何讯息！
[root@study ~]# systemctl restart systemd-modules-load.service
[root@study ~]# lsmod | grep nf_conntrack_ftp
nf_conntrack_ftp 18638 0
nf_conntrack 105702 1 nf_conntrack_ftp
通过上述的方式，你就可以在开机的时候将你所需要的驱动程序载入或者是调整这些模块的外加参数啰！
/etc/sysconfig/*
还有哪些常见的环境配置文件呢？我们找几个比较重要的来谈谈：
authconfig：
这个文件主要在规范使用者的身份认证的机制，包括是否使用本机的 /etc/passwd, /etc/shadow 等， 以及 /etc/shadow 密码记录使用何种
加密演算法，还有是否使用外部密码服务器提供的帐号验证 （NIS, LDAP） 等。 系统默认使用 SHA512 加密演算法，并且不使用外部的
身份验证机制；另外，不建议手动修改这个文件喔！你应该使用“ authconfig-tui ”指令来修改较佳！
cpupower：
如果你有启动 cpupower.service 服务时，他就会读取这个配置文件。主要是 Linux 核心如何操作 CPU 的原则。 一般来说，启动
cpupower.service 之后，系统会让 CPU 以最大性能的方式来运行，否则默认就是用多少算多少的模式来处理的。
firewalld, iptables-config, iptables-config, ebtables-config：
与防火墙服务的启动外带的参数有关，这些数据我们会在服务器篇慢慢再来讨论。
network-scripts/：
至于 network-scripts 里面的文件，则是主要用在设置网卡～ 这部份我们在服务器架设篇才会提到！
谈完了整个开机的流程，您应该会知道，在整个开机的过程当中，是否能够成功的驱动我们主机的硬件配备， 是核心 （kernel） 的工
作！而核心一般都是压缩文件，因此在使用核心之前，就得要将他解压缩后，才能载入内存当中。
另外，为了应付日新月异的硬件，目前的核心都是具有“可读取模块化驱动程序”的功能， 亦即是所谓的“ modules （模块化）”的功能
啦！所谓的模块化可以将他想成是一个“外挂程序”， 该外挂程序可能由硬件开发厂商提供，也有可能我们的核心本来就支持～不过，较新的硬
件， 通常都需要硬件开发商提供驱动程序模块啦！
那么核心与核心模块放在哪？
核心： /boot/vmlinuz 或 /boot/vmlinuz-version；
核心解压缩所需 RAM Disk： /boot/initramfs （/boot/initramfs-version）；
核心模块： /lib/modules/version/kernel 或 /lib/modules/$（uname -r）/kernel；
核心源代码： /usr/src/linux 或 /usr/src/kernels/ （要安装才会有，默认不安装）
如果该核心被顺利的载入系统当中了，那么就会有几个信息纪录下来：
核心版本： /proc/version
系统核心功能： /proc/sys/kernel/
问题来啦，如果我有个新的硬件，偏偏我的操作系统不支持，该怎么办？很简单啊！
重新编译核心，并加入最新的硬件驱动程序源代码；
将该硬件的驱动程序编译成为模块，在开机时载入该模块
上面第一点还很好理解，反正就是重新编译核心就是了。不过，核心编译很不容易啊！ 我们会在后续章节约略介绍核心编译的整个程
序。比较有趣的则是将该硬件的驱动程序编译成为模块啦！ 关于编译的方法，可以参考后续的第二十一章、源代码与 tarball的介绍。 我们这
个章节仅是说明一下，如果想要载入一个已经存在的模块时，该如何是好？
既然要处理核心模块，自然就得要了解了解我们核心提供的模块之间的相关性啦！ 基本上，核心模块的放置处是在
/lib/modules/$（uname -r）/kernel 当中，里面主要还分成几个目录：
arch ：与硬件平台有关的项目，例如 CPU 的等级等等；
crypto ：核心所支持的加密的技术，例如 md5 或者是 des 等等；
drivers ：一些硬件的驱动程序，例如显卡、网卡、PCI 相关硬件等等；
fs ：核心所支持的 filesystems ，例如 vfat, reiserfs, nfs 等等；
lib ：一些函数库；
net ：与网络有关的各项协定数据，还有防火墙模块 （net/ipv4/netfilter/*） 等等；
sound ：与音效有关的各项模块；
如果要我们一个一个的去检查这些模块的主要信息，然后定义出他们的相依性， 我们可能会疯掉吧！所以说，我们的 Linux 当然会提供
一些模块相依性的解决方案啰～ 对啦！那就是检查 /lib/modules/$（uname -r）/modules.dep 这个文件啦！他记录了在核心支持的模块的各项
相依性。
那么这个文件如何创建呢？挺简单！利用 depmod 这个指令就可以达到创建该文件的需求了！
[root@study ~]# depmod [-Ane]
选项与参数：
-A ：不加任何参数时， depmod 会主动的去分析目前核心的模块，并且重新写入
/lib/modules/$（uname -r）/modules.dep 当中。若加入 -A 参数时，则 depmod
会去搜寻比 modules.dep 内还要新的模块，如果真找到新模块，才会更新。
-n ：不写入 modules.dep ，而是将结果输出到屏幕上（standard out）；
-e ：显示出目前已载入的不可执行的模块名称
范例一：若我做好一个网卡驱动程序，文件名为 a.ko，该如何更新核心相依性？
[root@study ~]# cp a.ko /lib/modules/$（（uname -r））/kernel/drivers/net
[root@study ~]# depmod
以上面的范例一为例，我们的 kernel 核心模块扩展名一定是 .ko 结尾的， 当你使用 depmod 之后，该程序会跑到模块标准放置目录
/lib/modules/$（uname -r）/kernel ， 并依据相关目录的定义将全部的模块捉出来分析，最终才将分析的结果写入 modules.dep 文件中的呐！
这个文件很重要喔！因为他会影响到本章稍后会介绍的 modprobe 指令的应用！
那你到底晓不晓得目前核心载入了多少的模块呢？粉简单啦！利用 lsmod 即可！
[root@study ~]# lsmod
Module Size Used by
nf_conntrack_ftp 18638 0
nf_conntrack 105702 1 nf_conntrack_ftp
....（中间省略）....
qxl 73766 1
drm_kms_helper 98226 1 qxl
ttm 93488 1 qxl
drm 311588 4 qxl,ttm,drm_kms_helper # drm 还被 qxl, ttm..等模块使用
....（下面省略）....
使用 lsmod 之后，系统会显示出目前已经存在于核心当中的模块，显示的内容包括有：
模块名称（Module）；
模块的大小（size）；
此模块是否被其他模块所使用 （Used by）。
也就是说，模块其实真的有相依性喔！举上表为例，nf_conntrack 先被载入后，nf_conntrack_ftp这个模块才能够进一步的载入系统中！
这两者间是有相依性的。包括鸟哥测试机使用的是虚拟机，用到的显卡是 qxl 这个模块，该模块也同时使用了好多额外的附属模块喔！ 那么，
那个 drm 是啥鬼？要如何了解呢？就用 modinfo 吧！
[root@study ~]# modinfo [-adln] [module_name|filename]
选项与参数：
-a ：仅列出作者名称；
-d ：仅列出该 modules 的说明 （description）；
-l ：仅列出授权 （license）；
-n ：仅列出该模块的详细路径。
范例一：由上个表格当中，请列出 drm 这个模块的相关信息：
[root@study ~]# modinfo drm
filename: /lib/modules/3.10.0-229.el7.x86_64/kernel/drivers/gpu/drm/drm.ko
license: GPL and additional rights
description: DRM shared core routines
author: Gareth Hughes, Leif Delgass, José Fonseca, Jon Smirl
rhelversion: 7.1
srcversion: 66683E37FDD905C9FFD7931
depends: i2c-core
intree: Y
vermagic: 3.10.0-229.el7.x86_64 SMP mod_unload modversions
signer: CentOS Linux kernel signing key
sig_key: A6:2A:0E:1D:6A:6E:48:4E:9B:FD:73:68:AF:34:08:10:48:E5:35:E5