# 如果synchronous_commit=on, 并且已知业务系统为高并发，对数据库有写操作的小事务，则可以设置commit_delay来实现分组提交，合并WAL FSYNCIO 。      
# 分组提交    
#commit_delay = 10                       # range 0-100000, in microseconds      
# 同时处于提交状态的事务数超过commit_siblings时，使用分组提交      
#commit_siblings = 5                    # range 1-1000      
# - Checkpoints -      
#  不建议频繁做检查点，否则XLOG会产生很多的FULL PAGE WRITE(when full_page_writes=on)。      
checkpoint_timeout = 30min              # range 30s-1d      
# 建议等于SHARED BUFFER，或2倍。      
# 同时需要考虑崩溃恢复时间, 越大，检查点可能拉越长导致崩溃恢复耗时越长。但是越小，开启FPW时，WAL日志写入量又越大。 建议采用COW文件系统，关闭FPW。      
# max_wal_size 公式： # min(shared_buffers*2 ,   用户存储空间/10)   
max_wal_size = 48GB      
# 建议是SHARED BUFFER的2分之一      
# min_wal_size 公式： # min(shared_buffers/2  , 用户存储空间/10)  
min_wal_size = 12GB      
# 硬盘好(nvme ssd)的情况下，值越小可以让检查点快速结束，恢复时也可以快速达到一致状态。否则建议0.5~0.9       
# 如果有hot standby作为HA节点，这个值也可以设置为0.5~0.9   避免写高峰时CHECKPOINT对写带来的冲击。    
checkpoint_completion_target = 0.2      # checkpoint target duration, 0.0 - 1.0      
# IO很好的机器，不需要考虑平滑调度, 否则建议128~256kB      
checkpoint_flush_after = 256kB          # measured in pages, 0 disables      
#checkpoint_flush_after = 0             # measured in pages, 0 disables      
#checkpoint_warning = 30s               # 0 disables      
# - Archiving -      
# 建议默认打开，因为修改它需要重启实例      
# 打开后，一个WAL文件写满后，会在pg_wal/archive_status目录中创建xxxxxx.ready的文件，归档命令archive_command正常结束后，会清除这个状态文件。    
archive_mode = on             # enables archiving; off, on, or always      
                                # (change requires restart)      
#  后期再修改，如  'test ! -f /disk1/digoal/arch/%f && cp %p /disk1/digoal/arch/%f'      
archive_command = '/bin/date'           # command to use to archive a logfile segment      
                                # placeholders: %p = path of file to archive      
                                #               %f = file name only      
                                # e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'      
#archive_timeout = 0            # force a logfile segment switch after this      
                                # number of seconds; 0 disables      
#------------------------------------------------------------------------------      
# REPLICATION      
#------------------------------------------------------------------------------      
# - Sending Servers -      
# Set these on the master and on any standby that will send replication data.      
# 同时允许几个流复制协议的连接，根据实际需求设定 ，可以设置一个默认值例如64     
max_wal_senders = 64             # max number of walsender processes      
                                # (change requires restart)      
# 根据实际情况设置保留WAL的数量，主要是防止过早的清除WAL，导致备库因为主库的WAL清除而中断。根据实际情况设定。      
#wal_keep_segments = 0          # in logfile segments; 0 disables      
#wal_sender_timeout = 60s       # in milliseconds; 0 disables      
# 根据实际情况设置需要创建多少replication slot      
# 使用slot，可以保证流复制下游没有接收的WAL会在当前节点永久保留。所以必须留意下游的接收情况，否则可能导致WAL爆仓      
# 建议大于等于max_wal_senders      
# max_replication_slots 公式： max_replication_slots=max_wal_senders    
max_replication_slots = 64     # max number of replication slots      
                                # (change requires restart)      
#track_commit_timestamp = off   # collect timestamp of transaction commit      
                                # (change requires restart)      
# - Master Server -      
# These settings are ignored on a standby server.      
# 如果有2个或2个以上的备库，可以考虑使用同步多副本模式。 根据实际情况设置      
# [《PostgreSQL 一主多从(多副本,强同步)简明手册 - 配置、压测、监控、切换、防脑裂、修复、0丢失 - 珍藏级》](201803/20180326_01.md)        
# [《PostgreSQL 双节点流复制如何同时保证可用性、可靠性(rpo,rto) - （半同步，自动降级方法实践）》](201901/20190127_01.md)      
#synchronous_standby_names = '' # standby servers that provide sync rep      
                                # method to choose sync standbys, number of sync standbys,      
                                # and comma-separated list of application_name      
                                # from standby(s); '*' = all      
# 注意，当数据库有大量的更新、删除操作时，设置这个值容易导致表膨胀，容易导致VACUUM进程空转，导致IO和CPU飙升。（特别是autovacuum naptime配置很小时）      
#vacuum_defer_cleanup_age = 0   # number of xacts by which cleanup is delayed      
# - Standby Servers -      
# These settings are ignored on a master server.      
hot_standby = on                       # "off" disallows queries during recovery      
                                        # (change requires restart)      
# 当standby的archive replay与standby的用户SQL请求发生冲突时，在打断SQL前，允许用户SQL最长的执行时间. 打断SQL后，需要等STANDBY APPLY所有archive restore command 的WAL文件，APPLY才允许被继续打断。      
max_standby_archive_delay = 120s        # max delay before canceling queries      
                                        # when reading WAL from archive;      
                                        # -1 allows indefinite delay      
max_standby_streaming_delay = 120s      # max delay before canceling queries      
                                        # when reading streaming WAL;      
                                        # -1 allows indefinite delay      
wal_receiver_status_interval = 1s     # send replies at least this often      
                                        # 0 disables      
# 建议关闭，以免备库长事务导致 主库无法回收垃圾而膨胀。      
[《PostgreSQL物理"备库"的哪些操作或配置，可能影响"主库"的性能、垃圾回收、IO波动》](201704/20170410_03.md)        
hot_standby_feedback = off             # send info from standby to prevent      
                                        # query conflicts      
#wal_receiver_timeout = 60s             # time that receiver waits for      
                                        # communication from master      
                                        # in milliseconds; 0 disables      
#wal_retrieve_retry_interval = 5s       # time to wait before retrying to      
                                        # retrieve WAL after a failed attempt      
# - Subscribers -      
# 逻辑复制订阅端节点设置：      
# These settings are ignored on a publisher.      
# [《PostgreSQL 10.0 preview 逻辑订阅 - 原理与最佳实践》](201702/20170227_01.md)        
# These settings are ignored on a publisher.       
# 必须小于  max_worker_processes      
# 包括 apply workers and table synchronization workers    
# max_logical_replication_workers 公式： max_logical_replication_workers=max_wal_senders    
max_logical_replication_workers = 64    # taken from max_worker_processes      
                                        # (change requires restart)      
# Maximum number of synchronization workers per subscription. This parameter controls the amount of parallelism of the initial data copy during the subscription initialization or when new tables are added.    
# max_sync_workers_per_subscription 公式： min ( 32 , max(2, CPU核数-4) )      
max_sync_workers_per_subscription = 8  # taken from max_logical_replication_workers      
#------------------------------------------------------------------------------      
# QUERY TUNING      
#------------------------------------------------------------------------------      
# - Planner Method Configuration -      
#enable_bitmapscan = on      
#enable_hashagg = on      
#enable_hashjoin = on      
#enable_indexscan = on      
#enable_indexonlyscan = on      
#enable_material = on      
#enable_mergejoin = on      
#enable_nestloop = on      
#enable_parallel_append = on      
#enable_seqscan = on      
#enable_sort = on      
#enable_tidscan = on      
# OLAP业务，建议设置为ON  （enable_partitionwise_join， enable_partitionwise_aggregate）    
# [《PostgreSQL 并行计算解说 汇总》](201903/20190319_01.md)      
enable_partitionwise_join = on      
enable_partitionwise_aggregate = on      
#enable_parallel_hash = on      
#enable_partition_pruning = on      
# - Planner Cost Constants -      
#seq_page_cost = 1.0                    # measured on an arbitrary scale      
# 离散IO很好的机器（例如ssd, nvme ssd），不需要考虑离散和顺序扫描的成本差异       
random_page_cost = 1.1                 # same scale as above      
#cpu_tuple_cost = 0.01                  # same scale as above      
#cpu_index_tuple_cost = 0.005           # same scale as above      
#cpu_operator_cost = 0.0025             # same scale as above      
#parallel_tuple_cost = 0.1              # same scale as above      
#parallel_setup_cost = 1000.0   # same scale as above      
#jit_above_cost = 100000                # perform JIT compilation if available      
                                        # and query more expensive, -1 disables      
#jit_optimize_above_cost = 500000       # optimize JITed functions if query is      
                                        # more expensive, -1 disables      
#jit_inline_above_cost = 500000         # attempt to inline operators and      
                                        # functions if query is more expensive,      
                                        # -1 disables      
#min_parallel_table_scan_size = 8MB      
#min_parallel_index_scan_size = 512kB      
# 扣掉会话连接RSS，shared buffer, autovacuum worker, 剩下的都是OS可用的CACHE。      
# effective_cache_size 公式： 主机内存*0.75       
effective_cache_size = 80GB       
# - Genetic Query Optimizer -      
#geqo = on      
#geqo_threshold = 12      
#geqo_effort = 5                        # range 1-10      
#geqo_pool_size = 0                     # selects default based on effort      
#geqo_generations = 0                   # selects default based on effort      
#geqo_selection_bias = 2.0              # range 1.5-2.0      
#geqo_seed = 0.0                        # range 0.0-1.0      
# - Other Planner Options -      
#default_statistics_target = 100        # range 1-10000      
#constraint_exclusion = partition       # on, off, or partition      
#cursor_tuple_fraction = 0.1            # range 0.0-1.0      
#from_collapse_limit = 8      
#join_collapse_limit = 8                # 1 disables collapsing of explicit      
                                        # JOIN clauses      
#force_parallel_mode = off      
#------------------------------------------------------------------------------      
# REPORTING AND LOGGING      
#------------------------------------------------------------------------------      
# - Where to Log -      
log_destination = 'csvlog'              # Valid values are combinations of      
                                        # stderr, csvlog, syslog, and eventlog,      
                                        # depending on platform.  csvlog      
                                        # requires logging_collector to be on.      
# This is used when logging to stderr:      
logging_collector = on                  # Enable capturing of stderr and csvlog      
                                        # into log files. Required to be on for      
                                        # csvlogs.      
                                        # (change requires restart)      
# These are only used if logging_collector is on:      
log_directory = 'log'                   # directory where log files are written,      
                                        # can be absolute or relative to PGDATA      
# 时间格式 http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html     
# 设置参考 https://www.postgresql.org/docs/11/runtime-config-logging.html#RUNTIME-CONFIG-LOGGING-WHERE     
# 日志保留一天，每个小时一个文件取决于log_rotation_age    每小时切换一下
log_filename = 'postgresql-%H.log'      # log file name pattern,      
                                        # can include strftime() escapes      
# 日志保留一个月例子，每天一个文件取决于log_rotation_age    每天切换一下    
# log_filename = 'postgresql-%d.log'    # log file name pattern,      
                                        # can include strftime() escapes      
# 日志保留一周例子，每天一个文件取决于log_rotation_age    每天切换一下    
# log_filename = 'postgresql-%a.log'    # log file name pattern,      
                                        # can include strftime() escapes 
#log_file_mode = 0600                   # creation mode for log files,      
                                        # begin with 0 to use octal notation      
log_truncate_on_rotation = on           # If on, an existing log file with the      
                                        # same name as the new log file will be      
                                        # truncated rather than appended to.      
                                        # But such truncation only occurs on      
                                        # time-driven rotation, not on restarts      
                                        # or size-driven rotation.  Default is      
                                        # off, meaning append to existing files      
                                        # in all cases.      
# 配合log_filename设置，建议与%后面的名字周期一致
log_rotation_age = 1h                   # Automatic rotation of logfiles will      
                                        # happen after that time.  0 disables.      
# 单个日志文件最大多大时，被截断，可以设置一个上限防止日志无限制增长    
log_rotation_size = 1GB     
# log_rotation_size = 0                   # Automatic rotation of logfiles will      
                                        # happen after that much log output.      
                                        # 0 disables.      
# These are relevant when logging to syslog:      
#syslog_facility = 'LOCAL0'      
#syslog_ident = 'postgres'      
#syslog_sequence_numbers = on      
#syslog_split_messages = on      
# This is only relevant when logging to eventlog (win32):      
# (change requires restart)      
#event_source = 'PostgreSQL'      
# - When to Log -      
#client_min_messages = notice           # values in order of decreasing detail:      
                                        #   debug5      
                                        #   debug4      
                                        #   debug3      
                                        #   debug2      
                                        #   debug1      
                                        #   log      
                                        #   notice      
                                        #   warning      
                                        #   error      
#log_min_messages = warning             # values in order of decreasing detail:      
                                        #   debug5      
                                        #   debug4      
                                        #   debug3      
                                        #   debug2      
                                        #   debug1      
                                        #   info      
                                        #   notice      
                                        #   warning      
                                        #   error      
                                        #   log      
                                        #   fatal      
                                        #   panic      
#log_min_error_statement = error        # values in order of decreasing detail:      
                                        #   debug5      
                                        #   debug4      
                                        #   debug3      
                                        #   debug2      
                                        #   debug1      
                                        #   info      
                                        #   notice      
                                        #   warning      
                                        #   error      
                                        #   log      
                                        #   fatal      
                                        #   panic (effectively off)      
# 根据实际情况设定，例如业务上认为5秒以上是慢SQL，那么就设置为5秒。      
log_min_duration_statement = 5s        # -1 is disabled, 0 logs all statements      