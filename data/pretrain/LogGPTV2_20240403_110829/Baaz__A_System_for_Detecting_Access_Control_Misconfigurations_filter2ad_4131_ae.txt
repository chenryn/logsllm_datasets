In Dataset 3, the subject dataset is the set of email lists
used as reference in Dataset 1, and the reference is the
set of organizational groups. Here, each organizational
group consists of a manager and all employees who re-
port directly to the manager. As we have mentioned ear-
lier, a reference dataset in Baaz may itself be inaccurate.
Hence, this evaluation helps us check how stale the mem-
berships to these email lists are. The number of users in
this Dataset is 115 and the number of objects is 243. The
slight discrepancy in the number of users in Datasets 1
and 3 is due to organizational churn in the period be-
tween when we ran the two experiments.
Baaz found many valid misconﬁgurations in all these
datasets. Across all datasets, most security misconﬁgu-
rations resulted due to role changes. Other security mis-
conﬁgurations arose because an individual user, who had
full permissions to an object, had inadvertently given ac-
cess to another user who should not have had access.
The causes of accessibility misconﬁgurations, similarly,
were moves across organizations or inadvertent mistakes
on the part of the individual manually assigning permis-
sions.
We now summarize some other insights we acquired
through this evaluation.
Administrator input: Baaz can only make recom-
mendations. Only an administrator, or someone who has
semantic knowledge about access requirements, needs to
make the ﬁnal decision of whether a misconﬁguration is
valid, an exception or invalid. For distributed access con-
trol systems such as Windows ﬁle servers, the validation
will have to be through querying multiple people in the
organization since objects involved in the misconﬁgura-
tion can have different owners. This is not a simple task.
Despite this difﬁculty, overall, the administrators and
resource owners found the system very useful since it
found several valid security and accessibility misconﬁg-
urations. Moreover, what the administrators appreciated
was that, instead of tracking down correct access for po-
tentially thousands of objects, they needed to concentrate
on a much smaller set of misconﬁguration candidates
that Baaz reports. For Datasets 1 and 3, the validation
was mostly through conversation and email, and took ap-
proximately one hour. For Dataset 2, it took a total of
three days turnaround time since we communicated only
through email with resource owners who were at a re-
mote site to complete the validation. Note that these are
total turnaround times: it does not mean that an admin-
istrator spent three complete days just on the validation
procedure.
Group Mapping vs Object Clustering: While Group
Mapping is universally effective at ﬁnding misconﬁgura-
tions, the Object Clustering approach is effective only in
datasets which have a lot of statistical similarity. This
is because Object Clustering relies on ﬁnding small de-
viations from a regular and often-repeated pattern of ac-
cess control permissions. Datasets 2 and 3 do not have
a regular pattern since most project web pages and email
distribution lists had unique access permissions. Conse-
quently, Object Clustering does not report any miscon-
ﬁgurations for these datasets. On the other hand, it does
ﬁnd misconﬁgurations for the ﬁle server (Dataset 1) since
there were many directories on the ﬁle servers we evalu-
ated with the same access permissions.
Invalid Misconﬁgurations: The number of invalid
misconﬁgurations varies signiﬁcantly across the different
datasets. This is related to our discussion in Section 7.1.
)
s
m
(
e
m
i
t
n
u
r
m
h
t
i
r
o
g
A
l
 250
 200
 150
 100
 50
 0
# ref. groups = 1296
# ref. groups = 324
# ref. groups = 81
 0
 500000  1e+06  1.5e+06  2e+06  2.5e+06  3e+06
Subject matrix size
Figure 11: Scalability of the Baaz Algorithm
The organizational groups form a rigid reference dataset,
so in Dataset 3, we see a large number of invalid miscon-
ﬁgurations. Across the datasets however, the number of
invalid misconﬁgurations were small enough not to dis-
courage an administrator in adopting our tool.
8.4 Algorithm Performance
In this Section, we concentrate on the performance and
scalability of the server algorithm. We used Dataset 1
described in Table 2 for this experiment.
We ran the misconﬁguration detection algorithm on
the dataset while varying the subject relation matrix size,
keeping the number of reference groups constant. To in-
crease the matrix size, we increased the directory depth
up to which we included objects into the subject’s re-
lation matrix, consequently increasing the number of ob-
jects, and therefore, the number of columns in the matrix.
Figure 11 shows the results of our experiments. Each
line represents the algorithm’s total run time which in-
cludes all three phases – Matrix Reduction, Group Map-
ping and Object Clustering – with different numbers of
reference groups. We varied the number of reference
groups by adding artiﬁcially created groups to the ref-
erence dataset while ensuring that the additional groups
follow the same size distribution as the real reference
groups. Every point in the graph is averaged across 20
runs. We ran all the experiments on a machine with a 3
GHz Intel Core 2 Duo CPU and 4 GB Memory, running
a 64-bit version of Windows Server 2008.
With a matrix size of 2.7 million, and with 1296 ref-
erence groups, the misconﬁguration detection takes a to-
tal of 246 ms to run. The increase in time is fairly lin-
ear in the matrix size because the Matrix Reduction step
dominates the total run-time of the algorithm. For the
same data point, where Matrix Reduction needs to in-
spect roughly 2.7 million cells in the subject’s relation
matrix, Group Mapping needed to process only 24 sum-
mary statements and 1296 reference groups, and Ob-
ject Clustering processed 24C2 = 276 summary statement
pairs.
Projecting from this graph, for a subject dataset rep-
resenting 100,000 employees and 100,000 objects, i.e.,
a matrix size of 1010, and a reference dataset involving
1296 groups, the misconﬁguration detection would take
approximately 340 seconds to run. Our experiments indi-
cate that the algorithm can scale to large datasets (much
larger than encountered in our deployments as shown in
Table 2), and run fast enough to provide prompt miscon-
ﬁguration reports.
9 Related Work
In this section, we discuss our work in the context of
related research.
Recent work by Baker et al. in detecting policy mis-
conﬁgurations [4] uses data mining to infer association-
rules between groups of resources that can be accessed
by common sets of users, based on an off-line analysis
of access attempts in log ﬁles. The authors use the pro-
ﬁle and frequency of granted requests to predict and ﬁx
operational accessibility issues. For example, if a user
belonging to such a common set inadvertently does not
have access to a particular resource, their tool will ﬂag
this as a misconﬁguration, and refer this to an appropri-
ate resource owner.
Baaz on the other hand operates on access permis-
sions. Consequently, in most cases, Baaz can ﬂag and
suggest ﬁxes for misconﬁgurations before they can be
exercised operationally. While access log analysis is an
extremely useful mechanism in detecting security and
accessibility issues, the approach is inherently comple-
mentary to the approach of analyzing access control per-
missions. Ideally, the two should be used in tandem.
Also, Baaz primarily uses a different technique, Group
Mapping, whereby the system compares subject and ref-
erence datasets: several of the misconﬁgurations that the
Group Mapping algorithm found in our evaluation could
not have been found using association rules alone. These
include the examples presented in Section 8.2 where
users change roles, or new employees join an organiza-
tion, and have not accessed any resources yet.
In ad-
dition, Baaz ﬁnds both security and accessibility issues
whereas Baker et al. concentrate only on accessibility
issues.
Finally, the goal of their misconﬁguration detection is
similar in intent to Baaz’s Object Clustering algorithm.
While Baaz focuses on identifying sets of users that can
access disjoint sets of objects, they identify all possible
sets of users who have common access permissions to
(possibly overlapping) sets of objects.
In Baaz, we
chose to focus on disjoint object-sets for reasons ex-
plained earlier.
Network intrusion prevention and detection systems
also have a similar operational view of misconﬁgura-
tions [15, 14]. An attempt is made to characterize nor-
mal behavior, as opposed to anomalous behavior, and
any deviation from this characterization is ﬂagged as a
potential vulnerability. In contrast, research on automat-
ically discovering attack graphs [2, 23], by correlating in-
formation across lists of known software-vulnerabilities,
improper access controls, and network misconﬁgura-
tion issues, have a forensic ﬂavor. This aspect is fur-
ther explored in more recent work such as HeatRay [6],
which explores identity-snowball attacks based on over-
entitled user privileges across a networked enterprise.
The HeatRay tool outputs suggestions to administrators
to prune privilege-lists on particular machines, maximiz-
ing security versus availability tradeoffs, using machine
learning and combinatorial optimization techniques. A
system such as Baaz can help an administrator decide
whether to remove access permissions as suggested by
HeatRay.
Other related work on policy anomaly detection in-
cludes the work on access control spaces [13] where the
authors describe a policy-authoring tool called Gokyo
that can help discover policy coverage issues.While
Gokyo assumes a high-level policy manifest exists, Baaz
works in scenarios where such manifests are not avail-
able.
Role-based access control (RBAC) [21] is widely cited
as a useful management tool to control access permis-
sions by separating out the user-role and role-permission
relationships. However, RBAC is known to be difﬁcult
to implement in practice [5, 12]. The problem of role
mining [22, 25, 18, 28, 10] is related to Baaz’s matrix
reduction step (Section 4), where we ﬁnd related user
and object groups. In role-mining, the user-object access
matrix is analyzed to ﬁnd maximal overlapping group-
ings of users and objects that have the same permissions.
In contrast, in Baaz, we are interested in misconﬁgura-
tions on shared-object permissions, as opposed to dis-
covering common patterns of access across user groups.
Nevertheless, like organizational groups, email groups,
and distribution lists, the output of a role-mining algo-
rithm, speciﬁcally the user-role mappings, can be used
as an input to our group mapping phase. We believe that
even if organizations adopt some ﬂavor of RBAC, a sys-
tem like Baaz is useful in discovering misconﬁgurations
caused by exceptions and role changes. There is also a
wealth of related work on the topic of clustering in gen-
eral, and a summary of this is outside the scope of this
work.
Policy anomaly detection is also a popular subject of
study in the ﬁrewall and network conﬁguration space.
Here, existing tools [27] explore the semantics of differ-
ent ﬁltering rules and ﬁrewall policies. Testing and static
analysis techniques [26, 17, 3] have been proposed to ex-
plore and understand how policy conﬁgurations satisfy
properties such as redundancy and contradiction. How-
ever, all of these techniques are speciﬁc to ﬁrewall con-
ﬁgurations and are inherently different from Baaz which
uses comparison across ACL datasets and within the
same dataset to ﬁnd misconﬁgurations.
Several network security scanning tools are actively
used by network administrators to ﬁnd vulnerabilities
such as open ports, vulnerable applications and poor
passwords [7, 9]. Baaz’s purpose and techniques target
a different problem – ﬁnding access control misconﬁgu-
rations – and are therefore complementary to the intent
of these tools. In fact, a number of such tools and sys-
tems should be used in tandem to ensure a high level of
security for all enterprise resources.
10 Conclusion
In this paper, we have described the design, implementa-
tion and evaluation of Baaz, a system used to detect ac-
cess control misconﬁgurations in shared resources. Baaz
continuously monitors access permissions and group
memberships, and through the use of two techniques –
Group Mapping and Object Clustering – ﬁnds candidate
misconﬁgurations in the access permissions. Our eval-
uation shows that Baaz is very effective at ﬁnding real
security and accessibility misconﬁgurations, which are
useful to administrators.
Acknowledgments
We would like to thank our shepherd, Somesh Jha, for
his valuable comments and suggestions. We would also
like to thank Ohil Manyam for testing and optimizing
the prototype Baaz system, Rashmi K. Y, Geoffry Nord-
lund, and Chuck Needham for help with evaluating Baaz,
and Geoffrey Voelker, Venkat Padmanabhan and Vishnu
Navda for providing insightful comments that improved
earlier drafts of this paper.
References
[1] Active Directory. http://www.microsoft.com/win
dowsserver2003/technologies/directory/activedire-
ctory/.
[2] P. Ammann, D. Wijesekera, and S. Kaushik. Scal-
able, graph-based network vulnerability analysis.
In Proceedings of the 9th ACM conference on Com-
puter and communications security, 2002.
[3] Y. Bartal, A. Mayer, K. Nissim, and A. Wool. Fir-
mato: A novel ﬁrewall management toolkit. ACM
Trans. Comput. Syst., 22(4):381–420, 2004.
[4] L. Bauer, S. Garriss, and M. K. Reiter. Detecting
and resolving policy misconﬁgurations in access-
control systems. In Proc. SACMAT ’08, pages 185–
194, New York, NY, USA, 2008. ACM.
[5] Bruce Schneier, Real-World Access Control.
http://www.schneier.com/crypto-gram-0909.html.
[22] J. Schlegelmilch and U. Steffens. Role mining with
orca. In Proc. SACMAT ’05, pages 168–176, 2005.
[23] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and
J. M. Wing. Automated generation and analysis of
attack graphs.
In Proceedings of the 2002 IEEE
Symposium on Security and Privacy, 2002.
automated
insider
access
identity
[24] The
organiza-
and
tions mitigate
data.
http://ﬁndarticles.com/p/articles/mi m4153/is 2 65/
ai n25449309.
threat:
controls
risks
help
important
can
to
[25] J. Vaidya, V. Atluri, and J. Warner. Roleminer: min-
In CCS ’06,
ing roles using subset enumeration.
pages 144–153. ACM, 2006.
[26] A. Wool. Architecting the lumeta ﬁrewall analyzer.
In SSYM’01: Proceedings of the 10th conference on
USENIX Security Symposium, pages 7–7, Berkeley,
CA, USA, 2001. USENIX Association.
[27] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah,
and P. Mohapatra. Fireman: A toolkit for ﬁrewall
modeling and analysis. In Proceedings of the 2006
IEEE Symposium on Security and Privacy. IEEE
Computer Society, 2006.
[28] D. Zhang, K. Ramamohanarao, and T. Ebringer.
Role engineering using graph optimisation. In SAC-
MAT ’07, pages 139–144. ACM, 2007.
[6] J. Dunagan, A. X. Zheng, and D. R. Simon. Heat-
ray: Combating identity snowball attacks using ma-
chine learning, combinatorial optimization and at-
tack graphs. SIGOPS Oper. Syst. Rev., 2009.
[7] D. Farmer and E. H. Spafford. The COPS secu-
rity checker system. In Proceedings of the Summer
Usenix Conference, 1990.
[8] File
System
Class.
http://msdn.microsoft.com/en-us/library/system.io.
ﬁlesystemwatcher.aspx.
Watcher
[9] S.
S. A.
T.
for Analyzing Networks.
http://www.porcupine.org/satan.
[10] M. Frank, D. Basin, and J. M. Buchmann. A class
In
of probabilistic models for role engineering.
CCS ’08. ACM, 2008.
[11] P. D. Grunwald. The Minimum Description Length
Principle. The MIT Press, 2007.
Study Results
[12] Information Risk in the Professional Services-
In-
for Research.
Field
stitutions
http://mba.tuck.dartmouth.edu/digital/Research/
ResearchProjects/DataFinancial.pdf.
from Financial
a Roadmap
and
[13] T. Jaeger, X. Zhang, and A. Edwards. Policy man-
agement using access control spaces. ACM Trans.
Inf. Syst. Secur., 6(3):327–364, 2003.
[14] A. Joshi, S. T. King, G. W. Dunlap, and P. M.
Chen.
intrusions
through vulnerability-speciﬁc predicates. SIGOPS
Oper. Syst. Rev., 39(5):91–104, 2005.
Detecting past and present
[15] S. T. King and P. M. Chen. Backtracking intrusions.
SIGOPS Oper. Syst. Rev., 37(5):223–236, 2003.
[16] C. Lund and M. Yannakakis. On the hardness of
J. ACM,
approximating minimization problems.
41(5):960–981, 1994.
[17] A. Mayer, A. Wool, and E. Ziskind. Fang: A ﬁre-
wall analysis engine.
In SP ’00: Proceedings of
the 2000 IEEE Symposium on Security and Pri-
vacy, page 177, Washington, DC, USA, 2000. IEEE
Computer Society.
[18] I. Molloy, H. Chen, T. Li, Q. Wang, N. Li,
E. Bertino, S. Calo, and J. Lobo. Mining roles
with semantic meanings.
In Proceedings of the
13th ACM symposium on Access control models
and technologies, 2008.
[19] Privileged Password Management:
combat-
com-
enterprise.
for
the
threat
insider
regulations
ing
pliance
http://www.cyber-ark.com/constants/white-
papers.asp?dload=IDC White Paper.pdf.
and meeting
the
[20] M. Russinovich, D. Solomon, and A. Ionescu. Win-
dows Internals, 5th Edition. Microsoft Press, 2009.
[21] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and
C. E. Youman. Role-based access control models.
Computer, 29(2):38–47, 1996.