goto out;
}
// kevent() returns the number of events placed in the receive list
if (ret != 0)
ret = process_events(&changelist);
} while (!ret);
out:
if (kqfd >= 0)
close(kqfd);
exit(ret);
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 127 of 153
$ gcc -Wall -o kq_fwatch kq_fwatch.c
$ touch /tmp/file.txt
$ ./kq_fwatch /tmp/file.txt
# another shell prompt
$ touch /tmp/file.txt
attributes changed
$ echo hello > /tmp/file.txt
attributes changed
written
$ sync /tmp/file.txt
attributes changed
$ ln /tmp/file.txt /tmp/file2.txt
attributes changed
link count changed
$ rm /tmp/file2.txt
deleted
The Finder uses the kqueue mechanism to learn about changes made to a directory that is being displayed
in a Finder window, with the Desktop being a special case of a Finder window. This allows the Finder to
update the directory's view.
9.16.4. Core Foundation Notifications
Core Foundation notifications are discussed in Section 9.17.1. We mention them here for completeness.
9.16.5. Fsevents
Mac OS X 10.4 introduced an in-kernel notification mechanism called fsevents that can inform user-space
subscribers of volume-level file system changes as they occur. The Spotlight search system uses this
mechanism. We will discuss fsevents in Chapter 11.
9.16.6. Kauth
Kauth (kernel authorization) is a kernel subsystem introduced in Mac OS X 10.4 that provides a kernel
programming interface (KPI) using which loadable kernel code can participate in authorization decisions
in the kernel. It can also be used as a notification mechanism. We will discuss kauth in Chapter 11.
9.17. Core Foundation IPC
Core Foundation is an important Mac OS X framework that provides fundamental data types and several
essential services, including a variety of IPC mechanisms.
9.17.1. Notifications
The Core Foundation (CF) framework provides the CFNotificationCenter data type, which, along with
its associated functions, can be used for sending and receiving intraprocess and interprocess notifications.
A CF notification is a message consisting of the following three elements:
A notification name (a CFStringRef), which must be non-NULL.
 An object identifier, which can either be NULL or point to a value that identifies the object that
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 128 of 153
posted the notification. For distributed (interprocess) notifications, the identifier must be a string (a
CFStringRef).
 A dictionary, which can either be NULL or contain arbitrary information that further describes the
notification. For distributed notifications, the dictionary can contain only property list objects.
The CF notification API supports the following three types of notification centers (a process can have at
most one of each type): local center, distributed center, and Darwin notify center. The local center is
process-local, and the other two are for distributed notifications. The distributed center provides access to
distnoted (see Section 9.16.1), whereas the Darwin notify center provides access to notifyd (see
Section 9.16.2). A reference to any of these centers is obtained by calling the appropriate
CFNotificationCenterGet* function, which returns a CFNotificationCenterRef data type.
// distributed notification center (/usr/sbin/notifyd)
CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void);
// distributed notification center (/usr/sbin/distnoted)
CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void);
// process-local notification center
CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void);
Once you have a reference to a notification center, you can add an observer, remove an observer, or post
notifications. The same set of functions is used to perform these operations regardless of the notification
center type. Figure 962 shows a program that posts notifications to the distributed center.
Figure 962. A program for posting Core Foundation distributed notifications
// CFNotificationPoster.c
#include 
#define PROGNAME "cfposter"
int
main(int argc, char **argv)
{
CFStringRef name, object;
CFNotificationCenterRef distributedCenter;
CFStringEncoding encoding = kCFStringEncodingASCII;
if (argc != 3) {
fprintf(stderr, "usage: %s  \n", PROGNAME);
exit(1);
}
name = CFStringCreateWithCString(kCFAllocatorDefault, argv[1], encoding);
object = CFStringCreateWithCString(kCFAllocatorDefault, argv[2], encoding);
distributedCenter = CFNotificationCenterGetDistributedCenter();
CFNotificationCenterPostNotification(
distributedCenter, // the notification center to use
name, // name of the notification to post
object, // optional object identifier
NULL, // optional dictionary of "user" information
false); // deliver immediately (if true) or respect the
// suspension behaviors of observers (if false)
CFRelease(name);
CFRelease(object);
exit(0);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 129 of 153
}
Figure 963 shows a program that registers an observer of all distributed notifications, after which it runs in
a loop, printing information about each received notification. When it receives a notification named
cancel, it removes the observer and terminates the loop. Note that the observer program uses the concept
of a run loop, which is discussed in Section 9.17.2.
Figure 963. A program for observing Core Foundation distributed notifications
// CFNotificationObserver.c
#include 
void
genericCallback(CFNotificationCenterRef center,
void *observer,
CFStringRef name,
const void *object,
CFDictionaryRef userInfo)
{
if (!CFStringCompare(name, CFSTR("cancel"), kCFCompareCaseInsensitive)) {
CFNotificationCenterRemoveObserver(center, observer, NULL, NULL);
CFRunLoopStop(CFRunLoopGetCurrent());
}
printf("Received notification ==>\n");
CFShow(center), CFShow(name), CFShow(object), CFShow(userInfo);
}
int
main(void)
{
CFNotificationCenterRef distributedCenter;
CFStringRef observer = CFSTR("A CF Observer");
distributedCenter = CFNotificationCenterGetDistributedCenter();
CFNotificationCenterAddObserver(
distributedCenter, // the notification center to use
observer, // an arbitrary observer-identifier
genericCallback, // callback to call when a notification is posted
NULL, // optional notification name to filter notifications
NULL, // optional object identifier to filter notifications
CFNotificationSuspensionBehaviorDrop); // suspension behavior
CFRunLoopRun();
// not reached
exit(0);
}
Let us now test the poster and observer programs from Figures 962 and 963, respectively.
$ gcc -Wall -o cfposter CFNotificationPoster.c -framework CoreFoundation
$ gcc -Wall -o cfobserver CFNotificationObserver.c -framework CoreFoundation
$ ./cfobserver
# another shell prompt
$ ./cfposter system mach
Received notification ==>
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 130 of 153
system
mach
(null)
$ ./cfposter cancel junk
Received notification ==>
cancel
junk
(null)
$
As we noted in Section 9.16.1, an observer of all distributed notifications will receive notifications from
other posters. If you let the cfobserver program run for some time, you will see a variety of notifications
being sent by different parts of the operating system.
...
Received notification ==>
com.apple.carbon.core.DirectoryNotification
/.vol/234881027/244950
(null)
...
Received notification ==>
com.apple.screensaver.willstop
(null)
(null)
...
Received notification ==>
com.apple.Cookies.Synced
448
(null)
...
The object identifier 448 in the notification named com.apple. Cookies.Synced is the process ID of the
Safari application. The iTunes application is a poster of interesting notifications that contain dictionaries
with detailed song informationsuch as details of a new song as it starts to play.
9.17.2. The Run Loop
A run loop is an event loop that monitors sources of input to a task, and when an input source becomes
ready for processing (i.e., the source has some activity), the run loop dispatches control to all entities that
have registered interest in the sources. Examples of such input sources include user-input devices,
network connections, timer events, and asynchronous callbacks.
A CFRunLoop is an opaque Core Foundation object that provides the run-loop abstraction. Carbon and
Cocoa both use CFRunLoop as a building block to implement higher-level event loops. For example, the
NSRunLoop class in Cocoa is implemented atop CFRunLoop.
The following points are noteworthy about run loops.
An event-driven application enters its main run loop after initializing.
Each thread has exactly one run loop, which is automatically created by Core Foundation. A
thread's run loop cannot be created or destroyed programmatically.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 131 of 153
An input source object is placed into (registered in) a run loop by calling the appropriate
CFRunLoopAdd* function for that input source. Then, the run loop is typically run. If there are no
events, the run loop blocks. When an event occurs because of an input source, the run loop wakes
up and calls any callback functions that may be registered for that source.
Run-loop event sources are grouped into sets called modes, where a mode restricts which event
sources the run loop will monitor. A run loop can run in several modes. In each mode, a run loop
monitors a particular set of objects. Examples of modes include NSModalPanelRunLoopMode (used
when waiting for input from a modal panel) and NSEventTrackingRunLoopMode (used in event-
tracking loops). The default modekCFRunLoopDefaultModeis used for monitoring objects while the
thread is idle.
Figure 964 shows the types of objects that can be placed into a run loop, the functions used for creating
the objects, and the functions used for adding them to a run loop.
Figure 964. Creating and adding run-loop input sources
[View full size image]
9.17.2.1. Run-Loop Observers
A run-loop observer (CFRunLoopObserver) is a run-loop input source that generates events at one or more
specified locations, or activity stages, within the run loop. The stages of interest are specified as the
bitwise OR of individual stage identifiers when the observer is created. For example, the
kCFRunLoopEntry stage represents the entrance of the run loopit will be hit each time the run loop starts
running as a result of either CFRunLoopRun() or CFRunLoopRunInMode().
Note that the term observer is somewhat confusing in that so far we have used the term to refer to entities
that receive notifications; here, an observer generates notifications, although it is observing the run loop's
activities in doing so.
9.17.2.2. Run-Loop Sources
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 132 of 153
A run-loop source (CFRunLoopSource) abstracts an underlying source of events, such as a Mach port
(CFMachPort), a message port (CFMessagePort), or a network socket (CFSocket). The arrival of a
message on one of these communication end points is an asynchronous event that represents input to a run
loop. Core Foundation also allows custom input sources to be created.
Given an underlying primitive type supported by Core Foundation as an input source, a
CFRunLoopSource object must be created before the source can be added to a run loop. For example,
given a CFSocket, the CFSocketCreateRunLoopSource() function returns a reference to a
CFRunLoopSource, which can then be added to a run loop using CFRunLoopAddSource().
Let us look at some properties of the input sources provided by Core Foundation.
CFMachPort
A CFMachPort is a wrapper around a native Mach port, but it allows the port to be used only for receiving
messagesCore Foundation does not provide a function for sending messages. However,
CFMachPortGetPort() retrieves the underlying native Mach port, which can then be used with the Mach
APIs to send messages. Conversely, CFMachPortCreateWithPort() creates a CFMachPort from an
existing native Mach port. If an existing port is not being used, CFMachPortCreate() can be used to
create both a CFMachPort and the underlying native port. Both creation functions accept as an argument a
callback function, which is called when a message arrives on the port. The callback is passed a pointer to
the raw messagespecifically, the mach_msg_header_t structure. CFMachPortSetInvalidationCallBack
() can be used to set another callback function that would be invoked when the port is invalidated.
CFMessagePort
A CFMessagePort is a wrapper around two native Mach portsunlike a CFMachPort, a CFMessagePort
supports bidirectional communication. Like a CFMachPort, it can be used only for local (non-networked)
intraprocess or interprocess communication since Mac OS X does not provide network-transparent Mach
IPC.
In a typical use of CFMessagePort, a process creates a local port through CFMessagePortCreateLocal
(), specifying a string name with which to register the port. The name can also be set later or changed by
using CFMessagePortSetName(). Thereafter, another process can call CFMessagePortCreateRemote()
with the same string name to create a CFMessagePort that is connected to the remote (to this process)
port.
Let us look at an example of using a CFMessagePort. Figure 965 shows a server that creates a
CFMessagePort and advertises its name. The server then creates a run-loop source from the port and adds
it to the main run loop. On receiving a message, the only service the server provides is printing the
contents of the messageno reply is sent.
Figure 965. A CFMessagePort server
// CFMessagePortServer.c
#include 
#define LOCAL_NAME "com.osxbook.CFMessagePort.server"
CFDataRef
localPortCallBack(CFMessagePortRef local, SInt32 msgid, CFDataRef data,
void *info)
{
printf("message received\n");
CFShow(data);
return NULL;
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 133 of 153
int
main(void)
{
CFMessagePortRef localPort;
CFRunLoopSourceRef runLoopSource;
localPort = CFMessagePortCreateLocal(
kCFAllocatorDefault, // allocator
CFSTR(LOCAL_NAME), // name for registering the port
localPortCallBack, // call this when message received
NULL, // contextual information
NULL); // free "info" field of context?
if (localPort == NULL) {
fprintf(stderr, "*** CFMessagePortCreateLocal\n");
exit(1);
}
runLoopSource = CFMessagePortCreateRunLoopSource(
kCFAllocatorDefault, // allocator
localPort, // create run-loop source for this port
0); // priority index
CFRunLoopAddSource(CFRunLoopGetCurrent(), runLoopSource,
kCFRunLoopCommonModes);
CFRunLoopRun();
CFRelease(runLoopSource);
CFRelease(localPort);