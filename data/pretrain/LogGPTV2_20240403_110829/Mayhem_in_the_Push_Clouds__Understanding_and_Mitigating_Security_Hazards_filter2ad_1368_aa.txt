# Mayhem in the Push Clouds: Understanding and Mitigating Security Hazards in Mobile Push-Messaging Services

**Authors:**  
Tongxin Li<sup>1</sup>, Xiaoyong Zhou<sup>2,4</sup>, Luyi Xing<sup>2</sup>, Yeonjoon Lee<sup>2</sup>, Muhammad Naveed<sup>3</sup>, XiaoFeng Wang<sup>2</sup>, Xinhui Han<sup>1</sup>

**Affiliations:**  
1. Peking University  
2. Indiana University Bloomington  
3. University of Illinois at Urbana-Champaign  
4. Samsung Research America

## Abstract
Push messaging is a critical mobile-cloud service that supports a wide range of mobile applications. This service requires complex interactions between developer servers and their apps, making it prone to errors. Despite its importance, little research has been conducted to understand the security risks associated with these services. In this paper, we present the first comprehensive security analysis of push-messaging services, revealing significant and pervasive security flaws that affect billions of mobile users. Through even the most reputable services like Google Cloud Messaging (GCM) and Amazon Device Messaging (ADM), an adversary can steal sensitive messages, stealthily install or uninstall apps, remotely lock out legitimate users, or completely wipe their data. These vulnerabilities arise from inadequate protection of device-to-cloud interactions and client-subscriber app communication. Our study also highlights questionable practices, such as weak cloud-side access control and extensive use of PendingIntent, which can lead popular apps and system services like Android Device Manager, Facebook, Google+, Skype, and PayPal to leak sensitive user data or act on the adversary's commands. To mitigate these threats, we developed a technique that enables app developers to establish end-to-end protection for their communication over vulnerable messaging services.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access controls, Invasive software

## General Terms
Design, Experimentation, Security

## Permission
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

CCS'14, November 3–7, 2014, Scottsdale, Arizona, USA.  
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.  
http://dx.doi.org/10.1145/2660267.2660302.

## Keywords
Mobile push-messaging services, Android security, mobile cloud security, security analysis, end-to-end protection

## 1. Introduction
Push messaging, also known as push notifications or cloud-to-device messaging, is a type of cloud service that helps developers deliver data to their mobile applications running on customers' devices. Major cloud providers, including Google, Apple, and Amazon, offer these services. Popular examples include Google Cloud Messaging (GCM), Apple Push Notification Service, and Amazon Device Messaging (ADM). These services are used by billions of mobile devices, enabling developers to push notifications, messages, and commands to their apps efficiently, avoiding resource-intensive continuous polling.

Despite the pervasiveness and importance of these services, little attention has been given to their security and privacy implications. Recent reports indicate that GCM has been abused by cybercriminals to coordinate malware. However, it remains unclear whether the push services themselves are vulnerable to infiltration. If successful, such attacks could allow unauthorized parties to steal sensitive data or take complete control of subscribing apps.

## 2. Background

### 2.1 Mobile Cloud Messaging
Cloud-based push messaging services are widely deployed, supporting most mobile devices. These services are offered by mobile-platform providers (e.g., Google, Apple), cloud service providers (e.g., Amazon), and specialized messaging service providers (e.g., mpCloud). Despite their diversity, these services share a similar architecture and operational principles.

#### Service Infrastructure
Figure 1 illustrates the typical infrastructure of a push-messaging service. The core components are the connection servers in the cloud and the client-side components on individual mobile devices. The connection server receives messages from the app server and pushes them to the service client on each device, while also handling upstream messages. We refer to these interactions as the cloud-device link. The client, a persistent process, monitors messages from the cloud and passes them to subscriber apps, waking them up when necessary. This client can be a standalone service app or part of the SDKs provided by the service provider. Interactions between the client and the app are referred to as the on-device link.

#### Service Operations
The operations of a push-messaging service involve two main stages: registration and message delivery. An app must register with the connection server before receiving messages. This registration includes the app's identification information, such as the application ID, Android ID, and sender ID. The connection server generates a unique registration ID, which is critical for identifying the app and delivering messages. This ID is sent to the app and the app server via a secure channel.

To push a message, the app server provides the connection server with the registration IDs of the target apps and the message content. The connection server enqueues the messages and pushes them to the corresponding devices. On the device, the message is delivered to the service client, which then passes it to the subscriber app.

#### On-Device Communication
When the service client is a standalone program, such as the GCM app, it interacts with the subscriber app through Inter-Process Communication (IPC) mechanisms, such as intents on Android. An intent is a message that describes an operation to be performed by the recipient. It can launch a user interface component, communicate with a background service, or broadcast to registered receivers. The sender can specify the recipient's package name or define an action, allowing any app registered for that action to receive the intent.

A key issue with the intent mechanism is that the recipient is not informed of the sender's identity. This is addressed using PendingIntent, a token that allows the recipient to perform predefined operations as if it were the sender. The recipient can call methods like `getTargetPackage` or `getCreatorPackage` to obtain the sender's package name, which is verified by the operating system.

### 2.2 Security Hazards
The security of a push-messaging service depends on the integrity of its communication chain, including interactions between client-side components, the device, the cloud, the app server, and the app. A vulnerability in any of these links can have severe consequences, such as leaking sensitive data or exposing critical system capabilities.

#### What Can Go Wrong
The most critical information in mobile-cloud services is the app's registration ID. If this ID is exposed and tied to an unauthorized party, the consequences can be devastating. For example, an attacker can intercept and manipulate messages, leading to data theft, unauthorized app installation, or remote device control.

## 3. Security Analysis
In our research, we conducted the first comprehensive security analysis of mobile-cloud services for Android devices. Our findings are alarming: almost all popular services contain previously unknown, security-critical weaknesses. Even subtle vulnerabilities can be exploited through carefully crafted attacks, leading to serious consequences.

For instance, an unauthorized party can bypass GCM's security checks to preempt the registration ID of a victim's app, causing sensitive information like Facebook messages to be pushed to the adversary's device. Similar issues exist in other popular push-messaging services, such as mpCloud, which has over 600 million subscribers.

Client-side components, including service clients and SDKs, also exhibit critical security weaknesses. These are often due to the exposure of the PendingIntent object through intent broadcasts or service invocations. An unauthorized party can exploit this exposure to launch attacks, pushing fake messages to subscriber apps and controlling their communication with the cloud. This problem is present in leading services like GCM, ADM, and UrbanAirship.

The consequences of these attacks are severe. Adversaries can gain access to critical user data, such as bank account balances and home addresses, and even command Android Device Manager to lock out the device user and wipe all data. In our analysis of 63 popular apps, we found that many, including Facebook, Google Plus, Chase Bank, and PayPal, are affected by these security-critical problems. We reported all discovered flaws to the respective service providers, who acknowledged the importance of our findings. Most of the flaws have been fixed based on our reports.

## 4. End-to-End Protection
Our security analysis reveals the pervasiveness of subtle yet serious security weaknesses in major push-messaging services, raising questions about their reliability. To address these issues, we designed an end-to-end protection mechanism. This mechanism allows developers and their apps to establish a secure channel on top of unreliable services, ensuring the confidentiality and integrity of exchanged information. We implemented this mechanism into a pair of SDKs, one for the app server and the other wrapping popular messaging service SDKs. Our evaluation shows that this mechanism incurs minimal overhead and effectively mitigates the identified problems.

## 5. Contributions
The key contributions of this paper are:

- **Security Analysis of Push Messaging Services:** We conducted the first comprehensive security analysis of push-messaging services, uncovering new types of security problems in client-cloud communication and client-side components. Our findings highlight significant vulnerabilities and their impacts, raising awareness of this emerging security challenge.
- **New Protection Technique:** We developed a novel end-to-end protection mechanism that secures push messaging communication, preventing unauthorized impersonation and interception. This mechanism can be easily integrated into existing apps by developers.

## 6. Roadmap
The rest of the paper is organized as follows:
- **Section 2** provides background information.
- **Sections 3 and 4** detail the security-critical flaws discovered in both client-cloud communications and client-side components.
- **Section 5** presents a measurement study of the identified problems.
- **Section 6** introduces our end-to-end protection mechanism.
- **Section 7** discusses the limitations of our study.
- **Section 8** surveys related prior research.
- **Section 9** concludes the paper.

---

This revised version aims to provide a more structured, clear, and professional presentation of the research.