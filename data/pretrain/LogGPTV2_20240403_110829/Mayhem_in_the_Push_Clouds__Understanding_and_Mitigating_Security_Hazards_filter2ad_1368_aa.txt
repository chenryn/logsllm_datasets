title:Mayhem in the Push Clouds: Understanding and Mitigating Security Hazards
in Mobile Push-Messaging Services
author:Tongxin Li and
Xiao-yong Zhou and
Luyi Xing and
Yeonjoon Lee and
Muhammad Naveed and
XiaoFeng Wang and
Xinhui Han
Mayhem in the Push Clouds: Understanding and Mitigating
Security Hazards in Mobile Push-Messaging Services
Tongxin Li1, Xiaoyong Zhou2,4, Luyi Xing2, Yeonjoon Lee2, Muhammad Naveed3,
XiaoFeng Wang2 and Xinhui Han1
2Indiana University Bloomington
3University of Illinois at Urbana-Champaign
1Peking University
4Samsung Research America
ABSTRACT
Push messaging is among the most important mobile-cloud ser-
vices, offering critical supports to a wide spectrum of mobile apps.
This service needs to coordinate complicated interactions between
developer servers and their apps in a large scale, making it error
prone. With its importance, little has been done, however, to un-
derstand the security risks of the service. In this paper, we report
the ﬁrst security analysis on those push-messaging services, which
reveals the pervasiveness of subtle yet signiﬁcant security ﬂaws in
them, affecting billions of mobile users. Through even the most
reputable services like Google Cloud Messaging (GCM) and Ama-
zon Device Messaging (ADM), the adversary running carefully-
crafted exploits can steal sensitive messages from a target device,
stealthily install or uninstall any apps on it, remotely lock out its
legitimate user or even completely wipe out her data. This is made
possible by the vulnerabilities in those services’ protection of device-
to-cloud interactions and the communication between their clients
and subscriber apps on the same devices. Our study further brings
to light questionable practices in those services, including weak
cloud-side access control and extensive use of PendingIntent,
as well as the impacts of the problems, which cause popular apps or
system services like Android Device Manager, Facebook, Google+,
Skype, PayPal etc. to leak out sensitive user data or unwittingly act
on the adversary’s command. To mitigate this threat, we developed
a technique that helps the app developers establish end-to-end pro-
tection of the communication with their apps, over the vulnerable
messaging services they use.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access con-
trols, Invasive software
General Terms
Design, Experimentation, Security
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660302.
Keywords
mobile push-messaging services; Android security; mobile cloud
security; security analysis; end-to-end protection
1.
INTRODUCTION
Push messaging (aka. push notiﬁcations, cloud to device mes-
saging, etc.)
is a type of cloud services that help developers of
mobile applications (apps for short) deliver data to their apps run-
ning on their customers’ mobile devices. Such services are offered
by almost all major cloud providers. Prominent examples include
Google Cloud Messaging (GCM), Apple Push Notiﬁcation Ser-
vice and Amazon Device Messaging (ADM). Subscribers of the
services are popular apps (Android Device Manager, Facebook,
Skype, Netﬂix, Oracle, ABC news, etc.) on billions of mobile de-
vices. Through those services, the developer can conveniently push
her notiﬁcations, messages and even commands to her apps, avoid-
ing continuous probes initiated from the app side, which are more
resource-consuming. With the pervasiveness of the services and
the increasingly important information exchanged through them,
which includes not only private notiﬁcations (e.g., Facebook mes-
sages) but also security-critical commands (e.g., wiping out user
data on a stolen phone [2]), little has been done, however, to under-
stand their security and privacy implications.
Security risks in push messaging. Recently it has been reported
that the GCM cloud was abused by cybercriminals to coordinate
and control their malware [5]. What is less clear is whether such
push services themselves are vulnerable to inﬁltration attempts.
Those attempts, once succeeded, can have devastating consequences,
potentially allowing an unauthorized party to steal sensitive user
data or even completely control the apps subscribing those services.
More speciﬁcally, a push messaging service is typically provided
through a connection server in the cloud, which delivers data from a
3rd-party app server to its apps running on a large number of mobile
devices. This delivery process often goes through a service client
(e.g., the GCM client) and the software development kits (SDKs)
integrated into the apps. If the interactions that happen between
either the client and the server or the SDK and the client have not
been well thought-out, a local (on the same device) or remote ad-
versary could intercept the messages pushed through the service,
or even impersonate the app server to command the apps to operate
on his behalf. To ﬁnd out whether such security risks are indeed
present in today’s mobile clouds, which are very complicated sys-
tems, an in-depth analysis is needed to understand their operations
across the cloud and mobile devices, and the security implications
978of those operations. With the importance of the problem, such a
security study has never been done before.
Our ﬁndings. In our research, we conducted the ﬁrst security anal-
ysis on the mobile-cloud services for Android devices. Our ﬁndings
are astonishing: almost all popular services contain security-critical
weaknesses never known before. Even though some of them are
subtle, hiding deeply inside the systems, they can all be exploited
in practice through carefully-crafted attacks, which often cause se-
rious consequences. Particularly, we found that an unauthorized
party can circumvent security checks of GCM to preempt the reg-
istration ID of the victim’s app. As a result, the victim’s sensitive
information such as her Facebook messages will all be pushed to
the adversary’s device. Such information leaks also happen to the
most popular push-messaging cloud in China with over 600 mil-
lion subscribers, though the service works in a way different from
GCM. Throughout the paper, we use a pseudonym mpCloud to re-
fer to this push-messaging service, on the request for anonymity
from the company.
Also serious are the problems with the client-side components
of those push-messaging services, including service clients (e.g.,
the GCM client) and SDKs. Our research reveals critical security
weaknesses in such components within almost all popular services
for Android devices, which are mainly caused by the exposure of
the PendingIntent object through intent broadcast or service
invocation with regard to a designated action, which an unautho-
rized party can claim to be able to handle. With this exposure,
the adversary who knows how to use the PendingIntent can
launch a series of carefully-crafted attacks to push fake messages
to subscriber apps and control their communication with the clouds,
a problem present in all leading services such as GCM, ADM and
UrbanAirship.
The consequences of those attacks are dire, through which not
only can the adversary gain access to such critical user data as bank
account balance, family members’ home addresses, etc., but he can
even command Android Device Manager to lock out the device user
and wipe out all her data, and the Google Play service to install and
uninstall any app without the user’s consent. In our research, we
analyzed 63 popular apps utilizing messaging services and discov-
ered the pervasiveness of those security-critical problems. Exam-
ples of those apps include Facebook, Google Plus, Chase bank and
PayPal. We reported all the ﬂaws discovered in our research to
Google, Amazon, and other service providers, which all acknowl-
edged the importance of our ﬁndings. Particularly, one of them
(UrbanAirship [16]) informed us its plan to formally cite us in its
release notes and another organization (Section 3.2) has expressed
gratitude for our willingness to keep them anonymous. Also, An-
droid security team has formally acknowledged us on their ofﬁcial
website [3]. Video demos of the exploits are posted online [15] and
most of the ﬂaws have already been ﬁxed based on our reports.
End-to-end protection. Our security analysis reveals the perva-
siveness of subtle yet serious security weaknesses across major
push-messaging services, which calls into question the reliability
of those services. Based upon such understanding, new techniques
need to be developed to make these systems also secure to use,
even in the presence of a variety of unexpected security ﬂaws an
app developer has no control of. As a ﬁrst step, we designed an
end-to-end protection mechanism through which the developer and
her apps can establish a secure channel on top of those unreliable
services to authenticate each other and safeguard the conﬁdential-
ity and integrity of the information they exchange. This mechanism
was further implemented into a pair of SDKs, one for the app server
and the other wrapping the SDKs for popular messaging services.
Using the mechanism, the app developer can conveniently build
up this end-to-end protection, with only minor adjustments of her
code. Our evaluation study further demonstrates that this mecha-
nism incurs only a small overhead and effectively addresses all the
problems we discovered.
Contributions. The scientiﬁc contributions of the paper are:
• Security analysis of push messaging services. Understanding se-
curity weaknesses inside practical systems is the starting point for
any system security research. For an emerging system as important
and complicated as mobile cloud, the problems there can be new,
subtle and deep, requiring a well-conceived study to identify and
determine their security implications. Our research makes a ﬁrst
step towards this end, which reveals serious vulnerabilities within
push-messaging systems, one of the most important mobile cloud
services. We performed a security analysis on such services offered
by leading cloud providers, uncovered new types of security prob-
lems within its client-cloud communication and client-side compo-
nents, and further investigated the impacts of our ﬁndings, which
are shown to be signiﬁcant. This work helps better understand what
can go wrong inside mobile clouds and what can be done to make
it right, raising the awareness of this new security challenge and
laying the foundation for the follow-up research on this direction.
• New protection technique. We made the ﬁrst attempt to secure
end-to-end push messaging communication in the presence of weak-
nesses within the underlying mobile-cloud services. Our approach
prevents an unauthorized party from impersonating the app server
to push messages to apps or intercepting messages. It can be con-
veniently integrated into existing apps by their developers.
Roadmap. The rest of the paper is organized as follows: Sec-
tion 2 gives the background information of our study; Section 3
and Section 4 elaborates the security-critical ﬂaws discovered in
both client-cloud communications and client-side components of
push-messaging services; Section 5 reports a measurement study
on the problems we found; Section 6 presents our end-to-end pro-
tection; Section 7 discusses the limitations of our study; Section 8
surveys related prior research and Section 9 concludes the paper.
2. BACKGROUND
2.1 Mobile Cloud Messaging
As discussed before, cloud-based push messaging services have
been extensively deployed, supporting almost all the mobile de-
vices in the market. Those services are offered by mobile-platform
providers (Google, Apple, etc.), cloud service providers (e.g., Ama-
zon) or messaging service providers (e.g., mpCloud in Section 4).
With this diversity, those services share a similar architecture and
also closely resemble each other in their operations, which we de-
scribe below.
Service infrastructure. Figure 1 illustrates the infrastructure of a
typical push-messaging service. At the center of this infrastructure
are the connection servers running on the cloud and the client-side
components installed on individual users’ mobile devices. The con-
nection server receives messages from the app server and pushes
them to the service client on each device. It also receives upstream
messages from the client. In our research, we call such interactions
cloud-device link. The client is a persistent process, which moni-
tors messages from the cloud and passes them to subscriber apps,
and wakes up the apps when necessary. This client program can
be either a standalone service app, e.g., the GCM service app, the
ADM Client and the iOS Notiﬁcation Center, or part of the SDKs
979from the service provider. Its interactions with the app are called
on-device link in our study.
Figure 1: Push Messaging Infrastructure
To utilize a push-messaging service, an app needs to incorporate
its SDK to talk to the service client. On the cloud side, the devel-
oper of the app needs to run an app server to communicate with the
connection server, requesting its service to push notiﬁcations, com-
mands and other messages to the apps on her customers’ devices.
In addition to this mobile-cloud communication channel, the app
server can also get in contact with its apps out-of-band, receiving
messages directly from those apps.
Service operations. The operations of a push-messaging service
are performed at two stages, registration and message delivery. An
app is supposed to register with the connection server before it can
receive messages from its developer server. This happens when
the app sends the client (an SDK or a standalone service) a reg-
istration request, which the client forwards to the cloud. Such a
request includes the app’s identiﬁcation information like its appli-
cation ID (generated from the app’s package name), an Android ID
(for uniquely identifying the host device) and a sender ID (a unique
number assigned to the app server). Using such information, the
connection server creates a random registration ID for identifying
the app. This ID is critical for the operations of the whole push-
messaging service, which is used to locate the right app recipient
of the messages pushed through the cloud. It is given to the register-
ing app and sent to the app server directly by the app out-of-band,
using a secure channel (e.g., SSL).
To push a message to its apps, the app server works with a con-
nection server, providing it registration IDs of the apps and the
message. The connection server then stores and enqueues all the
messages it receives, and pushes each of them to the corresponding
target device as soon as it gets online. On the device, the message
is ﬁrst delivered to the service client, which then hands it over to
the subscriber app.
On-device communication. When the service client is a stan-
dalone program, such as the GCM app, its interactions with the sub-
scriber app need to go through Inter-Process Communication (IPC)
on the mobile device. On Android, serving this purpose is the intent
mechanism. An intent is a message that describes the operation to
be performed by its recipient. It can be used to launch a user inter-
face component (e.g., through the API startActivity), com-
municate with a background service (e.g., through startService)
or broadcast to a group of registered receivers (e.g., through send
Broadcast). To use this mechanism, the sender can either ex-
plicitly specify the package name of the recipient or just identiﬁes
an action so that any app registering with the action (through its
intent ﬁlter) can get it. In the latter case, the intent broadcasted is
passed to the recipients in the order of the priorities they set. These
recipients can also make their broadcast receivers private or protect
them with a permission to ensure that only authorized senders can
access them.
A problem for this intent mechanism is that the recipient is not
informed of the sender’s identity, which needs to be authenticated
when an app sends a request to the service client. This problem
is resolved by push-messaging services using PendingIntent.
PendingIntent is a token that allows the recipient to perform a
set of pre-deﬁned operations on an intent constructed by its sender,
using the identity and permissions of the sender. More speciﬁ-
cally, the sender app can create a PendingIntent object and
pass it to another app. The app then acquires the capability to
perform the operation (including broadcast, startActivity or
startService) as if it was the sender. Particularly, to ﬁnd out
where the message comes from, the recipient can call the object’s
method getTargetPackage or getCreatorPackage to get
the sender’s package name. Note that this information is provided
by the operating system and therefore cannot be forged.
2.2 Security Hazards
The security guarantee of a push-messaging service depends on
that of the individual links on its complicated communication chain,
which include the interactions between client-side components, the
device and the cloud, the cloud and the app server, and the server
and the app. A crack discovered on any of those links can have a se-
rious consequence, leaking sensitive user data or exposing critical
system capabilities. Here we discuss such security hazards.
What can go wrong. The most security-critical information within
mobile-cloud services is each app’s registration ID. Once the ID has
been exposed and also tied to a wrong party, the consequences can
be devastating: more speciﬁcally, when the ID is bound to an attack