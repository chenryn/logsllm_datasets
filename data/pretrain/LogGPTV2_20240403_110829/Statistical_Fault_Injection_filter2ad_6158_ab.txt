### 2.2 Calibration against Beam Experiment

Software Fault Injection (SFI) is a simulation-based methodology, and its accuracy can be validated through calibration against real-world experiments, such as a proton beam experiment. Table 2 presents the percentage of bit flips that vanished, were corrected, or caused checkstops. The close match between the SFI results and the proton beam experiment validates the accuracy of SFI for POWER6. The proton beam experiment is described in previous work [3,15]. The main advantage of SFI over beam experiments is the controllability of fault injections and the ability to observe the complete RAS (Reliability, Availability, and Serviceability) response. Additionally, multiple concurrent copies of the simulation environment can be run relatively easily, which is not feasible with beam experiments.

**Table 2: Error State Proportions for SFI and Proton Beam Experiments**

| Category   | Total Flips | Vanished (%) | Corrected (%) | Checkstop (%) |
|------------|-------------|--------------|---------------|---------------|
| SFI        | 28815       | 95.48%       | 3.62%         | 0.90%         |
| Proton Beam| 1748        | 95.89%       | 3.51%         | 0.60%         |

### 3. Results

#### 3.1 Micro-architectural SER Resilience

Since the beam cannot be focused on individual components, the SER (Soft Error Rate) resilience of individual micro-architectural components cannot be determined using the beam experiment. We performed fault injection experiments on individual micro-architectural components within the full system AWAN model to study the derating that arises from each unit. Figure 3 presents these results.

**Micro-architectural Components:**
- IFU (Instruction Fetch Unit)
- IOU (Instruction Decode Unit)
- FXU (Fixed Point Unit)
- FPU (Floating Point Unit)
- LSU (Load Store Unit)
- RUT (Recovery Unit)
- Core (Pervasive Logic)

The relative outcomes among those recorded during simulation, namely vanishing, recovery, hangs, and checkstops, are shown. We observed a high rate of architecture-level derating of soft errors. However, the outcome of unmasked faults is dependent on the micro-architectural component and varies widely across different units. Bit-flips in a total of 20,000 latches (out of approximately 350,000 total latches) were studied. Due to the large fraction of bits flipped, the results showed a variation of less than 0.9% as a percentage of the mean for that category, leading to high confidence in the statistical stability of these numbers for bit-flips in a different set of latches.

**Figure 3: SER of Different Micro-architecture Units**

- **Vanished:** On average, 95% of the injected faults are masked by the architecture.
- **Recovery Unit (RUT):** The RUT has the lowest fraction of injected faults that vanish, around 92%. This is because we only injected faults into the latches in the RUT, and a large portion of the RUT consists of protected arrays. The RUT is also sensitive to faults in its control logic.

From the data, we infer that the SER resilience of different units varies significantly and is impacted by the functionality of the different units. However, this data cannot be used to directly interpret the relative vulnerabilities of the different units, as each unit has a different number of latches.

**Figure 4: Contribution of Each Unit to the Total Percentage of Recoveries, Hangs, and Checkstops**

Figure 4 shows the contribution from each unit towards the total recoveries, hangs, and checkstops. The data is calculated from Figure 3 by taking the number of latches in each unit into account.

- **LSU (Load Store Unit):** The LSU has the highest number of latch bits that are flipped, resulting in the maximum number of recoveries.
- **Core (Pervasive Logic) and RUT (Recovery Unit):** These units have the highest individual contribution to checkstops and hangs due to the presence of checking hardware and watchdog timers.

This in-depth analysis into the SER characteristics of different micro-arch components is made possible by the SFI framework's ability to perform focused, statistically significant bit-flips in a short duration. Such a high degree of controllability and observability is hard to achieve with real-world beam experiments, making SFI an invaluable tool in SER estimation.

#### 3.2 Identifying the SER of Different Latches

A typical processor core contains various types of latches, including scan-only latches, pipeline latches, and register file latches. Understanding the SER susceptibility of these latch types is crucial for identifying areas where additional design effort is needed to improve reliability.

**Figure 5: SER of Different Types of Latches**

- **GPTR (General Purpose Test Register latch) and MODE latches:** These correspond to latches used in scan-only mode.
- **REGFILE latches:** These correspond to latches in the various register files.
- **FUNC latches:** These correspond to latches in the various pipeline stages.

Depending on the location of these latches in the architecture, two latches of the same type may have different derating as they perform different functions. Since the previous section examined functional differences, in this section, we focus on understanding the differences in SER resilience between the different latch types. Hence, we aggregate the data for each latch type, ignoring the effects of their different functionalities.

- **Scan-only latches (MODE and GPTR):** These latches have a larger system-level impact than functional latches. Their data remains persistent through execution, making them highly intrusive to application execution.
- **Functional latches (REGFILE and FUNC):** These latches are read-write, and bit-flips in these latches are more likely to vanish (about 95% for both cases).

SFI helps identify such vulnerabilities in latches early in the design process, providing opportunities for improved design choices. This is due to the high controllability and observability of the methodology, in addition to performing statistically significant bit-flips to draw the right conclusions.

#### 3.3 Effectiveness of Hardware Checkers

To address heightened SER concerns, modern processors deploy several forms of hardware checkers to detect the presence of bit-flips. For example, the IBM POWER6 has several such hardware checkers that check for abnormal execution of the hardware.

**Table 3: Understanding the Effect of Checkers**

| Type | Raw (No Checkers) | Check (With Checkers) |
|------|-------------------|-----------------------|
| Vanish | 98.8%             | 95.9%                 |
| Rec   | 0%                | 1.1%                  |
| Hangs | 1.2%              | 1.5%                  |
| Chk   | 0%                | 1.5%                  |

In the presence of hardware checkers, we see an increase in the number of recovery and checkstop events. The number of recoveries increases, indicating that the checkers are effective at catching and correcting faults. The reduction in the number of vanished bit flips is due to the fact that some errors in the Raw mode were not being caught by the processor. These are now caught by the checkers and become checkstops and hangs. The checkers are therefore very effective at improving the quality of the design.

### 4. Conclusions

The ever-increasing SER on modern processors is a major concern for designers. To understand this problem, several techniques that inject bit-flips in today's processors to study SER effects have been proposed. However, the slow speed of software simulation often leads to erroneous conclusions due to non-representative workloads or too few bit-flips.

This paper presents Statistical Fault Injection (SFI), a tool that uses accelerated hardware-based emulation to overcome the shortcomings of traditional fault simulation methods. Through the use of full-system models for SER studies, SFI allows characterization of the effects of soft errors on different parts of the modern processor. This paper demonstrates our ability to perform an in-depth study of the RAS characteristics in processors like the IBM POWER6 through extensive fault injections in the core of the processor and provide feedback to the designers during development.

As designers devise new techniques to circumvent SER problems, tools like SFI that aid in accurate SER characterization become increasingly important. The flexibility offered by such tools allows designers to perform in-depth studies to understand the derating of these errors by various layers of logic and use this derating to their advantage. Current and future work involves fault injections in the periphery of the core, such as the I/O subsystem, memory subsystem, and so on. Future core and system designs will need to be power-efficient and require careful analysis of soft error sensitivities.

### 5. References

[1] S. Mitra, N. Seifert, M. Zhang, Q. Shi, and K. S. Kim, "Robust System Design with Built-In Soft Error Resilience," IEEE Transactions on Computers, vol. 38, no. 2, Feb. 2005.

[2] M. Mack, W. Sauer, S. Swaney, and B. Mealey, "IBM POWER6 Reliability," IBM Journal of Research and Development, Vol. 51, No. 6, 2007.

[3] J. Kellington, R. McBeth, P. Sanda, and R. Kalla, "IBM POWER6 Processor Soft Error Tolerance Analysis Using Proton Irradiation," in Workshop on Silicon Effects of Logic - System Effects (SELSE), 2007.

[4] C. Constantinescu, "Neutron Characterization of Microprocessors," in Proceedings of International Conference on Dependable Systems and Networks (DSN), 2005.

[5] S. Cakici, P. Sanda, K. Wright, J. Day, S. Swaney, and E. Cannon, "Proton Irradiation Studies Single Event Upsets in IBM POWER5 System," in Workshop on Silicon Effects of Logic - System Effects (SELSE), 2006.

[6] G. Kanawati, N. Kanawati, and J. Abraham, "FERRARI: A Flexible Software-Based Fault and Error Injection System," IEEE Transactions on Computers, vol. 44, 1995.

[7] T. Tsai and R. Iyer, "FTAPE: A Fault Injection Tool to Measure Fault Tolerance," presented at Computing in Aerospace, 1995.

[8] N. Wang, J. Quek, T. Rafacz, and S. Patel, "Characterizing the Effects of Transient Faults on a High-Performance Processor Pipeline," in Proceedings of International Conference on Dependable Systems and Networks (DSN), 2004.

[9] J. M. Ludden et al., "Functional Verification of the POWER4 Microprocessor and POWER4 Multiprocessor Systems," in IBM Journal on Research and Development, Vol. 46, No. 1, Jan. 2002.

[10] M. Wazlowski et al., "Verification Strategy for the Blue Gene/L Chip," IBM Journal on Research and Development, Vol. 49, No. 2/3, 2005.

[11] A. Biswas, R. Cheveresan, J. Emer, S. Mukherjee, and R. Rangan, "Computing Architectural Vulnerability Factors for Address-Based Structures," in Proceedings of International Symposium on Computer Architecture (ISCA), 2005.

[12] X. Li, S. Adve, P. Bose, and J. Rivers, "SoftArch: An Architecture-Level Tool for Modeling and Analyzing Soft Errors," in Proceedings of International Conference on Dependable Systems and Networks (DSN), 2005.

[13] H. Nguyen, Y. Yagil, N. Seifert, and M. Reitsma, "Chip-Level Soft Error Estimation Model," IEEE Transactions on Device and Materials Reliability, Vol. 5, No. 3, 2005.

[14] S. Mukherjee, C. Weaver, J. Emer, S. Reinhardt, and T. Austin, "A Systematic Methodology to Compute the Architectural Vulnerability Factors for a High-Performance Microprocessor," in Proceedings of International Symposium on Microarchitecture (MICRO), 2003.

[15] P. Sanda et al., "IBM POWER6 Processor Soft Error Resilience," IBM Journal of Research and Development, to appear, 2008.

[16] P. Kudva, J. Kellington, P. Sanda, R. McBeth, J. Schumann, and R. Kalla, "Fault Injection Verification of IBM POWER6 Soft Error Resilience," in Workshop on Architectural Support for Gigascale Integration (ASGI), 2007.

[17] T. Tsai et al., "Stress-Based and Path-Based Fault Injection," IEEE Transactions on Computers, Vol. 48, No. 11, 1999.

[18] K. Reick, P. Sanda, S. Swaney, J. Kellington, M. Mack, M. Floyd, and D. Henderson, "Fault-Tolerant Design of the IBM POWER6 Microprocessor," IEEE Micro, to appear, 2008.

1-4244-2398-9/08/$20.00 ©2008 IEEE
127
DSN 2008: Ramachandran et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 12:30:06 UTC from IEEE Xplore. Restrictions apply.