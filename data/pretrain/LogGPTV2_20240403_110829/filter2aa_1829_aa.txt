ssrfmap包含了ssrf的⼤部分⽤法，于是看了下ssrfmap的代码和检测的⼿法，再结合⼀些ssrf的trick，想着能不能
弄个⾃动化检测ssrf+利⽤的⼯具。
SSRF基础知识
ssrf出现最根本的原因，就是服务端使⽤了⽹络函数，⽽⼀般编程语⾔⽹络函数底层调⽤的都是 curl (当然，这个
要看具体的函数代码以及底层逻辑)，curl⼜⽀持很多协议，所以ssrf就可以使⽤这些协议。
curl 是⼀个开源的⽤于数据传输的命令⾏⼯具与库，它使⽤ URL 语法格式，⽀持众多传输协议，包括：
HTTP、HTTPS、FTP、FTPS、GOPHER、TFTP、SCP、SFTP、SMB、TELNET、DICT、LDAP、LDAPS、
FILE、IMAP、SMTP、POP3、RTSP和RTMP。
⼀般可以利⽤的协议有
file
unc
gopher
dict
http
https
php需要注意的是：
1. file_get_contents的gopher协议不能 UrlEncode
2. file_get_contents关于Gopher的302跳转有bug，导致利⽤失败
3. curl/libcurl 7.43上gopher协议存在bug（截断），7.45以上⽆此bug
4. curl_exec()默认不跟踪跳转
5. file_get_contents() ⽀持php://input协议
java⽀持 ： http，https，file，ftp，mailto，jar，netdoc
Ssrfmap
ssrfmap的github是 https://github.com/swisskyrepo/SSRFmap
它的代码结构挺简单的
核⼼就是加载这个ssrf类，代码⽐较少，就直接贴出来好好学习⼀下
from core.requester import Requester
from core.handler import Handler
from importlib.machinery import SourceFileLoader
import os
import time
import logging
class SSRF(object):
    modules   = set()
    handler   = None
    requester = None
    def __init__(self, args):
        # 加载内置模块，函数在下⾯
        self.load_modules()
        # 启动反连的shell
        if args.handler and args.lport and args.handler == "1":
            handler = Handler(args.lport)
            handler.start()
        elif args.handler and args.lport:
            self.load_handler(args.handler)
            handler = self.handler.exploit(args.lport)
            handler.start()
        self.requester = Requester(args.reqfile, args.useragent, args.ssl)
        # NOTE: if args.param == None, target everything
        if args.param == None:
            logging.warning("No parameter (-p) defined, nothing will be tested!")
        # NOTE: if args.modules == None, try everything
        if args.modules == None:
            logging.warning("No modules (-m) defined, everything will be tested!")
            for module in self.modules:
                module.exploit(self.requester, args)
        else:
            for modname in args.modules.split(','):
                for module in self.modules:
                    if module.name == modname:
                        module.exploit(self.requester, args)
                        break
        # Handling a shell
        while args.handler:
            handler.listen_command()
            time.sleep(5)
    def load_modules(self):
        for index,name in enumerate(os.listdir("./modules")):
            location = os.path.join("./modules", name)
            if ".py" in location:
                mymodule = SourceFileLoader(name, location).load_module()
                self.modules.add(mymodule)
    def load_handler(self, name):
        handler_file = "{}.py".format(name)
        try:
            location = os.path.join("./handlers", handler_file)
            self.handler = SourceFileLoader(handler_file, location).load_module()
⼀个python模块化编程的tips
name随便起⼀个名字，location为py⽂件地址，即可加载模块了。
模块
如果得到⼀个ssrf漏洞，你能⼲什么呢？我们可以攻击本地或者内⽹的各种服务，redis，mysql，扫描端⼝，内⽹
资产探测等等。
官⽅readme上写的模块有这些
        except Exception as e:
            logging.error("Invalid no such handler: {}".format(name))
            exit(1)
from importlib.machinery import SourceFileLoader
mymodule = SourceFileLoader(name, location).load_module()
Name
Description
fastcgi
FastCGI RCE
redis
Redis RCE
github
Github Enterprise RCE < 2.8.7
zabbix
Zabbix RCE
mysql
MySQL Command execution
docker
Docker Infoleaks via API
smtp
SMTP send mail
portscan
Scan top 8000 ports for the host
networkscan
HTTP Ping sweep over the network
readfiles
Read files such as /etc/passwd
alibaba
Read files from the provider (e.g: meta-data, user-data)
aws
Read files from the provider (e.g: meta-data, user-data)
gce
Read files from the provider (e.g: meta-data, user-data)
digitalocean
Read files from the provider (e.g: meta-data, user-data)
socksproxy
SOCKS4 Proxy
smbhash
Force an SMB authentication via a UNC Path
tomcat
Bruteforce attack against Tomcat Manager
custom
Send custom data to a listening service, e.g: netcat
memcache
Store data inside the memcache instance
实际看它⽬录的话还远远不⽌。
其中有⼀些模块编写⽐较好的，例如alibaba,alibaba还有很多src都提供了ssrf探测的内⽹地址以及回显⽂件，⽤这
个专⻔批量去探测，就很棒。
allibaba模块的源码
self.endpoints.add( ("100.100.100.200","latest/meta-data/instance-id") )
self.endpoints.add( ("100.100.100.200","latest/meta-data/image-id") )
self.endpoints.add( ("100.100.100.200","latest/meta-data/") )
它会先请求⼀次，然后再带上payload再请求⼀次，取其中的差异⽂本。
取差异的函数简单粗暴(这个函数实际不太准确，参考的话需要改改)
在 core/utils.py ,有⼏个包装协议的函数也值得记录⼀下
def diff_text(text1, text2):
    diff = ""
    for line in text1.split("\n"):
        if not line in text2:
            diff += line + "\n"
    return diff
def wrapper_file(data):
    return "file://{}".format(data)
def wrapper_unc(data, ip):
同样的，⼀些常⽤的ip bypass⽅式也都被ssrf包装成了函数
ssrf ip转换的 bypass⽅式
default
default_shortcurt
ip_decimal_notation
...
URL解析绕过
https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Par
ser-In-Trending-Programming-Languages.pdf
不仅仅是在ssrf中有利⽤，其危害范围很⼴，包括不限于url跳转，oauth认证，同源策略（如
postMessage中origin的判断）等⼀切会涉及到host判断的场景。
    return "\\\\{}\\{}".format(ip, data)
def wrapper_gopher(data, ip, port):