taken into account. This is important because the developers
may not completely consider the impact of various environ-
mental conditions when specifying the valid range of a pa-
434    28th USENIX Security Symposium
USENIX Association
Figure 4: Invalid control parameter ranges discovered by RVFUZZER, normalized to the speciÔ¨Åed value ranges (1: One-dimensional mutation,
M: Multi-dimensional mutation). Percentage of invalid ranges (%) within the speciÔ¨Åed value ranges are noted at the top of the bars.
Figure 5: Normalized invalid ranges within the speciÔ¨Åed value ranges
under different wind conditions (N: No wind, M: Medium wind, S:
Strong wind).
rameter. Based on our observation, two factors may widen
the invalid ranges: (1) geographical factor and (2) external
disturbance (e.g., strong wind), as described in Section 4.3.3.
RVFUZZER found four cases which can be exploited with
realistic environmental factors.
We performed tests based on existing wind analysis statis-
tics [33, 41, 59] and simulated various wind conditions. The
wind conditions were divided into three categories: no wind,
medium wind (with a horizontal wind component of 5 m/s or
a vertical wind component of 1 m/s), and strong wind (with
a horizontal wind component of 10 m/s or a vertical wind
component of 3 m/s). For each wind condition, the wind gust
was simulated from 0 to 360 degrees with 30-degree incre-
ments. Simulations were also performed where the wind gust
was designed to come in at every 30-degree angle between
the horizontal tests and the vertical tests, such that the tested
wind vectors approximately formed an ellipsoid. These wind
settings enrich our standard test mission (Section 5), which
already reÔ¨Çects geographical factors as it emulates Ô¨Çight paths
with sharp turns for obstacle avoidance.
Fig. 5 presents the impact of three different wind condi-
tions on the four parameters which cause control state de-
viations. RVFUZZER discovered these four input validation
bugs using multi-dimensional mutation over the four param-
eters. We observe that the impact of environmental factors
expands the invalid ranges of those parameters. In particular,
when the wind conditions were not considered, ANGLE_MAX
did not have any invalid range under both one-dimensional
and multi-dimensional mutations. However, with wind condi-
tions, RVFUZZER reveals that this parameter can be exploited
when strong wind is present.
Such an input validation bug is exploitable because a large
angular change is required to alter the direction of the vehicle.
SpeciÔ¨Åcally, if the maximum allowed angle or angular speed
is not large enough (even within the speciÔ¨Åed value ranges),
the vehicle‚Äôs motors cannot generate enough force to change
the direction or resist the wind gusts. As a result, the vehicle
may fail to change its direction at sharp turns or it might drift
in the wind‚Äôs direction in the worst case.
We note that the results with environmental factor mutation
may be affected by other factors, such as the control model,
conÔ¨Åguration, and physical attributes (e.g., motor power and
the size of the vehicle). For example, if the vehicle is capable
of turning with a larger roll angle, has a smaller size, or has
stronger motors, it may be able to resist wind gusts when
changing its Ô¨Çight direction. Hence, these conditions need to
be tested by RVFUZZER for each speciÔ¨Åc type of vehicle.
6.3 Case Studies
We present three representative case studies of input valida-
tion bugs. We also discuss how an attacker can exploit these
bugs, and how RVFUZZER can proactively discover them.
The three cases cover different affected controllers, cause dif-
ferent impacts on the RV, and require different components
of RVFUZZER‚Äôs testing techniques to detect. SpeciÔ¨Åcally,
the bug discussed in Case I (Section 6.3.1) affects the x and
USENIX Association
28th USENIX Security Symposium    435
0%20%40%60%80%100%Invalid RangeValid RangePSC_VELXY_PWPNAV_SPEEDANGLE_MAXINS_POS1_ZINS_POS2_ZINS_POS3_ZMC_TPA_RATE_PMC_PITCHRATE_FFMC_PITCHRATE_MAXMC_PITCHRATE_PMC_ROLLRATE_FFMC_ROLLRATE_MAXMC_ROLLRATE_PMC_ROLL_PMC_PITCH_PMC_YAWRATE_FFMC_YAWRATE_PMC_YAWRAUTO_MAXMC_YAW_PMIS_YAW_ERRMPC_TILTMAX_AIRMPC_THR_MAXMPC_THR_MINMPC_XY_PMPC_XY_VEL_MAXMPC_Z_PArduPilotPX4ùüèùë¥1.7%1.7%4.0%4.0%0.0%0.0%81.0%84.0%81.0%84.0%81.0%84.0%90.0%90.0%‚âà100.0%100.0%0.4%88.1%16.7%33.3%100.0%0.1%87.9%16.7%33.3%1.7%51.7%2.5%52.5%‚âà100.0%100.0%16.7%16.7%16.7%16.7%2.0%2.0%0.1%0.1%0.4%0.4%80.0%80.0%42.1%42.1%15.0%15.0%0.5%0.5%6.7%6.7%ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥ùüèùë¥‚âà100.0%0.00%0.00%13.19%87.86%87.87%87.94%51.67%51.67%52.50%0.44%9.11%16.78%0%20%40%60%80%100%NMSNMSNMSNMSANGLE_MAXMC_ROLLRATE_MAXMC_ROLL_PMPC_TILTMAX_AIRArduPilotPX4Invalid RangeValid Range1 # d e f i n e WPNAV_WP_SPEED_MIN 100 / / Buggy code 2
2 # d e f i n e WPNAV_WP_SPEED_MIN 20
3 . . .
4 void AC_WPNav : : s e t _ s p e e d _ x y ( f l o a t
5 ‚àí i f ( _wp_speed_cms >=WPNAV_WP_SPEED_MIN) { / / Buggy code 1
6 + i f ( speed_cms >=WPNAV_WP_SPEED_MIN) {
/ / Patched code 1
7
8
9
_wp_speed_cms = speed_cms ;
_ p o s _ c o n t r o l . s e t _ s p e e d _ x y ( _wp_speed_cms ) ;
. . .
/ / Patched code 2
speed_cms ) {
Listing 1: Input validation bug case on x, y-axis mission velocity.
The parameter can be dynamically changed by either a mission
speed-change command or a speed parameter-change command.
Figure 6: Illustration of Case Study I: An RV cannot recover its
normal speed for the segment from Waypoint 2 to Waypoint 3.
y-axes controllers and causes unrecoverable slowdown, but
can be discovered by RVFUZZER using the one-dimensional
mutation technique. Case II (Section 6.3.2) presents a bug
that affects the pitch controller, leads to a crash, and can only
be found via multi-dimensional mutation strategy. Finally,
the bug in Case III (Section 6.3.3) adversely affects the roll
controller and causes signiÔ¨Åcant deviation from the assigned
mission, but can be discovered by mutating an environmental
factor (wind force).
6.3.1 Case Study I: Bug Causing ‚ÄúUnrecoverable Ve-
hicle Slowdown‚Äù Discovered by One-Dimensional
Mutation
Attack We consider an RV that is assigned the mission of
express package delivery (Fig. 6). Because of the urgency, the
operator sets the RV‚Äôs mission speed to 10 m/s at Waypoint 1.
During the mission, while the RV slows down to make a turn
at Waypoint 2, the attacker sends a seemingly innocent, but
malicious, command to the RV to change its mission speed to
0.2 m/s (the minimum speciÔ¨Åed speed is 0.2 m/s). After the
turn, however, the operator will not be able to resume the 10
m/s mission speed by issuing speed-change commands. This
attack exploits an input validation bug in ArduPilot, illustrated
in Listing 1.
Root Cause Listing 1 presents the code that runs in the
RV when it receives a new speed-change input (denoted by
speed_cms) during its mission. The speciÔ¨Åed minimum speed
(in cm/s) is denoted by the WPNAV_WP_SPEED_MIN parameter
(Line 1). We note that the current mission speed (denoted
by _wp_speed_cms) is compared with the minimum mission
speed (Line 5). This means that if (and only if) the current
Figure 7: Illustration of Case Study II: The attack launched at Way-
point 2 causes an RV to oscillate due to failing control of the pitch
angle.
mission speed is equal to or higher than the minimum mission
speed, it can be replaced by the new mission speed in the
input command; If the current mission speed is lower than
the minimum mission speed, it cannot be changed. Hence,
this is the bug which can be exploited by the attacker, by
sending a speed-change command with a value lower than
the minimum mission speed while the current mission speed
is higher than the minimum mission speed. This bug has
been patched recently by the developers by correcting the
value of the minimum mission speed (Line 2) and setting the
comparison of the minimum mission speed with the input
speed (Line 6).
Bug Discovery This bug was discovered by RVFUZZER
while performing one-dimensional mutation of the input
mission speed parameter. For input mission values above
1 m/s, the RV successfully changed its current mission speed.
However, if the current mission speed dropped below 1 m/s,
RVFUZZER can no longer change the current mission speed
by setting the input mission speed parameter. The failure
to change the current mission speed led to the incorrect ex-
ecution of the mission, resulting in control state deviation,
simulated and detected by RVFUZZER. Hence, RVFUZZER
reported this deviation-triggering parameter as an input vali-
dation bug, which is conÔ¨Årmed by the related source code in
Listing 1 (as ground truth of our evaluation).
6.3.2 Case Study II: Bug Causing ‚ÄúOscillating Route
and Crash‚Äù Discovered by Multi-Dimensional
Mutation
Attack We consider an RV that is assigned the same mis-
sion as in Case Study I. As shown in Fig. 7, at Waypoint
2 of the mission, the attacker sends a malicious command
to the RV to change one of the four pitch control parame-
ters: MC_PITCH_P, MC_PITCHRATE_P, MC_PITCHRATE_P, and
MC_PITCHRATE_FF. Because of the inter-dependency be-
tween these parameters, such a malicious command, which
looks innocent, can cause the RV to fail to stabilize its pitch
angle, resulting in unrecoverable oscillation and deviation
from its route.
Root Cause The unrecoverable oscillation on the RV‚Äôs
route is caused by the failure of its pitch controller to
track the reference state of the pitch. The pitch con-
troller utilizes four inter-dependent parameters: the P con-
436    28th USENIX Security Symposium
USENIX Association
: Waypoint N: Mission Flight Route: Actual Flight RouteN3AttackerGCS22. x, y-axis speed= 0.2m/s1. x, y-axis speed= 10m/s11: Waypoint N: Mission Flight Route: Actual Flight RouteN3AttackerManipulate Pitch parameter(s)2presented in Fig. 8. The RV is required to follow the path
around tall buildings on a windy day with the wind direction
towards the west. Since the item (e.g., soup) might spill if
the RV changes its attitude drastically, the operator tries to
prevent sudden changes in the roll angle by limiting the maxi-
mum angular-change speed (MC_ROLLRATE_MAX) to a small
value. When the vehicle is approaching Waypoint 2, the at-
tacker sends a command to set the maximum tilting angle
(MPC_TILTMAX_AIR) to a low value. We note that the RV is
supposed to make a 120-degree turn to avoid a tall building
at Waypoint 3. However, the RV fails to make the correct
turn at Waypoint 3 and hence cannot reach the destination
(Waypoint 4) after multiple attempts to correct the diverging
path. We note that the value of the maximum tilting/roll angle
parameter is accepted by the control program because it is
within the speciÔ¨Åed valid range, yet the value causes control
state deviation due to the strong wind condition.
Root Cause There are three causes that induce the vehicle‚Äôs
unexpected Ô¨Çight path divergence: (1) the mission route with
sharp turns, (2) the roll controller‚Äôs parameter value that is
not responsive enough to change the direction in time, and
(3) the strong wind that expands the invalid ranges of the
roll controller‚Äôs parameters. In this case study, the combina-
tion of these three factors disrupts the vehicle‚Äôs maneuver
and trajectory, resulting in a failed mission (and a hungry
customer).
Bug Discovery RVFUZZER discovered this bug in PX4 by
mutating the wind condition during the AVC2013 mission
(Section 5) which involves many sharp turns of the vehicle.
As the input values of the roll controller parameters were
mutated under a strong wind condition, RVFUZZER detected
control state deviation between the reference state and the
mission (Fig. 5). Hence, RVFUZZER reported this as an input
validation bug contingent upon the inÔ¨Çuence of an external
factor (wind).
7 Related Work
Control Semantics-Driven RV Protection There exists a
body of work that leverages control semantics to protect RVs
from attacks during Ô¨Çights and missions [38, 40, 50]. Blue-
Box [40] detects abnormal behaviors of an RV controller by
running a shadow controller in a separate microprocessor that
monitors the correctness of the primary controller, based on
the same control model. CI [38] extracts control-level invari-
ants of an RV controller to detect physical attacks. Similarly,
Heredia et al. [50] propose using a fault detection and isola-
tion model extracted from a target RV controller and enforces
the model to detect anomalies during Ô¨Çights.
Another line of work focuses on deriving Ô¨Ånite state models
to detect abnormal controller behaviors [37,61]. Orpheus [37]
automatically derives state transition models using program
analysis for run-time anomaly detection. Bruids [61] relies on
Figure 8: Illustration of Case Study III: An RV fails to complete a
simple mission from Waypoint 1 to Waypoint 4 due to the impact of
environmental factors.
trol gain of pitch angle (MC_PITCH_P), the P control gain
of the pitch angular speed (MC_PITCHRATE_P), the maxi-
mum pitch rate (MC_PITCHRATE_MAX), and the feed-forward
pitch rate (MC_PITCHRATE_FF). For example, a high value of
MC_PITCHRATE_FF helps track the reference state of the pitch
when MC_PITCH_P is low. When both MC_PITCHRATE_FF and
MC_PITCH_P have high values, the RV may perform overly
aggressive stabilization operations. In that case, a low value
of the maximum pitch rate (MC_PITCHRATE_MAX) is desirable
to mitigate the impact of such operations.
We point out that such dependencies can be exploited by
an attacker to affect the RV‚Äôs operations by corrupting the
value of just one parameter. Let us assume that the RV is
already conÔ¨Ågured with high values of MC_PITCHRATE_FF
and MC_PITCH_P. If the attacker sets MC_PITCHRATE_MAX to
a high value, the pitch controller will start to respond to the
minuscule difference between the reference state and the
observed state of the pitch angle with extreme sensitivity. As
a result, the RV will not be able to strictly follow its Ô¨Çight path.
We note that this type of bug can only be discovered when the
dependencies between multiple parameters are considered in
the test.
Bug Discovery This bug was found by RVFUZZER while
performing multi-dimensional mutation (Algorithm 2) of the
parameters related to the pitch controller. RVFUZZER mu-
tated the target parameter (MC_PITCHRATE_MAX), while set-
ting high values for MC_PITCH_P and MC_PITCHRATE_FF pa-
rameters. Unlike the one-dimensional mutation, which de-
termined the parameter‚Äôs valid range to be between 6.7 and
1800, the multi-dimensional mutation determined that the
valid range of MC_PITCHRATE_MAX is to be between 6.7 and
220.1. RVFUZZER detected and reported the expanded in-
valid range of MC_PITCHRATE_MAX as an input validation bug.
6.3.3 Case Study III: Bug Causing ‚ÄúDiverging Route‚Äù
Discovered by Wind Force Mutation
Attack In this case study, we consider an RV assigned a
mission to deliver a food item to a customer via the path
USENIX Association
28th USENIX Security Symposium    437
412: Waypoint N: Mission Flight Route: Actual Flight RouteN3a manual speciÔ¨Åcation of RV behaviors to derive a behavioral
model to detect run-time anomalies.
Other approaches utilize machine learning techniques to
derive benign behavioral models of an RV controller. Ab-
baspour et al. [31] apply adaptive neural network techniques
to detect fault data injection attacks during Ô¨Çight. Samy et
al. [70] use neural network techniques to detect sensor faults.
Two related efforts [30, 76] leverage a similar approach but
detect both sensor and actuator faults.
Complementing the prior efforts, RVFUZZER leverages
control semantics to proactively Ô¨Ånd input validation bugs
that may be exploited by RV attackers. Unlike the previous
works that aim to detect abnormal behaviors during Ô¨Çights,
our work focuses on identifying input validation bugs in RV
control programs before Ô¨Çights via off-line RV simulation and
program vetting. Control semantics are leveraged to reduce
the input value mutation space and simulators are adopted to
render the impacts of control parameter and external factor
changes on control states.
Feedback-directed Testing
RVFUZZER is inspired by
many existing feedback-driven testing/fuzzing systems for
conventional program testing [14, 17, 19, 34‚Äì36, 43, 44, 56, 57,
63,66,71,74,79]. These solutions leverage different mutation
strategies to increase the coverage of testing/fuzzing. Sev-
eral systems [14, 17, 19, 71] mutate input values with varying
granularity (e.g., bit, byte-level) driven by the tested code‚Äôs
coverage achieved during each test run, using the code cov-
erage as feedback. Another line of work [63, 74] adopts a
hybrid approach to increase code coverage using both dy-
namic and symbolic execution. Finally, many efforts leverage
taint analysis [36,43,56,57,79] or a combination of taint anal-
ysis and symbolic execution [34, 35, 44, 66] for high testing
coverage. Such approaches mutate inputs with awareness of
the dependencies between program input and logic.
Testing techniques for conventional, non-cyber-physical