out and w1
Our prototype implementation uses the Fairplay implementation
of Yao’s method [24] to construct the integer comparison circuits,
which are described in detail in Section 3.4. We refer to it as the
YAO subroutine, which, on input of a two-party functionality, pro-
duces its garbled-circuit implementation.
To achieve security against malicious (as opposed to semi-
honest) participants, it is necessary to use an implementation of
Yao’s method which is secure in the malicious model and operates
on committed inputs [20].
3.4  Privacy-Preserving Offset Integer
Comparison
O ur  pr ot ocol  f or  t he  eva l uat i on  of  br a nchi ng  pr ogr ams  r equi r e s
a secure sub-protocol for the comparison of integer values. The
Privacy-Preserving Offset Integer Comparison protocol takes place
between two parties, Alice and Bob. Bob has an (cid:3)-bit integer x,
while Alice has (cid:3)-bit integers b and t, and output keys h0 and h1. At
the end of the protocol execution, Bob learns h0 if x−b mod 2(cid:3)  l, Pi are classiﬁcation nodes.
Decision nodes are the internal nodes of the program. Each de-
cision node is a pair (cid:5)ti, αi(cid:6), where αi is the index of an attribute,
and ti is the threshold value with which vαi is compared in this
node. The same value of α may occur in many nodes, i.e., the same
attribute may be evaluated more than once. For each decision node
i, L(i) is the index of the next node if vαi ≤ ti; R(i) is the index
of the next node if vαi > ti. Functions L and R are such that the
resulting directed graph is acyclic.
Classiﬁcation or diagnosis nodes are the leaf nodes of the pro-
gram. Each leaf node consists of a single classiﬁcation label (cid:5)di(cid:6).
To evaluate the branching program on some attribute vector V,
start at P1. If vα1 ≤ t1, set h = L(1), else h = R(1). Repeat the
process recursively for Ph, and so on, until reaching one of the leaf
nodes and obtaining the classiﬁcation.
4.2 Security requirements
The objective of our protocol is to securely evaluate T on V. The
protocol should reveal nothing to the Server. The User should learn
T (V), which is a classiﬁcation label contained in one of the leaves
of the branching program T . The User is also permitted to learn the
total number of nodes of T (see the discussion in Section 4.6) and
the length of the path from the root node of T to the leaf containing
the result of evaluation, i.e., the label assigned by T to V.
The User should not learn anything else about T . In particular,
the User should not learn which attributes from V have been con-
sidered by T , with what threshold values they have been compared,
the outcome of any comparison, and so on.
The requirement that attribute selection be oblivious precludes a
na¨ıve application of secure multi-party computation (SMC) tech-
niques. In standard SMC, each participant knows which of his in-
puts have been used in the computation. While it is possible to
create a circuit that takes all of the User’s attributes as inputs and
ignores those not used by T , this circuit would be impractically
large (V may contains tens of thousands of attributes). A detailed
discussion can be found in Section 4.5.
4.3 Secure branching program protocol
The protocol runs in three phases.
Phase I (ofﬂine): Creation of the secure branching program.
This is an ofﬂine pre-computation executed by the Server. Using
Algorithm 1, the Server converts the original branching program
. Algorithm 1 does not require any
T into its secure equivalent T
interaction with the User or knowledge of the User’s identity. For
example, the Server may maintain a large store of secure branching
programs (all representing differently randomized transformations
of the same T ), which is replenished during idle periods when the
Server’s machines have many spare cycles.
(cid:2)
(cid:2)
Algorithm 1 converts the nodes in the branching program T into
. Each classiﬁcation node
secure nodes in the branching program T
is replaced by an encryption of its classiﬁcation label so that its
contents will remain unknown to the User unless the appropriate
decryption key is obtained. Each decision node is replaced by a
small garbled circuit implementing offset integer comparison (see
Section 3.4). This circuit enables the User to learn one of two keys,
depending on the comparison between the User’s attribute value
(offset by a blinding value) and the decision node’s threshold value.
The revealed key decrypts the next node on the evaluation path.
Input: Branching program T = (cid:5){P1, . . . , Pk}, L, R(cid:6) (see Sec-
tion 4.1). For i ≤ l, Pi is a decision node (cid:5)ti, αi(cid:6). For i > l, Pi is
a classiﬁcation node containing label (cid:5)di(cid:6).
Outputs:
(i) Secure branching program T
(ii) k random (cid:3) + (cid:3)
(iii) 2 · k · (cid:3) random wire keys w0
CREATESECUREPROGRAM
1: let Q be a random permutation of the set 1, ..., k with Q[1] = 1
2: Generate random keys κ1, ..., κk to be used for encrypting the
ij for 1 ≤ i ≤ k, 1 ≤ j ≤ (cid:3)
-bit blinding values b1, . . . , bk
ij , w1
(cid:2)
(cid:2)
decision nodes.
3: for i = 1 to k do
4:
5:
6:
7:
8:
9:
10:
(cid:2)
ij , w1
-bit blinding value bi; store bi and
Generate 2 · (cid:3) random wire keys w0
ij for 1 ≤ j ≤ (cid:3)
(to be used for encoding the User’s input into the garbled
threshold comparison circuit).
Generate a random (cid:3) + (cid:3)
(cid:2)
i = bi mod 2(cid:3).
b
let ˜i = Q[i]
if Pi is a classiﬁcation node (cid:5)di(cid:6) then
let S˜i = {“label”, di}κ˜i , where {y}κ is the encryption
of y under key κ using a semantically secure symmetric-
key encryption scheme.
(We assume that all plaintexts
are padded so that the ciphertexts of decision nodes and
classiﬁcation nodes have the same size.)
else if Pi is a decision node (cid:5)ti, αi(cid:6) then
˜i, ti, L, R) = if x − b
(cid:2)
Use the subroutine YAO for generating garbled circuits
(see Section 3.3) to generate a secure circuit Ci for the
offset integer comparison functionality (see Section 3.4)
(cid:2)
˜i mod 2(cid:3) <
COMPARE(x, b
ti then return L else return R
where L = (Q[L(i)], κQ[L(i)]),
R = (Q[R(i)], κQ[R(i)]))
˜ij, w1
˜ij (1 ≤ j ≤ (cid:3)) to encode, respectively, 0 and
Use w0
1 on the (cid:3) wires corresponding to input x.
let S˜i = {Ci}κ˜i
11:
end if
12:
13: end for
14: return T
= (cid:5){S1, ..., Sk}, κ1(cid:6)
(cid:2)
Algorithm 1: Convert a branching program into a secure branching
program
(cid:2)
(cid:2)
)-bit value that the User does not know. Here (cid:3)
Because the User should not know which attribute is being
compared to a threshold, the User’s input to the garbled circuit is
blinded by the Server (in phase II, described below) by adding a
is
random ((cid:3) + (cid:3)
the statistical security parameter, set to 80 bits in our implementa-
tion. The blinding values b1, . . . , bk are generated randomly by the
Server in Phase I. They will be subtracted from the User’s input to
the circuit before it is compared to the threshold.
Phase II: Oblivious attribute selection. In this phase, the User
obtains the blinded attribute values which will be used as inputs to
the COMPARE circuits in the secure decision nodes created in Phase
I. First, the User creates an instance of the additively homomorphic
public-key encryption scheme, and encrypts each attribute in his
attribute vector with the public key (this can take place ofﬂine).
The User sends the entire encrypted attribute vector to the Server
along with the public key.
For node i, the blinding value chosen in Phase I is bi, and the at-
tribute to be compared is αi. Thus, the User needs to learn vαi +bi.
The Server cannot compute this value directly without learning vαi
(cid:2)
User’s input: Attribute vector v1, . . . , vn with (cid:3)-bit attribute val-
ues
Server’s input: For each node ti of T
, αi is the index of the User’s
attribute which is being compared in this node (if ti is not a deci-
sion node, αi is chosen randomly); bi is the random ((cid:3) + (cid:3)
)-bit
value generated as part of CREATESECUREPROGRAM.
Outputs for the User:
(i) s1, . . . , sk where ∀i si = vαi + bi mod 2(cid:3)
(ii) For each i, wire keys wi1, . . . , wi(cid:3) encoding si = vαi + b
mod 2(cid:3) on the input wires of circuit Ci (see Algorithm 1).
Output for the Server: ⊥
OBLIVIOUSATTRIBUTESELECTION
1: The User generates a public/private key pair of a homomorphic
(cid:2)
i
(cid:2)
encryption scheme, and sends the public key to the Server.
(cid:2)
Inputs: Secure program T
, node index h with corresponding node
encryption key κh, and, for each i such that 1 ≤ i ≤ k, wire keys
wi1, . . . , wi(cid:3).
Output: Classiﬁcation label c such that c = T (V)
EVALUATESECUREPROGRAM(T
1: Use key κh to decrypt node Sh of T
2: if Ch = (cid:5)“label”, d(cid:6) then
3:
(cid:2)
, h, κh)
(cid:2)
and obtain Ch.
Ch is a classiﬁcation node.
return label d.
4: else if Ch is a garbled circuit then
5:
6:
Evaluate Ch on inputs wh1, . . . , wh(cid:3).
(cid:2)
As the result of evaluation, obtain the pair (h
ing the output wire value.
(cid:2)
, κh(cid:2) ).
return EVALUATESECUREPROGRAM(h
, κh(cid:2) ) encod-
The User sends E[vi] to the Server.
error “Secure program is not properly formed!”
7:
8: else
9:
10: end if
2: for i = 1 to n do
3:
4: end for
5: for i = 1 to k do
6:
7:
8:
9:
10:
11:
Server computes E[vαi + bi] from E[vαi ] and bi using the
homomorphic property of the encryption scheme, and sends
this value to the User.
The User decrypts to ﬁnd vαi + bi and then computes si =
vαi + bi mod 2(cid:3) = vαi + b
for j = 1 to (cid:3) do
(cid:2)
i mod 2(cid:3)
2 oblivious transfer
The Server and the User execute OT 1
protocol.
The User acts as the chooser; his input is si[j], i.e., the
jth bit of si.
The Server acts as the sender; his inputs are wire keys
w0
ij, encoding, respectively, 0 and 1 on the jth
input wire of threshold comparison circuit Ci (see Algo-
rithm 1).
ij and w1
end for
As the result of (cid:3) oblivious transfers, the User learns wire
keys wi1, . . . , wi(cid:3) encoding his input si into the circuit Ci.
Note that the User cannot yet evaluate Ci because he does
not know the key κi under which Ci is encrypted.
12: end for
Algorithm 2: Oblivious attribute selection
(which violates the User’s privacy), but he can compute E[vαi +bi]
since he knows E[vαi ] and the encryption is homomorphic. He
computes this encrypted value and sends it to the User.
(cid:2)
The random blinding value bi added by the Server to the en-
crypted (cid:3)-bit attribute vαi is (cid:3)
bits longer than vαi . Therefore, it
statistically hides vαi (and thus does not reveal which attribute the
Server chose) when (cid:3)
is sufﬁciently large (80 bits in our imple-
mentation). Note that 2(cid:3)+(cid:3)
is much smaller than the order of the
group in which plaintext addition is done under encryption.
(cid:2)
(cid:2)
The User uses his private key to decrypt vαi +bi. By taking vαi +
bi mod 2(cid:3), the User obtains si, his (cid:3)-bit input into the garbled
offset integer comparison circuit.
(cid:2)
Next, the User acts as the chooser in (cid:3) instances of 1-out-of-2
oblivious transfer with the Server to learn the garbled wire keys
corresponding to his input value si. Note that this does not reveal
si to the Server. Now the User has all the wire key values he needs
to evaluate T
Phase III: Evaluation of the secure branching program. In the
from
last phase, the User receives the secure branching program T
the Server along with κ1, and evaluates it locally by applying Al-
gorithm 3 on inputs (T
in phase III.
, 1, κ1).
(cid:2)
(cid:2)
Algorithm 3: Evaluation of secure branching program
Evaluation does not reveal anything to the User except the label
at the end of the evaluation path. At each step, the User applies
one of the comparison circuits Ch to the value sh (encoded as a set
of wire keys—see Section 3.3), but he does not know which of his
attributes is hidden in sh. The User thus learns the index of the next
node and the decryption key, but not the result of the comparison.
The only information leaked by the evaluation procedure is (i)
the total number of nodes in the program T
, (ii) the number of
nodes that have been evaluated before reaching a classiﬁcation
node (note that in a full decision tree this number does not depend
on the path taken), and (iii) the classiﬁcation label d.
(cid:2)
If the usage scenario requires the Server to learn the classiﬁca-
tion label, too, the User simply sends d to the Server. If the Server
should learn the classiﬁcation label and the User should learn noth-
ing, then the Server can replace the labels with ciphertexts encrypt-
ing the labels under the Server’s public key; when the User obtains
a ciphertext at the end of evaluation, he sends it to the Server.
We emphasize that the User cannot simply re-run the program
(cid:2)
evaluation algorithm of Phase III on the same secure program T
and a different attribute vector, thus learning more about the origi-
nal branching program. After learning the wire keys corresponding
to his (blinded) attributes during Phase II, the User can evaluate
only a single path in the branching program—that corresponding
to the attribute vector he used as his input into the protocol. There
is no way for the User to learn the random wire keys encoding other
possible inputs to the program.
In order to evaluate T on a different attribute vector, the User
must re-run the entire protocol starting from Phase I. He will then
and a different set of wire
obtain a different secure program T
keys. Our protocol maintains the invariant that, for every secure
branching program, there is only one path that can be evaluated by
the User, and this path appears random to the User.
(cid:2)(cid:2)
4.4 Security properties
The protocol presented in Section 4.3 is secure in the semi-honest