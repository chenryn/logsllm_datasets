title:Modular Design of Secure Group Messaging Protocols and the Security
of MLS
author:Jo&quot;el Alwen and
Sandro Coretti and
Yevgeniy Dodis and
Yiannis Tselekounis
Modular Design of Secure Group Messaging Protocols and the
Security of MLS
Joël Alwen
AWS Wickr
PI:EMAIL
Yevgeniy Dodis
New York University
PI:EMAIL
Sandro Coretti
IOHK
PI:EMAIL
Yiannis Tselekounis
University of Edinburgh
PI:EMAIL
ABSTRACT
The Messaging Layer Security (MLS) project is an IETF effort aim-
ing to establish an industry-wide standard for secure group messag-
ing (SGM). Its development is supported by several major secure-
messaging providers (with a combined user base in the billions)
and a growing body of academic research.
MLS has evolved over many iterations to become a complex,
non-trivial, yet relatively ad-hoc cryptographic protocol. In an
effort to tame its complexity and build confidence in its security,
past analyses of MLS have restricted themselves to sub-protocols
of MLS—most prominently a type of sub-protocol embodying so-
called continuous group key agreement (CGKA). However, to date
the task of proving or even defining the security of the full MLS
protocol has been left open.
In this work, we fill in this missing piece. First, we formally
capture the security of SGM protocols by defining a corresponding
security game, which is parametrized by a safety predicate that
characterizes the exact level of security achieved by a construction.
Then, we cast MLS as an SGM protocol, showing how to modularly
build it from the following three main components (and some addi-
tional standard cryptographic primitives) in a black-box fashion:
(a) CGKA, (b) forward-secure group AEAD (FS-GAEAD), which is
a new primitive and roughly corresponds to an “epoch” of group
messaging, and (c) a so-called PRF-PRNG, which is a two-input
hash function that is a pseudorandom function (resp. generator
with input) in its first (resp. second) input. Crucially, the security
predicate for the SGM security of MLS can be expressed purely as
a function of the security predicates of the underlying primitives,
which allows to swap out any of the components and immediately
obtain a security statement for the resulting SGM construction.
Furthermore, we provide instantiations of all component primi-
tives, in particular of CGKA with MLS’s TreeKEM sub-protocol
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484820
(which we prove adaptively secure) and of FS-GAEAD with a novel
construction (which has already been adopted by MLS).
Along the way we introduce a collection of new techniques,
primitives, and results with applications to other SGM protocols
and beyond. For example, we extend the Generalized Selective De-
cryption proof technique (which is central in CGKA literature) and
prove adaptive security for another (practical) more secure CGKA
protocol called RTreeKEM (Alwen et al., CRYPTO ’20). The modu-
larity of our approach immediately yields a corollary characterizing
the security of an SGM construction using RTreeKEM.
CCS CONCEPTS
• Security and privacy → Cryptography.
KEYWORDS
Cryptographic protocols; Messaging Layer Security; MLS; TreeKEM;
RTreeKEM; Secure Messaging; Forward Secrecy; Backward Secrecy
ACM Reference Format:
Joël Alwen, Sandro Coretti, Yevgeniy Dodis, and Yiannis Tselekounis. 2021.
Modular Design of Secure Group Messaging Protocols and the Security of
MLS. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’21), November 15–19, 2021, Virtual Event,
Republic of Korea. ACM, New York, NY, USA, 21 pages. https://doi.org/10.
1145/3460120.3484820
ACKNOWLEDGMENTS
This research is partially supported by gifts from VMware Labs and
Google, NSF grants 1619158, 1319051, 1314568, and the “Quantum
Computing for Modern Cryptography” project, funded by the UK
Quantum Computing and Simulation Hub from the UKRI EPSRC
grant EP/T001062/1.
1 INTRODUCTION
End-to-end encrypted asynchronous secure group messaging (SGM)
is becoming one of the most widely used cryptographic applications
with billions of daily users. To help solidify the foundations of this
trend, the IETF is in the final stages of standardizing the Messaging
Layer Security (MLS) SGM protocol [8]. The effort is being lead
by industry (e.g. by Cloudflare, Cisco, Facebook, Google, Mozilla,
Twitter, Wickr and Wire) with a lot of help from academia. Thus,
MLS holds the potential to be widely deployed with in the coming
years.
Due to the expected feature set and the multi-faceted security
goals, MLS is quite complex. Furthermore, the description of MLS is
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1463quite monolithic. In an effort to come to terms with the complexity
(both of the construction and desired security notions) all work
formally analyzing MLS has restricted itself in scope. Besides sim-
plifying the PKI [1, 3] the trend has been to focus only on a subset of
the complete protocol. In particular, the majority of work has con-
sidered so-called continuous group key agreement (CGKA) [1, 3, 6].
First introduced by Cohn-Gordon et al. [13] (under the name "Group
Ratcheting"), a CGKA protocol is often motivated by the folklore
belief that CGKA encapsulates the essence of building SGM (not
unlike how KEMs capture the essence of PKE). Indeed, this folklore
has motivated a host of new CGKA protocols designed to improve
on the CGKA protocol implicit to MLS. Some constructions aim
for stronger security properties [3, 5], others for a more flexible
communication model [10, 23], while the construction in [1] is
optimized for certain common SGM settings.
CGKA abstracts the basic task of asynchronously maintaining
secrets in a group with an evolving set of members. To this end,
each time a member joins, leaves or updates their cryptographic
state (in an effort to heal from past compromises and defend against
future ones) a new epoch in the ongoing session is initiated. Each
epoch is equipped with a symmetric group key that can be derived
by all parties that are in the group during that epoch. The CGKA
most often identified as underpinning MLS is a protocol called
TreeKEM [7, 26]. Although, it has undergone at least 2 major iter-
ations before reaching its current version [8] it remains, at most,
a passively secure protocol, i.e., with no authenticity mechanisms
included. Moreover, it provides weaker guarantees (for the group
key) than is expected of the (encryption keys) in the full MLS proto-
col. Thus, there are clearly further significant security mechanisms
at work in MLS beyond the underlying passively secure CGKA, i.e.,
the protocol requires additional components.
Indeed, [6] extends the abstraction boundary around TreeKEM
including more of the MLS protocol to obtain an actively secure
CGKA which they dub ITK (for "Insider Secure TreeKEM"). Yet
even ITK is only a CGKA and not an SGM protocol, and so here
too there clearly remains a gulf between the full MLS protocol and
what has actually been formally analyzed in [6].
Two exceptions to the focus on CGKA are: [15], which focuses
exclusively on how to optimize the bandwidth required to updated
cryptographic state concurrent sessions with overlapping member-
ship sets, and [11], which considers the key derivation paths within
MLS. While the paths extend beyond the CGKA (even ITK) into
parts of MLS specific to messaging (e.g., key/nonce derivation for
message encryption) the work leaves much open when it comes to
a holistic understanding of MLS’s security. For example, the work
makes no statements at all about authenticity. So for example, it
leaves out the relatively involved and interdependent mechanisms
used by MLS to provide this property. Moreover, the work forgoes
any formal modeling of network communication, leaving open the
questions around how a network adversary can generally impact
the security of a session by, say, arbitrarily manipulating packets
in transit.
Our contributions
From a practice-oriented view point, the primary contribution in
this work is a rigorous security proof showing that the basic instan-
tiation of MLS is an SGM protocol. More generally, we validate the
folklore claim that CGKA embodies the essence of SGM. In doing
so, we make progress on several fronts in coming to terms with the
complexity involved in describing MLS (and other SGM protocols)
as well as defining (and proving) security for such protocols.
Black-Box Construction. In more detail, we give a black-box con-
struction of an SGM protocol from a passively secure CGKA and
several other primitives. Instantiated appropriately, the construc-
tion recovers the basic SGM protocol in MLS.1 Besides passive
CGKA, the construction also uses a new primitive called a For-
ward Secure Group AEAD (FS-GAEAD). Intuitively, it combines
a forward secure key schedule with an authenticated encryption
with associated data (AEAD) scheme, to allow a group of sender’s
sharing a single secret to send any number of AEAD encrypted
messages with no further synchronization or communication such
that any receiver can immediately decrypt any ciphertexts they re-
ceive regardless of the order in which they are delivered. We further
abstract the key schedule of an FS-GAEAD with a new primitive
called a Forward Secure KDF (FS-KDF) which captures a generic
forward-secure symmetric key schedule supporting the derivation
of keys in any order. Due to its improved efficiency profile, our
construction of an FS-KDF has since replaced the original FS-KDF
in the MLS standard.
History graphs. We introduce the first formal security notion for
SGM.2 Intuitively, it ensures correctness as well as privacy and au-
thenticity in the form of post-compromise forward secrecy (PCFS) [3].
That is, messages in a given epoch are both private and authenti-
cated despite arbitrary state leakage of participants sufficiently in
the past and future.
In effort to manage the complexity inherent in such a definition
we developed the history graph (HG) paradigm for defining security
of asynchronous group protocols like MLS and CGKA protocols.
The paradigm allows for an intuitive (even visual) understanding
of an otherwise complicated notion by representing the (security-
relevant) semantics of an execution as an annotated graph. This
allows cleanly separating functionality and communication model
from the security details being captured. Those details are formal-
ized as a predicate defined over HG and a particular challenge
message (or group key for CGKA). The output of the predicate
indicates if we can expect the challenge to be secure given the exe-
cution represented by the HG. This modular approach makes our
SGM and CGKA definitions easy to adapt to, say, future versions of
MLS. It also allows for more immediate comparison of the security
enjoyed by different constructions of the same type.
1That is, the part of MLS that allows parties to manage group membership, update their
cryptographic states at will and send/recieve encrypted and authenticated messages.
We do not analyze more advanced features such as importing/exporting secrets, meta-
data hiding and so called "external commits" where an external party makes changes
to the group state.
2We note that, concurrently to our work, [9] introduced a security notion for SGM
defined using formal verification tools which we discuss in the Related Work section
below.
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1464PKI. Another contribution to the analysis of MLS is a more accurate
modeling of the PKI used by MLS. With the notable exceptions
of [6, 15]), the PKI in the works of [1, 3] the analysis of (earlier
versions of) TreeKEM is based on simplified PKI models that encode
strong (but implicit) assumptions. For example, their PKI precludes
the adversary from registering ephemeral keys even for recently
corrupted parties. Instantiating this faithfully seems to require
strong authenticity checks by the PKI that may not rely on any
state that can be leaked during a compromise. In contrast, the PKI
in our work can be realized under assumptions more compatible
with E2E security. Concretely, our PKI can be realized if parties use
an out-of-band mechanism to authenticate each other’s long-term
keys while distributing ephemeral public keys via an untrusted key
server. Reflecting the MLS standard, the out-of-band authentication
mechanism is not made concrete but common instantiations include
peer-to-peer key verification via 2D bracodes or (in the enterprise
setting) certification authorities binding long term keys to a users
identity.
Security Proofs. Armed with our HG based security notions for SGM
and passively secure CGKA we prove security for the black-box
SGM protocol there by making progress not just in validating the
design of MLS but also the more general folklore motivating the
study of CGKA protocols. At a high level the proof follows the out-
line of proof for the double-ratchet in [2]. However the similarities
end there as we require new arguments and hybrids to instantiate
this outline in light of the substantial differences between the two
protocols and 1-on-1 vs. group settings they operate in.
To recover MLS security we also show that TreeKEM (as implicit
to the current version in Draft 11 of MLS) [8] is indeed a passively
secure CGKA according to our definition. In particular, in compari-
son to the TreeKEM analysis in [1], we more accurately model the
PKI, capture transcript consistency and secure group management.
Meanwhile, in comparison to the analysis in [3] we improve the
PKI model and allow for a much more capable network adversary
that can, e.g. deliver packets in different orders to different partici-
pants; a potentially unrealistic restriction for real world adversaries
that controls, say, the network connection of a user (let alone the
delivery server used by the session).
Beyond MLS and TreeKEM we also prove that RTreeKEM [3] is a
passively secure CGKA. For this we extend the generalized selective
decryption (GSD) technique to account for encrypting keys using
the so-called updatable public-key encryption (UPKE) [3], used by
RTreeKEM. GSD lies at the heart of almost all adaptive security
proofs for CGKA protocols. To the best of our knowledge, it remains
the only technique for proving adaptive security with meaningful
security loss (e.g. quadratic in the group size). In contrast, the proof
of the ART CGKA protocol in [13] suffers from an exponential
loss in group size. Extending GSD to allow for protocols using
UPKE is likely to have applications beyond analyzing RTreeKEM as
UPKE is a very natural drop in replacement for standard PKE but
with improved forward security [20]. Indeed, recent results in [17]
construct post-quantum secure UPKE with an aim towards building
a PQ variant of MLS.
Related work. The history graph paradigm was conceived early on
in this project. In an effort to keep pace with the rapid development
of MLS the paradigm was shared with other researchers before this
work was published. Consequently, the paradigm has been used
in subsequent work appearing before this one (that cite this one
as the source of the paradigm) [5, 6].3 Symbolic representations
of an execution, equipped with safety predicates, have been used
in [2, 14]. The GSD proof technique, introduced by Panjwani [25]
and generalized by Jafargholi et al. [19], was first applied to CGKA
protocols in [1].
The most influential precursor to TreeKEM, the asynchronous
ratchet tree (ART) protocol, was introduced by Cohn-Gordon et al. [13],
focusing on adaptive security (informally sketched) for static groups.
It inspired the initial version of TreeKEM [26] which was updated
to provide secure group management in [7] and finally to its current
form in [8]. Meanwhile, ART uses an older technique called “Tree-
based DH groups” [27, 28, 30] which is also used by [21] to build
key agreement. However, TreeKEM and ART differ significantly
from [21], as discussed in [3]. TreeKEM is also related to schemes