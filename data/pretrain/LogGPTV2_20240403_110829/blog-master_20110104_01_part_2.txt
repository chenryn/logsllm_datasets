1\. on the slave  
```  
chown -R postgres:postgres $PGDATA  
su - postgres  
cd $PGDATA  
rm postmaster.pid  
rm .s.PGSQL.1921.lock  
rm -rf pg_xlog  
ln -s /database/pgdata/tbs2/pg_xlog ./pg_xlog  
```  
如果有非默认表空间,需要手工处理pg_tblspc  
2\. 配置pg_hba.conf  
允许需要访问的客户端,  
3\. 配置postgresql.conf  
```  
listen_addresses = '*'          # what IP address(es) to listen on;  
port = 1921                             # (change requires restart)  
max_connections = 2000                  # (change requires restart)  
unix_socket_directory = '/database/pgdata/tbs1/pg_root'         # (change requires restart)  
unix_socket_permissions = 0700          # begin with 0 to use octal notation  
password_encryption = on  
shared_buffers = 2048MB                 # min 128kB  
maintenance_work_mem = 2048MB           # min 1MB  
max_stack_depth = 8MB                   # min 100kB  
wal_level = hot_standby                 # minimal, archive, or hot_standby  
synchronous_commit = off                # immediate fsync at commit  
wal_sync_method = fdatasync             # the default is the first option   
wal_buffers = 128000kB                  # min 32kB  
wal_writer_delay = 20ms                 # 1-10000 milliseconds  
checkpoint_segments = 64                # in logfile segments, min 1, 16MB each  
checkpoint_timeout = 30min              # range 30s-1h  
archive_mode = on               # allows archiving to be done  
archive_command = 'cp %p $PGARCHIVE/%f'         # command to use to archive a logfile segment  
max_wal_senders = 30            # max number of walsender processes  
wal_keep_segments = 1000        # in logfile segments, 16MB each; 0 disables;因为本例使用的logfile segment单个=64M,所以这里需要至少64*1000=64GB的pg_xlog目录空间,否则可能空间溢出.  
random_page_cost = 2.0                  # same scale as above  
effective_cache_size = 12800MB  
constraint_exclusion = partition        # on, off, or partition  
log_destination = 'csvlog'              # Valid values are combinations of  
logging_collector = on          # Enable capturing of stderr and csvlog  
log_connections = on            # 调试阶段建议主库和standby都打开log_connections,调试完后建议关闭.  
log_directory = 'pg_log'            # directory where log files are written,  
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,  
log_truncate_on_rotation = on           # If on, an existing log file of the  
log_rotation_age = 1d                   # Automatic rotation of logfiles will  
log_rotation_size = 10MB                # Automatic rotation of logfiles will   
log_min_duration_statement = 1000ms     # -1 is disabled, 0 logs all statements  
log_checkpoints = on  
log_lock_waits = on                     # log lock waits >= deadlock_timeout  
log_statement = 'ddl'                   # none, ddl, mod, all  
track_activity_query_size = 2048        # (change requires restart)  
autovacuum = on                 # Enable autovacuum subprocess?  'on'   
log_autovacuum_min_duration = 0 # -1 disables, 0 logs all actions and  
check_function_bodies = on  
bytea_output = 'escape'                 # hex, escape  
datestyle = 'iso, mdy'  
lc_messages = 'C'                       # locale for system error message  
lc_monetary = 'C'                       # locale for monetary formatting  
lc_numeric = 'C'                        # locale for number formatting  
lc_time = 'C'                           # locale for time formatting  
default_text_search_config = 'pg_catalog.english'  
deadlock_timeout = 1s  
hot_standby = off                        # 这个参数在初始化slave的时候关闭是比较明智的选择,在初始同步完成后在开启  
tcp_keepalives_idle = 60                 #   
```  
3\. 配置recovery.conf  
```  
cp $PGHOME/share/recovery.conf.sample $PGDATA/  
cd $PGDATA  
mv recovery.conf.sample recovery.conf  
vi recovery.conf  
restore_command = 'cp $PGARCHIVE/%f %p'         # e.g. 'cp /mnt/server/archivedir/%f %p'  
archive_cleanup_command = 'pg_archivecleanup $PGARCHIVE %r'  
standby_mode = 'on'  
trigger_file = '/database/pgdata/tbs1/pg_root/postgresql.trigger.1921'  
primary_conninfo = 'host=172.16.3.33 port=1921 user=repuser1 keepalives_idle=60'  # application_name也可以加在这里  
```  
4\. 配置~/.pgpass 或$PGPASSFILE   
```  
(PGPASSFILE specifies the name of the password file to use for lookups. If not set, it defaults to ~/.pgpass)  
格式:hostname:port:database:username:password  
172.16.3.33:1921:replication:repuser1:repuser1REPUSER1  
chmod 400 .pgpass  
```  
5\. 启动slave节点  
启动完后,可以通过top看到slave节点在拼命的恢复pg_start_backup以来的所有wal.  
查看slave节点日志:  
```  
2011-01-04 14:51:51.363 CST,,,25950,,4d22c387.655e,1,,2011-01-04 14:51:51 CST,,0,LOG,00000,"database system was shut down in recovery at 2011-01-04 14:51:26 CST",,,,,,,,,""  
2011-01-04 14:51:51.363 CST,,,25950,,4d22c387.655e,2,,2011-01-04 14:51:51 CST,,0,LOG,00000,"entering standby mode",,,,,,,,,""  
2011-01-04 14:51:51.442 CST,,,25950,,4d22c387.655e,3,,2011-01-04 14:51:51 CST,,0,LOG,00000,"restored log file ""00000001000000020000003E"" from archive",,,,,,,,,""  
2011-01-04 14:51:51.443 CST,,,25950,,4d22c387.655e,4,,2011-01-04 14:51:51 CST,,0,LOG,00000,"redo starts at 2/F8000020",,,,,,,,,""  
2011-01-04 14:51:51.443 CST,,,25950,,4d22c387.655e,5,,2011-01-04 14:51:51 CST,,0,LOG,00000,"consistent recovery state reached at 2/FC000000",,,,,,,,,""  
2011-01-04 14:51:51.480 CST,,,25954,,4d22c387.6562,1,,2011-01-04 14:51:51 CST,,0,LOG,00000,"streaming replication successfully connected to primary",,,,,,,,,""  
```  
查看主节点进程:  
```  
postgres: wal sender process repuser1 172.16.3.39(18716) startup  
```  
恢复完后修改hot_standby = on,重启slave节点  
## 七、测试  
1\. (on master)新建用户  
```  
create role digoal nosuperuser login encrypted password 'digoal';  
```  
(on slave)查看,比log shipping模式快很多,在master建立好用户后slave马上就可以看到已经复制过来了.  
```  
postgres=# \du  
                       List of roles  
 Role name |            Attributes             | Member of   
-----------+-----------------------------------+-----------  
 digoal    |                                   | {}  
 postgres  | Superuser, Create role, Create DB | {}  
 repuser1  | Superuser                        +| {}  
           | 20 connections                    |   
```  
2\. 新建表空间  
on master  
```  
su - postgres  
mkdir /database/pgdata/tbs3/tbs_digoal  
```  
on slave  
```  
su - postgres  
mkdir /database/pgdata/tbs3/tbs_digoal  
```  
on master  
```  
create tablespace tbs_digoal owner digoal location '/database/pgdata/tbs3/tbs_digoal';  
```  
on slave (查看)  
```  
postgres=# \db  
                   List of tablespaces  
    Name    |  Owner   |             Location               
------------+----------+----------------------------------  
 pg_default | postgres |   
 pg_global  | postgres |   
 tbs_digoal | digoal   | /database/pgdata/tbs3/tbs_digoal  
(3 rows)  
```  
3\. (on master)新建数据库  
```  
create database digoal with owner digoal template template0 encoding 'UTF8' tablespace tbs_digoal;  
```  
(on slave)查看  
```  
postgres=# \l  
                              List of databases  
   Name    |  Owner   | Encoding | Collation | Ctype |   Access privileges     
-----------+----------+----------+-----------+-------+-----------------------  
 digoal    | digoal   | UTF8     | C         | C     |   
 postgres  | postgres | UTF8     | C         | C     |   
 template0 | postgres | UTF8     | C         | C     | =c/postgres          +  
           |          |          |           |       | postgres=CTc/postgres  
 template1 | postgres | UTF8     | C         | C     | =c/postgres          +  
           |          |          |           |       | postgres=CTc/postgres  
(4 rows)  
```  
4\. (on master)新建schema  
```  
\c digoal digoal  
create schema digoal authorization digoal;  
```  
(on slave)查看  
```  
postgres=# \c digoal digoal  
You are now connected to database "digoal" as user "digoal".  
digoal=> \dn  
        List of schemas  
        Name        |  Owner     
--------------------+----------  
 digoal             | digoal  
 information_schema | postgres  
 pg_catalog         | postgres  
 pg_toast           | postgres  
 pg_toast_temp_1    | postgres  
 public             | postgres  
(6 rows)  
```  
5\. (on master)新建表  
```  
\c digoal digoal  
create table tbl_users (id int8 , nick varchar(32));  
```  
(on slave)查看  
```  
digoal=> \c digoal digoal  
You are now connected to database "digoal".  
digoal=> \d tbl_users   
          Table "digoal.tbl_users"  
 Column |         Type          | Modifiers   
--------+-----------------------+-----------  
 id     | bigint                |   
 nick   | character varying(32) |   
```  
6\. (on master)插入测试数据  
测试脚本,开50个进程后台插入.  
```  
#!/bin/bash  
for ((i=0;i select count(*) from tbl_users ;  
  count     
----------  
 50000000  
(1 row)  
```  
7\. (on master)使用DDL测试冲突  
on master  
```  
alter table tbl_users add column first_name varchar(32) default 'zhou';  
alter table tbl_users add column last_name varchar(32) default 'digoal';  
```  
on slave   
在slave恢复期间,在slave节点执行 select count(*) from tbl_users;发生等待事件.  
```  
26232 postgres  18   0 2392m 2.0g 2.0g S  0.0 26.3   0:09.78 postgres: digoal digoal 127.0.0.1(39324) SELECT waiting  
```  
on slave   