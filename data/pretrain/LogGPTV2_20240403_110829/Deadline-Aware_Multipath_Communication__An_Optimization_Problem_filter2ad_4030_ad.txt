First, if a speciﬁc distribution is assumed (e.g., a shifted
gamma distribution), then its parameters can be estimated
through regressions analysis [26]. Alternatively, the problem
can be discretized by recording a sample of packet delays
to determine average delays in place of expected values
(Equation 25) and discrete probability distributions instead
of continuous ones (Equations 26–30).
Loss Estimation: The loss rate of a path is estimated
by dividing the number of lost packets by the total number
of packets sent along that path. To obtain an accurate
estimation,
this process requires that a large number of
packets have been sent. For that reason, the loss rate can ﬁrst
be set to 0% and the sending strategy can then be reﬁned
every time a loss is recorded.
B. Complexity
There exists a profusion of libraries in various languages
to solve linear programs. The time complexity of the em-
495
ployed algorithm is not of critical importance for the usage
of our model
in a protocol (since the problem size is
relatively small in most practical scenarios), as long as the
metric estimations are stable.
We stress that it is not necessary to solve the problem
for every packet, but only when the estimations of network
characteristics vary signiﬁcantly. Indeed, in the best case,
the problem must be solved only once—as soon as all
metrics are available, and not again if metrics remain stable.
However, if metrics experience volatility, or if paths go
up/down, then it is important to show that solving our linear
program does not constitute a heavy computational burden.
Real-valued linear programs can be solved in (worst-case)
polynomial time in terms of the number of variables, with
different variants of the interior-point method. However, in
the case of Equation 10, the size of x(cid:2) grows exponentially
with the number of retransmissions considered. To be pre-
cise, for a problem with nm variables (n being the number of
paths and m the number of retransmissions) and that can be
encoded in L input bits, Karmarkar’s algorithm [29] requires
O(n(7/2)mL) operations.
Our experiments with a commodity machine (2.8 GHz
Intel Core i5, 8 GB 1600 MHz DDR3) and the CGAL
library [22] show that, on average (calculated over 100 runs),
it takes about 458.39 microseconds to solve a problem in
which we consider two paths (excluding the blackhole path)
and two transmissions per data unit, for example, which is
negligible given that solving the problem does not block
packet transmissions. Figure 4 shows computation times for
larger problems (averaged over 100 runs).
2 transmissions
3 transmissions
1000
100
10
s
d
n
o
c
e
s
i
l
l
i
m
1
0
2
3
4
5
6
7
8
9
10
Number of paths (blackhole path excluded)
Figure 4. Computation times for solving multipath problems of different
sizes (linear programming). The y-axis is in logarithmic scale.
C. Acknowledgment scheme
In our model, we assume that acknowledgments cannot
get lost, always take the lowest-latency path, and yet that
RTT estimation is possible. One important observation is
that all the data should be acknowledged through the same
path the data came from for precise and accurate RTT
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:36:58 UTC from IEEE Xplore.  Restrictions apply. 
estimation. However, this does not mean that the acknowl-
edgment cannot also contain information about other packets
that were (or were not) received on other paths.
To get as close as possible to the above-mentioned as-
sumption in practice, the acknowledgments sent in response
to every (or every n) packet(s) should contain a combination
of the following pieces of information: (a) the range of (i.e.,
the lowest and the highest) packet numbers that the receiver
is expecting, (b) a bit vector and its position indicating what
was already received in a set of consecutive packets, (c) the
packet that was just received (for RTT estimation).
In links with low bandwidth-delay products, an acknowl-
edgement packet may contain enough information to de-
scribe the entire set of packets that are in-ﬂight between
the sender and receiver. However, when the bandwidth-
delay product is large, and the lowest-latency path is lossy,
the design of such acknowledgements is more complicated.
Speciﬁcally, the bit vector indicating which packets have
been received and which packets have not been received
may be shorter than the packets in ﬂight, for reasons
such as maximum packet size and the desire to reduce
overhead. In such cases, the receiver’s acknowledegment
scheme becomes an integral part of reaching the desired
quality metric. The goal is to create an acknowledgement
stream that maximizes the quality for a given cost. However,
because we do not know which acknowledgement packets
will be lost, we can only maximize the expected quality,
and because our acknowledgement algorithm must be nearly
on-line (and therefore does not have knowledge of future
acknowledgement transmission times), such quality can only
be optimized with respect to a particular timing for future
acknowledgements. We leave to future work the problem
of designing a high-performance, low-overhead acknowl-
edgement scheme that performs well for both low and high
bandwidth-delay products.
D. Retransmissions
it
In addition to using a retransmission timeout as de-
scribed in Section VI-B,
is possible to implement a
fast-retransmission mechanism (similar to TCP’s “fast re-
transmit” enhancement [30]), based on the fact that per-
path packet re-ordering is a relatively unlikely event in the
communication architecture we consider. This allows cor-
recting for inappropriate timeout values caused by erroneous
delay estimations, when the amount of generated trafﬁc is
sufﬁcient.
In TCP, the mechanism is triggered after three duplicate
acknowledgments, but no formal motivation is provided for
this particular number. Therefore, the question of exactly
how such a mechanism should work in our context remains
open.
IX. DISCUSSION
A. Path Characteristics Inﬂuenced by Usage
In some cases where a path has limited resources (such
as bandwidth and queue length) relative to our ability to
use those resources, our usage of a path may impact the
performance characteristics of that path. A mostly-saturated
link, when it encounters increased trafﬁc, may exhibit a
higher loss rate than the one initially measured; likewise,
queuing theory shows that as utilization increases, latency
also increases. These effects introduce non-linearities in our
model, since changes in x affect latency and loss rates,
and thus quality pT (Equation 11) and bandwidth usage A
(Equation 14). In such environments, we can initially assume
that
the characteristics of each path are independent of
transmission rate. As long as our path usage does not change,
there is no impact on our linear-programming solution.
Otherwise, we gather link characteristic information as the
path usage changes and determine whether a statistically sig-
niﬁcant change occurs in link characteristics. If so, we model
the link’s latency and loss as a function of input bandwidth,
and replace Equation 10 with a non-linear program that takes
into account the impact of transmission rates on quality and
bandwidth limits.
When two paths share a common subpath, trafﬁc sent on
one path can inﬂuence the properties of trafﬁc sent along the
other path. In many network architectures, we can determine
that two paths are linked in this way; for example, on the
Internet, traceroute may reveal the extent to which two paths
share a common subpath. Detecting such situations and
modifying the non-linear program appropriately is beyond
the scope of this paper, and left as future work. Conveniently,
our algorithm tends to send packets smoothly; that is, the
inter-arrival time between two consecutive packets sent on
the same path tends to be similar as long as the sending
rate is smooth. As a result, our approach need not consider
the impact of trafﬁc patterns (rather than trafﬁc amounts) on
queuing latency and loss.
B. Channel Coding
Our model does not
include any form of channel
coding and focuses instead on the optimal
transmis-
sion/retransmission strategy. It is established that correlated
losses decrease the effectiveness of open-loop error control
schemes (such as forward error correction) and experiments
showed that losses are correlated even when as little as
10% of capacity is used [31]. Although there might be an
opportunity to de-correlate losses by sending consecutive
packets along different paths, that approach has limitations.
When a packet is lost, the delay required to recover the
corresponding group of packets equals the longest delay
of all paths. Therefore, the beneﬁts of end-to-end coding
(including in a multipath context) are questionable and need
to be further investigated. Moreover, in terms of fairness
496
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:36:58 UTC from IEEE Xplore.  Restrictions apply. 
to other users/applications, only performing retransmissions
with no additional redundancy (due to coding) is more
desirable.
C. Interpretation of Bandwidth and Cost Limits
Our model operates on the expected value of the band-
width to be used and the cost bound. In particular, the
values in A (Equation 14) use the trafﬁc vector to calculate
the expected usage of each link and the expected cost. In
some systems, exceeding a user-speciﬁed cost bound may be
unacceptable; in other systems, exceeding the pre-speciﬁed
bandwidth limits may result in packet loss that cannot be
handled by our model. In such cases, a system using our
approach can adjust the values in q (Equation 17) until an
acceptable solution is reached. In particular, given a certain
data rate, number of packets, and rate solution x(cid:2), we can
compute the probability of exceeding an expected cost or
a bandwidth limit; in the event that this probability is too
high, the system can adjust the bandwidth limit or cost limit
and re-solve the linear program to obtain a solution that is
closer to the system’s goals.
X. CONCLUSION
Packet switching has the advantage of enabling the usage
of several network paths simultaneously for a single stream
of data or even for a single message, which constitutes an
attractive research area for improving network performance.
Unfortunately, the path diversity that the Internet offers is
rarely fully exploited, for several reasons. First, the current
Internet architecture does not allow end hosts to specify the
path(s) they want to use. Second, the multipath paradigm
poses many new challenges and requires that most transport-
layer concepts be redesigned. Finally, the advantages that
multipath communication offers are not well known because
they have not yet been sufﬁciently examined.
In this paper, we proposed an analytical model for opti-
mizing the performance of partially-reliable multipath com-
munications, in particular with the goal of developing better
protocols for latency-sensitive applications. We showed that
path diversity achieves better performance than uniform
paths in deadline-based scenarios, through theoretical and
simulation results. Many challenges remain to design a
deployable protocol (e.g., cross trafﬁc, varying conditions,
congestion/ﬂow control), which we leave to be addressed by
future work. However, multipath communication promises to
provide a multitude of desirable properties.
ACKNOWLEDGMENTS
The research leading to these results has received funding
from the European Research Council under the European
Union’s Seventh Framework Programme (FP7/2007-2013),
ERC grant agreement 617605. This material is also based
upon work partially supported by NSF under Contract No.
CNS-0953600. The views and conclusions contained here
are those of the authors and should not be interpreted as nec-
essarily representing the ofﬁcial policies or endorsements,
either express or implied, of NSF, the University of Illinois,
or the U.S. Government or any of its agencies.
REFERENCES
[1] C. Raiciu, C. Paasch, S. Barre, A. Ford, M. Honda, F. Duch-
ene, O. Bonaventure, and M. Handley, “How hard can it be?
designing and implementing a deployable multipath TCP,”
in Proceedings of the 9th USENIX conference on Networked
Systems Design and Implementation (NSDI), 2012.
[2] A. Singla, B. Chandrasekaran, P. B. Godfrey, and B. Maggs,
“The Internet at the speed of light,” in Proceedings of the
13th ACM Workshop on Hot Topics in Networks (HotNets),
2014.
[3] A. Hern,
for
launches Aquila
“Facebook
Internet
solar-powered
drone
[Online].
Available: https://www.theguardian.com/technology/2015/jul/
31/facebook-ﬁnishes-aquila-solar-powered-internet-drone-
with-span-of-a-boeing-737
access,” August
2015.
[4] “Google begins launching Internet-beaming balloons,” June
[Online]. Available: http://news.temple.edu/in-the-
2013.
media/google-begins-launching-internet-beaming-balloons
[5] T. Fernholz, “The details behind SpaceX’s ambitious
satellite
[Online].
Available: https://qz.com/426158/the-details-behind-spacexs-
ambitious-satellite-internet-experiment/
experiment,”
Internet
2015.
June
[6] X. Zhang, H.-C. Hsiao, G. Hasker, H. Chan, A. Perrig, and
D. G. Andersen, “SCION: Scalability, control, and isolation
on next-generation networks,” in Proceedings of the IEEE
Symposium on Security and Privacy (S&P), May 2011.
[7] T. Anderson, K. Birman, R. Broberg, M. Caesar, D. Comer,
C. Cotton, M. J. Freedman, A. Haeberlen, Z. G. Ives, A. Kr-
ishnamurthy, W. Lehr, B. Loo, D. Mazieres, A. Nicolosi, J. M.
Smith, I. Stoica, R. Renesse, M. Walﬁsh, H. Weatherspoon,
and C. S. Yoo, “The NEBULA future Internet architecture,”
in The Future Internet, 2013.
[8] C. Filsﬁls, N. K. Nainar, C. Pignataro, J. C. Cardona, and
P. Francois, “The segment routing architecture,” in Pro-
ceedings of the IEEE Global Communications Conference
(GLOBECOM), 2015.
[9] X. Yang, D. Clark, and A. W. Berger, “NIRA: A new inter-
domain routing architecture,” IEEE/ACM Transactions on
Networking, July 2007.
[10] P. B. Godfrey, I. Ganichev, S. Shenker, and I. Stoica, “Pathlet
routing,” in Proceedings of the ACM SIGCOMM Conference,
2009.
[11] N. P. Lago and F. Kon, “The quest for low latency,” in
Proceedings of the International Computer Music Conference
(ICMC), 2004.
[12] “YouTube live streaming API overview.” [Online]. Available:
https://developers.google.com/youtube/v3/live/getting-started
497
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:36:58 UTC from IEEE Xplore.  Restrictions apply. 
[13] B. Vamanan, J. Hasan, and T. N. Vijaykumar, “Deadline-
aware datacenter TCP (D2TCP),” in Proceedings of the ACM
SIGCOMM Conference, 2012.
[14] R. Stewart, M. Ramalho, Q. Xie, M. Tuexen, and P. Conrad,
“Stream control transmission protocol (SCTP) partial relia-
bility extension,” RFC 3758, May 2004.
[15] R. Stewart, M. Tuexen, and P. Lei, “SCTP: What is it, and
how to use it?” in Proceedings of BSDCan: The Technical
BSD Conference, 2008.
[16] X. Liu, S. Mohanraj, M. Pioro, and D. Medhi, “Multipath
routing from a trafﬁc engineering perspective: How beneﬁ-
cial is it?” in Proceedings of the 22nd IEEE International
Conference on Network Protocols (ICNP), 2014.
[17] P. Soldati, H. Zhang, Z. Zou, and M. Johansson, “Optimal
routing and scheduling of deadline-constrained trafﬁc over
lossy networks,” in Proceedings of the IEEE Global Commu-
nications Conference (GLOBECOM), 2010.
[18] J. Wu, C. Yuen, B. Cheng, Y. Shang, and J. Chen, “Goodput-
aware load distribution for real-time trafﬁc over multipath
networks,” IEEE Transactions on Parallel and Distributed
Systems, August 2015.
[19] C. Cetinkaya and E. W. Knightly, “Opportunistic trafﬁc
scheduling over multiple network paths,” in Proceedings of
the IEEE International Conference on Computer Communi-
cations (INFOCOM), 2004.
[20] S. Prabhavat, H. Nishiyama, N. Ansari, and N. Kato, “Ef-
fective delay-controlled load distribution over multipath net-
works,” IEEE Transactions on Parallel and Distributed Sys-
tems, January 2011.
[21] T. R. Henderson, M. Lacage, G. F. Riley, C. Dowell, and
J. Kopena, “Network simulations with the ns-3 simulator,”
SIGCOMM demonstration, August 2008.
[22] “The computational geometry algorithms library (CGAL).”
[Online]. Available: http://www.cgal.org/
[23] A. Mukherjee, “On the dynamics and signiﬁcance of low
load,” Internetworking:
frequency components of Internet
Research and Experience, December 1992.
[24] V.
Paxson,
packet
dynamics,”
“End-to-end
Internet
IEEE/ACM Transactions on Networking, June 1999.
[25] S. Kim, J. Y. Lee, and D. K. Sung, “A shifted gamma
distribution model for long-range dependent Internet trafﬁc,”
IEEE Communications Letters, March 2003.
[26] D. Chen, X. Fu, W. Ding, H. Li, N. Xi, and Y. Wang,
“Shifted gamma distribution and long-range prediction of
round trip timedelay for Internet-based teleoperation,” in Pro-
ceedings of the IEEE International Conference on Robotics
and Biomimetics (ROBIO), 2009.
[27] R. Prasad, C. Dovrolis, M. Murray, and K. Claffy, “Bandwidth
techniques, and tools,”
estimation: metrics, measurement
IEEE Network, November 2003.
[28] M. Dong, Q. Li, D. Zarchy, P. B. Godfrey, and M. Schapira,
“PCC: Re-architecting congestion control for consistent high
performance,” in Proceedings of the 12th USENIX Symposium
on Networked Systems Design and Implementation (NSDI),
2015.
[29] G. Strang, “Karmarkar’s algorithm and its place in applied
mathematics,” The Mathematical Intelligencer, June 1987.
[30] M. Allman, V. Paxson, and W. Stevens, “TCP congestion
control,” RFC 2581, April 1999.
[31] J.-C. Bolot, “Characterizing end-to-end packet delay and loss
in the Internet,” Journal of High Speed Networks, July 1993.
498
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:36:58 UTC from IEEE Xplore.  Restrictions apply.