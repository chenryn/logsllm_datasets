“feature” by introducing, at line 4 in function withdrawAll,
a long sequence of white spaces, effectively hiding the code
that follows. The hidden code throws, if the caller of the
function is not the owner and thereby prevents the subse-
quent balance transfer to any caller of the function. Also note
the check at line 4, where the block number must be greater
than 5,040,270. This ensures that the honeypot solely steals
funds when deployed on the main network. Since the block
numbers on the test networks are smaller, testing this con-
tract on a such a network would transfer all the funds to the
victim, making him or her believe that the contract is not a
honeypot. We label this type of honeypot as hidden transfer.
Straw Man Contract.
In Figure 9 we provide an example
of a honeypot technique that we denote as straw man con-
tract. At ﬁrst sight, it seems that the contract’s CashOut
function is vulnerable to a reentrancy attack [2] (line 14).
In order to be able to mount the reentrancy attack, the user
is required to ﬁrst call the Deposit function and transfer
a minimum amount of ether. Eventually, the user calls the
CashOut function, which performs a call to the contract ad-
dress stored in TransferLog. As shown in the Figure 9, the
contract called Log is supposed to act as a logger. However,
the honeypot creator did not initialise the contract with an ad-
dress containing the bytecode of the shown logger contract.
Instead it has been initialised with another address pointing
to a contract that implements the same interface, but throws
an exception if the function AddMessage is called with the
string “CashOut” and the caller is not the honeypot creator.
1596    28th USENIX Security Symposium
USENIX Association
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
c o n t r a c t P r i v a t e _ B a n k {
...
f u n c t i o n P r i v a t e _ B a n k ( address _log ) {
T r a n s f e r L o g = Log ( _log ) ;
}
f u n c t i o n Deposit () public payable {
if ( msg . value >= M i n D e p o s i t ) {
b a l a n c e s [ msg . sender ]+= msg . value ;
T r a n s f e r L o g . A d d M e s s a g e ( " Deposit " ) ;
}
}
f u n c t i o n CashOut ( uint _am ) {
if ( _am  0 can be satisﬁed under the given path condi-
tions of the execution path p. If p satisﬁes the constraint, we
know that funds can ﬂow into the contract.
Transferring Funds. There are two different ways to
transfer funds: either explicit via a transfer or implicit via a
selfdestruct. We verify the former by iterating over all calls
contained in C and checking whether there exists a call c,
where cv is either symbolic or cv > 0. We verify the latter by
iterating over all execution paths contained in P and checking
whether there exists an execution path p that terminates in a
SELFDESTRUCT. Finally, we know that funds can ﬂow
out of the contract, if we ﬁnd at least one call c or execution
path p, that satisﬁes the aforementioned conditions.
4.2.3 Honeypot Analysis
Our honeypot analysis consists of several sub-components.
Each sub-component is responsible for the detection of a
particular honeypot technique. Every honeypot technique is
identiﬁed via heuristics. We describe the implementation of
each sub-component below. The honeypot analysis can eas-
ily be extended to detect future honeypots by simply imple-
menting new sub-components.
• Balance Disorder. Detecting a balance disorder is
straightforward. We iterate over all calls contained in C
and report a balance disorder, if we ﬁnd a call c within
an infeasible basic block, where cv = Iv + σ [Ia]b.
• Inheritance Disorder. Detecting an inheritance disor-
der at the bytecode level is rather difﬁcult since byte-
code does not include information about inheritance.
Therefore, we leverage on implementation details that
are speciﬁc to this honeypot technqiue: 1) there exists
an Is that is written to a storage location which is never
used inside a path condition, call or suicide; and 2) there
exists a call c, whose path conditions contain a compar-
ison between Is and a storage variable, whose storage
location is different than the storage location identiﬁed
in 1).
• Skip Empty String Literal. We start by iterating over
all calls contained in C and checking whether there ex-
ists a call c, where the number of arguments in ca is
smaller than the number of arguments expected by c f .
We report a skip empty string literal, if we can ﬁnd an-
other call c(cid:48), that is called within function c f and where
c(cid:48)
r originates from an argument in ca.
• Type Deduction Overﬂow. We detect a type deduction
overﬂow by iterating over all calls contained in C and
checking whether there exists a call c, where cv contains
the result of a multiplication or an addition that has been
truncated via an AND mask with the value 0xff, which
represents the maximum value of an 8-bit integer.
• Uninitialised Struct. We use a regular expression to
extract the storage location of structs, whose ﬁrst ele-
ment is pointing at storage location zero within a basic
block. Eventually, we report an uninitialised struct, if
there exists a call c ∈ C, where either cv contains a value
from a storage location of a struct or the path condition
of c depends on a storage location of a struct.
• Hidden State Update. We detect a hidden state update
by iterating over all calls contained in C and checking
whether there exists a call c, whose path conditions de-
pend on a storage value that can be modiﬁed via another
function, without the transfer of funds.
1598    28th USENIX Security Symposium
USENIX Association
Figure 11: Number of monthly deployed smart contracts in
Ethereum.
Figure 12: Number of detected honeypots per technique.
• Hidden Transfer. We report a hidden transfer, if two
consecutive calls c and c(cid:48) exist along the same execution
path p, where cr ∈ σ [Ia]s∧cv = σ [Ia]b and c(cid:48)
v =
σ [Ia]b.
r = Is∧c(cid:48)
• Straw Man Contract. First, we verify if two consecu-
tive calls c and c(cid:48) exist along the same execution path p,
where cr (cid:54)= c(cid:48)
r. Finally, we report a straw man contract if
one of the two cases is satisﬁed: 1) c is executed after c(cid:48),
t = DELEGAT ECALL∧cv = σ [Ia]b∧cr = Is; or
where c(cid:48)
t = CALL∧ Is ∈ c(cid:48)
2) c is executed before c(cid:48), where c(cid:48)
a.
5 Evaluation
In this section, we assess the correctness and effectiveness of
HONEYBADGER. We aim to determine the reliability of our
tool and measure the overall prevalence of honeypots cur-
rently deployed on the Ethereum blockchain.
Dataset. We downloaded the bytecode of 2,019,434 smart
contracts, by scanning the ﬁrst 6,500,000 blocks of the
Ethereum blockchain. The timestamps of the collected con-
tracts range from August 7, 2015 to October 12, 2018. Fig-
ure 11 depicts the number of smart contracts deployed on
Ethereum per month. We state a sudden increase in the num-
ber of smart contracts deployed between December 2017 and
February 2018. We suspect that this inﬂation is related to the
increase of the price of ether and other cryptocurrencies such
as Bitcoin [9]. In 2016, 50,980 contracts were deployed on
average per month, whereas in 2017 this number increased
almost tenfold, with 447,306 contracts on average per month.
Interestingly, a lot of contracts share the same bytecode.
Out of the 2,019,434 contracts, solely 151,935 are unique
in terms of exact bytecode match. In other words, 92.48%
of the contracts deployed on the Ethereum blockchain are
duplicates.
Experimental Setup. All experiments were conducted on
our high-performance computing cluster using 10 nodes with
960 GB of memory, where every node has 2 Intel Xeon
L5640 CPUs with 12 cores each and clocked at 2,26 GHz,
running 64-bit Debian Jessie 8.10. We used version 1.8.16 of
Geth’s EVM as our disassembler and Solidity version 0.4.25
as our source-code-to-bytecode compiler. As our constraint
solver we used Z3 version 4.7.1. We set a timeout of 1 sec-
ond per Z3 request for the symbolic execution. The sym-
bolic execution’s global timeout was set to 30 minutes per
contract. The loop limit, depth limit (for DFS) and gas limit
for the symbolic execution were set to 10, 50 and 4 million,
respectively.
5.1 Results
We run HONEYBADGER on our set of 151,935 unique smart
contracts. Our tool took an average of 142 seconds to anal-
yse a contract, with a median of 31 seconds and a mode of
less than 1 second. Moreover, for 98% of the cases (149,603
contracts) our tool was able to ﬁnish its analysis within the
given time limit of 30 minutes. The number of explored
paths ranges from 1 to 8,037, with an average of 179 paths
per contract and a median of 105 paths. Finally, during our
experiments, HONEYBADGER achieved a code coverage of
about 91% on average.
Out of the 151,935 analysed contracts, 48,487 have been
ﬂagged as cash ﬂow contracts.
In other words, only 32%
of the analysed contracts are capable of receiving as well as
sending funds. Figure 12 depicts for each honeypot tech-
nique the number of contracts that have been ﬂagged by
HONEYBADGER. Our tool detected a total of 460 unique
honeypots.
It is worth mentioning that 24 out of the 460
honeypots were part of our initial dataset (see Table 5 in Ap-
pendix A) and that our tool thus managed to ﬁnd 436 new
honeypots. Moreover, as mentioned earlier, many contracts
share the same bytecode. Thus, after correlating the results
with the bytecode of the 2 million contracts currently de-
ployed on the blockchain, a total of 690 contracts were iden-
tiﬁed as honeypots5. Our tool therefore discovered a total of
22 balance disorders (BD), 75 inheritance disorders (ID), 11
5https://honeybadger.uni.lu/
USENIX Association
28th USENIX Security Symposium    1599
050000100000150000200000250000August 2015October 2015December 2015February 2016April 2016June 2016August 2016October 2016December 2016February 2017April 2017June 2017August 2017October 2017December 2017February 2018April 2018June 2018August 2018October 2018Number of contractsDate227511580382141012269105552231363BDIDSESLTDOUSHSUHTSMCAll ContractsUnique Contractsl