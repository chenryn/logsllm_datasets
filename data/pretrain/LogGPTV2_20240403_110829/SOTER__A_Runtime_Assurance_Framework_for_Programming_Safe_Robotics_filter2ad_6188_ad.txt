(l, in, l
)
(cid:48)
= T opics)(n1)
(L, OE, ct, F N, T opics) → (L[n (cid:55)→ l
Fig. 11. Semantics of an RTA System
be executed (dt2). F N is updated to the set of nodes that are
enabled and must be executed (dt3) at the current time. DM-
STEP represents the transition of any of the DM nodes in the
module. The important operation performed by this transition
is to enable or disable the outputs of the AC and SC node
(dm2) based on its current mode (dm1). Finally, AC-OR-SC-
STEP represents the step of any AC or SC node in the module.
Note that the node updates the output topics only if its output
is enabled (based on OE(n) (n1)).
Reachability. Note that the state space S of an RTA system
is the set of all possible conﬁgurations. The set of all possible
reachable states of an RTA system is a set of conﬁgurations
that are reachable from the initial conﬁguration using the tran-
sition system described in Figure 11. Since the environment
transitions are nondeterministic, potentially many states are
reachable even if the RTA modules are all deterministic.
Let ReachM (s, Nsc, t) ⊆ S represent the set of all states
of the RTA system S reachable in time [0, t] starting from
the state s, using only the controller SC node Nsc of the
RTA module M ∈ S. In other words, instead of switching
control between SC and AC of the RTA module M, the
DM always keeps SC node in control. ReachM (s,∗, t) ⊆ S
represents the set of all states of the RTA system S reach-
able in time [0, t] starting from the state s, using only a
completely nondeterministic module instead of M ∈ S. In
other words, instead of module M, a module that generates
nondeterministic values on the output topics of M is used.
The notation Reach is naturally extended to a set of states:
s∈ψ ReachM (s, x, t) is the set of all
states reachable in time [0, t] when starting from a state s ∈ ψ
using x. Note that, ReachM (ψ, Nsc, t) ⊆ ReachM (ψ,∗, t).
ReachM (ψ, x, t) = (cid:83)
We note that the deﬁnition of DM for an RTA module
M is sensitive to the choice of the environment for M.
Consequently, every attribute of M (such as well-formedness)
depends on the context in which M resides. We implicitly as-
8
sume that all deﬁnitions of M are based on a completely non-
deterministic context. All results hold for this interpretation,
but they also hold for any more constrained environment.
V. EVALUATION
We empirically evaluate the SOTER framework by building
an RTA-protected software stack (Figure 8) that satisﬁes
the safety invariant: φplan ∧ φmpr ∧ φbat. The goal of our
evaluation is twofold: (Goal1) Demonstrate how the SOTER
programming framework can be used for building the software
stack compositionally, where each component is guaranteed
to satisfy the component-level safety speciﬁcation. Further,
we show how the programmable switching feature of an
RTA module can help maximize its performance. (Goal2)
Empirically validate using rigorous simulations that an RTA-
protected software stack can ensure the safety of the drone in
the presence of third-party (or machine learning) components,
where otherwise, the drone could have crashed.
The videos and other details corresponding to our exper-
iments on real drones are available on https://drona-org.
github.io/Drona/.
SOTER tool chain. The SOTER tool-chain consists of three
components: the compiler, a C runtime and a backend sys-
tematic testing engine. The compiler ﬁrst checks that all the
constructed RTA modules in the program are well-formed.
The compiler then converts the source-level syntax of a SOTER
program into C code. This code contains statically-deﬁned
C array-of-structs and functions for the topics, nodes, and
functions declarations. The OE that controls the output of
each node is implemented as a shared-global data-structure
updated by all the DM in the program. The SOTER C runtime
executes the program according to the program’s operational
semantics by using the C representation of the nodes. The
periodic behavior of each node was implemented using OS
timers for our experiments, deploying the generated code on
real-time operating system is future work.
The compiler also generates C code that can be systemati-
cally explored by the backend testing engine. This part of the
SOTER framework is built on top of our previous work [23]
on the P [24], [25] language and the DRONA [26] robotics
framework. The systematic testing engine enumerates, in a
model-checking style, all possible executions of the program
by controlling the interleaving of nodes using an external
scheduler. Since a SOTER program is a multi-rate periodic
system, we use a bounded-asynchronous scheduler [27] to ex-
plore only those schedules that satisfy the bounded-asynchrony
semantics. When performing systematic testing of the robotics
software stack the third-party (untrusted) components that are
not implemented in SOTER are replaced by their abstractions
implemented in SOTER. The systematic testing backend details
is not provided as the focus of our paper is to demonstrate the
importance of runtime assurance after design-time analysis.
Experimental Setup For our experiments on the real drone
hardware, we use a 3DR Iris [13] drone that comes with
the open-source Pixhawk PX4 [12] autopilot. The simulation
results were done in the Gazebo [14] simulator environment
9
that has high ﬁdelity models of Iris drone. For our simulations,
we execute the PX4 ﬁrmware in the loop.
A. RTA-Protected Safe Motion Primitives
A drone navigates in the 3D space by tracking trajectories
between waypoints computed by the motion planner. Given
the next waypoint, an appropriate motion primitive is used to
track the reference trajectory. Informally, a motion primitive
consists of a pre-computed control law (sequence of control
actions) that regulates the state of the drone as a function
of time. For our experiments in Figure 5, we used the motion
primitives provided by the PX4 autopilot [12] as our advanced
controller and found that it can lead to failures or collision.
To achieve RTA-protected motion primitive, there are three
essential steps: (1) Design of the safe controller Nsc; (2)
Designing the ttf2∆ function that controls switching from
the AC to SC for the motion primitive; (3) Programming the
switching from SC to AC and choosing an appropriate ∆ and
φsaf er so that the system is not too conservative.
When designing the Nsc, it must satisfy the Property (P2),
where φsaf e is the region not occupied by any obstacle.
Techniques from control theory, like reachability [28] can be
used for designing Nsc. We use the FaSTrack [19] tool for
generating a correct-by-construction controller for the drone
such that it satisﬁes all the properties required for a Nsc.
To design the switching condition from AC to SC, we need
to compute the ttf function that checks Reach(st,∗, 2∆) (cid:54)⊆
φsaf e (Figure 9) where st is the current state. Consider the 2D
representation of the workspace (Figure 2) in Figure 12b. The
obstacles (shown in grey) represent the φunsaf e region and any
region outside is φsaf e. Note that, Nsc can guarantee safety
for all locations in φsaf e (P2). We can use the level set tool-
box [28] to compute the backward reachable set from φsaf e
in 2∆ (shown in yellow), i.e., the set of states from where the
drone can leave φsaf e (collide with obstacle) in 2∆. In order
to maximize the performance of the system, the RTA module
must switch from SC to AC after the system has recovered. In
our experiments, we choose φsaf er = R(φsaf e, 2∆) (shown
in green). Nsc is designed such that given φsaf er, Property
(P2b) holds. DM transfers control to AC when it detects that
the drone is in φsaf er, which is the backward reachable set
from φsaf e in 2∆ time.
Choosing the period ∆ is an important design deci-
sion. Choosing a large ∆ can lead to overly-conservative
ttf2∆(st, φsaf e) and φsaf er. In other words, a large ∆ pushes
the switching boundaries further away from the obstacle. In
which case, a large part of the workspace is covered by red or
yellow region where SC (conservative controller) is in control.
We implemented the safe motion primitive as a RTA module
using the components described above. Figure 12a presents
one of the interesting trajectories where the SC takes control
multiple times and ensures the overall correctness of the
mission. The green tube inside the yellow tube represents the
φsaf er region. The red dots represent the points where the DM
switches control to SC and the green dots represent the points
where the DM returns control back to the AC for optimizing
(a) RTA for Safe Motion Primitive
(b) Safe Motion Primitives during Surveillance Mission
(c) Battery Safety during Surveillance Mission
Fig. 12. Evaluation of RTA-Protected Drone Surveillance System built using SOTER
performance. The average time taken by the drone to go from
g1 to g4 is 10 secs when only the unsafe Nac is in control (can
lead to collisions), it is 14 secs when using the RTA protected
safe motion primitive, and 24 secs when only using the safe
controller. Hence, using RTA provides a “safe” middle ground
without sacriﬁcing performance too much.
Figure 12b presents the 2D representation of our workspace
in Gazebo (Figure 2a). The dotted lines represent one of
the reference trajectories of the drone during the surveillance
mission. The trajectory in solid shows the trajectory of the
drone when using the RTA-protected software stack consisting
of the safe motion primitive. At N1 and N2, the Nsc takes
control and pushes the drone back into φsaf er (green); and
returns control back to Nac. We observe that the Nac is in
control for the most part of the surveillance mission even in
cases when the drone deviates from the reference trajectory
(N3) but is still safe.
B. RTA-Protected Battery Safety
We want our software stack to provide the battery-safety
guarantee, that prioritizes safely landing the drone when the
battery charge falls below a threshold level.
We ﬁrst augment the state of the drone with the current
battery charge, bt. Nac is a node that receives the current
motion plan from the planner and simply forwards it to the
motion primitives module. Nsc is a certiﬁed planner that safely
lands the drone from its current position. The set of all safe
states for the battery safety is given by, φsaf e := bt > 0,
i.e., the drone is safe as long as the battery does not run out
of charge. We deﬁne φsaf er := bt > 85%, i.e., the battery
charge is greater than 85%. Since the battery discharges at a
slower rate compared to changes in the position of the drone,
we deﬁne a larger ∆ for the battery RTA compared to the
motion primitive RTA.
To design the ttf2∆, we ﬁrst deﬁne two terms: (1) Maxi-
mum battery charge required to land Tmax; and (2) Maximum
battery discharge in 2∆, cost∗. In general Tmax depends on
the current position of the drone. However, we approximate
Tmax as the battery required to land from the maximum height
attained by the drone safely. Although conservative, it is easy
to compute and can be done ofﬂine. To ﬁnd cost∗, we ﬁrst
deﬁne a function cost, which given the low-level control to
the drone and a time period, returns the amount of battery
the drone discharges by applying that control for the given
time period. Then, cost∗ = maxu cost(u, 2∆) is the maximum
discharge that occurs in time 2∆ across all possible controls,
u. We can now deﬁne ttf2∆(bt, φsaf e) = bt− cost∗  96% of the time. Thus, safety is
ensured without sacriﬁcing the overall performance.
VI. RELATED WORK
We next situate SOTER with related techniques for building
robotics systems with high-assurance of correctness [30].
Reactive synthesis. There is increasing interest
towards
from temporal
synthesizing reactive robotics controllers
logic [31], [32], [33], [34]. Tools like TuLip [35], BIP [36],
[37], and LTLMoP [38] construct a ﬁnite transition system
that serves as an abstract model of the physical system and
synthesizes a strategy, represented by a ﬁnite state automaton,
satisfying the given high-level temporal speciﬁcation. Though
the generated strategy is guaranteed to be safe in the abstract
model of the environment, this approach has limitations: (1)
there is gap between the abstract models of the system and its
actual behavior in the physical world; (2) there is gap between
the generated strategy state-machine and its actual software
implementation that interacts with the low-level controllers;
and ﬁnally (3) the synthesis approach scale poorly both with
the complexity of the mission and the size of the workspace.
Recent tools such as SMC [34] generate both high-level and
low-level plans, but still need additional work to translate these
plans into reliable software on top of robotics platforms.
Reachability analysis and Simulation-based falsiﬁcation.
Reachability analysis tools [20], [39], [40] have been used to
verify robotics systems modeled as hybrid systems. Differ-
ently from our work, reachability methods require an explicit
representation of the robot dynamics and often suffer from
scalability issues when the system has a large number of
discrete states. Also,
the analysis is performed using the
models of the system, and hence, there is a gap between the
models being veriﬁed and their implementation. Simulation-
based tools for the falsiﬁcation of CPS models (e.g., [41])
are more scalable than reachability methods, but generally,
they do not provide any formal guarantees. In this approach,
the entire robotics software stack is tested by simulating it
in a loop with a high-ﬁdelity model of the robot and hence,
this approach does not suffer from the gap between model
and implementation described in the previous approaches.
However, a challenge to achieving scalable coverage comes
from the considerable time it can take for simulations.
Runtime Veriﬁcation and Assurance. Runtime veriﬁcation
has been applied to robotics [42], [43], [44], [45], [46], [47],
[48] where online monitors are used to check the correct-