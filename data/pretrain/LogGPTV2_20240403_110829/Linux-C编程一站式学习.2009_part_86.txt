字段长度固定的协议往往不够灵活，难以适应新的变化。比如，以前DOS的文件名是8字节主文件
是read返回0。
节，根据文件名创建文件，
第13字节开始是文件内容，
协议，
如果应用层协议的各字段长度固定，用readn来读是非常方便的。例如设计一种客户端上传文件的
数readn和writen，也放在wrap.c中：
避免这些情况干扰主程序的逻辑，确保读写我们所请求的字节数，
缓冲区才返回，
接收缓冲区中有20字节，
TCP协议是面向流的，
，而发送缓冲区中只有20个字节的空闲位置，那么write会阻塞，
，规定前12字节表示文件名,
ssize_t Writen(int fd, const void *vptr, size_t n)
ssize_t Readn(int fd, void *vptr, size_t n)
但如果socket文件描述符有O_NONBLOCK标志，
return n;
while
const char *ptr;
ssize_t nwritten;
size_t nleft;.
return n - nleft;
Left
，read和write调用的返回值往往小于参数指定的字节数。
 请求读100个字节,
，然后在一个循环中调用read读文件内容并存盘，循环结束的条件
if
paxu =+ d 
nleft -= nread;
if
n;
上传完所有文件内容后关闭连接,
（(nwritten =
((nread
cead;
 超过12字节的文件名截断，
-= nwritten;
else
if (nwritten 
:/client
client.c
while (fgets(buf,
Connect(sockfd,
return 0;
inet_
Sockfd = Socket(AF_INET,
struct sockaddr_
else
Write(STDOUT_FILENO, buf, n);
 printf("the other side has been closed.\n");
(struct sockaddr *)&servaddr
 in servaddr;
MAXLINE,
"127.
buf
o
一个字符串发给服务器，
SOCK_STREAM, O);
INET
Stdin） != NULL)
len(buf));
 &servaddr.sin_addr);
，再从服务器收回来，现在我
---
## Page 711
另外，我们需要修改server，使它可以多次处理同一客户端的请求。
果SIGPIPE信号没有导致进程异常退出，write返回-1并且errno为EPIPE。
接就被SIGPIPE信号终止掉了，
续write。另外,
为了避免client异常退出，
于TCP协议层已经处于RST状态了
是client下次循环时又调用write发数据给server，write调用只负责把数据交给TCP发送缓冲区就可
现，server对每个请求只处理一次，
通知应用
以成功返回
这时server仍在运行,
 SIGPIPE信号的缺省处理动作是终止程序，
#define SAXVTNER 80
str, sizeof(str)),
closed.\n");
&cliaddr_len);
sizeof(servaddr));
int main(void)
#include
#include
#include 
#include
/* server.c+
层
回了
只把这个状态保存在TCP协议层。client下次循环又调用write发数据给server，由
 有时候代码中需要连续多次调用write，
所以不会出错，
Listen(listenfd, 20);
Bind(listenfd,
bzero(&servaddr,
listenfd = Socket(AF_INET, 
char buf[MAXLINE];
socklen_t
listenfd,
但是client的运行结果并不正确。
while（1）{
n;
上面的代码应该在判断对方关闭了连接后break出循环，而不是继 
 而server收到数据后应答一个RST段，
connfd;
(struct sockaddr *)&servaddr,
因此不会将数据发出，而是发一
应答后就关闭连接，
 sizeof(servaddr));
ntohs(cliaddr.sin_port));
inet _ntop(AF_INET,
 printf("the other side has been
AF
break;
(struct Sockaddr *)&cliaddr,
INET;
所以看到上面的现象。
 SOCK_STREAM, O);
htonl(INADDR_ANY);
可能还来不及调用read得知对方已关闭了连
，client不能继续使用这个连接发送数据。但
原因是什么呢？仔细查看server.c可以发
 &cliaddr.sin_addr,
一个SIGPIPE信号给应用
client收到RST段后无法立刻
711
---
## Page 712
听同样的server端口。我们用netstat命令查看一下：
这是因为，
现在做一个测试，
2.5. setsockopt 请点评
行server，结果是:
以下给出代码框架，
怎么解决这个问题？网络服务器通常用fork来同时服务多个客户端，
2.4.使用fork并发处理多个client的请求请点评
僵尸进程，
吗？想想为什么。
个客户端的，
经过上面的修改后,
CLOSE_WAIT 10830/client
S
bind error: Address already in use
while 
 netstat -apn lgrep 8000
S
虽然server的应用程序终止了，
:/server
 父进程要注意处理SIGCHLD信号和调用wait清理僵尸进程。
，运行上面的server和client之后，再开-
(1)
首先启动server，
} else 
} else if 
n
，完整的代码请读者自己完成。
客户端和服务器可以进行多次交互了。我们知道，
fork();
close(connfd);
close(listenfd);
exit(1);
perror("call to fork");
close(connfd);
while
Close(connfd);
(n
1）{
127.0.0.1:33498
(1)
write(connfd, ...);
read(connfd, ·..);
然后启动client，然后用Ctrl-C使server终止，这时马上再运
Write(connfd, buf， n);
，但TCP协议层的连接并没有完全断开，因此不能再次监
buf[
toupper(buf[i]);
127.0.0.1:8000
父进程专门负责监听端口，
服务器通常是要同时服务
多
---
## Page 713
的server。
络连接）
select是网络程序中很常用的一个系统调用，它可以同时监听多个阻塞的文件描述符（例如多个网
2.6.使用select 请点评
有关setsockopt可以设置的其它选项请参考UNP第7章。
在server代码的socket()和bind()调用之间插入如下代码：
选项SO_REUSEADDR为1，
虽然是占用同一个端口，但IP地址不同，
在server的TCP连接没有完全断开之前不允许重新监听是不合理的，
就可以再次启动server了。至于为什么要规定TIME_WAIT的时间请读者参考UNP 2.7节。
口。MSL在RFC1122中规定为两分钟，
以server是主动关闭连接的一方,
segment lifetime）的时间后才能回到CLOSED状态，
态。TCP协议规定,
client终止时自动关闭socket描述符，
现在用Ctrl-C把client也终止掉，再观察现象：
此server的TCP连接处于FIN_WAIT2状态。
态，但是client并没有终止，
server终止时，
int main(int argc, char **argv)
#define
#define MAXLINE 80
#include
#include
#include 
setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
/* server.c */
int opt 
TIME_WAIT
S
bind error:
，哪个有数据到达就处理哪个，这样，不需要fork和多进程就可以实现并发服务
S
tcp
 netstat -apn lgrep 8000
，socket描述符会自动关闭并发FIN段给client，client收到FIN后处于CLOSE_WAIT状
int
int i, maxi, maxfd,_listenfd, connfd, sockfd;
 SERV_PORT 8000
"wrap.h"
 主动关闭连接的一方要处于TIME_WAIT状态，
 Address already in use
O
，也没有关闭socket描述符，
 表示允许创建端口号相同但IP地址不同的多个socket描述符。
0 127.0.0.1:8000
127.0.0.1:8000
 在TIME_WAIT期间仍然不能再次监听同样的server端
，server的TCP连接收到client发的FIN段后处于TIME_WAIT状
，connfd对应的是与某个客户端通讯的一个具体的IP地址
 但是各操作系统的实现不同，
因为我们先Ctrl-C终止了server，
因此不会发FIN给server，
127.0.0.1:44685
127.0.0.1:33498
等待两个MSL（maximum
因为，TCP连接没有完全断开
，在Linux上一般经过半分钟后
因
所
713
的
---
## Page 714
descriptors */
client[] array */
descriptor to set 
descriptor */
str, sizeof(str)),
*)&cliaddr, &cliaddr_len);
connection */
*/
sizeof(servaddr));
for（;
maxi
maxfd 
Listen(listenfd, 20);
for
Bind(listenfd, 
servaddr.sin_port
bzero(&servaddr,
listenfd = Socket(AF_INET, 
struct
char Str[INET_
fd_set 
（i
 if (FD_ISSET(listenfd, &rset)） { /* new client
 listenfd;
rset，
for
rset 
cli
*/
（i = 0; i  maxfd)
 sizeof(servaddr))
(i
len;
（i：
==
continue;
 ntohs(cliaddr.sin_port));
inet_ntop(AF_INET,
= Accept(listenfd, (struct sockaddr
maxi 
exit(i);
fputs(
 cliaddr,
= htons(SERV_PORT);
'-1 indicates available entry */
 SOCK_STREAM, O);
i;
connfd;
&allset);
'too many clients\n", stderr);
break;
client[i]
1*
￥