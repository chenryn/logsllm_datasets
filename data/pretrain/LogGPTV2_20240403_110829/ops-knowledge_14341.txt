User: 如何在Docker容器中运行一个Node.js应用，同时让其能访问宿主机上的MySQL数据库？
Assistant: 可以通过将宿主机上的MySQL服务端口映射到容器中来实现让容器中的Node.js应用能够访问宿主机上的MySQL数据库。

具体步骤如下：

1. 在宿主机上安装MySQL，并将MySQL服务的端口暴露出来，例如端口号为3306。

2. 创建一个Docker镜像，其中包含了Node.js运行环境以及需要的依赖库，可以使用以下命令创建：

```
docker build -t node-app .
```

其中，"."表示当前目录，"node-app"为镜像名称。

3. 运行容器，并将宿主机上的MySQL服务端口映射到容器中，可以使用以下命令：

```
docker run -p 3000:3000 -p 3306:3306 -v /path/to/app:/app -e MYSQL_HOST=host.docker.internal -e MYSQL_USER=user -e MYSQL_PASSWORD=password -e MYSQL_DATABASE=dbname node-app
```

其中，"-p 3000:3000"表示将容器的端口3000映射到宿主机的端口3000；"-p 3306:3306"表示将宿主机的MySQL服务端口映射到容器的端口3306；"-v /path/to/app:/app"表示将宿主机上的应用目录挂载到容器中的/app目录；"-e MYSQL_HOST=host.docker.internal -e MYSQL_USER=user -e MYSQL_PASSWORD=password -e MYSQL_DATABASE=dbname"表示设置容器中连接MySQL数据库所需的环境变量。

4. 在应用中使用host.docker.internal作为MySQL的主机地址，即可访问宿主机上的MySQL数据库。例如：

```
const mysql = require('mysql');

const connection = mysql.createConnection({
  host: 'host.docker.internal',
  user: process.env.MYSQL_USER,
  password: process.env.MYSQL_PASSWORD,
  database: process.env.MYSQL_DATABASE
});

connection.connect();
```

其中，process.env.MYSQL_USER、process.env.MYSQL_PASSWORD、process.env.MYSQL_DATABASE是容器中设置的环境变量，可以通过process.env来获取。