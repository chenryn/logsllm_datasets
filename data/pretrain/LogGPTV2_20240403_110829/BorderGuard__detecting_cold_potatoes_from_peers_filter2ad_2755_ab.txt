tent” with rp,i. Otherwise, it is impossible to tell whether the AS’s
import policy caused the consistency violation or whether the incon-
sistency was caused by a peer.
Figure 3 explains how a violation of this assumption can cause am-
biguity. In this case, the AS’s peer p advertises a route rp,1 with AS
path “1 4 3” at one border router and a route rp,2 with AS path “1 5
3” at a second border router; assume that all other route attributes are
the same. Note that these routes are consistent: λ(rp,1) = λ(rp,2),
because the AS path lengths are the same. If router 2 applied a policy
that, for example, assigned a lower local preference to routes with AS
path “1 5 3”, then router 1 could conceivably select a route rq,1 from
another peer q. We would like to be able to say that λ(rp,1) must be
worse than λ(rp,2) (i.e., that the routes are inconsistent), but we cannot
do so: it is impossible to distinguish between the case where p sends
route “1 5 3” and router 1 selects a route from q and the case where
p sends a route with a longer path length to router 1 (or does not send
any route).
Unfortunately, this assumption is occasionally violated. For these
peers and sessions, we cannot detect inconsistent advertisements from
iBGP messages alone. Nevertheless, we were still able to perform our
analysis on the vast majority of peers; we discuss our analysis further
in Section 4.
Inability to distinguish inconsistent routes from a missing route.
Because it has direct access to eBGP messages, the algorithm in Sec-
tion 2 is able to distinguish between two separate cases of inconsis-
tent advertisements: (1) when a peer sends routes with inconsistent
attributes to one or more peering points and (2) when a peer fails to
send any route for a preﬁx to one or more peering points. With ac-
cess to only the best routes from each router, however, the inference
algorithm cannot determine whether a border router did not select a
route from peer p because the route from p looked “worse” than other
routes learned at that router or because p did not advertise any route
at all to that router. Because the effect of either of these inconsisten-
cies is the same—in either case, the AS may be forced to do “cold
potato” routing—it is not crucial that the inference algorithm be able
to distinguish between these two cases.
Arbitrary path selection tiebreaking. The BGP decision process
may break ties between two routes r1 and r2 for which λ(r1) = λ(r2)
arbitrarily (e.g., based on the router ID of the router from which the
route was learned or on which route was learned ﬁrst). As a result, the
inference algorithm may not be able to detect whether a given peer p
advertised consistent routes to a destination if λ(bi) = λ(bj) but bi and
215Peer AS "p"
rp,u =
−1
iI
(
)bi
i
b
i
rp,v
j
bj
Monitoring Point
Figure 4: Applying the BorderGuard consistency assertion
bj are learned from two different peers, p and q. For example, suppose
that λ(rp,u) = λ(rq,u) = λ(rp,v), but the tiebreaking stage at router
i selects the route from peer q. In this case, the inference algorithm
cannot determine whether the routes advertised by p are consistent,
because λ(bi) = λ(bj): the route from router i is not strictly worse,
so a consistent rp,i could have existed, but it is impossible for the AS
to invert this based on bi and bj alone.
Arbitrary tiebreaking of equally-good eBGP-learned routes at a
given border router may occur frequently3 and it prevents the infer-
ence algorithm from determining whether a peer advertised a con-
sistent route to that router. Fortunately, this scenario can only arise
if one peer advertises a route to that router that is equally good as
the other peer’s advertisements. If tiebreaking prevents inference at a
given router, another equally good route must exist at that router, and
“cold potato” routing will not occur anyhow: the routers in the AS that
would have chosen a consistent route from that peer at that router will
instead use the alternate route (rather than sending trafﬁc to another
border router), since the route they learn from that peering is as good
as the consistent route would have been.
3.3 BorderGuard Consistency Assertion
Given the two assumptions from the previous section and access
to both the iBGP feeds from the border routers, (b1 . . . bk), and the
import policies, (I1 . . . Ik), an AS can now determine whether its peer
p is sending inconsistent advertisements at different peering points by
testing the following assertion:
for each border router i
for each router j ∈ Routers(peer(bi))
(i = 1 . . . k)
λ(bj) ≥ λ(Ij(I−1
i
(bi)))
If this condition is violated, then peer p = peer(bi) has failed to
send a consistent advertisement to router j. Figure 4 explains the in-
tuition behind this result. Ultimately, for each router i that selects a
best route rp,u, the AS must verify the following condition on routes
learned from peer p:
λ(rp,u) = λ(rp,v)
given only bi and bj. We can compute rp,j using Condition 1 to invert
the import policy at router i on bi:
λ(I−1
u (bi)) = λ(rp,v)
Finally, we can apply Condition 2 to obtain:
λ(Ij(I−1
i
(bi))) = λ(Ij(rp,v))
This condition must be true if peer(bi) is sending consistent adver-
tisements (i.e., λ(rp,u) = λ(rp,v)), based on our observation of bu,
3It is not uncommon for routes to the same destination from multiple peers
to be “equally good” in terms of local preference, AS path length, MED, and
origin type. For example, an enterprise might multihome to two or more of an
AS’s peers; both peers will advertise routes to that customer with the same path
length. In these cases, border routers will break ties arbitrarily.
even through the monitoring point may not observe Ij (rp,v). If the
monitoring point receives a bj such that λ(bj) is strictly less than
λ(Ij(I−1
(bi))) (i.e., the ranking of a consistent route from peer(bi)
after router j applies import policy), then λ(rp,u) (cid:1)= λ(rp,v). That is,
either peer p did not advertise a route to router j, or the attributes rp,v
were strictly worse than those of rp,u.
i
i
Testing this assertion in a live network is straightforward. Both the
set of k border routers and the set of routers that peer with a peer p,
Routers(p), are readily available from the router conﬁguration. Ij
and I−1
can also be determined from the import policies deﬁned in
the router conﬁgurations. peer(b) for any best route is also easy to
compute: it is simply the ﬁrst AS in the AS path attribute of the route.
Starting with a table dump of the routes, the monitor can directly test
the assertion for every bi for all preﬁxes; in steady state, detection is
more lightweight: whenever any best route bi changes, the algorithm
can simply test the assertion for that best route, rather than re-executing
the check for all (b1 . . . bk).
4. Measurement Results
In this section, we apply the algorithms from Sections 2 and 3 to
the routing and conﬁguration data of AT&T’s commercial IP back-
bone. We analyze both the eBGP data from one of AT&T’s peers—a
large tier-1 ISP—and the iBGP data from the border routers in AT&T’s
network (AS 7018) that connect to peers over the period of May 1-8,
2004. We veriﬁed that AT&T’s import policies and peering sessions
did not change during this period, and that no resets occurred on the
BGP sessions to the route monitors.
4.1 Direct eBGP Feeds from One Peer
We examine eBGP feeds from an AS with about half a dozen peer-
ing points with AT&T. The data were obtained directly from the peer’s
routers in the same PoPs as the eBGP sessions with AT&T, and some-
times from the same router that peers with AT&T. The route monitor
receiving these eBGP feeds is treated like a “customer” receiving a
complete routing table. To simulate the routes received by a peer like
AT&T, we use community strings to distinguish customer routes from
peer routes. Route advertisements that would not be advertised to a
peer are treated as withdrawals, since a BGP session with AT&T would
not advertise these routes. We identify two types of inconsistency in
the eBGP feeds: missing preﬁxes and differing AS path lengths.
Figure 5(a) shows a time series of the total number of inconsistent
preﬁxes over the eight-day period of the study. Fewer than ﬁve pre-
ﬁxes have inconsistent AS path lengths at any given time, and most
inconsistencies involve missing advertisements at one or more peering
points. Figure 5(b) shows the complementary cumulative distribution
of the duration of the inconsistencies. Most inconsistencies last less
than two minutes, suggesting that they are caused by transient events
such as routing protocol convergence. Figure 5(c) shows the over-
all duration of inconsistencies for the preﬁxes advertised by this peer.
The graph shows that 70% of the preﬁxes were never inconsistent, and
more than 97% were inconsistent less than 0.23% of the time. Still, a
few inconsistencies due to missing advertisements persisted for hours
or even days. A small number of preﬁxes were inconsistent for the
entire duration of the study, perhaps due to conﬁguration mistakes.
4.2 Indirect iBGP Feeds from Border Routers
We apply our algorithm to iBGP updates received at a monitor that
is conﬁgured as a route-reﬂector client to the AT&T border routers that
connect to peers. Our analysis excluded a small number of peers where
the import policies did not satisfy Condition 2 in Section 3.2. About
half of the inconsistencies discovered for the peer in Section 4.1 were
also discovered by the iBGP analysis; the other half of the inconsis-
tencies were obscured by arbitrary tiebreaking at the router or because
216800
700
600
500
400
300
200
100
s
e
x
i
f
e
r
p
t
n
e
i
t
s
s
n
o
c
n
i
f
o
r
e
b
m
u
n
l
a
t
o
T
0
05/01 05/02 05/03 05/04 05/05 05/06 05/07 05/08 05/09
Time
n
o
i
t
u
b
i
r
t
s
d
e
v
i
t
i
l
t
a
u
m
u
c
y
r
a
n
e
m
e
p
m
o
C
l
100
10−1
10−2
10−3
10−4
10−5
100
Missing
Path Length
102
104
Event duration (sec)
106
r
e
t
r
o
h
s
r
o
x
e
m
i
t
r
o
f
t
i
n
e
t
s
s
n
o
c
n
i
s
e
x
i
f
e
r
p
f
o
g
t
c
P
100
95
90
85
80
75
70
10−4
Missing
Path Length
10−2
100
Percentage of time
102
(a) Inconsistency over time