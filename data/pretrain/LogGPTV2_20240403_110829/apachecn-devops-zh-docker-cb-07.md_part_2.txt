stonewall
rw=randrw
rwmixread=70
bs=4K
iodepth=32
numjobs=8
runtime=60
```
This recipe is specific to Linux; it may work on Docker for Mac or Windows with some minor changes.
使用前面的作业文件，我们可以在 16 GB 的文件上使用 libaio 驱动程序在具有 4K 块大小的`/ferrari/fio-test-file`上进行随机直接 IO。输入/输出深度为 32，并行作业数为 8。这是一个混合工作负载，其中 70%是读操作，30%是写操作。
# 怎么做...
请遵循以下步骤:
1.  对于裸机和虚拟机测试，您可以只运行 FIO 作业文件并收集结果:
```
 $ fio mixed.fio
```
2.  对于 Docker 测试，您可以准备如下 Docker 文件:
```
FROM ubuntu:18.04
RUN apt-get update
RUN apt-get -qq install -y fio
ADD mixed.fio /
VOLUME ["/ferrari"]
ENTRYPOINT ["fio"]
```
3.  现在，使用以下命令创建一个映像:
```
 $ docker image build -t docker_fio_perf .
```
4.  如下所示启动容器，运行基准测试并收集结果，如下图所示:
```
 $ docker container run --rm -v /ferrari:/ferrari 
 docker_fio_perf mixed.fio
```
![](img/6377103b-9e7c-428f-9aff-43074e3e9988.png)
5.  在启用了 SELinux 的 Fedora/RHEL/CentOS 上运行前面的测试时，您将获得权限被拒绝的错误。要修复此问题，请在将主机目录装入容器时重新标记主机目录，如下所示:
```
 $ docker container run --rm -v /ferrari:/ferrari:z 
    docker_fio_perf mixed.fio
```
# 它是如何工作的...
FIO 将运行作业文件中给出的工作负载，并吐出结果。
# 还有更多…
一旦收集到结果，您就可以进行结果比较。您甚至可以使用作业文件尝试不同类型的输入/输出模式，并获得所需的结果。当您查看结果时，您想要检查的几件事如下:
*   **iops** :每秒的输入输出操作数；越高越好。
    *   **带宽(bw)** :数据传输速率、比特率或吞吐量；越高越好。
*   **延迟(lat)** :从提交给内核到 IO 完成之间经过的时间，越低越好。
# 请参见
查看本章前面提到的链接中使用 FIO 在 IBM 和 VMware 中发布的磁盘基准测试结果。
# 网络性能基准测试
在容器环境中部署应用时，网络是需要考虑的关键因素之一。为了与裸机、虚拟机和容器进行性能比较，我们必须考虑如下不同的场景:
*   裸机到裸机
*   虚拟机到虚拟机
*   Docker 容器转换为具有默认网络模式(网桥)的容器
*   Docker 容器到带有主机网的容器(`--net=host`)
*   在虚拟机内部与外部世界一起运行的 Docker 容器
在上述任何一种情况下，我们都可以选择两个端点来进行基准测试。我们可以使用 nut CP([http://www.nuttcp.net](http://www.nuttcp.net))和 netperf([https://github.com/HewlettPackard/netperf](https://github.com/HewlettPackard/netperf))等工具分别测量网络带宽和请求/响应。
# 准备好
确保两个端点可以相互连接，并且安装了必要的软件包/软件。在 Ubuntu 上，您可以使用以下命令安装 nuttcp 和 netperf:
```
$ sudo apt-get install -y nuttcp netperf
```
# 怎么做…
要使用 nuttcp 测量网络带宽，请执行以下步骤:
1.  在一个端点上启动 nuttcp 服务器:
```
 $ nuttcp -S
```
2.  使用以下命令测量客户端的传输吞吐量(客户端到服务器)，并参考下面的截图:
```
 $ nuttcp -t 
```
![](img/add6ee85-2fcd-4a0c-8f57-60d8e2c15d0b.png)
3.  使用以下命令测量客户端(服务器到客户端)上的接收器吞吐量，并参考下面的屏幕截图:
```
 $ nuttcp -r 
```
![](img/bbb612f6-06ea-4848-9580-1ece60b1dd68.png)
4.  使用 netperf 运行请求/响应基准测试；执行以下步骤:
    *   从一个端点开始`netserver`:
```
 $ netserver
```
`netserver` starts up automatically on install. If `netserver` is already running and you run this command, you might get an error like Unable to start `netserver` with  `IN(6)ADDR_ANY` port `12865` and family `AF_UNSPEC`. That is fine, it just means it is already running. To confirm it is running, you can run use `ps -ef | grep netserver`.
*   从另一个端点连接到服务器并运行请求/响应测试，请参考以下截图中的输出:
    *   对于 TCP:
```
 $ netperf  -H 172.17.0.6 -t TCP_RR 
```
![](img/3e28b0f0-4361-4554-830d-d42027e4cbc1.png)
*   对于 UDP:
```
 $ netperf  -H 172.17.0.6 -t UDP_RR
```
![](img/a0ad49ba-25f1-4db8-8b21-d86986e8d532.png)
# 它是如何工作的…
在前面提到的两种情况下，一个端点成为客户端，并将请求发送到另一个端点上的服务器。
# 还有更多…
我们可以收集不同场景的基准测试结果并进行比较。`netperf`也可用于吞吐量测试。
# 请参见
查看本章前面提到的链接中由 IBM 和 VMware 发布的网络基准测试结果。
# 使用统计功能获取容器资源使用情况
Docker 有一个特性，可以轻松获取它所管理的容器的资源使用情况。下面的食谱告诉你如何使用它。
# 准备好
您将需要一个可以通过 Docker 客户端访问的 Docker 主机。另外，启动一些容器来获取一些统计数据。
# 怎么做...
请遵循以下步骤:
1.  运行以下命令从一个或多个容器中获取统计信息:
```
 $ docker stats [OPTIONS] [CONTAINERS]
```
例如，如果我们有两个名为 some-mysql 和 backstabbing_turing 的容器，那么运行以下命令来获取统计信息，如下图所示:
```
 $ docker stats some-mysql backstabbing_turing
```
![](img/c7fde757-9b16-4262-aff1-77985cbe5bda.png)
# 它是如何工作的...
Docker 守护程序从`cgroups`获取资源信息，并通过 API 为其提供服务。
# 请参见
参考 https://docs.docker.com/engine/reference/commandline/stats/的 Docker 统计文档。
# 设置性能监控
我们有 SNMP、Nagios 等工具来监控裸机、虚拟机性能。同样，也有一些工具/插件可以用来监控容器性能，比如 cAdvisor([https://github.com/google/cadvisor](https://github.com/google/cadvisor))和 Prometheus([https://Prometheus . io](https://prometheus.io))。在这个食谱中，让我们看看如何配置 cAdvisor。
# 准备好
执行以下操作来设置 cAdvisor:
*   运行 cAdvisor 最简单的方法是运行其`docker container`，这可以通过以下命令来完成:
```
$ sudo docker container run \
 --volume=/:/rootfs:ro \
 --volume=/var/run:/var/run:rw \
 --volume=/sys:/sys:ro \
 --volume=/var/lib/docker/:/var/lib/docker:ro \
 --publish=8080:8080 \
 --detach=true \
 --name=cadvisor \
 google/cadvisor:latest
```
*   如果您想在 Docker 之外运行 cAdvisor，那么请按照 cAdvisor 主页上给出的说明操作:[https://github . com/Google/cAdvisor/blob/master/docs/running . MD # standalone](https://github.com/google/cadvisor/blob/master/docs/running.md#standalone)。
# 怎么做...
容器启动后，将浏览器指向`http://localhost:8080`。您将首先获得主机的 CPU、内存使用情况和其他信息的图表。然后，通过点击 Docker Containers 链接，您将在 Subcontainers 部分下获得机器上运行的容器的 URL。如果您单击其中的任何一个，您将看到相应容器的资源使用信息。下面的截图显示了一个这样的容器:
![](img/47d7db1c-55ec-411c-bf19-a7deb19e2526.png)
# 它是如何工作的...
使用`docker run`命令，我们已经以只读模式从主机装载了几个卷。cAdvisor 将从这些文件中读取相关信息，例如容器的 Cgroup 详细信息，并以图形方式显示它们。
# 还有更多…
cAdvisor 支持将性能矩阵导出到 influx db([https://www.influxdata.com](https://www.influxdata.com))。
# 请参见
你可以从 Docker 网站的文档中的组中查看 cAdvisor 使用的矩阵:[https://docs.docker.com/config/containers/runmetrics/](https://docs.docker.com/config/containers/runmetrics/)。