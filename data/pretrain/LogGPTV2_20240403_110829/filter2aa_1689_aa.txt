IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Abusing XSLT for Practical 
Attacks 
Fernando Arnaboldi
Senior Security Consultant 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Why XSLT ? 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Why XSLT ? 
• 
XML vulnerabilities are fun. They may get you passwords. 
• 
So I read about:  
–  XML 
–  Schemas 
–  XSLT (this presentation) 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Objectives of this talk 
• 
Analyze common weakness in XSLT 
• 
Exploit implementations flaws 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Who is this talk for ? 
• 
Code reviewers 
• 
Developers using XML and XSLT 
• 
Anyone trying to abuse stuff 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
And why would you care ? 
• 
XSLT processors (parsers) are still affected by these flaws 
• 
These flaws may have an impact on you and your 
customers integrity and confidentiality 
• 
These flaws are using XSLT functionality. There are no 
payloads to be detected by antivirus. 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Agenda 
• 
Introduction to your target 
• 
Numbers 
• 
Random numbers 
• 
Bypass the same origin policy 
• 
Information Disclosure (and File Reading) through Errors 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Introduction 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Introduction 
• 
What this does and which software does it ? 
• 
Attack vectors 
• 
Identify target 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
What does XSLT do ? 
• 
XSLT is a language used to manipulate or transform 
documents 
• 
It receives as input an XML document 
• 
It outputs a XML, HTML, or Text document 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
XSLT Versions 
• 
There are three different XSLT versions: v1, v2 and v3 
• 
XSLT v1 the most implemented version: 
–  Because higher XSLT versions support previous versions. 
–  Because it is the only one supported by web browsers 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Which software was tested ? 
• 
Server side processors: 
–  Command line standalone processors 
–  Libraries used by programming languages 
• 
Client side processors: 
–  Web browsers 
–  XML/XSLT editors (which were not analyzed) 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Server side processors 
• 
CLI standalone processors and libraries: 
–  Libxslt (Gnome):  
•  standalone (xsltproc) 
•  Libxslt 1.1.28, Python v2.7.10, PHP v5.5.20, Perl v5.16 and Ruby v2.0.0p481 
–  Xalan (Apache) 
•  standalone (Xalan-C v1.10.0, Xalan-J v2.7.2) 
•  C++ (Xalan-C) and Java (Xalan-J) 
–  Saxon (Saxonica):  
•  Standalone (saxon) v9.6.0.6J  
•  Java, JavaScript and .NET 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Client side processors 
• 
Web browsers: 
–       Google Chrome v43.0.2357.124  
–       Safari v8.0.6  
–       Firefox v38.0.5  
–       Internet Explorer v11 
–       Opera v30.0 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Attack vector #1 
• 
A XML/XHTML document can use an XSLT document 
XML 
XSLT 
XSLT 
Processor 
Result 
Document 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
XSLT 
Processor 
Attack vector #2 
• 
A XML/XHTML document can reference an XSLT document 
XML 
XSLT 
Result 
Document 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
XSLT 
Processor 
Attack vector #3 
• 
A XML/XHTML document can contain an embedded XSLT 
document 
XML / 
XHTML 
& 
XSLT 
Result 
Document 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Who’s your target ? 
• 
XSLT processors have specific properties: 
• 
Web browsers also have JavaScript properties: 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Version disclosure summary 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Numbers 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Numbers 
• 
Present in client and server side processors 
• 
Real numbers will introduce errors 
• 
Integers will also do that ! 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
How it feels when using numbers in XSLT 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Calculations with floating point numbers 
• 
Define a stylesheet and solve a simple calculation 
“God is real, unless declared integer” (Anonymous) 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Sample outputs 
• 
0.2 + 0.1 – 0.3?  
–  2 processors said it is 0 (Opera and Chrome) 
–  Firefox, Safari, IE, and all server side processors said it is 
0.00000000000000005551115123125783 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Floating point accuracy 
xsl:vendor	
output	
server	
xalan-­‐c	
  (apache)	
   Apache	
  So7ware	
  Founda;on	
  0.00000000000000005551115123125783	
xalan-­‐j	
  (apache)	
   Apache	
  So7ware	
  Founda;on	
  0.00000000000000005551115123125783	
saxon	
Saxonica	
5.551115123125783E-­‐17	
xsltproc	
libxslt	
5.551115123125783E-­‐17	
php	
libxslt	
5.551115123125783E-­‐17	
python	
libxslt	
5.551115123125783E-­‐17	
perl	
libxslt	
5.551115123125783E-­‐17	
ruby	
libxslt	
5.551115123125783E-­‐17	
client	
safari	
libxslt	
5.551115123125783E-­‐17	
opera	
libxslt	
0	
chrome	
libxslt	
0	
ﬁrefox	
Transformiix	
5.551115123125783E-­‐17	
internet	
  explorer	
  Microso7	
5.551115123125783E-­‐17	
• 
TL;DR. floating point numbers introduce errors 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
What can we do with these errors ? 
• 
Loss of precision is a common error in all programming 
languages, not just XSLT. 
• 
Floats will not notice if certain decimals are missing. 
• 
Demo ! 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Profit with loss of precision on floats 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Let’s talk about integers 
• 
Define an XML with 10 numbers (5 are in exponential 
notation and 5 are not): 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Integer accuracy 
• 
Print the original XML value and the XSLT representation 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Integer accuracy (cont’d) 
• 
Saxon: this is what you want to see 
1e22: 10,000,000,000,000,000,000,000 
1e23: 100,000,000,000,000,000,000,000 
1e24: 1,000,000,000,000,000,000,000,000 
1e25: 10,000,000,000,000,000,000,000,000 
1e26: 100,000,000,000,000,000,000,000,000 
10000000000000000000000: 10,000,000,000,000,000,000,000 
100000000000000000000000: 100,000,000,000,000,000,000,000 
1000000000000000000000000: 1,000,000,000,000,000,000,000,000 
10000000000000000000000000: 10,000,000,000,000,000,000,000,000 
100000000000000000000000000: 100,000,000,000,000,000,000,000,000 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Integer accuracy (cont’d) 
• 
Internet Explorer and Firefox are good at this ! 
1e22: NaN 
1e23: NaN 
1e24: NaN 
1e25: NaN 
1e26: NaN 
10000000000000000000000: 10,000,000,000,000,000,000,000 
100000000000000000000000: 100,000,000,000,000,000,000,000 
1000000000000000000000000: 1,000,000,000,000,000,000,000,000 
10000000000000000000000000: 10,000,000,000,000,000,000,000,000 
100000000000000000000000000: 100,000,000,000,000,000,000,000,000 
Not being able to represent an exponential 
number is not a flaw.  
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Integer accuracy (cont’d) 
• 
Libxslt processors (Xsltproc, Php, Perl, Ruby, Python, 
Safari, Chrome and Opera) produce the following result: 
1e22: 10,000,000,000,000,000,000,000 
1e23: 100,000,000,000,000,000,000,002 
1e24: 1,000,000,000,000,000,000,000,024 
1e25: 10,000,000,000,000,000,000,000,824 
1e26: 100,000,000,000,000,000,000,008,244 
10000000000000000000000: 10,000,000,000,000,000,000,000 
100000000000000000000000: 100,000,000,000,000,000,000,002 
1000000000000000000000000: 1,000,000,000,000,000,000,000,024 
10000000000000000000000000: 10,000,000,000,000,000,000,000,266 
100000000000000000000000000: 100,000,000,000,000,000,000,002,660 
“False knowledge is more 
dangerous than ignorance” 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Integer accuracy (cont’d) 
• 
Xalan for Java –almost– got it right 
1e22: NaN 
1e23: NaN 
1e24: NaN 
1e25: NaN 
1e26: NaN 
10000000000000000000000: 10,000,000,000,000,000,000,000 
100000000000000000000000: 99,999,999,999,999,990,000,000 
1000000000000000000000000: 1,000,000,000,000,000,000,000,000 
10000000000000000000000000: 10,000,000,000,000,000,000,000,000 
100000000000000000000000000: 100,000,000,000,000,000,000,000,000 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Integer accuracy (cont’d) 
• 
Xalan for C just doesn’t care 
1e22: NaN 
1e23: NaN 
1e24: NaN 
1e25: NaN 
1e26: NaN 
10000000000000000000000: 10000000000000000000000 
100000000000000000000000: 99999999999999991611392 
1000000000000000000000000: 999999999999999983222784 
10000000000000000000000000: 10000000000000000905969664 
100000000000000000000000000: 100000000000000004764729344 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Integer accuracy (cont’d) 
• 
There is a justification for this behavior. A number can 
have any double-precision 64-bit format IEEE 754 
value.  
• 
Implementations adopted different solutions 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Vendor explanation 
• 
A security team explained the accuracy by: 
–  Referencing Wikipedia 
–  Referencing the XSLT v2.0 specification 
–  Referencing JavaScript 
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
Integer accuracy summary 
xsl:vendor	
result	
server	
xalan-­‐c	
  (apache)	
Apache	
  So7ware	
  Founda;on	
   error	
xalan-­‐j	
  (apache)	
Apache	
  So7ware	
  Founda;on	
   error	
saxon	
Saxonica	
ok	
xsltproc	
libxslt	
error	
php	
libxslt	
error	
python	
libxslt	
error	
perl	
libxslt	
error	
ruby	
libxslt	
error	
client	
safari	
libxslt	
error	
opera	
libxslt	
error	
chrome	
libxslt	
error	
ﬁrefox	
Transformiix	
ok	
internet	
  explorer	
Microso7	
ok	
• 
TL;DR. Integers will introduce errors.  
IOActive, Inc. Copyright ©2015.  All Rights Reserved. 
We want more than decimals ! 
• 