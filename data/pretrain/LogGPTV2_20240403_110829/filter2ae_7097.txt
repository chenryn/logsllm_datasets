# CVE-2020-7454：Libalias库中的越界访问漏洞
##### 译文声明
本文是翻译文章，文章原作者 Lucas Leong，文章来源：thezdi.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 绪论
2020年2月初，ZDI收到一份报告，报告中描述了Oracle
VirtualBox所使用的libalias数据包别名库中的越界访问漏洞。报告人是研究者Vishnu Dev
TJ，修复后分配的编号是[CVE-2020-7454](https://www.freebsd.org/security/advisories/FreeBSD-SA-20:12.libalias.asc)。分析报告时，我发现漏洞也存在于FreeBSD，本文将讨论VirtualBox和FreeBSD中的CVE-2020-7454漏洞，展示维护第三方库以及共享代码之难。
对于不熟悉libalias库的人，这里简要介绍一下。libalias是用于IP数据包[别名与解别名](https://www.kernel.org/doc/html/latest/networking/alias.html)（aliasing
and de-aliasing）的一个库，此外还用于地址伪装和NAT。既然有地址伪装和NAT的功能，就不难理解为何VirtualBox要使用这个库。不过，libalias源自FreeBSD，VirtualBox方面则维护着自己的libalias分支。不幸的是，本漏洞在两个版本上都有。它会导致FreeBSD内核模式和用户模式的越界访问。漏洞在VirtualBox
6.1.6和FreeBSD-SA-20:12中修复。
## 0x01 考察Oracle VirtualBox
以下分析基于VirtualBox 6.1.4。漏洞的根源在`AliasHandleUdpNbtNS()`函数中，该函数负责解析UDP
137端口上的NetBIOS名字服务数据包。以下是简化的相关代码：
    AliasHandleUdpNbtNS(...) 
        { 
            /* ... 略 ... */
            /* 计算UDP包数据长度 */ 
            uh = (struct udphdr *)ip_next(pip); 
            nsh = (NbtNSHeader *)udp_next(uh); 
            p = (u_char *) (nsh + 1); 
            pmax = (char *)uh + ntohs(uh->uh_ulen); /* ancount) != 0) { 
                p = AliasHandleResource( 
                    ntohs(nsh->ancount), 
                    (NBTNsResource *) p, 
                    pmax, 
                    &nbtarg 
                    ); 
            } 
            /* ... 略 ... */
        } 
    AliasHandleResource(..., char *pmax, ...) 
        { 
            /* ... 略 ... */
                switch (ntohs(q->type)) { 
                case RR_TYPE_NB: 
                    q = (NBTNsResource *) AliasHandleResourceNB( 
                        q, 
                        pmax, 
                        nbtarg 
                        ); 
                    break; 
            /* ... 略 ... */ 
        }
在上面代码的(1)处，`uh_ulen`是UDP首部长度字段，是从不可信的客户机发来的，其最大值为0xFFFF。如果把uh_ulen的值设得很大，攻击者就可以产生过大的`pmax`值。而后，如果UDP包中含有应答资源记录（Answer
Resource Records），且类型为NetBIOS通用服务（NetBIOS General
Service），则执行会进入`theAliasHandleResourceNB()`函数：
    AliasHandleResourceNB(..., char *pmax, ...) 
    { 
        /* ... 略 ... */
        while (nb != NULL && bcount != 0) { 
            if ((char *)(nb + 1) > pmax) { /* oldaddr, &nb->addr, sizeof(struct in_addr))) { /* addr = nbtarg->newaddr; /* uh_ulen); /* data_type) == 101) 
            /* Find and change our address */ 
            for (i = 0; (char *)(ci + 1) client_count; i++, ci++) 
            if (ci->address == (u_int32_t) alias_addr.s_addr) { /* address = (u_int32_t) original_addr.s_addr; /* <--- OOBW */
                break; 
            } 
        } 
    }
然而，这个漏洞不存在于VirtualBox中，所以对FreeBSD的[补丁](https://www.freebsd.org/security/advisories/FreeBSD-SA-20:12.libalias.asc)和VirtualBox的补丁会有所不同。在`UdpAliasIn()`和`UdpAliasOut()`中都加入了验证，这里是处理UDP包的合适的层次，这样就把任何包含这种漏洞的协议都修补了。
## 0x03 总结
这次案例分析展示了维护第三方库以及共享代码何其之难。即使源代码打了补丁或者更新了，这些改动还必须反映到上游产品之中。就算你和第三方的代码同步了，共享代码里的一个漏洞反而会有双倍的影响，因为使用共享代码的双方都受到影响。Oracle
VirtualBox在用户和安全研究者中越来越受欢迎。再次感谢Vishnu Dev
TJ报告此漏洞和其他VirtualBox漏洞。我们期望在未来收到他的更多报告。