accessible. The switch gate ﬁrst exposes the SKEE address
space and then jumps to SKEE. Since both SKEE and the
Figure 3.
An example of address Space Separation on ARMv7. The
vertical arrows show the virtual memory range translated via the corresponding
translation table base register. The dashed lines show the memory range that
is not addressable via the corresponding translation table base register.
the same privilege level,
kernel run at
there is no single
point of entry or hardware control to do the switching in
one instruction. Instead, a sequence of instructions is used
to perform this function. SKEE guarantees that attempts to
manipulate this sequence of instructions will not expose its
address space to the kernel.
A potentially compromised kernel can attempt to attack the
switch gate in two ways: 1) interrupting the gate’s execution
sequence or 2) jumping to the middle of this sequence. SKEE
guarantees that these attacks cannot return execution back to
the kernel while SKEE’s memory is accessible.
Deterministic Execution Sequence: Although the switch gate
is accessible to the kernel, it does not trust the system state
or any input from the kernel. Hence, its execution sequence
is deterministic in the sense that it has the same behavior
regardless of the current system state and input parameters.
Exclusive Access to Switching Functions: The switch gate is
the only entry point to SKEE. It relies on instructions that are
restricted to execute anywhere else in the kernel.
1) Secure Switching on 32-bit ARMv7: ARMv7 active
memory translation tables are deﬁned by the translation table
base registers TTBR0 and TTBR1.
To switch between two different address spaces, the cor-
responding translation table base register has to be updated
accordingly. This update can only be done by an MCR instruc-
tion that moves the value of a general purpose resister (GPR)
to either TTBR0 or TTBR1. If the switch gate exposes a single
instance of such MCR instructions, then a compromised kernel
can compromise the isolation by creating a malicious set of
page tables, loading the base address of these tables to the
general purpose register, and jump to that MCR instruction to
have an unrestricted address space.
To solve this challenge, the switch gate does not include
instructions that update either TTBR0 or TTBR1. Instead,
it relies on changing the active translation table register by
updating the TTBCR.N ﬁeld. The basic idea is that any non-
zero value that gets loaded into TTBCR.N will lead to the
same system state. Therefore, switching is always deterministic
6
  an immediate branch instruction (i.e. a one that does not rely
on registers) is used on Step 4. Otherwise, the kernel would
be able to jump to any instruction in the SKEE code base.
Due to the unique use of the TTBCR, the MCR instruction
in step 2 yields a deterministic result regardless of the value
loaded to the GPR. The effective ﬁeld of this register is
TTBCR.N, which can be loaded by 8 different values. Nev-
ertheless, all non-zero values of TTBCR.N will switch to the
SKEE address space and deactivate the kernel address space.
As shown in Figure 3, loading TTBCR.N with the value 1
makes the address range above 0x8000 0000 (2GB) translated
through TTBR1. If the kernel loads this ﬁeld with another
non-zero value, it will only extend the range of the memory
translated by TTBR1 and hence cause no threat to the isolation
scheme. If TTBCR.N is loaded with 0, then TTBR1 will not
be used and the SKEE address space will not be exposed.
In all cases, the memory range below 0x8000 0000 (2GB),
which is always translated using TTBR0, is mapped with the
PXN restriction. Therefore, this memory range does not have
to be trusted since it cannot run in the privileged mode or
access the SKEE privileged memory area.
TTBCR has three other ﬁelds: TTBCR.PD0, TTBCR.PD1,
and TTBCR.EAE. The ﬁrst two have no effect on the protec-
tion. They can only prohibit translation table walks. The last
ﬁeld switches between the long and the short descriptor address
formats. If the wrong value is put into this ﬁeld, the system is
going to crash due to the wrong format of translation tables.
Hence, a wrong value in any of these ﬁelds can only affect the
availability of SKEE, but it does not threaten its protection.
Second, the gate execution is atomic. The control ﬂow
cannot change because no branch or return instructions exist
until switching is complete. Nevertheless, an attacker can jump
to any step in the sequence above. The one interesting step to
skip is step 1 as this will not disable interrupts. Skipping step 1
will allow the kernel to set interrupts, such as watchdog bark,
to be triggered at any of the following steps. If an interrupt is
triggered between steps 2 and 3, the execution will return to
the kernel while the SKEE address space is exposed. Although
the kernel translation tables will not be in use, the kernel code
can still execute at this point relying on existing TLB entries.
To resolve this issue, a security check is added to interrupt
handlers of the system to test
the value of TTBCR.N. If
TTBCR.N has a non-zero value, then this attack scenario is
detected and the system will be stalled to prevent further
malicious execution. After step 3, interrupts will only cause
the system to stall because the handler, which is part of the
kernel code, will be located in non-executable memory. An
adversary can neither change the code nor the location of
interrupt handlers because SKEE restricts the kernel access to
the Vector Base Address Register (VBAR). VBAR will always
point to veriﬁed read-only kernel code.
Figure 4. SKEE Switch Gate on ARMv7
even if the kernel attempts to maliciously modify the general
purpose registers before jumping to the switch gate.
Figure 3 shows on overview of address space separation on
the 32-bit ARMv7 architecture. SKEE enforces two rules on
the OS kernel: 1) The kernel only uses TTBR0 to map the OS
memory, while TTBR1 is dedicated to SKEE, and 2) the virtual
memory address range smaller than 0x8000 0000 (2GB) is
assigned to user space applications restricted by the Privileged
Execute Never (PXN) memory translation ﬂag.
Given these two rules are enforced; the switch gate only
needs to modify TTBCR.N to switch to and from SKEE.
When switching to SKEE, TTBCR.N is set to a non-zero
value to force translation of all virtual addresses larger than
0x8000 0000 to reference TTBR1 instead of TTBR0. Since
both the kernel and SKEE lie in this range, this means that only
SKEE address space will be mapped and the kernel address
space will be unmapped. Resetting TTBCR.N back to 0 will
force translation of the entire address space to use TTBR0.
Hence, the SKEE address space, which is only mapped through
TTBR1, will be hidden from the kernel.
Figure 4 shows the switch gate on ARM v7. The code of
the gate works as follow:
1)
2)
3)
4)
Lines 2-5: Disable interrupts.
Lines 7-10: Load TTBCR with a non-zero value
to enable TTBR1 to be used for translating virtual
memory above address 0x8000 0000 (2GB).
Lines 12 and 13: Invalidate the TLB so that the new
memory translation takes effect.
Line 15: Jumps to SKEE after the isolated environ-
ment is activated.
This switch gate is atomic, deterministic and exclusive;
hence it guarantees all three SKEE security requirements.
Switching to SKEE is exclusive to the switch gate because
it has the only executable opcode that can modify TTBCR.
First, the gate execution is deterministic. Steps 1, 3, and 4
do not rely on memory or register values. Hence, the kernel
cannot alter the results of their execution. It is worth noting
that the addressing layout has to be carefully selected so that
Figure 4 also shows the exit gate from SKEE to the kernel.
It executes the same operations, in almost reverse order, so that
execution only goes back to the kernel after the SKEE address
space is locked down.
7
  Figure 5. SKEE Entry Gate on ARMv8
The exit gate is part of the switch gate page, which is
accessible to the kernel. In line 21, the exit gate exposes
another instruction that writes TTBCR to the kernel. This
instruction is protected the same way as the entry gate. If the
kernel directly jumps to this instruction to enable the SKEE
address space, the following TLB invalidation will cause the
kernel space to be evicted from the TLB and loose execution
permission. Hence, the system will fail when it tries to return
back to the kernel in line 30. Intuitively, the switch gate is
required to use an immediate branch instruction in line 30 to
guarantee that the system will be stalled rather than branching
to random instructions in the SKEE code base. Moreover, if an
interrupt is triggered right after the TTBCR write and before
the TLB invalidation, then execution will be stalled by the
check on the interrupt handler as discussed previously.
2) SKEE Secure Switching on 64-bit ARMv8: TTBR0 and
TTBR1 are used to map different virtual address ranges on 64-
bit ARMv8. TTBR1 is designated for kernel addressing and
TTBR0 is designated for user space addressing. Restricting the
OS to use one translation table base register and leave the other
to SKEE requires considerable modiﬁcations to the OS, which
will negatively impact SKEE’s portability.
To solve this problem, SKEE shares TTBR1 with the
kernel. Therefore, switching between the two different address
spaces requires the value of TTBR1 to be modiﬁed. This is
done by the MSR instruction, which moves the value of a
general purpose register to a special register, such as TTBR1.
As mentioned previously, allowing the kernel to change the
value of the translation table base registers using a general
purpose register does not guarantee deterministic execution.
To solve this challenge, the switch gate uses a special MSR
encoding to guarantee deterministic change of TTBR1. This
special encoding relies on the Zero register (XZR), which is a
special register that is always read as 0.
On ARMv8, TTBR1 has two ﬁelds: BADDR and ASID.
Moving XZR to TTBR1 will set both ﬁelds to 0. Setting
BADDR to 0 means that the active memory translation tables
are based at physical address 0x0. As mentioned in Section III,
SKEE requires the presence of this physical address to support
ARMv8 platforms. If address 0x0 is not part of the physical
memory layout available to the OS, then it can be virtualized
using S2 translation tables as explained in Section III. The
physical page at address 0x0 is used to host the memory
Figure 6. SKEE Exit Gate on ARMv8
translation tables of the SKEE address space and will not be
accessible to the kernel’s address space.
Figure 5 shows the entry path of the switch gate on ARM
v8. The code of the gate works as follow:
1)
2)
3)
4)
Lines 2-4: Disable Interrupts.
Lines 6-10: Save the kernel’s TTBR1 value and load
TTBR1 with 0 using XZR.
Lines 12 and 13: Invalidate the TLB so that the new
memory translation takes effect.
Lines 15 and 16: Jump to SKEE after the isolated
environment is activated.
This switch gate is atomic, deterministic and exclusive;
hence it guarantees all three SKEE security requirements.
First, the gate is guaranteed to be deterministic because it
absolutely relies on no memory or register values. In particular,
the write to TTBR1 uses XZR, which cannot be modiﬁed by
the kernel. Hence, TTBR1 will always point to address 0x0.
Second, the gate execution is guaranteed to be atomic using
a similar technique to the one used for ARMv7’s gate. If an
interrupt is received while TTBR1 points to address 0x0, then it
means that a compromised kernel skipped step 1 of the switch
gate and the system will be stalled.
Finally, switching to SKEE is exclusive to the switch gate
because it has the only executable opcode that can modify
TTBR1. Nevertheless, there is a key challenge to meet this
objective; the switch gate is required to restore the TTBR1
value upon exiting from SKEE to the kernel. This step requires
the presence of the executable opcode of an MSR instruction
that writes a non-zero value to TTBR1. As mentioned previ-
ously, if this instruction is exposed to the kernel, then it can
compromise SKEE’s isolation.
SKEE solves this problem using a novel technique that
hides the exit gate before execution jumps to the kernel. This
is achieved by placing the instruction that restores TTBR1 at
the end of a physical memory page that belongs to the isolated
environment. This page is never exposed to the kernel. The
following memory page, which is accessible to both SKEE
and the kernel, is responsible for restoring interrupts before
returning to the kernel.
8
    Figure 6 shows the exit path of the switch gate on ARM
v8. The code of the gate works as follow:
would still need to be mapped as global memory because it is
accessible to both address spaces.
1)
2)
3)
4)
5)
Lines 2-5: Pad the memory with a sequence of no
operation (NOP) instructions so that the instruction
that restores TTBR1 is pushed to the boundary of the
isolated page.
Line 7: Conﬁrms that interrupts are masked.
Lines 9-11: Reload the kernel’s TTBR1. When this
instruction is executed, the isolated page will not be
accessible and the program counter will point to the
next page that is accessible to both environments.
Lines 15-17: Invalidate the TLB so that any cached
translation of SKEE’s address space is discarded.
Lines 20-23: Restore interrupts and return to the
kernel.
Step 1 is to add padding to so that the instruction that writes
TTBR1 is placed at the boundary of the isolated environment.
Step 2 guarantees that interrupts are disabled. Since the exit
gate is exclusively available to the trusted SKEE environment,
there is no risk that the execution ﬂow will skip this step and
directly jumps to following steps.
Step 3 switches the address space from SKEE to the kernel.
When Line 11 is fetched for execution, the program counter
will already be pointing to the next instruction, so no fault
will be caused due to the removal of the isolated page from
the accessible address space. Nevertheless, the address layout
of the exit switch gate has to be carefully crafted. If a single
instruction is placed on the isolated page after the TTBR1
value is restored, then a TLB miss may occur and the system
would lock up. This is particularly possible in multi-core
environments, where other cores can be invalidating the TLB
of all cores at any point of time.
Steps 4 and 5 are carried out at the page mapped directly
after the isolated page. This page has the same virtual address
mapping in the two address spaces. Although this page has
no instructions that change TTBR1,
the context switching
effectively takes place at this page. The execution goes to the
kernel after TLB is invalidated and interrupts are enabled.
The entire ARMv8 switching mechanism does not rely
on the value of TTBR0. Nonetheless, SKEE is responsible
for emulating writes to this register within its address space.
SKEE enforces two restrictions on TTBR0 mappings: 1) All
mappings are forced to have the PXN access restriction so
they cannot be used to control the MMU, and 2) none of the
mappings point to SKEE’s physical memory.
3) Using ASID for Faster Context Switching: Both ARMv7
and ARMv8 switch gates mostly rely on basic hardware
operations that are not expected to cause large performance
overhead. The only exception is TLB invalidation, which
forces the CPU to reload all memory translations through
page table walks. To avoid this potentially expensive step,
SKEE proposes an alternative design that relies on the ASID
to protect its address space. This solution requires two changes
to the SKEE algorithm.
First, the entire SKEE address space is to be mapped as
non-global memory. Therefore, cached TLB entries are only
available when a particular ASID is active. The switch gate
Second, a unique ASID is assigned to SKEE. This unique
ASID is never active while the kernel is running. Otherwise,
the kernel can access the SKEE address space using existing
TLB entries. Likewise, other ASIDs are not used while SKEE
is running so that cached entries of the SKEE address space
mappings do not leak to the kernel.
On ARMv8, implementing this solution is straightforward
because the ASID is assigned along with the translation table
register values. In this case, ASID 0 is assigned to SKEE,
while all other ASIDs are assigned to the OS.