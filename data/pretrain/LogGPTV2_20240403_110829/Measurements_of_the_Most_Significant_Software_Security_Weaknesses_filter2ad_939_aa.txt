title:Measurements of the Most Significant Software Security Weaknesses
author:Carlos Cardoso Galhardo and
Peter Mell and
Irena Bojanova and
Assane Gueye
Measurements of the Most Significant
Software Security Weaknesses
Carlos Cardoso Galhardo
National Institute of Standards and Technology; INMETRO
PI:EMAIL;PI:EMAIL
Irena Bojanova
National Institute of Standards and Technology
PI:EMAIL
Peter Mell
PI:EMAIL
Assane Gueye
National Institute of Standards and Technology
UADB-Senegal & Prometheus Computing
PI:EMAIL
ABSTRACT
In this work, we provide a metric to calculate the most significant
software security weaknesses as defined by an aggregate metric of
the frequency, exploitability, and impact of related vulnerabilities.
The Common Weakness Enumeration (CWE) is a well-known and
used list of software security weaknesses. The CWE community
publishes such an aggregate metric to calculate the ‘Most Danger-
ous Software Errors’. However, we find that the published equation
highly biases frequency and almost ignores exploitability and im-
pact in generating top lists of varying sizes. This is due to the
differences in the distributions of the component metric values. To
mitigate this, we linearize the frequency distribution using a double
log function. We then propose a variety of other improvements,
provide top lists of the most significant CWEs for 2019, provide
an analysis of the identified software security weaknesses, and
compare them against previously published top lists.
CCS CONCEPTS
• Security and privacy → Vulnerability management; Soft-
ware and application security.
KEYWORDS
Security, Weakness, Software Flaw, Severity
ACM Reference Format:
Carlos Cardoso Galhardo, Peter Mell, Irena Bojanova, and Assane Gu-
eye. 2020. Measurements of the Most Significant Software Security Weak-
nesses. In Annual Computer Security Applications Conference (ACSAC 2020),
December 7–11, 2020, Austin, USA. ACM, New York, NY, USA, 11 pages.
https://doi.org/10.1145/3427228.3427257
1 INTRODUCTION
In 2019, there were over 17 000 documented software vulnerabilities
[22] that enable malicious activity. While many are discovered, they
map to a relatively small set of underlying weakness types. We
posit that if the most significant of these types can be identified,
developers of programming languages, software, and security tools
Publication rights licensed to ACM. ACM acknowledges that this contribution was
authored or co-authored by an employee, contractor or affiliate of the United States
government. As such, the Government retains a nonexclusive, royalty-free right to
publish or reproduce this article, or to allow others to do so, for Government purposes
only.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427257
can focus on preventing them and thus over time diminish the
quantity and severity of newly discovered vulnerabilities.
In this work, we provide a metric to calculate the most signifi-
cant security weaknesses (MSSW) in software systems. We define
a ‘significant’ weakness as one that is both frequently occurring
among the set of publicly published vulnerabilities and results in
high severity vulnerabilities (those that are easily exploitable and
have high impact). The set of security weakness types upon which
we calculate significance comes from the Common Weakness Enu-
meration (CWE) [15]. We also leverage the Common Vulnerabilities
and Exposures (CVE) [13] repository of publicly announced vulner-
abilities, the Common Vulnerability Scoring System (CVSS) [7] to
measure the severity of vulnerabilities, and the National Vulner-
ability Database (NVD) [22] to map the CVEs to both CWEs and
CVSS scores.
In the fall of 2019, the CWE community published an equation
to calculate the ‘Top 25 Most Dangerous Software Errors’ (MDSE)
among the set of CWEs [17]. It follows the form of the common
security risk matrix combining probability and severity (e.g., [5]).
The MDSE equation claims to combine ‘the frequency that a CWE
is the root cause of a vulnerability with the projected severity’; the
equation description implies that both factors are weighed equally
(making no mention of any bias). However, we empirically find that
the equation highly biases frequency and almost ignores severity in
generating top lists of varying sizes. This is due to the equation mul-
tiplying calculated frequency and severity values together though
each has has very different distributions. Frequency distributions
have a power law like curve, while severity distributions are more
uniform. Our mitigation is to create a revised equation, named
MSSW, that adjusts the frequency distribution using a double log
function to better match it to the severity distribution. We also fix
an error in how normalization is done in the MDSE equation.
We next improve upon the data collection approach used by the
MDSE equation by leveraging published literature [12]. Lastly, we
publish top lists of the most significant CWEs for 2019, provide
an analysis of those software security weaknesses, and compare
our top lists against previously published lists. It is our hope that
our data and methodology will be adopted to focus our collective
security resources in reducing the most significant software security
weaknesses.
The rest of this work is organized as follows. Section 2 provides
background on CVE, CVSS, CWE, NVD, and the MDSE equation.
Section 3 discusses the limitations of the MDSE equation. Section 4
154ACSAC 2020, December 7–11, 2020, Austin, USA
C. Galhardo et al.
presents our MSSW equation that mitigates the previously identi-
fied limitations. Section 5 provides two lists of the most significant
CWEs at two different levels of software flaw type abstractions.
Section 6 provides a discussion and analysis of the most signifi-
cant CWEs identified. Section 7 presents related work, Section 8
discussed possible future research, and Section 9 concludes.
2 BACKGROUND
2.1 Common Vulnerabilities and Exposures
The CVEs are a large set of publicly disclosed vulnerabilities in
widely-used software. They are enumerated with a unique identifier,
described, and referenced with external advisories [13] [1].
2.2 Common Vulnerability Scoring System
CVSS ‘provides a way to capture the principal characteristics of a
vulnerability and produce a numerical score reflecting its severity’
[6]. The CVSS base score reflects the inherent risk of a vulnerability
apart from any specific environment. The base score is composed
from two sub-scores that calculate exploitability (how easy it is to
use the vulnerability in an attack) and impact (how much damage
the vulnerability can cause to an affected component).
tion is possible’,
The exploitability score is determined by the following:
• attack vector: ‘the context by which vulnerability exploita-
• attack complexity: ‘the conditions beyond the attacker’s con-
• privileges required: ‘the level of privileges an attacker must
possess before successfully exploiting the vulnerability’, and
• user interaction: a human victim must participate for the
vulnerability to be exploited.
trol that must exist in order to exploit the vulnerability’,
The impact score is determined by measuring the impact to the
confidentiality, integrity, and availability of the affected system.
Also included is a scope metric that ‘captures whether a vulnerabil-
ity in one vulnerable component impacts resources in components
beyond its security scope’. The specifics on these metrics and the
details for the three equations can be found in the CVSS version
3.1 specification at [7].
2.3 Common Weakness Enumeration
The Common Weakness Enumeration (CWE) [10] is a ‘community-
developed list of common software security weaknesses’. ‘It serves
as a common language, a measuring stick for software security
tools, and as a baseline for weakness identification, mitigation, and
prevention efforts’ [15]. It contains an enumeration, descriptions,
and references for 839 software weaknesses that are referred to as
CWEs, where each is labelled CWE-X with X being an integer.
The CWE weaknesses model has four layers of abstraction: pillar,
class, base, and variant. There is also the notion of a compound,
that associates two or more interacting or co-occurring CWEs [18].
These abstractions reflect to what extent issues are described in
terms of five dimensions: behavior, property, technology, language,
and resource. Variant weaknesses are at the most specific level of ab-
straction; they describe at least three dimensions. Base weaknesses
are more abstract than variants and more specific than classes; they
describe two to three dimensions. Class weaknesses are very ab-
stract; they describe one to two dimensions, typically not specific
about any language or technology. Pillar weaknesses are the highest
level of abstraction.
There are a set of taxonomies, called views, to help organize
the CWEs. Two prominent CWE taxonomies are the ‘Research
Concepts’ (view 1000) and ‘Development Concepts’ (view 699).
There is also a view 1003 that was made specifically to describe the
set of CVEs that contains 124 CWEs. It is called ‘CWE Weaknesses
for Simplified Mapping of Published Vulnerabilities View’.
2.4 National Vulnerability Database
The CWE effort uses the National Vulnerability Database (NVD)
[22] as a repository of data from which to calculate the MDSE
scores. The NVD contains all CVEs and for each CVE it provides
a CVSS score along with the applicable CWE(s) that describe the
weakness(es) enabling the vulnerability. For the empirical work in
this paper, we use the complete set of 17 308 CVEs published by
NVD for 2019, that were available as of 2020-03-19.
2.5 Most Dangerous Software Error Equation
The MDSE equation is designed to balance the frequency and sever-
ity in ranking the CWEs. The frequency is determined by the num-
ber of CVEs that map to a given CWE in the time period of study.
The severity is determined by the mean CVSS score for the CVEs
mapped to a given CWE. The MDSE score for a CWE is produced by
multiplying the normalized frequency by the normalized severity
and then multiplying by 100. We now describe this metric more
formally.
2.5.1 Metric for Normalized Frequency. Let I designate the set of
all CWEs and let J be the set of all CVEs.
For CWE i ∈ I, let Ni be the number of CVEs mapped to i,
defined as follows:
Ni =
j∈J
eij ,
if CVE j is mapped to CWE i,
0, otherwise.
(1)
(2)
(cid:40)1,
where
eij =
follows:
Now let Fi be the normalized frequency for CWE i, defined as
Ni − min
(Ni′)
i′∈I
(Ni′) − min
i′∈I
max
i′∈I
(Ni′) .
Fi =
(3)
2.5.2 Metric for Normalized Severity. Let J, Ni, and eij be as defined
above in Section 2.5.1. Let sj be the CVSS base score for CVE j. For
CWE i ∈ I, let Si be the mean CVSS score, defined as follows:

Si =
j∈J sjeij
Ni
.
(4)
Now let Si be the normalized severity for CWE i, defined as
follows:
Si − min
(sj)
j∈J
(sj) − min
j∈J
max
j∈J
(sj) .
Si =
(5)
155Measurements of the Most Significant Software Security Weaknesses
ACSAC 2020, December 7–11, 2020, Austin, USA
Figure 1: The Size of the Set Difference between Top Lists
from the MDSE Equation Compared to Frequency Top Lists
(red bottom line), Severity Top Lists (yellow middle line),
and the Theoretical Maximum (blue top line)
2.5.3 Most Dangerous Software Error Metric. Let MDSEi be the
MDSE score for CWE i, defined as follows:
MDSEi = Fi ∗ Si ∗ 100.
(6)
3 LIMITATIONS OF THE EQUATION
The MDSE equation was designed to and appears to combine both
frequency and severity in determining the individual scores used
to rank the CWEs. The frequency component is calculated in equa-
tion 3 and the severity component is calculated in equation 5; both
are brought together in equal proportions in equation 6 to create
the MDSE score. And both the severity and frequency are normal-
ized in equations 3 and 5 to ensure that their scales match for the
multiplication in equation 6.
However, we empirically find that the MDSE equation strongly
biases frequency over severity. To demonstrate this, we calculate
MDSE top CWE lists for all possible list sizes. While there exist 839
CWEs, the CVE data used as MDSE input is mapped only to 124
view 1003 CWEs (see section 2.3)1. Thus the maximum top list size
is 124. We also calculate top CWE lists using just the frequency
equation 3 and then just the severity equation 5. For each CWE
top list size, we perform a set difference between the MDSE top
list and the frequency top list. We then also do this between the
MDSE top list and the severity top list. The size of the set difference
between the MDSE top list and the frequency top list (for all possible
top list sizes) has a maximum difference of 3. The size of the set
difference between the MDSE top list and the severity top list (for
all possible top list sizes) has a maximum difference of 23. This is
shown graphically in Figure 1. The bottom red line represents the set
difference using frequency and the yellow middle line represents the
set difference using severity. The top blue line shows the maximal
possible set difference that could be achieved using the 124 CWEs.
1This is expected as view 1003 was designed to cover the types of vulnerabilities in
CVE.
Figure 2: CWEs Chosen (Red Triangles) and Not Chosen (Yel-
low Circles) for a MDSE Top 20 List Relative to Frequency
More qualitatively, the red line hovers close to a y-axis value
of 0 which means that for all list sizes the top list generated using
just frequency is almost identical to the top list generated using the
MDSE equation. The middle yellow line being far from the y-axis
value of 0 means that for all list sizes the top list generated using
just severity is very different from the top list generated using the
MDSE equation. Note that the yellow line shows an almost maximal
difference for top list sizes of up to 15.
3.1 Limitation 1: Distribution Differences
The MDSE equation in practice biases frequency over severity, even
though its equations treat them equally, because frequency and
severity have very different distributions. The frequency distribu-
tion has the majority of CWEs at a very low frequency and a few at
a very high frequency (somewhat resembling a power law curve).
This can be seen in Figure 2 by looking at how each CWE maps
to the x-axis (note that most of the yellow dots overlap, there are
102 yellow dots and 20 red triangles). The figure shows the MDSE
scores for each CWE and shows how (for a top list of size 20) the
top scoring chosen CWEs are exactly the most frequent CWEs. This
is not unique and occurs for many top lists (e.g., for sizes 11, 13, 15,
16, 20, 21, 32, and 38) as shown when the bottom red line is at 0 in
Figure 1. The other sizes of top lists produce graphs that are almost
identical to that in Figure 2, with at most 3 yellow circles just to the
right of the leftmost red triangles representing the chosen CWEs.
The severity distribution is more uniform within a limited range.
It can be seen in Figure 3 by looking at how the CWEs map to the
x-axis. This figure shows how the top MDSE scoring chosen CWEs
do not necessarily map to the CWEs with the highest severity. In
fact, only 1 of the top 10 most severe CWEs made the MDSE top 20
list (note that many of the yellow circles lay on top of each other).
3.2 Limitation 2: Normalization Error
Equation 5 normalizes Si based on the maximum and minimum
CVSS score found in the set of inputted CVEs. However, this does
not lead to the expected and desired normalized distribution from
156ACSAC 2020, December 7–11, 2020, Austin, USA
C. Galhardo et al.
Figure 3: CWEs Chosen (Red Triangles) and Not Chosen (Yel-
low Circles) for a MDSE Top 20 List Relative to Severity
Figure 4: Normalized Distributions of Frequency (bottom
blue line), Log of Frequency (middle yellow line), and Dou-
ble Log of Frequency (top red line).
0 to 1. For our data the range is from .28 to .97, as can be seen
from the mappings of the points onto the x-axis in Figure 3. The
reason for this is that Si has a smaller range than the maximum
and minimum CVSS score because each Si represents the mean of
the CVSS score for the CVEs that map to CWE i. This limitation,
while of less consequence than the previous, constrains the range
of Si values thus further lessening the influence that severity has
in determining a MDSE score.
4 MITIGATED EQUATION
We mitigate the limitations of the MDSE equation by replacing
equations 3, 5, and 6 with the five equations that follow:
k =
′
i =
F
′′
i =
F
′
i =
S
1
(Ni) ,
(cid:40)loge Ni ,