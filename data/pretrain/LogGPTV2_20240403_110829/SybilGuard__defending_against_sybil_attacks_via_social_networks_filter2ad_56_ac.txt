key as the new ﬁrst entry.
to its neighbor
by shifting the registry
’s public
along
.
YU et al.: SYBILGUARD: DEFENDING AGAINST SYBIL ATTACKS VIA SOCIAL NETWORKS
581
. This provides some
than the total number of entries
intuition why the number of accepted sybil nodes is properly
bounded even though the adversary may not follow the Sybil-
Guard protocol.
IV. SYBILGUARD GUARANTEES
A. Limiting the Number of Attack Edges
The effectiveness of SybilGuard relies on there being a lim-
. There are several ways the ad-
ited number of attack edges
versary might attempt to increase :
(cid:129) The malicious users establish social trust and convince
more honest users in the system to “be their friends” in
real life. But this is quite difﬁcult to do on a large scale.
(cid:129) A malicious user (Malory) who managed to convince an
honest user (Alice) to be her friend creates many sybil
nodes, and then Malory forwards to these sybil nodes her
edge key with Alice. Notice, however, that Alice only has
a single edge key corresponding to the edge between Alice
and Malory. As a result, all messages authenticated using
that edge key will be considered by Alice to come from the
same edge. Thus the number of attack edges remains un-
changed.
(cid:129) The adversary compromises a single honest node with de-
gree , making it a sybil node. Because was already con-
strained (before the node is compromised) within some
can be increased by at most some
constant by the user,
constant. On the other hand, the adversary will not be able
to create further attack edges from the node because adding
an edge to another honest user requires out-of-band veri-
ﬁcation by that user. When a user drops and then makes
new friends, it is possible for the adversary with access to
the old edge keys to “resurrect” dropped edges and hence
further increase . However, we expect such effect to be
negligible in practice and if necessary, can be prevented by
requiring out-of-band conﬁrmation when deleting edges.
(cid:129) The adversary compromises a small fraction of the nodes
excessively
in the system. This will not likely increase
due to the reasons above.
(cid:129) The adversary compromises a large fraction of the nodes
in the system. Here the system has already been subverted,
and the adversary does not even need to launch a sybil
attack. SybilGuard will not help here.
(cid:129) The adversary compromises a large number of computers
(i.e., creates a botnet), only some of which belong to the
is upper bounded by some con-
system. The increase in
stant times the number of compromised computers which
already belong to the system. The increase is not affected
by the total size of the botnet. Although acquiring a botnet
with many nodes may be relatively easy (e.g., in the black
market), acquiring a botnet containing many nodes that are
already in the system is more challenging.
In summary, SybilGuard is quite effective in limiting the number
of attack edges, as long as not too many honest users are com-
promised. Relatively speaking, SybilGuard is more effective de-
fending against malicious users than defending against compro-
mised honest users that belong to the system. This is because a
malicious user must make real friends in order to increase the
Fig. 6. Protocol for a node V of degree d to verify a node S.
whether
then checks with
present in one of
relevant. If it is present, then that route from accepts
at least a threshold of
’s public key is indeed
’s registry tables. The entry number is not
. If
(i.e.,
in the ﬁgure,
the asymptotic guarantees of the protocol do not depend on
this particular choice for . Finally, when interacting with ,
always authenticates
sent, using its private key.
’s public key). Although we have set
to sign every message
’s routes accept
by requiring
,
accepts
In all, only a constant number of messages are required for
one node to verify another.
Key revocation. A node can easily revoke its old public/pri-
vate key pair by unilaterally switching to a new public/private
key pair, and then using the new public key in its registry table
and witness table propagation. The old public key in registry and
witness tables will be overwritten by the new public key. As for
edge keys, a node can revoke an edge key unilaterally simply by
discontinuing use of the key and discarding it.
Sybil nodes. We described the protocol for the case where all
nodes behave honestly. A sybil node may not follow the pro-
tocol and may arbitrarily manipulate the registry tables and wit-
ness tables. SybilGuard is still secure against such attacks. To
understand why and obtain intuition, it helps to consider the set
of all registry table entries on all honest nodes in the system. For
simplicity, assume that all honest nodes have the same degree .
registry table
Thus, altogether the honest nodes contain
entries.
Consider a malicious node
entries in
Thus
uing this argument, we see that a single attack edge enables
to control
With attack edges and even when
number of polluted entries
entries system-wide.
, the total
smaller
approaches
is still a factor of
necting an honest node with
to
an arbitrary registry table, thus polluting the
’s registry table. Suppose
, who shifts the table downward and adds
. Clearly,
and a single attack edge con-
can propagate
entries in
next forwards the registry table to
as the ﬁrst entry.
’s registry table are polluted. Contin-
582
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 16, NO. 3, JUNE 2008
number of attack edges, while compromised honest users al-
ready have friends.
B. Designing the Length of Random Routes in Order to
Achieve SybilGuard’s Guarantees
A critical design choice in SybilGuard is
, the length of the
random routes. The value of must be sufﬁciently small to
ensure that (i) a veriﬁer’s random route remains entirely within
the honest region with high probability, and (ii) the size of sybil
groups is not excessively large. On the other hand, must be
sufﬁciently large to ensure that routes in the honest region will
intersect with high probability.
In the following, we provide some analytical assurance that
will likely satisfy the above require-
having
ments simultaneously. Our results are for random walks instead
of the random routes used in SybilGuard—considering random
walks allows us to leverage the well-established theory on such
walks. At the end of this section, we will explain how these re-
sults likely apply to random routes, which will be further con-
ﬁrmed in our later experiments.
Guarantees on honest nodes. The ﬁrst property we would
like to show is that
is likely to be sufﬁciently
large for routes from an honest veriﬁer and an honest suspect
to intersect with high probability. Such a property for random
walks has been proven [12], [13] in several other contexts, and
thus we give only a high-level review. First, we need to pro-
random walk,
vide some informal background. With a length-
clearly the distribution of the ending point of the walk depends
on the starting point. However, for connected and non-bipar-
tite graphs, the ending point distribution becomes independent
. This distribution is called
of the starting point when
the stationary distribution of the graph. The mixing time
of a
graph quantiﬁes how fast the ending point of a random walk ap-
proaches the stationary distribution. In other words, after
steps, the node on the random walk becomes roughly indepen-
dent of the starting point. If
, the graph is called
fast mixing.
steps contains
Many randomly-grown topologies are fast mixing, including
social networks (or more speciﬁcally, small-world topologies)
[10], [11]. Thus, a walk of
independent samples drawn roughly from the stationary distri-
bution. When a veriﬁer’s walk and a suspect’s walk remain in
the honest region (which we show below occurs with high prob-
independent samples from
ability), both walks draw
roughly the same distribution. It follows from the generalized
Birthday Paradox [12], [13] that they intersect with probability
. Because this claim holds for each of the veriﬁer’s walks
and each of the suspect’s walks, an honest veriﬁer accepts an
honest suspect with high probability.
and the size of each sybil group to
Guarantees on the number of Sybil nodes accepted. Re-
’s route entirely in
call from Section III-C that for a veriﬁer
the honest region, SybilGuard limits the number of sybil groups
to
sybil nodes accepted. On the other hand, a veriﬁer
’s route
that enters the sybil region falls under the control of the adver-
sary, and may not be able to bound the number of sybil nodes
intersecting that route. The following theorem bounds the prob-
ability that a random walk starting from a random honest node
, for a total of
enters the sybil region, showing that such problematic routes are
rare (given an upper bound on
and our choice for
).
bility that a length-
random honest node will ever traverse any of the
edges is upper bounded by
Theorem 1: For any connected social network, the proba-
random walk starting from a uniformly
attack
. In particular, when
, this probability is
and
.
only if at least a threshold of these routes accept
We leave the proof to our full technical report [14]. The ac-
tual likelihood, as shown in our later experiments, is much better
. We
than the above pessimistic theoretical bound of
should point out that the above theorem provides only an “av-
erage” guarantee for all honest nodes. Honest nodes that are
closer to attack edges are likely to have a larger probability of
performs
walking into the sybil region. Recall, however, that
a random route starting from each of its edges and accepts a
.
suspect
This serves to mask the misleading effects of routes extending
involves the following
into the sybil region. The parameter
trade-off: if
is too small, then may have a large probability
of having more than routes entering the sybil region; if
is too
large, then may have trouble accepting other honest nodes if
routes from enter the sybil region and if the
more than
sybil nodes prevent intersection from happening (
is the degree
). In other words, to avoid both of the above two problem-
of
atic scenarios, the number of routes entering the sybil region
. Thus, obviously, setting to
must be smaller than
will maximize the probability of avoiding the two problem-
atic scenarios, and our approach effectively becomes majority
voting. Our later simulation results show that using majority
voting gives most nodes a high probability of success. Thus, an
sybil nodes with high proba-
honest node accepts at most
bility.
Random Routes Versus Random Walks. SybilGuard uses
random routes, while the above derivations are for random
for the ﬁrst time, then
walks. If a random route enters a node
the next hop is indeed uniformly randomly chosen from all of
’s neighbors, which is exactly the same as in random walks.
simply pre-ﬂipped all
In some sense, we can imagine that
the coins it needed to ﬂip. On the other hand, a random route
differs from a random walk when the random route intersects
with itself.
Consider a random route that previously entered node
via
edge and was directed to edge
. Imagine that now the route
for a second time via edge . We consider the following
enters
two cases and explain the behavior of random routes, as com-
pared to random walks.
If
, then we have a repeated edge loop and the random
route will traverse this loop repeatedly, which clearly deviates
signiﬁcantly from the behavior of a random walk. We now pro-
vide an intuition as to why such loops are rare. Notice that the
ﬁrst edge in the route must be the ﬁrst edge that is traversed
twice. In other words, repeated edge loops can only form at the
starting node (Fig. 7). If a loop is formed, the random route must
have come back to the starting point, and the starting point must
have decided to forward the route along the ﬁrst edge. Also no-
tice that the smallest loop has three hops, otherwise it is impos-
sible for the route to traverse the same edge (in the same di-
YU et al.: SYBILGUARD: DEFENDING AGAINST SYBIL ATTACKS VIA SOCIAL NETWORKS
583
Fig. 7. A loop can form only at the starting point of a route.
rection) twice. More concretely, consider a simpliﬁed scenario
where all nodes have the same degree . At the second hop, the
route will return to the starting point with probability
. At
the third hop, if a loop is formed, the starting point must have
decided to forward the route along the same edge as the ﬁrst hop.
Thus, a repeated edge loop is formed at the third hop with prob-
. As the route proceeds, the chance of repeating the
ability
ﬁrst hop edge at the given hop will usually become smaller and
smaller. In fact, in a fast mixing graph, after a small number of
hops a random walk is equally likely to be traversing any edge
in a given hop. This provides an intuition as to why loops are
unlikely. Moreover, routes with loops can still be used, because
they do not compromise security—they simply have fewer than
distinct nodes and hence are less likely to intersect with other
routes.
If
. In other words,
, then the random route will not have formed a loop
and will pick
as the next hop. Since the routing
table is a permutation,
will be a uniformly random edge ex-
has already elimi-
cept that it cannot be
as a choice for the next hop. This introduces some small