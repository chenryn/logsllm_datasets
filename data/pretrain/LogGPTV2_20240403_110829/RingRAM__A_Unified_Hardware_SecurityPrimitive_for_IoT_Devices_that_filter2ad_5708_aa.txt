title:RingRAM: A Unified Hardware SecurityPrimitive for IoT Devices that
Gets Better with Age
author:Michael Moukarzel and
Matthew Hicks
RingRAM: A Unified Hardware Security
Primitive for IoT Devices that Gets Better
with Age
Michael Moukarzel
PI:EMAIL
Virginia Tech
Blacksburg, Virginia, USA
Matthew Hicks
PI:EMAIL
Virginia Tech
Blacksburg, Virginia, USA
ABSTRACT
As security grows in importance, system designers turn to hard-
ware support for security. Hardware’s unique properties enable
functionality and performance levels not available with software
alone. One unique property of hardware is non-determinism. Unlike
software, which is inherently deterministic (e.g., the same inputs
produce the same outputs), hardware encompasses an abundance
of non-determinism; non-determinism born out of manufacturing
and operational chaos. While hardware designers focus on hid-
ing the effects of such chaos behind voltage and clock frequency
guard bands, security practitioners embrace the chaos as a source
of randomness.
We propose a single hardware security primitive composed of
basic circuit elements that harnesses both manufacturing and op-
erational chaos to serve as the foundation for both a true random-
number generator and a physical unclonable function suitable for
deployment in resource-constrained Internet-of-Things (IoT) de-
vices. Our primitive RingRAM leverages the observation that, while
existing hardware security primitives have limitations that prevent
deployment, they can be merged to form a hardware security prim-
itive that has all of the benefits, but none of the drawbacks. We
show how RingRAM’s reliance on simple circuit elements enables
universal implementation using discrete components, on an FPGA,
and as an ASIC. We then design RingRAM tuning knobs that allow
designers to increase entropy, decrease noise, and eliminate off-chip
post-processing. We validate RingRAM, showing that it serves as
a superior true random-number generator and physical unclon-
able function—robust against aging and thermal attacks. Finally, to
show how RingRAM increases IoT system security, we provide two
Linux-based use cases on top of a RISC-V System-on-Chip.
ACM Reference Format:
Michael Moukarzel and Matthew Hicks. 2021. RingRAM: A Unified Hard-
ware Security Primitive for IoT Devices that Gets Better with Age. In
Annual Computer Security Applications Conference (ACSAC ’21), Decem-
ber 6–10, 2021, Virtual Event, USA. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3485832.3485905
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485905
1 INTRODUCTION
Random numbers are the foundation for the secure systems that
society depends on. Since all cryptographic algorithms are deter-
ministic by design, when given the same inputs, they produce the
same outputs. Thus, to prevent attackers from being able to uncov-
er/change secrets by replaying a victim’s inputs, secure systems
employ a random input (e.g., a key) to force attackers to guess
one of the inputs. With sufficient randomness, the search space of
the attacker is so large that the attacker’s expected time to guess-
ing correctly is longer than the Earth’s lifespan, making an attack
infeasible.
Broadly, modern cryptosystems employ two classes of random
numbers: long-life keys that are pre-shared and ephemeral keys
that are generated at run time. While both key classes are useful
for providing confidentiality and integrity guarantees, pre-shared
keys have an authentication component: having access to the key
implies that you are a trusted entity; the fewer entities that have
access to the same pre-shared key, the stronger notion of authenti-
cation provided. For symmetric cryptography, device-specific keys
provide the strongest form of authentication, where only the device
and its producer know the key. Historically, device keys were as-
signed pre-deployment and stored in a tamper-proof, non-volatile,
memory inside the chip. Recent advances in harnessing analog-
domain hardware chaos that results in non-deterministic cross-
chip variation have replaced key storage with key generation via
a Physical Unclonable Function (PUF). Ephemeral keys are gener-
ated using key agreement protocols, which rely on spontaneous
generation of random numbers via a True Random Number Gener-
ator (TRNG). TRNGs also harness analog-domain chaos, but extract
non-deterministic variation due to operational chaos to generate
key material.
Internet-of-Things (IoT) devices are increasingly using PUFs and
TRNGs. IoT devices are ubiquitous and often exposed to untrusted
individuals, meaning they require the device identification provided
by a PUF. At the same time, many medical, defense, safety-critical,
and infrastructure systems make heavy use of IoT devices, meaning
they are security-critical and require keys provided by a TRNG.
But, by their nature, IoT devices must be small, cheap, and low
power; such power and area constraints demand a unified hardware
security primitive to fulfill both PUF and TRNG demands. An added
benefit of a unified hardware security primitive is tamper evidence:
validating PUF integrity also validates TRNG integrity.
Given the importance of PUFs and TRNGs to current IoT systems
and the smart dust of the future, researchers attempt to provide a so-
lution. The two most common unified hardware security primitives
are based on Ring Oscillators (ROs) [33] and Static Random-Access
Memory (SRAM) [21]. ROs send a signal around a ring of logic
660ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Michael Moukarzel and Matthew Hicks
gates and using jitter as a source of chaos, while SRAM leverages
a hardware-level race condition between two cross-coupled in-
verters as a source of chaos. As, detailed in §2, there are many
tradeoffs between RO- and SRAM-based PUFs and TRNGs, but in
practice, SRAM-based hardware security primitives are more com-
mon [15, 22]. Unfortunately, SRAM’s power-cycle-limited supply
of entropy makes it ill-suited for use in a TRNG and its dual-use
nature, while a way to reduce hardware overhead, is an attack vec-
tor [27, 30, 35, 47]. Thus, there is no unified hardware security
primitive capable of generating high rate and unbounded en-
tropy, while minimizing hardware area and power, and is ro-
bust against attack.
We observe that while it may seem that ROs and SRAM are
completely different, they represent extreme design points in a
continuum of hardware security primitive designs. We leverage
this insight to create RingRAM, a new unified hardware secu-
rity primitive that combines the best aspects and avoids the
drawbacks of both ROs and SRAM. RingRAM exposes interme-
diate design points on the continuum, allowing system designers
to balance PUF and TRNG utility.
• RingRAM exposes a tuning knob to designers that provides
control over where in the continuum between PUF-oriented
and TRNG-oriented a RingRAM implementation lies (§4).
• We expose knobs that reduce PUF noise and increase TRNG
entropy rate (§5) as well as leverage device aging to increase
both PUF and TRNG utility over time (§6).
• We implement RingRAM in a RISC-V-based SoC that
runs Linux. Using this prototype, we demonstrate how
RingRAM increases system security—without performance
degradation—using openssl benchmarks (§10).
2 BACKGROUND
Physical Unclonable Functions (PUFs) and True Random Number
Generators (TRNGs) are essential building blocks for the crypto-
graphic systems that we all depend on. PUFs provide a means for
strong device authentication and serve as a seed for key genera-
tion. TRNGs provide the ephemeral keys and nonces required to
maintain data confidentiality and integrity. While security depends
on PUFs and TRNGs, PUFs and TRNGs in-turn depend on non-
determinism; note that this is different from a software notion of
non-determinism, as even the most complex software is inherently
deterministic. True non-determinism comes from chaos inherent
to natural processes; in this case, variation in hardware’s analog-
domain. While hardware designers employ design practices and
operational guard bands to mask analog-domain variation (e.g.,
voltage fluctuations) to create hardware that provides deterministic
execution, PUFs and TRNGs must expose, enhance, and extract
analog-domain variation.
The challenge is that not all variation is helpful for security.
There are two types of variation: systematic and chaotic. Sys-
tematic variation is predictable, hence not useful, whereas chaos-
induced variation is where the randomness lies. Thus, a hardware
security primitive must eliminate systematic variation and capture
chaotic variation. In addition, PUFs and TRNGs require mutually-
exclusive types of variation. In this section, we provide an overview
of PUFs and TRNGs, along with a description of the most popular
unified hardware security primitives that provide PUF and TRNG
bits.
2.1 PUF
Strong device authentication (either post-deployment or while
traversing the supply chain) and key generation for cryptographic
protocols require a device-specific, on-chip key. This device-specific
key must be robust against an attacker with physical access to the
device, preventing them from exfiltrating it or duplicating it in an-
other device. The traditional approach is to store the key in on-chip
non-volatile memory (e.g., in Electrically-Erasable Programmable
Read-Only Memory (EEPROM) or battery-backed Static Random-
Access Memory (SRAM)) before deployment. Protecting against
attackers with physical access requires tamper protection mecha-
nisms, which increases complexity, cost, area, and power.
PUFs are a simple, low-cost, and naturally tamper resistant al-
ternative to key storage: instead of assigning a key to a device,
PUFs embody key derivation. PUFs derive a device-specific key
(i.e., a fingerprint) by harnessing manufacturing-time chaos
that results in analog-domain hardware variation within
RingRAM is composed of two cross-coupled, equal-length chains
of an odd number of inverting gates (§3). When disabled, the two
chains are effectively disconnected from each other. When enabled,
the two chains race to send their value to the opposing chain;
the chain that is relatively faster, determines the value for the
cell. Relatively-different-speed chains are usable for PUFs, where
relatively-similar-speed chains are usable for TRNGs (§8). The
longer the chains, the more relatively similar the propagation delay
through the chains, allowing a designer to control the PUF/TRNG
composition of a set of RingRAM cells (§4).
To quantify the efficacy of RingRAM as a foundation for PUFs
and TRNGs and to compare against RO- and SRAM-based primi-
tives, we implement RingRAM on a Xilinx Artix-7 FPGA (§7). We
develop three RingRAM implementations: FPGA, ASIC, and dis-
crete. We evaluate 1600 unique RingRAM cell sites, across 5
devices, over a 40° C range. Experiments validate that RingRAM
provides utility as the foundation for both PUFs and TRNGs and
it combines the best aspects of RO- and SRAM-based primitives:
RingRAM provides unbounded entropy like ROs, has low
hardware area cost like SRAM, has a higher throughput of
entropy than either, and is more secure than either (§8). To
expose the middle of the PUF/TRNG continuum, we show how
designers can extend RingRAM’s design to create implementations
that systematically target mid-points on the continuum (§4). We
also show how small amounts of hardware can be added to reduce
software’s post-processing burden—clarifying the PUF and TRNG
abstraction provided by hardware (§5) and to increase RingRAM’s
performance and security (§6). Lastly, we show how system design-
ers can incorporate RingRAM into a System-on-Chip to improve
overall system security without changing existing software or in-
creasing software’s run time (§10).
RingRAM makes the following contributions:
• RingRAM is a simple, auditable, high-performance, unified
hardware security primitive for IoT devices (§3). We quanti-
tatively validate RingRAM’s suitability as the foundation for
both PUF and TRNG uses as well as its overheads (§8).
661RingRAM: A Unified Hardware Security
Primitive for IoT Devices that Gets Better with Age
and across chips. The goal is to find sources of variation that
result in reliable—but unpredictable—device differences that persist
across its lifetime. Because the key depends on physical properties
of the chip, it is naturally tamper-evident as physical modification
changes the derived key. This obviates the need for the burdensome
designed-in tamper evidence required by key storage approaches.
Thus, the ideal primitive for a PUF enhances within-chip vari-
ation, diminishes wafer-scale variation, is tamper evident,
and produces low-noise fingerprints that are stable with de-
vice use.
2.2 TRNG
The security of the cryptographic protocols that society depends on
rests on a small amount of non-predictability, conventionally called
a key. Random Number Generators (RNGs) provide a stream of bits
for use as key material. There are two types of RNGs, depending on
the predictability of the produced bit stream: Pseudo-Random Num-
ber Generators (PRNGs) and True-Random Number Generators
(TRNGs). PRNGs produce a sequence of bits that is deterministi-
cally derived from a seed value using a pseudorandom function
(e.g., a cryptographic hash). Being calculable from a seed means
that PRNGs have high throughput, but only the seed provides se-
curity; once the seed is known, all uses of the resulting PRNG
output stream are compromised—including other keys/seeds de-
rived from that sequence. In contrast, TRNGs produce a wholly
non-deterministic sequence where every value is independent of
previous values. Thus, every bit of the TRNG provides security.
While TRNGs are ideal from a security perspective, developers
tend to avoid them due to their low throughput. TRNGs achieve
output independence by accumulating operational chaos,1
then distilling it down such that all possible N-bit output values
have a probability of 1/2N of occurring. Accumulating N-bits of
chaos requires collecting much more than N-bits of analog-domain
measurements, because only a small fraction of each measurement
is chaotic—i.e., chaos is in the operational noise. The proportion of a
measurement influenced by chaos is called entropy.2 Thus, to create
N-bits of true randomness, a TRNG must collect entropy ∗ N -bits of
measurements and reduce that down to an N-bit output.3 Addition-
ally, the measurement rate is also limited for many chaos sources,
further reducing TRNG throughput.4 The ideal primitive for a
TRNG maintains integrity, while providing an unbounded
supply of entropy at a sufficient rate.
2.3 Unified Hardware Security Primitive
Though there are many different types of PUF and TRNG designs,
they tend to exploit similar hardware effects that are impacted by
both manufacturing and operational chaos. Thus, the ideal solution
of a single hardware security primitive that serves as the founda-
tion for both PUFs and TRNGs is possible; we refer to this as a
1Exposed sources of operational chaos are limited because they necessitate interaction
with the environment, users, or require ground truth. The deeply-deployed nature of
many IoT systems further eliminates sources of chaos.
2§8.2 covers entropy estimation algorithms in detail.
3A popular way to distil out the chaotic component of a largely deterministic set of mea-
surements is to pass the accumulated measurements as the message to a compression
function, taking the N-bit output as the TRNG response.
4For example, it takes AMD Ryzen processors 2500 clock cycles to provide 64-bits of
true randomness [11].
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
unified hardware security primitive. The two most popular unified
hardware security primitives employ Ring Oscillators (ROs) [33]
and Static Random-Access Memory (SRAM) [21]. At their lowest
level, both ROs and SRAM use the basic inverter gate to sample
chaos.
2.3.1 Ring Oscillators (ROs). ROs consist of an odd number of in-
verter gates connected together in a feedback loop. When active,
it produces a value transition wave (i.e., 0 to 1 or 1 to 0 edge) that
travels around the loop. The result is roughly equivalent to a clock
signal with a 50% duty cycle, the frequency of which is dictated by
the time it takes to circumnavigate the loop twice. Circumnaviga-
tion time is a combination of operational variation (e.g., voltage
and temperature fluctuations) and manufacturing variation (e.g.,
threshold voltage). While manufacturing variation’s effect on fre-
quency is fixed for a given chip, operational variation consists of
both systematic variation (e.g., 20°C vs. 50°C operation) and chaotic
variation (e.g., thermal noise). As discussed in §8, ROs are better
suited as a TRNG than a PUF due to their increased sensitivity to
operational chaos; this sensitivity makes ROs vulnerable to envi-
ronmental attacks.
SRAM. At the heart of an SRAM cell is a pair of cross-coupled
2.3.2
inverter gates. This cross-coupling creates a self-reinforcing bi-
stable feedback loop that enables SRAM to maintain state without
the need for the refresh operations of Dynamic Random-Access
Memory (DRAM). The aspect of this cross-coupling that is useful