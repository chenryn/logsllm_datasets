title:The Signal Private Group System and Anonymous Credentials Supporting
Efficient Verifiable Encryption
author:Melissa Chase and
Trevor Perrin and
Greg Zaverucha
The Signal Private Group System and Anonymous
Credentials Supporting Eﬃcient Veriﬁable Encryption ∗
Melissa Chase
Trevor Perrin
Microsoft Research
Signal Technology Foundation
PI:EMAIL
PI:EMAIL
Greg Zaverucha
Microsoft Research
PI:EMAIL
Draft – November 9, 2020
Abstract
In this paper we present a system for maintaining a membership list of users in
a group, designed for use in the Signal Messenger secure messaging app. The goal
is to support private groups where membership information is readily available to all
group members but hidden from the service provider or anyone outside the group. In
the proposed solution, a central server stores the group membership in the form of
encrypted entries. Members of the group authenticate to the server in a way that
reveals only that they correspond to some encrypted entry, then read and write the
encrypted entries.
Authentication in our design uses a primitive called a keyed-veriﬁcation anonymous
credential (KVAC), and we construct a new KVAC scheme based on an algebraic
MAC, instantiated in a group G of prime order. The beneﬁt of the new KVAC is
that attributes may be elements in G, whereas previous schemes could only support
attributes that were integers modulo the order of G. This enables us to encrypt group
data using an eﬃcient Elgamal-like encryption scheme, and to prove in zero-knowledge
that the encrypted data is certiﬁed by a credential. Because encryption, authentication,
and the associated proofs of knowledge are all instantiated in G the system is eﬃcient,
even for large groups.
1
Introduction
Secure messaging applications enable a user to send encrypted messages to one or more
recipients. A notion of groups is often supported: messages sent to a group will be delivered
to all users who are current members of the group. Typically a group is created by a user
to contain an initial set of members. These members (and the group creator) are given
∗An extended abstract of this paper appeared at CCS’2020, this is the full version.
1
privileges to add and remove other members and grant them privileges, and so on. The
result is that group membership is managed by the members.
The standard approach is to store the membership list, in plaintext, in a database
on a server. The downside to this approach is that the server has a stored repository of
associations between its users, and can easily insert malicious users into groups to receive
messages. These are serious threats for an encrypted messaging system.
The Signal messaging app [Sig19] previously introduced a private group approach where
the membership list is hidden from the server. In Signal’s system the group membership
list is maintained in a distributed fashion by each user [Mar14]. To change the membership
of a group, a user updates their local copy of the membership list, then sends this new
list to every other member via encrypted 1-to-1 messages. If some messages are lost (e.g.
the sender loses connectivity before sending all messages), or clients attempt simultaneous
updates, then members will end up with inconsistent views of membership. In an attempt
to reduce the duration of this inconsistency, Signal clients will process group updates from
users outside the membership list if the message contains a group-speciﬁc secret, but this
weakens access-control
[RMS17].
To address these problems with distributed private groups, we introduce a new ap-
proach. In our new approach, group members encrypt the membership list using a shared
key and store the encrypted entries on a server. This means clients can acquire an up-to-
date view of group membership by simply querying the server, and the server can apply
access-control rules to all group updates. Using encryption in this manner introduces new
requirements:
• Anonymous authentication: When a group member wishes to add or remove another
user from the group, or fetch the membership list, the existing member must ﬁrst
authenticate to the server so that the server can determine whether the member
is allowed to perform this operation. This is also true for the standard “plaintext
on server” approach, but in our system the group entry contains an encrypted user
identity (UID) rather than a plaintext UID. The group member must anonymously
authenticate by proving ownership of the encrypted UID, without the server learning
the UID.
• Deterministic encryption: It is important that each plaintext UID in a group corre-
sponds to a single encrypted UID in that group, and that an entry must not decrypt
successfully unless it is the unique deterministic encryption of the underlying UID. If
this requirement is not met, a single UID could be added to the group using diﬀerent
ciphertexts. This would complicate access control and operations such as deletion.
Additionally, deterministic encryption means users can calculate the encrypted user
entry they are authenticating against without having to retrieve it from the server.
• Decryption and authentication consistency: Because encrypted entries are used in two
ways (decrypted by users to learn the group membership, and used for authentication
2
by the server), it is important for entries to decrypt successfully if and only if they
can be used for authentication.
We satisfy the anonymous authentication requirement using server-issued anonymous
credentials. In particular, we introduce a new form of keyed-veriﬁcation anonymous creden-
tials, extending the construction from [CMZ14] to support eﬃcient zero-knowledge proofs
compatible with veriﬁable encryption.
Given this credential scheme, the server will issue users time-limited auth credentials for
their UID. Users can then provide the server a zero-knowledge proof that they have a valid
auth credential matching an encrypted entry. Because of the zero-knowledge property, the
server receives assurance that the user possesses such an auth credential without learning
the UID certiﬁed by the credential.
We satisfy the requirements for deterministic encryption, and decryption and authen-
tication consistency, in two ways. As part of authentication, users prove to the server
that their encrypted entry is a correct deterministic encryption of some UID. As part of
decryption, users check that a ciphertext is a deterministic encryption of the decrypted
UID.
Proﬁle keys With the above building blocks we have a rudimentary private group sys-
tem. We then build a more sophisticated system that additionally stores an encrypted
proﬁle key for each group member. Proﬁle keys are used in Signal to encrypt proﬁle data
such as avatar images and proﬁle names that provide a more user-friendly view of a user’s
identity [Lun17]. Encrypted proﬁle data is stored on the server, but is not decryptable by
the server. Users will share their proﬁle key (and thus their proﬁle data) with other users
whom they trust.
To improve the Signal group experience we will store encrypted proﬁle keys in the
group membership list alongside encrypted UIDs so that group members will see a proﬁle-
enhanced view of the membership list, rather than simply a list of UIDs.
Storing encrypted proﬁle keys introduces a new requirement for UID and proﬁle key
consistency: it is important that the server only stores a pair (UID ciphertext, proﬁle key
ciphertext) if this pair correctly decrypt to a UID and its associated proﬁle key, even if
these ciphertexts are created by a malicious group member.
We satisfy this requirement with an additional server-issued anonymous credential.
Unlike the auth credentials discussed previously which are issued to the owners of UIDs,
these proﬁle key credentials are issued to any user who knows another user’s proﬁle key.
Users will register a proﬁle key commitment with the server. This enables other users to
perform a blinded credential issuance with the server where the user proves knowledge of
the proﬁle key matching the proﬁle key commitment, and the server issues them a proﬁle
key credential that certiﬁes both a UID and proﬁle key (this is a blinded issuance since the
server is issuing a credential for a proﬁle key it does not know).
3
After a user (Alice) acquires a proﬁle key credential for another user (Bob), she can
add Bob to groups by providing UID and proﬁle key ciphertexts for Bob along with a
zero-knowledge proof that these ciphertexts encrypt values which are certiﬁed by a proﬁle
key credential.
1.1 System Overview
We can summarize the main objects in the Signal Private Group System from the perspec-
tive of two users, Alice and Bob. Fig. 1 shows a typical interaction sequence in the system,
and more details on these objects are presented in Section 5.
• Bob generates a ProﬁleKey and registers his ProﬁleKeyCommitment with the server.
• Bob trusts Alice to view his proﬁle data and so shares his ProﬁleKey with Alice by
sending her an encrypted message.1
• Alice contacts the server, without identifying herself, and uses Bob’s ProﬁleKey to
fetch a ProﬁleKeyCredential for Bob’s UID and ProﬁleKey.
• Alice and Bob contact the server periodically to fetch AuthCredentials for their UID.
• Alice creates a new group containing her and Bob by generating a random Group-
MasterKey and deriving GroupPublicP arams from it, then registering the Group-
PublicP arams with the server. Alice also uploads pairs of (UidCiphertext, Proﬁle-
KeyCiphertext) for herself and Bob. Alice proves these ciphertexts are correct by
proving that she has an AuthCredential for her UidCiphertext, and by proving she
has a ProﬁleKeyCredential for each pair of ciphertexts.
• Alice sends Bob the GroupMasterKey via an encrypted message. Bob can now au-
thenticate with his AuthCredential to download the other group entries and decrypt
them using the GroupMasterKey. If Bob’s entry is authorized to add or delete mem-
bers of the group, Bob can also authenticate to the server and request it to perform
these operations.
Cryptography For eﬃciency and simplicity, our solution is designed to work using cryp-
tography instantiated in a group G of prime order q. Our encryption scheme is symmetric-
key, deterministic, CCA-secure, and has a property we call unique ciphertexts, meaning
that it is intractable to ﬁnd two valid encryptions of the same plaintext, even with knowl-
edge of the key. Since it is a variant of Elgamal encryption in G, it has small ciphertexts
with eﬃcient encryption and decryption. Moreover, it is compatible with the eﬃcient
1This is an end-to-end encrypted message which we assume the secure messaging platform provides. For
details of E2E encryption in Signal, see [Sig19].
4
Figure 1: Overview of the main operations. In this sequence user A creates a group and
adds user B to it, then user B fetches the group state.
5
zero-knowledge proof system we use for credential presentation, allowing us to prove that
ciphertexts are well-formed with respect to a public commitment of the key, and that the
plaintext is an attribute from a credential.
For the latter part of the proof, we need a credential system that supports attributes
that are group elements. Previously known anonymous credentials and KVAC schemes
only support attributes from Zq. Following the approach to constructing a KVAC scheme
from [CMZ14], we ﬁrst design an algebraic MAC where messages may be elements of G or
Zq. We prove our new MAC is secure in the random oracle model, assuming i) that DDH
in G is hard, and ii) that a simpler MAC, called MACGGM, from [CMZ14] is secure. Our
security analysis of our encryption scheme ﬁrst deﬁnes the new properties required for the
private group system, then we prove the scheme is secure under the DDH assumption.
We then give protocols for credential (blind) issuance and presentation, to construct a
complete KVAC system satisfying the security properties deﬁned in [CMZ14]. The resulting
credential scheme and proof protocols are eﬃcient, and can be instantiated using well-
known non-interactive generalized Schnorr proofs of knowledge.
Security Properties The server in our system can neither decrypt group entries, nor
forge new entries. These are our main security goals.
However, the server can observe a small amount of information regarding group state,
and could perform limited modiﬁcations to this state:
• The server could observe when a particular encrypted entry performs some action,
such as fetching the membership list, or adding or deleting other encrypted entries.
Making updates not leak anything would be very expensive, e.g. clients would have to
re-encrypt and rewrite a maximum-size group state with each operation and include
a proof of correctness over the entire state.
• The server could delete ciphertexts or reinstate old ciphertexts. We believe this
system could be extended to add end-to-end integrity-protection by having clients
sign each new group state (along with an incrementing ”version” number), however
we have not tackled that in the initial system.
A malicious server could corrupt the group state by writing invalid ciphertexts, or in-
consistent UID and proﬁle key ciphertexts. This shouldn’t provide the server any capability
beyond interrupting service to users, which the server could do more easily by simply not
responding to client queries.
A user who has acquired a group’s GroupMasterKey and then leaves the group (or is
deleted) retains the ability to collude with the server to encrypt and decrypt group entries.
In the current system a new group would have to be created, excluding the removed user(s).
An automated or more sophisticated re-keying strategy could also be added as a future
extension.
6
Assuming an honest server, it should not be possible for malicious users to forge authen-
tications, violate the server’s access control rules, or violate the consistency requirements
between decryption and authentication of UID ciphertexts, or between UID ciphertexts
and proﬁle key ciphertexts.
2 Preliminaries and Related Work
Notation We use capital letters to denote group elements, and lower case letters to
denote integers modulo the group order. The notation x ∈R X means that x is chosen
uniformly at random from the set X.
2.1 Group Description and Hardness Assumptions
The new cryptographic primitives in this paper are designed to work in a cyclic group,
denoted G, of prime order q. We require that G has three associated functions.
1. A function HashToG : {0, 1}∗ → G that hashes strings to group elements. This should
be based on a cryptographic hash function; we will model it as a random oracle.
2. A function HashToZq : {0, 1}∗ → Zq, also based on a cryptographic hash function.
3. A function EncodeToG : {0, 1}(cid:96) → G, that maps (cid:96)-bit strings to elements of G in a
reversible way. The parameter (cid:96) depends on the size of G and the encoding.
For our security analysis, we will assume that the decisional Diﬃe-Hellman problem
(DDH) is hard in G, i.e., given (Ga, Gb, C) decide if C = Gab. This implies that the discrete
logarithm problem (DLP) is also hard in G, i.e., given Y = Gx it is hard to ﬁnd x. We also
require that MACGGM is uf-cma-secure for the security of our MAC, and the only known
proofs are in the generic group model, so we inherit this assumption as well.
Unlike some credential systems, we don’t require pairings or the strong RSA assump-
tion. The CPU cost of a pairing in BLS12-381 is about 40x the time required for a scalar
multiplication in the Ristretto group we use (as described in §6). Similarly, the gap is
roughly 50x between scalar multiplication in Ristretto and RSA-3072 exponentiations. Us-
ing prime order groups also means the credential system can use the same elliptic curve as
is used for key agreement and signatures.
2.2 Keyed-Veriﬁcation Anonymous Credentials (KVAC)
An anonymous credential system [Cha85, CV02, PZ13] is a set of cryptographic protocols:
A credential issuance protocol provides users with credentials that “certify” some set of
attributes. A credential presentation protocol enables the user to prove that they possess
a credential whose attributes satisfy some predicate without revealing the credential or
7
anything else about it (a zero-knowledge proof). There is a vast literature on anonymous
credentials, a good starting point on the subject is [RCE15].
Traditional anonymous credentials designs are based on public key signatures: the
credential Alice holds is a special type of signature on the attributes. When she presents
the credential to Bob, she proves (in zero-knowledge) that her credential is a valid signature
with respect to the credential issuer’s public key. The beneﬁt of signature-based credentials
is that Alice may present her credential to anyone in possession of the issuer’s public key,
but the drawback is that known constructions are relatively expensive, being based on
the strong RSA assumption [CL03] or groups with a pairing [CL04], or if the credentials
are eﬃcient (using prime order groups [PZ13, BL13]) they do not support multi-show
unlinkability. This means that if Alice presents her credential to Bob twice, he can link
these presentations.
With keyed-veriﬁcation anonymous credentials (KVAC) [CMZ14], the issuer and veriﬁer
are the same party (or share a key), and so the design can use a MAC in place of a signature
scheme. It is then possible to have an eﬃcient credential system constructed in a group of
prime order, with multi-show unlinkability. In the present scenario the issuer and veriﬁer