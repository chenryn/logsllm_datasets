下面是bash，zsh，sh和ksh的语法：
```
## 语法 ##
VAR=value
FOO=bar
## 设定vim为默认文本编辑器 ##
EDITOR=vim
export $EDITOR
## 考虑安全性，设定默认shell连接超时时间 ##
TMOUT=300
export TMOUT
## 你可以直接使用export命令设定命令的搜素路径 ##
export PATH=$PATH:$HOME/bin:/usr/local/bin:/path/to/mycoolapps
```
然后，使用printenv或者echo或printf命令查看环境变量PATH，EDITOR，和TMOUT的值：
```
printenv PATH
echo "$EDITOR"
printf "%s\n" $TMOUT
```
### 怎么修改一个现有的环境变量？
下面是语法：
```
export VAR=value
## 或者 ##
VAR=value
export $VAR
## 把默认文本编辑器从vim改为emacs ##
echo "$EDITOR" ## <--- 屏幕输出vim
EDITOR=emacs   ## <--- 修改
export $EDITOR ## <--- 让修改在其他会话生效
echo "$EDITOR" ## <--- 屏幕输出emacs 
```
**tcsh shell下增加和修改变量**的语法是下面这样的：
```
## 语法
setenv var value
printenv var
## 设置变量foo的值为bar ##
setenv foo bar
echo "$foo"
printenv foo
## 设置变量PATH ##
setenv PATH $PATH\:$HOME/bin
echo "$PATH"
## 设置变量PAGER ##
setenv PAGER most
printf "%s\n" $PAGER
```
### 找出bash shell的配置文件
用下面的命令列出bash shell的文件：
```
ls -l ~/.bash* ~/.profile /etc/bash* /etc/profile
```
示例输出：
[![Fig.05: List all bash environment configuration files](/data/attachment/album/201503/29/221947gwam5wdqphm5mp1w.jpg)](http://www.cyberciti.biz/howto/shell-primer-configuring-your-linux-unix-osx-environment/attachment/list-bash-enviroment-variables/)
*图5：列出bash的所有配置文件*
要查看所有的bash配置文件，输入：
```
less ~/.bash* ~/.profile /etc/bash* /etc/profile
```
可以使用文字编辑器比如vim或emacs来一个一个编辑bash配置文件：
```
vim ~/.bashrc
```
编辑/etc/目录下的文件，输入：
```
## 首先是备份，以防万一
sudo cp -v /etc/bashrc /etc/bashrc.bak.22_jan_15
########################################################################
## 然后，随心所欲随便改吧，好好玩玩shell环境或者提高一下效率:)                 ##
########################################################################
sudo vim /etc/bashrc
```
### 被Bash shell初始化过程中应用的文件搞糊涂了吗？
下面的"bash初始化文件"流程图应该有些帮助：
![](/data/attachment/album/201503/29/221949w5kouu69ocee5kvo.jpg)
根据账户设定的默认shell，你的用户配置或系统配置可能是下面其中一种：
### 找出zsh shell配置文件
zsh的[wiki](http://zshwiki.org/home/config/files)中建议用下面的命令：
```
strings =zsh | grep zshrc
```
示例输出：
```
/etc/zshrc
.zshrc
```
输入下面的命令列出你的zsh shell文件：
```
ls -l /etc/zsh/* /etc/profile ~/.z*
```
查看所有zsh配置文件：
```
less /etc/zsh/* /etc/profile ~/.z*
```
### 找出ksh shell配置文件
1. 查看~/.profile或者/etc/profile文件。
### 找出tcsh shell配置文件
1. C shell查看~/.login，~/.cshrc文件。
2. TC shell查看~/.tcshrc和~/.cshrc文件。
### 我可以写个类似这样每次登录时都自动执行的脚本吗？
是的，把你的命令或别名或其他设定添加到~/.bashrc（bash shell）或者~/.profile（sh/ksh/bash）或者~/.login（csh/tcsh）文件中。
### 我可以写个类似这样每次登出都自动执行的脚本吗？
是的，把你的命令或别名或其他设定添加到~/.bash\_logout（bash）或者~/.logout（csh/tcsh）文件。
### history：获取关于shell会话的更多信息
输入history命令来查看本次会话的历史：
```
history
```
示例输出：
```
    9  ls
   10  vi advanced-cache.php
   11  cd ..
   12  ls
   13  w
   14  cd ..
   15  ls
   16  pwd
   17  ls
   ....
   ..
   ...
   91  hddtemp /dev/sda
   92  yum install hddtemp
   93  hddtemp /dev/sda
   94  hddtemp /dev/sg0
   95  hddtemp /dev/sg1
   96  smartctl -d ata -A /dev/sda | grep -i temperature
   97  smartctl -d ata -A /dev/sg1 | grep -i temperature
   98  smartctl  -A /dev/sg1 | grep -i temperature
   99  sensors
```
输入history 20来查看命令历史的后20条：
```
history 20
```
示例输出：
[![Fig.06: View session history in the bash shell using history command](/data/attachment/album/201503/29/221950x3788tqafrldrclu.jpg)](http://www.cyberciti.biz/howto/shell-primer-configuring-your-linux-unix-osx-environment/attachment/history-outputs/)
*图6：在bash shell中使用history命令查看会话历史*
你可以重复使用之前的命令。简单地按下[上]或[下]方向键就可以查看之前的命令。在shell提示符下按下[CTRL-R]可以向后搜索历史缓存或文件来查找命令。重复最后一次命令，只需要在shell提示符下输入!!就好了：
```
ls -l /foo/bar
!!
```
在以上的历史记录中找到命令#93 (hddtemp /dev/sda)，输入：
```
!93
```
### 使用sudo或su改变用户
下面是语法：
```
su userName
## 登录为tom用户 ##
su tom
## 为用户tom打开一个新的shell会话 ##
su tom
## 登录为root用户 ##
su -
## sudo命令语法（必须在系统中配置有这个命令） ##
sudo -s
sudo tom
```
看看帖子"[Linux下使用其他用户身份运行命令](http://www.cyberciti.biz/open-source/command-line-hacks/linux-run-command-as-different-user/)"更多地了解sudo，su和runuser命令。
### shell别名
别名仅仅是命令的一个快捷方式。
### 列出所有的别名
输入下面的命令：
```
alias
```
示例输出：
```
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'
alias bc='bc -l'
alias cd..='cd ..'
alias chgrp='chgrp --preserve-root'
alias chmod='chmod --preserve-root'
alias chown='chown --preserve-root'
alias cp='cp -i'
alias dnstop='dnstop -l 5 eth1'
alias egrep='egrep --color=auto'
alias ethtool='ethtool eth1'
```
### 设定一个别名
bash/zsh语法：
```
alias c='clear'
alias down='sudo /sbin/shutdown -h now'
```
对于命令clear可以输入c别名，这样我们就可以输入c代替clear命令来清空屏幕：
```
c
```
或者输入down来关闭基于Linux的服务器：
```
down
```