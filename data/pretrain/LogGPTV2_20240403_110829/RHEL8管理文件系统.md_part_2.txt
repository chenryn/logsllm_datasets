通常，红帽建议您使用 XFS，除非有 ext4
的特定用例。您还应测量目标服务器和存储系统上特定应用的性能，以确保您选择了适当类型的文件系统。
::: table
[]{#assembly_overview-of-available-file-systems_managing-file-systems.html#idm139716118431680}
**表 1.2. 本地文件系统建议概述**
::: table-contents
  场景                               推荐的文件系统
  ---------------------------------- ----------------
  没有特殊用例                       XFS
  大服务器                           XFS
  大存储设备                         XFS
  大文件                             XFS
  多线程 I/O                         XFS
  单线程 I/O                         ext4
  有限 I/O 功能（在 1000 IOPS 下）   ext4
  有限带宽（在 200MB/s 下）          ext4
  CPU 绑定工作负载                   ext4
  支持离线缩小                       ext4
:::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#network-file-systems_assembly_overview-of-available-file-systems}网络文件系统 {.title}
:::
网络文件系统也称为客户端/服务器文件系统，使客户端系统能够访问存储在共享服务器上的文件。这使得多个系统上的多个用户可以共享文件和存储资源。
此类文件系统构建自一个或多个将一组文件系统导出到一个或多个客户端的服务器。客户端节点无法访问底层块存储，而是使用允许更佳访问控制的协议与存储交互。
::: variablelist
[可用网络文件系统]{.term}
:   ::: itemizedlist
    -   RHEL 客户最常用的客户端/服务器文件系统是 NFS 文件系统。RHEL
        提供了一个 NFS 服务器组件，用于通过网络导出本地文件系统，并通过
        NFS 客户端导入这些文件系统。
    -   RHEL 还包括支持流行 Microsoft SMB 文件服务器以实现 Windows
        互操作性的 CIFS 客户端。用户空间 Samba 服务器从 RHEL 服务器为
        Windows 客户端提供 Microsoft SMB 服务。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#shared-storage-file-systems_assembly_overview-of-available-file-systems}共享存储文件系统 {.title}
:::
共享存储文件系统有时称为集群文件系统，允许集群中的每台服务器通过本地存储区域网络(SAN)直接访问共享块设备。
::: variablelist
[和网络文件系统的比较]{.term}
:   与客户端/服务器文件系统一样，共享存储文件系统在属于群集成员的一组服务器上工作。但与
    NFS
    不同，任何单一服务器都向其他成员提供对数据或元数据的访问：群集的每个成员都可以直接访问同一存储设备（
    [*共享存储*]{.emphasis}），并且所有群集节点都访问同一组文件。
[并发]{.term}
:   缓存一致性是集群文件系统中的关键，可确保数据的一致性和完整性。集群中所有文件的单个版本都必须对群集内的所有节点可见。文件系统必须阻止群集成员同时更新同一存储块，并导致数据崩溃。为此，共享存储文件系统使用集群范围的锁定机制来仲裁对存储的访问，作为并发控制机制。例如，在创建新文件或写入在多个服务器中打开的文件之前，服务器上的文件系统组件必须获得正确的锁定。
    群集文件系统的要求是提供高度可用的服务，如 Apache Web
    服务器。群集的任何成员都将看到其共享磁盘文件系统中存储的数据的完全一致视图，并且所有更新都会通过锁定机制正确仲裁。
[性能特性]{.term}
:   由于锁定开销的计算成本，共享磁盘文件系统并不总是能同时运行在同一系统上运行的本地文件系统。共享磁盘文件系统在工作负载下运行良好，其中每个节点几乎只能写入不与其他节点共享的一组特定文件，或者一组节点以几乎只读的方式共享一组文件。这至少会导致跨节点缓存无效，并可最大限度地提高性能。
    设置共享磁盘文件系统非常复杂，并且调优应用以在共享磁盘文件系统中表现可能颇有挑战性。
[可用的共享存储文件系统]{.term}
:   ::: itemizedlist
    -   Red Hat Enterprise Linux 提供 GFS2 文件系统。GFS2 与 Red Hat
        Enterprise Linux High Availability Add-On 和 Resilient Storage
        附加组件紧密整合。
    :::
    Red Hat Enterprise Linux 支持集群中大小为 2 到 16 个节点的 GFS2。
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#choosing-between-network-and-shared-storage-file-systems_assembly_overview-of-available-file-systems}在网络和共享存储文件系统间进行选择 {.title}
:::
在网络和共享存储文件系统间选择时，请考虑以下几点：
::: itemizedlist
-   对于提供 NFS 服务器的环境，基于 NFS
    的网络文件系统是极其常见和常用的选择。
-   网络文件系统可以使用非常高性能的网络技术（如 Infiniband 或 10
    千兆位以太网）进行部署。这意味着，您不应该仅将共享存储文件系统转向共享存储文件系统来获得存储的原始带宽。如果访问速度至关重要，则使用
    NFS 导出类似 XFS 的本地文件系统。
-   共享存储文件系统的设置或维护并非易事，因此您应仅在无法为本地或网络文件系统提供所需的可用性时进行部署。
-   集群环境中的共享存储文件系统消除了在涉及迁移高可用性服务的典型故障切换情景中需要执行的卸载和挂载所需的步骤，有助于减少停机时间。
:::
红帽建议您使用网络文件系统，除非您有共享存储文件系统的特定用例。主要将共享存储文件系统用于需要提供高可用性服务且最短停机时间且具有严格的服务级别要求的部署。
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#volume-managing-file-systems_assembly_overview-of-available-file-systems}卷管理文件系统 {.title}
:::
卷管理文件系统集成整个存储堆栈，以实现简洁和内堆栈优化。
::: variablelist
[可用卷管理文件系统]{.term}
:   ::: itemizedlist
    -   Red Hat Enterprise Linux 8 提供 Stratis
        卷管理器作为技术预览。Stratis 在文件系统层中使用 XFS，并将其与
        LVM、设备映射器和其他组件集成。
    :::
    Stratis 首次在 Red Hat Enterprise Linux 8.0
    中发布。它被设计为填补红帽弃用 Btrfs 时出现的空白。Stratis 1.0
    是一个直观、基于命令行的卷管理器，可以在隐藏用户复杂性的同时执行重要的存储管理操作：
    ::: itemizedlist
    -   卷管理
    -   创建池
    -   精简存储池
    -   快照
    -   自动读取缓存
    :::
    Stratis 提供强大的功能，但目前缺乏与其他产品（如 Btrfs 或
    ZFS）的某些功能。最值得注意的是，它不支持自我修复的 CRC。
:::
:::
:::
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html}
::: chapter
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#managing-local-storage-using-rhel-system-roles_managing-file-systems}第 2 章 使用 RHEL 系统角色管理本地存储 {.title}
:::
要使用 Ansible 管理 LVM 和本地文件系统(FS)，您可以使用 `存储`{.literal}
角色，这是 RHEL 8 中可用的 RHEL 系统角色之一。
使用 `存储`{.literal} 角色可让您从 RHEL 7.7 开始，在多台机器和所有 RHEL
版本中自动管理磁盘和逻辑卷上的文件系统。
有关 RHEL 系统角色以及如何应用它们的更多信息，请参阅 [RHEL
系统角色简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/getting-started-with-rhel-system-roles_configuring-basic-system-settings){.link}。
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#storage-role-intro_managing-local-storage-using-rhel-system-roles}存储角色简介 {.title}
:::
`存储`{.literal} 角色可以管理：
::: itemizedlist
-   磁盘上未被分区的文件系统
-   完整的 LVM 卷组，包括其逻辑卷和文件系统
:::
使用 `存储`{.literal} 角色，您可以执行以下任务：
::: itemizedlist
-   创建文件系统
-   删除文件系统
-   挂载文件系统
-   卸载文件系统
-   创建 LVM 卷组
-   删除 LVM 卷组
-   创建逻辑卷
-   删除逻辑卷
-   创建 RAID 卷
-   删除 RAID 卷
-   创建带有 RAID 的 LVM 池
-   删除带有 RAID 的 LVM 池
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#parameters-that-identify-a-storage-device-in-the-storage-system-role_managing-local-storage-using-rhel-system-roles}在存储设备角色中识别存储设备的参数 {.title}
:::
您的 `存储`{.literal}
角色配置只会影响您在以下变量中列出的文件系统、卷和池：
::: variablelist
[`storage_volumes`{.literal}]{.term}
:   在所有要管理的未分区磁盘中的文件系统列表。
    当前不支持的分区。
[`storage_pools`{.literal}]{.term}
:   要管理的池列表。
    目前唯一支持的池类型是 LVM。使用 LVM
    时，池代表卷组（VG）。每个池中都有一个要由角色管理的卷列表。对于
    LVM，每个卷对应一个带文件系统的逻辑卷（LV）。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#an-example-ansible-playbook-to-create-an-xfs-file-system_managing-local-storage-using-rhel-system-roles}在块设备中创建 XFS 文件系统的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook 应用 `存储`{.literal}
角色，以使用默认参数在块设备中创建 XFS 文件系统。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
`存储`{.literal}
角色只能在未分区、整个磁盘或逻辑卷(LV)中创建文件系统。它不能在分区中创建文件系统。
:::
::: example
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#idm139716123743680}
**例 2.1. 在 /dev/sdb 上创建 XFS 的 playbook**
::: example-contents
``` screen
---
- hosts: all
  vars:
    storage_volumes:
      - name: barefs
        type: disk
        disks:
          - sdb
        fs_type: xfs
  roles:
    - rhel-system-roles.storage
```
::: itemizedlist
-   卷名称（`示例中为 barefs`{.literal} ）目前是任意卷。`存储`{.literal}
    角色根据 disk `:`{.literal} 属性中列出的磁盘设备识别卷。
-   您可以省略 `fs_type: xfs`{.literal} 行，因为 XFS 是 RHEL 8
    中的默认文件系统。
-   要在 LV 上创建文件系统，请在 disk `:`{.literal} 属性下提供 LVM
    设置，包括括起的卷组。详情请参阅 [管理逻辑卷的 Ansible playbook
    示例](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_logical_volumes/assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes#an-example-playbook-to-manage-logical-volumes_managing-lvm-logical-volumes-using-rhel-system-roles){.link}。
    不要提供到 LV 设备的路径。
:::
:::
:::
::: itemizedlist
**其它资源**
-   有关 `存储系统`{.literal} 角色中使用的参数的详情，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#an-example-ansible-playbook-to-persistently-mount-a-file-system_managing-local-storage-using-rhel-system-roles}永久挂载文件系统的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook 应用 `存储`{.literal}
角色来立即永久挂载 XFS 文件系统。
::: example
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#idm139716091247488}
**例 2.2. 在 /dev/sdb 上将文件系统挂载到 /mnt/data 的 playbook**
::: example-contents
``` screen
---
- hosts: all
  vars:
    storage_volumes:
      - name: barefs
        type: disk
        disks:
          - sdb
        fs_type: xfs
        mount_point: /mnt/data
  roles:
    - rhel-system-roles.storage
```
::: itemizedlist
-   此 playbook 将文件系统添加到 `/etc/fstab`{.literal}
    文件中，并立即挂载文件系统。
-   如果 `/dev/sdb 设备或`{.literal} 挂载点目录上的文件系统不存在，则
    playbook 会创建它们。
:::
:::
:::
::: itemizedlist
**其它资源**
-   有关 `存储系统`{.literal} 角色中使用的参数的详情，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#an-example-playbook-to-manage-logical-volumes_managing-local-storage-using-rhel-system-roles}管理逻辑卷的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook `应用存储`{.literal}
角色在卷组中创建 LVM 逻辑卷。
::: example
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#idm139716127223776}
**例 2.3. 在 myvg 卷组中创建 mylv 逻辑卷的 playbook**
::: example-contents
``` screen
- hosts: all