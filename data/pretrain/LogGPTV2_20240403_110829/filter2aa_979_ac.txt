JPA 可以依靠 JDBC 对 JDO 进行对象持久化，而 ORM 只是 JPA 当中的一个规范，我们常
见的 Hibernate、Mybatis 和 TopLink 什么的都是 ORM 的具体实现。 
概念性的东西知道就行了，能记住最好。很多东西可能真的是会用，但是要是让你去定
义或者去解释的时候发现会有些困难。重点了解 JDBC 是个什么东西，知道 Hibernate 和
Mybatis 是 ORM 的具体的实现就够了。 
Object: 
在 Java 当中 Object 类（java.lang.object）是所有 Java 类的祖先。每个类都使用 Object 作
第 36 页 
为超类。所有对象（包括数组）都实现这个类的方法。所以在认识 Java 之前应该有一个对
象的概念。 
关系型数据库和非关系型数据库： 
数据库是按照数据结构来组织、存储和管理数据的仓库。 
关系型数据库，是建立在关系模型基础上的数据库。关系模型就是指二维表格模型,因
而一个关系型数据库就是由二维表及其之间的联系组成的一个数据组织。当前主流的关系
型数据库有 Oracle、DB2、Microsoft SQL Server、Microsoft Access、MySQL 等。 
NoSQL，指的是非关系型的数据库。随着互联网 web2.0 网站的兴起，传统的关系数据
库在应付 web2.0 网站，特别是超大规模和高并发的 SNS 类型的 web2.0 纯动态网站已经显
得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了
非常迅速的发展。（1、High performance - 对数据库高并发读写的需求、2、Huge Storage - 
对海量数据的高效率存储和访问的需求。3、High Scalability && High Availability- 对
数据库的高可扩展性和高可用性的需求）常见的非关系型数据库:Membase、MongoDB、
Hypertable、Apache Cassandra、CouchDB 等。 
常见的 NoSQL 数据库端口： 
MongoDB:27017、28017、27080 
CouchDB:5984 
Hbase:9000 
Cassandra:9160 
Neo4j:7474 
Riak:8098 
在引入这么多的概念之后我们今天的故事也就要开始了,概念性的东西后面慢慢来。引
入这些东西不只仅仅是为了讲一个 SQL 注入，后面很多地方可能都会用到。 
传统的 JDBC 大于要经过这么些步骤完成一次查询操作，java 和数据库的交互操作: 
1. 
准备 JDBC 驱动 
2. 
加载驱动 
3. 
获取连接 
4. 
预编译 SQL 
5. 
执行 SQL 
6. 
处理结果集 
7. 
依次释放连接 
sun 只是在 JDBC 当中定义了具体的接口，而 JDBC 接口的具体的实现是由数据库提供厂
商去写具体的实现的， 比如说 Connection 对象，不同的数据库的实现方式是不同的。 
使用传统的 JDBC 的项目已经越来越少了，曾经的 model1 和 model2 已经被 MVC 给代
替了。如果用传统的 JDBC 写项目你不得不去管理你的数据连接、事物等。而用 ORM 框架
一般程序员只用关心执行 SQL 和处理结果集就行了。比如 Spring 的 JdbcTemplate、Hibernate
的 HibernateTemplate 提供了一套对 dao 操作的模版，对 JDBC 进行了轻量级封装。开发人员
只需配置好数据源和事物一般仅需要提供一个 SQL、处理 SQL 执行后的结果就行了，其他的
事情都交给框架去完成了。 
第 37 页 
2、经典的 JDBC 的 Sql 注入 
Sql 注入产生的直接原因是拼凑 SQL，绝大多数程序员在做开发的时候并不会去关注 SQL
最终是怎么去运行的，更不会去关注 SQL 执行的安全性。因为时间紧，任务重完成业务需
求就行了，谁还有时间去管你什么 SQL 注入什么？还不如喝喝茶，看看妹子。正是有了这
种懒惰的程序员 SQL 注入一直没有消失，而这当中不乏一些大型厂商。有的人可能心中有
防御 Sql 注入意识，但是在面对复杂业务的时候可能还是存在侥幸心理，最近还是被神奇路
人甲给脱裤了。为了处理未知的 SQL 注入攻击，一些大厂商开始采用 SQL 防注入甚至是使
用某些厂商的 WAF。 
JDBCSqlInjectionTest.java类： 
package org.javaweb.test; 
import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.sql.SQLException; 
第 38 页 
public class JDBCSqlInjectionTest { 
/** 
 * sql注入测试 
 * @param id 
 */ 
public static void sqlInjectionTest(String id){ 
String MYSQLDRIVER = "com.mysql.jdbc.Driver";//MYSQL驱动 
//Mysql连接字符串 
String MYSQLURL = 
"jdbc:mysql://localhost:3306/wooyun?user=root&password=caonimei&useUn
icode=true&characterEncoding=utf8&autoReconnect=true"; 
String sql = "SELECT * from corps where id = "+id;//查询语句 
try { 
Class.forName(MYSQLDRIVER);//加载MYSQL驱动 
Connection conn = DriverManager.getConnection(MYSQLURL);//
获取数据库连接 
PreparedStatement pstt = conn.prepareStatement(sql); 
ResultSet rs = pstt.executeQuery(); 
System.out.println("SQL:"+sql);//打印SQL 
while(rs.next()){//结果遍历 
System.out.println("ID:"+rs.getObject("id"));//ID 
System.out.println("厂
商:"+rs.getObject("corps_name"));//输出厂商名称 
System.out.println("主站"+rs.getObject("corps_url"));//
厂商URL 
} 
rs.close();//关闭查询结果集 
pstt.close();//关闭PreparedStatement 
conn.close();//关闭数据连接 
} catch (ClassNotFoundException e) { 
e.printStackTrace(); 
} catch (SQLException e) { 
e.printStackTrace(); 
} 
} 
public static void main(String[] args) { 
sqlInjectionTest("2 and 1=2 union select 
version(),user(),database(),5 ");//查询id为2的厂商 
} 
} 
现在有以下 Mysql 数据库结构(后面用到的数据库结构都是一样)： 
第 39 页 
看下图代码是一个取数据和显示数据的过程。第 20 行就是典型的拼 SQL 导致 SQL 注入，
现在我们的注入将围绕着 20 行展开： 
当传入正常的参数”2”时输出的结果正常： 
第 40 页 
当参数为 2 and 1=1 去查询时，由于 1=1 为 true 所以能够正常的返回查询结果： 
当传入参数 2 and 1=2 时查询结果是不存在的，所以没有显示任何结果。Tips:在某些场
景下可能需要在参数末尾加注释符如：“--”、“#”，“/**”, 使用注释符号的作用在于注释掉
从当前代码末尾到 SQL 末尾的语句，如果不使用注释符号可能程序在传入的 SQL 后还有拼
接其他语句。--在 oracle 和 mysql 都可用，mysql 还可以用#、/**。 
执行 order by 4 正常显示数据 order by 5 错误说明查询的字段数是 4。 
第 41 页 
Order by 5 执行后直接爆了一个 SQL 异常： 
用联合查询执行:2 and 1=2 union select version(),user(),database(),5 
第 42 页 
小结论： 
通过控制台执行 SQL 注入可知 SQL 注入跟平台无关、跟开发语言关系也不大，而是跟
数据库有关。 
知道了拼 SQL 肯定是会造成 SQL 注入的，那么我们应该怎样去修复上面的代码去防止
SQL 注入呢？其实只要把参数经过预编译就能够有效的防止 SQL 注入了，我们已经依旧提交
SQL 注入语句会发现之前能够成功注入出数据库版本、用户名、数据库名的语句现在无法带
入数据库查询了： 
第 43 页 
3、PreparedStatement 实现防注入 
SQL 语句被预编译并存储在 PreparedStatement 对象中。然后可以使用此对象多次高效
地执行该语句。 
Class.forName(MYSQLDRIVER);//加载MYSQL驱动 
Connection conn = DriverManager.getConnection(MYSQLURL);//获取数据库连接 
String sql = "SELECT * from corps where id = ? ";//查询语句 
PreparedStatement pstt = conn.prepareStatement(sql);//获取预编译的
PreparedStatement对象 
pstt.setObject(1, id);//使用预编译SQL 
ResultSet rs = pstt.executeQuery(); 
从Class.forName反射去加载MYSQL启动开始，到通过DriverManager去获取一个
本地的连接数据库的对象。而拿到一个数据连接以后便是我们执行SQL与事物处理的过程。
当我们去调用PreparedStatement的方法如：executeQuery或executeUpdate等都
会通过mysql的JDBC实现对Mysql数据库做对应的操作。Java里面连接数据库的方式一般
来说都是固定的格式，不同的只是实现方式。所以只要我们的项目中有加载对应数据库的
jar包我们就能做相应的数据库连接。而在一个Web项目中如果/WEB-INF/lib下和对应容
器的lib下只有mysql的数据库连接驱动包，那么就只能连接MYSQL了，这一点跟其他语言
有点不一样，不过应该容易理解和接受，假如php.ini不开启对mysql、mssql、oracle
等数据库的支持效果都一样。修复之前的SQL注入的方式显而易见了，用“？”号去占位，
预编译SQL的时候会自动根据pstt里的参数去处理，从而避免SQL注入。 
String sql = "SELECT * from corps where id = ? "; 
pstt = conn.prepareStatement(sql);//获取预编译的PreparedStatement对象 
pstt.setObject(1, id);//使用预编译SQL 
ResultSet rs = pstt.executeQuery(); 
在通过conn.prepareStatement去获取一个PreparedStatement便会以预编译
去处理查询SQL，而使用conn.createStatement得到的只是一个普通的Statement不
第 44 页 
会去预编译SQL语句，但Statement执行效率和速度都比prepareStatement要快前者是
后者的父类。 
从类加载到连接的关闭数据库厂商根据自己的数据库的特性实现了 JDBC 的接口。类
加载完成之后才能够继续调用其他的方法去获取一个连接对象，然后才能过去执行 SQL
命令、返回查询结果集(ResultSet)。Mysql 的 Driver：public class Driver extends 
NonRegisteringDriver implements java.sql.Driver{} 
在加载驱动处下断点（22 行），可以跟踪到 mysql 的驱动连接数据库到获取连接的整个
过程。 
第 45 页 
F5 进入到 Driver 类： 
驱动加载完成后我们会得到一个具体的连接的对象 Connection,而这个 Connection 包含
了大量的信息，我们的一切对数据库的操作都是依赖于这个 Connection 的： 
第 46 页 
conn.prepareStatement(sql);在获取PreparedStatement对象的时进入会进
入到Connection类的具体的实现类ConnectionImpl类。然后调用其
prepareStatement方法。 
而nativeSQL方法调用了EscapeProcessor类的静态方法escapeSQL进行转意，返
回的自然是转意后的SQL。预编译默认是在客户端的用
com.mysql.jdbc.PreparedStatement本地SQL拼完SQL，最终mysql数据库收到的
SQL是已经替换了“?”后的SQL，执行并返回我们查询的结果集。 
从上而下大概明白了预编译做了个什么事情，并不是用了PreparedStatement这个
对象就不存在SQL注入而是跟你在预编译前有没有拼凑SQL语句，String sql = “select 
* from xxx where id = ”+id//这种必死无疑。 
第 47 页 
Web中绕过SQL防注入： 
Java 中的 JSP 里边有个特性直接 request.getParameter("Parameter");去获取请求的数据是
不分 GET 和 POST 的，而看过我第一期的同学应该还记得我们的 Servlet 一般都是两者合一的
方式去处理的，而在 SpringMVC 里面如果不指定传入参数的方式默认是 get 和 post 都可以
接受到。 
SpringMvc 如： 
@RequestMapping(value="/index.aspx",method=RequestMethod.GET) 
public String index(HttpServletRequest request,HttpServletResponse 
response){ 
System.out.println("------------"); 
return "index"; 
} 
上面默认指定只接收 GET 请求，而大多数时候是很少有人去指定请求的方式的。说这么多
其实就是为了告诉大家我们可以通过 POST 方式去绕过普通的 SQL 防注入检测！ 
Web 当中最容易出现 SQL 注入的地方： 
1、 常见的文章显示、分类展示。 
2、 用户注册、用户登录处。 
3、 关键字搜索、文件下载处。 
4、 数据统计处（订单查询、上传下载统计等）经典的如 select 下拉框注入。 
5、 逻辑略复杂处(密码找回以及跟安全相关的)。 