title:Bootstrapping in Gnutella: A Measurement Study
author:Pradnya Karbhari and
Mostafa H. Ammar and
Amogh Dhamdhere and
Himanshu Raj and
George F. Riley and
Ellen W. Zegura
Bootstrapping in Gnutella: A Measurement
Study
Pradnya Karbhari, Mostafa Ammar, Amogh Dhamdhere, Himanshu Raj,
George Riley, and Ellen Zegura
Georgia Institute of Technology, Atlanta, GA-30332
{pradnya,ammar,amogh,rhim,ewz}@cc.gatech.edu
PI:EMAIL(cid:1)
Abstract. To join an unstructured peer-to-peer network like Gnutella,
peers have to execute a bootstrapping function in which they discover
other on-line peers and connect to them. Until this bootstrapping step is
complete, a peer cannot participate in ﬁle sharing activities. Once com-
pleted, a peer’s search and download experience is strongly inﬂuenced
by the choice of neighbor peers resulting from the bootstrapping step.
Despite its importance, there has been very little attention devoted to
understanding the behavior of this bootstrapping function. In this paper,
we study the bootstrapping process of a peer in the Gnutella network.
We ﬁnd that (1) there is considerable variation among various servent
implementations, and hence in their bootstrapping performance. (2) The
neighbors of a peer, which are the outcome of the bootstrapping process,
play a very important role in the peer’s search and download perfor-
mance. (3) Even though the GWebCache system for locating peers is
designed to operate as a truly distributed caching system, it actually
operates more like a centralized infrastructure function, with signiﬁcant
load imbalance. (4) The GWebCache system is subject to signiﬁcant
misreporting of peer and GWebCache availability, due to stale data and
absence of validity checks.
1 Introduction
To join an unstructured peer-to-peer network like Gnutella, peers have to execute
a bootstrapping function in which they discover other on-line peers and connect
to them. These initial neighbor peers determine the new peer’s location in the
overall Gnutella topology, and ultimately its search and download performance.
Also, from the user perspective, the time spent by the peer in bootstrapping
is critical because until the bootstrapping step is complete, a peer cannot par-
ticipate in ﬁle sharing activities such as searching and downloading. From our
experience, this time can vary signiﬁcantly for diﬀerent Gnutella servents1.
Despite the signiﬁcance of the bootstrapping process in unstructured peer-
to-peer networks, it has received very little attention to date. There have been
(cid:1) This work is supported in part by NSF grants ANI-0240485 and ANI-9973115.
1 The implementations of Gnutella peers are referred to as servents because they fun-
ction as servers and as clients. We use the terms peers and servents interchangeably.
C. Barakat and I. Pratt (Eds.): PAM 2004, LNCS 3015, pp. 22–32, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
Bootstrapping in Gnutella: A Measurement Study
23
various studies[1,2] aimed at characterization of peers based on their uptimes,
bottleneck bandwidths, latencies and other factors, and trying to improve a
peer’s search and download experience[3]. However, none of these have studied
the bootstrapping function.
Initially Gnutella users relied on word of mouth to determine the address of
an on-line peer that would allow newly joining peers to tap into the network. The
use of automated caching servers, as well as caching in the Gnutella servent itself,
was introduced at a later time. As Gnutella gained in popularity after Napster
was shut down, the caches ultimately became the pre-dominant bootstrapping
technique [4]. Anecdotally, it has been observed that the switch from the use of
word of mouth to the use of automated caches resulted in a signiﬁcant change
to the structure of the Gnutella network and a worsening of its performance[4].
In this paper, we undertake a measurement study of the current bootstrap-
ping process in the Gnutella network. Our investigation consists of three parts:
1. An analysis and performance comparison of the bootstrapping algorithms
of four Gnutella servent implementations: LimeWire[5], Mutella[6], Gtk-
Gnutella[7] and Gnucleus[8].
2. A measurement-based characterization of the Gnutella Web Caching
System[9] (GWebCaches), a primary component of bootstrapping algo-
rithms.
3. A measurement-based analysis of the role of neighbor peers, resulting from
diﬀerent bootstrapping algorithms, in the search performance of a peer.
Based on our analysis of the data collected, we highlight below our four main
ﬁndings about the current Gnutella bootstrapping system.
1. Although similar in the basic structure of the algorithm and the data struc-
tures used, the servent implementations diﬀer in the details, with signiﬁcant
impact on their bootstrapping times, as seen in our measurements.
2. The neighbors of a peer play an important role in the search performance of
the peer, thus pointing to the importance of the bootstrapping process.
3. An analysis of the request rates at diﬀerent GWebCaches points to the dispa-
rity in traﬃc volume handled by these caches– some caches are very busy,
and their host and cache lists evolve much faster than some others. The load
balancing goal of any distributed system is not really achieved in this system.
4. The GWebCache system is subject to signiﬁcant misreporting of peer and
cache availability. This is because the data reported in the updates to these
caches is not validated by the caches.
The rest of the paper is structured as follows. In Section 2, we give an over-
view of the bootstrapping process in diﬀerent Gnutella servents, with special
focus on the GWebCache system. We discuss the performance of the diﬀerent
servents with respect to their bootstrapping times in Section 3, and the role
of the resulting neighbor peers in the search performance, in Section 4. In Sec-
tion 5 we discuss the performance of the GWebCache system. In Section 6, we
summarize our ﬁndings and discuss future work.
24
P. Karbhari et al.
Table 1. GWebCache messages
Argument
ping=1
urlf ile=1
hostf ile=1
ip=
url=
statf ile=1
Cache Response
pong message to servent
list of caches
list of online hosts
host list is updated with IP address and port number
cache list is updated with URL
access statistics over last hour
2 Gnutella Bootstrapping
In this section, we describe the bootstrapping process in the Gnutella servents
we analyzed, and the functioning of the GWebCache system.
2.1 Gnutella Web Caching System
A peer intending to join the Gnutella network requires the IP addresses of online
peers in the network. Currently, the GWebCache system functions as a distri-
buted repository for maintaining this information. Peers can query the caches
in this system to get a list of online peers to connect to. In the ﬁrst execution
of a particular Gnutella servent, the only means to locate other online peers is
the GWebCache system. In successive executions, individual servent implemen-
tations try approaches apart from the GWebCaches, such as maintaining local
lists of hosts seen during their earlier runs. We ﬁrst discuss the GWebCache
system, as it is an important component of the bootstrapping functionality, and
is essential in the understanding of the servent bootstrapping algorithms.
The GWebCache system[9] is a network of voluntarily-operated caches that
maintain a list of online peers accepting incoming connections. When a new peer
wants to join the Gnutella network, it can retrieve the host list from one or more
of these GWebCaches. The GWebCaches also maintain a list of other caches in
the system. Typically each cache maintains a list of 10 other caches and 20 hosts
that are currently accepting incoming connections.
The peers in the Gnutella network are responsible for keeping the information
in these caches up-to-date; the caches do not communicate with each other at
any time. A host accepting incoming connections is supposed to update the
caches with its IP address and port number, and with information about some
other GWebCache that it believes is alive. The GWebCaches maintain the host
and cache lists as ﬁrst-in-ﬁrst-out lists.
Table 1 lists the messages sent by a client using the GWebCache protocol.
An HTTP request of the form “URL?argument” is sent to the webserver at
which the cache is located. The caches respond as shown in the table. Note that
the GWebCaches do not maintain any information about the online hosts, other
than their IP addresses and port numbers.
Bootstrapping in Gnutella: A Measurement Study
25
1. Initialize the following data structures in memory by reading the corresponding
ﬁles from disk— list of caches, list of known hosts, list of permanent hosts and
list of ultrapeer hosts (except in Gtk-Gnutella).
2. Depending on mode (ultrapeer/normal), determine the minimum number of
connections to be maintained.
3. Try to establish the minimum number of connections to peers in the order:
– In LimeWire and Gnucleus, try to connect to ultrapeers.
– Try to connect to any host in the known hosts and permanent hosts lists.
– If the servent is still not connected, request the host list from a GWebCache
(multiple GWebCaches in LimeWire) and try to connect to these hosts.
4. Periodically, a connection watchdog checks whether the minimum num of
connections (step 2) are alive. If not, try to establish a new connection (step
3).
5. Periodically update a cache with its own IP address and URL of another cache
(for LimeWire and Mutella, this is done only if in ultrapeer mode)
6. On shutdown, write the diﬀerent ﬁles to disk, for retrieval on next startup.
Fig. 1. Generic bootstrapping algorithm
Table 2. Servent implementation diﬀerences
Limewire Mutella Gtk-gnutella Gnucleus
Characteristic
Maintains ultrapeers list?
Yes
Prioritize ultrapeers when connecting? Yes
Host & cache lists prioritized by age? Yes
Updates to GWebCaches
No
No
Yes
Any mode Any mode
Yes
Yes
No
Number of hardcoded caches
3
2
Yes
No
No
Ultrapeer
mode
3
Ultrapeer
mode
181
2.2 Servent Bootstrapping Algorithms
In this section, we discuss the bootstrapping algorithms of the Gnutella ser-
vents that we compared, and point out the diﬀerences between them. We ana-
lyzed Limewire v2.9[5], Gtk-Gnutella v0.91.1[7], Mutella v0.4.3[6] and Gnucleus
v1.8.6.0[8]. All these versions support retrieval from and updates to the GWeb-
Cache system. The bootstrapping processes in the four servents are similar in
their use of the GWebCache system and the local caching of hosts.
The data structures maintained by these servents include a list of known
GWebCaches, which is periodically populated with addresses of new GWeb-
Caches. Servents also maintain lists of known hosts and permanent hosts, the
deﬁnitions of which diﬀer slightly in diﬀerent servents. Informally, permanent
hosts are hosts that the servent managed to contact in current and previous
runs. Some servents also maintain a separate list of ultrapeers2.
2 Ultrapeers[10] are hosts with high bandwidth and CPU power, and long uptimes.
Normal or leaf nodes have lower capabilities and typically connect to ultrapeers.
26
P. Karbhari et al.
Figure 1 outlines the generic bootstrapping algorithm, and Table 2 summa-
rizes the diﬀerences in the implementations, as discussed below.
1. Limewire and Gnucleus maintain a list of ultrapeers and give priority to
hosts in this list during connection initiation. Since ultrapeers have relati-
vely long uptimes and the capability to support more incoming connections,
prioritizing these peers during connection initiation increases the probability
of successfully connecting to a peer. Although Mutella also maintains a list of
ultrapeers, this information is not used during bootstrapping. Gtk-Gnutella
does not distinguish between ultrapeers and normal peers.
2. LimeWire and Gtk-Gnutella prioritize their host and cache lists by age. This
enables them to act on more recent (and hence more accurate) information.
3. Although all four servents we examined support the GWebCache system
for retrieving information, LimeWire and Mutella support updates to the
GWebCaches only in the ultrapeer mode. This is better for the system be-
cause the probability of ultrapeers accepting incoming connections is higher
than when in the leaf mode. Gtk-Gnutella and Gnucleus update the GWeb-
Caches even in the leaf mode.
4. The Gnutella servents have a set of hardcoded caches, which are used during
the very ﬁrst run of the servent, before any other information about caches
or hosts is known. As seen in Table 2, compared to other servents LimeWire
has a very high number of hardcoded caches (181), 135 of which were active
when we tried to ping them at the Gnutella level.
In the next section, we will discuss the eﬀects of these diﬀerences in boot-
strapping algorithms on the performance of diﬀerent servent implementations.
3 Bootstrapping Measurement at Servent
In this section, we compare the performance of the servents considered in our
study, based on their bootstrapping times. We deﬁne the bootstrapping time of a
servent as the time between the start of the servent and the initial establishment
of the ﬁrst stable Gnutella-level connection3. We say that a connection is stable
if it is maintained for at least threshold seconds.
3.1 Measurement Methodology
We modiﬁed the sourcecode of the three Linux-based servents (LimeWire, Gtk-
Gnutella and Mutella) to log the times at which the application was started and
shut down, and when a Gnutella-level connection was established and termina-
ted. For the Windows-based servent (Gnucleus), we used Windump[11] to collect
packet traces, and then analyzed them to determine the connection times.
We started the Linux-based servents once every hour, synchronously at two
locations, at a university campus on a Fast Ethernet Link and at a residence on
3 A “Gnutella-level” connection is established after the Gnutella handshake messages
are exchanged between the two connecting peers.
Bootstrapping in Gnutella: A Measurement Study
27
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
s
g
n
i
d
a
e
r
f
o
n
o
i
t
c
a
r
F
0
0
100
200
300
Gtk-Gnutella (univ)
Limewire (univ)
Mutella (univ)
Gnucleus (univ)
200
175
150
125
100
75
50
25
)
s
d
n
o
c
e
s
(
e
m
i
t
g
n
i
p
p
a
r
t
s
t
o
o
b
n
a
e
M
600
700
800
900
0
0
2
4
6
Gtk-Gnutella (univ)
Limewire (univ)
Mutella (univ)
10
8
Time of day (hours)
12
14
16
18
20
22
400
500
Time (seconds)
(a) CDF of servent boot-
strapping times
(b) Mean bootstrapping ti-
mes acc. to time of day
Fig. 2. Servent bootstrapping times
a DSL link to a local ISP. We started Gnucleus once every three hours at the
university location only. Each servent was allowed to run for 15 minutes, after
which it was shut down. In the following section we analyze the bootstrapping
times measured during an 11-day experiment. One limitation of our study is that
both locations in our experiments have high bandwidth access links. We did not
run any experiments at a slower access link.
3.2 Performance Measurements
Figure 2(a) shows the cumulative distribution function of the bootstrapping ti-
mes of the four servents at the university location. In this graph we set threshold
to 120 seconds. We analyzed the bootstrapping times with diﬀerent values for
threshold and observed similar results. The graphs for the bootstrapping times
of servents on the DSL link are similar.
The most striking observation is that Gtk-Gnutella performs much worse
than Mutella and LimeWire. We conjecture that this is due to the fact that
Gtk-Gnutella does not diﬀerentiate between ultrapeers and normal peers. Also,
once it selects a particular GWebCache to contact for retrieving the host list, it
uses it for 8 consecutive updates or retrievals. In Section 5, we will see that cache
quality varies; thus, maintaining a poor choice of cache can aﬀect performance.