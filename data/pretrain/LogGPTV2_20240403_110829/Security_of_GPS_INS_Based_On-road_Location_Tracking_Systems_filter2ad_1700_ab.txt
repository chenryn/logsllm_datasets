attack, it is now necessary for the attacker to identify and spoof
navigation paths that have similar distances, road curvature,
and turn angles to minimize the discrepancies between the
INS and GPS estimates. Our system, which we refer to as
ESCAPE, exploits the regular patterns that exist
in many
cities’ road networks and identiﬁes navigation paths that are
similar to the route that is reported to the monitoring center.
As a result, the inconsistencies between the INS and GPS
estimates are negligible and the attack is successfully executed.
The attack begins with the attacker providing the start and
end points of the assigned trip to ESCAPE. ESCAPE computes
two sets of paths: (i) spoofed paths and (ii) escape paths. The
spoofed paths are a set of paths that exist between the start
and end points of the trip. These are the paths that the attacker
will generate fake GPS signals and spoof the receiver to report
to the monitoring center. These should be plausible paths for
the source and destination locations. For every spoofed path,
ESCAPE computes a set of escape paths which the attacker
can use to deviate from the intended course while executing
the spooﬁng attack. In other words, a spoofed path is the route
that is reported to the monitoring center and the escape path
is the true route taken by the attacker to reach an alternate
destination. The attacker then picks an escape path that enables
him to reach his intended location. The intended location can
either be a point far away from the assigned destination (to buy
the adversary some time) or just a diversion before reaching
the assigned destination. The selected escape path corresponds
to a spoofed path which the attacker can use to generate
spooﬁng signals. Figure 2 illustrates an example of a spoofed
Fig. 2: A spoofed path example in Manhattan and the escape
destinations generated for that single spoofed path. Our algo-
rithms generate 100 distinct spoofed paths for a given start
and end location, allowing an adversary to undetectably reach
an even larger set of escape destinations.
path generated between two end points in Manhattan (green
line from green marker to red marker) and the destinations
of the escape paths (red points) generated for this particular
spoofed path. Finally, the attack is executed by spooﬁng the
tracking device to report the spoofed path while the attacker
actually drives the escape path.
C. Internals of ESCAPE
ESCAPE consists of three main building blocks: (i) graph
constructor, ii) spoofed paths generator and (iii) escape paths
generator. The graph constructor generates directed graphs
based on the road network present in the geographic area
of interest. Our attack does not enforce any limits on the
geographic area. As the name suggests, the spoofed and escape
paths generator blocks are responsible for computing and
identifying spoofed and escape paths for the attacker.
1) Graph Constructor: The paths for an area G are
generated from a directed graph GG = (V, E). We chose
OpenStreetMap [46] as the map provider as it has accurate
road information for major cities of the world along with
various meta-data such as types of roads and buildings. Each
geographic area can be represented as G = (A,C, θ, ϑ), where
(cid:2) ∈ A}
A is a set of atomic sections and C = {χ = (s, s
is a set of connections where χ indicates a connection between
. We deﬁne an atomic section
two atomic sections s and s
as a section of road between two intersections, such that it
preserves the road’s curvature but does not contain turns or
sharp curves. A connection is an intersection connecting two
atomic sections. These connections may extend the same road
or may turn into another road. The turn angle associated with
a connection χ is given by the function θ(χ) and the atomic
)|s, s
(cid:2)
(cid:2)
(cid:22)(cid:26)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:50:11 UTC from IEEE Xplore.  Restrictions apply. 
3
V
4
V
5
V
6
V
1
V
(a) Example Road Network
V3
V4
V1
V2
V5
V6
(b) The Graph Representation
8
V
9
V
V8
V7
V9
Fig. 3: Sample road and corresponding graph representation.
section’s curvature is given by the function ϑ(s) as deﬁned in
Equation 1. We represent each atomic section s by a vertex
v ∈ V and each connection χ by an edge e ∈ E. Figure 3
shows an example road network and the corresponding
graph construction. A default speed limit is assigned to each
atomic section based on the road type in OpenStreetMap.
For example, a ‘motorway’ symbolizes interstates in the
USA that have speed limits ≈ 65mph. The length, speed
limit, and geographic coordinates of the atomic section s
are stored as attributes of the corresponding vertex v. The
length and speed limit are used to calculate the fastest time
of travel between the end points. It is important to note that
this is a one time initialization step for every geographic area.
2) Spoofed Paths Generator: Spoofed paths generator
searches and compiles possible paths between the source and
destination points assigned to a speciﬁc trip. The spoofed paths
are deﬁned as a set of N routes S = {S1, . . . ,SN} such
that Si has a higher likelihood of spooﬁng than Sj, where
i  F ∗ d(PI )
where d(.) denotes the distance of a path and PI denotes
the shortest time path between the source and destination.
For this work, we set F = 1.2 to only allow paths that
are similar in distance to the computed shortest path. The
algorithm also maintains the best N paths at all times, and
(cid:2)
having a worse score is ﬁltered. For our
any new path p
evaluation, we chose N = 100 in order to determine the
attack efﬁciency in many cities for many paths (the algorithm
runs in around 1 minute for each source/destination pair).
However, a determined attacker with sufﬁcient
resources
can easily use a larger N to increase the count of spoofed
paths. Furthermore, the adversary will only be interested in a
single source/destination pair of locations on each instance
of the attack, and can therefore take more time to derive
the largest set possible of spoofed and escape paths. The
shortest path PI is also bounded by a rectangle (with added
padding of m = 1000 meters) such that all edges outside the
rectangle become out of scope. Note that the above algorithm
parameters are tunable and set to conservative values in this
work. We believe that the attack performance can substantially
improve when these parameters are tuned more aggressively,
e.g., setting F = 1.5 and N = 1000 (large values of N are
very reasonable when focusing on a single source/destination).
3) Escape Paths Generator: The idea behind the escape
paths generator is to ﬁnd all the paths an attacker can travel
to reach different destinations without raising alarms. To avoid
detection, all computed paths must have similar accelerometer
and gyroscope patterns to spoofed paths. The escape paths
corresponding to a spoofed path Si are a set of M routes
(cid:7)= Si, but semantically
Ei = {Ei1 , . . . ,EiM
similar to Si, for any Eij
∈ Ei. The paths are semantically
similar when they have similar distances, road curvature and
turn angles. These paths start at the input source, but end at
different destinations from the intended destination.
} such that Eij
(cid:22)(cid:26)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:50:11 UTC from IEEE Xplore.  Restrictions apply. 
}
Input: G = (V, E), SI
Output: NP , E = {p1, . . . , pNP
1 Initialization : E ← ∅; NP ← 0; p ← [ ]; v ← ∅
2 s ← getSourceV ertex(SI )
3 t ← getT urnsCount(SI )
4 GenerateEscapePaths(s, t)
5 function GenerateEscapePaths(s, t):